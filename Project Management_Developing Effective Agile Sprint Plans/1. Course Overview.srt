1
00:00:00,000 --> 00:00:00,657
Hello.

2
00:00:00,657 --> 00:00:03,941
I'm Michael Krasowski from Pluralsight.

3
00:00:03,941 --> 00:00:05,267
I will be presenting the module,

4
00:00:05,267 --> 00:00:09,267
Summarizing Key Learning Objectives through the course,

5
00:00:09,267 --> 00:00:13,254
Developing Effective Agile Sprint Plans.

6
00:00:13,254 --> 00:00:16,489
Let's review the three key modules of this course.

7
00:00:16,489 --> 00:00:21,135
First, we will review key Agile, Scrum, and sprint terms,

8
00:00:21,135 --> 00:00:24,443
definitions, roles, artifacts, and processes.

9
00:00:24,443 --> 00:00:24,702
Next,

10
00:00:24,702 --> 00:00:29,957
we will review all of the essential key points of planning sprints effectively.

11
00:00:29,957 --> 00:00:30,187
Finally,

12
00:00:30,187 --> 00:00:33,052
we will review how we handle the myriad of issues that

13
00:00:33,052 --> 00:00:36,620
may affect and impede your plan, such as bugs,

14
00:00:36,620 --> 00:00:37,544
staffing, spikes,

15
00:00:37,544 --> 00:00:42,979
and incomplete work and what options you can apply to mitigate them.

16
00:00:42,979 --> 00:00:46,196
Now let's review the module, Understanding the Agile Workflow.

17
00:00:46,196 --> 00:00:49,891
Team participants in the Agile and Scrum world are the product owner,

18
00:00:49,891 --> 00:00:53,223
the development team, and the Scrum Master or team leader.

19
00:00:53,223 --> 00:00:55,934
The product owner may represent a line of business,

20
00:00:55,934 --> 00:00:57,350
a steering committee, department,

21
00:00:57,350 --> 00:01:00,997
or other segments of the user or customer communities.

22
00:01:00,997 --> 00:01:04,455
The product owner needs to express the items clearly so that they are

23
00:01:04,455 --> 00:01:08,471
understandable by the development team and prioritize them so the

24
00:01:08,471 --> 00:01:11,655
development team knows what to work on next.

25
00:01:11,655 --> 00:01:15,361
Dev teams are cross-functional, but working concurrently.

26
00:01:15,361 --> 00:01:19,367
I want to emphasize this since in the traditional project model,

27
00:01:19,367 --> 00:01:21,795
typically code is developed, then tested,

28
00:01:21,795 --> 00:01:24,467
and then moved into preproduction environments as

29
00:01:24,467 --> 00:01:26,502
separate teams and/or processes.

30
00:01:26,502 --> 00:01:27,947
This team, the development team,

31
00:01:27,947 --> 00:01:32,863
is working together concurrently throughout the development process.

32
00:01:32,863 --> 00:01:34,142
In the Scrum world,

33
00:01:34,142 --> 00:01:37,998
the Scrum Master is facilitating the adherence to the Scrum process,

34
00:01:37,998 --> 00:01:42,004
and the team is self directed, that is without a team leader.

35
00:01:42,004 --> 00:01:45,752
But what I have seen so often in the absence of a Scrum Master is a

36
00:01:45,752 --> 00:01:49,088
team leader or tech leader that still provides the Agile/Scrum

37
00:01:49,088 --> 00:01:52,455
process guidance along with team leadership.

38
00:01:52,455 --> 00:01:58,068
Agile project planning outcomes are a clear vision and roadmap that

39
00:01:58,068 --> 00:02:01,220
helps justify and guide which user stories are to keep,

40
00:02:01,220 --> 00:02:03,393
leave out, or better prioritize.

41
00:02:03,393 --> 00:02:06,906
That clear vision provides a common grasp and

42
00:02:06,906 --> 00:02:09,327
understanding of what's important to the project,

43
00:02:09,327 --> 00:02:14,400
enabling a higher team morale and increases stakeholder trust.

44
00:02:14,400 --> 00:02:18,563
An Agile release is composed of the following: It begins with release planning,

45
00:02:18,563 --> 00:02:21,108
followed by one or more iterations or sprints,

46
00:02:21,108 --> 00:02:23,990
and ending with a release retrospective.

47
00:02:23,990 --> 00:02:28,023
So this is the entire Agile release from end to end.

48
00:02:28,023 --> 00:02:29,428
Iterations or sprints.

49
00:02:29,428 --> 00:02:31,912
Remember, those are interchangeable terms,

50
00:02:31,912 --> 00:02:35,202
and it's composed of the following pieces: An iteration

51
00:02:35,202 --> 00:02:37,087
or sprint begins with sprint planning,

52
00:02:37,087 --> 00:02:39,809
followed by one or more daily work activities,

53
00:02:39,809 --> 00:02:43,381
and ending with a sprint retrospective, review,

54
00:02:43,381 --> 00:02:44,847
and demo.

55
00:02:44,847 --> 00:02:48,560
So this is the entire sprint, again, from end to end.

56
00:02:48,560 --> 00:02:52,677
Daily work is composed of the following: It begins with a daily standup,

57
00:02:52,677 --> 00:02:56,253
which includes daily work progress updates and actions.

58
00:02:56,253 --> 00:02:59,464
Then it's followed by one or more daily work tasks and activities.

59
00:02:59,464 --> 00:03:01,386
That's where the work is really getting done.

60
00:03:01,386 --> 00:03:05,053
The development team is developing new and interesting software.

61
00:03:05,053 --> 00:03:07,353
So this is daily work from end to end.

62
00:03:07,353 --> 00:03:10,810
Remember, if you need an extra standup when things get tight or critical,

63
00:03:10,810 --> 00:03:11,840
just have one.

64
00:03:11,840 --> 00:03:15,677
Backlogs are the fuel driving Agile projects forward.

65
00:03:15,677 --> 00:03:17,149
They are so important.

66
00:03:17,149 --> 00:03:20,065
I want to impress on you that you need to ensure you

67
00:03:20,065 --> 00:03:21,934
have a healthy backlog process,

68
00:03:21,934 --> 00:03:25,447
which means having quality backlog items and a

69
00:03:25,447 --> 00:03:27,358
quality backlog management process.

70
00:03:27,358 --> 00:03:29,976
So hopefully this course has provided you with what you

71
00:03:29,976 --> 00:03:32,118
need to know in order to do that.

72
00:03:32,118 --> 00:03:35,888
User stories are a high-level definition of a requirement or feature.

73
00:03:35,888 --> 00:03:40,088
User stories contain just enough information so that the developers can

74
00:03:40,088 --> 00:03:44,536
produce a reasonable estimate of the effort to implement it.

75
00:03:44,536 --> 00:03:47,525
User stories collectively will add up to be your backlog.

76
00:03:47,525 --> 00:03:47,754
Sure,

77
00:03:47,754 --> 00:03:50,497
there may be other things in your backlog that are

78
00:03:50,497 --> 00:03:54,547
not characterized as a user story, but they'll mostly be stories.

79
00:03:54,547 --> 00:03:58,843
Now we talked about adopting a user story template in order to write

80
00:03:58,843 --> 00:04:02,740
consistently constructed stories and to also follow the INVEST model.

81
00:04:02,740 --> 00:04:05,470
I make strong recommendations about that.

82
00:04:05,470 --> 00:04:07,784
Use a template when writing user stories,

83
00:04:07,784 --> 00:04:12,155
and use INVEST as a checklist to ensure that the user stories

84
00:04:12,155 --> 00:04:15,566
have the fidelity and quality they need.

85
00:04:15,566 --> 00:04:17,651
Last, SMART-based tasks.

86
00:04:17,651 --> 00:04:19,897
There's a great technique for creating developer tasks,

87
00:04:19,897 --> 00:04:22,742
and they map into the word SMART.

88
00:04:22,742 --> 00:04:27,240
They are specific, measurable, achievable, relevant, and timeboxed.

89
00:04:27,240 --> 00:04:29,056
So after you write your tasks,

90
00:04:29,056 --> 00:04:32,689
use the SMART keywords as a checklist to ensure the highest

91
00:04:32,689 --> 00:04:35,511
quality of your task descriptions as well.

92
00:04:35,511 --> 00:04:40,795
So both INVEST and SMART are great little checklists to make sure the

93
00:04:40,795 --> 00:04:46,413
work you're doing meets a certain quality level.

94
00:04:46,413 --> 00:04:48,823
In the Planning Sprints Effectively module,

95
00:04:48,823 --> 00:04:52,264
we did a deep dive into several very key topics.

96
00:04:52,264 --> 00:04:53,644
The first, timeboxing.

97
00:04:53,644 --> 00:04:58,599
Now timeboxing is a set length of time that's applied for all agile events,

98
00:04:58,599 --> 00:05:00,459
such as the sprint itself, of course,

99
00:05:00,459 --> 00:05:04,496
but also the daily standup and the sprint planning to name the most obvious.

100
00:05:04,496 --> 00:05:05,261
Release planning.

101
00:05:05,261 --> 00:05:09,212
Most people forget all about it and go right to sprint planning.

102
00:05:09,212 --> 00:05:13,442
Release planning is a series of sprints that are contained within a release,

103
00:05:13,442 --> 00:05:16,261
and a series of releases are contained within a project.

104
00:05:16,261 --> 00:05:21,339
To develop a release plan, we take as input the product vision,

105
00:05:21,339 --> 00:05:24,014
the product roadmap, and the product backlog,

106
00:05:24,014 --> 00:05:29,927
and the output are releases, each with features or stories identified.

107
00:05:29,927 --> 00:05:35,204
These would be our release goals and possibly target dates and budgets as well.

108
00:05:35,204 --> 00:05:37,007
Don't forget about release planning.

109
00:05:37,007 --> 00:05:41,491
Most people just jump right to sprints, and it's just a series of sprints.

110
00:05:41,491 --> 00:05:44,453
Release planning gives you a great bird's- eye view,

111
00:05:44,453 --> 00:05:49,407
and remember, executives like to see that high-level planning activity.

112
00:05:49,407 --> 00:05:50,929
Next, sprint planning.

113
00:05:50,929 --> 00:05:53,842
Now, within sprint planning, a key element is estimation,

114
00:05:53,842 --> 00:05:57,191
and we learned that solid estimating skills are

115
00:05:57,191 --> 00:06:00,702
critical to the Agile team's productivity,

116
00:06:00,702 --> 00:06:02,967
reliability, and most importantly,

117
00:06:02,967 --> 00:06:06,147
predictability of the sprint planning outcomes.

118
00:06:06,147 --> 00:06:11,063
Velocity is the amount of work a team can produce in a single sprint.

119
00:06:11,063 --> 00:06:14,096
Knowing your velocity helps you better predict the amount of

120
00:06:14,096 --> 00:06:17,307
work you can commit to in your sprint planning.

121
00:06:17,307 --> 00:06:21,358
Now, in your spring planning sessions, we will define the backlog,

122
00:06:21,358 --> 00:06:24,304
estimate sprints, prioritize the backlog,

123
00:06:24,304 --> 00:06:27,921
and use our known velocity to make sprint commitments.

124
00:06:27,921 --> 00:06:28,696
Again, velocity,

125
00:06:28,696 --> 00:06:33,415
very key and a great representation of what you've done in the past,

126
00:06:33,415 --> 00:06:36,895
as well as what you could do in the future.

127
00:06:36,895 --> 00:06:38,469
Daily scrums and work.

128
00:06:38,469 --> 00:06:43,353
Daily scrums are an essential element of the dev team's daily activity.

129
00:06:43,353 --> 00:06:46,192
Sharing what you have done since the last standup scrum,

130
00:06:46,192 --> 00:06:50,778
what you plan to do today, and discuss any roadblocks or issues.

131
00:06:50,778 --> 00:06:52,079
That's a biggie as well.

132
00:06:52,079 --> 00:06:57,052
A lot of gold or great ideas come out of discussing roadblocks and issues.

133
00:06:57,052 --> 00:06:59,357
Based on the complexity of the issues,

134
00:06:59,357 --> 00:07:02,177
certainly follow-on meetings can be conducted of a

135
00:07:02,177 --> 00:07:04,584
subset of the team to go resolve.

136
00:07:04,584 --> 00:07:08,787
Now, daily work is when the dev team is excelling and producing results,

137
00:07:08,787 --> 00:07:12,447
writing code, testing, and producing usable software.

138
00:07:12,447 --> 00:07:14,747
That's where the rubber meets the road, of course.

139
00:07:14,747 --> 00:07:16,461
And a really exciting part, of course,

140
00:07:16,461 --> 00:07:20,619
of the whole spring process are the sprint demonstrations.

141
00:07:20,619 --> 00:07:23,822
Now is the chance for the team to shine and show the

142
00:07:23,822 --> 00:07:26,328
product owner the results of the sprint.

143
00:07:26,328 --> 00:07:30,573
Here you are demonstrating your workable features to the product owner,

144
00:07:30,573 --> 00:07:31,668
and, of course,

145
00:07:31,668 --> 00:07:33,848
potential other user representatives that might be

146
00:07:33,848 --> 00:07:36,229
part of the demonstration itself.

147
00:07:36,229 --> 00:07:37,999
Reviews and retrospective.

148
00:07:37,999 --> 00:07:39,561
Don't forget to do your reviews.

149
00:07:39,561 --> 00:07:44,455
The sprint review is focused on improving the process that created the product,

150
00:07:44,455 --> 00:07:46,710
and it's just the development team that usually

151
00:07:46,710 --> 00:07:49,028
attends and not the product owner.

152
00:07:49,028 --> 00:07:51,149
And a review may be 15 minutes or 20.

153
00:07:51,149 --> 00:07:52,988
It doesn't take a lot of time,

154
00:07:52,988 --> 00:07:56,644
but whatever you learn and can change will affect each and

155
00:07:56,644 --> 00:07:59,860
every sprint and add to its success, productivity,

156
00:07:59,860 --> 00:08:01,763
and higher quality.

157
00:08:01,763 --> 00:08:05,071
Now, retrospectives are really just a team self-audit,

158
00:08:05,071 --> 00:08:08,297
and you would discuss things like what went well?

159
00:08:08,297 --> 00:08:08,793
What didn't?

160
00:08:08,793 --> 00:08:10,969
Should we try new things in the next sprint?

161
00:08:10,969 --> 00:08:13,086
Should we stop doing things that weren't working?

162
00:08:13,086 --> 00:08:14,473
And things like that.

163
00:08:14,473 --> 00:08:18,678
All these things, the retrospective and the reviews I just mentioned,

164
00:08:18,678 --> 00:08:21,998
help bring the team closer together and bond better.

165
00:08:21,998 --> 00:08:25,044
+ As we know, not everything will go perfectly right,

166
00:08:25,044 --> 00:08:27,723
and we need to be prepared with options.

167
00:08:27,723 --> 00:08:32,129
Now we had first discussed how to avoid problems early to better

168
00:08:32,129 --> 00:08:35,622
ensure your sprints run smoothly and are able to complete the

169
00:08:35,622 --> 00:08:37,340
user stories that you committed to.

170
00:08:37,340 --> 00:08:42,506
So one of those ways is to nurture and support your product owner.

171
00:08:42,506 --> 00:08:44,721
Do not neglect your product owner.

172
00:08:44,721 --> 00:08:46,948
They may need some tender loving care.

173
00:08:46,948 --> 00:08:51,067
They have a critical role in managing and prioritizing the backlog.

174
00:08:51,067 --> 00:08:53,324
Help them in any way you can.

175
00:08:53,324 --> 00:08:56,599
If they are successful, you will be successful.

176
00:08:56,599 --> 00:08:59,839
So spend the extra time and effort, get to know them,

177
00:08:59,839 --> 00:09:03,550
get to understand them, and even help them write the backlog.

178
00:09:03,550 --> 00:09:06,507
Now you can use slack for technical debt.

179
00:09:06,507 --> 00:09:10,846
Again, slack is time set aside for unanticipated activities.

180
00:09:10,846 --> 00:09:13,964
Basically, you are setting aside time in reserve.

181
00:09:13,964 --> 00:09:16,131
It is likely best used to reduce your technical debt,

182
00:09:16,131 --> 00:09:20,653
but it could be used for, say, user stories take longer to develop.

183
00:09:20,653 --> 00:09:22,227
Testing takes longer than you thought.

184
00:09:22,227 --> 00:09:24,520
Always allow a little slack in there.

185
00:09:24,520 --> 00:09:27,809
Your velocity will help you manage that just right.

186
00:09:27,809 --> 00:09:32,460
Use spikes for control tests or experiments to provide information

187
00:09:32,460 --> 00:09:37,661
and hopefully to clarify any technical issues by setting aside the

188
00:09:37,661 --> 00:09:39,563
complexities of the production code.

189
00:09:39,563 --> 00:09:41,320
Spikes are very small,

190
00:09:41,320 --> 00:09:45,329
isolated experiments when you need to prove an approach to seek

191
00:09:45,329 --> 00:09:48,463
additional information or prove some technical worthiness.

192
00:09:48,463 --> 00:09:50,390
If you see several spikes coming up,

193
00:09:50,390 --> 00:09:53,438
then set aside some additional slack to do those.

194
00:09:53,438 --> 00:09:57,907
Now there may be many obstacles to your team's philosophy such as sick time,

195
00:09:57,907 --> 00:10:00,358
vacation, people issues, and turnover.

196
00:10:00,358 --> 00:10:03,360
Try to minimize these as best as you can.

197
00:10:03,360 --> 00:10:06,558
It is proven though that teams that work consistently together

198
00:10:06,558 --> 00:10:10,549
over time have more reliable velocities.

199
00:10:10,549 --> 00:10:12,514
Dealing with problems.

200
00:10:12,514 --> 00:10:14,464
You will have problems and issues.

201
00:10:14,464 --> 00:10:17,065
This is simply part of the app dev world,

202
00:10:17,065 --> 00:10:20,235
and you might try solving a problem by using your slack time,

203
00:10:20,235 --> 00:10:21,561
maybe cancelling a spike,

204
00:10:21,561 --> 00:10:25,886
and using that time or working a few more hours than normal.

205
00:10:25,886 --> 00:10:28,737
As a last resort, you may need to reduce scope,

206
00:10:28,737 --> 00:10:33,153
that is remove a user story in order to accomplish what you need to do within

207
00:10:33,153 --> 00:10:37,300
the sprint timebox and then be able to deliver working,

208
00:10:37,300 --> 00:10:38,792
functional software.

209
00:10:38,792 --> 00:10:41,861
Okay, sometimes there's a thing called a lost sprint.

210
00:10:41,861 --> 00:10:45,312
Now that should be very rare, but if this happens,

211
00:10:45,312 --> 00:10:48,557
your biggest challenge will be informing the product owner and why

212
00:10:48,557 --> 00:10:52,804
this is the best course of action and also shoring up any team morale

213
00:10:52,804 --> 00:10:55,129
issues in your review and retrospective.

214
00:10:55,129 --> 00:10:57,060
Again, lost sprints are rare.

215
00:10:57,060 --> 00:10:59,374
Try the approach of reducing scope,

216
00:10:59,374 --> 00:11:04,784
maybe reducing a lot of scope so you can at least deliver some working software.

217
00:11:04,784 --> 00:11:06,791
Okay, lastly, partially done work.

218
00:11:06,791 --> 00:11:10,274
Don't let the partial code become technical debt.

219
00:11:10,274 --> 00:11:12,645
That will only cause more trouble downstream.

220
00:11:12,645 --> 00:11:16,763
So consider removing partially completed stories from the code base

221
00:11:16,763 --> 00:11:20,818
unless they will be part of the very next sprint.

222
00:11:20,818 --> 00:11:24,513
So partially done work means you had to maybe reduce the scope

223
00:11:24,513 --> 00:11:26,872
so some user stories will not be delivered,

224
00:11:26,872 --> 00:11:29,820
but some of that code may be partially developed,

225
00:11:29,820 --> 00:11:32,708
so you'll want to isolate that code and take it out or,

226
00:11:32,708 --> 00:11:39,000
as a last resort, leave it in if you know for sure it'll be in your very next sprint.

