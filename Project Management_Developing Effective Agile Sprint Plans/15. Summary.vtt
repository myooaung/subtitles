WEBVTT
1
00:00:00.800 --> 00:00:03.302
Now let's summarize this module with these key takeaways.

2
00:00:03.302 --> 00:00:06.923
We first discussed how to avoid problems early to better

3
00:00:06.923 --> 00:00:10.553
ensure your sprints run smoothly and are able to complete the

4
00:00:10.553 --> 00:00:12.424
user stories you've committed to.

5
00:00:12.424 --> 00:00:14.390
Nurture your product owner.

6
00:00:14.390 --> 00:00:16.794
Do not neglect your product owner.

7
00:00:16.794 --> 00:00:18.976
They may need some tender loving care at times.

8
00:00:18.976 --> 00:00:23.117
They have a critical role of managing and prioritizing the backlog.

9
00:00:23.117 --> 00:00:25.101
Help them in any way you can.

10
00:00:25.101 --> 00:00:29.722
If they are successful, you will absolutely be successful as well.

11
00:00:29.722 --> 00:00:31.909
Use slack for technical debt.

12
00:00:31.909 --> 00:00:35.572
Slack is time set aside for unanticipated activities.

13
00:00:35.572 --> 00:00:38.224
Basically, you are setting aside time in reserve.

14
00:00:38.224 --> 00:00:40.939
It is likely best used to reduce your technical debt.

15
00:00:40.939 --> 00:00:45.326
Use spikes for controlled tests or experiments to provide

16
00:00:45.326 --> 00:00:48.942
information and to clarify any technical issues by setting aside

17
00:00:48.942 --> 00:00:51.470
the complexities of the production code.

18
00:00:51.470 --> 00:00:53.065
Spikes are small,

19
00:00:53.065 --> 00:00:55.741
isolated experiments where you need to prove an

20
00:00:55.741 --> 00:00:57.804
approach to seek additional information.

21
00:00:57.804 --> 00:00:59.716
If you see several spikes coming up,

22
00:00:59.716 --> 00:01:02.310
then set aside some additional slack to do those.

23
00:01:02.310 --> 00:01:04.674
There could be many obstacles to your team's velocity,

24
00:01:04.674 --> 00:01:07.837
such as sick time, vacation, people issues,

25
00:01:07.837 --> 00:01:09.027
and turnover.

26
00:01:09.027 --> 00:01:11.334
Try to minimize these as best as you can.

27
00:01:11.334 --> 00:01:14.490
It is proven that teams that work consistently together

28
00:01:14.490 --> 00:01:18.025
over time have more reliable velocities.

29
00:01:18.025 --> 00:01:21.994
The second part of this module was about making mid-sprint corrections.

30
00:01:21.994 --> 00:01:24.104
Don't be too stressed about doing this.

31
00:01:24.104 --> 00:01:25.571
It will happen from time to time.

32
00:01:25.571 --> 00:01:27.223
You will have problems and issues.

33
00:01:27.223 --> 00:01:29.796
That is simply part of the app dev world,

34
00:01:29.796 --> 00:01:33.299
and you might try solving a problem by using your slack time,

35
00:01:33.299 --> 00:01:38.081
canceling a spike, and using that time or working a few more hours than normal.

36
00:01:38.081 --> 00:01:42.877
As a last resort, you might need to reduce scope, that is remove a user story.

37
00:01:42.877 --> 00:01:44.475
Handling a lost sprint.

38
00:01:44.475 --> 00:01:46.479
This should be very rare, but if this happens,

39
00:01:46.479 --> 00:01:49.118
your biggest challenge will be informing the product owner

40
00:01:49.118 --> 00:01:51.921
and why that is the best course of action.

41
00:01:51.921 --> 00:01:56.599
And also, shoring up any team morale issues in your review and retrospective.

42
00:01:56.599 --> 00:01:58.252
Partially done work.

43
00:01:58.252 --> 00:02:00.792
Don't let that partial code become technical debt.

44
00:02:00.792 --> 00:02:03.520
That will only cause more trouble downstream,

45
00:02:03.520 --> 00:02:07.988
so consider removing the partially completed stories from the code base unless,

46
00:02:07.988 --> 00:02:12.124
of course, they will be part of the very next sprint.

47
00:02:12.124 --> 00:02:13.651
Okay, in the next module,

48
00:02:13.651 --> 00:02:21.000
we'll be summarizing the entire course and outlining all of the key takeaways. I'll see you there.

