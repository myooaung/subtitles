1
00:00:01,050 --> 00:00:01,845
SMART, like INVEST,

2
00:00:01,845 --> 00:00:04,391
is a checklist of traits or characteristics to follow

3
00:00:04,391 --> 00:00:08,698
as a guideline to write better, inconsistent tasks.

4
00:00:08,698 --> 00:00:12,946
SMART is not for user stories, but for the task of a user story.

5
00:00:12,946 --> 00:00:15,323
We are going to use task 3 from the last slide as our

6
00:00:15,323 --> 00:00:17,697
sample task and compare it to the template.

7
00:00:17,697 --> 00:00:20,318
The first is S for specific.

8
00:00:20,318 --> 00:00:24,286
A task needs to be specific enough so that everyone can understand it.

9
00:00:24,286 --> 00:00:28,052
It helps to keep other tasks from overlapping and also helps people to

10
00:00:28,052 --> 00:00:31,701
understand either the tasks add up to the full story or not.

11
00:00:31,701 --> 00:00:35,315
In this example, it seems specific enough, so check.

12
00:00:35,315 --> 00:00:37,184
The next is M for measurable.

13
00:00:37,184 --> 00:00:39,900
The key of measurable is actually simple.

14
00:00:39,900 --> 00:00:41,340
Can we mark it as done?

15
00:00:41,340 --> 00:00:44,770
The team needs to agree on what that means during task development,

16
00:00:44,770 --> 00:00:48,384
but it should also include what the task is intended to do,

17
00:00:48,384 --> 00:00:51,675
testing, and maybe with some refactoring within the timebox,

18
00:00:51,675 --> 00:00:52,562
so check.

19
00:00:52,562 --> 00:00:54,581
Next is A for achievable.

20
00:00:54,581 --> 00:00:58,100
The task owner must be able to achieve, that is, complete the task.

21
00:00:58,100 --> 00:01:02,848
It may be achievable, but isn't achievable within the timebox of the sprint?

22
00:01:02,848 --> 00:01:04,122
If so, check.

23
00:01:04,122 --> 00:01:09,259
If not, is it possible to decompose into more subtasks?

24
00:01:09,259 --> 00:01:11,906
Next is R for relevant.

25
00:01:11,906 --> 00:01:16,002
Every task must be relevant and contribute directly to this user story.

26
00:01:16,002 --> 00:01:19,984
User stories are broken into tasks for the developer's benefit certainly,

27
00:01:19,984 --> 00:01:22,940
but the product owner should still be able to presume that

28
00:01:22,940 --> 00:01:26,024
each task can be justified and explained.

29
00:01:26,024 --> 00:01:28,027
Once again, check.

30
00:01:28,027 --> 00:01:30,772
Next is T for timeboxed.

31
00:01:30,772 --> 00:01:34,141
A task should be limited to a specific duration.

32
00:01:34,141 --> 00:01:37,653
And as you will see in the next module on sprint planning, in hours.

33
00:01:37,653 --> 00:01:40,521
This doesn't need to be a formal estimate in hours or days,

34
00:01:40,521 --> 00:01:45,131
but there must be an expectation so people know when they need to seek help.

35
00:01:45,131 --> 00:01:49,207
If a task is harder than expected, then the team needs to split the task,

36
00:01:49,207 --> 00:01:54,246
change players, or do something to help the task and story get done.

37
00:01:54,246 --> 00:01:57,685
For this example, we think it'll fit, so check.

38
00:01:57,685 --> 00:01:59,754
If you would like to know more about the SMART characteristics,

39
00:01:59,754 --> 00:02:01,866
check out Bill Wake's writings.

40
00:02:01,866 --> 00:02:04,582
Now for a point of view.

41
00:02:04,582 --> 00:02:06,283
Now that we've covered several concepts,

42
00:02:06,283 --> 00:02:09,747
processes, and building blocks, all of which are critical to sprint planning,

43
00:02:09,747 --> 00:02:12,873
does it seem doable to you for your organization?

44
00:02:12,873 --> 00:02:15,611
Let's go over a few key points.

45
00:02:15,611 --> 00:02:16,561
Right people.

46
00:02:16,561 --> 00:02:20,920
Having the right people with the right intentions and attitudes are important.

47
00:02:20,920 --> 00:02:23,402
Agile/Scrum understanding.

48
00:02:23,402 --> 00:02:27,040
Ensure that the team has a good understanding of the Agile philosophy,

49
00:02:27,040 --> 00:02:29,033
Agile practices, and Scrum.

50
00:02:29,033 --> 00:02:31,323
Epic and user story skills.

51
00:02:31,323 --> 00:02:35,601
Most Agile projects are immediately off track by inadequate user stories,

52
00:02:35,601 --> 00:02:38,743
so encourage your team to practice on some of your customer's

53
00:02:38,743 --> 00:02:41,464
backlog items first as a practice drill.

54
00:02:41,464 --> 00:02:42,563
Task breakdowns.

55
00:02:42,563 --> 00:02:45,661
Developers usually do well here, but if they struggle,

56
00:02:45,661 --> 00:02:47,689
that's a red flag that the user stories,

57
00:02:47,689 --> 00:02:48,851
these are not well formed,

58
00:02:48,851 --> 00:02:53,087
or the development team does not have the right technical skills,

59
00:02:53,087 --> 00:02:54,966
so keep your eye out for that gap.

60
00:02:54,966 --> 00:02:55,361
Teamwork.

61
00:02:55,361 --> 00:02:58,941
The only way to accomplish this is through teamwork.

62
00:02:58,941 --> 00:03:02,087
That might sound a bit cliched, but it's true.

63
00:03:02,087 --> 00:03:02,749
Management support.

64
00:03:02,749 --> 00:03:06,264
You will need management support, and not just in the beginning.

65
00:03:06,264 --> 00:03:08,264
When pressure mounts on delivering software,

66
00:03:08,264 --> 00:03:11,641
the management is usually the first to fold,

67
00:03:11,641 --> 00:03:12,707
so beware.

68
00:03:12,707 --> 00:03:14,711
Lastly, time to gel.

69
00:03:14,711 --> 00:03:19,008
It will take a while for the team to gel and work as a well-oiled machine.

70
00:03:19,008 --> 00:03:23,000
Please be patient. Now let's summarize this module.

