WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.050
using grouping techniques,

00:00:04.050 --> 00:00:06.350
we can get some rest data from a collection.

00:00:06.350 --> 00:00:09.150
This can be done in a couple of different ways.

00:00:09.150 --> 00:00:13.400
Let's have a look at the aggregate function First for this demo,

00:00:13.400 --> 00:00:15.750
I'll be using a collection called Employees.

00:00:15.750 --> 00:00:17.250
Here is what it looks like.

00:00:17.250 --> 00:00:30.350
Let's say we want to find the total number of employees in a particular department.

00:00:30.350 --> 00:00:32.130
So this is what we can do.

00:00:32.130 --> 00:00:39.050
BB dot employees start aggregate the first perimeter to this is the grouping option.

00:00:39.050 --> 00:00:41.750
We have an operator called Group,

00:00:41.750 --> 00:00:46.050
and then we have to specify what is the I d to be used.

00:00:46.050 --> 00:00:50.610
The idea here is a property on which we want to group,

00:00:50.610 --> 00:00:54.740
since we want to find out the total number of employees working in a department.

00:00:54.740 --> 00:01:00.460
So this has to be a department and in order to specify that this is not a value,

00:01:00.460 --> 00:01:01.930
but this is one of the property.

00:01:01.930 --> 00:01:03.690
We prefix this with dollar,

00:01:03.690 --> 00:01:06.650
so hence we have to use dollar department.

00:01:06.650 --> 00:01:09.560
This is followed by the new column,

00:01:09.560 --> 00:01:14.250
our property that we want to get so which may be an employee count,

00:01:14.250 --> 00:01:19.000
and we have to specify how this country is calculated now Unfortunately,

00:01:19.000 --> 00:01:21.180
there is no operator called Count,

00:01:21.180 --> 00:01:28.170
so what we can do is we can repeatedly ad one using the some operator for every employee in

00:01:28.170 --> 00:01:32.820
a particular department and excuse us the count of the employees in this particular

00:01:32.820 --> 00:01:33.450
department.

00:01:33.450 --> 00:01:35.780
So let's save this on,

00:01:35.780 --> 00:01:43.430
see if you can execute the same as you can see.

00:01:43.430 --> 00:01:48.590
We have a nice somebody off department and the number of employees working in that

00:01:48.590 --> 00:01:49.250
department.

00:01:49.250 --> 00:01:52.230
Let's take another example this time.

00:01:52.230 --> 00:01:58.060
I want to find the average salary off every employee in a particular department to do so.

00:01:58.060 --> 00:02:02.960
I can just commit this and let's ride one more quality.

00:02:02.960 --> 00:02:06.050
Db dot employees dot aggregate.

00:02:06.050 --> 00:02:13.640
As in the previous case,

00:02:13.640 --> 00:02:18.850
the I D property would be the department and dollar department.

00:02:18.850 --> 00:02:23.650
I've read salary for that particular department,

00:02:23.650 --> 00:02:26.340
and we can use the operator called Dollar.

00:02:26.340 --> 00:02:32.200
Every G on the field salary once again like dollar department,

00:02:32.200 --> 00:02:36.010
were using dollar salary because if you do not give dollar salary,

00:02:36.010 --> 00:02:40.350
but just salary will assume salary is a text and not a property,

00:02:40.350 --> 00:02:48.750
save it and run the same command and we get the average salary in each department.

00:02:48.750 --> 00:02:54.570
We can also use the match operator to reduce this output from displaying all the average

00:02:54.570 --> 00:02:59.800
salaries to only where average salary is more than a particular limit are less than a

00:02:59.800 --> 00:03:00.650
particular limit,

00:03:00.650 --> 00:03:02.050
for example,

00:03:02.050 --> 00:03:07.160
that we want to display those departments where an employee owns an average of more than

00:03:07.160 --> 00:03:09.010
$4000.

00:03:09.010 --> 00:03:12.540
So I can use another operation here and I'll say,

00:03:12.540 --> 00:03:15.900
Dollar match on what is a match criteria.

00:03:15.900 --> 00:03:16.230
You know,

00:03:16.230 --> 00:03:16.560
case,

00:03:16.560 --> 00:03:22.730
we wanted to say the average salary to be greater than our records,

00:03:22.730 --> 00:03:23.090
too.

00:03:23.090 --> 00:03:29.050
4000 save it on the same commands,

00:03:29.050 --> 00:03:34.640
and this time we'll see a smaller subset where every average salary printed is more than

00:03:34.640 --> 00:03:35.650
$4000.

00:03:35.650 --> 00:03:40.340
And if you want to order the output in a particular ascending or descending order,

00:03:40.340 --> 00:03:44.650
we can use that as the third a perimeter to the aggregate function.

00:03:44.650 --> 00:03:47.080
So we lose a dollar start,

00:03:47.080 --> 00:03:51.770
and then we specify the property on which we want to start in this case,

00:03:51.770 --> 00:03:53.450
a V g salary,

00:03:53.450 --> 00:03:55.610
and if you want ascending,

00:03:55.610 --> 00:03:57.160
you can give it us one.

00:03:57.160 --> 00:03:58.510
If you want descending,

00:03:58.510 --> 00:04:00.350
you can give it us minus one.

00:04:00.350 --> 00:04:03.450
That's a bit and execute the same.

00:04:03.450 --> 00:04:06.250
And here is the output

