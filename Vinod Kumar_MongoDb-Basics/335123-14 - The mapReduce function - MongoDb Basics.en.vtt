WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.830
Another great tool for grouping Mongo DB documents is a function called Matt Produce at

00:00:05.830 --> 00:00:07.770
first to this malu clearly complicated,

00:00:07.770 --> 00:00:11.440
but this has got more power than the regular aggregate function,

00:00:11.440 --> 00:00:13.020
so let's go check this out.

00:00:13.020 --> 00:00:16.710
The map reduce function takes couple of parameters first,

00:00:16.710 --> 00:00:20.470
that's a db dot employees dart map reduce.

00:00:20.470 --> 00:00:25.260
The first argument is a function typically named this map.

00:00:25.260 --> 00:00:29.350
The second perimeter is a function generally known as reduced.

00:00:29.350 --> 00:00:34.380
The 3rd 1 is a bunch of options that begin someplace now,

00:00:34.380 --> 00:00:35.160
at this time,

00:00:35.160 --> 00:00:37.090
all these are considered as variables,

00:00:37.090 --> 00:00:38.760
and I don't have these variables.

00:00:38.760 --> 00:00:41.080
Let's create one by one function,

00:00:41.080 --> 00:00:41.660
map,

00:00:41.660 --> 00:00:45.330
function,

00:00:45.330 --> 00:00:49.790
reduce and who are options,

00:00:49.790 --> 00:00:51.650
which is an empty object at this time.

00:00:51.650 --> 00:00:57.430
The map function will be executed for every document in the employees collection,

00:00:57.430 --> 00:01:01.800
and we have access to that in the form off this,

00:01:01.800 --> 00:01:08.140
the map function generally called another function called Emmett with sense a key to be

00:01:08.140 --> 00:01:08.650
used,

00:01:08.650 --> 00:01:09.550
for example,

00:01:09.550 --> 00:01:14.570
distort department and then a value that we want to summaries,

00:01:14.570 --> 00:01:15.620
for example,

00:01:15.620 --> 00:01:21.670
distort salary outcome off The map function is a key value based collection where we will

00:01:21.670 --> 00:01:24.990
have a unique department names as Keith.

00:01:24.990 --> 00:01:29.080
And for every department we will have an array off salaries.

00:01:29.080 --> 00:01:36.970
Now that collection is supplied to the reduced function with a key on values.

00:01:36.970 --> 00:01:41.280
If this malfunction was called for every document and we have,

00:01:41.280 --> 00:01:41.690
let's say,

00:01:41.690 --> 00:01:42.650
for example,

00:01:42.650 --> 00:01:44.900
in number off unique department,

00:01:44.900 --> 00:01:49.870
the reduced function will be called exactly N number of times were a key,

00:01:49.870 --> 00:01:52.260
which is the department on then Aria off.

00:01:52.260 --> 00:01:53.650
All the salaries is supplied.

00:01:53.650 --> 00:01:56.960
So what we can do here is toe return,

00:01:56.960 --> 00:01:59.480
an object which is a summary off.

00:01:59.480 --> 00:02:00.550
This particular values,

00:02:00.550 --> 00:02:01.410
for example,

00:02:01.410 --> 00:02:07.290
I can simply return are a dot some off values,

00:02:07.290 --> 00:02:12.970
which means we're summing up all the salaries for a given department and returning that so

00:02:12.970 --> 00:02:19.610
that would come off this raid dysfunction is that mongo DB takes the key Onda summarized

00:02:19.610 --> 00:02:24.190
salary and then we'll add it to its bucket at the end of this,

00:02:24.190 --> 00:02:25.470
the inter bucket,

00:02:25.470 --> 00:02:29.620
which is a key on that some of salaries will be given to us.

00:02:29.620 --> 00:02:32.850
This options tells us whole 200.

00:02:32.850 --> 00:02:38.770
The response data on at this time we can simply say out is inland,

00:02:38.770 --> 00:02:45.870
save it and then we can just access this as Mongol.

00:02:45.870 --> 00:02:48.290
He extradition Doctor.

00:02:48.290 --> 00:02:48.790
Yes,

00:02:48.790 --> 00:02:52.450
and we have a summary report.

00:02:52.450 --> 00:02:54.370
So if you carefully observed,

00:02:54.370 --> 00:02:56.320
each department is despaired.

00:02:56.320 --> 00:03:00.180
One thing and this happens to be that some off all the salaries.

00:03:00.180 --> 00:03:00.860
In the beginning,

00:03:00.860 --> 00:03:05.180
I mentioned that my producer offers more power than the typical aggregate function.

00:03:05.180 --> 00:03:11.690
That's because we can control whether or not a particular piece of data is emitted based on

00:03:11.690 --> 00:03:12.680
certain conditions.

00:03:12.680 --> 00:03:13.550
For example,

00:03:13.550 --> 00:03:20.670
if I don't want to include the salaries less than or equal to 4000 I can do so by simply

00:03:20.670 --> 00:03:21.740
adding a condition.

00:03:21.740 --> 00:03:28.100
If this starts salary is less than or equal to 4000 return,

00:03:28.100 --> 00:03:32.440
which means out off a number of documents in the employees collection,

00:03:32.440 --> 00:03:35.860
certain off them are ignored based on this condition.

00:03:35.860 --> 00:03:37.000
So now,

00:03:37.000 --> 00:03:40.050
if I say and access the result once more,

00:03:40.050 --> 00:03:44.470
you'll see that the numbers are different.

00:03:44.470 --> 00:03:47.450
Andi smaller compared to the previous one.

00:03:47.450 --> 00:03:48.940
Also,

00:03:48.940 --> 00:03:51.890
we can are less number of departments to include,

00:03:51.890 --> 00:03:52.670
for example,

00:03:52.670 --> 00:03:54.840
that I don't want to include sales,

00:03:54.840 --> 00:03:55.390
services,

00:03:55.390 --> 00:03:56.400
support and training.

00:03:56.400 --> 00:03:58.090
I cannot one more condition,

00:03:58.090 --> 00:04:24.740
save it,

00:04:24.740 --> 00:04:27.140
execute the command once more,

00:04:27.140 --> 00:04:29.280
and you will see that in the awkward.

00:04:29.280 --> 00:04:33.400
We do not include sales supports our visas on training departments

