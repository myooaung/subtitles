WEBVTT
1
00:00:01.240 --> 00:00:04.210
[Autogenerated] here we are with my favorite topic, AWS.

2
00:00:04.210 --> 00:00:08.280
I am session policies.

3
00:00:08.280 --> 00:00:11.850
Session policies are advancing policies that you pass in a

4
00:00:11.850 --> 00:00:15.000
perimeter when you programmatically create a temporary

5
00:00:15.000 --> 00:00:17.920
session for a role or Federated user.

6
00:00:17.920 --> 00:00:20.200
So session policies are steel.

7
00:00:20.200 --> 00:00:22.000
I am policies does.

8
00:00:22.000 --> 00:00:27.050
We can expect them to follow the rules and the styles we use the so far,

9
00:00:27.050 --> 00:00:30.360
the novelty here is that they are used to grant a

10
00:00:30.360 --> 00:00:33.640
temporary access to the AWS resources.

11
00:00:33.640 --> 00:00:34.340
Moreover,

12
00:00:34.340 --> 00:00:37.530
with specifically mention here that the session policy

13
00:00:37.530 --> 00:00:42.740
is related to an I am a role object,

14
00:00:42.740 --> 00:00:45.870
there is always confusion about the rules and the user.

15
00:00:45.870 --> 00:00:48.840
So let me try to clarify what is a user?

16
00:00:48.840 --> 00:00:52.490
It is an I A m identity with unassociated set off

17
00:00:52.490 --> 00:00:55.330
permission and credentials which are static.

18
00:00:55.330 --> 00:00:56.710
They remain as they are,

19
00:00:56.710 --> 00:01:00.640
until some configuration change happens on the other side.

20
00:01:00.640 --> 00:01:05.740
A role while it is still an I am identity with specific permission.

21
00:01:05.740 --> 00:01:07.570
It is a more dynamic behavior,

22
00:01:07.570 --> 00:01:11.930
since it can be assumed dynamically by users and credentials.

23
00:01:11.930 --> 00:01:16.590
Associate ID to a role are temporary,

24
00:01:16.590 --> 00:01:20.240
but how rules and session policy feeds together.

25
00:01:20.240 --> 00:01:25.400
Let me try to explain with a simple workflow supposed that and not mean user

26
00:01:25.400 --> 00:01:31.120
creates a role identified by these magician hat with unassociated set off

27
00:01:31.120 --> 00:01:34.940
permissions specified by a session policy document.

28
00:01:34.940 --> 00:01:40.440
Then suppose we have an I am user with unassociated set off permission

29
00:01:40.440 --> 00:01:45.280
specified by identity based on the policy Which grand success too.

30
00:01:45.280 --> 00:01:46.940
Orangey resources?

31
00:01:46.940 --> 00:01:47.740
No.

32
00:01:47.740 --> 00:01:52.600
If the user assume the role created by the ad Meena,

33
00:01:52.600 --> 00:01:55.410
that means that he is empowered with additional set of

34
00:01:55.410 --> 00:02:00.330
permission and can access their blue resources with only

35
00:02:00.330 --> 00:02:05.190
caveat that this permission is temporary.

36
00:02:05.190 --> 00:02:10.490
I am rules and session policies are used in four main use cases.

37
00:02:10.490 --> 00:02:15.760
The inter account scenario I am user assume a role and is

38
00:02:15.760 --> 00:02:19.040
granted temporary permission to do something.

39
00:02:19.040 --> 00:02:23.540
Everything happens within the same AWS account.

40
00:02:23.540 --> 00:02:29.760
The cross account scenario I am user from 1/3 party AWS account,

41
00:02:29.760 --> 00:02:33.510
assume a role and is granted temporary permission to do

42
00:02:33.510 --> 00:02:37.040
something on the current AWS account.

43
00:02:37.040 --> 00:02:41.040
This is also known as business to be since the scenario,

44
00:02:41.040 --> 00:02:43.700
Then we have the service rolled in our area.

45
00:02:43.700 --> 00:02:50.530
This gin area allows an AWS service to access another AWS service As an example,

46
00:02:50.530 --> 00:02:55.770
consider in 82 instance which needs to access an s three bucket.

47
00:02:55.770 --> 00:02:56.390
Finally,

48
00:02:56.390 --> 00:03:01.050
the identity Federated scenario where an external user is granted

49
00:03:01.050 --> 00:03:05.030
access to the resources of the current AWS account.

50
00:03:05.030 --> 00:03:09.010
Let's move now to the demos which are organizing in the usual

51
00:03:09.010 --> 00:03:13.360
way as scenario is described and we are asked to perform a

52
00:03:13.360 --> 00:03:18.310
specific task in this scenario, which we will do not.

53
00:03:18.310 --> 00:03:20.590
As the infra accounts Sharia.

54
00:03:20.590 --> 00:03:25.420
Tom is a new I am user in global Mantex AWS account.

55
00:03:25.420 --> 00:03:29.660
Your task as an 80 administrator off Global Mantex is to provide

56
00:03:29.660 --> 00:03:32.940
the Tom temporary access to S three buckets.

57
00:03:32.940 --> 00:03:34.170
To be able, for example,

58
00:03:34.170 --> 00:03:40.060
to make some inventory on global Mantex resorts is if we checked current users,

59
00:03:40.060 --> 00:03:43.040
we can see the Tom User is already in place.

60
00:03:43.040 --> 00:03:46.470
I have already created a policy document to allow Tom

61
00:03:46.470 --> 00:03:52.580
to call the assume role function, which is exposed by AWS STS,

62
00:03:52.580 --> 00:03:55.840
which stands for security token service.

63
00:03:55.840 --> 00:03:59.640
Now we create an identity based the policy object.

64
00:03:59.640 --> 00:04:03.240
And then we attached this policy to Tom User.

65
00:04:03.240 --> 00:04:07.780
Now we need to establish a trust relationship between Tom and Bob,

66
00:04:07.780 --> 00:04:11.200
where Baba delegates Tom with some privileges.

67
00:04:11.200 --> 00:04:14.940
The trust relationship is defined as a Jason policy and

68
00:04:14.940 --> 00:04:19.310
magically say's that the role to which this trust is related can

69
00:04:19.310 --> 00:04:22.340
be assuming within the current account.

70
00:04:22.340 --> 00:04:25.680
Then we create a role called Tom Temporary,

71
00:04:25.680 --> 00:04:29.400
also that we are passing the trust relationship as

72
00:04:29.400 --> 00:04:31.990
para meter for the roller creation.

73
00:04:31.990 --> 00:04:35.190
Now it's time to specify the privileges granted by the

74
00:04:35.190 --> 00:04:37.830
role with the session policy document.

75
00:04:37.830 --> 00:04:40.920
I have already prepared Ageism Policy File,

76
00:04:40.920 --> 00:04:44.940
which grants access to the target as three bucket.

77
00:04:44.940 --> 00:04:50.650
We create an I am policy based on that Jason document and were touched

78
00:04:50.650 --> 00:04:54.020
the policy to the role we have just created finally,

79
00:04:54.020 --> 00:04:59.040
in the command, which allows Tom to assume the role we have just created.

80
00:04:59.040 --> 00:05:02.340
As you can see, credentials are generated.

81
00:05:02.340 --> 00:05:07.280
Also note that apart from well known access key and secret access key,

82
00:05:07.280 --> 00:05:13.340
we have a session token which by default expires in 12 hours.

83
00:05:13.340 --> 00:05:19.370
With those credentials, we can create a profile in AWS Eli Config file,

84
00:05:19.370 --> 00:05:23.040
which we will call the Tom temporary.

85
00:05:23.040 --> 00:05:26.930
With this profile, let me check my current identity which,

86
00:05:26.930 --> 00:05:30.280
as you can see, is displayed as an assumed role.

87
00:05:30.280 --> 00:05:36.070
Identity also noted that with this profile and this set off credential,

88
00:05:36.070 --> 00:05:43.000
we are allowed to upload the file to the target bucket and to retrieve the container objects

