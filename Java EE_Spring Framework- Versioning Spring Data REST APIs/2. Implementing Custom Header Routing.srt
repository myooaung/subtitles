1
00:00:01,040 --> 00:00:02,130
You might think, hey,

2
00:00:02,130 --> 00:00:05,590
cool, I'll just run both versions in a single code base and

3
00:00:05,590 --> 00:00:08,200
annotate my methods with version headers.

4
00:00:08,200 --> 00:00:09,940
There's just one catch.

5
00:00:09,940 --> 00:00:14,370
Let's take a look at an entity class. With Spring Data, we don't have

6
00:00:14,370 --> 00:00:18,670
to define every single method. By convention, Spring manages all of

7
00:00:18,670 --> 00:00:22,320
those methods for us so we don't have to write and maintain all of the

8
00:00:22,320 --> 00:00:24,640
CRUD methods for our objects.

9
00:00:24,640 --> 00:00:25,660
Unfortunately,

10
00:00:25,660 --> 00:00:29,250
there isn't a property like basePath that we can just define to

11
00:00:29,250 --> 00:00:33,420
introduce custom headers, so you could break out everything and add

12
00:00:33,420 --> 00:00:36,130
the header annotations yourself; however,

13
00:00:36,130 --> 00:00:39,540
that's a lot of extra code to write and maintain, and isn't that why

14
00:00:39,540 --> 00:00:42,700
we're using Spring Data REST in the first place, so we don't have to

15
00:00:42,700 --> 00:00:46,720
write and maintain all of that boilerplate code? If you want to utilize a

16
00:00:46,720 --> 00:00:51,230
custom header to determine which version of your API to run, the best way

17
00:00:51,230 --> 00:00:55,670
to do that without giving up the simplicity of Spring Data REST is to let

18
00:00:55,670 --> 00:01:00,600
your load balancer or proxy server handle it. Like we did in the previous

19
00:01:00,600 --> 00:01:04,840
module, you can branch your code and build two different versions,

20
00:01:04,840 --> 00:01:08,440
one for version 1 and one for version 2.

21
00:01:08,440 --> 00:01:12,580
You'll then deploy those behind a load balancer, but instead of

22
00:01:12,580 --> 00:01:15,760
checking the URI path for version information,

23
00:01:15,760 --> 00:01:19,580
you'll define a rule to look for whatever custom HTTP header you

24
00:01:19,580 --> 00:01:24,140
define and route calls based on the defined values you have set.

25
00:01:24,140 --> 00:01:28,110
Using a custom header allows you to keep versioning information

26
00:01:28,110 --> 00:01:30,400
out of the URI; however,

27
00:01:30,400 --> 00:01:37,000
your clients will need to send the header information so that they get routed to the proper version.

