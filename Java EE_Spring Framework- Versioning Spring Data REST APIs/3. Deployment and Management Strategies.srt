1
00:00:01,040 --> 00:00:06,740
When managing API versions, try to group breaking changes into a single release.

2
00:00:06,740 --> 00:00:10,070
Releasing versioned APIs isn't something you want to be doing

3
00:00:10,070 --> 00:00:13,000
on a frequent basis due to the overhead of managing the

4
00:00:13,000 --> 00:00:15,840
versions and getting clients to change.

5
00:00:15,840 --> 00:00:16,350
Typically,

6
00:00:16,350 --> 00:00:21,720
you'll only release major versions like v1 and v2. Using minor versions

7
00:00:21,720 --> 00:00:26,470
like 1.1 and 1.2 implies a more frequent release schedule than you'll

8
00:00:26,470 --> 00:00:31,060
want to do and may confuse clients as minor versions typically do not

9
00:00:31,060 --> 00:00:35,990
contain breaking changes. For API versioning, the only reason to ever

10
00:00:35,990 --> 00:00:39,710
version is because of a breaking change, so stick with major,

11
00:00:39,710 --> 00:00:41,940
single‑digit versions.

12
00:00:41,940 --> 00:00:46,540
When you release a new version, set an end‑of‑life date for the previous version.

13
00:00:46,540 --> 00:00:48,660
This will vary based on your application,

14
00:00:48,660 --> 00:00:50,880
but it should be long enough for consumers to

15
00:00:50,880 --> 00:00:53,060
reasonably switch to the new version,

16
00:00:53,060 --> 00:00:56,420
but short enough that you don't add unnecessary overhead,

17
00:00:56,420 --> 00:01:00,840
supporting the old version longer than you have to.

18
00:01:00,840 --> 00:01:03,270
When you make a breaking change to an entity,

19
00:01:03,270 --> 00:01:07,340
you need to think through what that means for your clients.

20
00:01:07,340 --> 00:01:10,310
Are you going to need to migrate your back‑end data from one

21
00:01:10,310 --> 00:01:13,900
version to the next? What coordination is required for a

22
00:01:13,900 --> 00:01:16,190
client to switch to a new version?

23
00:01:16,190 --> 00:01:16,910
Generally,

24
00:01:16,910 --> 00:01:19,790
you don't want to allow clients to use both the old

25
00:01:19,790 --> 00:01:22,040
and the new version concurrently,

26
00:01:22,040 --> 00:01:24,170
they can use the old version until they are ready

27
00:01:24,170 --> 00:01:28,840
to switch, but once they switch, they will stay with the new version.

28
00:01:28,840 --> 00:01:30,410
Depending on your datastore,

29
00:01:30,410 --> 00:01:33,870
you could set up automatic forward syncing of their

30
00:01:33,870 --> 00:01:37,340
data so that when they switch, it's all ready to go.

31
00:01:37,340 --> 00:01:41,640
But trying to do a two‑way sync from old to new and new to

32
00:01:41,640 --> 00:01:45,180
old is going to be more complicated and error prone and

33
00:01:45,180 --> 00:01:48,340
should be avoided whenever possible.

34
00:01:48,340 --> 00:01:52,230
Spring is an opinionated framework. In general, it's going to

35
00:01:52,230 --> 00:01:55,650
save you the most time and make things easiest for you if you

36
00:01:55,650 --> 00:01:58,370
follow those opinionated conventions.

37
00:01:58,370 --> 00:02:01,960
Spring Data makes working with entities extremely easy,

38
00:02:01,960 --> 00:02:04,950
but it assumes one version of the entity and uses the

39
00:02:04,950 --> 00:02:07,540
class name for endpoint mapping.

40
00:02:07,540 --> 00:02:10,830
If you start trying to create multiple concurrent versions of an

41
00:02:10,830 --> 00:02:15,040
entity by appending v1 or v2 to class names,

42
00:02:15,040 --> 00:02:17,840
you're getting away from the intended use.

43
00:02:17,840 --> 00:02:18,390
Also,

44
00:02:18,390 --> 00:02:22,580
if you find yourself starting to create classes with all of the built‑in Spring

45
00:02:22,580 --> 00:02:27,530
Data CRUD and query methods written out so you can assign paths to all of them,

46
00:02:27,530 --> 00:02:31,910
you're definitely going away from the intended use case and creating a lot more

47
00:02:31,910 --> 00:02:34,540
maintenance for yourself going forward.

48
00:02:34,540 --> 00:02:37,990
There are many things you can do in Spring, or JPA for

49
00:02:37,990 --> 00:02:39,950
that matter, but for this course,

50
00:02:39,950 --> 00:02:43,470
we're going to focus on how to handle versioning in a way that

51
00:02:43,470 --> 00:02:48,640
maximizes what the framework can automatically do for you.

52
00:02:48,640 --> 00:02:52,760
An easy way to implement URI versioning in your Spring Data REST

53
00:02:52,760 --> 00:02:56,650
API is to leverage source control branching and a load balancer

54
00:02:56,650 --> 00:02:59,610
or proxy server in your deployment.

55
00:02:59,610 --> 00:03:03,910
When you're ready to make a version 2 of your API, first create a

56
00:03:03,910 --> 00:03:07,770
branch for version 1 so that you can continue to bug fix and

57
00:03:07,770 --> 00:03:10,910
independently deploy that version of the API.

58
00:03:10,910 --> 00:03:15,140
You can then make your breaking changes and build version 2.

59
00:03:15,140 --> 00:03:18,040
Both versions of the application are then deployed

60
00:03:18,040 --> 00:03:21,140
behind a load balancer or proxy server,

61
00:03:21,140 --> 00:03:26,500
which will look for v1 or v2 in the URI path, then route the

62
00:03:26,500 --> 00:03:28,990
traffic to the appropriate deployment.

63
00:03:28,990 --> 00:03:33,610
Creating an artifact per version helps avoid mixing up what is supposed

64
00:03:33,610 --> 00:03:37,380
to be in which version of the application, so you don't accidentally add

65
00:03:37,380 --> 00:03:40,840
a breaking change to the old version of API.

66
00:03:40,840 --> 00:03:42,150
If there are bug fixes,

67
00:03:42,150 --> 00:03:45,730
you can easily port those from the new version to the old version with

68
00:03:45,730 --> 00:03:50,120
something like cherry‑pick if you're using Git. Leveraging tools like source

69
00:03:50,120 --> 00:03:54,440
control branching and a load balancer or proxy server helps remove

70
00:03:54,440 --> 00:03:58,740
undifferentiated heavy lifting from your application code and allows you to

71
00:03:58,740 --> 00:04:02,740
focus in on the unique value add of your application.

72
00:04:02,740 --> 00:04:06,060
The result is a repeatable pattern that allows you to follow

73
00:04:06,060 --> 00:04:13,000
spring conventions and maintain a cleaner code base as you move through different versions of your API.

