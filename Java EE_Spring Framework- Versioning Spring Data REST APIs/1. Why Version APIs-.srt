1
00:00:01,140 --> 00:00:04,110
Hi. This is Craig Golightly, and welcome to Spring

2
00:00:04,110 --> 00:00:09,240
Framework: Versioning Spring Data REST APIs.

3
00:00:09,240 --> 00:00:12,140
So why would you need to version an API?

4
00:00:12,140 --> 00:00:14,700
The number one reason that you would need versioning

5
00:00:14,700 --> 00:00:17,710
is to introduce breaking changes.

6
00:00:17,710 --> 00:00:21,220
A breaking change would be something that used to work in the old version

7
00:00:21,220 --> 00:00:24,870
of the API that no longer works in the new version,

8
00:00:24,870 --> 00:00:30,240
or that requires some modification by the client in order to continue working.

9
00:00:30,240 --> 00:00:33,740
Trying to coordinate an API rollout with a breaking change among

10
00:00:33,740 --> 00:00:38,520
many organizations that consume your API is a very slow and error

11
00:00:38,520 --> 00:00:43,010
prone process. Versioning allows you to roll out the new changes

12
00:00:43,010 --> 00:00:46,630
while still supporting the existing functionality in a way that is

13
00:00:46,630 --> 00:00:48,740
clear to your consumers.

14
00:00:48,740 --> 00:00:53,040
They will know what functionality exists, in which version of the API, and

15
00:00:53,040 --> 00:00:57,580
what they need to do to use that version of the API.

16
00:00:57,580 --> 00:01:01,780
Let's take a look at the types of changes you can make to your API and the

17
00:01:01,780 --> 00:01:07,690
effect those changes have on your consumer from low impact to high impact.

18
00:01:07,690 --> 00:01:12,090
Whenever possible, you want to make your changes backwards compatible so that

19
00:01:12,090 --> 00:01:14,710
they don't break existing functionality.

20
00:01:14,710 --> 00:01:18,370
This has little to no impact on existing customers except

21
00:01:18,370 --> 00:01:21,340
hopefully fixing bugs and adding new features.

22
00:01:21,340 --> 00:01:26,130
APIs can often go for quite some time and never need to introduce a break in

23
00:01:26,130 --> 00:01:30,770
change, so versioning becomes unnecessary. When there are changes that need to

24
00:01:30,770 --> 00:01:35,290
be introduced that are going to break backwards compatibility, that is where

25
00:01:35,290 --> 00:01:40,080
versioning can help ease the transition for consumers of your API, as well as

26
00:01:40,080 --> 00:01:42,310
simplify your rollout process.

27
00:01:42,310 --> 00:01:45,650
You can release the new version, then consumers can choose

28
00:01:45,650 --> 00:01:48,510
to use the new version at their own pace.

29
00:01:48,510 --> 00:01:52,200
There are other times when an API is just going to need a rewrite.

30
00:01:52,200 --> 00:01:54,870
Many major APIs have gone through this where the

31
00:01:54,870 --> 00:01:57,500
service expands in unexpected ways,

32
00:01:57,500 --> 00:02:01,340
and the only solution to really address all of the requirements is

33
00:02:01,340 --> 00:02:04,440
with a completely new structure for the API.

34
00:02:04,440 --> 00:02:05,500
In these cases,

35
00:02:05,500 --> 00:02:15,000
the solution requires more than just a new version of the API, but instead it's a rewrite, resulting in an entirely new API.

