WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.060 --> 00:00:04.530
Welcome back. In this video,

00:00:04.530 --> 00:00:09.405
we're going to take a look at conditional statements and some more useful operators.

00:00:09.405 --> 00:00:14.925
Conditional statements are used when want to check if a certain condition is true.

00:00:14.925 --> 00:00:18.780
If so, we can then tell the program what to do next.

00:00:18.780 --> 00:00:22.800
For example, we can check if a user is logged in.

00:00:22.800 --> 00:00:28.845
If they are, then we can show the user's information on the screen such as the username.

00:00:28.845 --> 00:00:30.960
Let's first get started by looking at

00:00:30.960 --> 00:00:35.520
the most basic conditional statements, the if statement.

00:00:35.520 --> 00:00:40.310
I'm going to begin by creating a couple of variables to work with.

00:00:40.310 --> 00:00:45.540
Use a dollar sign, and the first variable is going to be loggedIn.

00:00:45.760 --> 00:00:49.340
I'm going to set this to a Boolean value.

00:00:49.340 --> 00:00:53.000
If you remember that could be true or false.

00:00:53.000 --> 00:00:56.790
Let's initially set that to true.

00:00:57.140 --> 00:01:00.415
Then the second variable,

00:01:00.415 --> 00:01:03.574
this is going to be the username.

00:01:03.574 --> 00:01:06.470
This is a string.

00:01:06.470 --> 00:01:10.250
I'm going to add the username into there.

00:01:10.250 --> 00:01:15.290
Then we're going to use a if statement to check if a condition is true.

00:01:15.290 --> 00:01:18.105
I'll begin by using the if keyword,

00:01:18.105 --> 00:01:21.605
and then after that, a set brackets.

00:01:21.605 --> 00:01:25.750
Inside that, this is the condition that we need to check against.

00:01:25.750 --> 00:01:29.240
We want to check if the user is loggedIn.

00:01:29.240 --> 00:01:31.870
Let's test if loggedIn is true,

00:01:31.870 --> 00:01:38.330
just inside the variable name of loggedIn, inside there.

00:01:38.490 --> 00:01:42.350
Then we add the pair of curly braces.

00:01:42.350 --> 00:01:45.280
If this condition is true,

00:01:45.280 --> 00:01:49.160
then we run the code which is between the two curly braces.

00:01:49.160 --> 00:01:52.060
As an example, if our user is loggedIn,

00:01:52.060 --> 00:01:57.890
we're just going to echo to the browser a message to you saying, welcome back.

00:02:00.230 --> 00:02:05.885
Then a comma, and then we can just add with the period or the dot,

00:02:05.885 --> 00:02:11.430
the username, which is stored in the variable called user.

00:02:13.100 --> 00:02:17.335
Then don't forget the semicolon at the end of the statements.

00:02:17.335 --> 00:02:23.670
Just save that. Then we're going to go over to the browser and then refresh this.

00:02:23.670 --> 00:02:26.010
Great. We've got the message saying, "Welcome back,

00:02:26.010 --> 00:02:30.265
Chris," because our condition is set to true.

00:02:30.265 --> 00:02:33.035
If we change this to be false,

00:02:33.035 --> 00:02:35.495
we shouldn't get anything on the screen,

00:02:35.495 --> 00:02:38.170
so our message is not displayed.

00:02:38.170 --> 00:02:40.980
Such a basic if statements.

00:02:40.980 --> 00:02:45.525
Now we're going to move on to taking a look using comparison operators.

00:02:45.525 --> 00:02:49.520
I'm going to head over to the W3Schools website.

00:02:49.520 --> 00:02:52.715
I'm on the comparison operators section.

00:02:52.715 --> 00:02:56.345
We can also use these comparisons with if statements.

00:02:56.345 --> 00:02:59.915
So can check if two values are equal.

00:02:59.915 --> 00:03:05.620
The double equals is for checking if two values equal volume.

00:03:05.620 --> 00:03:07.835
It's also a triple equals,

00:03:07.835 --> 00:03:12.470
which checks if the two values are equal value and also the same type.

00:03:12.470 --> 00:03:17.825
By type we mean if they're both a string or they're both a number.

00:03:17.825 --> 00:03:23.150
We can also combine with an exclamation mark to do the exact opposite.

00:03:23.150 --> 00:03:25.345
This will be not equal.

00:03:25.345 --> 00:03:29.050
We can use the less than or greater than symbol to

00:03:29.050 --> 00:03:32.530
check if condition is less than or smaller than.

00:03:32.530 --> 00:03:35.170
We can also use less than or equal to,

00:03:35.170 --> 00:03:37.655
or greater than and equal to.

00:03:37.655 --> 00:03:42.615
Let's put these inside our if statements as an example.

00:03:42.615 --> 00:03:45.595
I'm just going to use a new variable.

00:03:45.595 --> 00:03:52.160
This is a number. I'll set this to be a initial value of 10.

00:03:53.250 --> 00:03:55.720
So now, which again,

00:03:55.720 --> 00:04:02.705
if the variable of number is greater than five,

00:04:02.705 --> 00:04:08.800
then we could do a echo saying statement is true.

00:04:13.250 --> 00:04:17.090
Such a checked out. Our number is greater than five,

00:04:17.090 --> 00:04:20.885
so we should get the statement is true printed to the browser.

00:04:20.885 --> 00:04:25.465
Let's just check that and refresh, and of course we do.

00:04:25.465 --> 00:04:29.080
If we change this to be less than,

00:04:29.360 --> 00:04:32.445
this of course is false.

00:04:32.445 --> 00:04:34.705
It's actually disappear.

00:04:34.705 --> 00:04:37.550
Just like on the W3Schools website,

00:04:37.550 --> 00:04:40.600
we can check using any of these operators.

00:04:40.600 --> 00:04:44.645
We can use less than or equal to.

00:04:44.645 --> 00:04:46.535
We set this to be 10.

00:04:46.535 --> 00:04:48.650
This is of course equals to 10.

00:04:48.650 --> 00:04:53.210
This statement should be true, which is.

00:04:53.210 --> 00:04:59.930
We look before at the double and the triple equals symbol.

00:04:59.970 --> 00:05:03.515
Let's begin with the double equals,

00:05:03.515 --> 00:05:05.510
and rather than number,

00:05:05.510 --> 00:05:09.560
let's put this inside the quotations.

00:05:09.560 --> 00:05:11.450
Let's turn into a string,

00:05:11.450 --> 00:05:15.330
sludge or save that and refresh and see what happens.

00:05:16.070 --> 00:05:19.875
We've got the statement as being true.

00:05:19.875 --> 00:05:22.575
Although the values above 10,

00:05:22.575 --> 00:05:28.975
this is classed as a string because in the quotations.

00:05:28.975 --> 00:05:35.670
Let's just put a third equals symbol into there and save and then see what happens.

00:05:35.810 --> 00:05:39.905
We'll use the taxane statement is true.

00:05:39.905 --> 00:05:45.650
This is because using a triple equals checks both the value.

00:05:45.650 --> 00:05:49.360
The value is equal and also the type.

00:05:49.360 --> 00:05:54.860
The type is not equal because this is a string and this is a number.

00:05:54.860 --> 00:06:00.755
Using if statements are really good if we only want to test against one outcome.

00:06:00.755 --> 00:06:03.770
But if want to test against more than one outcome,

00:06:03.770 --> 00:06:08.540
we need to use a if else statements or even else if.

00:06:08.540 --> 00:06:12.125
Let's first begin by using if else statements,

00:06:12.125 --> 00:06:16.165
and that just changes back to be a number.

00:06:16.165 --> 00:06:19.675
If number is less than 10,

00:06:19.675 --> 00:06:24.240
exchanges to be number is less than 10.

00:06:27.440 --> 00:06:31.290
As you know, this time will check if the number is less

00:06:31.290 --> 00:06:34.625
than 10 and then print this to the screen.

00:06:34.625 --> 00:06:40.760
But we can also provide a second outcomes test against in case this is not true.

00:06:40.760 --> 00:06:43.425
We can use the else keyword.

00:06:43.425 --> 00:06:45.860
Then inside the curly braces,

00:06:45.860 --> 00:06:48.425
we can provide a second echo.

00:06:48.425 --> 00:06:56.490
So number is not less than 10, and the semicolon.

00:06:56.490 --> 00:06:59.415
We'll initially check if this statement is true.

00:06:59.415 --> 00:07:02.455
If not, this will be printed to the screen.

00:07:02.455 --> 00:07:06.480
Let's save that and then refresh.

00:07:06.480 --> 00:07:10.090
Number a is not less than 10.

00:07:11.000 --> 00:07:14.430
Of course it isn't because it is number 10.

00:07:14.430 --> 00:07:17.405
We can just put a nova operator in there.

00:07:17.405 --> 00:07:21.940
Test if the number is less than or equal to 10.

00:07:21.940 --> 00:07:25.350
So save that, and we should now change to say

00:07:25.350 --> 00:07:29.560
a number is less than 10 or in fact equal to.

00:07:29.560 --> 00:07:33.995
But what if we wanted to test against free or more conditions?

00:07:33.995 --> 00:07:36.845
Well, this is where else if comes in.

00:07:36.845 --> 00:07:42.450
I will just put these on separate lines just to make it a little bit more readable.

00:07:46.520 --> 00:07:49.760
In between the if and the else,

00:07:49.760 --> 00:07:53.240
we can change this to be elseif and

00:07:53.240 --> 00:07:57.170
then use the brackets for a condition to test against.

00:07:57.170 --> 00:08:01.190
First of all, we're checking if the number is less than 10.

00:08:01.190 --> 00:08:06.460
We can then use the elseif to test if the number is equals 10.

00:08:06.460 --> 00:08:11.590
Again, the variable of number equal to 10.

00:08:11.590 --> 00:08:16.260
We change this to be number is 10.

00:08:16.260 --> 00:08:21.135
Then finally, if these options are both false will get the backup.

00:08:21.135 --> 00:08:25.615
When he said the else statement back in today as a fall back.

00:08:25.615 --> 00:08:35.910
This time we can echo number is not less or equal to 10.

00:08:36.820 --> 00:08:40.715
Let's test this. First of all,

00:08:40.715 --> 00:08:43.325
we'll set the number to be less than 10.

00:08:43.325 --> 00:08:48.460
We should get number is less than 10 and refresh.

00:08:48.460 --> 00:08:51.105
So number is less than 10.

00:08:51.105 --> 00:08:54.680
If the number was changed to be equal to 10,

00:08:54.680 --> 00:08:59.705
because we should get this statement of number is 10.

00:08:59.705 --> 00:09:04.370
Then finally, if the value is greater than 10,

00:09:04.370 --> 00:09:11.280
so change to 14, we should get a number is not less or equals 10.

00:09:11.500 --> 00:09:14.570
So refresh. There we go.

00:09:14.570 --> 00:09:21.359
That's how we can use if else and else if statements to test against multiple outcomes.

00:09:21.470 --> 00:09:27.440
The final thing we want to take a look at in this video is logical operators.

00:09:27.440 --> 00:09:31.715
Let's go back over to the W3Schools example.

00:09:31.715 --> 00:09:34.775
Let's take a look at logical operators,

00:09:34.775 --> 00:09:37.650
which is a little bit further down.

00:09:37.770 --> 00:09:40.525
As well as the tests that we use before,

00:09:40.525 --> 00:09:42.805
the test if conditions are less than,

00:09:42.805 --> 00:09:45.580
greater than, or equal to, for example.

00:09:45.580 --> 00:09:53.285
We can also use the and operator to check if more than one condition is met and or.

00:09:53.285 --> 00:09:57.415
We can also check if one value or nobody is true.

00:09:57.415 --> 00:10:02.900
Also the exclamation mark to test if a condition is not true.

00:10:04.440 --> 00:10:07.830
We're going to start by creating two variables,

00:10:07.830 --> 00:10:14.130
so number 1 and then also number 2.

00:10:14.780 --> 00:10:18.630
This value can be 10.

00:10:18.630 --> 00:10:23.459
Then we could remove everything else apart from the if statements.

00:10:24.340 --> 00:10:29.890
If we wanted to test against both of these conditions rather than just one,

00:10:29.890 --> 00:10:35.710
so if number 1 was equal to five,

00:10:35.710 --> 00:10:39.820
I also want to check if number 2 is equal to 10,

00:10:39.820 --> 00:10:45.425
so we can use the double ampersands or the and word.

00:10:45.425 --> 00:10:47.615
So I'm going to use these.

00:10:47.615 --> 00:10:54.860
So number 1 is equal to five and also number 2 is equal to 10.

00:10:55.550 --> 00:11:00.430
So echo statement is true.

00:11:05.300 --> 00:11:08.460
Just change it back to be the dollar.

00:11:08.460 --> 00:11:11.630
There we go. Of course both the statements are true,

00:11:11.630 --> 00:11:14.340
so we should get this print into the screen.

00:11:16.960 --> 00:11:21.845
But if all these if statements return false,

00:11:21.845 --> 00:11:24.230
we shouldn't get anything at all.

00:11:24.230 --> 00:11:26.795
Let's change that to be two.

00:11:26.795 --> 00:11:33.680
Of course, number 1 is not true when the both of these to be true for this to be printed.

00:11:33.680 --> 00:11:36.470
Now if we save it and refresh,

00:11:36.470 --> 00:11:39.360
we should get the message removed.

00:11:40.550 --> 00:11:43.590
But we could change this to be or,

00:11:43.590 --> 00:11:46.515
which is the two pipes.

00:11:46.515 --> 00:11:48.890
Just like we've seen before,

00:11:48.890 --> 00:11:53.070
we can use the two pipes or the or operator.

00:11:53.600 --> 00:11:58.235
Now we only need one of these statements to evaluate to true.

00:11:58.235 --> 00:12:02.420
Number 2 is true and number 1 is false.

00:12:02.420 --> 00:12:06.640
Now they should get the message printed again on the screen.

00:12:06.640 --> 00:12:08.775
That's your test data,

00:12:08.775 --> 00:12:11.535
and then refresh, which we do.

00:12:11.535 --> 00:12:13.845
Such that follow this video.

00:12:13.845 --> 00:12:19.325
That's a basic look at conditional statements and some PHP operators.

00:12:19.325 --> 00:12:22.290
Thank you, and I'll see you again.
