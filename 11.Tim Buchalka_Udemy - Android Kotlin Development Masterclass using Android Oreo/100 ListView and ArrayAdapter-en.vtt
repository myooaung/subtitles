WEBVTT
1

00:00:04.690 --> 00:00:07.120

in the last video we finished up the



2

00:00:07.120 --> 00:00:10.180

parsing of the XML feed and created a



3

00:00:10.180 --> 00:00:12.340

list of feed entry objects with the data



4

00:00:12.340 --> 00:00:14.920

we want in the correct fields now we



5

00:00:14.920 --> 00:00:16.450

need to present that information in a



6

00:00:16.450 --> 00:00:19.090

useful way on the device screen now



7

00:00:19.090 --> 00:00:20.800

obviously it wouldn't be very efficient



8

00:00:20.800 --> 00:00:23.140

to create a textview for each record to



9

00:00:23.140 --> 00:00:25.150

display the information because we'd



10

00:00:25.150 --> 00:00:27.099

have to add more text view widgets to



11

00:00:27.099 --> 00:00:29.170

the layout if we wanted to display the



12

00:00:29.170 --> 00:00:31.379

results of the top 25 feet for example



13

00:00:31.379 --> 00:00:34.150

so what we need is some form of widget



14

00:00:34.150 --> 00:00:36.309

that can accommodate as many records as



15

00:00:36.309 --> 00:00:38.350

necessary without us having to worry



16

00:00:38.350 --> 00:00:40.840

about how many there are now such a



17

00:00:40.840 --> 00:00:42.760

widget would need some sort of data



18

00:00:42.760 --> 00:00:44.680

source that it could get its records



19

00:00:44.680 --> 00:00:46.809

from and if it's going to be able to



20

00:00:46.809 --> 00:00:49.390

display any kind of data then the data



21

00:00:49.390 --> 00:00:51.610

source must appear in a standard form



22

00:00:51.610 --> 00:00:54.570

regardless of the data that it contains



23

00:00:54.570 --> 00:00:57.730

now fortunately both the widget and a



24

00:00:57.730 --> 00:00:59.530

standard way of presenting data have



25

00:00:59.530 --> 00:01:02.379

been created for us and included in the



26

00:01:02.379 --> 00:01:04.930

android framework and we're going to do



27

00:01:04.930 --> 00:01:06.160

here you can see i'm getting these



28

00:01:06.160 --> 00:01:08.890

errors i updated to the latest emulator



29

00:01:08.890 --> 00:01:10.869

today and I've been getting errors for



30

00:01:10.869 --> 00:01:11.890

that for some reason so I'm going to



31

00:01:11.890 --> 00:01:13.509

just close the emulator down because we



32

00:01:13.509 --> 00:01:15.399

don't need it right now I'm assuming



33

00:01:15.399 --> 00:01:17.770

it's some sort of bug with this latest



34

00:01:17.770 --> 00:01:20.530

release by Android so I'm just going to



35

00:01:20.530 --> 00:01:22.300

close it down to avoid those issues for



36

00:01:22.300 --> 00:01:25.270

now all right so as I mentioned both the



37

00:01:25.270 --> 00:01:27.099

widget and a standard way of presenting



38

00:01:27.099 --> 00:01:28.869

data have been created for us and



39

00:01:28.869 --> 00:01:32.380

included in the android framework now



40

00:01:32.380 --> 00:01:34.479

the widget is called a ListView and its



41

00:01:34.479 --> 00:01:37.780

job is to display views in a list now



42

00:01:37.780 --> 00:01:39.039

we're going to worry about where those



43

00:01:39.039 --> 00:01:41.259

views come from in a minute what we're



44

00:01:41.259 --> 00:01:43.179

interested in is that the ListView will



45

00:01:43.179 --> 00:01:45.759

display as many views as will fit on the



46

00:01:45.759 --> 00:01:48.910

screen as the screen scrolled it adds



47

00:01:48.910 --> 00:01:50.830

more views to the bottom or top if



48

00:01:50.830 --> 00:01:52.479

you're scrolling down so that the



49

00:01:52.479 --> 00:01:55.509

screens always fall now these views can



50

00:01:55.509 --> 00:01:57.670

contain more than one widget so you



51

00:01:57.670 --> 00:01:59.530

could have a textview and an image view



52

00:01:59.530 --> 00:02:01.479

widget to display the photo in a



53

00:02:01.479 --> 00:02:04.119

description for example now I'm throwing



54

00:02:04.119 --> 00:02:06.819

the word view around a lot here so I'd



55

00:02:06.819 --> 00:02:09.310

better clarify what exactly a view is in



56

00:02:09.310 --> 00:02:11.709

Android so I'm going to just open up a



57

00:02:11.709 --> 00:02:13.270

browser because whenever I want to know



58

00:02:13.270 --> 00:02:14.860

what something means in the world of



59

00:02:14.860 --> 00:02:17.080

Android my first port of call is



60

00:02:17.080 --> 00:02:18.290

Google's documentation



61

00:02:18.290 --> 00:02:20.360

so let's see what google have to say



62

00:02:20.360 --> 00:02:22.670

about views so the reference



63

00:02:22.670 --> 00:02:25.310

documentation is here we're going to



64

00:02:25.310 --> 00:02:29.209

paste the link in and this page is very



65

00:02:29.209 --> 00:02:33.049

informative and you can see that the



66

00:02:33.049 --> 00:02:35.360

first paragraph defines the viewers of



67

00:02:35.360 --> 00:02:38.269

you can occupies a rectangular area on



68

00:02:38.269 --> 00:02:40.340

the screen and it's responsible for



69

00:02:40.340 --> 00:02:41.959

drawing and event handling



70

00:02:41.959 --> 00:02:43.610

now that's possibly the least



71

00:02:43.610 --> 00:02:45.319

informative sentence on the paragraph



72

00:02:45.319 --> 00:02:48.470

the rest is actually quite useful so



73

00:02:48.470 --> 00:02:50.540

this class represents the basic building



74

00:02:50.540 --> 00:02:53.780

block for user interface components so



75

00:02:53.780 --> 00:02:55.370

think about that carefully because of



76

00:02:55.370 --> 00:02:57.319

the implication is that everything we



77

00:02:57.319 --> 00:03:00.739

see on the screen is of you now that's



78

00:03:00.739 --> 00:03:03.230

not strictly true because of you has a



79

00:03:03.230 --> 00:03:05.720

canvas on which you can draw lines and



80

00:03:05.720 --> 00:03:07.879

other objects but for the layouts we're



81

00:03:07.879 --> 00:03:09.680

dealing with everything is a view and



82

00:03:09.680 --> 00:03:11.480

that includes our layouts



83

00:03:11.480 --> 00:03:14.870

they are also views now as the



84

00:03:14.870 --> 00:03:17.510

documentation States layouts are based



85

00:03:17.510 --> 00:03:20.000

on the view group class which is a



86

00:03:20.000 --> 00:03:23.000

subset of view so if a view group is of



87

00:03:23.000 --> 00:03:26.000

you and the layout is a view group then



88

00:03:26.000 --> 00:03:28.879

a layout is also of you now if we give



89

00:03:28.879 --> 00:03:31.609

our layouts an ID then we can use find



90

00:03:31.609 --> 00:03:34.340

view ID to get a reference to them we



91

00:03:34.340 --> 00:03:35.900

can hide them just like any other view



92

00:03:35.900 --> 00:03:38.569

we can also respond to taps on them just



93

00:03:38.569 --> 00:03:40.910

like we've done with buttons and if we



94

00:03:40.910 --> 00:03:42.829

can respond to taps on a button which is



95

00:03:42.829 --> 00:03:45.530

a view then we can also respond to taps



96

00:03:45.530 --> 00:03:47.829

on the layout because that's also of you



97

00:03:47.829 --> 00:03:50.150

now the reason that I've mentioned all



98

00:03:50.150 --> 00:03:51.949

this here is I'm going to be talking



99

00:03:51.949 --> 00:03:54.889

about views but it's important to bear



100

00:03:54.889 --> 00:03:56.810

in mind that if you can contain other



101

00:03:56.810 --> 00:03:59.810

views now when we talk about a ListView



102

00:03:59.810 --> 00:04:01.970

displaying views remember that those



103

00:04:01.970 --> 00:04:03.620

views don't have to just be simple



104

00:04:03.620 --> 00:04:06.349

widgets such as a text view the views



105

00:04:06.349 --> 00:04:08.060

that the ListView displays can be quite



106

00:04:08.060 --> 00:04:10.489

complex layouts in fact they often are



107

00:04:10.489 --> 00:04:12.709

our first one won't be it'll just be a



108

00:04:12.709 --> 00:04:14.659

text view but we're going to expand on



109

00:04:14.659 --> 00:04:17.449

that in a later video so remember that



110

00:04:17.449 --> 00:04:19.849

as we discuss the ListView in the river



111

00:04:19.849 --> 00:04:22.039

also that views can be complex layouts



112

00:04:22.039 --> 00:04:24.320

containing other views and even other



113

00:04:24.320 --> 00:04:27.200

layouts alright so moving on with



114

00:04:27.200 --> 00:04:29.930

Android lollipop Google released the



115

00:04:29.930 --> 00:04:31.940

recycler view widget which



116

00:04:31.940 --> 00:04:34.280

intended as a more efficient replacement



117

00:04:34.280 --> 00:04:36.500

for the listview when displaying large



118

00:04:36.500 --> 00:04:38.810

datasets now that doesn't mean that the



119

00:04:38.810 --> 00:04:40.430

ListView is now redundant though and



120

00:04:40.430 --> 00:04:42.620

very often it doesn't make sense to



121

00:04:42.620 --> 00:04:44.300

struggle with the additional complexity



122

00:04:44.300 --> 00:04:46.660

of the recyclerview



123

00:04:46.660 --> 00:04:48.650

alright so as you can see on the screen



124

00:04:48.650 --> 00:04:51.530

there we've got a picture here of the



125

00:04:51.530 --> 00:04:53.620

ListView recycling views on a concept of



126

00:04:53.620 --> 00:04:56.960

olicity recycling views also the name



127

00:04:56.960 --> 00:04:59.270

recycler view that implies that the



128

00:04:59.270 --> 00:05:02.420

newer widget recycles views so that the



129

00:05:02.420 --> 00:05:04.250

system doesn't have to create thousands



130

00:05:04.250 --> 00:05:06.770

of views to display thousands of records



131

00:05:06.770 --> 00:05:09.530

now that's true but therefore gives the



132

00:05:09.530 --> 00:05:10.820

impression that the list tree doesn't



133

00:05:10.820 --> 00:05:13.280

reuse its values and that's not true and



134

00:05:13.280 --> 00:05:15.680

the ListView will reuse views that



135

00:05:15.680 --> 00:05:18.800

scroll off the screen now creating views



136

00:05:18.800 --> 00:05:21.710

is very expensive in terms of computer



137

00:05:21.710 --> 00:05:24.320

time and they also consume a fair bit of



138

00:05:24.320 --> 00:05:26.030

memory each view will need at least



139

00:05:26.030 --> 00:05:28.190

about 1k of RAM so you can see that



140

00:05:28.190 --> 00:05:30.260

creating thousands of them will rapidly



141

00:05:30.260 --> 00:05:33.020

eat up the device's memory now when the



142

00:05:33.020 --> 00:05:35.450

list scrolled views that are moved off



143

00:05:35.450 --> 00:05:37.940

the screen can be reused for the new



144

00:05:37.940 --> 00:05:40.430

data that that will be displayed as the



145

00:05:40.430 --> 00:05:42.740

ListView Scrolls so in this slide the



146

00:05:42.740 --> 00:05:44.570

ListView is scrolled up and when the



147

00:05:44.570 --> 00:05:46.430

view holding item one moves off the top



148

00:05:46.430 --> 00:05:49.370

of the screen its reused to display the



149

00:05:49.370 --> 00:05:51.560

data for item nine at the bottom of the



150

00:05:51.560 --> 00:05:54.140

screen now the ListView keeps all the



151

00:05:54.140 --> 00:05:55.550

views that scroll off the screen and



152

00:05:55.550 --> 00:05:58.520

reuses them whenever it needs a new view



153

00:05:58.520 --> 00:06:01.040

you know I said them there because a new



154

00:06:01.040 --> 00:06:02.480

view coming at the bottom may have a



155

00:06:02.480 --> 00:06:04.760

greater height than the views at the top



156

00:06:04.760 --> 00:06:06.410

of the screen so it could display



157

00:06:06.410 --> 00:06:09.290

several views at once now there's a lot



158

00:06:09.290 --> 00:06:11.180

of optimization going on inside the



159

00:06:11.180 --> 00:06:13.430

ListView widget and it is an efficient



160

00:06:13.430 --> 00:06:16.010

way to display lots of information so



161

00:06:16.010 --> 00:06:17.090

that's the widget that we're going to be



162

00:06:17.090 --> 00:06:20.630

using to display a list of records but -



163

00:06:20.630 --> 00:06:22.790

what about the mechanism for getting the



164

00:06:22.790 --> 00:06:25.700

records into the list so to make the



165

00:06:25.700 --> 00:06:27.440

ListView work we have to put an adapter



166

00:06:27.440 --> 00:06:31.070

between the data and the ListView now



167

00:06:31.070 --> 00:06:32.660

whenever the ListView needs to display



168

00:06:32.660 --> 00:06:35.660

more data it asks the adapter for a view



169

00:06:35.660 --> 00:06:38.060

that it can display now the adapter



170

00:06:38.060 --> 00:06:39.950

takes care of putting the values of the



171

00:06:39.950 --> 00:06:41.960

data into the correct widgets in the



172

00:06:41.960 --> 00:06:44.360

view and then returns the view to the



173

00:06:44.360 --> 00:06:45.610

ListView for displaying



174

00:06:45.610 --> 00:06:48.129

now the reason for the arrow going back



175

00:06:48.129 --> 00:06:50.680

from the ListView to the adapter is that



176

00:06:50.680 --> 00:06:52.389

the ListView will provide the adapter



177

00:06:52.389 --> 00:06:54.669

with a view if it has one that's gone



178

00:06:54.669 --> 00:06:57.009

off the screen which is how the system



179

00:06:57.009 --> 00:06:59.949

reuses views rather than creating a new



180

00:06:59.949 --> 00:07:02.830

one each time now obviously a new views



181

00:07:02.830 --> 00:07:04.780

will be created until the screen is full



182

00:07:04.780 --> 00:07:06.759

but after that they'll be reused



183

00:07:06.759 --> 00:07:08.250

wherever possible



184

00:07:08.250 --> 00:07:11.349

now if the adapter receives a view from



185

00:07:11.349 --> 00:07:13.539

the ListView it'll actually replace any



186

00:07:13.539 --> 00:07:15.639

data in it with the data for the current



187

00:07:15.639 --> 00:07:17.830

record then send it back to the ListView



188

00:07:17.830 --> 00:07:20.409

so that it can be displayed now the data



189

00:07:20.409 --> 00:07:22.000

source could be a cursor from a database



190

00:07:22.000 --> 00:07:24.789

for example or an ArrayList which is



191

00:07:24.789 --> 00:07:26.680

what we've passed our data into so



192

00:07:26.680 --> 00:07:29.020

that's pretty handy so we're going to



193

00:07:29.020 --> 00:07:31.629

create our own adapter later but for now



194

00:07:31.629 --> 00:07:33.069

we can use the basic array adapter



195

00:07:33.069 --> 00:07:36.789

that's part of the android framework now



196

00:07:36.789 --> 00:07:39.129

an array adapter is very basic and can



197

00:07:39.129 --> 00:07:41.229

only put data into a single text view



198

00:07:41.229 --> 00:07:43.719

widget you also have very little control



199

00:07:43.719 --> 00:07:46.389

over how the data is presented the array



200

00:07:46.389 --> 00:07:48.400

adapter just uses the objects to string



201

00:07:48.400 --> 00:07:50.949

method and puts the returned string into



202

00:07:50.949 --> 00:07:53.349

the textview so you can probably see why



203

00:07:53.349 --> 00:07:56.229

we created our own two string method in



204

00:07:56.229 --> 00:08:00.219

the application class now all right and



205

00:08:00.219 --> 00:08:02.050

the Google documentation for the array



206

00:08:02.050 --> 00:08:03.610

adapter I'm just going to load that up



207

00:08:03.610 --> 00:08:05.589

on the screen and you can see it on the



208

00:08:05.589 --> 00:08:08.379

page there now a handy a page to



209

00:08:08.379 --> 00:08:09.940

reference to find out more about the



210

00:08:09.940 --> 00:08:11.589

array adapter all right so let's go back



211

00:08:11.589 --> 00:08:14.500

to Android studio and start looking at



212

00:08:14.500 --> 00:08:16.479

the layouts we need to see the list of



213

00:08:16.479 --> 00:08:19.839

you working now we're going to start by



214

00:08:19.839 --> 00:08:22.210

modifying the activity underscore main



215

00:08:22.210 --> 00:08:23.620

layout and you can see that I've got



216

00:08:23.620 --> 00:08:26.199

that opened and on-screen so we need to



217

00:08:26.199 --> 00:08:28.539

delete the textview that Android studio



218

00:08:28.539 --> 00:08:30.639

added for us and replace it with the



219

00:08:30.639 --> 00:08:32.949

ListView widget so let's first delete



220

00:08:32.949 --> 00:08:36.729

the textview default one by selecting it



221

00:08:36.729 --> 00:08:38.560

and clicking or pressing the del button



222

00:08:38.560 --> 00:08:40.990

and as I mentioned we want to replace it



223

00:08:40.990 --> 00:08:43.029

with a ListView widget and that's in the



224

00:08:43.029 --> 00:08:44.769

section over here and a palette under



225

00:08:44.769 --> 00:08:46.570

all well actually I can get at point



226

00:08:46.570 --> 00:08:48.399

find it down here under containers Azzam



227

00:08:48.399 --> 00:08:49.480

usually the quickest way of getting



228

00:08:49.480 --> 00:08:50.890

access to it and you can see the



229

00:08:50.890 --> 00:08:52.750

ListView there so what I'm going to do



230

00:08:52.750 --> 00:08:57.220

is just drag that over and release and



231

00:08:57.220 --> 00:08:58.720

then what I'm going to do is constrain



232

00:08:58.720 --> 00:08:59.470

each edge



233

00:08:59.470 --> 00:09:01.300

to the corresponding edge of the layout



234

00:09:01.300 --> 00:09:03.400

and then change both the width and the



235

00:09:03.400 --> 00:09:05.260

height to match constraint so let's go



236

00:09:05.260 --> 00:09:08.770

ahead and do that so I'm just adding



237

00:09:08.770 --> 00:09:11.410

constraints to all four corners of the



238

00:09:11.410 --> 00:09:15.160

layout and as I mentioned we're going to



239

00:09:15.160 --> 00:09:16.540

change the layout width to match



240

00:09:16.540 --> 00:09:19.960

constraint and same for the layout



241

00:09:19.960 --> 00:09:22.930

height and we want a lot of space here



242

00:09:22.930 --> 00:09:24.580

because the ListView is almost filling



243

00:09:24.580 --> 00:09:27.040

the layout now we don't want it centered



244

00:09:27.040 --> 00:09:28.960

vertically on the screen though what it



245

00:09:28.960 --> 00:09:31.150

should do is start at the top so I'm



246

00:09:31.150 --> 00:09:33.400

gonna drag the slider right up to the



247

00:09:33.400 --> 00:09:37.630

top this one up here finally what I'm



248

00:09:37.630 --> 00:09:39.340

going to do is I'm going to change the



249

00:09:39.340 --> 00:09:43.480

ID to XML ListView and that's because we



250

00:09:43.480 --> 00:09:45.100

need an ID because we're going to have



251

00:09:45.100 --> 00:09:48.220

to refer to this ListView in our code so



252

00:09:48.220 --> 00:09:52.590

XML ListView



253

00:09:52.590 --> 00:09:55.000

notice on the design that it's appearing



254

00:09:55.000 --> 00:09:57.010

as a list of items with a vertical



255

00:09:57.010 --> 00:09:59.710

scrollbar just to see it expect a



256

00:09:59.710 --> 00:10:01.900

ListView to appear when we hook it up to



257

00:10:01.900 --> 00:10:03.580

an adapter we'll get real information



258

00:10:03.580 --> 00:10:05.860

showing but in the layout designer it



259

00:10:05.860 --> 00:10:08.560

just uses item 1 item 2 etc just to



260

00:10:08.560 --> 00:10:11.230

represent what it does so let's actually



261

00:10:11.230 --> 00:10:13.540

all we need to do with this layout the



262

00:10:13.540 --> 00:10:15.580

ListView is going to fill the screen and



263

00:10:15.580 --> 00:10:17.620

we'll take care of all the display for



264

00:10:17.620 --> 00:10:20.230

us and I'm going to reformat the XML to



265

00:10:20.230 --> 00:10:21.640

keep it tidy so let's go ahead and do



266

00:10:21.640 --> 00:10:24.130

that but generally we're finally now



267

00:10:24.130 --> 00:10:25.930

that and was doing a good job with that



268

00:10:25.930 --> 00:10:29.650

Android studio a reformat code you can



269

00:10:29.650 --> 00:10:33.280

see that was Papa formatted and we're



270

00:10:33.280 --> 00:10:35.770

actually done we can close activity may



271

00:10:35.770 --> 00:10:38.620

nil so the next layout we need to create



272

00:10:38.620 --> 00:10:40.720

isn't really a layout it's just going to



273

00:10:40.720 --> 00:10:43.570

be textview stored in an XML layout file



274

00:10:43.570 --> 00:10:45.960

so I'm going to open the project pane



275

00:10:45.960 --> 00:10:48.520

and I'm going to open the res folder and



276

00:10:48.520 --> 00:10:50.650

I open the layout folder and what I'm



277

00:10:50.650 --> 00:10:52.660

going to do is right-click the layout



278

00:10:52.660 --> 00:10:55.990

folder and choose new layout resource



279

00:10:55.990 --> 00:11:00.190

file now the folder will be used to



280

00:11:00.190 --> 00:11:02.050

follow the layout resources in our code



281

00:11:02.050 --> 00:11:04.810

I'm going to call this one a list and



282

00:11:04.810 --> 00:11:06.640

let's go write them and that's because



283

00:11:06.640 --> 00:11:08.140

it'll be used to display each item in



284

00:11:08.140 --> 00:11:10.060

the list now there's no need to provide



285

00:11:10.060 --> 00:11:12.100

the excel extension because the Android



286

00:11:12.100 --> 00:11:12.780

studio



287

00:11:12.780 --> 00:11:15.360

do it for us if we leave it off now when



288

00:11:15.360 --> 00:11:17.880

you create layouts the root element is



289

00:11:17.880 --> 00:11:20.100

usually a layout of some sort such as a



290

00:11:20.100 --> 00:11:21.750

constraint layout like we've been using



291

00:11:21.750 --> 00:11:23.970

now we don't actually want to lay out



292

00:11:23.970 --> 00:11:26.520

here we just want to textview so I'm



293

00:11:26.520 --> 00:11:27.900

going to come over to the root element



294

00:11:27.900 --> 00:11:31.860

and just type in text view so I can



295

00:11:31.860 --> 00:11:34.740

select it and you saw a list of matching



296

00:11:34.740 --> 00:11:37.110

elements as I was typing you can I could



297

00:11:37.110 --> 00:11:38.610

literally just type te and then select



298

00:11:38.610 --> 00:11:39.480

it from the list



299

00:11:39.480 --> 00:11:41.490

alright so androids quite happy for us



300

00:11:41.490 --> 00:11:43.020

to use a simple widget in place of the



301

00:11:43.020 --> 00:11:44.850

layouts and that fits in with what we



302

00:11:44.850 --> 00:11:46.940

saw earlier that everything's a view



303

00:11:46.940 --> 00:11:48.720

alright so there's nothing else to



304

00:11:48.720 --> 00:11:52.740

change so you can click on OK and we're



305

00:11:52.740 --> 00:11:54.330

going to close the project pane for now



306

00:11:54.330 --> 00:11:57.480

then to give it more space now we're



307

00:11:57.480 --> 00:11:58.740

done here there's nothing else that



308

00:11:58.740 --> 00:12:00.900

needs adding or changing for this view



309

00:12:00.900 --> 00:12:03.060

to work with the adapter it doesn't even



310

00:12:03.060 --> 00:12:05.130

need an ID because the adapter will be



311

00:12:05.130 --> 00:12:07.380

inflating it from the XML whenever it



312

00:12:07.380 --> 00:12:09.750

needs to create a new one we may want to



313

00:12:09.750 --> 00:12:11.880

use it in our own adapter though so for



314

00:12:11.880 --> 00:12:13.290

that reason I'm going to give it an ID



315

00:12:13.290 --> 00:12:16.110

so I'm just going to click on making



316

00:12:16.110 --> 00:12:19.080

sure the geek and the component tree the



317

00:12:19.080 --> 00:12:22.350

textview is selected and under ID I'm



318

00:12:22.350 --> 00:12:25.950

going to type in app text view press



319

00:12:25.950 --> 00:12:29.130

enter there just to save it and at the



320

00:12:29.130 --> 00:12:31.740

moment its width and height are both set



321

00:12:31.740 --> 00:12:34.140

to match parent so that it'll actually



322

00:12:34.140 --> 00:12:35.790

feel whatever space the ListView



323

00:12:35.790 --> 00:12:37.920

displays it in and that's fine but what



324

00:12:37.920 --> 00:12:41.250

I will do is change the text size to 18



325

00:12:41.250 --> 00:12:45.510

SP and then gonna go back to the text



326

00:12:45.510 --> 00:12:49.920

tab and just to a code reformat which



327

00:12:49.920 --> 00:12:52.970

was okay come back to the display tab



328

00:12:52.970 --> 00:12:56.190

and you can see in there now that that



329

00:12:56.190 --> 00:12:58.110

this layout really is just a text to you



330

00:12:58.110 --> 00:12:59.820

there's nothing in here except our text



331

00:12:59.820 --> 00:13:02.130

view at the top alright so we can go



332

00:13:02.130 --> 00:13:04.350

back to the design and what I can now do



333

00:13:04.350 --> 00:13:08.730

is close this list underscore item and



334

00:13:08.730 --> 00:13:10.560

we can start writing the code to create



335

00:13:10.560 --> 00:13:12.810

an adapter then set our ListView to use



336

00:13:12.810 --> 00:13:15.150

it so that the changes to the code are



337

00:13:15.150 --> 00:13:17.070

very simple and we'll see those in the



338

00:13:17.070 --> 00:13:19.550

next video



