WEBVTT
1

00:00:04.460 --> 00:00:06.440

all right so we're now ready to start



2

00:00:06.440 --> 00:00:08.870

writing the code to make our calculator



3

00:00:08.870 --> 00:00:10.969

calculate now we should have the



4

00:00:10.969 --> 00:00:13.340

calculator project open we're going to



5

00:00:13.340 --> 00:00:16.099

be editing main activity to Katie so I'm



6

00:00:16.099 --> 00:00:17.689

what I'm going to do is just to close



7

00:00:17.689 --> 00:00:19.820

down the activity main because we don't



8

00:00:19.820 --> 00:00:21.560

really need that open anymore



9

00:00:21.560 --> 00:00:23.930

maybe here and close it down and they're



10

00:00:23.930 --> 00:00:25.489

going to click on the project pane and



11

00:00:25.489 --> 00:00:27.470

it will come down here and open the



12

00:00:27.470 --> 00:00:30.349

package and the app Java then the



13

00:00:30.349 --> 00:00:32.390

package name Academy don't learn



14

00:00:32.390 --> 00:00:33.530

programming that calculator and



15

00:00:33.530 --> 00:00:35.540

double-click main activity you want to



16

00:00:35.540 --> 00:00:37.160

make sure also that you're also in the



17

00:00:37.160 --> 00:00:39.890

Android view alright so there's our



18

00:00:39.890 --> 00:00:43.190

class our main activity dot Katie now



19

00:00:43.190 --> 00:00:45.079

all the activity does at the moment is



20

00:00:45.079 --> 00:00:47.390

display the layout on the screen and



21

00:00:47.390 --> 00:00:49.640

that's taken care of by Android when we



22

00:00:49.640 --> 00:00:52.609

pass the layouts ID to set content view



23

00:00:52.609 --> 00:00:56.329

here on line 10 the Android will then be



24

00:00:56.329 --> 00:00:58.460

watching the buttons but as we haven't



25

00:00:58.460 --> 00:00:59.899

attached any code to them



26

00:00:59.899 --> 00:01:01.460

nothing will happen when we tap the



27

00:01:01.460 --> 00:01:04.220

buttons now it's probably a good idea to



28

00:01:04.220 --> 00:01:07.070

think about what we want it to do so



29

00:01:07.070 --> 00:01:08.390

let's actually have a look at some flow



30

00:01:08.390 --> 00:01:11.290

charts describing how the app will work



31

00:01:11.290 --> 00:01:13.939

now this is the main part of the program



32

00:01:13.939 --> 00:01:16.040

you can see on-screen and we've already



33

00:01:16.040 --> 00:01:17.960

got the code to display the layout on



34

00:01:17.960 --> 00:01:20.240

the screen so it's that call to set



35

00:01:20.240 --> 00:01:22.670

content view that will display our



36

00:01:22.670 --> 00:01:25.399

activity and it's called main layout so



37

00:01:25.399 --> 00:01:26.450

next we need to perform some



38

00:01:26.450 --> 00:01:29.090

initialization and this will find all



39

00:01:29.090 --> 00:01:30.890

the buttons that we're interested in and



40

00:01:30.890 --> 00:01:32.719

then set their own click listener



41

00:01:32.719 --> 00:01:34.880

so that they actually do something when



42

00:01:34.880 --> 00:01:37.610

they're tapped the program will then



43

00:01:37.610 --> 00:01:40.009

wait waking up each time the android



44

00:01:40.009 --> 00:01:41.990

framework calls one of the listeners



45

00:01:41.990 --> 00:01:43.939

that we've set that's the button click



46

00:01:43.939 --> 00:01:46.909

process after the initialization you



47

00:01:46.909 --> 00:01:49.039

know once the button is clicked we need



48

00:01:49.039 --> 00:01:50.869

to decide if it was one of the digit



49

00:01:50.869 --> 00:01:53.420

keys or the decimal point in which case



50

00:01:53.420 --> 00:01:55.250

we'll just append it to the number on



51

00:01:55.250 --> 00:01:57.140

the screen or if it represents an



52

00:01:57.140 --> 00:01:59.210

operation to perform on the numbers plus



53

00:01:59.210 --> 00:02:03.320

miners multiply divide or equals now the



54

00:02:03.320 --> 00:02:05.000

flow chart shows a decision being made



55

00:02:05.000 --> 00:02:08.179

there but that's a representation of how



56

00:02:08.179 --> 00:02:10.490

the logic works and doesn't directly



57

00:02:10.490 --> 00:02:12.740

correspond to how we're going to code it



58

00:02:12.740 --> 00:02:15.110

in place of a test to see what kind of



59

00:02:15.110 --> 00:02:17.300

button was clicked we're going to assign



60

00:02:17.300 --> 00:02:18.000

one or all



61

00:02:18.000 --> 00:02:20.130

to different listeners to the different



62

00:02:20.130 --> 00:02:22.650

types of button so the digits and



63

00:02:22.650 --> 00:02:24.780

decimal point buttons will have one



64

00:02:24.780 --> 00:02:25.770

onclicklistener



65

00:02:25.770 --> 00:02:28.200

and the operations button will have



66

00:02:28.200 --> 00:02:30.780

another now the flow chart is accurate



67

00:02:30.780 --> 00:02:33.000

but when you see one of those decision



68

00:02:33.000 --> 00:02:35.280

diamonds in a flow chart you generally



69

00:02:35.280 --> 00:02:37.080

expect the seen if statement in the code



70

00:02:37.080 --> 00:02:39.330

but to will be implementing the decision



71

00:02:39.330 --> 00:02:41.190

by attaching different listeners to the



72

00:02:41.190 --> 00:02:44.610

buttons instead now the digit a decimal



73

00:02:44.610 --> 00:02:46.440

point listener is going to be very



74

00:02:46.440 --> 00:02:49.230

simple it just reads the caption on the



75

00:02:49.230 --> 00:02:51.180

button and appends it to the number



76

00:02:51.180 --> 00:02:53.340

that's being built up in the Edit text



77

00:02:53.340 --> 00:02:56.370

on the screen when one of the operation



78

00:02:56.370 --> 00:02:57.270

buttons is tapped



79

00:02:57.270 --> 00:02:59.640

it'll just read the number from the edit



80

00:02:59.640 --> 00:03:01.709

text then check to make sure there



81

00:03:01.709 --> 00:03:03.660

actually was a number there if there



82

00:03:03.660 --> 00:03:06.300

isn't and the yellow box is empty the



83

00:03:06.300 --> 00:03:08.550

operation is stored as a pending



84

00:03:08.550 --> 00:03:11.310

operation and the program goes back to



85

00:03:11.310 --> 00:03:13.020

wait for another button to be clicked



86

00:03:13.020 --> 00:03:15.300

and it'll also update the little



87

00:03:15.300 --> 00:03:18.060

textview on the left with the symbol for



88

00:03:18.060 --> 00:03:20.010

the operation that was tapped just to



89

00:03:20.010 --> 00:03:21.810

remind the user what arithmetic



90

00:03:21.810 --> 00:03:24.330

operation will be performed when they



91

00:03:24.330 --> 00:03:26.370

press the equals button and if there was



92

00:03:26.370 --> 00:03:27.870

a number the program will perform



93

00:03:27.870 --> 00:03:30.090

whatever operation was pending and then



94

00:03:30.090 --> 00:03:33.480

display the result so as you can see on



95

00:03:33.480 --> 00:03:35.160

this slide the program will allow you to



96

00:03:35.160 --> 00:03:38.820

do things like 3 plus 50 minus 2 times 8



97

00:03:38.820 --> 00:03:41.540

and update the result after each stage



98

00:03:41.540 --> 00:03:44.790

so when you type the 3 it will appear on



99

00:03:44.790 --> 00:03:47.220

the display when you press + there's



100

00:03:47.220 --> 00:03:49.560

nothing to add to 3 so the pending



101

00:03:49.560 --> 00:03:51.989

operation becomes plus once you've



102

00:03:51.989 --> 00:03:54.750

entered 50 the minus button will cause



103

00:03:54.750 --> 00:03:56.700

the plus operation to be performed and



104

00:03:56.700 --> 00:03:59.579

the result 30 3 in this case will appear



105

00:03:59.579 --> 00:04:02.040

in the result now the pending operation



106

00:04:02.040 --> 00:04:04.829

will then be minors after 2 is entered



107

00:04:04.829 --> 00:04:07.290

the multiply button will cause the



108

00:04:07.290 --> 00:04:09.570

subtraction to be performed the result



109

00:04:09.570 --> 00:04:11.940

of 42 will be displayed and the pending



110

00:04:11.940 --> 00:04:13.829

operation will then be multiplied and



111

00:04:13.829 --> 00:04:16.590

once 8 is entered nothing will happen



112

00:04:16.590 --> 00:04:19.169

until another operation key including



113

00:04:19.169 --> 00:04:21.540

equals is tapped then the new result



114

00:04:21.540 --> 00:04:23.400

will be displayed alright so that looks



115

00:04:23.400 --> 00:04:25.560

fairly straightforward so let's go and



116

00:04:25.560 --> 00:04:29.340

add the code alright so we're going to



117

00:04:29.340 --> 00:04:31.370

start off with fields 2



118

00:04:31.370 --> 00:04:33.460

the references to the three widgets that



119

00:04:33.460 --> 00:04:36.350

will be updated or read and also some



120

00:04:36.350 --> 00:04:38.360

variables to store the operands and the



121

00:04:38.360 --> 00:04:41.600

pending operation so let's go ahead and



122

00:04:41.600 --> 00:04:44.120

do that now so we've got our various



123

00:04:44.120 --> 00:04:45.410

code in I'm just going to expand the



124

00:04:45.410 --> 00:04:46.729

import so we can see what we're doing



125

00:04:46.729 --> 00:04:49.580

here and just below the class activity



126

00:04:49.580 --> 00:04:53.180

line on line six I'll go to add a line



127

00:04:53.180 --> 00:04:56.620

here it's going to be private space VAR



128

00:04:56.620 --> 00:05:05.590

result space : and edit text equals null



129

00:05:05.590 --> 00:05:08.150

now Android studio is showing an error



130

00:05:08.150 --> 00:05:10.820

on line ages you can see there if I



131

00:05:10.820 --> 00:05:12.650

hover over it no cannot be a value of a



132

00:05:12.650 --> 00:05:16.190

non null type edit text now : does as



133

00:05:16.190 --> 00:05:18.290

much as possible to protect us from null



134

00:05:18.290 --> 00:05:20.900

pointer exceptions and des by default



135

00:05:20.900 --> 00:05:23.720

properties and variables in Kotlin can't



136

00:05:23.720 --> 00:05:25.970

be null now that's really great for



137

00:05:25.970 --> 00:05:28.220

preventing null pointer exceptions but



138

00:05:28.220 --> 00:05:29.870

it means that we have to change the way



139

00:05:29.870 --> 00:05:33.229

we think slightly if you used to Java so



140

00:05:33.229 --> 00:05:35.510

we can't just not initialize result on



141

00:05:35.510 --> 00:05:37.880

because Kotlin won't allow that so just



142

00:05:37.880 --> 00:05:39.919

to show that if I remove the equals null



143

00:05:39.919 --> 00:05:43.130

on the end there we also get another



144

00:05:43.130 --> 00:05:46.100

error property must be initialized or be



145

00:05:46.100 --> 00:05:49.490

abstract now with a Java mindset we



146

00:05:49.490 --> 00:05:51.229

could just declare result to be a



147

00:05:51.229 --> 00:05:53.900

nullable type which we do by adding a



148

00:05:53.900 --> 00:05:56.389

question mark after the name so I could



149

00:05:56.389 --> 00:05:58.729

come back here under the inner text and



150

00:05:58.729 --> 00:06:01.099

put a question mark and set that equal



151

00:06:01.099 --> 00:06:05.060

to null and that indeed does get rid of



152

00:06:05.060 --> 00:06:07.130

the error but now we lose all the



153

00:06:07.130 --> 00:06:09.590

protection from null pointer exceptions



154

00:06:09.590 --> 00:06:12.590

that Kotlin provides now marking



155

00:06:12.590 --> 00:06:15.680

variables is nullable is sometimes valid



156

00:06:15.680 --> 00:06:17.539

and we're going to be doing that shortly



157

00:06:17.539 --> 00:06:19.669

but unless you've got a good reason for



158

00:06:19.669 --> 00:06:21.740

doing this then it should be avoided



159

00:06:21.740 --> 00:06:23.780

so the problem with God is that we have



160

00:06:23.780 --> 00:06:26.510

to initialize result to something but we



161

00:06:26.510 --> 00:06:28.490

can't get the reference to our edit text



162

00:06:28.490 --> 00:06:30.200

widget until the oncreate method



163

00:06:30.200 --> 00:06:33.440

executes now the Java solution of



164

00:06:33.440 --> 00:06:35.539

initializing it to null is an actually



165

00:06:35.539 --> 00:06:38.539

good practice in Kotlin now fortunately



166

00:06:38.539 --> 00:06:40.610

the designers of the cotton language



167

00:06:40.610 --> 00:06:42.530

have thought of this and they provide



168

00:06:42.530 --> 00:06:44.780

the late init keyword as



169

00:06:44.780 --> 00:06:47.630

way to handle this situation so what we



170

00:06:47.630 --> 00:06:50.480

can do is come back up here and for our



171

00:06:50.480 --> 00:06:52.940

definition we can put private and before



172

00:06:52.940 --> 00:06:56.750

the VAR or put late you need their



173

00:06:56.750 --> 00:06:59.030

result in edit X and I'll get rid of the



174

00:06:59.030 --> 00:07:00.500

question mark equals null on the end



175

00:07:00.500 --> 00:07:03.080

there you can see the errors disappeared



176

00:07:03.080 --> 00:07:05.900

there and what that does it tells Kotlin



177

00:07:05.900 --> 00:07:08.000

that we're using a non nullable variable



178

00:07:08.000 --> 00:07:10.100

but that we're going to defer giving it



179

00:07:10.100 --> 00:07:12.410

a value until later so late into this



180

00:07:12.410 --> 00:07:14.660

you probably have figured out is short



181

00:07:14.660 --> 00:07:17.210

for late initialization now if we



182

00:07:17.210 --> 00:07:19.640

attempt to use result before giving it a



183

00:07:19.640 --> 00:07:22.580

value the app will actually crash now



184

00:07:22.580 --> 00:07:24.020

we've currently you'll get a Kotlin



185

00:07:24.020 --> 00:07:25.790

don't uninitialized property access



186

00:07:25.790 --> 00:07:28.190

exception although the documentation is



187

00:07:28.190 --> 00:07:30.470

a bit vague about the exact exception so



188

00:07:30.470 --> 00:07:32.090

we probably should rely on that exact



189

00:07:32.090 --> 00:07:34.220

exception in our code but that's not a



190

00:07:34.220 --> 00:07:35.480

problem because you wouldn't want to



191

00:07:35.480 --> 00:07:37.400

catch that exception it fixed the



192

00:07:37.400 --> 00:07:39.370

problem after finding it during testing



193

00:07:39.370 --> 00:07:41.630

ok so that's one way to solve the



194

00:07:41.630 --> 00:07:43.550

problem and I'm going to use this same



195

00:07:43.550 --> 00:07:45.530

later net approach for the next widget



196

00:07:45.530 --> 00:07:47.330

the other edittext which I'm going to



197

00:07:47.330 --> 00:07:49.880

call a new number let's go on and create



198

00:07:49.880 --> 00:07:55.250

that so private late in it their new



199

00:07:55.250 --> 00:08:00.169

number colon and inner text again so



200

00:08:00.169 --> 00:08:02.000

Laden it's very useful in cases like



201

00:08:02.000 --> 00:08:04.789

this the keep in mind can only be used



202

00:08:04.789 --> 00:08:07.039

with var properties in other words



203

00:08:07.039 --> 00:08:08.479

that's properties that are read and



204

00:08:08.479 --> 00:08:11.930

write now sometimes that's fine we may



205

00:08:11.930 --> 00:08:13.880

want to make result refer to different



206

00:08:13.880 --> 00:08:16.160

edit text widgets while the code runs in



207

00:08:16.160 --> 00:08:18.200

that case late in it is probably the



208

00:08:18.200 --> 00:08:20.240

best way to define it but in this app



209

00:08:20.240 --> 00:08:21.919

the references to our widgets won't



210

00:08:21.919 --> 00:08:24.979

change and that means that in colon we



211

00:08:24.979 --> 00:08:26.660

should consider declaring them as Val



212

00:08:26.660 --> 00:08:29.300

rather than var if that doesn't mean



213

00:08:29.300 --> 00:08:30.770

much to you then review the Kotlin



214

00:08:30.770 --> 00:08:33.680

tutorials earlier in this course alright



215

00:08:33.680 --> 00:08:35.510

so another way to declare our widget



216

00:08:35.510 --> 00:08:37.849

references is to use the lazy delegate



217

00:08:37.849 --> 00:08:39.919

so I'm going to show you how to do that



218

00:08:39.919 --> 00:08:41.000

so we're going to write some code now



219

00:08:41.000 --> 00:08:42.760

we're gonna top on the next line private



220

00:08:42.760 --> 00:08:50.180

vowel display operation by lazy then we



221

00:08:50.180 --> 00:08:51.620

need left-to-right curly braces and



222

00:08:51.620 --> 00:08:53.330

within then we're going to put fine V by



223

00:08:53.330 --> 00:08:56.780

ID and have the parentheses but before



224

00:08:56.780 --> 00:08:58.500

the parentheses we want to have two



225

00:08:58.500 --> 00:09:00.420

or a diamond as you can see there left



226

00:09:00.420 --> 00:09:03.390

and right sour signs and then we're



227

00:09:03.390 --> 00:09:07.100

going to type text view then in



228

00:09:07.100 --> 00:09:09.930

parentheses we're going to put our dot



229

00:09:09.930 --> 00:09:14.760

ID dot operation that's what a space



230

00:09:14.760 --> 00:09:17.130

says has a bit more readable now when



231

00:09:17.130 --> 00:09:20.310

when using this by lazy you're defining



232

00:09:20.310 --> 00:09:22.470

a function that will be called to assign



233

00:09:22.470 --> 00:09:24.960

the value to the property now the



234

00:09:24.960 --> 00:09:27.210

function will be called the first time



235

00:09:27.210 --> 00:09:29.430

that the property is accessed then the



236

00:09:29.430 --> 00:09:31.470

value is cached so that the function



237

00:09:31.470 --> 00:09:33.750

isn't called again that's pretty cool so



238

00:09:33.750 --> 00:09:35.400

as long as we don't access display



239

00:09:35.400 --> 00:09:37.950

operation until uncreate has been called



240

00:09:37.950 --> 00:09:40.530

this will work fine and it has the



241

00:09:40.530 --> 00:09:42.510

advantage that display operation can be



242

00:09:42.510 --> 00:09:44.700

declared as bell which can make code



243

00:09:44.700 --> 00:09:46.590

more robust for properties that won't



244

00:09:46.590 --> 00:09:49.950

change now there's no reason why I



245

00:09:49.950 --> 00:09:51.480

couldn't have used the same approach for



246

00:09:51.480 --> 00:09:53.820

all three variables in fact we probably



247

00:09:53.820 --> 00:09:55.770

should because there's no reason and



248

00:09:55.770 --> 00:09:57.990

result and new number can't be declared



249

00:09:57.990 --> 00:10:00.330

as Val but I've done it this way to show



250

00:10:00.330 --> 00:10:02.340

you the options and why you may have to



251

00:10:02.340 --> 00:10:04.350

use late in it rather than the lazy



252

00:10:04.350 --> 00:10:06.960

delegation now there are other ways of



253

00:10:06.960 --> 00:10:08.610

handling this and we'll see another



254

00:10:08.610 --> 00:10:11.070

alternative shortly Kotlin development



255

00:10:11.070 --> 00:10:12.840

for Android is still fairly new and



256

00:10:12.840 --> 00:10:14.700

developers uh still working out which



257

00:10:14.700 --> 00:10:16.950

approaches to settle on Google for



258

00:10:16.950 --> 00:10:18.540

instance don't yet have a style guide



259

00:10:18.540 --> 00:10:20.490

for Kotlin at least not at the time of



260

00:10:20.490 --> 00:10:23.430

recording this video when they do you'll



261

00:10:23.430 --> 00:10:25.200

probably have to find it at this address



262

00:10:25.200 --> 00:10:26.790

and I'm just going to put that on the



263

00:10:26.790 --> 00:10:28.080

screen there forever or I'll actually



264

00:10:28.080 --> 00:10:32.130

just open a browser so when they do



265

00:10:32.130 --> 00:10:33.660

release one which I'm sure they will in



266

00:10:33.660 --> 00:10:35.450

time it'll probably be at this address



267

00:10:35.450 --> 00:10:38.130

github.com forward slash google forward



268

00:10:38.130 --> 00:10:41.520

slash style guide or one word and you



269

00:10:41.520 --> 00:10:44.510

can see there if we actually scroll down



270

00:10:44.510 --> 00:10:47.100

there's various languages that they



271

00:10:47.100 --> 00:10:49.710

actually talk about in their job are C++



272

00:10:49.710 --> 00:10:51.900

Python and so forth but at the time I'm



273

00:10:51.900 --> 00:10:53.340

recording this there isn't a guide for



274

00:10:53.340 --> 00:10:55.220

Kotlin



275

00:10:55.220 --> 00:10:56.780

you can see there's nothing that seems



276

00:10:56.780 --> 00:10:58.100

to be starting with : I'm gonna do a



277

00:10:58.100 --> 00:11:01.940

quick search nothing there but I would



278

00:11:01.940 --> 00:11:03.740

say in time almost certainly they will



279

00:11:03.740 --> 00:11:06.980

release a style guide for Kotlin and



280

00:11:06.980 --> 00:11:08.090

once we've finished is that what I'm



281

00:11:08.090 --> 00:11:09.680

going to do is change it to use another



282

00:11:09.680 --> 00:11:11.330

way then you've seen three different



283

00:11:11.330 --> 00:11:13.130

ways of dealing with this situation



284

00:11:13.130 --> 00:11:15.380

and you can understand code regardless



285

00:11:15.380 --> 00:11:17.510

of the approach used but I'm just gonna



286

00:11:17.510 --> 00:11:20.150

go back to Android studio now one thing



287

00:11:20.150 --> 00:11:22.370

to know is that the Lazy function is



288

00:11:22.370 --> 00:11:24.530

thread safe and that means that if the



289

00:11:24.530 --> 00:11:26.630

display operation property is accessed



290

00:11:26.630 --> 00:11:28.490

by code in two or more threads



291

00:11:28.490 --> 00:11:30.800

simultaneously the function will still



292

00:11:30.800 --> 00:11:33.590

only be called once now don't worry if



293

00:11:33.590 --> 00:11:34.910

that doesn't make sense we will be



294

00:11:34.910 --> 00:11:37.040

talking about background threads later



295

00:11:37.040 --> 00:11:39.170

in the course for now though it's enough



296

00:11:39.170 --> 00:11:40.700

to use the modified version that I'm



297

00:11:40.700 --> 00:11:43.190

just about to enter now our activity



298

00:11:43.190 --> 00:11:45.200

class can't be accessed by more than one



299

00:11:45.200 --> 00:11:47.360

thread so there's actually no need for



300

00:11:47.360 --> 00:11:49.850

the extra overhead that lazy includes by



301

00:11:49.850 --> 00:11:52.160

default so when you're just using it in



302

00:11:52.160 --> 00:11:54.680

an activity as we are here then you can



303

00:11:54.680 --> 00:11:57.230

add an extra parameter to disable the



304

00:11:57.230 --> 00:11:59.570

thread safe code I'm going to do that



305

00:11:59.570 --> 00:12:02.360

now so after this by lazy we put in



306

00:12:02.360 --> 00:12:07.790

parenthesis then we type in lazy thread



307

00:12:07.790 --> 00:12:11.840

safety mode none I'm choosing that from



308

00:12:11.840 --> 00:12:13.730

the drop-down and everything else will



309

00:12:13.730 --> 00:12:16.190

be as it was before yes I said don't



310

00:12:16.190 --> 00:12:17.960

worry too much about that at this stage



311

00:12:17.960 --> 00:12:20.330

you probably do want to add that lazy



312

00:12:20.330 --> 00:12:22.520

thread safety mode none argument too



313

00:12:22.520 --> 00:12:24.560

lazy whenever you're using it in an



314

00:12:24.560 --> 00:12:26.630

activity like we are here and if you



315

00:12:26.630 --> 00:12:28.400

need thread safety in your properties



316

00:12:28.400 --> 00:12:30.620

you'll know and all of this will make a



317

00:12:30.620 --> 00:12:33.200

lot more sense later alright so moving



318

00:12:33.200 --> 00:12:35.420

on now we also need to make some



319

00:12:35.420 --> 00:12:38.120

variables to store the numbers that are



320

00:12:38.120 --> 00:12:39.080

we're going to be using in our



321

00:12:39.080 --> 00:12:41.330

calculations let's go ahead and do that



322

00:12:41.330 --> 00:12:45.530

and I'll just make a note here of what



323

00:12:45.530 --> 00:12:48.890

these are so variable variables to hold



324

00:12:48.890 --> 00:12:52.340

the operands and type of calculations



325

00:12:52.340 --> 00:12:57.230

rounds in type of calculation and the



326

00:12:57.230 --> 00:13:00.910

ones that we want here private bar



327

00:13:00.910 --> 00:13:03.130

around one



328

00:13:03.130 --> 00:13:07.150

: we want double capital D question mark



329

00:13:07.150 --> 00:13:09.280

equals null and I'll just top the other



330

00:13:09.280 --> 00:13:11.920

two then we'll talk about these private



331

00:13:11.920 --> 00:13:16.240

the bar again operand 2 : it can also be



332

00:13:16.240 --> 00:13:18.220

a double no question mark this time



333

00:13:18.220 --> 00:13:22.090

equals zero point zero is 0.04 a period



334

00:13:22.090 --> 00:13:24.730

whatever you used to calling it private



335

00:13:24.730 --> 00:13:29.770

bar pending operation equals and in



336

00:13:29.770 --> 00:13:32.980

double quote quotes an equal sign now I



337

00:13:32.980 --> 00:13:34.420

mentioned earlier that we'll be looking



338

00:13:34.420 --> 00:13:36.670

at a nullable variable and the



339

00:13:36.670 --> 00:13:38.710

Declaration of operand one shows how to



340

00:13:38.710 --> 00:13:41.620

specify that it can be null to do that



341

00:13:41.620 --> 00:13:43.180

you just put a question mark after its



342

00:13:43.180 --> 00:13:44.620

type as you can see I've done there on



343

00:13:44.620 --> 00:13:47.620

line 14 now the reason we're allowing up



344

00:13:47.620 --> 00:13:49.540

around want to be know is that we need



345

00:13:49.540 --> 00:13:51.280

to record whether it's been given a



346

00:13:51.280 --> 00:13:54.010

value or not now when the apps first



347

00:13:54.010 --> 00:13:55.930

started there won't be a number to



348

00:13:55.930 --> 00:13:58.630

perform calculations on in our app needs



349

00:13:58.630 --> 00:14:00.790

to allow for this so that it knows when



350

00:14:00.790 --> 00:14:02.580

the number that the user enters is



351

00:14:02.580 --> 00:14:07.030

operand 1 or operand 2 now a null value



352

00:14:07.030 --> 00:14:09.610

for operand 1 signifies that the user



353

00:14:09.610 --> 00:14:12.310

hasn't yet given it a value and you'll



354

00:14:12.310 --> 00:14:13.660

see how to make use of this in a moment



355

00:14:13.660 --> 00:14:15.550

you know the important thing is that



356

00:14:15.550 --> 00:14:18.460

null is a valid type for operand 1 so



357

00:14:18.460 --> 00:14:20.590

we're deliberately declaring it as a



358

00:14:20.590 --> 00:14:23.950

variable that can be null okay so moving



359

00:14:23.950 --> 00:14:26.590

on now into the oncreate function we



360

00:14:26.590 --> 00:14:28.630

need to find our widgets and store the



361

00:14:28.630 --> 00:14:30.970

references to them in those 3 variables



362

00:14:30.970 --> 00:14:33.790

and we also need to do that for the 16



363

00:14:33.790 --> 00:14:35.620

buttons so let's go ahead and do that



364

00:14:35.620 --> 00:14:38.440

now so I'm going to add this code after



365

00:14:38.440 --> 00:14:40.300

the super don't create in after the



366

00:14:40.300 --> 00:14:43.900

setcontentview calls so the first one is



367

00:14:43.900 --> 00:14:47.770

going to be result is equal to its final



368

00:14:47.770 --> 00:14:50.320

view by ID then it's going to be r dot



369

00:14:50.320 --> 00:14:52.990

ID dot result you can see i'm selecting



370

00:14:52.990 --> 00:14:56.400

from the drop downs then new number



371

00:14:56.400 --> 00:14:59.380

that's equal to find view by ID and



372

00:14:59.380 --> 00:15:02.050

that's going to be our dot ID dot new



373

00:15:02.050 --> 00:15:04.120

number and again we're using the IDs



374

00:15:04.120 --> 00:15:06.580

that we defined when we were creating a



375

00:15:06.580 --> 00:15:09.900

layout so next we need to add



376

00:15:09.900 --> 00:15:14.240

definitions for our data input buttons



377

00:15:14.240 --> 00:15:17.809

so instead of coming to that effect I'm



378

00:15:17.809 --> 00:15:20.559

gonna start with bowel butter the 0



379

00:15:20.559 --> 00:15:23.629

colon button with a capital B equals



380

00:15:23.629 --> 00:15:27.920

it's fine view by ID ID and it should be



381

00:15:27.920 --> 00:15:30.410

button 0 then what I'm going to do is



382

00:15:30.410 --> 00:15:34.759

just copy one for the rest so button 1 2



383

00:15:34.759 --> 00:15:37.970

3 4 5 6 7 8 9 and we'll also do the dot



384

00:15:37.970 --> 00:15:47.329

so let's go ahead and change those and



385

00:15:47.329 --> 00:15:50.740

the last one we'll call button dot and



386

00:15:50.740 --> 00:15:53.360

button dot and this is going to be then



387

00:15:53.360 --> 00:16:01.429

9 8 7 6 5 4 3 2 and 1



388

00:16:01.429 --> 00:16:03.589

now you know if you made a mistake there



389

00:16:03.589 --> 00:16:05.149

because we type something that doesn't



390

00:16:05.149 --> 00:16:07.610

exist you'll get this red flag so these



391

00:16:07.610 --> 00:16:09.920

again these IDs and the IDs we defined



392

00:16:09.920 --> 00:16:12.379

when we were creating the layout earlier



393

00:16:12.379 --> 00:16:14.720

in this section of the course all right



394

00:16:14.720 --> 00:16:16.279

so that's our data input buttons there



395

00:16:16.279 --> 00:16:20.269

now yeah we also need to store



396

00:16:20.269 --> 00:16:22.910

references to our operations buttons as



397

00:16:22.910 --> 00:16:25.579

well so let's make a comment about that



398

00:16:25.579 --> 00:16:31.730

so operation buttons like a more space



399

00:16:31.730 --> 00:16:38.740

here so we've got button equals so



400

00:16:38.740 --> 00:16:42.470

button equals equals it's gonna be find



401

00:16:42.470 --> 00:16:47.290

P by ID in in the diamond and put button



402

00:16:47.290 --> 00:16:50.929

some type button this may be our dot ID



403

00:16:50.929 --> 00:16:56.240

dot there's a button equals and let's do



404

00:16:56.240 --> 00:16:59.119

the same for the divide button multiply



405

00:16:59.119 --> 00:17:04.069

minus and plus so first one is going to



406

00:17:04.069 --> 00:17:08.809

be divided



407

00:17:08.809 --> 00:17:15.839

divide next one will do multiply let's



408

00:17:15.839 --> 00:17:17.339

just eat his last two as well we also



409

00:17:17.339 --> 00:17:20.579

want the miners and then finish up with



410

00:17:20.579 --> 00:17:24.059

the plus and on the left-hand side let's



411

00:17:24.059 --> 00:17:28.260

fix them as well so plus will be the



412

00:17:28.260 --> 00:17:33.140

first one miners for the next one



413

00:17:33.140 --> 00:17:38.580

didn't multiply and that should be it so



414

00:17:38.580 --> 00:17:40.529

equals divide multiply minus and plus



415

00:17:40.529 --> 00:17:42.929

and it was divided multiply minus and



416

00:17:42.929 --> 00:17:45.659

plus on the right hand side and by the



417

00:17:45.659 --> 00:17:47.490

way only referring to the button widgets



418

00:17:47.490 --> 00:17:50.039

inside this uncreate method and so



419

00:17:50.039 --> 00:17:51.929

there's no need to create properties for



420

00:17:51.929 --> 00:17:53.460

them and that's why we've done that as



421

00:17:53.460 --> 00:17:54.899

opposed to the other ones that where



422

00:17:54.899 --> 00:17:56.750

we've created our properties outside



423

00:17:56.750 --> 00:18:02.220

that topic outside the method now we're



424

00:18:02.220 --> 00:18:04.260

using the Android find view by ID



425

00:18:04.260 --> 00:18:06.630

function to get references to the



426

00:18:06.630 --> 00:18:08.639

widgets in the layout but note that we



427

00:18:08.639 --> 00:18:10.320

don't need to do that for the operation



428

00:18:10.320 --> 00:18:13.049

widget the find V by ID function will be



429

00:18:13.049 --> 00:18:15.480

called the first time we access display



430

00:18:15.480 --> 00:18:17.850

operation so we don't need to find it in



431

00:18:17.850 --> 00:18:19.980

our on create function and that's this



432

00:18:19.980 --> 00:18:22.620

lazy delegate function that we defined



433

00:18:22.620 --> 00:18:25.559

here on line 12 basically that's the



434

00:18:25.559 --> 00:18:28.830

lazy delegate to at work now blink lines



435

00:18:28.830 --> 00:18:30.750

in the code also help to separate the



436

00:18:30.750 --> 00:18:33.120

two distinct groups of buttons and to



437

00:18:33.120 --> 00:18:35.370

make our code more readable and they've



438

00:18:35.370 --> 00:18:36.809

also included a comic to show the



439

00:18:36.809 --> 00:18:38.610

differences between the two sets



440

00:18:38.610 --> 00:18:41.010

now the first group of buttons are used



441

00:18:41.010 --> 00:18:42.809

to enter the numerical values that will



442

00:18:42.809 --> 00:18:45.210

be performing our calculations with the



443

00:18:45.210 --> 00:18:46.980

second group of operations that we can



444

00:18:46.980 --> 00:18:48.600

perform on those values here the add



445

00:18:48.600 --> 00:18:51.380

subtraction multiplication and so forth



446

00:18:51.380 --> 00:18:52.620

now



447

00:18:52.620 --> 00:18:54.630

Copland can't work out the widgets typed



448

00:18:54.630 --> 00:18:56.070

from the quarter point of view by ID



449

00:18:56.070 --> 00:18:58.860

that just returns a view object which



450

00:18:58.860 --> 00:19:01.080

could represent any type of object so we



451

00:19:01.080 --> 00:19:02.639

need to provide provide Kotlin with a



452

00:19:02.639 --> 00:19:04.529

clue to the type of widget we're



453

00:19:04.529 --> 00:19:07.080

expecting now I've done this in two ways



454

00:19:07.080 --> 00:19:08.970

in the first group of buttons I've done



455

00:19:08.970 --> 00:19:10.919

that by specifying the top of each



456

00:19:10.919 --> 00:19:13.350

widget that's the colon button as part



457

00:19:13.350 --> 00:19:15.539

of the declaration but another way to



458

00:19:15.539 --> 00:19:17.820

achieve the same thing is to specify the



459

00:19:17.820 --> 00:19:21.120

generic type that find by finally by ID



460

00:19:21.120 --> 00:19:21.740

will left



461

00:19:21.740 --> 00:19:24.440

returned and to do that we specify on



462

00:19:24.440 --> 00:19:26.870

the type parameter in angle brackets as



463

00:19:26.870 --> 00:19:29.360

you can see here on line 40 now you



464

00:19:29.360 --> 00:19:30.860

wouldn't normally mix the two ways of



465

00:19:30.860 --> 00:19:32.630

doing this and he certainly what



466

00:19:32.630 --> 00:19:34.280

shouldn't mix them in the same function



467

00:19:34.280 --> 00:19:36.190

but I've done it here to show both ways



468

00:19:36.190 --> 00:19:38.660

there's no advantage to either so pick



469

00:19:38.660 --> 00:19:40.309

one you like and stick with it and be



470

00:19:40.309 --> 00:19:42.679

consistent now obviously if you work for



471

00:19:42.679 --> 00:19:44.840

a company that has a style guide and



472

00:19:44.840 --> 00:19:47.240

they specify one method or the other



473

00:19:47.240 --> 00:19:48.950

then you'd use the approach that they



474

00:19:48.950 --> 00:19:50.600

are suggesting in their style guide I



475

00:19:50.600 --> 00:19:52.280

would normally suggest using Google's



476

00:19:52.280 --> 00:19:55.070

style guide as the pointer but as I



477

00:19:55.070 --> 00:19:56.270

pointed out they haven't produced one



478

00:19:56.270 --> 00:19:58.220

yet all right so at this point we now



479

00:19:58.220 --> 00:20:00.590

need to set a listener on the buttons so



480

00:20:00.590 --> 00:20:02.300

that they'll do something when they're



481

00:20:02.300 --> 00:20:04.820

tapped now in the button click counter



482

00:20:04.820 --> 00:20:06.800

app there was only one button so we used



483

00:20:06.800 --> 00:20:09.350

an anonymous inner class to set its



484

00:20:09.350 --> 00:20:11.510

listener but here we going to assign the



485

00:20:11.510 --> 00:20:14.150

same listener to multiple buttons so



486

00:20:14.150 --> 00:20:15.320

we're going to give the listener a name



487

00:20:15.320 --> 00:20:17.300

for that reason I'm going to come down



488

00:20:17.300 --> 00:20:19.460

here and code that still in the on



489

00:20:19.460 --> 00:20:22.760

create a function and I'm gonna type Val



490

00:20:22.760 --> 00:20:26.990

space listener is equal to this view



491

00:20:26.990 --> 00:20:30.610

with a capital v dot on click listener



492

00:20:30.610 --> 00:20:33.470

then in the left-to-right curly braces



493

00:20:33.470 --> 00:20:36.559

we're gonna need to type V then dash and



494

00:20:36.559 --> 00:20:39.800

a greater than sign press ENTER and type



495

00:20:39.800 --> 00:20:44.809

Val B equals V s button the capital B



496

00:20:44.809 --> 00:20:46.700

then it's going to be a new number



497

00:20:46.700 --> 00:20:52.460

the next line new number dot append B



498

00:20:52.460 --> 00:20:56.000

dot text okay so what have I done there



499

00:20:56.000 --> 00:20:58.370

well the variable listener holds a



500

00:20:58.370 --> 00:21:00.260

reference to a new onclicklistener



501

00:21:00.260 --> 00:21:03.590

instance and it's on click method just



502

00:21:03.590 --> 00:21:05.840

reads the caption of the button using



503

00:21:05.840 --> 00:21:08.450

the text property that appends it to any



504

00:21:08.450 --> 00:21:11.660

text already in the new number in a text



505

00:21:11.660 --> 00:21:14.179

widget now when a button is tapped and



506

00:21:14.179 --> 00:21:16.130

the android framework causes the on



507

00:21:16.130 --> 00:21:18.710

click method it passes in a reference to



508

00:21:18.710 --> 00:21:21.020

the button that was tapped now remember



509

00:21:21.020 --> 00:21:23.570

that all widgets of views so any widget



510

00:21:23.570 --> 00:21:25.010

that's tapped can be passed as a



511

00:21:25.010 --> 00:21:28.309

parameter to unclick as an instance of



512

00:21:28.309 --> 00:21:30.020

its base class view



513

00:21:30.020 --> 00:21:32.990

now not all views can have text so



514

00:21:32.990 --> 00:21:35.330

before we refer to the text property



515

00:21:35.330 --> 00:21:38.389

we have to actually cast B as a widget



516

00:21:38.389 --> 00:21:41.149

that does have a text property in this



517

00:21:41.149 --> 00:21:43.489

case that's a button because we know



518

00:21:43.489 --> 00:21:45.220

we're attaching this listener to buttons



519

00:21:45.220 --> 00:21:47.899

now B isn't a very good name for a



520

00:21:47.899 --> 00:21:50.029

variable but in a short function like



521

00:21:50.029 --> 00:21:52.249

this two lines is not worth spending any



522

00:21:52.249 --> 00:21:53.600

time to come up with anything more



523

00:21:53.600 --> 00:21:55.879

meaningful definitely don't use names



524

00:21:55.879 --> 00:21:57.409

like that for variables that have a



525

00:21:57.409 --> 00:21:59.570

wider scope or that exists in more



526

00:21:59.570 --> 00:22:01.399

complex functions with many lines of



527

00:22:01.399 --> 00:22:03.769

code all right so the next step is to



528

00:22:03.769 --> 00:22:05.570

assign this listener to each of the



529

00:22:05.570 --> 00:22:07.940

eleven buttons at zero to nine and the



530

00:22:07.940 --> 00:22:10.009

decimal point so that it's called



531

00:22:10.009 --> 00:22:12.080

when one of them is clicked so to do



532

00:22:12.080 --> 00:22:15.739

that we need to on the line below for



533

00:22:15.739 --> 00:22:17.389

each one button whatever the button is



534

00:22:17.389 --> 00:22:21.289

button 0 dot sit on click listener and



535

00:22:21.289 --> 00:22:22.909

we're going to type in listener as the



536

00:22:22.909 --> 00:22:25.820

argument we do the same for the other



537

00:22:25.820 --> 00:22:27.320

button so we've got buttons 1 through 9



538

00:22:27.320 --> 00:22:34.580

and then also we've got dot then we've



539

00:22:34.580 --> 00:22:41.570

got 9 8 7 6 5 4 3 2 1 and obviously



540

00:22:41.570 --> 00:22:44.499

button 0 was the first one that was set



541

00:22:44.499 --> 00:22:46.279

now I guess I said we wanted to be



542

00:22:46.279 --> 00:22:48.259

clever we could have stored all the



543

00:22:48.259 --> 00:22:50.359

button variables in an array and loop



544

00:22:50.359 --> 00:22:52.549

through to set the listener instead of



545

00:22:52.549 --> 00:22:54.559

copying each line like I've done but



546

00:22:54.559 --> 00:22:55.999

with only 11 buttons it probably



547

00:22:55.999 --> 00:22:58.129

wouldn't save any lines of code but if I



548

00:22:58.129 --> 00:23:00.169

was implementing a full keyboard and I'd



549

00:23:00.169 --> 00:23:01.399

certainly look at doing something like



550

00:23:01.399 --> 00:23:04.700

that now we should now be able to run



551

00:23:04.700 --> 00:23:06.470

the program on an emulator and make sure



552

00:23:06.470 --> 00:23:08.330

the buttons work as I should but this



553

00:23:08.330 --> 00:23:10.279

video is getting a bit long so let's



554

00:23:10.279 --> 00:23:11.629

actually look at doing that in the next



555

00:23:11.629 --> 00:23:13.899

video



