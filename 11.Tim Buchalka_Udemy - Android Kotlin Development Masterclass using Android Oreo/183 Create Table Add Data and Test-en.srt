1
00:00:05,300 --> 00:00:08,120
All right so that's the database file created at that moment.

2
00:00:08,120 --> 00:00:09,060
There's nothing in it.

3
00:00:09,350 --> 00:00:14,690
So I need to execute some sequel statements to create a table and put some data in it.

4
00:00:14,870 --> 00:00:17,280
Let's go ahead and add the code for that.

5
00:00:17,360 --> 00:00:19,780
So I'm going to do a sequel.

6
00:00:19,880 --> 00:00:30,570
He calls in double quotes create table space contacts in parentheses or left parentheses underscore

7
00:00:30,650 --> 00:00:39,380
ID spice integer spice pro-McCain common spice K spice not spice.

8
00:00:39,380 --> 00:00:51,290
No comma spice text comma find spice integer comma team spice text the raw parentheses and close the

9
00:00:51,290 --> 00:00:51,900
double quite.

10
00:00:51,900 --> 00:01:01,850
Two cards is the string of what we what we can do is to a database dot exec Saeco and in parentheses

11
00:01:01,850 --> 00:01:03,890
pass Sakal playing the string.

12
00:01:04,060 --> 00:01:10,250
So I want to execute and then what we'll do is on the next line would you say call equals Betancourt's

13
00:01:10,820 --> 00:01:21,590
insert spice into any spice contex parentheses nine common spice wine common spice female parentheses

14
00:01:21,590 --> 00:01:31,570
spice and valleys and left parentheses single quite timid single quote comma and put six four five six

15
00:01:31,580 --> 00:01:42,530
seven eight nine come on then a single quites to that same outcome single quite there in parentheses.

16
00:01:42,650 --> 00:01:44,000
Not quite.

17
00:01:44,120 --> 00:01:51,490
Now I'm going to do the same thing there database dot exec Sakal and pass sequence the argument again.

18
00:01:51,530 --> 00:01:56,570
So the method we call to execute sequence statements in our database as we can say is the exec siecle

19
00:01:56,570 --> 00:02:02,460
method and all we're doing there is passing a string containing the Siku statement when executed.

20
00:02:02,480 --> 00:02:09,450
So we start off by creating a table called contex that contains the three columns name phone and email.

21
00:02:09,630 --> 00:02:11,750
And we also including an ide column.

22
00:02:12,050 --> 00:02:16,610
And we've discussed the already column before and we'll see how Android uses it.

23
00:02:16,610 --> 00:02:19,550
When we come to populate a list view from our data.

24
00:02:19,850 --> 00:02:22,150
So an expert inserted some data into the table.

25
00:02:22,270 --> 00:02:27,840
I'm going to insert some data in the type of guy using the second insert statement alone 23.

26
00:02:27,930 --> 00:02:29,600
We've used that in previous videos.

27
00:02:29,760 --> 00:02:35,390
The the white cotton strings are enclosed in speech marks or quites so therefore it makes sense to use

28
00:02:35,390 --> 00:02:40,740
single quites in so it has Saeco instead insert statements and I've done that as you can see launced

29
00:02:40,760 --> 00:02:44,670
when he's right there we could use double quotes or speechmatics inside a string.

30
00:02:44,840 --> 00:02:47,630
But then we'd have to skate escaped with a backslash.

31
00:02:47,710 --> 00:02:53,150
So that Cutler knows we're putting a space Mago quite inside the string rather than terminating the

32
00:02:53,150 --> 00:02:57,030
string at that point they can get confusing having all these backslash characters.

33
00:02:57,050 --> 00:03:02,980
So I think it makes a lot more sense to use single quites for the values inside a second string rocksand

34
00:03:02,980 --> 00:03:08,780
it's part that's how first insert statement and it should create a new row in the context table with

35
00:03:08,780 --> 00:03:09,840
those values.

36
00:03:10,310 --> 00:03:14,720
And these are the same siecle commands that we've used in previous videos when we entered siecle into

37
00:03:14,720 --> 00:03:17,380
the C Kalat three command line interface.

38
00:03:17,420 --> 00:03:23,010
So we're literally just passing them as arguments to the exec siecle method.

39
00:03:23,030 --> 00:03:28,120
Now the exec sequel method isn't really intended to be used for data manipulation statements.

40
00:03:28,190 --> 00:03:30,850
It works and we will verify that shortly.

41
00:03:30,870 --> 00:03:33,710
Let's see what the documentation has to say about it.

42
00:03:33,740 --> 00:03:36,910
We're going to come up here and click on the exact siku.

43
00:03:37,190 --> 00:03:40,910
I'm going to pick up that pipe in the documentation.

44
00:03:41,100 --> 00:03:45,510
You could say he executes a single sequence type that is not a select or any other.

45
00:03:45,510 --> 00:03:48,080
Is your statement that returns data.

46
00:03:48,100 --> 00:03:52,300
So in other words if you try to execute a select statement you'll get an error.

47
00:03:52,520 --> 00:03:55,290
Now the documentation is quite a little bit further.

48
00:03:55,300 --> 00:04:01,660
Also it mentions the uncertain update method and we're encouraged to use them instead of exec siecle.

49
00:04:01,670 --> 00:04:04,370
We want to change data in the database.

50
00:04:04,370 --> 00:04:10,310
Now one reason for using Insert an update is that we've got no record of the ID that was generated for

51
00:04:10,330 --> 00:04:11,160
any right.

52
00:04:11,420 --> 00:04:12,870
So that's often important.

53
00:04:13,040 --> 00:04:17,460
We may want to store it in the news tag for example so that we can quickly retrieve the record that's

54
00:04:17,480 --> 00:04:18,770
being displayed.

55
00:04:18,830 --> 00:04:19,820
One example.

56
00:04:19,820 --> 00:04:25,310
Now I would change the way we're adding that record but I will add another one this time using the insert

57
00:04:25,310 --> 00:04:26,510
method instead.

58
00:04:26,900 --> 00:04:33,460
And to do that can come down here after the insert into context long after the second call to the exact

59
00:04:33,460 --> 00:04:44,720
same call method that values equals and kind of code content values happen in closing a print.

60
00:04:44,990 --> 00:04:47,060
It's not a ploy.

61
00:04:47,860 --> 00:04:52,340
Kenny Brice and right which you can say has been added automatically and then the next one I'm going

62
00:04:52,340 --> 00:04:55,980
to put put parentheses.

63
00:04:56,110 --> 00:05:04,100
That's really Niven type of quartz comma and Fred and double quites like slobbing the report parentheses

64
00:05:04,100 --> 00:05:04,520
again.

65
00:05:04,700 --> 00:05:09,930
Finally double quotes and then this time I can put one two three four five with out double quotes and

66
00:05:10,030 --> 00:05:19,000
on the third line put parentheses around double quotes come up and double quotes Fred at Newark dot

67
00:05:19,000 --> 00:05:21,810
com quite the raw parentheses.

68
00:05:22,110 --> 00:05:24,100
They got the closing right.

69
00:05:24,100 --> 00:05:31,240
Kelly Bryce there's you can say that after that what we're going to do is put Vau generated on D is

70
00:05:31,240 --> 00:05:43,690
equal to database don't insert parentheses contex and double quotes come up the values and I missed

71
00:05:43,690 --> 00:05:49,350
one argument there because if I have a look at the insert again just about here and have a look and

72
00:05:49,480 --> 00:05:55,030
this to have the now column hack as well as policy values hard to do is come back there and add now

73
00:05:55,030 --> 00:05:59,760
as the second argument and that should fix it up.

74
00:05:59,880 --> 00:06:00,270
Right.

75
00:06:00,310 --> 00:06:05,830
So tally can obviously say now that the insert method is taking three arguments the name of the table

76
00:06:05,830 --> 00:06:08,560
to insert into context in this case.

77
00:06:08,560 --> 00:06:14,140
We've also got this now column hack and also that and then the values that we're actually adding are

78
00:06:14,140 --> 00:06:17,770
wanting added to the table to that particular table.

79
00:06:17,770 --> 00:06:20,200
Now I'm going to talk about the number column hack argument.

80
00:06:20,200 --> 00:06:21,010
A bit later.

81
00:06:21,310 --> 00:06:23,500
For now that I see you can say I'm just using or passing.

82
00:06:23,500 --> 00:06:24,610
Now for that.

83
00:06:24,610 --> 00:06:28,990
Now the values are provided in something called a content values object.

84
00:06:28,990 --> 00:06:34,810
And really all that is is just a wrapper class around a hash map which lets it store a set of key value

85
00:06:34,810 --> 00:06:41,080
pairs and you can see overstand where assigning the key value pairs alone 29 3:31 basically got one

86
00:06:41,080 --> 00:06:44,380
for each field in that table each column in that table.

87
00:06:44,500 --> 00:06:48,730
Basically the case of the column names and the type which you probably figured out with it passing the

88
00:06:48,730 --> 00:06:52,860
table type values to that insert method.

89
00:06:52,990 --> 00:07:00,760
Now also I saw into the valley return by insert a lot 34 to a variable called generated ID so that we

90
00:07:00,760 --> 00:07:04,240
can look at and check that it's what we expected it to be.

91
00:07:04,240 --> 00:07:09,080
Now you may not come across apply before talking about the card up here.

92
00:07:09,230 --> 00:07:10,010
20.

93
00:07:10,500 --> 00:07:17,350
It's a Cartland extension function that takes a function block and executes it with an object it's called

94
00:07:17,350 --> 00:07:18,720
on as its receiver.

95
00:07:18,910 --> 00:07:24,790
So effectively that means that the function block runs just as if it was a function of the class the

96
00:07:24,790 --> 00:07:26,750
content values class.

97
00:07:26,800 --> 00:07:33,520
In this case so apply returns the object it was code on which is extremely useful because he were responding

98
00:07:33,520 --> 00:07:39,840
that to the values variable which means that the values get the new content vallies object.

99
00:07:39,910 --> 00:07:43,190
Now the equivalent code we could have done was going to post.

100
00:07:43,220 --> 00:07:44,500
And just to give you an alternative

101
00:07:47,560 --> 00:07:52,840
precedent except formatting.

102
00:07:52,940 --> 00:07:57,380
We could have done it that way and I can say that's a similar way of doing it but to block the way that

103
00:07:57,380 --> 00:08:01,700
apply returns the object that it was called and I think it makes for better looking code.

104
00:08:01,700 --> 00:08:08,630
But the that the example that I pasted in here would be how you would write it in in Java or non idiomatic.

105
00:08:08,790 --> 00:08:09,380
It's huge.

106
00:08:09,380 --> 00:08:13,050
It's more usual to use apply when doing things like this.

107
00:08:13,460 --> 00:08:18,950
Right so the code that we've written that should create a database and the context table and insert

108
00:08:18,950 --> 00:08:22,010
some data into it before we run this and check it.

109
00:08:22,010 --> 00:08:23,560
Let's add some logging.

110
00:08:23,570 --> 00:08:27,230
We're going to start with a usual tech constant.

111
00:08:27,610 --> 00:08:38,560
Let's go up into that product constant flle tag because it's main activity.

112
00:08:38,770 --> 00:08:42,160
Obviously that should have been above the class let me put that in the right place.

113
00:08:44,170 --> 00:08:48,210
Cuyp is a consummate and let's add a bit of logging just to make sure it's working.

114
00:08:48,230 --> 00:08:56,090
I'm going to come down here and just before the exec I'm going to put logged up the parentheses tech

115
00:08:56,120 --> 00:09:06,180
come up and double quotes we're going to put on Create call on siecle is ta'ala secret.

116
00:09:06,950 --> 00:09:08,870
You take a copy of that line.

117
00:09:09,000 --> 00:09:13,820
So that's Firaaq creation table down here from the sequel for the insert.

118
00:09:14,030 --> 00:09:20,320
We're going to do the same thing for the exact exact is called On create a sequence call again that's

119
00:09:20,330 --> 00:09:21,420
our second line.

120
00:09:21,550 --> 00:09:26,600
And for the third one after the Vau generated Ardalan it's come down to the end of that I'm going to

121
00:09:26,600 --> 00:09:29,360
do some logging there we're going to change that a little bit.

122
00:09:29,360 --> 00:09:38,260
We're going to look at it with a dollar generated ID at this point.

123
00:09:38,260 --> 00:09:43,270
Now we should be able to run the app and see the entries in the look at let's actually run this now.

124
00:09:46,500 --> 00:09:49,890
So what I'm going to do is select an emulator that have to find.

125
00:09:49,890 --> 00:09:51,760
That's not a Google Play emulator.

126
00:09:51,810 --> 00:09:56,690
And the reason that is that we're going to be using IDB to connect to the device and end the database

127
00:09:56,710 --> 00:10:02,060
later so I'll go on the Rabboni credit he codexes for this IPO 26 Texas.

128
00:10:02,160 --> 00:10:07,650
And that tells me right away that it's not a Google Play and that's because the Google Play emulator

129
00:10:07,890 --> 00:10:09,720
doesn't give you the ability to get read access.

130
00:10:09,720 --> 00:10:10,970
I'm going to select that one.

131
00:10:11,360 --> 00:10:13,350
OK let's give them a moment to stop

132
00:10:19,130 --> 00:10:21,430
the comics that we think about we really want to see the logs.

133
00:10:21,440 --> 00:10:22,770
Let's have a look at and log.

134
00:10:26,950 --> 00:10:32,720
We've got a lot of stuff here so what we can do are just to make it a bit easier to see what we've done

135
00:10:32,720 --> 00:10:33,500
here.

136
00:10:33,710 --> 00:10:38,950
We can remove some unnecessary noise from the theater party or torturing on minor activities.

137
00:10:38,960 --> 00:10:46,190
Let's say that forward slash main activity you can say to me that we can see really much more clearly

138
00:10:46,670 --> 00:10:51,440
what's actually happened here with that the slash part of why the force that you might still get an

139
00:10:51,450 --> 00:10:57,890
interesting log entries from the system that's expected that we have a look at the log entries.

140
00:10:58,010 --> 00:11:02,330
The new ID for that second row is number two which we would have expected.

141
00:11:02,330 --> 00:11:06,860
All right so that's execute sequence statements from our cutline card.

142
00:11:06,950 --> 00:11:13,490
We use the the exec sequel method of the sequel like database class to execute Siku statements.

143
00:11:13,490 --> 00:11:16,800
We've also got insert update into late methods we can use as well.

144
00:11:16,940 --> 00:11:21,400
And these are more appropriate when inserting or updating data in the database.

145
00:11:21,440 --> 00:11:26,480
Now by the way that the exact sequence will work for insert update and delete statements but you will

146
00:11:26,480 --> 00:11:32,540
see later why it can be useful to get an idea that was generated or a count of the number of rows affected.

147
00:11:32,630 --> 00:11:36,570
In the case of the update and delete methods or about to finish the video here.

148
00:11:36,570 --> 00:11:42,150
The next step is to write some code to retrieve the data and we'll work on that in the next few.

