1
00:00:05,300 --> 00:00:09,660
Muy bien, ahora lo que queremos hacer es comenzar a agregar algunos oyentes a nuestro reproductor

2
00:00:09,880 --> 00:00:12,830
de YouTube, para que podamos obtener retroalimentacin cuando ocurran varias cosas.

3
00:00:12,920 --> 00:00:18,260
Ahora el reproductor de YouTube puede responder a una serie de eventos diferentes, como reproducir un video,

4
00:00:18,260 --> 00:00:24,860
pausar o detenerse, y tambin puede notificarnos cuando comiencen a reproducirse los anuncios que aparecen al comienzo de muchos videos de YouTube.

5
00:00:24,860 --> 00:00:30,380
Ahora Google ha separado estos dos tipos de eventos: eventos asociados con la reproduccin de un

6
00:00:30,380 --> 00:00:34,710
video y aquellos que representan un cambio en el estado del video.

7
00:00:35,060 --> 00:00:38,850
Ahora esto tendr ms sentido cuando vea a los dos oyentes que vamos a crear.

8
00:00:38,960 --> 00:00:41,620
As que voy a seguir adelante con el cdigo

9
00:00:41,660 --> 00:00:48,090
y hablar sobre ello luego, pero primero lo que queremos hacer es crear un nuevo playbackEventListener, para manejar los eventos de reproduccin.

10
00:00:48,180 --> 00:00:52,850
Entonces, lo que voy a hacer es poner eso despus de la funcin onInitializationFailure.

11
00:00:52,870 --> 00:00:54,230
Aqu voy a

12
00:00:56,870 --> 00:01:08,350
poner privado val playback playback event listener equal object object YouTubePlayer. Reproducir EventListener, y voy a agregar

13
00:01:08,360 --> 00:01:12,450
un bloque de cdigo.

14
00:01:12,470 --> 00:01:15,000
Ahora el playbackEventListener es una interfaz, as que tenemos

15
00:01:15,170 --> 00:01:18,480
que implementar todos los mtodos definidos por esa interfaz, y es

16
00:01:18,530 --> 00:01:22,940
por eso que en realidad tenemos este error por el momento, que "el objeto no

17
00:01:22,940 --> 00:01:29,030
es abstracto y no implementa el miembro abstracto" para onSeek ". Como siempre, Android Studio puede crear automticamente un taln para cada una

18
00:01:29,030 --> 00:01:30,990
de las funciones que tenemos que implementar.

19
00:01:31,240 --> 00:01:36,830
As que me asegurar de que mi cursor est dentro del bloque de cdigo y haga un control I, y voy a

20
00:01:36,830 --> 00:01:39,000
seleccionar todos los mtodos y hacer clic en OK.

21
00:01:39,690 --> 00:01:45,380
Y puede ver ahora que lo hemos hecho, el error que era un objeto ahora ha desaparecido. Ahora, para que podamos ver que se invocan

22
00:01:45,380 --> 00:01:51,940
estos mtodos, lo que voy a hacer es agregar un mensaje de Toast a los mtodos onPlaying y onPaused.

23
00:01:52,070 --> 00:01:57,080
No vamos a utilizar las funciones onSeek y onBuffered, pero tendremos que eliminar la llamada a TODO, de lo

24
00:01:57,200 --> 00:01:59,980
contrario, nuestra aplicacin se bloquear cuando se llamen esas funciones.

25
00:02:00,190 --> 00:02:04,880
As que sigamos y lo hagamos, as que vamos a eliminar este aqu, en

26
00:02:04,910 --> 00:02:09,820
Seek, eliminar eso, y tambin en Batir, lo borraremos, y tambin en Stop, lo borraremos.

27
00:02:10,170 --> 00:02:15,650
Bueno, eso los deja aqu, el primero en "Jugando", lo usaremos, y voy a hacer un

28
00:02:15,650 --> 00:02:20,170
mensaje de Toast, por lo que toast. makeText entre parntesis, pasa

29
00:02:20,180 --> 00:02:24,410
esto como el contexto. Pero vamos a hacer algo un poco diferente, vamos a

30
00:02:24,490 --> 00:02:27,280
poner, y notar que hay una opcin all, esto, y luego esto en YoutubeActivity.

31
00:02:27,290 --> 00:02:29,130
As que voy

32
00:02:29,430 --> 00:02:35,240
a seleccionar esa segunda opcin, coma comillas dobles, "Buen video est

33
00:02:35,530 --> 00:02:41,250
jugando bien", y luego Toast. LENGTH_SHORT y nuevos parntesis dot show.

34
00:02:41,630 --> 00:02:48,080
As que esa es la primera vez que se reproduce, y reemplacemos el onPaused con el mismo cdigo, pero

35
00:02:48,080 --> 00:02:51,850
simplemente cambiemos el texto un poco. En lugar de poner "Buen video

36
00:02:51,890 --> 00:02:54,990
est sonando bien", vamos a poner "Video ha pausado".

37
00:02:55,670 --> 00:02:59,990
Entonces, lo que tenemos aqu es solo un oyente, como por ejemplo, adjuntamos botones.

38
00:02:59,990 --> 00:03:04,910
Ahora lo he declarado de esta manera porque hay bastante cdigo, y parecera muy complicado si agregamos todo este

39
00:03:04,940 --> 00:03:07,830
cdigo a las llamadas de funcin que configuran a los oyentes.

40
00:03:08,090 --> 00:03:14,180
Entonces, este oyente proporciona al reproductor de YouTube las funciones a las que llamar cuando ocurran los diversos eventos.

41
00:03:14,330 --> 00:03:19,880
Y cuando un video comienza a reproducirse, por ejemplo, llamar a la funcin de reproduccin y se suspender si

42
00:03:19,880 --> 00:03:21,720
pausamos el video, y as sucesivamente.

43
00:03:21,830 --> 00:03:26,390
Entonces depende de ti lo que quieras hacer con estas funciones. No son necesarios para que el reproductor

44
00:03:26,390 --> 00:03:32,780
reproduzca videos, pero esta podra ser una aplicacin, quizs, que brinde un curso de capacitacin de una compaa, por ejemplo.

45
00:03:32,780 --> 00:03:37,610
Y en ese caso, podra registrar el hecho de que el usuario ha visto un video y qu tan lejos estn

46
00:03:37,910 --> 00:03:42,370
de l, y tal vez registrarlo en su plan de capacitacin de empleados agregando cdigo en el mtodo onStop.

47
00:03:42,710 --> 00:03:46,940
Hay otro evento que veremos a continuacin que podras usar para grabar que

48
00:03:46,940 --> 00:03:48,530
realmente vieron el video completo.

49
00:03:48,530 --> 00:03:55,500
Ahora la API del reproductor de YouTube est rastreando la reproduccin del video y dndonos la capacidad de procesar eventos cuando suceden.

50
00:03:55,760 --> 00:04:01,660
Entonces ese es el playbackEventListener. As que agreguemos StateChangeListener y veamos

51
00:04:02,390 --> 00:04:16,790
qu hace ahora: private val playerStateChangeListener es igual a object colon. Esta vez ser YouTubePlayer. Player como PlayerStateChangeListener, y ahora el bloque de cdigo, y

52
00:04:18,120 --> 00:04:22,730
vamos a usar el control I, asegurndonos de que el

53
00:04:23,260 --> 00:04:26,740
cursor est dentro del bloque de cdigo.

54
00:04:26,990 --> 00:04:33,190
Vamos a implementar todas las funciones, lo que luego detiene el error para que no aparezca ahora. Y realmente vamos a agregar algunos mensajes de Toast

55
00:04:33,190 --> 00:04:33,200
&nbsp;

56
00:04:33,200 --> 00:04:37,230
a tres de ellos, para que pueda ver cundo se llaman.

57
00:04:37,370 --> 00:04:39,620
As que enAdStarted, comencemos con ese, y

58
00:04:42,440 --> 00:04:47,840
pegar el viejo mensaje de Toast, dejando el 'esto' en YoutubeActivity, y voy a cambiar el texto para

59
00:04:47,840 --> 00:04:58,990
que sea "Haga clic en Anuncio ahora, haga el video creador rico! ". OK, y tomar una copia de eso.

60
00:04:59,050 --> 00:05:03,550
Ahora onLoading, no nos molestaremos con eso, as que simplemente eliminar el TODO all para eso.

61
00:05:03,740 --> 00:05:06,000
onVideoStarted, hagamos algo por eso.

62
00:05:06,000 --> 00:05:08,660
Voy a reemplazar eso con el Tostador. makeText, pero en trminos

63
00:05:08,920 --> 00:05:13,330
del texto real que vamos a mostrar en la pantalla y el

64
00:05:13,330 --> 00:05:19,370
mensaje Toast, lo haremos "El video ha comenzado". OK, as que deja un poco ms, as que todava tenemos OnLoaded aqu,

65
00:05:19,940 --> 00:05:23,290
onLoaded lo vamos a eliminar por ahora, as que no tenemos TODO, en VideoEnded,

66
00:05:23,470 --> 00:05:29,830
ese es un buen lugar para otro, as que cambiemos el cdigo para eso. Voy a cambiar el texto

67
00:05:29,830 --> 00:05:37,450
para eso, y el texto para el video en Enviado ser

68
00:05:41,420 --> 00:05:45,230
"Felicitaciones", Felicitaciones! Has completado otro video ".

69
00:05:46,540 --> 00:05:50,890
OK, tenemos un error. Vamos a eliminar el cdigo en nuestro error tambin.

70
00:05:50,890 --> 00:05:53,680
Ahora, para tener una mejor idea sobre de qu

71
00:05:53,680 --> 00:05:59,050
se tratan estas funciones, volvamos a la pgina de documentacin de Google de mi navegador, y realmente recomiendo

72
00:05:59,050 --> 00:06:00,320
que realmente hagas esto.

73
00:06:00,370 --> 00:06:05,050
Consulte la documentacin para obtener ms informacin acerca de las funciones que utiliza, porque as es como realmente

74
00:06:05,050 --> 00:06:06,630
entiende las cosas que estn sucediendo.

75
00:06:06,910 --> 00:06:11,440
Y tambin descubrir otras cosas que puede hacer, como el dilogo de error que vimos

76
00:06:11,440 --> 00:06:17,290
cuando miramos la documentacin para los resultados de la inicializacin. Ahora en el lado izquierdo aqu, hay una

77
00:06:17,290 --> 00:06:21,600
tabla, una especie de tabla de contenidos para YouTubePlayer, y est el PlaybackEventListener.

78
00:06:21,820 --> 00:06:26,500
Y ah est, as que voy a hacer clic en eso ahora, PlaybackEventListener, y una vez que haya hecho clic en

79
00:06:26,500 --> 00:06:29,530
eso, eso nos dar una idea general de lo que hacen las diversas funciones.

80
00:06:29,710 --> 00:06:32,770
Y probablemente haya adivinado la mayor parte de esto a partir de

81
00:06:32,770 --> 00:06:37,840
los nombres de las funciones, pero es interesante que el mtodo onStop en el PlaybackEventListener tambin se llame entonces.

82
00:06:38,050 --> 00:06:43,150
Entonces eso implica que debemos llamar a ambas funciones cuando el video se reproduce hasta el final.

83
00:06:43,150 --> 00:06:48,670
Ahora son cosas sutiles como esta las que descubrirs cuando leas la documentacin. Los nombres y parmetros de los mtodos generalmente son

84
00:06:48,670 --> 00:06:52,330
bien elegidos y le darn una buena idea de lo que hacen,

85
00:06:52,420 --> 00:06:54,020
pero solo obtendr la imagen

86
00:06:54,100 --> 00:06:58,890
completa haciendo investigaciones en lnea, y la documentacin es un excelente lugar para comenzar con eso.

87
00:06:59,110 --> 00:07:04,030
Entonces, despus de leer eso, lo que voy a hacer es agregar un mensaje de Toast

88
00:07:04,030 --> 00:07:05,240
al mtodo onStopped tambin,

89
00:07:05,260 --> 00:07:14,150
para que podamos ver si estamos en lo cierto y llamar a ambos mtodos. As que volvamos al mtodo onStopped, y peguemos all algn cdigo, y tambin pondremos

90
00:07:14,150 --> 00:07:14,690
"Video detenido".

91
00:07:18,310 --> 00:07:21,880
De acuerdo, ahora hemos configurado los oyentes que respondern a los diversos eventos, pero en

92
00:07:22,130 --> 00:07:25,160
este momento an no le hemos dicho al jugador que los llame.

93
00:07:25,280 --> 00:07:28,410
De hecho, Android Studio muestra nuestras dos variables en gris, como puede

94
00:07:28,430 --> 00:07:31,220
ver aqu, y tambin la ms arriba, para indicar que en

95
00:07:32,160 --> 00:07:34,170
realidad no se usan en ninguna parte.

96
00:07:34,680 --> 00:07:40,110
Entonces, lo que tenemos que hacer es, en la funcin onInitializationSuccess, simplemente llamar a las funciones de configuracin y decirle

97
00:07:40,110 --> 00:07:44,590
al jugador dnde encontrar las funciones que necesitar para devolver la llamada cuando ocurran los eventos.

98
00:07:44,610 --> 00:07:49,560
As que vamos a hacer eso en el evento onInitializationSuccess como mencion, y donde queremos poner

99
00:07:49,560 --> 00:07:52,150
esto es antes del cdigo if not wasRestored.

100
00:07:52,380 --> 00:08:02,040
As que aqu vamos a poner youTubePlayer signo de interrogacin dot setPlayerStateChangeListener parntesis, y

101
00:08:02,220 --> 00:08:07,920
eso va a ser playerStateChangeListener, luego youTubePlayer nuevamente,

102
00:08:09,060 --> 00:08:14,980
Question mark dot set, esta vez es playbackEventListener parntesis,

103
00:08:15,240 --> 00:08:18,460
y va a ser playbackEventListener.

104
00:08:18,780 --> 00:08:23,670
As que eso le dice al jugador de nuevo dnde encontrar las funciones que tendr que volver a llamar cuando esos

105
00:08:23,670 --> 00:08:25,920
eventos se desencadenen, o en realidad, cuando realmente sucedan.

106
00:08:25,940 --> 00:08:32,010
Ahora el uso de clases annimas dentro de esas llamadas a setPlayerStateChangeListener y setPlayback EventListener, habra hecho

107
00:08:32,010 --> 00:08:37,830
que el cdigo fuera muy desordenado, por lo que en su lugar, declaramos variables para ellos.

108
00:08:37,830 --> 00:08:42,170
Muy bien, intentemos ejecutar la aplicacin y ver aparecer nuestros mensajes de Toast:

109
00:08:46,080 --> 00:08:49,710
Inicializados con xito, y Video se detuvo, como puede ver.

110
00:08:49,920 --> 00:08:54,980
Ahora cuando vengo aqu y toco el icono de reproduccin, aparece un mensaje, como puede ver, apareci un mensaje

111
00:08:54,980 --> 00:08:59,020
de Toast para decir que el 'Video se ha reproducido', 'Buen video est reproduciendo OK'.

112
00:08:59,140 --> 00:09:04,480
Voy a hacer una pausa por un minuto ahora, y se puede ver que dice 'El video se ha detenido', y si lo comienzo

113
00:09:04,710 --> 00:09:07,410
nuevamente, 'Buen video est sonando bien' de nuevo, entonces tenemos ese mensaje.

114
00:09:07,590 --> 00:09:09,730
Del mismo modo, cuando hago una pausa, tenemos 'Video ha pausado' de nuevo.

115
00:09:10,110 --> 00:09:16,960
Y si en realidad tambin avanzo un poco, puedes ver que tenemos ese mensaje otra vez, y podemos reproducirlo nuevamente, 'Buen video est

116
00:09:20,380 --> 00:09:25,190
sonando bien' como puedes ver, as que en realidad est funcionando muy bien para nosotros .

117
00:09:25,190 --> 00:09:29,770
La otra cosa que har ahora, es adelantar unos pocos segundos desde el final, solo para que puedas ver

118
00:09:29,770 --> 00:09:31,410
lo que sucede cuando termina el video.

119
00:09:31,750 --> 00:09:39,340
As que llegamos a las 4:16, play, 'Felicidades, has completado otro video'.

120
00:09:39,340 --> 00:09:41,750
Viste que aparece, y luego 'Video se detuvo' tambin.

121
00:09:41,950 --> 00:09:47,090
Entonces recibimos ambos mensajes como pueden ver. La funcin onVideoEnded de playerStateChangeListener muestra

122
00:09:47,090 --> 00:09:51,680
su Toast, y luego obtenemos Toast de la funcin onStopped o playbackEventListener.

123
00:09:51,950 --> 00:09:57,160
De acuerdo, as es como usas la API YouTubePlayer para reproducir videos en tus propias aplicaciones.

124
00:09:57,190 --> 00:10:02,230
Ahora no hemos tenido que escribir una gran cantidad de cdigo para reproducir los videos, porque usamos

125
00:10:02,280 --> 00:10:06,110
la API de YouTube de Google para encargarnos de todos los detalles tcnicos.

126
00:10:06,130 --> 00:10:11,920
Sin embargo, ahora hemos cubierto algunos conceptos importantes, que incluyen cmo agregar una biblioteca externa a nuestro cdigo, y

127
00:10:11,920 --> 00:10:18,450
tambin cmo escribir funciones de devolucin de llamada que llama el cdigo externo, cuando necesita notificar a nuestras aplicaciones sobre eventos importantes.

128
00:10:18,460 --> 00:10:24,040
Ahora hemos visto devoluciones de llamadas antes, porque un evento de clic de botn tambin llama a una funcin de devolucin de llamada

129
00:10:24,040 --> 00:10:28,450
en nuestro cdigo para que podamos responder al clic del botn, y los vamos a usar mucho en

130
00:10:28,450 --> 00:10:34,330
el curso, para que pueda obtener muchos ejemplos de retrollamadas e interfaces. Y trataremos de explicarlos de manera diferente cada vez.

131
00:10:34,500 --> 00:10:36,350
Si no tienen sentido ahora, pronto lo harn.

132
00:10:36,580 --> 00:10:39,820
Bien, entonces en el prximo video, necesitamos hacer un par de mejoras a la aplicacin.

133
00:10:39,850 --> 00:10:41,240
As que te ver en el siguiente video.

