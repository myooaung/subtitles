WEBVTT
1

00:00:05.070 --> 00:00:10.080

Ento eu mencionei no ltimo vdeo que o framework de busca no faz a busca por ns.



2

00:00:10.170 --> 00:00:11.770

Temos que escrever o cdigo para fazer isso.



3

00:00:11.940 --> 00:00:17.370

Agora, uma maneira comum de funcionar  que o usurio responda aos critrios de pesquisa e, ao



4

00:00:17.370 --> 00:00:22.280

enviar a consulta, a estrutura de pesquisa lana outra atividade para lidar com a pesquisa.



5

00:00:22.560 --> 00:00:25.910

E  por isso que tivemos que configurar o filtro de inteno no manifesto.



6

00:00:26.100 --> 00:00:28.430

Mas vamos fazer as coisas de maneira um pouco diferente.



7

00:00:28.680 --> 00:00:35.640

Ento, aqui, a mesma atividade que contm o filtro de inteno  aquela que exibe o widget SearchView.



8

00:00:35.640 --> 00:00:41.310

Agora, este  um exemplo bastante simples de como adicionar uma pesquisa a um aplicativo, e tudo o que precisamos fazer aqui 



9

00:00:41.310 --> 00:00:46.410

passar os termos de pesquisa de volta para nossa atividade principal, para que ele possa filtrar as fotos do Flickr.



10

00:00:46.620 --> 00:00:51.630

Ento, vamos ver o que acontece quando eu procuro por algo e envio a consulta. Ento, vou voltar ao nosso emulador, que



11

00:00:51.630 --> 00:00:52.840

est em execuo.



12

00:00:53.120 --> 00:00:55.590

Ento ns entramos em nossa busca.



13

00:00:55.670 --> 00:01:03.490

Ento o que realmente acontece quando eu tento procurar por algo, ento eu vou procurar por Oreo e aperte enter.



14

00:01:03.590 --> 00:01:08.150

Basicamente, no importa neste estgio porque no escrevemos o cdigo para lidar com isso, mas nada



15

00:01:08.150 --> 00:01:08.910

parece ter acontecido.



16

00:01:09.140 --> 00:01:10.620

Mas se dermos uma



17

00:01:14.260 --> 00:01:21.470

olhada no logcat, podemos ver aqui, SearchActivity, ento onCreateOptionsMenu e onCreate comeam, e eles esto sendo chamados novamente



18

00:01:21.470 --> 00:01:24.200

porque eles so na verdade chamados anteriormente.



19

00:01:24.200 --> 00:01:28.450

Ento, basicamente, eles so chamados, uma vez que pressionamos entrar l para enviar a pesquisa.



20

00:01:28.700 --> 00:01:34.670

Em outras palavras, quando enviamos a pesquisa, a estrutura de pesquisa do Android procura no manifesto por uma atividade que



21

00:01:35.000 --> 00:01:41.030

tenha o filtro de inteno de pesquisa de ponto de ao e inicie essa atividade, que nesse caso  nossa



22

00:01:41.030 --> 00:01:41.960

Atividade de pesquisa.



23

00:01:41.960 --> 00:01:47.690

Agora, como eu disse, uma abordagem comum  ter o widget SearchView em uma atividade, por exemplo, MainActivity, e



24

00:01:47.690 --> 00:01:51.430

fazer com que ele inicie outra atividade para realizar a pesquisa real.



25

00:01:51.740 --> 00:01:56.810

Mas a abordagem que vamos usar aqui  responder aos eventos de retorno de chamada do widget



26

00:01:57.050 --> 00:02:02.540

SearchView, para recuperar os termos de pesquisa que nosso usurio digita e, em seguida, pass-los de volta para MainActivity.



27

00:02:02.540 --> 00:02:07.820

Agora, no vamos usar o filtro de inteno no manifesto, mas ainda precisamos inclu-lo, porque



28

00:02:07.820 --> 00:02:12.440

o gerenciador de pesquisa precisa dele para obter as informaes pesquisveis da atividade.



29

00:02:12.710 --> 00:02:18.770

Ento, o que vamos fazer  responder aos eventos gerados pelo widget SearchView para lidar com a



30

00:02:18.770 --> 00:02:22.970

consulta de pesquisa do usurio, e isso evitar esse comportamento indesejvel.



31

00:02:23.180 --> 00:02:28.120

Estamos enviando uma pesquisa recm-lanada, uma atividade de pesquisa novamente conforme voc viu. Tudo bem, ento o tempo de



32

00:02:28.130 --> 00:02:30.100

documentao novamente. Vamos verificar alguma documentao.



33

00:02:34.750 --> 00:02:40.510

Vamos dar uma olhada nos eventos que o SearchView nos permite responder, e logo voc pode



34

00:02:40.510 --> 00:02:45.970

ver que o resumo  bastante til aqui. Rolando para baixo, voc pode ver



35

00:02:45.970 --> 00:02:48.160

que h um OnCloseListener e



36

00:02:48.160 --> 00:02:50.140

um OnQueryTextListener tambm. Agora, ambos parecem promissores,



37

00:02:50.140 --> 00:02:52.350

por isso vou seguir os links para ver como us-los.



38

00:02:52.350 --> 00:02:53.710

Vamos dar uma olhada



39

00:02:56.500 --> 00:03:01.080

em onCloseListener, e voc pode ver que onCloseListener define uma nica funo, onClose, que 



40

00:03:01.270 --> 00:03:03.330

chamada quando o usurio fecha um SearchView.



41

00:03:03.940 --> 00:03:10.560

Agora, se substituirmos que devemos retornar false, para manter o comportamento padro de limpar o campo de texto e descart-lo,



42

00:03:10.580 --> 00:03:11.390

fechando o



43

00:03:11.560 --> 00:03:13.510

SearchView para baixo em outras palavras.



44

00:03:13.850 --> 00:03:17.980

OK, ento isso soa como uma maneira de lidar com o usurio cancelando a busca, ento



45

00:03:18.090 --> 00:03:19.900

vamos voltar e seguir o outro link.



46

00:03:23.250 --> 00:03:30.690

Ento, d uma olhada nesse OnQueryTextListener, e voc pode ver que



47

00:03:30.690 --> 00:03:35.770

OnQueryTextListener define duas funes. Podemos monitorar todas as alteraes feitas pelo usurio no



48

00:03:35.880 --> 00:03:40.590

texto da consulta enquanto elas so digitadas, mas, para nosso propsito, a funo onQueryTextSubmit parece mais til.



49

00:03:40.660 --> 00:03:46.140

Agora, se fornecermos uma funo onQueryTextSubmit substituda, ela ser chamada quando o usurio



50

00:03:46.140 --> 00:03:51.420

enviar uma consulta para o aplicativo pesquisar. E rolando para baixo olhando para algumas das outras



51

00:03:51.420 --> 00:03:57.210

informaes, basicamente as descries mais detalhadas desta funo, este onQueryTextSubmit. Podemos ver l que isso vai retornar



52

00:03:57.210 --> 00:03:59.450

verdadeiro, aqui embaixo, se vamos lidar



53

00:03:59.680 --> 00:04:05.220

com a consulta, o que vamos fazer. Agora, porque esta  uma interface, temos



54

00:04:05.220 --> 00:04:07.040

que implementar ambas as funes.



55

00:04:07.100 --> 00:04:12.900

Portanto, para a funo onQueryTextchange, retornaremos false para permitir que o comportamento padro seja usado



56

00:04:12.900 --> 00:04:15.970

ou os usurios digitem na caixa de pesquisa.



57

00:04:16.300 --> 00:04:17.610

Ento vamos voltar



58

00:04:20.280 --> 00:04:27.720

para o Android Studio, feche o log cat. Agora, vou remover parte desse registro na funo onCreateOptionsMenu e configurar os



59

00:04:27.720 --> 00:04:30.530

ouvintes dos eventos do SearchView aos quais precisamos responder.



60

00:04:30.720 --> 00:04:34.180

E isso  exatamente o mesmo que os outros ouvintes que implementamos, ao fazer



61

00:04:34.350 --> 00:04:39.000

coisas como verificar se um boto est sendo clicado. Poderamos obter nossa classe de atividade de



62

00:04:39.030 --> 00:04:42.970

pesquisa para implementar as duas interfaces e apenas adicionar a funo  classe.



63

00:04:43.080 --> 00:04:44.490

Agora ns adotamos essa abordagem



64

00:04:44.490 --> 00:04:50.250

mais cedo, ento apenas para misturar as coisas, eu vou implementar as duas interfaces usando classes annimas, como fizemos



65

00:04:50.250 --> 00:04:53.390

para o boto negate no desafio do aplicativo da calculadora.



66

00:04:53.430 --> 00:04:54.340

Ento vou



67

00:04:54.340 --> 00:05:01.690

comentar as entradas de log primeiro, estas trs aqui, depois desta linha, a linha isIconified.



68

00:05:02.370 --> 00:05:06.820

Vamos em frente e faa isso. Ento vamos



69

00:05:09.120 --> 00:05:11.070

fazer searchView,



70

00:05:11.280 --> 00:05:24.630

ponto de interrogao, e vai ser setOnQueryTextListener, e vai ser um objeto clon SearchView



71

00:05:24.630 --> 00:05:29.320

ponto OnQueryText Listener. ento vamos adicionar um bloco de cdigo.



72

00:05:29.320 --> 00:05:34.540

Ento, vamos chamar a funo setOnQueryTextListener e passar uma classe



73

00:05:34.540 --> 00:05:37.290

annima que implementa a interface OnQueryTextListener.



74

00:05:37.390 --> 00:05:42.680

Novamente, assim como fizemos ao definir onClickListener para o boto negar no desafio da calculadora.



75

00:05:42.910 --> 00:05:47.680

Portanto, este  um padro padro ao implementar ouvintes e o mais comum a ser usado



76

00:05:47.680 --> 00:05:51.060

quando voc deseja aplicar o ouvinte a apenas um nico objeto.



77

00:05:51.370 --> 00:05:55.590

Tudo bem ento ns adicionamos essa chamada, o para setOnQueryTextListener para essa funo.



78

00:05:55.710 --> 00:05:59.150

Ento, vamos fazer com que o Android Studio gere os stubs usando o controle



79

00:05:59.330 --> 00:06:05.790

i, certificando-se de que meu cursor esteja dentro do bloco de cdigo, e o motivo de estarmos recebendo este erro  que estou controlando i e no



80

00:06:05.800 --> 00:06:06.340

est funcionando.



81

00:06:06.330 --> 00:06:11.100

A razo para isso  que eu realmente no fechei isso corretamente, ento temos



82

00:06:11.170 --> 00:06:16.600

parnteses aqui abrindo e eu deveria ter realmente adicionado os parnteses de fechamento, fechando parnteses l.



83

00:06:16.600 --> 00:06:21.490

Pelo contrrio, o que eu deveria fazer  fechar a tag parntese l, assim, e uma vez



84

00:06:21.550 --> 00:06:26.110

que fazemos isso, devemos achar que o controle funciona, e voc pode ver que funcionou.



85

00:06:26.150 --> 00:06:31.160

Ento, novamente, fiz isso para que o Android Studio gerasse os stubs. Vou selecionar os dois e clique em OK.



86

00:06:31.660 --> 00:06:36.610

Ento, como eu mencionei, no vamos fazer nada na funo onQueryTextchange, ento podemos deixar que o



87

00:06:36.610 --> 00:06:37.680

retorno seja falso.



88

00:06:37.840 --> 00:06:39.970

Vamos em frente e faa isso.



89

00:06:39.970 --> 00:06:46.130

Ento eu vou me livrar do TODO, ento vamos apenas retornar falso, porque no estamos lidando com isso.



90

00:06:46.690 --> 00:06:52.240

Mas o que queremos trabalhar  esse onQueryTextSubmit, que  chamado apenas quando



91

00:06:52.240 --> 00:06:54.350

o usurio envia a pesquisa.



92

00:06:54.490 --> 00:07:03.480

Ento vamos adicionar um pouco de log primeiro, ento Log. d parnteses TAG vrgula aspas duplas



93

00:07:03.500 --> 00:07:07.350

ponto onQueryText enviar clon chamado.



94

00:07:09.160 --> 00:07:13.420

Ento o nico outro tipo que eu vou colocar l alm do registro,  uma chamada para a funo de



95

00:07:13.420 --> 00:07:14.140

trmino de atividade.



96

00:07:14.280 --> 00:07:20.440

Agora o trmino fecha a atividade e retorna para qualquer atividade lanada. No nosso caso, isso  MainActivity, ento



97

00:07:20.590 --> 00:07:24.140

podemos fazer parnteses para chamar essa funo, ento



98

00:07:24.210 --> 00:07:26.930

vamos retornar true. Ele se livra desse outro erro.



99

00:07:27.280 --> 00:07:30.540

Agora, ser til verificar o que acontece na MainActivity tambm.



100

00:07:30.730 --> 00:07:35.620

Ento, vamos voltar para MainActivity, substituir sua funo de currculo e adicionar alguns logging l tambm.



101

00:07:35.800 --> 00:07:38.020

Ento MainActivity, desce at



102

00:07:41.070 --> 00:07:47.250

o final, comando o e queremos onResume, que  esse aqui, onResume.



103

00:07:48.260 --> 00:07:51.360

E o que queremos fazer  deixar a super chamada l por enquanto e apenas adicionar alguns logs.



104

00:07:51.360 --> 00:08:02.700

Ento log. d parnteses aspas duplas TAG vrgula ponto onResume comea. Certo, agora que fizemos isso, vamos ver como isso



105

00:08:02.700 --> 00:08:05.900

se comporta quando enviamos uma consulta de pesquisa.



106

00:08:06.330 --> 00:08:07.380

Ento, vou executar o aplicativo novamente.



107

00:08:10.460 --> 00:08:13.520

OK, eu tambm vou abrir o log cat, e vamos voltar e dar uma olhada



108

00:08:13.680 --> 00:08:19.120

no nosso aplicativo, e o que queremos fazer  procurar por algum texto. Vou clicar nesse cone de



109

00:08:19.120 --> 00:08:26.460

busca, vou digitar algum texto, marshmallow. Agora, se voc pressionar enter aqui, descobrir que no obter



110

00:08:26.460 --> 00:08:31.830

a funcionalidade adequada e, normalmente, quando estiver usando um dispositivo real, voc veio at aqui



111

00:08:32.130 --> 00:08:34.630

e clicou nesse boto. Ento eu vou tocar



112

00:08:35.050 --> 00:08:35.610

essa seta



113

00:08:35.700 --> 00:08:37.400

direita no teclado aqui embaixo.



114

00:08:38.310 --> 00:08:40.970

E voc pode ver que voltamos  atividade principal.



115

00:08:40.980 --> 00:08:47.210

Agora ele ainda mostra essas fotos Oreo, porque ainda no passamos os resultados da consulta, mas o log



116

00:08:47.250 --> 00:08:49.220

cat  e deve ser interessante.



117

00:08:49.270 --> 00:08:53.250

Ento, eu vou rolar de volta para o topo, chegando ao topo l.



118

00:08:53.470 --> 00:08:59.460

E se voc descer e dar uma olhada aqui, voc pode ver que temos SearchActivity onCreate e



119

00:08:59.460 --> 00:09:02.640

onOptions ItemSelected, ambos sendo chamados. Descendo um pouco mais,



120

00:09:02.640 --> 00:09:10.330

ns temos o nosso onCreateOptionsMenu comeando e fechando. Mas um pouco mais abaixo temos o nosso onQueryTextSubmit chamado, e



121

00:09:10.330 --> 00:09:15.730

quando isso termina e retorna, rolando um pouco mais para baixo voc pode ver MainActivity



122

00:09:15.730 --> 00:09:17.330

onResume foi iniciado tambm.



123

00:09:17.770 --> 00:09:22.020

Ento isso  bem interessante. O fluxo atravs do nosso programa  exatamente o que queremos.



124

00:09:22.300 --> 00:09:28.180

Ento, tudo o que temos que fazer agora antes da atividade de pesquisa  terminar,  armazenar o texto da consulta em algum



125

00:09:28.180 --> 00:09:29.890

lugar que a Atividade Principal possa recuper-lo.



126

00:09:30.010 --> 00:09:31.960

Ento vamos trabalhar nisso no prximo vdeo.



