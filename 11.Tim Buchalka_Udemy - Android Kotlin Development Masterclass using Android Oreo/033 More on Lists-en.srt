1
00:00:04,730 --> 00:00:06,500
Alright so I've no going to class

2
00:00:06,500 --> 00:00:09,320
Lieut as you can see to represent the

3
00:00:09,320 --> 00:00:11,389
various items of loot that the players

4
00:00:11,389 --> 00:00:14,059
may find and the player class has got an

5
00:00:14,059 --> 00:00:16,340
inventory object that we've added

6
00:00:16,340 --> 00:00:18,500
concealed on on line seven that can be

7
00:00:18,500 --> 00:00:20,360
used to store a list of the players loot

8
00:00:20,360 --> 00:00:22,970
now notice that we haven't specified how

9
00:00:22,970 --> 00:00:24,710
many items we can put into the inventory

10
00:00:24,710 --> 00:00:27,439
the ArrayList class manages all the

11
00:00:27,439 --> 00:00:29,719
complexity for us we'll just add or

12
00:00:29,719 --> 00:00:31,489
delete loot items and the list will take

13
00:00:31,489 --> 00:00:34,070
care of everything else for us now in

14
00:00:34,070 --> 00:00:35,750
the last video we saw that the ArrayList

15
00:00:35,750 --> 00:00:38,420
class has an ADD function so we can use

16
00:00:38,420 --> 00:00:40,220
that in our main function and add loot

17
00:00:40,220 --> 00:00:42,560
to the list that way now there's a

18
00:00:42,560 --> 00:00:43,880
couple of reasons why we shouldn't do

19
00:00:43,880 --> 00:00:45,470
that but let's start by seeing that

20
00:00:45,470 --> 00:00:47,870
working so I'm going to go back to the

21
00:00:47,870 --> 00:00:51,680
main function and after the last line

22
00:00:51,680 --> 00:00:53,750
after the Tim BOTS show I'm gonna create

23
00:00:53,750 --> 00:00:55,190
a new bit of loot and give it to myself

24
00:00:55,190 --> 00:00:56,870
so let's just try that so I'm going to

25
00:00:56,870 --> 00:01:01,780
type Val red potion is equal to loot

26
00:01:01,780 --> 00:01:06,500
parentheses red potion double quotes

27
00:01:06,500 --> 00:01:12,950
comma then loot type dot potion comma

28
00:01:12,950 --> 00:01:17,479
and we'll assign a value of $7 50 and

29
00:01:17,479 --> 00:01:18,560
then the next time we're going to type

30
00:01:18,560 --> 00:01:23,920
Tim dot inventory dot add parentheses

31
00:01:23,920 --> 00:01:28,039
red potion so we created a new loot type

32
00:01:28,039 --> 00:01:30,170
the red potion and then we add the

33
00:01:30,170 --> 00:01:33,079
object to Tim's inventory list and I run

34
00:01:33,079 --> 00:01:34,100
the program to make sure that it

35
00:01:34,100 --> 00:01:41,209
actually works but of course we're not

36
00:01:41,209 --> 00:01:42,139
going to see anything different because

37
00:01:42,139 --> 00:01:44,600
we haven't got any output yet so what we

38
00:01:44,600 --> 00:01:46,729
need to test this properly is some way

39
00:01:46,729 --> 00:01:49,849
to display a plays inventory now we can

40
00:01:49,849 --> 00:01:51,950
do that by adding a show inventory

41
00:01:51,950 --> 00:01:54,049
function to the player class so that's

42
00:01:54,049 --> 00:01:55,429
how to look at doing that back to the

43
00:01:55,429 --> 00:01:57,799
player class and below the show a

44
00:01:57,799 --> 00:02:00,349
function let's have another one fun

45
00:02:00,349 --> 00:02:07,069
space show inventory parentheses left or

46
00:02:07,069 --> 00:02:08,539
right curly braces and within there

47
00:02:08,539 --> 00:02:11,829
we're going to type Linde parentheses

48
00:02:11,829 --> 00:02:15,890
double quote and dollar name single

49
00:02:15,890 --> 00:02:18,230
quote yes so we like Tim's

50
00:02:18,230 --> 00:02:22,910
inventory then on the next slide print

51
00:02:22,910 --> 00:02:27,140
'ln inventory dot get then in the

52
00:02:27,140 --> 00:02:29,720
parentheses we're going to put zero then

53
00:02:29,720 --> 00:02:31,069
on the next line we're gonna type print

54
00:02:31,069 --> 00:02:33,470
line double quiet to despoil whole

55
00:02:33,470 --> 00:02:36,080
series of equal signs just so we can

56
00:02:36,080 --> 00:02:37,370
break up the screen output a little bit

57
00:02:37,370 --> 00:02:40,370
now we saw that get function in the

58
00:02:40,370 --> 00:02:42,140
documentation in the previous video so

59
00:02:42,140 --> 00:02:45,049
it returns to the item at the index

60
00:02:45,049 --> 00:02:47,360
position we specify now remember that

61
00:02:47,360 --> 00:02:49,430
things are indexed starting from zero in

62
00:02:49,430 --> 00:02:51,380
Kotlin and in fact that's true of most

63
00:02:51,380 --> 00:02:53,090
programming languages which is why we're

64
00:02:53,090 --> 00:02:56,000
using zero here on line 22 so basically

65
00:02:56,000 --> 00:02:59,090
get then zero in parenthesis gives us

66
00:02:59,090 --> 00:03:01,940
the first item in the list but to what

67
00:03:01,940 --> 00:03:03,560
if there's more than one item in the

68
00:03:03,560 --> 00:03:06,079
list that's why we're using a list after

69
00:03:06,079 --> 00:03:07,849
all now there are two things I don't

70
00:03:07,849 --> 00:03:09,470
need to cover at the same time here

71
00:03:09,470 --> 00:03:11,630
which is impossible so I'm going to come

72
00:03:11,630 --> 00:03:12,920
back to dealing with more than one item

73
00:03:12,920 --> 00:03:15,950
after we've got this bit working first

74
00:03:15,950 --> 00:03:17,630
though let's use our show inventory

75
00:03:17,630 --> 00:03:19,519
method in main to make sure something

76
00:03:19,519 --> 00:03:21,650
has been added to the list I'm going to

77
00:03:21,650 --> 00:03:23,600
go back to main and below the Tim

78
00:03:23,600 --> 00:03:26,450
inventory deadline I'm going to type Tim

79
00:03:26,450 --> 00:03:30,739
dot show inventory we're going to call

80
00:03:30,739 --> 00:03:32,959
that function so we just Rob that little

81
00:03:32,959 --> 00:03:36,560
see what happens and again if we get in

82
00:03:36,560 --> 00:03:38,239
that situation where for whatever reason

83
00:03:38,239 --> 00:03:39,530
no output is coming out which is

84
00:03:39,530 --> 00:03:41,480
happening for me you'll need to go up

85
00:03:41,480 --> 00:03:47,569
and do a build clean build make module

86
00:03:47,569 --> 00:03:49,069
and hopefully that you won't have to do

87
00:03:49,069 --> 00:03:50,480
this but just in case it doesn't work

88
00:03:50,480 --> 00:03:51,620
for you to do that then we'll run it

89
00:03:51,620 --> 00:03:54,470
again and we can see that we've got

90
00:03:54,470 --> 00:03:55,970
something output else

91
00:03:55,970 --> 00:03:58,519
so we've got something printed out but

92
00:03:58,519 --> 00:04:00,290
it doesn't look like our red potion but

93
00:04:00,290 --> 00:04:02,450
we can tell that it's got something to

94
00:04:02,450 --> 00:04:04,400
do with the loot it's clearly that code

95
00:04:04,400 --> 00:04:08,060
that we added to the player down here

96
00:04:08,060 --> 00:04:10,099
for the show inventory is actually

97
00:04:10,099 --> 00:04:11,329
working it's just not giving us the

98
00:04:11,329 --> 00:04:13,250
results that we were expecting so we

99
00:04:13,250 --> 00:04:14,329
need to clear this up and get some

100
00:04:14,329 --> 00:04:16,099
decent output before dealing with more

101
00:04:16,099 --> 00:04:17,989
than one item so what's actually going

102
00:04:17,989 --> 00:04:19,729
on here what are we getting that loot at

103
00:04:19,729 --> 00:04:22,160
and that strange number on the end of it

104
00:04:22,160 --> 00:04:24,110
well what's happening is that Kotlin

105
00:04:24,110 --> 00:04:25,849
doesn't really know how we like our loot

106
00:04:25,849 --> 00:04:27,919
objects to be displayed you know it's

107
00:04:27,919 --> 00:04:29,450
obvious to us that we want to see the

108
00:04:29,450 --> 00:04:32,010
name at the very least we may also want

109
00:04:32,010 --> 00:04:34,410
the type and the value displayed but we

110
00:04:34,410 --> 00:04:36,690
haven't told Kotlin that so cotton was

111
00:04:36,690 --> 00:04:38,160
just using a default function then it

112
00:04:38,160 --> 00:04:40,290
knows about and that it uses whenever we

113
00:04:40,290 --> 00:04:42,660
want to print objects now unless we tell

114
00:04:42,660 --> 00:04:44,400
it otherwise the function is going to

115
00:04:44,400 --> 00:04:46,350
print the class name and that strange

116
00:04:46,350 --> 00:04:47,910
hexadecimal number that you can see

117
00:04:47,910 --> 00:04:49,590
after the at so-and-so at and in this

118
00:04:49,590 --> 00:04:51,650
case that takes it a small number there

119
00:04:51,650 --> 00:04:54,060
now that's strange numbers called a hash

120
00:04:54,060 --> 00:04:56,340
code by the way but don't worry about it

121
00:04:56,340 --> 00:04:58,110
at the moment you know it'll do the same

122
00:04:58,110 --> 00:05:00,030
actually for our player objects as well

123
00:05:00,030 --> 00:05:05,490
just to show that print illan Tim and

124
00:05:05,490 --> 00:05:12,540
parentheses run that and I'm just going

125
00:05:12,540 --> 00:05:14,990
to do what I've done before clear clean

126
00:05:14,990 --> 00:05:19,140
build so we make and you should find

127
00:05:19,140 --> 00:05:22,410
that well then work for me you can see

128
00:05:22,410 --> 00:05:24,000
there the player object output the code

129
00:05:24,000 --> 00:05:25,890
that I just printed out from Lauren 38

130
00:05:25,890 --> 00:05:27,360
is doing the same thing with a different

131
00:05:27,360 --> 00:05:30,480
number as you can see you know I said

132
00:05:30,480 --> 00:05:32,520
that column uses a default function with

133
00:05:32,520 --> 00:05:34,440
printing out objects that function is

134
00:05:34,440 --> 00:05:36,960
called to string know that to string

135
00:05:36,960 --> 00:05:39,360
method or function produces a string

136
00:05:39,360 --> 00:05:41,180
representation of an object and the

137
00:05:41,180 --> 00:05:43,500
default representation is the class name

138
00:05:43,500 --> 00:05:45,960
followed by this unique number and in

139
00:05:45,960 --> 00:05:47,850
that song now that's not a very useful

140
00:05:47,850 --> 00:05:51,150
representation but we can override the

141
00:05:51,150 --> 00:05:53,100
to string function to get it to produce

142
00:05:53,100 --> 00:05:54,990
something a lot more interesting

143
00:05:54,990 --> 00:05:56,940
so let's actually do that for our player

144
00:05:56,940 --> 00:05:59,310
class we go back to our player class

145
00:05:59,310 --> 00:06:02,010
we've already got this show function but

146
00:06:02,010 --> 00:06:03,210
I'm just going to copy the code that

147
00:06:03,210 --> 00:06:04,680
we've used in show so I'm going to take

148
00:06:04,680 --> 00:06:08,640
a copy of everything all that code in

149
00:06:08,640 --> 00:06:11,250
show and in between the show on the show

150
00:06:11,250 --> 00:06:16,220
in the tree I'm going to type override

151
00:06:16,220 --> 00:06:20,280
space fun space to string and that's

152
00:06:20,280 --> 00:06:21,540
when I've done that cottons

153
00:06:21,540 --> 00:06:23,010
automatically coming up with that some

154
00:06:23,010 --> 00:06:26,490
code for us and the press enter there it

155
00:06:26,490 --> 00:06:27,720
has actually added the rest of the

156
00:06:27,720 --> 00:06:29,880
function definition for us but we're

157
00:06:29,880 --> 00:06:32,280
going to change this a little bit to

158
00:06:32,280 --> 00:06:34,670
delete that file and paste in our code

159
00:06:34,670 --> 00:06:36,930
which again is the same code from the

160
00:06:36,930 --> 00:06:38,760
show function I'm going to change the

161
00:06:38,760 --> 00:06:41,190
first line where it's got to print 'land

162
00:06:41,190 --> 00:06:42,900
we're going to do a return there I'm

163
00:06:42,900 --> 00:06:45,560
going to type return

164
00:06:45,560 --> 00:06:49,680
get rid of the parentheses they go down

165
00:06:49,680 --> 00:06:51,120
to the end and get rid of the

166
00:06:51,120 --> 00:06:52,320
parentheses for that as well

167
00:06:52,320 --> 00:06:55,020
so we've now overwritten the two string

168
00:06:55,020 --> 00:06:57,600
function you know the two string

169
00:06:57,600 --> 00:06:59,520
function returns a string so I've just

170
00:06:59,520 --> 00:07:01,320
got it to return the same string that

171
00:07:01,320 --> 00:07:03,600
our showed method was printing then when

172
00:07:03,600 --> 00:07:05,970
we run this program again back to main

173
00:07:05,970 --> 00:07:11,580
and I'm just going to get into the habit

174
00:07:11,580 --> 00:07:12,960
now of actually running doing this

175
00:07:12,960 --> 00:07:15,120
process of cleaning and making the

176
00:07:15,120 --> 00:07:22,350
module you can see now that I've done

177
00:07:22,350 --> 00:07:24,419
that this time though we get a much

178
00:07:24,419 --> 00:07:26,220
better representation of Tim printed out

179
00:07:26,220 --> 00:07:28,470
at the end of the output so let's go

180
00:07:28,470 --> 00:07:31,020
over what we've done here so in main we

181
00:07:31,020 --> 00:07:34,110
used print lint on line 38 to print out

182
00:07:34,110 --> 00:07:36,870
Tim so Cotton's looking at Tim's class

183
00:07:36,870 --> 00:07:40,080
the player class to see if it's got a

184
00:07:40,080 --> 00:07:42,570
two string function that can be used to

185
00:07:42,570 --> 00:07:44,910
display the Tim object now when we ran

186
00:07:44,910 --> 00:07:46,650
the program last time there wasn't a

187
00:07:46,650 --> 00:07:48,479
string function in player because we

188
00:07:48,479 --> 00:07:50,580
just added that so Kotlin used to

189
00:07:50,580 --> 00:07:52,500
default to string function that every

190
00:07:52,500 --> 00:07:54,720
objects got then that wasn't pretty

191
00:07:54,720 --> 00:07:55,860
we have someone that gave us the

192
00:07:55,860 --> 00:07:57,870
hexadecimal number so what we've done

193
00:07:57,870 --> 00:08:00,210
here in player is added our own version

194
00:08:00,210 --> 00:08:02,370
of the DES string function now the

195
00:08:02,370 --> 00:08:06,270
keyword override there on line 20 that

196
00:08:06,270 --> 00:08:07,800
tells Kotlin that this function is

197
00:08:07,800 --> 00:08:10,350
replacing one of the default functions

198
00:08:10,350 --> 00:08:13,110
that classes get automatically now it's

199
00:08:13,110 --> 00:08:15,300
probably a bit of jargon classes inherit

200
00:08:15,300 --> 00:08:17,490
that's a string function from their base

201
00:08:17,490 --> 00:08:19,680
class now I don't worry too much about

202
00:08:19,680 --> 00:08:21,510
where that default to string function

203
00:08:21,510 --> 00:08:23,100
came from because we're going to be

204
00:08:23,100 --> 00:08:25,490
looking at inheritance in a future video

205
00:08:25,490 --> 00:08:27,990
now if we want to replace the default to

206
00:08:27,990 --> 00:08:29,039
string function with our own

207
00:08:29,039 --> 00:08:31,350
implementation of it we override the

208
00:08:31,350 --> 00:08:33,360
function with our own version using that

209
00:08:33,360 --> 00:08:36,209
override keyword as you can see then so

210
00:08:36,209 --> 00:08:38,190
that's another bit of object-oriented

211
00:08:38,190 --> 00:08:40,740
programming jargon when you override a

212
00:08:40,740 --> 00:08:43,589
function or method to use the object

213
00:08:43,589 --> 00:08:45,540
oriented programming term for it when

214
00:08:45,540 --> 00:08:47,970
you override a method you write your own

215
00:08:47,970 --> 00:08:49,680
version of the method that does things

216
00:08:49,680 --> 00:08:52,110
differently so our two string function

217
00:08:52,110 --> 00:08:53,459
returns a string that's a bit more

218
00:08:53,459 --> 00:08:55,560
interesting than just the class name and

219
00:08:55,560 --> 00:08:58,230
that hash code now when overriding a

220
00:08:58,230 --> 00:08:58,830
method

221
00:08:58,830 --> 00:09:00,660
the method signature must be the same as

222
00:09:00,660 --> 00:09:02,550
the method that's being overridden the

223
00:09:02,550 --> 00:09:05,160
OU method signature means the name of

224
00:09:05,160 --> 00:09:08,160
the method to string here any parameters

225
00:09:08,160 --> 00:09:10,019
that it declares inside the parentheses

226
00:09:10,019 --> 00:09:12,350
and the type of value that it returns

227
00:09:12,350 --> 00:09:15,480
now the signature for the show function

228
00:09:15,480 --> 00:09:17,010
is quite simple you can see up here on

229
00:09:17,010 --> 00:09:19,560
line 9 it's called show and there's no

230
00:09:19,560 --> 00:09:21,180
parameters defined inside of the

231
00:09:21,180 --> 00:09:24,089
parentheses so it also doesn't return a value

232
00:09:24,089 --> 00:09:26,070
straight as prints bellies out it

233
00:09:26,070 --> 00:09:27,779
doesn't return anything to the calling

234
00:09:27,779 --> 00:09:30,269
code but our two string function doesn't

235
00:09:30,269 --> 00:09:32,040
do any printing it just sends a string

236
00:09:32,040 --> 00:09:35,240
back to whatever calls it we've got the

237
00:09:35,240 --> 00:09:38,640
colon string here of the Declaration to

238
00:09:38,640 --> 00:09:40,380
indicate that the type of value returns

239
00:09:40,380 --> 00:09:42,180
then it returns is a string

240
00:09:42,180 --> 00:09:46,410
so back in main when we print Tim a line 38

241
00:09:46,410 --> 00:09:48,990
cotton is automatically calling for to

242
00:09:48,990 --> 00:09:51,899
treat the to string function in a player

243
00:09:51,899 --> 00:09:53,579
class to get the string that should be

244
00:09:53,579 --> 00:09:55,890
printed now we can be explicit about

245
00:09:55,890 --> 00:09:57,959
that if we want and specify two strings

246
00:09:57,959 --> 00:10:00,240
so we can go back to there and put Tim

247
00:10:00,240 --> 00:10:05,670
dot T string which does the same thing

248
00:10:05,670 --> 00:10:08,160
but just makes it a bit more explicit so

249
00:10:08,160 --> 00:10:09,779
that's not necessary because Kotlin

250
00:10:09,779 --> 00:10:11,579
calls it for us if we don't specify it

251
00:10:11,579 --> 00:10:20,940
and if we just run the program again you

252
00:10:20,940 --> 00:10:22,110
can see we're getting the very same

253
00:10:22,110 --> 00:10:24,600
output so the printing function needs a

254
00:10:24,600 --> 00:10:27,529
string to print and Tim isn't a string

255
00:10:27,529 --> 00:10:30,660
138 it's a player because of that

256
00:10:30,660 --> 00:10:32,730
Conklin knows it has to call to string

257
00:10:32,730 --> 00:10:34,800
so that it's got a string to print and

258
00:10:34,800 --> 00:10:36,870
that's what it's doing here ok so now

259
00:10:36,870 --> 00:10:37,980
that we've got a better two string

260
00:10:37,980 --> 00:10:40,260
function for our player objects we don't

261
00:10:40,260 --> 00:10:42,660
need show to do the same thing so I'm

262
00:10:42,660 --> 00:10:44,070
going to change to just print out

263
00:10:44,070 --> 00:10:47,100
whether the player is alive or not let's

264
00:10:47,100 --> 00:10:49,130
go ahead and do that so back to player

265
00:10:49,130 --> 00:10:51,779
shouldn't delete that code then within

266
00:10:51,779 --> 00:10:59,880
there we're going to put if parentheses lives

267
00:10:59,880 --> 00:11:03,810
it's greater than zero that's where my

268
00:11:03,810 --> 00:11:05,250
curly braces we're going to be print

269
00:11:05,250 --> 00:11:09,950
'land parentheses double quotes dollar

270
00:11:09,950 --> 00:11:16,140
name is alive we're going to close down

271
00:11:16,140 --> 00:11:18,450
the code block and then else another

272
00:11:18,450 --> 00:11:21,770
code block there it's gonna be pretty in

273
00:11:21,770 --> 00:11:27,540
double quotes dollar name is dead so

274
00:11:27,540 --> 00:11:29,730
there's our revised to show method so

275
00:11:29,730 --> 00:11:33,360
let's just clean make the module and

276
00:11:33,360 --> 00:11:34,410
we're going back and try running the

277
00:11:34,410 --> 00:11:41,940
code you can see the output now is a lot

278
00:11:41,940 --> 00:11:43,620
tidy than what it was before so all our

279
00:11:43,620 --> 00:11:45,750
players as you can see are alive and we

280
00:11:45,750 --> 00:11:46,890
can get the information on the players

281
00:11:46,890 --> 00:11:49,710
by just printing them out alright so now

282
00:11:49,710 --> 00:11:51,150
you can produce more interesting output

283
00:11:51,150 --> 00:11:53,550
for our loot objects by overriding the

284
00:11:53,550 --> 00:11:55,290
just string function in the loot class

285
00:11:55,290 --> 00:11:57,900
and that sounds like a good challenge, so

286
00:11:57,900 --> 00:12:01,220
we'll do that in the next video.

