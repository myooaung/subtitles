WEBVTT
1

00:00:04.780 --> 00:00:06.790

Okay, so now that our lutes been



2

00:00:06.790 --> 00:00:09.250

displayed correctly it's time to look at



3

00:00:09.250 --> 00:00:10.840

how we can deal with more than one piece



4

00:00:10.840 --> 00:00:13.059

of loot now I'm gonna give Tim some more



5

00:00:13.059 --> 00:00:14.860

loot in the main function so let's kind



6

00:00:14.860 --> 00:00:16.810

of have a look at that so what we're



7

00:00:16.810 --> 00:00:19.570

going to do is add some chest armor as



8

00:00:19.570 --> 00:00:22.180

well so we come down here after the add



9

00:00:22.180 --> 00:00:24.880

Tim to invent shoot an ad they're going



10

00:00:24.880 --> 00:00:26.529

to insert two more lines I'm gonna do a



11

00:00:26.529 --> 00:00:34.150

Val chest armor equals loot double



12

00:00:34.150 --> 00:00:40.000

quotes + 3 chest double just going to be



13

00:00:40.000 --> 00:00:45.550

looped tight dot over and say the belly



14

00:00:45.550 --> 00:00:49.110

is 80 then we're going to do tip dot



15

00:00:49.110 --> 00:00:54.850

inventory dot add chest armor now us



16

00:00:54.850 --> 00:00:56.140

were dealing with carat see here the



17

00:00:56.140 --> 00:00:58.120

military value of the loot we can also



18

00:00:58.120 --> 00:01:02.140

top 80 point zero zero or so which is



19

00:01:02.140 --> 00:01:04.239

how which is more like our monetary



20

00:01:04.239 --> 00:01:06.729

values are usually written and that also



21

00:01:06.729 --> 00:01:09.070

helps anyone reading the code to quickly



22

00:01:09.070 --> 00:01:10.750

spot that we're dealing with money here



23

00:01:10.750 --> 00:01:13.150

Kotlin doesn't care in any case a single



24

00:01:13.150 --> 00:01:14.860

zero after the decimal point is all that



25

00:01:14.860 --> 00:01:24.830

Kotlin deeds all right so that's another program



26

00:01:24.830 --> 00:01:26.820

now at this point we're still only



27

00:01:26.820 --> 00:01:29.370

getting the one inventory item printed



28

00:01:29.370 --> 00:01:32.340

so we need to modify our show inventory



29

00:01:32.340 --> 00:01:34.800

function so that it prints all the items



30

00:01:34.800 --> 00:01:37.050

in the list so to do that we'll go to



31

00:01:37.050 --> 00:01:41.340

our player class so every function and



32

00:01:41.340 --> 00:01:43.440

what we need to do or what we need is



33

00:01:43.440 --> 00:01:46.110

something called a for loop there are



34

00:01:46.110 --> 00:01:48.060

for loop is a way to repeat a section of



35

00:01:48.060 --> 00:01:51.810

code for a range of items or values so



36

00:01:51.810 --> 00:01:53.729

in this case we want to loop over all



37

00:01:53.729 --> 00:01:56.100

the items in our list so to do that



38

00:01:56.100 --> 00:01:57.840

we'll come and add some code so we're



39

00:01:57.840 --> 00:01:59.369

going to put the code under the first



40

00:01:59.369 --> 00:02:03.119

print of heading under the where it's



41

00:02:03.119 --> 00:02:05.430

got the name of the person and then that



42

00:02:05.430 --> 00:02:08.789

inventory below that for parentheses



43

00:02:08.789 --> 00:02:14.459

item in inventory close parentheses then



44

00:02:14.459 --> 00:02:19.100

we're just going to do a print 'land



45

00:02:19.100 --> 00:02:22.980

item and what we can now do is get rid



46

00:02:22.980 --> 00:02:24.750

of that inventory don't get 0 we're not



47

00:02:24.750 --> 00:02:26.370

gonna be using that anymore and we'll



48

00:02:26.370 --> 00:02:28.680

leave the equal signs there so this code



49

00:02:28.680 --> 00:02:31.140

now iterates over each of the items in



50

00:02:31.140 --> 00:02:33.780

the array list then executes a block of



51

00:02:33.780 --> 00:02:36.510

code for each one now in languages such



52

00:02:36.510 --> 00:02:39.150

as Java or C this form of the for loop



53

00:02:39.150 --> 00:02:42.329

is called a for each loop our item



54

00:02:42.329 --> 00:02:43.920

starts off being assigned you can say



55

00:02:43.920 --> 00:02:46.890

item in here along 29 that starts off



56

00:02:46.890 --> 00:02:48.780

being assigned to the first item in the



57

00:02:48.780 --> 00:02:50.850

list and all we do in the block is



58

00:02:50.850 --> 00:02:52.260

printed so we're printing it out here as



59

00:02:52.260 --> 00:02:55.280

you can see in the code block on line 30



60

00:02:55.280 --> 00:02:58.170

now because we have overridden the to



61

00:02:58.170 --> 00:03:00.450

string function will actually get a neat



62

00:03:00.450 --> 00:03:02.670

line of output that shows the items name



63

00:03:02.670 --> 00:03:04.650

and value as well as the type of loading



64

00:03:04.650 --> 00:03:07.049

these will run that shortly to see now



65

00:03:07.049 --> 00:03:08.820

what's the first item has been processed



66

00:03:08.820 --> 00:03:11.310

or item is dinner side the next item in



67

00:03:11.310 --> 00:03:13.500

the list then that's printed and then we



68

00:03:13.500 --> 00:03:14.760

go back to rounding at the third item



69

00:03:14.760 --> 00:03:17.280

and so on now we've only got two items



70

00:03:17.280 --> 00:03:19.110

so our link should terminate after



71

00:03:19.110 --> 00:03:21.540

processing Yarmuth so let's just run the



72

00:03:21.540 --> 00:03:23.010

program to make sure we do get both



73

00:03:23.010 --> 00:03:33.800

items printed out



74

00:03:33.800 --> 00:03:36.740

you can see we've got Tibbs infantry red



75

00:03:36.740 --> 00:03:39.230

potion plus three chests I would say



76

00:03:39.230 --> 00:03:40.790

it's clearly now working and doing the



77

00:03:40.790 --> 00:03:43.310

right thing which is good now if there



78

00:03:43.310 --> 00:03:44.780

were more bits ability to the inventory



79

00:03:44.780 --> 00:03:47.210

that be printed out as well so what I'm



80

00:03:47.210 --> 00:03:48.890

going to do is give Tim some more loot



81

00:03:48.890 --> 00:03:50.570

this time we're not going to create



82

00:03:50.570 --> 00:03:52.610

variables to store them in we're just



83

00:03:52.610 --> 00:03:53.870

going to add them directly to the



84

00:03:53.870 --> 00:03:56.090

inventory for Tim so to do that we're



85

00:03:56.090 --> 00:03:58.400

gonna get in the line after the last ad



86

00:03:58.400 --> 00:04:00.080

actually what we'll do is we'll do it



87

00:04:00.080 --> 00:04:02.000

after the show inventory look down here



88

00:04:02.000 --> 00:04:06.080

we'll put Tim dot inventory dot add



89

00:04:06.080 --> 00:04:09.410

parentheses let's go for a ring of



90

00:04:09.410 --> 00:04:13.940

protection plus two we're going to call



91

00:04:13.940 --> 00:04:16.540

this one it's going to be a loot type



92

00:04:16.540 --> 00:04:20.480

dot really surprises there the value



93

00:04:20.480 --> 00:04:23.660

will go forty point two five and I



94

00:04:23.660 --> 00:04:24.950

forgot something they don't need to add



95

00:04:24.950 --> 00:04:27.620

something in here loot the type that



96

00:04:27.620 --> 00:04:29.150

were actually adding because of type



97

00:04:29.150 --> 00:04:31.630

loot and that will fix that error up now



98

00:04:31.630 --> 00:04:34.460

and that's also confirmation that the



99

00:04:34.460 --> 00:04:36.670

fact that when we defined our ArrayList



100

00:04:36.670 --> 00:04:39.110

we mentioned that it was of type loot



101

00:04:39.110 --> 00:04:40.970

and you can see that I was getting an



102

00:04:40.970 --> 00:04:43.250

error until I actually made sure that I



103

00:04:43.250 --> 00:04:45.140

was creating a loot object so that's a



104

00:04:45.140 --> 00:04:46.460

confirmation that it's working for us



105

00:04:46.460 --> 00:04:48.230

alright let's add one more thing we'll



106

00:04:48.230 --> 00:04:50.810

have a potion so Tim dot inventory dot



107

00:04:50.810 --> 00:04:56.570

add loot invisibility potion is



108

00:04:56.570 --> 00:05:00.380

invisibility potion loot type darts



109

00:05:00.380 --> 00:05:04.010

potion and 3595 we'll go with the



110

00:05:04.010 --> 00:05:07.750

military value then we'll do another Tim



111

00:05:07.750 --> 00:05:18.690

taught show inventory so let's run that you



112

00:05:18.690 --> 00:05:20.590

if you scroll up and have a look we can



113

00:05:20.590 --> 00:05:22.810

see that we've got the first table



114

00:05:22.810 --> 00:05:24.370

called show of a tree we had the two



115

00:05:24.370 --> 00:05:26.500

items the second time we've called the



116

00:05:26.500 --> 00:05:28.300

show me the tree we've got a total of



117

00:05:28.300 --> 00:05:30.099

five items showing on the screen off for



118

00:05:30.099 --> 00:05:31.870

our time showing on the screen now with



119

00:05:31.870 --> 00:05:33.370

the ring of protection plus two and the



120

00:05:33.370 --> 00:05:35.560

invisibility potion added the second



121

00:05:35.560 --> 00:05:38.889

time so for loops are very useful when



122

00:05:38.889 --> 00:05:41.259

you want to process a list of items but



123

00:05:41.259 --> 00:05:43.120

they're also useful for repeating a



124

00:05:43.120 --> 00:05:45.180

section of code a set number of times



125

00:05:45.180 --> 00:05:47.770

now for the rest of this video we're



126

00:05:47.770 --> 00:05:49.720

going to leave our classes and have a



127

00:05:49.720 --> 00:05:52.120

look at some more for loops we're going



128

00:05:52.120 --> 00:05:53.530

to be coming back to these classes soon



129

00:05:53.530 --> 00:05:55.240

so instead of deleting all this code in



130

00:05:55.240 --> 00:05:56.080

our main function



131

00:05:56.080 --> 00:05:58.630

I'm going to comet it all out now a



132

00:05:58.630 --> 00:06:00.190

commenting Kotlin starts with two



133

00:06:00.190 --> 00:06:02.380

slashes and any committed lines are



134

00:06:02.380 --> 00:06:05.080

ignored by the compiler now fortunately



135

00:06:05.080 --> 00:06:06.789

we don't have to type two slashes at the



136

00:06:06.789 --> 00:06:08.860

start of every line because the Angelus



137

00:06:08.860 --> 00:06:11.470

GTO provides an easier way so you want



138

00:06:11.470 --> 00:06:13.479

to select all the code that we want to



139

00:06:13.479 --> 00:06:15.370

come it out and it's going to be all the



140

00:06:15.370 --> 00:06:19.360

code from the last print line but not



141

00:06:19.360 --> 00:06:21.669

including the coding closing code block



142

00:06:21.669 --> 00:06:23.409

we want to leave that in there the right



143

00:06:23.409 --> 00:06:27.159

parenthesis the right curly brace go



144

00:06:27.159 --> 00:06:29.380

right up to the start just after the



145

00:06:29.380 --> 00:06:32.169

definition of far the function they can



146

00:06:32.169 --> 00:06:33.639

once you've done that you can go to the



147

00:06:33.639 --> 00:06:36.729

code menu and you can select comment



148

00:06:36.729 --> 00:06:40.630

with line comment you can see out of



149

00:06:40.630 --> 00:06:42.759

these slashes the two slashes for every



150

00:06:42.759 --> 00:06:44.800

line to save us having to have typed



151

00:06:44.800 --> 00:06:46.900

each one individually and again make



152

00:06:46.900 --> 00:06:48.669

sure that you haven't included the curly



153

00:06:48.669 --> 00:06:49.840

braces we need them to remain



154

00:06:49.840 --> 00:06:51.969

uncommented curly braces here on line



155

00:06:51.969 --> 00:06:55.479

one in this case also in line 46 alright



156

00:06:55.479 --> 00:06:57.219

so let's try another loop there I'll go



157

00:06:57.219 --> 00:07:03.009

to type for parentheses I in one and two



158

00:07:03.009 --> 00:07:08.680

periods 10 closing parentheses and add



159

00:07:08.680 --> 00:07:10.150

left or right curly braces and it'll



160

00:07:10.150 --> 00:07:22.489

print 'ln I let's run that



161

00:07:22.489 --> 00:07:25.199

okay we get the numbers one to ten



162

00:07:25.199 --> 00:07:27.119

printed out now that's not very exciting



163

00:07:27.119 --> 00:07:29.699

perhaps but we can't put any code we



164

00:07:29.699 --> 00:07:32.039

want inside the for-loop



165

00:07:32.039 --> 00:07:34.110

so to demonstrate that let's go back up



166

00:07:34.110 --> 00:07:36.209

and make a change so at the moment have



167

00:07:36.209 --> 00:07:37.919

got printing over let's change that to



168

00:07:37.919 --> 00:07:41.149

print hland then put two double quotes



169

00:07:41.149 --> 00:07:47.610

dollar I squared is the parentheses left



170

00:07:47.610 --> 00:07:53.669

to right curly braces I times I closing



171

00:07:53.669 --> 00:07:55.629

parenthesis



172

00:07:55.629 --> 00:08:01.620

let's try running back



173

00:08:01.620 --> 00:08:05.770

you and it's



174

00:08:05.770 --> 00:08:07.599

got the valleys of 1 to 10 squared



175

00:08:07.599 --> 00:08:09.879

showing on the screen now often if



176

00:08:09.879 --> 00:08:11.020

you've got 10 objects



177

00:08:11.020 --> 00:08:13.300

they'll be indexed starting at 0 then



178

00:08:13.300 --> 00:08:15.280

that's easy to do we can just change the



179

00:08:15.280 --> 00:08:21.879

1 to 0 so we go ahead and do that let's



180

00:08:21.879 --> 00:08:32.110

run that alright so can you spot the



181

00:08:32.110 --> 00:08:34.240

problem with doing that though the



182

00:08:34.240 --> 00:08:35.919

problem is that the loops gone around in



183

00:08:35.919 --> 00:08:38.529

11 times not 10 now this is a very



184

00:08:38.529 --> 00:08:40.899

common cause of errors in programs if we



185

00:08:40.899 --> 00:08:43.240

start at 0 and we want to go around 10



186

00:08:43.240 --> 00:08:46.450

times then we need to stop at 9 now a



187

00:08:46.450 --> 00:08:47.920

Kotlin helps heat by letting us use



188

00:08:47.920 --> 00:08:50.560

until instead of the two dots in the



189

00:08:50.560 --> 00:08:52.660

range so we can go ahead and change that



190

00:08:52.660 --> 00:08:55.029

to the 2 instead of the two dots we can



191

00:08:55.029 --> 00:08:57.640

put 0 get rid of the two dots and type



192

00:08:57.640 --> 00:09:10.410

in until 10 if you run that



193

00:09:10.410 --> 00:09:12.540

we correctly get the results from zero



194

00:09:12.540 --> 00:09:15.510

through nine now when we use until to



195

00:09:15.510 --> 00:09:18.060

specify the range the ending value isn't



196

00:09:18.060 --> 00:09:20.310

included in the range so that lets us



197

00:09:20.310 --> 00:09:21.960

work with valleys that are more natural



198

00:09:21.960 --> 00:09:24.090

if there are ten items to process it's



199

00:09:24.090 --> 00:09:26.670

natural to want to put ten in the range



200

00:09:26.670 --> 00:09:28.890

rather than nine so be aware of the



201

00:09:28.890 --> 00:09:30.960

differences though using two dots like



202

00:09:30.960 --> 00:09:32.700

we had earlier means that the final



203

00:09:32.700 --> 00:09:35.310

value will be included but using until



204

00:09:35.310 --> 00:09:37.470

where's your song we do here means it won't



205

00:09:37.470 --> 00:09:39.600

now if we wanted to iterate over the



206

00:09:39.600 --> 00:09:42.240

range of numbers in reverse order we can



207

00:09:42.240 --> 00:09:45.350

use down to so we can change it to for I



208

00:09:45.350 --> 00:09:50.070

in ten instead of on till will delete



209

00:09:50.070 --> 00:10:04.050

that down to zero like so let's run that



210

00:10:04.050 --> 00:10:05.970

and see what the value study from 10



211

00:10:05.970 --> 00:10:09.179

Devon and to and including zero now



212

00:10:09.179 --> 00:10:10.920

there wasn't a non-inclusive version of



213

00:10:10.920 --> 00:10:12.869

down 2 so the final value as you can see



214

00:10:12.869 --> 00:10:15.480

here zero in this case will be included



215

00:10:15.480 --> 00:10:18.239

so keep that in mind now there's one



216

00:10:18.239 --> 00:10:19.739

last thing we can add to our for loop



217

00:10:19.739 --> 00:10:22.319

and that's a step so let's have a look



218

00:10:22.319 --> 00:10:23.999

at that so we go back and change this to



219

00:10:23.999 --> 00:10:28.079

four I intend down to zero on the end of



220

00:10:28.079 --> 00:10:31.860

it we're gonna add step two let's run



221

00:10:31.860 --> 00:10:39.809

that and you can see we've got a



222

00:10:39.809 --> 00:10:41.610

different output now the other loop



223

00:10:41.610 --> 00:10:44.309

count standard steps of 2 now the step



224

00:10:44.309 --> 00:10:46.110

has to be positive so you can't use a



225

00:10:46.110 --> 00:10:47.699

negative step to count backwards



226

00:10:47.699 --> 00:10:50.999

that's what damn 2 is 4 so that's 4



227

00:10:50.999 --> 00:10:53.100

loops we've given you thinking a lot in



228

00:10:53.100 --> 00:10:54.540

the course and you'll get plenty of



229

00:10:54.540 --> 00:10:56.399

practice using them but a bit more



230

00:10:56.399 --> 00:10:57.989

practice won't hurt those so I'm going



231

00:10:57.989 --> 00:11:00.709

to finish this video with a challenge



232

00:11:00.709 --> 00:11:02.879

all right so the challenge is to create



233

00:11:02.879 --> 00:11:05.279

a for loop that prints out the numbers



234

00:11:05.279 --> 00:11:08.220

from 0 to 100 that are divisible by both



235

00:11:08.220 --> 00:11:12.119

3 & 5 know us a hint here you'll need to



236

00:11:12.119 --> 00:11:15.149

include it if inside your loop now I



237

00:11:15.149 --> 00:11:16.559

don't think I've mentioned the modulus



238

00:11:16.559 --> 00:11:18.959

operator the percent it returns the



239

00:11:18.959 --> 00:11:21.660

remainder after dividing one number into



240

00:11:21.660 --> 00:11:24.480

another and if the remainder is 0 then



241

00:11:24.480 --> 00:11:26.309

the second number divides evenly into



242

00:11:26.309 --> 00:11:29.129

the first so some examples to try you



243

00:11:29.129 --> 00:11:31.079

can see on the screen they're printed in



244

00:11:31.079 --> 00:11:34.499

7 modulus 3 so 3 goes into 7 twice with



245

00:11:34.499 --> 00:11:35.549

a remainder of 1



246

00:11:35.549 --> 00:11:38.970

Fruitland 8 modulus 4 4 goes into 8



247

00:11:38.970 --> 00:11:40.860

exactly twice with no remainder and the



248

00:11:40.860 --> 00:11:43.529

third one print hland no in modulus 5 5



249

00:11:43.529 --> 00:11:45.720

goes into 9 once with a remainder of 4



250

00:11:45.720 --> 00:11:47.730

you can see the code on the next slide



251

00:11:47.730 --> 00:11:52.439

if 16 modulus 4 equals 4 equals 0 4



252

00:11:52.439 --> 00:11:54.839

divides exactly into 16 there another



253

00:11:54.839 --> 00:11:56.850

hint here for you to solve this



254

00:11:56.850 --> 00:11:58.169

challenge is that your code will be more



255

00:11:58.169 --> 00:12:00.809

efficient if you use a step so that's



256

00:12:00.809 --> 00:12:02.759

the challenge pause the video and I'll



257

00:12:02.759 --> 00:12:06.809

see you when you get back okay so as



258

00:12:06.809 --> 00:12:08.399

usual there's said there are several



259

00:12:08.399 --> 00:12:10.980

ways to write this code it's very rare



260

00:12:10.980 --> 00:12:12.089

that there's only one way to do



261

00:12:12.089 --> 00:12:13.439

something as I mentioned before when



262

00:12:13.439 --> 00:12:16.259

programming now a simple solution would



263

00:12:16.259 --> 00:12:17.700

be to test each day



264

00:12:17.700 --> 00:12:20.339

to see if it's divisible by 3 then test



265

00:12:20.339 --> 00:12:22.800

it again to see if five also divides



266

00:12:22.800 --> 00:12:24.540

into it then we can make that more



267

00:12:24.540 --> 00:12:26.520

efficient by studying it three and



268

00:12:26.520 --> 00:12:29.279

looping in steps of three so let's have



269

00:12:29.279 --> 00:12:30.600

a go at doing that they're going to



270

00:12:30.600 --> 00:12:32.250

leave that first four line in there that



271

00:12:32.250 --> 00:12:34.830

first four block because type 4



272

00:12:34.830 --> 00:12:42.170

parentheses value in 3 dot dot or period



273

00:12:42.170 --> 00:12:46.800

100 step 3 then open a code block then



274

00:12:46.800 --> 00:12:49.130

put an if test in there so if



275

00:12:49.130 --> 00:12:54.570

parentheses value what jealous 5 is



276

00:12:54.570 --> 00:12:58.350

equal to zero there's a code block we're



277

00:12:58.350 --> 00:13:03.180

gonna print land value so my solution is



278

00:13:03.180 --> 00:13:06.630

leaping from 3 to 100 in steps of 3 now



279

00:13:06.630 --> 00:13:08.279

you can also loop in the steps of 5



280

00:13:08.279 --> 00:13:10.290

instead which leap would be more



281

00:13:10.290 --> 00:13:12.839

efficient looping in steps of 3 or in



282

00:13:12.839 --> 00:13:15.510

steps of 5 well inside the loop the code



283

00:13:15.510 --> 00:13:18.779

checks value modulus 5 then if the



284

00:13:18.779 --> 00:13:21.720

remainder the modulus is 0 then 5



285

00:13:21.720 --> 00:13:24.360

divides exactly into the number so we're



286

00:13:24.360 --> 00:13:26.520

printing it out now if your solution



287

00:13:26.520 --> 00:13:28.410

produces the same values as mine let's



288

00:13:28.410 --> 00:13:37.140

just run this to confirm then you can



289

00:13:37.140 --> 00:13:38.610

see the example you should be getting at



290

00:13:38.610 --> 00:13:42.450

15 30 45 60 75 and 90 if your solution



291

00:13:42.450 --> 00:13:44.730

produces the same results and well done



292

00:13:44.730 --> 00:13:46.770

you've completed the challenge now



293

00:13:46.770 --> 00:13:49.020

living in steps of 5 would have been



294

00:13:49.020 --> 00:13:51.270

more efficient then only have been 20



295

00:13:51.270 --> 00:13:53.520

village to test inside the loop instead



296

00:13:53.520 --> 00:13:56.070

of the 33 that while loop tests so that



297

00:13:56.070 --> 00:13:59.040

would be an improvement over 50% alright



298

00:13:59.040 --> 00:14:00.600

so in the next video we're going to go



299

00:14:00.600 --> 00:14:02.130

back to our classes and look at some



300

00:14:02.130 --> 00:14:04.470

more functions we can add to the player



301

00:14:04.470 --> 00:14:08.420

class, so I'll see you in the next video.



