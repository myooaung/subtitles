WEBVTT
1

00:00:04.690 --> 00:00:09.190

all right so at the end of the last



2

00:00:06.520 --> 00:00:11.980

video we added these private valve tag



3

00:00:09.190 --> 00:00:15.129

statements to our main activity class



4

00:00:11.980 --> 00:00:17.530

and also our download data class and I



5

00:00:15.129 --> 00:00:19.990

want to talk now about the warning that



6

00:00:17.530 --> 00:00:22.150

Android studio is giving us and we can



7

00:00:19.990 --> 00:00:24.610

see the warnings by just hovering our



8

00:00:22.150 --> 00:00:26.440

mouse over the download data class and



9

00:00:24.610 --> 00:00:28.420

you can see that there's two warnings



10

00:00:26.440 --> 00:00:30.520

that have popped up and we're going to



11

00:00:28.420 --> 00:00:31.930

ignore the first one we know it's not



12

00:00:30.520 --> 00:00:34.360

being used because we haven't written



13

00:00:31.930 --> 00:00:35.530

the code to use it yet but the second



14

00:00:34.360 --> 00:00:37.989

warning is the one that's of interest



15

00:00:35.530 --> 00:00:40.749

here and that says that this async task



16

00:00:37.989 --> 00:00:43.390

class should be static or leaks might



17

00:00:40.749 --> 00:00:45.519

occur and generally it's not a good idea



18

00:00:43.390 --> 00:00:48.579

to have any classes inside an activity



19

00:00:45.519 --> 00:00:50.469

and that's especially true when an inner



20

00:00:48.579 --> 00:00:52.989

class is something like an async task



21

00:00:50.469 --> 00:00:56.109

that may be around and processing for a



22

00:00:52.989 --> 00:00:58.359

long time a static nested class is fine



23

00:00:56.109 --> 00:01:00.370

though now the difference is that an



24

00:00:58.359 --> 00:01:02.799

inner class which is what we have here



25

00:01:00.370 --> 00:01:04.960

holds a reference to the activity a



26

00:01:02.799 --> 00:01:07.720

static nested class on the other hand



27

00:01:04.960 --> 00:01:09.850

doesn't in fact it exists independently



28

00:01:07.720 --> 00:01:11.170

of the class that it's nested in then



29

00:01:09.850 --> 00:01:13.030

this thing is just a packaging



30

00:01:11.170 --> 00:01:13.810

convenience to keep all the code in the



31

00:01:13.030 --> 00:01:15.550

same place



32

00:01:13.810 --> 00:01:17.410

now we're going to come back to that in



33

00:01:15.550 --> 00:01:19.780

more detail because there's another app



34

00:01:17.410 --> 00:01:21.850

where it's natural to use a nested class



35

00:01:19.780 --> 00:01:24.040

and the explanation will then make more



36

00:01:21.850 --> 00:01:25.930

sense so if you don't understand all



37

00:01:24.040 --> 00:01:27.430

this at the moment don't worry we're



38

00:01:25.930 --> 00:01:31.060

just going to accept Android studio



39

00:01:27.430 --> 00:01:32.350

suggestion to make this class static so



40

00:01:31.060 --> 00:01:33.820

the lightbulb that will appear will



41

00:01:32.350 --> 00:01:36.370

actually click on this download data



42

00:01:33.820 --> 00:01:39.490

over here to the left click on that now



43

00:01:36.370 --> 00:01:42.460

it offers here the options down the



44

00:01:39.490 --> 00:01:43.180

bottom to move to companion object which



45

00:01:42.460 --> 00:01:45.610

is kotler's



46

00:01:43.180 --> 00:01:48.610

equivalent of static I'm going to click



47

00:01:45.610 --> 00:01:50.470

that option and at that point in time



48

00:01:48.610 --> 00:01:52.600

you can see the codes been modified for



49

00:01:50.470 --> 00:01:53.920

us and we've no longer got a warning or



50

00:01:52.600 --> 00:01:56.980

at least not that particular morning



51

00:01:53.920 --> 00:01:59.320

anyway now using an inner class doesn't



52

00:01:56.980 --> 00:02:01.270

give a warning in Java and which is one



53

00:01:59.320 --> 00:02:04.480

of the reasons why cotton code can often



54

00:02:01.270 --> 00:02:06.430

be more robust all right so we can add



55

00:02:04.480 --> 00:02:08.170

some logging now to these two functions



56

00:02:06.430 --> 00:02:11.019

and see how the async task



57

00:02:08.170 --> 00:02:13.000

behaves let's go ahead and do that so we



58

00:02:11.019 --> 00:02:14.950

added some logging in our uncreate



59

00:02:13.000 --> 00:02:17.620

method let's do it now for the two



60

00:02:14.950 --> 00:02:18.550

functions in download data so firstly



61

00:02:17.620 --> 00:02:20.200

for on post



62

00:02:18.550 --> 00:02:22.810

let's do that one first we're gonna add



63

00:02:20.200 --> 00:02:26.200

the tagging needle logging for that



64

00:02:22.810 --> 00:02:27.600

after these super dot on post execute so



65

00:02:26.200 --> 00:02:31.450

we're going to type the log dot d



66

00:02:27.600 --> 00:02:33.400

parentheses tag then in double quotes



67

00:02:31.450 --> 00:02:40.120

after a comma I'm just going to top on



68

00:02:33.400 --> 00:02:44.770

post execute colon report parameter is



69

00:02:40.120 --> 00:02:45.910

dollar dollar sign result so that's that



70

00:02:44.770 --> 00:02:47.860

one and then also from the doing



71

00:02:45.910 --> 00:02:51.370

background what I'm going to do is



72

00:02:47.860 --> 00:02:55.320

delete the to do line and instead by we



73

00:02:51.370 --> 00:02:58.360

were to do is add to that log D



74

00:02:55.320 --> 00:03:00.730

parentheses again tag comma space and



75

00:02:58.360 --> 00:03:05.250

then we had double quotes do in



76

00:03:00.730 --> 00:03:08.620

background a little put starts with



77

00:03:05.250 --> 00:03:10.360

they're going to top dollar left and



78

00:03:08.620 --> 00:03:15.160

right curly braces and within the curly



79

00:03:10.360 --> 00:03:16.480

braces p0 square bracket and zero so



80

00:03:15.160 --> 00:03:19.120

basically zero in between square



81

00:03:16.480 --> 00:03:21.280

brackets then we've got our right curly



82

00:03:19.120 --> 00:03:22.090

brace as well then we'll also return



83

00:03:21.280 --> 00:03:28.170

something here



84

00:03:22.090 --> 00:03:32.380

we're going to return doing background



85

00:03:28.170 --> 00:03:34.060

completed all right so currently out



86

00:03:32.380 --> 00:03:36.070

doing background function doesn't do a



87

00:03:34.060 --> 00:03:38.680

lot it just returns a message saying



88

00:03:36.070 --> 00:03:40.959

doing background has completed and have



89

00:03:38.680 --> 00:03:42.610

also printed out the first parameter so



90

00:03:40.959 --> 00:03:44.680

you can see what happens when the doing



91

00:03:42.610 --> 00:03:47.110

background functions called and



92

00:03:44.680 --> 00:03:52.390

obviously yeah that's this code here on



93

00:03:47.110 --> 00:03:54.459

line 29 so overall our async task isn't



94

00:03:52.390 --> 00:03:56.560

doing very much at the moment but by



95

00:03:54.459 --> 00:03:58.120

looking at the logcat we should be able



96

00:03:56.560 --> 00:04:00.970

to get a good idea of when things are



97

00:03:58.120 --> 00:04:02.709

being called now to run the task we just



98

00:04:00.970 --> 00:04:05.620

need to create an instance of the



99

00:04:02.709 --> 00:04:08.170

download data class and then call its



100

00:04:05.620 --> 00:04:12.070

execute function we're going to do that



101

00:04:08.170 --> 00:04:13.989

in oncreate so after the tag for the



102

00:04:12.070 --> 00:04:15.610

logging rather for the uncreate core



103

00:04:13.989 --> 00:04:18.340

message we're going to put it in there



104

00:04:15.610 --> 00:04:23.560

so i'm going to type in val download



105

00:04:18.340 --> 00:04:26.770

data is equal to in download data with a



106

00:04:23.560 --> 00:04:30.040

capital D for downloading the capital D



107

00:04:26.770 --> 00:04:33.370

for data and then parentheses



108

00:04:30.040 --> 00:04:40.480

then I'm going to type download data dot



109

00:04:33.370 --> 00:04:40.480

execute and in parentheses URL goes here



110

00:04:40.570 --> 00:04:49.270

then can do another lock so log dot d



111

00:04:43.600 --> 00:04:55.880

tag comma space double quotes on create



112

00:04:49.270 --> 00:04:58.190

done okay so at this point now we should



113

00:04:55.880 --> 00:05:00.140

be able to run the app and check log cat



114

00:04:58.190 --> 00:05:05.270

to see what's happened so let's go ahead



115

00:05:00.140 --> 00:05:07.010

and do that and we're just to look at



116

00:05:05.270 --> 00:05:08.480

the emulator briefly so though it's not



117

00:05:07.010 --> 00:05:11.330

going to have anything other than the



118

00:05:08.480 --> 00:05:13.430

hello world which it show



119

00:05:11.330 --> 00:05:15.860

all right there's the hello world with a



120

00:05:13.430 --> 00:05:17.319

text view widget and the other title so



121

00:05:15.860 --> 00:05:21.159

we want to look at our lock cat though



122

00:05:17.319 --> 00:05:21.159

let's do that we'll open it up



123

00:05:23.449 --> 00:05:25.819

and we can actually see the call here



124

00:05:24.620 --> 00:05:29.059

when I've scored back at the top on



125

00:05:25.819 --> 00:05:31.129

create called on create dumb doing



126

00:05:29.059 --> 00:05:33.020

background starts with URL goes here



127

00:05:31.129 --> 00:05:35.379

that the URL goes here was the argument



128

00:05:33.020 --> 00:05:38.300

that we passed if you recall on line 17



129

00:05:35.379 --> 00:05:40.870

and then we've got down here on post



130

00:05:38.300 --> 00:05:43.129

parameter is doing background completed



131

00:05:40.870 --> 00:05:45.889

I've also got some other stuff here as



132

00:05:43.129 --> 00:05:47.150

well and that can look a bit horrible



133

00:05:45.889 --> 00:05:49.430

with the logcat with all sorts of other



134

00:05:47.150 --> 00:05:51.620

log entries getting in the way but we



135

00:05:49.430 --> 00:05:53.499

can make it more readable by filtering



136

00:05:51.620 --> 00:05:56.509

on the two tags that we're interested in



137

00:05:53.499 --> 00:05:58.669

so to do that in the locate window you



138

00:05:56.509 --> 00:06:01.759

want to make sure firstly that regex is



139

00:05:58.669 --> 00:06:03.229

actually checked which it is here then



140

00:06:01.759 --> 00:06:05.930

we just need to enter in the filter box



141

00:06:03.229 --> 00:06:11.949

over here to the left if we enter



142

00:06:05.930 --> 00:06:18.349

mainactivity and then the pipe character



143

00:06:11.949 --> 00:06:21.229

and download data that gives us a better



144

00:06:18.349 --> 00:06:23.629

view of the actual data now in case



145

00:06:21.229 --> 00:06:26.569

you're wondering the pipe character or



146

00:06:23.629 --> 00:06:28.999

vertical bar that means or so when i've



147

00:06:26.569 --> 00:06:31.419

entered that in mainactivity then the



148

00:06:28.999 --> 00:06:34.099

pipe character download data that means



149

00:06:31.419 --> 00:06:37.249

basically show output with mainactivity



150

00:06:34.099 --> 00:06:38.599

or download data in the actual text in



151

00:06:37.249 --> 00:06:40.459

the end in the actual log entries



152

00:06:38.599 --> 00:06:41.810

themselves so basically we're looking to



153

00:06:40.459 --> 00:06:44.240

see that the log entries can contain



154

00:06:41.810 --> 00:06:46.729

either the word mainactivity or download



155

00:06:44.240 --> 00:06:49.209

data now by the way it's best to use



156

00:06:46.729 --> 00:06:51.740

lower case only in that filter box



157

00:06:49.209 --> 00:06:54.099

because if you use any capitals then you



158

00:06:51.740 --> 00:06:56.270

actually have to match the tags exactly



159

00:06:54.099 --> 00:06:58.669

okay so the first thing to note is that



160

00:06:56.270 --> 00:07:00.409

uncreate finishes before doing



161

00:06:58.669 --> 00:07:02.749

background starts i'm going create



162

00:07:00.409 --> 00:07:05.810

called for the first one that uncreate



163

00:07:02.749 --> 00:07:08.270

done then after that we can see that



164

00:07:05.810 --> 00:07:11.389

quite clearly that doing background



165

00:07:08.270 --> 00:07:13.129

starts with the URL goes here so it



166

00:07:11.389 --> 00:07:15.199

takes Android a little while to set up



167

00:07:13.129 --> 00:07:17.449

all the threading for the async task and



168

00:07:15.199 --> 00:07:19.129

while it's doing that and one create



169

00:07:17.449 --> 00:07:21.740

finished because it didn't have anything



170

00:07:19.129 --> 00:07:24.020

else to do now if we had more code in



171

00:07:21.740 --> 00:07:25.879

oncreate then doing background may well



172

00:07:24.020 --> 00:07:28.009

have started before and create finished



173

00:07:25.879 --> 00:07:30.319

but the important thing here is that



174

00:07:28.009 --> 00:07:33.620

uncreate didn't wait for the background



175

00:07:30.319 --> 00:07:35.870

task to finish and we can see then doing



176

00:07:33.620 --> 00:07:36.480

background starting and the parameter it



177

00:07:35.870 --> 00:07:38.880

received



178

00:07:36.480 --> 00:07:41.190

the string as I mentioned URL goes here



179

00:07:38.880 --> 00:07:43.860

that we passed when calling the execute



180

00:07:41.190 --> 00:07:46.500

method doing background then performs



181

00:07:43.860 --> 00:07:48.060

its task on a separate thread and it



182

00:07:46.500 --> 00:07:49.350

doesn't take very long because it's not



183

00:07:48.060 --> 00:07:52.080

really doing anything but when it



184

00:07:49.350 --> 00:07:53.910

finishes it returns a string which was



185

00:07:52.080 --> 00:07:56.370

the type that we specified us the third



186

00:07:53.910 --> 00:08:02.970

parameter when we declared the async



187

00:07:56.370 --> 00:08:04.650

task on line 22 yeah now the android



188

00:08:02.970 --> 00:08:06.870

framework then takes over and cause the



189

00:08:04.650 --> 00:08:09.870

on post execute method on the main



190

00:08:06.870 --> 00:08:12.660

thread the parameter passed who on post



191

00:08:09.870 --> 00:08:15.630

execute is the return value from doing



192

00:08:12.660 --> 00:08:17.130

background and again we can see that in



193

00:08:15.630 --> 00:08:19.050

the results here in the log kept



194

00:08:17.130 --> 00:08:22.020

parameter is doing background completed



195

00:08:19.050 --> 00:08:24.840

that's well on post execute if we have a



196

00:08:22.020 --> 00:08:26.460

look at on post execute you can see that



197

00:08:24.840 --> 00:08:28.200

that's where it's printing it out and



198

00:08:26.460 --> 00:08:29.490

doing background returned doing



199

00:08:28.200 --> 00:08:31.470

background completed and that's where



200

00:08:29.490 --> 00:08:34.860

it's getting the the value to display



201

00:08:31.470 --> 00:08:37.680

and on post execute so as you can see



202

00:08:34.860 --> 00:08:40.380

Android takes care of the complexity of



203

00:08:37.680 --> 00:08:42.960

multi-threading or we have to do to use



204

00:08:40.380 --> 00:08:44.640

an async task is to define the task that



205

00:08:42.960 --> 00:08:46.740

should be done in the background and



206

00:08:44.640 --> 00:08:49.430

then then decide what to do with any



207

00:08:46.740 --> 00:08:51.510

values returned when the task completes



208

00:08:49.430 --> 00:08:52.920

now in the next video we'll get the



209

00:08:51.510 --> 00:08:55.440

background task to actually download



210

00:08:52.920 --> 00:08:57.390

some data by adding code to the doing



211

00:08:55.440 --> 00:08:59.870

background method so I'll see you in



212

00:08:57.390 --> 00:08:59.870

that next video



