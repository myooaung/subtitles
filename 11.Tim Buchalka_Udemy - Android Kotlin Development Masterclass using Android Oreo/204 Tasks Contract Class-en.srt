1
00:00:03,920 --> 00:00:06,960
all right so the tasks contract class is

2
00:00:06,960 --> 00:00:09,120
a topic for this video now when we use

3
00:00:09,120 --> 00:00:11,400
the content provider in the previous app

4
00:00:11,400 --> 00:00:13,679
we didn't know what the real columns in

5
00:00:13,679 --> 00:00:15,570
that database were called in fact we

6
00:00:15,570 --> 00:00:17,100
didn't even know that the data was

7
00:00:17,100 --> 00:00:19,170
coming from a database the content

8
00:00:19,170 --> 00:00:21,660
provider abstracts the underlying data

9
00:00:21,660 --> 00:00:24,689
and prevents a standard interface that

10
00:00:24,689 --> 00:00:27,599
we used to access the data we want now

11
00:00:27,599 --> 00:00:29,789
if you remember we use constants to

12
00:00:29,789 --> 00:00:32,099
refer to the actual fields so our

13
00:00:32,099 --> 00:00:34,110
content providers are going to allow the

14
00:00:34,110 --> 00:00:36,750
same thing so we'll start by creating a

15
00:00:36,750 --> 00:00:39,450
contract class to define the names that

16
00:00:39,450 --> 00:00:41,910
are used to access our data now google's

17
00:00:41,910 --> 00:00:44,550
contacts contract class uses an

18
00:00:44,550 --> 00:00:46,440
interface to provide the column name

19
00:00:46,440 --> 00:00:48,989
constants you can find a lot of argument

20
00:00:48,989 --> 00:00:50,430
online about whether using an interface

21
00:00:50,430 --> 00:00:53,219
just to provide constant values is a

22
00:00:53,219 --> 00:00:55,530
good thing or not in this case I think

23
00:00:55,530 --> 00:00:57,660
using an interface in a contract class

24
00:00:57,660 --> 00:01:00,210
is perfectly valid the fact that we're

25
00:01:00,210 --> 00:01:02,399
talking about a contract here is an

26
00:01:02,399 --> 00:01:03,989
indication that an interface is a

27
00:01:03,989 --> 00:01:06,840
suitable way to implement this an

28
00:01:06,840 --> 00:01:09,659
interface is a contract and guarantees

29
00:01:09,659 --> 00:01:11,340
that it will always provide the fields

30
00:01:11,340 --> 00:01:14,430
and methods that it publishes however

31
00:01:14,430 --> 00:01:17,939
Kotlin provides another way objects so

32
00:01:17,939 --> 00:01:19,380
you can find more information on object

33
00:01:19,380 --> 00:01:21,180
declarations of the Kotlin documentation

34
00:01:21,180 --> 00:01:26,210
I'm just going to briefly bring that up

35
00:01:26,210 --> 00:01:28,530
that's a good resource link to check out

36
00:01:28,530 --> 00:01:30,960
but one important use is to implement

37
00:01:30,960 --> 00:01:33,570
the singleton pattern if you only ever

38
00:01:33,570 --> 00:01:35,009
want to have a single instance of

39
00:01:35,009 --> 00:01:37,619
something then an object in Kotlin may

40
00:01:37,619 --> 00:01:38,850
be a good way to do that

41
00:01:38,850 --> 00:01:42,180
it does however have one limitation you

42
00:01:42,180 --> 00:01:44,369
can't pass arguments to its constructor

43
00:01:44,369 --> 00:01:46,200
but actually we don't need to do that

44
00:01:46,200 --> 00:01:48,720
here if you put an object inside a class

45
00:01:48,720 --> 00:01:51,630
it becomes a companion object which

46
00:01:51,630 --> 00:01:53,640
we've looked at earlier now that's also

47
00:01:53,640 --> 00:01:55,950
documented on this page just after this

48
00:01:55,950 --> 00:01:58,530
section you can see the discussion there

49
00:01:58,530 --> 00:02:00,899
about companion objects okay so I'm

50
00:02:00,899 --> 00:02:02,729
going to use objects for the contract

51
00:02:02,729 --> 00:02:04,530
classes for our app so I'm going to go

52
00:02:04,530 --> 00:02:06,930
back to IntelliJ and what I'm going to

53
00:02:06,930 --> 00:02:10,530
do is create a new Kotlin class so I'm

54
00:02:10,530 --> 00:02:12,540
going to go to our package right click

55
00:02:12,540 --> 00:02:13,860
new

56
00:02:13,860 --> 00:02:15,990
and file class we're going to call this

57
00:02:15,990 --> 00:02:22,620
one tasks contract now creating an

58
00:02:22,620 --> 00:02:24,720
object is very similar to creating a

59
00:02:24,720 --> 00:02:26,640
class we just used the word object

60
00:02:26,640 --> 00:02:29,450
instead so I'm going to type object

61
00:02:29,450 --> 00:02:33,030
tasks contract then left or right to

62
00:02:33,030 --> 00:02:35,400
oculi braces now we'll start with a

63
00:02:35,400 --> 00:02:38,430
string to store the table name we'll be

64
00:02:38,430 --> 00:02:39,870
referring to our table in a few

65
00:02:39,870 --> 00:02:42,090
different places so this is a good place

66
00:02:42,090 --> 00:02:44,640
to define the name of the table now

67
00:02:44,640 --> 00:02:47,130
remember that external apps don't have

68
00:02:47,130 --> 00:02:48,660
to know anything about how we're

69
00:02:48,660 --> 00:02:50,550
implementing the underlying storage

70
00:02:50,550 --> 00:02:53,070
which means the name of our table should

71
00:02:53,070 --> 00:02:55,620
only be visible inside our package so

72
00:02:55,620 --> 00:02:57,120
I'm going to use the internal access

73
00:02:57,120 --> 00:03:02,670
modifier to achieve that we're going to

74
00:03:02,670 --> 00:03:06,690
type internal Const Val tape on the

75
00:03:06,690 --> 00:03:09,930
score name equals tasks and double quote

76
00:03:09,930 --> 00:03:13,950
double quotes rather now note that we

77
00:03:13,950 --> 00:03:16,050
can use the Const keyword inside an

78
00:03:16,050 --> 00:03:17,820
object something we couldn't do in the

79
00:03:17,820 --> 00:03:20,190
class all right so that's the table name

80
00:03:20,190 --> 00:03:22,140
next we need to figure out our column

81
00:03:22,140 --> 00:03:24,180
names now what we'll do is we'll put

82
00:03:24,180 --> 00:03:26,549
them inside another object in the tasks

83
00:03:26,549 --> 00:03:29,250
contract object now this is effectively

84
00:03:29,250 --> 00:03:32,250
the same as a companion object but we

85
00:03:32,250 --> 00:03:33,989
don't need the companion I'm going to

86
00:03:33,989 --> 00:03:36,000
type it anyway and we'll see what

87
00:03:36,000 --> 00:03:37,530
Android studio is link checker has to

88
00:03:37,530 --> 00:03:40,769
say about it and I'll just put a comment

89
00:03:40,769 --> 00:03:47,780
down here tasks fields we type companion

90
00:03:47,780 --> 00:03:51,480
object columns left-to-right curly

91
00:03:51,480 --> 00:03:53,370
braces we get an arrow there and if we

92
00:03:53,370 --> 00:03:55,799
have a look at the error modifier

93
00:03:55,799 --> 00:03:57,450
companion is not applicable inside

94
00:03:57,450 --> 00:04:00,120
object and so we can delete the word

95
00:04:00,120 --> 00:04:02,940
companion near the keyword and just

96
00:04:02,940 --> 00:04:05,130
declare an object and I let the

97
00:04:05,130 --> 00:04:07,320
constants for the field names inside

98
00:04:07,320 --> 00:04:13,920
this object will start with Const val ID

99
00:04:13,920 --> 00:04:15,989
and uppercase equals double quotes

100
00:04:15,989 --> 00:04:18,959
underscore ID and in the next line

101
00:04:18,959 --> 00:04:21,720
constable and uppercase task chemical

102
00:04:21,720 --> 00:04:25,800
name equals name double quotes next line

103
00:04:25,800 --> 00:04:27,420
constable

104
00:04:27,420 --> 00:04:28,890
Tech our task rather than task or

105
00:04:28,890 --> 00:04:33,000
description enough a case again equals

106
00:04:33,000 --> 00:04:35,520
an in double quotes description and

107
00:04:35,520 --> 00:04:39,570
lastly Const vowel task Alice call sort

108
00:04:39,570 --> 00:04:42,650
underscore order is equal to sort order

109
00:04:42,650 --> 00:04:45,570
capital S kept away there in double

110
00:04:45,570 --> 00:04:47,580
quotes and obviously you can see I've

111
00:04:47,580 --> 00:04:50,400
capitalized the name description and

112
00:04:50,400 --> 00:04:52,920
sort order and I was 14 through 16

113
00:04:52,920 --> 00:04:55,890
so our columns object behaves almost

114
00:04:55,890 --> 00:04:58,560
exactly the same as if it was defined in

115
00:04:58,560 --> 00:05:01,290
its own column stock kt file the only

116
00:05:01,290 --> 00:05:03,210
difference is that we can't refer to as

117
00:05:03,210 --> 00:05:06,600
directly as columns we have to use tasks

118
00:05:06,600 --> 00:05:09,720
contract columns now one advantage of

119
00:05:09,720 --> 00:05:11,670
this is that we can have several columns

120
00:05:11,670 --> 00:05:13,680
objects now we're going to need to

121
00:05:13,680 --> 00:05:15,750
define the columns for our timings table

122
00:05:15,750 --> 00:05:18,330
and that object would be referred to as

123
00:05:18,330 --> 00:05:22,050
timings contract columns all right so

124
00:05:22,050 --> 00:05:24,030
this can this is a columns object is

125
00:05:24,030 --> 00:05:25,890
just to provide the constants we'll be

126
00:05:25,890 --> 00:05:28,500
using to refer to the column name in our

127
00:05:28,500 --> 00:05:30,900
tasks table so we're going to add more

128
00:05:30,900 --> 00:05:32,940
code to this task contract object later

129
00:05:32,940 --> 00:05:35,070
to provide everything that we'll need

130
00:05:35,070 --> 00:05:37,350
for our content provider but that's

131
00:05:37,350 --> 00:05:39,390
enough for now except there's one change

132
00:05:39,390 --> 00:05:41,370
that I want to make and I want to make a

133
00:05:41,370 --> 00:05:43,710
change to our code so that we can have a

134
00:05:43,710 --> 00:05:46,470
look at what base columns is so if we

135
00:05:46,470 --> 00:05:49,620
come down here and change the OID I'm

136
00:05:49,620 --> 00:05:50,820
actually going to add the word base

137
00:05:50,820 --> 00:05:56,390
columns those columns dot underscore ID

138
00:05:56,390 --> 00:05:58,440
I'm going to delete out four double

139
00:05:58,440 --> 00:05:59,790
quotes that comes from ID that we had

140
00:05:59,790 --> 00:06:04,710
there so if we click on this now we can

141
00:06:04,710 --> 00:06:06,900
check out the source code and you can

142
00:06:06,900 --> 00:06:08,160
see there that base columns is an

143
00:06:08,160 --> 00:06:10,800
interface that defines two constants

144
00:06:10,800 --> 00:06:14,280
underscore ID and underscore count now I

145
00:06:14,280 --> 00:06:15,900
mentioned that Android makes use of a

146
00:06:15,900 --> 00:06:17,760
primary key called underscore ID and

147
00:06:17,760 --> 00:06:20,700
this is where that names defined now we

148
00:06:20,700 --> 00:06:22,350
could have left it hard-coded in our

149
00:06:22,350 --> 00:06:24,750
code but if Google provide a constant to

150
00:06:24,750 --> 00:06:26,610
use then we really should use that

151
00:06:26,610 --> 00:06:29,310
constant so that way if they change

152
00:06:29,310 --> 00:06:31,470
things in future our code will still

153
00:06:31,470 --> 00:06:33,810
work and won't break now I can't really

154
00:06:33,810 --> 00:06:36,090
imagine any reason why they might decide

155
00:06:36,090 --> 00:06:38,400
to rename this field it could break too

156
00:06:38,400 --> 00:06:40,650
much existing code for one thing so if

157
00:06:40,650 --> 00:06:41,340
you prefer to

158
00:06:41,340 --> 00:06:43,860
used a string literal underscore ID or

159
00:06:43,860 --> 00:06:46,710
just closes down in your code instead of

160
00:06:46,710 --> 00:06:48,780
base columns dot underscore ID that

161
00:06:48,780 --> 00:06:51,150
we've got here that's probably fine but

162
00:06:51,150 --> 00:06:52,889
I've done it this way because you'll see

163
00:06:52,889 --> 00:06:55,350
this base columns interface being used

164
00:06:55,350 --> 00:06:56,790
like this in a lot of code on the

165
00:06:56,790 --> 00:06:57,300
Internet

166
00:06:57,300 --> 00:06:59,699
alright so that's enough to be getting

167
00:06:59,699 --> 00:07:01,320
on with in the next video we'll start

168
00:07:01,320 --> 00:07:03,570
looking at creating the database class

169
00:07:03,570 --> 00:07:07,729
so I will see you in the next video

