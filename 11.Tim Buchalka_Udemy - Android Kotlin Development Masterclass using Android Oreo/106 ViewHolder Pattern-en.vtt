WEBVTT
1

00:00:04.700 --> 00:00:08.540

all right so I mentioned at the end of



2

00:00:06.740 --> 00:00:10.580

the last video that we've got a much



3

00:00:08.540 --> 00:00:12.980

more efficient implementation of the get



4

00:00:10.580 --> 00:00:14.900

D method but we can improve it a lot



5

00:00:12.980 --> 00:00:16.730

further and what we're going to do is



6

00:00:14.900 --> 00:00:19.669

we're going to employ something called



7

00:00:16.730 --> 00:00:22.189

the view Hold'em pattern to do that now



8

00:00:19.669 --> 00:00:25.070

looking at this I get view code you can



9

00:00:22.189 --> 00:00:27.140

see we're using find view by ID to get a



10

00:00:25.070 --> 00:00:29.419

reference to each of the widgets in the



11

00:00:27.140 --> 00:00:31.700

view and we're doing that every time you



12

00:00:29.419 --> 00:00:33.500

know even when we're reusing of you we



13

00:00:31.700 --> 00:00:35.570

still have to find the individual text



14

00:00:33.500 --> 00:00:38.900

widgets in order to change their text



15

00:00:35.570 --> 00:00:40.850

now find view by ID is a really costly



16

00:00:38.900 --> 00:00:42.800

operation it takes a while to go through



17

00:00:40.850 --> 00:00:45.440

the view searching for the correct



18

00:00:42.800 --> 00:00:47.720

widget you know it is necessary to do



19

00:00:45.440 --> 00:00:50.390

that a lot of the time but here we're



20

00:00:47.720 --> 00:00:53.000

reusing views aren't we which means that



21

00:00:50.390 --> 00:00:55.520

we're calling find view by D to find the



22

00:00:53.000 --> 00:00:57.530

widgets in a view that we've already



23

00:00:55.520 --> 00:00:59.270

searched last time we used it



24

00:00:57.530 --> 00:01:01.370

now the widgets haven't changed since



25

00:00:59.270 --> 00:01:03.770

the last time so it makes sense to store



26

00:01:01.370 --> 00:01:05.449

those references somewhere and use the



27

00:01:03.770 --> 00:01:07.729

stored references to the textview



28

00:01:05.449 --> 00:01:10.100

widgets rather than searching for them



29

00:01:07.729 --> 00:01:12.469

every time so that's what the view



30

00:01:10.100 --> 00:01:13.880

holder pattern does and it's called the



31

00:01:12.469 --> 00:01:16.369

view holder pattern because it uses a



32

00:01:13.880 --> 00:01:18.740

small class to hold the views that we



33

00:01:16.369 --> 00:01:21.020

found the last time so we're going to



34

00:01:18.740 --> 00:01:24.020

create a class that has a field for each



35

00:01:21.020 --> 00:01:26.329

of the widgets that we need to find now



36

00:01:24.020 --> 00:01:28.969

the only other thing we need is some way



37

00:01:26.329 --> 00:01:31.729

to store the instances of this class and



38

00:01:28.969 --> 00:01:34.219

view objects have a tag field that can



39

00:01:31.729 --> 00:01:35.689

be used for all that purpose so we'll



40

00:01:34.219 --> 00:01:38.029

the type of the coder then explain what



41

00:01:35.689 --> 00:01:40.459

it's doing but first we want to create a



42

00:01:38.029 --> 00:01:41.810

class called view holder now this could



43

00:01:40.459 --> 00:01:43.670

be called anything but the usual name is



44

00:01:41.810 --> 00:01:44.899

view holder now because it's such a



45

00:01:43.670 --> 00:01:46.909

small class I'm gonna put it at the



46

00:01:44.899 --> 00:01:52.459

start of file so I'm gonna open up our



47

00:01:46.909 --> 00:01:53.630

project again go into feed adapter well



48

00:01:52.459 --> 00:01:54.799

I was actually there anyway but I can go



49

00:01:53.630 --> 00:01:57.439

to the top there and we're going to put



50

00:01:54.799 --> 00:02:02.719

it above the feed adapter class



51

00:01:57.439 --> 00:02:04.649

definition so I put it above that so



52

00:02:02.719 --> 00:02:07.289

it's gonna be class



53

00:02:04.649 --> 00:02:11.970

if you hold up and notice when I start



54

00:02:07.289 --> 00:02:14.099

typing me that the icon for feed adapter



55

00:02:11.970 --> 00:02:16.950

in the project pane so it's a common



56

00:02:14.099 --> 00:02:23.060

class icon CK basically so our class



57

00:02:16.950 --> 00:02:26.220

view holder parentheses of UV : view



58

00:02:23.060 --> 00:02:28.140

parentheses and we'll go through and it



59

00:02:26.220 --> 00:02:35.040

will padded our curly braces we're going



60

00:02:28.140 --> 00:02:42.200

to type Val TV name : text view equals v



61

00:02:35.040 --> 00:02:46.709

dot v view by ID r dot ID dot TV name



62

00:02:42.200 --> 00:02:50.579

next one val TV artist : it's also



63

00:02:46.709 --> 00:02:55.260

textview as you know and that's equal to



64

00:02:50.579 --> 00:03:03.049

V dot find my ID r dot ID dot TV artist



65

00:02:55.260 --> 00:03:07.890

and the last one is Val TV summary :



66

00:03:03.049 --> 00:03:12.239

textview equals lead up on D by ID r dot



67

00:03:07.890 --> 00:03:14.310

ID dot TV summary the other thing I'll



68

00:03:12.239 --> 00:03:18.180

do is I'm going to leave two Alliance or



69

00:03:14.310 --> 00:03:19.950

two blank lines between the classes now



70

00:03:18.180 --> 00:03:22.319

that's actually a Python convention but



71

00:03:19.950 --> 00:03:23.760

I think it does help to separate them so



72

00:03:22.319 --> 00:03:25.920

it's now by convention I'm eating for



73

00:03:23.760 --> 00:03:28.680

Kotlin until someone publishes the



74

00:03:25.920 --> 00:03:30.930

Kotlin style guide alright so the view



75

00:03:28.680 --> 00:03:33.900

holder class is very basic it just uses



76

00:03:30.930 --> 00:03:37.079

finally my ID to find the widgets in the



77

00:03:33.900 --> 00:03:38.609

view V and stores them in its fields now



78

00:03:37.079 --> 00:03:40.799

I'm doing this slightly different two



79

00:03:38.609 --> 00:03:42.269

examples you'll find out there so let's



80

00:03:40.799 --> 00:03:44.040

see what google have to say about the



81

00:03:42.269 --> 00:03:52.549

view holder pattern and then going to



82

00:03:44.040 --> 00:03:52.549

just open a browser let's paste that in



83

00:03:53.910 --> 00:03:59.890

now the current examples are in Java but



84

00:03:57.340 --> 00:04:01.690

we can see that the view holder is just



85

00:03:59.890 --> 00:04:03.820

a basic class holding the references to



86

00:04:01.690 --> 00:04:06.280

the fields that we want to update now



87

00:04:03.820 --> 00:04:07.870

the first paragraph explains the reasons



88

00:04:06.280 --> 00:04:10.450

for it calling following the Eid



89

00:04:07.870 --> 00:04:12.490

frequently can slow down performance you



90

00:04:10.450 --> 00:04:14.740

can see that over here now Google's



91

00:04:12.490 --> 00:04:17.590

example puts the call to find view my ID



92

00:04:14.740 --> 00:04:19.959

in the get view method whereas otherwise



93

00:04:17.590 --> 00:04:21.100

put them in the view holder class now in



94

00:04:19.959 --> 00:04:23.620

Java I don't think it made any



95

00:04:21.100 --> 00:04:25.870

difference either way but in Kotlin The



96

00:04:23.620 --> 00:04:27.970

Situation's slightly different so



97

00:04:25.870 --> 00:04:31.440

looking at the Java code that calls for



98

00:04:27.970 --> 00:04:33.850

invivo ad for each of the widgets



99

00:04:31.440 --> 00:04:35.830

scroll down there they were all



100

00:04:33.850 --> 00:04:38.650

initialized to null in the viewholder



101

00:04:35.830 --> 00:04:40.510

class so if you want to do it that way



102

00:04:38.650 --> 00:04:42.550

in Kotlin we're going to have to use the



103

00:04:40.510 --> 00:04:44.830

nullable textview typed for our text



104

00:04:42.550 --> 00:04:46.750

views now the way i'm suggesting of



105

00:04:44.830 --> 00:04:48.910

voids that the properties are



106

00:04:46.750 --> 00:04:51.310

initialized at the time they're created



107

00:04:48.910 --> 00:04:54.070

and we can use the non null textview



108

00:04:51.310 --> 00:04:55.780

type now we don't like nullable types in



109

00:04:54.070 --> 00:04:56.290

Kotlin so I'm sticking with this way of



110

00:04:55.780 --> 00:04:59.830

doing it



111

00:04:56.290 --> 00:05:01.270

alright so back to the code I'm just



112

00:04:59.830 --> 00:05:02.500

going to close it for now and we'll



113

00:05:01.270 --> 00:05:04.750

update that later cuz I've showed you



114

00:05:02.500 --> 00:05:06.280

how to do that in a previous video all



115

00:05:04.750 --> 00:05:08.410

right so I'm going to change the getview



116

00:05:06.280 --> 00:05:09.910

method to use the view holder then go



117

00:05:08.410 --> 00:05:12.940

through how it all works so I'm going to



118

00:05:09.910 --> 00:05:15.130

go down to the get view method we're



119

00:05:12.940 --> 00:05:18.840

going to start by deleting these three



120

00:05:15.130 --> 00:05:21.190

lines actually these three lines up here



121

00:05:18.840 --> 00:05:22.240

and we're deleting them because we don't



122

00:05:21.190 --> 00:05:23.350

need them anymore well actually what



123

00:05:22.240 --> 00:05:25.420

I'll do is I'll just comment them out



124

00:05:23.350 --> 00:05:26.740

for now but we don't need them anymore



125

00:05:25.420 --> 00:05:30.010

with this approach we're about to take



126

00:05:26.740 --> 00:05:32.260

so what we want to do is create a new



127

00:05:30.010 --> 00:05:35.020

view holder object if we're having to



128

00:05:32.260 --> 00:05:35.680

create a new view so we've got this code



129

00:05:35.020 --> 00:05:38.230

here up above



130

00:05:35.680 --> 00:05:39.490

if convert view equals null then we've



131

00:05:38.230 --> 00:05:40.720

got the log here get to your called with



132

00:05:39.490 --> 00:05:43.450

no convert view that's where we're



133

00:05:40.720 --> 00:05:45.700

creating a new view so what we're going



134

00:05:43.450 --> 00:05:47.400

to do is we view equals inflate inflate



135

00:05:45.700 --> 00:05:49.330

have done inflate that's still correct



136

00:05:47.400 --> 00:05:54.270

what we're going to do after that is



137

00:05:49.330 --> 00:05:59.140

we're going to type view holder equals



138

00:05:54.270 --> 00:06:04.810

you hold a parenthesis of you I'm gonna



139

00:05:59.140 --> 00:06:05.920

do view tag it was a view holder then



140

00:06:04.810 --> 00:06:08.200

we'll clear up that error in a minute



141

00:06:05.920 --> 00:06:10.390

now otherwise if we've been past of you



142

00:06:08.200 --> 00:06:11.800

to reuse then we're going to retrieve



143

00:06:10.390 --> 00:06:14.560

the view holder from it's tagged with



144

00:06:11.800 --> 00:06:16.240

the else so we've got the view equals



145

00:06:14.560 --> 00:06:19.350

convert view which is still correct but



146

00:06:16.240 --> 00:06:19.350

then we're going to do the view holder



147

00:06:19.410 --> 00:06:29.870

equals you not tagged s view holder okay



148

00:06:28.580 --> 00:06:31.280

all right so we've got this error and



149

00:06:29.870 --> 00:06:32.539

that's because we need to declare our



150

00:06:31.280 --> 00:06:34.310

view holder



151

00:06:32.539 --> 00:06:35.539

so let's actually do that and that's



152

00:06:34.310 --> 00:06:38.419

going to be at the stand of the method



153

00:06:35.539 --> 00:06:39.110

under the valve you so I'm going to put



154

00:06:38.419 --> 00:06:46.310

a bell



155

00:06:39.110 --> 00:06:48.770

you hold off : you hold up and that



156

00:06:46.310 --> 00:06:51.050

clears up most of those errors so all



157

00:06:48.770 --> 00:06:53.300

that's left now is to put the text into



158

00:06:51.050 --> 00:06:54.770

the view holders properties instead of



159

00:06:53.300 --> 00:06:57.080

using the variables that we've deleted



160

00:06:54.770 --> 00:06:59.650

so let's go ahead and modify those lines



161

00:06:57.080 --> 00:07:01.759

the code down lies 63-62



162

00:06:59.650 --> 00:07:04.969

bearing on one that lines 62 was



163

00:07:01.759 --> 00:07:06.259

commented out when we were testing in a



164

00:07:04.969 --> 00:07:08.150

previous video so I'm going to uncomment



165

00:07:06.259 --> 00:07:11.150

that we're gonna change this though



166

00:07:08.150 --> 00:07:13.610

instead of TV named text equals current



167

00:07:11.150 --> 00:07:14.449

app dot name we're gonna use the view



168

00:07:13.610 --> 00:07:19.699

holder instead



169

00:07:14.449 --> 00:07:24.770

so we'll put view holder dot in front of



170

00:07:19.699 --> 00:07:26.060

that and do that for all three lines all



171

00:07:24.770 --> 00:07:26.469

right so what are we basically down here



172

00:07:26.060 --> 00:07:29.509

now



173

00:07:26.469 --> 00:07:32.060

well if convertview is no we're doing



174

00:07:29.509 --> 00:07:34.490

that test on line 40 we inflate a new



175

00:07:32.060 --> 00:07:36.199

viewers before and also what we're doing



176

00:07:34.490 --> 00:07:38.300

then is creating a new view holder



177

00:07:36.199 --> 00:07:42.229

object and storing it in the views tag



178

00:07:38.300 --> 00:07:43.490

using the set tag method essentially



179

00:07:42.229 --> 00:07:46.789

that's what we're doing anyway with the



180

00:07:43.490 --> 00:07:48.529

view tag equals our view holder now if



181

00:07:46.789 --> 00:07:50.509

we have been given back an existing view



182

00:07:48.529 --> 00:07:52.580

by the ListView then we're retrieving



183

00:07:50.509 --> 00:07:54.379

view holder from its tag using the get



184

00:07:52.580 --> 00:07:56.599

tag method or in this case we're just



185

00:07:54.379 --> 00:07:58.069

accessing the property view dot tag as



186

00:07:56.599 --> 00:08:00.409

view however we're signing that or



187

00:07:58.069 --> 00:08:04.129

placing that into our view holder our



188

00:08:00.409 --> 00:08:06.469

variable now the tag is an object so we



189

00:08:04.129 --> 00:08:07.879

have to cast it to a view holder but we



190

00:08:06.469 --> 00:08:09.889

know it'll be a view holder because we



191

00:08:07.879 --> 00:08:12.379

put it there now the android framework



192

00:08:09.889 --> 00:08:14.449

doesn't use that tag field so we can be



193

00:08:12.379 --> 00:08:16.669

sure that whenever we store in it won't



194

00:08:14.449 --> 00:08:17.779

be touched by Android that's this ask



195

00:08:16.669 --> 00:08:20.270

you how old I was when we're actually



196

00:08:17.779 --> 00:08:21.830

casting it and we're then retrieving the



197

00:08:20.270 --> 00:08:24.020

application record from the list as



198

00:08:21.830 --> 00:08:25.430

before and setting its values to the



199

00:08:24.020 --> 00:08:27.770

widgets that are stored in the view



200

00:08:25.430 --> 00:08:31.969

holder and also we're doing the other



201

00:08:27.770 --> 00:08:34.039

lines 58 360 so for view find V by IDs



202

00:08:31.969 --> 00:08:36.140

now only called when a new view has to



203

00:08:34.039 --> 00:08:37.969

be inflated otherwise the widgets have



204

00:08:36.140 --> 00:08:41.020

already been found and references to



205

00:08:37.969 --> 00:08:42.409

them are stored in the view holder now



206

00:08:41.020 --> 00:08:44.690

run this out



207

00:08:42.409 --> 00:08:47.290

which I'm going to do now you probably



208

00:08:44.690 --> 00:08:50.509

won't notice much in the way performance



209

00:08:47.290 --> 00:08:52.550

in other words import improvement in



210

00:08:50.509 --> 00:08:54.199

speed and that's because the new



211

00:08:52.550 --> 00:08:56.029

emulators are actually very fast once



212

00:08:54.199 --> 00:08:57.949

they're started up now you may not



213

00:08:56.029 --> 00:08:59.449

notice any speed improvements on a



214

00:08:57.949 --> 00:09:01.550

modern Android device with this app



215

00:08:59.449 --> 00:09:03.800

either but when you come to add



216

00:09:01.550 --> 00:09:05.240

animations in this fuse though that's



217

00:09:03.800 --> 00:09:07.490

when you start to see the smoothest



218

00:09:05.240 --> 00:09:09.350

scrolling that this approach allows so



219

00:09:07.490 --> 00:09:11.509

the improvement in the smoothness of the



220

00:09:09.350 --> 00:09:13.519

scrolling can be readily it can be



221

00:09:11.509 --> 00:09:15.319

really evident on older devices as well



222

00:09:13.519 --> 00:09:16.699

you can see that though we still got



223

00:09:15.319 --> 00:09:20.089

working down with as of the summary



224

00:09:16.699 --> 00:09:21.829

again now you can see it's working quite



225

00:09:20.089 --> 00:09:24.199

nicely there's no perceivable delay



226

00:09:21.829 --> 00:09:27.290

there but again you'd be more noticeable



227

00:09:24.199 --> 00:09:28.759

on an older Android device or if you're



228

00:09:27.290 --> 00:09:31.790

starting to use animations in the



229

00:09:28.759 --> 00:09:34.550

ListView frenum for animating various



230

00:09:31.790 --> 00:09:35.180

sub views all right now just have a look



231

00:09:34.550 --> 00:09:38.060

at the logcat



232

00:09:35.180 --> 00:09:41.529

I wanna click on the logcat to open that



233

00:09:38.060 --> 00:09:47.209

up then we'll go back to our code again



234

00:09:41.529 --> 00:09:48.290

that's our scroll we can see the convert



235

00:09:47.209 --> 00:09:54.980

views being used



236

00:09:48.290 --> 00:09:56.990

get view provider to convert view we get



237

00:09:54.980 --> 00:09:59.000

movies created to start with until the



238

00:09:56.990 --> 00:10:01.459

display fills up but after that we're



239

00:09:59.000 --> 00:10:04.310

reusing the old views that the ListView



240

00:10:01.459 --> 00:10:06.350

passes back to get you alright so that's



241

00:10:04.310 --> 00:10:07.910

how improved adapter it now uses much



242

00:10:06.350 --> 00:10:10.579

less memory and works more efficiently



243

00:10:07.910 --> 00:10:12.980

than the first version now when you're



244

00:10:10.579 --> 00:10:14.569

creating your own adapters reuse the



245

00:10:12.980 --> 00:10:16.579

views that you give them back and use



246

00:10:14.569 --> 00:10:19.370

the view holder pattern to improve the



247

00:10:16.579 --> 00:10:21.380

responsiveness of your app now although



248

00:10:19.370 --> 00:10:23.569

google recommend the view holder pattern



249

00:10:21.380 --> 00:10:25.519

they didn't enforce its use with the



250

00:10:23.569 --> 00:10:27.439

ListView then when we come back to look



251

00:10:25.519 --> 00:10:28.730

at the new recycler view widget you'll



252

00:10:27.439 --> 00:10:31.399

see that the new horror pattern is



253

00:10:28.730 --> 00:10:33.860

enforced with that all right so I'm



254

00:10:31.399 --> 00:10:40.879

gonna reformat this code I'll close down



255

00:10:33.860 --> 00:10:43.850

the logcat first and what I'm also going



256

00:10:40.879 --> 00:10:45.889

to do is change the I'll go back to main



257

00:10:43.850 --> 00:10:50.180

activity I'm going to change the limit



258

00:10:45.889 --> 00:10:52.069

that was set to 200 back to 10 just in



259

00:10:50.180 --> 00:10:54.470

case app or events 200 items for being



260

00:10:52.069 --> 00:10:56.300

accessed in the future now if you want



261

00:10:54.470 --> 00:10:58.550

to learn more about list views in a debt



262

00:10:56.300 --> 00:11:00.650

then the talks from Google i/o are



263

00:10:58.550 --> 00:11:02.510

available on YouTube and these are



264

00:11:00.650 --> 00:11:04.940

highly recommended and said technical



265

00:11:02.510 --> 00:11:07.280

talks presented by the people who create



266

00:11:04.940 --> 00:11:10.190

the Android code now each year since



267

00:11:07.280 --> 00:11:11.750

2008 Google live run Google i/o to



268

00:11:10.190 --> 00:11:14.120

present the new technologies that



269

00:11:11.750 --> 00:11:16.130

they've created and it's largely devoted



270

00:11:14.120 --> 00:11:18.470

to technical presentations covering



271

00:11:16.130 --> 00:11:19.880

things like Android and Chrome and is a



272

00:11:18.470 --> 00:11:22.010

great way to learn about what Google



273

00:11:19.880 --> 00:11:23.330

have planned for the future as well as



274

00:11:22.010 --> 00:11:25.100

getting information on their current



275

00:11:23.330 --> 00:11:29.360

technologies from the programmers who



276

00:11:25.100 --> 00:11:31.790

create them and there's actually a talk



277

00:11:29.360 --> 00:11:33.620

on list views and adapters from the 2010



278

00:11:31.790 --> 00:11:35.630

Google i/o I'm just going to give you a



279

00:11:33.620 --> 00:11:38.210

link there and this will be in the



280

00:11:35.630 --> 00:11:41.410

resources section very useful video to



281

00:11:38.210 --> 00:11:41.410

check out and have a look at



282

00:11:42.309 --> 00:11:46.970

and I won't actually start playing it



283

00:11:44.360 --> 00:11:48.290

now but you can see that it's obviously



284

00:11:46.970 --> 00:11:49.759

a popular video and there's a lot of



285

00:11:48.290 --> 00:11:51.410

people who subscribe to this channel so



286

00:11:49.759 --> 00:11:53.029

very much worthwhile watching this video



287

00:11:51.410 --> 00:11:55.339

to understand a lot more about list



288

00:11:53.029 --> 00:11:56.989

views and adapters alright so in the



289

00:11:55.339 --> 00:11:58.549

next video we're going to add a menu to



290

00:11:56.989 --> 00:12:00.589

the app so that we can choose from a



291

00:11:58.549 --> 00:12:02.749

selection of feeds rather than just



292

00:12:00.589 --> 00:12:05.139

displaying the same one see you in the



293

00:12:02.749 --> 00:12:05.139

next video



