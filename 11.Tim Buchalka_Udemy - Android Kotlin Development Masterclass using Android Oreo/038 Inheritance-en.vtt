WEBVTT
1

00:00:04.720 --> 00:00:06.640

In this video we're gonna start talking



2

00:00:06.640 --> 00:00:08.380

about an object-oriented term called



3

00:00:08.380 --> 00:00:11.080

inheritance but before I do that I want



4

00:00:11.080 --> 00:00:12.730

to show you how to fix the problem



5

00:00:12.730 --> 00:00:15.820

whereby sometimes Android studio won't



6

00:00:15.820 --> 00:00:18.160

compile Kotlin code or at least that



7

00:00:18.160 --> 00:00:20.169

happened for me and actually found the



8

00:00:20.169 --> 00:00:21.609

solution to the problem so just in case



9

00:00:21.609 --> 00:00:22.779

you're getting this problem this is how



10

00:00:22.779 --> 00:00:24.760

to fix it now the problem is that time



11

00:00:24.760 --> 00:00:28.240

on atop some code printing this is a



12

00:00:28.240 --> 00:00:33.340

test and we're gonna run that code you



13

00:00:33.340 --> 00:00:35.050

can see that pretend this is a test the



14

00:00:35.050 --> 00:00:37.180

code hasn't been executed in fact what I



15

00:00:37.180 --> 00:00:39.520

need to do to get it to work is make the



16

00:00:39.520 --> 00:00:43.149

module run it again and then it'll work



17

00:00:43.149 --> 00:00:44.980

you can see we're now getting this is a



18

00:00:44.980 --> 00:00:47.289

test out put it on the screen so the



19

00:00:47.289 --> 00:00:49.449

problems got to do with the actual build



20

00:00:49.449 --> 00:00:52.510

process so I'm going to come up here and



21

00:00:52.510 --> 00:00:54.520

click on and select edit configurations



22

00:00:54.520 --> 00:00:57.780

and the issue is that for some reason



23

00:00:57.780 --> 00:01:00.760

this has been set to be just building so



24

00:01:00.760 --> 00:01:02.170

we need to actually get it to run the



25

00:01:02.170 --> 00:01:04.479

Gradle task to compile the code and then



26

00:01:04.479 --> 00:01:06.490

run it and that's what's happening is



27

00:01:06.490 --> 00:01:08.830

that that's not being executed so the



28

00:01:08.830 --> 00:01:11.530

fix for this is to select build delete



29

00:01:11.530 --> 00:01:13.959

it then add I'm going to select run



30

00:01:13.959 --> 00:01:17.440

Gradle task then we choose the Gradle



31

00:01:17.440 --> 00:01:19.000

project in this case will be the Kotlin



32

00:01:19.000 --> 00:01:22.270

tutorial and for tasks we need to type



33

00:01:22.270 --> 00:01:29.080

in clean build click ok so if you've



34

00:01:29.080 --> 00:01:30.099

already got something that looks very



35

00:01:30.099 --> 00:01:31.390

similar to that you won't need to make



36

00:01:31.390 --> 00:01:34.330

this change but once we do that well we



37

00:01:34.330 --> 00:01:37.149

run it you can see it's now compiling



38

00:01:37.149 --> 00:01:40.000

and we've got the code showing there



39

00:01:40.000 --> 00:01:41.970

which is forearmed if I delete this now



40

00:01:41.970 --> 00:01:44.830

and run this we'll see that the code



41

00:01:44.830 --> 00:01:46.630

gets updated automatically and it starts



42

00:01:46.630 --> 00:01:49.420

working again so it's been updated so if



43

00:01:49.420 --> 00:01:50.649

you do get a problem like that that's



44

00:01:50.649 --> 00:01:51.759

how to go about fixing it



45

00:01:51.759 --> 00:01:53.800

alrighty so let's move on and as I said



46

00:01:53.800 --> 00:01:55.690

this video we're going to talk about an



47

00:01:55.690 --> 00:01:57.780

object-oriented term called inheritance



48

00:01:57.780 --> 00:02:00.399

and specifically how that applies to



49

00:02:00.399 --> 00:02:02.920

Kotlin programming now what I'm going to



50

00:02:02.920 --> 00:02:04.569

do is start with the definition and



51

00:02:04.569 --> 00:02:06.879

explanation of what it is then we'll



52

00:02:06.879 --> 00:02:08.410

move into some coding to show you an



53

00:02:08.410 --> 00:02:10.420

example of with Kotlin of what



54

00:02:10.420 --> 00:02:12.520

inheritance is and also why it's



55

00:02:12.520 --> 00:02:15.550

important alright so let's talk about a



56

00:02:15.550 --> 00:02:18.410

real world example of inheritance



57

00:02:18.410 --> 00:02:20.030

so different types of objects in the



58

00:02:20.030 --> 00:02:22.160

real world can have a certain amount in



59

00:02:22.160 --> 00:02:24.320

common with each other now for example



60

00:02:24.320 --> 00:02:25.520

as you can see on this slide



61

00:02:25.520 --> 00:02:28.550

a seagull a crow and an eagle or they're



62

00:02:28.550 --> 00:02:30.710

all birds and so are ostriches and



63

00:02:30.710 --> 00:02:33.200

penguins so in other words they share



64

00:02:33.200 --> 00:02:35.540

their being a bird traits so to speak



65

00:02:35.540 --> 00:02:38.360

they all have a beak and wings things



66

00:02:38.360 --> 00:02:42.430

they inherit by virtue of them being birds.



67

00:02:42.430 --> 00:02:45.459

Now another example to get away from the



68

00:02:45.459 --> 00:02:47.739

natural world could be motor vehicles a



69

00:02:47.739 --> 00:02:50.530

motor car a lorry and a digger and a



70

00:02:50.530 --> 00:02:52.689

building site all share common



71

00:02:52.689 --> 00:02:55.030

characteristics they will have wheels



72

00:02:55.030 --> 00:02:57.340

for one thing and are generally powered



73

00:02:57.340 --> 00:03:00.340

by an internal combustion engine now we



74

00:03:00.340 --> 00:03:02.019

could say that all these three different



75

00:03:02.019 --> 00:03:04.150

vehicles are descended from a basic



76

00:03:04.150 --> 00:03:07.180

vehicle class now the basic class



77

00:03:07.180 --> 00:03:09.189

probably doesn't have an engine it would



78

00:03:09.189 --> 00:03:12.340

be an early hand cart perhaps our three



79

00:03:12.340 --> 00:03:14.739

vehicles extend the basic hand cart with



80

00:03:14.739 --> 00:03:16.840

the addition of an engine now we're



81

00:03:16.840 --> 00:03:18.280

discussing class inheritance and



82

00:03:18.280 --> 00:03:20.440

inheritance is easier to see in nature



83

00:03:20.440 --> 00:03:22.150

but I wanted to point out that things



84

00:03:22.150 --> 00:03:26.079

humans produce also involve they build



85

00:03:26.079 --> 00:03:28.269

on earlier versions adding some features



86

00:03:28.269 --> 00:03:30.340

and changing the way other features are



87

00:03:30.340 --> 00:03:32.590

implemented so we know how electric cars



88

00:03:32.590 --> 00:03:34.689

would share a common ancestry with the



89

00:03:34.689 --> 00:03:36.879

earlier petrol and diesel powered



90

00:03:36.879 --> 00:03:38.859

versions so I'm going to stick with



91

00:03:38.859 --> 00:03:40.269

birds because they're easier to



92

00:03:40.269 --> 00:03:42.310

understand than the workings of modern



93

00:03:42.310 --> 00:03:45.370

motor vehicles nearer Birds share a lot



94

00:03:45.370 --> 00:03:47.410

of traits they all have feathers for



95

00:03:47.410 --> 00:03:49.150

example that's one of the things that



96

00:03:49.150 --> 00:03:51.639

makes them birds so what we could do is



97

00:03:51.639 --> 00:03:54.040

to find a base class that objects are



98

00:03:54.040 --> 00:03:55.840

based on things that are common for



99

00:03:55.840 --> 00:03:58.389

classes that use that then we can allow



100

00:03:58.389 --> 00:03:59.829

a class to defy the unique



101

00:03:59.829 --> 00:04:02.560

characteristics of itself just like in



102

00:04:02.560 --> 00:04:05.109

the car example so in other words we



103

00:04:05.109 --> 00:04:07.120

have a base class than something that



104

00:04:07.120 --> 00:04:09.280

inherits from that to make it something



105

00:04:09.280 --> 00:04:11.919

else to make it unique now the base



106

00:04:11.919 --> 00:04:15.190

class here is bird and from that all the



107

00:04:15.190 --> 00:04:17.769

birds inherit our beacon wings but each



108

00:04:17.769 --> 00:04:19.690

type of bird also has things that make



109

00:04:19.690 --> 00:04:21.070

it different from the others



110

00:04:21.070 --> 00:04:23.470

so Eagles have incredibly good eyesight



111

00:04:23.470 --> 00:04:25.750

for example now you may be pleased if



112

00:04:25.750 --> 00:04:27.760

you spot a McDonald's for 400 meters but



113

00:04:27.760 --> 00:04:32.940

Eagles can see a rabbit from 2 miles away



114

00:04:32.940 --> 00:04:35.680

so all our Birds inherit some basic



115

00:04:35.680 --> 00:04:37.600

properties from their base class which



116

00:04:37.600 --> 00:04:41.080

is often referred to as a superclass no



117

00:04:41.080 --> 00:04:43.630

they also inherit methods so that our



118

00:04:43.630 --> 00:04:45.550

birds can walk and eat but the



119

00:04:45.550 --> 00:04:47.560

individual bird classes also have their



120

00:04:47.560 --> 00:04:49.320

own unique properties and methods



121

00:04:49.320 --> 00:04:52.150

penguins can swim and ostriches can run



122

00:04:52.150 --> 00:04:54.490

for example so these individual bird



123

00:04:54.490 --> 00:04:57.639

classes are referred to as subclasses so



124

00:04:57.639 --> 00:05:00.280

crow is a subclass of bird which makes



125

00:05:00.280 --> 00:05:04.110

bird a superclass of crow



126

00:05:04.110 --> 00:05:06.510

you know the idea of sub classing can be



127

00:05:06.510 --> 00:05:09.090

taken further so you can add subclasses



128

00:05:09.090 --> 00:05:14.600

of birds such as flying bird in flight less bird



129

00:05:14.600 --> 00:05:17.340

now equal is a subclass a flying bird



130

00:05:17.340 --> 00:05:20.070

and ostrich is a subclass of flightless



131

00:05:20.070 --> 00:05:23.250

bird in our example eagle's crows and



132

00:05:23.250 --> 00:05:26.370

goals inherit the ability to fly from



133

00:05:26.370 --> 00:05:29.310

the flying bird superclass ostriches and



134

00:05:29.310 --> 00:05:31.650

penguins aren't inheriting anything from



135

00:05:31.650 --> 00:05:33.360

their flightless bird superclass in this



136

00:05:33.360 --> 00:05:35.550

example but they still inherit their



137

00:05:35.550 --> 00:05:38.060

beaks and wings from the bird superclass



138

00:05:38.060 --> 00:05:40.680

nil ostriches have a run method and



139

00:05:40.680 --> 00:05:43.350

penguins have a swim method so a class



140

00:05:43.350 --> 00:05:45.030

can introduce other properties and



141

00:05:45.030 --> 00:05:47.220

methods in addition to the ones in



142

00:05:47.220 --> 00:05:49.230

inherits now a class can have more than



143

00:05:49.230 --> 00:05:53.990

one superclass in a hierarchy like in the slide



144

00:05:53.990 --> 00:05:56.630

now flowing bird is a subclass of bird



145

00:05:56.630 --> 00:05:59.360

and eagle is a subclass of flying bird



146

00:05:59.360 --> 00:06:01.910

so it's also a subclass of bird because



147

00:06:01.910 --> 00:06:04.070

its immediate superclass flowing bird is



148

00:06:04.070 --> 00:06:07.520

a subclass of bird so just the labor the



149

00:06:07.520 --> 00:06:10.220

point one more time flying bird is a



150

00:06:10.220 --> 00:06:13.220

superclass of the three classes Eagle



151

00:06:13.220 --> 00:06:19.139

crow and goal and it's also a subclass of bird



152

00:06:19.139 --> 00:06:21.310

now at this point you might be asking



153

00:06:21.310 --> 00:06:22.960

well you know would bother to go to this



154

00:06:22.960 --> 00:06:25.840

level of complexity well firstly it



155

00:06:25.840 --> 00:06:27.850

allows you to write code once and then



156

00:06:27.850 --> 00:06:29.680

for it to be used automatically by other



157

00:06:29.680 --> 00:06:32.770

classes so if we created an eagle object



158

00:06:32.770 --> 00:06:35.169

it will automatically get to beacon



159

00:06:35.169 --> 00:06:37.240

wings properties together with any other



160

00:06:37.240 --> 00:06:39.010

properties and functions that would



161

00:06:39.010 --> 00:06:41.380

create it in the bird class without us



162

00:06:41.380 --> 00:06:42.970

having to write any code in the Eagle



163

00:06:42.970 --> 00:06:45.669

class so this so really leaves you to



164

00:06:45.669 --> 00:06:47.530

define the unique characteristics of a



165

00:06:47.530 --> 00:06:49.900

class rather than having to reinvent the



166

00:06:49.900 --> 00:06:52.590

wheel each time you create a new class



167

00:06:52.590 --> 00:06:54.970

now you can write that common code once



168

00:06:54.970 --> 00:06:57.610

put that code in the superclass and then



169

00:06:57.610 --> 00:06:59.940

any class that extends or inherits from



170

00:06:59.940 --> 00:07:02.470

there the same thing effectively that



171

00:07:02.470 --> 00:07:04.389

superclass is going to get the



172

00:07:04.389 --> 00:07:06.460

properties and methods that are defined



173

00:07:06.460 --> 00:07:09.190

in the superclass alright a lot of



174

00:07:09.190 --> 00:07:10.479

theory there so let's go write a bit of



175

00:07:10.479 --> 00:07:12.070

common code so this makes more sense



176

00:07:12.070 --> 00:07:14.740

what I'm going to do is by starting out



177

00:07:14.740 --> 00:07:16.900

is I'm going to delete the main function



178

00:07:16.900 --> 00:07:18.810

so that we've just got the definition



179

00:07:18.810 --> 00:07:20.949

like you can see on the screen here so



180

00:07:20.949 --> 00:07:24.250

I'm about to do okay I'm gonna close



181

00:07:24.250 --> 00:07:26.020

down the run window for now and we're



182

00:07:26.020 --> 00:07:27.070

obviously gonna be using this now for



183

00:07:27.070 --> 00:07:30.160

our examples now we're going to create a



184

00:07:30.160 --> 00:07:32.440

super class called enemy which will be



185

00:07:32.440 --> 00:07:34.450

the base class for all the things our



186

00:07:34.450 --> 00:07:36.460

players will have to fight in this



187

00:07:36.460 --> 00:07:38.139

fictional game so I'm going to do this



188

00:07:38.139 --> 00:07:40.090

we've done before right-click the Java



189

00:07:40.090 --> 00:07:43.360

folder on you select a Kotlin file class



190

00:07:43.360 --> 00:07:48.760

and enter enemy it's the name press



191

00:07:48.760 --> 00:07:50.770

ENTER there now we're going to store the



192

00:07:50.770 --> 00:07:52.300

hit points and also the number of lives



193

00:07:52.300 --> 00:07:54.520

so we need to create properties for



194

00:07:54.520 --> 00:07:56.680

those in the primary constructor and we



195

00:07:56.680 --> 00:07:58.060

should also give the enemy a name so



196

00:07:58.060 --> 00:07:59.970

let's go ahead and do that so class



197

00:07:59.970 --> 00:08:08.800

enemy parentheses val val name colon



198

00:08:08.800 --> 00:08:15.510

string then VAR hit points call an int



199

00:08:15.510 --> 00:08:23.550

comma and var lives and then have int.



200

00:08:23.550 --> 00:08:28.780

Okay, so this is a super class and any



201

00:08:28.780 --> 00:08:30.910

class that extends this enemy class or



202

00:08:30.910 --> 00:08:32.950

inherits on this class because it means



203

00:08:32.950 --> 00:08:35.440

the same thing should always have name



204

00:08:35.440 --> 00:08:38.590

hit points and lives properties and in a



205

00:08:38.590 --> 00:08:40.000

game scenario that's probably quite



206

00:08:40.000 --> 00:08:41.950

reasonable to assume that it's got those



207

00:08:41.950 --> 00:08:45.040

properties now by default Kotlin classes



208

00:08:45.040 --> 00:08:47.260

can't be extended now if you're used to



209

00:08:47.260 --> 00:08:49.450

Java it's as though we've marked the



210

00:08:49.450 --> 00:08:51.970

class final now if you're not used to



211

00:08:51.970 --> 00:08:54.160

Java what that means is that we can't



212

00:08:54.160 --> 00:08:56.740

inherit from enemy unless we mark it as



213

00:08:56.740 --> 00:08:59.620

open and as we've declared it here enemy



214

00:08:59.620 --> 00:09:02.590

can't be used as a superclass now the



215

00:09:02.590 --> 00:09:04.630

idea is that code will be more robust



216

00:09:04.630 --> 00:09:06.430

if we don't automatically allow classes



217

00:09:06.430 --> 00:09:08.800

to be extended if you do want to allow



218

00:09:08.800 --> 00:09:10.690

it as we do here then you have to



219

00:09:10.690 --> 00:09:13.210

explicitly tell Kotlin that the class



220

00:09:13.210 --> 00:09:15.490

can be extended now that's easily done



221

00:09:15.490 --> 00:09:17.620

we just have a keyword open to our



222

00:09:17.620 --> 00:09:19.060

declaration of enemy so we just come



223

00:09:19.060 --> 00:09:22.660

back to the start the type open and now



224

00:09:22.660 --> 00:09:24.520

we can use the enemy as a base class for



225

00:09:24.520 --> 00:09:26.920

our real enemy types if you're not sure



226

00:09:26.920 --> 00:09:29.050

why enemies declared as Val but the



227

00:09:29.050 --> 00:09:31.540

other two properties are var then review



228

00:09:31.540 --> 00:09:34.180

the earlier videos in this section so



229

00:09:34.180 --> 00:09:35.230

I'm going to create a function here



230

00:09:35.230 --> 00:09:37.360

we're going to call it take damage we're



231

00:09:37.360 --> 00:09:38.860

going to call this method if the enemy



232

00:09:38.860 --> 00:09:40.690

is taking some damage if it's been hit



233

00:09:40.690 --> 00:09:43.210

by something so we need to deduct the



234

00:09:43.210 --> 00:09:44.710

damage from the number of hit points in



235

00:09:44.710 --> 00:09:46.690

that scenario so let's go down and write



236

00:09:46.690 --> 00:09:51.570

that function so I'd be fun take damage



237

00:09:51.570 --> 00:09:55.470

and in parentheses damage :



238

00:09:55.470 --> 00:09:59.970

we an int and we'll start by typing Val



239

00:09:59.970 --> 00:10:06.190

remaining hit points is equal to hit



240

00:10:06.190 --> 00:10:11.170

points take damage then we're going to



241

00:10:11.170 --> 00:10:13.810

do if remaining hit points is greater



242

00:10:13.810 --> 00:10:17.590

than zero open up a code block I'm going



243

00:10:17.590 --> 00:10:21.100

to do hit points equals remaining hit



244

00:10:21.100 --> 00:10:23.380

points and we'll print a message to



245

00:10:23.380 --> 00:10:25.900

print length parenthesis double quotes



246

00:10:25.900 --> 00:10:30.790

dollar name talk dollar damage



247

00:10:30.790 --> 00:10:37.329

points of damage and has dollar hit



248

00:10:37.329 --> 00:10:42.959

points left and then the next line else



249

00:10:42.959 --> 00:10:48.339

and a pineco block lives miners equal



250

00:10:48.339 --> 00:10:53.440

one and print 'ln dollar name lost a



251

00:10:53.440 --> 00:10:57.459

life so what we're doing here is we're



252

00:10:57.459 --> 00:11:00.610

subtracting the damage from the number



253

00:11:00.610 --> 00:11:02.320

of hit points that the enemy has then



254

00:11:02.320 --> 00:11:03.790

checking to see if they've still got any



255

00:11:03.790 --> 00:11:06.760

left after that damage is inflicted now



256

00:11:06.760 --> 00:11:08.230

if the number of remaining is more than



257

00:11:08.230 --> 00:11:10.899

zero we update their hit points and then



258

00:11:10.899 --> 00:11:12.130

print out a message showing how much



259

00:11:12.130 --> 00:11:14.050

damage was taken and also how many hit



260

00:11:14.050 --> 00:11:16.360

points are still left but if their hit



261

00:11:16.360 --> 00:11:18.010

points have dropped to zero or below



262

00:11:18.010 --> 00:11:20.680

then we take off a life instead now I



263

00:11:20.680 --> 00:11:21.850

don't think we've seen this form of



264

00:11:21.850 --> 00:11:24.070

assignment yet lives miners equals one



265

00:11:24.070 --> 00:11:26.440

as you can see on line 13 that's just a



266

00:11:26.440 --> 00:11:31.209

shorthand way of writing lives equals



267

00:11:31.209 --> 00:11:34.269

lives take one so this form is called



268

00:11:34.269 --> 00:11:36.670

augmented assignment and you can use the



269

00:11:36.670 --> 00:11:39.339

shorthand with the five arithmetic



270

00:11:39.339 --> 00:11:40.930

operators and what I'm going to do is



271

00:11:40.930 --> 00:11:42.850

delete that what I will do is I'm going



272

00:11:42.850 --> 00:11:45.699

to paste in some code here comment it



273

00:11:45.699 --> 00:11:48.220

out I'm gonna paste this right down at



274

00:11:48.220 --> 00:11:49.630

the end of the file showing examples of



275

00:11:49.630 --> 00:11:50.980

the operators and the equivalent



276

00:11:50.980 --> 00:11:55.149

shorthand version like so and you can



277

00:11:55.149 --> 00:11:56.949

see the version on the left and the



278

00:11:56.949 --> 00:11:58.510

shorthand version on the right so again



279

00:11:58.510 --> 00:12:00.430

that form is called augmented assignment



280

00:12:00.430 --> 00:12:02.230

so those examples show you how you can



281

00:12:02.230 --> 00:12:04.600

use augmented assignment operators when



282

00:12:04.600 --> 00:12:05.920

you're modifying the value of something



283

00:12:05.920 --> 00:12:09.220

and assigning the result back to the



284

00:12:09.220 --> 00:12:12.100

original variable and I've removed that



285

00:12:12.100 --> 00:12:13.300

line of code so make sure if you're



286

00:12:13.300 --> 00:12:14.470

typing along you have done that that



287

00:12:14.470 --> 00:12:16.510

second line otherwise would be taking



288

00:12:16.510 --> 00:12:17.889

two loves away from the enemies which



289

00:12:17.889 --> 00:12:20.139

would be cheating a little bit alright



290

00:12:20.139 --> 00:12:21.610

so we should probably at this point



291

00:12:21.610 --> 00:12:23.680

check to see if the enemy's got any



292

00:12:23.680 --> 00:12:24.370

lives left



293

00:12:24.370 --> 00:12:26.110

but we're demonstrating concepts here in



294

00:12:26.110 --> 00:12:28.480

not creating a full adventure game now



295

00:12:28.480 --> 00:12:29.889

that could be useful exercise for you to



296

00:12:29.889 --> 00:12:32.589

try out for yourself though to make sure



297

00:12:32.589 --> 00:12:33.670

that you understood what we've covered



298

00:12:33.670 --> 00:12:36.610

in this tutorial so we basically got a



299

00:12:36.610 --> 00:12:39.640

basic class here restoring the name hit



300

00:12:39.640 --> 00:12:42.040

point and lives. So let's end the video



301

00:12:42.040 --> 00:12:44.560

here, in the next video we start out by over



302

00:12:44.560 --> 00:12:46.510

riding the two string function and then



303

00:12:46.510 --> 00:12:47.770

we'll move on to creating some other



304

00:12:47.770 --> 00:12:51.840

classes, so see you in the next video.



