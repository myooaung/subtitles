WEBVTT
1

00:00:05.070 --> 00:00:10.080

As que mencion en el ltimo video que el marco de bsqueda no nos busca.



2

00:00:10.170 --> 00:00:11.770

Tenemos que escribir el cdigo para hacer eso.



3

00:00:11.940 --> 00:00:17.370

Ahora, una forma comn para que funcione es que el usuario responde los criterios de bsqueda y, cuando



4

00:00:17.370 --> 00:00:22.280

enva la consulta, el marco de bsqueda inicia otra actividad para hacer frente a la bsqueda.



5

00:00:22.560 --> 00:00:25.910

Y es por eso que tuvimos que configurar el filtro de intencin en el manifiesto.



6

00:00:26.100 --> 00:00:28.430

Pero vamos a hacer las cosas de forma ligeramente diferente.



7

00:00:28.680 --> 00:00:35.640

Entonces, aqu, la misma actividad que contiene el filtro de intencin es la que muestra el widget SearchView.



8

00:00:35.640 --> 00:00:41.310

Este es un ejemplo bastante simple de cmo agregar una bsqueda a una aplicacin, y todo lo que tenemos que hacer



9

00:00:41.310 --> 00:00:46.410

aqu es pasar los trminos de bsqueda a nuestra actividad principal, para que pueda filtrar las fotos de Flickr.



10

00:00:46.620 --> 00:00:51.630

Entonces, veamos qu sucede cuando busco algo y envo la consulta. As que solo voy a volver a nuestro emulador,



11

00:00:51.630 --> 00:00:52.840

que se est ejecutando.



12

00:00:53.120 --> 00:00:55.590

Entonces vamos a nuestra bsqueda.



13

00:00:55.670 --> 00:01:03.490

Entonces, qu sucede realmente cuando intento buscar algo, as que buscar Oreo y presionar Enter.



14

00:01:03.590 --> 00:01:08.150

Bsicamente no importa en esta etapa porque no hemos escrito el cdigo para manejarlo, pero nada



15

00:01:08.150 --> 00:01:08.910

parece haber sucedido.



16

00:01:09.140 --> 00:01:10.620

Pero si echamos un



17

00:01:14.260 --> 00:01:21.470

vistazo al log cat, podemos ver aqu, SearchActivity, as que onCreateOptionsMenu y onCreate starts, y se los llama



18

00:01:21.470 --> 00:01:24.200

nuevamente porque en realidad se llamaron anteriormente.



19

00:01:24.200 --> 00:01:28.450

As que, bsicamente, se llaman, una vez que presionamos Enter there to submit to search.



20

00:01:28.700 --> 00:01:34.670

En otras palabras, cuando enviamos la bsqueda, el marco de bsqueda de Android busca en el manifiesto una actividad que



21

00:01:35.000 --> 00:01:41.030

tenga el filtro de intencin de bsqueda de puntos de accin y lance esa actividad, que en este caso es nuestra



22

00:01:41.030 --> 00:01:41.960

Actividad de bsqueda.



23

00:01:41.960 --> 00:01:47.690

Ahora, como dije, un enfoque comn es tener el widget SearchView en una actividad, decir MainActivity,



24

00:01:47.690 --> 00:01:51.430

y hacer que inicie otra actividad para realizar la bsqueda real.



25

00:01:51.740 --> 00:01:56.810

Pero el enfoque que vamos a usar aqu es responder a los eventos de devolucin de



26

00:01:57.050 --> 00:02:02.540

llamada del widget SearchView, recuperar los trminos de bsqueda que ingresa nuestro usuario y luego pasarlos a MainActivity.



27

00:02:02.540 --> 00:02:07.820

Ahora no vamos a usar el filtro de intencin en el manifiesto, pero an tenemos que incluirlo, porque



28

00:02:07.820 --> 00:02:12.440

el administrador de bsqueda lo necesita para obtener la informacin de bsqueda de la actividad.



29

00:02:12.710 --> 00:02:18.770

Entonces, lo que haremos en su lugar, es responder a los eventos generados por el widget SearchView para



30

00:02:18.770 --> 00:02:22.970

manejar la consulta de bsqueda del usuario, y eso evitar este comportamiento indeseable.



31

00:02:23.180 --> 00:02:28.120

Estamos enviando una bsqueda recin iniciada, una actividad de bsqueda nuevamente como usted vio. De acuerdo, as que la documentacin



32

00:02:28.130 --> 00:02:30.100

de nuevo. Vamos a ver algo de documentacin.



33

00:02:34.750 --> 00:02:40.510

Echemos un vistazo a los eventos a los que SearchView nos permite responder, y de inmediato puede



34

00:02:40.510 --> 00:02:45.970

ver que el resumen es bastante til aqu. Al desplazarse hacia abajo, puede ver



35

00:02:45.970 --> 00:02:48.160

que hay un OnCloseListener y



36

00:02:48.160 --> 00:02:50.140

un OnQueryTextListener tambin. Ahora ambos suenan prometedores, as



37

00:02:50.140 --> 00:02:52.350

que voy a seguir los enlaces para ver cmo usarlos.



38

00:02:52.350 --> 00:02:53.710

Echemos un vistazo a



39

00:02:56.500 --> 00:03:01.080

onCloseListener, y puede ver que onCloseListener define una sola funcin, onClose, que se invoca



40

00:03:01.270 --> 00:03:03.330

cuando el usuario cierra un SearchView.



41

00:03:03.940 --> 00:03:10.560

Ahora si anulamos eso, debemos devolverlo como falso, para mantener el comportamiento predeterminado de borrar el campo de texto y



42

00:03:10.580 --> 00:03:11.390

descartarlo, cerrando el



43

00:03:11.560 --> 00:03:13.510

SearchView hacia abajo en otras palabras.



44

00:03:13.850 --> 00:03:17.980

De acuerdo, parece una forma de tratar con el usuario cancelando la bsqueda, as que



45

00:03:18.090 --> 00:03:19.900

regresemos y sigamos el otro enlace.



46

00:03:23.250 --> 00:03:30.690

As que busque OnQueryTextListener, y puede ver que OnQueryTextListener



47

00:03:30.690 --> 00:03:35.770

define dos funciones. Podemos monitorear cada cambio que el usuario realiza en el



48

00:03:35.880 --> 00:03:40.590

texto de la consulta a medida que se escribe, pero para nuestro propsito, la funcin onQueryTextSubmit suena ms til.



49

00:03:40.660 --> 00:03:46.140

Ahora, si proporcionamos una funcin onQueryTextSubmit anulada, se invoca cuando el usuario enva una consulta



50

00:03:46.140 --> 00:03:51.420

para que la aplicacin realice una bsqueda. Y desplazndose hacia abajo mirando otra informacin, bsicamente



51

00:03:51.420 --> 00:03:57.210

las descripciones ms detalladas de esta funcin, esta onQueryTextSubmit. Podemos ver que va a volverse verdadero,



52

00:03:57.210 --> 00:03:59.450

aqu abajo, si vamos a manejar



53

00:03:59.680 --> 00:04:05.220

la consulta, lo que vamos a hacer. Ahora, debido a que esta es una



54

00:04:05.220 --> 00:04:07.040

interfaz, debemos implementar ambas funciones.



55

00:04:07.100 --> 00:04:12.900

Por lo tanto, para la funcin onQueryTextchange, solo devolveremos el valor falso para permitir que se use el comportamiento predeterminado



56

00:04:12.900 --> 00:04:15.970

o que los usuarios escriban en el cuadro de bsqueda.



57

00:04:16.300 --> 00:04:17.610

Volvamos a



58

00:04:20.280 --> 00:04:27.720

Android Studio, cierre el log cat. Ahora voy a eliminar parte de este registro en la funcin onCreateOptionsMenu y configurar los



59

00:04:27.720 --> 00:04:30.530

oyentes para los eventos de SearchView a los que debemos responder.



60

00:04:30.720 --> 00:04:34.180

Y esto es exactamente lo mismo que los otros oyentes que hemos implementado, al hacer



61

00:04:34.350 --> 00:04:39.000

cosas como verificar que se haga clic en un botn. Podramos conseguir que nuestra clase de actividad



62

00:04:39.030 --> 00:04:42.970

de bsqueda implemente ambas interfaces y simplemente agregue la funcin a la clase.



63

00:04:43.080 --> 00:04:44.490

Ahora tomamos ese enfoque antes,



64

00:04:44.490 --> 00:04:50.250

as que para mezclar las cosas, voy a implementar las dos interfaces usando clases annimas, como lo hicimos con el botn



65

00:04:50.250 --> 00:04:53.390

de negar en el desafo de la aplicacin de la calculadora.



66

00:04:53.430 --> 00:04:54.340

As que



67

00:04:54.340 --> 00:05:01.690

comentar primero las entradas de registro, estas tres aqu, luego despus de esta lnea, la lnea isIconified.



68

00:05:02.370 --> 00:05:06.820

Vamos y hagamos eso. As que vamos



69

00:05:09.120 --> 00:05:11.070

a hacer searchView,



70

00:05:11.280 --> 00:05:24.630

question mark dot, y va a ser setOnQueryTextListener, y va a ser un objeto de dos puntos. SearchView



71

00:05:24.630 --> 00:05:29.320

dot OnQueryText Listener. luego agregaremos un bloque de cdigo.



72

00:05:29.320 --> 00:05:34.540

As que vamos a llamar a la funcin setOnQueryTextListener y pasar una



73

00:05:34.540 --> 00:05:37.290

clase annima que implementa la interfaz OnQueryTextListener.



74

00:05:37.390 --> 00:05:42.680

De nuevo, al igual que lo hicimos al configurar onClickListener para el botn de negar en el desafo de la calculadora.



75

00:05:42.910 --> 00:05:47.680

Por lo tanto, este es un patrn estndar cuando se implementa oyentes y el ms comn



76

00:05:47.680 --> 00:05:51.060

para usar cuando se desea aplicar el oyente a un solo objeto.



77

00:05:51.370 --> 00:05:55.590

Bien, entonces hemos agregado esa llamada, la de establecer OQQueryTextListener a esa funcin.



78

00:05:55.710 --> 00:05:59.150

As que obtengamos Android Studio para generar los stubs usando el control i, asegurndonos



79

00:05:59.330 --> 00:06:05.790

de que mi cursor est dentro del bloque de cdigo, y la razn por la que recibimos este error es que estoy controlando i y no



80

00:06:05.800 --> 00:06:06.340

est funcionando.



81

00:06:06.330 --> 00:06:11.100

El motivo es que no he cerrado esto correctamente, as que tenemos un



82

00:06:11.170 --> 00:06:16.600

parntesis aqu abriendo y debera haber agregado los parntesis de cierre, cerrando parntesis all.



83

00:06:16.600 --> 00:06:21.490

Ms bien, lo que debera hacer es cerrar la etiqueta de parntesis all, como tal, y una vez



84

00:06:21.550 --> 00:06:26.110

que lo hagamos, deberamos encontrar que el control funciona, y se puede ver que ha funcionado.



85

00:06:26.150 --> 00:06:31.160

As que de nuevo hice eso para que Android Studio genere los resguardos. Seleccionar ambos y har clic en OK.



86

00:06:31.660 --> 00:06:36.610

Entonces, como mencion, no vamos a hacer nada en la funcin onQueryTextchange, as que podemos dejar



87

00:06:36.610 --> 00:06:37.680

que sea falso.



88

00:06:37.840 --> 00:06:39.970

Vamos y hagamos eso.



89

00:06:39.970 --> 00:06:46.130

As que me deshar del TODO y luego devolveremos el falso, porque no estamos lidiando con eso.



90

00:06:46.690 --> 00:06:52.240

Pero el que s queremos trabajar es este onQueryTextSubmit, que solo se devuelve cuando



91

00:06:52.240 --> 00:06:54.350

el usuario enva la bsqueda.



92

00:06:54.490 --> 00:07:03.480

As que agregaremos algunos registros primero, as que Log. d parntesis TAG comas comillas dobles



93

00:07:03.500 --> 00:07:07.350

dot onQueryText submit colon called.



94

00:07:09.160 --> 00:07:13.420

Entonces, el nico otro tipo que pondr all aparte del registro, es una llamada a la funcin de finalizacin



95

00:07:13.420 --> 00:07:14.140

de la actividad.



96

00:07:14.280 --> 00:07:20.440

Ahora finaliza el cierre de la actividad y vuelve a la actividad que la lanz. En nuestro caso, eso es MainActivity, as que



97

00:07:20.590 --> 00:07:24.140

podemos terminar parntesis para llamar a esa funcin, y luego



98

00:07:24.210 --> 00:07:26.930

vamos a volver verdadero. Se deshace de ese otro error.



99

00:07:27.280 --> 00:07:30.540

Ahora va a ser til verificar lo que sucede en MainActivity tambin.



100

00:07:30.730 --> 00:07:35.620

Regresemos a MainActivity, anulemos su funcin de reanudacin y agreguemos algunos registros all tambin.



101

00:07:35.800 --> 00:07:38.020

As que MainActivity, baje



102

00:07:41.070 --> 00:07:47.250

al final, ordene o y desee onResume, que es este aqu, onResume.



103

00:07:48.260 --> 00:07:51.360

Y lo que queremos hacer es dejar la sper llamada all por ahora y simplemente agregar un poco de registro.



104

00:07:51.360 --> 00:08:02.700

Entonces log. d parntesis TAG coma comillas dobles punto al inicio de la respuesta. Bien, ahora que lo hemos hecho, veamos cmo se



105

00:08:02.700 --> 00:08:05.900

comporta esto cuando enviemos una consulta de bsqueda.



106

00:08:06.330 --> 00:08:07.380

As que voy a ejecutar la aplicacin nuevamente.



107

00:08:10.460 --> 00:08:13.520

OK, tambin voy a abrir log cat, y volvamos y echemos un vistazo a



108

00:08:13.680 --> 00:08:19.120

nuestra aplicacin, y lo que queremos hacer es buscar algo de texto. Voy a hacer clic en este



109

00:08:19.120 --> 00:08:26.460

cono de bsqueda, voy a ingresar texto, marshmallow. Ahora, si presiona Intro aqu, ver que no obtendr la funcionalidad adecuada,



110

00:08:26.460 --> 00:08:31.830

y eso es porque normalmente cuando est usando un dispositivo real, ha venido aqu y ha hecho



111

00:08:32.130 --> 00:08:34.630

clic en este botn. As que voy a tocar



112

00:08:35.050 --> 00:08:35.610

esta flecha



113

00:08:35.700 --> 00:08:37.400

hacia la derecha en el teclado de abajo.



114

00:08:38.310 --> 00:08:40.970

Y puedes ver que hemos vuelto a la actividad principal.



115

00:08:40.980 --> 00:08:47.210

Ahora sigue mostrando estas fotos de Oreo, porque todava no hemos superado los resultados de la consulta, pero el log



116

00:08:47.250 --> 00:08:49.220

cat es y debera ser interesante.



117

00:08:49.270 --> 00:08:53.250

As que voy a retroceder a la parte superior, llegando a la cima all.



118

00:08:53.470 --> 00:08:59.460

Y si vienes y miras un poco aqu, puedes ver que tenemos SearchActivity onCreate y onOptions



119

00:08:59.460 --> 00:09:02.640

ItemSelected, ambos son llamados. Yendo un poco



120

00:09:02.640 --> 00:09:10.330

ms all, tenemos onCreateOptionsMenu comenzando y cerrando. Pero un poco ms abajo tenemos nuestro onQueryTextSubmit llamado, y cuando



121

00:09:10.330 --> 00:09:15.730

eso finaliza y vuelve, al desplazarse un poco ms hacia abajo puede ver MainActivity onResume



122

00:09:15.730 --> 00:09:17.330

tambin se ha iniciado.



123

00:09:17.770 --> 00:09:22.020

Entonces eso es bastante interesante. El flujo a travs de nuestro programa es exactamente lo que queremos.



124

00:09:22.300 --> 00:09:28.180

Entonces, todo lo que tenemos que hacer ahora antes de que termine la actividad de bsqueda es almacenar el texto de la consulta en algn lugar



125

00:09:28.180 --> 00:09:29.890

de donde la actividad principal pueda recuperarlo.



126

00:09:30.010 --> 00:09:31.960

As que vamos a trabajar en eso en el prximo video.



