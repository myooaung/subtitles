1
00:00:05,270 --> 00:00:08,940
In the previous video you can add code writing data to the database.

2
00:00:08,940 --> 00:00:12,280
Next we're going to look at how to get the data back again to do that.

3
00:00:12,300 --> 00:00:18,180
We're going to use a cursor in database terms a curse allows us to access individual records in the

4
00:00:18,180 --> 00:00:19,260
database.

5
00:00:19,260 --> 00:00:25,150
We can move backwards and forwards in the cursor and it takes care of retrieving the rows for us want

6
00:00:25,430 --> 00:00:27,550
to position the cursor at a particular row.

7
00:00:27,720 --> 00:00:32,640
We can then use it to rate the individual columns all fields of data.

8
00:00:32,640 --> 00:00:33,870
Now you often use a curse.

9
00:00:33,930 --> 00:00:39,000
Even if you only expect to get a single row back from a query you don't have to worry about how many

10
00:00:39,000 --> 00:00:45,240
rows will be retrieved they're all accessed via the database cursor you turn based query could return

11
00:00:45,240 --> 00:00:51,060
thousands of rows and that could be a problem because smart phones have limited amounts of memory all

12
00:00:51,060 --> 00:00:55,050
that data possibly wouldn't fit in the memory with code available.

13
00:00:55,050 --> 00:00:59,620
But of course it takes care of this and points to just a single row at a time.

14
00:00:59,820 --> 00:01:03,880
So you can access and manipulate the data without having to light it all into memory.

15
00:01:04,220 --> 00:01:09,600
And this avoids the performance issues of having to retrain thousands of records into memory a cursor

16
00:01:09,600 --> 00:01:14,370
and I was asked to manipulate the data but I only retrieved at one record at a time.

17
00:01:14,370 --> 00:01:16,700
As you say when we start writing code.

18
00:01:17,070 --> 00:01:20,270
So Android comes with a cursor clasp brought in so we can use that.

19
00:01:20,280 --> 00:01:21,440
So let's get that to go now.

20
00:01:21,680 --> 00:01:25,010
What I'm going to do is come down here after al.

21
00:01:25,020 --> 00:01:29,970
Last time we had it which was the Vout generated all day from the database and so it went on to talk

22
00:01:30,570 --> 00:01:40,120
query is equal to database wrong query in parentheses and double quotes.

23
00:01:40,230 --> 00:01:45,390
Select staw from contex.

24
00:01:45,780 --> 00:01:53,990
Then the second argument required to pass NULL to through a query method returns a Kassa the first parameters

25
00:01:54,020 --> 00:01:59,740
the query that we want to use to retrieve to Tida and offset the second argument to now.

26
00:01:59,750 --> 00:02:03,230
Now if you want to know what the second argument is let's have a look at the documentation

27
00:02:06,180 --> 00:02:09,580
and you can say that that second argument is the selection OGs.

28
00:02:09,860 --> 00:02:16,910
This provides values that we can include in a WHERE clause to ask know query or into his query and we'll

29
00:02:16,910 --> 00:02:18,550
have a look at that a little bit later.

30
00:02:18,590 --> 00:02:21,750
Now if I said that to no balls why with these windows.

31
00:02:22,370 --> 00:02:27,440
These are documentation of Windows that I think contain more text and will fit in them and they always

32
00:02:27,440 --> 00:02:32,070
seem to start up the same size when you first type one regardless of the contents.

33
00:02:32,090 --> 00:02:36,500
So make sure you either resource them or scroll down so that you get to see all the information.

34
00:02:36,590 --> 00:02:40,050
In this case the information didn't require me to scroll.

35
00:02:40,390 --> 00:02:45,660
And by the by we can also say that we have looked look at the return information for all query.

36
00:02:45,770 --> 00:02:50,090
We can see that it's a curse or object positioned before the first record.

37
00:02:50,340 --> 00:02:53,390
That tells us hey that's position before the first entry.

38
00:02:53,690 --> 00:02:58,970
How the thing tonight there is a sequence screen string must not be semi-colon terminated as you would

39
00:02:58,970 --> 00:03:02,420
normally do when you're recreating Siku source card.

40
00:03:02,420 --> 00:03:06,710
What you done earlier in this and this section of the course when using a sequel like three commands

41
00:03:06,710 --> 00:03:08,820
on a program.

42
00:03:09,160 --> 00:03:15,920
So that's wrong query is also a query method as well with several query methods to be precise and they

43
00:03:15,920 --> 00:03:20,800
allow you to specify order by clauses as well as more filtering and grouping.

44
00:03:21,170 --> 00:03:25,250
And it's definitely worth checking those methods out when you come to write your own apps.

45
00:03:25,310 --> 00:03:30,570
We're going to be using something similar lighter and you'll understand what the various arguments are.

46
00:03:30,590 --> 00:03:35,230
Once we've done that but I'm using ral queering here just to keep things simple.

47
00:03:35,420 --> 00:03:40,700
My Actually if I hover over that you notice that we've got this warning from intrench Judaea that this

48
00:03:40,700 --> 00:03:45,960
cursor should be freed up after use with close hash Klores.

49
00:03:45,980 --> 00:03:50,780
Now if you're familiar with Java you'd probably use a try with resources to achieve that.

50
00:03:50,780 --> 00:03:56,180
More importantly if you're converting Java card that uses try with resources you might struggle to do

51
00:03:56,180 --> 00:03:57,190
that in Scotland.

52
00:03:57,470 --> 00:04:02,450
That's because cotland doesn't use the same syntax is Java and there isn't actually a try with resources

53
00:04:02,450 --> 00:04:04,480
syntax as such in Codlin.

54
00:04:04,700 --> 00:04:09,280
Instead Cottenham provides a use function to achieve the same thing.

55
00:04:09,320 --> 00:04:12,430
So let's just top of it and then we'll check up the documentation.

56
00:04:12,560 --> 00:04:15,400
So it's a query not yours.

57
00:04:16,400 --> 00:04:18,800
Notice that it's adding a card block after that.

58
00:04:18,830 --> 00:04:25,970
Have a look at the documentation but yours basically executes the given block function on this resource

59
00:04:26,330 --> 00:04:29,040
and then closes it down correctly.

60
00:04:29,060 --> 00:04:33,210
So in this case it will close the cursor whether or not an exception is thrown.

61
00:04:33,590 --> 00:04:40,520
So you can use the use function with any close object in the same way that job will last try with resources

62
00:04:40,520 --> 00:04:43,810
to be used with any closetful object.

63
00:04:43,870 --> 00:04:45,010
It's not hard now.

64
00:04:46,190 --> 00:04:51,000
I need to put all the code to do with how Kaisa inside that block.

65
00:04:51,040 --> 00:04:57,440
Now inside the car block that vanity we refer to the object that was called on it as it and he can say

66
00:04:57,440 --> 00:04:59,720
that I intended to hopefully tells us that as well.

67
00:04:59,840 --> 00:05:00,790
Calling cursor.

68
00:05:01,090 --> 00:05:05,370
It's adding that for us as a reminder of what you need to do.

69
00:05:06,060 --> 00:05:07,940
So to run the card is something like.

70
00:05:07,970 --> 00:05:15,140
If this is in the code block parentheses artfully move to first.

71
00:05:15,230 --> 00:05:20,480
So again the reason that we're using it and we're not using that query here is that we're referring

72
00:05:20,480 --> 00:05:22,040
to the object that it was cold on.

73
00:05:22,040 --> 00:05:25,900
I see it and that's why we've kept it up move to first here rather than query.

74
00:05:25,930 --> 00:05:27,110
Don't move to first.

75
00:05:27,390 --> 00:05:31,490
Queries a cursor and we're telling it to move to the first record.

76
00:05:31,550 --> 00:05:37,220
It's actually quite possible that a sequel query didn't return any records in which case the move to

77
00:05:37,220 --> 00:05:39,260
first method would return false.

78
00:05:39,350 --> 00:05:44,880
So that's why we're checking that it did manage to move to the first record before we do any more processing.

79
00:05:44,880 --> 00:05:47,150
And just to confirm that you want to check that.

80
00:05:47,180 --> 00:05:50,550
Have a look at the documentation for move to first.

81
00:05:50,980 --> 00:05:56,030
It tells us specifically that this method will return false if the cursor is empty.

82
00:05:56,330 --> 00:06:01,130
OK so if it returns true and the cursor is positioned at the first record and we can stop reading the

83
00:06:01,130 --> 00:06:01,740
Deiter.

84
00:06:01,940 --> 00:06:03,920
So let's put some code in that code block.

85
00:06:04,160 --> 00:06:07,700
Knowing that at this point we guarantee to have at least one record.

86
00:06:07,740 --> 00:06:10,010
I'm going to comment here that we are soft with all the records

87
00:06:17,910 --> 00:06:22,800
with parentheses query and part of what we are talking through all records I'm about to do a little

88
00:06:22,800 --> 00:06:33,420
bit light but for now I'm going to query a single record using with query with in the query book vow.

89
00:06:33,580 --> 00:06:45,190
Hi Dave you was get long parentheses around that when I get string parentheses one Vau find equals get

90
00:06:45,190 --> 00:06:49,550
it to and Val came out.

91
00:06:49,720 --> 00:06:54,930
It was a string theory so good when I saw Queen through all the records yet.

92
00:06:54,930 --> 00:06:55,800
Were going to do that in a minute.

93
00:06:55,800 --> 00:06:56,970
Hence the comment.

94
00:06:57,180 --> 00:07:00,670
For now that we're just reading the values for the first record.

95
00:07:00,810 --> 00:07:06,140
Not that we're using the get method which need the index of the column in the title and obviously is

96
00:07:06,250 --> 00:07:06,540
it.

97
00:07:06,560 --> 00:07:08,840
And then the top of data.

98
00:07:09,020 --> 00:07:10,730
So got long he got a.

99
00:07:10,740 --> 00:07:12,270
He needs.

100
00:07:12,300 --> 00:07:12,990
Cetera.

101
00:07:13,560 --> 00:07:19,180
So these all of these functions need an index of the column in the title so I remember that compute

102
00:07:19,180 --> 00:07:21,650
is index the first Autobus index 0.

103
00:07:21,900 --> 00:07:27,050
So that's why we're reading the first column bought into IDEI the second into the third into fine and

104
00:07:27,060 --> 00:07:32,600
the last into any amount and the order is a lung value where its name and email are strings and because

105
00:07:32,630 --> 00:07:34,610
mistaught the far number as an integer.

106
00:07:34,750 --> 00:07:37,960
We get rather than get string but it works the same.

107
00:07:38,130 --> 00:07:42,360
In reality we really shouldn't have used an integer for the find number but I just wanted to show you

108
00:07:42,360 --> 00:07:44,760
how to retrieve different types of data.

109
00:07:45,210 --> 00:07:49,830
And that's also what I meant in an earlier Vidia when I warned about siecle like columns not really

110
00:07:49,830 --> 00:07:51,170
having a time to talk.

111
00:07:51,210 --> 00:07:55,680
There's nothing to prevent us from storing the string in the Find field but that break out Cartland

112
00:07:55,700 --> 00:07:58,070
card when it tried to read it.

113
00:07:58,210 --> 00:07:58,520
All right.

114
00:07:58,530 --> 00:08:02,980
So for a simple example we kind of display the data in the low.

115
00:08:03,010 --> 00:08:04,170
That's what I'm trying to do.

116
00:08:05,760 --> 00:08:11,340
Is blurring the lines that betrayed the data we're going to talk Val.

117
00:08:11,340 --> 00:08:15,120
Result equals in double quotes.

118
00:08:15,200 --> 00:08:27,090
Heidi Collins Rajai 9 Akos dollar 9 fired because telephone and email equals salary.

119
00:08:28,510 --> 00:08:30,990
Not going to talk to a parentheses.

120
00:08:31,150 --> 00:08:43,480
Tag comma on Create call on creating tighter ta'ala result and you can see that intelligence is helpfully

121
00:08:43,500 --> 00:08:49,800
telling us that this is all attached to the With that we've actually set up this query and the appropriate

122
00:08:49,800 --> 00:08:58,540
card but so far what I wanted to do here now I want to close the database the database got Klores recording

123
00:08:58,590 --> 00:09:04,230
the closed method closing the database is a good idea but you'd normally do that when the app is closed

124
00:09:04,650 --> 00:09:05,570
rather than here.

125
00:09:05,850 --> 00:09:10,270
That way the database is available while the apps running and you don't have to keep opening it.

126
00:09:10,360 --> 00:09:16,640
And we could also repped all this code up in a database to use block just like we did for the cursor.

127
00:09:16,790 --> 00:09:23,070
I didn't do that here because as I've said it's more usual to keep the database open until the app finishes.

128
00:09:23,070 --> 00:09:28,650
In fact if you wanted to use his basic approach in a real app you'd probably create a separate class

129
00:09:28,650 --> 00:09:31,060
to handle all the database accesses.

130
00:09:31,440 --> 00:09:32,670
We don't care to do that.

131
00:09:32,680 --> 00:09:35,270
We're going to be using a content provider instead.

132
00:09:35,430 --> 00:09:40,370
At the moment we're just saying how to run Sekou statements from our calling card.

133
00:09:40,470 --> 00:09:44,270
So at this point to talk we're not ready to run this simple app now run it now.

134
00:09:47,700 --> 00:09:54,160
I'm going to select the same ones that I read about them last Tom Chi-Chi just fast forward this until

135
00:09:54,160 --> 00:09:59,830
it gets to the stage of running.

136
00:09:59,890 --> 00:10:04,680
All right so I could say we've got an era immediately when that happens.

137
00:10:04,940 --> 00:10:12,020
Up to look can't step and see what we can see there and we might have to remove the filter there so

138
00:10:12,020 --> 00:10:16,820
that we can say all the information yourself that is that sometimes Android studio continues to show

139
00:10:16,920 --> 00:10:21,900
unrelated log entries which show any selected application either here to the right selected.

140
00:10:21,980 --> 00:10:25,940
That happens just select your application again in a second dropdown from the left.

141
00:10:25,940 --> 00:10:26,580
This one here.

142
00:10:28,130 --> 00:10:32,780
Mark I need to do that the reason I'm not sitting on the app here is because I've got such minor activity

143
00:10:32,770 --> 00:10:38,390
so shocking that I get I could just like that again.

144
00:10:38,590 --> 00:10:44,220
And not just by doing that now and actually keep the log of all that unrelated information.

145
00:10:44,220 --> 00:10:48,610
And we're back to looking and seeing why our application crashed.

146
00:10:48,610 --> 00:10:54,610
Now one technique for rating these tech traces is to rate the first bit that describes the era did ignore

147
00:10:54,700 --> 00:10:57,130
the rest of the block or the lines starting with that.

148
00:10:57,130 --> 00:11:04,840
In other words it down up to he would have to look at this first long table contacts already exists

149
00:11:05,440 --> 00:11:09,340
in Kampala and he gives us the sequence it was executing.

150
00:11:09,340 --> 00:11:11,890
So that's pretty clear as to what the problem was.

151
00:11:12,330 --> 00:11:13,720
And again just to be clear the

152
00:11:16,750 --> 00:11:21,500
considering here that was caused by sequela exceptions are not told fairly quickly anyway even if we

153
00:11:21,500 --> 00:11:25,880
didn't already know that it was complaining about the create table statement.

154
00:11:25,880 --> 00:11:27,890
You did say that to the right of the screen there now.

155
00:11:28,250 --> 00:11:31,700
So basically we knew that there was a sequel that exceptions to the code.

156
00:11:31,700 --> 00:11:36,770
So the problem was probably relating to a database card we probably guessed that anyway because we haven't

157
00:11:36,770 --> 00:11:41,820
added any other card but it is always useful to check these logs just to make sure that's the case.

158
00:11:42,200 --> 00:11:44,980
So basically you have the same culottes.

159
00:11:45,320 --> 00:11:48,270
Exception is complaining about the create table statement.

160
00:11:48,440 --> 00:11:53,750
And if you skip to the next block eventually say some card here that we can click anything and blue

161
00:11:53,750 --> 00:11:59,090
is the code that we've been working on so you can click on that to navigate to the line of code that

162
00:11:59,090 --> 00:12:04,730
is actually causing the problem and you can say that that's the line that caused the secret method which

163
00:12:04,740 --> 00:12:08,920
means the problem is going to be in the statement a couple lines further up.

164
00:12:08,990 --> 00:12:10,950
Launch 24 in fact.

165
00:12:11,330 --> 00:12:16,120
Basically the type of contacts already exists and that's why we're getting that crash.

166
00:12:16,130 --> 00:12:20,930
Now fortunately while testing there's an easy way to fix that we can just come up here and change the

167
00:12:20,930 --> 00:12:22,510
sequel code slowly.

168
00:12:22,760 --> 00:12:30,220
And at the words If none exists after the create table statements create table if not exists.

169
00:12:30,720 --> 00:12:35,650
Contex So in other words the type A won't be attempted to be recreated.

170
00:12:35,870 --> 00:12:37,240
If it's already found.

171
00:12:37,330 --> 00:12:39,200
So I'm just kind of click on and run

172
00:12:42,090 --> 00:12:47,910
close look I know I would just go back and check out this time out has worked.

173
00:12:47,920 --> 00:12:50,730
I haven't got a creches Thomas So that's a good sign.

174
00:12:50,760 --> 00:12:57,740
I mean we'll get back to our blog again and make the top slushed mind making quickly say that we've

175
00:12:57,740 --> 00:13:01,670
got some data showing on the screen and now it's just doing what we expect.

176
00:13:01,670 --> 00:13:06,080
Well it's sort of these we get the details for the first row appearing.

177
00:13:06,230 --> 00:13:10,440
But the idea for the right that's just been created is now four rather than two.

178
00:13:10,800 --> 00:13:15,310
And that's because our code keeps adding those two records every time we run up.

179
00:13:15,320 --> 00:13:19,530
Now normally you'd be adding new rise when the user does something such a saving and you contact you

180
00:13:19,580 --> 00:13:23,130
wouldn't normally run these search queries each time the app runs.

181
00:13:23,440 --> 00:13:25,930
And we don't want to keep adding the same two rows.

182
00:13:25,960 --> 00:13:28,750
We can easily prevent that part dropping the title.

183
00:13:28,880 --> 00:13:34,210
That's just my quick change of the code today that will add it immediately after our database is being

184
00:13:34,220 --> 00:13:35,960
defined on 123.

185
00:13:35,990 --> 00:13:43,960
We know the top database dot Sakal imprint to say he's going to talk to for quite some time.

186
00:13:44,500 --> 00:13:50,990
It exists contex it's going to drop the time every time.

187
00:13:50,990 --> 00:13:53,700
If it exists let's actually run that again.

188
00:13:55,960 --> 00:13:57,500
Confirm that that works.

189
00:14:00,660 --> 00:14:05,310
This time you could say we've got record at it our data and that confirms that the time it was dropped

190
00:14:05,400 --> 00:14:08,400
immediately after we got access to the database object.

191
00:14:08,450 --> 00:14:13,620
Now generally I prefer to put the sequence type into a string variable like I did for the Create type

192
00:14:13,620 --> 00:14:15,160
all along line 24th.

193
00:14:15,210 --> 00:14:20,260
This makes it easy to log the sequel which makes debugging easier if you make a mistake.

194
00:14:20,640 --> 00:14:23,490
You can just include the sequel as a string as we're doing here.

195
00:14:23,780 --> 00:14:29,200
But I do recommend using a variable and logging is value especially while developing your app.

196
00:14:29,250 --> 00:14:31,920
You can it is too late to logging later once the apps working.

197
00:14:31,920 --> 00:14:37,020
Also be aware that they used to bug logging commands are stripped out by the build system when you create

198
00:14:37,020 --> 00:14:42,630
the release version of your app basically when you use log Doughty the looking lines are removed automatically

199
00:14:43,080 --> 00:14:45,730
so that won't affect you rap's performance.

200
00:14:45,740 --> 00:14:48,910
All right does one last chance to Mike before we stop this video.

201
00:14:49,290 --> 00:14:56,520
We can loop through all the rows in the cursor by using move to next instead of move to first remember

202
00:14:56,520 --> 00:14:59,350
that the cursor is positioned before the first record.

203
00:14:59,400 --> 00:15:06,130
And that means that move to next will do the same thing as move to first the first time it's used.

204
00:15:06,150 --> 00:15:09,260
So let's go ahead to make a simple change to a card to check that.

205
00:15:09,330 --> 00:15:11,690
So I'm going to close that look at first.

206
00:15:11,970 --> 00:15:18,190
And the change you want to make here at the moment we've got a statement here 14 on it will change the

207
00:15:18,220 --> 00:15:22,840
ease to while creating a wallet.

208
00:15:22,850 --> 00:15:28,680
And instead of going to change this card here I'm going to remove some of this now because we in fact

209
00:15:28,680 --> 00:15:32,460
have added the cardinals to Socko through all records.

210
00:15:32,460 --> 00:15:36,210
So now when we run this we should find that we've got two entries showing on the screen so let's run

211
00:15:36,210 --> 00:15:38,570
this stop they up and run it again.

212
00:15:42,830 --> 00:15:44,120
Let's have a look and say what gives us

213
00:15:47,560 --> 00:15:50,840
never say if I take this someone I'm going to do is stop that.

214
00:15:50,840 --> 00:15:58,380
Stop hope and see what I've done that basically didn't change this property or put Wall ATI's up moved

215
00:15:58,380 --> 00:15:59,600
to first.

216
00:15:59,600 --> 00:16:05,280
So it always continually circled back to the first record and therefore the wall statement never became

217
00:16:05,280 --> 00:16:05,670
false.

218
00:16:05,670 --> 00:16:07,150
We never exited the loop.

219
00:16:07,190 --> 00:16:09,000
Of course I talked about it but we didn't do it.

220
00:16:09,030 --> 00:16:13,700
We need to move to next.

221
00:16:13,850 --> 00:16:16,590
Bearing in mind that we move to next.

222
00:16:16,730 --> 00:16:21,150
It does the same thing as move to first the first time it's you said way up to the first record then

223
00:16:21,160 --> 00:16:23,630
automatically progressed to the next record and so on.

224
00:16:23,840 --> 00:16:24,800
Let's run it again.

225
00:16:25,040 --> 00:16:27,370
We should find this time or see bicycle's

226
00:16:30,150 --> 00:16:35,770
this time you can say now we've got reading tauter day one not a tear when cleaning the values are different

227
00:16:35,770 --> 00:16:37,150
there on the screen as well.

228
00:16:37,210 --> 00:16:42,590
Basically look at showing price records correctly and very simple apps working fine.

229
00:16:43,060 --> 00:16:49,000
So this isn't like an incredibly basic app but we've seen how to create a database using the Siku lot

230
00:16:49,300 --> 00:16:50,700
database class.

231
00:16:50,740 --> 00:16:56,980
We then created a table and inserted records by executing the appropriate sequence statements.

232
00:16:57,000 --> 00:17:01,540
And I have said several times that you wouldn't want to rule out this way at the very least it create

233
00:17:01,540 --> 00:17:04,120
a class to handle all the database access.

234
00:17:04,150 --> 00:17:08,330
You'd also want to make sure that your query isn't performed on the main thread.

235
00:17:08,500 --> 00:17:11,880
That's not a good idea because database operations can be slow.

236
00:17:12,050 --> 00:17:16,620
You know there are ways to handle this using things like content providers and case alert and we're

237
00:17:16,780 --> 00:17:18,550
going to be looking at both of those.

238
00:17:18,550 --> 00:17:23,640
But the basics of executing statements from Cartland card will still be needed.

239
00:17:23,650 --> 00:17:24,720
Now we know how to do that.

240
00:17:24,730 --> 00:17:29,320
We're ready to look at more suitable ways of dealing with databases in the next video that we could

241
00:17:29,320 --> 00:17:35,920
have a look at where that database is stored on the device so that we can open it using the sequel command

242
00:17:35,920 --> 00:17:41,350
line and check that it's been set up correctly when debugging it's very useful to be able to examine

243
00:17:41,350 --> 00:17:44,130
that data that's been stored in your database.

244
00:17:44,140 --> 00:17:47,680
So in the next video you find out how to do just that.

245
00:17:47,680 --> 00:17:48,940
See you in the next video.

