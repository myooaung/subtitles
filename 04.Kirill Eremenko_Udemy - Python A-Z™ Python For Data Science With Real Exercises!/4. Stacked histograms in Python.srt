1

00:00:05,090  -->  00:00:07,670
Hello and welcome back to A Course in Python programming.

2

00:00:07,680  -->  00:00:13,190
In today's tutorial we're going to talk about creating a stacked distribution chart.

3

00:00:13,320  -->  00:00:17,520
If we're not going to just talk about it we're going to learn how to create that type of chart.

4

00:00:17,550  -->  00:00:24,390
And I wanted to warn you right away that this tutorial is going to be harder and more complex than usual

5

00:00:24,690  -->  00:00:27,390
but I'm sure we'll manage it just fine.

6

00:00:27,390  -->  00:00:30,620
We've learned quite a lot about Python and it'll be an interesting challenge for us.

7

00:00:30,870  -->  00:00:32,440
And why will it be a bit harder.

8

00:00:32,460  -->  00:00:39,540
Well because we're going to need to switch on some of our creativity and come up with a coding solution

9

00:00:39,840  -->  00:00:42,030
techniques that we've talked about before.

10

00:00:42,060  -->  00:00:45,090
So let's dive straight into it.

11

00:00:45,090  -->  00:00:50,720
We're going to create a new Actually a few new cells here and what we want to plot.

12

00:00:50,810  -->  00:00:52,150
Well what do we want.

13

00:00:52,170  -->  00:01:01,100
But let's start with Peel T Dot HST so histogram and as we discussed before we already plotted for example

14

00:01:01,150  -->  00:01:02,810
audience rating and critique creating.

15

00:01:02,840  -->  00:01:06,680
How about this time we plot a budget in millions.

16

00:01:06,960  -->  00:01:08,490
Let's have a look at that.

17

00:01:08,490  -->  00:01:16,710
So here we've got we need to specify an object right so we can say each one equals BLT just budget in

18

00:01:16,710  -->  00:01:17,660
millions right.

19

00:01:17,970  -->  00:01:24,530
Or instead of that we can say all t dots show so we don't see that additional information.

20

00:01:24,690  -->  00:01:25,880
So there is a budget of millions.

21

00:01:25,880  -->  00:01:30,340
But what if we want to see that budget in millions for a certain genre.

22

00:01:30,360  -->  00:01:35,550
So if we want to say a certain genre Well we already know how to do that we first need to filter our

23

00:01:35,550  -->  00:01:41,280
data set right so this is one of the first technique that we're going to introduce here that we've learned

24

00:01:41,280  -->  00:01:44,100
before but that we're going to introduce into this challenge.

25

00:01:44,100  -->  00:01:46,320
So how do we filter daughter said hey simple.

26

00:01:46,350  -->  00:01:51,170
We create a filter we say movie genre equals for instance drama.

27

00:01:51,420  -->  00:01:53,060
And then this filter.

28

00:01:53,100  -->  00:01:58,400
So if I just run this line now I'll just get this false structure to a false filter.

29

00:01:58,650  -->  00:02:02,240
And how do I apply it to actually filter my door frame.

30

00:02:02,260  -->  00:02:03,090
Also movies.

31

00:02:03,090  -->  00:02:06,170
And then I put this in the square brackets like that.

32

00:02:06,180  -->  00:02:06,870
So there we go.

33

00:02:06,870  -->  00:02:11,510
And now I've got to just movies that are from the drama genre.

34

00:02:11,670  -->  00:02:17,300
And then what I want to do is I want to say Dot budget millions.

35

00:02:17,520  -->  00:02:24,270
So because this is a new doorframe now I can apply the same rules as previously so I can look up this

36

00:02:24,270  -->  00:02:25,400
budget billions call.

37

00:02:25,470  -->  00:02:34,200
If I run that there's my budget millions column and now I can take this cut it and put it into here

38

00:02:34,200  -->  00:02:37,940
instead of this budget millions column from the whole doorframe.

39

00:02:37,950  -->  00:02:43,530
I can apply or get the budget million Skolem from the subset a data frame.

40

00:02:43,550  -->  00:02:50,400
So if I run this this is a budget millions for a drama I can change this for two action for example

41

00:02:51,450  -->  00:02:54,210
so far on this now I'll get a different chart.

42

00:02:54,210  -->  00:02:56,400
That is the chart for action.

43

00:02:56,400  -->  00:02:57,740
So let's copy that.

44

00:02:57,750  -->  00:03:01,110
That's done on the say thriller.

45

00:03:01,410  -->  00:03:05,070
You can see that now they're kind of like adding up on to one shot.

46

00:03:05,070  -->  00:03:10,890
So that's what happens in Python you creating a plot and then you want to show it that's when you show

47

00:03:10,890  -->  00:03:13,540
everything and you're just adding things on top of each other.

48

00:03:13,540  -->  00:03:17,110
So if I say drama you'll see that drama is hidden behind there.

49

00:03:17,130  -->  00:03:22,100
Then you've got action which usually have higher budgets so maybe just change them around.

50

00:03:23,070  -->  00:03:24,750
So they got the action.

51

00:03:24,900  -->  00:03:26,090
That's drama.

52

00:03:26,100  -->  00:03:34,380
That's a thriller and you can see they all have different beans so I can say bin's equals 15 to make

53

00:03:34,380  -->  00:03:35,400
them look better.

54

00:03:35,540  -->  00:03:37,800
Fifteen ands actually.

55

00:03:37,920  -->  00:03:40,670
You never know if you look better at this stage.

56

00:03:41,190  -->  00:03:43,100
OK so it does look a bit better.

57

00:03:43,320  -->  00:03:48,380
So there you go that's how we can create these histograms.

58

00:03:48,390  -->  00:03:51,390
But at the same time this is not exactly what we're after.

59

00:03:51,390  -->  00:03:56,040
As you can see the histograms are overlaid one after another they're behind each other.

60

00:03:56,130  -->  00:03:58,370
What we want is we want them to be stacked.

61

00:03:58,380  -->  00:04:03,600
We want these bars to be on top of each other and to add up rather than hiding each other and that's

62

00:04:03,960  -->  00:04:07,170
a very different type of chart that we're going to create.

63

00:04:07,170  -->  00:04:09,880
So how do we go about creating this chart.

64

00:04:10,140  -->  00:04:16,800
Well in order to create the chart what we can do is we can use the list function but instead of passing

65

00:04:16,800  -->  00:04:24,660
it just one column or one list of data what we can do is we can pause it a list of columns so we can

66

00:04:24,660  -->  00:04:29,050
say Budget millions for Thriller than budget millions for drama.

67

00:04:29,220  -->  00:04:34,080
So I'll give you an example to make this a bit more evident what we're going to do is we're going to

68

00:04:34,080  -->  00:04:36,950
take this these two.

69

00:04:36,960  -->  00:04:42,780
So there's drama budget million for drama and the take action to stick it out.

70

00:04:42,780  -->  00:04:44,630
So there's a budget million for action.

71

00:04:44,790  -->  00:04:46,440
So I'm going to put these two in a list.

72

00:04:46,440  -->  00:04:48,660
There's there's my first square bracket.

73

00:04:48,780  -->  00:04:50,290
Then there's my coma.

74

00:04:50,460  -->  00:04:54,590
Then let's put this here and there's my second square record right.

75

00:04:54,600  -->  00:04:59,040
So this is now a list inside this list we've got element number one.

76

00:04:59,040  -->  00:05:00,670
So it's a list as well.

77

00:05:00,810  -->  00:05:07,570
It's got or it's it's a series of data and then we've got another series of data here.

78

00:05:07,740  -->  00:05:15,910
So now if I take this list of two elements and I put it in here and I run this well and then I do feel

79

00:05:16,030  -->  00:05:21,270
t dot show you'll see that we've got the bars but they're not stacked.

80

00:05:21,300  -->  00:05:24,090
That's not a problem we'll just impurity here.

81

00:05:24,140  -->  00:05:31,800
As an other parameter I will just say stacked he calls true so as you can see now they're stacked.

82

00:05:31,810  -->  00:05:33,520
So that's what we are aiming for.

83

00:05:33,510  -->  00:05:38,970
But the thing is that we've got way more genres as you remember we have seven genres and if I continue

84

00:05:39,540  -->  00:05:40,630
typing up the score.

85

00:05:40,640  -->  00:05:47,290
So for instance I could put the backslash here move this to a new line put a backslash there move this

86

00:05:47,310  -->  00:05:47,840
new line.

87

00:05:47,860  -->  00:05:52,520
Yes I can manually do it I can add a few more into this list right.

88

00:05:52,560  -->  00:05:57,870
So that's my list over there that's where it ends that's where it starts.

89

00:05:58,200  -->  00:06:02,190
That's the start of the list as the end of the list I could add a few more I could add the the whole

90

00:06:02,190  -->  00:06:02,820
seven.

91

00:06:02,820  -->  00:06:05,380
But what if we had 100 What if we had a lot.

92

00:06:05,380  -->  00:06:10,840
So in this particular instance what I would like to do is I would like to use this opportunity to practice

93

00:06:11,110  -->  00:06:13,150
on how to solve challenges like this.

94

00:06:13,180  -->  00:06:14,630
This is a coding challenge.

95

00:06:14,640  -->  00:06:17,350
It's not really a dot a science related challenge.

96

00:06:17,500  -->  00:06:23,010
It's actually a coding related challenge and it will be interesting to see how we can solve what we

97

00:06:23,010  -->  00:06:25,410
can come up with to solve this challenge.

98

00:06:25,560  -->  00:06:28,650
Well what would we do if we wanted to do this manually.

99

00:06:28,650  -->  00:06:32,620
The way to the way I think about these things what I would do if I wanted to do this manually.

100

00:06:32,740  -->  00:06:39,880
Well I would take this and out another call my Here put a backslash and then output enter another one

101

00:06:39,880  -->  00:06:48,460
right side and another one here and I'll change drama to Thriller for instance and then I'll keep doing

102

00:06:48,450  -->  00:06:51,670
that so I would repetitively copy paste.

103

00:06:51,670  -->  00:06:55,900
And that feels a lot like a monkey's task.

104

00:06:55,950  -->  00:07:01,350
Had a monkey's job when your copy pasting and just changing one little thing.

105

00:07:01,440  -->  00:07:02,560
So this could be comedy.

106

00:07:02,760  -->  00:07:07,170
What do we say about monkey tasks or repetitive tasks like that.

107

00:07:07,360  -->  00:07:13,480
We said that you can automate these things that you can use cycles or loops in the programming language

108

00:07:13,480  -->  00:07:14,210
that you're in.

109

00:07:14,310  -->  00:07:19,020
In this case in Python you can use loops to automate that.

110

00:07:19,020  -->  00:07:22,130
For that to happen for you instead of doing it manually.

111

00:07:22,500  -->  00:07:25,580
So let's see how we can do it in this particular case.

112

00:07:25,930  -->  00:07:26,280
All right.

113

00:07:26,280  -->  00:07:31,350
So first thing we need going to need to do is we're going to need to understand what do we need to iterate

114

00:07:31,380  -->  00:07:34,830
and what we need to iterate is the genre.

115

00:07:34,840  -->  00:07:39,290
So we need to go through the genre we need a variable that is going to change with the genre.

116

00:07:39,300  -->  00:07:39,580
Right.

117

00:07:39,570  -->  00:07:44,340
So let's go ahead and start trying to figure out how we can iterate that variable.

118

00:07:44,400  -->  00:07:52,210
So we'll create a loophole say for g n so there's going to be a variable for the genre in and then we

119

00:07:52,210  -->  00:07:55,430
need to iterate that variable over the different genres.

120

00:07:55,440  -->  00:07:58,510
We don't unfortunately we don't have a list of these genres.

121

00:07:58,600  -->  00:08:01,530
So how can we get a list of these genres.

122

00:08:01,870  -->  00:08:08,550
Well we really have the answer if we scroll up to the top you'll see that using this approach we can

123

00:08:08,560  -->  00:08:14,070
get all of the unique categories in a certain column and in certain categorical variable that's why

124

00:08:14,490  -->  00:08:22,180
it's it's valuable thing that we have genre as a category because we can then call this construct and

125

00:08:22,260  -->  00:08:30,730
that will give us a list of all of the genres in our data set action adventure comedy drama horror romance

126

00:08:30,750  -->  00:08:31,990
and Thriller.

127

00:08:31,990  -->  00:08:38,980
So if I go ahead and copy this and now place it here don't forget to call on after that.

128

00:08:38,980  -->  00:08:45,450
Then would just create a loop for variable Shawn which is going to Orji and which is going to iterate

129

00:08:45,510  -->  00:08:51,450
over the different values or categories of genre that we have and to check it we can just print it out

130

00:08:51,460  -->  00:08:51,490
.

131

00:08:51,490  -->  00:08:59,240
We can say print G and so was going to happen is the end is going to take the value of action it's going

132

00:08:59,240  -->  00:09:03,540
to get printed then it's going to move on to the next value whether comedy and there's going to get

133

00:09:03,550  -->  00:09:07,110
print that there's going to move onto the next one thriller and there's going to get printed silver

134

00:09:07,120  -->  00:09:08,130
on this.

135

00:09:08,130  -->  00:09:12,950
You'll see ogen action adventure comedy drama horror romance and Thriller.

136

00:09:13,240  -->  00:09:19,020
So we've successfully created a loop that iterates over the different categories.

137

00:09:19,360  -->  00:09:20,670
So that's a great start.

138

00:09:20,670  -->  00:09:25,360
We already have this value so you kind of can see the logic behind this.

139

00:09:25,360  -->  00:09:31,270
And again this is not really a data science challenge or programming challenge so it's not absolutely

140

00:09:31,260  -->  00:09:37,980
necessary to be able to create this you can always create this manually but at the same time it's very

141

00:09:37,990  -->  00:09:43,860
convenient to be able to automate a lot of your work while you're doing a science task and that's what

142

00:09:43,870  -->  00:09:47,530
is so exciting as well because you get to combine the two fields.

143

00:09:47,540  -->  00:09:53,050
You're doing some analytics so you doing data signs and symptoms you're leveraging the power of programming

144

00:09:53,050  -->  00:09:57,610
to help automate your tasks and make your analysis more efficient.

145

00:09:57,960  -->  00:10:01,650
So we've already got a variable that iterates over the different genres.

146

00:10:01,650  -->  00:10:09,570
How can we now create this whole construct that will create a stacked bar chart for us using that variable

147

00:10:09,580  -->  00:10:09,760
.

148

00:10:09,750  -->  00:10:11,440
Right so what's the next step.

149

00:10:11,450  -->  00:10:14,620
We're breaking this problem down into steps.

150

00:10:14,620  -->  00:10:16,440
We're doing it step by step.

151

00:10:16,440  -->  00:10:16,770
All right.

152

00:10:16,770  -->  00:10:19,860
So what do we need ultimately is we need this list right.

153

00:10:19,860  -->  00:10:25,240
So we need people to just requires this list that we were about to create manually so that list over

154

00:10:25,240  -->  00:10:31,300
there has got one series to series three series four series of data is actually going to have seven

155

00:10:31,300  -->  00:10:31,770
.

156

00:10:31,770  -->  00:10:36,330
So what we want from a loop is to create this list for us.

157

00:10:36,510  -->  00:10:37,810
And that's exactly what we do.

158

00:10:37,890  -->  00:10:39,060
It's very simple.

159

00:10:39,070  -->  00:10:42,560
We're going to take this line will actually work we introduce.

160

00:10:42,560  -->  00:10:48,210
First we're going to copy this loop before this loop we're going to create an empty list and say list

161

00:10:48,210  -->  00:10:54,960
one equals list so you can either create the empty list like that or you can just put the square brackets

162

00:10:55,250  -->  00:10:56,400
just simply like that.

163

00:10:56,400  -->  00:10:57,130
Meaning that's it.

164

00:10:57,210  -->  00:10:58,850
It's a list which is empty.

165

00:10:59,090  -->  00:11:03,260
For this method actually you can use any or any one of them.

166

00:11:03,480  -->  00:11:05,330
So create an empty list before.

167

00:11:05,510  -->  00:11:10,020
And then inside your loop where are we going to do is we're going to add onto this list so we're going

168

00:11:10,010  -->  00:11:11,920
to say list one would append.

169

00:11:12,330  -->  00:11:17,690
And then here in the brackets are you going to need to specify what you want to append.

170

00:11:17,880  -->  00:11:20,740
And let's go ahead and copy this what we want to append.

171

00:11:20,790  -->  00:11:22,380
Is this right.

172

00:11:22,380  -->  00:11:27,690
So we're going to append it there so we're appending this series we're adding something onto the right

173

00:11:27,690  -->  00:11:31,330
side of the list we're at every time this loop fires off.

174

00:11:31,380  -->  00:11:35,180
Going to add a new element to the list and the element is going to contain.

175

00:11:35,190  -->  00:11:41,520
In this case a series from our movies data frame where genre equals action.

176

00:11:41,700  -->  00:11:44,090
But the trick is that we don't want to just action.

177

00:11:44,100  -->  00:11:50,540
We want all the genres we're in take genre and we're going to change it here so every time a genre changes

178

00:11:50,550  -->  00:11:55,830
this condition changes and we're going to pand and you series so first I'm going to append all of the

179

00:11:56,000  -->  00:12:00,940
budgets for action movies and for adventure movies and comedy movies drama movies and so on.

180

00:12:01,200  -->  00:12:02,370
So hope you're following along.

181

00:12:02,370  -->  00:12:08,520
It is quite complex what we are building but nevertheless it does combine all of the knowledge we've

182

00:12:08,520  -->  00:12:12,570
already acquired in this course of all all everything that it requires.

183

00:12:12,570  -->  00:12:14,610
We've already discussed in this course.

184

00:12:14,620  -->  00:12:16,840
It's a good practice exercise for us.

185

00:12:17,160  -->  00:12:20,930
All right so there we go that's how we're adding a new series onto list.

186

00:12:20,940  -->  00:12:21,970
Every single time.

187

00:12:22,290  -->  00:12:30,040
And now so if I just run this line and then at the end I'm going to print print least one.

188

00:12:30,120  -->  00:12:33,470
I'm just going to expand this and you'll see that list 1.

189

00:12:33,490  -->  00:12:34,140
What does it have.

190

00:12:34,130  -->  00:12:35,310
So that's the square bracket.

191

00:12:35,310  -->  00:12:37,060
That's the start of the list.

192

00:12:37,190  -->  00:12:37,610
This.

193

00:12:37,620  -->  00:12:42,720
That's just the index that's the main Raley's of 20 million two hundred million thirty five million

194

00:12:42,720  -->  00:12:42,740
.

195

00:12:42,750  -->  00:12:45,300
That's the action movies budgets.

196

00:12:45,330  -->  00:12:47,150
And you can see that dot dot dot.

197

00:12:47,160  -->  00:12:47,970
And then it goes.

198

00:12:48,030  -->  00:12:49,870
And then voila.

199

00:12:50,310  -->  00:12:55,060
And so that was the first Parsa had 105.

200

00:12:55,080  -->  00:12:56,460
No actually that's that's it.

201

00:12:56,460  -->  00:12:57,810
That's where it ends.

202

00:12:57,930  -->  00:12:59,160
That's the next one.

203

00:12:59,150  -->  00:13:05,880
This is where the next list or the next series starts and the list goes and goes up to there.

204

00:13:05,880  -->  00:13:08,590
Then the next series and all this starts.

205

00:13:08,730  -->  00:13:10,710
Then you've got the dot dot dot.

206

00:13:10,710  -->  00:13:12,360
Then the next series and all this.

207

00:13:12,360  -->  00:13:18,840
So you can see that this is indeed a list of multiple series of different budget and there that's the

208

00:13:18,850  -->  00:13:21,180
end of the list that square brackets over there.

209

00:13:21,180  -->  00:13:24,220
So looks like we've built what we wanted.

210

00:13:24,380  -->  00:13:25,950
And how did that happen.

211

00:13:25,950  -->  00:13:31,500
Well the reason here is that a pen is one of those functions that does indeed change the underlying

212

00:13:31,530  -->  00:13:38,430
objects so we're not just create adding something to the list and returning that value we're actually

213

00:13:38,700  -->  00:13:44,300
modifying the underlying objects a list one does get and new series added to it every time.

214

00:13:44,300  -->  00:13:49,910
So so basically what I'm saying is that there's no need to say list one cause list one pen.

215

00:13:49,920  -->  00:13:55,170
So there's no need in saying that because this function doesn't change the underlying object so we don't

216

00:13:55,170  -->  00:13:57,410
need to print a list once for on the line.

217

00:13:57,720  -->  00:14:04,590
And now all we have to do is we just simply say we can say that in the same cell we can say age equals

218

00:14:04,620  -->  00:14:12,220
Piazzi dog hist list 1 so far on that you'll see that we've got those bars together.

219

00:14:12,220  -->  00:14:14,400
They're not stacked but that's very easy to correct.

220

00:14:14,390  -->  00:14:20,790
We just say that Sabin's equals 30 and say stacked goes true.

221

00:14:21,180  -->  00:14:24,190
So if you're on that you'll see now they're stacks.

222

00:14:24,210  -->  00:14:25,960
Which is exactly what we're after.

223

00:14:25,970  -->  00:14:29,300
Else we can do is we can see the gaps between the bars.

224

00:14:29,310  -->  00:14:34,530
If you don't want to see the ball gaps between the bars per shift tab you'll see that there's a parameter

225

00:14:34,530  -->  00:14:43,400
here are with so are with the calls 1 run that you'll see another close together so our with is what's

226

00:14:43,500  -->  00:14:50,220
the ratio of the designated space the bar should take so if it's one and it takes up 100 percent of

227

00:14:50,220  -->  00:14:53,420
the space and means that there'll be no gap between them.

228

00:14:53,520  -->  00:14:53,840
All right.

229

00:14:53,850  -->  00:14:55,580
So that's a great start.

230

00:14:55,580  -->  00:14:56,400
So it's just a start.

231

00:14:56,390  -->  00:14:57,210
We're nearly done.

232

00:14:57,210  -->  00:14:59,070
So that's that's a great progress.

233

00:14:59,070  -->  00:15:06,560
And then of course the main part here is is this line which helps us get rid of this task where we have

234

00:15:06,570  -->  00:15:10,780
to manually rewrite multiple times of the same code.

235

00:15:10,800  -->  00:15:16,570
It basically puts it into a loop for us that's the heart of this code that we've created.

236

00:15:16,640  -->  00:15:23,670
And one more thing that's missing is the labels or the legend as you can see we've got different colors

237

00:15:23,660  -->  00:15:26,600
here we don't understand what color represents what.

238

00:15:26,790  -->  00:15:29,470
So how do we add legend here.

239

00:15:29,700  -->  00:15:32,340
Well belted out ha Estes.

240

00:15:32,380  -->  00:15:38,470
The histogram function has a legend function label parameter here.

241

00:15:38,900  -->  00:15:41,660
If you scroll down you'll be able to read about it.

242

00:15:41,700  -->  00:15:43,900
Let's find it here somewhere.

243

00:15:43,910  -->  00:15:44,680
There it is.

244

00:15:44,700  -->  00:15:50,750
So label string or non optional string or sequence of strings to match multiple datasets.

245

00:15:50,790  -->  00:15:53,310
Bar charts yield multiple and so on.

246

00:15:53,310  -->  00:15:57,560
So basically you need to pass sequence of strings into here.

247

00:15:57,600  -->  00:15:58,380
How do we do that.

248

00:15:58,380  -->  00:16:04,690
Well we need to create it first so we integrate a list and say my labels equals a list.

249

00:16:04,740  -->  00:16:05,750
Again empty.

250

00:16:05,970  -->  00:16:14,000
And then here in our loop what are we going to do is we're going to say my labels got panned and we

251

00:16:14,010  -->  00:16:15,390
just want to pen the genre.

252

00:16:15,380  -->  00:16:16,470
So this is a bit easier.

253

00:16:16,470  -->  00:16:21,470
We just want to pen the actual genre into a list and here we go and say label.

254

00:16:21,540  -->  00:16:23,420
He calls my labels.

255

00:16:23,610  -->  00:16:27,120
If I run that that's ads the labels to the chart.

256

00:16:27,140  -->  00:16:30,340
What we need to do is we need to show the legend.

257

00:16:30,620  -->  00:16:32,410
So you need to say appeal to you.

258

00:16:32,400  -->  00:16:39,780
Just to add legend and now we'll see the legend and to get rid of this what we need to do is of course

259

00:16:39,780  -->  00:16:42,580
say guilty or not show.

260

00:16:42,590  -->  00:16:43,080
There we go.

261

00:16:43,080  -->  00:16:45,840
So that's our action movies over there.

262

00:16:46,080  -->  00:16:48,880
That's our adventure movies.

263

00:16:48,960  -->  00:16:54,450
Then you've got the comedy movies then you've got the drama and you could tell that that's how the order

264

00:16:54,450  -->  00:16:58,670
they built they're stacked on top of each other in that in reverse order to what's here.

265

00:16:58,690  -->  00:17:00,380
So the top one is at the bottom.

266

00:17:00,410  -->  00:17:07,880
Second one is second from bottom cut comedy drama horror romance and Thriller.

267

00:17:07,880  -->  00:17:14,880
So again the charts are much more crisp if you zoom out so you can see here that it's as crisp.

268

00:17:15,030  -->  00:17:17,420
Probably that's what it's like on your machine.

269

00:17:17,450  -->  00:17:22,180
I just it is I mean it's how we can see the code better but that's a lovely charge.

270

00:17:22,200  -->  00:17:26,400
And as you can tell it's not that complex of a or something like that.

271

00:17:26,410  -->  00:17:33,420
It would be very quick to create an Tablo or it would be not as difficult to create in our IT WOULD

272

00:17:33,410  -->  00:17:42,120
BE quite fast in Python unfortunately have to unless you use some sort of pre coded solution you need

273

00:17:42,120  -->  00:17:47,670
to go through some hoops to jump through some hoops to create something that and it's just a matter

274

00:17:47,660  -->  00:17:50,200
of using the right tool for the right job.

275

00:17:50,220  -->  00:17:56,160
In this case maybe it was worthwhile to create the same chart in another tool but nevertheless we powered

276

00:17:56,150  -->  00:18:04,110
through it and we did get some really good hands on practice with loops and other concepts in overcoming

277

00:18:04,110  -->  00:18:04,760
this challenge.

278

00:18:04,780  -->  00:18:10,660
So hopefully you're able to follow along and create this wonderful beautiful chart as well.

279

00:18:10,800  -->  00:18:13,710
So this is going to be our chart number four.

280

00:18:13,770  -->  00:18:15,560
We're going to include in the report.

281

00:18:15,890  -->  00:18:22,110
There we go that's one of the methods of creating stacked histograms in Python and only pausing on the

282

00:18:22,110  -->  00:18:26,630
next tutorial Until then hepi coding.
