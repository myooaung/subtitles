WEBVTT
1

00:00:05.160  -->  00:00:05.610
Hello.

2

00:00:05.700  -->  00:00:08.280
Welcome back to the course on Python programming.

3

00:00:08.280  -->  00:00:13.350
Today is going to be a quick tutorial and we're just going to quickly recap on indentation because it

4

00:00:13.350  -->  00:00:19.140
is a very important part of python and I would like to demonstrate once again that indentation is important

5

00:00:19.140  -->  00:00:26.520
and how code can go wrong if the invitation is not correct or it has been mistakenly set to be incorrect

6

00:00:26.540  -->  00:00:26.690
.

7

00:00:26.820  -->  00:00:27.750
So let's have a look.

8

00:00:27.750  -->  00:00:33.690
So we here we've got the tutorial on the if statement and at the end we've got this quite long example

9

00:00:33.690  -->  00:00:35.760
of chained statements.

10

00:00:36.030  -->  00:00:42.540
And let's say we want to print out in addition to the X and the answer we want to print out the word

11

00:00:42.570  -->  00:00:42.930
Hello.

12

00:00:42.960  -->  00:00:45.980
So let's say here before x we wanted to print out Hello.

13

00:00:46.230  -->  00:00:50.780
So if we run this code now every time we run it we can see that hello is there hello.

14

00:00:50.790  -->  00:00:56.710
And then random number and then we've got the answer so the check that we were performing.

15

00:00:56.970  -->  00:00:59.910
So what happens if we get the indentation incorrect.

16

00:00:59.910  -->  00:01:05.430
What happens if by accident we put an indentation here from the point of view of other programming languages

17

00:01:05.430  -->  00:01:07.870
this would make any difference whatsoever.

18

00:01:07.950  -->  00:01:14.880
On the other hand from the point of view of Python that now means that this print statement is part

19

00:01:14.940  -->  00:01:19.470
of this else bollocks so bar of the body for the else block.

20

00:01:19.650  -->  00:01:23.610
And that means the print hello will only be executed whenever.

21

00:01:23.730  -->  00:01:26.430
This is the option that is being triggered.

22

00:01:26.430  -->  00:01:33.870
So if x is greater than one then only this gets executed if X or L.E. if x is greater than a minor greater

23

00:01:33.870  -->  00:01:40.410
than or equal to minus 1 so if it's between minus 1 and 1 then this exit kit and this block only gets

24

00:01:40.410  -->  00:01:43.860
exited in all other situations so when X is less than a minus 1.

25

00:01:43.860  -->  00:01:45.740
So let's give the signal this see what happens.

26

00:01:45.840  -->  00:01:46.350
Right.

27

00:01:46.620  -->  00:01:49.290
So if I run this line you'll see that.

28

00:01:49.290  -->  00:01:49.870
Hello.

29

00:01:49.900  -->  00:01:51.690
Yes indeed it's there.

30

00:01:51.810  -->  00:01:58.150
But if I run again there is no more Halo because value of x is not less than minus 1.

31

00:01:58.350  -->  00:02:01.720
So you can see that indentation makes a big difference.

32

00:02:01.730  -->  00:02:05.270
Again Helo's there because it's less than most fun and then it goes away.

33

00:02:05.430  -->  00:02:10.800
So that is how errors can creep up into code especially if you are coming from a different programming

34

00:02:10.800  -->  00:02:16.740
language where you're not used to using indentation as part of the programming language syntax.

35

00:02:16.860  -->  00:02:23.790
So definitely watch out for that and try to always observe where you're placing an indentation and that

36

00:02:23.790  -->  00:02:26.210
will help you avoid errors.

37

00:02:26.220  -->  00:02:26.520
All right.

38

00:02:26.520  -->  00:02:32.910
So hopefully you will be able to look out for these things in your coding in Python and I look forward

39

00:02:32.910  -->  00:02:33.900
to seeing your next step.

40

00:02:34.020  -->  00:02:35.560
Until then happy coding
