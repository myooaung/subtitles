1

00:00:05,170  -->  00:00:07,890
Hello welcome back the course in Python programming.

2

00:00:07,920  -->  00:00:13,380
How did you go with the previous quick exercise in the previous tutorial with the negative indexation

3

00:00:13,410  -->  00:00:14,580
or the negative step.

4

00:00:14,580  -->  00:00:15,930
To be precise.

5

00:00:15,930  -->  00:00:17,270
Hope you had a chance to play around with that.

6

00:00:17,280  -->  00:00:22,500
We'll quickly look at that just now and then we'll have a very short brief tutorial on tuples because

7

00:00:22,500  -->  00:00:28,540
tuples are a very very simple concept for us now that we know so much about Python already.

8

00:00:28,590  -->  00:00:32,510
So let's go ahead and do that here I'm just going to quickly put a delimiter.

9

00:00:32,580  -->  00:00:34,110
I'm going to change that.

10

00:00:34,140  -->  00:00:36,360
Marked down put a delimiter in.

11

00:00:36,360  -->  00:00:36,650
All right.

12

00:00:36,660  -->  00:00:43,510
So what did we say we said what happens if we look at the whole list but with a step of minus one.

13

00:00:43,590  -->  00:00:43,860
Right.

14

00:00:43,860  -->  00:00:45,220
So what happens then.

15

00:00:45,330  -->  00:00:48,630
Then what happens is the list is actually reversed.

16

00:00:48,660  -->  00:00:53,610
So we're stepping off minus one we're looking at the whole thing from start to finish or to be more

17

00:00:53,610  -->  00:00:54,890
precise from finish.

18

00:00:54,890  -->  00:00:59,280
To start with step of minus 1 and we'll look at will see that and bit more detail now.

19

00:00:59,310  -->  00:01:04,290
Just a quick comment that most likely you won't be using this a lot this negative step concept but it's

20

00:01:04,290  -->  00:01:07,680
good to understand because maybe someday you'll be looking at somebody else's code and you'll see it

21

00:01:07,680  -->  00:01:11,160
in there some tricky situation where they had a negative step.

22

00:01:11,460  -->  00:01:16,980
And yes it's going to be quite it's going to it's a useful piece of knowledge to have and to be able

23

00:01:16,980  -->  00:01:18,840
to understand this type of code.

24

00:01:18,870  -->  00:01:24,270
So let's quickly have a look so let's say I want to look at letters something we already looked at letters

25

00:01:24,290  -->  00:01:29,060
2 and 2 2 7 so 0 1 2 starting here would go up to here.

26

00:01:29,060  -->  00:01:32,070
There's three four five six or seven other.

27

00:01:32,250  -->  00:01:33,730
That's what we should get right.

28

00:01:33,750  -->  00:01:34,830
That's exactly what we get.

29

00:01:34,860  -->  00:01:40,440
But what happens if I say and this is the same as saying two to seven step one right because we're taking

30

00:01:40,440  -->  00:01:46,130
a step of what we're what happens if I say two to seven with a step of minus one where we know we've

31

00:01:46,130  -->  00:01:51,900
already seen let's say step up to where you know we know what happens there from two in this one of

32

00:01:51,900  -->  00:01:55,820
course I should go this 0 1 2.

33

00:01:55,830  -->  00:01:58,150
So this example C D F G.

34

00:01:58,260  -->  00:01:59,660
This is 2 2 here.

35

00:01:59,670  -->  00:02:05,830
That's what we get not not that example and 6:58 footstep of 2 0 1 2.

36

00:02:05,990  -->  00:02:08,590
So you see then you get the you get G.

37

00:02:08,640  -->  00:02:09,080
Right.

38

00:02:09,240  -->  00:02:11,660
But what happens if I say a step of minus one.

39

00:02:11,670  -->  00:02:12,780
What do you think will get.

40

00:02:12,960  -->  00:02:19,200
Well here we get nothing because the reason is you can get from Item Number 2 to item number seven using

41

00:02:19,200  -->  00:02:23,280
a step of minus one step of minus one you're going to go backwards right you're going to go backwards

42

00:02:23,280  -->  00:02:26,130
you'll never get to step down and that's why we get nothing.

43

00:02:26,340  -->  00:02:30,370
So if you want to use and I get an exception these have to be reversed.

44

00:02:30,390  -->  00:02:34,170
So once again it's still the same concept where you starting and where are you going.

45

00:02:34,320  -->  00:02:39,660
But just remember that when you use negative in succession you can only go to the left that will say

46

00:02:39,660  -->  00:02:40,330
letters.

47

00:02:40,470  -->  00:02:43,260
Let's say we want the same result but reversed right.

48

00:02:43,290  -->  00:02:49,130
So how would we say that would say we want to start at liturgy start here so that is letter numbers

49

00:02:49,260  -->  00:02:53,850
0 1 2 3 4 5 6 6 not over 7.

50

00:02:53,880  -->  00:02:55,500
Remember that whole concept that.

51

00:02:55,510  -->  00:02:56,900
Were you ever going to.

52

00:02:56,900  -->  00:02:58,920
So the the end is not inclusive.

53

00:02:58,920  -->  00:03:02,700
It makes things a bit tricky so here we want to start at six.

54

00:03:02,760  -->  00:03:06,770
Then go to Five four three two.

55

00:03:06,930  -->  00:03:10,040
But we need to specify one because it's going to be not inclusive.

56

00:03:10,050  -->  00:03:14,310
So we want to go from 6 to 1 not inclusive of a step of minus 1.

57

00:03:14,310  -->  00:03:19,280
So let's try that 6 to one with a step of minus one.

58

00:03:19,320  -->  00:03:20,030
That's right.

59

00:03:20,040  -->  00:03:21,180
I need to put the s here.

60

00:03:21,180  -->  00:03:27,340
Forgot this goes 6 to 1 for step of minus 1 G F E D C.

61

00:03:27,360  -->  00:03:28,950
So we basically reverse that.

62

00:03:28,980  -->  00:03:33,190
So you can see just to be two two segments of a one because sound was not.

63

00:03:33,270  -->  00:03:34,950
Now this is inclusive.

64

00:03:34,950  -->  00:03:40,710
So six to one one is Nickolas a step of minus one and simple thing you can just say minus two.

65

00:03:40,710  -->  00:03:44,520
They'll give you every second letter in that sequence going backwards.

66

00:03:44,520  -->  00:03:45,750
So play around with that.

67

00:03:45,760  -->  00:03:50,790
That's that's just say I know it's a bit tricky it's kind of like smoke and mirrors but at the same

68

00:03:50,790  -->  00:03:55,710
time it works and sometimes very I wouldn't say often but sometimes it is used in Python especially

69

00:03:55,710  -->  00:03:57,750
when you want to like reverse a whole list.

70

00:03:57,750  -->  00:03:59,410
It's taken me until 10.

71

00:03:59,700  -->  00:04:00,070
All right.

72

00:04:00,090  -->  00:04:05,830
And for today's topic what we wanted to talk about was Jubal's let's look at them.

73

00:04:05,850  -->  00:04:11,310
So some say topples them so tuples some say some other things let's just call them triples.

74

00:04:11,310  -->  00:04:12,050
So what is a tuple.

75

00:04:12,060  -->  00:04:12,660
A tuple.

76

00:04:12,660  -->  00:04:13,850
It's very simple.

77

00:04:13,910  -->  00:04:14,690
It's happened here.

78

00:04:14,880  -->  00:04:17,060
Immutable usable list.

79

00:04:17,190  -->  00:04:21,700
And that's that's like the easiest way to understand it or immutable sequence of values.

80

00:04:21,840  -->  00:04:23,190
The correct definition.

81

00:04:23,190  -->  00:04:28,410
So what is a tuple how we can check on so let's say to you one rule for a list would say square brackets

82

00:04:28,410  -->  00:04:33,520
would say 345 274 and nine hundred and thirty four.

83

00:04:33,540  -->  00:04:33,950
Right.

84

00:04:33,990  -->  00:04:34,820
For a tuple.

85

00:04:34,830  -->  00:04:38,800
Same thing but just use normal parentheses instead of square brackets.

86

00:04:38,970  -->  00:04:41,170
Run that line you've got a triple.

87

00:04:41,280  -->  00:04:42,550
And so what's the difference between.

88

00:04:42,550  -->  00:04:46,830
But well we can still access the elements we can say zero right.

89

00:04:46,870  -->  00:04:50,490
T one one we can still access in the same way.

90

00:04:50,490  -->  00:04:52,270
The only difference is this word.

91

00:04:52,290  -->  00:04:54,600
It's immutable meaning you cannot change it.

92

00:04:54,600  -->  00:04:55,770
So if you try to change it.

93

00:04:55,770  -->  00:05:03,040
So if you say t 1 1 equals 45 you get an error because object does not support item assignment.

94

00:05:03,150  -->  00:05:04,440
Tuples are not.

95

00:05:04,440  -->  00:05:05,610
You cannot change them.

96

00:05:05,640  -->  00:05:13,410
And the reason for that is kind of something that is used mostly and the core of this concept of the

97

00:05:13,410  -->  00:05:18,780
way we're programming things that sometimes you need to parse lists two functions or two objects and

98

00:05:18,780  -->  00:05:23,880
you need to be sure that they are not going to be changed or the function by taking a tuple instead

99

00:05:23,880  -->  00:05:27,870
of a list guarantees to you that there will be no changes made and things like that.

100

00:05:27,870  -->  00:05:33,390
So it's not something that you often frequently use in data analytics or a science is more related to

101

00:05:33,390  -->  00:05:36,590
the actual programming and development that is used in Python.

102

00:05:36,750  -->  00:05:42,090
But still you're going to come across it because quite a few functions in Python that even will be working

103

00:05:42,090  -->  00:05:42,370
with.

104

00:05:42,390  -->  00:05:47,130
They require tuples to be passed to them so it's just good to know how to create a tuple.

105

00:05:47,190  -->  00:05:49,790
Just quickly on the fly to pass into a function.

106

00:05:49,800  -->  00:05:55,650
So just the only thing to remember here is that it's sort of square brackets use parentheses and then

107

00:05:55,710  -->  00:05:59,650
that means that those values or that object cannot be changed.

108

00:05:59,660  -->  00:06:04,560
Are you guaranteed that that object will remain constant for the remainder of its life.

109

00:06:04,560  -->  00:06:08,520
There we go so that is how we create tuples in Python.

110

00:06:08,590  -->  00:06:09,610
Hope intro to this story.

111

00:06:09,630  -->  00:06:11,040
And I look for scenics them.

112

00:06:11,040  -->  00:06:14,070
Until then happy coding.
