1

00:00:03,510  -->  00:00:05,740
Hello.

2

00:00:06,030  -->  00:00:08,580
Welcome back to the course on Python programming.

3

00:00:08,670  -->  00:00:13,460
Today we're talking about basic operations with doorframes.

4

00:00:13,470  -->  00:00:13,940
All right.

5

00:00:13,980  -->  00:00:14,990
So let's get started.

6

00:00:15,030  -->  00:00:22,920
We've already spoken about one type of operation and let's recap on that already spoke about subsetting

7

00:00:23,650  -->  00:00:24,390
refresh.

8

00:00:24,570  -->  00:00:34,520
So if we have our stats data so say stats and and here from here we want to subset CRN columns and rows

9

00:00:34,550  -->  00:00:36,240
Rose let's have a look at that.

10

00:00:36,240  -->  00:00:40,920
I will say stats and then inside a list is going to be a list we need to parse the calls everyone a

11

00:00:40,920  -->  00:00:50,580
subset let's say for a change we're going to subset country code Colma freight and then coma.

12

00:00:50,760  -->  00:00:54,240
Internet users are net users right.

13

00:00:54,240  -->  00:00:59,580
So that's how we can subset just all the three columns and all of the rows if we want a subset set of

14

00:00:59,580  -->  00:01:02,740
rows we can say 4 to 8.

15

00:01:02,940  -->  00:01:04,020
Run that.

16

00:01:04,020  -->  00:01:05,110
And there we go.

17

00:01:05,130  -->  00:01:10,880
We've got the fourth to the eighth row so 8 non-inclusive that's how we subset doorframes.

18

00:01:10,880  -->  00:01:16,420
I think the next thing we're going to talk about so that's number one spoke about subsetting.

19

00:01:16,480  -->  00:01:21,120
Next thing we want to talk about is mathematical operations.

20

00:01:21,150  -->  00:01:25,850
You'll notice that they are very similar to operations with matrices.

21

00:01:26,040  -->  00:01:33,360
So if you want that say result equals and let's say we want to take birth rate and multiplied by Internet

22

00:01:33,360  -->  00:01:36,910
users now it has absolutely no meaning.

23

00:01:36,930  -->  00:01:42,420
This parameter or the resulting calculation has absolutely no meaning whatsoever.

24

00:01:42,420  -->  00:01:48,210
But just for practice sake we're going to multiply these two columns that say result equals stats dot

25

00:01:48,360  -->  00:01:58,260
birth rates multiply by stats Daut enter that users run that as a result.

26

00:01:58,350  -->  00:02:00,450
Same thing head there we go.

27

00:02:00,450  -->  00:02:05,380
So we've got the multiplication of the two hundred and eight is about 10 times.

28

00:02:05,450  -->  00:02:09,950
So an 8 9 or 10 10 something to 70 or 9 which is correct.

29

00:02:10,320  -->  00:02:11,580
OK there we go.

30

00:02:11,580  -->  00:02:14,070
That's how we multiply the two.

31

00:02:14,130  -->  00:02:17,800
You can do division addition subtraction and all those sorts of things.

32

00:02:17,970  -->  00:02:23,010
Very simple so basically Python will know to perform this element by element or row by row.

33

00:02:23,040  -->  00:02:28,690
This operation that's a very powerful feature so you don't have to cycle.

34

00:02:28,710  -->  00:02:33,570
The other option would be to create a loop and go through these rows one by one and do the multiplication

35

00:02:33,570  -->  00:02:34,430
one by one.

36

00:02:34,500  -->  00:02:38,550
Don't have to do that you can just specify the multiplication of column by column and Python will know

37

00:02:38,550  -->  00:02:40,140
what you're talking about.

38

00:02:40,140  -->  00:02:42,010
Similar to what R does.

39

00:02:42,240  -->  00:02:48,280
So now we're going to learn another trick is how to add a column into your doorframe.

40

00:02:48,450  -->  00:02:50,280
So let's have a look at a column.

41

00:02:50,310  -->  00:02:54,050
I'm going to say stats and I'm going to call at a call them my calc.

42

00:02:54,050  -->  00:02:57,650
So basically what you have to do is just pretend that the column already exists.

43

00:02:57,660  -->  00:02:58,520
Now you can do that.

44

00:02:58,530  -->  00:03:02,740
Quick quick approach you can just say that's not my call that won't work.

45

00:03:02,970  -->  00:03:08,320
But you can do the normal approach stats square brackets might cholic equals stats.

46

00:03:08,490  -->  00:03:11,200
And this is basically just take this and copy it.

47

00:03:11,250  -->  00:03:15,110
So we'll say that's where we're going to put our multiplication.

48

00:03:15,540  -->  00:03:20,970
And now if I look at stats dot head you'll see that my calc has appeared here.

49

00:03:20,970  -->  00:03:24,240
So we basically added a column to our doorframe.

50

00:03:24,330  -->  00:03:25,470
Beautiful.

51

00:03:25,470  -->  00:03:27,300
Very very nice.

52

00:03:27,300  -->  00:03:30,670
Now here I want to show you a comparison.

53

00:03:30,780  -->  00:03:33,840
So as we go into this quarter comparing it to our.

54

00:03:34,020  -->  00:03:39,840
And if you haven't taken the of course here had or if you haven't played around with are not a worry

55

00:03:40,470  -->  00:03:43,880
you will be able to recognize these things when you do start learning.

56

00:03:43,880  -->  00:03:48,630
And they'll probably help you or you can always come back and check these things out again when you

57

00:03:48,630  -->  00:03:49,480
are learning.

58

00:03:49,770  -->  00:03:54,960
So in comparison to our You will notice that in our we could have done something like this we could

59

00:03:54,960  -->  00:04:01,530
have said stats x y Zed the section examples directly from the our programming course you could have

60

00:04:01,530  -->  00:04:04,920
said one two three four five.

61

00:04:05,280  -->  00:04:05,830
Right.

62

00:04:06,090  -->  00:04:07,760
And that would have worked.

63

00:04:07,980  -->  00:04:09,320
Let's see if it works here.

64

00:04:09,390  -->  00:04:11,060
It doesn't work here.

65

00:04:11,070  -->  00:04:12,460
Why doesn't it work here.

66

00:04:12,480  -->  00:04:16,660
It says lenth overvalues values does not match length of index.

67

00:04:16,740  -->  00:04:20,570
And basically what that is saying is that you only have five valleys here Carol.

68

00:04:20,580  -->  00:04:23,370
And in your doorframe you have won 95.

69

00:04:23,370  -->  00:04:28,050
What are you thinking how am I supposed to deal with that how am I supposed to put five values into

70

00:04:28,060  -->  00:04:29,850
a column into your daughter frame.

71

00:04:29,850  -->  00:04:33,870
If you have to have one many five you're supposed to give me 195 values.

72

00:04:34,080  -->  00:04:37,000
Right like Logically it makes sense that it doesn't win.

73

00:04:37,010  -->  00:04:39,280
But why would it work in our work.

74

00:04:39,330  -->  00:04:45,090
Well in our we had that concept of recycling vector so in order this would have been a vector and because

75

00:04:45,090  -->  00:04:51,360
it's a vectorize programming language it knows to recycle the vector so long as you supply some values

76

00:04:51,360  -->  00:04:56,610
here what will do is it will take this and it will just basically copy copy copy copy base base base

77

00:04:56,610  -->  00:05:03,390
base base until it has enough values to populate your column with the required 195 values.

78

00:05:03,600  -->  00:05:07,000
As you can see Python does not do that for you.

79

00:05:07,060  -->  00:05:12,150
And there you go that's a nether example vivid example of the difference between a vectorize programming

80

00:05:12,150  -->  00:05:16,160
language A and a non vectorized programming language error.

81

00:05:16,260  -->  00:05:17,850
Let's just type it in the OT.

82

00:05:17,910  -->  00:05:21,600
No recycling option.

83

00:05:21,660  -->  00:05:22,740
All right.

84

00:05:22,740  -->  00:05:23,440
Good.

85

00:05:23,760  -->  00:05:25,320
Good to know.

86

00:05:25,320  -->  00:05:27,030
So what are we going to do next.

87

00:05:27,030  -->  00:05:30,030
Well next we're going to learn how to remove a column.

88

00:05:30,120  -->  00:05:33,820
So let's look at removing a column.

89

00:05:34,020  -->  00:05:34,700
So what.

90

00:05:34,890  -->  00:05:36,180
What are we going to do.

91

00:05:36,180  -->  00:05:39,410
We're going to first look at stat's dot head.

92

00:05:39,540  -->  00:05:43,400
That's our data frame and now we want to remove this call in my calc.

93

00:05:43,490  -->  00:05:45,760
It has no meaning whatsoever.

94

00:05:45,990  -->  00:05:48,160
What were they thinking when they put this column in here.

95

00:05:48,180  -->  00:05:49,250
Let's get rid of it.

96

00:05:49,260  -->  00:05:50,200
So how do we do that.

97

00:05:50,340  -->  00:05:57,990
Well there's a very useful feature and the feature is called stats don't draw.

98

00:05:58,020  -->  00:06:04,440
So the drop method sort of feature it's a method we can specify which Holen we want to get rid of.

99

00:06:04,440  -->  00:06:10,670
So my calc and here see if I run this just like that it'll give me an error why all that.

100

00:06:10,680  -->  00:06:13,500
Because by default it's looking for rows.

101

00:06:13,500  -->  00:06:18,680
So this is used to draw Brosy you can specify which rows you want to drop out of your daughter's frame

102

00:06:18,690  -->  00:06:19,150
.

103

00:06:19,260  -->  00:06:21,380
And now case we want to drop columns.

104

00:06:21,420  -->  00:06:23,380
So we're going to type in one here.

105

00:06:23,400  -->  00:06:25,250
So what I'm going to do is actually I'm going to show another way.

106

00:06:25,280  -->  00:06:31,360
I miss a comma and I'm going to press shift tab on my keyboard and it gives me information.

107

00:06:31,590  -->  00:06:36,820
That's why there are notebooks so lovely gives me information on this function.

108

00:06:36,870  -->  00:06:38,540
So here's his stats.

109

00:06:38,670  -->  00:06:44,260
Return the object with labels requested access removed Stetzer drop labels or display the label my calc

110

00:06:44,270  -->  00:06:44,550
.

111

00:06:44,580  -->  00:06:51,270
Now X is by default is zero then we're not going to worry about these axes for the zero and the zero

112

00:06:51,280  -->  00:06:52,260
is this axis.

113

00:06:52,260  -->  00:06:53,050
Are we here.

114

00:06:53,280  -->  00:06:54,920
Yes they are called axes.

115

00:06:55,170  -->  00:06:56,310
So this is zero.

116

00:06:56,310  -->  00:06:57,700
This is X number 1.

117

00:06:57,810  -->  00:06:59,740
So we are going to say X is 1.

118

00:06:59,970  -->  00:07:01,510
And you notice I don't have to.

119

00:07:01,650  -->  00:07:04,530
I can see if I could shift tab again.

120

00:07:04,530  -->  00:07:11,010
I can say axis equals 1 around that you'll see that that column has been dropped or I don't have to

121

00:07:11,010  -->  00:07:16,390
say axis equals 1 or shift tab because it's going to take them in the order they come.

122

00:07:16,440  -->  00:07:23,670
First of all look for the labels with either one label or a vector or a list of labels and then it will

123

00:07:23,670  -->  00:07:25,390
look for the next parameter in this case one.

124

00:07:25,410  -->  00:07:30,420
It will be like All right so what's the next parameter in the function signature it's axis so that one

125

00:07:30,480  -->  00:07:35,520
must refer to that as was another parameter and would refer to Lebel and other one refer to false.

126

00:07:35,550  -->  00:07:41,070
So you either specify the name equals the value or you can just pass for the value if you know in which

127

00:07:41,070  -->  00:07:42,600
order they come.

128

00:07:42,600  -->  00:07:45,960
So in this case we just say one and that has been dropped.

129

00:07:45,960  -->  00:07:50,530
Which you will notice though is if I look at stats dot head.

130

00:07:51,030  -->  00:07:51,870
It's still here.

131

00:07:51,870  -->  00:07:52,520
How so.

132

00:07:52,530  -->  00:07:54,040
Why didn't we just drop that colon.

133

00:07:54,240  -->  00:07:56,360
Well let's have a look at the function again.

134

00:07:56,430  -->  00:08:03,100
So first shift tab you'll notice here it says return a new object with labels and requested extremum

135

00:08:03,420  -->  00:08:07,280
so returns a new object doesn't modify the previous one.

136

00:08:07,290  -->  00:08:09,930
Let's go down here and look at this.

137

00:08:09,930  -->  00:08:14,330
So how do we fix that up so how do we actually drop it from our object.

138

00:08:14,340  -->  00:08:21,410
Well we'll just replace say stats or drop or actual did here stats equal status.

139

00:08:21,450  -->  00:08:26,860
Drop my calc and now if we look at stats head you'll see that it has been dropped.

140

00:08:26,910  -->  00:08:33,480
So we have to overwrite our doorframe with this new object in order to actually drop it in the door

141

00:08:33,520  -->  00:08:35,200
frame that we working with.

142

00:08:35,250  -->  00:08:35,620
All right.

143

00:08:35,670  -->  00:08:41,220
So those are the things we learnt today about working with doorframes that's quickly recap.

144

00:08:41,220  -->  00:08:45,930
If we go to the top of basic operation so we really know about subsetting and there is a whole tutorial

145

00:08:45,930  -->  00:08:49,660
that we devoted to this topic we just refreshed on it here.

146

00:08:49,680  -->  00:08:53,820
Then we talked about mathematical operations where we learned that you can just multiply columns by

147

00:08:53,820  -->  00:08:58,890
columns and sort of creating a loop and going through every single row and performing that calculation

148

00:08:58,890  -->  00:08:59,180
.

149

00:08:59,220  -->  00:09:05,100
Very powerful feature very similar to what we have in our in terms of vectorized operations.

150

00:09:05,100  -->  00:09:09,660
I'd call them we can add a column just pretend that it's there and populated.

151

00:09:09,660  -->  00:09:16,560
Don't use the short quick method uses a standard method like that and also we quickly compared to our

152

00:09:16,560  -->  00:09:23,670
that there's no recycling option in Python Python does or recycle or lists if they're shorter than your

153

00:09:23,680  -->  00:09:24,510
doorframe.

154

00:09:24,810  -->  00:09:29,670
And finally we learned how to remove a column very very simple process.

155

00:09:29,670  -->  00:09:36,710
Just use the dot drop method and don't forget to specify the access to equal one.

156

00:09:36,780  -->  00:09:38,520
That means columns.

157

00:09:38,520  -->  00:09:39,090
There we go.

158

00:09:39,090  -->  00:09:43,100
Hope you enjoyed today's tutorial and I look forward to seeing you on the next one.

159

00:09:43,140  -->  00:09:44,710
Until then happy coding
