WEBVTT
1

00:00:05.200  -->  00:00:07.860
Hello and welcome back to the course in Python programming.

2

00:00:07.860  -->  00:00:10.320
Today we were talking about matrix operations.

3

00:00:10.350  -->  00:00:15.870
And finally we'll get to play around with our Boscobel daughter and also learn about what kind of operations

4

00:00:15.870  -->  00:00:18.050
they are for matrices in Python.

5

00:00:18.360  -->  00:00:21.300
All right so quickly recap what did we learn last time.

6

00:00:21.420  -->  00:00:27.430
Well we learned that we can access our matrices and information inside matrices using dictionaries.

7

00:00:27.450  -->  00:00:28.370
So let's have a look at.

8

00:00:28.380  -->  00:00:34.200
Let's say we want to look at the salaries matrix which looks like this just because they are to be here

9

00:00:34.470  -->  00:00:35.540
they don't fit on one line.

10

00:00:35.550  -->  00:00:38.890
But basically that's the first row that's the second row and so on.

11

00:00:39.090  -->  00:00:42.120
And what we want is we want to now access a certain player.

12

00:00:42.120  -->  00:00:43.320
So how would we do that.

13

00:00:43.320  -->  00:00:46.020
I would say this would be the role of the player.

14

00:00:46.020  -->  00:00:50.360
This would be a column that we want to access the second year but how do we get information on the role

15

00:00:50.360  -->  00:00:51.150
in the column.

16

00:00:51.300  -->  00:00:55.770
We can use the dictionaries that have been created for us so we can just use the player a dictionary

17

00:00:55.890  -->  00:00:57.170
to find out to watch.

18

00:00:57.170  -->  00:01:01.810
So let's say a LeBron James is on LeBron James.

19

00:01:02.020  -->  00:01:05.470
That's a hash tag that's let's print this.

20

00:01:05.700  -->  00:01:07.700
What role is he on he's on the second row.

21

00:01:07.830  -->  00:01:11.440
And what call them is let's say season dictionary.

22

00:01:11.550  -->  00:01:14.560
What column is 2009 on.

23

00:01:14.910  -->  00:01:20.190
It's on the fourth column and that is including including that nourishes us from zero.

24

00:01:20.190  -->  00:01:21.000
So there we go.

25

00:01:21.010  -->  00:01:23.700
Just take salary and let's say a salary.

26

00:01:23.730  -->  00:01:25.550
We could say two for life.

27

00:01:25.590  -->  00:01:26.520
That's right.

28

00:01:26.520  -->  00:01:32.370
Who gets his salary for that year which was 15 million over 15 million dollars.

29

00:01:32.550  -->  00:01:38.280
Or we can just take this picture and put it in there and take this dictionary and put it in there and

30

00:01:38.280  -->  00:01:38.890
run that.

31

00:01:38.940  -->  00:01:39.540
And there we go.

32

00:01:39.540  -->  00:01:40.820
That's his salary for that year.

33

00:01:40.950  -->  00:01:42.250
So that's what we learned last month.

34

00:01:42.420  -->  00:01:47.620
And now let's learn some matrix operations and what we can do.

35

00:01:47.630  -->  00:01:52.120
We found matrices as we know we have quite a few matrices.

36

00:01:52.200  -->  00:01:57.570
For instance we have field goals which contains information on how many goals each player scored in

37

00:01:57.870  -->  00:01:58.950
which season.

38

00:01:59.370  -->  00:02:06.150
And then let's say we have a Matrix Games which we were quite used to so how many games each player

39

00:02:06.150  -->  00:02:06.690
played.

40

00:02:06.750  -->  00:02:12.060
How would we go about finding out how many field goals per game each player scored.

41

00:02:12.060  -->  00:02:16.710
Right so what would we need to do we would need to take the first value here.

42

00:02:16.710  -->  00:02:24.630
So the first row first column and divide by this then take this value 113 goals scored by Kobe Bryant

43

00:02:24.690  -->  00:02:30.510
in that second year and divided by the number of games he played and there and did that the same thing

44

00:02:30.530  -->  00:02:30.570
.

45

00:02:30.600  -->  00:02:35.550
And so on and so on and then finish that row and move onto the next row so basically would have to have

46

00:02:35.760  -->  00:02:40.980
a loop actually had doubled up so would have to loop across all of the rows and across all of the columns

47

00:02:41.280  -->  00:02:47.430
and perform that operation again and again again until we do that for all of the values in these two

48

00:02:47.430  -->  00:02:48.130
matrices.

49

00:02:48.360  -->  00:02:55.920
So obviously that is way too long and that's why in python we can perform matrix operations very quickly

50

00:02:56.250  -->  00:03:02.490
and let's have a look at that so we can say field goals let's just go into full screen to save some

51

00:03:02.490  -->  00:03:03.360
more space.

52

00:03:03.360  -->  00:03:07.820
So feel the goals divided by games as simple as that.

53

00:03:07.830  -->  00:03:13.260
And so if I run that you'll see that I get this matrix so now we've got a few things to fix up of course

54

00:03:13.270  -->  00:03:18.020
so all right away we've got a bit of a problem here it's not an error it's just a warning.

55

00:03:18.180  -->  00:03:23.400
So here we've got invalid Gallion card in true divide and what that is telling us is that we are dividing

56

00:03:23.400  -->  00:03:25.260
by zero so you can see zero here.

57

00:03:25.260  -->  00:03:29.270
So Derrick Rose doesn't play any games in 2012 because of his injury.

58

00:03:29.340  -->  00:03:32.750
And when you divide zero by zero you get an error.

59

00:03:33.000  -->  00:03:39.930
So to suppress errors in Python or specifically in Jupiter or notebooks what we can do is we can type

60

00:03:39.930  -->  00:03:40.950
in the following code.

61

00:03:41.070  -->  00:03:47.460
So import warnings and then from warnings so far going into too much detail we'll just get rid of these

62

00:03:47.460  -->  00:03:53.340
errors because they're meant to safeguard us from making mistakes but we know with why this error is

63

00:03:53.340  -->  00:03:56.180
coming up it's because we're dividing by zero and we totally fine with it.

64

00:03:56.180  -->  00:03:58.530
So let's just say ignore here.

65

00:03:58.530  -->  00:04:03.730
So just copy this code without going into too much detail on how this works and just copy that around

66

00:04:03.740  -->  00:04:04.150
Atlanta.

67

00:04:04.170  -->  00:04:05.950
You can see that the air is gone.

68

00:04:05.970  -->  00:04:11.020
Now again this matrix doesn't look that aesthetic because there's too much too many decimal points so

69

00:04:11.050  -->  00:04:15.210
we're going to do is we're going to round but we can just use the normal round function so if we try

70

00:04:15.210  -->  00:04:18.450
using the normal round function here we get an error.

71

00:04:18.450  -->  00:04:26.460
Would we need to use is the special matrix drawn function which is in the PI package under matrix and

72

00:04:26.460  -->  00:04:32.460
then dot round if you run that then you will get no errors because that function is designed to work

73

00:04:32.470  -->  00:04:33.690
with matrices.

74

00:04:33.730  -->  00:04:39.720
So as a result for we got is we got one matrix divided by the other what basically happens is the matrix

75

00:04:39.780  -->  00:04:41.890
matrices are divided element by element.

76

00:04:41.910  -->  00:04:44.990
So obviously they have to be of the same size and dimensions.

77

00:04:45.210  -->  00:04:50.480
But once that is condition is met with it just happens every element of each matrix is divided by the

78

00:04:50.480  -->  00:04:52.090
sociate element of the other one.

79

00:04:52.090  -->  00:04:57.270
And so in the result we get a matrix again as we saw and then to that matrix we're applying the round

80

00:04:57.270  -->  00:04:58.980
function for matrices.

81

00:04:59.040  -->  00:05:04.890
And here you can see that not available value does because we're dividing 0 by zero so it just replaces

82

00:05:04.890  -->  00:05:06.600
it with any and and then we go.

83

00:05:06.600  -->  00:05:10.830
So here right away we can see very quickly the field goals per game.

84

00:05:10.830  -->  00:05:16.830
So how many games players scored on average how many goals each player scored per game in every season

85

00:05:16.860  -->  00:05:17.790
on average.

86

00:05:18.000  -->  00:05:24.660
And once again if we want to save this we can always go say it in two field goals for a game something

87

00:05:24.660  -->  00:05:25.530
like that.

88

00:05:25.560  -->  00:05:33.090
So we run that and then we can apply the same concept as before we can access any player using these

89

00:05:33.750  -->  00:05:39.750
quick tools that we've created using dictionaries so we can say Derrick I'm picking on Derrick Rose

90

00:05:40.230  -->  00:05:40.660
here.

91

00:05:40.710  -->  00:05:48.240
Derrick Rose in 2009 on average scored 9 goals per game whereas let's say Kobe Bryant on average score

92

00:05:48.240  -->  00:05:49.720
10 goals per game.

93

00:05:49.740  -->  00:05:54.030
All right so that's how Matrix division works and that's what main operation will be applied.

94

00:05:54.030  -->  00:05:59.760
Of course you can add matrices subtract divide multiply all of those basic operations.

95

00:05:59.880  -->  00:06:04.290
Let's have a look at another one the ones that are most interest to us is the division because that

96

00:06:04.290  -->  00:06:09.060
way we get to normalize these values and find more insights into our data and that's ultimately what

97

00:06:09.060  -->  00:06:12.020
we're doing in this challenge in this section of the course.

98

00:06:12.060  -->  00:06:13.520
So that's another one.

99

00:06:13.980  -->  00:06:17.710
Let's say we want to look at minutes late.

100

00:06:17.940  -->  00:06:22.470
So how many minutes each player play per game on average.

101

00:06:22.470  -->  00:06:22.840
There we go.

102

00:06:22.830  -->  00:06:29.200
So that's another matrix of minutes per game so you can see again not placable here.

103

00:06:29.370  -->  00:06:30.810
And how is this.

104

00:06:30.880  -->  00:06:35.940
Why is this matrix useful like in terms of insights why and why would we want to create this matrix

105

00:06:35.940  -->  00:06:36.340
.

106

00:06:36.360  -->  00:06:40.300
So the reason why I would want to create this matrix is just look at Minutes played by itself.

107

00:06:40.320  -->  00:06:45.180
So what you'll notice here is that because there are crows was recovering from his injury here and Kobe

108

00:06:45.180  -->  00:06:50.100
Bryant also had an injury here it looks like they didn't play that many minutes or so minutes played

109

00:06:50.100  -->  00:06:53.900
you can see it's only 100 Sincero 311 compared to other years.

110

00:06:54.120  -->  00:06:59.550
It's not much when you compare it like that compared it looks like it wasn't much and you can't really

111

00:06:59.550  -->  00:07:02.100
compare them across different seasons.

112

00:07:02.220  -->  00:07:07.170
But at the same time if you divide by the number of games and you get a normalized value what you will

113

00:07:07.170  -->  00:07:08.750
see is now here.

114

00:07:08.760  -->  00:07:14.820
He actually played 31 minutes per game on average which is even more than in a season in the following

115

00:07:14.820  -->  00:07:15.180
season.

116

00:07:15.180  -->  00:07:15.620
Right.

117

00:07:15.870  -->  00:07:16.580
Or here.

118

00:07:16.650  -->  00:07:18.960
Kobe Bryant played 30 minutes per game on average.

119

00:07:18.960  -->  00:07:22.240
It is less but it is still comparable to his other seasons.

120

00:07:22.240  -->  00:07:22.580
Right.

121

00:07:22.830  -->  00:07:28.380
And comparable to other players so that normalization process allows you to come up with more comparable

122

00:07:28.380  -->  00:07:29.420
values like that.

123

00:07:29.730  -->  00:07:34.860
So there we go that's how you can normalize or divide matrices one by the other and perform other matrix

124

00:07:34.860  -->  00:07:36.160
operations as well.

125

00:07:36.450  -->  00:07:42.540
What I'd like to encourage you to do is to play around with that and see what other matrices and what

126

00:07:42.540  -->  00:07:47.790
other insights you can come up with from performing such operations with Matrix matrices that we have

127

00:07:47.790  -->  00:07:48.120
.

128

00:07:48.120  -->  00:07:52.990
For example if we scroll to the top which you'll see here is that we've got that matrix.

129

00:07:53.250  -->  00:07:59.070
So salary's you could play around with that game's an interesting one would be if you look at field

130

00:07:59.070  -->  00:08:01.480
goals divide by field goal attempts.

131

00:08:01.650  -->  00:08:05.880
So field goals is actually how many they got in the net and field goal attempts how many times they

132

00:08:05.880  -->  00:08:07.110
tried to score.

133

00:08:07.110  -->  00:08:12.300
So for instance Kobe Bryant here nine hundred seventy eight basketballs went in the net and he tried

134

00:08:12.300  -->  00:08:17.340
2170 three times right so it would be interesting to divide one by the other and that would give you

135

00:08:17.340  -->  00:08:18.660
the accuracy of the players.

136

00:08:18.660  -->  00:08:24.600
How accurate are they scoring those and see if you can perform that and see what insights you can derive

137

00:08:24.600  -->  00:08:27.840
from them and I'll see you on the next tutorial.

138

00:08:27.840  -->  00:08:29.280
Until then happy coding
