WEBVTT
1

00:00:05.190  -->  00:00:11.330
Hello and welcome back to the course and by programming in today's Sterle we will create some lists

2

00:00:11.360  -->  00:00:11.470
.

3

00:00:11.550  -->  00:00:15.930
So we spoke about how lists work and what they are in the previous tutorial.

4

00:00:15.930  -->  00:00:19.450
Now it's time to get our hands dirty and do some practice.

5

00:00:19.530  -->  00:00:20.910
So let's get started.

6

00:00:20.910  -->  00:00:22.700
I'm going to name this notebook.

7

00:00:22.740  -->  00:00:25.720
Let's create some lists.

8

00:00:26.130  -->  00:00:33.270
And here we just going to start off by creating a very simple list was called My first list equals and

9

00:00:33.270  -->  00:00:35.910
to create a list we just need to use the square brackets.

10

00:00:35.910  -->  00:00:41.910
And in the square brackets we'll just type in some numbers that are going to be the contents of all

11

00:00:41.910  -->  00:00:45.390
lists a list as we remember is a data structure.

12

00:00:45.540  -->  00:00:48.180
So that is how we're going to be storing that information.

13

00:00:48.180  -->  00:00:54.390
So now if I want to ever look at my list I just typed in its name and it prints out those elements that

14

00:00:54.390  -->  00:00:59.270
we put in there and we can also check what's typed this data structure is.

15

00:00:59.340  -->  00:01:04.290
My first list and you'll see that it returns a list indeed.

16

00:01:04.290  -->  00:01:11.160
So this is a bit different to our if you're coming from R there a list or a vector in our would have

17

00:01:11.160  -->  00:01:14.370
a type of the specific elements that it contains.

18

00:01:14.370  -->  00:01:17.770
Because in Python a list can contain a mix of data types.

19

00:01:17.820  -->  00:01:23.640
You can't just say that this list has type integer type a string or boolean because it can contain different

20

00:01:23.640  -->  00:01:25.510
types and that's exactly what you look at now.

21

00:01:25.740  -->  00:01:31.150
So let's say let's create a list to two equals hello then let's put a number.

22

00:01:31.170  -->  00:01:36.960
So we get a string we're going to put a number let's put a boolean and let's put a as an integer.

23

00:01:36.960  -->  00:01:40.370
Now this put a floating number create that.

24

00:01:40.500  -->  00:01:44.390
And if you look at L2 then we've got that list.

25

00:01:44.460  -->  00:01:45.020
There it is.

26

00:01:45.030  -->  00:01:49.440
It contains all four different types of data that we'll be looking at.

27

00:01:49.440  -->  00:01:51.460
So that's pretty handy.

28

00:01:51.480  -->  00:01:58.290
You can make a list as long or as short as you like and the next thing is actually a list can contain

29

00:01:58.380  -->  00:02:07.550
a list as its elements so let's say L3 can be a list of let's say the sentence How're you that will

30

00:02:07.650  -->  00:02:07.920
say.

31

00:02:07.930  -->  00:02:16.690
And number 55 and then we'll add one of our existing lists into there so my first list in there.

32

00:02:16.740  -->  00:02:23.340
So let's run that and look at a list so you can see that we've got the text so that's one element which

33

00:02:23.370  -->  00:02:24.380
is a string.

34

00:02:24.450  -->  00:02:28.410
Then we've got an integer and then the next element is a list.

35

00:02:28.410  -->  00:02:35.000
Now lists of lists are a bit more of a complex topic and we'll get to it further on the course when

36

00:02:35.040  -->  00:02:36.790
we're dealing with matrices will need that.

37

00:02:36.900  -->  00:02:41.700
But it's just good to know for us for now that you can indeed do that you can create a list that not

38

00:02:41.700  -->  00:02:47.010
only contains a mix of data types but actually contains even lists within itself.

39

00:02:47.010  -->  00:02:49.590
Now what I wanted to show you was another function.

40

00:02:49.600  -->  00:02:51.590
So sort of delimiter here.

41

00:02:51.600  -->  00:02:55.320
And look at the next function which is.

42

00:02:55.320  -->  00:02:55.970
Range.

43

00:02:55.980  -->  00:02:57.920
I know we haven't talked about functions a lot.

44

00:02:57.920  -->  00:03:03.120
In fact we've actually touched on range a bit but in general we haven't talked about a lot of our functions

45

00:03:03.480  -->  00:03:05.010
and that tutorial is coming.

46

00:03:05.010  -->  00:03:07.290
Don't worry it's just round the corner.

47

00:03:07.290  -->  00:03:13.140
But nevertheless we will need this function in order to learn how to generate more this.

48

00:03:13.170  -->  00:03:17.180
So here's an example function we're going to be looking at his range which we used.

49

00:03:17.250  -->  00:03:23.280
If you remember for our four loops when we need to generate a range of numbers that we would like to

50

00:03:23.280  -->  00:03:23.970
iterate over.

51

00:03:23.970  -->  00:03:25.000
So let's have a look now.

52

00:03:25.010  -->  00:03:29.160
So if I were on range 15 what I get is a range or to 15.

53

00:03:29.160  -->  00:03:31.740
Now bear with me which is going to change this code a little bit.

54

00:03:31.740  -->  00:03:36.810
We're going to say a list we want to change a range into a list and then we get this.

55

00:03:36.870  -->  00:03:38.220
And I would like to explain all of bit.

56

00:03:38.220  -->  00:03:41.550
So this is Python 3.

57

00:03:41.820  -->  00:03:47.770
So in Python 3 range is an iterator or as some say it's a generator.

58

00:03:47.790  -->  00:03:51.380
It used to be different so in Python 2 range.

59

00:03:51.420  -->  00:03:58.380
So in Python 3 this is the same as x range in Python 2.

60

00:03:58.470  -->  00:04:04.200
So in Python 2 when you used to call range which you would get right away would be a list like this

61

00:04:04.200  -->  00:04:04.370
.

62

00:04:04.380  -->  00:04:09.390
So you just get a list and as beautiful you can iterate over it you can work with it and so on.

63

00:04:09.390  -->  00:04:11.860
So why did this change in Python 3.

64

00:04:12.180  -->  00:04:18.360
Well in Python 3 this change because a lot of the time range is used not because we actually need that

65

00:04:18.360  -->  00:04:20.210
list and need access to it.

66

00:04:20.300  -->  00:04:26.070
I needed to be stored in memory but because a lot of the time we just want to perform some concern aggregation

67

00:04:26.070  -->  00:04:29.040
or calculational over that list then we don't really need the list itself.

68

00:04:29.040  -->  00:04:33.570
So for instance you might want to iterate over that list too you might want to look at the some of that

69

00:04:33.570  -->  00:04:35.950
list or perform some other mathematical operation.

70

00:04:36.200  -->  00:04:44.130
And in that case take up memory for that whole list is not really sensible and therefore in Python 3

71

00:04:44.130  -->  00:04:44.260
.

72

00:04:44.280  -->  00:04:51.740
Now when you create range 15 what it does is it creates this iterator or generator kind of object.

73

00:04:51.900  -->  00:04:56.190
And that means that it will still have the values when you need them but it just won't store them in

74

00:04:56.190  -->  00:04:57.060
memory.

75

00:04:57.090  -->  00:05:01.950
So if you do actually want to change it into a list like we do in our case so we want to create a list

76

00:05:01.950  -->  00:05:05.340
of 15 values of 15 integers 0 to 14.

77

00:05:05.340  -->  00:05:10.040
In that case in Python 3 you need to type in List Range 15.

78

00:05:10.050  -->  00:05:13.710
So basically this used to be in the x range function.

79

00:05:13.710  -->  00:05:19.750
Python 2 and now they decided to change it to the range function so most of the time if used range you

80

00:05:19.790  -->  00:05:21.300
will be using it for these reasons.

81

00:05:21.450  -->  00:05:27.060
But if you actually want a list then you need to put the list word with brackets around range.

82

00:05:27.090  -->  00:05:27.740
So there we go.

83

00:05:27.740  -->  00:05:32.170
And why are we looking at this function because it's very convenient to generate sequences of numbers

84

00:05:32.200  -->  00:05:37.400
instead of sitting there and typing out one two three four five six seven and so on.

85

00:05:37.500  -->  00:05:38.360
It's much easier.

86

00:05:38.360  -->  00:05:41.190
So there's that less or much easier to say.

87

00:05:41.320  -->  00:05:45.410
Let's say we want to put in a memorable ads that say X is like that.

88

00:05:45.420  -->  00:05:47.320
And then we want to look at X..

89

00:05:47.430  -->  00:05:48.150
There it is.

90

00:05:48.150  -->  00:05:51.980
Or we could have said just y equals the list range.

91

00:05:52.170  -->  00:05:54.000
And how many elements do you want.

92

00:05:54.000  -->  00:05:57.780
In total we want so I'll show you in a second how we're going to do that.

93

00:05:57.780  -->  00:06:04.170
So for starters if we want to start from zero we would say eight right and then we'll look at why you'll

94

00:06:04.170  -->  00:06:06.080
see it goes from zero to 7.

95

00:06:06.240  -->  00:06:10.650
But in our case we want to start for one and you can also do that with list range.

96

00:06:10.650  -->  00:06:13.590
So here you would say is red equals a list range.

97

00:06:13.860  -->  00:06:15.510
And here you would say where to start.

98

00:06:15.510  -->  00:06:19.320
So usually if you just specify one value that is where you want to.

99

00:06:19.380  -->  00:06:22.450
And so from 0 up to this value not including this value.

100

00:06:22.470  -->  00:06:26.670
But if you want to start a specific point you just say one Colma That's value.

101

00:06:26.660  -->  00:06:31.780
So if you're on this now and look ahead you'll see that it starts at 1 goes to 7.

102

00:06:31.980  -->  00:06:38.050
So let's practice again let's say Zed 2 and let's say we want to start at 100.

103

00:06:38.130  -->  00:06:40.980
I don't want to go up to 120.

104

00:06:41.100  -->  00:06:45.210
If we run that and look at it two you'll see that we've got that list.

105

00:06:45.240  -->  00:06:46.280
Hundred hundred one.

106

00:06:46.290  -->  00:06:47.970
And so on 119.

107

00:06:48.000  -->  00:06:54.180
Once again remember that this last one is not inclusive so if you actually wanted 120 you type in 121

108

00:06:54.180  -->  00:06:56.390
here were on this line as well.

109

00:06:56.400  -->  00:06:57.860
And there it is 120.

110

00:06:58.290  -->  00:07:01.550
And one more parameter that you can specify for range.

111

00:07:01.890  -->  00:07:09.500
Let's call this double you and let's make this a bit less let's say up to 110 111 110 inclusive.

112

00:07:09.660  -->  00:07:11.340
You can specify what step.

113

00:07:11.340  -->  00:07:13.080
So by default the step is one.

114

00:07:13.170  -->  00:07:17.160
And that's what we're seeing here every time it's incremented by 1 you can specify a different step

115

00:07:17.160  -->  00:07:19.700
you can say for instance to see if I say two.

116

00:07:19.710  -->  00:07:26.250
And I look at Double you you'll see that we get only that even numbers between 100 and 110 because 111

117

00:07:26.410  -->  00:07:29.630
because they a hundred 102 104 and so on.

118

00:07:29.880  -->  00:07:36.080
So if you want something else you could say with a step of 10 from 100 to 200.

119

00:07:36.120  -->  00:07:38.100
Two hundred and one for example.

120

00:07:38.100  -->  00:07:45.260
So if we on that look at w 2 you'll see that we have a 100 110 120 all the way to 200.

121

00:07:45.480  -->  00:07:50.490
So it's a very handy tool in your arsenal if you just want to generate numbers from 0 up to certain

122

00:07:50.490  -->  00:07:56.570
number then you just specify that one number like we did here or you can specify the start to finish

123

00:07:56.580  -->  00:08:00.660
or you can even specify the start the finish and the step.

124

00:08:00.660  -->  00:08:07.230
And it is a convenient tool because it allows you to create lists very quickly and you can use those

125

00:08:07.230  -->  00:08:13.040
for iterations or you can use those for actual computations and just for practice.

126

00:08:13.050  -->  00:08:15.690
Basically it's very handy for practice as well.

127

00:08:15.690  -->  00:08:17.760
So there we go that's how we create lists in Python.

128

00:08:17.760  -->  00:08:23.070
There are several methods we looked at the square Braughler and bracket's method and we looked at using

129

00:08:23.190  -->  00:08:27.300
the range function combined with the list function have a go at that.

130

00:08:27.330  -->  00:08:31.260
Play around with those methods see what kind of lists you can create.

131

00:08:31.380  -->  00:08:38.130
And in the next tutorial we will continue working with lists like for you then and until next time decoding
