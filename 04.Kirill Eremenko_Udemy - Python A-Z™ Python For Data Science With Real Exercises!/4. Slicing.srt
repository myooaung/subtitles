1

00:00:05,320  -->  00:00:08,000
Hello to welcome back to the course in Python programming.

2

00:00:08,130  -->  00:00:14,750
In today's Tauriel we're talking about slicing in Python very juicy word and specific to pie.

3

00:00:14,760  -->  00:00:17,340
Then let's learn what it's all about.

4

00:00:17,340  -->  00:00:17,720
All right.

5

00:00:17,730  -->  00:00:19,700
So here I've got a list.

6

00:00:19,860  -->  00:00:26,490
It's got 10 elements starting from zero all the way 2:09 just got letters A B C D E F G H H H H I J

7

00:00:26,580  -->  00:00:28,050
up to 10 letters.

8

00:00:28,260  -->  00:00:28,560
All right.

9

00:00:28,560  -->  00:00:29,900
So what is slicing.

10

00:00:30,090  -->  00:00:33,540
Well the concept of slicing starts with this operator.

11

00:00:33,540  -->  00:00:34,460
The colon.

12

00:00:34,800  -->  00:00:36,530
What is the colon all about.

13

00:00:36,780  -->  00:00:42,630
Well the colon has two parts to it actually three parts to call and solve and then two parts on either

14

00:00:42,630  -->  00:00:44,430
side on the left and on the right.

15

00:00:44,580  -->  00:00:48,830
So basically you can put something on the left and you can put a value on the right.

16

00:00:48,930  -->  00:00:54,510
Now if you don't put anything by default and by the way the concept what we are talking about in this

17

00:00:54,510  -->  00:00:59,430
whole presentation is what we're putting inside the square brackets so we practice the square brackets

18

00:00:59,430  -->  00:01:02,440
previously a bit and we were just putting numbers and maybe negative numbers.

19

00:01:02,580  -->  00:01:06,720
So you can actually put a colon and two numbers on either side into the square brackets.

20

00:01:06,720  -->  00:01:11,820
Now I'm not specifying the square brackets here just for simplicity sake but we're going to assume that

21

00:01:12,060  -->  00:01:16,050
everything we're doing is going on inside the square brackets and that is yielding results and we'll

22

00:01:16,050  -->  00:01:18,230
see that when we move onto the practical part.

23

00:01:18,450  -->  00:01:18,720
All right.

24

00:01:18,720  -->  00:01:23,720
So the colon if you don't put anything on either side of the call and so you just use the cold by itself

25

00:01:24,060  -->  00:01:26,420
it assumes by default everything.

26

00:01:26,430  -->  00:01:31,580
So it will assume that you want to slice this list from the start to the finish.

27

00:01:31,740  -->  00:01:38,610
And slicing basically means taking a subset out of a list so what we used to call in our subsetting

28

00:01:38,700  -->  00:01:41,640
in Python is called slicing.

29

00:01:41,640  -->  00:01:45,420
Now if I specify something on the left to for example.

30

00:01:45,420  -->  00:01:45,960
Right.

31

00:01:46,230  -->  00:01:47,340
What does that mean.

32

00:01:47,430  -->  00:01:52,830
That means where I want to end my extraction as always in Python.

33

00:01:52,830  -->  00:01:58,580
That actually means not the actual 7 but the number before it's not including that 7.

34

00:01:58,590  -->  00:02:03,570
Similar to what we saw with the range function that we want to go up to 7 but not including 7.

35

00:02:03,630  -->  00:02:11,430
And that means we want to extract these five elements one to check C D E F G and to call on 7 means

36

00:02:11,460  -->  00:02:13,920
extract elements 2 3 4 5 6.

37

00:02:14,100  -->  00:02:17,380
So important to remember that 7 is not inclusive.

38

00:02:17,700  -->  00:02:19,160
Now let's move on.

39

00:02:19,380  -->  00:02:21,440
What else can we learn about slicing.

40

00:02:21,450  -->  00:02:23,860
Well we've already learned about negative indexation right.

41

00:02:23,880  -->  00:02:26,780
So let's introduce our negative indexation here.

42

00:02:26,790  -->  00:02:27,490
There it is.

43

00:02:27,690  -->  00:02:30,350
Minus One two three four five six seven eight nine 10.

44

00:02:30,360  -->  00:02:33,430
Now we can use negative indexation in slicing as well.

45

00:02:33,540  -->  00:02:35,180
It's quite an intuitive thing.

46

00:02:35,180  -->  00:02:35,520
All right.

47

00:02:35,520  -->  00:02:39,510
So if you can use positive indexation why countries negative indexation if they have the same rights

48

00:02:39,530  -->  00:02:39,800
.

49

00:02:40,050  -->  00:02:42,000
Well let's have a look at how it happens.

50

00:02:42,030  -->  00:02:46,170
Let's say I want to replace that too with a minus 8.

51

00:02:46,170  -->  00:02:53,040
I can do that this notation minus eight call and seven is exactly the same as the one I had before to

52

00:02:53,040  -->  00:02:53,890
call on seven.

53

00:02:54,060  -->  00:02:59,220
You just have to look at the positive indexation of negative indexation and you can easily just replace

54

00:02:59,310  -->  00:03:02,910
any positive index with its associated net negative index.

55

00:03:02,910  -->  00:03:04,070
Very simple concept.

56

00:03:04,070  -->  00:03:05,270
There's nothing hidden to it.

57

00:03:05,280  -->  00:03:07,000
No complexities.

58

00:03:07,200  -->  00:03:13,080
You just take the positive index you look at the same negative and have the same elements has and you

59

00:03:13,080  -->  00:03:13,680
can replace it.

60

00:03:13,680  -->  00:03:17,940
So now case we can also replace the 7 with minus 3.

61

00:03:17,970  -->  00:03:22,000
Same thing we will get exactly the same result C D E F G.

62

00:03:22,020  -->  00:03:22,360
All right.

63

00:03:22,380  -->  00:03:24,690
So that's slicing with negative indices.

64

00:03:24,690  -->  00:03:27,190
And now let's move on to some advance slicing.

65

00:03:27,210  -->  00:03:29,170
So what's Ivonne slicing all about Carol.

66

00:03:29,200  -->  00:03:30,250
Sounds pretty serious.

67

00:03:30,390  -->  00:03:32,470
Well there's not much seriousness to it.

68

00:03:32,460  -->  00:03:38,590
There's just a secret part to the colon and that is its twin brother the second colon.

69

00:03:38,790  -->  00:03:43,990
Yes he can actually specify two colons in a row and that means you will have three spots now.

70

00:03:44,090  -->  00:03:46,690
No the first two spots work exactly the same way.

71

00:03:46,710  -->  00:03:51,210
That's where you want to start the second spot is where you want to end so let's go all the way up to

72

00:03:51,210  -->  00:03:53,050
Element 9 and not inclusive.

73

00:03:53,340  -->  00:03:55,330
And so what does a third colon do then.

74

00:03:55,500  -->  00:03:57,950
Well the third colon specifies the step.

75

00:03:58,080  -->  00:04:04,080
You can probably already tell the similarity to the range of function that we used before we also had

76

00:04:04,080  -->  00:04:06,240
start finish and step.

77

00:04:06,240  -->  00:04:08,450
So same thing here so start to finish.

78

00:04:08,460  -->  00:04:10,950
And what step do you want to specify by default.

79

00:04:10,950  -->  00:04:15,160
It's the step of one and that's how you get all elements if we specify something like 2.

80

00:04:15,210  -->  00:04:20,580
That means we only want every second element and that will give us all of the even elements because

81

00:04:20,580  -->  00:04:26,160
we're starting at an even number and well it'll give us all of the even elements except for the very

82

00:04:26,340  -->  00:04:31,580
starting element of a sell us all that even elements between 2 and 8 including 8.

83

00:04:31,580  -->  00:04:33,490
In this case because we went all the way up tonight.

84

00:04:33,690  -->  00:04:39,610
So this notation to Colon nine colon too will return elements to 4 6 8.

85

00:04:39,870  -->  00:04:45,330
And that means the letters C E G and I will be extracted from a list.

86

00:04:45,660  -->  00:04:51,840
Now as you can see it's very very straightforward very simple things and it's just a matter of practicing

87

00:04:51,840  -->  00:04:57,990
to get very comfortable with them and get them to an intuitive level so let's go ahead and do some practice

88

00:04:57,990  -->  00:04:58,500
.

89

00:04:58,500  -->  00:05:00,000
All right there we go.

90

00:05:00,000  -->  00:05:01,150
So there's our code.

91

00:05:01,290  -->  00:05:05,390
Let's start by creating our list.

92

00:05:05,400  -->  00:05:09,390
We'll call it letters and we'll call it would create exactly that list that we spoke about just now

93

00:05:09,390  -->  00:05:10,200
.

94

00:05:10,200  -->  00:05:10,470
All right.

95

00:05:10,470  -->  00:05:11,250
So there is a list.

96

00:05:11,250  -->  00:05:12,330
Let's run it.

97

00:05:12,330  -->  00:05:14,950
Now if I look at letters there it is.

98

00:05:15,070  -->  00:05:20,080
Now as discussed if I say letters then square brackets and then I just say the colon.

99

00:05:20,100  -->  00:05:23,330
So with nothing on either side that means start at the beginning.

100

00:05:23,490  -->  00:05:27,540
So basically this means start at the beginning and at the end of your list.

101

00:05:27,570  -->  00:05:28,530
Run that.

102

00:05:28,710  -->  00:05:33,440
And once again of course the spaces are not necessary you can just say call on or for the spaces you

103

00:05:33,440  -->  00:05:34,470
get the full list.

104

00:05:34,470  -->  00:05:38,540
OK so that's a full very very big slice.

105

00:05:38,550  -->  00:05:45,600
All right so now if I say something else let's say letters and I want to start at two and go to the

106

00:05:45,600  -->  00:05:46,560
very end.

107

00:05:46,740  -->  00:05:48,950
I can do that so I start at sets.

108

00:05:49,010  -->  00:05:52,850
ERO that's the one that's two and go to the very end.

109

00:05:52,860  -->  00:05:55,200
So as you can see that's exactly what I expect.

110

00:05:55,230  -->  00:06:00,980
Same thing I can go letters and start at the beginning but only up till I'm in number seven.

111

00:06:01,590  -->  00:06:11,160
So that is 0 1 2 3 4 5 6 7 so not including 7 so move back a bit and take those elements and that's

112

00:06:11,160  -->  00:06:11,850
exactly what I got.

113

00:06:11,950  -->  00:06:13,350
AB CD g.

114

00:06:13,620  -->  00:06:20,050
Ok so now let's look at another example that same letters 2 2 7.

115

00:06:20,240  -->  00:06:21,920
That's the example that we had.

116

00:06:21,930  -->  00:06:23,520
Again there's all letters.

117

00:06:23,610  -->  00:06:32,820
So that's 0 1 2 3 4 5 6 Remember 7 is all inclusive so we get C D E F G just as we said in the presentation

118

00:06:32,820  -->  00:06:33,260
.

119

00:06:33,390  -->  00:06:39,840
Beautiful and now this practice said negative indexation let's say letters and we'll start with what

120

00:06:39,840  -->  00:06:40,270
was it.

121

00:06:40,380  -->  00:06:46,980
So two we can replace with what can replace two of minus one minus two three four five six seven eight

122

00:06:46,980  -->  00:06:47,010
.

123

00:06:47,010  -->  00:06:51,950
We can replace with minus eight and go up to seven so we should get exactly the same result.

124

00:06:51,990  -->  00:06:53,060
Let's have a look.

125

00:06:53,340  -->  00:06:55,250
Actually let's zoom in a bit.

126

00:06:55,250  -->  00:06:57,990
There you go letters minus eight seven.

127

00:06:57,990  -->  00:07:01,380
So there we go that's exactly that same result.

128

00:07:01,380  -->  00:07:05,220
Now we can look at replacing seven as well.

129

00:07:05,220  -->  00:07:08,900
So we can say minus 8 to minus 3.

130

00:07:08,910  -->  00:07:10,950
So there we go c d e f g.

131

00:07:11,070  -->  00:07:12,880
Beautiful same result again.

132

00:07:12,930  -->  00:07:13,780
All right.

133

00:07:13,890  -->  00:07:15,620
And what else did we want to look at.

134

00:07:15,660  -->  00:07:20,340
And now we wanted to look at some advanced advanced slicing.

135

00:07:20,340  -->  00:07:20,810
All right.

136

00:07:20,820  -->  00:07:23,100
What did we want to have a look at.

137

00:07:23,130  -->  00:07:30,360
Let's say letters and we'll look at exactly that example that we spoke about so to call on 9 that gives

138

00:07:30,360  -->  00:07:32,830
us a CD G H I.

139

00:07:33,000  -->  00:07:40,330
But this time we want same thing letters to call them a 9 and we want a step up two.

140

00:07:40,410  -->  00:07:42,540
So C E G I.

141

00:07:42,690  -->  00:07:48,170
Let's look at letters again and see what we got we got we started this as 0 1 2.

142

00:07:48,160  -->  00:07:55,310
We started here see and we got C E N G and then we got I.

143

00:07:55,320  -->  00:07:57,380
Because this is element number nine.

144

00:07:57,380  -->  00:07:58,520
Go back to 8.

145

00:07:58,560  -->  00:08:01,380
And that was our step of to beautiful.

146

00:08:01,410  -->  00:08:05,890
So that is how we work with the advanced colon as well.

147

00:08:06,240  -->  00:08:12,300
And what else we can do is we can specify for instance a step or three if we wanted to we could say

148

00:08:12,300  -->  00:08:15,370
letters brackets and then just say three.

149

00:08:15,390  -->  00:08:18,510
So we want to start at a step of three.

150

00:08:18,540  -->  00:08:24,860
So 1 2 3 1 2 3 1 2 3.

151

00:08:24,870  -->  00:08:31,440
So as you can see we've got four elements are there are four step three so you can do all sorts of different

152

00:08:31,620  -->  00:08:38,550
combinations like that and allows you to slice your list very very quickly and efficiently like that

153

00:08:38,570  -->  00:08:38,800
.

154

00:08:39,000  -->  00:08:40,230
So have a play around with that.

155

00:08:40,230  -->  00:08:42,130
That is what slicing is all about.

156

00:08:42,210  -->  00:08:47,700
And I've got a little challenge for you try specifying following up on what we talked about last about

157

00:08:47,730  -->  00:08:49,560
exploring and asking questions.

158

00:08:49,560  -->  00:08:54,540
Try specifying a negative step for your Slice see what happens there.

159

00:08:54,540  -->  00:09:00,270
So what would a negative step do so if you for example just leave it like that exactly like that and

160

00:09:00,270  -->  00:09:01,640
specify here minus one.

161

00:09:01,650  -->  00:09:02,910
What will happen.

162

00:09:02,910  -->  00:09:08,490
And based on that try to experiment and put in some values at where you want to start where you want

163

00:09:08,490  -->  00:09:10,690
to finish and a negative step.

164

00:09:10,710  -->  00:09:15,660
It'll be quite interesting very similar to what we just discussed is just going to be a bit backwards

165

00:09:15,680  -->  00:09:15,710
.

166

00:09:15,720  -->  00:09:21,390
That's the hint I'm sure you'll be able to figure it out and I'll leave you on that note until next

167

00:09:21,390  -->  00:09:22,580
time happy coding

168

00:09:24,810  -->  00:09:27,130
.
