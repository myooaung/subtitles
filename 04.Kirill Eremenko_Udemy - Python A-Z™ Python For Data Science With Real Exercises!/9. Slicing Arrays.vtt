WEBVTT
1

00:00:05.070  -->  00:00:05.580
Alone.

2

00:00:05.640  -->  00:00:07.990
Welcome back to the course and the programming.

3

00:00:08.070  -->  00:00:12.950
Today we're going to talk about a very quick concept but nevertheless it's that important.

4

00:00:13.050  -->  00:00:19.200
I thought it's worthwhile creating a separate tutorial for this concept and the concept is about slicing

5

00:00:19.200  -->  00:00:19.760
arrays.

6

00:00:19.950  -->  00:00:25.230
So we've already spoken about slicing Lisanne we talked about that in a lot of detail so where did you

7

00:00:25.230  -->  00:00:27.550
know that we can take a list which we have here.

8

00:00:27.660  -->  00:00:29.480
This is the list from our previous tutorial.

9

00:00:29.670  -->  00:00:35.040
So we have a list here of four elements and we can take for instance everything from elements of number

10

00:00:35.040  -->  00:00:42.650
one on words or we can take everything between element number 0 and 0 1 2.

11

00:00:42.840  -->  00:00:44.040
And just look at that.

12

00:00:44.040  -->  00:00:50.820
So that will be element 0 element 1 and 2 is not inclusive or we can take everything and then just move

13

00:00:50.820  -->  00:00:51.890
a step of two.

14

00:00:51.900  -->  00:00:57.810
So basically take the element of number 0 element number 1 element for number two because the step is

15

00:00:57.810  -->  00:00:59.670
true so we know all those things.

16

00:00:59.670  -->  00:01:01.770
Now can we slice arrays in a similar way.

17

00:01:01.860  -->  00:01:03.030
Well yes we can.

18

00:01:03.040  -->  00:01:03.960
Yes of course we can.

19

00:01:03.960  -->  00:01:05.280
So let's have a look at that.

20

00:01:05.520  -->  00:01:06.740
So there is our array.

21

00:01:06.760  -->  00:01:14.130
And now if we slice it we say A and for example we'll say everything for all element with number 2.

22

00:01:14.130  -->  00:01:17.820
So 0 1 2 from 5 and 546 onwards.

23

00:01:18.120  -->  00:01:25.410
Iran that you have the rest of the array or you can say a basically everything from 2 to element with

24

00:01:25.410  -->  00:01:31.980
number so that 0 1 2 3 4 element will say Almont for Selby's 0 1 2.

25

00:01:31.980  -->  00:01:38.250
So from here 3 but not including 4 so it will be up to here so just those two elements for on that and

26

00:01:38.250  -->  00:01:38.700
so on.

27

00:01:38.820  -->  00:01:45.360
But the important thing about slicing arrays is that whenever you slice an array you don't create a

28

00:01:45.360  -->  00:01:46.680
copy of that array.

29

00:01:46.680  -->  00:01:53.030
So if lists you're creating another list that has those values and therefore you can just work with

30

00:01:53.030  -->  00:01:54.240
it separate with arrays.

31

00:01:54.270  -->  00:01:57.930
You're not creating a new other copy that's important to remember.

32

00:01:57.930  -->  00:02:03.500
So if I say something like this let's say a B equals that slice.

33

00:02:03.510  -->  00:02:04.370
You might think that.

34

00:02:04.410  -->  00:02:06.680
Oh yes I've created another array It's called B.

35

00:02:06.690  -->  00:02:11.600
Now I can look at what actually you've just created is a view of the array.

36

00:02:11.610  -->  00:02:18.110
So now if I say A B and for example I say what is element 0 in B is 546.

37

00:02:18.110  -->  00:02:23.030
Correct this error B that's only 506 or let's say what it is.

38

00:02:23.040  -->  00:02:23.630
What are you.

39

00:02:23.670  -->  00:02:30.840
I want to take all the elements of A B right there find 4 6 and turn 15 and let's say I want to assign

40

00:02:30.840  -->  00:02:33.380
them a value of 111.

41

00:02:33.690  -->  00:02:34.230
Let's do that.

42

00:02:34.230  -->  00:02:38.170
So I'm going to assign B those that value all the elements be that.

43

00:02:38.250  -->  00:02:40.830
So there we go now B has two elements.

44

00:02:40.830  -->  00:02:47.100
Well now if you look at a just ray which you'll find is that these two values have also been replaced

45

00:02:47.110  -->  00:02:47.150
.

46

00:02:47.190  -->  00:02:50.330
So as I remember they were 5:46 on 15.

47

00:02:50.370  -->  00:02:56.210
They have been replaced and that is important to remember when you creating a slice of an array.

48

00:02:56.520  -->  00:03:02.700
You're not creating a new array you're actually just working with that same old array you just creating

49

00:03:02.700  -->  00:03:04.140
a view of that array.

50

00:03:04.560  -->  00:03:05.510
So why does that happen.

51

00:03:05.520  -->  00:03:09.630
Well there's just a way that Python or some PI protects the memory of the computer.

52

00:03:09.630  -->  00:03:15.690
So if you create copies and copies of arrays then necessarily then that will just take up memory space

53

00:03:15.690  -->  00:03:15.840
.

54

00:03:15.870  -->  00:03:21.840
So Python automatically an umpire protect protects us that way if we want to actually create a copy

55

00:03:21.840  -->  00:03:22.590
of an array.

56

00:03:22.590  -->  00:03:23.630
Then we can always do that.

57

00:03:23.640  -->  00:03:30.420
We can always just say for instance or a C equals array a dot and then we can look up the function and

58

00:03:30.420  -->  00:03:34.230
we need our method and it's called copy so we just say copy and that way.

59

00:03:34.230  -->  00:03:37.110
Now we've create our A C which is a copy of our array.

60

00:03:37.230  -->  00:03:43.290
And if we say and we change make changes to or a C let's say let's put a 0 in the first element and

61

00:03:43.290  -->  00:03:46.960
then we look at C so you can see we replace zero here and we look at a.

62

00:03:47.010  -->  00:03:49.390
You can see that it's still as it used to be.

63

00:03:49.410  -->  00:03:55.650
So you can always make a copy but you have to call this method and so to tell non-pilot that yes actually

64

00:03:55.650  -->  00:03:57.930
I do want to make a copy I know what I'm doing.

65

00:03:57.990  -->  00:04:02.270
I'm not going to be just using the computer's resources by accident.

66

00:04:02.280  -->  00:04:06.540
So there we go that's how we work with arrays when we slice them.

67

00:04:06.540  -->  00:04:11.790
Just remember that that's an important point that whenever you slice an array you're not actually making

68

00:04:11.790  -->  00:04:12.180
a copy.

69

00:04:12.180  -->  00:04:17.190
You're making a are you creating a view of that same array so if you make changes to the slice you're

70

00:04:17.190  -->  00:04:20.100
going to make changes to the original array.

71

00:04:20.340  -->  00:04:21.480
Have a play around with that.

72

00:04:21.600  -->  00:04:24.530
Give it some practice so just to let that knowledge sink in.

73

00:04:24.600  -->  00:04:26.200
And I look forward see next them.

74

00:04:26.310  -->  00:04:30.010
Until then happy coding.
