WEBVTT
1

00:00:05.250  -->  00:00:06.370
Hello and welcome back.

2

00:00:06.370  -->  00:00:07.940
Of course violent programming.

3

00:00:08.040  -->  00:00:10.920
Today we're finally looking at functions in Python.

4

00:00:11.100  -->  00:00:16.530
I know we've already been working our functions so much and it feels like we know them so well that

5

00:00:16.860  -->  00:00:21.600
even feels that we don't really need this tutorial but nevertheless let's solidify all of the knowledge

6

00:00:21.600  -->  00:00:23.640
that we've gathered about around functions.

7

00:00:23.640  -->  00:00:28.020
Talk about how they work what they're for and have a look at a couple of examples.

8

00:00:28.020  -->  00:00:28.320
All right.

9

00:00:28.320  -->  00:00:30.110
So how two functions work.

10

00:00:30.180  -->  00:00:35.570
And first question Carol why do you have a blender and fruit and berries on this image.

11

00:00:35.730  -->  00:00:41.640
Well because this in my head is one of the best representations of how functions work and what their

12

00:00:41.640  -->  00:00:49.800
purpose is I think of a function as a blender you input fruit and berries into a blender and then you

13

00:00:49.800  -->  00:00:51.980
click a button and it does its magic.

14

00:00:51.990  -->  00:00:55.280
And in the end you have a wonderful delicious smoothie.

15

00:00:55.400  -->  00:00:56.550
And that's what functions do.

16

00:00:56.550  -->  00:00:58.160
So they take some inputs.

17

00:00:58.230  -->  00:01:04.170
They perform some calculations or some other durations and then they give you an output which you further

18

00:01:04.170  -->  00:01:06.910
use in your program for whatever purposes you like.

19

00:01:06.910  -->  00:01:13.120
So they're a aggregator or a convenient modifier of the information that you pass on to them.

20

00:01:13.350  -->  00:01:19.170
So let's have a quick look at some examples that functions that we've been working with and some a couple

21

00:01:19.170  -->  00:01:20.760
of new function as well.

22

00:01:20.950  -->  00:01:23.250
All right so where is our Python and notebooks.

23

00:01:23.250  -->  00:01:24.020
There it is.

24

00:01:24.180  -->  00:01:25.440
And let's get started.

25

00:01:25.440  -->  00:01:29.370
So we already talked about quite a few functions I'm just going to mention a couple of them that we've

26

00:01:29.370  -->  00:01:30.300
discussed before.

27

00:01:30.540  -->  00:01:34.640
So first thing we're going to create a list right so how do we create a list.

28

00:01:34.650  -->  00:01:40.080
We can either use the square brackets or we know over function we know function which has range.

29

00:01:40.080  -->  00:01:47.130
So there is a range and it takes some parameters like a blender takes berries and fruit as inputs so

30

00:01:47.130  -->  00:01:53.070
does the range function take parameters so let's say we want to start our range at 20 and we want to

31

00:01:53.070  -->  00:01:56.570
go all the way up to 30 including 30 so we're going to put 31.

32

00:01:56.700  -->  00:02:02.120
So you fire on that as we discussed in Python 3 we don't actually get a list.

33

00:02:02.130  -->  00:02:07.830
We get a generator or iterator and therefore if one turned to list Babsy is another function.

34

00:02:07.830  -->  00:02:12.010
So this function list will convert something into a list.

35

00:02:12.030  -->  00:02:16.130
Right that's its purpose and that's the type of smoothies that it makes.

36

00:02:16.140  -->  00:02:20.370
So that's what we're going to do we are going to take this range and we're going to pass it to that

37

00:02:20.370  -->  00:02:21.260
list.

38

00:02:21.330  -->  00:02:24.030
So if I run this now now I get a list.

39

00:02:24.030  -->  00:02:30.420
Now I can use this and put it into a storage facility like the smoothy that you get from a blender you

40

00:02:30.420  -->  00:02:32.880
put it into a gloss for example.

41

00:02:32.910  -->  00:02:40.230
So here we go into say my least one and I'm going to pass it this output so for on this I get my list

42

00:02:40.230  -->  00:02:46.660
one for on my list one now it contains that result so we started with these inputs Twain 10:31.

43

00:02:46.740  -->  00:02:52.290
We got a range that range was an input for the next function which was a list and the list function

44

00:02:52.290  -->  00:02:54.790
returned an actual list which we now have.

45

00:02:54.810  -->  00:02:56.130
And we can use for other purposes.

46

00:02:56.130  -->  00:02:57.640
And that's exactly what we're going to do.

47

00:02:57.900  -->  00:03:00.080
So that's two functions that we talked about already.

48

00:03:00.210  -->  00:03:01.140
Here's another one.

49

00:03:01.210  -->  00:03:03.000
We know this function print.

50

00:03:03.000  -->  00:03:07.100
So if we print my last one it will output it onto the screen.

51

00:03:07.380  -->  00:03:09.160
There we go that's how we.

52

00:03:09.210  -->  00:03:12.690
The proper way of printing things onto our screen.

53

00:03:12.710  -->  00:03:16.740
Another function that we already kind of touched on is the len function.

54

00:03:16.800  -->  00:03:18.960
So let's get the lenth of this list.

55

00:03:18.960  -->  00:03:20.270
My last one.

56

00:03:20.460  -->  00:03:20.840
There we go.

57

00:03:20.840  -->  00:03:26.580
So that's tells us that there are 11 elements so as you can see we're passing this function Lenda quite

58

00:03:26.580  -->  00:03:29.600
a lot of information we parsing it all these values.

59

00:03:29.660  -->  00:03:31.740
And plus the indexation.

60

00:03:31.740  -->  00:03:36.930
So there's a lot of information in this list and the output is just one number and that's the purpose

61

00:03:36.930  -->  00:03:37.740
of that function.

62

00:03:37.740  -->  00:03:41.450
It counts the number of elements and gives you that result.

63

00:03:41.460  -->  00:03:46.140
Let's look at another function that say type so same thing.

64

00:03:46.140  -->  00:03:51.360
My last one parsing the exact set the exact same inputs so you can see all these three cases repulsing

65

00:03:51.360  -->  00:03:57.240
the same inputs Majlis one function print but this result is different to this result and it's going

66

00:03:57.240  -->  00:03:59.330
to be different Pteris this result.

67

00:03:59.370  -->  00:04:02.230
So here is just printing the list.

68

00:04:02.250  -->  00:04:07.620
This one is telling us how many values and this one is telling what type of object we're dealing with

69

00:04:07.630  -->  00:04:07.970
.

70

00:04:08.310  -->  00:04:08.610
All right.

71

00:04:08.610  -->  00:04:09.140
Great.

72

00:04:09.270  -->  00:04:12.270
And let's have a look at two more so these are two new ones.

73

00:04:12.270  -->  00:04:13.710
Very straightforward functions.

74

00:04:13.710  -->  00:04:20.820
So Max if we take max of my list one will get the maximum value and it will take men of my list.

75

00:04:20.820  -->  00:04:22.640
One we get the minimum value.

76

00:04:22.920  -->  00:04:27.800
And also you can use max and min for other purposes you can pass values to them.

77

00:04:27.960  -->  00:04:29.780
You can just pass them values not in a list.

78

00:04:29.790  -->  00:04:36.240
You can say 11 403 7 some like that it will still work like that so this function can be passed the

79

00:04:36.240  -->  00:04:39.680
list or just a series of values and so on.

80

00:04:39.690  -->  00:04:47.580
So that is how functions work and a good point to make here is that the core of Python actually doesn't

81

00:04:47.580  -->  00:04:54.470
have that many useful functions it's surprisingly very lean on content.

82

00:04:54.460  -->  00:04:56.940
So and that is the design on purpose.

83

00:04:56.970  -->  00:05:00.290
Python was created that way to make it as efficient as possible.

84

00:05:00.300  -->  00:05:06.990
And then in order to expand the functions that are available to you need to include packages you need

85

00:05:06.990  -->  00:05:12.990
to include add ons to your Piscean in order to make it more robust and to include more optimization

86

00:05:13.490  -->  00:05:17.630
patches or mathematical packages of packages for doorframes and so on.

87

00:05:17.940  -->  00:05:22.690
And that's what we're going to talk about in the next tutorial where we're talking about packages.

88

00:05:22.800  -->  00:05:25.010
So hopefully functions are pretty straightforward.

89

00:05:25.020  -->  00:05:27.650
And by now you're very comfortable with that we're ready.

90

00:05:27.660  -->  00:05:30.400
Let's jump straight into the next tutorial and I'll see you there.

91

00:05:30.400  -->  00:05:32.140
Until next time happy coding
