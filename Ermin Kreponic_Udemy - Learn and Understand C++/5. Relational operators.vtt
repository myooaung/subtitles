WEBVTT

1
00:00:00.091 --> 00:00:02.030
Welcome back,
so.

2
00:00:02.181 --> 00:00:06.685
Relational operators are operators
that define relationship

3
00:00:07.106 --> 00:00:09.215
between two operands.

4
00:00:09.891 --> 00:00:14.665
So the relations can be
less than, equal than, etc.

5
00:00:14.801 --> 00:00:17.480
So you have these relational
operators that are

6
00:00:17.741 --> 00:00:18.411
like this.

7
00:00:18.971 --> 00:00:19.480
So you have

8
00:00:19.621 --> 00:00:20.780
greater than

9
00:00:22.011 --> 00:00:25.225
greater than, ooops sorry.

10
00:00:25.841 --> 00:00:27.510
greater than or equal

11
00:00:29.836 --> 00:00:30.645
What else

12
00:00:31.091 --> 00:00:31.925
shall we place?

13
00:00:32.111 --> 00:00:33.505
equal, equal

14
00:00:34.030 --> 00:00:36.706
Let's go all the way.

15
00:00:38.056 --> 00:00:39.495
So not equal, well,

16
00:00:40.541 --> 00:00:43.230
equal equal sign means equals.

17
00:00:43.441 --> 00:00:44.135
And

18
00:00:44.556 --> 00:00:47.545
when you just type in
a single equal sign,

19
00:00:47.681 --> 00:00:49.015
then you're assigning a value.

20
00:00:49.366 --> 00:00:53.286
So exclamation equals means
not equal too.

21
00:00:54.656 --> 00:00:57.165
And what else we got?
We got

22
00:00:57.980 --> 00:01:00.041
less than or equal

23
00:01:00.185 --> 00:01:00.816
to

24
00:01:00.951 --> 00:01:02.505
and I do believe that I'm

25
00:01:02.646 --> 00:01:04.966
missing one more which
is less than.

26
00:01:07.406 --> 00:01:08.403
Yes, that should be it.

27
00:01:08.906 --> 00:01:10.860
Anyway, the result

28
00:01:11.166 --> 00:01:12.025
of

29
00:01:12.841 --> 00:01:15.786
these relational operators.
So if you have

30
00:01:16.231 --> 00:01:19.686
2 variables or 2 expressions
on two sides

31
00:01:20.455 --> 00:01:22.286
of this relational operator,

32
00:01:22.661 --> 00:01:23.431
the

33
00:01:23.566 --> 00:01:25.281
result is a boolian.

34
00:01:25.631 --> 00:01:28.855
So we'll get a boolian value
as a result.

35
00:01:29.416 --> 00:01:31.745
Let's go ahead and write a
small piece of code

36
00:01:31.881 --> 00:01:34.385
and have a look at how this
actually works, so.

37
00:01:35.130 --> 00:01:35.685
int

38
00:01:36.381 --> 00:01:37.270
let's say,

39
00:01:37.406 --> 00:01:38.635
this is 10

40
00:01:39.171 --> 00:01:42.075
y is equal to

41
00:01:42.211 --> 00:01:43.023
5

42
00:01:43.231 --> 00:01:44.980
set shall be equal to

43
00:01:45.115 --> 00:01:47.225
15 and w

44
00:01:47.761 --> 00:01:52.050
shall be equal to 10.

45
00:01:52.706 --> 00:01:53.216
Here we go.

46
00:01:54.891 --> 00:01:56.301
Down below we will type in

47
00:01:56.746 --> 00:01:57.605
bool

48
00:01:58.466 --> 00:01:59.926
I don't know,

49
00:02:00.391 --> 00:02:02.385
rel, relational operator

50
00:02:03.641 --> 00:02:04.895
example 1

51
00:02:05.570 --> 00:02:06.636
equals

52
00:02:07.800 --> 00:02:08.631
x

53
00:02:09.051 --> 00:02:10.335
is greater

54
00:02:10.470 --> 00:02:10.938
than

55
00:02:11.071 --> 00:02:11.745
y

56
00:02:14.741 --> 00:02:15.530
Do you believe

57
00:02:15.761 --> 00:02:19.010
or do you consider that
this statement is true or false?

58
00:02:19.271 --> 00:02:22.726
Basically I'm asking you,
is x greater than y?

59
00:02:23.401 --> 00:02:24.335
I am stating

60
00:02:24.471 --> 00:02:26.025
that x, I'm stating it

61
00:02:26.166 --> 00:02:28.020
basically x is greater than y.

62
00:02:28.325 --> 00:02:28.933
And then

63
00:02:29.066 --> 00:02:30.040
we are

64
00:02:30.531 --> 00:02:32.415
evaluating. We're looking at it and

65
00:02:32.551 --> 00:02:33.833
we're thinking, well, is it

66
00:02:33.966 --> 00:02:35.220
true or not?

67
00:02:36.035 --> 00:02:36.828
Well, let's take a look.

68
00:02:36.961 --> 00:02:37.795
x is 10

69
00:02:38.796 --> 00:02:39.791
and y is 5.

70
00:02:40.005 --> 00:02:42.091
So is 10 greater than 5?

71
00:02:42.396 --> 00:02:44.321
Yes, it is. Therefore,

72
00:02:44.646 --> 00:02:45.946
the result of this will
be true.

73
00:02:46.081 --> 00:02:48.965
It will be the same as
though we have

74
00:02:49.710 --> 00:02:50.776
assigned

75
00:02:52.311 --> 00:02:53.470
a value

76
00:02:54.030 --> 00:02:54.980
of true

77
00:02:55.631 --> 00:02:59.415
to the boolian variable,
rel1.

78
00:02:59.926 --> 00:03:01.643
So this here,

79
00:03:01.970 --> 00:03:04.343
and this here, this is
pretty much

80
00:03:04.476 --> 00:03:05.010
the same.

81
00:03:05.996 --> 00:03:09.865
Except here when one of the
values alters the condition,

82
00:03:10.001 --> 00:03:12.460
the result of the condition
can change as well

83
00:03:12.596 --> 00:03:13.485
to false.

84
00:03:14.836 --> 00:03:18.776
Okay so, we can type in
bool

85
00:03:19.131 --> 00:03:20.201
rel2

86
00:03:20.336 --> 00:03:21.610
equals

87
00:03:22.521 --> 00:03:26.440
y is greater than x.

88
00:03:28.046 --> 00:03:29.186
So, is y greater than x?

89
00:03:29.321 --> 00:03:30.670
Why is 5,

90
00:03:30.806 --> 00:03:31.601
x is 10?

91
00:03:31.736 --> 00:03:33.315
Is 5 greater than 10?

92
00:03:33.450 --> 00:03:34.346
No, of course not.

93
00:03:34.481 --> 00:03:36.400
It's not, therefore,
it's false.

94
00:03:36.681 --> 00:03:37.665
Well, I don't know, maybe it is.

95
00:03:37.801 --> 00:03:39.815
It depends in which universe
you live, but hey.

96
00:03:40.375 --> 00:03:41.395
That's completely up to you.

97
00:03:42.070 --> 00:03:42.695
Just kidding.

98
00:03:42.906 --> 00:03:43.461
Here,

99
00:03:43.695 --> 00:03:44.970
5 is less than 10.

100
00:03:47.711 --> 00:03:48.825
Sometimes

101
00:03:50.151 --> 00:03:52.675
lose a little bit of control
and say hey,

102
00:03:52.936 --> 00:03:54.765
completely with the wrong things

103
00:03:55.631 --> 00:03:57.005
that can be a little bit

104
00:03:57.140 --> 00:03:57.786
confusing but

105
00:03:58.300 --> 00:03:59.016
hopefully

106
00:03:59.205 --> 00:04:00.225
it will do no harm.

107
00:04:00.991 --> 00:04:01.670
So anyway,

108
00:04:01.806 --> 00:04:04.266
now I'm going to assign
the following

109
00:04:04.401 --> 00:04:06.935
to the rel3 variable.

110
00:04:07.261 --> 00:04:08.535
It will be x

111
00:04:08.911 --> 00:04:11.705
equals equals z

112
00:04:14.276 --> 00:04:16.525
is x equals to z

113
00:04:17.596 --> 00:04:20.055
So look, this is the expression

114
00:04:20.286 --> 00:04:21.610
that's being evaluated.

115
00:04:21.981 --> 00:04:23.215
And this is the assignment
operators.

116
00:04:23.351 --> 00:04:25.345
So this is the relational.

117
00:04:25.746 --> 00:04:28.481
This is the relational operator
and this is the assignment operator.

118
00:04:30.505 --> 00:04:33.080
We are going to assign

119
00:04:33.780 --> 00:04:35.356
the result of this

120
00:04:35.541 --> 00:04:37.605
to the variable rel3.

121
00:04:38.541 --> 00:04:40.345
Is x equal to z?

122
00:04:41.231 --> 00:04:42.690
Well, x is 10,

123
00:04:42.836 --> 00:04:43.900
and z is 15,

124
00:04:44.086 --> 00:04:45.786
so obviously, no.

125
00:04:45.921 --> 00:04:46.365
It is not

126
00:04:46.501 --> 00:04:47.430
in this universe anyway.

127
00:04:48.986 --> 00:04:49.573
Therefore,

128
00:04:49.706 --> 00:04:51.545
the result will be no.

129
00:04:51.681 --> 00:04:53.026
The result will be false.

130
00:04:53.330 --> 00:04:54.860
rel3 will be

131
00:04:55.165 --> 00:04:55.926
false.

132
00:04:57.646 --> 00:04:58.850
Let's go a little bit further.

133
00:04:59.271 --> 00:05:00.545
rel4

134
00:05:00.681 --> 00:05:02.685
These are really really
simple examples

135
00:05:03.036 --> 00:05:05.030
but this can get complicated
really fast.

136
00:05:06.425 --> 00:05:07.096
And

137
00:05:08.026 --> 00:05:08.630
as I said,

138
00:05:08.770 --> 00:05:10.741
these basics are important
to us.

139
00:05:17.511 --> 00:05:19.386
So you have

140
00:05:19.521 --> 00:05:21.540
rel4 which is equal to

141
00:05:21.701 --> 00:05:23.280
x is,

142
00:05:23.445 --> 00:05:23.936
which is

143
00:05:24.071 --> 00:05:25.906
equal to whatever the
result of this is.

144
00:05:26.041 --> 00:05:28.040
So x not equal to z.

145
00:05:28.506 --> 00:05:30.626
x is 10, z is 15,
so obviously,

146
00:05:30.761 --> 00:05:33.145
x is not equal to 15, henceforth,

147
00:05:33.361 --> 00:05:36.655
this shall be true and
the value of rel4 will be true.

148
00:05:42.415 --> 00:05:43.575
Let's go ahead and

149
00:05:43.736 --> 00:05:45.761
give a few more examples.
So, I don't know

150
00:05:45.896 --> 00:05:47.335
rel6

151
00:05:48.241 --> 00:05:50.745
shall be assigned the
result of

152
00:05:50.890 --> 00:05:54.098
x is greater than or equal to

153
00:05:54.231 --> 00:05:54.790
w

154
00:05:56.091 --> 00:05:56.901
x is 10

155
00:05:57.345 --> 00:05:58.180
w is 10

156
00:05:58.926 --> 00:05:59.686
so

157
00:06:00.086 --> 00:06:03.241
10 is definitely not
greater than 10

158
00:06:03.521 --> 00:06:05.918
but 10 is equal to 10.

159
00:06:06.051 --> 00:06:07.915
Therefore, this is also true.

160
00:06:08.050 --> 00:06:10.901
rel6 will

161
00:06:11.161 --> 00:06:13.325
be assigned the value of

162
00:06:13.460 --> 00:06:13.966
true.

163
00:06:16.081 --> 00:06:19.610
Okay, so let's take a look a
little bit at the negation as well.

164
00:06:20.286 --> 00:06:21.033
bool

165
00:06:21.166 --> 00:06:22.025
rel

166
00:06:23.026 --> 00:06:23.535
7

167
00:06:24.281 --> 00:06:25.746
shall be equal to,

168
00:06:25.881 --> 00:06:26.535
let's go ahead

169
00:06:26.671 --> 00:06:29.758
and negate this,
open parenthesis

170
00:06:30.061 --> 00:06:32.171
x is greater than

171
00:06:32.381 --> 00:06:33.310
w

172
00:06:35.471 --> 00:06:37.403
And this is pretty much

173
00:06:37.536 --> 00:06:38.741
the same

174
00:06:38.976 --> 00:06:40.700
as x

175
00:06:40.836 --> 00:06:43.556
is lesser or equal

176
00:06:43.691 --> 00:06:45.381
than w, which is

177
00:06:45.546 --> 00:06:46.150
true.

178
00:06:48.891 --> 00:06:49.593
x is

179
00:06:49.726 --> 00:06:51.050
greater than w.

180
00:06:51.886 --> 00:06:52.650
x is 10

181
00:06:53.675 --> 00:06:54.461
w is 10

182
00:06:55.346 --> 00:06:56.250
obviously

183
00:06:56.811 --> 00:06:58.966
this is going to be
evaluated to false.

184
00:06:59.620 --> 00:07:01.736
Right? Because 10 is not
greater than 10.

185
00:07:01.871 --> 00:07:03.715
10 is equal to 10.

186
00:07:04.031 --> 00:07:06.820
However, since this expression
here will be evaluated

187
00:07:06.956 --> 00:07:09.585
to false and then it will
be negated,

188
00:07:09.721 --> 00:07:13.871
the total of this expression
will be evaluated to true.

189
00:07:14.316 --> 00:07:15.731
Because you get false

190
00:07:16.081 --> 00:07:18.151
and then you flip it with
negation here,

191
00:07:18.286 --> 00:07:20.420
and you get true.
So rel7

192
00:07:20.726 --> 00:07:23.800
will be assigned a value
of true.

193
00:07:26.621 --> 00:07:28.205
Okay, so.

194
00:07:31.570 --> 00:07:32.380
We can

195
00:07:32.776 --> 00:07:33.570
go ahead and

196
00:07:33.706 --> 00:07:34.260
have,

197
00:07:34.726 --> 00:07:36.908
we can have more than
one value

198
00:07:37.326 --> 00:07:38.051
like this.

199
00:07:38.186 --> 00:07:40.040
We can put them into sandwich,
so to say.

200
00:07:40.950 --> 00:07:41.851
We type in

201
00:07:42.271 --> 00:07:42.966
bool

202
00:07:43.781 --> 00:07:45.415
rel8

203
00:07:46.241 --> 00:07:47.585
is equal to 12

204
00:07:48.566 --> 00:07:50.001
is greater than x,

205
00:07:50.401 --> 00:07:52.705
is greater than 7.

206
00:07:55.576 --> 00:07:58.825
So, is x greater than 7?

207
00:08:00.221 --> 00:08:01.426
Is x greater than 7?

208
00:08:02.751 --> 00:08:04.380
I don't know, is it?

209
00:08:05.121 --> 00:08:06.650
Yes, it is, so.

210
00:08:07.096 --> 00:08:09.235
The value of x is 10.

211
00:08:09.370 --> 00:08:11.435
And 10 is definitely greater than 7.

212
00:08:11.806 --> 00:08:13.705
And is x lesser than 12?

213
00:08:13.841 --> 00:08:15.680
Yes, it is lesser than...

214
00:08:18.821 --> 00:08:21.300
Is x lesser than 12?
Yes, it is.

215
00:08:21.651 --> 00:08:23.090
So this will compile

216
00:08:23.721 --> 00:08:24.626
definitely.

217
00:08:24.761 --> 00:08:25.790
However,

218
00:08:26.506 --> 00:08:27.386
it is not correct.

219
00:08:28.176 --> 00:08:30.335
Because it evaluates

220
00:08:30.476 --> 00:08:32.495
to false. There was a problem.

221
00:08:32.901 --> 00:08:35.280
Why? it goes from left to right.

222
00:08:36.095 --> 00:08:37.136
So it goes like this.

223
00:08:37.301 --> 00:08:38.646
Imagine that you had

224
00:08:39.741 --> 00:08:40.945
a parenthesis here

225
00:08:41.876 --> 00:08:43.545
and parenthesis is here.

226
00:08:44.571 --> 00:08:47.846
Strictly theoretically speaking,
this is not actually wrong.

227
00:08:47.981 --> 00:08:49.210
It will compile

228
00:08:49.541 --> 00:08:51.255
and there is no problem but

229
00:08:53.556 --> 00:08:56.085
it can be very confusing.

230
00:08:56.761 --> 00:08:57.340
You see,

231
00:08:57.806 --> 00:08:59.405
since we're going from
left to right,

232
00:09:00.126 --> 00:09:02.215
this is the first thing that
will be evaluated.

233
00:09:02.586 --> 00:09:04.590
And it will be asked whether 12

234
00:09:04.725 --> 00:09:06.696
is greater than x or not.

235
00:09:07.371 --> 00:09:07.980
And

236
00:09:08.115 --> 00:09:08.606
12

237
00:09:08.741 --> 00:09:09.390
is

238
00:09:09.716 --> 00:09:11.340
definitely greater than x

239
00:09:11.900 --> 00:09:12.368
so

240
00:09:12.501 --> 00:09:13.570
this will be true.

241
00:09:14.196 --> 00:09:16.470
And then it will,

242
00:09:18.121 --> 00:09:20.160
then you will get a

243
00:09:20.581 --> 00:09:23.180
weird looking thing where

244
00:09:23.671 --> 00:09:24.836
a boolian true

245
00:09:24.971 --> 00:09:27.013
will be stated to be greater than

246
00:09:27.361 --> 00:09:27.871
7.

247
00:09:28.921 --> 00:09:29.636
So, yeah.

248
00:09:30.891 --> 00:09:31.430
As I said,

249
00:09:31.566 --> 00:09:34.071
this will compile but
it is not correct.

250
00:09:34.330 --> 00:09:36.881
Because it will evaluate to false.

251
00:09:38.045 --> 00:09:41.061
12 is greater than x
and that is

252
00:09:41.295 --> 00:09:41.763
true.

253
00:09:41.896 --> 00:09:42.716
So you'll get

254
00:09:42.851 --> 00:09:44.265
true greater than 7.

255
00:09:44.636 --> 00:09:46.245
And true has the value of

256
00:09:46.380 --> 00:09:47.005
1

257
00:09:47.146 --> 00:09:50.100
so that is 1 greater than 7
which is

258
00:09:50.235 --> 00:09:51.695
false. I know it's weird, look.

259
00:09:54.345 --> 00:09:55.966
This part gets evaluated first.

260
00:09:56.711 --> 00:09:57.290
Very weird.

261
00:09:57.921 --> 00:10:00.331
And it will state true.

262
00:10:00.465 --> 00:10:03.100
And then the next thing
it will be evaluated is

263
00:10:03.236 --> 00:10:04.696
true greater than 7.

264
00:10:05.441 --> 00:10:06.510
But true

265
00:10:06.720 --> 00:10:07.978
has the value of

266
00:10:08.111 --> 00:10:10.385
1, the numerical value of 1.

267
00:10:10.876 --> 00:10:14.660
And this actually looks
like this, 1

268
00:10:15.010 --> 00:10:15.733
greater

269
00:10:15.866 --> 00:10:16.700
than 7.

270
00:10:16.891 --> 00:10:19.226
So this will be final condition
that will be evaluated

271
00:10:19.361 --> 00:10:20.325
from this statement.

272
00:10:20.675 --> 00:10:23.831
And 1 is definitely not greater
than 7, henceforth,

273
00:10:23.995 --> 00:10:25.616
the final result will be

274
00:10:28.105 --> 00:10:28.730
false.

275
00:10:29.800 --> 00:10:30.401
Therefore,

276
00:10:30.961 --> 00:10:32.445
rel8

277
00:10:32.751 --> 00:10:34.581
will have the final value of

278
00:10:34.746 --> 00:10:35.371
false.

279
00:10:36.996 --> 00:10:38.226
Be very careful with these things.

280
00:10:38.361 --> 00:10:40.710
I have deliberately shown
you these example

281
00:10:40.851 --> 00:10:42.310
so that you would,

282
00:10:43.126 --> 00:10:45.106
so that you would understand
that there are

283
00:10:45.241 --> 00:10:46.935
a lot of logical complexities

284
00:10:47.261 --> 00:10:51.050
here that go beyond the
compiler checking gears

285
00:10:51.186 --> 00:10:53.715
for you. You actually have to
watch what you are

286
00:10:53.946 --> 00:10:56.146
writing. There is no syntax here.
There are no problems.

287
00:10:56.281 --> 00:10:58.125
Even without the parenthesis
here,

288
00:10:58.451 --> 00:11:00.075
it will compile,

289
00:11:00.331 --> 00:11:02.970
the machine will work on it but

290
00:11:03.701 --> 00:11:04.906
it will go from left to right

291
00:11:05.041 --> 00:11:07.365
and you might not get
the result you wanted to get.

292
00:11:09.141 --> 00:11:12.265
Anyway, the final

293
00:11:12.500 --> 00:11:13.786
example that I would like
to show you

294
00:11:13.921 --> 00:11:15.500
here and then I'm going to
call it

295
00:11:15.636 --> 00:11:16.795
a day with this,

296
00:11:17.146 --> 00:11:18.745
with the operands here,

297
00:11:20.396 --> 00:11:22.715
with the logical and
relational operands.

298
00:11:23.296 --> 00:11:24.290
You will

299
00:11:24.946 --> 00:11:27.103
basically a rewrite of this.

300
00:11:27.406 --> 00:11:28.985
To put it in a correct way.

301
00:11:31.126 --> 00:11:33.555
bool rel9

302
00:11:35.046 --> 00:11:36.368
and it will be

303
00:11:37.506 --> 00:11:38.690
equals to 12

304
00:11:39.596 --> 00:11:41.010
greater than x.
Okay.

305
00:11:41.145 --> 00:11:42.196
So we have that.

306
00:11:43.081 --> 00:11:44.516
What we wanted to achieve here,

307
00:11:45.446 --> 00:11:46.745
if we move the parenthesis,

308
00:11:46.911 --> 00:11:48.005
we wanted to say,

309
00:11:48.141 --> 00:11:52.155
we wanted to evaluate this
entire expression as true

310
00:11:52.415 --> 00:11:55.011
if x was greater than 7
and lesser than 12.

311
00:11:55.501 --> 00:11:58.480
However, that is not what's
going to happen here

312
00:11:58.616 --> 00:12:00.516
due to the reasons explained
a moment ago.

313
00:12:01.051 --> 00:12:03.378
But if we wanted it to be like that,

314
00:12:03.511 --> 00:12:05.670
we would need to write it like this.

315
00:12:06.881 --> 00:12:10.395
And then we would say
x greater than 7.

316
00:12:11.711 --> 00:12:12.495
So now,

317
00:12:13.476 --> 00:12:14.215
it will state

318
00:12:15.471 --> 00:12:16.073
like this.

319
00:12:16.421 --> 00:12:17.930
12 greater than x

320
00:12:18.065 --> 00:12:20.506
okay, 12 is greater than 10,

321
00:12:20.905 --> 00:12:22.316
so this is going to be true.

322
00:12:24.666 --> 00:12:25.245
Ooops.

323
00:12:26.971 --> 00:12:27.586
true

324
00:12:27.721 --> 00:12:30.280
and then it will state
that x is greater than 7.

325
00:12:30.611 --> 00:12:34.486
So x is greater than 7.
10 is greater than 7, yes.

326
00:12:35.185 --> 00:12:35.831
So.

327
00:12:37.460 --> 00:12:38.735
true and

328
00:12:39.851 --> 00:12:40.506
true

329
00:12:40.641 --> 00:12:41.615
will yield

330
00:12:41.751 --> 00:12:42.146
true.

331
00:12:42.426 --> 00:12:45.720
Therefore, rel9 will be
assigned a value of

332
00:12:46.296 --> 00:12:47.510
true.
Simple as that.

333
00:12:48.511 --> 00:12:50.320
So I just want to show the,

334
00:12:50.901 --> 00:12:53.185
I guess illogically incorrect
way of doing this

335
00:12:53.321 --> 00:12:56.340
and logically correct way
of doing this.

336
00:12:56.476 --> 00:12:58.285
So to say because

337
00:12:58.451 --> 00:13:01.581
you're not technically making
a syntax here or anything that

338
00:13:01.771 --> 00:13:04.040
the compiler might find
illegal here.

339
00:13:04.186 --> 00:13:06.310
Just making a logical error.

340
00:13:06.445 --> 00:13:08.386
Anyway, that would be it.

341
00:13:08.521 --> 00:13:09.945
I bid you farewell

342
00:13:10.081 --> 00:13:11.266
and we're going to go ahead and

343
00:13:11.401 --> 00:13:12.865
to jump into the next tutorial.

