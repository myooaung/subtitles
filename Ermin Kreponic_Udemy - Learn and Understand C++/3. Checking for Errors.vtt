WEBVTT

00:00.810 --> 00:01.910
Dar una buena acogida.

00:02.040 --> 00:07.350
Así que vamos a seguir adelante y saltar a la última sección de este capítulo.

00:07.650 --> 00:10.660
Echemos un vistazo a otro ejemplo aquí.

00:10.680 --> 00:19.390
La función devuelve el estado de la llamada y no la información que estamos buscando.

00:19.650 --> 00:24.360
Entonces obtenemos información usando los parámetros de la función.

00:24.360 --> 00:25.500
Veamos a qué me refiero con eso.

00:25.500 --> 00:30.410
Entonces, ante todo, podemos continuar y eliminar todo esto de nuestro trabajo duro.

00:30.420 --> 00:31.920
Bueno, no es necesario que lo elimines.

00:31.920 --> 00:36.300
Quiero decir que lo estoy borrando, puedes guardarlo o comentarlo o lo que sea.

00:36.750 --> 00:43.280
Entonces debe escribir el nombre subrayado del coche.

00:43.350 --> 00:45.130
Los nombres son arbitrarios.

00:47.180 --> 00:53.930
Entonces, lo que deberíamos hacer aquí es obtener la información sobre el.

00:53.930 --> 01:01.910
Con respecto al nombre del BIOS, el nombre de la computadora se colocará en una matriz como una cadena en C.

01:01.970 --> 01:08.080
La longitud de una matriz no debe ser mayor que la longitud permitida del nombre de la computadora.

01:08.240 --> 01:12.030
Esto está predefinido en Windows.

01:12.470 --> 01:14.450
Vamos y hagamos esto.

01:14.480 --> 01:21.890
Escriba emacs para subrayar el nombre del

01:24.490 --> 01:28.970
ordenador llamando más uno.

01:28.970 --> 01:33.920
Entonces, ¿cómo sabemos cuál es la longitud máxima del nombre de la computadora?

01:34.310 --> 01:39.040
Bueno, tenemos una constante que nos da esa información y adivina qué.

01:39.040 --> 01:47.970
Es la longitud máxima del nombre de la computadora y más 1 es básicamente para el terminador nulo al final, de modo que ese

01:47.990 --> 01:52.960
no es el nombre real, el más uno es el terminador nulo al final.

01:52.970 --> 02:00.620
La longitud máxima del nombre de la computadora es la variable que extraemos de la API de Windows y obtenemos que

02:00.620 --> 02:06.260
obtengan la longitud y de esa manera hemos definido el tamaño de nuestra matriz de caracteres.

02:06.270 --> 02:12.600
C cadena para funcionar pero el nombre de la computadora acepta dos parámetros.

02:12.620 --> 02:22.670
El primero es una matriz en la que colocará el nombre y el segundo es el tamaño de esa matriz.

02:23.240 --> 02:30.680
Entonces continuemos y ejecutemos la función pero devolverá verdadero o falso dependiendo del éxito de la llamada

02:30.740 --> 02:34.520
sobre si la llamada fue exitosa o no.

02:34.520 --> 02:55.240
Lo que necesitamos hacer es escribir un largo firmado en que son nuestros líderes un tamaño genial de nombre com y tamaño si recuerda para

02:55.240 --> 03:04.420
el capítulo anterior que estábamos hablando sobre el tamaño del tamaño

03:07.040 --> 03:16.370
de char bhool éxito es igual a obtener nombre de computadora

03:21.610 --> 03:24.790
subrayado nombre let .

03:24.820 --> 03:26.610
Lo suficientemente justo.

03:26.680 --> 03:29.570
Espera, ¿por qué escribí esto con mayúsculas?

03:31.710 --> 03:32.190
Toro.

03:32.200 --> 03:33.840
Aquí vamos.

03:33.900 --> 03:36.020
Bhajis allí.

03:36.070 --> 03:37.060
Excelente.

03:37.060 --> 03:41.080
Entonces esto básicamente creará un booleano.

03:41.730 --> 03:45.120
OK otra parte.

03:45.340 --> 03:48.160
Entonces esto creará un booleano llamado éxito.

03:48.160 --> 03:55.730
Este éxito en auge tendrá el valor de retorno de esta función que toma dos parámetros.

03:55.840 --> 04:02.170
Como dije, si acepta la matriz en la que colocará el nombre y luego acepta el tamaño de

04:02.230 --> 04:02.910
esa matriz.

04:04.080 --> 04:11.220
Aquí está el tamaño de todos modos vamos a seguir adelante y escriba obtener nuestra declaración IF.

04:11.240 --> 04:15.340
Entonces si es exitoso

04:15.340 --> 04:23.680
Por lo tanto, si esto es así, si la llamada fue exitosa, el nombre subrayado con calma mantendrá el

04:23.680 --> 04:25.480
nombre de la computadora.

04:25.510 --> 04:37.910
Entonces, ¿qué queremos hacer? Queremos básicamente crear una impresión para que el nombre del nombre de la computadora de

04:42.590 --> 04:55.930
los EE. UU. Y nuestra teoría funcionen básicamente crearán una impresión de un nombre bien más; si la llamada no

04:55.930 --> 05:00.910
fue exitosa, nos gustaría verla Qué salió mal.

05:01.630 --> 05:05.610
Y créeme más a menudo que no las cosas irán mal.

05:05.610 --> 05:09.550
Las cosas irán al sur y tendrás que hacer algo al respecto.

05:09.580 --> 05:13.510
Lo primero que debe hacer al respecto es descubrir qué fue lo que salió mal y, para

05:13.510 --> 05:16.330
que usted se dé cuenta, el compilador lo ayudará a salir del curso.

05:16.330 --> 05:25.200
Pero me refiero a que el depurador te será útil, pero también querrás tener tus propias

05:25.200 --> 05:28.690
declaraciones de depuración para poder ayudarte.

05:28.910 --> 05:38.970
La palabra que somos iguales es igual a excepción del último error.

05:39.340 --> 05:40.380
DE ACUERDO.

05:40.840 --> 05:44.490
Y luego Cindy C

05:48.380 --> 05:53.630
falló la llamada a la función.

05:56.230 --> 05:56.680
Error.

05:57.130 --> 06:09.010
Y luego va a ser algo, pero ese algo es lo que eres, estás en una L. A. área por lo que obtendrá el nombre de

06:09.040 --> 06:13.620
la computadora o no obtendrá el nombre de la computadora.

06:13.630 --> 06:25.720
Habrá real Vamos a ejecutarlo y también podría tener algunos errores de errores de sintaxis. Veamos qué

06:25.960 --> 06:27.320
salió mal.

06:27.320 --> 06:31.850
Com nombre no fue declarado en este ámbito.

06:32.000 --> 06:42.030
Veo el error de iceage mal escrito, la compañía de nombre com y el nombre común de la compañía parece ser funcional.

06:42.210 --> 06:44.160
¿Cuál fue el primero aquí?

06:44.770 --> 06:50.010
La longitud máxima de la línea del nombre de la computadora no se declaró en este ámbito.

06:51.120 --> 06:51.930
Nombre

06:56.130 --> 06:56.880
máximo

07:02.050 --> 07:06.430
vinculado a él.

07:07.130 --> 07:08.380
Oh ok.

07:09.230 --> 07:10.930
Un poco de error ortográfico de mi parte.

07:12.120 --> 07:12.570
Aquí vamos.

07:12.570 --> 07:15.690
Tan neto por el nombre de la computadora de EE. UU. No lo sé.

07:15.690 --> 07:18.570
Este es un nombre genérico de mi máquina virtual.

07:18.570 --> 07:22.800
Realmente no me molesté en canjearlo o algo así.

07:25.210 --> 07:42.770
Pero puedes seguir adelante y el descenso común y el éxito de Pit Bull equivalen a falso y veamos qué pasa.

07:42.780 --> 07:46.030
Ahora la función llamada falla.

07:46.110 --> 07:46.730
0.

07:46.740 --> 07:47.430
Hmm.

07:47.820 --> 07:48.600
DE ACUERDO.

07:48.610 --> 07:55.010
Entonces, aunque la llamada a la función falló, dice que el error cero no tiene sentido.

07:55.090 --> 08:00.220
El valor de retorno de una función es cero, lo que significa que realmente tuvo éxito.

08:00.220 --> 08:01.590
Por qué esto es tan.

08:01.960 --> 08:11.290
Bueno, la función no falló en absoluto, la función funcionó solo para todo lo

08:11.380 --> 08:12.530
que funcionó.

08:12.820 --> 08:15.080
No hubo fallas de ningún tipo.

08:15.100 --> 08:20.640
Es solo que he cambiado el éxito de este spool para poder eliminarlo.

08:21.280 --> 08:26.860
Necesito que lo sepas porque si devuelve cero, pasó muy bien.

08:27.100 --> 08:29.770
Podría ser lógica o alguna otra cosa que te estás perdiendo.

08:29.770 --> 08:33.040
No necesariamente tiene que ser un error de sintaxis o algo así.

08:33.040 --> 08:35.800
También podría ser un error de lógica.

08:36.030 --> 08:39.520
De todos modos, así que tenemos esto.

08:39.520 --> 08:43.380
Obtiene el nombre de la computadora si logra hacerlo bien.

08:43.660 --> 08:44.310
Si no es así

08:44.380 --> 08:49.860
Es una lástima que recibas un mensaje de error y te dará el error.

08:49.900 --> 08:51.810
Te va a dar el último error.

08:52.510 --> 08:58.480
Y sobre la base de eso, puede salir a la red y comenzar a buscar lo que eso

08:58.720 --> 09:03.210
significa y el problema, porque de todos modos eso es lo que hago.

09:03.290 --> 09:08.950
Conclusión siendo la moraleja de la historia, la API de Windows es muy útil para ser preciso.

09:08.960 --> 09:16.540
Sin la API de Windows no podríamos escribir ningún programa que requiera cosas que básicamente no están

09:16.540 --> 09:25.180
especificadas dentro de los estándares de C ++ y eso es solo para darle un ejemplo de una aplicación GUI.

09:25.180 --> 09:35.410
Así que el código bloquea el eclipse de Firefox, etc. todos utilizan una u otra cosa de la API de Windows. La

09:36.820 --> 09:44.440
API de Windows contiene miles de funciones que utilizamos para que nuestros programas sean más modulares y para

09:44.500 --> 09:48.280
que nuestros programas utilicen elementos específicos del sistema.

09:49.730 --> 09:56.880
Es posible que me tenga, quiero decir que tomo lo que he dicho en la conclusión con un grano de sal, especialmente con

09:56.880 --> 09:59.180
respecto a los programas que usan Windows API.

09:59.460 --> 10:04.520
Pero como dije esta API de Windows es extremadamente útil.

10:04.530 --> 10:10.410
Hace que nuestras vidas sean mucho más fáciles y mucho mejores cuando estamos tratando de crear

10:10.420 --> 10:15.880
una aplicación que se pretende ejecutar en Windows, especialmente las protecciones de la GUI.

10:16.320 --> 10:23.670
De todos modos voy a decirte adiós aquí y terminar el capítulo también echarles un vistazo como el final por favor.

10:23.670 --> 10:28.340
Si planea hacer algo con la API de Windows, salga y eche un vistazo.

10:28.350 --> 10:30.910
Va a ser extremadamente útil.

10:30.990 --> 10:32.750
Va a ser realmente útil para ti.

10:33.080 --> 10:33.640
DE ACUERDO.

10:33.780 --> 10:38.550
Entonces, llamemos a este capítulo y saltemos al siguiente.
