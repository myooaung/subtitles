WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:04.830
Ok, so welcome back. Today, I'm gonna go ahead and explain the so-called goto

00:00:04.830 --> 00:00:10.950
loop that is not exactly a loop, but can
be used to simulate one. So, I did not say

00:00:10.950 --> 00:00:15.450
goto to is actually a loop, it is
something like a loop or that simulates

00:00:15.450 --> 00:00:21.520
one. Now, what you are about to see on the

00:00:21.520 --> 00:00:28.439
screen actually, that's not this. Why
did I delete the whole thing? Anyway,

00:00:28.439 --> 00:00:36.880
what you are about to see on the screen, no definitely not what I want, this is

00:00:36.880 --> 00:00:44.410
from the last chapter. Anyway, what you're
about to see on the screen is purely for

00:00:44.410 --> 00:00:50.239
illustrative and
demonstrative purposes only. That is you

00:00:50.239 --> 00:00:56.510
really shouldn't program like this. I just
want to show you how goto is used, and

00:00:56.510 --> 00:01:02.719
once I show it to you remember it and
then don't use it ever again, so to say.

00:01:02.719 --> 00:01:06.500
Well, I mean you will be able to use it
later on but it's just not really

00:01:06.500 --> 00:01:10.350
recommended way of going about things
because it can cause a

00:01:10.350 --> 00:01:15.189
lot of problems, and it can cause a lot of
infinite repetition, it can cause

00:01:15.189 --> 00:01:20.830
logic problems as well. So, here goes
nothing,

00:01:20.830 --> 00:01:26.580
here's how not to do things. "int main()"
but you do need to know it, I  mean

00:01:26.580 --> 00:01:29.740
because you will encouter it in the code
sooner or later and you do need to know

00:01:29.740 --> 00:01:38.060
what it is and how it functions. "int i = 1;"
and the way this works is that

00:01:38.060 --> 00:01:41.970
the goto statement it consists of
the following, you have a label and you

00:01:41.970 --> 00:01:46.130
have a goto label. Label is the starting
point from which the part og a program

00:01:46.130 --> 00:01:51.689
should start executing, that is we can
put our label here, "AGAIN:" let's call it again.

00:01:51.689 --> 00:01:56.100
So, the label name is arbitrary. So,
this is the starting point of the

00:01:56.100 --> 00:02:01.240
execution and then you have a goto
label which is the part where we specify

00:02:01.240 --> 00:02:06.880
the execution to go backwards or
forwards or forward to our label. So,

00:02:06.880 --> 00:02:11.290
our label will be used in the goto
statement and the goto statement will

00:02:11.290 --> 00:02:14.989
instruct program to go back to the AGAIN

00:02:15.550 --> 00:02:20.840
label, or to go forward to the AGAIN label,
one way or the other. And here we shall

00:02:20.840 --> 00:02:31.060
type in "std::cout &lt;&lt; i &lt;&lt;   std::endl;"

00:02:31.670 --> 00:02:43.120
Ok, then "++i;" and now we shall have

00:02:43.120 --> 00:02:48.890
some sort of an if statement here to have a condition, and now you will see why

00:02:48.890 --> 00:02:54.250
this is actually simulating a loop. And
down below I shall simply type

00:02:54.250 --> 00:03:01.579
"goto AGAIN;" So, this name is
arbitrary, you can name it pretty much

00:03:01.579 --> 00:03:09.140
however you want within certain standards of course, and then down below we will type

00:03:09.140 --> 00:03:16.690
"return 0;" Ok, there we go. So, iteration will occur in the following way.

00:03:16.690 --> 00:03:24.120
You will get the initialisation, it will
go past this that's all fine and dandy, it

00:03:24.120 --> 00:03:29.290
will go into if and I will be
evaluated to be less or equal than 20.

00:03:29.290 --> 00:03:34.630
Yes, okay it will be and then since this
is true this will execute and

00:03:34.630 --> 00:03:39.220
then the program will go to the label
AGAIN, and it will execute all of this

00:03:39.220 --> 00:03:46.850
again, and again, and again, and again, and again until i becomes greater than 20. So,

00:03:46.850 --> 00:03:50.200
let's go ahead and build and run this.

00:03:50.200 --> 00:04:01.859
So, see it says 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ,11, 12, 13, 14, 15, 16, 17, 18, 19, 20. Ok, so it went from

00:04:01.859 --> 00:04:06.760
1 to 20 that's a printout. So, you see how this is simulating a loop while not actually

00:04:06.760 --> 00:04:09.880
being a loop? This can cause

00:04:09.880 --> 00:04:15.440
so many logic errors, this can be so
difficult to debug, not the iteration but

00:04:15.440 --> 00:04:21.290
the goto with the labels can cause so
many headaches, not really a pleasant

00:04:21.290 --> 00:04:25.530
thing. Anyway, I'm not telling you not to ever, ever, ever,

00:04:25.530 --> 00:04:29.920
ever use it. You will see it used later,
you'll of course see it used in the bigger

00:04:29.920 --> 00:04:34.130
programs, but it's really not a
recommended way and as I said it can,

00:04:34.130 --> 00:04:39.450
it's really not a recommended way of
going about things, but that's how it

00:04:39.450 --> 00:04:44.740
functions, basically. you can have a GOTO
statement somewhere in your code and you

00:04:44.740 --> 00:04:52.610
can have a label either before, or after, or
anywhere in the code for that matter, and

00:04:52.610 --> 00:04:56.780
then once the once the program reaches
the goto it will go to the specified

00:04:56.780 --> 00:05:03.120
label and begin the execution of the
code from there onwards. It can cause a lot

00:05:03.120 --> 00:05:08.060
of logic errors just saying. Anyway, that
should be it as far as the go-to is

00:05:08.060 --> 00:05:10.050
concerned, we're going to

00:05:10.050 --> 00:05:13.670
talk a little bit about the infinite
loops, and then I'm gonna talk a little

00:05:13.670 --> 00:05:19.240
bit about the nested loops, and that's going to be it for the loops chapter. I bid you farewell

00:05:19.240 --> 00:05:21.030
and hope to see you in the next tutorial.

