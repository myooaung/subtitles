WEBVTT

00:00.330 --> 00:00.860
DE ACUERDO.

00:00.900 --> 00:09.240
Entonces notará que modifiqué un poco el programa y esta vez lo modifiqué de

00:09.240 --> 00:16.230
modo que siga adelante e intente adivinar qué va a pasar.

00:16.230 --> 00:21.780
Quiero decir que voy a seguir adelante y compilar compilación y ejecutarlo, pero trato de adivinar lo que va a suceder.

00:21.780 --> 00:22.870
Te daré una pista.

00:23.040 --> 00:30.030
Obtendremos que obtendremos lo opuesto a lo que obtuvimos la última vez que ejecuté

00:30.030 --> 00:30.900
este programa.

00:31.200 --> 00:33.780
Entonces, hay cosas que han cambiado.

00:33.870 --> 00:41.040
Entonces, si cambio esta matriz un poco con los valores que contiene, he cambiado la

00:41.040 --> 00:50.860
inicialización del punto de nuestra variable aquí y ahora es igual a la dirección del último elemento de la matriz.

00:50.880 --> 00:52.640
Entonces, ¿por qué es 6.

00:52.640 --> 01:01.780
Bueno, porque la indexación del índice comienza con 0 con 0 en la carrera es 0 y es 1 2 3 4 5 6 7, excepto en

01:02.280 --> 01:06.430
nuestro caso va de 0 a 6 y eso son siete elementos.

01:07.860 --> 01:15.270
Y luego el bucle for se ha mantenido y modificado el cuerpo del bucle for, sin embargo, se modifica todo,

01:15.300 --> 01:19.470
pero en lugar de ir en lugar de aumentar, estamos disminuyendo.

01:19.470 --> 01:22.270
Entonces, en lugar de incrementar, estamos decreciendo.

01:22.680 --> 01:25.620
Entonces decir eso cierto si eso es incluso una palabra.

01:26.250 --> 01:29.410
OK, sigamos adelante y compilamos y ejecutamos.

01:29.560 --> 01:30.650
No nos

01:33.590 --> 01:40.010
dijo eso 1 2 3 4 5 6 7.

01:40.010 --> 01:40.890
En serio,

01:46.750 --> 01:50.210
vamos a construirlo y luego vamos a rodarlo.

01:50.660 --> 01:54.970
Todavía está imprimiendo 1 2 3 4 5 6 7.

01:55.000 --> 01:58.020
Cómo es esto posible.

01:58.030 --> 02:01.550
Déjame dejar que me dé por trabajo.

02:01.600 --> 02:03.690
Entonces esto no tiene nada que ver con la matriz.

02:03.690 --> 02:09.680
Esto es solo un ciclo y la cantidad de veces que se supone que el ciclo se repite.

02:13.290 --> 02:16.330
Esto va a imprimir el valor.

02:16.350 --> 02:22.950
Esto va a imprimir un valor de lo que sea que contenga datos en una dirección particular.

02:22.950 --> 02:27.460
Y esto aquí apunta al último elemento de la matriz.

02:28.350 --> 02:31.960
Entonces realmente no debería haber nada de malo en esto.

02:31.980 --> 02:36.870
Hay algo mal con la caja de códigos porque esta ni siquiera es la matriz que

02:36.870 --> 02:37.760
originalmente tengo aquí.

02:40.160 --> 02:42.100
O estoy haciendo algo mal.

02:42.160 --> 02:44.160
Hagámoslo así, selecciónalo.

02:44.180 --> 02:44.520
No.

02:44.520 --> 02:46.620
Por qué.

02:46.910 --> 02:48.650
No, esto es un perdida

02:52.610 --> 02:54.730
de cubo definitivamente déjame hacer esto.

02:56.740 --> 03:00.830
Guardar proyecto guardar todos los proyectos.

03:01.180 --> 03:07.490
Va a arreglar esto para guardar todos los archivos.

03:10.920 --> 03:16.370
Y Richard Bill.

03:16.490 --> 03:17.450
Nada que hacer.

03:17.450 --> 03:19.040
Todos los artículos están actualizados.

03:19.070 --> 03:19.870
DE ACUERDO.

03:23.170 --> 03:23.840
Lean

03:27.000 --> 03:33.670
Ahí vamos y, probablemente, otro tema de caché con un co-blogger no es gran cosa.

03:33.670 --> 03:36.030
Sucede de vez en cuando.

03:36.160 --> 03:41.140
Pude haber corregido esto, pero quería dejarlo porque algo similar

03:41.140 --> 03:46.300
podría haberte sucedido y quería solucionar el problema como de costumbre.

03:46.300 --> 03:52.010
Entonces imprimió el arreglo pero lo imprimió en el orden inverso.

03:52.330 --> 03:56.880
Así que ahora repasemos esto una vez más.

03:56.890 --> 04:01.500
Este programa compilará y funcionará como se esperaba.

04:01.780 --> 04:08.920
Pero lo que hemos hecho no es permitir que lo que hemos hecho básicamente no esté permitido porque después

04:08.920 --> 04:16.810
del final del puntero del bucle p apunta al lugar que está delante del primer elemento del primer miembro de la matriz.

04:19.620 --> 04:28.260
Y según los estándares de lenguaje C ++ esto no está permitido porque el sistema operativo tiene el derecho de

04:28.290 --> 04:31.020
finalizar la operación de este programa.

04:31.020 --> 04:37.320
Quiero decir, esto es que esto no va a suceder, pero existe la posibilidad de que suceda.

04:37.830 --> 04:47.850
Por lo tanto, si colocar el puntero solo en un lugar que no está permitido pone en peligro el trabajo en general o su trabajo, a

04:47.850 --> 04:53.440
pesar de que existe una probabilidad casi nula o nula de que ocurra algo así.

04:53.460 --> 05:00.270
El problema se puede resolver estableciendo el puntero a la ubicación del puntero después de que

05:00.360 --> 05:07.840
el último miembro al principio del programa, que básicamente está permitido, ahora tenía un bocado allí básicamente.

05:07.860 --> 05:12.160
Pero si configura el puntero como puntero al primero

05:14.930 --> 05:18.140
si lo configura, no lo es.

05:18.320 --> 05:27.380
No está permitido porque, básicamente, después del final del puntero de bucle p aún señalará el lugar delante del primer

05:27.470 --> 05:29.480
número de la matriz.

05:29.480 --> 05:39.610
De modo que simplemente rebobine esa oración, el puntero, el puntero, después del final del ciclo, el puntero que apunta al lugar

05:39.620 --> 05:43.600
que está delante del primer miembro de la matriz.

05:43.670 --> 05:45.580
Entonces eso no está permitido.

05:46.750 --> 05:51.080
Y vamos a solucionar esto de una manera muy simple.

05:52.240 --> 05:55.400
Entonces, si no lo descubrió, lo repitió varias veces.

05:55.690 --> 05:59.690
Quiero decir que solo digo esto como medida de precaución, pero no es exactamente bueno.

05:59.710 --> 06:02.510
No te va a causar problemas exactamente.

06:02.530 --> 06:08.350
En algún momento, en un programa muy complejo, podría colapsar debido

06:08.350 --> 06:16.260
a que el sistema operativo terminará, pero no es muy probable que algo así ocurra.

06:16.260 --> 06:20.130
Especialmente no con programas de la simplicidad.

06:20.700 --> 06:21.720
DE ACUERDO.

06:21.720 --> 06:29.070
Así que como antes vamos a tener esto y vamos a tener esto, pero vamos a

06:29.070 --> 06:30.830
cambiar esto a siete.

06:31.350 --> 06:38.550
Así que esto va a apuntar al miembro después del último miembro básicamente.

06:38.880 --> 06:47.100
Entonces esto asignará la dirección del lugar detrás del último miembro de la matriz al puntero p.

06:48.420 --> 06:53.700
Y ahora podemos seguir adelante y divertirnos, pero hay una cosa más que tenemos que cambiar realmente.

06:53.790 --> 07:00.720
Cuando se produce la impresión, no queremos imprimir para imprimir realmente lo que contenga después del último

07:00.720 --> 07:02.150
miembro de la matriz.

07:02.310 --> 07:08.580
En su lugar, realizaremos la operación de disminución antes de la primera impresión.

07:08.610 --> 07:17.400
Y al hacerlo nos aseguraremos de que el valor de los datos sea lo que sea después de que este último miembro no

07:17.460 --> 07:22.960
se imprima realmente en la pantalla porque eso no es lo que queremos hacer.

07:24.730 --> 07:26.090
DE ACUERDO.

07:26.320 --> 07:32.030
Double-O vamos a seguir adelante y agarrar esto ahora.

07:32.080 --> 07:33.120
Lo ubicaré aquí.

07:33.130 --> 07:34.900
Así que esto va a conseguir una

07:38.740 --> 07:40.650
aguja y Del aquí te estoy diciendo.

07:40.700 --> 07:41.160
Voy

07:45.640 --> 07:46.950
a Endo.

07:47.300 --> 07:48.010
¿Por qué lo necesito?

07:48.000 --> 07:53.150
Porque quiero pasar de uno diferente para ir a la siguiente línea después de que solo se

07:53.150 --> 07:56.370
haya creado la impresión en el single de todos modos.

07:57.780 --> 08:05.610
Y ahora voy a seguir adelante y obtener esto y esto se imprimirá el primero recordar porque después

08:05.640 --> 08:11.510
del final del puntero de bucle p se muestra en el primer miembro.

08:11.700 --> 08:12.510
DE ACUERDO.

08:13.080 --> 08:22.470
Así que después de que el bucle for finalice, el puntero p se mostrará en el primer miembro para decir que

08:22.470 --> 08:30.320
quizás no sea gramaticalmente correcto, pero se tiene la idea de que vamos a seguir adelante e

08:30.320 --> 08:38.870
imprimirlo y, por el bien de la estética, vamos a solo sigue y agrega esto o tal vez no.

08:39.320 --> 08:44.430
Vamos, Annette solo va a seguir adelante y colocarlo aquí.

08:46.420 --> 08:49.260
Así que tienes que hacer clic y colocarlo aquí.

08:52.040 --> 08:52.920
Oh, Dios,

09:02.640 --> 09:03.250
está bien.

09:03.500 --> 09:04.210
Aquí vamos.

09:06.050 --> 09:08.190
Avancemos y ejecutemos esto.

09:08.240 --> 09:09.920
Excelente.

09:09.920 --> 09:15.530
Así que esto va a imprimir el primer miembro de la matriz e imprimir la

09:15.530 --> 09:23.670
matriz y el orden inverso, y no tendrá en cuenta el elemento detrás del elemento después de la última y no va

09:23.870 --> 09:25.940
a salir de la matriz.

09:25.960 --> 09:34.260
Así que ve a saltar fuera de la matriz como hemos especificado aquí para que 7 7 esté delante de siete punto siete.

09:34.280 --> 09:37.040
Y no sabemos lo que realmente está ubicado allí.

09:37.040 --> 09:43.100
Y definitivamente no queremos salir de los límites de la matriz con este puntero porque eso

09:43.100 --> 09:45.590
puede conducir a todo tipo de problemas.

09:45.700 --> 09:51.410
Si tú, si dijiste el punto que tienes hasta cierto punto, no sé si escribes aquí en lugar

09:51.410 --> 09:53.420
de 7 escribes 78 o algo así.

09:53.540 --> 10:00.770
Esto aún se compilará, pero tendrá problemas porque si acierta en el espacio de memoria que está reservado

10:00.770 --> 10:08.400
o que el sistema operativo no le permitirá acceder o lo que sea que este programa simplemente se bloquee.

10:08.400 --> 10:08.750
Derecha.

10:08.750 --> 10:09.400
Crash

10:12.560 --> 10:16.060
Anyway solo quería repasar eso.

10:16.280 --> 10:21.450
Ahora podemos hacer algo de optimización de código aquí que nos puede ayudar.

10:21.470 --> 10:27.440
Sé que es un aviso que no tiene poco o ningún efecto y un código de este tamaño, pero es bueno

10:27.530 --> 10:29.770
saber que es bueno tener esto en cuenta.

10:29.770 --> 10:34.130
Es bueno tener ese tipo de mentalidad de que siempre debes optimizar

10:34.130 --> 10:41.170
el código porque cuando estás escribiendo un programa con un millón de líneas de código, digamos especialmente en un equipo.

10:41.660 --> 10:46.940
La gente será mucho menos crítica contigo si estás escribiendo un código optimizado para aplicaciones si estás

10:46.940 --> 10:51.230
escribiendo si estás escribiendo un código con mucho desorden que va a ser problemático

10:51.230 --> 10:53.440
y las personas van a tener problemas contigo.

10:53.690 --> 10:58.400
Entonces, es una buena mentalidad tener que escribir un código limpio y optimizado.

10:58.520 --> 11:05.050
Entonces, ¿qué podemos hacer para optimizar el código aquí?

11:05.630 --> 11:13.690
Bueno, podrías entrar en el bucle for y hacer esto aquí.

11:13.950 --> 11:14.750
Eliminar esto

11:17.880 --> 11:18.200
y

11:22.210 --> 11:27.060
llegar a esto y luego poner un menos menos aquí.

11:27.220 --> 11:34.630
Así que esto acortará el código en una línea completa.

11:34.960 --> 11:40.050
Bueno, eso es bueno y guarda este código y ejecuta.

11:40.300 --> 11:40.930
Ahí tienes.

11:40.930 --> 11:42.240
Eso es de lo que estaba hablando.

11:42.240 --> 11:48.280
Este es el valor que obtendrás frente al último elemento.

11:48.280 --> 11:55.020
Es algo completamente aleatorio que podría no ser un valor doble, podría ser algo completamente distinto, pero

11:55.060 --> 11:58.420
tienes que convertirlo para refundirlo en un doble valor.

11:59.140 --> 12:08.050
Pero si seguimos adelante y tomamos un plus plus para nuestra de nuestra conferencia anterior, y si simplemente iniciamos esto en

12:08.050 --> 12:15.830
el elemento cero con el primero que es Play It Again vamos a seguir adelante y terminaremos con

12:16.350 --> 12:20.440
un último valor que va a ser problemático de nuevo.

12:20.440 --> 12:24.410
Entonces esto no es algo que realmente podamos hacer.

12:24.430 --> 12:28.970
Este ejemplo en particular, pero es bueno tener en cuenta que puede iterar

12:28.970 --> 12:30.910
mientras realmente está imprimiendo cosas.

12:30.920 --> 12:36.800
Entonces, si está imprimiendo cosas, siempre puede realizar las iteraciones aquí dentro de la impresión misma.

12:36.830 --> 12:43.330
En nuestro caso, no es posible hacerlo principalmente porque la iteración debe ocurrir antes de las impresiones,

12:43.330 --> 12:46.660
por lo que en ese caso no podemos hacerlo.

12:46.850 --> 12:48.670
Pero hay una cosa que podemos hacer.

12:48.800 --> 12:53.390
De hecho, podemos eliminar estos podemos eliminar las llaves.

12:53.390 --> 12:53.870
Por qué.

12:53.870 --> 13:00.970
Porque si solo tiene una sola línea de código debajo del bucle for, no necesita los corchetes.

13:03.590 --> 13:09.080
Y si ejecuto esto obtendré lo mismo, obtendré lo mismo, así que esto

13:09.120 --> 13:11.070
va a funcionar sin problemas.

13:11.070 --> 13:21.620
Pero realmente necesito la operación de incremento y decremento antes de la impresión real.

13:21.880 --> 13:27.200
En cualquier caso, eso es todo.

13:27.380 --> 13:33.800
Acorté el código quitando los corchetes, pero eso era solo el caso de demostración, un escaparate, si

13:33.800 --> 13:34.920
así lo deseas.

13:35.120 --> 13:40.490
En nuestro caso particular, lo que quería hacer no era posible, pero de todas maneras quiero mostrarle

13:40.490 --> 13:42.530
lo que puede hacer en general.

13:42.800 --> 13:44.910
Voy a seguir adelante y decirte adiós.

13:44.960 --> 13:50.750
Y en el otoño, el Tauriel vamos a echar un vistazo a los operadores de comparación.

13:50.750 --> 13:55.460
Entonces, ¿cómo van a usarlos, etc.? Vamos a lidiar con eso en la caída de Tauriel

13:55.460 --> 13:56.650
no debería ser demasiado largo.
