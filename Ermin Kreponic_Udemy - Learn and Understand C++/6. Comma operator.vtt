WEBVTT

1
00:00:00.091 --> 00:00:00.950
Okay so,

2
00:00:01.091 --> 00:00:03.741
finally at the end of
this chapter.

3
00:00:03.876 --> 00:00:05.306
I would call a little bit boring

4
00:00:05.441 --> 00:00:08.285
but that doesn't mean that
it's not important.

5
00:00:08.496 --> 00:00:09.145
Anyway.

6
00:00:09.336 --> 00:00:11.800
At the end of this chapter
just a short lesson.

7
00:00:11.936 --> 00:00:14.703
There's a comma operator and

8
00:00:14.836 --> 00:00:17.106
there are some dangers
that are inherent with it.

9
00:00:17.241 --> 00:00:19.200
So we need to be careful
with that.

10
00:00:19.445 --> 00:00:21.570
So, let's go ahead and
do this.

11
00:00:22.221 --> 00:00:25.215
if and we can

12
00:00:26.043 --> 00:00:28.075
should probably

13
00:00:28.976 --> 00:00:29.950
declare x

14
00:00:31.116 --> 00:00:31.971
and y.

15
00:00:32.436 --> 00:00:33.348
So, int

16
00:00:33.481 --> 00:00:34.410
x, I don't know

17
00:00:34.711 --> 00:00:37.845
equals 1, I don't know,

18
00:00:38.150 --> 00:00:38.775
2

19
00:00:39.726 --> 00:00:41.305
and y

20
00:00:41.491 --> 00:00:42.356
shall be

21
00:00:42.491 --> 00:00:43.540
equal to

22
00:00:45.575 --> 00:00:47.500
3, okay.

23
00:00:52.290 --> 00:00:53.031
So, for example.

24
00:00:54.981 --> 00:00:55.700
if we

25
00:00:56.281 --> 00:00:56.836
state

26
00:00:57.001 --> 00:00:57.975
that x

27
00:00:58.696 --> 00:00:59.353
is

28
00:00:59.486 --> 00:01:01.450
greater than 4.

29
00:01:01.621 --> 00:01:02.666
By the way in case I didn't mention,

30
00:01:02.801 --> 00:01:04.035
you can also declare
variables like this.

31
00:01:04.896 --> 00:01:06.195
Like int 10 in 1 line

32
00:01:06.336 --> 00:01:07.333
and declare as many as you want.

33
00:01:08.311 --> 00:01:11.095
Also you can also go into
next line but I've shown that.

34
00:01:12.165 --> 00:01:13.650
So if x is greater than 4,

35
00:01:14.346 --> 00:01:15.435
and then you put a comma,

36
00:01:15.996 --> 00:01:17.573
and they you say y

37
00:01:18.131 --> 00:01:19.126
is greater than 1.

38
00:01:23.681 --> 00:01:25.955
Now you shall go ahead
and type in

39
00:01:26.976 --> 00:01:27.881
std

40
00:01:28.346 --> 00:01:29.111
::

41
00:01:29.996 --> 00:01:30.596
cout

42
00:01:33.851 --> 00:01:35.451
something,
I don't know.

43
00:01:41.445 --> 00:01:41.951
std

44
00:01:42.490 --> 00:01:43.506
::

45
00:01:43.766 --> 00:01:44.763
endl

46
00:01:45.275 --> 00:01:45.970
;

47
00:01:46.551 --> 00:01:47.920
So this is not

48
00:01:48.106 --> 00:01:50.356
what the user imagined
in the first place.

49
00:01:50.616 --> 00:01:51.525
This will actually

50
00:01:51.661 --> 00:01:53.170
be true.

51
00:01:53.701 --> 00:01:55.975
So x is greater than 4

52
00:01:56.256 --> 00:01:57.005
and

53
00:01:57.140 --> 00:01:58.421
y is

54
00:01:58.556 --> 00:01:59.135
greater than

55
00:01:59.268 --> 00:02:00.160
1 but

56
00:02:01.970 --> 00:02:02.595
I mean

57
00:02:03.896 --> 00:02:05.200
that is as it

58
00:02:05.336 --> 00:02:09.025
should be but I've placed
some pretty bad values.

59
00:02:09.771 --> 00:02:11.146
But anyway, what I wanted to
tell you

60
00:02:11.281 --> 00:02:13.855
is whenever y

61
00:02:14.576 --> 00:02:16.323
as for example, greater than 1

62
00:02:16.456 --> 00:02:17.221
is true,

63
00:02:17.480 --> 00:02:19.335
regardless of the value x

64
00:02:20.360 --> 00:02:21.361
this will

65
00:02:21.496 --> 00:02:23.376
actually be true regardless

66
00:02:23.750 --> 00:02:24.581
of the x.

67
00:02:24.795 --> 00:02:26.098
The entire

68
00:02:26.231 --> 00:02:27.906
expression will evaluate it true.

69
00:02:28.041 --> 00:02:29.505
I will show you that in a moment

70
00:02:29.831 --> 00:02:30.996
when I change the values.

71
00:02:31.131 --> 00:02:34.666
So comma operator evaluates
everything from left to right

72
00:02:36.471 --> 00:02:40.070
and then returns to result
of the last evaluation.

73
00:02:41.651 --> 00:02:43.831
So, let's say that x is
greater than 4.

74
00:02:44.621 --> 00:02:46.476
Is 2 greater than 4?

75
00:02:47.571 --> 00:02:48.103
No, it is not.

76
00:02:48.686 --> 00:02:49.758
y is

77
00:02:49.891 --> 00:02:51.965
equal to 3. So,
is 3 greater than 1?

78
00:02:52.100 --> 00:02:53.195
Yes, it is.

79
00:02:53.331 --> 00:02:54.231
But there is a comma.

80
00:02:54.516 --> 00:02:56.715
But not both of these
conditions have been satisfied.

81
00:02:57.206 --> 00:02:59.950
And if I, it's going to print out
onto the screen if I run this.

82
00:03:00.086 --> 00:03:01.151
It says, something

83
00:03:01.501 --> 00:03:02.290
...

84
00:03:02.781 --> 00:03:04.520
So it evaluates to true.

85
00:03:04.731 --> 00:03:07.070
But perhaps not the way
you thought it would.

86
00:03:07.541 --> 00:03:09.401
It goes from left to right,
so it

87
00:03:09.536 --> 00:03:10.206
does that.

88
00:03:10.951 --> 00:03:13.441
But then, it only takes the
last segment.

89
00:03:13.576 --> 00:03:14.826
The last thing that was evaluated

90
00:03:14.961 --> 00:03:17.105
and based upon that
makes it conclusion.

91
00:03:17.501 --> 00:03:18.381
It's like

92
00:03:18.521 --> 00:03:19.775
the rest doesn't matter.

93
00:03:20.146 --> 00:03:22.010
So that's one of the

94
00:03:22.145 --> 00:03:24.053
dangerous of the comma

95
00:03:24.186 --> 00:03:24.790
operator.

96
00:03:25.351 --> 00:03:26.886
It can be very trick.

97
00:03:27.021 --> 00:03:30.036
It can be a cause of
logical errors.

98
00:03:32.756 --> 00:03:34.605
Anyway, let's go ahead and
take a look at an example

99
00:03:34.741 --> 00:03:36.885
that will also print out something.

100
00:03:37.701 --> 00:03:40.625
Because, I don't know, we will
set the

101
00:03:40.860 --> 00:03:41.901
y to equal to

102
00:03:43.275 --> 00:03:43.921
I don't know.

103
00:03:45.666 --> 00:03:46.336
Let's say to 5.

104
00:03:46.826 --> 00:03:47.751
And that is

105
00:03:48.126 --> 00:03:50.260
going to also be
greater than 1.

106
00:03:52.026 --> 00:03:52.835
And

107
00:03:55.231 --> 00:03:57.025
I don't know we don't actually
need to change anything else.

108
00:03:57.161 --> 00:03:57.826
It doesn't really matter

109
00:03:57.961 --> 00:03:59.990
and I probably didn't need
to even change this.

110
00:04:00.410 --> 00:04:01.801
But due to my notes, I did.

111
00:04:02.151 --> 00:04:03.896
Now if we go ahead and type

112
00:04:04.031 --> 00:04:05.028
something like this.

113
00:04:06.216 --> 00:04:08.090
2 is greater than 4.

114
00:04:08.536 --> 00:04:09.725
Yes? No.

115
00:04:09.861 --> 00:04:12.496
Of course not. 2 is not
greater than 4.

116
00:04:12.831 --> 00:04:15.500
And if we state that y
is greater than 1,

117
00:04:15.871 --> 00:04:18.006
this will still evaluate to true.

118
00:04:18.356 --> 00:04:20.281
Because y is greater than

119
00:04:20.426 --> 00:04:20.980
1.

120
00:04:21.491 --> 00:04:24.026
And this will again be
printed out onto the screen.

121
00:04:24.161 --> 00:04:25.460
Let me just go ahead and show you.

122
00:04:25.926 --> 00:04:27.480
Due to the way it is
evaluated.

123
00:04:28.760 --> 00:04:30.081
The correct way

124
00:04:30.340 --> 00:04:33.083
of doing this would be to
remove comma

125
00:04:33.216 --> 00:04:33.850
from this completely

126
00:04:33.986 --> 00:04:37.906
and use an &amp;&amp; sign
depending on what you want to do.

127
00:04:40.321 --> 00:04:43.250
So when I run this, this is now
not going to be printed out

128
00:04:43.386 --> 00:04:44.940
onto the screen as you can
see here.

129
00:04:45.780 --> 00:04:47.746
Because this condition is false.

130
00:04:47.881 --> 00:04:48.786
And this one is true.

131
00:04:48.921 --> 00:04:50.105
And both need to be true

132
00:04:50.241 --> 00:04:51.465
for the and.

133
00:04:51.816 --> 00:04:53.888
to be evaluated

134
00:04:54.021 --> 00:04:55.645
as true in a,

135
00:04:55.951 --> 00:04:59.336
for this entire condition to be
evaluated as true.

136
00:04:59.711 --> 00:05:00.660
Because for and...

137
00:05:01.451 --> 00:05:03.935
you have tables online
you can find them if you want.

138
00:05:04.726 --> 00:05:05.720
For and,

139
00:05:14.641 --> 00:05:15.225
you need

140
00:05:15.360 --> 00:05:16.356
true

141
00:05:16.706 --> 00:05:18.421
true is

142
00:05:18.936 --> 00:05:20.095
evaluated to true.

143
00:05:23.905 --> 00:05:24.925
true

144
00:05:26.086 --> 00:05:27.151
false

145
00:05:30.056 --> 00:05:32.145
false will evaluate to

146
00:05:32.796 --> 00:05:33.700
false

147
00:05:34.145 --> 00:05:35.536
I don't know, again there's

148
00:05:35.746 --> 00:05:37.208
3rd and final one,

149
00:05:37.511 --> 00:05:38.415
so,

150
00:05:39.761 --> 00:05:40.526
actually not the final one.

151
00:05:41.526 --> 00:05:42.595
false

152
00:05:45.451 --> 00:05:47.075
false true will be

153
00:05:47.426 --> 00:05:48.538
false as well

154
00:05:49.051 --> 00:05:50.140
and of course

155
00:05:50.840 --> 00:05:51.531
false

156
00:05:52.346 --> 00:05:53.761
false will be

157
00:05:54.485 --> 00:05:55.110
false

158
00:05:55.666 --> 00:05:57.105
So if,

159
00:05:58.315 --> 00:05:59.086
if you have

160
00:05:59.221 --> 00:06:02.351
true true then it's true. If you have
true false then it's false.

161
00:06:02.750 --> 00:06:04.346
If it's false true then it's false.

162
00:06:04.481 --> 00:06:06.786
And so on and so forth
so you can find these tables

163
00:06:06.921 --> 00:06:08.535
on the net for and,

164
00:06:08.671 --> 00:06:10.248
for not for

165
00:06:10.551 --> 00:06:11.223
or

166
00:06:11.481 --> 00:06:14.495
etc. For as many of them as
you want.

167
00:06:15.660 --> 00:06:16.981
So here we have

168
00:06:18.261 --> 00:06:19.048
false

169
00:06:19.190 --> 00:06:19.705
and

170
00:06:19.840 --> 00:06:20.395
true

171
00:06:21.070 --> 00:06:22.700
and ampersand sign here

172
00:06:22.835 --> 00:06:24.876
meaning that this condition
will be

173
00:06:25.111 --> 00:06:26.060
evaluated to,

174
00:06:27.316 --> 00:06:29.195
this will be evaluated to

175
00:06:29.986 --> 00:06:30.565
false.

176
00:06:30.796 --> 00:06:32.281
And therefore this will not be

177
00:06:32.610 --> 00:06:34.396
printed out onto the screen.

178
00:06:34.606 --> 00:06:37.001
So I just wanted to make
a quick tutorial

179
00:06:37.136 --> 00:06:40.015
by the end of this
and show you

180
00:06:40.341 --> 00:06:42.986
and show you how this
actually works.

181
00:06:44.220 --> 00:06:44.735
There was just

182
00:06:44.871 --> 00:06:47.381
one more small

183
00:06:47.516 --> 00:06:48.425
thing that I want to show you but

184
00:06:48.561 --> 00:06:50.785
I don't actually need to write
any code for it. I can just write

185
00:06:51.161 --> 00:06:52.600
pseudo code so you
can see it.

186
00:06:52.766 --> 00:06:54.016
If I type in for example
if

187
00:06:54.576 --> 00:06:58.386
and I don't know some
condition A here.

188
00:06:58.521 --> 00:06:59.260
And

189
00:06:59.451 --> 00:07:00.168
if I type in

190
00:07:00.586 --> 00:07:04.420
some code, okay.

191
00:07:04.791 --> 00:07:05.370
some code

192
00:07:06.695 --> 00:07:07.576
If I type in

193
00:07:08.111 --> 00:07:08.968
else

194
00:07:09.551 --> 00:07:10.338
down below

195
00:07:11.036 --> 00:07:12.405
I can

196
00:07:14.010 --> 00:07:16.426
I don't know, else if,
actually I can also type in

197
00:07:16.561 --> 00:07:18.006
I don't know some condition

198
00:07:18.141 --> 00:07:18.650
B

199
00:07:19.231 --> 00:07:20.390
and I open them up.

200
00:07:21.091 --> 00:07:22.626
So in here where some
code goes,

201
00:07:22.761 --> 00:07:24.825
I can also place another
if statement.

202
00:07:25.410 --> 00:07:28.866
I can also place another
else statement.

203
00:07:29.521 --> 00:07:31.265
Or I can

204
00:07:31.401 --> 00:07:32.796
place another series

205
00:07:32.931 --> 00:07:34.230
of else if statements.

206
00:07:34.511 --> 00:07:38.386
And I can nest them in one
another as much as I

207
00:07:38.645 --> 00:07:39.151
want.

208
00:07:39.781 --> 00:07:42.335
So if I type in
if, for example,

209
00:07:43.870 --> 00:07:44.796
C

210
00:07:45.656 --> 00:07:46.468
and

211
00:07:47.446 --> 00:07:48.395
some

212
00:07:49.256 --> 00:07:49.903
some

213
00:07:50.045 --> 00:07:51.271
code again

214
00:07:54.875 --> 00:07:56.311
else if

215
00:07:57.846 --> 00:07:58.890
I don't know, not

216
00:07:59.076 --> 00:08:00.536
C whatever

217
00:08:01.470 --> 00:08:02.371
Can type in

218
00:08:02.560 --> 00:08:03.510
again

219
00:08:07.575 --> 00:08:08.280
some

220
00:08:08.991 --> 00:08:10.128
code, etc.

221
00:08:10.291 --> 00:08:11.845
So you see,
you can nest them

222
00:08:12.241 --> 00:08:13.505
as much as you want

223
00:08:13.641 --> 00:08:16.395
pretty much. As many
conditions as you need to test out.

224
00:08:16.631 --> 00:08:19.555
You can test out in this fashion
without any,

225
00:08:19.881 --> 00:08:22.021
without any problems really.
In fact,

226
00:08:22.156 --> 00:08:23.880
once we get to like

227
00:08:24.016 --> 00:08:24.986
complex code,

228
00:08:25.291 --> 00:08:26.706
writing and

229
00:08:26.961 --> 00:08:29.375
complex programming,
advance programming techniques

230
00:08:29.586 --> 00:08:30.776
you will see that

231
00:08:30.911 --> 00:08:33.880
we will deal with a lot of
nesting of

232
00:08:34.531 --> 00:08:36.201
I don't know, loops, conditions,

233
00:08:36.481 --> 00:08:37.200
etc.

234
00:08:37.436 --> 00:08:38.176
But until then,

235
00:08:38.550 --> 00:08:39.346
I bid you farewell

236
00:08:39.481 --> 00:08:41.146
and a ton load of luck.

237
00:08:41.281 --> 00:08:43.955
I shall see you, hopefully,
in the next chapter.

