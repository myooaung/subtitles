WEBVTT

00:00.390 --> 00:01.660
Bienvenido de nuevo.

00:01.680 --> 00:04.470
Así que este será el Capítulo 14 si no me equivoco.

00:04.500 --> 00:08.820
Y aquí les presentaré la API de Windows.

00:09.070 --> 00:10.340
API.

00:11.160 --> 00:13.670
No examinaré todas las funciones en la API de Windows.

00:13.670 --> 00:14.000
Eso es.

00:14.030 --> 00:22.590
Eso sería estúpido de mi parte, pero le mostraré cómo se usa, cómo puede acceder a él y desde

00:22.590 --> 00:23.410
ese momento.

00:23.430 --> 00:29.670
Quiero decir que solo es cuestión de que busques varias funciones que están prácticamente documentadas y puedes

00:29.670 --> 00:32.060
encontrarlas en el sitio web de Windows.

00:32.760 --> 00:36.230
Bueno, señorita D-n, creo que puede encontrarlos allí.

00:36.510 --> 00:41.970
Pero si solo ingresa cuando API en su motor de búsqueda favorito, podrá encontrar qué

00:41.970 --> 00:43.720
es lo que está buscando.

00:43.780 --> 00:47.990
De todos modos hay una lista completa de funciones y hay una descripción para cada una de ellas.

00:48.000 --> 00:51.300
Y encima tienes ejemplos.

00:51.390 --> 00:58.710
En cualquier caso, este capítulo abarcará los aspectos básicos de la interacción del programa C ++ con la API API de

00:58.710 --> 01:02.630
Windows si usted no conocía esa interfaz de programación de aplicaciones.

01:02.810 --> 01:07.510
Y una vez más API de interfaz de programación de aplicaciones.

01:07.800 --> 01:11.530
Y es posible que observe que muchos sitios web tienen su propia API.

01:11.570 --> 01:20.730
Muchas otras aplicaciones tienen su propia empresa y casi cualquier aplicación seria la tendrá donde el usuario necesite

01:20.740 --> 01:26.090
escribir donde el usuario pueda escribir algún código personalizado donde

01:26.170 --> 01:31.560
tenga que escribir algún tipo de scripts automatizados excepto Anyway API.

01:32.560 --> 01:34.530
Ya sabes lo que él representa.

01:34.870 --> 01:40.650
Y básicamente esos son solo el conjunto de funciones que ofrece un sistema operativo.

01:40.660 --> 01:48.960
En este caso, Windows hace un programa para cosas específicas del sistema, por ejemplo, programas pegajosos.

01:49.240 --> 01:56.620
Aquí hablaremos sobre los tipos básicos que encontramos en las llamadas a funciones de comprobación de API donde el

01:56.680 --> 02:01.990
éxito fue exitoso y obtener información adicional de los errores de todos modos.

02:03.820 --> 02:07.890
En las funciones de Windows se encuentran en las bibliotecas.

02:07.940 --> 02:12.610
Es una buena práctica escribir programas para que estén segmentados en unidades múltiples.

02:12.650 --> 02:17.390
Como te he enseñado en los capítulos anteriores, la razón de esto es simple.

02:17.450 --> 02:25.370
Si tenemos un archivo ejecutable de 10 megabytes, tendríamos que descargar los 10 megabytes en Irán, lo cual no es realmente

02:25.460 --> 02:27.260
una forma efectiva de hacerlo.

02:27.260 --> 02:35.690
Sin embargo, si tuviéramos un archivo de salida de un megabyte que utilizara algunas bibliotecas, entonces solo tendríamos que cargar ese megabyte

02:35.810 --> 02:42.560
en la memoria RAM porque es probable que las bibliotecas ya hayan sido cargadas por otros programas

02:43.070 --> 02:46.090
para que puedan ser utilizadas de esta manera.

02:46.100 --> 02:53.560
Múltiples programas pueden compartir una sola biblioteca y guardar una enorme cantidad de recursos en las computadoras que pueda

02:53.570 --> 02:56.570
pensar. Bueno, esto es algo que usted desconoce.

02:56.620 --> 03:01.250
¿Qué pasa si tengo 16 gigas de RAM o 32 gigas de RAM, etc. Bueno, un programa ineficiente puede comerse todo e incluso si lo

03:01.280 --> 03:07.640
escribes de una manera tan estúpida, puede acabar con los 16 conciertos y colgar tu computadora.

03:07.640 --> 03:12.460
Pero imagínese si tiene programas

03:12.710 --> 03:20.780
mal escritos y tiene como 20 en su máquina.

03:20.780 --> 03:21.760
Bueno, van a comer muchos recursos.

03:22.160 --> 03:24.340
Reduzca la velocidad de su máquina y, en general, Norrby es muy ineficiente.

03:24.380 --> 03:29.300
Hay dos tipos de bibliotecas.

03:29.510 --> 03:31.790
Tenga esto en cuenta, aparte del tema

03:31.790 --> 03:40.640
que tiene, las bibliotecas estáticas y dinámicas estáticas están vinculadas directamente a un programa, mientras que las bibliotecas dinámicas están disponibles para varias instancias en Windows.

03:40.790 --> 03:47.880
Las bibliotecas dinámicas tienen una extensión.

03:47.900 --> 03:50.100
Dot d l l.

03:50.150 --> 03:52.290
Así que estoy bastante seguro de que todos ustedes han visto esto.

03:52.350 --> 03:55.360
De hecho, aquí déjenme seguir y mostrárselos.

03:55.370 --> 04:04.480
OK y si vamos con ese Windows no sé qué encontró las ventanas un poco confuso.

04:05.020 --> 04:19.010
Sistema 32.

04:19.010 --> 04:20.560
Y si me desplazo hacia abajo.

04:21.000 --> 04:22.190
Mira cuántos.

04:22.190 --> 04:23.130
¿Cuántos de ellos tienes?

04:23.210 --> 04:24.730
Es Daut DL Eldard el permitir Dattilo etc. Siguen y siguen y siguen y, a veces, es posible que encuentre errores cuando intenta ejecutar un programa.

04:24.750 --> 04:28.840
Te va a decir que te estás perdiendo ese DSL o algo así.

04:28.850 --> 04:34.540
Nunca recomendaría que salgas a la red y descargues esa biblioteca dinámica particular de algún sitio web al

04:34.580 --> 04:39.130
azar en lugar de ver lo que Windows ha enumerado como una solución oficial.

04:39.170 --> 04:44.930
Porque si lo estás descargando de un sitio web al azar y lo estás poniendo en el sistema 32.

04:44.930 --> 04:50.960
Bueno, eso puede ser un problema, especialmente cuando no sabes lo que contiene.

04:50.960 --> 04:55.050
De todos modos, cada biblioteca.

04:55.190 --> 04:59.500
Mucho antes de eso.

05:01.680 --> 05:06.830
Simplemente sepa que el trato se convierte básicamente en un acceso directo para la biblioteca de enlaces dinámicos.

05:07.000 --> 05:08.390
Por lo tanto, haga una biblioteca dinámica de Alling para que sepa cuáles son.

05:08.410 --> 05:16.790
Cada biblioteca es propietaria pero tiene su propia interfaz para usarla. La interfaz de

05:16.800 --> 05:21.630
la biblioteca se describe en los archivos Heather.

05:21.630 --> 05:29.250
Así que ya te he enseñado qué archivos de encabezado son.

05:29.310 --> 05:30.780
Esto no es diferente en realidad.

05:30.810 --> 05:33.820
Entonces, la biblioteca de registro se llama DV API 32.

05:33.840 --> 05:36.870
DL Bueno, déjame leer eso para ti aquí.

05:38.470 --> 05:43.850
Así que un D A P A treinta y dos puntos DL.

05:43.860 --> 05:47.440
Un nombre un poco complicado, pero no es gran cosa.

05:47.500 --> 05:54.220
Significa API avanzada.

05:54.250 --> 05:56.550
Eso es.

05:56.590 --> 05:59.620
Se trata de una interfaz divisible y su interfaz se describe en el punto H de la API ATV, por lo que ATV API punto H.

05:59.800 --> 06:01.090
Hubo

06:01.090 --> 06:15.300
un encabezado especial que incluye casi todos los demás encabezados y que básicamente sería windows dot H.

06:16.720 --> 06:24.510
Y esto es algo si tiene la intención de trabajar con la API de Windows que usará con bastante frecuencia en el programa de los programas. Casi

06:24.640 --> 06:25.580
siempre se requiere

06:25.630 --> 06:31.750
que incluya solo las ventanas de esa edad para que podamos usar todo lo que necesitamos de la API de Windows.

06:31.790 --> 06:38.140
Entonces, la primera línea que tenemos que escribir aquí en nuestro código sería incluir

06:38.410 --> 06:41.390
realmente las ventanas y Dot h.

06:42.480 --> 06:50.910
Vamos y hagamos eso.

06:51.000 --> 06:51.450
Probablemente va a necesitar una transmisión también.

06:51.480 --> 06:53.440
Así que déjalo allí y esto va a ser así.

06:53.490 --> 06:55.530
Incluir no diferente de la otra una vez que se inicie Windows.

06:55.530 --> 07:00.180
H.

07:00.480 --> 07:05.230
Ahí tienes.

07:05.250 --> 07:06.010
Entonces así es como lo incluirías.

07:06.210 --> 07:07.060
De esta manera obtuvimos

07:07.380 --> 07:09.460
prototipos de miles de definiciones de funciones de Windows

07:09.480 --> 07:17.160
de miles de constantes de Windows y cientos de tipos definidos por el usuario que están a nuestra disposición cuando realmente incluimos Windows que H es bastante conveniente y muy práctico.

07:17.220 --> 07:24.780
Ahora vamos a seguir adelante y escribiremos un programa bastante simple aquí, así que usaremos la constante

07:24.810 --> 07:29.310
de show de subrayado S-W definida en Windows sin h.

07:31.160 --> 07:39.050
Esto es solo para propósitos de demostración solamente.

07:39.050 --> 07:42.520
Así que sigamos y echemos un vistazo, veamos y tenemos

07:42.590 --> 07:44.780
una w underly y mostraremos un

07:44.780 --> 07:49.280
OK constante así que sigamos adelante e imprimámoslo tan bien como la línea azul.

07:54.780 --> 08:01.940
Muéstranos la llamada e indícanos cómo guardarla para que nos controle la compilación y ejecución.

08:04.380 --> 08:12.520
Ahí tienes.

08:12.630 --> 08:22.600
Así que tenemos la constante de mostrar subrayado S-W, que es el número cinco casi todo cuando las funciones API devuelven algún

08:22.670 --> 08:23.240
valor.

08:23.240 --> 08:32.660
Ahora estos valores en la mayoría de los casos representan el estado de las llamadas a funciones.

08:32.810 --> 08:33.850
Por ejemplo, una función devuelve 0.

08:34.220 --> 08:39.620
Eso significa que la llamada fue exitosa si el estado no era cero sino cero.

08:39.620 --> 08:42.090
Entonces tendríamos que verificar cuál fue el motivo de la llamada infructuosa para hacer eso.

08:42.170 --> 08:48.730
Usamos la función de obtener menos error que describe lo que sucedió y provocó la llamada fallida.

08:49.010 --> 08:56.930
Así que esto se explicará más adelante en

08:56.930 --> 09:06.940
el camino y veremos cómo funciona realmente por el momento.

09:07.060 --> 09:12.790
Voy a seguir adelante y ser tu adiós y luego pasaremos a cosas más complejas.

09:12.790 --> 09:13.140
&nbsp;

09:13.180 --> 09:20.190
&nbsp;
