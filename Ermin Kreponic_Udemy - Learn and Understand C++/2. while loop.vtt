WEBVTT

00:00:00.000 --> 00:00:03.166
Welcome back. So
today we're gonna go

00:00:03.191 --> 00:00:06.259
ahead and talk about
the while loop

00:00:06.259 --> 00:00:08.743
are let's just go ahead
and delete this, also

00:00:08.768 --> 00:00:11.169
by the way the reason
why I left this is

00:00:11.269 --> 00:00:16.440
because I actually forgot to mention
something if the body is of the for loops

00:00:16.440 --> 00:00:23.180
is composed out of a single line than
the curly break the curly braces are not

00:00:23.180 --> 00:00:27.461
not mandatory at
all so you can for

00:00:27.486 --> 00:00:32.160
example, do this
and let's say that

00:00:32.160 --> 00:00:38.010
this one line was the entirety of the
body of the for loop you could just

00:00:38.010 --> 00:00:44.100
write it like this, you wouldn't need to
place any curly braces or anything

00:00:44.100 --> 00:00:46.934
like that, it would
work without any

00:00:46.959 --> 00:00:49.930
problems or whatsoever
just myself in to see.

00:00:50.329 --> 00:00:53.017
Ok so let's go ahead
and delete this,

00:00:53.042 --> 00:00:55.820
we are not going to
need it I was kinda

00:00:55.920 --> 00:00:58.443
hoping that I could
recycle a little bit

00:00:58.468 --> 00:01:01.030
of the code but not
not gonna happen so

00:01:01.030 --> 00:01:04.017
let's take a look at
the syntax of the

00:01:04.042 --> 00:01:06.700
while loop so the same
well very similar

00:01:06.700 --> 00:01:10.477
rules pretty much apply
for while loop as well,

00:01:10.502 --> 00:01:14.460
so you have written
like this, so while and

00:01:14.460 --> 00:01:20.119
then you not brackets but these braces

00:01:21.330 --> 00:01:29.009
parentheses and you type in any
conditions condition so there's not

00:01:29.009 --> 00:01:34.220
literally a conditions is just
pseudocode so there is going to be a

00:01:34.220 --> 00:01:36.966
condition here and
for as long as that

00:01:36.991 --> 00:01:39.900
condition evaluates
to true and the body

00:01:39.900 --> 00:01:45.450
of the loop will continue to execute the
loop will continue however what the

00:01:45.450 --> 00:01:49.259
condition becomes false the loop will
terminate so basically you could

00:01:49.259 --> 00:01:51.952
interpret this while
true in fact this

00:01:51.977 --> 00:01:54.600
is a legitimate line
of code, while true

00:01:54.600 --> 00:01:59.820
although this loop will never terminate it is a forever infinite loop

00:01:59.820 --> 00:02:04.590
so to say, every for loop that is.
So the

00:02:04.615 --> 00:02:09.360
loop that we have
learned in previous

00:02:09.360 --> 00:02:10.720
lecture, the for loop

00:02:10.720 --> 00:02:18.120
so every for loop can be transformed
into a while loop and vice versa so

00:02:18.120 --> 00:02:25.640
let's say that our for loop would look
like this, so you have I which is the

00:02:25.640 --> 00:02:33.540
initializer let's see how the c4
condition and increment then I am c4

00:02:34.040 --> 00:02:36.861
increment how would
you ok let's do this

00:02:36.886 --> 00:02:39.620
as well but how would
you convert this

00:02:39.620 --> 00:02:45.430
to a while loop? how would this look in
terms of a while? well to be somewhat

00:02:45.430 --> 00:02:51.320
different I can tell you, the
initializer would go before the loop and

00:02:51.320 --> 00:02:55.275
the while loop to go
like this and then

00:02:55.300 --> 00:02:58.800
the condition would
go here while the

00:02:58.800 --> 00:03:03.335
body along with the
increment would

00:03:03.360 --> 00:03:07.180
actually go here so
I will show this in

00:03:07.180 --> 00:03:10.613
rather detail once we go
through some examples

00:03:10.638 --> 00:03:13.580
but just to get an
idea you see this is

00:03:13.580 --> 00:03:17.308
the for loop and this is the
while loop, the initializer

00:03:17.333 --> 00:03:21.110
would need to be declared
and initialize here

00:03:21.110 --> 00:03:26.709
the condition would be placed here and
the increments for the changes of the

00:03:26.709 --> 00:03:31.950
initializer would occur within the while
loop itself right here well they don't

00:03:31.950 --> 00:03:37.010
need to actually occur anywhere within
the body of the loop they don't need to

00:03:37.010 --> 00:03:40.613
be at the end
specifically that is what

00:03:40.638 --> 00:03:43.959
I am trying to actually
state so let's

00:03:43.959 --> 00:03:46.540
go ahead and dive
into a short example

00:03:46.565 --> 00:03:48.780
this is a fairly
simple subject to

00:03:48.880 --> 00:03:53.000
comprehend what you know is always will
be somebody in the discussion section

00:03:53.000 --> 00:03:57.381
who's gonna will be there
to assist you in any way

00:03:57.406 --> 00:04:02.060
that they can. Anyway let's
go ahead and type in int n

00:04:02.060 --> 00:04:07.709
place a semicolon there declare the variable n, I could recycle that, std

00:04:07.709 --> 00:04:10.400
cout, I could recycle this as well

00:04:10.400 --> 00:04:18.320
enter n and std cin. Ok so this
example looks pretty much the same or

00:04:28.620 --> 00:04:31.234
similar or whatever
so all that we're

00:04:31.259 --> 00:04:33.729
doing is we're going
to convert the

00:04:33.729 --> 00:04:39.300
previous for loop example into a
while loop example more or less the

00:04:39.300 --> 00:04:43.112
first portion of the
code along with int

00:04:43.137 --> 00:04:46.410
sum I guess I could
have just recycled but

00:04:46.410 --> 00:04:50.220
doesn't really matter because this is
the important part of the code which I

00:04:50.220 --> 00:04:52.430
would like which I
would really like you

00:04:52.455 --> 00:04:54.590
to understand so
what we need to do

00:04:54.590 --> 00:05:02.510
first is declare an initializer int I,
remember how before we declared int I

00:05:02.810 --> 00:05:08.419
here we're going to declare it outside
of the while loop my apologies my nose

00:05:08.419 --> 00:05:11.985
is giving me a bit of
problems today I have

00:05:12.010 --> 00:05:15.720
no idea why but oh
well anyway since I

00:05:15.720 --> 00:05:22.849
equals one this is the declaration of
the initializer, in here we can

00:05:22.849 --> 00:05:28.720
immediately jump into do while loop and
state or condition so I shall be lesser

00:05:28.720 --> 00:05:30.720
or equal to n

00:05:30.720 --> 00:05:34.681
and now we will open up
the body of the while

00:05:34.706 --> 00:05:38.700
loop, so let's go ahead
and use the same

00:05:38.800 --> 00:05:46.770
things as before so number, std, cout and
enter, I

00:05:54.710 --> 00:06:02.660
number, ok

00:06:04.860 --> 00:06:11.510
std, cin, number, semicolon,
this is the same as

00:06:11.535 --> 00:06:18.410
before so we're creating
pretty much the same body

00:06:18.410 --> 00:06:20.890
as before but you will see the
difference

00:06:20.890 --> 00:06:24.913
sum is plus or equal
so I have explained

00:06:24.938 --> 00:06:28.680
this part of the previous
tutorial, number

00:06:28.680 --> 00:06:33.105
in here here is the
key differences

00:06:33.130 --> 00:06:37.420
so here we will
increment the actual

00:06:37.420 --> 00:06:42.660
initializer and this is how it will go I
shall become I should be declare and

00:06:42.660 --> 00:06:48.550
initialize to 1, I should be taken
into the loop and evaluated against n

00:06:48.550 --> 00:06:53.270
which will be the integer that the user will enter for as long as

00:06:53.270 --> 00:06:58.080
I is lesser or equal to that particular
integer the body of the loop will

00:06:58.080 --> 00:07:05.150
continue will be executed and the
iterations of the initializer,

00:07:05.150 --> 00:07:10.800
will happen as well once the iterations
have reached the stage where I has

00:07:10.800 --> 00:07:16.080
become greater than n, this
condition here will evaluate to false

00:07:16.080 --> 00:07:22.080
and the loop will terminate and the
program will continue the program will

00:07:22.080 --> 00:07:26.530
not terminate unless you specify it to
terminate the program will continue to

00:07:26.530 --> 00:07:28.268
run it'll just go
to the next line of

00:07:28.293 --> 00:07:30.310
code after the loop
unless specified

00:07:30.410 --> 00:07:35.600
otherwise so, std,
cout, let just do this

00:07:35.625 --> 00:07:40.130
formal parts, maybe you
don't even need to

00:07:40.130 --> 00:07:44.569
but hey why not? n, I just
want to show that you

00:07:44.594 --> 00:07:48.660
will going to get pretty
much the same things and

00:07:48.660 --> 00:07:51.000
entered numbers

00:07:51.000 --> 00:07:58.912
sum, std, endl, Ok
so let's go ahead

00:07:59.037 --> 00:08:05.978
and build and run this. Wow. I

00:08:06.003 --> 00:08:12.262
actually managed to
make exactly the

00:08:12.287 --> 00:08:20.260
same mistake as before, this is

00:08:20.260 --> 00:08:25.330
fascinating isn't it? I made exactly the
same mistake as in the previous tutorial

00:08:26.070 --> 00:08:31.329
exactly the same spot
exactly the same

00:08:31.354 --> 00:08:36.284
thing I'm one of
those people in life

00:08:37.200 --> 00:08:45.190
oh wait, let's, come on, don't do this to me know.
what is the deal? cout was not

00:08:46.190 --> 00:08:50.969
declared in this scope
it was declared.

00:08:50.994 --> 00:08:55.110
areas cout it was
not declared in

00:08:55.110 --> 00:09:00.025
this okkk I'm missing
one of these, ok, there

00:09:00.050 --> 00:09:04.940
you go, enter number n,
let's make it through

00:09:04.940 --> 00:09:12.910
this time for his number 125 the sum of
three hundred members is eight anyway

00:09:13.510 --> 00:09:15.739
what I was trying to
tell you is that I'm

00:09:15.764 --> 00:09:17.730
one of those people
with extremely poor

00:09:17.730 --> 00:09:23.780
memory from time to time and if you tell
me a joke today if I died laughing to it

00:09:23.780 --> 00:09:26.780
you can tell me the same joke tomorrow I
will still die laughing to it

00:09:27.580 --> 00:09:30.943
I'm amazing to have as a
friend, very maintain so

00:09:30.968 --> 00:09:34.650
to say, very easy to introduce
with a conversation.

00:09:34.650 --> 00:09:38.310
Anyway I bet you
farewell and we're gonna

00:09:38.335 --> 00:09:41.970
go ahead and jump into
the next tutorial

00:09:41.970 --> 00:09:47.060
where we shall continue with this, but
we're gonna jump into the do while loop

00:09:47.060 --> 00:09:50.160
which is fairly similar to while as well.