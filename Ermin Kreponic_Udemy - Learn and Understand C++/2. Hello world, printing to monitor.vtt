WEBVTT

00:00:00.000 --> 00:00:03.924
Ok so, welcome back.
Anyway now let us

00:00:03.949 --> 00:00:08.099
write our first hello
world program. This

00:00:08.099 --> 00:00:10.476
is a standard thing
which pretty much

00:00:10.501 --> 00:00:12.810
everybody learns at the
very beginning. how

00:00:12.910 --> 00:00:14.870
to print hello world

00:00:14.870 --> 00:00:21.060
on to the screen and now we will need to
make our program write this to standard

00:00:21.060 --> 00:00:23.744
output in order to
achieve this, we

00:00:23.769 --> 00:00:26.170
have to use specific
functions, these

00:00:26.170 --> 00:00:32.880
functions are part of standard C++
libraries which come with C++, one of

00:00:32.880 --> 00:00:38.840
them is iostream, which is short for
input output stream, it is written like

00:00:38.840 --> 00:00:43.465
this iostream, so
iostream stand for

00:00:43.490 --> 00:00:47.789
input-output. In order
to include this

00:00:47.789 --> 00:00:51.970
library in your program, we will have to
use the include command, the sintax is

00:00:51.970 --> 00:00:54.965
fairly simple this
needs to go on top of

00:00:54.990 --> 00:00:57.320
course, but I'm just
ratings pseudocode

00:00:57.320 --> 00:01:00.849
here just to show how
it looks like so

00:01:00.874 --> 00:01:04.619
include and then
some library I don't

00:01:04.619 --> 00:01:06.870
know depending on
which library you are

00:01:06.895 --> 00:01:08.570
using, for iostream
move and type like this

00:01:08.670 --> 00:01:10.939
in like this iostream

00:01:10.939 --> 00:01:15.939
there you go. So, in that fashion we
will include it on top

00:01:16.950 --> 00:01:22.329
however inside you
iostream library

00:01:22.354 --> 00:01:27.350
we have a variable cout so cout

00:01:27.350 --> 00:01:34.040
represents our standard output cout stands for

00:01:34.040 --> 00:01:36.581
character out all
standard libraries

00:01:36.606 --> 00:01:39.470
in C++ there are
grouped under std

00:01:39.570 --> 00:01:43.246
namespace now a
namespace is a way of

00:01:43.271 --> 00:01:46.890
logically grouping
functions, variables

00:01:46.990 --> 00:01:49.994
types, so that they
don't interfere with

00:01:50.019 --> 00:01:53.070
each other, this way
we can have two

00:01:53.070 --> 00:01:55.508
functions of the
same name but in two

00:01:55.533 --> 00:01:57.490
different namespaces.
Let me give an

00:01:57.590 --> 00:02:03.630
example, so we will utilize pretty much
all of this straight away but here I am

00:02:03.630 --> 00:02:06.565
writing this to occur
just so you can

00:02:06.590 --> 00:02:09.270
have a look at it.
Ok so, named by the

00:02:09.270 --> 00:02:10.740
way pseudo code is

00:02:10.740 --> 00:02:17.410
that's a real code just basically some
lines, notes if you will

00:02:17.410 --> 00:02:19.480
let's put it like that.
So, if I type

00:02:19.505 --> 00:02:21.640
namespaces, let me
just explain what they

00:02:21.640 --> 00:02:26.200
are. If you type in
namespace and let's

00:02:26.225 --> 00:02:30.760
say we have a namespace
A and namespace B

00:02:30.760 --> 00:02:36.456
So let's say that namespace
a has a function

00:02:36.481 --> 00:02:41.760
tralalala that. And
end namespace B

00:02:41.760 --> 00:02:49.580
can also have a function of the same
name tralalala. Yeah, there you go

00:02:49.580 --> 00:02:52.470
so this doing spaces
have two functions

00:02:52.495 --> 00:02:55.810
of the same name but
these two functions

00:02:55.810 --> 00:02:58.841
are in no way related
to one another. Now

00:02:58.866 --> 00:03:01.670
we can choose which
function we will use

00:03:01.670 --> 00:03:04.265
to access a function inside of a

00:03:04.290 --> 00:03:06.810
namespace, we can use
a scope operator

00:03:06.810 --> 00:03:10.388
this is a scope operator.
colon colon

00:03:10.413 --> 00:03:14.040
for example if we
would like to access

00:03:14.140 --> 00:03:18.790
function tralalala from namespace A

00:03:18.790 --> 00:03:23.257
A, scope operator, function name

00:03:23.282 --> 00:03:28.194
tralalala and B scope operator

00:03:29.260 --> 00:03:35.780
tralalala, I know I overdid it with tralalala but yeah, anyway

00:03:40.200 --> 00:03:43.323
forgive me for that,
I could name by

00:03:43.348 --> 00:03:45.630
functions pretty much anything.
Anyway

00:03:45.730 --> 00:03:48.656
this is how you would
call those functions,

00:03:48.681 --> 00:03:51.520
how you would access
them, they can

00:03:51.520 --> 00:03:53.214
be as I said two
completely different

00:03:53.239 --> 00:03:55.334
functions, no way
related to one another

00:03:55.640 --> 00:03:58.449
filling two completely
different purposes.

00:03:58.474 --> 00:04:01.090
So, finally let us go ahead and

00:04:01.090 --> 00:04:04.536
use what we have learned
down below in our

00:04:04.561 --> 00:04:08.380
code and write our program.
So, we can

00:04:08.380 --> 00:04:13.620
safely go ahead and delete all of this
climb to the top

00:04:14.280 --> 00:04:20.560
and type the following: include iostream

00:04:21.459 --> 00:04:28.195
that proper way and
I'm gonna delete

00:04:28.220 --> 00:04:34.370
these spaces here.
why am i doing that?

00:04:34.370 --> 00:04:39.230
well it makes no difference in terms of good functionality but, it does make a

00:04:39.230 --> 00:04:43.490
difference in terms of aesthetics and
it's very important for your code to be

00:04:43.490 --> 00:04:46.800
readable by others. Why?

00:04:46.800 --> 00:04:49.823
Well, most of the
time more than one

00:04:49.848 --> 00:04:52.990
person will work the
same code and you

00:04:52.990 --> 00:04:57.690
will be criticized if your code is not
readable, so make sure that your code

00:04:57.690 --> 00:05:03.370
looks very nice, that it is a pleasure to
read it when somebody sees it it's

00:05:03.370 --> 00:05:06.124
perfect, it's in
perfect arrangement,

00:05:06.149 --> 00:05:09.360
perfectly indented,
perfectly separated

00:05:09.360 --> 00:05:16.180
etc. This is very important it is
important when you like submit samples

00:05:16.180 --> 00:05:20.580
for a job application either as a
freelancer on the net or would you

00:05:20.580 --> 00:05:25.570
submit samples of your work to
companies etc, they will immediately the

00:05:25.570 --> 00:05:31.169
very first thing that they will see is
how your code is written, is it need? is it

00:05:31.169 --> 00:05:34.930
nice? is it ordered? or is it just
something that you have written for

00:05:34.930 --> 00:05:40.070
yourself and only you can read it and no one else. So make sure that

00:05:40.070 --> 00:05:45.319
your code is very readable, have a
standard by which you write it and stick

00:05:45.319 --> 00:05:46.400
to it.

00:05:46.400 --> 00:05:50.669
Go ahead and I would advise you actually go online and have a

00:05:50.669 --> 00:05:53.932
look at coding styles,
how to make your

00:05:53.957 --> 00:05:57.000
code look nice, etc.
We will I'm pretty

00:05:57.000 --> 00:05:59.385
sure I will talk
about it somewhere

00:05:59.410 --> 00:06:01.290
along the line or
as a part of the

00:06:01.390 --> 00:06:03.649
general scope of things
but, in any case

00:06:03.674 --> 00:06:05.300
I do believe that
you get the idea.

00:06:05.400 --> 00:06:09.518
Anyway so, iostream
we are including a

00:06:09.543 --> 00:06:13.910
library for input
output, next up we have

00:06:14.010 --> 00:06:16.968
our main function, main function

00:06:16.993 --> 00:06:19.680
is the entry point
off the program

00:06:19.680 --> 00:06:26.310
and within the body of the main function
we will call, so STD

00:06:28.150 --> 00:06:35.999
colon colon, cout, less and less-than sign. Hello, coma, Udemy

00:06:41.740 --> 00:06:48.032
users. Ok so, like
this, and this will be

00:06:48.057 --> 00:06:54.580
written to STD out,
so we are accessing

00:06:54.680 --> 00:06:59.301
cout from namespace
STD which is a

00:06:59.326 --> 00:07:03.340
standards name based used here.
So I could

00:07:03.440 --> 00:07:05.060
have also written it like this

00:07:05.060 --> 00:07:09.355
using namespace STD
semicolon, semicolon

00:07:09.380 --> 00:07:13.650
is used at the end of his line,

00:07:13.650 --> 00:07:18.750
and the end of the code at the end of
the line of code in order to terminated

00:07:18.750 --> 00:07:22.050
it, is a line terminator.

00:07:22.050 --> 00:07:28.169
and in this case I would no longer
require STD cout, but as of late this

00:07:28.169 --> 00:07:30.805
is a bad practice, or it
is considered to be a bad

00:07:30.830 --> 00:07:33.229
practice in general so
just type it like this

00:07:33.229 --> 00:07:36.461
STD colon colon like
this and don't use

00:07:36.486 --> 00:07:39.090
using namespace STD I
know it seems very

00:07:39.190 --> 00:07:42.560
tempting to type in
using namespace STD

00:07:42.585 --> 00:07:45.930
and never again
having to write STD

00:07:45.930 --> 00:07:49.376
anywhere down below
but you can cause a

00:07:49.401 --> 00:07:52.330
good and you can
cause confusion etc

00:07:52.430 --> 00:07:57.699
because if you have two functions
that have the same name and if you have

00:07:57.699 --> 00:08:00.658
to name spaces here
the program might

00:08:00.683 --> 00:08:03.360
get confused, you
might cause problems

00:08:03.360 --> 00:08:07.167
for itself, so don't
use it like this and

00:08:07.192 --> 00:08:11.020
just go ahead and do
this: std colon colon

00:08:11.120 --> 00:08:14.705
that's it, simple as
that, and I know I

00:08:14.730 --> 00:08:18.030
said I would write
hello world but I lied

00:08:18.130 --> 00:08:21.130
forgive me, it's the way it is.

00:08:22.230 --> 00:08:25.439
So, as previously
said, cout is our

00:08:25.464 --> 00:08:28.470
variable that represents
standard output

00:08:28.470 --> 00:08:32.865
also said everything
from standard C++

00:08:32.890 --> 00:08:36.140
libraries is grouped
under std namespace

00:08:36.140 --> 00:08:40.940
so std namespace so
to access to cout

00:08:40.965 --> 00:08:45.290
variable we use STD
colon colon cout

00:08:45.390 --> 00:08:49.964
and lesser than lesser
than sign, is the

00:08:49.989 --> 00:08:54.640
insertion operators,
so yeah, cout in

00:08:54.640 --> 00:08:59.870
searching, and then I don't know some text or something else

00:09:01.600 --> 00:09:06.310
this is actually considered a string or something else I

00:09:06.310 --> 00:09:09.205
don't know, whatever,
actually let's create

00:09:09.230 --> 00:09:12.030
an example I guess A
lesser than lesser B

00:09:12.030 --> 00:09:17.592
So, A lesser than
lesser than B, means

00:09:17.617 --> 00:09:22.720
insert, so insert
b into A, in our

00:09:22.820 --> 00:09:26.498
example it is insert
hello you to meet

00:09:26.523 --> 00:09:30.320
users into cout, so
insert this in to cout

00:09:30.320 --> 00:09:31.750
that's it.

00:09:31.750 --> 00:09:36.287
Keep in mind that
all C++ statements

00:09:36.312 --> 00:09:40.210
end with a semicolon
C++ ignores white

00:09:40.310 --> 00:09:43.785
spaces so you can also
write the semicolon

00:09:43.810 --> 00:09:47.260
in the next, so we could do like

00:09:47.260 --> 00:09:50.306
this, but doesn't
look aesthetically

00:09:50.331 --> 00:09:53.980
pleasing and I'm
just saying that C++

00:09:53.980 --> 00:10:00.330
ignores white spaces and they don't matter at all

00:10:02.330 --> 00:10:05.497
it doesn't matter, it
doesn't take them into

00:10:05.522 --> 00:10:08.480
consideration at all.
This is, as I said

00:10:08.580 --> 00:10:10.703
this is correct but
it is considered a

00:10:10.728 --> 00:10:12.780
good practice to put
a semicolon at the

00:10:12.880 --> 00:10:18.460
end of the statement as we have placed here. You string what you want to

00:10:18.460 --> 00:10:21.347
print to standard
output, must be also

00:10:21.372 --> 00:10:23.780
enclosed in double
quotes, so double

00:10:23.880 --> 00:10:26.400
quotes and the same
between is some

00:10:26.425 --> 00:10:29.050
sort of a string
so, it says hello

00:10:29.050 --> 00:10:32.209
coma, space, Udemy, space, users

00:10:32.209 --> 00:10:36.662
exclamation exclamation mark.
Ok, so now

00:10:36.687 --> 00:10:40.829
that we have actually
written that, we are

00:10:40.929 --> 00:10:43.956
still not done, we
still have more, we

00:10:43.981 --> 00:10:47.279
still have some way
to go, and we will

00:10:47.279 --> 00:10:54.649
learn a very important concept here,
every function must return some value to

00:10:54.649 --> 00:11:00.809
return a value rewrite return and then
something, so like this

00:11:00.809 --> 00:11:08.639
return something I don't know some sort of variable, whatever, it doesn't matter and

00:11:08.739 --> 00:11:10.659
that is written at the
end of the fun...

00:11:10.684 --> 00:11:11.970
It doesn't have to
be returned to the

00:11:11.970 --> 00:11:15.666
function but usually is.
When the return

00:11:15.691 --> 00:11:19.519
statement is executed,
the function

00:11:19.619 --> 00:11:26.100
terminates, so keep that in mind. There
there are cases in with recursion, etc

00:11:26.100 --> 00:11:28.555
over the function
does terminate but it

00:11:28.580 --> 00:11:31.069
calls itself back up
again but we will

00:11:31.069 --> 00:11:35.459
talk about that way down the line. For
the time being,

00:11:35.459 --> 00:11:39.460
take it for what it
is, in main function

00:11:39.485 --> 00:11:43.120
and only in main
function and only main

00:11:43.220 --> 00:11:49.361
function is considered
to write returno 0 so

00:11:49.386 --> 00:11:55.769
if I break it at the
end, return 0, there

00:11:55.769 --> 00:11:58.047
we go. So, if we don't
write anything return

00:11:58.072 --> 00:12:00.489
0 is considered to
be there but it is a

00:12:00.589 --> 00:12:02.922
good practice to
always right return 0

00:12:02.947 --> 00:12:05.309
by ourselves I would
not advise skipping

00:12:05.309 --> 00:12:08.889
it at all, this means that the program
executed successfully

00:12:09.449 --> 00:12:12.660
0 means success, so in general

00:12:13.999 --> 00:12:17.134
pretty much any program
out there on the

00:12:17.159 --> 00:12:20.269
planet if it runs and
it returned 0 its

00:12:20.269 --> 00:12:26.790
success, it works fantastic! Ok so, that
would be it

00:12:26.790 --> 00:12:31.480
what I wanted to say
here and we will

00:12:31.505 --> 00:12:35.649
continue on where it's.
Ok so, there are

00:12:35.649 --> 00:12:38.814
some exceptions to
the rules which I

00:12:38.839 --> 00:12:41.620
have stated above
about return values

00:12:41.620 --> 00:12:44.740
and about

00:12:44.740 --> 00:12:50.540
well mainly about to return values and
about the fact that the function

00:12:50.540 --> 00:12:54.990
terminates with the return value etc.
There are some exceptions in a

00:12:54.990 --> 00:13:00.049
way I would say but I don't want to
burden you with them now for the time

00:13:00.049 --> 00:13:01.629
being in the very beginning

00:13:01.629 --> 00:13:03.672
take it for what it
is and later as we

00:13:03.697 --> 00:13:05.799
move along the way I
will show you more

00:13:05.799 --> 00:13:08.124
and more and you will
begin to understand

00:13:08.149 --> 00:13:10.569
more advanced concepts, anyway I

00:13:10.569 --> 00:13:13.799
bet you all farewell and we shall see
each other in the next tutorial.