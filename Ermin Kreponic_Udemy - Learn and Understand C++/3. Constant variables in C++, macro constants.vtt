WEBVTT

1
00:00:00.041 --> 00:00:00.693
Ok so,

2
00:00:00.855 --> 00:00:02.076
welcome back!

3
00:00:02.666 --> 00:00:05.066
Today we are going to talk a little
bit about

4
00:00:05.226 --> 00:00:08.090
constant variables in C++.

5
00:00:08.385 --> 00:00:11.911
Sometimes it is necessary
to have variables that are constant.

6
00:00:12.181 --> 00:00:12.810
That is,

7
00:00:12.971 --> 00:00:16.400
variables that only have one value.

8
00:00:16.561 --> 00:00:20.571
set by the user when declared and that
is it.

9
00:00:21.035 --> 00:00:23.326
Constant variables are
declared using

10
00:00:23.486 --> 00:00:25.415
the keyword const,
so like this.

11
00:00:26.496 --> 00:00:28.520
Oops!

12
00:00:29.161 --> 00:00:33.095
const, so this is the keyword to
declare a constant variable.

13
00:00:33.515 --> 00:00:34.266
Ah,

14
00:00:35.456 --> 00:00:36.895
we do not want to change

15
00:00:37.056 --> 00:00:38.386
this value

16
00:00:38.656 --> 00:00:39.113
ever

17
00:00:39.275 --> 00:00:39.900
like

18
00:00:40.855 --> 00:00:44.040
the value of number Pi. So if Pi is

19
00:00:44.331 --> 00:00:46.280
Let's round it up to 3.14

20
00:00:46.441 --> 00:00:51.770
We do not want to change the value
of this number through the whole code.

21
00:00:51.931 --> 00:00:53.790
So, you would declare it as a
constant value.

22
00:00:53.951 --> 00:00:55.025
So, you just type in

23
00:00:56.300 --> 00:00:57.221
like const

24
00:00:57.686 --> 00:01:00.146
pi = I don't know

25
00:01:00.310 --> 00:01:01.320
3.14 there you go.

26
00:01:02.571 --> 00:01:06.566
And so this would be so for
the entire program.

27
00:01:08.266 --> 00:01:08.870
Anyway,

28
00:01:09.886 --> 00:01:12.111
So, let's go ahead and

29
00:01:12.471 --> 00:01:17.255
write a short program and see how
this works in order to basically

30
00:01:17.526 --> 00:01:22.245
just demonstrate this point. We're
going to write two short programs or more

31
00:01:22.431 --> 00:01:23.743
just to see how it works.

32
00:01:23.905 --> 00:01:25.701
So, we leave what we have

33
00:01:25.910 --> 00:01:26.896
by now this

34
00:01:27.081 --> 00:01:28.111
template of sorts

35
00:01:28.276 --> 00:01:30.821
you can save these codes somewhere
if you want.

36
00:01:31.201 --> 00:01:35.535
These lines of code, you can separate
them into different projects or

37
00:01:35.745 --> 00:01:38.420
sub projects or sub chapters,
whatever you want.

38
00:01:38.581 --> 00:01:42.578
But I usually create just one project
file per a chapter

39
00:01:42.761 --> 00:01:45.400
so that I have at least some orientation.

40
00:01:45.561 --> 00:01:50.190
However, I already have this written,
my notes all of it so I don't think I even

41
00:01:50.401 --> 00:01:52.560
need to save it, really.

42
00:01:53.321 --> 00:01:54.845
Let's go ahead and type in int.

43
00:01:55.606 --> 00:02:00.220
x and declare an integer value,
which will be 5.

44
00:02:00.511 --> 00:02:03.890
So, this is a regular variable of x
of value

45
00:02:04.075 --> 00:02:04.700
5.

46
00:02:04.991 --> 00:02:08.475
The value of this variable of course can
be changed.

47
00:02:08.746 --> 00:02:09.973
For example, we can

48
00:02:10.135 --> 00:02:11.743
we have initialize it to

49
00:02:11.905 --> 00:02:14.256
variable x to value 5.

50
00:02:14.465 --> 00:02:15.366
But we can

51
00:02:15.701 --> 00:02:17.458
do this

52
00:02:17.815 --> 00:02:19.840
x=10

53
00:02:20.140 --> 00:02:22.171
So, now we have effectively changed

54
00:02:22.441 --> 00:02:24.986
the value of variable x.

55
00:02:25.216 --> 00:02:25.926
However,

56
00:02:26.091 --> 00:02:27.996
down below we typed in

57
00:02:28.246 --> 00:02:28.873
const

58
00:02:29.035 --> 00:02:30.685
int y

59
00:02:31.126 --> 00:02:32.413
=

60
00:02:32.705 --> 00:02:33.371
3

61
00:02:33.961 --> 00:02:34.651
that's it!

62
00:02:35.521 --> 00:02:37.490
constant variable y

63
00:02:37.655 --> 00:02:39.090
of value 3.

64
00:02:40.381 --> 00:02:43.485
Basically, the value of this
variable cannot

65
00:02:43.646 --> 00:02:44.975
be changed

66
00:02:45.291 --> 00:02:46.770
So, if I type in

67
00:02:47.146 --> 00:02:48.645
I don't know, y

68
00:02:49.086 --> 00:02:51.100
is equal to 6.

69
00:02:51.711 --> 00:02:55.220
And if I just go ahead and try to

70
00:02:55.381 --> 00:02:57.330
build and compile this,

71
00:02:57.496 --> 00:03:00.360
we can see that I am going to get an
error.

72
00:03:02.145 --> 00:03:03.900
I cannot change it at all.

73
00:03:04.726 --> 00:03:06.268
If I just delete this.

74
00:03:06.796 --> 00:03:08.405
And run and compile again.

75
00:03:08.566 --> 00:03:11.430
You see the program runs
without any problems.

76
00:03:11.636 --> 00:03:13.440
You might notice that I am not
really familiar to all

77
00:03:13.601 --> 00:03:15.290
shortcuts in Codeblocks.

78
00:03:15.456 --> 00:03:16.383
I just find it

79
00:03:16.546 --> 00:03:20.070
I don't use it in general. I really always
use clips.

80
00:03:20.256 --> 00:03:26.021
Or spider or Python development
environment as well.

81
00:03:26.251 --> 00:03:27.880
But I like to use CodeBlocks

82
00:03:28.041 --> 00:03:30.480
for teaching people
because it is very simple

83
00:03:30.816 --> 00:03:32.400
to grasp and to understand,

84
00:03:32.561 --> 00:03:36.025
and to get around with this.
It is one of the base ones.

85
00:03:38.625 --> 00:03:39.680
Moving on,

86
00:03:39.841 --> 00:03:40.911
from there.

87
00:03:42.581 --> 00:03:45.880
Syntax for the declaration of variable

88
00:03:46.516 --> 00:03:49.811
is pretty much as follows, so you
type in the keyword

89
00:03:49.976 --> 00:03:51.440
cosnt

90
00:03:51.786 --> 00:03:54.906
and then you would type in the type.
In this case it is an int

91
00:03:55.136 --> 00:03:58.325
and then of course the name
of the variable in this case it is

92
00:03:58.486 --> 00:03:59.240
y

93
00:03:59.531 --> 00:04:00.565
We can also write

94
00:04:00.726 --> 00:04:01.351
const

95
00:04:01.516 --> 00:04:03.800
after the type,

96
00:04:04.351 --> 00:04:06.943
which can be a little bit

97
00:04:07.105 --> 00:04:09.051
strange but no big deal.

98
00:04:10.306 --> 00:04:13.405
Let me just give you an example
with that.

99
00:04:14.700 --> 00:04:15.836
I can type in int

100
00:04:16.511 --> 00:04:19.400
const z =

101
00:04:20.011 --> 00:04:25.053
100; so this is exactly the same
as me writing

102
00:04:25.386 --> 00:04:26.525
const int

103
00:04:27.201 --> 00:04:29.041
z = 100

104
00:04:30.615 --> 00:04:34.566
So, don't be confused if you see this two.
it is exactly the same.

105
00:04:34.796 --> 00:04:38.705
There is no difference of whatsoever
so we don't need to worry about that.

106
00:04:39.041 --> 00:04:43.000
Keep in mind that a constant variable must
be

107
00:04:43.161 --> 00:04:46.665
initialized upon declaration of
that variable.

108
00:04:46.826 --> 00:04:47.706
Otherwise,

109
00:04:47.916 --> 00:04:50.441
you will get a...

110
00:04:50.601 --> 00:04:52.080
the program will not compile.

111
00:04:53.505 --> 00:04:55.131
So, if I

112
00:04:55.681 --> 00:04:56.925
do this,

113
00:04:57.345 --> 00:04:58.031
const

114
00:04:58.366 --> 00:04:59.040
int

115
00:04:59.201 --> 00:04:59.953
w

116
00:05:00.671 --> 00:05:02.725
It will simply say that,

117
00:05:03.126 --> 00:05:08.060
it will simply give us an error and say
w should not have been initialized.

118
00:05:08.286 --> 00:05:08.850
You see,

119
00:05:09.076 --> 00:05:10.620
I would immediately get an error there.

120
00:05:18.146 --> 00:05:19.536
Ok.

121
00:05:19.701 --> 00:05:20.960
Yup, this is

122
00:05:21.175 --> 00:05:23.611
Sorry, I cannot redeclare

123
00:05:23.776 --> 00:05:27.280
const set because I already declared
and initialized it there

124
00:05:28.385 --> 00:05:29.311
I just do this s

125
00:05:29.471 --> 00:05:30.031
do it like that.

126
00:05:30.241 --> 00:05:32.960
Let's run and compile now.
Excellent.

127
00:05:33.741 --> 00:05:37.930
Since it's const int w, this is
unitialized

128
00:05:38.091 --> 00:05:39.400
so that's a problem.

129
00:05:39.561 --> 00:05:41.680
Because we need to initialize it.
If I simply

130
00:05:42.016 --> 00:05:43.900
initialize it to whatever,

131
00:05:44.681 --> 00:05:47.680
there you go, the program
is going to run without any difficulties,

132
00:05:47.841 --> 00:05:49.660
without any problems of whatsoever.

133
00:05:50.466 --> 00:05:51.601
problem solved.

134
00:05:52.981 --> 00:05:55.471
It should be noted that

135
00:05:55.635 --> 00:05:59.920
there is difference
between constant variables and C++

136
00:06:00.171 --> 00:06:04.421
So, I'm guessing that most of you
who are learning about C++ have

137
00:06:04.716 --> 00:06:05.428
at least

138
00:06:05.590 --> 00:06:06.940
heard about C

139
00:06:07.146 --> 00:06:11.355
Linux for example the operating system
is written in C.

140
00:06:12.886 --> 00:06:16.640
Pretty much the fastest operating system
on planet earth that is currently used.

141
00:06:16.801 --> 00:06:18.865
And the most awesome operating
system.

142
00:06:19.286 --> 00:06:21.876
However, Windows is C++.

143
00:06:22.036 --> 00:06:26.845
And since we are learning C++, I am
using a virtual machine of Windows.

144
00:06:27.071 --> 00:06:27.786
C

145
00:06:27.946 --> 00:06:28.853
is faster

146
00:06:29.015 --> 00:06:30.026
than C++

147
00:06:30.186 --> 00:06:31.280
in a lot of things.

148
00:06:31.871 --> 00:06:33.265
or so it is stated.

149
00:06:34.776 --> 00:06:39.640
And the declaration of variables. A lot
of things are different in C.

150
00:06:39.801 --> 00:06:41.040
But then again

151
00:06:41.201 --> 00:06:42.205
a lot of things are very

152
00:06:42.475 --> 00:06:43.165
similar.

153
00:06:43.416 --> 00:06:47.000
And C has a very tricky syntax,

154
00:06:47.161 --> 00:06:49.945
which is a little difficult
to grasp but definitely

155
00:06:50.176 --> 00:06:51.505
not impossible.

156
00:06:51.671 --> 00:06:55.730
I might actually design a course
for C

157
00:06:55.956 --> 00:06:58.311
in regard to the current development of

158
00:06:58.476 --> 00:07:01.276
Linux, which can be an interesting thing

159
00:07:01.631 --> 00:07:03.495
but those are future plans.

160
00:07:04.126 --> 00:07:05.415
I just wanted to mention that.

161
00:07:06.431 --> 00:07:07.253
So, that's why

162
00:07:07.416 --> 00:07:11.090
everytime we make a new project,
I clearly state

163
00:07:11.256 --> 00:07:13.040
select C++ because if you select C,

164
00:07:13.201 --> 00:07:15.200
a lot of things will work
pretty much the same way

165
00:07:15.361 --> 00:07:17.045
that they do in C++

166
00:07:17.206 --> 00:07:20.520
but then you will run into something,
where you get an error for no reasons

167
00:07:20.681 --> 00:07:21.435
for

168
00:07:21.601 --> 00:07:22.780
reasons unknown to you.

169
00:07:23.476 --> 00:07:25.490
And you won't be able to understand why.

170
00:07:26.166 --> 00:07:26.686
Well,

171
00:07:26.846 --> 00:07:32.380
C and C++ they are very similar but
then again, C++ has a lot

172
00:07:33.631 --> 00:07:36.645
is a lot different in a lot of regards.

173
00:07:37.281 --> 00:07:40.088
And that's a story for another time.

174
00:07:40.251 --> 00:07:46.120
To compare the differences between
C and C++ and why C++ came after C etc.

175
00:07:46.281 --> 00:07:49.340
That's a very very long

176
00:07:49.716 --> 00:07:54.166
explanation, so I am going
to go ahead and skip that here.

177
00:07:54.391 --> 00:07:58.471
We're going to go ahead and jump
into yet another example

178
00:07:58.636 --> 00:07:59.986
of pretty much the same things here.

179
00:08:00.940 --> 00:08:02.586
Let's go ahead and delete this.

180
00:08:03.156 --> 00:08:06.040
And you see here, where it says
include IOstream,

181
00:08:06.201 --> 00:08:08.500
I can also define a value.

182
00:08:08.661 --> 00:08:10.720
I can do this

183
00:08:11.351 --> 00:08:12.336
and define

184
00:08:13.226 --> 00:08:14.021
Pi

185
00:08:14.421 --> 00:08:23.480
at 3.14159

186
00:08:24.171 --> 00:08:27.250
So this is a defined macro constant.

187
00:08:27.456 --> 00:08:28.020
Pi

188
00:08:28.181 --> 00:08:29.361
with value

189
00:08:29.611 --> 00:08:34.600
3.14159

190
00:08:35.456 --> 00:08:41.800
But this is going to work on C.

191
00:08:42.516 --> 00:08:45.720
I don't really see any reason why
it actually won't work in C++.

192
00:08:45.881 --> 00:08:47.640
Let's just run it.

193
00:08:47.851 --> 00:08:51.840
Yup, it's going to run here as well
no problems. But this is like

194
00:08:52.501 --> 00:08:58.320
as C uses macro constants, macro
commands are those compiler executes

195
00:08:58.481 --> 00:09:00.100
before compiling.

196
00:09:00.331 --> 00:09:02.578
One such command is include

197
00:09:03.166 --> 00:09:05.206
that you have here.

198
00:09:06.176 --> 00:09:11.325
and you have this example here,
where we are defining the value

199
00:09:12.126 --> 00:09:12.731
of Pi.

200
00:09:12.961 --> 00:09:18.160
By convention, constant variables are
written in uppercase as you can see.

201
00:09:18.321 --> 00:09:20.325
This is the variable name.

202
00:09:21.686 --> 00:09:22.250
Ok then,

203
00:09:22.411 --> 00:09:24.040
so

204
00:09:24.246 --> 00:09:25.535
let's go

205
00:09:25.696 --> 00:09:26.623
let's go ahead and

206
00:09:26.785 --> 00:09:27.583
continue

207
00:09:27.745 --> 00:09:29.880
onwards.

208
00:09:30.795 --> 00:09:32.976
I probably should have written this
4.

209
00:09:33.441 --> 00:09:36.720
I should remove all of this.

210
00:09:37.110 --> 00:09:38.716
3.14 then it is going to be

211
00:09:38.946 --> 00:09:40.760
like this.

212
00:09:44.726 --> 00:09:46.033
Let's go ahead

213
00:09:46.986 --> 00:09:48.520
and move on.

214
00:09:50.741 --> 00:09:51.365
Here,

215
00:09:51.896 --> 00:09:52.711
and we'e gonna just

216
00:09:53.110 --> 00:09:57.361
do again a basic prompt of the user
to input something.

217
00:10:00.106 --> 00:10:01.160
cout

218
00:10:02.540 --> 00:10:03.400
Enter

219
00:10:04.011 --> 00:10:05.085
circle

220
00:10:08.065 --> 00:10:09.631
radius.

221
00:10:09.791 --> 00:10:11.100
Ok, simple enough.

222
00:10:11.820 --> 00:10:14.706
I'm pretty sure that a user will
be able to do that.

223
00:10:14.935 --> 00:10:16.711
And then we're goign to type in down
below

224
00:10:17.726 --> 00:10:18.395
float

225
00:10:22.016 --> 00:10:25.160
radius. So this will declare a

226
00:10:25.321 --> 00:10:26.330
variable

227
00:10:26.561 --> 00:10:29.231
in which we will store the input.

228
00:10:29.995 --> 00:10:32.520
If I mispelled something, please
forgive me.

229
00:10:33.815 --> 00:10:35.740
Now, we need to type in std.

230
00:10:36.031 --> 00:10:36.911
::

231
00:10:37.206 --> 00:10:39.708
cin &gt;&gt;

232
00:10:41.110 --> 00:10:41.946
radius

233
00:10:43.905 --> 00:10:44.850
and ok

234
00:10:45.846 --> 00:10:46.428
this

235
00:10:46.891 --> 00:10:50.908
So, this will actually be pulling the
input from the keyboard.

236
00:10:52.201 --> 00:10:55.941
and we will be storing it
into the variable radius.

237
00:10:57.430 --> 00:10:58.011
Next up,

238
00:10:58.176 --> 00:11:00.720
we will type in float.

239
00:11:01.505 --> 00:11:02.175
circle

240
00:11:02.336 --> 00:11:03.218
_

241
00:11:04.555 --> 00:11:05.120
area

242
00:11:05.281 --> 00:11:07.830
=Pi

243
00:11:08.331 --> 00:11:09.361
multiplied by

244
00:11:10.721 --> 00:11:11.900
radius

245
00:11:15.306 --> 00:11:17.560
If we include the math function,
we won't actually

246
00:11:17.721 --> 00:11:20.965
multiply a radius by radius
there would be a square

247
00:11:21.260 --> 00:11:21.993
which we could

248
00:11:22.155 --> 00:11:26.680
immediately utilize but more of that
later.

249
00:11:27.681 --> 00:11:28.583
radius

250
00:11:29.345 --> 00:11:30.161
and there we go.

251
00:11:31.265 --> 00:11:33.231
So, we're going to get a
square

252
00:11:33.566 --> 00:11:35.668
It's going to be Pi times

253
00:11:35.831 --> 00:11:36.970
radius square.

254
00:11:37.131 --> 00:11:41.340
We're declaring a variable circle
area, and then we are using the formula

255
00:11:41.526 --> 00:11:42.343
to compute

256
00:11:42.551 --> 00:11:44.800
the circle of the area.

257
00:11:46.221 --> 00:11:49.231
The Area of the Circle, my apologies.

258
00:11:50.721 --> 00:11:52.561
std::

259
00:11:53.046 --> 00:11:54.333
cout

260
00:11:57.076 --> 00:11:58.600
Circle's

261
00:12:01.176 --> 00:12:03.080
radius

262
00:12:05.081 --> 00:12:06.720
I don't know,

263
00:12:07.146 --> 00:12:08.520
circle_

264
00:12:09.345 --> 00:12:10.375
area

265
00:12:10.541 --> 00:12:12.640
std::

266
00:12:12.801 --> 00:12:14.440
endl

267
00:12:14.936 --> 00:12:15.965
there we go

268
00:12:16.126 --> 00:12:19.205
So this will print out the area unto
the screen

269
00:12:19.926 --> 00:12:20.956
the compiler

270
00:12:21.116 --> 00:12:23.006
replaced Pi

271
00:12:23.166 --> 00:12:26.080
with the given number so 3.14

272
00:12:26.241 --> 00:12:29.533
before compiling.

273
00:12:29.801 --> 00:12:31.045
That is the line

274
00:12:31.361 --> 00:12:32.906
with float circle

275
00:12:33.066 --> 00:12:34.633
area = Pi so.

276
00:12:34.795 --> 00:12:36.871
So float circle_area =

277
00:12:37.311 --> 00:12:38.281
Pi

278
00:12:38.441 --> 00:12:40.645
times radius times radius, again

279
00:12:41.791 --> 00:12:44.800
it's replaced with the following.

280
00:12:45.291 --> 00:12:46.560
So,

281
00:12:47.211 --> 00:12:47.835
we'll just

282
00:12:48.256 --> 00:12:50.240
copy this line one more time,

283
00:12:51.116 --> 00:12:54.200
You don't need to do this,
I'm just doing this for demo.

284
00:12:59.156 --> 00:13:01.248
3.14

285
00:13:01.461 --> 00:13:05.930
So, this is what will happen during
the compile time.

286
00:13:06.091 --> 00:13:06.845
as this Pi

287
00:13:07.006 --> 00:13:07.550
has been replaced

288
00:13:07.711 --> 00:13:09.406
with the value

289
00:13:09.566 --> 00:13:12.155
that has been defined right here.

290
00:13:13.281 --> 00:13:15.228
So, there is no

291
00:13:15.586 --> 00:13:19.560
so, that there is no confusion
there.

292
00:13:20.446 --> 00:13:21.415
This whole

293
00:13:21.580 --> 00:13:22.396
program

294
00:13:22.966 --> 00:13:24.170
what we have

295
00:13:24.331 --> 00:13:24.788
just

296
00:13:24.950 --> 00:13:25.531
written

297
00:13:28.511 --> 00:13:32.165
before compiling will pretty much
look like this.

298
00:13:36.031 --> 00:13:37.350
This will be fine.

299
00:13:37.791 --> 00:13:38.930
This will be fine.

300
00:13:39.095 --> 00:13:41.231
This will again
be fine.

301
00:13:41.801 --> 00:13:43.005
All of this.

302
00:13:43.511 --> 00:13:47.200
and this is the place where
things are going to change so,

303
00:13:47.361 --> 00:13:48.530
before compiling

304
00:13:48.886 --> 00:13:51.880
just imagine that this line here
does not exist.

305
00:13:52.041 --> 00:13:54.240
So this would

306
00:13:54.516 --> 00:14:00.645
this is how the entire program will look

307
00:14:01.131 --> 00:14:03.320
before compiling.

308
00:14:03.481 --> 00:14:06.085
This is the only thing here that will

309
00:14:06.466 --> 00:14:08.466
pretty much change
and that is it.

310
00:14:08.630 --> 00:14:10.396
That is what I wanted to show you here.

311
00:14:10.795 --> 00:14:13.428
Ok, so now, I'm going to
go ahead and

312
00:14:13.590 --> 00:14:16.881
bid you farewell, and we shall start

313
00:14:18.281 --> 00:14:19.250
with

314
00:14:19.820 --> 00:14:22.520
Ok, so we'll go into
the follow up tutorial

315
00:14:22.681 --> 00:14:25.820
and I think we will have just two more
tutorials in this chapter and we will

316
00:14:26.026 --> 00:14:26.655
move

317
00:14:26.816 --> 00:14:27.455
onwards.

