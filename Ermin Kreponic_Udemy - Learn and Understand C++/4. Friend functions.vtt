WEBVTT

00:00.210 --> 00:00.810
DE ACUERDO.

00:00.840 --> 00:01.710
Dar una buena acogida.

00:01.710 --> 00:05.840
Hoy vamos a echar un vistazo a una función de amigo.

00:06.090 --> 00:06.720
Así que acabo.

00:06.720 --> 00:10.210
Eso es lo único que he cambiado en la clase ficticia.

00:10.230 --> 00:17.120
Acabo de agregar una función de amigo, así que abajo, en general. Acabo de escribir en la clase

00:17.160 --> 00:21.550
ficticia y he declarado dos variables: DC 1 y DC 2.

00:21.780 --> 00:29.520
Básicamente vamos a utilizar este constructor aquí.

00:29.530 --> 00:36.070
El que realmente toma los parámetros y luego va a imprimir una cadena y un entero

00:36.070 --> 00:36.620
aquí.

00:36.820 --> 00:41.630
Pero si queríamos imprimir bien.

00:41.670 --> 00:46.740
Usa este y este y luego de alguna manera nos gustaría agregar las dos cuerdas.

00:47.070 --> 00:49.510
Entonces, veamos qué está pasando aquí.

00:49.620 --> 00:59.430
Usted tiene un constructor de clase ficticio y toma un parámetro e inicializa un atributo y luego inicializa otro

00:59.430 --> 01:05.280
atributo y luego los imprime y luego imprime y luego crea

01:05.280 --> 01:07.490
una impresión en la pantalla.

01:08.010 --> 01:15.470
Pero, ¿y si quisiéramos interactuar de alguna manera entre las dos instancias de una clase?

01:15.480 --> 01:19.260
Digamos que lo hemos llamado una vez y luego lo hemos llamado dos veces.

01:19.260 --> 01:22.560
Y queremos que estos dos interactúen entre ellos de alguna manera.

01:22.560 --> 01:27.090
No sé, digamos por el bien de este ejemplo, que nos gustaría agregar las dos

01:27.630 --> 01:29.570
cadenas juntas para que nos gustaría acceder.

01:29.700 --> 01:34.380
Bueno, nos gustaría acceder al atributo que nos gustaría que nos gustaría agregar las

01:34.380 --> 01:35.210
dos variables juntas.

01:35.490 --> 01:42.330
Entonces, necesitaríamos acceder a un atributo de un atributo privado de una instancia y luego

01:42.330 --> 01:45.800
acceder a un atributo privado de otra instancia.

01:46.310 --> 01:52.290
Usted ve que estos atributos privados están aquí, es el subrayado sim bajo 880 son uno.

01:52.610 --> 01:57.470
Entonces, nos gustaría acceder a los atributos privados de ambas instancias.

01:57.470 --> 01:58.880
¿Cómo lo logramos?

01:58.880 --> 02:01.910
Bueno, es por eso que tenemos un método amigo.

02:02.060 --> 02:08.330
Este método amigo es capaz de acceder a variables privadas de ambas instancias.

02:09.340 --> 02:12.090
Y crea algún tipo de interacción entre ellos.

02:12.100 --> 02:18.490
En nuestro caso, vamos a llamar a estos atributos un simulacro uno además de DC

02:18.820 --> 02:25.960
al atributo ficticio uno así que estamos efectivamente agregando el mismo atributo dos veces, pero desde dos

02:26.050 --> 02:32.020
instancias diferentes de la misma clase y luego vamos a ve y observa el resultado.

02:32.030 --> 02:34.130
Para eso necesitamos un método diferente.

02:34.240 --> 02:39.080
La declaración de un método francés es bastante simple, solo lo que hay que hacer es escribir un amigo delante de

02:39.140 --> 02:40.610
él y eso es literalmente eso.

02:40.640 --> 02:41.570
Nada más.

02:41.600 --> 02:45.640
Todo lo demás es exactamente lo mismo que el método regular.

02:46.250 --> 02:52.990
Este método publicitario tomará dos atributos de tipo dummy class.

02:52.990 --> 02:58.540
Será DC 1 y DC 2 y estos se transmitirán a continuación en la parte principal.

02:58.580 --> 03:04.910
Y luego devolverá algún tipo de resultado.

03:04.910 --> 03:08.360
OK, sigamos adelante y

03:11.550 --> 03:14.840
probablemente deberíamos escribir aquí.

03:14.990 --> 03:17.220
Bueno, no, no realmente.

03:17.300 --> 03:21.300
De todos modos, dejaré que el compilador me diga que siento que ese es siempre el mejor enfoque.

03:21.650 --> 03:23.910
Incluso mucha gente discutiría conmigo.

03:24.500 --> 03:30.760
Avancemos e ingresemos y rez como resultado final y eso será igual a

03:34.050 --> 03:44.670
y un cc de CC a lo que Michael Ondaatje y entonces estamos llamando a la función de amigo y le estamos

03:44.670 --> 03:50.930
pasando los atributos necesarios y luego vamos a abre SDD y llama un arte.

03:51.120 --> 03:53.860
RAZ y pidiendo ser tuyo.

03:53.970 --> 04:01.860
Y Colin y Del y, por supuesto, solo recordé que estaba olvidando algo.

04:01.900 --> 04:05.220
Resultado de devolución.

04:05.260 --> 04:06.000
Aquí vamos.

04:07.830 --> 04:11.020
Así que sigamos y acabemos con esto.

04:11.040 --> 04:14.100
La iteración anterior sigue ejecutándose solo cerrada.

04:15.840 --> 04:20.890
Nos controla para guardar la compilación y ejecutar OK.

04:20.890 --> 04:26.390
Entonces, un segundo parámetro constructor aquí equivale a 100 segundos constructor constructor aquí el parámetro

04:26.390 --> 04:31.120
al que llama a 200 destructor ha sido llamado destructor ha sido llamado.

04:31.150 --> 04:38.160
Y luego de nuevo abajo se llama un método y se suman 100 y 200.

04:38.320 --> 04:39.790
Y eso es todo por 300.

04:39.790 --> 04:44.200
Y luego otra vez se llama al destructor.

04:44.980 --> 04:51.550
Entonces, hemos usado algo, hemos destruido algo, hemos usado ese mismo algo otra vez

04:51.550 --> 04:55.880
y luego hemos destruido ese mismo algo nuevamente dos veces.

04:55.900 --> 05:00.660
Este es un uso un poco redundante pero es mejor evitarlo que lamentarlo.

05:00.820 --> 05:05.310
De todos modos, las estructuras formaban parte del tutorial anterior aquí.

05:05.320 --> 05:12.650
Solo quería mostrar cómo puedes interactuar entre las dos instancias de una clase.

05:12.840 --> 05:19.400
De todas formas, como pueden ver, esto está llamando al constructor y el constructor es mucho más

05:19.400 --> 05:19.970
que solo.

05:20.210 --> 05:22.650
También hay un char. También hay un.

05:22.820 --> 05:23.350
Ahi esta.

05:23.420 --> 05:26.750
También hay una impresión en la pantalla.

05:27.260 --> 05:34.370
Entonces también hay otro atributo y hay una impresión en la pantalla, etc. pero este tiene la capacidad de

05:34.370 --> 05:38.930
acceder a algo dentro de la clase.

05:38.930 --> 05:46.910
Entonces, si tomamos una variable privada Digamos que no puedes acceder a ella, pero puedes hacer referencia a ella dentro de la clase y luego

05:46.910 --> 05:52.610
acceder a ella desde dentro de la clase con un método y una vez que llamas a un

05:52.610 --> 05:55.730
método amigo de una clase, puedes acceder a variables.

05:55.820 --> 06:00.860
Si recuerdas antes, no podíamos acceder a ellos directamente, sino que teníamos que

06:00.860 --> 06:06.560
pasar por métodos porque, por ejemplo, este y este son privados y no puedes acceder

06:06.560 --> 06:12.650
a ellos directamente, solo puedes acceder a ellos a través de métodos públicos para cámbielos o

06:12.650 --> 06:15.100
utilícelos de cualquier manera o manera.

06:15.320 --> 06:24.680
Como lo hemos hecho a través de la función de amigo en abajo como lo hemos llamado y funciona.

06:24.740 --> 06:32.980
De todos modos, eso es todo lo que realmente quería mostrarle cómo puede entrometerse entre las diferencias entre DC 1

06:32.980 --> 06:40.780
y DC 2 entre estas dos entre estas dos instancias de la misma clase, cómo puede usar los atributos

06:40.810 --> 06:43.930
privados de ellas usando exactamente lo mismo.

06:43.930 --> 06:50.170
Al usar este mismo método aquí, tenemos acceso al atributo de la instancia c,

06:50.170 --> 06:56.900
y también tenemos acceso al atributo de la instancia D C sin ningún tipo de problema.

06:57.440 --> 07:02.740
De todos modos voy a seguir adelante y deciros adiós y vamos a seguir

07:02.740 --> 07:11.700
adelante y saltar al próximo capítulo, donde en el próximo capítulo, el próximo tutorial del mismo capítulo, donde hablaremos de las clases genéricas.
