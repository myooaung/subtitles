WEBVTT

1
00:00:00.231 --> 00:00:01.600
Welcome back all.

2
00:00:01.786 --> 00:00:04.641
So today we're going to
go ahead and

3
00:00:05.411 --> 00:00:06.708
play around

4
00:00:08.081 --> 00:00:09.315
between...

5
00:00:09.451 --> 00:00:11.065
we're going to go ahead
and play around

6
00:00:11.201 --> 00:00:12.721
between two structures.

7
00:00:13.211 --> 00:00:14.440
So,

8
00:00:16.741 --> 00:00:17.766
the question now

9
00:00:17.901 --> 00:00:20.880
that I'm going to post
it's going to have a bit of a

10
00:00:21.920 --> 00:00:23.426
a bit of technical
feel to it.

11
00:00:23.800 --> 00:00:24.320
So,

12
00:00:24.796 --> 00:00:25.941
it goes as follows.

13
00:00:26.076 --> 00:00:30.321
Can all instances of a
structure have a joined attribute?

14
00:00:30.790 --> 00:00:32.900
The answer to this question
is yes.

15
00:00:33.156 --> 00:00:35.455
The attribute is called
a static attribute.

16
00:00:36.176 --> 00:00:40.960
And is shared with all the
variables of that structure.

17
00:00:41.306 --> 00:00:42.325
Now if you

18
00:00:42.466 --> 00:00:44.925
did not understand what I
just said or

19
00:00:45.626 --> 00:00:46.878
if you would like to

20
00:00:47.041 --> 00:00:47.715
replay it,

21
00:00:48.041 --> 00:00:48.991
something like that,

22
00:00:49.156 --> 00:00:50.360
feel free but

23
00:00:50.501 --> 00:00:53.880
a far easier thing is
to have a look at the example.

24
00:00:54.265 --> 00:00:55.096
Because I have

25
00:00:55.426 --> 00:00:57.986
created these neat little
definitions

26
00:00:58.121 --> 00:01:01.250
for each one of these segments,
written them out, etc.

27
00:01:01.461 --> 00:01:04.066
But then as I was writing out
the definitions

28
00:01:04.201 --> 00:01:06.280
and the explanations
for all of these,

29
00:01:07.291 --> 00:01:09.848
Along the merry way
I just realized

30
00:01:09.981 --> 00:01:11.700
the same thing that

31
00:01:12.026 --> 00:01:14.026
was a problem for me
would probably be a problem

32
00:01:14.161 --> 00:01:15.180
for a lot of other people.

33
00:01:15.461 --> 00:01:17.110
Dry talk means little.

34
00:01:17.296 --> 00:01:20.960
So let's get into code and let's
see how this actually looks like.

35
00:01:22.476 --> 00:01:24.825
Anyway, we're going to go ahead
and create another structure.

36
00:01:24.961 --> 00:01:26.280
So it's going to be

37
00:01:26.421 --> 00:01:27.325
struct

38
00:01:27.956 --> 00:01:29.440
book

39
00:01:29.996 --> 00:01:32.600
and we shall play around
with it.

40
00:01:32.946 --> 00:01:36.495
You see, code blocks is
kind enough the semicolon at the end.

41
00:01:36.965 --> 00:01:39.226
And now we would include
some different things.

42
00:01:39.361 --> 00:01:40.375
ID.

43
00:01:40.611 --> 00:01:42.441
This will be the ID of the book.

44
00:01:43.001 --> 00:01:45.575
And the next one that we should
include will be the name of the book.

45
00:01:45.996 --> 00:01:48.711
Now, name that would be a string.

46
00:01:49.061 --> 00:01:51.160
So, Oops we will

47
00:01:51.521 --> 00:01:53.160
go ahead and

48
00:01:53.730 --> 00:01:55.400
include

49
00:01:56.376 --> 00:01:56.961
String.

50
00:01:57.096 --> 00:01:58.255
Thank you very much!

51
00:01:59.441 --> 00:02:01.993
And now we should do a std::

52
00:02:02.576 --> 00:02:05.040
String. Name.

53
00:02:05.476 --> 00:02:06.040
Here we go.

54
00:02:06.176 --> 00:02:08.820
And we shall also want
the author of the book.

55
00:02:09.146 --> 00:02:11.360
Ok, yet another string. Right?

56
00:02:12.351 --> 00:02:13.680
::

57
00:02:14.790 --> 00:02:16.160
String.

58
00:02:17.646 --> 00:02:19.160
Author.

59
00:02:20.456 --> 00:02:23.030
Awesome, and now. We
would like to have.

60
00:02:23.426 --> 00:02:25.640
Publication date of
this book.

61
00:02:25.866 --> 00:02:28.185
I guess we could create three ints
here right?

62
00:02:28.881 --> 00:02:29.530
Well,

63
00:02:29.856 --> 00:02:30.513
we could.

64
00:02:30.646 --> 00:02:31.155
But

65
00:02:31.646 --> 00:02:33.440
Have a look at this.
Date.

66
00:02:35.246 --> 00:02:36.560
Published.

67
00:02:36.941 --> 00:02:38.166
; in the end.

68
00:02:38.451 --> 00:02:42.560
And down below we will
have a book count.

69
00:02:43.466 --> 00:02:44.391
So, I don't know,

70
00:02:44.651 --> 00:02:45.680
static int

71
00:02:46.206 --> 00:02:47.840
count

72
00:02:50.361 --> 00:02:51.750
Ok, in the structure book,

73
00:02:52.081 --> 00:02:55.480
we can note two interesting facts.

74
00:02:55.866 --> 00:02:58.250
The attribute published is
of type Date,

75
00:02:58.441 --> 00:03:00.360
which is a structure.

76
00:03:00.506 --> 00:03:01.340
Here it is.

77
00:03:01.481 --> 00:03:03.080
We've created it,

78
00:03:04.271 --> 00:03:08.625
which means that the structures
can have their own structures

79
00:03:08.761 --> 00:03:10.680
as their attributes.

80
00:03:11.256 --> 00:03:11.835
So, once again,

81
00:03:12.166 --> 00:03:13.021
structures

82
00:03:13.231 --> 00:03:14.043
can have

83
00:03:14.461 --> 00:03:16.805
other structures. So structure Book

84
00:03:17.041 --> 00:03:19.565
has another structure called
Date

85
00:03:19.896 --> 00:03:21.658
as an attribute.

86
00:03:21.821 --> 00:03:24.280
So, look it's an attribute
here.

87
00:03:24.516 --> 00:03:25.165
That's one thing.

88
00:03:25.306 --> 00:03:29.180
And the other thing to note here
is that the attribute count is static.

89
00:03:29.416 --> 00:03:29.908
So

90
00:03:30.041 --> 00:03:31.680
this is a static

91
00:03:32.381 --> 00:03:35.240
attribute. Hmm...
What does that mean.

92
00:03:35.916 --> 00:03:39.050
Basically, it means that
all variables of

93
00:03:39.656 --> 00:03:40.373
type Book

94
00:03:40.721 --> 00:03:43.375
will share the attribute count.

95
00:03:43.510 --> 00:03:45.341
All the variables

96
00:03:45.601 --> 00:03:46.735
of type book

97
00:03:47.016 --> 00:03:48.506
will share

98
00:03:48.641 --> 00:03:49.755
this attribute.

99
00:03:50.106 --> 00:03:52.051
So it doesn't mix up.

100
00:03:52.216 --> 00:03:53.826
You will see soon enough what I
mean by this.

101
00:03:53.961 --> 00:03:57.080
If you can figure it out already.
And I trust that you did.

102
00:03:57.951 --> 00:03:58.970
So,

103
00:03:59.111 --> 00:04:01.810
shall we basically,

104
00:04:01.946 --> 00:04:03.560
let's go ahead and redo this.

105
00:04:04.986 --> 00:04:08.400
And let's go ahead and type in

106
00:04:09.725 --> 00:04:10.466
One tab.

107
00:04:11.096 --> 00:04:12.720
One tab

108
00:04:13.511 --> 00:04:14.720
as before

109
00:04:15.016 --> 00:04:17.111
we will create a variable so

110
00:04:17.246 --> 00:04:18.880
of type book,

111
00:04:19.176 --> 00:04:21.080
So B1.

112
00:04:21.496 --> 00:04:23.576
comma b2

113
00:04:25.096 --> 00:04:26.046
and it's going to be like

114
00:04:26.256 --> 00:04:29.240
b1.id

115
00:04:29.661 --> 00:04:33.160
ID we shall initialize to 0.

116
00:04:35.171 --> 00:04:36.425
B1.

117
00:04:36.936 --> 00:04:38.080
Name

118
00:04:38.516 --> 00:04:41.360
So, the name will be

119
00:04:41.626 --> 00:04:43.440
What shall the name be

120
00:04:44.136 --> 00:04:47.240
Anybody have any bright
ideas for the name of the book.

121
00:04:47.665 --> 00:04:50.595
I want to invent a completely
random name.

122
00:04:50.730 --> 00:04:51.376
Ok, so

123
00:04:51.821 --> 00:04:53.200
Random

124
00:04:53.470 --> 00:04:56.386
Name. I sincerely hope that there
is a book out there with

125
00:04:56.521 --> 00:04:57.466
the name Random name.

126
00:04:57.601 --> 00:05:00.480
If there is this has no connection
to it of whatsoever.

127
00:05:01.550 --> 00:05:02.916
Ok, so

128
00:05:04.003 --> 00:05:05.125
Let's go ahead and

129
00:05:05.356 --> 00:05:06.285
type in

130
00:05:06.421 --> 00:05:08.160
b1.

131
00:05:08.936 --> 00:05:10.520
Author.

132
00:05:12.346 --> 00:05:12.901
This shall be

133
00:05:13.556 --> 00:05:16.461
equal to who shall be the
author of this book.

134
00:05:16.596 --> 00:05:19.288
The author of this book will be

135
00:05:20.356 --> 00:05:21.260
a Random

136
00:05:22.170 --> 00:05:23.256
Random guy

137
00:05:23.421 --> 00:05:24.640
let's say

138
00:05:24.841 --> 00:05:26.480
I don't know someone.

139
00:05:29.086 --> 00:05:31.546
The name of the book is Random Name

140
00:05:31.681 --> 00:05:33.825
and the name of the author
is Random guy.

141
00:05:33.961 --> 00:05:36.380
I know I am created beyond belief.

142
00:05:36.516 --> 00:05:37.211
But hey,

143
00:05:37.541 --> 00:05:39.960
What can you really do about it.

144
00:05:40.605 --> 00:05:42.606
And now we will have

145
00:05:42.741 --> 00:05:43.395
a count,

146
00:05:43.531 --> 00:05:44.550
which is a static.

147
00:05:44.716 --> 00:05:46.945
Which is a static and it is shared
across

148
00:05:47.081 --> 00:05:49.030
all the

149
00:05:49.311 --> 00:05:50.700
variables of type book.

150
00:05:51.121 --> 00:05:53.395
So, it is shared in between B1,

151
00:05:53.861 --> 00:05:55.345
which is a variable of type Book.

152
00:05:55.481 --> 00:05:59.760
And it is shared by b2
which is also a variable of type book.

153
00:06:00.201 --> 00:06:01.720
b1.

154
00:06:02.036 --> 00:06:03.316
count=

155
00:06:03.451 --> 00:06:04.920
1.

156
00:06:06.076 --> 00:06:08.171
So now, let's print out

157
00:06:08.306 --> 00:06:11.400
the count of

158
00:06:12.115 --> 00:06:13.400
book2.

159
00:06:13.661 --> 00:06:15.020
Right?

160
00:06:15.156 --> 00:06:16.280
Why?

161
00:06:16.526 --> 00:06:17.690
Because we have initialized

162
00:06:17.826 --> 00:06:19.085
it to one.

163
00:06:19.221 --> 00:06:19.890
Here you see?

164
00:06:20.216 --> 00:06:21.865
Count has been initialized to 1.

165
00:06:22.285 --> 00:06:24.395
But has been initialized to 1 for b1.

166
00:06:24.836 --> 00:06:28.760
Let's see what happens when we print
out the value for b2.

167
00:06:29.271 --> 00:06:30.065
Take a

168
00:06:30.201 --> 00:06:32.706
If anybody want to take any wild
guesses, feel free to

169
00:06:33.126 --> 00:06:36.000
I'm sure you can make a conclusion
in a rather

170
00:06:36.331 --> 00:06:37.383
easy manner.

171
00:06:37.516 --> 00:06:39.120
So b2

172
00:06:39.421 --> 00:06:42.720
Now you see, we haven't initialized it
for b2 at all anyway

173
00:06:43.181 --> 00:06:45.000
this is just for b1.

174
00:06:45.316 --> 00:06:46.280
So,

175
00:06:46.666 --> 00:06:48.640
b2.

176
00:06:49.266 --> 00:06:50.560
Count

177
00:06:51.610 --> 00:06:53.123
std::

178
00:06:53.256 --> 00:06:54.920
endl

179
00:06:55.231 --> 00:06:56.445
Let's just go ahead and run
it

180
00:06:56.581 --> 00:06:58.400
and see what happens.

181
00:07:00.736 --> 00:07:02.680
Ok.

182
00:07:05.446 --> 00:07:06.445
I seem to have

183
00:07:06.610 --> 00:07:07.218
a problem.

184
00:07:07.351 --> 00:07:09.400
Undefined reference

185
00:07:10.046 --> 00:07:12.120
to book count.

186
00:07:13.181 --> 00:07:14.480
That seems to be a problem.

187
00:07:15.016 --> 00:07:16.360
b1

188
00:07:17.056 --> 00:07:19.200
book here, there's a comma here

189
00:07:19.726 --> 00:07:22.975
There is a semicolon which I'm
notorious for forgetting.

190
00:07:24.025 --> 00:07:26.576
Maybe I'm mispelling it. No way!

191
00:07:26.766 --> 00:07:28.920
No way am I...

192
00:07:29.246 --> 00:07:31.640
that's stupid.

193
00:07:34.796 --> 00:07:36.720
Ok.

194
00:07:37.606 --> 00:07:39.321
Let me just copy paste it.

195
00:07:39.791 --> 00:07:40.391
Maybe

196
00:07:40.601 --> 00:07:41.800
I am.

197
00:07:42.226 --> 00:07:44.800
There's always a chance.

198
00:07:45.411 --> 00:07:50.800
Ok, let's try it one more time
and define reference to book Count.

199
00:07:51.886 --> 00:07:53.610
But the first one is at line

200
00:07:53.745 --> 00:07:56.111
28 and the 2nd one is
at line

201
00:07:56.926 --> 00:07:57.960
30.

202
00:07:58.201 --> 00:07:59.786
Why is it an undefined

203
00:07:59.921 --> 00:08:00.925
reference.

204
00:08:01.061 --> 00:08:03.080
Have I not defined it here?

205
00:08:03.426 --> 00:08:05.000
It is defined.

206
00:08:05.401 --> 00:08:06.501
Right there.

207
00:08:06.841 --> 00:08:09.200
And it's Struct Book.

208
00:08:12.251 --> 00:08:16.160
Let's go ahead and see what the
problem could be.

209
00:08:16.591 --> 00:08:17.125
Ok, so again on line

210
00:08:17.706 --> 00:08:18.446
30 and

211
00:08:18.636 --> 00:08:20.240
here,

212
00:08:20.701 --> 00:08:21.985
What are you supposed is
an urgent find?

213
00:08:22.121 --> 00:08:25.920
Let's go ahead and try it like this,
maybe I am that stupid.

214
00:08:29.756 --> 00:08:31.720
On book2 but

215
00:08:32.891 --> 00:08:34.280
on book2 but

216
00:08:35.631 --> 00:08:37.120
It's the one undefined reference.

217
00:08:37.396 --> 00:08:38.470
No wait, it doesn't matter,

218
00:08:38.606 --> 00:08:41.040
if it's on the same line or not.

219
00:08:43.806 --> 00:08:46.266
Let me go ahead and check with
what the problem is.

220
00:08:46.401 --> 00:08:47.380
It's probably something

221
00:08:47.545 --> 00:08:51.675
absurdly stupid but it's not
just occuring to me at the moment.

222
00:08:51.886 --> 00:08:52.866
Ok, so

223
00:08:53.001 --> 00:08:56.575
I completely forgot about this.

224
00:08:56.716 --> 00:08:58.266
I said it like a couple of moments
ago.

225
00:08:58.401 --> 00:08:59.940
And then I forgot about it.

226
00:09:00.106 --> 00:09:02.403
It didn't see it in my notes here. I
didn't have it.

227
00:09:03.401 --> 00:09:03.935
Anyway,

228
00:09:04.446 --> 00:09:05.815
since this is static,

229
00:09:06.120 --> 00:09:07.926
you will need to

230
00:09:08.186 --> 00:09:09.623
allocate some space for it.

231
00:09:09.996 --> 00:09:12.880
You would need to give it some memory
space in a way.

232
00:09:13.155 --> 00:09:15.106
So, this is what we shall do

233
00:09:15.241 --> 00:09:18.935
in order to reserve some memory for it
and put it in here.

234
00:09:19.516 --> 00:09:21.123
Look, if I for example

235
00:09:21.256 --> 00:09:22.185
If I do this,

236
00:09:22.675 --> 00:09:23.585
and

237
00:09:23.720 --> 00:09:25.256
If I try to compile,

238
00:09:25.391 --> 00:09:26.920
it's not going to work, ok.

239
00:09:27.201 --> 00:09:28.763
But if I just remove

240
00:09:28.896 --> 00:09:29.730
static

241
00:09:30.151 --> 00:09:33.056
and I do this, it will compile

242
00:09:33.191 --> 00:09:33.986
without any problems,

243
00:09:34.121 --> 00:09:36.680
although it's going to give me
some random value here.

244
00:09:37.186 --> 00:09:39.120
However,

245
00:09:39.716 --> 00:09:41.595
actually, you know what,

246
00:09:42.411 --> 00:09:44.200
just take a look at it
one more time.

247
00:09:44.596 --> 00:09:47.121
We are printing b2.count.

248
00:09:47.471 --> 00:09:51.000
We have not initialized it for
b2. And if we run and compile it,

249
00:09:51.351 --> 00:09:53.040
if we build and run it,

250
00:09:53.486 --> 00:09:56.240
we're going to get some completely
random value.

251
00:09:56.645 --> 00:09:57.316
Keep in mind.

252
00:09:57.506 --> 00:10:00.400
Look, this is a completely
random value here but

253
00:10:00.636 --> 00:10:02.895
we have initialized b1 count

254
00:10:03.030 --> 00:10:04.938
we have initialized count for b1.

255
00:10:05.071 --> 00:10:06.720
But not for b2.

256
00:10:06.861 --> 00:10:08.146
And if it is not static,

257
00:10:08.281 --> 00:10:10.325
it's not really shared
between the two.

258
00:10:10.461 --> 00:10:12.480
However, if I make it

259
00:10:12.921 --> 00:10:13.615
static,

260
00:10:13.851 --> 00:10:17.240
I just need to reserve some
memory space for it.

261
00:10:17.541 --> 00:10:19.560
And

262
00:10:19.886 --> 00:10:21.625
then I will,

263
00:10:21.861 --> 00:10:24.025
do a build and run again,

264
00:10:24.161 --> 00:10:25.876
and you see now it's one.

265
00:10:26.041 --> 00:10:27.485
Now, the value is shared

266
00:10:27.621 --> 00:10:29.600
between all the...

267
00:10:31.566 --> 00:10:33.680
clipping.

268
00:10:35.701 --> 00:10:36.516
Ok, so they didn't do

269
00:10:36.651 --> 00:10:37.253
a terrible job.

270
00:10:37.441 --> 00:10:39.640
But still I mean come on.

271
00:10:43.060 --> 00:10:46.896
The value of the variables is shared.

272
00:10:47.031 --> 00:10:47.360
So you have one

273
00:10:47.656 --> 00:10:48.660
and

274
00:10:48.796 --> 00:10:54.411
it's for b2. It's one for b2 as well.
So, the count is shared between the

275
00:10:54.716 --> 00:10:59.400
between b1 and b2.

276
00:10:59.941 --> 00:11:04.386
Anyway, just don't forget about
line22 here in my code where we

277
00:11:04.521 --> 00:11:07.466
basically just reserving some
space for it.

278
00:11:07.601 --> 00:11:10.280
Because it's static so we do it
that way.

279
00:11:10.506 --> 00:11:11.240
Anyway,

280
00:11:11.386 --> 00:11:13.135
the declaration

281
00:11:13.270 --> 00:11:13.738
the usage

282
00:11:13.871 --> 00:11:14.640
you cannot

283
00:11:14.776 --> 00:11:17.775
for example, this shouldn't actually
work in C.

284
00:11:17.911 --> 00:11:20.080
Because of the

285
00:11:20.466 --> 00:11:21.091
Oops.

286
00:11:21.326 --> 00:11:24.506
Because of the static
declaration here. So, you wouldn't be

287
00:11:24.641 --> 00:11:27.715
able to use a static variable
within a structure in

288
00:11:27.851 --> 00:11:28.575
C,

289
00:11:28.710 --> 00:11:29.381
however,

290
00:11:29.616 --> 00:11:32.910
you would be able to use it in
C++.

291
00:11:33.421 --> 00:11:36.480
And this is a C++ program
of course.

292
00:11:36.720 --> 00:11:37.583
I'm pretty sure

293
00:11:37.716 --> 00:11:41.595
about that but. Don't hold my word
to it. Check it for yourselves.

294
00:11:42.270 --> 00:11:44.226
Everything that I say at all times,

295
00:11:44.361 --> 00:11:47.346
and I do believe that this
is the best approach even to

296
00:11:47.481 --> 00:11:50.975
college lectures and to pretty much
any sort of lectures of whatsoever,

297
00:11:51.346 --> 00:11:52.906
take everything with a grain of salt

298
00:11:53.041 --> 00:11:53.581
and

299
00:11:53.716 --> 00:11:57.186
don't take anything at face value.
Just go ahead and check it out

300
00:11:57.321 --> 00:11:58.946
for yourselves and see if it
is really so

301
00:11:59.081 --> 00:12:00.705
or if it is something else.

302
00:12:00.986 --> 00:12:05.040
Or if you can draw your own
conclusions about it.

303
00:12:06.535 --> 00:12:07.073
Here,

304
00:12:07.206 --> 00:12:08.065
we can

305
00:12:08.485 --> 00:12:09.921
basically just

306
00:12:10.061 --> 00:12:11.920
go ahead and do this as well.

307
00:12:14.706 --> 00:12:16.731
What shall we do?

308
00:12:16.866 --> 00:12:18.118
Let's go ahead and type in

309
00:12:18.376 --> 00:12:20.565
b2.

310
00:12:21.206 --> 00:12:23.155
Count and let's go ahead and
change the value.

311
00:12:23.346 --> 00:12:25.880
So, let's change it to I don't know
10.

312
00:12:26.246 --> 00:12:27.265
And now we're going to

313
00:12:27.431 --> 00:12:29.223
be lazy.

314
00:12:29.356 --> 00:12:32.040
And copy this.

315
00:12:33.281 --> 00:12:34.600
Ok

316
00:12:36.276 --> 00:12:36.745
and

317
00:12:36.881 --> 00:12:38.760
this shall be b1.

318
00:12:39.181 --> 00:12:41.460
We haven't changed the value
with b2.

319
00:12:41.596 --> 00:12:45.480
And it's going to be changed for b1 as
well.

320
00:12:45.751 --> 00:12:48.760
Look at it, yup. It is 1
and 10.

321
00:12:50.256 --> 00:12:52.746
And you can basically change it
anyway you want.

322
00:12:52.881 --> 00:12:57.890
So we see that we can have
shared attributes for all variables.

323
00:12:58.266 --> 00:13:02.491
Since these attributes are
not dependent on a variable,

324
00:13:02.866 --> 00:13:03.983
we can access them by

325
00:13:04.116 --> 00:13:05.786
stating them

326
00:13:06.021 --> 00:13:07.866
by stating the name of the
structure,

327
00:13:08.001 --> 00:13:09.920
followed by the scope operator.

328
00:13:10.456 --> 00:13:11.546
So we can access

329
00:13:12.641 --> 00:13:14.408
just with the scope operator
like here,

330
00:13:14.541 --> 00:13:15.120
You see

331
00:13:15.261 --> 00:13:16.190
we have

332
00:13:16.331 --> 00:13:18.008
it here and

333
00:13:18.141 --> 00:13:19.510
that's what we basically

334
00:13:19.816 --> 00:13:22.550
did here and you can do it here
in the code as well,

335
00:13:22.971 --> 00:13:25.200
if you just

336
00:13:25.666 --> 00:13:26.383
type in

337
00:13:26.801 --> 00:13:27.335
Book

338
00:13:27.500 --> 00:13:28.426
::

339
00:13:29.241 --> 00:13:29.780
Count

340
00:13:29.915 --> 00:13:30.708
equals

341
00:13:30.841 --> 00:13:31.960
100.

342
00:13:32.096 --> 00:13:32.775
So, you see

343
00:13:32.911 --> 00:13:35.793
this is also possible

344
00:13:35.926 --> 00:13:36.830
without any problems.

345
00:13:37.021 --> 00:13:39.431
And now you can use either
one of these two.

346
00:13:39.851 --> 00:13:42.640
We can be lazy again and use this.

347
00:13:42.916 --> 00:13:45.040
So, let's go ahead and create
a print out.

348
00:13:45.331 --> 00:13:48.070
So, you see 1 10 100.

349
00:13:48.441 --> 00:13:49.720
No problems.

350
00:13:50.000 --> 00:13:50.950
They're all printed

351
00:13:51.160 --> 00:13:52.746
out there.

352
00:13:52.881 --> 00:13:55.570
They don't even need a variable
to access an attribute

353
00:13:55.806 --> 00:13:58.920
like this if an attribute is static.

354
00:13:59.451 --> 00:14:02.403
Anyway, I would like to apologize for
this small area that I made here.

355
00:14:02.536 --> 00:14:05.600
I completely forgot about that.

356
00:14:09.760 --> 00:14:11.496
the memory space is required.

357
00:14:12.360 --> 00:14:13.705
And that we need to do this.

358
00:14:14.286 --> 00:14:14.888
But,

359
00:14:15.496 --> 00:14:16.065
as I've said,

360
00:14:16.201 --> 00:14:18.050
there are some differences
between

361
00:14:18.186 --> 00:14:20.706
C and C++ in this regard.

362
00:14:20.841 --> 00:14:24.080
My mind just wandered of in
a completely wrong direction.

363
00:14:24.386 --> 00:14:29.066
Anyway, I bid you all farewell.
And hope to see you in the follow up

364
00:14:29.201 --> 00:14:31.820
tutorial where we shall deal
with

365
00:14:31.956 --> 00:14:33.163
arrays that are

366
00:14:33.326 --> 00:14:34.765
made of

367
00:14:34.900 --> 00:14:36.320
structs.

368
00:14:36.531 --> 00:14:37.370
So,

369
00:14:37.506 --> 00:14:39.905
I hope that I have formatted

370
00:14:40.041 --> 00:14:40.826
that right.

371
00:14:40.961 --> 00:14:43.270
We shall deal with arrays
of structs, let's put it like that.

372
00:14:43.405 --> 00:14:46.956
And we'll see how that actually works
out.

