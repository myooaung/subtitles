WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:05.940
Ok, so here we are in the last tutorial
of the chapter. Here I will just

00:00:05.940 --> 00:00:12.469
explain what nested loops are, what they
look like, and the basic concept of them. Well,

00:00:12.469 --> 00:00:17.449
there's nothing really new here that I will
show you primarily because I

00:00:17.449 --> 00:00:21.289
have shown you already how the loops
work, and for ths demonstration I

00:00:21.289 --> 00:00:26.230
will use the for loop. It is a simple
matter of putting another loop inside

00:00:26.230 --> 00:00:29.560
the body of the first loop and so on and
so forth.

00:00:29.560 --> 00:00:34.250
Nothing more than that. So, anyway we
have M &amp; N values

00:00:34.250 --> 00:00:42.760
and "Enter M and N, seperated by space"
In the loop we have the first loop

00:00:42.760 --> 00:00:48.590
basically just says while ""i &lt;=N" So, here's what will happen.

00:00:48.590 --> 00:00:53.850
This will be the first iteration, this entire thing will be the first

00:00:53.850 --> 00:01:00.859
iteration of the first for loop. So, the
entire inner for loop will finish, it

00:01:00.859 --> 00:01:07.100
will go from 1 to N the entire
iteration will finish, and it will print

00:01:07.100 --> 00:01:12.640
out stars. So, this entire iteration
will complete, it will go into the new

00:01:12.640 --> 00:01:17.119
line, and then we will go into the next
iteration of the for loop. Again, for each

00:01:17.119 --> 00:01:21.330
iteration of the for loop, of the first
for loop, the entire iteration of the

00:01:21.330 --> 00:01:28.000
inner loop will occur, can just
imagine what the output will be? So,

00:01:28.000 --> 00:01:35.710
we're basically printing out stars,
several stars in one line at a time, and

00:01:35.710 --> 00:01:41.530
we're specifying basically M and N.
They're basically the height and the

00:01:41.530 --> 00:01:46.600
length, let's put it like that. You can
you can look at it in such a fashion. So,

00:01:46.600 --> 00:01:59.640
let's go ahead and run this. This is so typical of me...what am I missing? Of course, "cout" So, let's do

00:01:59.640 --> 00:02:01.409
it.

00:02:01.409 --> 00:02:09.580
So, M and N, let's say 10 x 10. There we go, 10 x 10. They're all printed out

00:02:09.580 --> 00:02:14.590
listed there. You can print various forms, play around with it.

00:02:14.590 --> 00:02:16.190
You know what?

00:02:16.190 --> 00:02:21.650
Try to print a triangle. Try to
print a right triangle, see how that

00:02:21.650 --> 00:02:26.010
works out for you. You will need to, I'm not going to do it for you.

00:02:26.010 --> 00:02:30.390
You can find plenty of examples on how to do this on the net, there's like 10 billion

00:02:30.390 --> 00:02:35.400
examples it's a textbook example,
but don't don't immediately go and jump

00:02:35.400 --> 00:02:37.569
to it to see how other people have done
it.

00:02:37.569 --> 00:02:40.989
Try to do it yourself. Really try to
do it. I mean it does help you out with the

00:02:40.989 --> 00:02:45.890
logic.a little bit. It does help you out with logic. Let me just give you a small hint. You

00:02:45.890 --> 00:02:52.930
will need to use the index,
the iterator, from the first loop in the

00:02:52.930 --> 00:02:58.930
as a value for the second loop. So, most
likely you don't even need to bother

00:02:58.930 --> 00:03:06.609
with M and N, you can put fixed values,
and you probably won't need the N, the N

00:03:06.609 --> 00:03:15.150
will most likely become the i, so the i
will stand somewhere here instead of the

00:03:15.150 --> 00:03:20.799
N. Anyway, that's my hint for you
that the i will go down as well. So, i

00:03:20.799 --> 00:03:27.329
will be here but it will also be down
here, something like that. The value of i

00:03:27.329 --> 00:03:32.410
anyway. So, think about it that's just my
hint, but you don't need to follow my hint,

00:03:32.410 --> 00:03:37.669
you can do it anyway you like. I would
advise you to try to do it as I said it

00:03:37.669 --> 00:03:45.329
helps me out a lot with logic. Anyway,
just jumping to a conclusion real quick.

00:03:45.329 --> 00:03:51.480
So, loops are real useful and often used
in programs, actually very often used in

00:03:51.480 --> 00:03:55.980
programs. There are three main types of
loops. You have a for loop, you have a

00:03:55.980 --> 00:04:03.139
while loop, and you have a do while loop
as well. A bit modified version of the

00:04:03.139 --> 00:04:09.739
loop is the for each loop, but everything a
for each loop can do, well it can

00:04:09.739 --> 00:04:13.780
also be done with a for loop, as well as with a while

00:04:13.780 --> 00:04:19.769
loop as well. However, for each is useful
for certain for certain segments I can

00:04:19.769 --> 00:04:24.870
guarantee that to you. You will see a
loop used pretty much anywhere and more or less in

00:04:24.870 --> 00:04:29.139
any program written in C++ any more
complex program that is will contain

00:04:29.139 --> 00:04:34.130
some sort of a loop in it. That should be
it as far as the loop chapter is

00:04:34.130 --> 00:04:40.180
concerned. Feel free to post questions in
the Q&amp;A section, ask as many as you like.

00:04:40.180 --> 00:04:45.790
We will be happy to help you out anyway
we can either I or some of my staff

00:04:45.790 --> 00:04:50.600
members, somebody's gonna be there to
provide answers for you. That's it as far

00:04:50.600 --> 00:04:54.600
as this chapter is concerned, after this
we're jumping into a whole new world!

00:04:54.600 --> 00:04:56.419
No, just another chapter.

