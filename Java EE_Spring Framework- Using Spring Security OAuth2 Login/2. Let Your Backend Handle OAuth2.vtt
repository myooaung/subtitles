WEBVTT
1
00:00:01.640 --> 00:00:06.180
The most secure and recommended way of securing your single‑page application,

2
00:00:06.180 --> 00:00:08.410
and don't take my word for it,

3
00:00:08.410 --> 00:00:11.450
this comes directly from the OAuth 2 Working Group,

4
00:00:11.450 --> 00:00:15.420
is to let Spring Security handle the OAuth 2 authentication

5
00:00:15.420 --> 00:00:19.700
flow for your single‑page application. Your users will

6
00:00:19.700 --> 00:00:21.790
access the application domain.

7
00:00:21.790 --> 00:00:26.430
This request will be intercepted by Spring Security's DelegatingFilterProxy.

8
00:00:26.430 --> 00:00:30.190
The user, at this stage, is not authenticated, hence Spring

9
00:00:30.190 --> 00:00:34.370
Security will redirect them to the authorization server to be

10
00:00:34.370 --> 00:00:38.140
authenticated and to get their consent.

11
00:00:38.140 --> 00:00:43.370
The auth server then returns the auth code via a redirect, and Spring

12
00:00:43.370 --> 00:00:48.220
Security exchanges it for an access token via the back channel and then

13
00:00:48.220 --> 00:00:51.740
uses it to access the /userinfo endpoint.

14
00:00:51.740 --> 00:00:53.940
The user is now authenticated,

15
00:00:53.940 --> 00:00:57.930
and we'll have an active session with the web server, hence the

16
00:00:57.930 --> 00:01:01.640
bundle file is then sent and loaded in their browser.

17
00:01:01.640 --> 00:01:04.950
The single‑page application then makes AJAX REST calls

18
00:01:04.950 --> 00:01:06.940
to the Spring Security back end,

19
00:01:06.940 --> 00:01:09.630
and the browser will include the cookie automatically for

20
00:01:09.630 --> 00:01:13.040
all these requests, hence why the controllers in our

21
00:01:13.040 --> 00:01:15.740
application are now REST controllers.

22
00:01:15.740 --> 00:01:19.940
The demo for this module is based off my previous course where we secured

23
00:01:19.940 --> 00:01:24.570
a single‑page application using form and basic login, so it's worth

24
00:01:24.570 --> 00:01:26.990
checking this module out. In this module, however,

25
00:01:26.990 --> 00:01:31.240
I'm stripping out all that authentication code and configuring the

26
00:01:31.240 --> 00:01:36.040
application to be a client of Keycloak using OpenID Connect.

27
00:01:36.040 --> 00:01:39.450
The configuration is very similar to the previous modules. We

28
00:01:39.450 --> 00:01:43.810
have the spring‑boot‑starter‑oauth2‑client dependency, and in

29
00:01:43.810 --> 00:01:47.430
our application.yml file, we have the same clients we registered

30
00:01:47.430 --> 00:01:52.940
in the previous modules, which include the client‑id, secret, nothing new here.

31
00:01:52.940 --> 00:01:57.610
The SecurityConfiguration adapter is also very similar. All requests

32
00:01:57.610 --> 00:02:02.240
need to be authenticated, and we are using oauth2Login.

33
00:02:02.240 --> 00:02:04.020
If the user is not authenticated,

34
00:02:04.020 --> 00:02:07.130
we will redirect them to the authorization endpoint,

35
00:02:07.130 --> 00:02:11.130
which will initiate the OAuth 2 authorization code flow to

36
00:02:11.130 --> 00:02:15.140
authenticate this user using OpenID Connect.

37
00:02:15.140 --> 00:02:19.450
One slight difference is we are now including a cookie for

38
00:02:19.450 --> 00:02:23.290
cross‑site request forgery protection as this is a single‑page

39
00:02:23.290 --> 00:02:26.200
application, so you can output the cross‑site request forgery

40
00:02:26.200 --> 00:02:28.540
token in a hidden form field.

41
00:02:28.540 --> 00:02:29.360
And yes,

42
00:02:29.360 --> 00:02:32.010
you do need cross‑site request forgery protection

43
00:02:32.010 --> 00:02:35.040
even for single‑page applications.

44
00:02:35.040 --> 00:02:39.000
Now, all the requests to /portfolio, I am just forwarding to the root.

45
00:02:39.000 --> 00:02:44.500
With my default, Spring will return the index.html page. That will then

46
00:02:44.500 --> 00:02:47.940
load the bundle.js file in the user's browser,

47
00:02:47.940 --> 00:02:51.210
which is the React version of the crypto‑portfolio application.

48
00:02:51.210 --> 00:02:53.440
Okay, let's test this all out.

49
00:02:53.440 --> 00:02:54.320
As you can see,

50
00:02:54.320 --> 00:02:58.940
Spring Security redirected us to Keycloak as we're not authenticated.

51
00:02:58.940 --> 00:03:01.060
If we sign in as Victoria,

52
00:03:01.060 --> 00:03:04.710
the bundle.js then loads in our browser, and we are now

53
00:03:04.710 --> 00:03:07.440
interacting with a single‑page application.

54
00:03:07.440 --> 00:03:11.240
You can see the AJAX REST calls being sent to the Spring back end,

55
00:03:11.240 --> 00:03:14.740
which are authenticated by the cookies in the header.

56
00:03:14.740 --> 00:03:18.240
The browser automatically includes the cookies for us.

57
00:03:18.240 --> 00:03:21.140
Nice, and simple, and secure.

58
00:03:21.140 --> 00:03:24.740
This is what is known as the Backend for Frontend pattern.

59
00:03:24.740 --> 00:03:28.380
Our front end deals with only one back‑end API,

60
00:03:28.380 --> 00:03:30.930
so all requests are same as the origin, hence we don't

61
00:03:30.930 --> 00:03:33.140
need to worry about call's headers.

62
00:03:33.140 --> 00:03:36.400
Our client ID and secret are securely stored server

63
00:03:36.400 --> 00:03:39.340
side and not exposed to the front end.

64
00:03:39.340 --> 00:03:45.140
The browser and front end never get exposed to any access or refresh tokens.

65
00:03:45.140 --> 00:03:49.810
If you need to call a third‑party API or microservice using the access token,

66
00:03:49.810 --> 00:03:53.400
then the back end handles that. This is, by far, the best way

67
00:03:53.400 --> 00:03:55.840
to secure your single‑page application.

68
00:03:55.840 --> 00:03:57.240
But next,

69
00:03:57.240 --> 00:04:06.000
let's look at the challenges and considerations you need to consider if you were to perform the OAuth 2 login flow on your SPA.

