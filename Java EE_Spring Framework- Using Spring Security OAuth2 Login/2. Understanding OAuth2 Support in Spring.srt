1
00:00:02,640 --> 00:00:05,540
OAuth is a very flexible framework.

2
00:00:05,540 --> 00:00:08,160
Since its inception in 2012,

3
00:00:08,160 --> 00:00:13,700
there have been many new RFCs published that add and remove functionality,

4
00:00:13,700 --> 00:00:18,860
as well as recommendations and best practices on how to implement OAuth.

5
00:00:18,860 --> 00:00:23,340
In fact, OAuth 2 is not even designed for authentication.

6
00:00:23,340 --> 00:00:27,440
It's actually designed for delegated authorization.

7
00:00:27,440 --> 00:00:27,650
Now,

8
00:00:27,650 --> 00:00:31,120
you might find this strange as authentication seems to

9
00:00:31,120 --> 00:00:33,480
be one of its most popular use cases,

10
00:00:33,480 --> 00:00:38,330
but the OAuth 2 spec simply mentions authentication should happen,

11
00:00:38,330 --> 00:00:40,330
but doesn't mention how.

12
00:00:40,330 --> 00:00:41,930
That's up to you,

13
00:00:41,930 --> 00:00:45,090
and you would have to create your own implementation on

14
00:00:45,090 --> 00:00:51,200
top of OAuth to support authentication, like Facebook's Facebook Connect,

15
00:00:51,200 --> 00:00:56,240
or you could use the OpenID Connect extension,

16
00:00:56,240 --> 00:00:59,240
which adds authentication to OAuth 2.

17
00:00:59,240 --> 00:01:04,540
This complexity is best summarized by the following maze diagram from Okta,

18
00:01:04,540 --> 00:01:07,840
which as a developer, you would have to traverse.

19
00:01:07,840 --> 00:01:10,470
The OAuth 2 group is actually trying to currently

20
00:01:10,470 --> 00:01:14,640
address this with the OAuth 2.1 draft,

21
00:01:14,640 --> 00:01:19,940
which is simply a consolidation of all these published changes and best

22
00:01:19,940 --> 00:01:24,320
practices of OAuth 2 to simplify things for developers,

23
00:01:24,320 --> 00:01:27,940
but as mentioned, it's still a draft.

24
00:01:27,940 --> 00:01:29,090
Fortunately,

25
00:01:29,090 --> 00:01:32,540
Spring Security can take care of a lot of this

26
00:01:32,540 --> 00:01:36,140
complexity for you right out of the box.

27
00:01:36,140 --> 00:01:39,040
So why reinvent the wheel?

28
00:01:39,040 --> 00:01:40,630
When you use Spring Security,

29
00:01:40,630 --> 00:01:44,230
you are joining a large community of security nerds with a

30
00:01:44,230 --> 00:01:47,660
vested interest in keeping the framework up to date with

31
00:01:47,660 --> 00:01:52,240
the latest security threats, trends, and best practices.

32
00:01:52,240 --> 00:01:57,320
In the past, however, OAuth 2 support in Spring was a bit messy.

33
00:01:57,320 --> 00:02:00,940
It was scattered between a number of projects.

34
00:02:00,940 --> 00:02:05,300
If you look at the OAuth 2 feature matrix for Spring,

35
00:02:05,300 --> 00:02:10,090
it was supported in Spring Boot OAuth 2, Spring Cloud Security,

36
00:02:10,090 --> 00:02:13,740
Spring Security OAuth 2, and Spring Security 5.

37
00:02:13,740 --> 00:02:17,460
You might have even heard of Spring Social in the past.

38
00:02:17,460 --> 00:02:22,440
Now, this made things very confusing as to which one to use,

39
00:02:22,440 --> 00:02:26,860
and it depended on your requirements, hence the Spring team have

40
00:02:26,860 --> 00:02:33,710
decided to unify JWT, JOSE, OAuth 2, and OpenID Connect support under

41
00:02:33,710 --> 00:02:37,640
Spring Security proper as of Spring Security 5,

42
00:02:37,640 --> 00:02:40,950
which actually makes a lot of sense. Effectively,

43
00:02:40,950 --> 00:02:46,490
it's a rewrite. Now, currently, there still isn't full feature parity,

44
00:02:46,490 --> 00:02:49,520
but if you go through the matrix, you can see the gaps.

45
00:02:49,520 --> 00:02:52,850
But the plan is to unify all the projects under one.

46
00:02:52,850 --> 00:02:56,850
So if your feature is supported by Spring Security 5 and above,

47
00:02:56,850 --> 00:03:00,840
then use it. The other projects under maintenance mode until

48
00:03:00,840 --> 00:03:03,340
the features are migrated to Spring Security.

49
00:03:03,340 --> 00:03:04,670
Okay, great.

50
00:03:04,670 --> 00:03:13,000
Now, that's all the theory out of the way, so let's get started on implementing OAuth 2 in our demo application.

