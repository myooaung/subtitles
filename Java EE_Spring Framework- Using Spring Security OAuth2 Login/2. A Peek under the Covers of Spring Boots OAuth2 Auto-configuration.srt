1
00:00:01,740 --> 00:00:06,090
From the types of Spring Boot dependencies we added to our POM file,

2
00:00:06,090 --> 00:00:11,780
it correctly assumed that we wanted a web application with OAuth2 login,

3
00:00:11,780 --> 00:00:17,150
and the way it configured everything is via these auto‑configured dependency,

4
00:00:17,150 --> 00:00:20,490
which has a number of auto‑configured classes in it.

5
00:00:20,490 --> 00:00:25,440
Now, in the webmin folder, there is a spring.factories properties file,

6
00:00:25,440 --> 00:00:29,230
which lists all the auto‑configuration classes that

7
00:00:29,230 --> 00:00:31,840
would be bootstrapped on Startup.

8
00:00:31,840 --> 00:00:34,820
Here is the one that takes care of OAuth2 clients,

9
00:00:34,820 --> 00:00:38,140
the OAuth2ClientAutoConfiguration.

10
00:00:38,140 --> 00:00:41,040
Now, let's take a look inside and see the magic.

11
00:00:41,040 --> 00:00:46,410
This class will activate if the following conditional annotations are satisfied.

12
00:00:46,410 --> 00:00:49,950
So these two classes need to be in the class path,

13
00:00:49,950 --> 00:00:54,690
which they will be because we added the oauth2‑client boot dependency.

14
00:00:54,690 --> 00:00:57,340
The application is a web app as we also have the

15
00:00:57,340 --> 00:01:01,240
spring‑boot‑starter‑web dependency, so conditions are met,

16
00:01:01,240 --> 00:01:03,720
hence the triggering of the import of the

17
00:01:03,720 --> 00:01:09,300
OAuth2ClientRegistrationRepositoryConfiguration and the OAuth2WebSecurityConfiguration

18
00:01:09,300 --> 00:01:10,440
classes.

19
00:01:10,440 --> 00:01:15,380
The ClientRegistrationRepositoryConfiguration creates an

20
00:01:15,380 --> 00:01:16,520
InMemoryClientRegistrationRepository.

21
00:01:16,520 --> 00:01:22,720
Now, by merging the client info we put in our application.yml file,

22
00:01:22,720 --> 00:01:29,140
so Facebook and Google, with the properties in the CommonOAuth2Provider enum.

23
00:01:29,140 --> 00:01:33,220
If we look at the OAuth2WebSecurityConfiguration class,

24
00:01:33,220 --> 00:01:36,760
it highlights the opinionated nature of Spring Boot.

25
00:01:36,760 --> 00:01:40,850
Using the ConditionalOnMissingBean annotation,

26
00:01:40,850 --> 00:01:46,310
Spring Boot detects that if we have not configured the essential services,

27
00:01:46,310 --> 00:01:52,140
such as the OAuth2AuthorizationClientService and ClientRepository,

28
00:01:52,140 --> 00:01:55,140
then it will do that for us.

29
00:01:55,140 --> 00:01:57,500
If you have used Spring Security in the past,

30
00:01:57,500 --> 00:02:02,340
you'll be very familiar with the WebSecurityConfigurationAdapter.

31
00:02:02,340 --> 00:02:04,340
Don't worry if you haven't.

32
00:02:04,340 --> 00:02:06,840
By the end of this course, you will be.

33
00:02:06,840 --> 00:02:10,830
Now, here, the OAuth2 configuration class creates one for us,

34
00:02:10,830 --> 00:02:13,960
annotates it with Configuration so that it gets added

35
00:02:13,960 --> 00:02:18,470
to the Spring application context, and overrides the configure method,

36
00:02:18,470 --> 00:02:22,550
the HTTP security builder, which by default,

37
00:02:22,550 --> 00:02:28,040
would have secured our application with form and basic authentication.

38
00:02:28,040 --> 00:02:29,480
But in this case,

39
00:02:29,480 --> 00:02:35,440
it will require all requests to be authenticated using oauth2login.

40
00:02:35,440 --> 00:02:39,450
Okay, I hope that makes things slightly clearer,

41
00:02:39,450 --> 00:02:44,540
but don't worry if it doesn't because it will by the end of the course,

42
00:02:44,540 --> 00:02:45,440
I promise.

43
00:02:45,440 --> 00:02:49,240
Next, let's get back to the main focus of this module.

44
00:02:49,240 --> 00:02:57,000
How can we complement an existing form of authentication with the option of OAuth2 social sign‑in?

