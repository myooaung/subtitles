WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.950 --> 00:00:08.160
How we can create an orientation or a break between race.

00:00:08.160 --> 00:00:13.200
And so we need to talk about the genetics.

00:00:13.200 --> 00:00:16.380
Genetics comes into place because the Fourier fall,

00:00:16.380 --> 00:00:21.330
we have a collection I'm in now with doesn't have any type safety are typecasting.

00:00:21.330 --> 00:00:25.110
But as about 1.5 that I saved,

00:00:25.110 --> 00:00:28.515
the casting has the name neighborhood through generics.

00:00:28.515 --> 00:00:29.760
Right?

00:00:29.760 --> 00:00:33.220
Let's see a simple example how we are going to add to that.

00:00:33.860 --> 00:00:38.320
So I'm going to create a new class here.

00:00:39.490 --> 00:00:43.890
So I can call them as generic example.

00:00:47.440 --> 00:00:50.670
And I have a main method.

00:00:55.540 --> 00:00:59.045
Right? So now what I'm gonna do,

00:00:59.045 --> 00:01:02.840
Let's create a simple generic metal.

00:01:02.840 --> 00:01:05.900
Generic meant It's a common even I can access,

00:01:05.900 --> 00:01:08.030
even if you can access the similar way,

00:01:08.030 --> 00:01:09.515
even if it is string,

00:01:09.515 --> 00:01:11.390
it can be access to the genetic matter.

00:01:11.390 --> 00:01:15.860
If it is in digital, it can access like different kind of diggers can be accessed.

00:01:15.860 --> 00:01:18.350
But the code is the same thing for examined.

00:01:18.350 --> 00:01:20.915
Want to do adding some elements into a list,

00:01:20.915 --> 00:01:24.710
ok, to create a single simple program here.

00:01:24.710 --> 00:01:28.910
So there's the diamond operation which provides the what type of data I'm gonna pass.

00:01:28.910 --> 00:01:33.770
So list of t I'm going to return as a partner the metallics

00:01:33.770 --> 00:01:39.230
that response and generally example method.

00:01:39.230 --> 00:01:45.030
And it's going to accelerate to input D and D1, D2.

00:01:46.540 --> 00:01:54.290
And it is going to return the list of t, right?

00:01:54.290 --> 00:01:59.010
So now what I want to do, let's import the list first.

00:02:04.860 --> 00:02:07.150
So now what we're going to do,

00:02:07.150 --> 00:02:09.025
I'm going to create a list for now.

00:02:09.025 --> 00:02:10.360
So what, what is the list?

00:02:10.360 --> 00:02:13.255
That list contents, that type of dystrophy.

00:02:13.255 --> 00:02:23.590
And ally is equal to mu of t, right?

00:02:23.590 --> 00:02:27.835
So in paternalistic good.

00:02:27.835 --> 00:02:30.640
So now what I'm gonna do, I'm gonna add element into it.

00:02:30.640 --> 00:02:35.020
And so I have two inputs from my metal, right?

00:02:35.020 --> 00:02:44.515
So I'm going to use them and T1 and T2, right?

00:02:44.515 --> 00:02:47.220
So I'm gonna return that list.

00:02:47.220 --> 00:02:49.430
The method is very generic.

00:02:49.430 --> 00:02:54.200
It doesn't say what kind of data I'm going to pass, right?

00:02:54.200 --> 00:03:01.730
So I'm going to call

00:03:01.730 --> 00:03:09.800
the mantle using generic example, genetic example.

00:03:09.800 --> 00:03:11.630
Okay, I'm going to print them.

00:03:11.630 --> 00:03:13.265
So putting says, Well,

00:03:13.265 --> 00:03:16.350
the first time I'm calling them at all.

00:03:18.040 --> 00:03:21.680
And I guess I'm going to pass it a string.

00:03:21.680 --> 00:03:26.010
So it gets nothing but hello world.

00:03:31.440 --> 00:03:36.325
Pretty good. Pretty good.

00:03:36.325 --> 00:03:39.835
So I haven't matter which can accept a string, right?

00:03:39.835 --> 00:03:42.385
Let me run, this is running it.

00:03:42.385 --> 00:03:44.560
Now you can see hollowed-out word.

00:03:44.560 --> 00:03:47.785
But is it the same as that which cannot control you envision?

00:03:47.785 --> 00:03:49.760
Let's try that.

00:03:52.500 --> 00:03:56.230
I'm going to pass some different kind of data here,

00:03:56.230 --> 00:04:03.790
like 16 and 20.

00:04:03.790 --> 00:04:09.220
Now I'm going to run the same muttered. See what happened.

00:04:09.220 --> 00:04:10.645
This is the same method.

00:04:10.645 --> 00:04:11.950
I'm passing some time.

00:04:11.950 --> 00:04:16.175
I'm passing strings and the men passing integers sometime and passing different elements.

00:04:16.175 --> 00:04:17.495
But how it is working,

00:04:17.495 --> 00:04:19.550
because it was because of the genetics.

00:04:19.550 --> 00:04:24.605
The genetics here, I can specify any kind of data here.

00:04:24.605 --> 00:04:29.344
Okay? So this is a very simple example of genetics.

00:04:29.344 --> 00:04:32.630
That is, what do we discussed in the slides?

00:04:32.630 --> 00:04:36.410
So DNA will dive safety and the result of typecasting.

00:04:36.410 --> 00:04:39.275
So here doing every day safety, yeah, we did it.

00:04:39.275 --> 00:04:42.125
We are not providing any specific type of data.

00:04:42.125 --> 00:04:44.840
But if you're sending some data,

00:04:44.840 --> 00:04:47.750
it has to be anything.

00:04:47.750 --> 00:04:49.025
It can be anything, right?

00:04:49.025 --> 00:04:51.635
So let's see how the typecasting is work.

00:04:51.635 --> 00:04:52.580
We can do that.

00:04:52.580 --> 00:04:54.574
I haven't tried to typecasting.

00:04:54.574 --> 00:04:57.740
So what I'm doing here, so genetic example,

00:04:57.740 --> 00:05:01.490
it should list of delayed.

00:05:01.490 --> 00:05:07.805
So what I'm gonna do here with this,

00:05:07.805 --> 00:05:10.790
and then I'm going to create strength.

00:05:10.790 --> 00:05:17.675
X is equal to, sorry, I don't want this here.

00:05:17.675 --> 00:05:22.370
I'm going to call them at all. And so

00:05:22.370 --> 00:05:30.920
dynamic example, dot, dot.

00:05:30.920 --> 00:05:32.970
It does.

00:05:38.410 --> 00:05:46.355
Okay, that survey should see now,

00:05:46.355 --> 00:05:50.570
do we need to specify what kind of data type but dispute.

00:05:50.570 --> 00:05:51.830
Take look at the previous example.

00:05:51.830 --> 00:05:56.330
I had to provide it the string here, right?

00:05:56.330 --> 00:05:59.900
But here, we don't have to,

00:05:59.900 --> 00:06:04.685
because it can be anything because I'm passing string as the input.

00:06:04.685 --> 00:06:08.330
So this leads to obviously manipulate the string data.

00:06:08.330 --> 00:06:12.785
So I don't have to recreate them. Gasping.

00:06:12.785 --> 00:06:16.940
Okay, so let's try the same for the other material solids.

00:06:16.940 --> 00:06:20.550
Let me try to do something similar.

00:06:25.450 --> 00:06:28.920
It is going to be integer, right?

00:06:33.050 --> 00:06:36.229
So here I'm going to pass.

00:06:36.229 --> 00:06:40.910
Can see what happened here and here,

00:06:40.910 --> 00:06:44.180
there is no need for specify what kind of data you're going to be true.

00:06:44.180 --> 00:06:47.150
Because genetic is knows what kind of data you're

00:06:47.150 --> 00:06:51.215
passing and orders we did it and it will do that automatically.

00:06:51.215 --> 00:06:52.190
Right?

00:06:52.190 --> 00:06:54.215
So this is simple example for genetic.

00:06:54.215 --> 00:06:59.495
Next example, we actually want to see what piece of dynamite diamond operator.

00:06:59.495 --> 00:07:02.250
Let's see that in the next example.
