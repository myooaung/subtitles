WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.835
Hello everyone. Welcome back.

00:00:02.835 --> 00:00:04.380
So in this video,

00:00:04.380 --> 00:00:08.190
we're gonna talk about to create a simple modular project and we're going to

00:00:08.190 --> 00:00:13.110
run using the default JDK JRE.

00:00:13.110 --> 00:00:16.090
Okay, So let me create a module here.

00:00:17.930 --> 00:00:21.795
Module and model M is going to be demo module.

00:00:21.795 --> 00:00:23.775
I'm not going to require anything here.

00:00:23.775 --> 00:00:27.405
I just need I don't require anything.

00:00:27.405 --> 00:00:29.220
So it's going to be a simple model.

00:00:29.220 --> 00:00:32.820
So I'm going to store them in my C drive.

00:00:32.820 --> 00:00:35.949
I have a workspace.

00:00:35.960 --> 00:00:40.320
And there isn't Dealing project.

00:00:40.420 --> 00:00:44.990
Just create SRC folder here so we can keep track.

00:00:44.990 --> 00:00:51.780
So here, module info, Java.

00:00:52.300 --> 00:00:56.540
Okay, so now we have the modelling for today,

00:00:56.540 --> 00:00:57.860
Let's create a class.

00:00:57.860 --> 00:01:00.590
So I'm going to create inside a pack one.

00:01:00.590 --> 00:01:05.135
So darkish folder name is Pack 1.

00:01:05.135 --> 00:01:07.325
And now let's create a class,

00:01:07.325 --> 00:01:13.110
public class, and I want to call them as F-test.

00:01:14.590 --> 00:01:18.270
And just create a main method here.

00:01:19.890 --> 00:01:25.880
And I take it wide and main, provide string arcs.

00:01:31.770 --> 00:01:39.115
And let's kinda print simple assessment system dot out dot,

00:01:39.115 --> 00:01:43.100
print LN, and it's going to print.

00:01:46.380 --> 00:01:49.105
Okay, so let's save it.

00:01:49.105 --> 00:01:54.115
So we are going to say inside a folder, back one.

00:01:54.115 --> 00:01:59.120
Inside, we're gonna say them as test data.

00:02:00.270 --> 00:02:03.495
I can now open the command prompt.

00:02:03.495 --> 00:02:07.235
So we know the product is stored in our scene, right, right.

00:02:07.235 --> 00:02:10.595
So under the sera we have our workspace.

00:02:10.595 --> 00:02:14.270
Instead of Oxford's, they have Java material entirely how jailing project,

00:02:14.270 --> 00:02:16.850
and we're going to walk clear the screen.

00:02:16.850 --> 00:02:19.010
Let's look at a tree structure.

00:02:19.010 --> 00:02:22.070
So I have a source folder which contents model info,

00:02:22.070 --> 00:02:25.145
and I have a pack one which contains a test.js,

00:02:25.145 --> 00:02:27.050
right? Let's compile them.

00:02:27.050 --> 00:02:29.420
We know how to combat write Java C,

00:02:29.420 --> 00:02:34.445
IF AND, and which location I'm going to store the class fills out.

00:02:34.445 --> 00:02:37.280
And then I'm going to create a new folder out.

00:02:37.280 --> 00:02:39.530
And instead I will save all the class files.

00:02:39.530 --> 00:02:43.550
And then what are the file I'm trying to compile here?

00:02:43.550 --> 00:02:45.515
It's source model info.

00:02:45.515 --> 00:02:47.525
Okay, this is a modeling for compiled.

00:02:47.525 --> 00:02:49.310
Then we will try to do the same thing

00:02:49.310 --> 00:02:54.035
for another Java file channel that back one test dot Java.

00:02:54.035 --> 00:02:57.545
So now we have the module and the test has been compiled.

00:02:57.545 --> 00:03:02.285
And look at the tree again so we can see the structure.

00:03:02.285 --> 00:03:04.355
So we have a new folder credit out,

00:03:04.355 --> 00:03:07.400
and it has a modelling foo and it has a pipe one,

00:03:07.400 --> 00:03:09.410
which contents test that class.

00:03:09.410 --> 00:03:12.590
So now we know how to render modular program, right?

00:03:12.590 --> 00:03:15.320
The way is Q or Java, I'm sorry,

00:03:15.320 --> 00:03:18.680
I'm not using the external Lyman, the R1, Jerry,

00:03:18.680 --> 00:03:23.810
we are still using the JDK JRE only Java and iPhone,

00:03:23.810 --> 00:03:27.455
iPhone module, IF AND part.

00:03:27.455 --> 00:03:31.565
And which is you're looking for Out folder

00:03:31.565 --> 00:03:33.500
instead the Out folder I'm gonna looking for

00:03:33.500 --> 00:03:36.095
the model I'm indicating IF and m belongs to module.

00:03:36.095 --> 00:03:37.610
So which more than one I'm looking for,

00:03:37.610 --> 00:03:40.685
I'm looking for demo module.

00:03:40.685 --> 00:03:45.350
Inside the debug module I'm gonna look for back.

00:03:45.350 --> 00:03:52.820
Into the back on I have a method in the class can see welcome to J link, right?

00:03:52.820 --> 00:03:55.235
So we created a model program.

00:03:55.235 --> 00:03:57.395
I'm in Module Project, simple project.

00:03:57.395 --> 00:04:01.535
And we can let a simple model and we compiled and executed.

00:04:01.535 --> 00:04:06.080
Okay, so just for running this small kind of application,

00:04:06.080 --> 00:04:08.585
do we really need it to a 100 MPLS GRE?

00:04:08.585 --> 00:04:15.215
Just go to your installation directory where you can find the program files.

00:04:15.215 --> 00:04:17.195
And here we have a Java.

00:04:17.195 --> 00:04:21.920
Just take a look at the dairy size here is around 203 and B,

00:04:21.920 --> 00:04:24.275
we don't need 203 and B's, right?

00:04:24.275 --> 00:04:30.590
Because we are dealing with the class and the string class and system class.

00:04:30.590 --> 00:04:33.455
System class and string class only to class are available here.

00:04:33.455 --> 00:04:36.920
So we can simply just only one module because

00:04:36.920 --> 00:04:40.850
our default JDK JRE contains so many modules, right?

00:04:40.850 --> 00:04:44.090
This is the module which I'm talking about, integer decay.

00:04:44.090 --> 00:04:46.040
We have a lot of models.

00:04:46.040 --> 00:04:50.240
We are using all the modules just to execute a simple Hello World program.

00:04:50.240 --> 00:04:53.945
In the next video, we're going to create our custom JRE,

00:04:53.945 --> 00:04:57.060
and we'll run the same program against the customer.
