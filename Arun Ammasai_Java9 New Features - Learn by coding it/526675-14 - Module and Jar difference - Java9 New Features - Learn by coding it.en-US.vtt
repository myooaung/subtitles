WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.650 --> 00:00:03.060
Hello everyone, Welcome back.

00:00:03.060 --> 00:00:06.730
Let's talk about jar and the moral system.

00:00:07.010 --> 00:00:10.740
Let me show you a simple diagram to explain that.

00:00:10.740 --> 00:00:14.955
Again, just take a look at the particular example on this particular slide.

00:00:14.955 --> 00:00:18.375
The first one is non-modular,

00:00:18.375 --> 00:00:19.995
which is nothing but our normal jar.

00:00:19.995 --> 00:00:21.945
Because just take a look at it.

00:00:21.945 --> 00:00:25.335
We have a multiple JAR files in the class, but okay,

00:00:25.335 --> 00:00:29.355
we have the same number of job fails in the modular programming also.

00:00:29.355 --> 00:00:32.070
But that is a small difference here.

00:00:32.070 --> 00:00:36.450
In non-modular, we have all geographers plays in the class, but,

00:00:36.450 --> 00:00:39.060
and there is no way to

00:00:39.060 --> 00:00:42.920
identify that the particular first JAR file depends on the third velar,

00:00:42.920 --> 00:00:44.375
It does depend on the fourth value.

00:00:44.375 --> 00:00:45.575
There is no way to do that.

00:00:45.575 --> 00:00:46.985
And another important thing,

00:00:46.985 --> 00:00:48.605
they're all visible to each other.

00:00:48.605 --> 00:00:50.960
There is no security in place.

00:00:50.960 --> 00:00:51.500
Okay?

00:00:51.500 --> 00:00:54.440
Each and every jar file is visible to the other JAR files.

00:00:54.440 --> 00:00:56.930
But when it comes to the modular system,

00:00:56.930 --> 00:00:59.000
again, it is the same jar files,

00:00:59.000 --> 00:01:04.265
but JAR files wrapped with a module.

00:01:04.265 --> 00:01:07.190
For example, I have a module one and I have a module two.

00:01:07.190 --> 00:01:09.155
In module I have three JAR files.

00:01:09.155 --> 00:01:13.340
So these three JAR files communicate to each other,

00:01:13.340 --> 00:01:18.050
but they cannot communicate to the module 2 GR fails because they're different module.

00:01:18.050 --> 00:01:23.210
And in case if you want to access some of the module to jar file,

00:01:23.210 --> 00:01:27.275
so you need to specify in your motif in inner configuration file.

00:01:27.275 --> 00:01:34.400
So this is my jar file and I want to access one of the JAR file from the Module 2. Right?

00:01:34.400 --> 00:01:39.395
So those configuration will be available in a separate file.

00:01:39.395 --> 00:01:41.105
So we'll talk about it,

00:01:41.105 --> 00:01:44.610
the file, the file name also. Okay.

00:01:46.600 --> 00:01:51.470
So here is a simple different difference actually.

00:01:51.470 --> 00:01:55.190
So this is the structure looks like without module.

00:01:55.190 --> 00:01:57.485
I mean, our traditional way of programming.

00:01:57.485 --> 00:02:00.080
I have a source package and other source package.

00:02:00.080 --> 00:02:02.060
I have a calm dot-dot-dot model.

00:02:02.060 --> 00:02:04.965
Under the model I have a class one, class two clustering.

00:02:04.965 --> 00:02:07.450
And I have another package called Service,

00:02:07.450 --> 00:02:09.955
which has a class four and class file.

00:02:09.955 --> 00:02:12.865
This is a traditional way of coding.

00:02:12.865 --> 00:02:16.960
And I have the same kind of coding,

00:02:16.960 --> 00:02:19.840
but with the model programming.

00:02:19.840 --> 00:02:21.190
Here is a difference.

00:02:21.190 --> 00:02:22.675
I have a source file,

00:02:22.675 --> 00:02:26.155
and as a source file I have a module iPhone info dot Java file.

00:02:26.155 --> 00:02:31.450
This is the configuration file which we talked about in the last two videos, right?

00:02:31.450 --> 00:02:33.475
So this module info dot Java,

00:02:33.475 --> 00:02:36.370
which contains what are the models available in

00:02:36.370 --> 00:02:41.725
the particular project or what are the required required modules?

00:02:41.725 --> 00:02:45.189
And what are the models I can expose to the other services.

00:02:45.189 --> 00:02:51.800
So all those information available in Module info dot Java.

00:02:53.940 --> 00:03:01.630
And then so what the things are available in module info, Java, right?

00:03:01.630 --> 00:03:03.325
So basically as I mentioned,

00:03:03.325 --> 00:03:08.110
it is contains the configuration details.

00:03:08.110 --> 00:03:11.785
So obviously the first thing is the calm that Zhao and I ended model.

00:03:11.785 --> 00:03:14.440
This is a sample package which I showed in the previous slide.

00:03:14.440 --> 00:03:18.670
But many things, what is the required modules?

00:03:18.670 --> 00:03:22.495
I'm running a project and I have two modules and tell them more defined.

00:03:22.495 --> 00:03:26.395
So what are the models I need to be included in this module.

00:03:26.395 --> 00:03:28.960
So required.

00:03:28.960 --> 00:03:35.495
And what are the packages are models I need to export.

00:03:35.495 --> 00:03:37.145
So when you export it,

00:03:37.145 --> 00:03:42.095
either modules can read your module.

00:03:42.095 --> 00:03:48.980
And then packages needs to import the module exactly.

00:03:48.980 --> 00:03:56.615
Because mod wheel is collection of packages like JAR file.

00:03:56.615 --> 00:03:59.915
And what are the service we need to expose?

00:03:59.915 --> 00:04:03.935
And the similar way, what are the service V required from other modules?

00:04:03.935 --> 00:04:06.410
And what is a reflection impact us?

00:04:06.410 --> 00:04:07.835
In our packet header function.

00:04:07.835 --> 00:04:11.280
It says that a separate concept that we'll talk about it.

00:04:13.000 --> 00:04:17.720
Okay, so before we are jumping into requires and export,

00:04:17.720 --> 00:04:20.300
Let's have a simple example

00:04:20.300 --> 00:04:22.370
would be for that little it's finished the equator and export.

00:04:22.370 --> 00:04:24.545
Okay, so here's a simple example.

00:04:24.545 --> 00:04:26.000
So I have a module,

00:04:26.000 --> 00:04:30.065
model 1 and I have another model called model to, right?

00:04:30.065 --> 00:04:36.000
So model two is requiring model1 to run.

00:04:36.280 --> 00:04:37.760
Right?

00:04:37.760 --> 00:04:40.745
So what I'm doing in the first piece of code,

00:04:40.745 --> 00:04:43.325
I'm exploiting com dot Java and end at model1.

00:04:43.325 --> 00:04:46.490
I'm exploiting com dot Java nine dot model on.

00:04:46.490 --> 00:04:49.460
So if anyone required that particular model,

00:04:49.460 --> 00:04:51.600
they can use it.

00:04:51.820 --> 00:04:56.480
And the second one, module.com dot hg19 dot model to this is a model

00:04:56.480 --> 00:05:01.220
to the model 2 which will require model one to proceed forward.

00:05:01.220 --> 00:05:09.065
So what I'm doing here, I provide requires com dot java dot, dot model, right?

00:05:09.065 --> 00:05:11.315
And that is the right way to do ETL.

00:05:11.315 --> 00:05:16.340
And here we have the previously,

00:05:16.340 --> 00:05:17.750
I mean the previous code model.

00:05:17.750 --> 00:05:22.730
Okay, So how the folder structure looks like we are going to write an example for that.

00:05:22.730 --> 00:05:27.110
So but if you see the diagram,

00:05:27.110 --> 00:05:32.525
I mentioned services, which was not mentioned in any of the diagram here.

00:05:32.525 --> 00:05:35.525
The reason is inside of the model one,

00:05:35.525 --> 00:05:41.255
I have two things on thing is model and technology service,

00:05:41.255 --> 00:05:42.770
but I'm only exploiting the model.

00:05:42.770 --> 00:05:45.500
Service is internal to my module,

00:05:45.500 --> 00:05:48.290
so it's my own dish and whether I need to

00:05:48.290 --> 00:05:51.620
expose my services to the others, the other module,

00:05:51.620 --> 00:05:55.880
or I can keep it to interrupt myself in case if you want to export

00:05:55.880 --> 00:06:01.760
your service also you need to use export.com dot Java nine dot model 1 dot salaries.

00:06:01.760 --> 00:06:04.220
Okay, the next exit in the next video,

00:06:04.220 --> 00:06:09.050
we'll create a simple example and then we'll see how the module and Jar,

00:06:09.050 --> 00:06:11.640
Jar model is different.
