WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:07.290
So we discuss about why we need a variable arguments, right?

00:00:07.290 --> 00:00:13.035
And in 1.7, sales variable argument has been introduced.

00:00:13.035 --> 00:00:15.855
But lighting safe arguments.

00:00:15.855 --> 00:00:20.310
So what is the issue? Right?

00:00:20.310 --> 00:00:24.240
So we need to know why it has been introduced.

00:00:24.240 --> 00:00:27.690
The first reason is the near using a CSR humans,

00:00:27.690 --> 00:00:31.635
there is a possibility you will get heat pollution.

00:00:31.635 --> 00:00:35.650
So first thing, so what is heat pollution?

00:00:36.440 --> 00:00:43.130
So the first thing, he, pollution.

00:00:43.130 --> 00:00:45.880
So what are the pollution?

00:00:45.880 --> 00:00:50.320
So he piece for hypnosis plays their object will be

00:00:50.320 --> 00:00:59.230
stored in the memory area.

00:00:59.230 --> 00:01:05.155
Okay, So when the pollution will rise scenarios.

00:01:05.155 --> 00:01:11.050
So you're trying to retrieve string of a and you're calling him at that,

00:01:11.050 --> 00:01:17.780
for example, some third 1, third 1.

00:01:18.420 --> 00:01:22.240
And this meant that when you're done and you

00:01:22.240 --> 00:01:25.755
need to convert this data into a string anyway.

00:01:25.755 --> 00:01:30.485
Okay? It's a string, string here.

00:01:30.485 --> 00:01:32.900
So what did it but I will end. It looks good.

00:01:32.900 --> 00:01:36.830
But what will happen if the mattered one?

00:01:36.830 --> 00:01:39.650
It is going to get an exemption on,

00:01:39.650 --> 00:01:41.630
sorry not doing next up to integer.

00:01:41.630 --> 00:01:43.550
Some casting into an a and bigger,

00:01:43.550 --> 00:01:46.445
but the methods are doing as an integer, right?

00:01:46.445 --> 00:01:50.585
I mean, I'm, I'm trying to cast into a string by the mentality that means India.

00:01:50.585 --> 00:01:57.890
So that time it will rise class cast exception. So they're compatible.

00:01:57.890 --> 00:02:02.695
And at runtime saying like it as a class cast exception because you are trying to

00:02:02.695 --> 00:02:08.405
casting be a number into a string. Fluid user.

00:02:08.405 --> 00:02:10.680
Not a valid scenario.

00:02:11.380 --> 00:02:14.450
To overcome in this scenario,

00:02:14.450 --> 00:02:18.240
the saved variable on humans matter comes into being.

00:02:18.370 --> 00:02:21.500
So if you're writing a one-meter,

00:02:21.500 --> 00:02:28.280
if you known that this method is not going to be written, a heap issues,

00:02:28.280 --> 00:02:38.000
you can suppress the warning with the help of safe that I'm using this notation,

00:02:38.000 --> 00:02:43.490
you can suppress it in Java 1.7 and it is applicable

00:02:43.490 --> 00:02:51.125
for constructor and static methods.

00:02:51.125 --> 00:02:55.980
Also medulla applicable for final methods.

00:02:56.620 --> 00:03:01.170
So the one last announcement I just came in Java name.

00:03:01.570 --> 00:03:11.940
Is it an answerable to allow private methods?

00:03:15.280 --> 00:03:17.975
So what we're gonna do right now,

00:03:17.975 --> 00:03:27.635
Let's create another example which will tell you how to use this safe that article parts.

00:03:27.635 --> 00:03:31.280
So let me go back to my glyphs.

00:03:31.280 --> 00:03:34.385
And at another example here,

00:03:34.385 --> 00:03:38.390
I'm going to call them as safe.

00:03:38.390 --> 00:03:41.765
Our example.

00:03:41.765 --> 00:03:43.865
Let's have a main matter.

00:03:43.865 --> 00:03:50.225
So let's try in Java 7 first started out how it was done in Java 7,

00:03:50.225 --> 00:03:51.635
as I mentioned earlier,

00:03:51.635 --> 00:03:55.270
heterodox up, Let's say

00:03:55.270 --> 00:04:01.675
fat annotation in constructor and it to attribute any static methods.

00:04:01.675 --> 00:04:03.400
And also in final matters,

00:04:03.400 --> 00:04:07.070
let me create a simple constructor here to check

00:04:08.160 --> 00:04:12.010
how our contractors and

00:04:12.010 --> 00:04:19.945
the ritual list of string.

00:04:19.945 --> 00:04:28.070
And so you need to input a list here.

00:04:30.150 --> 00:04:31.690
Okay?

00:04:31.690 --> 00:04:36.900
So let's say if the concept we created.

00:04:36.900 --> 00:04:39.125
So I know that this method,

00:04:39.125 --> 00:04:41.240
this particular contract like this,

00:04:41.240 --> 00:04:43.580
now I'm going to raise any glass gastric suctioning or

00:04:43.580 --> 00:04:48.695
any other hippy shoe or any other exception are very well known scenarios.

00:04:48.695 --> 00:04:53.585
So you can use safe sanitation.

00:04:53.585 --> 00:04:57.050
That means you're suppressing the exception here.

00:04:57.050 --> 00:05:00.260
I mean, not deg sublinear surplus in the warming.

00:05:00.260 --> 00:05:05.150
Right? Okay, so we know that it can be used in contract.

00:05:05.150 --> 00:05:11.614
Alex try to create a static method, public static.

00:05:11.614 --> 00:05:19.710
And it's our argument that of Lord Guan.

00:05:27.420 --> 00:05:29.485
X.

00:05:29.485 --> 00:05:34.430
So here let's try to add the Save.

00:05:35.340 --> 00:05:41.155
So now let us begin the ACF arguments to support as a warning

00:05:41.155 --> 00:05:46.510
and starting my density can use it and another method is fine.

00:05:46.510 --> 00:05:47.770
All right, let's try that.

00:05:47.770 --> 00:05:52.070
Don't matter here.

00:05:52.080 --> 00:05:57.110
So I'm going to call this method two.

00:06:03.190 --> 00:06:09.065
So let me try to say if variable here,

00:06:09.065 --> 00:06:12.109
which will accept that is malicious.

00:06:12.109 --> 00:06:15.200
So this is what happened in Java 7.

00:06:15.200 --> 00:06:18.050
So in Java 7,

00:06:18.050 --> 00:06:20.750
so you can separate us, know our name.

00:06:20.750 --> 00:06:30.950
And here you can do in Java and Java 7.

00:06:30.950 --> 00:06:35.180
So what did the one announcement I just done in Java name?

00:06:35.180 --> 00:06:43.020
So sulfite, it was knapsack order n flips create a private method here,

00:06:45.280 --> 00:06:55.445
static, string

00:06:55.445 --> 00:07:02.070
and the red arcs S.

00:07:03.100 --> 00:07:06.260
I guess so now I have a private mydata.

00:07:06.260 --> 00:07:09.709
It we tried to add C5.

00:07:09.709 --> 00:07:16.740
We are going to see any errors here because we are using the Java main lotion.

00:07:17.170 --> 00:07:21.680
So it is introduced in Java.

00:07:21.680 --> 00:07:28.020
Name invalid.

00:07:30.820 --> 00:07:35.510
Basically what I'm trying to say here is in Java 7 that says

00:07:35.510 --> 00:07:39.485
variable arguments has been introduced or added against suppress the warning.

00:07:39.485 --> 00:07:43.865
It can be used in constructor stamping method and the final method.

00:07:43.865 --> 00:07:47.015
And that is no change in Java 8,

00:07:47.015 --> 00:07:49.190
but that is a announcement in Java.

00:07:49.190 --> 00:07:57.905
You can use this if that arguments to suppress the warning for private methods also.

00:07:57.905 --> 00:08:01.820
So most of the people who might not know who usually

00:08:01.820 --> 00:08:05.420
enable arguments if you're not out of the safe variable argument?

00:08:05.420 --> 00:08:09.500
Start from what is a variable arguments and why do we need them?

00:08:09.500 --> 00:08:13.550
Okay, and what is a, what we can say?

00:08:13.550 --> 00:08:20.630
Like he pollution, just tried to search and learnable heat pollution because

00:08:20.630 --> 00:08:29.225
normally we have a fire different kind different kind of memory is heap memory,

00:08:29.225 --> 00:08:32.630
stack and metal arcs and B-cells.

00:08:32.630 --> 00:08:35.060
And there are different kinds of things,

00:08:35.060 --> 00:08:37.595
okay, that one of the major important thing is he.

00:08:37.595 --> 00:08:44.300
So whenever some issues raised in the heap memory area where we are handling the object,

00:08:44.300 --> 00:08:47.015
that is where we end up with them.

00:08:47.015 --> 00:08:48.365
He pollution.

00:08:48.365 --> 00:08:50.705
So you're trying to convert something,

00:08:50.705 --> 00:08:54.980
we are trying to make something and it exploiting something is happening, something.

00:08:54.980 --> 00:08:58.325
So obviously the editor will accept editable race, right?

00:08:58.325 --> 00:09:04.580
Dose and obviously the pollution or it happened that is called heat pollution.

00:09:04.580 --> 00:09:06.725
Just good on some examples.

00:09:06.725 --> 00:09:08.510
And try one or two example.

00:09:08.510 --> 00:09:10.700
So get familiar with the variable arguments.

00:09:10.700 --> 00:09:14.090
Make sure this is not the costliest change

00:09:14.090 --> 00:09:18.110
because it really impacted performance if you are using it in a wrong way.

00:09:18.110 --> 00:09:22.910
So before you use them or don't analyze your requirement and

00:09:22.910 --> 00:09:29.390
then using the variable argument or arguments based on human need.

00:09:29.390 --> 00:09:30.960
Thank you.
