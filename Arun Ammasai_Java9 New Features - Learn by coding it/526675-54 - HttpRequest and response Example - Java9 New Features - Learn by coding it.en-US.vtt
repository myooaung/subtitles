WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.235
Hello everyone, Welcome back.

00:00:02.235 --> 00:00:05.685
So now let's jump into the actual program.

00:00:05.685 --> 00:00:10.290
So I have a class called heights to deploy an example.

00:00:10.290 --> 00:00:14.345
So we are going to create a client and the request,

00:00:14.345 --> 00:00:18.330
and we're going to get the response and we'll explore that.

00:00:20.170 --> 00:00:25.475
And before that, you need to make sure your model info added with

00:00:25.475 --> 00:00:28.190
this information in case there are sometimes you

00:00:28.190 --> 00:00:31.175
don't know the modeling phase not available in your project.

00:00:31.175 --> 00:00:32.810
It is not a very big thing for now,

00:00:32.810 --> 00:00:34.670
what I'm gonna do is I'm going to delete

00:00:34.670 --> 00:00:37.235
the model info and I'm going to create it for you.

00:00:37.235 --> 00:00:39.350
So how we can create, just

00:00:39.350 --> 00:00:43.205
right-click it because they were ID itself, it's going to support.

00:00:43.205 --> 00:00:44.690
So go to Configure,

00:00:44.690 --> 00:00:50.555
under Configure you how to create moral infinite info file.

00:00:50.555 --> 00:00:53.670
So you can provide a name like test module.

00:00:54.190 --> 00:00:57.560
When you're creating, when the file that are a lot of

00:00:57.560 --> 00:00:59.930
Java FX is existing in main project when you're

00:00:59.930 --> 00:01:06.470
creating your test model automatically create requires acquiring modals and the packages.

00:01:06.470 --> 00:01:09.950
Okay, so my modelling for has been created.

00:01:09.950 --> 00:01:12.185
Starting material, safety data,

00:01:12.185 --> 00:01:14.090
variable arguments, everything has been created.

00:01:14.090 --> 00:01:18.935
But the one thing which we required because we are going to use the incubator, right?

00:01:18.935 --> 00:01:23.405
So incubator, which is not going to be available by default,

00:01:23.405 --> 00:01:28.490
we have to explicitly provided in the module that Java,

00:01:28.490 --> 00:01:32.660
I mean more life and n for j k dot incubator and hashed, it declined.

00:01:32.660 --> 00:01:34.340
So now we're good to go.

00:01:34.340 --> 00:01:37.260
Now go to http, an example.

00:01:37.980 --> 00:01:43.285
So let me create a, the first step that let's go back to document.

00:01:43.285 --> 00:01:48.325
The first step, create a client and then create a request.

00:01:48.325 --> 00:01:49.765
And we need to have a URL.

00:01:49.765 --> 00:01:55.240
And then we need to call them.

00:01:55.240 --> 00:01:58.075
I'm going to call the API and we'll get the response back.

00:01:58.075 --> 00:01:58.960
Cool.

00:01:58.960 --> 00:02:04.795
Okay, the first thing, step 1, HTTP client.

00:02:04.795 --> 00:02:10.915
So just make sure you're using the high strategic line under JDK dot incubator.

00:02:10.915 --> 00:02:17.780
So client is actually declined.

00:02:18.940 --> 00:02:21.810
How should we pick line?

00:02:22.540 --> 00:02:23.750
Okay.

00:02:23.750 --> 00:02:25.340
It's not, right.

00:02:25.340 --> 00:02:28.400
No, we need to have a faculty matter.

00:02:28.400 --> 00:02:30.980
Right. So you induce actually the client and that estimate that called

00:02:30.980 --> 00:02:37.165
new eyes to typic lime.

00:02:37.165 --> 00:02:38.780
So this is how we integrate the client.

00:02:38.780 --> 00:02:40.475
So the client has been created.

00:02:40.475 --> 00:02:42.590
So now we need to provide the request.

00:02:42.590 --> 00:02:44.165
We need to create a request.

00:02:44.165 --> 00:02:46.295
So how we're going to create a request?

00:02:46.295 --> 00:02:49.055
When we creating a requisite, we need a URI.

00:02:49.055 --> 00:02:51.110
So which service I'm going to call.

00:02:51.110 --> 00:02:57.725
So we need to have some proper URL or web services to verify that.

00:02:57.725 --> 00:03:00.740
So what I'm gonna do is I'm going to use

00:03:00.740 --> 00:03:05.465
the Postman echo service in Postman ACO be how service called this?

00:03:05.465 --> 00:03:06.770
A Saturday. I'm going to use hits it.

00:03:06.770 --> 00:03:11.060
It's the case that we can tell, see and hear.

00:03:11.060 --> 00:03:13.865
Just paste it and run it now.

00:03:13.865 --> 00:03:17.660
So you should be able to see the response from the postman ICO.

00:03:17.660 --> 00:03:21.095
So we're trying to achieve the same thing in our Java code.

00:03:21.095 --> 00:03:23.495
Go back to Eclipse.

00:03:23.495 --> 00:03:24.725
Now.

00:03:24.725 --> 00:03:32.360
Next thing, string, so that you are going to be this one.

00:03:32.360 --> 00:03:39.980
And now we can create a request because we have a URL in place, HTTP request.

00:03:39.980 --> 00:03:42.860
And it is going to be request is equal to.

00:03:42.860 --> 00:03:50.465
So the way we are going to create the HTTP request, the request dot.

00:03:50.465 --> 00:03:52.790
And we're going to use the new builder here,

00:03:52.790 --> 00:03:57.060
numerator, which you will accept that your emitter here.

00:04:06.640 --> 00:04:10.250
There is a problem. See, when I'm creating history requisite

00:04:10.250 --> 00:04:13.940
automatically created in some different packages which is an issue.

00:04:13.940 --> 00:04:19.040
So remove that and then make sure you're importing the data from the incubator.

00:04:19.040 --> 00:04:24.590
So now we're going to provide this new builder and which will

00:04:24.590 --> 00:04:30.440
accept a new, sorry, new URI.

00:04:30.440 --> 00:04:34.250
So new URI, we need to get the string parameter,

00:04:34.250 --> 00:04:36.080
which is nothing but the URL.

00:04:36.080 --> 00:04:41.840
And then what kind of recourse I'm going to pass whether it is going to be a good trick.

00:04:41.840 --> 00:04:43.325
I mean, get metropolis matter,

00:04:43.325 --> 00:04:44.750
it is going to be just retrieval, right?

00:04:44.750 --> 00:04:47.850
So I'm going to use the get method

00:04:49.600 --> 00:04:55.520
under the set dot get method,

00:04:55.520 --> 00:04:58.130
and then I'm willing the request.

00:04:58.130 --> 00:05:03.545
So now we have the request in place.

00:05:03.545 --> 00:05:04.790
Now we can.

00:05:04.790 --> 00:05:07.940
Use the request to call the API.

00:05:07.940 --> 00:05:09.680
So now we need to do that as funds back,

00:05:09.680 --> 00:05:14.220
right? So UDP response.

00:05:14.740 --> 00:05:19.110
So it is going to be response here.

00:05:20.860 --> 00:05:23.120
So how we are going to call it,

00:05:23.120 --> 00:05:24.560
It's going to be a synchronous matter, right?

00:05:24.560 --> 00:05:31.249
So I'm going to use Client dot sent matter and minor deposit request.

00:05:31.249 --> 00:05:33.830
So what kind of response I'm going to handle?

00:05:33.830 --> 00:05:37.070
So I'm going to handle as a string as of now.

00:05:37.070 --> 00:05:41.735
So I'm going to use a body handler, 40 handler.

00:05:41.735 --> 00:05:44.450
And so what kind of type?

00:05:44.450 --> 00:05:47.520
So as I mentioned as a string now,

00:05:47.740 --> 00:05:50.990
so now we've got response in place.

00:05:50.990 --> 00:05:53.270
So we got a response back.

00:05:53.270 --> 00:06:00.020
Let's print out here like API response.

00:06:00.020 --> 00:06:03.785
Okay, as I mentioned in the response contains three different parts.

00:06:03.785 --> 00:06:06.230
The first one is header and second one is the body,

00:06:06.230 --> 00:06:10.160
and the third one the status.

00:06:10.160 --> 00:06:11.780
So let me print the status,

00:06:11.780 --> 00:06:17.825
this list subsystem that so what is the state of the vehicle?

00:06:17.825 --> 00:06:23.580
So I have the response right under the response status code.

00:06:23.950 --> 00:06:26.060
Run it now.

00:06:26.060 --> 00:06:32.630
Just run it. It's gonna be a warning that there isn't really showing you a warning.

00:06:32.630 --> 00:06:35.090
The incubator model is not fully developed.

00:06:35.090 --> 00:06:40.295
So you're manually provider in model a fun info,

00:06:40.295 --> 00:06:42.020
so it's subordinate, it's okay, not a problem,

00:06:42.020 --> 00:06:43.535
but once it has been fully developed,

00:06:43.535 --> 00:06:47.000
the warning will be remote from here.

00:06:47.000 --> 00:06:48.920
So now the biggest ones,

00:06:48.920 --> 00:06:51.140
two hundred and two hundred means what is that?

00:06:51.140 --> 00:06:52.535
We discuss here, right?

00:06:52.535 --> 00:06:54.844
To a 100 minutes. It's a success.

00:06:54.844 --> 00:06:57.320
Okay, So now we've got a success response.

00:06:57.320 --> 00:07:03.080
So next thing I want to know what the embodiment body contains.

00:07:03.080 --> 00:07:08.960
We know that this is the response from this same data. It has to be done.

00:07:08.960 --> 00:07:17.390
So what I'm gonna do is I'm going to print the body, body or content.

00:07:17.390 --> 00:07:20.210
So use the state, I mean, sorry,

00:07:20.210 --> 00:07:26.220
response to the body.

00:07:27.070 --> 00:07:35.450
And again, maximize it to see clearly.

00:07:35.450 --> 00:07:42.650
See, we got the response back one year for this.

00:07:42.650 --> 00:07:45.770
End. Some other information.

00:07:45.770 --> 00:07:50.090
We don't have to worry about what kind of information are lost them.

00:07:50.090 --> 00:07:55.145
So we know the mores looks like and we know how the shape is, what is coming.

00:07:55.145 --> 00:07:57.875
So let's try to do something else.

00:07:57.875 --> 00:08:03.095
So I want to create a map which combines my string and value,

00:08:03.095 --> 00:08:06.710
which means my responses,

00:08:06.710 --> 00:08:09.920
my status is and my body content.

00:08:09.920 --> 00:08:11.840
So how we are going to create that?

00:08:11.840 --> 00:08:15.200
So we have a default method in the headers.

00:08:15.200 --> 00:08:17.345
It will convert the data into a map.

00:08:17.345 --> 00:08:19.055
So let's try to do that.

00:08:19.055 --> 00:08:24.870
So what I'm gonna do, I'm going to use map of string is going to be a key.

00:08:25.090 --> 00:08:29.555
The valley is going to be list of string.

00:08:29.555 --> 00:08:32.735
And now math is it called?

00:08:32.735 --> 00:08:37.130
So I'm going to create the header from the headline

00:08:37.130 --> 00:08:41.660
you to use the map MATLAB so we know how to get the mapper. I'm in the header right?

00:08:41.660 --> 00:08:45.650
From the response header.

00:08:45.650 --> 00:08:48.720
Inside the header we have a method called map,

00:08:49.000 --> 00:08:54.350
which will automatically convert the data into a specific diaper,

00:08:54.350 --> 00:08:56.585
just nothing but a key value pair.

00:08:56.585 --> 00:09:01.910
The key is going to be a status code and the value is going to be my body.

00:09:01.910 --> 00:09:07.100
So I'm going to print the data now to see what the map contains.

00:09:07.100 --> 00:09:15.710
So, so I'm going to use a lambda expression here.

00:09:15.710 --> 00:09:23.330
So the information is going to be key value and I'm going to print them.

00:09:23.330 --> 00:09:30.030
So, so and the value.

00:09:33.280 --> 00:09:36.650
So key and the value.

00:09:36.650 --> 00:09:41.310
Okay, So let me maximize sales and gain.

00:09:41.860 --> 00:09:44.225
So the warning message,

00:09:44.225 --> 00:09:46.970
and then we've got the response and we've got the status.

00:09:46.970 --> 00:09:50.765
Whereas the 200 and this may body are a content.

00:09:50.765 --> 00:09:54.830
And it contains arcs and that is fun. Stay there.

00:09:54.830 --> 00:09:59.405
And here this is the header information.

00:09:59.405 --> 00:10:01.070
See the content type,

00:10:01.070 --> 00:10:04.070
the content length that David has been created,

00:10:04.070 --> 00:10:07.775
and some other information, the encoding information.

00:10:07.775 --> 00:10:12.665
So all of this information has been mapped into a HashMap.

00:10:12.665 --> 00:10:13.595
Okay?

00:10:13.595 --> 00:10:17.820
So what the string is contains here, Let's comeback.

00:10:20.620 --> 00:10:22.295
Okay?

00:10:22.295 --> 00:10:25.715
So they had their combined lot of information, right?

00:10:25.715 --> 00:10:29.345
So the content lent is a key and do 47 is a value.

00:10:29.345 --> 00:10:31.970
Okay, So I, that gives a response might is not.

00:10:31.970 --> 00:10:37.220
So the header information has been splitter into key and the value is going

00:10:37.220 --> 00:10:39.470
to be the content and content type and data

00:10:39.470 --> 00:10:42.455
indeed flag and set cookie and some other operations.

00:10:42.455 --> 00:10:45.305
And valleys going to be the length of the content and

00:10:45.305 --> 00:10:49.415
that type of a content and which David has been created, something like that.

00:10:49.415 --> 00:10:52.490
So now we tried everything.

00:10:52.490 --> 00:10:54.605
Okay, so now I know how to do that.

00:10:54.605 --> 00:10:58.250
But that is a scenario I don't want to handle as a string.

00:10:58.250 --> 00:11:03.545
As I mentioned, I DO file and I want to write my response into a file.

00:11:03.545 --> 00:11:05.975
So how we are going to do that?

00:11:05.975 --> 00:11:12.065
So let me just come on this one and copy that same thing here.

00:11:12.065 --> 00:11:14.990
And instead of as string,

00:11:14.990 --> 00:11:17.855
we're going to use them has file.

00:11:17.855 --> 00:11:21.425
So whenever using files introduce paths dot,

00:11:21.425 --> 00:11:25.190
get and get metro jack septa,

00:11:25.190 --> 00:11:27.560
if I limb, if the file is existing,

00:11:27.560 --> 00:11:30.410
it will write in the file or else it will create a file and it'll

00:11:30.410 --> 00:11:34.410
write in the same directory, sample.txt, TMR.

00:11:35.230 --> 00:11:38.225
So nothing else needs to be changed.

00:11:38.225 --> 00:11:39.860
Everything remains the same.

00:11:39.860 --> 00:11:43.850
So what I'm gonna do is just clear the console.

00:11:43.850 --> 00:11:46.130
Just take I don't have any files here.

00:11:46.130 --> 00:11:50.420
Let me refresh the project once I don't have any files called sample.txt html.

00:11:50.420 --> 00:11:56.150
So we'll, we'll see the same structure after random file,

00:11:56.150 --> 00:11:59.375
just right-click and then as Java application.

00:11:59.375 --> 00:12:02.690
So we've got a warning status quo.

00:12:02.690 --> 00:12:06.200
We should be getting the status code and the content and the headers.

00:12:06.200 --> 00:12:07.220
Cool, right?

00:12:07.220 --> 00:12:09.920
So we've got the data back, but the same time they'll file

00:12:09.920 --> 00:12:12.890
could have been created here, but there is no file.

00:12:12.890 --> 00:12:15.350
The thing is we need to refresh the project once now you

00:12:15.350 --> 00:12:18.410
can see the sample that HTML here.

00:12:18.410 --> 00:12:20.540
Sorry, the sample that HTML,

00:12:20.540 --> 00:12:23.390
which contains the response,

00:12:23.390 --> 00:12:25.295
I mean to say that body.

00:12:25.295 --> 00:12:28.925
So there is then I save it as HTML so we can

00:12:28.925 --> 00:12:32.360
open in a browser and we can see how it does.

00:12:32.360 --> 00:12:33.930
It looks like.

00:12:35.530 --> 00:12:38.795
Okay, see, this is how it is looked like.

00:12:38.795 --> 00:12:41.420
If you bro grocery subordination and formatted,

00:12:41.420 --> 00:12:43.265
it will be showing a clear format.

00:12:43.265 --> 00:12:47.810
And 10, let me verify the same in Firefox browser.

00:12:47.810 --> 00:12:49.580
Because the JSON format,

00:12:49.580 --> 00:12:54.600
it'll show us a key and a parent and child well is something like that.

00:12:56.410 --> 00:13:02.480
So Firefox has been opened between opener here.

00:13:02.480 --> 00:13:06.680
Okay, pretty much printing the same thing or what we can do.

00:13:06.680 --> 00:13:09.305
Use this copy the response.

00:13:09.305 --> 00:13:14.370
And we can use some online online.

00:13:15.520 --> 00:13:18.020
Json.

00:13:18.020 --> 00:13:19.625
For my dark.

00:13:19.625 --> 00:13:23.220
We can use that just to see how the data looks like.

00:13:25.030 --> 00:13:27.905
Just based your content here.

00:13:27.905 --> 00:13:32.120
And plus C Now we have the four metadata.

00:13:32.120 --> 00:13:35.195
So F0, F1, F2,

00:13:35.195 --> 00:13:36.875
and some header information.

00:13:36.875 --> 00:13:39.050
And you're, I mean,

00:13:39.050 --> 00:13:42.230
this is the respond to just be retrieved from the postman echo.

00:13:42.230 --> 00:13:47.615
So this is how we need to make use of the HTTP client.

00:13:47.615 --> 00:13:49.550
So for going forward,

00:13:49.550 --> 00:13:54.500
if you want to call it a homage to depict line.rstrip.

00:13:54.500 --> 00:13:58.535
Yes, I don't know how to depends on any Apache clients are any Google API client.

00:13:58.535 --> 00:14:01.640
We can use our Java one plant,

00:14:01.640 --> 00:14:03.875
which is nothing but our high strategic lines.

00:14:03.875 --> 00:14:07.250
Just give it a try and let me know if you guys have any clarification.

00:14:07.250 --> 00:14:08.820
Thank you.
