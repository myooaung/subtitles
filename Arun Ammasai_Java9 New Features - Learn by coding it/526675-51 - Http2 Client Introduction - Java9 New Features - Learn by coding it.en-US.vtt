WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:03.225
Hello everyone, welcome back.

00:00:03.225 --> 00:00:06.000
That is another huge enhancement.

00:00:06.000 --> 00:00:11.985
And Zhao and n, which is nothing but blind.

00:00:11.985 --> 00:00:14.115
So we all know that what it has to,

00:00:14.115 --> 00:00:20.580
to p2 sending a request or it is receiving a response from another server.

00:00:20.580 --> 00:00:23.295
Okay, so what is the change in happen?

00:00:23.295 --> 00:00:25.335
Chow on and before that,

00:00:25.335 --> 00:00:28.590
we just tried to understand what is

00:00:28.590 --> 00:00:35.360
exactly a high suitable request and response and why do we need them? Right.

00:00:35.360 --> 00:00:40.115
Let me take a simple heads up and then we'll move on to the real core.

00:00:40.115 --> 00:00:42.530
Okay, just take an example, this slide.

00:00:42.530 --> 00:00:46.610
Okay, so I have three website like G-mail and conflict,

00:00:46.610 --> 00:00:47.930
cotton, goal or gum.

00:00:47.930 --> 00:00:51.079
And all of them are HTTP request.

00:00:51.079 --> 00:00:55.700
And h and every domain can make APA calls.

00:00:55.700 --> 00:01:00.365
For example, if you're trying to click inbox from your Gmail account,

00:01:00.365 --> 00:01:05.870
it is making a call to a slip server and it will turn back the data.

00:01:05.870 --> 00:01:09.020
A similar way if you're trying to pull it to something in Flipkart,

00:01:09.020 --> 00:01:10.985
if you're clicking a particular product,

00:01:10.985 --> 00:01:15.860
a tool create, web service call.

00:01:15.860 --> 00:01:18.710
Agree that we initiate a high HTTP requests and

00:01:18.710 --> 00:01:20.960
it will send to a particular server and it will

00:01:20.960 --> 00:01:26.840
fetch the data and it shouldn't backs ask them how HTTP response.

00:01:26.840 --> 00:01:30.500
And then, so basically in our scenario,

00:01:30.500 --> 00:01:32.060
what is going to be used as

00:01:32.060 --> 00:01:35.915
an interface when you're dealing with high suitability question response,

00:01:35.915 --> 00:01:40.865
normally, the 95 percentage of scenario we are going to use the browser as our interface.

00:01:40.865 --> 00:01:46.790
So Browser is a capability which contains creating an HTTP request.

00:01:46.790 --> 00:01:49.610
So now it can create a hatch to Tippit equation has two TPS,

00:01:49.610 --> 00:01:51.260
that means the security protocol.

00:01:51.260 --> 00:01:53.765
So it can create high suitable request.

00:01:53.765 --> 00:01:58.560
Then it will send a request to a server as HTTP request.

00:01:58.900 --> 00:02:05.585
And then server will process the data and it will return the HTTP response.

00:02:05.585 --> 00:02:08.930
And then the response came back to our browser and then it will

00:02:08.930 --> 00:02:13.759
render into our browser screen.

00:02:13.759 --> 00:02:19.385
Okay, So we are trying to do the same thing through other Java.

00:02:19.385 --> 00:02:21.740
So I'm not going to use any browser.

00:02:21.740 --> 00:02:24.665
I'm going to create a simple Java file.

00:02:24.665 --> 00:02:26.420
And through that file,

00:02:26.420 --> 00:02:28.565
I'm going to call

00:02:28.565 --> 00:02:34.970
particular web service RNA API call with the help of distributed question respond.

00:02:34.970 --> 00:02:38.855
But we should have a question like so it is existing in Java along back.

00:02:38.855 --> 00:02:41.540
So why do we need to docker?

00:02:41.540 --> 00:02:44.584
But right now, what does it change happen?

00:02:44.584 --> 00:02:49.385
So before Java, there are few points which we need to keep in mind.

00:02:49.385 --> 00:02:54.930
What does the issue with the older version of HTTP client?

00:02:55.390 --> 00:03:01.040
So the client is nothing but the high TDP URL connection,

00:03:01.040 --> 00:03:04.790
which is released on the year off 1987.

00:03:04.790 --> 00:03:08.645
It, it, it comes under the Dow 1.1st one version.

00:03:08.645 --> 00:03:16.620
So it is pretty bold. So let's see what is that difficulties in the world relations.

00:03:25.390 --> 00:03:30.170
The first thing we used a euro connection as I mentioned.

00:03:30.170 --> 00:03:31.370
Okay, and that's pretty good.

00:03:31.370 --> 00:03:35.405
So what did the issue in there, which is introduced on 1997,

00:03:35.405 --> 00:03:37.970
I've been it's more than 20 years back.

00:03:37.970 --> 00:03:40.475
But the problem with that version,

00:03:40.475 --> 00:03:44.150
it will support only has two TB1.

00:03:44.150 --> 00:03:47.060
So if it is uploading handshake one motion,

00:03:47.060 --> 00:03:49.220
of course it will warn Lisa politics format,

00:03:49.220 --> 00:03:51.200
not the binary format.

00:03:51.200 --> 00:03:53.990
And another important thing,

00:03:53.990 --> 00:03:57.575
it will create only one request per session.

00:03:57.575 --> 00:04:00.740
So once that has been sent, That's ten.

00:04:00.740 --> 00:04:03.185
Then another echoes advertised at a new session.

00:04:03.185 --> 00:04:05.150
And it is a synchronous mode.

00:04:05.150 --> 00:04:08.060
So we should know what is synchronous and asynchronous, right?

00:04:08.060 --> 00:04:10.190
So synchronous is nothing but when you're

00:04:10.190 --> 00:04:13.025
triggered something or when you request something.

00:04:13.025 --> 00:04:19.170
So once it is received back and then only we can move on to the next job.

00:04:19.360 --> 00:04:22.430
So that isn't synchronous process.

00:04:22.430 --> 00:04:29.000
So our session, we'll wait until it gets the response to the next request.

00:04:29.000 --> 00:04:31.430
And another important thing,

00:04:31.430 --> 00:04:35.465
it is not easy to use you how to write a lot of code.

00:04:35.465 --> 00:04:38.660
So all these things we go,

00:04:38.660 --> 00:04:40.655
we got some improvements in Java name.

00:04:40.655 --> 00:04:41.990
So what are those?

00:04:41.990 --> 00:04:48.020
So in Java, it is easy to use since it is a lightweight component.

00:04:48.020 --> 00:04:52.955
And its support has to be p and 1 and devotion to.

00:04:52.955 --> 00:04:59.015
So that means we can walk with binary data as well as that takes data.

00:04:59.015 --> 00:05:03.245
Support our synchronous because when it is supporting HTTP

00:05:03.245 --> 00:05:07.340
to worst and obviously it will support asynchronous,

00:05:07.340 --> 00:05:11.990
so we can make a synchronous call at the same time you can make as economists call also.

00:05:11.990 --> 00:05:17.480
So that might be a quotient like the highest GDP.

00:05:17.480 --> 00:05:19.805
The one motion has been made in for such a long time.

00:05:19.805 --> 00:05:24.395
The reason it's HTTP 2 has been into design 2015 only.

00:05:24.395 --> 00:05:30.210
Okay, but let's think about something else.

00:05:30.910 --> 00:05:34.700
So now our high studio URL connection,

00:05:34.700 --> 00:05:37.445
which will not support a lot of new things.

00:05:37.445 --> 00:05:40.775
How the programs has been surveyed this long.

00:05:40.775 --> 00:05:44.420
Because our, our traditional high strategic level connection

00:05:44.420 --> 00:05:46.985
is not supporting lot of functionality.

00:05:46.985 --> 00:05:50.450
We had to move to the third party.

00:05:50.450 --> 00:05:56.750
Third party modules such as nothing but people will move on to Apache HTTP client.

00:05:56.750 --> 00:06:03.600
And now recently is people are migrating into Google's HTTP claimed.

00:06:03.970 --> 00:06:08.480
So from Java 9,

00:06:08.480 --> 00:06:17.345
we are going to have our one module where we can create a simple request.

00:06:17.345 --> 00:06:19.205
And in an easier way,

00:06:19.205 --> 00:06:21.110
we don't have to write a complex called light before.

00:06:21.110 --> 00:06:22.505
Yeah, right.

00:06:22.505 --> 00:06:28.530
So the next video we'll talk about little bit more about that has to be clients.
