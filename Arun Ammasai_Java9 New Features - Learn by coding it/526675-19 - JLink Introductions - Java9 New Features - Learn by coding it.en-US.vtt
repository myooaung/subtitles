WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.830 --> 00:00:02.820
Hello everyone.

00:00:02.820 --> 00:00:04.080
Welcome back.

00:00:04.080 --> 00:00:09.930
So we're going to discuss about another important feature, which is relation.

00:00:09.930 --> 00:00:14.235
John, I am, I think we can say that it is not important.

00:00:14.235 --> 00:00:16.530
It is a major breakthrough in Java,

00:00:16.530 --> 00:00:20.775
which is nothing but J link, Java linker.

00:00:20.775 --> 00:00:23.700
So what Java will incur will do.

00:00:23.700 --> 00:00:26.070
So normally in traditional way,

00:00:26.070 --> 00:00:29.535
we always depends on Java Runtime Environment,

00:00:29.535 --> 00:00:35.390
whatever the code we are returning you how to run based on the you were JDK JRE.

00:00:35.390 --> 00:00:39.380
But J link, which will allows us to create our own JRE.

00:00:39.380 --> 00:00:40.985
Just take this example.

00:00:40.985 --> 00:00:44.030
I have a class called Helloworld.

00:00:44.030 --> 00:00:49.385
Okay, so what are the class felt will be there or what are the modules will be there.

00:00:49.385 --> 00:00:54.470
Basically one leach out at AC baggages will be there because we have a string, right?

00:00:54.470 --> 00:00:57.500
And we have a class, right?

00:00:57.500 --> 00:01:01.340
So just, just to use only one KB file,

00:01:01.340 --> 00:01:06.690
why do I need to have JRE which contains more than 200 MB?

00:01:06.940 --> 00:01:12.845
Right? So those scenarios based on our module or application size,

00:01:12.845 --> 00:01:15.709
we can create our own JRE.

00:01:15.709 --> 00:01:18.230
Because when you create your own JRE,

00:01:18.230 --> 00:01:19.400
you can provide water.

00:01:19.400 --> 00:01:21.365
The modules you're required.

00:01:21.365 --> 00:01:25.910
You can add your custom models in it and you can create your own GRE.

00:01:25.910 --> 00:01:28.730
So what is the important thing? To take an example?

00:01:28.730 --> 00:01:30.320
For IoT and microservice,

00:01:30.320 --> 00:01:32.795
there are very small services, right?

00:01:32.795 --> 00:01:34.685
They won't have that much memory in place.

00:01:34.685 --> 00:01:36.110
So those kind of situations,

00:01:36.110 --> 00:01:41.000
they will handle only up to one to 10 KPBS, IKB files, right?

00:01:41.000 --> 00:01:47.465
So those scenarios we cannot offer to use for 200 images to create our JIRA, right?

00:01:47.465 --> 00:01:52.250
So now we can create our own JID based on the device size.

00:01:52.250 --> 00:01:56.945
Of course, for whatever DSS scaling, scaling means.

00:01:56.945 --> 00:01:59.585
Even though it were the big application,

00:01:59.585 --> 00:02:01.295
you can scaling into multiple paths.

00:02:01.295 --> 00:02:03.890
Like if you have a monolith application,

00:02:03.890 --> 00:02:07.640
we are splitting H and everything in a separate service or like micro-services.

00:02:07.640 --> 00:02:10.910
We can split or we can scale

00:02:10.910 --> 00:02:15.635
your monolith application into a small multiple modules of GREs.

00:02:15.635 --> 00:02:20.060
So for example, if you have four or five or measure modules in your big project,

00:02:20.060 --> 00:02:25.865
you can combine them and you can create some separate debt is like customer information.

00:02:25.865 --> 00:02:28.085
So that is a separate area for that.

00:02:28.085 --> 00:02:29.210
Right?

00:02:29.210 --> 00:02:31.160
So if you have an employee information,

00:02:31.160 --> 00:02:33.110
so it will only handle employee models.

00:02:33.110 --> 00:02:36.780
We can have our own JRE and sale module.

00:02:36.780 --> 00:02:40.330
So yes, Even sale modal which

00:02:40.330 --> 00:02:44.860
combine the packages of sale information and we can create a GRU.

00:02:44.860 --> 00:02:49.420
And elephant becomes what is called elephant becomes smaller.

00:02:49.420 --> 00:02:52.960
Because each and every lays our JDK size is getting

00:02:52.960 --> 00:02:56.605
increased a lot because of the new things comes into place.

00:02:56.605 --> 00:03:00.100
The similar with a DRE also getting increased.

00:03:00.100 --> 00:03:02.485
So it was like an elephant before.

00:03:02.485 --> 00:03:06.700
Now, it can be a mouse or it can be even smaller.

00:03:06.700 --> 00:03:09.400
Just like an example, I have 200 and VJ.

00:03:09.400 --> 00:03:12.055
Vj ARE, and I have a 20 and VGA,

00:03:12.055 --> 00:03:13.285
which one will prefer.

00:03:13.285 --> 00:03:15.280
I just need to run one simple program.

00:03:15.280 --> 00:03:16.930
I don't need to a 100 NBA, right?

00:03:16.930 --> 00:03:19.305
I can I just mean wanted to and aviary.

00:03:19.305 --> 00:03:20.870
That is what I've always said.

00:03:20.870 --> 00:03:23.675
I'll often becomes a mouse, right?

00:03:23.675 --> 00:03:27.215
So what are the important things available in jailing?

00:03:27.215 --> 00:03:28.985
So the manager core areas,

00:03:28.985 --> 00:03:32.210
therefore things module path when you create a jailing,

00:03:32.210 --> 00:03:33.590
the first thing we need to provide,

00:03:33.590 --> 00:03:35.225
what is the path of the module?

00:03:35.225 --> 00:03:37.670
And then what is a module? You are good.

00:03:37.670 --> 00:03:39.830
Add, insert your own GRE,

00:03:39.830 --> 00:03:41.690
and then limit Module 2.

00:03:41.690 --> 00:03:42.980
What is limit module?

00:03:42.980 --> 00:03:43.670
Right?

00:03:43.670 --> 00:03:48.785
So when you're creating your own modules and you'll be add some required modules, right?

00:03:48.785 --> 00:03:52.070
There are scenarios when you add some modules, there are additional pack,

00:03:52.070 --> 00:03:57.034
additional models will be added as a part of transient dependency.

00:03:57.034 --> 00:03:59.030
Okay, with the help of limit module,

00:03:59.030 --> 00:04:03.995
we can specify I just need only these dependencies are these particular modules.

00:04:03.995 --> 00:04:05.330
And then output.

00:04:05.330 --> 00:04:11.040
So where do you want to create your own GOD, the location.

00:04:11.080 --> 00:04:13.730
So now what we're going to discuss,

00:04:13.730 --> 00:04:19.610
I'm going to create a simple program where I can run using the JDK JRE,

00:04:19.610 --> 00:04:25.610
and then I will create my own JRE and L and the same application.

00:04:25.610 --> 00:04:29.360
So let's start with a simple application where I can use

00:04:29.360 --> 00:04:34.620
the default JPEG area. Let's jump into it.
