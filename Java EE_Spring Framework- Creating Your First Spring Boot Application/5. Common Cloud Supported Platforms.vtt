WEBVTT
1
00:00:01.377 --> 00:00:03.172
Now that you have a self-contained JAR file that

2
00:00:03.172 --> 00:00:05.160
represents your application in standalone mode,

3
00:00:05.160 --> 00:00:08.836
you're ready to deploy it and run it on a cloud platform.

4
00:00:08.836 --> 00:00:13.637
Common cloud platforms that Spring Boot works with are Cloud Foundry,

5
00:00:13.637 --> 00:00:16.642
Heroku, Google Cloud, Amazon Web Services,

6
00:00:16.642 --> 00:00:18.642
and Microsoft's Azure.

7
00:00:18.642 --> 00:00:22.752
Each of these platforms require setting up different configuration files so the

8
00:00:22.752 --> 00:00:26.386
platform knows how to deploy it on its own infrastructure.

9
00:00:26.386 --> 00:00:28.459
Even though those details might differ,

10
00:00:28.459 --> 00:00:32.029
the standalone JAR artifact you create does not.

11
00:00:32.029 --> 00:00:34.865
If you want to give yourself even more flexibility with deployments,

12
00:00:34.865 --> 00:00:37.209
you can Dockerize your application.

13
00:00:37.209 --> 00:00:40.573
Most all cloud platforms support Docker.

14
00:00:40.573 --> 00:00:41.485
You might ask,

15
00:00:41.485 --> 00:00:44.355
why would I Dockerize my app if the platform

16
00:00:44.355 --> 00:00:46.470
supports deploying a JAR file natively?

17
00:00:46.470 --> 00:00:48.272
There are a few reasons.

18
00:00:48.272 --> 00:00:51.420
Clustering and portability are just simply two of them.

19
00:00:51.420 --> 00:00:52.869
If your app is Dockerize,

20
00:00:52.869 --> 00:00:55.886
you can spin up many instances quickly using tools

21
00:00:55.886 --> 00:00:58.436
like Docker Compose or Kubernetes.

22
00:00:58.436 --> 00:01:01.033
Finally, if you do decide to use a cloud offering,

23
00:01:01.033 --> 00:01:03.489
a few things to keep in mind, first,

24
00:01:03.489 --> 00:01:08.540
logging can be difficult to track down and use depending on the cloud.

25
00:01:08.540 --> 00:01:12.829
It may be a good idea to utilize a centralized logging service.

26
00:01:12.829 --> 00:01:15.087
Connecting to your database or other cloud service,

27
00:01:15.087 --> 00:01:16.851
like a Redis queue,

28
00:01:16.851 --> 00:01:20.432
may require specific handling that can be different than what we covered in

29
00:01:20.432 --> 00:01:23.415
the Spring Boot configuration section of this course.

30
00:01:23.415 --> 00:01:26.449
Getting all of your services to talk to one another can

31
00:01:26.449 --> 00:01:28.260
also be a firewall or a security headache.

32
00:01:28.260 --> 00:01:30.911
Since you're in the cloud and things are public,

33
00:01:30.911 --> 00:01:35.011
you need to deal with network traffic and communication appropriately.

34
00:01:35.011 --> 00:01:40.000
Coming up next, we'll check out how to deploy our application to the Heroku cloud.

