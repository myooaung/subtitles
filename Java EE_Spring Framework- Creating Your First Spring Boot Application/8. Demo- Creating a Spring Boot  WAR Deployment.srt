1
00:00:01,233 --> 00:00:04,386
We'll start by making a couple of changes in the Maven pom.xml file,

2
00:00:04,386 --> 00:00:07,087
so I'll go ahead and get that open.

3
00:00:07,087 --> 00:00:10,152
The first thing that needs to happen is we need to flag

4
00:00:10,152 --> 00:00:15,029
the embedded containers as provided, so I'll need to do a few things here.

5
00:00:15,029 --> 00:00:19,306
First, we have a dependency for our spring-boot-starter-jetty.

6
00:00:19,306 --> 00:00:22,984
I'm going to go ahead and remove that dependency.

7
00:00:22,984 --> 00:00:27,393
And we've also excluded the spring-boot-starter-tomcat in

8
00:00:27,393 --> 00:00:30,136
the spring-boot-starter-web dependency,

9
00:00:30,136 --> 00:00:34,200
so I'm going to go ahead and remove that as well.

10
00:00:34,200 --> 00:00:38,063
Next, I'm going to re-add the spring-boot-starter-tomcat dependency,

11
00:00:38,063 --> 00:00:41,985
but I'm going to give it a scope of provided.

12
00:00:41,985 --> 00:00:45,328
That means that Maven won't package the Tomcat starter in the build.

13
00:00:45,328 --> 00:00:47,937
It expects something externally to provide it.

14
00:00:47,937 --> 00:00:49,189
With these changes in place,

15
00:00:49,189 --> 00:00:53,532
you won't have an embedded container inside of your application anymore.

16
00:00:53,532 --> 00:00:56,500
And the final thing that we need to do is to change the

17
00:00:56,500 --> 00:00:58,855
packaging type of the Maven artifact to a WAR.

18
00:00:58,855 --> 00:01:02,261
We can do that by adding the following line.

19
00:01:02,261 --> 00:01:07,412
I'm going to do that near the top of the file underneath the description area,

20
00:01:07,412 --> 00:01:10,507
and that will be packaging tag with a value of war.

21
00:01:10,507 --> 00:01:14,743
That now will produce a WAR file rather than a JAR file.

22
00:01:14,743 --> 00:01:18,617
Go ahead and save those changes, and IntelliJ is wanting us to import those.

23
00:01:18,617 --> 00:01:19,780
We'll do that.

24
00:01:19,780 --> 00:01:22,725
Once that's done, we need to make one small Java change,

25
00:01:22,725 --> 00:01:25,553
so I'm going to go ahead and close this build section,

26
00:01:25,553 --> 00:01:28,847
and I'm going to jump back to src, main,

27
00:01:28,847 --> 00:01:30,994
java, jump into my packages,

28
00:01:30,994 --> 00:01:34,541
and I want to find the ConferenceDemoApplication class.

29
00:01:34,541 --> 00:01:35,205
If you remember,

30
00:01:35,205 --> 00:01:38,437
this is our bootstrap class that has the public static void

31
00:01:38,437 --> 00:01:41,053
main where everything gets kicked off.

32
00:01:41,053 --> 00:01:43,941
The change I want to add in here is I need to have

33
00:01:43,941 --> 00:01:46,310
this class extend the following.

34
00:01:46,310 --> 00:01:48,790
We want it to extend SpringBootServletInitializer.

35
00:01:48,790 --> 00:01:52,478
We'll go ahead and import that class and save the file.

36
00:01:52,478 --> 00:01:55,526
When you deploy a WAR file to an external container,

37
00:01:55,526 --> 00:01:58,139
it expects a context to be available.

38
00:01:58,139 --> 00:02:04,956
It also expects a web.xml file, which defines how the app will get deployed.

39
00:02:04,956 --> 00:02:09,336
Since the Spring Boot does not have a web.xml file in it,

40
00:02:09,336 --> 00:02:14,407
this class provides that value and information to the external container.

41
00:02:14,407 --> 00:02:14,950
Without this,

42
00:02:14,950 --> 00:02:18,038
you won't be able to access you app properly via a

43
00:02:18,038 --> 00:02:20,181
context when you go to access it.

44
00:02:20,181 --> 00:02:21,809
With these changes in place,

45
00:02:21,809 --> 00:02:26,168
we can go ahead and open up the Maven pop-out and run mvn package again by

46
00:02:26,168 --> 00:02:31,284
going to the little m and running the mvn package command.

47
00:02:31,284 --> 00:02:32,964
At this point, you'll notice that we get an error,

48
00:02:32,964 --> 00:02:37,509
and I wanted to point this out because this can cause people to run into a

49
00:02:37,509 --> 00:02:40,525
lot of issues if you're not familiar with what's happening.

50
00:02:40,525 --> 00:02:41,590
So, ultimately,

51
00:02:41,590 --> 00:02:44,012
what happens when the test runs is it's looking for

52
00:02:44,012 --> 00:02:46,178
everything to be set up correctly.

53
00:02:46,178 --> 00:02:50,571
We're currently set up to use our database by using an environment variable.

54
00:02:50,571 --> 00:02:52,824
So I'm going to go ahead and close this Run thing here,

55
00:02:52,824 --> 00:02:58,643
and I want to go over to the resources, application.properties.

56
00:02:58,643 --> 00:03:01,042
In here, the app is expecting this.

57
00:03:01,042 --> 00:03:03,947
Well, this is not provided when we run our test.

58
00:03:03,947 --> 00:03:04,943
And if you think about it,

59
00:03:04,943 --> 00:03:09,019
this environment variable won't be provided when we go out to

60
00:03:09,019 --> 00:03:12,439
run our app inside of a Tomcat container,

61
00:03:12,439 --> 00:03:13,584
for example.

62
00:03:13,584 --> 00:03:16,540
We could end up setting that as a value on there,

63
00:03:16,540 --> 00:03:21,395
but just to make things simpler, I'm going to go back into the config,

64
00:03:21,395 --> 00:03:21,960
PersistenceConfiguration,

65
00:03:21,960 --> 00:03:26,357
and I'm going to reenable the bean that we set up

66
00:03:26,357 --> 00:03:29,883
because we've hard coded our URL in here.

67
00:03:29,883 --> 00:03:31,467
I'm going to save that file.

68
00:03:31,467 --> 00:03:32,648
Now also, keep in mind,

69
00:03:32,648 --> 00:03:35,558
you don't want to end up doing this for your production app.

70
00:03:35,558 --> 00:03:39,069
You do want to end up using some kind of external configuration source,

71
00:03:39,069 --> 00:03:41,116
and a lot of times,

72
00:03:41,116 --> 00:03:45,464
the best way to do that in an external container is using JNDI.

73
00:03:45,464 --> 00:03:49,984
So you could set these up as JNDI values so you don't have your URL

74
00:03:49,984 --> 00:03:53,284
and credentials hard coded into your application.

75
00:03:53,284 --> 00:03:55,677
Since we don't have enough time to go into that depth,

76
00:03:55,677 --> 00:04:04,003
we'll go ahead and just reenable this and run the mvn package again.

77
00:04:04,003 --> 00:04:06,502
This time, the app has built successfully,

78
00:04:06,502 --> 00:04:08,667
and if we go look in the target folder,

79
00:04:08,667 --> 00:04:14,242
you'll now see that the artifact is a WAR file rather than a JAR file.

80
00:04:14,242 --> 00:04:16,848
We still have our old JAR file in there from an earlier build,

81
00:04:16,848 --> 00:04:24,227
but we also now have this conference-demo- 0.0 .1 - SNAPSHOT.war file,

82
00:04:24,227 --> 00:04:29,543
and this is the file that we'll go ahead and deploy to a Tomcat container.

83
00:04:29,543 --> 00:04:31,969
So to deploy my WAR file to a Tomcat instance,

84
00:04:31,969 --> 00:04:36,290
I need to go find that WAR file, which is in my target folder,

85
00:04:36,290 --> 00:04:38,357
and I'm going to copy this.

86
00:04:38,357 --> 00:04:41,333
I'm going to go over to my apache deploy,

87
00:04:41,333 --> 00:04:47,318
and you're going to push this into the webapps folder for apache-tomcat.

88
00:04:47,318 --> 00:04:50,897
So we'll simply paste that WAR file in here,

89
00:04:50,897 --> 00:04:53,630
and then you'll notice that Tomcat will extract that

90
00:04:53,630 --> 00:04:56,712
out into an expanded application.

91
00:04:56,712 --> 00:05:01,858
By default, Tomcat runs on port 8080, so I'm here at the root of my Tomcat,

92
00:05:01,858 --> 00:05:04,835
and I have the Tomcat documentation.

93
00:05:04,835 --> 00:05:08,258
To run and access my app, I need to enter the context.

94
00:05:08,258 --> 00:05:14,722
Now the context was the name of the folder that I just deployed.

95
00:05:14,722 --> 00:05:16,519
That folder name is this big, long thing here,

96
00:05:16,519 --> 00:05:19,840
so I'm simply going to copy that and paste that in

97
00:05:19,840 --> 00:05:22,937
as my context for my application.

98
00:05:22,937 --> 00:05:29,264
So that would be forward-slash and the name of my conference-demo-SNAPSHOT.

99
00:05:29,264 --> 00:05:30,206
And when I go to that page now,

100
00:05:30,206 --> 00:05:34,159
you'll see that my app is responding to the home or the root endpoint,

101
00:05:34,159 --> 00:05:36,656
which is our app-version of 1.0 .0,

102
00:05:36,656 --> 00:05:42,133
and the app is now running on a container using the external

103
00:05:42,133 --> 00:05:46,149
Tomcat instead of the internal embedded Tomcat.

104
00:05:46,149 --> 00:05:50,119
And again, we can go ahead and test out the speakers or the sessions,

105
00:05:50,119 --> 00:05:54,240
and I still get my sessions endpoint back.

106
00:05:54,240 --> 00:05:59,204
So this is how you can run a Spring Boot application on an external container,

107
00:05:59,204 --> 00:06:01,836
and there's only a few changes that you need to make

108
00:06:01,836 --> 00:06:03,929
to your app to get that working.

109
00:06:03,929 --> 00:06:04,127
Finally,

110
00:06:04,127 --> 00:06:06,685
keep in mind that the changes that we've made in this clip

111
00:06:06,685 --> 00:06:09,885
will prevent your app from running as a JAR file or a

112
00:06:09,885 --> 00:06:12,160
standalone executable JAR file.

113
00:06:12,160 --> 00:06:14,087
You can pick one way, or you can pick the other,

114
00:06:14,087 --> 00:06:17,473
but you can't have both a JAR and a WAR at the same time.

115
00:06:17,473 --> 00:06:25,000
If you want to go back to running your app as a standalone JAR, you'll need to revert the changes that were made in this clip.

