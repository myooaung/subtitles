1
00:00:01,372 --> 00:00:04,376
Getting processes in place to be able to handle your app in

2
00:00:04,376 --> 00:00:07,355
multiple environments is something most teams will end up doing

3
00:00:07,355 --> 00:00:10,064
over the life of any serious project.

4
00:00:10,064 --> 00:00:11,592
At some point, you might ask,

5
00:00:11,592 --> 00:00:14,864
how can I work with an app in development locally then

6
00:00:14,864 --> 00:00:17,506
deploy to a nightly test server, staging,

7
00:00:17,506 --> 00:00:19,674
and finally, into production.

8
00:00:19,674 --> 00:00:23,128
Spring Boot uses a combination of Spring profiles and

9
00:00:23,128 --> 00:00:26,784
profile-specific application property files to accomplish this.

10
00:00:26,784 --> 00:00:30,934
Simply add any profile suffix to the application part of the file name,

11
00:00:30,934 --> 00:00:33,870
and Spring Boot will use those properties instead of the

12
00:00:33,870 --> 00:00:36,586
default application.properties file.

13
00:00:36,586 --> 00:00:37,568
To specify the profile,

14
00:00:37,568 --> 00:00:42,105
you have to use a spring.profile .active -D parameter on

15
00:00:42,105 --> 00:00:45,745
your app startup with the profile name to activate

16
00:00:45,745 --> 00:00:48,122
whatever profile you want to run.

17
00:00:48,122 --> 00:00:50,932
In this case, the dev profile would be activated,

18
00:00:50,932 --> 00:00:53,697
and Spring Boot will look for an application-

19
00:00:53,697 --> 00:00:57,689
dev.properties file on the class path, which would be in src,

20
00:00:57,689 --> 00:01:00,238
main, resources of our project.

21
00:01:00,238 --> 00:01:05,103
Let's go ahead and set up a new profile configuration.

22
00:01:05,103 --> 00:01:05,978
I'm back in IntelliJ,

23
00:01:05,978 --> 00:01:10,416
and I'm going to go ahead and create a production-specific property file.

24
00:01:10,416 --> 00:01:14,439
So under src, main, resources, I'm going to create a new file.

25
00:01:14,439 --> 00:01:19,867
Since this is for prod, I'll call it application- prod.properties.

26
00:01:19,867 --> 00:01:20,372
For production,

27
00:01:20,372 --> 00:01:24,192
we probably want to trim down the logging to just errors or warnings.

28
00:01:24,192 --> 00:01:27,332
We can add some properties to the file that will do just that.

29
00:01:27,332 --> 00:01:30,674
You can adjust the logging level on your application to

30
00:01:30,674 --> 00:01:35,262
anything in the org package to just print out WARN or error

31
00:01:35,262 --> 00:01:37,721
messages by using a property like this.

32
00:01:37,721 --> 00:01:42,470
I'm going to make sure my application-prod properties file is saved.

33
00:01:42,470 --> 00:01:45,314
And really quickly, if I open the Run section,

34
00:01:45,314 --> 00:01:47,872
you'll notice we have a lot of log statements when the

35
00:01:47,872 --> 00:01:51,122
server starts out that are INFO, or WARN,

36
00:01:51,122 --> 00:01:54,170
or other scopes in the log file.

37
00:01:54,170 --> 00:01:57,669
The logging level that we just set says we only want to

38
00:01:57,669 --> 00:01:59,396
see WARN particular log statements,

39
00:01:59,396 --> 00:02:04,193
and so we want to remove this INFO for production.

40
00:02:04,193 --> 00:02:07,514
So we can test that our by setting the profile on the run configuration,

41
00:02:07,514 --> 00:02:10,178
so we'll go ahead and reopen the Run,

42
00:02:10,178 --> 00:02:14,738
Edit Configurations section of IntelliJ again.

43
00:02:14,738 --> 00:02:17,249
This time, we want to utilize the VM options,

44
00:02:17,249 --> 00:02:21,976
so I'm going to select in here, and I'm going to add the following -D parameter,

45
00:02:21,976 --> 00:02:24,968
spring.profiles .active, and it equals prod.

46
00:02:24,968 --> 00:02:25,673
And note,

47
00:02:25,673 --> 00:02:31,567
prod has to match the suffix that we've given our property application file.

48
00:02:31,567 --> 00:02:33,763
Go ahead and apply that and close this.

49
00:02:33,763 --> 00:02:37,275
Then we can go back to the Run tab and rerun the server and see if our log

50
00:02:37,275 --> 00:02:40,732
files are reduced because now we're in production mode.

51
00:02:40,732 --> 00:02:43,790
Okay, so the application has started, but you might be asking,

52
00:02:43,790 --> 00:02:45,956
why am I still seeing INFO messages?

53
00:02:45,956 --> 00:02:48,383
I should only be seeing WARN messages.

54
00:02:48,383 --> 00:02:49,438
Well if you remember,

55
00:02:49,438 --> 00:02:54,100
we only set WARN messages on any code that begins in the org package,

56
00:02:54,100 --> 00:02:57,688
so these codes over here begin in com.

57
00:02:57,688 --> 00:03:00,556
It's not going to take effect.

58
00:03:00,556 --> 00:03:01,009
But overall,

59
00:03:01,009 --> 00:03:03,626
you'll notice that the log output is substantially

60
00:03:03,626 --> 00:03:05,879
smaller using the prod profile.

61
00:03:05,879 --> 00:03:10,322
Since we're still in development mode with this application,

62
00:03:10,322 --> 00:03:12,764
we'll go ahead and remove that from the run configuration,

63
00:03:12,764 --> 00:03:16,166
just in case we do run into errors later,

64
00:03:16,166 --> 00:03:23,000
we can see them. Coming up next, we have even more configuration options with Spring Boot.

