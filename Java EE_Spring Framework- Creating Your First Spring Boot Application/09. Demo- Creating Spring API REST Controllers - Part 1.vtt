WEBVTT
1
00:00:01.576 --> 00:00:03.755
We now need to create some controllers.

2
00:00:03.755 --> 00:00:06.210
These controllers will handle our API endpoints,

3
00:00:06.210 --> 00:00:08.277
and they're going to be REST based.

4
00:00:08.277 --> 00:00:11.960
Again, we have a package that we've defined for these called controllers,

5
00:00:11.960 --> 00:00:15.099
so I'm going to jump over there and create a new

6
00:00:15.099 --> 00:00:17.931
class in the controllers package.

7
00:00:17.931 --> 00:00:21.253
Right-click and say New, Java Class.

8
00:00:21.253 --> 00:00:23.596
I'll again start with the Sessions section,

9
00:00:23.596 --> 00:00:26.272
so I'll create a controller called SessionsController,

10
00:00:26.272 --> 00:00:29.199
leave it as a class type, and hit Enter.

11
00:00:29.199 --> 00:00:32.905
The next thing we need to do is add some annotations so that

12
00:00:32.905 --> 00:00:36.119
Spring MVC knows that these are controllers.

13
00:00:36.119 --> 00:00:41.647
So I'm going to add that at the class level.

14
00:00:41.647 --> 00:00:44.628
Import the classes for the annotation.

15
00:00:44.628 --> 00:00:45.063
So quickly,

16
00:00:45.063 --> 00:00:49.755
what these mean is the @RestController means that this will respond to

17
00:00:49.755 --> 00:00:54.908
payloads incoming and outgoing as JSON REST endpoints.

18
00:00:54.908 --> 00:01:00.618
The @RequestMapping tells the router what the mapping URL will look like.

19
00:01:00.618 --> 00:01:07.368
So in this case, I'm specifying the route path is /api/v1/sessions.

20
00:01:07.368 --> 00:01:10.300
All requests to that URL will be sent to this controller.

21
00:01:10.300 --> 00:01:15.174
The next thing I'm going to do is use Spring to inject or auto wire

22
00:01:15.174 --> 00:01:18.774
the sessions repository that we just created.

23
00:01:18.774 --> 00:01:23.412
Go ahead and import the missing classes, and that's what this will look like.

24
00:01:23.412 --> 00:01:27.076
So Spring will auto wire this when our SessionsController is built.

25
00:01:27.076 --> 00:01:32.266
It will create an instance of the session repository and put it onto our class.

26
00:01:32.266 --> 00:01:34.270
Next, I'm going to create a list endpoint.

27
00:01:34.270 --> 00:01:37.066
This will return all of the sessions when called,

28
00:01:37.066 --> 00:01:41.400
so I need to create a method that looks like this.

29
00:01:41.400 --> 00:01:46.757
Go ahead and import the missing files.

30
00:01:46.757 --> 00:01:49.359
Another thing to note really quick about REST

31
00:01:49.359 --> 00:01:53.541
controllers in Spring MVC is the return types.

32
00:01:53.541 --> 00:01:54.192
By default,

33
00:01:54.192 --> 00:02:00.459
the REST controller will return 200s as the response status for all the calls.

34
00:02:00.459 --> 00:02:03.825
Even though we added the @PostMapping annotation to this endpoint,

35
00:02:03.825 --> 00:02:06.965
it's not going to infer anything from that.

36
00:02:06.965 --> 00:02:09.741
Because typically, when you create something or you post something,

37
00:02:09.741 --> 00:02:15.855
you get a 201 back, but the Spring REST controllers just will return a 200.

38
00:02:15.855 --> 00:02:19.777
So one way that you can override those would be to add the

39
00:02:19.777 --> 00:02:21.847
following annotation to your endpoint.

40
00:02:21.847 --> 00:02:24.748
By including the @ResponseStatus annotation,

41
00:02:24.748 --> 00:02:29.841
you can specify the exact response that you want to occur

42
00:02:29.841 --> 00:02:32.787
when the method executes and finishes.

43
00:02:32.787 --> 00:02:35.799
So in this case, I've given it an HttpStatus of CREATED,

44
00:02:35.799 --> 00:02:40.371
which maps to 201 in the HTTP world.

45
00:02:40.371 --> 00:02:43.306
Since this isn't in-depth REST course,

46
00:02:43.306 --> 00:02:45.883
I'm going to go ahead and just remove the ResponseStatus,

47
00:02:45.883 --> 00:02:50.158
and I'm going to leave the 200 responses for all of our endpoints,

48
00:02:50.158 --> 00:02:53.696
even though that's not typically what you would do in real life,

49
00:02:53.696 --> 00:02:57.798
but that it could be something that you could go back in and add yourself by

50
00:02:57.798 --> 00:03:01.396
thinking about what is the appropriate response for GETs,

51
00:03:01.396 --> 00:03:04.189
CREATEs, PUTs, DELETEs, and so on,

52
00:03:04.189 --> 00:03:09.217
and put the ResponseStatus mapping in correctly.

53
00:03:09.217 --> 00:03:10.862
A couple of things about this method.

54
00:03:10.862 --> 00:03:13.495
I haven't given it a specific RequestMapping.

55
00:03:13.495 --> 00:03:16.605
That means if you were to make a call to api/v1/sessions,

56
00:03:16.605 --> 00:03:19.795
it's going to route to this method.

57
00:03:19.795 --> 00:03:23.578
The annotation GetMapping tells which HTTP verb to use,

58
00:03:23.578 --> 00:03:28.223
which will be a get verb to call this endpoint.

59
00:03:28.223 --> 00:03:33.254
Next, I've used sessionRepository, and I'm calling the findAll on it.

60
00:03:33.254 --> 00:03:36.814
This is how powerful the JPA repositories are.

61
00:03:36.814 --> 00:03:38.204
It built this method for us,

62
00:03:38.204 --> 00:03:41.357
and it's going to go out and query all of the sessions in the

63
00:03:41.357 --> 00:03:44.721
database and return them as a list of Session objects.

64
00:03:44.721 --> 00:03:49.219
You'll notice that our data type is returning that list of sessions,

65
00:03:49.219 --> 00:03:53.063
and Spring MVC will then pass that over to Jackson,

66
00:03:53.063 --> 00:03:55.229
which is a serialization library,

67
00:03:55.229 --> 00:04:00.663
which will turn those sessions into JSON and return them back to the caller.

68
00:04:00.663 --> 00:04:03.326
The next REST endpoint I want to add is the ability

69
00:04:03.326 --> 00:04:06.040
to get a specific session by ID.

70
00:04:06.040 --> 00:04:12.206
So I'm going to add this method, I'm going to import the classes,

71
00:04:12.206 --> 00:04:14.735
and let's talk about what this does really quick.

72
00:04:14.735 --> 00:04:15.115
Again,

73
00:04:15.115 --> 00:04:19.538
the @GetMapping is like the other method in that we're using

74
00:04:19.538 --> 00:04:24.308
the HTTP verb GET when we call this method.

75
00:04:24.308 --> 00:04:29.199
The @RequestMapping is in addition to the class RequestMapping.

76
00:04:29.199 --> 00:04:32.917
So in this case, our class RequestMapping is api/V1/sessions,

77
00:04:32.917 --> 00:04:39.123
and the RequestMapping on this is adding an additional id to the URL.

78
00:04:39.123 --> 00:04:44.394
This id is specifying a specific session, and we want to return that.

79
00:04:44.394 --> 00:04:48.462
The parameter on the GET is pulling that off of the URL and

80
00:04:48.462 --> 00:04:51.123
injecting it into our method automatically.

81
00:04:51.123 --> 00:04:54.128
Again, this is handled for us by Spring MVC.

82
00:04:54.128 --> 00:04:55.617
We're using a PathVariable.

83
00:04:55.617 --> 00:04:59.404
And since we have Long data types for our primary key,

84
00:04:59.404 --> 00:05:03.257
we're going to marshal it into a Long type and set

85
00:05:03.257 --> 00:05:05.843
the id on the incoming parameter.

86
00:05:05.843 --> 00:05:08.522
At this point, we can then use the Session repository,

87
00:05:08.522 --> 00:05:15.063
and again, it's auto built this method called getOne where you can pass in an id,

88
00:05:15.063 --> 00:05:20.343
and it returns and queries the session for that id back to the caller.

89
00:05:20.343 --> 00:05:22.207
Once we get it back, we just return that.

90
00:05:22.207 --> 00:05:25.850
And in our controller, we're auto marshaling the session,

91
00:05:25.850 --> 00:05:31.799
which will return the specific session back to the caller in JSON payload.

92
00:05:31.799 --> 00:05:35.809
For the two read portions of a CRUD, or create,

93
00:05:35.809 --> 00:05:38.328
read, update, delete REST endpoint,

94
00:05:38.328 --> 00:05:42.671
these two fill the listing and the specific id.

95
00:05:42.671 --> 00:05:43.958
We'll go ahead and pause there.

96
00:05:43.958 --> 00:05:46.366
And if you've already guessed what's going to happened next,

97
00:05:46.366 --> 00:05:49.810
you get to build out the speakers controller.

98
00:05:49.810 --> 00:05:54.526
So go ahead and pause the video and get the speaker list and a specific speaker

99
00:05:54.526 --> 00:05:58.658
controller endpoint to return a speaker back to you going.

100
00:05:58.658 --> 00:06:05.332
Then go ahead and fire the video back up and compare to what I've built myself.

101
00:06:05.332 --> 00:06:07.420
Okay, here's what I have for the speakers controller.

102
00:06:07.420 --> 00:06:10.530
I added it again to the controllers package.

103
00:06:10.530 --> 00:06:14.272
I then called the controller SpeakersController.

104
00:06:14.272 --> 00:06:17.409
I changed the RequestMapping to take routes that

105
00:06:17.409 --> 00:06:21.227
are coming for /api/v1/speakers.

106
00:06:21.227 --> 00:06:23.884
I auto wired in my SpeakerRepository,

107
00:06:23.884 --> 00:06:28.920
which gives me CRUD access and other access to my

108
00:06:28.920 --> 00:06:32.098
Speakers database table and data.

109
00:06:32.098 --> 00:06:35.846
I then created a List method, which returns all speakers if you call it.

110
00:06:35.846 --> 00:06:38.792
That is using the GET HTTP verb.

111
00:06:38.792 --> 00:06:43.829
And I created a GET method, which returns a specific speaker,

112
00:06:43.829 --> 00:06:47.195
and again, we're looking for a speaker with a particular id,

113
00:06:47.195 --> 00:06:51.672
which we'll pass in from the URL to our parameter,

114
00:06:51.672 --> 00:06:56.393
PathVariable Long id, which we can then pass to the SpeakerRepository,

115
00:06:56.393 --> 00:07:01.527
and that will return our Speaker, which will return to have JSON marshaled.

116
00:07:01.527 --> 00:07:04.785
That's it for this portion of the controller as part of the course.

117
00:07:04.785 --> 00:07:13.000
Coming up next, we'll build out the update, delete, and insert functionality for our CRUD REST endpoints.

