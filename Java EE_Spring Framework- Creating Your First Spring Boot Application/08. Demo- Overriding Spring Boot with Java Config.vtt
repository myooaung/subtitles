WEBVTT
1
00:00:01.268 --> 00:00:05.192
Doing configuration in actual Java code has been around for a while now,

2
00:00:05.192 --> 00:00:09.755
but can still be a newer paradigm shift for many Java developers.

3
00:00:09.755 --> 00:00:12.913
This concept would be equivalent to metaprogramming and many of the

4
00:00:12.913 --> 00:00:16.124
scripted languages today with the exception of DSL,

5
00:00:16.124 --> 00:00:20.531
or domain-specific language customizations.

6
00:00:20.531 --> 00:00:23.602
I like to lump all of my Java configuration together in a single package,

7
00:00:23.602 --> 00:00:27.082
so I'm going to go ahead and create a new package next to the

8
00:00:27.082 --> 00:00:34.924
controllers or a sibling to the controllers called config.

9
00:00:34.924 --> 00:00:37.796
I can now place all of my Java configuration in here and

10
00:00:37.796 --> 00:00:40.834
isolate it and know where it's all at.

11
00:00:40.834 --> 00:00:44.133
So first, I'm going to create a new Java class,

12
00:00:44.133 --> 00:00:48.555
and I'm going to call it PersistenceConfiguration.

13
00:00:48.555 --> 00:00:51.682
This configuration class can be used to customize and create

14
00:00:51.682 --> 00:00:55.483
changes or configuration in our persistence tier.

15
00:00:55.483 --> 00:00:57.768
Spring needs to know that this is a configuration class,

16
00:00:57.768 --> 00:01:00.603
so we need to annotate it as such.

17
00:01:00.603 --> 00:01:03.241
Naming it Configuration is not enough,

18
00:01:03.241 --> 00:01:06.580
so we'll add an @Configuration annotation and import that.

19
00:01:06.580 --> 00:01:08.797
Now here's kind of the strange part,

20
00:01:08.797 --> 00:01:12.119
any methods that we define in here can return bean definitions

21
00:01:12.119 --> 00:01:15.017
that will get stored in the Spring context.

22
00:01:15.017 --> 00:01:17.671
I'm going to show you how to override the data source being

23
00:01:17.671 --> 00:01:20.000
provided by the Spring Data JPA starter.

24
00:01:20.000 --> 00:01:24.186
We need to first begin with a new method definition on our class,

25
00:01:24.186 --> 00:01:26.253
and that will look like this.

26
00:01:26.253 --> 00:01:30.666
The return type of this method will be a javax.sql data source.

27
00:01:30.666 --> 00:01:33.683
When this method returns the DataSource object,

28
00:01:33.683 --> 00:01:36.680
Spring looks for it and tries to see if one already

29
00:01:36.680 --> 00:01:39.021
exists in the Spring context.

30
00:01:39.021 --> 00:01:44.412
If it does, it will replace its definition with the one that it found.

31
00:01:44.412 --> 00:01:46.668
Spring will need to know that this is a Spring bean,

32
00:01:46.668 --> 00:01:48.822
so we need to annotate the method as such.

33
00:01:48.822 --> 00:01:53.677
We could do that by adding the @Bean annotation and importing that.

34
00:01:53.677 --> 00:01:57.072
We can now provide any kind of Java code to build or

35
00:01:57.072 --> 00:01:59.478
implement this object however we want.

36
00:01:59.478 --> 00:02:01.646
The body of the method is where the configuration

37
00:02:01.646 --> 00:02:04.499
actually happens in a Java Config class,

38
00:02:04.499 --> 00:02:09.572
so I'm going to add the basic builder to the method by doing this.

39
00:02:09.572 --> 00:02:12.985
We'll first create a DataSource builder, and I'll import that.

40
00:02:12.985 --> 00:02:17.695
That's following the builder pattern, and it creates a new DataSourceBuilder.

41
00:02:17.695 --> 00:02:22.352
Next, I set the URL on there, which is like this.

42
00:02:22.352 --> 00:02:23.121
A side note,

43
00:02:23.121 --> 00:02:27.592
that URL is the same URL that we had in our application.property file.

44
00:02:27.592 --> 00:02:28.191
And then finally,

45
00:02:28.191 --> 00:02:32.267
we ask the builder to go ahead and build our DataSource and return it,

46
00:02:32.267 --> 00:02:35.562
which since we specified this is a bean,

47
00:02:35.562 --> 00:02:39.217
Spring will look for that bean in the Spring context and replace the

48
00:02:39.217 --> 00:02:42.774
DataSource definition with what we've implemented here.

49
00:02:42.774 --> 00:02:45.187
Now to prove that this is not just smoke and mirrors,

50
00:02:45.187 --> 00:02:48.691
I'm going to add a system.out into the method so that we can

51
00:02:48.691 --> 00:02:52.897
look for that on application startup so that we know that our

52
00:02:52.897 --> 00:02:54.800
bean definition got created.

53
00:02:54.800 --> 00:02:58.248
So before the return method, I simply have a System.out .println,

54
00:02:58.248 --> 00:03:04.064
which says, My custom datasource bean has been initialized and set.

55
00:03:04.064 --> 00:03:06.830
We'll want to look for this in the log startup.

56
00:03:06.830 --> 00:03:12.978
So we'll save the file, and let's go ahead and restart our application.

57
00:03:12.978 --> 00:03:15.289
So Tomcat has reported that it started on port 5000.

58
00:03:15.289 --> 00:03:17.731
That means our application is running.

59
00:03:17.731 --> 00:03:20.789
We can now scroll up and look for our message.

60
00:03:20.789 --> 00:03:24.178
And here's the message that the app set up in the

61
00:03:24.178 --> 00:03:26.258
custom Java configuration class.

62
00:03:26.258 --> 00:03:28.630
You might be thinking, why would we want to do this?

63
00:03:28.630 --> 00:03:30.913
Well, if you have to do something complex,

64
00:03:30.913 --> 00:03:33.112
like maybe you want to log something,

65
00:03:33.112 --> 00:03:35.521
maybe you want to send an email when a transaction is committed,

66
00:03:35.521 --> 00:03:40.938
or maybe you want to set up two-phase transactions or transactions across,

67
00:03:40.938 --> 00:03:44.105
say, a Mongo database and a relational database,

68
00:03:44.105 --> 00:03:47.507
you can set up anything you need to do inside of

69
00:03:47.507 --> 00:03:49.861
your Java Configuration classes.

70
00:03:49.861 --> 00:03:51.639
The more you've worked with these Configuration classes,

71
00:03:51.639 --> 00:03:54.162
the more you'll be able to get ideas and see ways

72
00:03:54.162 --> 00:03:56.416
that you can utilize this feature.

73
00:03:56.416 --> 00:04:00.822
It's certainly worth the time to get transitioned over to this paradigm.

74
00:04:00.822 --> 00:04:11.000
We're just about done exploring the world of configuration in Spring Boot, but there is one last concept, and that is creating your own auto configuration.

