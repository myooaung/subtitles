1
00:00:01,449 --> 00:00:05,380
I'm going to show you how easy it can be to deploy a Spring Boot app on Heroku.

2
00:00:05,380 --> 00:00:07,665
I know there is a lot of cloud options out there,

3
00:00:07,665 --> 00:00:10,783
and I chose Heroku for simplicity sake.

4
00:00:10,783 --> 00:00:13,767
You could easily spend some time and do the same deployment on AWS,

5
00:00:13,767 --> 00:00:17,302
or Digital Ocean, or whatever cloud that you're familiar with.

6
00:00:17,302 --> 00:00:19,754
Even if you haven't used Heroku before,

7
00:00:19,754 --> 00:00:22,543
many of the steps will be the same elsewhere.

8
00:00:22,543 --> 00:00:25,328
The takeaway should be focused on how easy the built

9
00:00:25,328 --> 00:00:28,601
Spring Boot JAR files are to work with.

10
00:00:28,601 --> 00:00:31,890
This is the main Heroku dashboard after you've created an account.

11
00:00:31,890 --> 00:00:35,666
I'm going to go ahead and create a new app by clicking on the New button in the

12
00:00:35,666 --> 00:00:39,345
upper-right-hand corner and then clicking Create new app.

13
00:00:39,345 --> 00:00:42,635
I'm going to go ahead and give the app a name on Heroku,

14
00:00:42,635 --> 00:00:46,726
and we'll call it conference-demo-dan.

15
00:00:46,726 --> 00:00:49,322
I'll go ahead and use the United States region and

16
00:00:49,322 --> 00:00:52,520
simply click the Create app button.

17
00:00:52,520 --> 00:00:53,311
At this point,

18
00:00:53,311 --> 00:00:57,756
Heroku is asking to connect to a Git repo so that it can find the app to deploy.

19
00:00:57,756 --> 00:01:00,080
I've checked my app into a Git repository,

20
00:01:00,080 --> 00:01:02,249
so I'm simply going to click on GitHub,

21
00:01:02,249 --> 00:01:06,976
and I can search for my repository by clicking on the Search

22
00:01:06,976 --> 00:01:10,750
button and then finding the appropriate repository.

23
00:01:10,750 --> 00:01:14,730
I can then click Connect, which will tie it to my cloud Heroku.

24
00:01:14,730 --> 00:01:17,818
Heroku has a couple of ways of deploying apps.

25
00:01:17,818 --> 00:01:21,404
You can auto deploy on a commit or a check-in.

26
00:01:21,404 --> 00:01:23,223
I'm going to go ahead and use the manual way,

27
00:01:23,223 --> 00:01:27,917
and select the master branch, and click Deploy Branch button.

28
00:01:27,917 --> 00:01:33,323
Heroku then auto detects that it's working with a Java application.

29
00:01:33,323 --> 00:01:36,660
And once it's done building, it will say that your app was successfully deployed.

30
00:01:36,660 --> 00:01:37,799
You can click the View here,

31
00:01:37,799 --> 00:01:41,967
or you can go up into the upper-right-hand corner and click on Open app.

32
00:01:41,967 --> 00:01:43,889
Go ahead and try that.

33
00:01:43,889 --> 00:01:44,583
And if all went well,

34
00:01:44,583 --> 00:01:48,193
you should get the status page that we built that shows the app version number.

35
00:01:48,193 --> 00:01:54,785
But check out what happens if we go to our api/v1/sessions endpoint.

36
00:01:54,785 --> 00:01:56,735
We get an error rather than a payload,

37
00:01:56,735 --> 00:01:59,240
and it says that it's unable to acquire the JDBC connection.

38
00:01:59,240 --> 00:02:01,001
If you think about it,

39
00:02:01,001 --> 00:02:04,776
this is expected because we haven't set up the Postgres database on

40
00:02:04,776 --> 00:02:09,327
Heroku so the app has no database to talk to or work with.

41
00:02:09,327 --> 00:02:13,276
If I go back to the Heroku dashboard, I can click on the Resources tab.

42
00:02:13,276 --> 00:02:15,607
This is where you can add additional services,

43
00:02:15,607 --> 00:02:18,845
and you'll notice that Heroku was smart enough that it

44
00:02:18,845 --> 00:02:20,971
already attached a Postgres database.

45
00:02:20,971 --> 00:02:25,661
Heroku sets up the database settings in the Settings section of the application.

46
00:02:25,661 --> 00:02:28,311
You can look at them here with the Reveal Config Vars.

47
00:02:28,311 --> 00:02:32,611
Set up the database URL to an environment variable

48
00:02:32,611 --> 00:02:36,109
called DATABASE_URL with the data.

49
00:02:36,109 --> 00:02:38,181
If you remember in our application though,

50
00:02:38,181 --> 00:02:44,080
we have the DATABASE_URL set to DB_URL as the environment variable.

51
00:02:44,080 --> 00:02:46,881
Before we can set up this URL in Heroku,

52
00:02:46,881 --> 00:02:50,215
you'll actually have to remember back when we created a

53
00:02:50,215 --> 00:02:52,711
custom configuration class on the Java side.

54
00:02:52,711 --> 00:02:56,747
If we go into the config folder and open up the PersistenceConfiguration,

55
00:02:56,747 --> 00:02:59,315
you'll remember that we built out a DataSource bean,

56
00:02:59,315 --> 00:03:02,672
and in here, we actually hard coded the URL.

57
00:03:02,672 --> 00:03:05,993
So hard coding things into your app is not the greatest thing.

58
00:03:05,993 --> 00:03:06,959
And in this case,

59
00:03:06,959 --> 00:03:11,962
it's going to break our deployment on Heroku because localhost with

60
00:03:11,962 --> 00:03:17,430
the 5432 port for Postgres is not going to exist.

61
00:03:17,430 --> 00:03:21,544
So I'm actually going to go ahead and just comment out this bean and save it,

62
00:03:21,544 --> 00:03:25,725
and I'm going to check this back into the Git

63
00:03:25,725 --> 00:03:29,840
repository and have Heroku re-pull it.

64
00:03:29,840 --> 00:03:31,728
Before I have Heroku re-pull that,

65
00:03:31,728 --> 00:03:35,604
you'll notice that we need to modify this to match what we

66
00:03:35,604 --> 00:03:37,179
have in our application properties URL,

67
00:03:37,179 --> 00:03:43,222
so I'm going to simply add a variable here called DB_URL,

68
00:03:43,222 --> 00:03:48,215
and I'm going to copy the database URL into it.

69
00:03:48,215 --> 00:03:53,021
Now that the DB_URL is set and the Git repo has been updated to comment

70
00:03:53,021 --> 00:03:56,161
out our persistence bean in the Java configuration,

71
00:03:56,161 --> 00:04:01,092
I can come back to Deploy and simply deploy the master branch again.

72
00:04:01,092 --> 00:04:04,983
Once that's redeployed, I can jump back over to Chrome and test it out.

73
00:04:04,983 --> 00:04:07,316
This time, when we hit the sessions URL endpoint,

74
00:04:07,316 --> 00:04:11,536
we get another 500 error, but it's about the result set.

75
00:04:11,536 --> 00:04:14,647
I can check to see what the error is in my log files on

76
00:04:14,647 --> 00:04:17,564
Heroku by coming up to the View logs.

77
00:04:17,564 --> 00:04:21,693
Here, our app is telling us that the table sessions does not exist,

78
00:04:21,693 --> 00:04:22,243
and again,

79
00:04:22,243 --> 00:04:25,383
this makes sense because we have not loaded the data

80
00:04:25,383 --> 00:04:27,431
into our production database on Heroku.

81
00:04:27,431 --> 00:04:31,218
So I'm going to go ahead and pause the video and load that,

82
00:04:31,218 --> 00:04:35,296
and I'll be right back, and we can test it out again with some live data.

83
00:04:35,296 --> 00:04:37,858
Okay, I've loaded up the production database using the scripts,

84
00:04:37,858 --> 00:04:40,918
like we did when we created our own local database with

85
00:04:40,918 --> 00:04:43,551
the create tables and the create data.

86
00:04:43,551 --> 00:04:48,426
Let's go ahead and try to access our sessions endpoint again on Heroku,

87
00:04:48,426 --> 00:04:52,006
and you'll notice that we now have all of our payloads.

88
00:04:52,006 --> 00:04:55,365
Okay, so here's to summarize what's happened.

89
00:04:55,365 --> 00:04:58,855
Heroku auto detected our Java Spring Boot app,

90
00:04:58,855 --> 00:05:02,928
it ran the Maven package, it installed the Postgres database for us,

91
00:05:02,928 --> 00:05:06,317
and it deployed it all to a URL that was accessible.

92
00:05:06,317 --> 00:05:09,011
All that we had to do was to load the database and make sure

93
00:05:09,011 --> 00:05:11,950
that the app could connect to it properly.

94
00:05:11,950 --> 00:05:14,136
If you've ever fussed with getting a Tomcat container

95
00:05:14,136 --> 00:05:17,214
set up and then accessible publicly, deployed your app,

96
00:05:17,214 --> 00:05:18,965
and get your database set up,

97
00:05:18,965 --> 00:05:23,691
you can appreciate how easy some of this cloud stuff is making app development.

98
00:05:23,691 --> 00:05:31,000
Now that I just put down the old way of deploying apps, let's take a look at what needs to happen to build a good old WAR file.

