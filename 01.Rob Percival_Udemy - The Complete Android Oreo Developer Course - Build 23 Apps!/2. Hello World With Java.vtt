WEBVTT
1
00:00:00.480 --> 00:00:05.010
So welcome back and congratulations once again for making your first Android app in the last section

2
00:00:05.270 --> 00:00:09.090
and I hope you're looking forward to learning about Java in more detail.

3
00:00:09.150 --> 00:00:16.170
So Java is quite an old language created by Sun Microsystems now Oracle in 1995 but it's still very

4
00:00:16.170 --> 00:00:22.530
much in active use today not only in Android applications but learning Java will allow you to make server

5
00:00:22.530 --> 00:00:28.830
based applications as well as desktop applications for both Windows and Mac Minecraft for example was

6
00:00:28.830 --> 00:00:34.220
written in Java as well as a number of business applications that are used very widely around the world.

7
00:00:34.500 --> 00:00:39.570
So learning it not only will allow you to make Android apps but open up a number of different avenues

8
00:00:39.570 --> 00:00:41.510
for you as well.

9
00:00:41.550 --> 00:00:47.820
It's also what's known as an object oriented language which will allow you to learn that type of language

10
00:00:47.820 --> 00:00:48.660
as well.

11
00:00:48.690 --> 00:00:52.320
So it's a really worthwhile language to learn.

12
00:00:52.320 --> 00:00:57.480
Now you'll notice here that I'm in my browser and not in Android studio and that's where we're going

13
00:00:57.480 --> 00:01:03.690
to be spending the most of our time in this section mostly because every time I want to run a bit of

14
00:01:03.690 --> 00:01:08.490
code and show you what it does I don't want to have to compile an Android app and wait for it to display

15
00:01:08.490 --> 00:01:09.840
on the phone.

16
00:01:09.840 --> 00:01:14.280
So I've chosen borow x y dot com.

17
00:01:14.280 --> 00:01:20.070
So I go there on your computer now and you should see pretty much exactly this page if by any chance

18
00:01:20.420 --> 00:01:25.440
this Web site isn't available by the time you're watching this course there are a number of other Java

19
00:01:25.470 --> 00:01:27.390
compilers out there.

20
00:01:27.390 --> 00:01:31.740
And indeed if you don't like the one that I've chose then feel free to just Google online Java compiler

21
00:01:32.100 --> 00:01:35.300
and you'll find a bunch that you can use them.

22
00:01:35.370 --> 00:01:39.960
They all do basically the same thing but I'll show you just a few reasons why I think this one is worth

23
00:01:40.380 --> 00:01:41.930
using.

24
00:01:41.940 --> 00:01:48.480
Firstly you've got the nice code view and output view which is what you're generally going to want when

25
00:01:48.480 --> 00:01:54.680
you're doing some code but also you've got the ability to save and share your code.

26
00:01:54.690 --> 00:02:02.440
So before we even write any applications let's register for the Web site.

27
00:02:02.890 --> 00:02:04.990
So just fill in your details here.

28
00:02:05.530 --> 00:02:10.660
I'm going to use rope rope Percival took her to U.K. put in Alias.

29
00:02:10.660 --> 00:02:13.230
So this is what will appear on your account.

30
00:02:13.510 --> 00:02:19.000
So I'll just call myself Sir Percival and then I'm going to use the last pass to generate a password.

31
00:02:21.140 --> 00:02:22.990
Obviously you can just type one in there if you like.

32
00:02:23.060 --> 00:02:26.740
Well except the terms and conditions and then enter the capture

33
00:02:29.790 --> 00:02:30.610
OK.

34
00:02:30.650 --> 00:02:31.200
There we go.

35
00:02:31.210 --> 00:02:35.690
So I just need to confirm my email address.

36
00:02:35.740 --> 00:02:39.690
You don't need to see me doing that so I've just done that and now I'm going to click continue.

37
00:02:39.970 --> 00:02:40.890
And there we go.

38
00:02:41.200 --> 00:02:42.470
So now I'm locked in.

39
00:02:42.760 --> 00:02:47.410
And now I can save all my programs so that's going to be a really useful thing for you to be able to

40
00:02:47.410 --> 00:02:48.690
do as you go along.

41
00:02:48.700 --> 00:02:53.210
Each program you make you can save and then go back and view it and edit it later.

42
00:02:53.530 --> 00:02:59.260
And useful for both of us is when you have any problems that you can't figure out then you can just

43
00:02:59.440 --> 00:03:03.990
share your saved program by clicking get you l here.

44
00:03:04.450 --> 00:03:12.880
So if I just put some text in there for example and then click get you Arel then I'm given a u r l which

45
00:03:13.270 --> 00:03:14.170
I can share.

46
00:03:14.320 --> 00:03:19.030
So if you want to post something in the forums then you can post it using that you r l and then we'll

47
00:03:19.030 --> 00:03:23.160
all be able to see and run your code and try and tell you what's wrong.

48
00:03:23.200 --> 00:03:30.770
So that's a really useful feature and that's why I've chosen to use this site to practice our Java.

49
00:03:31.270 --> 00:03:33.840
All right but enough introduction.

50
00:03:33.940 --> 00:03:38.430
Let's get straight in and create our Hello World app.

51
00:03:38.830 --> 00:03:46.420
Now another handy feature of this Java editor is that we've got a number of kind of templates of code

52
00:03:46.420 --> 00:03:49.660
that we can look at and just import straight away.

53
00:03:49.660 --> 00:03:51.740
So I'm going to import.

54
00:03:51.970 --> 00:03:53.740
Hello world.

55
00:03:53.740 --> 00:03:54.640
There we go.

56
00:03:55.030 --> 00:03:57.350
So let's just get rid of Untitled there.

57
00:03:57.610 --> 00:04:02.890
Now some of these keywords and structures will be reasonably familiar to you as we use them in the last

58
00:04:02.890 --> 00:04:03.460
section.

59
00:04:03.760 --> 00:04:07.730
But now as I said previously we're going to look at them in much more detail.

60
00:04:08.080 --> 00:04:12.060
So first of all let's just click Start up here to see what this does.

61
00:04:12.220 --> 00:04:13.230
You might be able to guess.

62
00:04:13.270 --> 00:04:21.430
It prints hello world to the console as you can kind of guess that line might achieve for you.

63
00:04:21.490 --> 00:04:28.160
So what's going on here why is this set up like it is it's not just simple print to the console line.

64
00:04:28.210 --> 00:04:30.670
We've got a load of other code as well.

65
00:04:30.670 --> 00:04:32.850
So let's take it step by step.

66
00:04:32.890 --> 00:04:41.430
So this first line here it creates a class called Hello world and that class is public.

67
00:04:41.500 --> 00:04:43.970
We actually don't need that word public there.

68
00:04:44.020 --> 00:04:52.190
If I get rid of that and then run it again everything works fine but it's conventional to put it in

69
00:04:52.520 --> 00:04:57.140
and it just defines the access level of this class.

70
00:04:57.140 --> 00:05:01.400
So the class can be accessed from any way in our app which doesn't really make much sense when we've

71
00:05:01.400 --> 00:05:02.910
only got such a tiny page here.

72
00:05:02.930 --> 00:05:06.800
But if you imagine you have a load of scripts and a load of different places in your app you might want

73
00:05:06.800 --> 00:05:11.150
to keep some areas of it hidden from others essentially.

74
00:05:11.510 --> 00:05:13.230
So what's a class you might be asking.

75
00:05:13.370 --> 00:05:16.860
Well it's one of the things that will become much clearer as the course goes on.

76
00:05:16.970 --> 00:05:23.500
But to give you a brief introduction a class is like a template what's known as an object.

77
00:05:23.540 --> 00:05:27.220
So my usual way of explaining this is to think about in terms of computer games.

78
00:05:27.500 --> 00:05:33.540
So let's say you've got a computer game that has some ghost characters in it.

79
00:05:35.520 --> 00:05:42.040
What you might want to do with these guys characters is create a class called Ghost and then within

80
00:05:42.040 --> 00:05:46.560
that class you have a load of code that defines a ghost.

81
00:05:46.720 --> 00:05:51.490
So it might define how much it damages the character when the character comes into contact with the

82
00:05:51.490 --> 00:05:52.070
ghost.

83
00:05:52.120 --> 00:05:54.900
It might define how the ghost moves around the screen.

84
00:05:54.900 --> 00:05:58.500
It might define an image that matches what the ghost looks like.

85
00:05:58.720 --> 00:06:05.470
Essentially it's a template to create a ghost then later on in your code whenever you want to create

86
00:06:05.470 --> 00:06:06.100
a ghost.

87
00:06:06.130 --> 00:06:12.040
You can do that using this class and that's all we're doing really well.

88
00:06:12.050 --> 00:06:19.010
Defining a type of object and that's the basis of object oriented programming which is what we're doing

89
00:06:19.070 --> 00:06:20.820
when we work with Java.

90
00:06:21.530 --> 00:06:26.870
So just to recap that a class is a template to create a certain type of object.

91
00:06:26.990 --> 00:06:32.450
For example a character or a ghost in a computer game.

92
00:06:32.450 --> 00:06:34.420
So what are we doing here then.

93
00:06:34.730 --> 00:06:41.630
Well here we're really just creating a class because we have to do any java program has to start with

94
00:06:41.630 --> 00:06:43.260
a class definition.

95
00:06:43.340 --> 00:06:52.920
For example I try and remove that code and then run it the provided class name is invalid because there

96
00:06:52.920 --> 00:06:54.560
isn't one essentially.

97
00:06:54.650 --> 00:06:58.130
So I'm going to commands to get back to where we are.

98
00:06:58.150 --> 00:07:03.600
You can use controls and of course to undo anything that you do in Windows as well.

99
00:07:03.930 --> 00:07:10.440
So essentially that is what you need to start whenever you're making a Java program.

100
00:07:10.540 --> 00:07:16.190
You need to define a class and call it whatever you like and then you have some curly brackets.

101
00:07:16.270 --> 00:07:18.660
And that's where your code for that class is going to go.

102
00:07:20.130 --> 00:07:21.020
OK.

103
00:07:21.690 --> 00:07:30.840
So then we have a other bit of code which is this line here which is something that we've seen a little

104
00:07:30.840 --> 00:07:31.470
of.

105
00:07:31.710 --> 00:07:34.340
We haven't worked with this particular method.

106
00:07:34.790 --> 00:07:40.890
So this is the main method and a method by the way is just a function by another name.

107
00:07:40.890 --> 00:07:46.380
So when we're working in object oriented programming we talk about methods rather than functions and

108
00:07:46.380 --> 00:07:51.160
they are just chunks of code that do something like display hello world for example.

109
00:07:51.180 --> 00:07:52.720
So don't be afraid of the word method.

110
00:07:52.830 --> 00:07:55.970
It just means a chunk of code that does something.

111
00:07:56.100 --> 00:08:03.000
So every Java program again has to have a main method and essentially that method is what is going to

112
00:08:03.000 --> 00:08:06.990
run when the java program is executed.

113
00:08:08.320 --> 00:08:10.030
And we've got a few keywords here.

114
00:08:10.030 --> 00:08:16.180
Two of which we're familiar with one we're not so public again just means that this main method is going

115
00:08:16.180 --> 00:08:18.740
to be accessible from anywhere in our program.

116
00:08:19.740 --> 00:08:24.810
Voit we've seen before means that the main method won't return anything.

117
00:08:24.810 --> 00:08:27.720
So just to remind you you might have a function that doubles a number.

118
00:08:27.710 --> 00:08:31.700
For some reason and that function will then return something.

119
00:08:31.800 --> 00:08:34.860
If you send the number 4 to it it will return the number 8.

120
00:08:34.920 --> 00:08:37.820
If your time and the number 10 it'll return the number 20.

121
00:08:38.040 --> 00:08:40.920
But this method is not returning anything.

122
00:08:40.920 --> 00:08:47.040
So we put voice to then and the new keyword that we haven't seen before is static and that's slightly

123
00:08:47.040 --> 00:08:50.740
tricky to define So I'm just going to quickly go back to my ghost example.

124
00:08:51.200 --> 00:08:53.250
So let's say we have our goes to class

125
00:08:58.970 --> 00:09:01.460
so when I create a ghost.

126
00:09:01.490 --> 00:09:03.590
That ghost is alive presumably.

127
00:09:03.770 --> 00:09:07.330
But if it gets killed by the character then it will become dead.

128
00:09:07.550 --> 00:09:13.400
So I might have a variable that says whether this ghost is alive or dead and that that variable would

129
00:09:13.400 --> 00:09:16.640
be specific to each ghost that I create.

130
00:09:16.640 --> 00:09:18.770
So that's not an instance.

131
00:09:18.770 --> 00:09:24.890
So each instance of that goes to class whenever I create a ghost that will have its own property of

132
00:09:24.890 --> 00:09:26.830
whether it's alive or dead.

133
00:09:26.990 --> 00:09:34.100
But also I might have the damage rating of a ghost which might be the amount of life that the character

134
00:09:34.100 --> 00:09:39.500
loses when it comes into contact with the ghost and I might want that to be fixed for all ghosts for

135
00:09:39.500 --> 00:09:40.180
all time.

136
00:09:40.190 --> 00:09:48.650
As long as this game is being run so if that was the case I would want that variable to be static so

137
00:09:48.650 --> 00:09:50.180
that's what static means.

138
00:09:50.390 --> 00:09:56.270
Essentially it's related to the ghost class rather than each instance of the ghost.

139
00:09:56.270 --> 00:09:58.350
Each specific ghost.

140
00:09:59.060 --> 00:10:05.420
So that makes sense if not if it didn't quite then go back and listen to it again or have a quick google

141
00:10:05.690 --> 00:10:10.240
and just google what does static mean in Java.

142
00:10:10.340 --> 00:10:11.650
That's another reason to learn Java.

143
00:10:11.660 --> 00:10:16.220
By the way because it's a very well established language almost every question you could possibly imagine

144
00:10:16.220 --> 00:10:19.700
has already been asked and answered on line probably several times.

145
00:10:19.700 --> 00:10:21.650
So there's loads of information out there.

146
00:10:21.740 --> 00:10:23.210
When you Google it.

147
00:10:23.960 --> 00:10:27.710
So that's what our static keyword means here.

148
00:10:28.190 --> 00:10:32.350
But really you don't need to fully understand what's going on there.

149
00:10:32.360 --> 00:10:39.190
The main point is that every Java program needs a main method and that needs to be defined like this.

150
00:10:41.410 --> 00:10:45.580
OK so now we're just looking at this part.

151
00:10:45.590 --> 00:10:55.730
So this is the variables that are going to be passed to the main method and those in this case are an

152
00:10:55.730 --> 00:10:57.730
array of strings.

153
00:10:57.740 --> 00:11:02.410
Now don't worry too much about what an array is we're going to look at that in a few videos time.

154
00:11:02.840 --> 00:11:07.970
But the name of the variable is called OGs and that can be changed.

155
00:11:07.970 --> 00:11:14.180
We could change it to arguments would be fine and if we run that it would still work without any problems.

156
00:11:14.180 --> 00:11:17.690
But the convention is to cool it.

157
00:11:18.710 --> 00:11:26.700
And essentially the args are some particular values that you might want to set when you run the program.

158
00:11:26.930 --> 00:11:31.210
So I might want to tell the program my name for example and I would send it the name Rob.

159
00:11:31.410 --> 00:11:35.000
I might want to tell it my age Papin that you fool.

160
00:11:35.450 --> 00:11:40.550
So that's not relevant to us at all as Android Developer it's not going to be manually setting OGs when

161
00:11:40.550 --> 00:11:44.170
we run apps but it is part of Java.

162
00:11:44.180 --> 00:11:47.020
So it's good to be aware of what it's doing.

163
00:11:47.300 --> 00:11:48.050
All right.

164
00:11:48.050 --> 00:11:54.410
We're nearly that so more or less understand what that line is doing now.

165
00:11:54.450 --> 00:12:01.170
The basic summary is that this is the line that defines the method or chunk of code that runs when the

166
00:12:01.170 --> 00:12:04.000
program itself is run.

167
00:12:04.300 --> 00:12:06.660
And then this last line then is something completely new.

168
00:12:06.820 --> 00:12:08.220
But it's fairly straightforward.

169
00:12:08.230 --> 00:12:09.290
I hope so.

170
00:12:09.400 --> 00:12:11.690
We're using a system function here.

171
00:12:11.830 --> 00:12:13.480
And then we're out.

172
00:12:13.480 --> 00:12:15.270
So we're outputting something.

173
00:12:15.340 --> 00:12:23.620
So we use system dropped out and then print line and the line that we want to print is hello world which

174
00:12:23.620 --> 00:12:28.540
we put in double quotes there and in parentheses as well.

175
00:12:28.540 --> 00:12:36.790
And then every line in Java when have a curly bracket will have a semi-colon to show that that line

176
00:12:36.790 --> 00:12:38.100
has been completed.

177
00:12:39.420 --> 00:12:40.240
Right.

178
00:12:40.410 --> 00:12:45.610
So it's fairly trivial of course to change that from Hello World.

179
00:12:45.630 --> 00:12:47.320
Hello Rob.

180
00:12:48.090 --> 00:12:50.310
Just change the code there.

181
00:12:50.430 --> 00:12:52.070
Fantastic.

182
00:12:52.170 --> 00:12:58.640
So that's our introduction how a Java program is laid out and what the basic lines are doing.

183
00:12:58.680 --> 00:13:03.590
The challenge in this video is to essentially recreate this from scratch.

184
00:13:04.020 --> 00:13:09.570
So stare at it and try and remember in as much detail as you can and then essentially just try and get

185
00:13:09.570 --> 00:13:13.820
rid of the whole thing and rewrite it and make it a little bit interesting.

186
00:13:13.820 --> 00:13:20.010
Put something else here rather than Hello World or a robot or whatever but basically just try and remember

187
00:13:20.010 --> 00:13:22.370
this and write it out from scratch.

188
00:13:22.530 --> 00:13:29.040
Preferably telling yourself what each keyword is doing as you're writing it.

189
00:13:29.040 --> 00:13:36.560
Good luck.

190
00:13:37.040 --> 00:13:37.500
All right.

191
00:13:37.610 --> 00:13:39.030
I hope you manage that.

192
00:13:39.110 --> 00:13:42.640
I'm just going to take this three from scratch quite quickly.

193
00:13:42.650 --> 00:13:53.780
So our first step is to create a public class mostly because every Java app needs a class and that by

194
00:13:53.780 --> 00:13:58.820
default the class is normally defined to be public so it's accessible anywhere within an app.

195
00:13:59.180 --> 00:14:06.680
And this time I'm going to call this hi Rob just to change it up a little bit and then we'll have our

196
00:14:06.680 --> 00:14:10.250
curly brackets to contain the code for that class.

197
00:14:12.890 --> 00:14:18.680
And then we're going to define the method which is the chunk of code that's going to be run when the

198
00:14:18.770 --> 00:14:21.400
app itself is run or the program is run.

199
00:14:21.730 --> 00:14:29.480
And this is going to be public again so accessible from anywhere in the app is going to be static because

200
00:14:29.480 --> 00:14:35.930
we want it to be related to the class rather than any specific instance of the class that doesn't really

201
00:14:35.930 --> 00:14:39.580
make sense in this class because we're not actually creating any instances of it.

202
00:14:39.620 --> 00:14:42.010
So don't really worry about what that's doing here.

203
00:14:42.020 --> 00:14:50.820
The main thing is that we need to put the word static in when we define the main method and then void

204
00:14:50.850 --> 00:14:52.600
because it doesn't return anything.

205
00:14:52.680 --> 00:15:02.640
And then we're going to call the method main and the method is going to accept an array of strings like

206
00:15:02.640 --> 00:15:11.880
that and that array of strings is going to be called Ogg's and that's it.

207
00:15:12.740 --> 00:15:19.100
And then once again we have some curly brackets to contain inside code.

208
00:15:19.340 --> 00:15:26.420
And then finally we want to write the code to display the words Hi Rob in the console.

209
00:15:27.120 --> 00:15:33.320
And we do that by accessing the system functions system methods.

210
00:15:34.140 --> 00:15:43.080
And we want the set of output methods within that so System darte out and then we want to print a line

211
00:15:43.260 --> 00:15:56.840
say print L.N. and the line that we want to print is high up and we contain that in double quites and

212
00:15:56.840 --> 00:16:03.560
we contain the double quotes in parentheses and then a semi-colon at the end of the line.

213
00:16:03.560 --> 00:16:06.120
Fantastic.

214
00:16:06.140 --> 00:16:08.940
So let's just run that and it works fine.

215
00:16:08.960 --> 00:16:09.800
Brilliant.

216
00:16:10.100 --> 00:16:11.290
So fairly straightforward.

217
00:16:11.300 --> 00:16:16.130
All we're doing is rewriting what we saw before but hopefully that helped clarify in your mind what

218
00:16:16.130 --> 00:16:19.850
each bit of this code is doing.

219
00:16:19.850 --> 00:16:21.290
So I'm just going to say this program

220
00:16:25.090 --> 00:16:27.490
I call it hello world.

221
00:16:28.170 --> 00:16:28.750
OK.

222
00:16:30.150 --> 00:16:37.200
And then you can see that if you do that as well it's saved there and then you can edit it and publish

223
00:16:37.200 --> 00:16:38.520
it as well.

224
00:16:38.520 --> 00:16:43.740
And in the next lecture you'll see a link to this code so you'll be able to view the code for each of

225
00:16:43.740 --> 00:16:48.150
these lectures and run it and edit it and test it for yourself.

226
00:16:48.150 --> 00:16:52.230
Now the only two of course because you will have written it out yourself anyway as part of the challenges

227
00:16:52.500 --> 00:16:55.110
and as you're working your way through the videos.

228
00:16:55.350 --> 00:16:56.160
Great.

229
00:16:56.190 --> 00:16:56.730
So that's how.

230
00:16:56.730 --> 00:17:00.180
Hello world Java program completed in the next video.

231
00:17:00.180 --> 00:17:05.420
We'll see in more detail how to create and work with variables in Java.

232
00:17:05.680 --> 00:17:06.380
So you're there.
