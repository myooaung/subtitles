WEBVTT
1
00:00:01.160 --> 00:00:05.240
So we're pretty close to being done with the flappy bird game.

2
00:00:05.270 --> 00:00:14.660
The two main things that are missing are any kind of scoring and the facility to end the game when the

3
00:00:14.660 --> 00:00:17.190
user dies and then started off again.

4
00:00:17.240 --> 00:00:22.550
So we're going to sort out scoring in this video and then we'll do the kind of game management part

5
00:00:22.820 --> 00:00:24.860
in the next final video.

6
00:00:25.420 --> 00:00:29.750
So scoring is reasonably straightforward and in fact I'm going to set that as a challenge.

7
00:00:29.750 --> 00:00:37.310
So can you figure out a way to have a general scoring system so that when the bird goes through the

8
00:00:37.310 --> 00:00:44.790
gap obviously without actually colliding with the cheeps they get an extra point.

9
00:00:44.960 --> 00:00:47.200
So see if you can find a way to do that.

10
00:00:47.200 --> 00:00:47.910
Best of luck.

11
00:00:53.590 --> 00:00:57.400
All right now with this one I'm definitely not saying that the way I'm going to do it is the best way.

12
00:00:57.400 --> 00:01:00.820
And if you go away that works then that's that's perfectly great.

13
00:01:01.150 --> 00:01:07.060
But what I'm going to do is actually look at the x coordinate of these troops and I'm going to see what

14
00:01:07.060 --> 00:01:08.380
the x coordinate of the Chib is.

15
00:01:08.530 --> 00:01:15.880
And then when the tube gets to there if the user hasn't died yet then they're going to get an extra

16
00:01:15.880 --> 00:01:16.460
point.

17
00:01:17.740 --> 00:01:28.780
So the way I'm going to deal with that is by having a score variable and this will be an integer score

18
00:01:28.900 --> 00:01:30.960
which is initially 0.

19
00:01:32.230 --> 00:01:32.770
And then

20
00:01:35.900 --> 00:01:44.060
while we're checking the x coordinate of the tubes I'm going to check to see if any of them are have

21
00:01:44.060 --> 00:01:47.890
the left coordinate at the center of the screen.

22
00:01:48.350 --> 00:01:52.370
Now I'm not going to check for exactly equal to the center of the screen because remember we're moving

23
00:01:52.370 --> 00:01:54.120
these four pixels at a time.

24
00:01:54.380 --> 00:01:56.230
So it might not get that.

25
00:01:56.360 --> 00:02:03.360
So I have to check to see if it's less than the center of the screen.

26
00:02:03.720 --> 00:02:05.710
So let's see how we're going to do that.

27
00:02:06.270 --> 00:02:07.030
OK.

28
00:02:07.350 --> 00:02:17.010
So recently straightforwardly we can look at Cube X to get the x coordinate of the left hand side of

29
00:02:17.390 --> 00:02:18.500
the particular cheap.

30
00:02:18.630 --> 00:02:24.570
And then we want to check whether that's less than the center of the screen.

31
00:02:24.570 --> 00:02:29.980
So that is GDX graphics dark get with

32
00:02:33.220 --> 00:02:38.150
so simply we could say score plus plus.

33
00:02:38.320 --> 00:02:43.240
Now of course that in itself is not going to work very well because that score is going to get very

34
00:02:43.240 --> 00:02:48.400
high very quickly because every time this runs if a cube is on the left hand side of the screen it's

35
00:02:48.400 --> 00:02:49.780
going to add to the score.

36
00:02:49.930 --> 00:02:55.090
So as always there's a number of ways round this but what I'm going to do is keep track of which Choop

37
00:02:55.120 --> 00:02:59.330
is how active score.

38
00:02:59.370 --> 00:03:03.020
So the next one that we're expecting to come in essentially.

39
00:03:03.510 --> 00:03:11.030
So let's have an I'll call it scoring cube.

40
00:03:11.800 --> 00:03:19.410
And initially the first scoring Chib is going to be the zeroth tube.

41
00:03:19.450 --> 00:03:27.560
So instead of checking all the cheeps we only check for the next one the scoring one.

42
00:03:27.920 --> 00:03:30.550
And now we don't need to put it in the loop either.

43
00:03:30.590 --> 00:03:37.010
We only need to check for one say scoring cheap.

44
00:03:37.130 --> 00:03:41.950
So it's also more efficient because we're not doing it four times so we'll add 1 to the score.

45
00:03:41.960 --> 00:03:47.030
If that happens and then we also add 1 to scoring cheap.

46
00:03:47.030 --> 00:03:54.060
If it's less than 4 so if scoring cheap is less than four

47
00:03:59.130 --> 00:04:02.370
scoring cheap plus plus helps

48
00:04:05.870 --> 00:04:10.760
scoring cheap goes back to zero.

49
00:04:11.300 --> 00:04:13.910
So we just looping round them round.

50
00:04:14.010 --> 00:04:18.320
So we'll start with the scoring Chib of 0 so we'll check for that one and then that want to get there

51
00:04:18.320 --> 00:04:23.070
first and then as soon as it does start looking for the score and cheap of one.

52
00:04:23.120 --> 00:04:26.860
So that will mean that the score is only incremented by 1 each time.

53
00:04:27.140 --> 00:04:32.750
And actually instead of four Let's change that to number of chips.

54
00:04:32.760 --> 00:04:34.240
So it's a bit more flexible.

55
00:04:34.710 --> 00:04:35.790
OK.

56
00:04:35.790 --> 00:04:37.980
So let's just log the score each time

57
00:04:44.910 --> 00:04:54.970
and then score and we'll need to convert that to a string and a couple of quick fixes in this code.

58
00:04:55.070 --> 00:05:01.470
This should be get over to you because we want the scoring cube to be to the left of the middle of the

59
00:05:01.470 --> 00:05:02.050
screen.

60
00:05:02.310 --> 00:05:11.220
And also we want scoring to be less than the number of chips minus one because scoring cheap is going

61
00:05:11.220 --> 00:05:15.140
to go to 0 1 2 3 0 1 2 3 etc..

62
00:05:16.610 --> 00:05:23.810
We don't want it to be able to ever get to 4 because we don't have a fourth to visit where we have 0

63
00:05:23.840 --> 00:05:27.720
1 2 and 3 Chib great.

64
00:05:27.770 --> 00:05:39.080
So now we should find that the score is low but each time we get past one of the groups.

65
00:05:39.240 --> 00:05:42.540
So there was a test from before is looking promising.

66
00:05:42.790 --> 00:05:44.370
So let's give it a try.

67
00:05:47.630 --> 00:05:53.750
Say there's a score of 1 perfect score of two etc..

68
00:05:56.420 --> 00:05:58.010
3 billion.

69
00:05:58.070 --> 00:06:00.540
So that's all it can get.

70
00:06:00.560 --> 00:06:06.470
So in this video I'm also going to show you how we can display the score on the screen and then we'll

71
00:06:06.470 --> 00:06:12.160
finally look at the game over screen in the final video.

72
00:06:12.470 --> 00:06:13.760
So that's pretty straightforward.

73
00:06:13.910 --> 00:06:17.590
In GDX we'll do it down with the rest of our rendering.

74
00:06:18.020 --> 00:06:21.230
And we want the score to be in front of everything else.

75
00:06:21.230 --> 00:06:29.910
So I'm going to pop it here now to write the text with the GDX we need to create a font.

76
00:06:29.930 --> 00:06:32.370
Now I'm just going to use the default font.

77
00:06:32.510 --> 00:06:35.040
But we do need to set that up.

78
00:06:35.810 --> 00:06:37.240
So we'll do that here.

79
00:06:37.470 --> 00:06:40.490
So all right bitmap font

80
00:06:43.510 --> 00:06:50.370
and quality font regather and along with everything else we'll set up here.

81
00:06:50.370 --> 00:07:04.730
So Funt is a new bitmap font and I'm just going to use the default font and as I said whoops equals

82
00:07:06.650 --> 00:07:15.410
and then I'm going to set two characteristics of this Funt I'm going to set the color and it's just

83
00:07:15.410 --> 00:07:16.560
going to be white.

84
00:07:17.120 --> 00:07:20.640
It's a very simple colored and white.

85
00:07:20.660 --> 00:07:24.470
And then I'm going to set the size or scale.

86
00:07:24.710 --> 00:07:30.890
And we do that actually in Funt top get data set scale.

87
00:07:31.580 --> 00:07:37.230
And I found a scale of 10 to work pretty well.

88
00:07:38.840 --> 00:07:39.730
OK.

89
00:07:40.430 --> 00:07:47.430
Then we just get down to Bachche drawing and I'm going to draw it.

90
00:07:47.520 --> 00:07:50.360
There's going to be at the bottom left of the screen.

91
00:07:50.360 --> 00:07:54.750
So we take our font and we draw.

92
00:07:54.860 --> 00:08:00.560
And you can see that we start off by stating the batch and then the string that we want to draw and

93
00:08:00.560 --> 00:08:09.580
then the x and y position so the batch of course is just the same batch that we're using for everything

94
00:08:09.580 --> 00:08:10.420
else.

95
00:08:10.600 --> 00:08:22.080
And then we want to take that string value of school as the actual text that's going to go on the screen.

96
00:08:22.240 --> 00:08:32.620
And then I'm going to go for 100 100 so that should give me something at the bottom left of the screen.

97
00:08:32.620 --> 00:08:43.280
So simple is that we've created the bitmap font up here with specified the size and color just there.

98
00:08:43.670 --> 00:08:50.930
And then we've actually drawn it down in the rendah method.

99
00:08:50.930 --> 00:08:57.290
So let's take a look and there we go you can see our number is there but it's lower than we expected

100
00:08:57.850 --> 00:09:03.320
and I think what's actually going on there is that the y coordinate that we give here is actually the

101
00:09:03.320 --> 00:09:06.020
top left of the

102
00:09:10.970 --> 00:09:12.830
text label that we're using.

103
00:09:12.830 --> 00:09:19.250
So I'm just going to increase that to 200 to give that a better look rather than having it on the bottom

104
00:09:19.250 --> 00:09:20.430
of the screen.

105
00:09:20.850 --> 00:09:21.500
There we go.

106
00:09:21.680 --> 00:09:23.170
So I like that position.

107
00:09:23.450 --> 00:09:31.000
We can now play the game and enjoy it while it lasts because now we can play as long as we like.

108
00:09:31.040 --> 00:09:35.370
And whatever happens we won't die.

109
00:09:35.450 --> 00:09:37.970
So that's what we're going to change in the final video.

110
00:09:37.970 --> 00:09:44.300
We're going to enable the collision detection to actually detect a collision in that it will end the

111
00:09:44.300 --> 00:09:44.660
game.

112
00:09:44.690 --> 00:09:52.540
When the head hits one of the cheaps and obviously give the use of the opportunity to play again.

113
00:09:53.330 --> 00:09:54.500
I'll see you then.
