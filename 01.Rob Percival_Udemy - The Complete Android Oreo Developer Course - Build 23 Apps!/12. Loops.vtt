WEBVTT
1
00:00:00.620 --> 00:00:03.580
So I hope you enjoyed making the higher or lower.

2
00:00:03.670 --> 00:00:09.230
We're now back in borowe x y to look at two more important programming constructs.

3
00:00:09.230 --> 00:00:12.080
The first of which is the loop.

4
00:00:12.080 --> 00:00:19.170
So I'm just going to close down those windows and create a new one with some hello world code.

5
00:00:22.240 --> 00:00:25.760
And then just say that.

6
00:00:25.880 --> 00:00:27.170
We're ready to go.

7
00:00:30.250 --> 00:00:31.030
All right.

8
00:00:31.630 --> 00:00:37.540
So a loop is simply a way of running the same chunk of code over and over again and again that might

9
00:00:37.540 --> 00:00:42.080
be controlling the behavior of a character that repeats again and again in an app.

10
00:00:42.100 --> 00:00:47.080
It might be displaying the contents of an array that contains a bunch of the user's photos.

11
00:00:47.110 --> 00:00:48.090
Something like that.

12
00:00:48.190 --> 00:00:52.480
It's very fundamental to programming and there's a number of different ways that we can do it in Java

13
00:00:52.740 --> 00:00:55.660
and we're going to look at three of them here in this video.

14
00:00:56.320 --> 00:01:00.610
So the first one is very simple and it's known as a WHILE loop.

15
00:01:00.940 --> 00:01:06.110
So let's pretend that we want to print out the numbers 1 to 10 on the console.

16
00:01:06.220 --> 00:01:08.680
So nice and simple we could of course just print those out.

17
00:01:08.770 --> 00:01:13.190
But then if we wanted to change that to print out the numbers 1 to 100 that would take a very long time.

18
00:01:13.210 --> 00:01:16.260
So a loop allows us to do that with minimal code.

19
00:01:16.840 --> 00:01:26.230
So we're going to start by creating an integer which I'll call X and initially X will be set to 1 and

20
00:01:26.230 --> 00:01:34.630
this is going to be our counter variable that counts up from 1 to 10 and then we're going to use the

21
00:01:34.720 --> 00:01:36.040
Y all keyword.

22
00:01:36.490 --> 00:01:48.850
And we're going to continue doing how loop as long as X is less than or equal to 10.

23
00:01:49.250 --> 00:01:56.510
So that statement means while X is less than or equal to 10 fairly straightforward and then we just

24
00:01:56.510 --> 00:02:04.700
have our brackets say we're going to do whatever's inside these curly brackets as long as X is less

25
00:02:04.700 --> 00:02:11.190
than or equal to 10 and I think that we're getting today is print x to the console.

26
00:02:11.420 --> 00:02:20.660
So system out print line and we just want to print X that's it.

27
00:02:20.700 --> 00:02:24.000
Aware that if you run that code now think about what's going to happen.

28
00:02:27.250 --> 00:02:31.000
Hopefully you realize that this is going to go on forever and ever and ever because X is going to remain

29
00:02:31.000 --> 00:02:36.350
one and probably crash your browser or give you some kind of error.

30
00:02:36.820 --> 00:02:43.480
So what we actually want to do is add one to X and there's two ways we can do that the longhand way

31
00:02:43.480 --> 00:02:53.680
of doing it is to use the command x is equal to x plus one which will just increment X by one or we

32
00:02:53.680 --> 00:02:57.970
can use a nice shortcut X plus plus.

33
00:02:58.000 --> 00:03:02.230
So this set up is used in a number of coding languages so you may well have seen it before but this

34
00:03:02.230 --> 00:03:05.970
is how it works in Java and whenever you want to add one to a number.

35
00:03:06.010 --> 00:03:10.690
Generally I would recommend using X plus plus just because it's shorter and easier to use than X equals

36
00:03:10.690 --> 00:03:12.750
x plus one.

37
00:03:12.760 --> 00:03:13.680
So let's take a look.

38
00:03:15.980 --> 00:03:16.890
There we go.

39
00:03:17.060 --> 00:03:18.680
Nice and easy.

40
00:03:18.680 --> 00:03:20.880
So one two three four five six seven eight nine ten.

41
00:03:21.290 --> 00:03:22.910
So here's a quick challenge for you.

42
00:03:22.970 --> 00:03:27.100
Can you print just the even numbers from 1 to 10.

43
00:03:27.320 --> 00:03:31.160
So just the numbers between 1 and 10 inclusive.

44
00:03:31.570 --> 00:03:31.940
Go for it

45
00:03:37.900 --> 00:03:40.560
if you figured it out as a number of different ways to do it.

46
00:03:40.560 --> 00:03:44.570
Probably the simplest is to change the command here.

47
00:03:44.580 --> 00:03:50.610
So we're printing two times x to the console rather than just X and that's going to give us 2 4 6 8

48
00:03:50.670 --> 00:03:51.350
etc..

49
00:03:51.630 --> 00:03:55.120
But that of course would take us all the way to 20 and we won't.

50
00:03:55.470 --> 00:03:57.910
They even numbers from 1 to 10.

51
00:03:57.930 --> 00:04:04.640
So we just change x to go up to and include five.

52
00:04:04.830 --> 00:04:07.590
Hope you manage that two four six eight ten.

53
00:04:07.590 --> 00:04:08.690
There we go.

54
00:04:09.390 --> 00:04:11.130
So that's a while loop.

55
00:04:11.400 --> 00:04:17.010
The next one we're going to look at is a for loop which is very similar but it just keeps everything

56
00:04:17.010 --> 00:04:21.360
together in quite a neat way.

57
00:04:21.390 --> 00:04:25.740
I'm going to leave the wild leap there because we're going to create the same thing but in a follow

58
00:04:25.740 --> 00:04:26.830
up.

59
00:04:27.120 --> 00:04:37.140
So if you use a follow up we use the for keyword and then this time we create our counter variable inside

60
00:04:37.140 --> 00:04:38.830
the instruction for the loop.

61
00:04:38.850 --> 00:04:48.290
So this time we're going to create a variable int I'll call it y this time and we'll set it to 1 initially.

62
00:04:48.440 --> 00:04:50.650
So why is it close to 1.

63
00:04:51.090 --> 00:04:54.620
And then we use a semi-colon even though it's not quite the end of the command yet.

64
00:04:54.690 --> 00:04:57.550
It's just the end of that bit of the command.

65
00:04:57.570 --> 00:05:00.360
So initially we're going to set Y to 1.

66
00:05:00.450 --> 00:05:05.130
We're going to carry on as long as Y is less than or equal to 5.

67
00:05:05.280 --> 00:05:13.440
So exactly the same as before and each time we run the leap we're going to add 1 to Y so that y plus

68
00:05:13.440 --> 00:05:25.960
plus and that's all that we need to set up our for loop and we have our curly brackets and same as before

69
00:05:26.150 --> 00:05:38.050
we get to have system out print line Y times to there we go.

70
00:05:38.690 --> 00:05:43.730
And if we just run that we'll see that it applies to physics I tend to for six eight 10 I.

71
00:05:44.330 --> 00:05:49.730
So almost all ways you can choose whether you want to use a while loop or for loop to be honest I find

72
00:05:49.730 --> 00:05:55.070
myself using while loops most of the time but you'll probably have your favorite and you really can

73
00:05:55.070 --> 00:05:58.580
choose whichever you like depending on the situation.

74
00:05:58.580 --> 00:06:00.750
So let's just mess with these a little bit.

75
00:06:00.770 --> 00:06:03.940
I'm going to get rid of the while loop for now.

76
00:06:04.190 --> 00:06:06.540
So what if we wanted to do things in the opposite order.

77
00:06:06.700 --> 00:06:09.790
So we wanted to go 10 8 6 4 2.

78
00:06:10.310 --> 00:06:14.850
Well as you can imagine we start with why is equal to 5.

79
00:06:15.200 --> 00:06:19.230
We keep going as long as y here.

80
00:06:19.280 --> 00:06:21.430
I'm going to put a greater than zero g.

81
00:06:21.980 --> 00:06:25.370
So we keep going as long as Y is greater than zero.

82
00:06:26.090 --> 00:06:34.010
And instead of adding one to waste time we subtract one from White each time and then if we run that

83
00:06:34.610 --> 00:06:40.940
we'll find that we start off with 10 that we get and then we subtract two each time because we're subtracting

84
00:06:40.950 --> 00:06:43.590
1 but then doubling it.

85
00:06:43.880 --> 00:06:44.120
All right.

86
00:06:44.120 --> 00:06:47.650
Say I'm going to give you a couple of challenges this time you can choose which one to do.

87
00:06:47.840 --> 00:06:53.210
There's an easier challenge and then a harder challenge the easier challenge is to choose which ever

88
00:06:53.810 --> 00:07:00.100
loop system you like and display the first 10 multiples of three.

89
00:07:00.610 --> 00:07:00.940
OK.

90
00:07:00.950 --> 00:07:01.870
Fairly straightforward.

91
00:07:01.880 --> 00:07:07.820
You can do that if you like if you want a bigger challenge then create a loop that will display the

92
00:07:07.820 --> 00:07:13.490
first 10 triangular numbers and I'm not even going to tell you what the triangular numbers are part

93
00:07:13.490 --> 00:07:16.460
of the challenge is to go and find that out for yourself.

94
00:07:16.480 --> 00:07:20.330
So if you want a nice basic challenge go for the first time multiples of three if you want more of a

95
00:07:20.330 --> 00:07:26.510
challenge then create a loop to display the first 10 triangular numbers.

96
00:07:26.510 --> 00:07:27.540
Whichever one you go for.

97
00:07:27.620 --> 00:07:28.540
Good luck.

98
00:07:28.950 --> 00:07:29.300
Giffard

99
00:07:36.880 --> 00:07:37.660
all right.

100
00:07:37.930 --> 00:07:44.590
Well I'm going to go for a follow up and I'm going to do it slightly differently to the way we did it

101
00:07:45.280 --> 00:07:45.990
before.

102
00:07:46.210 --> 00:07:48.710
I'm going to create an integer.

103
00:07:48.820 --> 00:07:49.600
I'm going to call it.

104
00:07:49.750 --> 00:07:53.600
This time is usually the counter variable that we use.

105
00:07:53.620 --> 00:08:00.190
You can use Apsley any letter or word that you like is quite common and I'm going to start off with

106
00:08:00.250 --> 00:08:09.040
I being three I'm going to keep going as long as I is less than or equal to 30 because the tenth multiples

107
00:08:09.040 --> 00:08:17.410
of three is of course 30 whoops I'm going to change that from a comma to a semicolon and then I'm going

108
00:08:17.410 --> 00:08:23.230
to use I equals I plus three has my rule.

109
00:08:23.800 --> 00:08:28.170
Every time the loop goes round there we go.

110
00:08:28.270 --> 00:08:29.200
So hopefully that makes sense.

111
00:08:29.200 --> 00:08:30.700
We start with eyes three.

112
00:08:30.790 --> 00:08:32.290
We add three every time.

113
00:08:32.290 --> 00:08:36.670
And we keep going as long as I is less than or equal to 30.

114
00:08:37.210 --> 00:08:41.620
And if we do it that way then this line just becomes system out.

115
00:08:41.680 --> 00:08:48.630
Print alone I symbolised that.

116
00:08:48.710 --> 00:08:49.250
Take a look.

117
00:08:49.250 --> 00:08:53.060
3 6 9 12 fantastic all the way up to 13.

118
00:08:53.210 --> 00:09:00.110
So whichever way you did that well them for the tougher challenge then let's get rid of that and we

119
00:09:00.110 --> 00:09:03.600
want to now print the first 10 triangular numbers.

120
00:09:03.710 --> 00:09:11.120
So I hope you did something like googled triangular numbers and if you didn't know before the triangle

121
00:09:11.120 --> 00:09:15.950
numbers are numbers that represent triangles or triangles can easily be made from.

122
00:09:15.950 --> 00:09:19.570
So we start with 1 3 6 10.

123
00:09:20.030 --> 00:09:25.260
And the key thing about triangle numbers is they the difference between them goes up by 1 each time.

124
00:09:25.280 --> 00:09:30.770
So for the first Wrangler number to the second we add two from the second to the third we at three from

125
00:09:30.770 --> 00:09:31.580
the third to the fourth.

126
00:09:31.580 --> 00:09:33.830
We add four cetera et cetera.

127
00:09:34.250 --> 00:09:40.240
So there's a great number of ways that we could do this because I used a full leap last time round.

128
00:09:40.250 --> 00:09:43.310
I'm going to use a while loop this time.

129
00:09:43.940 --> 00:09:53.810
So I start by defining my X will start with x is equal to 1.

130
00:09:54.120 --> 00:10:01.640
And this time I'm going to keep going as long as X itself is less than or equal to a 10.

131
00:10:02.360 --> 00:10:06.760
So X is not going to be my triangular number.

132
00:10:07.190 --> 00:10:12.080
X is going to be my count variable and that helps because I don't know what the tenth triangular number

133
00:10:12.080 --> 00:10:12.260
is.

134
00:10:12.270 --> 00:10:14.250
And if I do it this way I don't need to know.

135
00:10:14.420 --> 00:10:17.260
At least not while I'm writing the code.

136
00:10:17.720 --> 00:10:22.930
So let's not forget to increment X at the end of that portion of the loop.

137
00:10:22.940 --> 00:10:28.540
Otherwise it will go on forever and then I'm going to create another integer.

138
00:10:29.330 --> 00:10:37.100
I'm going to call it triangular number and my first triangular number is equal to 1.

139
00:10:37.340 --> 00:10:39.020
So I'll save that then.

140
00:10:39.230 --> 00:10:41.720
And then in my loop I'm going to

141
00:10:44.540 --> 00:10:47.750
print triangular number

142
00:10:50.870 --> 00:10:52.660
to the console.

143
00:10:52.930 --> 00:10:57.210
So so far this is just going to print one 10 times.

144
00:10:57.290 --> 00:11:03.860
So to make this into the triangle the numbers remember I need to add on to first time three the next

145
00:11:03.860 --> 00:11:08.320
time for the next time five the next time etc..

146
00:11:09.050 --> 00:11:17.660
So if I go down below the point where I've incremented X say X the first time round is now 2 and then

147
00:11:17.660 --> 00:11:19.870
it's going to be three and then four and then five.

148
00:11:20.060 --> 00:11:25.650
And that is of course the number that I need to add to triangular number to get the next triangular

149
00:11:25.700 --> 00:11:26.450
number.

150
00:11:27.020 --> 00:11:30.640
So I can just use triangular number.

151
00:11:30.810 --> 00:11:33.260
He calls what it was before.

152
00:11:33.300 --> 00:11:40.730
So triangular number plus X and then next time round when it loops round it will print the new triangular

153
00:11:40.730 --> 00:11:44.780
number which will be the next one in the sequence.

154
00:11:44.780 --> 00:11:45.650
That's it.

155
00:11:45.650 --> 00:11:46.610
That's my solution.

156
00:11:46.610 --> 00:11:49.310
Let's just have a look and make sure that that works.

157
00:11:49.310 --> 00:11:53.060
1 3 6 10 15 21:28 fantastic.

158
00:11:53.060 --> 00:11:56.450
Those are indeed the first 10 triangular numbers.

159
00:11:57.100 --> 00:11:57.480
Great.

160
00:11:57.500 --> 00:11:59.630
I hope you manage to do one of those two challenges.

161
00:11:59.660 --> 00:12:04.500
Particular Congratulations if you managed to do the trickier one.

162
00:12:04.520 --> 00:12:09.320
Now let's get rid of that because I'm going to show you the third type of leap and that is looping through

163
00:12:09.320 --> 00:12:11.140
the contents of an array.

164
00:12:11.570 --> 00:12:13.670
And that's a really useful thing to be able to do.

165
00:12:13.680 --> 00:12:19.310
Do you use the example that I said earlier it have an array of uses photos and display all of those

166
00:12:19.310 --> 00:12:20.440
using a loop.

167
00:12:20.750 --> 00:12:22.310
So very many challenge for you.

168
00:12:22.310 --> 00:12:27.170
Can you create an array containing the names of the people in your family.

169
00:12:27.350 --> 00:12:29.260
So just three or four if you've got more.

170
00:12:29.260 --> 00:12:34.630
Feel free to put them in but just three or four names to be working with.

171
00:12:34.630 --> 00:12:35.310
Go for it.

172
00:12:42.480 --> 00:12:44.240
I remembered how to do that.

173
00:12:44.600 --> 00:12:51.220
So they're strings and we use the square brackets to show that we want to create an array

174
00:12:54.520 --> 00:12:59.860
I'm going to call my family members and then we said equal t and

175
00:13:02.570 --> 00:13:06.240
we can't use curly brackets to create the array.

176
00:13:06.620 --> 00:13:10.200
And here I go.

177
00:13:10.220 --> 00:13:19.610
So Rob Keston told me and Ralphy and then a semi-colon.

178
00:13:20.060 --> 00:13:24.610
So hopefully you remember that construct from last video.

179
00:13:24.710 --> 00:13:32.210
Now to loop through that's one thing we could do would be to use a for loop and just keep going as long

180
00:13:32.210 --> 00:13:33.130
as we were in the loop.

181
00:13:33.140 --> 00:13:35.400
But there's a much quicker way of doing it.

182
00:13:35.600 --> 00:13:40.220
And that's to use what you might know as a foreach loop.

183
00:13:40.280 --> 00:13:44.250
So it just loops through everything in the array.

184
00:13:44.300 --> 00:13:51.860
So we do that is we use our full command and then we want to create a variable that will be the name

185
00:13:52.310 --> 00:13:54.000
each time round.

186
00:13:54.080 --> 00:13:57.290
Each time we go through a particular member of the array.

187
00:13:57.500 --> 00:13:58.990
So that's going to be a string

188
00:14:01.630 --> 00:14:11.170
and I'll call it name and we're going to get it from the array family members.

189
00:14:11.710 --> 00:14:16.990
So that's a new kind of construct that we haven't seen before and it's quite specific to this particular

190
00:14:16.990 --> 00:14:18.430
set up so for.

191
00:14:18.580 --> 00:14:25.120
And then we create our variable name which is a string and we're going to get that from the family members

192
00:14:25.330 --> 00:14:28.930
array by looping through its.

193
00:14:29.040 --> 00:14:37.050
And then we can access the variable name in the middle of the loop just in the usual way.

194
00:14:37.710 --> 00:14:47.920
So system it's print line and name that's it.

195
00:14:51.310 --> 00:14:52.650
So let's take a look.

196
00:14:52.660 --> 00:14:53.160
There we go.

197
00:14:53.290 --> 00:14:59.680
So that loops through the whole of the array and allowed us to access each value within it.

198
00:14:59.710 --> 00:15:03.460
The last thing I want to show you is how to do this with an array list.

199
00:15:03.520 --> 00:15:05.490
So a fun little challenge for this video.

200
00:15:05.560 --> 00:15:11.080
Can you change this code so instead of creating an array like we've got here it creates an array list

201
00:15:11.080 --> 00:15:18.280
called family members and then adds your family members to that list and then run the code and see what

202
00:15:18.280 --> 00:15:20.140
happens.

203
00:15:20.140 --> 00:15:21.090
Good luck.

204
00:15:27.630 --> 00:15:29.740
All right I hope you saw what happened.

205
00:15:30.120 --> 00:15:32.930
And you got some kind of error message.

206
00:15:33.690 --> 00:15:41.520
So to create our array list just like we did in the previous video we would use list and then family

207
00:15:43.230 --> 00:15:49.630
members and that's a new array list.

208
00:15:51.630 --> 00:15:54.250
You're very familiar.

209
00:15:54.580 --> 00:15:59.040
Before we get any now Sierra's let's make sure that we import what we need.

210
00:15:59.660 --> 00:16:05.010
So the torch you tell don't stop.

211
00:16:05.630 --> 00:16:07.980
And then we add our members to our list.

212
00:16:08.060 --> 00:16:13.980
So family members taught.

213
00:16:15.470 --> 00:16:21.110
And then Rob and I'm just going to copy that so you don't have to watch me type it four times.

214
00:16:24.660 --> 00:16:25.350
Keston

215
00:16:28.300 --> 00:16:32.160
me roughly.

216
00:16:33.020 --> 00:16:38.430
OK so you may think that all looks fine but we're going to get an aura.

217
00:16:38.630 --> 00:16:41.370
There it is so incompatible types.

218
00:16:41.480 --> 00:16:44.250
So we needed a string here when we created our name.

219
00:16:44.270 --> 00:16:50.150
But the actual variable type that we found is an object which is slightly strange because these are

220
00:16:50.150 --> 00:16:52.700
all strings you would have thought that would all be fine.

221
00:16:52.880 --> 00:16:59.990
But it's not and that's because when we created our list we didn't define what type of variable was

222
00:16:59.990 --> 00:17:01.990
going to be stored in our list.

223
00:17:02.390 --> 00:17:09.320
And that means that we end up with an object which is a kind of generic type variable which doesn't

224
00:17:09.320 --> 00:17:11.570
allow us to create a string from it.

225
00:17:11.570 --> 00:17:18.110
So to get round that we need to specify the type of variable that we want to have in our list.

226
00:17:18.590 --> 00:17:22.790
And we do that using angle brackets when we create the list.

227
00:17:23.000 --> 00:17:26.240
So we want to have strings.

228
00:17:26.240 --> 00:17:30.150
So we use list and then angle brackets with string afterwards.

229
00:17:30.590 --> 00:17:37.100
And similarly we put that in and out frailest command as well.

230
00:17:37.170 --> 00:17:38.680
So just like that.

231
00:17:38.700 --> 00:17:43.980
So now we've created exactly what we had before but this time that all strings rather than the more

232
00:17:43.980 --> 00:17:48.110
generic objects and let's now run that.

233
00:17:48.110 --> 00:17:51.450
And we should find that it all works fine that we get.

234
00:17:51.840 --> 00:17:59.010
So it is conventional If you know what type of object is going to be in your list to define it right

235
00:17:59.010 --> 00:17:59.840
at the start.

236
00:17:59.940 --> 00:18:03.490
And that then stops you having to have problems later on.

237
00:18:04.440 --> 00:18:04.850
Brilliant.

238
00:18:04.850 --> 00:18:09.260
So now we've covered our three loop types in the next video we're going to check out.

239
00:18:09.260 --> 00:18:14.670
Classes and objects in a bit more detail so hopefully you'll finally understand what all this object

240
00:18:14.700 --> 00:18:17.000
oriented programming is all about.
