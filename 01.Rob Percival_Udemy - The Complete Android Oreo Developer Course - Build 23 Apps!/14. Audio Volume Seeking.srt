1
00:00:00,900 --> 00:00:07,680
Now with that audio to our apps using the sound demo in the previous video but now we're going to extend

2
00:00:07,680 --> 00:00:14,280
that using sliders to seek backwards and forwards through our audio and to change the volume.

3
00:00:14,280 --> 00:00:18,810
And actually this involves a few new techniques within Java and Android development that we haven't

4
00:00:18,810 --> 00:00:22,980
used that so it's quite a lot to be covered in this video.

5
00:00:22,980 --> 00:00:32,550
First off we're going to find a new widget that we haven't used and that is known as the sick bar essentially

6
00:00:32,550 --> 00:00:35,410
a slide up.

7
00:00:35,590 --> 00:00:37,070
So we're going to drag it in.

8
00:00:37,090 --> 00:00:44,050
You're probably using these if you've used an Android or iOS device before.

9
00:00:46,850 --> 00:00:54,340
So we'll call this one the volume seek Bob and we'll stretch it out.

10
00:00:57,700 --> 00:00:58,910
To the edge

11
00:01:01,550 --> 00:01:02,570
of the screen.

12
00:01:06,470 --> 00:01:13,150
So in constraints left and right there that's fixed.

13
00:01:13,200 --> 00:01:13,620
Both

14
00:01:16,760 --> 00:01:23,190
too it will change the width to match the constraints.

15
00:01:24,530 --> 00:01:29,840
OK so if we just run that and see how the slider behaves we should be able to just drag it back and

16
00:01:29,840 --> 00:01:30,320
forth

17
00:01:33,790 --> 00:01:37,350
obviously we might be able to control anything with it as yet.

18
00:01:37,720 --> 00:01:43,880
You may have forgotten the top constraint but you can see at least that is the effect that we want.

19
00:01:44,680 --> 00:01:53,410
So our first challenge after we've had it back in the top constraint is to do something when the user

20
00:01:53,410 --> 00:01:56,370
drags that slider along.

21
00:01:57,100 --> 00:02:00,460
So let's add in some code to control it.

22
00:02:00,970 --> 00:02:01,530
OK.

23
00:02:01,660 --> 00:02:12,130
So we do this in the concreate method and we're first going to find Ceiba and we'll call it volume

24
00:02:14,970 --> 00:02:21,020
control and we'll use good old fine V by ID.

25
00:02:21,080 --> 00:02:22,640
ID dot

26
00:02:25,200 --> 00:02:33,450
volume to predict is no kicking in successfully at the moment.

27
00:02:33,850 --> 00:02:34,740
That's OK.

28
00:02:36,200 --> 00:02:38,810
Volume seek by and

29
00:02:42,300 --> 00:02:52,900
we'll cast it to seek above and then we take our volume control SIKMA and we set and on Seek bar change

30
00:02:53,010 --> 00:02:58,000
listner which is exactly what you might think it is.

31
00:02:58,040 --> 00:03:04,560
It listens for a change in the CGC by waits until the user moves the bar and then calls this method.

32
00:03:05,210 --> 00:03:13,130
And within that method we want to define a new on Seek bar change listener.

33
00:03:13,760 --> 00:03:17,030
And you can see that gives us 3 handy methods.

34
00:03:17,300 --> 00:03:19,360
One is on progress changed.

35
00:03:19,430 --> 00:03:21,900
That's the one we're going to be most interested in.

36
00:03:22,100 --> 00:03:25,540
But we've also got on start tracking touch and on stop tracking touch.

37
00:03:25,540 --> 00:03:30,660
So that's when the user touches the Zeba and that's when they stop touching MiSeq about.

38
00:03:30,680 --> 00:03:32,770
For our purposes those are pretty irrelevant.

39
00:03:32,780 --> 00:03:34,910
We only want to know when they change the seat about.

40
00:03:35,060 --> 00:03:41,100
But in some cases you might want to do something when the user starts touching or stops.

41
00:03:41,100 --> 00:03:47,890
OK so now let's just do a quick log to make sure everything looking OK.

42
00:03:54,790 --> 00:04:01,500
So first we'll use the tags seek part changed but then we'll try to get the value of the Seeker.

43
00:04:01,990 --> 00:04:04,740
You can see we've got an integer.

44
00:04:04,880 --> 00:04:11,540
I bet that's actually the value of the Sikh bar.

45
00:04:12,250 --> 00:04:17,480
So if we convert that to a string we'll be able to see it's value

46
00:04:20,530 --> 00:04:25,110
in the logs every time we move it.

47
00:04:25,680 --> 00:04:26,720
Let's take a look.

48
00:04:26,730 --> 00:04:30,880
I play my ball will be in the right place now as well.

49
00:04:30,890 --> 00:04:32,680
It looks a lot better.

50
00:04:36,980 --> 00:04:40,830
Just select the right device

51
00:04:45,060 --> 00:04:50,970
and they you can see it's changing has really got up and down and it changes from zero all the way up

52
00:04:50,970 --> 00:04:55,870
to 100.

53
00:04:55,900 --> 00:04:59,010
OK so that's the basic way to interact with sick ball.

54
00:04:59,050 --> 00:05:02,220
Of course we don't want to do any actual logging.

55
00:05:02,220 --> 00:05:11,380
We want to change the volume and we do that first by defining an Audio Manager which enables us to manage

56
00:05:11,650 --> 00:05:12,080
the audio

57
00:05:17,330 --> 00:05:23,820
more define it so that we can access it in any of these methods and then setting the volume is actually

58
00:05:23,820 --> 00:05:24,940
pretty straightforward.

59
00:05:25,260 --> 00:05:32,410
We just take out all Audio Manager and we set the stream volume.

60
00:05:32,520 --> 00:05:37,000
You can see there's lots of other things you can control when you're working with Orio.

61
00:05:37,130 --> 00:05:38,530
Don't play around with those.

62
00:05:38,940 --> 00:05:45,440
But for our purposes we just want to set the stream volume and we need to put an integer in there.

63
00:05:45,780 --> 00:05:51,990
Now the difficulty is these integer is not a number from 0 to 100.

64
00:05:51,990 --> 00:05:56,420
And in fact it varies from device to device what the maximum volume is.

65
00:05:56,430 --> 00:06:01,820
So we need to establish that before we can set it.

66
00:06:02,070 --> 00:06:03,290
So we'll do that.

67
00:06:05,340 --> 00:06:12,900
Up here we can create an integer called max volume which is going to be equal to the maximum volume

68
00:06:13,770 --> 00:06:16,660
of the device that the app is running on.

69
00:06:17,010 --> 00:06:22,660
And we can get that from Odeo manager don't get stream max volume.

70
00:06:22,980 --> 00:06:29,400
And then there's a number of different maximum volumes that you might want to access all of which are

71
00:06:29,400 --> 00:06:31,220
fairly self-explanatory.

72
00:06:31,740 --> 00:06:42,850
We want the music max volume and then we can just set the maximum value for the CGC bar to be whatever

73
00:06:43,030 --> 00:06:44,760
the max volume is.

74
00:06:45,220 --> 00:06:53,210
So take volume control to access our symbol and then set max so it won't be 100 anymore.

75
00:06:53,440 --> 00:06:56,790
It will be whatever how max volume is

76
00:07:00,390 --> 00:07:10,780
and then we can set our variables for a set stream volume and the stream type as before is stream music.

77
00:07:11,140 --> 00:07:18,180
The value that we want to set it to is all the and there are some other options that we could put in

78
00:07:18,180 --> 00:07:24,920
there but we're just going to leave that as 08.

79
00:07:24,960 --> 00:07:34,470
OK so now we should be able to use the seek bar to set the volume of the device or at least the music

80
00:07:34,470 --> 00:07:35,610
part of the device.

81
00:07:38,030 --> 00:07:43,180
Now we have a crash that let's not worry too much about it and find out what's going on.

82
00:07:43,380 --> 00:07:44,420
So in the locks

83
00:07:47,420 --> 00:07:50,010
in C we're attempting to invoke virtual method.

84
00:07:50,030 --> 00:07:53,620
Get stream max volume I no object reference.

85
00:07:53,680 --> 00:07:55,020
Aha.

86
00:07:55,520 --> 00:08:00,690
So what's going on there is I've forgotten to set up my Audio Manager.

87
00:08:00,920 --> 00:08:02,720
So I've created it as a variable.

88
00:08:02,720 --> 00:08:04,730
But up here it's just a no variable.

89
00:08:04,790 --> 00:08:07,710
It's the same era that I talked about in the previous video.

90
00:08:08,120 --> 00:08:14,570
If we had tried to pause the audio stream before we'd set it up.

91
00:08:14,570 --> 00:08:19,040
So I thought I'd leave that area in because it's quite useful to be able to look in the logs and work

92
00:08:19,040 --> 00:08:21,480
out what it is that's going wrong.

93
00:08:23,180 --> 00:08:25,400
And so to set up the audio manager

94
00:08:28,430 --> 00:08:29,270
we just use

95
00:08:31,850 --> 00:08:43,230
GET system service and then the system service that we need is the ordinary service.

96
00:08:43,680 --> 00:08:52,680
But we do need to cast that to an ordinary manager.

97
00:08:52,690 --> 00:08:53,530
All right.

98
00:08:53,530 --> 00:08:54,840
So let's try that again.

99
00:08:59,740 --> 00:09:03,740
Now we should be able to control the volume of the device

100
00:09:10,290 --> 00:09:11,510
as we get.

101
00:09:11,640 --> 00:09:13,710
I hope you had that.

102
00:09:13,730 --> 00:09:16,130
So it's definitely working it's controlling the volume.

103
00:09:16,130 --> 00:09:20,310
But obviously you've got one problem here that the slider's starting at zero.

104
00:09:20,450 --> 00:09:22,410
But the volume is not initially at zero.

105
00:09:22,640 --> 00:09:23,980
So we want to update the slide.

106
00:09:24,000 --> 00:09:33,980
So it has the initial value of the current volume So let's take that as create a variable called current

107
00:09:33,980 --> 00:09:37,120
volume.

108
00:09:37,300 --> 00:09:42,160
And as you might imagine we're going to use a fairly similar code to the line before the Audio Manager

109
00:09:42,220 --> 00:09:47,140
don't get stream volume.

110
00:09:47,500 --> 00:09:54,510
And then again the stream that we want is music.

111
00:09:54,950 --> 00:10:03,620
And then again we want to take our volume control slider and set the current position which is known

112
00:10:03,620 --> 00:10:10,040
as the progress because it's kind of a progress bar.

113
00:10:13,180 --> 00:10:13,780
There we go.

114
00:10:16,510 --> 00:10:25,560
So now when we run the app we should find that it starts off with the current volume which I think was

115
00:10:25,560 --> 00:10:27,400
at 0 rather unhelpfully before.

116
00:10:27,830 --> 00:10:28,260
That's just

117
00:10:31,300 --> 00:10:31,800
check.

118
00:10:31,800 --> 00:10:32,970
The volume is working well.

119
00:10:32,970 --> 00:10:37,820
It is.

120
00:10:38,000 --> 00:10:47,730
So we're just going to restart the app just to make sure that it does set the bar to the current volume

121
00:10:47,730 --> 00:10:49,920
level that we get.

122
00:10:50,140 --> 00:10:52,390
So it set it to 100 percent there.

123
00:10:56,280 --> 00:10:57,040
Wonderful.

124
00:10:57,060 --> 00:10:59,730
So now we have a fully working volume seek.

125
00:11:00,150 --> 00:11:06,240
Now we're going to add a second seek power which will be to actually seek back and forth through the

126
00:11:06,240 --> 00:11:12,630
sound effects or of course music or whatever sound it is that's being played.

127
00:11:16,090 --> 00:11:20,700
So that's that a second seat but I'm going to do it this way.

128
00:11:22,860 --> 00:11:24,430
Just for a bit of variety.

129
00:11:29,080 --> 00:11:35,010
At a bigger margin top so that it actually brings it down maybe even bigger than that

130
00:11:39,570 --> 00:11:42,140
maybe even bigger than that that we get.

131
00:11:44,180 --> 00:11:52,220
And we'll give it a new ID of scrubbing seek out or just scrub seek out scrubbing being a term for moving

132
00:11:52,250 --> 00:11:55,890
back and forth within a sound or piece of music.

133
00:11:55,940 --> 00:11:57,680
So a quick simple challenge for you.

134
00:11:57,740 --> 00:12:03,950
Can you set up our Scrubb seek ball so that it's displays its value in the logs when it's moved up and

135
00:12:03,950 --> 00:12:04,570
down.

136
00:12:04,670 --> 00:12:07,110
Try to do it without looking too hard.

137
00:12:07,110 --> 00:12:11,430
The code that we've got in place for the volume Ziebell go for it.

138
00:12:16,340 --> 00:12:17,030
All right.

139
00:12:17,130 --> 00:12:19,100
I like that wasn't too bad.

140
00:12:19,880 --> 00:12:21,550
I'll set it up down here.

141
00:12:22,790 --> 00:12:28,120
So as before we'll need to create a sick ball.

142
00:12:28,300 --> 00:12:30,030
Call it scrub seek but this time

143
00:12:33,230 --> 00:12:39,630
cast it to a seek by using find by ID card or ID score AB

144
00:12:46,180 --> 00:12:47,170
seek power.

145
00:12:47,470 --> 00:12:49,330
It's not finding it there or just see

146
00:12:58,030 --> 00:13:00,440
it does seem to be that fleet will pick it up

147
00:13:04,730 --> 00:13:05,570
when I run the app

148
00:13:09,300 --> 00:13:10,570
Yep hit it.

149
00:13:10,580 --> 00:13:13,430
So if you have that problem just run the app keep your fingers crossed.

150
00:13:14,830 --> 00:13:22,770
And then we'll take our Scrubb seek power and will set and seek about change Lessner which is going

151
00:13:22,770 --> 00:13:31,680
to require I knew on seek seek changelessness with those methods and when the progress is changed.

152
00:13:32,460 --> 00:13:33,780
As before log

153
00:13:36,940 --> 00:13:37,920
scrub seek

154
00:13:40,610 --> 00:13:42,090
Naved and then

155
00:13:47,970 --> 00:13:51,020
change the value to a string

156
00:13:53,690 --> 00:13:54,640
and pop it in the box

157
00:13:59,520 --> 00:14:00,920
let's have a look.

158
00:14:01,810 --> 00:14:03,810
OK here we go.

159
00:14:03,830 --> 00:14:09,940
And yet as before we get all the values pretty.

160
00:14:10,710 --> 00:14:18,270
So there are a few things we need to change to make this work well and the first is to set the maximum

161
00:14:18,270 --> 00:14:26,040
value of the Scrubb seek bar to be equal to the length of the piece of Odeo that's being played.

162
00:14:26,040 --> 00:14:33,350
So we know how to set the maximum value because we did it here.

163
00:14:33,540 --> 00:14:42,020
So we just use scrub seek power to upset Max and we want to set it to the length of the audio.

164
00:14:42,480 --> 00:14:45,790
The audio is within Media Player remember.

165
00:14:46,350 --> 00:14:51,370
So we can use Media Player and then get duration

166
00:14:55,740 --> 00:14:56,320
OK.

167
00:14:56,580 --> 00:15:01,490
So that would mean that we can scrub to the end of the song but no further.

168
00:15:01,650 --> 00:15:08,550
What makes this a little bit more complicated than the volume seek bother is that we want this to update

169
00:15:08,700 --> 00:15:14,760
as the piece of sound is being played not when the user actually interacts with it.

170
00:15:14,850 --> 00:15:19,930
So we're going to have to regularly update this as the sound is being played.

171
00:15:20,550 --> 00:15:26,540
So we need yet another new concept which is the timer.

172
00:15:26,930 --> 00:15:33,270
So time allows us to do something every secondo every minute or every hour while our app is running

173
00:15:34,950 --> 00:15:46,170
and we can grade them using new timer and at the time of class and we want to shed a lot time and there's

174
00:15:46,170 --> 00:15:50,910
lots of ways that we can do that but we want to share it at a fixed

175
00:15:58,230 --> 00:16:03,690
and within that we'll need to create a new time a task

176
00:16:07,080 --> 00:16:10,880
that that's new task which ends there.

177
00:16:11,500 --> 00:16:16,860
So we will define what we want to happen every second just before we do that.

178
00:16:16,900 --> 00:16:20,930
Define when we want the timer to start that is now.

179
00:16:21,610 --> 00:16:24,850
So 0 3 seconds 0 milliseconds in the future.

180
00:16:25,030 --> 00:16:28,010
And we wanted to run every second.

181
00:16:28,240 --> 00:16:34,570
So that is a thousand milliseconds so no delay and a period of a thousand milliseconds

182
00:16:37,180 --> 00:16:37,860
OK.

183
00:16:37,890 --> 00:16:44,910
And the thing that we want to happen is for the CGC bar to be updated to the new value of the current

184
00:16:45,630 --> 00:16:50,330
position of the media player.

185
00:16:50,460 --> 00:17:00,870
So we'll take our scrub seek but we'll set the progress to the current position of the media player.

186
00:17:03,860 --> 00:17:05,380
And there it is.

187
00:17:06,770 --> 00:17:07,380
OK.

188
00:17:07,830 --> 00:17:09,760
So these timers are really useful.

189
00:17:13,850 --> 00:17:15,920
And this is a good point to be introduced to them.

190
00:17:16,100 --> 00:17:21,450
We should now see a seatbelt move by itself as the sound is being played.

191
00:17:21,770 --> 00:17:22,830
Let's have a look.

192
00:17:25,690 --> 00:17:26,650
There it goes.

193
00:17:27,740 --> 00:17:28,790
So you can see the.

194
00:17:28,810 --> 00:17:31,420
But perhaps for our purposes.

195
00:17:31,640 --> 00:17:34,220
Every second was a little bit slower.

196
00:17:36,130 --> 00:17:41,500
So let's try perhaps every third of a second or so.

197
00:17:45,070 --> 00:17:46,000
That looks better.

198
00:17:48,690 --> 00:17:55,050
Obviously the smaller you make the period the smoother it will be but the more resource intensive your

199
00:17:55,050 --> 00:17:57,790
app will be used up battery life more quickly etc..

200
00:17:58,110 --> 00:17:59,870
It's up to you to decide.

201
00:17:59,880 --> 00:18:01,060
Balance there.

202
00:18:01,320 --> 00:18:08,460
You also might want to start the schedule when the media player actually starts playing and stop it

203
00:18:08,550 --> 00:18:11,130
when it stops playing as you won't need it.

204
00:18:11,130 --> 00:18:16,550
Then if you want your app to be really efficient but I'll leave that as a challenge for you.

205
00:18:16,560 --> 00:18:24,060
The last thing I'm going to set up here is actually make how seek but do some things so we want to affect

206
00:18:24,210 --> 00:18:26,210
the current position.

207
00:18:26,670 --> 00:18:35,580
When the Scrubb seek buy has moved back and forth and we can do that very easily using Media Player.

208
00:18:35,590 --> 00:18:44,690
Don't seek to amend the value we want it to seek t is just the value of the seek ball.

209
00:18:46,030 --> 00:18:47,530
So we can now control

210
00:18:50,950 --> 00:18:55,640
the playing of the sound with the seek ball.

211
00:18:56,950 --> 00:19:03,570
If I can grab it I would get sounds quite horrible.

212
00:19:06,210 --> 00:19:09,060
And a note that is what you might want today.

213
00:19:10,540 --> 00:19:18,880
If you heard that seeking whilst the audio is still playing sounds pretty horrendous so you might want

214
00:19:18,880 --> 00:19:26,920
to pause the playing of the audio when the user starts interacting with the fake part and then unpause

215
00:19:26,920 --> 00:19:33,490
it when they let go of the ball but only that as a fairly simple exercise for you.

216
00:19:33,490 --> 00:19:34,380
Wonderful.

217
00:19:34,600 --> 00:19:40,870
So when nearly done with with this section on animations audio and video which is going to take a brief

218
00:19:40,870 --> 00:19:47,590
detour into the world of grid layouts to enable us to create the slightly complex layout for our final

219
00:19:47,590 --> 00:19:51,100
app of this section which will be basic phrase it's.
