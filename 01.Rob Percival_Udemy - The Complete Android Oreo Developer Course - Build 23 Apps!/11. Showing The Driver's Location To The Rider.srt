1
00:00:00,570 --> 00:00:06,410
OK it's time to put everything together and connect the driver and the user.

2
00:00:06,750 --> 00:00:09,740
So let's see how are we going to do that.

3
00:00:09,750 --> 00:00:18,000
I'll start off logging in as the driver and show you a quick change that I've made so you can see all

4
00:00:18,000 --> 00:00:19,710
the requests are five further away.

5
00:00:19,710 --> 00:00:22,840
Now that's because I've updated the location.

6
00:00:23,370 --> 00:00:27,980
So let's update the as location to minus point four and 52.

7
00:00:28,140 --> 00:00:36,690
You can see of course those update automatically but we've now got a new field in the User class that

8
00:00:36,690 --> 00:00:44,040
shows the location of the driver and that's required so that the rider can see where the driver is.

9
00:00:44,040 --> 00:00:47,910
So that will be your first thing to fix and then

10
00:00:53,000 --> 00:01:02,820
if we now log in as a rider then we see our usual rider page which of course is automatically updated

11
00:01:02,910 --> 00:01:05,230
when the user moves around.

12
00:01:05,270 --> 00:01:19,320
Now let's call in Aruba for a writer and then we'll cheat slightly by updating the request manually.

13
00:01:19,320 --> 00:01:21,810
Just say logging on logging back in again.

14
00:01:21,860 --> 00:01:26,120
So I'm going to select the user name of one of our drivers.

15
00:01:26,150 --> 00:01:31,890
Is his location and then find the latest request.

16
00:01:31,890 --> 00:01:40,560
It will be that top on there and then update the driver username to that username and then if we jump

17
00:01:40,560 --> 00:01:42,550
over to our app and there we go.

18
00:01:42,660 --> 00:01:49,320
We can now see that the driver is 34 miles away and we can see both driver and rider on the map just

19
00:01:49,320 --> 00:01:51,670
like I did with the driver before.

20
00:01:52,380 --> 00:02:02,220
And then as the driver gets closer and closer we can move the driver along and see it.

21
00:02:02,260 --> 00:02:02,770
Update

22
00:02:07,580 --> 00:02:09,460
say fifty two point five

23
00:02:12,130 --> 00:02:23,500
as the driver moves in automatically updates on the app and then when the driver gets there it says

24
00:02:23,500 --> 00:02:30,420
the driver is here and a few seconds later it resets and allows the user to call another.

25
00:02:30,440 --> 00:02:37,970
But if they want to say that's how we want things to work there's quite a lot to set up then.

26
00:02:38,750 --> 00:02:45,350
So as always feel free to watch mine fashion if you like but do try and have a go yourself.

27
00:02:45,350 --> 00:02:46,340
Best of luck.

28
00:02:46,370 --> 00:02:47,050
Go for it.

29
00:02:50,920 --> 00:02:51,610
All right.

30
00:02:51,880 --> 00:03:01,710
Well I'm going to start by looking in the view requests activity on the driver side and changing our

31
00:03:01,710 --> 00:03:07,980
code so that the driver's location is saved because of course we'll need that to tell the rider how

32
00:03:07,980 --> 00:03:10,160
far the driver is away.

33
00:03:10,890 --> 00:03:20,300
So we've already got our code set up to update when the driver's location updates.

34
00:03:20,320 --> 00:03:24,240
So we need to do is save that to our pass server.

35
00:03:25,740 --> 00:03:39,800
So I'm going to say that right there in the User class for the driver themselves.

36
00:03:39,800 --> 00:03:44,900
So we just need to get the current user.

37
00:03:45,870 --> 00:03:54,280
And we're going to put a location variable and this is going to be a geo point.

38
00:03:54,890 --> 00:04:06,070
So we'll create a new pass Geo point using location to get latitude and location.

39
00:04:06,180 --> 00:04:14,140
Don't get long indeed them will simply save that in the background.

40
00:04:19,580 --> 00:04:23,350
And we wouldn't even have a callback for that as we don't particularly need to do anything when it's

41
00:04:23,350 --> 00:04:24,810
successful.

42
00:04:25,660 --> 00:04:26,250
OK.

43
00:04:28,490 --> 00:04:36,380
So let's just check that and make sure that that works that we can see the driver's location saved in

44
00:04:36,470 --> 00:04:38,260
their use class.

45
00:04:38,330 --> 00:04:39,090
And here we go.

46
00:04:39,080 --> 00:04:45,000
So let's just update the location slightly and then

47
00:04:48,090 --> 00:04:50,920
refresh our past dashboard.

48
00:04:51,360 --> 00:04:57,280
And we should with any luck see a new location Jiya point.

49
00:04:57,280 --> 00:04:57,920
There we go.

50
00:04:58,090 --> 00:04:59,950
For our driver.

51
00:05:00,460 --> 00:05:01,160
Excellent.

52
00:05:01,180 --> 00:05:06,040
So the drivers point will now be updated as he moves around.

53
00:05:06,040 --> 00:05:10,080
Now we just need to report that information back to the rider.

54
00:05:10,750 --> 00:05:20,770
So if we remember right or activity looks like this it's a Google map with our caller Nouba button at

55
00:05:20,770 --> 00:05:21,450
the bottom right.

56
00:05:21,460 --> 00:05:23,260
And then look out at the top.

57
00:05:23,300 --> 00:05:29,430
So if the driver is on their way we need a way to tell the user that that's the case.

58
00:05:29,530 --> 00:05:31,550
So I'm going to bring in a text field.

59
00:05:35,700 --> 00:05:41,720
Which will initially be blank but we'll use that to share information to the user.

60
00:05:43,370 --> 00:05:50,370
So I'll call it in for text few.

61
00:05:50,550 --> 00:05:58,520
So to do that will run a bit of code every few seconds which checks to see the latest status of request

62
00:05:59,550 --> 00:06:00,640
and we have done this before.

63
00:06:00,660 --> 00:06:01,850
But not for quite a while.

64
00:06:01,850 --> 00:06:05,580
So what we need is a handler

65
00:06:11,560 --> 00:06:14,410
called handler which is going to be a new

66
00:06:17,000 --> 00:06:21,870
handler and we want to set that up when

67
00:06:24,870 --> 00:06:28,470
the user requests a new EBA.

68
00:06:28,750 --> 00:06:30,910
So let's create our handler.

69
00:06:32,030 --> 00:06:44,360
And we want to post delayed and we want to post a new runnable which if you remember is a method that

70
00:06:44,370 --> 00:06:49,410
we can run every second five seconds minute whatever we like.

71
00:06:51,640 --> 00:06:57,160
So we put the number of milliseconds after the run method.

72
00:06:57,310 --> 00:07:00,640
And I'm going to go for every two seconds.

73
00:07:00,850 --> 00:07:02,520
I think that's about right.

74
00:07:02,590 --> 00:07:07,570
Obviously longer would mean that we would use less of the user's battery but then they would get slow

75
00:07:07,570 --> 00:07:09,010
updates as well.

76
00:07:09,100 --> 00:07:11,640
And this is going to be called from a number of different places.

77
00:07:11,650 --> 00:07:12,430
So I'm going to

78
00:07:15,910 --> 00:07:18,170
call the method check for updates

79
00:07:21,400 --> 00:07:24,280
and then we'll find out method up here.

80
00:07:29,300 --> 00:07:31,500
So here we want to do a number of things.

81
00:07:31,590 --> 00:07:37,180
And the first is to check to see whether someone has picked up this request or not.

82
00:07:38,690 --> 00:07:47,910
Which we can tell by looking for the presence of a driver username in the request object.

83
00:07:47,960 --> 00:07:53,390
So let's get the request object using pass query

84
00:07:56,330 --> 00:08:08,910
pass objects and we'll create a query ponse query to get query on the request object and we want the

85
00:08:08,940 --> 00:08:09,590
query

86
00:08:14,520 --> 00:08:19,330
where the user name is equal to the current user name.

87
00:08:19,400 --> 00:08:36,200
So past user get current user to get username and we want to find where he exists the driver username

88
00:08:42,530 --> 00:08:44,920
OK and then we'll run our query

89
00:08:50,060 --> 00:08:51,830
with a new find callback

90
00:08:56,780 --> 00:09:08,610
and then we'll check to see if he is null and objects dot size is greater than zero.

91
00:09:10,840 --> 00:09:15,340
Then we know that we've got a driver on their way.

92
00:09:19,000 --> 00:09:20,950
So we're going to take the info text view

93
00:09:23,600 --> 00:09:30,870
and update that with a user's information.

94
00:09:31,090 --> 00:09:33,810
So let's create a text field code in fact text VI

95
00:09:40,870 --> 00:09:46,400
and then we'll set it up in the on create method

96
00:09:53,320 --> 00:10:03,080
find VBIED ID taught in free text for you.

97
00:10:03,110 --> 00:10:08,360
So once we're here we're going to set in free text VI initially to just

98
00:10:11,090 --> 00:10:11,990
your driver

99
00:10:16,660 --> 00:10:18,070
is on the way.

100
00:10:18,070 --> 00:10:22,420
One other change I'm going to make here is to hide the cool uber button

101
00:10:26,150 --> 00:10:28,530
to stop the use of being able to cancel that.

102
00:10:28,550 --> 00:10:39,320
But once the drivers are on the way and I'm going to do that with set visibility to view it invisible

103
00:10:40,520 --> 00:10:41,470
OK.

104
00:10:41,860 --> 00:10:44,730
And then because we want that to happen every two seconds.

105
00:10:47,760 --> 00:10:51,210
We're going to set up Handler again

106
00:10:54,990 --> 00:10:58,930
and I'll do that whether we get an error or not.

107
00:10:59,370 --> 00:11:01,110
Once our query is finished

108
00:11:04,880 --> 00:11:06,540
and then we've got one other place

109
00:11:11,210 --> 00:11:18,120
where we want to check for updates and that's here when we started the activity.

110
00:11:18,170 --> 00:11:20,990
And we've realized that there is a request active already

111
00:11:24,320 --> 00:11:26,920
so we will run check for updates there.

112
00:11:27,090 --> 00:11:35,460
And actually here we don't need the handler so we can just run check for updates directly and we'll

113
00:11:35,460 --> 00:11:42,670
just have the handler there or that even in the check for updates method itself.

114
00:11:42,670 --> 00:11:43,840
All right.

115
00:11:44,370 --> 00:11:45,570
So let's see that an action

116
00:11:48,930 --> 00:11:59,940
will need to log in as a new rider and we'll do a bit of cheeky poking around the past dashboard to

117
00:11:59,940 --> 00:12:03,770
enable a request for a driver.

118
00:12:03,780 --> 00:12:04,770
So while we're it

119
00:12:08,320 --> 00:12:12,070
I'm going to select the user name of the one driver that has a location

120
00:12:15,960 --> 00:12:23,960
that we go and then we'll make a new request and we'll once we check that it's working will assign the

121
00:12:23,990 --> 00:12:25,420
driver to it.

122
00:12:29,950 --> 00:12:30,310
OK.

123
00:12:30,320 --> 00:12:31,600
So here we go.

124
00:12:32,270 --> 00:12:35,450
So we're currently logged in as a driver.

125
00:12:35,850 --> 00:12:37,160
So let's now log out

126
00:12:41,110 --> 00:12:44,380
and lock back in as a writer.

127
00:12:47,340 --> 00:12:50,720
And we'll call Nouba the way we currently are.

128
00:12:50,940 --> 00:12:53,060
So that seems to have been successful.

129
00:12:53,070 --> 00:13:03,210
Let's jump back over to our API and we should now get a new user There we go with just checking which

130
00:13:03,240 --> 00:13:08,440
one that was It'll be the newest one that we go at the top there.

131
00:13:09,360 --> 00:13:17,640
So now I'm going to update Dr. A user name and then jump back over and you can see that that has picked

132
00:13:17,640 --> 00:13:18,440
up already.

133
00:13:18,450 --> 00:13:22,090
So your drivers on the way and the button has disappeared.

134
00:13:22,560 --> 00:13:23,490
Excellent.

135
00:13:24,000 --> 00:13:28,440
So now we need to be a little bit clever and rather than just tell them that the drive is on the way

136
00:13:28,440 --> 00:13:32,530
we want to tell them how far away the driver is.

137
00:13:33,360 --> 00:13:44,600
So to do that we'll need to find a driver using a past query but this one is going to be a pass.

138
00:13:44,640 --> 00:13:45,420
Use a query

139
00:13:55,980 --> 00:14:08,520
and we want to find a user whose user name is equal to a driver.

140
00:14:08,570 --> 00:14:13,190
Use a name that we've just accessed here.

141
00:14:13,580 --> 00:14:23,750
So I'm going to use objects to get Siri to get that first object you could leap through but we can just

142
00:14:23,750 --> 00:14:32,530
do it this way and we want see get a string and the string we want to get is driver

143
00:14:35,120 --> 00:14:36,220
username.

144
00:14:36,600 --> 00:14:44,520
So that will get the user name of the driver that's picked up this particular request and then run our

145
00:14:44,520 --> 00:14:44,970
query

146
00:14:50,740 --> 00:14:51,500
with a new

147
00:14:55,330 --> 00:14:56,080
find Colback

148
00:15:02,510 --> 00:15:16,230
and again we'll check if he is no and objects stock size is greater than zero then we can get the drive

149
00:15:16,270 --> 00:15:26,210
location from the location go point in the user class

150
00:15:30,450 --> 00:15:45,700
say let's create a pass Geo point or call it drive or location which is going to be objects don't get

151
00:15:47,350 --> 00:15:51,070
zero we don't get past Geo point

152
00:15:55,330 --> 00:16:03,590
and this is called location and then we want to know how far away that is from our current user.

153
00:16:04,060 --> 00:16:07,090
And for that we'll need to get how users current location

154
00:16:09,720 --> 00:16:10,710
so we'll use

155
00:16:16,760 --> 00:16:18,440
our location manager

156
00:16:27,300 --> 00:16:34,240
again checking that we've got permission and because we're inside a closure here we'll need to use rider

157
00:16:34,260 --> 00:16:37,930
activity of this to refer to the activity.

158
00:16:38,400 --> 00:16:51,530
So either that's the case or we have an API level less than 26 or 23 sorry.

159
00:16:51,620 --> 00:16:53,120
Either way we're allowed to get the

160
00:16:56,720 --> 00:16:57,310
location

161
00:17:04,530 --> 00:17:07,230
and actually I don't want to request location updates.

162
00:17:07,230 --> 00:17:14,720
I want to get the last known location and we've got some code to do that down here.

163
00:17:14,740 --> 00:17:15,190
So

164
00:17:18,490 --> 00:17:23,110
copy that down.

165
00:17:23,570 --> 00:17:25,660
So we're getting the last known location.

166
00:17:25,880 --> 00:17:33,500
And as long as it's not no we're going to compare it to drive a location to do that will need to convert

167
00:17:33,500 --> 00:17:47,940
it to a geo point it will create a past year point to use a location which is going to be new past Geo

168
00:17:47,940 --> 00:17:51,260
point using last known location.

169
00:17:51,660 --> 00:17:55,940
Don't get latitude and last known location.

170
00:17:56,030 --> 00:18:00,810
Get long edgy.

171
00:18:01,610 --> 00:18:06,410
And then we can compare driver location and user location to get the distance.

172
00:18:06,410 --> 00:18:14,560
We've already done that once before in view requests activity so let's find that Kate

173
00:18:20,520 --> 00:18:21,360
and use it again.

174
00:18:21,360 --> 00:18:22,610
There it is.

175
00:18:27,340 --> 00:18:32,750
Copy that down and then back over to a writer activity

176
00:18:38,690 --> 00:18:50,370
distance in miles this time is going to be from drive a location to use the location and then we wanted

177
00:18:50,370 --> 00:18:55,700
to one decimal place and now we can update our code

178
00:18:58,720 --> 00:19:04,330
to say something rather more useful than driving on the way we can say your driver is

179
00:19:13,640 --> 00:19:15,350
distance one DP to string

180
00:19:18,680 --> 00:19:21,450
miles away.

181
00:19:25,640 --> 00:19:26,380
OK.

182
00:19:27,860 --> 00:19:30,500
So let's take a look and see if that works.

183
00:19:30,590 --> 00:19:35,300
We should now get a distance displayed to the right.

184
00:19:35,330 --> 00:19:38,010
That's updated every two seconds.

185
00:19:42,330 --> 00:19:43,130
And there we go.

186
00:19:43,260 --> 00:19:45,330
We've got the driver is 0 miles away.

187
00:19:45,720 --> 00:19:50,140
I don't think that's an error.

188
00:19:50,150 --> 00:19:52,270
I think it's just because they have the same location.

189
00:19:52,280 --> 00:19:53,750
So let's update that.

190
00:19:53,750 --> 00:19:54,390
There we go.

191
00:19:54,620 --> 00:19:57,000
So you can see that updated straightaway.

192
00:19:57,460 --> 00:20:03,470
And let's just check when we update the drive location

193
00:20:07,060 --> 00:20:09,060
if we change that to something like 54

194
00:20:12,000 --> 00:20:16,190
then can see that that's increased 236 miles away.

195
00:20:16,440 --> 00:20:17,040
Great.

196
00:20:17,370 --> 00:20:22,110
So the final thing then is to show the driver's location to the user

197
00:20:25,560 --> 00:20:33,510
and we'll do this here at the same time that we're updating the drivers distance and we'll use the same

198
00:20:33,510 --> 00:20:36,380
code that we used in the driver location activity

199
00:20:39,270 --> 00:20:40,580
so let's select

200
00:20:43,390 --> 00:20:46,210
all of that and bring it over to our right or activity

201
00:20:56,730 --> 00:21:08,170
and then just update the variable names here to show that we've using that Lyndon's.

202
00:21:08,350 --> 00:21:13,830
So for the driver location we're going to want drive a location don't get latitude

203
00:21:17,820 --> 00:21:22,080
and similarly drive a location don't get long and chief

204
00:21:25,280 --> 00:21:27,710
for the request location.

205
00:21:27,710 --> 00:21:29,710
We can use use a location up here.

206
00:21:32,570 --> 00:21:35,260
So use a location don't get latitude

207
00:21:38,740 --> 00:21:46,940
and it use a location don't get long get and then we'll set this up as before.

208
00:21:47,330 --> 00:21:55,490
But here the position is going to be driver location let alone and the title will be driver location

209
00:21:58,240 --> 00:22:00,900
and he We're going to request location.

210
00:22:00,950 --> 00:22:06,240
Len and that will be your location.

211
00:22:06,500 --> 00:22:07,770
And there we go.

212
00:22:08,390 --> 00:22:13,250
So that should now update every two seconds with the driver and the user location.

213
00:22:13,280 --> 00:22:15,260
One thing we need to now check

214
00:22:18,500 --> 00:22:23,460
is that's when the user's location updates.

215
00:22:23,870 --> 00:22:31,790
We don't want to update the map because we only want to update the map using our new update method rather

216
00:22:31,790 --> 00:22:34,840
than centering the map on the user.

217
00:22:36,080 --> 00:22:49,370
So if we have a boolean which we might call driver active we could test to see if that's false before

218
00:22:49,400 --> 00:22:52,340
doing that update.

219
00:22:52,340 --> 00:23:03,310
And then we can create our driver active Boullion which is false by default but then we'll set it to

220
00:23:03,320 --> 00:23:03,840
tree

221
00:23:06,590 --> 00:23:14,720
when we've verified that a driver is on their way.

222
00:23:15,760 --> 00:23:17,610
That we get.

223
00:23:17,890 --> 00:23:19,520
So let's try that out.

224
00:23:19,730 --> 00:23:26,150
With any luck we'll now see in the distance that the driver is away but we'll see both the driver and

225
00:23:26,450 --> 00:23:30,020
the rider nicely scaled on the writer's map.

226
00:23:32,800 --> 00:23:33,960
And there we go.

227
00:23:34,030 --> 00:23:37,130
Not the best most promising driver.

228
00:23:37,140 --> 00:23:41,250
They are still almost 200 miles away but that is the behavior that we wanted.

229
00:23:41,800 --> 00:23:43,970
Let's make our drive a little bit closer.

230
00:23:43,960 --> 00:23:46,870
That's a minus point four and fifty two.

231
00:23:46,900 --> 00:23:53,740
Let's bring our driver in if we change that.

232
00:23:53,760 --> 00:23:56,410
Fifty two and have another look.

233
00:23:56,410 --> 00:23:56,890
There we go.

234
00:23:56,890 --> 00:23:58,730
That looks a little bit better.

235
00:23:58,750 --> 00:23:59,640
Great.

236
00:23:59,650 --> 00:24:06,280
So we're pretty much that the one small thing I want to add is to test whether the driver arrives

237
00:24:09,820 --> 00:24:12,840
and then update the app accordingly.

238
00:24:13,570 --> 00:24:16,890
So we'll do that when we've got the distance in miles here.

239
00:24:17,290 --> 00:24:24,040
So we'll check to see if distance in miles is less than and I'll say no point no one.

240
00:24:24,040 --> 00:24:29,020
I'll consider that an arrival.

241
00:24:29,020 --> 00:24:31,220
Then we want to do something special.

242
00:24:31,560 --> 00:24:32,210
Otherwise

243
00:24:37,860 --> 00:24:40,370
we'll do what we did before.

244
00:24:40,710 --> 00:24:50,790
If the distance in miles is very small then first we'll update Infotech fee and set the text your driver

245
00:24:50,940 --> 00:24:52,320
is here.

246
00:24:55,020 --> 00:25:02,600
And then we'll set up a new runnable.

247
00:25:02,720 --> 00:25:07,130
In fact I'll cut that code

248
00:25:10,060 --> 00:25:11,980
and put it there.

249
00:25:12,610 --> 00:25:13,380
And also that

250
00:25:18,270 --> 00:25:18,780
will move

251
00:25:21,780 --> 00:25:25,560
the invisibility setting there as well.

252
00:25:25,560 --> 00:25:32,970
So here we're going to give them a few seconds and make it five seconds to see that their drivers here

253
00:25:33,060 --> 00:25:33,660
and then

254
00:25:36,390 --> 00:25:44,540
after that time we're going to set the visibility back to zero.

255
00:25:45,900 --> 00:25:53,990
We're going to set the text of the button to call and Uber.

256
00:25:54,100 --> 00:26:04,300
We're going to set the quest active to be false and we're going to set driver active to be false as

257
00:26:04,300 --> 00:26:04,800
well.

258
00:26:06,150 --> 00:26:15,990
And as a final thing we're going to delete the request so that it's no longer active

259
00:26:19,820 --> 00:26:22,460
and we've got that's carried here.

260
00:26:25,180 --> 00:26:26,200
So let's create

261
00:26:28,890 --> 00:26:30,150
a new quick query

262
00:26:32,990 --> 00:26:34,440
and get rid of that one.

263
00:26:34,550 --> 00:26:39,400
So that will remove all queries with that user name just in case there's more than one which they definitely

264
00:26:39,410 --> 00:26:48,470
shouldn't be but this will tidy things up if there are and then we find in background with a new find

265
00:26:48,490 --> 00:26:48,980
Colback

266
00:26:53,560 --> 00:27:00,780
and if he has no will loop through the objects

267
00:27:11,010 --> 00:27:12,930
like that and we'll delete them

268
00:27:18,400 --> 00:27:23,110
that we can say let's just try that out.

269
00:27:25,760 --> 00:27:31,280
Another option that rather than running that after five seconds might be to pop up an alert for the

270
00:27:31,280 --> 00:27:31,840
user.

271
00:27:32,210 --> 00:27:35,480
And then when they click OK resets everything.

272
00:27:35,590 --> 00:27:37,220
But they should do the trick.

273
00:27:37,790 --> 00:27:38,770
And here we go.

274
00:27:39,080 --> 00:27:43,090
So let's gradually move our driver in point four.

275
00:27:43,640 --> 00:27:46,250
Let's change our location to precisely 52.

276
00:27:49,270 --> 00:27:50,460
So that updates nicely

277
00:27:55,010 --> 00:27:56,330
and then we'll update

278
00:28:00,210 --> 00:28:08,140
our driver location and I'll try to move things around so we can see this happening more or less live

279
00:28:11,600 --> 00:28:16,410
get rid of the extended controls of the emulator.

280
00:28:16,410 --> 00:28:17,830
Here we go.

281
00:28:18,470 --> 00:28:25,620
So if we change this to no point 3 three then it gets further away.

282
00:28:25,620 --> 00:28:26,800
That's not good.

283
00:28:26,840 --> 00:28:35,220
What's also not clear and we'll have to check that in a moment so no point 3 to

284
00:28:40,170 --> 00:28:41,890
we're still getting further away.

285
00:28:41,890 --> 00:28:45,700
Let me remind myself what it was say 52 and minus no point for

286
00:28:48,850 --> 00:28:56,410
say let's say No point 3 9.

287
00:28:56,440 --> 00:28:56,840
There we go.

288
00:28:56,840 --> 00:28:59,600
So we're now very close.

289
00:28:59,640 --> 00:29:01,600
Now let's make it mine is no bueno for

290
00:29:04,480 --> 00:29:07,490
then it changes to your drive it is here.

291
00:29:08,810 --> 00:29:15,050
And after five seconds in sick it's back to cool in Aruba and the user can start the process there if

292
00:29:15,050 --> 00:29:16,640
they want.

293
00:29:17,060 --> 00:29:18,530
So just a couple of small things.

294
00:29:18,590 --> 00:29:28,290
I think we'll get rid of the label your drivers here and then we'll also set the markers to disappear.

295
00:29:29,690 --> 00:29:38,260
So first of lets get the info text view and set the text to empty.

296
00:29:38,880 --> 00:29:48,710
And then also let's find where we update the map.

297
00:29:48,750 --> 00:29:49,970
Here we go.

298
00:29:52,060 --> 00:29:54,570
And we'll use a map.

299
00:29:54,610 --> 00:29:55,450
Clear.

300
00:29:55,950 --> 00:29:56,880
And there we go.

301
00:29:57,190 --> 00:30:02,470
So that takes us to the end of our Uber app and there's always congratulations if you manage to build

302
00:30:02,710 --> 00:30:04,550
at least parts of it yourself.

303
00:30:04,750 --> 00:30:08,810
We do have a really complicated set up here with two different maps activities

304
00:30:12,020 --> 00:30:20,710
I-PASS dashboard with user classes of two different types and also a separate request class as well

305
00:30:20,920 --> 00:30:28,500
and a lot of things going on automatically either every two seconds or when the location is updated.

306
00:30:28,570 --> 00:30:33,100
So there was a lot to this app and Welden forgetting this file.

307
00:30:33,610 --> 00:30:38,360
You may be pleased to hear that we are going to move away from our park service social based apps the

308
00:30:38,440 --> 00:30:43,070
next section and we're going to learn how to make our first proper android game.

309
00:30:43,240 --> 00:30:45,890
And that is a clone of flappy bird.

310
00:30:46,270 --> 00:30:47,990
So as always take a bit of a break.

311
00:30:48,010 --> 00:30:53,240
Give yourself a pat on the back and then jump right in to the next section and I'll see you there.
