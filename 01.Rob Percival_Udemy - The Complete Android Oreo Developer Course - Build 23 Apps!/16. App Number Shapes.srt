1
00:00:00,540 --> 00:00:05,910
Congratulations on making it to the end of section 3 of The Complete Android develop because you've

2
00:00:05,910 --> 00:00:11,080
covered a lot of stuff already in the course as well as making your currency converter app.

3
00:00:11,100 --> 00:00:16,230
In the previous section in this section we've looked in Java in a lot more detail and we've covered

4
00:00:16,230 --> 00:00:22,500
variable's arrays lists maps loops we've created random numbers as well as our little higher or lower

5
00:00:22,500 --> 00:00:23,120
app.

6
00:00:23,130 --> 00:00:26,400
And then we've looked at classes as well.

7
00:00:26,530 --> 00:00:34,470
And also if statements so we're going to try and put as much of this together in this little app and

8
00:00:34,470 --> 00:00:36,690
I've called this app number shapes.

9
00:00:36,690 --> 00:00:41,640
There are two types of numbers that generally have shapes and they are triangular numbers and square

10
00:00:41,640 --> 00:00:42,550
numbers.

11
00:00:42,840 --> 00:00:48,630
And what we're going to do is create an app which allows the user to put in a number and it will tell

12
00:00:48,630 --> 00:00:55,050
them whether it's a triangular number or square number both or neither.

13
00:00:55,050 --> 00:00:59,910
Now this may not be the most useful app in the world but it will allow us to practice almost everything

14
00:00:59,970 --> 00:01:00,870
we've covered.

15
00:01:01,080 --> 00:01:06,120
And also does require you to do a little bit of searching online as well to find a couple of new techniques

16
00:01:06,120 --> 00:01:07,900
that we haven't looked at yet.

17
00:01:08,010 --> 00:01:12,530
You may even need to look up what a square number is if it's been a while since you've worked with them.

18
00:01:12,630 --> 00:01:13,440
So that's it.

19
00:01:13,470 --> 00:01:18,990
If you don't really sure where to get started then just follow along with my explanation but otherwise

20
00:01:19,320 --> 00:01:19,980
give it a go.

21
00:01:19,980 --> 00:01:26,670
Best of luck and remember to try and do it in an object oriented way with classes if you possibly can.

22
00:01:26,670 --> 00:01:34,730
Best of luck.

23
00:01:34,740 --> 00:01:35,440
All right.

24
00:01:35,700 --> 00:01:37,240
I hope you managed it.

25
00:01:37,290 --> 00:01:42,420
You may notice that I've actually settled in the browser rather than going over to Android studio.

26
00:01:42,630 --> 00:01:48,990
And that's because I'm actually going to create the logic for the app in the browser and then move it

27
00:01:49,050 --> 00:01:54,930
over into Android studio and that's slightly more straightforward for me here because I can then run

28
00:01:55,140 --> 00:01:59,270
the logic several times without having to compile the app every time.

29
00:01:59,280 --> 00:02:08,690
So let's start afresh with a new hello world program get rid of that one line that we don't want and

30
00:02:08,690 --> 00:02:13,700
then save as number shapes.

31
00:02:16,710 --> 00:02:22,980
So remember our main aim here is to work out whether a particular number is a triangle a number a square

32
00:02:22,980 --> 00:02:26,570
number neither or both.

33
00:02:26,580 --> 00:02:31,940
So let's start off with a number class.

34
00:02:32,340 --> 00:02:39,360
You may notice now that I gave you a bit of a clue as to how we might set this out in the final example

35
00:02:39,390 --> 00:02:41,160
of the previous video.

36
00:02:41,460 --> 00:02:45,980
So here's our number class which is going to have our number variable contained within it.

37
00:02:46,110 --> 00:02:49,830
And then our tests for is it a square number.

38
00:02:49,890 --> 00:02:51,710
Is it a triangular number.

39
00:02:53,590 --> 00:02:58,820
So let's start by creating a variable number

40
00:03:01,760 --> 00:03:06,010
and then I'll work first on whether it's a triangular number.

41
00:03:06,050 --> 00:03:12,950
So let's create a public method that returns a boolean

42
00:03:15,740 --> 00:03:24,510
and we'll call it is triangular.

43
00:03:25,040 --> 00:03:31,170
Now let's just remind ourselves what is a triangular number.

44
00:03:34,710 --> 00:03:35,170
Here we go.

45
00:03:35,220 --> 00:03:39,100
So it's the sequence 1 3 6 10.

46
00:03:39,150 --> 00:03:43,120
So the difference goes up by one every time.

47
00:03:43,140 --> 00:03:50,410
So the way I'm going to test for a triangular number and you can of course do this many different ways.

48
00:03:50,470 --> 00:04:04,230
I'm going to have a count of variable x int x with initials which is initially 1 and just like we had

49
00:04:04,620 --> 00:04:08,880
when we displayed the first 10 triangular numbers a few videos ago.

50
00:04:09,510 --> 00:04:17,280
I'm going to have a triangular number integer as well which will work my way up through the triangular

51
00:04:17,280 --> 00:04:18,040
numbers.

52
00:04:18,210 --> 00:04:24,400
And essentially what I'm going to do is keep generating triangular numbers until we get to the number

53
00:04:25,380 --> 00:04:29,570
and either the number will be equal to a triangular number or it won't.

54
00:04:29,790 --> 00:04:31,970
If it is then it is a triangular number.

55
00:04:32,040 --> 00:04:35,950
If it's not then it's not.

56
00:04:36,120 --> 00:04:41,560
So we want to keep going as long as so while.

57
00:04:42,320 --> 00:04:43,970
How triangular number

58
00:04:47,610 --> 00:04:54,320
is less than how number that we're working with.

59
00:04:56,610 --> 00:05:02,730
And essentially we want to keep going up the triangular numbers as long as this is the case.

60
00:05:02,730 --> 00:05:06,160
So how do we build triangular numbers.

61
00:05:08,340 --> 00:05:13,290
Well what we did before was increment our counter variable.

62
00:05:13,310 --> 00:05:27,670
So X is now 2 and then take our triangular number and add X to it.

63
00:05:27,710 --> 00:05:34,730
So this will create a series of triangular numbers and it will keep on going until either triangular

64
00:05:34,730 --> 00:05:40,600
number is greater than the number or triangular number is equal to number.

65
00:05:41,180 --> 00:05:51,420
So once we're there we can check to see if triangular number is equal to number.

66
00:05:51,470 --> 00:05:52,470
That means our number.

67
00:05:52,490 --> 00:05:57,710
Must be a triangular number because it's in the sequence of triangular numbers.

68
00:05:57,860 --> 00:05:58,910
So if that's the case

69
00:06:01,860 --> 00:06:04,230
then we guarantee return true.

70
00:06:07,100 --> 00:06:13,380
But if it's not we're going to return false

71
00:06:16,320 --> 00:06:22,790
and that's it that's how method for testing where the number is triangular or not.

72
00:06:22,850 --> 00:06:26,110
Of course we should definitely test that.

73
00:06:26,180 --> 00:06:27,200
So let's create our

74
00:06:30,300 --> 00:06:36,960
new number I'll call it my number which has a new number.

75
00:06:39,440 --> 00:06:45,140
Hopefully you're writing out this object oriented code quite smoothly now which is a big step forward

76
00:06:45,770 --> 00:06:48,480
because it's by no means easy to get to grips with.

77
00:06:49,280 --> 00:06:53,020
And then we'll set my number to number initially.

78
00:06:53,030 --> 00:06:54,900
Let's set it to a triangular number.

79
00:06:55,220 --> 00:06:57,280
So say 6 for example

80
00:07:01,340 --> 00:07:14,810
and then because we're just testing I'm going to just output the result to the locks to the console.

81
00:07:15,380 --> 00:07:29,800
So my number is triangular and then brackets and with any luck then that will return true because sex

82
00:07:29,890 --> 00:07:31,910
is indeed triangular.

83
00:07:32,710 --> 00:07:33,630
Let's take a look.

84
00:07:33,910 --> 00:07:34,410
OK.

85
00:07:34,450 --> 00:07:35,440
Looking good.

86
00:07:35,770 --> 00:07:38,220
Let's try it on a non triangular number.

87
00:07:40,710 --> 00:07:41,440
False.

88
00:07:41,480 --> 00:07:42,120
Brilliant.

89
00:07:42,210 --> 00:07:42,950
OK.

90
00:07:43,290 --> 00:07:44,530
Just a couple more.

91
00:07:44,820 --> 00:07:46,480
Ten is triangular.

92
00:07:46,930 --> 00:07:52,180
So that's true 20 isn't false.

93
00:07:52,580 --> 00:07:53,370
Fabulous.

94
00:07:53,680 --> 00:07:54,140
OK.

95
00:07:54,200 --> 00:07:57,780
So we've got our is triangular test up and running.

96
00:07:58,100 --> 00:08:01,630
Now we need to create and is square test.

97
00:08:02,060 --> 00:08:04,290
So I'm going to do that up here.

98
00:08:05,090 --> 00:08:07,420
So same as before public.

99
00:08:08,360 --> 00:08:13,790
And we're returning a boolean and we'll call it is square

100
00:08:16,480 --> 00:08:17,310
so we're ready.

101
00:08:17,320 --> 00:08:22,790
Hopefully you can see the sensibleness of keeping all this logic in one place.

102
00:08:22,870 --> 00:08:24,460
It just makes a lot of sense.

103
00:08:24,460 --> 00:08:29,870
And then when we're working down here we don't really need to refer to the logic much at all.

104
00:08:33,330 --> 00:08:38,820
Square number let's just have a quick Google is a squid number

105
00:08:41,680 --> 00:08:45,020
so square number is the product of a number multiplied by itself.

106
00:08:45,040 --> 00:08:47,550
So one is a square number because it's one times one.

107
00:08:47,630 --> 00:08:51,670
Four is a square number because it's two times t nine is a square number because it's three times three

108
00:08:51,910 --> 00:08:52,820
etc..

109
00:08:53,380 --> 00:08:58,780
So probably the best way to test whether a number is a square number or not is to find the square root

110
00:08:58,780 --> 00:09:01,540
of that number and see if it's a whole number.

111
00:09:01,990 --> 00:09:03,850
So the square root of four is two.

112
00:09:03,880 --> 00:09:09,200
For example because two teams do it four square root of 9 is 3 because three times three is nine.

113
00:09:09,220 --> 00:09:13,810
Cetera so how do we find the square root of a number.

114
00:09:14,240 --> 00:09:19,750
Well that's one thing we haven't covered yet so I would expect you to search for something like Java.

115
00:09:19,970 --> 00:09:24,170
Well you can see I've already done it just to check that it's Java.

116
00:09:24,190 --> 00:09:25,910
There's a square root method.

117
00:09:26,210 --> 00:09:26,930
Perfect.

118
00:09:26,930 --> 00:09:28,210
That's exactly what we want.

119
00:09:31,480 --> 00:09:38,530
So it looks like the method that we want is math not square square x.

120
00:09:39,140 --> 00:09:47,460
So I'm just going to copy that and jump back over now just to check that this works.

121
00:09:47,600 --> 00:09:48,340
I'm going see

122
00:09:51,550 --> 00:09:52,700
do a quick test.

123
00:09:54,390 --> 00:09:54,750
Say

124
00:09:57,880 --> 00:10:03,750
let's take the square root of my number number that we get.

125
00:10:03,790 --> 00:10:04,800
Let's take a look.

126
00:10:05,110 --> 00:10:07,440
So that should give us the square root of 20.

127
00:10:08,110 --> 00:10:08,560
OK.

128
00:10:08,620 --> 00:10:09,160
Fair enough.

129
00:10:09,190 --> 00:10:10,930
Perfectly reasonable request.

130
00:10:10,930 --> 00:10:15,200
I've said this is going to return a boolean and it doesn't say.

131
00:10:15,220 --> 00:10:23,170
Just for now returned true so that we can run our code.

132
00:10:23,440 --> 00:10:26,150
That looks like the square root of 20 to me.

133
00:10:26,250 --> 00:10:27,080
Brilliant.

134
00:10:27,100 --> 00:10:30,970
So that is exactly the function or method that we need.

135
00:10:30,970 --> 00:10:32,250
So let's copy it again.

136
00:10:34,030 --> 00:10:34,550
Here in

137
00:10:38,390 --> 00:10:40,650
so let's create I double

138
00:10:45,870 --> 00:10:48,930
the square root like that.

139
00:10:49,440 --> 00:10:52,700
And that's going to be math dot squirt.

140
00:10:52,740 --> 00:10:56,720
And here I just want to square that number.

141
00:10:58,020 --> 00:11:03,360
All right so if you're still with me the main thing I want to test about this is whether or not it's

142
00:11:03,360 --> 00:11:06,920
a whole number because if it is then we're dealing with a square number.

143
00:11:06,990 --> 00:11:09,030
If it's not then we're not.

144
00:11:09,180 --> 00:11:11,390
That's another thing we haven't worked out how to do.

145
00:11:11,780 --> 00:11:16,420
So let's do a quick google Java test.

146
00:11:16,530 --> 00:11:22,740
Well again you can see I've been there just to make sure that everything is available online or how

147
00:11:22,740 --> 00:11:25,100
to test if a double is an integer.

148
00:11:25,170 --> 00:11:28,330
That's a perfect question for us.

149
00:11:28,400 --> 00:11:31,610
So yes that's exactly what we want.

150
00:11:31,710 --> 00:11:32,450
OK.

151
00:11:33,730 --> 00:11:35,890
Let's say it looks like we use the math.

152
00:11:35,890 --> 00:11:38,750
Top floor method.

153
00:11:39,060 --> 00:11:39,520
So math.

154
00:11:39,520 --> 00:11:40,400
Top floor.

155
00:11:40,570 --> 00:11:48,130
If you don't want to read that is a method that finds the integer below the number that we're looking

156
00:11:48,130 --> 00:11:48,460
at.

157
00:11:48,460 --> 00:11:51,250
So at the moment we've got say four point four seven.

158
00:11:51,310 --> 00:11:53,700
So the integer below that is full.

159
00:11:54,010 --> 00:11:55,810
So actually that makes a lot of sense.

160
00:11:55,840 --> 00:12:01,630
If the number that we're looking at is the same as the number when rounded down then it must be an integer

161
00:12:01,840 --> 00:12:03,040
or whole number.

162
00:12:03,490 --> 00:12:06,090
So that's what we want.

163
00:12:06,090 --> 00:12:12,060
I think if we have a look at the other part that tests whether it's infinite or not which probably is

164
00:12:12,060 --> 00:12:13,290
not going to be relevant for us.

165
00:12:13,290 --> 00:12:14,700
I'm just going to leave that bit out.

166
00:12:14,790 --> 00:12:18,580
But if you want to just copy that in then it's not a major problem.

167
00:12:20,470 --> 00:12:21,310
OK.

168
00:12:23,090 --> 00:12:34,960
So this is our test so we want to test if we had one variable this time we want square root is equal

169
00:12:34,980 --> 00:12:38,440
to a math top floor of the square root

170
00:12:43,970 --> 00:12:49,660
then it is a square number so it returned true.

171
00:12:52,340 --> 00:12:53,670
If that's not the case

172
00:12:56,290 --> 00:13:00,050
returned false.

173
00:13:00,190 --> 00:13:01,420
There we go.

174
00:13:01,460 --> 00:13:07,820
So just to recap we've found the square root of our number and then we've done a test to see whether

175
00:13:07,820 --> 00:13:12,380
that number is equal to that number when it's rounded down which is just another way of saying is that

176
00:13:12,380 --> 00:13:19,490
number a whole number an integer and if it is then our original number must have been a square number.

177
00:13:19,610 --> 00:13:24,140
If not then return false OK.

178
00:13:25,540 --> 00:13:33,950
So now let's use my number is square.

179
00:13:34,780 --> 00:13:38,470
And of course we don't need anything in those parentheses anymore.

180
00:13:39,220 --> 00:13:41,630
So 20 is not a square number.

181
00:13:42,070 --> 00:13:53,590
So when we run this should give us false rah let's try a square number then nine nine is a square number

182
00:13:53,590 --> 00:13:54,970
and it's giving us true.

183
00:13:55,150 --> 00:13:56,950
Fantastic.

184
00:13:57,070 --> 00:13:58,860
I think I'll just try a couple more.

185
00:13:59,440 --> 00:14:02,790
50 is not a square number so that's false.

186
00:14:03,100 --> 00:14:08,710
But 49 is a square number and that's true.

187
00:14:08,770 --> 00:14:10,010
So that's pretty good.

188
00:14:10,480 --> 00:14:17,620
So now we've got a bunch of code that we can just copy straight into our app because it's so nicely

189
00:14:17,650 --> 00:14:18,710
set out.

190
00:14:18,760 --> 00:14:24,460
It doesn't involve any buttons or getting the value of text edit fields or anything like that.

191
00:14:24,490 --> 00:14:27,340
It's nice and clean as far as that's concerned.

192
00:14:27,340 --> 00:14:29,590
Which means we can just use it straight away.

193
00:14:29,590 --> 00:14:34,330
And of course we could copy it into another app if we wanted to use this somewhere else as well.

194
00:14:34,330 --> 00:14:39,710
So that's one of the advantages of this nice clean class structure.

195
00:14:39,760 --> 00:14:46,760
So let's take this code and make number shapes app.

196
00:14:46,850 --> 00:14:49,380
So Android studio.

197
00:14:49,950 --> 00:14:55,390
And I'm going to start in the usual way creating a new project.

198
00:14:56,310 --> 00:14:57,720
I'll call this one number shape's

199
00:15:00,500 --> 00:15:08,630
and we'll go for all the usual options.

200
00:15:08,960 --> 00:15:16,130
And as usual we'll start with creating the layout give us a bit more room

201
00:15:19,710 --> 00:15:33,470
get rid of the text view and bring in our.

202
00:15:34,090 --> 00:15:38,620
And then let's write our text.

203
00:15:38,620 --> 00:15:40,370
So say it into a number below

204
00:15:42,920 --> 00:15:49,880
to find out if there is a triangular

205
00:15:53,170 --> 00:15:58,270
number or square number or by

206
00:16:01,090 --> 00:16:06,260
having carried it nicely guys on a two lines for us.

207
00:16:08,360 --> 00:16:15,030
And I think I'll just change that to send that

208
00:16:18,050 --> 00:16:20,410
greats and

209
00:16:24,190 --> 00:16:27,240
all that top and left and right constraints.

210
00:16:29,860 --> 00:16:30,890
OK.

211
00:16:31,730 --> 00:16:33,090
And our number

212
00:16:37,440 --> 00:16:38,310
textfield

213
00:16:43,650 --> 00:16:45,460
this when I stretch out a bit bits

214
00:16:49,040 --> 00:16:53,600
and then I have the constraints make the match

215
00:17:00,550 --> 00:17:01,250
excellent.

216
00:17:01,370 --> 00:17:02,390
And finally

217
00:17:08,040 --> 00:17:18,650
bottom which we'll say test number and again we'll send to that.

218
00:17:19,310 --> 00:17:20,110
And at the constraints

219
00:17:26,750 --> 00:17:37,310
I'll add an on click method of test number and then I'll run the app while we write a bit of code.

220
00:17:38,790 --> 00:17:51,340
So as per usual let's create a method called Test number which is called by a we call the

221
00:17:55,520 --> 00:17:56,050
Laux

222
00:18:00,050 --> 00:18:00,860
button pressed

223
00:18:08,800 --> 00:18:12,780
and I'll rerun the app so I can test that.

224
00:18:13,330 --> 00:18:16,720
But I'll also copy in our number class

225
00:18:21,970 --> 00:18:30,300
without the actual code to make it run because we'll add that ourselves.

226
00:18:33,470 --> 00:18:35,990
In a minute there you go.

227
00:18:36,980 --> 00:18:38,790
OK let's just have a quick look.

228
00:18:40,570 --> 00:18:46,200
Well definitely an issue with our lay out there but let's just quickly test the button make sure that

229
00:18:46,200 --> 00:18:48,100
works every day.

230
00:18:48,150 --> 00:18:49,690
So the button works.

231
00:18:49,800 --> 00:18:52,670
What's going wrong with the layout.

232
00:18:53,640 --> 00:18:58,990
Most likely I've forgotten to add some constraints.

233
00:18:59,080 --> 00:19:02,010
We get a top constraint is needed

234
00:19:05,490 --> 00:19:07,140
for the added text.

235
00:19:10,330 --> 00:19:16,230
Lovely let's just check make sure that that is now displaying correctly much better.

236
00:19:16,230 --> 00:19:16,940
There we go.

237
00:19:17,200 --> 00:19:18,390
All right.

238
00:19:18,560 --> 00:19:26,110
So this should now be fairly quick because we've already written the code which does the work of our

239
00:19:26,110 --> 00:19:27,110
app.

240
00:19:27,820 --> 00:19:37,600
Let's just remind ourselves how we use it.

241
00:19:37,690 --> 00:19:40,910
So I'll put the code into the Test number method.

242
00:19:41,260 --> 00:19:48,400
So we create a new object called my number of the number class which is the new number.

243
00:19:48,490 --> 00:19:50,530
And then we set the number equal to.

244
00:19:50,670 --> 00:19:56,770
And this gets 49 and then we check to see if it's a square number.

245
00:19:57,310 --> 00:19:58,440
So let's do that.

246
00:19:58,450 --> 00:20:03,220
But instead of using 49 we'll use the number that the user has entered.

247
00:20:03,220 --> 00:20:06,560
So we're pretty used to doing this now.

248
00:20:11,440 --> 00:20:22,780
We're going to find the added text using find view by id and then our ID edit text and then we want

249
00:20:22,780 --> 00:20:28,890
to convert the value of the text to a number 0 to an integer to be more precise.

250
00:20:30,060 --> 00:20:32,190
So we'll take at it.

251
00:20:32,200 --> 00:20:32,630
Text

252
00:20:35,500 --> 00:20:50,920
dog get text to string and then we want to take the integer class and we want to pass integer

253
00:20:53,920 --> 00:20:55,880
from that string.

254
00:20:55,990 --> 00:20:59,760
So we're going to create an integer from the number that's been entered.

255
00:21:00,760 --> 00:21:07,800
And with any luck we'll find out whether it's a square number or not.

256
00:21:08,160 --> 00:21:08,690
That's like

257
00:21:14,350 --> 00:21:19,840
so let's take a great number first of all 25 see the number true.

258
00:21:19,890 --> 00:21:20,850
That's looking promising.

259
00:21:20,880 --> 00:21:27,990
Now let's take a number which is not a square number 26 fourths wonderful looking great.

260
00:21:31,520 --> 00:21:32,270
OK.

261
00:21:32,770 --> 00:21:39,520
So now we just need to give the user some feedback and we'll do this in our usual way with the toast

262
00:21:41,320 --> 00:21:46,930
and we'll start them by creating a message string

263
00:21:51,260 --> 00:21:53,780
and we want to test to see if

264
00:21:57,670 --> 00:22:00,730
my number is square.

265
00:22:02,250 --> 00:22:05,540
And my number

266
00:22:08,290 --> 00:22:12,060
is triangular.

267
00:22:12,270 --> 00:22:18,130
Then we want to get the message equal to where we want the number itself first of all.

268
00:22:18,270 --> 00:22:21,140
So that's the value of the added text.

269
00:22:28,560 --> 00:22:30,710
Two string.

270
00:22:30,710 --> 00:22:37,990
And in this case we want to say is square and triangular

271
00:22:43,250 --> 00:22:44,220
else.

272
00:22:45,830 --> 00:22:51,120
If my number is square.

273
00:22:51,710 --> 00:22:58,340
Now we don't need to check for triangular because if we're here we know that it's not both Square and

274
00:22:58,340 --> 00:23:00,680
triangular because we used an else.

275
00:23:00,680 --> 00:23:05,310
So if we're here and it's square then it must just be square.

276
00:23:11,180 --> 00:23:14,810
In fact I've just thought of a bit of a shortcut

277
00:23:17,530 --> 00:23:18,310
we can use

278
00:23:21,490 --> 00:23:26,080
message and then set that equal to the number urgently because we're always going to start with the

279
00:23:26,080 --> 00:23:29,280
number in our message rather than having that every time.

280
00:23:29,680 --> 00:23:33,310
And then there's a couple of ways that we could add that on.

281
00:23:33,340 --> 00:23:41,800
We could say message equals what message or it is plus that or there's a nifty way to do that.

282
00:23:42,760 --> 00:23:44,340
Plus equals.

283
00:23:44,710 --> 00:23:51,910
So that will append is square and triangular to whatever is already in the message variable.

284
00:23:51,910 --> 00:23:59,020
In this case the value of the edit text the users number goes out make everything a little bit neater

285
00:23:59,230 --> 00:24:02,030
and again easier to update and manage.

286
00:24:03,070 --> 00:24:09,980
So it is square but not triangular.

287
00:24:10,150 --> 00:24:10,780
Keep on getting

288
00:24:16,060 --> 00:24:20,550
if it's triangular then the opposite is true.

289
00:24:25,820 --> 00:24:30,530
So it's triangular but not square.

290
00:24:34,250 --> 00:24:35,180
And then finally

291
00:24:40,540 --> 00:24:48,150
if we get to here it's neither triangular nor square.

292
00:24:51,610 --> 00:24:52,510
Get the full stop that

293
00:24:55,310 --> 00:25:05,530
ranks and let's update our code to do a toast instead of a log.

294
00:25:08,970 --> 00:25:14,830
With the message and again I think we'll make this a long message.

295
00:25:17,460 --> 00:25:17,980
All right.

296
00:25:20,380 --> 00:25:23,710
That all makes sense as always.

297
00:25:23,830 --> 00:25:25,620
Quite a lot to get the hang up there.

298
00:25:25,670 --> 00:25:29,680
It might be worth just going back and relistening to the last three or four minutes if you're not sure

299
00:25:30,250 --> 00:25:31,990
how we put all that together.

300
00:25:33,080 --> 00:25:35,520
But otherwise Let's check it out and see if it works.

301
00:25:35,520 --> 00:25:41,600
Let's find a square in the first nine to nine is square but not triangular.

302
00:25:41,600 --> 00:25:42,980
That's right.

303
00:25:43,030 --> 00:25:48,150
Now it's trying to triangular number 10 triangle it up and all square.

304
00:25:48,160 --> 00:25:49,320
Excellent.

305
00:25:49,330 --> 00:25:54,770
And then let's try a number which is both triangular and square 36 for example.

306
00:25:55,250 --> 00:25:56,820
A It's got that C.

307
00:25:57,160 --> 00:25:58,560
And then one that's neither.

308
00:25:58,720 --> 00:26:01,180
Well try seven.

309
00:26:01,180 --> 00:26:03,460
Fantastic.

310
00:26:03,460 --> 00:26:06,360
Now we're just going to do one slight tweaking.

311
00:26:06,820 --> 00:26:11,010
You may have noticed with this app and indeed with a higher or lower app that we made.

312
00:26:11,200 --> 00:26:18,070
If the user presses the test number button without entering anything into the app app crashes.

313
00:26:18,150 --> 00:26:24,220
Now obviously the user shouldn't do that but it would be nice if we could offer them a friendly message

314
00:26:24,280 --> 00:26:26,660
rather than just the app crashing.

315
00:26:26,950 --> 00:26:28,970
So I'm going to suggest a way to do that.

316
00:26:30,680 --> 00:26:31,550
Here now

317
00:26:34,390 --> 00:26:36,080
test number method.

318
00:26:37,330 --> 00:26:44,350
So what we want to do is check to see whether or not the added text field is empty.

319
00:26:45,890 --> 00:26:56,600
And there's actually a really easy way to do that so if we take our text get the text in the usual way

320
00:26:56,750 --> 00:27:00,880
and then we look for is empty.

321
00:27:01,820 --> 00:27:05,550
That will tell us whether the string has a value or not.

322
00:27:07,800 --> 00:27:15,240
So if it is then let's set the message to be a certain thing.

323
00:27:15,290 --> 00:27:21,910
So what I'll do a is I'll define message up here.

324
00:27:23,900 --> 00:27:27,120
And then we'll just update it where we need to.

325
00:27:32,080 --> 00:27:42,850
Please enter a number and then if that's not the case then we'll do everything else.

326
00:27:46,440 --> 00:27:48,820
So let's just quickly check for that works.

327
00:27:54,510 --> 00:28:00,820
To find out test number it says Please enter a number of fantastic.

328
00:28:00,870 --> 00:28:04,530
So that's just a basic bit of error checking there's a lot more that we could do.

329
00:28:04,530 --> 00:28:10,070
For example if the user tries to enter a negative number that's going to cause problems or decimal but

330
00:28:10,160 --> 00:28:11,980
I'll leave that to you as a challenge.

331
00:28:12,000 --> 00:28:15,620
We will be dealing with a similar and much more complicated errors than that.

332
00:28:15,780 --> 00:28:17,550
Later on in the course of an hour.

333
00:28:17,550 --> 00:28:20,640
Once again congratulations on getting to the end of this section.

334
00:28:20,670 --> 00:28:25,590
You've learned a huge amount about programming in general and Java specifically and hopefully you'll

335
00:28:25,590 --> 00:28:30,030
be pleased to hear we'll be staying in Android studio for pretty much the rest of the course apps as

336
00:28:30,030 --> 00:28:31,070
we go along.

337
00:28:31,170 --> 00:28:38,090
And in the next section we'll be focusing on media Killy images animations and music and have that congratulatory

338
00:28:38,100 --> 00:28:40,340
cup of tea and I'll see you in the next section.
