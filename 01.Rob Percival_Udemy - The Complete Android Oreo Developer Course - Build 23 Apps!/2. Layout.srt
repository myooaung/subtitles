1
00:00:00,700 --> 00:00:05,970
Get into Chapter 4 of the complete and redevelop course in which we'll be looking at animations sound

2
00:00:06,060 --> 00:00:07,030
and video.

3
00:00:07,350 --> 00:00:11,550
But before we do that in this first video we're going to take a few moments to consider lay out in a

4
00:00:11,550 --> 00:00:16,050
bit more detail as this is primarily a development course we focus more on the code than the actual

5
00:00:16,050 --> 00:00:16,980
look of our apps.

6
00:00:16,980 --> 00:00:18,680
Of course the look is important as well.

7
00:00:18,690 --> 00:00:23,580
So in this video I'm just going to show you a few tricks to get your apps looking the way you want them.

8
00:00:23,790 --> 00:00:30,670
And first is to bring your attention to the constraint lay out in Android Studio 3 this is now the default.

9
00:00:30,840 --> 00:00:37,650
Whereas an android Studio 2 it was a relative layout and we use constraints over here to decide exactly

10
00:00:37,650 --> 00:00:39,640
where they're going to display on the screen.

11
00:00:40,110 --> 00:00:52,120
So just to clarify if I get rid of that text and bring in a button I can position this scented or near

12
00:00:52,120 --> 00:00:59,410
the margins of the screen but if I just leave it there it won't actually be centered on the app as we

13
00:00:59,410 --> 00:01:02,800
saw in a couple of the videos in the previous section.

14
00:01:03,010 --> 00:01:06,700
So it will jump to 0 0 i.e. the top left.

15
00:01:06,700 --> 00:01:16,330
So if I wanted to actually send to this I need to add left and right constraints as well as a top constraint.

16
00:01:19,490 --> 00:01:24,740
And a bottom constraint to center it in the app.

17
00:01:24,770 --> 00:01:29,030
Now if you're more familiar with relative layout we can use those instead.

18
00:01:29,030 --> 00:01:36,550
So if you look down the widget palette to layouts and you can see here we have the good old relative

19
00:01:36,550 --> 00:01:44,430
layout so we can drag that in and that will then exist within our constrained layout.

20
00:01:44,510 --> 00:01:49,750
And that just changes the rules slightly of how things are laid out within the relative layout.

21
00:01:50,090 --> 00:02:00,400
So if I now bring in a button wherever I drag it it will be positioned according to the nearest margins.

22
00:02:00,810 --> 00:02:06,720
So if I leave it there it will be positioned relative to the top left of the screen.

23
00:02:07,710 --> 00:02:11,810
Here be positioned relative to the top right et cetera.

24
00:02:12,330 --> 00:02:15,860
So that's how the default used to work in our studio.

25
00:02:15,860 --> 00:02:25,300
So if you want to get back to that you can know that you still need to add constraints for the relative

26
00:02:25,300 --> 00:02:30,890
lay out because it's within the constraint lay out its position.

27
00:02:30,910 --> 00:02:32,680
Our button near the top left

28
00:02:38,050 --> 00:02:39,140
somewhere like that.

29
00:02:39,700 --> 00:02:44,330
And now I'm going to show you the text tab at the bottom there.

30
00:02:44,380 --> 00:02:46,160
You may have noticed that and I'm wondering what it is.

31
00:02:46,210 --> 00:02:50,060
Well the text tab uses SML describe.

32
00:02:50,140 --> 00:02:54,520
Lay out there if you come from web development you might think of this a bit like an h t m l document

33
00:02:54,520 --> 00:02:57,070
describing the layout of a web page.

34
00:02:57,160 --> 00:03:02,920
And if you prefer working with text or code rather than dragging and dropping you might be more comfortable

35
00:03:02,920 --> 00:03:07,530
creating your layout using this SML and it does have integers.

36
00:03:07,660 --> 00:03:12,400
For example if I want to have a button that has exactly the same properties as this button that already

37
00:03:12,400 --> 00:03:20,500
exists rather than creating it afresh and adding all the properties I can just copy and paste the code

38
00:03:20,950 --> 00:03:21,860
for that button.

39
00:03:23,020 --> 00:03:26,840
And it will appear now you might not be able to see it there.

40
00:03:26,860 --> 00:03:34,660
That's because it's positioned relative to the relative layout i.e. the parent and it's exactly the

41
00:03:34,660 --> 00:03:38,050
same number of pixels from the top as the original button was.

42
00:03:38,050 --> 00:03:44,020
So you'd need to add for example a greater margin at the top to move it down.

43
00:03:44,020 --> 00:03:50,670
Note that when you do use copy and paste you'll get two items with the same ID which will cause a problem.

44
00:03:50,890 --> 00:03:57,420
So you'll need to change the ID of one of them for example to button to and button three.

45
00:03:57,450 --> 00:04:01,840
Now just to show you how these two relate i.e. the design and the text view.

46
00:04:02,290 --> 00:04:08,710
If for example I wanted my button to be positioned relative to the previous button rather than to the

47
00:04:08,980 --> 00:04:16,830
relative layout I can drag it around and you can see that our power now points to the button above.

48
00:04:16,830 --> 00:04:19,720
So this button is now positioned relative to the other button.

49
00:04:19,770 --> 00:04:24,890
If I move the top button down then the other button will move with it.

50
00:04:25,650 --> 00:04:32,730
And this is reflected in the text because in the original button you can see it's aligned to the left

51
00:04:32,820 --> 00:04:40,340
of the parent whereas this one is aligned to the left of button too.

52
00:04:40,980 --> 00:04:47,680
And of course you can update the attributes of your elements directly here.

53
00:04:47,810 --> 00:04:52,550
So if we wanted a full width button we could just change the width to match

54
00:04:55,420 --> 00:05:02,800
parents and we'll get a nice full width button that OK.

55
00:05:03,370 --> 00:05:07,000
So there's a lot of things you can do here a lot of ways that you can lay things out.

56
00:05:07,000 --> 00:05:08,790
It's very very flexible.

57
00:05:08,800 --> 00:05:13,780
I'm just going to show you one nice trick which will use later in the course and that is if you want

58
00:05:13,780 --> 00:05:21,490
two items next to each other centered on the screen that can be a slightly tricky thing to work out.

59
00:05:21,490 --> 00:05:23,500
In fact if you want to give it a try.

60
00:05:23,500 --> 00:05:30,490
Pause the video and try and have two buttons positioned next to each other so that they're both centered

61
00:05:30,760 --> 00:05:32,090
together on the screen.

62
00:05:32,840 --> 00:05:33,600
Give it a go.

63
00:05:36,960 --> 00:05:38,050
Did you manage it.

64
00:05:38,080 --> 00:05:43,750
Probably trickier than you thought it might be but a nice way to do it is to use this linear layout

65
00:05:43,750 --> 00:05:47,970
here which simply lays things out from left to right.

66
00:05:47,980 --> 00:05:52,110
So let's just get rid of existing buttons.

67
00:05:54,260 --> 00:05:59,770
And then bring in a horizontal linear layout.

68
00:06:01,370 --> 00:06:02,470
Centuri for now.

69
00:06:04,530 --> 00:06:10,120
We're going to change the size in a minute and then let's bring in our buttons and put them inside the

70
00:06:10,120 --> 00:06:11,070
linear layout.

71
00:06:13,620 --> 00:06:18,120
So there's one you can see it's stretched to full width fab.

72
00:06:18,710 --> 00:06:28,680
But if we squeeze in another one then within the horizontal linear layout it will always lay them out

73
00:06:28,680 --> 00:06:30,100
from left to right.

74
00:06:30,570 --> 00:06:36,870
So if we want those to be centered on the screen we can take our linear layout and change the width

75
00:06:36,900 --> 00:06:38,640
instead of being full width.

76
00:06:38,730 --> 00:06:41,580
We'll change it to wrap the content.

77
00:06:41,580 --> 00:06:43,800
So it's just the width of the buttons.

78
00:06:44,070 --> 00:06:48,550
And we'll also change the height to wrap content as well.

79
00:06:48,720 --> 00:06:54,900
And now we've got a centered Sedgley centered horizontally and vertically linear layout containing two

80
00:06:54,900 --> 00:06:57,480
buttons which might be something like

81
00:07:00,990 --> 00:07:03,900
a cancel button and an OK button.

82
00:07:04,050 --> 00:07:08,000
Something that is a very common use case for the buttons next to each other.

83
00:07:08,280 --> 00:07:13,990
So using sub layouts like that can be a very useful way of positioning objects within your app exactly

84
00:07:13,990 --> 00:07:15,610
where you want them.

85
00:07:15,630 --> 00:07:17,830
There's a few other types of course as well.

86
00:07:17,850 --> 00:07:22,860
We've got the vertical linear layout which is exactly the same thing but vertically a grid lay out which

87
00:07:22,860 --> 00:07:26,990
is the same but a bit more flexible and frame and table layouts as well.

88
00:07:27,000 --> 00:07:29,680
All of which will use at various points later in the course.

89
00:07:29,820 --> 00:07:34,790
So feel free to play around with these and try and create a nice layout for your app but for now we're

90
00:07:34,800 --> 00:07:40,440
going to go back to working with media and we're going to start with looking at how to create animations

91
00:07:40,530 --> 00:07:41,440
in Android.
