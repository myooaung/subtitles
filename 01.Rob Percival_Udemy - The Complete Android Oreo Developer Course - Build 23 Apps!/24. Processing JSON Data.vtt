WEBVTT
1
00:00:00.570 --> 00:00:05.220
Hello and welcome to another lecture here we actually only have two of these left so you're making great

2
00:00:05.220 --> 00:00:07.030
progress in this lecture.

3
00:00:07.020 --> 00:00:12.200
We're going to be learning about Jason and how we can process that data and you might be saying Jason

4
00:00:12.720 --> 00:00:13.870
what the heck is J sound.

5
00:00:13.890 --> 00:00:16.030
Well here's W3 schools.

6
00:00:16.110 --> 00:00:20.370
This is a great Web site if you want to learn anything web they have awesome stuff.

7
00:00:20.370 --> 00:00:25.590
I think on Ishmail and CSSA that's where I've used the most for but they've also got it on other things

8
00:00:25.590 --> 00:00:32.310
and so for example Jason here it technically stands for javascript object notation but the javascript

9
00:00:32.310 --> 00:00:37.680
part throw you off there it's used with almost any programming language out there and it's basically

10
00:00:37.680 --> 00:00:44.500
a way for computers and code to be able to talk to one another and sort of a unified standard way.

11
00:00:44.580 --> 00:00:48.750
In our last app where we did guess the celebrity was a little bit of an issue that when we were downloading

12
00:00:48.750 --> 00:00:54.240
the 8th to mail we had to you know sift through and get the celebrity names and the image you are else.

13
00:00:54.270 --> 00:01:00.480
And if they decided to change how they processed or you know put out their HMO code it would break our

14
00:01:00.480 --> 00:01:03.670
app and you know like basing our app on their Web site.

15
00:01:03.720 --> 00:01:04.360
Bad idea.

16
00:01:04.380 --> 00:01:10.620
But there's a lot of companies out there that will put out something called an API which allows people

17
00:01:10.620 --> 00:01:17.070
to consume Jaison from them and it's in a standard format and sort of those companies spit shaking problems

18
00:01:17.080 --> 00:01:20.850
that hey we're not going to change how this API delivers data.

19
00:01:20.860 --> 00:01:23.180
It's always going to come through and Jaison like this.

20
00:01:23.330 --> 00:01:28.260
And if we ever do have a new version that will be a separate you are l to say OK here's version 2 of

21
00:01:28.270 --> 00:01:30.710
our API that's typically what we see people do.

22
00:01:30.750 --> 00:01:37.740
So yeah Jaison is the way that data is formatted in API is usually where you can get that information.

23
00:01:37.740 --> 00:01:41.290
So for example here's what Jason could look like.

24
00:01:41.370 --> 00:01:45.630
You know you've got like these curly brackets here and it's sort of a key value store almost like he'd

25
00:01:45.630 --> 00:01:48.510
see in a dictionary where say hey what's someone's name.

26
00:01:48.510 --> 00:01:55.230
It's John what's age 31 What city are they in New York type of thing and you can also have Jason where

27
00:01:55.230 --> 00:01:56.340
you've got a raise in there.

28
00:01:56.340 --> 00:01:59.370
Let's see if there's anything on this list.

29
00:01:59.370 --> 00:02:04.020
It looks like maybe we'd have to go to Jay sun rays to see that so you can see all sorts of different

30
00:02:04.020 --> 00:02:07.140
data types that you can be passing through here.

31
00:02:07.160 --> 00:02:12.240
But so for the example that we're going to be using here is we're going to go get the whether this is

32
00:02:12.240 --> 00:02:17.030
an awesome example of why you'd use an API because if you don't have an API you know if you want an

33
00:02:17.040 --> 00:02:21.360
app to tell the weather you've got to get weather information somehow right so you could go try and

34
00:02:21.360 --> 00:02:26.250
collect all that data yourself or there's tons of great companies here that say hey we've collected

35
00:02:26.250 --> 00:02:31.850
all the weather information we've made it easy for you to access it and you can just display it there.

36
00:02:31.860 --> 00:02:39.870
So if we go ahead and go to this open weather map org and if we go to our API we can go check out their

37
00:02:39.870 --> 00:02:41.460
documentation.

38
00:02:41.460 --> 00:02:45.830
They have a list here of how you can go ahead and use their information.

39
00:02:45.830 --> 00:02:50.910
So for example if we want to know what the weather's like in London UK if we go ahead and click on this

40
00:02:51.510 --> 00:02:58.560
they give us this nice sample you are all here and it'll tell us oh hey you know this is in the Jason

41
00:02:58.560 --> 00:02:59.280
format right.

42
00:02:59.280 --> 00:03:02.030
So it kind of just looks like a bunch of jibberish here.

43
00:03:02.050 --> 00:03:09.010
But this is kind of a cool thing if you do just search pretty Jaison like this.

44
00:03:09.120 --> 00:03:10.280
There's all sorts of different.

45
00:03:10.290 --> 00:03:15.540
Jason formatters and stuff but just go ahead and pick one of these if we copy select all this text and

46
00:03:15.540 --> 00:03:22.290
copy it and then paste it over here and say process it sort of puts it in this nice easy consumable

47
00:03:22.590 --> 00:03:28.740
format so it's showing you OK there's the top level sort of dictionary here and we can get the coordinates

48
00:03:28.830 --> 00:03:35.010
for London now we can get the weather where it's going to show that it's currently you know a drizzle

49
00:03:35.250 --> 00:03:38.220
by intense intensity drizzle.

50
00:03:38.520 --> 00:03:43.770
Also inside of here we can get like the current temperature and things like that.

51
00:03:43.940 --> 00:03:49.610
The visibility the wind like all sorts of different pieces of information here that you can grab.

52
00:03:49.620 --> 00:03:53.720
So sometimes it's a little bit easier to see things in this situation.

53
00:03:53.760 --> 00:04:01.040
So my challenge to you is I want you to set up a new Android project where you can download this data.

54
00:04:01.050 --> 00:04:06.600
So this isn't HDMI all this is Jason but you're still going to follow the same format of creating and

55
00:04:06.600 --> 00:04:10.680
extending your own a sync task right and going and getting that information.

56
00:04:10.680 --> 00:04:17.100
So I want you to get as far as downloading the information from this you are l and then we'll move forward

57
00:04:17.160 --> 00:04:21.890
with changing that and customizing it to our app can't go ahead and hit pause.

58
00:04:21.890 --> 00:04:25.540
Now all right so hopefully that went well for you.

59
00:04:25.540 --> 00:04:32.350
I want you to open up Android studio so that you can start a new project.

60
00:04:32.900 --> 00:04:36.600
So go ahead and give that a second to open there.

61
00:04:37.610 --> 00:04:43.180
I said one big thing here is we're trying to just download the data so I'm going to go ahead and call

62
00:04:43.180 --> 00:04:53.660
this Jaison demo and we'll just go ahead and do defaults for all this great stuff.

63
00:04:54.280 --> 00:04:59.370
Android studio will get out and do its thing and just wanted to take a moment to say there's API is

64
00:04:59.410 --> 00:05:02.390
for almost all the big Web sites out there.

65
00:05:02.410 --> 00:05:03.790
Google Maps has an API.

66
00:05:03.790 --> 00:05:06.330
Facebook has an API Twitter has an API.

67
00:05:06.340 --> 00:05:07.640
I mean you name it.

68
00:05:07.660 --> 00:05:09.850
There's probably an API out there.

69
00:05:09.850 --> 00:05:15.280
I personally have an app that sends out text messages and there's this awesome service Twilio that allows

70
00:05:15.280 --> 00:05:21.030
you to work with their API to send text message text messages to people programmatically.

71
00:05:21.040 --> 00:05:21.700
That's pretty cool.

72
00:05:21.700 --> 00:05:25.650
I mean there's just all sorts of things that once you sort of get in this world of working with API

73
00:05:25.700 --> 00:05:30.830
you're going to be amazed at how many different ways you can work with it.

74
00:05:31.180 --> 00:05:36.580
So now that we're here and we have some code let's go ahead and start our new class or we're going to

75
00:05:36.580 --> 00:05:51.130
save public class download download task and we're going to say that this extends a sync we give our

76
00:05:51.220 --> 00:05:52.500
auto complete a second here.

77
00:05:52.500 --> 00:05:52.900
There we go.

78
00:05:52.910 --> 00:05:54.350
Async task.

79
00:05:54.610 --> 00:06:01.990
And in this situation again Swannie use string comma void comma string because in the end we want to

80
00:06:02.470 --> 00:06:06.130
spit back some Jaison Jaison string there.

81
00:06:06.500 --> 00:06:09.680
So let's go ahead and implement those methods.

82
00:06:09.780 --> 00:06:12.900
Ok to that and I'll give us some room here on the left side.

83
00:06:12.910 --> 00:06:13.530
All right.

84
00:06:13.720 --> 00:06:17.950
So now that we're here in this do in background we want to change this to you or else that's kind of

85
00:06:17.950 --> 00:06:19.610
our classic thing right.

86
00:06:19.600 --> 00:06:22.530
And we just want to go through our regular flow here.

87
00:06:22.570 --> 00:06:26.830
So if you'd like to feel free to go ahead and copy and paste this from another lecture if you don't

88
00:06:26.830 --> 00:06:32.840
want to type this all out again but maybe you'll enjoy sort of getting another shot at practicing this.

89
00:06:32.860 --> 00:06:37.930
But going to have a place for our results something for r u r l.

90
00:06:38.550 --> 00:06:41.940
Also here we've got to go ahead and oops

91
00:06:44.780 --> 00:06:52.660
see here and there we go get the import there then we need an h t t p or L connection that we are going

92
00:06:52.660 --> 00:06:57.470
to call your L connection.

93
00:06:57.610 --> 00:06:58.460
Excellent.

94
00:06:58.780 --> 00:07:03.630
All right so once we got those pieces in place and I guess initially We'll set this equal to nil.

95
00:07:03.910 --> 00:07:10.810
Once we have those pieces in place it's time to surround our next bit of code in a try catch.

96
00:07:10.810 --> 00:07:15.630
So we'll say that we want to be like looking out for our exception.

97
00:07:15.640 --> 00:07:27.590
We all do our E dot print stack trace also with this want to go ahead and return nil or no.

98
00:07:27.590 --> 00:07:30.220
If there's some sort of issue with our code.

99
00:07:30.410 --> 00:07:30.980
All right.

100
00:07:31.210 --> 00:07:35.770
So now that we're here we're going to create a new u r l object.

101
00:07:35.860 --> 00:07:42.490
We're going to create this from the Uriel's first object.

102
00:07:42.500 --> 00:07:53.720
Next thing that we want to do is set up our your L connection to be a u r l dot open connection.

103
00:07:53.880 --> 00:07:55.490
I've got to go ahead and cast that.

104
00:07:55.490 --> 00:08:00.850
So it's CGP your L connection after we've done that.

105
00:08:00.860 --> 00:08:13.730
We'll go ahead and create an input stream we'll call in and say this is your real connection to get

106
00:08:13.850 --> 00:08:15.060
input stream.

107
00:08:15.320 --> 00:08:16.450
Excellent.

108
00:08:16.550 --> 00:08:23.900
And once we have that in place we're going to make an input stream reader that we'll just call reader

109
00:08:24.900 --> 00:08:32.980
will say this is a new input stream reader guess I got to do with the capital line to get that auto

110
00:08:33.000 --> 00:08:41.290
complete which will pass and and after we've got this in place we'll go ahead and do.

111
00:08:41.400 --> 00:08:45.680
Are you going to go to do lowercase there and data.

112
00:08:46.210 --> 00:08:53.380
This is where we'll say it read or read and once we've done that we'll go ahead and do a little while

113
00:08:53.380 --> 00:08:59.150
loop here and we'll say while data is not equal to negative 1.

114
00:08:59.500 --> 00:09:02.410
Go ahead loop through and do yo thang.

115
00:09:02.860 --> 00:09:12.630
So with this we need to make sure we're going to call called current set equal to the data whatever

116
00:09:12.970 --> 00:09:15.020
it currently happens to be.

117
00:09:15.430 --> 00:09:25.700
Then we'll say results plus equals our current character just like that.

118
00:09:25.990 --> 00:09:34.000
And then the last thing that we need to do is we need to say okay data is equal to reader read and that

119
00:09:34.000 --> 00:09:36.820
will move us on to our next bit.

120
00:09:36.820 --> 00:09:42.000
And we also need to make sure we return the particular string that we have here.

121
00:09:42.010 --> 00:09:47.320
So we are going to return the result just like this.

122
00:09:48.010 --> 00:09:54.130
So with this in place there's one sort of extra special thing that I want to do here and that's there's

123
00:09:54.130 --> 00:09:57.220
another method that we can provide here.

124
00:09:57.220 --> 00:09:59.820
So what we're going to do is.

125
00:10:00.010 --> 00:10:04.780
So while we're still inside of this class right right now we have this do in background.

126
00:10:04.780 --> 00:10:08.770
I'm going to provide an extra methods and just talk about what we can do here.

127
00:10:08.770 --> 00:10:11.620
So this is going to be called on post execute.

128
00:10:11.650 --> 00:10:16.850
So the lower case on post and you can see there's the on post to execute if we just hit enter.

129
00:10:17.050 --> 00:10:19.870
It's going to go auto complete all of that for us.

130
00:10:19.870 --> 00:10:25.420
And this is basically our chance to write some code when this has finished running.

131
00:10:25.420 --> 00:10:32.610
And so basically the do in background code this should never touch anything from the UI perspective

132
00:10:32.620 --> 00:10:35.410
this is all supposed to happen on the background while on post.

133
00:10:35.410 --> 00:10:40.600
Execute this is where you could go touch something in the user interface so we're not going to do that

134
00:10:40.600 --> 00:10:41.400
right now.

135
00:10:41.680 --> 00:10:46.170
But essentially the string that comes through here this is whatever the result was above.

136
00:10:46.450 --> 00:10:52.400
So for the time bein we're just going to go ahead and log this information so we'll say log I.

137
00:10:52.570 --> 00:10:59.800
And we'll just say this is our Jason and we'll go ahead and provide whatever the string is because that

138
00:10:59.800 --> 00:11:03.340
should be the case on data that we're getting back.

139
00:11:03.910 --> 00:11:09.460
So kind of a cool little variance thing that I wanted to show you there with this information and I'm

140
00:11:09.460 --> 00:11:13.990
going to go ahead and get our emulator up and running because we know sometimes how long it takes to

141
00:11:13.990 --> 00:11:22.270
get that going there we're going to go to our on create method and inside of here we're going to first

142
00:11:22.690 --> 00:11:28.030
create a new download task.

143
00:11:28.030 --> 00:11:37.280
And that's not coming up I must say given a different name there down download task down load.

144
00:11:37.330 --> 00:11:38.030
There we go.

145
00:11:38.110 --> 00:11:42.220
So let's try that again download task.

146
00:11:42.220 --> 00:11:44.140
That's what I'm looking for.

147
00:11:44.140 --> 00:11:51.050
Well just go ahead and call this task and say this is equal to a new download task.

148
00:11:51.710 --> 00:11:56.510
Then with this task we want to say task not execute.

149
00:11:56.800 --> 00:11:57.250
Right.

150
00:11:57.280 --> 00:12:02.920
And this is where we want to provide it some string for you are all that we want it to go and grab.

151
00:12:02.920 --> 00:12:08.500
So in this case let's go back to here and where we have this.

152
00:12:08.800 --> 00:12:14.210
You know your all that gets us this information we just want to go ahead and copy this directly.

153
00:12:14.320 --> 00:12:18.490
We'll go back to android studio and put that inside of the curly brackets.

154
00:12:18.580 --> 00:12:24.580
So this goes and gets the weather for London in the U.K. We've also got this app idea and here that

155
00:12:24.580 --> 00:12:30.920
I think allows us to access this information because there's open weather app to use all of their API.

156
00:12:30.940 --> 00:12:34.080
They recommend that you get an API key.

157
00:12:34.150 --> 00:12:38.710
It is free but they just want to be able to monitor to see how much they're using their API.

158
00:12:38.710 --> 00:12:43.240
But typically when you're just doing a small amount of requests you're not going to get any issues from

159
00:12:43.240 --> 00:12:46.240
them with having things flare up.

160
00:12:46.240 --> 00:12:49.080
So with this this should go execute.

161
00:12:49.080 --> 00:12:54.280
And when we get to this part it should log the Jaison that we have so let's go ahead and open up a log

162
00:12:54.290 --> 00:13:01.290
cat and we will restart our app and here we go

163
00:13:05.160 --> 00:13:12.050
came out and I just forgot one crucial thing we got to make sure that we go ahead and ask for Internet

164
00:13:12.890 --> 00:13:15.270
permission here.

165
00:13:15.500 --> 00:13:21.000
Well go ahead and make some space say use permission.

166
00:13:21.230 --> 00:13:26.620
We want the Internet and we'll go ahead and close that up.

167
00:13:26.630 --> 00:13:27.280
All right.

168
00:13:27.500 --> 00:13:36.560
So with that in place let's go ahead and run our app.

169
00:13:38.080 --> 00:13:40.780
And here it comes.

170
00:13:40.840 --> 00:13:45.080
Give it a second here to load up inside of the emulator.

171
00:13:48.960 --> 00:13:49.740
There we go.

172
00:13:49.750 --> 00:13:51.150
Finally finished up their

173
00:13:54.160 --> 00:13:56.740
an app opens up and look at that.

174
00:13:56.740 --> 00:13:58.230
Here comes our Jason.

175
00:13:58.270 --> 00:14:00.980
Shown showing the coordinates the weather.

176
00:14:01.180 --> 00:14:02.680
All that good information.

177
00:14:02.860 --> 00:14:04.590
We don't need all this information.

178
00:14:04.610 --> 00:14:05.550
Oh even look at that.

179
00:14:05.560 --> 00:14:08.800
It's not like the sunset in the sunrise.

180
00:14:08.950 --> 00:14:15.850
Pretty cool detailed information but we kind of got to take this information and then allow the user

181
00:14:15.850 --> 00:14:20.890
to get to it in order to do that we have to process this information in the way that we're going to

182
00:14:20.890 --> 00:14:26.050
do this is we're actually going to use something called a Jaison object and it's going to be a really

183
00:14:26.050 --> 00:14:27.960
cool way to move through this data.

184
00:14:28.030 --> 00:14:33.650
So inside of this on post execute this is where we're going to write the good chunk of our code here.

185
00:14:33.850 --> 00:14:37.780
And the big thing that we want to do is we want to take this string and we want to convert it to an

186
00:14:37.780 --> 00:14:42.460
actual J sound object so because we know this is coming through is Jaison rather than a bunch of H.T.

187
00:14:42.460 --> 00:14:47.470
male we can actually turn into this chase object and work with the data a little bit more elegantly.

188
00:14:47.470 --> 00:14:53.110
We don't have to you know do a split and Redjacket to find all these things with Jaison it's much much

189
00:14:53.110 --> 00:14:54.760
simpler to work with.

190
00:14:54.760 --> 00:15:00.550
So the first thing that we want to do is create something called a sun object and make sure you hit

191
00:15:00.550 --> 00:15:04.630
enter on that so you get the import and or call our new variable here.

192
00:15:04.630 --> 00:15:09.960
Just chase on object and we're going to set this equal to a new J sound object.

193
00:15:10.240 --> 00:15:14.390
And this is we need to fill it with a string here that's one of the options that it could be.

194
00:15:14.420 --> 00:15:18.970
And so we're going to fill it with S which is the string that's going to be the result so we'll go ahead

195
00:15:18.970 --> 00:15:21.020
and put s inside of there.

196
00:15:21.310 --> 00:15:27.480
If you're confused at all about why we should do as you could rename the result if you'd like to.

197
00:15:27.490 --> 00:15:32.200
But I think it's fine as just as this does have to be surrounded in a try catch.

198
00:15:32.200 --> 00:15:35.550
Let's go ahead and do our fun little curly bracket there.

199
00:15:35.590 --> 00:15:40.610
Catch and with our catch We're looking for exceptions

200
00:15:43.210 --> 00:15:48.880
in which case we would do a print stack trace.

201
00:15:49.420 --> 00:15:53.400
An exception I forgot to hit enter on that.

202
00:15:53.400 --> 00:15:56.580
And I also expel misspelled exception.

203
00:15:56.850 --> 00:15:58.560
Well that's all I need to do.

204
00:15:58.630 --> 00:16:00.110
Now I can print that.

205
00:16:00.250 --> 00:16:00.760
All right.

206
00:16:01.240 --> 00:16:06.760
So now we've got this Jaison object we can use it to sort of dive in to this code a little bit so if

207
00:16:06.760 --> 00:16:12.780
we go ahead and look at this Jason formatter the main thing that we want to move into is the weather.

208
00:16:12.820 --> 00:16:17.080
So the weather contains all this cool stuff like oh there's a drizzle.

209
00:16:17.720 --> 00:16:22.900
And while it looks like that's the only thing right now you may be seen different when you're running

210
00:16:22.900 --> 00:16:23.080
this.

211
00:16:23.080 --> 00:16:26.700
But this will actually give us a ray of some weather information.

212
00:16:26.740 --> 00:16:33.980
So what we need to do is go back to our app here and we need to make a new string.

213
00:16:34.140 --> 00:16:44.260
So when I say string weather info we're going to set this equal to our Jaison object not yet string

214
00:16:44.770 --> 00:16:49.240
and inside if we want to pass the key of getting into that piece of data.

215
00:16:49.240 --> 00:16:53.650
So to get to this weather information we have to provide weather right here.

216
00:16:53.820 --> 00:16:58.920
So we're going to go back to our code and type in lower case whether it's got to make sure you spell

217
00:16:58.940 --> 00:17:01.820
exactly the same capitalization everything.

218
00:17:01.900 --> 00:17:09.340
But if we do this it should give us whatever the weather content is so we can go ahead and do a log

219
00:17:09.340 --> 00:17:20.080
here will say log I will say something like weather content and will say that this is going to be equal

220
00:17:20.080 --> 00:17:22.780
to weather info or print that out.

221
00:17:22.780 --> 00:17:27.910
So with that in place let's just go ahead and run this see what that looks like and this will tell us

222
00:17:27.910 --> 00:17:35.260
the next steps that we need to do in order to pull out some more information from this weather API.

223
00:17:35.260 --> 00:17:40.080
So we've got our map here looks like it opened up and look it up.

224
00:17:40.080 --> 00:17:43.070
There's our weather content now gave us back an array.

225
00:17:43.300 --> 00:17:48.580
And in the cerate only has one object in this thing with the curly brackets but inside of here this

226
00:17:48.580 --> 00:17:50.520
is where the main in the description is.

227
00:17:50.740 --> 00:17:55.330
And it's an array because sometimes there's going to be multiple things going on maybe there's a drizzle

228
00:17:55.330 --> 00:17:59.560
maybe there's like some thunderstorm coming out maybe it's getting sunny again but there could be multiple

229
00:17:59.560 --> 00:18:01.160
objects coming back here.

230
00:18:01.210 --> 00:18:06.130
So we need to handle this as an array and in order to do that we're going to create something called

231
00:18:06.160 --> 00:18:08.080
a Jaison array.

232
00:18:08.080 --> 00:18:13.270
So what this Jaison array will just call it are for short just a little array.

233
00:18:13.320 --> 00:18:21.690
When you say this is equal to a new Jason array and it needs to get some sort of string or other Jason

234
00:18:21.700 --> 00:18:25.390
objects or going past weather info in there.

235
00:18:25.800 --> 00:18:26.580
OK.

236
00:18:26.890 --> 00:18:31.060
Now once we've done that because this is an array we can go ahead and loop through it.

237
00:18:31.060 --> 00:18:40.780
So we're going to do a for loop and inside this for loop will say ok for ant is equal to zero and wall

238
00:18:40.780 --> 00:18:49.000
eye is less than whatever the array's length is we'll do array dot length just like that means we want

239
00:18:49.000 --> 00:18:54.830
to keep moving forward and then we'll just say I plus plus So this will really loop through everything

240
00:18:54.830 --> 00:18:55.730
here.

241
00:18:56.000 --> 00:19:03.080
Then down below it's going to be our job to get the object at this particular array location so we're

242
00:19:03.080 --> 00:19:10.940
going to call this a Jaison object that we'll just call Jaison part because it's just part of the array

243
00:19:10.940 --> 00:19:17.600
not the whole thing and will do array get Jaison object.

244
00:19:17.810 --> 00:19:19.920
And now we have to pass the index.

245
00:19:19.940 --> 00:19:25.970
And so what we're going to give it is I write because we're going to start a few get us the zero position

246
00:19:25.970 --> 00:19:27.920
the one the two the three right.

247
00:19:27.920 --> 00:19:33.290
It looks like right now as of doing this there's maybe only one and I guess that's just what the weather

248
00:19:33.290 --> 00:19:34.040
is in the UK.

249
00:19:34.040 --> 00:19:36.130
You could be running this there'll be three or four things.

250
00:19:36.140 --> 00:19:41.130
But you know it's going to change and that's what's so cool about API is this it's live data.

251
00:19:41.150 --> 00:19:46.240
So then with this we want to go ahead and just log this out make sure that this is working.

252
00:19:46.460 --> 00:19:52.590
So the first thing is we want to show the information for and if we go back to log cat you'll see this.

253
00:19:52.700 --> 00:19:54.280
We want to know what Maine is.

254
00:19:54.280 --> 00:19:57.200
And we want to know a description so we can say like there's a drizzle.

255
00:19:57.290 --> 00:19:58.070
What does it mean.

256
00:19:58.070 --> 00:20:02.930
Light intensity drizzle I know that's kind of a lame description there but that's what we're going for.

257
00:20:02.930 --> 00:20:05.410
So the first one is we're going to call this main.

258
00:20:05.520 --> 00:20:11.510
And as far as the string that we're going to attach there we have to get to our Jason part right which

259
00:20:11.510 --> 00:20:18.680
we had just pulled out of here out of the array or say some part get string and we have to provide what

260
00:20:18.680 --> 00:20:23.300
we're looking for so if we say Main here it's going to get us drizzle if we say description it's going

261
00:20:23.300 --> 00:20:25.340
to give us light intensity drizzle.

262
00:20:25.340 --> 00:20:28.070
So for the first one I'll just provide main.

263
00:20:28.450 --> 00:20:36.650
We're going to do a very similar thing here for our next one and this is going to be descriptions and

264
00:20:36.740 --> 00:20:40.790
you know it might even just be best to copy and paste directly from there.

265
00:20:41.120 --> 00:20:42.990
Because let me tell you the these.

266
00:20:43.010 --> 00:20:47.550
Jason APC's they are unforgiving if you don't have the information exactly right.

267
00:20:47.630 --> 00:20:48.730
Things are not going to work.

268
00:20:48.750 --> 00:20:56.330
And but the nice thing is you can rely on Jaison API to always be the same in the same format as long

269
00:20:56.330 --> 00:20:58.930
as you prepare for that you're going to be OK.

270
00:20:58.940 --> 00:21:06.170
So we'll go ahead and have this emulator here ready to go and look at that it popped up so if we go

271
00:21:06.170 --> 00:21:11.380
down to a log cat look at that it shows drizzle and light intensity drizzle.

272
00:21:11.390 --> 00:21:15.710
So again hopefully if you're running this you can see more than one I think it just so happened when

273
00:21:15.710 --> 00:21:21.740
I was running this that we only have one thing coming through there but this is a nice introduction

274
00:21:21.750 --> 00:21:28.310
how to work with API is in Jaison hopefully you saw how this was a lot cleaner than going through with

275
00:21:28.310 --> 00:21:33.710
you know doing some red jacks or we had to split a string into multiple pieces right like this is works

276
00:21:34.120 --> 00:21:35.140
much better.

277
00:21:35.150 --> 00:21:37.580
Also the API is great.

278
00:21:37.580 --> 00:21:43.580
Like we can go to the Web site here for open weather and it's going to tell us exactly how this thing

279
00:21:43.580 --> 00:21:45.650
is going to look like if we go back here.

280
00:21:46.140 --> 00:21:52.580
And as a full breakdown of what this should be as opposed to remember with the top 100 celebrities they

281
00:21:52.580 --> 00:21:54.150
could change their website at any moment.

282
00:21:54.170 --> 00:21:59.120
And also an app just explodes we're here you know there's kind of a standard there saying yeah this

283
00:21:59.120 --> 00:22:01.560
is how we're going to give you back information.

284
00:22:01.730 --> 00:22:08.210
And if this was ever to change I want you to notice this flash data slash 2.5 so they have earlier versions

285
00:22:08.510 --> 00:22:09.380
of their API.

286
00:22:09.380 --> 00:22:14.660
I assume there's like a 2.4 2.3 there might have been a one point something but the idea is that you

287
00:22:14.660 --> 00:22:22.080
can bank on these API and say you know what they're given as long as I follow 2.5 and I asked for 2.5.

288
00:22:22.220 --> 00:22:23.780
I'm going to get that back.

289
00:22:24.650 --> 00:22:26.820
So hopefully enjoyed learning about Jason.

290
00:22:26.990 --> 00:22:30.070
We just have one more big lecture here to finish off this section.

291
00:22:30.080 --> 00:22:33.710
I know this has been a really big one so congrats on you for getting this far.

292
00:22:33.740 --> 00:22:36.200
Let's go ahead and dive into that next one now.
