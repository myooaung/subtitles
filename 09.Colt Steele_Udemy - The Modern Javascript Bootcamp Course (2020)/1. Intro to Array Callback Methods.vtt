WEBVTT
1
00:00:00.180 --> 00:00:05.910
In the last section we talked a lot about passing functions as arguments to other functions with the

2
00:00:05.910 --> 00:00:11.250
expectation that the outer function will call your argument function which we call a callback.

3
00:00:11.430 --> 00:00:15.630
And I said I'm showing this to you because callbacks are central to JavaScript.

4
00:00:15.630 --> 00:00:19.870
In fact tons of built in methods expect you to pass a callback function.

5
00:00:19.890 --> 00:00:22.020
So in this section we'll see some of those methods.

6
00:00:22.050 --> 00:00:26.700
Some of the most useful bills and methods that expect you to pass a function in.

7
00:00:26.940 --> 00:00:29.210
And these all have to do with arrays.

8
00:00:29.220 --> 00:00:34.500
That's not to say there aren't other types of callback methods in javascript but this section is focused

9
00:00:34.500 --> 00:00:38.490
on array methods that expect you to pass in a callback.

10
00:00:38.490 --> 00:00:39.550
So there's tons of them.

11
00:00:39.570 --> 00:00:44.700
We saw a bunch of built in array methods early on but we didn't cover these because we haven't talked

12
00:00:44.700 --> 00:00:46.070
about function to that point.

13
00:00:46.140 --> 00:00:47.730
We didn't know what a callback was.

14
00:00:47.730 --> 00:00:51.820
It's a lot to throw at you at the very beginning when you're still wrapping your head around arrays.

15
00:00:51.870 --> 00:00:58.520
So we saw things like dot reverse or includes index of these methods we'll see are different.

16
00:00:58.530 --> 00:00:59.780
There are quite a bit different.

17
00:00:59.850 --> 00:01:06.180
We pass in a function and the general pattern here is that we're going to run a function once per every

18
00:01:06.180 --> 00:01:08.970
element in an array but we'll have different goals.

19
00:01:08.970 --> 00:01:11.950
Maybe we want to filter out certain values from an array.

20
00:01:12.090 --> 00:01:15.540
Maybe we want to create a new array from an existing array.

21
00:01:15.630 --> 00:01:20.640
Maybe we want to check if every single element in an array meets a given condition.

22
00:01:20.730 --> 00:01:25.470
What they have in common is that we are trying to run our function once per element in the array.

23
00:01:26.100 --> 00:01:28.710
So these functions we're about to see are extremely useful.

24
00:01:28.710 --> 00:01:34.320
I know you said that a million times but really the methods we'll see here are used all the time far

25
00:01:34.320 --> 00:01:37.980
more often than things like index of or reverse.

26
00:01:37.980 --> 00:01:40.140
So our goals are pretty straightforward.

27
00:01:40.230 --> 00:01:46.620
We want to talk about the built in methods for a race that require callbacks for each map filter find

28
00:01:46.620 --> 00:01:52.590
reduce some and every in our game plan here is to cover a couple of the easier ones.

29
00:01:52.590 --> 00:01:55.710
Then take a break to talk about a different function syntax.

30
00:01:55.710 --> 00:02:00.780
We haven't seen yet called Aero functions aero functions are a new ish way of writing functions.

31
00:02:00.780 --> 00:02:06.090
They're just shorter cleaner easier when you need to pass a function in as an argument.

32
00:02:06.090 --> 00:02:11.130
So we'll use them a lot for the rest of these methods that we've covered so we'll cover a couple of

33
00:02:11.130 --> 00:02:14.220
these aero functions and then the rest of these methods.

34
00:02:14.520 --> 00:02:16.950
So in the next video we'll start off with for each.
