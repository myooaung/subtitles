WEBVTT
1
00:00:00.890 --> 00:00:04.640
Now that we are waiting for our JavaScript files to be loaded before we start to run our different tests

2
00:00:04.910 --> 00:00:09.290
we can't go back to our current ID statement that we're working on and update this thing to have an

3
00:00:09.290 --> 00:00:10.320
actual assertion.

4
00:00:10.640 --> 00:00:16.690
So I'm gonna remove the console log right there and I'll do in asserts dot strict equal.

5
00:00:16.830 --> 00:00:21.410
Remember the first argument to this will be what we what we actually got out of our test.

6
00:00:21.540 --> 00:00:24.240
And the second argument will be what we were expecting.

7
00:00:24.300 --> 00:00:32.310
So the actual value is each one that inner each CML and then our expected value is whatever we put together

8
00:00:32.310 --> 00:00:35.060
inside of index dot J.S. inside of our sample web project.

9
00:00:35.070 --> 00:00:36.690
I can open that up really quickly.

10
00:00:36.690 --> 00:00:39.390
So the exact string that we're looking for is looks good.

11
00:00:39.420 --> 00:00:43.020
Exclamation so I'll say it looks good.

12
00:00:43.120 --> 00:00:46.870
Exclamation like so.

13
00:00:46.920 --> 00:00:47.160
All right.

14
00:00:47.190 --> 00:00:48.650
Let's save that.

15
00:00:48.750 --> 00:00:52.410
I'll go rerun my tests and we're good to go.

16
00:00:52.560 --> 00:00:55.200
As usual I'm going to break the test really quickly.

17
00:00:55.200 --> 00:00:56.550
So it's a break the test this time.

18
00:00:56.580 --> 00:00:58.730
I'll just take off the exclamation there at the very end.

19
00:00:58.740 --> 00:01:01.440
Just have a different string to compare against.

20
00:01:01.440 --> 00:01:05.580
I'll say the file again run my tests again and I'll see very plainly.

21
00:01:05.670 --> 00:01:09.160
Yeah we definitely had the right text inside that each one element.

22
00:01:09.450 --> 00:01:14.190
So I'd say that this looks pretty good all right.

23
00:01:14.350 --> 00:01:18.410
So I'm going to fix the test backup by putting the exclamation in there again.

24
00:01:18.430 --> 00:01:22.480
No I think we should definitely write one last test to make sure that this thing shows some kind of

25
00:01:22.570 --> 00:01:23.710
appropriate error message.

26
00:01:23.770 --> 00:01:29.040
If we put in an invalid email so for that I'm going to take this entire it block that we have right

27
00:01:29.040 --> 00:01:29.620
here.

28
00:01:29.720 --> 00:01:33.500
I'm going to copy it and throw it right underneath.

29
00:01:34.040 --> 00:01:38.840
So here's the duplicate right here I've got the same test two in a row right now on the second one.

30
00:01:38.840 --> 00:01:45.170
I'll change the description I'll say it shows a fail message with an invalid email and I left off the

31
00:01:45.170 --> 00:01:46.180
L on email SMS.

32
00:01:46.250 --> 00:01:51.150
I'm just gonna fix that up really quickly in both locations.

33
00:01:51.170 --> 00:01:57.450
So now we need to make sure that when we put some value into the input we put in an invalid email so

34
00:01:57.460 --> 00:02:03.030
I'll just delete everything after that and also have like some random characters.

35
00:02:03.040 --> 00:02:08.200
So now when we tried to submit the form and we do our strict equal check right here rather than expecting

36
00:02:08.200 --> 00:02:14.050
to see looks good we'll expect to see the error message which is we go back to index not just once again

37
00:02:14.440 --> 00:02:15.460
invalid email.

38
00:02:15.460 --> 00:02:17.200
That's what we're looking for.

39
00:02:17.300 --> 00:02:24.590
It's all change the message that we're looking forward to invalid email I'll saved us up look back over

40
00:02:25.880 --> 00:02:28.000
run TV and we're good to go.

41
00:02:29.120 --> 00:02:29.370
Okay.

42
00:02:29.410 --> 00:02:30.760
Well that is pretty much it.

43
00:02:30.760 --> 00:02:33.550
That is our testing framework.

44
00:02:33.640 --> 00:02:35.930
So we now have this tiny little bit of code.

45
00:02:35.950 --> 00:02:42.970
Like really there's not a lot going on here for our team project that we can use to test a node application

46
00:02:43.060 --> 00:02:46.340
as we saw with our sample project with the for each function.

47
00:02:46.450 --> 00:02:50.890
And we can also use it very easily for our sample web project as well.

48
00:02:50.890 --> 00:02:56.350
We can load up some entire H TO MAIL document that's gonna give us a entire copy of our application

49
00:02:56.410 --> 00:03:01.240
running inside the browser so we can write out some tests like you see right here that just directly

50
00:03:01.240 --> 00:03:05.980
look at different DOM elements and manipulate them in some fashion and then make us an assertion about

51
00:03:05.980 --> 00:03:10.380
them at the very end so I hope you enjoyed putting this little testing framework together.

52
00:03:10.380 --> 00:03:11.890
Has I mentioned earlier.

53
00:03:12.000 --> 00:03:15.690
I was really looking forward to this and I hope you enjoyed putting it together with me.

54
00:03:15.780 --> 00:03:19.550
We saw a lot to learn about so let's take a pause right here and continue in just a moment.
