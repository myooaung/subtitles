1
00:00:00,210 --> 00:00:00,480
All right.

2
00:00:00,510 --> 00:00:04,190
So we just talked about the arguments object and some of its shortcomings.

3
00:00:04,200 --> 00:00:05,660
It's been around for a long time.

4
00:00:05,670 --> 00:00:07,130
It's doing the best it can.

5
00:00:07,150 --> 00:00:10,160
Now we have a new nicer syntax in rest.

6
00:00:10,380 --> 00:00:12,440
So rest is three dots.

7
00:00:12,480 --> 00:00:13,250
One two three.

8
00:00:13,260 --> 00:00:14,870
Just like we used for spread.

9
00:00:15,150 --> 00:00:21,420
But we put it inside the parameter list of a function definition and what it does is it collects all

10
00:00:21,420 --> 00:00:29,130
remaining arguments into a 100 percent real actual array not an array like object not an array imitation

11
00:00:29,490 --> 00:00:30,950
a real array.

12
00:00:30,960 --> 00:00:36,210
So earlier we wrote this function called some using the arguments object we had to convert it into an

13
00:00:36,210 --> 00:00:37,110
array.

14
00:00:37,110 --> 00:00:43,380
If we want to write the same function using rest what we do is we put three dots right here and then

15
00:00:43,380 --> 00:00:44,850
we decide on a name.

16
00:00:44,940 --> 00:00:49,470
And that will be the name of the array that contains all of the arguments in our case.

17
00:00:49,590 --> 00:00:51,960
All arguments will be collected.

18
00:00:51,960 --> 00:00:58,290
So let's go with numbers and then we can start by just counsel about logging numbs we need to match

19
00:00:58,290 --> 00:01:00,780
that name that we gave it here.

20
00:01:01,020 --> 00:01:04,650
Let's call some on 4 5 6 7.

21
00:01:05,010 --> 00:01:06,570
And it's an actual array.

22
00:01:07,560 --> 00:01:09,220
It's not an array like object.

23
00:01:09,300 --> 00:01:10,740
It's a real array.

24
00:01:10,860 --> 00:01:16,760
So I could implement the same functionality where I return using reduce on numbers.

25
00:01:16,770 --> 00:01:19,040
So numbs reduce.

26
00:01:19,440 --> 00:01:29,760
And then we have our reduced function which will be total and then current Val I use an arrow function.

27
00:01:29,760 --> 00:01:36,090
And we just want to return total plus curve Val let's check it out.

28
00:01:36,430 --> 00:01:36,910
It works.

29
00:01:36,910 --> 00:01:38,290
We get twenty two.

30
00:01:38,440 --> 00:01:41,520
So this is the simplest way to use rest.

31
00:01:41,560 --> 00:01:47,530
We're collecting all arguments everything passed in whether it's 20 the first one the last one they're

32
00:01:47,620 --> 00:01:53,460
all combined into the numbers array but we can also use it in a different way.

33
00:01:53,530 --> 00:01:57,340
We can use it to collect the remaining arguments which is what I wrote here.

34
00:01:57,340 --> 00:02:01,870
Collects all remaining arguments so not just every argument no matter what.

35
00:02:01,870 --> 00:02:07,110
Instead it collects the remaining arguments that have not been matched with a parameter.

36
00:02:07,150 --> 00:02:13,630
So if we go back to that example where I had full name and I wanted a function where we have a first

37
00:02:13,810 --> 00:02:22,800
last and then a list of titles I could use rest right here to collect the remaining titles first last.

38
00:02:22,810 --> 00:02:27,370
Those will be their own parameters then everything else is collected here.

39
00:02:27,670 --> 00:02:35,080
So I'll start by just canceled out logging first with first and then I'll do the same thing for last.

40
00:02:35,560 --> 00:02:41,350
And then one more time for titles and if I call full name where I'm passing.

41
00:02:41,380 --> 00:02:49,600
Tom as first Jones as last and then a bunch of arguments to be the titles you can see what we get first

42
00:02:49,600 --> 00:02:55,570
is still Tom last is Jones but titles only contains the remaining arguments when we tried the same thing

43
00:02:55,570 --> 00:03:01,230
with the arguments object it contained every argument including first and last or Tom Jones.

44
00:03:01,660 --> 00:03:06,890
But in this case it is only collecting the unclaimed arguments if that makes sense.

45
00:03:06,910 --> 00:03:12,460
So we have them collected in titles and it's an array and I could use titles to do something I could

46
00:03:12,490 --> 00:03:15,460
iterate over each title but I'm not going to bother with it.

47
00:03:15,490 --> 00:03:19,290
I just wanted to show you that we have a way of separating them out.

48
00:03:19,390 --> 00:03:23,650
We have first last and then everything else because of the way rest works.

49
00:03:23,650 --> 00:03:24,900
It collects everything.

50
00:03:24,970 --> 00:03:31,870
You wouldn't have multiple rests javascript wouldn't know what to do because the logic here is combine

51
00:03:31,960 --> 00:03:37,150
everything that has not been put in a parameter already into the titles array.

52
00:03:37,150 --> 00:03:41,980
So how could we have something afterwards if we just claimed everything before it into the titles array

53
00:03:43,000 --> 00:03:44,570
you can name these whatever you'd like.

54
00:03:44,590 --> 00:03:49,970
As we've seen and along with that the order definitely matters if you tried to do this.

55
00:03:50,110 --> 00:03:55,150
It's not going to work last would never have a value ever.

56
00:03:55,290 --> 00:04:02,580
And if you tried to do it this way titles first last let's see what happens.

57
00:04:02,590 --> 00:04:03,010
Mm hmm.

58
00:04:03,090 --> 00:04:05,820
Risk parameter must be the last formal parameter.

59
00:04:05,850 --> 00:04:08,290
So javascript doesn't even let you try.

60
00:04:08,310 --> 00:04:10,850
It's telling you it has to be the last parameter.

61
00:04:10,860 --> 00:04:12,960
That's the only option.

62
00:04:12,960 --> 00:04:17,160
And then the last thing that is nice about it is that we can use it in an arrow function.

63
00:04:17,280 --> 00:04:22,860
So I could rewrite functions some this function statement the declaration I could rewrite it as an arrow

64
00:04:22,860 --> 00:04:26,900
function just copy this and defined it down here.

65
00:04:26,910 --> 00:04:28,630
Let's go with multiply actually.

66
00:04:28,680 --> 00:04:37,950
So const multiply equals our arrow function and we'll call the parameter number the rest param that

67
00:04:37,950 --> 00:04:43,400
accepts everything into an array and then let's do an implicit return.

68
00:04:43,680 --> 00:04:51,440
So we don't need to say return anymore we'll do numbers stop reduce and then multiply instead of add

69
00:04:51,920 --> 00:04:58,450
and we can use a double implicit return if we want to just do it on one line.

70
00:04:58,500 --> 00:05:06,650
OK so we have our aero function here where we're using rest recalling the array numbers and because

71
00:05:06,680 --> 00:05:08,870
it's an array we can call reduce.

72
00:05:09,020 --> 00:05:13,550
And then I'm just returning total times curveball in my reduced function.

73
00:05:13,550 --> 00:05:17,960
If you skipped over the reduced videos I really recommend you check those out.

74
00:05:17,960 --> 00:05:19,490
I know they're a bit painful.

75
00:05:19,490 --> 00:05:20,990
Trust me I had to teach it.

76
00:05:21,020 --> 00:05:25,700
It's not it's not that exciting but it is something that you'll use all the time anyway.

77
00:05:25,820 --> 00:05:27,060
Let's make sure it works.

78
00:05:27,110 --> 00:05:34,690
So we'll call Multiply multiply about four or five six seven and we get eight 40.

79
00:05:34,760 --> 00:05:36,460
Let's do something we can verify easier.

80
00:05:36,470 --> 00:05:38,690
Two three and four gives us twenty four.

81
00:05:39,110 --> 00:05:39,990
Great.

82
00:05:40,160 --> 00:05:45,320
So we can use an arrow functions which we could not do with the arguments object we can use it as an

83
00:05:45,320 --> 00:05:50,170
array because it is an array unlike the arguments object where we had to convert it to an array.

84
00:05:50,300 --> 00:05:53,060
And lastly we have more discretion over what it collects.

85
00:05:53,150 --> 00:05:58,030
We can tell it to only collect the remaining arguments after certain specific parameters.

86
00:05:58,100 --> 00:06:03,860
Hence the term rest versus the arguments object just contains everything every argument no matter what

87
00:06:04,790 --> 00:06:08,480
so when I say that rest is kind of like the opposite of spread.

88
00:06:08,720 --> 00:06:09,780
Maybe you can see what I mean.

89
00:06:09,800 --> 00:06:13,970
We are collecting elements or collecting arguments into an array.

90
00:06:13,970 --> 00:06:16,470
We're not copying them over we're not spreading.

91
00:06:16,550 --> 00:06:22,910
If we do something like this where we are using spread we're taking a single element and breaking it

92
00:06:22,910 --> 00:06:25,780
up into multiple pieces into an array.

93
00:06:25,820 --> 00:06:30,330
We're copying it over one element at a time versus when we use rest.

94
00:06:30,380 --> 00:06:31,520
We're doing the opposite.

95
00:06:31,550 --> 00:06:36,020
We're taking multiple disparate elements arguments and combining them into an array.

96
00:06:36,080 --> 00:06:41,300
So the syntax is the same but that's why we have a different name rest versus spread.

97
00:06:41,300 --> 00:06:45,410
I guess there's a world where it could have just been spread but it's called rest.

98
00:06:45,410 --> 00:06:50,270
It has its own page in the docs because it behaves differently and it's sort of the opposite.

99
00:06:50,510 --> 00:06:52,160
So that's it for rest.

100
00:06:52,160 --> 00:06:54,440
We have a couple more new features in JavaScript.

101
00:06:54,440 --> 00:06:56,990
One of my favorite is coming up called D structuring.
