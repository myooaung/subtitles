WEBVTT
1
00:00:00.950 --> 00:00:02.950
Our Timer class is now mostly complete.

2
00:00:02.960 --> 00:00:07.460
The last thing we need to do is make sure that we can somehow emit these events or otherwise tell the

3
00:00:07.460 --> 00:00:08.420
outside world.

4
00:00:08.420 --> 00:00:11.650
That's something important just happened inside of our Timer class.

5
00:00:11.900 --> 00:00:17.960
So we're going to add in the ability to detect whenever the timer starts whenever we tick down a second

6
00:00:18.340 --> 00:00:23.330
and whenever the timer is complete as well so in other words our time remaining hits zero.

7
00:00:23.330 --> 00:00:27.830
There are many different ways that we can actually implement these things so we could actually emit

8
00:00:27.860 --> 00:00:31.550
an event from our class but we're going to take a more straightforward approach.

9
00:00:31.550 --> 00:00:35.480
We're going to say that every single time that one of these things occurs we're going to call a callback

10
00:00:35.480 --> 00:00:39.120
function that can be provided to our Timer class.

11
00:00:39.190 --> 00:00:41.600
So that's how we're going to essentially notify the outside world.

12
00:00:42.380 --> 00:00:45.980
Let's write out a little bit of test code really quickly and as soon as we do I think you're going to

13
00:00:45.980 --> 00:00:48.280
get a better sense of what we're going for with this.

14
00:00:49.000 --> 00:00:49.350
OK.

15
00:00:49.400 --> 00:00:55.350
So back inside my editor I'm gonna go down to the bottom where we create our instance of the Timer class

16
00:00:56.430 --> 00:01:01.590
right now our Timer class takes three arguments duration input start button and pause button.

17
00:01:01.590 --> 00:01:05.460
We're now going to pass in a fourth argument to this thing as well.

18
00:01:05.460 --> 00:01:10.110
The fourth argument is gonna be totally optional so we can use our timer with or without the fourth

19
00:01:10.110 --> 00:01:14.570
argument and we're going to need to make sure that we write our code out to accommodate that.

20
00:01:14.810 --> 00:01:19.560
And inside this object we're going to pass in a series of different callbacks that we're going to make

21
00:01:19.560 --> 00:01:24.350
sure get in vote at very specific times during our timers life cycle.

22
00:01:24.540 --> 00:01:26.750
So the three different callbacks are going to pass in.

23
00:01:26.760 --> 00:01:35.650
And again we're going to make sure that these are all optional are going to be on start on tick and

24
00:01:35.710 --> 00:01:43.300
on complete so if we provide these callback functions we're going to make sure that our timer calls

25
00:01:43.330 --> 00:01:46.090
each of them at some appropriate time.

26
00:01:46.150 --> 00:01:50.500
And so this is how we're going to essentially hook up our timer to the outside world and allow us to

27
00:01:50.530 --> 00:01:56.900
kind of react to the timer starting to a second ticking down or to our timer completing as well.

28
00:01:56.950 --> 00:02:01.210
This right here is what is going to allow us to really kind of segment or isolate the different parts

29
00:02:01.210 --> 00:02:06.860
of our code base so isolate the timer from the logic that actually updates the border animation.

30
00:02:06.880 --> 00:02:11.110
I remember that was the entire idea that we spoke about over here where we had said oh yeah the timer

31
00:02:11.110 --> 00:02:14.170
would be really messy if we mixed in all the border stuff.

32
00:02:14.320 --> 00:02:19.060
So this is how we're going to emit these little events or essentially signal to the outside world that

33
00:02:19.270 --> 00:02:23.670
hey timer just started timer just tick down and timer is complete.

34
00:02:24.010 --> 00:02:29.310
And so eventually in these different callback methods we'll add in some code to update that order animation

35
00:02:29.760 --> 00:02:34.450
and we could potentially add in some other code inside of each of these to do other stuff as well like

36
00:02:34.450 --> 00:02:39.760
maybe play a sound when the timer is all complete or play a ticking sound whenever on tick gets called

37
00:02:39.910 --> 00:02:45.970
and so on so in order to demonstrate how each of these are going to work let's first just focus on on

38
00:02:45.970 --> 00:02:46.640
start.

39
00:02:46.660 --> 00:02:49.300
So we're just going to think about on start for right now.

40
00:02:49.300 --> 00:02:58.630
So I'm going to say that whenever our timer starts I want to do a console log of timer started so we

41
00:02:58.630 --> 00:03:03.010
need to make sure that this OnStar callback that we are providing to our timer is going to be invoked

42
00:03:03.070 --> 00:03:09.840
the instant that we start up our timer so in order to do so we need to first go into our timer implementation.

43
00:03:09.840 --> 00:03:14.760
We're going to first update our constructor function and have it receive this object that has all these

44
00:03:14.760 --> 00:03:16.300
callbacks inside of it.

45
00:03:16.300 --> 00:03:21.740
So let's do that right away it's going to go up to my constructor so our constructor is now going to

46
00:03:21.740 --> 00:03:24.070
receive a fourth argument.

47
00:03:24.080 --> 00:03:27.660
So we're going to receive that as callbacks.

48
00:03:27.720 --> 00:03:33.240
Now I want to make sure that my timer class is still going to work even if that object is not provided.

49
00:03:33.240 --> 00:03:39.030
So the base implementation of our timer like just to get a basic timer that works we're going to make

50
00:03:39.030 --> 00:03:43.560
sure or require that we get the duration put start button and pause button or we're going to say that

51
00:03:43.560 --> 00:03:47.870
you do not have to pass in a set of callbacks at all in order to get the timer to work.

52
00:03:48.720 --> 00:03:52.260
Now for the purposes of this application there's not a good reason for that.

53
00:03:52.290 --> 00:03:54.970
I just want to show you how we would write out this code to say Oh yeah.

54
00:03:54.990 --> 00:04:00.400
The callbacks are optional so to make sure that we have some optional fourth argument here we're going

55
00:04:00.400 --> 00:04:07.170
to check and see if callbacks was provided so if we call our timer with only three arguments now just

56
00:04:07.170 --> 00:04:14.270
those three we would fail this if statement because callbacks would be undefined but if we did pass

57
00:04:14.270 --> 00:04:18.740
in an object representing our set of callbacks then we will enter this if statement.

58
00:04:18.770 --> 00:04:22.850
So inside the if statement we'll put a little bit of code to process the callbacks that are just passed

59
00:04:22.850 --> 00:04:32.810
in so I to say this dot on START is callbacks that on start so we're going to essentially just save

60
00:04:32.810 --> 00:04:36.110
a reference to the callback that was passed in.

61
00:04:36.260 --> 00:04:42.110
Now anytime that we start up our timer we're going to call this on START function that we just save

62
00:04:42.110 --> 00:04:48.270
the reference to now we are going to eventually come back to still if statement and handle the other

63
00:04:48.270 --> 00:04:49.170
two callbacks as well.

64
00:04:49.200 --> 00:04:53.700
But like I said right now we're just focused on on start okay.

65
00:04:53.730 --> 00:04:55.680
So we've now got a reference to the on start method.

66
00:04:55.680 --> 00:04:58.670
Now we need to make sure that we call it at some very specific point in time.

67
00:04:59.870 --> 00:05:04.400
So inside of the start function this is where we should probably call that callback and signal to the

68
00:05:04.400 --> 00:05:07.970
outside world a timer starting right now.

69
00:05:07.970 --> 00:05:15.130
So right before a tick I'm going to first check and see if this dot on START is defined because remember

70
00:05:15.310 --> 00:05:20.950
it is entirely possible that it won't be defined if we didn't pass in any callbacks then we never assigned

71
00:05:20.980 --> 00:05:23.570
anything like that never occurred right there.

72
00:05:23.590 --> 00:05:28.150
And so if we just tried to just directly call this dot on start we would get an error saying something

73
00:05:28.150 --> 00:05:34.880
like undefined is not a function so we do have to see and just do a quick check to see if we were given

74
00:05:34.880 --> 00:05:40.400
in on START callback if we do have it then we're going to go ahead and invoke it inside of here.

75
00:05:40.420 --> 00:05:44.100
Let's say this dot on start okay.

76
00:05:44.150 --> 00:05:44.900
That's pretty much it.

77
00:05:45.700 --> 00:05:46.590
Let's just on START.

78
00:05:46.600 --> 00:05:47.860
Let's do a save right here.

79
00:05:47.930 --> 00:05:54.750
We're going to go back over to our browser and test this out so I should be able to click on Start in

80
00:05:54.750 --> 00:05:55.460
the instant I do.

81
00:05:55.460 --> 00:05:58.950
I should see time I started well that's pretty much it.

82
00:05:58.970 --> 00:06:03.440
So that's how we're going to communicate to the outside world that something just occurred or something

83
00:06:03.440 --> 00:06:08.950
important just occurred inside of our timer now that we've got the on start wired up.

84
00:06:08.950 --> 00:06:13.720
We'll take a quick pause come back in just a moment and we will wire up the other two callbacks as well

85
00:06:13.750 --> 00:06:15.610
so on tick and on complete.
