1
00:00:00,600 --> 00:00:05,730
Now that we understand the subtle timing issue around the ad event let's talk about how we're going

2
00:00:05,730 --> 00:00:10,060
to solve it by using a package off of the NPM registry again.

3
00:00:10,090 --> 00:00:10,410
OK.

4
00:00:10,440 --> 00:00:18,420
So I'm gonna go over to NPM J S dot com once here I'm going to search for lo dash dot D bounce and we're

5
00:00:18,420 --> 00:00:24,690
going to find a package named load Ash dot D bounce so this package contains exactly one function.

6
00:00:24,810 --> 00:00:28,350
The function is intended to solve the exact problem that we have right now.

7
00:00:28,410 --> 00:00:34,640
The issue where we are going to try to call some function in our case a callback function way too often.

8
00:00:34,640 --> 00:00:40,380
So the demon's function is going to implement this sort of limitation right here where choke ADR is

9
00:00:40,380 --> 00:00:45,450
going to emit an event and try to call our callback function but rather than invoking our callback function

10
00:00:45,450 --> 00:00:51,480
right away we're going to force it to wait for 100 milliseconds to go by without any event occurring

11
00:00:51,540 --> 00:00:54,350
before we finally actually execute our callback.

12
00:00:55,300 --> 00:00:58,690
Let's make use of the load Ash dot de bounce function right here.

13
00:00:58,750 --> 00:01:03,520
You can take a look at the documentation if you want to on this page.

14
00:01:03,630 --> 00:01:07,580
The documentation for DB ounce is kind of hard to understand.

15
00:01:07,620 --> 00:01:09,510
You can give it a read if you want to.

16
00:01:09,600 --> 00:01:13,830
But once we add in this package and make use this function I think it'll be pretty clear exactly what's

17
00:01:13,830 --> 00:01:20,050
going on so to get access to this package we are going to once again go over to our terminal and run

18
00:01:20,290 --> 00:01:25,260
npm install and we're going to get load Ash dot DB outs.

19
00:01:25,350 --> 00:01:26,770
I'm gonna go over to my terminal.

20
00:01:26,770 --> 00:01:30,090
I'm going to stop our running code with a control C again.

21
00:01:30,550 --> 00:01:34,240
I'll do an npm install low dash dot D bounce

22
00:01:37,840 --> 00:01:39,220
it once it's installed.

23
00:01:39,340 --> 00:01:42,940
I'll go back over to my editor at the very top.

24
00:01:42,970 --> 00:01:44,920
I'm going to require in DB ounce

25
00:01:47,810 --> 00:01:53,190
and we're going to require load out load Ash dot DB outs like so.

26
00:01:53,250 --> 00:01:59,050
So now whenever we want to stop a function being from being called too often we're going to pass that

27
00:01:59,050 --> 00:02:02,630
function into this D bounce function that's going to return back to us.

28
00:02:02,650 --> 00:02:07,600
A new version of our function that cannot be invoked too often.

29
00:02:07,600 --> 00:02:10,290
So let's just do a very practical example here.

30
00:02:10,540 --> 00:02:15,970
I'm going to define a new function right above where we try to get access to choke ADR.

31
00:02:16,150 --> 00:02:16,890
We're going to call it.

32
00:02:16,900 --> 00:02:23,450
How about starts as eventually we're going to use us to start up a user's code inside of here.

33
00:02:23,480 --> 00:02:28,010
I'll do a console log of starting users program

34
00:02:31,190 --> 00:02:37,880
and then I'm going to wrap that ERO function right there with DB outs so I'll say D bounce and pass

35
00:02:37,880 --> 00:02:38,510
in that era.

36
00:02:38,510 --> 00:02:45,160
Function it's now we are assigning a version of our function right here to the start variable that can

37
00:02:45,190 --> 00:02:51,550
only be invoked so many milliseconds to specify how much time has to pass without this thing being called

38
00:02:51,820 --> 00:02:56,130
we're gonna pass in a millisecond value as the second argument to DB bounce.

39
00:02:56,130 --> 00:03:01,510
So right here I'm gonna put in 100 to indicate that I want 100 milliseconds to go by without seeing

40
00:03:01,510 --> 00:03:07,580
the ad event being triggered before our function should actually be invoked.

41
00:03:07,590 --> 00:03:12,900
So now I can remove the callback that we're passing directly to the ADD event listener and replace it

42
00:03:12,900 --> 00:03:16,820
with start notice that we are not invoking start right here.

43
00:03:16,830 --> 00:03:20,060
There's no parentheses we are giving a reference to that function.

44
00:03:20,130 --> 00:03:24,330
So we're just giving the name of the variable okay.

45
00:03:24,390 --> 00:03:25,540
Let's save this now.

46
00:03:25,840 --> 00:03:31,670
We'll go back over to our eternal I'm going to once again run watch it.

47
00:03:32,060 --> 00:03:38,970
And now we're going to see starting users program up your only one time it looks like it worked perfectly.

48
00:03:39,020 --> 00:03:41,770
It is exactly what we just saw inside this diagram back here.

49
00:03:41,810 --> 00:03:48,600
So choke it out tried to very quickly emit that ad event like 20 30 40 times in a row.

50
00:03:48,860 --> 00:03:54,230
But because we added in that debate its function it limited how often we could actually call our start

51
00:03:54,230 --> 00:03:54,900
function.

52
00:03:54,920 --> 00:04:00,980
So we waited essentially for 100 milliseconds to go by without seeing that ad event before our start

53
00:04:00,980 --> 00:04:04,520
function actually got invoked.

54
00:04:04,580 --> 00:04:08,650
So it looks pretty good now that we've got a good solution here and we're going to make sure that we

55
00:04:08,650 --> 00:04:10,950
don't start up our users code too often.

56
00:04:10,960 --> 00:04:11,880
Let's take another pause.

57
00:04:11,890 --> 00:04:16,030
When come back the next video we'll do a little bit of code cleanup in here and then start to make sure

58
00:04:16,030 --> 00:04:20,680
that we actually will run the user's program so quick pauses I'll see you in just a minute.
