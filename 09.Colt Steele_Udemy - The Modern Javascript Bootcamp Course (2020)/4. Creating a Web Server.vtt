WEBVTT
1
00:00:01.180 --> 00:00:05.770
I'm inside my next door J.S. file in this video we're gonna write out some code in here to get a better

2
00:00:05.800 --> 00:00:09.000
understanding of what that express library is that we installed.

3
00:00:09.010 --> 00:00:12.140
Just a moment to go before we write out any code.

4
00:00:12.160 --> 00:00:15.370
Let me show you a quick diagram okay.

5
00:00:15.410 --> 00:00:19.320
So I showed you this diagram just a moment ago in this diagram.

6
00:00:19.340 --> 00:00:27.170
Our browser is making a h TTP request to a no J.S. web server no GSK can run a web server and essentially

7
00:00:27.170 --> 00:00:30.590
handle incoming HDTV requests out of the box.

8
00:00:30.620 --> 00:00:35.750
In other words there are functions inside the no J standard library that allows us to receive network

9
00:00:35.750 --> 00:00:38.810
requests and then respond to them in some fashion.

10
00:00:38.810 --> 00:00:44.810
However the built in web server that is included inside of no JSA is standard library is kind of short

11
00:00:44.840 --> 00:00:46.010
on features.

12
00:00:46.010 --> 00:00:50.630
In other words if we use the web server included with a standard library then we're going to end up

13
00:00:50.630 --> 00:00:56.090
having to write a whole bunch of code to handle some very basic operations rather than going through

14
00:00:56.090 --> 00:00:58.260
all that pain and all that extra work.

15
00:00:58.280 --> 00:01:03.650
We very frequently decide to instead make use of a dependency called Express.

16
00:01:03.650 --> 00:01:09.740
This is a library that allows us to very quickly set up a full featured web server that can receive

17
00:01:09.800 --> 00:01:12.650
network requests and then respond to them.

18
00:01:12.680 --> 00:01:14.450
So this is the same thing more or less.

19
00:01:14.450 --> 00:01:16.400
That is include inside the node standard library.

20
00:01:16.640 --> 00:01:18.760
Well it's some extra code added into it.

21
00:01:19.940 --> 00:01:25.250
So inside my index not just file I'm going to require in that express library and I'm going to use it

22
00:01:25.370 --> 00:01:27.790
to setup a new web server.

23
00:01:27.800 --> 00:01:34.570
Let's take a look at how that is done so I'm going to first begin by removing the console log I'm going

24
00:01:34.570 --> 00:01:41.440
to require n express and then going to use the Express library to create a new variable called simply

25
00:01:41.560 --> 00:01:42.360
app.

26
00:01:42.450 --> 00:01:49.500
It's also const app is express app right here is an object that describes all the different things that

27
00:01:49.500 --> 00:01:50.950
our web server can do.

28
00:01:51.090 --> 00:01:55.380
So we're going to use this app variable quite a bit throughout this entire application.

29
00:01:55.470 --> 00:02:00.600
We're going to be customizing this object right here to tell our web server exactly what kind of requests

30
00:02:00.660 --> 00:02:04.920
it should expect to receive and what it should do whenever it does receive a request.

31
00:02:06.710 --> 00:02:10.910
Case in point right away we're going to add in something called a root handler.

32
00:02:10.940 --> 00:02:15.710
This is going to tell our web server what it should do when it receives a network request coming from

33
00:02:15.740 --> 00:02:17.060
our browser.

34
00:02:17.150 --> 00:02:24.270
So to add in a root handler we will write out app dot get the first argument will be a forward slash

35
00:02:24.270 --> 00:02:26.230
inside of a string.

36
00:02:26.240 --> 00:02:30.070
The second argument is going to be a callback function.

37
00:02:30.220 --> 00:02:34.820
This callback function is always going to be called with the same two arguments that we abbreviate as

38
00:02:34.820 --> 00:02:38.280
req and rez.

39
00:02:38.370 --> 00:02:44.940
The first argument req stands for request it is an object that represents the incoming request from

40
00:02:44.970 --> 00:02:47.790
a browser into our web server.

41
00:02:47.790 --> 00:02:54.180
The second argument of Rez is short for response and as you would guess it represents the outgoing response

42
00:02:54.300 --> 00:03:00.250
from our server back over to the browser so if we ever need to receive information coming from a user

43
00:03:00.520 --> 00:03:05.320
we're always going to find it inside of this req object if we ever want to come you indicate with the

44
00:03:05.320 --> 00:03:05.680
user.

45
00:03:05.680 --> 00:03:07.810
Or send some information back to the browser.

46
00:03:07.840 --> 00:03:13.970
We're always going to interact with the rez object instead inside of this root handler.

47
00:03:14.020 --> 00:03:15.540
So this callback function.

48
00:03:15.760 --> 00:03:20.530
I'm going to write out some code that's going to send a greeting to whoever made a request to my web

49
00:03:20.530 --> 00:03:27.370
server so I will write out red dot sent Hi there like so it's now in total.

50
00:03:27.370 --> 00:03:33.490
This little segment of code means anytime someone makes a network request to the root root of my application

51
00:03:33.660 --> 00:03:35.890
and I know it's root root because that first argument right there.

52
00:03:35.920 --> 00:03:38.580
We'll discuss exactly what that means in just a moment.

53
00:03:38.650 --> 00:03:44.320
We want to run this callback function when that callback function runs we're going to take the string

54
00:03:44.470 --> 00:03:50.510
Hi there and send it back to whoever just made a request to us.

55
00:03:50.680 --> 00:03:56.510
All right after that I'm going to tell my application to start listening for incoming network requests

56
00:03:56.960 --> 00:03:57.590
by default.

57
00:03:57.590 --> 00:04:02.620
When we run all this code right here we can't actually access it right away from a browser.

58
00:04:02.630 --> 00:04:08.090
Instead we have to tell this application to start listening for incoming network traffic on a particular

59
00:04:08.300 --> 00:04:17.380
port on our machine it's going to write out app dot listen three thousand well then put in a callback

60
00:04:17.590 --> 00:04:26.950
function and inside there I'll put in a console log of listening okay without talking about what's going

61
00:04:26.950 --> 00:04:27.930
on there quite too much.

62
00:04:27.940 --> 00:04:29.210
Let's save this file.

63
00:04:29.350 --> 00:04:34.770
We'll try to run it from our terminal well then go back over to our browser and try to access the server.

64
00:04:34.780 --> 00:04:40.690
We just put together so I can go back over to my terminal and I'm going to make sure that NPM run dev

65
00:04:40.720 --> 00:04:42.040
is still running.

66
00:04:42.160 --> 00:04:47.890
It looks like it is because I can see listening right here if you see an air right now that is totally

67
00:04:47.890 --> 00:04:48.600
fine.

68
00:04:48.640 --> 00:04:53.020
Let me show you the error you might be seeing at this point you might be seeing something like this

69
00:04:53.080 --> 00:04:57.340
something that says e Adder in use or something very similar.

70
00:04:57.550 --> 00:05:02.980
If you see that it means that some other process is already running on port three thousand on your computer.

71
00:05:03.910 --> 00:05:08.350
If you see that error message you can either try to go find that other running web server and stop it

72
00:05:08.440 --> 00:05:13.660
and then restart our server or alternatively you can just change the port right here to some other number

73
00:05:13.990 --> 00:05:20.210
like say three thousand one or two or three or four or five or whatever else once you make that change

74
00:05:20.260 --> 00:05:26.680
say the file and then you should see the error that says e Adder and use go away.

75
00:05:26.890 --> 00:05:31.790
All right now that our web server is running we can access it directly from our web browser.

76
00:05:31.840 --> 00:05:40.950
So back inside my browser I'm going to open up a new tab and navigate to a local host colon 3000 and

77
00:05:40.950 --> 00:05:44.170
then once there I see the text high there appear on the screen.

78
00:05:44.490 --> 00:05:50.640
So when we type in local those 3000 we are making an H TTP request to the running express web server

79
00:05:50.670 --> 00:05:56.930
that we just created on our local machine we make that request our Express server sees the incoming

80
00:05:56.930 --> 00:06:02.150
request and then responds with a simple text high there which the browser then receives and then prints

81
00:06:02.150 --> 00:06:07.900
out on the screen as the response so that's the basics of using express.

82
00:06:08.100 --> 00:06:12.280
There's still however as you might guess a lot to understand about the code inside of here.

83
00:06:12.300 --> 00:06:16.980
So another pause come back next video we'll talk a little bit more about what is going on behind the

84
00:06:16.980 --> 00:06:17.480
scenes.
