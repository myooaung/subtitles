1
00:00:01,200 --> 00:00:03,330
There's really just one last thing we have to take care of.

2
00:00:03,330 --> 00:00:07,280
Let me give you a quick demonstration of a bug that our current implementation has.

3
00:00:07,350 --> 00:00:13,590
If I go back over to test out J.S. I'm going to wrap this council log inside of a set interval statement

4
00:00:17,010 --> 00:00:19,770
and then as the second argument I'll put in 1000.

5
00:00:19,830 --> 00:00:23,900
So this is going to make us console log out by there once every second.

6
00:00:23,910 --> 00:00:25,400
Let's now save this.

7
00:00:25,530 --> 00:00:30,600
I'll go back over to the terminal I'll do watch it test.

8
00:00:30,630 --> 00:00:33,540
Dot J.S. and there we go.

9
00:00:33,540 --> 00:00:38,960
We get once a second by their so now I'm gonna go back over to test out G.S. and I'll change it.

10
00:00:39,020 --> 00:00:40,070
Hi there.

11
00:00:40,160 --> 00:00:40,760
Save it.

12
00:00:40,880 --> 00:00:43,690
Go back over and there's the issue.

13
00:00:43,880 --> 00:00:47,680
Whenever we make a change we do in fact start up the new copy of our program.

14
00:00:47,810 --> 00:00:52,850
But we do not terminate the old one terminating the old one is definitely key because otherwise we're

15
00:00:52,850 --> 00:00:58,910
going to end up with possibly 50 or 100 copies of the same program running after some number of changes

16
00:00:58,910 --> 00:01:05,740
are made to a program so to do so we're gonna go back over to our next dot j ust file.

17
00:01:05,970 --> 00:01:10,110
I'll go down to the start function that we were just working on and we're gonna take a look at that

18
00:01:10,110 --> 00:01:11,480
spawn function.

19
00:01:11,530 --> 00:01:15,900
Now if you watch the last video that was a hundred percent optional I said very briefly towards the

20
00:01:15,900 --> 00:01:20,580
end that when we call spawn it returns an object called a child process.

21
00:01:20,580 --> 00:01:23,140
Let's go take a look at the at no documentation.

22
00:01:23,340 --> 00:01:26,360
Once again and get a better idea of what that object is exactly.

23
00:01:27,150 --> 00:01:33,120
So I'm back at the no documentation at the child processes section I'm going to find the spawn function

24
00:01:33,620 --> 00:01:41,570
and click on it and then scroll down a little bit to where it says returns so when we called spawn we

25
00:01:41,570 --> 00:01:43,970
get back a child process object.

26
00:01:43,970 --> 00:01:45,110
We then click on that.

27
00:01:45,110 --> 00:01:50,450
We can take a look at the different functions that this child process object has.

28
00:01:50,500 --> 00:01:58,510
Then scroll down a little bit and inside of here we're going to see a function called Sub process dot

29
00:01:58,540 --> 00:01:59,350
kill.

30
00:01:59,410 --> 00:02:04,000
So as you would guess if we call the thing it's going to kill the existing process and just terminate

31
00:02:04,000 --> 00:02:09,830
it entirely go back inside of our code when we call spawn right here.

32
00:02:09,830 --> 00:02:14,980
Well we really have to do is save a reference to the process or the child process object that gets returned

33
00:02:15,590 --> 00:02:16,940
and then the next time we call start.

34
00:02:17,030 --> 00:02:20,230
We'll just make sure that we call kill on the previous process.

35
00:02:20,240 --> 00:02:21,460
That's pretty much it.

36
00:02:22,530 --> 00:02:28,000
So to do so right above start are going to first declare a variable called proc short for process.

37
00:02:28,000 --> 00:02:32,010
We're not going to call it process because remember in node process is a global variable.

38
00:02:32,080 --> 00:02:38,970
So I'm going to call it proc instead then whenever we call spawn I'm going to assign the child process

39
00:02:38,970 --> 00:02:47,040
object to that variable and then right above it before we call spawn we'll check to see if proc is already

40
00:02:47,040 --> 00:02:48,240
defined.

41
00:02:48,390 --> 00:02:52,320
If it is we'll call it proc dot kill.

42
00:02:52,330 --> 00:02:57,250
So now when we first start up the very first time we start our application proc will be undefined so

43
00:02:57,250 --> 00:03:03,070
we'll not try to kill the process well then start up our process assigned to that variable and then

44
00:03:03,070 --> 00:03:08,830
the next time we call start we'll check to see if there is a process if there is we'll kill it all right.

45
00:03:08,840 --> 00:03:10,350
So let's say this file.

46
00:03:10,560 --> 00:03:18,600
I to go back over I'm going to stop are still running process here with a control C and then do you

47
00:03:18,660 --> 00:03:19,740
watch it.

48
00:03:20,820 --> 00:03:23,850
Past J.S. again so once again I see.

49
00:03:23,850 --> 00:03:24,500
Hi there.

50
00:03:24,900 --> 00:03:32,560
If I go back over change test not j ust to say by their now the HI THERE IS DONE AND I ONLY SEE BY THEIR

51
00:03:32,560 --> 00:03:38,050
instead loving the last little change would be kind of nice to have here is to have just a console log

52
00:03:38,050 --> 00:03:43,300
from our program anytime that we kill the existing process and replace it with the new one so that would

53
00:03:43,300 --> 00:03:48,850
just be assigned to you and I or the user of our program that hey we are now have a new version of this

54
00:03:48,850 --> 00:03:55,240
program running so that we could just do a very simple console log inside of our index dot J as file

55
00:03:55,750 --> 00:04:02,390
and say something inside of here like right before we call spawn of the console dot log arrow arrow

56
00:04:02,420 --> 00:04:07,110
arrow change detect how about starting process just keep it simple.

57
00:04:07,400 --> 00:04:15,940
Starting process they'll save that go back over let's try it again I'll do watch it test out J.S. and

58
00:04:15,940 --> 00:04:23,780
I see starting process if I go make another change to test out J.S. and save it I see that same message

59
00:04:24,080 --> 00:04:24,740
and then Hi there.

60
00:04:24,740 --> 00:04:25,070
Hi there.

61
00:04:25,070 --> 00:04:27,850
Hi there let's say that definitely looks good.

62
00:04:27,910 --> 00:04:32,680
The only way that we could improve this at this point maybe would be to add in some coloring to that

63
00:04:32,680 --> 00:04:38,200
text just to kind of differentiate it from the normal console logs that our program is issuing.

64
00:04:38,200 --> 00:04:43,220
So you might recall that we added in some color console logs earlier on a previous application so we're

65
00:04:43,220 --> 00:04:44,920
going to do the same thing here.

66
00:04:44,920 --> 00:04:47,530
Remember back on NPM J dot com.

67
00:04:47,530 --> 00:04:53,920
We can look up the shock package the shock package we used to really easily add in some coloring to

68
00:04:53,920 --> 00:04:56,470
console logs that end up inside of the terminal.

69
00:04:56,590 --> 00:05:03,640
So let's install it chalk once again and we can call chalk dot say blue or some other color just to

70
00:05:03,640 --> 00:05:09,770
make sure that the hey we are restarting your process message stands out so once again I'm going to

71
00:05:09,830 --> 00:05:12,220
stop our process to an npm install.

72
00:05:12,260 --> 00:05:12,680
Chuck

73
00:05:16,480 --> 00:05:17,310
looks good.

74
00:05:17,530 --> 00:05:21,110
I'll go back over to index dot J.S. at the top.

75
00:05:21,150 --> 00:05:22,350
I will require in

76
00:05:27,140 --> 00:05:30,630
and then down at that console log that we had just added on right here.

77
00:05:30,630 --> 00:05:33,360
We will wrap that with Chuck dot.

78
00:05:33,390 --> 00:05:36,650
You can do bold or you can do a color remember it's totally up to you.

79
00:05:36,660 --> 00:05:41,030
Last time I did bolt because I said I don't know what color background terminal you have.

80
00:05:41,040 --> 00:05:44,410
And so I didn't want to pick white and then have like white text on a white background.

81
00:05:44,400 --> 00:05:46,410
This time I'm just gonna go ahead and use blue.

82
00:05:46,410 --> 00:05:49,980
I'm going to assume that you can figure out hey if the text doesn't show up you've got to change the

83
00:05:49,980 --> 00:05:50,840
color yourself.

84
00:05:52,010 --> 00:06:01,880
It's all say this once again last time I'm going to run watch it test dot James and I see that in that

85
00:06:01,880 --> 00:06:09,500
nice dark blue I can go change test out just once again and there we go.

86
00:06:09,500 --> 00:06:09,760
All right.

87
00:06:09,770 --> 00:06:12,110
Well I would say this looks pretty darn good.

88
00:06:12,130 --> 00:06:14,260
That's pretty much it for this application.

89
00:06:14,390 --> 00:06:20,060
Again the really high points here were to just make some use of some other NPM modules beyond the one

90
00:06:20,060 --> 00:06:24,440
chalk one that we had to use previously and just get a better idea of how to install them and make use

91
00:06:24,440 --> 00:06:27,880
of some of these very different modules inside reprogram.

92
00:06:27,940 --> 00:06:30,270
So I think we did a pretty good job of that overall.

93
00:06:30,410 --> 00:06:34,230
So let's take a pause right here and start on our next application in just a moment.
