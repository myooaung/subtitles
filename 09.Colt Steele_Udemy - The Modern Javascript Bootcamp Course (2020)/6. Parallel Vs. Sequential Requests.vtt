WEBVTT
1
00:00:00.270 --> 00:00:05.850
Next up I'd like to talk about an important distinction that has to do with using a weight within an

2
00:00:05.850 --> 00:00:07.180
async function.

3
00:00:07.260 --> 00:00:12.390
So to illustrate this concept which I haven't even mentioned hit I'm going to use axes again to make

4
00:00:12.390 --> 00:00:14.040
some requests asynchronously.

5
00:00:14.040 --> 00:00:14.820
It takes time.

6
00:00:14.820 --> 00:00:16.060
We'll use an async function.

7
00:00:16.080 --> 00:00:17.900
We will await that request.

8
00:00:17.910 --> 00:00:23.570
I have async emojis I have access included and we're going to work with a different API.

9
00:00:23.580 --> 00:00:27.480
This time another free API pokey API dot co.

10
00:00:27.480 --> 00:00:33.990
If we go to the endpoint API slash V2 such Pokémon then we pass in a Pokémon number like one we get

11
00:00:33.990 --> 00:00:35.880
a ton of information about that Pokemon.

12
00:00:36.840 --> 00:00:42.090
So let's request a couple different pokemon it's gonna copy that you are all we'll do something like

13
00:00:42.090 --> 00:00:50.070
axioms that get Pokemon slash 1 and let's make sure that we create an async function to help us instead

14
00:00:50.070 --> 00:00:51.060
of having to add a dot.

15
00:00:51.060 --> 00:01:00.260
Then we get a promise back so we'll make our async function async function get How about 3 Pokémon that

16
00:01:00.300 --> 00:01:01.590
will move that in there.

17
00:01:01.590 --> 00:01:03.180
We will await.

18
00:01:03.180 --> 00:01:04.790
Save that to a variable.

19
00:01:04.800 --> 00:01:07.980
We'll call this Pokey.

20
00:01:08.060 --> 00:01:10.440
It looks like poke 1 so we've got that.

21
00:01:10.590 --> 00:01:17.210
We're awaiting it now if I just want to verify everything worked why don't we console that lug pokey

22
00:01:17.340 --> 00:01:25.080
one dot data go to my page refresh.

23
00:01:25.890 --> 00:01:28.950
Oh I'm never calling my function what a moron.

24
00:01:28.950 --> 00:01:31.270
Get 3 Pokémon.

25
00:01:31.350 --> 00:01:31.890
Try again.

26
00:01:32.670 --> 00:01:36.630
Okay so now we get a ton of data about that one Pokémon.

27
00:01:36.630 --> 00:01:40.360
Where is name its name not even included on.

28
00:01:40.390 --> 00:01:40.780
There you go.

29
00:01:40.830 --> 00:01:44.640
BOB Sorry I should know that Bob saw Pokemon one.

30
00:01:45.070 --> 00:01:51.670
So if I wanted to also request 3 other pokemon I could do something like this Pokémon 2 equals awaits

31
00:01:51.690 --> 00:01:54.160
X yo stock get Pokemon slash 2.

32
00:01:54.430 --> 00:01:56.480
This could be Pokemon slash 3.

33
00:01:56.860 --> 00:02:05.300
Make sure I use the correct name and then we can consider it like Pokemon 1 2 and 3 dot data so we're

34
00:02:05.300 --> 00:02:07.040
awaiting each one.

35
00:02:07.160 --> 00:02:09.350
We're gonna make this request when it's finished.

36
00:02:09.350 --> 00:02:12.760
We get something back if it's resolved we keep moving on.

37
00:02:12.830 --> 00:02:16.310
We're not catching any errors but I assume these are going to work.

38
00:02:16.310 --> 00:02:17.020
My Internet's out.

39
00:02:17.030 --> 00:02:20.190
The API is up and there we go.

40
00:02:20.210 --> 00:02:25.850
It looks like it's pretty much instantaneous anyway but it's important to note they are happening in

41
00:02:25.850 --> 00:02:31.610
sequence so this has to finish completely before this.

42
00:02:31.790 --> 00:02:32.840
So this runs.

43
00:02:32.840 --> 00:02:35.240
We get data back then this line runs.

44
00:02:35.240 --> 00:02:36.070
We get data back.

45
00:02:36.110 --> 00:02:36.950
Then this line.

46
00:02:37.340 --> 00:02:38.900
So they're not going in parallel.

47
00:02:38.900 --> 00:02:43.750
They're not being sent off at the same time like three passenger carrier pigeons.

48
00:02:43.790 --> 00:02:44.500
Carrier pigeons.

49
00:02:44.510 --> 00:02:44.780
Thanks.

50
00:02:44.810 --> 00:02:45.580
What I mean to say.

51
00:02:45.740 --> 00:02:50.480
Three pigeons or Harry Potter owls in the night with their own letters and packages.

52
00:02:50.480 --> 00:02:52.890
No it's one going and returning.

53
00:02:52.910 --> 00:02:54.980
Then the second owl leaves and returns the third.

54
00:02:54.980 --> 00:02:58.070
Out leaves and returns they are in sequence.

55
00:02:58.070 --> 00:03:03.410
And this isn't a huge deal for something like this although we don't need them to be in sequence because

56
00:03:03.680 --> 00:03:05.390
these don't depend on one another.

57
00:03:05.450 --> 00:03:10.170
We're not using information from this first request to make our second request.

58
00:03:10.220 --> 00:03:17.430
We could if I wanted to get some UML from the response the actual data we get back I think.

59
00:03:17.490 --> 00:03:19.040
Is there something instead of species.

60
00:03:19.040 --> 00:03:19.790
Here we go.

61
00:03:19.880 --> 00:03:21.370
Species has its own you.

62
00:03:21.440 --> 00:03:28.790
I could request that we've got forms and then yeah I guess there's a you are all there and then each

63
00:03:28.790 --> 00:03:32.600
ability has its own U.R.L. to get more information about.

64
00:03:33.320 --> 00:03:39.020
So I could send a request to this you are Al for example and it would have to be in sequence.

65
00:03:39.020 --> 00:03:43.400
We couldn't send them off at the exact same time because we're waiting for the first request to come

66
00:03:43.400 --> 00:03:45.800
back before we make the second request.

67
00:03:45.800 --> 00:03:48.820
But here they have nothing to do with one another.

68
00:03:48.920 --> 00:03:50.610
They are independent endpoints.

69
00:03:50.640 --> 00:03:52.250
They're not related.

70
00:03:52.250 --> 00:03:56.330
Other than the fact that they're with the same API we're not depending on this one.

71
00:03:56.330 --> 00:04:03.470
First in order to make this one so we can rewrite this to have a request go in parallel mean a duplicate

72
00:04:03.470 --> 00:04:07.780
this all just right Sequential Requests

73
00:04:10.520 --> 00:04:13.020
and then this one will be parallel.

74
00:04:13.130 --> 00:04:17.030
I'm not going to await get rid of those awaits here.

75
00:04:17.030 --> 00:04:21.190
I still need to wait at some point but I'm not waiting there.

76
00:04:21.200 --> 00:04:35.240
Then down here I can oh poky one awaits pokey 2 and a waits poky 3 so this may not seem like a big distinction

77
00:04:35.630 --> 00:04:40.030
but it is as far as the way these are actually happening behind the scenes.

78
00:04:40.100 --> 00:04:41.990
It's a pretty massive difference.

79
00:04:41.990 --> 00:04:44.750
So here we are not we're not using a wait anymore.

80
00:04:44.750 --> 00:04:48.910
When we actually send off the request like we were here.

81
00:04:49.340 --> 00:04:52.660
So this means that we're sending off the request it returned to promise.

82
00:04:52.670 --> 00:05:00.440
So pokey 1 will contain a promise if I were to console that log it here console that log pokey 1 refresh

83
00:05:01.340 --> 00:05:04.970
we see that we get a promise here and it's pending at this point.

84
00:05:04.970 --> 00:05:10.160
All three of them are probably pending unless it's a incredibly fast request which is highly unlikely

85
00:05:10.160 --> 00:05:14.590
that it's going to be javascript speed by the time it gets to this line.

86
00:05:14.590 --> 00:05:19.450
They probably won't be back but then we're saying all right await the response that comes back.

87
00:05:19.460 --> 00:05:25.070
Await the response await the response but the requests are being sent roughly at the same time.

88
00:05:25.100 --> 00:05:29.960
I mean as fast as JavaScript can send them off or the browser can send them off versus here.

89
00:05:29.960 --> 00:05:33.550
We're fully waiting for this response to come back from the request.

90
00:05:33.620 --> 00:05:37.850
We're waiting for the promise to be resolved before we move on.

91
00:05:37.850 --> 00:05:40.030
Same thing same thing here.

92
00:05:40.070 --> 00:05:43.940
So I'm going to illustrate the difference with something that is slower so you can see it in just a

93
00:05:43.940 --> 00:05:44.290
moment.

94
00:05:45.020 --> 00:05:50.090
But let's make sure we can actually use the data right now what I have will not work.

95
00:05:50.250 --> 00:05:52.950
A wait pokey you want to wait pokey to await pokey 3.

96
00:05:53.030 --> 00:05:59.930
We are awaiting the promises we're making sure they're resolved but pokey one dot data does not exist.

97
00:06:00.050 --> 00:06:02.150
Pokey 1 is the promise.

98
00:06:02.540 --> 00:06:09.680
If I look at what I got printed out 3 undefined undefined undefined undefined up here pokey 1 pokie

99
00:06:09.680 --> 00:06:13.160
2 in pokie 3 are not the promises.

100
00:06:13.160 --> 00:06:20.330
This is a promise but when you put a weight there it waits for a resolved value and stores that resolved

101
00:06:20.330 --> 00:06:28.250
value in the variable so pokie 1 is an actual response it's a value we get back here pokie 1 is a promise

102
00:06:29.330 --> 00:06:34.640
so pokey ones should be resolved by the end but it doesn't actually have it's not a variable storing

103
00:06:34.640 --> 00:06:35.140
the value.

104
00:06:35.810 --> 00:06:38.630
So we could do this maybe promise one.

105
00:06:38.660 --> 00:06:47.690
Just give them a different name from two from three and then we can await prom one two and three and

106
00:06:47.690 --> 00:06:49.460
save those two variables.

107
00:06:49.460 --> 00:06:53.830
So we would do something like this const pokey 1.

108
00:06:54.140 --> 00:07:00.580
I need to change those numbers two and three equals a weight that promise a weight.

109
00:07:00.650 --> 00:07:02.990
This promise await that promise.

110
00:07:02.990 --> 00:07:05.660
So the three requests are sent off independently.

111
00:07:05.660 --> 00:07:09.800
They're not in a sequence or not depending on one finishing before the next send.

112
00:07:09.950 --> 00:07:11.930
They go off on their own into the night.

113
00:07:11.930 --> 00:07:12.530
They come back.

114
00:07:12.530 --> 00:07:20.250
We are waiting for a resolved value that resolve value will then be stored in pokey 1 2 and 3 fingers

115
00:07:20.250 --> 00:07:25.470
crossed cannot access pokie 1 before initialization out.

116
00:07:25.640 --> 00:07:31.530
Yes we change the name if we look at prom one it's a pending promise.

117
00:07:31.670 --> 00:07:40.780
Then down here if I were to look at problem 1 again for some reason console that log from 1 it was pending.

118
00:07:40.780 --> 00:07:48.320
Now it's resolved the value it was resolved with is this object this object here that is stored inside

119
00:07:48.320 --> 00:07:51.110
of pokie 1 now.

120
00:07:51.110 --> 00:07:53.000
So the promise was not resolved.

121
00:07:53.000 --> 00:07:53.930
It was pending.

122
00:07:53.960 --> 00:07:56.480
Now it's resolved because we awaited it.

123
00:07:56.540 --> 00:07:59.400
Then we have access to all three of those pieces of data.

124
00:07:59.420 --> 00:08:01.210
We can do something with them.

125
00:08:01.250 --> 00:08:05.150
So these were sent in parallel which is a big distinction.

126
00:08:05.240 --> 00:08:11.480
If you do not care that one request must be finished before the next is done but in a case like this

127
00:08:11.780 --> 00:08:12.690
it doesn't matter.

128
00:08:12.710 --> 00:08:14.550
It's better to do them in parallel.

129
00:08:14.660 --> 00:08:16.980
So now let me illustrate the difference for you.

130
00:08:17.450 --> 00:08:21.770
And I'm also going to show you another way to clean this up so we don't have to have all these variable

131
00:08:21.770 --> 00:08:22.600
names.

132
00:08:22.880 --> 00:08:29.420
But first I'll show you a much easier to see visualization of the difference between a waiting in sequence

133
00:08:29.420 --> 00:08:31.730
versus a waiting in parallel.

134
00:08:31.730 --> 00:08:36.440
These responses or the requests are coming back so lightning quick that it's actually almost impossible

135
00:08:36.440 --> 00:08:39.650
to see with your own eye that they are slower.

136
00:08:39.650 --> 00:08:44.140
If we do them in sequence versus parallel it just happens in a split second they all show up at once.

137
00:08:44.210 --> 00:08:45.600
So I'm going to do something slower.

138
00:08:46.010 --> 00:08:52.640
Let's make a function called Change body color which will accept a color and a delay.

139
00:08:52.670 --> 00:08:58.640
It will return a promise and after this delay it will change the body color.

140
00:08:58.760 --> 00:09:02.900
So our promise is going to have our resolve reject parameters.

141
00:09:02.900 --> 00:09:04.160
Standard stuff.

142
00:09:04.340 --> 00:09:12.020
Then we'll have a set time out where we have a function to run after a delay so that delay will be passed

143
00:09:12.020 --> 00:09:12.960
in.

144
00:09:12.980 --> 00:09:18.050
So I would call this like change body color to teal after one second.

145
00:09:18.260 --> 00:09:20.840
So that will be one second there said time out.

146
00:09:21.050 --> 00:09:22.590
After that one second is up.

147
00:09:22.670 --> 00:09:33.200
We will set documents body style background color to equal color and then I'll resolve the promise.

148
00:09:33.200 --> 00:09:35.060
I won't worry about rejecting it.

149
00:09:35.180 --> 00:09:41.750
I guess we could reject if someone passes in a non color or an ugly color but we won't bother.

150
00:09:41.750 --> 00:09:45.130
It's not really the point of this demo so let's make sure it works.

151
00:09:45.200 --> 00:09:46.360
After one second.

152
00:09:46.550 --> 00:09:49.010
Hopefully the body changes to deal.

153
00:09:49.040 --> 00:09:49.950
There we go.

154
00:09:49.970 --> 00:09:58.380
OK so now let's make an async function and we'll call this one light show and all we're going to do

155
00:09:59.280 --> 00:10:05.220
is call changed body color and a weight that then we'll do it again.

156
00:10:05.340 --> 00:10:15.090
Change body color to pink after a thousand milliseconds we'll call light show and see what happens.

157
00:10:15.540 --> 00:10:20.640
So async await await this promise when it's resolved.

158
00:10:20.640 --> 00:10:21.750
Then move on to this line.

159
00:10:23.600 --> 00:10:26.820
So we go to Teel after a second and then pink.

160
00:10:27.020 --> 00:10:27.650
OK.

161
00:10:27.890 --> 00:10:29.890
So I'll add a couple more colors here.

162
00:10:29.900 --> 00:10:31.920
Let's see teal pink.

163
00:10:31.930 --> 00:10:38.070
How about indigo and violet.

164
00:10:38.280 --> 00:10:39.060
So right now.

165
00:10:39.060 --> 00:10:40.950
These are happening in sequence.

166
00:10:40.950 --> 00:10:42.190
The first thing finishes.

167
00:10:42.180 --> 00:10:44.340
Then the second and the third then the fourth.

168
00:10:44.610 --> 00:10:46.540
Which is probably what we would want.

169
00:10:46.680 --> 00:10:52.830
But if these were requests taking one second and they are not related we may not want that which is

170
00:10:52.830 --> 00:10:54.240
what we saw up here.

171
00:10:54.240 --> 00:10:57.050
So now let's see how this would work in parallel.

172
00:10:57.420 --> 00:10:59.940
All comment out this version.

173
00:10:59.940 --> 00:11:03.580
In parallel I would save each of these to a variable.

174
00:11:03.690 --> 00:11:09.680
So I'm just going to select all of those and save it to a variable or I could put them in an array.

175
00:11:09.680 --> 00:11:16.000
I'll show you something called promised that all in the next video I'll just go with P. 1 2 and 3.

176
00:11:16.040 --> 00:11:19.200
I don't know the shortcut to do those numbers easily.

177
00:11:19.210 --> 00:11:21.830
I have to manually type them.

178
00:11:21.940 --> 00:11:22.830
Okay.

179
00:11:23.210 --> 00:11:27.170
And then we'll do a wait P1 awaits P2.

180
00:11:27.270 --> 00:11:28.020
Oh wait.

181
00:11:28.160 --> 00:11:31.190
P 3 and P is just standing for promise.

182
00:11:31.250 --> 00:11:36.680
So awaits P 4 what do you think we'll see.

183
00:11:36.740 --> 00:11:40.490
So all four these functions are going to run roughly at the same time.

184
00:11:40.490 --> 00:11:45.650
This one will run first then this on then this one they all take a second and they change the background

185
00:11:45.650 --> 00:11:48.920
color and they resolve that promise that is returned.

186
00:11:49.100 --> 00:11:54.500
So we await them down here rather than waiting for the full second to be up to then run to the next

187
00:11:54.500 --> 00:11:55.210
one.

188
00:11:55.280 --> 00:11:57.660
These will happen pretty much at the same time.

189
00:11:58.010 --> 00:12:00.190
So this is what we see.

190
00:12:00.500 --> 00:12:04.730
One second straight to what was the last color Violet.

191
00:12:04.730 --> 00:12:07.760
We don't see those pauses along the way.

192
00:12:07.790 --> 00:12:12.850
So this took only one second maybe a little tiny tiny bit more than one second.

193
00:12:12.860 --> 00:12:15.730
This took four plus seconds.

194
00:12:15.830 --> 00:12:16.890
Very different.

195
00:12:16.910 --> 00:12:19.730
And here we get a different light show effect.

196
00:12:19.730 --> 00:12:24.710
This is probably more desirable if either of them is at all desirable.

197
00:12:24.710 --> 00:12:31.100
This is more interesting but with requests if you don't need them to happen in sequence do it in parallel

198
00:12:31.940 --> 00:12:37.620
it makes way more sense to just have them go at the same time and await all of them at the end.

199
00:12:37.640 --> 00:12:42.320
Speaking of which I'll show you an even simpler way of doing that in the next and final video and the

200
00:12:42.320 --> 00:12:44.270
section coming up after this.

201
00:12:44.330 --> 00:12:46.200
I think this is a good place to stop.

202
00:12:46.310 --> 00:12:51.440
So we saw how we can make requests in sequence which is useful when you need one thing to come back

203
00:12:51.440 --> 00:12:52.560
before the next.

204
00:12:52.670 --> 00:12:54.300
Especially if they are dependent.

205
00:12:54.410 --> 00:12:59.380
You're trying to use some data from the first request to then send off your second which I wasn't.

206
00:12:59.840 --> 00:13:04.970
So then I showed you doing it in parallel where you don't await them at the same time that you were

207
00:13:04.970 --> 00:13:08.870
actually creating the promise and sending that request off.

208
00:13:08.870 --> 00:13:14.660
Instead you send the request off you await them afterwards and then we saw an illustration of visually

209
00:13:14.840 --> 00:13:18.270
the difference using this light show function.

210
00:13:18.310 --> 00:13:18.580
Okay.

211
00:13:18.610 --> 00:13:22.540
So next I'm going to show you one last week and we'll be done with async functions.
