1
00:00:00,680 --> 00:00:02,900
We now have our neighboring coordinate pairs right here.

2
00:00:02,900 --> 00:00:06,460
So now we need to take that list of coordinate pairs and randomize them.

3
00:00:06,470 --> 00:00:12,140
This is going to make sure that there's a strong randomization factor inside of our maze if we always

4
00:00:12,140 --> 00:00:14,310
use this same order to visit our neighbors.

5
00:00:14,310 --> 00:00:17,330
Then ask maze is going to always look the exact same.

6
00:00:17,330 --> 00:00:23,050
So this is what is going to generate our randomness inside of our maze now unfortunately the javascript

7
00:00:23,050 --> 00:00:27,630
language does not have any functionality built into it to randomize the elements inside of an array.

8
00:00:27,970 --> 00:00:32,680
So we're going to have to write out a little function to do that for us so I can go up to the top of

9
00:00:32,680 --> 00:00:38,110
this section where I've got my maze generation comment and inside of here I'm going to define a new

10
00:00:38,110 --> 00:00:41,370
function called shuffle.

11
00:00:41,430 --> 00:00:46,980
So this is going to take some array and then randomly reorder all the elements inside of it.

12
00:00:46,980 --> 00:00:50,220
We're going to write out the code for this pretty quickly and I'll explain what's going on along the

13
00:00:50,220 --> 00:00:56,990
way instead of shuffle I'm going to first get the length of the array and assign it to a variable that

14
00:00:57,020 --> 00:01:03,870
I'll call counter I'll then set up a while loop that I'm going to run until counter or while counter

15
00:01:04,140 --> 00:01:11,710
is greater than 0 then inside the while loop I'm going to get a random index inside of the array so

16
00:01:11,750 --> 00:01:22,830
I'll say let index or some constant X is math dot floor math dot random times counter that's going to

17
00:01:22,830 --> 00:01:30,040
be a random index inside of the array and then going to decrease my counter variable by 1.

18
00:01:30,040 --> 00:01:31,860
So Kanter minus minus.

19
00:01:32,200 --> 00:01:38,080
And then finally I'm going to swap the elements that are at the array at element or at index of index

20
00:01:38,470 --> 00:01:40,150
and at the index of counter.

21
00:01:40,150 --> 00:01:45,320
So this is what is going to be the actual kind of swapping of elements to randomize the order it's all

22
00:01:45,320 --> 00:01:55,580
say Collins temp short for temporary is a are at counter well then update the value at index of counter

23
00:01:55,790 --> 00:02:04,920
to a r at index and I'll update the element at index to be whatever was previously at counter.

24
00:02:05,040 --> 00:02:09,810
And then finally at the bottom I will return the array.

25
00:02:09,850 --> 00:02:15,790
So again we're finding some random element side there and swapping whatever that random index is with

26
00:02:15,790 --> 00:02:23,190
what it whatever is that counter that will ensure that we swap each element at least one time okay.

27
00:02:23,270 --> 00:02:27,310
So let's go back down to where we generate all of our neighbors.

28
00:02:27,540 --> 00:02:35,300
So right here I'm going to wrap that function with shuffle and then do a console log right after it's

29
00:02:36,890 --> 00:02:41,090
not to really test this out and make sure that we've got some correct values being generated in that

30
00:02:41,090 --> 00:02:47,150
they are in some random order we should probably stick in some starting row and column to our function

31
00:02:47,450 --> 00:02:53,990
that we know is going to have some proper input or excuse me proper output so we know that if we start

32
00:02:53,990 --> 00:03:06,580
at this 1 1 index right here we should see outputs of 0 1 1 0 1 2 and 2 1 so if we stick in 1 1 those

33
00:03:06,590 --> 00:03:10,370
the outputs we should get but they should be in some a randomized order that's gonna make this a lot

34
00:03:10,370 --> 00:03:16,100
easier to test than if we stick in the random start row and start column I'm going to update those two

35
00:03:16,100 --> 00:03:20,390
values be 1 for just right now I'm going to change it back in just a moment I'm also going to remove

36
00:03:20,390 --> 00:03:24,650
the console log of grid just so we can read the console a little bit more easily without seeing a bunch

37
00:03:24,650 --> 00:03:31,480
of console log start to stack up all right so I'll save this I'm gonna go back over and refresh.

38
00:03:31,620 --> 00:03:37,620
So here are the four coordinate pairs that are around 1 1 they should be in some randomized order let's

39
00:03:37,620 --> 00:03:39,660
see I've got 1 0.

40
00:03:39,840 --> 00:03:43,530
Let's check each of these off one by one I know it'll be a little bit disorienting but let's go through

41
00:03:43,530 --> 00:03:43,740
it.

42
00:03:44,070 --> 00:03:44,970
So 1 0.

43
00:03:44,970 --> 00:03:55,910
That's the first one we've got that next is 0 1 right there next is 2 1 right there and then finally

44
00:03:55,940 --> 00:03:58,210
1 2 right there.

45
00:03:58,230 --> 00:04:00,340
So we definitely have all four.

46
00:04:00,380 --> 00:04:01,370
Well that's fantastic.

47
00:04:01,370 --> 00:04:03,710
Now the only other thing we have to do is make sure that they get randomized.

48
00:04:03,710 --> 00:04:06,230
Each time they'll do a another refresh.

49
00:04:06,800 --> 00:04:12,820
So I now see them in a very different order and another different order and another different order.

50
00:04:12,890 --> 00:04:16,920
So I'd say that we definitely have this kind of shuffling logic down pat.

51
00:04:17,020 --> 00:04:18,750
So this is looking pretty good.

52
00:04:18,940 --> 00:04:20,810
I'm going to remove that console log.

53
00:04:20,950 --> 00:04:24,430
We'll take a pause right here and when we come back the next video we're going to make sure that we

54
00:04:24,430 --> 00:04:29,860
add in some logic to iterate through each of these different neighboring pairs and run some logic on

55
00:04:29,860 --> 00:04:30,520
each of them.

56
00:04:30,580 --> 00:04:32,530
So quick pause and I'll see you in just a minute.
