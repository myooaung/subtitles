1
00:00:00,960 --> 00:00:03,660
We just put together our create function inside there.

2
00:00:03,660 --> 00:00:08,010
We wrote out some code to take our big list of records and save them onto the hard drive inside of a

3
00:00:08,010 --> 00:00:08,660
file.

4
00:00:08,820 --> 00:00:12,510
There was actually a goal of this right all method down here so really quickly.

5
00:00:12,540 --> 00:00:17,550
Let's take that one line of code that takes all of our files and saves them to the harddrive and extract

6
00:00:17,550 --> 00:00:26,170
it into a new helper function called Write all back inside my editor right after the create method I'm

7
00:00:26,170 --> 00:00:32,830
going to define another async method called Write all we're gonna call that with some list of records

8
00:00:32,830 --> 00:00:38,420
that need to be saved and I'm going to take that line that we have right inside of create that we just

9
00:00:38,420 --> 00:00:39,150
put together.

10
00:00:39,230 --> 00:00:46,630
I'm going to cut it and put it into right all or then make sure that I call that from create so I'll

11
00:00:46,630 --> 00:00:54,500
do in await this dot right all and I'll pass in my list of records.

12
00:00:54,520 --> 00:00:54,760
All right.

13
00:00:54,800 --> 00:01:01,430
Let's do another quick save and test just to make sure this still works it's all save run again.

14
00:01:01,490 --> 00:01:03,940
You still get some out but they're very good.

15
00:01:03,940 --> 00:01:08,470
And before we call it quits right there there's other one other quick change very quick change I want

16
00:01:08,470 --> 00:01:13,220
to put together inside of our users not just on file I've now saved many different users.

17
00:01:13,390 --> 00:01:17,440
And unfortunately you can see it they're all being printed out on the same line which makes this file

18
00:01:17,500 --> 00:01:19,400
really hard to read.

19
00:01:19,450 --> 00:01:24,640
There's actually a little trick we can use to make that file a bit easier to understand back inside

20
00:01:24,640 --> 00:01:27,160
of users dot J.S. I'm going to find right all.

21
00:01:27,280 --> 00:01:28,570
Here it is right here.

22
00:01:28,570 --> 00:01:33,790
I'll find where we call Jason dot string ify as the second argument to that right after records.

23
00:01:33,790 --> 00:01:35,690
I'm going to pass in null.

24
00:01:36,010 --> 00:01:38,460
And then as a third argument I'll put in the number two.

25
00:01:38,500 --> 00:01:43,140
Like so I'll save this and without saying what those arguments are doing.

26
00:01:43,180 --> 00:01:47,420
Let's run this again really quickly so I'll do another node.

27
00:01:47,480 --> 00:01:54,510
Users dot Yes and if I now go back over to the users dot Jason File inside my repositories directory

28
00:01:55,020 --> 00:01:59,480
I'll see that now all the contents are kind of pretty printed inside of here.

29
00:01:59,570 --> 00:02:01,590
So what's going on with these arguments.

30
00:02:01,610 --> 00:02:07,370
Let's second argument to Jason string ify is a custom form matter essentially for every record that

31
00:02:07,370 --> 00:02:11,200
we turn into a string or every kind of property that we turn into a string.

32
00:02:11,240 --> 00:02:15,560
We can actually pass in a function to customize how that thing is evaluated.

33
00:02:15,950 --> 00:02:20,000
In this case we don't want to do any custom format or some putting in a value of No.

34
00:02:20,120 --> 00:02:21,920
The third argument is what we really care about.

35
00:02:22,280 --> 00:02:28,610
If we put in a number there that designates the level of indentation to use inside of our string that

36
00:02:28,610 --> 00:02:29,960
we create.

37
00:02:29,960 --> 00:02:33,600
So that is really changing the indentation of the string not of the file.

38
00:02:33,830 --> 00:02:37,250
The file is just a representation of the string that we write out.

39
00:02:37,250 --> 00:02:44,530
So now with every deeper level of nesting we're getting two spaces being put down well definitely a

40
00:02:44,530 --> 00:02:47,940
lot easier to read than what we had before.

41
00:02:48,050 --> 00:02:48,330
All right.

42
00:02:48,330 --> 00:02:49,890
So that's the right all function.

43
00:02:49,890 --> 00:02:51,300
Another quick pause.

44
00:02:51,300 --> 00:02:53,490
When come back we're going to move on to our next method.
