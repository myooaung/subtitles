1
00:00:00,270 --> 00:00:02,160
Arrays are great as we've seen.

2
00:00:02,160 --> 00:00:05,970
They're really useful especially when you have ordered information.

3
00:00:06,160 --> 00:00:10,360
But here's an example of something that an array would not really be a great fit for.

4
00:00:10,440 --> 00:00:12,240
How would we store this data.

5
00:00:12,240 --> 00:00:14,910
It's from a Fitbit or some sort of health app.

6
00:00:14,910 --> 00:00:20,310
Any one of them where it's tracking your total steps the number of miles you walk to your average restful

7
00:00:20,310 --> 00:00:20,690
sleep.

8
00:00:20,700 --> 00:00:21,810
Different types of data.

9
00:00:22,310 --> 00:00:27,090
But let's say I want to store it in JavaScript and I want it all to be grouped together.

10
00:00:27,090 --> 00:00:28,490
This is for one person.

11
00:00:28,590 --> 00:00:33,630
So then I could have another person who has their own set of data the number of steps the number of

12
00:00:33,630 --> 00:00:35,010
miles and so on.

13
00:00:35,010 --> 00:00:36,660
How would we group it together.

14
00:00:36,660 --> 00:00:39,440
Well if we used an array we definitely could.

15
00:00:39,540 --> 00:00:43,780
It just would be confusing and we'd have to come up with some arbitrary rules.

16
00:00:43,920 --> 00:00:49,100
We would probably do something like wrong window const Fitbit data.

17
00:00:49,380 --> 00:00:50,850
It's Fitbit capitalize.

18
00:00:50,880 --> 00:00:58,140
I don't know do it like that Fitbit data equals an array and then the first element would just be total

19
00:00:58,140 --> 00:01:03,570
steps or that could be the last element we would need to decide on some consistent order.

20
00:01:03,660 --> 00:01:06,570
So let's say the first thing is total steps 308.

21
00:01:06,630 --> 00:01:11,000
I'm not going to get these numbers exactly three hundred eight thousand or something.

22
00:01:11,040 --> 00:01:13,160
Total flaws would be the next one.

23
00:01:13,230 --> 00:01:14,570
Total Miles.

24
00:01:14,580 --> 00:01:17,720
So how would we really keep this straight.

25
00:01:17,730 --> 00:01:19,460
It's not easy.

26
00:01:19,710 --> 00:01:22,410
I'll just do to add three values.

27
00:01:22,440 --> 00:01:26,680
You look at this and it's not clear at all what it actually is.

28
00:01:26,820 --> 00:01:31,440
And even if you're the person who wrote it you need like a little key or you need to write down maybe

29
00:01:31,440 --> 00:01:33,790
in comments what each piece is.

30
00:01:34,080 --> 00:01:40,430
And then if we had someone else's Fitbit data let's go with Lucy's Fitbit data.

31
00:01:40,440 --> 00:01:46,340
Lucy like that and there's different numbers you would want to be consistent.

32
00:01:46,350 --> 00:01:52,270
You wouldn't want to put the number of miles first you want to make sure total steps comes first.

33
00:01:52,320 --> 00:01:58,140
So the point is arrays are great but this sort of data doesn't really work well in an array situation.

34
00:01:58,140 --> 00:02:04,260
You could also just make completely separate variables over and over and over could do Lucy total steps

35
00:02:05,790 --> 00:02:14,190
equals some number and then you could do Lucy average miles or whatever and have 20 different variables

36
00:02:14,250 --> 00:02:18,930
for one person but then they're not grouped together in any way except for the fact that they start

37
00:02:18,930 --> 00:02:20,280
with Lucy.

38
00:02:20,280 --> 00:02:28,350
So this all brings us to our next data structure really commonly use one called the object so an object

39
00:02:28,410 --> 00:02:34,380
allows us to store data where we can associate things in group pieces of data together but rather than

40
00:02:34,380 --> 00:02:40,380
simply ordering data based off of an index to zero with item the first the second like an array does.

41
00:02:40,380 --> 00:02:42,300
We can specify labels.

42
00:02:42,480 --> 00:02:46,910
We can say total steps is three hundred and eight thousand average.

43
00:02:46,920 --> 00:02:49,920
Good sleep is two hours and 13 minutes.

44
00:02:49,920 --> 00:02:51,720
Average calorie burn and so on.

45
00:02:51,720 --> 00:02:54,060
We define these pairs of information.

46
00:02:54,150 --> 00:02:58,720
We'll take a quick step back from the syntax to talk about objects at a high level.

47
00:02:58,980 --> 00:03:01,610
Objects are collections of properties.

48
00:03:01,710 --> 00:03:04,620
We've seen properties before when we have a string.

49
00:03:05,910 --> 00:03:08,610
We have dot length dot length.

50
00:03:08,640 --> 00:03:12,180
As I mentioned it very early on is something called a property.

51
00:03:12,180 --> 00:03:15,120
Now string seems like it's a string right.

52
00:03:15,120 --> 00:03:17,540
A SDH SD is a string.

53
00:03:17,580 --> 00:03:23,100
Why does it have a property that is a question we'll answer later when we talk about objects in general

54
00:03:23,100 --> 00:03:24,240
in JavaScript.

55
00:03:24,240 --> 00:03:29,160
One thing I want to get out of the way right now is we're talking about objects in a limited capacity

56
00:03:29,400 --> 00:03:34,170
but objects are everywhere in JavaScript and that's something we will revisit and come back to quite

57
00:03:34,170 --> 00:03:36,150
a few times but we're not there yet.

58
00:03:36,180 --> 00:03:41,750
So for now objects are collections of properties and properties are pairs of information.

59
00:03:41,760 --> 00:03:44,700
We have a key and a value.

60
00:03:44,910 --> 00:03:46,100
So over here I'm kind of.

61
00:03:46,140 --> 00:03:48,840
This is my mental image of an object.

62
00:03:48,990 --> 00:03:54,210
If you compare it to what I had for an array where we had a very ordered pill container with the first

63
00:03:54,210 --> 00:03:59,820
item a second item the third item in object is more like a blob that holds different pieces of data

64
00:03:59,880 --> 00:04:03,900
key and value pairs where there's not necessarily an order.

65
00:04:03,900 --> 00:04:05,340
It's not all about the order.

66
00:04:05,430 --> 00:04:07,690
It's about storing pairs of information.

67
00:04:07,920 --> 00:04:13,170
And we don't use a number to access our data out like we do with an array where we say give me the index

68
00:04:13,170 --> 00:04:15,340
of one item instead.

69
00:04:15,420 --> 00:04:21,090
If this was an object here we would say give me city please or give me zip or age and then you get the

70
00:04:21,090 --> 00:04:25,670
corresponding value so properties consist of key value pairs.

71
00:04:25,860 --> 00:04:28,980
And here's another example slightly different style.

72
00:04:29,070 --> 00:04:35,840
We have user name could be a key and then crazy cat lady would be a value upvotes is a key.

73
00:04:35,860 --> 00:04:43,080
7 is the value text is a key and great post is a value in other languages like Python objects are actually

74
00:04:43,080 --> 00:04:46,220
called dictionaries so dictionaries make sense.

75
00:04:46,220 --> 00:04:50,860
I like the name because if you think of how you use a dictionary you have the key.

76
00:04:51,000 --> 00:04:56,580
You have some words you're trying to look up and then you go and find it in this dictionary and get

77
00:04:56,580 --> 00:04:59,520
the corresponding value the corresponding definition.

78
00:04:59,520 --> 00:05:00,740
It doesn't work the other way around.

79
00:05:00,780 --> 00:05:07,470
You don't have the definition in mind like emotional outburst you don't open the dictionary and just

80
00:05:07,530 --> 00:05:12,410
try and find a definition for emotional outburst and then find out what the word is.

81
00:05:12,450 --> 00:05:15,720
That means emotional outburst that would be a really long process.

82
00:05:15,750 --> 00:05:19,910
Instead you have a key and it's kind of a one way relationship.

83
00:05:19,920 --> 00:05:24,250
You put the key in and you figure out the corresponding value fan Todd.

84
00:05:24,300 --> 00:05:26,560
Apparently I don't know if I'm pronouncing that right.

85
00:05:26,580 --> 00:05:29,820
I just googled interesting words and put them in here.

86
00:05:30,630 --> 00:05:34,530
So even though in JavaScript we don't call these structures dictionaries.

87
00:05:34,530 --> 00:05:36,430
I like this metaphor or this idea.

88
00:05:36,690 --> 00:05:42,240
And again python in some other languages do use the term dictionary so to wrap up here before we actually

89
00:05:42,240 --> 00:05:48,810
dive into creating our own objects an object is just a container that contains information in the form

90
00:05:48,810 --> 00:05:49,910
of pairs.

91
00:05:49,980 --> 00:05:55,320
Key value pairs you store them together when you put a value in there you give it a corresponding key

92
00:05:55,650 --> 00:06:00,530
and you can use that key to find that value later on and for a lot of types of data.

93
00:06:00,840 --> 00:06:02,910
It's a really good choice compared to an array.

94
00:06:02,910 --> 00:06:07,110
This is so much easier to work with if we have a label for each value.

95
00:06:07,110 --> 00:06:08,370
Give me the total steps.

96
00:06:08,370 --> 00:06:12,020
What is the average good sleep or what is the value for workouts.

97
00:06:12,030 --> 00:06:18,800
This week five of seven vs. what we started out with where we have an array we can store the same values

98
00:06:18,890 --> 00:06:21,820
it's just really difficult to understand what's going on.

99
00:06:21,830 --> 00:06:25,910
It's difficult to enforce these rules and to write code that interacts with this.

100
00:06:25,940 --> 00:06:29,520
It all relies on some arbitrary order that we decided on.

101
00:06:29,540 --> 00:06:31,270
So in a way doesn't really make sense.

102
00:06:31,460 --> 00:06:36,740
An object does but on the other side of things there's lots of data that makes sense really to only

103
00:06:36,740 --> 00:06:38,870
use an array for compared to an object.

104
00:06:38,890 --> 00:06:40,820
If order is paramount.

105
00:06:40,820 --> 00:06:45,470
If we're storing race results from a marathon we definitely want to store them with an array so that

106
00:06:45,470 --> 00:06:48,590
the order is tied in to the actual information.

107
00:06:48,590 --> 00:06:49,520
So I'll be quiet now.

108
00:06:49,670 --> 00:06:51,740
We'll get to the syntax in the next video.
