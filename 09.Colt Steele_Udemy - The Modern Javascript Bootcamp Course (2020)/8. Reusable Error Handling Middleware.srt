1
00:00:00,590 --> 00:00:00,930
All right.

2
00:00:00,950 --> 00:00:05,540
One last thing inside of our post request handler to create a new product inside of here.

3
00:00:05,540 --> 00:00:10,340
You'll note that we've got the code right here to handle a validation results from our different validators

4
00:00:10,850 --> 00:00:15,420
and just like we've done several times before now we check to see if there are any errors and if they

5
00:00:15,430 --> 00:00:18,560
are are then we immediately render our form template.

6
00:00:18,560 --> 00:00:25,290
In passing those errors we've got some code just about identical to this inside of our roots.

7
00:00:25,340 --> 00:00:27,900
Adnan off dot J.S. file as well.

8
00:00:28,040 --> 00:00:32,420
So here's that file by scroll down to either of the post request handlers instead of here I'm going

9
00:00:32,420 --> 00:00:35,030
to see a just about identical code block.

10
00:00:35,270 --> 00:00:36,270
So here's our sign up.

11
00:00:36,650 --> 00:00:42,600
Yep just about identical here's the sign in just about identical right there as well.

12
00:00:42,670 --> 00:00:47,100
So in this video I want to try to create our own custom middleware function.

13
00:00:47,140 --> 00:00:52,120
The goal of our middleware function is going to be to check to see if any error occurred when our validators

14
00:00:52,120 --> 00:00:54,530
ran if it did.

15
00:00:54,620 --> 00:00:58,510
We're then going to go ahead and automatically send back the appropriate template.

16
00:00:58,520 --> 00:01:01,260
We're going to feed in all the heirs to that template as well.

17
00:01:01,310 --> 00:01:05,170
So in other words I want to extract those lines of code right there.

18
00:01:05,210 --> 00:01:09,920
I want to take them out of all of our different request handlers and put them into some reusable middleware

19
00:01:09,920 --> 00:01:11,330
function instead.

20
00:01:11,330 --> 00:01:17,860
That's the goal though to do so let's find our roots admin folder inside there going to make a new file

21
00:01:17,860 --> 00:01:24,250
called Middleware is dot J.S. so the idea behind this file is that we're going to locate all the middleware

22
00:01:24,250 --> 00:01:32,100
is inside of here tied to our administration panel so inside of here I'm going to first require in that

23
00:01:32,100 --> 00:01:41,420
validation result function from the Express validator library because we know that we're still going

24
00:01:41,420 --> 00:01:45,920
to have to at some point time take a look at each request and see if there was an error that occurred

25
00:01:46,780 --> 00:01:52,000
and inside of here I'm going to do a module dot exports and send back an object.

26
00:01:52,360 --> 00:01:56,260
We're going to end up the same structure inside this file as we had inside of validators.

27
00:01:56,740 --> 00:02:00,460
So we're going to export an object that has a couple of different functions so we can reuse throughout

28
00:02:00,490 --> 00:02:06,680
all of our different routes or at least the admin ones in this case because of where we put this file.

29
00:02:06,710 --> 00:02:09,620
Right now the only function that we're going to export is one that we will call.

30
00:02:09,620 --> 00:02:13,270
How about handle errors.

31
00:02:13,330 --> 00:02:15,550
So this is going to be our middleware function.

32
00:02:15,700 --> 00:02:19,510
We're going to put the code inside of here that we have duplicated several times between all of our

33
00:02:19,510 --> 00:02:25,130
different root handlers are then going to call that function like right about there or so.

34
00:02:25,150 --> 00:02:32,110
So we're going to call that function before we actually run our real request handler and the one thing

35
00:02:32,110 --> 00:02:34,180
that's gonna make this just a little bit confusing.

36
00:02:34,270 --> 00:02:38,650
Remember that the only difference between each of these different code blocks in each of the three locations

37
00:02:38,650 --> 00:02:42,190
we have it is the template that we used to send back to the user.

38
00:02:42,880 --> 00:02:47,620
So in the case of our sign in handler we've got the assign and template in the case of the products

39
00:02:47,650 --> 00:02:48,670
new handler.

40
00:02:48,670 --> 00:02:51,110
We've got the products new templates.

41
00:02:51,460 --> 00:02:55,270
So we're going to say that anytime that we want to use this middleware function that we're writing right

42
00:02:55,270 --> 00:02:59,620
here we're going to pass in a template function as an argument to it.

43
00:02:59,620 --> 00:03:04,180
So we're going to receive a function that we're going to call at some future point time when we need

44
00:03:04,180 --> 00:03:10,040
to render out all those errors inside the form so going to received that template function as an argument

45
00:03:10,070 --> 00:03:13,310
that I'll call template func short for function

46
00:03:16,360 --> 00:03:19,810
then inside of here we're going to return a function.

47
00:03:19,810 --> 00:03:24,230
The reason that we are returning a function is that all Middleware is must be functions.

48
00:03:24,360 --> 00:03:29,350
So we're going to return the function that's going to be executed every single time that a request comes

49
00:03:29,350 --> 00:03:30,190
in.

50
00:03:30,190 --> 00:03:39,530
So I'm going to return a function that is going to be called automatically by express with the request

51
00:03:39,870 --> 00:03:43,160
the response and the next function.

52
00:03:43,160 --> 00:03:47,520
We very briefly spoke about this next argument much earlier inside this project.

53
00:03:47,690 --> 00:03:52,820
Whenever we author a middleware function which this is right here this is the actual middleware function

54
00:03:52,820 --> 00:03:55,070
that's going to be called repeatedly.

55
00:03:55,070 --> 00:04:01,940
We get it called with our request our and next next is like a reference to a function to say to express

56
00:04:01,940 --> 00:04:04,840
that hey we're all done with the computation we're doing inside of here.

57
00:04:04,880 --> 00:04:10,880
You can continue processing this request remember Express was originally written before promises or

58
00:04:10,880 --> 00:04:13,040
async await was really popular.

59
00:04:13,040 --> 00:04:18,590
And so we see this idea of callbacks like next right here all over the place as one the primary control

60
00:04:18,590 --> 00:04:19,250
mechanisms

61
00:04:22,010 --> 00:04:22,260
okay.

62
00:04:22,300 --> 00:04:26,050
So then inside of here we're gonna write all the same kind of validation handling stuff that we've got

63
00:04:26,050 --> 00:04:28,460
currently inside of our different request handlers.

64
00:04:28,600 --> 00:04:40,040
So we'll say const ears is validation results with our request and then if not errors dot is empty.

65
00:04:40,040 --> 00:04:48,590
So if there is an area if that thing is not empty let's return early and we'll call Red Dot sent.

66
00:04:48,810 --> 00:04:52,560
We're going to invoke our template funk that was passed in as an argument

67
00:04:55,410 --> 00:05:00,270
and as the argument to it we're gonna pass an object with the ears inside of it so that our template

68
00:05:00,270 --> 00:05:04,680
functions still get all the relevant errors.

69
00:05:04,800 --> 00:05:09,240
Now we need to also handle the case in which everything goes as expected and we don't have any errors.

70
00:05:09,450 --> 00:05:13,140
So to handle that underneath our if statement we will call next.

71
00:05:13,140 --> 00:05:16,050
Which once again is a sign to say hey everything went well.

72
00:05:16,050 --> 00:05:22,200
Call the next middleware or invoke our actual root handler.

73
00:05:22,230 --> 00:05:25,360
Note that we only called next if we did not have any errors.

74
00:05:25,380 --> 00:05:29,520
So if any errors occurred we're going to return early right there and we never call the next root handler

75
00:05:29,520 --> 00:05:31,620
in the chain okay.

76
00:05:31,650 --> 00:05:34,110
So that's pretty much our whole middleware function.

77
00:05:34,110 --> 00:05:35,750
So I'm gonna save this file.

78
00:05:35,880 --> 00:05:40,710
Well then go back over to product start J.S. and we're going to add the middleware to our post request

79
00:05:40,710 --> 00:05:42,130
handler right here.

80
00:05:42,300 --> 00:05:48,060
Let's first make sure that we require in that middleware at the very top of the file so up here I'm

81
00:05:48,060 --> 00:05:57,480
going to do you can't handle errors I'm going to require that from middleware as notice that we still

82
00:05:57,480 --> 00:06:00,600
have a require statement right here for validation result.

83
00:06:00,660 --> 00:06:02,190
Well we don't need it inside of products.

84
00:06:02,190 --> 00:06:07,260
J ust anymore because we have handled calling validation result inside of the middleware that we just

85
00:06:07,260 --> 00:06:11,750
put together so we can remove that require statement because we're going to delete the reference to

86
00:06:11,760 --> 00:06:16,440
validation errors in just a moment as we go down to that root handler.

87
00:06:16,440 --> 00:06:17,390
Let's do that right now.

88
00:06:17,400 --> 00:06:23,230
I'm gonna go down to the root handler so we don't need to run all this logic inside of here anymore.

89
00:06:23,340 --> 00:06:28,810
We're going to delete that in just a second but first let's put in our middleware so after handling

90
00:06:28,810 --> 00:06:33,700
the upload and passing the incoming request and after doing the validation we're then going to check

91
00:06:33,700 --> 00:06:38,620
to see if any errors occurred and if they did we're going to return early before we even hit that root

92
00:06:38,620 --> 00:06:40,550
handler right here.

93
00:06:40,550 --> 00:06:47,330
I'm going to call handle errors and I'm going to pass in the template function that we want to eventually

94
00:06:47,330 --> 00:06:56,040
call which is products new template it's all say products new template notice that there are no parentheses

95
00:06:56,040 --> 00:07:01,170
after that there are no parentheses because we are passing a reference to that function so that can

96
00:07:01,170 --> 00:07:08,090
be called at some point time in the future repeatedly every time that request comes in now that handle

97
00:07:08,090 --> 00:07:12,380
errors is dealing with those validation stuff we don't need that validation logic inside of here anymore

98
00:07:13,650 --> 00:07:19,050
and so take a look at that now that we're handling the validation outside of our root handler and handling

99
00:07:19,050 --> 00:07:20,400
any errors that might occur.

100
00:07:20,400 --> 00:07:25,570
Now the root handler itself is incredibly simple is just forward lines of code or so.

101
00:07:25,770 --> 00:07:31,170
And so it's a lot easier to read and understand than anything that we had before so this is definitely

102
00:07:31,170 --> 00:07:34,070
looking pretty good.

103
00:07:34,110 --> 00:07:39,090
Now the other thing I want to mention really quickly here is why we were returning a function from handle

104
00:07:39,090 --> 00:07:40,730
errors don't you.

105
00:07:40,800 --> 00:07:44,760
Hopefully it's a little bit more obvious now when we actually make use of handle errors in a wired up

106
00:07:44,760 --> 00:07:45,510
as a middleware.

107
00:07:45,600 --> 00:07:51,210
We are invoking it to throw in the template and we want to eventually use to we're calling this thing

108
00:07:51,210 --> 00:07:55,950
right here but whenever we provide a middleware to express it might be a function where it has to be

109
00:07:55,950 --> 00:07:56,800
a function.

110
00:07:57,120 --> 00:08:01,790
And that's why inside of our middleware handle errors we are returning a function right here.

111
00:08:01,890 --> 00:08:08,960
This is what is actually getting passed into router post so that is going to be the function right there

112
00:08:09,200 --> 00:08:16,810
that gets called over and over and over every time we have a request coming into our application.

113
00:08:16,840 --> 00:08:17,480
So this looks good.

114
00:08:17,540 --> 00:08:18,570
Let's save this.

115
00:08:18,590 --> 00:08:23,510
We're going to go over to off J.S. inside of our admin directory and we're going to do the same refactor

116
00:08:23,710 --> 00:08:27,170
with both request handlers inside of here as well that are handling those requests.

117
00:08:27,170 --> 00:08:29,200
Well we'll do these much more quickly.

118
00:08:29,490 --> 00:08:36,020
So at the top I'm going to delete the existing express validator require statement and I'll get to handle

119
00:08:36,560 --> 00:08:45,460
errors from the middle where file all then go down to our sign up post requesting Adler.

120
00:08:45,510 --> 00:08:51,960
Right after all the validators will call handle errors and we'll pass in the template to use which is

121
00:08:52,020 --> 00:08:52,890
sign up template

122
00:08:55,970 --> 00:08:58,000
we can then delete all the error handling stuff.

123
00:08:59,220 --> 00:09:05,190
Like so also note that we no longer need the password confirmation property inside of you anymore.

124
00:09:05,200 --> 00:09:08,010
So I'm also going to just do a little bit of cleanup right there.

125
00:09:09,520 --> 00:09:17,670
Right so now we can go down to our retro top post for signing after the validators will do handle errors.

126
00:09:17,870 --> 00:09:23,580
We're going to pass in our template which is sign and template and then once again we can delete all

127
00:09:23,580 --> 00:09:27,170
that error handling logic.

128
00:09:27,280 --> 00:09:27,730
So that's it.

129
00:09:28,610 --> 00:09:33,740
So notice once again that both these root handlers are now way easier to read and understand because

130
00:09:33,740 --> 00:09:38,080
we have extracted all that logic let's them make sure that we saved all these files and we're going

131
00:09:38,080 --> 00:09:43,300
to go do a very quick test inside the browser so I can go back over to my application.

132
00:09:43,560 --> 00:09:47,560
I'm to first try to create a new product so I should be able to just like hit create right here and

133
00:09:47,560 --> 00:09:51,100
see some errors appear and yet looks like the validation is still working.

134
00:09:52,450 --> 00:09:56,040
I'm also going to try out our sign up route.

135
00:09:56,050 --> 00:10:01,150
I'll hit submit Whoops I've got some built in validation on this forum so I do need to put in some kind

136
00:10:01,150 --> 00:10:06,170
of email and passwords bugging me make sure the passwords don't match Yep.

137
00:10:06,380 --> 00:10:06,680
Okay.

138
00:10:06,710 --> 00:10:07,520
Looks good.

139
00:10:09,140 --> 00:10:14,930
I'll make sure that my validation works on sign in as well so I'll put in some random email and random

140
00:10:14,930 --> 00:10:16,390
password.

141
00:10:16,400 --> 00:10:17,160
Very good.

142
00:10:18,150 --> 00:10:18,450
Okay.

143
00:10:18,470 --> 00:10:20,220
That's pretty much it.

144
00:10:20,270 --> 00:10:24,140
So abstracting all this stuff out into that middleware definitely worked out pretty well.

145
00:10:24,520 --> 00:10:24,750
Okay.

146
00:10:24,790 --> 00:10:26,850
So to get back on track we'll take a pause right here.

147
00:10:26,870 --> 00:10:31,040
When come back the next video we'll make sure that we start to list out all of our products inside of

148
00:10:31,160 --> 00:10:32,990
admin slash products.

149
00:10:33,230 --> 00:10:34,640
So I'll see you in just a minute.
