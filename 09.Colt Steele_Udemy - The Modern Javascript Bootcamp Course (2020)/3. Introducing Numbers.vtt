WEBVTT
1
00:00:00.340 --> 00:00:03.610
Already with that out of the way let's start learning javascript.

2
00:00:03.690 --> 00:00:07.580
So the first of these primitive types we'll talk about is no no.

3
00:00:07.650 --> 00:00:09.510
Is pretty self-explanatory.

4
00:00:09.540 --> 00:00:16.500
It is a way of storing or representing a number in JavaScript so other languages have multiple different

5
00:00:16.500 --> 00:00:17.860
types for numbers.

6
00:00:17.910 --> 00:00:24.360
For example some languages store decimal numbers differently than whole numbers or integers but in JavaScript

7
00:00:24.570 --> 00:00:26.250
we have one type of number.

8
00:00:26.250 --> 00:00:27.890
It's just called number.

9
00:00:28.110 --> 00:00:28.890
That's it.

10
00:00:28.990 --> 00:00:35.670
No works with positive numbers negative numbers whole numbers integers decimal numbers which are also

11
00:00:35.670 --> 00:00:37.290
often called floats.

12
00:00:37.320 --> 00:00:38.480
I'll show you a couple examples.

13
00:00:38.490 --> 00:00:43.200
If I open up my console again I'll pop this out into its own window.

14
00:00:43.200 --> 00:00:46.660
I can just enter a number like 13 and hit enter.

15
00:00:46.680 --> 00:00:48.150
It doesn't really do anything.

16
00:00:48.150 --> 00:00:50.760
The console just tells me Oh yeah I know 13.

17
00:00:50.760 --> 00:00:51.690
Here you go.

18
00:00:51.840 --> 00:00:53.270
It's not storing it.

19
00:00:53.280 --> 00:00:54.730
It's not saving it.

20
00:00:54.750 --> 00:00:57.460
I'm just simply referencing a number.

21
00:00:57.600 --> 00:00:59.190
So we've got numbers like this.

22
00:00:59.190 --> 00:01:00.660
We've got negative numbers.

23
00:01:00.660 --> 00:01:02.310
We've got decimal numbers.

24
00:01:02.670 --> 00:01:07.400
And because of the way javascript stores numbers there are some important limitations to be aware of.

25
00:01:07.500 --> 00:01:15.840
If you ever need extreme precision with your numbers like you have that say something like this.

26
00:01:15.910 --> 00:01:16.170
All right.

27
00:01:16.180 --> 00:01:19.200
Well that works still but if I keep adding zeros there we go.

28
00:01:19.210 --> 00:01:20.400
I was 1 0.

29
00:01:20.710 --> 00:01:23.790
You can see that we lose that entire decimal portion.

30
00:01:23.860 --> 00:01:29.110
So it does not store an infinitely precise number which makes sense.

31
00:01:29.110 --> 00:01:31.160
Everything is represented in memory.

32
00:01:31.270 --> 00:01:33.960
And there is a maximum size for those numbers.

33
00:01:33.970 --> 00:01:38.200
Now it's pretty rare that you would come up against this at least when you're starting out.

34
00:01:38.320 --> 00:01:43.080
Most of the time you don't need precision to this point but it is important to be aware of.

35
00:01:43.120 --> 00:01:48.700
Now while we're in the console here one other thing you can do that I like to do often is clear my console.

36
00:01:48.700 --> 00:01:51.180
It looks like this clear and parentheses.

37
00:01:51.340 --> 00:01:54.970
This is actually something called a function which we'll talk about later.

38
00:01:55.000 --> 00:01:59.930
It doesn't do much except make you space so you can now type more.

39
00:02:00.010 --> 00:02:00.400
OK.

40
00:02:00.430 --> 00:02:05.650
So numbers on their own aren't that useful just typing a number and getting it spit back to us is great

41
00:02:05.680 --> 00:02:10.660
but we can't really do much with it until we talk about these basic operations.

42
00:02:10.660 --> 00:02:15.760
So with numbers we have different mathematical operations that we can use kind of like a calculator

43
00:02:16.300 --> 00:02:21.850
and on their own without other things in JavaScript without what we're going to learn later it really

44
00:02:21.850 --> 00:02:23.560
is just a glorified calculator.

45
00:02:23.620 --> 00:02:25.480
But it's important to start here.

46
00:02:25.660 --> 00:02:31.290
So we have things like addition subtraction multiplication and division and there are a couple others

47
00:02:31.300 --> 00:02:36.190
I'll point out in just a moment but first I want to talk about these great outlines.

48
00:02:36.190 --> 00:02:42.550
These are called comments in javascript if you type two forward slashes in a row it creates a comment

49
00:02:42.790 --> 00:02:45.310
which javascript will just ignore.

50
00:02:45.310 --> 00:02:50.230
So these aren't really useful in the console although I can type them as you can see here it just ignores

51
00:02:50.230 --> 00:02:56.800
my code versus if I had this without a comment I get an error I can recall any line at any point with

52
00:02:56.800 --> 00:02:59.260
the up arrow I can scroll through them.

53
00:02:59.440 --> 00:03:03.310
So if I add two slashes to the beginning it's now ignored.

54
00:03:03.310 --> 00:03:08.580
So I use this a lot to write notes a lot of developers do to explain what they're doing here.

55
00:03:08.590 --> 00:03:12.280
I'm just using it to give you a label addition subtraction and so on.

56
00:03:13.030 --> 00:03:15.430
So we can do basic addition and subtraction right.

57
00:03:15.430 --> 00:03:18.650
Three plus four shocker and gives us seven.

58
00:03:18.670 --> 00:03:22.870
We can do one point five plus eight we get nine point five.

59
00:03:22.870 --> 00:03:27.080
We have subtraction twelve minus four point five six seven.

60
00:03:27.160 --> 00:03:31.110
And we also have multiplication four times one point three.

61
00:03:31.440 --> 00:03:34.310
Let's do one point two four point eight.

62
00:03:34.330 --> 00:03:34.780
Cool.

63
00:03:34.870 --> 00:03:36.030
When it clear again.

64
00:03:36.340 --> 00:03:37.280
Now we have division.

65
00:03:37.330 --> 00:03:39.860
Now there's a couple of things I want to talk about with division.

66
00:03:39.910 --> 00:03:46.450
First of all it works how you'd expect four divided by two gives us two spacing.

67
00:03:46.450 --> 00:03:49.450
As you probably already noticed it doesn't really matter here.

68
00:03:49.510 --> 00:03:51.590
I could do four divided by two like this.

69
00:03:51.590 --> 00:03:53.690
I can add space there.

70
00:03:53.710 --> 00:03:54.780
It still works.

71
00:03:54.820 --> 00:04:00.610
There are definite situations where spacing can be important and you don't want to do this because it's

72
00:04:00.610 --> 00:04:01.600
impossible to look at.

73
00:04:01.600 --> 00:04:03.720
It's ugly and confusing.

74
00:04:03.850 --> 00:04:08.080
So I would stick to this or potentially that but I prefer this.

75
00:04:08.080 --> 00:04:12.730
And remember you won't always have perfect precision something like 10 divided by three.

76
00:04:13.030 --> 00:04:18.880
It's going to give us three point 3 3 3 3 3 3 Bob Barr 5 which it makes sense that we can't store this

77
00:04:18.880 --> 00:04:22.010
irrational number where we have a million infinite threes.

78
00:04:22.020 --> 00:04:22.660
It's not a million.

79
00:04:22.660 --> 00:04:23.710
It's infinite threes.

80
00:04:24.070 --> 00:04:27.490
So we get an approximation but just be aware of that.

81
00:04:27.520 --> 00:04:28.920
Now there are some other operators.

82
00:04:28.930 --> 00:04:33.130
There's one called modulo which some of you might be familiar with.

83
00:04:33.160 --> 00:04:35.760
It's also known as the remainder operator.

84
00:04:35.890 --> 00:04:42.910
What it will do is it takes the second upper end and divides it into the first and then it returns the

85
00:04:42.970 --> 00:04:45.020
remainder that is left.

86
00:04:45.070 --> 00:04:46.860
So two goes into 27.

87
00:04:46.870 --> 00:04:51.950
It doesn't really matter how many times but it goes in 13 times which gives us 26.

88
00:04:52.000 --> 00:04:55.420
And the remainder is 1 so we could test it out.

89
00:04:55.420 --> 00:04:56.980
We use the percent sign.

90
00:04:57.010 --> 00:05:00.750
So let's do 25 mod five.

91
00:05:00.760 --> 00:05:04.420
Well it goes and cleanly so the remainder is zero.

92
00:05:04.420 --> 00:05:08.710
Now if we did twenty five mod three this thing is spoiling it for me.

93
00:05:08.770 --> 00:05:10.000
That's annoying.

94
00:05:10.150 --> 00:05:12.030
It's giving you the answer already.

95
00:05:12.040 --> 00:05:16.510
What about if we did 14 mod four.

96
00:05:16.570 --> 00:05:17.480
Think about it.

97
00:05:17.560 --> 00:05:18.270
All right.

98
00:05:18.400 --> 00:05:20.320
14 mod four is two.

99
00:05:20.350 --> 00:05:21.820
Four goes into 14.

100
00:05:21.850 --> 00:05:24.540
Three times cleanly which gives us 12.

101
00:05:24.640 --> 00:05:26.310
The remainder is two.

102
00:05:26.380 --> 00:05:28.720
So that's modulo it will come back later.

103
00:05:28.720 --> 00:05:34.630
We sometimes use it to determine if a number is even or odd if a number is cleanly divisible by two.

104
00:05:34.720 --> 00:05:40.960
Then it is even and then the other operator I'll show you here is the exponent or exponential operator

105
00:05:41.290 --> 00:05:44.280
which looks like this two star star.

106
00:05:44.880 --> 00:05:51.190
If I do two star star 3 it is 2 to the third or 2 cubed two times two times two.

107
00:05:51.220 --> 00:05:56.460
Five Star Star two gives us twenty five five times five.

108
00:05:56.470 --> 00:06:00.160
And if I did five to the fifth we get three one to five.

109
00:06:00.160 --> 00:06:03.370
So that is one way of doing exponents in JavaScript.

110
00:06:03.370 --> 00:06:07.480
There is a different way we'll talk about later but I just want to throw it in here while we're talking

111
00:06:07.480 --> 00:06:08.700
about operations.

112
00:06:08.740 --> 00:06:14.200
The last thing I'll bring up is that we have the standard order of operations in javascript that most

113
00:06:14.200 --> 00:06:19.750
of you probably learned in middle school or at some point in school where in more complicated expressions

114
00:06:20.050 --> 00:06:23.020
different operators get precedence over others.

115
00:06:23.020 --> 00:06:31.760
So if we have something like one let's do three minus nine times to we have multiplication which will

116
00:06:31.760 --> 00:06:39.530
occur first that gives us 18 three minus 18 gives us negative 15 and we can use parentheses to modify

117
00:06:39.530 --> 00:06:46.100
that parentheses is the highest or the first part of the order of operations the way I learned it was

118
00:06:46.100 --> 00:06:52.790
paired us Parentheses Exponents multiplication division addition subtraction I know from one of my other

119
00:06:52.790 --> 00:06:58.490
courses I use Pederson in other parts of the world they're taught with different acronyms but it's generally

120
00:06:58.490 --> 00:07:00.140
the same order.

121
00:07:00.140 --> 00:07:05.450
So we have three minus nine that gets done first which gives us negative six we multiply that by two

122
00:07:05.600 --> 00:07:11.090
and we get negative twelve so you probably won't be doing a ton of really complex mathematical expressions

123
00:07:11.150 --> 00:07:16.130
but if you need to you can use parentheses in the regular order of operations applies.

124
00:07:16.130 --> 00:07:17.600
So that's numbers on its own.

125
00:07:17.630 --> 00:07:21.290
Again right now we're kind of just treating JavaScript as a calculator.

126
00:07:21.380 --> 00:07:25.550
I guess it's cool enough to do that but there's a lot more to the language.

127
00:07:25.640 --> 00:07:27.490
This is just the basics of numbers.

128
00:07:27.500 --> 00:07:31.160
Next up we'll talk about how we store these and recall them using variables.
