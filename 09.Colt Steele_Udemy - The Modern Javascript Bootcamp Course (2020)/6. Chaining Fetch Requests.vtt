WEBVTT
1
00:00:00.420 --> 00:00:06.030
Next up we'll see how we can chain requests one after another and avoid the messy callback situation

2
00:00:06.030 --> 00:00:07.200
that we had here.

3
00:00:07.200 --> 00:00:13.980
Using example HP request really that the main selling point of fetch that we don't have to use callbacks

4
00:00:13.980 --> 00:00:17.050
and Ness things and it just gets messy.

5
00:00:17.190 --> 00:00:24.710
Instead we can use the promises and chain a bunch of events as long as we return promises from that.

6
00:00:24.870 --> 00:00:28.680
So if we go with the exact same idea what we had here.

7
00:00:28.680 --> 00:00:33.780
If we look at each planet why don't we console that log the entire planet instead of just the name or

8
00:00:33.780 --> 00:00:41.600
in addition to the name and also make sure we're actually requesting a valid you are well now here we

9
00:00:41.600 --> 00:00:42.190
go.

10
00:00:42.290 --> 00:00:50.720
Each planet as we saw has films and also residents we could request residents instead let's do films

11
00:00:51.110 --> 00:00:54.690
and we'll just look at the first film that the planet occurs in.

12
00:00:54.860 --> 00:00:57.350
So we have all the run two films.

13
00:00:57.350 --> 00:01:01.220
We'll take the first one just to match what we did earlier and send a request to this.

14
00:01:01.220 --> 00:01:04.550
You are out so with promises.

15
00:01:04.550 --> 00:01:06.750
We always have a lot of flexibility.

16
00:01:06.770 --> 00:01:09.070
Do we want to do everything on one level.

17
00:01:09.080 --> 00:01:10.980
Like one line of events.

18
00:01:11.000 --> 00:01:12.560
Right now we have a.

19
00:01:12.620 --> 00:01:18.110
Then that is currently nested inside of this callback but we could avoid that if we wanted to.

20
00:01:18.110 --> 00:01:25.100
If we just return the promise we can actually take this dog then and move it outside.

21
00:01:25.160 --> 00:01:34.780
Put it here as long as we return response that Jason which is a promise and doesn't like my semicolon.

22
00:01:34.780 --> 00:01:36.190
There we go.

23
00:01:36.190 --> 00:01:42.730
So now we return this promise and we add our dog then which will be run when this promise is resolved

24
00:01:42.940 --> 00:01:45.110
and if it's rejected we have our catch.

25
00:01:45.130 --> 00:01:51.850
So we just moved our code out and made it a little bit flatter I guess less nested and it should still

26
00:01:51.850 --> 00:01:52.550
work.

27
00:01:52.570 --> 00:01:53.590
Let's check.

28
00:01:53.590 --> 00:01:54.670
It does.

29
00:01:54.760 --> 00:01:55.150
Okay.

30
00:01:55.450 --> 00:01:58.160
So now what we can do is make our request.

31
00:01:58.330 --> 00:02:03.220
We can still print the planet names out if we want but I think I'll stop that for now.

32
00:02:03.220 --> 00:02:12.130
We're going to take the data that results that films zero which should give us a euro that we can now

33
00:02:12.130 --> 00:02:12.570
request.

34
00:02:12.580 --> 00:02:16.870
Let's console that log and cannot read property zero of undefined.

35
00:02:16.870 --> 00:02:22.510
Let's see then data counsel that log data

36
00:02:27.080 --> 00:02:30.160
I think I did it wrong results.

37
00:02:30.450 --> 00:02:34.840
That's why I'm not accessing the correct result.

38
00:02:34.890 --> 00:02:39.830
We have to go to the first planet if we want the first planet we could also pick a different planet

39
00:02:40.550 --> 00:02:43.700
but we'll go with the first one to match what we did here.

40
00:02:43.710 --> 00:02:45.590
So this should work now.

41
00:02:45.810 --> 00:02:47.010
Let's make sure I'm getting the correct.

42
00:02:47.010 --> 00:02:48.670
You are I'll print it out.

43
00:02:48.750 --> 00:02:49.620
There it is.

44
00:02:49.620 --> 00:02:53.410
So we'll send another request here using fetch.

45
00:02:53.670 --> 00:02:57.570
So fetch of this U.R.L. I'll save this to a variable.

46
00:02:57.570 --> 00:02:58.500
What should we call it.

47
00:02:58.530 --> 00:03:00.320
Let's go with concert film.

48
00:03:00.390 --> 00:03:04.780
You are Elf and fetch film.

49
00:03:04.860 --> 00:03:06.830
You are out now.

50
00:03:06.840 --> 00:03:07.970
This is a promise.

51
00:03:08.100 --> 00:03:16.530
So I could put my dog then right here and do all that stuff nested or because it's a promise I can return

52
00:03:16.530 --> 00:03:17.340
it.

53
00:03:17.460 --> 00:03:25.080
So return that fetch and then put another dot down here and we'll call this data.

54
00:03:25.080 --> 00:03:30.760
Also we could call it movie data and then we can go through this exact same process.

55
00:03:30.870 --> 00:03:38.310
I could actually just copy this entire thing and response is a better name rather than data because

56
00:03:38.520 --> 00:03:44.070
that's what we actually get if Fetch is resolved it resolves with the response object we have to check

57
00:03:44.070 --> 00:03:51.330
if it's OK then we pass it we call the Jason method which itself returns a promise so we can add another

58
00:03:51.330 --> 00:03:54.140
then data.

59
00:03:55.320 --> 00:03:59.760
Why don't we counseled out log data OK.

60
00:03:59.780 --> 00:04:00.710
Moment of truth here

61
00:04:04.350 --> 00:04:05.970
a take a look.

62
00:04:06.060 --> 00:04:11.210
We're getting all of that movie data so we requested all the planets.

63
00:04:11.580 --> 00:04:14.390
Which I guess I can add some council that logs in here.

64
00:04:14.490 --> 00:04:19.620
We'll do a council that log fetched all planets.

65
00:04:19.620 --> 00:04:30.330
Well it's actually first 10 then down here we can console that log fetched first film based off of first

66
00:04:30.330 --> 00:04:41.740
planet and then we'll just do data title refresh fed to our planet's first 10 then fetched first film

67
00:04:41.890 --> 00:04:45.230
based off of first planet Revenge Of The Sith.

68
00:04:45.250 --> 00:04:51.140
So here we have multiple requests that are happening one after another but there's not really any nesting.

69
00:04:51.220 --> 00:04:52.970
It's all very flat.

70
00:04:53.020 --> 00:04:59.380
Yes we have some repeated logic or we have this where we are checking for the response being OK we're

71
00:04:59.380 --> 00:05:06.040
checking for a we're passing that Jason we duplicate that at least twice and if we made further requests

72
00:05:06.040 --> 00:05:07.570
we'd want to do the same thing.

73
00:05:07.930 --> 00:05:13.810
But in the next video I'll show you a way we can refactor it and clean it up even more so here really

74
00:05:13.810 --> 00:05:20.050
if we're making a comparison the main points I would make is one I can never remember the syntax I can

75
00:05:20.050 --> 00:05:24.480
never remember the different pieces we need the names but that's just me.

76
00:05:24.580 --> 00:05:26.350
So that's not a great reason.

77
00:05:26.350 --> 00:05:31.870
The main reason that I think Fetch is much better and almost everyone I think would agree with me is

78
00:05:31.870 --> 00:05:37.270
that we have promises that are returned from fact we can use those promises we can keep things flat

79
00:05:37.520 --> 00:05:46.960
linear non nested even though this code here where we make a request to get the film based off of this

80
00:05:46.960 --> 00:05:47.690
first request.

81
00:05:47.710 --> 00:05:50.670
This only runs if this happened.

82
00:05:50.800 --> 00:05:54.820
So if everything was OK here we got the Jason that finishes.

83
00:05:54.820 --> 00:05:59.950
Then we make a second request and we could have ten different requests that are dependent on one another

84
00:06:00.010 --> 00:06:04.450
but we don't have to nest them ten callbacks deep like we would up here.

85
00:06:04.540 --> 00:06:09.190
So next we'll see a way of refactoring this and shortening it up then we'll move on to my personal favorite

86
00:06:09.520 --> 00:06:13.080
axioms the crowning jewel of making requests in my opinion.
