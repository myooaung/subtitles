WEBVTT
1
00:00:00.200 --> 00:00:00.500
All right.

2
00:00:00.540 --> 00:00:03.700
So we've seen two different values for this so far.

3
00:00:03.780 --> 00:00:06.580
We saw that when we declared just a regular old function.

4
00:00:06.600 --> 00:00:08.080
We don't call it as a method.

5
00:00:08.130 --> 00:00:09.840
We don't put it in an object.

6
00:00:09.840 --> 00:00:14.830
This refers to the window object when we use this instead of a method.

7
00:00:14.910 --> 00:00:17.770
It's a way of accessing the parent objects.

8
00:00:17.820 --> 00:00:24.750
The object that the method is located in like we used right here with this share object but that's not

9
00:00:24.780 --> 00:00:26.310
always the case.

10
00:00:26.400 --> 00:00:31.700
The value of this depends on the invocation contexts of the function that it's used in.

11
00:00:31.710 --> 00:00:37.410
What that means is the value will change depending on how the function is actually executed not just

12
00:00:37.410 --> 00:00:38.250
where you write it.

13
00:00:39.000 --> 00:00:45.830
So yes I wrote this instead of a method but that doesn't mean it's guaranteed to reference this object.

14
00:00:45.870 --> 00:00:51.930
It depends on how I'm calling it and here I'm calling it how you normally would call a method the natural

15
00:00:51.930 --> 00:00:57.130
way to call this would be person dot print bio or person dot full name.

16
00:00:57.150 --> 00:01:04.190
This is what is setting the value of this the way that I'm actually executing or invoking this function.

17
00:01:04.210 --> 00:01:07.620
So this is kind of a shapeshifter in this way.

18
00:01:07.630 --> 00:01:09.760
So I have these different faces down here.

19
00:01:09.790 --> 00:01:12.520
It's tough to come up with a good visual representation of it.

20
00:01:12.730 --> 00:01:17.550
But let me show you how we could actually change the value of this.

21
00:01:17.710 --> 00:01:22.090
What I could do is make a reference to this function print bio.

22
00:01:22.270 --> 00:01:23.550
Let's work with that one.

23
00:01:23.620 --> 00:01:31.930
I'll call this concept print bio equals person dot print bio.

24
00:01:31.930 --> 00:01:36.610
So I'm just pointing this variable print bio to that function.

25
00:01:36.610 --> 00:01:39.190
It's still a property on the person object.

26
00:01:39.220 --> 00:01:40.140
I didn't remove it.

27
00:01:40.300 --> 00:01:41.380
I didn't delete it.

28
00:01:41.500 --> 00:01:43.540
I just made a variable pointing to it.

29
00:01:44.140 --> 00:01:45.610
And if I call print bio

30
00:01:49.040 --> 00:01:50.440
I got to refresh the code.

31
00:01:50.520 --> 00:01:52.010
Try it again.

32
00:01:52.010 --> 00:01:55.120
We get a different error this dot full name is not a function.

33
00:01:56.210 --> 00:02:04.400
So why don't we add a console dot log this at the end and see what's going on.

34
00:02:04.460 --> 00:02:09.040
So if I call print bio again this dot full names on a function.

35
00:02:09.110 --> 00:02:10.550
Well I'm an idiot.

36
00:02:10.550 --> 00:02:12.670
I'm concerned that logging after that error.

37
00:02:12.710 --> 00:02:17.520
Let's do it before the error Okay here we go.

38
00:02:17.520 --> 00:02:22.000
It's referencing the window just like we had up here.

39
00:02:22.000 --> 00:02:23.260
If I call say hi.

40
00:02:23.350 --> 00:02:29.250
It references the window and that's because of how I'm executing the function.

41
00:02:29.910 --> 00:02:34.590
If I instead execute it the way we've been doing person dot what do we call it.

42
00:02:34.590 --> 00:02:39.310
Print bio the name of this method right there.

43
00:02:39.360 --> 00:02:45.750
This is referring to the object so you can think of it as if there is something to the left and then

44
00:02:45.750 --> 00:02:48.960
a dot and then you're executing the function.

45
00:02:48.990 --> 00:02:52.000
This will be set to that thing to the left.

46
00:02:52.230 --> 00:02:59.370
If there's nothing to the left if we're just calling say hi or for just calling print bio this will

47
00:02:59.370 --> 00:03:03.210
be set to the global execution scope the window.

48
00:03:03.210 --> 00:03:05.160
So this is the confusing part of this.

49
00:03:05.160 --> 00:03:06.880
It's not set in stone.

50
00:03:07.290 --> 00:03:09.740
You probably won't call your method this way.

51
00:03:09.780 --> 00:03:14.360
It's not something you would do all the time but it's important to understand how it behaves.

52
00:03:14.370 --> 00:03:16.410
There is a very significant difference.

53
00:03:16.440 --> 00:03:21.380
So generally when you write this in a method you're gonna call it using the dot syntax.

54
00:03:21.510 --> 00:03:25.430
You're going to call object dot method name person dot print bio.

55
00:03:25.530 --> 00:03:26.430
Everything will be great.

56
00:03:26.430 --> 00:03:27.360
Everyone's happy.

57
00:03:27.360 --> 00:03:33.720
This refers to the object itself the parent object that contains the method but that doesn't mean it

58
00:03:33.810 --> 00:03:35.790
always is set to that value.

59
00:03:35.850 --> 00:03:38.120
It depends on the invocation context.

60
00:03:38.130 --> 00:03:40.280
How you actually execute that function.

61
00:03:40.320 --> 00:03:46.260
The line that you write that runs the code that runs the function later on in the course will see that

62
00:03:46.260 --> 00:03:50.820
there are some additional rules and some ways of changing the value of this.

63
00:03:50.820 --> 00:03:56.430
There are three special methods that are usually grouped together call apply and bind those will come

64
00:03:56.430 --> 00:03:57.110
up later.

65
00:03:57.180 --> 00:04:02.910
We'll talk about classes and prototypes and creating new objects that all has to do with the keyword.

66
00:04:02.910 --> 00:04:03.740
This as well.

67
00:04:04.080 --> 00:04:07.500
So right now this is just a quick introduction.

68
00:04:07.500 --> 00:04:12.330
I want you to be aware of how this works in two of the most common scenarios.

69
00:04:12.600 --> 00:04:16.050
And then there's one more thing to talk about which is arrow functions.

70
00:04:16.230 --> 00:04:21.240
When we write an arrow function this is one of the key differences between a regular function and an

71
00:04:21.240 --> 00:04:25.620
arrow function arrow functions do not get their own version of this.

72
00:04:25.860 --> 00:04:28.320
It doesn't matter how you call it an arrow function.

73
00:04:28.320 --> 00:04:34.590
If you execute it as a method where you call object dot name of the function or if you just call the

74
00:04:34.590 --> 00:04:38.390
function directly the value of this is not going to be changed.

75
00:04:38.400 --> 00:04:41.880
So in that way they are very different from a traditional function.

76
00:04:41.880 --> 00:04:43.510
And I'll show this very quickly.

77
00:04:43.560 --> 00:04:46.420
Let's just make a function called Oh.

78
00:04:46.440 --> 00:04:50.010
This is the hardest part of teaching anything coming up with examples.

79
00:04:50.010 --> 00:04:52.020
We have full name print bio.

80
00:04:52.020 --> 00:04:53.330
How about laugh.

81
00:04:54.120 --> 00:05:01.120
Okay so we'll define our function which will be an arrow function as a method.

82
00:05:01.410 --> 00:05:08.010
I'll use this key syntax key value but the colon in there and inside of this I'm going to console dot

83
00:05:08.010 --> 00:05:10.140
log this.

84
00:05:10.140 --> 00:05:17.300
And for life let's console that log this dot let's do a template literal.

85
00:05:17.400 --> 00:05:24.130
Let's put this dot nickname says Ha ha ha ha.

86
00:05:24.910 --> 00:05:27.870
OK so we have this laugh method.

87
00:05:28.030 --> 00:05:35.430
If I try and call laugh person dot laugh OK.

88
00:05:35.720 --> 00:05:41.990
First of all the value of this is set to the window which is very different than the value of this in

89
00:05:41.990 --> 00:05:44.820
print bio or in full name.

90
00:05:45.320 --> 00:05:52.910
As we saw when we call print bio this is set to the object the person object an error function does

91
00:05:52.910 --> 00:05:54.090
not behave that way.

92
00:05:54.170 --> 00:05:56.880
The value of this is not changed in the arrow function.

93
00:05:57.050 --> 00:06:01.570
It's a reference to the global scope to the window.

94
00:06:01.760 --> 00:06:03.890
So sometimes that can be a good thing.

95
00:06:04.010 --> 00:06:09.740
But generally this is why we don't use arrow functions as methods because a lot of the methods we write

96
00:06:09.980 --> 00:06:16.040
we want to have access to the parent object or the containing object to do things like reference properties

97
00:06:16.100 --> 00:06:20.560
or call a different method like we did inside of print bio.

98
00:06:20.720 --> 00:06:23.500
We called this stop full name in an arrow function.

99
00:06:23.510 --> 00:06:27.500
We couldn't do that at least not until we see things like bind.

100
00:06:27.530 --> 00:06:33.830
So for that reason we usually don't use arrow functions as methods in an object but there's a reason

101
00:06:33.950 --> 00:06:39.740
that arrow functions don't get their own this if you only use regular standard traditional functions

102
00:06:39.740 --> 00:06:40.820
like this.

103
00:06:40.940 --> 00:06:43.580
So annoying like this one right here.

104
00:06:43.760 --> 00:06:44.870
Hopefully that's clearer.

105
00:06:44.960 --> 00:06:50.510
Like this one right here sometimes you can run into issues and I'll show you an example of where that

106
00:06:50.510 --> 00:06:52.890
can happen in the very next video.

107
00:06:52.910 --> 00:06:59.570
So to summarize what we saw here the value of this is set by the invocation context it's not set in

108
00:06:59.570 --> 00:07:02.860
stone purely based off of where you write it.

109
00:07:02.930 --> 00:07:08.510
In this case we put it in an object instead of a function instead of an object we reference this and

110
00:07:08.510 --> 00:07:11.840
when we called it as a method person dot print Pio.

111
00:07:12.110 --> 00:07:19.550
This was set to the entire object the parent object versus when we made a reference to that same function

112
00:07:20.450 --> 00:07:27.140
and instead called it just as a regular function without something to the left without object dot something

113
00:07:27.470 --> 00:07:29.170
just print bio.

114
00:07:29.270 --> 00:07:35.360
This was referring to the window so the execution context matters the way that you actually invoke it

115
00:07:35.540 --> 00:07:36.650
does matter.

116
00:07:36.650 --> 00:07:41.000
And then the second thing we saw was that arrow functions don't get there on this and in the next video

117
00:07:41.000 --> 00:07:43.490
I'll expand on how that sometimes can be useful.
