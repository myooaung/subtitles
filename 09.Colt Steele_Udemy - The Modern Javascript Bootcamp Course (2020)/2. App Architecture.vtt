WEBVTT
1
00:00:00.710 --> 00:00:02.690
Now that we have a better idea of what we're trying to build.

2
00:00:02.720 --> 00:00:07.040
Let's take a look at a couple of diagrams and get a better understanding of the architecture of our

3
00:00:07.040 --> 00:00:10.310
project and the general approach as well OK.

4
00:00:10.340 --> 00:00:14.720
So here's the overall architecture we're going for you and I are going to be building out this blue

5
00:00:14.720 --> 00:00:15.600
box right here.

6
00:00:15.650 --> 00:00:17.770
And the yellow one right there.

7
00:00:17.840 --> 00:00:21.320
So we are going to be making a no Jesus web server.

8
00:00:21.320 --> 00:00:26.140
This is going to be a running program that we're going to initially host on our local computers.

9
00:00:26.210 --> 00:00:32.090
We're going to be able to access this server from a browser anytime that we try to visit our server

10
00:00:32.090 --> 00:00:33.170
inside the browser.

11
00:00:33.170 --> 00:00:35.860
We're going to making a network request to it.

12
00:00:35.930 --> 00:00:39.950
So we're going to configure the server right here to receive network requests.

13
00:00:39.950 --> 00:00:45.570
We're going to inspect the request and kind of decide on what resource the user is looking for.

14
00:00:45.590 --> 00:00:51.640
We're then going to generate some HCM L and send that e-mail back over to the user's browser.

15
00:00:51.640 --> 00:00:55.690
The key thing to understand here is that we are no longer going to be working with static each G.M.

16
00:00:55.690 --> 00:00:58.240
documents as we have throughout this course.

17
00:00:58.270 --> 00:01:03.700
So throughout this course we have been creating static HMO files that sit inside of some project directory

18
00:01:04.300 --> 00:01:08.080
and then we essentially directly access those different HMO files.

19
00:01:08.080 --> 00:01:09.600
That's not what we're doing here.

20
00:01:09.610 --> 00:01:15.680
Instead our server is going to be responsible for taking different snippets or kind of portions of each

21
00:01:15.680 --> 00:01:22.400
CML and then we're going to assemble them altogether every single time a user makes a request.

22
00:01:22.460 --> 00:01:28.150
So that is what is going to allow us to show a different cart for each user or update our list of items

23
00:01:28.150 --> 00:01:32.590
to display to a user or anything else pretty much inside of our application.

24
00:01:32.590 --> 00:01:37.180
It is the fact that we are going to dynamically generate H2 mail on our server that's going to make

25
00:01:37.180 --> 00:01:41.240
our application dynamic and changing.

26
00:01:41.300 --> 00:01:45.480
We're also going to have to store some amount of information related to our app as well.

27
00:01:45.530 --> 00:01:49.790
So for example we need to store all the different items that we should be selling.

28
00:01:49.940 --> 00:01:53.710
We need to somehow store all the different items that are in a user's cart.

29
00:01:53.750 --> 00:01:59.150
We also need to store the different users who have signed up to our application as an administrator.

30
00:01:59.150 --> 00:02:04.640
Normally we would use some off the shelf or open source database for that but instead you and I just

31
00:02:04.640 --> 00:02:07.130
to learn a little bit more about JavaScript in general.

32
00:02:07.130 --> 00:02:12.860
We're going to be creating our own custom file based data store to store all the information that we

33
00:02:12.860 --> 00:02:16.300
intend to save inside of our app this process.

34
00:02:16.320 --> 00:02:21.780
We're going to go through not really commonly done inside of a typical professional project but again

35
00:02:22.020 --> 00:02:23.670
this is of course about JavaScript.

36
00:02:23.670 --> 00:02:28.200
So we're going to be building that just to get a better idea of how to work with JavaScript in general

37
00:02:29.800 --> 00:02:30.130
okay.

38
00:02:30.160 --> 00:02:32.900
So kind of a high level overview of the architecture here.

39
00:02:32.920 --> 00:02:35.470
Not really going too much into any specifics.

40
00:02:35.470 --> 00:02:36.380
That's OK.

41
00:02:36.400 --> 00:02:41.020
What I really want to focus on right now is how we're going to do our initial project setup.

42
00:02:41.140 --> 00:02:43.190
So these are the steps we're going to go through.

43
00:02:43.210 --> 00:02:47.890
These are some steps you're probably going to go through or the startup of many different projects you

44
00:02:47.890 --> 00:02:54.300
create inside your javascript career so as usual we're going to create a new project directory then

45
00:02:54.300 --> 00:02:57.990
inside there we're going to generate a package not just on file.

46
00:02:58.200 --> 00:03:04.410
Remember that package not just on file is used as kind of like configuration for our project we're then

47
00:03:04.410 --> 00:03:09.820
going to install one or two dependencies that are going to help us very quickly write our projects.

48
00:03:10.050 --> 00:03:12.840
When I use the term very quickly I don't mean very quickly.

49
00:03:12.840 --> 00:03:19.710
I mean relatively quickly we're still going to spend a long time working on this project then also inside

50
00:03:19.710 --> 00:03:21.510
of our package not just on file.

51
00:03:21.600 --> 00:03:24.670
We're going to also create something called a Start script.

52
00:03:24.720 --> 00:03:28.790
There's essentially going to use to run our project all right.

53
00:03:28.820 --> 00:03:32.630
So now that we've got a little bit better understanding of our architecture and how we're going to do

54
00:03:32.630 --> 00:03:36.650
some initial setup we'll take a quick pause right here and then start going through the setup in just

55
00:03:36.650 --> 00:03:37.100
a moment.
