1
00:00:00,960 --> 00:00:02,250
We've got our forum put together.

2
00:00:02,250 --> 00:00:07,410
So now we're gonna start to focus on validating and sanitizing the inputs that a user provides to us.

3
00:00:07,410 --> 00:00:11,910
We're going to first focus on just sanitization and validation of the title and price and we'll come

4
00:00:11,910 --> 00:00:14,880
back and think about the image in just a little bit.

5
00:00:14,880 --> 00:00:19,560
Firstly I want to remind you is just a moment ago when we put this forum together and created those

6
00:00:19,560 --> 00:00:25,540
two input elements we provided name properties of title in price.

7
00:00:26,080 --> 00:00:30,700
So that means that our poster quest handler that is going to receive this form submission is going to

8
00:00:30,700 --> 00:00:33,640
get some properties called title and price.

9
00:00:33,640 --> 00:00:36,710
So those are the two property names that we're going to want to validate.

10
00:00:36,820 --> 00:00:38,460
We're going to make sure that they are present.

11
00:00:38,500 --> 00:00:43,180
We're gonna make sure that the title is maybe of some particular length of string.

12
00:00:43,180 --> 00:00:48,160
We'll make sure that there is a price we'll make sure that it a number and so on so in order to do all

13
00:00:48,160 --> 00:00:55,300
this validation and sanitization logic will again go to our roots admin validators start J.S. file remember

14
00:00:55,330 --> 00:00:59,590
that is where we are placing all of our different validators so we could easily reuse them throughout

15
00:00:59,590 --> 00:01:05,040
our project if we decided to do so so inside of here we're going to write in our two validators for

16
00:01:05,040 --> 00:01:10,410
title and price will then require them back into our products such as file and validate the incoming

17
00:01:10,410 --> 00:01:14,670
form we previously wrote out our validators directly inside the roots file.

18
00:01:14,670 --> 00:01:17,000
But I think that we've got a good idea of what's going on now.

19
00:01:17,010 --> 00:01:20,870
So we'll just put them directly into this file from the get go okay.

20
00:01:20,900 --> 00:01:29,070
So at the very top of this object I'm going to add in require title so we're going to check out the

21
00:01:29,070 --> 00:01:30,070
title first.

22
00:01:30,270 --> 00:01:32,220
We'll do a check of the title property.

23
00:01:32,330 --> 00:01:36,960
And again remember it is a string of title right here because that is the Name property that we assigned

24
00:01:37,260 --> 00:01:41,620
on that input inside of our form.

25
00:01:41,750 --> 00:01:45,880
Then let's think about all the different validated validations and sanitization so we want to do on

26
00:01:45,880 --> 00:01:48,830
a title well on the title it's gonna be pretty straightforward.

27
00:01:48,830 --> 00:01:51,390
The first thing we'll do is chain on a trim.

28
00:01:51,410 --> 00:01:52,430
Remember trim.

29
00:01:52,430 --> 00:01:58,850
Make sure that there are no leading or trailing spaces which is generally seen as an accidental typo

30
00:01:58,850 --> 00:02:01,270
on behalf of the user.

31
00:02:01,420 --> 00:02:06,140
Next we will do is make sure that a title of a minimum and maximum length has been provided.

32
00:02:06,660 --> 00:02:15,180
So I'll say is length and I'll say that all titles must be at least five characters and at most 40 characters.

33
00:02:15,180 --> 00:02:20,190
So a 40 character title is pretty long if you wanted to obviously you could condense this down to just

34
00:02:20,190 --> 00:02:21,200
like 40 or something.

35
00:02:21,360 --> 00:02:28,430
But I think a 40 character title is fine by me that's pretty much it for the sanitization and the validation

36
00:02:28,430 --> 00:02:29,060
of the title.

37
00:02:29,070 --> 00:02:33,580
So now we can do the price as well so add in a new Kiev require price.

38
00:02:33,590 --> 00:02:37,100
Don't forget the comma at the end of the previous line.

39
00:02:37,180 --> 00:02:44,920
I'll do a check of the price property and then for this one we'll do a trim as well so we'll trim the

40
00:02:44,920 --> 00:02:50,220
price and then to make sure that this thing is a number we're going to call two additional methods we're

41
00:02:50,220 --> 00:02:58,840
gonna say dot to float and dot Is float and two is float going to passing an object with a main property

42
00:02:59,110 --> 00:03:00,540
of one.

43
00:03:00,640 --> 00:03:02,440
So what's going on here.

44
00:03:02,440 --> 00:03:06,790
Well the first thing to keep in mind is that whenever we submit a form no matter what we type into that

45
00:03:06,790 --> 00:03:12,400
form like this input right here no matter what we type in our server is always going to receive this

46
00:03:12,400 --> 00:03:13,890
value as a string.

47
00:03:13,930 --> 00:03:18,940
So even if you and I type in what is clearly a number here that number is going to be wrapped up inside

48
00:03:18,940 --> 00:03:22,090
of a string and that is what our server is going to receive.

49
00:03:22,090 --> 00:03:26,380
So at the end of the day our server always gets a string.

50
00:03:26,380 --> 00:03:31,270
So if you want to interpret this as though it were a number we can call one of two methods right here

51
00:03:31,720 --> 00:03:41,090
either to float or to int to float or to int is going to take that string and extract a number whether

52
00:03:41,090 --> 00:03:45,680
we used to float or two int depends upon the exact nature of the number that we're trying to work with

53
00:03:46,580 --> 00:03:50,570
the term float refers to a number that has a decimal attached to it.

54
00:03:50,930 --> 00:03:56,390
So in other words a number like One two three dot 0 1 0 or whatever else.

55
00:03:56,390 --> 00:04:00,530
So the decimal right here that makes this number a float.

56
00:04:00,530 --> 00:04:01,830
If we do not have a decimal.

57
00:04:01,850 --> 00:04:08,690
So if we have just one two three by itself this is an int or an integer so we can use the sanitizer

58
00:04:08,690 --> 00:04:14,660
right here to say that we either want a number with a decimal or we want a number with an integer if

59
00:04:14,660 --> 00:04:19,430
we call to int and there is a decimal inside that string then the decimal is just going to be left off

60
00:04:19,460 --> 00:04:24,040
and we'll only get everything before the decimal point.

61
00:04:24,180 --> 00:04:29,950
In my case I'm building my e-commerce application to work with U.S. dollars and U.S. dollars has since.

62
00:04:30,030 --> 00:04:36,240
So I can have like ten dollars and one cent so in my case I definitely want to have prices that are

63
00:04:36,240 --> 00:04:36,990
floats.

64
00:04:37,140 --> 00:04:42,240
But if you want to design your product to work with some other type of currency that does not have a

65
00:04:42,240 --> 00:04:47,460
decimal in it like so like no sense or whatever then you might use an integer instead and say like just

66
00:04:47,700 --> 00:04:48,460
1000.

67
00:04:48,490 --> 00:04:55,110
But I think it is if you're from say Thailand or what have you but for me like I said I can go with

68
00:04:55,110 --> 00:04:56,230
a float.

69
00:04:56,230 --> 00:04:58,220
Then the second method I bet you can guess what that does.

70
00:04:58,240 --> 00:05:01,770
That's gonna make sure that we actually have a floating point number.

71
00:05:01,840 --> 00:05:06,400
So it's entirely possible that a user might accidentally type into the price field right here a string

72
00:05:07,090 --> 00:05:09,160
if we did that and then called to float on it.

73
00:05:09,160 --> 00:05:14,200
We would knock get any number out of it but the two float method right here is not going to throw an

74
00:05:14,200 --> 00:05:15,210
error or anything like that.

75
00:05:15,220 --> 00:05:20,470
It's just gonna do its best that it can to actually get a number to actually make sure that we successfully

76
00:05:20,470 --> 00:05:22,510
got a number out of that operation.

77
00:05:22,510 --> 00:05:26,950
We then are going to do a validation step right here and say okay that previous step did we actually

78
00:05:26,950 --> 00:05:28,180
get a number.

79
00:05:28,360 --> 00:05:32,830
And then if we did we're going to make sure that the value is at least 1.

80
00:05:32,830 --> 00:05:40,470
So for my application I'm essentially saying that every product has a minimum price of one dollar.

81
00:05:40,550 --> 00:05:43,150
So that's what's going on with those two lines right there.

82
00:05:43,190 --> 00:05:47,540
It's now that we've got these validators put together let's say this file we're gonna go back to our

83
00:05:47,540 --> 00:05:53,900
product Scott J.S. inside the roots admin directory there it is right there we're going to require in

84
00:05:53,960 --> 00:05:59,090
those two validators we just authored and then wire them up to a new post request handler do we need

85
00:05:59,090 --> 00:06:07,750
to write inside this file to deal with these forms submission at the top I'll first get require title

86
00:06:08,440 --> 00:06:13,650
and require price or require that from the validators file.

87
00:06:13,650 --> 00:06:15,770
Remember it is dot slash validators.

88
00:06:15,810 --> 00:06:18,300
Is that file is inside the same directory as products

89
00:06:21,440 --> 00:06:21,700
then.

90
00:06:21,710 --> 00:06:29,270
Right after our current get request handler I'll put in another one of router post with admin products

91
00:06:29,470 --> 00:06:30,500
new.

92
00:06:30,740 --> 00:06:34,100
So this is the root handler that will deal with the actual form submission.

93
00:06:34,110 --> 00:06:40,190
Remember get is going to retrieve just the forum post is going to be the user trying to submit information

94
00:06:40,430 --> 00:06:45,750
from the form and the second argument will be an array with all the different validators that we want

95
00:06:45,750 --> 00:06:46,560
to run.

96
00:06:46,560 --> 00:06:54,910
So right now we have required title and require price then as a third argument will put in the actual

97
00:06:54,910 --> 00:06:55,960
callback function.

98
00:06:56,080 --> 00:07:04,280
So this will be called with req Andrés and then inside of here right now we'll just send back something

99
00:07:04,280 --> 00:07:09,790
like resort send submitted and to test out our validation.

100
00:07:09,820 --> 00:07:11,720
Let's also do a console dot log.

101
00:07:11,800 --> 00:07:16,690
Remember in order to get all those errors off of the incoming request after it's gone to require title

102
00:07:16,690 --> 00:07:22,900
and require price we have to require into this file that validation result function from the Express

103
00:07:22,900 --> 00:07:24,340
validator library.

104
00:07:24,340 --> 00:07:27,840
Let's go back to Oct J.S. in just review that very quickly.

105
00:07:27,930 --> 00:07:33,430
So inside of J.S. at the very top we've got a require statement right here for a validation result from

106
00:07:33,430 --> 00:07:38,840
Express validator the validation result function is going to take in a request.

107
00:07:38,860 --> 00:07:42,590
So like right here and it's gonna give us back our heirs object.

108
00:07:42,600 --> 00:07:45,610
So then it's up to us to check and see if that heirs object is empty or not.

109
00:07:45,620 --> 00:07:50,840
If it's not empty we're going to want to send back the same form once again with that erase object so

110
00:07:50,840 --> 00:07:56,890
that the template can show all the errors inside their let's make sure we do that really quickly.

111
00:07:57,150 --> 00:08:07,860
Just the validation result part that the top allowed in a require statement for validation results from

112
00:08:07,950 --> 00:08:10,140
Express dash validator

113
00:08:13,050 --> 00:08:16,890
Well then use that function down right here.

114
00:08:16,900 --> 00:08:18,090
Right about the console log.

115
00:08:18,090 --> 00:08:25,500
I'll do a const errors is validation result on the wreck object and then we can do the console log of

116
00:08:25,800 --> 00:08:26,190
errors

117
00:08:29,210 --> 00:08:29,520
okay.

118
00:08:29,570 --> 00:08:35,080
Let's say this and do a quick test it's all flip back over I'm going to just refresh the page really

119
00:08:35,080 --> 00:08:40,370
quickly I'll put in no title and how about no price we'll just start really simple.

120
00:08:40,450 --> 00:08:44,500
Now of course it says submitted because we're not actually do anything with that ear's object just yet

121
00:08:44,530 --> 00:08:51,950
but if we go back over to our terminal Rigo we should see Okay we've got invalid value for title and

122
00:08:51,950 --> 00:08:54,270
we've got an invalid value for the price as well.

123
00:08:54,320 --> 00:08:59,310
So clearly we probably need to customize these error messages which we can certainly do really quickly.

124
00:08:59,630 --> 00:09:04,880
But let's also make sure that if we put in some valid inputs like let's say a title of some sufficient

125
00:09:04,880 --> 00:09:12,520
length and a valid price as well like say 10 0 1 and submit it now I should not see any errors at all.

126
00:09:12,750 --> 00:09:17,110
And if I go back over Yep errors is an empty array okay.

127
00:09:17,140 --> 00:09:21,500
So this is a good start but like we just saw we'd probably need to customize the error messages.

128
00:09:21,550 --> 00:09:25,930
We also need to make sure that we possibly do some validation or otherwise handling of the image that

129
00:09:25,930 --> 00:09:27,640
gets submitted as well.

130
00:09:27,640 --> 00:09:29,910
So let's take care of all that in just a moment.
