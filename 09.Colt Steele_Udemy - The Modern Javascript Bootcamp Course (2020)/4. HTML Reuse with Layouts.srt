1
00:00:01,400 --> 00:00:05,810
In this video we're going to start to identify a couple of different deficiencies with our project right

2
00:00:05,810 --> 00:00:06,470
now.

3
00:00:06,470 --> 00:00:10,250
So a couple of things that are kind of technically working but not working as well as they possibly

4
00:00:10,250 --> 00:00:11,240
could.

5
00:00:11,240 --> 00:00:14,230
So the first kind of issue with our project I want to show you.

6
00:00:14,240 --> 00:00:16,770
Open up your browser go to locos 3000 slash.

7
00:00:16,790 --> 00:00:17,640
Sign in.

8
00:00:17,930 --> 00:00:23,780
Then we're going to open up our chrome console find the network request tab and then refresh the page.

9
00:00:24,140 --> 00:00:29,150
Once we do so we should see a request being made to look at those 3000 slash sign and write they're

10
00:00:29,480 --> 00:00:34,520
going to click on that and then take a look at the response tab on the response tab.

11
00:00:34,520 --> 00:00:40,190
We're going to see the exact content of the request or the response we're getting back from our server.

12
00:00:40,220 --> 00:00:44,720
So right now we are sending back a response that has just that H smell right there for our sign in page

13
00:00:44,750 --> 00:00:49,130
which totally makes sense because that is what we're calling that red dot send method with inside of

14
00:00:49,130 --> 00:00:56,100
our root handler so that is the only HCM elf that is being sent from our browser over to the server.

15
00:00:56,150 --> 00:00:58,340
What I want to show you something interesting.

16
00:00:58,340 --> 00:01:02,750
If we go back to our elements tab we can see that there is an HMO element.

17
00:01:02,750 --> 00:01:08,720
We can see there's a head a body a div and then inside the div is the form that we are generating with

18
00:01:08,720 --> 00:01:11,090
our different inputs inside of it.

19
00:01:11,090 --> 00:01:16,550
So the thing that is kind of interesting here is that we are only sending that div and everything inside

20
00:01:16,550 --> 00:01:18,090
of it down to the browser.

21
00:01:18,200 --> 00:01:23,360
But when we look at the actual HMO document that is being shown on the screen we see an e-mail element

22
00:01:23,470 --> 00:01:27,430
a head a body and then all the stuff we send down.

23
00:01:27,470 --> 00:01:29,480
So where's that each element coming from.

24
00:01:29,600 --> 00:01:30,260
Where's the head.

25
00:01:30,380 --> 00:01:31,210
Where's the body.

26
00:01:31,220 --> 00:01:33,950
Where are those different elements coming from.

27
00:01:33,950 --> 00:01:34,770
Well it's very simple.

28
00:01:34,790 --> 00:01:39,050
The browser is going to receive the HMO that we are receiving down or sending down.

29
00:01:39,050 --> 00:01:45,730
So that day right there in the browser is going to interpret this as being a partial HMO document.

30
00:01:45,740 --> 00:01:50,700
In other words the browser recognizes that we are not sending a full valid e-mail document.

31
00:01:50,720 --> 00:01:54,480
In other words we don't have the HDL head or body elements.

32
00:01:55,130 --> 00:02:01,100
So your browser is going to automatically creates an HMO element ahead a body and then stick all the

33
00:02:01,100 --> 00:02:05,270
content we set down inside of that body automatically.

34
00:02:05,270 --> 00:02:06,920
So is this a bad thing.

35
00:02:06,920 --> 00:02:10,010
Well I would say yeah it kind of is not the best thing in the world.

36
00:02:10,040 --> 00:02:15,470
We are relying upon the browser to kind of fix up this deficiency inside the H symbol that we're sending

37
00:02:15,470 --> 00:02:16,410
to it.

38
00:02:16,700 --> 00:02:21,860
If we wanted to really do the right thing here we should send down a entire each e-mail document every

39
00:02:21,860 --> 00:02:28,640
single time that we want to communicate some information to the browser so in other words are two views

40
00:02:28,640 --> 00:02:32,840
that we have put together or these two template functions we have put together are not really complete

41
00:02:32,840 --> 00:02:36,590
right now rather than just sending down a little snippet of each CML.

42
00:02:36,590 --> 00:02:43,730
In both cases we should instead send down an entire valid HMO document that's gonna be the first little

43
00:02:43,730 --> 00:02:45,500
thing that we're going to try to fix up.

44
00:02:45,530 --> 00:02:47,620
This might sound like a real easy fix but.

45
00:02:47,640 --> 00:02:51,860
Well let's start to write some code and along the way you're gonna very quickly see that one or two

46
00:02:51,860 --> 00:02:58,550
little issues start to arise so I'm going to first open up my sign and J.S. file again I'm inside my

47
00:02:58,550 --> 00:03:04,940
views directory your sign and J.S. we're going to start to add in some additional HDL here to turn this

48
00:03:04,940 --> 00:03:13,300
thing into a valid HDL document so at the very top inside the string I'm going to say Doc type it CML

49
00:03:15,590 --> 00:03:25,390
I'll put down my each CML elements and wrap that entire div I'll put in a head I'll put in a body and

50
00:03:25,390 --> 00:03:30,180
make sure the body wraps that div as well like so okay.

51
00:03:30,210 --> 00:03:37,790
So now we can say this we can go back over refreshed the page now if we go to the network tab we'll

52
00:03:37,790 --> 00:03:41,530
see that we are now sending down an entire valid each document.

53
00:03:41,680 --> 00:03:45,620
The nice thing about this is that now is a lot more obvious where we could add in some script tags and

54
00:03:45,620 --> 00:03:52,250
whatnot or some linked tags to a CSX page or a title inside the head all that kind of stuff.

55
00:03:52,340 --> 00:03:57,000
A lot more obvious where we're going to put those different elements so now we can repeat the same process

56
00:03:57,000 --> 00:03:58,960
over in sign up.

57
00:03:59,260 --> 00:04:09,270
So go to sign up J.S. and inside of here I'm going to do doc type HCM CML H CML head.

58
00:04:09,580 --> 00:04:10,120
And you know what.

59
00:04:10,150 --> 00:04:15,310
As I'm typing this I'm very starting very quickly starting to realize that I'm going to have some identical

60
00:04:15,310 --> 00:04:21,850
text inside of sign up j ust as I currently have inside of sine in J.S. In other words these two different

61
00:04:21,850 --> 00:04:25,220
files are gonna have the exact same each similar structure.

62
00:04:25,390 --> 00:04:27,700
So we're just completely repeating ourself here.

63
00:04:27,700 --> 00:04:34,240
And remember one of the number one rules of programming is don't repeat yourself besides just kind of

64
00:04:34,240 --> 00:04:38,830
duplicating this each e-mail between these two different files I can really start to think of some interesting

65
00:04:38,860 --> 00:04:44,320
issues that might start to arise if we just throw an entire each HTML document inside of here each time.

66
00:04:44,320 --> 00:04:50,890
For example let's imagine that inside of every page of our application we want to add a script tag to

67
00:04:50,890 --> 00:04:54,820
get some javascript file to run inside the browser to do so.

68
00:04:54,820 --> 00:04:59,410
We would have to go around to all of our different view files find the head element and inside there

69
00:04:59,420 --> 00:05:08,750
add a script tag like so now let's imagine that we accidentally forgot to add that script tag to the

70
00:05:08,750 --> 00:05:14,910
sign in J.S. file so in that case we would have half of our application right now getting that index

71
00:05:14,910 --> 00:05:19,940
dot J as file simply because we forgot to open up that other file and had in that very simple script

72
00:05:19,940 --> 00:05:26,760
tag right there so clearly trying to read duplicate or rewrite this entire e-mail structure separately

73
00:05:26,760 --> 00:05:31,470
for every view that we create inside of application is probably not going to be a very good long term

74
00:05:31,470 --> 00:05:32,910
strategy.

75
00:05:32,910 --> 00:05:36,470
So I know we just wrote out some this HDL but I'm going to immediately delete it.

76
00:05:36,480 --> 00:05:41,970
We're going to figure out a better way to handle this problem so inside of sign up J Yes I'm going to

77
00:05:41,970 --> 00:05:44,140
delete all stuff I just added right there.

78
00:05:46,890 --> 00:05:53,250
I'm going to go back over to sign and J.S. I'm going to delete the doc type the H2 e-mail head head

79
00:05:53,670 --> 00:06:00,810
body and delete the closing each melon body at the bottom as well and then make sure that I fix the

80
00:06:00,810 --> 00:06:07,480
indentation like so OK so how are we going to fix this problem and how are we going to somehow only

81
00:06:07,480 --> 00:06:11,230
write out all this each small stuff in one location.

82
00:06:11,230 --> 00:06:15,420
The idea is that we're going to create something called a layout file.

83
00:06:15,520 --> 00:06:20,200
The idea behind a lay up file is that we're going to have one single file that contains all of these

84
00:06:20,200 --> 00:06:25,530
standard HMO elements that we expect to have inside of our document inside of here.

85
00:06:25,540 --> 00:06:33,790
We might have a head element and we might also throw inside there's some script tags or some links and

86
00:06:33,820 --> 00:06:41,530
maybe our title as well so the benefit of having this kind of layout document is that we have one location

87
00:06:41,530 --> 00:06:46,510
inside of application where we can put all these different tags that need to be on every single page

88
00:06:46,570 --> 00:06:50,710
of our app then any time that we want to show some content to the user.

89
00:06:50,720 --> 00:06:52,320
Like actually send them a page.

90
00:06:52,520 --> 00:06:54,650
We're going to display the layout.

91
00:06:54,980 --> 00:07:00,020
We're going to pick a different template that we want to display like say Sign in or sign up and we're

92
00:07:00,020 --> 00:07:03,310
going to essentially stick that template right there in the body.

93
00:07:03,320 --> 00:07:09,560
Like so then if a user navigates over to sign in we're going to throw in the sign and template instead

94
00:07:10,670 --> 00:07:16,460
so we have one layout we can't have multiple layouts inside an application and our application actually

95
00:07:16,460 --> 00:07:17,510
is going to have multiple layouts.

96
00:07:17,510 --> 00:07:20,000
But for right now we're just going to have one layout.

97
00:07:20,000 --> 00:07:24,070
It has all these very repetitive elements inside of it and we're going just good.

98
00:07:24,080 --> 00:07:24,540
Excuse me.

99
00:07:24,560 --> 00:07:29,630
We're going to just swap out the body of that layout whenever we want to show a different page to the

100
00:07:29,630 --> 00:07:32,000
user.

101
00:07:32,090 --> 00:07:34,620
It's now we have a better idea of what we're going to be doing here.

102
00:07:34,620 --> 00:07:38,160
Let's take a pause and start to implement this layout in the next video.
