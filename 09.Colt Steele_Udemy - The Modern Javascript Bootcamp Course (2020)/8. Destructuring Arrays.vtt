WEBVTT
1
00:00:00.240 --> 00:00:05.700
The next new feature we'll see is called D structuring and restructuring is a really nice clean way

2
00:00:05.760 --> 00:00:13.520
to unpack values from data structures from arrays or from objects into their own separate distinct variables.

3
00:00:13.530 --> 00:00:20.190
I really liked this clip art that I found showing this man unpacking taking a piece one box out of this

4
00:00:20.190 --> 00:00:21.240
cluttered mess.

5
00:00:21.270 --> 00:00:23.880
It's kind of I guess a visual metaphor.

6
00:00:23.910 --> 00:00:26.390
I also like this one I couldn't decide which one was better.

7
00:00:26.490 --> 00:00:27.830
Here we're doing the same thing.

8
00:00:27.840 --> 00:00:33.630
We have a collection in that van and then we are removing one piece or a couple of pieces individually

9
00:00:33.870 --> 00:00:37.500
we're selecting them and I don't know creating variables with them.

10
00:00:37.550 --> 00:00:42.260
That's what you're supposed to think based off of this image restructuring is kind of like spread.

11
00:00:42.270 --> 00:00:44.490
In that we can use it in different ways.

12
00:00:44.550 --> 00:00:48.050
So I'm going to break it into a few short videos and the first one we'll see.

13
00:00:48.060 --> 00:00:52.310
The first option when we do structure is to D structure arrays.

14
00:00:52.440 --> 00:00:58.860
When we do structure in array we can unpack specific values out of that array into new variables.

15
00:00:58.860 --> 00:01:06.270
So here I have an array of marathon results from the men 2016 marathon at the Olympics and they're in

16
00:01:06.270 --> 00:01:06.990
order.

17
00:01:07.020 --> 00:01:13.110
So the gold medal went to Elliot Kip Shoji all the way down I think I go to sixth place here for Jared

18
00:01:13.110 --> 00:01:20.670
Ward if I wanted to create variables for let's say the first three and I wanted to make a variable called

19
00:01:20.700 --> 00:01:22.530
gold and make it set too.

20
00:01:22.540 --> 00:01:32.100
Elliot kept bogey I could do it this way concept gold equals race results of zero and then duplicate

21
00:01:32.100 --> 00:01:42.780
that induced silver here equals race results of 1 and bronze equals race results of 2 and that works

22
00:01:42.780 --> 00:01:43.350
of course.

23
00:01:43.380 --> 00:01:47.550
That's sort of standard array stuff we've seen before 3D structuring.

24
00:01:47.550 --> 00:01:49.400
This was the only option.

25
00:01:49.410 --> 00:01:52.280
This was how you created variables based off of an array.

26
00:01:52.290 --> 00:01:59.340
You referenced a specific index and you saved it to a new variable but now we have a much cleaner shorter

27
00:01:59.340 --> 00:02:04.050
syntax where we can unpack the values all at once in a single line.

28
00:02:04.050 --> 00:02:07.230
Here's what it would look like equivalent to this.

29
00:02:07.320 --> 00:02:13.620
We would write const array brackets and then we write our variable names in here.

30
00:02:13.620 --> 00:02:20.520
Gold silver and bronze equals race results.

31
00:02:20.590 --> 00:02:26.680
So what this will do right here is go into race results and use the order that we wrote them in right

32
00:02:26.680 --> 00:02:27.250
here.

33
00:02:27.250 --> 00:02:31.850
These new variables will be created in this order based off of their position.

34
00:02:31.930 --> 00:02:37.030
So gold will be set to the first item in race results which is Elliott captured.

35
00:02:37.600 --> 00:02:39.560
Silver will be set too.

36
00:02:39.590 --> 00:02:46.660
I'm sorry if I'm butchering these names for you so the Lisa and bronze will be set to gallon Galen Rupp

37
00:02:47.410 --> 00:02:53.080
and we'll have three new variables so we won't have new variables for these the final three results

38
00:02:53.110 --> 00:02:59.080
or the final three elements but the first three will each be assigned to a new variable so I commented

39
00:02:59.080 --> 00:03:03.800
out the original version but if I look in my console I still have gold.

40
00:03:03.970 --> 00:03:07.780
I have silver and I have bronze.

41
00:03:07.840 --> 00:03:10.440
The race results array is unchanged.

42
00:03:10.450 --> 00:03:14.680
I'm simply making a variable referencing the value at each index.

43
00:03:14.680 --> 00:03:16.290
Just like we had before here.

44
00:03:16.450 --> 00:03:18.520
This doesn't change race results in any way.

45
00:03:18.550 --> 00:03:20.800
We're just accessing and making new variables.

46
00:03:20.800 --> 00:03:21.560
Same thing here.

47
00:03:22.030 --> 00:03:23.140
So the position matters.

48
00:03:23.140 --> 00:03:32.110
If I were to swap them and do silver and then gold I would end up with silver as Elliott kept Yogi.

49
00:03:32.230 --> 00:03:37.930
That's the first index in our D structuring statement so we get that first index in the array.

50
00:03:38.110 --> 00:03:41.350
And gold would be set to face a la Lisa.

51
00:03:42.100 --> 00:03:46.270
So this is the basics of restructuring we could do a variable for each element.

52
00:03:46.510 --> 00:03:51.790
But there are some other things that we can do as well if we wanted to skip an index.

53
00:03:51.790 --> 00:03:58.730
Let's say I want the first and the fourth results and I want a variable called first.

54
00:03:58.810 --> 00:04:01.600
I could do that race results.

55
00:04:01.600 --> 00:04:06.100
That one's easy enough because we know first it's going to be the first element.

56
00:04:06.190 --> 00:04:12.520
If we take a look at first we have L.A. cop show Gagan but if I want fourth if I just write fourth here

57
00:04:12.910 --> 00:04:13.990
we're going to end up with failure.

58
00:04:13.990 --> 00:04:18.770
So Lisa as the fourth variable but if I add extra commas.

59
00:04:18.850 --> 00:04:24.250
So the first extra comma is going to skip one index and go to Galen Rupp.

60
00:04:24.550 --> 00:04:30.850
If I take a look now a fourth is set to Galen Rupp which is actually the third element so I could add

61
00:04:31.120 --> 00:04:37.730
another comma to get the fourth element and now fourth is set to here may give you Selassie.

62
00:04:38.190 --> 00:04:39.170
Okay.

63
00:04:39.190 --> 00:04:43.030
And another thing we can do is actually use the rest.

64
00:04:43.030 --> 00:04:50.440
Dot dot dot inside of our D structuring this between the array braces in order to collect the rest of

65
00:04:50.440 --> 00:04:52.270
an array into a new variable.

66
00:04:52.270 --> 00:04:57.460
I could make a variable called winner to get Eliot Kip Shoji and then everything else all the other

67
00:04:57.460 --> 00:05:01.410
five strings in this array could be collected into a new variable.

68
00:05:01.480 --> 00:05:06.510
It would look like this const winner comma and then dot dot dot.

69
00:05:06.580 --> 00:05:08.210
Let's go with others.

70
00:05:08.230 --> 00:05:09.300
It's not the best name.

71
00:05:09.310 --> 00:05:11.710
It's kind of minimizing their accomplishments.

72
00:05:11.710 --> 00:05:13.320
The winner and then the others.

73
00:05:13.600 --> 00:05:18.610
Meanwhile all these people ran like two two hour ten minute marathons or faster.

74
00:05:18.610 --> 00:05:20.590
But let's just go with others.

75
00:05:20.650 --> 00:05:21.420
Race results

76
00:05:24.060 --> 00:05:26.040
and we'll have winner set too.

77
00:05:26.050 --> 00:05:30.290
ELLIOTT captured Gaye and others is an array of five elements.

78
00:05:30.330 --> 00:05:38.340
The other five in that array and I could combine these so if I wanted to skip for some reason you said

79
00:05:38.490 --> 00:05:45.510
Lisa now others is going to contain four elements and we didn't capture for you so little Lisa and a

80
00:05:45.510 --> 00:05:48.240
variable at all so I'll undo that.

81
00:05:48.270 --> 00:05:51.220
That's pretty much it for de structuring arrays.

82
00:05:51.270 --> 00:05:55.880
You just come up with variable names you assign them in one line like I have here.

83
00:05:55.880 --> 00:05:58.220
I mean you could break it up if it's a super long line.

84
00:05:58.380 --> 00:06:03.480
But most of the time if it's in one line you set it equal to whatever array you're trying to unpack

85
00:06:03.810 --> 00:06:09.660
and then you single out the elements you want based off of the position you can use commas to skip elements

86
00:06:09.930 --> 00:06:15.900
and you can use dot dot dot the rest operator to collect the remaining or the rest of the array into

87
00:06:15.990 --> 00:06:16.500
a variable.
