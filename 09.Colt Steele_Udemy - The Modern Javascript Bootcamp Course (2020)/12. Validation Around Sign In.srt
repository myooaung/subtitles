1
00:00:00,880 --> 00:00:03,400
We've now got some validation displaying on our form.

2
00:00:03,400 --> 00:00:04,810
Right now it looks really ugly.

3
00:00:04,810 --> 00:00:07,570
We are going to eventually fix up the styling of this form.

4
00:00:07,570 --> 00:00:09,800
We're gonna take care of that in just a little bit.

5
00:00:09,820 --> 00:00:12,910
It's now that our sign up form is essentially all put together.

6
00:00:12,910 --> 00:00:17,280
We're going to repeat the same process for our sign in form as well.

7
00:00:17,500 --> 00:00:21,640
So inside my off dot J.S. file inside my roots admin directory.

8
00:00:21,640 --> 00:00:25,430
I'm going to go down to our post request handler for these sign in Roots.

9
00:00:25,450 --> 00:00:27,750
Here it is right here.

10
00:00:27,930 --> 00:00:31,890
So once again we want to add in some validation around email and password.

11
00:00:31,950 --> 00:00:37,440
We want to check to make sure that the email isn't email and that the password well is like present

12
00:00:37,440 --> 00:00:38,620
or exists.

13
00:00:38,910 --> 00:00:43,440
Then we're also going to make sure that we check to see that the email provided actually exists inside

14
00:00:43,440 --> 00:00:50,490
of our users repository and that the password provided compares or is equal to the one that we had stored

15
00:00:50,520 --> 00:00:54,790
inside there as well so let's get to it.

16
00:00:54,820 --> 00:01:00,520
We're going to add in our validators directly inside of an array as the second argument once again we're

17
00:01:00,520 --> 00:01:03,950
going to write out the validators directly inside of here like the entire chain.

18
00:01:04,000 --> 00:01:08,590
And then we will eventually move them over to that validators jazz file that we created just a moment

19
00:01:08,590 --> 00:01:09,630
ago.

20
00:01:09,670 --> 00:01:14,080
The reason I want to put the validators together inside of here first is just so we can see them right

21
00:01:14,080 --> 00:01:21,040
away and see the entire code that is being executed or the post request sign in handler OK.

22
00:01:21,070 --> 00:01:28,380
So in this case we're gonna do a check of email and a check of password and the most part the validation

23
00:01:28,380 --> 00:01:31,670
on both these is going to be similar to what it was like before.

24
00:01:31,680 --> 00:01:40,120
So for the email we're going to trim it we're then going to make sure that we normalize it and then

25
00:01:40,120 --> 00:01:44,640
we will validate that it actually is an email OK.

26
00:01:44,650 --> 00:01:51,120
So simple enough and we can do something similar for the password as well so we can trim it and then

27
00:01:51,120 --> 00:01:54,950
we can check and see if it is some minimum and maximum length.

28
00:01:55,050 --> 00:02:01,290
So I'll say is like the min of four and a max of 20 now.

29
00:02:01,330 --> 00:02:02,900
I got a quick question for you.

30
00:02:02,950 --> 00:02:08,810
Does it make sense to validate the length of the password provided when a user is signing in.

31
00:02:08,950 --> 00:02:14,830
In my opinion just my opinion here it does not make sense to validate the incoming password.

32
00:02:14,830 --> 00:02:16,060
Why is that.

33
00:02:16,060 --> 00:02:19,600
Well I want to throw out a hypothetical situation.

34
00:02:19,750 --> 00:02:24,790
I want you to imagine that when we first create our application our validation rules to allow a user

35
00:02:24,790 --> 00:02:28,320
to sign up requires Whoops it's in their file now.

36
00:02:28,420 --> 00:02:32,630
So our validation rules to sign up for are the very start of our application.

37
00:02:32,680 --> 00:02:38,470
We're going to say you have to have a password with a minimum of four characters and a maximum of 20

38
00:02:39,400 --> 00:02:45,460
then maybe sometime later after a bunch of users sign up to our application we changed those rules and

39
00:02:45,460 --> 00:02:48,830
we say well you know what we want some more secure passwords.

40
00:02:48,910 --> 00:02:53,250
So now we're going to require a minimum length of 10 characters.

41
00:02:53,260 --> 00:02:59,470
Well now whenever a user tries to sign in if they were in that first batch or that first cohort of users

42
00:02:59,680 --> 00:03:05,630
who were allowed to have passwords of length for now every time they tried to sign in they're going

43
00:03:05,630 --> 00:03:10,280
to fail this validation check right here because their password that they're trying to enter is not

44
00:03:10,280 --> 00:03:16,280
long enough so they would be totally locked out of our application entirely because they wouldn't even

45
00:03:16,280 --> 00:03:18,800
be able to log in to change their password at all.

46
00:03:19,820 --> 00:03:25,100
So in my opinion doing validation on the password during these sign in process specifically around the

47
00:03:25,100 --> 00:03:33,110
link just doesn't make a whole lot of sense so I am going to remove that is length check.

48
00:03:33,260 --> 00:03:38,930
I am going to add in after that to our email check right there.

49
00:03:39,080 --> 00:03:42,740
Let's put on a with message just like we did previously.

50
00:03:42,740 --> 00:03:47,390
So if the email provided is not an email let's make sure that we display a message of something like

51
00:03:47,810 --> 00:03:50,300
must provide a valid email

52
00:03:53,390 --> 00:03:53,710
OK.

53
00:03:53,800 --> 00:03:58,330
So that is all the validation we're going to do using the built in validators your note.

54
00:03:58,330 --> 00:04:01,600
You'll notice that we're not even checking to see if a password was provided.

55
00:04:01,630 --> 00:04:05,910
So a user could enter an empty string here for all we care at the end of the day.

56
00:04:05,920 --> 00:04:10,750
It doesn't make a big difference because well all we really care about is that they enter the valid

57
00:04:10,750 --> 00:04:13,350
password so they can choose not to enter a password.

58
00:04:13,360 --> 00:04:16,090
They could choose to enter a password is too short too long.

59
00:04:16,090 --> 00:04:18,190
One that has weird characters inside of it.

60
00:04:18,190 --> 00:04:22,630
It just doesn't matter because at the end of the day the only thing we care about is that after hashing

61
00:04:22,630 --> 00:04:29,120
that password it is equal to the original one that we had stored.

62
00:04:29,130 --> 00:04:33,210
So now that we've got these built in validators put together we're going to once again put together

63
00:04:33,210 --> 00:04:35,520
some custom validation steps.

64
00:04:35,520 --> 00:04:39,720
So we're going to wrap up all the logic that's going to make sure that there is an existing user with

65
00:04:39,720 --> 00:04:40,500
that same email.

66
00:04:41,100 --> 00:04:45,240
We're also going to create a custom validator to make sure that the correct password was entered as

67
00:04:45,240 --> 00:04:50,820
well let's take care of a customer validator to make sure that the you know provided actually corresponds

68
00:04:50,850 --> 00:05:01,280
with a user so on the email check a chain on a custom I'm gonna mark the function inside of your as

69
00:05:01,280 --> 00:05:09,050
async as I want to use the async await syntax then receive the email that the user provided and inside

70
00:05:09,050 --> 00:05:19,940
of here we'll do const user is a weight users repo it one by and remember how that function works we

71
00:05:19,940 --> 00:05:23,060
provide a kind of filtering object right here.

72
00:05:23,180 --> 00:05:29,880
So I want to find a user with an email equal to the email that was provided and as usual we can condense

73
00:05:29,880 --> 00:05:36,960
that down to just email inside of a set of curly braces then we'll check and see if we actually found

74
00:05:36,960 --> 00:05:37,530
a user.

75
00:05:37,620 --> 00:05:39,750
So we'll say if there is no user

76
00:05:42,470 --> 00:05:49,520
let's throw a new error and say email not found.

77
00:05:49,600 --> 00:05:54,130
So again if we throw that error message that is a sign that something went wrong with our validation

78
00:05:54,130 --> 00:05:57,820
process so validator Express is going to say OK.

79
00:05:57,840 --> 00:06:03,090
There must be an error associated with this email property and we will later see that appear once we

80
00:06:03,210 --> 00:06:06,690
kind of gleam ALL OF OUR EARS FROM OUR REC object as we did previously

81
00:06:09,430 --> 00:06:09,730
OK.

82
00:06:09,780 --> 00:06:13,040
Let's now go back up to our post request handler.

83
00:06:13,140 --> 00:06:19,430
Remember up here we were signed up ran validation result on that request to get back our ears object.

84
00:06:19,500 --> 00:06:20,790
Let's do that once again.

85
00:06:20,790 --> 00:06:24,450
We're going to check to make sure that the customer validator that we just put together works the way

86
00:06:24,450 --> 00:06:32,150
we expect so inside of my sign in root handler the one that we're working on right now will say const

87
00:06:32,210 --> 00:06:42,600
errors is going to be validation result of req and then we'll do a console log of the errors so we get

88
00:06:42,600 --> 00:06:45,990
back.

89
00:06:45,990 --> 00:06:47,820
All right so let's save this.

90
00:06:47,990 --> 00:06:54,930
I'm gonna go back over to the browser I'm gonna go to my sign in route now I'm going to enter in a valid

91
00:06:54,960 --> 00:06:57,030
email and a valid password.

92
00:06:57,030 --> 00:07:01,110
Actually what we're trying to make this thing fail to enter and a email that actually doesn't exist

93
00:07:01,110 --> 00:07:01,570
at all.

94
00:07:01,590 --> 00:07:02,880
Let's take care of that.

95
00:07:02,910 --> 00:07:08,040
So I'm gonna put an email that definitely doesn't exist but it is technically a valid e-mail help put

96
00:07:08,040 --> 00:07:11,790
in some random password as well so now I'm told.

97
00:07:11,790 --> 00:07:12,790
Email not found.

98
00:07:12,840 --> 00:07:14,940
That is from our original validation code.

99
00:07:14,940 --> 00:07:21,240
That is not from the validator stuff we just put together to see what the validator set spat out.

100
00:07:21,270 --> 00:07:27,300
We need to go to our terminal and check out the results of that council log so at my terminal I can

101
00:07:27,300 --> 00:07:27,580
see.

102
00:07:27,580 --> 00:07:34,690
OK we've got some errors there is an error around the email specifically that email was not found.

103
00:07:34,690 --> 00:07:39,140
All right so I definitely say that that first custom validator worked out the way we expect.

104
00:07:39,160 --> 00:07:40,800
So this is looking pretty good.

105
00:07:40,810 --> 00:07:41,920
Let's take a quick pause right here.

106
00:07:41,920 --> 00:07:46,030
When we come back the next video we're gonna set up the custom validator to make sure that the password

107
00:07:46,060 --> 00:07:47,530
entered is valid as well.
