WEBVTT
1
00:00:00.240 --> 00:00:06.090
Next up we'll see one of my favorite new features in JavaScript async functions so async functions and

2
00:00:06.090 --> 00:00:09.930
this entire section depends extremely heavily on promises.

3
00:00:09.960 --> 00:00:15.180
Make sure that you are comfortable with promises and if you're not go through the previous I think two

4
00:00:15.180 --> 00:00:22.260
sections ago the promises section because at their core async functions are just a nice syntactical

5
00:00:22.260 --> 00:00:23.950
sugar for promises.

6
00:00:23.950 --> 00:00:28.950
It's a nice clean easy syntax to work with promises but you still have to understand promises.

7
00:00:28.950 --> 00:00:34.590
All right so let's start with a quick intro to the main idea behind async functions.

8
00:00:34.590 --> 00:00:43.160
If we have some regular old function let's call it get data and get data makes a request using axioms

9
00:00:43.180 --> 00:00:44.820
already have X yos included.

10
00:00:45.050 --> 00:00:52.390
Or we could use fetch or even an X H.R. if we are a bit psycho let's do X year that get I have a U.R.L.

11
00:00:52.670 --> 00:00:56.960
it doesn't matter we're not building anything with this but I'm fetching some information using axioms

12
00:00:57.680 --> 00:00:59.160
in a regular function.

13
00:00:59.270 --> 00:01:07.460
If I tried to control that log something afterwards let's say I wanted a variable called data and I

14
00:01:07.460 --> 00:01:10.080
want to set it equal to the result of running axiom stuff.

15
00:01:10.090 --> 00:01:14.630
Get this you RL and then control that log data.

16
00:01:14.630 --> 00:01:17.980
What will we see when I run get data.

17
00:01:18.040 --> 00:01:20.300
Okay let's try it out.

18
00:01:20.490 --> 00:01:25.830
It's not going to work to give us the data all that we see is a promise.

19
00:01:25.880 --> 00:01:30.000
OK so access that get returned to promise and we cancel that log.

20
00:01:30.000 --> 00:01:33.190
That promise the promise was pending.

21
00:01:33.210 --> 00:01:37.770
Now it's hopefully resolved but it doesn't matter we don't have access to that resolved value anyway

22
00:01:38.100 --> 00:01:39.490
because we're not waiting.

23
00:01:39.510 --> 00:01:45.870
We're not using dot then as we've seen with promises in order to run code when the promise is resolved.

24
00:01:45.870 --> 00:01:52.290
So it would be nice if we could write code like this where we could just write one line and act as if

25
00:01:52.290 --> 00:01:58.200
javascript was synchronous meaning that this code would not run until this finished.

26
00:01:58.200 --> 00:02:08.430
But instead we've got to do this then as we've seen data and then we counsel dot log data so we'll see

27
00:02:08.580 --> 00:02:12.180
our first council dot log of data which should print out a promise.

28
00:02:12.180 --> 00:02:16.430
If I run it there we go and then we see what we get back.

29
00:02:16.680 --> 00:02:18.130
So nothing new here.

30
00:02:18.240 --> 00:02:25.440
Just reiterating the fact that we can't write code like this where we expect this thing to be done first.

31
00:02:25.440 --> 00:02:31.310
If we have code that relies on an asynchronous operation like an axiom stat get method call.

32
00:02:31.500 --> 00:02:36.430
We need to use dot then assuming it returns a promise which axioms don't get does.

33
00:02:36.660 --> 00:02:39.010
Otherwise we would pass in a callback.

34
00:02:39.060 --> 00:02:40.770
So this is nothing new.

35
00:02:40.830 --> 00:02:43.140
This does not work but it would be nice if it did.

36
00:02:43.140 --> 00:02:43.380
Right.

37
00:02:43.380 --> 00:02:48.300
It's kind of obnoxious that we have to worry about callbacks and dot then and that is the entire point

38
00:02:48.420 --> 00:02:50.760
of the async and await keywords.

39
00:02:50.790 --> 00:02:55.080
So there are two new keywords two pieces to making this work.

40
00:02:55.080 --> 00:02:56.920
Two pieces of the puzzle.

41
00:02:57.060 --> 00:03:01.650
And by the end of this section you'll see how we could write a function that looks pretty much like

42
00:03:01.650 --> 00:03:06.660
this with no doubt then really no explicit mention of promises or callbacks.

43
00:03:06.660 --> 00:03:11.910
And the function will look like it's a synchronous function like this happens first and then as soon

44
00:03:11.910 --> 00:03:14.130
as it finishes this runs.

45
00:03:14.130 --> 00:03:19.740
But behind the scenes there will be promises involved and then and promises being resolved thanks to

46
00:03:19.740 --> 00:03:20.310
the magic.

47
00:03:20.340 --> 00:03:23.370
The syntactical sugar of a sink and a weight.

48
00:03:23.910 --> 00:03:29.460
So that's the whole goal doesn't give us anything we can't already do with promises it just makes it

49
00:03:29.460 --> 00:03:35.960
easier and cleaner to work with promises and create synchronous looking asynchronous code.

50
00:03:36.030 --> 00:03:39.690
So let's see how it works in the next video we'll start with the async keyword.
