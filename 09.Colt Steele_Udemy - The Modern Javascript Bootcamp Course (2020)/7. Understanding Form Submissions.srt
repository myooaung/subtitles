1
00:00:00,870 --> 00:00:05,640
Let's get a better sense of how a browser treats in each simple form and what really happens behind

2
00:00:05,640 --> 00:00:06,360
the scenes.

3
00:00:06,360 --> 00:00:12,450
When we enter in some inputs and then click on some button to get started I'm going to first open up

4
00:00:12,810 --> 00:00:18,210
the network request tab inside of my chrome console so open up my Chrome developer tools and then find

5
00:00:18,210 --> 00:00:19,740
the Network tab right here.

6
00:00:20,850 --> 00:00:25,680
Then I'll find my form once again I'm gonna enter in some text to all three inputs and then click on

7
00:00:25,740 --> 00:00:30,840
sign up and I do so I can very clearly see that a request is being issued.

8
00:00:30,840 --> 00:00:34,410
This request is going from the browser off to the server.

9
00:00:34,410 --> 00:00:38,970
So in other words we know right away that whenever we have a form element and we click on some sign

10
00:00:38,970 --> 00:00:42,600
up button or something like that Eddie request is being issued.

11
00:00:42,600 --> 00:00:45,860
The important thing to understand is exactly what is being communicated.

12
00:00:46,590 --> 00:00:52,950
So by default whenever you click a submit button or any button really inside of a form or whenever you

13
00:00:52,950 --> 00:00:59,190
select an input and hit the enter key the browser is going to do something called an automatic submission

14
00:01:00,000 --> 00:01:01,650
in an automatic submission.

15
00:01:01,650 --> 00:01:05,430
Your browser is going to take a look at that form elements.

16
00:01:05,430 --> 00:01:08,800
It's going to find all the different input elements inside of it.

17
00:01:08,850 --> 00:01:14,310
The browser is going to attempt to collect all the information from each of those input inputs or input

18
00:01:14,370 --> 00:01:19,830
elements that have a name property assigned to them at present are different inputs don't have name

19
00:01:19,830 --> 00:01:21,200
properties assigned.

20
00:01:21,210 --> 00:01:26,020
So right now our browser is not trying to collect any information whatsoever.

21
00:01:26,230 --> 00:01:31,300
I'm gonna go back round to each of these three inputs and add in a Name property to each of them.

22
00:01:31,330 --> 00:01:42,390
So for the first one I'm gonna add in a name of email then password and finally password confirmation.

23
00:01:42,390 --> 00:01:43,230
All one word.

24
00:01:43,230 --> 00:01:47,260
This time around I'll then save this.

25
00:01:47,460 --> 00:01:49,260
I'm gonna go back over to the browser.

26
00:01:49,260 --> 00:01:53,910
I'm gonna make sure I refresh the page to get the latest each e-mail that we just authored and I'll

27
00:01:53,910 --> 00:02:01,290
enter in an email a password and a password confirmation and click on sign up as soon as I do so you'll

28
00:02:01,290 --> 00:02:04,380
notice that now are your l has been updated.

29
00:02:04,380 --> 00:02:09,150
So that is our browser taking a look at those three different input elements.

30
00:02:09,150 --> 00:02:11,240
It takes a look at the Name property of each of them.

31
00:02:11,340 --> 00:02:15,780
So email password and password confirmation and the value from each of them as well.

32
00:02:16,790 --> 00:02:22,770
It informs all that information into something called a query string and then the browser makes a gift

33
00:02:22,830 --> 00:02:23,790
type request.

34
00:02:23,790 --> 00:02:29,180
So a request with a method of get to the same year L that is currently looking at.

35
00:02:29,190 --> 00:02:34,110
So you'll notice that the request right here was automatically mean the URL was automatically updated.

36
00:02:34,200 --> 00:02:39,240
I can see a question mark right there and then all the information out of the form is right after that

37
00:02:39,240 --> 00:02:39,780
question mark.

38
00:02:40,530 --> 00:02:46,850
So everything after the question mark is referred to as the query string so we could configure our Express

39
00:02:46,850 --> 00:02:54,260
server to receive this information right here and take a look at the email password and password confirmation

40
00:02:54,260 --> 00:03:01,500
properties and then use that information to create an account for this user by default when the servers

41
00:03:01,520 --> 00:03:07,110
I mean when the browser takes this information and makes a request it is a get type request but we can

42
00:03:07,200 --> 00:03:10,940
and very frequently do modify that behavior.

43
00:03:11,080 --> 00:03:14,330
I'm gonna go back over to my browser.

44
00:03:14,580 --> 00:03:18,030
I'm going to find me and my editor to find that form element.

45
00:03:18,270 --> 00:03:26,730
I'm going to add on a method property to it and I'm going to give it a value of host like so this is

46
00:03:26,730 --> 00:03:32,160
going to cause the default behavior of the browser to change slightly now rather than making a get type

47
00:03:32,160 --> 00:03:38,670
request to our Express server it is going to instead make a post type request a post request is a type

48
00:03:38,670 --> 00:03:44,400
of H CTP request that is commonly associated with creating a record of some kind.

49
00:03:44,400 --> 00:03:51,210
This might be like creating a blog post or a comment where a new image upload or even a user account

50
00:03:51,420 --> 00:03:53,620
as is the case for us.

51
00:03:53,760 --> 00:03:59,640
So the default behavior of the browser is to make form submissions with a method of get we are overwriting

52
00:03:59,640 --> 00:04:03,060
in this case by applying a method of post.

53
00:04:03,170 --> 00:04:04,720
So let's now save this.

54
00:04:05,070 --> 00:04:11,520
Go back over make sure we refresh enter in some fake information again and click on sign up.

55
00:04:11,680 --> 00:04:15,810
And this time when we do I'm going to take special note to take a look at what happens inside of our

56
00:04:15,810 --> 00:04:22,010
network request log it's going to click on sign up and I see an error message like this right here.

57
00:04:22,200 --> 00:04:23,700
Your message is totally fine.

58
00:04:23,700 --> 00:04:25,390
We're gonna ignore that for just a moment.

59
00:04:26,500 --> 00:04:31,730
Instead I'm going to click on the request that was just issued when I do so I'll notice on the headers

60
00:04:31,730 --> 00:04:36,200
tab at the request method is now made with a post.

61
00:04:36,290 --> 00:04:43,070
So again a post method is associated with creating a record the reason that we're seeing an error message

62
00:04:43,070 --> 00:04:48,350
here is because our Express server does not have a root handler associated with the type of requests

63
00:04:48,350 --> 00:04:49,550
we just made.

64
00:04:49,550 --> 00:04:54,830
Remember when we call app dot get right here with forward slash we are telling that router that is inside

65
00:04:54,830 --> 00:04:56,250
of this app object.

66
00:04:56,290 --> 00:05:02,290
We want to watch for any incoming request for a path of forward slash and a method of get.

67
00:05:02,510 --> 00:05:06,300
If we ever received that we're going to run this callback function.

68
00:05:06,510 --> 00:05:12,630
We don't have any type of configuration receiving any other type of request or any other request with

69
00:05:12,630 --> 00:05:18,460
a different method or a different route our browser is now trying to make a method or request with a

70
00:05:18,460 --> 00:05:21,820
method of post and a route of forward slash.

71
00:05:21,940 --> 00:05:25,620
And so this error that we see right here is coming from our running express server.

72
00:05:25,750 --> 00:05:32,940
It is complaining that we don't have any configuration to handle a request with this configuration we

73
00:05:32,940 --> 00:05:38,490
could very easily fix that by going back over going underneath our apt I'd get statement and adding

74
00:05:38,490 --> 00:05:45,600
in app dot post with a forward slash.

75
00:05:45,770 --> 00:05:50,770
So as you would guess this is telling our router to watch for an incoming request with a path of forward

76
00:05:50,770 --> 00:05:57,460
slash and a method of post if it sees that it's then going to run this callback function right here.

77
00:05:58,190 --> 00:06:04,220
So inside of this callback function let's try pretending that a user signed up successfully for an account.

78
00:06:04,550 --> 00:06:16,320
I'll do so by saying resident send account created like so I'll then say this go back over I'm going

79
00:06:16,320 --> 00:06:22,920
to manually navigate back to local host three thousand once I do I see my form again so I'm going to

80
00:06:22,910 --> 00:06:28,080
once again enter in some email password and password confirmation and click on sign up.

81
00:06:28,080 --> 00:06:30,650
So this time around I then see account created.

82
00:06:30,780 --> 00:06:36,390
That is because when we clicked on that submit button our browser took that form took all the information

83
00:06:36,390 --> 00:06:42,870
inside of it made a post request to the current year L that we are visiting our server now has some

84
00:06:42,870 --> 00:06:47,500
configuration to handle a request to this year L or this path to be more specific.

85
00:06:47,670 --> 00:06:54,850
And with this method of post so our server then ran the appropriate callback function and from inside

86
00:06:54,850 --> 00:06:59,920
there we called resort sent to send back the simple string account created obviously no account has

87
00:06:59,920 --> 00:07:04,540
actually been created at this point in time we would have to actually add in some code inside this callback

88
00:07:04,540 --> 00:07:06,650
function to create an account for the user.

89
00:07:06,760 --> 00:07:10,360
We'll take care of that in just a little bit but right now I just want to have that kind of fake success

90
00:07:10,360 --> 00:07:11,310
message in there.

91
00:07:12,260 --> 00:07:12,490
OK.

92
00:07:12,530 --> 00:07:18,020
So in this video big things that we focused on and doing it a kind of reiteration of this because this

93
00:07:18,020 --> 00:07:23,520
is a very important topic that we're going to repeat or have to reuse quite a bit throughout this application.

94
00:07:23,540 --> 00:07:30,840
We created a form element we added on a method of post to configure what the browser does whenever we

95
00:07:30,840 --> 00:07:36,510
attempt to submit this form the browser then took all the different inputs it took all the information

96
00:07:36,510 --> 00:07:41,970
out as different inputs and it knew what to call each piece of information because the name property

97
00:07:42,030 --> 00:07:47,990
that we assigned to each input the browser then took all that information and made a post request to

98
00:07:47,990 --> 00:07:54,010
the same route it was currently visiting our server then saw that incoming request for a post of forward

99
00:07:54,010 --> 00:07:57,340
slash and then ran that callback function right there.

100
00:07:58,380 --> 00:08:03,360
Last thing I want to mention very quickly when we made the formal submission with a method of get we

101
00:08:03,360 --> 00:08:09,330
saw the form information inside the URL when we changed it out to post that information is no longer

102
00:08:09,330 --> 00:08:10,680
placed inside the URL.

103
00:08:10,920 --> 00:08:15,070
Instead it gets appended onto something called the request body.

104
00:08:15,240 --> 00:08:22,260
So our HDTV request if it is a post request has a body property which can contain some amount of information

105
00:08:23,260 --> 00:08:28,090
we can see the information that got sent from the browser to our server by once again opening up the

106
00:08:28,210 --> 00:08:31,930
headers tab and clicking on the request was issued right here.

107
00:08:31,950 --> 00:08:38,430
So this is the post request we issued if we scroll down to the bottom we'll see a section that says

108
00:08:38,520 --> 00:08:42,900
form data so that's all the information that was contained inside the form that we submitted to our

109
00:08:42,900 --> 00:08:43,970
back and server.

110
00:08:44,010 --> 00:08:50,160
So I've got my email password in password confirmation right there so we definitely are sending some

111
00:08:50,160 --> 00:08:55,800
information to our server but now the next logical step is understanding how we can actually access

112
00:08:55,800 --> 00:09:00,990
that information inside the request handler that is handling that request because at some point time

113
00:09:01,020 --> 00:09:06,660
inside this function we are actually going to have to take that form information specifically the email

114
00:09:06,660 --> 00:09:10,060
parser and password confirmation and create an account for this user.

115
00:09:10,260 --> 00:09:12,750
So let's figure out how to handle that step in the next video.
