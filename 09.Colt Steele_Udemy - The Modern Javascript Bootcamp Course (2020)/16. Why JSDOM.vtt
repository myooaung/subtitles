WEBVTT
1
00:00:00.930 --> 00:00:04.710
Now we've got this little simple application put together let's start to discuss how we're going to

2
00:00:04.710 --> 00:00:07.000
use Jamestown to actually test this thing.

3
00:00:07.070 --> 00:00:12.060
Now to begin I first want to point out that testing this application we just put together would be really

4
00:00:12.060 --> 00:00:17.610
difficult if we tried to use that same Moka test framework running inside the browser we use use just

5
00:00:17.610 --> 00:00:18.740
a little bit ago.

6
00:00:18.780 --> 00:00:21.210
Let me show you why that would be so challenging.

7
00:00:21.210 --> 00:00:21.440
All right.

8
00:00:21.450 --> 00:00:22.520
A quick diagram here.

9
00:00:22.530 --> 00:00:26.680
So this is all about when we were running MOCA inside the browser just a moment ago.

10
00:00:26.720 --> 00:00:31.950
So when we did that with the create autocomplete function we had one function that we could run as many

11
00:00:31.950 --> 00:00:33.050
times as you wanted.

12
00:00:33.110 --> 00:00:34.850
So remember create autocomplete.

13
00:00:34.860 --> 00:00:38.160
We called it one time for each different test we had.

14
00:00:38.160 --> 00:00:43.010
So that meant that for each test that we wrote we could create a completely new and fresh autocomplete

15
00:00:43.020 --> 00:00:44.760
widget.

16
00:00:44.790 --> 00:00:49.320
The nice thing about testing that create autocomplete function was that we really had a direct handle

17
00:00:49.350 --> 00:00:54.320
onto the function that we wanted to test so we could easily call it function as many times as we wish

18
00:00:54.360 --> 00:00:58.810
and get a fresh autocomplete every single time.

19
00:00:58.810 --> 00:01:03.340
Now what do you think about how you could do some tests like that with MOCA inside the browser around

20
00:01:03.340 --> 00:01:05.920
this email validation project that we just put together.

21
00:01:05.950 --> 00:01:11.870
So like this file right here the index not just j ust file that we just authored so testing this thing

22
00:01:11.870 --> 00:01:15.800
out with mock it in the browser would be really really challenging.

23
00:01:15.800 --> 00:01:21.140
The reason for that is that we have some form logic inside there that instantly gets executed every

24
00:01:21.140 --> 00:01:24.110
single time the index not just file is loaded.

25
00:01:24.110 --> 00:01:28.210
So that means that when we load up the index not just file that is pretty much it's the code inside

26
00:01:28.220 --> 00:01:32.810
there is going to find one form that is on the screen if there's not a form we're going to instantly

27
00:01:32.810 --> 00:01:33.890
get an error.

28
00:01:34.190 --> 00:01:39.530
And if we ever want to say test this thing a second time it's not going to be very easy because all

29
00:01:39.530 --> 00:01:42.920
the code inside there runs just once and that's it.

30
00:01:42.920 --> 00:01:48.470
So using this Moka inside the browser approach would be really challenging to test the e-mail validation

31
00:01:48.470 --> 00:01:50.630
project that we just put together.

32
00:01:50.660 --> 00:01:53.420
So how is ust on going to solve this.

33
00:01:53.420 --> 00:01:56.310
Well let's take another look at the J.S. Dom documentation.

34
00:01:56.390 --> 00:02:04.080
So I'm again at NPM J ask.com and on this page I can do a quick search so I can hit command F and I'll

35
00:02:04.080 --> 00:02:11.670
search for from file so this right here is a very special little function that's going to be the total

36
00:02:11.730 --> 00:02:17.550
linchpin of how we're going to test our application the front file function include with j ust Dom is

37
00:02:17.550 --> 00:02:23.250
going to be called with a reference or the name of some H Cemal document that we want to load up when

38
00:02:23.250 --> 00:02:24.810
we call from file.

39
00:02:24.810 --> 00:02:29.200
J ust Om is going to look for a file on our harddrive that has that name.

40
00:02:29.280 --> 00:02:34.380
It's then going to read the contents of that HMO file and tried to load it up into this kind of virtual

41
00:02:34.380 --> 00:02:40.790
browser environment once j ust arm loads up that each HTML document it is also going to load up any

42
00:02:40.790 --> 00:02:43.910
associated JavaScript files as well.

43
00:02:43.910 --> 00:02:50.920
So essentially when we call J.S. Tom here's what really happens we're gonna call from File we're going

44
00:02:50.920 --> 00:02:56.200
to pass in a reference to the index not each email file that we just authored for our little project

45
00:02:56.650 --> 00:03:01.750
and of course attach that index not H.M. file is going to be index dot J.S. file that's where all the

46
00:03:01.750 --> 00:03:04.420
jobs group code is that we want to actually test.

47
00:03:04.440 --> 00:03:09.850
So ust on is going to take in these two files and it's going to assemble a virtual representation of

48
00:03:09.850 --> 00:03:16.100
our application that's going to give us back an object that we can use to kind of poke and prod at to

49
00:03:16.100 --> 00:03:19.460
make sure that our application is working the way we expect.

50
00:03:19.510 --> 00:03:23.900
So that's gonna be how we use J.S. Dom every single time that we want to write a test.

51
00:03:23.900 --> 00:03:29.000
So let's say that we want to write like five tests out or five it statements inside of one file.

52
00:03:29.000 --> 00:03:32.690
We're going to call just on dot from file for each one.

53
00:03:32.720 --> 00:03:38.570
So for every test we're gonna load up a fresh version of our entire application that's going to give

54
00:03:38.570 --> 00:03:43.970
us back this object that represents the entire Dom and we can call different methods on that thing to

55
00:03:43.970 --> 00:03:46.240
manipulate all the different elements inside there.

56
00:03:46.250 --> 00:03:51.510
So for example we could try to simulate a typing event on that text input.

57
00:03:51.680 --> 00:03:56.390
We can try to write some test code that will simulate a button click on that thing right there and we

58
00:03:56.390 --> 00:04:01.370
can write some code that will assert that we see the appropriate message on the screen and this is all

59
00:04:01.370 --> 00:04:07.280
possible thanks to J ust om and the ability to load up some arbitrary e-mail file and its associated

60
00:04:07.280 --> 00:04:10.350
javascript code inside of a node environment.

61
00:04:11.370 --> 00:04:11.850
So that's it.

62
00:04:11.870 --> 00:04:14.470
That's all idea.

63
00:04:14.680 --> 00:04:18.010
Now I've got to tell you right now the code that we're going to write to actually implement all this

64
00:04:18.010 --> 00:04:23.860
stuff is just a couple of lines like it's really not that many but unfortunately it will be just a little

65
00:04:23.860 --> 00:04:25.050
bit complicated.

66
00:04:25.060 --> 00:04:26.580
I do have to say that.

67
00:04:26.690 --> 00:04:27.790
So let's take a pause right here.

68
00:04:27.790 --> 00:04:32.080
When we come back the next video we're going to start to make use of this J.S. Dom dot from file function

69
00:04:32.350 --> 00:04:35.980
to load up some e-mail document in all of the associated javascript.
