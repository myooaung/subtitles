WEBVTT
1
00:00:00.210 --> 00:00:02.280
OK so we talked about the call stack.

2
00:00:02.310 --> 00:00:04.180
Put that aside for just a moment.

3
00:00:04.200 --> 00:00:09.310
Next we need to address a fundamental characteristic of JavaScript as a language.

4
00:00:09.450 --> 00:00:12.030
JavaScript is a single threaded language.

5
00:00:12.090 --> 00:00:14.070
If you don't know what that means don't worry.

6
00:00:14.190 --> 00:00:19.200
All that it really means is that at any given point in our script whatever script is being executed

7
00:00:19.860 --> 00:00:22.380
javascript is running one thing at a time.

8
00:00:22.440 --> 00:00:24.210
It's it's not multitasking.

9
00:00:24.210 --> 00:00:25.830
It does one thing.

10
00:00:25.830 --> 00:00:27.240
There's a really good blog post.

11
00:00:27.390 --> 00:00:28.710
I think it's on the Google.

12
00:00:28.860 --> 00:00:35.160
One of the official Google Developer blogs talking about asynchronous javascript that humans are multi

13
00:00:35.160 --> 00:00:35.720
threaded.

14
00:00:35.730 --> 00:00:40.560
You know if you can fold the laundry while watching TV or talking to your friend or whatever it is that

15
00:00:40.570 --> 00:00:46.620
humans are single threaded in one very specific case according to this blog post which is when we sneeze

16
00:00:46.890 --> 00:00:49.330
no one can do anything else except sneeze.

17
00:00:49.420 --> 00:00:52.250
So one hears sneezing that's the one thing you're focused on.

18
00:00:52.260 --> 00:00:54.910
So back to JavaScript at any given point.

19
00:00:54.930 --> 00:00:59.660
One thing is being run at a time and this has a whole bunch of implications.

20
00:00:59.670 --> 00:01:01.380
But let me just demonstrate it first.

21
00:01:01.380 --> 00:01:04.920
If we do something extremely simple we consider that log.

22
00:01:05.580 --> 00:01:09.240
I happen first and then a different contact log.

23
00:01:09.240 --> 00:01:18.740
I happen seconds and if we alert in the middle alert high there and I run this code what will we see

24
00:01:18.740 --> 00:01:21.050
in our console when I refresh the page.

25
00:01:21.050 --> 00:01:23.360
Well let's refresh it.

26
00:01:23.360 --> 00:01:23.870
There we go.

27
00:01:23.870 --> 00:01:25.020
I get the alert.

28
00:01:25.040 --> 00:01:26.720
We open up the console.

29
00:01:26.770 --> 00:01:28.230
I won't even let me open it well.

30
00:01:28.700 --> 00:01:35.120
Well let's try it one more time when a refresh we get I happen first and then Hi there.

31
00:01:35.120 --> 00:01:40.790
And it just stops this alert is blocking everything else from going on until the user finishes it or

32
00:01:40.790 --> 00:01:45.130
completes it at which point javascript moves on to the next line.

33
00:01:45.170 --> 00:01:46.490
So that's a simple example.

34
00:01:46.520 --> 00:01:52.430
But here you can tell javascript is doing one thing when it's alerting it's not continuing to console

35
00:01:52.440 --> 00:01:57.780
that log or if we had math after this or a different function call it's not going to move on.

36
00:01:58.100 --> 00:02:04.250
And that seems like it could be a severe limitation if we do things that take time if we do things that

37
00:02:04.280 --> 00:02:09.980
aren't immediate we don't want to just have a user sit there waiting and have no other code running.

38
00:02:09.980 --> 00:02:15.380
But as you've probably seen already we have a way around this and we'll get to that in just a moment.

39
00:02:15.560 --> 00:02:21.740
But here's a simple example of something that we do via javascript all the time we send a request from

40
00:02:21.740 --> 00:02:28.490
the browser we write some javascript code asking for let's say data from a movie API that takes time

41
00:02:28.490 --> 00:02:33.190
it goes sends a request to a server that server may or may not be online.

42
00:02:33.200 --> 00:02:39.260
We may have a valid endpoint we may not but even if everything goes great it still takes time the server

43
00:02:39.320 --> 00:02:41.720
will respond to your request.

44
00:02:41.720 --> 00:02:47.690
If we're looking for movies that match the query bat be 80 it will search through its database find

45
00:02:47.690 --> 00:02:50.990
the relevant information and then send a response back.

46
00:02:50.990 --> 00:02:55.280
Bates Motel and Batman in this case again this takes time.

47
00:02:55.280 --> 00:02:57.100
It can be very slow.

48
00:02:57.140 --> 00:02:58.910
So what happens to our application.

49
00:02:58.940 --> 00:03:05.510
Does it just stop and nothing else happens like what we had over here where this alert potentially takes

50
00:03:05.570 --> 00:03:07.410
a long time for a user to finish.

51
00:03:07.610 --> 00:03:09.740
The user may not notice it.

52
00:03:09.740 --> 00:03:13.570
I mean even if it's just a split second your code is just doing nothing right now.

53
00:03:13.610 --> 00:03:18.980
Is this what happens when we make a request when we are fetching data from an API when we're trying

54
00:03:18.980 --> 00:03:20.900
to save data to an API.

55
00:03:20.900 --> 00:03:26.600
Anytime we do some sort of single page app functionality which usually involves communicating with an

56
00:03:26.600 --> 00:03:33.410
API communicating with a database or a server that takes time is our app just going to sit there doing

57
00:03:33.410 --> 00:03:34.130
nothing.

58
00:03:34.130 --> 00:03:37.110
And as a user just kind of sit there waiting for something to happen.

59
00:03:37.160 --> 00:03:39.440
The answer is No.

60
00:03:39.470 --> 00:03:40.300
How does that work.

61
00:03:40.370 --> 00:03:41.540
And why not.

62
00:03:41.540 --> 00:03:43.890
That's what we're going to answer in the next video.

63
00:03:43.910 --> 00:03:49.070
JavaScript has a couple tricks up its sleeve or rather the browser has some tricks up its sleeve to

64
00:03:49.070 --> 00:03:52.120
get around this single threaded ness of javascript.

65
00:03:52.220 --> 00:03:58.430
So to summarize what we saw here in JavaScript at any given point JavaScript itself is running at most

66
00:03:58.430 --> 00:04:01.210
one line of code so it's not multitasking.

67
00:04:01.210 --> 00:04:06.980
It's not doing three things at once it's doing one thing at a time or nothing if it's not doing anything.

68
00:04:06.980 --> 00:04:11.930
It's very important to understand that so that you can better understand the work around we have which

69
00:04:11.930 --> 00:04:13.640
we're talking about right after this.
