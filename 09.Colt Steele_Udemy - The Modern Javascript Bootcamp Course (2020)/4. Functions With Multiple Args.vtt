WEBVTT
1
00:00:00.180 --> 00:00:05.650
In this video we'll see how we can have multiple inputs multiple arguments for a single function.

2
00:00:05.670 --> 00:00:13.140
First we need to talk about terminology very quickly if we have some function let's call it square and

3
00:00:13.140 --> 00:00:15.030
square except a single input.

4
00:00:15.030 --> 00:00:19.560
Let's just call it NUM and we'll consider it plug Num Times.

5
00:00:19.600 --> 00:00:20.260
No.

6
00:00:22.410 --> 00:00:24.420
OK we'll call it over here.

7
00:00:24.420 --> 00:00:28.400
Square of four it prints 16.

8
00:00:28.620 --> 00:00:30.590
So I said I want to talk about terminology.

9
00:00:30.780 --> 00:00:37.530
We've been using the word argument to refer to the input which is correct for is an argument the actual

10
00:00:37.530 --> 00:00:40.000
value we pass in is an argument.

11
00:00:40.020 --> 00:00:43.240
This right here num is not an argument.

12
00:00:43.440 --> 00:00:46.690
The real term the correct terminology is parameter.

13
00:00:46.800 --> 00:00:49.190
And if I hover it actually tells me here.

14
00:00:49.200 --> 00:00:53.850
Parameter called num a parameter is like the place holder name.

15
00:00:53.850 --> 00:00:57.960
It is this variable that we define when we're writing our function.

16
00:00:57.960 --> 00:01:04.650
And then when we execute the function we pass into value in that number here is the argument.

17
00:01:04.740 --> 00:01:10.770
So argument when we call it parameter when we define it it doesn't really impact how anything works

18
00:01:10.800 --> 00:01:13.010
or how you should understand all of this.

19
00:01:13.080 --> 00:01:18.480
It's just technical stuff that sometimes people mix up and it's just important to get that out of the

20
00:01:18.480 --> 00:01:19.450
way.

21
00:01:19.470 --> 00:01:19.700
All right.

22
00:01:20.010 --> 00:01:25.560
So let's see how we define a function with multiple parameters or another way of saying it is a function

23
00:01:25.590 --> 00:01:28.220
that expects multiple arguments to be passed in.

24
00:01:28.620 --> 00:01:34.090
Let's start with the classic super simple to argument function some.

25
00:01:34.110 --> 00:01:40.890
There are two parameters I'll call them X and Y and we will add them together consider log x plus y

26
00:01:41.790 --> 00:01:42.910
Nice and easy.

27
00:01:43.200 --> 00:01:45.030
We separate them by commas.

28
00:01:45.030 --> 00:01:51.570
Otherwise it's the exact same syntax we just put some name in there a valid identifier and it will hold

29
00:01:51.630 --> 00:01:55.560
whatever value is passed to it in the order does matter.

30
00:01:55.560 --> 00:02:01.170
Now this is not going to do a great job of illustrating that because X and Y won't matter as far as

31
00:02:01.170 --> 00:02:02.640
the order I can pass.

32
00:02:02.640 --> 00:02:11.640
3 come a 4 or 4 come 3 we'll still get 7 but let's just make sure it works 4 and 5 gives us 9 and obviously

33
00:02:11.700 --> 00:02:14.060
5 plus 4 also gives us 9.

34
00:02:14.100 --> 00:02:17.010
So now let's do an example where order does matter.

35
00:02:17.010 --> 00:02:24.720
Let's just do a simple division function or call it divide and we'll do instead of x and y y not a and

36
00:02:24.720 --> 00:02:32.900
b I guess X and Y are more standard for algebra but a and b work as well and all we'll do is constant

37
00:02:32.960 --> 00:02:39.060
log a divided by B okay.

38
00:02:39.210 --> 00:02:45.640
Now let's call it divide 1 by 4 and we get zero point two five.

39
00:02:45.690 --> 00:02:51.970
So whichever argument was passed in first whatever value one in this case will be assigned to a.

40
00:02:52.080 --> 00:02:57.290
So a will be 1 and then the second value will be 4 which gets assigned to be.

41
00:02:57.540 --> 00:03:04.140
So the order is very important in this case if I tried to do four comma one it's completely different

42
00:03:04.140 --> 00:03:04.640
now.

43
00:03:04.950 --> 00:03:12.030
A is four and B is one the order that we define these parameters in dictates the order that they are

44
00:03:12.030 --> 00:03:13.620
filled in from left to right.

45
00:03:13.980 --> 00:03:15.840
So 1 came before 4.

46
00:03:16.050 --> 00:03:23.730
So 1 goes before 4 and if we had written 5 parameters here ABC D and E they would be filled in that

47
00:03:23.760 --> 00:03:29.120
order first one would be a second would be B third would be C and so on.

48
00:03:29.160 --> 00:03:31.530
There are many many issues with this function.

49
00:03:31.560 --> 00:03:39.180
First of all I mean it works with numbers but if I pass something in like a string and a number we don't

50
00:03:39.180 --> 00:03:43.040
have any checks to make sure that we're working with numbers.

51
00:03:43.110 --> 00:03:45.020
And that's OK we're not focused on that for now.

52
00:03:45.510 --> 00:03:50.280
So it takes s and it divides by 4 which is not a number but what I'm trying to show here is that the

53
00:03:50.280 --> 00:03:51.180
function doesn't care.

54
00:03:51.180 --> 00:03:56.500
It is type agnostic it's just going to do whatever you tell it to do with these values.

55
00:03:56.550 --> 00:03:58.270
So what if we just passed in 5.

56
00:03:58.740 --> 00:04:03.210
Well A is going to be assigned 5 B will be undefined.

57
00:04:03.930 --> 00:04:08.430
So we just did B divided by undefined which gives us not a number.

58
00:04:08.430 --> 00:04:15.180
If an argument is missing that parameter whatever it's called in our case B will have a value of undefined.

59
00:04:15.180 --> 00:04:21.000
Just like if we have a variable called B and we don't give it a value it's set to undefined it's the

60
00:04:21.000 --> 00:04:22.110
same idea.

61
00:04:22.110 --> 00:04:26.310
We're essentially saying here's a variable called B and the value will be passed in.

62
00:04:26.310 --> 00:04:28.830
But if we don't pass it in it remains undefined.
