WEBVTT
1
00:00:00.150 --> 00:00:02.800
Next up let's talk more about key events.

2
00:00:02.880 --> 00:00:05.440
So I'm going to start by adding in a simple input.

3
00:00:05.520 --> 00:00:07.820
So we have something to work with here.

4
00:00:08.130 --> 00:00:10.260
Something that we can type into.

5
00:00:10.260 --> 00:00:13.880
I'll give it an idea of user name.

6
00:00:14.010 --> 00:00:23.070
Give it a place holder of user name and let's also give it a type of text.

7
00:00:23.230 --> 00:00:27.440
OK so I've got my input element.

8
00:00:27.500 --> 00:00:28.380
Here it is.

9
00:00:28.430 --> 00:00:30.510
It's a bit small but it will work.

10
00:00:30.830 --> 00:00:36.320
And we're going to see that there are at least three different options for listening for a key press

11
00:00:36.560 --> 00:00:40.040
or a key down or a key up in this input.

12
00:00:41.090 --> 00:00:49.530
So I'm going to select it in my javascript I'll do const input equals document dot query selector you

13
00:00:49.530 --> 00:00:57.350
we used an idea of user name and then we'll add our first event listener so input that add event listener.

14
00:00:57.530 --> 00:01:06.080
Let's do key down and we will want the event object because that object will contain information about

15
00:01:06.320 --> 00:01:08.600
which key in particular was pressed.

16
00:01:08.600 --> 00:01:15.170
But why don't we just start by ignoring it and consider logging key down.

17
00:01:15.170 --> 00:01:15.440
All right.

18
00:01:15.980 --> 00:01:23.120
So let's open up our console refresh the page and if I type a key in this input I'm going to hit P it

19
00:01:23.120 --> 00:01:23.690
fires.

20
00:01:23.690 --> 00:01:24.490
We've got key down.

21
00:01:24.500 --> 00:01:26.710
If I type l we get key down.

22
00:01:26.720 --> 00:01:34.490
I would if I hit shift that's a key down a number is the key down caps lock that's the key down.

23
00:01:34.550 --> 00:01:39.440
You can't tell but I am hitting CAPS LOCK tab that's also key down.

24
00:01:40.040 --> 00:01:46.090
So it's not just when we're actually typing some character into the input it could be the control key

25
00:01:46.100 --> 00:01:52.310
the command key I'm hitting command over and over and over anytime I press a key down it's going to

26
00:01:52.310 --> 00:01:57.050
fire and it's firing when the key is pressed down originally.

27
00:01:57.050 --> 00:02:05.150
If we duplicate this and add a second event listener for key up and save or replace this to console

28
00:02:05.150 --> 00:02:13.190
that log key up I'll refresh I'll click I'm going to start typing so I'll hit the letter P and you can

29
00:02:13.190 --> 00:02:18.650
see key down fires first and then key up if I hit space.

30
00:02:18.920 --> 00:02:19.610
Same thing.

31
00:02:19.640 --> 00:02:28.160
Key down then key up if I hit the right arrow same thing and if I hold the key down continuously like

32
00:02:28.160 --> 00:02:29.100
I'm going to hold.

33
00:02:29.510 --> 00:02:30.890
How about shift.

34
00:02:30.890 --> 00:02:31.170
Okay.

35
00:02:31.190 --> 00:02:32.220
Three two one.

36
00:02:32.330 --> 00:02:36.920
I'm holding it and then I'm going to release it.

37
00:02:36.970 --> 00:02:38.070
There we go.

38
00:02:38.080 --> 00:02:41.330
So key up only occurs when the release actually happens.

39
00:02:41.410 --> 00:02:43.780
But it also runs just like key down.

40
00:02:43.780 --> 00:02:50.000
It runs for any of the potential keys I could press whether they actually change the input or not.

41
00:02:50.230 --> 00:02:54.360
I could hold a command option control the function key.

42
00:02:54.430 --> 00:02:58.210
All of these are going to trigger those events which you may or may not want.

43
00:02:58.690 --> 00:03:06.730
So there is a third event that we'll see input out at event listener key press key press actually differs

44
00:03:06.760 --> 00:03:08.590
a little bit from browser to browser.

45
00:03:08.590 --> 00:03:14.350
If you read the docs anywhere online and checkout MDMA explanation it explains how it's supposed to

46
00:03:14.350 --> 00:03:14.870
work.

47
00:03:14.890 --> 00:03:20.920
The idea is that for something to be considered a key press there needs to be a character showing up

48
00:03:20.920 --> 00:03:24.010
in this input or a change like space.

49
00:03:24.010 --> 00:03:29.950
I'll refresh the page and just as a fun little demo it's not fun or a demo but instead of clicking in

50
00:03:30.460 --> 00:03:37.800
if I hit tab to select the input what do you think we'll show up over here only keep up because tab

51
00:03:37.890 --> 00:03:43.470
when I'm pressing down on that it's actually moving me into this input it's focusing on the key down

52
00:03:43.740 --> 00:03:45.570
so that tab event did not occur.

53
00:03:45.570 --> 00:03:52.230
Or the key down event did not occur on the input but then it focused and then I released or that's the

54
00:03:52.230 --> 00:03:54.340
order that things happen in behind the scenes.

55
00:03:54.450 --> 00:03:57.880
So I release the tab key once I'm focused in the input.

56
00:03:57.900 --> 00:03:58.130
OK.

57
00:03:58.140 --> 00:03:59.790
So back to key press.

58
00:03:59.790 --> 00:04:05.310
If I type a key like K we get key down my head I accidently hit em as well.

59
00:04:05.460 --> 00:04:08.550
We get down and then press and then up.

60
00:04:08.550 --> 00:04:12.450
But if I type something like shift we only get down and up.

61
00:04:12.990 --> 00:04:17.830
If nothing is showing up in that input we're not considering that a key press.

62
00:04:18.390 --> 00:04:20.160
What about a capital letter.

63
00:04:20.190 --> 00:04:25.590
So shift and then t there we go.

64
00:04:25.690 --> 00:04:31.510
It's hard to see because I have so much going on but what's happening is that the key press is only

65
00:04:31.510 --> 00:04:38.290
occurring after a hit shift and then t and I get this uppercase t versus the key down in the key up

66
00:04:38.580 --> 00:04:41.160
are firing both for shift and for T.

67
00:04:42.460 --> 00:04:48.910
So those are three different options for listening to events in an input or on the body for example

68
00:04:49.140 --> 00:04:52.000
there are three different input events they are different.

69
00:04:52.000 --> 00:04:57.640
Generally I mean it depends on what you're doing if you're making a game for example and you wanted

70
00:04:57.640 --> 00:05:03.490
to have arrow keys to move something around you probably would not want key press key press is not going

71
00:05:03.490 --> 00:05:05.860
to give you the the impact that you want.

72
00:05:05.860 --> 00:05:10.830
If I click here and I hit the right arrow I'm not getting key press at all.

73
00:05:10.960 --> 00:05:18.250
I'm not changing the input but if I hit L or some act some character that's showing up that key press

74
00:05:18.250 --> 00:05:19.760
event fires.

75
00:05:19.810 --> 00:05:25.390
So that's one situation where you may not want to keep press but if you want to know when something

76
00:05:25.390 --> 00:05:30.610
is actually changing in the input so you don't care if a user is hitting shift you don't care if they're

77
00:05:30.610 --> 00:05:34.210
hitting return you want to know what's in the input.

78
00:05:34.240 --> 00:05:36.640
You could use key press instead.

79
00:05:36.640 --> 00:05:42.460
What's interesting about key press interesting might be a stretch but it's important to note that when

80
00:05:42.460 --> 00:05:45.520
you hit return it actually does count as a key press.

81
00:05:45.520 --> 00:05:50.420
I just hit return and we got press over here even though nothing changed in the input.

82
00:05:50.470 --> 00:05:57.130
If I type clearly that's a key press and if I hit delete which I'll do right now that is not considered

83
00:05:57.160 --> 00:06:02.370
a key press that's just a up and down but return is a press.

84
00:06:02.620 --> 00:06:04.060
So why am I showing you this.

85
00:06:04.060 --> 00:06:10.720
Well a lot of the time we want to listen for specifically a return press or an enter key press meaning

86
00:06:10.720 --> 00:06:15.860
that the user has typed something in and they're hitting return to submit or to finish.

87
00:06:15.880 --> 00:06:22.380
So if we wanted to make a very simple I wouldn't even call it an application but a to do list or something.

88
00:06:22.390 --> 00:06:24.550
A shopping list where we have an input.

89
00:06:25.270 --> 00:06:26.360
Let's do this down here.

90
00:06:26.400 --> 00:06:32.230
Had an H3 shopping list and then we'll add in a well that will start empty.

91
00:06:32.230 --> 00:06:35.560
We'll give it an I.D. of items.

92
00:06:35.560 --> 00:06:44.070
Sure and then we'll also add in an input and it will be type equals text I.D. equals.

93
00:06:44.350 --> 00:06:56.300
Which we call it and add item and we'll give it a place holder of enter a food or something OK now from

94
00:06:56.300 --> 00:07:02.440
our app yes I want to select that input so I'll do contact ad item.

95
00:07:02.540 --> 00:07:07.410
Input equals document dot query selector.

96
00:07:07.730 --> 00:07:14.480
We have an idea that we added I think it was ad item and I'll also select that you will while we're

97
00:07:14.480 --> 00:07:15.080
here.

98
00:07:15.090 --> 00:07:21.530
Concept let's call it items you all equals document that query selector.

99
00:07:21.530 --> 00:07:25.520
Our good friend I.D. of items.

100
00:07:25.820 --> 00:07:34.610
Now I'm going to add an event listener to the ADD item input and I'll do an add event listener of key

101
00:07:34.670 --> 00:07:35.780
press.

102
00:07:35.780 --> 00:07:42.680
I want to listen for when a user hits return and when they do hit return we'll take whatever is in here.

103
00:07:42.680 --> 00:07:45.700
Let's say fish a hit return.

104
00:07:45.860 --> 00:07:53.260
I'll clear out the input I'll grab that information and make a new ally with that data but only on return.

105
00:07:53.480 --> 00:08:00.020
So we could do it for key up or key down as well but I'm not going to because those fires so much so

106
00:08:00.020 --> 00:08:01.330
much more often.

107
00:08:01.340 --> 00:08:07.740
For example if we have shifty like that that is two key downs or two key ups.

108
00:08:07.770 --> 00:08:11.930
First is if I'm using key press I only get one.

109
00:08:11.960 --> 00:08:17.180
You're not seeing it show up here but I'm only getting a key press event when the capital T shows up.

110
00:08:18.260 --> 00:08:23.410
So I'm going to go with key press function and then this part is very important.

111
00:08:23.420 --> 00:08:30.830
We want the event object and we're going to start by just consider logging that event object that object

112
00:08:30.860 --> 00:08:35.180
as we saw very recently contains the information about the event.

113
00:08:35.540 --> 00:08:38.720
So it should contain the key that was pressed.

114
00:08:38.720 --> 00:08:39.410
Here we go.

115
00:08:39.410 --> 00:08:41.420
We've got a keyboard event.

116
00:08:41.600 --> 00:08:46.290
It has a bunch of stuff but I prefer to stick with key to keep it simple here.

117
00:08:46.310 --> 00:08:49.070
We also have code that's a bigger topic.

118
00:08:49.070 --> 00:08:51.560
We don't have to go into now but let's see what we get.

119
00:08:51.690 --> 00:08:54.570
Shouldn't have closed that when I hit enter.

120
00:08:54.590 --> 00:08:56.040
Key is set to enter.

121
00:08:56.790 --> 00:08:57.730
Okay.

122
00:08:57.820 --> 00:09:02.150
Also key code I believe is 1 13 and 13 for enter.

123
00:09:02.150 --> 00:09:06.980
So we could use either of those this key code is standard across all browsers.

124
00:09:06.980 --> 00:09:10.760
I'm pretty sure using key is also standard these days.

125
00:09:10.880 --> 00:09:14.360
The way I learned when I was learning this stuff was key code.

126
00:09:14.360 --> 00:09:21.530
But it's just so annoying to have to use a number as the key that you're typing compared to a key string.

127
00:09:21.530 --> 00:09:30.140
And then in here we can simply check if event dot key equals enter.

128
00:09:30.140 --> 00:09:34.710
If that happens we'll add a new item to list.

129
00:09:34.970 --> 00:09:37.960
Otherwise we don't need to do anything we don't want to do anything.

130
00:09:37.970 --> 00:09:45.110
We just leave a user alone so they can keep typing but if they do hit enter we want to grab the value

131
00:09:45.110 --> 00:09:46.780
from that input.

132
00:09:46.850 --> 00:09:48.980
So what would be the easiest way to do that.

133
00:09:48.980 --> 00:09:50.660
Well we have the inputs selected.

134
00:09:50.660 --> 00:09:56.390
I could also just say this that value console that log this stock value.

135
00:09:56.390 --> 00:10:02.330
Why don't we start there and see what happens so I'm going to start typing in here.

136
00:10:02.530 --> 00:10:05.010
I need cat food.

137
00:10:05.410 --> 00:10:07.030
I'm going to hit enter.

138
00:10:07.180 --> 00:10:08.200
Hey there we go.

139
00:10:08.200 --> 00:10:10.200
We've got cat food showing up.

140
00:10:10.330 --> 00:10:13.820
I need to get cat litter.

141
00:10:14.470 --> 00:10:23.110
And it shows up over here so we'll grab that value and save it to a variable contest new item text or

142
00:10:23.110 --> 00:10:23.910
something.

143
00:10:24.070 --> 00:10:26.160
Equals this top value.

144
00:10:26.320 --> 00:10:32.350
Then we'll select our items you will which we have actually already selected and we want to append a

145
00:10:32.350 --> 00:10:33.760
new ally.

146
00:10:33.820 --> 00:10:42.820
So let's make our new item equals document that create elements of an ally.

147
00:10:42.820 --> 00:10:51.130
And then we'll set new item dot in our text to be this new item text that we grabbed from this stock

148
00:10:51.130 --> 00:10:56.180
value so we extract the value and then we create a new ally.

149
00:10:56.260 --> 00:11:01.930
We use that value we extracted to set the enter text of that ally and then we should append it.

150
00:11:02.260 --> 00:11:08.420
So we have items you will append or append child of new item.

151
00:11:09.310 --> 00:11:10.580
Let's see if it works.

152
00:11:10.600 --> 00:11:12.300
So we have a well down here right now.

153
00:11:12.400 --> 00:11:17.750
It's empty but I'll add something in like chicken breast.

154
00:11:17.770 --> 00:11:19.000
There we go.

155
00:11:19.000 --> 00:11:23.890
We're missing one thing which is we're not clearing this input which is very easy to do.

156
00:11:23.920 --> 00:11:28.310
We can just call this dot value equals empty string.

157
00:11:28.660 --> 00:11:35.950
The input which is this add item input dot value where we fetched or retrieved the actual value a user

158
00:11:35.950 --> 00:11:38.590
entered will now set it to be empty.

159
00:11:38.590 --> 00:11:40.310
So every time I hit enter.

160
00:11:41.110 --> 00:11:42.310
Awesome.

161
00:11:42.310 --> 00:11:45.690
Very simple example but this is a really common pattern.

162
00:11:45.730 --> 00:11:51.250
Listen for an enter key or some other key and do something based off of that.

163
00:11:51.340 --> 00:11:52.590
So that's one example.

164
00:11:52.750 --> 00:11:53.860
I'll stop here.

165
00:11:53.860 --> 00:11:59.230
Let's just recap the difference again between key upkeep down and key press key up and key down are

166
00:11:59.230 --> 00:12:05.650
going to fire for any key that you touch at all one will fire when you press it down the other one doesn't

167
00:12:05.650 --> 00:12:10.180
fire until it's released but it includes things like shift or arrow keys.

168
00:12:10.180 --> 00:12:17.080
Caps lock a key press does not the way key press is supposed to work which is not always the case sometimes

169
00:12:17.080 --> 00:12:23.470
there's some weirdness across browsers but the intended use for key press is that it only fires when

170
00:12:23.500 --> 00:12:30.310
in the case of an input something actually shows up like a shift K would be one key press instead of

171
00:12:30.310 --> 00:12:36.790
two key down or two key ups it would be one key press an arrow key does not count at all.

172
00:12:36.790 --> 00:12:42.280
Something needs to show up here or the user hits enter which now that I'm looking at this we should

173
00:12:42.280 --> 00:12:52.110
probably add in a quick little check and just return early if this dot value.

174
00:12:52.150 --> 00:12:56.320
How about if not this top value return.

175
00:12:56.370 --> 00:13:02.850
So instead of checking if this stuff value is an empty string we'll just check if it's truly or falsely

176
00:13:02.850 --> 00:13:08.460
actually and then we go and nothing happens but if I have some stuff it does work but if I hit enter

177
00:13:08.940 --> 00:13:14.860
and there's no value we're ignoring it we return early we just get out of this entire function.

178
00:13:15.030 --> 00:13:15.360
Awesome.
