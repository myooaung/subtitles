WEBVTT
1
00:00:00.810 --> 00:00:05.580
We were just able to console log out the product idea that the user was trying to add to the shopping

2
00:00:05.580 --> 00:00:06.380
cart.

3
00:00:06.390 --> 00:00:10.560
So now we need to add in some additional logic to our root handler and make sure that we take that product

4
00:00:10.560 --> 00:00:14.790
I.D. and actually assign it to a cart stored inside of our carts repository.

5
00:00:14.820 --> 00:00:18.510
So in other words we want to find the cart associate with this user.

6
00:00:18.510 --> 00:00:24.690
Take a look at that items array and add a new item or new object inside there that represents the product

7
00:00:24.690 --> 00:00:26.670
that the user just clicked on.

8
00:00:26.670 --> 00:00:29.610
Now unfortunately going through this is going to be just a little bit challenging.

9
00:00:29.610 --> 00:00:35.760
Let me tell you why there are really a couple of different side cases or corner cases we need to consider

10
00:00:35.790 --> 00:00:38.210
when all this logic gets executed.

11
00:00:38.250 --> 00:00:43.590
The first thing we need to consider is the case in which a user comes to our application for the very

12
00:00:43.590 --> 00:00:46.200
first time and clicks on ad a product.

13
00:00:46.980 --> 00:00:51.360
If a user comes to our application for the very first time there's not going to be any cart inside of

14
00:00:51.360 --> 00:00:54.060
our carts repository that corresponds to that user.

15
00:00:54.060 --> 00:00:58.350
So in that case we'll need to make sure that we create a cart.

16
00:00:58.410 --> 00:01:04.710
The other scenario is whenever a user has came to our application and added a product before in that

17
00:01:04.710 --> 00:01:11.220
scenario when a user makes this request inside the cookie we're going to have some cart I.D. because

18
00:01:11.220 --> 00:01:14.280
this user has already bench our application they've already created a cart.

19
00:01:14.310 --> 00:01:19.120
We already have something inside of our carts repository corresponding to this user.

20
00:01:19.140 --> 00:01:23.190
So in this scenario we're going to have to go through the carts repository and find the appropriate

21
00:01:23.190 --> 00:01:24.500
cart.

22
00:01:24.560 --> 00:01:27.100
So again two scenarios to consider.

23
00:01:27.350 --> 00:01:32.240
There are an additional two scenarios even after that the first scenario.

24
00:01:32.240 --> 00:01:37.250
After we finally figure out OK all after all said and done we've got a cart for this user.

25
00:01:37.250 --> 00:01:43.010
We then have to decide whether or not there's already an item inside this items array that has the same

26
00:01:43.010 --> 00:01:49.320
I.D. as a user might try to add the same item to a cart twice in a row and then the counterpoint to

27
00:01:49.320 --> 00:01:54.270
that is the case in which there are no items yet and we need to take the product idea and add it in

28
00:01:54.270 --> 00:01:55.560
fresh to the items array.

29
00:01:56.280 --> 00:02:00.110
So in total like four different scenarios they are not mutually exclusive.

30
00:02:00.160 --> 00:02:04.440
So we really need to kind of balance all these different scenarios and really think about what is going

31
00:02:04.440 --> 00:02:05.230
to happen.

32
00:02:05.980 --> 00:02:10.480
So to help us get through this we're going to write out some comments just to guide ourselves and really

33
00:02:10.480 --> 00:02:17.490
figure out exactly what we need to do so we're going to first have some logic to figure out the carts

34
00:02:17.880 --> 00:02:19.020
that's going to be okay.

35
00:02:19.020 --> 00:02:20.590
Do we have a cart for this user or not.

36
00:02:20.610 --> 00:02:21.520
Do we need to make one.

37
00:02:21.530 --> 00:02:27.920
Are we going to retrieve one out of our carts repo after that we'll then write out some logic to either

38
00:02:29.730 --> 00:02:39.460
increment quantity for existing product or add new product to items array.

39
00:02:39.870 --> 00:02:44.760
So the second coming right here is the case in which we are trying to add a existing product inside

40
00:02:44.760 --> 00:02:49.430
this items array for a second time in which case we want to update the quantity to two.

41
00:02:49.980 --> 00:02:54.390
Otherwise if the product doesn't exist inside of here yet it's like no items whatsoever then we're going

42
00:02:54.390 --> 00:02:59.880
to want to go ahead and actually add in the item in the very first place with the quantity of 1.

43
00:02:59.880 --> 00:03:04.300
So that's what this if statement right here or this comment is talking about.

44
00:03:04.300 --> 00:03:04.520
Okay.

45
00:03:04.580 --> 00:03:06.090
Let's see what the cart first.

46
00:03:06.090 --> 00:03:08.100
So again we don't know if there's a cart.

47
00:03:08.430 --> 00:03:16.820
So to decide whether or not there is a cart we're going to say if not wreck dot session dot cart I.D.

48
00:03:18.260 --> 00:03:21.190
remember wrecked out session is managed by Cookie sessions.

49
00:03:21.200 --> 00:03:24.040
That's essentially our cookie right there we can kind of imagine.

50
00:03:24.260 --> 00:03:29.180
So we're going to store whether or not the user has a cart on that cart I.D. property that's gonna be

51
00:03:29.180 --> 00:03:33.000
the actual idea the cart stored inside of our carts repository.

52
00:03:33.080 --> 00:03:40.070
So if we enter into this if case right here that means we don't have a cart we need to create one

53
00:03:43.080 --> 00:03:54.090
and store the cart I.D. on the rect session cart I.D. property we can then enter the else case.

54
00:03:54.130 --> 00:04:02.760
So inside of here we have a cart let's get it from the repository so there's the first two cases we're

55
00:04:02.760 --> 00:04:07.370
going to consider let's take care of the if not cart I.D. case first.

56
00:04:07.380 --> 00:04:12.930
So in this scenario we need to create a cart to create the cart we're going to use our hearts repository

57
00:04:12.960 --> 00:04:18.720
that we just put together a moment ago Let's require in carts repo

58
00:04:21.370 --> 00:04:29.920
from up one directory carts then inside of our if statement let's make sure we mark the enclosing function

59
00:04:29.920 --> 00:04:34.300
as async because we're definitely going to use some A C async await syntax here because we're making

60
00:04:34.300 --> 00:04:41.210
use of our carts repo so inside of here I'll say cart is going to be a weight carts repo not create

61
00:04:42.140 --> 00:04:46.700
and remember whenever we call create we're going to pass in some starting object for the record that

62
00:04:46.700 --> 00:04:51.360
we're trying to create that object is going to be assigned an I.D. property.

63
00:04:51.360 --> 00:04:56.400
So our starting object like our default value is going to be just the items property and it's going

64
00:04:56.400 --> 00:04:57.810
to start off as an empty array.

65
00:04:58.260 --> 00:05:03.600
So essentially we're going to always have in items property by default it'll be an empty array and so

66
00:05:03.600 --> 00:05:10.850
we can I add in some item setting as time goes on so inside this create object right here I'll say items

67
00:05:10.850 --> 00:05:12.010
is going to be an empty array

68
00:05:17.250 --> 00:05:21.790
so then after that we're going to take the cart that was created we're going to take the idea off that

69
00:05:21.790 --> 00:05:26.710
thing and assign it back to our rect session dot cart I.D. property and that's what's going to associate

70
00:05:26.710 --> 00:05:29.560
this cart with whoever just made this request.

71
00:05:29.890 --> 00:05:34.990
So we'll say rec not session dot cart I.D. is cart dot I.D.

72
00:05:38.310 --> 00:05:41.690
Now we can handle the case though in the case.

73
00:05:41.820 --> 00:05:45.990
This means that we do have a card I.D. So we're going to take a look at a repository and try to retrieve

74
00:05:45.990 --> 00:05:46.820
it.

75
00:05:46.820 --> 00:05:47.570
It's all state counts.

76
00:05:47.580 --> 00:05:52.960
Kurt is a wait Hertz repo and we're going to use that.

77
00:05:53.130 --> 00:05:56.430
Find one or get one I forget the name of it up top my head.

78
00:05:56.430 --> 00:05:57.960
We can find it inside of repository.

79
00:05:57.980 --> 00:05:59.790
J.S. gets get one.

80
00:05:59.850 --> 00:06:05.340
We're going to pass in the I.D. of the car that we're trying to retrieve we'll do get one.

81
00:06:05.500 --> 00:06:09.310
And the idea the card that we're going to try to retrieve is wrecked out session card I.D..

82
00:06:09.420 --> 00:06:18.490
So wreck session card I.D. Now in both cases for both branches of the if statement we've now assigned

83
00:06:18.490 --> 00:06:22.700
a cart to a local variable that has been scoped into this if statement.

84
00:06:22.810 --> 00:06:27.100
That means that we can't read the card later on down here which is where we actually care about it.

85
00:06:27.190 --> 00:06:29.910
So let's do a quick refactor here right above the first if statement.

86
00:06:29.920 --> 00:06:36.210
I'll say let carte and then rather than putting a cost in front of both these card keywords are variable

87
00:06:36.210 --> 00:06:36.870
names.

88
00:06:36.870 --> 00:06:38.060
I'm going to delete the contest.

89
00:06:38.080 --> 00:06:41.710
It's never just going to update the cart variable that we declared up there.

90
00:06:42.480 --> 00:06:45.190
It's now either way after that big if statement.

91
00:06:45.190 --> 00:06:50.470
We should have a cart which bill to do a console log of cart and see some cart appear inside of our

92
00:06:50.470 --> 00:06:52.110
console.

93
00:06:52.180 --> 00:06:53.290
Let's save this again.

94
00:06:53.470 --> 00:06:55.580
Run this and see what happens.

95
00:06:55.690 --> 00:07:01.540
The very first time you run this we should see a console log of a cart that is coming from this branch

96
00:07:01.540 --> 00:07:05.010
of the if statement because at this point time we just wrote this code.

97
00:07:05.050 --> 00:07:12.190
We don't have a cart associate with us yet but then the second time that we attempt to access this end

98
00:07:12.190 --> 00:07:14.890
point we're going to enter the LS case.

99
00:07:14.890 --> 00:07:18.840
And so we will see a console log of a cart that already exists.

100
00:07:18.860 --> 00:07:19.140
OK.

101
00:07:19.170 --> 00:07:22.080
So we're going to save this I'm going to go back over to my browser.

102
00:07:22.290 --> 00:07:26.760
I'm gonna go back to my product's listing and then click on any of the add to cart buttons.

103
00:07:26.980 --> 00:07:29.330
And when I click on it my browser is going to hang.

104
00:07:29.350 --> 00:07:30.700
That's totally ok.

105
00:07:30.720 --> 00:07:34.900
Let's take a look back at our terminal and see what we got tobacco over here.

106
00:07:34.900 --> 00:07:41.110
I've got a little typo hurts repo create is not a function so I probably just made a really bad typo

107
00:07:41.110 --> 00:07:43.740
at some point in time.

108
00:07:43.770 --> 00:07:49.950
Let's see I've got Kurt's repo up one directory carts Oh OK.

109
00:07:50.050 --> 00:07:53.830
My mistake I made a little typo on my required statement right here.

110
00:07:53.830 --> 00:07:59.550
That should be up one directory repositories parts.

111
00:07:59.560 --> 00:08:00.510
That's better.

112
00:08:00.550 --> 00:08:00.820
OK.

113
00:08:00.850 --> 00:08:03.320
Let's save and refresh tries again.

114
00:08:04.830 --> 00:08:05.790
Add to Cart.

115
00:08:05.790 --> 00:08:06.180
There you go.

116
00:08:06.180 --> 00:08:07.330
Product added to cart.

117
00:08:07.410 --> 00:08:11.330
If I go back to my terminal I'll see a console log of the cart that was created.

118
00:08:11.520 --> 00:08:14.830
And so notice that it has an idea of FP 1 E6.

119
00:08:14.880 --> 00:08:17.220
So this is the cart that is assigned to me.

120
00:08:17.220 --> 00:08:20.150
In theory my browser lives select specifically chrome.

121
00:08:20.190 --> 00:08:27.180
This browser right here has a heart ideas property inside that cookie encoded inside the cookie.

122
00:08:27.180 --> 00:08:32.100
And so whenever this browser window makes a false request to the server the server is then going to

123
00:08:32.100 --> 00:08:38.600
enter into the else case and it's going to find the existing cart as opposed to creating a cart so if

124
00:08:38.600 --> 00:08:45.300
I now do go back to this page and click on Add to cart again I can go to my terminal and I'll see these

125
00:08:45.300 --> 00:08:51.930
same exact cart printed out right here and I know it's the same because it has the same I.D. as the

126
00:08:51.930 --> 00:08:53.840
first one OK.

127
00:08:53.870 --> 00:08:55.040
So that's pretty much it.

128
00:08:55.040 --> 00:08:58.260
So either way we're now getting a cart available to us.

129
00:08:58.370 --> 00:09:01.720
Now we just have to implement this other case right here.

130
00:09:01.850 --> 00:09:06.440
The case in which we already have added this product and we need to increment the quantity or it is

131
00:09:06.440 --> 00:09:13.270
a new product and we need to add it to the items array of the cart that we just got during step 1 Okay.

132
00:09:13.280 --> 00:09:16.190
So quick pause right here and continue in just a moment.
