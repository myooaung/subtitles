WEBVTT
1
00:00:00.240 --> 00:00:04.570
Next up let's talk about looping over objects or iterating over objects.

2
00:00:04.650 --> 00:00:07.780
We've seen how we can use a for loop with an array or a string.

3
00:00:07.860 --> 00:00:11.100
We can use a for of loop with an array or a string.

4
00:00:11.100 --> 00:00:15.380
Those don't really work with objects at least not easily.

5
00:00:15.390 --> 00:00:22.380
Here's a simple object it contains movies as keys and then ratings or reviews are the values and it

6
00:00:22.380 --> 00:00:28.770
made some of the keys explicit strings so I could add spaces kill space Bill and remember everything

7
00:00:28.770 --> 00:00:32.220
ends up as a string eventually and that object as a key.

8
00:00:32.360 --> 00:00:33.860
Okay so I have my movie reviews.

9
00:00:33.870 --> 00:00:41.460
If I wanted to just loop over and print out each value or maybe a rival dash nine point five in Brugge

10
00:00:41.490 --> 00:00:44.940
dash nine I couldn't really use a for loop.

11
00:00:45.060 --> 00:00:47.520
What what would I generate what numbers.

12
00:00:47.520 --> 00:00:49.980
There are no indices for this object.

13
00:00:49.980 --> 00:00:53.310
We can't do movie reviews of one.

14
00:00:54.030 --> 00:00:54.870
I mean we can.

15
00:00:54.990 --> 00:00:56.070
There's just nothing there.

16
00:00:56.640 --> 00:00:58.380
So a for loop isn't going to work.

17
00:00:58.410 --> 00:00:59.600
What about a four of.

18
00:00:59.780 --> 00:01:09.040
If I did four let x of movie reviews and we'll just cancel that log x type error.

19
00:01:09.090 --> 00:01:11.040
Movie reviews is not editable.

20
00:01:11.280 --> 00:01:17.190
So remember a for of loop works with any ignorable which includes things like arrays and strings but

21
00:01:17.190 --> 00:01:18.870
an object is not a drop.

22
00:01:19.110 --> 00:01:20.900
So what can we do instead.

23
00:01:20.910 --> 00:01:22.500
Well we have a couple of options.

24
00:01:22.500 --> 00:01:29.190
The first is to use a for of loop and instead of looping over the entire object which doesn't work we

25
00:01:29.190 --> 00:01:32.620
can loop over just the keys or just the values.

26
00:01:32.970 --> 00:01:36.300
We haven't seen this yet because there's not much use for it.

27
00:01:36.300 --> 00:01:42.750
Aside from looping but there is a method called Object keys and you pass in an object to it.

28
00:01:42.800 --> 00:01:51.270
OP's movie reviews and we get a list of the keys as you can see here and we also have object values.

29
00:01:51.360 --> 00:01:57.090
Pay attention to the fact that it is capital O object just like we saw with object out a sign.

30
00:01:57.090 --> 00:02:03.240
So it's not movie reviews dot keys or dot values.

31
00:02:04.470 --> 00:02:10.320
Okay so this is something that we can loop over if we want just the values we can loop over that if

32
00:02:10.320 --> 00:02:16.820
we want just the keys we can loop over that and if we want both we can use the keys to access the values

33
00:02:17.190 --> 00:02:18.780
so let's do that first.

34
00:02:18.780 --> 00:02:24.330
I'll leave this version and just commented out and add a note that it does not work but if we do for

35
00:02:24.440 --> 00:02:27.540
it let's not do X forget to loop over the keys.

36
00:02:27.540 --> 00:02:35.750
Let's go with movie or maybe just m movie of object keys.

37
00:02:35.940 --> 00:02:43.890
Movie reviews and now if we cancel that log movie refresh the page we're printing out each key.

38
00:02:43.950 --> 00:02:48.480
We took movie reviews which was not terrible but we just grabbed the keys.

39
00:02:48.480 --> 00:02:54.660
Which is it arable to list so we can iterate over it and we're just printing out each item just as if

40
00:02:54.720 --> 00:02:56.730
we had an array of these strings.

41
00:02:56.730 --> 00:03:01.620
Same sort of idea except they're coming from an object and that works.

42
00:03:01.620 --> 00:03:10.890
But if we want to access the values we would just add in a line here with movie reviews of movie and

43
00:03:10.890 --> 00:03:11.970
we cannot do Dot.

44
00:03:12.450 --> 00:03:17.550
Remember this is a variable if we need to access part of an object and the key is a variable.

45
00:03:17.550 --> 00:03:19.890
We use the square brackets.

46
00:03:19.890 --> 00:03:21.530
Let's see what we get now.

47
00:03:21.690 --> 00:03:24.700
Arrival nine point five alien nine family eight.

48
00:03:24.870 --> 00:03:26.400
Great that works.

49
00:03:26.430 --> 00:03:28.880
We can also do the same thing with just the values.

50
00:03:28.980 --> 00:03:34.850
But remember if you have a value for an object there's not an easy way to get the corresponding key.

51
00:03:34.890 --> 00:03:36.780
So a lot of the times you want both.

52
00:03:36.960 --> 00:03:41.820
But if we wanted to do something like find the average review score these are all pretty highly rated.

53
00:03:41.820 --> 00:03:45.730
I guess we could instead iterate over the values and add them altogether.

54
00:03:45.900 --> 00:03:53.400
So we have the same sort of method object out values pass in movie reviews and let's make this its own

55
00:03:53.400 --> 00:03:54.000
variable.

56
00:03:54.090 --> 00:03:56.980
We'll call this scores or ratings.

57
00:03:57.030 --> 00:04:08.760
I think ratings is better and then we can iterate over that for let's rating maybe just r of ratings

58
00:04:09.050 --> 00:04:15.720
and remember ratings is not the object is just the values and if we wanted to sum them all together

59
00:04:15.720 --> 00:04:24.990
and then average them I would make a variable called Total equal zero and then add each R into total

60
00:04:25.140 --> 00:04:30.810
total plus equals R and then at the very end I need to divide by the length of ratings.

61
00:04:31.260 --> 00:04:40.030
So we'll have rating stout length and we can divide total by that we can either save that to total so

62
00:04:40.030 --> 00:04:43.310
we could do total slash equals which UPS.

63
00:04:43.330 --> 00:04:44.600
Wrong direction.

64
00:04:44.680 --> 00:04:46.420
I don't like to use this as much.

65
00:04:46.450 --> 00:04:51.520
I think it's just very uncommon compared to plus equals and minus equals at least in my experience it

66
00:04:51.520 --> 00:04:51.880
is.

67
00:04:51.940 --> 00:04:52.810
But this will work.

68
00:04:52.810 --> 00:05:00.240
We're saying total is now equal to total divided by rating stout length and we'll control that lug total.

69
00:05:00.430 --> 00:05:04.060
Although I don't like that term total because it's not a total anymore.

70
00:05:04.060 --> 00:05:08.560
It's an average and there we go the average is eight point six eight seven five.

71
00:05:08.620 --> 00:05:15.280
So I would probably rewrite this to let average equal total divided by rating stout length and cancel

72
00:05:15.280 --> 00:05:17.440
that log average.

73
00:05:17.440 --> 00:05:17.700
All right.

74
00:05:17.740 --> 00:05:23.260
So that's one way we can iterate over an object where we're not actually iterating over the object at

75
00:05:23.260 --> 00:05:30.020
once we're isolating the keys and using four of the keys or isolating the values.

76
00:05:30.070 --> 00:05:37.480
We could also have done a for loop a regular for loop where we can use an index but I still prefer using

77
00:05:37.480 --> 00:05:43.810
four of the point is there's not an easy way to use a for loop to just automatically without having

78
00:05:43.810 --> 00:05:48.690
to call object out values or object keys to iterate over an object.

79
00:05:48.880 --> 00:05:55.000
But this isn't bad but in the next video we'll see another type of loop called for in which does exactly

80
00:05:55.000 --> 00:05:55.870
what we're doing here.
