1
00:00:00,210 --> 00:00:01,760
Hey welcome back everyone.

2
00:00:01,770 --> 00:00:07,590
We've made it through all of the promises and a synchronous javascript callback hell stuff and we needed

3
00:00:07,590 --> 00:00:11,010
to cover all of that so that we can start making requests.

4
00:00:11,010 --> 00:00:17,850
We're gonna see how we can use javascript to get information from an API like load movie data or search

5
00:00:17,850 --> 00:00:24,550
for planets in Star Wars or get a random joke which you could also apply to things like logging someone

6
00:00:24,550 --> 00:00:30,290
in via Facebook or sending some data off to your own server to save to a database.

7
00:00:30,300 --> 00:00:31,600
It's all the same process.

8
00:00:31,620 --> 00:00:37,620
We send a request from the client side and we have to understand asynchronous javascript and promises

9
00:00:37,620 --> 00:00:41,700
for a lot of the requests that we'll be sending because these requests take time.

10
00:00:41,700 --> 00:00:43,650
We talked about that in the previous section.

11
00:00:43,650 --> 00:00:45,080
These things aren't immediate.

12
00:00:45,090 --> 00:00:45,700
It takes time.

13
00:00:45,690 --> 00:00:47,120
They might fail they might.

14
00:00:47,120 --> 00:00:48,410
I mean it could take 10 seconds.

15
00:00:48,420 --> 00:00:49,820
It could take half a second.

16
00:00:49,890 --> 00:00:50,970
It doesn't matter how long.

17
00:00:50,970 --> 00:00:52,090
Exactly.

18
00:00:52,140 --> 00:00:54,340
It just matters that it's not instantaneous.

19
00:00:54,390 --> 00:00:57,700
So we have to worry about things like callbacks and promises.

20
00:00:57,810 --> 00:01:00,400
So there are multiple ways of making requests.

21
00:01:00,510 --> 00:01:07,130
We're going to start with the old school quite quite ugly and confusing and hard to remember way.

22
00:01:07,170 --> 00:01:15,960
Example HDP requests which is standard across all browsers but a newer much more modern and simpler

23
00:01:15,960 --> 00:01:18,190
syntax exists which is called fetch.

24
00:01:18,210 --> 00:01:19,620
So we'll see both of those.

25
00:01:19,740 --> 00:01:25,210
Then we'll talk about a library that's really really popular to help you make requests called axioms.

26
00:01:25,260 --> 00:01:26,560
It's a third party script.

27
00:01:26,580 --> 00:01:30,630
We can include it just simplifies the process so we're doing the same thing.

28
00:01:30,630 --> 00:01:37,080
It's just a cleaner syntax but before we talk about any of those options we need to talk about this

29
00:01:37,080 --> 00:01:42,180
idea of Ajax which is a term you may have heard if you're brand new to JavaScript you might have come

30
00:01:42,180 --> 00:01:44,040
across this term Ajax.

31
00:01:44,040 --> 00:01:50,520
It stands for asynchronous javascript and XM L which is kind of a misnomer because these days most of

32
00:01:50,520 --> 00:01:52,370
the time we don't work with Excel.

33
00:01:52,430 --> 00:01:54,030
We work with Jason.

34
00:01:54,030 --> 00:01:58,380
Nobody says age judge but that's that's kind of what it is these days.

35
00:01:58,380 --> 00:02:03,270
So if you don't know what Excel or Jason are we'll get there but let's just talked about this general

36
00:02:03,270 --> 00:02:09,870
idea back in the day before Ajax was really a big thing before single page apps were common.

37
00:02:09,900 --> 00:02:16,260
We had one standard flow for loading new data or getting information from a server which included a

38
00:02:16,260 --> 00:02:17,130
page refresh.

39
00:02:17,550 --> 00:02:20,730
Here's an example MDA n is not a single page app.

40
00:02:20,790 --> 00:02:25,830
If I search for something here like react I don't know if they have much on react actually but if I

41
00:02:25,830 --> 00:02:29,160
hit enter you'll see my page does change.

42
00:02:29,250 --> 00:02:34,050
I go to a new U.R.L. and the page actually reloads one more time.

43
00:02:34,050 --> 00:02:37,080
Let's look for div.

44
00:02:37,080 --> 00:02:41,710
Watch this little bar here we go to a completely different page.

45
00:02:41,820 --> 00:02:47,280
So what's happening here is the browser is sending a request for a new Web page and it's going off to

46
00:02:47,280 --> 00:02:48,960
one of em DNS servers.

47
00:02:48,960 --> 00:02:56,130
Depending on this U.R.L. this is the URL that we requested by hitting enter this you URL is then received

48
00:02:56,250 --> 00:03:01,800
the request is received by the server NBN server wherever it is indeed compiles a new web page for us

49
00:03:01,830 --> 00:03:05,760
including the amounts we assess in any relevant javascript.

50
00:03:05,760 --> 00:03:11,460
It sends the entire page back our browser refreshes and this is what we see a whole new page.

51
00:03:11,460 --> 00:03:14,230
Contrast that with what happens here.

52
00:03:14,280 --> 00:03:16,230
This is a Web site called Can I use.

53
00:03:16,440 --> 00:03:20,040
Let's go back to home and we'll search for something.

54
00:03:20,040 --> 00:03:24,580
How about the gradient.

55
00:03:24,580 --> 00:03:26,220
I mean a search for gradient.

56
00:03:26,220 --> 00:03:27,680
The page never reloads.

57
00:03:27,690 --> 00:03:29,730
I don't go anywhere else.

58
00:03:29,730 --> 00:03:31,470
Data is being loaded.

59
00:03:31,470 --> 00:03:35,520
There is communication with the server but it's happening behind the scenes.

60
00:03:35,520 --> 00:03:37,770
It doesn't involve a whole page refresh.

61
00:03:37,770 --> 00:03:39,150
We're not getting a new web page.

62
00:03:39,220 --> 00:03:41,810
It's a it's a different approach for just getting some data.

63
00:03:41,850 --> 00:03:44,600
Or can I use is asking for data from a server.

64
00:03:44,730 --> 00:03:47,790
It comes back and then new elements are added to the page.

65
00:03:47,790 --> 00:03:52,080
If I search for something else let's go back to transform.

66
00:03:52,090 --> 00:03:53,260
You can see what happens.

67
00:03:53,290 --> 00:03:55,780
I'm not moving the page is not changing.

68
00:03:55,780 --> 00:04:00,790
Well the page is changing the contents are changing at least some of it but it's a single page that

69
00:04:00,790 --> 00:04:01,590
we are staying on.

70
00:04:02,010 --> 00:04:04,470
And this is really what Ajax is all about.

71
00:04:04,660 --> 00:04:12,430
The idea of Ajax is using these requests that we can make via javascript asynchronously that's the asynchronous

72
00:04:12,430 --> 00:04:18,430
javascript to load some data from a server or to send data to a server to save something to a database

73
00:04:18,790 --> 00:04:24,250
whatever it is we're communicating with a server behind the scenes not in between page loads like we

74
00:04:24,250 --> 00:04:31,570
had here where you know I search for something else in between those loads in between what a user sees

75
00:04:31,870 --> 00:04:33,280
and the page refreshing.

76
00:04:33,280 --> 00:04:38,110
That is when the communication is occurring with the server here the communication is happening while

77
00:04:38,110 --> 00:04:44,020
I'm on this page it's happening in the background and the general process is a request is sent based

78
00:04:44,020 --> 00:04:44,410
off of.

79
00:04:44,410 --> 00:04:46,450
In this case keyboard events.

80
00:04:46,450 --> 00:04:48,560
So if I type something else what's another.

81
00:04:48,940 --> 00:04:50,020
How about Arrow functions.

82
00:04:51,540 --> 00:04:52,990
So I finished typing.

83
00:04:53,160 --> 00:04:58,860
There's some sort of D balance on here so it's not sending a request every single time I had a letter.

84
00:04:58,860 --> 00:05:01,640
It's waiting until I finish a word or something.

85
00:05:01,710 --> 00:05:07,140
It's sending a request based off of my keyboard input in the background it's happening.

86
00:05:07,140 --> 00:05:08,800
We get some response from the server.

87
00:05:08,820 --> 00:05:13,610
The response usually these days is in the form of something called Jason.

88
00:05:13,980 --> 00:05:19,490
In the past it was ex AML which is what was most commonly used and where the name Ajax comes from.

89
00:05:19,650 --> 00:05:25,280
But these days almost everyone uses Jason so Jason is just a format for sending data.

90
00:05:25,290 --> 00:05:29,480
Imagine you have data representing all of this information we see here.

91
00:05:29,850 --> 00:05:34,860
The elements themselves are not being sent as HMO or the CSF is not being sent.

92
00:05:35,160 --> 00:05:40,020
All that's being sent is basically the text and some information that maybe doesn't show up.

93
00:05:40,020 --> 00:05:45,480
You know what's supported what's not supported and it's being sent as text but rather than just plain

94
00:05:45,480 --> 00:05:45,770
text.

95
00:05:45,780 --> 00:05:47,970
It's turned into this Jason notation.

96
00:05:47,970 --> 00:05:50,130
It's a way of representing data.

97
00:05:50,130 --> 00:05:55,830
It's a protocol for communicating between servers or a protocol for formatting data and sending it to

98
00:05:55,830 --> 00:05:58,730
another server or to another browser somewhere.

99
00:05:58,830 --> 00:06:03,330
So we're going to talk about what it looks like in depth in the next video but if we open up our dev

100
00:06:03,330 --> 00:06:08,790
tools here and you go to the Network tab it's gonna show you that we can see the request happening behind

101
00:06:08,790 --> 00:06:09,420
the scenes.

102
00:06:09,450 --> 00:06:15,090
Let's search for something else like spread and you'll see some activity over here.

103
00:06:15,090 --> 00:06:18,450
This activity represents different requests that have been sent.

104
00:06:18,450 --> 00:06:24,060
If we go to X H.R. which we haven't talked about yet but that's what we'll see next X H.R. here is going

105
00:06:24,060 --> 00:06:30,710
to show us the requests that have been sent and we can see here is one sent to a can I use server.

106
00:06:30,930 --> 00:06:32,090
If we open this up.

107
00:06:32,820 --> 00:06:38,090
This was the umbrella was sent to search equals spread and some information was sent back.

108
00:06:38,100 --> 00:06:40,220
This is the data that was sent back.

109
00:06:40,220 --> 00:06:45,390
If we take a look at it here this is the data that came back from the server behind the scenes.

110
00:06:45,390 --> 00:06:47,210
So we end up with some information.

111
00:06:47,220 --> 00:06:47,750
Let's see.

112
00:06:47,770 --> 00:06:50,870
DNC assessed properties box shadows spread radius.

113
00:06:50,910 --> 00:06:52,680
So that represents this result.

114
00:06:52,680 --> 00:07:00,430
Right here then we have another one operator spread spread in D structuring which is what we see here.

115
00:07:00,510 --> 00:07:04,400
So this information was sent back from the server but it's not all of the information.

116
00:07:04,560 --> 00:07:12,040
It looks like there was a second request sent and if we look at this it's a lot more.

117
00:07:12,400 --> 00:07:17,290
But this is really the core of the browser support chart that is created.

118
00:07:17,290 --> 00:07:18,820
So we get the titles back.

119
00:07:18,820 --> 00:07:22,280
I guess they split it up maybe so you can get them faster.

120
00:07:22,300 --> 00:07:23,190
I'm not positive.

121
00:07:23,230 --> 00:07:28,240
Actually there's I'm sure there's a good reason why there are two requests instead of one that just

122
00:07:28,240 --> 00:07:29,840
gets everything at once.

123
00:07:29,890 --> 00:07:34,680
But here we can see a representation of the CSX property box shadow spread radius.

124
00:07:34,690 --> 00:07:37,730
That's the title that we have here.

125
00:07:38,200 --> 00:07:43,510
We have let's see support and under support we can see all the different browsers.

126
00:07:43,510 --> 00:07:46,010
Here's all the support for Chrome and edge.

127
00:07:46,000 --> 00:07:50,780
There's a lot of information here so we won't go into detail on what this actually looks like.

128
00:07:50,830 --> 00:07:52,850
But the point is this is not h Tim L..

129
00:07:52,870 --> 00:07:53,560
That's being sent.

130
00:07:53,560 --> 00:07:56,380
It's not JavaScript itself.

131
00:07:56,440 --> 00:08:00,670
It's not actually javascript it looks like javascript but it's actually called Jason.

132
00:08:00,700 --> 00:08:06,460
It's simply a way of sharing data between a server and another server a server in a browser that we

133
00:08:06,460 --> 00:08:09,100
can then use in JavaScript.

134
00:08:09,130 --> 00:08:13,790
It's really easy to take Jason and turn it into javascript and do something with it.

135
00:08:13,810 --> 00:08:19,420
So we send a request or in this case the Web site sends a request whenever I type something we can clear

136
00:08:19,510 --> 00:08:21,290
all of the requests we see here.

137
00:08:21,430 --> 00:08:26,330
Just like that we search for something else like what's another one.

138
00:08:26,460 --> 00:08:28,270
S H came our property.

139
00:08:28,280 --> 00:08:28,880
Mm hmm.

140
00:08:28,900 --> 00:08:29,880
How is it so hard.

141
00:08:29,950 --> 00:08:31,750
How about text decoration.

142
00:08:33,480 --> 00:08:34,000
Okay.

143
00:08:34,070 --> 00:08:35,570
So there we go.

144
00:08:35,570 --> 00:08:36,830
Some requests were sent.

145
00:08:36,830 --> 00:08:38,110
We've got the first one.

146
00:08:38,270 --> 00:08:39,080
The second one.

147
00:08:39,080 --> 00:08:40,770
It looks like it sent two requests.

148
00:08:40,850 --> 00:08:48,730
I had text dash D and then it sent another follow up for text dash deck I must have been very slow and

149
00:08:48,870 --> 00:08:51,890
then my typing there and we get information back.

150
00:08:51,890 --> 00:08:58,280
This information is then passed via javascript javascript takes that information and turns it into elements

151
00:08:58,280 --> 00:09:00,870
on the page it manipulates the DOM.

152
00:09:01,070 --> 00:09:06,070
So it's all happening behind the scenes some event usually triggers it typing or hitting a button a

153
00:09:06,080 --> 00:09:07,290
request is sent.

154
00:09:07,310 --> 00:09:10,450
Life goes on in the browser while this request is is gone.

155
00:09:10,460 --> 00:09:14,780
And while we're waiting for a response javascript doesn't just sit there doing nothing.

156
00:09:14,780 --> 00:09:19,730
We talked about that in the last section how this all works with web APIs so the browser is sending

157
00:09:19,730 --> 00:09:20,300
that request.

158
00:09:20,300 --> 00:09:26,200
Information comes back then javascript takes the reins and decides what to do display some content.

159
00:09:26,210 --> 00:09:33,020
In this case add some classes make some tables some whatever these are h 3s or something has them all

160
00:09:33,020 --> 00:09:36,230
in the right order and we end up with this page.

161
00:09:36,230 --> 00:09:36,520
Okay.

162
00:09:36,650 --> 00:09:41,000
So next we're gonna talk about Jason in more detail and then we'll start making our own requests.
