WEBVTT
1
00:00:00.980 --> 00:00:05.270
Our tests are definitely running correctly but at this point there are a couple of issues with our current

2
00:00:05.270 --> 00:00:06.410
testing setup.

3
00:00:06.410 --> 00:00:11.330
So in this video I want to point out a couple of those different issues we're still working on how to

4
00:00:11.330 --> 00:00:14.000
put some tests together without any outside testing library.

5
00:00:14.000 --> 00:00:18.470
So we're going to fix up these couple of issues that I mentioned inside this video right after that.

6
00:00:18.470 --> 00:00:23.720
We're going to replace our little testing implementation with a very official very commonly used in

7
00:00:23.720 --> 00:00:25.840
the community testing library.

8
00:00:25.850 --> 00:00:30.800
Again remember I'm going to show you the like right way quote unquote or the community convention style

9
00:00:30.800 --> 00:00:33.840
way of doing testing the library that we use for that.

10
00:00:33.840 --> 00:00:38.990
The reason that I want to identify some issues with our current setup and show you how to fix them is

11
00:00:38.990 --> 00:00:44.660
that the instant we do and then start to refactor over to using this other testing library you're going

12
00:00:44.660 --> 00:00:49.550
to see that the difference between the code that we put together and the approach and using this very

13
00:00:49.550 --> 00:00:52.740
official testing library is like zero.

14
00:00:52.790 --> 00:00:58.550
In other words our setup with tiny tiny effort is going to be almost identical to using this testing

15
00:00:58.550 --> 00:00:59.480
library.

16
00:00:59.540 --> 00:01:04.130
And the reason we're going to go through this is just a really home in the point hammered in that all

17
00:01:04.130 --> 00:01:08.810
these testing frameworks are essentially the same even if we put one together.

18
00:01:08.840 --> 00:01:09.720
So let's get to it.

19
00:01:09.740 --> 00:01:13.640
We're going to identify a couple of issues with our current testing setup and then start to fix them

20
00:01:13.640 --> 00:01:16.050
up.

21
00:01:16.070 --> 00:01:20.350
So the first big issue that we can identify really easily is the fact that all of our different variables

22
00:01:20.380 --> 00:01:25.150
inside of index not test out us are defined in like the global scope of this file.

23
00:01:25.750 --> 00:01:29.280
So for example take a look at const result right here.

24
00:01:29.440 --> 00:01:32.740
I define const result inside the global scope of the file.

25
00:01:32.770 --> 00:01:38.320
That means that I can not redefine or reassign results anywhere else inside here.

26
00:01:38.320 --> 00:01:43.590
So in other words if I want to run another test of the map function down here I can not say Conte's

27
00:01:43.600 --> 00:01:45.700
results equals whatever.

28
00:01:45.730 --> 00:01:50.760
Instead I would have to rename this variable something like const one or two or three included.

29
00:01:50.770 --> 00:01:53.170
That starts to get really weird really quickly.

30
00:01:53.170 --> 00:01:58.320
We never want to end up with variable names like this the fact that everything is inside the global

31
00:01:58.320 --> 00:02:04.320
scope of the file is really not appropriate that's Big Issue number one.

32
00:02:04.320 --> 00:02:07.770
The second big issue is that if any of our tests throw in air.

33
00:02:07.860 --> 00:02:10.500
So like let's say the test for for each right here.

34
00:02:10.620 --> 00:02:15.090
If something goes wrong with this test that means that no other test inside the file is going to actually

35
00:02:15.090 --> 00:02:16.550
be executed.

36
00:02:16.560 --> 00:02:17.360
So take a look.

37
00:02:17.430 --> 00:02:21.090
If I change this if not six to if not seven.

38
00:02:21.150 --> 00:02:25.060
This test is now going to fail right after that test.

39
00:02:25.100 --> 00:02:30.970
I'll put in a console log of didn't get here to indicate that we are not going to execute that line

40
00:02:30.970 --> 00:02:31.950
of code.

41
00:02:31.960 --> 00:02:36.460
The reason we're not going to execute it is the instant we throw an error our entire program or the

42
00:02:36.460 --> 00:02:38.300
entire node process is going to stop.

43
00:02:39.190 --> 00:02:46.150
Let's save this put back over to our terminal I will rerun node index test J.S. and I will see the error

44
00:02:46.150 --> 00:02:50.370
that just came out but I don't see that console logged anywhere inside of here.

45
00:02:50.470 --> 00:02:54.720
So ideally if anything goes wrong with one test it shouldn't really fail everything.

46
00:02:54.730 --> 00:02:59.770
I would still really like for all of our tests to run so I can get a kind of total report of everything

47
00:02:59.770 --> 00:03:04.400
that is going wrong inside of my application and not just the first thing that goes wrong.

48
00:03:04.540 --> 00:03:11.050
That is issue number two the final big issue is that it's really hard to figure out if something goes

49
00:03:11.050 --> 00:03:13.430
wrong where that error occurred.

50
00:03:13.540 --> 00:03:17.030
Right now it's really home in on that we would have to take a look at our console.

51
00:03:17.260 --> 00:03:21.640
We would have to find this error message right here and then go hunting through all of our different

52
00:03:21.640 --> 00:03:24.270
tests and find something with that error message.

53
00:03:24.280 --> 00:03:25.930
So like okay it's right there.

54
00:03:25.930 --> 00:03:27.740
In this case it's really easy to find.

55
00:03:27.880 --> 00:03:32.020
But you can imagine if we had a test file with like hundreds of lines of code it might be a little bit

56
00:03:32.020 --> 00:03:37.830
challenging to find the exact test that is causing an error so I would really like if whenever we start

57
00:03:37.830 --> 00:03:42.510
to run a test we could kind of print out a description of the test we're about to run something like

58
00:03:42.960 --> 00:03:49.160
if we did a console log up here to say has four for each.

59
00:03:49.410 --> 00:03:55.040
And then when we start the MAP test if we did a console log of like tests for map.

60
00:03:55.210 --> 00:03:58.910
Now if we had any error occur we could look right above the error.

61
00:03:59.110 --> 00:04:04.290
We could see what the console log was and that would help us just home in on what test actually failed.

62
00:04:04.330 --> 00:04:07.150
So I got to see this really quickly rerun it.

63
00:04:07.460 --> 00:04:12.520
And now when I get the air I can look right above the air and I'll see OK this air must have occurred

64
00:04:12.760 --> 00:04:15.690
while we were running the test for for each.

65
00:04:15.710 --> 00:04:17.320
So that is the third big issue.

66
00:04:17.320 --> 00:04:23.530
We don't really have a good way of labeling our different tests so like I said we're going to write

67
00:04:23.530 --> 00:04:27.730
just a little bit of code to fix all three of these issues in one go.

68
00:04:27.730 --> 00:04:32.830
Again our big issues are all of our variables are scoped the entire file.

69
00:04:32.830 --> 00:04:35.640
One error causes the entire file to stop.

70
00:04:35.950 --> 00:04:40.600
And we don't have any good descriptions of each individual test that is solve each of this.

71
00:04:40.660 --> 00:04:46.080
We're going to make a little helper function at the very top of the file.

72
00:04:46.240 --> 00:04:49.580
I'm going to create a helper function called test.

73
00:04:49.710 --> 00:04:53.410
We're going to call this test function with a string description.

74
00:04:53.430 --> 00:04:58.380
So like a description of the test we're about to run I'm going to receive that as an argument called

75
00:04:58.470 --> 00:05:03.970
DSP short for description and then the second argument is going to be a function.

76
00:05:04.030 --> 00:05:09.700
I'm going to call it simply f then the F N or the function right here that we're going to pass in is

77
00:05:09.700 --> 00:05:16.340
going to wrap up all of our different testing logic for each individual test so inside of here we will

78
00:05:16.340 --> 00:05:18.430
provide a really quick implementation.

79
00:05:18.440 --> 00:05:22.850
Then we're going to refactor our two tests to make use of the test function.

80
00:05:22.880 --> 00:05:28.130
So here's the idea just as we're about to run each individual individual test I will do a console log

81
00:05:28.730 --> 00:05:34.850
of dash dash dash and then the description of the test the dashes right there are just to help us like

82
00:05:34.850 --> 00:05:39.890
read the title The test inside of our terminal and then immediately after that I will simply call the

83
00:05:39.890 --> 00:05:44.810
function that gets passed in.

84
00:05:44.810 --> 00:05:49.280
So now we're going to rewrite each of our tests using the test function.

85
00:05:49.280 --> 00:05:54.860
We're going to call test we're gonna pass in a description and then we're going to wrap up all the current

86
00:05:54.860 --> 00:06:00.580
testing logic into a little callback function that gets provided as the f an argument right here.

87
00:06:00.650 --> 00:06:04.340
Let me show you exactly what that looks like for the for each test we would write out something like

88
00:06:04.820 --> 00:06:10.310
test the for each function.

89
00:06:10.460 --> 00:06:12.800
Now I'll pass in the function as a second argument.

90
00:06:12.800 --> 00:06:17.750
Again this is going to be that event thing right there and inside that function I'm going to place all

91
00:06:17.750 --> 00:06:21.110
of my test related logic or the for each function.

92
00:06:21.110 --> 00:06:28.010
So I'll cut all that and paste it in like so I'm not gonna repeat that same process for the map test

93
00:06:28.010 --> 00:06:28.490
as well.

94
00:06:29.210 --> 00:06:34.080
So down here I'm going to call test the map function

95
00:06:37.210 --> 00:06:40.710
and then I'll cut and paste all of my map related test code.

96
00:06:40.790 --> 00:06:42.290
I'll take all this.

97
00:06:42.290 --> 00:06:49.850
I'm going to cut all of it and paste it into the test function like so.

98
00:06:49.880 --> 00:06:50.150
All right.

99
00:06:50.180 --> 00:06:53.990
So now this approach right here solves two of our really big issues.

100
00:06:53.990 --> 00:06:59.120
The first issue that it solves is the fact that we can now reuse different variable names inside the

101
00:06:59.120 --> 00:07:05.120
same file because now say for example this result variable is scoped to this function right here.

102
00:07:05.180 --> 00:07:12.000
Now I could write another test down below it and inside there I could reuse the concert or ask me the

103
00:07:12.060 --> 00:07:14.240
result variable name once again.

104
00:07:14.350 --> 00:07:19.210
That issue definitely got solved with this approach the next big issue that this solves is the fact

105
00:07:19.210 --> 00:07:23.970
that we can now see automatically a little description for each test that is about to run.

106
00:07:24.110 --> 00:07:28.950
Now we can see the title of each test right above each error message that might occur.

107
00:07:28.950 --> 00:07:33.560
So that's the second big issue that we just solved now the third issue that we still have to fix up

108
00:07:33.860 --> 00:07:37.340
is that right now we're still going to have our entire program end.

109
00:07:37.430 --> 00:07:39.850
The instant that we throw any error.

110
00:07:39.920 --> 00:07:44.510
So if anything goes wrong in any individual test the entire program is just going to come down crashing

111
00:07:46.580 --> 00:07:52.630
so to fix this up we're going to go back into our test function and we're going to simply wrap F and

112
00:07:52.630 --> 00:07:55.710
right here inside of a try catch statement.

113
00:07:55.970 --> 00:08:04.800
So I a place try I will then run the function I'll then catch the error if any occurs while we're running

114
00:08:04.800 --> 00:08:10.680
the test and then if something goes wrong while running that test we're going to simply print out that

115
00:08:10.680 --> 00:08:15.750
error message from the air so we'll say console dot log e r dot message.

116
00:08:15.870 --> 00:08:16.290
Like so

117
00:08:19.920 --> 00:08:24.610
now it's entirely OK if something goes wrong inside of a test function so something inside of here can

118
00:08:24.610 --> 00:08:27.420
throw an error and that's not going to end the entire program.

119
00:08:27.430 --> 00:08:29.150
Instead we're going to catch the error.

120
00:08:29.230 --> 00:08:34.300
We're going to log it and we'll move on to executing the next test inside of our file.

121
00:08:34.300 --> 00:08:39.550
Let's now save this and we'll try to run it again as a quick reminder my for each function right here

122
00:08:39.670 --> 00:08:41.290
still has an incorrect check.

123
00:08:41.320 --> 00:08:44.410
I'm still checking to see if some is not equal to 7.

124
00:08:44.440 --> 00:08:49.870
So when I run this file I'm going to expect to see a very clear error message stating that something

125
00:08:49.870 --> 00:08:50.560
went wrong with the.

126
00:08:50.560 --> 00:08:54.970
For each function test and I'll expect to see an error of something like that right there.

127
00:08:55.810 --> 00:09:00.610
So going to say this look back over rerun the file and there we go.

128
00:09:00.630 --> 00:09:01.310
So now I can see.

129
00:09:01.340 --> 00:09:01.670
OK.

130
00:09:01.690 --> 00:09:06.580
I was running for each function I expected to get the summing array equal to six.

131
00:09:06.710 --> 00:09:13.160
But it was not so looks like this approach solves all three of our big issues.

132
00:09:13.200 --> 00:09:17.670
So now that we fix this up I can go back over and just really quickly change that some not equal to

133
00:09:17.670 --> 00:09:20.760
seven just down to six like so.

134
00:09:20.880 --> 00:09:21.100
All right.

135
00:09:21.100 --> 00:09:26.110
So what you see right here even though we put this code together it's very similar to how just about

136
00:09:26.200 --> 00:09:31.450
every single testing library and framework out there actually operates in just about every library you're

137
00:09:31.450 --> 00:09:34.440
going to see this exact approach right here.

138
00:09:34.510 --> 00:09:38.770
We're going to have some function that we're going to call the first argument is going to be some string

139
00:09:38.770 --> 00:09:40.990
describing the tests we're about to run.

140
00:09:41.020 --> 00:09:46.150
The second argument is going to be a function that wraps up all of our test related code and inside

141
00:09:46.150 --> 00:09:51.310
there we will run some code we'll actually do a test and if something wrong goes wrong we'll throw an

142
00:09:51.310 --> 00:09:54.520
error or do something very similar.

143
00:09:54.610 --> 00:09:57.760
We will then have a test running function of sorts like this right here.

144
00:09:57.820 --> 00:10:00.500
It's going to try to run every test in order.

145
00:10:00.500 --> 00:10:06.060
And if anything goes wrong it's going to catch the error in slug it out at the terminal.

146
00:10:06.150 --> 00:10:06.920
Now you seen this.

147
00:10:06.950 --> 00:10:08.360
We're gonna take a quick pause.

148
00:10:08.360 --> 00:10:09.560
We're going to come back the next video.

149
00:10:09.560 --> 00:10:14.570
We're gonna make one more very small update to this file and then like I mentioned we're gonna start

150
00:10:14.570 --> 00:10:20.740
to refactor it back over here to using a third party test framework.

151
00:10:20.740 --> 00:10:22.810
So a quick pause and I'll see you in just a moment.
