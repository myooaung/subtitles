WEBVTT
1
00:00:00.240 --> 00:00:04.170
Next up we have a third option for making requests via javascript.

2
00:00:04.200 --> 00:00:05.830
This is not a built in option.

3
00:00:05.850 --> 00:00:10.260
It's not native javascript like fetch or exit chars.

4
00:00:10.290 --> 00:00:13.440
It is a external library called axioms.

5
00:00:13.440 --> 00:00:18.070
It's one of many a whole bunch of different HDP libraries that you could use.

6
00:00:18.150 --> 00:00:20.800
Excuse is just the most popular.

7
00:00:20.940 --> 00:00:26.620
I prefer it over some of the other alternatives but it is by no means the one and only option.

8
00:00:26.630 --> 00:00:30.810
It's just the one that I like and it's one that you'll be using throughout the rest of the course and

9
00:00:30.840 --> 00:00:38.100
a lot of the projects where we need to make requests so you can find it by going to get hub slash axes.

10
00:00:38.250 --> 00:00:46.140
If you google for ex CEOs there is this news Web site Acciona which is actually pretty decent but that's

11
00:00:46.140 --> 00:00:47.400
not what we're looking for.

12
00:00:47.640 --> 00:00:53.280
We're looking for the Expos GitHub so you could just do access HDP.

13
00:00:53.310 --> 00:00:54.420
Here we go.

14
00:00:54.420 --> 00:00:57.330
This is the official get Hub Repository.

15
00:00:57.330 --> 00:00:59.550
You can see it has a ton of stars.

16
00:00:59.550 --> 00:01:01.830
It's used by almost 2 million people.

17
00:01:01.860 --> 00:01:03.690
Very popular library.

18
00:01:03.690 --> 00:01:07.960
So all it does is it simplifies the process of making requests.

19
00:01:08.190 --> 00:01:12.660
It uses fetch behind the scenes so it doesn't give us anything we can't already do.

20
00:01:12.660 --> 00:01:16.970
It's not somehow magically adding features to the language of JavaScript.

21
00:01:17.160 --> 00:01:21.810
It just simplifies things through a bunch of methods and objects that it creates that we can interact

22
00:01:21.810 --> 00:01:22.310
with.

23
00:01:22.500 --> 00:01:25.080
It is promise based just like fetch.

24
00:01:25.080 --> 00:01:28.310
So that means that we don't have to deal with a bunch of nasty callbacks.

25
00:01:28.490 --> 00:01:33.630
You can get a nice overview of the features here but one of the most important features that people

26
00:01:33.630 --> 00:01:38.940
really like is that you can use it both in the client on the browser side of things which is what we're

27
00:01:38.940 --> 00:01:45.750
doing right now but also on the server side using no J.S. the exact same library which is not always

28
00:01:45.750 --> 00:01:46.480
the case.

29
00:01:46.710 --> 00:01:50.700
So we haven't talked about node but in some of the projects we will work with node and you'll see how

30
00:01:50.700 --> 00:01:57.130
you can include a tool like axes on the server side using Node and use the exact same syntax.

31
00:01:57.210 --> 00:02:04.380
So one library one way of fetching data let's say access get is the name of the method that will work

32
00:02:04.380 --> 00:02:09.660
in the browser and in no J.S. but that's beyond the scope of where we are right now.

33
00:02:09.690 --> 00:02:15.870
So the first thing we need to do if we want to use axioms is we need to include it in our HMO file as

34
00:02:15.870 --> 00:02:20.730
an external script so you can download it and have the files on your machine.

35
00:02:20.730 --> 00:02:24.080
But the simplest way is to copy this C.D. in right here.

36
00:02:24.750 --> 00:02:30.520
So a script where the source is set to an external source it's not one of our files on our machine.

37
00:02:30.540 --> 00:02:36.440
This is a URL and if we visit it right now this is what we would be loading.

38
00:02:36.440 --> 00:02:38.520
This is the source of excuse.

39
00:02:38.690 --> 00:02:44.840
It's been minimized and compressed into this massive chunk of very ugly text but this gives us everything

40
00:02:44.840 --> 00:02:52.220
we need to use excuse so we'll include that script and we definitely want to make sure we include it

41
00:02:52.220 --> 00:02:56.520
before our own files that are trying to use excuse.

42
00:02:56.630 --> 00:03:03.110
Otherwise we'll get an error if we reference x post in our app Jesus and we have this line down below.

43
00:03:03.110 --> 00:03:06.190
Javascript won't know about axioms yet.

44
00:03:06.320 --> 00:03:09.530
OK so let's first bit next.

45
00:03:09.530 --> 00:03:11.620
How do we actually make a request.

46
00:03:11.630 --> 00:03:13.660
There are a couple of different options.

47
00:03:13.700 --> 00:03:18.440
There's actually quite a few we can perform a get request like this.

48
00:03:18.470 --> 00:03:22.640
Axioms dot get and then we pass in a euro.

49
00:03:22.670 --> 00:03:28.340
So it's kind of the same thing with fetch or we do fetch you know Google dot com or something.

50
00:03:28.340 --> 00:03:31.760
Instead we do X those that get Google dot com.

51
00:03:31.940 --> 00:03:36.820
Why don't we just make sure the library is showing up so I'll refresh my page here.

52
00:03:36.910 --> 00:03:39.960
X years intro we'll look at axioms.

53
00:03:39.990 --> 00:03:40.330
Okay.

54
00:03:40.370 --> 00:03:41.100
It exists.

55
00:03:41.570 --> 00:03:45.710
If we call axioms don't get and we pass in some U.R.L..

56
00:03:45.950 --> 00:03:49.490
Let's let's use the Star Wars API again.

57
00:03:49.790 --> 00:03:52.780
This you are L right there.

58
00:03:52.910 --> 00:03:57.650
The same one we've been using swap eco slash API slash planets.

59
00:03:57.650 --> 00:03:59.000
I get a promise back.

60
00:03:59.240 --> 00:04:00.870
Why didn't I save it to a variable.

61
00:04:01.060 --> 00:04:06.440
We'll call this const rez and we look at rez.

62
00:04:06.440 --> 00:04:08.290
It's now been resolved.

63
00:04:08.780 --> 00:04:13.700
So just like fetch we get a promise back when we make a request using axioms.

64
00:04:13.700 --> 00:04:21.110
Let's take a look at the value that it's been resolved with inside we have a data property and it's

65
00:04:21.110 --> 00:04:22.970
already been passed for us.

66
00:04:23.000 --> 00:04:25.230
We don't have to pass it ourselves.

67
00:04:25.250 --> 00:04:30.950
That's one of the main advantages of using a tool like axioms is that unlike fetch we don't have to

68
00:04:30.950 --> 00:04:33.540
do the chase on passing on our own.

69
00:04:33.680 --> 00:04:39.980
If we go back to our fetch example from earlier we'll just uncommon the whole thing every time we make

70
00:04:39.980 --> 00:04:41.390
a request using fetch.

71
00:04:41.420 --> 00:04:43.000
I've moved these into separate functions.

72
00:04:43.010 --> 00:04:49.010
If you didn't watch that video observe moves fetch next planets into its own function it returns fetch

73
00:04:49.250 --> 00:04:51.120
which is going to return a promise.

74
00:04:51.200 --> 00:04:54.170
Then we check the status code and we pass.

75
00:04:54.170 --> 00:04:59.750
So we have to check the status quo to make sure that the response is OK because fetch will resolve the

76
00:04:59.750 --> 00:05:02.360
promise as long as we get any response.

77
00:05:02.360 --> 00:05:07.650
It doesn't matter if it's a for or for an error not found or if it's two hundred OK.

78
00:05:07.700 --> 00:05:08.870
Status Code.

79
00:05:09.140 --> 00:05:13.460
So if we want to weed out those bad status codes we have to manually do it.

80
00:05:13.460 --> 00:05:15.680
Then we have to pass on our own response.

81
00:05:15.690 --> 00:05:16.500
Jason.

82
00:05:16.700 --> 00:05:18.660
If we instead use axioms.

83
00:05:18.890 --> 00:05:21.160
Those are not really a problem anymore.

84
00:05:21.230 --> 00:05:27.140
We do axioms that get this U.R.L. we'll do a dot then it does return a promise.

85
00:05:27.140 --> 00:05:28.290
As we've seen.

86
00:05:28.490 --> 00:05:32.360
Let's call this rez console that log rez

87
00:05:35.510 --> 00:05:37.230
refresh our page.

88
00:05:37.380 --> 00:05:37.970
Okay.

89
00:05:38.000 --> 00:05:38.870
Red Dot data

90
00:05:43.610 --> 00:05:45.180
it's already been passed as we saw.

91
00:05:45.200 --> 00:05:48.470
We don't have to handle an additional promise.

92
00:05:48.470 --> 00:05:48.700
Right.

93
00:05:48.710 --> 00:05:54.440
Because when we use fetch response dot Jason returns a promise that we have to use a dot then.

94
00:05:54.490 --> 00:05:56.780
So we end up with chaining multiple dot then.

95
00:05:57.110 --> 00:05:58.820
And it's not that ugly or anything.

96
00:05:58.820 --> 00:06:02.130
It's not the end of the world but we do have to pass on our own.

97
00:06:02.330 --> 00:06:05.950
We get a string of Jason that needs to be turned into javascript.

98
00:06:05.950 --> 00:06:10.650
Actually I was already takes care of that for us so it's doing the same thing behind the scenes.

99
00:06:10.700 --> 00:06:14.390
It's getting a string of days on it it's passing it but we just don't write it.

100
00:06:14.450 --> 00:06:17.010
It does it for us which is pretty nice.

101
00:06:17.060 --> 00:06:18.150
Now let's see what happens.

102
00:06:18.140 --> 00:06:20.170
We add on a sketch.

103
00:06:20.870 --> 00:06:25.040
Go with error as our parameter and cancel that log error.

104
00:06:25.040 --> 00:06:26.330
I'll do this on multiple lines

105
00:06:30.020 --> 00:06:36.520
so right now unless somehow my internet went down or the API went down we still get our dot then callback.

106
00:06:36.540 --> 00:06:39.560
But if I try and request a resource that doesn't exist.

107
00:06:39.570 --> 00:06:41.550
This should give me a forum for error.

108
00:06:41.550 --> 00:06:43.930
Let's see what happens here.

109
00:06:43.950 --> 00:06:45.190
Check it out.

110
00:06:45.240 --> 00:06:48.230
Request failed with a status code for a 4 error.

111
00:06:48.390 --> 00:06:50.130
My catch is what ran.

112
00:06:50.270 --> 00:06:55.750
We can make that clearer console dot log in catch callback

113
00:06:59.280 --> 00:07:01.300
the promise is being rejected.

114
00:07:01.300 --> 00:07:05.620
So this is another key difference between axioms and fetch.

115
00:07:05.620 --> 00:07:11.560
When we did fetch when we used fetch we had to manually check the response the status code because fetch

116
00:07:11.560 --> 00:07:18.820
does not reject a promise if status code is 400 or something else that is not OK something other than

117
00:07:18.820 --> 00:07:22.970
two hundred which is what we want Acciona and its developers or developer.

118
00:07:22.990 --> 00:07:25.890
Not sure how many there are actually those knows that.

119
00:07:25.930 --> 00:07:32.440
Typically if there's a 4 or 4 or some other status code that is not 200 OK you're going to want the

120
00:07:32.470 --> 00:07:35.400
catch callback to run which is what we're doing here anyway.

121
00:07:35.410 --> 00:07:41.910
I'm throwing an error which then triggers this catch callback so it just simplifies things in two ways.

122
00:07:41.920 --> 00:07:45.940
As we've seen already one you don't have to pass gates on to.

123
00:07:46.060 --> 00:07:51.640
You don't have to weed out the bad status codes responses with a non 200 status code will be rejected

124
00:07:51.670 --> 00:07:54.910
or at least I don't think it's every single non 200 status code.

125
00:07:54.910 --> 00:07:56.630
But the bad ones like 4 or 4.

126
00:07:56.680 --> 00:07:58.330
So that is it for now.

127
00:07:58.330 --> 00:08:00.330
I'll show you a few more examples with axioms.

128
00:08:00.350 --> 00:08:01.270
In the next video.

129
00:08:01.660 --> 00:08:04.080
Otherwise it works exactly the same way.

130
00:08:04.170 --> 00:08:05.060
It returns promised.

131
00:08:05.110 --> 00:08:11.080
Chain with dot then if I wanted to make a second request we'll see that in the next video we just return.

132
00:08:11.110 --> 00:08:13.750
Another axiom stuck get just like we did with fetch.

133
00:08:13.750 --> 00:08:17.470
So to summarize this so far xmas is an external library.

134
00:08:17.530 --> 00:08:20.170
We have to include it if we don't include it there.

135
00:08:20.200 --> 00:08:24.010
We'll run into issues we'll get an error saying I don't know what the heck you're talking about.

136
00:08:24.190 --> 00:08:31.300
Acciona is not defined once we include yos we can reference axis dot get which is the method we've been

137
00:08:31.300 --> 00:08:31.690
using.

138
00:08:31.690 --> 00:08:33.030
There are other methods.

139
00:08:33.160 --> 00:08:37.580
If you want to send a post request you can do an x yo stop post if you want send some other requests

140
00:08:37.580 --> 00:08:38.740
to put or patch.

141
00:08:38.750 --> 00:08:39.740
If you've never heard of those.

142
00:08:39.760 --> 00:08:43.210
Don't worry about it but you can send those requests using axioms.

143
00:08:43.210 --> 00:08:47.340
It's nothing revolutionary it's nothing that we can't do without axioms.

144
00:08:47.380 --> 00:08:53.420
It's just simple clean syntax that removes some of the minor pain points of using fetch.

145
00:08:53.590 --> 00:08:53.830
All right.

146
00:08:53.830 --> 00:08:55.120
So next we'll get some more practice.
