WEBVTT
1
00:00:00.720 --> 00:00:04.270
All right my friends in this video we're going to do a quick wrap up of this application.

2
00:00:04.270 --> 00:00:08.260
There's just a couple of things I want to point out really quickly that were really important to understand

3
00:00:09.040 --> 00:00:13.180
are not the most important thing about this application was to understand these creates autocomplete

4
00:00:13.300 --> 00:00:14.260
function.

5
00:00:14.260 --> 00:00:19.480
The entire goal here was to create a widget that was entirely reusable in nature and we saw a little

6
00:00:19.480 --> 00:00:24.430
bit earlier how we could very easily swap out a source of data with the fetch data function and the

7
00:00:24.490 --> 00:00:28.880
render option function as well to customize what the autocomplete looked like.

8
00:00:29.020 --> 00:00:31.290
And that all was done very easily.

9
00:00:31.360 --> 00:00:33.180
Think about how he would customize this widget.

10
00:00:33.220 --> 00:00:38.170
If we didn't have access to this options object we would have had to go through all the code inside

11
00:00:38.170 --> 00:00:44.110
of here and customize each line one by one to change the source of information or change how each option

12
00:00:44.110 --> 00:00:51.310
was displayed so by extracting all this logic into the silver separate file you can now take this file

13
00:00:51.310 --> 00:00:52.150
right here.

14
00:00:52.150 --> 00:01:00.090
Add it to any other project that uses the almost CSX framework and tada you've got a working autocomplete

15
00:01:00.370 --> 00:01:02.330
that's pretty much it.

16
00:01:02.360 --> 00:01:06.740
The other big thing we learned about was that whenever we wanted to create a reasonable widget was kind

17
00:01:06.740 --> 00:01:13.160
of important to locate all the HDL for that inside the widget itself as opposed to our e-mail file.

18
00:01:13.160 --> 00:01:18.530
Again if we had tried to keep our HDL inside of the actual document around the autocomplete you and

19
00:01:18.530 --> 00:01:23.840
I for every autocomplete we want to show would have had to put something inside of here of like input

20
00:01:24.620 --> 00:01:32.960
and then a div with the class of dropdown and then inside there another one with dropdown dash menu

21
00:01:32.990 --> 00:01:38.870
and so on and that would have had to have been done every single time we wanted to show it in autocomplete.

22
00:01:38.870 --> 00:01:44.000
So we got around that by instead saying you know what inside of our each HTML document we're gonna show

23
00:01:44.090 --> 00:01:50.570
just the absolute minimum kind of like a placeholder to display the autocomplete It was then up to the

24
00:01:50.570 --> 00:01:54.290
widgets code to initialize the A.T.M. inside there.

25
00:01:54.290 --> 00:01:59.090
And so again this is what made our widget very reusable because now we don't really care about what

26
00:01:59.090 --> 00:02:00.580
has to be displayed inside of it.

27
00:02:00.590 --> 00:02:07.420
We can just say Great autocomplete and the widget is going to set itself up automatically.

28
00:02:07.440 --> 00:02:12.570
The last thing we really focused on what we focused on a lot but definitely one of the bigger items

29
00:02:12.840 --> 00:02:16.260
was to really figure out how to run that comparison appropriately.

30
00:02:16.440 --> 00:02:21.390
So in this scenario we realized that trying to pull stats out after the fact from our different movie

31
00:02:21.390 --> 00:02:27.270
objects would probably be really challenging because we would be limited to being to how often we could

32
00:02:27.270 --> 00:02:30.450
reorganize or reorder the different statistics.

33
00:02:30.450 --> 00:02:37.320
So instead inside of our movie template we decided upfront to extract all the relevant values and store

34
00:02:37.320 --> 00:02:39.290
those values inside of our Dom.

35
00:02:39.600 --> 00:02:45.000
Then we can easily pull those values out later on from the run comparison function by just finding those

36
00:02:45.000 --> 00:02:50.880
elements and then referencing the appropriate data set value then we could do a very easy comparison

37
00:02:50.910 --> 00:02:55.860
without having to worry about what we were actually comparing imagine what we would have had to write

38
00:02:55.890 --> 00:03:03.570
in here if we were trying to throw in like the entire awards straight into each DOM element we would

39
00:03:03.560 --> 00:03:08.340
have had to say something like left side value right here and then we would have to do some code like

40
00:03:08.700 --> 00:03:15.180
if left side value contains awards or something like that we've had to write some code like that to

41
00:03:15.180 --> 00:03:21.390
determine or try to figure out whether or not we were working with the awards string to doing that after

42
00:03:21.390 --> 00:03:23.070
the fact would've been really challenging.

43
00:03:23.070 --> 00:03:30.230
So instead we just did all the processing upfront and that made our life down the road way easier okay.

44
00:03:30.250 --> 00:03:31.900
So that's pretty much it for this application.

45
00:03:31.930 --> 00:03:33.430
So let's take a quick pause right here.

46
00:03:33.430 --> 00:03:35.150
We still have a ton to learn.

47
00:03:35.230 --> 00:03:36.580
We'll continue in the next video.
