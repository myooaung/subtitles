WEBVTT
1
00:00:00.980 --> 00:00:05.000
We've got a middleware function that will pass the body of a incoming POST request.

2
00:00:05.000 --> 00:00:09.830
Let's be honest there are some big holes in our implementation that make it not quite appropriate for

3
00:00:09.830 --> 00:00:16.180
production use in particular many other types of requests besides just post requests can have bodies.

4
00:00:16.200 --> 00:00:18.650
Right now we're only handling a POST request.

5
00:00:18.980 --> 00:00:24.740
So rather than using our whole built body parser function we're going to replace this with some outside

6
00:00:24.740 --> 00:00:28.220
library that will essentially do the exact thing for us.

7
00:00:29.000 --> 00:00:34.910
So at the top of the file I'm going to add in a another require statement for something called you guessed

8
00:00:34.910 --> 00:00:41.640
it body parser and I'm going to require that from body dash parser.

9
00:00:41.650 --> 00:00:46.660
So this is basically the same exact function we put together but accounts for many different corner

10
00:00:46.660 --> 00:00:49.470
cases that we are not accommodating for right now.

11
00:00:49.510 --> 00:00:54.650
So definitely better to use this off the shelf one than one that we put together on our own to make

12
00:00:54.650 --> 00:00:55.780
use of this thing.

13
00:00:55.830 --> 00:00:57.020
I'm going to go back down.

14
00:00:57.080 --> 00:00:59.990
I'm going to find our body parser and delete it

15
00:01:02.880 --> 00:01:10.530
and then I'm going to replace body parser right here with body parts or dot U.R.L. encoded now PaSSIN

16
00:01:10.560 --> 00:01:17.930
An options object of extended true so we just had a body parser function and that was our middleware

17
00:01:18.250 --> 00:01:22.580
the body parser library actually has a couple of different middleware functions on it one of which is

18
00:01:22.580 --> 00:01:24.300
called Your L encoded.

19
00:01:24.440 --> 00:01:30.870
This is for handling specifically information that is coming out of an HMO form so the syntax and making

20
00:01:30.870 --> 00:01:35.610
use a body parser is just slightly different but all the theory behind it is identical.

21
00:01:35.640 --> 00:01:39.500
This is a middleware function that is going to take the incoming requests.

22
00:01:39.600 --> 00:01:41.370
It's going to receive the body of the request.

23
00:01:41.370 --> 00:01:42.810
Bit by bit pass it.

24
00:01:42.810 --> 00:01:48.000
Put all that information together and then make that information available on the erect body property.

25
00:01:48.000 --> 00:01:53.450
Same thing that you and I were just doing but it's just being taken care of by well a slightly better

26
00:01:53.450 --> 00:01:57.990
library let's now save this and do another quick test at the end of the day.

27
00:01:58.000 --> 00:02:03.460
I'm going to expect to see the exact same thing that we just saw in the terminal a moment ago so I got

28
00:02:03.460 --> 00:02:12.000
to go back over to my browser once again to local host three thousand Brian some information to the

29
00:02:12.000 --> 00:02:13.820
terminal and there we go.

30
00:02:13.830 --> 00:02:19.740
Same exact thing we had before but as I've said probably four times now the body parcel or library takes

31
00:02:19.740 --> 00:02:25.330
care of many corner cases that we are not accommodating for all right.

32
00:02:25.370 --> 00:02:26.280
This looks good.

33
00:02:26.300 --> 00:02:28.790
Now there's just one last thing to think about.

34
00:02:28.820 --> 00:02:33.590
Remember the entire idea behind middleware was that we would not have to rewrite this logic all over

35
00:02:33.590 --> 00:02:38.710
the place even if we end up having different request handlers inside of application.

36
00:02:38.720 --> 00:02:39.920
Now that's definitely great.

37
00:02:39.920 --> 00:02:41.350
And we definitely accommodate for that.

38
00:02:41.420 --> 00:02:46.520
But the downside is every single time that we expect to receive a post request that has some form data

39
00:02:46.550 --> 00:02:49.850
inside of it we're going to have to write out this exact same line of code.

40
00:02:50.300 --> 00:02:54.620
So in other words to kind of simulate this kind of scenario right here I would have to do something

41
00:02:54.620 --> 00:03:03.890
like app dot post to slash products and then copy that exact same statement like so and then throw in

42
00:03:03.890 --> 00:03:05.280
my callback function.

43
00:03:05.300 --> 00:03:08.400
So the downside here is just having to copy paste that around.

44
00:03:08.450 --> 00:03:13.580
So ideally we might be able to apply this middleware somewhere else inside of our application so we

45
00:03:13.580 --> 00:03:15.690
don't have to copy paste it everywhere.

46
00:03:15.770 --> 00:03:20.510
I'm going to delete that root handler I just added because it was just for demonstration purposes.

47
00:03:20.510 --> 00:03:25.760
So in order to make sure that absolutely every single request is going to get passed automatically and

48
00:03:25.760 --> 00:03:30.890
to make sure that we don't have to add this statement in into every last request handler I'm going to

49
00:03:30.890 --> 00:03:37.730
cut that thing out make sure I delete one of those commas I'll then go back up to where we create our

50
00:03:37.820 --> 00:03:44.570
app object right here and then right after it I'll say app dot use and then paste in that body parser

51
00:03:44.570 --> 00:03:51.660
stuff so the use function we call that and we pass it in a middleware function if we want all of our

52
00:03:51.660 --> 00:03:55.530
different root handlers to have that middleware function be applied.

53
00:03:55.530 --> 00:04:01.150
So now every single different root handler inside of app will be automatically body parts for us.

54
00:04:01.320 --> 00:04:06.510
Do note that the body parser middleware or the body parts or library is going to automatically detect

55
00:04:06.510 --> 00:04:11.580
whether or not we are using it on a get type request or a post request or whatever and not apply it

56
00:04:11.580 --> 00:04:13.320
in the case of a get request.

57
00:04:13.590 --> 00:04:16.390
So we can just throw that line of code right there and today.

58
00:04:16.410 --> 00:04:17.100
That's pretty much it.

59
00:04:17.100 --> 00:04:21.370
We never have to worry about passing any forms again inside of application.

60
00:04:21.390 --> 00:04:23.920
It'll all be done for us automatically.

61
00:04:24.060 --> 00:04:28.290
We're going to end up using this app dot use function quite a bit whenever we want to wire up some kind

62
00:04:28.290 --> 00:04:31.120
of middleware inside of our app.

63
00:04:31.120 --> 00:04:31.350
All right.

64
00:04:31.380 --> 00:04:39.250
Let's save this and do one last test so go back to look at those 3000 I will throw in my dummy form

65
00:04:39.250 --> 00:04:45.300
data submit it back to the terminal and I still get the exact same thing all right.

66
00:04:45.520 --> 00:04:49.290
That's pretty much it so that is middleware in a nutshell.

67
00:04:49.290 --> 00:04:53.370
We're going to be using middleware quite a bit throughout this application for a variety of different

68
00:04:53.370 --> 00:04:54.230
purposes.

69
00:04:54.300 --> 00:04:58.110
Like I said is the best way to get code reuse inside of an express application.

70
00:04:58.110 --> 00:05:01.620
And that's why we're going to be relying upon it so heavily.

71
00:05:01.620 --> 00:05:01.860
All right.

72
00:05:01.860 --> 00:05:03.850
So now we've got all this foreign stuff done.

73
00:05:03.930 --> 00:05:05.790
We can receive the information from a forum.

74
00:05:05.820 --> 00:05:06.950
Let's take a pause right here.

75
00:05:07.020 --> 00:05:11.190
When we come back the next video we'll get back on track and focus on actually creating an account for

76
00:05:11.190 --> 00:05:11.700
a user.
