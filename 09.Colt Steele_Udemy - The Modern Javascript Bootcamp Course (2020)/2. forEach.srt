1
00:00:00,120 --> 00:00:05,850
The first of this new group of array methods we'll talk about is called for each for each accepts a

2
00:00:05,850 --> 00:00:07,850
callback and accepts a function.

3
00:00:08,040 --> 00:00:11,010
And it calls it on every element in a given array.

4
00:00:11,310 --> 00:00:12,180
It's an Array method.

5
00:00:12,210 --> 00:00:13,490
So we call it on the array.

6
00:00:13,830 --> 00:00:15,330
Here's my number array.

7
00:00:15,330 --> 00:00:17,220
We do numbers for each.

8
00:00:17,220 --> 00:00:22,530
Just like we would do num stock index of or NUM stop reverse both of the examples here are using anonymous

9
00:00:22,530 --> 00:00:23,960
function expressions.

10
00:00:23,970 --> 00:00:26,620
They're just one time things that I'm trying to do.

11
00:00:26,700 --> 00:00:31,470
I could also create a function I could define it first and then pass the name of the function in.

12
00:00:31,710 --> 00:00:35,970
But again the goal of for each is that it takes whatever function you give it.

13
00:00:35,970 --> 00:00:43,790
And it calls it on each element it passes each value into that function so let's try a simple example.

14
00:00:43,870 --> 00:00:52,180
I have an array called numbers not exciting I know 20 21 22 and so on if I call numbers for each and

15
00:00:52,180 --> 00:00:56,410
I pass in a function we'll start with an anonymous function here.

16
00:00:56,830 --> 00:00:58,330
I need to give it a parameter.

17
00:00:58,420 --> 00:01:03,980
I can name this whatever I want but it is going to store it will represent one element at a time.

18
00:01:04,420 --> 00:01:10,200
So the very first time for each runs the first iteration it will call whatever I have here.

19
00:01:10,300 --> 00:01:13,370
This function and it will pass in the value of 20.

20
00:01:13,540 --> 00:01:15,990
So I'll go with NUM or n.

21
00:01:16,180 --> 00:01:20,020
It doesn't matter element l something descriptive.

22
00:01:20,020 --> 00:01:27,610
And then I'll use num in here we'll start really simple will console that log NUM and if I run this

23
00:01:27,610 --> 00:01:31,090
code there we go 20 21 all the way to twenty seven.

24
00:01:31,720 --> 00:01:32,430
So for each.

25
00:01:32,430 --> 00:01:39,520
Calls this function however many times it needs to and it passes each element in one at a time.

26
00:01:39,760 --> 00:01:45,290
So we could also do consider that log Num Times to just as a quick example here and we get forty forty

27
00:01:45,290 --> 00:01:46,470
two forty four.

28
00:01:46,600 --> 00:01:47,890
Great.

29
00:01:47,890 --> 00:01:54,690
We could have also written a function ahead of time let's do print double.

30
00:01:54,700 --> 00:01:55,440
Let's do triple.

31
00:01:55,440 --> 00:01:57,710
Just to have something a little different.

32
00:01:58,150 --> 00:02:05,240
And it will accept a single number we'll call it n and it will cancel that log and times three.

33
00:02:05,290 --> 00:02:09,310
So now I have a standalone function called Print triple.

34
00:02:09,310 --> 00:02:15,960
And I can call numbers dot for each and pass in print triple.

35
00:02:16,300 --> 00:02:16,930
Just like that.

36
00:02:17,620 --> 00:02:19,710
So this is accomplishing the same thing.

37
00:02:19,720 --> 00:02:24,600
Well we're tripling here instead of doubling but it's the same idea numbers that for each.

38
00:02:24,640 --> 00:02:27,400
This function we're telling for each.

39
00:02:27,400 --> 00:02:31,120
Here's the function I want you to call for each element.

40
00:02:31,120 --> 00:02:40,260
So internally it would call print triple with 20 and then afterwards 21 and then afterwards 22.

41
00:02:40,420 --> 00:02:44,080
And it does it until it hits the end of the array.

42
00:02:44,230 --> 00:02:51,190
So if we double check this one now we get print triple 0 comment this out so we can just see it on its

43
00:02:51,190 --> 00:02:51,840
own.

44
00:02:51,850 --> 00:02:52,300
There we go.

45
00:02:52,300 --> 00:02:52,830
60.

46
00:02:52,840 --> 00:02:55,690
Down to eighty one twenty times three sixty.

47
00:02:55,690 --> 00:02:58,300
Twenty seven times three is eighty one.

48
00:02:58,300 --> 00:03:02,930
So two different ways of using for each javascript doesn't care.

49
00:03:02,940 --> 00:03:04,330
They're both functions.

50
00:03:04,360 --> 00:03:08,920
The main difference is that this is a function we can reuse if we needed to.

51
00:03:09,070 --> 00:03:14,710
Which is great but a lot of the time with for each and a lot of these methods we'll see in this section

52
00:03:15,190 --> 00:03:20,140
you're just trying to get some code to run you don't care about having a name for that function being

53
00:03:20,140 --> 00:03:21,400
able to reuse it.

54
00:03:21,400 --> 00:03:23,360
It's just a one time thing.

55
00:03:23,380 --> 00:03:28,870
So in that case you would use an anonymous function or it would make sense to at least you don't have

56
00:03:28,870 --> 00:03:29,740
to.

57
00:03:29,800 --> 00:03:33,590
So we pass in that function it's called Let's do another example here.

58
00:03:33,610 --> 00:03:37,980
I have a more complex array where each element is an object.

59
00:03:37,990 --> 00:03:40,460
Let's say I want to print out every title.

60
00:03:40,480 --> 00:03:41,560
We'll just start with that.

61
00:03:41,680 --> 00:03:44,480
I want to print each title using for each.

62
00:03:44,530 --> 00:03:52,930
I would call books which is the name of the array dot for each function and we'll call this place holder

63
00:03:52,930 --> 00:04:00,370
this parameter B or book it represents one element in that array which in our case happens to be an

64
00:04:00,400 --> 00:04:02,910
object and then to print the title.

65
00:04:02,920 --> 00:04:10,600
I would just cancel that log book dot title and let's do dot to uppercase.

66
00:04:10,600 --> 00:04:15,340
So if I refresh we now get four different book titles in all caps.

67
00:04:15,340 --> 00:04:18,360
So for each is going to pass in each element.

68
00:04:18,370 --> 00:04:20,770
In this case the element is an object.

69
00:04:20,770 --> 00:04:26,110
It's not a single number like we had earlier it's a whole object and then we can do whatever we want

70
00:04:26,110 --> 00:04:27,150
in here.

71
00:04:27,160 --> 00:04:33,070
Now you might be thinking this doesn't seem that useful because we have things like for loops or for

72
00:04:33,070 --> 00:04:36,340
of I could do the exact same thing using a four.

73
00:04:36,370 --> 00:04:46,000
So I would do four let book of books control that log and I'll just copy that line over will comment

74
00:04:46,030 --> 00:04:49,450
this one out and we get the same output.

75
00:04:49,450 --> 00:04:51,400
And you're right this works.

76
00:04:51,550 --> 00:04:52,720
It is different.

77
00:04:52,720 --> 00:04:58,090
This is not identical obviously the syntax is different but the key difference as far as javascript

78
00:04:58,090 --> 00:04:59,340
is concerned is here.

79
00:04:59,350 --> 00:05:04,440
We have a function that's being called this is just a block that doesn't really mean much.

80
00:05:04,480 --> 00:05:08,150
In this example but I just want you to understand there is a difference.

81
00:05:08,230 --> 00:05:13,800
So yeah you could use a for of loop for each has been around much longer than four.

82
00:05:14,140 --> 00:05:16,750
So we used to not have this option at all.

83
00:05:16,750 --> 00:05:21,220
We had a regular for loop for let ie equals zero.

84
00:05:21,300 --> 00:05:24,870
I is less than book book stout length.

85
00:05:25,150 --> 00:05:27,100
I plus plus.

86
00:05:27,670 --> 00:05:36,130
And then we would cancel this out but we don't have book we would have to do books of I got title to

87
00:05:36,200 --> 00:05:42,740
uppercase and this would give us the same thing but it's just nicer in my opinion to do a for each or

88
00:05:42,740 --> 00:05:48,850
a for of where we don't have to use IE if we don't care about the index we're not using the index except

89
00:05:48,880 --> 00:05:53,280
to access each element then why use it.

90
00:05:53,290 --> 00:05:56,540
So for each was the alternative we use for a long time.

91
00:05:56,650 --> 00:06:02,430
People still use for each but we also now have four of you can use it to achieve the same end.

92
00:06:02,440 --> 00:06:06,400
So here are all three versions doing the same thing.

93
00:06:06,850 --> 00:06:09,430
Now there's one other thing to know about for each.

94
00:06:09,460 --> 00:06:16,510
We can also add a second parameter to our callback to the function here if we want to use the index.

95
00:06:16,510 --> 00:06:21,880
So if I wanted to print out each actually let's do it up here instead of books let's go back to numbers

96
00:06:23,200 --> 00:06:27,720
if I wanted to print out the index and then the no using a for each.

97
00:06:27,770 --> 00:06:33,740
I could do numbers for each pass in my callback.

98
00:06:33,740 --> 00:06:37,610
We'll call this numb and then the second parameter.

99
00:06:37,610 --> 00:06:44,660
This is how for each works the second parameter will be the index which we can call eye I.D. X index

100
00:06:45,140 --> 00:06:54,250
and we'll just do a simple console that lug index comma num we run it and then we go zero element is

101
00:06:54,250 --> 00:07:00,130
20 element 1 21 all the way down to element 7 twenty seven.

102
00:07:00,400 --> 00:07:01,230
So this is nice.

103
00:07:01,240 --> 00:07:04,030
If you need the index sometimes you do.

104
00:07:04,030 --> 00:07:05,380
You could use a for each.

105
00:07:05,380 --> 00:07:07,320
There's not an easy way to get an index.

106
00:07:07,330 --> 00:07:12,760
If you're using a regular four up although if you use a regular for loop you definitely can't get it.

107
00:07:12,760 --> 00:07:19,510
You have to generate it yourself using you know I and I less than whatever I plus plus with for each.

108
00:07:19,600 --> 00:07:21,660
You get the index for free.

109
00:07:21,940 --> 00:07:29,260
So what's happening here is that this function is being called each time for one element and for each

110
00:07:29,260 --> 00:07:33,510
is passing in it not only the element but it passes in the index.

111
00:07:33,610 --> 00:07:37,870
And if you don't use that index it's still being passed in for each.

112
00:07:37,870 --> 00:07:42,840
Is just saying here's the number or here's the element and here's the index for that element.

113
00:07:43,060 --> 00:07:43,930
You can ignore it.

114
00:07:44,020 --> 00:07:47,910
You don't have to accept it or do anything with it but it's going to be passed in.

115
00:07:47,950 --> 00:07:52,390
And so if you want it you can capture it as a parameter.

116
00:07:52,390 --> 00:07:52,590
All right.

117
00:07:52,600 --> 00:07:54,000
So that's for each.

118
00:07:54,040 --> 00:08:00,520
Again it's the simplest of these methods we'll see it accepts a callback and it runs that callback once

119
00:08:00,520 --> 00:08:06,190
per element in the array where that elements value will be an argument to the callback.
