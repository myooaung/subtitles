WEBVTT
1
00:00:00.900 --> 00:00:02.880
Well our entire authentication flow works.

2
00:00:02.880 --> 00:00:07.000
But like I mentioned the end of the last video there's a very large security issue inside of our code

3
00:00:07.000 --> 00:00:08.220
base right now.

4
00:00:08.220 --> 00:00:12.640
So in this video we're going to discuss exactly what the security issue is and how to fix it.

5
00:00:12.690 --> 00:00:15.570
So let's take a look inside of my project directory.

6
00:00:15.570 --> 00:00:20.510
I'm going to open up the users dot just on file so inside of here we have a couple of different users

7
00:00:20.520 --> 00:00:26.960
we have created by logging into our application the big issue is an every single case we are storing

8
00:00:27.020 --> 00:00:29.780
the passwords that were provided in plain text.

9
00:00:30.080 --> 00:00:36.620
So in other words if some malicious user ever somehow got access to this user Scott JS on file and saw

10
00:00:36.650 --> 00:00:43.160
everything inside of it it would instantly know the email and the entire password of every user inside

11
00:00:43.220 --> 00:00:44.530
of our project.

12
00:00:44.720 --> 00:00:48.640
And that might not sound like a big issue in the context of our project because hey.

13
00:00:48.670 --> 00:00:51.620
So what they got all of our passwords what do we really care.

14
00:00:51.620 --> 00:00:55.130
This is kind of a test project anyways.

15
00:00:55.180 --> 00:00:59.920
The reason that this is a problem is that many users out there decide to use the same email and password

16
00:00:59.920 --> 00:01:02.880
combination for a variety of different services.

17
00:01:02.890 --> 00:01:07.960
So even though they might be signing into our e commerce application with like test one at test dot

18
00:01:07.960 --> 00:01:11.010
com and password and that might not seem like a big deal.

19
00:01:11.020 --> 00:01:15.760
Well that user might have the same log in credentials for their bank account as well.

20
00:01:15.760 --> 00:01:20.990
And so if some malicious user got access to this information they could take every email password combination

21
00:01:20.990 --> 00:01:26.470
site of here and go try to log on to some bank account and then eventually chances are they're going

22
00:01:26.470 --> 00:01:31.480
to find some account information that will work to access a bank account and that malicious user might

23
00:01:31.480 --> 00:01:39.190
clear out that user's bank balance you get the idea so in general we never ever under any scenario store

24
00:01:39.190 --> 00:01:42.400
passwords in plain text as we are currently doing.

25
00:01:42.400 --> 00:01:47.290
So in this video we're going to figure out how we can somehow store passwords but in a different format

26
00:01:47.600 --> 00:01:53.240
it will still allow us to validate a password whenever a user is trying to sign an SO to understand

27
00:01:53.270 --> 00:01:57.270
how we're going to do this we're going to first take a look at a very small side topic.

28
00:01:57.380 --> 00:01:57.770
Here we go.

29
00:01:57.770 --> 00:02:03.140
Quick diagram so we're going to discuss something called a hashing algorithm.

30
00:02:03.140 --> 00:02:05.930
There are many different hashing algorithms in existence.

31
00:02:05.930 --> 00:02:11.060
These are all different functions implemented in a variety of different computer programming languages.

32
00:02:11.090 --> 00:02:16.190
The goal of a hashing algorithm is to take a string and it based upon the letters inside that string

33
00:02:16.490 --> 00:02:20.110
spit out a random series of numbers and letters.

34
00:02:20.120 --> 00:02:24.410
Now it might appear that these are random numbers and letters but there's a very important property

35
00:02:24.470 --> 00:02:31.360
about this hashing algorithm if we ever put in the same exact string to a hashing algorithm twice.

36
00:02:31.500 --> 00:02:34.890
We're always going to get the exact same output back.

37
00:02:34.890 --> 00:02:40.350
So in other words if I take my password and I run a given hash algorithm a hundred times or a thousand

38
00:02:40.350 --> 00:02:46.410
times as long as the input string is still my password I'm always going to get back this exact series

39
00:02:46.410 --> 00:02:52.690
of characters we can test out some different hashing algorithms very quickly by doing a quick google

40
00:02:52.690 --> 00:02:53.650
search.

41
00:02:53.860 --> 00:02:57.010
You can search for something like SHA 256 calculator

42
00:02:59.820 --> 00:03:05.820
the words SHA 256 is the name of a popular hash and algorithm so you can find basically any results

43
00:03:05.850 --> 00:03:11.070
on here any search results click it and you'll probably see an interface like this one right here on

44
00:03:11.070 --> 00:03:16.350
the right hand side for this very particular tool are a variety of different hashing algorithms.

45
00:03:16.350 --> 00:03:18.240
So we're taking a look at a very particular one.

46
00:03:18.240 --> 00:03:24.270
Like I said called SHA 256 so inside this thing we could type in some text input so I got to put in

47
00:03:24.600 --> 00:03:30.210
my password and as soon as I do you can either click on auto update or click on the hash button manually

48
00:03:30.740 --> 00:03:36.040
and you're going to see the hashed output of our string now like I said the important thing to understand

49
00:03:36.040 --> 00:03:40.810
here is that no matter how many times we attempt to run this hashing algorithm on the string we're always

50
00:03:40.810 --> 00:03:42.500
going to get the same exact output.

51
00:03:42.520 --> 00:03:45.290
So long as it is the same input.

52
00:03:45.310 --> 00:03:51.370
So for example if I highlight my password right here and cut it out and then paste my password back

53
00:03:51.370 --> 00:03:53.620
in I'm going to get the exact same string.

54
00:03:53.650 --> 00:03:56.290
So notice out of that is 8 9 0.

55
00:03:56.290 --> 00:04:03.010
I'll do it again I'll cut paste I see 8 9 0 0 delete the D at the end and then put the DB back and I

56
00:04:03.010 --> 00:04:04.840
see 8 9 0.

57
00:04:04.990 --> 00:04:10.300
So no matter how many times I run this algorithm with that same string I always get the exact same output

58
00:04:12.340 --> 00:04:17.560
another important attribute of hashing algorithms is that if I make even a very small change to its

59
00:04:17.560 --> 00:04:21.930
original string the out hashed output is going to be very significantly different.

60
00:04:22.060 --> 00:04:25.980
So it's not going to be just like the last couple of characters or change or something like that.

61
00:04:26.020 --> 00:04:31.600
Instead if I say delete the d off the very end I see just about every single character inside there

62
00:04:31.600 --> 00:04:33.130
has changed.

63
00:04:33.130 --> 00:04:38.340
If I take off the art now I see once again every single character just about has changed.

64
00:04:38.340 --> 00:04:45.900
Again another important attribute of hashing algorithms is that they do not work in reverse.

65
00:04:45.940 --> 00:04:52.690
So in other words if I hash the string my password and get out 8 9 0 blah blah blah like so I cannot

66
00:04:52.690 --> 00:04:58.420
somehow take this output throw it back into the algorithm and get my password back.

67
00:04:58.450 --> 00:05:00.310
So in other words this doesn't work.

68
00:05:00.310 --> 00:05:05.200
I can't take the hashed output copy paste it throw it into the hashing algorithm and expect to receive

69
00:05:05.230 --> 00:05:06.790
back by password.

70
00:05:06.980 --> 00:05:10.360
There is absolutely zero feasible way right now.

71
00:05:10.420 --> 00:05:14.350
At some point time in the future once computers are powerful enough it is possible that some of these

72
00:05:14.350 --> 00:05:17.680
different hashing algorithms can be ran in reverse.

73
00:05:17.740 --> 00:05:22.510
Right now there is no feasible way to take like that string right there and somehow plug it into an

74
00:05:22.510 --> 00:05:28.420
algorithm and get the original string back out you can once again verify this very quickly by running

75
00:05:28.830 --> 00:05:35.330
the hashing algorithm on my password and taking the hashed output and throwing it in as the input I

76
00:05:35.330 --> 00:05:37.180
don't get some like magic string coming out.

77
00:05:37.190 --> 00:05:42.740
Instead I just get another hashed output because now I'm computing a hash on it that input string right

78
00:05:42.740 --> 00:05:43.260
there.

79
00:05:44.260 --> 00:05:48.940
So all these different properties come together in a very useful way when it comes to storing passwords

80
00:05:48.940 --> 00:05:50.070
securely.

81
00:05:50.120 --> 00:05:56.260
Let's discuss how we can use this idea of a hashing algorithm to securely store a password so the entire

82
00:05:56.260 --> 00:06:00.640
idea here is that we never actually store the user's password at all.

83
00:06:00.640 --> 00:06:04.650
Instead we store the hashed output of the user's password.

84
00:06:04.870 --> 00:06:07.660
So in this diagram we start off at the top left hand side.

85
00:06:07.660 --> 00:06:13.020
A user is going to sign up to our application and we can imagine that they put in a password of my password

86
00:06:13.930 --> 00:06:19.100
were then going to run that password through a hashing algorithm and we're going to get out something

87
00:06:19.100 --> 00:06:22.530
like that hashed out put right there in 90 0 blah blah blah.

88
00:06:22.610 --> 00:06:25.430
That is what we're going to store inside of our database.

89
00:06:25.490 --> 00:06:30.350
So with just that hash right there alone there's no way that someone can take that and somehow figure

90
00:06:30.350 --> 00:06:36.400
out by reversing the hashing algorithm what the original password was.

91
00:06:36.400 --> 00:06:41.500
So now if a user comes back to our application like let's say a week later and tries to sign in in order

92
00:06:41.500 --> 00:06:46.690
to verify whether or not they've provided the correct password we're going to receive whatever password

93
00:06:46.690 --> 00:06:51.310
the user is trying to sign in with we're then going to run the password that they just applied through

94
00:06:51.310 --> 00:06:55.960
our hashing algorithm once again and then we're going to get the hashed output.

95
00:06:55.960 --> 00:06:57.610
Now here's the important part.

96
00:06:57.850 --> 00:07:03.400
We have a copy of the hash power password inside the database and we've got a copy of the hash password

97
00:07:03.730 --> 00:07:06.150
that the user just supplied to us.

98
00:07:06.220 --> 00:07:08.710
So we're then going to do a little comparison.

99
00:07:08.710 --> 00:07:14.590
We're gonna say okay if these two hashed passwords actually match then the correct password must have

100
00:07:14.590 --> 00:07:21.030
just been supplied by the user when they were trying to sign in that's a key to all this rather than

101
00:07:21.030 --> 00:07:22.240
storing the original password.

102
00:07:22.260 --> 00:07:27.630
Store the hashed outputs then when the user tries to sign again hash the password that they just provided

103
00:07:27.890 --> 00:07:30.480
compared the original one with the one that was just applied.

104
00:07:30.540 --> 00:07:36.870
If they're the same the same password must have been supplied both times okay.

105
00:07:36.910 --> 00:07:40.370
So now we have better idea of why we're going to hash a password.

106
00:07:40.390 --> 00:07:43.930
There is one little side corner case to be aware of that.

107
00:07:44.020 --> 00:07:50.410
Well some malicious user could still a run on this process right here and try to figure out exactly

108
00:07:50.410 --> 00:07:51.730
what a user's password is.

109
00:07:51.760 --> 00:07:54.840
It's not super evident by just looking at what we've put together so far.

110
00:07:54.910 --> 00:07:56.160
So let's take a quick pause.

111
00:07:56.200 --> 00:08:00.710
We're gonna look at another diagram and you're going to see another security hole inside this process.

112
00:08:00.720 --> 00:08:04.600
We're going to have to figure out how to patch up as well so quick pause and I'll see you in just a

113
00:08:04.600 --> 00:08:04.960
minute.
