WEBVTT
1
00:00:00.240 --> 00:00:04.460
In this video I won't be covering any new syntax or features that we haven't seen.

2
00:00:04.470 --> 00:00:10.590
I just want to give us some practice and a little bit of time to talk about objects methods designing

3
00:00:10.590 --> 00:00:16.050
our code why we might want to use objects with methods and comparing that to different approaches that

4
00:00:16.050 --> 00:00:18.380
we've already seen so early in the course.

5
00:00:18.390 --> 00:00:19.890
When we're talking about functions.

6
00:00:19.890 --> 00:00:25.890
We had a functions exercise where I asked you to make a function called it was something like make deck

7
00:00:26.430 --> 00:00:32.700
and I wanted it to return a deck of cards which was an array and each element had a value like value

8
00:00:32.700 --> 00:00:37.680
of five and then a suit of hearts or diamonds or something.

9
00:00:37.680 --> 00:00:38.780
So five of hearts.

10
00:00:38.910 --> 00:00:44.250
But the deck would have fifty two of these each different right and we'd have five of hearts five of

11
00:00:44.250 --> 00:00:49.520
diamonds five of clubs and spades and then six and seven and Jack all those different cards.

12
00:00:49.560 --> 00:00:54.880
So that's the idea and we can totally use a function to do that just a standalone function.

13
00:00:54.960 --> 00:01:00.420
But what if I wanted to also have different features different functionality for my deck instead of

14
00:01:00.420 --> 00:01:02.180
just making a deck of cards.

15
00:01:02.220 --> 00:01:05.910
What if I wanted to be able to draw a single card at a time.

16
00:01:05.910 --> 00:01:08.080
Or maybe I want to have a discard pile.

17
00:01:08.130 --> 00:01:11.700
Once we draw a card we could put it in the discard pile.

18
00:01:11.700 --> 00:01:17.430
So our deck would be shrinking but then we would have the discard pile that was keeping all of the previously

19
00:01:17.430 --> 00:01:22.410
drawn cards or I could implement a shuffle so that we could shuffle the deck.

20
00:01:22.560 --> 00:01:24.320
Or what if I wanted to refill the deck.

21
00:01:24.330 --> 00:01:25.860
Start over from scratch.

22
00:01:25.890 --> 00:01:27.350
There's so many different things we could do.

23
00:01:27.360 --> 00:01:34.980
We could make a Draw method that could take an argument like draw five draw to draw one and to design

24
00:01:34.980 --> 00:01:40.710
that to actually implement it we could start with a pure function approach so I could have my make deck

25
00:01:40.710 --> 00:01:48.480
function which I need to actually call a function and then I would loop over these two variables that

26
00:01:48.480 --> 00:01:51.050
I've created already to save some time here.

27
00:01:51.060 --> 00:01:58.170
I have suits which is an array and values which I made a string instead of an array only to save a little

28
00:01:58.170 --> 00:02:04.320
bit of time because typing this as an array is really annoying having to do one and then two and put

29
00:02:04.320 --> 00:02:05.460
quotes around everything.

30
00:02:05.550 --> 00:02:13.020
And I did separate them by commas because that allows me if I come over here to do values dot split

31
00:02:13.350 --> 00:02:19.200
on the comma and get an array with the actual values.

32
00:02:19.250 --> 00:02:27.680
The reason I had to do commas instead of just doing one two three four five six seven eight nine jack

33
00:02:27.680 --> 00:02:32.380
queen king is this little guy right here 10.

34
00:02:32.450 --> 00:02:37.830
If I were to iterate over this string I would get each character one at a time and that works.

35
00:02:37.940 --> 00:02:42.230
All of these values are a single character long except for 10.

36
00:02:42.350 --> 00:02:49.340
So if I were to split if I had 10 in here or if I were to iterate over this it would do 1 and 0 I wouldn't

37
00:02:49.340 --> 00:02:50.140
actually get 10.

38
00:02:50.840 --> 00:02:56.990
So that's why I used the string with commas but I'm going to start by looping over suits my goal is

39
00:02:56.990 --> 00:03:01.850
to return an object that has a suit set to one of these suits and a value set to one of these suits

40
00:03:02.120 --> 00:03:03.400
and make them all unique.

41
00:03:03.410 --> 00:03:08.640
So we have a combination of every possible you have an instance of every possible combination.

42
00:03:08.660 --> 00:03:16.300
So for let's value of and then I'm going to do values that split on the comma.

43
00:03:16.520 --> 00:03:18.020
So that gives me this array here.

44
00:03:18.020 --> 00:03:26.450
So for every item in that array we'll also loop over suits for that suit of suits and then I'm going

45
00:03:26.450 --> 00:03:30.190
to create a deck array appear concept deck.

46
00:03:30.380 --> 00:03:38.120
We'll start empty and then in here I will call decked out push and I'll push on a new object where we

47
00:03:38.120 --> 00:03:43.270
have value set to value and suit set to suit.

48
00:03:43.490 --> 00:03:49.460
Coming from these loops but as we just saw very very recently we have a shorthand way of doing this.

49
00:03:49.580 --> 00:03:53.420
If we want the key name to be value and we have a variable called value.

50
00:03:53.480 --> 00:03:56.060
I can just put value and suit.

51
00:03:56.060 --> 00:04:00.370
All right so let's return this deck return deck.

52
00:04:00.650 --> 00:04:01.640
Run my code.

53
00:04:01.640 --> 00:04:03.010
Make deck.

54
00:04:03.200 --> 00:04:06.770
Forgot my parents and we're fifty six.

55
00:04:06.770 --> 00:04:08.370
What did I mess up here.

56
00:04:08.600 --> 00:04:09.860
Well that was stupid.

57
00:04:09.860 --> 00:04:11.440
I put Ace and won.

58
00:04:11.450 --> 00:04:12.710
There is no one card.

59
00:04:13.370 --> 00:04:14.780
So let's run it one more time.

60
00:04:14.900 --> 00:04:16.580
Hopefully you saw that before me.

61
00:04:16.580 --> 00:04:18.840
Now we have 52 cards.

62
00:04:18.870 --> 00:04:20.350
Okay so we have this function.

63
00:04:20.420 --> 00:04:22.510
Still no objects or methods involved.

64
00:04:22.610 --> 00:04:28.220
Yes we do have this object that we're creating but no methods no this none of the stuff we've been talking

65
00:04:28.220 --> 00:04:29.310
about.

66
00:04:29.390 --> 00:04:35.990
If I wanted to create a deck and then be able to draw a single card I would need to save this deck to

67
00:04:35.990 --> 00:04:36.680
a variable.

68
00:04:36.680 --> 00:04:37.650
So make a new deck.

69
00:04:37.670 --> 00:04:38.910
We'll go with concept.

70
00:04:38.930 --> 00:04:46.310
My deck equals make deck and then I need to make a new function called draw card

71
00:04:49.050 --> 00:04:51.660
and I would need to pass in the card.

72
00:04:51.660 --> 00:04:58.940
Excuse me pass passing the deck as an argument and then we draw the card so we could do.

73
00:04:59.340 --> 00:05:01.240
Let's pop from the end I guess.

74
00:05:01.500 --> 00:05:03.020
Or we could take from the beginning.

75
00:05:03.210 --> 00:05:05.310
Either one works but let's just pop one off.

76
00:05:05.610 --> 00:05:14.520
So deck dot pop and if we try it over here make decked out pop remember that pop returns the value and

77
00:05:14.520 --> 00:05:19.470
it also changes the original array so I can simply return decked out Pop.

78
00:05:21.070 --> 00:05:30.960
Okay so in order to draw a single card I make the deck and then I need to call draw card and pass in

79
00:05:31.020 --> 00:05:35.600
my deck because we need an argument here.

80
00:05:35.760 --> 00:05:43.720
So then I would save that return result to concert card 1 equals draw card and if I run it I take a

81
00:05:43.720 --> 00:05:48.380
look at card 1 we've got the ace of clubs we haven't shuffled our cards at all.

82
00:05:48.400 --> 00:05:49.750
So they're all in order.

83
00:05:49.870 --> 00:05:53.250
And then if we look at my deck it should now be fifty one items.

84
00:05:53.350 --> 00:06:04.150
So then to draw card again I have to do draw a card pass in my deck and this is not great to have to

85
00:06:04.150 --> 00:06:09.640
keep passing this around and I'm passing my deck into draw card over and over and over.

86
00:06:09.880 --> 00:06:16.540
And if I were to have a shuffle function or a refill deck or draw five I would need to keep passing

87
00:06:16.570 --> 00:06:17.790
my deck.

88
00:06:17.980 --> 00:06:24.500
I guess the alternative would be to use global variables and make a variable up top called my deck.

89
00:06:24.580 --> 00:06:31.270
My deck equals make deck and then instead of all of the functions we write we could refer to my deck

90
00:06:31.330 --> 00:06:36.610
specifically but that's even worse because then we end up with just one deck.

91
00:06:36.700 --> 00:06:43.730
I could do this concept main deck equals make deck and then I would.

92
00:06:43.730 --> 00:06:44.870
Down here.

93
00:06:45.140 --> 00:06:48.050
Rewrite draw card to just return.

94
00:06:48.230 --> 00:06:49.280
Main Deck.

95
00:06:49.340 --> 00:06:50.420
Dot pop.

96
00:06:50.420 --> 00:06:53.450
But you can imagine that this is severely limited.

97
00:06:53.450 --> 00:06:56.570
We can only have one deck main deck.

98
00:06:56.570 --> 00:07:00.170
How would I make deck 2 or second deck or fifth deck.

99
00:07:00.170 --> 00:07:03.740
I would have to write a new function that didn't depend on it.

100
00:07:03.800 --> 00:07:08.330
I would write a new one where I hardcoded in second deck so that's not a good approach.

101
00:07:08.390 --> 00:07:11.830
So the best option for now is to keep passing them around.

102
00:07:11.840 --> 00:07:14.550
Pass the deck in so that we can make a draw card.

103
00:07:14.570 --> 00:07:16.050
Somewhat modular.

104
00:07:16.160 --> 00:07:22.940
Now this is where objects come in because I can use an object to store the deck and on that object I

105
00:07:22.940 --> 00:07:29.790
can have a method called draw a card and another one called shuffle and we have access to the deck.

106
00:07:29.810 --> 00:07:36.440
Because of this the keyword this so here is how I would rewrite that I would do something like const

107
00:07:36.800 --> 00:07:44.540
deck or my deck or whatever equals an object and then I would have the property instead of calling this

108
00:07:44.540 --> 00:07:44.870
deck.

109
00:07:44.870 --> 00:07:52.180
Let's go with my deck and then make our property deck which can start as an empty array.

110
00:07:52.580 --> 00:08:00.630
Then we'll have a new method that will add in called Make deck or refill cards or something.

111
00:08:00.980 --> 00:08:03.650
But should we call it initialize cards.

112
00:08:03.680 --> 00:08:05.170
Initialize deck.

113
00:08:05.340 --> 00:08:06.410
Sure.

114
00:08:07.220 --> 00:08:10.820
And it is going to update the deck property.

115
00:08:11.090 --> 00:08:18.690
So we're grouping the data with functionality so let's just copy most of this logic over.

116
00:08:18.890 --> 00:08:24.340
Just move this over and it's not going to work right away.

117
00:08:24.340 --> 00:08:26.230
We need to change a couple of things.

118
00:08:26.290 --> 00:08:32.860
The first thing I might do is move these variables into properties on the object because we might want

119
00:08:32.860 --> 00:08:38.030
them and other methods we don't need to re declare them every time we call initialized deck.

120
00:08:38.110 --> 00:08:40.750
So I'm going to just copy this out.

121
00:08:40.750 --> 00:08:49.900
Cut it out make a property called suits and then another one called values and move that will get rid

122
00:08:49.900 --> 00:08:53.650
of that right there and then we can import them.

123
00:08:53.650 --> 00:08:58.330
We're not actually importing but we can use them in here because of this.

124
00:08:58.330 --> 00:09:02.230
So this dot suits this dot values.

125
00:09:02.230 --> 00:09:13.000
We could also just use that restructuring so concept suits common values equals this and let's also

126
00:09:13.000 --> 00:09:13.870
grab deck.

127
00:09:14.980 --> 00:09:22.020
So now every time I reference deck it's actually this deck values is this values I've just restructured

128
00:09:22.090 --> 00:09:23.620
them.

129
00:09:23.620 --> 00:09:25.810
What do I have going on here missing a comma.

130
00:09:25.810 --> 00:09:26.680
There we go.

131
00:09:27.310 --> 00:09:29.230
Okay so I have those values now.

132
00:09:29.290 --> 00:09:31.580
So for that value of value stock split.

133
00:09:31.660 --> 00:09:32.140
That's right.

134
00:09:32.140 --> 00:09:37.270
We get an array for each value we're also going to iterate over all the suits all four.

135
00:09:37.330 --> 00:09:43.030
And now I can leave this as desktop push instead of having to do this dot deck because we d structured

136
00:09:43.030 --> 00:09:44.560
it up here.

137
00:09:44.560 --> 00:09:46.600
Where are you right there.

138
00:09:46.600 --> 00:09:51.600
And then we can return the deck if we want but also we don't have to.

139
00:09:51.610 --> 00:09:54.720
We're not going to lose that deck versus here.

140
00:09:54.820 --> 00:09:57.540
We had to return the deck and save it to a variable.

141
00:09:57.580 --> 00:10:01.460
Otherwise we're just making this array and then it disappears when the function is over.

142
00:10:01.900 --> 00:10:05.680
But in our object we're actually changing the property of deck.

143
00:10:05.710 --> 00:10:07.180
We're adding to this array.

144
00:10:07.930 --> 00:10:13.560
So even if I don't return deck it still should work assuming I didn't mess something up when I copied

145
00:10:13.570 --> 00:10:14.320
it over.

146
00:10:14.320 --> 00:10:15.610
Let's see what happens now.

147
00:10:15.880 --> 00:10:18.830
I have this my deck which is an object.

148
00:10:18.910 --> 00:10:26.940
It starts with an empty array but if I call my deck dot initialized deck kind of a long name.

149
00:10:26.980 --> 00:10:27.960
Let's look at my deck.

150
00:10:27.970 --> 00:10:33.290
Now or how about just my deck dot deck.

151
00:10:33.340 --> 00:10:41.070
We have 52 cards so we successfully implemented this method that is updating the deck property.

152
00:10:41.320 --> 00:10:45.460
And now if I wanted to implement a draw method it's very easy.

153
00:10:45.580 --> 00:10:48.160
I'll just add my comma in draw card.

154
00:10:49.330 --> 00:10:51.730
And why don't we make this a little bit more exciting.

155
00:10:51.730 --> 00:10:59.680
Well we'll start with draw a single card so draw a card and we'll access this dot deck and then we'll

156
00:10:59.680 --> 00:11:04.600
pop one off and we'll return that so that we have access to the card.

157
00:11:04.600 --> 00:11:06.080
That was just drawn.

158
00:11:06.160 --> 00:11:13.120
But now we also are updating this dot deck so I don't have to pass anything around if I want to use

159
00:11:13.120 --> 00:11:13.610
it.

160
00:11:13.630 --> 00:11:22.810
I just do my deck dot and let's initialize the deck and then we'll also do my deck dots and then draw

161
00:11:22.840 --> 00:11:24.040
a single card.

162
00:11:24.040 --> 00:11:32.020
We can save this to a variable cost card oops I didn't add my parents and I'm going to get an error

163
00:11:32.230 --> 00:11:35.140
if I use concert again because they already declared card.

164
00:11:35.800 --> 00:11:37.180
Oh jeez I'm an idiot.

165
00:11:37.180 --> 00:11:38.680
We can't update cost.

166
00:11:38.710 --> 00:11:46.990
All right well let's go to a different name contest card one equals my deck dot draw card and we'll

167
00:11:46.990 --> 00:11:48.370
get card 1.

168
00:11:48.580 --> 00:11:56.770
We have that card that we drew and if we look at the deck itself my deck dot deck where are you.

169
00:11:56.770 --> 00:11:58.460
We now have fifty one cards.

170
00:11:58.510 --> 00:12:01.180
So notice we didn't have to pass an argument around.

171
00:12:01.180 --> 00:12:06.910
We didn't have to do what we did here where every time I want to draw a card I have to pass in the deck

172
00:12:06.910 --> 00:12:08.570
we're drawing it from.

173
00:12:09.070 --> 00:12:15.930
Instead we group the method with the values we put the data and the functionality in a single object.

174
00:12:15.940 --> 00:12:20.980
So now all we have to do is access this dot deck and we're updating this one object.

175
00:12:20.980 --> 00:12:26.350
This whole thing represents a deck of cards and we have different things we can do with the data.

176
00:12:26.350 --> 00:12:28.410
We can initialize it again.

177
00:12:28.570 --> 00:12:35.140
We can draw a card and let's actually add a new method that will draw multiple cards.

178
00:12:35.260 --> 00:12:42.820
And before we do that let's add a discard pile or a drawn card pile where we can keep track of the cards

179
00:12:42.820 --> 00:12:44.110
that have already been drawn.

180
00:12:45.010 --> 00:12:51.320
So instead of just returning this dot decked out pup we will pop an element off will pop a card off.

181
00:12:51.400 --> 00:12:58.090
But before we return it we'll also make sure to add it to the drawn cards so drawn cards can start as

182
00:12:58.090 --> 00:12:59.820
an empty array.

183
00:13:00.310 --> 00:13:05.320
And then here when we draw a new card we'll do this dot decked up Pop.

184
00:13:05.560 --> 00:13:11.820
But we'll push that on to the drawing cards array so we could just put this in a variable called name

185
00:13:12.220 --> 00:13:24.010
card equals this dot decked out pop and then we can do this dot drawn cards dot push card and then return

186
00:13:24.010 --> 00:13:36.610
card so now if we run it my deck out initialized deck my deck dot draw the first card we'll draw a couple.

187
00:13:36.690 --> 00:13:39.740
Now let's look at my deck.

188
00:13:39.770 --> 00:13:48.340
We have drawn cards right here and it has six elements six cards that we've drawn and now if I want

189
00:13:48.340 --> 00:13:57.790
to make a method to draw multiple cards you could just make draw cards or draw multiple which will be

190
00:13:57.790 --> 00:14:00.450
a method we'll pass in a number of cards.

191
00:14:00.520 --> 00:14:01.570
Name cards.

192
00:14:01.570 --> 00:14:08.290
Make sure to add my comma here and then I would just loop num cards times and take advantage of our

193
00:14:08.290 --> 00:14:09.370
draw card method.

194
00:14:09.370 --> 00:14:11.250
We already have.

195
00:14:11.250 --> 00:14:13.730
So let's do a regular for loop.

196
00:14:13.780 --> 00:14:16.670
For that I equals zero.

197
00:14:16.780 --> 00:14:19.090
I less than name cards.

198
00:14:19.120 --> 00:14:20.240
I plus plus.

199
00:14:21.040 --> 00:14:24.160
And then we want to call this dot draw card.

200
00:14:24.160 --> 00:14:29.290
This method here this draws a single card and adds it to the drawing cards array and it returned to

201
00:14:29.290 --> 00:14:29.900
that card.

202
00:14:30.430 --> 00:14:32.290
So we'll call that multiple times.

203
00:14:32.290 --> 00:14:35.260
But we want to return all of the cards that we're drawing.

204
00:14:35.260 --> 00:14:39.530
So if somebody says draw eight cards draw multiple of eight.

205
00:14:39.850 --> 00:14:41.120
We want to have an array.

206
00:14:41.260 --> 00:14:45.640
We'll just call this concept cards that we return.

207
00:14:45.760 --> 00:14:48.500
So we'll draw the card and push that onto cards.

208
00:14:48.600 --> 00:14:57.490
Cards not push the card that we get back from draw single card draw card and then at the end we will

209
00:14:57.490 --> 00:15:00.310
return cards.

210
00:15:00.340 --> 00:15:03.160
Let's see if that one works.

211
00:15:03.160 --> 00:15:12.900
So we have my deck dot initialized deck and then my deck dot draw multiple of four.

212
00:15:13.300 --> 00:15:15.770
We get back in array with four cards.

213
00:15:15.910 --> 00:15:17.670
Let's look at my deck.

214
00:15:17.860 --> 00:15:20.230
Does it in fact have a smaller deck.

215
00:15:20.260 --> 00:15:20.850
Yes it does.

216
00:15:20.850 --> 00:15:24.850
We're down to 48 and drawn cards has four elements.

217
00:15:24.850 --> 00:15:25.650
Cool.

218
00:15:25.670 --> 00:15:27.890
Next we'll add a shuffle method.

219
00:15:27.910 --> 00:15:34.330
Now I've gone ahead and written a simple shuffle method shuffling things is actually not as straightforward

220
00:15:34.360 --> 00:15:35.800
as you might think.

221
00:15:35.800 --> 00:15:37.500
There is a ton of ways of doing it.

222
00:15:37.720 --> 00:15:42.760
And sometimes you run into issues with randomness and random numbers not being as random as they should

223
00:15:42.760 --> 00:15:43.450
be.

224
00:15:43.450 --> 00:15:46.960
So this is not by any means the best shuffle that there ever is.

225
00:15:46.960 --> 00:15:49.670
But I want to walk through how it works in like 30 seconds.

226
00:15:49.690 --> 00:15:52.740
This is an algorithm called the Fisher Yates shuffle.

227
00:15:52.750 --> 00:15:59.290
It's used to shuffle an array and I'm going to console that log in this loop the array that we pass

228
00:15:59.290 --> 00:16:01.430
in so you can see how it works.

229
00:16:01.480 --> 00:16:07.190
I'm going to call shuffle on this array of strings and we can see what happens each step of the way.

230
00:16:07.360 --> 00:16:09.970
So we loop over the array backwards.

231
00:16:09.970 --> 00:16:11.530
We start at the end of the array.

232
00:16:11.650 --> 00:16:13.760
So the original array looks like this.

233
00:16:13.810 --> 00:16:21.810
So we're starting with F and then we pick a random index before F so any of these and we swap the two.

234
00:16:21.820 --> 00:16:24.810
So the choice that was made the first time through is B.

235
00:16:24.940 --> 00:16:32.140
So we swapped F and B and then the loop moves on to this letter E or this index and we swap it with

236
00:16:32.140 --> 00:16:38.620
something before it we pick a random index between zero and whatever this index is and we swap.

237
00:16:38.710 --> 00:16:41.360
So we swapped with C that time.

238
00:16:41.410 --> 00:16:43.440
So then we move on to this index.

239
00:16:43.690 --> 00:16:47.680
And so we're shuffling it from the back moving towards the front.

240
00:16:47.800 --> 00:16:51.380
We swap with some random index before and then we move on.

241
00:16:51.460 --> 00:16:54.510
We swap something before move on and we end up with this.

242
00:16:54.520 --> 00:16:57.670
And if I call it again we'll likely get something different.

243
00:16:57.820 --> 00:16:59.040
As you can see there.

244
00:16:59.190 --> 00:17:05.290
So not the focus so much of this video but here is a simple implementation if you want definitely look

245
00:17:05.290 --> 00:17:07.330
into more complex implementations.

246
00:17:07.330 --> 00:17:13.630
It's it's kind of fun different ways of shuffling but I'll just add some quick notes loop over array

247
00:17:13.630 --> 00:17:25.560
backwards and then here pick random index before current elements and then swap.

248
00:17:25.660 --> 00:17:32.900
Now this right here is a nice shorthand way of swapping elements using these structuring to want to

249
00:17:32.920 --> 00:17:36.990
get too sidetracked here but I'll show it to you briefly if we have this array from earlier.

250
00:17:37.000 --> 00:17:38.700
We'll call it letters.

251
00:17:39.070 --> 00:17:51.000
If I run this line let's do letters of zero comma letters of how about three.

252
00:17:51.000 --> 00:18:03.180
So that should be a and d equals and then do the inverse letters of three comma letters of zero.

253
00:18:03.240 --> 00:18:06.570
What this will do is swap out elements in place.

254
00:18:06.570 --> 00:18:14.700
And if we look at letters now D is now where a used to be and a is now where D used to be the shuffle

255
00:18:14.700 --> 00:18:20.400
is not really the focus of the video but in order to make our deck slightly more useful we should add

256
00:18:20.400 --> 00:18:20.900
shuffle.

257
00:18:21.090 --> 00:18:26.790
So let's go ahead and do it we'll add in our method shuffle which I need to change and a couple different

258
00:18:26.790 --> 00:18:27.090
ways.

259
00:18:27.090 --> 00:18:31.500
First I need to make it a valid method on our object.

260
00:18:31.500 --> 00:18:33.670
I'm not going to pass in an array.

261
00:18:33.780 --> 00:18:35.790
It should just shuffle the deck.

262
00:18:35.790 --> 00:18:36.440
Right.

263
00:18:36.450 --> 00:18:38.070
It shouldn't shuffle an array.

264
00:18:38.070 --> 00:18:39.360
We pass in.

265
00:18:39.360 --> 00:18:45.120
So anytime I have that reference to a R I'm going to replace it with deck.

266
00:18:45.150 --> 00:18:47.250
So I mean a d structure deck.

267
00:18:47.360 --> 00:18:55.650
This I don't know why I'm writing this backwards concept deck equals this.

268
00:18:55.680 --> 00:19:02.950
So that is d structuring the deck out of this and then we're going to replace array that time.

269
00:19:02.970 --> 00:19:06.640
There they are there with deck.

270
00:19:06.810 --> 00:19:09.810
So now we have a shuffle method this deck.

271
00:19:09.810 --> 00:19:11.510
We don't have to pass anything in.

272
00:19:11.580 --> 00:19:13.030
Let's make sure it works.

273
00:19:13.110 --> 00:19:16.710
So my deck got initialized deck.

274
00:19:16.710 --> 00:19:23.230
And as we've already seen the way we built the initialize is that it just puts them all in order.

275
00:19:23.230 --> 00:19:23.790
So we have.

276
00:19:24.630 --> 00:19:24.980
What is it.

277
00:19:24.980 --> 00:19:28.340
Two of hearts and then three of hearts and then four of hearts.

278
00:19:28.340 --> 00:19:29.490
Or do I do it backwards.

279
00:19:29.490 --> 00:19:31.610
I think we have two of hearts Two of diamonds two of spades.

280
00:19:31.890 --> 00:19:32.860
But let's just look.

281
00:19:32.970 --> 00:19:35.330
So we do my deck deck.

282
00:19:36.150 --> 00:19:41.010
Open this up and we have all the twos all the threes the fours.

283
00:19:41.430 --> 00:19:45.270
So let's shuffle my deck dot shuffle.

284
00:19:45.270 --> 00:19:47.300
Fingers crossed you didn't mess anything up.

285
00:19:47.430 --> 00:19:53.170
Let's look at my deck and open up deck.

286
00:19:53.170 --> 00:19:54.100
There we go.

287
00:19:54.100 --> 00:19:55.330
Totally shuffled.

288
00:19:55.330 --> 00:19:55.960
Awesome.

289
00:19:56.050 --> 00:20:01.570
So hopefully you can see from this example that putting our code in an object is not something we always

290
00:20:01.570 --> 00:20:02.200
need to do.

291
00:20:02.200 --> 00:20:03.310
It's not the end all be all.

292
00:20:03.370 --> 00:20:08.350
There's lots of these different patterns out there for organizing your code or for structuring designing

293
00:20:08.470 --> 00:20:09.730
your code.

294
00:20:09.730 --> 00:20:15.420
This is just one option where we put things in an object and this is still a very very simple version.

295
00:20:15.430 --> 00:20:22.150
There are other patterns we'll talk about once we get to prototypes once we talk about creating constructor

296
00:20:22.150 --> 00:20:28.180
functions and working with JavaScript classes which is all coming later on but this is this is still

297
00:20:28.180 --> 00:20:28.720
nice right.

298
00:20:28.750 --> 00:20:30.530
We don't have to pass anything around.

299
00:20:30.700 --> 00:20:32.680
I will quickly I'll fast forward through this.

300
00:20:32.680 --> 00:20:37.960
You don't have to watch but I will read implement all of this outside of an object and show you how

301
00:20:37.960 --> 00:20:43.400
we would achieve the exact same thing and we can compare how ugly the code is or isn't.

302
00:20:43.450 --> 00:20:43.690
All right.

303
00:20:43.690 --> 00:20:49.420
So we took our objects from down here that we created my deck and I rewrote it as just standalone functions.

304
00:20:49.480 --> 00:20:51.370
So we have our initialized deck.

305
00:20:51.370 --> 00:20:56.550
This used to be called Make deck but I renamed it just to match what we have in our object initialized

306
00:20:56.610 --> 00:21:00.820
deck created the the deck of cards in order.

307
00:21:00.820 --> 00:21:07.240
Then I have draw card and we need to pass in the deck and if we want to keep track of the drawn cards

308
00:21:07.270 --> 00:21:12.220
the cards that have already been drawn from the deck we need to pass in a second array called drawing

309
00:21:12.220 --> 00:21:12.970
cards.

310
00:21:12.970 --> 00:21:18.520
If I want to draw multiple I need to pass in the number of cards to draw the deck to draw from in the

311
00:21:18.520 --> 00:21:23.680
array to put the drawn cards in that pile of cards that have already been drawn.

312
00:21:24.660 --> 00:21:27.050
For shuffle and into passing the deck.

313
00:21:27.150 --> 00:21:33.330
So here's what it looks like when I start using it I'll have things like draw multiple pass in the number

314
00:21:33.330 --> 00:21:39.480
of cards to draw the deck the array that I'm drawing from and the drawing cards array that I've made

315
00:21:39.480 --> 00:21:41.700
an empty array called drawing cards.

316
00:21:41.790 --> 00:21:46.770
So every time I want to draw a card I mean I have to pass in all of these arguments if I want to get

317
00:21:46.770 --> 00:21:51.380
a new hand let's call it const poker hand equals.

318
00:21:51.440 --> 00:21:53.440
I guess most poker hands are five cards.

319
00:21:53.550 --> 00:21:56.600
Let's go with blackjack.

320
00:21:56.770 --> 00:22:02.600
I was going to say how it's going all right B.J. hand but that might not be.

321
00:22:02.890 --> 00:22:03.730
Hmm.

322
00:22:04.110 --> 00:22:12.600
I guess we'll go with poker hand equals draw multiple I guess we can draw two for each of these and

323
00:22:12.600 --> 00:22:14.790
then our poker hand will draw five.

324
00:22:14.880 --> 00:22:19.660
We need to pass in the deck that I made up here and the drawn cards array.

325
00:22:19.830 --> 00:22:26.820
So this gets pretty tiresome not to mention if I want another deck it's really annoying because I'm

326
00:22:26.820 --> 00:22:31.650
going to have to keep making these variables and I'm gonna have to keep track of them and pass in the

327
00:22:31.650 --> 00:22:33.020
correct drawn cards.

328
00:22:33.030 --> 00:22:34.260
I have two different decks.

329
00:22:34.260 --> 00:22:37.820
I'll have one drawn cards array for one deck and a second one.

330
00:22:37.920 --> 00:22:43.870
We haven't seen how we can use our object and use it to make multiple decks from it.

331
00:22:44.010 --> 00:22:45.700
So we'll get to that in the next video.

332
00:22:45.720 --> 00:22:47.500
But for now here we go.

333
00:22:47.580 --> 00:22:48.830
This is one approach.

334
00:22:48.900 --> 00:22:54.670
No objects except for the actual cards themselves which are an object with a value in a suit.

335
00:22:54.690 --> 00:22:57.240
Everything else is functions or passing things around.

336
00:22:57.360 --> 00:22:59.750
It gets kind of annoying but let's take a look.

337
00:22:59.790 --> 00:23:01.460
Make sure it all works.

338
00:23:01.620 --> 00:23:07.590
We've got our deck has 43 cards left because we drew nine of them.

339
00:23:07.590 --> 00:23:11.260
If we look at hand one it has two cards.

340
00:23:11.430 --> 00:23:15.520
Also the deck should be shuffled because I called it right called shuffle.

341
00:23:15.690 --> 00:23:23.160
If we look at poker hand it has five cards and if we look at drawn cards it should have nine cards so

342
00:23:23.160 --> 00:23:24.610
that's all great.

343
00:23:24.660 --> 00:23:31.920
Now down to our object version to do the exact same thing we just see what we did we drew to two and

344
00:23:31.920 --> 00:23:34.510
then five to replicate that.

345
00:23:34.770 --> 00:23:48.360
We would call my deck dot initialized deck my deck dot shuffle my deck dot draw multiple and we'll do

346
00:23:48.360 --> 00:23:57.180
two and we can save that to a variable concept we'll call it each one for a hand 1 h 2 to draw 2 and

347
00:23:57.180 --> 00:24:01.340
then each 3 will draw 5 and that's it.

348
00:24:01.350 --> 00:24:05.470
We don't have to keep passing a bunch of arguments in afterwards like we did here.

349
00:24:05.550 --> 00:24:11.460
It's a lot easier because all of the relevant information all the values are stored together in my deck.

350
00:24:11.520 --> 00:24:15.800
I don't have to manage the drawn cards versus the deck array.

351
00:24:16.050 --> 00:24:17.160
I have it together.

352
00:24:17.220 --> 00:24:19.640
It's all here versus in this example.

353
00:24:19.650 --> 00:24:23.200
I have to keep track of drawn cards myself pass it around.

354
00:24:23.340 --> 00:24:24.430
It's just not ideal.

355
00:24:24.480 --> 00:24:31.260
So I recognize this has been extremely long and probably not the most enthralling video I've ever made

356
00:24:31.680 --> 00:24:37.560
but it gets at some very important stuff that using objects is a great way of organizing your code of

357
00:24:37.560 --> 00:24:44.010
grouping content together or a better way of saying it is grouping values with functionality things

358
00:24:44.070 --> 00:24:50.550
with actions and we group them together in a logical way where we can start writing our methods or functions

359
00:24:50.610 --> 00:24:56.520
in a clean syntax where I don't have to pass a bunch of stuff in I don't have to save everything to

360
00:24:56.520 --> 00:25:00.750
a new variable because everything is done on the object itself.

361
00:25:00.840 --> 00:25:05.810
The object stores those values and then these methods act upon those values.

362
00:25:05.910 --> 00:25:08.030
Thanks to our good friend this.

363
00:25:08.250 --> 00:25:11.520
Next up we'll see how we can create multiple decks.

364
00:25:11.520 --> 00:25:18.370
Right now I'm stuck with one deck that is probably the big disadvantage to what we saw up here.

365
00:25:18.450 --> 00:25:21.940
Here I can make another deck at any point by just calling initialize deck.

366
00:25:21.960 --> 00:25:24.150
I still have to write a bunch of code to get the deck.

367
00:25:24.180 --> 00:25:28.920
Make a new drawing cards shuffle the second deck but I can do it.

368
00:25:28.920 --> 00:25:30.690
Here we have one object.

369
00:25:30.690 --> 00:25:32.490
So how do we make another one of these.

370
00:25:32.490 --> 00:25:33.480
That's what we'll see next.
