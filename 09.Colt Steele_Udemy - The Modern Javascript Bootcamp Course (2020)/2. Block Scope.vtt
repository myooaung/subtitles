WEBVTT
1
00:00:00.150 --> 00:00:05.400
In the last video we talked about function scope where if we declare a variable with any keyword whether

2
00:00:05.400 --> 00:00:10.770
it's let const or var within a given function it is scoped to that function.

3
00:00:10.770 --> 00:00:13.880
We don't have access to it outside that function.

4
00:00:13.890 --> 00:00:18.630
Now we're going to see a different type of scope which is called block scope and it doesn't necessarily

5
00:00:18.630 --> 00:00:21.510
have to do with functions at least not directly.

6
00:00:21.510 --> 00:00:26.060
But I did mention at the beginning of the section we would cover some function adjacent content.

7
00:00:26.210 --> 00:00:30.720
And if you think back to one of the very first videos in the courts when I introduced Letten concept

8
00:00:30.840 --> 00:00:34.050
and also var I said we would come back later on.

9
00:00:34.080 --> 00:00:34.560
That's right.

10
00:00:34.560 --> 00:00:41.490
Now to discuss one of the main distinctions between letting const compared to var so this is it block

11
00:00:41.490 --> 00:00:42.150
scope.

12
00:00:42.150 --> 00:00:46.640
This is a very very important concept around how variables work in javascript.

13
00:00:47.130 --> 00:00:50.100
So let's start with a simple example.

14
00:00:50.340 --> 00:00:55.910
Here's a conditional if true it's always going to run whatever code is in here.

15
00:00:55.980 --> 00:01:02.040
Let's declare a variable called animal and set it equal to evil.

16
00:01:02.310 --> 00:01:07.890
If I console that log animal outside this block what do you expect.

17
00:01:08.370 --> 00:01:09.710
What will be printed out.

18
00:01:09.750 --> 00:01:11.580
Let's try it.

19
00:01:11.670 --> 00:01:12.080
Nothing.

20
00:01:12.090 --> 00:01:12.930
We get an error.

21
00:01:12.930 --> 00:01:14.730
Animal is not defined.

22
00:01:14.850 --> 00:01:16.300
So what does this tell us.

23
00:01:16.380 --> 00:01:22.830
It tells us that animal is scoped inside this conditional it is scoped to this block of code blocks

24
00:01:22.830 --> 00:01:26.240
in JavaScript are denoted by curly braces.

25
00:01:26.250 --> 00:01:32.340
Keep in mind this is very different than an object literal which is also curly braces.

26
00:01:32.340 --> 00:01:33.850
This is an object.

27
00:01:33.870 --> 00:01:35.640
This up here is a block.

28
00:01:35.790 --> 00:01:37.570
So same thing if we had a while loop.

29
00:01:37.800 --> 00:01:43.620
If we had a for loop or a four of those are all blocks that code rewrite between the curly braces.

30
00:01:43.620 --> 00:01:49.400
So this is not a function but it appears that animal is still scoped to this block.

31
00:01:49.500 --> 00:01:54.620
And if I console but logged animal here of course it should work and it does.

32
00:01:54.630 --> 00:01:57.710
We get ill and then animal is not defined.

33
00:01:58.020 --> 00:01:59.940
So that's how it behaves.

34
00:01:59.940 --> 00:02:04.900
And if I did change this to const and I rerun it we get the exact same output.

35
00:02:05.190 --> 00:02:08.890
We have access to animal in the curly braces inside the conditional.

36
00:02:09.030 --> 00:02:11.700
We do not have access to it out here.

37
00:02:11.700 --> 00:02:18.450
Now if i duplicate this and I change this to instead use far you can probably tell where I'm going with

38
00:02:18.450 --> 00:02:19.230
this.

39
00:02:19.320 --> 00:02:20.220
If I run it.

40
00:02:20.550 --> 00:02:22.860
It works in both cases.

41
00:02:22.860 --> 00:02:26.740
IL is printed here in the book and outside the block.

42
00:02:26.850 --> 00:02:33.630
So this tells us that letting contest have different scoping rules than var back in the day before letting

43
00:02:33.630 --> 00:02:37.680
const we only had var in var is scoped to functions.

44
00:02:37.680 --> 00:02:44.160
What we covered in the last video there is no block scope for var if we declare a variable using var

45
00:02:44.520 --> 00:02:51.720
in any block like a conditional a for loop a while loop it is not scoped to that block we have access

46
00:02:51.720 --> 00:02:54.870
to it outside and that could be problematic.

47
00:02:54.930 --> 00:02:59.700
And that is different than how a lot of programming languages behave which is why letting cons to where

48
00:02:59.700 --> 00:03:01.690
proposed among other reasons.

49
00:03:01.770 --> 00:03:05.460
So they also know there's a distinction between concept and let.

50
00:03:05.460 --> 00:03:10.680
That was one of the reasons they were added in to create constants in javascript but also for scoping

51
00:03:10.680 --> 00:03:16.590
reasons so why would this potentially be problematic what's wrong with having a variable declared in

52
00:03:16.590 --> 00:03:19.740
a block and having access to it afterwards.

53
00:03:19.740 --> 00:03:25.040
There's a bunch of reasons but let me illustrate a simple problem that you used to come up occasionally.

54
00:03:25.140 --> 00:03:27.370
If we have a for loop using the VAR keyword.

55
00:03:27.450 --> 00:03:35.550
So for var i equals zero I less than let's make an array called well we'll just do animals let animals

56
00:03:35.610 --> 00:03:36.420
equal.

57
00:03:36.420 --> 00:03:38.460
And then we'll have grizzly bear.

58
00:03:38.640 --> 00:03:48.810
Let's do Panda Bear and spectacle bear Specter cold bear and then we'll loop over this using a for loop

59
00:03:49.210 --> 00:03:57.480
AI is less than animal scout length AI plus plus we'll console that lug animals and let's also consider

60
00:03:57.620 --> 00:04:02.180
log AI so we get 0 0.

61
00:04:02.340 --> 00:04:07.160
Well I didn't mean to consider like animals less to animals of AI instead of the whole array.

62
00:04:07.170 --> 00:04:08.730
Each time we get zero.

63
00:04:08.730 --> 00:04:09.380
Grizzly bear.

64
00:04:09.390 --> 00:04:12.220
One Panda Bear 2 spectacle bear.

65
00:04:12.300 --> 00:04:15.480
But here's the thing outside this loop.

66
00:04:15.480 --> 00:04:23.210
If I print I it still exists and it's actually set to 3 because of the way a for loop works.

67
00:04:23.210 --> 00:04:24.620
It starts at 0.

68
00:04:24.800 --> 00:04:26.840
That's less than animal stock length.

69
00:04:26.840 --> 00:04:34.490
So we loop and we add one to AI and then it becomes 1 and then 2 and the last index in here is 2.

70
00:04:34.520 --> 00:04:40.780
So when I is 2 we access the last element and then it's incremented to 3.

71
00:04:40.790 --> 00:04:43.980
The loop does not run again but I doesn't cease to exist.

72
00:04:44.000 --> 00:04:45.670
AI is still here.

73
00:04:45.860 --> 00:04:51.590
We have access to it and this could be problematic if you were relying on a variable called AI maybe

74
00:04:51.590 --> 00:04:51.880
1.

75
00:04:51.870 --> 00:04:55.370
You had to find somewhere else like var AI equals 10.

76
00:04:55.400 --> 00:05:02.210
You might think that this I should remain as 10 but if we print AI down here the only AI that we're

77
00:05:02.210 --> 00:05:04.550
getting is 3 from this loop.

78
00:05:04.850 --> 00:05:11.090
So even though I had a different variable declared with var up top and it looks like at least sort of

79
00:05:11.240 --> 00:05:17.770
upon first glance that I exists only in this loop because we used var it does not.

80
00:05:18.020 --> 00:05:23.390
And that means that we have access to it afterwards which can have all sorts of unintended consequences.

81
00:05:23.420 --> 00:05:27.140
It just makes it harder for you to know exactly where I stops.

82
00:05:27.140 --> 00:05:29.530
It's not going to abide by these bounds.

83
00:05:29.540 --> 00:05:32.660
If we use var because it's not block scoped.

84
00:05:32.720 --> 00:05:40.700
Now if I instead come down here and do this with let let's see what happens now.

85
00:05:41.580 --> 00:05:43.260
So the loop still works great.

86
00:05:43.470 --> 00:05:47.180
But now when I consider log I at the bottom it's set to 10.

87
00:05:47.460 --> 00:05:53.910
And that's because this AI that we use led to declare is scoped to this block to the for loop so it

88
00:05:53.910 --> 00:05:55.480
doesn't exist down here.

89
00:05:55.530 --> 00:05:58.110
The only AI that exists is this one here.

90
00:05:58.110 --> 00:06:02.880
I used var but we could also use let and it works.

91
00:06:02.930 --> 00:06:06.350
And if I did not have I declared up here I try to print it out.

92
00:06:06.350 --> 00:06:07.400
We get an error.

93
00:06:07.400 --> 00:06:10.130
There is no I and the same holds true for.

94
00:06:10.280 --> 00:06:15.230
Though you wouldn't use const in a for loop because it's being incremented that would break everything.

95
00:06:15.450 --> 00:06:19.670
So you can see here it will yell at me assignment to constant variable.

96
00:06:19.670 --> 00:06:23.800
The first time it tries to add one everything breaks so I'll undo that change.

97
00:06:23.810 --> 00:06:27.740
We'll go back to let the other thing that you can see right away.

98
00:06:27.990 --> 00:06:32.240
It tells you that these are not scoped the same way that they exist in different scopes.

99
00:06:32.240 --> 00:06:38.510
This I hear and this I hear is the fact that we don't get an error when we run this code normally if

100
00:06:38.510 --> 00:06:44.990
we have two variables in the same scope with a given name declared with left or const let X equals 10

101
00:06:45.230 --> 00:06:52.040
for try and make another X instead of equal to T we get an error says identifier X has already been

102
00:06:52.040 --> 00:06:58.100
declared in this case we're making a variable AI with it and then another AI with it on the very next

103
00:06:58.100 --> 00:06:58.600
line.

104
00:06:58.640 --> 00:07:00.080
They exist in different scopes.

105
00:07:00.110 --> 00:07:06.740
They are not conflicting once again compared to var which is not block scoped this eye is the exact

106
00:07:06.740 --> 00:07:08.180
same eye down here.

107
00:07:08.270 --> 00:07:09.820
So they are in the same scope.

108
00:07:09.920 --> 00:07:16.450
It starts as 10 and then we are re declaring Ei as 0 and you can do that with var in the same scope.

109
00:07:16.460 --> 00:07:25.850
I can say var t equals 1 and then var t equals 5 which I cannot do with letting const I cannot use the

110
00:07:25.850 --> 00:07:27.770
same identifier twice.

111
00:07:28.010 --> 00:07:35.060
So blocks also include things like while loops conditionals as we saw all of those rules apply for letting

112
00:07:35.060 --> 00:07:37.660
const they are scoped to the block.

113
00:07:37.670 --> 00:07:44.210
So now let's just write a function that also includes a block within it called double array which will

114
00:07:44.210 --> 00:07:46.570
double in array that is passed in.

115
00:07:46.670 --> 00:07:53.910
So if we pass in the array of 1 2 3 4 our fine 1 3 5 we should get back to.

116
00:07:54.230 --> 00:07:58.930
And then 6 and then 10 each element is doubled in a new array.

117
00:07:58.940 --> 00:08:06.110
We're not updating the original so I'm going to write a function that is expecting a are some array

118
00:08:06.110 --> 00:08:14.890
to be passed in will assume it's an array and then we'll loop over that array using a for let x of or

119
00:08:14.930 --> 00:08:25.560
let's call it num num of array I'll make a variable in here called double which is equal to Num Times

120
00:08:25.570 --> 00:08:34.200
2 and then up here I'll make a variable which will be an empty array and I will push double in for each

121
00:08:34.200 --> 00:08:35.100
number.

122
00:08:35.100 --> 00:08:36.170
So I'll start with 1.

123
00:08:36.180 --> 00:08:39.660
I'll double it which I do here I have a variable called double.

124
00:08:39.660 --> 00:08:44.580
I will add that into a new empty array which I'll call which we call it.

125
00:08:44.610 --> 00:08:47.100
I'll go with const because we're not going to change the reference.

126
00:08:47.280 --> 00:08:49.270
We'll call this results.

127
00:08:49.350 --> 00:08:52.880
It starts as an empty array and then result drop push

128
00:08:57.330 --> 00:08:57.680
OK.

129
00:08:57.710 --> 00:09:03.630
So what we have here is a function we have const which is scoped to the entire function which is why

130
00:09:03.630 --> 00:09:10.940
at the end I'm able to return results because the result was defined in this function not in a block.

131
00:09:10.980 --> 00:09:13.850
Then we have double which is scoped to this block.

132
00:09:14.040 --> 00:09:15.890
We still have access to result.

133
00:09:15.960 --> 00:09:22.990
So within a block we still have access to variables that were declared outside the block in this function.

134
00:09:23.040 --> 00:09:24.650
So let's run this now.

135
00:09:24.820 --> 00:09:29.720
We'll call double A R on one two and three.

136
00:09:30.030 --> 00:09:31.230
One two three.

137
00:09:31.230 --> 00:09:33.390
We get to four and six.

138
00:09:33.390 --> 00:09:38.090
If I were to try and counsel dot log double and run the same line.

139
00:09:38.100 --> 00:09:43.610
It does not work if I instead used var for double.

140
00:09:43.630 --> 00:09:48.160
It does work because var does not cease to exist after this block.

141
00:09:48.340 --> 00:09:53.980
Meaning the last time through the loop which was on three double is set to three times two which is

142
00:09:53.980 --> 00:09:54.620
six.

143
00:09:54.670 --> 00:09:57.930
We have access to it down here which is why we see six.

144
00:09:58.000 --> 00:10:01.580
So this is just a quick example where we have different scopes going on.

145
00:10:01.660 --> 00:10:07.110
We have constant result which is scope to the entire function because it's not inside of a block.

146
00:10:07.390 --> 00:10:09.640
We have go back to let let.

147
00:10:09.640 --> 00:10:14.330
Double which is scoped to this block from a for of loop.

148
00:10:14.560 --> 00:10:16.900
So down at the bottom we can still return results.

149
00:10:16.930 --> 00:10:22.410
We don't have access to double if we wanted for some reason to have access to double at the end.

150
00:10:22.750 --> 00:10:24.180
We could define it right here.

151
00:10:24.270 --> 00:10:24.770
Let.

152
00:10:24.770 --> 00:10:28.760
Double and we still have access to it here.

153
00:10:28.900 --> 00:10:31.170
Double equals Num Times 2.

154
00:10:31.450 --> 00:10:34.850
If I run this code we still get to 4 6.

155
00:10:34.960 --> 00:10:38.620
I don't know why you would want access to double outside that block.

156
00:10:38.620 --> 00:10:44.750
We're only using it to push a value in inside the loop but we we do have access if you needed it.

157
00:10:44.800 --> 00:10:51.130
I can still access it even with Latin because I declared it in the function scope and then I'm changing

158
00:10:51.130 --> 00:10:58.190
it within block scope but I'm going to undo that and go back to what we had earlier where it only exists

159
00:10:58.310 --> 00:10:59.190
in the block.

160
00:11:00.050 --> 00:11:00.490
OK.

161
00:11:00.530 --> 00:11:02.100
So to sum this all up.

162
00:11:02.120 --> 00:11:05.240
Let constant var are three ways of declaring a variable.

163
00:11:05.240 --> 00:11:10.420
We've seen that there's a big difference between letting const because const cannot be reassigned.

164
00:11:10.430 --> 00:11:16.250
It's a constant variable in both Latin counts cannot be read declared so we can't have what we've already

165
00:11:16.250 --> 00:11:19.700
seen let X equals 1 let X equals 2.

166
00:11:19.940 --> 00:11:22.000
We cannot re declare a new variable.

167
00:11:22.040 --> 00:11:27.650
We can change it at any point but I cannot re declare the same variable with the same name in the same

168
00:11:27.650 --> 00:11:29.390
scope var.

169
00:11:29.390 --> 00:11:33.470
You can do whatever you want with it but the very important difference that we covered here is that

170
00:11:33.500 --> 00:11:37.530
on one side we have var which is not block scoped on the other side.

171
00:11:37.550 --> 00:11:40.370
We have let in concert which are blocks scoped.

172
00:11:40.370 --> 00:11:45.830
So if you declare a variable with letter const in a loop in a conditional in a for loop in a while loop

173
00:11:46.190 --> 00:11:49.900
those variables are scoped only to the confines of that block.

174
00:11:50.060 --> 00:11:55.340
If they're not in a block if they're defined in a function like we have here we can access it within

175
00:11:55.340 --> 00:11:56.340
that function.

176
00:11:56.400 --> 00:11:59.590
It doesn't exist afterwards which is what we saw in the last video.

177
00:11:59.630 --> 00:12:00.940
And the same is true for far.

178
00:12:01.610 --> 00:12:04.140
So VAR was the only option a couple of years ago.

179
00:12:04.280 --> 00:12:07.300
Function scoped now let constant here block scoped.
