1
00:00:00,270 --> 00:00:06,420
Already so in the last video we saw how using a bunch of callbacks and nesting things can get really

2
00:00:06,420 --> 00:00:08,180
out of hand quickly.

3
00:00:08,220 --> 00:00:14,310
This code is just long and difficult to understand when we're passing in to callbacks to each function

4
00:00:14,310 --> 00:00:16,940
call here and they're all nested.

5
00:00:17,020 --> 00:00:23,760
There's a term for this sort of a playfully loving term in JavaScript called callback hell and you can

6
00:00:23,760 --> 00:00:25,770
see another example of this here on the left.

7
00:00:25,860 --> 00:00:31,420
Lots of nesting lots of functions that are nested functions are being passed as callbacks.

8
00:00:31,440 --> 00:00:37,200
This is just not very fun to write and it's especially annoying when it gets really long and super far

9
00:00:37,200 --> 00:00:40,290
nested and indented and it's just hard to follow.

10
00:00:40,350 --> 00:00:42,500
So this is where promises come in.

11
00:00:42,560 --> 00:00:48,090
Promises allow us to write a synchronous code that is much easier to read and understand.

12
00:00:48,150 --> 00:00:53,640
It's usually shorter but even if it's not actually shorter in terms of the number of characters it's

13
00:00:53,640 --> 00:00:54,510
much flatter.

14
00:00:54,510 --> 00:00:56,490
Often it's not so nested.

15
00:00:56,490 --> 00:00:58,470
So here is where we'll end up.

16
00:00:58,590 --> 00:01:06,600
This code written or rewritten to use promises looks like this a whole lot flatter much easier to look

17
00:01:06,600 --> 00:01:11,060
at on your eyes much easier to fix or debug something if it goes wrong.

18
00:01:11,130 --> 00:01:14,160
We don't have to figure out which callback we need to update.

19
00:01:14,210 --> 00:01:20,670
We don't have to find the corresponding fail callback for this success.

20
00:01:20,700 --> 00:01:25,050
Thankfully I have this bracket matter which helps me but it's really obnoxious.

21
00:01:25,050 --> 00:01:29,760
So this is where we're going and we'll take a moment though because we need to talk about the basics

22
00:01:29,760 --> 00:01:31,830
of promises when we work with promises.

23
00:01:31,830 --> 00:01:34,560
There's really two different things you need to understand.

24
00:01:34,560 --> 00:01:36,840
The first is how you create a promise.

25
00:01:37,020 --> 00:01:42,780
How you could create a function that returns a promise and then the second is how you consume or interact

26
00:01:42,780 --> 00:01:45,250
with promises which we do all the time.

27
00:01:45,390 --> 00:01:50,940
Even if we're not writing the promises ourself we might be making a request from a library or using

28
00:01:51,000 --> 00:01:54,550
a library like axioms which is something we'll see in just a bit.

29
00:01:54,570 --> 00:01:57,710
It returns a lot of its functions return promises.

30
00:01:57,780 --> 00:02:00,320
So we need to understand how we work with those promises.

31
00:02:00,450 --> 00:02:05,610
So we'll tackle both of those creating promises from scratch and then also just working with promises

32
00:02:05,610 --> 00:02:06,480
that someone else made.

33
00:02:06,860 --> 00:02:09,440
OK so let's talk about the basics.

34
00:02:09,480 --> 00:02:11,150
A promise is just an object.

35
00:02:11,160 --> 00:02:17,310
It's a javascript object which represents the completion or failure of some eventual process something

36
00:02:17,310 --> 00:02:18,470
that can take time.

37
00:02:18,480 --> 00:02:20,290
Usually it's something that takes time.

38
00:02:20,310 --> 00:02:22,440
Otherwise you probably wouldn't need a promise.

39
00:02:22,550 --> 00:02:27,170
So a promise is a way of promising a value that you may not have at the moment.

40
00:02:27,210 --> 00:02:29,360
Think of a promise in the real world.

41
00:02:29,520 --> 00:02:31,540
When I was a kid I really wanted a dog.

42
00:02:31,560 --> 00:02:32,550
I asked my dad.

43
00:02:32,550 --> 00:02:35,610
He said You know I promise we'll get your dog if you get good grades.

44
00:02:36,090 --> 00:02:41,820
I got good grades and while he didn't follow through on the promise until he had new kids and then he

45
00:02:41,820 --> 00:02:42,590
got them a dog.

46
00:02:42,810 --> 00:02:48,480
But other people's parents would probably follow through on those promises and actually follow through

47
00:02:48,480 --> 00:02:49,160
and give them a dog.

48
00:02:49,170 --> 00:02:53,880
Give the kids a duck so a promise is different than saying here is a dog right now.

49
00:02:54,390 --> 00:03:02,070
It's just a guarantee or a supposed guarantee of an eventual value for a dog or whatever we're talking

50
00:03:02,070 --> 00:03:02,610
about.

51
00:03:02,610 --> 00:03:09,270
So in Javascript promises are objects that represent an eventual either failure or success of some task

52
00:03:09,300 --> 00:03:10,530
that takes time.

53
00:03:10,560 --> 00:03:17,610
You make a request if we use a library like axioms which we will shortly that returns a promise because

54
00:03:17,610 --> 00:03:18,350
that value.

55
00:03:18,480 --> 00:03:23,050
If you're making an HD GDP request I could take time and that value may never come back.

56
00:03:23,070 --> 00:03:28,530
It might be a failure or it might be successful and you might get some data back from an API but it

57
00:03:28,530 --> 00:03:29,190
takes time.

58
00:03:29,220 --> 00:03:36,300
So the object that is returned in the meantime is a promise and what we do is we attach callbacks to

59
00:03:36,300 --> 00:03:37,220
that object.

60
00:03:37,250 --> 00:03:42,430
We don't pass in to callbacks or a single callback to a function and nest a whole bunch of things.

61
00:03:42,450 --> 00:03:46,280
Promises are objects that we can attach callbacks to instead.

62
00:03:46,350 --> 00:03:51,150
This may not make sense at the moment but why don't I start by showing you how it works and it should

63
00:03:51,150 --> 00:03:53,120
click after a bit of practice.

64
00:03:53,160 --> 00:03:59,400
So the way we make a new promise in Javascript is like this new promise with a capital P..

65
00:03:59,460 --> 00:04:00,780
I'll save this to a variable.

66
00:04:00,960 --> 00:04:10,850
Let's go with this idea of my parents promising me a dog concept will get you a dog equals new promise.

67
00:04:10,950 --> 00:04:16,500
And when we create a promise we pass in a function and this function has two parameters always these

68
00:04:16,500 --> 00:04:17,420
two parameters.

69
00:04:17,460 --> 00:04:24,480
We usually call resolve and reject and these are actually functions and at any point inside of this

70
00:04:24,480 --> 00:04:27,910
function here is function that we pass into new promise.

71
00:04:27,990 --> 00:04:31,400
If we call resolve be promise we'll be resolved.

72
00:04:31,410 --> 00:04:35,960
If we call reject which is a function like this the promise will be rejected.

73
00:04:35,970 --> 00:04:39,210
Now what does that mean for a promise to be resolved or rejected.

74
00:04:39,210 --> 00:04:40,900
Well why don't we just start with doing neither.

75
00:04:41,490 --> 00:04:43,040
We just have our promise here.

76
00:04:43,140 --> 00:04:44,170
New Promise.

77
00:04:44,190 --> 00:04:45,120
That's it.

78
00:04:45,390 --> 00:04:47,070
And we're not doing anything in it.

79
00:04:47,130 --> 00:04:50,590
Let's see what happens if I take a look at will get you a dog.

80
00:04:50,760 --> 00:04:58,470
I'll refresh my page will get you a dog is a promise object and see that it has this one property called

81
00:04:58,500 --> 00:04:59,030
Promise.

82
00:04:59,030 --> 00:05:01,520
Status which is set to pending.

83
00:05:01,800 --> 00:05:06,660
So the promise is it is a promise but it has not been resolved or rejected.

84
00:05:06,660 --> 00:05:09,730
It has not been fulfilled or it has not been broken.

85
00:05:09,750 --> 00:05:14,730
If we are talking about this idea in the real world of a promise when someone promises you something

86
00:05:15,530 --> 00:05:19,140
we would say the status of that promise is pending intel.

87
00:05:19,200 --> 00:05:22,400
Either they break the promise or they follow through on it.

88
00:05:22,440 --> 00:05:28,920
So if we don't reject or resolve a promise its value or its status will be pending.

89
00:05:28,920 --> 00:05:35,130
So the pending state of a promise is frequently what you will see initially when a promise is first

90
00:05:35,130 --> 00:05:35,490
returned.

91
00:05:35,490 --> 00:05:40,890
If we're making a request and that takes ten seconds which would be horrendously slow during those ten

92
00:05:40,890 --> 00:05:42,890
seconds we don't have a response.

93
00:05:42,890 --> 00:05:44,730
We don't know if it's a failure or success.

94
00:05:44,730 --> 00:05:49,770
If the response went to the right you RL If the server was up if your enemy was working so it would

95
00:05:49,770 --> 00:05:50,680
be pending.

96
00:05:50,940 --> 00:05:54,180
But if I immediately call reject which is a function.

97
00:05:54,210 --> 00:05:56,630
If I just write reject here it's not gonna work.

98
00:05:56,640 --> 00:06:04,200
I need to execute this function reject refresh the page take a look uncut in promise we have an error

99
00:06:04,200 --> 00:06:06,900
that we didn't catch and our promise.

100
00:06:06,900 --> 00:06:18,270
Status is rejected and if I instead resolve like that refresh take a look at we'll get you a dog.

101
00:06:18,550 --> 00:06:21,270
Promise now has status of resolved.

102
00:06:21,490 --> 00:06:27,180
So still not very useful at this point but this is the most fundamental part of creating a promise.

103
00:06:27,280 --> 00:06:28,780
We call new promise.

104
00:06:28,780 --> 00:06:34,060
We pass in a function and this function has two parameters resolve and reject.

105
00:06:34,090 --> 00:06:39,220
You can name and other things but this is standard and when you call that first function which should

106
00:06:39,220 --> 00:06:44,220
be called Resolve it resolves a promise it fulfills it and the status is set to resolved.

107
00:06:44,230 --> 00:06:49,380
And if we instead reject it the status of that promise is rejected.

108
00:06:49,560 --> 00:06:50,180
Okay.

109
00:06:50,290 --> 00:06:53,640
So now why don't we make something slightly more interesting.

110
00:06:53,740 --> 00:06:55,380
We have will get you a dog.

111
00:06:55,480 --> 00:07:00,910
Why don't we write a promise that is randomly resolved or rejected.

112
00:07:00,970 --> 00:07:05,770
So that's pretty much the logic my dad used to decide if I was actually going to get a dog.

113
00:07:05,770 --> 00:07:10,960
I'm pretty sure he just picked a random number and decided nope there was no real rationale here so

114
00:07:10,960 --> 00:07:19,500
why don't we pick a random number we'll do const Rand equals math at random and then a friend is less

115
00:07:19,500 --> 00:07:20,610
than zero point five.

116
00:07:20,610 --> 00:07:21,400
We will.

117
00:07:21,570 --> 00:07:23,560
Let's do resolve.

118
00:07:23,610 --> 00:07:27,420
Else we will reject.

119
00:07:27,420 --> 00:07:28,440
So now this promise.

120
00:07:28,440 --> 00:07:35,070
Every time I refresh the page should be one of these states either immediately resolved or immediately

121
00:07:35,160 --> 00:07:37,770
rejected depending on that random number.

122
00:07:37,770 --> 00:07:39,600
So this time it was resolved.

123
00:07:39,600 --> 00:07:40,620
I tried again.

124
00:07:40,800 --> 00:07:41,470
Resolved.

125
00:07:41,710 --> 00:07:44,610
OK now it was rejected.

126
00:07:44,640 --> 00:07:46,330
So this is the first part.

127
00:07:46,350 --> 00:07:52,290
This is how we create a promise the next and also extremely important part is how we actually interact

128
00:07:52,290 --> 00:07:53,160
with the promise.

129
00:07:53,160 --> 00:07:54,440
How do I run code.

130
00:07:54,570 --> 00:07:57,510
If this promise was rejected versus run code.

131
00:07:57,510 --> 00:08:01,890
If this promise was resolved this is where we meet our friend.

132
00:08:01,910 --> 00:08:02,990
Dot then.

133
00:08:03,000 --> 00:08:06,030
So every promise has a then method.

134
00:08:06,240 --> 00:08:15,390
So we could call will get you a dog dot then and this dot then method will run if our promise is resolved.

135
00:08:15,840 --> 00:08:18,360
So I have my dot then and I'll pass in a callback.

136
00:08:18,360 --> 00:08:26,630
This code will run when this promise is resolved and we'll console that log yay we got a dog.

137
00:08:29,190 --> 00:08:30,970
So let's see if it works.

138
00:08:31,250 --> 00:08:31,610
Okay.

139
00:08:31,650 --> 00:08:33,210
So it was rejected.

140
00:08:33,330 --> 00:08:38,120
This code did not run refresh again this time.

141
00:08:38,240 --> 00:08:46,770
If we take a look it was resolved and our callback instead of dot then was executed tried again rejected.

142
00:08:46,770 --> 00:08:48,580
We don't see this code.

143
00:08:48,690 --> 00:08:54,780
There's no yay we got a dog so we have another method we can use with every single promise we have not

144
00:08:54,780 --> 00:08:58,540
then and another one called Dot catch.

145
00:08:58,590 --> 00:08:59,700
Well it's not called Dot catch.

146
00:08:59,730 --> 00:09:03,200
It's called catch and we could just change it on like this.

147
00:09:03,240 --> 00:09:08,420
We could also do will get you a dog dot catch.

148
00:09:08,700 --> 00:09:11,970
This code will run if the promise is rejected.

149
00:09:12,090 --> 00:09:13,610
We'll console that log.

150
00:09:13,620 --> 00:09:15,450
How about a sad face.

151
00:09:15,450 --> 00:09:16,170
No dog.

152
00:09:18,220 --> 00:09:21,750
So if the promise is randomly rejected this will print out.

153
00:09:21,820 --> 00:09:26,820
If it is randomly resolved this prints out no dog.

154
00:09:26,830 --> 00:09:27,770
It was rejected.

155
00:09:27,850 --> 00:09:32,890
So you can see status is rejected once again rejected rejected.

156
00:09:32,890 --> 00:09:33,870
There we go.

157
00:09:33,910 --> 00:09:34,840
Resolved.

158
00:09:34,960 --> 00:09:35,230
All right.

159
00:09:35,260 --> 00:09:41,530
So what we've seen so far may not seem that useful or revolutionary but we've seen the two basic pieces

160
00:09:41,530 --> 00:09:44,980
of working with and creating promises to make a promise.

161
00:09:44,980 --> 00:09:50,980
We call new promise every single time we pass in a function and that function has two parameters resolve

162
00:09:51,010 --> 00:09:53,110
and reject within this function.

163
00:09:53,110 --> 00:09:56,920
We can then call resolve as a function to resolve the promise.

164
00:09:57,070 --> 00:10:01,300
We call reject as a function with parentheses to reject the promise.

165
00:10:01,300 --> 00:10:06,670
And if we do neither the promise we'll have a status of pending until it's either resolved or rejected.

166
00:10:06,670 --> 00:10:08,540
So that's creating a promise.

167
00:10:08,770 --> 00:10:16,240
Then we saw the dot then or the then method and the catch method whatever we pass into then will automatically

168
00:10:16,240 --> 00:10:23,620
run when a given promise is resolved and whatever we pass into dot catch the catch method will automatically

169
00:10:23,620 --> 00:10:26,350
run whenever a promise is rejected.

170
00:10:26,350 --> 00:10:30,220
So these are two methods on a promise a promise is an object.

171
00:10:30,220 --> 00:10:32,520
So this creates a new promise for us.

172
00:10:32,650 --> 00:10:38,410
And then here where we're using two existing methods on those promises or on this specific promise we'll

173
00:10:38,410 --> 00:10:39,390
get you a dog.

174
00:10:39,400 --> 00:10:41,920
These are the basic building blocks of promises.

175
00:10:41,920 --> 00:10:44,070
And we're going to continue to build on these.

176
00:10:44,080 --> 00:10:50,080
Remember we will be refactoring some code that nasty callback hell we saw this at the last video.

177
00:10:50,080 --> 00:10:51,930
Plus we'll see how to make requests.

178
00:10:52,000 --> 00:10:56,050
This will all start to make sense if you're if you're questioning it or if you're lost it just doesn't

179
00:10:56,050 --> 00:10:57,310
seem that useful.

180
00:10:57,310 --> 00:10:58,300
This is not that great.

181
00:10:58,300 --> 00:11:00,610
I totally recognize that but we have to start somewhere.

182
00:11:01,000 --> 00:11:03,280
So next we'll continue on our promises journey.
