1
00:00:00,090 --> 00:00:04,740
Next up we have another new operator or feature in JavaScript called rest.

2
00:00:04,740 --> 00:00:09,990
Now I wrote that it looks like spread but it's not because we use the exact same three dot syntax.

3
00:00:09,990 --> 00:00:13,250
Dot dot dot but rest behaves very differently.

4
00:00:13,260 --> 00:00:15,650
It's almost like the opposite of spread.

5
00:00:15,690 --> 00:00:21,930
What it does is instead of spreading data out into arguments or into a new object or an array it actually

6
00:00:21,930 --> 00:00:24,930
collects things down into a single array.

7
00:00:25,020 --> 00:00:31,020
So it's used when we want to make functions that accept an unlimited number of arguments or a variable

8
00:00:31,080 --> 00:00:32,130
number of arguments.

9
00:00:32,160 --> 00:00:37,770
For example we've seen this method a couple times math dot Max where we can pass in as many arguments

10
00:00:37,770 --> 00:00:41,390
as we want and it returns the maximum value.

11
00:00:41,820 --> 00:00:43,480
So how would we write this.

12
00:00:43,500 --> 00:00:50,910
How would we write code for a function let's call it max or let's do one called Sum instead.

13
00:00:50,970 --> 00:00:56,140
Some will return the sum of any number of numbers.

14
00:00:56,220 --> 00:01:00,510
So we could have two numbers passed in so we could add two parameters.

15
00:01:00,540 --> 00:01:06,930
But what if we want to support one hundred or twenty or one we would have to do something like this

16
00:01:06,930 --> 00:01:14,250
maybe a b c d e f g h i j k and even then we would eventually run out of letters and have to switch

17
00:01:14,250 --> 00:01:16,430
it up and then how would it work.

18
00:01:16,440 --> 00:01:20,670
Because sometimes they would be undefined if you only passed in three arguments.

19
00:01:21,150 --> 00:01:23,060
So this is not the answer.

20
00:01:23,100 --> 00:01:24,820
There is a way of doing this without rest.

21
00:01:25,770 --> 00:01:27,840
It's called the arguments object.

22
00:01:27,840 --> 00:01:32,910
So when every function we have access to something called arguments it's a special name.

23
00:01:32,910 --> 00:01:37,320
Arguments and it kind of looks like an array but it is not an array.

24
00:01:37,350 --> 00:01:39,360
It's 100 percent not an array.

25
00:01:39,360 --> 00:01:45,300
We don't have things like push and pop and all the common array methods you might want but it is a list

26
00:01:45,390 --> 00:01:49,450
where we have indices and we can loop over it with a for loop.

27
00:01:49,500 --> 00:01:51,080
So this has been around for a long time.

28
00:01:51,090 --> 00:01:53,900
This is not new for starting with the old way.

29
00:01:53,940 --> 00:01:56,090
And then we'll see the new way with rest.

30
00:01:56,250 --> 00:02:00,510
So using this is as I wrote here math it's not very it's not great.

31
00:02:00,630 --> 00:02:06,210
It's annoying but I'm going to show it to you quickly instead of any function we have arguments so let's

32
00:02:06,210 --> 00:02:13,330
just cancel about log arguments notice that my function does not have any parameters listed.

33
00:02:13,330 --> 00:02:20,530
That doesn't matter if I call it right now some of one comma to come are three arguments prints out

34
00:02:21,040 --> 00:02:29,020
and we can see it has three values in it one two and three if I call it with a whole bunch more arguments

35
00:02:29,560 --> 00:02:35,440
six seven twenty three forty five 6 6 6 6 arguments has eight elements in it.

36
00:02:35,890 --> 00:02:42,520
So if I wanted to make some actually work I wanted some all elements let's use reduce which we saw earlier

37
00:02:42,520 --> 00:02:48,710
on we'll get some practice again with it we have arguments and what I might want to try is arguments

38
00:02:48,710 --> 00:02:57,610
start reduce and then remember our syntax here we have the total and then each current Val let's go

39
00:02:57,610 --> 00:03:09,050
with curve Val and we'll return total plus curve Val and let's see what we get here also we'll return

40
00:03:09,080 --> 00:03:16,950
that this will give us the sum and then we return the sum if I try it though one two three four five

41
00:03:17,790 --> 00:03:24,620
oh no arguments that reduce is not a function again arguments is not actually an array it's an array

42
00:03:24,620 --> 00:03:32,180
like object it looks like an array because we can access arguments of zero or we can loop over it but

43
00:03:32,210 --> 00:03:37,970
it does not have array methods if I wanted to make this work using the arguments object what I could

44
00:03:37,970 --> 00:03:43,670
do is turn it into an array and one way of doing that we just saw is spread.

45
00:03:43,670 --> 00:03:54,370
Dot dot dot arguments and then I could call this args array and then iterate over that args array.

46
00:03:55,070 --> 00:03:58,820
Now if I tried again it works we get 15 right.

47
00:03:58,820 --> 00:04:00,860
That's I think that's correct yes.

48
00:04:00,920 --> 00:04:03,710
So that's one of the shortcomings of the arguments object.

49
00:04:03,710 --> 00:04:05,940
Here's another situation where it's not ideal.

50
00:04:06,170 --> 00:04:13,070
If I wanted to define a function called uh let's just go with the full name it accepts a first name

51
00:04:13,230 --> 00:04:19,010
a last name and then a bunch of titles like optional titles someone could have like.

52
00:04:19,670 --> 00:04:20,290
I don't know.

53
00:04:20,390 --> 00:04:21,860
Order of the.

54
00:04:21,860 --> 00:04:31,550
I'm making this up or if the Phoenix or royal bad ass or whatever titles there are I know there's a

55
00:04:31,550 --> 00:04:32,190
bunch of them.

56
00:04:32,210 --> 00:04:33,090
Oh Junior.

57
00:04:33,110 --> 00:04:34,130
There we go.

58
00:04:34,130 --> 00:04:38,900
Or the third and somebody could have I think you would just do this right.

59
00:04:38,940 --> 00:04:40,220
So you do the third.

60
00:04:40,220 --> 00:04:44,440
Somebody could have multiple titles but everyone needs to have a first and the last.

61
00:04:44,540 --> 00:04:47,560
And then what I'd like to do is just have everything else.

62
00:04:47,720 --> 00:04:53,090
Any titles that were passed and collected maybe in the arguments object but there isn't actually a way

63
00:04:53,090 --> 00:04:54,070
of doing that.

64
00:04:54,230 --> 00:05:02,450
If I do first and last in here if I console that log arguments it just contains everything.

65
00:05:02,450 --> 00:05:14,390
So if I call a full name of Tom Jones and then pass and a couple other things like third and order of

66
00:05:14,390 --> 00:05:16,020
the Phoenix.

67
00:05:16,130 --> 00:05:18,050
Those are his titles.

68
00:05:18,200 --> 00:05:23,910
If we look at arguments it just contains all four arguments so we could still implement this function.

69
00:05:24,080 --> 00:05:28,340
We would just need to make sure to skip the first two if we're trying to get the titles that were passed

70
00:05:28,340 --> 00:05:31,830
in Tom Jones the third order of the Phoenix.

71
00:05:31,910 --> 00:05:33,930
We would want these two.

72
00:05:34,010 --> 00:05:35,420
We already have first and last.

73
00:05:35,420 --> 00:05:37,940
We still have access to those I can print out first.

74
00:05:37,940 --> 00:05:39,850
I still have access to it.

75
00:05:40,040 --> 00:05:41,690
You can see Tom.

76
00:05:41,690 --> 00:05:44,010
It's just that arguments includes everything.

77
00:05:44,240 --> 00:05:50,420
So I just have to be mindful of that and know that the first two in arguments are already first and

78
00:05:50,420 --> 00:05:53,110
last with rest which we're about to see.

79
00:05:53,110 --> 00:05:54,040
That's not a problem.

80
00:05:54,330 --> 00:05:59,890
And there is one last issue with the arguments object it does not work in Arrow functions.

81
00:05:59,930 --> 00:06:04,610
If I define an arrow function which I'll call multiply if I try and control that log.

82
00:06:04,610 --> 00:06:13,250
Arguments we'll call it multiply pass in some numbers it does not work.

83
00:06:13,260 --> 00:06:18,620
Argument is not defined so the arguments object is not a thing in Arrow functions.

84
00:06:18,620 --> 00:06:19,970
So there's a couple shortcomings.

85
00:06:19,970 --> 00:06:22,400
To sum this up first it's not a real array.

86
00:06:22,790 --> 00:06:24,640
So you have to turn it into an array.

87
00:06:24,650 --> 00:06:26,120
If you want array methods.

88
00:06:26,210 --> 00:06:32,880
Next there is no functionality provided for collecting remaining arguments like we saw here.

89
00:06:32,900 --> 00:06:35,600
Arguments contains every argument passed in.

90
00:06:35,600 --> 00:06:38,810
Even if we captured the first two in parameter names.

91
00:06:38,900 --> 00:06:43,180
And then lastly the arguments object does not exist at all in Arrow functions.

92
00:06:43,190 --> 00:06:47,160
So we've set the stage to see the new fancy syntax using rest.

93
00:06:47,180 --> 00:06:48,300
That's coming up next.
