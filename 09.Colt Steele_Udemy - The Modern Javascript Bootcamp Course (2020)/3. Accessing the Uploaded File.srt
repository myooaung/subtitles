1
00:00:00,640 --> 00:00:04,240
We just had a really long discussion about file submission inside of our form.

2
00:00:04,420 --> 00:00:09,570
So the net result of all that discussion was essentially inside of our index J jazz file the body password

3
00:00:09,580 --> 00:00:14,710
that we're using right now is not sufficient to actually reach into the request and pull out the image

4
00:00:14,740 --> 00:00:15,850
that we're trying to upload.

5
00:00:15,860 --> 00:00:20,560
That's all because the body parser only cares about your URL encoded post requests.

6
00:00:20,560 --> 00:00:22,410
So how we gonna fix this up.

7
00:00:22,450 --> 00:00:25,900
Well let's go take a look at the documentation for body parser itself.

8
00:00:25,900 --> 00:00:29,500
The body parser library I've pulled up the documentation.

9
00:00:29,500 --> 00:00:33,130
You don't have to pull it up there's really just one very specific thing I want to show you inside of

10
00:00:33,130 --> 00:00:33,930
here.

11
00:00:34,030 --> 00:00:40,270
So inside the body parts documentation says very specifically this module does not handle multipart

12
00:00:40,270 --> 00:00:41,210
requests.

13
00:00:41,350 --> 00:00:47,660
So instead they recommend using one these other little libraries so instead of using body parser to

14
00:00:47,660 --> 00:00:52,930
handle this file submission we're going to instead use another little library called melter.

15
00:00:53,060 --> 00:00:54,140
So I gonna click on that.

16
00:00:54,140 --> 00:00:58,170
We'll take a look at the documentation if you want to find the documentation yourself.

17
00:00:58,190 --> 00:01:01,970
You can go to NPM J ask.com and search for multi-year

18
00:01:05,140 --> 00:01:05,740
inside of here.

19
00:01:05,740 --> 00:01:08,570
It's a pretty straightforward and easy middleware to use.

20
00:01:08,620 --> 00:01:11,700
We're going to first install it after that.

21
00:01:11,700 --> 00:01:16,290
We're going to find the post request handler that is going to handle this form submission that contains

22
00:01:16,290 --> 00:01:17,890
the actual file upload.

23
00:01:18,240 --> 00:01:23,760
And then as a middleware inside there we're going to call upload a dot single and then the name of the

24
00:01:23,760 --> 00:01:25,130
image that we expect to come in.

25
00:01:25,750 --> 00:01:30,750
When I say name a domain name of the image I mean the name of the actual file or the field inside the

26
00:01:30,750 --> 00:01:32,190
request.

27
00:01:32,190 --> 00:01:38,040
So for us if we take a look at our template once again our file input right here has a name of image.

28
00:01:38,490 --> 00:01:45,270
So we're going to call upload dot single and we're gonna pass in a string right there of simply image.

29
00:01:45,270 --> 00:01:49,020
Again that's going to say look in the form find the input with the name of image.

30
00:01:49,020 --> 00:01:56,640
Take that data and give that to us as a file so then inside of our callback function the wrecked dot

31
00:01:56,640 --> 00:02:01,710
file property is going to be the actual file that we want to save and the wrecked out body property

32
00:02:01,710 --> 00:02:06,750
will continue to hold all the different text fields or all the different text inputs such as the title

33
00:02:06,750 --> 00:02:08,280
and price that we're used to working with.

34
00:02:08,280 --> 00:02:14,820
Anyways the other thing to be aware of is that when we make use of motor it wants to save the file to

35
00:02:14,820 --> 00:02:18,160
some specific location inside of our project.

36
00:02:18,180 --> 00:02:22,830
So in other words when it receives this file there is the possibility that we might be getting a really

37
00:02:22,830 --> 00:02:28,590
large file upload for us re handling images that might be kind of small in nature but we might eventually

38
00:02:28,590 --> 00:02:33,830
start to receive files that are like tens of megabytes or hundreds or even gigabytes large.

39
00:02:33,980 --> 00:02:39,150
It's a multi-year wants to have some location to actually store this file as it's being uploaded to

40
00:02:39,150 --> 00:02:44,160
our server and then hold onto it essentially as we are waiting to do something with it inside of our

41
00:02:44,160 --> 00:02:45,570
request handler.

42
00:02:45,570 --> 00:02:49,170
We're gonna have a longer discussion about what all that means in just a moment.

43
00:02:49,170 --> 00:02:53,400
So for right now let's just add in the code to install multi-year make use of it inside of our post

44
00:02:53,400 --> 00:02:58,410
request handler and just get a handle on the file itself and we'll talk about what this kind of destination

45
00:02:58,410 --> 00:03:02,240
stuff is really talking about okay.

46
00:03:02,250 --> 00:03:06,680
So to get started going to first go back over to my terminal I'm going to stop my running server with

47
00:03:06,680 --> 00:03:14,690
a command C and I'll do a npm install melter I'll let that do its thing really quickly and then I'll

48
00:03:14,690 --> 00:03:20,020
start my server back up with NPM run def.

49
00:03:20,140 --> 00:03:21,530
It looks good.

50
00:03:21,590 --> 00:03:29,800
So going to go back over to my root handler inside the product start j ust file I'm gonna go to the

51
00:03:29,800 --> 00:03:36,270
very top of the file and right after our require statement for Express validator I'm going to add in

52
00:03:37,110 --> 00:03:41,780
a required statement for Mr..

53
00:03:41,880 --> 00:03:45,820
Now one thing about a mention on the side here knows the kind of structure that we have inside of Oliver

54
00:03:45,840 --> 00:03:47,740
require statements inside this file.

55
00:03:47,820 --> 00:03:52,020
I have grouped together all the require statements that are getting something from an external library

56
00:03:52,500 --> 00:03:56,250
and I've also kind of grouped together the require statements that are getting access to a file that

57
00:03:56,250 --> 00:04:01,050
you and I authored and then only after all those are you gonna start declaring different variables and

58
00:04:01,050 --> 00:04:05,860
working around with these variables so in other words I'm going to do might require a statement from

59
00:04:05,860 --> 00:04:12,070
vulture up here but then only right after where we create the router am I going to do what the documentation

60
00:04:12,070 --> 00:04:16,930
says which is to create that kind of upload variable right there where we actually make use of Walter

61
00:04:19,220 --> 00:04:21,030
it's a right after we create our router.

62
00:04:21,030 --> 00:04:30,170
I'll say const upload is molten we're gonna pass in an options object inside of here we're going to

63
00:04:30,170 --> 00:04:35,200
say storage is multi-year dot memory storage.

64
00:04:35,360 --> 00:04:39,020
As I mentioned just a moment ago we're gonna have a deeper dive on what the storage stuff is really

65
00:04:39,020 --> 00:04:39,920
talking about.

66
00:04:39,920 --> 00:04:45,640
But right now just bear with me in saying memory storage okay.

67
00:04:45,670 --> 00:04:51,430
Now upload is a middleware function we can make use of inside of our post request handler so I'll go

68
00:04:51,430 --> 00:05:00,270
down to right here and then right after our array of validators I'll put in an additional argument here.

69
00:05:00,280 --> 00:05:07,160
I'm going to put in that upload variable.

70
00:05:07,230 --> 00:05:11,310
Let's say this.

71
00:05:11,550 --> 00:05:12,410
I forgot one thing.

72
00:05:12,420 --> 00:05:15,500
We have to call upload dot singlet and with the name of the file.

73
00:05:15,520 --> 00:05:16,100
My mistake.

74
00:05:16,110 --> 00:05:20,190
So upload dot single and the name of our or the field name is image.

75
00:05:20,210 --> 00:05:20,470
Okay.

76
00:05:20,490 --> 00:05:21,930
That's it.

77
00:05:21,930 --> 00:05:26,460
So now inside of our post request handler I'm going to delete the record on stuff that was just to show

78
00:05:26,460 --> 00:05:31,710
you where this actual information was from and then to actually get access to our file.

79
00:05:31,740 --> 00:05:36,530
We'll do a console log of simply erect file and we'll see what we eventually are working with.

80
00:05:37,410 --> 00:05:37,710
Okay.

81
00:05:37,720 --> 00:05:46,400
Now let's save this I can go back over to my browser I can go back to the form I'll refresh put in a

82
00:05:46,400 --> 00:05:53,950
title and a price and then I'll upload any old image this time I'll do submit and then go back over

83
00:05:53,950 --> 00:05:56,780
to my terminal and see what I get and there we go.

84
00:05:56,890 --> 00:06:00,250
Here's an object that represents the actual file that just got uploaded.

85
00:06:00,490 --> 00:06:01,670
So we've got the field name.

86
00:06:01,720 --> 00:06:03,510
That's what it was inside the forum.

87
00:06:03,520 --> 00:06:05,480
We've got the name of the file itself.

88
00:06:05,830 --> 00:06:08,290
The encoding the type of image that it is.

89
00:06:08,290 --> 00:06:12,350
In this case I uploaded a PMG and then we have this buffer.

90
00:06:12,430 --> 00:06:16,840
Remember we've said several times that buffers are essentially arrays that have some raw data inside

91
00:06:16,840 --> 00:06:17,710
of it.

92
00:06:17,710 --> 00:06:22,930
In this case you'll notice that says here one hundred and seventeen thousand more bytes.

93
00:06:22,930 --> 00:06:29,680
You might recall I mentioned that the size of this coat image that I'm working with is 117 kilobytes

94
00:06:30,190 --> 00:06:32,050
which is one hundred seventeen thousand bytes.

95
00:06:32,080 --> 00:06:32,820
More or less.

96
00:06:33,660 --> 00:06:40,470
So this buffer right here contains the very raw information out of my file so that essentially is the

97
00:06:40,470 --> 00:06:42,180
information that we want to somehow store.

98
00:06:42,420 --> 00:06:47,040
So we can eventually show an associate an image with every product at some point in time.

99
00:06:47,040 --> 00:06:49,940
The future is looking good.

100
00:06:49,940 --> 00:06:52,050
We clearly have access to the file now.

101
00:06:52,070 --> 00:06:54,330
It's now the last part of all this discussion.

102
00:06:54,330 --> 00:06:55,400
We need to have is.

103
00:06:55,580 --> 00:06:57,410
Well we've got the file.

104
00:06:57,410 --> 00:06:59,310
Now what do we do with it.

105
00:06:59,330 --> 00:07:03,110
So that's kind of part of the discussion around this storage property right here.

106
00:07:03,110 --> 00:07:04,110
So let's take a quick pause.

107
00:07:04,160 --> 00:07:05,480
We're going to come back on the next video.

108
00:07:05,510 --> 00:07:10,340
Now I want to give you kind of a broader overview of how it image upload really works in general in

109
00:07:10,340 --> 00:07:14,910
a professional style application and how we're going to do it in our application as well.
