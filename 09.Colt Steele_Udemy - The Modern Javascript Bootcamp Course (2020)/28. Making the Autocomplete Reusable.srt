1
00:00:01,030 --> 00:00:05,350
Now that we understand what is going wrong inside of our project let's talk about the absolute distinct

2
00:00:05,350 --> 00:00:08,950
steps we're going to undergo to actually fix each of these issues.

3
00:00:09,010 --> 00:00:15,730
So here's the idea right now we've got a lot of under usable code inside of our index not J.S. file.

4
00:00:15,790 --> 00:00:21,860
We're going to start to refactor this into two separate files inside of our index not just file.

5
00:00:21,880 --> 00:00:27,240
We're going to have some not reusable code so code that is very specific for our project.

6
00:00:27,370 --> 00:00:32,500
Examples of code that is specific to our project is the process of fetching movies where the process

7
00:00:32,500 --> 00:00:37,870
of deciding what an individual movie should look like inside the autocomplete in the code related to

8
00:00:37,870 --> 00:00:45,100
deciding what to do when an option is clicked on then we're going to have a second file called autocomplete

9
00:00:45,280 --> 00:00:47,370
J.S. inside there.

10
00:00:47,380 --> 00:00:53,710
We're going to have some extremely reusable code that is all related to getting an autocomplete to display

11
00:00:53,770 --> 00:00:55,930
on the screen successfully.

12
00:00:55,930 --> 00:01:00,020
That file should be 100 percent reusable between different projects.

13
00:01:00,130 --> 00:01:06,280
And so because of that we need to make sure that everything inside that file has zero knowledge of exactly

14
00:01:06,340 --> 00:01:09,160
what a movie is or what that recipe is.

15
00:01:09,160 --> 00:01:14,410
If we were building something around showing recipes or what a blog is and so on.

16
00:01:14,410 --> 00:01:19,630
In addition we want to make sure that the code in this file can be executed several times successfully.

17
00:01:19,630 --> 00:01:23,830
The idea there being that we want to have the ability to show several different auto completes on the

18
00:01:23,830 --> 00:01:29,130
screen at the same time without having to do that crazy renaming of variables or anything like that

19
00:01:30,840 --> 00:01:32,100
so let's make this happen.

20
00:01:32,190 --> 00:01:39,160
We're going to create a function inside of auto complete J.S. that's going to take a configuration object.

21
00:01:39,210 --> 00:01:44,100
It's going to process the options inside that configuration object and then render an auto complete

22
00:01:44,190 --> 00:01:50,380
out onto the screen so inside of that configuration object that's going to be created inside of index

23
00:01:50,380 --> 00:01:57,310
dot J.S. we're going to have to provide all the code that is like customized for the very specific application

24
00:01:57,550 --> 00:01:59,180
of this auto complete.

25
00:01:59,200 --> 00:02:02,570
So let me tell you about what our config object might look like.

26
00:02:02,590 --> 00:02:06,540
I think that our config object is going to have three different properties inside of it.

27
00:02:06,610 --> 00:02:12,610
It's going to have a function that is used to find movies a function that is used to render out an individual

28
00:02:12,640 --> 00:02:19,700
option inside the auto complete a function that says exactly what to do when the user clicks on an option.

29
00:02:19,760 --> 00:02:25,910
And finally an element that designates exactly where the autocomplete should be rendered to inside of

30
00:02:25,910 --> 00:02:33,180
our final HMO document so because we are passing these three very or four very critical options inside

31
00:02:33,180 --> 00:02:39,510
of a config object that object right there is essentially a wrapping up all the customized code specific

32
00:02:39,510 --> 00:02:45,210
to our application that's going to pass it off to autocomplete dot J.S. auto complete digest and then

33
00:02:45,210 --> 00:02:51,540
going to call some of those very specific functions whenever it needs to say get some data or decide

34
00:02:51,540 --> 00:02:56,820
how to render out each option or what to do whenever user clicks on an option.

35
00:02:56,820 --> 00:03:03,300
So in other words all the not reusable code gets defined inside of index not J.S. and all the reusable

36
00:03:03,300 --> 00:03:09,700
code is inside of autocomplete dot J.S. then if we ever want to reuse all this stuff on another project

37
00:03:09,940 --> 00:03:16,360
we're going to take autocomplete dot J.S. add it to the new project come up with a new config object

38
00:03:16,390 --> 00:03:24,190
that has the exact same options inside of it and pass it into the same function so that's the idea.

39
00:03:24,190 --> 00:03:26,400
That's how we're going to make our code reusable.

40
00:03:26,650 --> 00:03:33,310
Now if I am explaining this right now and it makes zero sense that is totally okay and really very much

41
00:03:33,310 --> 00:03:38,320
expected I really do not expect you to like look at this diagram and know exactly what is going on right

42
00:03:38,320 --> 00:03:38,530
away.

43
00:03:38,530 --> 00:03:43,120
This is just your first taste of what we're going to be doing and how we're going to make all this code

44
00:03:43,120 --> 00:03:44,740
reusable in nature.

45
00:03:44,840 --> 00:03:47,770
It's now that we have a vague idea of what we're going to do.

46
00:03:47,950 --> 00:03:49,260
Let's take another pause right here.

47
00:03:49,270 --> 00:03:53,500
We can come back the next video we're gonna start to create these two separate files and then split

48
00:03:53,500 --> 00:03:57,850
apart all of our code into these separate different implementations.

49
00:03:57,850 --> 00:03:59,440
So I'll see you in just a minute.
