WEBVTT
1
00:00:00.180 --> 00:00:05.220
Next up I want to continue talking about four of we'll see another example and we'll also talk about

2
00:00:05.220 --> 00:00:11.130
situations when it doesn't help you and you might actually prefer a standard for loop even if it's longer

3
00:00:11.130 --> 00:00:11.970
and uglier.

4
00:00:11.970 --> 00:00:14.540
Here I have a simple two dimensional array.

5
00:00:14.640 --> 00:00:16.850
It's representing a magic square.

6
00:00:17.100 --> 00:00:18.710
I don't know if you've seen them before.

7
00:00:18.780 --> 00:00:23.670
It's a square of numbers a grid where each row sums to some number.

8
00:00:23.670 --> 00:00:31.770
In this case 15 so you can see all of them sum to 15 each vertical so each column also sums to 15 and

9
00:00:31.830 --> 00:00:34.130
each diagonal sums to 15.

10
00:00:34.140 --> 00:00:36.100
If it's a correct magic square.

11
00:00:36.510 --> 00:00:41.730
Now we're not going to write code to verify every single direction but if I wanted to just sum each

12
00:00:41.730 --> 00:00:50.190
row and verify that they equal 15 using a for loop regular for loop it's kind of annoying let I equals

13
00:00:50.190 --> 00:00:51.270
zero.

14
00:00:51.300 --> 00:00:58.470
I'm going to have to do a nested loop I less than magic square dot length and then I plus plus and that's

15
00:00:58.470 --> 00:01:01.590
going to get me each row one row at a time.

16
00:01:01.590 --> 00:01:04.500
So then I need to loop again to get those innards.

17
00:01:04.500 --> 00:01:06.720
Each element in the row.

18
00:01:06.720 --> 00:01:16.600
And what I'd like to do is make a variable called row and just set it equal to magic square of I.

19
00:01:17.520 --> 00:01:23.910
So now row in this loop is going to refer to one of these nested arrays and then I'll loop over row.

20
00:01:23.970 --> 00:01:37.440
So for let's j equals zero J less than road out length J plus plus and then for each J we could start

21
00:01:37.440 --> 00:01:38.750
by just constant logging J.

22
00:01:38.750 --> 00:01:41.820
To make sure it works does it work.

23
00:01:41.820 --> 00:01:42.180
OK.

24
00:01:42.210 --> 00:01:48.630
So kind of we're printing out the indices we need row of J.

25
00:01:48.630 --> 00:01:50.140
And now we're getting those numbers.

26
00:01:50.370 --> 00:01:55.760
But I want to sum them together three at a time each element or all elements in one of those rows.

27
00:01:55.800 --> 00:01:59.340
I want to sum them together and print out ideally 15.

28
00:01:59.430 --> 00:02:05.920
So what I'm going to do is make another variable up top called Sum so not all the way up top.

29
00:02:05.940 --> 00:02:10.800
But each time through the loop the outer loop I want to reset it to zero because I'm looping over this

30
00:02:11.040 --> 00:02:12.210
summing them together.

31
00:02:12.210 --> 00:02:17.430
But the next time this outer loop goes it iterate I want it to start again at zero so I can sum these

32
00:02:17.430 --> 00:02:21.110
up without having the previous sum in there as well.

33
00:02:21.390 --> 00:02:27.750
And then I would just do some plus equals row of J.

34
00:02:27.750 --> 00:02:31.850
And then after this inner loop I could control that log sum.

35
00:02:32.610 --> 00:02:40.710
I'll probably do row added two on not just add a whole row right there summed to.

36
00:02:40.710 --> 00:02:43.960
And then dollars on some.

37
00:02:44.700 --> 00:02:49.530
Let's see it we get to seven six up to 15 seven to 15.

38
00:02:49.560 --> 00:02:49.920
Okay.

39
00:02:50.250 --> 00:02:56.340
So this is okay with a regular for loop but if we instead rewrote it using a for of loop I think it's

40
00:02:56.340 --> 00:03:03.660
much cleaner we would just do for that row of magic square.

41
00:03:03.660 --> 00:03:12.720
We'd still make our some variable let's some equals zero and then for let's let's go with NUM element

42
00:03:13.880 --> 00:03:19.350
I'll just go with it num I think that's fine of row.

43
00:03:19.350 --> 00:03:21.760
So I don't have to make the second variable here.

44
00:03:21.810 --> 00:03:29.460
I don't have to use I or J just for let row I have access to row in here row refers to each individual

45
00:03:29.700 --> 00:03:30.320
nested array.

46
00:03:30.330 --> 00:03:40.020
Each row then for letting some of those rows of each row I'm going to some plus equals now and then

47
00:03:40.050 --> 00:03:42.460
I'll copy this line here.

48
00:03:43.140 --> 00:03:48.450
This council that logged down below I'll comment out that original one with the for loop and we get

49
00:03:48.450 --> 00:03:53.450
the exact same output but this is much cleaner and easier to see and understand.

50
00:03:53.520 --> 00:03:56.610
So that's an example where a four of really helps.

51
00:03:56.610 --> 00:03:59.180
And I also wanted to show a nested example.

52
00:03:59.220 --> 00:04:03.790
Now here's another example where it's actually not to your advantage to use for.

53
00:04:04.560 --> 00:04:12.840
I have two arrays of strings words one in words two I want to loop over the first array and for each

54
00:04:12.870 --> 00:04:20.370
element I want to also print out the corresponding element from words to so mailbox milkshake bathtub

55
00:04:20.430 --> 00:04:28.710
and BlackBerry using a for a traditional for loop is the way to go because I need to have an index I

56
00:04:28.710 --> 00:04:33.380
need to know which number we're printing out or which index we're accessing in words 1.

57
00:04:33.600 --> 00:04:41.010
So I can do the same thing in words too if instead I did a for loop I would have each value mail and

58
00:04:41.010 --> 00:04:47.090
milk but I wouldn't have that number that index to access the corresponding value from words to.

59
00:04:47.700 --> 00:04:49.820
So I do want a regular for loop here.

60
00:04:49.890 --> 00:04:56.770
Let I equals zero I less than words one dot length I plus plus.

61
00:04:57.480 --> 00:05:05.780
And then I'll just simply consider log words one of I comma words two of the same.

62
00:05:05.800 --> 00:05:13.850
I so I will be zero words one of zero alpha male words two of zero bucks.

63
00:05:14.280 --> 00:05:15.690
Let's test it out.

64
00:05:15.690 --> 00:05:18.530
Mailbox milkshake bathtub BlackBerry.

65
00:05:18.720 --> 00:05:27.100
Technically if I wanted to be one word I could use back ticks interpolate each one.

66
00:05:27.480 --> 00:05:29.400
Do it again maybe add a hyphen.

67
00:05:29.400 --> 00:05:31.860
I don't know if they're supposed to be hyphenated.

68
00:05:31.860 --> 00:05:33.420
We'll just do one word.

69
00:05:33.450 --> 00:05:34.360
Same thing here.

70
00:05:36.470 --> 00:05:41.060
Okay so now we should just get one word if we tried to do this with a for of loop.

71
00:05:41.070 --> 00:05:43.740
It would not be easy at all.

72
00:05:43.740 --> 00:05:49.470
We would have to use four of on this first loop and then work backwards to figure out what number what

73
00:05:49.470 --> 00:05:52.580
index is male at what index is milk at.

74
00:05:52.650 --> 00:05:58.230
We could do something like index of and then get that number and then take that number and plug it plug

75
00:05:58.230 --> 00:06:00.120
it into words to which is just not ideal.

76
00:06:00.510 --> 00:06:06.630
So my point here is that four of his great a lot of the time and it's really common just to need the

77
00:06:06.630 --> 00:06:08.940
data in an array or a string.

78
00:06:08.940 --> 00:06:14.370
But if you need to care about the index that position like we did here then it's not going to work out

79
00:06:14.370 --> 00:06:20.280
for you or it won't be as easy as it would be to just generate those indices using a traditional for

80
00:06:20.280 --> 00:06:20.870
loop instead.
