1
00:00:00,660 --> 00:00:03,000
Well we now understand the basics of matter J.S..

2
00:00:03,000 --> 00:00:06,500
So now we can start to think about how we're going to build this actual maze.

3
00:00:06,720 --> 00:00:10,560
In this video I'm going to give you an overview of the algorithm that we're going to use to generate

4
00:00:10,560 --> 00:00:11,540
the maze itself.

5
00:00:11,640 --> 00:00:13,410
And we'll start to write out the code for it.

6
00:00:13,410 --> 00:00:18,350
So let's talk about how we're going to generate the maze that we're going to go through the algorithm

7
00:00:18,440 --> 00:00:19,460
that you see right here.

8
00:00:19,480 --> 00:00:23,210
I'm going to first give you a verbal description and then we'll take a look at a series of diagrams

9
00:00:23,210 --> 00:00:26,770
to help you understand how this actually builds a maze out.

10
00:00:26,960 --> 00:00:33,350
The first thing we're going to do is create a grid of cells a cell essentially represents each space

11
00:00:33,380 --> 00:00:35,100
that a user can visit.

12
00:00:35,180 --> 00:00:40,130
If we go back to the original diagram over here right here this kind of rectangular space like right

13
00:00:40,130 --> 00:00:44,270
there that is one cell and then right next to it we've got another cell.

14
00:00:44,420 --> 00:00:49,120
And then right underneath that another cell another cell and so on.

15
00:00:49,120 --> 00:00:56,020
So we're going to build out a 2D array or a two dimensional right to represent this grid of cells we're

16
00:00:56,020 --> 00:01:02,140
then going to pick a random starting cell inside there and then starting at that cell we're going to

17
00:01:02,140 --> 00:01:07,480
build a randomly ordered list of all of its neighbors for each neighbor that we find.

18
00:01:07,480 --> 00:01:12,070
We're gonna say that if we've already kind of visited that cell so to speak we'll discuss what it exactly

19
00:01:12,070 --> 00:01:14,070
means to visit a cell in just a moment.

20
00:01:14,170 --> 00:01:19,980
We're going to remove it from the randomly ordered list then for each remaining neighbor.

21
00:01:20,020 --> 00:01:25,600
We're going to move to that neighbor and we're going to remove the wall between those two cells and

22
00:01:25,600 --> 00:01:28,840
then we're going to repeat that process for that new neighbor.

23
00:01:28,870 --> 00:01:33,610
We're going to go back there and repeat this process over and over and over again.

24
00:01:33,620 --> 00:01:38,120
Now I really don't expect you to understand this algorithm just from these kind of text steps right

25
00:01:38,120 --> 00:01:38,700
here.

26
00:01:38,720 --> 00:01:44,330
So instead let me show you a quick diagram and help you really understand what's going on here OK.

27
00:01:44,380 --> 00:01:46,830
So this represents a starting grid.

28
00:01:46,870 --> 00:01:51,350
This is going to be a 2D array that we're going to build out of some javascript code.

29
00:01:51,490 --> 00:01:54,820
So we're going to pick a random starting cell inside of here.

30
00:01:54,820 --> 00:01:58,470
We're then going to iterate it using the same steps that I just spoke about right here.

31
00:01:58,480 --> 00:02:04,560
We're going to see how it eventually is going to build us a randomized Nate's.

32
00:02:04,770 --> 00:02:09,680
Let me get a different color really quickly get so out of our grade right here.

33
00:02:09,680 --> 00:02:12,260
We're going to first start off with a random cell.

34
00:02:12,290 --> 00:02:16,340
So in this case I'm going to start off with a random cell of that one right there.

35
00:02:16,340 --> 00:02:19,620
We're then going to take a look at all of the cells different neighbors.

36
00:02:19,640 --> 00:02:24,470
So in this case I'm going to look above to the left to the right and below.

37
00:02:25,130 --> 00:02:33,340
So the four possible neighbors I have are one two three and four it's on then going to pick one of these

38
00:02:33,340 --> 00:02:35,270
neighbors at random to visit.

39
00:02:35,290 --> 00:02:38,020
So maybe in this case I decide to go down.

40
00:02:38,020 --> 00:02:43,230
So I would go down to this cell right here when I go down there.

41
00:02:43,260 --> 00:02:54,640
I'm going to remove the wall between those two cells so I would delete this wall right here then at

42
00:02:54,640 --> 00:02:58,470
this new cell I would now take a look at all of this one's new neighbors.

43
00:02:58,540 --> 00:03:03,950
So there's a neighbor above a neighbor to left below and to the right.

44
00:03:04,270 --> 00:03:09,260
Now in this case I have already been to or kind of visited or processed the neighbor above.

45
00:03:09,850 --> 00:03:16,430
So in this case I would drop the neighbor above from my list of possible cells that I could visit so

46
00:03:16,490 --> 00:03:19,700
then maybe in this case I would decide to go to the left.

47
00:03:19,820 --> 00:03:21,380
So I'm going to visit to the left.

48
00:03:21,590 --> 00:03:28,270
Go over here and then just like before I'll delete the wall right there.

49
00:03:29,010 --> 00:03:32,270
And now this process essentially is going to repeat itself over and over again.

50
00:03:32,270 --> 00:03:37,480
So right here I've got three possible moves in this case I'll decide to go up.

51
00:03:37,700 --> 00:03:41,620
And again this is totally random I'll go up to right there.

52
00:03:41,790 --> 00:03:43,470
I will remove the wall in between

53
00:03:46,610 --> 00:03:48,680
I've now only got two possible moves.

54
00:03:48,810 --> 00:03:53,040
So either up or to the left because I've already been below and to the right.

55
00:03:53,080 --> 00:03:54,620
So now maybe I go.

56
00:03:54,690 --> 00:04:02,830
How about to the left now I can go up or down and only a couple more steps here because there's one

57
00:04:02,830 --> 00:04:07,890
kind of corner case I want to point out to you here really quickly now maybe I would decide to go up

58
00:04:09,970 --> 00:04:17,830
now I'd go up here I've only got one possible direction now I'm going to imagine that I come over and

59
00:04:17,830 --> 00:04:24,360
then maybe I come over again I come over again and now I've got a random decision to make once again

60
00:04:24,360 --> 00:04:27,690
I can either go to the right over here or below right there.

61
00:04:27,690 --> 00:04:34,560
So I'm going to say imagine that maybe you randomly I go down and then randomly I go down one more randomly

62
00:04:34,620 --> 00:04:38,090
down I know kind of crazy odds to go down that many times in a row.

63
00:04:38,100 --> 00:04:39,790
But let's just imagine for a second.

64
00:04:39,910 --> 00:04:43,240
And now here's where we start to get to a really interesting situation.

65
00:04:43,350 --> 00:04:48,760
Let's imagine I come over here and end up right here.

66
00:04:48,780 --> 00:04:51,220
It's now in this scenario as I am right here.

67
00:04:51,310 --> 00:04:56,260
I don't have any additional way to move but there are still unlimited squares all the way over here

68
00:04:56,260 --> 00:04:58,600
on the right hand side that I still need to visit.

69
00:04:58,930 --> 00:05:04,600
If I ever get to a point where I have no possible moves whatsoever then I would essentially backtrack.

70
00:05:04,600 --> 00:05:10,420
So I would go back until I find a cell that does have a valid neighbor to move to.

71
00:05:10,670 --> 00:05:12,300
To the first one as I backtrack.

72
00:05:12,310 --> 00:05:15,370
That would have a valid move would be this one right here.

73
00:05:16,310 --> 00:05:22,570
So backtrack from here all the way to this cell right here and then back at this cell.

74
00:05:22,640 --> 00:05:25,780
I would once again say what are my valid neighbors in this case.

75
00:05:25,790 --> 00:05:27,760
I can only possibly go to the right.

76
00:05:27,830 --> 00:05:33,140
So I would move over that way and then repeat the process for all the rest of those squares.

77
00:05:33,160 --> 00:05:37,130
Now as I drew out some of these steps here rather quickly I didn't remove the walls but just be clear

78
00:05:37,490 --> 00:05:40,110
I still would be removing the walls all along the way.

79
00:05:40,430 --> 00:05:50,620
So I would drop that one that one right there right there right there and so on all the way through.

80
00:05:50,830 --> 00:05:57,030
This drawing is getting a little bit messy here and one other right there.

81
00:05:57,120 --> 00:06:00,170
It's getting a bit messy here so I got to delete some of the red lines.

82
00:06:00,380 --> 00:06:04,650
Now if I do so you're going to start to see how I actually do end up getting a real maze shape here

83
00:06:05,940 --> 00:06:08,080
I'm going to delete all those lines I drew on

84
00:06:12,060 --> 00:06:14,750
and you can really start to see the maze start to form out.

85
00:06:14,750 --> 00:06:22,400
So if I imagine I kept on going through this maybe I went from this one here to the right and then up

86
00:06:22,910 --> 00:06:27,290
and then like something like this you know if I trace that out and removed all the appropriate walls

87
00:06:28,190 --> 00:06:31,130
I really would start to see the entire maze start to form

88
00:06:34,210 --> 00:06:44,800
so drop the walls for each one that I cross over and there we go there's my entire maze.

89
00:06:44,800 --> 00:06:46,120
That's the general idea.

90
00:06:46,270 --> 00:06:48,240
Again we're going to build out the grid.

91
00:06:48,340 --> 00:06:52,840
We're gonna pick a random cell look at the neighbors walk to each neighbor as soon as we do we're going

92
00:06:52,840 --> 00:06:57,480
to drop the wall if we ever get to a point where there are no valid moves as we saw right there.

93
00:06:57,580 --> 00:07:02,860
We're going to backtrack until we find a cell that there is a valid move at and we'll repeat the process

94
00:07:03,070 --> 00:07:04,640
from that cell.

95
00:07:04,660 --> 00:07:08,740
So this is how we're going to generate the mates it's going to make sure that we always end up with

96
00:07:09,010 --> 00:07:13,290
one valid path to every single square inside of our grid.

97
00:07:13,310 --> 00:07:18,040
So this is going to guarantee that if I have a starting position up here as we said that our app was

98
00:07:18,280 --> 00:07:22,870
and I want to get to the ending position down here at the bottom right hand side there will always be

99
00:07:22,870 --> 00:07:24,450
a valid route to get there.

100
00:07:25,330 --> 00:07:26,110
So that's the idea.

101
00:07:26,110 --> 00:07:30,010
That's how we're going to implement this as you can imagine some of the code for it is gonna be a little

102
00:07:30,010 --> 00:07:34,660
bit challenging but at the end of the day as long as you remember back to this example right here it

103
00:07:34,660 --> 00:07:37,150
will eventually make some sense.

104
00:07:37,150 --> 00:07:41,500
One thing that I highly recommend that you do as we start to write out all this code is get out a sheet

105
00:07:41,500 --> 00:07:44,200
of paper and try to sketch out a grid like this one right here.

106
00:07:44,230 --> 00:07:48,550
I'm going to continue to do a lot of drawings to help you understand every step along the way but it's

107
00:07:48,550 --> 00:07:53,350
really no substitute for you getting out a piece of paper on your own and kind of drawing out or diagramming

108
00:07:53,350 --> 00:07:56,400
the maze creation process.

109
00:07:56,470 --> 00:08:01,210
So now that we understand the general idea or the general strategy let's take a pause right here and

110
00:08:01,210 --> 00:08:03,340
talk some more specifics in the next video.
