WEBVTT
1
00:00:01.160 --> 00:00:05.220
These console logs we just added in are great for communicating some output back to the user.

2
00:00:05.300 --> 00:00:07.240
But right now they're kind of hard to read.

3
00:00:07.280 --> 00:00:12.200
So if I go back to that for each test file and delete all the gibberish at the bottom and save this

4
00:00:12.950 --> 00:00:18.330
I can then run the test file again and well it's just kind of hard to interpret exactly what's going

5
00:00:18.330 --> 00:00:19.310
on here.

6
00:00:19.350 --> 00:00:23.700
So I think that we need to add in some better formatting overall in addition to what would be really

7
00:00:23.700 --> 00:00:26.160
awesome is if we could color code the output.

8
00:00:26.550 --> 00:00:31.290
So if we can mark this line as like Green to indicate that hey this test went okay and if we can mark

9
00:00:31.320 --> 00:00:37.030
all of this stuff as red to indicate Hey something just went wrong so to do so we can use that chalk

10
00:00:37.030 --> 00:00:49.010
library that we used a long time ago so I'll navigate to NPM j ust dot com search for Chuck find Chuck

11
00:00:49.010 --> 00:00:54.590
right here and remember the entire goal this module is just to allow us to very easily put out some

12
00:00:54.590 --> 00:00:59.940
console logs in the terminal that are color coded so we can take a look at some quick examples.

13
00:00:59.950 --> 00:01:05.020
Yes pretty much all we have to do so we can call console log with chalk dot whatever color we want and

14
00:01:05.020 --> 00:01:07.130
then pass in the string to console log.

15
00:01:07.240 --> 00:01:13.710
So let's install shock really quickly and just try this out with the belt better color coding so I can

16
00:01:13.720 --> 00:01:20.510
flip back over to my terminal I'm gonna change out of the sample project directory back into Tumi because

17
00:01:20.510 --> 00:01:25.110
remember we want to add this dependency to Tumi not the sample project.

18
00:01:25.130 --> 00:01:30.360
So instead of team you'll do an npm install chuck that will install rather quickly it's a pretty small

19
00:01:30.360 --> 00:01:31.110
package.

20
00:01:31.230 --> 00:01:35.120
Of course I'm on some kind of junkie Internet right now so it's going to take me slightly longer.

21
00:01:35.370 --> 00:01:37.730
I'll then change back into sample project.

22
00:01:38.130 --> 00:01:40.250
So I'm in sample project again.

23
00:01:40.320 --> 00:01:47.590
Let's go back over to our implementation so here's runner dot J.S. at the very top.

24
00:01:47.590 --> 00:01:53.600
We will require in shock and then updates on these different console logs at the top.

25
00:01:53.630 --> 00:01:58.450
I'm going to get Chuck from Chuck

26
00:02:01.860 --> 00:02:06.690
then down inside of our run tests or the console log of Okay right here.

27
00:02:06.690 --> 00:02:08.760
I'll wrap that with a chalk dot Green

28
00:02:11.820 --> 00:02:18.340
the two heirs I will wrap with a choc dot read and a chalkboard read

29
00:02:21.530 --> 00:02:23.990
and the area around requiring the file down here.

30
00:02:24.050 --> 00:02:26.850
I will wrap that with a chalkboard read as well.

31
00:02:26.850 --> 00:02:28.910
We don't really have to wrap that one but what the heck.

32
00:02:28.930 --> 00:02:30.140
Let's do it anyways.

33
00:02:30.260 --> 00:02:35.750
And then finally at what might also be kind of nice is if we add right before we start to run any given

34
00:02:35.750 --> 00:02:36.470
file.

35
00:02:36.650 --> 00:02:41.630
Let's just do a console log right away to indicate that we're about to run some tests for the given

36
00:02:41.630 --> 00:02:47.180
file that we're iterating over so I'll do a console dot log of chalk dot Gray.

37
00:02:47.180 --> 00:02:55.660
In this case and I'll do like dash dash dash and know let's do some string interpolation here just to

38
00:02:55.660 --> 00:03:02.070
get the file name in a little bit more easily and we can do file dot name okay.

39
00:03:02.110 --> 00:03:03.210
Now we have all this added in.

40
00:03:03.270 --> 00:03:04.370
Let's save this.

41
00:03:04.380 --> 00:03:08.580
I'll flip back over I'm once again inside of Tumi.

42
00:03:08.650 --> 00:03:11.480
Ask me I'm inside of sample project inside a sample project.

43
00:03:11.480 --> 00:03:13.960
I'm going to run Tumi and there we go.

44
00:03:14.000 --> 00:03:18.890
Now I can very easily see the name of the file and I can see the color coded output.

45
00:03:19.070 --> 00:03:22.730
Now looking at this I'm still unfortunately a little bit unhappy.

46
00:03:22.730 --> 00:03:28.710
We've got this giant path right here which is just not the most useful thing in the world so it'd be

47
00:03:28.710 --> 00:03:33.690
kind of nice if we could just show like the relative path inside of our current working directory or

48
00:03:33.690 --> 00:03:37.240
inside of whatever folder we're running all the stuff from.

49
00:03:37.380 --> 00:03:42.720
So to do so well you can go back to our collect files function which is right below.

50
00:03:42.720 --> 00:03:48.340
Run tests so inside of collect files remember after we find found a file that we really care about.

51
00:03:48.360 --> 00:03:49.800
So that's the if statement right here.

52
00:03:49.890 --> 00:03:55.800
We pushed it into to test files and we pushed in an object that had a name and we set that equal to

53
00:03:55.800 --> 00:04:00.110
the file path the file path was the entire absolute path.

54
00:04:00.810 --> 00:04:04.040
So if we wanted to we could add in an additional property here.

55
00:04:04.140 --> 00:04:10.490
How about like short name and have that be just the file so file right there is like just the name of

56
00:04:10.490 --> 00:04:12.550
the file relative to the root directory.

57
00:04:12.710 --> 00:04:21.280
So for short name all provide file so now when we iterate over test files rather than counsel logging

58
00:04:21.280 --> 00:04:27.760
out the name we can counsel out just short name and see not the entire absolute path so I'll go back

59
00:04:27.760 --> 00:04:35.050
up find the console log of Gary that we just added in and I'll do short name right there.

60
00:04:35.230 --> 00:04:36.170
We'll say this again.

61
00:04:36.240 --> 00:04:37.400
Pull it back over.

62
00:04:37.670 --> 00:04:38.800
I will tell me.

63
00:04:39.020 --> 00:04:44.700
And now we see that much more condensed output everything relative to the root project folder okay.

64
00:04:44.740 --> 00:04:47.030
So definite looks a little bit better.

65
00:04:47.230 --> 00:04:52.120
Now I'm once again thinking to myself how right is better organized but just a little bit better if

66
00:04:52.120 --> 00:04:55.090
we indented all this stuff kind of equally as well.

67
00:04:55.090 --> 00:04:59.440
I apologize for all this nit picking but it's some stuff that I just want to go through really quickly.

68
00:04:59.470 --> 00:05:00.750
So another quick pause.

69
00:05:00.850 --> 00:05:05.380
We're gonna do just a little bit better formatting on this test report and then continue with our implementation.
