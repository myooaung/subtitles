WEBVTT
1
00:00:00.670 --> 00:00:05.140
The last video we got a better sense of how it node is going to automatically wrap all the different

2
00:00:05.140 --> 00:00:10.060
files we write instead of our project with that kind of invisible function that has some arguments inside

3
00:00:10.060 --> 00:00:10.850
of it.

4
00:00:10.990 --> 00:00:15.040
In this video I want to now expand on that a little bit more and give you a better sense of how that

5
00:00:15.040 --> 00:00:16.370
require function works.

6
00:00:16.390 --> 00:00:22.470
Along with that module dot exports thing to get started going to first find my next dot J.S. file and

7
00:00:22.510 --> 00:00:25.710
I can restore the code that we had inside of here just a little bit ago.

8
00:00:25.790 --> 00:00:33.760
So I'll say const message is require dot slash my script dot J.S. and then I'll do a quick console log

9
00:00:33.850 --> 00:00:42.300
of message like so OK I'm going to run this file again just make sure everything still works.

10
00:00:42.300 --> 00:00:43.860
Yep it looks good.

11
00:00:43.950 --> 00:00:44.220
All right.

12
00:00:44.280 --> 00:00:48.110
So let's focus on what this required function right here is really doing.

13
00:00:48.270 --> 00:00:53.130
And there's like one or two really important things I want to point out in particular these two important

14
00:00:53.130 --> 00:00:58.110
things are not super relevant for any code that we're going to be writing right now but these are definitely

15
00:00:58.110 --> 00:01:03.180
some ideas that are going to come up along your javascript career and give you some pain.

16
00:01:03.180 --> 00:01:04.920
And so I want to just point them out right now.

17
00:01:04.950 --> 00:01:09.920
So at the very start of learning node you are aware of these big issues.

18
00:01:10.070 --> 00:01:10.420
OK.

19
00:01:10.500 --> 00:01:18.040
So quick diagram so when we run a node at our terminal right now we are executing the index dot J.S.

20
00:01:18.060 --> 00:01:19.350
file remember.

21
00:01:19.350 --> 00:01:23.250
That means that we're going to take everything inside the index dot j ust file wrap it with that kind

22
00:01:23.250 --> 00:01:27.930
of invisible function and then execute it when we run the code inside there.

23
00:01:27.930 --> 00:01:34.620
We call that require function and we pass in an argument of dot slash my script dot J.S. again at the

24
00:01:34.620 --> 00:01:39.720
dot slash means look in the current working directory or in the current directory and find a file called

25
00:01:39.810 --> 00:01:42.080
my script dot J.S..

26
00:01:42.230 --> 00:01:47.900
So here's what happens behind the scenes and we call require node is going to look out into the current

27
00:01:48.200 --> 00:01:55.010
file folder and find that file defines it right here it's then going to wrap the contents of this file

28
00:01:55.010 --> 00:01:58.460
with that same kind of invisible function and execute it.

29
00:01:58.730 --> 00:02:02.890
We then assign a value of high to a module that exports.

30
00:02:02.900 --> 00:02:09.080
Now as we have seen several times now we're essentially saying take that value of high and assign it

31
00:02:09.080 --> 00:02:14.810
back over to const message or really the message variable but there's something else that goes on behind

32
00:02:14.810 --> 00:02:21.710
the scenes at the exact same time when we require in a file and we run that file and get some exports

33
00:02:21.710 --> 00:02:22.420
from it.

34
00:02:22.700 --> 00:02:29.540
We are simultaneously going to update something called the require cash the required cash is a object

35
00:02:29.840 --> 00:02:33.650
that stores the results of requiring in a file.

36
00:02:33.650 --> 00:02:40.280
So this is an object right here that has some number of keys and values different keys of this object

37
00:02:40.340 --> 00:02:43.680
are going to be the names of the different files that we require in.

38
00:02:43.780 --> 00:02:50.840
So when we require in my script J.S. we can imagine that we add a new key into this object of my script

39
00:02:51.340 --> 00:02:59.550
that J.S. and then the value is going to be whatever we exported from that file.

40
00:02:59.560 --> 00:03:02.750
So in this case we exported the string simply high.

41
00:03:02.890 --> 00:03:08.810
So inside this cache right here we put in high as a value so now here's the key part.

42
00:03:09.200 --> 00:03:16.460
If we ever tried to require in my script J.S. a second time like let's imagine that we copy paste down

43
00:03:16.610 --> 00:03:20.210
and just run required my script directly like so.

44
00:03:20.240 --> 00:03:24.830
The second require statement right here is not going to cause the my script.

45
00:03:24.840 --> 00:03:26.880
J ust file to be executed again.

46
00:03:26.990 --> 00:03:29.380
So this is not what happens.

47
00:03:29.390 --> 00:03:31.070
That does not occur.

48
00:03:31.100 --> 00:03:36.980
Instead note is going to take a look at the required cash that's going to see that we've already required

49
00:03:36.980 --> 00:03:39.000
in that file called my script.

50
00:03:39.100 --> 00:03:40.170
Yes.

51
00:03:40.310 --> 00:03:43.980
So instead of executing that file it's going to take a little shortcut.

52
00:03:44.060 --> 00:03:50.720
It's going to take a look at whatever had been exported previously and just give us that value directly.

53
00:03:50.720 --> 00:03:54.350
So in other words this is again a big key point in a note.

54
00:03:54.350 --> 00:04:01.970
J.S. Project we only ever execute every file one single time whatever we export from that file that

55
00:04:01.970 --> 00:04:03.540
one single time is what we get.

56
00:04:03.560 --> 00:04:05.110
Forever.

57
00:04:05.150 --> 00:04:07.810
Now I can prove all this stuff to you very easily.

58
00:04:07.820 --> 00:04:11.380
Let's take a look at some again behind the scenes stuff.

59
00:04:11.390 --> 00:04:14.540
The code that we're going to write right now is definitely not code that you're going to be writing

60
00:04:14.600 --> 00:04:15.830
on a daily basis.

61
00:04:15.860 --> 00:04:20.520
I'm just showing you this stuff so you understand what is happening.

62
00:04:20.710 --> 00:04:20.940
OK.

63
00:04:20.970 --> 00:04:26.550
So back inside of index dot J.S. I'm going to delete that console log off message I'm going to delete

64
00:04:26.550 --> 00:04:30.840
the message variable and just leave behind to require my script.

65
00:04:30.860 --> 00:04:37.330
J.S. and then I'm going to do a console log of require that cache.

66
00:04:37.460 --> 00:04:44.280
So again this is an object that stores the result of requiring in any file to our project it's going

67
00:04:44.290 --> 00:04:49.860
to save this lit back over to my terminal and run node indexed at J.S..

68
00:04:50.110 --> 00:04:54.940
There's a lot of stuff inside this console log but let's just try to pull out some of the most important

69
00:04:54.940 --> 00:05:00.730
parts if I scroll up just a little bit about halfway.

70
00:05:00.850 --> 00:05:03.540
Again this is really hard to read what's going on here.

71
00:05:03.640 --> 00:05:06.830
But there's one very particular thing I want to point out I actually want.

72
00:05:06.820 --> 00:05:09.550
I'm going to go to the top here make life a bit easier.

73
00:05:09.550 --> 00:05:15.910
So when we do that console log of the quiet cache it is an object we can tell that because we got that

74
00:05:15.910 --> 00:05:20.980
curly brace right there and then the keys like we just said are the different files that have been required

75
00:05:20.980 --> 00:05:22.180
into our project.

76
00:05:22.180 --> 00:05:27.910
So technically the index not J.S. file was required in if we scroll down a little bit more.

77
00:05:28.040 --> 00:05:32.310
I'll then see the second key value pair of my script.

78
00:05:32.330 --> 00:05:37.070
J.S. This is the key that says hey we've already required in my script.

79
00:05:37.080 --> 00:05:41.200
J.S. and then the value is the module object.

80
00:05:41.440 --> 00:05:46.390
I know in the diagram just a second ago I told you that what's get stored inside the cache is just what

81
00:05:46.390 --> 00:05:47.950
we export it from the file.

82
00:05:47.950 --> 00:05:53.650
But technically it is that entire module object inside that module object is whatever we export it.

83
00:05:53.710 --> 00:05:58.150
But for the purposes of the diagram it just makes life a little bit easier to imagine that we'd just

84
00:05:58.150 --> 00:06:00.660
store the expert add value.

85
00:06:00.690 --> 00:06:07.660
So again here's the result of requiring in the my script J.S. file we get this module object it has

86
00:06:07.660 --> 00:06:14.620
the idea the file which is really just the full directory name and file name of the file and then most

87
00:06:14.620 --> 00:06:19.900
importantly right there that is the entire key the big thing I want to show you the exports property

88
00:06:20.200 --> 00:06:23.020
so you can see exports right there says Hi there.

89
00:06:23.020 --> 00:06:28.190
So this entire object right here says hey we've already required in my script dot J.S..

90
00:06:28.390 --> 00:06:33.700
And when we required it that first time we got back a value of Hi there.

91
00:06:33.700 --> 00:06:39.820
And so now any time that we ever require in this file for a second time we're going to get whatever

92
00:06:39.910 --> 00:06:41.410
is right there.

93
00:06:41.410 --> 00:06:44.020
We don't run my script out just a second time.

94
00:06:44.080 --> 00:06:48.640
We just get that same string back over and over and over again.

95
00:06:48.660 --> 00:06:50.740
Now why is this relevant.

96
00:06:50.760 --> 00:06:55.140
Well in the case of exporting a string a string is always essentially a string.

97
00:06:55.710 --> 00:07:02.400
But if we ever have some kind of object where a variable declared inside of this my script j ust file

98
00:07:02.400 --> 00:07:07.770
that changes over time life is going to start to get really really interesting.

99
00:07:07.770 --> 00:07:08.960
Let's take a quick pause right here.

100
00:07:08.970 --> 00:07:12.150
When we come back next video we're gonna make some changes to my script.

101
00:07:12.210 --> 00:07:18.750
J.S. and we're going to see why it is so important at the very start of learning node to really understand

102
00:07:18.810 --> 00:07:22.690
this module system so it could puzzle I'll see you in just a minute.
