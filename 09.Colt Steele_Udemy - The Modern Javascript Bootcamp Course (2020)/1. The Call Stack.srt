1
00:00:00,300 --> 00:00:00,690
All right.

2
00:00:00,690 --> 00:00:01,530
Welcome back.

3
00:00:01,530 --> 00:00:04,360
We've got a big section here it includes a couple different topics.

4
00:00:04,410 --> 00:00:10,500
By the end our main goal is to make each GDP requests from javascript from the client or from the browser

5
00:00:10,800 --> 00:00:12,610
so load data from an API.

6
00:00:12,680 --> 00:00:14,310
Send a request somewhere.

7
00:00:14,310 --> 00:00:17,000
So very important stuff that you do all the time.

8
00:00:17,100 --> 00:00:22,110
If you make single page apps and in the projects that we build later on there's at least a couple examples

9
00:00:22,200 --> 00:00:25,620
where we're working with HDP requests in the browser.

10
00:00:25,620 --> 00:00:31,320
But before we do that we'll talk about promises and how we use promises to manage asynchronous code

11
00:00:31,320 --> 00:00:32,640
and make our life easier.

12
00:00:32,640 --> 00:00:37,120
But before we do that we're going to talk about asynchronous code or async javascript.

13
00:00:37,290 --> 00:00:42,540
What it actually means and in order to do that we need to understand how javascript works behind the

14
00:00:42,540 --> 00:00:42,960
scenes.

15
00:00:42,960 --> 00:00:45,370
At least we don't have to go crazy into detail.

16
00:00:45,390 --> 00:00:46,760
But we need to understand the basics.

17
00:00:47,100 --> 00:00:48,240
So that's where we're going to start.

18
00:00:48,240 --> 00:00:51,790
In this video we're going to talk about something called the call stack.

19
00:00:52,050 --> 00:00:57,090
So the call stack is a tool or a feature of JavaScript.

20
00:00:57,090 --> 00:01:00,560
It's also something you see in tons of other programming languages.

21
00:01:00,600 --> 00:01:05,550
What it does is it helps javascript keep track of where it is in your code.

22
00:01:05,550 --> 00:01:11,370
If you have multiple functions and some of those functions may call other functions which often we have

23
00:01:11,520 --> 00:01:16,980
functions that call functions that call functions that call stack is the mechanism by which the javascript

24
00:01:16,980 --> 00:01:19,680
interpreter keeps track of its place.

25
00:01:19,740 --> 00:01:25,480
It's how javascript knows which function is currently being run which functions are not done yet but

26
00:01:25,560 --> 00:01:28,080
waiting on results or return values.

27
00:01:28,140 --> 00:01:30,910
You can kind of think of it as this diagram here.

28
00:01:30,960 --> 00:01:36,780
If your script with a bunch of function calls is a massive book the call stack is the bookmark or your

29
00:01:36,780 --> 00:01:41,030
finger that you use to figure out where you are to keep track of your current place.

30
00:01:41,100 --> 00:01:47,690
And before we go into any more detail let's talk about these stack part think Call in call stack makes

31
00:01:47,700 --> 00:01:53,460
some sense it has to do with function calls which functions are being called what is or what's been

32
00:01:53,460 --> 00:01:56,200
called what is waiting on a result to come back.

33
00:01:56,220 --> 00:02:03,390
This stack part has to do with a data structure in computer science called a stack Stack is a very simple

34
00:02:03,390 --> 00:02:04,510
data structure.

35
00:02:04,620 --> 00:02:11,560
All you need to know is that just like a stack of books on your your desk or a stack of plates on your

36
00:02:11,560 --> 00:02:16,080
or in your sink the last thing that you put in is going to be on top.

37
00:02:16,380 --> 00:02:19,390
And that will be the first thing that you remove.

38
00:02:19,410 --> 00:02:25,920
So the last thing that was added the most recently placed item in our case this apple on top will be

39
00:02:25,920 --> 00:02:31,770
the first thing out you don't grab from the bottom of a stack of papers you grab from the top the most

40
00:02:31,770 --> 00:02:34,060
recently added thing to that stack.

41
00:02:34,410 --> 00:02:37,650
And that's important because that's how the call stack works.

42
00:02:37,650 --> 00:02:39,880
So we're going to walk through a simple example.

43
00:02:40,110 --> 00:02:44,550
Here's what you need to know when a script has some number of function calls.

44
00:02:44,550 --> 00:02:50,400
The very first function call that the javascript interpreter hits or reaches will be added to the call

45
00:02:50,400 --> 00:02:53,010
stack that function will be carried out.

46
00:02:53,010 --> 00:02:58,170
And if there are any other function calls within that first function they will be added to the top of

47
00:02:58,170 --> 00:02:59,430
the call stack.

48
00:02:59,550 --> 00:03:05,310
And that continues until one of those functions returns a value at which point it's removed from the

49
00:03:05,310 --> 00:03:05,780
stack.

50
00:03:05,790 --> 00:03:06,800
It's gone.

51
00:03:07,110 --> 00:03:12,630
And then the function that came before it will hopefully finish maybe there are some other function

52
00:03:12,630 --> 00:03:19,080
calls in which case those are added to the top of the stack and then removed or popped off as they complete.

53
00:03:19,080 --> 00:03:21,300
I think this will become clear if we have an example.

54
00:03:21,600 --> 00:03:24,160
So on the left I have a couple different functions.

55
00:03:24,210 --> 00:03:26,640
The first one is called is right triangle.

56
00:03:26,640 --> 00:03:31,050
It accepts three different arguments a B and C three different numbers.

57
00:03:31,050 --> 00:03:37,290
And it should return true if a and b if we square them and add them together you get C squared.

58
00:03:37,290 --> 00:03:39,420
A squared plus b squared equals c squared.

59
00:03:39,480 --> 00:03:44,180
So if something is a right triangle the third value here C would be the hypotenuse.

60
00:03:44,280 --> 00:03:47,840
These two would be the other side's K remember what they're called.

61
00:03:47,850 --> 00:03:52,140
But we have two sides on a triangle and then the hypotenuse in a right triangle.

62
00:03:52,140 --> 00:03:58,580
So nine would be three times three sixteen four times four in twenty five five times five.

63
00:03:58,650 --> 00:04:04,460
And that indeed would be a real right triangle nine plus sixteen does equal twenty five.

64
00:04:04,520 --> 00:04:04,890
Okay.

65
00:04:04,890 --> 00:04:10,320
So is right triangle is not a function that just returns something immediately it needs to call other

66
00:04:10,320 --> 00:04:11,340
functions.

67
00:04:11,340 --> 00:04:18,060
It's going to return if the square of a plus the square of B is triple equals to the square of C so

68
00:04:18,120 --> 00:04:23,480
square of a needs to be called and that in turn calls multiply x times x.

69
00:04:23,550 --> 00:04:30,540
So we pass in three multiply three times three which is a different function which returns to values

70
00:04:30,840 --> 00:04:32,580
the product of them.

71
00:04:32,610 --> 00:04:37,700
So when the interpreter encounters the very first function call is right triangle three four or five

72
00:04:37,980 --> 00:04:43,470
it's added to the call stack which is what I'm representing over here and we can't just get a value

73
00:04:43,470 --> 00:04:44,880
back immediately.

74
00:04:44,880 --> 00:04:48,070
There are multiple function calls in here that happen first.

75
00:04:48,120 --> 00:04:54,600
So square of a which is three in our case square of three we'll be the first thing to be added to the

76
00:04:54,690 --> 00:05:00,480
call stack which is what this side is square of three does not turn anything either.

77
00:05:00,770 --> 00:05:02,390
It calls a different function.

78
00:05:02,390 --> 00:05:06,120
Multiply three comma three which I'm showing here.

79
00:05:06,170 --> 00:05:08,210
So then multiply is added to the stack.

80
00:05:08,990 --> 00:05:10,760
So this function has not finished running.

81
00:05:10,820 --> 00:05:12,170
This one has not finished.

82
00:05:12,350 --> 00:05:18,260
This one doesn't call any other functions so it returns three times three which is nine.

83
00:05:18,530 --> 00:05:21,690
And when it returns a value it is removed from the stack.

84
00:05:21,710 --> 00:05:24,430
The last thing in is the first thing out.

85
00:05:24,440 --> 00:05:26,000
So then square of three.

86
00:05:26,090 --> 00:05:29,750
Now has a value back from multiply which was nine.

87
00:05:29,750 --> 00:05:31,850
So it can return that value.

88
00:05:31,850 --> 00:05:35,870
So it's popped off now we end up with is right triangle.

89
00:05:35,870 --> 00:05:38,660
That's the current function that is being executed.

90
00:05:38,660 --> 00:05:41,870
It's been waiting a while because those I mean a while it's relative.

91
00:05:41,900 --> 00:05:45,170
But I had to wait for two other function calls to return.

92
00:05:45,200 --> 00:05:47,450
So now you can kind of fill in the blanks here.

93
00:05:47,450 --> 00:05:51,110
The first part square of a square of three is nine.

94
00:05:51,110 --> 00:05:51,790
We have a value.

95
00:05:52,250 --> 00:05:52,970
Then it moves on.

96
00:05:52,970 --> 00:05:53,240
All right.

97
00:05:53,240 --> 00:05:54,320
Is there another function call.

98
00:05:54,700 --> 00:05:55,720
Yep there is.

99
00:05:55,760 --> 00:06:02,360
Square of four which is B so square of B so square is added to the top of the call stack.

100
00:06:02,370 --> 00:06:07,880
And when I say top it's not really a top and bottom situation it's just a data structure.

101
00:06:07,880 --> 00:06:10,730
Think of it kind of like an array but much simpler.

102
00:06:10,910 --> 00:06:14,650
But I'm just using top and bottom here to help explain visually what's going on.

103
00:06:14,720 --> 00:06:16,130
Like a stack of books.

104
00:06:16,130 --> 00:06:22,100
So square a four doesn't return a value right away at least it has to call multiply for column A four.

105
00:06:22,790 --> 00:06:29,080
So that's added to the top of the stack that does return a value X times Y four times for 16.

106
00:06:29,150 --> 00:06:33,680
So that pops off the stack then square off for now has a value for this.

107
00:06:33,680 --> 00:06:40,400
It fills in that blank sixteen which means that it's done because it returns sixteen and then we fill

108
00:06:40,400 --> 00:06:42,710
in the blank in is right triangle.

109
00:06:42,710 --> 00:06:45,530
We now have this done this done.

110
00:06:45,530 --> 00:06:49,360
And then we have our triple equals square of C square five.

111
00:06:49,370 --> 00:06:54,920
So five is added to the call stack that doesn't return a value yet it has to figure out what multiply

112
00:06:54,920 --> 00:06:56,520
a five comma five is.

113
00:06:56,570 --> 00:07:01,970
So that is the next function call added to the call stack that returns twenty five which means that

114
00:07:01,970 --> 00:07:03,650
square now has value.

115
00:07:03,650 --> 00:07:09,720
So both of those are popped off and then we end up with twenty five here no more function calls.

116
00:07:09,740 --> 00:07:11,320
Now just some simple math.

117
00:07:11,630 --> 00:07:16,130
And actually the order here it probably evaluates this first anyway nine plus 16.

118
00:07:16,130 --> 00:07:17,640
It doesn't actually matter here.

119
00:07:17,810 --> 00:07:23,580
We're just talking about function calls but we end up with nine for sixteen triple equals twenty five.

120
00:07:23,660 --> 00:07:25,170
That is true.

121
00:07:25,190 --> 00:07:31,870
So this function finally returns true at least in this case and it is popped off the stack call stack

122
00:07:31,910 --> 00:07:32,710
is empty.

123
00:07:32,870 --> 00:07:34,510
It returns true and we're done.

124
00:07:34,550 --> 00:07:39,620
So that is a brief intro to the call stack in the next video I'll show you an example of how you can

125
00:07:39,620 --> 00:07:44,390
actually see it using the dev tools or at least a representation of it with your own code and you can

126
00:07:44,390 --> 00:07:46,550
step through it step by step.

127
00:07:46,550 --> 00:07:46,760
All right.

128
00:07:46,790 --> 00:07:47,660
So let's do that next.
