WEBVTT
1
00:00:00.150 --> 00:00:07.230
Next up we have a bit of an odd operator in JavaScript called type of we use type of in some situations

2
00:00:07.230 --> 00:00:10.830
to determine the type of a given value.

3
00:00:10.830 --> 00:00:17.370
We simply write type of which always has driven me crazy that it's not camel case like everything else

4
00:00:17.370 --> 00:00:18.220
in JavaScript.

5
00:00:18.270 --> 00:00:25.770
It's type of like this and then a space and then we specify a value like ninety nine and it gives us

6
00:00:25.830 --> 00:00:34.890
a string containing the type I can name of the type number I do type of true we get Boolean if I have

7
00:00:34.890 --> 00:00:39.910
a variable I'll call it mystery and close your eyes.

8
00:00:39.970 --> 00:00:46.620
You do have to close your eyes but let's say this is our mystery how clear the console.

9
00:00:46.830 --> 00:00:51.480
If I do type of mystery it tells us it's a string.

10
00:00:51.480 --> 00:00:54.450
Yes it contains a number at the beginning but that doesn't matter.

11
00:00:54.450 --> 00:00:55.210
It's in quotes.

12
00:00:55.230 --> 00:01:02.550
So it's a String type of with undefined will give us undefined.

13
00:01:02.700 --> 00:01:04.800
Here's a really odd part of JavaScript.

14
00:01:04.800 --> 00:01:08.160
If you do type of null it tells you object.

15
00:01:08.160 --> 00:01:14.760
This is allegedly a mistake a weird quirk that has worked its way into the language over time.

16
00:01:14.760 --> 00:01:22.110
So more of a piece of trivia I guess than something you need to look out for type of often confuses

17
00:01:22.110 --> 00:01:29.760
people because they think you need to use parentheses like you do for console dot log or for what else

18
00:01:29.760 --> 00:01:35.730
have we see in math dot random or these different actions where you pass a value in and use parentheses

19
00:01:35.730 --> 00:01:42.660
to execute it but type of is actually an operator just like the plus sign is we don't do plus sign with

20
00:01:42.660 --> 00:01:46.620
parentheses or minus sign or equal sign.

21
00:01:46.620 --> 00:01:50.250
That's an operator when we say cost X equals 3.

22
00:01:50.760 --> 00:01:54.190
We don't use parents type of is very similar.

23
00:01:54.210 --> 00:01:55.730
It's also an operator.

24
00:01:55.860 --> 00:01:57.280
It just has one side.

25
00:01:57.420 --> 00:02:04.040
So unlike the plus sign where we have two sides left in a right with type of we just type of a value

26
00:02:04.650 --> 00:02:06.030
and that's it.

27
00:02:06.030 --> 00:02:06.930
So not much to it.

28
00:02:07.290 --> 00:02:12.540
I just wanted to show it to you because sometimes it's useful once we get to writing functions in particular.

29
00:02:12.600 --> 00:02:18.630
If you want to check that a user did indeed pass in a number or a function has been called with a number

30
00:02:18.630 --> 00:02:21.150
and not a string then you can use type of.
