WEBVTT
1
00:00:00.180 --> 00:00:00.570
All right.

2
00:00:00.600 --> 00:00:05.970
The last thing we'll take a look at is a nice and clean way of what we did here.

3
00:00:05.970 --> 00:00:11.010
Sending requests in parallel and just waiting until they were all back before we did something this

4
00:00:11.010 --> 00:00:13.370
code down here won't run Intel.

5
00:00:13.470 --> 00:00:16.070
We have a resolved value from this first promise.

6
00:00:16.140 --> 00:00:16.680
Second one.

7
00:00:16.680 --> 00:00:17.460
And third one.

8
00:00:17.460 --> 00:00:20.930
But the requests are still being sent at roughly the same time.

9
00:00:21.000 --> 00:00:25.590
So if I don't want to have to type all of this stuff it's kind of annoying having to make these different

10
00:00:25.590 --> 00:00:26.560
variables.

11
00:00:26.670 --> 00:00:35.070
What we can do is use a promise helper method called promise for the capital p dot all and promised

12
00:00:35.070 --> 00:00:38.760
that all accepts an array of promises.

13
00:00:38.760 --> 00:00:45.660
So these are all promises that we get back so I could just pass those in to promise that all from one

14
00:00:46.080 --> 00:00:57.140
problem to Problem 3 and then await that could call this concept results equals a wait promised at all.

15
00:00:57.200 --> 00:00:59.800
I'll get rid of the original one.

16
00:00:59.940 --> 00:01:04.670
Now let's take a look at results afterwards console dot log results.

17
00:01:04.800 --> 00:01:10.320
Thanks to the magic of async functions and a wait I can just write it directly beneath even though this

18
00:01:10.320 --> 00:01:11.830
may take a while.

19
00:01:11.970 --> 00:01:17.790
If my internet sucks if the Internet is not on or if the API is down I'm not catching the errors but

20
00:01:17.790 --> 00:01:20.100
we could also do that as we've seen earlier.

21
00:01:20.100 --> 00:01:21.760
So I won't spend time on that.

22
00:01:21.810 --> 00:01:25.110
So this is much cleaner than what we had before assuming it works.

23
00:01:25.110 --> 00:01:27.710
Let's make sure it does refresh.

24
00:01:27.780 --> 00:01:28.710
This is what we get back.

25
00:01:29.830 --> 00:01:35.950
Another array containing three response objects which is the values that those promises are returned

26
00:01:35.950 --> 00:01:37.880
with thanks to excuse.

27
00:01:37.900 --> 00:01:44.170
So if I was awaiting something else I would get whatever the resolved values were in a results array.

28
00:01:44.620 --> 00:01:47.400
So this returns a promise itself.

29
00:01:47.530 --> 00:01:55.080
This promise is resolved when its own promises and this array are all resolved then we're awaiting promised

30
00:01:55.100 --> 00:01:56.590
that all to be resolved.

31
00:01:56.590 --> 00:02:03.520
Take that resolved value it's now stored in results and then we move on as soon as this is done.

32
00:02:03.520 --> 00:02:07.680
This code runs so then we can print out something for each one.

33
00:02:08.050 --> 00:02:18.950
How about just make a separate function print pokemon and pass in results then I can just define a regular

34
00:02:18.950 --> 00:02:22.660
function called Print Pokemon it doesn't need to be async.

35
00:02:22.790 --> 00:02:25.090
This will be past results.

36
00:02:25.100 --> 00:02:34.300
So in here I would just do for let Pokemon of results and we want the data.

37
00:02:34.300 --> 00:02:34.870
Dot.

38
00:02:34.910 --> 00:02:36.260
I think its name.

39
00:02:36.260 --> 00:02:41.030
Why don't we just do that data dot name console log data Dot.

40
00:02:41.030 --> 00:02:43.930
Name PokÃ©mon dot data Dot.

41
00:02:43.930 --> 00:02:44.090
Name

42
00:02:47.040 --> 00:02:48.860
let's test it out.

43
00:02:48.900 --> 00:02:49.390
There we go.

44
00:02:49.410 --> 00:02:56.160
Phobos or iris or Venus or so not the most useful actual request that we're making.

45
00:02:56.160 --> 00:03:01.950
But this is much nicer than what we had before where we were awaiting each promise individually.

46
00:03:01.950 --> 00:03:05.110
A weight problem on a weight problem to a weight problem 3.

47
00:03:05.310 --> 00:03:12.690
Here we put them in an array and then we can await that entire promised at all and then move on.

48
00:03:12.690 --> 00:03:19.140
This code will only run when all of these promises have been resolved so that's kind of it for async

49
00:03:19.140 --> 00:03:20.010
functions.

50
00:03:20.010 --> 00:03:26.160
We use async to declare the function as an async function and then we use a weight to await a resolved

51
00:03:26.160 --> 00:03:28.600
value within an async function.

52
00:03:28.620 --> 00:03:34.590
We can't use a wait outside of an async function only inside but the combination of the two helps us

53
00:03:34.590 --> 00:03:39.870
write code that looks like it is synchronous but it still is behaving asynchronously.

54
00:03:39.870 --> 00:03:41.490
It's just much easier to read.

55
00:03:41.520 --> 00:03:47.310
Remember it's all built on top of promises and it's just syntactic sugar so we'll get tons of practice

56
00:03:47.640 --> 00:03:52.440
later in the project portion of this course we'll work with axioms and make a lot of requests and write

57
00:03:52.440 --> 00:03:55.950
our own async functions and use a wait inside already.
