1
00:00:01,670 --> 00:00:05,330
We've now proven that we can execute all the code inside that given file.

2
00:00:05,360 --> 00:00:10,280
Now at this point in time we've been toggling back and forth a little bit between the autocomplete or

3
00:00:10,280 --> 00:00:14,930
that movie's testing directory and our actual project that we're working on right now.

4
00:00:14,990 --> 00:00:18,530
I'm sure all this tapping back and forth is getting really confusing.

5
00:00:18,530 --> 00:00:23,870
So in this video I want to very quickly assemble a new sub project just for the purposes of testing

6
00:00:24,140 --> 00:00:28,820
inside of our team directory just so we don't have to flip between code editors back and forth back

7
00:00:28,820 --> 00:00:34,780
and forth which like I said really confusing really quickly so inside of my team's directory I'm going

8
00:00:34,780 --> 00:00:40,040
to make a new folder called sample project inside of here.

9
00:00:40,040 --> 00:00:44,930
We're going to write out a very quick little program right one or two tests for it and we're going to

10
00:00:44,930 --> 00:00:47,960
try to execute those tests using TMG.

11
00:00:48,130 --> 00:00:53,010
So sample project is literally a sample project not really related to TMG.

12
00:00:53,030 --> 00:00:55,700
It's just so we can have something that we can run Tumi with.

13
00:00:56,450 --> 00:01:02,580
So inside of sample project and create a new file called index dot J.S. then inside of here I'll do

14
00:01:02,580 --> 00:01:09,350
a module dot exports I'm going to export an object and just like we had on our first expand or our first

15
00:01:09,350 --> 00:01:14,090
experience with testing we'll just define a very simple for each function inside of here and then eventually

16
00:01:14,090 --> 00:01:20,310
write some tests around it so just like before or for each functional be called with some array and

17
00:01:20,340 --> 00:01:26,400
some callback function to run for each element inside their WE'LL DO A SIMPLE FOR of loop.

18
00:01:26,820 --> 00:01:35,890
So I'll say for let element of error let's call the function with that element.

19
00:01:35,970 --> 00:01:38,900
We're not even going to worry about the index or anything like that.

20
00:01:39,000 --> 00:01:44,560
Just some very simple test code right here then inside of my sample project I'll make another new folder

21
00:01:45,340 --> 00:01:52,310
called test and inside of that test folder I'll make a file called for each.

22
00:01:52,310 --> 00:01:59,580
Let's do the capitalization correctly dot test dot J.S. so inside of here we will write out a very quick

23
00:01:59,580 --> 00:02:04,120
test that is going to use the same kind of syntax as what we saw previously with Moka.

24
00:02:04,130 --> 00:02:06,840
So at the very top I'm going to require in for each

25
00:02:10,150 --> 00:02:17,110
from up one directory index all then defined in its statement and I'll say something like it should

26
00:02:17,110 --> 00:02:18,340
sum an array

27
00:02:21,660 --> 00:02:24,410
and then inside of that function that's going to be ran for this test.

28
00:02:24,410 --> 00:02:26,370
We'll put our actual testing code.

29
00:02:26,370 --> 00:02:28,330
So let's create like a little array of numbers.

30
00:02:28,350 --> 00:02:31,270
I'll say numbers is 1 2 3.

31
00:02:31,360 --> 00:02:35,340
I'll make a total set it to 0.

32
00:02:35,440 --> 00:02:42,230
Well then do for each with numbers we'll pass in our little iterator function that's going to take every

33
00:02:42,230 --> 00:02:49,360
value and we'll say total plus equals value.

34
00:02:49,490 --> 00:02:53,210
And then finally at the very bottom we need to make an actual assertion and say whether we're not our

35
00:02:53,210 --> 00:02:59,580
code ran successfully so we can either do that classic if statement and say like if total does not equal

36
00:02:59,900 --> 00:03:00,790
6.

37
00:03:01,060 --> 00:03:06,270
There were an error but instead let's use that a cert module that we've seen several times now that

38
00:03:06,270 --> 00:03:08,400
the very top I will require in a cert

39
00:03:11,660 --> 00:03:18,890
that we can call a search dot strict equal and I will put in the actual value that we got which is total

40
00:03:19,160 --> 00:03:25,290
and what we expect it to be which is six so this right here should work successfully with Moka and we're

41
00:03:25,290 --> 00:03:30,060
going to make sure that it will work successfully with our test run a really quickly as well it's going

42
00:03:30,060 --> 00:03:36,670
to go backwards my terminal I got change back to the TMT directory so we can stop messing around with

43
00:03:36,670 --> 00:03:41,480
movies testing Here's Tumi I'm going to change into sample project

44
00:03:44,410 --> 00:03:49,390
and if you installed Moka earlier inside this course with me you should now be to run Moka and have

45
00:03:49,390 --> 00:03:54,700
that run the test inside there if you didn't install Moka don't sweat it if you run smoke and you see

46
00:03:54,700 --> 00:03:58,900
something like Moka not found or something don't sweat it I just want to prove that there is a valid

47
00:03:58,900 --> 00:04:04,730
test inside that file so now we want to see something very similar when we use our TNT program as well.

48
00:04:04,740 --> 00:04:10,440
So I want to be able to run to me and see that same kind of test output appear naturally right now we

49
00:04:10,440 --> 00:04:15,630
still see an error that says something like it is not defined as we made use of the IT function so that

50
00:04:15,630 --> 00:04:19,330
test file but is not actually defined inside their okay.

51
00:04:19,360 --> 00:04:24,130
So now we've got a much better testing harness to make use of another quick pause right here come back

52
00:04:24,130 --> 00:04:29,230
the next video and figure out what goes on as we start to run each of our different test files.
