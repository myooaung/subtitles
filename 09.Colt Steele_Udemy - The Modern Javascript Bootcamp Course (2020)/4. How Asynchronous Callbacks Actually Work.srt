1
00:00:00,210 --> 00:00:03,710
OK so we established that JavaScript is single threaded.

2
00:00:03,720 --> 00:00:07,360
That means it's doing one thing at a time like a human sneezing.

3
00:00:07,410 --> 00:00:09,590
A human does one thing which is sneezing.

4
00:00:09,600 --> 00:00:14,460
It's very very difficult to also talk while you sneeze or eat while you sneeze.

5
00:00:14,460 --> 00:00:20,040
Although I guess I have been driving and sneeze and I continue to drive but I basically just prayed

6
00:00:20,040 --> 00:00:22,910
that I wouldn't crash because all I could do is sneeze.

7
00:00:23,040 --> 00:00:25,070
So javascript does one thing at a time.

8
00:00:25,170 --> 00:00:30,410
As we mentioned in the last video a lot of the time we do things that take a lot of time.

9
00:00:30,420 --> 00:00:31,510
That's a bad sentence.

10
00:00:31,650 --> 00:00:37,290
Commonly we do a lot of things that take time whether it's getting data from a database or an API or

11
00:00:37,290 --> 00:00:40,440
trying to save something or even to set a timer.

12
00:00:40,440 --> 00:00:43,230
How does something like a timer work in javascript.

13
00:00:43,380 --> 00:00:44,940
So here's a simple example.

14
00:00:44,970 --> 00:00:48,380
This is not exactly full code that would work.

15
00:00:48,420 --> 00:00:51,160
I've made up a function called save to database.

16
00:00:51,240 --> 00:00:53,040
But imagine we're we're doing something like this.

17
00:00:53,040 --> 00:00:55,830
A user type something into a form it submits.

18
00:00:55,830 --> 00:01:01,340
We want to grab value from the form save it to a database and that could take a couple of seconds.

19
00:01:01,350 --> 00:01:03,750
It could take half a second could go really fast.

20
00:01:03,810 --> 00:01:06,960
It could take 10 seconds and fail.

21
00:01:06,960 --> 00:01:10,010
Does this line just not run until this finishes.

22
00:01:10,020 --> 00:01:11,920
Well we have a workaround.

23
00:01:11,970 --> 00:01:17,790
We've seen this a couple times before we've actually seen it a lot for these processes processes that

24
00:01:17,790 --> 00:01:18,850
take time.

25
00:01:18,960 --> 00:01:25,230
We pass a callback function and those functions will be executed at the appropriate time after this

26
00:01:25,230 --> 00:01:27,340
interval has passed in the case of a set time.

27
00:01:27,870 --> 00:01:32,750
But this doesn't really answer the question of how does it work or why does it work.

28
00:01:32,760 --> 00:01:34,690
We know that this does work.

29
00:01:34,890 --> 00:01:37,470
Set time out for three seconds.

30
00:01:37,470 --> 00:01:40,510
We'll wait three seconds before running this code.

31
00:01:40,710 --> 00:01:42,290
But how is javascript going to know.

32
00:01:42,300 --> 00:01:44,570
How does it set a timer for three seconds.

33
00:01:44,700 --> 00:01:47,200
If it can only do one thing at a time.

34
00:01:47,370 --> 00:01:49,110
That is what we're going to talk about here.

35
00:01:49,140 --> 00:01:54,540
If we go back to this example where we had our first constant log and then the alert blocked everything

36
00:01:54,540 --> 00:02:00,930
else javascript is fully focused on the alert until it's gone then we move on to the next console dot

37
00:02:00,930 --> 00:02:01,660
log.

38
00:02:01,750 --> 00:02:12,720
Why if I replace this with a set time out pass in some function where we console dot log I happen.

39
00:02:13,170 --> 00:02:17,320
Third and then an interval or a delay.

40
00:02:17,400 --> 00:02:20,040
Three seconds three thousand milliseconds.

41
00:02:20,040 --> 00:02:25,860
Why does this work seems like it shouldn't look nothing different is really happening except we're passing

42
00:02:25,860 --> 00:02:32,370
in some some function to be called later but based off of what I've told you it seems like this should

43
00:02:32,370 --> 00:02:38,460
run then javascript encounters this line which says set a timer for three seconds.

44
00:02:38,460 --> 00:02:44,370
That should just take up java scripts full capacity to focus on anything it should just be setting a

45
00:02:44,370 --> 00:02:45,000
timer.

46
00:02:45,000 --> 00:02:52,650
How can javascript keep track of three seconds and remember to do this or call this function while also

47
00:02:52,680 --> 00:02:55,020
moving on to this console dot log.

48
00:02:55,020 --> 00:03:01,220
Remember that is printed out immediately and then three seconds later this is going to print out.

49
00:03:01,230 --> 00:03:05,760
So if I have other code down here I could have a whole bunch of other stuff that's all going to run

50
00:03:05,790 --> 00:03:11,460
assuming that it doesn't take more than three seconds that will run before this doesn't seem like it

51
00:03:11,460 --> 00:03:12,700
should be able to work.

52
00:03:12,750 --> 00:03:18,240
Seems like Javascript should have to focus entirely on keeping track of three seconds and knowing when

53
00:03:18,240 --> 00:03:20,150
to actually execute this.

54
00:03:20,340 --> 00:03:22,890
But we have a workaround.

55
00:03:23,130 --> 00:03:26,780
The trick here is that the browser does the work.

56
00:03:26,850 --> 00:03:30,060
JavaScript is not the same thing as your browser.

57
00:03:30,060 --> 00:03:33,630
JavaScript is a language that is implemented in your browser.

58
00:03:33,630 --> 00:03:38,330
But the browser itself like Chrome Safari even Internet Explorer.

59
00:03:38,330 --> 00:03:41,360
Our good friend when I say good friend I mean worst enemy.

60
00:03:41,520 --> 00:03:49,170
Those browsers are written in usually C++ a different programming language in the browser itself is

61
00:03:49,170 --> 00:03:55,020
capable of doing certain tasks that JavaScript sucks at or things that take time.

62
00:03:55,260 --> 00:03:56,700
They're handed off to the browser.

63
00:03:56,820 --> 00:04:00,360
So javascript says here is this thing I need you to do for me.

64
00:04:00,480 --> 00:04:01,840
The browser takes over.

65
00:04:02,070 --> 00:04:04,620
And then when it's done it reminds javascript.

66
00:04:04,650 --> 00:04:06,600
OK your turn again.

67
00:04:06,600 --> 00:04:09,070
So this is a really key thing to understand.

68
00:04:09,390 --> 00:04:13,690
JavaScript is not setting a timer or keeping track of how many seconds have gone by.

69
00:04:13,740 --> 00:04:16,800
JavaScript is not sending a request to an API.

70
00:04:16,860 --> 00:04:18,680
The browser actually handles it.

71
00:04:19,050 --> 00:04:23,760
And this is something that honestly I went a long time without understanding about JavaScript and it's

72
00:04:23,760 --> 00:04:27,850
not crucial to be able to make a request or use that time out.

73
00:04:27,870 --> 00:04:29,640
You've already done that in this course.

74
00:04:29,640 --> 00:04:34,740
But I think it helps a lot to understand why we use callbacks and why we get to things like promises

75
00:04:34,740 --> 00:04:36,310
and async functions.

76
00:04:36,480 --> 00:04:44,400
So browsers have a set of these API is called Just generally web APIs and they can handle certain tasks

77
00:04:44,490 --> 00:04:46,500
in the background like making a request.

78
00:04:46,500 --> 00:04:49,800
That takes time set time out which we saw here.

79
00:04:49,800 --> 00:04:51,200
That takes time.

80
00:04:51,270 --> 00:04:55,490
The browser is capable of doing those things in the background.

81
00:04:55,560 --> 00:05:02,610
So javascript is going to encounter certain lines of code like this line javascript knows how to do

82
00:05:02,610 --> 00:05:08,940
that then it gets the set timeout and it's going to pass it off to the browser and say please remind

83
00:05:08,940 --> 00:05:15,060
me after three seconds has has elapsed or hey browser you set this timer for me.

84
00:05:15,060 --> 00:05:18,420
And when you're done give me this function back.

85
00:05:18,420 --> 00:05:20,220
So that's why we pass a callback.

86
00:05:20,220 --> 00:05:21,770
It just keeps plowing along.

87
00:05:21,780 --> 00:05:28,170
It hands this off to the browser the browser is in charge of keeping time and then it reminds javascript

88
00:05:28,170 --> 00:05:31,630
Hey here's that thing I want you to do or you wanted me to remind you of.

89
00:05:31,820 --> 00:05:37,830
So javascript doesn't get hung up its single thread is blocked by this set timeout because it's passed

90
00:05:37,830 --> 00:05:43,320
off to something entirely different it's passed off to the browser then that callback function in the

91
00:05:43,320 --> 00:05:48,960
case of said timeout when it's time when three seconds has elapsed the browser is going to take that

92
00:05:48,960 --> 00:05:54,450
function the one that just concerned that log something and put it on the call stack.

93
00:05:54,540 --> 00:05:57,150
So this is where the calls that comes back in.

94
00:05:57,270 --> 00:06:00,920
So let's take a closer look with some diagrams here.

95
00:06:00,930 --> 00:06:03,300
We have similar code I think different text.

96
00:06:03,480 --> 00:06:06,980
I print first I print second seven ahead.

97
00:06:07,060 --> 00:06:07,220
Yeah.

98
00:06:07,270 --> 00:06:07,560
Okay.

99
00:06:07,570 --> 00:06:08,680
I capitalized it here.

100
00:06:08,680 --> 00:06:09,730
It doesn't matter.

101
00:06:09,730 --> 00:06:13,390
So javascript is represented by this javascript logo.

102
00:06:13,390 --> 00:06:16,660
It's going to encounter this line the interpreter sees this line.

103
00:06:16,660 --> 00:06:17,910
It knows how to handle it.

104
00:06:17,920 --> 00:06:24,260
Constant log I print first it runs at then it gets to set timeout set timeout.

105
00:06:24,270 --> 00:06:28,800
It's something that the browser will do for us or it will do for JavaScript.

106
00:06:28,800 --> 00:06:31,560
So this is my personification my browser.

107
00:06:31,560 --> 00:06:33,140
Can you set a timer for 3 seconds.

108
00:06:33,270 --> 00:06:35,090
The browser says Sure thing.

109
00:06:35,100 --> 00:06:37,280
So remember this is separate from javascript.

110
00:06:37,290 --> 00:06:39,190
This is the browser itself.

111
00:06:39,330 --> 00:06:40,390
Setting a time.

112
00:06:40,590 --> 00:06:43,470
Keeping track of three thousand milliseconds.

113
00:06:43,470 --> 00:06:45,950
So then javascript is free to continue on.

114
00:06:45,960 --> 00:06:49,820
It doesn't have anything in its call stack that has to do with that timeout.

115
00:06:49,860 --> 00:06:55,890
Instead it moves on to console that log ie print second so it prints that out and there's a little time

116
00:06:55,890 --> 00:06:59,400
icon over here that signifies 3 seconds have elapsed.

117
00:06:59,460 --> 00:07:02,230
Now the browser says time's up javascript.

118
00:07:02,250 --> 00:07:05,690
Make sure you run that callback now and it places the callback.

119
00:07:05,700 --> 00:07:07,220
This function right here.

120
00:07:07,350 --> 00:07:09,420
I use an arrow function in this example.

121
00:07:09,420 --> 00:07:11,620
I just use a regular function expression here.

122
00:07:11,640 --> 00:07:16,860
It places that function back in the call stack so javascript knows oh I need to do this thing.

123
00:07:17,430 --> 00:07:21,500
So javascript does not keep the time same thing with making a request.

124
00:07:21,510 --> 00:07:27,660
Javascript does not make the request itself the browser and its Web API is handle they manage all of

125
00:07:27,660 --> 00:07:32,580
that and they simply tell javascript they add to the call stack when it's appropriate.

126
00:07:32,580 --> 00:07:39,030
Here's the next thing for you to do so javascript then now has a new function in the call stack and

127
00:07:39,030 --> 00:07:43,170
it executes it and it considers logs ie print after 3 seconds.

128
00:07:43,200 --> 00:07:45,500
So understanding this relationship will help a lot.

129
00:07:45,510 --> 00:07:51,480
Once we get to promises and actually making requests JavaScript can only do one thing at a time it's

130
00:07:51,480 --> 00:07:57,660
single threaded but in special cases when we are doing things like setting a timeout requesting data

131
00:07:57,930 --> 00:08:02,580
or adding an event listener to whatever it div and ally.

132
00:08:02,580 --> 00:08:06,850
Javascript isn't going to sit there and just listen nonstop to see if something has been clicked.

133
00:08:06,850 --> 00:08:13,230
That's handed off to the browser and the browser is in charge of deciding when to actually add a new

134
00:08:13,230 --> 00:08:16,710
callback or a function to the call stack for JavaScript to execute.

135
00:08:17,040 --> 00:08:22,530
Here's this really cool website I found that helps explain how this all works so you can type code over

136
00:08:22,530 --> 00:08:23,310
here.

137
00:08:23,310 --> 00:08:25,860
If you do play around with this it's called loop.

138
00:08:25,920 --> 00:08:28,100
It doesn't work well or it doesn't work at all.

139
00:08:28,100 --> 00:08:34,050
If you use error functions or any of the newer javascript syntax so just stick to some basic stuff but

140
00:08:34,050 --> 00:08:40,170
here's what it does it actually slows down or mimics the execution and what happens behind the scenes

141
00:08:40,170 --> 00:08:43,310
with JavaScript and the handoff to web API.

142
00:08:43,320 --> 00:08:45,790
Which is what this box over here represents.

143
00:08:45,810 --> 00:08:47,340
Here's the call stack.

144
00:08:47,340 --> 00:08:51,390
Here's where the API is so javascript is going to encounter this line.

145
00:08:51,390 --> 00:08:55,080
The interpreter it can run this immediately and it will constantly log.

146
00:08:55,080 --> 00:08:56,270
Hi everyone.

147
00:08:56,280 --> 00:09:03,270
Then it hit set time out and you'll see visually that the web API is takes over and you'll see visually

148
00:09:03,330 --> 00:09:10,440
that the set time out the interval or the delay is being kept track of over here for 7 seconds.

149
00:09:10,440 --> 00:09:13,650
It's what this one is set to and then another set time out.

150
00:09:13,650 --> 00:09:18,990
This one for 3 seconds will also be handled over here and in the meantime javascript will move on.

151
00:09:19,080 --> 00:09:23,670
If I add in let's do at least one more console that log console that log by.

152
00:09:23,670 --> 00:09:31,890
For real everyone javascript moves on to this and then when the browser the web API is over here decide

153
00:09:32,130 --> 00:09:39,960
or calculate that the time is is up 7 seconds or 3 seconds they add the callback here not directly to

154
00:09:39,960 --> 00:09:40,830
the call stack.

155
00:09:40,920 --> 00:09:42,980
They added to something called the callback queue.

156
00:09:43,050 --> 00:09:48,600
We don't have to get too far into the weeds here but essentially this is a place where callbacks are

157
00:09:48,600 --> 00:09:51,820
added and JavaScript will draw upon this cue.

158
00:09:51,840 --> 00:09:56,450
It's a way of it of javascript to know OK what's something that I need to do next.

159
00:09:56,580 --> 00:09:58,890
That is coming back from the web API.

160
00:09:59,580 --> 00:10:02,430
OK so let's see what happens when I click save and run.

161
00:10:02,610 --> 00:10:08,580
I'll pause first thing call stack now has one function call constant log.

162
00:10:08,580 --> 00:10:09,200
Hi everyone.

163
00:10:09,430 --> 00:10:09,700
OK.

164
00:10:09,720 --> 00:10:12,480
Simple enough so it does that.

165
00:10:12,510 --> 00:10:18,050
Now it gets to this set timeout function that is added to the call stack but javascript realizes oh

166
00:10:18,150 --> 00:10:23,940
this is one of those things I can handoff to the browser so it doesn't take charge of this it hands

167
00:10:23,940 --> 00:10:25,350
it to web API.

168
00:10:25,350 --> 00:10:28,750
The web APIs there you go.

169
00:10:29,410 --> 00:10:33,090
So it doesn't run the code it doesn't run the callback.

170
00:10:33,150 --> 00:10:34,240
How I just broke it.

171
00:10:34,390 --> 00:10:37,120
OK let me pause again at the right moment.

172
00:10:37,120 --> 00:10:37,950
There we go.

173
00:10:38,020 --> 00:10:43,480
There's a timeout that is being kept track of over here and JavaScript moves on to the next line which

174
00:10:43,480 --> 00:10:45,040
is another set timeout.

175
00:10:45,130 --> 00:10:46,570
So the same thing happens.

176
00:10:46,930 --> 00:10:52,710
It's added to the call stack for a moment javascript then passes it off to the Web APIs and says OK.

177
00:10:52,720 --> 00:10:55,720
When when that interval or the delay is over.

178
00:10:55,720 --> 00:10:59,470
Give me that callback back and I'll executed at the right time.

179
00:10:59,710 --> 00:11:04,030
So we resume javascript moves on to these two console dot logs.

180
00:11:04,030 --> 00:11:05,140
That the first one.

181
00:11:05,200 --> 00:11:06,250
The second one.

182
00:11:06,250 --> 00:11:10,820
They both run and then the three second time out finished.

183
00:11:10,840 --> 00:11:15,850
Now there's only one over here the seven second one the three second one finished and it added the web

184
00:11:15,850 --> 00:11:19,860
API added that callback here which is supposed to console that log.

185
00:11:19,860 --> 00:11:20,680
Oink oink.

186
00:11:20,710 --> 00:11:28,030
It added that to the callback Q Which javascript will now draw upon and you'll see that it did not click

187
00:11:28,030 --> 00:11:29,130
resume.

188
00:11:29,130 --> 00:11:35,050
There we go those functions are then executed one at a time.

189
00:11:35,340 --> 00:11:37,610
They both console that log and we're done.

190
00:11:37,680 --> 00:11:39,280
So let's do it one more time.

191
00:11:39,300 --> 00:11:45,170
Just quickly I want pause you can see the web API is take control of those timers javascript moves on.

192
00:11:45,180 --> 00:11:51,570
It has one thread it keeps going and then it draws upon that callback cue when the web APIs have placed

193
00:11:51,810 --> 00:11:56,540
one of those functions in the callback queue that relationship is very important to understand.

194
00:11:56,550 --> 00:12:01,880
So let's pause and now I'll have my console open so you can just see the whole thing as they get printed.

195
00:12:01,880 --> 00:12:03,240
So we get hi everyone.

196
00:12:03,240 --> 00:12:07,830
Then the next line which will be by everyone then by for real everyone.

197
00:12:07,830 --> 00:12:12,730
Then that first callback three second one is added to the queue we get oink oink.

198
00:12:12,840 --> 00:12:15,720
And then the seven second interval or timeout finishes.

199
00:12:15,840 --> 00:12:16,850
So we get move.

200
00:12:17,320 --> 00:12:17,630
Okay.

201
00:12:17,640 --> 00:12:18,830
So I'll stop here.

202
00:12:19,110 --> 00:12:21,700
Like I said this is a very fundamental part of JavaScript.

203
00:12:21,700 --> 00:12:24,250
This is why we use callbacks all the time.

204
00:12:24,270 --> 00:12:28,110
This is how we get around the fact that JavaScript is not a multitasker.

205
00:12:28,110 --> 00:12:29,670
It does one thing at a time.

206
00:12:29,700 --> 00:12:35,580
So when we pass a function as an argument as a callback function two things like set time out which

207
00:12:35,580 --> 00:12:39,300
the web API handle those functions are not called right away.

208
00:12:39,300 --> 00:12:44,900
Javascript doesn't worry about it javascript just passes it off and continues on its merry way until

209
00:12:45,000 --> 00:12:51,300
the web API is at some point place that function in the callback queue where javascript then draws upon

210
00:12:51,300 --> 00:12:54,930
and says oh OK you want me to do this thing I guess it's time.

211
00:12:54,930 --> 00:12:58,600
So it does not do the hard work of keeping track of time.

212
00:12:58,650 --> 00:13:04,380
It doesn't do the hard work of making a request and that's why we use callback so frequently for these

213
00:13:04,530 --> 00:13:05,400
asynchronous things.

214
00:13:05,410 --> 00:13:11,220
These these functions that take time and I need to make that clear because now we're gonna go more into

215
00:13:11,220 --> 00:13:17,130
async J.S. we'll talk about how we make requests and that takes a lot of time and sometimes it sucks

216
00:13:17,130 --> 00:13:20,480
to write a ton of callbacks which is where promises come in.

217
00:13:20,490 --> 00:13:22,320
So this has been setting the stage.

218
00:13:22,350 --> 00:13:23,900
I think it's very important to do.

219
00:13:23,910 --> 00:13:29,520
I have taught promises and async functions without really going into detail of how this works.

220
00:13:29,520 --> 00:13:30,680
But I think this will help.

221
00:13:30,690 --> 00:13:31,330
I hope.

222
00:13:31,440 --> 00:13:37,350
And please leave some feedback if you think I'm just confusing you or it's not really relevant because

223
00:13:37,350 --> 00:13:41,630
you absolutely can learn this stuff without understanding what the web apps are.

224
00:13:41,640 --> 00:13:44,430
And the call stack but I think it will help maybe.

225
00:13:44,430 --> 00:13:45,370
So let me know.

226
00:13:45,420 --> 00:13:46,170
All right I'll be quiet.

227
00:13:46,200 --> 00:13:51,180
And next we'll move on to talking more about callbacks some of the problems with having a bunch of callbacks

228
00:13:51,210 --> 00:13:53,130
and how we can get around them with promises.
