1
00:00:01,040 --> 00:00:05,270
The next thing we're going to do inside of our repository is implement the get all method.

2
00:00:05,450 --> 00:00:10,630
So back inside of my editor I'm going to find where I defined check for file right here.

3
00:00:10,640 --> 00:00:16,280
Remember the only reason I mentioned that was to explain why we were going to define access sync and

4
00:00:16,280 --> 00:00:21,010
right file sync inside the constructor and why we were using the sync version at all.

5
00:00:21,050 --> 00:00:26,750
So I'm going to replace that with an async method called get all the inside of here.

6
00:00:26,750 --> 00:00:34,630
Our goal is to open the file called this dot file name and of course not like specifically this dot

7
00:00:34,640 --> 00:00:35,720
file name but whatever.

8
00:00:35,750 --> 00:00:42,200
This dot file name variable is pointing to we're then going to read its contents.

9
00:00:42,420 --> 00:00:46,710
We're going to pass the contents because we are storing Jason data here.

10
00:00:46,710 --> 00:00:51,960
That's the entire idea and we're going to return the past data.

11
00:00:52,050 --> 00:00:53,080
So that's our goal.

12
00:00:53,080 --> 00:00:56,910
Now I wrote out for comments here but as you're going to very quickly see at the end of the day it's

13
00:00:56,910 --> 00:00:59,790
going to end up being just like one line of code.

14
00:00:59,850 --> 00:01:05,190
Let's first focus on this first task which is to open up the file called this dot file name and read

15
00:01:05,190 --> 00:01:06,440
its contents.

16
00:01:06,610 --> 00:01:07,680
Now open up that file.

17
00:01:07,770 --> 00:01:13,320
We'll take a look at the no J.S. standard documentation again and again at the file system module.

18
00:01:13,320 --> 00:01:20,230
Remember you can get here by going to no J S dot org slash API and on this page I'll do a search for

19
00:01:20,350 --> 00:01:27,520
read file so right away I can see that there are at least two versions of read file available to us.

20
00:01:27,530 --> 00:01:33,590
In reality there are three there's the callback based version there's the sync version and then later

21
00:01:33,590 --> 00:01:41,120
on down the file is F S promises dot read file and this is the promised based version of the Read file

22
00:01:41,120 --> 00:01:42,500
function.

23
00:01:42,500 --> 00:01:45,590
In general we prefer to work with premises wherever possible.

24
00:01:45,590 --> 00:01:50,650
So this is the function that we're going to use to open up that file and read its contents so click

25
00:01:50,650 --> 00:01:51,690
it.

26
00:01:51,850 --> 00:01:54,720
We're going to call f s dot promises not read file.

27
00:01:54,730 --> 00:01:57,610
We're going to pass in the file name that we're trying to open.

28
00:01:57,610 --> 00:02:05,270
And then the options object is going to have the encoding of the file that we're trying to open so let's

29
00:02:05,270 --> 00:02:08,500
add in some code for that tobacco back here.

30
00:02:08,600 --> 00:02:17,920
I'm going to say const contents is a weight f s not promises not read file pass in the file name of

31
00:02:17,920 --> 00:02:26,300
this dot file name and the second argument will be an options object with an encoding property of UTF

32
00:02:26,420 --> 00:02:33,440
8 strictly speaking the options object is optional in this case but I'm gonna throw it in here anyways

33
00:02:33,470 --> 00:02:40,100
just for a kind of completion sake it's now if we were to console log out that contents variable we

34
00:02:40,100 --> 00:02:45,350
should see it whatever is contained inside that file let's do a quick console log right here just to

35
00:02:45,350 --> 00:02:45,800
verify

36
00:02:48,690 --> 00:02:54,270
in order to test this function we need to either just call it directly at the very bottom or if we eventually

37
00:02:54,270 --> 00:02:56,220
want to work with the data that gets returned.

38
00:02:56,280 --> 00:02:59,800
We need to call get all with the awake keyword.

39
00:02:59,880 --> 00:03:03,070
Let's try calling this like a very realistic fashion.

40
00:03:03,070 --> 00:03:08,610
So I'm going to wrap our repo creation down here with a function that I'll call simply test because

41
00:03:08,670 --> 00:03:12,260
it's gonna be running all of our test code.

42
00:03:12,340 --> 00:03:15,890
I'm going to mark that function as async so I can use the awake.

43
00:03:15,890 --> 00:03:17,150
You were inside of it.

44
00:03:18,270 --> 00:03:23,580
I'll then call the test function right underneath and I'll make sure I do and await repo.

45
00:03:23,590 --> 00:03:29,280
Dot get all now why do we create a separate function right here to test our code.

46
00:03:29,290 --> 00:03:36,720
Well remember right now like as I'm recording this video no J.S. requires you to put async await code

47
00:03:36,750 --> 00:03:39,240
inside of a function marked as async.

48
00:03:39,300 --> 00:03:45,060
In other words we cannot have a top level variable inside of a file like so that makes use of a weight

49
00:03:45,300 --> 00:03:46,830
right now.

50
00:03:46,840 --> 00:03:52,410
This would result in an error now by the time you watch this video know Jesus might have support for

51
00:03:52,420 --> 00:03:54,130
top level await statements.

52
00:03:54,130 --> 00:03:57,620
They are technically available right now if you're on the latest version of node.

53
00:03:57,700 --> 00:04:01,810
I'm going to assume that you might be running earlier version of No that doesn't have support for top

54
00:04:01,810 --> 00:04:02,890
level async await.

55
00:04:03,280 --> 00:04:08,520
That's the only reason I created this helper function right here called test OK.

56
00:04:08,570 --> 00:04:12,840
Let's now save this file I'm to go back over to my terminal.

57
00:04:12,940 --> 00:04:19,470
I'm still inside the repositories directory and I will run node users dot J.S. and make sure you do

58
00:04:19,470 --> 00:04:21,240
dot J.S. not Jason.

59
00:04:21,240 --> 00:04:24,960
Jason is our data center our file with all of our data inside of it.

60
00:04:25,550 --> 00:04:30,530
So as soon as I run that I see a console log of an empty array.

61
00:04:30,540 --> 00:04:34,940
The reason we see an empty array remember backup here inside of our constructor by default.

62
00:04:34,950 --> 00:04:37,840
When we created the file we wrote in an empty array.

63
00:04:37,890 --> 00:04:42,360
The reason that we wrote in the error empty array is that we are always working with an array of records

64
00:04:42,390 --> 00:04:45,340
no matter what even if the files it is empty.

65
00:04:45,340 --> 00:04:50,070
We will always be giving back a empty array or at least an array data structure so we can always assume

66
00:04:50,070 --> 00:04:51,640
that there is an array inside there.

67
00:04:52,950 --> 00:04:53,940
Okay this looks good.

68
00:04:54,010 --> 00:04:57,900
So let's just take a quick pause when come back the next video we're going to add in a little bit more

69
00:04:57,900 --> 00:05:02,650
code to make sure that we pass the contents because right now even though it appears that we are console

70
00:05:02,650 --> 00:05:08,070
logging out just an array that technically is a string that contains the array characters are like the

71
00:05:08,070 --> 00:05:12,960
square brackets so we can make sure that we pass the contents and then eventually return that pass data.
