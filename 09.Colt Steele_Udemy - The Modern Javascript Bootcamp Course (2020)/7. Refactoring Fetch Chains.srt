1
00:00:00,330 --> 00:00:02,460
Next up let's do some refactoring.

2
00:00:03,090 --> 00:00:06,260
So first I'd like to change what we're actually requesting.

3
00:00:06,330 --> 00:00:11,130
Right now we're getting the first 10 planets and then taking the first one of those 10 and getting the

4
00:00:11,130 --> 00:00:16,920
first film you RL and requesting that if we look at the planets response that we get back among the

5
00:00:16,920 --> 00:00:21,420
docs the API documentation for Star Wars API.

6
00:00:21,650 --> 00:00:22,800
It gives us a visual.

7
00:00:22,810 --> 00:00:25,450
It'll get nice representation that's interactive.

8
00:00:25,500 --> 00:00:30,200
There is a property there's a next that we can access.

9
00:00:30,390 --> 00:00:33,250
It's another U.R.L. to get more planets.

10
00:00:33,280 --> 00:00:35,340
So Paige set to two.

11
00:00:35,430 --> 00:00:37,290
So why don't we get the first ten planets.

12
00:00:37,290 --> 00:00:44,520
And then when that finishes get the next 10 if there are 10 from page two we won't keep going.

13
00:00:44,520 --> 00:00:47,670
I don't know how many pages there are but we'll just do the first two to start.

14
00:00:47,970 --> 00:00:51,390
So we'll keep this first request to get the first ten planets.

15
00:00:51,600 --> 00:00:52,570
We'll run this code.

16
00:00:52,680 --> 00:00:55,200
But then here we'll do fetched all planets.

17
00:00:55,200 --> 00:00:57,600
Sure let's print out each planet again.

18
00:00:57,630 --> 00:01:07,530
So for let planets of data adopt results we'll console that log planet dot name and then instead of

19
00:01:07,530 --> 00:01:11,770
a film you know what we'll do is get the next you are.

20
00:01:11,910 --> 00:01:15,180
Which is just at the top of the Jason we get back.

21
00:01:15,180 --> 00:01:15,840
It's called next.

22
00:01:15,840 --> 00:01:18,140
We don't have to look inside of results.

23
00:01:18,210 --> 00:01:21,670
It's simply data dot next.

24
00:01:21,820 --> 00:01:30,700
So we'll save that to a variable called Mm next U.R.L. and then request that instead of film you U.R.L.

25
00:01:32,140 --> 00:01:32,940
next you.

26
00:01:34,520 --> 00:01:37,940
Then we have our same logic to check if the status code was not.

27
00:01:37,950 --> 00:01:39,320
OK we'll throw an error.

28
00:01:39,350 --> 00:01:44,450
Otherwise we call the Jason method which takes time it's a synchronous it returns a promise we return

29
00:01:44,450 --> 00:01:54,800
that promise dot then then we'll change what we're doing down here fetched next ten planets and then

30
00:01:54,800 --> 00:02:02,750
we'll just copy this logic right here to print out the name of each planet.

31
00:02:02,780 --> 00:02:05,330
Let's cross our fingers.

32
00:02:05,330 --> 00:02:06,650
Hope it works.

33
00:02:06,650 --> 00:02:07,080
Cool.

34
00:02:07,130 --> 00:02:13,550
So you can see the first 10 came back right there and then a split second later the next 10 so fetched

35
00:02:13,550 --> 00:02:14,260
all 10.

36
00:02:14,260 --> 00:02:14,980
There we go.

37
00:02:14,980 --> 00:02:16,950
And then fetched next ten.

38
00:02:16,970 --> 00:02:18,210
There we go.

39
00:02:18,230 --> 00:02:25,160
So yeah we don't technically need to have this happen one after another if we know the pattern for how

40
00:02:25,160 --> 00:02:28,360
we fetch the next batch of results.

41
00:02:28,400 --> 00:02:32,040
There is a pattern we just pass in this query string page equals two.

42
00:02:32,100 --> 00:02:33,720
We changed it to three or four.

43
00:02:33,740 --> 00:02:34,880
We get the next page.

44
00:02:35,030 --> 00:02:40,610
So they're not really dependent but let's say that we don't know what this you are Atlas and we want

45
00:02:40,610 --> 00:02:42,980
to send the first request and use this U.R.L..

46
00:02:43,070 --> 00:02:45,200
So we're doing one after another.

47
00:02:45,230 --> 00:02:47,540
Also it's just good practice with promises.

48
00:02:47,750 --> 00:02:50,540
But now what I'd like to show you is how we can clean this up.

49
00:02:50,600 --> 00:02:52,730
We have some duplicated logic.

50
00:02:52,730 --> 00:02:59,180
First we are doing the same thing twice checking response that OK calling dot Jason.

51
00:02:59,420 --> 00:03:06,430
We do it here right here and right here then we're also doing this right here.

52
00:03:06,440 --> 00:03:09,560
It's pretty much the same where we are fetching planets.

53
00:03:09,560 --> 00:03:16,910
So we could just write a separate function a standalone function called maybe check status and pass

54
00:03:17,240 --> 00:03:23,690
a bit long of a name but that will work and we can move this logic into the function assuming that we

55
00:03:23,690 --> 00:03:28,040
also add response as a parameter if we don't want to change this.

56
00:03:28,100 --> 00:03:32,030
We could go with RES and update this to be reds and Reds rez.

57
00:03:32,300 --> 00:03:36,030
What we'll do is pass this in to our dot then dot.

58
00:03:36,050 --> 00:03:41,900
Then check status in parts so it doesn't matter if we have a named function that we have.

59
00:03:41,960 --> 00:03:45,920
Well this isn't technically a named function but it's in a variable.

60
00:03:45,920 --> 00:03:46,910
Slight difference.

61
00:03:47,070 --> 00:03:51,150
That doesn't matter if we pass in a predefined function or an anonymous function.

62
00:03:51,200 --> 00:03:54,860
The promise when it's resolved will be resolved with a value.

63
00:03:54,860 --> 00:03:57,820
This function is called and that value will be passed in.

64
00:03:57,860 --> 00:04:04,070
So why not move it out so we can clean up our code and not have to have these long dot pens with anonymous

65
00:04:04,070 --> 00:04:05,060
functions.

66
00:04:05,480 --> 00:04:14,660
We can replace this here as well dot then check status and pass as long as we return a promise which

67
00:04:14,660 --> 00:04:15,020
we are.

68
00:04:15,050 --> 00:04:16,100
We were already doing that.

69
00:04:16,130 --> 00:04:17,760
So I just moved it out.

70
00:04:17,780 --> 00:04:19,330
Let's see if it still works.

71
00:04:19,430 --> 00:04:20,810
Refresh.

72
00:04:20,810 --> 00:04:21,970
We got the first 10.

73
00:04:22,100 --> 00:04:24,620
We got the second 10 call.

74
00:04:24,950 --> 00:04:31,070
So this is a pretty good improvement but wouldn't it be nice if we could do something like this then

75
00:04:31,330 --> 00:04:44,170
if we had this here fetch planet dot then check status and pass DOT then print planets then get 10 more

76
00:04:44,260 --> 00:04:50,660
planets and then we could just duplicate this as many times as needed.

77
00:04:50,680 --> 00:04:54,400
So what if we had a method or a function to print planets.

78
00:04:54,400 --> 00:04:56,330
That's easy enough right.

79
00:04:56,350 --> 00:04:58,570
What about getting 10 more planets.

80
00:04:58,570 --> 00:05:02,730
Well it's relatively straightforward but there is one caveat.

81
00:05:03,010 --> 00:05:08,320
In order for those documents to work they all need to return promises and something like printing a

82
00:05:08,320 --> 00:05:11,820
planet or ten planets probably won't return promises.

83
00:05:11,860 --> 00:05:13,510
But let me just show you what we could do.

84
00:05:14,320 --> 00:05:18,910
So I'm going to start by defining a function called Print planet's

85
00:05:21,580 --> 00:05:30,160
and we'll just have it expects some data the same data that we are expecting here I'm going to move

86
00:05:30,190 --> 00:05:31,740
this logic out.

87
00:05:32,080 --> 00:05:39,760
I'll replace the console log with loaded 10 more planets or something like that and then for each planet

88
00:05:39,850 --> 00:05:41,500
of data that results.

89
00:05:41,500 --> 00:05:50,590
We still consider log the planet name so I should be able to do a dot then print planet but then we'll

90
00:05:50,590 --> 00:05:52,540
run into an issue here.

91
00:05:52,820 --> 00:05:57,620
We should see the first ten planets print out let's verify.

92
00:05:57,680 --> 00:05:59,020
There we go.

93
00:05:59,090 --> 00:06:00,100
Then we get here.

94
00:06:00,170 --> 00:06:03,140
Cannot read property next of undefined.

95
00:06:03,140 --> 00:06:05,990
That error is coming from this next U.R.L..

96
00:06:06,200 --> 00:06:10,630
That's what we're trying to get the next to our l equals data dot next.

97
00:06:10,640 --> 00:06:13,480
Well there is no data that was passed in.

98
00:06:13,730 --> 00:06:15,620
We never called this ourself.

99
00:06:15,620 --> 00:06:17,210
Remember how then works.

100
00:06:17,210 --> 00:06:20,260
It's run when the callback is run.

101
00:06:20,300 --> 00:06:27,620
This callback is run when a promise is resolved but there's no promise being returned from print planets.

102
00:06:27,620 --> 00:06:31,920
The only way we can change all of these together is if we return a promise.

103
00:06:31,970 --> 00:06:34,700
So check status and pass that returns a promise.

104
00:06:34,700 --> 00:06:35,950
This is a promise here.

105
00:06:36,140 --> 00:06:38,540
This method returns promise itself.

106
00:06:38,540 --> 00:06:39,760
We return that promise.

107
00:06:39,770 --> 00:06:42,950
Print planets does not return a promise.

108
00:06:42,950 --> 00:06:44,470
However we can fix that.

109
00:06:44,470 --> 00:06:45,650
It's nice and easy.

110
00:06:45,650 --> 00:06:47,310
We have a couple ways of doing it.

111
00:06:47,330 --> 00:06:53,960
First the most obnoxious way would be new promise and go through the whole thing we've seen before.

112
00:06:53,960 --> 00:06:58,790
So we have resolve and reject and we just want this promise to be resolved.

113
00:06:58,790 --> 00:07:02,390
We've printed them we're not doing any checking of logic or error handling.

114
00:07:02,390 --> 00:07:06,050
We just want to automatically resolve so we could do this concept.

115
00:07:06,140 --> 00:07:06,470
I don't know.

116
00:07:06,470 --> 00:07:11,140
P equals new promise resolve comma I reject.

117
00:07:11,690 --> 00:07:17,080
And then we can just call resolve and return p.

118
00:07:17,090 --> 00:07:21,300
So we have an automatically resolved promise that we're returning.

119
00:07:21,440 --> 00:07:24,180
And what does not like missing a friend.

120
00:07:24,210 --> 00:07:27,360
I forgot my arrow from doing an arrow function.

121
00:07:27,380 --> 00:07:28,340
Now let's see what happens.

122
00:07:28,340 --> 00:07:34,470
I'm returning a promise so we get our first 10 and then the last thing I need to do is make sure I resolve

123
00:07:34,650 --> 00:07:39,340
with the data that this dot then callback is expecting.

124
00:07:39,350 --> 00:07:39,530
Right.

125
00:07:39,540 --> 00:07:41,760
We need to pass that data along.

126
00:07:41,760 --> 00:07:43,740
So I would just do resolve data.

127
00:07:43,800 --> 00:07:45,080
That's what we have here.

128
00:07:45,090 --> 00:07:47,120
It's being passed in to print planets.

129
00:07:47,130 --> 00:07:48,390
We use some of that data.

130
00:07:48,420 --> 00:07:49,730
We print it out now.

131
00:07:49,890 --> 00:07:54,510
I'm creating a new promise and resolving it with that same data and I'm returning that promise.

132
00:07:54,510 --> 00:08:00,840
This is kind of clunky but it does work but there's an easier way.

133
00:08:00,840 --> 00:08:07,080
There is a method called Promise dot resolve and this will create a brand new promise for you that is

134
00:08:07,170 --> 00:08:09,860
resolved so we don't have to go through any of that stuff.

135
00:08:09,860 --> 00:08:13,940
We can just return promise not resolve with data.

136
00:08:14,070 --> 00:08:15,650
So then this returns a promise.

137
00:08:15,660 --> 00:08:17,310
Which means I can change on a date.

138
00:08:17,310 --> 00:08:21,660
Then afterwards and I'm resolving it with some data.

139
00:08:21,660 --> 00:08:23,660
The same data we had passed in.

140
00:08:23,820 --> 00:08:26,140
So I'm just passing it through again.

141
00:08:26,190 --> 00:08:27,630
I'm not changing data.

142
00:08:27,630 --> 00:08:31,460
It's being passed from check status in parts to this.

143
00:08:31,470 --> 00:08:33,900
Then call back and then we're using it.

144
00:08:33,900 --> 00:08:40,860
Passing it along as we resolve this promise which only exists to keep the chain of events moving.

145
00:08:41,250 --> 00:08:45,640
Then we have this out then which we could turn into its own function as well.

146
00:08:45,780 --> 00:08:48,610
So why don't we pre factor this.

147
00:08:48,720 --> 00:08:49,940
We're doing the same thing.

148
00:08:50,100 --> 00:08:57,060
We'll just do dot then print planet's does it work still do we get both sets printed out.

149
00:08:57,330 --> 00:08:58,140
Yep.

150
00:08:58,140 --> 00:08:59,730
Looks good.

151
00:08:59,730 --> 00:09:07,380
So now what we could do is make another function called fetch more planets.

152
00:09:07,380 --> 00:09:09,210
Or how about fetch next planets

153
00:09:12,600 --> 00:09:18,660
and it will expect a U R L to be passed in and if we're expecting a U or L rather than the entire data

154
00:09:18,780 --> 00:09:22,430
we could just do this data next and data.

155
00:09:22,440 --> 00:09:26,230
Next is that you are all that we want to go back.

156
00:09:26,310 --> 00:09:27,590
That's the euro.

157
00:09:27,780 --> 00:09:29,730
So I'll just resolve with that value.

158
00:09:29,730 --> 00:09:35,320
If all we want is that next U.R.L. instead of the next dot then callback.

159
00:09:35,490 --> 00:09:36,520
That's what I'll do.

160
00:09:36,600 --> 00:09:40,910
And this will simply return fetch of you.

161
00:09:41,580 --> 00:09:44,430
So kind of simple not doing anything crazy.

162
00:09:44,430 --> 00:09:49,240
I'm just putting a name on this function instead of using an anonymous function here.

163
00:09:49,380 --> 00:09:57,630
So I should be able to just change this to fetch next planets and let's see if it works or returning

164
00:09:57,640 --> 00:09:58,410
a promise.

165
00:10:00,540 --> 00:10:08,310
We get our first 10 Hey and our second 10 looks get already very short neat and easy to read adorable

166
00:10:08,310 --> 00:10:12,740
code and we could duplicate this as many times as we wanted.

167
00:10:12,750 --> 00:10:20,010
All right if I want to get three pages I would print the planets and then fetch more planets check their

168
00:10:20,010 --> 00:10:23,090
status and print those.

169
00:10:23,130 --> 00:10:32,860
So now I should get 30 results awesome first 10 next 10 final 10 and we could even use fetch next planets

170
00:10:33,220 --> 00:10:36,280
here instead of calling fetch if we wanted to.

171
00:10:36,280 --> 00:10:41,590
It's not really going to make a difference for us but we could start we could do this.

172
00:10:41,590 --> 00:10:44,860
Have you RL default to this.

173
00:10:44,870 --> 00:10:50,010
You are well that should be the very first place you look for planets.

174
00:10:50,010 --> 00:10:58,320
If you don't pass anything in and now I can just call fetch next planets with no argument.

175
00:10:58,320 --> 00:11:04,950
This returns a promise returning fetch of this you are l if I don't pass an argument in that then all

176
00:11:04,950 --> 00:11:08,920
of these other ones right here fetch next planets fetch fetch.

177
00:11:08,920 --> 00:11:15,180
Next planets they will be past the specific you are out for page two or three or four and we should

178
00:11:15,180 --> 00:11:15,880
be good to go.

179
00:11:15,960 --> 00:11:20,240
Let's make sure 10 20 30.

180
00:11:20,240 --> 00:11:20,640
Okay.

181
00:11:21,080 --> 00:11:22,550
So nice little refactor.

182
00:11:22,550 --> 00:11:24,100
Look at how adorable this is.

183
00:11:24,260 --> 00:11:28,940
Super clean and easy and if I wanted to fetch a hundred pages of Planets I don't think there are that

184
00:11:28,940 --> 00:11:29,510
many.

185
00:11:29,600 --> 00:11:36,430
And the API would probably get pissed at me but if I wanted to my code would not be any harder to understand.

186
00:11:36,440 --> 00:11:42,670
It would be longer but it would still remain completely flat compared to doing it like this.

187
00:11:42,740 --> 00:11:45,520
It would be a nightmare to try and keep track of.

188
00:11:45,950 --> 00:11:51,720
So that is why Fetch is so much better than X chars except Mal H TTP requests.

189
00:11:51,740 --> 00:11:54,040
Also this is just a mouthful to repeat.

190
00:11:54,290 --> 00:11:54,740
Fetch.

191
00:11:54,740 --> 00:11:55,940
Much easier to say out loud.
