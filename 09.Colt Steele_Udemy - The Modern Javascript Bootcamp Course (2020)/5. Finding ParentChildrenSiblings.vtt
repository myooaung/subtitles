WEBVTT
1
00:00:00.240 --> 00:00:05.850
Next up we'll see a group of properties that I'm struggling to come up with a name for they're all kind

2
00:00:05.850 --> 00:00:10.060
of I guess you could say traversal or neighbor properties.

3
00:00:10.080 --> 00:00:16.590
It's a way of accessing the parent or the children or the nearest sibling of a given element.

4
00:00:16.680 --> 00:00:19.080
So it's this group right here parent element.

5
00:00:19.110 --> 00:00:21.250
Children next sibling previous sibling.

6
00:00:21.360 --> 00:00:25.920
They allow you to access other elements based off of the current element that you're working with.

7
00:00:27.010 --> 00:00:29.470
So this is actually surprisingly common.

8
00:00:29.470 --> 00:00:34.330
You don't do it all the time but there are situations where especially when we get to events when a

9
00:00:34.330 --> 00:00:40.630
user might click somewhere and based off of that click you'll have an element selected and you want

10
00:00:40.630 --> 00:00:45.080
to then select some other element based off of this element.

11
00:00:45.130 --> 00:00:51.910
If I was making a much good example here let's say I was making a checklist and I had checkboxes in

12
00:00:51.910 --> 00:01:00.190
here the click would occur on the checkbox and if I wanted to delete this entire Ally I would need to

13
00:01:00.190 --> 00:01:03.700
access the parent of the checkbox or if I wanted it.

14
00:01:03.880 --> 00:01:07.740
For some reason I wanted to delete this entire form.

15
00:01:07.810 --> 00:01:13.990
When I click on submit I would need to select from that button I would need to access the parent or

16
00:01:14.080 --> 00:01:18.920
there's plenty of other things we could do you know where we're accessing the next sibling.

17
00:01:18.940 --> 00:01:20.620
So these would be siblings here.

18
00:01:20.620 --> 00:01:22.060
So I'll just show you how they work.

19
00:01:22.450 --> 00:01:24.540
Let's take a look at any given element.

20
00:01:24.640 --> 00:01:28.660
Let's select something that has some siblings and some parents.

21
00:01:28.660 --> 00:01:29.710
Let's go for this.

22
00:01:29.710 --> 00:01:38.830
Ally the very first ally on the page so document that our good friend query selector ally and save that

23
00:01:38.830 --> 00:01:41.760
to a variable we'll call it first ally.

24
00:01:42.160 --> 00:01:44.020
OK so we have first ally.

25
00:01:44.470 --> 00:01:52.610
And from there if we just inspected console dot design our first ally you'll see that we have some properties.

26
00:01:52.630 --> 00:01:57.820
The first of which we'll see is called parent element L M N O P.

27
00:01:57.820 --> 00:01:58.360
Here we go.

28
00:01:58.360 --> 00:02:05.650
Parent element is referencing a UL that parent you well we selected this ally right here.

29
00:02:05.770 --> 00:02:07.830
The parent is that you well.

30
00:02:07.900 --> 00:02:10.750
So this is a connection pointing upwards.

31
00:02:10.750 --> 00:02:13.420
This is how we can find the parent from a given element.

32
00:02:13.420 --> 00:02:14.820
I don't know I just close then.

33
00:02:14.950 --> 00:02:16.500
I meant to just hide this.

34
00:02:16.560 --> 00:02:16.830
Okay.

35
00:02:17.230 --> 00:02:20.050
So I could access it by Ally.

36
00:02:20.310 --> 00:02:22.470
Parent may still have ally.

37
00:02:22.540 --> 00:02:27.970
It's called First ally isn't it first ally Dot's parent elements.

38
00:02:27.970 --> 00:02:29.180
And I get that you well.

39
00:02:29.410 --> 00:02:33.630
And if I hover you can see the dev tools displays the entire you for me.

40
00:02:34.480 --> 00:02:38.800
I also could do first ally parent elements dot parent element again.

41
00:02:38.850 --> 00:02:41.260
And what do you think we'll see the parents of that.

42
00:02:41.260 --> 00:02:43.090
Well is the body.

43
00:02:43.090 --> 00:02:44.100
How about one more time.

44
00:02:44.400 --> 00:02:48.840
But if I'd change it on again this time we get him out.

45
00:02:49.030 --> 00:02:52.880
So we went from this ally what was its parent this well.

46
00:02:53.080 --> 00:02:53.620
What is this.

47
00:02:53.690 --> 00:02:54.910
Well nested inside of.

48
00:02:55.030 --> 00:03:01.120
Well its parent is the entire body and this body is nested inside of the HMO.

49
00:03:01.120 --> 00:03:05.470
And if we tried one more time we get nothing.

50
00:03:05.470 --> 00:03:09.000
No there is no parent of the HMO element.

51
00:03:09.070 --> 00:03:09.340
Okay.

52
00:03:09.370 --> 00:03:10.350
So that's parent element.

53
00:03:10.360 --> 00:03:12.250
You can use that to work backwards.

54
00:03:12.250 --> 00:03:13.420
Back up the tree.

55
00:03:13.420 --> 00:03:15.490
Find out a parent from a given element.

56
00:03:15.490 --> 00:03:17.010
We also have the opposite.

57
00:03:17.020 --> 00:03:18.400
We have children.

58
00:03:18.400 --> 00:03:24.520
So instead of using the ally because our ally doesn't really have any children as you can see here it's

59
00:03:24.520 --> 00:03:29.820
just text in there which actually will come back to you in a moment we'll go select.

60
00:03:29.830 --> 00:03:30.350
Mm hmm.

61
00:03:30.370 --> 00:03:35.330
How about we select the Q Well I guess it's kind of boring but we'll select the well.

62
00:03:35.410 --> 00:03:45.080
So const you l equals document dot query selector of UL we'll take the first one.

63
00:03:45.160 --> 00:03:45.590
Okay.

64
00:03:45.640 --> 00:03:47.320
So we have our you l right there.

65
00:03:47.320 --> 00:03:50.150
I also could have just done first Allied parent.

66
00:03:50.290 --> 00:03:58.990
But we have our you will clear my console if I access you l dot children this is another array like

67
00:03:59.020 --> 00:04:05.620
object similar to what we get back from our selection methods and it contains the children elements

68
00:04:05.860 --> 00:04:06.400
of this.

69
00:04:06.440 --> 00:04:13.180
Well so here's the first one there in order of appearance in the DOM so ally with the class of special

70
00:04:13.240 --> 00:04:17.920
then just a plain ally and another ally with the class of special.

71
00:04:17.920 --> 00:04:24.130
So this is a way of accessing children going the opposite direction finding things that are nested inside

72
00:04:24.130 --> 00:04:29.930
of a given element instead of what the given element is nested inside of so our allies don't really

73
00:04:29.930 --> 00:04:32.910
have children but we could access one of them.

74
00:04:32.960 --> 00:04:37.970
We did well that children if I want the first child I could do of 0.

75
00:04:38.020 --> 00:04:42.050
Now I'm working with that Ally and I could do something to it.

76
00:04:42.170 --> 00:04:42.440
Right.

77
00:04:42.470 --> 00:04:44.270
I could access inter text.

78
00:04:44.270 --> 00:04:45.600
Sure.

79
00:04:45.650 --> 00:04:47.250
And we get first thing.

80
00:04:47.600 --> 00:04:53.090
Now we also have a couple of different options we have next and previous siblings.

81
00:04:53.090 --> 00:04:58.520
So what if we select the ally that we have it's called first ally right there.

82
00:04:58.700 --> 00:05:04.670
The very first ally that was from earlier we selected it before the UL if I accessed first Ella.

83
00:05:04.770 --> 00:05:08.860
Next element sibling.

84
00:05:08.900 --> 00:05:12.080
We get the next sibling which is second thing.

85
00:05:12.380 --> 00:05:15.570
If I did one more dot next element sibling.

86
00:05:15.800 --> 00:05:17.830
We get this ally down here.

87
00:05:18.200 --> 00:05:20.830
So siblings are on the same level.

88
00:05:20.900 --> 00:05:23.030
They share a parent.

89
00:05:23.030 --> 00:05:25.470
We also have previous sibling.

90
00:05:25.670 --> 00:05:29.420
So if I were to save this to a variable we'll call this concept.

91
00:05:29.420 --> 00:05:35.360
Third ally so third ally is this ally right here.

92
00:05:35.530 --> 00:05:38.160
As you can see when I hover I could go the other way.

93
00:05:38.160 --> 00:05:39.180
Third ally.

94
00:05:39.300 --> 00:05:43.310
Previous element sibling gives me this ally.

95
00:05:43.380 --> 00:05:44.220
The one before it.

96
00:05:44.790 --> 00:05:48.720
So now we have a way of not only doing parent to get the parent element.

97
00:05:48.750 --> 00:05:51.360
We have children to get any children we have.

98
00:05:51.360 --> 00:05:54.330
Next element sibling and previous element sibling.

99
00:05:54.330 --> 00:05:59.490
And with those different properties we can access whatever we need from a given element.

100
00:05:59.490 --> 00:06:04.590
We could work upwards find multiple siblings away we could find children find parents.

101
00:06:04.590 --> 00:06:09.810
Usually we don't need to do anything crazy because we wanted to find you know it within children if

102
00:06:09.810 --> 00:06:13.920
we needed to find something and there was hundreds of children as we've already seen.

103
00:06:13.920 --> 00:06:19.470
We can actually call query selector on an element instead of on the document so you can continue to

104
00:06:19.470 --> 00:06:20.840
search within something.

105
00:06:20.910 --> 00:06:27.000
But if you just need the parents or the first child or the next sibling you can use these nice properties.
