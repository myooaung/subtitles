1
00:00:01,520 --> 00:00:04,420
Now that we are a can make sure that the user entered a valid email.

2
00:00:04,460 --> 00:00:08,750
Let's also set up a checker or a custom checker for the password.

3
00:00:08,870 --> 00:00:15,250
So we're going to chain on a custom where we have an async function.

4
00:00:15,250 --> 00:00:17,330
Don't forget that async keyword.

5
00:00:17,440 --> 00:00:22,420
We're going to receive the password that the user entered and we're going to use that supplied password

6
00:00:22,450 --> 00:00:28,030
from the user to run all that password checking stuff that we put together a while ago.

7
00:00:29,910 --> 00:00:32,850
So essentially we want to do all the same stuff right there.

8
00:00:32,850 --> 00:00:37,750
So in this case let's just cut and paste all these checks directly inside of that custom checker.

9
00:00:37,770 --> 00:00:42,120
So going to take everything from valid password all the way down to the if statement going to cut all

10
00:00:42,120 --> 00:00:46,730
of it then throw it into the custom validator

11
00:00:50,330 --> 00:00:52,380
there are a couple things we have to take care of.

12
00:00:52,460 --> 00:00:56,210
First off notice that we are expected to have access to our user inside of here.

13
00:00:56,210 --> 00:00:59,360
So we need to know what the actual user's password is.

14
00:00:59,420 --> 00:01:04,450
So to get access to the actual user we have to somehow get the email that was entered.

15
00:01:04,460 --> 00:01:07,940
And once again find them from our repository.

16
00:01:07,940 --> 00:01:13,240
Does the second argument into this function we're going to again receive that Rec object.

17
00:01:13,240 --> 00:01:18,410
Remember this is how we get access to properties inside the body the request the sides whatever we are

18
00:01:18,410 --> 00:01:21,670
currently trying to check.

19
00:01:21,810 --> 00:01:36,110
It's also comes to user is a wait user's repo not find one by person and get one by and we'll put in

20
00:01:36,110 --> 00:01:45,000
an email of Rick dot body dot email.

21
00:01:45,380 --> 00:01:46,940
ALEX Good.

22
00:01:46,990 --> 00:01:49,970
Now we got the user that we're trying to check the password for.

23
00:01:50,110 --> 00:01:54,700
We're going to stick their existing password as the first argument and to compare passwords.

24
00:01:54,700 --> 00:01:57,230
We're going to take the password that was supplied by the user.

25
00:01:57,280 --> 00:01:58,900
Stick it in as a second.

26
00:01:58,900 --> 00:02:01,880
So then we're going to get back our boolean of valid password.

27
00:02:01,930 --> 00:02:05,680
We're going to see if that is not true then something's going wrong.

28
00:02:05,680 --> 00:02:10,720
So instead of trying to return and send back some response immediately remember we're going to instead

29
00:02:10,810 --> 00:02:20,150
throw a new air so we'll say throw new air invalid password now hidden inside of here there's actually

30
00:02:20,150 --> 00:02:26,480
one other little possible error that we could run into even though we are doing a check up here on the

31
00:02:26,480 --> 00:02:31,310
user's email and making sure that a user actually corresponds to that email.

32
00:02:31,530 --> 00:02:34,310
We have to go through that same check down here as well.

33
00:02:34,560 --> 00:02:39,630
Even though we're not really concerned with the e-mail you see it whenever express validator runs on

34
00:02:39,630 --> 00:02:44,270
an incoming request it's going to check every single property that we are getting.

35
00:02:44,280 --> 00:02:47,610
So even though we already did this check down here to see if something went wrong.

36
00:02:47,610 --> 00:02:53,790
Well we have to repeat the same check inside of password because if user is undefined then all that's

37
00:02:53,790 --> 00:02:56,370
going to happen is we're going to call undefined password.

38
00:02:56,550 --> 00:03:01,260
And once again we're going to see that very common javascript error of cannot read pass property password

39
00:03:01,320 --> 00:03:09,380
of undefined so to guard against the possibility of user being undefined will put in a little if statement

40
00:03:09,380 --> 00:03:17,390
here will say if there is no user let's throw a new air and let's show the same error with that we should

41
00:03:17,390 --> 00:03:21,820
down here invalid password even though technically we don't have an invalid password.

42
00:03:21,820 --> 00:03:26,770
I'm still going to show that anyhow because well it's better to show that than anything else it wouldn't

43
00:03:26,770 --> 00:03:32,050
make any sense here to say like invalid e-mail because this is going to be an error message that eventually

44
00:03:32,050 --> 00:03:34,130
shows up on the password input.

45
00:03:34,180 --> 00:03:37,080
So definitely makes more sense to just say invalid password.

46
00:03:37,090 --> 00:03:37,900
That's pretty much it.

47
00:03:37,900 --> 00:03:39,730
Something went wrong with the password comparison

48
00:03:42,730 --> 00:03:43,010
OK.

49
00:03:43,030 --> 00:03:45,780
So that's it for our custom checker.

50
00:03:45,840 --> 00:03:51,640
Let's now go down and clean up our root handler a little bit so inside of here there are still a couple

51
00:03:51,640 --> 00:03:52,850
of things we have to do.

52
00:03:52,870 --> 00:03:57,670
First off we don't have to do the check to see if the user exists anymore because by the time we get

53
00:03:57,670 --> 00:04:04,650
to this root handler we 100 percent know that the email or a user with that given email exists.

54
00:04:04,670 --> 00:04:08,540
In addition we don't really have to pull off that password property anymore off of wrecked out body

55
00:04:09,260 --> 00:04:14,820
is we're processing it up inside the validator instead.

56
00:04:14,820 --> 00:04:15,060
All right.

57
00:04:15,090 --> 00:04:17,130
Let's save this and we'll do another test.

58
00:04:17,130 --> 00:04:21,930
We're just gonna make sure that we see the correct error if we enter in a password for a valid user

59
00:04:22,140 --> 00:04:23,400
but the password is incorrect.

60
00:04:23,430 --> 00:04:25,940
So essentially we're going to test out that custom validator.

61
00:04:25,950 --> 00:04:30,920
We just put together it's going to go back over to my browser.

62
00:04:31,130 --> 00:04:32,940
I'm gonna go back to my sign in route.

63
00:04:32,970 --> 00:04:39,180
I'm going to put in some log in credentials that I know or a email that I know exists but password that

64
00:04:39,180 --> 00:04:45,380
is incorrect then try to sign in and I know it says you are signed in but technically we are not.

65
00:04:45,370 --> 00:04:48,940
Remember we just removed some checks from the body of our post request handler.

66
00:04:48,950 --> 00:04:51,740
Let's take a look at our terminal and see what console logs we got.

67
00:04:51,740 --> 00:04:58,060
We should see some errors inside their and sure enough we see invalid password okay.

68
00:04:58,080 --> 00:04:59,030
So that's definitely good.

69
00:04:59,060 --> 00:05:03,710
But we do also have to make sure that if we enter the correct password that we are still able to log

70
00:05:03,710 --> 00:05:05,150
in successfully.

71
00:05:05,210 --> 00:05:16,050
So I to go back over I go back to my sign and form I'll put in a valid e-mail and a valid password I'll

72
00:05:16,060 --> 00:05:20,960
sign in now if I go to my terminal I should not see any errors at all.

73
00:05:21,090 --> 00:05:25,930
And sure enough I don't see any errors array right there is empty okay.

74
00:05:25,940 --> 00:05:29,950
So it looks like our custom validator is definitely working out correctly now.

75
00:05:29,960 --> 00:05:34,290
The last thing we're going to do is extract that used to validator so we just put together into that

76
00:05:34,290 --> 00:05:37,010
separate validator Scott J as file number.

77
00:05:37,020 --> 00:05:43,050
The entire idea here is that we want to keep in general this off J.S. file as reasonably clean as we

78
00:05:43,050 --> 00:05:48,660
can so I will first begin by taking the check of email.

79
00:05:48,660 --> 00:05:54,750
I'm gonna cut that I'm going to go over to validators J us which remember is inside of our admin roots

80
00:05:54,750 --> 00:05:58,730
directory at the bottom.

81
00:05:58,770 --> 00:06:04,500
I can make sure I get a come out right after the last validator and I'll say something here like require

82
00:06:05,250 --> 00:06:12,210
valid email as we already have one named up here require email so I can want to differentiate between

83
00:06:12,210 --> 00:06:12,790
these two.

84
00:06:12,850 --> 00:06:16,870
Or how about a better name it would be maybe require email exists.

85
00:06:16,920 --> 00:06:18,240
That's what we're really doing here.

86
00:06:18,240 --> 00:06:19,720
I think that's all a bit better.

87
00:06:19,860 --> 00:06:24,110
We'll get more descriptive well then put a comma after that.

88
00:06:26,260 --> 00:06:28,080
I'll go back to off J.S. again.

89
00:06:28,240 --> 00:06:29,830
I'm going to find the check of our password.

90
00:06:31,070 --> 00:06:32,570
I'm gonna cut that entire block

91
00:06:36,080 --> 00:06:40,350
go back over to validators and I'll put it here.

92
00:06:40,380 --> 00:06:44,440
Both require valid password for user.

93
00:06:44,660 --> 00:06:48,900
I guess that kind of makes sense and paste that in the name here.

94
00:06:48,910 --> 00:06:53,090
Kind of implies that this is some valid password for some person.

95
00:06:53,160 --> 00:06:56,770
I left it left off the last word valid password for user.

96
00:06:56,770 --> 00:06:57,390
There we go.

97
00:06:59,570 --> 00:07:00,640
Maybe that's a bit too long.

98
00:07:00,670 --> 00:07:02,010
But I don't know.

99
00:07:02,150 --> 00:07:05,200
I think it kind of makes sense.

100
00:07:05,410 --> 00:07:11,460
Okay so now we need to make sure that we require email exists and require valid password for user back

101
00:07:11,460 --> 00:07:18,260
into our off date J.S. file so I'm going to add in the first one up here at the very top where we are

102
00:07:18,260 --> 00:07:26,090
requiring from validators so I'm going to d structure out to require email exists and I will also D

103
00:07:26,090 --> 00:07:28,550
structure out to require valid password for user

104
00:07:32,340 --> 00:07:37,440
and I'll take both those we're going to add them into that validation array back on that request handler

105
00:07:37,470 --> 00:07:44,160
that we were just working on they'll go back down here's the array we were just working on where we

106
00:07:44,160 --> 00:07:49,710
just extracted those validators from and I'll put in require email exists and require valid password

107
00:07:49,710 --> 00:07:52,860
for user I'll say this.

108
00:07:53,190 --> 00:07:56,710
And there we go.

109
00:07:56,750 --> 00:08:00,890
I'm going to once again test out this endpoint really quickly just to make sure I didn't make any typos

110
00:08:00,920 --> 00:08:06,420
as I was moving all that code over so I'll go back over to sign in okay.

111
00:08:06,430 --> 00:08:11,690
Looks like I've got an error here in my browser which means I definitely just made a typo so I'm going

112
00:08:11,680 --> 00:08:12,960
to figure out what it was.

113
00:08:13,620 --> 00:08:19,430
I can see what error just occurred by going to my terminal so says require a callback function but got

114
00:08:19,460 --> 00:08:20,750
object undefined.

115
00:08:20,750 --> 00:08:23,520
So I definitely just made a mistake somewhere.

116
00:08:23,570 --> 00:08:27,050
Let's see I've got require email exists require valid password for user.

117
00:08:27,050 --> 00:08:28,610
Oh I didn't see the other file.

118
00:08:29,500 --> 00:08:29,800
All right.

119
00:08:29,870 --> 00:08:31,210
They're going to save that file.

120
00:08:32,060 --> 00:08:32,840
Refresh.

121
00:08:32,840 --> 00:08:33,320
There we go.

122
00:08:33,350 --> 00:08:35,900
There's my form.

123
00:08:36,100 --> 00:08:37,340
It's all now entering.

124
00:08:37,340 --> 00:08:41,530
Let's say test at test dot com an invalid password for that.

125
00:08:41,530 --> 00:08:43,060
I'll try to sign in.

126
00:08:43,120 --> 00:08:46,800
Check my terminal once again and I should see invalid password.

127
00:08:47,610 --> 00:08:47,860
OK.

128
00:08:47,890 --> 00:08:53,440
So he successfully extracted all that logic I noses and yet another long video but now the last thing

129
00:08:53,440 --> 00:08:58,030
we have to do is make sure that we take those errors and feed them into a template in case something

130
00:08:58,030 --> 00:08:58,500
went wrong.

131
00:08:59,050 --> 00:09:00,900
So we'll take care of that in the next video.
