1
00:00:00,830 --> 00:00:01,090
All right.

2
00:00:01,100 --> 00:00:06,260
We're on to our very last method here called get one by the goal this method is to call it with some

3
00:00:06,260 --> 00:00:12,170
filters object and then return the first user inside of our collection of users that matches those filters.

4
00:00:12,170 --> 00:00:15,770
So the big question here is obviously what exactly is this filters object.

5
00:00:15,770 --> 00:00:19,610
Well it's go back over to our code and we'll give you a better idea of what that filters object is supposed

6
00:00:19,610 --> 00:00:23,660
to be it's back inside of my test function right here.

7
00:00:23,790 --> 00:00:27,770
I'm going to give you a quick demonstration of how we're going to eventually call get one by.

8
00:00:27,770 --> 00:00:30,930
So it's going to look something like this a await repo.

9
00:00:31,050 --> 00:00:36,480
Get one by and we're going to pass in an object and this is what is going to contain all the different

10
00:00:36,480 --> 00:00:37,630
filters.

11
00:00:37,790 --> 00:00:44,660
So inside of here we might put in something like email with test at test dot com.

12
00:00:44,670 --> 00:00:48,900
The goal here is that we're going to go through our big list of users and we're gonna find the first

13
00:00:48,900 --> 00:00:56,970
one that has an email exactly equal to test at test dot com we can also add in multiple properties into

14
00:00:56,970 --> 00:00:58,200
this filter object.

15
00:00:58,230 --> 00:01:03,630
So for example if I also add in a password of my password now we're saying go through all of our different

16
00:01:03,630 --> 00:01:10,890
users and find the first user with an email of test at test dot com and a password of my password.

17
00:01:10,890 --> 00:01:14,220
We could even optionally add in say the idea as well.

18
00:01:14,220 --> 00:01:19,470
So now this would be fine the first user that that I.D. that e-mail and that password so we can have

19
00:01:19,620 --> 00:01:22,250
all these different properties or just one.

20
00:01:22,350 --> 00:01:27,150
So we could take this all the way down to just find me the user with a password of my password like

21
00:01:27,150 --> 00:01:33,350
so so get one by is going to be a very flexible method we can use to find any arbitrary record with

22
00:01:33,380 --> 00:01:36,440
any arbitrary set of properties inside of it.

23
00:01:36,680 --> 00:01:40,460
Now that we've got a better idea of what this filters object is all about let's start to write out the

24
00:01:40,460 --> 00:01:50,540
code for this OK right after my update method I'm going to add in a new method called get one by I'll

25
00:01:50,540 --> 00:01:58,440
make sure they market as async and I'm going to receive the filters argument like so so then inside

26
00:01:58,440 --> 00:02:02,020
of here we're going to first get our big collection of all of our different records.

27
00:02:02,160 --> 00:02:09,860
So we'll say here's my records I'll await this not gets all well then iterate through this collection

28
00:02:09,860 --> 00:02:10,540
of records.

29
00:02:10,580 --> 00:02:18,180
So we'll do a four Let's record of records and then inside of here I'm going to first declare a temporary

30
00:02:18,180 --> 00:02:24,750
variable called found and I'll initialize it with the value of true then immediately after that we're

31
00:02:24,750 --> 00:02:30,120
going to iterate over our filters objects we're going to take a look at every key value pair and for

32
00:02:30,120 --> 00:02:35,220
every key we're going to compare the value to the key or the value at the appropriate key inside the

33
00:02:35,220 --> 00:02:42,210
record object if they are not the same then we're going to update found two false otherwise if they

34
00:02:42,210 --> 00:02:45,340
are the same then we won't update found at all.

35
00:02:45,410 --> 00:02:50,520
Then after we iterate through all the different properties inside of filters if found is still equal

36
00:02:50,520 --> 00:02:53,190
to true that means we must have found the record we are looking for.

37
00:02:53,250 --> 00:02:57,430
So we will immediately return it now a verbal description doesn't really help.

38
00:02:57,430 --> 00:03:01,400
So let's just write out the code here and I think you'll get a better idea of what we're doing.

39
00:03:01,640 --> 00:03:05,890
The step one we want to iterate through all the key value pairs of the filters object.

40
00:03:05,980 --> 00:03:15,660
So I'll say for let key in filters are very important to note here we have to for loops the outer for

41
00:03:15,660 --> 00:03:23,950
loop is a for of loop because we are iterating through a array the inner for loop is a for in loop.

42
00:03:24,090 --> 00:03:29,980
So notice the keyword right there in we are using a for in loop here because we are iterating through

43
00:03:30,010 --> 00:03:36,070
an object when we iterate through an object using a for in loop we're going to receive every key inside

44
00:03:36,070 --> 00:03:41,140
of that object so we can look up the value inside of the object at that particular key with filters

45
00:03:41,140 --> 00:03:48,040
at key that would give us like my password right there and the key variable would refer to password

46
00:03:49,740 --> 00:03:55,710
we're going to use this for in loop to iterate through all the key value pairs of filters so then inside

47
00:03:55,710 --> 00:04:07,970
there will say if the record at this key is not equal to filters at key that means that the email or

48
00:04:08,020 --> 00:04:12,610
of the email or password or whatever that we just passed inside the filters object is different than

49
00:04:12,610 --> 00:04:17,310
the email or password or whatever inside of the record that we are currently iterating over.

50
00:04:17,320 --> 00:04:22,600
So if that is the case we're going to flip found two false which means we did not just find the record

51
00:04:22,600 --> 00:04:30,480
we're looking for and after he finished this inner for loop we'll take a look at the found boolean.

52
00:04:30,480 --> 00:04:37,100
So if found is still equal to true or in other words if just if found like so.

53
00:04:37,110 --> 00:04:38,740
Because those are equivalent.

54
00:04:38,850 --> 00:04:42,900
That means that we must have found the record we are looking for because all the keys and values in

55
00:04:42,900 --> 00:04:46,120
the filters object and our record are the same.

56
00:04:46,170 --> 00:04:48,470
So if that is the case we will return.

57
00:04:48,570 --> 00:04:53,710
Record Okay so that's pretty much it.

58
00:04:53,930 --> 00:04:56,940
Let's now do a quick test back inside of our test method.

59
00:04:57,080 --> 00:05:02,660
Down here I've got in a wait repo get one by I'm gonna make sure they put in some key value pair for

60
00:05:02,660 --> 00:05:04,570
a record that actually exists.

61
00:05:04,630 --> 00:05:09,920
So right now back inside my user start Jason File I've got a user with an email of test at test dot

62
00:05:09,920 --> 00:05:17,250
com so I'm going to update my filters object right here to look for a user with an email of test at

63
00:05:17,820 --> 00:05:26,200
test dot com or then assign that to a user variable and do a console log of user if everything worked

64
00:05:26,230 --> 00:05:33,960
I should see a console log of this entire object right here it's all going to save the file I'll go

65
00:05:33,960 --> 00:05:42,110
back over run node users day Yes And sure enough there we go now we can try to add on an additional

66
00:05:42,110 --> 00:05:48,230
property for this filtering criteria so my filters object right here in addition to trying to find a

67
00:05:48,230 --> 00:05:57,360
user with that given email I'm going to try to find a user with the password as well of my password

68
00:06:00,350 --> 00:06:07,050
so if I now say this again run my code yep still find the appropriate user but if I tried to find a

69
00:06:07,050 --> 00:06:10,920
user with say a password of something like that right there.

70
00:06:10,950 --> 00:06:12,590
Well that user doesn't exist.

71
00:06:12,600 --> 00:06:18,840
So in this case I would expect to see undefined so if I say it again run it yet undefined because we

72
00:06:18,840 --> 00:06:20,900
didn't find the appropriate user.

73
00:06:21,060 --> 00:06:22,980
And then finally one last test here.

74
00:06:22,980 --> 00:06:28,740
Let's try to search by ideas well I'll first try to find an actual user so I'm going to copy the idea

75
00:06:28,740 --> 00:06:37,270
right there and put it in as my filtering criteria I'll save that run again Yep it works and if I try

76
00:06:37,270 --> 00:06:44,090
to find a user with a garbage I.D. save it didn't find it.

77
00:06:44,100 --> 00:06:46,290
OK one last test the very last test.

78
00:06:46,390 --> 00:06:50,530
What happens if we try to find a user with a property that just doesn't exist.

79
00:06:50,590 --> 00:06:59,080
So a property of like gibberish with a value of 1 to 3 inside of a string we'll try this as well.

80
00:06:59,080 --> 00:07:05,320
And yet there's definitely no user inside of our repository with a key of that right there any value

81
00:07:05,320 --> 00:07:06,660
of string one two three.

82
00:07:06,670 --> 00:07:09,560
So I would definitely expect to see undefined there.

83
00:07:09,580 --> 00:07:09,790
OK.

84
00:07:09,830 --> 00:07:15,960
So that is the get one by method and well that is pretty much our users repository overall.

85
00:07:16,000 --> 00:07:20,860
So we've now got this really useful set of code or this useful set of methods right here that allow

86
00:07:20,860 --> 00:07:26,220
us to work with a collection of users and manipulate them in some really predictable fashion.

87
00:07:26,290 --> 00:07:30,580
Now that we've got this all put together we can get back to our original application and continue working

88
00:07:30,580 --> 00:07:36,370
on these sign up and sign in functionality of our app so quick pause and I'll see you in just a minute.
