WEBVTT
1
00:00:00.150 --> 00:00:06.010
Speaking of types there are two functions I'll quickly mention called Pass and parts float.

2
00:00:06.060 --> 00:00:11.970
You may not use them all the time but there are situations where you have a string and you need to turn

3
00:00:11.970 --> 00:00:13.100
it into a number.

4
00:00:13.230 --> 00:00:19.260
So the string contains a number hopefully and you want to extract that number as a numeric value so

5
00:00:19.260 --> 00:00:23.240
you can do math with it or do something numerical with it.

6
00:00:23.310 --> 00:00:28.110
So Parsons is going to give us back it will return an integer.

7
00:00:28.110 --> 00:00:31.740
You can see here pass it off the string twenty four gives us twenty four.

8
00:00:31.860 --> 00:00:38.370
If we try it on a decimal the string twenty four point nine eight seven it stops at that period at the

9
00:00:38.370 --> 00:00:44.700
decimal and it just gives us the integer part twenty four parts float does the same thing except it's

10
00:00:44.700 --> 00:00:50.360
going to pass the entire float the entire decimal number of the string in the string.

11
00:00:51.230 --> 00:00:57.860
So I can just quickly show you that if we do pass it let's say we ask the user to enter their age into

12
00:00:57.860 --> 00:01:04.730
a form and they enter in twenty one pass and it's going to give us the actual number.

13
00:01:04.730 --> 00:01:11.030
If we had twenty one and we wanted to add a year to it to indicate a birthday for that person that's

14
00:01:11.030 --> 00:01:12.020
not going to work for us.

15
00:01:12.080 --> 00:01:20.750
But if we pass out of the string 21 we can now add one and get twenty two and then we also have past

16
00:01:20.750 --> 00:01:28.220
float which you could see from the slide if we pass in something like thirty three point five we'll

17
00:01:28.220 --> 00:01:31.250
get back a number containing a decimal.

18
00:01:31.370 --> 00:01:39.560
Now there are some weird situations like if you tried to pass it on a price dollar sign ninety nine.

19
00:01:40.880 --> 00:01:43.400
It's going to give us not a number.

20
00:01:43.400 --> 00:01:45.040
It does not like that dollar sign.

21
00:01:45.080 --> 00:01:49.740
It's not expecting any non number characters any non digits in there.

22
00:01:49.940 --> 00:01:51.850
And the same applies for parts float.

23
00:01:52.130 --> 00:01:59.420
But if your string does contain a number at the beginning if it starts with a number like 99 cents.

24
00:01:59.420 --> 00:02:05.360
If we had the words sense afterwards we actually will get the number ninety nine out of there.

25
00:02:05.360 --> 00:02:10.250
So it's kind of odd if it detects a number at the beginning if the first character is a valid digit

26
00:02:10.640 --> 00:02:13.760
then it will keep going until it can't go any further.

27
00:02:13.760 --> 00:02:19.970
So if I had this we'll get all of that profile instead have a non digit character at the beginning it

28
00:02:19.970 --> 00:02:21.260
gets messed up.

29
00:02:21.260 --> 00:02:27.230
Also I can put spaces in there and it will be OK but as soon as I put other characters it gets confused

30
00:02:28.220 --> 00:02:32.080
you probably won't be doing something like this with this particular string.

31
00:02:32.180 --> 00:02:32.960
But it's common.

32
00:02:32.960 --> 00:02:38.900
If a user enters something into a form this is one way of getting that string because form data comes

33
00:02:38.900 --> 00:02:39.780
in as a string.

34
00:02:39.890 --> 00:02:43.220
You could turn it into an actual number and do math with it and that's it.

35
00:02:43.280 --> 00:02:44.420
Person parts float.
