WEBVTT
1
00:00:00.300 --> 00:00:05.630
Last but certainly not least we have reduce reduce is a built in array method.

2
00:00:05.670 --> 00:00:10.770
You pass a callback to it and just like all the methods we've seen in this section I saved it for last.

3
00:00:10.770 --> 00:00:12.980
Because reduce is a bit different.

4
00:00:13.050 --> 00:00:18.290
It's really useful and versatile but it also is a little tricky to explain.

5
00:00:18.360 --> 00:00:21.780
So this image is not here for you to be afraid of reduce.

6
00:00:21.870 --> 00:00:26.600
It's here showing you my own fear of teaching reduce every time I teach it.

7
00:00:26.610 --> 00:00:30.650
It goes well enough but I always feel like I could've done that better.

8
00:00:30.840 --> 00:00:37.050
And I'm always worried not actually stressing about it but it's always something that I worry about

9
00:00:37.050 --> 00:00:40.170
making better because it's just not that easy to teach.

10
00:00:40.310 --> 00:00:44.270
Reduce is something that you just need to practice in order to get good with it.

11
00:00:44.280 --> 00:00:45.120
So what is reduce.

12
00:00:45.120 --> 00:00:46.650
Why is it even named reduce.

13
00:00:46.650 --> 00:00:48.600
We've seen many like for each.

14
00:00:48.600 --> 00:00:50.490
That seems like a pretty standard name.

15
00:00:50.540 --> 00:00:52.330
It does something for each element.

16
00:00:52.380 --> 00:00:58.080
We've seen every or filter or sort reduce is maybe not as intuitive.

17
00:00:58.260 --> 00:01:05.370
But here's what it does it takes an array of values and it reduces them down to a single value which

18
00:01:05.370 --> 00:01:06.720
is what this little diagram is.

19
00:01:06.720 --> 00:01:09.060
I spent a long time working on this.

20
00:01:09.060 --> 00:01:11.930
It's all just clip art but I couldn't find the right stuff.

21
00:01:11.940 --> 00:01:17.340
The idea is each one of these is maybe representing an element in an array and they're being combined

22
00:01:17.370 --> 00:01:21.080
and reduced down to a single droplet of liquid.

23
00:01:21.240 --> 00:01:26.460
So applications for reduce include things like summing every element in an array.

24
00:01:26.460 --> 00:01:28.640
That's probably the simplest one will start with.

25
00:01:28.890 --> 00:01:34.810
But it's not always about summing or multiplying or accumulating data in one number.

26
00:01:34.860 --> 00:01:38.650
It could be finding the maximum value in an entire array.

27
00:01:38.700 --> 00:01:43.150
We're reducing this array of 100 numbers down to one maximum.

28
00:01:43.260 --> 00:01:48.000
It could also be tallying votes or tallying data in an array or in an object.

29
00:01:48.030 --> 00:01:50.940
So I'm going to split reduced into a couple different videos.

30
00:01:50.940 --> 00:01:52.730
We're going to start with the basics here.

31
00:01:52.740 --> 00:01:57.570
We're gonna talk about how it works with the simplest example of something every element in an array.

32
00:01:58.380 --> 00:02:04.580
So reduce is an Array method we pass in a callback and that callback needs to follow a particular format.

33
00:02:06.210 --> 00:02:08.580
That format looks like this.

34
00:02:08.580 --> 00:02:11.930
It's a callback with at least two parameters.

35
00:02:12.000 --> 00:02:15.700
Now the documentation calls this first one accumulator.

36
00:02:15.720 --> 00:02:22.020
Other people will call it total but this is the variable where the parameter that will store the end

37
00:02:22.020 --> 00:02:23.700
result of reduce.

38
00:02:23.910 --> 00:02:28.110
And then we have current value or Val or element.

39
00:02:28.110 --> 00:02:33.390
This represents each individual element in the array as reduced works its way across.

40
00:02:33.750 --> 00:02:38.640
So it doesn't matter what you name them but the first thing the first parameter here will store the

41
00:02:38.670 --> 00:02:42.180
total or the accumulated value that we're reducing down to.

42
00:02:42.240 --> 00:02:47.710
And then current value or just the second parameter here stores each individual element.

43
00:02:47.730 --> 00:02:50.900
So this example sums all numbers in this array.

44
00:02:52.050 --> 00:02:55.410
If we take a look at this table I think it helps explain how it works.

45
00:02:55.680 --> 00:03:02.820
The accumulator variable is going to start as the first element in the array and current value starts

46
00:03:02.850 --> 00:03:04.480
as the next element.

47
00:03:04.560 --> 00:03:10.800
And if you look at what we're returning accumulator plus current value so take the current total which

48
00:03:10.800 --> 00:03:17.130
is initialized to the first element three add it to the next value five current value.

49
00:03:17.130 --> 00:03:18.080
That gives us eight.

50
00:03:18.390 --> 00:03:20.110
So we return eight.

51
00:03:20.430 --> 00:03:24.840
That is then used as accumulator in the next iteration.

52
00:03:24.870 --> 00:03:30.960
So accumulator now remembers the last time the last sum which was eight.

53
00:03:30.990 --> 00:03:36.030
So now accumulator is eight in current value is the next element seven.

54
00:03:36.180 --> 00:03:42.390
So we add them together and return that which is 15 and now reduce runs again or if the callback rather

55
00:03:42.450 --> 00:03:45.700
runs again accumulator is now 15.

56
00:03:45.810 --> 00:03:51.590
It remembers the value from last time the sum or the total and current value is nine.

57
00:03:51.600 --> 00:03:57.310
So we add 15 and nine that's what I'm reducing or how I'm reducing we get 24.

58
00:03:57.360 --> 00:04:00.200
It goes one more time accumulator is 24.

59
00:04:00.200 --> 00:04:04.890
On the fourth call it holds a sum of all of these elements before it.

60
00:04:05.040 --> 00:04:07.990
And now current value is the last element eleven.

61
00:04:08.280 --> 00:04:14.250
So we return the sum of twenty four and eleven which gives us thirty five and we've hit the end.

62
00:04:14.310 --> 00:04:16.780
So reduce returns thirty five.

63
00:04:16.860 --> 00:04:19.950
That is the total accumulated value.

64
00:04:19.950 --> 00:04:23.550
So we end up with thirty five as the return value.

65
00:04:23.580 --> 00:04:28.290
So again think of it this way we're taking a bunch of values and we're reducing them down to a single

66
00:04:28.290 --> 00:04:29.340
value.

67
00:04:29.340 --> 00:04:36.060
And the function that we pass in has to follow this format where the first thing is a total or the accumulator

68
00:04:36.390 --> 00:04:42.060
or just the place the value that you are reducing and it will hold the value each time that changes

69
00:04:42.180 --> 00:04:43.170
or it can change.

70
00:04:43.170 --> 00:04:49.890
So every time this function runs it's past the previous return value of the function and then current

71
00:04:49.890 --> 00:04:53.070
value is whichever value we're working on.

72
00:04:53.070 --> 00:04:54.390
So let's try it again.

73
00:04:54.480 --> 00:04:56.260
Let's do something slightly different.

74
00:04:56.370 --> 00:05:00.390
Let's do a simple array we'll go with numbers just to keep it easy.

75
00:05:00.510 --> 00:05:01.540
Let's go.

76
00:05:01.590 --> 00:05:05.490
How about three four five six seven.

77
00:05:06.660 --> 00:05:07.590
Okay.

78
00:05:07.620 --> 00:05:14.040
And then if we call numbers dot reduced and I want to multiply all numbers together and end up with

79
00:05:14.040 --> 00:05:20.160
a product of all of these numbers I need to pass in my callback which follows that format you can see

80
00:05:20.160 --> 00:05:25.410
here I'm actually getting the autocomplete or the preview where the first value of the first parameter

81
00:05:25.860 --> 00:05:30.810
they call it previous value in V.S. code and current value is the second parameter.

82
00:05:30.810 --> 00:05:36.000
Let's call this one total instead of accumulator accumulator sounds a little intense.

83
00:05:36.000 --> 00:05:44.670
So total and then curve curve Val I guess current value is fine and then I'll do an arrow function so

84
00:05:44.670 --> 00:05:51.360
I need a set of parents around the two parameters and then my arrow and I won't do this one on one line

85
00:05:51.700 --> 00:06:01.090
will return manually I want to multiply total by the current Val and then let's save this to a variable

86
00:06:01.360 --> 00:06:12.040
const product equals what does product equal we get twenty five twenty okay I guess that's probably

87
00:06:12.040 --> 00:06:16.470
right let's see three times four times five times six times seven.

88
00:06:16.570 --> 00:06:18.060
There we go.

89
00:06:18.070 --> 00:06:18.270
Okay.

90
00:06:18.310 --> 00:06:22.510
So if you feel like you understand how it works you can go ahead and stop watching this video and move

91
00:06:22.510 --> 00:06:27.970
on to the more advanced ways of using reduce which is the next video but if you want to step through

92
00:06:27.970 --> 00:06:29.800
this step by step let's go ahead and do it.

93
00:06:30.640 --> 00:06:38.650
So the very first time reduce calls our callback total is going to be initialized to the first element.

94
00:06:38.650 --> 00:06:40.310
So I'm gonna make a little table here.

95
00:06:40.450 --> 00:06:49.090
We'll go with total and then all the way over here we'll have current Val so the first time through

96
00:06:49.390 --> 00:06:56.920
it initialize this total to three right there then current Val is going to be set to the very next element

97
00:06:57.160 --> 00:07:05.350
which is four and we are returning total times current Val so we return twelve and produce remembers

98
00:07:05.350 --> 00:07:13.060
that if if we want to personify it it remembers the previous return value which was twelve so it uses

99
00:07:13.060 --> 00:07:14.920
twelve as total.

100
00:07:14.920 --> 00:07:20.350
The next time through it passes 12 as a total and then current value is going to be five.

101
00:07:20.410 --> 00:07:23.480
So we get twelve and then all the way over here.

102
00:07:23.520 --> 00:07:24.910
No I made it so far away.

103
00:07:25.030 --> 00:07:30.340
We have five now what's five times twelve What is that sixty.

104
00:07:30.610 --> 00:07:31.030
Is that right.

105
00:07:31.210 --> 00:07:31.570
Yeah.

106
00:07:31.720 --> 00:07:41.530
Right OK so the return value is 60 this time and 60 is now the new total and current value is going

107
00:07:41.530 --> 00:07:42.600
to be six.

108
00:07:42.610 --> 00:07:50.770
So we have 60 and then six and then the callback is called One More Time 60 times six is thirty six

109
00:07:50.770 --> 00:07:53.310
hundred no 360.

110
00:07:53.350 --> 00:08:02.880
Excuse me so that is the new total that is returned from this iteration here return total 60 times six.

111
00:08:02.900 --> 00:08:04.160
That's 360.

112
00:08:04.160 --> 00:08:05.810
That is the new total.

113
00:08:05.810 --> 00:08:10.390
And the final value in the array is seven.

114
00:08:10.590 --> 00:08:17.620
So we end up now with 360 times seven which gives us two thousand five hundred and twenty.

115
00:08:17.670 --> 00:08:19.660
So that is a step by step walkthrough.

116
00:08:19.680 --> 00:08:25.980
Remember that the first parameter is the total it is the thing you are boiling down to you're reducing

117
00:08:25.980 --> 00:08:28.710
down to and you're keeping track it persists.

118
00:08:28.710 --> 00:08:34.140
You can think of it as having a memory throughout this whole iterative cycle and then current value

119
00:08:34.140 --> 00:08:39.510
changes every time depending on which iteration we're on which element we're actually using.

120
00:08:39.510 --> 00:08:46.320
So this is a simple example of multiplying everything we saw how we could sum all elements in an array.

121
00:08:46.320 --> 00:08:49.260
Next we'll see some more advanced use cases for reduce.
