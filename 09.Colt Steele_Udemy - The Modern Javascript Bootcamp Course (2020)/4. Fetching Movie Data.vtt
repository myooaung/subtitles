WEBVTT
1
00:00:01.070 --> 00:00:03.740
All right my friends in this video we're going to start writing some code.

2
00:00:03.740 --> 00:00:08.690
The first thing we're going to do is to make sure that we can reach out to the old DB API and do a search

3
00:00:08.810 --> 00:00:10.330
or some different movies.

4
00:00:10.340 --> 00:00:12.500
That's a very core operation inside of our app.

5
00:00:12.530 --> 00:00:17.000
So we should probably make sure that we can get that working right away to make use of this free API.

6
00:00:17.000 --> 00:00:22.610
I'm going to first navigate to OMD API dot com inside my browser once here.

7
00:00:22.620 --> 00:00:27.490
We first have to sign up for the API and get what is called an API key.

8
00:00:27.740 --> 00:00:32.470
The API key essentially identifies us to the API whenever we make a request.

9
00:00:32.580 --> 00:00:38.950
We can think of it as like an email and password that our code is sending over to the API to get an

10
00:00:38.980 --> 00:00:39.720
API key.

11
00:00:39.730 --> 00:00:44.920
We're gonna go to the very top menu and find the section that says API key.

12
00:00:45.150 --> 00:00:47.100
It is free to generate an API key.

13
00:00:47.160 --> 00:00:49.750
All we have to do is enter in our email address.

14
00:00:49.800 --> 00:00:55.730
So going to select the free option right here and then I will enter in my email.

15
00:00:55.750 --> 00:01:00.100
It does have to be a valid email because they're going to email us our key.

16
00:01:00.180 --> 00:01:03.930
I'll put in my email my name and for use right here.

17
00:01:03.970 --> 00:01:06.930
We're just being asked to enter a description of what we are building.

18
00:01:06.930 --> 00:01:11.860
So I'm going to say that this is API practice doesn't really matter what we put in there.

19
00:01:12.750 --> 00:01:17.340
I'll then submit this and then I'll be told that there we go.

20
00:01:17.370 --> 00:01:21.020
I'm going to be sent a verification link to my email.

21
00:01:21.120 --> 00:01:26.040
So you're going to now open up your email account and you're going to find an email that was just sent

22
00:01:26.040 --> 00:01:29.180
to you I'm going to pull up my email really quickly.

23
00:01:29.180 --> 00:01:30.680
Here it is right here.

24
00:01:30.680 --> 00:01:32.670
You'll see that I am given my API key.

25
00:01:32.780 --> 00:01:34.610
That is essentially my password right there.

26
00:01:34.610 --> 00:01:39.370
And it identifies me to the API before we can use that key.

27
00:01:39.380 --> 00:01:44.090
We do have to clean click the link at the bottom of the email to make sure that you do click that link

28
00:01:44.150 --> 00:01:45.110
right there.

29
00:01:45.950 --> 00:01:49.140
Now I'm told that my key has been activated OK.

30
00:01:49.150 --> 00:01:49.610
Very good.

31
00:01:50.140 --> 00:01:52.780
So make sure you keep that key up on your screen.

32
00:01:52.840 --> 00:01:54.700
We're going to use it in just a moment.

33
00:01:54.970 --> 00:01:59.650
Before we use the key however let's take another look at the documentation for this API and get a better

34
00:01:59.650 --> 00:02:05.940
idea of how we do a search operation so I'm going to go back to the main page and then scroll down a

35
00:02:05.940 --> 00:02:06.720
little bit.

36
00:02:08.720 --> 00:02:14.740
So to access the API we're going to make a request to that your URL right there when we make the request.

37
00:02:14.750 --> 00:02:20.790
We have to include the API key that we just signed up with in order to customize the request.

38
00:02:20.820 --> 00:02:25.230
We're going to also pass in some number of different query string parameters.

39
00:02:25.390 --> 00:02:30.240
Remember remember parameters are essentially added on to the very end of a your L..

40
00:02:30.450 --> 00:02:34.710
We're going to be using a library that is going to add in these different parameters for us automatically

41
00:02:36.030 --> 00:02:40.800
but to do a search operation we'll scroll down to the search section and we are being told right here

42
00:02:40.890 --> 00:02:48.330
that if we add in a query string parameter called S and assign it some string that is going to be interpreted

43
00:02:48.450 --> 00:02:54.730
as the movie title that we are trying to search for so this documentation is not the most clear in the

44
00:02:54.730 --> 00:02:59.620
world but that's OK well let's go back over to our code editor and we're going to start to write out

45
00:02:59.620 --> 00:03:06.000
some code to make a search request and this documentation will very quickly start to make sense.

46
00:03:06.250 --> 00:03:12.600
So back inside my code editor I've already opened up my index dot J.S. file I'm going to delete that

47
00:03:12.600 --> 00:03:18.800
console log that was inside there by default we're going to be making a network request here remember

48
00:03:18.800 --> 00:03:23.720
that with JavaScript there are many different ways we can make a network request we can use the built

49
00:03:23.720 --> 00:03:28.970
in batch function that is included inside the browser or we can make use of third party libraries like

50
00:03:28.970 --> 00:03:33.170
the access library that makes making requests just a little bit easier.

51
00:03:33.440 --> 00:03:38.180
In this case we're going to be using axioms again just because it makes our life a little bit easier

52
00:03:38.390 --> 00:03:44.300
than using fetch directly Acciona has already been wired up to this project you can find it referenced

53
00:03:44.300 --> 00:03:50.360
in a script tag inside of the index dot each GMO file though in order to make our request I'm going

54
00:03:50.360 --> 00:03:58.420
to first define a helper function and I'm going to call batch data I'm going to want to use the async

55
00:03:58.510 --> 00:04:04.670
await syntax with this thing when we make our request I'm going to mark the function as async and then

56
00:04:04.670 --> 00:04:13.590
inside the function body I will write out const response is a weight axis dot get to remember the first

57
00:04:13.590 --> 00:04:19.350
argument to the axial stock function is going to be the URL that we want to retrieve whenever we make

58
00:04:19.350 --> 00:04:24.360
a network request that is an asynchronous operation and we essentially have to wait before we get some

59
00:04:24.360 --> 00:04:29.080
kind of response to continue running the lines of code directly underneath that and that's why we have

60
00:04:29.080 --> 00:04:34.290
the await keyword right there we're going to eventually get back a response object that is an object

61
00:04:34.290 --> 00:04:40.020
that represents all the information related to this request in response that we've just made and inside

62
00:04:40.020 --> 00:04:46.560
of that response object is the data that we should be getting back from our API so as the first argument

63
00:04:46.830 --> 00:04:54.500
to axial stop get going to go back over to the API documentation going to find where it says usage and

64
00:04:54.520 --> 00:04:57.430
I'm going to put in this URL right here now.

65
00:04:57.490 --> 00:04:58.350
Really important.

66
00:04:58.360 --> 00:05:02.260
We're not going to copy in the API key part just yet.

67
00:05:02.260 --> 00:05:10.640
So I'm just gonna get each TTP OMD API dot com I'm just gonna copy that and then put it in as the first

68
00:05:10.640 --> 00:05:11.360
argument.

69
00:05:11.360 --> 00:05:14.180
So again make sure you only have dot com inside there.

70
00:05:14.180 --> 00:05:21.810
Like so then to specify all the different parameters here like our API key or the search string that

71
00:05:21.810 --> 00:05:26.700
we want to use we're going to use some automated functionality inside of axioms.

72
00:05:26.970 --> 00:05:32.850
So we could manually type out question mark API key blah blah blah right there but instead using axioms

73
00:05:32.850 --> 00:05:39.940
we can write this out a lot more neatly by putting in a second argument of an object inside the second

74
00:05:40.000 --> 00:05:47.410
argument we're going to put in a property called Ram's and inside this thing we're going to list out

75
00:05:47.500 --> 00:05:52.990
all the different query string parameters that we want to pass along with the request so we can imagine

76
00:05:52.990 --> 00:05:58.120
that this object right here is going to be turned into a string and appended to the end of that you

77
00:05:58.120 --> 00:06:05.400
are L inside a parameter we're going to first list out our API key are really important.

78
00:06:05.400 --> 00:06:08.760
Notice that we have a lowercase key on here it is not uppercase.

79
00:06:08.790 --> 00:06:14.220
So everything is lowercase and then I'm going to put in the API key that I just got from my email a

80
00:06:14.220 --> 00:06:16.350
moment ago.

81
00:06:16.400 --> 00:06:26.610
So here's the API key right they're going to copy it and paste it in I'm also going to specify that

82
00:06:26.670 --> 00:06:29.910
s property s essentially stands for search.

83
00:06:29.910 --> 00:06:33.030
That is the property we just looked up on the API documentation.

84
00:06:33.030 --> 00:06:36.970
So this is going to be a string of the movie that we want to search for.

85
00:06:37.050 --> 00:06:43.130
I'm going to first try looking for the Avengers so I'll put in Avengers like so okay.

86
00:06:43.210 --> 00:06:43.930
And that should be it.

87
00:06:43.930 --> 00:06:46.120
That should be all we need to make our request.

88
00:06:46.210 --> 00:06:48.850
Now if this prams object right here is a bit mysterious.

89
00:06:48.880 --> 00:06:49.720
Don't sweat it.

90
00:06:49.720 --> 00:06:54.130
As soon as we make the request and look at it inside of our browser you're going to very quickly understand

91
00:06:54.160 --> 00:06:56.420
what that part is all about.

92
00:06:56.610 --> 00:06:56.870
OK.

93
00:06:56.900 --> 00:07:02.350
So after we make the request I'll then do a console dot log of response dot data.

94
00:07:02.510 --> 00:07:07.070
Again remember that whenever we make a request with axes This is an object that has a lot of different

95
00:07:07.070 --> 00:07:10.880
properties inside of it that describe the request and response we've just issued.

96
00:07:10.880 --> 00:07:15.260
The only property that we usually care about is the data property and that's the actual information

97
00:07:15.460 --> 00:07:17.030
that we just got back from that API.

98
00:07:19.360 --> 00:07:19.560
All right.

99
00:07:19.570 --> 00:07:21.640
So I'll save this one less thing.

100
00:07:21.640 --> 00:07:23.770
Let's make sure we call fetch data at the bottom.

101
00:07:23.870 --> 00:07:29.950
It's going to save this now put back to where the browser I'm going to go back to my index Dot.

102
00:07:29.990 --> 00:07:37.620
Each team page open up my console and then refresh and sure enough right away I see a response from

103
00:07:37.620 --> 00:07:38.920
that API.

104
00:07:38.920 --> 00:07:43.560
Now if you do not see a response right here if you instead see some kind of error message make sure

105
00:07:43.590 --> 00:07:48.900
first off that you have in fact activated your API key so that you went into your email and clicked

106
00:07:48.900 --> 00:07:49.410
on that link.

107
00:07:50.010 --> 00:07:54.030
Secondly make sure that you've got a lowercase API key right here.

108
00:07:54.060 --> 00:07:56.140
Make sure you've got the correct URL right there.

109
00:07:56.220 --> 00:08:01.740
And essentially just do a direct comparison of this file the inside of this response object that we

110
00:08:01.740 --> 00:08:02.480
got back.

111
00:08:02.670 --> 00:08:07.590
We have a search property and inside there are all the different movies that match the search string

112
00:08:07.590 --> 00:08:08.490
that we've just provided.

113
00:08:09.090 --> 00:08:13.930
So I'm seeing a lot of different movies with the word Avengers in the title.

114
00:08:13.950 --> 00:08:17.580
One thing I want to point out here is you'll notice that we are just getting back a couple of different

115
00:08:17.580 --> 00:08:19.200
properties about each movie.

116
00:08:19.200 --> 00:08:25.170
So I'm only seeing the title the type whether it is a movie or a TV show or something similar.

117
00:08:25.170 --> 00:08:32.010
The year that it was released the idea of the movie and then very interestingly right here a link to

118
00:08:32.010 --> 00:08:34.380
the image for the movie as well.

119
00:08:34.500 --> 00:08:39.830
I copy that and throw it into my browser really quickly I'll see the poster.

120
00:08:39.830 --> 00:08:44.560
So this is what we're going to eventually show for each individual movie.

121
00:08:44.570 --> 00:08:49.820
Now one last thing I want to show you inside of my network request log by open that up I can search

122
00:08:49.820 --> 00:08:55.640
by x H R requests and this will show me only the request that my javascript code have issued.

123
00:08:55.880 --> 00:09:01.420
So there's a request we just made to the API if I click on headers right here it will show me the bullet

124
00:09:01.420 --> 00:09:02.730
request you are out.

125
00:09:02.810 --> 00:09:09.030
So you'll notice that axioms took that parameter object that we passed in to that configuration object.

126
00:09:09.070 --> 00:09:15.550
It took the API key property and its value and the s property and its value and it stuck them automatically

127
00:09:15.550 --> 00:09:18.600
into the URL as a query string.

128
00:09:18.610 --> 00:09:23.740
So again this is what is kind of nice about using axioms if we were using fetch we would have had to

129
00:09:23.740 --> 00:09:27.640
form that string by ourselves by hand not the worst thing in the world.

130
00:09:27.640 --> 00:09:32.080
But again just a nice little benefit to using the axial library okay.

131
00:09:32.110 --> 00:09:33.110
So now we've got some data.

132
00:09:33.130 --> 00:09:37.350
I know this is a long video don't worry future videos will definitely be shorter for the most part.

133
00:09:37.400 --> 00:09:41.230
So let's take a pause right here and we're going to start to investigate our data that we just fetched

134
00:09:41.320 --> 00:09:42.040
a little bit more.
