WEBVTT
1
00:00:00.810 --> 00:00:04.030
We just added in some request handlers for these two routes right here.

2
00:00:04.050 --> 00:00:09.130
Like I mentioned we're going to first focus on giving our users the ability to create new products.

3
00:00:09.180 --> 00:00:11.020
We're going to have to somehow create a form.

4
00:00:11.160 --> 00:00:15.810
We're going to allow users to submit that form validate the inputs and then we use those inputs to create

5
00:00:15.840 --> 00:00:17.290
a new product.

6
00:00:17.310 --> 00:00:20.700
So very similar stuff to all the authentication stuff that we're just doing.

7
00:00:20.730 --> 00:00:25.810
Like I just mentioned the second half of this course going to go way faster so one the owner reminds

8
00:00:25.820 --> 00:00:30.830
you about around creating new users is that we stored all the different users that we created inside

9
00:00:30.830 --> 00:00:32.880
of a repository of sorts.

10
00:00:32.900 --> 00:00:37.520
So we had to call that repositories users dot J.S. Right there.

11
00:00:37.600 --> 00:00:42.740
It's now that we are talking about storing products and allowing users to create edit them and so on.

12
00:00:42.740 --> 00:00:48.860
I think that we might need to create a second repository one specifically dedicated to handling products

13
00:00:48.860 --> 00:00:54.300
that have been created so let's take a look at a diagram and get a better idea of the different methods

14
00:00:54.510 --> 00:00:58.200
that a product's repository is probably going to require.

15
00:00:58.220 --> 00:01:02.740
OK so here are the different methods that I think a product's repository is going to need.

16
00:01:02.740 --> 00:01:07.870
So we're going to have a method called get all that's going to return all of our products get one where

17
00:01:07.870 --> 00:01:13.990
we're going to provide an I.D. and get back a product with the specified I.D. and hey wait a minute

18
00:01:14.630 --> 00:01:17.770
there's this diagram look familiar to you at all.

19
00:01:18.670 --> 00:01:22.240
Well let's take a look at another diagram that we looked at a little bit ago.

20
00:01:22.300 --> 00:01:28.790
Here's the diagram for users repository with one small update to it at the bottom take a look at both

21
00:01:28.790 --> 00:01:34.250
these really closely and you're gonna notice very quickly that these two repositories for users and

22
00:01:34.250 --> 00:01:39.820
products are just about identical so this was very much done on purpose.

23
00:01:39.870 --> 00:01:44.280
It turns out that all these methods around working with different records that are stored inside an

24
00:01:44.280 --> 00:01:49.560
array are going to be just about identical no matter what type of data we are working with.

25
00:01:49.770 --> 00:01:54.810
The only methods that are going to change significantly might be you like say the create method and

26
00:01:54.810 --> 00:01:57.990
that's specifically the create method inside of users repository.

27
00:01:58.050 --> 00:02:04.470
Because remember inside of creates we had to add in some password hashing algorithm stuff just about

28
00:02:04.530 --> 00:02:10.380
everything else inside the user's repository and the product's repository are going to end up being

29
00:02:10.680 --> 00:02:17.310
absolutely identical because our users repository right now is implemented with a class.

30
00:02:17.420 --> 00:02:18.760
I got a quick question for you.

31
00:02:18.830 --> 00:02:25.190
What is one of the best ways that we can have a code reuse using classes you might recall earlier in

32
00:02:25.190 --> 00:02:31.580
the course we spoke about object oriented programming and extending classes so rather than creating

33
00:02:31.670 --> 00:02:37.790
a product's repository where we just read implement all these different methods right here we're going

34
00:02:37.790 --> 00:02:43.910
to instead take an object oriented approach we're going to create a parent class called simply repository

35
00:02:44.570 --> 00:02:49.730
and that class is going to have all of the different methods that are common or going to be identical

36
00:02:49.790 --> 00:02:53.160
between products repository and users.

37
00:02:53.540 --> 00:02:59.990
We're then going to have users and products extend that parent class so they're going to borrow all

38
00:02:59.990 --> 00:03:05.330
these different methods from the parent class and we won't have to re implement or redefine them every

39
00:03:05.330 --> 00:03:07.820
single time that we want to create a new repository.

40
00:03:07.820 --> 00:03:13.520
Instead we're going to just bar them from that parent and then we can customize them as required in

41
00:03:13.520 --> 00:03:19.070
the case of say the create method for the users the repository where like I said we had to do that password

42
00:03:19.070 --> 00:03:21.730
hashing algorithm stuff OK.

43
00:03:21.770 --> 00:03:26.180
So now that we understand how we're going to get some amount of code reuse for all these different repositories

44
00:03:26.180 --> 00:03:30.230
and we end up creating quick pause and we'll start to implement this stuff in just a moment.
