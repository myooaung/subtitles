WEBVTT
1
00:00:00.640 --> 00:00:03.480
No less video we saw that we were making search request for our API.

2
00:00:03.480 --> 00:00:08.030
Way too often so in this video we're going to figure out how to somehow fix this behavior.

3
00:00:08.030 --> 00:00:10.470
Just make sure it's really crystal clear what we're going to try to do.

4
00:00:10.470 --> 00:00:12.660
Let me show you a couple of quick diagrams.

5
00:00:12.750 --> 00:00:14.570
So this is our current behavior right now.

6
00:00:14.580 --> 00:00:19.230
Every single time there's a key press we do a search to our API and this is not ideal.

7
00:00:19.230 --> 00:00:21.020
This is not what we want.

8
00:00:21.030 --> 00:00:25.970
So instead this is a little bit closer to the experience that we want to have inside of application.

9
00:00:26.010 --> 00:00:30.690
We want to allow the user to press the key inside that input as many times as they want.

10
00:00:30.900 --> 00:00:37.380
And only after we go through about one second or so of nothing happening do we want to eventually call

11
00:00:37.380 --> 00:00:38.610
the search function.

12
00:00:38.610 --> 00:00:41.570
So in other words let the user press as many times as they want.

13
00:00:41.700 --> 00:00:47.910
If they then stop for one second then go ahead and call search and there's two ways that we can implement

14
00:00:47.910 --> 00:00:48.960
this functionality.

15
00:00:49.170 --> 00:00:54.450
We can add either add in a javascript library that will do this for us automatically or we can write

16
00:00:54.450 --> 00:00:57.780
out some code where we will just figure out how to do it ourselves.

17
00:00:57.850 --> 00:00:59.420
And I bet you can guess which we're going to do.

18
00:00:59.490 --> 00:01:02.370
We're going to figure out how to implement this from scratch on our own.

19
00:01:02.880 --> 00:01:07.470
It's actually a little bit simpler than you might think but to implement this we first need to get a

20
00:01:07.470 --> 00:01:10.770
little bit of background on the set timeout function.

21
00:01:10.800 --> 00:01:14.770
Chances are you've already taken a look at the set time out and function in javascript before.

22
00:01:14.810 --> 00:01:19.780
I just want to give you a quick recap on how set time out works in general so I'm going to write out

23
00:01:19.810 --> 00:01:22.220
a little bit of test code inside my console.

24
00:01:22.240 --> 00:01:29.460
Back over here inside my console inside my browser I'm going to use the set timeout function I can use

25
00:01:29.460 --> 00:01:31.390
it by calling set timeout.

26
00:01:31.650 --> 00:01:37.440
I'm going to pass in an era function to it as the first argument and inside of that arrow function I'll

27
00:01:37.440 --> 00:01:45.650
do a console log of hi there like so the second argument to the set timeout function is a delay that's

28
00:01:45.650 --> 00:01:49.880
going to specify how long we want to wait before we run that function right there.

29
00:01:49.880 --> 00:01:57.090
The one with the console log though as the second argument to set timeout I'm going to put in 1000 which

30
00:01:57.090 --> 00:02:02.730
means that I want to wait one second or 1000 milliseconds before executing that function.

31
00:02:02.880 --> 00:02:08.340
So if I run that I'll wait for about a second and then I see a high there appear I can adjust it up

32
00:02:08.340 --> 00:02:14.220
to five seconds and that will wait five seconds before that function is invoked and the important thing

33
00:02:14.220 --> 00:02:19.820
to keep in mind around set time out is that any time we call it we get back an integer value.

34
00:02:19.990 --> 00:02:26.440
In the first case we got out of set time out a value of one in the next case we got out a value of two.

35
00:02:26.490 --> 00:02:33.000
These numbers are essentially identifiers and they identify the timer that we just created if we want

36
00:02:33.000 --> 00:02:38.790
to we can call the clear timeout function to stop that pending timer and prevent that function from

37
00:02:38.790 --> 00:02:44.850
being called I want to set up another timeout and I'm going to give it a timeout of 10 seconds like

38
00:02:44.850 --> 00:02:50.850
so that's going to give me more than enough time to write out some code very quickly to clear the timer

39
00:02:50.910 --> 00:02:56.330
that I set up with this line of code so I'm going to run that and then very quickly write out clear

40
00:02:56.380 --> 00:03:03.310
timeout with three like so when I call clear time out of three that means look at the timer that was

41
00:03:03.310 --> 00:03:08.950
created with the idea of three to the timer that was created an idea of three was this one right here

42
00:03:09.570 --> 00:03:15.880
it's on saying stop that running timer and don't call that function ever even after 10 seconds pass

43
00:03:17.000 --> 00:03:20.370
let's just a quick reminder on how set time out in clear time network.

44
00:03:20.930 --> 00:03:25.100
Now that we were we understand or have a quick reminder on that let's go back over to our code and we're

45
00:03:25.100 --> 00:03:30.690
going to add in a little bit of code to add in this behavior right here OK.

46
00:03:30.770 --> 00:03:35.600
So back inside of my index dot j ust file I'm going to go down to where we added that event listener

47
00:03:37.460 --> 00:03:42.980
so the function that we kind of want to prevent from being executed is this whole function right here.

48
00:03:42.980 --> 00:03:45.220
We want to stop that from ever running.

49
00:03:45.530 --> 00:03:52.710
If a user is pressing on the keyboard too often so to add that in I'm going to first assign that function

50
00:03:52.920 --> 00:03:58.800
to a new variable I'm going to cut the function out right above I'm going to create a new variable called

51
00:03:59.310 --> 00:04:08.330
on input and assign that function to it all then pass that variable as the second argument into the

52
00:04:08.330 --> 00:04:09.480
event listener.

53
00:04:09.530 --> 00:04:17.010
So on input like so what we have right here is 100 percent equivalent to the code we had before now

54
00:04:17.010 --> 00:04:24.010
we can add in some logic to actually make sure that we don't call input too often though to do so inside

55
00:04:24.010 --> 00:04:25.420
of an input.

56
00:04:25.630 --> 00:04:31.540
I'm going to first right above the function to clear a variable that I'll call timeout I.D. like so

57
00:04:32.410 --> 00:04:37.180
we're eventually going to take one those ideas that we get from calling set time out like the ones we

58
00:04:37.180 --> 00:04:43.760
saw back over here 1 2 and 3 and we're going to assign one of those ideas to this variable then inside

59
00:04:43.760 --> 00:04:49.130
this function we're going to wrap the fetched to call with a set time out so let's say set time out

60
00:04:50.880 --> 00:04:59.160
like so I'll move my call to fetch data into the timeout function then as the second argument to set

61
00:04:59.160 --> 00:05:02.480
time outs I'm gonna put in 1000 milliseconds.

62
00:05:02.910 --> 00:05:08.700
So if we ran our code right now the only effect would be to make sure that we introduce a delay of 1000

63
00:05:08.700 --> 00:05:13.960
seconds receiving 1000 milliseconds between typing something and actually calling batch data.

64
00:05:13.980 --> 00:05:16.320
That's the only change that would occur right now.

65
00:05:16.440 --> 00:05:21.240
Well we want to make sure that we don't run any code until the user stops typing for some amount of

66
00:05:21.240 --> 00:05:23.960
time to implement that behavior.

67
00:05:24.000 --> 00:05:25.180
I'm going to take the timer.

68
00:05:25.200 --> 00:05:31.780
It gets returned from calling set time out an assignment assign it to timeout idea like so.

69
00:05:31.850 --> 00:05:35.210
Now here's the magic line of code right above that.

70
00:05:35.210 --> 00:05:40.960
So between on inputs and where we assign that timeout I.D. I'm going to add in an if statement I'm going

71
00:05:40.960 --> 00:05:50.780
to say if I'm at I.D. then clear Timeout timeout I.D. That's the magic part right there now you can

72
00:05:50.780 --> 00:05:53.630
kind of imagine what is going on behind the scenes here.

73
00:05:53.750 --> 00:05:55.490
We're going to be calling on input.

74
00:05:55.490 --> 00:06:00.480
Many many times in a row just imagine a user typing into the input like the word Avengers.

75
00:06:00.560 --> 00:06:06.260
However many characters that is we're going to call on input that number of times the very first time

76
00:06:06.260 --> 00:06:10.010
that on input is going to be called we're going to enter this function.

77
00:06:10.010 --> 00:06:16.250
We're going to take a look and see if timeout I.D. is defined a very first time that we call this function

78
00:06:16.250 --> 00:06:18.620
timeout an I.D. is going to be undefined.

79
00:06:18.650 --> 00:06:22.130
So we're going to skip over this if statement entirely.

80
00:06:22.130 --> 00:06:30.200
We're going to go down to set time out and set up a timer and say in one second call batch data that's

81
00:06:30.200 --> 00:06:31.960
the very first key press.

82
00:06:32.150 --> 00:06:38.880
We're then going to assign that timer to timeout I.D. users then going to press on the second key on

83
00:06:38.880 --> 00:06:39.930
their keyboard.

84
00:06:40.080 --> 00:06:41.580
The second time they press the key.

85
00:06:41.580 --> 00:06:43.760
We're going to once again enter this function.

86
00:06:43.860 --> 00:06:48.450
And now when we hit the if statement timeout idea will be defined.

87
00:06:48.510 --> 00:06:54.590
So we're going to enter the if statement and we're going to stop that pending timer we're going to stop

88
00:06:54.590 --> 00:06:59.180
the existing one and we're going to set up a brand new one of the brand new one is going to have a new

89
00:06:59.180 --> 00:07:05.280
value that it's going to call fetch data with that process is then going to repeat itself over and over

90
00:07:05.280 --> 00:07:11.540
and over again until we eventually go for a full second before calling on input again.

91
00:07:11.850 --> 00:07:17.430
In that scenario we're not going to call clear time out this time out is going to execute and fetch

92
00:07:17.430 --> 00:07:24.180
data will be called let's save this and test out our code and see how it's doing.

93
00:07:24.190 --> 00:07:27.140
I got to go back over to the network tab over here.

94
00:07:27.140 --> 00:07:32.660
I'm going to search for Avengers against all put in Avengers like so and have to wait for about a second

95
00:07:32.750 --> 00:07:38.920
after my last key press before I actually see a request being issued which is exactly what we want.

96
00:07:39.000 --> 00:07:42.760
It's now a user can you typing in here they can make as many typos as they want.

97
00:07:42.770 --> 00:07:49.570
And we're not burning through all of our credits on our API that looks pretty good.

98
00:07:49.670 --> 00:07:54.010
Now that's going to mention is that we can very easily make sure that we execute this search a little

99
00:07:54.010 --> 00:08:00.160
bit more quickly by just adjusting that 1000 milliseconds right there so we can instead go to 500 and

100
00:08:00.160 --> 00:08:04.580
now we are going to do the search twice as quickly after the user stops typing.

101
00:08:04.580 --> 00:08:07.630
Now I can put in Avengers and I'll see this search up here right away.

102
00:08:08.410 --> 00:08:08.650
OK.

103
00:08:08.710 --> 00:08:10.380
So this looks pretty good.

104
00:08:10.390 --> 00:08:12.760
Let's take a quick pause right here and continue in the next video.
