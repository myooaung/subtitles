WEBVTT
1
00:00:01.140 --> 00:00:04.630
Next we have to do is make sure that we iterate over each these neighbor pairs.

2
00:00:04.710 --> 00:00:09.570
So going to set a of a for of loop to iterate through all these different neighbors.

3
00:00:09.630 --> 00:00:18.330
So I'll say or let neighbor of neighbors I'm going to put the closing curly brace for the for loop right

4
00:00:18.330 --> 00:00:20.200
above this very last comment.

5
00:00:20.250 --> 00:00:25.400
Like so then inside of here we're gonna do a couple of different checks.

6
00:00:25.420 --> 00:00:31.240
We first need to see if that neighbor is out of balance remember if we centered on the element like

7
00:00:31.240 --> 00:00:39.280
right here we have definitely got all four sides covered inside that neighbors array.

8
00:00:39.470 --> 00:00:44.780
So we definitely do not want to go above or to the left at all but implement this.

9
00:00:44.780 --> 00:00:48.080
We can just add in a little bit clever logic right here first rate above.

10
00:00:48.090 --> 00:00:50.540
I'm going to get access to the neighbor variable.

11
00:00:50.540 --> 00:00:55.430
I'm going to pull a couple variables out of it using a radio structuring so I going to say next row

12
00:00:56.090 --> 00:01:00.540
and next column and that's going to come from the neighbor variable.

13
00:01:00.540 --> 00:01:06.640
So next row next column is essentially the cell that we are thinking about visiting next so to do this

14
00:01:06.640 --> 00:01:16.180
check and see if that neighbor is out of bounds I'll say if next row is less than zero or next row is

15
00:01:16.180 --> 00:01:19.370
greater than or equal to cells.

16
00:01:19.390 --> 00:01:21.700
Remember we defined cells at the very top up here.

17
00:01:21.790 --> 00:01:28.840
That's going to be the total number of cells in both the horizontal and vertical direction so a check

18
00:01:28.960 --> 00:01:34.760
of greater than or equal to cells is going to handle the case in which we are trying to walk off to

19
00:01:34.760 --> 00:01:42.930
the far right hand side or the far bottom edge as well we can also check to see if next column is less

20
00:01:42.930 --> 00:01:48.810
than zero or next column it's greater than or equal to cells as well

21
00:01:52.030 --> 00:01:53.190
as zoom out for just a second.

22
00:01:53.210 --> 00:01:59.030
You can see that whole line very easily so if we encounter this situation right here and we do have

23
00:01:59.030 --> 00:02:03.530
a neighbor that is out of bounds or we're trying to visit we still want to iterate through all the remaining

24
00:02:03.530 --> 00:02:08.630
neighbors but we don't want to run any other code for this particular neighbor period that we are looking

25
00:02:08.630 --> 00:02:09.740
at right now.

26
00:02:09.800 --> 00:02:10.890
So to do so we'll use the.

27
00:02:10.910 --> 00:02:17.380
Continue keyword remember the continue keyword means don't leave this for loop.

28
00:02:17.480 --> 00:02:20.660
Just don't do anything else for the current iteration of the current step.

29
00:02:20.660 --> 00:02:27.120
So essentially skip over all the rest of the stuff in here and move on to the next neighbor pair so

30
00:02:27.140 --> 00:02:30.380
then after that this is going to be kind of a more challenging step.

31
00:02:30.380 --> 00:02:31.550
We need to check to see our me.

32
00:02:31.580 --> 00:02:32.640
This one's going to easy.

33
00:02:32.640 --> 00:02:37.700
We need to see if we visited this neighbor and if we have we'll just continue to the next neighbor.

34
00:02:37.780 --> 00:02:43.310
Recall that inside of our grid array we are storing all those billions of true or false to record whether

35
00:02:43.310 --> 00:02:45.660
or not a certain cell has been visited.

36
00:02:45.670 --> 00:02:54.830
It's all we have to do here is look at if grid at next row next column is true then continue as well

37
00:02:57.230 --> 00:03:00.520
we could technically combine these two statements together into one.

38
00:03:00.560 --> 00:03:03.730
But personally I think that breaking them out separately just leaves.

39
00:03:03.770 --> 00:03:08.120
Make sure it's really clear about exactly what's going on inside of our coat and anyone else who reads

40
00:03:08.120 --> 00:03:12.860
this in the future can look at this comment and just understand exactly what these two statements are

41
00:03:12.860 --> 00:03:13.640
really looking for.

42
00:03:14.470 --> 00:03:14.760
OK.

43
00:03:14.780 --> 00:03:17.120
Now here's the part that's going to be a little more challenging.

44
00:03:17.120 --> 00:03:24.260
So now we need to take a look and decide if we are trying to go up or down left or right and depending

45
00:03:24.260 --> 00:03:29.340
upon that we need to update either the verticals array or the horizontals array.

46
00:03:29.390 --> 00:03:36.030
So once again let's imagine that we're at that Senate center cell right here so if we are going up or

47
00:03:36.030 --> 00:03:41.940
down we are crossing over a horizontal element and that means we need to update the horizontals array

48
00:03:42.730 --> 00:03:48.330
otherwise if we are going left or right we're crossing over a vertical element that means we need to

49
00:03:48.330 --> 00:03:51.640
update the verticals array now.

50
00:03:51.660 --> 00:03:56.800
Unfortunately with only the information we have inside of this for loop right now it's just a little

51
00:03:56.800 --> 00:04:03.130
bit challenging to decide if we are going up down left or right in order to really decide that we could

52
00:04:03.130 --> 00:04:09.910
do some kind of comparison between next row and next column versus the row in column variables so we

53
00:04:09.910 --> 00:04:11.050
currently have.

54
00:04:11.110 --> 00:04:15.610
So we can essentially subtract each of these from each other and use that to determine which direction

55
00:04:15.610 --> 00:04:16.750
we are travelling.

56
00:04:16.810 --> 00:04:19.880
But there's a way easier way to do it than that.

57
00:04:19.900 --> 00:04:25.870
Remember the array right here of neighbors we put together we said that row minus one was going to be

58
00:04:25.930 --> 00:04:31.810
above and then the next one's going to be going down and then the next one is going to be going to the

59
00:04:31.810 --> 00:04:33.340
right or excuse me.

60
00:04:33.340 --> 00:04:34.480
I get that in the wrong order.

61
00:04:34.480 --> 00:04:39.900
Sorry that's going up to the right down to the left.

62
00:04:40.000 --> 00:04:44.050
So in order to make that really clear and communicate that ordering down into our for loop we can just

63
00:04:44.050 --> 00:04:49.840
throw on a third element to these arrays and we can use that third element as kind of a flag to determine

64
00:04:49.870 --> 00:04:55.670
what direction we are traveling in down when we get to this statement down here as the third element

65
00:04:55.670 --> 00:05:04.910
and these arrays are going to say a string right here of this one we are moving up then right and down

66
00:05:05.830 --> 00:05:13.540
and then left so then inside of our D structuring statement right there we're pulling out the next row

67
00:05:13.540 --> 00:05:14.210
next column.

68
00:05:14.320 --> 00:05:17.420
We can also get the direction that we are traveling.

69
00:05:17.620 --> 00:05:22.720
Gives me direction that we are traveling in so we can use that variable right there to decide which

70
00:05:22.720 --> 00:05:29.610
way we're going and use that to decide if we're going to modify either horizontals or verticals of the

71
00:05:29.610 --> 00:05:32.520
rest of the logic we need for this step is just a little bit complicated.

72
00:05:32.520 --> 00:05:36.330
So let's take a quick pause right here and discuss exactly what has to be done in the next video.
