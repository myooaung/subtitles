1
00:00:00,770 --> 00:00:04,590
Well it doesn't look pretty but we are displaying our auto complete widget right here.

2
00:00:04,590 --> 00:00:08,720
So now we can start to actually write some effective tests to make sure that this thing is working as

3
00:00:08,720 --> 00:00:10,130
expected.

4
00:00:10,160 --> 00:00:13,820
First we have to do is understand what do we want to test it all.

5
00:00:13,820 --> 00:00:17,500
As I mentioned earlier we're going to try to test some very basic functionality.

6
00:00:17,630 --> 00:00:23,990
We're going to make sure that when we type inside of here we should eventually see some pop up here.

7
00:00:24,020 --> 00:00:29,540
There should be some results inside of it and there should be some exact number of results as well.

8
00:00:29,540 --> 00:00:33,530
Finally the last thing that we might want to test is going to be to make sure that when we first display

9
00:00:33,530 --> 00:00:38,480
the widget there should not be a dropdown that might sound like a really crazy thing to test but it

10
00:00:38,480 --> 00:00:42,080
is a valid test and might actually be one of the most important tests we write.

11
00:00:42,110 --> 00:00:46,440
Make sure that when you first display auto complete the dropdown should not be open.

12
00:00:46,490 --> 00:00:48,760
Let's try writing out that test to start.

13
00:00:48,790 --> 00:00:53,960
So we need to first figure out how we write a test to check for whether or not that thing is open to

14
00:00:53,960 --> 00:00:54,760
do so.

15
00:00:55,040 --> 00:01:00,740
We're going to open up our element Inspector inside of our chrome console.

16
00:01:00,770 --> 00:01:05,420
We're going to take a look at the autocomplete widgets each e-mail structure and we're going to observe

17
00:01:05,540 --> 00:01:09,530
the difference between the autocomplete being open and not open.

18
00:01:09,530 --> 00:01:14,780
Once we understand what mechanism it uses to be open or not open we can then write a test to make sure

19
00:01:14,780 --> 00:01:24,630
that it's well not open I'm going to find my element selector and then click on that input element.

20
00:01:24,640 --> 00:01:24,870
All right.

21
00:01:24,880 --> 00:01:27,380
So I've got the div with Idi autocomplete.

22
00:01:27,910 --> 00:01:30,100
I've then got the label which we don't really care about.

23
00:01:30,100 --> 00:01:32,050
I've got the input which we don't really care about.

24
00:01:32,170 --> 00:01:34,270
And then I've got the dropdown element right here.

25
00:01:34,270 --> 00:01:36,080
That is what we really care about right now.

26
00:01:36,100 --> 00:01:40,670
So we want to make sure that this thing starts off as being closed right now.

27
00:01:40,670 --> 00:01:41,780
It clearly is closed.

28
00:01:41,780 --> 00:01:43,540
Like I don't see any content on the screen.

29
00:01:43,580 --> 00:01:46,960
But how can we actually write some code that verifies that.

30
00:01:46,970 --> 00:01:48,680
Well I'm going to do a search really quickly.

31
00:01:48,710 --> 00:01:53,650
And when I do the search I want you to pay very close attention to that div element right there.

32
00:01:53,930 --> 00:01:57,440
So I can type inside of here Avengers and after about half a second.

33
00:01:57,440 --> 00:02:03,080
Notice how that class list right there linked it blinked because there was an additional class that

34
00:02:03,080 --> 00:02:10,340
got added the presence of that is Dash active class is what decides whether or not the dropdown is visible

35
00:02:11,310 --> 00:02:19,180
if I manually attempt to update that class list and delete is Dash active the dropdown goes away so

36
00:02:19,180 --> 00:02:24,310
if we want to make sure that this thing starts off as being closed we could write a test to make sure

37
00:02:24,310 --> 00:02:30,310
that we first show our widget to the user this dropdown element right here or the David class dropdown

38
00:02:30,400 --> 00:02:36,250
should not also have a class of is active because as soon as it has the is active class that means the

39
00:02:36,250 --> 00:02:44,660
dropdown is open so let's go back over to our test file and figure out how to express that in code.

40
00:02:44,680 --> 00:02:44,950
All right.

41
00:02:44,950 --> 00:02:50,140
Some back inside of autocomplete dot test dot J.S. Right here's where we actually created our autocomplete

42
00:02:50,800 --> 00:02:56,830
right after that I'm then going to write a little selector I'm going to try to select that dropdown

43
00:02:57,040 --> 00:02:58,920
or the David class dropdown.

44
00:02:58,960 --> 00:03:03,550
Now this is a quick reminder I'm looking at the actual application but all this stuff actually occurs

45
00:03:03,580 --> 00:03:05,020
over here as well.

46
00:03:05,020 --> 00:03:08,410
I was just showing it in the real app just because we had the styling it was a little bit easier to

47
00:03:08,410 --> 00:03:10,540
see the dropdown truly was open.

48
00:03:10,630 --> 00:03:15,760
If we refresh this right now and select that same input we'll see yep there's still that div with class

49
00:03:15,760 --> 00:03:20,230
dropdown if we type inside there it also gets is Dash active.

50
00:03:20,230 --> 00:03:25,420
It's the same logic applies for our test widget as well all right.

51
00:03:25,430 --> 00:03:26,280
So back over here.

52
00:03:26,360 --> 00:03:33,440
I'm going to select the dropdown so I'll say construct down is document dot query selector not dropdown

53
00:03:35,070 --> 00:03:39,930
and then after that we need to write out an assertion right here or some kind of check to make sure

54
00:03:39,930 --> 00:03:47,330
that the dropdown doesn't have a class of is Dash active remember how we did that back in node or at

55
00:03:47,330 --> 00:03:51,440
the node set of testing we did we made use of that a certain module.

56
00:03:51,440 --> 00:03:54,060
So we set something or we would have said something over there.

57
00:03:54,080 --> 00:03:55,740
This is not what we're going to write.

58
00:03:55,970 --> 00:04:05,120
Not real well we would have written something like asserts dot I don't know strict deep equals or actually

59
00:04:05,120 --> 00:04:14,790
strict equals would work just fine and we could have checked dropdown dot class name dropdown like so.

60
00:04:14,820 --> 00:04:19,880
So that would make sure that our dropdown by default only has the dropdown class name.

61
00:04:20,010 --> 00:04:24,810
Now unfortunately we don't have access to the Assert library inside of the browser.

62
00:04:24,810 --> 00:04:30,570
And that is because well the Assert library or the Assert module is a part of the node standard library.

63
00:04:30,570 --> 00:04:36,030
So we have to figure out some other method of making an assertion like this some way of proving or saying

64
00:04:36,270 --> 00:04:43,250
this is how life should be so when we are making use of MOCA in the browser we've got a couple of different

65
00:04:43,280 --> 00:04:44,290
options.

66
00:04:44,300 --> 00:04:48,320
First off we could kind of go back to our original behavior which was to just write a simple if statement

67
00:04:48,410 --> 00:04:55,130
and say something like If dropdown dot class name blah blah blah and then if that vial of that rule

68
00:04:55,130 --> 00:04:58,610
was true we could then throw a new error.

69
00:04:58,730 --> 00:04:59,540
So that would definitely work.

70
00:05:00,050 --> 00:05:04,460
But as we saw before this approach started to lead to a lot of duplicated code.

71
00:05:04,510 --> 00:05:10,270
So we need to figure out something better than that so when we are running MOCA inside the browser the

72
00:05:10,360 --> 00:05:15,060
official recommendation is to make use of another library called Shy.

73
00:05:15,400 --> 00:05:22,140
If you go back over to your test each email file your test H.M. and we look right below that David.

74
00:05:22,180 --> 00:05:23,790
I.T. target that we just added in.

75
00:05:23,860 --> 00:05:29,050
You'll see that the HMO structure that we copied over from the documentation has a script tag for something

76
00:05:29,050 --> 00:05:30,580
called Chai right here.

77
00:05:30,910 --> 00:05:37,240
Chai is what we call an expectation library or an assertion library is library that allows us to use

78
00:05:37,240 --> 00:05:43,880
those same kind of assert statements that we saw at that node module just a little bit ago so it's essentially

79
00:05:43,880 --> 00:05:50,930
a improvement in theory overwriting out those really kind of tedious if statements that eventually throw

80
00:05:51,080 --> 00:05:52,740
an error.

81
00:05:52,770 --> 00:05:53,840
Let's take a quick pause right here.

82
00:05:53,850 --> 00:05:58,020
When we come back the next video we'll take a look at the chai documentation and understand how we can

83
00:05:58,020 --> 00:06:03,330
use it to make sure that the dropdown right here does not have that class name of IS dash active.
