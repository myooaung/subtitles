1
00:00:00,200 --> 00:00:04,300
OK so that was a quick taste of XM L H GDP request.

2
00:00:04,440 --> 00:00:10,200
It's a mouthful both to say and also to type especially once we get working with a bunch of callbacks

3
00:00:10,200 --> 00:00:12,330
and nesting things it becomes very messy.

4
00:00:12,810 --> 00:00:14,990
So this is where fetch comes in.

5
00:00:15,030 --> 00:00:19,070
Fetch is the newer way of making requests via javascript.

6
00:00:19,140 --> 00:00:26,280
It is something that essentially was created because XY chars example HDP requests were just obnoxious

7
00:00:26,310 --> 00:00:33,180
or difficult to remember clunky things got messy with callbacks I don't support promises so fetch is

8
00:00:33,180 --> 00:00:34,590
the solution.

9
00:00:34,590 --> 00:00:38,700
The only problem with Fetch is that it's not supported in Internet Explorer.

10
00:00:38,790 --> 00:00:45,900
If you take a look on MDA and can see under I'm on the page called fetch API down at the bottom browser

11
00:00:45,900 --> 00:00:48,920
compatibility what we care about is this part right here.

12
00:00:48,920 --> 00:00:55,410
These are all more advanced features but this part here fetch in general no support in i.e. the main

13
00:00:55,410 --> 00:00:55,910
thing.

14
00:00:55,980 --> 00:01:02,220
Aside from the cleaner syntax and easier to remember terminology the main advantage is that it supports

15
00:01:02,220 --> 00:01:05,160
promises which we spent a ton of time on.

16
00:01:05,190 --> 00:01:10,170
I hope by now if you if you made it through the promises section you can understand why promises are

17
00:01:10,170 --> 00:01:15,150
useful especially when we're making a bunch of requests so let's see an example.

18
00:01:15,150 --> 00:01:18,420
This is what it looks like we call a method called fetch.

19
00:01:18,420 --> 00:01:25,020
We pass in some U.R.L. then that returns a promise and then of course the promise is either resolved

20
00:01:25,050 --> 00:01:26,100
or rejected.

21
00:01:26,100 --> 00:01:31,560
If it is resolved the value is resolved with is a response object.

22
00:01:31,560 --> 00:01:33,960
It contains information about the response.

23
00:01:33,960 --> 00:01:36,870
Otherwise we can catch a rejected promise.

24
00:01:36,960 --> 00:01:42,060
If for some reason the fetch didn't work for internet was just not connected for some reason that would

25
00:01:42,060 --> 00:01:43,070
be one example.

26
00:01:43,170 --> 00:01:44,420
This code would run.

27
00:01:44,520 --> 00:01:49,860
So why don't we go back to our app J.S. This is what we had from the last few videos.

28
00:01:49,890 --> 00:01:51,600
Let's rewrite this using fetch.

29
00:01:51,600 --> 00:01:55,650
This is done with creating a new X AML HDP request.

30
00:01:55,740 --> 00:02:03,480
I'm going to copy the URL from the very first request we send right here so we can recreate this and

31
00:02:03,480 --> 00:02:05,140
then I'll comment it out.

32
00:02:05,440 --> 00:02:09,450
Okay so we're going to call fetch and pass in that you are.

33
00:02:10,140 --> 00:02:15,960
So if I just ran this code in my browser I'll save it to a variable so we can check on the status of

34
00:02:15,960 --> 00:02:16,790
the promise.

35
00:02:16,830 --> 00:02:17,470
We'll call this.

36
00:02:17,740 --> 00:02:20,270
Well I don't want to go with promise how about prom.

37
00:02:20,270 --> 00:02:21,260
If we look at prom.

38
00:02:21,300 --> 00:02:23,010
No not promo.

39
00:02:23,220 --> 00:02:24,270
Well it's now been resolved.

40
00:02:24,270 --> 00:02:30,900
If I just pasted in and run it immediately it's pending but eventually it's either resolved or rejected.

41
00:02:30,900 --> 00:02:36,160
And really all I want to show you here is that we're getting a promise back from that fetch method.

42
00:02:36,210 --> 00:02:40,890
So in order to run code when it is resolved we need to use then in order to run code.

43
00:02:40,890 --> 00:02:51,340
If it's rejected we need to use catch so we can change on our dot then dot then it will be resolved

44
00:02:51,340 --> 00:02:53,530
with a response object.

45
00:02:53,610 --> 00:02:58,390
We can call it response and if you want to learn more about the details of the API.

46
00:02:58,510 --> 00:03:02,480
If you go to M.D. then there's pretty there's a lot of articles actually about it.

47
00:03:02,500 --> 00:03:08,530
We've got this overview using fetch fetch basic concepts very useful stuff.

48
00:03:08,680 --> 00:03:10,740
But here's the key thing that you should know.

49
00:03:10,810 --> 00:03:15,370
The fetch method takes one mandatory argument the path that you are well that we're trying to fetch

50
00:03:15,790 --> 00:03:20,300
and it returns a promise that resolves to the response to the request.

51
00:03:20,590 --> 00:03:26,710
So the value that we would have that is passed in to our callback when this fetch promise hopefully

52
00:03:26,710 --> 00:03:36,100
resolves is a response object and if we console that log that response object you'll see it's a little

53
00:03:36,100 --> 00:03:39,230
different than what we've seen from X jars.

54
00:03:39,280 --> 00:03:40,320
I'll try running this.

55
00:03:40,330 --> 00:03:41,890
Refresh my page.

56
00:03:41,890 --> 00:03:43,360
This is what we get back.

57
00:03:43,360 --> 00:03:48,020
A response object it contains a status code 200 which means.

58
00:03:48,040 --> 00:03:49,700
OK that's good.

59
00:03:49,720 --> 00:03:55,270
It also has things like the you are all that we requested and then the data that we want is located

60
00:03:55,270 --> 00:03:59,250
in the body but it's not as simple as reading a property from this body.

61
00:03:59,260 --> 00:04:04,480
If you notice what it says here it's a readable stream without going into too much detail.

62
00:04:04,480 --> 00:04:10,720
If we take a look at the response page the response referenced on empty n this is a response we get

63
00:04:10,720 --> 00:04:11,310
back.

64
00:04:11,350 --> 00:04:16,390
It's resolved with a response object you can name that parameter or whatever but it will be a response

65
00:04:16,390 --> 00:04:20,020
object if we read a little bit more about it.

66
00:04:20,170 --> 00:04:22,070
Scroll down somewhere on here.

67
00:04:22,420 --> 00:04:26,890
Whereas body here's body it is a readable stream.

68
00:04:26,890 --> 00:04:28,470
Now what is a readable stream.

69
00:04:28,630 --> 00:04:34,050
It is a stream of byte data and this is one of the key differences from using x ray charles.

70
00:04:34,120 --> 00:04:40,450
Aside from the actual syntactical differences when you make a request you get a response object back.

71
00:04:40,450 --> 00:04:48,880
The content of that response is included as a readable stream and a stream is a way of accessing data

72
00:04:49,090 --> 00:04:54,280
that could be super large it could be a massive amount of data and you can access it and process it

73
00:04:54,400 --> 00:04:55,870
as you go.

74
00:04:55,870 --> 00:04:57,200
Now for us that doesn't really matter.

75
00:04:57,220 --> 00:04:59,510
We're not accessing extremely large things.

76
00:04:59,590 --> 00:05:05,530
We're doing simple request and just did get some data from an API so it doesn't really matter except

77
00:05:05,530 --> 00:05:09,430
that we have to be aware of how we read that stream.

78
00:05:09,430 --> 00:05:14,750
Fortunately if we go back to the response object we scroll down to methods.

79
00:05:14,780 --> 00:05:17,860
There's a nice method called Dot Jason.

80
00:05:17,860 --> 00:05:21,100
It takes a response stream and reads it to completion.

81
00:05:21,100 --> 00:05:24,990
So right now our response has not actually been read to completion.

82
00:05:25,090 --> 00:05:29,710
It's a response object but the stream has not been read.

83
00:05:29,740 --> 00:05:31,990
Fortunately we have a very very easy way of doing it.

84
00:05:32,020 --> 00:05:40,300
As I just showed you response dot Jason the only downside to this is that it takes time it's asynchronous

85
00:05:40,420 --> 00:05:43,110
that stream could be very very large.

86
00:05:43,300 --> 00:05:49,970
And reading it fully could take a while relatively compared to something like Jason dock pass.

87
00:05:50,200 --> 00:05:55,440
So because of that this Jason method returns a promise.

88
00:05:55,780 --> 00:06:01,520
If we consider that log response stopped Jason this is what we get.

89
00:06:01,540 --> 00:06:09,290
It's another promise so we have a promise returned from this and then another promise from this.

90
00:06:09,340 --> 00:06:16,600
So if we actually want the data we need to do another dot then and it will be resolved with the data

91
00:06:16,660 --> 00:06:18,010
that is read and passed.

92
00:06:18,610 --> 00:06:24,820
So now we could counsel that log data so it's an extra step.

93
00:06:24,860 --> 00:06:26,830
We compare that to what we did up here.

94
00:06:26,870 --> 00:06:31,850
All we had to do was Jason that pass the response dot response text.

95
00:06:31,850 --> 00:06:41,360
Here we call a Jason method and then when it finishes it's resolved we can have access to the data and

96
00:06:41,360 --> 00:06:42,350
there we go.

97
00:06:42,350 --> 00:06:46,580
Now we have our API data with the results and we can do whatever we want with them.

98
00:06:46,580 --> 00:06:49,500
So why don't we do something simple like print out each planet.

99
00:06:49,790 --> 00:06:58,070
So we would have data inside of this dot then callback after we've read the Jason data dot and then

100
00:06:58,070 --> 00:07:02,000
response no results I think is what it was.

101
00:07:02,000 --> 00:07:07,270
And we'll loop over that for let planet of data dot results.

102
00:07:07,280 --> 00:07:10,350
We can double check this data is this whole thing.

103
00:07:10,370 --> 00:07:20,360
Results we'll do what we did earlier counseled out log planet dot name run it again.

104
00:07:20,380 --> 00:07:21,040
There we go.

105
00:07:21,040 --> 00:07:26,050
We're getting every planet's name at least the first ten planets that we're getting from this one API

106
00:07:26,050 --> 00:07:29,670
call sending a request to this you url.

107
00:07:30,070 --> 00:07:33,330
So this is the first part of fetch when things go right.

108
00:07:33,400 --> 00:07:36,340
We don't have any errors or if we do we don't know about them.

109
00:07:37,150 --> 00:07:39,820
So let's put a catch in here.

110
00:07:40,800 --> 00:07:44,670
If fetch returns a promise it's resolved or rejected.

111
00:07:44,680 --> 00:07:45,910
Right now we're not catching it.

112
00:07:45,910 --> 00:07:51,460
So why don't we catch and do something where we console that log.

113
00:07:51,460 --> 00:07:58,840
Something went wrong with fetch and then we can console that log error as well.

114
00:07:59,080 --> 00:08:00,880
Let's see what happens right now.

115
00:08:00,910 --> 00:08:01,990
Nothing should happen.

116
00:08:02,050 --> 00:08:03,610
We should still see the same result.

117
00:08:03,670 --> 00:08:09,550
But why don't I try fetching some you are well that doesn't exist if I visit this you around myself

118
00:08:09,850 --> 00:08:10,720
just in the browser

119
00:08:13,670 --> 00:08:15,650
this page is not the page you're looking for.

120
00:08:15,650 --> 00:08:18,410
This is a forum for error page.

121
00:08:18,890 --> 00:08:27,380
And when we got to 4 0 4 with XY chars with this approach our failure callback ran this on error callback

122
00:08:27,470 --> 00:08:28,700
was executed.

123
00:08:28,700 --> 00:08:34,280
However Fetch is different if we try and send a request to this you URL which I am telling you now will

124
00:08:34,280 --> 00:08:39,020
give us a forum for let's take a look huh.

125
00:08:39,060 --> 00:08:45,210
We did get a 4 or 4 but our catch never ran uncut in promise.

126
00:08:45,240 --> 00:08:47,040
Unexpected token.

127
00:08:47,040 --> 00:08:52,650
So what's happening here is that we're actually getting the H team out for a four page back and we're

128
00:08:52,650 --> 00:08:54,170
trying to pass that as Jason.

129
00:08:54,200 --> 00:08:55,850
But it's not Jason.

130
00:08:55,920 --> 00:08:59,180
So why don't we start by just consider logging the response in here

131
00:09:02,400 --> 00:09:07,950
because it seems like if the status code is for a four then the dot then should not run and that seems

132
00:09:07,950 --> 00:09:12,220
like an error where our catch should run but that's not how Fetch is set up.

133
00:09:12,270 --> 00:09:18,570
If we look at the response status is for a fourth but it still worked it still ran our DOT catch the

134
00:09:18,570 --> 00:09:20,370
promise was resolved.

135
00:09:20,370 --> 00:09:21,150
So what's going on.

136
00:09:21,810 --> 00:09:27,510
Well this is just how Fetch is set up if you take a look at this paragraph here on the using fetch overview

137
00:09:27,510 --> 00:09:34,590
and MDA on the promised return from fetch will not reject on error status or HDP DDP error status even

138
00:09:34,590 --> 00:09:38,890
if the response is a 4 or 4 which is not found or 500.

139
00:09:39,000 --> 00:09:45,270
Instead it resolves normally and it will only reject on network failure or if anything prevented the

140
00:09:45,270 --> 00:09:46,590
request from completing.

141
00:09:46,980 --> 00:09:50,700
So this catch is not going to run.

142
00:09:50,730 --> 00:09:56,430
The promise will not be rejected just because the server responded with not a 200.

143
00:09:56,430 --> 00:10:01,040
Not an OK status code because we still got a response.

144
00:10:01,350 --> 00:10:03,260
So that's all that this cares about.

145
00:10:03,270 --> 00:10:08,780
This code runs whenever you get a response whether it's the one you wanted or not unlike our ex H.R.

146
00:10:08,790 --> 00:10:14,480
where the failure callback would run the error callback did run on a 400 error or 4 or 4.

147
00:10:14,490 --> 00:10:15,100
Excuse me.

148
00:10:15,330 --> 00:10:21,030
So fetch will only return a rejected promise in the event that your internet's not working.

149
00:10:21,060 --> 00:10:24,670
The request can't be made at all and we just don't get a response.

150
00:10:24,840 --> 00:10:26,690
And I can show you that if I turn my internet off.

151
00:10:26,700 --> 00:10:27,980
So that's what I'm going to do.

152
00:10:27,990 --> 00:10:28,460
Okay.

153
00:10:28,560 --> 00:10:30,390
It's off.

154
00:10:30,390 --> 00:10:32,420
Let's refresh now.

155
00:10:32,430 --> 00:10:34,560
It's actually running that catch callback.

156
00:10:34,560 --> 00:10:40,480
Something went wrong with fetch type error failed to fetch so it didn't get a response period.

157
00:10:40,560 --> 00:10:42,700
So the then callback was ignored.

158
00:10:42,750 --> 00:10:45,030
The promise was rejected and this runs.

159
00:10:45,030 --> 00:10:51,510
So instead of this callback here if we want to ensure that we actually got a status code 200 and OK

160
00:10:51,990 --> 00:11:01,650
before we try and read Jason before we do anything with it what we can do is check if response Dot.

161
00:11:02,190 --> 00:11:02,660
OK.

162
00:11:02,670 --> 00:11:04,290
That is a property on the response.

163
00:11:04,290 --> 00:11:07,550
Well we don't see it here but we did see it earlier.

164
00:11:07,560 --> 00:11:11,210
If that's the case then we can run this code.

165
00:11:11,430 --> 00:11:19,560
Or another way of doing it would be if response is not OK then we could console that log something error

166
00:11:20,730 --> 00:11:26,650
not status 200 hundred and then we can wrap this in an.

167
00:11:26,640 --> 00:11:32,820
Else because we only want to attempt passing if the request came back.

168
00:11:32,820 --> 00:11:33,300
Status.

169
00:11:33,300 --> 00:11:34,380
Two hundred.

170
00:11:34,400 --> 00:11:40,320
If instead we got a four or four we'll just print this out and we could also console that log response

171
00:11:40,350 --> 00:11:42,870
dot status.

172
00:11:42,870 --> 00:11:50,250
So now if we tried again here we go error not status two hundred we got four or four and this code did

173
00:11:50,250 --> 00:11:50,730
not run.

174
00:11:51,600 --> 00:11:56,300
So this is one option but we also have a way of using this catch.

175
00:11:56,520 --> 00:12:03,900
If I throw an error instead of a dot then it will trigger the callback in my dot catch so I could rewrite

176
00:12:03,900 --> 00:12:04,770
it like this.

177
00:12:04,830 --> 00:12:08,510
Throw new error if you've never seen how to throw an error.

178
00:12:08,510 --> 00:12:13,410
It looks like this will say status code error

179
00:12:16,180 --> 00:12:20,220
and then interpolate using dollar sign instead of a string template literal.

180
00:12:20,410 --> 00:12:23,890
I'll put response dot status here.

181
00:12:24,140 --> 00:12:25,840
Okay so let's test it out.

182
00:12:25,990 --> 00:12:31,290
This U.R.L. should give us a 4 or 4 if we try and visit it in our browser it gives us a 4 or 4.

183
00:12:31,300 --> 00:12:38,020
Earlier we saw that we got a 4 4 status code which means not found then the promise will still be resolved.

184
00:12:38,020 --> 00:12:40,890
This code runs up until this point.

185
00:12:40,930 --> 00:12:43,780
This will be true because it is not OK.

186
00:12:43,870 --> 00:12:50,020
So then we throw a new error which should trigger this callback and the error will be this error we're

187
00:12:50,020 --> 00:12:52,480
passing through when we throw an error.

188
00:12:52,480 --> 00:12:56,920
We have access to it here in our catch so let's see.

189
00:12:57,630 --> 00:12:58,410
There we go.

190
00:12:58,410 --> 00:13:02,280
Something went wrong with fetch status code error for 0 4.

191
00:13:02,280 --> 00:13:03,690
So this is the basics of fetch.

192
00:13:03,690 --> 00:13:08,640
I wish that you didn't have to worry about the status code but that's where Acciona comes in which is

193
00:13:08,670 --> 00:13:10,250
another improvement upon fetch.

194
00:13:10,250 --> 00:13:15,990
In my opinion this is still better than what we saw here although we were making two requests here.

195
00:13:16,200 --> 00:13:22,090
But as you can imagine with promises which we automatically get from fetch it's pretty easy to change

196
00:13:22,230 --> 00:13:25,770
and make multiple requests in a row which is what we'll talk about in the very next video.
