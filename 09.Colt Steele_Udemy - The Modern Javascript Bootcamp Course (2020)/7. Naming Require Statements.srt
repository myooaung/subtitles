1
00:00:01,410 --> 00:00:06,870
We are now taming that ad event so to speak with that D bounce function so we're not going to call anything.

2
00:00:06,870 --> 00:00:11,040
Once the ad event is triggered many times in a row we've got that put together.

3
00:00:11,040 --> 00:00:14,400
Let's get back on track and continue driving our program forward.

4
00:00:14,430 --> 00:00:21,070
The next thing that I would really like to do is to make sure that users of our command line tool or

5
00:00:21,070 --> 00:00:26,060
THIS WATCH IT program get some nice help whenever they use our tool.

6
00:00:26,060 --> 00:00:30,580
So to do so we're going to using that capital program or that capital package.

7
00:00:30,580 --> 00:00:34,360
Let's take another look at the documentation for that package and just get a better idea of what it

8
00:00:34,360 --> 00:00:36,660
really does for us.

9
00:00:36,690 --> 00:00:44,310
I'll go back over to NPM J dot com once here I'll search for capital and go to the documentation for

10
00:00:44,310 --> 00:00:45,620
it.

11
00:00:45,640 --> 00:00:51,070
So again one of the purposes of capital is to show that kind of nice help screen to a user whenever

12
00:00:51,070 --> 00:00:53,610
they tried to interface with our program.

13
00:00:53,650 --> 00:00:56,380
I can go to that screenshot that was down here towards the bottom.

14
00:00:56,380 --> 00:00:57,700
Here it is right here.

15
00:00:57,700 --> 00:01:02,370
So capital essentially is going to generate a lot of the information that you see on here.

16
00:01:02,380 --> 00:01:04,040
The other thing that capital does for us.

17
00:01:04,070 --> 00:01:09,790
I didn't quite mentioned before is automatic validation in handling of arguments that are passed into

18
00:01:09,790 --> 00:01:10,300
our program.

19
00:01:10,780 --> 00:01:16,360
So for example we can tell Cooper all that we expect our program to be called with some kind of argument

20
00:01:16,360 --> 00:01:21,190
that designates a file name if a user doesn't provide that argument.

21
00:01:21,330 --> 00:01:24,450
Capital will automatically show them an error.

22
00:01:24,560 --> 00:01:26,070
Let's install this package.

23
00:01:26,070 --> 00:01:30,770
We're going to start to use it inside of our project going to go over to my terminal.

24
00:01:30,770 --> 00:01:35,600
If you're still running the watch it program right now remember you can stop it by hitting control see

25
00:01:35,600 --> 00:01:42,970
on your keyboard and then over here we'll do an npm install HEPA roll all right.

26
00:01:42,980 --> 00:01:51,090
So let it do its thing and it installs rather quickly so I'll go back over to my ED and we're going

27
00:01:51,090 --> 00:01:53,570
to first require it at the very top.

28
00:01:53,660 --> 00:01:57,930
And one would be required this there's going to be something kind of weird on this line but just bear

29
00:01:57,930 --> 00:01:59,790
with me I'll tell you exactly what's going on.

30
00:01:59,790 --> 00:02:05,500
I'm going to say constant program equals require happy roll.

31
00:02:05,610 --> 00:02:07,520
So what's weird here.

32
00:02:07,530 --> 00:02:13,460
Well the weird thing is the name of this variable you'll notice this is actually a really good kind

33
00:02:13,460 --> 00:02:17,010
of juxtaposition right now or comparison between these three different libraries.

34
00:02:17,060 --> 00:02:21,140
We have haven't used kind of wildly different naming conventions for these three different modules that

35
00:02:21,140 --> 00:02:22,750
we have required.

36
00:02:22,800 --> 00:02:24,750
The first one was chuck it out.

37
00:02:25,020 --> 00:02:26,310
We required and choke it out.

38
00:02:26,430 --> 00:02:32,490
And we assigned it to a variable that has the exact same name as the library the next one that we added

39
00:02:32,490 --> 00:02:33,990
was D bounce.

40
00:02:33,990 --> 00:02:41,250
We required in a package called load Ash dot D bounce and we assigned it to a variable called g bounce.

41
00:02:41,280 --> 00:02:46,590
So my question is why do we call this D balance and not something like low dash de bounce or something

42
00:02:46,590 --> 00:02:47,350
like that.

43
00:02:48,290 --> 00:02:51,070
And then finally obviously the weirdest one here is Capriles.

44
00:02:51,070 --> 00:02:52,230
So I just required it.

45
00:02:52,340 --> 00:02:57,350
And if I was following the same pattern as with choke it out we should have done something like CPL

46
00:02:58,120 --> 00:03:00,140
not crap all.

47
00:03:00,180 --> 00:03:01,920
I'm sure it's a fine library.

48
00:03:01,920 --> 00:03:06,000
So if you're following the same kind of pattern we would have assigned capital to a variable like that

49
00:03:06,300 --> 00:03:09,740
but instead I did program which is wildly different.

50
00:03:09,870 --> 00:03:17,530
So what's going on here well at the end of the day the convention in all scenarios for naming a variable

51
00:03:17,740 --> 00:03:22,690
that gets assigned or that is receiving assignment from a require statement is to name that variable

52
00:03:22,870 --> 00:03:25,800
directly after the library that we are requiring it.

53
00:03:25,870 --> 00:03:27,990
So the choke it art requires statement right here.

54
00:03:28,030 --> 00:03:33,730
This is perfect convention and this is what we're going to do it in the vast vast majority of scenarios.

55
00:03:33,910 --> 00:03:37,820
So why did we not follow that convention with DB outs.

56
00:03:37,840 --> 00:03:43,720
Well just you know the DB outs function is one tiny little function that is included in a much larger

57
00:03:43,780 --> 00:03:48,880
library of helper functions that much larger library is called load ash.

58
00:03:48,880 --> 00:03:56,050
This is an extremely popular package that has millions and millions and millions of downloads has a

59
00:03:56,050 --> 00:03:57,730
ton of different functions inside of it.

60
00:03:57,760 --> 00:04:03,870
One of those functions is called DB outs so the reason we just call this thing de bounce is that well

61
00:04:03,950 --> 00:04:10,390
we are only accessing this one very small function called g bounce and so it just doesn't really serve

62
00:04:10,450 --> 00:04:15,280
a lot of purpose to try to call it something like load actually bounce like that doesn't really add

63
00:04:15,310 --> 00:04:16,150
anything for it.

64
00:04:16,150 --> 00:04:22,320
For us it doesn't really do anything or clarify what the DB bounce function is it makes just a little

65
00:04:22,320 --> 00:04:26,830
bit more sense to simply call it G bounce and leave it there.

66
00:04:26,840 --> 00:04:28,010
Now what about capital.

67
00:04:28,070 --> 00:04:30,690
That logic sure doesn't apply down here.

68
00:04:30,710 --> 00:04:35,210
Well the first reason that I would give you for saying that we are calling this variable right here

69
00:04:35,210 --> 00:04:41,240
program as opposed to capital would be to go over to the documentation to back in the documentation

70
00:04:41,240 --> 00:04:46,790
for capital if we scroll down to the first example right here you'll see that they chose in the documentation

71
00:04:46,820 --> 00:04:52,490
to require in that library and assign it to a variable called prog frog as you might guess is short

72
00:04:52,490 --> 00:04:58,310
for program I call the very variable program just to make sure it was clear what the name of that variable

73
00:04:58,370 --> 00:04:59,480
really meant.

74
00:04:59,480 --> 00:05:04,230
If you're not a native English speaker the word frog might not make any sense at all.

75
00:05:04,460 --> 00:05:09,510
But even then why did they choose to call this thing prog as opposed to capital.

76
00:05:09,530 --> 00:05:15,770
Well let me show you why the vast majority of libraries that we use we usually are going to require

77
00:05:15,770 --> 00:05:22,010
a library and get back some kind of class or an object that has some functions inside of it that we

78
00:05:22,010 --> 00:05:28,830
can use to do whatever the library is intended to be used for however in the case of capital whenever

79
00:05:28,830 --> 00:05:34,020
we require it in we get back some object that doesn't really represent the library.

80
00:05:34,020 --> 00:05:38,710
Instead it is an object that represents the program that we are trying to build.

81
00:05:38,730 --> 00:05:42,900
So besides the fact that the documentation just plain recommends you closing program.

82
00:05:42,900 --> 00:05:47,940
The idea here is that we're getting back an object that represents the program we are putting together

83
00:05:48,240 --> 00:05:53,220
as opposed to representing the capital library or anything like that.

84
00:05:53,250 --> 00:05:58,750
I know that might sound like a really silly reason but it's honestly the best I can give you so at the

85
00:05:58,750 --> 00:06:03,160
end of the day when we have these require statements wherever possible we just named the variable after

86
00:06:03,160 --> 00:06:08,140
the library unless it's a really not long name for a library in which case we're going to just kind

87
00:06:08,140 --> 00:06:13,600
of shorten it or if the documentation specifically specifies something else we're going to follow that

88
00:06:14,080 --> 00:06:16,870
convention instead OK.

89
00:06:16,900 --> 00:06:21,340
So I know that's a lot to talk about with the naming of these variables but it's something that I found

90
00:06:21,340 --> 00:06:23,020
a lot of beginners kind of get confused by.

91
00:06:23,040 --> 00:06:25,190
Like why are we using these different names.

92
00:06:25,540 --> 00:06:26,560
So let's take a pause right here.

93
00:06:26,560 --> 00:06:30,880
We'll come back the next video and we're going to get a little bit more in-depth with cap rule and understand

94
00:06:30,940 --> 00:06:31,560
how to use it.
