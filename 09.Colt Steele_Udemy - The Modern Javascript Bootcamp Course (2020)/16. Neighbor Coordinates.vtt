WEBVTT
1
00:00:00.710 --> 00:00:04.440
Now that we have these guiding comments we can start to put some implementation together.

2
00:00:04.700 --> 00:00:09.320
So to get started with the first comment right here we want to check to see if we have visited the current

3
00:00:09.320 --> 00:00:12.320
cell specified at row and column.

4
00:00:12.320 --> 00:00:16.790
Remember our grid array is what is keeping track of the different cells we have visited.

5
00:00:16.850 --> 00:00:21.080
So we essentially want to look in that two dimensional array look at the appropriate element inside

6
00:00:21.080 --> 00:00:23.350
there and see if it is true if it is true.

7
00:00:23.360 --> 00:00:27.560
That means we have already visited the cell at row and column and so that means that we would want to

8
00:00:27.560 --> 00:00:36.970
return right away I will say if grid at row sets going to select our row and column is equal to true

9
00:00:37.180 --> 00:00:38.760
then return.

10
00:00:38.800 --> 00:00:40.670
Now this is a funny little thing here.

11
00:00:40.720 --> 00:00:47.150
We are storing boolean values inside the grid so grid at row column is either going to be true or false.

12
00:00:47.170 --> 00:00:49.960
So we don't really need the comparison there is if it's true.

13
00:00:50.050 --> 00:00:51.210
Well true is true.

14
00:00:51.220 --> 00:00:57.460
And so we are going to enter the if statement and return right away so if we get past that check then

15
00:00:57.460 --> 00:01:00.580
we will go ahead and mark this cell as being visited.

16
00:01:00.580 --> 00:01:06.310
So we just need to look at that same element inside of the grid and update its value to be true to indicate

17
00:01:06.340 --> 00:01:16.000
hey we've been here we visited this cell so I'm going to say grid at row and column is true that's pretty

18
00:01:16.000 --> 00:01:17.680
much it for the first two steps.

19
00:01:17.680 --> 00:01:19.080
Let's immediately do some testing.

20
00:01:19.090 --> 00:01:24.800
Just we can verify everything is working as expected it's going to go down to the bottom.

21
00:01:24.890 --> 00:01:29.990
We're going to call step through cell one time with our random start and column start row and start

22
00:01:29.990 --> 00:01:34.080
column and then after that I will console log out my grid.

23
00:01:34.340 --> 00:01:39.560
So because we are calling step through cell exactly one time right now I would expect to find one element

24
00:01:39.560 --> 00:01:42.850
inside there that has been updated to true and it should be random.

25
00:01:42.860 --> 00:01:48.640
So if I refresh the page several times a different element should be getting set to true so go back

26
00:01:48.640 --> 00:01:50.200
over and refresh.

27
00:01:50.200 --> 00:01:52.890
I can expand the console log and there we go.

28
00:01:52.900 --> 00:01:56.670
So one value inside of here has been set to true or refresh again.

29
00:01:56.770 --> 00:02:00.820
And I now see a different element and a different elements set to true.

30
00:02:01.600 --> 00:02:07.860
So these are these starting locations of our iteration to build out the maze.

31
00:02:07.970 --> 00:02:11.320
So now that we have Mark that is true that means that we visited the cell.

32
00:02:11.390 --> 00:02:16.520
So the next we need to do is assemble a randomly ordered list of neighbors.

33
00:02:16.610 --> 00:02:18.300
So quick reminder on what that means.

34
00:02:18.800 --> 00:02:26.120
Let's imagine that we randomly select to visit that center cell on this grid on the first step.

35
00:02:26.120 --> 00:02:28.700
So we randomly select that right there.

36
00:02:28.730 --> 00:02:34.670
So we need to assemble a list of all the neighbors that's going to be above to the right below into

37
00:02:34.730 --> 00:02:35.840
the left.

38
00:02:35.910 --> 00:02:40.040
So one two three and four.

39
00:02:40.150 --> 00:02:45.980
In other words we need to determine the row in column indices of each of these pairs.

40
00:02:46.060 --> 00:02:54.270
So remember our rows are on the left hand side so 0 1 N2 those are the rows columns are up top.

41
00:02:54.270 --> 00:02:56.790
So 0 1 and 2.

42
00:02:56.790 --> 00:03:05.400
So we need to say if we are at row 1 column 1 we need to select the cell right above at row 0 column

43
00:03:05.400 --> 00:03:06.260
1.

44
00:03:06.330 --> 00:03:15.710
We also need to get the cell at 1 0 the 1 at 1 2 and the 1 at 2 1.

45
00:03:15.720 --> 00:03:20.120
This might seem like kind of a hard problem to figure out the different indices or these different neighbors

46
00:03:20.160 --> 00:03:22.570
but in reality it's actually really easy.

47
00:03:22.590 --> 00:03:29.600
Let me show you how right now we know that we are at row 1 column 1.

48
00:03:29.640 --> 00:03:34.410
That is our starting cell so we can actually figure out what all the different neighbors are by just

49
00:03:34.410 --> 00:03:40.890
doing a little bit of directed manipulation or some arithmetic on these starting values the cell right

50
00:03:40.890 --> 00:03:41.310
above.

51
00:03:41.790 --> 00:03:51.850
So I'll say here the cell above is always going to be at row minus 1 and the same column we can actually

52
00:03:51.850 --> 00:03:53.550
check the math on this very quickly.

53
00:03:53.650 --> 00:03:58.110
So I met one one to start if I want to go above to this cell right here.

54
00:03:58.450 --> 00:04:01.000
Then I would take Roe minus one.

55
00:04:01.000 --> 00:04:02.920
So one minus one is zero.

56
00:04:02.920 --> 00:04:05.710
That puts me on that row right there.

57
00:04:05.710 --> 00:04:08.860
And then the same column that I'm at previously or at right now.

58
00:04:08.920 --> 00:04:16.090
So my column right now is 1 So Roe minus 1 and column is going to put me right here and that's going

59
00:04:16.090 --> 00:04:23.060
to work for any value of starting row and column then if I want to go to the right and get the cell

60
00:04:23.060 --> 00:04:23.660
at the right.

61
00:04:23.660 --> 00:04:33.190
That's always going to be the same row as whatever I'm starting at and column plus 1 So in other words

62
00:04:33.190 --> 00:04:38.980
I'm going to take the same row of 1 I'm going to take the column on that right now which is 1 Add one

63
00:04:38.980 --> 00:04:43.190
to it and I get to and to get the cell below

64
00:04:46.160 --> 00:04:49.670
they'll be at row plus 1 and same column.

65
00:04:49.670 --> 00:04:53.150
And I think you can see where this is going to get the cell to the left.

66
00:04:53.150 --> 00:04:59.990
It's always going to be the same row and column minus one so we really just have to add or subtract

67
00:05:00.020 --> 00:05:03.680
one to our different row in columns to get all of the neighboring cells.

68
00:05:03.680 --> 00:05:08.720
That's all we have to do now that we understand this we can't build out a list of all the different

69
00:05:08.720 --> 00:05:15.190
neighbors or essentially the coordinates of each of them by applying those rules right here on assemble

70
00:05:15.210 --> 00:05:25.040
a randomly ordered list of neighbors are going to say neighbors is an array and I'm going to list out

71
00:05:25.100 --> 00:05:30.130
in row column notation the coordinates of the different neighbors around the current cell.

72
00:05:30.710 --> 00:05:35.590
So using the list we just went through going to first start off at the start at the top first about

73
00:05:35.600 --> 00:05:47.390
that so I'll do the row minus one and whatever the current column is next to the right we'll do our

74
00:05:47.390 --> 00:05:58.680
row in column plus 1 and below is going to be row plus one and the same column.

75
00:05:58.900 --> 00:06:03.880
And then finally to the left is gonna be the same row but column minus one.

76
00:06:03.880 --> 00:06:07.830
So those are the coordinate pairs of all of my different neighbors.

77
00:06:07.870 --> 00:06:12.970
Now the next we have to do is randomly sort this list the randomly sorting part of this list is what's

78
00:06:12.970 --> 00:06:18.520
going to actually give us a randomized looking maze adding in these random sorting logic or the kind

79
00:06:18.520 --> 00:06:20.700
of shuffling logic is a little bit more complicated.

80
00:06:20.770 --> 00:06:23.410
So let's take a quick pause and tackle that in the next video.
