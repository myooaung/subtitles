1
00:00:01,130 --> 00:00:05,670
Our postwar quest handler is now receiving some data out of the form that the browser submitted.

2
00:00:05,680 --> 00:00:09,590
It's now we can get back on track thinking about how we can actually create an account or something

3
00:00:09,590 --> 00:00:14,340
to represent the person who just sent us some email and password combination.

4
00:00:14,510 --> 00:00:19,010
The first thing we should probably think of is exactly what it means to create an account.

5
00:00:19,010 --> 00:00:23,900
Well to me I think that means that we need to have some kind of record of this person coming to our

6
00:00:23,900 --> 00:00:26,820
application entering their email and their password.

7
00:00:26,870 --> 00:00:32,000
So it essentially means we need to store their email somewhere and record them as being a person who

8
00:00:32,000 --> 00:00:37,870
has signed into our application or at least created an account in order to store this information.

9
00:00:37,900 --> 00:00:41,640
We're going to have to have some persistent data store when I say persistence.

10
00:00:41,650 --> 00:00:46,930
I mean if we ever happen to restart our application we need to make sure that all the information or

11
00:00:46,930 --> 00:00:52,150
all the different accounts that have been created somehow get persisted into the next restart or startup

12
00:00:52,210 --> 00:00:53,810
of our server.

13
00:00:53,830 --> 00:00:58,630
In other words just go back over to your terminal and notice inside of here how we are getting our application

14
00:00:58,690 --> 00:01:04,360
restarting over and over and over again if we were to store a list of accounts that had been created

15
00:01:04,390 --> 00:01:05,470
inside of memory.

16
00:01:05,470 --> 00:01:11,230
So inside of like just some javascript array we would be dumping that data every single time our server

17
00:01:11,230 --> 00:01:18,020
restarted so we need to have some kind of mechanism to store some information about our users and products.

18
00:01:18,110 --> 00:01:22,340
And we need to make sure that that information is going to persist across restarts of our server.

19
00:01:23,210 --> 00:01:25,680
So let's talk about exactly what we're going to do.

20
00:01:25,970 --> 00:01:31,910
So we're going to have our Express server interface with a data store this data store is going to store

21
00:01:31,970 --> 00:01:37,700
a list of users who have created an account with our application and a list of products as well.

22
00:01:37,940 --> 00:01:44,510
The data store itself is going to save all of its data to our harddrive in the form of Jason files.

23
00:01:44,510 --> 00:01:49,280
So we're going to have a file called products not Jason that is going to store all the different products

24
00:01:49,280 --> 00:01:50,460
that have been created.

25
00:01:50,480 --> 00:01:54,500
We're going to have another file called User store Jason and that will store all the different users

26
00:01:54,500 --> 00:01:59,250
who have signed up to our application as well you and I are going to implement this data store from

27
00:01:59,250 --> 00:01:59,910
scratch.

28
00:01:59,910 --> 00:02:04,020
So we're gonna figure out how to create the data store how to work with some data stored inside of a

29
00:02:04,020 --> 00:02:09,960
file how to load it up all that kind of good stuff before we write any code for the state to store.

30
00:02:09,960 --> 00:02:12,270
However there are a couple of things I wanna mention.

31
00:02:12,480 --> 00:02:17,460
The data store that we're going to implement is really not suitable for production use in other words

32
00:02:17,490 --> 00:02:22,230
if you go into some kind of job interview or something like that I would not recommend that you mentioned

33
00:02:22,230 --> 00:02:23,790
this as being a good solution.

34
00:02:23,850 --> 00:02:28,380
If you go into a job interview mentioned he put something like this together for fun but also point

35
00:02:28,380 --> 00:02:32,460
out some of the reasons that you would not want to use a data store that saves information into files

36
00:02:32,460 --> 00:02:33,550
on the hard drive.

37
00:02:33,570 --> 00:02:38,010
The reasons that you would not want to do something like this in a production application are well if

38
00:02:38,010 --> 00:02:42,690
we ever try to open the same file twice at the same time and write some information into it we're going

39
00:02:42,690 --> 00:02:44,130
to get in there.

40
00:02:44,150 --> 00:02:48,920
In addition this approach won't work if we have multiple different servers running on different machines

41
00:02:48,920 --> 00:02:51,730
because they're all going to have their own version of a product.

42
00:02:51,740 --> 00:02:54,260
Jason and user start JS on file.

43
00:02:54,260 --> 00:02:58,880
In addition the performance of this will be relatively not that great because we have to write to the

44
00:02:58,930 --> 00:03:05,610
file system every single time that we want to update some data inside of our app so looking at these

45
00:03:05,610 --> 00:03:07,620
cons to this approach you might be thinking.

46
00:03:07,620 --> 00:03:09,570
Steven why are we wasting time with this.

47
00:03:09,720 --> 00:03:15,330
Remember everything in this course all is about JavaScript and so above all the opportunity to write

48
00:03:15,360 --> 00:03:21,060
a date data store from scratch on her own that relies on some flat files really is some good experience

49
00:03:21,260 --> 00:03:25,800
that's going to teach you some really interesting stuff around javascript and in particular we're even

50
00:03:25,800 --> 00:03:30,930
going to see a really good example of code reuse using classes and inheritance with object oriented

51
00:03:30,930 --> 00:03:32,020
programming.

52
00:03:32,040 --> 00:03:37,280
So from the perspective of this course using the data store we're going to put together is like perfect.

53
00:03:37,440 --> 00:03:41,910
Definitely something that you want to write from scratch at least once and understand how it works.

54
00:03:42,030 --> 00:03:46,640
But on a real application this approach might not be the best in the world.

55
00:03:46,690 --> 00:03:47,000
Okay.

56
00:03:47,130 --> 00:03:51,990
So now that we have a vague idea at least of what we're trying to accomplish here let's pause right

57
00:03:51,990 --> 00:03:54,630
here come back the next video and start working on our data store.
