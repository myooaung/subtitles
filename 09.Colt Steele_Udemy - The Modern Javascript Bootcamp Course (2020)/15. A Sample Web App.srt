1
00:00:01,080 --> 00:00:04,310
In the last video we started to take a look at the Jamestown library.

2
00:00:04,350 --> 00:00:07,680
Let's now install the South the terminal and then get a better idea of how we're going to actually use

3
00:00:07,680 --> 00:00:11,140
it inside of our testing framework so I can go back over to my terminal.

4
00:00:11,220 --> 00:00:15,530
I'm once again back inside of my TMC project directory inside of here.

5
00:00:15,540 --> 00:00:21,440
We're going to do an npm install J.S. Dom to make sure that you're running that new install command

6
00:00:21,440 --> 00:00:26,120
inside of the TMG project folder because that is the project that we want to add this new dependency

7
00:00:26,120 --> 00:00:27,380
to.

8
00:00:27,440 --> 00:00:27,680
All right.

9
00:00:27,690 --> 00:00:28,820
So we've got that installed.

10
00:00:28,820 --> 00:00:32,720
Let's take another look at the documentation and understand how we're going to actually use this thing

11
00:00:33,840 --> 00:00:37,020
so if I scroll down a little bit I'll see basic usage right here.

12
00:00:37,530 --> 00:00:40,440
So as usual we're going to require it into our project.

13
00:00:40,440 --> 00:00:45,330
Now I just want to point out these two lines right here in particular when we require J S Dom into our

14
00:00:45,330 --> 00:00:50,190
project we're going to assign it to a variable that by convention we usually call simply j ust on all

15
00:00:50,190 --> 00:00:51,720
lowercase.

16
00:00:51,720 --> 00:00:54,990
This variable right here represents the entire library.

17
00:00:55,020 --> 00:01:00,930
There are some different helper functions included on that j ust on variable one property that is included

18
00:01:00,960 --> 00:01:04,270
on that variable is capital J ust on like so.

19
00:01:04,270 --> 00:01:08,730
So you'll see that they are right here d structuring off another variable called all capitals.

20
00:01:08,730 --> 00:01:12,030
J ust this right here is a constructor function.

21
00:01:12,030 --> 00:01:13,590
Or essentially a class of sorts.

22
00:01:13,590 --> 00:01:16,620
So we can use to create an instance of a browser.

23
00:01:16,620 --> 00:01:19,340
Again fake browser inside of node.

24
00:01:19,560 --> 00:01:23,490
So the only reason I point out these two lines right here is to just point out we get access to the

25
00:01:23,490 --> 00:01:29,250
library and then we're gonna pull off just that one property that we actually care about once we get

26
00:01:29,250 --> 00:01:34,950
access to that all capitals just on property we'll use it to create a new document.

27
00:01:35,220 --> 00:01:40,590
So we say new j ust Dom and we pass in the H T mail that we want to use for the fake browser that we're

28
00:01:40,590 --> 00:01:41,940
going to load up.

29
00:01:42,150 --> 00:01:47,340
We then assign the result to a variable called simply dumb and that Dom object right there is going

30
00:01:47,340 --> 00:01:54,070
to be what we used to essentially get access to the entire Dom running inside of our fake browser so

31
00:01:54,070 --> 00:01:59,320
that's the general idea of how we use jazz Dom and a very basic and simple fashion but it doesn't really

32
00:01:59,320 --> 00:02:05,260
answer how we are going to use it for testing how are we gonna use this for testing anyways as a quick

33
00:02:05,260 --> 00:02:05,790
reminder.

34
00:02:05,790 --> 00:02:08,200
Back on our testing framework requirements over here.

35
00:02:08,200 --> 00:02:14,440
Remember I had said that I wanted to be able to test the whole application not just one little widget.

36
00:02:14,440 --> 00:02:19,060
So the real question is how are we going to use j ust on to test the entire application like all the

37
00:02:19,060 --> 00:02:20,230
functionality of it.

38
00:02:21,000 --> 00:02:24,900
Well we're going to figure that out in just a moment but I think first we should try to create a little

39
00:02:24,900 --> 00:02:28,120
sample project that we can run some tests on.

40
00:02:28,260 --> 00:02:32,550
Just we have something to work with and it's going to help frame how we're going to use J.S. Dom to

41
00:02:32,550 --> 00:02:34,830
test a web project in general.

42
00:02:34,860 --> 00:02:37,490
So in this video we're going to do a very quick little detour.

43
00:02:37,590 --> 00:02:42,770
We're going to put together a very quick little simple web project and then figure out how to use Jamestown

44
00:02:42,780 --> 00:02:44,240
to actually test it.

45
00:02:44,280 --> 00:02:46,770
OK so back inside my coat.

46
00:02:46,770 --> 00:02:54,060
Ed I'm going to find my team directory and inside there I'm going to create a new folder called sample

47
00:02:54,240 --> 00:02:56,160
web project.

48
00:02:56,280 --> 00:02:57,700
So we've already got sampling project.

49
00:02:57,720 --> 00:03:02,870
We're going to create a new folder called sample web project inside there.

50
00:03:02,890 --> 00:03:07,750
We're gonna create a new file that we'll call index each team L so inside of here we're gonna write

51
00:03:07,750 --> 00:03:12,310
out some little simple application we might have a javascript file to pair up to it and we're going

52
00:03:12,310 --> 00:03:15,230
to eventually try to write some tests around it.

53
00:03:15,250 --> 00:03:19,380
So right now let's first begin inside this index not a single file with just a little bit of both a

54
00:03:19,390 --> 00:03:20,170
plate.

55
00:03:20,170 --> 00:03:24,960
So at the very top I'll do my doc type I'll get my each e-mail

56
00:03:29,830 --> 00:03:43,050
I head body and I'll add in a script tag for a source of index start J.S. like so it's now the question

57
00:03:43,050 --> 00:03:47,610
is what little sample project do we want to create here let's just create something that shows a form

58
00:03:47,610 --> 00:03:52,440
to the user and maybe receive some kind of input like an email and we're just going to try to run some

59
00:03:52,440 --> 00:03:55,770
validation of that email and then print up the result on the screen.

60
00:03:55,770 --> 00:04:02,900
So just a very simple application so I going to create a form element inside there I'm going to show

61
00:04:02,930 --> 00:04:03,560
a label

62
00:04:07,120 --> 00:04:19,600
that says enter email then an input and a button that says summit it's now inside of the new index not

63
00:04:19,600 --> 00:04:20,780
just file that would create.

64
00:04:20,800 --> 00:04:24,950
Right now we're going to write out some code to watch for the fun submission events.

65
00:04:25,120 --> 00:04:28,010
We're going to take the input whatever's inside there.

66
00:04:28,010 --> 00:04:31,120
Will there verify and just validate that it is an email or something.

67
00:04:31,120 --> 00:04:32,040
Looks like an e-mail.

68
00:04:32,110 --> 00:04:36,640
And then if it is we'll try to show a message on the screen something you just says OK you have valid

69
00:04:36,640 --> 00:04:37,880
e-mail or not.

70
00:04:37,930 --> 00:04:39,980
We're going to eventually write some tests around us.

71
00:04:40,510 --> 00:04:48,100
So inside of my sample web project directory I'll make another new file called index J.S. inside of

72
00:04:48,100 --> 00:04:48,280
here.

73
00:04:48,280 --> 00:04:54,980
We'll set up a quick event listener so I'll do a document query selector on the form I'll add an event

74
00:04:56,500 --> 00:04:58,810
listener for the submit event

75
00:05:01,800 --> 00:05:05,970
I'll receive the event that we get through that and call it event dot prevent default.

76
00:05:05,970 --> 00:05:10,690
Remember we're doing that just to keep the browser from trying to submit that form.

77
00:05:10,760 --> 00:05:12,460
Then let's select that input element.

78
00:05:12,470 --> 00:05:15,570
We'll get the value out of it and try to do some validation on it.

79
00:05:15,620 --> 00:05:17,270
So we'll say const value.

80
00:05:17,270 --> 00:05:19,670
Notice that we're doing some destructor in here.

81
00:05:19,880 --> 00:05:26,660
We'll come from a document query selector.

82
00:05:26,690 --> 00:05:31,010
Now we'll do a quick check to see if this thing is a valid email and we're gonna say they're valid email

83
00:05:31,040 --> 00:05:32,330
or email is valid.

84
00:05:32,360 --> 00:05:41,800
If it simply has an app signs like the app character it will say if value that includes at then it must

85
00:05:41,800 --> 00:05:43,020
be valid.

86
00:05:43,270 --> 00:05:45,520
Else must be invalid.

87
00:05:47,390 --> 00:05:51,530
So we need something that's going to somehow communicate to the user whether or not we consider their

88
00:05:51,530 --> 00:05:52,700
email to be valid.

89
00:05:52,700 --> 00:05:54,310
Let's go back over to our e-mail file.

90
00:05:54,320 --> 00:05:55,490
We'll create a empty.

91
00:05:55,490 --> 00:06:00,560
Each one element and we'll stick others some text into it that says hey this is valid or this is invalid

92
00:06:00,560 --> 00:06:03,390
depending upon how that validation worked out.

93
00:06:03,410 --> 00:06:08,240
So inside of index dot HDL right underneath the form I'll just put an empty H1

94
00:06:11,480 --> 00:06:11,920
okay.

95
00:06:12,000 --> 00:06:19,370
So then back over here read about the if statement let's say header is document query selector.

96
00:06:19,370 --> 00:06:25,630
Each one and then if the email is valid we'll do a header dot inter H e-mail.

97
00:06:25,640 --> 00:06:34,680
I'll say looks good otherwise if the email is invalid we'll do a header dot enter H CML invalid email

98
00:06:36,970 --> 00:06:37,230
OK.

99
00:06:37,260 --> 00:06:42,120
So again very simple web project just something and so we can have some ability to understand how we're

100
00:06:42,120 --> 00:06:46,710
going to actually use J.S. Dom because what we just looked at inside the documentation is not really

101
00:06:46,710 --> 00:06:51,050
immediately clear how we can use that library to effectively test an application.

102
00:06:51,110 --> 00:06:53,520
Now let's test this outside of our browser really quickly.

103
00:06:53,610 --> 00:07:02,950
So I got to open up that index each e-mail file that we just created.

104
00:07:03,080 --> 00:07:05,700
All right there's my input.

105
00:07:05,860 --> 00:07:10,960
I'll stick in some valid e-mail and it is valid again because I've got the at symbol right there.

106
00:07:10,960 --> 00:07:12,680
I'll submit it and it looks good.

107
00:07:12,850 --> 00:07:17,240
But if I delete that and just put in some gibberish like so without any at symbol in hit submit.

108
00:07:17,260 --> 00:07:20,150
It says invalid email so that's it.

109
00:07:20,150 --> 00:07:22,980
That is our very simple very straightforward application.

110
00:07:23,540 --> 00:07:28,550
So now we've got something that with our classic approach like when we are using Moka just a little

111
00:07:28,550 --> 00:07:33,050
bit ago everything inside of here it would be really really challenging or just about impossible to

112
00:07:33,050 --> 00:07:34,870
test very easily.

113
00:07:34,870 --> 00:07:35,980
So let's take a pause right here.

114
00:07:35,990 --> 00:07:37,040
We'll come back the next video.

115
00:07:37,040 --> 00:07:41,780
We're going to discuss how we're going to use J.S. Tom to effectively test this application that we

116
00:07:41,780 --> 00:07:42,560
just put together.
