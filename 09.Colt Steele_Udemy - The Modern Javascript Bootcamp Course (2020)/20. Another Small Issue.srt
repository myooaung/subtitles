1
00:00:01,060 --> 00:00:03,440
There is still another issue or two with our testing framework.

2
00:00:03,500 --> 00:00:07,670
So in this video we're going to write out another test and very quickly determine what that other issue

3
00:00:07,670 --> 00:00:08,850
is.

4
00:00:08,870 --> 00:00:14,090
So the next test I want to work on is going to try to enter in some text right here like a valid email

5
00:00:14,390 --> 00:00:18,800
and then submit the form to the test that we're going to write out is going to make sure that we eventually

6
00:00:18,800 --> 00:00:21,350
see the text right here that says looks good.

7
00:00:21,350 --> 00:00:28,450
So let's give this a shot back inside of my app dot test dot J J.S. file or write out another statement

8
00:00:28,840 --> 00:00:37,270
so say it shows a success message with a valid email and I will make sure that I mark this function

9
00:00:37,300 --> 00:00:43,390
as a sync of course so instead of here we're going to render the index not a single file once again.

10
00:00:43,460 --> 00:00:50,420
So let's say con storm is a weight render index dot each email and now this time that you want to again

11
00:00:50,420 --> 00:00:55,220
find the input element but this time we want to change its value and then attempt to submit the form

12
00:00:55,220 --> 00:00:56,200
itself.

13
00:00:56,300 --> 00:01:03,860
So first get a reference to the input element to do so we'll write out dorm window document not query

14
00:01:03,860 --> 00:01:11,640
selector and we'll look for an input once we find that input we'll then try to change its value.

15
00:01:11,730 --> 00:01:19,190
So say input dot value is some valid email so I'll put in some gibberish while Broadcom remember the

16
00:01:19,190 --> 00:01:21,820
only check we're doing right now is for the at sign.

17
00:01:21,890 --> 00:01:26,830
So whatever email you put in here it just needs to have an outside to be considered to be valid.

18
00:01:26,880 --> 00:01:32,400
It's now that we've got that input all we have to do is trigger a form submission event for that we're

19
00:01:32,400 --> 00:01:34,490
going to try to select the form element.

20
00:01:34,500 --> 00:01:40,730
There's only one on our index not Asian Chanel file and we will manually dispatch an event of type submit.

21
00:01:40,950 --> 00:01:45,300
So this will be very similar to that earlier thing that we did where we tried to convince some input

22
00:01:45,330 --> 00:01:49,700
element that we were trying to imitate chain urged me to input the event on as well.

23
00:01:49,820 --> 00:01:56,810
So we're going to first select the form so we'll do Dom window document and I'm going to indent your

24
00:01:56,820 --> 00:02:01,500
on to the next line just to give myself a little bit of space to type because this entire line right

25
00:02:01,500 --> 00:02:11,140
here is going to eventually be a very long it's all chained down a dot query selector and look for form.

26
00:02:11,210 --> 00:02:17,640
And then once we find that form remember we're going to dispatch an event and then whenever we dispatch

27
00:02:17,640 --> 00:02:22,840
the event we're going to pass in a new event object and that has to be loaded with the type of event

28
00:02:22,870 --> 00:02:23,950
that we want to dispatch.

29
00:02:23,950 --> 00:02:31,830
So we'll say new Dom dot window dot event and I want you to make sure this thing thinks that it's getting

30
00:02:31,830 --> 00:02:36,280
a submit event so I'll put an submit right there.

31
00:02:36,350 --> 00:02:42,110
All right then after that we'll go ahead and select our each one element and we should build to take

32
00:02:42,110 --> 00:02:47,000
a look at the inner each symbol on it and verify that it has some text like looks good or something

33
00:02:47,000 --> 00:02:47,980
similar.

34
00:02:48,080 --> 00:02:55,670
So just like my H1 I'll declare an each one variable and we'll do once again Dom window document dot

35
00:02:55,790 --> 00:03:02,690
query selector and I'll look for an H1 now before we actually write out an assertion statement like

36
00:03:02,690 --> 00:03:07,970
that right there or anything similar luscious console log that each team l contained within this H1

37
00:03:08,430 --> 00:03:13,100
and we'll run a test and just make sure that we can like manually inside of our terminal C that has

38
00:03:13,100 --> 00:03:18,520
the correct inner each team out so I'll do a console log each one dot enter each CMO

39
00:03:21,520 --> 00:03:21,900
All right.

40
00:03:21,940 --> 00:03:24,030
This all like to me looks good.

41
00:03:24,220 --> 00:03:30,760
We're rendering the Dom we are changing some input we're gonna submit the form and that should result

42
00:03:30,820 --> 00:03:35,320
in the javascript code that we had written inside the index dot J has filed to be executed remember

43
00:03:35,320 --> 00:03:41,860
in theory all this stuff right here is getting loaded up and executed by J.S. Dom and so when we dispatch

44
00:03:41,860 --> 00:03:47,320
that event that code we wrote inside the index not J as files should see the form submission and then

45
00:03:47,320 --> 00:03:50,270
do the validation and update that each one.

46
00:03:50,320 --> 00:03:54,120
So again everything inside of here generally looks pretty good.

47
00:03:54,260 --> 00:03:59,670
All right so let's say this I'm going to go back over to my terminal I'm gonna make sure I'm at once

48
00:03:59,670 --> 00:04:05,550
again inside of sample web project and I'll run TMC inside there and OK.

49
00:04:05,590 --> 00:04:07,020
Well it looks like both tests pass.

50
00:04:07,030 --> 00:04:13,460
But remember a test passing just means that we did not throw an error during that test.

51
00:04:13,530 --> 00:04:15,540
So you'll notice that there's a big gap right here.

52
00:04:15,540 --> 00:04:19,930
That is the console log that we just added Let's met kind of update the console log right here.

53
00:04:19,950 --> 00:04:27,180
I'll say contents of each one so we can really clearly see where that console log occurs so I'll save

54
00:04:27,180 --> 00:04:30,980
that once again and now I can see contents of each one.

55
00:04:31,040 --> 00:04:32,380
Nothing.

56
00:04:32,540 --> 00:04:37,250
So it's very clear right now that are really our test is not working as expected or perhaps a better

57
00:04:37,250 --> 00:04:41,210
way to say would be our application is not working as expected.

58
00:04:41,210 --> 00:04:44,060
So again the code we have inside of this test file right here.

59
00:04:44,060 --> 00:04:47,950
It looks good to me and just so you know like the test really is good.

60
00:04:48,020 --> 00:04:48,820
The test is fine.

61
00:04:48,830 --> 00:04:51,470
We don't really have changed the test any more than what you see.

62
00:04:51,500 --> 00:04:55,120
So there's definitely some other issue that we need to figure out what's going on.

63
00:04:55,160 --> 00:05:00,290
So we have to figure out what's happening here why we're not seeing the H1 content update and then put

64
00:05:00,290 --> 00:05:01,640
together some fix.

65
00:05:01,690 --> 00:05:04,190
So let's start to diagnose this problem in the next video.
