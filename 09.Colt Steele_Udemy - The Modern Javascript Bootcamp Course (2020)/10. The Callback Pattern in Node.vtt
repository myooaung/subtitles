WEBVTT
1
00:00:01.030 --> 00:00:01.290
All right.

2
00:00:01.300 --> 00:00:04.180
Let's figure out how to use the read it to function.

3
00:00:04.190 --> 00:00:08.370
I'm going to go back over to my editor to get started over here.

4
00:00:08.390 --> 00:00:15.920
I'm going to call that function with F S dots read dir and notice that these DIR OF SEE ME THE D of

5
00:00:15.920 --> 00:00:18.150
the word dir is lowercase.

6
00:00:18.400 --> 00:00:21.800
Then we have to figure out the different arguments that this function takes.

7
00:00:21.800 --> 00:00:26.700
If we read the documentation it's going to tell us exactly what to pass in the first thing we're gonna

8
00:00:26.700 --> 00:00:31.140
pass in is the path or essentially the directory that we want to open up.

9
00:00:31.440 --> 00:00:35.560
In this case let's try to open up the same directory that our project is in.

10
00:00:35.610 --> 00:00:41.720
So in other words I want to open up the list directory that we just created and printout all the files

11
00:00:41.720 --> 00:00:46.610
and folders inside there to indicate that we want to open up that current directory right there.

12
00:00:46.790 --> 00:00:53.150
We can put in a dot like so inside of a string that is just one way to indicate that we want to open

13
00:00:53.150 --> 00:00:54.510
up this current directory.

14
00:00:54.530 --> 00:00:57.040
There are several other ways as well that we'll take a look at.

15
00:00:57.110 --> 00:01:05.310
But right now we can just put in a dot like so the second argument is then a little bit more complicated.

16
00:01:05.370 --> 00:01:10.140
You'll notice that the documentation right here says that it takes this function takes three arguments.

17
00:01:10.140 --> 00:01:12.660
In reality it can optionally take two.

18
00:01:12.690 --> 00:01:18.870
So either two or three square brackets around the argument that says options means that that argument

19
00:01:18.870 --> 00:01:20.550
right there is optional.

20
00:01:20.550 --> 00:01:27.600
So we can either pass in half an options object and a callback or we can pass in just path and just

21
00:01:27.660 --> 00:01:29.670
a callback.

22
00:01:29.890 --> 00:01:32.680
In our case we don't need to pass in any options.

23
00:01:32.710 --> 00:01:36.620
So we're going to leave off that second argument entirely instead.

24
00:01:36.630 --> 00:01:38.580
We're just going to throw in right away.

25
00:01:38.580 --> 00:01:44.130
A callback function after node reaches out to this current directory that we're trying to open up and

26
00:01:44.130 --> 00:01:46.150
finds all the different files inside there.

27
00:01:46.200 --> 00:01:50.860
It's going to run this callback function with two different arguments.

28
00:01:50.940 --> 00:01:53.910
The first argument is going to be an air object.

29
00:01:53.940 --> 00:01:59.610
Now it's not guaranteed that an error is going to occur when we try to open up this directory instead

30
00:01:59.640 --> 00:02:04.560
if something goes wrong while opening up that directory and finding all the files node is going to color

31
00:02:04.560 --> 00:02:11.520
callback with the first argument of an air object if there is no error then the first argument is going

32
00:02:11.520 --> 00:02:18.270
to instead be no so let's try to write out some code to handle that makeover in my editor.

33
00:02:18.300 --> 00:02:25.020
I got passed in a callback function and I'll add in the first arguments like I said it's going to be

34
00:02:25.020 --> 00:02:26.520
an air object.

35
00:02:26.820 --> 00:02:29.950
We usually abbreviate this simply with e r.

36
00:02:30.210 --> 00:02:38.030
So now inside of this callback function there are two possibilities that we need to handle either air

37
00:02:38.150 --> 00:02:49.730
is equal to an air object which means something went wrong or air is equal to no which means everything

38
00:02:49.730 --> 00:02:55.370
is OK in other words we open up that directory and read all the files in there successfully.

39
00:02:55.370 --> 00:03:00.650
So it is up to you and me to write out some code to check the value of that argument right there and

40
00:03:00.650 --> 00:03:06.160
see if it is equal to nil or if it is equal to some kind of air object.

41
00:03:06.230 --> 00:03:13.820
The easiest way to do this is to write out something like this will say if error then add in some error

42
00:03:14.240 --> 00:03:16.040
handling code here.

43
00:03:16.160 --> 00:03:17.620
So why does this work.

44
00:03:17.660 --> 00:03:24.740
Well if we do an if statement on the value null valuable is falsely which means that the inner heart

45
00:03:24.770 --> 00:03:27.880
or the body the if statement is never going to be executed.

46
00:03:27.950 --> 00:03:35.140
We're essentially saying if air is defined if it is in air object then run this the body of this statement.

47
00:03:35.660 --> 00:03:42.440
Otherwise if errors null we're going to skip over that statement entirely though inside of here we can

48
00:03:42.440 --> 00:03:45.120
do some error handling in a variety of different ways.

49
00:03:45.350 --> 00:03:54.570
We can do a simple console log of air or we could do throw new air and pass in that air object.

50
00:03:54.570 --> 00:03:58.620
It's really up to us as engineers to decide what is most appropriate.

51
00:03:58.770 --> 00:04:04.680
I will say that if we do a console log like so then that's just going to console like the air and tell

52
00:04:04.680 --> 00:04:06.810
you and I that's something wrong just occurred.

53
00:04:07.050 --> 00:04:11.820
But if we just do a console log that means that we're then going to continue on and run all the other

54
00:04:11.820 --> 00:04:16.830
code inside this function which might not be the best thing in the world we might not want to run any

55
00:04:16.830 --> 00:04:18.090
other code inside of here.

56
00:04:18.300 --> 00:04:23.820
If we did not successfully read all the files inside of that directory just think about it if we didn't

57
00:04:23.820 --> 00:04:25.530
get a list of the files in this directory.

58
00:04:25.650 --> 00:04:27.780
What else is there for our program to do.

59
00:04:27.780 --> 00:04:30.510
Do we want to run any other code inside this function.

60
00:04:30.510 --> 00:04:37.570
Well usually probably not so we usually have to think about exactly what we want to do at every step.

61
00:04:37.580 --> 00:04:42.620
If an error did occur it might just be a console log especially for just putting together some kind

62
00:04:42.620 --> 00:04:44.770
of fun project or learning node.

63
00:04:44.780 --> 00:04:50.690
Just getting started but in a more serious setting there might be some more important things to do here.

64
00:04:50.750 --> 00:04:57.040
It will be somewhat common for you to want to return the air or simply not return the air but do a console

65
00:04:57.040 --> 00:05:04.420
log of the air and then return all together so that we don't run any other coincide this function or

66
00:05:04.420 --> 00:05:11.050
alternatively like I mentioned we might just throw a new air and pass in the air that occurred

67
00:05:13.870 --> 00:05:14.390
OK.

68
00:05:14.530 --> 00:05:20.310
So right now I'm going to do a console log of that air and I won't change it again I know I just changed

69
00:05:20.310 --> 00:05:23.670
it like four times in a row I was going to leave it like that.

70
00:05:23.760 --> 00:05:28.110
Now the second argument Joy callback function is going to be the data that we were actually looking

71
00:05:28.110 --> 00:05:28.560
for.

72
00:05:28.560 --> 00:05:33.990
It's going to be an array of strings with the names of all the different files and directory inside

73
00:05:33.990 --> 00:05:35.840
of this current folder.

74
00:05:35.940 --> 00:05:43.810
So I'm going to receive that argument as a variable that I'll call file names I'm also going to clean

75
00:05:43.810 --> 00:05:45.850
up some of the comments inside of here.

76
00:05:46.210 --> 00:05:50.700
Just to simplify things a little bit.

77
00:05:50.830 --> 00:05:56.670
Then after the if statement I'll do a console log of file names and I just saw I misspelt names.

78
00:05:56.680 --> 00:05:59.620
I'm going to fix that up really quickly.

79
00:05:59.630 --> 00:06:00.020
All right.

80
00:06:00.170 --> 00:06:05.480
So right here what we have should be enough to actually run at our terminal and get some results see

81
00:06:05.540 --> 00:06:10.490
the different files inside of the list directory get council logged out so I can go back over to my

82
00:06:10.490 --> 00:06:12.010
terminal.

83
00:06:12.180 --> 00:06:17.550
I'm going to run node index dot J.S. and sure enough we see a print up of all the different files inside

84
00:06:17.550 --> 00:06:21.030
there which right now is just the index dot J.S. file.

85
00:06:21.090 --> 00:06:27.430
So this definitely worked out Leslie when I mentioned here is that this kind of pattern of passing in

86
00:06:27.460 --> 00:06:33.700
a callback function as the last argument to read dir and getting arguments to it of some air object

87
00:06:34.240 --> 00:06:39.840
and some files or some data is extremely common in node J.S..

88
00:06:40.030 --> 00:06:44.740
So if we take a look at some of the other functions of able to us try to take a look at just about any

89
00:06:44.740 --> 00:06:50.850
other function inside of this file or on this documentation page that doesn't have the word sync in

90
00:06:51.340 --> 00:06:52.090
the title.

91
00:06:52.120 --> 00:06:56.260
So for example the one underneath that sink ignore that one in any other one that has the word sink

92
00:06:56.440 --> 00:06:57.730
for just a moment.

93
00:06:57.970 --> 00:07:02.290
If you look at just about any other function inside of here you're going to notice that the last argument

94
00:07:02.290 --> 00:07:08.440
is a callback and in every scenario the first argument is some kind of error and then the second or

95
00:07:08.440 --> 00:07:11.120
third is the actual data that we're looking for.

96
00:07:11.210 --> 00:07:18.550
So we can see that is the case for this read function if we take a look at open Dir.

97
00:07:18.550 --> 00:07:19.150
Same thing.

98
00:07:19.230 --> 00:07:23.680
There is a callback as the last argument that takes an error and also gets the second argument of the

99
00:07:23.680 --> 00:07:26.700
thing we were actually trying to accomplish.

100
00:07:26.820 --> 00:07:28.140
We can go even more up here.

101
00:07:28.150 --> 00:07:29.320
We'll see the open function.

102
00:07:29.320 --> 00:07:32.560
Same thing callback with air and some data.

103
00:07:32.560 --> 00:07:37.360
So this is an extremely common pattern that we're going to see and no G.S. again and again and again

104
00:07:38.170 --> 00:07:43.060
in so many locations we're going to have a third argument or some last argument of a callback function

105
00:07:43.300 --> 00:07:48.520
that takes an air and some data and then inside the callback we'll take a look see if an error occurred

106
00:07:48.760 --> 00:07:49.230
if it did.

107
00:07:49.270 --> 00:07:55.310
We'll handle it otherwise we'll continue on and work with the data that we're looking for okay.

108
00:07:55.430 --> 00:07:59.180
So now we understand that we're going to see that pattern over and over and over.

109
00:07:59.210 --> 00:07:59.870
Quick break.

110
00:07:59.870 --> 00:08:02.060
Continue on this app in just a moment.
