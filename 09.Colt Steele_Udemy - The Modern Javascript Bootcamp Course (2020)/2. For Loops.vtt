WEBVTT
1
00:00:00.120 --> 00:00:03.520
All right so let's talk about our first loop the for loop.

2
00:00:03.630 --> 00:00:05.520
If you've never seen four loops before.

3
00:00:05.640 --> 00:00:08.700
Buckle up the syntax is a little bit odd.

4
00:00:08.730 --> 00:00:13.470
The first time you see it but you'll use it so often that eventually just makes sense.

5
00:00:13.470 --> 00:00:16.880
So this is a representation of the syntax sort of the pattern.

6
00:00:17.010 --> 00:00:19.230
I know it looks like a lot of looks very confusing.

7
00:00:19.350 --> 00:00:20.670
But let's take it step by step.

8
00:00:21.450 --> 00:00:28.290
So a for loop is very similar to a conditional not in the way that it works but in the syntax we have

9
00:00:28.290 --> 00:00:35.100
a conditional statement here we have if and then something in parents and then a block of code enclosed

10
00:00:35.100 --> 00:00:40.790
by curly braces and whatever code I put in here will only run if this condition is true.

11
00:00:40.830 --> 00:00:42.860
This code is associated with that.

12
00:00:42.870 --> 00:00:48.730
If when we write a for loop it's the same pattern we have for which is the keyword.

13
00:00:48.810 --> 00:00:56.310
Has to be four not uppercase for not f o you are it needs to be F O R and then we have parents and we'll

14
00:00:56.310 --> 00:01:01.560
talk about what goes in there in just a moment and then we have curly braces and code block and whatever

15
00:01:01.560 --> 00:01:05.630
content is in here will run every time this loop repeats.

16
00:01:05.640 --> 00:01:10.990
So if I loop 10 times this a particular code is going to run 10 times.

17
00:01:11.370 --> 00:01:12.860
I'm not sure if that's how you pronounce that.

18
00:01:12.870 --> 00:01:15.890
So what is the syntax what goes in here.

19
00:01:15.900 --> 00:01:18.230
It's it's a little tricky to explain.

20
00:01:18.240 --> 00:01:23.970
There are three separate pieces a lot of times people come to JavaScript or students who come from other

21
00:01:23.970 --> 00:01:24.570
languages.

22
00:01:24.570 --> 00:01:31.230
Ask Is there an easy way to just run something 10 times no matter what some languages do you have a

23
00:01:31.230 --> 00:01:36.920
really easy way to say make this happen 10 times let's say I have counseled out log I want to cancel

24
00:01:36.940 --> 00:01:44.830
that log Hello 10 times without a loop the obvious way is to do this and that sucks and I think I'd

25
00:01:44.940 --> 00:01:51.630
only at 9 times but there we go ten times but this is obviously horrendous and this is only ten times

26
00:01:51.630 --> 00:01:56.640
we're running something but there are many situations if we have an array of ten thousand items or even

27
00:01:56.640 --> 00:02:02.190
a thousand items each one is different if we had to write it by hand to print out each item in the array

28
00:02:02.550 --> 00:02:08.670
that would be a nightmare we would do something like cancel that log array of zero and then manually

29
00:02:08.790 --> 00:02:12.710
array of 1 and array of 2 if we have even just 100.

30
00:02:12.810 --> 00:02:15.680
My fingers are going to fall off by the time I finish typing that out.

31
00:02:15.870 --> 00:02:22.170
So we use loops but a for loop is not as easy as saying make this happen 10 times or 20 times there

32
00:02:22.170 --> 00:02:23.660
are three separate pieces.

33
00:02:23.820 --> 00:02:30.870
The main idea behind a for loop is that we define a variable in this variable is like a counter it's

34
00:02:30.870 --> 00:02:37.890
a counter for that loop and we started at some value if I want to run something ten times I'll just

35
00:02:37.890 --> 00:02:45.570
do 10 total times I could start a variable zero at 1 I could start it at 50 it doesn't really matter

36
00:02:45.570 --> 00:02:49.860
where it starts at least in this case and then I define a stopping point.

37
00:02:50.280 --> 00:02:55.630
So if I went from 50 I'm going to go upwards I'll say we'll stop when we hit 60.

38
00:02:55.650 --> 00:03:02.160
That would give me 10 iterations and then the third step is what happens to this variable each time

39
00:03:02.160 --> 00:03:02.460
through.

40
00:03:03.180 --> 00:03:09.350
So if we're trying to run ten times I would say add one to the variable ten different times.

41
00:03:09.480 --> 00:03:19.230
So there are three pieces the initial value when to run the loop and then how to change value each time.

42
00:03:19.230 --> 00:03:21.550
This kind of looks like gibberish here.

43
00:03:21.780 --> 00:03:23.640
So let's revisit our slide.

44
00:03:23.640 --> 00:03:30.810
We have four and then parens we will define a variable let's say it starts at zero then we'll say a

45
00:03:30.810 --> 00:03:38.280
condition and this condition is something like While that variable is less than 10 run this loop and

46
00:03:38.280 --> 00:03:43.400
then we increment that variable by one or by two or by negative five.

47
00:03:43.410 --> 00:03:44.580
It's up to us.

48
00:03:44.640 --> 00:03:49.340
So here's a simple example we're going to define a variable in this loop.

49
00:03:49.350 --> 00:03:53.130
That's the first piece the initial value for a variable.

50
00:03:53.130 --> 00:04:00.040
Usually people will use the variable name I because it's short and it doesn't have to mean very much.

51
00:04:00.060 --> 00:04:03.730
I think originally maybe it stand stood for index or integer.

52
00:04:03.870 --> 00:04:05.780
It doesn't matter but you'll see people use.

53
00:04:05.790 --> 00:04:12.510
I J K you can name this whatever you want it's just a variable you're making let's have it start let's

54
00:04:12.510 --> 00:04:19.110
go with one we'll have it start at 1 and then we need a semicolon then we have a second piece which

55
00:04:19.110 --> 00:04:26.800
tells javascript when this loop should continue running for so we're going to run as long as I is less

56
00:04:26.800 --> 00:04:30.450
center equal to 10 as soon as we're past 10.

57
00:04:30.450 --> 00:04:36.810
It should stop and then we tell it how to update I each time through the loop.

58
00:04:36.810 --> 00:04:42.330
It's pretty standard to do I plus plus because a lot of the time you want to loop one number at a time

59
00:04:42.540 --> 00:04:47.240
one and then two and then three and then four but you could also do plus equals three.

60
00:04:47.250 --> 00:04:48.800
This would loop by threes.

61
00:04:48.840 --> 00:04:52.520
So we would start with one and then we add three.

62
00:04:52.560 --> 00:04:56.100
So we get four and then we add three and we'd have seven.

63
00:04:56.190 --> 00:04:58.300
Then we add three and we hit 10.

64
00:04:58.560 --> 00:05:03.320
And then if you did it again we would get 13 at which point we're past this.

65
00:05:03.380 --> 00:05:08.870
So it no longer runs but let's just add one each time using that nice shortcut.

66
00:05:08.900 --> 00:05:10.400
Plus plus.

67
00:05:10.400 --> 00:05:14.870
And we could start by simply consider logging Hello 10 times.

68
00:05:14.870 --> 00:05:20.110
I'm going to refresh my code over here so annoying that the chrome console does this.

69
00:05:20.240 --> 00:05:26.930
It collects all those 10 identical constant logs and displays them as one with the number 10 next to

70
00:05:26.930 --> 00:05:27.860
it.

71
00:05:27.860 --> 00:05:31.130
So it did print out ten times it's just hard to see.

72
00:05:31.130 --> 00:05:37.410
So why don't we also print out I so I'll just do a hello colon and then the variable i.

73
00:05:37.940 --> 00:05:39.860
Which is our loop variable.

74
00:05:40.220 --> 00:05:42.030
I'll refresh the page.

75
00:05:42.030 --> 00:05:43.990
And there we go.

76
00:05:44.150 --> 00:05:45.380
So to step through this one more time.

77
00:05:45.410 --> 00:05:46.130
So make a variable.

78
00:05:46.130 --> 00:05:47.630
I started at 1.

79
00:05:47.690 --> 00:05:48.490
Keep looping.

80
00:05:48.590 --> 00:05:54.440
If I is less than or equal to 10 and then add one to I each time through.

81
00:05:54.440 --> 00:05:55.850
So I started at 1.

82
00:05:55.970 --> 00:05:56.930
That's less than 10.

83
00:05:57.350 --> 00:05:59.270
So we're going to cancel that log.

84
00:05:59.310 --> 00:05:59.870
I.

85
00:06:00.080 --> 00:06:02.530
Which gives us hello 1.

86
00:06:02.600 --> 00:06:03.680
Which is what we see here.

87
00:06:03.770 --> 00:06:08.750
And then I is incremented so I becomes two because we did plus plus.

88
00:06:08.840 --> 00:06:10.820
Is I still less than or equal to 10.

89
00:06:10.880 --> 00:06:11.720
Yes it is.

90
00:06:11.720 --> 00:06:13.600
So we cancel that log too.

91
00:06:13.670 --> 00:06:15.020
So that's printed out now.

92
00:06:15.110 --> 00:06:18.340
I it's going to be added 1 or have one added to it again.

93
00:06:18.340 --> 00:06:19.280
2 we get 3.

94
00:06:19.310 --> 00:06:24.270
This keeps going until I is 9 at which case we're still in the clear.

95
00:06:24.320 --> 00:06:27.150
We add one I becomes 10.

96
00:06:27.290 --> 00:06:31.940
This is still true because we have less than or equal to 10 so that's fine.

97
00:06:32.030 --> 00:06:39.550
But then we print out Hello 10 after which I is incremented to eleven and then this is no longer true.

98
00:06:39.680 --> 00:06:41.970
I is not less than or equal to 10.

99
00:06:42.080 --> 00:06:43.660
Eleven is greater than 10.

100
00:06:43.730 --> 00:06:50.840
So we are done with the loop so this loop is going to run ten times because of the way I set it up but

101
00:06:50.840 --> 00:06:58.640
if I instead said I starts at 5 it only runs five times or 6 I can't do math because we're including

102
00:06:58.640 --> 00:07:02.110
10 1 2 3 4 5 6.

103
00:07:02.330 --> 00:07:09.710
If I instead did I equals 1 but instead of I plus plus I did plus equals 3.

104
00:07:09.800 --> 00:07:13.300
I'll duplicate this so we have a record of the original.

105
00:07:13.850 --> 00:07:16.670
I'm now going to increment by 3.

106
00:07:17.180 --> 00:07:25.850
Refresh the page and this is what we get four total times that it ran and the value of I was 1 4 7 and

107
00:07:25.850 --> 00:07:30.110
then 10 afterwards became 13 and the loop stopped.

108
00:07:30.110 --> 00:07:34.820
So if you feel comfortable with the syntax at this point go ahead and move on we have more to talk about

109
00:07:34.820 --> 00:07:36.710
with for loops in the next couple videos.

110
00:07:36.710 --> 00:07:39.420
But if you want some more practice I'll do a few more examples.

111
00:07:39.440 --> 00:07:42.540
Let's generate the first 20 perfect squares.

112
00:07:42.620 --> 00:07:45.230
Now a perfect square is just a number of times itself.

113
00:07:45.230 --> 00:07:47.220
So the first one is 1 times 1.

114
00:07:47.240 --> 00:07:53.330
Then we have 2 times two we have three times three which is nine four times for 16 all the way up until

115
00:07:53.330 --> 00:07:54.960
20 times 20.

116
00:07:55.040 --> 00:08:00.590
So to print those out I would need to loop from one to 20 and then canceled out log each number of times

117
00:08:00.590 --> 00:08:01.610
itself.

118
00:08:01.610 --> 00:08:07.260
So the loop from one to 20 we need to initialize a variable at one and we can name it anything.

119
00:08:07.520 --> 00:08:11.240
Like I said I is very very standard but just to prove it that it doesn't matter.

120
00:08:11.240 --> 00:08:12.070
Let's go with NUM.

121
00:08:12.620 --> 00:08:16.160
So we'll start at 1 num as 1 will continue.

122
00:08:16.160 --> 00:08:24.620
While num is less than or equal to 20 or alternatively less than 21 I like to do it this way if I know

123
00:08:24.620 --> 00:08:29.500
I want to include 20 I like to put less than or equals instead of this.

124
00:08:29.750 --> 00:08:31.930
I don't know why it's an extra character.

125
00:08:31.970 --> 00:08:35.550
Other people prefer it the other way around but I'll do it this way.

126
00:08:35.840 --> 00:08:42.110
And each time through we will add one to num so let's make sure we're generating the correct numbers

127
00:08:42.140 --> 00:08:47.000
by just constant logging each num okay one to 20.

128
00:08:47.030 --> 00:08:51.090
Now we want to print the perfect square instead which is Num Times num.

129
00:08:51.200 --> 00:08:56.120
And I think I'm actually going to do a little string template literal so that I print something out

130
00:08:56.120 --> 00:09:06.800
like four times four equals sixteen so I will interpolate here and display NUM and then X for multiplication

131
00:09:07.370 --> 00:09:11.500
and then interpolate again with a dollar sign display name again.

132
00:09:11.750 --> 00:09:13.310
Let's just see what we get now.

133
00:09:13.310 --> 00:09:15.320
1 times 1 20 times 20.

134
00:09:15.440 --> 00:09:21.050
And then I'm going to add my equal sign and then interpolate one more time with a dollar sign and do

135
00:09:21.050 --> 00:09:22.060
my actual math.

136
00:09:22.070 --> 00:09:22.530
None.

137
00:09:22.550 --> 00:09:26.100
Num Times num refresh the page.

138
00:09:26.210 --> 00:09:27.010
Awesome.

139
00:09:27.230 --> 00:09:30.370
One times one is one four nine sixteen twenty five.

140
00:09:30.380 --> 00:09:32.510
All the way up to 400.

141
00:09:32.660 --> 00:09:38.350
So this is looping in one direction we're going from a low number up to a higher number.

142
00:09:38.450 --> 00:09:41.080
I'll also show that we can go the opposite direction.

143
00:09:41.270 --> 00:09:49.010
So here's a loop where I starts at 50 and we subtract ten each time and we continue looping as long

144
00:09:49.010 --> 00:09:51.320
as I is greater than or equal to zero.

145
00:09:51.350 --> 00:09:56.300
So as long as it's positive or zero so 50 we subtract 10.

146
00:09:56.300 --> 00:10:00.270
Next time is 40 then 30 than 20 than 10 then zero then we're done.

147
00:10:01.100 --> 00:10:02.530
So this is counting backwards.

148
00:10:02.900 --> 00:10:04.250
And you can definitely do that.

149
00:10:04.670 --> 00:10:06.230
We'll do one more example of that.

150
00:10:06.290 --> 00:10:07.970
Let's come at this one out.

151
00:10:07.970 --> 00:10:13.150
Let's count down from two hundred and count down in intervals of twenty five.

152
00:10:13.310 --> 00:10:15.070
So two hundred one seventy five.

153
00:10:15.080 --> 00:10:16.550
One fifty one twenty five.

154
00:10:16.550 --> 00:10:17.740
One hundred.

155
00:10:17.750 --> 00:10:22.970
So we'll go back to using AI because that is the standard term unless we have nested loops in which

156
00:10:22.970 --> 00:10:26.350
case you'll see we use other letters like J and K.

157
00:10:27.050 --> 00:10:28.150
We're not going to start at zero.

158
00:10:28.160 --> 00:10:30.810
We'll start at two hundred if that's what we're going to do.

159
00:10:31.010 --> 00:10:38.750
We'll loop while I is greater than or equal to zero so not less than we definitely want greater than

160
00:10:39.200 --> 00:10:41.290
if we have high starting at 200.

161
00:10:41.330 --> 00:10:44.780
And we're saying run this loop while i is less than zero.

162
00:10:44.870 --> 00:10:49.230
It's never going to run because two hundred is already greater than zero.

163
00:10:49.520 --> 00:10:55.280
So if I tried that each time through we will subtract twenty five.

164
00:10:55.280 --> 00:10:58.130
Let's see what we get counted out log.

165
00:10:58.130 --> 00:10:59.940
Does it work.

166
00:11:00.320 --> 00:11:01.730
Refresh the page.

167
00:11:01.730 --> 00:11:06.870
We don't get anything and that's because we wrote our loop in such a way that it's never true.

168
00:11:06.890 --> 00:11:11.470
I begins at two hundred and this is checked is two hundred less than or equal to zero.

169
00:11:11.480 --> 00:11:12.250
Nope.

170
00:11:12.380 --> 00:11:14.960
So nothing happens we just move on to the next line.

171
00:11:15.050 --> 00:11:22.190
So if I put this line down here after the loop we would see that it is the only thing to run or the

172
00:11:22.190 --> 00:11:23.120
only thing to print out.

173
00:11:23.990 --> 00:11:26.720
So what I wanted to do is go from 200 down to zero.

174
00:11:27.410 --> 00:11:31.980
So I want to go while I is greater than or equal to zero.

175
00:11:32.060 --> 00:11:37.880
I want to stop when I becomes negative and will subtract twenty five each time.

176
00:11:37.880 --> 00:11:43.290
Remember this is a shorthand way of saying I equals I minus 25.

177
00:11:43.370 --> 00:11:46.850
It's easier just to do minus equals twenty five.

178
00:11:47.090 --> 00:11:51.390
Let's try it and instead of saying does it work let's just print out.

179
00:11:51.500 --> 00:12:00.070
I never go 200 175 150 all the way down until we hit zero which is the last thing we print out the last

180
00:12:00.080 --> 00:12:00.610
I.

181
00:12:00.710 --> 00:12:05.390
At which point I zero we subtract twenty five which gives us negative twenty five.

182
00:12:05.390 --> 00:12:11.510
This is now false and we no longer print anything out and the code moves on and this runs instead.

183
00:12:11.510 --> 00:12:16.070
So when we do have a loop like we have here this code is going to keep running over and over and over

184
00:12:16.070 --> 00:12:17.950
and tell the loop is false.

185
00:12:17.960 --> 00:12:22.130
This condition is false and then whatever happens afterwards will run.

186
00:12:22.370 --> 00:12:22.930
OK.

187
00:12:23.090 --> 00:12:24.470
So for loops are a lot.

188
00:12:24.500 --> 00:12:29.630
I know they're always a little tricky to teach to people who have never coded before.

189
00:12:29.630 --> 00:12:35.330
Unfortunately there's just a lot of there's not many moving pieces but the syntax is kind of ugly.

190
00:12:35.360 --> 00:12:41.110
Just remember the three pieces you're a variable that you're using for the loop usually called I.

191
00:12:41.220 --> 00:12:47.660
You give it some initial value then the next part after semicolon is the condition that checks if the

192
00:12:47.660 --> 00:12:49.120
loop should continue running.

193
00:12:49.240 --> 00:12:55.490
So the loop will run as long as this is true and then another semicolon and then whatever operation

194
00:12:55.490 --> 00:13:01.760
you're performing on high usually adding or subtracting but you could also multiply you could divide.

195
00:13:01.790 --> 00:13:06.260
You can do anything there but most of the time we're doing simple math and ninety nine percent of the

196
00:13:06.260 --> 00:13:09.420
stuff I do at least is adding 1.

197
00:13:09.530 --> 00:13:14.150
It's really really common that you just want to add one to something as we'll see when we work with

198
00:13:14.150 --> 00:13:16.820
arrays and strings and just a video or two.

199
00:13:16.980 --> 00:13:17.710
OK.

200
00:13:17.810 --> 00:13:20.090
That's a lot I know hopefully you're still there.

201
00:13:20.090 --> 00:13:20.440
Good job.
