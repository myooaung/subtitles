WEBVTT
1
00:00:00.740 --> 00:00:04.670
Now that we have created those starting data arrays that are going to keep track of the state of our

2
00:00:04.670 --> 00:00:07.480
maze we can start to implement our actual algorithm.

3
00:00:07.500 --> 00:00:12.080
So step one is to pick a random starting cell to pick a random starting cell.

4
00:00:12.080 --> 00:00:18.820
We essentially need some starting dimensions or index that points into the grid array so if this is

5
00:00:18.820 --> 00:00:24.490
our maze right here we currently have three rows and three columns.

6
00:00:24.490 --> 00:00:28.810
So to pick a random starting cell I need the index of some row in column inside of here.

7
00:00:28.810 --> 00:00:34.720
That essentially means we just have to generate a value between 0 into so maybe we start off with 0

8
00:00:35.690 --> 00:00:37.630
and then we need another 0 into.

9
00:00:37.880 --> 00:00:40.770
So maybe start off with zero as well.

10
00:00:40.770 --> 00:00:43.510
So this would mean rows 0 and column 0.

11
00:00:43.570 --> 00:00:54.380
That would be right there if we instead got something like a row of two and a column of 1 then we would

12
00:00:54.380 --> 00:01:00.310
go to wrote 2 which is right there and column 1 which is right there remember we're starting off at

13
00:01:00.310 --> 00:01:03.310
zero here because we're using array index notation.

14
00:01:03.310 --> 00:01:11.460
And so with the right index notation we have 0 1 and 2 and 0 1 and 2 so to generate these numbers we

15
00:01:11.460 --> 00:01:15.120
essentially just have to take a look at that cell's variable that we just created.

16
00:01:15.120 --> 00:01:20.070
We're going to multiply it by a random number and then we're going to take the around that number down

17
00:01:20.190 --> 00:01:27.610
to the lowest integer so let's get to it back inside my editor right after we create the horizontals

18
00:01:27.610 --> 00:01:35.710
array I'm going to create a new variable called Start row and that's going to be math dot floor of math

19
00:01:35.770 --> 00:01:45.780
dot random times cells and I'm going to repeat that same calculation for my starting column as well

20
00:01:47.110 --> 00:01:53.710
so now if we console logged out those variables of start row and start column that's going to tell us

21
00:01:53.710 --> 00:01:56.260
exactly where we're going to start to iteration at.

22
00:01:56.320 --> 00:02:01.280
So as usual quick test your refresh and we get 1 and 3.

23
00:02:01.520 --> 00:02:06.060
That's OK if you recall just a second ago I had changed cells up here to five.

24
00:02:06.140 --> 00:02:10.310
I'm gonna take that back down to three really quickly just to stay in line with the diagram that I just

25
00:02:10.310 --> 00:02:11.420
showed you.

26
00:02:11.460 --> 00:02:15.010
Now if I say this again now we are going to get some realistic values.

27
00:02:15.050 --> 00:02:19.480
So this would mean start iteration at 0 0 0 2 1 0 and so on.

28
00:02:19.520 --> 00:02:24.310
We can keep refreshing it's going to show us these different starting points.

29
00:02:24.510 --> 00:02:25.710
So that's a good start.

30
00:02:25.710 --> 00:02:31.870
So now that we've got that starting point I'm going to define a function that we're going to call over

31
00:02:31.870 --> 00:02:37.690
and over with this starting row and starting column and inside that function we're going to go through

32
00:02:37.690 --> 00:02:43.140
this algorithm where we're going to go through each these steps that we just discussed right here I'm

33
00:02:43.150 --> 00:02:49.520
going to make a function called step through cell.

34
00:02:49.740 --> 00:02:50.830
That's a ridiculous name.

35
00:02:50.850 --> 00:02:56.670
If you think of a better name for it feel free to do so in my original notes for this I called it recurs

36
00:02:56.700 --> 00:03:00.870
because we're going to eventually do some recursion but honestly call it whatever you want just make

37
00:03:00.870 --> 00:03:04.740
sure that it's kind of clear that this is going to be iterating through our maze or a collection of

38
00:03:04.740 --> 00:03:11.660
cells or whatever else so when we call this function we're going to pass in some row in column that

39
00:03:11.660 --> 00:03:14.190
we want to visit inside of our grid.

40
00:03:14.450 --> 00:03:18.630
Then right after step three cell I'm going to make sure that I call it right away with start row and

41
00:03:18.630 --> 00:03:19.680
start column.

42
00:03:19.870 --> 00:03:29.820
It's all just step Roussel pass on my star row and start column so then inside of here is where we're

43
00:03:29.820 --> 00:03:32.700
going to start to put together all of our logic.

44
00:03:32.940 --> 00:03:37.020
First begin by putting a couple of comments inside of here just to guide myself and make sure they put

45
00:03:37.020 --> 00:03:39.540
down the correct sequence of steps.

46
00:03:39.990 --> 00:03:43.860
I'm going to generally be using this right here as a template for what I need to do inside of this function

47
00:03:45.530 --> 00:03:55.440
so to get started I'm going to first say if I have visited these sell at row column then return remember

48
00:03:55.440 --> 00:03:58.140
if we visit sell already then we should return early.

49
00:03:58.140 --> 00:04:03.570
We don't want to do anything if we've already visit this cell so if we get past that little check right

50
00:04:03.570 --> 00:04:08.610
there then we'll say Mark this cell as being visited.

51
00:04:08.880 --> 00:04:11.390
Remember to keep track of what cells we visited.

52
00:04:11.430 --> 00:04:13.800
We have the grid array.

53
00:04:13.800 --> 00:04:20.110
So if we look at the grid at some index and we have a value false that means it has not been visited.

54
00:04:20.130 --> 00:04:24.000
So when we say that we want to mark the seller's visit as visited that means we want to go in to that

55
00:04:24.000 --> 00:04:27.330
grid array and update some element inside of it to true.

56
00:04:27.330 --> 00:04:31.830
That's what makes a cell be marked as visited.

57
00:04:32.040 --> 00:04:38.670
Then after that we're going to assemble randomly ordered list of neighbors

58
00:04:41.210 --> 00:04:43.480
then for each neighbor.

59
00:04:43.490 --> 00:04:46.080
So I bet you can guess we're gonna do some iteration there.

60
00:04:46.150 --> 00:04:54.170
So for each neighbor we're gonna do a series of steps First off we're going to check to see if that

61
00:04:54.170 --> 00:04:57.180
neighbor is out of bounds.

62
00:04:57.230 --> 00:05:02.420
So at some point time with all this logic inside of here we might end up trying to visit like or be

63
00:05:02.420 --> 00:05:07.520
at a cell say right here and if we try to look at all the neighbors around us Well obviously there's

64
00:05:07.580 --> 00:05:13.100
above into the right but we might also kind of accidentally write into our code that there is a cell

65
00:05:13.280 --> 00:05:16.010
below or to the left when of course there isn't one at all.

66
00:05:16.790 --> 00:05:20.860
So to handle the case in which we accidently try to visit some cell it doesn't exist.

67
00:05:20.900 --> 00:05:25.100
Well we just need to make sure that we add in some code to check and make sure we don't try to go in

68
00:05:25.100 --> 00:05:26.650
some direction that doesn't exist.

69
00:05:26.670 --> 00:05:34.200
So that's what this step right here is going to do after that we will check to see if we have visited

70
00:05:36.990 --> 00:05:41.940
visited that neighbor Continue to next neighbor.

71
00:05:42.020 --> 00:05:46.580
So we're going to end up with two checks to see if we have visited a cell that's just to a little bit

72
00:05:46.580 --> 00:05:47.600
defensive coding.

73
00:05:47.600 --> 00:05:50.010
We don't really have to add in two separate checks.

74
00:05:50.030 --> 00:05:52.810
This is just for our benefit in case we ever make a mistake.

75
00:05:52.880 --> 00:05:57.890
We can eventually remove one of the two checks if we really want to.

76
00:05:57.980 --> 00:06:05.570
Then after that if we've gotten past these two checks and we're going to go ahead and visit that next

77
00:06:05.570 --> 00:06:05.860
cell.

78
00:06:06.080 --> 00:06:09.620
So we're going to say visit that next cell.

79
00:06:10.490 --> 00:06:17.480
And of course before that we need to make sure that we remove a wall from either the horizontals array

80
00:06:18.560 --> 00:06:25.000
or the verticals array and that depends upon whether we are moving to left right up or down and then

81
00:06:25.000 --> 00:06:26.880
when we say right here visit that next cell.

82
00:06:26.890 --> 00:06:34.710
That essentially means call our step through cell function again and pass in the row and column of the

83
00:06:34.710 --> 00:06:38.010
cell that we are now trying to visit so that is it.

84
00:06:38.010 --> 00:06:40.230
That is the entire algorithm right there.

85
00:06:40.230 --> 00:06:41.600
That's pretty much all the steps.

86
00:06:41.610 --> 00:06:43.260
So religious going to come back through.

87
00:06:43.380 --> 00:06:48.250
And for each of these different comments we're going to add in like one two three or four lines of code.

88
00:06:48.320 --> 00:06:52.230
So at the end of the day like I said the algorithm is really not the worst thing in the world as long

89
00:06:52.230 --> 00:06:57.100
as you've got a sheet of paper that you can use to kind of diagram out what we're doing at each step.

90
00:06:57.100 --> 00:06:58.830
It's now that we've got some guiding comments here.

91
00:06:58.830 --> 00:07:02.300
Let's take a pause and start to fill in our implementation in the next video.
