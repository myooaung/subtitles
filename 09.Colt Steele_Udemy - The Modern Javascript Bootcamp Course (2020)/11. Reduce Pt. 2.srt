1
00:00:00,270 --> 00:00:00,660
All right.

2
00:00:00,680 --> 00:00:06,290
So we saw how we can use reduce to some all elements in an array or multiply them altogether.

3
00:00:06,300 --> 00:00:08,090
And that's one use for reduce.

4
00:00:08,190 --> 00:00:10,550
But there are many other things we can do with it.

5
00:00:10,590 --> 00:00:13,890
We don't have to be accumulating a value through math.

6
00:00:13,920 --> 00:00:16,930
We don't have to be multiplying or adding or subtracting or dividing.

7
00:00:17,010 --> 00:00:24,090
We can also do things like finding the maximum value in an array where the accumulator is really just

8
00:00:24,090 --> 00:00:25,500
tracking the max.

9
00:00:25,500 --> 00:00:29,540
It's not being added to or multiplied or anything like that.

10
00:00:29,670 --> 00:00:35,730
It's simply referring to the current maximum value and then we potentially update Max if we find a larger

11
00:00:35,730 --> 00:00:36,970
value.

12
00:00:36,990 --> 00:00:43,170
So let me show you a quick example here we have grades a list of grades an array if I want to find the

13
00:00:43,170 --> 00:00:47,430
max what I could do is grades done reduce.

14
00:00:47,840 --> 00:00:54,240
I'll save this to a variable called Max grade and we need to pass in our callback which follows the

15
00:00:54,240 --> 00:00:59,970
format of accumulator first and then current and Val next.

16
00:00:59,970 --> 00:01:06,030
But instead of calling this a QM or accumulator I'm just gonna call it Max.

17
00:01:06,030 --> 00:01:12,870
Then I'll add my arrow function syntax and what we need to do is check if the current value is greater

18
00:01:12,960 --> 00:01:14,700
than the current Max.

19
00:01:14,730 --> 00:01:19,700
So the first time this runs will have Max start at eighty seven.

20
00:01:19,710 --> 00:01:25,750
Just like when we summed an array together the first total started as the first element.

21
00:01:25,770 --> 00:01:30,000
So Max will be eighty seven and then current Val will go with let's do.

22
00:01:30,000 --> 00:01:38,760
Curve Val here curve Val we'll start at sixty four and then we do a comparison is current Val greater

23
00:01:38,760 --> 00:01:49,680
than Max if Curveball is greater than Max if it is then we will return curve Val.

24
00:01:49,750 --> 00:01:53,330
And if this is not the case we'll return Max.

25
00:01:53,440 --> 00:01:58,480
So whatever is returned from this function will be used as the next Max.

26
00:01:58,480 --> 00:02:03,240
So the first time through Max is eighty seven current Val is sixty four.

27
00:02:03,340 --> 00:02:04,860
This is not true.

28
00:02:04,960 --> 00:02:06,310
Curve Ball is smaller.

29
00:02:06,610 --> 00:02:08,180
So we return Max.

30
00:02:08,260 --> 00:02:12,640
So if we add our return here as should come at this whole thing out.

31
00:02:12,690 --> 00:02:21,920
So we don't get syntax errors that return is going to be 87 return Max when we return that value max

32
00:02:21,960 --> 00:02:24,060
then uses that previous return.

33
00:02:24,120 --> 00:02:31,380
So we returned eighty seven Max is eighty seven once again but next time curveball moves on to ninety

34
00:02:31,380 --> 00:02:32,640
six.

35
00:02:32,790 --> 00:02:35,050
So now Curveball is 96.

36
00:02:35,250 --> 00:02:40,840
We do the comparison curve ball is now greater than Max 96 is greater than eighty seven.

37
00:02:40,860 --> 00:02:48,690
So we return curve ball which is 96 and that return value is then used to set the new Max Max.

38
00:02:48,690 --> 00:02:56,460
The third time through is going to be 96 and then we're comparing it to curve out which is 92 and I

39
00:02:56,460 --> 00:03:02,880
won't waste your time going through this entire thing but this time through we return ninety six we

40
00:03:02,880 --> 00:03:06,020
just return Max as is because this is not true.

41
00:03:06,300 --> 00:03:12,990
And eventually we go all the way through the array and we find the max we return that Max which eventually

42
00:03:12,990 --> 00:03:15,940
is ninety nine then we compare it to 73.

43
00:03:15,990 --> 00:03:21,810
We keep returning ninety nine ninety nine ninety nine and then reduce returns.

44
00:03:21,810 --> 00:03:24,490
That final return value which is ninety nine.

45
00:03:25,020 --> 00:03:28,380
So let's run it and just make sure I'm not crazy.

46
00:03:28,380 --> 00:03:30,120
Let's take a look at X grade.

47
00:03:30,210 --> 00:03:32,740
It is indeed ninety nine.

48
00:03:32,850 --> 00:03:36,910
We could also rewrite this in a pretty different way.

49
00:03:36,960 --> 00:03:43,140
There's a couple different approaches using reduce fi comment this out instead of returning curveball

50
00:03:43,470 --> 00:03:48,150
or returning Max we can use the built in math dot Max.

51
00:03:48,150 --> 00:03:54,810
So math out Max you pass in two numbers like three and five and it will tell us the maximum number three

52
00:03:54,810 --> 00:03:59,760
and ten is ten nine and one we get nine.

53
00:03:59,940 --> 00:04:08,190
So we could use that and replace this whole line with return math dot max of the current Max and the

54
00:04:08,190 --> 00:04:16,680
current value that we're looking at if we run it Max grade is still ninety nine and we could also write

55
00:04:16,920 --> 00:04:23,260
a mean grade keep this exactly the same although I would rename this to be men.

56
00:04:23,490 --> 00:04:29,220
This represents the minimum value that we are keeping track of as we go through as reduce calls our

57
00:04:29,220 --> 00:04:30,820
callback over and over and over.

58
00:04:30,960 --> 00:04:33,480
It will pass in the current men.

59
00:04:33,480 --> 00:04:42,650
So return math dot men and if you wanted to you could even use an implicit return since we have a single

60
00:04:42,980 --> 00:04:46,830
expression there get rid of the return keyword.

61
00:04:47,420 --> 00:04:48,820
Let's look at mid grade.

62
00:04:48,970 --> 00:04:50,510
Max is not defined.

63
00:04:50,750 --> 00:04:57,090
Need to update that to be men as well so men grade is now sixty four Max is ninety nine.

64
00:04:58,070 --> 00:05:03,400
So same logic just wrote it in a different way here we're doing the math ourselves.

65
00:05:03,450 --> 00:05:05,100
Here the comparison here.

66
00:05:05,240 --> 00:05:07,160
We rely on math dot Max.

67
00:05:07,160 --> 00:05:09,920
But what really matters is the way reduce works.

68
00:05:09,920 --> 00:05:11,820
So we're not summing things together.

69
00:05:11,930 --> 00:05:18,620
We're not multiplying them into a accumulator variable the term accumulator or total kind of makes me

70
00:05:18,620 --> 00:05:23,990
think of something that is growing or getting bigger but that's not what happens here.

71
00:05:24,020 --> 00:05:29,960
This parameter which we're calling Max is simply pointing to one value and then potentially pointing

72
00:05:29,960 --> 00:05:35,930
to a different value instead as soon as we find a new Max it updates to be that Max.

73
00:05:35,930 --> 00:05:40,470
So it's not accumulating so much as just keeping track of the max.

74
00:05:40,550 --> 00:05:46,070
And before we move on to our third video on reduce which I'll show you some even some more interesting

75
00:05:46,130 --> 00:05:47,870
or different use cases for reduce.

76
00:05:47,900 --> 00:05:48,920
That's coming up next.

77
00:05:48,920 --> 00:05:54,110
Before we do that there's one extra argument I haven't mentioned when you use reduce you can actually

78
00:05:54,110 --> 00:05:56,090
pass in an initial starting value.

79
00:05:56,570 --> 00:06:02,560
So after your callback the format would be something dot reduce.

80
00:06:02,570 --> 00:06:10,100
So we'll do a readout reduce you pass in your callback and then initial value.

81
00:06:10,100 --> 00:06:15,430
Now this callback is usually an inline anonymous function so it ends up being kind of long.

82
00:06:15,920 --> 00:06:21,530
But at the end after your function you can add a comma and then an initial value.

83
00:06:21,530 --> 00:06:27,530
So if we write a simple reducer function let's just go back to to adding numbers together.

84
00:06:27,530 --> 00:06:36,950
So we'll do How about 10 20 30 40 and 50 dot produce add in our aero function.

85
00:06:36,950 --> 00:06:42,460
We'll go with some and then let's go with Coeur thou

86
00:06:45,930 --> 00:06:46,620
right now.

87
00:06:46,650 --> 00:06:56,000
If we return some plus curve Val let's store this in a variable concept sum.

88
00:06:56,550 --> 00:06:58,200
Let's look at some.

89
00:06:58,200 --> 00:07:00,720
It's 150 is that correct.

90
00:07:00,720 --> 00:07:01,440
Let's see.

91
00:07:01,470 --> 00:07:02,720
I think that makes sense right.

92
00:07:02,720 --> 00:07:05,160
Fifty one hundred and then 40 plus.

93
00:07:05,190 --> 00:07:05,460
Yeah.

94
00:07:05,460 --> 00:07:11,890
150 when we don't specify an initial value it will just use the first element which we saw a couple

95
00:07:11,890 --> 00:07:13,090
of slides ago here.

96
00:07:13,110 --> 00:07:17,010
No here where the accumulator starts as three.

97
00:07:17,010 --> 00:07:20,690
That's the first element and the current value starts at five.

98
00:07:20,850 --> 00:07:27,660
But you can initialize with a custom value so I can say I want some to start at 0 which is gonna give

99
00:07:27,660 --> 00:07:29,440
us the exact same result.

100
00:07:29,760 --> 00:07:30,540
We start with 0.

101
00:07:30,540 --> 00:07:33,660
Then we add 10 then 20 then 30 then 40 then 50.

102
00:07:33,660 --> 00:07:39,400
That's exactly the same number at the end of the day as starting with 10 20 30 40 50.

103
00:07:39,630 --> 00:07:49,410
But if we instead pass a number like 1000 Here are some will start at 1000 then add 10 then 20 then

104
00:07:49,410 --> 00:07:55,170
30 and we end up with one thousand one hundred and fifty.

105
00:07:55,470 --> 00:08:00,990
So you probably wouldn't do this right here specifically where you want the sum and you want to start

106
00:08:00,990 --> 00:08:01,920
at 1000.

107
00:08:02,250 --> 00:08:07,550
But there are other use cases which we'll see in the next video where you can specify an initial value.

108
00:08:07,680 --> 00:08:08,930
And it won't even be a number.

109
00:08:09,030 --> 00:08:14,220
We'll see that we can specify an object if we're trying to accumulate data into an object and that's

110
00:08:14,220 --> 00:08:15,050
what we're going to see.

111
00:08:15,090 --> 00:08:15,690
Next up.

112
00:08:16,260 --> 00:08:22,140
So to wrap this up we saw that you can use reduce not just to multiply or to some things together but

113
00:08:22,140 --> 00:08:26,600
also to keep track of the max or the men or some piece of data.

114
00:08:26,640 --> 00:08:28,130
It doesn't have to be max or min.

115
00:08:28,230 --> 00:08:33,390
It could be the longest string in an array the highest rated book whatever it is.

116
00:08:33,570 --> 00:08:39,430
As we iterate over each element in an array we are keeping track of some piece of data.

117
00:08:39,660 --> 00:08:45,780
And then the second thing we saw is that we can pass in an initial value as the second argument to reduce.

118
00:08:45,780 --> 00:08:51,180
So this whole thing is the first argument right before that comma and then the second argument is right

119
00:08:51,180 --> 00:08:51,600
there.

120
00:08:51,630 --> 00:08:53,080
All right we're almost done.

121
00:08:53,130 --> 00:08:55,210
We've got some other cool use cases coming up next.
