WEBVTT
1
00:00:00.720 --> 00:00:05.430
In this video we're going to define our deep bounds helper function the right above the timeout I.D.

2
00:00:06.060 --> 00:00:10.230
I'm going to make a new function called DB outs like we just discussed.

3
00:00:10.260 --> 00:00:13.090
This thing is going to take an argument of a function.

4
00:00:13.370 --> 00:00:17.730
I'm going to refer to that as an argument called func short for function.

5
00:00:17.730 --> 00:00:21.820
You could just as easily call it CB for a callback or just callback itself.

6
00:00:22.140 --> 00:00:25.180
But I'm going to call it func than inside up here.

7
00:00:25.210 --> 00:00:30.390
We're going to return a function like so so this function right here.

8
00:00:30.410 --> 00:00:35.960
That is the wrapper as the thing that is going to implement a little shield and guard how often func

9
00:00:36.020 --> 00:00:39.400
can actually be invoked.

10
00:00:39.410 --> 00:00:43.470
So what you have right here this is kind of the hardest part to understand.

11
00:00:43.550 --> 00:00:47.990
All we have to do now to finish up the implementation of dy bounce is essentially take all the same

12
00:00:47.990 --> 00:00:51.690
code we have down here and stick it into the balance.

13
00:00:51.770 --> 00:00:54.000
So let's go through that step by step.

14
00:00:54.070 --> 00:00:58.870
The first thing we're going to do just above the return statement is define let time out.

15
00:00:58.880 --> 00:01:02.230
D then inside of our function.

16
00:01:02.290 --> 00:01:06.350
So this is the function that we are going to be calling possibly many times in a row.

17
00:01:06.550 --> 00:01:11.970
We're going to first check to see if timeout I.D. is defined and if it is we're gonna clear that time

18
00:01:11.970 --> 00:01:14.200
out we're gonna say sorry.

19
00:01:14.200 --> 00:01:17.360
Previous execution turns out you're not going to be actually running.

20
00:01:17.410 --> 00:01:19.990
So we're gonna stop that thing in its tracks.

21
00:01:19.990 --> 00:01:26.860
Then immediately after that we're going to cue up a new execution of our underlying function which we

22
00:01:26.860 --> 00:01:31.360
can do by calling set time out passing at the function to run.

23
00:01:31.360 --> 00:01:33.840
Inside there we will call func like so.

24
00:01:33.840 --> 00:01:38.380
And then as the second argument to set time out we'll put in the delay that we want to have.

25
00:01:38.440 --> 00:01:43.360
Now we're going to make sure that when we call set timeout we take the timer that gets returned and

26
00:01:43.360 --> 00:01:44.980
assign it back to timeout I.D.

27
00:01:48.840 --> 00:01:50.290
And that's pretty much it.

28
00:01:50.370 --> 00:01:55.600
There's just one last thing we have to take care of this function right here that we pass in might need

29
00:01:55.600 --> 00:01:57.660
to receive some kind of arguments.

30
00:01:57.700 --> 00:02:03.520
So we essentially need to make sure that if we ever pass any arguments to this green wrapping function

31
00:02:03.550 --> 00:02:08.350
that we intend to get over to on input we essentially have to take the arguments that are being passed

32
00:02:08.350 --> 00:02:15.190
to the green function and forward them on to on input to do so very simply like a real straightforward

33
00:02:15.190 --> 00:02:19.090
way of doing it would be to say Okay I'm going to take in that first argument right there that I'll

34
00:02:19.090 --> 00:02:24.430
call simply AIG short for argument going to take whatever that argument is I'm gonna pass it through

35
00:02:24.430 --> 00:02:27.270
to that fund when it finally actually gets called.

36
00:02:27.310 --> 00:02:31.490
So that's a very simple and straightforward way of doing that.

37
00:02:31.510 --> 00:02:36.580
However this approach right here it will only work if we are passing in one single argument and that's

38
00:02:36.580 --> 00:02:38.510
possibly not always the case.

39
00:02:38.590 --> 00:02:42.910
So to make sure that this works in all cases we're going to use a little bit more fancier code.

40
00:02:42.910 --> 00:02:46.600
We're going to say dot dot dot args plural.

41
00:02:47.110 --> 00:02:51.680
So this is going to take all the different arguments that are passed to the function then down here

42
00:02:51.680 --> 00:02:59.080
when we call func we're going to do func dot apply with null and args.

43
00:02:59.080 --> 00:03:00.880
Remember what the apply function does.

44
00:03:00.910 --> 00:03:06.630
It essentially says call the function as we normally would and take all the arguments or whatever is

45
00:03:06.730 --> 00:03:11.770
is inside of that array right there and pass them in as separate arguments to the original function

46
00:03:12.790 --> 00:03:18.520
so this right here like the code you see a right here is 100 percent equivalent to if we had instead

47
00:03:19.210 --> 00:03:27.070
make a very quick change here like Arg 1 or 2 ARG 3 and then inside of here called func with ARG 1 or

48
00:03:27.070 --> 00:03:30.230
2 args three hundred percent equivalent.

49
00:03:30.250 --> 00:03:35.620
The only difference is that the applied way is going to automatically keep track of however many arguments

50
00:03:35.650 --> 00:03:37.270
we need to actually pass through.

51
00:03:37.270 --> 00:03:39.210
Only difference okay.

52
00:03:39.280 --> 00:03:42.050
So I can go back to that point right there okay.

53
00:03:42.080 --> 00:03:44.530
So that is the entire D bounce function.

54
00:03:44.530 --> 00:03:49.420
So now we can use this anywhere inside of our code anytime that we need to introduce some rate limiting

55
00:03:49.450 --> 00:03:52.910
essentially on how often a function can be invoked.

56
00:03:52.930 --> 00:03:58.320
So in this case we want to limit how often on input gets invoked.

57
00:03:58.320 --> 00:04:02.410
So let's take out all the time out code we have inside of you right now we're going to instead use our

58
00:04:02.410 --> 00:04:10.480
D bounce function on it so I'll first begin by deleting timeout d I'm gonna delete the if statement

59
00:04:11.740 --> 00:04:18.630
I'm gonna delete the timeout I did with set time out and the closing brackets on their then fix up the

60
00:04:18.630 --> 00:04:24.450
indentation a little bit and now we're back to a very simple plain and easy to read on input function

61
00:04:25.760 --> 00:04:32.860
now we can apply the deviants function right on this thing right here so we can say I want to pass in

62
00:04:34.340 --> 00:04:40.700
that function like so we can imagine that this thing right here is going to be received into D bounce

63
00:04:40.790 --> 00:04:45.820
as funk and we're going to rate limit it essentially on how often it can be invoked.

64
00:04:45.830 --> 00:04:51.950
We're gonna wait until some amount of time has passed before we actually invoke it and then the important

65
00:04:51.950 --> 00:04:56.570
thing to keep in mind here is that we are returning a new function so we can take whatever gets returned

66
00:04:56.570 --> 00:05:00.030
from D balance and still continue to assign it to on input.

67
00:05:00.050 --> 00:05:06.710
Now we just have a version of an input that can only actually be invoked once every second so we can

68
00:05:06.710 --> 00:05:13.020
still continue to pass that directly on through to our event listener like we were doing before just

69
00:05:13.050 --> 00:05:18.270
you know there's one other way that we could have applied a d bounce we could have defined on input

70
00:05:18.300 --> 00:05:24.880
normally like we did before and instead apply D bounce would we pass it off to the event listener so

71
00:05:24.880 --> 00:05:29.810
we could have used D bounce down here as well.

72
00:05:29.810 --> 00:05:30.810
Hundred percent equivalent.

73
00:05:30.830 --> 00:05:31.680
Same exact thing.

74
00:05:31.730 --> 00:05:36.470
It's just a question of where we are actually applying the DB bounce logic we would want to apply it

75
00:05:36.470 --> 00:05:41.030
in this way like when we actually use the function or pass it off somewhere else if we expected to call

76
00:05:41.120 --> 00:05:46.340
on input multiple different times from multiple different places and we only wanted to D bounce it in

77
00:05:46.340 --> 00:05:48.690
some scenarios okay.

78
00:05:48.720 --> 00:05:56.220
Let's save this and go do a quick test I'll flip back over I'm going to search for Avengers I'll wait

79
00:05:56.220 --> 00:06:00.810
for a second and then I see the response appear so looks like it's still working as expected.

80
00:06:01.450 --> 00:06:01.690
Okay.

81
00:06:01.730 --> 00:06:06.110
So one last little little improvement we could add inside of here at present we've got a hard coded

82
00:06:06.110 --> 00:06:11.420
delay of one second and chances are we would want to allow other developers who might be using this

83
00:06:11.420 --> 00:06:14.060
function to adjust that more easily.

84
00:06:14.060 --> 00:06:18.080
So an easy way to do that would be to say that we're going to take in a second argument to our D bounce

85
00:06:18.080 --> 00:06:23.750
function that second argument might be called something like delay and that will be the number of milliseconds

86
00:06:23.770 --> 00:06:24.700
we want to wait.

87
00:06:25.250 --> 00:06:30.240
So I can use that delay argument in place of 1000 right there.

88
00:06:30.400 --> 00:06:34.620
Now whenever I make use of dy bounce I would just have to make sure that I pass in the number of milliseconds

89
00:06:34.620 --> 00:06:35.130
to wait.

90
00:06:35.190 --> 00:06:36.890
Like in this case maybe just half a second.

91
00:06:36.900 --> 00:06:40.510
Like we had before though that would definitely work.

92
00:06:40.540 --> 00:06:43.360
One last very small optimization as well.

93
00:06:43.540 --> 00:06:48.940
We could say that maybe we just want to have like a default delay amount and to do so we can use a defaulted

94
00:06:48.940 --> 00:06:53.590
argument right up here so we could say something like equals 1000.

95
00:06:53.600 --> 00:06:57.940
So now that means that if we ever make use of D balance without passing in that second argument we're

96
00:06:57.940 --> 00:07:05.870
going to get a default delay value of 1000 milliseconds but I'm going to go with five hundred because

97
00:07:05.870 --> 00:07:10.520
I felt like that was pretty responsive when we tested out inside the browser.

98
00:07:10.580 --> 00:07:11.260
Let's save that.

99
00:07:11.300 --> 00:07:16.860
One last quick test here I'll search for Avengers and looks like we're good to go.

100
00:07:16.970 --> 00:07:17.660
Okay so that's it.

101
00:07:17.660 --> 00:07:19.610
That is the D balance function from scratch.

102
00:07:19.610 --> 00:07:21.440
Now I want to save really quickly here.

103
00:07:21.440 --> 00:07:25.570
If this is really confusing and chances are it is don't sweat it.

104
00:07:25.640 --> 00:07:29.520
Honestly if you're going through this course right now and you're having a hard time with this function

105
00:07:29.600 --> 00:07:32.810
I honestly really expect you to have a hard time with this.

106
00:07:32.810 --> 00:07:36.550
I really really do expect this to be some challenging stuff.

107
00:07:36.560 --> 00:07:42.140
The reason I'm showing it to you is that seeing hard code like this is how you get to be a better engineer.

108
00:07:42.230 --> 00:07:47.470
If I just continue to show you a bunch of like baby easy code that's really easy to understand.

109
00:07:47.570 --> 00:07:49.850
You're never going to be a better engineer.

110
00:07:49.850 --> 00:07:51.710
You have to look at the harder stuff like this.

111
00:07:51.740 --> 00:07:54.190
It is what is going to make you into a better engineer.

112
00:07:54.200 --> 00:07:55.440
So if it is hard.

113
00:07:55.580 --> 00:07:56.160
Good.

114
00:07:56.210 --> 00:07:57.120
That is a good thing.

115
00:07:57.140 --> 00:07:58.540
You want it to be hard.

116
00:07:58.610 --> 00:07:59.510
If it's easy.

117
00:07:59.510 --> 00:08:00.850
Hey congratulations.

118
00:08:00.860 --> 00:08:02.460
You understand what's going on.

119
00:08:02.480 --> 00:08:06.560
So either way don't feel bad if this is some hard stuff to understand.

120
00:08:06.560 --> 00:08:10.290
I really really do expect it to be challenging okay.

121
00:08:10.340 --> 00:08:11.160
So it's all it's great.

122
00:08:11.160 --> 00:08:15.420
We've got a great working D bounce function so let's take a pause right here and continue working on

123
00:08:15.420 --> 00:08:16.470
our app in the next video.
