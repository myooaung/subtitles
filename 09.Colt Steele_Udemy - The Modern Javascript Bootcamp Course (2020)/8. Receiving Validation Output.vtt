WEBVTT
1
00:00:00.790 --> 00:00:01.050
All right.

2
00:00:01.060 --> 00:00:05.320
Now that we understand the difference between sanitizing and validation let's add in some code to our

3
00:00:05.320 --> 00:00:10.020
post request root handler that deals with sign up attempts inside of here.

4
00:00:10.030 --> 00:00:13.700
I'm going to add in some whitespace qualities.

5
00:00:13.790 --> 00:00:18.250
Chuckles I'm going to remove the is e-mail right there.

6
00:00:18.270 --> 00:00:21.930
We're going to go through each of these different values and figure out what different sanitization

7
00:00:22.320 --> 00:00:24.660
and validation steps we need to add in.

8
00:00:24.900 --> 00:00:29.940
One quick thing what I've mentioned here is that usually we're going to do sanitization and then validation.

9
00:00:29.940 --> 00:00:34.580
So first we check to see or excuse me first we're going to normalize and trim an e-mail.

10
00:00:34.620 --> 00:00:40.420
Then we will validate that it actually is an e-mail after that so uncheck of email right here.

11
00:00:40.460 --> 00:00:45.350
I'm going to chain on trim to make sure that we remove any leading or trailing whitespace.

12
00:00:45.410 --> 00:00:56.170
I'll then call after that number we just saw in sanitizers normalize email so I'll do normalize email.

13
00:00:56.950 --> 00:01:01.130
And then finally I'm going to validate this and make sure that it actually is something that looks like

14
00:01:01.130 --> 00:01:01.900
an email.

15
00:01:01.970 --> 00:01:04.490
So I'll say dot is email

16
00:01:08.030 --> 00:01:13.120
it's that one is not so bad we'll move on to password next.

17
00:01:13.140 --> 00:01:20.090
So the password we're going to also trim and then to validate this thing I'm going to make sure that

18
00:01:20.090 --> 00:01:22.960
it has a minimum and a maximum length.

19
00:01:23.210 --> 00:01:29.060
So it's make sure that as a minimum and maximum length of call is length and in passing an options object

20
00:01:29.420 --> 00:01:32.030
with a min of four and a max of 20.

21
00:01:32.130 --> 00:01:36.890
So that's going to make sure that the password provided has at least four characters and at most 20

22
00:01:38.000 --> 00:01:41.960
if you want to take a look at the documentation to better understand that function right there we can

23
00:01:41.960 --> 00:01:50.070
go back to this validators J.S. documentation page so again validator J.S. we can go down to the validator

24
00:01:50.070 --> 00:01:55.060
section and then find is length inside of here

25
00:01:58.000 --> 00:02:00.280
so eventually I will find it.

26
00:02:00.310 --> 00:02:00.820
There we go.

27
00:02:00.820 --> 00:02:02.130
Is length right there.

28
00:02:02.230 --> 00:02:07.690
You'll notice that the second argument is an optional options object and inside there we can provide

29
00:02:07.690 --> 00:02:11.420
an object that has a min and max property.

30
00:02:11.430 --> 00:02:14.510
Now I know that I just said that there is a second argument of options.

31
00:02:14.520 --> 00:02:19.980
Again remember that the express validator library that we're using is wrapping up all these functions.

32
00:02:19.980 --> 00:02:24.720
And so we just ignore that first argument right there and we only have to pass in the second argument

33
00:02:24.750 --> 00:02:31.610
in every case where everything you see inside of here now we can repeat that same process for password

34
00:02:31.610 --> 00:02:42.600
confirmation as well so dot trim that is length the men of four and a max of 20 okay.

35
00:02:42.640 --> 00:02:44.090
That's a good place to get started.

36
00:02:44.140 --> 00:02:46.990
There are some additional checks we're going to add in here in just a moment.

37
00:02:46.990 --> 00:02:51.070
Well let's first figure out how we actually kind of consume these validation messages.

38
00:02:51.160 --> 00:02:54.610
In other words how do we communicate them back to ourselves and figure out whether or not what the user

39
00:02:54.610 --> 00:03:01.630
just entered is making any sense whatsoever so for that we're going to require in a another function

40
00:03:01.660 --> 00:03:06.720
from the Express validator function or library at the top here's check.

41
00:03:06.910 --> 00:03:09.880
We're also going to require in validation results

42
00:03:14.170 --> 00:03:20.630
then back down inside of our post request handler for sign up right at the very start of our callback

43
00:03:20.630 --> 00:03:21.540
function.

44
00:03:21.820 --> 00:03:30.430
I'm going to add in const ears is validation results and I'll pass in the request and then for right

45
00:03:30.430 --> 00:03:34.370
now I'll do a console log of that is object.

46
00:03:34.550 --> 00:03:36.000
We're just to see what we get back from this.

47
00:03:36.020 --> 00:03:37.810
Note figure out how to actually interact with it.

48
00:03:38.900 --> 00:03:44.220
The one thing one mentioned here is that when we do all this checking stuff the Express validator library

49
00:03:44.340 --> 00:03:50.220
is going to attach the results of all this validation to the request object that is going to eventually

50
00:03:50.220 --> 00:03:57.150
flow into our request handler so in order to get access to all that validation logic or the output of

51
00:03:57.150 --> 00:03:59.790
it we are passing in the Rec object.

52
00:03:59.940 --> 00:04:07.460
That is how information is being communicated from these steps into our actual function okay.

53
00:04:07.510 --> 00:04:10.740
Let's say this go back over to our browser.

54
00:04:10.980 --> 00:04:17.070
I'm gonna go to my sign up form I'm gonna enter in something that is definitely non email I can enter

55
00:04:17.100 --> 00:04:22.770
a password that is one character and then I will enter in a password confirmation.

56
00:04:22.770 --> 00:04:26.040
That is definitely longer than 20 characters.

57
00:04:26.140 --> 00:04:31.620
So now I am validate or excuse me I am violating a validation rule for all three different values here

58
00:04:32.780 --> 00:04:35.150
so I'll click on sign up.

59
00:04:35.200 --> 00:04:38.000
Of course we still see our original validation appear.

60
00:04:38.020 --> 00:04:43.340
Let's take a look at our terminal and see what we ended up console logging so if I go to my terminal

61
00:04:44.090 --> 00:04:48.740
we'll see a whole bunch about put right here telling us exactly why the information that the user just

62
00:04:48.740 --> 00:04:50.510
gave us is not at all correct.

63
00:04:51.610 --> 00:04:59.300
So we can see that we've got errors that is going to be an array of objects each object corresponds

64
00:04:59.300 --> 00:05:04.160
to one different property or parameter that we passed into that validation attempt.

65
00:05:04.190 --> 00:05:09.690
So this is the validation error that occurred while we were trying to validate email here's the value

66
00:05:09.690 --> 00:05:10.780
we got.

67
00:05:10.980 --> 00:05:13.020
And here is the message that we ended up with.

68
00:05:13.020 --> 00:05:17.920
So the message that we got was hey this is just an invalid value.

69
00:05:17.920 --> 00:05:20.550
Next up is the password.

70
00:05:20.650 --> 00:05:24.120
It's an invalid value doesn't really tell us anything more besides that.

71
00:05:24.190 --> 00:05:29.530
But you and I know that it is an invalid value because it is not long enough and we can see the same

72
00:05:29.530 --> 00:05:34.020
thing with password confirmation down here as well.

73
00:05:34.040 --> 00:05:41.440
So now we just need to take this array of errors and somehow display each of these messages to the user.

74
00:05:41.480 --> 00:05:45.710
In addition it would be kind of nice if we figured out how to display a better message to the user than

75
00:05:45.710 --> 00:05:47.570
simply invalid value.

76
00:05:47.570 --> 00:05:52.520
In the case of email I think that telling the user hey this is an invalid e-mail makes sense but in

77
00:05:52.520 --> 00:05:55.640
the case of password and password confirmation.

78
00:05:55.640 --> 00:06:00.770
The reason these are invalid is that the password is not long enough or not or too long in this case

79
00:06:02.020 --> 00:06:06.580
so it'd be really nice to provide a message in both these cases that really clarifies that for the user

80
00:06:06.670 --> 00:06:12.190
and say hey the password must be between four and 20 characters as opposed to just saying invalid value

81
00:06:12.490 --> 00:06:15.630
because that right now doesn't really tell the user exactly what is going wrong.

82
00:06:17.880 --> 00:06:22.130
OK so now that we've seen how to actually access this information it's clear that we need to figure

83
00:06:22.130 --> 00:06:25.430
out how to provide some better messages in some of these cases.

84
00:06:25.430 --> 00:06:29.600
In addition we need to figure out how to actually take this information and communicate it back to the

85
00:06:29.600 --> 00:06:31.970
user next to our form.

86
00:06:32.000 --> 00:06:35.270
Let's take a pause right here and come back the next video we're going to first focus on how we can

87
00:06:35.270 --> 00:06:38.930
improve some of the messaging around these different validation errors.
