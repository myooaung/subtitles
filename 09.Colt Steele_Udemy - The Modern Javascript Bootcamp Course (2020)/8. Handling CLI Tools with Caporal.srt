1
00:00:01,040 --> 00:00:05,930
All right now we've got Cabral in there and he a really long discussion behind us about require statements.

2
00:00:05,940 --> 00:00:09,770
Let's go back over the documentation and get a better idea of how to use this library.

3
00:00:09,890 --> 00:00:13,160
Normally I would love to show you a diagram about how to use the library or whatnot.

4
00:00:13,160 --> 00:00:17,320
But in this case capital has a really specific set of instructions on how to use it.

5
00:00:17,330 --> 00:00:21,490
And so honestly it is easiest to just take a look at the documentation here.

6
00:00:21,540 --> 00:00:26,810
So when we require an Cabral we're going to first chain on a couple of different methods to configure

7
00:00:26,870 --> 00:00:29,990
the command line tool that we are trying to create.

8
00:00:30,010 --> 00:00:35,320
The first thing we're going to do is chain on a method call of version the version method call right

9
00:00:35,350 --> 00:00:37,230
here doesn't really do a whole lot.

10
00:00:37,240 --> 00:00:42,600
It really just sets a flag that's going to print up later on for our users benefit specifically in the

11
00:00:42,600 --> 00:00:43,300
screenshot.

12
00:00:43,300 --> 00:00:47,160
Down here you'll see that it says Pizza dot GSM and 1 point 0 point.

13
00:00:47,500 --> 00:00:49,230
That's really what calling version does.

14
00:00:49,240 --> 00:00:52,420
So it's not really something that adds any behavior to the program.

15
00:00:52,420 --> 00:00:55,570
It just helps tell our users who are using this help screen right here.

16
00:00:55,570 --> 00:00:56,670
Exactly what is going on

17
00:00:59,850 --> 00:01:00,470
after that.

18
00:01:00,480 --> 00:01:04,140
We're going to chain on a couple of different method calls.

19
00:01:04,140 --> 00:01:10,320
So the first one that we can chain on is command that is used only if we want to have some kind of sub

20
00:01:10,320 --> 00:01:12,600
command inside of our command line tool.

21
00:01:12,600 --> 00:01:17,490
So for example if our command line tool did many different things like maybe we could have it watch

22
00:01:17,490 --> 00:01:23,880
a file and run it or maybe we can have it automatically delete a file whenever some other file changes

23
00:01:23,880 --> 00:01:25,220
or something like that.

24
00:01:25,300 --> 00:01:30,460
If those were two completely different tests we would wire those up as sub commands inside of our program.

25
00:01:30,630 --> 00:01:33,690
And that is the purpose of this command statement right here.

26
00:01:33,690 --> 00:01:41,860
It defines a sub command after that we can also cheat on dart argument calls not argument calls specify

27
00:01:41,860 --> 00:01:44,350
an argument that a command is going to take.

28
00:01:44,680 --> 00:01:50,500
We can specify them in one of two different ways we can either provide argument with a argument right

29
00:01:50,500 --> 00:01:58,030
there of a string inside of some angle brackets if we do so that means that we require the deploy command

30
00:01:58,120 --> 00:02:05,120
to be called with this argument called at if we tried to call this program without providing that argument.

31
00:02:05,700 --> 00:02:10,730
After all will automatically display an error and say Hey sorry but you need to provide this command

32
00:02:10,970 --> 00:02:17,700
person to this argument if we instead use square brackets that means that this argument is optional

33
00:02:17,820 --> 00:02:24,050
and we don't have to provide it if we don't want to we can also chain on a dot option call which is

34
00:02:24,050 --> 00:02:29,450
going to you to find some kind of option flag that can be passed along and just like the angle brackets

35
00:02:29,480 --> 00:02:35,300
and square brackets right here angled brackets means you must provide this thing if you have square

36
00:02:35,300 --> 00:02:37,490
brackets that means it is an optional option

37
00:02:40,340 --> 00:02:44,750
only when we are all done specifying the different options and arguments and whatnot that our program

38
00:02:44,750 --> 00:02:51,740
is going to have we chain on dot action dot action is essentially going to say OK once the user calls

39
00:02:51,740 --> 00:02:56,180
our program and provides all these different commands and arguments we're going to run that function

40
00:02:56,180 --> 00:03:01,130
right there we're going to receive the arguments that we're provided and the different options that

41
00:03:01,130 --> 00:03:05,540
we're provided and then inside of here we're going to essentially have our actual implementation for

42
00:03:05,540 --> 00:03:12,550
our program last thing to understand is that none of this stuff actually gets used or executed in any

43
00:03:12,550 --> 00:03:19,930
way until we call frog or program not pass and pass in that array of arguments were provided to our

44
00:03:20,020 --> 00:03:26,080
our actual CLIA program when it was started up by the user that's pretty much what is going on here.

45
00:03:26,100 --> 00:03:32,460
So with all that mind let's go back over to our Ed right after our require statement.

46
00:03:33,210 --> 00:03:39,660
I'm going to take my program while chain on a version called because this version doesn't really matter

47
00:03:39,660 --> 00:03:47,380
that much as I just mentioned we'll just use a version of 0 0 1 and they're going to specify an argument

48
00:03:47,440 --> 00:03:52,780
that I expect our program to be invoked with it's going to be an optional argument it's all put in square

49
00:03:52,780 --> 00:03:58,970
brackets and I'm going to call the argument file name the documentation doesn't really say it in what

50
00:03:58,970 --> 00:03:59,950
we're just looking at right here.

51
00:03:59,980 --> 00:04:04,590
But the second argument right here is kind of documentation for our users.

52
00:04:04,640 --> 00:04:08,840
So if a user ever tries to print out some help about what these different arguments and commands are

53
00:04:08,840 --> 00:04:12,170
doing the user is going to see that second string right there.

54
00:04:12,860 --> 00:04:17,790
So I can make sure I put in a second string to tell my users exactly what this argument is doing.

55
00:04:17,930 --> 00:04:22,940
It's going to put in a string that says name of a file to execute

56
00:04:26,440 --> 00:04:27,270
now in our case.

57
00:04:27,340 --> 00:04:32,470
We don't really need any other arguments options some commands or anything like that just yet.

58
00:04:32,470 --> 00:04:39,180
So we can then immediately call action passing a function to invoke and again this thing is going to

59
00:04:39,180 --> 00:04:44,520
receive a first argument of ARGs and that's going to be an object that has all the different arguments

60
00:04:44,520 --> 00:04:46,080
that were provided.

61
00:04:46,100 --> 00:04:52,480
So right now we'll just do a console log of ARGs one thing you might be surprised about is the fact

62
00:04:52,480 --> 00:04:55,810
that I said that the file name was going to be optional is remembered.

63
00:04:55,810 --> 00:04:58,900
The entire point of our program is to run a file.

64
00:04:58,900 --> 00:04:59,370
Right.

65
00:04:59,380 --> 00:05:02,540
So how can we make the name of the file optional.

66
00:05:02,550 --> 00:05:06,970
Well the thing that we're going to do here is say that if a user does not provide the name of a file

67
00:05:06,970 --> 00:05:13,000
to run we're going to check and see if there is an index J.S. file in the directory that they're running

68
00:05:13,000 --> 00:05:14,600
this tool from.

69
00:05:14,710 --> 00:05:19,380
If there isn't indexed not just file then we will just run that by default.

70
00:05:19,450 --> 00:05:24,310
Otherwise if there is not an index that j just file and there is no file name provided by the user then

71
00:05:24,310 --> 00:05:27,960
we'll show an error message okay.

72
00:05:28,010 --> 00:05:35,150
Then after we define our program remember we finally have to do program DOT pass and specify process

73
00:05:35,180 --> 00:05:44,430
dot GV like so now before we test this I got to comment out everything else inside of your just so all

74
00:05:44,430 --> 00:05:49,750
those extra console logs don't kind of muddy up the screen so I'm going to save this.

75
00:05:49,860 --> 00:05:52,390
I'm gonna go back over my journal

76
00:05:55,970 --> 00:05:59,290
and I will run watch it needs to and I do.

77
00:05:59,290 --> 00:06:01,520
I see just a console log of an object.

78
00:06:01,580 --> 00:06:06,980
The reason for that is that in that invocation we did not provide an argument for file name right here.

79
00:06:07,040 --> 00:06:11,450
So usually that first argument is gonna be an object with all the different arguments provided we did

80
00:06:11,450 --> 00:06:12,710
not provide one.

81
00:06:12,710 --> 00:06:20,450
So file name was just empty or semi the args object was just empty but if we do watch it would say file

82
00:06:20,450 --> 00:06:26,700
to run dot J.S. will then see a console log of an object that is file name and there's the argument

83
00:06:26,700 --> 00:06:28,370
that we provided right there.

84
00:06:28,370 --> 00:06:34,730
Now here's the real benefit in my opinion to using this capital stuff we can do right away watch it

85
00:06:35,000 --> 00:06:41,510
Dash H that's going to print up a bunch of help that gets automatically generated by the capital tool

86
00:06:42,530 --> 00:06:44,820
when I run capital dash H.

87
00:06:44,810 --> 00:06:50,000
We're going to display the name of the program the version and then some information about how to actually

88
00:06:50,000 --> 00:06:50,910
call this thing.

89
00:06:50,940 --> 00:06:56,000
This means if a user wants to use our program they have to call watch it with some file name optionally

90
00:06:56,660 --> 00:06:58,880
if they want to know what that file name is used for.

91
00:06:58,940 --> 00:07:02,290
Well it's gonna be the name of a file to execute.

92
00:07:02,340 --> 00:07:06,310
There are also some other global options that can be used here that get specified.

93
00:07:06,330 --> 00:07:10,230
These are all added in by capital automatically.

94
00:07:10,260 --> 00:07:11,390
This all looks pretty good.

95
00:07:11,540 --> 00:07:12,530
So quick pause right here.

96
00:07:12,540 --> 00:07:17,610
When we come back the next video we're gonna start to move all of our file watching code into that action

97
00:07:17,610 --> 00:07:22,500
statement and then start to start up the user's program and actually get it running so quick pause.

98
00:07:22,500 --> 00:07:23,670
I'll see you in just a minute.
