1
00:00:00,150 --> 00:00:00,480
All right.

2
00:00:00,480 --> 00:00:01,380
Welcome back.

3
00:00:01,380 --> 00:00:04,700
So we saw why callbacks are so important in JavaScript.

4
00:00:04,710 --> 00:00:09,150
We passed a callback in to certain functions that the browser takes over.

5
00:00:09,210 --> 00:00:12,210
Things like set time out set interval.

6
00:00:12,270 --> 00:00:16,260
Also when you make requests different ways of making requests we haven't really covered yet.

7
00:00:16,290 --> 00:00:22,260
The browser takes care of that and we pass in a callback but callbacks are not perfect.

8
00:00:22,380 --> 00:00:25,320
They can get messy very quickly which is what I want to show you here.

9
00:00:25,560 --> 00:00:29,670
I'm going to show you a way of doing something with callbacks and then we'll see how to refactor it

10
00:00:29,670 --> 00:00:30,900
using promises.

11
00:00:30,900 --> 00:00:34,290
So this is finally the ramp up to promises.

12
00:00:34,350 --> 00:00:40,020
Let's write a simple function that will take a number of pixels and move our button over that number

13
00:00:40,020 --> 00:00:43,370
of pixels and it will do it after a delay.

14
00:00:43,410 --> 00:00:47,310
So we could do like after a second move and after another second move it and so on.

15
00:00:47,940 --> 00:00:49,610
So I want to start by selecting the button.

16
00:00:49,620 --> 00:00:51,110
It's the only button on the page.

17
00:00:51,240 --> 00:00:59,760
So const PETN equals document that query selector button then all we're going to do is change button

18
00:00:59,810 --> 00:01:00,560
that style.

19
00:01:00,570 --> 00:01:02,620
I'll do it with transform this time.

20
00:01:02,640 --> 00:01:08,640
I think a couple at some point in the course I did button that styled up left and top which is not really

21
00:01:08,640 --> 00:01:15,010
the most performance way of changing position or moving an element around transform it's better.

22
00:01:15,180 --> 00:01:18,800
And if you're curious why I have a YouTube video you can check out on it.

23
00:01:18,840 --> 00:01:23,460
It's called the only to see us as properties you should animate the short story is that when you transform

24
00:01:23,460 --> 00:01:27,650
something it happens much later in the browser's rendering process.

25
00:01:27,660 --> 00:01:33,720
It's much easier for the browser to move something via transform rather than changing a left which causes

26
00:01:33,990 --> 00:01:36,430
a render of a lot of different things anyway.

27
00:01:36,630 --> 00:01:39,000
So I'm just going to do this we'll move it left to right.

28
00:01:39,000 --> 00:01:45,800
So I'll just do translate X in passing a number like 100 pixels and let's just make sure it's moving.

29
00:01:46,040 --> 00:01:46,800
Okay.

30
00:01:46,890 --> 00:01:49,770
So now I want to do this instead of a set time out.

31
00:01:49,800 --> 00:01:52,470
So it only happens after let's say one second.

32
00:01:52,470 --> 00:02:00,690
So set time out and then I'll pass in a function just do an arrow function here my duration will be

33
00:02:00,690 --> 00:02:04,820
1000 milliseconds and I'll move this right there.

34
00:02:04,830 --> 00:02:09,210
So now I refresh it should start on the left and then one second later it moves.

35
00:02:09,240 --> 00:02:10,650
That works great.

36
00:02:10,650 --> 00:02:16,590
Now if I wanted to wait another second and then move again maybe 200 pixels this time or some other

37
00:02:16,590 --> 00:02:22,490
number I would need to ness that function call the set timeout inside of this set timeout.

38
00:02:23,130 --> 00:02:25,310
Otherwise I just have a second set time.

39
00:02:25,410 --> 00:02:30,610
I mean I guess you could do this and just keep track of a number of seconds but this is not ideal.

40
00:02:30,620 --> 00:02:34,410
Oh we'll see an expanded version of what we're doing now where this wouldn't work.

41
00:02:34,470 --> 00:02:39,540
But yes technically if you want this to run after one second in this to run a second later you could

42
00:02:39,540 --> 00:02:42,690
do two thousand milliseconds but we're not going to do that.

43
00:02:42,840 --> 00:02:45,910
So in here we add another set time out.

44
00:02:45,990 --> 00:02:53,730
Same thing we add in our callback our duration let's do 1000 seconds or let's do two thousand milliseconds

45
00:02:53,760 --> 00:03:01,170
so two seconds and then the same line I'll just duplicate it and I need to change what we're translating

46
00:03:01,170 --> 00:03:05,580
it to let's do 200 pixels so I'll refresh.

47
00:03:05,880 --> 00:03:12,300
The second it moves another two seconds it should move again cool and I could keep duplicating this

48
00:03:12,330 --> 00:03:17,490
I just have to keep nesting if I want to make sure that this is happening after this happens.

49
00:03:17,940 --> 00:03:21,410
So we have our first set time out for 1000 milliseconds.

50
00:03:21,570 --> 00:03:22,470
It does this.

51
00:03:22,470 --> 00:03:27,270
And then as soon as that happens it sets another time out for two thousand milliseconds and then again

52
00:03:27,660 --> 00:03:32,070
let's just do 1000 for each of these let's translate 300 pixels.

53
00:03:32,220 --> 00:03:37,740
This isn't so bad because it's such a short thing that we're doing but it is a lot of nesting to achieve

54
00:03:37,740 --> 00:03:38,100
this.

55
00:03:38,100 --> 00:03:41,490
Let's go five levels deep.

56
00:03:41,550 --> 00:03:41,790
OK.

57
00:03:41,790 --> 00:03:45,860
So now I have five different set time outs all of them one second long.

58
00:03:45,900 --> 00:03:46,490
Let's go.

59
00:03:46,500 --> 00:03:50,550
One two three four hundred pixels and 500 pixels.

60
00:03:50,550 --> 00:03:52,450
Let's check it out.

61
00:03:52,510 --> 00:03:57,130
It should move across the screen 100 pixels at a time one second at a time.

62
00:03:57,810 --> 00:03:58,330
OK.

63
00:03:58,830 --> 00:04:01,260
So this is relatively readable.

64
00:04:01,260 --> 00:04:02,430
That's not too bad.

65
00:04:02,430 --> 00:04:06,270
It's kind of obnoxious to have to keep nesting them but that's not.

66
00:04:06,270 --> 00:04:07,890
This is not as bad as it will get.

67
00:04:07,890 --> 00:04:09,330
Let's put it that way.

68
00:04:09,360 --> 00:04:13,730
So if I want to rewrite this as a function I'm doing kind of the same thing every time.

69
00:04:14,010 --> 00:04:19,500
If I want to make this a separate function I could call what I need to do is first define my function

70
00:04:19,590 --> 00:04:22,040
and come up with a reasonable name.

71
00:04:22,110 --> 00:04:25,350
Let's call this move left.

72
00:04:25,840 --> 00:04:27,090
No move right.

73
00:04:27,120 --> 00:04:31,610
I would just move X because then we could pass in a negative number to go the other direction.

74
00:04:31,800 --> 00:04:40,590
We'll do element the thing that is moving so our button in amounts and then a delay and then we'll do

75
00:04:40,590 --> 00:04:47,140
a set time out and then in here our function will put the delay right here.

76
00:04:47,310 --> 00:04:50,070
So that will be some number we pass in like 1000.

77
00:04:50,280 --> 00:04:56,940
And then instead of button that style about transform it will be element that style dot transform equals

78
00:04:57,150 --> 00:05:06,150
and then a string will do a string template literal translate X and then I'll put in my amount that

79
00:05:06,150 --> 00:05:10,980
was passed in and then follow it by pixels.

80
00:05:10,980 --> 00:05:19,340
Just like that so if I come at this out and I just call this one time move x of button let's go with

81
00:05:19,550 --> 00:05:28,660
six hundred pixels of six hundred and after two seconds let's see if it works so two seconds go by okay.

82
00:05:28,760 --> 00:05:30,240
It does move.

83
00:05:30,350 --> 00:05:31,370
Now here's the tricky part.

84
00:05:31,430 --> 00:05:38,060
If I want to then replicate this behavior where we could have something happen after this or after the

85
00:05:38,060 --> 00:05:43,690
delay immediately after we change the transform I want another set time out.

86
00:05:43,730 --> 00:05:46,730
It doesn't really help me if I just manually set it here.

87
00:05:46,730 --> 00:05:50,530
What we would do instead is pass in a callback.

88
00:05:50,600 --> 00:05:57,080
So we would write our function to accept a callback we could call it callback and then all we do is

89
00:05:57,200 --> 00:06:00,760
execute that callback function inside the set time out.

90
00:06:01,400 --> 00:06:03,870
After we do this we call the callback.

91
00:06:04,040 --> 00:06:05,780
Same idea that we have here.

92
00:06:05,870 --> 00:06:09,170
But now what we need to do is pass in a callback.

93
00:06:09,290 --> 00:06:18,050
So we would pass in a function we'll do an arrow function ups like this and we'll just call move X again

94
00:06:18,470 --> 00:06:26,660
button let's go 100 pixels this time we'll replicate the same behavior so one second another 200 pixels

95
00:06:27,320 --> 00:06:32,330
after one second let's just see if that works we will run into an issue with what I have here because

96
00:06:32,330 --> 00:06:38,340
I haven't passed in a callback so we could do something simple like if callback.

97
00:06:39,320 --> 00:06:40,720
Okay.

98
00:06:41,000 --> 00:06:41,900
Let's see what happens.

99
00:06:45,670 --> 00:06:47,210
It appears to work right

100
00:06:50,570 --> 00:06:56,330
so we did one hundred pixels and then 200 pixels after a second and we could pass in yet another callback

101
00:06:56,360 --> 00:07:01,850
if we want to continue to change changes so move X button.

102
00:07:02,120 --> 00:07:10,320
Let's go for 300 pixels one second and let's actually do four or five levels button.

103
00:07:10,580 --> 00:07:15,030
And then four hundred pixels 1000 milliseconds.

104
00:07:15,080 --> 00:07:23,360
And one last one move x button 500 pixels 1000 milliseconds.

105
00:07:23,360 --> 00:07:26,820
No callback.

106
00:07:26,880 --> 00:07:27,930
Here we go.

107
00:07:27,930 --> 00:07:28,500
There we go.

108
00:07:28,500 --> 00:07:31,970
Keep moving awesome.

109
00:07:31,970 --> 00:07:32,890
OK.

110
00:07:32,900 --> 00:07:39,860
So we wrote a function here that accepts that callback and a delay it does something after that delay

111
00:07:39,890 --> 00:07:44,410
inside the set timeout that delay is variable right now they're all the same.

112
00:07:44,450 --> 00:07:49,520
And then it executes a callback if we pass one it in our callbacks or these arrow functions.

113
00:07:49,580 --> 00:07:51,190
So this is one callback.

114
00:07:51,200 --> 00:07:58,610
This entire thing here from here from this curly brace to this curly brace No this curly brace to this

115
00:07:58,610 --> 00:07:59,580
curly brace.

116
00:07:59,810 --> 00:08:02,960
That is the callback for this first move x.

117
00:08:03,020 --> 00:08:09,290
So this entire thing from this yellow curly brace down to here is the first callback for move X the

118
00:08:09,290 --> 00:08:14,540
first time we call move X that function call those prints go all the way down.

119
00:08:14,610 --> 00:08:14,890
Right.

120
00:08:14,900 --> 00:08:19,240
This is our initial function call and then we have our callback in there.

121
00:08:19,550 --> 00:08:24,390
And then that itself calls move X and then that has a massive callback.

122
00:08:24,530 --> 00:08:29,720
All this nesting it's still not that horrible because we're just doing one thing each time you can look

123
00:08:29,720 --> 00:08:33,410
at it it makes it clear you're doing this then this then this.

124
00:08:33,410 --> 00:08:36,220
But here's where it's going to get trickier.

125
00:08:36,260 --> 00:08:43,640
Let's rewrite our function so that we check if the element is going to go off the screen and if it does

126
00:08:43,640 --> 00:08:49,910
go off the screen we can do something else maybe reverse it or just cancel that log or just stop.

127
00:08:49,910 --> 00:08:51,260
We won't do anything.

128
00:08:51,260 --> 00:08:56,870
And this is a really common pattern when we're working with asynchronous code often we'll send let's

129
00:08:56,870 --> 00:09:01,520
say in HDP request the term is request for a reason.

130
00:09:01,520 --> 00:09:04,550
We're attempting something we're asking for a web page.

131
00:09:04,550 --> 00:09:08,590
We may get some successful response or the server might be down.

132
00:09:08,600 --> 00:09:13,190
We might have an invalid you URL your internet might be down at home or on the computer.

133
00:09:13,190 --> 00:09:15,380
So it's a request and that request.

134
00:09:15,410 --> 00:09:20,350
Let's just say this is the name of a function to make a request hopes to complete there.

135
00:09:20,350 --> 00:09:27,060
That request will accept two callbacks a success callback and a failure callback.

136
00:09:27,170 --> 00:09:30,530
So you can have two different branches if the request works out.

137
00:09:30,590 --> 00:09:34,040
Here's the code that runs if the request does not work.

138
00:09:34,040 --> 00:09:38,420
Here is the code that runs the code to handle an error for example.

139
00:09:38,420 --> 00:09:43,160
So why don't we mimic that functionality here for move X instead of just moving.

140
00:09:43,220 --> 00:09:44,290
No matter what.

141
00:09:44,420 --> 00:09:48,090
Let's check if we are going to move off the screen.

142
00:09:48,500 --> 00:09:50,740
And if that's the case we won't do this.

143
00:09:50,740 --> 00:09:51,920
We won't call the callback.

144
00:09:51,920 --> 00:09:53,570
We won't move further.

145
00:09:53,570 --> 00:09:54,830
We'll do something else.

146
00:09:54,830 --> 00:09:59,440
We'll pass in a potential fallback or an error callback.

147
00:09:59,510 --> 00:10:04,640
So I'm going to rewrite this here the logic to check if we're moving off the screen is not that important

148
00:10:04,640 --> 00:10:05,990
to what I'm showing you here.

149
00:10:06,050 --> 00:10:13,760
But basically we want to get the width of the screen document up body dot client width and we'll save

150
00:10:13,760 --> 00:10:21,500
this to a variable let's call it const boundary body boundary or something.

151
00:10:21,500 --> 00:10:24,600
Then I'll show you a new method we haven't seen before.

152
00:10:24,650 --> 00:10:29,270
There is something called Get bounding client rect.

153
00:10:31,190 --> 00:10:32,990
Let's test it out first in the browser.

154
00:10:32,990 --> 00:10:34,670
So I have a button right here.

155
00:10:34,670 --> 00:10:41,160
It's moved already I won't refresh the page if I call up that button variable and I call the museum

156
00:10:41,210 --> 00:10:49,200
in here button gets bounding client rect which is a method for rectangle rect get.

157
00:10:49,220 --> 00:10:50,270
Here we go.

158
00:10:50,270 --> 00:10:51,710
It returns this object.

159
00:10:51,710 --> 00:10:54,560
It's called a dom rect Dom rectangle.

160
00:10:54,560 --> 00:10:59,960
And it tells us information about this element so we can see it's with two hundred and twenty five pixels

161
00:10:59,960 --> 00:11:01,790
point eight seven five.

162
00:11:01,790 --> 00:11:03,930
We can see it's right.

163
00:11:03,950 --> 00:11:05,560
Let's see 733.

164
00:11:05,720 --> 00:11:06,760
Is that correct.

165
00:11:06,770 --> 00:11:08,870
Let's try moving it further.

166
00:11:08,870 --> 00:11:15,620
So let's do the same thing don't we on our last step why don't we move 600 pixels over.

167
00:11:15,620 --> 00:11:20,160
So instead of 400 we should be 600 or instead of 500 I mean we'll go 600.

168
00:11:20,180 --> 00:11:23,130
So currently it's at seven thirty three point eight seven five.

169
00:11:23,150 --> 00:11:27,370
If we refresh and let it let it do its thing just wait here.

170
00:11:27,380 --> 00:11:28,710
Kill some time.

171
00:11:28,910 --> 00:11:31,940
Let's see what we get now for the right.

172
00:11:32,000 --> 00:11:35,780
The right is now eight hundred and thirty three point eight eight seven five.

173
00:11:35,780 --> 00:11:41,870
And if we call move X again button we'll move eight hundred pixels and let's.

174
00:11:41,910 --> 00:11:43,180
Now one second is fine.

175
00:11:43,190 --> 00:11:46,220
No callback we wait one second.

176
00:11:46,240 --> 00:11:50,380
Now let's look at our get founding client wrecked right.

177
00:11:50,390 --> 00:11:57,220
Is 1033 and what is our entire width right now of the body document dump body.

178
00:11:57,260 --> 00:12:04,660
Clients with not height but with eleven thirty two.

179
00:12:04,670 --> 00:12:06,270
Okay so we're close.

180
00:12:06,310 --> 00:12:09,160
What we want to do is compare those to the rights.

181
00:12:09,340 --> 00:12:12,540
If we're going to the right place we're just worrying about moving to the right.

182
00:12:12,610 --> 00:12:18,160
So we'll check if the rights is greater than or equal to this boundary here which we already have.

183
00:12:18,160 --> 00:12:22,310
Document dump body duck client width and that will change depending on the screen.

184
00:12:22,330 --> 00:12:27,150
And if I have a console open so it's not just the dimensions of the screen itself.

185
00:12:27,250 --> 00:12:30,630
We've seen this before client with is going to update.

186
00:12:31,340 --> 00:12:38,180
OK so let's grab that variable get bound bounding client rect and we want dot right.

187
00:12:38,260 --> 00:12:39,900
So let's save this concept.

188
00:12:40,110 --> 00:12:43,000
L right element right.

189
00:12:43,060 --> 00:12:49,060
And let's rewrite our function before we go any further so that we don't have to pass in this absolute

190
00:12:49,090 --> 00:12:49,700
number.

191
00:12:49,900 --> 00:12:53,070
For example 100 than 200 and 300 than 400.

192
00:12:53,110 --> 00:12:58,210
What if I could just say move one hundred and then another one hundred then another one hundred and

193
00:12:58,210 --> 00:13:04,030
this would put us at three hundred pixels to the right of the initial position we would need to update

194
00:13:04,030 --> 00:13:05,370
this ever so slightly.

195
00:13:05,410 --> 00:13:10,660
So I'll just comment that out for now for amount we can keep that the same but instead of just setting

196
00:13:10,660 --> 00:13:16,270
translate X to be that amount we can calculate the current transform or the current position on the

197
00:13:16,270 --> 00:13:22,300
screen and then add to that whatever amount is passed in and use that to translate.

198
00:13:22,300 --> 00:13:28,330
So the current amount if we want to find that is right here if we use get bounding client rect we have

199
00:13:28,330 --> 00:13:35,400
the C left is eight hundred and eight and then we have a little bit of I believe his margin or padding

200
00:13:35,580 --> 00:13:37,260
that added eight pixels.

201
00:13:37,260 --> 00:13:37,910
It doesn't matter.

202
00:13:37,920 --> 00:13:39,510
Let's we're not gonna be super precise.

203
00:13:39,510 --> 00:13:43,880
I don't really care if this is going to be incredibly accurate I don't want to get too bogged down.

204
00:13:43,920 --> 00:13:45,640
So let's use this left.

205
00:13:45,690 --> 00:13:51,930
So whatever the left is well then add another 100 or 200 whatever the amount is we're trying to move

206
00:13:52,470 --> 00:14:01,090
I'll make a new variable I'll get the left and save that to a variable called current left then here

207
00:14:01,150 --> 00:14:06,470
I'll just translate X to amount plus currants left.

208
00:14:06,490 --> 00:14:11,440
So now when I call this I hopefully can just say move 100 pixels at a time it's easier.

209
00:14:11,440 --> 00:14:15,550
You don't have to keep track of if you've moved one hundred then you want to move two hundred if you

210
00:14:15,550 --> 00:14:16,690
wanna move another one hundred.

211
00:14:16,710 --> 00:14:19,200
You have to add it together and do three hundred.

212
00:14:19,210 --> 00:14:23,470
Now I can just say one hundred every time or two hundred every time or mix it up but I don't have to

213
00:14:23,470 --> 00:14:25,510
know how far we've already moved.

214
00:14:25,570 --> 00:14:25,800
Okay.

215
00:14:25,810 --> 00:14:28,960
So translate X let's just let's see if it works.

216
00:14:29,110 --> 00:14:31,780
Refresh the page.

217
00:14:31,780 --> 00:14:34,030
It's working it's moving 100 pixels every time.

218
00:14:34,730 --> 00:14:34,980
Okay.

219
00:14:34,990 --> 00:14:39,740
So now we can go back to checking if we've gone too far or if we're going to go too far.

220
00:14:39,850 --> 00:14:45,400
We have our boundary we have the current right of the element and what we want to do is check if that

221
00:14:45,400 --> 00:14:48,650
rights plus let's say we're moving 100 pixels.

222
00:14:48,790 --> 00:14:54,400
If another hundred pixels to the right is going to be too far and we'll be off the screen then we don't

223
00:14:54,400 --> 00:14:55,400
want to move.

224
00:14:55,480 --> 00:15:02,050
So we could write a simple conditional if element right plus the amount we're trying to move is greater

225
00:15:02,050 --> 00:15:06,220
than the body boundary what do we want to do.

226
00:15:06,640 --> 00:15:14,710
Why don't we start with just concerned about logging done and I apparently cannot type greater than

227
00:15:15,600 --> 00:15:25,930
what concerns out like done can't go up double quotes there can not go that far else.

228
00:15:25,950 --> 00:15:26,670
We need the else.

229
00:15:26,670 --> 00:15:29,890
Otherwise we'll just print this out and then run our code anyway.

230
00:15:30,060 --> 00:15:34,830
So let's add and else we'll do the set timeout down here.

231
00:15:34,830 --> 00:15:35,750
Oh boy OK.

232
00:15:35,940 --> 00:15:40,620
So we try and move 100 pixels every time and if it's too far.

233
00:15:40,660 --> 00:15:44,580
Like if I do the last one to try and move 500 pixels.

234
00:15:44,580 --> 00:15:45,130
Let's see.

235
00:15:45,150 --> 00:15:51,550
We should move four times two three four.

236
00:15:51,860 --> 00:15:54,740
While I'm an idiot I move the screen.

237
00:15:54,740 --> 00:15:56,560
Let's try and move a thousand pixels.

238
00:15:56,600 --> 00:15:59,230
That should be enough for it to trigger.

239
00:15:59,260 --> 00:16:00,870
OK so one hundred one hundred.

240
00:16:01,040 --> 00:16:06,660
And now we try and move a thousand perfect cannot go that far.

241
00:16:06,720 --> 00:16:07,640
Let's try one more time

242
00:16:11,220 --> 00:16:12,850
and it doesn't move us any further.

243
00:16:12,850 --> 00:16:13,350
That's it.

244
00:16:14,150 --> 00:16:14,580
OK.

245
00:16:14,830 --> 00:16:17,410
So that is working.

246
00:16:17,410 --> 00:16:21,240
We now have this situation where we don't move anymore.

247
00:16:21,520 --> 00:16:22,900
Otherwise we do this at.

248
00:16:22,900 --> 00:16:25,650
Time out and everything else and we call a callback.

249
00:16:25,660 --> 00:16:29,500
Now let's go back to this idea of having a success and a failure callback.

250
00:16:29,530 --> 00:16:32,000
So I could pass in here's what I want you to do.

251
00:16:32,020 --> 00:16:33,520
If we can keep moving.

252
00:16:33,610 --> 00:16:34,900
Here's what I want you to do.

253
00:16:34,900 --> 00:16:36,830
If we can't move anymore.

254
00:16:37,180 --> 00:16:42,070
For example I could reset the position if we've gone all the way to the right or I could just alert

255
00:16:42,070 --> 00:16:44,440
something the way that we would structure this.

256
00:16:44,440 --> 00:16:48,680
And this is how a lot of older javascript libraries are actually written.

257
00:16:48,700 --> 00:16:53,180
They have two callbacks you pass in so your request or whatever you're doing.

258
00:16:53,230 --> 00:16:55,170
Oh my gosh autocomplete here.

259
00:16:55,180 --> 00:16:55,630
Here you go.

260
00:16:56,410 --> 00:17:00,610
And you pass in your success callback which you wouldn't write like this.

261
00:17:00,610 --> 00:17:03,100
And then a fail callback.

262
00:17:03,100 --> 00:17:05,980
So those are two functions as arguments.

263
00:17:05,980 --> 00:17:13,050
So you would have your first function do something and then your second function do something else.

264
00:17:13,120 --> 00:17:13,960
So let's try it.

265
00:17:14,020 --> 00:17:15,260
Let's rewrite this.

266
00:17:15,340 --> 00:17:23,650
So we have our first callback let's call this on success and on failure or on fail.

267
00:17:23,830 --> 00:17:31,480
So down here if we've made it to this point that means we can keep moving so we'll call if on success

268
00:17:32,680 --> 00:17:38,050
which I guess we can just assume our code let's just assume that it will be passed and to make our code

269
00:17:38,050 --> 00:17:38,840
simpler.

270
00:17:38,980 --> 00:17:44,180
We'll do on success right there and on failure.

271
00:17:44,180 --> 00:17:47,120
We'll be right in here.

272
00:17:47,120 --> 00:17:49,700
So now we have two branching patterns.

273
00:17:49,910 --> 00:17:51,880
You try and move a certain number of pixels.

274
00:17:51,920 --> 00:17:57,260
If that number is too too big of a gap to jump and you'll be off screen this element will be off the

275
00:17:57,260 --> 00:17:58,050
screen.

276
00:17:58,190 --> 00:18:00,320
We'll call the on failure callback.

277
00:18:00,770 --> 00:18:07,250
Otherwise we'll actually do that movement after some delay that you pass in and then call your on success

278
00:18:07,250 --> 00:18:08,240
callback.

279
00:18:08,240 --> 00:18:11,810
So now we have to rewrite this whole thing to have two callbacks every time.

280
00:18:11,820 --> 00:18:19,820
So when to leave the original and I'll call move x of our button let's move 100 pixels the first time

281
00:18:20,750 --> 00:18:23,690
after one second 1000 milliseconds.

282
00:18:23,690 --> 00:18:27,860
This is our success callback if we're successful we'll do something.

283
00:18:27,920 --> 00:18:29,390
So I'll just write success.

284
00:18:29,390 --> 00:18:31,310
Then we have to add our second callback here.

285
00:18:31,310 --> 00:18:33,130
So a whole nother function.

286
00:18:33,290 --> 00:18:38,800
And this is if you cannot move if this is too big of a jump to try and make what do we want to do.

287
00:18:38,810 --> 00:18:45,150
Why don't we start with a simple alert cannot move further.

288
00:18:45,370 --> 00:18:46,150
OK.

289
00:18:46,180 --> 00:18:54,220
And so then if we're successful we'll do another move X this time why don't we move 400 pixels after

290
00:18:54,220 --> 00:18:58,060
1 seconds here's our success callback we'll do something.

291
00:18:58,060 --> 00:19:05,530
If success I'll label these success and then we have to add a fail callback to this function call.

292
00:19:05,700 --> 00:19:07,290
And already it's getting quite messy.

293
00:19:07,320 --> 00:19:11,850
So this would be our fail for the second callback or for the second attempt.

294
00:19:11,940 --> 00:19:18,400
And here's our fail for the very first move X so fail here we'll do the exact same alert cannot move

295
00:19:18,400 --> 00:19:27,360
further and if I say if it gets all formatted funky but this is a lot to just follow and try and read

296
00:19:27,750 --> 00:19:33,930
with your human eyes it's really not pretty and this is only two levels so far just adding in that second

297
00:19:33,930 --> 00:19:35,850
callback really complicates things.

298
00:19:35,850 --> 00:19:40,980
This is relatively easy to look at and understand this happens then after this callback will happen

299
00:19:41,010 --> 00:19:47,500
then this callback here when we have two callbacks at a time we pass in it's just clunky and ugly.

300
00:19:47,530 --> 00:19:47,760
Okay.

301
00:19:47,790 --> 00:19:51,480
So move x button let's see here's our success.

302
00:19:51,600 --> 00:19:53,840
Let's do one more move x.

303
00:19:53,880 --> 00:19:56,140
So if we move 100 pixels we're still good.

304
00:19:56,160 --> 00:19:59,610
This calls or this is called we try and move 400 pixels.

305
00:19:59,610 --> 00:20:00,770
If we're still good.

306
00:20:00,900 --> 00:20:07,770
This function is called otherwise this fail is called Move X this time let's do button something very

307
00:20:07,770 --> 00:20:12,780
large like 700 pixels that should do it for us at least if I shrink my screen down.

308
00:20:12,780 --> 00:20:21,950
And then after a second again here's our success callback we'll just cancel dialogue really.

309
00:20:22,800 --> 00:20:31,470
We still have screen left or something like that and then we pass in our failure callback here and this

310
00:20:31,470 --> 00:20:34,320
one will just alert cannot move further.

311
00:20:37,640 --> 00:20:38,060
Oh boy.

312
00:20:38,090 --> 00:20:38,750
I mean look at this.

313
00:20:38,750 --> 00:20:40,250
This is nasty to look at.

314
00:20:40,640 --> 00:20:41,860
But let's just see if it works.

315
00:20:41,870 --> 00:20:48,140
So we every single time we call move X we're now passing in two callbacks the one to call if things

316
00:20:48,140 --> 00:20:52,100
work and we can move the one to call if we can't move that far.

317
00:20:52,100 --> 00:20:57,860
We'll be moving off screen and then as soon as we start nesting them it just grows into this absolute

318
00:20:57,860 --> 00:20:59,060
spaghetti mess.

319
00:20:59,180 --> 00:20:59,870
So let's try it.

320
00:20:59,870 --> 00:21:06,150
I'm going to refresh my page OK so it actually did work but when I'm when I hit enter and close this

321
00:21:06,150 --> 00:21:11,880
alert you'll see what it's kind of behaving out the or it might seem like it's behaving oddly.

322
00:21:12,000 --> 00:21:16,000
This is because of our set time out and what's happening if we go back.

323
00:21:16,140 --> 00:21:18,870
We're moving a hundred pixels than 400 than 700.

324
00:21:18,870 --> 00:21:25,200
If we can but because this code is running right away we're not doing it in the set time out.

325
00:21:25,320 --> 00:21:27,790
It seems like we're stopping too soon.

326
00:21:27,960 --> 00:21:32,370
But as you saw here OK it stops or it appears to stop.

327
00:21:32,370 --> 00:21:34,110
But I hit enter it still moves.

328
00:21:34,350 --> 00:21:37,540
So that alert is actually coming from this move.

329
00:21:37,620 --> 00:21:41,010
When I moved over here we could fix this problem.

330
00:21:41,010 --> 00:21:47,430
If we move our conditional into the set time out just to run through what's happening here we're moving

331
00:21:47,440 --> 00:21:48,480
100 pixels.

332
00:21:48,630 --> 00:21:52,860
But when we move a hundred pixels we're starting by checking can we continue to move.

333
00:21:52,860 --> 00:21:53,670
All right we can.

334
00:21:54,090 --> 00:22:00,360
So we don't run this and we set a timeout This time out takes one second if we pass in 1000 milliseconds

335
00:22:00,360 --> 00:22:04,830
it takes 1000 milliseconds for it to run and then call on success.

336
00:22:04,830 --> 00:22:09,270
But as soon as that on success is called this code runs immediately.

337
00:22:09,270 --> 00:22:13,340
This is not part of the thousand millisecond delay for the next time around.

338
00:22:13,550 --> 00:22:15,730
It's happening at the very beginning of the function.

339
00:22:15,870 --> 00:22:21,450
So we could rewrite this by moving this code into our set timeout.

340
00:22:21,480 --> 00:22:24,260
This isn't necessarily the best way of designing this.

341
00:22:24,270 --> 00:22:28,970
It might be better just a short circuit and just check as soon as possible if we can't move further.

342
00:22:29,100 --> 00:22:32,000
But this will make it easier to see when it's working for us.

343
00:22:32,010 --> 00:22:38,280
So now we're doing basically running the code at the exact same time we're checking if we can go and

344
00:22:38,280 --> 00:22:43,500
we're calling failure if we can't go we're calling success if we can move and we're doing it all within

345
00:22:43,500 --> 00:22:44,120
the set time.

346
00:22:44,160 --> 00:22:49,090
So now it moves and moves again and then it says OK I can't keep going.

347
00:22:49,110 --> 00:22:50,750
So we had the same outcome last time.

348
00:22:50,760 --> 00:22:54,840
It just was alerting us before we had actually moved.

349
00:22:55,080 --> 00:22:57,570
OK so this is looking great.

350
00:22:57,570 --> 00:22:58,580
It works right.

351
00:22:58,590 --> 00:22:59,610
It's stopping when it should.

352
00:22:59,610 --> 00:23:06,860
If I expand my screen all the way over here let's see it now should be able to make that jump.

353
00:23:07,050 --> 00:23:13,890
And now we get really we still have screen left which is our success for our third move.

354
00:23:14,640 --> 00:23:18,200
So you can see this is quite ugly and this is only three moves.

355
00:23:18,210 --> 00:23:20,350
What we had here was five moves.

356
00:23:20,520 --> 00:23:24,450
So when I take a second to recreate this I won't make you watch.

357
00:23:24,450 --> 00:23:28,500
I'll just do it really quickly and through the magic of editing it will be done.

358
00:23:28,500 --> 00:23:29,810
There you go.

359
00:23:29,820 --> 00:23:35,550
So I decided to change it to 300 pixel jumps because I know some of you will have wider screens or you

360
00:23:35,550 --> 00:23:37,740
won't have your console open like I have here.

361
00:23:37,770 --> 00:23:41,890
So I wanted to make sure in most cases that this would hit the edge of the screen.

362
00:23:42,000 --> 00:23:48,450
So I'm going three hundred three hundred three hundred three hundred three hundred and then each time

363
00:23:48,660 --> 00:23:51,210
if it fails I have this failure callback.

364
00:23:51,210 --> 00:23:55,120
It's just alerting cannot move further cannot move further cannot move further.

365
00:23:55,320 --> 00:23:58,660
Oh my gosh can't talk five times I have to rewrite that code.

366
00:23:58,920 --> 00:24:00,960
I don't have an easy way of getting around this.

367
00:24:00,990 --> 00:24:06,960
I have to pass in that failure callback even if I'm just doing basically the same thing every single

368
00:24:06,960 --> 00:24:07,430
time.

369
00:24:07,590 --> 00:24:13,730
And then on our last success instead of continuing to move I'm just alerting you have a wide screen.

370
00:24:14,170 --> 00:24:15,240
So let's see what happens.

371
00:24:15,240 --> 00:24:23,100
Now we move one time two times three times four and then it stops cannot move further.

372
00:24:23,100 --> 00:24:26,970
And if I close my console I think we'll be able to make it to the end.

373
00:24:27,280 --> 00:24:33,180
Three four five and then the callback which is you have a wide screen.

374
00:24:33,840 --> 00:24:34,310
OK.

375
00:24:34,620 --> 00:24:36,800
So this has been a ton.

376
00:24:36,840 --> 00:24:39,190
I know this is an incredibly long dense video.

377
00:24:40,380 --> 00:24:45,420
I wanted to illustrate a situation where callbacks are useful.

378
00:24:45,480 --> 00:24:50,580
We have to use callbacks with what we know so far in order to write a function like move X where we're

379
00:24:50,580 --> 00:24:55,590
waiting for something to finish and then running some code we're using set time out all over the place

380
00:24:55,700 --> 00:24:57,690
in our source as you see where are you set.

381
00:24:57,690 --> 00:24:58,570
Time out.

382
00:24:58,920 --> 00:25:03,370
And in order to make our functions work the way we've written them we have to pass callbacks.

383
00:25:03,390 --> 00:25:05,670
So we have a on success and on failure.

384
00:25:05,850 --> 00:25:11,670
Remember all of this stems from the fact that JavaScript does one thing at a time and the browser is

385
00:25:11,670 --> 00:25:13,520
taking over when we call set timeout.

386
00:25:13,680 --> 00:25:17,070
The browser is keeping track of time and then it tells javascript.

387
00:25:17,070 --> 00:25:17,310
OK.

388
00:25:17,340 --> 00:25:17,850
Time's up.

389
00:25:17,850 --> 00:25:18,980
Run this function.

390
00:25:19,140 --> 00:25:24,300
And within this function we have some logic and then we tell javascript which one of these to run based

391
00:25:24,300 --> 00:25:26,010
off of some conditional logic.

392
00:25:26,010 --> 00:25:31,800
So this all stems from javascript fundamental nature the fact that it's single threaded and we have

393
00:25:31,800 --> 00:25:38,730
these browser API is a web API is that JavaScript works with to make a request to set a time out to

394
00:25:38,730 --> 00:25:44,440
set an interval to add an event listener the browser takes care of that and then tells javascript.

395
00:25:44,470 --> 00:25:50,190
Here's a function here's a callback that's great but it can get really messy when we start having different

396
00:25:50,190 --> 00:25:54,740
outcomes and success in a failure which happens a lot when we make requests.

397
00:25:54,750 --> 00:26:00,780
This is a very simple example but as you'll see shortly when we make requests real web HDP requests

398
00:26:01,050 --> 00:26:02,160
we follow the same pattern.

399
00:26:02,160 --> 00:26:06,140
We have some code to run when it when the request works we have other code to run.

400
00:26:06,270 --> 00:26:07,730
If the request fails.

401
00:26:07,950 --> 00:26:13,140
And so if we structure our code like this on success on failure we have two callbacks things get nested

402
00:26:13,470 --> 00:26:16,110
ugly and very difficult to follow quickly.

403
00:26:16,140 --> 00:26:18,690
I mean look at how separated our code is.

404
00:26:18,780 --> 00:26:22,880
Yes part of it is the way that my V.S. code is formatting things.

405
00:26:22,980 --> 00:26:27,850
But even if we don't have all this indentation it's still really difficult to know.

406
00:26:27,990 --> 00:26:34,410
You know if you want to change the failure callback for this first move X you have to scroll down and

407
00:26:34,410 --> 00:26:36,320
just make sure you're at the right level right.

408
00:26:36,330 --> 00:26:36,780
You have to.

409
00:26:37,110 --> 00:26:37,980
Here's the first one.

410
00:26:38,040 --> 00:26:39,020
Here's the second failure.

411
00:26:39,020 --> 00:26:43,260
Third failure it becomes hard to really follow and understand.

412
00:26:43,260 --> 00:26:45,020
So this is where promises come in.

413
00:26:45,060 --> 00:26:50,820
Promises allow us to rewrite a function like this or this function here so that we don't have to do

414
00:26:50,820 --> 00:26:52,440
all this crazy nesting.

415
00:26:52,440 --> 00:26:56,150
It's so much so much easier to read and that's why we're going to see in the next video.

416
00:26:56,430 --> 00:26:58,310
So all of this has been set up for promises.

417
00:26:58,320 --> 00:27:04,320
But as long as it's been this this video I know is probably the longest video in the course a real slog.

418
00:27:04,320 --> 00:27:08,940
I congratulate you if you made it here and it will really help you understand why promises are worth

419
00:27:08,940 --> 00:27:09,350
it.

420
00:27:09,440 --> 00:27:14,910
Otherwise I just show you promises without showing you the struggle without promises it doesn't do promises

421
00:27:14,910 --> 00:27:15,510
justice.

422
00:27:15,510 --> 00:27:16,540
So that's coming up next.
