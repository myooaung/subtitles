WEBVTT
1
00:00:00.150 --> 00:00:05.160
There's one more key function concept we have yet to discuss which is the return statement.

2
00:00:05.160 --> 00:00:11.520
Returning values from a function we talked about functions that take inputs and then on the diagram

3
00:00:11.550 --> 00:00:12.350
I had.

4
00:00:12.350 --> 00:00:16.420
If we go back a couple of slides I have this arrow indicating output.

5
00:00:16.620 --> 00:00:19.460
But right now our functions aren't returning of value.

6
00:00:19.560 --> 00:00:24.300
They are printing of value out and there's a big difference between the two.

7
00:00:24.420 --> 00:00:30.390
If we take a look at one of the built in methods any of them how about Hello Dot to uppercase.

8
00:00:30.450 --> 00:00:37.890
So the two upper case method when I run that the console prints out hello and we see the text below

9
00:00:38.220 --> 00:00:40.430
but that's only in the console.

10
00:00:40.440 --> 00:00:45.000
It's just being helpful for us to immediately see the return value.

11
00:00:45.210 --> 00:00:52.110
If I paste that in to a file and I run this code refresh that page we see nothing.

12
00:00:52.200 --> 00:00:57.780
This code is run and to uppercase does return a value but it's lost forever.

13
00:00:57.780 --> 00:00:58.780
We're not printing it.

14
00:00:58.800 --> 00:01:03.750
We're not capturing it but we normally do is one of those either print it out.

15
00:01:03.750 --> 00:01:10.220
Most likely though we just put it in a variable concept scream equals Hello Dot to uppercase.

16
00:01:10.470 --> 00:01:14.220
We refresh now scream has a value stored in it.

17
00:01:14.940 --> 00:01:19.760
So this returned an output to uppercase return to value.

18
00:01:19.890 --> 00:01:26.640
We captured it in scream so printing something to the console is entirely different than returning a

19
00:01:26.640 --> 00:01:29.100
value when we're working in the console.

20
00:01:29.250 --> 00:01:33.230
They might seem similar but there still is a significant difference.

21
00:01:33.330 --> 00:01:37.880
If I run that code again Hello Dot to uppercase.

22
00:01:37.920 --> 00:01:39.680
Notice this little arrow I get here.

23
00:01:39.780 --> 00:01:41.690
It's pointing the other direction.

24
00:01:41.730 --> 00:01:45.110
This signifies I'm looking at a return value.

25
00:01:45.180 --> 00:01:54.370
Now if I console dot log the same thing Hello Dot to uppercase it's printed out differently.

26
00:01:54.390 --> 00:01:56.910
This is an actual console dot log.

27
00:01:56.910 --> 00:01:58.320
I don't have the arrow.

28
00:01:58.380 --> 00:02:05.470
This is a return value so return values are extremely useful because we can capture them in a variable.

29
00:02:05.670 --> 00:02:08.610
We could pass them to another function.

30
00:02:08.640 --> 00:02:13.560
Remember that most of the time and applications that we create later on in this course and in the real

31
00:02:13.560 --> 00:02:16.440
world we don't print much to the console.

32
00:02:16.440 --> 00:02:18.030
Any given Web site.

33
00:02:18.030 --> 00:02:22.510
If you open the console maybe there's a line or two that a developer left in there.

34
00:02:22.620 --> 00:02:28.070
Or sometimes if you go to a website like Facebook and we open the console we have a message here.

35
00:02:28.080 --> 00:02:35.680
In this case it's to prevent people from running code or something that is fraudulent or spammy or sketchy.

36
00:02:35.760 --> 00:02:40.190
If someone told you to copy and paste something here to enable a Facebook feature it's a scam.

37
00:02:40.260 --> 00:02:40.760
Probably.

38
00:02:41.400 --> 00:02:46.560
But other than that we're not usually cancelled out logging things unless we're debugging or trying

39
00:02:46.560 --> 00:02:48.120
to test something out.

40
00:02:48.180 --> 00:02:54.100
Most of what we do when we write functions is we return a value and we use that value somehow console

41
00:02:54.120 --> 00:02:56.580
that log is just useful when we're starting out.

42
00:02:56.580 --> 00:03:01.830
We haven't talked about how we manipulate a web page how we change each time out how we display content.

43
00:03:02.130 --> 00:03:07.260
So for now we just show it in the console but when we have a function console about logging something

44
00:03:07.410 --> 00:03:09.900
instead of returning is not a substitute.

45
00:03:10.560 --> 00:03:18.300
If we take a look at this ad function ad X and Y a console that logs x plus y when I call it if I refresh

46
00:03:18.300 --> 00:03:25.560
my page here AD 1 and 2 it prints out the value 3 but if I try and store that in a variable like concept

47
00:03:26.280 --> 00:03:28.140
some equals.

48
00:03:28.260 --> 00:03:30.970
If we look at some it's undefined.

49
00:03:31.170 --> 00:03:33.930
There is no value returned from this function.

50
00:03:33.930 --> 00:03:38.130
It prints something which is better than nothing but it doesn't actually return a value.

51
00:03:38.130 --> 00:03:39.240
There's no output.

52
00:03:39.420 --> 00:03:40.630
So let's change that.

53
00:03:40.740 --> 00:03:43.370
Let's add in returns to our functions.

54
00:03:43.470 --> 00:03:47.970
All we have to do is use the return keyword so return.

55
00:03:48.060 --> 00:03:49.920
And then some value.

56
00:03:49.920 --> 00:03:51.060
We can have an expression.

57
00:03:51.090 --> 00:03:53.460
This will evaluate first and then be returned.

58
00:03:54.090 --> 00:04:07.070
So if we do that ad X and Y return x plus y run my code again ad for com A5 in the console we see 9.

59
00:04:07.100 --> 00:04:09.120
But that's not actually being printed out.

60
00:04:09.210 --> 00:04:12.210
It's just the chrome console showing us the return value.

61
00:04:12.210 --> 00:04:20.790
And if I save that to a variable const total equals ad for come a 5 we look at total it now stores the

62
00:04:20.790 --> 00:04:22.000
value 9.

63
00:04:22.200 --> 00:04:28.680
So we return something from the function which we can capture later which is what I did here.

64
00:04:28.770 --> 00:04:30.780
There are some rules to know about returning.

65
00:04:30.780 --> 00:04:33.660
First of all you can only return one thing from a function.

66
00:04:33.840 --> 00:04:39.780
That doesn't mean you can't have multiple return statements but when you actually return something there

67
00:04:39.780 --> 00:04:40.930
needs to be one value.

68
00:04:41.430 --> 00:04:49.110
So if I wanted to return x and y for some reason instead of the total I could use an array and do X

69
00:04:49.230 --> 00:04:58.380
comma Y or I could do a string where I add X inside and Y inside but I can't return to separate values

70
00:04:58.800 --> 00:05:03.310
so I can collect something in return that need to return one thing.

71
00:05:03.730 --> 00:05:07.300
So I said we could have multiple return statements in a single function.

72
00:05:07.300 --> 00:05:08.800
I'll show you an example of that now.
