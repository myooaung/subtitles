1
00:00:00,270 --> 00:00:06,180
So far we've been defining our functions using what are called function statements where we have function

2
00:00:06,210 --> 00:00:12,210
and then some idea let's go with ADD and then we return something or we do something in here.

3
00:00:12,210 --> 00:00:16,350
But the pattern is function and then a name and then curly braces.

4
00:00:16,350 --> 00:00:20,580
Now I'm going to show you a completely different syntax although I say completely different.

5
00:00:20,580 --> 00:00:23,210
It looks very similar but it is different.

6
00:00:23,220 --> 00:00:25,680
It's called a function expression.

7
00:00:25,680 --> 00:00:28,200
This is a another way of defining a function.

8
00:00:28,200 --> 00:00:33,200
These functions will work just as well just the same as the function statements we've been writing.

9
00:00:33,360 --> 00:00:35,090
But there's a key difference here.

10
00:00:35,340 --> 00:00:38,310
If you look at this function it's stored in a variable.

11
00:00:38,310 --> 00:00:40,910
The function itself does not have a name.

12
00:00:40,980 --> 00:00:49,410
It's not function square then parents I'm saying function no name and I'm storing it in a variable square.

13
00:00:49,410 --> 00:00:51,730
Now how am I able to store a function in a variable.

14
00:00:52,170 --> 00:00:57,750
Well it works because functions are objects in javascript functions are objects which means we can put

15
00:00:57,750 --> 00:00:58,900
them in a variable.

16
00:00:59,070 --> 00:01:01,010
We can store 10 of them in an array.

17
00:01:01,080 --> 00:01:05,280
We can even pass them around as arguments which is something we do all the time.

18
00:01:05,280 --> 00:01:08,520
And it's mainly why I'm introducing this to you right now.

19
00:01:08,520 --> 00:01:10,240
So I have a variable called Square.

20
00:01:10,320 --> 00:01:11,430
It could be holding a number.

21
00:01:11,460 --> 00:01:17,880
It could be holding an array but instead it's holding a function which is just an object and to call

22
00:01:17,880 --> 00:01:20,940
it a reference to the name of the variable square.

23
00:01:20,940 --> 00:01:25,620
And I pass in an argument just like I would for any function named square.

24
00:01:25,620 --> 00:01:29,710
The main distinction here is that the function does not actually have a name.

25
00:01:29,730 --> 00:01:35,710
It's stored in a variable but we haven't provided a name so let's try one of these out on our own.

26
00:01:36,020 --> 00:01:41,270
We can write a regular function statement first so function we'll just do add.

27
00:01:41,270 --> 00:01:46,850
I know it's boring but X and Y two parameters and then we'll return x plus y.

28
00:01:48,710 --> 00:01:52,300
Now let's define a function expression that does the same thing.

29
00:01:53,420 --> 00:01:55,480
So we could write it with no name.

30
00:01:55,550 --> 00:01:57,430
I'm not going to store it in a variable first.

31
00:01:57,560 --> 00:02:01,610
I'm just going to write function parentheses x come away.

32
00:02:02,030 --> 00:02:04,780
Return x plus y.

33
00:02:04,790 --> 00:02:06,310
Now this on its own is not valid.

34
00:02:06,740 --> 00:02:11,650
If I save we can't call this we have no way of referring to this function.

35
00:02:11,660 --> 00:02:14,720
There's no name I haven't stored it in a variable.

36
00:02:14,720 --> 00:02:20,420
This is called an anonymous function and we do use these a lot but not just on their own floating in

37
00:02:20,420 --> 00:02:21,620
the middle of nowhere.

38
00:02:21,680 --> 00:02:25,600
We usually pass them into another function but I'm getting ahead of myself.

39
00:02:25,640 --> 00:02:32,060
So let's store this in a variable I'll call this one some instead of ads so I don't have to add and

40
00:02:32,060 --> 00:02:33,340
I'll save.

41
00:02:33,340 --> 00:02:39,410
So to execute add I just reference head and I'll pass in some numbers like four and five I get nine

42
00:02:40,160 --> 00:02:41,560
to execute some.

43
00:02:41,570 --> 00:02:44,090
It's the same thing I just reference some.

44
00:02:44,240 --> 00:02:47,570
So some nine and three gives us twelve.

45
00:02:47,570 --> 00:02:53,140
They work exactly the same way but we declared them in two different formats to different sin taxes.

46
00:02:53,300 --> 00:02:57,790
There are some differences between how these behave which is something we will address in time.

47
00:02:57,830 --> 00:02:59,550
We'll talk about something called hoisting.

48
00:02:59,720 --> 00:03:05,300
But for now all you need to know is that this is a nother syntax to define a function and that functions

49
00:03:05,360 --> 00:03:10,430
are objects which means we can store them in a variable pass them around put them in arrays they're

50
00:03:10,460 --> 00:03:12,440
just like any other object.

51
00:03:12,440 --> 00:03:18,890
Now this also means that we can inspect them if I do a console that DVR which we may not have seen very

52
00:03:18,890 --> 00:03:21,750
much of them may not have seen it yet at all.

53
00:03:21,830 --> 00:03:28,370
If I do console that dear of some it's going to print out the object form kind of reveals the underlying

54
00:03:28,400 --> 00:03:32,760
object and I can see things like the name of the function.

55
00:03:32,840 --> 00:03:35,990
Also we can just tell it's an object we have key value pairs.

56
00:03:36,070 --> 00:03:43,240
If I do the same thing for console that desire of ad this is kind of like proof that it's an object.

57
00:03:43,280 --> 00:03:44,040
It's not.

58
00:03:44,210 --> 00:03:47,060
It's just the chrome console showing us some data.

59
00:03:47,200 --> 00:03:50,940
But we can see the underlying key and value properties here.

60
00:03:50,990 --> 00:03:51,620
OK.

61
00:03:51,800 --> 00:03:56,600
The last thing I'll show you is that you can add in a name for a function when you're storing it in

62
00:03:56,600 --> 00:03:57,650
a variable.

63
00:03:57,650 --> 00:03:59,120
It doesn't have to be anonymous.

64
00:03:59,240 --> 00:04:02,630
So this function right here the part I have highlighted has no name.

65
00:04:02,630 --> 00:04:07,100
We're storing it in a variable called sum but the function itself does not have a name.

66
00:04:07,280 --> 00:04:14,720
I can write another function let's call this one product meaning multiplication equals function and

67
00:04:14,720 --> 00:04:16,430
then I can give it a name still.

68
00:04:16,430 --> 00:04:21,730
Multiply x and y return X times Y.

69
00:04:23,210 --> 00:04:24,770
So this is valid here.

70
00:04:24,830 --> 00:04:29,000
This is still a function expression but it's a named function expression.

71
00:04:29,000 --> 00:04:30,580
This is anonymous.

72
00:04:30,650 --> 00:04:35,310
We'll talk later about this name and if it really means anything if it's useful ever.

73
00:04:35,310 --> 00:04:40,040
There's a couple of situations where it might matter but the point right now is just that we can add

74
00:04:40,040 --> 00:04:47,630
a name and to call this function I still call product product of 3 and 5 gives me 15 if I try and call

75
00:04:47,630 --> 00:04:55,190
multiply my console doesn't know about it's not trying to autocomplete 3 and 5 it doesn't work but don't

76
00:04:55,190 --> 00:05:00,680
get too caught up in these details I just hope that the one takeaway here should be that you can define

77
00:05:00,680 --> 00:05:06,410
a function using this format where we write a function expression we store it in a variable and we're

78
00:05:06,410 --> 00:05:11,690
learning this right now for a reason because we're about to see how we can start passing around functions

79
00:05:12,050 --> 00:05:14,690
to other functions how we can use them as values.

80
00:05:14,700 --> 00:05:19,790
There's a lot that we can do because of the fact that functions are objects we can pass them around

81
00:05:19,790 --> 00:05:22,670
we can store them and this is just the tip of the iceberg.

82
00:05:22,970 --> 00:05:29,420
So a function expression is another way of defining a function the syntax is almost identical but we

83
00:05:29,420 --> 00:05:34,250
use a variable equal sine function we can optionally leave off the name.

84
00:05:34,400 --> 00:05:39,110
Otherwise we still write our parameters we still use them we still return something and we still call

85
00:05:39,110 --> 00:05:40,030
them the same way.
