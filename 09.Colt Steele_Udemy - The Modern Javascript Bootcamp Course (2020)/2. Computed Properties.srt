1
00:00:00,210 --> 00:00:07,110
Next up we have another nice new syntax addition to objects called computed properties so computed properties

2
00:00:07,200 --> 00:00:13,470
are just an improvement for the object literal syntax where we can add a property with a dynamic key.

3
00:00:13,710 --> 00:00:16,590
Right now if we want to make an object with a dynamic key.

4
00:00:16,830 --> 00:00:23,970
For example if I WANT AN OBJECT WHERE I HAVE THE KEY set to the value of role which is host and then

5
00:00:24,000 --> 00:00:27,560
the value for that key would be Jools Holland the variable person.

6
00:00:28,290 --> 00:00:35,490
If I make my object const let's call this jobs or how about team.

7
00:00:35,490 --> 00:00:39,900
If I tried to do roll and set that to person we've seen this before.

8
00:00:39,900 --> 00:00:43,170
Early on we'll just end up with the key of role.

9
00:00:43,200 --> 00:00:44,710
That's not what we want here.

10
00:00:45,120 --> 00:00:51,630
If I look at team we have roles set to Jools Holland so person is evaluated.

11
00:00:51,630 --> 00:00:57,000
This is computed if we get the Variable value and that stuck in the object but role is turned into a

12
00:00:57,000 --> 00:00:57,740
string.

13
00:00:57,840 --> 00:00:59,870
It's not checked if it's a variable.

14
00:00:59,970 --> 00:01:01,530
It's not computed.

15
00:01:01,530 --> 00:01:07,800
So what we've done in the past in order to make this work if we want a dynamic value for the key is

16
00:01:07,800 --> 00:01:10,770
to go back after we initialize the object.

17
00:01:10,770 --> 00:01:16,320
Do you square brackets team of role equals person.

18
00:01:16,320 --> 00:01:24,180
And now if we look at team we have host set to Jools Holland and let's say I had one more concept role

19
00:01:24,180 --> 00:01:26,300
two equals.

20
00:01:26,380 --> 00:01:29,230
Uh how about director.

21
00:01:29,550 --> 00:01:35,680
I don't have the actual per any person in mind with Person 2 equals.

22
00:01:35,760 --> 00:01:39,420
JAMES CAMERON Okay.

23
00:01:39,460 --> 00:01:49,000
And if I wanted to add this in as a pair I would need to then do team of role two equals person to and

24
00:01:49,030 --> 00:01:55,340
now we have two properties with dynamic keys and we have to use these square brackets as we've seen.

25
00:01:55,390 --> 00:01:59,020
If you tried to use the dot notation you're just adding the key of role.

26
00:01:59,470 --> 00:02:04,560
But now with this new syntax for computed properties we can do this all at once.

27
00:02:04,600 --> 00:02:13,990
We can define our object and then dynamically add in a key based off of some computed variable and expression.

28
00:02:14,200 --> 00:02:16,180
The code will be evaluated first.

29
00:02:16,300 --> 00:02:20,180
We'll retrieve the Variable value and use that as a key.

30
00:02:20,260 --> 00:02:21,620
And this is what it looks like.

31
00:02:21,670 --> 00:02:27,420
We use the same square brackets but we wrap it around the key in our property definition in the object's

32
00:02:27,430 --> 00:02:28,570
literal.

33
00:02:28,570 --> 00:02:31,300
So here you user will be evaluated first.

34
00:02:31,450 --> 00:02:34,960
We get jewels and that's set to admin.

35
00:02:34,960 --> 00:02:43,630
So if we try it over here we would have roll in those brackets set to person and then I could do a second

36
00:02:43,630 --> 00:02:48,080
one roll to set to Person 2.

37
00:02:48,820 --> 00:02:51,590
Let's take a look.

38
00:02:51,730 --> 00:02:52,330
There we go.

39
00:02:52,330 --> 00:02:56,810
The exact same object that we created up here but now we're doing it all at once.

40
00:02:56,980 --> 00:03:00,190
All of our properties are in the object when we are defining it.

41
00:03:00,220 --> 00:03:02,060
We're not having to do it after the fact.

42
00:03:02,170 --> 00:03:06,670
We don't make an empty objects and then add a property and the second property we can just do it all

43
00:03:06,670 --> 00:03:07,720
at once.

44
00:03:07,720 --> 00:03:12,850
And that's kind of it and for computed properties you could also put in more complex expressions in

45
00:03:12,850 --> 00:03:13,370
here.

46
00:03:13,570 --> 00:03:25,210
For example I could do one plus six plus nine and set that equal to how about 16 if I evaluate this

47
00:03:25,560 --> 00:03:26,230
and take a look.

48
00:03:26,230 --> 00:03:33,070
We have 16 set to 16 so this is going to be evaluated and then turned into a string like all the keys

49
00:03:33,070 --> 00:03:36,070
we've seen and then used as the key in the object.

50
00:03:36,340 --> 00:03:43,120
Here's one more example let's make a function that accepts an object and will return a copy of that

51
00:03:43,150 --> 00:03:45,640
object with a new property added in.

52
00:03:46,030 --> 00:03:53,470
So we'll call this function add property or just add prop it will accept an object and then a key and

53
00:03:53,470 --> 00:04:00,460
a value and we want it to return a new object based off of this Obi J parameter with a key and a value

54
00:04:00,460 --> 00:04:01,660
pair added.

55
00:04:01,660 --> 00:04:07,240
So without this computed properties new syntax we would do something like this make our copy of the

56
00:04:07,240 --> 00:04:11,260
object all your spread Oh B.J..

57
00:04:11,260 --> 00:04:20,080
That's an easy way to make a copy and then we would set a copy of k equals V and then return.

58
00:04:20,080 --> 00:04:25,950
Copy and if I called this now I'll use my team variable.

59
00:04:26,200 --> 00:04:32,930
It would do add up of team let's add in a new property.

60
00:04:32,930 --> 00:04:38,040
We'll go with happy and then the corresponding string will be a happy face.

61
00:04:38,210 --> 00:04:39,470
So we have a key and a value.

62
00:04:39,500 --> 00:04:42,640
We'll save this to a variable const rez.

63
00:04:42,770 --> 00:04:45,750
Let's look at results.

64
00:04:45,740 --> 00:04:46,740
Okay so it worked.

65
00:04:46,760 --> 00:04:50,600
We ended up adding in happy as a key and a happy face.

66
00:04:50,600 --> 00:04:52,550
The string as the value.

67
00:04:52,550 --> 00:04:54,380
This is not using computed properties.

68
00:04:54,380 --> 00:04:59,900
So we had to make the object then we had to go ahead and update add in a new property with the dynamic

69
00:04:59,900 --> 00:05:01,390
key and value.

70
00:05:01,670 --> 00:05:06,770
If we instead wanted to rewrite this using computed properties we could do it on one line.

71
00:05:06,770 --> 00:05:10,550
It would be an annoying one line but we could do it on one line.

72
00:05:10,640 --> 00:05:12,110
I'll do an arrow function this time.

73
00:05:12,110 --> 00:05:24,680
So const add prop equals object key value and then we'll return a new object that contains everything

74
00:05:24,680 --> 00:05:31,700
from Obi J we're spreading it in or copying it and using square brackets compute the key and set it

75
00:05:31,700 --> 00:05:34,190
equal to the corresponding value.

76
00:05:34,280 --> 00:05:40,880
So this does fit on one line but when I saved my editor it decides to auto format it to multiple lines.

77
00:05:40,910 --> 00:05:43,990
You could also use an implicit return to even shorten it more.

78
00:05:44,150 --> 00:05:46,280
But let's just make sure it works.

79
00:05:46,310 --> 00:05:47,740
Let's look at rez.

80
00:05:47,870 --> 00:05:49,670
We get the same result.

81
00:05:50,150 --> 00:05:52,430
So that's one use for a computed property.

82
00:05:52,430 --> 00:05:58,520
When you are creating functions that either return objects or add things into objects it's pretty common

83
00:05:58,520 --> 00:06:00,570
that you might want to add a dynamic key.

84
00:06:01,100 --> 00:06:03,200
Now just as a bonus here.

85
00:06:03,320 --> 00:06:08,780
We're done with the computer property stuff but if we wanted to refactor this to be a one line aero

86
00:06:08,780 --> 00:06:12,080
function or at least an implicit return aero function.

87
00:06:12,080 --> 00:06:17,060
Remember that when we return something implicitly we don't need the return keyword and we don't need

88
00:06:17,060 --> 00:06:18,550
the curly braces.

89
00:06:18,950 --> 00:06:25,340
So we could write it like this and then just move it all into one line except for the fact that JavaScript

90
00:06:25,340 --> 00:06:31,880
will get confused because this looks like it's a function body it looks like the curly braces are for

91
00:06:31,880 --> 00:06:36,500
a function it doesn't know that we're trying to implicitly return an object.

92
00:06:36,500 --> 00:06:42,680
If we had something like five here this would implicitly return 5 but when we have an object it gets

93
00:06:42,680 --> 00:06:43,580
confused.

94
00:06:43,580 --> 00:06:49,040
So we do have to put parentheses around it and I'm pretty sure it's going to auto format to multiple

95
00:06:49,040 --> 00:06:51,870
lines anyway but this is valid on one line.

96
00:06:52,530 --> 00:06:54,470
Okay so that's computed properties.

97
00:06:54,470 --> 00:07:00,560
We use the exact same square brackets syntax that we've been using so far but now we can use it directly

98
00:07:00,560 --> 00:07:02,180
inside the object definition.
