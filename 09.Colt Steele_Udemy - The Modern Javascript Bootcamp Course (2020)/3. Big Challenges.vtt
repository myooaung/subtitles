WEBVTT
1
00:00:00.970 --> 00:00:05.650
Whenever I start working on a new project either a personal project toward professional one I really

2
00:00:05.650 --> 00:00:10.960
like to sit down and identify some of the big problems that I anticipate that I'll run into as I'm working

3
00:00:10.960 --> 00:00:12.200
on that project.

4
00:00:12.220 --> 00:00:13.870
So I want to do that right now really quickly.

5
00:00:13.870 --> 00:00:18.700
We're going to identify some of the more challenging aspects of this application and get an idea on

6
00:00:18.760 --> 00:00:20.740
how to solve each one.

7
00:00:20.740 --> 00:00:24.550
I've already gone through it and thought up some the big and challenging things that were probably going

8
00:00:24.550 --> 00:00:26.650
to have to wrestle with as we build this out.

9
00:00:26.820 --> 00:00:30.730
We're going to talk about some these big challenges and then go over some possible solutions to each

10
00:00:30.730 --> 00:00:31.690
of them as well.

11
00:00:32.460 --> 00:00:36.630
The first thing we need to think about is where we're going to actually get some information about different

12
00:00:36.630 --> 00:00:37.540
movies.

13
00:00:37.620 --> 00:00:40.320
I want to show real data inside of this application.

14
00:00:40.320 --> 00:00:43.610
I don't want to just like make up movies or anything like that.

15
00:00:43.650 --> 00:00:48.090
There's probably two obvious ways that we could handle getting some information about movies into our

16
00:00:48.090 --> 00:00:49.220
application.

17
00:00:49.230 --> 00:00:56.070
The first obvious way and this is probably not a good one would be to write in or hard code some information

18
00:00:56.070 --> 00:01:02.040
about a bunch of different movies right into our JavaScript file so we could create a really big array

19
00:01:02.220 --> 00:01:08.570
and write in some movies like maybe the hundred most popular movies out there directly into that array.

20
00:01:08.640 --> 00:01:13.200
That's not really a good solution however because it means that any time that we wanted to add in more

21
00:01:13.200 --> 00:01:17.610
movies we would have to make a change to the source code of our application in general.

22
00:01:17.610 --> 00:01:20.180
That's not really a good thing to do.

23
00:01:20.220 --> 00:01:26.550
So instead I think that we should attempt to fetch some data about movies inside of our javascript code.

24
00:01:26.700 --> 00:01:32.970
When I say Fetch I mean let's make a network request to some outside API so we should try to find some

25
00:01:33.030 --> 00:01:39.420
outside API or essentially a server that will give our application a list of movies that we can search

26
00:01:39.420 --> 00:01:49.580
over or show details from the four that we're going to be making use of an API called the O M DV API.

27
00:01:49.580 --> 00:01:54.410
This is a free API that we can use to get information about different movies.

28
00:01:54.410 --> 00:01:58.300
I'm going to open up a new browser tab and navigate over there right away.

29
00:01:59.620 --> 00:02:01.940
OK so you can read over the documentation here.

30
00:02:01.980 --> 00:02:06.590
This API essentially exposes two different endpoints for us to use.

31
00:02:06.720 --> 00:02:11.520
We scroll down a little bit we can see parameters right here and this will describe the different ways

32
00:02:11.520 --> 00:02:14.520
that we can access movie information.

33
00:02:14.580 --> 00:02:21.540
We can either search for movies that would be reading from this by search category right here or alternatively

34
00:02:21.600 --> 00:02:27.340
we can look up very specific movies if we know the I.D. or the title of a movie.

35
00:02:27.480 --> 00:02:31.650
These two operations match up with our application really really well.

36
00:02:31.650 --> 00:02:33.250
Just think about it for a second.

37
00:02:33.480 --> 00:02:39.810
If we go back over to our mockups over here there's really two different operations that are going on

38
00:02:39.870 --> 00:02:42.210
around these movies inside of application.

39
00:02:42.210 --> 00:02:47.130
The first distinct operation is when we do a search with the autocomplete.

40
00:02:47.130 --> 00:02:51.960
So when the user types in there we need to essentially try to find movies that match a given search

41
00:02:51.960 --> 00:02:52.750
term.

42
00:02:52.840 --> 00:02:55.110
So that's really a searching operation.

43
00:02:55.230 --> 00:03:02.200
We want to find a big list of different movies that match that particular term when a user finds the

44
00:03:02.200 --> 00:03:04.240
appropriate movie and clicks on it.

45
00:03:04.240 --> 00:03:10.510
We then want to fetch some additional information about that very particular movie right there and we're

46
00:03:10.510 --> 00:03:12.990
going to take that additional information and show it on the screen.

47
00:03:13.890 --> 00:03:16.170
So again it's really a two step operation.

48
00:03:16.180 --> 00:03:22.050
We first are going to do a search and then we're going to do a very distinct look up.

49
00:03:22.350 --> 00:03:28.270
Now you might be curious why we have to do both a search and a look up and not just a search by itself.

50
00:03:28.270 --> 00:03:32.410
In other words if we're already doing a search for a bunch of movies and getting information about like

51
00:03:32.500 --> 00:03:37.690
10 different movies as we are putting in results into that autocomplete Can't we just use that same

52
00:03:37.690 --> 00:03:40.600
data that we just fetched to put on the screen.

53
00:03:40.600 --> 00:03:45.640
Well as a quick side note here at the way that a lot of APIs work is to give different sets of data

54
00:03:45.880 --> 00:03:51.790
depending on upon whether you're doing a listing action or a show action or trying to get information

55
00:03:51.790 --> 00:03:53.230
about one record.

56
00:03:53.230 --> 00:03:59.960
Let me tell you more about what I mean in this diagram I've got some imaginary search results from two

57
00:03:59.960 --> 00:04:05.680
different operations on an API on the left hand side is the set of information that we might get back

58
00:04:05.720 --> 00:04:11.450
if we do a search or a listing or what we refer to as an index operation.

59
00:04:11.450 --> 00:04:14.470
So this is what we would see if we tried to get a list of different movies.

60
00:04:14.510 --> 00:04:18.520
We might just get a very limited set of attributes about every movie.

61
00:04:18.560 --> 00:04:22.610
Like just the I.D. of the movie and just the title.

62
00:04:22.640 --> 00:04:27.890
So when we do an index or a search operation we very frequently don't get the full listing of information

63
00:04:27.890 --> 00:04:30.260
about every individual record.

64
00:04:30.260 --> 00:04:35.270
Instead if we want to get the full listing and we want to understand every attribute that a movie has

65
00:04:35.540 --> 00:04:41.630
we usually end up having to do a follow up request where we say hey give me some details about the movie

66
00:04:41.630 --> 00:04:47.680
with I.D. number one and then the API will probably respond with a full set of attributes.

67
00:04:47.690 --> 00:04:53.880
Essentially everything that it knows about that particular movie a very easy way to understand this

68
00:04:53.880 --> 00:04:56.170
is to just think about Google search results.

69
00:04:56.280 --> 00:04:59.780
When you do a google search you don't see an entire web page.

70
00:04:59.820 --> 00:05:05.700
Instead Google just shows you some high level attributes of every web page that it found is that excuse

71
00:05:05.700 --> 00:05:08.110
me that finds that matches your query.

72
00:05:08.340 --> 00:05:12.450
If you want to actually get some details about any given web page you actually have to click it and

73
00:05:12.450 --> 00:05:16.220
so that would be like a selection or a show operation.

74
00:05:16.220 --> 00:05:19.100
So it's going to be the exact same thing with the API we are using.

75
00:05:19.230 --> 00:05:26.190
We're going to have to do initially a search to find some records that match the user search term and

76
00:05:26.190 --> 00:05:33.450
then a follow up request to get information about the very particular movie that a user selected okay.

77
00:05:33.500 --> 00:05:34.650
That's a big challenge number one.

78
00:05:34.670 --> 00:05:35.110
Don't worry.

79
00:05:35.120 --> 00:05:40.160
The other challenges are a little bit easier to understand so the second big thing that we're going

80
00:05:40.160 --> 00:05:43.700
to have to do is to build an auto complete widget from scratch.

81
00:05:43.700 --> 00:05:48.290
There's definitely some pre completed or pre-built widgets out there online that we could download and

82
00:05:48.290 --> 00:05:49.820
use inside of our code.

83
00:05:49.820 --> 00:05:54.730
However it would be a really good learning opportunity to put together our own autocomplete.

84
00:05:54.770 --> 00:05:57.050
So I think we should do that inside of our project.

85
00:05:57.350 --> 00:06:01.850
Now I don't really have a lot to say about this challenge until we really start tackling it and writing

86
00:06:01.850 --> 00:06:02.510
code.

87
00:06:02.510 --> 00:06:08.470
But I think that at least at a minimum you and I should really sit down and really agree on how an auto

88
00:06:08.480 --> 00:06:14.270
complete Widget Works in general if we just tried to write out some autocomplete logic right away.

89
00:06:14.270 --> 00:06:20.120
Well you and I might have really different ideas about how an auto complete works and even like you

90
00:06:20.120 --> 00:06:24.980
personally you might have some idea about how an auto complete works and then you might start writing

91
00:06:24.980 --> 00:06:29.690
some code and then realize that the code you're writing doesn't really match up with what you thought

92
00:06:29.720 --> 00:06:31.840
personally about an auto complete.

93
00:06:31.940 --> 00:06:36.740
So in other words I think that we really just need to sit down and say this is how an auto complete

94
00:06:36.770 --> 00:06:40.900
Widget Works so we're going to do that in a separate video okay.

95
00:06:40.900 --> 00:06:45.280
Last thing here the app would definitely look a lot better with styling and CSX like I mentioned the

96
00:06:45.280 --> 00:06:50.890
starter kit that we're using has a CSX a little bit CSX written into it and it also makes use of a CSX

97
00:06:50.890 --> 00:06:53.480
framework called Walmart CSX.

98
00:06:53.530 --> 00:06:55.860
So this is stuff that has already been wired up for you.

99
00:06:55.900 --> 00:07:01.390
We're going to have a quick discussion too about CSX as it pertains to this application in particular

100
00:07:01.420 --> 00:07:05.490
we're going to take a little look at Velma CSX just really as a side topic.

101
00:07:05.500 --> 00:07:07.240
Again this is of course about JavaScript.

102
00:07:07.330 --> 00:07:09.270
Nonetheless you might be curious about it.

103
00:07:09.310 --> 00:07:14.800
So we'll do a little quick aside just to understand what's happening with this thing okay.

104
00:07:14.830 --> 00:07:15.300
So that's it.

105
00:07:15.310 --> 00:07:16.660
That's our big challenges.

106
00:07:16.660 --> 00:07:20.770
So let's take a pause right here now that we have a better idea of what we're trying to build.

107
00:07:20.770 --> 00:07:23.220
We've identified some of the hard things about this project.

108
00:07:23.290 --> 00:07:25.960
We're gonna get started writing code in the next video.

109
00:07:26.020 --> 00:07:28.280
Two quick pause and I'll see you in just a minute.
