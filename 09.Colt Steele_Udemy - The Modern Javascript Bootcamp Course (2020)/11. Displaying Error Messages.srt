1
00:00:00,750 --> 00:00:06,340
In the last video we extracted require e-mail require a password and so on into a separate helper file.

2
00:00:06,450 --> 00:00:11,780
In that last video I made a little typo when we were putting together the validators start J as file.

3
00:00:11,830 --> 00:00:14,820
It's going to open up validate or stop us at the very top.

4
00:00:14,820 --> 00:00:17,170
I've got that require statement for users repo.

5
00:00:17,460 --> 00:00:20,100
I only reference the repositories directory.

6
00:00:20,100 --> 00:00:24,690
I didn't actually get the user's file inside there so I got to make sure that I fixed up that require

7
00:00:24,690 --> 00:00:26,160
statement right there.

8
00:00:26,160 --> 00:00:30,330
Once I've got that in there I can do a quick test inside my browser just make sure that everything actually

9
00:00:30,330 --> 00:00:31,320
works.

10
00:00:31,520 --> 00:00:32,680
So I will refresh.

11
00:00:32,700 --> 00:00:34,600
Yep I can still see everything.

12
00:00:34,900 --> 00:00:40,220
I'm going to enter in some email and some not matching passwords.

13
00:00:40,570 --> 00:00:44,250
In this case I see a count created even though my passwords weren't matching.

14
00:00:44,420 --> 00:00:48,950
That is ok because right now even though we are getting an error during that validation scheme or that

15
00:00:48,950 --> 00:00:52,810
validation step we're not actually handling the error in any way.

16
00:00:52,810 --> 00:00:56,760
And so that's actually a pretty good segway into what we're gonna do in this video.

17
00:00:56,780 --> 00:01:02,560
So in this video we need to make sure inside of our host request handler that if any error occurred

18
00:01:03,070 --> 00:01:05,370
we need to not create an account for the user.

19
00:01:05,380 --> 00:01:10,600
Instead we need to re render the exact same form that we showed before and we need to display some error

20
00:01:10,600 --> 00:01:11,860
messages inside of it.

21
00:01:11,860 --> 00:01:14,380
So this is really the last big step that we have to go through.

22
00:01:15,370 --> 00:01:20,620
But to take care of this I'm gonna replace that console log with a little if statement.

23
00:01:20,990 --> 00:01:24,710
We're going to check to see whether or not any errors occurred.

24
00:01:24,710 --> 00:01:35,300
To do so we're gonna say if not errors dot is empty so the is empty method is going to be true.

25
00:01:35,380 --> 00:01:39,550
If nothing went wrong we'd only care about the case in which something didn't go wrong.

26
00:01:39,550 --> 00:01:41,710
So that's what we have the not on here.

27
00:01:41,710 --> 00:01:50,000
So if errors is not empty then let's return early and I want to show the same form that we showed previously.

28
00:01:50,000 --> 00:01:52,240
I want to show the sign up template again.

29
00:01:52,480 --> 00:01:55,400
We're gonna do exactly what we did up here when we showed the original form.

30
00:01:55,430 --> 00:01:57,410
We're gonna set back the sign up template.

31
00:01:57,530 --> 00:02:05,610
We're gonna pass in some arguments to customize that template so I'm going to return red dot sent sign

32
00:02:05,610 --> 00:02:05,790
up.

33
00:02:05,790 --> 00:02:13,230
Template I'm gonna pass in the wreck object and I also want to pass in the errors as well so we can

34
00:02:13,230 --> 00:02:16,230
reference all those errors inside of our template and print them out.

35
00:02:19,000 --> 00:02:21,600
Okay so let's now go open up our sign up template file.

36
00:02:21,640 --> 00:02:25,810
We're going to receive that is property we're going to take a look at all the errors inside of it and

37
00:02:25,810 --> 00:02:27,190
print them up inside of our form

38
00:02:30,470 --> 00:02:37,590
go inside my views directory I'll find admin off sign up J.S. then inside of here.

39
00:02:37,740 --> 00:02:44,790
In addition to the Rec object we also are now going to d structure out the heirs object as well before

40
00:02:44,790 --> 00:02:46,710
we start to make use of that heirs object at all.

41
00:02:46,710 --> 00:02:48,690
There's something important I want to mention to you.

42
00:02:48,690 --> 00:02:54,060
Remember that inside of objects we're going to call sign up template so the same function we're just

43
00:02:54,060 --> 00:02:59,510
looking at with only a wreck object and there is no heirs property inside of here.

44
00:02:59,580 --> 00:03:05,730
So only when are there is an error during the Senate process is the heirs property going to be around

45
00:03:05,760 --> 00:03:06,960
inside the sign up template.

46
00:03:07,560 --> 00:03:09,300
So in other words heirs right here.

47
00:03:09,330 --> 00:03:13,530
That might be undefined or it might be an array of heirs.

48
00:03:13,710 --> 00:03:18,120
So we have to write some code inside of here somewhat defensively to check to see if there are any heirs

49
00:03:18,480 --> 00:03:25,390
and only if there are only in that case do we want to start to show them inside of our form so to handle

50
00:03:25,420 --> 00:03:26,580
all that stuff for us.

51
00:03:26,620 --> 00:03:32,410
We're gonna use a little helper function at the top right above the module but experts are going to

52
00:03:32,410 --> 00:03:40,420
write out a helper function called get air so the idea here is that we're going to take in the heirs

53
00:03:41,080 --> 00:03:46,300
as the first argument and then the second argument is going to be the property name that we want to

54
00:03:46,300 --> 00:03:48,060
get an heir for.

55
00:03:48,100 --> 00:03:50,070
We have many different heirs that we might have.

56
00:03:50,080 --> 00:03:54,430
So we might have an heir for email one for password in one for password confirmation.

57
00:03:54,490 --> 00:03:59,710
So I want to go to reach into this heirs object and pull out just the heirs around email and just the

58
00:03:59,710 --> 00:04:02,920
heirs are on password and just the heirs around password confirmation.

59
00:04:02,930 --> 00:04:09,100
So as the second argument I'm going to expect to receive some property name which I'm going to abbreviate

60
00:04:09,160 --> 00:04:09,780
as prop.

61
00:04:10,540 --> 00:04:19,610
So in this case prop is going to be equal to email or password or password.

62
00:04:19,720 --> 00:04:23,780
Confirmation so using the prop we need to take a look at our ears.

63
00:04:23,790 --> 00:04:28,190
See if one error occurred related to email password or password confirmation.

64
00:04:28,190 --> 00:04:32,840
And then if one did it we're going to return the error message to do so.

65
00:04:32,860 --> 00:04:38,950
We're going to first check to see if there are any errors at all if there are no errors then hey we

66
00:04:38,950 --> 00:04:47,570
don't care about this otherwise if there are some errors we're going to return errors dot mapped

67
00:04:50,480 --> 00:04:53,540
at prop dot message.

68
00:04:53,540 --> 00:04:53,830
OK.

69
00:04:53,900 --> 00:04:55,040
Kind of a crazy line right there.

70
00:04:55,040 --> 00:04:59,040
Let's discuss what's going on when we usually work with the ears object right here.

71
00:04:59,040 --> 00:05:02,660
It's actually an array and we saw that many times back at our terminal.

72
00:05:02,690 --> 00:05:08,280
If I go back over I can see that we've got this and the result thing with errors inside of it.

73
00:05:08,510 --> 00:05:12,940
So when we call errors not mapped it's going to essentially take this array right here and give it back

74
00:05:12,940 --> 00:05:15,210
to us as an object.

75
00:05:15,250 --> 00:05:21,070
The keys of that object are going to be the different parameter names and the different values are going

76
00:05:21,070 --> 00:05:26,860
to be this entire object right here so in other words we can kind of break up that statement that we

77
00:05:26,860 --> 00:05:27,950
just put together.

78
00:05:28,240 --> 00:05:30,510
It was not mapped is going to give us back an object.

79
00:05:31,210 --> 00:05:32,410
So it's not mapped.

80
00:05:32,410 --> 00:05:32,770
All right.

81
00:05:32,770 --> 00:05:42,420
A quick comment here is going to end up as an object with keys like e-mail and password

82
00:05:45,440 --> 00:05:52,460
and password confirmation and inside of each of those objects are the objects we're just looking at

83
00:05:52,460 --> 00:05:53,570
inside of our terminal.

84
00:05:53,570 --> 00:06:00,910
So value message RAM and location so the only one that we really care about in this case is NSG.

85
00:06:00,920 --> 00:06:07,470
Short for message and that's got me something like invalid email or whatever password will be like password

86
00:06:07,500 --> 00:06:13,710
to shorts or whatever else and for password confirmation and might be something like passwords must

87
00:06:13,890 --> 00:06:19,120
match so that's what the results of this expression really does.

88
00:06:19,320 --> 00:06:22,850
Ears not mapped gives us this big object.

89
00:06:23,040 --> 00:06:28,960
Then the square brackets with prop is going to look up the appropriate sub object inside their.

90
00:06:29,100 --> 00:06:33,870
And then finally we reference the DOT NSG properties short for message to get the actual string that

91
00:06:33,870 --> 00:06:36,610
we care about.

92
00:06:36,620 --> 00:06:41,750
Now there's one little gotcha inside of here we just discussed why we have to put errors on here.

93
00:06:41,750 --> 00:06:43,520
Well there's actually kind of a second gotcha.

94
00:06:43,520 --> 00:06:48,670
And that is if there is no validation error with the e-mail or with password auth password confirmation

95
00:06:48,950 --> 00:06:52,270
then this entire object is just not going to exist inside of here.

96
00:06:52,310 --> 00:06:53,850
After recall errors dot maps.

97
00:06:54,500 --> 00:06:59,320
So for example if there was no air with email validation that property won't even be there.

98
00:07:00,950 --> 00:07:07,430
Now the reason that's a problem is that if we call errors dot maps and we try to look up email inside

99
00:07:07,430 --> 00:07:07,790
there.

100
00:07:07,790 --> 00:07:12,980
So in other words if prop is equal to email like so then that right there just that part is going to

101
00:07:12,980 --> 00:07:18,580
return undefined or then going to try to access the MSU property on undefined.

102
00:07:18,600 --> 00:07:24,180
And that would lead to the classic error message of cannot read property messages of undefined or something

103
00:07:24,180 --> 00:07:25,780
similar to that.

104
00:07:25,830 --> 00:07:30,900
So in order to handle all these different corner cases we're going to use a little bit of a sheet rather

105
00:07:30,900 --> 00:07:33,070
than doing an if statement right here.

106
00:07:33,180 --> 00:07:39,690
I'm going to instead use a try catch statement.

107
00:07:39,730 --> 00:07:43,210
So now we're going to say OK let's try to get error mapped.

108
00:07:43,450 --> 00:07:48,380
We'll try to look up a given property inside there and we will try to retrieve a message.

109
00:07:48,380 --> 00:07:53,390
There are two locations inside of this little tiny segment right here where something bad can happen.

110
00:07:53,390 --> 00:07:57,830
First off errors might be totally undefined because we might not have any errors object at all.

111
00:07:57,830 --> 00:08:02,890
In addition when we look up the given property there might not be any corresponding object inside there.

112
00:08:02,960 --> 00:08:06,370
So two locations where this line can blow up horribly.

113
00:08:06,710 --> 00:08:11,000
So rather than trying to put in a bunch of if statements to capture all those possibilities we'll just

114
00:08:11,000 --> 00:08:16,280
say you know what if something is going to go wrong with that line of code let it go wrong whatever.

115
00:08:16,340 --> 00:08:18,650
So if something goes wrong I don't care.

116
00:08:18,650 --> 00:08:21,710
Chances are there is no error message to show anyways.

117
00:08:21,710 --> 00:08:25,490
So if we end up in the catch statement it means that we were trying to look up an error message that

118
00:08:25,490 --> 00:08:27,170
doesn't even exist.

119
00:08:27,170 --> 00:08:32,220
So instead I'm just gonna return an empty string.

120
00:08:32,350 --> 00:08:36,280
Now this right here is a little bit of a cheat to use a try catch statement to handle this.

121
00:08:36,460 --> 00:08:42,910
The technically like super correct way would be to do a series of IF statements but there are just many

122
00:08:42,910 --> 00:08:44,050
different cases to check.

123
00:08:44,110 --> 00:08:49,770
So at the end of the day it's little bit easier to just do a try catch okay.

124
00:08:49,800 --> 00:08:56,930
So now last up we're going to call get error after each of our different inputs and when we call get

125
00:08:56,930 --> 00:09:01,160
error we're going to pass on the errors object in the property that we want to look up inside their

126
00:09:01,990 --> 00:09:09,120
SO AFTER input of email I'm going to do dollar sign curly brace get error I'm gonna pass it airs which

127
00:09:09,120 --> 00:09:11,310
remember might be undefined if it is.

128
00:09:11,310 --> 00:09:16,760
That's OK because we're always going to catch and return an empty string and a second argument I'll

129
00:09:16,760 --> 00:09:22,380
say that I want to look up the email and we'll see if there was any validation errors around email and

130
00:09:22,390 --> 00:09:29,850
then going to copy that twice or the second one I'll change email to password because we want to display

131
00:09:29,850 --> 00:09:36,300
errors around the password and then finally at the bottom one password confirmation and that hopefully

132
00:09:36,420 --> 00:09:37,230
is it.

133
00:09:37,230 --> 00:09:41,110
So let's save this going to go back over.

134
00:09:41,290 --> 00:09:46,930
I'm gonna go to my sign up form I'm gonna put in an invalid e-mail I'm gonna put in a password that

135
00:09:46,930 --> 00:09:50,990
is too short and a password that is too long.

136
00:09:51,200 --> 00:09:53,960
Well then sign up and there we go.

137
00:09:53,980 --> 00:09:59,590
So I'm now told right after that email input must be a valid e-mail parser must between four and twenty

138
00:09:59,590 --> 00:10:02,810
characters password must be between four and twenty characters.

139
00:10:02,890 --> 00:10:07,840
So we're now displaying some very helpful validation errors to our user which is exactly what we're

140
00:10:07,840 --> 00:10:11,180
going for all along this looks pretty good.

141
00:10:11,230 --> 00:10:16,030
This is a long video so let's do a wrap up right now and we'll discuss exactly everything we just did

142
00:10:16,240 --> 00:10:16,960
in the next video.
