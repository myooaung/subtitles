1
00:00:00,210 --> 00:00:03,600
Next up we're moving on to our second type of loop in JavaScript.

2
00:00:03,600 --> 00:00:10,230
It's called The while loop the while loop is syntactically simpler and it's more flexible than a for

3
00:00:10,230 --> 00:00:11,130
loop in some ways.

4
00:00:11,790 --> 00:00:13,950
So the basic syntax looks like this.

5
00:00:13,950 --> 00:00:23,010
While some condition is true running this code in here so this condition can be anything you want and

6
00:00:23,010 --> 00:00:25,800
then your code will run while that condition is true.

7
00:00:26,580 --> 00:00:33,720
So if we wanted to rewrite a simple for loop where we have four let I equals zero I less than or equal

8
00:00:33,720 --> 00:00:34,900
to five.

9
00:00:35,070 --> 00:00:42,660
Plus plus and we're printing out i if we wanted to rewrite that in a comment this out where we simply

10
00:00:42,660 --> 00:00:48,840
get zero through five print it out with a while loop we have to do a little bit more work upfront we

11
00:00:48,840 --> 00:00:58,490
need to initialize a variable for our counter I could call it let's go with NUM let's go with J J start

12
00:00:58,490 --> 00:01:11,250
set zero while J is less center equal to 5 in the loop we actually have to add 1 to J J plus plus and

13
00:01:11,250 --> 00:01:20,220
let's consider log J See what we get zero one two three four five from the for loop zero one two three

14
00:01:20,220 --> 00:01:22,830
four five from the while loop.

15
00:01:22,830 --> 00:01:27,870
So in these scenarios where we're simply iterating through numbers zero to five.

16
00:01:27,870 --> 00:01:33,120
I prefer a for loop because we don't have to make the variable up top separately and once we talk about

17
00:01:33,120 --> 00:01:38,700
scope you'll understand why that is it's an advantage even if we stuff to write the same declaration

18
00:01:39,030 --> 00:01:43,780
it's a better practice to not create a variable outside of a loop whenever possible.

19
00:01:43,920 --> 00:01:50,250
So this is not the best use of a while loop but it does work this code in here is only going to run

20
00:01:50,640 --> 00:01:51,630
when this is true.

21
00:01:51,630 --> 00:01:56,520
So the first time through J is zero is zero less than or equal to 5.

22
00:01:56,550 --> 00:01:57,000
Yes.

23
00:01:57,000 --> 00:02:02,300
So we consider log J So we get our first zero then we add 1 to J.

24
00:02:02,310 --> 00:02:06,330
So J is now 1 is J still less than or equal to 5.

25
00:02:06,420 --> 00:02:07,350
Yep.

26
00:02:07,350 --> 00:02:09,330
And you can probably see where I'm going with this.

27
00:02:09,360 --> 00:02:13,110
It continues until J is 5.

28
00:02:13,110 --> 00:02:14,570
That's still less than or equal to 5.

29
00:02:14,580 --> 00:02:17,730
So we print out 5 then we add 1 to J.

30
00:02:17,730 --> 00:02:18,960
It's now 6.

31
00:02:18,990 --> 00:02:21,130
And now the loop is false.

32
00:02:21,240 --> 00:02:24,280
J is 6 which is not less than or equal to 5.

33
00:02:24,300 --> 00:02:25,730
So nothing happens.

34
00:02:25,740 --> 00:02:30,870
Well not it's not that nothing happens nothing in the loop runs the loop is over and any other code

35
00:02:30,900 --> 00:02:34,020
we had down here would run because the loop is complete.

36
00:02:34,350 --> 00:02:39,600
You can think of a while loop sort of like an if statement a conditional plus a loop and if you're simply

37
00:02:39,600 --> 00:02:43,100
trying to generate numbers I prefer to use a for loop.

38
00:02:43,110 --> 00:02:48,660
Most people do but there are other situations where a while loop is great and we go into that in the

39
00:02:48,660 --> 00:02:49,260
next video.
