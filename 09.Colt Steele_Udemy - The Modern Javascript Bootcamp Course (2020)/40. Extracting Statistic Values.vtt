WEBVTT
1
00:00:00.990 --> 00:00:01.290
All right.

2
00:00:01.320 --> 00:00:05.440
So like I said in this video we're going to update our movie template function.

3
00:00:05.460 --> 00:00:09.320
We're going to take a look at some the different properties inside that movie detail object.

4
00:00:09.330 --> 00:00:14.970
Remember movie details an object with some expanded properties that describe a particular movie for

5
00:00:15.060 --> 00:00:19.680
each the different properties or statistics that we're printing out we're gonna turn each of these into

6
00:00:19.680 --> 00:00:22.450
some easy to represent no value.

7
00:00:22.650 --> 00:00:27.030
And then we're going to add each of them as a data property to each of these different articles and

8
00:00:27.150 --> 00:00:31.350
that would make it really easy to compare these different values later on without having to worry about

9
00:00:31.350 --> 00:00:34.390
the order in which they are being presented or anything like that.

10
00:00:35.140 --> 00:00:38.930
So inside of here the first thing we're going to do at the top of the function is take a look at some

11
00:00:38.930 --> 00:00:42.240
of the different properties on movie detail and turn them into a.

12
00:00:42.310 --> 00:00:45.120
Easy to compare number format.

13
00:00:45.140 --> 00:00:50.860
This is unfortunately can be just once again although the challenging so the first number that we're

14
00:00:50.860 --> 00:00:55.990
going to try to generate is a number representation of the box office value.

15
00:00:56.110 --> 00:01:00.430
So I'm going to assign that to dollars because that's essentially how this is being represented.

16
00:01:00.430 --> 00:01:05.870
So I want to take a look at the box office value which currently is like that string right there.

17
00:01:05.920 --> 00:01:11.620
Number six hundred twenty three with commas in it where 533 with commas in it and whatnot.

18
00:01:11.620 --> 00:01:14.080
And I want to turn that into a normal integer.

19
00:01:14.140 --> 00:01:17.930
We can compare very easily tobacco over inside of here.

20
00:01:18.070 --> 00:01:27.920
I can say that dollars is movie detail not box capital B box office so this right here is a string.

21
00:01:28.200 --> 00:01:33.520
And once again it's going to look something like this movie is six twenty nine while blah blah.

22
00:01:34.410 --> 00:01:39.360
So we want to remove the dollar sign and we also want to remove any commas in there as well.

23
00:01:40.110 --> 00:01:44.850
So to do so we can use some normal string manipulation methods on box office.

24
00:01:44.850 --> 00:01:49.590
I'm going to call replace I going to find any dollar sign.

25
00:01:49.590 --> 00:01:56.310
Character and replace it with an empty string which essentially just removes it out of that string

26
00:01:59.950 --> 00:02:03.130
now because I'm using a dollar sign instead of a regular expression right here.

27
00:02:03.130 --> 00:02:04.510
I do have to escape it.

28
00:02:04.570 --> 00:02:07.900
Remember what we spoke about earlier on INSIDE THE COURSE about regular expressions.

29
00:02:07.900 --> 00:02:09.860
Dollar sign is a protected value.

30
00:02:09.970 --> 00:02:15.950
So we have to put a kind of backslash right in front of it so that's going to take the dollar sign out

31
00:02:16.040 --> 00:02:17.750
and just remove it entirely.

32
00:02:17.750 --> 00:02:21.790
Now we need to keep that same step for all the commas in here as well.

33
00:02:21.800 --> 00:02:31.550
So once again color replace I'm going to find all the commas and replace them with empty string that's

34
00:02:31.550 --> 00:02:33.570
going to take out all the commas.

35
00:02:33.590 --> 00:02:40.400
Now I just need to take this string and turn it into a number to do so I can call Haas int on that entire

36
00:02:40.400 --> 00:02:41.450
expression.

37
00:02:41.780 --> 00:02:47.000
That's going to pass an integer out of that string as a quick test as usual.

38
00:02:47.140 --> 00:02:56.610
I'll just try to do a console log of $ I'll save that put back over refresh I'll look for Avengers and

39
00:02:56.610 --> 00:03:00.370
I see a number version of six hundred twenty three million appear.

40
00:03:00.420 --> 00:03:03.920
So now we're gonna repeat that same process for all the different values on here.

41
00:03:03.930 --> 00:03:09.270
We're going to essentially run some custom logic on each of them to turn them into some number that

42
00:03:09.270 --> 00:03:15.770
we can insert for each article element and then compare later on the next one we'll do is the Mega Score.

43
00:03:16.140 --> 00:03:21.000
You might think that Mega Score doesn't need any work whatsoever because it looks like it is a actual

44
00:03:21.210 --> 00:03:21.890
number.

45
00:03:21.900 --> 00:03:26.760
Well if you go back to your network request log and look at the expanded detail request that we're making

46
00:03:27.070 --> 00:03:30.480
met score it actually is a string just about everything inside of your is a string.

47
00:03:31.050 --> 00:03:35.700
So for everyone these different values we need to pass them into a number and then throw them into the

48
00:03:35.700 --> 00:03:36.950
DOM Metta score.

49
00:03:36.970 --> 00:03:43.340
I'm DV rating and I am DV votes all included so the next I'll do I'm going to delete that console log

50
00:03:43.540 --> 00:03:51.770
and I'll do Metta score that's going to pass it out of movie detail not meta.

51
00:03:52.020 --> 00:03:52.410
Score

52
00:03:55.720 --> 00:03:58.830
next what I'll do is how about I am D.B. rating.

53
00:03:58.840 --> 00:04:00.430
This one's little bit more challenging.

54
00:04:00.430 --> 00:04:03.680
Notice how it can possibly have a decimal on it.

55
00:04:03.790 --> 00:04:09.070
So in Javascript there's a difference between past ints and another function called Pass float pass

56
00:04:09.100 --> 00:04:11.620
int is going to prevent us from having a decimal.

57
00:04:11.770 --> 00:04:16.870
But if we use past floats that can take a string that has a decimal on it or in it and turn that into

58
00:04:16.900 --> 00:04:23.050
a fold number with a decimal so for I am D.B. score.

59
00:04:23.220 --> 00:04:31.280
Or is it called grading whereas it yep I am to be writing we're going to do a pass float with movie

60
00:04:31.280 --> 00:04:39.960
detail dot I am D B rating and we can do the same thing for the number of votes as well.

61
00:04:39.980 --> 00:04:43.070
This one can use a pass int because there is no decimal on it.

62
00:04:43.160 --> 00:04:46.450
However we do have to remove all the commas in there.

63
00:04:47.930 --> 00:04:48.490
So I'll do.

64
00:04:48.500 --> 00:04:51.050
I am D.B. votes is pass.

65
00:04:51.080 --> 00:04:59.180
Int movie detail dot I am DV votes it's gonna double check that property name.

66
00:04:59.190 --> 00:05:07.080
Yep that's it and I'm DP votes we need to make sure that we go through that thing and replace any comma

67
00:05:07.110 --> 00:05:09.150
we see with an empty string.

68
00:05:11.280 --> 00:05:19.700
As another quick test let's console logout met a score I am rating and I am DV votes I'll save this

69
00:05:20.540 --> 00:05:22.840
refresh.

70
00:05:22.910 --> 00:05:25.180
I'm going to once again look for the Avengers.

71
00:05:25.220 --> 00:05:30.470
I don't actually like the Avengers by the way I'm a way bigger DC fan but I figure everybody out there

72
00:05:30.470 --> 00:05:32.030
probably knows what Avengers is.

73
00:05:32.030 --> 00:05:33.420
That's why I'm using it here.

74
00:05:33.470 --> 00:05:34.570
Just a quick side note.

75
00:05:35.040 --> 00:05:39.200
Okay so we've got the numbers sixty nine eight and blah blah blah.

76
00:05:39.680 --> 00:05:44.890
So looks like we've got all of our values out of here appropriately so we have to take care of is the

77
00:05:44.980 --> 00:05:46.720
actual value right there.

78
00:05:46.720 --> 00:05:51.790
The number of words now passing a number out of here can be a little bit more challenging.

79
00:05:51.790 --> 00:05:54.140
So as usual quick pause and I'll see you in just a minute.
