1
00:00:00,910 --> 00:00:03,310
In this video we're going to take a look at solution number two.

2
00:00:03,310 --> 00:00:07,180
This is definitely getting way closer to the right way of doing things but there's still going to be

3
00:00:07,210 --> 00:00:09,880
a pretty big issue inside the solution.

4
00:00:09,880 --> 00:00:14,650
So with this approach we're going to continue to do all this else that stuff but we're going to wrap

5
00:00:14,650 --> 00:00:20,520
the L stack call in a promise remember A promise is another way of handling asynchronous code.

6
00:00:20,680 --> 00:00:26,000
It is much more convenient in general for us as developers to work with than callback based functions.

7
00:00:26,050 --> 00:00:30,760
So we're going to take the L step function wrap it with the promise so we can essentially interact with

8
00:00:30,800 --> 00:00:38,020
Alstead with a promise we can then use the async await syntax to process the L Stat call one at a time.

9
00:00:38,170 --> 00:00:41,650
So in other words we're gonna end up with this in a scenario like this right here.

10
00:00:41,650 --> 00:00:45,550
We're going to make L stack called Number One and we're going to wait for that thing to be resolved

11
00:00:45,820 --> 00:00:47,990
before we get our callback invoked.

12
00:00:48,070 --> 00:00:52,630
In this case there's not really any callback per say we're essentially just getting some data back from

13
00:00:52,660 --> 00:00:58,920
LC at and we'll move on to Step number two three and four and then finally at the very end we can somehow

14
00:00:58,920 --> 00:01:03,030
keep track of each of these different statements all the data that's coming back and then do our console

15
00:01:03,030 --> 00:01:07,740
logs at the very end and we'll always know that we are doing all these different calls in the same exact

16
00:01:07,770 --> 00:01:09,600
order okay.

17
00:01:09,630 --> 00:01:11,200
So let's give this a shot.

18
00:01:11,320 --> 00:01:13,230
I'm gonna go back over to my editor.

19
00:01:13,450 --> 00:01:17,100
We have a lot of code inside of here from the number one solution.

20
00:01:17,260 --> 00:01:22,360
None of this stuff is really relevant anymore so I'm gonna take everything after where everything inside

21
00:01:22,360 --> 00:01:28,390
of the Read dir function right here is everything from all stats I can go down to just about the bottom

22
00:01:29,510 --> 00:01:31,350
and delete all that.

23
00:01:31,410 --> 00:01:39,750
Now all I have left is the FSA require the read directory the if statement and that's pretty much it.

24
00:01:41,240 --> 00:01:41,520
Okay.

25
00:01:41,560 --> 00:01:42,600
It's now inside of here.

26
00:01:42,610 --> 00:01:46,150
We need to somehow wrap the L stat function inside of a promise.

27
00:01:46,150 --> 00:01:52,180
So we want to take that l start implementation and give ourselves a interfaced or a promise based interface

28
00:01:52,180 --> 00:01:53,060
to it.

29
00:01:53,080 --> 00:01:54,970
There are several different ways we can do this.

30
00:01:55,000 --> 00:01:55,470
And.

31
00:01:55,540 --> 00:01:58,260
Well we're gonna take a look at all them.

32
00:01:58,270 --> 00:02:03,640
So option number one is for us to manually take a look at the L step function and wrap it into promise

33
00:02:03,640 --> 00:02:06,990
ourselves to do so at the very bottom the file.

34
00:02:07,000 --> 00:02:16,720
I'm gonna say const l stats is never going to receive our file name that we want to run the L stat function

35
00:02:16,720 --> 00:02:23,980
on and then we're going to immediately return from this a new Rama's object.

36
00:02:24,090 --> 00:02:29,580
Remember that a promise we're going to pass in a function that function is going to be automatically

37
00:02:29,580 --> 00:02:39,200
and instantly invoked with two arguments that we refer to as resolve and reject then instead of here

38
00:02:39,230 --> 00:02:42,940
we're gonna write all of our code to run our actual l stats.

39
00:02:42,950 --> 00:02:51,310
So I'm going to call f s dot l stat I'm gonna pass in the given file name and then our callback with

40
00:02:51,310 --> 00:02:57,270
the air object in the actual stats data that we care about so then inside of here we'll check to see

41
00:02:57,270 --> 00:02:59,250
if there is an error if there is.

42
00:02:59,250 --> 00:03:01,100
That means that something did not go right.

43
00:03:01,110 --> 00:03:03,360
And so we probably don't want to do anything else.

44
00:03:03,360 --> 00:03:07,280
We want to reject the promise to make it really clear that something went wrong.

45
00:03:07,580 --> 00:03:14,220
So inside of here I'll say reject e are like so otherwise.

46
00:03:14,290 --> 00:03:17,920
If we do not enter that if statement that means that we do have some stats data.

47
00:03:17,980 --> 00:03:24,630
So I will instead resolve the promise with the stats object okay.

48
00:03:24,640 --> 00:03:25,360
And that's pretty much it.

49
00:03:25,390 --> 00:03:30,380
So that is method number one of wrapping l stat inside of a promise.

50
00:03:30,400 --> 00:03:34,180
Now just because we are doing this right now I'm going to show you the other two ways of wrapping l

51
00:03:34,200 --> 00:03:36,140
stat in the problems very quickly.

52
00:03:36,280 --> 00:03:41,980
So method number two I'm going to come at this thing out met the number two we would go back up here

53
00:03:41,990 --> 00:03:49,400
at the top and I would import or some you require in a library or a module from node called you till

54
00:03:50,940 --> 00:03:58,410
I'd say require you tell let's go take a look at the documentation for the utility module.

55
00:03:58,420 --> 00:04:04,640
Really quickly so I'll go back over my browser on the left hand side again to scroll down to the utility

56
00:04:04,640 --> 00:04:05,110
section

57
00:04:08,110 --> 00:04:13,460
and then inside of here we're gonna find that there is a function called promise of fi the promise of

58
00:04:13,460 --> 00:04:14,090
fi function.

59
00:04:14,260 --> 00:04:15,310
Well hey look at that.

60
00:04:15,310 --> 00:04:16,580
That's actually kind of interesting.

61
00:04:16,600 --> 00:04:20,590
They've got a demonstration right here of pretty much the exact function we are trying to use.

62
00:04:20,800 --> 00:04:25,990
So we can use the utility promise if I function we can pass in some other function and it's going to

63
00:04:25,990 --> 00:04:32,860
give us back a version of that function that interacts with a promise based interface instead of the

64
00:04:32,860 --> 00:04:34,950
usual callback based interface.

65
00:04:34,990 --> 00:04:39,700
So essentially the promise of five function does exactly what you and I just wrote out a second ago.

66
00:04:39,700 --> 00:04:45,120
It wraps the given function in this case l stats in a promise automatically.

67
00:04:45,340 --> 00:04:51,340
You of fi function only works correctly if the function that we're trying to wrap takes a callback as

68
00:04:51,340 --> 00:04:58,030
the last argument and has a error and value kind of style callback as well which as we mentioned before

69
00:04:58,030 --> 00:05:00,970
is just about every single callback in the node J.S. world.

70
00:05:01,100 --> 00:05:06,110
So we end up being able to use promised fi in many different locations okay.

71
00:05:06,150 --> 00:05:14,220
So to use this function we would say up here const l stat is you still dot rom mystify and we would

72
00:05:14,220 --> 00:05:16,890
pass in the function that we want to wrap in a promise.

73
00:05:16,950 --> 00:05:18,960
So that is FSS dot l step

74
00:05:23,230 --> 00:05:23,690
okay.

75
00:05:23,830 --> 00:05:25,870
So that is method number two right there.

76
00:05:26,010 --> 00:05:33,250
But a comment says that the number two I'll go back down to the bottom one just for administrative purposes

77
00:05:33,280 --> 00:05:35,960
and mentioned that is method number one.

78
00:05:35,980 --> 00:05:40,540
Now the last way that we can interact with L start with the promise and this one is by far the easiest

79
00:05:40,900 --> 00:05:47,230
if we go back over to the documentation for the file system module we can then do a search on this page

80
00:05:47,230 --> 00:05:53,530
for F S dot promises we might have to hit enter one or two times.

81
00:05:53,590 --> 00:05:57,130
So this is what we're looking for we're looking for F S promises API.

82
00:05:57,710 --> 00:06:05,470
So it turns out the the F S module itself has a sub kind of module in it available as F S dot promises

83
00:06:05,700 --> 00:06:12,720
it has just about all the different functions that the FSA module has in a promise based interface so

84
00:06:13,150 --> 00:06:17,790
everything at the top up here as we scroll through this big list of F S functions just about everything

85
00:06:17,790 --> 00:06:18,520
inside of here.

86
00:06:18,600 --> 00:06:23,350
There is an alternate implementation of every single one of them instead of taking a callback.

87
00:06:23,370 --> 00:06:28,590
The ultimate implementation return promises and that's how we interact with these other version these

88
00:06:28,590 --> 00:06:35,080
functions so if I scroll down inside of this top section a little bit I'll eventually come to F S promises

89
00:06:35,080 --> 00:06:42,040
API and we can scroll through here and we'll see that there is for example F S promises not access and

90
00:06:42,040 --> 00:06:48,830
copy file and open open dir reader stat l stat right there.

91
00:06:48,850 --> 00:06:53,800
So these are all the same functions but they just return a promise instead of taking a callback.

92
00:06:53,830 --> 00:06:57,160
So just a different way of interfacing with them.

93
00:06:57,280 --> 00:07:02,140
That is option number three for working with L start with a promise based approach.

94
00:07:02,140 --> 00:07:15,450
We could do something like method number three would be const l stat is F S promises l stat or alternatively

95
00:07:15,450 --> 00:07:21,340
we can use a little bit of D structuring here but some curly braces around the variable and then remove

96
00:07:21,370 --> 00:07:24,100
L stat at the very end.

97
00:07:24,220 --> 00:07:28,030
So I know that's probably a little bit more than you ever wanted to hear but it is important to hear

98
00:07:28,030 --> 00:07:32,280
this at one time or another at the end of the day whenever we're working with all these different.

99
00:07:32,280 --> 00:07:37,360
No j J.S. functions that take callbacks as the third arguments we can turn them into these kind of promise

100
00:07:37,360 --> 00:07:43,420
based implementations either by doing it ourselves very manually using the built in Rumsfeld function

101
00:07:44,140 --> 00:07:49,690
or seeing if there actually is a promise based implementation of the function that we are looking for.

102
00:07:49,690 --> 00:07:54,490
In many cases there are still modules inside the node standard library that do not offer this kind of

103
00:07:54,490 --> 00:07:55,990
promise based interface.

104
00:07:56,020 --> 00:08:00,580
So sometimes we do have to fall back to method number one or bet the number to OK.

105
00:08:00,650 --> 00:08:03,550
So the section has gone on for just a little bit.

106
00:08:03,560 --> 00:08:08,510
Quick pause we'll come back in just a moment and continue implementing solution number two.
