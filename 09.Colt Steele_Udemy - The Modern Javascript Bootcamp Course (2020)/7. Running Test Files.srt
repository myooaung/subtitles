1
00:00:01,040 --> 00:00:04,550
Now that we've collected all the different test files we care about we're going to iterate through them

2
00:00:04,850 --> 00:00:06,750
and invoke each one of them in turn.

3
00:00:06,760 --> 00:00:09,930
And that should run all the tests and each the given files.

4
00:00:09,930 --> 00:00:13,630
So I'm gonna add in a new method to my class runner.

5
00:00:13,670 --> 00:00:18,900
I'll call the new method run tests and notice that we're using the async keyword here because we're

6
00:00:18,900 --> 00:00:24,660
definitely gonna eventually have some asynchronous code inside so inside of run tests we're going to

7
00:00:24,690 --> 00:00:30,890
iterate through our test files so we'll do a four letter file of this dot test files.

8
00:00:32,060 --> 00:00:38,190
And remember that file is going to be an object that has a name property and that name property is going

9
00:00:38,190 --> 00:00:41,850
to be the absolute path of the file.

10
00:00:41,880 --> 00:00:45,630
Now the question is how are you going to actually execute that file we care about.

11
00:00:46,530 --> 00:00:50,760
You might think that we're going to use that same child process stuff that we used a little bit ago

12
00:00:50,790 --> 00:00:52,560
on one of the previous projects.

13
00:00:52,650 --> 00:00:57,780
The child process module inside the node standard library is all about creating a new and separate process

14
00:00:57,990 --> 00:00:59,980
from the current program that we are running.

15
00:01:00,060 --> 00:01:01,980
That's not what we want to do in this case.

16
00:01:02,160 --> 00:01:07,560
In this case we want to take this file and execute all the code inside of it in the same context as

17
00:01:07,590 --> 00:01:12,930
our runner stuff that's going to make it a lot easier to share information between the test file and

18
00:01:12,930 --> 00:01:14,490
our test runner.

19
00:01:14,490 --> 00:01:18,230
Once we start to write out a little bit more code here you'll start to understand what I'm getting at

20
00:01:18,240 --> 00:01:24,100
when I say that in order to actually execute the file we will simply call require on it.

21
00:01:24,120 --> 00:01:33,020
So we'll do file dot name so when we require in the file node is going to find a file load up all the

22
00:01:33,020 --> 00:01:36,120
code inside of it and execute all the code inside.

23
00:01:36,140 --> 00:01:39,970
So that's how we're going to run all of our different test files okay.

24
00:01:39,970 --> 00:01:42,110
So at this point let's save this.

25
00:01:42,190 --> 00:01:46,540
We're going to go back over to our index not just file.

26
00:01:46,670 --> 00:01:49,170
We've got our little test harness right here.

27
00:01:49,220 --> 00:01:54,290
So after we collect all of our different files I can remove that console log and we'll do a runner dot

28
00:01:54,710 --> 00:01:58,130
run tests.

29
00:01:58,230 --> 00:02:01,770
Now I gotta tell you right now as soon as we run this we're going to very quickly see an error message.

30
00:02:01,770 --> 00:02:02,430
That's OK.

31
00:02:02,460 --> 00:02:08,840
I just want to make sure that well we actually somewhat execute the code inside of the given file so

32
00:02:08,850 --> 00:02:13,780
I can go back over to my terminal and again inside the movie's dash testing directory remember inside

33
00:02:13,780 --> 00:02:19,420
of here we've got that test folder and inside of it is the autocomplete stuff that we just put together

34
00:02:19,450 --> 00:02:26,620
a little bit ago so I'm going to run inside of movies testing our TMG command.

35
00:02:26,800 --> 00:02:28,150
And sure enough I get a big error.

36
00:02:28,150 --> 00:02:30,310
Well let's take a look at the air itself.

37
00:02:30,370 --> 00:02:31,760
We scroll all the way up.

38
00:02:32,080 --> 00:02:36,190
We're going to see reference error before each is not defined.

39
00:02:37,000 --> 00:02:39,100
So what does this error mean.

40
00:02:39,100 --> 00:02:46,540
Well if we go and open up that test file really quickly inside of movies testing.

41
00:02:46,640 --> 00:02:49,240
So here's the autocomplete test start just file.

42
00:02:49,360 --> 00:02:55,990
You will recall that inside of here we defined the before each function or we made use of it now before

43
00:02:56,000 --> 00:02:59,990
each function is provided to us by Moka in the global scope.

44
00:02:59,990 --> 00:03:05,540
So whenever we made use of Moka to run our test files Moka defined before each globally.

45
00:03:05,600 --> 00:03:08,090
And so we were able to call it without any error.

46
00:03:08,330 --> 00:03:13,550
So the error that we just saw a moment ago when we ran TMC means that we successfully executed everything

47
00:03:13,550 --> 00:03:16,010
inside this file or at least attempted to.

48
00:03:16,010 --> 00:03:21,160
But when we tried to execute everything we eventually got down to this before each statement.

49
00:03:21,170 --> 00:03:24,690
And that's where node said hey wait before each isn't defined.

50
00:03:24,770 --> 00:03:28,870
And so through the error message that we just saw before each is not defined anymore.

51
00:03:28,880 --> 00:03:34,580
Because we're not running this file with Moka again Moka is what defined the before each function.

52
00:03:34,580 --> 00:03:40,440
So in other words the error that we just saw this before each is not defined that is good.

53
00:03:40,470 --> 00:03:42,660
That means that we have loaded up this file.

54
00:03:42,700 --> 00:03:48,510
We've loaded up the autocomplete test out J File and executed everything inside there.

55
00:03:48,540 --> 00:03:50,370
So really that's a huge step.

56
00:03:50,400 --> 00:03:55,770
Now really the only other thing we have to do is start to grow implement some actual testing logic or

57
00:03:55,770 --> 00:03:58,090
something to allow us to write tests.

58
00:03:58,110 --> 00:04:02,040
So from here on out a lot of the logic that we're going to write is going to be very similar to that

59
00:04:02,040 --> 00:04:07,470
first stab that we took at testing a little bit ago where we wrote out our own IT function or the our

60
00:04:07,470 --> 00:04:10,130
own test function from scratch.

61
00:04:10,170 --> 00:04:12,690
Let's take a pause right here and continue in just a moment.
