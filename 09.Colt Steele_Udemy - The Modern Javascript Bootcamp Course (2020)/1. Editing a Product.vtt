WEBVTT
1
00:00:00.790 --> 00:00:02.260
Let's continue working on our poster.

2
00:00:02.260 --> 00:00:06.910
Quest handler for the edit formed by adding in some validators some appropriate middleware wears and

3
00:00:06.910 --> 00:00:08.500
all that kind of good stuff.

4
00:00:08.570 --> 00:00:09.520
Then sign up here.

5
00:00:09.580 --> 00:00:13.130
We're going to add in a couple of more middle wears after require off.

6
00:00:13.280 --> 00:00:17.460
I'm gonna first begin by giving myself just a little bit of space to work with.

7
00:00:17.630 --> 00:00:22.970
Then after require off we're gonna first indicate that we might be receiving a image upload so I'll

8
00:00:22.970 --> 00:00:30.210
do upload that single and we're going to watch for a file uploaded under the image property.

9
00:00:30.410 --> 00:00:35.330
Remember back over here inside of our template we've got that input with the Name property of image

10
00:00:35.690 --> 00:00:38.050
because we gave that input a name of image.

11
00:00:38.060 --> 00:00:41.530
That is why we are putting in image right there.

12
00:00:41.680 --> 00:00:48.480
So that string is going to be whatever the name property is of the file type input and after that we

13
00:00:48.480 --> 00:00:50.560
can add in some different validators.

14
00:00:50.610 --> 00:00:55.050
This is finally a time where we're going to be able to use or reuse some different validator so we've

15
00:00:55.050 --> 00:00:56.260
already put together.

16
00:00:56.310 --> 00:01:00.820
So in this case we're going to use the same validators we have up here on NEW.

17
00:01:00.900 --> 00:01:03.920
So we're going to require a title and require a price.

18
00:01:03.990 --> 00:01:08.580
If you don't recall what those different validators do you can always open up the validators file and

19
00:01:08.580 --> 00:01:19.560
take a look at the definition of both them going to do require title and require price then we'll also

20
00:01:19.620 --> 00:01:24.600
reference that middleware that we put together to handle ears automatically and attempt to re render

21
00:01:24.600 --> 00:01:25.240
our template.

22
00:01:25.320 --> 00:01:31.590
If anything went wrong with the required title and require price so we will once again do handle errors.

23
00:01:31.710 --> 00:01:36.960
And I remember when we call that middleware you have to provide a reference to the actual template that

24
00:01:36.960 --> 00:01:41.100
we want to show again so we'll do products at it.

25
00:01:41.100 --> 00:01:41.610
Template

26
00:01:45.800 --> 00:01:46.760
okay.

27
00:01:46.950 --> 00:01:49.590
Now there is going to be a very small issue with products.

28
00:01:49.710 --> 00:01:54.810
Edit template right here because remember right now whenever we make use of the handle is middleware

29
00:01:55.340 --> 00:01:59.430
all we really take at present is that is object and pass it through.

30
00:01:59.520 --> 00:02:05.130
But now in order to show our template correctly we also have to have a reference to the products that

31
00:02:05.130 --> 00:02:06.950
we're trying to eventually show.

32
00:02:06.990 --> 00:02:08.090
Remember the edit template.

33
00:02:08.100 --> 00:02:09.010
Here it is right here.

34
00:02:09.030 --> 00:02:13.740
It expects to receive the product it wants to take some properties out there and use it inside of our

35
00:02:13.740 --> 00:02:18.690
template but our middleware that we currently have when we tried to run that template function like

36
00:02:18.690 --> 00:02:24.840
I said unfortunately it does not actually make use or pass through the product or any other data besides

37
00:02:24.840 --> 00:02:26.440
the Aras object.

38
00:02:26.460 --> 00:02:32.080
So right now this code of handle with products that it template is not going to work as expected.

39
00:02:32.100 --> 00:02:35.970
If we end up having a validation error that's something we just need to be aware of and we're going

40
00:02:35.970 --> 00:02:39.790
to have to possibly fix it at some point in time okay.

41
00:02:39.820 --> 00:02:44.700
So having said that we now have all of our different Middleware is wired up correctly here.

42
00:02:44.810 --> 00:02:46.460
It's now inside my function.

43
00:02:46.530 --> 00:02:50.840
Let's add in a little bit of code to take whatever changes were passed to us.

44
00:02:50.850 --> 00:02:55.770
So like the updated titled price and possibly image as well we're going to apply all those different

45
00:02:55.770 --> 00:02:59.670
updates into our products repo for the particular product.

46
00:02:59.730 --> 00:03:04.800
I first want to give you a quick reminder of how we update a product in general so inside of our repositories

47
00:03:04.800 --> 00:03:09.500
directory I'll find the repository file because remember products is really just extending repository.

48
00:03:09.540 --> 00:03:15.780
So right now in order to figure out what our products repo does we really look at repository J.S. then

49
00:03:15.780 --> 00:03:18.660
inside of here we've got that update function.

50
00:03:18.690 --> 00:03:23.640
The first argument to it is going to be the idea the record we want to update and then the second argument

51
00:03:23.640 --> 00:03:29.590
is going to be an object that has all the updated attributes that we care about.

52
00:03:29.750 --> 00:03:36.190
So back over here we're going to say we're gonna take all of our rect body object.

53
00:03:36.260 --> 00:03:41.760
So remember that's gonna contain the updated title in the updated price and we're going to check to

54
00:03:41.760 --> 00:03:45.420
see if there was a file included as well.

55
00:03:45.420 --> 00:03:50.460
So here's what we're going to do I'm gonna write out const changes is going to be rect body.

56
00:03:50.460 --> 00:03:54.960
The only reason I'm doing this is to just say hey this represents the different changes or the updates

57
00:03:54.960 --> 00:03:57.120
we're getting from our form.

58
00:03:57.160 --> 00:04:00.580
Well then check to see if an image was included inside the request.

59
00:04:00.640 --> 00:04:05.560
So did we get receive an image if we received an image that means that we need to apply that update

60
00:04:05.560 --> 00:04:07.150
to this changes object.

61
00:04:07.240 --> 00:04:12.070
Otherwise if there was no image that was uploaded we're gonna say okay whatever gets the user didn't

62
00:04:12.070 --> 00:04:14.490
want update the image or anything like that.

63
00:04:14.530 --> 00:04:22.390
We'll say if rect file if a file was provided in this request then change dot image.

64
00:04:22.450 --> 00:04:28.140
So this will be the new image that we want to set inside of our repository will be wrecked on file dot

65
00:04:28.150 --> 00:04:33.540
buffer to string a sixty four.

66
00:04:33.580 --> 00:04:37.580
So we spoke about this statement right here a pretty good amount back when we discussed creating a product

67
00:04:38.240 --> 00:04:45.450
number right there so wrecked out file is the file that was uploaded buffer is the kind of like an array

68
00:04:45.450 --> 00:04:46.570
with all the raw data.

69
00:04:46.610 --> 00:04:54.040
So we're gonna take all the data inside there and encoded as a base 64 string so then after that we

70
00:04:54.040 --> 00:04:57.310
can attempt to apply this update to our products repository.

71
00:04:57.310 --> 00:05:03.080
So we'll do in a wait products repo we will call update.

72
00:05:03.370 --> 00:05:06.710
The first argument is going to be the idea of the record that we want to update.

73
00:05:06.730 --> 00:05:10.070
So we'll do a wreck dot prams dot I.D. number.

74
00:05:10.120 --> 00:05:16.840
That is where we get our ideas from out of the user El and the second argument is going to be an object

75
00:05:16.840 --> 00:05:18.820
with all the changes we want to apply.

76
00:05:18.900 --> 00:05:26.110
Will be changes one thing to keep in mind here is that our update function is one of the few repository

77
00:05:26.110 --> 00:05:28.640
functions that might throw in air.

78
00:05:28.690 --> 00:05:33.550
So if we could take a look at repository J.S. again if we attempt to update a record and we are not

79
00:05:33.580 --> 00:05:38.200
able to find a record of that I.D. we end up throwing the error message you see right there.

80
00:05:38.200 --> 00:05:40.480
So we need to make sure that we handle that in some fashion.

81
00:05:41.570 --> 00:05:46.430
So right now I'm just going to wrap the weight statement in a try catch

82
00:05:52.130 --> 00:05:56.930
and if something goes wrong with that update I'm just going to assume 100 percent that is because we

83
00:05:56.930 --> 00:05:59.330
probably were not able to find the appropriate item.

84
00:05:59.450 --> 00:06:07.260
So I will return with a red dot sent could not find item so we will eventually come back and kind of

85
00:06:07.260 --> 00:06:12.480
improve this error handling because ideally this error should be shown in our form as opposed to just

86
00:06:12.480 --> 00:06:17.280
sending back a plain text string of could not find item or we're just going to leave this as is for

87
00:06:17.280 --> 00:06:19.750
now okay.

88
00:06:19.770 --> 00:06:25.380
So then assuming that everything goes well for that update statement will then redirect the user

89
00:06:27.980 --> 00:06:36.790
redirect back to admin slash products and that should be at okay.

90
00:06:36.790 --> 00:06:38.330
So I think we're ready for a quick test here.

91
00:06:38.350 --> 00:06:44.020
Now remember that if we enter in a form or some update that is not valid we're probably gonna see a

92
00:06:44.020 --> 00:06:49.240
crash once again because our middleware of handle errors is not correctly trying to call the template

93
00:06:49.240 --> 00:06:52.350
function with the product or whatever else we care about.

94
00:06:52.360 --> 00:06:53.580
So that's just something to be aware of.

95
00:06:54.950 --> 00:06:55.190
All right.

96
00:06:55.190 --> 00:07:03.620
So let's go back over I'm going to go back to my product's listing page I'll attempt to edit this first

97
00:07:03.620 --> 00:07:04.330
record right here.

98
00:07:05.330 --> 00:07:12.080
And I'm going to put in about a new product and I'll give it a price of ninety nine.

99
00:07:12.420 --> 00:07:13.410
Then I'll submit it.

100
00:07:13.650 --> 00:07:14.250
And there we go.

101
00:07:14.530 --> 00:07:16.860
So I've got the title and the price on there as well.

102
00:07:17.840 --> 00:07:20.740
At this point we could definitely also test out the image upload.

103
00:07:20.900 --> 00:07:25.470
But on the flip side we don't actually have the ability to see any images just yet.

104
00:07:25.530 --> 00:07:29.780
So I'm not gonna worry about testing out the image upload until we actually have some location inside

105
00:07:29.780 --> 00:07:32.420
of our app where the images get displayed at that point.

106
00:07:32.420 --> 00:07:36.170
Well then come back and make sure that we can actually edit them successfully.

107
00:07:36.170 --> 00:07:36.380
All right.

108
00:07:36.390 --> 00:07:41.130
Well overall I'd say that our edit functionality is looking pretty good with the one exception as we

109
00:07:41.130 --> 00:07:41.820
just discussed.

110
00:07:41.820 --> 00:07:46.800
If I try to put in some invalid title right here like let's say a title that has no characters inside

111
00:07:46.800 --> 00:07:47.660
of it.

112
00:07:47.820 --> 00:07:48.110
Yeah.

113
00:07:48.120 --> 00:07:55.110
We end up getting an error and this air is because once again our middleware handle errors is not passing

114
00:07:55.110 --> 00:07:56.780
through the product we care about.

115
00:07:56.880 --> 00:07:58.500
So we need to once again figure that out.

116
00:07:58.500 --> 00:07:59.960
Let's do that in just a moment.
