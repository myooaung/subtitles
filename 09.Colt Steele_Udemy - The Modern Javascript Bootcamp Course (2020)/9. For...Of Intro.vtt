WEBVTT
1
00:00:00.450 --> 00:00:06.660
Next up we have a new loop called the for of loop so it's new to us in this course but it's also new

2
00:00:06.660 --> 00:00:07.830
to JavaScript.

3
00:00:07.830 --> 00:00:13.680
It's only been around a couple of years and unfortunately it is not supported in Internet Explorer.

4
00:00:14.040 --> 00:00:20.370
If we go to MDA and scroll down to the bottom there's a whole line of red right there for Internet Explorer.

5
00:00:20.370 --> 00:00:26.010
So again it's not a reason to ignore it or to stop using four of it's just something to be aware of.

6
00:00:26.070 --> 00:00:31.620
It's not going to work automatically in every single browser but Chrome Firefox Safari they all support

7
00:00:31.620 --> 00:00:32.390
it.

8
00:00:32.430 --> 00:00:38.820
So for of is a really simple syntax and it addresses a common use case for loop where we want to iterate

9
00:00:38.850 --> 00:00:44.010
over and editable and ignorable could be something like an array or a string.

10
00:00:44.010 --> 00:00:47.010
There are other items that are ignorable in JavaScript.

11
00:00:47.010 --> 00:00:49.170
That's something we'll talk about later as well.

12
00:00:49.170 --> 00:00:51.000
I hate saying that but it's true.

13
00:00:51.000 --> 00:00:55.130
For now we'll work with arrays and strings so the syntax is super clean.

14
00:00:55.740 --> 00:01:02.250
Instead of creating a for loop a regular for loop where we generate a variable let's say I set to zero

15
00:01:02.310 --> 00:01:08.340
we add one to AI each time we keep going while I is less than the array length instead of that we simply

16
00:01:08.340 --> 00:01:17.640
write for and then some variable of ignorable so of array and that variable we assign will store each

17
00:01:17.700 --> 00:01:21.280
individual element of the array or of the string.

18
00:01:21.360 --> 00:01:27.030
So here's an example we have an array called Sub red it's just some strings of different red sub red

19
00:01:27.030 --> 00:01:34.170
it's using a regular old for loop I would have to make a variable I while I is less than sub red it's

20
00:01:34.450 --> 00:01:36.530
dot length I plus plus.

21
00:01:36.540 --> 00:01:39.770
And then let's just cancel that log each individual element.

22
00:01:39.780 --> 00:01:41.550
So that would be sub credits of I.

23
00:01:42.960 --> 00:01:46.500
So we're only using I here to access each element.

24
00:01:46.500 --> 00:01:47.720
It's kind of a lot of work.

25
00:01:47.790 --> 00:01:53.890
It's not very attractive or clean to look at especially if we're only if we only care about soccer pop

26
00:01:53.890 --> 00:01:58.440
heads cringe and books we don't care about the numbers we don't care about the indices we just need

27
00:01:58.440 --> 00:02:01.250
them in order to access those elements.

28
00:02:01.290 --> 00:02:07.500
So another alternative is the four up and that looks like this for light and then we decide on a variable

29
00:02:07.500 --> 00:02:11.460
name and the this variable is going to represent each element.

30
00:02:11.460 --> 00:02:17.870
So the name doesn't matter again just like I you could use I but that's generally not a good idea.

31
00:02:17.880 --> 00:02:23.880
Most people when they see I are going to imagine or assume that it's an a number an index.

32
00:02:23.880 --> 00:02:34.370
So I would go with something like sub or Sub Reddit or element E L I'll go with sub of subsets console

33
00:02:34.370 --> 00:02:43.720
out log sub so we don't have to access the array using square brackets in a number sub is going to automatically

34
00:02:43.720 --> 00:02:50.140
have each element it's stored in it each time through the loop if I run my code over here we loop twice

35
00:02:50.140 --> 00:02:55.660
the first time using a for loop the second time using a for of loop hopefully you can see this is a

36
00:02:55.660 --> 00:03:02.870
dramatic improvement it's a lot easier to read it kind of approximates English instead of this we're

37
00:03:02.950 --> 00:03:08.800
generating these random or not random but these ugly indices and we're not using them in any way so

38
00:03:08.800 --> 00:03:14.920
I much prefer 4 of which is what I was added in not because I prefer it but because it's such a common

39
00:03:14.920 --> 00:03:20.110
scenario where you need to iterate over elements in an array or a string and you don't need those numbers

40
00:03:20.500 --> 00:03:21.820
so why bother.

41
00:03:21.820 --> 00:03:27.520
So this was added in as proposed and added in to the spec and four of we'll work on anything that is

42
00:03:27.610 --> 00:03:29.440
ignorable in JavaScript.

43
00:03:29.440 --> 00:03:37.990
Another example of an admirable is a string so we could do a for let character or char car of and then

44
00:03:37.990 --> 00:03:38.910
some string.

45
00:03:38.920 --> 00:03:42.610
How about hello everyone.

46
00:03:42.610 --> 00:03:43.750
Actually you know that's.

47
00:03:43.920 --> 00:03:45.220
Let's do let's do.

48
00:03:45.220 --> 00:03:46.350
Cock a doodle do.

49
00:03:46.360 --> 00:03:52.510
I don't know if that's how you spell that noise that sound and then let's just consider it log character

50
00:03:53.320 --> 00:03:58.060
and let's do car char dot to uppercase.

51
00:03:58.180 --> 00:04:05.470
So each time we're going to uppercase that character and then we go cock a doodle doo so we can iterate

52
00:04:05.500 --> 00:04:09.720
over each character in a string each element in an array.

53
00:04:09.910 --> 00:04:13.240
We don't need an indices or an index we don't need a number.

54
00:04:13.300 --> 00:04:15.210
We don't have to do any of this logic.

55
00:04:15.250 --> 00:04:22.260
All we do is say for each thing in separate it so let's sub of sub red let item what element.

56
00:04:22.300 --> 00:04:25.170
Character let letter it's up to you.

57
00:04:25.360 --> 00:04:27.400
It's a lot cleaner and a lot easier to work with.
