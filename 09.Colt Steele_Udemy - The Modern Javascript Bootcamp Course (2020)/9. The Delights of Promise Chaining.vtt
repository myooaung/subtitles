WEBVTT
1
00:00:00.150 --> 00:00:00.480
All right.

2
00:00:00.510 --> 00:00:05.770
So the last really critical part of promises is understanding promise changing.

3
00:00:05.790 --> 00:00:10.660
So I've updated the fake request function to now have a much more robust set of pages.

4
00:00:10.710 --> 00:00:16.140
Still pretty minimal but we have a couple of different end points we can make a fake request to slash

5
00:00:16.140 --> 00:00:21.780
users which would give us something like this where we have an idea for each user and I could use that

6
00:00:21.780 --> 00:00:25.870
idea to make a second request to get more information about a user.

7
00:00:25.950 --> 00:00:32.670
And this is actually a really common pattern where a Web site or some API is set up with some end point

8
00:00:32.670 --> 00:00:36.670
that gives you a little bit of information about every user or every.

9
00:00:36.690 --> 00:00:42.880
I don't know dog in the dog shelter or every post on a on the Reddit home page.

10
00:00:42.910 --> 00:00:48.570
Then it gives you an idea that you can use to make a second follow up request using information from

11
00:00:48.570 --> 00:00:51.540
the first so that you can get more detailed information.

12
00:00:51.640 --> 00:00:52.350
Like I have here.

13
00:00:52.830 --> 00:00:58.650
So if we wanted to mock that we would make a request to slash users fake request and get this information

14
00:00:58.650 --> 00:00:59.180
back.

15
00:00:59.280 --> 00:01:04.840
Then we could take this I.D. idea of one and make a request to slash users slash one.

16
00:01:04.980 --> 00:01:07.710
But we want to do that after this one finishes.

17
00:01:07.710 --> 00:01:12.420
After we know for sure what that I.D. is just like we would in the real world.

18
00:01:12.450 --> 00:01:18.450
So if you pretend for a moment that this is real it's not just a fake object of pages where we're just

19
00:01:18.450 --> 00:01:21.570
hard coding the data in those ideas could change.

20
00:01:21.570 --> 00:01:23.760
There could be users that are deleted.

21
00:01:23.760 --> 00:01:25.370
So we would ask for all users.

22
00:01:25.380 --> 00:01:30.220
And then make a request to users slash one with what we know right now.

23
00:01:30.360 --> 00:01:31.230
Here's how we would do it.

24
00:01:31.230 --> 00:01:33.800
Fake request and then that you are well.

25
00:01:33.810 --> 00:01:37.170
Let's start with Slash users.

26
00:01:37.230 --> 00:01:45.670
Then we have our callback which gives us a response and then what we would do is take a look at response

27
00:01:45.670 --> 00:01:47.040
dot data.

28
00:01:47.050 --> 00:01:49.220
That is the name that we use straight.

29
00:01:49.570 --> 00:01:54.810
If we come down here data and we want the I.D. right here.

30
00:01:54.820 --> 00:01:57.280
This idea of the first user.

31
00:01:57.280 --> 00:02:01.190
So the array is what we get back that contains two items.

32
00:02:01.270 --> 00:02:08.770
If we just counsel that log resource data let's just pretend that we are on a journey with a real API.

33
00:02:08.770 --> 00:02:11.250
Here's what we get back in array.

34
00:02:11.290 --> 00:02:17.140
So if we want to take the first user that would be constant log restored data 0.

35
00:02:17.200 --> 00:02:20.590
If we want that I.D. we could save it to a variable.

36
00:02:20.590 --> 00:02:22.900
Let's just make sure we're printing it out correctly.

37
00:02:23.020 --> 00:02:24.390
After one second.

38
00:02:24.400 --> 00:02:25.120
Okay.

39
00:02:25.330 --> 00:02:30.440
So let's save this to a variable we'll call it concept I.D..

40
00:02:30.850 --> 00:02:37.070
So we have the piece of information we need to make our second request with what we've seen so far.

41
00:02:37.070 --> 00:02:37.480
Just gonna.

42
00:02:37.510 --> 00:02:38.630
Oh I'm not printing anything.

43
00:02:38.630 --> 00:02:39.620
Well I'm an idiot.

44
00:02:39.650 --> 00:02:45.200
Nothing will show up but with what we've seen so far we would have to just make another call to fake

45
00:02:45.200 --> 00:02:45.640
requests.

46
00:02:45.640 --> 00:02:46.370
We have to do that.

47
00:02:46.430 --> 00:02:48.160
Either way if we can't get around that.

48
00:02:48.410 --> 00:02:54.090
But we would nested in here because we need this to happen after this one finishes.

49
00:02:54.170 --> 00:02:59.560
So logically it would go in the dot then if we put it down here it's not going to happen afterwards.

50
00:02:59.570 --> 00:03:03.950
We depend on this I.D. which we only have access to in this callback.

51
00:03:04.060 --> 00:03:08.090
The dot then callback where the response is passed through.

52
00:03:08.120 --> 00:03:11.300
So I have to do it in here with what we've seen.

53
00:03:11.420 --> 00:03:18.080
I would call fake requests again and we'll use a template literal to do slash users slash and then dollar

54
00:03:18.080 --> 00:03:25.700
sign curly braces my I.D. I got from the previous request and I could do a second dot then same exact

55
00:03:25.700 --> 00:03:29.460
thing rez and then we can cancel that log.

56
00:03:29.460 --> 00:03:32.880
The response let's see what we get.

57
00:03:32.930 --> 00:03:34.130
So we should get a first.

58
00:03:34.220 --> 00:03:39.530
Actually we're not printing the very first time so we only see the second response that we get back

59
00:03:39.530 --> 00:03:44.840
and it has more information about the user with I.D. of one and status of two hundred.

60
00:03:44.840 --> 00:03:46.310
This all looks good.

61
00:03:46.310 --> 00:03:52.250
If I wanted to make another request with that if we look at the data we got back we have this top post

62
00:03:52.250 --> 00:03:52.670
I.D..

63
00:03:53.150 --> 00:03:58.250
So I now can send a request to another U.R.L. setup in my pages.

64
00:03:58.250 --> 00:04:00.840
Object called slash posts Slash.

65
00:04:00.860 --> 00:04:11.570
And then this I.D. so I could then make another request fake request and it's red dot data dot.

66
00:04:11.570 --> 00:04:11.960
What was it.

67
00:04:11.960 --> 00:04:13.150
Top post I.D..

68
00:04:13.430 --> 00:04:15.130
Yes.

69
00:04:15.730 --> 00:04:21.520
So this is a third request that is dependent upon the second request which itself is dependent upon

70
00:04:21.760 --> 00:04:25.330
the data we got back from the very first request we got.

71
00:04:25.360 --> 00:04:30.350
All users that gave us an I.D. we could use we use that to make a request using that I.D..

72
00:04:30.830 --> 00:04:36.760
Now we get this top post I.D. which we can use to make another request to such post slash some I.D.

73
00:04:37.360 --> 00:04:44.950
so we'll do slash posts slash and we'll save this to a variable cost I.D. again.

74
00:04:44.950 --> 00:04:54.140
Or how about post I.D. and then interpolate that with dollar sign curly braces post I.D. one more dot

75
00:04:54.170 --> 00:05:00.150
then we'll get our response hopefully and then we'll do our council dot log.

76
00:05:00.160 --> 00:05:00.740
Response

77
00:05:03.990 --> 00:05:06.430
okay we'll try it.

78
00:05:08.630 --> 00:05:09.760
Come on.

79
00:05:09.770 --> 00:05:10.470
All right.

80
00:05:10.490 --> 00:05:11.900
What do we get back.

81
00:05:11.900 --> 00:05:13.960
Yes we're getting our post information.

82
00:05:14.000 --> 00:05:17.510
Ladies and gentlemen may I introduce you to my pet pig Hamlet.

83
00:05:17.900 --> 00:05:22.630
So this was some hypothetical post on our website by this user.

84
00:05:22.670 --> 00:05:24.170
So what we have here doesn't.

85
00:05:24.200 --> 00:05:29.570
Honestly it doesn't look much better than what we saw in the whole callback hell section of the section

86
00:05:29.750 --> 00:05:31.930
where we talked about nesting a whole bunch of things.

87
00:05:31.940 --> 00:05:39.810
Also we don't have catches right now so if I wanted to do that it gets even messier if I want to catch.

88
00:05:39.980 --> 00:05:49.330
I would do duck catch pass in my callback and we'll just call this error and then console that log.

89
00:05:49.330 --> 00:05:50.200
Oh no.

90
00:05:51.070 --> 00:05:53.940
And then we'll also just print the error.

91
00:05:54.310 --> 00:05:56.580
So right now we don't have a way of causing an error.

92
00:05:56.610 --> 00:06:04.140
But if I mess up this request and I use it wrong or an invalid U.R.L. like that it should catch it and

93
00:06:04.140 --> 00:06:09.470
it does we get oh no here's our error it's a status code four hundred four a four and an object.

94
00:06:09.660 --> 00:06:15.180
But if this one is valid and I instead miss this request up this is a you are well that doesn't exist

95
00:06:15.210 --> 00:06:16.770
in our pages.

96
00:06:16.770 --> 00:06:17.610
Let's see what happens.

97
00:06:20.890 --> 00:06:21.970
It didn't work.

98
00:06:21.970 --> 00:06:27.010
I mean the promise was rejected but we didn't catch it like we have here.

99
00:06:27.010 --> 00:06:29.960
So this catch is only working for this fake request.

100
00:06:30.130 --> 00:06:33.470
So I would need another dot catch for this dot then.

101
00:06:33.490 --> 00:06:37.660
So we have a much much nicer way of rewriting all of this.

102
00:06:37.870 --> 00:06:42.700
What we're doing here is essentially the same thing we saw with callbacks where we just nest them and

103
00:06:42.700 --> 00:06:43.880
nest them and nest them.

104
00:06:43.990 --> 00:06:47.100
This fake request is dependent on the data from this one.

105
00:06:47.140 --> 00:06:49.040
This third one is dependent on the second one.

106
00:06:49.060 --> 00:06:53.240
So it makes sense to nest them but we have a whole different way of structuring them.

107
00:06:53.470 --> 00:06:58.480
What we can do instead I'll just type this sort of in a shorthand up here.

108
00:06:58.480 --> 00:07:06.160
If we do a dot then and in the callback if the DOT then we return a promise we can call dot then immediately

109
00:07:06.160 --> 00:07:12.220
after on the same level I don't have to nest I can change it and I can continue to chain as long as

110
00:07:12.310 --> 00:07:19.870
each callback for dot then returns a promise I won't nest my dot then I won't have to do any nesting.

111
00:07:19.900 --> 00:07:23.730
Instead I return to promise this dot then runs first.

112
00:07:23.830 --> 00:07:25.120
It returns a promise.

113
00:07:25.180 --> 00:07:31.180
This dot then will run if the second promise the returned promise was resolved and so on.

114
00:07:31.180 --> 00:07:32.760
So let me show you what that would look like.

115
00:07:32.770 --> 00:07:37.780
We have our fake request then and then we have this whole callback here we get the I.D. then we have

116
00:07:37.780 --> 00:07:48.430
our second fake request here but I'm going to do is remove all of this right here and return this function

117
00:07:48.430 --> 00:07:52.360
call this returns a promise just like this did our function.

118
00:07:52.480 --> 00:07:55.060
The first line says return new promise.

119
00:07:55.060 --> 00:07:58.840
So this return to promise we're putting the dot then on that promise.

120
00:07:58.840 --> 00:08:02.440
Then inside this dot then we return another promise.

121
00:08:02.440 --> 00:08:07.400
And what I can do is put my next dot then on the same level.

122
00:08:07.420 --> 00:08:15.280
So here I am doing another dot then getting the post I.D. from the response I can return this fake request

123
00:08:15.310 --> 00:08:23.910
which returns a promise and I can move my dog then outside so if you look at my code now I should have

124
00:08:23.910 --> 00:08:30.240
saved the original where we were nesting things it was then and then inside that dog then we essentially

125
00:08:30.240 --> 00:08:32.860
had another dog then and then another dog then.

126
00:08:33.130 --> 00:08:37.500
And we didn't even bother with catches that was still a lot of nesting.

127
00:08:37.500 --> 00:08:42.090
Now what we're seeing if you take my word that this does work is that we can write things in a much

128
00:08:42.090 --> 00:08:43.680
more linear way.

129
00:08:43.950 --> 00:08:48.210
So do this then do this then do this.

130
00:08:48.210 --> 00:08:55.230
So this will only run if the first promise was resolved meaning this ran then that promise that was

131
00:08:55.230 --> 00:08:57.750
returned the second promise was resolved.

132
00:08:57.990 --> 00:09:04.530
Meaning that this code runs in the dog then callback and this promise is resolved which would trigger

133
00:09:04.530 --> 00:09:06.150
this callback.

134
00:09:06.150 --> 00:09:12.960
So if any of those screw up at any point and this is a real magical part we only need one catch.

135
00:09:13.020 --> 00:09:17.430
So this sketch will run if any of these promises are rejected.

136
00:09:17.430 --> 00:09:18.640
We have this promise.

137
00:09:18.750 --> 00:09:19.860
We have this promise.

138
00:09:19.920 --> 00:09:21.060
We have this promise.

139
00:09:21.060 --> 00:09:22.580
We only need one dog catch.

140
00:09:22.590 --> 00:09:24.110
It's like a catch all.

141
00:09:24.180 --> 00:09:25.560
It's really really nice.

142
00:09:25.560 --> 00:09:28.630
So right now we do have an error here.

143
00:09:28.650 --> 00:09:29.250
It won't work.

144
00:09:29.280 --> 00:09:34.380
So let's just start with it actually working so users than users slash the ideas then post slash the

145
00:09:34.380 --> 00:09:35.480
post study.

146
00:09:35.550 --> 00:09:36.740
Let's see what happens.

147
00:09:36.750 --> 00:09:41.720
I'm going to console that log the data we get back each time show cancels out log rez.

148
00:09:41.730 --> 00:09:49.250
I'll do that here and you'll see them happening one after another even though they're not nested.

149
00:09:49.520 --> 00:09:51.190
I'm doing it twice here OK.

150
00:09:51.320 --> 00:09:56.480
Moment of Truth we get our first one second one third one.

151
00:09:56.480 --> 00:09:57.760
It's pretty cool right.

152
00:09:57.770 --> 00:10:02.990
We don't have to nest these take time but we don't have to use a bunch of callbacks and continue to

153
00:10:02.990 --> 00:10:07.570
nest and get crazy with that multi level craziness multi-level craziness.

154
00:10:07.570 --> 00:10:08.200
Yeah.

155
00:10:08.480 --> 00:10:14.120
All we have to do is make sure we return promise instead of this callback and then we can just add another

156
00:10:14.120 --> 00:10:14.320
dot.

157
00:10:14.320 --> 00:10:17.050
Then we could have as many levels as we want.

158
00:10:17.130 --> 00:10:20.050
Remember like Eddie said this is only going to run this.

159
00:10:20.090 --> 00:10:26.270
Then if this promise was resolved and this one is dependent on this promise being resolved this one

160
00:10:26.270 --> 00:10:27.610
is dependent on this one.

161
00:10:28.010 --> 00:10:33.920
So it doesn't look like we have this crazy multi level dependency thing going on but that's a magic

162
00:10:33.920 --> 00:10:34.850
of promises.

163
00:10:34.850 --> 00:10:37.460
We can rewrite our code in a much easier to read manner.

164
00:10:37.460 --> 00:10:38.170
Right.

165
00:10:38.180 --> 00:10:39.360
Do this then do this.

166
00:10:39.380 --> 00:10:40.860
Then do this then do this.

167
00:10:40.940 --> 00:10:44.810
If at any point something went wrong do this.

168
00:10:44.810 --> 00:10:47.250
So why don't we have something go wrong at the beginning.

169
00:10:47.270 --> 00:10:52.080
We'll use a Euro that doesn't exist Oh no.

170
00:10:52.110 --> 00:10:52.380
OK.

171
00:10:52.410 --> 00:10:55.490
So the catch ran that callback.

172
00:10:55.500 --> 00:10:57.620
Now let's have something go wrong here.

173
00:10:57.660 --> 00:11:00.400
So we have our first promise that should be resolved.

174
00:11:00.420 --> 00:11:01.240
There we go.

175
00:11:01.470 --> 00:11:03.450
Then we get Oh no.

176
00:11:03.450 --> 00:11:05.480
And this code never ran right.

177
00:11:05.520 --> 00:11:11.780
When we had an error with the very first one none of the other dot then ran it went straight to dot

178
00:11:11.850 --> 00:11:12.910
catch and it was done.

179
00:11:13.710 --> 00:11:21.300
But now if I have an error in this third request we get the first two resolved resolved rejected dot

180
00:11:21.300 --> 00:11:27.810
catch runs so hopefully you can see already even though we're doing very fake stuff it's a mocked request

181
00:11:27.840 --> 00:11:30.210
it's hard coded it's stupid.

182
00:11:30.390 --> 00:11:33.150
I won't say stupid it's useless in the real world.

183
00:11:33.150 --> 00:11:38.120
It's useful in an educational context even though all of that is true.

184
00:11:38.190 --> 00:11:41.640
It's still a good illustration of the benefits of using promises.

185
00:11:41.700 --> 00:11:46.500
We can have multiple asynchronous actions that we want to happen one after another.

186
00:11:46.530 --> 00:11:52.410
So not simultaneously but one after another we change dot then as long as we return a promise each time

187
00:11:53.160 --> 00:11:56.380
everything works and we only need one dot catch.

188
00:11:56.400 --> 00:12:02.400
So what we're going to do next is revisit the early example that I used to illustrate callback hell

189
00:12:02.550 --> 00:12:04.640
where we were moving a button across the screen.

190
00:12:04.740 --> 00:12:10.710
We'll rewrite it with promises something slightly more useful instead of just a arbitrary fake request.

191
00:12:10.710 --> 00:12:12.170
You'll see how much time.

192
00:12:12.180 --> 00:12:16.000
Well you'll see how much code it saves us and how many headaches it prevents.

193
00:12:16.000 --> 00:12:17.290
It's so much easier to read.

194
00:12:17.310 --> 00:12:18.110
So that's next.
