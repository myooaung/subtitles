1
00:00:00,730 --> 00:00:00,960
All right.

2
00:00:00,970 --> 00:00:04,100
Our friends we've now discussed salting and hashing passwords.

3
00:00:04,120 --> 00:00:07,450
So let's start to write out some code to implement this entire process.

4
00:00:07,510 --> 00:00:11,410
The first big question that comes up is where are we going to put all this code.

5
00:00:11,410 --> 00:00:14,460
Are we going to put it inside of this sign in request handler.

6
00:00:14,470 --> 00:00:17,570
Are we going to put it inside of a sign up up here.

7
00:00:17,570 --> 00:00:23,050
Well I think that the best place to put a lot of this logic is inside of our users repository inside

8
00:00:23,050 --> 00:00:24,220
of repositories.

9
00:00:24,220 --> 00:00:29,050
Users J.S. inside of here we have a method called create this method right here.

10
00:00:29,050 --> 00:00:34,030
We could add in some additional code to automatically generate that salt append it onto the parser that

11
00:00:34,030 --> 00:00:39,740
gets provided hash the results and then store that along with the user attributes we pass in.

12
00:00:39,820 --> 00:00:44,740
In addition we could also add in an additional method to this class called something like compare passwords

13
00:00:44,770 --> 00:00:46,120
or something like that.

14
00:00:46,270 --> 00:00:51,970
And that method could be responsible for this entire process we just described of handling when a user

15
00:00:51,970 --> 00:00:56,200
signs back in and we need to essentially take the password they just provided through on the random

16
00:00:56,200 --> 00:01:03,000
salt hash it and then compare it against the original START stored one so all this hashing and salting

17
00:01:03,000 --> 00:01:09,850
stuff we're gonna add all the logic to it or for it directly to users repository.

18
00:01:09,900 --> 00:01:14,070
Now that we know where we're going to add this code now it becomes a question of well what code are

19
00:01:14,070 --> 00:01:15,350
we going to write.

20
00:01:15,420 --> 00:01:17,120
There's two big things I want to point out.

21
00:01:17,120 --> 00:01:22,770
Inside the no GSR standard library that are going to help us implement this hashing and salting algorithm

22
00:01:22,770 --> 00:01:24,780
or this entire process.

23
00:01:24,780 --> 00:01:30,630
Let's take a look at the No GST in our library documentation once again and again at no Jazz dot org

24
00:01:30,630 --> 00:01:32,160
slash API.

25
00:01:32,370 --> 00:01:38,180
Once here I'm going to find the crypto section on the left hand side the inside of here.

26
00:01:38,190 --> 00:01:40,800
There are two different functions we're going to use.

27
00:01:40,800 --> 00:01:44,280
First take a look at a function that we're going to use to generate our salt.

28
00:01:44,310 --> 00:01:48,550
Remember the salt is the random string of characters that is going to prevent a user from giving us

29
00:01:48,550 --> 00:01:51,270
the password that is too common.

30
00:01:51,270 --> 00:01:55,800
The function we're going to use to generate the salt is going to be simply the random bytes function

31
00:01:55,950 --> 00:01:57,920
which we are used a little bit ago.

32
00:01:58,110 --> 00:02:02,250
So we can use random bytes to essentially calculate a random series of characters.

33
00:02:02,280 --> 00:02:07,810
So we're going to use this to generate our salt then to do the actual hashing process.

34
00:02:07,910 --> 00:02:13,630
We're going to use another function inside the crypto library called s crypt so we can search for s

35
00:02:13,650 --> 00:02:14,200
crypt.

36
00:02:14,230 --> 00:02:16,050
There it is right there.

37
00:02:16,100 --> 00:02:18,570
This has a really weird name for a function.

38
00:02:18,710 --> 00:02:23,650
The word s crypt is named after a very specific password hashing algorithm scheme.

39
00:02:23,780 --> 00:02:31,110
So this is really the name of a specific way to compute a hash we can take a look at some of the arguments.

40
00:02:31,110 --> 00:02:33,390
I think a lot of them will make sense right away.

41
00:02:33,390 --> 00:02:34,770
The first one is the password.

42
00:02:34,770 --> 00:02:40,370
So this is going to be the plain text password that we are trying to turn into a hash that we can store

43
00:02:40,410 --> 00:02:43,880
inside of our database or compare it to an existing password.

44
00:02:43,890 --> 00:02:49,880
The second argument is going to be our salt then we've got the key link that's not super relevant or

45
00:02:49,880 --> 00:02:51,420
important for what we're doing.

46
00:02:51,440 --> 00:02:53,290
There's also an options object.

47
00:02:53,570 --> 00:02:58,340
We're going to use the default values for all these options and then finally there's the callback function

48
00:02:59,450 --> 00:03:00,840
after we call s scripts.

49
00:03:00,840 --> 00:03:04,010
We're gonna put in our UN hash password and our salt.

50
00:03:04,010 --> 00:03:08,530
Once this function has computed the hash it will then invoke our callback function.

51
00:03:08,720 --> 00:03:14,270
So we're going to receive the salted and hash password or to be precise the hashed salt plus password

52
00:03:14,540 --> 00:03:15,960
inside that callback.

53
00:03:16,100 --> 00:03:17,690
So we will receive that callback.

54
00:03:17,810 --> 00:03:22,950
It'll be called with what they call a derived key the drive key is really just the hash password.

55
00:03:23,060 --> 00:03:27,890
We're then going to store that inside of our database along with our user OK.

56
00:03:27,900 --> 00:03:31,110
So now we have a good idea of some the different functions we're going to use.

57
00:03:31,110 --> 00:03:31,840
Well let's get to it.

58
00:03:31,860 --> 00:03:37,870
Let's start to update our users repository they've already required in crypto at the very top.

59
00:03:38,650 --> 00:03:43,950
I'm going to then go down to the create function down here so we're going to assume that this adders

60
00:03:43,950 --> 00:03:46,740
object right here is going to essentially represent a user.

61
00:03:46,740 --> 00:03:54,250
So we're going to assume that adders always has a object with an e mail property that is a string and

62
00:03:54,250 --> 00:04:01,890
a password property that is a string as well that's what we are assuming that adders is so that in mind

63
00:04:02,490 --> 00:04:09,030
we're now going to take that adders object we're going to generate a salt then throw the password that

64
00:04:09,030 --> 00:04:13,090
was provided along with that salt into the s crypt function.

65
00:04:13,220 --> 00:04:13,520
OK.

66
00:04:13,550 --> 00:04:17,950
So right underneath the I.D. I'm going to first generate a salt.

67
00:04:18,140 --> 00:04:24,850
So I'll say salt is going to be crypto dot random bytes I'll throw an eight.

68
00:04:24,850 --> 00:04:32,360
Remember this is the number of bytes for every byte we create we get back to separate characters and

69
00:04:32,360 --> 00:04:33,500
I'll call to string

70
00:04:36,840 --> 00:04:42,800
that's going to give us a random series of numbers and letters for our salt we're then going to use

71
00:04:42,800 --> 00:04:48,290
that salt plus the password that the user provided inside the actor's object to generate our hash password

72
00:04:49,550 --> 00:04:58,660
so we can call inside of your s crypt with the adders password and the salt that was just provided we're

73
00:04:58,660 --> 00:05:01,240
going to put in a key length of 64.

74
00:05:01,600 --> 00:05:05,280
Again not super relevant about what that is all about right now.

75
00:05:05,320 --> 00:05:12,360
We could add in our callback function the callback will be invoked with some air object and what is

76
00:05:12,360 --> 00:05:18,060
called Inside the documentation derived key as really a buffer that has our hash password inside of

77
00:05:18,060 --> 00:05:18,720
it.

78
00:05:18,780 --> 00:05:23,020
Remember a buffer inside of no Jesus is like an array that has some raw data.

79
00:05:23,160 --> 00:05:26,740
So rather than calling that argument derived key I'm just going to call it above.

80
00:05:26,790 --> 00:05:37,740
Short for buffer and then inside of here I'll say hash equals buffer dot to string x.

81
00:05:37,920 --> 00:05:39,890
Now that is our hash password.

82
00:05:40,170 --> 00:05:45,840
We're going to want to take the hash password and store it along with the salt inside of our database.

83
00:05:45,840 --> 00:05:50,340
But before we add that in I just want to point out that having to be constrained by a script with its

84
00:05:50,340 --> 00:05:55,410
callback right here is just a little bit awkward because well we wanted to use that hash right there

85
00:05:55,410 --> 00:05:56,700
to store it with our user.

86
00:05:56,790 --> 00:06:00,330
But in order to do that we would have to essentially take all the rest the code we have inside of here

87
00:06:00,720 --> 00:06:05,350
and paste it inside the callback I don't really want to use any callback based code.

88
00:06:05,400 --> 00:06:10,590
So rather than using the default script function we're going to instead use that promise of fi function

89
00:06:10,620 --> 00:06:15,840
from the U till module inside the no J standard library we're going to use that promise if I function

90
00:06:15,840 --> 00:06:22,050
to take this callback based version of s script and instead give us a premise based version of it instead

91
00:06:22,320 --> 00:06:29,580
we can safely use the async await syntax with so to turn this callback based version into a promise

92
00:06:29,580 --> 00:06:38,160
based version we'll go up to the very top I'm going to require that you tell it's quick reminder here's

93
00:06:38,170 --> 00:06:41,150
the you till library right here.

94
00:06:41,160 --> 00:06:49,180
So utilities inside of here is the promise of I function so we can pass promise ify some function that

95
00:06:49,180 --> 00:06:54,070
usually receives a callback and it's going to give us back a new version that function that returns

96
00:06:54,070 --> 00:07:00,280
a promise and a function returns a promise we can use of the async await syntax at the top I'll say

97
00:07:00,300 --> 00:07:10,520
s script equals you tell dot Rama's mystify crypto dot s script.

98
00:07:10,630 --> 00:07:13,370
Now this is a version of that function that returns a promise.

99
00:07:13,430 --> 00:07:20,130
Let's now go back to our create function and make use of that new version the years create I'm going

100
00:07:20,130 --> 00:07:25,370
to remove the callback because there no longer is a callback because we promise to find this thing I'm

101
00:07:25,370 --> 00:07:30,320
going to put a weight in front of it to say let's wait for that has to be generated and then I'll store

102
00:07:30,320 --> 00:07:37,990
the output as hashed now we've got our salts and our hashed password

103
00:07:41,780 --> 00:07:47,240
so now where we call records stop push rather than just throwing in the entire adders object which remember

104
00:07:47,420 --> 00:07:55,420
has the email and the raw password we're going to instead a massage that object is to a little bit so

105
00:07:55,420 --> 00:08:03,910
I'm going to delete adders I'm going to replace it with an object I'll say dot dot dot adders and then

106
00:08:03,910 --> 00:08:13,730
after that I'll put in password is set of tactics and we're going to put in hashed that to string with

107
00:08:13,730 --> 00:08:17,870
hex because remember it has right here is still that buffer maybe to make this code a bit more clear

108
00:08:17,900 --> 00:08:18,950
rather than calling it hash.

109
00:08:18,950 --> 00:08:21,910
We should really just call it love stroke to the buffer instead.

110
00:08:21,910 --> 00:08:27,610
So let's do that we're going to take that buffer convert it to a string hex based string in this case

111
00:08:28,610 --> 00:08:35,820
well then put in a period and then also store inside of our password field the salt that we generated

112
00:08:35,850 --> 00:08:42,340
as well remember the entire goal that period right there is just to make it clear inside of this one

113
00:08:42,340 --> 00:08:48,190
single field where our hash password starts and where the salt starts.

114
00:08:48,400 --> 00:08:52,810
So later on when we need to compare users password we can just very easily splits on the existence of

115
00:08:52,810 --> 00:08:59,830
that period and get back but the sultan hash password and the salt you're the thing you want to remind

116
00:08:59,830 --> 00:09:01,960
you about around this dot dot dot syntax.

117
00:09:02,110 --> 00:09:04,190
This means create a new object.

118
00:09:04,270 --> 00:09:12,070
Take all the properties out of our atoms object and then overwrite those existing properties with this

119
00:09:12,070 --> 00:09:12,880
new password.

120
00:09:12,880 --> 00:09:18,040
So essentially saying replace the default or plaintext password that was provided inside of batters

121
00:09:19,920 --> 00:09:24,830
so we're going to push that new record into records were then going to write all of our data to our

122
00:09:24,830 --> 00:09:26,490
users not just on file.

123
00:09:26,690 --> 00:09:29,480
And if there is one last little change we need to make down here.

124
00:09:29,480 --> 00:09:33,950
We just returned the adders object so we understand exactly what idea we have.

125
00:09:33,950 --> 00:09:37,640
But now our final object they're actually saving is that one right there.

126
00:09:37,640 --> 00:09:42,290
So instead of calling records not push but that object in line.

127
00:09:42,290 --> 00:09:50,100
I'm going to instead cut that assign it to a record variable I'll push in record and then finally now

128
00:09:50,100 --> 00:09:55,020
down at the very bottom instead of returning outers which still has the original plaintext password

129
00:09:55,560 --> 00:10:03,690
I will instead return record which instead has the hash insulted password most are going to delete that

130
00:10:03,690 --> 00:10:06,230
comment at the top and there we go.

131
00:10:06,260 --> 00:10:08,790
That's pretty much it.

132
00:10:08,800 --> 00:10:12,250
Now I know this refactor has been a little bit painful but this is pretty much it.

133
00:10:14,200 --> 00:10:14,530
OK.

134
00:10:14,570 --> 00:10:16,560
So let's now do a quick test.

135
00:10:16,760 --> 00:10:21,480
So I'm going to go back over to my browser.

136
00:10:21,660 --> 00:10:25,110
I'm going to go to my sign up route.

137
00:10:25,230 --> 00:10:27,740
I'm going to enter in a new email that I've never used before.

138
00:10:27,770 --> 00:10:30,650
I'll do test five at test dot com.

139
00:10:30,840 --> 00:10:36,230
I'll enter and password and password I'll attempt to sign up NSC account created.

140
00:10:36,270 --> 00:10:37,960
Yes that's definitely good start.

141
00:10:38,020 --> 00:10:42,540
It's now going to go into my users dot JS on file now inside of here.

142
00:10:42,540 --> 00:10:43,550
I'll find the new users.

143
00:10:43,560 --> 00:10:44,780
That was just created.

144
00:10:44,910 --> 00:10:51,420
So here's test five at test dot com and I can see that the password is no longer a plain text password.

145
00:10:51,420 --> 00:10:57,360
Instead I've got the salted and hash password right there I go over to the right sufficiently far I'll

146
00:10:57,360 --> 00:11:06,140
see a dot and then I see the salt joined on at the very end so that's pretty much it they're now storing

147
00:11:06,140 --> 00:11:08,990
users passwords in a way more secure manner.

148
00:11:08,990 --> 00:11:11,570
So now we can take a quick pause when come back the next video.

149
00:11:11,610 --> 00:11:15,560
The last thing we have to do is make sure that we implement the flow for handling a user who tries to

150
00:11:15,560 --> 00:11:18,440
sign it to click pause and I'll see you in just a minute.
