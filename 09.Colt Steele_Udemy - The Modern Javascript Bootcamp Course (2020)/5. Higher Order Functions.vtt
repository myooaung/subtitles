WEBVTT
1
00:00:00.240 --> 00:00:05.760
Next up I want to spend a little more time talking about this slide not just this beautiful slide with

2
00:00:05.760 --> 00:00:12.120
this stock photograph but the content functions being objects and what that means because we're going

3
00:00:12.120 --> 00:00:18.360
to prepare for the next video where we talk about using functions within functions excepting functions

4
00:00:18.360 --> 00:00:21.030
as arguments returning functions as values.

5
00:00:21.210 --> 00:00:24.680
But first let's talk more about functions as objects.

6
00:00:24.750 --> 00:00:28.010
So we saw that we could store a function in a variable.

7
00:00:28.170 --> 00:00:31.920
We can also store functions in something like an array if we wanted to.

8
00:00:31.950 --> 00:00:33.990
So let's see a quick example of that.

9
00:00:34.050 --> 00:00:36.270
I'm going to define four different functions.

10
00:00:36.270 --> 00:00:43.950
Just very simple ones add we'll be the first one it returns x plus y and I'll mix up the different ways

11
00:00:43.980 --> 00:00:44.740
we declare them.

12
00:00:44.790 --> 00:00:46.680
So we have a function statement.

13
00:00:46.680 --> 00:00:48.480
Now we'll do a function expression.

14
00:00:48.480 --> 00:00:53.090
So I'll do const subtract equals function.

15
00:00:53.280 --> 00:00:54.890
I'll leave it anonymous.

16
00:00:55.200 --> 00:01:08.970
X and y and it returns x minus y and then I'll do multiply function Multiply multiply x y return X times

17
00:01:08.970 --> 00:01:14.550
Y and then one more is divide and I'll just duplicate this.

18
00:01:14.820 --> 00:01:19.410
So we have divide and it returns x divided by Y.

19
00:01:20.190 --> 00:01:21.930
So we have four functions.

20
00:01:21.930 --> 00:01:23.930
Now I'm gonna put them all in an array.

21
00:01:25.290 --> 00:01:33.810
So I'll call this array operations for different operations and all I need to do is add subtract multiply

22
00:01:34.230 --> 00:01:36.300
and divide.

23
00:01:36.300 --> 00:01:39.960
Now I have an array with four operations which are each a function.

24
00:01:39.990 --> 00:01:46.470
So for functions stored in an array and if I wanted to execute any of them let's say I want to call

25
00:01:46.860 --> 00:01:50.970
subtract that is index of 1 0 1.

26
00:01:50.970 --> 00:01:58.500
So if I run my code over here I can call operations square brackets one that gives me the function that

27
00:01:58.500 --> 00:01:59.150
doesn't call it.

28
00:01:59.610 --> 00:02:02.740
That's like me just typing subtract.

29
00:02:03.030 --> 00:02:04.100
I'm not executing it.

30
00:02:04.890 --> 00:02:07.800
I'm just getting the value back which is an object.

31
00:02:07.800 --> 00:02:14.720
It's a function which is an object but if I add my perennials afterwards right now I'm getting not a

32
00:02:14.720 --> 00:02:18.820
number because I haven't passed in any values so I'm gonna pass in.

33
00:02:18.920 --> 00:02:27.350
Let's go with one hundred and four and I get ninety six one hundred minus four X is one hundred Why

34
00:02:27.410 --> 00:02:28.960
is four.

35
00:02:28.970 --> 00:02:36.950
If I wanted to call multiply index of two and I get four hundred Index of three will give me divide

36
00:02:37.250 --> 00:02:40.890
and index of 0 gives me add.

37
00:02:41.000 --> 00:02:46.370
Now this isn't very useful putting them in an array to just call them manually one at a time it's a

38
00:02:46.370 --> 00:02:53.120
lot clearer if I just say add whatever one hundred and four we can see what we're doing but the point

39
00:02:53.210 --> 00:02:59.330
that I'm trying to make here is that we can do things like loop over this array and call each function

40
00:02:59.630 --> 00:03:03.300
so we don't have to hardcoded I could do a four of.

41
00:03:03.320 --> 00:03:08.240
So for let let's call it func of operations

42
00:03:11.400 --> 00:03:17.760
func is going to hold one of these functions as if it were a number or a string or any other value in

43
00:03:17.760 --> 00:03:24.720
an array because it is it's just any other value as far as javascript is concerned it doesn't care and

44
00:03:24.720 --> 00:03:31.230
if I just write func once again that's not calling the function that's what I did right here I'm referencing

45
00:03:31.230 --> 00:03:35.540
it I'm getting the value but to execute it I need parents.

46
00:03:35.580 --> 00:03:41.790
So this variable will hold one of these functions each time through and by adding the Puritans will

47
00:03:41.790 --> 00:03:46.190
call for different functions by the time this loop finishes running.

48
00:03:46.500 --> 00:03:50.070
So let's just hard code in some numbers let's do.

49
00:03:50.070 --> 00:03:54.110
How about thirty and five.

50
00:03:54.260 --> 00:03:58.860
Okay and I'm not going to see a value I won't see anything happen because I'm not printing anything

51
00:03:58.860 --> 00:04:04.590
out it's all being returned I just ran it you don't see anything happen so let's store each result in

52
00:04:04.590 --> 00:04:10.020
a variable we'll call it result and then let's do a console dot log result

53
00:04:13.830 --> 00:04:14.340
okay.

54
00:04:14.410 --> 00:04:16.180
Let's run it.

55
00:04:16.490 --> 00:04:17.080
And there we go.

56
00:04:17.710 --> 00:04:20.910
We ran for functions with this loop.

57
00:04:20.920 --> 00:04:27.850
Maybe not something you would do but I wanted to show you can we can treat functions as any other value.

58
00:04:28.030 --> 00:04:30.430
We can loop over them in an array.

59
00:04:30.730 --> 00:04:33.010
We can even store them in objects.

60
00:04:33.010 --> 00:04:34.680
So we have thirty five.

61
00:04:34.730 --> 00:04:36.870
That was for ad thirty plus five.

62
00:04:36.880 --> 00:04:39.320
Then we have subtract thirty minus five.

63
00:04:39.400 --> 00:04:44.030
We have multiply 30 times five and divide 30 divided by five.

64
00:04:44.110 --> 00:04:47.740
So one more thing I'll just show that we can store them in an object.

65
00:04:47.740 --> 00:04:50.130
We'll just go with a meaningless example for now.

66
00:04:50.170 --> 00:04:53.120
This is a topic we will revisit quite a bit.

67
00:04:53.200 --> 00:05:01.720
I'll make an object called thing and I'll set one property on it called Do Something and it will be

68
00:05:01.720 --> 00:05:09.950
equal to the value will be multiplied so no quotes or anything not the string multiply like this.

69
00:05:09.950 --> 00:05:11.950
But the function multiply.

70
00:05:12.020 --> 00:05:14.200
I don't know no I'm saying multiply multiply.

71
00:05:14.780 --> 00:05:18.250
So we're now storing a function as a value in this object.

72
00:05:18.340 --> 00:05:24.690
And if I run my code and I look at thing we have a property called Do Something.

73
00:05:24.690 --> 00:05:27.410
That's the key and the value is a function.

74
00:05:27.500 --> 00:05:31.450
So I can call thing dot do something.

75
00:05:31.580 --> 00:05:34.120
This doesn't execute it just like we saw earlier.

76
00:05:34.130 --> 00:05:37.250
I'm simply getting the value I add the Pyrenees.

77
00:05:37.430 --> 00:05:39.730
Now it's running but it doesn't have any arguments.

78
00:05:39.890 --> 00:05:40.970
So we'll do 50.

79
00:05:40.970 --> 00:05:44.640
And two it multiplies them and we get one hundred.

80
00:05:44.690 --> 00:05:47.090
So I'm calling this function multiply.

81
00:05:47.090 --> 00:05:53.580
But it's part of an object I'm referencing the object the property with the parents and it calls it.

82
00:05:53.600 --> 00:06:00.960
Now this might look kind of familiar where we have thing dot something and we put friends after it.

83
00:06:01.070 --> 00:06:06.550
That's because we just wrote our very first method by adding a function to an object.

84
00:06:06.680 --> 00:06:10.350
We're creating a method just like we have to uppercase.

85
00:06:10.400 --> 00:06:12.430
Notice we're doing the exact same thing.

86
00:06:12.470 --> 00:06:16.760
Some value dot to uppercase or if we have an array.

87
00:06:16.850 --> 00:06:18.360
Well that's not a valid array.

88
00:06:18.440 --> 00:06:21.840
We have an array Don and then we call.

89
00:06:21.860 --> 00:06:26.370
How about index of index of two.

90
00:06:26.510 --> 00:06:28.650
It tells us that's at index 1.

91
00:06:28.820 --> 00:06:32.580
This is a function but it's stored on the array.

92
00:06:32.810 --> 00:06:37.520
We're going to come back to objects and how we add methods and putting functions in objects and all

93
00:06:37.520 --> 00:06:39.650
that stuff in a separate section.

94
00:06:39.650 --> 00:06:41.570
So that's not the main takeaway here.

95
00:06:41.570 --> 00:06:47.630
That's a bigger topic but I wanted to show that functions are simply values in JavaScript.

96
00:06:47.750 --> 00:06:49.260
We can store them in an array.

97
00:06:49.280 --> 00:06:55.790
We can call them dynamically put them in this func variable each time through the loop execute it.

98
00:06:55.790 --> 00:06:56.930
It's just a placeholder name.

99
00:06:56.930 --> 00:07:02.320
This will store the value of add or subtract or multiply or divide and actually executed.

100
00:07:02.330 --> 00:07:05.310
We can also put a function in an object.

101
00:07:05.420 --> 00:07:10.120
So next we're going to see more of using functions within functions.

102
00:07:10.160 --> 00:07:15.800
So passing functions as an argument to another function or returning a function which is actually a

103
00:07:15.800 --> 00:07:17.330
very key part of javascript.

104
00:07:17.360 --> 00:07:18.200
So let's get started.

105
00:07:18.230 --> 00:07:18.790
That's next.
