WEBVTT
1
00:00:00.580 --> 00:00:04.400
Next up we've got quite a few other useful methods I'd like to cover.

2
00:00:04.420 --> 00:00:06.620
We won't do it all in one video I promise.

3
00:00:06.640 --> 00:00:13.930
Some of them are really quick as well so we'll begin with can cat which if we go to the docks and take

4
00:00:13.930 --> 00:00:19.240
a look at can cat it's used to merge more than one to write two or more arrays.

5
00:00:19.240 --> 00:00:21.220
You can combine them into a new array.

6
00:00:21.850 --> 00:00:23.370
So here's how it works.

7
00:00:23.380 --> 00:00:25.610
We have a ray one and a ray two.

8
00:00:25.630 --> 00:00:32.470
We can call a ray one dot can cat a ray too and it creates a new array with both of them.

9
00:00:32.770 --> 00:00:36.410
And it does not update or mutate the original array.

10
00:00:36.460 --> 00:00:38.050
Neither one nor two.

11
00:00:38.230 --> 00:00:40.940
It instead creates a new copy or a new version.

12
00:00:41.350 --> 00:00:47.020
So let's go with a fruit's array and it will just have apple and banana.

13
00:00:47.020 --> 00:00:54.070
Just keep it short and then a veggies array and that will have asparagus.

14
00:00:54.220 --> 00:00:59.670
And it's another good veggie I guess potatoes not a veggie unfortunately.

15
00:00:59.680 --> 00:01:03.070
How about How about Brussels sprouts.

16
00:01:03.670 --> 00:01:04.510
OK.

17
00:01:04.840 --> 00:01:14.130
If we can keep them together we could either do fruits dot can cat veggies and save that to a new variable

18
00:01:14.160 --> 00:01:18.960
or just let's just cancel that log it and you'll see what we get.

19
00:01:18.960 --> 00:01:20.190
Refresh my page.

20
00:01:20.190 --> 00:01:25.950
We end up with apple and banana first and then asparagus and brussel sprouts.

21
00:01:25.950 --> 00:01:27.210
So the order matters.

22
00:01:27.210 --> 00:01:37.400
And if I instead did it the other way around I did veggies doc can cat fruits we end up with this asparagus

23
00:01:37.430 --> 00:01:38.600
then brussel sprouts.

24
00:01:38.600 --> 00:01:42.170
So it just takes this array and shoves this after it into a new array.

25
00:01:42.470 --> 00:01:46.830
But if we look at fruits or we look at veggies they are unchanged.

26
00:01:46.830 --> 00:01:52.940
And if we go back to the docks if you remember early on I mentioned how you read this format here where

27
00:01:52.940 --> 00:01:59.450
there's these array brackets for the square brackets inside one of these method syntax definitions where

28
00:01:59.450 --> 00:02:04.940
you basically it tells you the pattern the template you can follow these mean something is optional.

29
00:02:05.810 --> 00:02:11.630
So that means that we can pass in multiple we could can cat three or four or five arrays by passing

30
00:02:11.630 --> 00:02:12.450
them in.

31
00:02:12.620 --> 00:02:13.870
So we have fruits and veggies.

32
00:02:13.880 --> 00:02:15.160
Let's do one more.

33
00:02:15.160 --> 00:02:17.250
That's another category I guess meats.

34
00:02:17.400 --> 00:02:20.570
I apologize for my vegan students are vegetarian students.

35
00:02:20.570 --> 00:02:29.300
Let's go with steak and chicken breast something good enough we can can cat all three of them.

36
00:02:29.300 --> 00:02:35.000
Let's make a variable called all foods equals and then it's up to us what order we want them to go in.

37
00:02:35.000 --> 00:02:36.630
But let's just do fruits.

38
00:02:36.630 --> 00:02:47.010
Dog can cat and then veggies comma meats and then let's take a look at all food and you can see what

39
00:02:47.010 --> 00:02:49.320
we end up with a large array.

40
00:02:49.440 --> 00:02:51.480
The three original arrays are unchanged.

41
00:02:51.480 --> 00:02:53.040
We have just can cat needed.

42
00:02:53.040 --> 00:02:57.660
We've put them together into a new array and that's kind of all there is to can cat.
