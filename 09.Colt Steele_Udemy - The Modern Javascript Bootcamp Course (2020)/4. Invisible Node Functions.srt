1
00:00:00,780 --> 00:00:04,920
Now that we've seen code sharing an action I want to go into some of the behind the scenes details to

2
00:00:04,920 --> 00:00:08,050
give you a better sense of what's really going on here.

3
00:00:08,070 --> 00:00:12,480
The first thing I want you to understand is that any time that we use no J.S. to execute a javascript

4
00:00:12,480 --> 00:00:17,120
file we're not just directly executing the code you see inside this file.

5
00:00:17,160 --> 00:00:23,660
Technically the code inside this file is being wrapped automatically inside of a function and then executed.

6
00:00:23,700 --> 00:00:29,340
So in other words if we run it node index J.S. Right now node is going to find all the contents inside

7
00:00:29,340 --> 00:00:34,480
the index dot J S file and then it's going to wrap it inside of a function.

8
00:00:34,680 --> 00:00:40,790
So the function looks like this is just a simple function declaration that has some number of arguments.

9
00:00:40,890 --> 00:00:46,410
This function is then going to be automatically invoked by node what's really important to understand

10
00:00:46,420 --> 00:00:49,750
here is the different arguments that are being passed into this function.

11
00:00:49,750 --> 00:00:53,650
In total there are five different arguments that are automatically provided.

12
00:00:53,710 --> 00:00:58,180
One thing on a mention is that this process is kind of invisible and we're never going to really see

13
00:00:58,480 --> 00:01:02,010
this function being declared with our own eyes.

14
00:01:02,020 --> 00:01:06,750
However there are some ways we can kind of detect that it is being placed inside of our code.

15
00:01:06,790 --> 00:01:08,650
I'll show you that in just a moment.

16
00:01:09,040 --> 00:01:16,130
I first want to tell you about the five different arguments that get passed into this function automatically.

17
00:01:16,170 --> 00:01:19,170
The first argument is something called the exports object.

18
00:01:19,260 --> 00:01:24,960
This exports object is basically equivalent to the module that exports property that we just saw a moment

19
00:01:24,960 --> 00:01:25,950
ago.

20
00:01:25,950 --> 00:01:31,980
We can assign different variables or functions or objects or whatever else to this exports object to

21
00:01:31,980 --> 00:01:35,420
make it available inside of other files.

22
00:01:35,430 --> 00:01:41,220
Now we almost always use module dot exports as opposed to this first argument of exports.

23
00:01:41,250 --> 00:01:45,430
The reason is that there's kind of a little corner case around using this expert's variable.

24
00:01:45,570 --> 00:01:51,090
So to be honest with you it's best to just kind of forget that this first argument or this X experts

25
00:01:51,090 --> 00:01:52,920
thing exists altogether.

26
00:01:52,920 --> 00:01:58,800
Instead we kind of just pretend that the only way that we share code between different files is module

27
00:01:58,800 --> 00:01:59,370
that exports.

28
00:01:59,370 --> 00:02:00,300
That's it.

29
00:02:00,320 --> 00:02:04,110
Now I'm sure as I go into this that sounds really confusing but don't worry I'm going to give you a

30
00:02:04,110 --> 00:02:05,180
lot of examples of this.

31
00:02:05,190 --> 00:02:08,500
Very quickly let's move on to the second argument.

32
00:02:08,670 --> 00:02:14,370
The second argument is require this is a function that we can use to load up a different file and get

33
00:02:14,370 --> 00:02:18,800
access to all the different variables that get exported from it.

34
00:02:18,800 --> 00:02:21,500
The third argument is called the module argument.

35
00:02:21,500 --> 00:02:26,310
This is an object that defined some different properties about the current file that is being executed.

36
00:02:26,360 --> 00:02:32,210
So in the case of say the index not J.S. file that third argument of module would contain some information

37
00:02:32,240 --> 00:02:40,210
relevant to the index dot J.S. file the fourth argument is underscore underscore file name.

38
00:02:40,220 --> 00:02:43,840
So notice that there are technically two underscores right there.

39
00:02:43,930 --> 00:02:48,370
This is a string that is the full path plus the file name of that file.

40
00:02:48,370 --> 00:02:53,500
And finally the last argument is underscore underscore once again to underscores their dir name.

41
00:02:53,500 --> 00:02:58,450
And this is the full part like the directory that the current file lives in.

42
00:02:58,490 --> 00:03:03,350
Now I want to show you or I just mentioned a second ago that we can kind of detect the presence of these

43
00:03:03,350 --> 00:03:04,670
different arguments.

44
00:03:04,670 --> 00:03:06,980
So let's go back over to our index dot j ust file.

45
00:03:06,980 --> 00:03:11,210
We're gonna make a couple of modifications to it and in doing so we're going to kind of detect that

46
00:03:11,210 --> 00:03:14,200
these different things exist okay.

47
00:03:14,240 --> 00:03:19,220
So back inside of index dot J.S. going to delete the code I have inside of here right now and I'm going

48
00:03:19,220 --> 00:03:24,350
to replace it with console not log arguments.

49
00:03:24,380 --> 00:03:28,920
Now you may have learned earlier on INSIDE the course that we can reference all the arguments that are

50
00:03:28,920 --> 00:03:33,330
passed to a function by just declaring the special variable arguments.

51
00:03:33,390 --> 00:03:39,240
So in theory if our code inside of index dot J.S. is being wrapped inside of a function then arguments

52
00:03:39,690 --> 00:03:45,510
should it print out these five different arguments that I just said were being passed to this kind of

53
00:03:45,510 --> 00:03:48,460
imaginary or invisible function.

54
00:03:48,600 --> 00:03:55,410
I'm going to try saving this file to go back over to my terminal and I'll run node index dot J.S. once

55
00:03:55,410 --> 00:03:59,530
again when I do so I get a big console log here.

56
00:03:59,760 --> 00:04:03,720
This console log is kind of hard to read but we can kind of walk through it and get a sense of what's

57
00:04:03,720 --> 00:04:12,310
going on you'll notice that we have an object and it has some indices of 0 1 2 3 4 inside of it.

58
00:04:12,570 --> 00:04:17,980
So this is really an array of all the different arguments that were passed to this invisible function.

59
00:04:18,090 --> 00:04:23,880
The first argument or 0 right here is the exports object and again we're kind of going to just ignore

60
00:04:23,880 --> 00:04:25,600
that that even exists.

61
00:04:25,710 --> 00:04:33,350
The second argument is that require function if we go down a little bit you'll see the argument at index

62
00:04:33,350 --> 00:04:33,620
2.

63
00:04:33,620 --> 00:04:39,020
So the third argument is that module thing and this has some information about the current file that

64
00:04:39,020 --> 00:04:44,690
is being executed and then finally the fourth and fifth arguments are first.

65
00:04:44,690 --> 00:04:50,480
The file name which is the full path plus the file name of the file that's being executed.

66
00:04:50,480 --> 00:04:56,830
And then finally the dir name or just the directory that that current file is in now printing all this

67
00:04:56,830 --> 00:05:01,180
stuff out with that arguments variable is kind of confusing so let's just go through very quickly and

68
00:05:01,180 --> 00:05:04,840
console log out some of these different individual variables.

69
00:05:04,840 --> 00:05:07,930
So I could do a console log of require again.

70
00:05:08,350 --> 00:05:13,780
We don't really see that function being declared anywhere inside of index dot J.S. but it is technically

71
00:05:13,780 --> 00:05:20,290
here because when this code gets executed we can imagine that a magic function or an invisible function

72
00:05:20,410 --> 00:05:29,490
automatically is going to wrap our code and of your one of the arguments is that require function.

73
00:05:29,570 --> 00:05:30,900
So we're going to save this.

74
00:05:31,130 --> 00:05:37,080
Run that file again and we'll see just that console log of required.

75
00:05:37,080 --> 00:05:43,650
So that's the entire council log of the required function and we can do the same thing with module can

76
00:05:43,650 --> 00:05:44,790
save that run again.

77
00:05:44,880 --> 00:05:46,810
And we see the entire module object.

78
00:05:46,810 --> 00:05:54,260
Again this has some information about the file that is being executed then we can do underscore underscore

79
00:05:54,380 --> 00:05:56,720
again notice that there are two underscores here.

80
00:05:56,930 --> 00:06:00,580
File Name will save that and run it again.

81
00:06:00,630 --> 00:06:04,340
That's the full path plus the file name of this file.

82
00:06:04,440 --> 00:06:11,970
And then finally we can do underscore underscore dir name save that and we'll get just the directory

83
00:06:11,970 --> 00:06:13,800
that this file lives in.

84
00:06:13,950 --> 00:06:18,360
You might be thinking that understanding or getting access to the file name and the door name is kind

85
00:06:18,360 --> 00:06:19,110
of pointless.

86
00:06:19,230 --> 00:06:24,780
But there actually are some really interesting use cases around no J.S. where it's very handy to understand

87
00:06:24,990 --> 00:06:30,040
the name of the current file or the directory that it's in for the most part.

88
00:06:30,080 --> 00:06:35,000
Whenever we are running some node code the only really are real arguments we care about they're being

89
00:06:35,000 --> 00:06:40,400
passed in to each of these different files is as you might guess they require function and the module

90
00:06:40,460 --> 00:06:42,310
object OK.

91
00:06:42,330 --> 00:06:46,860
So now we understand that there's some kind of invisible arguments being passed into each of our different

92
00:06:46,860 --> 00:06:47,700
files.

93
00:06:47,700 --> 00:06:52,860
Let's take another quick pause and we're gonna start to focus on how node actually shares code between

94
00:06:52,860 --> 00:06:58,230
these different files through the use of the require function and the module dot experts object.

95
00:06:58,800 --> 00:07:01,330
So one more quick pause and I'll see you in just a minute.
