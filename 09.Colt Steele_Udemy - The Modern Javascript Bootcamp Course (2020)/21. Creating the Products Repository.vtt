WEBVTT
1
00:00:01.310 --> 00:00:04.200
We now have our base class of repository put together.

2
00:00:04.230 --> 00:00:08.210
So now we can use this to create our products repository very easily.

3
00:00:08.210 --> 00:00:13.460
Remember the product's repository is going to have basically all the identical implementation as the

4
00:00:13.520 --> 00:00:15.170
repository based class.

5
00:00:15.170 --> 00:00:18.910
Right now there's not really any customization we need to do to handling products.

6
00:00:19.640 --> 00:00:24.980
So to create this new class inside of my repositories directory I'll make a new file called products

7
00:00:25.070 --> 00:00:29.510
that J.S. than inside of here will require in our product.

8
00:00:29.620 --> 00:00:31.570
Me a repository based class

9
00:00:37.290 --> 00:00:47.430
will then create our products repository so products repository that's going to extend repository and

10
00:00:47.440 --> 00:00:51.520
then in this case like I said we don't really have any special implementation to add inside of here

11
00:00:51.520 --> 00:00:52.120
just yet.

12
00:00:52.390 --> 00:00:56.620
So we can really just condense down the curly braces like so far right now until we decide to come back

13
00:00:56.650 --> 00:01:03.070
and add in some additional methods to override the ones that are inside of repository so then at the

14
00:01:03.070 --> 00:01:08.050
bottom we're going to create an instance of products repository and export it.

15
00:01:08.060 --> 00:01:12.880
Remember the reason that we're creating a instance inside this file we went over this with the users

16
00:01:12.880 --> 00:01:17.410
in great detail so at the bottom we're creating an instance right here and immediately exporting it

17
00:01:17.640 --> 00:01:22.000
so that there's no possibility of us ever accidently mis typing users.

18
00:01:22.030 --> 00:01:27.550
Jason if we otherwise had to create a new instance of users repository every time that we tried to use

19
00:01:27.550 --> 00:01:37.050
it to back inside of products I'll do a module that exports is new products repository and we'll pass

20
00:01:37.050 --> 00:01:39.960
in the name of the file to save all this data too.

21
00:01:39.960 --> 00:01:42.730
So we'll call this one as you might guess products Dot.

22
00:01:42.750 --> 00:01:45.410
Jason Okay.

23
00:01:45.420 --> 00:01:47.230
So that's pretty much it.

24
00:01:47.240 --> 00:01:54.890
So now we can go back over to our roots admin products dot J S file here it is right here and I'm going

25
00:01:54.890 --> 00:01:58.200
to require in that product's repository at the very top.

26
00:01:58.310 --> 00:02:04.430
So we can then start to create new products list out the ones we have and so on so at the very top I'll

27
00:02:04.430 --> 00:02:05.850
do products.

28
00:02:06.110 --> 00:02:13.660
Repo is require we're going to go up into the roots directory up into the root directory go into repositories

29
00:02:13.660 --> 00:02:14.590
and get products.

30
00:02:14.590 --> 00:02:22.410
So up one up to repositories products not users.

31
00:02:22.450 --> 00:02:24.550
There we go okay.

32
00:02:24.580 --> 00:02:25.690
So that's pretty much it.

33
00:02:25.750 --> 00:02:31.060
Like I said we can now use this product's repo to list out all the products we have and eventually show

34
00:02:31.060 --> 00:02:33.310
a form to create new ones as well.

35
00:02:33.580 --> 00:02:36.880
So it doesn't make a lot of sense to try to show any when we don't have any yet.

36
00:02:36.910 --> 00:02:40.870
So let's take a pause right here we'll come back the next video we'll start to build a forum that can

37
00:02:40.870 --> 00:02:45.850
be used to create a new product and store it inside of our repository.

38
00:02:45.850 --> 00:02:47.980
So quick puzzle take care of that in just a moment.
