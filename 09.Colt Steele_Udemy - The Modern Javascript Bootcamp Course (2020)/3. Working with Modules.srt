1
00:00:00,780 --> 00:00:05,070
The first feature of note that we're going to focus on is how to get code to share between multiple

2
00:00:05,070 --> 00:00:06,360
different files.

3
00:00:06,450 --> 00:00:12,060
So as we just mentioned a video or two ago when we usually run code inside the browser we can have multiple

4
00:00:12,060 --> 00:00:17,430
different JavaScript files all the different variables objects functions or whatever else so we define

5
00:00:17,430 --> 00:00:22,230
inside these separate files are essentially shared and we can make reference to them directly between

6
00:00:22,230 --> 00:00:23,760
these different files.

7
00:00:23,760 --> 00:00:26,100
Of course all the usual scope rules apply.

8
00:00:26,460 --> 00:00:31,530
So for example if I declare a variable inside of my script dot J Yes and wrap it inside of a function

9
00:00:31,810 --> 00:00:34,580
that is isn't a different or more contained scope.

10
00:00:34,830 --> 00:00:39,870
And so it would not be accessible from index J.S. but let's just imagine the simplest case.

11
00:00:40,050 --> 00:00:45,660
Let's imagine that in the browser we've got an h t mail file that loads up my script dot J.S. and index

12
00:00:45,660 --> 00:00:52,770
dot J.S. if my script J S defines a variable called message and assigns it a value I can freely access

13
00:00:52,770 --> 00:00:55,580
that variable from inside of index dot J.S..

14
00:00:55,830 --> 00:01:01,240
The only requirement is that I define index dot J.S. inside of a script tag after my script.

15
00:01:01,260 --> 00:01:02,960
That's pretty much it.

16
00:01:03,030 --> 00:01:06,710
Now in note it is a very different situation.

17
00:01:06,810 --> 00:01:09,700
Let's try creating these two separate files in node.

18
00:01:09,750 --> 00:01:13,650
We're gonna try writing out some code like you see right here we're gonna very quickly see an error

19
00:01:13,890 --> 00:01:16,060
and we'll figure out how we can fix it.

20
00:01:16,170 --> 00:01:22,190
So I gonna go back over to my code editor I'm going to create a new file inside of here called my script

21
00:01:22,270 --> 00:01:33,310
dot J.S. inside of here I'll do a variable declaration like so then I'll go back over to the index dot

22
00:01:33,360 --> 00:01:39,250
J.S. file and back inside of index dot J.S. rather than console logging out that string directly I'm

23
00:01:39,250 --> 00:01:45,280
going to instead tried to do console log the message variable that we just declared inside of my script

24
00:01:46,200 --> 00:01:52,220
so I'll save this I'll make sure both files are saved I'll go then go back over to my terminal and I'll

25
00:01:52,220 --> 00:01:59,210
run node index dot J.S. and sure enough I get a really big error here let me scroll out to so I can

26
00:01:59,210 --> 00:02:05,180
see the error very easily but says that message is not defined so like we just said when we are running

27
00:02:05,180 --> 00:02:12,050
code with node there's no automatic sharing of variables functions objects between different files instead

28
00:02:12,290 --> 00:02:16,850
if we want to share stuff between different files we have to use something called the module system

29
00:02:17,860 --> 00:02:23,650
so the module system is how we do code sharing between different files with node there's a little bit

30
00:02:23,650 --> 00:02:28,630
of kind of arcane syntax here that's gonna be kind of hard to remember when you first start let's just

31
00:02:28,630 --> 00:02:33,520
go over a quick example and then I'll show you a couple of diagrams to really help you understand exactly

32
00:02:33,520 --> 00:02:40,300
what is going on behind the scenes let's imagine that we've got a my script dot J.S. file if we want

33
00:02:40,300 --> 00:02:46,600
to make something or some like variable or object or function that is defined inside of here available

34
00:02:46,600 --> 00:02:51,850
inside of another file we're going to take that variable or that value or whatever it is and we're going

35
00:02:51,850 --> 00:02:59,110
to assign it to a very special variable called module dot exports when we assign a value to module dot

36
00:02:59,140 --> 00:03:06,030
exports that makes that value available inside of other files inside of our project so inside of another

37
00:03:06,030 --> 00:03:11,670
file we can write out something called a require statement require statement we're going to provide

38
00:03:11,760 --> 00:03:14,670
a path to the file that we want to get some code from.

39
00:03:15,390 --> 00:03:21,990
So in this case we would say it require some code from my script dot J.S. that will tell node to essentially

40
00:03:22,050 --> 00:03:29,670
reach out to my script J.S. bind whatever was assigned to module dot exports and that is going to be

41
00:03:29,670 --> 00:03:36,270
the result of the entire require statement so essentially we are taking to that string of high and assigning

42
00:03:36,290 --> 00:03:38,590
to the variable of message.

43
00:03:38,590 --> 00:03:41,710
Let's try implementing this inside of our code Ed and you'll see it in action.

44
00:03:41,740 --> 00:03:46,780
Very quickly I want to repeat once again I'm going to show you a more complete diagram to really help

45
00:03:46,780 --> 00:03:48,520
you internalize what's going on here.

46
00:03:48,580 --> 00:03:52,330
But right now let's just do a quick experiment all right.

47
00:03:52,340 --> 00:03:55,690
So I'll flip back over inside of my script.

48
00:03:55,740 --> 00:04:02,170
J.S. I'm going to assign the variable that I want to make available to other files inside my project.

49
00:04:02,470 --> 00:04:07,410
So I'll do a module dot exports and I'm going to assign message to it.

50
00:04:07,420 --> 00:04:14,310
So now whatever message is referencing in this case the string is available to other files now I can

51
00:04:14,310 --> 00:04:21,670
go back over to index dot J.S. at the top I can write out a require statement they'll say constant message

52
00:04:21,700 --> 00:04:28,630
is require and then I'm going to write out a relative path to the file that I want to require some code

53
00:04:28,630 --> 00:04:39,010
from a relative path would be dot slash my script dot J.S. dot slash on here means in the current directory

54
00:04:39,040 --> 00:04:40,450
or in the same directory.

55
00:04:40,510 --> 00:04:46,240
So in other words we're saying OK we're currently inside the index dot J as file in the same directory

56
00:04:46,540 --> 00:04:52,990
find a file called my script dot J.S. whatever inside of that file is assigned to module dot exports

57
00:04:53,170 --> 00:04:56,260
we want to have returned by this require statement.

58
00:04:56,320 --> 00:05:01,120
So we're going to get back the string of high there in assign it to this variable of message and then

59
00:05:01,120 --> 00:05:09,360
we console log it out it's save both files put back over to my terminal a run node index start J us

60
00:05:09,380 --> 00:05:12,410
once again and sure enough we don't get an error anymore.

61
00:05:13,870 --> 00:05:18,760
OK so that's definitely a very simple practical example but it would be really nice to have a better

62
00:05:18,760 --> 00:05:20,890
idea of what's going on behind the scenes.

63
00:05:20,950 --> 00:05:22,340
So let's take a quick pause right here.

64
00:05:22,360 --> 00:05:26,710
When we come back the next video and until you a little bit more about how this require stuff and this

65
00:05:26,770 --> 00:05:28,930
module does expert stuff is really working.
