WEBVTT
1
00:00:01.180 --> 00:00:06.150
Attached to this video you're going to find a file called AECOM 0 9 3 template.

2
00:00:06.280 --> 00:00:11.760
So once again this has some file inside of it that's going to replace our current show dot J as file.

3
00:00:11.770 --> 00:00:16.840
The only difference here is that I've added a bunch of additional each email some class names and whatnot

4
00:00:17.050 --> 00:00:19.400
just to give us something looks a little bit better.

5
00:00:19.480 --> 00:00:23.510
I'm going to extract that file again you can find a zip file attached to this video.

6
00:00:23.680 --> 00:00:25.100
I'm going to extract the file.

7
00:00:25.310 --> 00:00:28.650
I'll then open that file inside my code editor inside of here.

8
00:00:28.660 --> 00:00:34.620
I can immediately see there is a ton of additional markup I'm going to select everything inside here.

9
00:00:34.700 --> 00:00:35.740
Copy it.

10
00:00:36.020 --> 00:00:38.050
Go to my old showed up j s file.

11
00:00:38.540 --> 00:00:41.380
So here's what we're just working on two seconds ago.

12
00:00:41.430 --> 00:00:49.150
I'm gonna select everything inside of here and delete it and then paste in the contents of the new file.

13
00:00:49.160 --> 00:00:49.440
All right.

14
00:00:49.460 --> 00:00:54.440
Let's say this and you go back over to the browser click refresh and that definitely looks a little

15
00:00:54.440 --> 00:00:56.540
bit better.

16
00:00:56.760 --> 00:00:59.400
You'll notice that I did a little bit of formatting over here.

17
00:00:59.400 --> 00:01:06.150
I took the price said times the quantity of 2 and that gave us the result of thirty eight dollars for

18
00:01:06.150 --> 00:01:12.140
that item so you can find the logic for that right inside of this template file right around here.

19
00:01:12.170 --> 00:01:15.200
So these are the same properties that we were just working with in the last video.

20
00:01:15.200 --> 00:01:17.350
So item dot product price.

21
00:01:17.600 --> 00:01:21.600
The times that we see is really just a capital X..

22
00:01:21.800 --> 00:01:27.870
And then next to that thing is the price times the quantity there is still a little bit of work that

23
00:01:27.870 --> 00:01:29.440
we have to do on this template.

24
00:01:29.440 --> 00:01:35.240
If you scroll down to the bottom you'll see a div that says total.

25
00:01:35.240 --> 00:01:38.980
And then right after that is in each one with a dollar sign inside of it.

26
00:01:38.990 --> 00:01:40.870
So we need to write here.

27
00:01:40.880 --> 00:01:44.560
Display the total of all the items we have inside of our cart.

28
00:01:44.570 --> 00:01:46.070
So we need to do a little bit of math.

29
00:01:46.070 --> 00:01:51.180
We need to loop through all the items we need to take the price multiply by the quantity and then some.

30
00:01:51.200 --> 00:01:53.990
All that stuff up and then print it out as the total.

31
00:01:53.990 --> 00:01:57.890
So this time around not everything inside of the template has been implemented for us.

32
00:01:59.400 --> 00:02:02.700
So to do this let's write out a little bit of logic at the top of this function.

33
00:02:02.730 --> 00:02:07.200
We're going to iterate through all of our items and calculate the total of all the items inside of our

34
00:02:07.200 --> 00:02:13.400
cart there's definitely many different ways we could write out this logic I'm going to show you two

35
00:02:13.400 --> 00:02:14.150
different ways.

36
00:02:14.150 --> 00:02:16.530
The first way is gonna be a very simple way of approaching this.

37
00:02:16.550 --> 00:02:22.100
The second way is going to be a little bit more comp complicated using a reduced helper statement.

38
00:02:22.100 --> 00:02:29.270
The first way we're going to do this is create a variable called Total Price and default it to 0 0 then

39
00:02:29.270 --> 00:02:30.900
do another 4 of loop.

40
00:02:31.130 --> 00:02:40.210
So I'll say 4 let item of items then inside of here will say total price plus equals.

41
00:02:40.210 --> 00:02:44.680
So that saying just take the current value of total price and add in some additional amount that we're

42
00:02:44.680 --> 00:02:46.720
going to calculate right here.

43
00:02:46.720 --> 00:02:52.360
So the additional amount that we want to add in is going to be the item quantity times the price for

44
00:02:52.360 --> 00:02:53.630
that item.

45
00:02:53.680 --> 00:02:59.710
So it's gonna be item quantity times item not product not price

46
00:03:02.460 --> 00:03:02.840
so now.

47
00:03:02.850 --> 00:03:03.500
Total price.

48
00:03:03.510 --> 00:03:07.860
We should be able to print out at the very bottom inside of that each one that we're just looking at.

49
00:03:07.890 --> 00:03:16.160
So I'll go back down on the H1 with the dollar sign I'll put in a another dollar signs the second dollar

50
00:03:16.160 --> 00:03:21.050
sign there is to say that we're about to do some string templating and then inside of it curly braces.

51
00:03:21.050 --> 00:03:24.930
Total price all right.

52
00:03:24.960 --> 00:03:31.020
Let's save this put back over refresh and there's our total price so that will be the thirty eight plus

53
00:03:31.020 --> 00:03:33.240
thirty nine plus fifteen.

54
00:03:33.310 --> 00:03:36.980
It's like I said there's more than one way to accomplish this total right here.

55
00:03:36.980 --> 00:03:40.270
So using the for of loop is really simple and straightforward.

56
00:03:40.340 --> 00:03:44.690
Another way that we could do this is by using a reduced statement instead.

57
00:03:44.690 --> 00:03:48.740
Let's try the reduced format just as a little bit of practice.

58
00:03:48.830 --> 00:03:53.220
I'm going to comment out the stuff we put together so we can keep it around for reference so we're gonna

59
00:03:53.240 --> 00:03:57.760
write out some logic that's going to be just about identical to what we have right here.

60
00:03:57.920 --> 00:03:58.940
Going to say concept.

61
00:03:58.990 --> 00:04:04.760
Total price is items dot reduce.

62
00:04:04.840 --> 00:04:06.840
Now remember how the reduce statement works.

63
00:04:06.860 --> 00:04:08.660
It is very similar to a for each.

64
00:04:08.690 --> 00:04:12.980
Or a map statement in that we're going to iterate over a list of things.

65
00:04:13.100 --> 00:04:17.750
And for everything inside this array we're going to run this function right here.

66
00:04:17.750 --> 00:04:21.930
The big difference with reduce is that it takes a second argument.

67
00:04:22.000 --> 00:04:28.330
It's going to put in a second argument to reduce of zero then inside this function right here.

68
00:04:28.470 --> 00:04:31.660
The first argument is not going to be the thing that we are iterating over.

69
00:04:31.680 --> 00:04:32.990
So it's not going to be our item.

70
00:04:33.000 --> 00:04:38.700
Instead it's going to be some variable that we usually referred to as a ACH or short for accumulator

71
00:04:38.940 --> 00:04:41.590
or pre short for previous.

72
00:04:41.760 --> 00:04:46.410
So the first time that this inner function runs it's going to take it the second argument we put in

73
00:04:46.410 --> 00:04:52.750
right there and pass it in as the previous value then the second argument will be the thing that we

74
00:04:52.750 --> 00:04:54.040
are actually iterating over.

75
00:04:54.040 --> 00:05:01.800
So in this case our item then inside of our function we're going to return a value whatever we return

76
00:05:01.890 --> 00:05:10.080
is going to be provided as the first argument to the next iteration through our items array so essentially

77
00:05:10.080 --> 00:05:15.090
we just have a value that we're passing through or carrying through every time this function gets called

78
00:05:16.020 --> 00:05:21.870
functionally it is very similar to the code we just wrote where we have some kind of accumulator variable

79
00:05:22.200 --> 00:05:24.270
in this case up here we called it total price.

80
00:05:24.270 --> 00:05:29.740
We defaulted its value to zero and we got access to that value every single time that our for loop ran.

81
00:05:29.880 --> 00:05:34.820
So very similar structure right here with the reduced statement as well so inside of here we'll do it

82
00:05:34.840 --> 00:05:45.490
return previous plus item dot quantity times item dot product dot price one thing that's really easy

83
00:05:45.490 --> 00:05:48.700
to forget with a reduced statement is to actually return a value.

84
00:05:48.700 --> 00:05:53.020
So we need to make sure that we are returning a value so that that value can be used as the previous

85
00:05:53.020 --> 00:05:57.900
argument on the next iteration through our loop okay.

86
00:05:57.930 --> 00:05:58.740
So this looks good.

87
00:05:58.740 --> 00:06:03.300
Let's save this go back over and we're really just going to make sure that we still get ninety two right

88
00:06:03.300 --> 00:06:08.480
there I can refresh and yep I definitely still get 90 to okay.

89
00:06:08.480 --> 00:06:12.690
So this is looking pretty good so let's take a quick pause right here.

90
00:06:12.720 --> 00:06:18.720
We just have one last big thing to take care of which is really the deletion of every item or each individual

91
00:06:18.720 --> 00:06:20.740
item inside of our shopping cart.

92
00:06:20.760 --> 00:06:22.530
So let's take care of that in just a moment.
