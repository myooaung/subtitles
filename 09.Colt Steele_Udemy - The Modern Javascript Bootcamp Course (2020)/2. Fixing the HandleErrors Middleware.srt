1
00:00:00,830 --> 00:00:05,330
We are able to update a product but as I just mentioned we still have this kind of big air around our

2
00:00:05,330 --> 00:00:06,930
handle errors function.

3
00:00:07,010 --> 00:00:11,990
It's only just reiterate what the issue is right now handle errors is going to receive the name of some

4
00:00:11,990 --> 00:00:16,610
templates where the template function that we need to run if anything goes wrong with our validators.

5
00:00:16,790 --> 00:00:21,200
So something goes wrong with the validator handle errors is going to invoke that template right there

6
00:00:21,200 --> 00:00:26,360
it's going to render it and then return or send back to whoever made the request whatever is inside

7
00:00:26,360 --> 00:00:27,810
that template.

8
00:00:27,810 --> 00:00:32,300
So the big issue we are running into is that if we take a look at handle errors here's our middleware

9
00:00:32,300 --> 00:00:35,110
such as file when we run the template function.

10
00:00:35,120 --> 00:00:40,490
The only thing we pass in is art as an argument is the object that has the errors that occurred during

11
00:00:40,490 --> 00:00:47,840
validation but in our case if we look at products at J.S. inside of our views directory you and I know

12
00:00:47,960 --> 00:00:54,330
that this template expects to be called with some object that has a product property so our Middleware

13
00:00:54,630 --> 00:01:00,540
is calling the template with just errors but the template wants to see product so whenever there is

14
00:01:00,540 --> 00:01:06,640
an error in our temple gets rendered by handle errors product does not exist product is undefined.

15
00:01:06,810 --> 00:01:12,390
So we then attempt to look up some properties like title and price on product which is undefined which

16
00:01:12,390 --> 00:01:16,650
leads to the very classic error message that we're going to see in JavaScript all the time of cannot

17
00:01:16,650 --> 00:01:21,360
read property title of undefined so in order to fix this error.

18
00:01:21,360 --> 00:01:26,340
We need to figure out some way to essentially call handle errors right here back at our post request

19
00:01:26,340 --> 00:01:33,230
handler but simultaneously tell it to render the template along with some extra data so we're going

20
00:01:33,230 --> 00:01:35,580
to use a little trick to make this happen.

21
00:01:35,810 --> 00:01:39,650
We're gonna write out a little bit of code the first iteration through this code that we write is gonna

22
00:01:39,650 --> 00:01:44,780
be just a little bit confusing but as usual once we write it and go over it very confident that you

23
00:01:44,780 --> 00:01:46,110
will understand what is going on.

24
00:01:46,190 --> 00:01:48,230
So let's get to it.

25
00:01:48,320 --> 00:01:51,740
We're going to start to change the signature of handle errors.

26
00:01:51,740 --> 00:01:57,870
We're gonna say that handle errors still has to always receive a template as the first argument but

27
00:01:57,870 --> 00:02:01,710
now optionally it can also receive a second argument.

28
00:02:01,710 --> 00:02:04,240
This is a key to how we're going to fix this.

29
00:02:04,290 --> 00:02:07,260
So for the second argument again it is optional.

30
00:02:07,260 --> 00:02:12,900
We're going to say that it is going to be a function that is going to be executed only if something

31
00:02:13,050 --> 00:02:14,890
went wrong with the validation step.

32
00:02:15,800 --> 00:02:20,360
Inside of this optional second argument this function that we're gonna pass in we're going to return

33
00:02:20,360 --> 00:02:25,430
an object that has some data that is going to be forwarded automatically onto our template.

34
00:02:25,560 --> 00:02:27,060
So that's how we're going to fix it.

35
00:02:27,110 --> 00:02:29,340
Now that's just a very quick like one sentence overview.

36
00:02:29,360 --> 00:02:34,650
So I'd start to write some code and see what is really going on it's going to provide a callback function

37
00:02:34,650 --> 00:02:35,110
here.

38
00:02:35,130 --> 00:02:41,290
It's going to be async in nature and I'm going to expect that it's going to receive as the first argument

39
00:02:41,410 --> 00:02:42,760
a wreck object.

40
00:02:42,760 --> 00:02:49,610
It's like our actual request object then inside I'm going to look at the product that we were trying

41
00:02:49,610 --> 00:02:50,930
to display or trying to edit.

42
00:02:50,930 --> 00:02:59,240
In this case so I can look that up by doing a weight products repo get one and then to get the product

43
00:02:59,270 --> 00:03:04,310
we actually care about we will call get one with the I.D. write it out of that you l remember we can

44
00:03:04,310 --> 00:03:12,850
get access to whatever ideas right there by referencing rec not brands that idea and then we will return

45
00:03:12,850 --> 00:03:19,770
an object that has product as the key in product as the value and as usual because those are the same.

46
00:03:19,780 --> 00:03:24,630
I'll condense it down to just products like so OK.

47
00:03:24,660 --> 00:03:28,680
So even if the purpose of this function is not clear right now I think you can agree with me that you

48
00:03:28,680 --> 00:03:34,590
can probably understand what it does all it does is taken a request object it looks up in appropriate

49
00:03:34,590 --> 00:03:38,030
product and then returns that product inside of an object.

50
00:03:38,040 --> 00:03:43,840
So this object right here this is what we want to somehow get into our template let's now go over to

51
00:03:43,840 --> 00:03:45,030
our middleware file.

52
00:03:45,160 --> 00:03:48,190
We're gonna make some updates to handle errors inside there.

53
00:03:48,190 --> 00:03:50,700
We're going to make sure that we run this function.

54
00:03:50,710 --> 00:03:54,010
We take whatever gets returned and pass this return value right here.

55
00:03:54,010 --> 00:03:59,710
This object as an additional piece of data into our template okay.

56
00:03:59,740 --> 00:04:05,820
So I'll go to roots admin middleware start J.S. here's our handle errors middleware.

57
00:04:06,090 --> 00:04:11,510
So going to first receive that second argument that we are now passing it now we'll call it data CV

58
00:04:11,610 --> 00:04:12,990
short for data callback

59
00:04:16,140 --> 00:04:22,860
then inside of my request body or some in the middleware body right after we decide to actually send

60
00:04:22,860 --> 00:04:25,730
back some error to the user because hey something went wrong right here.

61
00:04:25,830 --> 00:04:27,400
This right here like right here.

62
00:04:27,450 --> 00:04:30,610
This is where we're going to call that data CB function.

63
00:04:30,930 --> 00:04:32,010
So we're gonna call it function.

64
00:04:32,010 --> 00:04:37,320
We're going to get whatever object or value gets returned and we're going to add that as some additional

65
00:04:37,320 --> 00:04:45,110
data that goes into our template function so we do have to be aware that data CB is going to be an optional

66
00:04:45,110 --> 00:04:45,590
argument.

67
00:04:45,620 --> 00:04:48,730
So we first have to check and see if data CB was provided at all.

68
00:04:48,740 --> 00:04:54,100
So I'll say if data CB So if data CV exists and it was passed in.

69
00:04:54,110 --> 00:04:58,940
OK let's go ahead and call it and we're going to store the data that it returns they'll do in a weight

70
00:04:59,300 --> 00:05:06,170
data CV and we know based on what we wrote over here that it expects a first argument of the request

71
00:05:06,170 --> 00:05:06,820
object.

72
00:05:06,830 --> 00:05:12,290
So when we call data CV I can make sure that I pass in the request which was given as an argument to

73
00:05:12,290 --> 00:05:12,740
our middleware

74
00:05:15,520 --> 00:05:17,700
so now we need to capture the value that comes back.

75
00:05:17,970 --> 00:05:23,670
We can not use the concert keyword like so right here because now we have data defined on this Interscope

76
00:05:23,990 --> 00:05:27,590
and we would not be able to access data outside of the if statement.

77
00:05:27,600 --> 00:05:33,300
So instead I'm going to define right about the if statement using the left keyword a variable called

78
00:05:33,300 --> 00:05:38,640
data and then rather than defining it inside the if statement I'm going to just update the value of

79
00:05:38,640 --> 00:05:40,000
data.

80
00:05:40,050 --> 00:05:43,380
Now I can freely access the data variable outside of that if statement

81
00:05:49,160 --> 00:05:51,650
now finally that we have the data we care about.

82
00:05:51,650 --> 00:05:55,310
So that's going to be an object that has a product key and a product value.

83
00:05:55,310 --> 00:06:00,200
We're going to take that thing and we're going to merge it in with the existing object we have right

84
00:06:00,200 --> 00:06:05,300
here it's right after errors I'll say comma dot dot dot data.

85
00:06:05,300 --> 00:06:10,310
So essentially take whatever keys and values are inside of that data object and merge it in with this

86
00:06:10,400 --> 00:06:12,620
existing one.

87
00:06:12,660 --> 00:06:15,710
Now there is the possibility that data will be undefined.

88
00:06:15,710 --> 00:06:23,160
So in other words if we define data right here by default it gets a default value of undefined if we

89
00:06:23,220 --> 00:06:28,330
did not get a data callback then we're not going to run that if statement and the value of data will

90
00:06:28,330 --> 00:06:29,650
never be updated.

91
00:06:29,650 --> 00:06:35,020
And so we'll be trying to do a dot dot dot undefined that shouldn't result in error but just to prevent

92
00:06:35,020 --> 00:06:38,860
that possibility of a default the value of data and assign it to an empty object.

93
00:06:38,860 --> 00:06:44,560
So even if we don't have a data callback we won't be trying to spread in an undefined value right there.

94
00:06:46,250 --> 00:06:46,560
Okay.

95
00:06:46,580 --> 00:06:51,930
That should pretty much be at so once again all the way from the top here's our poster.

96
00:06:51,930 --> 00:06:52,990
Quest handler.

97
00:06:52,990 --> 00:06:56,990
If something goes wrong with validation we're going to invoke the callback function.

98
00:06:56,980 --> 00:07:02,330
We then get this return value eventually of the object as a product inside of it.

99
00:07:02,440 --> 00:07:05,650
Then our Middleware is going to check to see if a data callback was provided.

100
00:07:05,650 --> 00:07:07,360
If it was it's going to call it.

101
00:07:07,360 --> 00:07:08,640
It's going to take that value.

102
00:07:08,740 --> 00:07:12,970
It's going to spread it into the ears object that eventually goes off to our template function.

103
00:07:12,970 --> 00:07:17,220
And so now our template function will have access to the data we care about.

104
00:07:17,220 --> 00:07:22,130
It will have access to the product and be able to show some details about that product again.

105
00:07:22,190 --> 00:07:26,640
All right now before we test this one last quick change inside of here we just made use of the await

106
00:07:26,640 --> 00:07:27,390
keyword.

107
00:07:27,480 --> 00:07:34,530
Let's make sure that we mark the enclosing function as being async so I'll say return async right there.

108
00:07:34,530 --> 00:07:35,930
Now we should be good to go.

109
00:07:36,330 --> 00:07:39,820
Lastly I want to mention is that our template right now so products at.

110
00:07:39,870 --> 00:07:43,140
J.S. is not using that ear's object just yet.

111
00:07:43,140 --> 00:07:48,820
So even though we might fail validation I'm not going to expect to see any validation messages appear.

112
00:07:48,820 --> 00:07:49,070
Okay.

113
00:07:49,140 --> 00:07:50,900
Let's get to it.

114
00:07:50,970 --> 00:07:56,040
I'll go back to my form and actually just to test out the entire flow offers go back to my products

115
00:07:56,040 --> 00:08:01,810
listing and then hit edit and then on my title I mean just going to delete the title entirely.

116
00:08:01,880 --> 00:08:03,980
So that's definitely in a fail validation.

117
00:08:03,980 --> 00:08:10,130
I'll then submit it and I'm take back to the exact same form with the same default value being applied.

118
00:08:10,130 --> 00:08:15,690
So it's clear that the validation just failed and my server chose to re render this edit form when it

119
00:08:15,700 --> 00:08:21,120
rendered the edit form it tried to throw in the existing title once again into that input.

120
00:08:21,140 --> 00:08:22,250
Now last thing to do.

121
00:08:22,250 --> 00:08:23,060
Clearly this is working.

122
00:08:23,060 --> 00:08:28,010
Last thing I to do is just make sure that we actually show some validation messages on our form so that

123
00:08:28,010 --> 00:08:34,520
the user knows why they are being returned directly back to this form when they click submit so for

124
00:08:34,520 --> 00:08:42,000
that we can go back to our views admin products and at DOT j ust file at the top will once again get

125
00:08:42,000 --> 00:08:46,870
the helper function that we put together called get error.

126
00:08:47,140 --> 00:08:53,720
So I'll get get error now require that from up to directories.

127
00:08:53,720 --> 00:08:54,250
Right.

128
00:08:54,260 --> 00:08:58,340
So yeah we're gonna go up to admin and then View's helpers

129
00:09:01,000 --> 00:09:02,600
so we can call get error.

130
00:09:02,980 --> 00:09:08,110
We'll make sure that we receive the errors object that's going to be passed in from our middleware

131
00:09:11,240 --> 00:09:18,270
and then after our input we'll do some string interpolation we'll call it get error we'll pass on the

132
00:09:18,270 --> 00:09:23,670
errors object and the property that we want to look at inside of it which is title a copy paste that's

133
00:09:23,880 --> 00:09:27,510
for price as well okay.

134
00:09:27,570 --> 00:09:30,140
Let's save this and do one last test.

135
00:09:30,140 --> 00:09:35,780
So I'm going to go back to my product's listing page once again I'll attempt to edit and add delete

136
00:09:35,780 --> 00:09:38,660
the title I'll hit submit.

137
00:09:38,660 --> 00:09:41,060
And there we go there's our validation.

138
00:09:41,060 --> 00:09:46,370
So I tried to submit a product or change the product that didn't have a title and so we saw the validation

139
00:09:46,380 --> 00:09:47,210
appear.

140
00:09:47,300 --> 00:09:53,510
I should also be able to delete the price entirely hit submit and see must be greater than 1 Okay.

141
00:09:53,550 --> 00:09:58,320
So that definitely means that our edit functionality is working out just OK so this is looking pretty

142
00:09:58,320 --> 00:09:58,560
good.

143
00:09:58,560 --> 00:09:59,600
So let's take a pause right here.

144
00:09:59,610 --> 00:10:04,410
When we come back the next video we're going to once again do a quick copy paste of a template just

145
00:10:04,410 --> 00:10:06,760
to get some better styling on this edit form.
