WEBVTT
1
00:00:00.180 --> 00:00:05.850
Now that we're relatively comfortable with promises let's try and refactor this little demo from earlier

2
00:00:06.000 --> 00:00:11.970
where we had a button that was moving and eventually running out of room potentially and stopping.

3
00:00:11.970 --> 00:00:18.350
So if we can't go further if we can't go whatever two hundred or pixels whatever the chump was let's

4
00:00:18.480 --> 00:00:20.790
see I think it was 300 pixels.

5
00:00:20.830 --> 00:00:20.990
Yeah.

6
00:00:21.000 --> 00:00:26.010
So if we can't go another three and four pixels it stops and we achieve this by using a bunch of set

7
00:00:26.130 --> 00:00:30.390
timeouts and then changing the transform property of the button.

8
00:00:30.840 --> 00:00:34.090
But every time in that set time out we would check.

9
00:00:34.440 --> 00:00:35.630
Do we have room to move.

10
00:00:35.970 --> 00:00:41.250
If we don't have room to move we would call one callback that was passed in the on failure callback

11
00:00:41.520 --> 00:00:43.110
if we did have room to move.

12
00:00:43.140 --> 00:00:45.100
We called the on success callback.

13
00:00:45.150 --> 00:00:51.330
So we ended up passing two callbacks in every time we call move X and if we wanted the first one to

14
00:00:51.330 --> 00:00:58.980
complete the first move of through under pixels before the second one started we have to use these callbacks

15
00:00:58.980 --> 00:01:01.350
with the way that we've set it up without promises.

16
00:01:01.350 --> 00:01:03.180
It's a bunch of nesting a bunch.

17
00:01:03.180 --> 00:01:04.120
I mean a whole bunch.

18
00:01:04.120 --> 00:01:07.020
As we saw very very painful.

19
00:01:07.020 --> 00:01:09.730
So let's rewrite this using promises.

20
00:01:09.990 --> 00:01:17.030
I'll comment this out so we don't get the original movement going on and I'll also duplicate this and

21
00:01:17.040 --> 00:01:21.960
commented out and then I guess I'll do it at the top here.

22
00:01:22.230 --> 00:01:29.160
We're going to refactor move X. It's going to no longer accept and on success and success and on failure

23
00:01:30.150 --> 00:01:34.370
it's going to instead return a new promise.

24
00:01:34.620 --> 00:01:43.530
Remember this promise takes a function as its argument resolve and reject which are also two functions.

25
00:01:43.530 --> 00:01:48.530
And then we can move this logic from before into our promise.

26
00:01:48.900 --> 00:01:50.880
What is it called execute or function.

27
00:01:50.910 --> 00:01:51.950
Maybe I'm making it up.

28
00:01:51.960 --> 00:01:56.520
I'm pretty sure that's what it's called but inside of this new Promised function.

29
00:01:56.730 --> 00:02:02.740
So instead of calling on failure we would reject the promise if we can't move.

30
00:02:02.910 --> 00:02:05.010
We're calculating the end of the body.

31
00:02:05.160 --> 00:02:06.840
How much how many pixels we have.

32
00:02:06.840 --> 00:02:09.560
Let's say nine hundred pixels or something.

33
00:02:09.570 --> 00:02:14.370
Actually we can see it's telling me I'm at what twelve twenty five pixels.

34
00:02:14.370 --> 00:02:20.040
Then we're calculating the right of the button and then the current left of the button which we use

35
00:02:20.370 --> 00:02:26.100
if we are going to move and we want to check if the right whatever let's say eight hundred pixels plus

36
00:02:26.130 --> 00:02:28.920
the amount we're trying to move 300 pixels.

37
00:02:28.920 --> 00:02:35.780
If that is greater than the boundary will reject meaning stop we're not going to continue.

38
00:02:35.820 --> 00:02:42.480
Otherwise instead of on success we'll call resolve.

39
00:02:42.480 --> 00:02:47.880
So very similar code except we've wrapped it in a promise that we're returning and we're not using we're

40
00:02:47.880 --> 00:02:50.840
not passing in two callbacks every single time.

41
00:02:50.850 --> 00:02:53.520
So now how would we use this.

42
00:02:53.520 --> 00:03:03.210
It would look like this move x of button let's do three hundred pixels and the delay of one second dot

43
00:03:03.330 --> 00:03:10.740
then and we're not passing any value in when we are rejecting or resolving we could possibly maybe when

44
00:03:10.740 --> 00:03:11.480
we reject.

45
00:03:11.520 --> 00:03:18.480
We could include a reason we could include the maybe the current position of the element we could do

46
00:03:18.480 --> 00:03:27.940
something with it and then we've got our dot then why don't we just cancel that log done moving and

47
00:03:27.940 --> 00:03:28.480
start there.

48
00:03:29.560 --> 00:03:33.720
So I'm going to refresh the page it moves and we get done moving.

49
00:03:34.970 --> 00:03:35.470
OK.

50
00:03:35.590 --> 00:03:42.740
So if we wanted another move X after that first one like we had before we moved three or pixels we move

51
00:03:42.760 --> 00:03:51.100
three or pixels again one second later we don't have to nest it all we need to do is call move X again

52
00:03:52.030 --> 00:03:58.120
move x button three hundred pixels over one second not two seconds.

53
00:03:58.120 --> 00:04:02.140
And if I wanted another dot then yes you could do this.

54
00:04:02.380 --> 00:04:08.200
Put it inside the existing dot then callback or we just return this promise.

55
00:04:08.230 --> 00:04:13.870
This gives us a promise now which is what we saw in the last video we can change promises and I can

56
00:04:13.870 --> 00:04:25.150
put another dot then here and now I can console dialogue done done with both OK so we do the first thing

57
00:04:25.180 --> 00:04:30.040
that takes some time when it finishes when that one second is over the button has moved assuming it

58
00:04:30.040 --> 00:04:31.630
has room which it should.

59
00:04:31.630 --> 00:04:36.940
We're only going through entered pixels then we're going to move X again which will return a promise.

60
00:04:36.940 --> 00:04:42.250
It may or may not be completed or resolved depending on if we have the number the correct number of

61
00:04:42.250 --> 00:04:47.560
pixels the correct space to keep moving and if we do this then we'll run.

62
00:04:47.560 --> 00:04:48.780
We don't have a catch yet.

63
00:04:48.810 --> 00:04:53.800
But this should be good because you're only moving 600 total and then we get done with both.

64
00:04:53.860 --> 00:05:01.540
So that only prints out after to move X functions are done both promises have been resolved.

65
00:05:01.600 --> 00:05:08.080
So now if we wanted to do like five of them all we need to do is duplicate this a couple of times.

66
00:05:08.080 --> 00:05:12.490
So now we're moving four times first three hundred pixels it takes a second.

67
00:05:12.490 --> 00:05:19.060
As soon as it's done but not sooner as soon as it's done then this runs and then as soon as that finishes

68
00:05:19.060 --> 00:05:21.990
and hopefully is resolved this runs then this runs.

69
00:05:22.240 --> 00:05:27.000
We don't have a catch yet so we may run out of space 300 300.

70
00:05:27.100 --> 00:05:27.950
We have space now.

71
00:05:28.330 --> 00:05:29.010
Yes.

72
00:05:29.230 --> 00:05:34.420
UNCUT so we had a rejected promise but we didn't catch it.

73
00:05:34.600 --> 00:05:41.520
And as we saw all we need is one dot catch and we'll consider it log.

74
00:05:41.530 --> 00:05:47.440
Now let's do the constant log out of space cannot move

75
00:05:50.700 --> 00:05:53.820
and we should see one more time.

76
00:05:53.820 --> 00:05:54.630
Here we go.

77
00:05:54.630 --> 00:05:56.820
Outer space cannot move.

78
00:05:56.820 --> 00:05:58.170
And if I instead changed it.

79
00:05:58.200 --> 00:06:05.420
So we're trying to move like I don't know three thousand pixels on the third move x.

80
00:06:05.520 --> 00:06:07.570
We'll still have the same catch work.

81
00:06:07.590 --> 00:06:14.470
It will catch that promise which is rejected it will catch the error so let's try that first jump.

82
00:06:14.470 --> 00:06:17.300
Second Jump Jump can't happen.

83
00:06:17.380 --> 00:06:19.270
Outer space cannot move.

84
00:06:19.270 --> 00:06:26.800
Now it's really cool is in situations like this where all we're doing in the dot then callback is returning

85
00:06:26.830 --> 00:06:28.120
another promise.

86
00:06:28.420 --> 00:06:31.300
We can shorten it up as we've seen with aero functions.

87
00:06:31.300 --> 00:06:37.030
If you do choose to use aero functions if you are returning something and it's the only expression the

88
00:06:37.030 --> 00:06:39.980
only line you can use an implicit return.

89
00:06:40.300 --> 00:06:41.530
So you could use parentheses.

90
00:06:41.530 --> 00:06:47.560
We don't have to write the return keyword can just do this right here.

91
00:06:47.560 --> 00:06:51.140
Just like that and we can chain them together.

92
00:06:51.160 --> 00:06:59.480
So I'm just going to replace what I have with a couple of these let's do five of them and keep our one

93
00:06:59.480 --> 00:07:00.500
sketch.

94
00:07:00.500 --> 00:07:06.770
So this only works to make it super concise and just nice not a bunch of curly braces that only works

95
00:07:06.890 --> 00:07:10.880
if there's only one expression and it should be returned implicitly.

96
00:07:10.880 --> 00:07:14.420
So we don't write return but it's being returned if you need some review on that.

97
00:07:14.420 --> 00:07:16.710
Check out the aero function section.

98
00:07:16.760 --> 00:07:17.060
OK.

99
00:07:17.690 --> 00:07:22.560
So let's check it out first move.

100
00:07:22.620 --> 00:07:23.710
Second move.

101
00:07:23.790 --> 00:07:28.620
Third fourth and then we run out of space.

102
00:07:28.680 --> 00:07:29.580
Awesome.

103
00:07:29.700 --> 00:07:36.200
So I could change this to be 100 pixels and do this a whole bunch.

104
00:07:36.500 --> 00:07:43.780
We'll see when we run out of space one more time it still I guess removing three 300 at the very first

105
00:07:43.780 --> 00:07:46.130
time didn't change that one.

106
00:07:47.090 --> 00:07:50.160
And now we're out of space.

107
00:07:50.180 --> 00:07:50.870
Pretty cool stuff.

108
00:07:50.870 --> 00:07:55.070
I think it's a really nice nice way of shortening your coat up and making it.

109
00:07:55.160 --> 00:07:58.190
It's not even about shortening it it's making it just easier to follow.

110
00:07:58.190 --> 00:08:01.390
If we compare this is a huge mess.

111
00:08:01.790 --> 00:08:08.090
Not only isn't nested but we had to pass in to callbacks so we get this ugly like I don't know what

112
00:08:08.090 --> 00:08:14.660
to call this like a triangle a pyramid mirror image the reflection there go of all of these callbacks

113
00:08:14.690 --> 00:08:16.390
even if they're doing the same thing.

114
00:08:16.550 --> 00:08:21.000
The failure callback here we just need a single dot catch and it does a trick.

115
00:08:21.290 --> 00:08:27.020
So the last thing we could do is refactor this a bit so our DOT catch could actually know this callback

116
00:08:27.020 --> 00:08:32.260
could know where it was stopped why we didn't keep moving to the right.

117
00:08:32.330 --> 00:08:36.980
Basically we know we're out of room but we could print out you.

118
00:08:36.980 --> 00:08:42.240
The button is currently at five under pixels and you tried to move three hundred but the body is X or

119
00:08:42.380 --> 00:08:42.770
who knows.

120
00:08:43.010 --> 00:08:46.990
We could just make a little object when we reject that included.

121
00:08:47.180 --> 00:08:55.670
Let's say the body boundary and I'll just use the shorthand here so body boundary will be the key and

122
00:08:55.700 --> 00:08:57.740
whatever it holds will be the value.

123
00:08:57.740 --> 00:09:00.300
Let's also add in the element right in the amount.

124
00:09:00.320 --> 00:09:05.690
So we'll have three different properties that we are passing through when we reject then down here when

125
00:09:05.690 --> 00:09:08.340
we catch we can just add in our objects.

126
00:09:08.360 --> 00:09:09.580
We'll just call this.

127
00:09:09.590 --> 00:09:12.200
You can call it error but it's not really an error.

128
00:09:12.200 --> 00:09:16.650
We'll call it data as a parameter and let's grab.

129
00:09:16.730 --> 00:09:23.030
We could just structure actually if we want body boundary we want.

130
00:09:23.030 --> 00:09:25.580
Amount and what else was there.

131
00:09:25.630 --> 00:09:26.750
All right.

132
00:09:26.780 --> 00:09:35.600
Okay so we can consider log something like body is in situ template literal string template literal

133
00:09:36.260 --> 00:09:51.400
body is body boundary p x wide and then below that council that log let's say element is at L right

134
00:09:52.090 --> 00:10:01.610
P X comma and then we'll display the amount P X is too large.

135
00:10:01.780 --> 00:10:02.630
Okay.

136
00:10:03.050 --> 00:10:10.830
So we reject with that information rather than just blindly always printing out outer space cannot move.

137
00:10:10.940 --> 00:10:14.670
Let's see what happens when we finally hit that catch.

138
00:10:14.690 --> 00:10:15.390
Oh I forgot.

139
00:10:15.440 --> 00:10:19.210
Did all these one hundred pixel little tiny jumps.

140
00:10:19.220 --> 00:10:20.700
Okay here we go.

141
00:10:20.720 --> 00:10:27.140
Body is thirteen fifty four pixels element is at twelve ninety seven one hundred pixels is too large

142
00:10:27.290 --> 00:10:32.410
because that would take us to thirteen ninety seven and that's pretty much it.

143
00:10:32.540 --> 00:10:38.720
So still a very simple example not the most useful thing to do ever but you can see what a massive difference

144
00:10:38.720 --> 00:10:45.410
this made I mean we're doing what 10 15 different calls to move X and they're happening one after another

145
00:10:45.800 --> 00:10:51.470
and all of them are handled if something goes wrong if they fail we don't have room This catches all

146
00:10:51.470 --> 00:10:52.460
of them.

147
00:10:52.460 --> 00:10:53.540
Compare that to this.

148
00:10:53.540 --> 00:11:00.740
This is only five or so different move X calls if we wanted to replicate this off I mean I would I would

149
00:11:00.740 --> 00:11:06.290
be here forever we would have at least twice as much code as we have right now and it would be incredibly

150
00:11:06.290 --> 00:11:08.360
nested in hard to keep track of.

151
00:11:08.630 --> 00:11:10.780
So that is a real value of promises.

152
00:11:10.820 --> 00:11:15.890
It's not just about doing asynchronous things and being able to run some code afterwards.

153
00:11:15.890 --> 00:11:22.070
It's also about being able to catch any time a promise is rejected having a single catch it makes a

154
00:11:22.070 --> 00:11:23.070
huge difference.

155
00:11:23.090 --> 00:11:29.330
We don't have to have 10 or 20 different catches one per each dot then for each promise as long as we

156
00:11:29.330 --> 00:11:35.270
return a promise in the dot then which is what we're doing thanks to an implicit aero function return.

157
00:11:35.350 --> 00:11:41.960
All right so we're now moving on from our sort of Playland promises very we're doing very very trivial

158
00:11:41.960 --> 00:11:42.890
simple things.

159
00:11:42.890 --> 00:11:49.310
And next we'll move on to making real HDP requests and use promises those functions those methods return

160
00:11:49.310 --> 00:11:50.060
promises.

161
00:11:50.060 --> 00:11:52.880
So we'll get practice with all this fun stuff that we've seen so far.
