WEBVTT
1
00:00:00.910 --> 00:00:03.610
Now we have the idea of redirects inside of application.

2
00:00:03.610 --> 00:00:07.450
There's one other place where we need to make use of redirects quite liberally.

3
00:00:07.630 --> 00:00:12.220
So recall that we had said originally that a user should not be able to access this administration panel

4
00:00:12.460 --> 00:00:15.340
unless they have signed into our application.

5
00:00:15.340 --> 00:00:18.210
We don't have any check like that right now inside of our app.

6
00:00:18.250 --> 00:00:24.250
So at present anyone can come to these different product listing pages like admin slash products admin

7
00:00:24.250 --> 00:00:29.710
products new they can create new products view all the products we have edit and eventually delete them

8
00:00:29.740 --> 00:00:30.660
as well.

9
00:00:30.880 --> 00:00:34.690
Eventually added as well we even put that functionality together just yet.

10
00:00:34.840 --> 00:00:39.400
So we need to make sure that inside of all these different root handlers we add in some code to make

11
00:00:39.400 --> 00:00:45.550
sure that a user is signed into our application before we allow them to see all this different content

12
00:00:46.060 --> 00:00:50.630
like all of our index are new and so on.

13
00:00:50.810 --> 00:00:55.800
The first we have to establish is how we check to see if a user is signed in at all to check that.

14
00:00:55.820 --> 00:01:01.840
Recall that inside of our roots admin update J.S. file whenever a user signed up to our application.

15
00:01:02.060 --> 00:01:08.640
We defined the rect session dot user I.D. property and we assign the user I.D. to that property.

16
00:01:08.690 --> 00:01:11.510
We did the same thing inside of sine and down here as well.

17
00:01:11.510 --> 00:01:14.280
So here's the sign and route after user signs in.

18
00:01:14.330 --> 00:01:15.800
We set up that property.

19
00:01:16.160 --> 00:01:20.500
Remember rect session is an object that eventually gets stored on the user's cookie.

20
00:01:20.570 --> 00:01:22.990
So every single time a user makes a followup request.

21
00:01:23.090 --> 00:01:29.150
We will always see red dot session dot user I.D. if the user is signed in and finally whenever user

22
00:01:29.150 --> 00:01:35.660
signs out here throughout handler for that remember we clear the red dot session object entirely So

23
00:01:35.770 --> 00:01:41.410
in short in order to make sure that a user is signed in before they can access admin slash products

24
00:01:41.680 --> 00:01:43.530
the new form or submit that form.

25
00:01:43.630 --> 00:01:50.680
We need to double check and make sure that the REC not session that user I.D. Property is defined so

26
00:01:50.820 --> 00:01:55.020
let's add in some code to manually do that for all three of these handlers.

27
00:01:55.260 --> 00:01:57.360
First start off at admin slash products.

28
00:01:57.360 --> 00:02:08.960
I'll say if not rec not session that user I.D. then let's return early and we will do a redirect back

29
00:02:08.960 --> 00:02:12.230
to the sign in page.

30
00:02:12.240 --> 00:02:17.280
Now we essentially want that same logic in all three of these request handlers so I can copy that statement

31
00:02:17.280 --> 00:02:18.200
right there.

32
00:02:18.300 --> 00:02:23.630
Paste it into the second one and then paste it into the third one as well.

33
00:02:23.650 --> 00:02:28.400
Now as soon as I do that we're once again in a scenario where we're seeing some really heavy code duplication

34
00:02:28.400 --> 00:02:30.460
between these three different root handlers.

35
00:02:30.530 --> 00:02:33.880
And remember internally we see code duplication between our handlers.

36
00:02:33.950 --> 00:02:37.850
That's always a sign that we need to create a middleware function.

37
00:02:37.850 --> 00:02:39.330
So what we have right here works.

38
00:02:39.350 --> 00:02:42.770
It is good but we're going to want to do some code reuse instead.

39
00:02:42.770 --> 00:02:48.780
So we're going to extract that if statement into a very simple middleware I'm going to find my roots

40
00:02:48.870 --> 00:02:51.360
admin middleware Scott J.S. file.

41
00:02:51.360 --> 00:02:54.080
We've already got one middleware put together inside of here.

42
00:02:54.300 --> 00:03:00.600
So we're going to create another middleware right underneath it that we will call require off

43
00:03:03.530 --> 00:03:07.150
the arguments to our middleware function are going to be req rez.

44
00:03:07.250 --> 00:03:11.510
And next you'll notice that the arguments we have right here are a little bit different than the ones

45
00:03:11.510 --> 00:03:12.790
we had up here.

46
00:03:12.800 --> 00:03:16.580
The reason that we had this template function up here and the reason that we were eventually returning

47
00:03:16.580 --> 00:03:21.440
a function from this one is that we wanted to make sure that we can kind of customize this handle errors

48
00:03:21.470 --> 00:03:24.320
middleware differently for every different root handler.

49
00:03:24.320 --> 00:03:27.960
Remember we wanted to throw in that different template function each time.

50
00:03:27.960 --> 00:03:29.730
So that's why this one was returning a function.

51
00:03:29.740 --> 00:03:32.240
It's because we wanted to customize the middleware.

52
00:03:32.600 --> 00:03:37.010
In this case we require off there is no customization required whatsoever.

53
00:03:37.010 --> 00:03:42.200
So we're just going to pass a reference to this require auth function to serve the purpose of our middleware

54
00:03:42.620 --> 00:03:46.950
and inside of here we'll do our check for the session or some of the user I.D. property.

55
00:03:47.300 --> 00:03:52.770
If it's not defined we're going to redirect the user back to that sign in roots inside of here.

56
00:03:52.790 --> 00:04:03.920
We'll say if not rec not session not user I.D. So there is no user I.D. present then we need to return

57
00:04:03.920 --> 00:04:13.680
early and we'll do a resort redirect back to the sign in securing then otherwise if we get past that

58
00:04:13.680 --> 00:04:17.260
check we will call the next malware instead or something.

59
00:04:17.290 --> 00:04:21.630
The next function remember the next function is essentially a sign that everything inside of our middleware

60
00:04:21.840 --> 00:04:22.740
went through correctly.

61
00:04:22.740 --> 00:04:24.320
It all worked out just fine.

62
00:04:24.420 --> 00:04:31.190
So we want to continue on and run the next middleware or run our root handler or whatever else okay.

63
00:04:31.230 --> 00:04:32.380
So now we've got this together.

64
00:04:32.420 --> 00:04:33.490
Let's save this file.

65
00:04:33.680 --> 00:04:38.570
We'll go back to product start J.S. I'm going to find the three if statements that we just put together

66
00:04:39.020 --> 00:04:39.820
and delete each of them

67
00:04:44.260 --> 00:04:50.030
so there's all three deleted and now at the top this file we can find where we already have a require

68
00:04:50.030 --> 00:04:51.460
statement from middle.

69
00:04:51.710 --> 00:04:57.170
And in addition to getting the handle errors middleware also get the require auth middleware as well.

70
00:04:59.820 --> 00:05:04.030
Then I'll take that middleware and I listed in each of these different root handlers.

71
00:05:04.080 --> 00:05:10.350
So I'll say as the second argument require off and again notice that I am not invoking it here because

72
00:05:10.350 --> 00:05:12.500
we don't want to run require authors right away.

73
00:05:12.630 --> 00:05:14.920
We want to provide a function to this root handler.

74
00:05:14.940 --> 00:05:20.310
So this root handler can call that function at some future point in time with the request response and

75
00:05:20.310 --> 00:05:26.650
next functions we can do that with the same one second one as well.

76
00:05:26.710 --> 00:05:28.640
And then finally the third one as well.

77
00:05:28.690 --> 00:05:31.650
And then in this case we've got a couple of existing Middleware is inside of here.

78
00:05:31.660 --> 00:05:38.040
So it kind of turns into a question of when we want to start to check to see if there actually is user

79
00:05:38.040 --> 00:05:39.250
signed in.

80
00:05:39.250 --> 00:05:43.240
We probably want to make sure that a user is signed in before we start to even think about allowing

81
00:05:43.240 --> 00:05:44.940
them to upload a file.

82
00:05:45.070 --> 00:05:49.470
So gonna make sure they put require off as the first middleware in this chain.

83
00:05:49.480 --> 00:05:53.890
That's gonna make sure that a user is signed in before we start the image upload process.

84
00:05:53.890 --> 00:05:56.650
If they're not signed in then hey get out of here.

85
00:05:56.680 --> 00:06:03.940
Don't give us a file or anything like that it's let's save this and we can do a very quick test.

86
00:06:04.000 --> 00:06:09.510
I'm going to first go to sign out to make sure that I'm not signed into the application so now logged

87
00:06:09.510 --> 00:06:17.320
out I'll then go to admin slash products loops products.

88
00:06:17.330 --> 00:06:18.290
There we go.

89
00:06:18.290 --> 00:06:24.170
And I get automatically redirected back to sign in so I can also go to product slash new whoops Advent

90
00:06:24.170 --> 00:06:28.960
products new I that I get redirected back to sign it again.

91
00:06:29.120 --> 00:06:30.890
But now if we actually sign in

92
00:06:34.070 --> 00:06:36.140
now I should be able to navigate to all these different pages.

93
00:06:36.140 --> 00:06:42.220
So now I can go to admin product successfully and I can go to admin products new successfully aswell.

94
00:06:42.290 --> 00:06:43.550
OK so very good.

95
00:06:43.550 --> 00:06:45.400
Looks like it's all working out.

96
00:06:45.500 --> 00:06:47.030
That's definitely another good step forward.

97
00:06:47.030 --> 00:06:49.330
Let's pause right here and continue in just a moment.
