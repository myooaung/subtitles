WEBVTT
1
00:00:00.240 --> 00:00:01.170
Welcome back.

2
00:00:01.170 --> 00:00:05.470
So far we've only seen one of the primitive types we've been working with no.

3
00:00:05.520 --> 00:00:10.740
We talked about numbers how they work different numeric operators who made variables with numbers but

4
00:00:10.740 --> 00:00:14.280
there are multiple other primitive types and we're gonna dress them.

5
00:00:14.310 --> 00:00:17.520
So first of all we're gonna talk about boolean very quickly.

6
00:00:17.610 --> 00:00:20.600
It's simple short and easy.

7
00:00:20.610 --> 00:00:24.490
Primitive types to discuss and then we'll come back to strings in the next video.

8
00:00:24.510 --> 00:00:27.610
So billions are simply true or false values.

9
00:00:27.630 --> 00:00:29.190
There's only two options.

10
00:00:29.190 --> 00:00:32.870
If you're using a Boolean true or false they are very efficient.

11
00:00:32.880 --> 00:00:38.040
As far as how much space they take up because there's only two options and we use them all the time

12
00:00:38.180 --> 00:00:40.840
and the main reason for that will become clearer later on.

13
00:00:40.890 --> 00:00:47.550
And once we talk about logic and how we write logic using JavaScript So True or false we can make a

14
00:00:47.550 --> 00:00:48.690
variable with them.

15
00:00:48.810 --> 00:00:50.880
That's it to make a boolean it looks like this.

16
00:00:50.940 --> 00:00:57.180
If you wanted to you can go ahead and type true that is a boolean and you can type false that's it.

17
00:00:57.300 --> 00:00:58.590
No quotes around them.

18
00:00:58.650 --> 00:01:04.110
If you're familiar with strings this is not a boolean.

19
00:01:04.180 --> 00:01:07.060
It says the word true but it is not the Boolean true.

20
00:01:07.060 --> 00:01:09.150
This is special as you can see here.

21
00:01:09.250 --> 00:01:13.330
Just like with numbers we can store boolean values in a variable.

22
00:01:13.360 --> 00:01:15.250
So here are three examples.

23
00:01:15.340 --> 00:01:16.930
Let is logged in.

24
00:01:16.990 --> 00:01:18.150
Equals true.

25
00:01:18.300 --> 00:01:21.850
It starts out as true and potentially it would be false.

26
00:01:21.850 --> 00:01:26.230
Later on if someone logs out we have game over equals false.

27
00:01:26.290 --> 00:01:27.700
So the game starts.

28
00:01:27.700 --> 00:01:28.950
Game over is false.

29
00:01:28.990 --> 00:01:30.300
It's not over.

30
00:01:30.490 --> 00:01:36.310
And then the user dies or does something bad in the game and so game over becomes true and then const

31
00:01:36.340 --> 00:01:38.270
is water what equals true.

32
00:01:38.290 --> 00:01:42.750
I use const here because is water wet should not change.

33
00:01:42.880 --> 00:01:45.800
Hopefully water should always be wet and that's it.

34
00:01:45.910 --> 00:01:49.570
We can make a variable just like that so we'll do one example.

35
00:01:49.570 --> 00:01:58.520
Keep it short let's do is hungry and I'll set that to true and we look at it as hungry.

36
00:01:58.840 --> 00:02:00.580
It's true surprise.

37
00:02:00.910 --> 00:02:03.930
And we're using less so we could set it to false.

38
00:02:03.940 --> 00:02:04.960
There we go.

39
00:02:04.960 --> 00:02:09.820
The only other thing I'll talk about in this video a very important topic in JavaScript or an important

40
00:02:09.820 --> 00:02:12.160
idea is that variables can change.

41
00:02:12.160 --> 00:02:17.740
Type if you have experience with any other programming language well maybe not any other but many other

42
00:02:17.740 --> 00:02:18.670
languages.

43
00:02:18.790 --> 00:02:24.670
When you declare a variable and you make it a number it needs to stay a number in JavaScript there is

44
00:02:24.670 --> 00:02:26.110
no restriction on that.

45
00:02:26.230 --> 00:02:29.230
We can change a number to a Boolean at any point.

46
00:02:29.230 --> 00:02:31.510
That's not saying it's a good idea at all.

47
00:02:31.510 --> 00:02:36.790
In fact it's one of the things a lot of people don't like about JavaScript and it's why things like

48
00:02:36.790 --> 00:02:37.860
TypeScript exist.

49
00:02:37.870 --> 00:02:43.210
If you're familiar with typescript if you've heard the word or the name it is built on top of JavaScript

50
00:02:43.210 --> 00:02:49.250
and it adds in stricter rules and one of those rules is that your variables cannot change type.

51
00:02:49.420 --> 00:02:53.560
So I could make a boolean variable let is hungry.

52
00:02:53.680 --> 00:02:56.070
I already have that one I'll get an error if I read declare it.

53
00:02:56.380 --> 00:02:59.160
Let's do let is angry.

54
00:02:59.500 --> 00:03:00.780
Set to false.

55
00:03:01.150 --> 00:03:05.650
And then I could change is angry to now be 1 2 3 9.

56
00:03:05.710 --> 00:03:07.090
No problem.

57
00:03:07.090 --> 00:03:11.360
So again not something that you usually would do or that really makes a lot of sense.

58
00:03:11.530 --> 00:03:17.080
But it's possible in JavaScript and other than that the main takeaway is that we can have variables

59
00:03:17.080 --> 00:03:18.700
of all sorts of types of JavaScript.

60
00:03:18.700 --> 00:03:22.600
We've only seen numbers so far but now we've covered our second primitive type.

61
00:03:22.600 --> 00:03:24.220
Boolean true and false.

62
00:03:24.220 --> 00:03:24.670
That's it.
