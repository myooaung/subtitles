WEBVTT
1
00:00:00.120 --> 00:00:07.260
We saw a double equals which is going to check for equality of value but it ignores type triple equals

2
00:00:07.500 --> 00:00:10.560
cares both about value and type.

3
00:00:10.560 --> 00:00:12.990
So it's three equal signs in a row.

4
00:00:12.990 --> 00:00:18.540
And again it cares about the type and value it's not going to try and coerce the values to be of a common

5
00:00:18.540 --> 00:00:19.460
type.

6
00:00:19.470 --> 00:00:27.240
So if we have something like two triple equals the string two that's going to be false versus double

7
00:00:27.240 --> 00:00:29.520
equals is true.

8
00:00:29.520 --> 00:00:37.890
We also saw an example where we had zero double equals false that is true triple equals is false.

9
00:00:37.890 --> 00:00:40.750
So it is stricter hence the term or the name.

10
00:00:40.770 --> 00:00:46.950
Strict equality operator all of those examples that we saw with double equals that we're kind of wonky

11
00:00:47.010 --> 00:00:52.650
like undefined W equals no which is true if we do it with triple equals.

12
00:00:52.650 --> 00:00:54.430
They are not the same type.

13
00:00:54.480 --> 00:00:55.580
So it doesn't matter.

14
00:00:55.650 --> 00:01:03.510
It's false but if we do something that definitely is true three equals three or no triple equals no

15
00:01:03.810 --> 00:01:05.040
that's true.

16
00:01:05.040 --> 00:01:06.420
And so on.

17
00:01:06.420 --> 00:01:12.960
So triple equals is more precise or more specific it cares about type and generally that's what you

18
00:01:12.960 --> 00:01:13.740
want.

19
00:01:13.830 --> 00:01:19.050
If you were using double equals you could get some weird behavior if you're trying to check if a certain

20
00:01:19.050 --> 00:01:24.770
value is exactly false and instead the value is zero.

21
00:01:24.780 --> 00:01:28.090
This could lead to some unexpected decisions or results.

22
00:01:28.170 --> 00:01:30.210
So generally we stick to triple equals.

23
00:01:30.210 --> 00:01:34.140
It's more specific it's more precise type usually matters.

24
00:01:34.140 --> 00:01:41.880
If we had some variable called is logged in and it's set to false and we wanted to check is logged in

25
00:01:42.960 --> 00:01:44.130
equal to False.

26
00:01:44.250 --> 00:01:49.790
This works like we want to make sure nobody is logged in so we're checking is logged in set to false.

27
00:01:49.890 --> 00:01:58.470
But if somebody somehow set it to 0 for example and we ran that line again is logged in double equals

28
00:01:58.470 --> 00:01:59.070
false.

29
00:01:59.220 --> 00:02:03.190
It's still saying true but it's not actually false.

30
00:02:03.450 --> 00:02:07.680
If we instead use triple equals we avoid that entirely.

31
00:02:07.680 --> 00:02:13.200
So in general ninety nine point nine nine nine nine nine percent of the time what you want is triple

32
00:02:13.200 --> 00:02:13.950
equals.

33
00:02:13.950 --> 00:02:18.120
And in this course you will be using triple equals for everything.

34
00:02:18.120 --> 00:02:20.650
It's really rare that you need double equals.

35
00:02:20.670 --> 00:02:24.120
There are people who will say never ever use double equals.

36
00:02:24.210 --> 00:02:27.150
I think it's a good rule of thumb if you're brand new to JavaScript.

37
00:02:27.150 --> 00:02:31.210
I certainly haven't used it in the last year or so at least.

38
00:02:31.320 --> 00:02:36.600
But it is something you might see sometimes in certain edge cases and scenarios and beating a dead horse

39
00:02:36.600 --> 00:02:37.240
here.

40
00:02:37.260 --> 00:02:40.390
So just remember triple equals not double.

41
00:02:40.390 --> 00:02:43.440
And let's wrap up here by talking about non equality.

42
00:02:43.880 --> 00:02:48.960
So just like we have two ways of checking if something is equal to another thing we have two ways of

43
00:02:48.960 --> 00:02:51.820
checking if two values are not equal.

44
00:02:51.840 --> 00:02:56.180
We have non equality just the plain old non equality.

45
00:02:56.190 --> 00:03:01.050
This is the analogue or that cousin of double equals.

46
00:03:01.200 --> 00:03:06.990
And then we have strict non equality which is the cousin of triple equals.

47
00:03:06.990 --> 00:03:10.990
So if we do something like 1 is not equal to 2 we get true.

48
00:03:11.070 --> 00:03:19.020
That makes sense one is not 2 if we keep using the one equal sine version we could also do this one

49
00:03:19.290 --> 00:03:25.980
is not equal to one but that gives us false because we're using a single equal sign which is like the

50
00:03:25.980 --> 00:03:28.440
double equals that doesn't care about type.

51
00:03:28.440 --> 00:03:31.920
So we end up with false because they're converted to the same type.

52
00:03:32.070 --> 00:03:37.880
And it's essentially checking is one not equal to one and that's false.

53
00:03:38.370 --> 00:03:45.840
If we instead use this version where we have two equal signs we end up with one strict non equality

54
00:03:46.320 --> 00:03:48.780
string one and that is true.

55
00:03:48.840 --> 00:03:54.030
So for the same reason that I said you should always use triple equals you should almost always use

56
00:03:54.240 --> 00:03:57.930
this version of non equality to equal signs.

57
00:03:57.930 --> 00:04:00.490
So we've now covered all of the comparison operators.

58
00:04:00.490 --> 00:04:03.350
We need to talk about we saw greater than less than.

59
00:04:03.360 --> 00:04:06.520
And then also greater than or equal to less than or equal to.

60
00:04:06.630 --> 00:04:12.720
And then in terms of the equality operators just go with the bottom to here to check if things are equal

61
00:04:12.900 --> 00:04:16.600
use triple equals to check if things are not equal.

62
00:04:16.620 --> 00:04:23.130
Use this version where we have one exclamation point and two equal signs those two circle them remember

63
00:04:23.130 --> 00:04:25.190
them and ignore these two.

64
00:04:25.260 --> 00:04:27.120
I need to show them to you but ignore them.
