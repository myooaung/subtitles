1
00:00:00,670 --> 00:00:03,180
In the last video I mentioned the chai assertion library.

2
00:00:03,210 --> 00:00:07,940
So that is how we're going to make sure that this dropdown doesn't have that is active class name.

3
00:00:07,980 --> 00:00:13,050
Let's go take a look at the documentation for chai really quickly inside of a new browser tab.

4
00:00:13,050 --> 00:00:20,640
I'm going to do a search for chai J.S. we'll find that Chai GSK dot com I'm going to be honest with

5
00:00:20,640 --> 00:00:20,870
you.

6
00:00:20,880 --> 00:00:27,370
This library right here I can just about guarantee you that you're not going to like it too much so

7
00:00:27,370 --> 00:00:32,560
just a little bit ago we saw that in node there is that a search library and I had just that or that

8
00:00:32,560 --> 00:00:37,030
module and had those like ten or twelve functions inside of it that allowed us to very easily try to

9
00:00:37,030 --> 00:00:41,730
prove something in a given test the chai library does the same thing.

10
00:00:41,850 --> 00:00:46,440
But the reason that it's a little bit complicated is that it gives you three different ways of doing

11
00:00:46,500 --> 00:00:48,680
the exact same thing.

12
00:00:48,690 --> 00:00:53,760
So right here inside the official documentation you're going to see a style of writing out some assertions

13
00:00:54,030 --> 00:01:02,490
using the should syntax the expected syntax and the Assert syntax is all do the exact same thing every

14
00:01:02,490 --> 00:01:06,870
single one of them is a matter of fact each line of code you see inside of here going from left to right

15
00:01:07,170 --> 00:01:11,300
is 100 percent equal they're all doing the exact same check.

16
00:01:11,370 --> 00:01:16,590
The only reason they offer these three different styles is just for developer preference and so hey

17
00:01:17,070 --> 00:01:19,370
I assume you've got a preference right.

18
00:01:19,380 --> 00:01:25,200
I mean I don't really but perhaps you do or I should say maybe other developers do.

19
00:01:25,200 --> 00:01:29,970
So we have to essentially pick one of these three different styles of syntax and use it to actually

20
00:01:30,030 --> 00:01:32,490
write some assertions inside of our code.

21
00:01:32,490 --> 00:01:36,690
Now I want to repeat here we don't technically have to use Chai to write these assertions we could do

22
00:01:36,690 --> 00:01:42,780
those if statements but they just end up being so ugly so instead we're going to try out this expect

23
00:01:42,840 --> 00:01:44,310
syntax.

24
00:01:44,310 --> 00:01:49,740
So we're going to use this expect function to check some different values of whatever we're working

25
00:01:49,740 --> 00:01:54,060
with and if it's not quite what we expect the expected function is going to throw an error and that's

26
00:01:54,060 --> 00:02:00,210
gonna show up as a failure on our test it's gonna click on visit expect a guide right here that's going

27
00:02:00,210 --> 00:02:06,140
to take us to a quick guide on how to make use of the syntax here's the general idea we're going to

28
00:02:06,140 --> 00:02:13,070
first get access to the expected function we're then going to call expect and then pass in some value

29
00:02:13,100 --> 00:02:20,800
that we want to test we then chain on some series of little words like that so to dot be a sweet to

30
00:02:21,040 --> 00:02:28,260
not be dot a and then something to compare it against what makes expect really confusing is these little

31
00:02:28,620 --> 00:02:34,170
two dot blah blah blah things inside of here because it's essentially a sigh are kind of an art and

32
00:02:34,170 --> 00:02:38,370
a science to memorize all the different combinations and figure out how to actually effectively use

33
00:02:38,370 --> 00:02:45,280
them of course you can take a look at API appear at the top right hand side and then click on expect

34
00:02:45,340 --> 00:02:49,940
slash should and this will show you all the different ways you can chain these things together.

35
00:02:50,320 --> 00:02:54,640
There are a lot of examples inside here to help you understand how to use them but as you start to look

36
00:02:54,640 --> 00:03:00,100
at this item about you yes if you're feeling like this is overwhelming hundred percent yes totally without

37
00:03:00,100 --> 00:03:05,050
a doubt this really is kind of overboard and it's really hard to get into when you first start doing

38
00:03:05,050 --> 00:03:09,790
testing that's why take a look at that assert node module was really great from the get go because it's

39
00:03:09,790 --> 00:03:14,200
pretty clear of oh yeah there's this function we use it there's only like twelve functions that's all

40
00:03:14,200 --> 00:03:15,590
we really need to know.

41
00:03:15,970 --> 00:03:22,940
So Chai if you're feeling a little bit overwhelmed this totally fine OK so we're now going to make use

42
00:03:22,940 --> 00:03:28,670
of Chai to actually verify that the dropdown does not have that is active class to use Chai.

43
00:03:28,700 --> 00:03:35,420
We first have to go back over to our test each email file over here right inside of this script tag

44
00:03:35,420 --> 00:03:40,430
with a class of Moka dash in it after the mocha dot check leaks.

45
00:03:40,460 --> 00:03:44,700
We're going to add in a concert expect equals Chai not expect.

46
00:03:44,960 --> 00:03:48,200
So that's how we're going to get at easy access to that function.

47
00:03:48,290 --> 00:03:50,600
We don't technically have to write this line of code.

48
00:03:50,660 --> 00:03:57,000
It just saves us from having to write Chai dot expect everywhere inside of our test file it's going

49
00:03:57,000 --> 00:03:58,680
to save the Test each documents.

50
00:03:58,680 --> 00:04:04,980
I'll go back over to the autocomplete test and then inside of here in order to make sure that the class

51
00:04:04,980 --> 00:04:17,610
name doesn't contain is active we'll do expect dropdown dot class name not not to include is Dash active

52
00:04:20,960 --> 00:04:23,900
they might be kind of curious what is with all these little dot things.

53
00:04:23,890 --> 00:04:28,410
So we have to throw inside of your will in theory it's all about making your life as developer easier

54
00:04:29,220 --> 00:04:35,370
by adding in not to include Chai is going to do a very specific series of checks.

55
00:04:35,430 --> 00:04:39,210
It's going to make sure that class name is something that can include value.

56
00:04:39,210 --> 00:04:42,350
So in other words it's a string or an array or something similar.

57
00:04:42,660 --> 00:04:48,330
It's then going to automatically pass that thing and see if it includes the string is Dash active and

58
00:04:48,330 --> 00:04:50,840
then because we added on it dot not right there.

59
00:04:50,940 --> 00:04:56,710
That's going to make sure that is active is technically not contained inside of class name.

60
00:04:56,730 --> 00:05:00,960
So again the theory here is that this makes your life easier but it really doesn't get easier until

61
00:05:00,960 --> 00:05:04,390
you start to memorize those things.

62
00:05:04,430 --> 00:05:04,640
All right.

63
00:05:04,670 --> 00:05:05,380
Let's save this.

64
00:05:05,380 --> 00:05:08,120
We're gonna go back over to our test suite and see how we're doing.

65
00:05:08,220 --> 00:05:09,230
So can come back over here.

66
00:05:09,260 --> 00:05:15,930
I will refresh and now I can see shows and autocomplete is passing let's try to get that test to fail

67
00:05:15,960 --> 00:05:20,820
because remember as usual it's usually good practice to see the test fail at least once to make sure

68
00:05:20,820 --> 00:05:23,630
that's actually working and doing what you expect.

69
00:05:23,670 --> 00:05:27,640
So I going to find the expected statement right here and I'm going to remove the nuts.

70
00:05:27,900 --> 00:05:32,390
So now I have class name closing print dot to dot include.

71
00:05:32,460 --> 00:05:36,570
Now we are trying to make sure that the dropdown starts off open.

72
00:05:36,660 --> 00:05:38,400
This test should fail.

73
00:05:38,520 --> 00:05:40,860
So if I say this go back over there we go.

74
00:05:40,860 --> 00:05:42,180
Now it's failed.

75
00:05:42,250 --> 00:05:50,010
That means that the test is working as we expect to come back over at on the dot not save it.

76
00:05:50,010 --> 00:05:50,460
And that's it.

77
00:05:50,460 --> 00:05:53,890
We should be good to go OK.

78
00:05:53,920 --> 00:05:56,060
So I know that this expected stuff right here.

79
00:05:56,080 --> 00:06:01,510
Yes it's kind of nasty and I don't really expect you to look at this and be like Oh yeah I until I understand

80
00:06:01,510 --> 00:06:02,050
what's going on.

81
00:06:02,080 --> 00:06:06,430
Unfortunately it's something where you just have to work through his documentation over time and get

82
00:06:06,430 --> 00:06:09,280
a better idea of the different matches that are available.

83
00:06:09,280 --> 00:06:13,480
One other thing I want to mention is that if you're watching this video and saying to me like Steven

84
00:06:13,480 --> 00:06:14,930
why are we using Chai at all.

85
00:06:15,040 --> 00:06:16,200
This library is bad.

86
00:06:16,240 --> 00:06:18,280
And there's some new library that's better.

87
00:06:18,280 --> 00:06:21,880
Remember at the end of the day all this stuff is exact.

88
00:06:22,000 --> 00:06:23,220
It's just all the same.

89
00:06:23,230 --> 00:06:27,460
There are other testing libraries out there that we could use besides Chai that might be slightly easier

90
00:06:27,460 --> 00:06:28,250
to understand.

91
00:06:28,330 --> 00:06:30,730
But at the end of the day it's doing the exact same stuff.

92
00:06:31,240 --> 00:06:35,890
So if you learn one you learn them all might as well start with Chai because it's extremely popular

93
00:06:36,160 --> 00:06:39,410
very well used in industry.

94
00:06:39,420 --> 00:06:39,660
All right.

95
00:06:39,690 --> 00:06:41,160
So that's my little motivation speech.

96
00:06:41,160 --> 00:06:43,920
Let's take a quick pause right here when we come back the next video we're gonna start to write out

97
00:06:43,950 --> 00:06:45,900
a couple more tests around our autocomplete.
