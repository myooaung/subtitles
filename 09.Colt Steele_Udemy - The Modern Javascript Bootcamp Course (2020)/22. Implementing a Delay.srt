1
00:00:01,360 --> 00:00:04,150
Now that we understand what the bug is we can't start to fix it.

2
00:00:04,510 --> 00:00:10,450
So around fixing this issue with just I'm right here returning to soon I have some good news and bad

3
00:00:10,450 --> 00:00:11,130
news.

4
00:00:11,260 --> 00:00:16,120
The bad news is that there is nothing built into J.S. dam right now that will tell it to automatically

5
00:00:16,120 --> 00:00:19,780
wait for all the different JavaScript files to be loaded and executed.

6
00:00:19,780 --> 00:00:21,150
That's the bad news.

7
00:00:21,190 --> 00:00:26,780
The good news is that we can write out some code to do that ourselves pretty darn easily.

8
00:00:26,820 --> 00:00:31,020
We're gonna First write out a little bit of test code into our sample web project and I want to show

9
00:00:31,020 --> 00:00:35,820
you how we can inside of a browser detect when all of our different JavaScript files have been loaded

10
00:00:35,850 --> 00:00:37,280
and executed.

11
00:00:37,320 --> 00:00:39,650
So let me show you how we're going to do this.

12
00:00:39,720 --> 00:00:45,600
I'm going to first open up my index dot J.S. file inside of here right underneath our very selector

13
00:00:45,600 --> 00:00:47,970
for the form right underneath that entire block.

14
00:00:47,970 --> 00:00:52,620
I'm going to say window dot stuff loaded equals true

15
00:00:55,890 --> 00:01:01,520
and I'm going to say this file and then going to go to my index dot each team l file inside the head

16
00:01:01,580 --> 00:01:04,070
element I'm going to add in a little script tag

17
00:01:07,140 --> 00:01:14,200
and inside that script I'll do a console dot log of window dot stuff loaded so now you can see that

18
00:01:14,200 --> 00:01:19,510
I'm setting up one variable inside of index dot JSF and I'm trying to console log it inside of index

19
00:01:19,510 --> 00:01:19,660
Dot.

20
00:01:19,690 --> 00:01:20,710
Each team out.

21
00:01:21,070 --> 00:01:22,180
Now I got a quick question for you.

22
00:01:22,180 --> 00:01:27,370
If we were to save both these files right now and load it up inside the browser what would we expect

23
00:01:27,370 --> 00:01:27,640
to see.

24
00:01:27,640 --> 00:01:29,030
Console locked.

25
00:01:29,050 --> 00:01:30,970
The answer is undefined.

26
00:01:30,980 --> 00:01:35,800
The reason is that the way in which our browser executes stuff is it's going to first take a look at

27
00:01:35,890 --> 00:01:41,110
everything inside this HMO file and it's going to essentially load and execute all these different tags

28
00:01:41,440 --> 00:01:42,590
from top to bottom.

29
00:01:42,700 --> 00:01:46,930
So the first thing that's going to be executed on the javascript side will be this script tag right

30
00:01:46,930 --> 00:01:48,040
here.

31
00:01:48,040 --> 00:01:51,310
So at that point in time we have not yet defined this property.

32
00:01:51,310 --> 00:01:57,730
So we will see a console log of undefined then later on the browser will see the script tag right here

33
00:01:57,850 --> 00:02:01,110
and we'll make an additional network request to get that file.

34
00:02:01,140 --> 00:02:06,490
We will then execute everything inside the file including where we set up that property so in other

35
00:02:06,490 --> 00:02:10,710
words right now when we refresh the browser I would expect to see a console log of undefined.

36
00:02:10,810 --> 00:02:18,240
Let's test that really quickly so refresh and sure enough I see undefined so let's take a look at how

37
00:02:18,240 --> 00:02:23,640
we can update the script tag right here and essentially say Hey don't run some little snippet of code

38
00:02:23,670 --> 00:02:28,870
until all of our different JavaScript files have been loaded and executed to do so.

39
00:02:28,880 --> 00:02:35,430
Inside that script tag I'm going to add in window that document and really my mistake we can really

40
00:02:35,430 --> 00:02:36,530
just do document right here.

41
00:02:36,540 --> 00:02:39,260
Document dot ad event listener.

42
00:02:39,260 --> 00:02:44,090
And we're going to listen for an event of DRM content loaded now.

43
00:02:44,110 --> 00:02:46,440
Really important here as I'm sure you can imagine.

44
00:02:46,450 --> 00:02:51,410
Make sure you have capital D O M C and a capital L.

45
00:02:51,550 --> 00:02:54,860
If you miss the capitalization This is not going to work as expected.

46
00:02:55,790 --> 00:03:01,240
I'm not going to move my console log inside their we have now set up an event listener that's going

47
00:03:01,240 --> 00:03:05,860
to watch for all the different things that we're referencing inside of our Dom to be loaded.

48
00:03:05,860 --> 00:03:10,930
So in other words we're gonna wait for all the different scripts inside this H2 email structure to be

49
00:03:10,930 --> 00:03:12,100
loaded and executed.

50
00:03:12,100 --> 00:03:16,360
And once they are then the browser is going to call that callback function.

51
00:03:16,360 --> 00:03:22,510
So if I save this now and go back to my browser new fresh NLC true right there which means that we did

52
00:03:22,510 --> 00:03:30,100
successfully wait for the javascript file to be loaded before running that function so in general in

53
00:03:30,100 --> 00:03:30,640
the browser.

54
00:03:30,640 --> 00:03:32,750
That's how we can wait for stuff to be loaded.

55
00:03:32,770 --> 00:03:35,200
How does this carry back over to j system.

56
00:03:35,230 --> 00:03:37,570
However which is what we really care about.

57
00:03:37,570 --> 00:03:43,360
Well remember when we make use of J.S. Dom we have a almost perfect replication of the browser available

58
00:03:43,360 --> 00:03:48,160
to us inside of node so we show you how we can use this kind of technique to make sure that we're not

59
00:03:48,160 --> 00:03:52,400
going to execute our tests until after all the appropriate files have been loaded.

60
00:03:52,570 --> 00:03:58,580
Really quickly I'm going to delete that script tag right there and save the file.

61
00:03:58,670 --> 00:04:03,050
I'll do the same thing back inside of index dot James I can remove that window about stuff loaded as

62
00:04:03,050 --> 00:04:06,980
well and save it ok.

63
00:04:06,990 --> 00:04:12,180
So now to actually implement this solution inside of our code base I'm gonna find the render dot J S

64
00:04:12,180 --> 00:04:14,070
file.

65
00:04:14,200 --> 00:04:16,530
So here's where we load up that file.

66
00:04:16,600 --> 00:04:23,140
Now remember this Dom object right here is like a direct access to our entire documents so we can reach

67
00:04:23,140 --> 00:04:24,000
inside there.

68
00:04:24,040 --> 00:04:30,160
We could take a look at the DOM dot window dot document property and add an event listener to it of

69
00:04:30,160 --> 00:04:35,050
Dom content loaded and then once we have access to that and we've got that event listener that's going

70
00:04:35,080 --> 00:04:39,370
wait for or watch for all the different scripts to be loaded then we can eventually figure out some

71
00:04:39,370 --> 00:04:42,610
way to delay our tests until after that event occurs.

72
00:04:43,060 --> 00:04:44,190
So let me show you what I'm getting at.

73
00:04:44,190 --> 00:04:47,580
We're gonna say Dom dot window that document.

74
00:04:47,620 --> 00:04:48,840
So that's how we reference the document.

75
00:04:48,840 --> 00:04:51,400
We've seen that once already inside of our tests.

76
00:04:51,400 --> 00:04:59,520
We're gonna add that same kind of event listener to it of dumb content loaded we'll put in our callback

77
00:04:59,520 --> 00:05:08,230
function and then for right now inside of here I'll do a console log of all done loading.

78
00:05:08,330 --> 00:05:11,680
We're just gonna make sure this thing works first.

79
00:05:11,750 --> 00:05:14,840
Let's save this and we'll go and run our tests again.

80
00:05:14,840 --> 00:05:17,900
So right now our tests are still not going to work quite as expected.

81
00:05:17,900 --> 00:05:20,600
I'm just going to expect to see this console log at some point time.

82
00:05:20,600 --> 00:05:25,160
All I want to do right now is proof that this event right here does also get triggered when we're using

83
00:05:25,220 --> 00:05:27,520
j ust on.

84
00:05:27,640 --> 00:05:27,910
All right.

85
00:05:27,910 --> 00:05:30,570
So back inside of sample what project will run to me.

86
00:05:30,640 --> 00:05:31,350
And there we go.

87
00:05:31,360 --> 00:05:32,980
All done loading.

88
00:05:32,980 --> 00:05:34,060
Why do we see it twice.

89
00:05:34,060 --> 00:05:39,380
Well it's because we are trying to render our index each null file two times once for each test.

90
00:05:39,460 --> 00:05:44,440
Also very critically notice how those two console logs occur after our tests have been executed.

91
00:05:44,440 --> 00:05:49,420
And so that really confirms what we were thinking of earlier in that we were trying to check the contents

92
00:05:49,420 --> 00:05:53,550
of that H1 element before our javascript had even been executed.

93
00:05:53,560 --> 00:05:59,030
So this is definitely proof that that's why our test is not working as expected.

94
00:05:59,070 --> 00:05:59,310
All right.

95
00:05:59,310 --> 00:06:04,770
So now we've got some signal of when everything is ready to get test started executing it's now need

96
00:06:04,770 --> 00:06:09,960
to figure out how to somehow delay this function right here from returning until after this event has

97
00:06:09,960 --> 00:06:18,170
been triggered or that we can wrap this statement right here inside of our own promise so we can wrap

98
00:06:18,170 --> 00:06:23,540
it inside of a promise and we can say Let's not resolve that promise manually until after this event

99
00:06:23,570 --> 00:06:24,140
gets triggered.

100
00:06:25,140 --> 00:06:33,040
So to do so I'm going to create a new promise remember how we create our own promise we call new promise.

101
00:06:33,140 --> 00:06:35,600
We pass in a callback function.

102
00:06:35,600 --> 00:06:38,250
So this function is going to be invoked instantly.

103
00:06:38,300 --> 00:06:43,280
It gets to arguments resolve and reject if everything inside the promise goes well.

104
00:06:43,310 --> 00:06:44,250
Then we call resolve.

105
00:06:44,720 --> 00:06:46,100
Otherwise anything goes wrong.

106
00:06:46,160 --> 00:06:50,770
We call reject so we're going to move that event listener.

107
00:06:50,840 --> 00:06:53,590
I'm going to cut it and paste it directly in

108
00:06:57,050 --> 00:07:00,720
and then instead the console log will instead call resolve

109
00:07:05,120 --> 00:07:09,340
and the last thing we need to do here because we are now going to essentially wait for this premise

110
00:07:09,340 --> 00:07:10,360
to be resolved.

111
00:07:10,360 --> 00:07:13,020
This promise is not going to or is when we call resolve.

112
00:07:13,030 --> 00:07:17,530
We need to pass in some argument right here which is what is going to return from the entire overall

113
00:07:17,530 --> 00:07:19,480
promise when the thing gets resolved.

114
00:07:19,480 --> 00:07:24,430
So chances are we want to make that Dom variable exposed or accessible to the outside world.

115
00:07:24,490 --> 00:07:27,980
So I'm going to resolve the promise with Dom.

116
00:07:28,180 --> 00:07:33,910
Now finally instead of returning the DOM down here we'll return the promise that we just created.

117
00:07:33,910 --> 00:07:36,940
Like so.

118
00:07:37,050 --> 00:07:37,460
All right.

119
00:07:37,470 --> 00:07:38,220
And that should be at

120
00:07:42,080 --> 00:07:42,410
yet.

121
00:07:42,420 --> 00:07:44,220
So let's save this.

122
00:07:44,220 --> 00:07:46,000
I'm going to go back over.

123
00:07:46,000 --> 00:07:51,230
I'm going to rerun TNT and now we can see the contents of each one says looks good.

124
00:07:51,360 --> 00:07:52,140
Perfect.

125
00:07:52,150 --> 00:07:56,040
So that means that our test is now going to be working as expected.

126
00:07:56,040 --> 00:07:59,050
All right well I'd say this is definitely a good improvement.

127
00:07:59,070 --> 00:08:01,350
Well we self to fix up and finish that test.

128
00:08:01,350 --> 00:08:04,620
We're just writing because right now we just have that simple console log.

129
00:08:04,680 --> 00:08:08,190
So as usual quick pause right here and we'll finish that thing up in just a moment.
