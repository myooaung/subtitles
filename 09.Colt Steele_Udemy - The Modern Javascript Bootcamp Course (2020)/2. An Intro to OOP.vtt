WEBVTT
1
00:00:00.210 --> 00:00:00.620
All right.

2
00:00:00.660 --> 00:00:06.210
So now that we've seen a bit about prototypes we are ready to move on to talking about basic object

3
00:00:06.210 --> 00:00:08.300
oriented concepts in javascript.

4
00:00:08.370 --> 00:00:12.620
So we have a lot to talk about things like factory functions constructor functions.

5
00:00:12.660 --> 00:00:19.680
The New Class keywords constructors in a class the new keyword there is super inheritance.

6
00:00:19.680 --> 00:00:26.130
There's a lot of stuff but it all has to do with this one central idea which is organizing our code

7
00:00:26.790 --> 00:00:33.430
designing and structuring our applications by breaking things up into distinct patterns of objects.

8
00:00:33.450 --> 00:00:38.560
When I say patterns of objects can also think of recipes for objects.

9
00:00:38.610 --> 00:00:40.330
So I have an example here.

10
00:00:40.380 --> 00:00:42.360
This is a class that we'll be creating later on.

11
00:00:42.960 --> 00:00:44.260
It's a little bit long.

12
00:00:44.280 --> 00:00:46.140
It models a color.

13
00:00:46.290 --> 00:00:51.170
Now that seems kind of stupid but with colors we have so many different systems.

14
00:00:51.180 --> 00:00:56.400
We have RG bee colors where you can have a color like I don't know this right here.

15
00:00:56.400 --> 00:00:58.680
We also have hexadecimal colors.

16
00:00:58.710 --> 00:01:02.400
I don't I don't know what the hexadecimal version of this color is.

17
00:01:02.400 --> 00:01:09.900
I could just make something up F F three one that is clearly not it V.S. code is giving me a preview

18
00:01:10.440 --> 00:01:12.610
but that is another format for colors.

19
00:01:12.630 --> 00:01:16.470
We also have a GSL colors and HDL is.

20
00:01:16.680 --> 00:01:18.330
Is that always tricky.

21
00:01:18.330 --> 00:01:23.240
We have a number from zero to 360 and then a percentage and another percentage.

22
00:01:23.520 --> 00:01:30.240
And this gives me another format for colors not to mention we also have RGA where we have an alpha channel

23
00:01:30.240 --> 00:01:35.550
for opacity for how transparent a color is from 0 to 1.

24
00:01:35.550 --> 00:01:41.550
Now a lot of the times when we're making colors or working with colors in the DOM we frequently may

25
00:01:41.550 --> 00:01:43.650
not need to translate between two.

26
00:01:43.650 --> 00:01:49.920
Sometimes we need to but there are times where it would be easier if we had a color as HSN.

27
00:01:49.920 --> 00:01:55.980
For example if I want to find the opposite color of this color right here it's pretty easy because of

28
00:01:55.980 --> 00:01:57.110
this huge channel.

29
00:01:57.120 --> 00:02:02.040
So I do want to go into too much detail but we can take this hue and all you need to do is add one 80

30
00:02:02.040 --> 00:02:04.550
to it to figure out the opposite.

31
00:02:04.590 --> 00:02:11.000
This is the saturation and the lightness but all of the hue data is here versus RG colors in hex colors.

32
00:02:11.010 --> 00:02:13.700
It's spread out across all of those different values.

33
00:02:13.710 --> 00:02:17.660
So it's much much more complicated to calculate an opposite color.

34
00:02:17.690 --> 00:02:25.350
So I've made a class essentially a recipe for colors you pass in a name like carat or Emerald and then

35
00:02:25.440 --> 00:02:31.460
RG bee values and we can easily translate between different colors.

36
00:02:31.500 --> 00:02:38.280
So I have a color called nav color now of color has a couple of different properties and it has some

37
00:02:38.280 --> 00:02:39.290
different methods.

38
00:02:39.340 --> 00:02:48.590
If you look at these methods things like opposite are G.B. RGA so I could call nav colored dots RGA

39
00:02:49.080 --> 00:02:56.730
or LSU our GP and I get the RG B representation but I could instead change that to hex and I now have

40
00:02:56.730 --> 00:02:57.870
a hex color.

41
00:02:58.260 --> 00:03:02.540
But what's more fun is that I can use it to find the opposite color.

42
00:03:02.540 --> 00:03:09.830
I've added an opposite method so if I select that first H1 I'm selecting all of them I'm going to do

43
00:03:09.830 --> 00:03:17.270
it sort of in a hacky way take the zero with one dot style dot background color and I set it equal to

44
00:03:17.450 --> 00:03:22.810
NAV color dots and I'll just do an RTP color.

45
00:03:22.850 --> 00:03:23.100
All right.

46
00:03:23.120 --> 00:03:29.510
So it gives me this orange color if I wanted to make this one the same color but slightly lighter.

47
00:03:29.750 --> 00:03:36.680
I could easily do it first by selecting the correct age one and then calling the RGA method in passing

48
00:03:36.680 --> 00:03:40.370
in maybe zero point eight for the opacity.

49
00:03:40.370 --> 00:03:44.300
Now I have a slightly lighter version or I could keep going lighter.

50
00:03:44.330 --> 00:03:52.160
I could do zero point five or I could go with the opposite color opposite which is another method I

51
00:03:52.160 --> 00:03:58.830
added which gives me an opposite hue across the color wheel so orange to pull it.

52
00:03:59.330 --> 00:04:02.950
And it's all calculated using these color values.

53
00:04:03.020 --> 00:04:08.360
I also could go full saturation which is another method I added I can't remember.

54
00:04:08.360 --> 00:04:08.670
OK.

55
00:04:08.720 --> 00:04:14.000
It's called full saturation which will take the root orange color called Karat I think and make it as

56
00:04:14.000 --> 00:04:17.440
saturated as possible as you can see there.

57
00:04:17.480 --> 00:04:19.120
So there's many things we could do.

58
00:04:19.130 --> 00:04:26.060
Point is that this color object for this carat orange color has different values that it's storing different

59
00:04:26.060 --> 00:04:32.240
numbers and it has different methods and they are grouped together in a repeatable reusable object.

60
00:04:32.240 --> 00:04:36.110
I made a second color here using the exact same pattern.

61
00:04:36.170 --> 00:04:42.140
So this color which I'm calling Emerald has the same methods but we get different results.

62
00:04:42.140 --> 00:04:49.680
If I use that color the variable name is logo color I'll clear this rerun this code.

63
00:04:49.820 --> 00:04:54.630
But I instead use logo color the name of that variable.

64
00:04:55.280 --> 00:05:05.770
I now have that green and I could do the second H1 in a slightly lighter version zero point seven and

65
00:05:05.770 --> 00:05:06.890
it's lighter.

66
00:05:06.910 --> 00:05:08.700
I could also do the opposite.

67
00:05:08.710 --> 00:05:17.260
As we saw and we get this purplish magenta ish color the opposite on the color wheel so the same pattern

68
00:05:17.320 --> 00:05:24.250
the same recipe for a color the same methods the same properties but they have different values.

69
00:05:24.340 --> 00:05:30.010
We get different results frequently so I could easily just have a bunch of functions and no objects

70
00:05:30.010 --> 00:05:30.840
whatsoever.

71
00:05:30.940 --> 00:05:34.540
I could pass things around which we've actually seen before.

72
00:05:34.780 --> 00:05:41.230
Back a couple sections or actually a while ago when we were talking about this card deck example I think

73
00:05:41.230 --> 00:05:45.810
this was in a section called The Secret Life of Objects as part of an exercise.

74
00:05:45.820 --> 00:05:51.810
I had to create a function that returned an array representing a deck of cards.

75
00:05:51.880 --> 00:05:58.000
So an array that had a bunch of objects where each one had a suit and a value so suit would be hearts

76
00:05:58.360 --> 00:06:00.510
and value would be.

77
00:06:00.670 --> 00:06:01.990
I don't know five of hearts.

78
00:06:01.990 --> 00:06:04.840
And then we'd have 52 of those objects in this array.

79
00:06:05.470 --> 00:06:09.010
So we made a function to return then and it works fine.

80
00:06:09.010 --> 00:06:14.290
I call it by calling initialized deck I'll run this code over here.

81
00:06:14.350 --> 00:06:15.430
Refresh the page.

82
00:06:15.430 --> 00:06:21.040
I can call initialized deck and I get a deck of cards back but I have to save it to a variable so I'll

83
00:06:21.040 --> 00:06:22.380
call this.

84
00:06:22.780 --> 00:06:28.780
Or maybe deck 1 so I have that deck one if I want to shuffle it.

85
00:06:29.230 --> 00:06:31.020
We made a function called shuffle.

86
00:06:31.020 --> 00:06:32.700
Right now it's all in order.

87
00:06:32.700 --> 00:06:38.260
Four of spades Four of clubs four of hearts that I can turn it into a shuffle deck by calling these

88
00:06:38.260 --> 00:06:39.390
shuffle function.

89
00:06:40.270 --> 00:06:50.170
So shuffle I have to pass in deck one and I get this shuffled deck I can draw a card by calling the

90
00:06:50.170 --> 00:06:53.490
draw card function but I have to pass the deck in.

91
00:06:53.650 --> 00:06:54.670
So this is fine.

92
00:06:54.670 --> 00:07:00.550
This is what we started with back in that section but I made the point that it would be nice if we just

93
00:07:00.550 --> 00:07:06.430
had an easy way of making a new deck and it automatically included the methods we wanted and the properties

94
00:07:06.430 --> 00:07:07.160
we wanted.

95
00:07:07.330 --> 00:07:09.100
And we saw a way of doing that.

96
00:07:09.160 --> 00:07:11.210
It looked like this right here.

97
00:07:11.440 --> 00:07:13.270
I'll run it and show you.

98
00:07:13.270 --> 00:07:17.460
We have a method called Make deck and I save that to a variable.

99
00:07:17.500 --> 00:07:20.860
I'll call this deck one equals make deck.

100
00:07:21.100 --> 00:07:25.360
If we look at deck one it now contains a whole bunch of methods.

101
00:07:25.360 --> 00:07:32.230
Draw card draw multiple initialized deck shuffle it has a deck here itself it's empty right now.

102
00:07:32.260 --> 00:07:36.370
But if I called deck one dot initialized deck.

103
00:07:36.430 --> 00:07:38.260
Now we look at deck one.

104
00:07:38.260 --> 00:07:44.430
It's been updated all the values are in that deck array I can easily shuffle it.

105
00:07:44.440 --> 00:07:46.300
I don't have to pass anything around.

106
00:07:46.450 --> 00:07:55.400
I can call deck one dot draw a card and all my code is organized for all the values the information

107
00:07:55.400 --> 00:08:00.560
and the functions are organized in this one deck object and I can repeat it.

108
00:08:00.560 --> 00:08:03.590
I could have a second deck if I was playing a different game.

109
00:08:03.590 --> 00:08:10.410
I would just call make deck and save it to another variable cost deck too.

110
00:08:10.910 --> 00:08:13.300
And this is the basic pattern that we're going for.

111
00:08:13.430 --> 00:08:17.570
But we'll see some shortcomings with the approach that we learned originally.

112
00:08:17.570 --> 00:08:24.680
But this idea of having a repeatable recipe for other objects to be created based off of is central

113
00:08:24.680 --> 00:08:27.030
to everything we'll see in this section.

114
00:08:27.350 --> 00:08:29.990
And we've seen this before in a bunch of different contexts.

115
00:08:30.050 --> 00:08:37.430
When we learned how to make X a chars which are X example HDP requests we ran this code new exam L H

116
00:08:37.430 --> 00:08:45.740
TTP request save that to a variable like req request that made us an object with a bunch of different

117
00:08:45.740 --> 00:08:50.480
properties and methods already baked in this line of code right here.

118
00:08:50.480 --> 00:08:53.640
We haven't talked about this new keyword but we'll get there.

119
00:08:53.750 --> 00:08:57.080
But the key takeaway here is that we end up with this pattern.

120
00:08:57.200 --> 00:09:00.680
Every time I make a new request I end up with an object.

121
00:09:00.710 --> 00:09:04.640
It may eventually have different values instead of just normal everywhere.

122
00:09:04.640 --> 00:09:06.450
But it's the same pattern.

123
00:09:06.470 --> 00:09:08.850
They're cut from the same cookie cutter.

124
00:09:09.080 --> 00:09:10.430
Same thing with Dom stuff.

125
00:09:10.430 --> 00:09:18.490
When we select an H1 document that query selector just the first H1 that H1.

126
00:09:18.530 --> 00:09:23.200
If I do a console dot Diaw forget about that.

127
00:09:23.330 --> 00:09:25.550
Let's take a look at that line there.

128
00:09:25.640 --> 00:09:29.480
It's an object and it has the same properties we've come to expect.

129
00:09:29.600 --> 00:09:34.880
And that's because it is cut from the same cookie cutter that all other heading elements are it's called

130
00:09:34.880 --> 00:09:37.050
the HMO heading element.

131
00:09:37.160 --> 00:09:41.130
It is a recipe to make an object like this.

132
00:09:41.180 --> 00:09:43.300
So I think I'm going on and on about this.

133
00:09:43.610 --> 00:09:49.610
If you're already familiar with Opie this idea of creating these classes or these object templates that

134
00:09:49.610 --> 00:09:55.670
contain a definition of the properties and the methods for a given instance of that recipe or class

135
00:09:55.940 --> 00:10:02.000
this will all seem very basic and repetitive but if you're new to this it can be a little bit tricky

136
00:10:02.000 --> 00:10:05.000
to wrap your head around up front so we're gonna take it slow.

137
00:10:05.000 --> 00:10:11.180
I'm going to start with one approach called a factory function and I'll explain how it works and what

138
00:10:11.180 --> 00:10:12.610
is not so great about it.

139
00:10:12.650 --> 00:10:13.960
That's coming up next.
