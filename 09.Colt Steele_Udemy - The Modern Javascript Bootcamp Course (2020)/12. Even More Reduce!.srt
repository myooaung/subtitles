1
00:00:00,390 --> 00:00:04,780
In our final video on reduce yes we have almost made it to the end here.

2
00:00:04,860 --> 00:00:10,800
We're going to see a completely different way of using it where we can tally up results from an array

3
00:00:11,100 --> 00:00:15,160
we can group different values in an array using an object.

4
00:00:15,240 --> 00:00:16,760
So here's a simple example.

5
00:00:16,860 --> 00:00:21,080
I have an array of votes which I'm storing as y and n.

6
00:00:21,090 --> 00:00:23,980
It could also just be true and false it could be yay or nay.

7
00:00:24,060 --> 00:00:28,620
We could have multiple votes we could have yes or no and abstain.

8
00:00:28,620 --> 00:00:36,120
We could have ratings but what we're going to do is use produce to produce an object where we have Y

9
00:00:36,450 --> 00:00:41,820
and we count the number of Y's like twelve and then the number of no's like eight.

10
00:00:41,830 --> 00:00:46,090
No I don't think that's accurate for this exact array but this is what we're going for.

11
00:00:46,620 --> 00:00:48,600
So what we're going do is a little different.

12
00:00:48,790 --> 00:00:50,360
Our accumulator.

13
00:00:50,370 --> 00:00:56,820
The thing that will actually return and add into or update is going to be an object.

14
00:00:57,030 --> 00:01:03,750
So we're going to have votes that reduce we'll have some function just call it func for now and our

15
00:01:03,750 --> 00:01:06,710
initial value will be an empty object.

16
00:01:07,080 --> 00:01:14,430
So I'll call this concept results maybe equals vote start reduce our function which we have yet to fill

17
00:01:14,430 --> 00:01:17,380
out in the initial value is an empty object.

18
00:01:17,400 --> 00:01:24,990
Remember we specify an initial value like 100 accumulator the first parameter to our reduced callback

19
00:01:25,260 --> 00:01:26,590
starts at 100.

20
00:01:26,640 --> 00:01:28,370
In this case we're using an object.

21
00:01:28,650 --> 00:01:33,910
So a little bit different but the same idea the initial value will be this empty object.

22
00:01:33,930 --> 00:01:34,230
Okay.

23
00:01:34,410 --> 00:01:38,950
So I'll draw it out down here then we're going to write our callback.

24
00:01:39,070 --> 00:01:40,410
I'll use an arrow function.

25
00:01:40,410 --> 00:01:42,600
The first piece is the accumulator.

26
00:01:42,600 --> 00:01:48,420
This is the the piece of you can think of it as like a memory from last time from the last iteration

27
00:01:48,420 --> 00:01:49,320
of reduce.

28
00:01:49,410 --> 00:01:52,960
I'm gonna call this one tally because that's what it represents.

29
00:01:52,980 --> 00:01:56,450
It's not really a sum or a total total would be OK.

30
00:01:56,460 --> 00:02:04,080
But tally is it makes sense here and then we'll have current item or current vote or let's just call

31
00:02:04,080 --> 00:02:06,650
it Val.

32
00:02:06,920 --> 00:02:07,810
All right.

33
00:02:07,830 --> 00:02:17,250
Then an arrow function and what we want to do here is add to this object using whatever key we have.

34
00:02:17,280 --> 00:02:22,940
So let's say it's why we want to check is there a Y in this object.

35
00:02:23,070 --> 00:02:28,140
Because the very first time we encountered y there won't be a key for why it's just empty.

36
00:02:28,170 --> 00:02:35,460
So if we encounter y we'll want to say Y is one then the next time through.

37
00:02:35,880 --> 00:02:37,430
We're not going to set y to 1.

38
00:02:37,500 --> 00:02:39,820
We're going to check is there a y already.

39
00:02:39,840 --> 00:02:40,700
Yes.

40
00:02:40,710 --> 00:02:42,280
That was the first time through.

41
00:02:42,390 --> 00:02:46,830
So add one to it then we'll get to n and we'll check.

42
00:02:46,830 --> 00:02:49,170
Is there an N in this object.

43
00:02:49,170 --> 00:02:50,010
No there's not.

44
00:02:50,010 --> 00:02:51,360
So set it equal to 1.

45
00:02:51,420 --> 00:02:57,540
So we'll have Y 2 and 1 and then next time we get to an N will incremented.

46
00:02:57,540 --> 00:02:59,860
So our logic will look something like this.

47
00:03:00,060 --> 00:03:09,060
If tally of Val meaning if we already have that key in the object we're going to want to incremented.

48
00:03:09,090 --> 00:03:13,650
So tally of Val plus plus.

49
00:03:13,820 --> 00:03:15,350
That means there's already something in there.

50
00:03:15,620 --> 00:03:21,940
So not this case the very first time through this code does not run because there is no value in tally.

51
00:03:21,950 --> 00:03:24,650
There is no yes there is no no.

52
00:03:24,650 --> 00:03:27,440
So otherwise that's the if part.

53
00:03:27,440 --> 00:03:33,850
I'll do this some more verbose way first so we'll do tally Val plus equals.

54
00:03:33,900 --> 00:03:41,060
If it's already in there if it's not in there we'll write tally of Val equals 1.

55
00:03:41,520 --> 00:03:46,540
We'll set it to 1 and then at the end we'll return tally.

56
00:03:46,600 --> 00:03:50,950
Okay so tell me starts the very first time through it's an empty object.

57
00:03:51,300 --> 00:03:52,860
Our Val is why.

58
00:03:52,860 --> 00:03:55,900
The first element is their tally of Val.

59
00:03:55,900 --> 00:03:57,050
No it doesn't exist.

60
00:03:57,060 --> 00:03:59,650
This does not run here but this does.

61
00:03:59,700 --> 00:04:03,220
So we set tally of Val to be 1 and we return that.

62
00:04:03,270 --> 00:04:08,280
So the next time through we have y 1.

63
00:04:08,300 --> 00:04:10,550
So now tally is equal to this object.

64
00:04:10,550 --> 00:04:12,060
That's what we're returning.

65
00:04:12,140 --> 00:04:17,030
Just like we did when we some things together or when we found the match with the men same pattern.

66
00:04:17,120 --> 00:04:20,150
We're just changing tally in a different way.

67
00:04:20,270 --> 00:04:24,200
We're not accumulating in the same format but we are persisting this.

68
00:04:24,200 --> 00:04:30,080
We're returning it and the next time through the return value is used as tally so we get to another

69
00:04:30,080 --> 00:04:31,910
y y one.

70
00:04:31,910 --> 00:04:37,160
This is our object if tally of Val while there is y in this object.

71
00:04:37,160 --> 00:04:41,340
So that means we're going to increment it to be too y.

72
00:04:41,660 --> 00:04:46,180
And you can see where I'm going with this will eventually hit and there is not an end in here.

73
00:04:46,250 --> 00:04:53,270
So this part here does not run and we instead set tally of n equal to 1 and then we keep going.

74
00:04:53,270 --> 00:04:54,920
So let's see what we end up with.

75
00:04:55,430 --> 00:04:56,390
We'll run this.

76
00:04:56,570 --> 00:04:59,060
What do we get when we call results.

77
00:04:59,060 --> 00:05:02,030
It looks like seven yeses and six no's.

78
00:05:02,080 --> 00:05:08,900
Uh I guess we can count that or count the wise one two three four five six seven and the nose.

79
00:05:08,960 --> 00:05:11,830
One two three four five six.

80
00:05:11,840 --> 00:05:12,860
Great.

81
00:05:12,860 --> 00:05:18,310
So if we had instead added some other types of votes in here like mm mm mm mm.

82
00:05:18,320 --> 00:05:18,950
I don't know.

83
00:05:19,030 --> 00:05:19,810
And a.

84
00:05:19,850 --> 00:05:20,900
Or how about absent

85
00:05:23,630 --> 00:05:25,070
let's just leave it like that.

86
00:05:25,190 --> 00:05:27,760
We'll run it again results.

87
00:05:27,830 --> 00:05:33,270
Now we have yes is seven absent one and knows six.

88
00:05:33,380 --> 00:05:35,210
Now there is a shorter way of writing this.

89
00:05:35,240 --> 00:05:41,810
The logic itself that we have here and I'll show that to you right now instead of doing this if and

90
00:05:41,810 --> 00:05:48,500
else where we're checking if tally of Val exists and if it does we'll add one if it doesn't we'll initialize

91
00:05:48,500 --> 00:05:56,540
it to one we can rewrite this slightly differently we'll say tally of Val equals and bear with me for

92
00:05:56,540 --> 00:06:06,240
a second tally of Val or zero plus one OK so how does this one line work.

93
00:06:06,240 --> 00:06:08,730
Well it all hinges upon this right here.

94
00:06:08,880 --> 00:06:12,180
Tally of all or zero.

95
00:06:12,240 --> 00:06:16,910
So if our object is empty at the beginning there is no Y there's no end.

96
00:06:16,950 --> 00:06:18,450
We don't have any keys.

97
00:06:18,510 --> 00:06:25,740
The very first time we encounter Y for example we're going to set tally of Y to equal the current tally

98
00:06:25,740 --> 00:06:27,710
of Y which doesn't exist.

99
00:06:27,720 --> 00:06:32,540
So that gives us undefined or zero which results in zero.

100
00:06:32,580 --> 00:06:36,340
So we're doing 0 plus 1 which is going to set it to 1.

101
00:06:36,690 --> 00:06:41,370
But the next time through if we encounter y again the very next element is Y.

102
00:06:41,370 --> 00:06:46,710
We'll set tally of Y equal to tally of Y which right now is 1.

103
00:06:46,740 --> 00:06:51,600
So then this becomes 1 1 or 0 gives us 1.

104
00:06:51,600 --> 00:06:55,430
So then we end up with one plus 1 which is 2.

105
00:06:55,470 --> 00:06:59,330
So it's kind of a sneaky way of doing what we're doing up here.

106
00:06:59,520 --> 00:07:01,370
If something exists add one to it.

107
00:07:01,380 --> 00:07:04,550
If it doesn't exist set it to 1.

108
00:07:04,650 --> 00:07:08,250
We're just doing it in one line taking advantage of this Boolean logic.

109
00:07:08,310 --> 00:07:13,350
So I need to reset that to tally of Val run this code again results.

110
00:07:13,560 --> 00:07:14,630
It still works.

111
00:07:14,630 --> 00:07:16,730
So just a shorter way of writing it.

112
00:07:16,750 --> 00:07:18,570
Okay so this is equivalent to this.

113
00:07:18,600 --> 00:07:20,220
We get the same result.

114
00:07:20,220 --> 00:07:22,590
One more example of using reduce.

115
00:07:22,590 --> 00:07:26,810
I have the same books array we've been working with I added in a new book.

116
00:07:26,940 --> 00:07:27,740
Where are you.

117
00:07:27,840 --> 00:07:28,920
A truly horrible book.

118
00:07:28,950 --> 00:07:34,570
I wanted to give one a bad rating but I didn't want to call out a real book and give it a bad rating.

119
00:07:34,650 --> 00:07:40,110
So this is a truly horrible book written by save your time save your time.

120
00:07:40,110 --> 00:07:40,740
I get it.

121
00:07:40,740 --> 00:07:41,790
Save your time.

122
00:07:41,790 --> 00:07:42,750
Very funny.

123
00:07:42,750 --> 00:07:48,660
So what I want to do is group all of these books in a new object and I want to group them by rating

124
00:07:49,080 --> 00:07:52,740
so all books that have a two star review will go.

125
00:07:52,770 --> 00:07:56,770
It will be an array then we'll have all books that have a three star.

126
00:07:56,790 --> 00:08:02,620
So three point something not just exactly three but three point six seven and three point.

127
00:08:02,700 --> 00:08:03,120
Where are you.

128
00:08:03,120 --> 00:08:04,260
Three point eighty three.

129
00:08:04,320 --> 00:08:07,850
And then all the four star books will go into the key of four.

130
00:08:08,340 --> 00:08:15,300
So I'm going to use reduce for this book Stop reduce and we're gonna add our accumulator function here.

131
00:08:15,450 --> 00:08:18,860
Just put gibberish and we'll set the initial value to be an object as well.

132
00:08:18,870 --> 00:08:24,510
Just like we did up here we initialize it right there or we give it an initial value.

133
00:08:25,420 --> 00:08:25,970
Okay.

134
00:08:26,100 --> 00:08:29,520
So our function is going to look like this.

135
00:08:29,610 --> 00:08:31,980
We'll have our accumulator parameter first.

136
00:08:31,980 --> 00:08:36,150
I'll call this grouped books.

137
00:08:36,630 --> 00:08:43,150
And then after that we'll have each book error function.

138
00:08:43,240 --> 00:08:48,850
Then we need to get the rating from the book so book dot rating.

139
00:08:48,850 --> 00:08:50,710
But I want to eliminate the decimal.

140
00:08:50,710 --> 00:08:54,220
I don't want to use this as the key because that's far too unique.

141
00:08:54,220 --> 00:08:56,060
I only want three.

142
00:08:56,440 --> 00:09:02,880
So I'm going to do a math dot floor and that floor will just chop the decimal point off right.

143
00:09:02,890 --> 00:09:08,760
Math top four of five point four gives us five five point nine still gives us five.

144
00:09:08,950 --> 00:09:12,500
So it's not rounding it's just chopping off the decimal.

145
00:09:13,000 --> 00:09:17,080
So I'm going to save that for a variable we'll call this key.

146
00:09:17,080 --> 00:09:19,270
Key equals that rating.

147
00:09:19,270 --> 00:09:23,050
So this will give us to three or four off the current data set at least.

148
00:09:23,230 --> 00:09:32,950
And then we want to check does grouped books of key facts that exist if not we're going to make it an

149
00:09:33,040 --> 00:09:33,700
empty array.

150
00:09:34,570 --> 00:09:44,700
So I'd probably just do this if not grouped books of that key meaning there is currently no book with

151
00:09:44,700 --> 00:09:48,480
rating of three rating of four or whatever rating we're working with.

152
00:09:48,570 --> 00:09:57,060
Then I'll set grouped books of that key to be an empty array because remember our goal here is to create

153
00:09:57,060 --> 00:10:01,140
an object where we have three which is an array of books.

154
00:10:01,140 --> 00:10:05,610
So each one of these would be a book with a rating of three point something.

155
00:10:05,610 --> 00:10:13,290
So if key is for if there is no grouped books of four it's empty then we're going to say grouped books

156
00:10:13,290 --> 00:10:23,560
of four is equal to an empty array but then we also want to push in so that we'll be grouped books of

157
00:10:23,560 --> 00:10:31,330
key dot push the entire book so let me make this a bit bigger.

158
00:10:31,550 --> 00:10:35,900
And then finally we'll return our group's books.

159
00:10:36,050 --> 00:10:37,700
OK so this one's a bit longer.

160
00:10:37,730 --> 00:10:39,490
Could definitely shorten it up again.

161
00:10:39,490 --> 00:10:41,820
But just to summarize how it works.

162
00:10:41,920 --> 00:10:43,600
We have an empty object at the beginning.

163
00:10:43,600 --> 00:10:47,100
We encounter our first book which is all the way up here.

164
00:10:47,110 --> 00:10:48,980
It has a rating of four point two five.

165
00:10:49,060 --> 00:10:50,650
So we get that rating.

166
00:10:50,650 --> 00:10:52,160
We chop the decimal off now.

167
00:10:52,210 --> 00:10:53,450
Key is for.

168
00:10:53,740 --> 00:10:54,630
We're going to check.

169
00:10:54,760 --> 00:10:57,740
Is there a key A4 in grouped books.

170
00:10:57,770 --> 00:10:58,270
There's not.

171
00:10:58,270 --> 00:10:59,380
It's an empty object.

172
00:10:59,860 --> 00:11:02,740
So we're going to set it equal to an empty array.

173
00:11:03,190 --> 00:11:06,240
So we end up with four empty array.

174
00:11:06,340 --> 00:11:10,390
Then we say grouped books of four dot push the entire book.

175
00:11:10,390 --> 00:11:16,480
So that's when we add the whole book into that array and then the process starts again this time for

176
00:11:16,480 --> 00:11:24,550
three and let's say we get to another four star book like this one we're going to get the key which

177
00:11:24,550 --> 00:11:26,500
will be for chop the decimal off.

178
00:11:26,500 --> 00:11:32,420
We have for this part is false because grouped books of that key does exist now.

179
00:11:32,470 --> 00:11:33,900
So we only push.

180
00:11:33,940 --> 00:11:35,010
We don't do this.

181
00:11:35,010 --> 00:11:36,190
We don't set it to an empty array.

182
00:11:36,190 --> 00:11:38,860
We only push in a new book.

183
00:11:38,860 --> 00:11:42,850
So now we have two books in their let's make sure it works.

184
00:11:42,870 --> 00:11:48,300
Save it to a variable count the grouped by ratings.

185
00:11:48,300 --> 00:11:49,960
It's kind of a long variable.

186
00:11:50,280 --> 00:11:54,730
Let's see grouped by ratings.

187
00:11:54,820 --> 00:11:59,670
We have our two star book just as one book a truly horrible book.

188
00:11:59,710 --> 00:12:07,150
We have two three star books and then we have our four Starbucks so this is a little bit more complicated.

189
00:12:07,170 --> 00:12:08,140
Definitely.

190
00:12:08,170 --> 00:12:13,650
That's why I saved these examples for the very end after we got maybe a little comfortable with produce.

191
00:12:13,710 --> 00:12:16,610
If you're at all struggling with this I don't blame you.

192
00:12:16,620 --> 00:12:22,620
This is a weird one and why I kind of said I was scared to teach it and why I always worry a bit about

193
00:12:22,620 --> 00:12:23,400
teaching reduce.

194
00:12:23,410 --> 00:12:26,400
It's hard to teach because there's so many uses for it.

195
00:12:26,400 --> 00:12:31,170
It's not as straightforward as the other built in array callback methods but don't feel bad if you are

196
00:12:31,170 --> 00:12:33,720
struggling with it you'll get more practice.

197
00:12:33,750 --> 00:12:36,110
It will come more naturally with time hopefully.

198
00:12:36,510 --> 00:12:37,930
It always trips beginners out.

199
00:12:38,480 --> 00:12:38,730
OK.

200
00:12:38,750 --> 00:12:44,190
So that's produce lots of different ways of using it but it boils down to pun intended.

201
00:12:44,190 --> 00:12:50,040
This diagram here where we take multiple elements from an array and we turn them into one result somehow

202
00:12:50,340 --> 00:12:57,540
whether it's a some a product or a min a max or we're tallying them into an object or we're grouping

203
00:12:57,540 --> 00:13:04,320
them by rating or by genre or whatever we end up with one result at the end multiple values into one

204
00:13:04,320 --> 00:13:05,920
value that's reduce.

205
00:13:06,000 --> 00:13:07,920
We made it and we're done with this section.

206
00:13:08,010 --> 00:13:08,850
Congratulations.

207
00:13:08,850 --> 00:13:10,440
This is a very meaty section.
