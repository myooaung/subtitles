WEBVTT
1
00:00:01.000 --> 00:00:05.050
We've got some logic right here that passes all the information that is included inside of our post

2
00:00:05.050 --> 00:00:05.980
request.

3
00:00:06.040 --> 00:00:10.190
We're not going to start to refactor this function out into a separate helper function.

4
00:00:10.210 --> 00:00:14.560
After that we're then going to replace this helper function altogether with an outside library.

5
00:00:14.560 --> 00:00:16.220
So let's get to it.

6
00:00:16.240 --> 00:00:17.230
All right.

7
00:00:17.230 --> 00:00:20.530
So right now we have this kind of setup inside of application.

8
00:00:20.530 --> 00:00:26.260
We are making a request that is a POST request to a route of forward slash right now.

9
00:00:26.260 --> 00:00:31.770
That request is being handed off directly to a root handler that contains some form person logic.

10
00:00:31.810 --> 00:00:36.280
And then in theory right after that we would want to do some account creation stuff but.

11
00:00:36.670 --> 00:00:41.830
Well even though this works right now as we start to think about the long term of developing our application

12
00:00:42.100 --> 00:00:47.050
I can immediately see see a little problem start to appear at some point time.

13
00:00:47.070 --> 00:00:53.080
We're going to want to allow a administrator of our application to create a new product to create a

14
00:00:53.080 --> 00:00:57.040
product that's probably going to involve some kind of form submission.

15
00:00:57.490 --> 00:01:02.280
And that would probably take the form of a post request to some root like Slash products.

16
00:01:02.320 --> 00:01:07.520
So this right here would be all about handling creating a new product inside of our app.

17
00:01:07.530 --> 00:01:10.560
This would also have some kind of form being submitted.

18
00:01:10.560 --> 00:01:16.020
So inside this other root HANDLER We would also have to have some logic included to pass the a form

19
00:01:16.110 --> 00:01:21.540
or an incoming POST request or all the information on the body and then run some logic around product

20
00:01:21.540 --> 00:01:22.800
creation.

21
00:01:22.890 --> 00:01:25.380
So right away I can see a problem start to appear.

22
00:01:25.500 --> 00:01:29.560
I have some duplicate logic between these two root handlers.

23
00:01:29.790 --> 00:01:36.300
So to solve this we can extract that logic right there into as some separate function that will run

24
00:01:36.360 --> 00:01:39.010
before either of these root handlers.

25
00:01:39.030 --> 00:01:44.860
So it looks something like this this means that any time we get a post request to our root roots or

26
00:01:44.860 --> 00:01:51.130
a post request to slash products we would want to run our form Parson logic and essentially receive

27
00:01:51.160 --> 00:01:56.860
all the information at the bottom of the request before we hand it along to our final root handler that

28
00:01:56.860 --> 00:02:02.080
contains the actual application specific logic that we care about such as account creation or product

29
00:02:02.080 --> 00:02:06.240
creation so this so separate helper function right here.

30
00:02:06.280 --> 00:02:12.040
That's going to process an incoming request is what we refer to inside of express as a middleware function

31
00:02:13.610 --> 00:02:19.670
inside of express middleware functions are functions that do some amount of pre processing or computation

32
00:02:19.940 --> 00:02:23.300
on a request object or a response object.

33
00:02:23.300 --> 00:02:30.380
These middleware functions are ran or executed before we ever call a final root handler is middleware

34
00:02:30.380 --> 00:02:37.250
functions are our primary means of code reuse whenever we are making use of Express so the idea here

35
00:02:37.310 --> 00:02:42.250
is that we want to extract all of this form person logic into a middleware function.

36
00:02:42.260 --> 00:02:47.490
We're then going to make sure that we run that middleware function before we call our actual account

37
00:02:47.510 --> 00:02:50.480
handler which is this callback right here.

38
00:02:50.480 --> 00:02:56.870
So in other words take this logic right here out run it in some other location before this executes

39
00:02:57.820 --> 00:03:01.090
so let's figure out exactly how we do that get started.

40
00:03:01.090 --> 00:03:03.270
I'm going to create a new little helper function.

41
00:03:03.290 --> 00:03:07.150
This is going to be our middleware function right above app dot post.

42
00:03:07.400 --> 00:03:14.950
I'm going to call it body parser because well it essentially passes the body of a request and then going

43
00:03:14.950 --> 00:03:23.830
to take all of our form person logic I'm going to cut and paste it inside the middleware function is

44
00:03:23.830 --> 00:03:28.840
always going to be called with three different arguments the first two are going to be somewhat familiar.

45
00:03:29.170 --> 00:03:31.990
The first one is req and rez.

46
00:03:32.230 --> 00:03:35.110
Again these are the request in response objects.

47
00:03:35.110 --> 00:03:40.180
So inside of our middleware function we can run some amount of code to inspect and modify these two

48
00:03:40.180 --> 00:03:46.210
arguments if we Inspector modify them and in any way those modifications are going to show up inside

49
00:03:46.210 --> 00:03:53.530
of our later request handler down here that are received the same exact req and raise objects.

50
00:03:53.570 --> 00:03:57.580
The third argument to our middleware function is something called next.

51
00:03:57.680 --> 00:04:02.810
You might recall earlier on INSIDE THE COURSE WE DISCUSSED callback functions and promises and async

52
00:04:02.810 --> 00:04:04.760
await syntax and so on.

53
00:04:04.760 --> 00:04:10.400
It turns out that Express was really created before a lot of that promised stuff and async await syntax

54
00:04:10.400 --> 00:04:16.600
was popular Express was created back when callback functions were really the only thing we had.

55
00:04:16.660 --> 00:04:21.640
So this next function right here is essentially a callback function that is being given to you and I

56
00:04:21.940 --> 00:04:27.930
from the Express framework itself you and I are definitely used to giving callback functions off to

57
00:04:27.990 --> 00:04:32.390
other libraries but this is a scenario when one is being given to us.

58
00:04:32.460 --> 00:04:36.960
So inside of our function we're going to do whatever processing logic we want to do.

59
00:04:37.110 --> 00:04:39.730
And that logic might take some amount of time to complete.

60
00:04:39.960 --> 00:04:44.880
Once you and I are complete in running all that logic and we are really confident that we've done everything

61
00:04:44.880 --> 00:04:45.640
we need to do.

62
00:04:45.780 --> 00:04:50.610
We're then going to call that next function which is essentially the sign that our Middleware is all

63
00:04:50.610 --> 00:04:56.060
done processing and then express can to continue on and run whatever function needs to be ran.

64
00:04:56.070 --> 00:05:00.000
In this case our root handler down here okay.

65
00:05:00.040 --> 00:05:00.920
Now inside of here.

66
00:05:00.970 --> 00:05:06.700
Let's run our actual logic to somehow process the incoming request and add some property to it or something

67
00:05:06.700 --> 00:05:07.200
like that.

68
00:05:07.210 --> 00:05:10.460
And when we are all done we will call that next function.

69
00:05:10.560 --> 00:05:15.640
So inside of here I'm going to first wrap our wrecked up on statement with a little check.

70
00:05:15.730 --> 00:05:23.640
I'm gonna say if wreck dot method is host like so that's just gonna make sure that we only tried to

71
00:05:23.850 --> 00:05:29.490
pass the body of request if we are actually dealing with a post request just to show you that that property

72
00:05:29.490 --> 00:05:32.350
actually exists back down here inside of my post.

73
00:05:32.370 --> 00:05:37.560
I'll do a console dot log of rec just to inspect that object really quickly and verify that we have

74
00:05:37.560 --> 00:05:39.440
access to that method property.

75
00:05:39.810 --> 00:05:42.950
So I can save this and run it really quickly.

76
00:05:43.020 --> 00:05:48.460
I'll go back to look 3000 entrance and dummy information and submit the form and then go back over to

77
00:05:48.460 --> 00:05:49.870
my terminal.

78
00:05:49.870 --> 00:05:55.060
So here's our console log of that Rec object and you can see that it is absolutely chock full of different

79
00:05:55.060 --> 00:05:56.250
information.

80
00:05:56.260 --> 00:06:00.850
There are a ton of ton of different properties on it so we can scroll through here just a little bit

81
00:06:00.910 --> 00:06:05.820
and see all the different properties we have access to so hopefully inside of here we eventually find

82
00:06:05.850 --> 00:06:09.830
a method property so we can scroll scroll scroll and you'll see eventually.

83
00:06:09.840 --> 00:06:15.090
Yep right there there is a method property inside of that Rec object right now is equal to the string

84
00:06:15.090 --> 00:06:15.630
of post

85
00:06:18.760 --> 00:06:24.460
so back inside of our middleware we're gonna say if method is post let's do that parsing logic otherwise

86
00:06:24.550 --> 00:06:27.400
if it is not post it's all put on an else case down here.

87
00:06:27.490 --> 00:06:31.310
That means that we don't care about doing any processing here whatsoever.

88
00:06:31.390 --> 00:06:36.370
So I will instead call the next function which remember is the callback that is given to us whenever

89
00:06:36.370 --> 00:06:41.370
we call that it is our sign that we are all done with our processing.

90
00:06:41.380 --> 00:06:47.080
So now if it is a post request we'll do all of our arson logic and then down here rather than doing

91
00:06:47.110 --> 00:06:52.780
a console log we're going to instead take all that form data and I'm going to assign it to the body

92
00:06:52.780 --> 00:06:54.700
property of the request.

93
00:06:54.700 --> 00:06:57.400
So I'll say wrecked body is form data

94
00:07:00.650 --> 00:07:07.280
so now if we go back down to our root handler down here that Rec object should have a dot body property

95
00:07:07.280 --> 00:07:09.920
assigned to it and it should be the exact form data

96
00:07:13.280 --> 00:07:19.630
alas we have to do after we update that wrecked body property is called the next function.

97
00:07:19.630 --> 00:07:24.190
And again that is a sign that we are all done here and express can continue on doing whatever else it

98
00:07:24.190 --> 00:07:27.310
wants to do okay.

99
00:07:27.330 --> 00:07:32.100
So now to make use of the middleware that we just put together we're going to take that middleware function

100
00:07:32.760 --> 00:07:38.460
and put it right in front of our root handler for our callback function on our right handler here.

101
00:07:38.460 --> 00:07:44.540
So right before our callback function I'll say body parser like so.

102
00:07:44.640 --> 00:07:50.070
So now Express is going to interpret this as meaning whenever we get a post request to forward slash

103
00:07:50.760 --> 00:07:52.490
run this function.

104
00:07:52.950 --> 00:07:58.500
And then once that function calls its next callback take the wreck and raise objects and pass them through

105
00:07:58.500 --> 00:08:04.560
to the next function so you can think of middleware as essentially being middle or functions that are

106
00:08:04.560 --> 00:08:07.410
in the middle of a request handler.

107
00:08:07.410 --> 00:08:11.640
We can't have many different Middleware is wired up to one single request handler.

108
00:08:11.640 --> 00:08:16.800
So if we had another middleware called like I don't know how about validate something we could add it

109
00:08:16.800 --> 00:08:18.240
in right there like so.

110
00:08:18.240 --> 00:08:21.890
But in this case we only have one middleware right now okay.

111
00:08:21.920 --> 00:08:23.180
So let's now save this.

112
00:08:23.240 --> 00:08:28.940
We're going to expect to see the same console log we saw before of that form data object so I'll save

113
00:08:28.940 --> 00:08:29.870
that.

114
00:08:30.020 --> 00:08:32.370
I'm going to go back over to look those three thousand.

115
00:08:32.380 --> 00:08:39.130
There was some information in it sign up go back or in my terminal go down to the bottom and sure enough

116
00:08:39.180 --> 00:08:40.570
there is our information.

117
00:08:40.670 --> 00:08:46.480
So same thing we had before but now we have this very convenient middleware function that we can reuse

118
00:08:46.510 --> 00:08:48.230
many times inside of our project.

119
00:08:48.250 --> 00:08:53.950
Anytime that we expect to receive a post request that has some data that needs to be passed this looks

120
00:08:53.950 --> 00:08:54.660
pretty good.

121
00:08:54.760 --> 00:08:58.740
But like I said having to write this thing out manually not the best thing in the world because there

122
00:08:58.750 --> 00:09:02.910
actually are some really big holes with our implementation right now.

123
00:09:03.100 --> 00:09:04.740
So we're going to take a pause right here.

124
00:09:04.750 --> 00:09:09.220
Come back the next video we're going to replace this body parts or middleware we just put together with

125
00:09:09.220 --> 00:09:12.970
an outside library that's going to work much better than what we have right here.
