1
00:00:00,300 --> 00:00:05,130
Next up we have another method on the document to select elements but slightly different.

2
00:00:05,130 --> 00:00:10,590
It's called Get elements by tag name and once again it does what it sounds like rather than selecting

3
00:00:10,590 --> 00:00:11,570
by an idea.

4
00:00:11,670 --> 00:00:13,900
We select by a type of element.

5
00:00:14,220 --> 00:00:19,490
I want all the images or the paragraphs or the H ones on a page so to use it.

6
00:00:19,530 --> 00:00:20,760
It's exactly the same.

7
00:00:20,760 --> 00:00:24,660
We do document dot and then the name of the method.

8
00:00:24,960 --> 00:00:29,930
So instead of get element by I.D. we want get elements with an S by tag name.

9
00:00:30,090 --> 00:00:36,060
And that is significant because we will get more than one element or potentially we could.

10
00:00:36,060 --> 00:00:40,190
And that means that the elements returned are going to be stored in a list.

11
00:00:40,290 --> 00:00:44,640
We're not going to get a single element back like we got from get element by I.D..

12
00:00:45,450 --> 00:00:45,770
Okay.

13
00:00:45,780 --> 00:00:46,440
So let's try it.

14
00:00:46,650 --> 00:00:47,580
What do we have in our page.

15
00:00:47,580 --> 00:00:49,240
We've got a couple of paragraphs.

16
00:00:49,320 --> 00:00:50,900
We have a couple of inputs.

17
00:00:50,940 --> 00:00:51,870
Why don't we start with that.

18
00:00:51,990 --> 00:00:54,030
Let's get all the inputs.

19
00:00:54,030 --> 00:00:58,060
So I pass in the name of the element as a string.

20
00:00:58,470 --> 00:00:59,160
And there we go.

21
00:00:59,160 --> 00:01:01,560
I'm getting three inputs returned.

22
00:01:01,560 --> 00:01:03,000
It looks like an array.

23
00:01:03,030 --> 00:01:05,780
It is not in array but we'll come back to that.

24
00:01:06,120 --> 00:01:11,130
And if I look at each one of these elements once again they are dumb objects.

25
00:01:11,190 --> 00:01:16,920
We have an H came out input element this time instead of a paragraph element or an image element.

26
00:01:17,160 --> 00:01:23,670
If we try the same thing with a different type like a p tag we now get the different paragraphs.

27
00:01:23,670 --> 00:01:24,870
We have on our page.

28
00:01:24,990 --> 00:01:25,530
So there we go.

29
00:01:25,530 --> 00:01:27,030
We have two paragraphs.

30
00:01:27,120 --> 00:01:33,720
The first one and the second one if I try it instead with what else do we have a bunch of allies on

31
00:01:33,720 --> 00:01:34,440
the page.

32
00:01:34,530 --> 00:01:35,990
I get three allies.

33
00:01:36,030 --> 00:01:37,650
Each one is an object.

34
00:01:37,770 --> 00:01:41,950
If I try it on an element that is not on the page like an H three.

35
00:01:41,970 --> 00:01:43,950
There are no H threes.

36
00:01:43,950 --> 00:01:46,100
We get an empty collection back.

37
00:01:46,320 --> 00:01:52,560
And if I instead try it on something where there's only one on the page like H1 we have one H one on

38
00:01:52,560 --> 00:01:54,960
the page right here.

39
00:01:54,960 --> 00:01:56,450
I still get a collection.

40
00:01:56,460 --> 00:01:58,040
It just has one element in it.

41
00:01:58,680 --> 00:02:04,980
So we don't get we don't ever get one element back on its own like we did with get element by I.D. it

42
00:02:04,980 --> 00:02:11,400
returned the actual object not a collection but because we're getting multiple potentially.

43
00:02:11,400 --> 00:02:13,640
We always get a collection back.

44
00:02:13,650 --> 00:02:15,230
Now let's talk about this collection.

45
00:02:15,240 --> 00:02:17,490
What is this aged him out collection.

46
00:02:17,490 --> 00:02:20,850
It is an array like object that is not an array.

47
00:02:21,150 --> 00:02:27,600
So think of the arguments object that we saw a couple of sections ago instead of a function every function

48
00:02:27,600 --> 00:02:34,230
has this arguments array like object that is not actually in array it's a similar idea here.

49
00:02:34,320 --> 00:02:36,020
This is a collection of objects.

50
00:02:36,030 --> 00:02:38,130
It's called an H Kimmel collection.

51
00:02:38,130 --> 00:02:43,530
It is something that we it's a type in the DOM and the type of collection you get back frequently it

52
00:02:43,530 --> 00:02:47,440
is not in array but we can do some array ish things.

53
00:02:47,610 --> 00:02:51,030
So let's save one of these to a variable Let's select the inputs.

54
00:02:51,180 --> 00:02:54,490
So I'll just go back to this line.

55
00:02:54,600 --> 00:02:57,140
Save it to a variable cost inputs.

56
00:02:57,420 --> 00:02:59,380
And now I have my inputs variable.

57
00:03:00,060 --> 00:03:06,110
Let's clear this and let's try accessing the first input that works.

58
00:03:06,170 --> 00:03:10,520
We can use array indices in brackets same syntax.

59
00:03:10,550 --> 00:03:12,020
It looks like an array.

60
00:03:12,290 --> 00:03:14,540
I can get the second element.

61
00:03:14,810 --> 00:03:19,870
The third element and there is no element at index of three.

62
00:03:20,390 --> 00:03:29,930
I can do inputs dot length and I do get a length but if I want to try using array methods like pop no

63
00:03:29,930 --> 00:03:30,620
luck.

64
00:03:30,710 --> 00:03:38,540
Same thing with push with includes with index of we really don't have much at our disposal.

65
00:03:38,540 --> 00:03:44,300
In fact if we look at inputs and you just type dot in the dev tools here's what we've got we've got

66
00:03:44,300 --> 00:03:45,400
length.

67
00:03:45,410 --> 00:03:53,260
We've got a couple methods these actually come from objects and nothing else so what do we have here

68
00:03:53,270 --> 00:03:58,990
it's just a bare bones collection that allows us to access elements using indices.

69
00:03:59,270 --> 00:04:01,910
And fortunately we can also iterate.

70
00:04:01,910 --> 00:04:02,420
And that's it.

71
00:04:02,660 --> 00:04:05,750
It's not supposed to be some useful data structure.

72
00:04:05,780 --> 00:04:09,020
It's a very lightweight structure that stores elements.

73
00:04:09,230 --> 00:04:11,470
So if you wanted to you could turn it into an array.

74
00:04:11,570 --> 00:04:14,150
You could also just iterate over it like this.

75
00:04:14,270 --> 00:04:19,430
Let's do four let inputs of inputs.

76
00:04:19,940 --> 00:04:26,380
Why don't we just cancel that log input for now.

77
00:04:26,390 --> 00:04:27,290
There you go.

78
00:04:27,290 --> 00:04:29,300
We're printing out each input.

79
00:04:29,300 --> 00:04:32,710
Remember this is not what they look like they're actual objects.

80
00:04:32,720 --> 00:04:35,600
I hate that the browser does this chrome dev tools.

81
00:04:35,600 --> 00:04:37,730
I don't understand who why.

82
00:04:37,730 --> 00:04:39,550
It just doesn't seem that useful to me.

83
00:04:39,620 --> 00:04:44,540
Most of the time we want to look at the object but maybe that's just because I'm a teacher and I need

84
00:04:44,540 --> 00:04:46,340
to show the objects who knows.

85
00:04:46,340 --> 00:04:46,570
All right.

86
00:04:46,600 --> 00:04:48,160
So we can iterate over them.

87
00:04:48,410 --> 00:04:53,400
And since it's an interim tool that means we can also use our friend spread.

88
00:04:53,420 --> 00:04:59,240
So if I wanted to get these three inputs the inputs HMO collection it's not in right.

89
00:04:59,410 --> 00:05:01,100
So I want to turn it into an array.

90
00:05:01,250 --> 00:05:03,440
I can spread it into an array.

91
00:05:04,670 --> 00:05:08,600
If you skip the videos on spread probably go back check those out.

92
00:05:08,630 --> 00:05:11,900
So now I'll just call this array equals inputs.

93
00:05:12,110 --> 00:05:16,670
If we look at array it's an actual array of those inputs.

94
00:05:16,910 --> 00:05:21,920
But honestly at the end of the day a lot of the time what we end up doing is just looping over things

95
00:05:22,010 --> 00:05:27,860
and doing some sort of or making some sort of change to each input or each element that could be adding

96
00:05:27,860 --> 00:05:28,760
a style.

97
00:05:28,820 --> 00:05:34,300
It could be reading its current value if this is a form a user click submit.

98
00:05:34,400 --> 00:05:39,980
If we were using JavaScript we could intercept the form and get the values out what a user had typed

99
00:05:39,980 --> 00:05:46,190
in and then do something with them so we could select all inputs and then loop over the inputs and look

100
00:05:46,190 --> 00:05:47,910
at input value.

101
00:05:48,170 --> 00:05:50,340
We can actually try that right now if you want.

102
00:05:50,810 --> 00:05:57,470
We'll just do a console dot log input dot value and before I do that when I put some values in here

103
00:05:57,740 --> 00:06:03,160
so bear name we'll go with Maxim must maximize.

104
00:06:03,200 --> 00:06:04,700
That's a good bear name.

105
00:06:04,700 --> 00:06:06,840
I'll put a password in there.

106
00:06:06,980 --> 00:06:10,360
Just gibberish password and take a look.

107
00:06:10,550 --> 00:06:17,660
We looped over all those inputs and I control that log input value that is a property on each input

108
00:06:17,690 --> 00:06:19,260
element has a value.

109
00:06:19,460 --> 00:06:26,390
And I get Maximus from the first one as well from the second one and the third one is actually a button

110
00:06:26,390 --> 00:06:30,160
as well and that button does not have a value.

111
00:06:30,200 --> 00:06:35,540
And if I look at inputs of two that last one it's that button type set to submit.

112
00:06:35,540 --> 00:06:37,530
It does not have a value.

113
00:06:38,030 --> 00:06:40,220
So that's just step is what it is.

114
00:06:40,310 --> 00:06:41,100
We don't get a value.

115
00:06:41,510 --> 00:06:41,810
OK.

116
00:06:41,810 --> 00:06:43,480
So let's get elements by tag name.

117
00:06:43,550 --> 00:06:45,880
Remember it returns this array like object.

118
00:06:45,890 --> 00:06:52,900
It's not an actual array but we can iterate over it each element in that array like object is an element

119
00:06:52,940 --> 00:06:56,880
it's an actual object and it has a bunch of properties we can do things with it.

120
00:06:56,990 --> 00:07:02,480
And when we call document that get elements by tag name we pass in the string representing a tag name

121
00:07:02,900 --> 00:07:06,260
you pass in an invalid tag you won't get anything.

122
00:07:06,260 --> 00:07:06,970
No error.

123
00:07:07,100 --> 00:07:09,610
It's just not going to find anything with that type of tag name.

124
00:07:10,340 --> 00:07:12,100
So we've seen get element by I.D..

125
00:07:12,200 --> 00:07:14,120
We've seen get elements by tag name.

126
00:07:14,120 --> 00:07:15,890
Next we have a another way of selecting.
