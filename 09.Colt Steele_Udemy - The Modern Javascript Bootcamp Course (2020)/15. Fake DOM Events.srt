1
00:00:00,770 --> 00:00:04,730
The next test we're going to write out is going to make sure that when we type something inside of here

2
00:00:05,240 --> 00:00:09,140
we should after doing some search have our dropdown open up.

3
00:00:09,140 --> 00:00:12,620
So this is going to be a little bit more involve test because we have to make sure that we can somehow

4
00:00:12,620 --> 00:00:17,840
programmatically type something inside that input have our autocomplete recognize that and execute a

5
00:00:17,840 --> 00:00:19,220
search.

6
00:00:19,220 --> 00:00:23,360
After that it should then be pretty straightforward because we're really just gonna write the same assertion

7
00:00:23,360 --> 00:00:27,770
we're ready put together but we're going to instead of say not we're going to say yes it should include

8
00:00:27,950 --> 00:00:29,270
is active.

9
00:00:29,270 --> 00:00:31,060
So let's figure out how to do this.

10
00:00:31,160 --> 00:00:33,990
The first thing we have to do is write out another test statement.

11
00:00:34,010 --> 00:00:36,830
So we've been working inside of it shows an autocomplete.

12
00:00:37,400 --> 00:00:39,480
Let's go down to the bottom.

13
00:00:39,500 --> 00:00:44,570
We're going to add in another statement down here and we'll give this something like after searching

14
00:00:45,840 --> 00:00:47,190
dropdown opens up

15
00:00:51,700 --> 00:00:52,560
now inside of here.

16
00:00:52,570 --> 00:00:54,040
There's something to be aware of.

17
00:00:54,670 --> 00:00:58,720
If we just start to write some assertions right here right away and like maybe write out some code that

18
00:00:58,720 --> 00:01:04,040
says type something in and then check dropdown.

19
00:01:04,220 --> 00:01:08,840
We would technically be reusing the same autocomplete that we had rendered during the previous step

20
00:01:09,590 --> 00:01:12,170
usually between every different test that we put together.

21
00:01:12,200 --> 00:01:17,150
We're going to essentially try to reset our environment and think about it for just a second.

22
00:01:17,300 --> 00:01:22,850
If we had one test that came to this auto complete and type something in like so and had the auto complete

23
00:01:22,850 --> 00:01:27,950
start opened and then the next test was something like the one we just put together right here that

24
00:01:27,950 --> 00:01:32,590
expects the dropdown to start off as closed we would have our test failed right away.

25
00:01:32,600 --> 00:01:36,420
In other words if we ran our tests in a different order from what we currently have.

26
00:01:36,590 --> 00:01:40,050
If we moved this one up to the top everything would start to break.

27
00:01:40,050 --> 00:01:44,320
If we tried to reuse the same widget between every test.

28
00:01:44,340 --> 00:01:49,230
So rather than reusing the same widgets after every test we're going to delete the widget that is being

29
00:01:49,230 --> 00:01:56,050
displayed on the screen and then recreate it from scratch for the next test to do so.

30
00:01:56,050 --> 00:02:00,620
Moka gives us a little hook function at the very top of the file.

31
00:02:00,700 --> 00:02:03,260
I'm going to call before each.

32
00:02:03,310 --> 00:02:09,430
This is referred to as a hook the DB for each function is globally defined by Moka.

33
00:02:09,460 --> 00:02:12,840
So we don't have to try to reference it especially Urs anything like that.

34
00:02:12,910 --> 00:02:16,330
We can just reference it directly inside of before each.

35
00:02:16,330 --> 00:02:21,700
We can write out some amount of code that's going to attempt to set up our testing environment for every

36
00:02:21,760 --> 00:02:23,340
single test.

37
00:02:23,440 --> 00:02:28,520
So as the name implies whatever code we write inside of here we'll be executed for every following its

38
00:02:28,540 --> 00:02:29,980
statement.

39
00:02:29,980 --> 00:02:34,320
So that makes this a perfect location to setup our auto complete widget.

40
00:02:34,420 --> 00:02:38,740
So I going to take the create auto complete call that we currently have inside this test right here.

41
00:02:38,740 --> 00:02:47,370
I'm going to cut the entire thing and I will paste it inside the before each.

42
00:02:47,450 --> 00:02:53,300
In addition right before that I'm going to reference the div with IDF of targets and I'm going to delete

43
00:02:53,330 --> 00:02:55,100
everything inside there manually.

44
00:02:55,100 --> 00:03:02,690
So I'll do a document dot query selector pound target and I'll set the inter agency mail to empty string.

45
00:03:02,690 --> 00:03:04,090
This is not strictly necessary.

46
00:03:04,100 --> 00:03:08,420
It's just going to really make sure that whatever autocomplete widget is currently in there really gets

47
00:03:08,420 --> 00:03:10,240
kicked out.

48
00:03:10,280 --> 00:03:14,480
It's now before every single test we run we're going to delete whatever's inside that div and create

49
00:03:14,480 --> 00:03:16,510
a new autocomplete widget from scratch.

50
00:03:16,520 --> 00:03:21,050
And so now it should not make a difference what order we run our tests in as we're always going to have

51
00:03:21,080 --> 00:03:25,290
a completely clean autocomplete widget every single time.

52
00:03:25,480 --> 00:03:25,730
All right.

53
00:03:25,760 --> 00:03:31,450
Now back down here I just noticed that the description for this test is not quite accurate anymore.

54
00:03:31,470 --> 00:03:38,460
I'm going to update that description to say something like dropdown starts closed.

55
00:03:38,540 --> 00:03:41,680
All right so let's now continue working on the tests we just put together.

56
00:03:42,140 --> 00:03:48,410
So inside of here the first thing we need to do is somehow trigger or otherwise make a search by typing

57
00:03:48,410 --> 00:03:51,010
in some text right there to do so.

58
00:03:51,010 --> 00:03:57,110
We're going to essentially use some traditional DOM manipulation methods to show you how to do this.

59
00:03:57,120 --> 00:04:01,860
All right out some code directly inside my console inside of my test page.

60
00:04:01,860 --> 00:04:08,040
So in order to fake some test text being written inside there we can select that element first.

61
00:04:08,040 --> 00:04:15,110
So to select it I'll do a document dot query selector of input if I hover over the results I will see

62
00:04:15,110 --> 00:04:19,350
that yep it's that input right there to put some text in to an input.

63
00:04:19,350 --> 00:04:27,330
We can forcibly set the value property of it so I'll do my document query selector dot value and I'll

64
00:04:27,330 --> 00:04:29,670
say equals whatever I want to search for.

65
00:04:29,670 --> 00:04:33,110
So like Avengers I'll see Avengers appears right away.

66
00:04:33,800 --> 00:04:38,000
Now just setting the value like so unfortunately doesn't trigger any events.

67
00:04:38,000 --> 00:04:43,510
Now remember that's how the vast majority of our javascript applications work we watch for different

68
00:04:43,540 --> 00:04:44,190
elements.

69
00:04:44,260 --> 00:04:46,930
We wait for some event to occur.

70
00:04:47,080 --> 00:04:49,540
The input element right here is no different.

71
00:04:49,600 --> 00:04:56,350
The autocomplete Widget Works by watching for in on inputs or he input event setting the value like

72
00:04:56,350 --> 00:04:59,310
we're doing right here does not trigger that event.

73
00:04:59,350 --> 00:05:05,700
So if we want to actually trigger a search we have to essentially manually bake that event.

74
00:05:05,730 --> 00:05:07,670
Let me show you how we do that.

75
00:05:07,770 --> 00:05:16,230
I want to once again get a reference to that input element and I'm going to call dispatch events so

76
00:05:16,240 --> 00:05:20,230
this is how we fake an event out as the argument to it.

77
00:05:21,690 --> 00:05:27,790
I'm going to pass in a new event and as an argument to the new event I'm going gonna pass in a string

78
00:05:27,880 --> 00:05:29,760
of the event name that I want to fake.

79
00:05:29,800 --> 00:05:34,550
Which in this case is the input event.

80
00:05:34,710 --> 00:05:39,570
It's now any javascript code we have that is watching for an input event on his input is going to be

81
00:05:39,570 --> 00:05:45,310
faked into thinking that that just occurred so let's run that and we get back true.

82
00:05:45,310 --> 00:05:49,540
Now in this case we don't really see anything change right here because well we already did a search.

83
00:05:49,660 --> 00:05:54,700
But if I refresh this page really quickly and rerun those last two lines of code.

84
00:05:54,700 --> 00:06:00,090
So I'm first going to set the value and then triggered the event or dispatch the event.

85
00:06:00,130 --> 00:06:00,730
There we go.

86
00:06:00,730 --> 00:06:02,430
I then see the result occur.

87
00:06:02,500 --> 00:06:04,030
So that's how we fake out an event.

88
00:06:04,040 --> 00:06:05,490
We first set the value inside there.

89
00:06:05,590 --> 00:06:08,730
Then we call dispatch event and pass in new events.

90
00:06:08,800 --> 00:06:13,490
Let's add that code to our test so go back over.

91
00:06:13,490 --> 00:06:22,220
I'm going to first get a reference to the input so I'll do a document dot query selector input.

92
00:06:22,500 --> 00:06:29,490
I'll set the value to Avengers or whatever else and I'll do the input dot dispatch events and I'll pass

93
00:06:29,490 --> 00:06:35,820
in New events and that type of event that I want to simulate is input okay.

94
00:06:35,850 --> 00:06:39,160
So that should be at now.

95
00:06:39,170 --> 00:06:44,900
After that in theory all we have to do is go ahead and find the dropdown and make sure now that it does

96
00:06:44,900 --> 00:06:46,170
have the class is active.

97
00:06:46,190 --> 00:06:51,560
Because remember the gold this test was to make sure that the dropdown was open to down here.

98
00:06:51,890 --> 00:06:56,930
Well actually rather than typing all that stuff out let's just copy paste make life easy so I copy that

99
00:06:57,050 --> 00:06:59,840
paste it down.

100
00:07:00,060 --> 00:07:04,260
And then finally instead of saying that it should not include is active I'm going to remove the not

101
00:07:04,260 --> 00:07:10,660
statement so it should be closing parental dot to OK.

102
00:07:10,770 --> 00:07:15,690
Now what you know right now this code is not going to work because of a really subtle little issue but

103
00:07:15,690 --> 00:07:19,110
nonetheless let's save this and run it.

104
00:07:19,110 --> 00:07:23,410
So I'll flip back over I'm going to refresh and I see.

105
00:07:23,470 --> 00:07:23,790
Yeah.

106
00:07:23,830 --> 00:07:25,910
Sure enough we failed.

107
00:07:25,920 --> 00:07:30,840
Well that's kind of unfortunate but it kind of leads us into a really interesting topic in the world

108
00:07:30,840 --> 00:07:31,740
of testing.

109
00:07:31,740 --> 00:07:35,280
So let's take a quick pause right here we'll come back the next video and figure out exactly what is

110
00:07:35,280 --> 00:07:35,790
going wrong.
