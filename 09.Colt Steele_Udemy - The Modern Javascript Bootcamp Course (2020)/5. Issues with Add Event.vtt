WEBVTT
1
00:00:01.110 --> 00:00:06.330
We just spoke about some of the awkwardness around ad change and unlike ad in particular is actually

2
00:00:06.330 --> 00:00:09.500
going to present a little bit of an issue inside of our program.

3
00:00:09.510 --> 00:00:12.140
So let me tell you why all right.

4
00:00:12.150 --> 00:00:13.120
Quick diagram.

5
00:00:13.170 --> 00:00:17.800
So this is what is going to happen whenever choke at our first starts up inside of application.

6
00:00:17.910 --> 00:00:19.640
We're going to have our app startup.

7
00:00:19.770 --> 00:00:24.900
We're going to watch some directory provided by the user choke it out is going to see all the files

8
00:00:24.900 --> 00:00:30.330
inside there and it's going to attempt to essentially register each them each time emitting that ad

9
00:00:30.330 --> 00:00:31.470
event.

10
00:00:31.470 --> 00:00:36.960
So right now for the implementation of our site the project like specifically the watch it code we're

11
00:00:36.960 --> 00:00:42.860
probably going to end up wanting to take the user's code whenever we see that ad event and run it.

12
00:00:42.900 --> 00:00:43.170
Right.

13
00:00:43.170 --> 00:00:44.490
That makes sense.

14
00:00:44.490 --> 00:00:50.040
Well here's the downside to that approach choke DA is going to startup that's going to emit that ad

15
00:00:50.130 --> 00:00:56.490
event and so immediately we're going to start to run the user's code and then like half a second later

16
00:00:56.520 --> 00:01:03.540
or a millisecond to be precise very quickly after that choke it out is going to emit that ad event again.

17
00:01:03.540 --> 00:01:08.460
And so then right after that you and I are going to once again stop the user's program and then start

18
00:01:08.460 --> 00:01:11.080
it back up because hey we don't know any better.

19
00:01:11.160 --> 00:01:16.380
We just saw that some file got added and remember the entire goal of our project is to say that anytime

20
00:01:16.410 --> 00:01:23.260
any file changes or gets deleted or gets added We're going to restart the user's code so then shortly

21
00:01:23.260 --> 00:01:25.840
after that choke it out is going to register a new file.

22
00:01:25.840 --> 00:01:28.090
So we stop and start again.

23
00:01:28.090 --> 00:01:34.630
And then that root process is going to repeat itself 50 or 100 or however many times equal to the number

24
00:01:34.630 --> 00:01:37.640
of files that we just registered.

25
00:01:37.660 --> 00:01:42.100
So in other words for everyone in the console logs we see right here we are kind of saying that we're

26
00:01:42.100 --> 00:01:47.650
going to stop the users code if we've already executed it and then start it back up again just because

27
00:01:47.890 --> 00:01:53.850
we initiated or started up our program that's clearly a little bit awkward.

28
00:01:53.930 --> 00:01:56.390
Definitely not what we want to do.

29
00:01:56.400 --> 00:01:58.500
So how are we going to get around this.

30
00:01:58.500 --> 00:02:00.570
Well here's what we really want to do.

31
00:02:00.570 --> 00:02:03.250
We want to have a system closer to this right here.

32
00:02:03.270 --> 00:02:08.700
We want to have our program to start startup have choked our start to watch some directory and then

33
00:02:08.700 --> 00:02:12.670
the instant that it adds a file rather than starting up the user's code right away.

34
00:02:12.780 --> 00:02:18.170
You'll be really nice if we could put in some little timer of sorts and say OK let's wait for like 100

35
00:02:18.180 --> 00:02:24.540
milliseconds to go by and see if any other events get emitted if any other event does get emitted then

36
00:02:24.660 --> 00:02:30.550
restart the hundred millisecond timer so every single time we see one of these events we can reset this

37
00:02:30.550 --> 00:02:37.870
timer to 100 milliseconds and then eventually if say 100 milliseconds goes by without a new ad event

38
00:02:38.290 --> 00:02:44.080
then that means OK start up complete we're probably ready to go and start up the users code.

39
00:02:44.110 --> 00:02:49.330
So this is how we're going to solve this issue if the cause of the issue or this diagram over here is

40
00:02:49.330 --> 00:02:50.820
still not clear.

41
00:02:50.830 --> 00:02:57.530
Another way we can make the issue here really clear is to go back to our code and change file added

42
00:02:57.530 --> 00:03:04.880
right here to something like starting users program is that's really what we want to do now we save

43
00:03:04.880 --> 00:03:07.800
this go back over.

44
00:03:07.920 --> 00:03:12.940
We can stop this running program with control C and then start a back backup with.

45
00:03:12.950 --> 00:03:14.440
Watch it again.

46
00:03:14.570 --> 00:03:18.740
That should make it more clear where he essentially saying every single time we see that ad event well

47
00:03:18.770 --> 00:03:19.940
a file has been added.

48
00:03:20.000 --> 00:03:22.240
And so that means we need to start up the users program.

49
00:03:22.400 --> 00:03:27.290
And if we did that we are going to be starting the users program this many times right here clearly

50
00:03:27.620 --> 00:03:29.090
way too many times.

51
00:03:29.090 --> 00:03:34.760
So that's why we need to somehow implement a timer of sorts and make sure that we only start to initiate

52
00:03:34.790 --> 00:03:42.010
or execute the users code after some amount of time passes without an ad event so this entire process

53
00:03:42.010 --> 00:03:47.260
right here of kind of having a timer and then waiting for some amount of time to pass before executing

54
00:03:47.260 --> 00:03:51.120
some code of our own is referred to as DB bouncing a function.

55
00:03:51.460 --> 00:03:56.260
You might have seen DB bouncing functions somewhere else inside this course already if you hadn't.

56
00:03:56.260 --> 00:04:00.910
I'm not going to go too much into D bouncing just yet because there's another section inside this course

57
00:04:01.180 --> 00:04:06.250
that goes into them in much greater detail and even shows you how to create a d bounce function from

58
00:04:06.250 --> 00:04:13.000
scratch so instead I'm just going to show you how to essentially solve this issue in a very direct and

59
00:04:13.000 --> 00:04:15.520
straightforward manner so quick pause right here.

60
00:04:15.520 --> 00:04:19.870
We'll come back next video make a quick change to our code to add in this sort of waiting timer.
