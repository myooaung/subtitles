WEBVTT
1
00:00:00.660 --> 00:00:03.090
In this video we're gonna start to implement those three different arrays.

2
00:00:03.090 --> 00:00:06.850
We just discussed we're gonna first take care of the grid array.

3
00:00:06.900 --> 00:00:11.730
I want to first begin by giving you just a very quick reminder on what the grid array does because there's

4
00:00:11.760 --> 00:00:14.190
a very particular way that we're going to initialize it.

5
00:00:14.190 --> 00:00:17.910
And if you don't really understand about the grid array does well a lot of stuff that we're going to

6
00:00:17.910 --> 00:00:20.230
a right here is not gonna make a lot of sense.

7
00:00:20.490 --> 00:00:27.800
So we're going to have one array called GRID and this is going to be a two dimensional array.

8
00:00:27.810 --> 00:00:36.460
It'll be a 2D array and every value inside of it is going to start off as false.

9
00:00:36.470 --> 00:00:37.970
The reason we're gonna start off is false.

10
00:00:37.970 --> 00:00:43.720
Remember the purpose of the grid array is to record whether or not we have visited each individual cell.

11
00:00:43.790 --> 00:00:48.250
So when we first initialize it that this thing is going to start off as a Judy array.

12
00:00:48.380 --> 00:00:55.290
If this is the maze that we are going to be building then we're going to have three rows and three columns.

13
00:00:55.310 --> 00:00:58.510
So here are my three rows.

14
00:00:58.700 --> 00:01:04.160
I'm gonna have three columns inside and every element is going to start off as false.

15
00:01:04.180 --> 00:01:11.880
So gonna put in an F for each one we're then going to pick a cell at random so maybe the first cell

16
00:01:11.880 --> 00:01:17.970
that we pick is this one right here we would now say that we have visited the cell because where you

17
00:01:17.970 --> 00:01:22.980
have essentially done some processing work on it because we have visited this we need to update our

18
00:01:22.980 --> 00:01:24.250
grid array.

19
00:01:24.480 --> 00:01:27.780
So going to find the element inside the grid array that corresponds to that cell.

20
00:01:27.780 --> 00:01:30.440
So in this case would be that element right there.

21
00:01:31.140 --> 00:01:37.610
So I going to take that false and I'm going to update it to be true instead we can then imagine that

22
00:01:37.610 --> 00:01:39.470
we start to go through the R algorithm.

23
00:01:39.470 --> 00:01:44.600
Remember the primary step in the algorithm is to take a look at all the different neighbors so that

24
00:01:44.600 --> 00:01:48.350
one that one and that one and then pick one at random and visited.

25
00:01:48.350 --> 00:01:54.770
So let's imagine I go off to the right like so and I'm now at this cell so I would now find the element

26
00:01:54.770 --> 00:01:57.410
inside my grid array that corresponds to that cell.

27
00:01:57.470 --> 00:02:06.520
It is this one right here so I would take that false remove it and update it to be true instead.

28
00:02:06.630 --> 00:02:07.890
So that's the purpose of the grid array.

29
00:02:07.920 --> 00:02:09.840
Let's just focus on creating this array first.

30
00:02:10.320 --> 00:02:15.120
So at the end of the day what we really want is a two dimensional array that starts off with all false

31
00:02:15.120 --> 00:02:16.500
values inside of it.

32
00:02:16.650 --> 00:02:23.210
And if right now we're going to imagine that we are building a maze that has three rows and three columns.

33
00:02:23.220 --> 00:02:27.330
So we're gonna hardcoded those three is in right now we're going to update those to be a lot more flexible

34
00:02:27.330 --> 00:02:30.040
in just a moment so to get started.

35
00:02:30.070 --> 00:02:36.270
I'm going to go back over to my code going to put a little comment header here that says maze generation

36
00:02:36.300 --> 00:02:38.780
again just to guide myself through this file.

37
00:02:38.940 --> 00:02:41.220
There's a couple of different ways we can create this grid array.

38
00:02:41.220 --> 00:02:46.290
I'm going to first show you a very basic way normal refactoring into all the more fancy style.

39
00:02:46.290 --> 00:02:52.890
So a very basic way to do this would be to define a grid array and then iterate using a double nested

40
00:02:52.890 --> 00:02:53.300
for loop.

41
00:02:53.610 --> 00:03:01.020
So I could say for let I equals zero less than three plus plus and I'll set up another for loop inside

42
00:03:01.030 --> 00:03:09.730
their SO for let j equals zero J less than three J plus plus then in the outer loop I'm going to use

43
00:03:09.730 --> 00:03:17.150
this to push in each individual row and then inside the inner loop I'm going to process each of those

44
00:03:17.150 --> 00:03:20.360
rows and add in starting values of false.

45
00:03:20.360 --> 00:03:26.380
So let's say grid at I not push false.

46
00:03:26.410 --> 00:03:35.500
Like so then go into console log this I'll save this I'll go back over I'll do a quick test so as soon

47
00:03:35.500 --> 00:03:40.030
as I reload I can see the console log right here I definitely have the correct start structure to start

48
00:03:40.030 --> 00:03:43.670
off with so I've got false walls false falsely false and so on.

49
00:03:43.830 --> 00:03:48.960
So this is definitely one way to approach this but anytime that we start using for loops like this well

50
00:03:49.080 --> 00:03:53.250
life gets a little bit challenging because now we've got all these different values and symbols floating

51
00:03:53.250 --> 00:03:58.350
around as we've seen several times throughout this course usually using a for loop like the one we have

52
00:03:58.350 --> 00:04:04.260
right here is not the best way of achieving just about anything so we're going to instead use a little

53
00:04:04.260 --> 00:04:09.120
trick to initialize the grid array at the end of the day that code we're about to use is 100 percent

54
00:04:09.120 --> 00:04:13.740
equivalent to what we currently have but it's gonna be a lot more concise so here's what we're going

55
00:04:13.740 --> 00:04:14.320
to do.

56
00:04:15.550 --> 00:04:20.200
I'm gonna say that cost grid is array of three.

57
00:04:20.240 --> 00:04:25.350
So this means create an empty array that has three possible places in it.

58
00:04:25.510 --> 00:04:30.830
And when we create an array like this we don't get some imaginary or we don't get some actual values

59
00:04:30.830 --> 00:04:32.260
initialized in there.

60
00:04:32.360 --> 00:04:35.870
So the array is told that it's going to have capacity for three elements.

61
00:04:35.870 --> 00:04:37.610
But right now there's no element inside there.

62
00:04:37.610 --> 00:04:43.040
So if we were to run a for loop right for of loop on this or a for each it would not do anything at

63
00:04:43.040 --> 00:04:43.950
all.

64
00:04:44.000 --> 00:04:49.460
So we have to actually finish initializing this rate by calling Phil and then putting some default value

65
00:04:49.460 --> 00:04:50.860
inside there.

66
00:04:50.870 --> 00:04:55.460
So in this case to initialize this thing we can throw any old value in and I'll show you why we can

67
00:04:55.460 --> 00:04:57.320
put any value in it just a moment.

68
00:04:57.320 --> 00:05:04.280
Right now it's going to put in no so let me do a console log here and you'll see what we get out of

69
00:05:04.280 --> 00:05:07.900
this so I've now got NULL NULL NULL.

70
00:05:07.930 --> 00:05:09.130
Like so.

71
00:05:09.130 --> 00:05:15.460
So we now want to replace each of those null values with another array that has false values inside

72
00:05:15.460 --> 00:05:16.410
of it.

73
00:05:16.450 --> 00:05:21.790
So to do so we're now going to map over this array and for each element inside of here we're going to

74
00:05:21.790 --> 00:05:26.770
return an array of length 3 that has values of false inside of it.

75
00:05:26.800 --> 00:05:30.610
So that's why it doesn't really matter what value we put inside of here to start.

76
00:05:30.610 --> 00:05:34.030
It doesn't matter that we throw a null because we're just going to replace it right away with a mapping

77
00:05:34.030 --> 00:05:38.290
statement so I'll come back here.

78
00:05:38.430 --> 00:05:40.890
I got a chain on a mapping statement.

79
00:05:41.150 --> 00:05:43.470
It's going to say for each element inside there.

80
00:05:43.590 --> 00:05:44.780
Throw away the value of null.

81
00:05:44.790 --> 00:05:46.010
We don't care about that.

82
00:05:46.020 --> 00:05:52.290
Instead return a brand new array that has three elements of false.

83
00:05:52.510 --> 00:05:59.310
So to do song and use a very similar statement I'll say create a new array that has length three and

84
00:05:59.310 --> 00:06:07.910
fill every value inside there with false like so it's let's save this now we'll go back over and you

85
00:06:07.910 --> 00:06:11.480
can see that we've got the exact structure that we're looking for.

86
00:06:11.720 --> 00:06:16.170
Now you might be kind of curious why do we have the map statement here as opposed to just like throwing

87
00:06:16.170 --> 00:06:22.190
in with a fill like why can't we just put in false false false like so.

88
00:06:22.230 --> 00:06:28.020
Well the reason is in this case we are creating one single array and then throwing it in at every location

89
00:06:28.260 --> 00:06:29.730
inside of grid.

90
00:06:29.730 --> 00:06:32.270
So in memory there's only one inner array.

91
00:06:32.280 --> 00:06:36.150
And if we made a change to this in array it would affect every index.

92
00:06:36.150 --> 00:06:40.840
Let me show you that really quickly because it's actually a really neat little trick to do this.

93
00:06:41.070 --> 00:06:42.400
You would not expect it to happen.

94
00:06:42.420 --> 00:06:48.210
So here's our ray those three inner arrays are the same exact arrays in memory.

95
00:06:48.250 --> 00:06:55.420
So if I do grid at zero and I push in a value of true and then I print out grid again take a look at

96
00:06:55.420 --> 00:07:00.850
that it added to apparently each of these would then add it to each edit to just the one but it's the

97
00:07:00.850 --> 00:07:02.050
same array memory.

98
00:07:02.110 --> 00:07:04.220
So modifying one modifies all.

99
00:07:04.320 --> 00:07:09.700
So that's why we can't just do a direct fill like so instead we have to do the map statement.

100
00:07:09.950 --> 00:07:15.200
And when we do the map statement that's going to run the inter function three times and each time we're

101
00:07:15.200 --> 00:07:18.940
going to generate a brand new and different array.

102
00:07:18.940 --> 00:07:19.140
All right.

103
00:07:19.150 --> 00:07:23.080
So we're going to be using this trick right here several times because at the end of the day even though

104
00:07:23.080 --> 00:07:28.240
right now it might be kind of hard to read it ends up being a lot easier in the long run to understand

105
00:07:28.270 --> 00:07:32.710
and also makes a lot easier to come back and adjust the different values to change the size of the array

106
00:07:33.250 --> 00:07:35.990
if we ever want to add more rows to our grid.

107
00:07:36.020 --> 00:07:39.930
We're going to change that value of three right there if we ever want to add more columns.

108
00:07:39.940 --> 00:07:42.460
We'll change that three right there.

109
00:07:42.460 --> 00:07:49.440
So imagine for a second that we would decide that we want to instead have a extra column on here like

110
00:07:49.440 --> 00:07:49.750
so.

111
00:07:49.770 --> 00:07:53.080
Let's say that we want to have a rectangular maze.

112
00:07:53.130 --> 00:07:56.190
So we want that to be the starting point to get something like that.

113
00:07:56.400 --> 00:07:57.720
We would come back here.

114
00:07:57.930 --> 00:08:00.600
We would change the inner arrays to length for instead.

115
00:08:00.660 --> 00:08:05.470
So now we've got or columns instead of the previous three.

116
00:08:05.610 --> 00:08:07.370
So I could save this refresh.

117
00:08:07.380 --> 00:08:13.690
Now I can see one two three four so like I said much more convenient way to create our nested Arrays.

118
00:08:13.700 --> 00:08:13.910
All right.

119
00:08:13.910 --> 00:08:14.980
So that's it for the grid.

120
00:08:15.020 --> 00:08:16.160
We're going to take a pause right here.

121
00:08:16.160 --> 00:08:20.260
Come back the next video we're going to tackle the verticals and horizontals arrays as well.

122
00:08:20.450 --> 00:08:21.020
So a quick pause.

123
00:08:21.020 --> 00:08:22.220
I'll see you in just a minute.
