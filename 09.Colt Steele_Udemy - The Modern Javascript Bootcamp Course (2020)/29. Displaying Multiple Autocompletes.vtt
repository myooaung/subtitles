WEBVTT
1
00:00:00.890 --> 00:00:03.990
Now we have a better idea of how we're going to make our code more useful.

2
00:00:03.990 --> 00:00:08.480
Well let's start writing out some code now understanding this entire flow from the get go is kind of

3
00:00:08.480 --> 00:00:09.420
challenging.

4
00:00:09.440 --> 00:00:13.670
So rather than trying to do this entire refactor all at once we're going to set ourselves a little bit

5
00:00:13.670 --> 00:00:15.410
more immediate goal.

6
00:00:15.500 --> 00:00:20.330
We're going to try to say that rather than defining all these different options right away inside of

7
00:00:20.330 --> 00:00:25.240
some config object we're just going to try to pass in some routes elements.

8
00:00:25.250 --> 00:00:28.850
So this is going to be some element that the autocomplete should be rendered into.

9
00:00:28.910 --> 00:00:33.650
So the immediate goal that we're going to focus on is just having the ability to show multiple different

10
00:00:33.710 --> 00:00:36.350
auto completes on the screen at the same time.

11
00:00:36.460 --> 00:00:41.700
So we should be able to create multiple different config objects and pass each of them into some autocomplete

12
00:00:41.750 --> 00:00:42.740
function.

13
00:00:42.740 --> 00:00:48.410
The auto complete function should then create the auto complete in those different root elements so

14
00:00:48.410 --> 00:00:48.690
again.

15
00:00:48.710 --> 00:00:49.730
That's the immediate goal.

16
00:00:49.730 --> 00:00:51.820
That's what we're going to try to do from the get go.

17
00:00:51.960 --> 00:00:56.990
So to get started going to first go back over to my editor inside of my root project directory I'll

18
00:00:56.990 --> 00:01:01.840
create a new file called auto complete dot J.S. inside of here.

19
00:01:01.870 --> 00:01:08.050
I'm going to define a function called Create auto complete so we're going to call this function multiple

20
00:01:08.050 --> 00:01:13.000
different times and eventually it's going to have a bunch of reusable code inside of it whenever we

21
00:01:13.000 --> 00:01:18.580
call this function we're gonna pass in some kind of configuration object and that config object is going

22
00:01:18.580 --> 00:01:24.220
to have all the kind of custom functions that specify how the autocomplete should work inside of our

23
00:01:24.250 --> 00:01:25.880
specific application.

24
00:01:26.200 --> 00:01:31.810
So that config object is essentially where we put all of our references to movies and how the movie

25
00:01:31.810 --> 00:01:37.370
should be rendered and what to do when one gets clicked and so on and then going to make sure that I

26
00:01:37.370 --> 00:01:44.450
wire up that autocomplete J.S. file inside of my index dot each team l file the inside of here I'll

27
00:01:44.450 --> 00:01:50.860
go down to the very bottom I'm going to duplicate one of the script tags and then change the S C to

28
00:01:50.880 --> 00:01:51.840
auto complete.

29
00:01:51.870 --> 00:01:58.500
So now that file will actually be executed to make sure that you've got utilize and then autocomplete

30
00:01:58.590 --> 00:02:05.280
and then indexed J.S. if index not JSA is listed first then the code inside there will run first and

31
00:02:05.280 --> 00:02:10.670
it will try to call the autocomplete function before it has been created yet.

32
00:02:10.780 --> 00:02:12.440
So I'll save that file.

33
00:02:12.490 --> 00:02:16.670
Now we're going to start to do the big refactor to the big refactor.

34
00:02:16.690 --> 00:02:23.080
We're gonna go into index dot J.S. and I'm going to take as much of the autocomplete related code as

35
00:02:23.080 --> 00:02:29.680
possible that is supposed to be reusable in nature and move it over to the autocomplete dot J.S. file

36
00:02:30.990 --> 00:02:38.140
that's going to start from about line 16 or so where I have const root right there I'm going to go from

37
00:02:38.140 --> 00:02:47.080
that line and I'm going to select everything down to the end of document add event listener that's about

38
00:02:47.080 --> 00:02:57.730
line sixty five or so for me and then going to cut all that go over to autocomplete J S and paste it

39
00:02:57.730 --> 00:02:58.540
into the function

40
00:03:02.140 --> 00:03:03.060
okay.

41
00:03:03.360 --> 00:03:07.800
It's now all we have to do is start to repair the code inside of here we're going to make sure that

42
00:03:07.800 --> 00:03:13.920
some of the stuff that is application specific is being taken from this config object instead of being

43
00:03:13.920 --> 00:03:19.770
placed directly inside this file it's the first and best example of that is going to be the root element

44
00:03:19.770 --> 00:03:20.850
right here.

45
00:03:20.970 --> 00:03:26.670
Normally when all this code runs it assumes that our document is going to have a div or some other element

46
00:03:26.910 --> 00:03:28.930
with a class of autocomplete.

47
00:03:29.190 --> 00:03:34.650
If that were the case then we would only be able to call it create autocomplete exactly one time because

48
00:03:34.650 --> 00:03:39.890
there's probably only one element that we're going to be able to select with the statements so instead

49
00:03:39.920 --> 00:03:44.780
of trying to figure out what element we should be rendering into inside of this reusable function we're

50
00:03:44.780 --> 00:03:51.150
going to instead accept this as a configurable property that we're going to make sure that our config

51
00:03:51.180 --> 00:03:55.710
object has a root property and that's going to be the element that the autocomplete should be rendered

52
00:03:55.710 --> 00:04:03.880
into So in other words this config object right there I'm going to expect to have a root element so

53
00:04:03.880 --> 00:04:10.840
I'm going to restructure out a property called root like so make sure you get those curly braces because

54
00:04:10.840 --> 00:04:16.730
we are de structuring that property out so now because this is being provided as an option to create

55
00:04:16.800 --> 00:04:21.290
auto complete function it no longer on its own has to figure out where to render the auto complete so

56
00:04:21.290 --> 00:04:23.770
we can now delete that first statement right there.

57
00:04:26.370 --> 00:04:33.180
All right one or two other quick changes inside of here on lines 12 or 14 or so where we've got all

58
00:04:33.180 --> 00:04:38.910
those different references to input dropdown and so on those are trying to find just some input in the

59
00:04:38.910 --> 00:04:42.990
documents or some element with the class a dropdown and so on.

60
00:04:42.990 --> 00:04:44.160
We don't want that to be the case.

61
00:04:44.160 --> 00:04:51.150
Instead we want to try to find the input the dropdown and results that are inside of that root element.

62
00:04:51.150 --> 00:04:57.260
In other words that one right there that input and that results element as well.

63
00:04:57.300 --> 00:05:01.860
So to make sure that we get those elements we can update the query SELECT right here instead of looking

64
00:05:01.860 --> 00:05:03.140
at the entire document.

65
00:05:03.270 --> 00:05:12.550
We're going to look specifically inside of the root element so root root and root.

66
00:05:12.570 --> 00:05:12.870
All right.

67
00:05:12.870 --> 00:05:17.220
That's probably just about everything we have to do inside of create autocomplete for right now.

68
00:05:17.220 --> 00:05:22.080
So now we can go back over to our index not ust file and we're going to try to call it create autocomplete

69
00:05:22.140 --> 00:05:26.700
multiple different times every single time we're gonna form up a different configuration object that

70
00:05:26.700 --> 00:05:32.850
has a different route element to render the autocomplete into it's a back inside of index dot J.S. I'm

71
00:05:32.850 --> 00:05:40.170
going to call create autocomplete and I'll pass in my configuration object this thing is going to have

72
00:05:40.230 --> 00:05:45.180
a root element let's first go back over to our index not each CML file and make sure that there are

73
00:05:45.180 --> 00:05:51.750
different elements so we can render these separate auto completes into inside of index start each L

74
00:05:52.810 --> 00:05:58.090
right now we've got that one day with the class of autocomplete I'm gonna duplicate that down twice

75
00:05:58.910 --> 00:06:04.210
so I'm going to try to render three different auto completes into my application one into that one that

76
00:06:04.210 --> 00:06:09.910
one and that one I need to make sure that I give them class names just to make sure that they are easier

77
00:06:09.910 --> 00:06:19.230
to select so on the second one I'll do autocomplete dash to and auto fleet dash three like so we'll

78
00:06:19.230 --> 00:06:23.250
eventually get some better class names in this but for right now that's good enough for testing purposes

79
00:06:24.660 --> 00:06:29.340
finally we can go back over to index dot J Yes and I'm going to say that I want to create one instance

80
00:06:29.340 --> 00:06:38.520
of an auto complete widget at a root element of document dot query selector dot auto complete then I'm

81
00:06:38.520 --> 00:06:44.900
going to duplicate this down twice so 1 into and I'll change the query selectors for those two other

82
00:06:44.900 --> 00:06:52.100
divs that we just added in so the second one right there is going to get auto complete dash to the auto

83
00:06:52.090 --> 00:07:00.400
complete Dash 2 and then dash 3 and that should be at yes let's say this will test it and then do a

84
00:07:00.400 --> 00:07:07.170
quick wrap up on the changes we made so go back over refresh and now I see that three different inputs

85
00:07:07.580 --> 00:07:13.320
I'll first go down to the bottom one I'll search for Avengers There we go and I can click it and select

86
00:07:13.320 --> 00:07:19.950
it and it gets selected on the screen I'll then go to the second on I'll try searching for Dark Knight

87
00:07:20.850 --> 00:07:25.890
Yep that one works as well that one gets selected on the screen now why is it getting selected here

88
00:07:25.970 --> 00:07:32.070
will it remember right now our create auto complete function has a reference to just one single element

89
00:07:32.070 --> 00:07:38.670
to show the output in that summary right there inside of on movie select so that is the only location

90
00:07:38.670 --> 00:07:43.200
right now where we can render some output to whenever user clicks on an element and that's why we're

91
00:07:43.200 --> 00:07:48.810
seeing essentially the same summary element being overwritten every single time that we click on a movie

92
00:07:49.080 --> 00:07:52.690
so obviously that's something that's definitely going to eventually have to be fixed up but again for

93
00:07:52.710 --> 00:07:58.160
right now we were just worried about trying to make sure that we could show the same root element versus

94
00:07:58.310 --> 00:08:02.450
show the same auto in different root elements.

95
00:08:02.570 --> 00:08:09.490
Finally one more test here on the first one I'll look for Avengers bucket and that works as well okay

96
00:08:09.560 --> 00:08:14.990
so that's pretty much it we can now clearly show multiple different autocomplete widgets on the screen

97
00:08:15.080 --> 00:08:21.580
whereas before we definitely could only show one at a time so the big summary here and the process that

98
00:08:21.580 --> 00:08:26.140
we're going to start to duplicate again it again in the next couple of videos as we continuous refactor

99
00:08:27.170 --> 00:08:31.710
is that we are trying to be able to create multiple different auto completes and we're going to centralize

100
00:08:31.800 --> 00:08:38.370
all the logic around creating each one inside of index not J.S. and inside of autocomplete dot us we're

101
00:08:38.370 --> 00:08:43.770
going to have just the logic inside of here that is reusable between different projects so it will not

102
00:08:43.770 --> 00:08:49.110
have any references to movies it will have no idea what a movie object is we'll have no idea of the

103
00:08:49.110 --> 00:08:52.040
different properties it has and so on.

104
00:08:52.120 --> 00:08:55.150
So let's take a pause right here and continue our refactor in the next video.
