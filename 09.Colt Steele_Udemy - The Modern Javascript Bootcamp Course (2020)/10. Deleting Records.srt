1
00:00:00,630 --> 00:00:02,890
We've got just a couple of more methods to get through.

2
00:00:02,940 --> 00:00:07,410
We're going to take care in this video of one of the easier ones we have left which is delete the sides

3
00:00:07,410 --> 00:00:12,090
that we all so have to take care of get one by and update which are going to be just a little bit more

4
00:00:12,090 --> 00:00:16,320
challenging delete on the other hand is gonna be pretty darn straightforward.

5
00:00:16,320 --> 00:00:23,950
It's all go back over at the very bottom of my class all the fine async delete and we're going to pass

6
00:00:23,950 --> 00:00:25,090
in to this function.

7
00:00:25,090 --> 00:00:31,210
The idea the record that we want to delete then inside of here we'll once again get a list of all of

8
00:00:31,210 --> 00:00:39,160
our records so awaits this I'd get all and we will go through or iterate through that list of records

9
00:00:39,370 --> 00:00:44,110
we're going to use the filter function and we're going to filter out any record that has the same I.D.

10
00:00:44,140 --> 00:00:46,240
as the idea that was passed in.

11
00:00:46,370 --> 00:00:54,970
It's I'll say constant filtered records is records dot filter and then for each record we're going to

12
00:00:54,970 --> 00:00:59,420
return true if that records I.D. is not equal to that one.

13
00:00:59,560 --> 00:01:04,840
Remember that the filter function in general is only going to retain elements that return true from

14
00:01:04,840 --> 00:01:06,010
the inner function.

15
00:01:06,010 --> 00:01:13,060
So we want to return true if the I.D. is not the same inside of here I'll say a record dot I.D. not

16
00:01:13,060 --> 00:01:15,940
equal to I.D. return true in that case

17
00:01:18,760 --> 00:01:23,650
then we can take filtered records and save that back to our hard drive inside the users dot JS on file

18
00:01:23,700 --> 00:01:26,830
some of the words pass that thing back into our right.

19
00:01:26,860 --> 00:01:27,490
All function

20
00:01:30,340 --> 00:01:36,700
so I will do a await this dot right all with filtered records

21
00:01:40,820 --> 00:01:41,300
all right.

22
00:01:41,560 --> 00:01:44,920
So let's save this and we'll do another quick test for this test.

23
00:01:44,920 --> 00:01:50,350
We're going to once again have to change up our test function down here so I'm going to once again go

24
00:01:50,350 --> 00:01:57,040
back over to users dot Jason and find the idea of a real record inside of here a copy let's go back

25
00:01:57,040 --> 00:02:03,000
over I'm going to clean up that file or see the test function and I'll do a awaits repo.

26
00:02:03,010 --> 00:02:08,930
Dot delete and then passing the idea the record that I want to delete in this case we're not going to

27
00:02:08,960 --> 00:02:14,120
fetch or retrieve the records after we'll just manually open up the user dot Jason File and ensure that

28
00:02:14,120 --> 00:02:17,390
one of these records got deleted all right.

29
00:02:17,410 --> 00:02:22,310
So back over here I'll do a note to users not just didn't see any errors.

30
00:02:22,310 --> 00:02:26,800
Well that's probably good back inside of users dot Jason.

31
00:02:26,800 --> 00:02:29,070
I can now see that there is only one user left.

32
00:02:29,080 --> 00:02:30,520
Perfect.

33
00:02:30,560 --> 00:02:38,900
I'll go ahead and try to delete the other one as well so I'll take that I.D. paste it in save back over

34
00:02:38,900 --> 00:02:50,070
to the terminal rerun the file back to my editor open up user start Jason again Yep totally empty OK.

35
00:02:50,100 --> 00:02:52,440
Well delete definitely works just fine.

36
00:02:52,530 --> 00:02:54,160
I think that just leaves to left.

37
00:02:54,180 --> 00:02:57,980
Unless I'm missing one I think we just have get one by and update.

38
00:02:58,020 --> 00:02:59,720
So let's take care of those in just a moment.
