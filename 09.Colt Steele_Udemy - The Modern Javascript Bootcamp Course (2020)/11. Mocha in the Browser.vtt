WEBVTT
1
00:00:01.070 --> 00:00:01.430
All right.

2
00:00:01.460 --> 00:00:05.960
Now we discuss why testing this widget is Camille but challenging let's start to do some setup of mocha

3
00:00:05.990 --> 00:00:08.720
to get it running inside of our browser to get started.

4
00:00:08.740 --> 00:00:14.150
I'm gonna go back to the mocha J s home page so you can get here at mocha j ust dot org once here scroll

5
00:00:14.150 --> 00:00:21.440
down a little bit and find the section called features the first link inside there says browser support.

6
00:00:21.470 --> 00:00:26.240
We're going to click on browser support right there and it's going to show us exactly how to run Boca

7
00:00:26.450 --> 00:00:27.770
inside the browser.

8
00:00:27.800 --> 00:00:33.620
We're going to setup an HMO document that is dedicated specifically to testing different things inside

9
00:00:33.620 --> 00:00:35.110
of our application.

10
00:00:35.210 --> 00:00:38.330
So this HMO document is going to set up Moka.

11
00:00:38.690 --> 00:00:44.150
And then inside of here we're going to eventually add in some additional script tags to require in JavaScript

12
00:00:44.150 --> 00:00:49.790
files from our project and we're going to also write some code to test that stuff that we require in

13
00:00:49.790 --> 00:00:51.230
as well.

14
00:00:51.250 --> 00:00:54.970
Long story short we're going to create a new HMO file inside of our project.

15
00:00:55.120 --> 00:00:57.430
It's going to contain this age mail right here.

16
00:00:57.430 --> 00:01:02.350
And this is going to be kind of like our testing hardness or the platform that we use to test our browser

17
00:01:02.380 --> 00:01:04.940
specific code.

18
00:01:04.940 --> 00:01:10.950
All right so going to select all safety mail I'm going to copy it I'm going to go backwards my code

19
00:01:10.980 --> 00:01:14.520
editor I'm still inside of that movie's testing directory.

20
00:01:14.520 --> 00:01:19.770
So this is the one that has all the movie code that we just downloaded inside of my root project folder.

21
00:01:19.770 --> 00:01:26.110
I'm going to make a new directory called test the reason for this is to just isolate my test related

22
00:01:26.110 --> 00:01:32.400
code from my application code then inside of that test folder I'm going to make a new file called Test

23
00:01:32.550 --> 00:01:40.770
dot H2 AML and then inside this e-mail file I'm going to paste all the HDL that I just copied from Vocus

24
00:01:40.780 --> 00:01:41.320
home page

25
00:01:44.390 --> 00:01:45.070
inside of here.

26
00:01:45.080 --> 00:01:48.980
If you scroll down towards the bottom you're going to see a series of different script tags.

27
00:01:48.980 --> 00:01:54.880
There are three script tags in particular right here of test array J.S. test object and test X H.R..

28
00:01:55.070 --> 00:01:57.530
We're going to delete all three though script tax.

29
00:01:57.530 --> 00:02:01.320
The only reason that they are in here is just for documentation purposes.

30
00:02:01.370 --> 00:02:06.020
This is Moka the documentation trying to tell us Hey just so you know this is how you would get access

31
00:02:06.020 --> 00:02:09.080
to one of your files and actually test it inside your project.

32
00:02:09.770 --> 00:02:11.750
So again this is just documentation right here.

33
00:02:11.780 --> 00:02:17.300
You and I don't have any files to test called Test array Jesus or test object or X H.R. and so on.

34
00:02:17.300 --> 00:02:21.990
So again we're going to take that stuff and delete it.

35
00:02:22.040 --> 00:02:22.310
All right.

36
00:02:22.340 --> 00:02:26.720
I'm then going to say this file and then I'm going to open up this file inside my browser just to see

37
00:02:26.720 --> 00:02:31.980
what happens when we tried to start up Moka inside the browser to open up this file.

38
00:02:32.030 --> 00:02:41.090
We can do a right click right here reveal and finder there's my test each HDL file a double click it

39
00:02:41.090 --> 00:02:44.060
to open up inside the browser and there we go.

40
00:02:44.070 --> 00:02:47.900
So looks like nothing happened but if you look really carefully at the top right hand side there's a

41
00:02:47.900 --> 00:02:49.370
little set of numbers up there.

42
00:02:49.370 --> 00:02:51.760
I'm going to zoom in a little bit so I can see it more easily.

43
00:02:51.830 --> 00:02:57.050
This right here means that Moka is setup and working these numbers over time are going to reflect the

44
00:02:57.050 --> 00:03:00.820
number of tests that we've executed that have passed that have failed.

45
00:03:00.950 --> 00:03:03.300
And how long they have taken so far.

46
00:03:03.380 --> 00:03:07.700
So eventually as we start to write in some tests inside of our project we're going to see the test output

47
00:03:07.970 --> 00:03:12.210
listed out here on the screen let's try to create a new test right now.

48
00:03:12.210 --> 00:03:18.720
Just a really basic one and see what happens inside this document back inside my editor I'm going to

49
00:03:18.720 --> 00:03:21.200
find my test directory.

50
00:03:21.420 --> 00:03:26.760
I'm gonna make a new file called autocomplete dot test dot J.S..

51
00:03:27.120 --> 00:03:31.280
So eventually we're going to add some code into this thing to run tests on our autocomplete widget.

52
00:03:31.360 --> 00:03:37.020
But right now like I mentioned we're just gonna try to write a very simple and basic test all right.

53
00:03:37.020 --> 00:03:45.140
So inside of here I'll simply say it works and then pass in second argument of a function like so.

54
00:03:45.140 --> 00:03:48.860
So we saw the syntax just a moment ago when we were working on that earlier project.

55
00:03:48.860 --> 00:03:54.440
If you want to write a test with Moka J.S. we call the IT function Moka makes that function globally

56
00:03:54.440 --> 00:03:54.980
available.

57
00:03:54.980 --> 00:03:58.240
So we don't have to required in or do anything like that.

58
00:03:58.310 --> 00:04:00.640
The first argument will then be a description for the test.

59
00:04:00.680 --> 00:04:05.330
In this case I don't really have anything to describe or anything so I'm just going to say it works.

60
00:04:05.510 --> 00:04:08.210
And then in the test body we don't really have any code either.

61
00:04:08.210 --> 00:04:15.910
So I'm going to pass in an empty function song then going to save this file and then to get this thing

62
00:04:15.910 --> 00:04:22.180
to actually run we have to make sure that we include this javascript file inside of the test HDL file.

63
00:04:22.480 --> 00:04:32.190
So I will go back over to test HMO I'll go down towards the bottom and then right above the last script

64
00:04:32.190 --> 00:04:39.450
tag that has a class of Moka ZEC will add in another script tag but the source of autocomplete that

65
00:04:39.560 --> 00:04:48.440
test dot J us and I'll close off the other side like so.

66
00:04:48.560 --> 00:04:52.980
So let's save this we'll go back over to our browser run this thing and see what happens.

67
00:04:53.790 --> 00:04:58.840
So refresh and I'll see that the test has been executed and I see the description right there and apparently

68
00:04:58.840 --> 00:05:00.130
it has passed.

69
00:05:00.280 --> 00:05:01.580
We now have one passing test.

70
00:05:01.600 --> 00:05:05.430
Zero failures and all that stuff took 0.01 seconds.

71
00:05:05.500 --> 00:05:08.340
Now of course this is a very simple but very basic example.

72
00:05:08.350 --> 00:05:12.910
I just want to show you that yes we can run some testing stuff inside the browser and see some report

73
00:05:12.910 --> 00:05:14.180
like this.

74
00:05:14.180 --> 00:05:17.070
Now at this point it might seem like hey this isn't so bad right.

75
00:05:17.070 --> 00:05:21.970
Like things are kind of easy and how you kind of made a big deal earlier saying oh yeah all this setup

76
00:05:21.970 --> 00:05:23.520
is gonna be kind of painful.

77
00:05:23.530 --> 00:05:26.170
Well yes everything we've done so far has been kind of easy.

78
00:05:26.260 --> 00:05:29.130
But now here's where it's going to start to get kind of complicated.

79
00:05:29.680 --> 00:05:35.350
So we need to somehow make sure that this each HTML documents that we just created is going to load

80
00:05:35.350 --> 00:05:41.890
up our autocomplete widget and then inside of our autocomplete test dot J as file we need to write some

81
00:05:41.890 --> 00:05:43.950
code that's going to actually test that thing.

82
00:05:43.960 --> 00:05:47.460
So that's where life starts to get a little bit more confusing.

83
00:05:47.470 --> 00:05:48.450
Let's take a pause right here.

84
00:05:48.460 --> 00:05:51.970
We'll come back next video and start to discuss how we're going to wire all this stuff up.
