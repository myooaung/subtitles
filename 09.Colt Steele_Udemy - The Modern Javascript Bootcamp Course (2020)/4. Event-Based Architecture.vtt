WEBVTT
1
00:00:00.830 --> 00:00:04.550
In the last video we did a little bit of project setup and now we're ready to start writing some code

2
00:00:04.940 --> 00:00:09.830
before we write any code whatsoever however I want to really quickly discuss how we're going to approach

3
00:00:09.860 --> 00:00:12.020
and generally architect this program.

4
00:00:12.080 --> 00:00:15.740
So I want to really take a look at this mockup right here and think about some of the different things

5
00:00:15.740 --> 00:00:17.740
that our program is supposed to do.

6
00:00:17.810 --> 00:00:22.100
So in total remember we're going add the timer and that kind of animated border around it.

7
00:00:22.100 --> 00:00:26.210
I would say that our program really does kind of two different things.

8
00:00:26.900 --> 00:00:30.980
First off on the core responsibilities of our program is to display that timer.

9
00:00:30.980 --> 00:00:35.990
So like some element on the screen that displays some number of seconds the play button underneath it

10
00:00:36.020 --> 00:00:37.150
and the pause button.

11
00:00:37.370 --> 00:00:44.690
That is all stuff that is 100 percent related to running a timer now separate to that is the idea that

12
00:00:44.690 --> 00:00:47.870
we want to show that animated border around the timer.

13
00:00:47.870 --> 00:00:53.450
Yes the border is very tightly coupled with a timer like we want to update that border animation every

14
00:00:53.450 --> 00:00:55.060
time the timer starts to tick down.

15
00:00:55.400 --> 00:00:58.220
But nonetheless these really are two different parts of our program.

16
00:00:58.220 --> 00:00:59.230
One is the timer.

17
00:00:59.270 --> 00:01:05.410
The other is some result from that timer some effect that the timer has on our application so as we

18
00:01:05.410 --> 00:01:10.720
start to think about what our program does I want you to imagine how we might write out some code to

19
00:01:10.750 --> 00:01:11.960
implement this thing.

20
00:01:12.230 --> 00:01:16.630
I'm going to show you a little bit of pseudocode or kind of like base code instead of a diagram to help

21
00:01:16.630 --> 00:01:22.160
you understand one possible way that we might implement this timer with the border around it.

22
00:01:22.180 --> 00:01:24.390
Now the code that I'm about to show you is not code at all.

23
00:01:24.400 --> 00:01:26.030
It is just a series of steps.

24
00:01:26.080 --> 00:01:28.470
It is not the actual implementation we're going to put together.

25
00:01:28.480 --> 00:01:32.360
It is just for demonstration purposes OK.

26
00:01:32.390 --> 00:01:38.060
So here's one possible implementation so we might set up an event listener to watch for click on that

27
00:01:38.060 --> 00:01:44.640
start button and the start button of course is that little play button right there so we could set up

28
00:01:44.730 --> 00:01:47.290
a click event listener and watch for a click on it.

29
00:01:47.510 --> 00:01:53.170
And then whenever a click occurs we'll run this series of steps right here so maybe right away we can

30
00:01:53.170 --> 00:01:58.690
draw a full border around the timer or like clear out the border or do something with it some like initialization

31
00:01:58.720 --> 00:02:03.930
for that border animation then immediately after that we can start counting down on the timer.

32
00:02:03.950 --> 00:02:10.020
So like one second will run some block of code to update our timer and maybe the border as well.

33
00:02:10.100 --> 00:02:12.610
So then each time the timer starts to countdown.

34
00:02:12.770 --> 00:02:17.720
We can't take a look at the border and update the animation to kind of advance it around the outside

35
00:02:17.780 --> 00:02:20.890
of the circle.

36
00:02:20.920 --> 00:02:24.570
In addition every time the timer counts down we might also update the text as well.

37
00:02:24.580 --> 00:02:30.950
So this number right here would go from say twenty seven to twenty six twenty five and so on then we'll

38
00:02:30.950 --> 00:02:35.360
take a look at the current timer and we'll say that OK if we just kind of down and the timer reaches

39
00:02:35.360 --> 00:02:40.190
zero we probably have to do some kind of like cleanup stuff so maybe we need to reset the border in

40
00:02:40.190 --> 00:02:45.590
some style and maybe we need to also reset something around the internal timer to get it ready for another

41
00:02:45.590 --> 00:02:50.970
run so again this is just one kind of guess of a possible implementation.

42
00:02:50.980 --> 00:02:54.180
The reason I'm laying this out here is I want to make a really important point.

43
00:02:54.340 --> 00:02:58.930
I want you to take a look at the ordering of lines of code inside this block right here and I want you

44
00:02:58.930 --> 00:03:06.040
to notice that between the two things that our program does just about every other line of code addresses

45
00:03:06.040 --> 00:03:09.160
something very different inside of application.

46
00:03:09.160 --> 00:03:13.450
So in other words this first line right here is related to the timer itself.

47
00:03:13.450 --> 00:03:18.490
It is watching for someone to click on that start button then inside of our click event handler the

48
00:03:18.490 --> 00:03:25.410
first thing we do is something about the border then the next line of code is something about the timer.

49
00:03:25.520 --> 00:03:30.030
That is something about the border then something about the Timer Timer border timer.

50
00:03:30.100 --> 00:03:34.080
So as we start to think about the real structure of this block of code right here we are essentially

51
00:03:34.140 --> 00:03:38.370
alternating what every single line of code does inside of this block.

52
00:03:38.610 --> 00:03:43.310
And that would mean that over time this would be some really challenging code to understand because

53
00:03:43.370 --> 00:03:48.060
we are going to essentially change context or change what our brain has to be thinking about as we're

54
00:03:48.360 --> 00:03:53.800
reading every line of code in series so rather than taking this kind of approach right here where we

55
00:03:53.800 --> 00:03:58.480
have to be considering OK timer border timer border and so on.

56
00:03:58.630 --> 00:04:04.060
We should instead try to isolate all the different responsibilities of our application into different

57
00:04:04.150 --> 00:04:05.870
and separate blocks.

58
00:04:05.890 --> 00:04:07.280
So how can we do that.

59
00:04:07.390 --> 00:04:11.440
Because at the end of the day we still have to say draw the border around the timer and do the update

60
00:04:11.470 --> 00:04:12.020
and so on.

61
00:04:12.820 --> 00:04:19.740
Well one possible way to address this would be to use a kind of event ID style approach.

62
00:04:19.760 --> 00:04:25.040
So this is the same series of actions right here or the same kind of layout but rather than having right

63
00:04:25.040 --> 00:04:29.960
here something that is specifically related to updating the border maybe instead of saying hey border

64
00:04:29.960 --> 00:04:36.590
go update yourself maybe our timer could instead emit some kind of event or emit some kind of notification

65
00:04:36.590 --> 00:04:42.980
to the rest of our application and say hey if anyone cares at all the timer just started and then some

66
00:04:43.010 --> 00:04:48.190
other part of our application can watch for that event to occur whenever that event occurs.

67
00:04:48.200 --> 00:04:55.680
We can run some code to draw the border we can then start to count down the timer and then every single

68
00:04:55.680 --> 00:05:00.960
time that we tick down the timer or kind of countdown we could once again emit an event that signals

69
00:05:00.960 --> 00:05:04.280
that the timer has ticked in some fashion.

70
00:05:04.280 --> 00:05:08.070
So then we can write some code somewhere else inside of application that watches for that event occur

71
00:05:08.460 --> 00:05:13.320
and when it does we can update the border and kind of like advance it or advance that animation around

72
00:05:13.320 --> 00:05:14.660
the outside the circle.

73
00:05:15.000 --> 00:05:19.470
And then same thing down here as well rather than running some code that specifically says OK let's

74
00:05:19.470 --> 00:05:21.300
take a look at the border and reset it.

75
00:05:21.300 --> 00:05:25.410
Instead we might try to write some code that emits an event or something like that to send a signal

76
00:05:25.620 --> 00:05:27.490
that the timer is all done.

77
00:05:27.720 --> 00:05:32.250
And so somewhere else in cyber application we could run some code or watch for that event whenever it

78
00:05:32.250 --> 00:05:36.110
occurs we could reset the border or do whatever else we want.

79
00:05:36.110 --> 00:05:40.450
So again the idea here is that rather than try to write some code where we are alternating what we're

80
00:05:40.490 --> 00:05:45.260
doing step by step in every line of code essentially does something totally different and unrelated

81
00:05:45.260 --> 00:05:46.980
to what occurred before it.

82
00:05:47.000 --> 00:05:53.090
We can instead say OK let's have one block of code right here that is 100 percent focused on one aspect

83
00:05:53.090 --> 00:05:54.270
of our application.

84
00:05:54.440 --> 00:05:59.840
And if some other part of our app like say the border needs to know about this stuff rather than directly

85
00:05:59.840 --> 00:06:01.970
saying hey border please go update yourself.

86
00:06:02.060 --> 00:06:08.450
We can instead emit an event or something like that maybe run a callback function that says OK timer

87
00:06:08.450 --> 00:06:09.650
started timer ticked.

88
00:06:09.650 --> 00:06:11.000
Timer is done.

89
00:06:11.090 --> 00:06:14.930
And so this kind of approach right here would allow us to write some much more clear code.

90
00:06:15.110 --> 00:06:19.970
We would end up with an implementation of our timer that could possibly use be reused between different

91
00:06:19.970 --> 00:06:22.190
projects or for different purposes.

92
00:06:22.190 --> 00:06:27.680
Beyond just updating the border in addition we would also have some implementation for updating the

93
00:06:27.680 --> 00:06:28.310
border.

94
00:06:28.310 --> 00:06:32.450
That wouldn't really care about whether we are having it work with a timer or some other kind of thing

95
00:06:32.450 --> 00:06:38.750
like say the progress of making a network request or downloading a file or something like that.

96
00:06:38.750 --> 00:06:38.980
All right.

97
00:06:38.990 --> 00:06:43.450
So if this diagram doesn't make that much sense right now that's totally fine we're going gonna write

98
00:06:43.450 --> 00:06:44.540
some code very quickly.

99
00:06:44.620 --> 00:06:50.020
We're going to start to explore this idea and see how we can kind of really isolate the different responsibilities

100
00:06:50.050 --> 00:06:52.440
inside of our program.

101
00:06:52.520 --> 00:06:55.240
Now we've got a better idea of how we're going to kind of approach this.

102
00:06:55.270 --> 00:06:58.870
Let's take a pause right here and start working on an implementation in the next video.
