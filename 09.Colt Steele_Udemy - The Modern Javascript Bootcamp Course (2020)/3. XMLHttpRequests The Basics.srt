1
00:00:00,300 --> 00:00:02,330
OK so now we've talked about Ajax.

2
00:00:02,340 --> 00:00:03,740
We talked about Jason.

3
00:00:03,810 --> 00:00:05,760
We've gotten all that stuff out of the way.

4
00:00:06,000 --> 00:00:13,350
We can move on to making our first requests using the o g method of sending an HBP request through javascript.

5
00:00:13,350 --> 00:00:17,070
It's called X L H GDP request.

6
00:00:17,130 --> 00:00:23,940
So these are objects in the browser we can create that have different methods and we can use them to

7
00:00:24,060 --> 00:00:27,100
fetch data from an API to send data somewhere.

8
00:00:27,120 --> 00:00:31,020
Basically they generate an HDP request and it's confusing.

9
00:00:31,020 --> 00:00:32,990
It does say XM all in the name.

10
00:00:33,060 --> 00:00:40,170
That's just a relic from when X M.L. was the standard we can use X Excel HDP request also known as x

11
00:00:40,170 --> 00:00:43,400
h rs to fetch any sort of data from an API.

12
00:00:43,440 --> 00:00:45,680
It doesn't have to be just X amount.

13
00:00:45,780 --> 00:00:48,170
So this is the original way of doing it.

14
00:00:48,210 --> 00:00:53,140
It's clunky it doesn't support promises so we end up with a lot of callbacks.

15
00:00:53,220 --> 00:00:59,130
If we have nested requests things where if we want to make one request get information back and then

16
00:00:59,130 --> 00:01:04,680
make a second request which we mimicked back when we talked about promises a couple videos ago we made

17
00:01:04,680 --> 00:01:08,100
that fake HDP request function that we used.

18
00:01:08,100 --> 00:01:09,420
So we send one request.

19
00:01:09,510 --> 00:01:14,660
We have some callbacks then within those callbacks we could send another one and we end up nesting things.

20
00:01:14,650 --> 00:01:17,490
So no promises are supported also.

21
00:01:17,550 --> 00:01:19,390
This is always driven me crazy.

22
00:01:19,410 --> 00:01:21,320
Why is it capitalized this way.

23
00:01:21,400 --> 00:01:28,300
Excel is an abbreviation it's all caps each GDP is two but it's not capitalized except for the H.

24
00:01:28,320 --> 00:01:31,440
It always trips me up whenever I have to type these myself.

25
00:01:31,710 --> 00:01:38,190
And the most important thing that I don't like about X jars and nobody really likes is the syntax.

26
00:01:38,190 --> 00:01:39,700
It's hard to remember.

27
00:01:39,810 --> 00:01:41,700
I have to reference it all the time.

28
00:01:41,700 --> 00:01:46,890
I guarantee you in the making of this video the very one I'm recording right now I'm going to have to

29
00:01:46,890 --> 00:01:50,610
pause at some point and reference some other code because I can never remember it.

30
00:01:51,180 --> 00:01:57,510
Fortunately we have an alternative these days which we'll see very shortly called fetch which arose

31
00:01:57,630 --> 00:02:00,050
out of the fact that people hate making X a charge.

32
00:02:00,060 --> 00:02:01,590
It's just annoying.

33
00:02:01,590 --> 00:02:04,890
But let's see how we do it now that I've made it sound horrendous.

34
00:02:04,890 --> 00:02:10,010
Just remember this used to be the only way so it's not like nobody used this ever.

35
00:02:10,020 --> 00:02:12,510
This was the only way of making a request.

36
00:02:12,510 --> 00:02:20,230
What we do is we make a new object that object is created by calling new XM L H TGP request with parentheses.

37
00:02:20,250 --> 00:02:24,970
Then we provide two callbacks one to run if the request loads.

38
00:02:24,990 --> 00:02:27,840
If it's successful one to run if there's an error.

39
00:02:27,840 --> 00:02:30,920
So we have once again once again that branching path.

40
00:02:31,020 --> 00:02:32,970
Success and failure.

41
00:02:32,970 --> 00:02:39,870
Then what we do is we call the request object which I called my request dot open we tell it what type

42
00:02:39,870 --> 00:02:45,770
of request we'll make a get request and what you are able to send the request to we'll come back to

43
00:02:45,770 --> 00:02:47,300
the headers in just a moment.

44
00:02:47,300 --> 00:02:49,940
Then we finally send the request.

45
00:02:49,940 --> 00:02:53,370
That request is then sent after this line is encountered.

46
00:02:53,390 --> 00:02:55,970
If it's successful there's no problem.

47
00:02:55,970 --> 00:02:59,050
This code will run if it's not successful if there's an error.

48
00:02:59,120 --> 00:03:01,370
This code runs.

49
00:03:01,370 --> 00:03:03,230
You can read more about it on MDA.

50
00:03:03,470 --> 00:03:07,250
I really like their documentation on it and what I'll do to help myself out.

51
00:03:07,250 --> 00:03:13,640
Probably more than this actually helps you to copy this over into my file where I'll paste it in as

52
00:03:13,640 --> 00:03:14,230
a reference.

53
00:03:15,600 --> 00:03:18,440
OK so let's make a request somewhere.

54
00:03:18,780 --> 00:03:22,200
We're gonna use this simple starburst API to start it's free.

55
00:03:22,200 --> 00:03:24,400
You don't have to sign up for anything or register.

56
00:03:24,420 --> 00:03:26,350
There's no authentication.

57
00:03:26,400 --> 00:03:32,970
Let's look at what do we get if we go to slash planets.

58
00:03:32,970 --> 00:03:33,930
Send a request.

59
00:03:33,930 --> 00:03:35,390
This is just a little viewer.

60
00:03:35,460 --> 00:03:37,200
It doesn't like that.

61
00:03:37,240 --> 00:03:38,640
Is there a list of planets.

62
00:03:39,650 --> 00:03:41,400
How do we see all planets.

63
00:03:41,430 --> 00:03:43,470
Okay well let's go to documentation.

64
00:03:43,470 --> 00:03:45,040
Where are the endpoints.

65
00:03:45,040 --> 00:03:45,290
Yeah.

66
00:03:45,330 --> 00:03:47,530
We can just go to slash planets.

67
00:03:47,550 --> 00:03:48,720
It should work.

68
00:03:48,720 --> 00:03:48,980
Okay.

69
00:03:48,990 --> 00:03:49,440
Here we go.

70
00:03:49,440 --> 00:03:57,280
So we'll try making a request to get all of the planets which is swap eco slash API slash planets.

71
00:03:57,330 --> 00:04:01,110
So I'm going to copy this you are all over and we'll try sending a request to it.

72
00:04:02,310 --> 00:04:05,180
So the first thing I'll do is make our request object.

73
00:04:05,190 --> 00:04:14,780
We'll call this first request equals new X AML H2 DP request like that then we have a couple of different

74
00:04:14,780 --> 00:04:16,410
ways of attaching the callbacks.

75
00:04:16,520 --> 00:04:22,640
We can do what I showed in the slides where we use on load and on error or we can use at event listener

76
00:04:24,140 --> 00:04:25,470
so either one works.

77
00:04:25,550 --> 00:04:30,320
In general you know I've already mentioned this when we're working with the Dom and adding click events

78
00:04:30,320 --> 00:04:31,760
and other sort of event listeners.

79
00:04:31,760 --> 00:04:35,470
I like to use an event listener so I guess we'll go with that.

80
00:04:35,480 --> 00:04:39,620
Even though I didn't put it in the slides like I said I pretty much never use this.

81
00:04:39,620 --> 00:04:42,290
So we'll do our event listener for load.

82
00:04:42,290 --> 00:04:45,020
This is the code that will run let's just do an arrow function.

83
00:04:45,830 --> 00:04:54,810
If things go well I will just cancel that log it works and then we'll duplicate this entire thing here.

84
00:04:55,040 --> 00:04:57,740
But listen for the error events.

85
00:04:57,800 --> 00:05:04,470
So in the event that it doesn't work something went wrong will counsel that log error.

86
00:05:04,590 --> 00:05:07,800
OK so we're just attaching these to event listeners.

87
00:05:07,800 --> 00:05:11,300
We haven't even sent the request we haven't told it what you are ready to go to.

88
00:05:11,340 --> 00:05:12,350
So that's the next part.

89
00:05:12,360 --> 00:05:21,020
First request Dot's open and you would think open would actually send to send the request but it doesn't.

90
00:05:21,270 --> 00:05:23,820
We have to explicitly send it afterwards.

91
00:05:24,060 --> 00:05:25,860
So I'll put my you are Ellen here.

92
00:05:25,860 --> 00:05:33,470
This is the you are well I want to send a request to then we'll call first request dot sent.

93
00:05:33,480 --> 00:05:34,780
Remember this takes time.

94
00:05:34,800 --> 00:05:36,680
Which is why we have to add our callbacks.

95
00:05:36,690 --> 00:05:42,480
If I put something afterwards just like with a set time out all the stuff we saw in the last section

96
00:05:42,840 --> 00:05:44,890
javascript moves on.

97
00:05:44,910 --> 00:05:47,420
This request is handled by the browser.

98
00:05:47,490 --> 00:05:52,890
One of the web API is just like set time out so javascript doesn't just pause like it does if I put

99
00:05:52,950 --> 00:05:53,700
an alert.

100
00:05:53,820 --> 00:05:59,100
It pauses and just waits and waits and waits that doesn't happen here because javascript is not sending

101
00:05:59,100 --> 00:06:01,920
the actual request it's done through the browser.

102
00:06:01,920 --> 00:06:09,660
So we'll consider that log request sent down here and this is what we should see appear first and then

103
00:06:09,660 --> 00:06:11,900
our request hopefully comes back successful.

104
00:06:11,910 --> 00:06:14,210
We'll see this if it does not come back successful.

105
00:06:14,220 --> 00:06:15,270
We'll see this.

106
00:06:15,270 --> 00:06:16,290
Who knows what will happen.

107
00:06:16,290 --> 00:06:19,590
So here's my page where I have it loaded.

108
00:06:19,740 --> 00:06:20,460
Request sent.

109
00:06:20,460 --> 00:06:21,810
It worked.

110
00:06:21,810 --> 00:06:24,360
I guess we just have to trust that it worked right now.

111
00:06:24,360 --> 00:06:29,240
But if we put some you or Alan here that we know does not exist.

112
00:06:29,280 --> 00:06:31,270
Well I hope that doesn't exist.

113
00:06:31,290 --> 00:06:32,970
Try it again.

114
00:06:33,000 --> 00:06:33,860
There we go.

115
00:06:33,870 --> 00:06:36,570
Request was sent and we got an error.

116
00:06:36,900 --> 00:06:39,040
So our two branching paths did it.

117
00:06:39,050 --> 00:06:42,050
Bode was everything OK or did it suck.

118
00:06:42,080 --> 00:06:42,930
Did it not work.

119
00:06:42,930 --> 00:06:46,740
Was there an error which we just deliberately caused to make sure it worked.

120
00:06:47,760 --> 00:06:54,760
So that is the first part in making a request object and ex H.R. X AML GDP request we make it.

121
00:06:54,840 --> 00:06:57,540
Then we attach our callbacks then.

122
00:06:57,600 --> 00:07:02,970
Well actually you can attach the callbacks after you open but before you send what's most important

123
00:07:02,970 --> 00:07:09,130
is that you send after you've configured that object so the object represents an HDP request.

124
00:07:09,180 --> 00:07:11,450
It's just a javascript object that has different methods.

125
00:07:11,460 --> 00:07:17,520
It has properties where assigning a load in an error callback we tell it what type of requests we want

126
00:07:17,520 --> 00:07:23,360
to get request telling it where to send the request to telling it to send it.

127
00:07:23,370 --> 00:07:26,280
Now what about the data that's coming back from the API.

128
00:07:26,280 --> 00:07:29,680
The whole point of this is to send a request and get something back.

129
00:07:29,700 --> 00:07:31,650
Right now we're not accessing it.

130
00:07:31,650 --> 00:07:34,710
We don't even know if we get the correct information back.

131
00:07:34,740 --> 00:07:42,600
We just get a console dialog the way that we access that data is by referencing this dot response text.

132
00:07:42,600 --> 00:07:44,430
Well what does this refer to.

133
00:07:44,610 --> 00:07:46,630
It refers to the request itself.

134
00:07:46,800 --> 00:07:48,750
So why don't we just look at that request.

135
00:07:48,750 --> 00:07:50,730
I think we called it first request.

136
00:07:51,030 --> 00:07:51,960
Right.

137
00:07:52,080 --> 00:07:57,900
So after this finished which it already finished we can see that here if we look at first request it

138
00:07:57,900 --> 00:08:02,880
contains a response and it contains this response text.

139
00:08:03,600 --> 00:08:09,920
If we copy this response text and see if I copy it correctly okay.

140
00:08:10,220 --> 00:08:16,400
This right here is a whole bunch of Jason everything we see is Jason.

141
00:08:16,660 --> 00:08:23,350
It's not regular old javascript but it's a string of a bunch of JavaScript looking stuff.

142
00:08:23,500 --> 00:08:25,420
You can see it enter the quote.

143
00:08:25,420 --> 00:08:27,210
It begins with a double quote.

144
00:08:27,400 --> 00:08:32,050
So if I save right now and my auto formatted tries to run it's not going to be happy with me.

145
00:08:32,080 --> 00:08:38,770
It's not considered javascript but we have a way of referencing it so I'll get rid of that massive monstrosity

146
00:08:38,770 --> 00:08:45,130
down there and let's try referencing the response text on first request.

147
00:08:45,130 --> 00:08:46,120
So when my slides.

148
00:08:46,120 --> 00:08:51,600
What I did was this dot response text but that won't work here.

149
00:08:51,730 --> 00:08:53,020
Why not.

150
00:08:53,020 --> 00:08:55,350
Any guesses here.

151
00:08:55,420 --> 00:09:00,670
It has to do with the fact that I'm using an arrow function so an arrow function remember does not have

152
00:09:00,670 --> 00:09:02,770
the same rules of the keyword this.

153
00:09:03,040 --> 00:09:07,210
So this will not refer to first request if I use an arrow function.

154
00:09:07,210 --> 00:09:12,390
So I have two options I can just reference first request dot text contra.

155
00:09:12,400 --> 00:09:13,180
What is that response.

156
00:09:13,180 --> 00:09:21,390
Text we could counsel that log that refresh the page.

157
00:09:21,390 --> 00:09:29,490
Hey all of our information if I instead tried to do this we will get undefined.

158
00:09:29,490 --> 00:09:33,900
There is no response text because this is not set to the first request.

159
00:09:33,900 --> 00:09:38,450
If I instead rewrite this as a standard function expression.

160
00:09:38,820 --> 00:09:45,600
Now I can use the keyword this so in this case it probably makes more sense to use a standard function

161
00:09:45,600 --> 00:09:51,300
expression because we want the value of this to refer to the first request object.

162
00:09:51,300 --> 00:09:56,010
So this gives me this massive thing of text it is not javascript it's Jason.

163
00:09:56,580 --> 00:10:00,120
So the next step is to turn it into actual javascript.

164
00:10:01,230 --> 00:10:02,180
So here we go.

165
00:10:02,220 --> 00:10:12,510
We have a special method called Jason dot pass and we pass into that a string of Jason like that and

166
00:10:12,510 --> 00:10:21,650
we can save that to a variable to call this data and then we can console the log data let's see what

167
00:10:21,650 --> 00:10:22,160
we get now.

168
00:10:23,820 --> 00:10:25,070
Hey check it out.

169
00:10:25,100 --> 00:10:28,760
This is now being presented to me as a javascript object.

170
00:10:28,790 --> 00:10:34,530
It includes things like count how many results we got back with the next pages.

171
00:10:34,550 --> 00:10:38,500
So it looks like it didn't give us all the planets at once because there's a lot of them.

172
00:10:38,540 --> 00:10:44,480
Instead it gave me the first but the first 10 and then instead of results we have all of the different

173
00:10:44,480 --> 00:10:51,830
planets that we got back 10 of them and they contain tons of information and this is an actual javascript

174
00:10:51,860 --> 00:10:58,810
object so I could do something like loop over the results and print out each planet name.

175
00:10:59,000 --> 00:11:04,140
So I would need to access data dot results loop over that.

176
00:11:04,160 --> 00:11:07,490
So why don't we start there data.

177
00:11:07,520 --> 00:11:13,600
So let's do four let planet of data that results.

178
00:11:13,670 --> 00:11:16,190
We now have this awesome javascript object.

179
00:11:16,190 --> 00:11:21,860
It wasn't javascript before we converted it and we want for each one of these to print out the name.

180
00:11:21,950 --> 00:11:25,830
So we'll do a console that log planet dot.

181
00:11:25,880 --> 00:11:31,590
Name refresh awesome.

182
00:11:31,670 --> 00:11:37,370
We are now sending a request getting information back as Jason converting into javascript iterating

183
00:11:37,370 --> 00:11:41,820
over it or doing something with it somehow manipulating it and then printing data out.

184
00:11:42,500 --> 00:11:48,290
So with what we've seen so far it wouldn't be a stretch to instead display the information on the page

185
00:11:48,590 --> 00:11:51,470
or do something visual for a user.

186
00:11:51,470 --> 00:11:56,060
It would be the same sort of stuff we've seen before creating an element appending an element selecting

187
00:11:56,060 --> 00:12:01,300
element styling them with classes all of that hopefully by now we're pretty comfortable with.

188
00:12:01,520 --> 00:12:06,980
But this this is kind of a lot of code and it has some drawbacks other than the clunky syntax which

189
00:12:06,980 --> 00:12:08,390
we'll go into in the next video.
