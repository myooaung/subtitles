WEBVTT
1
00:00:00.290 --> 00:00:01.610
Hey welcome back everyone.

2
00:00:01.620 --> 00:00:09.750
We've got a very big topic here by big I don't mean long difficult challenging but more so central hugely

3
00:00:09.750 --> 00:00:16.230
important crucial to all of javascript that topic is functions functions in some people's minds at least

4
00:00:16.530 --> 00:00:21.320
are the one topic that you must understand to be a good javascript developer.

5
00:00:21.390 --> 00:00:23.060
They are central to the language.

6
00:00:23.070 --> 00:00:28.710
I know I've really overused that phrase in this course because all the things we've covered so far are

7
00:00:28.920 --> 00:00:29.880
important.

8
00:00:29.880 --> 00:00:33.930
We use them in pretty much every application or script we ever write.

9
00:00:33.930 --> 00:00:37.350
We're definitely going to use variables and data structures or raising objects.

10
00:00:37.350 --> 00:00:42.900
We'll have logic with conditionals we'll use loops we'll use functions but more than that functions

11
00:00:42.960 --> 00:00:46.350
are very important to the way javascript is structured.

12
00:00:46.380 --> 00:00:49.650
They're crucial to JavaScript identity as a language.

13
00:00:49.830 --> 00:00:50.870
And you'll see what I mean.

14
00:00:50.880 --> 00:00:56.520
As we progressed through the rest of the course it's not only about defining our own functions and learning

15
00:00:56.520 --> 00:01:00.010
the syntax but also there are a lot of quirks with functions.

16
00:01:00.030 --> 00:01:04.890
A lot of things we can do that are cool with functions that just take some time to understand.

17
00:01:04.890 --> 00:01:10.620
So it's a big topic because it's important because it's something we use every single time we write

18
00:01:10.620 --> 00:01:12.510
code basically from here on out.

19
00:01:13.230 --> 00:01:18.210
So we're not going to understand and cover every single topic around functions in this one section.

20
00:01:18.210 --> 00:01:20.460
We have a couple of main goals for this section.

21
00:01:20.460 --> 00:01:22.740
We want to understand the basics what is a function.

22
00:01:22.770 --> 00:01:24.120
Why do you use them.

23
00:01:24.120 --> 00:01:26.030
And then mostly how do we define them.

24
00:01:26.030 --> 00:01:27.030
What's the syntax.

25
00:01:27.180 --> 00:01:28.440
And then we'll write a ton of.

26
00:01:28.440 --> 00:01:29.420
Example functions.

27
00:01:29.430 --> 00:01:31.670
We'll have some exercises code along.

28
00:01:31.830 --> 00:01:33.410
We just need to get practice.

29
00:01:33.510 --> 00:01:36.680
So functions are not difficult at least writing your own functions.

30
00:01:36.690 --> 00:01:42.330
It's pretty straightforward but there are a lot of things to understand about functions different variations

31
00:01:42.600 --> 00:01:47.330
different capabilities or features and that will all unfold across a couple of sections.

32
00:01:47.400 --> 00:01:49.800
So it's not all concentrated right here.

33
00:01:49.860 --> 00:01:50.300
OK.

34
00:01:50.460 --> 00:01:53.110
So let's begin what the heck is a function.

35
00:01:53.160 --> 00:01:55.990
A function is simply a reusable procedure.

36
00:01:56.100 --> 00:01:59.640
It's a chunk of code that we've wrapped up in a function.

37
00:01:59.640 --> 00:02:02.990
So it's a bunch of lines of code that we can call again at any point.

38
00:02:03.090 --> 00:02:04.510
We can refer back to it.

39
00:02:04.740 --> 00:02:11.340
So we can have a function called Get the latest read it posts and anytime we called it it would have

40
00:02:11.340 --> 00:02:17.070
code inside of it that would presumably request new Reddit posts and send them back to us where we could

41
00:02:17.070 --> 00:02:24.240
have a simpler one find average in array or just find average or we could have a function called Square.

42
00:02:24.240 --> 00:02:29.230
And it simply squares a value every time we pass in a numbers like 10.

43
00:02:29.310 --> 00:02:31.660
It should return to square one hundred.

44
00:02:31.740 --> 00:02:36.810
So we make these chunks of code their little machines which is why I'm using this sort of imagery here

45
00:02:37.230 --> 00:02:38.270
mechanical stuff.

46
00:02:38.400 --> 00:02:42.120
It's a bunch of code that we put together and we wrap it up into a package.

47
00:02:42.150 --> 00:02:46.440
And the advantage of doing this is that we can then call that chunk of code we can call that function

48
00:02:46.560 --> 00:02:50.560
later on which is kind of what this visual is supposed to represent.

49
00:02:50.580 --> 00:02:53.990
I had a really hard time coming up with a graphic for functions.

50
00:02:54.150 --> 00:02:56.830
This represents the function the machinery.

51
00:02:56.970 --> 00:03:01.740
And then this button right here is calling that function every time we press it.

52
00:03:01.830 --> 00:03:04.290
The function does its thing it does its action.

53
00:03:04.380 --> 00:03:08.890
So there's a two step process for every function that we ever use that we write.

54
00:03:08.940 --> 00:03:11.790
First we define the function we laid out.

55
00:03:11.790 --> 00:03:14.930
We tell javascript here is how this thing should work.

56
00:03:14.940 --> 00:03:17.280
It's kind of like registering it or going to the.

57
00:03:17.640 --> 00:03:22.830
I don't know the DMV filling out forms saying here's this new function but that doesn't do anything

58
00:03:23.190 --> 00:03:24.420
as far as running the code.

59
00:03:24.990 --> 00:03:28.580
It's just defining it telling javascript about the function.

60
00:03:28.590 --> 00:03:33.240
Then the second step is to execute the function to run it and we can run it once.

61
00:03:33.240 --> 00:03:34.920
We could run it 100 times.

62
00:03:34.920 --> 00:03:37.110
It's totally up to you and when you need to use it.

63
00:03:37.290 --> 00:03:40.100
But the point here is that it's a two step process.

64
00:03:40.110 --> 00:03:41.640
You write it and then you run it.

65
00:03:41.640 --> 00:03:43.250
We've been working with quite a few functions.

66
00:03:43.260 --> 00:03:47.340
So far we've been calling the methods which is important.

67
00:03:47.340 --> 00:03:49.320
It is a distinction in terminology.

68
00:03:49.320 --> 00:03:54.960
It's one we will address later once we learn how to write our own methods but methods are functions.

69
00:03:55.020 --> 00:03:55.930
They are actions.

70
00:03:55.970 --> 00:04:01.290
Are chunks of code that have been wrapped up given a name and made into a repeatable function.

71
00:04:01.890 --> 00:04:10.710
So things like Hello Dot to uppercase to uppercase is a built in method which again we'll just call

72
00:04:10.710 --> 00:04:12.930
a function for now it's a built in function.

73
00:04:13.170 --> 00:04:17.070
Every time I call it I need to use parentheses.

74
00:04:17.070 --> 00:04:22.410
It's referring back to the same definition of the same built in set of instructions that says Here is

75
00:04:22.410 --> 00:04:24.360
how to uppercase works.

76
00:04:24.360 --> 00:04:29.050
So we're skipping the first step because it's a built in function or method.

77
00:04:29.250 --> 00:04:30.640
We're simply running that code.

78
00:04:31.890 --> 00:04:34.340
It's already been defined or written for us.

79
00:04:34.590 --> 00:04:36.020
But notice we use parentheses.

80
00:04:36.030 --> 00:04:37.380
We've seen that before.

81
00:04:37.490 --> 00:04:41.190
It's the exact same thing when we're running our own functions.

82
00:04:41.190 --> 00:04:44.330
So we've been using functions but we haven't been defining them.

83
00:04:44.370 --> 00:04:45.960
How do we define our own.

84
00:04:45.960 --> 00:04:52.140
There are quite a few different sin taxes and syntax ie different ways of writing functions in JavaScript.

85
00:04:52.140 --> 00:04:58.020
The one we'll focus on for now at least is called a function declaration or a function statement.

86
00:04:58.020 --> 00:05:01.930
It looks like this the keyword is space.

87
00:05:01.970 --> 00:05:05.160
And then a name for the function which is totally up to you.

88
00:05:05.300 --> 00:05:09.120
As long as it's a valid name so you don't want to name your function const.

89
00:05:09.140 --> 00:05:14.900
You don't want to name your function function or for or if but in general.

90
00:05:14.900 --> 00:05:18.020
Name it whatever you want just don't put spaces in there.

91
00:05:18.050 --> 00:05:23.090
It has to be a valid identifier shouldn't start with a number and then parentheses open and closing

92
00:05:23.090 --> 00:05:24.050
parentheses.

93
00:05:24.050 --> 00:05:29.720
Sometimes you put stuff in there which we'll get to shortly and then curly braces and we write our code

94
00:05:29.720 --> 00:05:30.770
in here.

95
00:05:30.770 --> 00:05:36.840
Whatever code we put in here in the body of the function will be called when this function runs.

96
00:05:36.860 --> 00:05:43.530
So here's a simple trivial obnoxious example I'm defining a function called Grumps.

97
00:05:43.580 --> 00:05:45.350
It doesn't mean anything at all.

98
00:05:45.500 --> 00:05:51.450
It's just printing out three grouchy consoles out lugs OG you again for the last time.

99
00:05:51.470 --> 00:05:52.850
Leave me alone.

100
00:05:52.850 --> 00:05:59.300
And every time we call grump it's these three lines would be printed up so it doesn't seem useful because

101
00:05:59.480 --> 00:06:00.560
this is not useful.

102
00:06:00.560 --> 00:06:01.730
Why would you ever need this.

103
00:06:01.730 --> 00:06:04.100
Why would you need a function called Grumps.

104
00:06:04.100 --> 00:06:07.270
We'll get two useful ones but the pattern is very important.

105
00:06:07.280 --> 00:06:12.890
Function is a keyword space and then our function name with parentheses curly braces.

106
00:06:12.890 --> 00:06:16.210
We put some content inside so let's define it over here.

107
00:06:16.220 --> 00:06:22.610
Function Grumps parentheses and then console don't log three things.

108
00:06:22.610 --> 00:06:24.500
There we go and just copy it over.

109
00:06:24.770 --> 00:06:26.520
We have three dot dialogues.

110
00:06:26.570 --> 00:06:29.610
I'm gonna save this file and refresh the page.

111
00:06:29.810 --> 00:06:33.850
Nothing happens all that we've done is tell javascript.

112
00:06:33.860 --> 00:06:39.680
Here is a function called the Grumps but it's never running or just registering it or letting javascript

113
00:06:39.680 --> 00:06:40.220
know.

114
00:06:40.250 --> 00:06:41.680
Here's a thing called Grumps.

115
00:06:41.870 --> 00:06:42.950
So to run it.

116
00:06:42.950 --> 00:06:44.500
Which is the second step.

117
00:06:44.540 --> 00:06:50.120
All we do is write the name of the function followed by parentheses just like we've done with string

118
00:06:50.120 --> 00:06:52.550
methods like two uppercase.

119
00:06:52.700 --> 00:06:55.870
We add those parents if we leave them off.

120
00:06:56.000 --> 00:06:59.510
You might remember we talked about this briefly in one of the videos.

121
00:06:59.510 --> 00:07:01.270
It's almost like Javascript is telling us.

122
00:07:01.400 --> 00:07:01.780
Oh yeah.

123
00:07:01.850 --> 00:07:04.740
Yeah I know what that thing is that was registered with me.

124
00:07:04.820 --> 00:07:11.030
It's showing us there's some code in this case native code built in code but it's not actually running

125
00:07:11.030 --> 00:07:11.170
it.

126
00:07:11.240 --> 00:07:14.870
We have to add those parents so same thing for Grumps.

127
00:07:14.870 --> 00:07:20.840
If I simply typed Grumps and I don't add those poor friends I'm seeing from javascript that this is

128
00:07:20.840 --> 00:07:21.340
a function.

129
00:07:21.350 --> 00:07:22.400
It's been registered.

130
00:07:22.400 --> 00:07:24.950
It exists but I'm not running it.

131
00:07:25.070 --> 00:07:28.680
I'm just referencing it so I need those poor friends.

132
00:07:29.210 --> 00:07:30.050
And there we go.

133
00:07:30.050 --> 00:07:32.010
My three lines actually run.

134
00:07:32.060 --> 00:07:40.760
The function is executed so grump is let's do it three times Grumps Grumps will save and refresh the

135
00:07:40.760 --> 00:07:41.540
page.

136
00:07:41.540 --> 00:07:44.000
And now we get nine consoles out logs.

137
00:07:44.000 --> 00:07:49.790
We've defined our function and we've executed it two steps and we can execute it like this.

138
00:07:49.790 --> 00:07:51.130
We get executed in a loop.

139
00:07:51.140 --> 00:07:59.180
If I wanted to loop 20 times for I equals zero I less than or equal let's do less than let's do 50 plus

140
00:07:59.180 --> 00:08:01.830
plus we've got a whole flock of grimaces.

141
00:08:01.910 --> 00:08:11.390
I can call Grumps refresh the page and we get a whole lot of Grumps Krampus text printed out a very

142
00:08:11.390 --> 00:08:13.490
stupid and grumpy function.

143
00:08:13.490 --> 00:08:17.380
But the point is not the content it is the format.

144
00:08:17.390 --> 00:08:19.240
Function keyword space.

145
00:08:19.400 --> 00:08:20.570
Some function name.

146
00:08:20.720 --> 00:08:24.010
Whatever this name is you must reference later.

147
00:08:24.140 --> 00:08:29.320
So if I tried to call Grumps with a capital G that doesn't exist I get an error.

148
00:08:29.450 --> 00:08:34.930
It has to match the name we gave it up here and then print in order to execute it.

149
00:08:35.180 --> 00:08:35.440
All right.

150
00:08:35.520 --> 00:08:36.910
So this is just the beginning.

151
00:08:36.910 --> 00:08:39.620
Oh very quickly see some more useful functions.

152
00:08:39.650 --> 00:08:40.790
We've got a lot more to talk about.
