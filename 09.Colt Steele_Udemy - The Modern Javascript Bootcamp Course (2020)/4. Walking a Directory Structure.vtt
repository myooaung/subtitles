WEBVTT
1
00:00:01.560 --> 00:00:01.760
All right.

2
00:00:01.770 --> 00:00:04.790
Let's talk about how we're going to implement this collect files function.

3
00:00:04.860 --> 00:00:09.180
So remember the goal of collect files is to walk through all the different files and folders inside

4
00:00:09.180 --> 00:00:14.310
of a project directory and find all the files ending in some particular suffix.

5
00:00:14.320 --> 00:00:18.350
So let's take a look at how we're going to implement this okay.

6
00:00:18.350 --> 00:00:22.340
The first thing to really understand here is that when we start to walk through a directory it kind

7
00:00:22.340 --> 00:00:24.860
of has a structure that looks like this.

8
00:00:24.930 --> 00:00:28.680
Now I've taken the movie's project directory and I've kind of massaged it just a little bit.

9
00:00:28.680 --> 00:00:31.950
So a lot of these different files and folders inside of here are actually made up.

10
00:00:31.950 --> 00:00:35.790
I just did it for the purposes of demonstration in this diagram.

11
00:00:35.790 --> 00:00:40.980
Everything that's in blue represents a folder and everything that's in white represents a file so he

12
00:00:40.980 --> 00:00:44.080
could say that our movie's directory has two folders inside of it.

13
00:00:44.310 --> 00:00:50.820
The test directory and the source directory so our goal would be able to go in to movies.

14
00:00:51.000 --> 00:00:57.150
Take a look at test take a look at everything inside there and find any file with dot test dot J.S.

15
00:00:57.390 --> 00:00:59.300
which would be like that right there.

16
00:00:59.340 --> 00:01:04.290
We would then have to walk into the widgets directory and find all the files inside there and find any

17
00:01:04.290 --> 00:01:05.580
marked with test JFK.

18
00:01:05.610 --> 00:01:09.330
So once again those two right there and we would also go into source.

19
00:01:09.330 --> 00:01:10.000
Take a look in there.

20
00:01:10.010 --> 00:01:11.600
In this case nothing.

21
00:01:11.610 --> 00:01:13.740
So how are we going to automate this process.

22
00:01:14.400 --> 00:01:19.230
Well the first thing to understand is that this kind of directory structure right here looks like a

23
00:01:19.290 --> 00:01:24.740
very common data structure that you're going to see in the world of programming referred to as a tree.

24
00:01:24.810 --> 00:01:30.390
First off let me clarify what a data structure is a data structure is some programming structure that

25
00:01:30.390 --> 00:01:34.310
we use to organize data inside of our application throughout this course.

26
00:01:34.320 --> 00:01:39.930
You've been using data structures in just about every single app in extremely common data structure

27
00:01:39.930 --> 00:01:41.070
is in array.

28
00:01:41.130 --> 00:01:44.550
It organizes a series of records in a list.

29
00:01:44.550 --> 00:01:49.860
Another very common data structure that you see in the world of javascript is an object a object has

30
00:01:49.860 --> 00:01:56.480
a collection of key and value pairs another term for an object or technically a data structure that

31
00:01:56.480 --> 00:02:02.930
the javascript object implements is referred to as a hash map or a map or a hash table all kind of equivalent

32
00:02:02.930 --> 00:02:08.840
terms but usually in the world's javascript we just refer to an object as simply an object.

33
00:02:08.840 --> 00:02:12.950
So another kind of data structure that we can use to describe the directory structure that we have right

34
00:02:12.950 --> 00:02:15.270
here is called a tree.

35
00:02:15.280 --> 00:02:19.940
So another way that we can represent this series of files and folders would be something like this right

36
00:02:19.940 --> 00:02:23.380
here and we would refer to this as a tree.

37
00:02:23.390 --> 00:02:25.780
So at the tree we have some head element.

38
00:02:25.790 --> 00:02:31.060
So that would be the top level directory that directory that has some number of children.

39
00:02:31.070 --> 00:02:37.100
So in this case the movie's directory has source and test then those folders have their own files and

40
00:02:37.100 --> 00:02:42.080
say like test right here has its own collection of files and folders and even those have its own files

41
00:02:42.080 --> 00:02:47.350
inside of it a tree data structure like this right here can be arbitrarily deep.

42
00:02:47.380 --> 00:02:52.450
So what we really need to figure out here is how to iterate through a tree data structure.

43
00:02:52.450 --> 00:02:56.500
There are two different ways to iterate through a tree data structure and take a look at all the records

44
00:02:56.500 --> 00:03:03.340
encapsulated inside of here the two different ways are referred to as a bread first breadth first search

45
00:03:03.580 --> 00:03:04.690
or traversal.

46
00:03:04.690 --> 00:03:11.290
The second way is referred to as a depth first search or traversal now for the purposes of what we are

47
00:03:11.290 --> 00:03:15.730
doing a breadth first search is going to be a little bit easier to implement.

48
00:03:15.850 --> 00:03:20.530
So we're going to focus on understanding how a breadth first traversal is implemented.

49
00:03:20.530 --> 00:03:25.060
So in this diagram we're going to take a look at this tree structure and I'm going to kind of demonstrate

50
00:03:25.060 --> 00:03:29.860
how a breath first algorithm to walk through this data structure would be implemented.

51
00:03:29.860 --> 00:03:31.540
So here's how it would work.

52
00:03:31.570 --> 00:03:36.220
Now we're not going to focus too much on like the idea of finding the test dot J.S. files.

53
00:03:36.220 --> 00:03:40.570
I'm just going to describe in general how a breadth first search works.

54
00:03:40.570 --> 00:03:44.110
So what a breath for search we're always going to start off with the parent node.

55
00:03:44.110 --> 00:03:48.400
So in this case that would be the movie's folder appear with the movies folder.

56
00:03:48.400 --> 00:03:54.850
We would then ask that thing what it's child records are essentially in our very practical case what

57
00:03:54.850 --> 00:03:58.060
folders and files are listed inside of movies.

58
00:03:58.060 --> 00:04:00.760
In this case it's s c and test.

59
00:04:00.760 --> 00:04:06.250
So we could take those two elements we just found and we would add them into a big array that we're

60
00:04:06.250 --> 00:04:09.820
going to represent down here and that's step one.

61
00:04:09.830 --> 00:04:11.420
We start off at the very parent.

62
00:04:11.540 --> 00:04:16.850
We take a look at all the children of that parent and we add those children to an array.

63
00:04:16.900 --> 00:04:22.090
We then start up a for loop the for loop is going to iterate through this array that we have pictured

64
00:04:22.120 --> 00:04:28.590
down here then for every element inside this for loop we're going to take a look at every element and

65
00:04:28.590 --> 00:04:31.620
find a list of all of its different children.

66
00:04:31.620 --> 00:04:37.470
So we would first take a look at S.R. C and we take a look at S or C we would look at all the different

67
00:04:37.470 --> 00:04:40.400
children has in this case would be these three files right here.

68
00:04:41.830 --> 00:04:47.410
We would take those three files and throw them into the same array that we are currently iterating over

69
00:04:48.750 --> 00:04:52.140
that's all we do for s our C we just say OK do you have any children.

70
00:04:52.230 --> 00:04:52.800
Yes you do.

71
00:04:52.830 --> 00:04:54.600
OK throw them into this big array.

72
00:04:54.600 --> 00:04:57.590
Down here we then move on to the next element.

73
00:04:57.630 --> 00:05:03.960
In this case tests we look at the test folder and we say what children do you have in this case would

74
00:05:03.960 --> 00:05:05.710
be at test and widgets.

75
00:05:05.760 --> 00:05:10.200
So we would take those two things those two children and throw them into this array as well.

76
00:05:11.830 --> 00:05:14.230
Then we move on to the next element you tells.

77
00:05:14.410 --> 00:05:17.160
In this case this is something that doesn't have any children.

78
00:05:17.170 --> 00:05:18.520
So we say Okay no problem.

79
00:05:18.520 --> 00:05:20.000
Let's skip to the next element.

80
00:05:20.140 --> 00:05:21.370
Also doesn't have any children.

81
00:05:21.400 --> 00:05:21.660
Okay.

82
00:05:21.670 --> 00:05:22.120
No problem.

83
00:05:22.120 --> 00:05:23.520
Skip on to the next.

84
00:05:23.530 --> 00:05:23.950
Okay.

85
00:05:23.980 --> 00:05:25.360
No children skip.

86
00:05:25.480 --> 00:05:26.860
No children skip.

87
00:05:26.920 --> 00:05:29.350
And then we get to widgets which is a folder.

88
00:05:29.350 --> 00:05:31.740
So it does have some number of children.

89
00:05:31.810 --> 00:05:37.690
So we then take a look at widgets we would find all of its children and add them to this array as well.

90
00:05:38.670 --> 00:05:44.250
And so at the very end as you can see we end up with this one gigantic array with every element out

91
00:05:44.250 --> 00:05:45.140
of our tree.

92
00:05:45.210 --> 00:05:50.480
And so now we can take a look at this array down here and we can do whatever it is we originally intended.

93
00:05:50.490 --> 00:05:56.070
So for example we could look through all the different records very easily and find every record would

94
00:05:56.070 --> 00:05:58.240
say test dot J.S. inside the name.

95
00:05:58.320 --> 00:06:05.830
So that would be app test J.S. autocomplete and notice dot test J.S. that's the idea behind a breadth

96
00:06:05.830 --> 00:06:07.120
first search.

97
00:06:07.120 --> 00:06:13.060
So we're going to implement a breadth first search from scratch inside of our collect files function

98
00:06:14.450 --> 00:06:19.460
and we're going to implement it using a very similar strategy to that l s program that we wrote a little

99
00:06:19.460 --> 00:06:20.290
bit ago.

100
00:06:20.450 --> 00:06:26.060
So remember with that l s program or the list program we made use of the FSA module from the node standard

101
00:06:26.060 --> 00:06:27.040
documentation.

102
00:06:27.200 --> 00:06:31.610
So we're gonna use all the same techniques but now we're going to apply it to walk through an entire

103
00:06:31.610 --> 00:06:33.090
directory structure.

104
00:06:33.260 --> 00:06:36.080
So a quick pause and we'll start our implementation in just a moment.
