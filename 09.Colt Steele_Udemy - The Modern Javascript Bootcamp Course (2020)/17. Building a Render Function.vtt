WEBVTT
1
00:00:00.420 --> 00:00:04.260
Now that we have a better idea of what we're trying to do let's go back over to our.

2
00:00:04.350 --> 00:00:09.390
We're going to add in a new file to our TMC project and it's going to have some code inside of it that's

3
00:00:09.390 --> 00:00:12.750
going to eventually call J ust on dot from file.

4
00:00:12.760 --> 00:00:13.420
All right.

5
00:00:13.480 --> 00:00:20.260
So back over inside my project I'm going to go to my root project directory and inside there I'll create

6
00:00:20.260 --> 00:00:27.160
a new file called render dot J.S. so the idea behind this rendered dot j ust file and really quickly

7
00:00:27.160 --> 00:00:27.510
here.

8
00:00:27.520 --> 00:00:30.580
Make sure that it's placed inside of your root Tumi project directory.

9
00:00:30.580 --> 00:00:35.070
Make sure that it did not get placed into the sample web project by mistake.

10
00:00:35.200 --> 00:00:39.460
So inside this rendered dot J.S. File we're going to add in some code that's gonna take the name of

11
00:00:39.460 --> 00:00:41.380
an each CML document.

12
00:00:41.440 --> 00:00:45.460
So essentially just like we saw on the documentation this thing right here it's going to take a path

13
00:00:45.520 --> 00:00:47.250
to an age HTML document.

14
00:00:47.260 --> 00:00:51.430
We're then going to take that path and hand it off to jail stop DOT from file.

15
00:00:51.490 --> 00:00:56.920
So essentially we're going to wrap up this function call right here inside of our own little function.

16
00:00:56.950 --> 00:01:01.300
The reason for this is that eventually you and I are going to add in a lot of fancy code that kind of

17
00:01:01.390 --> 00:01:05.250
wraps up all this j j ust Dom stuff with some helper functions.

18
00:01:05.320 --> 00:01:11.280
That's why we are putting it together inside of this separate file in its own little function okay.

19
00:01:11.310 --> 00:01:15.690
So back inside of rendered J J.S. at the very top I'm going to first require in jest Dom

20
00:01:18.590 --> 00:01:23.390
I'm then going to pull off the j as DOM object or the constructor function off of that thing

21
00:01:26.550 --> 00:01:32.780
then inside of here I'm going to make a function that I'll call simply render.

22
00:01:32.890 --> 00:01:35.110
This is going to take a file name.

23
00:01:35.470 --> 00:01:39.980
So there's gonna be the essentially full path to some H small file that I want to open up or something

24
00:01:39.990 --> 00:01:45.570
not footpath which is the name of the file that we want to open up so given that this is just gonna

25
00:01:45.570 --> 00:01:49.170
be the name of the file we're going to then turn it into a fully qualified path.

26
00:01:49.410 --> 00:01:57.170
So like the entire path to some given agent I'll file on our computer to do so at the very top I'm going

27
00:01:57.170 --> 00:02:04.230
to also require in the path module as well just so I can join two parts together then instead of render

28
00:02:04.230 --> 00:02:14.010
I'll say file path is path dot join and we'll join together process dot current working directory and

29
00:02:14.010 --> 00:02:16.830
the file name like so.

30
00:02:16.830 --> 00:02:22.620
So this step right here remember we are writing out all of this logic in relation to some testing application

31
00:02:22.620 --> 00:02:24.280
or some testing CLIA.

32
00:02:24.330 --> 00:02:28.530
And so we need to make sure that we've got some path to a file that is fully qualified because we're

33
00:02:28.530 --> 00:02:33.750
going to be eventually executing some Asian file and we might not necessarily know where that actual

34
00:02:33.780 --> 00:02:34.730
Asian file is.

35
00:02:34.740 --> 00:02:41.500
So that's why we're kind of making sure that we get the fully qualified path to that file so then instead

36
00:02:41.500 --> 00:02:47.530
of here just like we saw in the documentation we'll call just on dot from file and notice how that returns

37
00:02:47.560 --> 00:02:48.460
a promise.

38
00:02:48.460 --> 00:02:51.450
We know that because they are changing on the dot then statement right there.

39
00:02:52.820 --> 00:02:57.770
So we're going to use the async await syntax to make sure that we can get the results out of this thing

40
00:02:58.130 --> 00:03:00.560
rather than making use of any promise based in text.

41
00:03:00.560 --> 00:03:06.060
Remember if we have a promise we can always use the async await syntax on it okay.

42
00:03:06.070 --> 00:03:13.270
So back over here I'm gonna make sure I wrap the function render as async then say count Dom is a wait

43
00:03:13.710 --> 00:03:23.260
j ust Dom dot from file and I'll pass in file path and we're gonna put in an object here as the second

44
00:03:23.260 --> 00:03:27.460
argument this is gonna have a couple of options.

45
00:03:27.590 --> 00:03:33.950
The two options that you and I are gonna pass in is run scripts and we're going to say dangerously as

46
00:03:33.950 --> 00:03:41.960
a string and we're also going to put in resources and we'll say usable like so now the word right here

47
00:03:41.960 --> 00:03:42.640
dangerously.

48
00:03:42.650 --> 00:03:44.720
That seems kind of nasty doesn't it.

49
00:03:44.720 --> 00:03:46.670
Well let's take a look at the documentation back over here.

50
00:03:46.670 --> 00:03:52.520
If you do a quick search on this page for dangerously like so you'll see that there is a big warning

51
00:03:52.580 --> 00:03:57.410
right underneath that that says hey be careful when you say run scripts with dangerously.

52
00:03:57.410 --> 00:04:02.390
The reason for this is that you're going to essentially run some javascript code inside of the node

53
00:04:02.450 --> 00:04:07.730
J.S. environment the no jazz environment has full access to your entire computer so you essentially

54
00:04:07.730 --> 00:04:12.170
can read all the different files on your computer it can delete files it can create files.

55
00:04:12.170 --> 00:04:17.510
If we could run some arbitrary or random javascript code on someone else's machine we could do a lot

56
00:04:17.510 --> 00:04:18.410
of damage.

57
00:04:18.530 --> 00:04:22.200
And that's essentially is what is going to happen when we say run scripts dangerously right here.

58
00:04:22.220 --> 00:04:27.080
We're going to essentially take some each small file take the javascript from it and execute it on our

59
00:04:27.080 --> 00:04:31.010
computer and we run some javascript outside of a browser environment.

60
00:04:31.020 --> 00:04:34.140
There's always a risk of some malicious behavior.

61
00:04:34.160 --> 00:04:38.720
Now the reason that you and I are okay with this is that we're going to be running some javascript file

62
00:04:39.050 --> 00:04:45.240
that we already authored on our computer we are only ever going to run scripts through this thing that

63
00:04:45.240 --> 00:04:50.820
you and I authored and so I personally have no issue whatsoever by adding in this option right here

64
00:04:50.850 --> 00:04:56.640
because I'm only ever going to run some javascript code that I execute I've put together myself or some

65
00:04:56.640 --> 00:04:59.850
other third party library that I probably kind of trust anyways

66
00:05:04.000 --> 00:05:09.390
it's now we've got that we've got this dumb object right here and right now we're just going to return

67
00:05:09.640 --> 00:05:11.480
Dom like so.

68
00:05:11.480 --> 00:05:16.700
And finally at the very bottom the file I'll say module dot exports is render notes.

69
00:05:16.720 --> 00:05:18.850
I'm not calling the render function here.

70
00:05:18.850 --> 00:05:20.060
I'm just saying render.

71
00:05:20.080 --> 00:05:24.570
That's because we want to export the function we had just created.

72
00:05:24.610 --> 00:05:24.890
All right.

73
00:05:24.910 --> 00:05:26.650
So that's all we need to get started.

74
00:05:26.710 --> 00:05:31.720
So now member we want to eventually be able to call this function right here from some test related

75
00:05:31.720 --> 00:05:32.050
code.

76
00:05:32.050 --> 00:05:37.240
The whole idea here is that I want to be able to have some person who is using my test framework to

77
00:05:37.240 --> 00:05:43.420
be able to call render and get access to some like live each email document inside of their test code.

78
00:05:43.930 --> 00:05:48.130
So we need to make sure that we expose this render function right here to the outside world and allow

79
00:05:48.160 --> 00:05:51.490
whoever is using our test framework to use it as well.

80
00:05:51.490 --> 00:05:57.760
To do that we'll open up our runner dot j ust file remember inside of run tests we put together two

81
00:05:57.820 --> 00:06:00.820
Global Properties right here before each and it.

82
00:06:01.030 --> 00:06:05.860
That was how we expose these global variables to the outside world and allowed whoever was using our

83
00:06:05.860 --> 00:06:10.600
testing framework from the command line to access before each and it.

84
00:06:10.600 --> 00:06:14.980
So we're going to use that same exact strategy to make the render function of able to the outside world

85
00:06:14.980 --> 00:06:16.790
as well.

86
00:06:16.870 --> 00:06:22.690
We're going to require the render function into runner dot G.S. and it will assign the render function

87
00:06:22.750 --> 00:06:33.040
to the global object so up at the top I'm going to require in render from the render file that we just

88
00:06:33.040 --> 00:06:39.950
put together so that's the function we just authored then down right above global dot for each.

89
00:06:39.970 --> 00:06:47.610
I'll say global dot render is render it's now someone who is writing out some test code can really call

90
00:06:47.610 --> 00:06:53.270
render at any point time they can call render they can pass in the name of some each small file and

91
00:06:53.280 --> 00:06:55.500
that should execute that file immediately

92
00:06:58.580 --> 00:06:59.050
okay.

93
00:06:59.110 --> 00:07:01.110
So let's save this.

94
00:07:01.160 --> 00:07:06.770
We now need to test it in some way so to test it we're going to add in a new test file to our sample

95
00:07:06.770 --> 00:07:07.880
web project.

96
00:07:07.880 --> 00:07:11.540
We're gonna start to write out some different tests inside there and then execute that test file with

97
00:07:11.540 --> 00:07:13.610
our team a command line tool.

98
00:07:13.610 --> 00:07:17.390
This video is running a little bit long so let's take a quick pause right here and start to write that

99
00:07:17.390 --> 00:07:18.650
test in the next video.
