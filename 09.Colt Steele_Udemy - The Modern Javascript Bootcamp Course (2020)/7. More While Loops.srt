1
00:00:00,480 --> 00:00:04,610
So we just saw how to use a while loop essentially to recreate a for loop.

2
00:00:04,620 --> 00:00:07,680
We printed the numbers 0 through 5 two different ways.

3
00:00:07,680 --> 00:00:08,250
And that's great.

4
00:00:08,250 --> 00:00:13,170
You can do that with a while loop but that's not how I use them that's not how most people use them.

5
00:00:13,170 --> 00:00:19,170
You would just use a for loop if you need to generate a set range of numbers zero to 10 one hundred

6
00:00:19,170 --> 00:00:25,620
to ten whatever where a while loop really excels is when you're writing a loop where you don't know

7
00:00:25,620 --> 00:00:28,410
exactly how many times it's going to run.

8
00:00:28,410 --> 00:00:31,160
We don't know that we're going from zero to 10.

9
00:00:31,200 --> 00:00:34,050
We don't know we want this to run exactly 20 times.

10
00:00:34,050 --> 00:00:41,070
Instead it might be something like the 2048 game example I showed you or a chess game where you continue

11
00:00:41,070 --> 00:00:47,580
to have your game logic loop until there is a game over and for a good player that might happen in the

12
00:00:47,580 --> 00:00:53,520
case of 2048 it might happen after hundreds or thousands of turns in a bad player like when I was playing

13
00:00:54,210 --> 00:00:57,780
it might happen in a hundred turns or ten or twenty turns.

14
00:00:57,780 --> 00:00:59,290
So you don't code that in.

15
00:00:59,310 --> 00:01:04,340
You use a while loop and essentially it would look like while not.

16
00:01:04,380 --> 00:01:14,730
Game over or while still alive or lives the left is greater than zero.

17
00:01:14,820 --> 00:01:20,460
So you don't know exactly how many times it will run but at some point in this loop you will be changing

18
00:01:20,460 --> 00:01:24,620
lives left or you will be setting game over to be true.

19
00:01:24,870 --> 00:01:31,620
A simple version of this would be to make a number game and a guessing game where we won't even be guessing

20
00:01:31,620 --> 00:01:37,440
ourselves our computer or JavaScript will generate a random number from one to 10 that will be the target

21
00:01:37,470 --> 00:01:38,430
we're trying to guess.

22
00:01:38,430 --> 00:01:40,010
Let's say 9.

23
00:01:40,140 --> 00:01:44,890
Then we'll make a second random number which will also be from 1 to 10.

24
00:01:44,910 --> 00:01:46,610
And we're trying to hit 9.

25
00:01:47,370 --> 00:01:49,230
So maybe the first guess we'll be five.

26
00:01:49,230 --> 00:01:54,820
We'll have a while loop that runs while the guess is not equal to the target.

27
00:01:55,230 --> 00:02:00,790
And then as soon as they are equal meaning that we've guessed correctly the loop is over.

28
00:02:00,960 --> 00:02:03,240
So let's start by generating a target number.

29
00:02:03,240 --> 00:02:08,520
So that target and that can be a const equals.

30
00:02:08,700 --> 00:02:12,780
And if you can recall back to how we do this we start with math not random.

31
00:02:12,780 --> 00:02:17,930
That gives us a decimal between 0 and 1 like point nine point nine.

32
00:02:17,940 --> 00:02:19,560
Five point six.

33
00:02:19,560 --> 00:02:22,260
And then I'm going to multiply it by 10.

34
00:02:22,890 --> 00:02:26,310
And then we floor that to chop off the decimal.

35
00:02:26,310 --> 00:02:29,180
That will give us a whole number.

36
00:02:29,610 --> 00:02:33,870
If you need some review you can go back in and watch the video or recovered this.

37
00:02:33,900 --> 00:02:38,970
I think I said this then I am not a fan of how we generate random integers in JavaScript.

38
00:02:38,970 --> 00:02:39,960
This is annoying.

39
00:02:40,020 --> 00:02:45,420
Many other languages have a simple method like randomness but javascript does not.

40
00:02:46,270 --> 00:02:46,550
OK.

41
00:02:46,560 --> 00:02:48,340
So this gives us a target number.

42
00:02:48,540 --> 00:02:55,450
Let's just verify that constant log target we get six OK.

43
00:02:55,590 --> 00:02:57,210
We do it again we get nine.

44
00:02:57,210 --> 00:03:00,650
Now let's duplicate this and generate a guess.

45
00:03:00,690 --> 00:03:07,770
So we'll call this guess and I'm going to make this a lit variable not a constant because we're probably

46
00:03:07,770 --> 00:03:09,540
going to have to guess again.

47
00:03:09,540 --> 00:03:11,910
Meaning that the value will change.

48
00:03:11,910 --> 00:03:14,120
That is stored in guess target will stay the same.

49
00:03:14,120 --> 00:03:18,750
So we can make it cost guess is most likely going to change in we guess it.

50
00:03:18,750 --> 00:03:18,990
Right.

51
00:03:18,990 --> 00:03:20,400
The very first time.

52
00:03:20,430 --> 00:03:22,650
So now we should have two variables.

53
00:03:22,650 --> 00:03:27,540
We have target and we have guests guess is not the same.

54
00:03:27,540 --> 00:03:29,600
We did not guess it correctly.

55
00:03:29,670 --> 00:03:39,330
So now we can implement our logic our loop is going to look like while guess is not equal to target.

56
00:03:39,330 --> 00:03:44,400
So while we have not guessed or generated the correct random number what do we need to do.

57
00:03:45,030 --> 00:03:49,800
Well this is the really important part of any while loop you need to eventually have a way of making

58
00:03:49,800 --> 00:03:52,590
this condition false so that the loop will stop.

59
00:03:52,590 --> 00:03:58,720
Otherwise you end up with an infinite loop which we've seen before with for loops is not good not desirable.

60
00:03:58,740 --> 00:04:04,860
We need some way of making this false eventually so we can break out and in our case it just means guessing

61
00:04:04,860 --> 00:04:05,950
again.

62
00:04:05,970 --> 00:04:07,440
So how would we guess again.

63
00:04:07,650 --> 00:04:10,960
We would just copy this.

64
00:04:11,220 --> 00:04:13,740
We don't need light because we're not trying to re declare.

65
00:04:13,800 --> 00:04:15,370
We're not trying to make a new variable.

66
00:04:15,390 --> 00:04:18,950
We're trying to update the existing guess.

67
00:04:19,170 --> 00:04:26,400
So now we'll get a new random and let's consoles out log guest in here each time and just see what we

68
00:04:26,400 --> 00:04:29,210
get going to refresh.

69
00:04:29,210 --> 00:04:34,860
And it should loop a couple of times until eventually we get the correct answer.

70
00:04:34,860 --> 00:04:39,360
That's at the bottom verify it will console dot log target

71
00:04:42,120 --> 00:04:49,860
and we'll put the variable target right there using a template literal and then guess and we'll do the

72
00:04:49,860 --> 00:04:53,860
same thing.

73
00:04:53,960 --> 00:04:59,490
All right and you can see we started with our guests being eight.

74
00:04:59,520 --> 00:05:00,300
That was incorrect.

75
00:05:00,300 --> 00:05:01,830
So we made a new guess.

76
00:05:01,950 --> 00:05:03,060
That time we got seven.

77
00:05:03,060 --> 00:05:04,620
So this was still true.

78
00:05:04,620 --> 00:05:05,580
They were not equal.

79
00:05:06,060 --> 00:05:07,370
So we printed up seven.

80
00:05:07,380 --> 00:05:10,650
We made a new guess this time guess was one.

81
00:05:10,830 --> 00:05:12,570
And that was the target.

82
00:05:12,750 --> 00:05:14,350
We can see here what was printed out.

83
00:05:14,370 --> 00:05:15,870
Target 1 guess 1.

84
00:05:15,960 --> 00:05:17,960
That means this is now false.

85
00:05:18,300 --> 00:05:19,560
And it's done running.

86
00:05:20,040 --> 00:05:23,860
So we go down to this line and that prints out Target 1 guess what.

87
00:05:25,110 --> 00:05:25,950
Awesome.

88
00:05:25,950 --> 00:05:27,090
So that works.

89
00:05:27,090 --> 00:05:29,020
I would change this up a little bit.

90
00:05:29,070 --> 00:05:32,300
It would be nice to see each guess the entire way through.

91
00:05:32,310 --> 00:05:35,180
So right here I'll print this out here so we can see it.

92
00:05:35,340 --> 00:05:41,760
And then at the bottom I'll instead say congrats you win.

93
00:05:41,820 --> 00:05:43,930
Even though the user is not doing anything.

94
00:05:44,160 --> 00:05:53,850
And let's also print out this down at the bottom one more time because right now what's happening is

95
00:05:53,850 --> 00:05:57,450
when you do guest correctly you're when the guest is updated correctly.

96
00:05:57,450 --> 00:05:58,970
This loop does not run.

97
00:05:58,980 --> 00:06:03,050
So this line never prints out so we don't see what the target is and what the guesses.

98
00:06:03,120 --> 00:06:07,770
So I'm putting it down here again and there we go.

99
00:06:08,280 --> 00:06:10,470
So we have six was the target the whole time.

100
00:06:10,920 --> 00:06:12,810
Eight was the first guest then nine.

101
00:06:12,810 --> 00:06:14,340
Then we got six.

102
00:06:14,340 --> 00:06:16,850
This line is printed after the loop right here.

103
00:06:16,860 --> 00:06:18,630
And then congrats you win.

104
00:06:18,990 --> 00:06:21,330
And that's pretty much it for this example.

105
00:06:21,330 --> 00:06:23,100
This is a really common pattern.

106
00:06:23,100 --> 00:06:27,720
So if I were to break down this pattern we have while some condition

107
00:06:30,920 --> 00:06:41,630
in the loop update or attempt to make that condition false which is what we did here we attempted to

108
00:06:41,630 --> 00:06:44,040
eventually make this condition false.

109
00:06:44,060 --> 00:06:47,180
It might take 100 tries it might take a thousand tries.

110
00:06:47,180 --> 00:06:53,600
Just like the 2048 game or a chess game you could play for hundreds of moves or it could happen really

111
00:06:53,600 --> 00:06:58,970
quickly in a for loop doesn't easily accommodate that a for loop is great when you are just trying to

112
00:06:58,970 --> 00:07:03,150
generate numbers from one index or one start point to a stop point.

113
00:07:03,500 --> 00:07:08,140
It's not as great when you have this uncertainty around how many times something will run.

114
00:07:08,750 --> 00:07:11,060
So that's when I like to use while loops.

115
00:07:11,060 --> 00:07:18,020
Just remember if you do not update something that has the chance of making this false you'll get an

116
00:07:18,020 --> 00:07:19,530
infinite loop.

117
00:07:19,790 --> 00:07:25,950
If we didn't change guess and we only guessed one time this would go on forever and that's it for now.

118
00:07:26,030 --> 00:07:30,070
There is a small change you could make potentially here.

119
00:07:30,200 --> 00:07:35,070
You can see I'm duplicating the guests the initial guests and this guest down here.

120
00:07:35,300 --> 00:07:40,730
I could just make guests undefined at the beginning and that would work although my first concert that

121
00:07:40,730 --> 00:07:45,110
log would also print out undefined here which is not what we want.

122
00:07:45,140 --> 00:07:47,870
So I'm just going to duplicate that code.

123
00:07:47,900 --> 00:07:48,290
It's OK.
