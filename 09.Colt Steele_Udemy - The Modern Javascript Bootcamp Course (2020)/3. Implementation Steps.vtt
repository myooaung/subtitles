WEBVTT
1
00:00:01.030 --> 00:00:03.580
We've got a place to write some code around our testing framework.

2
00:00:03.640 --> 00:00:08.260
Now we definitely have a lot of code to write here and so I think they would be pretty nice if a front

3
00:00:08.290 --> 00:00:11.050
we kind of came up with a game plan on how to tackle this.

4
00:00:11.470 --> 00:00:16.960
So I sat down and broke up the entire process of how we could actually test some stuff in general and

5
00:00:16.960 --> 00:00:18.780
how we might actually implement it.

6
00:00:18.790 --> 00:00:22.410
So I think that there are four different major steps we need to focus on.

7
00:00:22.600 --> 00:00:25.720
The first two we have to do whenever we run our command line tool.

8
00:00:25.720 --> 00:00:30.880
We have to take a look at the project directory that the command line tool is being executed from.

9
00:00:30.880 --> 00:00:35.620
Just be really clear the reason that we set up this command line tool in the last video is that we can

10
00:00:35.620 --> 00:00:42.320
go over to some other project directory like let's say our movies testing project.

11
00:00:42.340 --> 00:00:47.470
So ideally we would want to change over to this other folder and then run our TMC command inside of

12
00:00:47.470 --> 00:00:48.040
here.

13
00:00:48.190 --> 00:00:53.080
If we did that we should then attempt to find all the different test files inside of this project directory

14
00:00:54.290 --> 00:00:56.710
and execute all them one at a time.

15
00:00:56.750 --> 00:00:58.130
So that's the idea.

16
00:00:58.310 --> 00:01:03.440
We're never going to essentially sit inside of our team directory and just run stuff from directly inside

17
00:01:03.440 --> 00:01:04.080
of here.

18
00:01:04.160 --> 00:01:08.660
The entire team tool is all about creating the command line tool that's going to run inside of some

19
00:01:08.840 --> 00:01:12.160
other project so that mind.

20
00:01:12.210 --> 00:01:16.110
The first thing we have to do is take a look at the project directory that we're trying to run some

21
00:01:16.110 --> 00:01:21.270
tests inside of we're going to iterate through all the different files and folders inside there and

22
00:01:21.270 --> 00:01:24.450
find all the different files ending with test dot J.S..

23
00:01:24.780 --> 00:01:29.190
So we're going to refer to that as the file collection stage of our application.

24
00:01:29.340 --> 00:01:34.080
Once we have then collected all those different files we have to do some environments setup before we

25
00:01:34.080 --> 00:01:35.610
run any tests.

26
00:01:35.610 --> 00:01:39.990
So in other words we need to make sure that we can somehow execute those files and make sure that they

27
00:01:39.990 --> 00:01:45.800
have the ability to have some like browser based javascript code inside them as I mentioned earlier.

28
00:01:45.830 --> 00:01:47.350
That's definitely gonna be a big challenge.

29
00:01:47.350 --> 00:01:49.210
We're going to figure out during this second step.

30
00:01:51.360 --> 00:01:55.440
Once we do that environment setup will then actually execute each test file.

31
00:01:55.590 --> 00:02:00.600
And so that's we're going to run each little test for each little it statement inside of each one one

32
00:02:00.600 --> 00:02:04.820
by one at a time and watch for any errors that might occur.

33
00:02:04.950 --> 00:02:09.010
And then finally once we've collected all the results from all these different tests we need to kind

34
00:02:09.010 --> 00:02:12.140
of tabulate all that data and print out the results to the terminal.

35
00:02:12.150 --> 00:02:19.040
So the developer who is using our tool understands what test failed and what test actually passed so

36
00:02:19.120 --> 00:02:24.340
we're going to try to break out the implantation of our framework into these four different steps.

37
00:02:24.340 --> 00:02:28.810
I'll be honest with you some missteps might slightly blend together over time because it turns out that

38
00:02:29.050 --> 00:02:33.940
well it's kind of easiest to first get a collection of all different files and then figure out how to

39
00:02:33.940 --> 00:02:39.180
execute them and then figure out the enviroment execution and then figure out the report stuff.

40
00:02:39.250 --> 00:02:44.060
But in general this is how we're going to review the implementation these four different parts.

41
00:02:44.170 --> 00:02:50.420
So as you would guess we're going to first focus on the bio collection stage so for this step we're

42
00:02:50.420 --> 00:02:53.900
gonna break it out into kind of some sub steps so we have to go through.

43
00:02:53.940 --> 00:02:59.940
So we need to find all the files ending in test dot J.S. recursively through a folder.

44
00:02:59.940 --> 00:03:04.110
So the earlier l s program that we worked on we just printed out all the different files and folders

45
00:03:04.140 --> 00:03:11.220
inside of one single directory but now that we're working on this application if we run the TMG command

46
00:03:11.250 --> 00:03:17.670
from inside of say the movie's testing directory remember inside there we had that test folder and inside

47
00:03:17.670 --> 00:03:22.260
the test folder was the autocomplete test jazz file.

48
00:03:22.260 --> 00:03:28.830
So if we run TMC and side of movie stash testing I want to be able to find the file inside this nesting

49
00:03:28.830 --> 00:03:34.130
directory nested directory ending and test out J.S. and make sure that we execute that one.

50
00:03:34.170 --> 00:03:38.400
So in other words we need to recursively step through all the different folders inside of a project

51
00:03:38.820 --> 00:03:45.300
that's definitely gonna add in a little bit of extra complexity then every single time we find a relevant

52
00:03:45.300 --> 00:03:49.830
file we're going to store a reference to it and say hey here's a file that we need to run at some point

53
00:03:49.830 --> 00:03:55.940
time in the future then finally after we iterate through all the different files and folders inside

54
00:03:55.950 --> 00:04:00.820
of a project then we're going to start to execute them all step by step one by one.

55
00:04:00.820 --> 00:04:03.510
And so that's really the test execution stage.

56
00:04:03.510 --> 00:04:09.420
We spoke about just a moment ago okay so clearly step number one is to take a look at the given project

57
00:04:09.420 --> 00:04:14.190
directory that we're running our team come in from and find all the different files and folders inside

58
00:04:14.190 --> 00:04:17.960
there and specifically all the different files ending in Test matches.

59
00:04:18.080 --> 00:04:23.980
So let's start to write some code that's just going to accomplish this right here so to get started

60
00:04:24.010 --> 00:04:26.470
I'm going to go back over to my project directory.

61
00:04:26.710 --> 00:04:29.750
We definitely are going to end up with a lot of code inside of our project.

62
00:04:29.890 --> 00:04:34.690
And so if we just start to throw all this code right into index dot J.S. Right away I can just guarantee

63
00:04:34.690 --> 00:04:38.050
you that we're going to end up with a really messy project.

64
00:04:38.050 --> 00:04:43.240
So rather than doing that we're going to preemptively break out our project into several different files

65
00:04:43.360 --> 00:04:50.040
and essentially combine them all together inside of index J.S. the first thing I'm going to do is create

66
00:04:50.040 --> 00:04:57.230
a new file inside of here that I'll call runner J.S. This file is gonna contain a bunch of code related

67
00:04:57.230 --> 00:05:02.900
to the entire process of collecting all the different files then doing a little bit of environment setup

68
00:05:03.350 --> 00:05:04.560
then running the tests.

69
00:05:04.700 --> 00:05:07.550
The actual test environment setup will be inside of a different file.

70
00:05:07.550 --> 00:05:10.360
We're not going to like regardless stuff everything inside of here.

71
00:05:10.400 --> 00:05:15.530
So the runner not just file it really effectively is just about collecting all the different files calling

72
00:05:15.530 --> 00:05:20.030
some function that's going to do the environment set up for us and then eventually running each test

73
00:05:20.030 --> 00:05:27.440
file as well so inside of a runner J.S. in order to represent all this functionality of finding those

74
00:05:27.440 --> 00:05:27.850
files.

75
00:05:27.860 --> 00:05:28.790
All these different steps.

76
00:05:28.820 --> 00:05:33.860
I think that to organize our code it would be a good idea to try to use a class so we can have a lot

77
00:05:33.860 --> 00:05:35.660
of different functions inside this file.

78
00:05:35.660 --> 00:05:38.710
They would all be grouped together inside of one class.

79
00:05:38.770 --> 00:05:46.100
I gonna make a new class inside of here called runner and then going to export that at the bottom and

80
00:05:46.100 --> 00:05:50.720
make it available to probably the index not just file which is where we would likely at want to eventually

81
00:05:50.720 --> 00:05:51.720
make use of it.

82
00:05:52.680 --> 00:05:58.100
And inside of runner right away we know that this class is going to be responsible for well just doing

83
00:05:58.610 --> 00:06:03.710
exactly everything we just said one critical step is to make sure that the runner class is going to

84
00:06:03.710 --> 00:06:05.710
store a reference to each file we find.

85
00:06:06.320 --> 00:06:10.340
So to me that's kind of a signal that we need to have some kind of data structure inside of our class

86
00:06:10.640 --> 00:06:14.960
that's going to be able to store a reference to every test file that we discover.

87
00:06:14.960 --> 00:06:20.360
So right away I know that I probably need to make a constructor and define some kind of instance variable

88
00:06:20.360 --> 00:06:20.970
inside of here.

89
00:06:20.990 --> 00:06:24.060
That's going to store a reference to every file that we discover.

90
00:06:24.440 --> 00:06:31.670
So I'm going to make a array inside of here and assign it to this dot files.

91
00:06:31.710 --> 00:06:39.990
Then after that I'm going to add a method to the runner that I will call collect files so inside of

92
00:06:39.990 --> 00:06:45.180
collect files as you'd guess we're going to iterate through all the different folders of a project every

93
00:06:45.180 --> 00:06:47.550
single time that we find a file ending and test out.

94
00:06:47.580 --> 00:06:52.470
Yes we're going to add that file name in its path to the this dot files array.

95
00:06:52.860 --> 00:06:58.500
And so after collect files is all done running then at the very end we'll know that this dot files contains

96
00:06:58.590 --> 00:07:02.870
all the different file names that we need to eventually execute.

97
00:07:02.900 --> 00:07:07.850
It's now it's just a question of how we're going to implement collect files and iterate recursively

98
00:07:07.880 --> 00:07:10.220
through all these different folders.

99
00:07:10.340 --> 00:07:12.120
Let's definitely gonna be just a little bit of a challenge.

100
00:07:12.170 --> 00:07:14.840
Let's take a quick pause right here and come back in just a moment.
