1
00:00:00,200 --> 00:00:00,530
OK.

2
00:00:00,780 --> 00:00:02,690
So let's start with creating objects.

3
00:00:02,700 --> 00:00:04,800
How do we define a new object.

4
00:00:04,800 --> 00:00:08,800
The first thing you've probably already noticed is that we use curly braces.

5
00:00:09,030 --> 00:00:14,580
So instead of the square braces that we use for an array we use curly braces to signify an object.

6
00:00:14,760 --> 00:00:18,850
Technically this syntax here is known as an object literal.

7
00:00:18,900 --> 00:00:21,930
We'll learn other ways of creating objects later on in the course.

8
00:00:22,020 --> 00:00:24,290
But this is the only way we'll see for now.

9
00:00:24,300 --> 00:00:29,650
So if you hear objects literal if you see it online it's referring to this syntax right here.

10
00:00:29,670 --> 00:00:35,160
So this will make us an empty object with no properties in it no key value pairs probably not what we

11
00:00:35,160 --> 00:00:35,940
want.

12
00:00:35,940 --> 00:00:38,810
So let's turn this data I've put it in a comment.

13
00:00:38,880 --> 00:00:42,090
Turned into an object much like with arrays actually.

14
00:00:42,120 --> 00:00:48,710
Just like with arrays when you store an object in a variable it is a reference to that object.

15
00:00:48,870 --> 00:00:54,510
So we can use const and we can still change the information in an object as long as we don't reassign

16
00:00:54,510 --> 00:00:58,280
the variable to a completely different object or something else entirely.

17
00:00:58,290 --> 00:01:01,340
So people use const all the time with objects as well.

18
00:01:01,440 --> 00:01:08,970
So we'll call this Fitbit data and we simply associate a value and a key I should have said it the other

19
00:01:08,970 --> 00:01:10,830
way round key and a value.

20
00:01:10,830 --> 00:01:13,050
So first is the key.

21
00:01:13,050 --> 00:01:18,390
We'll talk more about what keys can look like what they shouldn't look like in just a moment but here's

22
00:01:18,390 --> 00:01:19,740
our first example.

23
00:01:19,740 --> 00:01:26,670
So we write the name that we want to store it under and then a colon and then afterwards the value and

24
00:01:26,670 --> 00:01:31,360
it could be anything we can have values like I said that are strings numbers billions.

25
00:01:31,560 --> 00:01:38,580
Even arrays and other objects which we'll get to later on we can put whatever we want as a value for

26
00:01:38,580 --> 00:01:39,960
now we'll just work with this.

27
00:01:39,990 --> 00:01:41,040
So we have a number.

28
00:01:41,280 --> 00:01:42,930
Three hundred and eight thousand.

29
00:01:42,930 --> 00:01:46,480
And we need to make sure we add a comma in after each property.

30
00:01:46,530 --> 00:01:47,430
So total steps.

31
00:01:47,460 --> 00:01:53,080
Colon some number and then comma and then we can begin with our next property.

32
00:01:53,160 --> 00:01:55,970
We'll talk a little bit more about commerce at the end of this video.

33
00:01:56,100 --> 00:02:02,450
Then we have total miles and total miles is two hundred and eleven point seven.

34
00:02:02,490 --> 00:02:05,700
We have average calorie burn and so on.

35
00:02:05,730 --> 00:02:08,710
So when we add them in we follow this pattern.

36
00:02:09,030 --> 00:02:10,640
The spacing here is not crucial.

37
00:02:10,710 --> 00:02:16,560
You'll see when I save I have a preference where it aligns to Collins a lot of people hate that it is

38
00:02:16,560 --> 00:02:18,020
not something that you have to do.

39
00:02:18,020 --> 00:02:23,580
It really depends on your preferences and also companies have their own style guides and we'll make

40
00:02:23,580 --> 00:02:24,740
a decision on this.

41
00:02:24,810 --> 00:02:27,240
But the main point is that the spacing doesn't matter.

42
00:02:27,390 --> 00:02:29,420
You just have to have that colon.

43
00:02:29,520 --> 00:02:33,210
So some key name then a colon and then some value.

44
00:02:34,380 --> 00:02:34,600
All right.

45
00:02:34,600 --> 00:02:42,150
So we have average calorie burn workouts this week which is a string five of seven and then average

46
00:02:42,150 --> 00:02:47,850
good sleep is also a string two hours and 13 minutes.

47
00:02:47,850 --> 00:02:48,110
OK.

48
00:02:48,150 --> 00:02:52,070
So we have three numeric values and two string values.

49
00:02:52,140 --> 00:02:58,950
If I save and run this code I'll refresh my page on the left let's look at Fitbit data.

50
00:02:59,400 --> 00:03:04,270
You can see I expanded just like an array and we have our key value pairs.

51
00:03:04,590 --> 00:03:10,370
If you look at the order my elements or my properties are displayed in it is different than what I wrote

52
00:03:10,370 --> 00:03:11,460
here.

53
00:03:11,730 --> 00:03:14,160
They are just alphabetized at this point.

54
00:03:14,190 --> 00:03:16,320
Remember that order is not the point.

55
00:03:16,350 --> 00:03:20,930
If an object we don't use an object to encode order we would use an array.

56
00:03:21,000 --> 00:03:22,680
So it shouldn't matter.

57
00:03:22,770 --> 00:03:23,000
OK.

58
00:03:23,040 --> 00:03:24,570
So our information is in there.

59
00:03:24,600 --> 00:03:27,020
We have different types of values.

60
00:03:27,060 --> 00:03:29,520
How do we get anything out of there.

61
00:03:29,520 --> 00:03:35,220
Well the first thing we'll see is that we can access information using the dot syntax.

62
00:03:35,220 --> 00:03:39,360
So we've already done this before we have a string dot length.

63
00:03:39,360 --> 00:03:41,640
This is the dot syntax.

64
00:03:41,640 --> 00:03:47,700
It is different than executing a method like a SD dot to uppercase.

65
00:03:47,700 --> 00:03:49,540
We use a dot and then parentheses.

66
00:03:49,650 --> 00:03:55,320
It's actually the same underlying concept but when we're accessing a property we just use dot so to

67
00:03:55,320 --> 00:03:58,850
access total miles out of Fitbit data.

68
00:03:58,920 --> 00:04:02,040
We could do Fitbit data dot total miles.

69
00:04:02,190 --> 00:04:05,040
And that gives us that piece of information.

70
00:04:05,070 --> 00:04:10,380
Now there is another syntax to access data out of an object using a key and we'll talk about it in the

71
00:04:10,380 --> 00:04:15,040
next video because there are some nuances to when you would use it and why you would use it.

72
00:04:15,090 --> 00:04:21,540
But for now the dot syntax works so we'll access a piece of information out using a dot let's do Fitbit

73
00:04:21,540 --> 00:04:24,790
data dot average calorie burn.

74
00:04:25,020 --> 00:04:30,780
We use the same dot Fitbit data dot something we've seen that we can use whatever we want as a value

75
00:04:31,050 --> 00:04:35,970
whether it's a number a string an array as I used this example.

76
00:04:35,970 --> 00:04:37,550
What about the keys.

77
00:04:37,620 --> 00:04:39,050
What are we doing here.

78
00:04:39,060 --> 00:04:44,130
This doesn't look like any sort of valid javascript primitive or a type.

79
00:04:44,130 --> 00:04:46,470
It's not a string or doesn't appear to be a string.

80
00:04:46,470 --> 00:04:47,280
It's not a number.

81
00:04:47,880 --> 00:04:54,060
Well when we create an object when we make a property the keys are automatically converted to strings.

82
00:04:54,240 --> 00:04:59,190
So that means if you try and use a number there's nothing wrong with it but it won't be stored as an

83
00:04:59,190 --> 00:04:59,950
actual number.

84
00:04:59,950 --> 00:05:01,800
It will be turned into a string.

85
00:05:01,840 --> 00:05:06,730
There is one exception to this something called a symbol which we haven't addressed yet.

86
00:05:07,010 --> 00:05:11,700
And they're not that common they use except in this one scenario with object keys.

87
00:05:11,830 --> 00:05:14,020
But we'll come back to that later.

88
00:05:14,050 --> 00:05:15,110
So let's play around with it.

89
00:05:15,160 --> 00:05:20,790
Let's say I wanted to add in the property forty.

90
00:05:21,260 --> 00:05:24,370
And set that equal to the word forty five.

91
00:05:24,370 --> 00:05:30,170
So let's refresh the page and run it and see what Fitbit data looks like.

92
00:05:30,190 --> 00:05:30,590
OK.

93
00:05:30,610 --> 00:05:34,300
It appears that our key 45 is in there.

94
00:05:34,300 --> 00:05:39,910
But if I try and access Fitbit data dot forty five it doesn't work.

95
00:05:40,120 --> 00:05:41,820
It tells me unexpected numbers.

96
00:05:42,610 --> 00:05:44,990
So it's stored it just fine.

97
00:05:45,160 --> 00:05:47,840
But behind the scenes it did turn it into a string.

98
00:05:48,160 --> 00:05:53,510
It might not appear as a string it might not display as a string but it is indeed a string.

99
00:05:53,590 --> 00:05:59,470
And in the next video we'll see another way of accessing properties of getting values out of an object

100
00:05:59,710 --> 00:06:01,440
where we don't use this dot.

101
00:06:01,630 --> 00:06:02,940
And we use something else.

102
00:06:02,950 --> 00:06:04,710
Let's quickly talk about commas.

103
00:06:04,720 --> 00:06:06,850
And when we need them versus when we don't.

104
00:06:06,850 --> 00:06:12,130
If we define an object with a single property in it we'll just call it data and my properties will be

105
00:06:12,130 --> 00:06:13,780
super boring just to make it short.

106
00:06:14,110 --> 00:06:18,910
We'll do a is one I don't have to have a comma if there's only one property.

107
00:06:18,910 --> 00:06:21,040
Javascript knows there's nothing after that.

108
00:06:21,040 --> 00:06:22,450
It doesn't get confused.

109
00:06:22,450 --> 00:06:26,340
So I can run this code refresh the page data works.

110
00:06:26,350 --> 00:06:26,780
Data.

111
00:06:26,800 --> 00:06:27,220
Data.

112
00:06:27,220 --> 00:06:28,780
Whatever you pronounce it as.

113
00:06:28,900 --> 00:06:31,480
But I also can put a comma there.

114
00:06:31,540 --> 00:06:37,360
My editor will remove it because I have it set to do that to remove unnecessary commas but if I came

115
00:06:37,360 --> 00:06:47,470
over here and did light stuff equals B is too with a comma it works just fine javascript knows that

116
00:06:47,470 --> 00:06:50,150
this comma means that property is done.

117
00:06:50,290 --> 00:06:53,080
It's hit the end of a property declaration.

118
00:06:53,080 --> 00:06:54,330
Now there's nothing afterwards.

119
00:06:54,370 --> 00:06:55,430
So it doesn't matter.

120
00:06:55,600 --> 00:06:59,130
But when we do have multiple properties those comments are a must.

121
00:06:59,140 --> 00:07:05,500
So if we have B is two I have to have this comma here in order to tell JavaScript or for JavaScript

122
00:07:05,500 --> 00:07:11,260
to know this property is over with because we could have a longer property right we could have one plus

123
00:07:11,260 --> 00:07:12,360
one.

124
00:07:12,550 --> 00:07:15,610
So there's more stuff that could happen as part of the value.

125
00:07:15,850 --> 00:07:19,220
As long as I put the comma there it knows we're moving on.

126
00:07:19,330 --> 00:07:24,900
So we'll go a one B to C three run it over here.

127
00:07:25,030 --> 00:07:26,050
It works great.

128
00:07:26,050 --> 00:07:29,290
You can put that trailing comma in it's totally up to you.

129
00:07:29,350 --> 00:07:34,960
Also you can put them on different lines as we've seen with longer objects and longer properties.

130
00:07:34,960 --> 00:07:36,440
I definitely like to split them up.

131
00:07:36,460 --> 00:07:39,440
But this object is so short it doesn't really matter.

132
00:07:39,590 --> 00:07:39,880
OK.

133
00:07:40,060 --> 00:07:41,040
So that's kind of it.

134
00:07:41,140 --> 00:07:43,330
You can put commas in if you want.

135
00:07:43,330 --> 00:07:49,450
At the very end the very last property that trailing comma is optional but every other comma separating

136
00:07:49,450 --> 00:07:54,100
the properties is not optional it has to be there in order for JavaScript to know what's going on.

137
00:07:54,250 --> 00:07:57,190
And then if you only have a single property you don't need that comma.
