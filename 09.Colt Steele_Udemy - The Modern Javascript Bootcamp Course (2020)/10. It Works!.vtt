WEBVTT
1
00:00:01.590 --> 00:00:04.370
Let's focus on adding some code to our start function now.

2
00:00:04.440 --> 00:00:08.970
We're going to make sure that whenever we run the start function we attempt to start up the users file

3
00:00:08.970 --> 00:00:11.280
that they provided with node number.

4
00:00:11.280 --> 00:00:15.690
The idea here is that the file name that the user provides is going to be a javascript file that they

5
00:00:15.690 --> 00:00:17.290
want to execute with no J.S..

6
00:00:17.820 --> 00:00:20.970
So let's figure out how to take that file name and start it up somehow.

7
00:00:22.000 --> 00:00:22.280
OK.

8
00:00:22.310 --> 00:00:24.450
So we get started I can go back over to the.

9
00:00:24.480 --> 00:00:27.520
No J.S. documentation on the left hand side.

10
00:00:27.530 --> 00:00:30.560
I'm going to scroll until I find child processes.

11
00:00:30.560 --> 00:00:36.690
Here it is right here the child processes module provides us with four different functions.

12
00:00:36.690 --> 00:00:40.980
Technically a couple more than four but we're really going to focus on only four that allow us to start

13
00:00:40.980 --> 00:00:43.880
up a second program from our node program.

14
00:00:44.810 --> 00:00:50.040
Before different functions we're going to take a look at our exact exact file fork and spawn.

15
00:00:50.180 --> 00:00:55.910
I want to tell you right away and very clearly that these four different functions are extremely similar

16
00:00:55.910 --> 00:00:56.920
in nature.

17
00:00:57.020 --> 00:01:03.690
They are all about allowing our no JSA program to start up some other program on a computer.

18
00:01:03.720 --> 00:01:09.300
There are only a couple of very small configuration details between these four different functions.

19
00:01:09.300 --> 00:01:14.000
We're going to mention them very briefly but they are kind of minor and kind of hard to understand.

20
00:01:14.040 --> 00:01:19.910
So it will be kind of a brief explanation of what the differences are between these four the first function

21
00:01:19.910 --> 00:01:24.410
that we're going to focus on and the one that we're going to use for our program is the spawn function

22
00:01:25.780 --> 00:01:32.440
so going to click on child process not spawn so we can take a look at how to actually use this function.

23
00:01:32.490 --> 00:01:38.340
Essentially we call spawn with some command to run on our computer command right here is essentially

24
00:01:38.340 --> 00:01:42.650
going to be the command or the program that we want to run.

25
00:01:42.690 --> 00:01:44.880
The second argument is optional.

26
00:01:44.880 --> 00:01:50.980
It can be an array of strings that are the arguments we want to provide to that program right away without

27
00:01:50.980 --> 00:01:52.650
thinking anything else about spawn.

28
00:01:52.660 --> 00:01:58.300
I want you to imagine right now how we actually execute a node program in general on our computer.

29
00:01:58.330 --> 00:02:04.360
Usually we do something like over to our terminal and then run node and then the file that we want to

30
00:02:04.360 --> 00:02:10.280
run so in this case node is the command that we are executing an index.

31
00:02:10.280 --> 00:02:17.400
J.S. is an argument to that command so if we want to make use of spawn to start up a program from inside

32
00:02:17.400 --> 00:02:24.510
of our code we're going to call spawn with a string of node and a array of strings that has one string

33
00:02:24.510 --> 00:02:27.800
inside of it and we'll be just the name of the file that we're trying to run.

34
00:02:28.050 --> 00:02:32.730
Presumably the name of the file that the user gave to us.

35
00:02:32.810 --> 00:02:35.080
There's one other thing you need to know about the spawn function.

36
00:02:35.080 --> 00:02:41.060
Before we tried to test it out the third argument is an options object and it is completely optional

37
00:02:42.020 --> 00:02:45.060
inside this options object if we decide to provide it.

38
00:02:45.230 --> 00:02:51.740
We can pass in a FTD Io or standard Io property.

39
00:02:51.940 --> 00:02:57.400
We can't click on options not standard to Io to see a little bit more so here's what's going on behind

40
00:02:57.400 --> 00:03:01.930
the scenes when we create a child process from our program.

41
00:03:01.930 --> 00:03:06.880
That child process might be emitting some logs like in other words it might have its own console log

42
00:03:06.880 --> 00:03:11.560
statements or errors being thrown or whatever else by default.

43
00:03:11.560 --> 00:03:16.510
When we use it respond to create a new process we don't really see any of that information coming back

44
00:03:16.510 --> 00:03:24.460
to us so we can choose to provide this esti d Io option when we call spawn and we can pass it a string

45
00:03:24.460 --> 00:03:27.460
of inherit if we pass in a string of Inherit.

46
00:03:27.460 --> 00:03:32.920
That essentially means if that child process emits any log statements once again a console log or an

47
00:03:32.960 --> 00:03:38.890
ear or whatever else take that information and pass it back to our program automatically and show it

48
00:03:39.130 --> 00:03:45.130
inside of our programs console logs in council ears okay.

49
00:03:45.200 --> 00:03:47.270
So let's try to call spawn.

50
00:03:47.270 --> 00:03:54.420
I can go back over to my editor at the very top I'm going to require in just this bond function.

51
00:03:54.450 --> 00:03:59.940
So notice I'm doing a little bit of destruction here and I'm gonna require that from child underscore

52
00:04:00.090 --> 00:04:02.290
process once again.

53
00:04:02.300 --> 00:04:04.210
Notice the kind of funny name of this library.

54
00:04:04.220 --> 00:04:07.820
They chose to put an underscore in there which is extremely uncommon.

55
00:04:07.820 --> 00:04:12.070
You're not going to see just about any other standard library modules with an underscore inside of it.

56
00:04:12.140 --> 00:04:19.250
It just happens that whoever wrote this module decided to name it and that way okay.

57
00:04:19.290 --> 00:04:26.950
So then down inside of our start function going to replace that console log with spawn the command we

58
00:04:26.950 --> 00:04:29.490
want to run is node.

59
00:04:29.590 --> 00:04:33.280
The only argument we want to provide is the name of the file that we want to execute.

60
00:04:33.330 --> 00:04:35.770
So that's gonna be the name we just got right there.

61
00:04:37.170 --> 00:04:40.780
So I'll provide an array with name inside of it.

62
00:04:42.010 --> 00:04:47.260
And then the third argument is S T D Io inherits again.

63
00:04:47.470 --> 00:04:52.780
That's gonna say that whenever we create this child process whatever logs errors or whatever else get

64
00:04:52.780 --> 00:04:59.050
emitted take that information and pass it through to our programs process excuse me our programs console

65
00:04:59.050 --> 00:05:01.180
log and errors and whatnot.

66
00:05:01.270 --> 00:05:04.240
I'm gonna give you a better explanation of that by the way in just a moment.

67
00:05:04.250 --> 00:05:06.510
So if that sounds kind of flaky it kind of is.

68
00:05:06.520 --> 00:05:10.900
I just want to tell you why we're putting in that option very quickly and I'll give you a better diagram

69
00:05:10.900 --> 00:05:13.680
to help you understand what it's really doing in just a moment.

70
00:05:14.710 --> 00:05:14.950
Okay.

71
00:05:14.990 --> 00:05:17.940
So now we need to actually test this out.

72
00:05:17.960 --> 00:05:18.790
Does that test this out.

73
00:05:18.790 --> 00:05:20.730
We need a kind of test file to run.

74
00:05:20.730 --> 00:05:25.550
Because remember this is all about running some other file so inside of my project I can create a new

75
00:05:25.550 --> 00:05:35.330
file called Test dot J.S. and inside of here I'm going to do a very simple console log of hi there well

76
00:05:35.390 --> 00:05:39.180
then save this and I'll go back over to my terminal.

77
00:05:39.200 --> 00:05:44.960
We're going to try to use our watch it command line tool to execute the test dot J.S. file.

78
00:05:44.960 --> 00:05:50.160
So if everything works the way we expect it should run this file one time and we should see accounts

79
00:05:50.180 --> 00:05:52.040
log of Hi there.

80
00:05:52.040 --> 00:05:58.190
If we then make any changes to this file or add anything inside this project directory our program should

81
00:05:58.250 --> 00:06:01.650
automatically re execute the test dot J.S. file.

82
00:06:01.640 --> 00:06:03.650
So let's give it a shot.

83
00:06:03.750 --> 00:06:10.510
I'm gonna go back over to my terminal and I'll run watch it test dot J.S. and then sure enough I see

84
00:06:10.540 --> 00:06:11.480
Hi there.

85
00:06:11.920 --> 00:06:14.830
And then notice that we are not being immediately kicked back to our terminal.

86
00:06:14.830 --> 00:06:20.530
That's because our program like the actual watch it program is now watching this directory for changes

87
00:06:20.530 --> 00:06:21.940
to any file.

88
00:06:21.940 --> 00:06:27.250
So if we change anything inside there the test not just files should be automatically executed a second

89
00:06:27.250 --> 00:06:28.330
time.

90
00:06:28.450 --> 00:06:30.350
Let's test that out.

91
00:06:30.520 --> 00:06:35.150
I'll go back to test J.S. and I'm gonna change the console log to say by there.

92
00:06:35.170 --> 00:06:42.830
So now in theory once I save this file joke it art is going to see that change and call starts and then

93
00:06:42.830 --> 00:06:45.550
inside of starts we're going to execute that file.

94
00:06:45.560 --> 00:06:48.740
Once again I'll go back to test.

95
00:06:48.810 --> 00:06:50.540
I'm gonna save it.

96
00:06:50.550 --> 00:06:56.140
I'll go back over to my terminal and sure enough I see by there appear awesome.

97
00:06:56.140 --> 00:06:57.780
So that is pretty much it.

98
00:06:57.780 --> 00:07:00.870
That is like proof of concept that we can get this thing working.

99
00:07:00.900 --> 00:07:04.620
There are still some odds and ends that we need to take care of in a couple different things I want

100
00:07:04.620 --> 00:07:05.350
to explain.

101
00:07:05.430 --> 00:07:10.800
But in general this is a proof of concept that we can get this program working correctly.

102
00:07:10.890 --> 00:07:11.990
Let's take a pause right here.

103
00:07:12.030 --> 00:07:16.710
Like I said a couple of different things I want to explain particularly around us four different functions

104
00:07:16.770 --> 00:07:22.800
inside the child process library and also around this standard Io stuff as well so quick pause and I'll

105
00:07:22.800 --> 00:07:24.000
see you in just a minute.
