WEBVTT
1
00:00:00.120 --> 00:00:14.660
All right.

2
00:00:15.170 --> 00:00:16.280
It's called hex.

3
00:00:16.280 --> 00:00:20.580
We could call it simply takes some RG b value.

4
00:00:20.610 --> 00:00:26.270
So three arguments you pass in SCO with two five five one hundred and twenty five.

5
00:00:26.700 --> 00:00:32.150
That will spit back to us a hexadecimal color that looks like that.

6
00:00:32.210 --> 00:00:36.140
So if I put this in my V.S. code you can see the color there.

7
00:00:36.590 --> 00:00:38.050
It's an orange color.

8
00:00:38.210 --> 00:00:45.380
And if I wrote the correct RG B string just so we can double check needs to be RG B and then two five

9
00:00:45.380 --> 00:00:47.800
five one hundred twenty five.

10
00:00:48.890 --> 00:00:53.000
It's the same color at least according to V.S. code.

11
00:00:53.000 --> 00:00:54.290
So we have this function.

12
00:00:54.350 --> 00:01:00.080
I could also write another function to take three numbers like we have here RG and B and actually return

13
00:01:00.260 --> 00:01:06.000
a valid RG B string for use in C Ss I could just call that function r GV.

14
00:01:06.200 --> 00:01:15.110
It accepts RG and B and then it returns a template literal where we have RG B and then dollar sign R

15
00:01:15.500 --> 00:01:20.910
comma $ dollar sign B comma dollar sign C.

16
00:01:21.380 --> 00:01:22.760
And that should be it.

17
00:01:22.880 --> 00:01:28.640
Let's make sure that works if I use the same values but I call RG b instead that's the name of our function

18
00:01:29.210 --> 00:01:32.850
which the V.S. code extension has actually already given me a preview of help.

19
00:01:32.960 --> 00:01:36.580
That should be G not sure where she came from.

20
00:01:36.580 --> 00:01:38.000
I tried running this all right.

21
00:01:38.000 --> 00:01:42.440
We get our string Okay so we have two different functions.

22
00:01:42.440 --> 00:01:48.320
They are perfectly fine on their own as is but if I wanted to make a nice little object where I can

23
00:01:48.320 --> 00:01:55.010
convert back and forth from RG B to hex without having to pass in numbers each time kind of what I showed

24
00:01:55.010 --> 00:02:01.910
you in the last video I could use a factory function which would make me an object that automatically

25
00:02:01.910 --> 00:02:10.790
had a hex method and an RG B method and it stored the RG and B values as values or properties on the

26
00:02:10.790 --> 00:02:18.680
object so we could just make a function function and give it a name like color make or make colour

27
00:02:21.500 --> 00:02:30.890
and we would pass in R G and B and then in here I could make a new object concert color equals an empty

28
00:02:30.890 --> 00:02:31.720
object.

29
00:02:31.850 --> 00:02:39.950
I'm going to add some stuff into that but at the end I'll return color so I could say color dot R equals

30
00:02:39.980 --> 00:02:45.620
R color dot G equals G color dot B equals B.

31
00:02:45.620 --> 00:02:51.740
Those are the values that were passed in so I would use this if I run the code by calling make color

32
00:02:52.070 --> 00:02:58.880
pass in some numbers like thirty five 255 255 and then I get back.

33
00:02:58.910 --> 00:03:04.780
This object are thirty five G 255 B 255.

34
00:03:04.800 --> 00:03:07.980
Now I could add in a method on this object.

35
00:03:07.980 --> 00:03:09.300
Colored dots.

36
00:03:09.300 --> 00:03:13.530
Let's go with our B equals a function.

37
00:03:13.530 --> 00:03:20.310
So I'm building up an object hence the term factory we pass in some values and this factory makes us

38
00:03:20.310 --> 00:03:23.480
an object and returns it at the end so that I can use it.

39
00:03:24.880 --> 00:03:34.470
Okay so color dot RG B equals and then I'll basically copy this but instead of RG B R B and G I just

40
00:03:34.470 --> 00:03:42.330
realize you're in the wrong order R G B but instead of doing this in hard coding it I'm going to use

41
00:03:42.330 --> 00:03:47.880
the keyword this which we also saw back in that secret life of object section.

42
00:03:47.880 --> 00:03:58.640
The keyword this in this context if I were to call first color const first color equals and then make

43
00:03:58.650 --> 00:04:09.920
color I pass in some numbers 3 5 2 5 5 and 150 if I call first color dot RG B in this method.

44
00:04:10.000 --> 00:04:15.570
Be right here the value of this will refer to this object to the left of the dot.

45
00:04:16.410 --> 00:04:21.030
So if I use this I can access this dot r this dot G.

46
00:04:21.030 --> 00:04:26.490
And if I just constant dot log this just to give you a refresher because that section was a while ago

47
00:04:27.510 --> 00:04:32.560
a comment that line out we're simply printing this instead of this method.

48
00:04:32.670 --> 00:04:41.180
So if I call make color some numbers 3 5 fifty one forty save that to a variable I'll call it C and

49
00:04:41.250 --> 00:04:51.290
I call C dot RG b you can see that this is set to this same color object to C so it has access to our

50
00:04:51.300 --> 00:04:53.920
G and B figure this.

51
00:04:54.060 --> 00:05:02.430
So what I would do is probably extract or D structure from this are G and B instead of having to create

52
00:05:02.430 --> 00:05:08.610
my string and access to this dot ah this dot G and this dot B it gets kind of annoying.

53
00:05:08.730 --> 00:05:14.440
So instead we can leave this as is and now D structure from this.

54
00:05:14.460 --> 00:05:15.350
Let's see if it works.

55
00:05:15.360 --> 00:05:25.740
I have this first color I'll access first color dot our B and I have an our GP string I could also add

56
00:05:25.740 --> 00:05:30.200
in a hex function like we saw earlier.

57
00:05:30.930 --> 00:05:33.600
So I'll just paste it in and then I'll adapt it.

58
00:05:34.740 --> 00:05:42.480
I'm going to write color dot hex equals a function no arguments necessary unlike here where I have to

59
00:05:42.480 --> 00:05:48.960
pass them in each time to the function by storing these methods on an object I'm calling it color here

60
00:05:49.080 --> 00:05:54.000
but I'm returning it at the end the name doesn't matter but because I store the methods on the object

61
00:05:54.270 --> 00:06:01.470
and that object also contains the RG and V properties I can access them just like I did here so I'm

62
00:06:01.470 --> 00:06:08.850
just going to repeat this line to extract R D structure our G and V from this just like in this function

63
00:06:08.850 --> 00:06:17.010
here this referred to this color object this entire object we've been adding on to as long as I'm calling

64
00:06:17.010 --> 00:06:25.710
it like first color dots are G.B. or dot hex just like we would call some array dots push right the

65
00:06:25.710 --> 00:06:31.080
dot is very important here we're not calling push and passing in the array we're not calling hex and

66
00:06:31.080 --> 00:06:37.950
passing in some numbers we're calling some color dot hex we don't provide arguments it looks on this

67
00:06:37.950 --> 00:06:44.460
object so I could have another color I could have purple dot our B purple dot hex.

68
00:06:44.850 --> 00:06:50.550
All right so this should work let's make sure the math doesn't matter whatsoever it's not the point

69
00:06:50.580 --> 00:06:54.600
I don't even want to take time to explain it honestly because I haven't even looked at how it works

70
00:06:54.900 --> 00:06:59.550
I know that it's going to convert to base sixteen at some point I think yeah it's doing that right here

71
00:06:59.760 --> 00:07:02.980
but really it does not matter to this video.

72
00:07:03.000 --> 00:07:08.880
All right so it returns that let's make sure it works I call first color dot hex.

73
00:07:08.880 --> 00:07:16.830
There we go first color dot our GDP and I could also change the r value or the G value at any point

74
00:07:16.830 --> 00:07:26.840
I could say dot R is now going to be 255 full R for red and now if I look at first color dot our G.B.

75
00:07:27.680 --> 00:07:34.910
it reflects that change so it may not be the most useful object on Earth but it can be nice because

76
00:07:34.910 --> 00:07:40.160
if you do have these colored values working with them converting them can suck and later on we'll add

77
00:07:40.160 --> 00:07:46.610
some more useful methods like a light and method or dark in saturation all those different things opposite

78
00:07:46.610 --> 00:07:47.860
color anyway.

79
00:07:47.870 --> 00:07:55.760
The focus here is on this function this function makes us an object it starts empty but then we add

80
00:07:55.760 --> 00:08:02.240
some properties based off of arguments that we were provided then we add some methods and then we return

81
00:08:02.240 --> 00:08:03.390
that object.

82
00:08:03.710 --> 00:08:06.750
This is called a factory function and it does work.

83
00:08:06.800 --> 00:08:11.690
This is one way of making objects based off of a pattern or a recipe.

84
00:08:11.700 --> 00:08:18.110
We've defined a recipe for a color we call make color if we pass in three numbers and we get back an

85
00:08:18.110 --> 00:08:21.280
object and that object contains a whole bunch of things.

86
00:08:21.290 --> 00:08:23.180
Well a whole bunch is an exaggeration.

87
00:08:23.180 --> 00:08:28.940
It contains three properties that are numbers and then two methods and I could make another color right.

88
00:08:28.970 --> 00:08:33.450
Make color where let's say it's 0 0 0.

89
00:08:33.530 --> 00:08:39.050
Same pattern different values I get different outcomes from the methods but the same pattern in general

90
00:08:39.250 --> 00:08:43.310
that this is actually not the main way most people create objects based off of a pattern.

91
00:08:43.310 --> 00:08:48.650
This is not how people like to do it and to understand why we're gonna have to talk about our friend

92
00:08:48.710 --> 00:08:52.570
prototype in the next video and we'll see a better approach.

93
00:08:52.640 --> 00:08:54.230
So there's nothing wrong with this.

94
00:08:54.290 --> 00:08:57.040
It's just not as ideal as it could be.

95
00:08:57.050 --> 00:08:58.390
So we'll see another option.

96
00:08:58.430 --> 00:08:59.300
Just hang in there.

97
00:08:59.450 --> 00:08:59.990
So that's coming up.
