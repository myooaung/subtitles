1
00:00:01,130 --> 00:00:01,400
All right.

2
00:00:01,400 --> 00:00:02,780
Time for option number three here.

3
00:00:02,930 --> 00:00:07,780
Interestingly option number three is kind of a combination of Option 1 and 2.

4
00:00:07,790 --> 00:00:12,630
We're going to use a promise to kind of organize our code but simultaneously we're going to wait or

5
00:00:12,630 --> 00:00:17,840
it can maintain a array of data and we're going to wait for every record inside that array to have some

6
00:00:17,840 --> 00:00:23,570
data inside of it before we try to process anything but that kind of array collection process.

7
00:00:23,570 --> 00:00:28,580
That was a very manual operation in option one right here is going to be done for us automatically with

8
00:00:28,580 --> 00:00:29,430
this promise.

9
00:00:29,480 --> 00:00:30,530
All helper method.

10
00:00:30,800 --> 00:00:38,030
Let's talk about what that thing is really quickly OK so start all is a method that is built into javascript.

11
00:00:38,040 --> 00:00:41,490
We're going to call it with an array of promise objects.

12
00:00:41,490 --> 00:00:45,810
So essentially each of these promised one two three and four right here are going to be our different

13
00:00:45,860 --> 00:00:47,050
l stack calls.

14
00:00:47,100 --> 00:00:55,350
So it will really be like l stats with a file name I'll start with a file name and so on each of these

15
00:00:55,350 --> 00:00:59,970
different promises are going to eventually resolve with some data that's gonna be our actual stats object

16
00:01:00,870 --> 00:01:06,270
what promised not all does is wait for all these promises to be resolved as I'm going to take the data

17
00:01:06,300 --> 00:01:12,240
from each of them throw all that data inside of an array and then give us that big array with all the

18
00:01:12,240 --> 00:01:13,350
data.

19
00:01:13,350 --> 00:01:18,150
So we make use of promised dot all anytime that we need to wait for many different operations to run

20
00:01:18,150 --> 00:01:19,040
in parallel.

21
00:01:19,200 --> 00:01:22,120
We want to wait for all them to resolve once they all resolve.

22
00:01:22,170 --> 00:01:26,950
We get our information one thing that's really important to note here is that when we are making use

23
00:01:26,950 --> 00:01:32,290
of promised all we only make use of the awake word on promised at all as opposed to each individual

24
00:01:32,350 --> 00:01:34,810
El Stat call.

25
00:01:34,880 --> 00:01:35,240
All right.

26
00:01:35,270 --> 00:01:40,790
Let's now go back over to our editor in start to code up this solution all right.

27
00:01:40,860 --> 00:01:43,110
I'm going to delete the or of loop that we have right here.

28
00:01:43,110 --> 00:01:45,270
We'll start more or less from scratch.

29
00:01:45,330 --> 00:01:50,240
I'm also gonna make sure that I have at least one of these El stack methods uncommitted so I'm gonna

30
00:01:50,250 --> 00:01:51,950
go with the third one right here.

31
00:01:52,080 --> 00:01:57,810
But it shouldn't make a difference as we saw in the last video which when we use so then inside my reader

32
00:01:57,810 --> 00:02:05,340
statement I'm going to map over my file names array for each file name we're going to call El stat and

33
00:02:05,340 --> 00:02:08,920
return the promise that gets created when we call it.

34
00:02:09,230 --> 00:02:18,070
I'll say stat promises is file names dot map for each file name.

35
00:02:18,300 --> 00:02:27,430
I'm going to return El stats with that given file name now stat promises is like this thing right here

36
00:02:27,430 --> 00:02:35,030
is a big array with the promises from each El stat called So now we can pass that array to promised

37
00:02:35,030 --> 00:02:35,950
at all.

38
00:02:36,020 --> 00:02:41,730
So I'll say a weight room is not all and I'll pass in that array

39
00:02:44,690 --> 00:02:48,240
so then promised not all is going to wait for all those different promises to resolve.

40
00:02:48,350 --> 00:02:52,590
And it's going to eventually spit out a new array with all of our data inside of it.

41
00:02:52,740 --> 00:02:56,040
So I will assign that to a variable called all stats like so

42
00:02:59,190 --> 00:03:02,130
now stats has all of our stat objects inside of it.

43
00:03:02,130 --> 00:03:04,790
We can once again iterate over it with a for loop.

44
00:03:04,920 --> 00:03:13,970
So I'll say for let stats of all stats we once again are in a kind of a funny scenario here where these

45
00:03:13,970 --> 00:03:18,800
stats object describes a file but it doesn't actually have a record of what that file name is.

46
00:03:18,800 --> 00:03:23,550
So we have to get the index of each stats object and then use that index to look up the appropriate

47
00:03:23,550 --> 00:03:34,600
file name inside the file names array as well let's say const index is all stats index of stats and

48
00:03:34,600 --> 00:03:39,650
then we can do our final console log of the file name and whether it or not it is a file it's all due

49
00:03:39,660 --> 00:03:46,660
console that log file names at index that's going to give us the appropriate file name and then stats

50
00:03:46,660 --> 00:03:51,850
dot is file.

51
00:03:51,950 --> 00:03:53,390
All right so that should be it.

52
00:03:53,400 --> 00:03:58,350
So now we are once again doing all these different Elston operations in parallel which means we should

53
00:03:58,350 --> 00:03:59,790
get way better performance.

54
00:03:59,880 --> 00:04:05,380
Any time that we tried to run the stats operation on many different files at the same time let's now

55
00:04:05,380 --> 00:04:13,150
save this thing to go back over to my terminal and run allez and hey everything still works and as usual

56
00:04:13,150 --> 00:04:17,440
I can run MLS multiple different times and I'm going to see the output occur in the exact same order

57
00:04:17,440 --> 00:04:18,740
every time as well.

58
00:04:20,080 --> 00:04:21,070
Okay so that's pretty much it.

59
00:04:21,070 --> 00:04:25,930
This right here is what we would call the good solution and in real life as a recording this video I'm

60
00:04:25,930 --> 00:04:28,810
doing like little quote marks with my fingers.

61
00:04:28,840 --> 00:04:32,140
The reason I'm saying that is that well the other solutions we had they worked.

62
00:04:32,140 --> 00:04:37,030
We could definitely have the solutions we could write that code but this is in theory the right way

63
00:04:37,030 --> 00:04:42,360
to do it because it doesn't have any of the downsides of the other approaches.

64
00:04:42,380 --> 00:04:44,180
All right so this is looking pretty good.

65
00:04:44,310 --> 00:04:50,510
But remember our original goal here of this entire application was to get all of our different file

66
00:04:50,510 --> 00:04:55,280
names that we are retrieving to print out with some different colors depending on whether or not they

67
00:04:55,280 --> 00:04:57,650
are a file or a folder.

68
00:04:57,650 --> 00:05:02,690
So right now we're just doing a console log right here saying whether or not it is a file but instead

69
00:05:02,720 --> 00:05:06,290
we want to do a console log with some different coloring of that text.

70
00:05:06,380 --> 00:05:08,010
So one last thing to figure out.

71
00:05:08,060 --> 00:05:09,500
Let's do that in just a moment.
