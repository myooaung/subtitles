1
00:00:00,210 --> 00:00:03,640
Next up we'll dive into our first for array methods.

2
00:00:03,650 --> 00:00:05,420
Now there are more to come as you can see here.

3
00:00:05,430 --> 00:00:08,190
But these first four are grouped together for a reason.

4
00:00:08,280 --> 00:00:14,040
They're really commonly used and they all have to do with either adding content or removing content

5
00:00:14,220 --> 00:00:15,950
or elements from an array.

6
00:00:16,050 --> 00:00:20,900
So adding to the end removing from the end removing from the start adding to the start.

7
00:00:21,000 --> 00:00:23,460
These are really common operations.

8
00:00:23,460 --> 00:00:29,310
Before we take a look at them if you go to the documentation on empty end for array under javascript

9
00:00:29,310 --> 00:00:36,390
reference array on the left hand side you can see that there is a really long list of methods just like

10
00:00:36,390 --> 00:00:39,960
with strings every array comes with a bunch of built in actions.

11
00:00:40,470 --> 00:00:44,670
And if you have questions about any of them you can click and read to learn more.

12
00:00:44,670 --> 00:00:47,380
So let's say we wanted to start with push.

13
00:00:47,460 --> 00:00:49,100
That's a good place to start.

14
00:00:49,110 --> 00:00:54,060
This tells us push method ads or the push method adds one or more elements to the end of an array.

15
00:00:54,790 --> 00:00:55,940
Okay.

16
00:00:56,190 --> 00:00:59,960
And you can see an example here we have some elements in an array.

17
00:01:00,030 --> 00:01:05,910
If we push the value cows now the array has cows at the end.

18
00:01:06,300 --> 00:01:08,320
So we're gonna play around with these four methods.

19
00:01:08,340 --> 00:01:09,530
Push pull.

20
00:01:09,690 --> 00:01:10,250
Oh my God.

21
00:01:10,320 --> 00:01:11,500
Push Pop.

22
00:01:11,640 --> 00:01:16,660
Shift and on shift the array we'll use is called top songs.

23
00:01:16,710 --> 00:01:19,080
It has four songs so far.

24
00:01:19,080 --> 00:01:22,080
Notice that I spread it out on two different lines.

25
00:01:22,140 --> 00:01:28,500
Totally valid and a much nicer choice when you have a lot of content or long lines.

26
00:01:28,500 --> 00:01:32,700
It's really hard to understand or to read if it's all in one supermassive line.

27
00:01:32,790 --> 00:01:34,350
So this works.

28
00:01:34,350 --> 00:01:36,720
And let's say I want to add something into the end.

29
00:01:36,720 --> 00:01:39,920
We saw how we could add to the end using that length.

30
00:01:40,080 --> 00:01:43,750
So top songs and then square brackets top songs out.

31
00:01:43,760 --> 00:01:45,480
I think that works.

32
00:01:45,480 --> 00:01:47,390
It's just kind of annoying.

33
00:01:47,580 --> 00:01:54,020
We can instead use push so top songs dot push is going to push a song or whatever we add in.

34
00:01:54,030 --> 00:01:55,270
It could be a number.

35
00:01:55,380 --> 00:01:57,740
It's going to push it to the very end of the array.

36
00:01:58,500 --> 00:02:03,050
So top song stop push and let's go with fortunate son

37
00:02:05,910 --> 00:02:06,600
okay.

38
00:02:06,860 --> 00:02:07,910
Refresh the page.

39
00:02:08,210 --> 00:02:10,060
And we now have top songs.

40
00:02:10,100 --> 00:02:12,020
We're fortunate son is at the end.

41
00:02:12,020 --> 00:02:13,420
We now have five items.

42
00:02:13,430 --> 00:02:14,420
We had four before.

43
00:02:14,450 --> 00:02:15,600
Now we have five.

44
00:02:15,740 --> 00:02:21,150
If we pushed again top song stop push this time I'll just push true.

45
00:02:21,430 --> 00:02:23,410
It doesn't make sense but I'll do it.

46
00:02:23,420 --> 00:02:25,490
Notice what it's returning to me.

47
00:02:25,490 --> 00:02:30,020
It's giving me a value back and that value is six.

48
00:02:30,110 --> 00:02:32,820
That value is the new length of the array.

49
00:02:32,960 --> 00:02:34,600
So it changes the array.

50
00:02:34,820 --> 00:02:36,200
If we look at top songs

51
00:02:39,260 --> 00:02:40,720
there is true at the end.

52
00:02:40,910 --> 00:02:43,460
But in the process it also returns to us.

53
00:02:43,460 --> 00:02:48,980
The new value will learn a lot more about return values and how we can return our own values and functions

54
00:02:48,980 --> 00:02:50,000
later on.

55
00:02:50,120 --> 00:02:55,550
But it's important to understand that that is what's happening here unlike with string methods where

56
00:02:55,730 --> 00:02:58,640
if we had a string we wanted to uppercase it.

57
00:02:58,640 --> 00:03:05,030
We weren't actually changing the original string as we've seen strings are not mutable they are immutable.

58
00:03:05,030 --> 00:03:13,140
So if we had let S T R equals hello and we call as TR dot to uppercase it returns the uppercase version

59
00:03:13,170 --> 00:03:17,110
and we have to capture it in a variable if we want the new version.

60
00:03:17,130 --> 00:03:21,430
The upper case version because string is still unchanged with an array.

61
00:03:21,510 --> 00:03:27,870
When you push you're actually changing you are mutating the array itself and so it returns something

62
00:03:27,870 --> 00:03:28,110
else.

63
00:03:28,110 --> 00:03:33,470
In this case it returns the number or the length for how many items are in there.

64
00:03:33,490 --> 00:03:36,530
Okay so that's pushing push goes onto the end.

65
00:03:36,570 --> 00:03:38,730
We also have Pop Pop.

66
00:03:38,790 --> 00:03:40,870
We'll take a value from the end.

67
00:03:40,870 --> 00:03:45,270
So when it clear my console here we have top songs.

68
00:03:45,540 --> 00:03:47,250
I put that true on the end.

69
00:03:47,250 --> 00:03:48,420
That seems stupid.

70
00:03:48,510 --> 00:03:49,510
So let's remove it.

71
00:03:49,530 --> 00:03:57,740
Top songs dot Pop Pop it's going to always remove the last item and it returns its value to you.

72
00:03:58,260 --> 00:03:59,910
So this is useful.

73
00:03:59,910 --> 00:04:07,410
The fact that it returns it to you if you were creating a list that was managing your to dos and you

74
00:04:07,410 --> 00:04:12,960
always wanted to get the last to do on that list in order to do something with it you could pop it off

75
00:04:13,290 --> 00:04:17,700
and then you would have that value returned to you so you could store it in a variable so I could do

76
00:04:17,700 --> 00:04:19,630
top songs dot pop.

77
00:04:19,650 --> 00:04:25,740
This is going to give me a song this time true is gone so it will give me fortunate son so we could

78
00:04:25,740 --> 00:04:36,380
go with concert next song equals top song stop pop and if we look at next song it has fortunate son.

79
00:04:36,380 --> 00:04:40,970
If we look at top songs it does not have fortunate son anymore.

80
00:04:41,060 --> 00:04:47,390
Now as far as popping it and calling it next song we would be playing through these songs backwards.

81
00:04:47,390 --> 00:04:52,700
If we are popping each time which is fine maybe we have the list reversed but you probably would be

82
00:04:52,700 --> 00:04:56,710
playing songs in the beginning but also when you pop something off it's gone.

83
00:04:57,230 --> 00:05:03,200
So it's more applicable to the first example I gave of a to do list where you pop something off you

84
00:05:03,200 --> 00:05:05,020
do it and you don't need it anymore.

85
00:05:05,030 --> 00:05:10,220
If this was actually a playlist we don't want to remove that song we don't want it to be gone from the

86
00:05:10,220 --> 00:05:12,800
list we just want to play it.

87
00:05:13,130 --> 00:05:16,810
So let's push and pop we can pop as many times as we want.

88
00:05:16,970 --> 00:05:24,240
Now if we keep popping and so I'll do top songs that pop over and over and over until we have nothing

89
00:05:24,240 --> 00:05:30,550
left it returns undefined and our array is just going to be completely empty.

90
00:05:30,750 --> 00:05:34,550
So push and pop I think are relatively easy to remember.

91
00:05:34,590 --> 00:05:40,500
You push your forcing something into the end you're pushing it in pop you're popping from the end and

92
00:05:40,530 --> 00:05:45,760
maybe it just makes sense to me but I have a much easier time remembering these to push and pop than

93
00:05:45,780 --> 00:05:46,140
I do.

94
00:05:46,140 --> 00:05:52,650
The next two we'll talk about shift and on shift I always mix them up even five six seven years later

95
00:05:52,980 --> 00:05:56,860
still drives me crazy but we're only focusing on pushing pop for now.

96
00:05:56,940 --> 00:06:03,690
Again push add something to the end you pass into value to be added and it will add to the end and return

97
00:06:03,690 --> 00:06:04,790
the new length.

98
00:06:04,860 --> 00:06:06,490
Pop does the opposite.

99
00:06:06,540 --> 00:06:10,000
You don't specify a value you just call it with empty parentheses.

100
00:06:10,110 --> 00:06:13,990
It does the same thing every time it takes the last item out of the array.

101
00:06:14,520 --> 00:06:18,360
It's not just getting you the value it is removing it and then returning it.
