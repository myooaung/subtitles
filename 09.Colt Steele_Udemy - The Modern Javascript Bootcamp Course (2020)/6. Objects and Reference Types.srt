1
00:00:00,270 --> 00:00:06,390
If you remember back towards the end of the erase section and how arrays are reference types the values

2
00:00:06,600 --> 00:00:09,120
in an array are not actually stored in a variable.

3
00:00:09,300 --> 00:00:12,370
The variable has limited space available to it.

4
00:00:12,480 --> 00:00:15,580
So it stores a reference sort of an address.

5
00:00:15,600 --> 00:00:21,420
Think of it as an arrow in that diagram I showed you an arrow to the actual array and objects work the

6
00:00:21,420 --> 00:00:22,200
exact same way.

7
00:00:22,470 --> 00:00:27,190
So if I have my object I'm calling palettes and I create this variable.

8
00:00:27,300 --> 00:00:30,640
Remember that palette is storing a reference to this object.

9
00:00:30,720 --> 00:00:36,900
If I made another variable called palette 2 and I said it equal to palette both of these variables are

10
00:00:36,900 --> 00:00:42,240
pointing to the same object in memory neither of them store the actual object itself.

11
00:00:42,240 --> 00:00:44,170
They are referencing this object.

12
00:00:44,310 --> 00:00:49,310
So if I change one of them let's do palette to dot.

13
00:00:49,320 --> 00:00:51,780
Let's add in green.

14
00:00:51,780 --> 00:00:57,030
I don't have a hexadecimal color code off the top of my head so I'm just kind of make one up here.

15
00:00:57,060 --> 00:01:01,130
E b f 8 7 6.

16
00:01:01,230 --> 00:01:03,790
It kind of vaguely green some more yellow.

17
00:01:04,170 --> 00:01:13,110
But anyway if I do that and I save I'll run my code you'll see that palette has been updated as has

18
00:01:13,110 --> 00:01:18,990
palette to they're referring to the same object the same thing in memory.

19
00:01:18,990 --> 00:01:20,670
So objects are reference types.

20
00:01:20,670 --> 00:01:22,110
That's really the main takeaway here.

21
00:01:22,110 --> 00:01:28,320
Just like arrays and because of that you'll often see people use const as we talked about with arrays

22
00:01:28,620 --> 00:01:33,750
we use const when we want the reference to stay the same like we always want to be pointing to this

23
00:01:33,810 --> 00:01:36,650
one object but the contents can come and go.

24
00:01:36,750 --> 00:01:43,140
We can change the values we can add properties we can empty it out as long as we don't reassign palette

25
00:01:43,140 --> 00:01:45,270
to something entirely different.

26
00:01:45,360 --> 00:01:47,050
In that case we would need to use the.

27
00:01:47,220 --> 00:01:52,830
But if we're simply keeping the same reference in changing the contents use const and most of the time

28
00:01:52,830 --> 00:01:59,430
that's what we end up doing so for arrays and objects we use const far more often than we do with numbers

29
00:01:59,430 --> 00:02:05,730
and strings and primitive types because we cannot change those if we have a concept and it's storing

30
00:02:05,790 --> 00:02:06,670
a number.

31
00:02:06,780 --> 00:02:13,230
It actually has space in that variable to store the entire value the entire number so we can't change

32
00:02:13,230 --> 00:02:15,140
that to be anything else.

33
00:02:15,300 --> 00:02:20,400
In the case of an object or an array a reference type all the variable stores is that reference so we

34
00:02:20,400 --> 00:02:23,670
can change what's inside that object or that array.

35
00:02:23,790 --> 00:02:25,440
We just don't change that reference.

36
00:02:25,590 --> 00:02:26,760
So that's pretty much it.

37
00:02:26,820 --> 00:02:30,030
Objects arrays both reference types we use const.
