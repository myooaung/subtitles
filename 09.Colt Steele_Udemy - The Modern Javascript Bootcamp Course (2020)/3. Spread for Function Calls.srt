1
00:00:00,270 --> 00:00:04,560
The next new feature we'll take a look at is called spread and the first thing you should know about

2
00:00:04,560 --> 00:00:08,300
spread is that like every other feature we're seeing in this section.

3
00:00:08,400 --> 00:00:11,010
It's not supported in Internet Explorer.

4
00:00:11,010 --> 00:00:12,970
However that shouldn't stop you from using it.

5
00:00:13,140 --> 00:00:20,250
So spread is extremely useful but it's also not that easy to explain because it does many things depending

6
00:00:20,250 --> 00:00:21,320
on the context.

7
00:00:21,330 --> 00:00:26,100
This is the official definition from MDA and I guess it's not official but this is the MDA and definition

8
00:00:26,460 --> 00:00:31,680
spreads syntax allows an era both such as an array to be expanded in places where zero or more arguments

9
00:00:31,890 --> 00:00:37,170
for function calls or elements for array laterals are expected or an object expression to be expanded

10
00:00:37,170 --> 00:00:40,950
in places where zero or more key value pairs for object laterals are expected.

11
00:00:40,950 --> 00:00:41,960
You got it.

12
00:00:42,030 --> 00:00:43,920
Okay so I think that's good enough right.

13
00:00:43,920 --> 00:00:45,330
You understand at this point.

14
00:00:45,420 --> 00:00:46,050
Yeah I know.

15
00:00:46,050 --> 00:00:47,230
Very funny called.

16
00:00:47,380 --> 00:00:48,600
There's a lot to spread.

17
00:00:48,690 --> 00:00:52,260
The key word that I bolded here is expanded.

18
00:00:52,260 --> 00:00:58,260
So in all scenarios there's really three use cases spread in a function call spread an array laterals

19
00:00:58,290 --> 00:01:00,420
and spread an object laterals.

20
00:01:00,420 --> 00:01:07,260
It all has to do with expanding some ignorable into some other places some destination.

21
00:01:07,260 --> 00:01:11,880
So the word spread is a nice choice I think because that's kind of what we're doing.

22
00:01:11,940 --> 00:01:13,860
We're spreading we're expanding something.

23
00:01:13,980 --> 00:01:19,650
But I'm going to do is break it up into three videos one for each of the use cases and the first one

24
00:01:19,650 --> 00:01:27,210
we'll see is spread in a function call so spread syntactically is always three dots here when we're

25
00:01:27,210 --> 00:01:27,640
using it.

26
00:01:27,660 --> 00:01:34,530
Function call here in an array literal three dots here and an object three dots always three dots but

27
00:01:34,530 --> 00:01:38,790
they means something different or they they behave differently depending on where you use it at the

28
00:01:38,790 --> 00:01:44,000
end of the day it all has to do with expanding and editable meaning an array a string.

29
00:01:44,040 --> 00:01:48,840
There are many other edibles but those are the two main ones we've worked with expanding them into some

30
00:01:48,840 --> 00:01:50,080
other destination.

31
00:01:50,280 --> 00:01:56,310
And when we use it in a function call inside the parentheses it will take that it trouble and break

32
00:01:56,310 --> 00:02:01,720
it up into individual arguments rather than passing in a single argument.

33
00:02:01,740 --> 00:02:07,740
So the example I used with Matt was math Max which accepts multiple arguments

34
00:02:11,410 --> 00:02:15,910
here's a bunch of arguments I just passed in and it returns the max.

35
00:02:16,000 --> 00:02:19,060
So in this case the maximum argument was ninety nine.

36
00:02:19,570 --> 00:02:25,810
There's also math dopamine which does the same thing except the other way around it tells me the smallest

37
00:02:25,810 --> 00:02:31,630
argument was three but this only works if you pass them in as separate arguments.

38
00:02:31,630 --> 00:02:37,020
If we have a list of numbers or an array of numbers it will not work.

39
00:02:37,120 --> 00:02:45,400
It treats it as one argument and if I do math dot max of numbers I get not a number.

40
00:02:45,400 --> 00:02:47,660
It expects each argument to be a number.

41
00:02:47,680 --> 00:02:52,730
This argument that we passed in is not a number it's a list of numbers but itself is not a number.

42
00:02:52,840 --> 00:02:54,790
So it does not work.

43
00:02:54,790 --> 00:03:00,920
Instead we can use spread so spread allows us to break this up into five separate arguments.

44
00:03:00,940 --> 00:03:05,080
It's the equivalent of passing in forty five comma thirty three.

45
00:03:05,080 --> 00:03:07,330
Basically stripping away the array brackets.

46
00:03:07,330 --> 00:03:09,490
So this is what it looks like.

47
00:03:09,550 --> 00:03:12,580
Dot dot dot numbers just like that.

48
00:03:12,970 --> 00:03:20,500
We are spreading this ignorable into individual arguments so again it's just like doing this forty five

49
00:03:20,800 --> 00:03:29,100
twenty three thirty four seven and five and we get forty five so to show you the other side of it.

50
00:03:29,110 --> 00:03:32,270
If you wanted to write a function let's call ours.

51
00:03:32,290 --> 00:03:40,450
Give me four and this is going to be a useless function but at once for argument's sake ABC and D.

52
00:03:40,600 --> 00:03:43,620
And then we'll just consider that log each one of them.

53
00:03:43,720 --> 00:03:51,280
I'll do it like this a comma a and then duplicate this a couple times and then update this to be B and

54
00:03:51,280 --> 00:03:54,250
then do the same thing for C and D.

55
00:03:54,250 --> 00:03:54,460
All right.

56
00:03:54,670 --> 00:03:57,490
So it's going to print out the arguments that we get.

57
00:03:57,490 --> 00:04:04,990
Give me four I'll pass in four numbers four five six and seven and we see a is for B is five C a six

58
00:04:05,020 --> 00:04:06,310
and D's seven.

59
00:04:06,370 --> 00:04:14,770
If I had an array of numbers or an array of anything let's go with const colors we'll have red orange

60
00:04:15,760 --> 00:04:26,790
yellow and green if I call Give me four and I pass in colors we're only passing in one argument.

61
00:04:26,980 --> 00:04:32,980
So you see what we get a is set to this whole array B is undefined C and D are also undefined.

62
00:04:33,610 --> 00:04:41,890
But if I instead use spread one two three dots we're now spreading that entire array into separate arguments.

63
00:04:41,890 --> 00:04:46,240
So now those array braces are essentially gone from the function call.

64
00:04:46,240 --> 00:04:51,150
We don't change the array in any way colors is exactly the same as it always was.

65
00:04:51,280 --> 00:04:58,050
But when we pass those values in they now are for arguments so a is red B is orange C is yellow India's

66
00:04:58,090 --> 00:05:02,610
green and if we had more arguments right now our function doesn't handle them.

67
00:05:02,620 --> 00:05:03,620
It only wants four.

68
00:05:03,760 --> 00:05:09,700
But if we had colors that had 10 things in there each one would be passed as an argument we just wouldn't

69
00:05:09,700 --> 00:05:11,470
be using it in the function.

70
00:05:11,470 --> 00:05:16,770
But shortly in this section we'll see how to write a function that accepts any number of arguments.

71
00:05:16,780 --> 00:05:19,430
Right now we're having to hard code how many we want.

72
00:05:19,510 --> 00:05:25,540
This is for if I want five arguments then I need to add in another parameter but we'll see how we can

73
00:05:25,540 --> 00:05:31,190
add an N number and collect all arguments in a single array or a single structure.

74
00:05:31,180 --> 00:05:32,460
That's coming up soon.

75
00:05:32,470 --> 00:05:36,590
The other thing about spread is that it's not only applicable to arrays.

76
00:05:36,760 --> 00:05:43,780
So we could also do something like this where we make some space here if I have a string concept we'll

77
00:05:43,810 --> 00:05:47,710
just call it SDR equals How about goats.

78
00:05:47,920 --> 00:05:53,290
Like that if I spread a string a string is actually an admirable.

79
00:05:53,440 --> 00:05:55,410
What do you expect to happen here if I call.

80
00:05:55,510 --> 00:06:00,350
Give me for dot dot dot as tr.

81
00:06:00,370 --> 00:06:03,770
It passes each character as its own argument.

82
00:06:03,940 --> 00:06:06,720
It iterate over this and it's ignorable.

83
00:06:06,730 --> 00:06:07,740
We've done it before.

84
00:06:07,780 --> 00:06:13,490
You iterate one character at a time and you end up with one character G being the first argument.

85
00:06:13,540 --> 00:06:18,010
Then the second and the third and the fourth you can think of it as just like this.

86
00:06:18,010 --> 00:06:22,210
Each value or each character is passed as its own argument.

87
00:06:22,210 --> 00:06:24,160
And we would get the same result if we did it this way.

88
00:06:24,160 --> 00:06:32,000
Give me four but the main difference is that this sucks to type and this is hardcoded if we use spread

89
00:06:32,330 --> 00:06:35,350
this could be 20 characters it could be two characters.

90
00:06:35,420 --> 00:06:37,640
It's not that common that you spread strings.

91
00:06:37,640 --> 00:06:40,160
At least in my experience compared to arrays.

92
00:06:40,160 --> 00:06:46,100
But whatever you're spreading when you spread it into a function call that editable is iterated over

93
00:06:46,550 --> 00:06:50,070
each element is passed as a standalone separate argument.

94
00:06:50,090 --> 00:06:52,160
So that's the first use case for spread.

95
00:06:52,160 --> 00:06:53,030
We have two more to go.
