WEBVTT
1
00:00:00.770 --> 00:00:04.920
Now that we've taken a look at the three different ways to determine the value of this we're going to

2
00:00:04.920 --> 00:00:07.380
use this knowledge to fix up our scenario.

3
00:00:07.440 --> 00:00:11.850
So we're going to make sure that the value of this inside the start function is always what we expect

4
00:00:11.850 --> 00:00:17.490
it to be the first way that we can solve this is by making sure that we define the start method with

5
00:00:17.490 --> 00:00:19.200
an arrow function.

6
00:00:19.200 --> 00:00:24.360
Right now the syntax you see right here behind the scenes this actually gets translated into a normal

7
00:00:24.390 --> 00:00:26.760
keyword function that looks like that right there.

8
00:00:26.760 --> 00:00:31.650
So this is what happens behind the scenes right now we are not making use of an arrow function to define

9
00:00:31.650 --> 00:00:32.500
start.

10
00:00:32.820 --> 00:00:39.120
If we wanted to use an arrow function right here we would put right after starts equals and then between

11
00:00:39.120 --> 00:00:44.690
the parentheses and the curly brace we would put in our arrow like so.

12
00:00:44.700 --> 00:00:48.760
So this is going to define an arrow function and assign it to start.

13
00:00:48.760 --> 00:00:53.220
So now we can use our rule back over here to determine what the value of this is going to be inside

14
00:00:53.220 --> 00:00:54.260
this function.

15
00:00:54.390 --> 00:00:56.790
But there's a little caveat.

16
00:00:56.820 --> 00:00:58.020
This rule does hold.

17
00:00:58.560 --> 00:01:03.570
But if we follow it to a T the first valid line above our arrow function.

18
00:01:03.570 --> 00:01:07.680
This is not a valid line to put right here we can't do a console log of this right here.

19
00:01:07.710 --> 00:01:11.460
That's why I said valid inside this diagram.

20
00:01:11.460 --> 00:01:13.320
So we cannot put a console log right here.

21
00:01:13.440 --> 00:01:22.960
Instead the first valid line above this arrow function would be outside of the class like up here.

22
00:01:22.970 --> 00:01:27.920
Now normally if we do a console log out here we're going to get a console log of window because we're

23
00:01:27.920 --> 00:01:30.330
essentially inside the global scope.

24
00:01:30.350 --> 00:01:33.320
So in this case it would seem like this rule falls apart.

25
00:01:33.350 --> 00:01:39.610
You would think that this rule does not actually hold but it does because there is a little trick when

26
00:01:39.610 --> 00:01:45.970
we write out code like this right here we are using an advanced feature of JavaScript called class properties

27
00:01:46.600 --> 00:01:47.470
behind the scenes.

28
00:01:47.470 --> 00:01:52.300
JavaScript is going to take this function declaration right here and it's going to move it out of the

29
00:01:52.300 --> 00:01:53.470
class.

30
00:01:53.470 --> 00:01:54.870
We can actually see this in action.

31
00:01:54.880 --> 00:02:01.090
If we take our class definition and run it through a tool you can find online called Babble battle takes.

32
00:02:01.150 --> 00:02:07.210
Very modern javascript syntax and converts it down to much more basic or simplistic javascript that

33
00:02:07.210 --> 00:02:10.570
can be ran or executed inside of older browsers.

34
00:02:10.570 --> 00:02:15.070
It turns out that of the syntax we're using right now relies upon newer features of javascript that

35
00:02:15.070 --> 00:02:20.290
are not supported in older browsers and so tools like babble just make sure that these very modern features

36
00:02:20.290 --> 00:02:24.450
that we're using can still be executed safely inside of an older browser.

37
00:02:24.460 --> 00:02:30.290
So going to take the code that we just wrote going to take this class right here I'm going to copy it

38
00:02:30.620 --> 00:02:32.940
and I'm going to throw it into this babble tool.

39
00:02:33.140 --> 00:02:37.940
So I'm gonna put my code on the left hand side and I'll see some output come on the right hand side.

40
00:02:37.970 --> 00:02:41.540
So this is what would actually be executed inside of an older browser.

41
00:02:41.660 --> 00:02:46.940
Or put another way this is how javascript kind of interprets our code at a more basic or simplistic

42
00:02:46.940 --> 00:02:49.520
level so take a look at this.

43
00:02:49.620 --> 00:02:54.300
When we define the start method using this class properties syntax because that's what we're using right

44
00:02:54.300 --> 00:02:59.550
here it turns out that we're not actually defining an era function inside of the class body.

45
00:02:59.580 --> 00:03:05.310
Instead the browser and this babble tool is going to massage the code that you wrote that's going to

46
00:03:05.310 --> 00:03:09.940
take that function declaration and move it in to the constructor.

47
00:03:09.990 --> 00:03:15.290
So this right here is the code that actually will be executed inside of a browser.

48
00:03:15.300 --> 00:03:18.470
So this is what is really truly going on behind the scenes.

49
00:03:18.510 --> 00:03:24.240
And once we see this you'll notice that our rule back over here still holds 100 percent.

50
00:03:24.240 --> 00:03:30.060
Take a look at the constructor inside the constructor we define an arrow function.

51
00:03:30.100 --> 00:03:34.620
So now we can't take this code right here and apply the original rule to it.

52
00:03:34.630 --> 00:03:38.790
I'm going to do a quick copy paste back over here just so I can edit it very easily.

53
00:03:38.830 --> 00:03:41.200
So this is what actually executes inside the browser.

54
00:03:41.230 --> 00:03:45.190
And so if you want to figure out what the value of this is going to be inside the arrow function we're

55
00:03:45.190 --> 00:03:49.740
going to go to the first valid line of code above the function declaration.

56
00:03:49.780 --> 00:03:54.970
So that would be right here and we would then do a console log of this and whatever comes out of this

57
00:03:54.970 --> 00:03:59.500
console log is what the value of this is going to be inside the arrow function.

58
00:03:59.500 --> 00:04:03.670
And so because we're in the constructor we are always guaranteed that the value of this is going to

59
00:04:03.670 --> 00:04:06.250
be equal to the instance of the class.

60
00:04:06.250 --> 00:04:12.100
And so the value of this inside the arrow function is going to be equal to the instance of the class

61
00:04:13.310 --> 00:04:18.230
so that's a secret behind solution number one that we have right here.

62
00:04:18.230 --> 00:04:23.030
If we use an arrow function this rollback over here still applies.

63
00:04:23.180 --> 00:04:26.760
And that's how we can fix the value of this inside the start function.

64
00:04:26.810 --> 00:04:32.760
Now just to prove that I'm going to go back down to the bottom of the file I'm going to delete all this

65
00:04:32.760 --> 00:04:39.470
extra test code that we put together down here and I'm going to delete the timer dot start line as well.

66
00:04:39.490 --> 00:04:45.850
That was just a quick demonstration and then going to save this I'm going to go back over to my browser

67
00:04:45.910 --> 00:04:49.780
I'm going to refresh the page and I'm going to click on the start button again.

68
00:04:49.780 --> 00:04:52.690
And now we can see that these start button works as expected.

69
00:04:52.720 --> 00:04:56.020
We were able to call a method defined on the class.

70
00:04:56.020 --> 00:05:02.600
We could also if we wanted to reference instance variables as well so again this is solution number

71
00:05:02.600 --> 00:05:08.220
one right here so in order to get the value of this inside the start method to what we wanted to be.

72
00:05:08.290 --> 00:05:11.130
We just used the first rule right here.

73
00:05:11.140 --> 00:05:17.290
Now let's take a look at how we would use method number two so if we want to do method number two we

74
00:05:17.290 --> 00:05:23.170
can call bind on our function which will override the value of this inside of it when it actually gets

75
00:05:23.170 --> 00:05:24.020
called.

76
00:05:24.130 --> 00:05:25.880
This method is a little bit more advanced.

77
00:05:25.900 --> 00:05:29.260
We are not going to use this method just about anywhere inside this course.

78
00:05:29.260 --> 00:05:33.970
I'm only mentioning this way of fixing the value of this because you will see older projects older code

79
00:05:34.030 --> 00:05:35.870
that uses this style.

80
00:05:35.920 --> 00:05:39.910
So with this approach we could refactor our start method back to how it was before.

81
00:05:39.970 --> 00:05:47.610
Like so and then we will find where we pass are this dot start function after the event listener and

82
00:05:47.610 --> 00:05:56.610
then on start I'm going to call dot bind this like so so when we call dot bind this unlike calling apply

83
00:05:56.640 --> 00:06:01.650
which invoke the function right away bind instead returns us a new function that we can call at some

84
00:06:01.650 --> 00:06:02.720
point in the future.

85
00:06:03.000 --> 00:06:07.650
So calling bind it doesn't run start right away we're still passing a function off to the event listener

86
00:06:07.860 --> 00:06:12.360
that's going to be executed at some point in the future when user actually clicks on the button but

87
00:06:12.420 --> 00:06:18.300
with BIND very so much call and apply we pass in the first argument to bind and that is going to be

88
00:06:18.300 --> 00:06:25.920
what the value of this is forced to be inside of the start function it's now the value of this inside

89
00:06:25.920 --> 00:06:31.020
the start function is going to be forced to the value of this out here inside the constructor which

90
00:06:31.020 --> 00:06:37.580
is always once again going to be equal to the instance of the class which is what we wanted to be it

91
00:06:37.600 --> 00:06:43.060
let's save this all do a quick test again I'll refresh hit start it once again I see important thing

92
00:06:43.060 --> 00:06:44.980
what's done okay.

93
00:06:45.020 --> 00:06:45.680
So that's it.

94
00:06:45.680 --> 00:06:50.420
Those are the two very easy and most common ways that you're going to see it to fix the value of this

95
00:06:50.450 --> 00:06:51.830
inside of a class.

96
00:06:51.920 --> 00:06:56.990
So again we're going to rely on the first solution right here because it is definitely the more modern

97
00:06:56.990 --> 00:07:01.700
way you know it's what you're going to see more frequently moving forward it's all defined the start

98
00:07:01.700 --> 00:07:08.360
function using the class properties syntax like so I'm also going to remove the DOT bind over here and

99
00:07:08.360 --> 00:07:14.770
restore it to just that finally I'm going to clean up the important method to call that was just a very

100
00:07:14.770 --> 00:07:15.670
quick demonstration

101
00:07:18.480 --> 00:07:18.760
OK.

102
00:07:18.790 --> 00:07:24.130
So again I apologize for these three videos of going over a topic that was covered earlier maybe this

103
00:07:24.130 --> 00:07:26.700
stuff was really challenging confusing all that kind of stuff.

104
00:07:26.740 --> 00:07:30.250
The reason I went over it was just to show you a more practical example than what you might have seen

105
00:07:30.280 --> 00:07:34.840
earlier inside the course and of course I'm showing it because this is going to be very critical to

106
00:07:34.840 --> 00:07:41.110
how we put together our timer class as well it's now that we've got this this stuff all under wraps.

107
00:07:41.110 --> 00:07:44.650
Quick pause right here we'll continue working on our timer class in just a moment.
