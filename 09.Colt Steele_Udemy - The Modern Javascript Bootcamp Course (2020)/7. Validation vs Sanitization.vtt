WEBVTT
1
00:00:01.180 --> 00:00:03.520
We just installed the Express validator package.

2
00:00:03.520 --> 00:00:08.080
Remember we're using this to do some validation of the different values that are given to us from our

3
00:00:08.080 --> 00:00:09.880
users in our different forms.

4
00:00:09.880 --> 00:00:15.040
Right now we're handling validation inside these very simple if statements doing validation inside of

5
00:00:15.130 --> 00:00:19.840
this kind of style right here is going to make getting these validation messages into our template a

6
00:00:19.840 --> 00:00:21.670
lot more challenging at the end of the day.

7
00:00:21.760 --> 00:00:23.540
And that's what we're really focused on right now.

8
00:00:23.560 --> 00:00:27.880
We want to make sure that we surface error messages to a user right inside of the form that they are

9
00:00:27.880 --> 00:00:28.530
trying to submit.

10
00:00:29.550 --> 00:00:33.540
So we just installed this library we just took a look at how to use it right here.

11
00:00:33.600 --> 00:00:38.190
Let's require this library into our project and then we will start using it with our different root

12
00:00:38.190 --> 00:00:46.400
handlers it's going to go back to my off dot J.S. file inside of my roots directory at the very top

13
00:00:46.460 --> 00:00:49.510
right after our Express require statements.

14
00:00:49.640 --> 00:00:59.410
I'm going to also require requiring const check from Express dash validated you'll notice that we have

15
00:00:59.410 --> 00:01:01.030
some curly braces right here.

16
00:01:01.090 --> 00:01:06.550
That is because we only care about the check function from the Express validator library.

17
00:01:06.550 --> 00:01:13.480
We could just as easily require this in as like express validator but then anytime that we would want

18
00:01:13.480 --> 00:01:17.290
to make use of that check function which is really the only thing that we care about right now we would

19
00:01:17.290 --> 00:01:21.930
have to say express elevator dot check all over the place.

20
00:01:22.000 --> 00:01:23.760
That would just start to be really annoying.

21
00:01:23.770 --> 00:01:30.960
So instead we just restructure off the one function that we care about now to make use of this library

22
00:01:31.200 --> 00:01:33.150
as we just saw inside the documentation.

23
00:01:33.240 --> 00:01:38.190
We're going to find a different host request handlers that are going to receive some data from a form.

24
00:01:38.400 --> 00:01:44.010
So the first one we have inside this file is a router not post slash sign up right here this request

25
00:01:44.010 --> 00:01:48.990
handler is going to receive an email a password and a password confirmation and we're going to want

26
00:01:48.990 --> 00:01:54.150
to do some validation of those inputs and then some somehow communicate any possible error messages

27
00:01:54.180 --> 00:01:59.820
that might come out of that into our form when we eventually render it somewhere down here.

28
00:01:59.820 --> 00:02:01.940
That's something we're going to add in in just a little bit.

29
00:02:03.840 --> 00:02:08.210
So like we just saw inside the documentation in order to do some automatic validation we're going to

30
00:02:08.210 --> 00:02:13.490
pass in an array as a second argument we're going to call the check function and each time we call the

31
00:02:13.490 --> 00:02:14.180
check function.

32
00:02:14.180 --> 00:02:18.140
We're going to pass in the name of the property that we want to validate.

33
00:02:18.230 --> 00:02:24.500
So we want to validate email password and password confirmation does the second argument I'm going to

34
00:02:24.500 --> 00:02:25.250
put in an array

35
00:02:28.320 --> 00:02:36.360
and then inside I'll call check with a string of email OK call check with a string of password and I'll

36
00:02:36.370 --> 00:02:42.070
call check with the string of password confirmation.

37
00:02:42.240 --> 00:02:46.440
Now in order to do some actual validation for each of these different properties we're going to chain

38
00:02:46.440 --> 00:02:49.870
on some additional method calls just like we see in this example.

39
00:02:49.890 --> 00:02:55.140
So for example if we want to make sure that the email actually is an email we'll chain on dot is email

40
00:02:56.430 --> 00:03:00.750
now before just throwing in some validation code I want to give you a better idea of how to actually

41
00:03:00.750 --> 00:03:05.520
read the documentation and understand how to actually do this validation stuff.

42
00:03:05.520 --> 00:03:10.620
So let's take a quick aside here take a look at the documentation in greater detail and help you understand

43
00:03:10.620 --> 00:03:17.510
exactly what this example right here is really trying to tell us so back at the Express validate or

44
00:03:17.510 --> 00:03:18.720
documentation.

45
00:03:18.800 --> 00:03:21.110
I'm going to take a look at the bottom left hand side.

46
00:03:21.170 --> 00:03:29.100
I got to find the API section and I'm going to click on a validation chain API on this other page.

47
00:03:29.130 --> 00:03:33.450
I'm going to then scroll down a little bit and find a yellow box right here that says very complete

48
00:03:33.450 --> 00:03:37.350
list of standard validators check out validator JSA stocks.

49
00:03:37.530 --> 00:03:44.400
And I'm gonna open up that link inside of a new page that's going to pull up a get hub document.

50
00:03:44.420 --> 00:03:50.100
So on this page we're gonna see a list of validators these are different functions that we can change

51
00:03:50.120 --> 00:03:56.360
on to this check function right here or each of these three check functions if we chain on any of these

52
00:03:56.360 --> 00:03:57.340
different functions right here.

53
00:03:57.350 --> 00:04:01.000
They're going to add in additional validation requirement.

54
00:04:01.040 --> 00:04:06.860
So for example we can add on or chain on a method call of say is ASCII.

55
00:04:06.860 --> 00:04:12.290
To make sure that the incoming string that the user provided has ASCII characters only or make sure

56
00:04:12.290 --> 00:04:18.380
that as a string that is Base64 encoded we can check to make sure that it is a boolean we can check

57
00:04:18.380 --> 00:04:25.330
to make sure that it is a decimal number we can check to see if it's an email which already saw we can

58
00:04:25.330 --> 00:04:30.580
see if it's a float that that is a number with a decimal and so on throughout this entire list you can

59
00:04:30.580 --> 00:04:35.790
see all the different ways that we can automatically validate some user input so that might sound kind

60
00:04:35.790 --> 00:04:38.280
of simple and straightforward to some degree.

61
00:04:38.370 --> 00:04:41.970
But I want to point out that there's something kind of interesting when you start to look at this documentation

62
00:04:42.780 --> 00:04:47.070
just a moment ago we were looking at the getting started guide and all the getting started guide over

63
00:04:47.070 --> 00:04:48.020
here it said Oh yeah.

64
00:04:48.030 --> 00:04:52.210
Call check username and a chain on dot is email.

65
00:04:52.560 --> 00:04:56.940
But if we look back over here you'll see that on this documentation page all these different functions

66
00:04:56.940 --> 00:05:01.280
say oh yeah you're going to call the function like is email.

67
00:05:01.530 --> 00:05:05.910
And the first argument to it is going to be the string that you want to validate.

68
00:05:05.910 --> 00:05:10.320
So an important thing to understand here is that the validator J.S. library that we're looking at right

69
00:05:10.320 --> 00:05:16.770
now is used internally by the Express validator package that we just installed.

70
00:05:16.890 --> 00:05:20.640
So we're really looking at two different libraries here.

71
00:05:20.640 --> 00:05:27.720
The goal of express validator is to expose all the functionality of validator J.S. in a very convenient

72
00:05:27.720 --> 00:05:34.660
way to make it very easy to work with from Express so when we look at the validator J S documentation

73
00:05:34.900 --> 00:05:37.570
we really have to do a little translation step.

74
00:05:37.570 --> 00:05:42.130
We're not going to use all these code snippets directly from validator J.S. in other words we're not

75
00:05:42.130 --> 00:05:45.310
going to call it like equals and passing the string as the first argument.

76
00:05:45.940 --> 00:05:52.900
Instead the Express validator library has wired all this stuff together in a really clever fashion so

77
00:05:52.900 --> 00:05:59.380
that if we call it check with email and then chain on like is email we're not going to put in the actual

78
00:05:59.440 --> 00:06:02.740
wrecked body dot e-mail right here instead.

79
00:06:02.740 --> 00:06:07.160
EXPRESS validator is going to very cleverly reach into the incoming request.

80
00:06:07.270 --> 00:06:12.850
Going to take a look at that body property and that's going to automatically throw that email as the

81
00:06:12.850 --> 00:06:16.420
first argument into that validation function for us.

82
00:06:17.240 --> 00:06:19.090
So the only thing I really want to communicate here.

83
00:06:19.100 --> 00:06:20.820
I know that probably sounds really confusing.

84
00:06:20.910 --> 00:06:26.870
Don't thing an invalid or communicate is that one library validator J.S. is contained inside the other

85
00:06:28.290 --> 00:06:32.270
and that means that the documentation that we're looking at inside validate or JSA and all these are

86
00:06:32.290 --> 00:06:37.880
validators the way that we actually make you use these functions is slightly different than the validator

87
00:06:37.920 --> 00:06:40.430
J.S. documentation shows us.

88
00:06:40.530 --> 00:06:43.760
We don't call it equals with the first argument of the string we want to validate.

89
00:06:43.830 --> 00:06:51.190
Instead we do what that express validator says which is to call check lists the property we want to

90
00:06:51.190 --> 00:06:58.290
validate and then do all these changed on methods that are going to actually call the underlying validation

91
00:06:58.290 --> 00:07:03.460
stuff for us I know that's nasty but it is what it is.

92
00:07:03.460 --> 00:07:03.760
Right.

93
00:07:03.760 --> 00:07:09.270
It is what it is I gets that step one to kind of understanding what is going on here next.

94
00:07:09.300 --> 00:07:13.600
Very quickly want to mention is that inside of the Express validator library.

95
00:07:13.620 --> 00:07:18.210
There's actually two different things that we're going to do to operate on all these different incoming

96
00:07:18.210 --> 00:07:19.500
values.

97
00:07:19.500 --> 00:07:24.780
We can do validation which is what we've been looking at so far a validation step is going to make sure

98
00:07:24.780 --> 00:07:29.640
that an incoming value that a user provided meets some given criteria.

99
00:07:29.640 --> 00:07:34.140
So it is an ASCII string it's a base64 string it's an email while a ball it kind of stuff.

100
00:07:34.140 --> 00:07:39.810
We are checking to make sure that the incoming value satisfies some criteria.

101
00:07:39.820 --> 00:07:44.280
The other thing that we can do with Express validator is sanitization.

102
00:07:44.530 --> 00:07:47.520
We can see a link to the documentation around sanitization down here.

103
00:07:47.530 --> 00:07:55.560
So sanitization chain API the goal of sanitization is to massage or change the incoming value that a

104
00:07:55.560 --> 00:07:57.310
user has provided.

105
00:07:57.390 --> 00:08:02.760
So we might want to do this if we ever expect that a user is going to give us some unreliable value.

106
00:08:02.760 --> 00:08:10.230
A really good example of sanitization is right here at the very top of the sanitization chain API so

107
00:08:10.230 --> 00:08:15.990
a very common sanitization step that we'll do is to trim the incoming value when we trim an incoming

108
00:08:15.990 --> 00:08:16.590
value.

109
00:08:16.590 --> 00:08:18.060
Well let me give you a quick example of that.

110
00:08:18.090 --> 00:08:24.900
If you go back over to our form sometimes a user totally accidentally might put on some leading spaces

111
00:08:24.960 --> 00:08:28.630
inside of an input and then put in their password.

112
00:08:28.650 --> 00:08:32.910
This is usually just about always a mistake on the user's behalf.

113
00:08:32.910 --> 00:08:39.390
We really assume as developers that a user does not intend to have any leading spaces or trailing spaces

114
00:08:43.770 --> 00:08:49.290
so when we trim an input that a user has provided we're going to automatically delete all the leading

115
00:08:49.290 --> 00:08:52.100
spaces and all the trailing spaces.

116
00:08:52.110 --> 00:08:56.570
And so essentially just reduce it down to password like so with no spaces on the end.

117
00:08:57.370 --> 00:09:03.060
So that is a example of a very common sanitization step that a lot of Web applications do automatically

118
00:09:04.170 --> 00:09:09.670
another type of sanitization that we might want to do is to standardize an incoming email we can take

119
00:09:09.670 --> 00:09:15.660
a look at some other sanitization options we can do by going back over to the validator J.S. documentation.

120
00:09:15.730 --> 00:09:18.880
So this is where we were just looking at all those different possible validators.

121
00:09:19.000 --> 00:09:22.870
If you already close this page you can go back to sanitization chain API.

122
00:09:22.870 --> 00:09:29.080
Scroll down a little bit and you'll see a link back to a validator J.S. stocks right there as well so

123
00:09:29.090 --> 00:09:37.160
on this page we can scroll past all the validators and find some the sanitizers inside of sanitizers.

124
00:09:37.190 --> 00:09:40.080
We'll see that we can escape some incoming text.

125
00:09:40.220 --> 00:09:44.790
This is to make sure that a user doesn't enter anything that looks like each team l essentially uses

126
00:09:44.810 --> 00:09:49.900
for handling some security issues that we're going to very much discuss in great detail later on.

127
00:09:49.900 --> 00:09:54.670
So we're not going to worry about escaping just yet this will also make sure that we can normalize an

128
00:09:54.700 --> 00:09:55.120
email.

129
00:09:55.120 --> 00:09:57.780
You could read some the options of what this actually does for us.

130
00:09:59.020 --> 00:10:04.300
We can also take a look at say make sure that this takes some string input and converts it to a date

131
00:10:04.360 --> 00:10:08.060
or to an integer or two.

132
00:10:08.110 --> 00:10:13.770
Whereas our trim there's trim so the trim is the function we just spoke about a moment ago.

133
00:10:13.810 --> 00:10:19.510
So again validation is to make sure that the user's input is about is conforming to some structure Sanitization

134
00:10:19.510 --> 00:10:23.710
is going to make an actual change to whatever the user gave to us.

135
00:10:23.720 --> 00:10:23.920
All right.

136
00:10:23.930 --> 00:10:25.310
So this has been a very long video.

137
00:10:25.340 --> 00:10:29.470
I apologize for that but a lot of stuff is just really important stuff to go through at least once.

138
00:10:29.480 --> 00:10:30.770
So let's take a quick pause right here.

139
00:10:30.830 --> 00:10:36.470
When we come back in the next section we're going to add on all the different sanitization and validation

140
00:10:36.470 --> 00:10:40.070
options we need to email password and password confirmation.
