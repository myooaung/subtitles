1
00:00:01,450 --> 00:00:06,130
Well we've now seen many different ways of taking a built in function or a callback based function and

2
00:00:06,130 --> 00:00:08,530
getting a premise based implementation of it.

3
00:00:08,530 --> 00:00:12,580
The reason I'm going to leave these other methods on here is that at the very end of this option.

4
00:00:12,760 --> 00:00:15,860
Option number two that we're currently working on this one right here.

5
00:00:15,940 --> 00:00:21,430
We're going to try to uncommon these other L step declarations and try to run our same code with those

6
00:00:21,430 --> 00:00:23,170
other alternate implementations as well.

7
00:00:23,180 --> 00:00:26,870
And you're gonna see if they all work 100 percent equivalently okay.

8
00:00:26,930 --> 00:00:30,830
So now inside of here we've got our reader function we get back our file names.

9
00:00:31,090 --> 00:00:36,320
So now once again we're going to iterate over our file names and for every file name we will run the

10
00:00:36,320 --> 00:00:37,190
L stats.

11
00:00:37,400 --> 00:00:41,870
We're going to use the async await syntax which means that we're going to be only running one L step

12
00:00:41,870 --> 00:00:43,670
function at a time.

13
00:00:43,760 --> 00:00:53,140
So inside of my reader function I'll say for let file name of file names well then run my L stat so

14
00:00:53,140 --> 00:01:01,980
I'll say const stats is a wait l stats on the file name I'm using the await keyword right here.

15
00:01:01,990 --> 00:01:06,630
Which means I need to find the wrapping function and apply the async keyword to it.

16
00:01:06,640 --> 00:01:10,020
So in this case the wrapping function is that right there.

17
00:01:10,090 --> 00:01:15,860
So I need to add on a async to the Arrow function.

18
00:01:15,910 --> 00:01:20,440
Now immediately after getting back our stats object we can right away do a quick console log for the

19
00:01:20,440 --> 00:01:28,720
given file name and whether or not it is a file we'll say counselled but log file name and stats dot

20
00:01:29,140 --> 00:01:35,540
is file and technically at this point we do not have the same kind of error handling code that we had

21
00:01:35,540 --> 00:01:38,390
previously with the callback based implementation.

22
00:01:38,440 --> 00:01:43,640
So to make this truly equivalent to the code we had just a moment ago I would wrap the await syntax

23
00:01:43,640 --> 00:01:49,370
right here or excuse me the awake keyword in the console log after it with a try catch statement remember

24
00:01:49,370 --> 00:01:54,800
a try catch statement is going to catch any errors that might arise while we are waiting on L stats

25
00:01:55,460 --> 00:02:01,980
I'm going to say try to wrap that with a set of curly braces and then immediately after the closing

26
00:02:01,980 --> 00:02:09,700
curly brace I'll say catch you are and then I'll do a console log of the air just to say hey something

27
00:02:09,700 --> 00:02:13,850
went wrong and here's the error okay.

28
00:02:13,860 --> 00:02:14,840
So that should be it.

29
00:02:14,850 --> 00:02:16,410
So let's now save this.

30
00:02:16,510 --> 00:02:20,450
I'm gonna go back over I'll do any less.

31
00:02:20,450 --> 00:02:21,050
And there we go.

32
00:02:21,050 --> 00:02:28,320
So I got empty folder false and I can run this many times and once again every single time I see the

33
00:02:28,320 --> 00:02:30,360
exact same ordering of output.

34
00:02:30,580 --> 00:02:33,150
So this definite looks like a pretty straightforward solution.

35
00:02:33,150 --> 00:02:38,930
Now if we kind of ignore the time that we took in the last video to discuss like all this promise stuff.

36
00:02:39,000 --> 00:02:44,580
Well the solution without a doubt is really really straightforward very easy to write pretty clear about

37
00:02:44,580 --> 00:02:45,470
what's going on.

38
00:02:45,600 --> 00:02:47,280
And well just wasn't that bad.

39
00:02:48,330 --> 00:02:53,760
Now let's try really quickly to comment out the other L stat implementations or uncommon them and make

40
00:02:53,760 --> 00:02:56,810
sure that our code still works with those alternate implementations as well.

41
00:02:56,820 --> 00:03:00,480
And again I just want to do this to show you that there's a lot of different ways we can take these

42
00:03:00,510 --> 00:03:05,500
annoying callback based functions and interact with them in a promise based format.

43
00:03:05,560 --> 00:03:12,900
So I to comment that the number three uncommon method Number two I'm gonna save this go back over do

44
00:03:12,930 --> 00:03:21,520
unless it still works I'll then comment out method Number two I'll go down to method number one and

45
00:03:21,560 --> 00:03:27,750
comment it save it and less and yep it still works as well.

46
00:03:27,980 --> 00:03:29,240
So overall.

47
00:03:29,450 --> 00:03:31,490
Couple different implementations here.

48
00:03:31,570 --> 00:03:37,070
I'd say it's pretty easy to read everything looks good but there is one really big issue with this with

49
00:03:37,070 --> 00:03:38,270
this implementation.

50
00:03:38,270 --> 00:03:39,860
Remember what I said just a moment ago.

51
00:03:39,890 --> 00:03:47,290
This solution works but it's not ideal it's not like in theory the right way of doing this stat operation.

52
00:03:47,330 --> 00:03:50,740
So what is wrong with this operation or what is wrong with this approach.

53
00:03:50,750 --> 00:03:55,280
The problem is as we saw in the diagram back here everything is running in serial.

54
00:03:55,280 --> 00:04:00,990
That means that we are only running one El stat operation at a time at any time.

55
00:04:01,070 --> 00:04:07,580
So imagine what would happen if it took us like say 500 milliseconds or half a second to El start each

56
00:04:07,580 --> 00:04:14,660
file and we had like a thousand files to go over or to run the stats function on that would end up taking

57
00:04:14,960 --> 00:04:16,370
500 seconds.

58
00:04:17,060 --> 00:04:23,420
So because we are only able to do one operation at a time we can only ever go as fast as it takes to

59
00:04:23,420 --> 00:04:31,010
go through like well everything in series so we don't get to enjoy the benefit of any performance enhancement

60
00:04:31,010 --> 00:04:33,890
from running multiple El stats in parallel.

61
00:04:33,950 --> 00:04:38,660
So even though this is a really easy solution to read and look at it's still not the best because potentially

62
00:04:38,960 --> 00:04:46,260
while this might be a very time intensive way of doing this El stat operation so that's going to lead

63
00:04:46,260 --> 00:04:47,760
us into our solution.

64
00:04:47,760 --> 00:04:52,470
Number three right here or option number three this is going to be very similar to option number two

65
00:04:53,130 --> 00:04:57,990
but instead of just using a promise in async await syntax we're also going to use something called the

66
00:04:57,990 --> 00:05:04,680
Promise dot all helper method that's going to allow us to process many different El stack calls in parallel

67
00:05:05,460 --> 00:05:09,070
so that's probably gonna end up being a way better from the performance standpoint.

68
00:05:09,120 --> 00:05:13,350
So let's take a pause right here we'll come back the next video and start to refactor towards this last

69
00:05:13,410 --> 00:05:13,920
approach.
