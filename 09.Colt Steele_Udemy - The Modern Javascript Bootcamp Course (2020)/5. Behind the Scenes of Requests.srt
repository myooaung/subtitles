1
00:00:00,770 --> 00:00:05,330
We just wrote out a pretty good amount of code and believe it or not there's actually a lot of functionality

2
00:00:05,330 --> 00:00:07,500
packed into every line here.

3
00:00:07,640 --> 00:00:11,540
So I want to take a look at a diagram that's going to help you get a better sense of what is really

4
00:00:11,540 --> 00:00:13,040
going on behind the scenes.

5
00:00:13,100 --> 00:00:14,200
So let's get to it.

6
00:00:14,980 --> 00:00:19,420
OK so we just typed in local host colon 3000 into our browser.

7
00:00:19,420 --> 00:00:23,860
When we did so our browser formulated a network request.

8
00:00:23,860 --> 00:00:27,940
The browser itself is not responsible for actually issuing that network request.

9
00:00:27,940 --> 00:00:34,330
Instead it hands the request off to your operating system in all the different network devices that

10
00:00:34,330 --> 00:00:39,590
are connected to your operating system the request that was issued has a couple of different properties

11
00:00:39,590 --> 00:00:40,880
tied to it.

12
00:00:40,880 --> 00:00:45,560
First off the browser takes the URL that you entered right there and splits it into a couple of different

13
00:00:45,560 --> 00:00:47,220
pieces.

14
00:00:47,230 --> 00:00:49,800
First off there's the host property inside there.

15
00:00:50,000 --> 00:00:55,660
The host property is essentially the domain that we are trying to access in our case it was local host

16
00:00:55,690 --> 00:01:02,660
but it could have just as easily been something like Google dot com or Airbnb Wycombe or whatever else.

17
00:01:02,750 --> 00:01:05,490
We also manually specified a port.

18
00:01:05,630 --> 00:01:08,530
That is what the colon three thousand indicates.

19
00:01:08,570 --> 00:01:12,680
We'll discuss what the port means in just a moment but for right now just understand that we manually

20
00:01:12,680 --> 00:01:18,410
specified a port of three thousand when you make a request or when you type into your address bar Google

21
00:01:18,410 --> 00:01:19,490
dot com.

22
00:01:19,490 --> 00:01:24,560
If you put a h TTP at the start of the URL the default port is 80.

23
00:01:24,650 --> 00:01:29,040
If you put an HDD P.S. the default port is 4 4 3 instead.

24
00:01:29,150 --> 00:01:34,310
So that is why when we make a normal request with the oil we normally don't have this colon number right

25
00:01:34,310 --> 00:01:41,580
here because usually there is a default value being used instead Next up is the path property we put

26
00:01:41,580 --> 00:01:49,080
in local host colon 3000 by itself everything after that colon 3000 is interpreted to be the path that

27
00:01:49,080 --> 00:01:51,400
we are trying to access on this remote server.

28
00:01:51,690 --> 00:01:55,590
If we put in nothing at all a default of forward slash is used.

29
00:01:55,890 --> 00:02:02,970
So in our case the path was forward slash and finally the request has a method as well.

30
00:02:03,140 --> 00:02:07,820
When you put an address into your address bar and hit enter the method other requests by default is

31
00:02:07,880 --> 00:02:10,340
get in all capitals.

32
00:02:10,340 --> 00:02:13,430
There are several other methods of requests available to us.

33
00:02:13,430 --> 00:02:16,610
The method of request indicates the intent of the request.

34
00:02:16,610 --> 00:02:21,290
In other words is this a request that is attempting to get some information or retrieve information

35
00:02:21,710 --> 00:02:27,240
is a request meant to create a record or delete a record or update a record all these different actions.

36
00:02:27,260 --> 00:02:29,650
Have a method associated with them.

37
00:02:29,900 --> 00:02:33,750
We'll discuss methods a good bit later on but right now just understand that the method other requests

38
00:02:33,860 --> 00:02:40,650
we just made was get this request is taken and handed off to our operating system the operating system

39
00:02:40,650 --> 00:02:46,590
is then in charge of accessing some network device that is connected to your computer and then sending

40
00:02:46,590 --> 00:02:48,690
the request out over the open Internet.

41
00:02:49,440 --> 00:02:54,590
I first want to consider the case in which we might be making a request to a host other than local host.

42
00:02:54,620 --> 00:02:57,200
So something like say Google dot com.

43
00:02:57,230 --> 00:03:03,380
So normally when you make a request to anything besides local host your operating system is going to

44
00:03:03,380 --> 00:03:11,360
reach out to something called a DNS server this DNS server is some outside server on the Internet publicly

45
00:03:11,360 --> 00:03:12,410
available.

46
00:03:12,410 --> 00:03:17,050
It essentially has a mapping between different host names in IP addresses.

47
00:03:17,240 --> 00:03:22,070
So if you make a request to Google dot com your operating system is going to make some initial request

48
00:03:22,100 --> 00:03:26,080
over to this DNS server and say hey I'm trying to access Google dot com.

49
00:03:26,090 --> 00:03:29,060
What is their IP address DNS server.

50
00:03:29,060 --> 00:03:33,880
Well then take the IP address for Google dot com and send it back to your machine.

51
00:03:35,520 --> 00:03:37,890
Your machine will then make a second request.

52
00:03:37,890 --> 00:03:41,760
This is the actual real request to that IP address.

53
00:03:41,760 --> 00:03:48,200
So in this case let's imagine was 1 9 4 4 8 while Bob was so your operating system would take that request

54
00:03:48,290 --> 00:03:51,500
send off to that web server and then eventually get a response back.

55
00:03:51,590 --> 00:03:53,510
Again that is the normal operation.

56
00:03:53,540 --> 00:03:56,090
If we had a host other than local host.

57
00:03:56,260 --> 00:03:56,900
But in this case.

58
00:03:56,900 --> 00:04:02,990
Well we do have closed your operating system treats requests with the host of local hosts slightly differently

59
00:04:03,620 --> 00:04:08,780
rather than reaching to some outside DNS server your operating system says Oh local host.

60
00:04:08,780 --> 00:04:10,080
That means me.

61
00:04:10,130 --> 00:04:16,470
And that's really what it means local host means the local computer so your operating system decides

62
00:04:16,470 --> 00:04:19,300
should not do anything with this outside DNS server.

63
00:04:19,350 --> 00:04:23,550
Instead it says I'm going to handle this request on my own because it's trying to access some server

64
00:04:23,790 --> 00:04:30,580
that I am hosting your operating system is then going to take a look at the port that is specified inside

65
00:04:30,580 --> 00:04:32,050
the request.

66
00:04:32,050 --> 00:04:39,070
So it turns out that your computer has a huge array about 65000 different ports available to access

67
00:04:39,790 --> 00:04:43,390
all these different ports are essentially little communication channels.

68
00:04:43,480 --> 00:04:48,630
So on your computer you can have many many different running web servers at any point in time.

69
00:04:48,880 --> 00:04:53,650
And each of these different ports can essentially take incoming requests and write them off to some

70
00:04:53,710 --> 00:05:00,030
other program so your operating system sees local host 3000 and it sees a port of three thousand so

71
00:05:00,030 --> 00:05:04,710
it says OK I'm going to handle this locally and I'm going to take this request and send it to whatever

72
00:05:04,710 --> 00:05:07,200
piece of software is running on port three thousand.

73
00:05:08,010 --> 00:05:14,500
So your operating system will take that request and send it off two or three thousand and that's where

74
00:05:14,500 --> 00:05:16,500
our Express server comes into play.

75
00:05:17,380 --> 00:05:23,120
Our express server is listening on port three thousand because we specifically configured it to do so.

76
00:05:23,380 --> 00:05:28,120
The Express server can listen on just about any other port that is open or available for access on your

77
00:05:28,120 --> 00:05:32,610
computer but usually as a development port like just total convention.

78
00:05:32,650 --> 00:05:36,350
No good reason whatsoever besides this is what everyone does.

79
00:05:36,370 --> 00:05:38,290
We use port three thousand.

80
00:05:38,290 --> 00:05:41,270
We could just as easily use port three thousand one or two or three.

81
00:05:41,290 --> 00:05:43,360
It really doesn't matter whatsoever.

82
00:05:43,360 --> 00:05:50,620
Again usually just convention to do 3000 because Express is listening on port three thousand when your

83
00:05:50,620 --> 00:05:53,530
operating system sends that request over.

84
00:05:53,650 --> 00:06:00,190
Express is going to see or receive that incoming request so we can then imagine that express receives

85
00:06:00,190 --> 00:06:05,590
that each to achieve your request and I've got inside the diagram right here by the time that the request

86
00:06:05,620 --> 00:06:06,670
gets into Express.

87
00:06:06,670 --> 00:06:13,600
Express doesn't really care about the hostname property so like the hostname over here or the port as

88
00:06:13,600 --> 00:06:14,560
well.

89
00:06:14,560 --> 00:06:19,720
Those pieces of information are available to express but we really just don't care about them whatsoever.

90
00:06:19,720 --> 00:06:24,730
The host and the port are really about just getting this request to the appropriate server and we've

91
00:06:24,730 --> 00:06:25,090
done that.

92
00:06:25,120 --> 00:06:30,630
So at that point time we don't really care about the host or the port from then on but express does

93
00:06:30,630 --> 00:06:36,180
care about is the path that we are trying to access and the method so inside of our code we saw that

94
00:06:36,180 --> 00:06:43,380
we wrote out some little bit or a little statement that said app not get or add slash the doc get right

95
00:06:43,380 --> 00:06:50,040
here means watch for incoming requests that have a method of get and the forward slash means watch for

96
00:06:50,040 --> 00:06:57,420
incoming requests that have a route or a path of simply forward slash when we called app to get we set

97
00:06:57,420 --> 00:07:03,090
up a root handler and that gets registered with something called a router the router is responsible

98
00:07:03,120 --> 00:07:08,970
for taking these incoming requests looking at the path and the method and then calling the appropriate

99
00:07:08,970 --> 00:07:14,520
callback function that we registered with the router so again when we called app dot get to set up our

100
00:07:14,520 --> 00:07:21,230
root handler we essentially registered a route with a router object so anytime there's this incoming

101
00:07:21,320 --> 00:07:26,870
request the router object is going to look at that request and says OK if this incoming request is a

102
00:07:26,870 --> 00:07:33,230
get request and has a path of forward slash I'm going to run this function in this case it is that callback

103
00:07:33,230 --> 00:07:39,160
function that we authored and passed in as the second argument we can also register multiple other root

104
00:07:39,160 --> 00:07:43,360
handlers with the router as well and each of these other ones could be watching for a request with a

105
00:07:43,360 --> 00:07:47,730
different path or a different method in every scenario.

106
00:07:47,740 --> 00:07:52,960
If the router sees an incoming request with that appropriate path and method it's going to create a

107
00:07:52,960 --> 00:07:58,920
request object of the request and hand it off to the callback function that we authored it is then up

108
00:07:58,920 --> 00:08:00,260
to our callback function.

109
00:08:00,300 --> 00:08:06,570
So that is this thing right there to take the incoming request and the outgoing response formulate some

110
00:08:06,570 --> 00:08:13,760
kind of response and decide what information we want to send and call dot sent to express then formulates

111
00:08:13,760 --> 00:08:17,720
a response and sends it back to whoever made the original request.

112
00:08:17,720 --> 00:08:26,290
In this case our browser this entire kind of scenario right here of express listening on a port this

113
00:08:26,290 --> 00:08:28,400
is not only what occurs on our local machine.

114
00:08:28,420 --> 00:08:34,030
This also occurs if we had expressed in some kind of production environment where we were serving request

115
00:08:34,030 --> 00:08:38,490
to some outside public users so this scenario right here.

116
00:08:38,520 --> 00:08:44,330
Again this is exactly what happens in a production environment just in this case and this diagram shows

117
00:08:44,330 --> 00:08:48,530
you can reflect how everything is working on your local computer okay.

118
00:08:48,550 --> 00:08:52,800
So that gives you a little bit more information about what is going on inside this file that explains

119
00:08:52,830 --> 00:08:53,950
what's going on with apt.

120
00:08:53,970 --> 00:08:55,710
Listen 3000 right there.

121
00:08:55,710 --> 00:09:00,510
That is us telling express to watch for incoming requests on port three thousand.

122
00:09:00,510 --> 00:09:06,660
Again it could have just as easily been say 30 50 or 30 51 or whatever else but usually by convention

123
00:09:06,750 --> 00:09:08,540
we use 3000.

124
00:09:08,710 --> 00:09:11,380
It also experiment explains this segment right here.

125
00:09:11,480 --> 00:09:18,530
We are registering a callback rate route handler so our router object that is inside of this app thing

126
00:09:19,650 --> 00:09:25,920
is going to watch for any incoming requests if it ever sees a request with a method of get and a route

127
00:09:25,980 --> 00:09:27,810
or a path of forward slash.

128
00:09:27,900 --> 00:09:33,450
It will then run our callback function right there all right now we've got a better idea of what's going

129
00:09:33,450 --> 00:09:34,330
on behind scenes.

130
00:09:34,350 --> 00:09:36,750
Another quick pause and continue in just a moment.
