WEBVTT
1
00:00:00.040 --> 00:00:01.350
To test our application,

2
00:00:01.350 --> 00:00:05.610
I've made it even easier by going out and just opening up

3
00:00:05.610 --> 00:00:09.270
Postman to do a post back against my server.

4
00:00:09.270 --> 00:00:12.000
I'm not even going through the user interface yet.

5
00:00:12.000 --> 00:00:17.250
So you can see inside of here, I've got a URL of localhost:8080/conference/user.

6
00:00:17.250 --> 00:00:23.110
And inside of there, I am putting in the params,

7
00:00:23.110 --> 00:00:26.740
firstname equals Bob, lastname equals Builder,

8
00:00:26.740 --> 00:00:33.040
age equals 44, and it does rewrite my URL to use those params.

9
00:00:33.040 --> 00:00:38.440
And when I click Send, it'll go through and send that to my server.

10
00:00:38.440 --> 00:00:44.180
Let's switch over to our IDE and see what the output was on our console.

11
00:00:44.180 --> 00:00:50.800
Opening up our logs, we can see that it executed that SQL like we expected it to,

12
00:00:50.800 --> 00:00:54.810
and it's got all the debug information associated with it.

13
00:00:54.810 --> 00:00:57.780
Let's verify what actually went out to our database.

14
00:00:57.780 --> 00:01:04.190
In my MySQL Workbench query window, if I just enter in select * from

15
00:01:04.190 --> 00:01:13.100
CONF_USERS and then run the query of the SQL underneath the cursor,

16
00:01:13.100 --> 00:01:15.800
you can see that it pulls up with Bob the Builder,

17
00:01:15.800 --> 00:01:17.650
and I've ran it a couple of times so I've got that

18
00:01:17.650 --> 00:01:19.540
entry in there more than once.

19
00:01:19.540 --> 00:01:23.070
If you get an error that there's no schema selected,

20
00:01:23.070 --> 00:01:26.640
you need to rightâ€‘click on your schema and say Set as

21
00:01:26.640 --> 00:01:29.640
Default Schema, and then you can run it.

22
00:01:29.640 --> 00:01:31.940
That catches me off guard from time to time.

23
00:01:31.940 --> 00:01:35.290
But we have actually wired up all of our application.

24
00:01:35.290 --> 00:01:38.440
Let's walk through all those pieces again.

25
00:01:38.440 --> 00:01:43.150
We had our Postman where we did a post against our URL, went with our

26
00:01:43.150 --> 00:01:47.540
firstname parameter, lastname, and age, clicked Send,

27
00:01:47.540 --> 00:01:51.940
which in turn goes to our controller.

28
00:01:51.940 --> 00:01:56.620
Our controller has a post mapping where we injected in

29
00:01:56.620 --> 00:01:58.830
the userService that we created,

30
00:01:58.830 --> 00:02:05.300
which was auto wired up above. The userService was annotated as a service

31
00:02:05.300 --> 00:02:14.600
and had auto wired into it the userRepository. And the userRepository had

32
00:02:14.600 --> 00:02:18.740
the PersistenceContext injected into it.

33
00:02:18.740 --> 00:02:23.730
We had to annotate our UserServiceImpl with Transactional

34
00:02:23.730 --> 00:02:26.310
for everything to be allowed to persist.

35
00:02:26.310 --> 00:02:29.150
So you always start your transactions at your service tier,

36
00:02:29.150 --> 00:02:31.490
and it carries through all your repositories.

37
00:02:31.490 --> 00:02:33.960
The reason for that is if we had two, three, four

38
00:02:33.960 --> 00:02:45.000
repositories injected into our service tier, that transaction could start and span across those multiple repositories.

