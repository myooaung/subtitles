1
00:00:00,040 --> 00:00:04,000
Up until now, everything we have been doing has just been simple inserts.

2
00:00:04,000 --> 00:00:07,420
We need to do a read in order to demonstrate the

3
00:00:07,420 --> 00:00:10,490
various fetch types. We will use JPQL,

4
00:00:10,490 --> 00:00:15,040
which is the Java persistence query language, to work with the data.

5
00:00:15,040 --> 00:00:19,360
I believe that JPQL syntax is the hardest part for

6
00:00:19,360 --> 00:00:21,940
people to learn because it's not SQL.

7
00:00:21,940 --> 00:00:26,060
So when dealing with JPA and the different persistence APIs, Hibernate

8
00:00:26,060 --> 00:00:29,410
and that, the hardest part seems to be understanding that I'm working

9
00:00:29,410 --> 00:00:32,840
with objects and not working with SQL.

10
00:00:32,840 --> 00:00:36,850
People often know what they want to do in SQL and are still trying to figure out

11
00:00:36,850 --> 00:00:43,640
how to do that in JPQL. So JPQL is centered around objects,

12
00:00:43,640 --> 00:00:48,640
and this is an example of a query using JPQL.

13
00:00:48,640 --> 00:00:53,520
That same query written in SQL would look like a select *

14
00:00:53,520 --> 00:00:57,560
from Registration. So it looks very similar. Except since

15
00:00:57,560 --> 00:00:58,910
we're dealing with the object,

16
00:00:58,910 --> 00:01:04,040
we say Select r, and you can use whatever variable name you want there.

17
00:01:04,040 --> 00:01:09,280
But it is selecting from the object. Registration is referring to

18
00:01:09,280 --> 00:01:11,960
the Java object, and it's spelled accordingly.

19
00:01:11,960 --> 00:01:15,350
If you don't have that uppercase R lowercase

20
00:01:15,350 --> 00:01:21,310
e‑g‑i‑s‑t‑r‑a‑t‑i‑o‑n, it will look for a differently named

21
00:01:21,310 --> 00:01:30,000
object. So it has to be tied to the objects were trying to query on. Let's add this to our application now.

