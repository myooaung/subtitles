1
00:00:00,000 --> 00:00:04,560
We've seen some of the basic Entity annotations so far in the previous modules,

2
00:00:04,560 --> 00:00:08,340
so let's describe in more detail what they mean exactly.

3
00:00:08,340 --> 00:00:11,560
An entity declares the object as an entity and how

4
00:00:11,560 --> 00:00:13,740
the database should be aware of it.

5
00:00:13,740 --> 00:00:17,270
Basically, it declares to JPA, hey, pay attention to me.

6
00:00:17,270 --> 00:00:19,740
I want you to know who I am.

7
00:00:19,740 --> 00:00:24,580
The Table annotation describes more specific details about the database,

8
00:00:24,580 --> 00:00:25,520
for example,

9
00:00:25,520 --> 00:00:30,470
the name or the schema or how we want to access that by uppercase or lowercase,

10
00:00:30,470 --> 00:00:32,400
things like that nature.

11
00:00:32,400 --> 00:00:38,640
The Id is the identifier attribute for a very simple primary key type.

12
00:00:38,640 --> 00:00:42,010
You can do an Id class for a compound primary key,

13
00:00:42,010 --> 00:00:46,640
but it's kind of out of the scope of what we're trying to cover in this module.

14
00:00:46,640 --> 00:00:48,740
Then there's GeneratedValue.

15
00:00:48,740 --> 00:00:52,400
A GeneratedValue is used in conjunction with Id.

16
00:00:52,400 --> 00:00:57,240
And there are four options for us to choose for GeneratedValue.

17
00:00:57,240 --> 00:00:59,290
There is IDENTITY,

18
00:00:59,290 --> 00:01:04,840
and IDENTITY is used to specify an identity column in the database.

19
00:01:04,840 --> 00:01:09,040
These can be a little problematic because the ID isn't available to return

20
00:01:09,040 --> 00:01:12,940
back to the user until after the transaction has committed.

21
00:01:12,940 --> 00:01:18,240
It can also be a little slower as they cannot preallocate IDs for inserts.

22
00:01:18,240 --> 00:01:21,840
The auto‑incrementing field in MySQL is an example of an identity

23
00:01:21,840 --> 00:01:26,010
column. Although they can be a little problematic as far as some of

24
00:01:26,010 --> 00:01:27,800
the features that you're looking for,

25
00:01:27,800 --> 00:01:32,130
they are simpler to use as far as just wiring your bean up and saying

26
00:01:32,130 --> 00:01:38,100
go. Let's just persist something now. The next option is AUTO, and

27
00:01:38,100 --> 00:01:41,340
AUTO defaults to IDENTITY if available.

28
00:01:41,340 --> 00:01:44,410
If there's auto‑incrementing fields on the database vendor,

29
00:01:44,410 --> 00:01:47,040
it will automatically choose that one.

30
00:01:47,040 --> 00:01:50,850
But it will fall over to whatever is available if that's

31
00:01:50,850 --> 00:01:53,370
not available in that implementation.

32
00:01:53,370 --> 00:01:57,340
Databases like Oracle don't have auto‑incrementing fields.

33
00:01:57,340 --> 00:01:58,610
You have to use a sequence,

34
00:01:58,610 --> 00:02:04,440
and so it's not going to default because that's not an option for Oracle.

35
00:02:04,440 --> 00:02:06,440
Speaking of sequence,

36
00:02:06,440 --> 00:02:09,850
one of the GeneratedValue choices is SEQUENCE, and SEQUENCE

37
00:02:09,850 --> 00:02:13,810
works with a sequence if that database supports it. Now

38
00:02:13,810 --> 00:02:18,050
MySQL doesn't support sequences, so this wouldn't be a valid option for that.

39
00:02:18,050 --> 00:02:21,770
But Oracle and Db2 or some of the other database vendors that are

40
00:02:21,770 --> 00:02:26,100
out there have sequences, and you just plug in the sequence using

41
00:02:26,100 --> 00:02:29,820
@SEQUENCE generator tag annotation, and that will tie to the

42
00:02:29,820 --> 00:02:32,540
underlying implementation.

43
00:02:32,540 --> 00:02:36,510
The most portable of the options is TABLE. TABLE will work

44
00:02:36,510 --> 00:02:39,540
with all implementations of the database.

45
00:02:39,540 --> 00:02:42,640
It's a little bit simple, but it works anywhere.

46
00:02:42,640 --> 00:02:53,000
It just uses an identity table and column to ensure uniqueness, and you also have to tie this in using the TABLE generator annotation.

