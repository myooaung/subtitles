WEBVTT
1
00:00:00.240 --> 00:00:03.570
I've gone ahead and closed all of the open files that we had so we

2
00:00:03.570 --> 00:00:06.640
can just focus on a couple of specific things here.

3
00:00:06.640 --> 00:00:12.240
I decided to incorporate two smaller examples into one here,

4
00:00:12.240 --> 00:00:14.600
thus demonstrating the fetch types,

5
00:00:14.600 --> 00:00:18.640
but also creating another RESTful service so you didn't have to write a

6
00:00:18.640 --> 00:00:23.340
bunch of JSP and HTML code to illustrate this demo.

7
00:00:23.340 --> 00:00:26.240
I'm going to start out by opening up Registration,

8
00:00:26.240 --> 00:00:28.150
and the first thing we're going to do is go down

9
00:00:28.150 --> 00:00:30.060
here and add a fetch type in here.

10
00:00:30.060 --> 00:00:36.340
So we'll say fetch and FetchType because there's an enum for this is LAZY.

11
00:00:36.340 --> 00:00:39.950
Now before we leave out of here though, I do want to add one other annotation.

12
00:00:39.950 --> 00:00:44.010
And this is just because we chose to do this as a RESTful service.

13
00:00:44.010 --> 00:00:46.950
I want to say @JsonManagedReference.

14
00:00:46.950 --> 00:00:51.350
And all this does, very simple, is it just says,

15
00:00:51.350 --> 00:00:53.970
hey, when you go to export this as JSON,

16
00:00:53.970 --> 00:00:57.760
don't cascade and keep trying to repopulate the whole tree.

17
00:00:57.760 --> 00:01:00.160
Grab it at one level and return.

18
00:01:00.160 --> 00:01:02.660
If that doesn't make any sense to you, don't worry about it.

19
00:01:02.660 --> 00:01:05.640
Just know that if you omit this, you will get an error.

20
00:01:05.640 --> 00:01:08.740
The next thing we need to do is open up Course,

21
00:01:08.740 --> 00:01:11.830
and on our many‑to‑one above that,

22
00:01:11.830 --> 00:01:18.540
we need to do an @JsonBackReference and save it.

23
00:01:18.540 --> 00:01:20.840
That's all we had to do to these objects.

24
00:01:20.840 --> 00:01:21.820
Easy enough.

25
00:01:21.820 --> 00:01:24.890
Now to create that RESTful service,

26
00:01:24.890 --> 00:01:27.530
I want to point out two things here because I don't want you to

27
00:01:27.530 --> 00:01:29.360
be caught off guard when you go to use this.

28
00:01:29.360 --> 00:01:33.180
We try to make these courses toward it's real world and real‑life scenario.

29
00:01:33.180 --> 00:01:37.790
If you open up our UserController,

30
00:01:37.790 --> 00:01:41.820
you'll notice that it's annotated at the top as a RestController.

31
00:01:41.820 --> 00:01:44.490
That means that every method you call inside of here

32
00:01:44.490 --> 00:01:47.640
returns the body as a response body.

33
00:01:47.640 --> 00:01:52.870
If you look at our RegistrationController, it's just a standard controller.

34
00:01:52.870 --> 00:01:54.430
It's not a big deal,

35
00:01:54.430 --> 00:01:59.840
but it doesn't annotate every return type as a response body.

36
00:01:59.840 --> 00:02:02.740
Now as we go to create this, it'll make more sense.

37
00:02:02.740 --> 00:02:05.290
I'm actually going to make this easier on myself and

38
00:02:05.290 --> 00:02:10.640
copy this method and paste it.

39
00:02:10.640 --> 00:02:15.230
Change this URL to registrations and getRegistrations.

40
00:02:15.230 --> 00:02:17.060
This is where it starts to change.

41
00:02:17.060 --> 00:02:20.220
I'm going to say @ResponseBody,

42
00:02:20.220 --> 00:02:30.540
and it's going to return a list of Registration objects.

43
00:02:30.540 --> 00:02:33.560
Then we can get rid of this ModelAttribute in here because

44
00:02:33.560 --> 00:02:37.650
we're not trying to return that anymore.

45
00:02:37.650 --> 00:02:42.940
And we'll return this line down.

46
00:02:42.940 --> 00:02:46.940
And the next thing we want to do is say List

47
00:02:46.940 --> 00:02:56.280
Registration registrations is equal to, and we haven't created this method yet,

48
00:02:56.280 --> 00:02:59.190
registrationService.findAll.

49
00:02:59.190 --> 00:03:04.730
And we'll get a red error for this.

50
00:03:04.730 --> 00:03:10.840
We'll change our return type to registrations.

51
00:03:10.840 --> 00:03:13.250
So that ResponseBody annotation just said,

52
00:03:13.250 --> 00:03:18.060
hey, whatever I return, I want you to turn that into JSON,

53
00:03:18.060 --> 00:03:21.140
and that's why we had to add that ResponseBody annotation is

54
00:03:21.140 --> 00:03:25.200
because this is a standard controller and add that Json reference

55
00:03:25.200 --> 00:03:29.540
and BackManage reference in our two objects.

56
00:03:29.540 --> 00:03:33.920
Now let's create this method inside of our registrationService.

57
00:03:33.920 --> 00:03:41.150
And if I hover over it and choose the quickfix of Create

58
00:03:41.150 --> 00:03:43.840
method findAll in the RegistrationService,

59
00:03:43.840 --> 00:03:45.840
I can save this.

60
00:03:45.840 --> 00:03:49.940
When I open up my RegistrationServiceImpl,

61
00:03:49.940 --> 00:03:55.110
it'll ask me if I want to create that entity there,

62
00:03:55.110 --> 00:03:58.140
and I'll say Yes.

63
00:03:58.140 --> 00:03:59.940
Click OK.

64
00:03:59.940 --> 00:04:02.860
And we're going to pass this right through to our repository.

65
00:04:02.860 --> 00:04:09.740
So we'll say return registrationRepository.findAll.

66
00:04:09.740 --> 00:04:12.840
And we haven't created this method yet either.

67
00:04:12.840 --> 00:04:15.550
Now why are we duplicating these methods?

68
00:04:15.550 --> 00:04:15.980
Well,

69
00:04:15.980 --> 00:04:19.050
because there may be some business logic that we want to incorporate in here.

70
00:04:19.050 --> 00:04:21.740
And again, that's where we would do this is in our service tier.

71
00:04:21.740 --> 00:04:27.070
That business logic may be things like pagination or sorting or a

72
00:04:27.070 --> 00:04:30.380
select number of rows that we return per user,

73
00:04:30.380 --> 00:04:32.110
or we implement some security.

74
00:04:32.110 --> 00:04:38.230
All of that stuff would happen inside of this method here in our service tier,

75
00:04:38.230 --> 00:04:40.040
not in our repository.

76
00:04:40.040 --> 00:04:42.140
So let's save this,

77
00:04:42.140 --> 00:04:45.970
and then we'll choose the quickfix on this error and do the same exact thing.

78
00:04:45.970 --> 00:04:51.600
We'll say Create method findall in that RegistrationRepository.

79
00:04:51.600 --> 00:04:56.030
So we'll save this, open up our RegistrationRepository,

80
00:04:56.030 --> 00:05:04.540
and this is where we're going to go through and create that query using JPQL.

81
00:05:04.540 --> 00:05:09.440
So we'll say Implement methods, OK,

82
00:05:09.440 --> 00:05:13.950
and this, we'll leave it returning null for a second.

83
00:05:13.950 --> 00:05:31.040
We'll say List Registration registrations = entityManager.createQuery.

84
00:05:31.040 --> 00:05:49.540
And inside of here, we'll say Select r from Registration r .getResultList.

85
00:05:49.540 --> 00:05:52.160
And don't forget our semicolon on the end there.

86
00:05:52.160 --> 00:05:53.290
Now again,

87
00:05:53.290 --> 00:05:56.350
I can't stress enough that that Select r from

88
00:05:56.350 --> 00:05:58.840
Registration is referring to the object.

89
00:05:58.840 --> 00:06:02.880
And that's why it has to be spelled out exactly like our class name,

90
00:06:02.880 --> 00:06:04.010
Registration.

91
00:06:04.010 --> 00:06:06.740
Those two are exactly the same.

92
00:06:06.740 --> 00:06:07.970
So there's our select statement.

93
00:06:07.970 --> 00:06:15.450
We'll change this return to return registrations, and our code is actually done.

94
00:06:15.450 --> 00:06:19.190
We're going to go through and grab this. Now why is this a unique example?

95
00:06:19.190 --> 00:06:20.110
Well, a couple of things.

96
00:06:20.110 --> 00:06:24.240
One, we're going to use a RESTful service to do the get on it.

97
00:06:24.240 --> 00:06:27.440
It's currently going to do this lazy.

98
00:06:27.440 --> 00:06:34.050
It is also going to show how you cascade a list inside of an object

99
00:06:34.050 --> 00:06:36.760
through a RESTful service because that's an error that catches a lot

100
00:06:36.760 --> 00:06:39.750
of people off guard. And we're using JPQL.

101
00:06:39.750 --> 00:06:42.700
We've got all of that rolled up into one example here.

102
00:06:42.700 --> 00:06:48.670
So let's start our server, and then I'm going to switch

103
00:06:48.670 --> 00:06:52.160
over to Postman. And I've gone ahead and deleted our entire

104
00:06:52.160 --> 00:06:54.440
history that I had in Postman.

105
00:06:54.440 --> 00:06:58.320
I'm going to create a new request here. And for the URL, I'm going

106
00:06:58.320 --> 00:07:13.450
to do localhost:8080/conference/registrations and click the Send

107
00:07:13.450 --> 00:07:20.730
link. And you can see it returned our object for us, and the parent

108
00:07:20.730 --> 00:07:26.740
object is our registration, and inside of that is our course.

109
00:07:26.740 --> 00:07:28.110
And it displayed all of that.

110
00:07:28.110 --> 00:07:30.930
So that was all done going out to our query.

111
00:07:30.930 --> 00:07:41.150
If we switch back to our IDE, we can see the SQL that was ran here,

112
00:07:41.150 --> 00:07:42.630
and it looks like it was around more than once.

113
00:07:42.630 --> 00:07:43.450
It actually wasn't.

114
00:07:43.450 --> 00:07:48.060
It's because we have the debug statements turned up to show all that.

115
00:07:48.060 --> 00:07:50.560
But you can see where it grabs our registration.

116
00:07:50.560 --> 00:07:54.050
And then, as we call or cascade through our object,

117
00:07:54.050 --> 00:07:59.260
it calls the lazy load to also display the courses when we see that.

118
00:07:59.260 --> 00:08:02.340
If you want to mess around with that some more,

119
00:08:02.340 --> 00:08:09.440
you can go into your registration object and change this to eager

120
00:08:09.440 --> 00:08:12.210
and run it again to see that it's pulled the very first time it

121
00:08:12.210 --> 00:08:15.780
comes back from the database. So you can put some log statements in

122
00:08:15.780 --> 00:08:17.380
and walk through all of that,

123
00:08:17.380 --> 00:08:21.100
but you can see the difference between lazy and eager. And

124
00:08:21.100 --> 00:08:28.000
we grabbed all of that using a RESTful service call that just went out and did a get.

