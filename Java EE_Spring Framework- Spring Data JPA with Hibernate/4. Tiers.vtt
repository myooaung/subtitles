WEBVTT
1
00:00:00.140 --> 00:00:03.790
You'll often hear people talk about applications in terms of a

2
00:00:03.790 --> 00:00:07.640
tiered or an n tier architecture or layers.

3
00:00:07.640 --> 00:00:12.070
We try to build our applications and tiers more now in enterprise languages,

4
00:00:12.070 --> 00:00:14.340
and there are great reasons to do so.

5
00:00:14.340 --> 00:00:17.340
A few of these are separation of concerns.

6
00:00:17.340 --> 00:00:20.050
This just means that each layer is only concerned with

7
00:00:20.050 --> 00:00:22.840
the task that it's assigned to do.

8
00:00:22.840 --> 00:00:26.990
Our presentation layer is only going to have presentation type things in it,

9
00:00:26.990 --> 00:00:30.390
and our business logic is going to be contained in a layer,

10
00:00:30.390 --> 00:00:35.940
and data access is going to also be contained in its own separate layer.

11
00:00:35.940 --> 00:00:38.930
Now there's another term called reusable layers that sounds

12
00:00:38.930 --> 00:00:43.200
very similar to separation of concerns, and in some ways it is,

13
00:00:43.200 --> 00:00:45.540
but its focus is different.

14
00:00:45.540 --> 00:00:48.900
If I have business logic in my presentation tier,

15
00:00:48.900 --> 00:00:53.390
I can't easily change my presentation tier or expose a web service,

16
00:00:53.390 --> 00:00:54.180
for example,

17
00:00:54.180 --> 00:00:59.720
without recreating some of that logic if I have extracted it into its own

18
00:00:59.720 --> 00:01:03.240
appropriate tier that I'm not duplicating that logic.

19
00:01:03.240 --> 00:01:07.050
If you ever notice yourself copying and pasting code in your application,

20
00:01:07.050 --> 00:01:11.840
it's probably not architected in the correct manner.

21
00:01:11.840 --> 00:01:12.290
Now,

22
00:01:12.290 --> 00:01:14.600
that's a little bit of a difference between the

23
00:01:14.600 --> 00:01:17.110
separation of concerns and the reusable layer.

24
00:01:17.110 --> 00:01:19.480
Separation of concerns is not about reuse,

25
00:01:19.480 --> 00:01:22.250
it's just about having things in the right layer so that I can

26
00:01:22.250 --> 00:01:25.860
rearchitect them later where reusable layers means that I have a

27
00:01:25.860 --> 00:01:28.740
purpose and a point that I'm trying to drive.

28
00:01:28.740 --> 00:01:33.370
I can expose the same data in multiple ways without having to worry about it,

29
00:01:33.370 --> 00:01:36.450
or I can replace my presentation tier without having to

30
00:01:36.450 --> 00:01:39.440
rearchitect my entire application.

31
00:01:39.440 --> 00:01:44.350
And another term is maintenance, or refactoring might be a better way to put it.

32
00:01:44.350 --> 00:01:46.790
That's the ability to change things without having those

33
00:01:46.790 --> 00:01:49.640
changes ripple through all of our code.

34
00:01:49.640 --> 00:01:50.880
For example,

35
00:01:50.880 --> 00:01:53.900
if I have Hibernate in my application and I have to change something

36
00:01:53.900 --> 00:01:57.740
in my UI based off of a change I made in Hibernate,

37
00:01:57.740 --> 00:02:01.040
then it probably isn't architected correctly.

38
00:02:01.040 --> 00:02:05.690
If done correctly, we can change our code and not have to retest everything,

39
00:02:05.690 --> 00:02:08.240
but rather just the pieces that we changed.

40
00:02:08.240 --> 00:02:11.440
This leads into a much larger discussion about unit testing,

41
00:02:11.440 --> 00:02:14.040
but that's outside the focus of this course.

42
00:02:14.040 --> 00:02:18.750
Since we're talking about layers or tiers of a Spring MVC application, and

43
00:02:18.750 --> 00:02:21.410
this is important because of how we annotate our components,

44
00:02:21.410 --> 00:02:24.240
which we're going to actually talk about here next,

45
00:02:24.240 --> 00:02:28.260
let's first talk about the data model that we would access using

46
00:02:28.260 --> 00:02:32.280
something like Hibernate or JDBC or Spring JDBC,

47
00:02:32.280 --> 00:02:36.840
and this layer represents the data or model of our application.

48
00:02:36.840 --> 00:02:37.360
Next,

49
00:02:37.360 --> 00:02:41.810
we have a controller that interprets the user's requests and selects

50
00:02:41.810 --> 00:02:45.330
the appropriate view based off of what we've requested or what

51
00:02:45.330 --> 00:02:48.240
information we got back from our data model.

52
00:02:48.240 --> 00:02:52.470
And then we have our view. For our case, we're going to be using

53
00:02:52.470 --> 00:02:56.900
for our model just simple JSPs, but we could also use FreeMarker,

54
00:02:56.900 --> 00:03:03.960
Velocity or Web Services to just simply return data back from our

55
00:03:03.960 --> 00:03:05.940
requesting controller.

56
00:03:05.940 --> 00:03:06.220
Now,

57
00:03:06.220 --> 00:03:09.470
one thing that's often misunderstood by people is that Spring MVC

58
00:03:09.470 --> 00:03:13.370
has nothing to do with regards to our database,

59
00:03:13.370 --> 00:03:17.040
but it has a model associated with it.

60
00:03:17.040 --> 00:03:20.690
So, is this model talking about our database or the model talking about

61
00:03:20.690 --> 00:03:25.040
what the framework is going to represent to our JSP page?

62
00:03:25.040 --> 00:03:28.360
It's actually referring to the view, what we're going to

63
00:03:28.360 --> 00:03:31.210
represent to our JSP or our web service,

64
00:03:31.210 --> 00:03:34.010
but we always have to get that information for somewhere.

65
00:03:34.010 --> 00:03:39.000
So, that's where our various components come in and what we're going to talk about next.

