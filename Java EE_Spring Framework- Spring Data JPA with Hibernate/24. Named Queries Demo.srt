1
00:00:00,040 --> 00:00:02,680
To convert our object over to using a named query,

2
00:00:02,680 --> 00:00:05,960
let's start by creating a couple of static final strings

3
00:00:05,960 --> 00:00:08,740
inside of our registration object.

4
00:00:08,740 --> 00:00:12,170
So at the top of the class, but below the class designation,

5
00:00:12,170 --> 00:00:19,090
we'll say public static final String,

6
00:00:19,090 --> 00:00:29,790
and we'll call this first one REGISTRATION_REPORT and

7
00:00:29,790 --> 00:00:38,240
set that equal to registrationReport.

8
00:00:38,240 --> 00:00:41,580
And the name of this actually doesn't matter, but it does have to be unique.

9
00:00:41,580 --> 00:00:44,560
You can't use registrationReport for another named query.

10
00:00:44,560 --> 00:00:47,240
It's tied to this specific one.

11
00:00:47,240 --> 00:00:50,290
And then the second string you want to do is the

12
00:00:50,290 --> 00:00:52,780
actual JPQL that we're going to create.

13
00:00:52,780 --> 00:01:00,740
So we'll say public static final String,

14
00:01:00,740 --> 00:01:13,040
and we'll call this one REGISTRATION_REPORT_JPQL.

15
00:01:13,040 --> 00:01:15,840
We'll set that equal to a string.

16
00:01:15,840 --> 00:01:18,140
We're going to go grab that right now.

17
00:01:18,140 --> 00:01:23,900
So let's grab that code from our RegistrationRepositoryImpl

18
00:01:23,900 --> 00:01:29,830
and scroll to the bottom, and we're going to cut this JPQL

19
00:01:29,830 --> 00:01:35,240
out of here. So we'll grab that.

20
00:01:35,240 --> 00:01:37,990
I'm going to switch back to my registration object quick so I don't

21
00:01:37,990 --> 00:01:43,850
lose that out of my buffer and paste that in here and get rid of

22
00:01:43,850 --> 00:01:51,190
that jpql string. And just so it's more readable, I'm going to bring

23
00:01:51,190 --> 00:01:55,040
this down to the next line.

24
00:01:55,040 --> 00:01:59,370
So we've got our string inside of here and moved that out of

25
00:01:59,370 --> 00:02:02,840
our object that was in our repository.

26
00:02:02,840 --> 00:02:06,340
We're going to fix that here in a second because it's broken right now.

27
00:02:06,340 --> 00:02:06,930
But first,

28
00:02:06,930 --> 00:02:09,900
let's create our named query. So we'll add an annotation up at the

29
00:02:09,900 --> 00:02:15,440
top here that's NamedQueries, the plural version.

30
00:02:15,440 --> 00:02:20,780
And we want to add a curly brace inside of there because we do

31
00:02:20,780 --> 00:02:26,000
an array of these. We'll then have @NamedQuery. And inside the

32
00:02:26,000 --> 00:02:27,350
NamedQuery, there's two parameters.

33
00:02:27,350 --> 00:02:30,100
There's name, and the name is going to be

34
00:02:30,100 --> 00:02:39,620
Registration.REGISTRATION_REPORT. And the query is going

35
00:02:39,620 --> 00:02:45,140
to be Registration.REGISTRATION_REPORT_JPQL.

36
00:02:45,140 --> 00:02:46,940
We can save that.

37
00:02:46,940 --> 00:02:51,440
So we've got our named query created inside of here.

38
00:02:51,440 --> 00:02:53,820
We have the NamedQueries array.

39
00:02:53,820 --> 00:02:55,090
If you have more than one,

40
00:02:55,090 --> 00:02:58,970
you just commaâ€‘separate these and do another @NamedQuery annotation.

41
00:02:58,970 --> 00:03:00,780
We have our name,

42
00:03:00,780 --> 00:03:05,340
which is REGISTRATION_REPORT and then the actual JPQL inside of here.

43
00:03:05,340 --> 00:03:10,140
Now switching back over to our repository,

44
00:03:10,140 --> 00:03:18,320
we go inside of here and just create a named query and change the name

45
00:03:18,320 --> 00:03:27,760
equal to Registration.REGISTRATION_REPORT and save that. Bring it down to

46
00:03:27,760 --> 00:03:31,140
another line so you guys can see it better.

47
00:03:31,140 --> 00:03:35,540
That's what we had to do to switch this over to a named query.

48
00:03:35,540 --> 00:03:37,020
It is compiled.

49
00:03:37,020 --> 00:03:42,010
It's checked and validated at the time of us creating our object so we

50
00:03:42,010 --> 00:03:46,870
can actually find errors earlier than if we just try and run it and

51
00:03:46,870 --> 00:03:52,540
have it fail. Let's fire up our server.

52
00:03:52,540 --> 00:03:58,940
And once this starts up, I'll switch over to Postman.

53
00:03:58,940 --> 00:04:02,960
And now I can just rerun the same query that we had

54
00:04:02,960 --> 00:04:07,040
before for registration reports,

55
00:04:07,040 --> 00:04:11,440
and it switched over to a named query. Really easy to do.

56
00:04:11,440 --> 00:04:14,460
At first glance, it may not seem like it's buying you a whole bunch,

57
00:04:14,460 --> 00:04:19,900
except all of these can now be passed around through static

58
00:04:19,900 --> 00:04:23,640
names rather than us making them up on the fly.

59
00:04:23,640 --> 00:04:27,950
And it keeps everything contained in our domain object. That's beneficial for

60
00:04:27,950 --> 00:04:33,030
one reason that I'm going to show you here. Inside our domain object, I can

61
00:04:33,030 --> 00:04:35,120
see the fields that we're doing our query on.

62
00:04:35,120 --> 00:04:36,650
So looking at this,

63
00:04:36,650 --> 00:04:40,960
I know that I have registration.name, I have registration courses, and

64
00:04:40,960 --> 00:04:45,600
I can walk through and tie that to the actual fields inside the

65
00:04:45,600 --> 00:04:48,640
object. So it takes a little getting used to.

66
00:04:48,640 --> 00:04:50,270
As I mentioned at the beginning of this,

67
00:04:50,270 --> 00:04:59,000
JPQL is working with objects, not working with SQL. And so you have to think of this in terms of the object graph.

