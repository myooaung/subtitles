1
00:00:00,240 --> 00:00:02,630
Opening our user object back up,

2
00:00:02,630 --> 00:00:07,510
I'll go ahead and give ourselves some space between our Long id and our

3
00:00:07,510 --> 00:00:14,040
String firstname and specify @Column from javax.persistence,

4
00:00:14,040 --> 00:00:21,940
and we'll give this a name = FIRST_NAME.

5
00:00:21,940 --> 00:00:23,680
And we can do the same thing with lastname.

6
00:00:23,680 --> 00:00:34,990
We'll say @Column, and we will give it a name = LAST_NAME,

7
00:00:34,990 --> 00:00:42,150
and that will get us through the example of what we're trying to

8
00:00:42,150 --> 00:00:46,950
show that we can have different columns named for specific member

9
00:00:46,950 --> 00:00:49,940
variables inside of our entity here.

10
00:00:49,940 --> 00:00:53,520
I do want to also point out that you can also use this

11
00:00:53,520 --> 00:00:57,730
Column annotation with the private Long id,

12
00:00:57,730 --> 00:00:59,580
the primary key associated with our object.

13
00:00:59,580 --> 00:01:04,640
So if you want to name your primary key something other than id,

14
00:01:04,640 --> 00:01:13,140
maybe USER_ID or CONF_USERS_ID, you can use the Column annotation on it as well.

15
00:01:13,140 --> 00:01:16,950
Let's save this and restart our server.

16
00:01:16,950 --> 00:01:26,440
And once it redeploys, we'll switch over to our MySQL Workbench.

17
00:01:26,440 --> 00:01:31,630
Let's refresh our schema. And once we expand that,

18
00:01:31,630 --> 00:01:40,040
we can see that we have CONF_USERS and our Columns are FIRST_NAME and LAST_NAME.

19
00:01:40,040 --> 00:01:43,870
So it went ahead and updated and altered the table how we thought it would,

20
00:01:43,870 --> 00:01:44,970
which was great.

21
00:01:44,970 --> 00:01:47,380
That's actually the functionality we're looking for,

22
00:01:47,380 --> 00:01:50,840
and you can see how we can override column names by default.

23
00:01:50,840 --> 00:01:58,060
I do want to go ahead and change our ddl update to create‑drop.

24
00:01:58,060 --> 00:01:59,610
As we're doing a lot of these changes,

25
00:01:59,610 --> 00:02:03,030
it's often an inconvenience that something gets

26
00:02:03,030 --> 00:02:05,410
stuck because we've changed a value.

27
00:02:05,410 --> 00:02:08,710
So I'm going to switch back over to my IDE and change that right

28
00:02:08,710 --> 00:02:13,100
now. Inside of our application.properties, we left this as

29
00:02:13,100 --> 00:02:15,730
create. We'll change it to create‑drop.

30
00:02:15,730 --> 00:02:20,450
Now I will remind you that as we start adding data into these tables,

31
00:02:20,450 --> 00:02:22,680
this will drop that data.

32
00:02:22,680 --> 00:02:24,860
But as we're making a lot of changes,

33
00:02:24,860 --> 00:02:27,720
you'll notice that from time to time something may get stuck.

34
00:02:27,720 --> 00:02:31,780
You'll change a column that didn't exist or did exist, and you've removed it.

35
00:02:31,780 --> 00:02:34,020
Now it's kind of confused as to the state that it should

36
00:02:34,020 --> 00:02:36,840
be in. By changing this to create‑drop,

37
00:02:36,840 --> 00:02:41,760
and if we stop our server before we make those changes,

38
00:02:41,760 --> 00:02:45,690
it should drop those tables, and things should not get stuck for us.

39
00:02:45,690 --> 00:02:50,160
So I'm going to go ahead and change mine to create‑drop, stop the server,

40
00:02:50,160 --> 00:02:53,860
and it should go ahead and drop all of that stuff for us.

41
00:02:53,860 --> 00:02:59,000
And as we bring it back up next time, it'll keep recreating that exactly how we would like.

