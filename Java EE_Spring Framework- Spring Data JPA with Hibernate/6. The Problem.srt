1
00:00:00,040 --> 00:00:02,830
Let's talk about the problem that JPA and Hibernate

2
00:00:02,830 --> 00:00:06,140
solve and why we want to use them.

3
00:00:06,140 --> 00:00:09,740
Whenever I'm interviewing Java developers, I always ask them why

4
00:00:09,740 --> 00:00:13,140
should I use Hibernate or why should I use JPA?

5
00:00:13,140 --> 00:00:15,290
And a lot of times they don't understand what the

6
00:00:15,290 --> 00:00:17,740
problem is that we're trying to solve.

7
00:00:17,740 --> 00:00:21,740
Let's take a second to talk about what that problem is.

8
00:00:21,740 --> 00:00:26,440
One of these things is that developers don't always make good DBAs.

9
00:00:26,440 --> 00:00:29,920
A developer doesn't always understand some of the reasonings behind why we

10
00:00:29,920 --> 00:00:34,810
have foreign key constraints the way that we do or how to best represent what

11
00:00:34,810 --> 00:00:37,130
they're trying to do in a relational database.

12
00:00:37,130 --> 00:00:39,450
Relational databases are two dimensional where

13
00:00:39,450 --> 00:00:42,640
object‑oriented languages are three dimensional.

14
00:00:42,640 --> 00:00:43,130
Also,

15
00:00:43,130 --> 00:00:47,820
the data model doesn't always line up with that object model because of that

16
00:00:47,820 --> 00:00:51,240
two‑dimensional versus three‑dimensional representation.

17
00:00:51,240 --> 00:00:55,040
I'm talking about it from the object‑oriented side.

18
00:00:55,040 --> 00:00:58,640
What if we have an existing database that we're trying to map to?

19
00:00:58,640 --> 00:01:02,040
Getting these two to line up isn't always easy.

20
00:01:02,040 --> 00:01:04,800
Another problem is configuration. Although

21
00:01:04,800 --> 00:01:08,940
configuration is a lot better with JPA, it can still be better,

22
00:01:08,940 --> 00:01:11,340
and that's where Spring steps in.

23
00:01:11,340 --> 00:01:13,680
Things like transactions, testing,

24
00:01:13,680 --> 00:01:17,790
data source injection and configuration, these are all things that

25
00:01:17,790 --> 00:01:22,040
we're going to solve with both Spring and JPA inside of our sample

26
00:01:22,040 --> 00:01:24,440
application that we're going to be writing.

27
00:01:24,440 --> 00:01:28,840
The main point I want to talk about for a minute though is business focus.

28
00:01:28,840 --> 00:01:34,350
The business doesn't care if I'm using Spring or JPA.

29
00:01:34,350 --> 00:01:38,440
They care that I'm focusing on solving their problems.

30
00:01:38,440 --> 00:01:44,340
Let's look at some sample code to show you exactly what I'm talking about.

31
00:01:44,340 --> 00:01:48,680
This method that you have in front of you is an old‑school JDBC query,

32
00:01:48,680 --> 00:01:51,390
and yes, you'll notice it's really wordy.

33
00:01:51,390 --> 00:01:56,040
In fact, I had to shrink it down just to fit it all on this screen.

34
00:01:56,040 --> 00:01:59,360
I've got to get a connection, I've got to get a prepared statement,

35
00:01:59,360 --> 00:02:02,970
I've got my result set, I'm getting all the stuff,

36
00:02:02,970 --> 00:02:06,040
populating it, binding it, looping through it,

37
00:02:06,040 --> 00:02:07,230
everything going on,

38
00:02:07,230 --> 00:02:13,560
and then finally I've got this catch statement at the bottom where over half

39
00:02:13,560 --> 00:02:17,440
of my code is making sure that I've closed the result sets,

40
00:02:17,440 --> 00:02:18,840
and I've closed the statement,

41
00:02:18,840 --> 00:02:22,060
and I've closed the connection, because if I don't do all of

42
00:02:22,060 --> 00:02:24,990
that I'm going to end up having memory leaks and the database

43
00:02:24,990 --> 00:02:26,840
will run out of connections.

44
00:02:26,840 --> 00:02:27,500
Believe me,

45
00:02:27,500 --> 00:02:31,860
if you've developed in Java code very long and you've done JDBC for very long,

46
00:02:31,860 --> 00:02:35,340
at some point in your career you forgot that finally block

47
00:02:35,340 --> 00:02:38,700
or one piece of that finally block and you've ran out of

48
00:02:38,700 --> 00:02:40,840
connections on your database.

49
00:02:40,840 --> 00:02:43,640
So really, what is the business focus here?

50
00:02:43,640 --> 00:02:46,040
They care about two things,

51
00:02:46,040 --> 00:02:52,340
that I got this query done and I shoved it in that object.

52
00:02:52,340 --> 00:02:57,790
So there's 35 to 45 lines of code there that they don't care how we do it.

53
00:02:57,790 --> 00:03:02,000
They just care that I'm grabbing the car based off the Id and

54
00:03:02,000 --> 00:03:04,110
getting this object back and returning it.

55
00:03:04,110 --> 00:03:07,540
It's all the application wants.

56
00:03:07,540 --> 00:03:09,470
What does it mean to get a car by Id?

57
00:03:09,470 --> 00:03:11,370
Well, just that,

58
00:03:11,370 --> 00:03:13,790
it doesn't mean that I have a finally block and all

59
00:03:13,790 --> 00:03:15,250
this other stuff that's going on.

60
00:03:15,250 --> 00:03:19,220
Our focus is really just on using a tool rather than

61
00:03:19,220 --> 00:03:21,700
getting the business what they need back,

62
00:03:21,700 --> 00:03:23,630
and you can see it's very error prone.

63
00:03:23,630 --> 00:03:25,360
If I forget one line in here,

64
00:03:25,360 --> 00:03:28,700
the application will deploy and it will run, it'll just chew up

65
00:03:28,700 --> 00:03:33,260
resources and finally run into and out of resource exception or out of

66
00:03:33,260 --> 00:03:37,360
memory or heap space or perm gen or the number of database connections,

67
00:03:37,360 --> 00:03:42,820
all problems that you can experience in a full‑scale application if

68
00:03:42,820 --> 00:03:50,000
you're just using plain old JDBC. Let's talk about the solution though and how JPA fixes this.

