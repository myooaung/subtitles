1
00:00:00,440 --> 00:00:05,950
We've used the conference/registrations URL already to retrieve

2
00:00:05,950 --> 00:00:09,540
all of the listed registrations in our system.

3
00:00:09,540 --> 00:00:14,160
Let's go ahead and call that again using a simple GET,

4
00:00:14,160 --> 00:00:20,010
and you'll see it returns a course and the associated

5
00:00:20,010 --> 00:00:24,140
registration with those courses from our query here.

6
00:00:24,140 --> 00:00:28,440
Now that we know we have a course with an Id of 1 and the name of Bob,

7
00:00:28,440 --> 00:00:32,020
I want to do a POST on a new URL.

8
00:00:32,020 --> 00:00:33,090
That's the one we just created.

9
00:00:33,090 --> 00:00:38,640
So I'm going to switch this to POST and go to registration/update.

10
00:00:38,640 --> 00:00:40,590
I'm going to put in a name value pair down here,

11
00:00:40,590 --> 00:00:42,930
and the first one's going to be id and the value is

12
00:00:42,930 --> 00:00:47,840
going to be 1. And the key is the name,

13
00:00:47,840 --> 00:00:50,280
and it can be to whatever you want to change it to.

14
00:00:50,280 --> 00:00:53,740
I had Bob in here, maybe I'll change it back to Bryan.

15
00:00:53,740 --> 00:00:56,140
Let's click Send.

16
00:00:56,140 --> 00:00:59,840
And it says that it went through clear to our database.

17
00:00:59,840 --> 00:01:03,210
Let's go back to our previous example here,

18
00:01:03,210 --> 00:01:05,880
which using Postman I already have it stored over here, I

19
00:01:05,880 --> 00:01:09,500
can click on this and call registrations again, and you'll

20
00:01:09,500 --> 00:01:12,440
see it switched it to Bryan.

21
00:01:12,440 --> 00:01:18,660
So all we had to do there was type in a new POST and go to

22
00:01:18,660 --> 00:01:23,200
registration/update, and you can actually put everything on the URL there.

23
00:01:23,200 --> 00:01:25,840
I didn't put it in the body, I just did it as request parameters.

24
00:01:25,840 --> 00:01:29,190
You can do it a bunch of different ways, but this works for this basic example,

25
00:01:29,190 --> 00:01:34,940
but it shows that we're updating rather than creating a new one each time.

26
00:01:34,940 --> 00:01:38,160
And that's the example I wanted to illustrate with this.

27
00:01:38,160 --> 00:01:43,620
Now we're going to talk about using Spring Data JPA to clean up

28
00:01:43,620 --> 00:01:49,000
a lot of this boilerplate code that we've been copying and pasting throughout our application.

