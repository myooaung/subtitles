1
00:00:00,140 --> 00:00:04,220
The Spring Framework started out as an Inversion of Control container,

2
00:00:04,220 --> 00:00:08,360
and although I won't be covering all the details of Spring in this course,

3
00:00:08,360 --> 00:00:10,840
I'm going to cover enough to get you comfortable with

4
00:00:10,840 --> 00:00:14,180
understanding what Spring is doing for us inside of our

5
00:00:14,180 --> 00:00:18,510
application while we learn more about JPA and Hibernate.

6
00:00:18,510 --> 00:00:22,800
Spring was conceived to reduce or replace some of the complex

7
00:00:22,800 --> 00:00:25,860
configuration of the Java Enterprise Edition,

8
00:00:25,860 --> 00:00:30,340
and later it was built around using Java without EJBs.

9
00:00:30,340 --> 00:00:34,340
This is an important point because JPA was extracted out of the

10
00:00:34,340 --> 00:00:40,140
Enterprise API because people wanted to use JPA without EJBs.

11
00:00:40,140 --> 00:00:42,240
So, what is Spring?

12
00:00:42,240 --> 00:00:45,780
It is a framework originally built around reducing the

13
00:00:45,780 --> 00:00:50,720
complexities of enterprise Java development and later also

14
00:00:50,720 --> 00:00:54,240
providing enterprise development without EJBs.

15
00:00:54,240 --> 00:00:57,040
Spring can essentially be used with or without EJBs,

16
00:00:57,040 --> 00:01:00,190
and this is an important point because Spring enabled us to do

17
00:01:00,190 --> 00:01:04,740
enterprise development without an application server.

18
00:01:04,740 --> 00:01:07,940
This is one of the reasons that Tomcat and some of the other lightweight

19
00:01:07,940 --> 00:01:12,140
containers have taken the Java development space by storm.

20
00:01:12,140 --> 00:01:14,560
It is easy to use and lightweight,

21
00:01:14,560 --> 00:01:17,500
and until Spring, you were either using enterprise

22
00:01:17,500 --> 00:01:19,390
features with an application server,

23
00:01:19,390 --> 00:01:22,640
and you had a more complex software development lifecycle,

24
00:01:22,640 --> 00:01:27,240
or you were doing rich client applications.

25
00:01:27,240 --> 00:01:27,970
Now,

26
00:01:27,970 --> 00:01:32,790
Spring enables us to switch over to using a lightweight container like Tomcat,

27
00:01:32,790 --> 00:01:37,240
which is easier and faster to develop applications with.

28
00:01:37,240 --> 00:01:40,810
Spring is POJO based, and POJO, as you remember,

29
00:01:40,810 --> 00:01:43,440
stands for Plain Old Java Object.

30
00:01:43,440 --> 00:01:48,940
All of the objects that we're using can be used and wired without Spring.

31
00:01:48,940 --> 00:01:52,210
The only reason I bring this point up is because some people often think

32
00:01:52,210 --> 00:01:56,580
there's some magic or black box that they don't understand about what's

33
00:01:56,580 --> 00:01:59,520
going on behind the scenes with the Spring Framework.

34
00:01:59,520 --> 00:02:03,340
It is still built around simple POJOs.

35
00:02:03,340 --> 00:02:06,020
We've talked about it being lightweight now,

36
00:02:06,020 --> 00:02:09,240
but we should also point out that Spring was built out of the

37
00:02:09,240 --> 00:02:14,610
frustrations of J2EE and the older APIs.

38
00:02:14,610 --> 00:02:17,980
They looked a lot at the blueprints and things like that and said,

39
00:02:17,980 --> 00:02:23,440
what's a better way for us to use these tools and make our code more testable?

40
00:02:23,440 --> 00:02:28,200
Spring also heavily uses AOP, or aspectâ€‘oriented programming,

41
00:02:28,200 --> 00:02:32,400
to apply things like transactions to your code without you needing to go

42
00:02:32,400 --> 00:02:37,020
through and manually or explicitly define them inside your code.

43
00:02:37,020 --> 00:02:39,080
We will use a AOP,

44
00:02:39,080 --> 00:02:42,390
although you won't realize that it's in your code just

45
00:02:42,390 --> 00:02:44,130
through some of the simple annotations,

46
00:02:44,130 --> 00:02:48,940
and your application will then automatically have transactions.

47
00:02:48,940 --> 00:02:53,610
Spring is also built around best practices and design patterns,

48
00:02:53,610 --> 00:02:57,240
which is one of the most appealing parts of Spring to me.

49
00:02:57,240 --> 00:03:00,890
A lot of developers used to wade through the JEE blueprints

50
00:03:00,890 --> 00:03:06,810
and implement singletons or factories, facades and abstract factories.

51
00:03:06,810 --> 00:03:08,380
You can still do that,

52
00:03:08,380 --> 00:03:11,540
but all of these are built into the Spring Framework as well.

53
00:03:11,540 --> 00:03:15,010
So if you have existing patterns that you've already developed,

54
00:03:15,010 --> 00:03:17,260
Spring will work well with these.

55
00:03:17,260 --> 00:03:21,360
But Spring also does this itself inside the application and

56
00:03:21,360 --> 00:03:25,640
inherently encourages better design in your code.

57
00:03:25,640 --> 00:03:29,400
So these patterns, singleton, factory, and abstract factory,

58
00:03:29,400 --> 00:03:33,090
if you've ever gone through and built some of the older style methods of

59
00:03:33,090 --> 00:03:35,890
making your database transparent to your application,

60
00:03:35,890 --> 00:03:39,310
you've done this, and you've implemented a concrete factory.

61
00:03:39,310 --> 00:03:43,670
But Spring also makes a lot of use of the template method pattern,

62
00:03:43,670 --> 00:03:47,030
as well as callbacks and those types of things.

63
00:03:47,030 --> 00:03:50,560
But lastly, it's heavily annotation based,

64
00:03:50,560 --> 00:03:53,340
and some developers used to shy away from Spring

65
00:03:53,340 --> 00:03:55,510
because of its XML configuration.

66
00:03:55,510 --> 00:03:58,220
With the more recent versions of Spring,

67
00:03:58,220 --> 00:04:02,160
all configuration is annotation based, and more recently,

68
00:04:02,160 --> 00:04:10,000
configuration is all done within Java code, thus eliminating all XML, if desired.

