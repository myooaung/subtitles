WEBVTT
1
00:00:00.040 --> 00:00:03.380
Creating the repository is almost identical to what we just did

2
00:00:03.380 --> 00:00:05.540
with the service with a few slight changes.

3
00:00:05.540 --> 00:00:10.140
So let's right‑click on com.pluralsight.conference again.

4
00:00:10.140 --> 00:00:19.110
We'll say New, Java Class, and we'll call this repository.UserRepositoryImpl.

5
00:00:19.110 --> 00:00:25.140
Hit Enter.

6
00:00:25.140 --> 00:00:27.790
And then we'll create almost the same method in here.

7
00:00:27.790 --> 00:00:31.720
We're going to replace a couple things in here in another demo.

8
00:00:31.720 --> 00:00:43.740
We'll say public User save User user.

9
00:00:43.740 --> 00:00:51.240
And then we'll return that user instance as well and save this.

10
00:00:51.240 --> 00:00:53.840
The next thing we want to do inside of here though is annotate

11
00:00:53.840 --> 00:01:00.140
this as a repository instead of a service.

12
00:01:00.140 --> 00:01:03.810
And then we're going to right‑click and refactor this

13
00:01:03.810 --> 00:01:08.740
as well and say Extract Interface.

14
00:01:08.740 --> 00:01:12.340
This will also be in the repository package.

15
00:01:12.340 --> 00:01:15.680
We will call this the UserRepository, not UserRepositoryImpl.

16
00:01:15.680 --> 00:01:22.520
We'll also opt to include that saveUser method and say Refactor,

17
00:01:22.520 --> 00:01:26.340
Yes, and click OK.

18
00:01:26.340 --> 00:01:29.860
And now we can go back to our UserServiceImpl and auto

19
00:01:29.860 --> 00:01:39.250
wire inside of here our UserRepository.

20
00:01:39.250 --> 00:01:51.110
And our UserRepository now can be used to call save on that object.

21
00:01:51.110 --> 00:01:59.040
So we'll say UserRepository.save user.

22
00:01:59.040 --> 00:02:05.480
We have all of our pieces wired up for the user repository and the user service.

23
00:02:05.480 --> 00:02:09.030
One thing we don't have yet though, inside of our UserRepository,

24
00:02:09.030 --> 00:02:12.640
is our PersistenceContext.

25
00:02:12.640 --> 00:02:16.900
To add that, we can just use the annotation @PersistenceContext,

26
00:02:16.900 --> 00:02:23.830
and we'll create a private instance of the EntityManager and store it to the

27
00:02:23.830 --> 00:02:28.580
entityManager variable because that's really what the PersistenceContexxt is

28
00:02:28.580 --> 00:02:32.140
under the annotation is our EntityManager.

29
00:02:32.140 --> 00:02:35.540
Now that we're in sight of our save method,

30
00:02:35.540 --> 00:02:43.540
we can just say entityManager.persist user.

31
00:02:43.540 --> 00:02:48.380
And since we are doing a persist or a save instead of just read‑only data,

32
00:02:48.380 --> 00:02:51.260
we do need to wrap this whole thing with a transaction.

33
00:02:51.260 --> 00:02:56.920
So let's switch back to our UserServiceImpl, go to our save method, and we

34
00:02:56.920 --> 00:03:01.570
will add an annotation for @Transactional, and we will choose the one from

35
00:03:01.570 --> 00:03:10.460
the javax.transaction annotations and save this. And our entire code base

36
00:03:10.460 --> 00:03:15.490
is now wrapped in a transaction from the beginning of this method till we

37
00:03:15.490 --> 00:03:20.840
exit back out of this method. So our save will be persisted wrapped in a

38
00:03:20.840 --> 00:03:21.580
transaction.

39
00:03:21.580 --> 00:03:28.000
If we try and run it without this now, it'll actually give us an error. If you omit this step, you'll probably see that error.

