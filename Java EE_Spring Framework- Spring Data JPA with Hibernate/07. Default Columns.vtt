WEBVTT
1
00:00:00.140 --> 00:00:04.610
In our last demo, we had columns that we hadn't specified a name for yet,

2
00:00:04.610 --> 00:00:06.250
but they were still mapped.

3
00:00:06.250 --> 00:00:09.350
It was pretty subtle, but when we created our users table,

4
00:00:09.350 --> 00:00:12.150
all of the other fields inside that object were

5
00:00:12.150 --> 00:00:14.640
automatically mapped to our database.

6
00:00:14.640 --> 00:00:19.420
JPA will look for the name and type of the column that the object is and

7
00:00:19.420 --> 00:00:23.690
make assumptions about what to map it as. We don't have to accept those

8
00:00:23.690 --> 00:00:27.980
defaults that are created for us though. We can use the @Column

9
00:00:27.980 --> 00:00:32.280
annotation, and it will allow us to override names and column mappings

10
00:00:32.280 --> 00:00:34.400
and specific attributes like that.

11
00:00:34.400 --> 00:00:37.560
Some of these only apply to the data type that we're using,

12
00:00:37.560 --> 00:00:40.480
such as decimal or numeric type in the database.

13
00:00:40.480 --> 00:00:43.130
And they actually won't do anything if you tie them to

14
00:00:43.130 --> 00:00:47.300
something like a string, for instance. Precision, scale, length

15
00:00:47.300 --> 00:00:50.180
all pertain to certain types of objects.

16
00:00:50.180 --> 00:00:53.490
Some of these are also just a way of applying foreign key constraints.

17
00:00:53.490 --> 00:00:54.520
For example,

18
00:00:54.520 --> 00:01:00.140
unique is just guaranteeing a unique value in that column through a constraint,

19
00:01:00.140 --> 00:01:08.000
and another example is updatable, whether or not we can or can't change that value in the column.

