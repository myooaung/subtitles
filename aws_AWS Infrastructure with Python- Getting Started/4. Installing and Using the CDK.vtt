WEBVTT
1
00:00:01.040 --> 00:00:05.040
Now let's actually start and use the AWS SDK.

2
00:00:05.040 --> 00:00:11.040
Back in our Cloud 9 environment, let's first update our node package manager.

3
00:00:11.040 --> 00:00:15.470
So let's just run our normal npm install ‑g and then

4
00:00:15.470 --> 00:00:19.840
update npm to the latest version.

5
00:00:19.840 --> 00:00:26.640
After npm is updated to the latest version, we can now install the CDK.

6
00:00:26.640 --> 00:00:31.440
Make sure that you install version 1.58.

7
00:00:31.440 --> 00:00:38.240
This is because there could be some breaking changes between CDK versions.

8
00:00:38.240 --> 00:00:44.640
So for this course, make sure you're using version 1.58.

9
00:00:44.640 --> 00:00:47.540
If you're installing a later version,

10
00:00:47.540 --> 00:00:53.340
then make sure you double check the CDK documentation for breaking changes.

11
00:00:53.340 --> 00:00:56.660
You can see if we type cdk ‑‑help,

12
00:00:56.660 --> 00:01:04.040
we have several options and several commands we can actually use with the CDK.

13
00:01:04.040 --> 00:01:07.270
Now let's make a folder for all of our CDK files.

14
00:01:07.270 --> 00:01:12.040
This is going to be our project folder for the rest of the course.

15
00:01:12.040 --> 00:01:20.240
Afterwards, you can run cdk init, and then you can initialize a sample app.

16
00:01:20.240 --> 00:01:24.720
Make sure though that you inform CDK that you're going

17
00:01:24.720 --> 00:01:28.040
to be using the Python language.

18
00:01:28.040 --> 00:01:32.010
Now this will automatically create all of the subfolders and

19
00:01:32.010 --> 00:01:36.240
the files you need to create a CDK app.

20
00:01:36.240 --> 00:01:42.740
It will even create a Python virtual environment for you to manage dependencies.

21
00:01:42.740 --> 00:01:45.580
You can see here on the left side of the screen all of the

22
00:01:45.580 --> 00:01:49.340
files the CDK actually created for you.

23
00:01:49.340 --> 00:01:54.450
This includes an app file for your application itself,

24
00:01:54.450 --> 00:02:01.640
as well as an infrastructure_cdk folder for your different CDK stacks.

25
00:02:01.640 --> 00:02:03.640
Now let's look at the app file.

26
00:02:03.640 --> 00:02:07.850
You can see here that what I'm doing is I'm importing our

27
00:02:07.850 --> 00:02:12.740
constructs from the infrastructure.cdk stack.

28
00:02:12.740 --> 00:02:16.630
Afterwards, I am declaring the stack in the app,

29
00:02:16.630 --> 00:02:23.450
and I am calling app.synth to actually create CloudFormation

30
00:02:23.450 --> 00:02:28.740
templates that the CDK app can deploy later on.

31
00:02:28.740 --> 00:02:35.040
Now let's look at the infrastructure_cdk sample file.

32
00:02:35.040 --> 00:02:41.120
You can see here that we have a lot of different AWS services,

33
00:02:41.120 --> 00:02:46.940
which we are importing as libraries into Python.

34
00:02:46.940 --> 00:02:56.940
We also have a CDK stack where we are defining our resources or constructs.

35
00:02:56.940 --> 00:03:02.640
Now if we type cdk ls, it'll actually error because we

36
00:03:02.640 --> 00:03:07.140
haven't installed any of these packages yet.

37
00:03:07.140 --> 00:03:10.620
Now what we're going to do is we're going to activate a virtual

38
00:03:10.620 --> 00:03:17.120
environment by running source and running the activate file in

39
00:03:17.120 --> 00:03:19.440
the virtual environment folder.

40
00:03:19.440 --> 00:03:20.170
Afterwards,

41
00:03:20.170 --> 00:03:25.880
we can install all of the dependencies using pip. Pip will

42
00:03:25.880 --> 00:03:29.590
automatically install all of these dependencies into your

43
00:03:29.590 --> 00:03:33.940
Python virtual environment, which was created by Cloud 9.

44
00:03:33.940 --> 00:03:39.410
You can see in the setup.py file all of the prerequisites that

45
00:03:39.410 --> 00:03:43.840
are required for this particular application.

46
00:03:43.840 --> 00:03:48.430
And when we begin to start adding more resources, we'll

47
00:03:48.430 --> 00:03:52.540
actually be editing this setup.py file.

48
00:03:52.540 --> 00:03:57.480
Now let's try cdk ls again, and you can see that we can provision one

49
00:03:57.480 --> 00:04:05.590
stack, the infrastructure‑cdk stack. If we run cdk synth, cdk synth

50
00:04:05.590 --> 00:04:11.290
actually creates a CloudFormation template for us. Well this

51
00:04:11.290 --> 00:04:18.200
CloudFormation template is the CloudFormation version of the stack

52
00:04:18.200 --> 00:04:20.840
that I just showed you in Python.

53
00:04:20.840 --> 00:04:27.850
I can even output this synth into a file, and then we can

54
00:04:27.850 --> 00:04:37.000
actually view the file on our Cloud 9 environment. So this is a fully working CloudFormation file.

