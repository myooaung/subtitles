1
00:00:01,040 --> 00:00:06,940
Now let's look specifically at how the CDK works in Python.

2
00:00:06,940 --> 00:00:12,240
First of all, the CDK has stable Python 3 support,

3
00:00:12,240 --> 00:00:13,280
and secondly,

4
00:00:13,280 --> 00:00:17,240
it is fully integrated with the pip package manager and

5
00:00:17,240 --> 00:00:19,840
with Python virtual environments.

6
00:00:19,840 --> 00:00:20,560
Later on,

7
00:00:20,560 --> 00:00:25,850
you'll see that we'll have to install a package for every set of

8
00:00:25,850 --> 00:00:29,540
resources that we need to provision using the CDK.

9
00:00:29,540 --> 00:00:32,380
This makes the integration with pip and virtual

10
00:00:32,380 --> 00:00:37,740
environment very valuable for the CDK.

11
00:00:37,740 --> 00:00:42,250
Python also has dynamically typed variables. While

12
00:00:42,250 --> 00:00:46,660
dynamically typed variables make it much easier for you to

13
00:00:46,660 --> 00:00:49,580
write your code, at the same time,

14
00:00:49,580 --> 00:00:54,840
it may also make it more difficult for you to perform type checking.

15
00:00:54,840 --> 00:00:58,150
You have to find some way to integrate the type

16
00:00:58,150 --> 00:01:01,540
checking into the build or test process.

17
00:01:01,540 --> 00:01:04,650
So as your Python code is being interpreted,

18
00:01:04,650 --> 00:01:09,440
you need to find a way to make sure you catch any type errors.

19
00:01:09,440 --> 00:01:09,870
Now,

20
00:01:09,870 --> 00:01:16,190
how does the CDK actually do this multi‑language support? CDK is actually

21
00:01:16,190 --> 00:01:23,440
written in TypeScript. So how can TypeScript translate to Python code?

22
00:01:23,440 --> 00:01:30,200
Now, CDK does this using an interface called JSii, or the JavaScript

23
00:01:30,200 --> 00:01:39,120
interoperability interface. This JSii + TypeScript compiler is what allows

24
00:01:39,120 --> 00:01:46,170
your different other programming languages to interface with the original

25
00:01:46,170 --> 00:01:48,240
TypeScript code.

26
00:01:48,240 --> 00:01:52,720
AWS didn't brute‑force the creation of the

27
00:01:52,720 --> 00:01:55,660
libraries in these different languages.

28
00:01:55,660 --> 00:02:05,000
These different languages actually connect to the original TypeScript code using the JSii.

