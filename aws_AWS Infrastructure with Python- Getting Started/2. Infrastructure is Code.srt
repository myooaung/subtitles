1
00:00:01,140 --> 00:00:01,430
Now,

2
00:00:01,430 --> 00:00:07,320
what is the next step in provisioning your infrastructure efficiently in

3
00:00:07,320 --> 00:00:12,040
the cloud? This is where Cloud Development Kit comes in.

4
00:00:12,040 --> 00:00:16,270
First off, it supports multiple programming languages,

5
00:00:16,270 --> 00:00:21,220
so this syntax should be familiar to the developers among you.

6
00:00:21,220 --> 00:00:26,840
You don't need to learn a new language to use the Cloud Development Kit.

7
00:00:26,840 --> 00:00:31,920
Secondly, it provides you with high‑level and easy to use constructs,

8
00:00:31,920 --> 00:00:35,100
which you can use to define your infrastructure from

9
00:00:35,100 --> 00:00:38,340
within your favorite programming language.

10
00:00:38,340 --> 00:00:43,410
And lastly, if you cannot use these high‑level constructs,

11
00:00:43,410 --> 00:00:47,170
you can actually fall back on low‑level CloudFormation

12
00:00:47,170 --> 00:00:52,840
constructs. So anything CloudFormation can do, Cloud

13
00:00:52,840 --> 00:00:57,140
Development Kit can do in your favorite language.

14
00:00:57,140 --> 00:01:05,010
Now what is in a CDK app? A CDK app consists of constructs,

15
00:01:05,010 --> 00:01:08,340
which are grouped together in stacks.

16
00:01:08,340 --> 00:01:12,740
This may look familiar to you, for the people who use CloudFormation,

17
00:01:12,740 --> 00:01:18,660
as stacks are also what CloudFormation provisions when it creates your

18
00:01:18,660 --> 00:01:25,620
resources. There is actually a one to one mapping between a CDK stack

19
00:01:25,620 --> 00:01:28,640
and a CloudFormation stack.

20
00:01:28,640 --> 00:01:36,400
These constructs actually represent one or a collection of AWS resources,

21
00:01:36,400 --> 00:01:41,980
so you could have multiple AWS resources defined in a single construct.

22
00:01:41,980 --> 00:01:50,540
This is how AWS can abstract more complex designs from the developer.

23
00:01:50,540 --> 00:01:53,470
Now, how is your application provisioned?

24
00:01:53,470 --> 00:02:00,240
Well, let's take this from the analogy of a program being compiled and run.

25
00:02:00,240 --> 00:02:03,150
You're CDK application is your source code.

26
00:02:03,150 --> 00:02:06,340
It's written in your favorite programming language.

27
00:02:06,340 --> 00:02:07,600
Afterwards,

28
00:02:07,600 --> 00:02:15,770
the CDK CLI will execute your application by generating a

29
00:02:15,770 --> 00:02:21,650
CloudFormation template much like how a compiler compiles your

30
00:02:21,650 --> 00:02:26,240
code and generates assembly language.

31
00:02:26,240 --> 00:02:31,900
CDK also deploys this CloudFormation template to AWS

32
00:02:31,900 --> 00:02:43,000
CloudFormation much like how a processor runs your code. So it very similarly follows the code compilation and running process.

