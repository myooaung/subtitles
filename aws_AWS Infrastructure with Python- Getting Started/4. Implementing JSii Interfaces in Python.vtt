WEBVTT
1
00:00:01.040 --> 00:00:02.110
By now,

2
00:00:02.110 --> 00:00:06.560
we've covered several demos and topics that can actually

3
00:00:06.560 --> 00:00:09.840
help you get started with the CDK.

4
00:00:09.840 --> 00:00:14.300
The last topic I want to cover is how to implement

5
00:00:14.300 --> 00:00:18.740
on interface in the Python CDK.

6
00:00:18.740 --> 00:00:19.050
Now,

7
00:00:19.050 --> 00:00:25.710
this is a little bit special because Java and TypeScript both have

8
00:00:25.710 --> 00:00:31.440
native interface implementation in the language itself.

9
00:00:31.440 --> 00:00:37.540
Python, however, does not have any concept of an interface.

10
00:00:37.540 --> 00:00:43.840
So here, we're actually going to implement an interface called iAspect,

11
00:00:43.840 --> 00:00:49.010
which is just a class that applies a function to

12
00:00:49.010 --> 00:00:52.340
all constructs in a given scope.

13
00:00:52.340 --> 00:00:55.310
Now, there are many use cases for an aspect,

14
00:00:55.310 --> 00:01:00.110
but the use case we're going to follow here is that what if

15
00:01:00.110 --> 00:01:04.920
we want to check if all of our CloudFormation stacks have

16
00:01:04.920 --> 00:01:07.840
termination protection enabled.

17
00:01:07.840 --> 00:01:15.260
So what we're going to do here is we're going to import a jsii library,

18
00:01:15.260 --> 00:01:21.340
which is the library that connects Python to the native CDK code.

19
00:01:21.340 --> 00:01:26.320
Let's just add jsii to the setup.py dependencies and

20
00:01:26.320 --> 00:01:31.180
install these dependencies again. Afterwards,

21
00:01:31.180 --> 00:01:38.750
we can now use jsii annotations in this Python code. So I can specify

22
00:01:38.750 --> 00:01:49.370
here that this class actually implements a jsii interface, and let's

23
00:01:49.370 --> 00:01:54.340
call this class CheckTerminationProtection.

24
00:01:54.340 --> 00:01:59.080
Now, in this class, we're going to define a function called visit,

25
00:01:59.080 --> 00:02:04.410
which is specified in the interface. This visit function, it's what's going

26
00:02:04.410 --> 00:02:09.640
to be applied to all resources in a particular scope.

27
00:02:09.640 --> 00:02:12.140
So in this visit function,

28
00:02:12.140 --> 00:02:19.440
we're going to check if the construct we're visiting is of type stack.

29
00:02:19.440 --> 00:02:26.190
If it's not of type stack, then we just ignore that resource; however,

30
00:02:26.190 --> 00:02:34.220
if it is a stack, then we check if the stack has termination protection enabled.

31
00:02:34.220 --> 00:02:35.690
If it does not,

32
00:02:35.690 --> 00:02:41.350
we just raise a warning that tells us that the stack does

33
00:02:41.350 --> 00:02:45.140
not have termination protection enabled.

34
00:02:45.140 --> 00:02:46.780
So at the end of the code,

35
00:02:46.780 --> 00:02:53.810
let's just call the apply_aspect function and apply the aspect to

36
00:02:53.810 --> 00:02:59.960
all of the resources inside the application. So if we try it out

37
00:02:59.960 --> 00:03:03.840
and let's say deploy the EcsStack,

38
00:03:03.840 --> 00:03:09.500
you notice that it checks the ECSStack and the NetworkStack if it has

39
00:03:09.500 --> 00:03:14.600
termination protection enabled. It won't check the other stack, like

40
00:03:14.600 --> 00:03:17.340
the LambdaStack or the InstancesStack,

41
00:03:17.340 --> 00:03:22.640
because that's not part of the stacks we're deploying.

42
00:03:22.640 --> 00:03:35.000
So that's just how aspects work in general, and this demonstration was just to show you how you would implement interfaces in Python.

