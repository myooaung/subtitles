1
00:00:01,840 --> 00:00:07,680
Now let's start by duplicating the lambda_stack file so that

2
00:00:07,680 --> 00:00:10,640
we have a starting point for our ECS stack.

3
00:00:10,640 --> 00:00:19,430
We'll rename this file ecs_stack, and then similar to what we did before,

4
00:00:19,430 --> 00:00:26,840
we're going to erase the contents of the LambdaStack.

5
00:00:26,840 --> 00:00:34,640
And we're also going to erase the import that we made for the LambdaStack.

6
00:00:34,640 --> 00:00:38,280
Now instead of these LambdaStack imports,

7
00:00:38,280 --> 00:00:42,720
we're going to be importing ECS libraries.

8
00:00:42,720 --> 00:00:49,540
So we're importing ecs, we're importing ecr_assets,

9
00:00:49,540 --> 00:00:56,040
and we're going to be importing ecs_patterns.

10
00:00:56,040 --> 00:01:02,340
Now we're going to add these dependencies to our setup.py file.

11
00:01:02,340 --> 00:01:06,210
So I'm going to be specifying that the install comes from the CDK

12
00:01:06,210 --> 00:01:11,490
set of libraries, and I'll copy‑paste all of the libraries that

13
00:01:11,490 --> 00:01:16,790
we're importing from our ecs_stack.py file.

14
00:01:16,790 --> 00:01:23,240
I'll again specify version 1.58.

15
00:01:23,240 --> 00:01:27,540
Now I am not deleting our previous imports.

16
00:01:27,540 --> 00:01:32,930
This is because perhaps I also don't want to get rid of

17
00:01:32,930 --> 00:01:35,440
the lambda functions we actually wrote.

18
00:01:35,440 --> 00:01:38,740
So if I don't want to get rid of those lambda functions,

19
00:01:38,740 --> 00:01:42,040
and I just want to create a new stack,

20
00:01:42,040 --> 00:01:46,540
then I can keep these dependencies here and just add new

21
00:01:46,540 --> 00:01:51,440
libraries as we create more stacks.

22
00:01:51,440 --> 00:01:54,740
Now let's actually begin writing the function.

23
00:01:54,740 --> 00:02:00,800
First off, I am going to be creating an ECS cluster.

24
00:02:00,800 --> 00:02:05,540
So we're just going to look at the ECS library,

25
00:02:05,540 --> 00:02:09,950
pass in the stack, as well as the name of this resource.

26
00:02:09,950 --> 00:02:14,540
In this case, I'm just naming it Globomantics‑Cluster.

27
00:02:14,540 --> 00:02:20,340
That's all we actually need to do to create an ECS cluster.

28
00:02:20,340 --> 00:02:27,540
The next thing we'll need to do is we'll need to create our image_asset.

29
00:02:27,540 --> 00:02:31,580
So this is an example of a local asset on ECS.

30
00:02:31,580 --> 00:02:34,940
We're going to use ecs_assets,

31
00:02:34,940 --> 00:02:42,540
and we're going to specify that we're going to import a DockerImageAsset.

32
00:02:42,540 --> 00:02:49,740
So the DockerImageAsset takes in as an argument the location of your file,

33
00:02:49,740 --> 00:02:52,920
as well as the label for your asset.

34
00:02:52,920 --> 00:02:57,040
So in this case, I'm just labeling it Globomantics‑Landing‑Page,

35
00:02:57,040 --> 00:03:01,120
and I am specifying the location to be the contents of the

36
00:03:01,120 --> 00:03:05,140
globomantics‑container‑app directory.

37
00:03:05,140 --> 00:03:09,000
So I just pass in the directory argument, and I put the

38
00:03:09,000 --> 00:03:13,840
location of the globomantics‑container‑app.

39
00:03:13,840 --> 00:03:18,290
Now the next thing we actually need to do is we need to specify that

40
00:03:18,290 --> 00:03:24,440
we want this image_asset in an ECR repository.

41
00:03:24,440 --> 00:03:31,240
So I'm going to create an ECR resource named image, and I'm going to

42
00:03:31,240 --> 00:03:38,380
specify that this is going to be an ecs.ContainerImage, and I'm

43
00:03:38,380 --> 00:03:41,990
going to specify that I'm going to be getting this from a

44
00:03:41,990 --> 00:03:46,140
docker_image_asset or from a local asset.

45
00:03:46,140 --> 00:03:49,040
So I'm going to pass in the image_asset that we

46
00:03:49,040 --> 00:03:52,040
just created a few lines earlier.

47
00:03:52,040 --> 00:03:53,380
Afterwards,

48
00:03:53,380 --> 00:03:57,430
let's create the actual cluster that our containers

49
00:03:57,430 --> 00:04:00,040
will actually be provisioned in.

50
00:04:00,040 --> 00:04:03,840
So let's create an ECS cluster.

51
00:04:03,840 --> 00:04:06,290
From the ecs_patterns library,

52
00:04:06,290 --> 00:04:11,940
we're going to load in the ApplicationLoadBalancedFargateService, and

53
00:04:11,940 --> 00:04:15,070
we're going to pass in a lot of different arguments.

54
00:04:15,070 --> 00:04:20,740
First, of course, the stack and the label as usual,

55
00:04:20,740 --> 00:04:25,140
and we'll need to also pass in the cluster.

56
00:04:25,140 --> 00:04:26,030
In this case,

57
00:04:26,030 --> 00:04:30,040
we're going to specify that the cluster we're using is

58
00:04:30,040 --> 00:04:33,540
the cluster we declared earlier.

59
00:04:33,540 --> 00:04:37,230
Secondly, we need to specify the CPU we're going to use.

60
00:04:37,230 --> 00:04:43,740
Now since we're using Fargate, there are predefined CPU and memory ratios.

61
00:04:43,740 --> 00:04:47,820
So if we have a 256 CPU unit allocation,

62
00:04:47,820 --> 00:04:54,240
we need to have a memory limit allocation of 512.

63
00:04:54,240 --> 00:04:59,570
These are, again, fixed configurations of Fargate, which we cannot change.

64
00:04:59,570 --> 00:05:00,440
Afterwards,

65
00:05:00,440 --> 00:05:06,230
we need to specify the desired count or the number of

66
00:05:06,230 --> 00:05:11,040
tasks we need to run for this app.

67
00:05:11,040 --> 00:05:13,440
Now we also need to specify the listener_port.

68
00:05:13,440 --> 00:05:19,240
We're going to specify port 80, the normal web listener port,

69
00:05:19,240 --> 00:05:23,980
and we're going to now specify the task_image_options,

70
00:05:23,980 --> 00:05:27,060
or what image we want provisioned here.

71
00:05:27,060 --> 00:05:30,540
Let me just clean up my code a little bit.

72
00:05:30,540 --> 00:05:32,430
And now let's specify our image.

73
00:05:32,430 --> 00:05:36,690
So I'm going to look at the ecs_patterns library, and I'm going to

74
00:05:36,690 --> 00:05:41,740
get an ApplicationLoadBalancedTaskImageOptions.

75
00:05:41,740 --> 00:05:43,920
So in this TaskImageOptions,

76
00:05:43,920 --> 00:05:51,840
I'm going to specify the image I want provisioned for the containers to use.

77
00:05:51,840 --> 00:05:54,000
Now here, I'll specify the image.

78
00:05:54,000 --> 00:05:58,040
Again, as the image we declared earlier.

79
00:05:58,040 --> 00:06:00,870
So these two are the same image.

80
00:06:00,870 --> 00:06:06,510
And then, I need to specify the container_name,

81
00:06:06,510 --> 00:06:11,140
the name of the container that's going to be run.

82
00:06:11,140 --> 00:06:19,240
So this container_name is going to be Globomantics‑Landing‑Page.

83
00:06:19,240 --> 00:06:25,400
This is because this container_name matches the container_name we

84
00:06:25,400 --> 00:06:29,620
actually declared in a previous line of code.

85
00:06:29,620 --> 00:06:31,420
Let me just lower it a bit,

86
00:06:31,420 --> 00:06:38,340
and now you can see that these two container_names need to match.

87
00:06:38,340 --> 00:06:40,750
Finally, we need to specify the container_port.

88
00:06:40,750 --> 00:06:44,840
In this case, the container is running an app on port 80,

89
00:06:44,840 --> 00:06:48,640
as specified in the Docker file we viewed earlier.

90
00:06:48,640 --> 00:06:49,230
Finally,

91
00:06:49,230 --> 00:06:53,840
we're going to just specify that the load balancer used

92
00:06:53,840 --> 00:06:56,480
is going to be a public_load_balancer.

93
00:06:56,480 --> 00:07:00,270
So the load balancer in front of these containers will be a

94
00:07:00,270 --> 00:07:06,140
public_load_balancer so our users can access the application.

95
00:07:06,140 --> 00:07:09,300
And now we have all of the resources we need.

96
00:07:09,300 --> 00:07:17,040
Let me just rename the class to EcsStack, again, for organizational purposes.

97
00:07:17,040 --> 00:07:19,790
Now back in the app.py file,

98
00:07:19,790 --> 00:07:25,540
we're going to need to specify that we also want to declare an ECS stack.

99
00:07:25,540 --> 00:07:30,610
So I'm going to import the EcsStack similar to how I imported the LambdaStack.

100
00:07:30,610 --> 00:07:34,240
I'll just change the file name that we're importing and change

101
00:07:34,240 --> 00:07:37,940
the class that we're importing to EcsStack.

102
00:07:37,940 --> 00:07:40,600
Afterwards, again, similar to the LambdaStack,

103
00:07:40,600 --> 00:07:44,610
I need to declare that we're going to launch an EcsStack.

104
00:07:44,610 --> 00:07:48,940
So I'll just copy this LambdaStack declaration,

105
00:07:48,940 --> 00:07:52,770
and I'm going to specify that instead of a LambdaStack,

106
00:07:52,770 --> 00:07:55,300
we're going to provision an EcsStack.

107
00:07:55,300 --> 00:07:59,640
And of course, we're going to change the label.

108
00:07:59,640 --> 00:08:04,920
So now we have declared the EcsStack that our app is going to provision,

109
00:08:04,920 --> 00:08:07,740
or that our app can provision.

110
00:08:07,740 --> 00:08:19,000
If we run cdk ls, you can actually see now we have two stacks that we can launch, an EcsStack and a LambdaStack.

