WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.410 --> 00:00:03.615
If you remember earlier on in the course,

00:00:03.615 --> 00:00:05.670
when we created the Guest List app.

00:00:05.670 --> 00:00:09.840
We set it up, so the names added are arranged alphabetically.

00:00:09.840 --> 00:00:12.870
If I add a, b,

00:00:12.870 --> 00:00:17.385
and then c. Then if we add a again,

00:00:17.385 --> 00:00:23.010
we can see this is placed at the beginning and all the rest move across to make way,

00:00:23.010 --> 00:00:26.460
rather than these names just jumping out the way.

00:00:26.460 --> 00:00:32.415
This moving of the elements can also be animated too using a v-move class.

00:00:32.415 --> 00:00:36.870
V move works like transition classes we've already looked at.

00:00:36.870 --> 00:00:41.730
We replace the v with the name which you want to add in the transition group.

00:00:41.730 --> 00:00:45.680
Inside of our app, we already have a name of scale.

00:00:45.680 --> 00:00:48.665
This will create a class name of scale move,

00:00:48.665 --> 00:00:51.260
which we can use in a CSS file.

00:00:51.260 --> 00:00:54.635
So let's go over to the app,.CSS.

00:00:54.635 --> 00:00:57.065
I'm going to add this now.

00:00:57.065 --> 00:01:00.525
Then add this just above the key frames.

00:01:00.525 --> 00:01:03.550
So scale-move.

00:01:03.920 --> 00:01:07.690
Then I want to add a transition,

00:01:08.300 --> 00:01:15.060
set the transform over 1 second.

00:01:15.060 --> 00:01:19.130
So with a new class, we're free to add any transition we want.

00:01:19.130 --> 00:01:24.865
I'm just going to transition the move of 1 second to make the move a little smoother.

00:01:24.865 --> 00:01:28.105
Let's see how this is looking in the browser.

00:01:28.105 --> 00:01:31.555
So let's add a, b,

00:01:31.555 --> 00:01:35.735
and then c. Now if I add a in again,

00:01:35.735 --> 00:01:39.715
we see a nice smooth effects for the b.

00:01:39.715 --> 00:01:43.720
Now moving out of the way. So this now looks a lot better.

00:01:43.720 --> 00:01:47.455
We now have this smooth transition when new items are added.

00:01:47.455 --> 00:01:51.175
One last thing before we wrap this video up is the name

00:01:51.175 --> 00:01:55.670
attributes we added to the transition can also be dynamic.

00:01:55.670 --> 00:01:58.210
We can use either v bind,

00:01:58.210 --> 00:02:00.565
like we had to do in the past,

00:02:00.565 --> 00:02:04.210
or we can also use the shorter and the colon to

00:02:04.210 --> 00:02:08.100
bide the state's property inside the openings tag.

00:02:08.100 --> 00:02:11.000
Let's add a colon to make this dynamic.

00:02:11.000 --> 00:02:14.830
Then we can set this up as a data property to change it's name.

00:02:14.830 --> 00:02:16.460
So rather than scale,

00:02:16.460 --> 00:02:19.945
if we would call this the effect1, for example.

00:02:19.945 --> 00:02:23.255
We can then set it up as a data property.

00:02:23.255 --> 00:02:25.325
Let's go over to the app.js,

00:02:25.325 --> 00:02:28.655
and we can add this inside of our data.

00:02:28.655 --> 00:02:32.575
So within the opening and closing data tags,

00:02:32.575 --> 00:02:37.020
I'm going to add these on the event capacity percentage.

00:02:37.020 --> 00:02:39.730
The name was effect1.

00:02:39.730 --> 00:02:44.365
We can add our name of scale back inside here.

00:02:44.365 --> 00:02:49.580
So this is just a basic example used in our scale transition name.

00:02:49.580 --> 00:02:51.875
To use the existing CSS.

00:02:51.875 --> 00:02:54.920
We could settle multiple transitions inside

00:02:54.920 --> 00:02:59.350
the CSS file and apply these based on the name of the data property.

00:02:59.350 --> 00:03:02.930
For example, we could have a checkbox or select

00:03:02.930 --> 00:03:07.235
input to allow the user to change the transition type.

00:03:07.235 --> 00:03:10.490
So hit save, and let's refresh inside

00:03:10.490 --> 00:03:15.720
the browser and check our scale transition still works.

00:03:20.980 --> 00:03:25.210
Everything's still seems to be working correctly there.

00:03:25.210 --> 00:03:29.375
Also, this binding will also work on over attributes too,

00:03:29.375 --> 00:03:31.330
such as JavaScript hooks.

00:03:31.330 --> 00:03:36.215
So we could go back to our transition group inside the index page.

00:03:36.215 --> 00:03:39.480
We could do something such as before-enter,

00:03:41.110 --> 00:03:45.680
set this to be a value or colon enter,

00:03:45.680 --> 00:03:47.330
and do the same just here.

00:03:47.330 --> 00:03:51.670
This makes all these hooks and transitions really flexible.

00:03:51.670 --> 00:03:58.250
Although we've only added relatively simple transitions and animations to this app,

00:03:58.250 --> 00:04:00.545
they can make a big difference in the end

00:04:00.545 --> 00:04:04.680
by making our app look a lot more polished and complete.
