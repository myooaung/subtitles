WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.620 --> 00:00:04.695
When looking at components in these last few sections,

00:00:04.695 --> 00:00:09.180
we've looked at how parent-child components can communicate.

00:00:09.180 --> 00:00:14.910
We know we pass data from the child to the parents with custom events.

00:00:14.910 --> 00:00:21.970
Also, we know we pass data back from the parents to the child using props.

00:00:22.070 --> 00:00:26.805
This works well if the components which are to communicate,

00:00:26.805 --> 00:00:31.155
are only one level apart like so far in our app.

00:00:31.155 --> 00:00:38.340
For example, the text input and output components are direct children of card front.

00:00:38.340 --> 00:00:42.100
This makes communication easy to achieve.

00:00:42.100 --> 00:00:45.950
However, there are often circumstances where components

00:00:45.950 --> 00:00:51.005
are nested two or more levels apart and need to communicate.

00:00:51.005 --> 00:00:54.395
This is common as our app grows larger.

00:00:54.395 --> 00:00:58.030
If you consider an app which has a structure like this,

00:00:58.030 --> 00:01:00.305
the two components at the bottom,

00:01:00.305 --> 00:01:04.475
have no direct parent components to pass data between.

00:01:04.475 --> 00:01:07.730
It is possible to keep passing events up the chain,

00:01:07.730 --> 00:01:11.390
back to the top level and pass props all the way back

00:01:11.390 --> 00:01:15.910
down for this can quickly get messy and unmaintainable.

00:01:15.910 --> 00:01:18.065
To make this communication easier,

00:01:18.065 --> 00:01:21.125
we can use what is called an event bus.

00:01:21.125 --> 00:01:25.415
An event bus is nothing more than an empty vue instance,

00:01:25.415 --> 00:01:28.640
which we use as a central data source.

00:01:28.640 --> 00:01:33.155
We import this into any component file where we want to use it.

00:01:33.155 --> 00:01:37.445
This will be useful for the next feature we add to our app.

00:01:37.445 --> 00:01:40.400
Inside of the four card vues,

00:01:40.400 --> 00:01:45.100
I'm going to add a checkbox to mark this section as completed,

00:01:45.100 --> 00:01:49.535
then this will pass data to the header to update a progress bar.

00:01:49.535 --> 00:01:51.545
Like we've seen in the last slide,

00:01:51.545 --> 00:01:57.155
these two components don't share a common parent components to pass data between.

00:01:57.155 --> 00:01:59.500
The progress bar is child to the header,

00:01:59.500 --> 00:02:04.280
and the checkbox is child to the card sections therefore,

00:02:04.280 --> 00:02:07.705
the event bus is ideal for it's service.

00:02:07.705 --> 00:02:15.400
I'm going to add this event bus or this vue instance to our main.js file.

00:02:15.400 --> 00:02:18.920
Head over to the main.js,

00:02:18.920 --> 00:02:23.670
and we need to make sure we add this before the render function.

00:02:24.340 --> 00:02:27.080
Just underneath the imports,

00:02:27.080 --> 00:02:33.300
we're going to export a constant called event bus,

00:02:34.700 --> 00:02:39.220
and we'll set this to a new vue instance.

00:02:41.930 --> 00:02:47.365
This will export a constant called event bus therefore,

00:02:47.365 --> 00:02:50.530
we can now import these into any file we want to access

00:02:50.530 --> 00:02:54.485
it using the event bus name we've already gave it.

00:02:54.485 --> 00:03:00.310
This checkbox will be a new component file so we can add it to the forecast sections.

00:03:00.310 --> 00:03:03.950
We can go ahead and create this in the usual way.

00:03:03.950 --> 00:03:06.990
So go over to the components,

00:03:06.990 --> 00:03:08.790
and then inside the card,

00:03:08.790 --> 00:03:14.950
I'm going to create a new file called SectionCompleted.vue,

00:03:18.800 --> 00:03:25.250
then we can add the template section with the checkbox and also the text.

00:03:26.850 --> 00:03:30.290
Add our templates at the top.

00:03:31.260 --> 00:03:35.900
To begin, I'm going to add a surrounding bus shop row.

00:03:37.250 --> 00:03:41.050
So in the opening section we can add the class of

00:03:41.050 --> 00:03:50.560
row and then a second div nest inside and this is going to be for our form group.

00:03:52.310 --> 00:03:57.610
Let's add some favorable shop classes of form check,

00:03:57.860 --> 00:04:01.720
and also form check in line.

00:04:02.270 --> 00:04:05.415
These are styles which we've used previously.

00:04:05.415 --> 00:04:07.965
These will match the rest of the app.

00:04:07.965 --> 00:04:14.770
Then one more div inside here with the class of form check label.

00:04:21.860 --> 00:04:26.160
This is the surrounding div for our inputs.

00:04:26.630 --> 00:04:30.455
The inputs will have a type of check box,

00:04:30.455 --> 00:04:36.650
so we can select once the current section has been edited, and it's complete.

00:04:39.020 --> 00:04:44.410
Finally, some classes of form check input.

00:04:46.580 --> 00:04:52.180
After here, we can add our text of mark section as completed.

00:04:58.220 --> 00:05:02.600
To begin, I'm going to place this inside of the card front section.

00:05:02.600 --> 00:05:04.820
We can add it to the rest soon.

00:05:04.820 --> 00:05:09.570
So go over to the CardFront.vue,

00:05:11.690 --> 00:05:19.630
and then we can go down to the script and we can add our imports or section completed.

00:05:23.240 --> 00:05:27.225
This is also in the same folder of card,

00:05:27.225 --> 00:05:31.300
so we're going to choose./SectionCompleted.

00:05:35.620 --> 00:05:40.160
Then we can register this as a component inside

00:05:40.160 --> 00:05:47.140
the instance and let's call mine ccSectionCompleted,

00:05:50.750 --> 00:05:57.520
which is the section completed name which we gave to the import just here.

00:06:00.260 --> 00:06:04.969
The component is now ready to add to the templates.

00:06:04.969 --> 00:06:08.905
I will add this at the bottom of the edit section,

00:06:08.905 --> 00:06:12.580
so scroll back up to the templates,

00:06:13.700 --> 00:06:18.100
and the edit section is this first div here.

00:06:18.680 --> 00:06:22.890
Just below the last cc-text-input,

00:06:22.890 --> 00:06:31.510
we can add our cc-section-completed, and the closing tag.

00:06:36.230 --> 00:06:42.640
Give that safe and we should now be able to start the div servers and see the components.

00:06:42.640 --> 00:06:45.190
Mine already running, so I'm going to go over to

00:06:45.190 --> 00:06:48.810
the browser, and then scroll down to the bottom.

00:06:48.810 --> 00:06:51.715
We should now see we have the components on the screen.

00:06:51.715 --> 00:06:55.840
We'll have the checkbox and the text of Mark section as completed.

00:06:55.840 --> 00:07:02.620
The checkbox is appearing off the screen list let's take a look at the SectionCompleted.

00:07:05.690 --> 00:07:13.860
Cover this, so form check label so change that.

00:07:13.860 --> 00:07:15.660
Great, so that was the problem there.

00:07:15.660 --> 00:07:17.790
We just had a styling issue.

00:07:17.790 --> 00:07:20.340
Now, we have this component setup.

00:07:20.340 --> 00:07:25.500
In the next video, we'll use this to emit data to the event bus.
