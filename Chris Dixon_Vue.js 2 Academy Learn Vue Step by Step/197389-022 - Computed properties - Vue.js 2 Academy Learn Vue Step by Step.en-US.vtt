WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.160 --> 00:00:04.845
Far in this course, inside of the few instance,

00:00:04.845 --> 00:00:07.230
we've looked at how we can work with data,

00:00:07.230 --> 00:00:09.029
using a data objects.

00:00:09.029 --> 00:00:13.050
We've also looked at how we can add a message object to,

00:00:13.050 --> 00:00:16.770
which you can use to add functionality to our application.

00:00:16.770 --> 00:00:20.760
Now I want to show you a third property which we

00:00:20.760 --> 00:00:24.840
cannot all view instance called computed properties.

00:00:24.840 --> 00:00:27.240
We mentioned in the last video that in

00:00:27.240 --> 00:00:31.140
too many JavaScript expressions inside of our template,

00:00:31.140 --> 00:00:34.740
can make the code less reusable and harder to maintain.

00:00:34.740 --> 00:00:39.120
We also limited using one JavaScript expression.

00:00:39.120 --> 00:00:42.270
This is where computed properties come in.

00:00:42.270 --> 00:00:45.865
We add them to our view instance just like the data

00:00:45.865 --> 00:00:49.570
and methods objects to add more complex logic.

00:00:49.570 --> 00:00:53.530
There is also another big difference which we'll look at soon.

00:00:53.530 --> 00:00:56.290
Let's add our computed section,

00:00:56.290 --> 00:00:57.805
followed by the colon,

00:00:57.805 --> 00:01:00.560
and this is also an object.

00:01:00.680 --> 00:01:04.915
We can add our properties inside of the computed object,

00:01:04.915 --> 00:01:08.380
just like we've done inside of the methods object.

00:01:08.380 --> 00:01:12.490
I'm going to use a computed property to sort the case names,

00:01:12.490 --> 00:01:16.680
in our array and then return them in alphabetical order.

00:01:16.680 --> 00:01:19.845
It needs type in the name.

00:01:19.845 --> 00:01:22.980
In this case I'm going to call this sort names,

00:01:22.980 --> 00:01:25.830
and this is a function.

00:01:25.830 --> 00:01:29.740
Then inside the body we are going to return some data,

00:01:29.740 --> 00:01:36.530
and the data we want to return is this dot case name dot sort.

00:01:37.740 --> 00:01:42.205
Using salt is normal JavaScript array method,

00:01:42.205 --> 00:01:46.805
just like when we use the push method in forms submitted above.

00:01:46.805 --> 00:01:52.375
For this to work, we need to change one thing inside our index dot HTML.

00:01:52.375 --> 00:01:57.785
We now need to look through the sort names rather than guest name.

00:01:57.785 --> 00:02:01.035
Go over to the index page,

00:02:01.035 --> 00:02:07.700
and change case name to be our computer property of sort names.

00:02:08.390 --> 00:02:11.770
Then let's take a look at this inside the browser and we should

00:02:11.770 --> 00:02:15.230
now see them sorted in alphabetical order.

00:02:26.240 --> 00:02:32.125
We use a computed property when our code within relies on interval property,

00:02:32.125 --> 00:02:35.755
or any of the data from our view instance,

00:02:35.755 --> 00:02:43.015
few JS watches contents and is aware of the computer code and any of its dependencies.

00:02:43.015 --> 00:02:46.855
In this example, we use the guest name data,

00:02:46.855 --> 00:02:50.730
which means will be aware that it is there.

00:02:50.730 --> 00:02:57.880
It will cache the data or the only re-render when the guest name dependency has changed.

00:02:57.880 --> 00:03:02.800
This is where the difference lies between computed properties and methods.

00:03:02.800 --> 00:03:08.050
Methods on the other hand, will always re render when anything changes,

00:03:08.050 --> 00:03:12.980
even if there is no change to the data that it displays.

00:03:12.980 --> 00:03:16.960
Let's take a look at this in action by logging to the console.

00:03:16.960 --> 00:03:20.075
First name are the console log to the form

00:03:20.075 --> 00:03:25.830
submitted method and just simply console log the text of method.

00:03:28.490 --> 00:03:32.630
In the new computed property that we just created.

00:03:32.630 --> 00:03:37.260
We want to log to the console the texts of computed.

00:03:38.720 --> 00:03:45.330
If we go over to the browser and then right-click and open up the console.

00:03:46.000 --> 00:03:50.405
If we then add a name to our guest list and hit submit,

00:03:50.405 --> 00:03:55.280
we can see that both method uncomputed above logged to the console.

00:03:55.280 --> 00:03:58.130
This is expected because we've added to

00:03:58.130 --> 00:04:01.925
the guest name array inside the computer property.

00:04:01.925 --> 00:04:05.690
It's watching the guest name property as a dependency.

00:04:05.690 --> 00:04:11.020
So view is aware that the changes occurred and then re-renders a content.

00:04:11.020 --> 00:04:15.110
We have the method log because as we mentioned before,

00:04:15.110 --> 00:04:16.910
methods always re render,

00:04:16.910 --> 00:04:22.915
when anything changes, even if the data inside has not changed.

00:04:22.915 --> 00:04:28.320
Let's see this behavior in action by adding a new method.

00:04:28.540 --> 00:04:32.855
I'm going to go over to the index page and add a button.

00:04:32.855 --> 00:04:35.550
Just blow the input bone,

00:04:35.630 --> 00:04:41.230
at the normal HTML button with the text or call a method.

00:04:45.590 --> 00:04:50.185
Then we can add a click listener using the short hand.

00:04:50.185 --> 00:04:54.770
So on click, I'm going set this to a method call.

00:04:58.260 --> 00:05:02.050
Now we can go and create this method call inside of the

00:05:02.050 --> 00:05:11.145
app.js Make sure this is below the form submitted method and separated with a comma.

00:05:11.145 --> 00:05:13.220
We set up this method call,

00:05:13.220 --> 00:05:15.665
just before all this function,

00:05:15.665 --> 00:05:17.380
and then inside of the body,

00:05:17.380 --> 00:05:20.000
we're going to set the styles.

00:05:20.000 --> 00:05:28.700
All we're going do is set this up styles and then change the margin top to be 50 pixels.

00:05:28.970 --> 00:05:33.790
This is a method which has nothing to do with the guest name data.

00:05:33.790 --> 00:05:37.115
Let's see what happens when we call this new method.

00:05:37.115 --> 00:05:39.580
Let's go back over to the App,

00:05:39.580 --> 00:05:44.520
type in a new name into the input field and then click submit.

00:05:44.570 --> 00:05:48.185
We see both the methods and computed first,

00:05:48.185 --> 00:05:50.375
which is a behavior we have seen before,

00:05:50.375 --> 00:05:52.420
this is what we expect.

00:05:52.420 --> 00:05:56.900
However, when we call the new method by pressing the new button,

00:05:56.900 --> 00:05:59.735
we only see the method logged,

00:05:59.735 --> 00:06:05.285
this is because our new method call only effects the margin top

00:06:05.285 --> 00:06:07.490
data property and have

00:06:07.490 --> 00:06:12.515
a computed property is only watching for changes to the guest name property.

00:06:12.515 --> 00:06:17.630
This means that, computed will not be logged because no changes has been made.

00:06:17.630 --> 00:06:22.760
However, we still get a method call because all methods are always re-rendered,

00:06:22.760 --> 00:06:25.805
even if the data inside them has not changed.

00:06:25.805 --> 00:06:31.400
This means unless you have a specific reason to re-render method each time,

00:06:31.400 --> 00:06:35.980
then computed properties will be a more efficient way of doing things.

00:06:35.980 --> 00:06:39.320
For a lot of cases. Using a computed property,

00:06:39.320 --> 00:06:41.480
auto method will achieve the same

00:06:41.480 --> 00:06:47.005
results.Just bear in mind this difference in the behavior behind the scenes.

00:06:47.005 --> 00:06:51.485
Before we wrap up this video is a few key points I want to show you.

00:06:51.485 --> 00:06:55.810
First of all, let's add a test to our methods objects,

00:06:55.810 --> 00:06:58.225
to simply do a console log.

00:06:58.225 --> 00:07:02.020
Let's go back of the methods and creates our test method,

00:07:02.020 --> 00:07:04.910
satisfying the same way as a function which does

00:07:04.910 --> 00:07:08.240
a console log and simply outputs the console,

00:07:08.240 --> 00:07:11.100
the texts of method text.

00:07:17.930 --> 00:07:19.970
Over in the index page,

00:07:19.970 --> 00:07:22.070
I'm going to go below the button which is

00:07:22.070 --> 00:07:27.270
created and call this method inside of our double curly braces.

00:07:30.140 --> 00:07:32.705
At the method name of test,

00:07:32.705 --> 00:07:36.210
save that and let's go over to the browser.

00:07:36.520 --> 00:07:39.635
We can see that we'll get an error.

00:07:39.635 --> 00:07:42.950
This is because when calling a method inside

00:07:42.950 --> 00:07:46.834
the triple curly braces as a JavaScript expression,

00:07:46.834 --> 00:07:49.870
we need to call it use the parenthesis.

00:07:49.870 --> 00:07:53.560
So are the parenthesis just after text.

00:07:54.170 --> 00:07:59.085
Let's save and take a look at that and we can see in our works.

00:07:59.085 --> 00:08:03.095
However, when colonists as a computed property,

00:08:03.095 --> 00:08:05.765
the parenthesis is not used.

00:08:05.765 --> 00:08:09.350
The series action, we can move our method over in after

00:08:09.350 --> 00:08:14.760
JS and setup a computed property in place.

00:08:16.460 --> 00:08:24.740
Let's put this and then paste it below as a computed property, and then save that.

00:08:24.740 --> 00:08:29.280
If we remove the parentheses over in the index page,

00:08:29.390 --> 00:08:34.700
and then say if we can go over to the browser and we can see that this now works,

00:08:34.700 --> 00:08:37.010
will now get the console log to.

00:08:37.010 --> 00:08:40.490
One drawback when using computed properties is that,

00:08:40.490 --> 00:08:43.720
we are unable to perform asynchronous tasks.

00:08:43.720 --> 00:08:47.135
We can however do this by using a watch option,

00:08:47.135 --> 00:08:49.550
which is provided by VGS.

00:08:49.550 --> 00:08:52.655
This is also an alternative computed properties,

00:08:52.655 --> 00:08:55.830
and we'll take a look at this in the next video.
