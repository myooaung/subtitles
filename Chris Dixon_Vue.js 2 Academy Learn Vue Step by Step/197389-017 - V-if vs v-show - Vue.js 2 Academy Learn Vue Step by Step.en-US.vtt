WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.040 --> 00:00:05.925
We looked at the v-if directive earlier on in this section.

00:00:05.925 --> 00:00:08.820
This allowed us to show guest names in the div at

00:00:08.820 --> 00:00:11.910
the bottom of the page if any names exist.

00:00:11.910 --> 00:00:15.915
Otherwise, we display the text of no names added yet.

00:00:15.915 --> 00:00:22.500
There is also an alternative syntax which Vue.js makes available to us called v-show.

00:00:22.500 --> 00:00:26.890
This is also a directive which conditionally renders some content,

00:00:26.890 --> 00:00:29.535
just like when using v-if.

00:00:29.535 --> 00:00:33.940
However, there are some differences which we will look at now.

00:00:33.940 --> 00:00:39.660
First if we go to our index page and look for the v-if statements,

00:00:40.930 --> 00:00:44.760
that changes to v-show.

00:00:47.090 --> 00:00:52.015
If we save that and then go over to our app and then hit refresh,

00:00:52.015 --> 00:00:56.930
the first thing we'll see is the text inside the else condition is gone.

00:00:56.930 --> 00:00:59.000
This behavior is expected.

00:00:59.000 --> 00:01:03.800
As of course, a v-else statement can only follow a v-if statement.

00:01:03.800 --> 00:01:05.600
If we go to the console,

00:01:05.600 --> 00:01:09.710
we can see that this error is highlighted inside there.

00:01:11.010 --> 00:01:14.840
There is also another difference going on behind the scenes,

00:01:14.840 --> 00:01:18.305
which relates to how the element is rendered.

00:01:18.305 --> 00:01:21.630
When using v-if, the element it is linked

00:01:21.630 --> 00:01:25.605
to is added to the DOM when the condition becomes true,

00:01:25.605 --> 00:01:31.730
then it is destroyed or completely removed from the DOM when the condition becomes false.

00:01:31.730 --> 00:01:34.955
So because v-if is only rendered when needed,

00:01:34.955 --> 00:01:38.230
it can save on render time if this is a concern.

00:01:38.230 --> 00:01:40.770
V-show works a little differently.

00:01:40.770 --> 00:01:44.835
The element v-show is attached to is always rendered,

00:01:44.835 --> 00:01:48.700
regardless if the condition is true or false to begin with.

00:01:48.700 --> 00:01:54.800
It is then toggled on or off by changing the CSS display property.

00:01:54.800 --> 00:01:57.475
Let's take a look at this in action.

00:01:57.475 --> 00:02:03.159
If we open up the Developer tools and go to Inspect,

00:02:04.730 --> 00:02:10.070
we can see this in action by selecting the div inside the card-block div,

00:02:10.070 --> 00:02:13.555
that the display property is set to none,

00:02:13.555 --> 00:02:17.560
which has the effect of hiding the elements.

00:02:17.750 --> 00:02:21.095
If we then add a name to the input field,

00:02:21.095 --> 00:02:24.350
we see that the display property of none is then

00:02:24.350 --> 00:02:30.510
removed and we now see that the div tags with the name is added.

00:02:30.850 --> 00:02:33.560
For the case of this particular app,

00:02:33.560 --> 00:02:36.230
we also need to use the v-else directive.

00:02:36.230 --> 00:02:39.670
So I'm going to stick with using v-if and v-else.

00:02:39.670 --> 00:02:43.670
However, using v-show is a good alternative if you want to

00:02:43.670 --> 00:02:47.255
keep your elements inside of the DOM and just hide them,

00:02:47.255 --> 00:02:52.200
rather than completely destroying and re-render into the DOM when required.

00:02:52.370 --> 00:02:55.475
The performance difference between toggling

00:02:55.475 --> 00:03:01.210
the display property versus rendering using v-if may never be an issue for you,

00:03:01.210 --> 00:03:02.960
but it is worth knowing the difference,

00:03:02.960 --> 00:03:05.900
especially on larger scale apps.
