WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.430 --> 00:00:06.735
Now, we know how the Vue life-cycle works and how we can tap into

00:00:06.735 --> 00:00:12.015
each of these life-cycle phases using Hooke's provided to us by Vue js.

00:00:12.015 --> 00:00:15.720
These hooks are pretty straightforward to add to our app.

00:00:15.720 --> 00:00:19.770
I'm now going to show you a basic example of these in action.

00:00:19.770 --> 00:00:24.330
All we're going to do is create each of these hooks we looked at in the last video and

00:00:24.330 --> 00:00:29.385
then simply do a console log once each one of these hooks is called.

00:00:29.385 --> 00:00:31.560
This is useful as we can see,

00:00:31.560 --> 00:00:34.470
the order in which they're logged to the console.

00:00:34.470 --> 00:00:37.200
During the instance life-cycle,

00:00:37.200 --> 00:00:40.975
these hooks are added to the root of the view instance

00:00:40.975 --> 00:00:45.110
rather than inside any of the methods or data properties.

00:00:45.110 --> 00:00:49.135
Let's go over to our app.js.

00:00:49.135 --> 00:00:57.040
Then if we scroll down to the bottom of vm1 and then add a comma just after filters,

00:00:57.040 --> 00:00:59.595
here, we can add our first hook,

00:00:59.595 --> 00:01:02.500
which is going to be beforeCreates.

00:01:02.570 --> 00:01:06.080
The syntax is pretty similar to the methods.

00:01:06.080 --> 00:01:08.215
This is a function.

00:01:08.215 --> 00:01:11.580
Then inside the function body,

00:01:11.580 --> 00:01:15.280
we can ask our console log.

00:01:17.270 --> 00:01:22.950
I'm just going to simply console log the text of beforeCreates.

00:01:25.340 --> 00:01:29.720
Although this is a simple example with a console log,

00:01:29.720 --> 00:01:30.980
inside this function body,

00:01:30.980 --> 00:01:36.190
we can add any code that we want to run before the instance has been created.

00:01:36.190 --> 00:01:41.730
I'm going to add a comma at the end and then just copy this before I create hook.

00:01:42.740 --> 00:01:46.100
Then I'm going to paste this in seven more times so

00:01:46.100 --> 00:01:49.100
you can see all of the eight hooks in action,

00:01:49.100 --> 00:01:52.640
so 1, 2, 3,

00:01:52.640 --> 00:01:56.245
4, 5, 6, 7.

00:01:56.245 --> 00:01:59.890
Now, I'm going to remove the comma from the last one.

00:02:01.220 --> 00:02:05.200
The second one is the creative hook.

00:02:07.190 --> 00:02:12.090
Then change the text to created inside the console log.

00:02:14.570 --> 00:02:17.830
We then have beforeMount.

00:02:22.480 --> 00:02:25.325
Then of course, next job is mounted,

00:02:25.325 --> 00:02:30.660
so change the name to the mounted hook and then add the text inside the console log.

00:02:33.650 --> 00:02:36.795
Then we move on to the updated phases.

00:02:36.795 --> 00:02:39.910
First, we have beforeUpdate,

00:02:45.140 --> 00:02:48.460
followed by updated.

00:02:52.160 --> 00:02:55.995
Then finally, the last two is a destroyed phase,

00:02:55.995 --> 00:03:00.010
so the second to last is beforeDestroy.

00:03:05.900 --> 00:03:15.060
Then finally, the last hook is the destroyed phase. Save that.

00:03:15.060 --> 00:03:17.080
If we now go to the browser and

00:03:17.080 --> 00:03:21.110
then right-click and "Inspect" to open up the developer tools.

00:03:23.660 --> 00:03:28.815
Select the console and we can see that the first four hooks are called,

00:03:28.815 --> 00:03:31.800
we have beforeCreates, created,

00:03:31.800 --> 00:03:35.260
beforeMount and also mounted.

00:03:35.420 --> 00:03:40.685
This makes sense because the instance has been created and also mounted.

00:03:40.685 --> 00:03:43.550
But we have not caused any data changes to

00:03:43.550 --> 00:03:47.675
update or cause the instance yet to be destroyed.

00:03:47.675 --> 00:03:52.740
If we go up to the input field and type something inside of there,

00:03:53.810 --> 00:04:01.320
we can see now we have the before updates and updates fired for each keystroke we make.

00:04:01.420 --> 00:04:05.630
We have this behavior because we have the data property

00:04:05.630 --> 00:04:09.740
of new name text setup inside our data objects.

00:04:09.740 --> 00:04:15.770
Also, we added this to the input field with two-way data binding using V model.

00:04:15.770 --> 00:04:18.785
Remember too that any data property setup,

00:04:18.785 --> 00:04:21.860
chose in the creation of the view instance is then

00:04:21.860 --> 00:04:26.200
watched by Vue js and updates trigger a re-render.

00:04:26.200 --> 00:04:32.480
This only leaves a beforeDestroy and destroyed life-cycle hooks to be triggered.

00:04:32.480 --> 00:04:36.470
If you remember from the using string templates video,

00:04:36.470 --> 00:04:40.145
we used the Vue instance method provided tools called $Mounts to

00:04:40.145 --> 00:04:45.880
mount the template to the selected div in the place of the el property.

00:04:45.880 --> 00:04:52.120
Vue js also provides us with another instance method called $Destroy.

00:04:52.120 --> 00:04:57.590
This as it sounds, destroys a Vue instance and does all of the clean-up work,

00:04:57.590 --> 00:05:03.410
such as removing all event listeners and on binding all the directives which we setup.

00:05:03.410 --> 00:05:08.160
If we go back to the index page and locate the form,

00:05:08.830 --> 00:05:12.290
we already have an event handler on submit.

00:05:12.290 --> 00:05:16.365
We can easily use it to call the destroy method,

00:05:16.365 --> 00:05:21.020
so if we just add $Destroy inside of there.

00:05:22.040 --> 00:05:28.550
Now, if we refresh the browser and then type in some text to trigger an update.

00:05:28.550 --> 00:05:33.470
Then finally, press the button that's called the "Destroy Method," we

00:05:33.470 --> 00:05:38.970
can now see all of the life-cycle hooks are now triggered inside the console.

00:05:39.950 --> 00:05:44.070
Now, our vm1 instance has been destroyed.

00:05:44.070 --> 00:05:47.950
Vue is no longer in control of our sign up section.

00:05:47.950 --> 00:05:53.120
We can see this by trying to add a new name to our guest list.

00:05:54.230 --> 00:05:57.400
You will know it's inside the console as we type,

00:05:57.400 --> 00:05:59.765
no updates are triggered.

00:05:59.765 --> 00:06:06.595
Our Vue instance has been disconnected and now has no control over the outputs.

00:06:06.595 --> 00:06:08.815
The HTML is still in place.

00:06:08.815 --> 00:06:11.335
It just will not be updated anymore.

00:06:11.335 --> 00:06:17.360
Let's finish off by going back over to the index page and back to the submit method.

00:06:18.380 --> 00:06:22.540
We can remove the destroy method and then reinstate

00:06:22.540 --> 00:06:27.620
the app to work in order by adding our form submitted method.

00:06:29.690 --> 00:06:36.940
This is how the Vue js life-cycle works in practice and how we can hook into each stage.

00:06:36.940 --> 00:06:40.220
Obviously, each life-cycle hook can be used to perform

00:06:40.220 --> 00:06:43.820
more complex tasks than a simple console log.

00:06:43.820 --> 00:06:46.820
But I just wanted to show you what stage each hook

00:06:46.820 --> 00:06:50.520
is called and also show them in action.
