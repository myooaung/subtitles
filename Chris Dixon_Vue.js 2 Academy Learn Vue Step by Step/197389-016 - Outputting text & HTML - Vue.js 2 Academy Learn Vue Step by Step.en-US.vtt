WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.770 --> 00:00:04.725
So far in this course, we've outputted reactive data

00:00:04.725 --> 00:00:08.894
using interpolation or the double curly brace syntax.

00:00:08.894 --> 00:00:11.520
Now I want to introduce you to

00:00:11.520 --> 00:00:17.305
a few more directives which you may come across a lot of useful when outputting data.

00:00:17.305 --> 00:00:21.005
First is a simple one called v-text.

00:00:21.005 --> 00:00:25.790
V-text is used to obtain the elements text content.

00:00:25.790 --> 00:00:31.990
Text content, sets or returns the text content of an element.

00:00:31.990 --> 00:00:37.715
We can use it as an alternative to double curly braces to run the text just like

00:00:37.715 --> 00:00:43.310
this if we go over to our index page and locate the card block,

00:00:43.310 --> 00:00:46.170
which has the event information.

00:00:46.570 --> 00:00:49.010
Inside the level for heading,

00:00:49.010 --> 00:00:57.750
we can add the v-text as attributes and also set this equal to event.event title.

00:00:59.300 --> 00:01:03.450
You may notice we have event.event title twice;

00:01:03.450 --> 00:01:08.640
one is using v-text and one is using the original text interpolation.

00:01:08.640 --> 00:01:11.720
However, if we go to the browser and refresh,

00:01:11.720 --> 00:01:15.035
we can only see this title displayed once.

00:01:15.035 --> 00:01:18.650
This is because the original title use need

00:01:18.650 --> 00:01:23.525
double curly braces is replaced by setting the text content attributes.

00:01:23.525 --> 00:01:30.985
We can prove this by going over to v-text and changing this to event.eventTitle2.

00:01:30.985 --> 00:01:33.950
Then if we go over to app.js,

00:01:33.950 --> 00:01:36.470
we can add our eventTitle2,

00:01:36.470 --> 00:01:40.475
just below the original event title and want to set this to

00:01:40.475 --> 00:01:45.690
a string of v-text output so we can clearly see the difference.

00:01:48.650 --> 00:01:54.385
Once you've added up, let's go over to the browser and then refresh.

00:01:54.385 --> 00:01:57.400
We can still see that the v-text will take

00:01:57.400 --> 00:02:02.330
priority even though the double curly braces is still in place.

00:02:02.330 --> 00:02:06.735
The next directive I want to look at is v-html.

00:02:06.735 --> 00:02:09.040
V-texts, which we've just looked at,

00:02:09.040 --> 00:02:11.580
updates the elements text content.

00:02:11.580 --> 00:02:16.855
Whereas using v-html, we obtain the elements in HTML.

00:02:16.855 --> 00:02:22.135
You may be familiar with certain in HTML if you've used JavaScript before.

00:02:22.135 --> 00:02:26.020
v-html if you've used to output real HTML.

00:02:26.020 --> 00:02:30.270
If we tried to add HTML code inside the double curly braces,

00:02:30.270 --> 00:02:33.200
it will be interpreted as plain text.

00:02:33.200 --> 00:02:35.725
Let's take a look at this in action,

00:02:35.725 --> 00:02:40.500
if we go back to the index page with our event information.

00:02:40.500 --> 00:02:49.185
If we cut out the text or add name to the guest list for exclusive offers. So could this.

00:02:49.185 --> 00:02:52.270
Then if we go over to the app.js,

00:02:52.270 --> 00:03:03.165
we can add a new dates property of sign-up texts and then paste this in as a string,

00:03:03.165 --> 00:03:07.355
so save that and then if you add some content,

00:03:07.355 --> 00:03:11.880
such as adding the m tags around the word exclusive.

00:03:15.110 --> 00:03:19.110
Now we go and make show text and HTML.

00:03:19.110 --> 00:03:22.520
Let's try and render this over in the index page.

00:03:22.520 --> 00:03:24.380
If we go back to where we just cut out

00:03:24.380 --> 00:03:29.525
the text and we'll try to output this with the double curly braces,

00:03:29.525 --> 00:03:35.655
so event.signUpText and then save that.

00:03:35.655 --> 00:03:37.085
If we refresh the browser,

00:03:37.085 --> 00:03:39.710
the HTML is outputted as text,

00:03:39.710 --> 00:03:43.760
so we can see the HTML tags. This isn't what we want.

00:03:43.760 --> 00:03:45.890
Instead to display this correctly,

00:03:45.890 --> 00:03:50.830
we need to add the sign up text to the v-html directive.

00:03:50.830 --> 00:03:55.310
Let's add v html as an attribute and then remove

00:03:55.310 --> 00:04:04.685
the curly braces and

00:04:04.685 --> 00:04:05.625
now I hit "Save".

00:04:05.625 --> 00:04:08.280
Now if we refresh the data is rendered as

00:04:08.280 --> 00:04:13.770
HTML and we now have the word exclusive emphasized as we intended.

00:04:14.230 --> 00:04:16.895
We do need to be cautious, however,

00:04:16.895 --> 00:04:20.285
when using v-html for security reasons.

00:04:20.285 --> 00:04:24.005
Anywhere where HTML is dynamically added to our website,

00:04:24.005 --> 00:04:27.545
we should only use v-html on trusted content.

00:04:27.545 --> 00:04:31.885
We must not allow it to be used when content is provided by an end-user,

00:04:31.885 --> 00:04:35.465
as this can lead to potential cross-site scripting attacks,

00:04:35.465 --> 00:04:37.700
so just be aware of this.

00:04:37.700 --> 00:04:40.640
Also if we're working with just text,

00:04:40.640 --> 00:04:46.910
using v-text to obtain the text content can be safer and also help against these attacks.

00:04:46.910 --> 00:04:50.290
It can also have better performance for plain text 2,

00:04:50.290 --> 00:04:53.690
as a text is not passed as HTML.

00:04:54.270 --> 00:05:00.100
Finally, the last directive I want to show you in this video is v-once.

00:05:00.100 --> 00:05:03.515
This can be used to render data only once.

00:05:03.515 --> 00:05:06.380
Once the data is rendered using view,

00:05:06.380 --> 00:05:08.450
if the data is unchanged,

00:05:08.450 --> 00:05:13.085
the elements or components will not be updated or re-rendered.

00:05:13.085 --> 00:05:19.495
This can be used to optimize performance for our app to avoid unnecessary re-rendering.

00:05:19.495 --> 00:05:22.840
Our event title may be a good use case for this,

00:05:22.840 --> 00:05:25.850
as we can expect that once an event is created,

00:05:25.850 --> 00:05:28.200
the name will remain the same.

00:05:28.310 --> 00:05:32.225
All we need to do to enable this one's only rendering

00:05:32.225 --> 00:05:36.335
is to add the v-once directive to the elements.

00:05:36.335 --> 00:05:41.830
Let's remove this v-text attribute and then replace it with v-once.

00:05:41.830 --> 00:05:44.510
This now means that data will only be loaded

00:05:44.510 --> 00:05:47.825
once and not for any data changes in the future.

00:05:47.825 --> 00:05:52.250
We can't currently demonstrate since we're not using a web server to serve our page at

00:05:52.250 --> 00:05:57.400
the moments so the data will not be updated anyway from the view instance.

00:05:57.400 --> 00:06:01.865
We've just simply open up the index page to view in the browser.

00:06:01.865 --> 00:06:04.540
We can see this in action in a later video,

00:06:04.540 --> 00:06:06.330
where we'll use a development server.

00:06:06.330 --> 00:06:09.685
But for now you can see that this is available if needed.

00:06:09.685 --> 00:06:12.675
This is how we can use the v-text,

00:06:12.675 --> 00:06:16.110
v-HTML and v-once directives.

00:06:16.110 --> 00:06:19.235
Next up, let's look at an alternative to v-if,

00:06:19.235 --> 00:06:22.530
which we looked at early on in this section.
