WEBVTT
1
1

00:00:00.300  -->  00:00:01.410
<v Edward>In this demo, I'm going</v>
2

2

00:00:01.410  -->  00:00:03.883
to show you how to start using volumes.
3

3

00:00:05.530  -->  00:00:07.950
I'm going to use my kops cluster again.
4

4

00:00:07.950  -->  00:00:11.750
So I logged in again in my vagrant xenial box,
5

5

00:00:11.750  -->  00:00:14.220
and first, you will need to create a volume
6

6

00:00:14.220  -->  00:00:17.390
on alias and, if you're working with kops
7

7

00:00:17.390  -->  00:00:20.700
then you must have set up the alias tool
8

8

00:00:20.700  -->  00:00:23.410
because that was one of the prerequisites.
9

9

00:00:23.410  -->  00:00:24.790
So I'm going to use the alias tool
10

10

00:00:24.790  -->  00:00:25.933
to create a volume.
11

11

00:00:26.850  -->  00:00:29.697
I'm going to use alias ec2 create-volume,
12

12

00:00:29.697  -->  00:00:32.510
and I'm going to create a volume of size 10
13

13

00:00:32.510  -->  00:00:36.570
in US1a and it's going to be general purpose 2,
14

14

00:00:36.570  -->  00:00:38.393
which is just an ssd volume.
15

15

00:00:39.250  -->  00:00:40.840
Make sure that you create your volume
16

16

00:00:40.840  -->  00:00:45.800
in the same zone that your kubernetes cluster is spelt out.
17

17

00:00:45.800  -->  00:00:47.450
Otherwise it's not going to work.
18

18

00:00:48.480  -->  00:00:52.203
This is the volume ID that you need to select.
19

19

00:00:53.160  -->  00:00:54.340
You need to copy paste this,
20

20

00:00:54.340  -->  00:00:56.380
and then I'm going to insert this into
21

21

00:00:56.380  -->  00:00:58.623
my hello world with volume.
22

22

00:00:59.480  -->  00:01:01.370
So I'm going to replace,
23

23

00:01:01.370  -->  00:01:03.670
I'm going to use this volume ID,
24

24

00:01:03.670  -->  00:01:05.313
I'm going to put it right here.
25

25

00:01:07.990  -->  00:01:10.300
Volume ID in the volume ID.
26

26

00:01:10.300  -->  00:01:12.920
And this volume ID is going to be attached
27

27

00:01:12.920  -->  00:01:15.570
to the node that this port is going to run on.
28

28

00:01:15.570  -->  00:01:17.150
And it's going to be mounted under
29

29

00:01:17.150  -->  00:01:19.301
slash my volume.
30

30

00:01:19.301  -->  00:01:21.470
(typing)
31

31

00:01:21.470  -->  00:01:24.400
Let me first check whether my nodes are running.
32

32

00:01:24.400  -->  00:01:26.530
I have three nodes running.
33

33

00:01:26.530  -->  00:01:28.780
And then I'm going to launch this deployment.
34

34

00:01:29.670  -->  00:01:31.220
Hello world deployment created.
35

35

00:01:32.180  -->  00:01:33.407
Kubectl get pod.
36

36

00:01:34.980  -->  00:01:36.523
Container is creating.
37

37

00:01:42.590  -->  00:01:43.833
It's pulling the image.
38

38

00:01:45.740  -->  00:01:47.493
And now our container is created.
39

39

00:01:48.679  -->  00:01:51.860
We have volume here, my volume which is
40

40

00:01:51.860  -->  00:01:54.467
a Persistent Disk resource in AWS.
41

41

00:01:54.467  -->  00:01:58.693
AWS Elastic Blockstore with volume ID.
42

42

00:01:59.600  -->  00:02:01.403
So I should now be able to,
43

43

00:02:04.620  -->  00:02:06.783
execute something in this pod.
44

44

00:02:11.170  -->  00:02:13.580
Let me just start bash.
45

45

00:02:13.580  -->  00:02:16.643
And I should have volume my vol.
46

46

00:02:18.500  -->  00:02:22.000
Now let me just write something in this my vol
47

47

00:02:22.000  -->  00:02:24.050
just to see how it works,
48

48

00:02:24.050  -->  00:02:28.083
I'm going to write test in my vol my vol dot txt.
49

49

00:02:28.950  -->  00:02:31.233
I'm also going to write test in,
50

50

00:02:32.800  -->  00:02:37.533
test two, in slash test dot txt.
51

51

00:02:39.210  -->  00:02:40.323
We have two files,
52

52

00:02:42.220  -->  00:02:44.560
my vol my vol txt,
53

53

00:02:44.560  -->  00:02:46.300
and test txt.
54

54

00:02:46.300  -->  00:02:49.110
And just think about what is going to happen
55

55

00:02:49.110  -->  00:02:50.470
if this pod crashes.
56

56

00:02:50.470  -->  00:02:51.890
Cause we wrote something in slash
57

57

00:02:51.890  -->  00:02:53.740
and we wrote something in the volume.
58

58

00:02:55.390  -->  00:02:57.690
When those couple go,
59

59

00:02:57.690  -->  00:03:01.270
well if the node goes,
60

60

00:03:01.270  -->  00:03:03.170
then the port needs to be rescheduled.
61

61

00:03:04.150  -->  00:03:07.010
So this pod is running on
62

62

00:03:08.260  -->  00:03:11.453
the node with this IP address.
63

63

00:03:14.230  -->  00:03:16.160
So if you want to test what would happen
64

64

00:03:16.160  -->  00:03:18.400
if the node would be rescheduled,
65

65

00:03:18.400  -->  00:03:21.070
we could drain a node,
66

66

00:03:21.070  -->  00:03:24.120
which means we prepare the node to go offline.
67

67

00:03:24.120  -->  00:03:26.083
So we can say kubectl drain,
68

68

00:03:27.020  -->  00:03:28.350
and then the node.
69

69

00:03:28.350  -->  00:03:30.793
And going to start draining the nodes.
70

70

00:03:32.020  -->  00:03:33.683
Just going to use force here.
71

71

00:03:35.640  -->  00:03:37.510
So that port is for sure killed.
72

72

00:03:37.510  -->  00:03:40.717
Then I'm going to kubectl get pod.
73

73

00:03:41.690  -->  00:03:46.690
And already a new pod is being created.
74

74

00:03:48.010  -->  00:03:49.930
Say if I describe this one,
75

75

00:03:49.930  -->  00:03:50.833
describe pod,
76

76

00:03:51.730  -->  00:03:52.927
and then the new pod.
77

77

00:03:56.290  -->  00:03:58.380
Then can see that this pod is now attached
78

78

00:03:58.380  -->  00:03:59.803
to another instance.
79

79

00:04:00.740  -->  00:04:02.360
Just have to wait a little bit,
80

80

00:04:02.360  -->  00:04:03.663
til the warnings go away.
81

81

00:04:06.090  -->  00:04:11.090
And now the volume is attached to this new node.
82

82

00:04:11.460  -->  00:04:14.570
So what happened is that this volume detached
83

83

00:04:14.570  -->  00:04:15.930
from the old node,
84

84

00:04:15.930  -->  00:04:19.130
and now is reattached to the new node.
85

85

00:04:19.130  -->  00:04:21.420
So our container has been recreated,
86

86

00:04:21.420  -->  00:04:24.333
but we are still using the same volume.
87

87

00:04:25.610  -->  00:04:27.133
So let me log in again,
88

88

00:04:28.270  -->  00:04:31.303
let me open a shell on our new pod.
89

89

00:04:34.530  -->  00:04:38.620
And if I take a look in my vol, I will see
90

90

00:04:38.620  -->  00:04:42.130
that I still have my vol txt.
91

91

00:04:42.130  -->  00:04:45.433
But of course because this is new container,
92

92

00:04:47.030  -->  00:04:49.520
I don't have test dot txt anymore,
93

93

00:04:49.520  -->  00:04:53.310
cause test dot txt was not saved in the volume
94

94

00:04:53.310  -->  00:04:54.670
within the container itself.
95

95

00:04:54.670  -->  00:04:56.500
And then the pod gets rescheduled,
96

96

00:04:56.500  -->  00:04:58.000
all the information that has been written
97

97

00:04:58.000  -->  00:05:00.510
to the container disappears.
98

98

00:05:00.510  -->  00:05:02.580
So when you have a stateful application
99

99

00:05:02.580  -->  00:05:04.250
that needs to ride something,
100

100

00:05:04.250  -->  00:05:07.050
Then you always need to use volumes,
101

101

00:05:07.050  -->  00:05:11.160
because then your data will be kept even
102

102

00:05:11.160  -->  00:05:12.680
if the node crashes,
103

103

00:05:12.680  -->  00:05:16.000
or even if the node needs to be rescheduled.
104

104

00:05:16.000  -->  00:05:17.830
And this can happen all the time.
105

105

00:05:17.830  -->  00:05:20.210
Stateful applications you can only use
106

106

00:05:20.210  -->  00:05:22.540
with volumes or some other mechanism
107

107

00:05:22.540  -->  00:05:23.870
to save the data.
108

108

00:05:23.870  -->  00:05:26.880
Not inside the container itself, but using a volume
109

109

00:05:26.880  -->  00:05:28.180
or using external sources.
110

110

00:05:29.580  -->  00:05:30.800
In the next lectures,
111

111

00:05:30.800  -->  00:05:32.330
I will show you how kubernetes can
112

112

00:05:32.330  -->  00:05:35.000
automatically create those folders for you.
113

113

00:05:35.000  -->  00:05:37.720
When you're finished, make sure that you remove
114

114

00:05:37.720  -->  00:05:39.680
this volume again.
115

115

00:05:39.680  -->  00:05:40.563
So this,
116

116

00:05:41.400  -->  00:05:43.733
volume needs to be deleted.
117

117

00:05:45.280  -->  00:05:50.280
Aws, ec2, delete volume with the volume ID.
118

118

00:05:52.110  -->  00:05:53.423
And then the volume ID.
119

119

00:05:55.110  -->  00:05:57.380
Of course, when it's not attached anymore,
120

120

00:05:57.380  -->  00:06:00.100
so you can only do this when it's detached.
121

121

00:06:00.100  -->  00:06:02.823
So first can do remove,
122

122

00:06:04.620  -->  00:06:05.463
your pod,
123

123

00:06:06.900  -->  00:06:09.643
and then if you wait some time you'll be able to detach it.
