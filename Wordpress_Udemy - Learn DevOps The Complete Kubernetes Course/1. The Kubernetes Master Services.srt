1
00:00:00,450 --> 00:00:06,750
You just finished the advanced topics section and this is going to be the next section the Administration Section

2
00:00:06,750 --> 00:00:12,360
where I will explain the Kubernetes administration topics.

3
00:00:12,360 --> 00:00:18,620
The first topic is going to be the master services, I've been talking a lot about the node itself.

4
00:00:18,660 --> 00:00:21,970
Now, let's have a look at what is running on the master nodes.

5
00:00:23,710 --> 00:00:29,440
This is architectural overview of the Kubernetes master services. On the right

6
00:00:29,480 --> 00:00:33,140
you have not one and all the nodes that you can have in a cluster.

7
00:00:33,330 --> 00:00:36,210
I already discussed those in previous lectures.

8
00:00:36,650 --> 00:00:43,180
Let's focus now on the master components. To communicate with you cluster,

9
00:00:43,190 --> 00:00:52,070
you have been using "kubectl". Here on top, "kubectl" is going to communicate to the "REST" interface.

10
00:00:52,070 --> 00:00:54,930
First, before it can pauses the "REST" interface it needs to do "Authorization".

11
00:00:54,930 --> 00:01:03,620
"kubectl" needs first archive and can then only execute commands to the REST interface.

12
00:01:03,640 --> 00:01:10,940
Every time you sense new resources new objects to this "REST" interface using "kubectl" these objects are going to be saved.

13
00:01:11,000 --> 00:01:14,430
And Kubernetes uses "etcd" as a back end.

14
00:01:14,440 --> 00:01:18,460
That's what you see here at the bottom right.

15
00:01:18,590 --> 00:01:22,470
When you sense a new object let's see a new pod definition.

16
00:01:22,610 --> 00:01:25,560
Then the pod definition will be stored in "etcd".

17
00:01:25,790 --> 00:01:32,900
"Etcd" is a separate technology and it's just a cluster, a distributed data store, that exist often

18
00:01:33,050 --> 00:01:34,770
in three or five nodes.

19
00:01:34,940 --> 00:01:36,150
You can also have one then,

20
00:01:36,170 --> 00:01:42,550
but then it's not running in high availability, so typically we would have three or five. Three for smaller clusters, five for bigger clusters.

21
00:01:42,550 --> 00:01:48,020
Because, all your your data in kubernetes, the definitions are going to be stored

22
00:01:48,110 --> 00:01:52,390
in distributed data storage. So, the "REST" interface is communicating with "etcd".

23
00:01:52,430 --> 00:01:58,370
This REST api, is called the kube-api server.

24
00:01:58,410 --> 00:02:04,540
Then you also have a scheduler that communicates with this "REST" interface.

25
00:02:04,620 --> 00:02:07,140
This scheduler is scheduling pods that are not scheduled yet,

26
00:02:07,250 --> 00:02:12,290
and this will become pluggable, so that you can use whatever scheduler that you want.

27
00:02:12,570 --> 00:02:17,830
You can use a default Kubernetes scheduler or you will be able to plug in some other schedulers.

28
00:02:18,060 --> 00:02:22,500
You also have the "Controller Manager" and the "Controller Manager" exists of multiple controllers.

29
00:02:22,500 --> 00:02:28,200
You can have a node controller, which is responsible to discover new nodes, and then manage those nodes,

30
00:02:28,560 --> 00:02:33,650
or you have the "Replication Controller", which is managing the replicas of pods

31
00:02:33,660 --> 00:02:42,010
if you have those defined. This "REST" interface then communicate with "kubelets". "Kubelets" are found on the nodes,

32
00:02:42,060 --> 00:02:48,550
the "REST" interface communicates with those on every separate node. From a 10,000 foot overview

33
00:02:48,550 --> 00:02:55,870
This is the architecture of view. In the next coming lectures we will go into more details about how

34
00:02:55,870 --> 00:02:59,640
Kubernetes works and how the administration of it works.
