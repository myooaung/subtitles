1
1

00:00:00,210  -->  00:00:01,043
<v Instructor>In this demo,</v>
2

2

00:00:01,043  -->  00:00:05,503
I will show you how to set up a cluster on AWS using EKS.
3

3

00:00:08,510  -->  00:00:13,510
This is eksctl.io, the official command-line utility
4

4

00:00:13,540  -->  00:00:17,530
for Amazon EKS and is the website.
5

5

00:00:17,530  -->  00:00:20,223
You will find the introduction here, getting started,
6

6

00:00:21,200  -->  00:00:23,440
the basic commands that we are going to execute
7

7

00:00:23,440  -->  00:00:26,620
in this demo, and also the installation
8

8

00:00:26,620  -->  00:00:31,620
on how you install it on Linux or Mac, with Brew,
9

9

00:00:32,730  -->  00:00:37,510
Brew is the easiest if you have macOS, or on Windows.
10

10

00:00:37,510  -->  00:00:40,480
So on Windows, you can download Chocolatey,
11

11

00:00:40,480  -->  00:00:42,993
the package manager, then just run this command.
12

12

00:00:44,800  -->  00:00:48,380
You will need to have your AWS API credentials configured.
13

13

00:00:48,380  -->  00:00:51,277
They say, "What works for AWS command-line utility
14

14

00:00:51,277  -->  00:00:52,670
"or any other tool,"
15

15

00:00:52,670  -->  00:00:55,850
for example, if you use Kops, that should be sufficient.
16

16

00:00:55,850  -->  00:00:59,650
So if you used AWS configure at some point,
17

17

00:00:59,650  -->  00:01:01,540
to then configure the AWS credentials file
18

18

00:01:01,540  -->  00:01:05,040
in .aws/credentials, then it will be okay.
19

19

00:01:05,040  -->  00:01:07,000
You can also use environment variables,
20

20

00:01:07,000  -->  00:01:10,250
but running AWS configure is the easiest way
21

21

00:01:10,250  -->  00:01:12,680
to have your AWS credentials configured.
22

22

00:01:12,680  -->  00:01:14,860
So if you haven't done that yet,
23

23

00:01:14,860  -->  00:01:17,147
you will have to download the AWS command-line utility
24

24

00:01:17,147  -->  00:01:20,490
from the AWS website and then run AWS configure
25

25

00:01:20,490  -->  00:01:21,820
to configure the credentials,
26

26

00:01:21,820  -->  00:01:25,103
for your AWS user that can spin up a cluster.
27

27

00:01:26,010  -->  00:01:29,520
You will also need the AWS IAM Authenticator for Kubernetes,
28

28

00:01:29,520  -->  00:01:30,980
so this makes sure that you can
29

29

00:01:30,980  -->  00:01:33,010
log in to the cluster using IAM.
30

30

00:01:33,010  -->  00:01:34,620
So either follow this link,
31

31

00:01:34,620  -->  00:01:36,790
or if you are using a package manager,
32

32

00:01:36,790  -->  00:01:38,140
the package manager is going to
33

33

00:01:38,140  -->  00:01:39,820
automatically install this for you,
34

34

00:01:39,820  -->  00:01:41,550
because then the authenticator will be
35

35

00:01:41,550  -->  00:01:44,500
a dependency of eksctl.
36

36

00:01:44,500  -->  00:01:47,080
You will be able to spin up a cluster without this tool,
37

37

00:01:47,080  -->  00:01:50,730
but then, when you run kubectl, if you cannot authenticate,
38

38

00:01:50,730  -->  00:01:53,620
then there is something wrong with this IAM Authenticator.
39

39

00:01:53,620  -->  00:01:54,900
Most likely, at that point,
40

40

00:01:54,900  -->  00:01:57,030
you are missing the authenticator,
41

41

00:01:57,030  -->  00:01:59,240
and you need to still download it.
42

42

00:01:59,240  -->  00:02:01,320
I am going to run the install on macOS,
43

43

00:02:01,320  -->  00:02:05,040
so I need those two lines to install eksctl.
44

44

00:02:05,040  -->  00:02:07,683
Let's do that first, and let's then start a cluster.
45

45

00:02:10,240  -->  00:02:12,273
Let's first install eksctl,
46

46

00:02:15,940  -->  00:02:19,683
and let's then create our cluster using EKS.
47

47

00:02:20,930  -->  00:02:25,930
You can use eksctl create cluster, with the name cluster-1.
48

48

00:02:26,150  -->  00:02:29,300
For example, two nodes, so these are the two worker nodes.
49

49

00:02:29,300  -->  00:02:31,400
The master node, you will not see.
50

50

00:02:31,400  -->  00:02:34,800
In a specific region, I am specifying eu-west-1,
51

51

00:02:34,800  -->  00:02:38,060
and if you want, you can also specify managed,
52

52

00:02:38,060  -->  00:02:39,980
and if you specify managed,
53

53

00:02:39,980  -->  00:02:43,890
it will also manage your worker nodes.
54

54

00:02:43,890  -->  00:02:46,850
If you don't specify it, it will still be a managed cluster,
55

55

00:02:46,850  -->  00:02:48,850
but it will only manage the master nodes.
56

56

00:02:48,850  -->  00:02:52,130
If you also want to have the worker nodes managed,
57

57

00:02:52,130  -->  00:02:55,080
automatically updated, then you can specify this flag,
58

58

00:02:55,080  -->  00:02:58,393
and this will enable the managed nodegroups in EKS.
59

59

00:03:01,000  -->  00:03:02,870
If you get this error, here,
60

60

00:03:02,870  -->  00:03:05,500
then your AWS credentials are not configured,
61

61

00:03:05,500  -->  00:03:08,180
so let me just configure my AWS credentials
62

62

00:03:08,180  -->  00:03:11,663
in another window, and then execute the command again.
63

63

00:03:14,170  -->  00:03:17,050
So I'm going to execute it again,
64

64

00:03:17,050  -->  00:03:19,740
now I have my credentials configured.
65

65

00:03:19,740  -->  00:03:22,820
Basically, I run AWS configure again
66

66

00:03:22,820  -->  00:03:24,960
to configure my credentials.
67

67

00:03:24,960  -->  00:03:28,500
Now, it can connect to Amazon over the API,
68

68

00:03:28,500  -->  00:03:31,720
and then create the necessary infrastructure.
69

69

00:03:31,720  -->  00:03:33,846
Let's have a look what it is doing.
70

70

00:03:33,846  -->  00:03:35,783
This is eksctl version 0.11.1,
71

71

00:03:38,240  -->  00:03:43,240
using region eu-west-1, three availability zones,
72

72

00:03:43,650  -->  00:03:45,870
so I need to create three subnets
73

73

00:03:45,870  -->  00:03:47,380
for those availability zones.
74

74

00:03:47,380  -->  00:03:48,800
It's going to create a public subnet
75

75

00:03:48,800  -->  00:03:51,980
and a private subnet for each availability zone.
76

76

00:03:51,980  -->  00:03:54,220
It's using Kubernetes version 1.14,
77

77

00:03:54,220  -->  00:03:59,000
which is currently the latest one, in Amazon, available,
78

78

00:03:59,000  -->  00:04:01,570
but they bring out newer versions,
79

79

00:04:01,570  -->  00:04:04,990
so there are already newer Kubernetes versions,
80

80

00:04:04,990  -->  00:04:06,840
just not in EKS.
81

81

00:04:06,840  -->  00:04:10,170
So at some point, Amazon will bring out a new version,
82

82

00:04:10,170  -->  00:04:15,010
and then the default version will be 1.15, 1.16, 1.17,
83

83

00:04:15,010  -->  00:04:16,683
whatever the latest version is.
84

84

00:04:17,750  -->  00:04:20,830
It is then create a cluster with the name cluster-1,
85

85

00:04:20,830  -->  00:04:24,270
in eu-west-1, with managed nodes.
86

86

00:04:24,270  -->  00:04:27,110
And it's going to create two separate CloudFormation stacks
87

87

00:04:27,110  -->  00:04:30,117
for the cluster and for the managed nodegroup.
88

88

00:04:31,410  -->  00:04:32,980
If you have any issues,
89

89

00:04:32,980  -->  00:04:35,120
then you can check the CloudFormation console.
90

90

00:04:35,120  -->  00:04:38,330
Then you can use this command or go into the UI
91

91

00:04:38,330  -->  00:04:41,333
to describe the CloudFormation stacks.
92

92

00:04:42,820  -->  00:04:44,440
CloudWatch logging will not be enabled,
93

93

00:04:44,440  -->  00:04:47,310
but you can enable it using this command,
94

94

00:04:47,310  -->  00:04:50,060
so you can enable, afterwards, some more configuration.
95

95

00:04:50,980  -->  00:04:53,210
This will be a public endpoint,
96

96

00:04:53,210  -->  00:04:54,298
so we have publicAccess, true,
97

97

00:04:54,298  -->  00:04:56,280
and privateAccess, false,
98

98

00:04:56,280  -->  00:04:59,330
so that means we can connect to our EKS cluster
99

99

00:04:59,330  -->  00:05:03,980
without using a VPN or without having to use a jump host.
100

100

00:05:03,980  -->  00:05:06,050
If you want to create a production cluster,
101

101

00:05:06,050  -->  00:05:08,080
it's actually advised to create a private cluster,
102

102

00:05:08,080  -->  00:05:11,503
so that the API is not available to the whole world,
103

103

00:05:12,340  -->  00:05:15,120
and then you would choose private access true,
104

104

00:05:15,120  -->  00:05:18,710
then you need a VPN or a jump host, a bastion,
105

105

00:05:18,710  -->  00:05:20,733
to be able to connect to your cluster.
106

106

00:05:21,660  -->  00:05:23,790
So it's then, first, building the cluster,
107

107

00:05:23,790  -->  00:05:25,270
and then it's going to deploy it.
108

108

00:05:25,270  -->  00:05:28,810
This might take some time, so I'm going to pause the video,
109

109

00:05:28,810  -->  00:05:29,830
and then, when it's finished,
110

110

00:05:29,830  -->  00:05:33,163
I'm going to deploy our test application.
111

111

00:05:35,430  -->  00:05:39,890
After waiting a couple of minutes, your cluster will be up,
112

112

00:05:39,890  -->  00:05:42,433
and your worker nodes will have started.
113

113

00:05:43,700  -->  00:05:45,607
So we left here, "Deploying stack."
114

114

00:05:47,100  -->  00:05:50,010
Then, all the EKS cluster resources have been created,
115

115

00:05:50,010  -->  00:05:51,953
so that means the EKS cluster is up.
116

116

00:05:53,620  -->  00:05:56,490
And then, it is starting the nodes,
117

117

00:05:56,490  -->  00:06:00,205
the EC2 nodes in the managed nodegroup,
118

118

00:06:00,205  -->  00:06:02,890
so we have here the managed nodegroup.
119

119

00:06:02,890  -->  00:06:05,010
And it's waiting for the two nodes to come up,
120

120

00:06:05,010  -->  00:06:07,733
and after they are ready, then we can use our cluster.
121

121

00:06:09,240  -->  00:06:11,290
It wrote a Kube config file,
122

122

00:06:11,290  -->  00:06:13,690
so if you first have a look at this config file,
123

123

00:06:15,210  -->  00:06:19,470
we will see that we have the minikube configuration
124

124

00:06:19,470  -->  00:06:22,250
from when I, earlier, started a minikube cluster,
125

125

00:06:22,250  -->  00:06:24,293
but we also have the EKS configuration.
126

126

00:06:27,450  -->  00:06:29,350
So clusters, we have two clusters.
127

127

00:06:29,350  -->  00:06:32,580
This is the minikube one, and here's the EKS one.
128

128

00:06:32,580  -->  00:06:37,500
So it has a name, cluster-1.eu-west-1.eksctl.io.
129

129

00:06:37,500  -->  00:06:39,193
Here's a certificate authority.
130

130

00:06:40,080  -->  00:06:44,280
This is to connect to the Kube API server
131

131

00:06:44,280  -->  00:06:46,160
and to verify a certificate.
132

132

00:06:46,160  -->  00:06:49,890
But authentication itself is now done by
133

133

00:06:49,890  -->  00:06:52,290
the AWS IAM authenticator.
134

134

00:06:52,290  -->  00:06:55,930
So here, this is just a command that needs to be available
135

135

00:06:56,940  -->  00:06:58,120
on your machine.
136

136

00:06:58,120  -->  00:06:59,310
So you will have to download it
137

137

00:06:59,310  -->  00:07:01,600
if you don't have this command available.
138

138

00:07:01,600  -->  00:07:03,523
So when we execute kubectl,
139

139

00:07:04,430  -->  00:07:08,280
it will execute this command using the argument token,
140

140

00:07:08,280  -->  00:07:09,753
<v ->i, cluster-1,</v>
141

141

00:07:10,650  -->  00:07:15,650
and it is then going to retrieve the token
142

142

00:07:16,280  -->  00:07:19,290
that we can use to log in to this cluster.
143

143

00:07:19,290  -->  00:07:23,120
So that is then using IAM, rather than using certificates.
144

144

00:07:23,120  -->  00:07:24,920
So here, for example, we have certificates
145

145

00:07:24,920  -->  00:07:26,720
to connect to our minikube cluster.
146

146

00:07:26,720  -->  00:07:27,920
We are not using that.
147

147

00:07:27,920  -->  00:07:31,100
We are not using the client certificate and the client key.
148

148

00:07:31,100  -->  00:07:33,470
We are using IAM as an authenticator
149

149

00:07:33,470  -->  00:07:35,513
to log in to our EKS cluster.
150

150

00:07:37,740  -->  00:07:41,683
Let's type kubectl get nodes.
151

151

00:07:43,700  -->  00:07:45,310
Here, we have two nodes available,
152

152

00:07:45,310  -->  00:07:49,673
so they are the EC2 instances that are now ready.
153

153

00:07:50,770  -->  00:07:52,890
So, here, we didn't really configure the instance family,
154

154

00:07:52,890  -->  00:07:56,110
the instance size, but you can configure that if you want.
155

155

00:07:56,110  -->  00:07:59,603
By default here, now, it is an M5 Large that is configured.
156

156

00:08:01,210  -->  00:08:03,730
1.14.7, we are running.
157

157

00:08:03,730  -->  00:08:06,570
So let's try to deploy something in this cluster.
158

158

00:08:06,570  -->  00:08:09,870
Just like the minikube demo and the Kops demo,
159

159

00:08:09,870  -->  00:08:11,543
I can deploy the echo server.
160

160

00:08:13,030  -->  00:08:14,920
So hello-deployment created.
161

161

00:08:14,920  -->  00:08:17,963
Now, let's expose this deployment by adding a service.
162

162

00:08:19,170  -->  00:08:21,940
I'm going to use kubectl expose deployment.
163

163

00:08:21,940  -->  00:08:23,093
Type=LoadBalancer.
164

164

00:08:24,895  -->  00:08:27,291
Port=80.
165

165

00:08:27,291  -->  00:08:29,640
That's the port I want to use on my LoadBalancer,
166

166

00:08:29,640  -->  00:08:34,640
and the target port is going to be 8080
167

167

00:08:35,040  -->  00:08:37,363
because the echo server is running on 8080.
168

168

00:08:39,520  -->  00:08:40,420
Let's have a look.
169

169

00:08:40,420  -->  00:08:42,373
Kubectl get pods.
170

170

00:08:45,338  -->  00:08:47,460
So we have one hello-deployment.
171

171

00:08:47,460  -->  00:08:49,690
If you use -o wide,
172

172

00:08:49,690  -->  00:08:52,130
we also see that it has assigned an IP address.
173

173

00:08:52,130  -->  00:08:54,540
So this is a VPC routable IP address.
174

174

00:08:54,540  -->  00:08:59,010
You see 192.168 is in the same VPC.
175

175

00:08:59,010  -->  00:09:01,873
So if you do kubectl get svc,
176

176

00:09:03,550  -->  00:09:05,890
then we get the services.
177

177

00:09:05,890  -->  00:09:08,670
So then, here, we have the hello-deployment,
178

178

00:09:08,670  -->  00:09:10,890
which is of type LoadBalancer,
179

179

00:09:10,890  -->  00:09:14,263
and this is the URL that we can use
180

180

00:09:14,263  -->  00:09:16,060
to connect to our LoadBalancer.
181

181

00:09:17,510  -->  00:09:19,120
It is best to wait a couple of minutes
182

182

00:09:19,120  -->  00:09:21,420
before going to this URL.
183

183

00:09:21,420  -->  00:09:23,940
Otherwise, you will probably catch a non-response,
184

184

00:09:23,940  -->  00:09:26,480
and then it will take time before the cache clears.
185

185

00:09:26,480  -->  00:09:28,400
So after you waited a couple of minutes,
186

186

00:09:28,400  -->  00:09:30,680
run curl on macOS or Linux,
187

187

00:09:30,680  -->  00:09:33,440
or just type this in your browser,
188

188

00:09:33,440  -->  00:09:36,930
and then the echo service will respond.
189

189

00:09:36,930  -->  00:09:39,180
So this is the echo service responding.
190

190

00:09:39,180  -->  00:09:42,430
So now we set up an EKS cluster with a deployment,
191

191

00:09:42,430  -->  00:09:46,060
with a service, service of type LoadBalancer,
192

192

00:09:46,060  -->  00:09:49,903
connects to our application, which is running in a pod,
193

193

00:09:50,860  -->  00:09:53,600
and then, if you go to the URL on port 80,
194

194

00:09:53,600  -->  00:09:55,213
it goes to our echo service.
195

195

00:09:57,160  -->  00:10:01,090
So this is basically how easy it is to set up EKS,
196

196

00:10:01,090  -->  00:10:03,230
which is now just a normal Kubernetes cluster
197

197

00:10:03,230  -->  00:10:04,764
that you can use.
198

198

00:10:04,764  -->  00:10:07,020
So you can start launching pods, deployments,
199

199

00:10:07,020  -->  00:10:09,983
DaemonSets, and so on, on this cluster.
200

200

00:10:11,140  -->  00:10:12,600
Some configuration is different,
201

201

00:10:12,600  -->  00:10:16,960
so it's best to also have a look at the documentation of EKS
202

202

00:10:16,960  -->  00:10:19,260
on the Amazon website.
203

203

00:10:19,260  -->  00:10:22,410
Where there are differences in this cluster setup,
204

204

00:10:22,410  -->  00:10:24,050
it will be documented.
205

205

00:10:24,050  -->  00:10:26,630
For example, how to setup CloudWatch and so on.
206

206

00:10:26,630  -->  00:10:28,360
It will all be documented.
207

207

00:10:28,360  -->  00:10:30,480
But with this eksctl,
208

208

00:10:30,480  -->  00:10:33,350
you will often find and easy way to configure it.
209

209

00:10:33,350  -->  00:10:36,910
So also have a look at the eksctl.io website,
210

210

00:10:36,910  -->  00:10:40,460
if you want to change your configuration on your cluster.
211

211

00:10:40,460  -->  00:10:43,370
If it is supported by the tool, it is, most of the time,
212

212

00:10:43,370  -->  00:10:45,283
very easy to set that up.
213

213

00:10:46,420  -->  00:10:48,000
So that is it for the demo.
214

214

00:10:48,000  -->  00:10:51,180
Let me quickly show you how to delete your cluster,
215

215

00:10:51,180  -->  00:10:52,470
because once you don't need it anymore,
216

216

00:10:52,470  -->  00:10:54,210
you want to delete it.
217

217

00:10:54,210  -->  00:10:58,283
Eksctl delete cluster, you can use,
218

218

00:10:59,300  -->  00:11:01,420
and then it says, "Name must be set."
219

219

00:11:01,420  -->  00:11:03,963
So then you can use --name cluster-1,
220

220

00:11:04,910  -->  00:11:09,620
was the name that we gave our cluster, --region eu-west-1,
221

221

00:11:09,620  -->  00:11:13,090
and then it is going to delete our EKS cluster,
222

222

00:11:13,090  -->  00:11:15,007
delete our LoadBalancer, so it says,
223

223

00:11:15,007  -->  00:11:17,560
"Cleaning up LoadBalancer services."
224

224

00:11:17,560  -->  00:11:20,180
so it's going to delete any dependencies,
225

225

00:11:20,180  -->  00:11:23,770
including LoadBalancer, delete the EC2 instances,
226

226

00:11:23,770  -->  00:11:26,890
and delete the EKS cluster
227

227

00:11:26,890  -->  00:11:29,380
so that you don't have to pay for it anymore.
228

228

00:11:29,380  -->  00:11:31,340
You are billed by the time that you are using it,
229

229

00:11:31,340  -->  00:11:35,020
so it's best to delete it when you are doing the demos,
230

230

00:11:35,020  -->  00:11:36,680
or you are just testing out.
231

231

00:11:36,680  -->  00:11:38,940
After you did your test, you don't need it anymore.
232

232

00:11:38,940  -->  00:11:40,870
It's best to delete it.
233

233

00:11:40,870  -->  00:11:42,410
So this will now run for a couple of minutes
234

234

00:11:42,410  -->  00:11:45,173
to then delete our EKS cluster.
