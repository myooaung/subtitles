1
00:00:00,420 --> 00:00:08,290
Now I'm going to talk about Resource Usage Monitoring. 

2
00:00:08,290 --> 00:00:10,390
Heapster enables Container Cluster Monitoring and Performance Analysis.

3
00:00:10,390 --> 00:00:14,440
It's providing a monitor platform for Kubernetes.

4
00:00:14,680 --> 00:00:21,130
It is a prerequisite if you want to do pod auto-scaling in Kubernetes. 

5
00:00:21,130 --> 00:00:29,380
Pod auto-scaling is going to be the next topic after monitoring. Heapster exports the cluster metrics via REST endpoints.

6
00:00:29,380 --> 00:00:35,580
So, other technologies can then query Heapster to get the metrics.

7
00:00:35,590 --> 00:00:37,380
You can use different backends with Heapster.

8
00:00:37,630 --> 00:00:41,660
So, our backend is where the metric data is stored.

9
00:00:42,780 --> 00:00:44,760
I will use the InfluxDB.

10
00:00:45,060 --> 00:00:51,410
But others like Google Cloud Monitoring or Google Logging and Kafka are also possible.

11
00:00:51,510 --> 00:00:56,060
InfluxDB is a database that is fit for time series.

12
00:00:56,070 --> 00:00:59,730
That's why it's a good fit for our Heapster metric data.

13
00:00:59,730 --> 00:01:08,370
Visualisations, graphs, can be shown using Grafana. So, with InfluxDB we can deploy Grafana

14
00:01:08,390 --> 00:01:12,990
The Kubernetes dashboard that I showed you earlier, 

15
00:01:12,990 --> 00:01:17,660
the web UI, also shows graphs, once monitoring is enabled.

16
00:01:17,660 --> 00:01:23,240
You don't even have to use Grafana and you can just see the graphs in the dashboard as well.

17
00:01:23,270 --> 00:01:31,690
All these technologies Heapster, InfluxDB, and Grafana can be started in pods.

18
00:01:31,740 --> 00:01:37,890
The yaml files can be found on the GitHub repository of Heapster.

19
00:01:37,890 --> 00:01:40,410
This is the url that I am going to use, it is still Kubernetes GitHub account, but then there's not a report called Heapster.

20
00:01:40,410 --> 00:01:46,800
You are typically going to use the master branch, because

21
00:01:46,800 --> 00:01:49,260
that is the most up to date branch.

22
00:01:49,380 --> 00:01:54,600
After downloading the repository, the whole platform can be deployed using addon system 

23
00:01:54,600 --> 00:01:56,910
Or just by using, "kubectl create -f", 

24
00:01:57,180 --> 00:02:00,440
and then the directory with all the yaml files.

25
00:02:00,660 --> 00:02:06,930
If you don't use the addon system, if you are just going to deploy it using "kubecontrol", then you need to make some changes in the files,

26
00:02:07,050 --> 00:02:15,230
which I will be explaining in the next time I am on. This is roughly how it looks like, this can change a little bit,

27
00:02:15,230 --> 00:02:20,600
because there are still a few outstanding issues to make this a little more performant

28
00:02:20,900 --> 00:02:25,130
and the Kubernetes team might make some changes, but this is on a high level how it's going to look like.

29
00:02:25,130 --> 00:02:26,710
On the right, what we are going to deploy is the Heapster Pod,

30
00:02:26,720 --> 00:02:32,890
the InfluxDB Pod, and the Grafana Pod.

31
00:02:32,930 --> 00:02:38,840
The node has a process "cAdvisor", which is now in the Kubernetes, but it's going to be separate in the future.

32
00:02:38,840 --> 00:02:44,090
That's why I put it a little bit out of the "kubelet" this is going to get all the metrics from the pods,

33
00:02:44,300 --> 00:02:50,540
and send all those metrics to Heapster, it is then going to save this in InfluxDB

34
00:02:50,540 --> 00:02:55,730
and then get an overview of those metrics in graphs using Grafana.

35
00:02:55,760 --> 00:03:02,560
So, basically all the data goes from the kubelets to Heaps and Heaps then saves it into InfluxDB.

36
00:03:02,560 --> 00:03:03,120
In the next demo,

37
00:03:03,220 --> 00:03:04,650
I'll show you how to set this up.
