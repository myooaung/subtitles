WEBVTT
1
1

00:00:00.320  -->  00:00:02.200
<v Edward>In this lecture I'm going to explain</v>
2

2

00:00:02.200  -->  00:00:03.183
the cert-manger.
3

3

00:00:04.181  -->  00:00:07.450
I'm going to show you how to issue certificates
4

4

00:00:07.450  -->  00:00:09.663
for your apps and your websites.
5

5

00:00:11.060  -->  00:00:14.800
If you want to use a secure http connection, https,
6

6

00:00:14.800  -->  00:00:17.390
you need to have certificates.
7

7

00:00:17.390  -->  00:00:21.190
Those certificates can be bought or they can also be issued
8

8

00:00:21.190  -->  00:00:24.150
by some public cloud providers like AWS.
9

9

00:00:24.150  -->  00:00:26.270
They have the Certificate Manager,
10

10

00:00:26.270  -->  00:00:30.203
where they can issue certificates for you and manage those.
11

11

00:00:31.570  -->  00:00:35.250
Managing SSL and TLS certificates yourself
12

12

00:00:35.250  -->  00:00:37.080
often takes a lot of time
13

13

00:00:37.080  -->  00:00:39.623
and they are time consuming to install and extend.
14

14

00:00:40.460  -->  00:00:42.280
So those certificates are only valid
15

15

00:00:42.280  -->  00:00:43.780
for a certain amount of time,
16

16

00:00:43.780  -->  00:00:46.250
so you need to request those from a provider
17

17

00:00:46.250  -->  00:00:47.880
that provides TLS certificates
18

18

00:00:47.880  -->  00:00:51.390
and then you'll also need to extend them when they expire.
19

19

00:00:51.390  -->  00:00:54.560
In the past, we would get SSL certificates,
20

20

00:00:54.560  -->  00:00:56.863
now you get TLS certificates.
21

21

00:00:57.700  -->  00:00:59.520
You will see everywhere still SSL,
22

22

00:00:59.520  -->  00:01:03.070
but technically it's now a TLS certificates.
23

23

00:01:03.070  -->  00:01:05.640 line:15% 
You can also not issue your own certificates
24

24

00:01:05.640  -->  00:01:07.220 line:15% 
for production websites,
25

25

00:01:07.220  -->  00:01:10.323 line:15% 
as they are not trusted by the common internet browsers.
26

26

00:01:11.300  -->  00:01:13.160 line:15% 
Like if you would issue your own certificate,
27

27

00:01:13.160  -->  00:01:14.840 line:15% 
you can sign your own certificate,
28

28

00:01:14.840  -->  00:01:17.510 line:15% 
it would just not work in Chrome or Internet Explorer
29

29

00:01:17.510  -->  00:01:20.160 line:15% 
because they will say "I don't recognize this authority
30

30

00:01:20.160  -->  00:01:21.560 line:15% 
that signed this certificate".
31

31

00:01:21.560  -->  00:01:23.520 line:15% 
So, you need to go to a company
32

32

00:01:23.520  -->  00:01:26.100 line:15% 
that is listed in the browser.
33

33

00:01:26.100  -->  00:01:28.210 line:15% 
There are lots of different companies listed
34

34

00:01:28.210  -->  00:01:30.060 line:15% 
that can issue a certificate for you.
35

35

00:01:31.060  -->  00:01:33.730 line:15% 
Cert-manager can ease the issuing of certificates
36

36

00:01:33.730  -->  00:01:35.720 line:15% 
and the management of it.
37

37

00:01:35.720  -->  00:01:37.470 line:15% 
That's what I'm going to explain now.
38

38

00:01:37.470  -->  00:01:39.630 line:15% 
Cert-manager is a component that you can install
39

39

00:01:39.630  -->  00:01:43.810 line:15% 
in the Kubernetes and it will help you issuing certificates,
40

40

00:01:43.810  -->  00:01:45.720 line:15% 
because we don't have something
41

41

00:01:45.720  -->  00:01:47.580 line:15% 
like the AWS certificate manager.
42

42

00:01:47.580  -->  00:01:49.633 line:15% 
We have to manage them ourselves.
43

43

00:01:50.490  -->  00:01:53.350
Cert-manager can us Let's encrypt.
44

44

00:01:53.350  -->  00:01:54.600
Let's encrypt is a free,
45

45

00:01:54.600  -->  00:01:57.240
automated and open Certificate Authority.
46

46

00:01:57.240  -->  00:01:59.990
This definition comes from the Let's encrypt website,
47

47

00:01:59.990  -->  00:02:01.663
which is letsencrypt.org.
48

48

00:02:02.660  -->  00:02:05.380
Let's encrypt can issue certificates for free
49

49

00:02:05.380  -->  00:02:07.800
for your apps and websites.
50

50

00:02:07.800  -->  00:02:09.850
You'll need to prove to Let's encrypt
51

51

00:02:09.850  -->  00:02:12.640
that you are the owner of the domain.
52

52

00:02:12.640  -->  00:02:15.840
After that, they will issue a certificate for you.
53

53

00:02:15.840  -->  00:02:17.920
So this is the verification process
54

54

00:02:17.920  -->  00:02:19.610
that they will do to verify
55

55

00:02:19.610  -->  00:02:22.650
whether you are the owner of a domain name.
56

56

00:02:22.650  -->  00:02:25.140
And only then when you can prove that,
57

57

00:02:25.140  -->  00:02:26.833
they will issue a certificate.
58

58

00:02:28.130  -->  00:02:29.750 line:15% 
The certificate is then recognized
59

59

00:02:29.750  -->  00:02:32.280 line:15% 
by major software vendors and browsers.
60

60

00:02:32.280  -->  00:02:33.360 line:15% 
So even though it's free,
61

61

00:02:33.360  -->  00:02:35.800 line:15% 
because most of the url providers are bait,
62

62

00:02:35.800  -->  00:02:39.300 line:15% 
even though it's free, it is still recognized.
63

63

00:02:39.300  -->  00:02:41.130 line:15% 
So then you can use Let's encrypt
64

64

00:02:41.130  -->  00:02:43.670 line:15% 
to issue you a free certificate.
65

65

00:02:43.670  -->  00:02:46.700
So Cert-manager can automate the verification process
66

66

00:02:46.700  -->  00:02:48.070
for Let's encrypt.
67

67

00:02:48.070  -->  00:02:50.340
So, Let's encrypt has this verification process
68

68

00:02:50.340  -->  00:02:54.120
to check whether you are really the owner of this domain.
69

69

00:02:54.120  -->  00:02:56.450
Cert-manager and Kubernetes can then automate
70

70

00:02:56.450  -->  00:02:58.630
this verification process.
71

71

00:02:58.630  -->  00:03:01.820
With Let's encrypt, you'll also have to renew certificates
72

72

00:03:01.820  -->  00:03:02.930
every couple of months,
73

73

00:03:02.930  -->  00:03:06.230
because those certificates also expire.
74

74

00:03:06.230  -->  00:03:10.290
Cert-manager will therefore periodically check the validity
75

75

00:03:10.290  -->  00:03:13.110
of the certificates and will start the renewal process,
76

76

00:03:13.110  -->  00:03:14.740
if necessary.
77

77

00:03:14.740  -->  00:03:17.720
So, Cert-manager will then open the certificate
78

78

00:03:17.720  -->  00:03:19.920
that's almost going to expire in the last month,
79

79

00:03:19.920  -->  00:03:23.853
then it will issue a renewal automatically for you.
80

80

00:03:24.820  -->  00:03:26.900 line:15% 
Let's encrypt, in combination with Cert-manager,
81

81

00:03:26.900  -->  00:03:30.120 line:15% 
takes away all of the hassle to deal with certificates,
82

82

00:03:30.120  -->  00:03:32.090 line:15% 
allowing you to secure your endpoints
83

83

00:03:32.090  -->  00:03:34.357 line:15% 
in an easy and affordable way.
84

84

00:03:34.357  -->  00:03:38.300
You can only issue certificates for a domain name you own.
85

85

00:03:38.300  -->  00:03:42.020
You'll need a domain name like xyz.com.
86

86

00:03:42.020  -->  00:03:44.540
If you were using a domain name to bring up your cluster
87

87

00:03:44.540  -->  00:03:46.720
for my first Kubernetes course,
88

88

00:03:46.720  -->  00:03:48.820
which is called the Complete Kubernetes Course,
89

89

00:03:48.820  -->  00:03:50.810
you can then reuse this domain.
90

90

00:03:50.810  -->  00:03:52.260
So, if you were using cups,
91

91

00:03:52.260  -->  00:03:54.930
you issued the domain or used the domain,
92

92

00:03:54.930  -->  00:03:57.230
you can actually reuse this domain now
93

93

00:03:57.230  -->  00:03:58.883
to create an SSL certificate.
94

94

00:03:59.810  -->  00:04:01.610
Otherwise, if you don't have domain name yet,
95

95

00:04:01.610  -->  00:04:06.610
you can get one for free from dot.tk or other providers.
96

96

00:04:07.290  -->  00:04:10.570 line:15% 
Or, you can buy one through namecheap.com,
97

97

00:04:10.570  -->  00:04:11.543 line:15% 
which I am using,
98

98

00:04:12.680  -->  00:04:16.890 line:15% 
AWS route53 or any other provider that sells domain names.
99

99

00:04:16.890  -->  00:04:18.950 line:15% 
As long as you can change the DNS records
100

100

00:04:18.950  -->  00:04:21.683 line:15% 
of the domain name, any provider is fine.
101

101

00:04:22.670  -->  00:04:25.230 line:15% 
Less popular extensions only cost a few dollars,
102

102

00:04:25.230  -->  00:04:26.820 line:15% 
so if it doesn't really matter
103

103

00:04:26.820  -->  00:04:28.900 line:15% 
what extension you're going to buy,
104

104

00:04:28.900  -->  00:04:31.750 line:15% 
then .co or other extensions,
105

105

00:04:31.750  -->  00:04:34.650 line:15% 
they often do promotions and they only cost a few dollars.
106

106

00:04:36.060  -->  00:04:38.080
So then this is the architecture overview
107

107

00:04:38.080  -->  00:04:40.410
of the Cert-manager.
108

108

00:04:40.410  -->  00:04:42.870
So we have the Cert-manager in the middle in green,
109

109

00:04:42.870  -->  00:04:46.110
and then we have the issuers letsencrypt-staging,
110

110

00:04:46.110  -->  00:04:47.120
letsencrypt-prod,
111

111

00:04:47.120  -->  00:04:49.200
which we are going to create in the next demo.
112

112

00:04:49.200  -->  00:04:50.820
Those are the issuers.
113

113

00:04:50.820  -->  00:04:53.670
Those are the objects that describe that we are going
114

114

00:04:53.670  -->  00:04:55.120
to reuse Let's encrypt,
115

115

00:04:55.120  -->  00:04:57.800
the staging gateway or production gateway,
116

116

00:04:57.800  -->  00:05:00.820
and we can use those issuers then in the certificates.
117

117

00:05:00.820  -->  00:05:03.440
So the certificates here are in blue.
118

118

00:05:03.440  -->  00:05:07.260
We can then say we need for domain foo.bar.com,
119

119

00:05:07.260  -->  00:05:09.420
we need a certificate and the issuer is going to be
120

120

00:05:09.420  -->  00:05:10.603
Let's encrypt staging.
121

121

00:05:11.700  -->  00:05:13.710
Then we have a real domain name, example.com,
122

122

00:05:13.710  -->  00:05:16.340
and here we can say Let's encrypt prod.
123

123

00:05:16.340  -->  00:05:18.770
You are rate limited on the production API
124

124

00:05:18.770  -->  00:05:21.180
of Let's encrypt, but not on the staging one.
125

125

00:05:21.180  -->  00:05:23.710
So, it's best to test first with the staging one.
126

126

00:05:23.710  -->  00:05:25.280
If everything goes okay,
127

127

00:05:25.280  -->  00:05:27.740
then you can issue a real certificate
128

128

00:05:27.740  -->  00:05:29.493
using the Let's encrypt prod.
129

129

00:05:30.640  -->  00:05:32.340 line:15% 
Once the certificates are issued,
130

130

00:05:32.340  -->  00:05:34.300 line:15% 
they are stored in Kubernetes Secrets
131

131

00:05:34.300  -->  00:05:35.920 line:15% 
that you see here at the bottom.
132

132

00:05:35.920  -->  00:05:37.940 line:15% 
So then you have the signed keypair,
133

133

00:05:37.940  -->  00:05:40.400 line:15% 
the issued keypair that you need,
134

134

00:05:40.400  -->  00:05:43.102 line:15% 
and those are then saved in the Secrets
135

135

00:05:43.102  -->  00:05:45.352 line:15% 
and then can be used by the incas controller.
136

136

00:05:46.250  -->  00:05:48.240
In the next lecture, in the demo,
137

137

00:05:48.240  -->  00:05:51.050
I will exactly show you how to issue a certificate
138

138

00:05:51.050  -->  00:05:52.823
using the Cert-manager.
