1
00:00:00,660 --> 00:00:09,060
Now let's upload our image to Docker Hub, I will now explain to you how to run this app on Kubernetes

2
00:00:10,720 --> 00:00:16,720
Let's run our newly built application on a new Kubernetes cluster. Before we can launch a container

3
00:00:16,720 --> 00:00:18,210
based on this image

4
00:00:18,400 --> 00:00:25,890
we need to create "pod definition". A pod describes an application running on Kubernetes.

5
00:00:26,140 --> 00:00:33,890
A pod can contain one or more tightly coupled containers that make up the app. Those apps can easily

6
00:00:33,890 --> 00:00:37,730
communicate with each other using their local port numbers.

7
00:00:37,760 --> 00:00:45,510
So, if you would have another app, you can just connect to that app on that port. Our app only has one container

8
00:00:47,060 --> 00:00:52,280
to make this app running on your Kubernetes cluster you create a pod file, for instance

9
00:00:52,310 --> 00:00:56,800
"pod-helloworld.yml" with the pod definition.

10
00:00:56,860 --> 00:01:02,390
This is ".yml" file in the YAML format, if you want to know more about the YAML format then you can just look it up 

11
00:01:02,390 --> 00:01:04,230
on Google.

12
00:01:04,230 --> 00:01:08,160
It starts with the API version as v1.

13
00:01:08,190 --> 00:01:09,940
This is a pause definition.

14
00:01:09,990 --> 00:01:13,450
So, you say, "Kind: pod". You can provide metadata,

15
00:01:13,470 --> 00:01:16,440
you can give your pod a name. This pod is named

16
00:01:16,450 --> 00:01:18,040
nodehelloworld.example.com

17
00:01:19,350 --> 00:01:20,590
We can also give it a label

18
00:01:20,640 --> 00:01:23,740
Later on we can easily filter on labels.

19
00:01:23,740 --> 00:01:29,200
This pod has the label "app" as a key, "helloworld" as a value

20
00:01:29,220 --> 00:01:31,640
"spec" you are going to put the container definitions.

21
00:01:31,640 --> 00:01:33,460
We only have one container.

22
00:01:33,680 --> 00:01:40,400
We're going to give it a name, the name of this container is "k8s-demo" and image refers to the image

23
00:01:40,460 --> 00:01:43,320
that you uploaded to Docker Hub.

24
00:01:43,580 --> 00:01:46,630
First you login, "wardviaene" is my login

25
00:01:46,820 --> 00:01:52,700
Then "/", and then, the repository name. The ports that you want to expose on this pod.

26
00:01:52,700 --> 00:01:56,570
Here I'm going to expose container port 3000.

27
00:01:56,750 --> 00:02:04,080
You can use "kubectl" if you have to create the pods one the Kubernetes cluster. You just use "kuvectl create -f" and then the path to this YAML file.

28
00:02:07,610 --> 00:02:13,970
All these YAML files are bundled in under git repository. The role of that git repository

29
00:02:14,090 --> 00:02:16,490
you can find in the procedure document again.

30
00:02:16,700 --> 00:02:20,350
Here are some useful commands that they can use on pods.

31
00:02:20,360 --> 00:02:28,270
I'll just briefly go over the list now and then I will then show them in action during the demos.

32
00:02:28,510 --> 00:02:31,650
"kubectl get pod", gets information about all the running pods.

33
00:02:31,660 --> 00:02:36,510
So, once you create a new pod it's probably the first command that you are going to execute.

34
00:02:36,510 --> 00:02:42,470
"kubectl describe pod", and then you can insert your pod name, describes just one pod. 

35
00:02:42,490 --> 00:02:44,730
So this gives you more information.

36
00:02:44,880 --> 00:02:50,070
"kubectl expose pod", and the pod name, and a port, and a name, this exposes a port of a pod. 

37
00:02:50,080 --> 00:02:55,600
So, it creates a new service and then you can connect to your Kubernetes cluster

38
00:02:55,600 --> 00:03:03,110
on that port and it will redirect to your pod. ""kubectl port-forward", and then a pod name, and then a port number

39
00:03:05,240 --> 00:03:11,660
You can port-forward the exposed pod port to your local machine and then on your local machine you can go

40
00:03:11,660 --> 00:03:15,900
to that port and to port-forward to the pod.

41
00:03:15,920 --> 00:03:20,080
You can also attach a pod to see what is really happening in your pod.

42
00:03:21,790 --> 00:03:29,010
You can execute commands on the pod, so this is done just execute a command in the container.

43
00:03:29,090 --> 00:03:35,950
If you have multiple containers you can specify specific containers using "-c".

44
00:03:35,990 --> 00:03:43,020
Otherwise, it will just take the first container. You can still label pods after they have been created.

45
00:03:43,070 --> 00:03:46,230
So, if you want to add another label then we can do it like this.

46
00:03:46,430 --> 00:03:48,970
And then this is very useful for debugging.

47
00:03:48,980 --> 00:03:54,800
You can run a shell in a pod and then you're going to run "kubectl", you are going to specify an image

48
00:03:54,800 --> 00:04:01,400
and the image can be "busybox", "busybox" is a very small image that can start you a shell and when you have

49
00:04:01,400 --> 00:04:04,240
a shell you can debug anything that goes wrong much easier. 

50
00:04:04,250 --> 00:04:11,420
Because then, you are in a new pod and it can connect to your pod that maybe is malfunctioning.

51
00:04:12,600 --> 00:04:13,510
In the next demo.

52
00:04:13,650 --> 00:04:16,440
I will then show you how to launch this pod.
