WEBVTT
1
1

00:00:00.270  -->  00:00:01.360
<v Instructor>I am now going to talk</v>
2

2

00:00:01.360  -->  00:00:03.623
about something called Flux.
3

3

00:00:05.400  -->  00:00:09.253
Flux automates the deployment of containers to Kubernetes.
4

4

00:00:10.950  -->  00:00:13.365
It can synchronize your version control,
5

5

00:00:13.365  -->  00:00:15.913
Git, and your Kubernetes cluster.
6

6

00:00:17.560  -->  00:00:19.940
With Flux, you can put manifest files,
7

7

00:00:19.940  -->  00:00:22.770
your Kubernetes YAML files,
8

8

00:00:22.770  -->  00:00:25.010
within your Git repository.
9

9

00:00:25.010  -->  00:00:27.440
Flux will monitor this repository
10

10

00:00:27.440  -->  00:00:29.970
and make sure that what's in the manifest files
11

11

00:00:29.970  -->  00:00:31.743
is deployed to the cluster.
12

12

00:00:32.780  -->  00:00:35.320
Flux also has interesting features
13

13

00:00:35.320  -->  00:00:38.600
where it can automatically upgrade your containers
14

14

00:00:38.600  -->  00:00:40.030
to the latest version available
15

15

00:00:40.030  -->  00:00:42.300
within your Docker repository.
16

16

00:00:42.300  -->  00:00:45.160
It uses semantic versioning for that, for example,
17

17

00:00:45.160  -->  00:00:47.231
you can say that the container you are going to deploy
18

18

00:00:47.231  -->  00:00:50.900
needs to stay within one major version, for example
19

19

00:00:50.900  -->  00:00:53.720
so that it doesn't go from V one to V two.
20

20

00:00:53.720  -->  00:00:55.550
But if there's a minor or a patch update,
21

21

00:00:55.550  -->  00:00:57.223
it will upgrade automatically.
22

22

00:00:58.940  -->  00:01:01.210
Flux has joined the CNCF,
23

23

00:01:01.210  -->  00:01:03.133
the Cloud Native Computing Foundation,
24

24

00:01:04.030  -->  00:01:06.450
and Flux believes in GitOps.
25

25

00:01:06.450  -->  00:01:08.560
So from the GitHub page,
26

26

00:01:08.560  -->  00:01:12.080
they're saying you declaratively describe
27

27

00:01:12.080  -->  00:01:15.740
the entire desired state of your system in Git.
28

28

00:01:15.740  -->  00:01:17.920
So with the manifest files,
29

29

00:01:17.920  -->  00:01:19.720
you are going to describe the state
30

30

00:01:19.720  -->  00:01:23.823
of your system, the cluster within your version control.
31

31

00:01:25.720  -->  00:01:27.830
What can be described can be automated.
32

32

00:01:27.830  -->  00:01:29.860
So once you describe your system,
33

33

00:01:29.860  -->  00:01:32.880
it can automatically deploy these things on your cluster
34

34

00:01:34.160  -->  00:01:36.340
and you push code, not containers.
35

35

00:01:36.340  -->  00:01:37.810
So you're not doing manual actions,
36

36

00:01:37.810  -->  00:01:39.730
you're just writing your code,
37

37

00:01:39.730  -->  00:01:41.730
putting that code on your GitHub
38

38

00:01:41.730  -->  00:01:43.230
and then your automated systems
39

39

00:01:43.230  -->  00:01:45.500
should take care of the rest.
40

40

00:01:45.500  -->  00:01:46.740
Building the Docker containers,
41

41

00:01:46.740  -->  00:01:48.480
pushing the Docker containers
42

42

00:01:48.480  -->  00:01:51.220
and deploying it on Kubernetes.
43

43

00:01:51.220  -->  00:01:54.950
And Flux is a tool that will then keep your code
44

44

00:01:54.950  -->  00:01:57.560
and the Kubernetes cluster in sync
45

45

00:01:57.560  -->  00:02:00.233
by deploying your YAML files when there are changes.
46

46

00:02:01.970  -->  00:02:05.340
So this is the architectural overview of Flux.
47

47

00:02:05.340  -->  00:02:09.110
You can find this image also on their GitHub page.
48

48

00:02:09.110  -->  00:02:10.950
So let's go briefly over this.
49

49

00:02:10.950  -->  00:02:13.413
So on the left, you have the developer.
50

50

00:02:13.413  -->  00:02:17.930
And instead of running kubectl apply straight
51

51

00:02:17.930  -->  00:02:21.310
to the Kubernetes API to the Kubernetes cluster,
52

52

00:02:21.310  -->  00:02:24.670
it is just going to commit the YAML files
53

53

00:02:24.670  -->  00:02:27.483
to his or her Git repository.
54

54

00:02:28.790  -->  00:02:31.680
The developer can push its container images
55

55

00:02:31.680  -->  00:02:34.080
or you typically have your CISD pipeline
56

56

00:02:34.080  -->  00:02:37.723
that can also push your container images for you.
57

57

00:02:39.250  -->  00:02:40.960
It's on the Flux CD
58

58

00:02:40.960  -->  00:02:45.230
that is going to keep your Git repository in sync.
59

59

00:02:45.230  -->  00:02:47.719
So it will read your Git repository,
60

60

00:02:47.719  -->  00:02:51.180
go over your files to get the manifest files,
61

61

00:02:51.180  -->  00:02:53.280
the Kubernetes manifest files
62

62

00:02:53.280  -->  00:02:55.280
and it will then analyze those,
63

63

00:02:55.280  -->  00:02:58.350
it will pull the image's metadata
64

64

00:02:58.350  -->  00:03:01.180
to see if there are no newer versions available
65

65

00:03:01.180  -->  00:03:03.370
because there's a possibility as well
66

66

00:03:03.370  -->  00:03:06.860
that Flux automatically gets the latest version
67

67

00:03:06.860  -->  00:03:09.370
from your Docker repository
68

68

00:03:09.370  -->  00:03:11.750
and then it's going to change this image tag
69

69

00:03:11.750  -->  00:03:14.540
in your manifest file before it sends it to Kubernetes.
70

70

00:03:14.540  -->  00:03:17.030
So that's something that it does as well.
71

71

00:03:17.030  -->  00:03:18.860
There's also a memcached running.
72

72

00:03:18.860  -->  00:03:20.866
So Flux is going to sync with that
73

73

00:03:20.866  -->  00:03:23.173
to keep the image metadata there.
74

74

00:03:24.010  -->  00:03:27.940
It's then going to apply or delete resources
75

75

00:03:27.940  -->  00:03:30.800
on Kubernetes, for example,
76

76

00:03:30.800  -->  00:03:32.170
if you had a deployment
77

77

00:03:32.170  -->  00:03:34.060
and the deployment didn't exist yet,
78

78

00:03:34.060  -->  00:03:37.950
Flux will then apply this deployment on the Kubernetes API
79

79

00:03:37.950  -->  00:03:41.820
and Kubernetes will use still etcd as a backend
80

80

00:03:41.820  -->  00:03:43.580
to store that information.
81

81

00:03:43.580  -->  00:03:45.830
So the actual deployment you will still find
82

82

00:03:45.830  -->  00:03:47.620
on your etcd.
83

83

00:03:47.620  -->  00:03:50.370
So when you do kubectl get deployment,
84

84

00:03:50.370  -->  00:03:52.600
you'll still get the correct information
85

85

00:03:52.600  -->  00:03:55.650
that your deployment has been applied to Kubernetes
86

86

00:03:55.650  -->  00:03:57.400
and it will start running the pods.
87

87

00:03:58.750  -->  00:04:01.020
So let's try that out in the next demo.
88

88

00:04:01.020  -->  00:04:05.040
Let's see if you can put a deployment manifest file
89

89

00:04:05.040  -->  00:04:07.350
on a Git repository, run Flux
90

90

00:04:07.350  -->  00:04:10.130
and then Flux will sync this repository
91

91

00:04:10.130  -->  00:04:11.763
with our Kubernetes cluster.
