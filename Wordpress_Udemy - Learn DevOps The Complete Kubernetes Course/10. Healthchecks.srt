1
00:00:00,480 --> 00:00:06,830
In this lecture, I'm going to be explaining Health Checks. When you put your app in production you will

2
00:00:06,830 --> 00:00:13,700
definitely want to configure your health checks. If your application malfunctions the pod in the container

3
00:00:13,730 --> 00:00:17,750
can still be running, but the application might not work anymore.

4
00:00:18,140 --> 00:00:22,590
The app gives an error because of something internally that went wrong.

5
00:00:23,370 --> 00:00:29,180
To detect and resolve problems with your application you can run health checks.

6
00:00:29,290 --> 00:00:33,630
You can run two different types of health checks.

7
00:00:33,710 --> 00:00:37,710
The first one is running a command in the container periodically.

8
00:00:38,030 --> 00:00:44,280
It just going to execute a command within the container to check whether your containers still working.

9
00:00:44,300 --> 00:00:51,910
The other one and the one that is used most of the time is periodic checks on a URL using HTTP.

10
00:00:52,250 --> 00:00:58,270
Your app probably is going to expose an interface using periodic checks on that interface.

11
00:00:58,280 --> 00:01:02,010
You can check whether your app is still healthy.

12
00:01:02,250 --> 00:01:07,110
The typical production application behind a Load Balancer should always have health checks implemented

13
00:01:07,170 --> 00:01:11,790
in some way to ensure availability and resiliency of the application.

14
00:01:12,650 --> 00:01:18,830
Even if you're using AWS and the Load Balancer the health checks are not checking whether your pod is healthy,

15
00:01:18,950 --> 00:01:23,130
it is only checking, but the node port is accessible.

16
00:01:23,180 --> 00:01:28,710
So, even when you are using the AWS Load Balancer, you're going to want these types of health checks as well.

17
00:01:30,260 --> 00:01:34,760
This is how a health check looks like on our example container.

18
00:01:34,850 --> 00:01:40,070
Here again I have the pod, the example pod, and here is then in bold.

19
00:01:40,100 --> 00:01:41,410
The health check.

20
00:01:41,840 --> 00:01:49,190
It's a "livenessProbe" using an "httpget" on just path which means just the main website. 

21
00:01:49,190 --> 00:01:51,890
On the production application you're probably going to have something like, "/health".

22
00:01:52,070 --> 00:01:56,800
But here I don't have a separate health page, so I'm just using "/".

23
00:01:56,930 --> 00:02:03,260
The port is going to be Port 3000, which is the container port, or if you give your container port a name,

24
00:02:03,620 --> 00:02:06,480
then you can use that name.

25
00:02:06,530 --> 00:02:11,960
There's an initial delay in seconds, so the "livenessProbe" is going to wait 15 seconds 

26
00:02:11,960 --> 00:02:14,290
and there's a timeout of 30 seconds.

27
00:02:14,360 --> 00:02:16,000
How does exactly it works?

28
00:02:16,010 --> 00:02:17,450
I will show you in the next demo.
