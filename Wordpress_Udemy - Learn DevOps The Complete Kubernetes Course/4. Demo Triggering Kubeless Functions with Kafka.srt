1
1

00:00:00,110  -->  00:00:01,490
<v Edward>In this demo, I will show you</v>
2

2

00:00:01,490  -->  00:00:04,933
how to use a Kubeless function with PubSub.
3

3

00:00:06,750  -->  00:00:07,583
The first thing that we need
4

4

00:00:07,583  -->  00:00:10,000
to do is we need to install kafka.
5

5

00:00:10,000  -->  00:00:12,250
You can use an existing kafka installation
6

6

00:00:12,250  -->  00:00:13,920
or, if you don't have one yet,
7

7

00:00:13,920  -->  00:00:16,060
you can also use kubeless
8

8

00:00:16,060  -->  00:00:20,453
to install a kafka on your Kubernetes cluster.
9

9

00:00:21,510  -->  00:00:23,643
I have the commands ready in my read me.
10

10

00:00:25,500  -->  00:00:27,430
Kafka Installtion.
11

11

00:00:27,430  -->  00:00:30,640
You're going to export the release to get the latest release
12

12

00:00:30,640  -->  00:00:33,010
and then you're going to use kubectl create
13

13

00:00:33,010  -->  00:00:37,963
to install the kubeless kafka trigger: kafka-zookeeper.yaml.
14

14

00:00:40,240  -->  00:00:42,840
So, kafka needs, also, zookeeper.
15

15

00:00:42,840  -->  00:00:45,713
That's why you also install zookeeper.
16

16

00:00:47,950  -->  00:00:48,900
Let's have a look.
17

17

00:00:48,900  -->  00:00:52,193
Kubectl get pods --all-namespaces.
18

18

00:00:55,710  -->  00:00:57,600
It's installed in kubeless namespace.
19

19

00:00:57,600  -->  00:01:01,090
We have kafka-0 still pending.
20

20

00:01:01,090  -->  00:01:04,883
And a kafka-trigger-control and a zookeeper.
21

21

00:01:06,960  -->  00:01:08,200
Back to read me.
22

22

00:01:08,200  -->  00:01:10,335
We can deploy a function.
23

23

00:01:10,335  -->  00:01:12,110
You can use use kubless function deploy
24

24

00:01:12,110  -->  00:01:13,860
to deploy uppercase function,
25

25

00:01:13,860  -->  00:01:16,483
which is also based on nodejs6.
26

26

00:01:17,429  -->  00:01:18,860
We're just gonna Copy + Paste these lines
27

27

00:01:18,860  -->  00:01:23,860
and then show you the node-example/uppercase.js.
28

28

00:01:23,890  -->  00:01:26,230
Which is just a simple function
29

29

00:01:26,230  -->  00:01:30,023
that will convert the input to uppercase.
30

30

00:01:31,050  -->  00:01:32,930
So, we have uppercase function,
31

31

00:01:32,930  -->  00:01:35,490
event and context are arguments.
32

32

00:01:35,490  -->  00:01:38,560
We're going to define string, str.
33

33

00:01:38,560  -->  00:01:41,030
Str equals to the event 'data'.
34

34

00:01:41,030  -->  00:01:44,178
So, the data that is passed in this event
35

35

00:01:44,178  -->  00:01:45,790
and then going to uppercase it.
36

36

00:01:45,790  -->  00:01:49,661
You're going to log it and then you're going to return it.
37

37

00:01:49,661  -->  00:01:51,211
So, let's deploy this function.
38

38

00:01:52,590  -->  00:01:56,220
Kubeless function ls uppercase is not ready yet.
39

39

00:01:56,220  -->  00:01:58,630
So, we have to do it just ls, without uppercase.
40

40

00:01:58,630  -->  00:02:01,260
We see all our deployed functions.
41

41

00:02:01,260  -->  00:02:04,033
You have to wait a bit until this function is ready.
42

42

00:02:05,430  -->  00:02:06,933
This will spin up a pod again.
43

43

00:02:08,688  -->  00:02:11,203
Right here is the uppercase pod.
44

44

00:02:12,440  -->  00:02:14,063
It's now initializing.
45

45

00:02:15,550  -->  00:02:18,780
Now, we just launched an uppercase function,
46

46

00:02:18,780  -->  00:02:20,820
but it's not linked to anything.
47

47

00:02:20,820  -->  00:02:24,430
In a previous demo, I showed you how to link a function
48

48

00:02:24,430  -->  00:02:28,550
to an ingress controller, making it a HTB function.
49

49

00:02:28,550  -->  00:02:32,040
Now, I will do the same, but for kafka.
50

50

00:02:32,040  -->  00:02:34,140
I have the commands, again, in my read me.
51

51

00:02:35,920  -->  00:02:37,490
It's two commands that we need.
52

52

00:02:37,490  -->  00:02:40,860
Kubeless trigger kafka is going to create test.
53

53

00:02:40,860  -->  00:02:43,510
The function-selector is going to be created by kubeless.
54

54

00:02:43,510  -->  00:02:45,860
So, we created this function, but with kubeless
55

55

00:02:46,905  -->  00:02:49,200
and function is called uppercase.
56

56

00:02:49,200  -->  00:02:52,340
And then the topic that needs to be triggered is uppercase.
57

57

00:02:52,340  -->  00:02:54,040
So, in kafka, you have topics,
58

58

00:02:54,040  -->  00:02:57,000
which is kind of a queue, where you can send data to
59

59

00:02:57,000  -->  00:03:00,200
and when data is sent to this topic,
60

60

00:03:00,200  -->  00:03:04,780
then our function will be triggered.
61

61

00:03:04,780  -->  00:03:06,530
So, let's first enter this command.
62

62

00:03:07,870  -->  00:03:11,240
Kafka trigger test created in namespace default successfully
63

63

00:03:11,240  -->  00:03:16,180
So, now we have a trigger on our kafka topic.
64

64

00:03:16,180  -->  00:03:19,690
Now, we need to trigger this function
65

65

00:03:19,690  -->  00:03:22,440
by publishing some data to this topic.
66

66

00:03:22,440  -->  00:03:25,350
To publish some data, you can also use kubeless.
67

67

00:03:25,350  -->  00:03:27,770
Because it is kafka, you don't need kubeless.
68

68

00:03:27,770  -->  00:03:29,770
You can just have any mechanism,
69

69

00:03:29,770  -->  00:03:32,820
any tool, any software, any application
70

70

00:03:32,820  -->  00:03:35,440
that rides data to kafka
71

71

00:03:35,440  -->  00:03:37,660
and then this function will be triggered.
72

72

00:03:37,660  -->  00:03:39,750
But, we don't really have any application
73

73

00:03:39,750  -->  00:03:40,583
riding to this topic,
74

74

00:03:40,583  -->  00:03:42,430
so we're just going to use
75

75

00:03:42,430  -->  00:03:45,330
kubeless topic publish --topic uppercase
76

76

00:03:45,330  -->  00:03:48,950
to publish some data to the topic.
77

77

00:03:48,950  -->  00:03:51,500
So, this will publish some data to the kafka topic.
78

78

00:03:52,460  -->  00:03:53,847
The data we are going to use is:
79

79

00:03:53,847  -->  00:03:57,600
"this message will be converted to uppercase."
80

80

00:03:57,600  -->  00:03:59,023
So, let's enter this.
81

81

00:04:00,500  -->  00:04:03,933
We sent this message to our kafka topic.
82

82

00:04:05,250  -->  00:04:06,503
Let's try something more.
83

83

00:04:09,000  -->  00:04:11,193
This is a second message.
84

84

00:04:12,619  -->  00:04:15,260
Now, also I'm using T2 micro instances.
85

85

00:04:15,260  -->  00:04:18,390
So, it's possible that we don't really have enough memory
86

86

00:04:18,390  -->  00:04:20,050
to run all these services.
87

87

00:04:20,050  -->  00:04:21,743
If, you experience any issues,
88

88

00:04:22,660  -->  00:04:25,880
you can either increase the size of your instances
89

89

00:04:25,880  -->  00:04:28,050
or move some previous functions
90

90

00:04:28,050  -->  00:04:30,920
to make sure that you don't run out of resources.
91

91

00:04:30,920  -->  00:04:32,320
You don't run out of memory.
92

92

00:04:33,640  -->  00:04:35,033
Let's have a look at our pods.
93

93

00:04:37,800  -->  00:04:39,433
We have the uppercase pod.
94

94

00:04:40,379  -->  00:04:41,879
Let's have a look at the logs.
95

95

00:04:44,340  -->  00:04:47,610
We sent first "this message will be converted to uppercase"
96

96

00:04:47,610  -->  00:04:50,730
and it outputted THIS MESSAGE WILL BE CONVERTED TO UPPERCASE
97

97

00:04:50,730  -->  00:04:52,950
and THIS IS A SECOND MESSAGE.
98

98

00:04:52,950  -->  00:04:55,663
Let's have a look again at this function.
99

99

00:04:56,975  -->  00:05:00,140
We have the node-example/uppercase function.
100

100

00:05:00,140  -->  00:05:04,630
So, this event is an argument that is passed to the function
101

101

00:05:04,630  -->  00:05:07,007
In event data we have
102

102

00:05:07,007  -->  00:05:09,480
"this message will be converted to uppercase,"
103

103

00:05:09,480  -->  00:05:13,100
or, the second one, "this is a second message."
104

104

00:05:13,100  -->  00:05:16,430
So, the function will be basically executed twice.
105

105

00:05:16,430  -->  00:05:19,733
One for this message and one time for this message.
106

106

00:05:20,570  -->  00:05:23,900
So we have one line of data in the event data.
107

107

00:05:23,900  -->  00:05:25,130
Convert it to uppercase
108

108

00:05:25,130  -->  00:05:30,130
and then log it to the console of this container
109

109

00:05:31,230  -->  00:05:32,500
and then you will see here,
110

110

00:05:32,500  -->  00:05:34,730
this message will be converted to uppercase
111

111

00:05:34,730  -->  00:05:36,163
in uppercase letters.
112

112

00:05:37,600  -->  00:05:40,260
And this will also basically post invite the trigger.
113

113

00:05:40,260  -->  00:05:42,550
The trigger that we created for whenever
114

114

00:05:42,550  -->  00:05:44,700
there is data in our kafka topic,
115

115

00:05:44,700  -->  00:05:47,170
then, it will trigger our function
116

116

00:05:47,170  -->  00:05:50,220
and then this function gets executed
117

117

00:05:50,220  -->  00:05:52,370
with this data attached to it.
118

118

00:05:52,370  -->  00:05:54,490
So, that we can covert its data.
119

119

00:05:54,490  -->  00:05:56,360
We don't really do anything with this data.
120

120

00:05:56,360  -->  00:05:59,800
We just log the data to the console here
121

121

00:05:59,800  -->  00:06:01,043
and we return a string.
122

122

00:06:02,150  -->  00:06:05,530
In reality, you store your result somewhere.
123

123

00:06:05,530  -->  00:06:07,570
Often, you store your data, again,
124

124

00:06:07,570  -->  00:06:09,300
in another kafka topic, for example,
125

125

00:06:09,300  -->  00:06:12,810
and then other applications can read results from this topic
126

126

00:06:12,810  -->  00:06:15,980
and store it or displace it to a user, for example,
127

127

00:06:15,980  -->  00:06:18,020
or send it to another app.
128

128

00:06:18,020  -->  00:06:20,930
The limitation here with kubeless right now
129

129

00:06:20,930  -->  00:06:25,930
is that you can publish data to kafka
130

130

00:06:25,930  -->  00:06:28,310
and kafka will then trigger your function
131

131

00:06:28,310  -->  00:06:30,980
so you can capture data within your function,
132

132

00:06:30,980  -->  00:06:34,090
but your function can not yet send data back to kafka.
133

133

00:06:34,090  -->  00:06:37,340
You could ride your own producer,
134

134

00:06:37,340  -->  00:06:41,210
again, in your function right here, to then send data back.
135

135

00:06:41,210  -->  00:06:42,980
But, that defeats the purpose of Serverless
136

136

00:06:42,980  -->  00:06:44,660
because Serverless would really provide
137

137

00:06:44,660  -->  00:06:46,940
you with this framework where its easy
138

138

00:06:46,940  -->  00:06:50,643
to send data to any of your services.
139

139

00:06:51,620  -->  00:06:53,810
So, this is something that's bending.
140

140

00:06:53,810  -->  00:06:54,960
It's a feature that's bending
141

141

00:06:54,960  -->  00:06:59,240
where you can then return some data back to kafka,
142

142

00:06:59,240  -->  00:07:00,833
to another topic, for example.
143

143

00:07:02,380  -->  00:07:04,610
Right now, what you could do is you can,
144

144

00:07:04,610  -->  00:07:08,780
for example, send this string back to another function,
145

145

00:07:08,780  -->  00:07:09,840
now that you have uppercase,
146

146

00:07:09,840  -->  00:07:12,170
you could send it back to a function
147

147

00:07:12,170  -->  00:07:13,860
that stores it into a database
148

148

00:07:13,860  -->  00:07:15,590
and then you could have another function
149

149

00:07:15,590  -->  00:07:17,810
that reads from the database whenever
150

150

00:07:17,810  -->  00:07:20,070
a user visits a web page.
151

151

00:07:20,070  -->  00:07:21,373
That's all possible.
152

152

00:07:22,400  -->  00:07:24,660
It's all up to you how
153

153

00:07:24,660  -->  00:07:26,870
evolved and difficult you make these functions.
154

154

00:07:26,870  -->  00:07:28,650
These are very simple functions.
155

155

00:07:28,650  -->  00:07:30,120
They don't do much.
156

156

00:07:30,120  -->  00:07:32,170
You can use my SQL.
157

157

00:07:32,170  -->  00:07:34,260
You can use an undefined database
158

158

00:07:34,260  -->  00:07:38,850
to store your results, to read your results, to use it.
159

159

00:07:38,850  -->  00:07:41,610
With these mechanisms that are already available
160

160

00:07:41,610  -->  00:07:43,780
and with these run bags that are available,
161

161

00:07:43,780  -->  00:07:46,683
you can already create some really useful applications.
162

162

00:07:47,610  -->  00:07:48,980
So, that's it for this lecture.
163

163

00:07:48,980  -->  00:07:51,470
I hope you learned some useful information
164

164

00:07:51,470  -->  00:07:53,940
about Serverless in this section
165

165

00:07:53,940  -->  00:07:55,530
and this is really a nice way
166

166

00:07:55,530  -->  00:07:59,363
of getting this Serverless architecture within Kubernetes.
167

167

00:08:00,410  -->  00:08:03,450
It is used already a lot in public cloud
168

168

00:08:03,450  -->  00:08:05,070
and I'm sure it will only get
169

169

00:08:05,070  -->  00:08:07,343
more popular within Kubernetes.
