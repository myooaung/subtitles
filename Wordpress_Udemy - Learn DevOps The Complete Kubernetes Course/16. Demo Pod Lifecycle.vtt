WEBVTT
1
1

00:00:00.000  -->  00:00:01.460
<v Edward>I am going to show you</v>
2

2

00:00:01.460  -->  00:00:03.343
a demo of the pod lifecycle.
3

3

00:00:04.510  -->  00:00:06.047
I am in the directory pod lifecycle
4

4

00:00:06.047  -->  00:00:08.080
in the kubernetes course.
5

5

00:00:08.080  -->  00:00:10.683
And here I have a lifecycle yaml file.
6

6

00:00:12.782  -->  00:00:13.890
This is a deployment
7

7

00:00:15.420  -->  00:00:17.180
and in the pod specification,
8

8

00:00:17.180  -->  00:00:18.600
I have an init container.
9

9

00:00:18.600  -->  00:00:23.490
So this is the first container that is going to be executed.
10

10

00:00:23.490  -->  00:00:25.310
This is a separate container,
11

11

00:00:25.310  -->  00:00:27.380
just like I show you in the previous lecture.
12

12

00:00:27.380  -->  00:00:29.410
So we also define an image
13

13

00:00:29.410  -->  00:00:31.770
and a command that will be executed.
14

14

00:00:31.770  -->  00:00:33.950
This container is just going to sleep 10 seconds
15

15

00:00:33.950  -->  00:00:34.853
and then exits.
16

16

00:00:36.050  -->  00:00:38.360
Then we have our main container,
17

17

00:00:38.360  -->  00:00:40.020
the lifecycle container.
18

18

00:00:40.020  -->  00:00:41.810
Also image busybox.
19

19

00:00:41.810  -->  00:00:43.250
And it's going to write
20

20

00:00:44.120  -->  00:00:46.490
to a file, the date
21

21

00:00:48.570  -->  00:00:50.220
and it's going to say it's running.
22

22

00:00:50.220  -->  00:00:52.490
So the file is slash timing.
23

23

00:00:52.490  -->  00:00:54.730
Then we're going to echo the app is running
24

24

00:00:54.730  -->  00:00:57.030
and then we're going to sleep for 120 seconds.
25

25

00:00:58.270  -->  00:00:59.653
We have a readiness probe.
26

26

00:01:00.540  -->  00:01:03.980
This is also going to write to the slash timing file
27

27

00:01:03.980  -->  00:01:06.880
so that we have a nice overview of the timings.
28

28

00:01:06.880  -->  00:01:08.143
The liveness probe,
29

29

00:01:09.650  -->  00:01:11.280
the lifecycle,
30

30

00:01:11.280  -->  00:01:15.120
and in the lifecycle, we have a post start and a pre stop.
31

31

00:01:15.120  -->  00:01:17.470
So these are the hooks that we're going to use.
32

32

00:01:17.470  -->  00:01:20.280
And using those hooks we can execute a command
33

33

00:01:20.280  -->  00:01:22.120
in our main container.
34

34

00:01:22.120  -->  00:01:25.210
So here we're also going to write to slash timing,
35

35

00:01:25.210  -->  00:01:27.703
just to see when this command will execute.
36

36

00:01:29.100  -->  00:01:32.920
And then the pre stop is also going to write to our file
37

37

00:01:32.920  -->  00:01:35.660
and then it's going to sleep for 10 seconds.
38

38

00:01:35.660  -->  00:01:36.883
In the init container,
39

39

00:01:36.883  -->  00:01:40.320
it's not going to write because that is a separate container
40

40

00:01:40.320  -->  00:01:43.610
so we would not get that information anyways.
41

41

00:01:43.610  -->  00:01:46.700
We would have to use a volume to share information
42

42

00:01:46.700  -->  00:01:50.210
between the init container and the main containers.
43

43

00:01:50.210  -->  00:01:51.263
So let's run this.
44

44

00:01:52.230  -->  00:01:54.950
And I'm going to show you this in a split screen.
45

45

00:01:54.950  -->  00:01:57.053
So I'm going to use a tool called screen.
46

46

00:01:58.200  -->  00:01:59.883
And I'm going to split my screen.
47

47

00:02:04.390  -->  00:02:06.660
Here, at the top,
48

48

00:02:06.660  -->  00:02:08.790
I'm going to run
49

49

00:02:08.790  -->  00:02:10.090
watch N one
50

50

00:02:10.988  -->  00:02:12.980
kubectl get pods.
51

51

00:02:15.220  -->  00:02:16.703
There are no pods currently.
52

52

00:02:18.290  -->  00:02:21.313
And then here, in this other screen, I'll create a pod,
53

53

00:02:24.430  -->  00:02:27.363
and then I will also read this timings file.
54

54

00:02:28.750  -->  00:02:31.570
Kubectl create minus F
55

55

00:02:32.970  -->  00:02:35.320
over this lifecycle yaml file.
56

56

00:02:35.320  -->  00:02:38.553
I will press enter, lifecycle created.
57

57

00:02:39.390  -->  00:02:40.550
And now we can already see
58

58

00:02:40.550  -->  00:02:42.710
that it's running the init container.
59

59

00:02:42.710  -->  00:02:46.403
So the init container, which runs first.
60

60

00:02:48.520  -->  00:02:52.153
Let me, kubectl execute minus I T.
61

61

00:02:53.851  -->  00:02:55.901
You see now that the pod is initializing.
62

62

00:02:58.530  -->  00:03:00.660
So I will do cat timings
63

63

00:03:02.324  -->  00:03:03.173
or timing.
64

64

00:03:05.400  -->  00:03:08.710
And we already have the main pod running.
65

65

00:03:08.710  -->  00:03:11.110
So first we have running, that is the main container.
66

66

00:03:11.110  -->  00:03:12.470
Then we have post start,
67

67

00:03:12.470  -->  00:03:14.803
and then end post start 10 seconds later.
68

68

00:03:17.170  -->  00:03:18.570
And now the readiness probe.
69

69

00:03:20.881  -->  00:03:22.880
So when we tail this exit,
70

70

00:03:22.880  -->  00:03:24.540
tail timing minus F.
71

71

00:03:24.540  -->  00:03:26.420
It's gonna be easier.
72

72

00:03:26.420  -->  00:03:28.370
So the main container starts,
73

73

00:03:28.370  -->  00:03:30.046
now that says running.
74

74

00:03:30.046  -->  00:03:31.746
Then we have the post start that starts,
75

75

00:03:31.746  -->  00:03:33.624
so these two start together.
76

76

00:03:33.624  -->  00:03:35.352
The main container and the hook,
77

77

00:03:35.352  -->  00:03:37.602
the post start hook start together.
78

78

00:03:37.602  -->  00:03:39.052
Takes 10 seconds.
79

79

00:03:39.052  -->  00:03:41.840
And then we have the end post start
80

80

00:03:41.840  -->  00:03:44.150
and then after the initial delay,
81

81

00:03:44.150  -->  00:03:46.945
we have the readiness probe and the liveness probe.
82

82

00:03:46.945  -->  00:03:48.543
So those will execute.
83

83

00:03:49.560  -->  00:03:51.420
Both of them will execute
84

84

00:03:51.420  -->  00:03:53.580
as long as the main container is alive.
85

85

00:03:53.580  -->  00:03:56.363
The main container will be alive for 120 seconds.
86

86

00:03:57.950  -->  00:03:59.650
So we still have stages running,
87

87

00:03:59.650  -->  00:04:01.890
which means it's still alive.
88

88

00:04:01.890  -->  00:04:04.503
We still see the liveness and the readiness probe.
89

89

00:04:06.843  -->  00:04:08.440
We just have to wait,
90

90

00:04:08.440  -->  00:04:10.370
I will just pause the video for a second
91

91

00:04:10.370  -->  00:04:12.373
and wait until the container stops.
92

92

00:04:14.180  -->  00:04:16.760
And now the container is completed.
93

93

00:04:16.760  -->  00:04:18.410
And then the command is terminated
94

94

00:04:18.410  -->  00:04:21.710
with exit code one three seven.
95

95

00:04:21.710  -->  00:04:23.090
So the pod has been terminated
96

96

00:04:23.090  -->  00:04:24.820
and the stop hook is also executed
97

97

00:04:24.820  -->  00:04:25.940
but you don't see it anymore
98

98

00:04:25.940  -->  00:04:28.823
because the sleep command has been terminated.
99

99

00:04:29.810  -->  00:04:31.570
The pod is again running,
100

100

00:04:31.570  -->  00:04:34.630
because remember the liveness check
101

101

00:04:34.630  -->  00:04:36.680
will restart the container
102

102

00:04:36.680  -->  00:04:38.560
when the probe fails.
103

103

00:04:38.560  -->  00:04:40.920
So in this case the probe failed
104

104

00:04:40.920  -->  00:04:43.460
because the command has been terminated.
105

105

00:04:43.460  -->  00:04:44.520
What's gonna happen then
106

106

00:04:44.520  -->  00:04:47.310
is that the liveness probe is going to restart container,
107

107

00:04:47.310  -->  00:04:49.810
the readiness probe will make sure
108

108

00:04:49.810  -->  00:04:52.780
that the container is not in ready status
109

109

00:04:52.780  -->  00:04:55.940
so that there's no traffic sent to the container.
110

110

00:04:55.940  -->  00:04:57.810
And when the container is started,
111

111

00:04:57.810  -->  00:05:00.110
the readiness and the liveness probe
112

112

00:05:00.110  -->  00:05:02.240
will do their checks again.
113

113

00:05:02.240  -->  00:05:04.540
And when the readiness probe succeeds,
114

114

00:05:04.540  -->  00:05:06.960
the appearance of the pod will be again added
115

115

00:05:06.960  -->  00:05:09.870
to the service and the pod will start
116

116

00:05:09.870  -->  00:05:11.263
serving traffic again.
117

117

00:05:12.680  -->  00:05:16.440
So you can use this file and execute this on your own
118

118

00:05:16.440  -->  00:05:18.890
system to see how this works.
119

119

00:05:18.890  -->  00:05:23.140
This init container and the hooks are very useful to use
120

120

00:05:23.140  -->  00:05:26.883
to execute commands of certain times of your pod lifecycle.
