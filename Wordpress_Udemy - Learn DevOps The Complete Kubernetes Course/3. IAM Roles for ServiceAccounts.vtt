WEBVTT
1
1

00:00:00.200  -->  00:00:01.540
<v Narrator>In this lecture,</v>
2

2

00:00:01.540  -->  00:00:05.080
I want to show you how to use IAM Roles
3

3

00:00:05.080  -->  00:00:08.157
using Service Accounts on Kubernetes,
4

4

00:00:08.157  -->  00:00:11.213
which is a feature of EKS.
5

5

00:00:13.060  -->  00:00:16.430
EKS supports IAM roles for service accounts,
6

6

00:00:16.430  -->  00:00:18.003
or abbreviated, IRSA.
7

7

00:00:20.020  -->  00:00:20.960
With this feature
8

8

00:00:20.960  -->  00:00:24.363
you can specify IAM policies at a pod level.
9

9

00:00:25.300  -->  00:00:27.920
For example, one specific pod in the cluster
10

10

00:00:27.920  -->  00:00:29.597
can access an s3 bucket,
11

11

00:00:29.597  -->  00:00:31.343
but others cannot.
12

12

00:00:32.740  -->  00:00:35.890
Previously, IAM polices would have to be set up
13

13

00:00:35.890  -->  00:00:39.860
on the worker level, using EC2 instance roles.
14

14

00:00:39.860  -->  00:00:42.550
So that means that, you would set one IAM policy
15

15

00:00:42.550  -->  00:00:45.823
and all the pods, for example, could access s3.
16

16

00:00:46.700  -->  00:00:48.640
With IAM Roles for Service Accounts,
17

17

00:00:48.640  -->  00:00:53.580
it lets you hand out permissions on a more granular level.
18

18

00:00:53.580  -->  00:00:55.620
So on a pod level.
19

19

00:00:55.620  -->  00:00:58.206
So you can say, one pod can have access to s3,
20

20

00:00:58.206  -->  00:01:01.258
the other pod cannot have access to s3
21

21

00:01:01.258  -->  00:01:03.457
or to a specific bucket,
22

22

00:01:03.457  -->  00:01:06.593
depending on the IAM policy you are going to use.
23

23

00:01:08.460  -->  00:01:11.620
One major caveat, the app running in the container
24

24

00:01:11.620  -->  00:01:14.982
that uses the AWS SDK, must have a recent SDK
25

25

00:01:14.982  -->  00:01:17.913
to be able to work with these credentials.
26

26

00:01:19.570  -->  00:01:22.360
What SDK and libraries to use,
27

27

00:01:22.360  -->  00:01:24.860
is explained in the last documentation.
28

28

00:01:24.860  -->  00:01:26.515
So if you want to use this feature,
29

29

00:01:26.515  -->  00:01:29.430
it's best to check the documentation
30

30

00:01:29.430  -->  00:01:32.021
on these IAM Roles for Service Accounts
31

31

00:01:32.021  -->  00:01:33.943
and it will be explained.
32

32

00:01:35.320  -->  00:01:36.940
IAM Roles for Service Accounts
33

33

00:01:36.940  -->  00:01:40.610
uses the IAM OpenID Connect provider, OIDC
34

34

00:01:40.610  -->  00:01:42.403
that EKS exposes.
35

35

00:01:43.550  -->  00:01:46.630
To link an IAM Role with a Service Account,
36

36

00:01:46.630  -->  00:01:50.591
you need to add an annotation to the Service Account.
37

37

00:01:50.591  -->  00:01:52.315
So this is how it looks.
38

38

00:01:52.315  -->  00:01:55.472
You have a IAM definition for a Service Account,
39

39

00:01:55.472  -->  00:01:57.180
and then the annotation
40

40

00:01:57.180  -->  00:01:59.307
which specifies the role ARN
41

41

00:01:59.307  -->  00:02:01.833
that you want to use for that Service Account.
42

42

00:02:03.711  -->  00:02:06.360
And then you link your Service Account to a pod
43

43

00:02:06.360  -->  00:02:08.110
and then the pod can use that role.
44

44

00:02:09.360  -->  00:02:11.470
The EKS Pod Identity Webhook
45

45

00:02:11.470  -->  00:02:13.724
will then automatically inject environment variables
46

46

00:02:13.724  -->  00:02:17.602
into the pod that have this Service Account assigned.
47

47

00:02:17.602  -->  00:02:19.191
So when the pods starts,
48

48

00:02:19.191  -->  00:02:21.630
it will inject the environment variables
49

49

00:02:21.630  -->  00:02:24.787
AWS_ROLE_ARN and AWS_WEB_IDENTITY_TOKEN_FILE
50

50

00:02:27.050  -->  00:02:28.430
These environment variables
51

51

00:02:28.430  -->  00:02:31.793
will be picked up by the AWS SDK during authentication.
52

52

00:02:34.190  -->  00:02:35.882
Let me show you that in a diagram,
53

53

00:02:35.882  -->  00:02:38.560
so that it is easier to understand.
54

54

00:02:38.560  -->  00:02:40.481
So here, on left, you have the Kube-apiserver.
55

55

00:02:40.481  -->  00:02:42.120
In the Kube-apiserver,
56

56

00:02:42.120  -->  00:02:44.410
you have a Mutating admission controller.
57

57

00:02:44.410  -->  00:02:45.690
So whenever a pod is launched,
58

58

00:02:45.690  -->  00:02:47.460
it is triggered.
59

59

00:02:47.460  -->  00:02:48.760
And then AWS has
60

60

00:02:48.760  -->  00:02:52.730
the Amazon EKS pod identity Webhook configured
61

61

00:02:52.730  -->  00:02:54.243
here on the left in green.
62

62

00:02:55.400  -->  00:02:59.033
This Webhook will then executed whenever a pod is launched.
63

63

00:03:00.310  -->  00:03:02.450
Then in the middle here we have a pod
64

64

00:03:02.450  -->  00:03:03.820
with a Service Account,
65

65

00:03:03.820  -->  00:03:05.855
and the Service Account has the role annotated
66

66

00:03:05.855  -->  00:03:08.010
that you want to use.
67

67

00:03:08.010  -->  00:03:10.090
So when we launch this pod,
68

68

00:03:10.090  -->  00:03:13.240
then the Webhook will be executed,
69

69

00:03:13.240  -->  00:03:15.860
the Webhook will inject the environment variables
70

70

00:03:15.860  -->  00:03:18.917
AWS_ROLE_ARN and AWS_WEB_IDENTITY_TOKEN_FILE.
71

71

00:03:20.100  -->  00:03:22.833
In the TOKEN_FILE you will then find JWT.
72

72

00:03:23.800  -->  00:03:26.150
And then the alias JDK
73

73

00:03:26.150  -->  00:03:28.130
will read those variables,
74

74

00:03:28.130  -->  00:03:31.120
the AWS_ROLE_ARN and the TOKEN_FILE
75

75

00:03:31.120  -->  00:03:33.830
and then it can assume this role
76

76

00:03:33.830  -->  00:03:37.300
using this WEB_IDENTITY_TOKEN_FILE.
77

77

00:03:37.300  -->  00:03:40.137
So this WEB_IDENTITY_TOKEN_FILE is a JWT,
78

78

00:03:40.137  -->  00:03:43.155
basically it can go to STS
79

79

00:03:43.155  -->  00:03:45.150
assume this role,
80

80

00:03:45.150  -->  00:03:46.785
and then it will get credentials
81

81

00:03:46.785  -->  00:03:49.980
that it can then use to, for example,
82

82

00:03:49.980  -->  00:03:52.193
access AWS Service like s3.
83

83

00:03:53.070  -->  00:03:54.560
This is it in a nutshell.
84

84

00:03:54.560  -->  00:03:55.393
In the next demo,
85

85

00:03:55.393  -->  00:03:56.960
I will show you how that works
86

86

00:03:56.960  -->  00:03:58.513
on our EKS cluster.
