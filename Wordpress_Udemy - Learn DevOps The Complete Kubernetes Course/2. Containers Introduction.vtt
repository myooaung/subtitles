WEBVTT
1
00:00:00.510 --> 00:00:06.150
Now that I gave you an introduction to Kubernetes, let me just talk a little bit about containers in general.

2
00:00:06.170 --> 00:00:10.540
If you already are familiar with containers.

3
00:00:10.610 --> 00:00:14.390
You can just skip this lecture and continue with the next one.

4
00:00:15.040 --> 00:00:20.830
So, let's first talk a little bit about the difference between a virtual machine and a container. On the

5
00:00:20.830 --> 00:00:23.390
left here you see what a virtual machine is.

6
00:00:23.410 --> 00:00:24.300
You have a server,

7
00:00:24.330 --> 00:00:29.240
the physical machine, then on a physical machine you put a Host OS, here in green.

8
00:00:29.410 --> 00:00:35.070
Then you have the Hypervisor, which is good to manage the guest operating systems for you.

9
00:00:35.250 --> 00:00:41.350
So, you can have multiple guest operating systems on one host operating system using this Hypervisor.

10
00:00:42.160 --> 00:00:44.590
Every guest operation is completely isolated.

11
00:00:44.590 --> 00:00:53.020
It has its own binary, its own libraries, it can run applications, it is pretty heavy like a full virtual

12
00:00:53.020 --> 00:00:59.070
machine, it is a full operating system with the binary, libraries, and obligation bundles.

13
00:00:59.350 --> 00:01:01.350
And, it also takes some time to boot up.

14
00:01:01.390 --> 00:01:06.790
It needs to go through the whole boot cycle which can take some minutes before your guest operating system is live.

15
00:01:08.420 --> 00:01:10.370
So, that brings us to containers.

16
00:01:10.370 --> 00:01:13.280
So, here on the right you see where the container is.

17
00:01:13.280 --> 00:01:14.920
You have still the physical server.

18
00:01:14.930 --> 00:01:19.580
Then you have a host operating system and then you can have multiple containers on your host operating system using the docker engine.

19
00:01:23.120 --> 00:01:25.170
Docker is just one example of software that is available.

20
00:01:25.190 --> 00:01:28.460
There is other software available for containers as well.

21
00:01:28.460 --> 00:01:34.560
Here we have three containers. The containers contain binary and libraries with applications in them.

22
00:01:34.880 --> 00:01:37.850
They don't need to boot up the full guest operating system.

23
00:01:37.850 --> 00:01:43.760
So, when you launch a container instead of waiting minutes it will almost instantly start your container.

24
00:01:43.760 --> 00:01:48.640
So, it is a lot more lightweight than the virtual machines.

25
00:01:48.980 --> 00:01:55.780
Containers can also be a couple of megabytes where virtual machines are often a lot bigger.

26
00:01:55.790 --> 00:02:01.130
Than containers on cloud providers are still a little bit different than just running a container on the host operating system,

27
00:02:01.130 --> 00:02:07.250
because cloud providers still use these Hypervisor to isolate the customers from each other.

28
00:02:07.280 --> 00:02:12.000
So, you still have a server, a host operating system Hypervisor, then you have a guest operating system,

29
00:02:12.050 --> 00:02:14.140
and on top of that you have containers.

30
00:02:14.480 --> 00:02:16.290
Currently that's just how it is,

31
00:02:16.520 --> 00:02:23.050
but you will still get all the benefits of containerization even on cloud, you just have this extra abstraction

32
00:02:23.040 --> 00:02:27.720
between your containers and the host operating system.

33
00:02:27.740 --> 00:02:32.660
On cloud providers you typically are going to have multiple guest operating systems running their multiple containers and

34
00:02:32.660 --> 00:02:39.740
those nodes together will then form your cluster "reg1" to run containers on. Docker is the most popular container software.

35
00:02:41.360 --> 00:02:47.450
There are alternatives available an alternative to Dakar is rkt which also works with Kubernetes.

36
00:02:47.600 --> 00:02:53.570
If you don't want to use Docker you can use rkt instead. Docker consists of Docker engine.

37
00:02:53.620 --> 00:02:58.910
It's Docker runtime, it's a software to make run the Docker images, 

38
00:02:58.910 --> 00:03:04.490
and also the software that you will you to build Docker images to then run on your Kubernetes cluster.

39
00:03:04.520 --> 00:03:09.660
You also have Docker Hub for help, which is an online service to store and fetch Docker images.

40
00:03:09.860 --> 00:03:15.500
So, once you build an image with Docker engine, you can then store it on the Internet using the help,

41
00:03:15.530 --> 00:03:20.470
you have public repositories, you have private repositories, where you can store your Docker images.

42
00:03:20.720 --> 00:03:23.710
The Docker Hub also allows you to build those images online.

43
00:03:23.720 --> 00:03:27.490
So, they provide a service to you that you don't have to build them on your PC, you can also do online.

44
00:03:27.500 --> 00:03:33.380
The cloud provides themselves also have alternatives to DockerHub.

45
00:03:33.430 --> 00:03:39.440
For instance, AWS has its own repository where you can see your doctor images.

46
00:03:39.580 --> 00:03:45.960
You can also run your own Docker Hub, you can run your own repository, if you would like to.

47
00:03:45.970 --> 00:03:47.600
So, what are the benefits of the Docker.

48
00:03:47.950 --> 00:03:52.460
Isolation, you ship a binary with all the dependencies.

49
00:03:52.540 --> 00:03:55.530
No more it works on my machine but not in production.

50
00:03:55.630 --> 00:03:58.350
It's the same binary that you use on your machine

51
00:03:58.420 --> 00:04:02.020
to test your software that you will be done using in production.

52
00:04:02.050 --> 00:04:07.840
So, there is a closer parity between Dev, QA, and production environments, because you are using the same

53
00:04:07.840 --> 00:04:12.810
binary. Docker makes development teams able to ship faster.

54
00:04:12.810 --> 00:04:14.600
We can build images pretty quick,

55
00:04:14.730 --> 00:04:19.620
you can them distribute them pretty easily using Docker Hub or another registry and then you servers can start pulling those images.

56
00:04:21.300 --> 00:04:28.560
This would be a lot more cumbersome with virtual machine images than with containing images.

57
00:04:28.600 --> 00:04:35.060
You can run the same Docker image unchanged on laptops, data center, VMs, and cloud providers.

58
00:04:35.560 --> 00:04:40.680
So, you can have the same image that you run on premise and in the cloud, and should act exactly the same

59
00:04:41.990 --> 00:04:47.980
Docker use linux containers, which is a kernel feature for operating system level isolation.

60
00:04:47.990 --> 00:04:54.290
The reason why containers cannot go to the whole system or to containers or you don't see information

61
00:04:54.290 --> 00:04:58.060
of other containers is because of this isolation done on a kernel level.

62
00:04:59.320 --> 00:05:03.430
If you have read something about containers you probably have seen this analogy already.

63
00:05:03.460 --> 00:05:10.090
It's a ship with containers on it. So, basically with containerization builds your container,

64
00:05:10.190 --> 00:05:13.970
in that exact same state, so you can run it wherever you want.

65
00:05:13.990 --> 00:05:18.820
The container contains all of dependencies, so it should execute exactly the same,

66
00:05:18.820 --> 00:05:24.990
whether you run it locally, in the cloud, on Kubernetes, or anywhere you want to run it.

67
00:05:25.120 --> 00:05:28.360
And that is the main advantage of using containers.
