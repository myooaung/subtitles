1
00:00:00,700 --> 00:00:04,960
The next coming lectures are part of the advance topics.

2
00:00:05,030 --> 00:00:11,810
So, now you have covered all of the Kubernetes basics and now we can start with advanced topics.

3
00:00:11,920 --> 00:00:18,710
The first topic is a Service Discovery using DNS as of Kubernetes 1.3.

4
00:00:18,780 --> 00:00:25,450
DNS is a built-in service launched adamantly using the addon manager 

5
00:00:25,450 --> 00:00:26,260
before 1.3 you had to enter some commands.

6
00:00:26,260 --> 00:00:29,020
Now it is already launched automatically.

7
00:00:29,400 --> 00:00:35,030
The addons the Kubernetes are in the "/etc/kubernetes/addons" directory on the master node.

8
00:00:35,110 --> 00:00:39,110
You might want to take a look there if you're interested in other addons.

9
00:00:39,220 --> 00:00:46,420
The DNS service can be used within pods to find other services running on the same cluster

10
00:00:46,420 --> 00:00:48,300
Multiple containers within one pod

11
00:00:48,300 --> 00:00:54,040
don't need this service, as they can contact each other directly. A container in the same pod can

12
00:00:54,040 --> 00:00:58,770
connect to the port of the other container directly using "localhost: port".

13
00:00:58,840 --> 00:01:04,390
So if you have a web service and a database service then the web service can just connect localhost, and

14
00:01:04,390 --> 00:01:10,500
then the port of a database, and it will be able to access the database within the same pod.

15
00:01:10,870 --> 00:01:16,970
If you want to connect from a web service in one pod to a database in another pod, then you need Service Discovery

16
00:01:16,980 --> 00:01:20,230
because you cannot just access this other pod,

17
00:01:20,290 --> 00:01:25,520
you don't know the IP address or port. To make the network

18
00:01:25,560 --> 00:01:30,960
a port will always need a service definition, so only when you create a service for a pod, then the pod

19
00:01:30,990 --> 00:01:37,060
really becomes accessible, and Service Discovery will work.

20
00:01:37,090 --> 00:01:44,030
So, this is an example of how one app could reach another app using DNS. on the left you have "Application 1",

21
00:01:44,140 --> 00:01:51,910
we have a container in a pod, and a service for that pod. A service is at "1" and has IP address

22
00:01:51,990 --> 00:01:54,090
10.0.0.1

23
00:01:54,100 --> 00:01:55,920
Then on the right we have "Application 2",

24
00:01:55,910 --> 00:02:00,520
we you also have a container in a pod, and this has another IP address,

25
00:02:00,550 --> 00:02:06,730
The IP address is 10.0.0.2 for "Service: app2".

26
00:02:06,890 --> 00:02:14,460
If you would execute commands on the container of pod one for instance host of one service, the name

27
00:02:14,550 --> 00:02:17,130
of the service, then you would get the IP address back

28
00:02:17,130 --> 00:02:19,450
10.0.0.1

29
00:02:19,560 --> 00:02:22,160
This is the Service Discovery in action.

30
00:02:22,200 --> 00:02:30,380
You only need the name of the service to find the IP address of that service. 

31
00:02:30,440 --> 00:02:31,220
If "app1" wants to contact "app2"

32
00:02:31,640 --> 00:02:37,110
It can do a DNS look up on "app2-service" and it will get an IP address

33
00:02:37,170 --> 00:02:39,760
10.0.0.2

34
00:02:39,930 --> 00:02:45,050
This is only going to work if both applications are in the same namespace.

35
00:02:45,200 --> 00:02:50,910
The standard namespace that we have been launching in is the default namespace, because we haven't really

36
00:02:50,910 --> 00:02:53,170
specified a namespace.

37
00:02:53,250 --> 00:02:54,170
What does it mean.

38
00:02:54,240 --> 00:03:00,810
Default stands for default namespace. Pods and services can be launched in different namespaces to logically

39
00:03:00,810 --> 00:03:02,140
separate your cluster.

40
00:03:02,280 --> 00:03:07,230
You can have different namespaces to just logically separate your cluster.

41
00:03:07,230 --> 00:03:08,420
Default is a "default1".

42
00:03:08,430 --> 00:03:13,100
There's also a kube system where the Kubernetes services run in.

43
00:03:13,500 --> 00:03:21,030
If you'd want specify a namespace then you just do a DNS lookup of "app2-service.default", where default

44
00:03:21,090 --> 00:03:22,740
is a namespace.

45
00:03:22,740 --> 00:03:28,650
If you want to do a lookup on the full hostname, the full hostname is actually the [name of the service].[namespace].[svc].[cluster].[local]

46
00:03:28,830 --> 00:03:37,860
and this whole hostname is also 10.0.0.2.

47
00:03:38,040 --> 00:03:46,560
This how one application in one pod can access another application in another pod. These requests

48
00:03:46,590 --> 00:03:53,180
here are always on the "A" type, which is resolving from a host to an IP address.

49
00:03:53,190 --> 00:03:57,250
There's also an "SRV" type if you want to know the port number.

50
00:03:57,270 --> 00:04:02,340
So, here we just have the IP address, but it's also possible to get the port number.

51
00:04:02,350 --> 00:04:04,210
So, how does it really work?

52
00:04:04,210 --> 00:04:06,150
How does this DNS really work?

53
00:04:06,490 --> 00:04:12,130
So, let's say that we have a pod, so we have a pod on the left with a container, we can start this container

54
00:04:12,160 --> 00:04:19,640
using "kubectl run" on "busybox", I am going to run the image busybox, which is just going to give us a shell.

55
00:04:19,810 --> 00:04:25,880
And if you use "cat" to show the contents of a file. 

56
00:04:25,920 --> 00:04:26,930
Here we are going to show the contents of "busybox".

57
00:04:27,430 --> 00:04:36,610
Then you can see that the name server points to 10.0.0.10, which is the DNS server. And the DNS server is

58
00:04:36,760 --> 00:04:44,800
"Kube-dns" running in another pod, exposed as a service, with the IP address 10.0.0.10.

59
00:04:45,280 --> 00:04:53,010
And the reason why I didn't see it, when you did "kubectl get pods" is because it runs in another namespace.

60
00:04:53,260 --> 00:04:59,280
If you would do "--namespace" equals "kube-system", with "kubectl get pods", you would see that

61
00:04:59,310 --> 00:05:03,140
there are pods running anytime when the Kubernetes is running.

62
00:05:03,290 --> 00:05:12,280
The reason why we can use the service name, or servicename.default, or servicename.svc.cluster.local

63
00:05:12,290 --> 00:05:17,720
you can see here in the line with the search in Linux

64
00:05:17,930 --> 00:05:22,140
when you look up a DNS name this can be automatically added.

65
00:05:22,280 --> 00:05:29,990
So, if you just do a lookup of the service name then actually it will do a 

66
00:05:29,990 --> 00:05:32,930
DNS request of servicename.default.svc.cluster.local

67
00:05:33,060 --> 00:05:41,430
So, this is how it works under the hood, DNS resolving can help you to do service discovery.

68
00:05:41,490 --> 00:05:48,180
In the next demo, I'm going to run a deployment, which is a lab app, and I'm going to run a separate service, and then you

69
00:05:48,180 --> 00:05:53,670
will see that just using DNS names, our lab app will be able to find the database which is the other

70
00:05:53,710 --> 00:05:56,050
service. 

71
00:05:56,100 --> 00:05:59,270
So, we can continue with next lecture which is the demo.
