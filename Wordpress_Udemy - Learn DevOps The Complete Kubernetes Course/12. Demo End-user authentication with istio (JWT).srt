1
1

00:00:00,190  -->  00:00:01,840
<v Edward Viaene>In this demo, I will show you</v>
2

2

00:00:01,840  -->  00:00:04,543
end-user authentication using a JWT token.
3

3

00:00:06,060  -->  00:00:11,060
I have again an empty Kubernetes cluster with Istio enabled,
4

4

00:00:12,740  -->  00:00:16,983
and I'm going to use helloworld-jwt.yaml in this demo.
5

5

00:00:18,930  -->  00:00:20,670
This will spin up exactly the services
6

6

00:00:20,670  -->  00:00:23,553
that I've shown you in the previous lecture.
7

7

00:00:24,930  -->  00:00:28,960
So we're going to use a gateway, a helloworld gateway.
8

8

00:00:28,960  -->  00:00:31,585
We're going to create a virtual service,
9

9

00:00:31,585  -->  00:00:33,890
and the difference is that I'm not going to use
10

10

00:00:33,890  -->  00:00:35,620
the example.com domain name,
11

11

00:00:35,620  -->  00:00:37,670
I'm going to use a real host name
12

12

00:00:37,670  -->  00:00:39,960
because this host name need to exist
13

13

00:00:39,960  -->  00:00:44,490
for our sidecar to be able to retrieve this jwks.json.
14

14

00:00:46,230  -->  00:00:48,860
So this is a virtual service and this will go to the host
15

15

00:00:48,860  -->  00:00:51,620
auth.default.svc.cluster.local
16

16

00:00:51,620  -->  00:00:53,880
which is defined a little bit lower.
17

17

00:00:53,880  -->  00:00:55,810
Then I will have a second virtual service.
18

18

00:00:55,810  -->  00:00:57,460
I'll have the hello.kubernetes.newtech.academy
19

19

00:00:57,460  -->  00:01:00,440
and this will go to the hello service.
20

20

00:01:00,440  -->  00:01:04,250
So this is the service that we'll use to authenticate
21

21

00:01:04,250  -->  00:01:07,720
and this is the service that I need to be authenticated for.
22

22

00:01:07,720  -->  00:01:12,720
Then we have a deployment of our authentication service.
23

23

00:01:13,530  -->  00:01:17,620
It's still http-echo. I all wrote this in one app.
24

24

00:01:17,620  -->  00:01:20,170
Text is showing this is the authentication service.
25

25

00:01:21,460  -->  00:01:24,793
I have a service for this and then I have second deployment.
26

26

00:01:25,680  -->  00:01:28,130
And this says hello, you can only reach this service
27

27

00:01:28,130  -->  00:01:31,263
when authenticated, and this also has a service.
28

28

00:01:33,050  -->  00:01:35,633
You're going to enable MTLS still.
29

29

00:01:37,020  -->  00:01:40,470
So your ARR MTLS rules, which is the same
30

30

00:01:40,470  -->  00:01:43,913
as the previous ones that we did in the previous MTLS demos.
31

31

00:01:46,060  -->  00:01:51,060
I'm going to execute this. Kubectl apply
32

32

00:01:52,770  -->  00:01:57,770
of helloworld-jwt.yaml. This will spin up the pods.
33

33

00:02:02,651  -->  00:02:04,350
And what I need to do is now I need to log in
34

34

00:02:04,350  -->  00:02:08,623
to my AWS account and I need to create this.
35

35

00:02:13,080  -->  00:02:16,230
Auth.kubernetes.newtech.academy
36

36

00:02:16,230  -->  00:02:18,893
because our sidecar will try to connect to this one.
37

37

00:02:20,530  -->  00:02:22,760
So I'm logged into my AWS account.
38

38

00:02:22,760  -->  00:02:27,760
I'm going to route 53. I have here one hosted zone.
39

39

00:02:28,010  -->  00:02:33,010
Kubernetes.newtech.academy. I will create a new record.
40

40

00:02:33,450  -->  00:02:37,540
This is gonna be auth.kubernetes.newtech.academy,
41

41

00:02:37,540  -->  00:02:42,180
domain alias, and I only have one ELB classic load balancer
42

42

00:02:42,180  -->  00:02:45,070
and this is the Istio English load balancer.
43

43

00:02:45,070  -->  00:02:47,460
So I'm just going to pick this one.
44

44

00:02:47,460  -->  00:02:50,137
I'm going to click create, and now I have
45

45

00:02:50,137  -->  00:02:52,822
auth.kubernetes.newtech.academy,
46

46

00:02:52,822  -->  00:02:54,913
which goes to the load balancer.
47

47

00:02:55,870  -->  00:02:57,250
You also can create one for hello,
48

48

00:02:57,250  -->  00:03:00,120
but it's not really necessary as we can just pause
49

49

00:03:00,120  -->  00:03:02,523
the header with our curl commands.
50

50

00:03:03,957  -->  00:03:04,983
We just have to wait a few seconds
51

51

00:03:04,983  -->  00:03:07,330
until this DNS is propagated.
52

52

00:03:07,330  -->  00:03:09,160
These changes need to be made,
53

53

00:03:09,160  -->  00:03:10,920
otherwise it might not work.
54

54

00:03:10,920  -->  00:03:12,960
This only takes a few seconds before it propagates.
55

55

00:03:12,960  -->  00:03:14,270
You just have to make sure that you do this
56

56

00:03:14,270  -->  00:03:16,913
before enabling the end-user authentication.
57

57

00:03:17,820  -->  00:03:22,820
Back to our terminal, let's have a look again at our pods.
58

58

00:03:23,000  -->  00:03:25,960
They're both running. I haven't enabled
59

59

00:03:25,960  -->  00:03:28,410
end-user authentication, so I should be able
60

60

00:03:28,410  -->  00:03:31,800
to access my hello pod still
61

61

00:03:31,800  -->  00:03:34,540
because there's no posse enabled on it.
62

62

00:03:34,540  -->  00:03:37,173
So let's try it. I'm going to use curl for that.
63

63

00:03:38,960  -->  00:03:43,283
Let's have look what the load balancer host name is.
64

64

00:03:44,353  -->  00:03:46,393
This is the load balancer host name.
65

65

00:03:47,490  -->  00:03:51,010
So I'm going to curl this host name,
66

66

00:03:51,010  -->  00:03:56,010
host: hello.kubernetes.newtech.academy.
67

67

00:04:00,000  -->  00:04:02,410
Hello, you can only reach this service when authenticated.
68

68

00:04:02,410  -->  00:04:04,250
Well, I didn't put authentication on,
69

69

00:04:04,250  -->  00:04:09,250
so I can just readjust now. Let's try to put it on now.
70

70

00:04:11,050  -->  00:04:15,880
Helloworld-jwt-enable, we'll put it on.
71

71

00:04:15,880  -->  00:04:17,520
So this is the policy,
72

72

00:04:17,520  -->  00:04:19,610
that I showed you in the previous lecture.
73

73

00:04:19,610  -->  00:04:21,453
We have this jwt configuration here.
74

74

00:04:22,530  -->  00:04:24,340
Make sure you also enable MTLS,
75

75

00:04:24,340  -->  00:04:26,290
because MTLS is enabled in our croster.
76

76

00:04:27,620  -->  00:04:30,570
Targets is hello. This is the name of the service.
77

77

00:04:30,570  -->  00:04:32,410
The issuer that we looking for,
78

78

00:04:32,410  -->  00:04:35,360
is http-echo@http-echo.kubernetes.newtech.academy
79

79

00:04:35,360  -->  00:04:39,327
and the jwksUrl is auth.kubernetes.academy/
80

80

00:04:39,327  -->  00:04:43,613
.well-known/jwks.json. Let's first get the token.
81

81

00:04:46,390  -->  00:04:47,997
Let's enable this and then get the token.
82

82

00:04:47,997  -->  00:04:52,943
So I'll just enable this. How to get this token.
83

83

00:04:56,660  -->  00:05:01,460
Login and then I'm going to poss my username.
84

84

00:05:01,460  -->  00:05:04,400
So if I just do login, it will say no login supplied.
85

85

00:05:04,400  -->  00:05:07,334
This is written in the code. If I do minus d,
86

86

00:05:07,334  -->  00:05:10,973
I can add some data. It's expecting a json.
87

87

00:05:13,660  -->  00:05:18,060
Login, and my login's Edward.
88

88

00:05:18,060  -->  00:05:20,120
And I'll just submit it like that.
89

89

00:05:20,120  -->  00:05:23,400
So then I get a token, and now I need this token
90

90

00:05:23,400  -->  00:05:26,350
to access this other service.
91

91

00:05:26,350  -->  00:05:29,330
So let's try to exit this hello service without
92

92

00:05:29,330  -->  00:05:34,330
tossing his token. Origin authentication failed.
93

93

00:05:35,000  -->  00:05:38,710
So this works because I enabled the posse,
94

94

00:05:38,710  -->  00:05:42,150
and the posse says you need to be authenticated
95

95

00:05:42,150  -->  00:05:43,600
and if you're not authenticated,
96

96

00:05:43,600  -->  00:05:47,230
then I will give you a permission
97

97

00:05:47,230  -->  00:05:49,710
in Iotin origin authentication failed.
98

98

00:05:49,710  -->  00:05:51,260
So now we need to pause this token,
99

99

00:05:51,260  -->  00:05:55,633
so we'll do token equals. It's easier to pause like that.
100

100

00:05:57,350  -->  00:06:02,350
And this is my token. And then pause this token
101

101

00:06:02,909  -->  00:06:07,400
using the header. The header is authorization bearer
102

102

00:06:07,400  -->  00:06:10,130
and then the token. So I'm doing this manually now,
103

103

00:06:10,130  -->  00:06:13,050
but this is typically incorporated in the app.
104

104

00:06:13,050  -->  00:06:15,613
Either pause the header or pause it using a cookie.
105

105

00:06:17,040  -->  00:06:18,870
And then if everything goes right,
106

106

00:06:18,870  -->  00:06:21,850
we shouldn't get an error anymore, of no origin.
107

107

00:06:21,850  -->  00:06:24,644
But, we should get this sentence again.
108

108

00:06:24,644  -->  00:06:26,380
And this works. It says hello,
109

109

00:06:26,380  -->  00:06:28,930
you can only reach this service when authenticated.
110

110

00:06:29,940  -->  00:06:32,150
So what happened in the background?
111

111

00:06:32,150  -->  00:06:33,940
Let's have a look at this token.
112

112

00:06:33,940  -->  00:06:38,940
Has to go to jwt.io.
113

113

00:06:39,520  -->  00:06:44,120
We can just put our encoded JWT token here
114

114

00:06:44,120  -->  00:06:47,010
and then we'll see the headers, the payload,
115

115

00:06:47,010  -->  00:06:48,973
and we can verify the signature.
116

116

00:06:50,600  -->  00:06:52,350
The header's algorithm that I'm using
117

117

00:06:52,350  -->  00:06:55,830
is RS256, using asymmetric encryption.
118

118

00:06:55,830  -->  00:06:58,510
So it has a private key and a public key.
119

119

00:06:58,510  -->  00:07:01,250
I have a kid, this is mykey.
120

120

00:07:01,250  -->  00:07:05,241
And I have a typ JWT. In this JWT token,
121

121

00:07:05,241  -->  00:07:08,090
I have an expiration time. I have groups,
122

122

00:07:08,090  -->  00:07:13,090
which I have hide myself, issued at the issuer.
123

123

00:07:13,550  -->  00:07:18,103
So we'll create an iss token, the login, and the subject.
124

124

00:07:19,860  -->  00:07:22,060
It's only this issuer that's going to be used.
125

125

00:07:22,060  -->  00:07:24,934
My Istio to check whether the issuer
126

126

00:07:24,934  -->  00:07:28,653
is this http-echo.kubernetes.newtech.academy.
127

127

00:07:29,860  -->  00:07:31,380
Let's have a look again at configuration
128

128

00:07:31,380  -->  00:07:34,250
and let's have at then how that Istio
129

129

00:07:34,250  -->  00:07:36,850
could verify this signature
130

130

00:07:36,850  -->  00:07:38,390
because I cannot verify it right now
131

131

00:07:38,390  -->  00:07:40,660
because I don't have the public key, right?
132

132

00:07:40,660  -->  00:07:43,200
So it says it's an invalid signature right now
133

133

00:07:43,200  -->  00:07:46,475
because I have this token, but I don't have the public key
134

134

00:07:46,475  -->  00:07:51,475
to verify the signature. This is token.
135

135

00:07:51,560  -->  00:07:54,090
Let's have a look again at configuration.
136

136

00:07:54,090  -->  00:07:59,090
Jwt-enable.yaml. Issuer, we've seen this in the token.
137

137

00:08:00,083  -->  00:08:03,960
It had the key iss, so this issuer is something
138

138

00:08:03,960  -->  00:08:07,660
that was created by the authentication app.
139

139

00:08:07,660  -->  00:08:09,320
It's just something that has to be there.
140

140

00:08:09,320  -->  00:08:11,885
So that we are sure that this is a token
141

141

00:08:11,885  -->  00:08:15,260
that is issued by our authentication server.
142

142

00:08:15,260  -->  00:08:18,120
Then we need to verify it. And we are telling Istio,
143

143

00:08:18,120  -->  00:08:21,870
you can verify it using this jwks.json.
144

144

00:08:21,870  -->  00:08:25,230
So the sidecar will actually go to this url.
145

145

00:08:25,230  -->  00:08:29,262
So our hello sidecar will curl this url.
146

146

00:08:29,262  -->  00:08:34,262
That's why we need this TNS. And this json,
147

147

00:08:35,180  -->  00:08:38,503
will list our keys. It will also have the kid.
148

148

00:08:40,540  -->  00:08:42,510
It will have a type, which is RSA,
149

149

00:08:42,510  -->  00:08:44,840
and it will have the public key.
150

150

00:08:44,840  -->  00:08:47,770
And this is an encoded public key,
151

151

00:08:47,770  -->  00:08:51,060
that we can use, or that Istio can use
152

152

00:08:51,060  -->  00:08:55,020
to verify a signature of this JWT token.
153

153

00:08:55,020  -->  00:08:58,960
So this token, sidecar will receive.
154

154

00:08:58,960  -->  00:09:01,463
It needs to first validate it.
155

155

00:09:01,463  -->  00:09:06,260
It will use this public key to validate the signature.
156

156

00:09:06,260  -->  00:09:09,050
The signature is going to be the last part of the key.
157

157

00:09:09,050  -->  00:09:11,450
So this is the last part. This is the signature.
158

158

00:09:12,335  -->  00:09:15,540
And when it's valid, then it can use the data
159

159

00:09:15,540  -->  00:09:18,760
that is in this key. Data contains the issuer.
160

160

00:09:18,760  -->  00:09:22,000
It will compare the issuer. If this issuer is correct,
161

161

00:09:22,000  -->  00:09:23,465
then it will allow access
162

162

00:09:23,465  -->  00:09:26,763
to hello.kubernetes.newtech.academy.
163

163

00:09:28,120  -->  00:09:33,120
You can also validate this token using jwt.io,
164

164

00:09:33,690  -->  00:09:36,140
but then you a public key. This is the public key,
165

165

00:09:36,140  -->  00:09:40,550
but it's not in a format that jwt.io will recognize.
166

166

00:09:40,550  -->  00:09:42,563
You need to convert it, but if you want to get
167

167

00:09:42,563  -->  00:09:45,770
the public key, you can actually login
168

168

00:09:45,770  -->  00:09:50,547
to this authentication port and then here you have
169

169

00:09:52,580  -->  00:09:54,760
the private key, the private pem
170

170

00:09:54,760  -->  00:09:57,470
that's supposed to use to generate this token.
171

171

00:09:57,470  -->  00:09:59,950
You also have the public key and the public pem.
172

172

00:09:59,950  -->  00:10:02,913
So this public pem is the one that you need.
173

173

00:10:03,920  -->  00:10:07,123
This is in a pem format, and if you copy this,
174

174

00:10:07,123  -->  00:10:12,123
go to jwt.io, paste it here, and it says signature verified.
175

175

00:10:14,200  -->  00:10:16,079
Cause now it was able to verify the signature
176

176

00:10:16,079  -->  00:10:18,500
and that is what the Istio sidecar does.
177

177

00:10:18,500  -->  00:10:22,593
It verifies this signature, looks up some of the data in it,
178

178

00:10:23,650  -->  00:10:25,830
and then it says we have a valid signature
179

179

00:10:25,830  -->  00:10:30,236
now we can exit this service. So this is a very nice system
180

180

00:10:30,236  -->  00:10:34,198
that Istio provides, that you can enable authentication
181

181

00:10:34,198  -->  00:10:38,120
on services, using this end-user authentication
182

182

00:10:38,120  -->  00:10:42,470
using JWT tokens. If anything goes wrong
183

183

00:10:42,470  -->  00:10:44,370
when you're trying out this demo yourself,
184

184

00:10:44,370  -->  00:10:48,470
then the best chance to debug this
185

185

00:10:48,470  -->  00:10:53,470
is by getting the logs of this hello pod.
186

186

00:10:55,590  -->  00:10:58,900
So if you do kubectl logs of this hello pod,
187

187

00:10:58,900  -->  00:11:00,940
then it'll say we have two containers
188

188

00:11:00,940  -->  00:11:02,840
that you will have to choose from.
189

189

00:11:02,840  -->  00:11:04,352
You have the hello container
190

190

00:11:04,352  -->  00:11:05,870
and we have the Istio proxy container.
191

191

00:11:05,870  -->  00:11:10,870
Kubectl logs of this pod name, Istio proxy
192

192

00:11:11,140  -->  00:11:13,620
will give you the logs of the sidecar.
193

193

00:11:13,620  -->  00:11:16,216
So this is envoy, this is a logs of envoy
194

194

00:11:16,216  -->  00:11:20,238
trying to connect to it. So if something goes wrong,
195

195

00:11:20,238  -->  00:11:23,210
then it will be in here. For example,
196

196

00:11:23,210  -->  00:11:26,040
if you cannot reach the url of the jwks token,
197

197

00:11:26,040  -->  00:11:28,310
then you'll find the error here
198

198

00:11:28,310  -->  00:11:29,810
and then you can remediate it.
