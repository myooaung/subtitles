WEBVTT
1
1

00:00:00.400  -->  00:00:01.320
<v Instructor>In this demo,</v>
2

2

00:00:01.320  -->  00:00:04.423
I'll be running the first app behind a load balancer.
3

3

00:00:06.430  -->  00:00:09.750
I'm again going to log in into my Vagrant box.
4

4

00:00:09.750  -->  00:00:12.560
The same one I used to spin up my Alias Kubernetes
5

5

00:00:12.560  -->  00:00:13.833
cluster with cups.
6

6

00:00:15.150  -->  00:00:20.150
I have the Kubernetes course clones right here.
7

7

00:00:20.430  -->  00:00:22.290
If you haven't downloaded the course material
8

8

00:00:22.290  -->  00:00:25.840
from GitHub yet, have a look at the procedure document.
9

9

00:00:25.840  -->  00:00:29.993
So here I have two files that I want to use.
10

10

00:00:31.770  -->  00:00:35.940
The first one is our hello world, the bot,
11

11

00:00:35.940  -->  00:00:38.240
and I added here the name.
12

12

00:00:38.240  -->  00:00:40.130
So it's still running on port 3000
13

13

00:00:40.130  -->  00:00:43.113
I just added a name, nodejs-port,
14

14

00:00:44.596  -->  00:00:47.050
which I can then reuse in the service.
15

15

00:00:47.050  -->  00:00:50.530
So our service is going to be of type: LoadBalancer,
16

16

00:00:50.530  -->  00:00:51.610
which in our case,
17

17

00:00:51.610  -->  00:00:54.440
is going to be an elastic load balancer on Alias.
18

18

00:00:54.440  -->  00:00:57.710
It will be automatically created for us.
19

19

00:00:57.710  -->  00:00:59.540
Port is going to be 80,
20

20

00:00:59.540  -->  00:01:01.260
the standard HDP port,
21

21

00:01:01.260  -->  00:01:04.440
and the target port is going to be the nodejst port.
22

22

00:01:04.440  -->  00:01:07.930
Then Kubernetes knows that it needs to go
23

23

00:01:07.930  -->  00:01:10.960
to this container.
24

24

00:01:10.960  -->  00:01:12.540
The protocol is TCP.
25

25

00:01:12.540  -->  00:01:15.380
The selector is going to refer to our apps.
26

26

00:01:15.380  -->  00:01:18.580
We have app hello world is going to be the service
27

27

00:01:18.580  -->  00:01:21.753
for the pod with the label app hello world.
28

28

00:01:23.510  -->  00:01:28.510
I'm going to run this kubectl create minus F of the pod,
29

29

00:01:33.870  -->  00:01:36.312
and then of the service.
30

30

00:01:36.312  -->  00:01:37.640
So this takes some time.
31

31

00:01:37.640  -->  00:01:39.610
While this is setting up, let's have look in
32

32

00:01:39.610  -->  00:01:41.033
the Alias console.
33

33

00:01:53.123  -->  00:01:57.200
So, I'm here on the main page and I go to EC2.
34

34

00:01:57.200  -->  00:02:00.093
And we have now one load balancer running.
35

35

00:02:02.230  -->  00:02:05.433
So this load balancer is internet facing.
36

36

00:02:06.690  -->  00:02:08.000
It's running on port 80
37

37

00:02:08.870  -->  00:02:13.180
and it's going to refer to our three instances.
38

38

00:02:13.180  -->  00:02:17.300
Those three instances will route the traffic to our pod.
39

39

00:02:17.300  -->  00:02:20.520
That's why you'll be at all three of them.
40

40

00:02:20.520  -->  00:02:23.440
The ELB does know exactly where the pod is running,
41

41

00:02:23.440  -->  00:02:25.280
so it just adds all three of them.
42

42

00:02:25.280  -->  00:02:27.920
And every node will then redirect your traffic
43

43

00:02:27.920  -->  00:02:29.220
to where the pod is
44

44

00:02:29.220  -->  00:02:31.220
because the nodes know where the pod is.
45

45

00:02:32.820  -->  00:02:35.780
So there's a health check on this port.
46

46

00:02:35.780  -->  00:02:39.020
So this is a node port that is exposed on every node.
47

47

00:02:39.020  -->  00:02:41.860
And that will be the port that is used by the ELB.
48

48

00:02:44.340  -->  00:02:47.330
So the mapping is from port 80 on the ELB itself,
49

49

00:02:47.330  -->  00:02:52.330
and it goes to the instance ports 32162 to the nodes itself.
50

50

00:02:53.380  -->  00:02:55.460
And then on the node,
51

51

00:02:55.460  -->  00:02:57.913
it will redirect the traffic to the correct pod.
52

52

00:02:59.910  -->  00:03:02.420
This ELB has a DNS name.
53

53

00:03:02.420  -->  00:03:05.253
So what we can actually do is if you go to route 53,
54

54

00:03:06.410  -->  00:03:11.070
this is our whole hits records for the Kubernetes zone.
55

55

00:03:11.070  -->  00:03:14.239
I can create a new record and I can say
56

56

00:03:14.239  -->  00:03:18.780
helloworld.kubernetes.newtech academy.
57

57

00:03:18.780  -->  00:03:23.780
And I can say there's an Alias for our load balancer,
58

58

00:03:25.610  -->  00:03:27.203
so I can create this.
59

59

00:03:30.260  -->  00:03:35.260
And then I can actually use this to directly go
60

60

00:03:36.380  -->  00:03:39.483
to the load balancer and directly to my app.
61

61

00:03:40.410  -->  00:03:45.370
If we go to helloworld.kubernetes.newtech academy,
62

62

00:03:45.370  -->  00:03:47.570
you can see hello world.
63

63

00:03:47.570  -->  00:03:48.910
So our route 53,
64

64

00:03:48.910  -->  00:03:51.450
hellowworld.kubernetes.newtech academy,
65

65

00:03:51.450  -->  00:03:52.813
goes to our load balancer.
66

66

00:03:54.208  -->  00:03:58.420
Our load balancer redirects the traffic from port 80
67

67

00:03:58.420  -->  00:04:02.980
to one of those three nodes on this instance port,
68

68

00:04:02.980  -->  00:04:05.280
and then the traffic is redirected to our pod,
69

69

00:04:07.140  -->  00:04:08.883
which then gives hello world.
70

70

00:04:10.820  -->  00:04:13.000
If you would go to the security groups,
71

71

00:04:13.000  -->  00:04:16.990
you would also see that we have a new security group
72

72

00:04:16.990  -->  00:04:19.460
for our load balancer,
73

73

00:04:19.460  -->  00:04:23.050
which is right here, our ELB.
74

74

00:04:23.050  -->  00:04:28.050
And then if you go to the nodes or even the master,
75

75

00:04:29.030  -->  00:04:30.830
you see that these one ends with 2A.
76

76

00:04:34.010  -->  00:04:38.980
We have all traffic open between our Kubernetes nodes
77

77

00:04:38.980  -->  00:04:40.900
and the load balancer.
78

78

00:04:40.900  -->  00:04:44.123
So the load balancer can access our Kubernetes cluster.
79

79

00:04:45.090  -->  00:04:46.760
So that's it for this demo.
80

80

00:04:46.760  -->  00:04:49.750
Now we can actually create apps on Kubernetes
81

81

00:04:49.750  -->  00:04:53.050
that you can expose to the internet using
82

82

00:04:53.050  -->  00:04:55.833
the elastic load balancer off Amazon.
