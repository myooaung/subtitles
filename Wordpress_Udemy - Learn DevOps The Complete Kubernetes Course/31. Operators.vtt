WEBVTT
1
1

00:00:00.170  -->  00:00:01.120
<v Instructor>In this lecture</v>
2

2

00:00:01.120  -->  00:00:03.053
I'll be talking about Operators.
3

3

00:00:04.670  -->  00:00:07.840
An Operator is a method of packaging, deploying,
4

4

00:00:07.840  -->  00:00:10.340
and managing a Kubernetes application.
5

5

00:00:10.340  -->  00:00:11.330
This definition comes from the
6

6

00:00:11.330  -->  00:00:14.320
coreos.com website slash operators
7

7

00:00:14.320  -->  00:00:16.120
because it's the CoreOS team
8

8

00:00:16.120  -->  00:00:19.983
that actually came up with this method, the Operator.
9

9

00:00:20.860  -->  00:00:23.973
It puts operational knowledge in an application.
10

10

00:00:24.830  -->  00:00:27.490
It brings the user closer to the experience
11

11

00:00:27.490  -->  00:00:29.630
of managed cloud services,
12

12

00:00:29.630  -->  00:00:31.774
rather then having to know all the specifics
13

13

00:00:31.774  -->  00:00:34.343
of an application deployed to Kubernetes.
14

14

00:00:35.730  -->  00:00:38.180
Once an Operator is deployed it can be managed
15

15

00:00:38.180  -->  00:00:40.820
using Custom Resource Definitions,
16

16

00:00:40.820  -->  00:00:43.520
arbitrary types that extend the Kubernetes API.
17

17

00:00:43.520  -->  00:00:46.223
I just explained to this in the previous lecture.
18

18

00:00:47.410  -->  00:00:49.710
It also provides a great way to deploy
19

19

00:00:49.710  -->  00:00:51.720
stateful services on Kubernetes
20

20

00:00:51.720  -->  00:00:53.460
because a lot of complexities
21

21

00:00:53.460  -->  00:00:56.664
can be hidden from the end user.
22

22

00:00:56.664  -->  00:00:59.020
Any third party can create Operators
23

23

00:00:59.020  -->  00:01:01.060
that you can start using.
24

24

00:01:01.060  -->  00:01:03.920
There are operators for Prometheus, for Vault,
25

25

00:01:03.920  -->  00:01:06.140
for Rook, which is providing storage,
26

26

00:01:06.140  -->  00:01:08.833
for MySQL, for PostgreSQL, and so on.
27

27

00:01:10.060  -->  00:01:13.480
On a side note, if you're interested, for example, in Rook,
28

28

00:01:13.480  -->  00:01:15.240
which can provide you storage,
29

29

00:01:15.240  -->  00:01:18.060
I have another course on Kubernetes which is called
30

30

00:01:18.060  -->  00:01:20.023
On-premise or Cloud Agnostic Kubernetes.
31

31

00:01:20.023  -->  00:01:23.100
It's also available on the Udemy marketplace
32

32

00:01:23.100  -->  00:01:25.950
and this has a couple of lectures on Rook
33

33

00:01:25.950  -->  00:01:27.550
which is also using an Operator.
34

34

00:01:28.630  -->  00:01:30.050
In the next demo, I will show you
35

35

00:01:30.050  -->  00:01:33.670
how to start using an Operator for PostgreSQL.
36

36

00:01:33.670  -->  00:01:35.840
So PostgreSQL is a database.
37

37

00:01:35.840  -->  00:01:39.340
It's stateful so it's a little bit more difficult to manage.
38

38

00:01:39.340  -->  00:01:42.653
So our Operator will help us manage PostgreSQL.
39

39

00:01:44.030  -->  00:01:46.840
If you would just deploy a PostgreSQL container,
40

40

00:01:46.840  -->  00:01:48.764
it will only start a database.
41

41

00:01:48.764  -->  00:01:51.700
If you're going to use a PostgreSQL Operator,
42

42

00:01:51.700  -->  00:01:54.061
it allows you to also create replicas,
43

43

00:01:54.061  -->  00:01:58.060
initiate a failover, create backups, scale, and so on.
44

44

00:01:58.060  -->  00:02:00.410
So you see, it's similar to R-E-S
45

45

00:02:00.410  -->  00:02:03.040
on L-U-S, if you are familiar with that.
46

46

00:02:03.040  -->  00:02:06.153
The Operator is acting more like a service on the cloud.
47

47

00:02:07.090  -->  00:02:10.130
An Operator contains a lot of the management logic
48

48

00:02:10.130  -->  00:02:13.460
that you as an administrator, or user, might want,
49

49

00:02:13.460  -->  00:02:15.660
rather than having to implement it yourself.
50

50

00:02:16.800  -->  00:02:19.270
So if you would just deploy a Postgres container
51

51

00:02:19.270  -->  00:02:21.720
you would have to implement replicas, failover,
52

52

00:02:21.720  -->  00:02:23.840
and backups and how to scale it.
53

53

00:02:23.840  -->  00:02:26.950
Here, this is already written for you in an Operator
54

54

00:02:26.950  -->  00:02:29.760
and you only have to use tools around this Operator
55

55

00:02:29.760  -->  00:02:33.093
to then be able to use these functionalities.
56

56

00:02:34.100  -->  00:02:38.490
We will use tools that come with this PostgreSQL Operator.
57

57

00:02:38.490  -->  00:02:41.800
Here I just wanted to give you an example yaml extract
58

58

00:02:41.800  -->  00:02:45.410
where you can see that we are going to use custom objects.
59

59

00:02:45.410  -->  00:02:47.202
Here we have a different API version
60

60

00:02:47.202  -->  00:02:48.970
and we have current Pgcluster
61

61

00:02:49.890  -->  00:02:51.780
which is a PostgreSQL cluster.
62

62

00:02:51.780  -->  00:02:56.110
This resource doesn't exist on every cluster.
63

63

00:02:56.110  -->  00:02:58.510
You need to create this C-R-D first.
64

64

00:02:58.510  -->  00:03:00.310
And only then you can create
65

65

00:03:00.310  -->  00:03:03.010
these kind of objects on your cluster.
66

66

00:03:03.010  -->  00:03:03.990
And this Pgcluster is a cluster
67

67

00:03:03.990  -->  00:03:06.640
that is managed by the Operator.
68

68

00:03:06.640  -->  00:03:09.140
And then this can provide the extra functionality.
69

69

00:03:10.070  -->  00:03:12.470
In the next demo I will show you how this works.
