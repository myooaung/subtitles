1
1

00:00:00,320  -->  00:00:01,850
<v Edward>In this demo I will show you</v>
2

2

00:00:01,850  -->  00:00:03,833
an example of taints and tolerations.
3

3

00:00:06,430  -->  00:00:08,570
Before I start with a demo let me show you
4

4

00:00:08,570  -->  00:00:10,483
how you can see the master taint,
5

5

00:00:11,420  -->  00:00:13,940
because as you noticed when you schedule pods
6

6

00:00:13,940  -->  00:00:16,110
they are not scheduled on a master,
7

7

00:00:16,110  -->  00:00:18,000
and that is because the master has a taint.
8

8

00:00:18,000  -->  00:00:21,483
So if you do kubectl get nodes,
9

9

00:00:23,090  -->  00:00:25,983
and we get the master node, that's the second one here,
10

10

00:00:28,190  -->  00:00:32,200
and I do o yaml to output all the yaml
11

11

00:00:32,200  -->  00:00:34,350
I will pipe it to less.
12

12

00:00:34,350  -->  00:00:36,920
Type in search for taint.
13

13

00:00:36,920  -->  00:00:41,920
Then this node has one taint, effect NoSchedule,
14

14

00:00:42,040  -->  00:00:45,853
and the key is node-role.kubernetes.io/master.
15

15

00:00:46,800  -->  00:00:50,040
So as long as you don't have toleration on this key,
16

16

00:00:50,040  -->  00:00:52,913
you will never schedule a pod on the master.
17

17

00:00:55,530  -->  00:00:57,140
I have fuller here tolerations
18

18

00:00:58,340  -->  00:01:02,863
and here in the README I have the commands to taint a node.
19

19

00:01:04,130  -->  00:01:06,253
I'm going to taint my first node here,
20

20

00:01:07,220  -->  00:01:08,610
this one here.
21

21

00:01:08,610  -->  00:01:10,830
So I'm going to do kubectl taint node
22

22

00:01:10,830  -->  00:01:14,540
node name and I'm gonna give
23

23

00:01:14,540  -->  00:01:17,640
the taint type equals specialnode,
24

24

00:01:17,640  -->  00:01:19,240
and I'm going to use NoSchedule.
25

25

00:01:21,690  -->  00:01:25,640
Then I have a tolerations.yaml file.
26

26

00:01:25,640  -->  00:01:28,150
Here we have two deployments.
27

27

00:01:28,150  -->  00:01:32,330
The first deployment doesn't have any toleration.
28

28

00:01:32,330  -->  00:01:35,530
Just a normal deployment, three replicas,
29

29

00:01:35,530  -->  00:01:37,780
and a second one is also three replicas,
30

30

00:01:37,780  -->  00:01:42,163
but it has toleration on type equal specialnode,
31

31

00:01:43,400  -->  00:01:44,473
effect NoSchedule.
32

32

00:01:49,060  -->  00:01:53,310
This kubectl create this toleration,
33

33

00:01:53,310  -->  00:01:54,710
and what is going to happen,
34

34

00:01:57,594  -->  00:02:00,240
I'm going to do kubectl get pod o wide
35

35

00:02:00,240  -->  00:02:02,063
so we get the nodes as well.
36

36

00:02:03,430  -->  00:02:04,863
I tainted this node.
37

37

00:02:05,790  -->  00:02:08,190
So only if the pod has its toleration
38

38

00:02:08,190  -->  00:02:09,893
it will be scheduled on this node.
39

39

00:02:13,130  -->  00:02:15,320
My first deployment that launches three pods
40

40

00:02:15,320  -->  00:02:17,980
doesn't have any toleration.
41

41

00:02:17,980  -->  00:02:22,271
So you see is scheduled on the node where it appeared
42

42

00:02:22,271  -->  00:02:23,820
(mumbles) 160.
43

43

00:02:23,820  -->  00:02:26,431
So it never scheduled on the other node.
44

44

00:02:26,431  -->  00:02:30,250
And the other deployment, the one with a toleration,
45

45

00:02:30,250  -->  00:02:33,883
has two pods running on this node that has been tainted.
46

46

00:02:35,880  -->  00:02:40,563
Let me now taint the same node but with a different key.
47

47

00:02:41,760  -->  00:02:45,837
Taint node and then I will just say type2 specialnode2.
48

48

00:02:48,275  -->  00:02:52,803
What is now going to happen, kubectl get pods o wide.
49

49

00:02:54,090  -->  00:02:56,140
Nothing is going to happen because I'm still using
50

50

00:02:56,140  -->  00:02:59,353
NoSchedule so it will not affect any pods.
51

51

00:03:00,470  -->  00:03:01,983
Let's say that I delete a pod.
52

52

00:03:04,054  -->  00:03:06,433
I will delete this pod here.
53

53

00:03:08,400  -->  00:03:09,750
What's going to happen now,
54

54

00:03:11,070  -->  00:03:13,423
well it doesn't match this second taint,
55

55

00:03:14,450  -->  00:03:17,433
so it will not be scheduled on this node anymore.
56

56

00:03:20,735  -->  00:03:23,940
This one is terminated and now there's a new one,
57

57

00:03:23,940  -->  00:03:26,280
and it has been scheduled on the 160 node
58

58

00:03:26,280  -->  00:03:27,983
and not on this node anymore.
59

59

00:03:28,890  -->  00:03:32,900
I still have one pod running on this third node
60

60

00:03:32,900  -->  00:03:34,113
that ends with six.
61

61

00:03:36,160  -->  00:03:38,933
So let me do another taint.
62

62

00:03:41,480  -->  00:03:45,609
And I will use testkey testavalue NoExecute.
63

63

00:03:45,609  -->  00:03:48,650
And NoExecute is no different than NoSchedule,
64

64

00:03:48,650  -->  00:03:50,363
because this will evict the pod.
65

65

00:03:51,260  -->  00:03:52,280
So if I
66

66

00:03:54,140  -->  00:03:57,010
use this node name
67

67

00:03:58,020  -->  00:03:59,260
and I press enter
68

68

00:04:00,670  -->  00:04:03,313
and I do kubectl get pod o wide,
69

69

00:04:05,570  -->  00:04:08,560
and I now see that the last pod
70

70

00:04:08,560  -->  00:04:11,010
that was running on this node is now terminating,
71

71

00:04:13,190  -->  00:04:16,520
and a new pod is now running
72

72

00:04:16,520  -->  00:04:19,253
but on 160 and not on six anymore.
73

73

00:04:20,310  -->  00:04:23,700
So this is how taints work and how you can use tolerations
74

74

00:04:23,700  -->  00:04:28,700
to still schedule pods on nodes that are tainted.
75

75

00:04:28,770  -->  00:04:31,317
And then I also showed you the difference
76

76

00:04:31,317  -->  00:04:33,283
between NoExecute and NoSchedule.
77

77

00:04:35,180  -->  00:04:39,123
You can delete the pods again using kubectl delete.
78

78

00:04:41,570  -->  00:04:43,780
To then also remove the taints
79

79

00:04:44,780  -->  00:04:46,693
you can use the same taint commands,
80

80

00:04:47,547  -->  00:04:49,333
but with the minus sign after the key.
81

81

00:04:50,360  -->  00:04:55,280
For example, I did a taint nodes of this six node
82

82

00:04:55,280  -->  00:04:58,059
with testkey testvalue NoExecute.
83

83

00:04:58,059  -->  00:05:01,200
If I just do testkey with a minus sign
84

84

00:05:02,130  -->  00:05:05,350
then I removed the taint and now this node
85

85

00:05:05,350  -->  00:05:08,630
has been untainted so this key is gone.
86

86

00:05:08,630  -->  00:05:11,110
So you need to do that for every key.
87

87

00:05:11,110  -->  00:05:15,243
So type, minus, and type 2 minus.
88

88

00:05:16,090  -->  00:05:17,540
And then the taints are gone.
