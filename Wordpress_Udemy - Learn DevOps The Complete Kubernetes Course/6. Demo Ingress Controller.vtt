WEBVTT
1
1

00:00:00.350  -->  00:00:02.380
<v ->In this demo, I'm going to show you</v>
2

2

00:00:02.380  -->  00:00:04.453
an example of an Ingress Controller.
3

3

00:00:11.150  -->  00:00:14.373
First, let me show you how the ingress controller works.
4

4

00:00:15.740  -->  00:00:18.400
I'm going to use nginx ingress controller,
5

5

00:00:18.400  -->  00:00:20.723
which is an existing one.
6

6

00:00:21.830  -->  00:00:23.450
This is a replication controller,
7

7

00:00:23.450  -->  00:00:24.840
so if this one would crash,
8

8

00:00:24.840  -->  00:00:27.590
it would be automatically relaunched.
9

9

00:00:27.590  -->  00:00:30.530
It's called nginx-ingress-controller
10

10

00:00:30.530  -->  00:00:33.613
and it's an image that comes from a Google container,
11

11

00:00:33.613  -->  00:00:36.180
it's an nginx-ingress-controller
12

12

00:00:36.180  -->  00:00:37.853
and it's this version here.
13

13

00:00:39.680  -->  00:00:41.580
It's going to check the health.
14

14

00:00:41.580  -->  00:00:42.830
We have a readiness probe,
15

15

00:00:42.830  -->  00:00:46.500
to know when the container is ready to be deployed
16

16

00:00:46.500  -->  00:00:48.120
and there we have the livenes probe,
17

17

00:00:48.120  -->  00:00:50.000
to periodically check whether
18

18

00:00:50.000  -->  00:00:51.653
our container is still healthy.
19

19

00:00:52.800  -->  00:00:55.060
We're going to specify a pod name,
20

20

00:00:55.060  -->  00:00:57.590
which is our pod name and the namespace,
21

21

00:00:57.590  -->  00:00:59.830
which is default in our case.
22

22

00:00:59.830  -->  00:01:01.727
Unless you specify another namespace.
23

23

00:01:02.690  -->  00:01:07.550
You're going to run this on port 80 and port 443.
24

24

00:01:07.550  -->  00:01:09.870
This ingress controller is going to be working on
25

25

00:01:09.870  -->  00:01:13.320
the standard HTTP port and the HTTPS port.
26

26

00:01:13.320  -->  00:01:15.660
It's going to give these as arguments
27

27

00:01:15.660  -->  00:01:18.363
when it's going to launch the container.
28

28

00:01:20.180  -->  00:01:21.490
So this is the Ingress controller
29

29

00:01:21.490  -->  00:01:23.460
that you could write yourself even if you want,
30

30

00:01:23.460  -->  00:01:26.023
but we are going to use one that already exists.
31

31

00:01:27.430  -->  00:01:28.980
We are also going to say that the
32

32

00:01:28.980  -->  00:01:33.010
default backend service is the echoheaders default.
33

33

00:01:33.010  -->  00:01:35.740
And this is a service that I'm going to launch.
34

34

00:01:35.740  -->  00:01:37.020
Traffic will be forwarded to
35

35

00:01:37.020  -->  00:01:40.050
this service when there's no match.
36

36

00:01:40.050  -->  00:01:42.320
So, I'm going to say these hosts,
37

37

00:01:42.320  -->  00:01:44.920
I'm going to say in my Ingress rules,
38

38

00:01:44.920  -->  00:01:48.080
these are the hosts, helloworld-v1.example.com,
39

39

00:01:48.080  -->  00:01:50.590
and helloworld-v2.example.com,
40

40

00:01:50.590  -->  00:01:54.793
if those don't match, then go to this default service.
41

41

00:01:56.960  -->  00:02:00.140
Let me just, kubectl create all those things.
42

42

00:02:00.140  -->  00:02:04.423
I'm going to create the ingress,
43

43

00:02:06.110  -->  00:02:07.993
the object controller,
44

44

00:02:09.980  -->  00:02:11.793
the echo service,
45

45

00:02:13.710  -->  00:02:16.250
the Hello world v1,
46

46

00:02:16.250  -->  00:02:17.623
and the Hello world v2.
47

47

00:02:19.700  -->  00:02:24.163
So these are just services that we can access.
48

48

00:02:25.625  -->  00:02:27.630
This is our Hello World v1 app.
49

49

00:02:27.630  -->  00:02:30.290
And this is our Hello World v2 app.
50

50

00:02:30.290  -->  00:02:33.180
The only thing that's different between those two is that
51

51

00:02:35.030  -->  00:02:37.640
I'm asking for image version two,
52

52

00:02:37.640  -->  00:02:38.750
and the other one is just asking
53

53

00:02:38.750  -->  00:02:40.853
for the standard image.
54

54

00:02:42.900  -->  00:02:45.623
Let me check if the ports are up.
55

55

00:02:46.560  -->  00:02:48.393
Yes, they are running now.
56

56

00:02:49.320  -->  00:02:51.080
Let me get the IP address,
57

57

00:02:51.080  -->  00:02:53.210
minikube IP is just going to give me the
58

58

00:02:53.210  -->  00:02:55.963
IP address of my cluster.
59

59

00:02:57.770  -->  00:03:00.010
If you're testing these on AWS, you
60

60

00:03:00.010  -->  00:03:02.293
have the IP addresses in the EC two console.
61

61

00:03:03.620  -->  00:03:05.860
You just might have to change your
62

62

00:03:05.860  -->  00:03:08.360
security groups to make sure those ports are open.
63

63

00:03:09.690  -->  00:03:13.260
I'm going to curl this IP address.
64

64

00:03:13.260  -->  00:03:15.320
What's going to happen then?
65

65

00:03:15.320  -->  00:03:19.840
I'm not specifying any hosts, those are non existent hosts.
66

66

00:03:19.840  -->  00:03:22.370
So I cannot just go in my browser
67

67

00:03:22.370  -->  00:03:25.700
and type them in because they actually don't exist.
68

68

00:03:25.700  -->  00:03:27.630
You could use real world host
69

69

00:03:27.630  -->  00:03:29.450
and then you can just use your browser.
70

70

00:03:29.450  -->  00:03:30.750
I'm just going to give an argument
71

71

00:03:30.750  -->  00:03:33.783
to fake that I'm sending, that I'm using those host.
72

72

00:03:35.020  -->  00:03:37.330
Addons specify any host.
73

73

00:03:37.330  -->  00:03:39.610
So, I'm going to hit this
74

74

00:03:39.610  -->  00:03:43.000
default backend service echo headers default,
75

75

00:03:43.000  -->  00:03:46.090
and this is just going to give the HTTP headers.
76

76

00:03:46.090  -->  00:03:46.923
So, curl.
77

77

00:03:48.100  -->  00:03:50.373
I'm hitting this default service now.
78

78

00:03:52.610  -->  00:03:57.610
Let me know past the header, only pass the host.
79

79

00:03:58.030  -->  00:04:02.823
And the host is going to be helloworld.v1.example.com,
80

80

00:04:05.140  -->  00:04:07.230
this curl command has the same effect as
81

81

00:04:07.230  -->  00:04:09.873
going to a real DNS name in your browser.
82

82

00:04:11.780  -->  00:04:13.770
This gives us hello world.
83

83

00:04:13.770  -->  00:04:17.140
So our Ingress controller forwarded us now to
84

84

00:04:18.610  -->  00:04:20.593
my Hello World v1 deployment.
85

85

00:04:23.350  -->  00:04:25.253
Let's now try v2,
86

86

00:04:27.120  -->  00:04:28.350
And what do I get?
87

87

00:04:28.350  -->  00:04:32.980
I'll show it better, Hello World v2 here.
88

88

00:04:32.980  -->  00:04:34.520
What do I get?
89

89

00:04:34.520  -->  00:04:36.420
Hello World v2.
90

90

00:04:36.420  -->  00:04:39.830
Now our Ingress controller forwarded us to
91

91

00:04:39.830  -->  00:04:44.770
hello world v2, to my, to my second hello world.
92

92

00:04:44.770  -->  00:04:46.770
And I'm pointing down towards the ports
93

93

00:04:46.770  -->  00:04:50.203
but actually I should point towards the services.
94

94

00:04:51.640  -->  00:04:55.220
So, this is the default one.
95

95

00:04:55.220  -->  00:04:57.380
And this is if we hit v1,
96

96

00:04:57.380  -->  00:04:59.093
and this is if we hit v2.
97

97

00:05:00.128  -->  00:05:01.710
This is just one from the previous lab,
98

98

00:05:01.710  -->  00:05:03.670
so don't worry about that one.
99

99

00:05:03.670  -->  00:05:05.530
So that's how the Ingress controller works,
100

100

00:05:05.530  -->  00:05:07.230
you basically have the capability.
101

101

00:05:08.250  -->  00:05:11.190
It's still in beta now, but it will become stable.
102

102

00:05:11.190  -->  00:05:13.650
We have the capability to just run
103

103

00:05:14.620  -->  00:05:17.060
a load balancer inside our cluster,
104

104

00:05:17.060  -->  00:05:18.980
that is going to redirect the traffic
105

105

00:05:18.980  -->  00:05:21.850
to the correct host for us.
106

106

00:05:21.850  -->  00:05:23.690
Which is a viable alternative
107

107

00:05:23.690  -->  00:05:25.970
if you don't want to run an ELB
108

108

00:05:25.970  -->  00:05:27.400
or an External Load Balancer from
109

109

00:05:27.400  -->  00:05:28.710
your cloud provider,
110

110

00:05:28.710  -->  00:05:30.500
because those also cost money
111

111

00:05:30.500  -->  00:05:33.770
and don't have all the capabilities that you maybe need.
112

112

00:05:33.770  -->  00:05:36.810
Because, when you write your own controller,
113

113

00:05:36.810  -->  00:05:39.050
you could add all the features that you want.
114

114

00:05:39.050  -->  00:05:42.243
Things like enterprise authentication, if necessary.
