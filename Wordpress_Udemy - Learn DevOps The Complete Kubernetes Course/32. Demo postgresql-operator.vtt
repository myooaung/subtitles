WEBVTT
1
1

00:00:00.170  -->  00:00:01.670
<v Edward>In this demo I will show you</v>
2

2

00:00:01.670  -->  00:00:03.833
how to use the Postgres-operator.
3

3

00:00:05.320  -->  00:00:07.813
You can find the Postgres-operator on GitHub.
4

4

00:00:07.813  -->  00:00:10.690
It's not the only Postgres-operator that is available,
5

5

00:00:10.690  -->  00:00:13.130
there are multiple ones, everyone can create an operator
6

6

00:00:13.130  -->  00:00:16.360
for postgres or for any other database.
7

7

00:00:16.360  -->  00:00:18.870
I took this one because it's quite popular,
8

8

00:00:18.870  -->  00:00:20.950
it has some stars and also
9

9

00:00:20.950  -->  00:00:22.620
because it has all the functionality.
10

10

00:00:22.620  -->  00:00:25.810
So you can create, configure, manage PostgreSQL clusters,
11

11

00:00:25.810  -->  00:00:28.540
you can scale it, you can make replicas
12

12

00:00:28.540  -->  00:00:30.433
so it's a pretty advanced operator.
13

13

00:00:31.880  -->  00:00:34.010
You can find the official documentation here
14

14

00:00:34.010  -->  00:00:36.370
which includes getting started.
15

15

00:00:36.370  -->  00:00:37.520
I will show you step by step
16

16

00:00:37.520  -->  00:00:40.480
how to install the operator and use it.
17

17

00:00:40.480  -->  00:00:43.150
And then afterwards you can maybe check the documentation
18

18

00:00:43.150  -->  00:00:46.450
to see what else you can do with this operator.
19

19

00:00:46.450  -->  00:00:48.053
Maybe some more advanced things.
20

20

00:00:49.990  -->  00:00:54.050
So I'm logged in to my VM and I will go
21

21

00:00:54.050  -->  00:00:56.920
to vagrant kubernetes course Postgres-operator.
22

22

00:00:56.920  -->  00:00:59.693
So it's a folder in my GitHub repository.
23

23

00:01:00.590  -->  00:01:03.320
Here I have readme with all the basic commands
24

24

00:01:03.320  -->  00:01:08.320
that you need to launch the operator and to start using it.
25

25

00:01:08.900  -->  00:01:10.780
First we need to set up a storage.
26

26

00:01:10.780  -->  00:01:12.803
So this is storage yml file.
27

27

00:01:13.960  -->  00:01:18.960
To set up a storage class with a name standard type GP two
28

28

00:01:19.670  -->  00:01:21.220
in the zone EU West one A,
29

29

00:01:21.220  -->  00:01:24.043
that's where I launched my kubernetes cluster.
30

30

00:01:25.527  -->  00:01:28.230
So I'm gonna do kubectl create the storage
31

31

00:01:29.860  -->  00:01:32.070
and then we can execute a script.
32

32

00:01:32.070  -->  00:01:34.210
So I took this script from this URL,
33

33

00:01:34.210  -->  00:01:38.370
it's from the Postgres-operator GitHub is a quick start
34

34

00:01:38.370  -->  00:01:42.180
for the cool kubernetes engine but you can also use it
35

35

00:01:42.180  -->  00:01:44.290
for other ones, for example I'm going
36

36

00:01:44.290  -->  00:01:47.493
to do it in IGS cluster this also works.
37

37

00:01:50.550  -->  00:01:54.300
So first it tests my kubectl connection which is working.
38

38

00:01:54.300  -->  00:01:55.800
These are the namespaces that I have,
39

39

00:01:55.800  -->  00:01:58.610
I created the cluster nine minutes ago.
40

40

00:01:58.610  -->  00:02:01.240
And then it asked if it can be installed
41

41

00:02:01.240  -->  00:02:04.770
on my current cluster kubernetes newtech academy.
42

42

00:02:04.770  -->  00:02:08.023
I press yes and this will then start installation.
43

43

00:02:09.280  -->  00:02:13.473
It asked me what storage to use, I also say standard.
44

44

00:02:16.600  -->  00:02:20.220
There are some errors here, it's in the script somewhere,
45

45

00:02:20.220  -->  00:02:21.820
I'm sure that it will get resolved in one
46

46

00:02:21.820  -->  00:02:25.190
of the next revisions but for now there seems
47

47

00:02:25.190  -->  00:02:27.900
to be some replacements that go wrong
48

48

00:02:27.900  -->  00:02:30.030
but don't worry it's for example.
49

49

00:02:30.030  -->  00:02:31.870
The storage class that it wants to replace
50

50

00:02:31.870  -->  00:02:34.180
that's why I added a standard one
51

51

00:02:34.180  -->  00:02:36.690
because that's a replacement that doesn't work here.
52

52

00:02:36.690  -->  00:02:39.230
So for now you can only use the one
53

53

00:02:39.230  -->  00:02:42.630
that is called standard because that's what they use.
54

54

00:02:42.630  -->  00:02:45.430
But like I said I'm sure it will be fixed in the future.
55

55

00:02:46.440  -->  00:02:47.830
Do you want to deploy the operator?
56

56

00:02:47.830  -->  00:02:50.920
Yes and now it's going to check
57

57

00:02:50.920  -->  00:02:53.240
whether there has already something that exists.
58

58

00:02:53.240  -->  00:02:57.063
Nothing exists so it's going to install all those objects.
59

59

00:02:58.360  -->  00:03:00.110
You see here the custom resource definitions
60

60

00:03:00.110  -->  00:03:01.373
are now being created.
61

61

00:03:04.690  -->  00:03:08.150
Then a service account a role, role binding,
62

62

00:03:08.150  -->  00:03:10.560
a secret config map and then the deployment
63

63

00:03:10.560  -->  00:03:12.690
for the Postgres-operator.
64

64

00:03:12.690  -->  00:03:14.770
So the Postgres operator itself is a deployment
65

65

00:03:14.770  -->  00:03:15.770
that will be running
66

66

00:03:16.980  -->  00:03:20.053
and a service to reach each Postgres-operator.
67

67

00:03:22.000  -->  00:03:24.050
And now we need to do a port forward
68

68

00:03:24.050  -->  00:03:27.530
to be able to use this operator.
69

69

00:03:27.530  -->  00:03:29.880
So I'll do the port forwarding in a new window.
70

70

00:03:32.660  -->  00:03:35.480
So now I'm doing port forward of the Postgres-operator.
71

71

00:03:35.480  -->  00:03:37.470
So this is unique.
72

72

00:03:37.470  -->  00:03:39.693
If you do this it will be another string.
73

73

00:03:40.530  -->  00:03:43.030
And now I have port forwarding from a local port
74

74

00:03:43.030  -->  00:03:46.333
to my kubernetes operator ports.
75

75

00:03:47.480  -->  00:03:49.740
In order to access the PGO CLI,
76

76

00:03:49.740  -->  00:03:52.873
place it within your path from its default location.
77

77

00:03:53.920  -->  00:03:56.040
I made a script.
78

78

00:03:56.040  -->  00:03:58.290
Set path, that does it for you.
79

79

00:03:58.290  -->  00:04:00.850
So you can just exit set path
80

80

00:04:00.850  -->  00:04:03.100
and then you just need to log in and log out.
81

81

00:04:04.680  -->  00:04:08.360
And then you should be able to use this
82

82

00:04:10.920  -->  00:04:13.633
PGO binary.
83

83

00:04:14.500  -->  00:04:18.570
So PGO client version 3.1, API version 3.1.
84

84

00:04:18.570  -->  00:04:21.170
So this will only works if you have the port forwarding on
85

85

00:04:21.170  -->  00:04:22.960
because this PGO client communicates
86

86

00:04:22.960  -->  00:04:26.323
with this Postgres-operator.
87

87

00:04:28.530  -->  00:04:31.180
As I have not looked at the readme.
88

88

00:04:31.180  -->  00:04:34.150
So we set up a storage, we set up the operator,
89

89

00:04:34.150  -->  00:04:38.650
we enabled port forwarding, we did PGO version to test it
90

90

00:04:38.650  -->  00:04:41.000
and now we can create a posgres secret cluster.
91

91

00:04:42.780  -->  00:04:46.110
We can do PGO create cluster mycluster which will create
92

92

00:04:46.110  -->  00:04:49.773
a postgres instance with the name mycluster.
93

93

00:04:51.870  -->  00:04:55.090
So we have a deployment, a service and have some labels.
94

94

00:04:55.090  -->  00:04:58.403
Let us use kubectl to see what is running.
95

95

00:04:59.290  -->  00:05:02.890
So now the container is creating for mycluster.
96

96

00:05:02.890  -->  00:05:05.450
So you can see here we have also the pod
97

97

00:05:05.450  -->  00:05:06.833
for the operator itself.
98

98

00:05:08.370  -->  00:05:09.690
What is running?
99

99

00:05:09.690  -->  00:05:11.870
Mycluster is being created.
100

100

00:05:11.870  -->  00:05:13.630
This can take some time because the images
101

101

00:05:13.630  -->  00:05:14.580
need to get pulled.
102

102

00:05:16.330  -->  00:05:21.180
Once that is created, we can do PGO show cluster mycluster
103

103

00:05:21.180  -->  00:05:24.940
and we can do show secrets true to show the secrets
104

104

00:05:24.940  -->  00:05:28.090
so that we can then connect using PSQL.
105

105

00:05:28.090  -->  00:05:32.410
So we can use kubectl run IT so we can add terminal,
106

106

00:05:32.410  -->  00:05:35.300
remove after we execute the postgres image
107

107

00:05:35.300  -->  00:05:36.940
which is just an image that you can use
108

108

00:05:36.940  -->  00:05:40.120
that is available on docker hub.
109

109

00:05:40.120  -->  00:05:43.260
PSQL three, well the three you can remove.
110

110

00:05:43.260  -->  00:05:45.510
It's just PSQL is the name of the deployment.
111

111

00:05:46.530  -->  00:05:50.250
PSQL minus H mycluster is the host name
112

112

00:05:50.250  -->  00:05:52.803
minus U postgres and ask for password.
113

113

00:05:55.540  -->  00:05:58.880
There are three new users created, the root user,
114

114

00:05:58.880  -->  00:06:01.630
a primary user and a test user.
115

115

00:06:01.630  -->  00:06:03.403
I'll use the root user postgres.
116

116

00:06:05.080  -->  00:06:07.133
So let's do kubectl run.
117

117

00:06:09.450  -->  00:06:11.970
I just remove this three is not necessary,
118

118

00:06:11.970  -->  00:06:13.710
I had put the three there because sometimes
119

119

00:06:13.710  -->  00:06:16.120
if you quickly want to run it again then the port
120

120

00:06:16.120  -->  00:06:18.180
might be already in use so then you can add two,
121

121

00:06:18.180  -->  00:06:20.100
three, four and so on.
122

122

00:06:20.100  -->  00:06:23.270
But now I haven't run it earlier so PSQL
123

123

00:06:23.270  -->  00:06:25.720
as name of the deployment should be fine.
124

124

00:06:25.720  -->  00:06:28.090
I'm gonna connect to my cluster.
125

125

00:06:28.090  -->  00:06:30.370
This is going to pull first this postgres image
126

126

00:06:30.370  -->  00:06:33.430
because this operator is using custom images
127

127

00:06:33.430  -->  00:06:34.653
is the official image.
128

128

00:06:35.720  -->  00:06:38.853
And then once I'm connected I can use this password.
129

129

00:06:40.140  -->  00:06:42.660
If you don't see a command prompt try pressing Enter.
130

130

00:06:42.660  -->  00:06:44.670
Well if you press Enter,
131

131

00:06:44.670  -->  00:06:46.870
we are just providing an empty password.
132

132

00:06:46.870  -->  00:06:49.990
So now if you'd see this line this is the time
133

133

00:06:49.990  -->  00:06:53.873
to put your password, press ENTER and then your login.
134

134

00:06:56.290  -->  00:07:00.010
I'm now connected to my postgres server
135

135

00:07:00.010  -->  00:07:02.700
that you can use now in your cluster.
136

136

00:07:02.700  -->  00:07:05.227
That is called mycluster.
137

137

00:07:06.850  -->  00:07:09.683
So up to mycluster host you can now use in your cluster.
138

138

00:07:10.580  -->  00:07:11.603
I'll quit from here.
139

139

00:07:13.520  -->  00:07:15.550
And until now it's not really different
140

140

00:07:15.550  -->  00:07:18.530
than just running the postgres server image
141

141

00:07:18.530  -->  00:07:21.290
but the nice things that the operator supplies
142

142

00:07:21.290  -->  00:07:22.910
are the extra features
143

143

00:07:22.910  -->  00:07:25.670
that are difficult to implement yourself.
144

144

00:07:25.670  -->  00:07:29.000
For example, create a read replica.
145

145

00:07:29.000  -->  00:07:31.893
So you can just do PGO skill cluster, scale mycluster
146

146

00:07:34.629  -->  00:07:36.400
and it will create a read replica.
147

147

00:07:36.400  -->  00:07:40.060
So now not only have one instance of our cluster
148

148

00:07:40.060  -->  00:07:42.830
you have two instances and one instance
149

149

00:07:42.830  -->  00:07:44.480
will be synced with the other one.
150

150

00:07:44.480  -->  00:07:49.480
So we have a read replica, kubectl gets pods O wide.
151

151

00:07:51.000  -->  00:07:54.600
So now we have another instance that is being spun up.
152

152

00:07:54.600  -->  00:07:58.760
So let's use watch to wait until it's running.
153

153

00:07:58.760  -->  00:08:01.533
So now it's running but not ready.
154

154

00:08:03.030  -->  00:08:04.963
But in a few seconds it'll be ready.
155

155

00:08:06.310  -->  00:08:10.910
So if you now do PGO show cluster just on mycluster
156

156

00:08:13.773  -->  00:08:16.860
then we now see that you have mycluster but you also
157

157

00:08:16.860  -->  00:08:19.470
now have a replica, mycluster replica
158

158

00:08:19.470  -->  00:08:20.860
and they are both running.
159

159

00:08:20.860  -->  00:08:24.320
So this one is the primary and this one is a secondary.
160

160

00:08:24.320  -->  00:08:27.580
So now it's possible for us when we do maintenance
161

161

00:08:27.580  -->  00:08:31.230
on our nodes or this will be a node failure
162

162

00:08:31.230  -->  00:08:34.610
that we create a replica on another node
163

163

00:08:34.610  -->  00:08:37.400
if we add some more advanced plan to make sure
164

164

00:08:38.487  -->  00:08:40.737
that our postgres can survive a node failure.
165

165

00:08:41.800  -->  00:08:44.690
In the simple set of light it, it actually created
166

166

00:08:44.690  -->  00:08:48.180
the cluster on the same node but you can supply strategies
167

167

00:08:48.180  -->  00:08:51.710
to make sure that for example you have a cluster,
168

168

00:08:51.710  -->  00:08:54.470
a kubernetes cluster that spans multiple zones
169

169

00:08:54.470  -->  00:08:59.060
and that there will always be a replica in the other zones
170

170

00:08:59.060  -->  00:09:01.790
so that your cluster cannot only survive a node failure
171

171

00:09:01.790  -->  00:09:04.623
but also an availability zone failure.
172

172

00:09:06.040  -->  00:09:08.950
We can also create a cluster with automatic failover
173

173

00:09:08.950  -->  00:09:11.380
you can specify that when you create a cluster.
174

174

00:09:11.380  -->  00:09:13.750
Now what I will show you is manual failover.
175

175

00:09:13.750  -->  00:09:17.570
So this mycluster here is my primary
176

176

00:09:17.570  -->  00:09:20.493
so I can do feed your failover my cluster query.
177

177

00:09:22.150  -->  00:09:26.943
And it says that I can failover to this target.
178

178

00:09:29.160  -->  00:09:32.960
So now what will happen is it will create a PG task,
179

179

00:09:32.960  -->  00:09:37.200
a failover task that will make my secondary,
180

180

00:09:37.200  -->  00:09:41.360
my replica the primary and then when I connect to my cluster
181

181

00:09:41.360  -->  00:09:46.300
I will connect to this pod instead, the secondary.
182

182

00:09:46.300  -->  00:09:48.293
So let's do PGO show cluster again.
183

183

00:09:50.060  -->  00:09:54.043
And now the other one became the primary.
184

184

00:09:59.550  -->  00:10:02.760
And now what is happening is that because we did a failover
185

185

00:10:02.760  -->  00:10:06.290
it also created this replica on another node.
186

186

00:10:06.290  -->  00:10:08.490
So now if you wanted we could do some maintenance
187

187

00:10:08.490  -->  00:10:09.833
on this node for example.
188

188

00:10:12.350  -->  00:10:14.940
It's still pending, it takes some time to make
189

189

00:10:14.940  -->  00:10:18.763
this one primary but this is going to happen very soon.
190

190

00:10:21.270  -->  00:10:25.290
This task is PG task is also a CRT.
191

191

00:10:25.290  -->  00:10:30.234
So we can do kubectl get PG tasks, mycluster failover
192

192

00:10:30.234  -->  00:10:32.660
minus O yaml to show this yaml file.
193

193

00:10:32.660  -->  00:10:36.510
So this is a custom resource definition, it's a PG task.
194

194

00:10:36.510  -->  00:10:39.820
So if you wanna see for example all the resource definitions
195

195

00:10:39.820  -->  00:10:43.770
you can do kubectl get CRD and you will see
196

196

00:10:43.770  -->  00:10:47.980
that these are CRDs created by this operator.
197

197

00:10:47.980  -->  00:10:51.170
So this is extending the kubernetes API
198

198

00:10:51.170  -->  00:10:55.270
and this allows me to use this API version and this kind.
199

199

00:10:55.270  -->  00:10:58.033
So we have for example, one for clusters,
200

200

00:10:59.080  -->  00:11:01.620
one for replicas, one for tasks.
201

201

00:11:01.620  -->  00:11:03.510
We can also update our postgres
202

202

00:11:03.510  -->  00:11:05.123
and we also have a CRD for this.
203

203

00:11:06.150  -->  00:11:09.320
So these are our custom and this tool is creating
204

204

00:11:09.320  -->  00:11:11.300
this for us but we don't have to do it.
205

205

00:11:11.300  -->  00:11:13.030
But with some other operators
206

206

00:11:13.030  -->  00:11:16.533
you have to write these the custom definitions.
207

207

00:11:18.200  -->  00:11:20.153
Let's have a look again, the pods.
208

208

00:11:22.410  -->  00:11:26.340
So now we have a running pods on different node.
209

209

00:11:26.340  -->  00:11:31.340
So mycluster XVIS is running on a different node and is now
210

210

00:11:33.840  -->  00:11:36.130
if you do PGO show cluster,
211

211

00:11:36.130  -->  00:11:38.333
it is not a primary and it's running.
212

212

00:11:39.950  -->  00:11:42.340
So this operator provides so much more
213

213

00:11:42.340  -->  00:11:46.460
than just running yourself a postgres server.
214

214

00:11:46.460  -->  00:11:48.800
This is a really good example that shows you
215

215

00:11:48.800  -->  00:11:53.800
that operators can be very similar to cloud services.
216

216

00:11:54.290  -->  00:11:58.450
If you want to run PostgreSQL yourself on kubernetes
217

217

00:11:58.450  -->  00:12:00.500
you might not want to build it yourself but use
218

218

00:12:00.500  -->  00:12:03.510
for example this operator or another one to make
219

219

00:12:03.510  -->  00:12:05.120
the maintenance and the management,
220

220

00:12:05.120  -->  00:12:07.773
the scaling much easier for you.
221

221

00:12:09.090  -->  00:12:12.120
So this is a great example that you should test out
222

222

00:12:12.120  -->  00:12:14.040
and then like I said in the operations lecture,
223

223

00:12:14.040  -->  00:12:16.220
there are many more operators available.
224

224

00:12:16.220  -->  00:12:18.650
On the CoreOS website you will find some operators
225

225

00:12:18.650  -->  00:12:21.440
but also just in GitHub repositories
226

226

00:12:21.440  -->  00:12:23.490
you will find operators that you can use.
