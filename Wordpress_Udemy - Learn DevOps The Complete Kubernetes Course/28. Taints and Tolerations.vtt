WEBVTT
1
1

00:00:00.280  -->  00:00:01.113
<v ->In this lecture</v>
2

2

00:00:01.113  -->  00:00:03.463
I'll be talking about taints and tolerations.
3

3

00:00:05.200  -->  00:00:07.120
In the previous lectures, I explained to you
4

4

00:00:07.120  -->  00:00:08.780
the following concepts.
5

5

00:00:08.780  -->  00:00:12.730
Node affinity, which is similar to the nodeSelector,
6

6

00:00:12.730  -->  00:00:15.870
interpod affinity and anti-affinity,
7

7

00:00:15.870  -->  00:00:18.330
and the next concept, tolerations,
8

8

00:00:18.330  -->  00:00:20.763
is the opposite of node affinity.
9

9

00:00:22.428  -->  00:00:26.600
Tolerations allow a node to repel a set of pods,
10

10

00:00:26.600  -->  00:00:29.480
so instead of using node affinity to make sure
11

11

00:00:29.480  -->  00:00:33.523
that pods run on specific nodes, this is the opposite.
12

12

00:00:35.000  -->  00:00:38.113
We can say that pods cannot run on these nods.
13

13

00:00:40.320  -->  00:00:44.310
Taints mark a node, and tolerations are applied to pods
14

14

00:00:44.310  -->  00:00:46.310
to influence the scheduling of the pods.
15

15

00:00:47.310  -->  00:00:49.950
I'm going to talk about taint and tolerations.
16

16

00:00:49.950  -->  00:00:51.870
Taints are applied to a node,
17

17

00:00:51.870  -->  00:00:53.873
and tolerations are applied to a pod.
18

18

00:00:55.656  -->  00:00:57.650
One use case for taints is to make sure
19

19

00:00:57.650  -->  00:00:59.290
that when you create a new pod,
20

20

00:00:59.290  -->  00:01:01.650
they're not scheduled on the master.
21

21

00:01:01.650  -->  00:01:04.180
When you run a cluster that has more than one node,
22

22

00:01:04.180  -->  00:01:07.550
the master has a taint, and the taint that the master has
23

23

00:01:07.550  -->  00:01:10.860
is called the node-role.kubernetes.io/master,
24

24

00:01:10.860  -->  00:01:12.333
and the type is NoSchedule.
25

25

00:01:13.240  -->  00:01:16.000
Because this master has a specific taint,
26

26

00:01:16.000  -->  00:01:17.840
you can only schedule on the master
27

27

00:01:17.840  -->  00:01:21.470
when you have a toleration applied to your pod.
28

28

00:01:21.470  -->  00:01:24.150
And by default, you don't apply any tolerations.
29

29

00:01:24.150  -->  00:01:28.010
So, by default, you will not schedule on the master,
30

30

00:01:28.010  -->  00:01:31.000
you will schedule your pods on your nodes.
31

31

00:01:31.000  -->  00:01:32.450
If you still want to schedule on the master,
32

32

00:01:32.450  -->  00:01:34.020
you can add a toleration,
33

33

00:01:34.020  -->  00:01:36.293
or you can remove this taint as well.
34

34

00:01:37.540  -->  00:01:41.743
To add a new taint to a node, you can use kubectl taint.
35

35

00:01:42.840  -->  00:01:43.790
For example,
36

36

00:01:43.790  -->  00:01:48.497
kubectl taint nodes node 1 key=value:NoSchedule
37

37

00:01:49.470  -->  00:01:51.613
will add a taint to a node.
38

38

00:01:52.480  -->  00:01:54.563
You can specify key=value.
39

39

00:01:55.450  -->  00:01:58.750
The key and the value you can specify yourself.
40

40

00:01:58.750  -->  00:02:00.600
This taint that is applied to the master
41

41

00:02:00.600  -->  00:02:02.570
doesn't have a value, it just has a key,
42

42

00:02:02.570  -->  00:02:05.230
the node role kubernetes io master.
43

43

00:02:05.230  -->  00:02:08.273
The taints applied by kubernetes don't have a value.
44

44

00:02:09.350  -->  00:02:11.563
So, at this point, if you apply this taint,
45

45

00:02:12.590  -->  00:02:16.960
no pods will be scheduled on this node, on this node1.
46

46

00:02:16.960  -->  00:02:19.780
This will make sure that no pods will be scheduled on node1
47

47

00:02:19.780  -->  00:02:22.750
as long as they don't have a matching toleration.
48

48

00:02:22.750  -->  00:02:25.223
The toleration needs to match this key= value.
49

49

00:02:26.150  -->  00:02:28.210
The following toleration would allow a new pod
50

50

00:02:28.210  -->  00:02:30.223
to be scheduled on the tainted node1.
51

51

00:02:31.350  -->  00:02:34.510
This toleration you add to the pod specification,
52

52

00:02:34.510  -->  00:02:37.040
it has the key, key; the operator equal;
53

53

00:02:37.040  -->  00:02:39.670
and the value, value; and the effect NoSchedule.
54

54

00:02:39.670  -->  00:02:44.040
So, this matches the previous taint that I created on node1.
55

55

00:02:44.040  -->  00:02:46.370
So, if you would create a pod or deployment
56

56

00:02:46.370  -->  00:02:48.113
that uses this pod specification,
57

57

00:02:49.040  -->  00:02:52.093
then this pod could be scheduled on node1.
58

58

00:02:53.060  -->  00:02:55.170
You can use the following operators.
59

59

00:02:55.170  -->  00:02:59.710
Equal, providing a key and value, as an example above.
60

60

00:02:59.710  -->  00:03:02.520
Or exists, only providing a key,
61

61

00:03:02.520  -->  00:03:04.613
checking only whether a key exists.
62

62

00:03:05.830  -->  00:03:09.300
Just like affinity, taints can also be a preference,
63

63

00:03:09.300  -->  00:03:11.973
or soft, rather than a requirement.
64

64

00:03:12.919  -->  00:03:15.200
NoSchedule is a hard requirement that a pod
65

65

00:03:15.200  -->  00:03:18.500
will not be scheduled unless there is a matching toleration.
66

66

00:03:18.500  -->  00:03:21.160
PreferNoSchedule, kubernetes will try
67

67

00:03:21.160  -->  00:03:22.940
and avoid placing a pod that doesn't have
68

68

00:03:22.940  -->  00:03:26.660
a matching toleration, but it's not a hard requirement.
69

69

00:03:26.660  -->  00:03:29.350
So, it's exactly the same as with affinity,
70

70

00:03:29.350  -->  00:03:31.100
just the naming is a bit different.
71

71

00:03:32.060  -->  00:03:35.730
If the taint is applied while there are already running pods
72

72

00:03:35.730  -->  00:03:37.404
these will not be evicted
73

73

00:03:37.404  -->  00:03:40.743
unless the following taint type is used.
74

74

00:03:40.743  -->  00:03:45.743
NoExecute will evict pods with non-matching tolerations.
75

75

00:03:46.360  -->  00:03:50.660
So, if you apply a taint using a type NoSchedule,
76

76

00:03:50.660  -->  00:03:53.540
then current running pods will not be evicted.
77

77

00:03:53.540  -->  00:03:57.060
If you used NoExecute, then pods that are already running
78

78

00:03:57.060  -->  00:03:57.963
will be evicted.
79

79

00:03:59.480  -->  00:04:01.490
When using NoExecute, you can specify
80

80

00:04:01.490  -->  00:04:04.420
within your toleration how long the pod can run
81

81

00:04:04.420  -->  00:04:06.583
on a tainted node before being evicted.
82

82

00:04:07.880  -->  00:04:10.690
Let's say you have a pod with the following toleration.
83

83

00:04:10.690  -->  00:04:12.430
It's the same as the previous toleration,
84

84

00:04:12.430  -->  00:04:14.760
but here the effect is NoExecute,
85

85

00:04:14.760  -->  00:04:17.143
and the tolerationSeconds is 3600.
86

86

00:04:18.060  -->  00:04:19.830
So, this specification will make sure
87

87

00:04:19.830  -->  00:04:22.240
that if a taint is applied to a node
88

88

00:04:23.090  -->  00:04:25.410
where the key is key and the value is value,
89

89

00:04:25.410  -->  00:04:29.310
then this pod will run for 3600 seconds more,
90

90

00:04:29.310  -->  00:04:30.653
and will then be evicted.
91

91

00:04:31.950  -->  00:04:33.980
If you don't specify tolerationSeconds,
92

92

00:04:33.980  -->  00:04:35.390
the toleration will match
93

93

00:04:35.390  -->  00:04:37.710
and the pod will keep running on the node.
94

94

00:04:37.710  -->  00:04:40.440
So, if you don't specify these tolerationSeconds,
95

95

00:04:40.440  -->  00:04:42.000
then it always matches
96

96

00:04:42.000  -->  00:04:43.530
and the pod will just keep on running,
97

97

00:04:43.530  -->  00:04:46.163
just like a normal matching rule.
98

98

00:04:47.430  -->  00:04:49.620
In this example, the toleration will only match
99

99

00:04:49.620  -->  00:04:53.000
for one hour, 3600 seconds, after that,
100

100

00:04:53.000  -->  00:04:54.900
the pod will be evicted from the node.
101

101

00:04:55.830  -->  00:04:58.410
So, it's a bit difficult to understand maybe.
102

102

00:04:58.410  -->  00:05:00.330
If you specify the tolerationSeconds,
103

103

00:05:00.330  -->  00:05:03.090
then the pod will be evicted after this time,
104

104

00:05:03.090  -->  00:05:04.593
if the toleration matches.
105

105

00:05:05.870  -->  00:05:09.077
If you don't specify tolerationSeconds and it matches,
106

106

00:05:09.077  -->  00:05:11.630
then it will always be there,
107

107

00:05:11.630  -->  00:05:14.350
it will not be evicted after a certain amount of time.
108

108

00:05:14.350  -->  00:05:16.140
And, of course, if it doesn't match,
109

109

00:05:16.140  -->  00:05:17.940
then it will be evicted immediately.
110

110

00:05:19.740  -->  00:05:22.190
Some example use cases are,
111

111

00:05:22.190  -->  00:05:24.680
the existing node taints for the master nodes,
112

112

00:05:24.680  -->  00:05:25.770
as I explained.
113

113

00:05:25.770  -->  00:05:27.060
You don't want to be scheduling anything
114

114

00:05:27.060  -->  00:05:29.913
on the master nodes, those have their own function.
115

115

00:05:30.810  -->  00:05:34.040
Taint nodes that are dedicated for a team or a user.
116

116

00:05:34.040  -->  00:05:36.770
Let's say a team or a user has a specific node
117

117

00:05:36.770  -->  00:05:40.673
that only he or she can use, then you can also use taints.
118

118

00:05:41.750  -->  00:05:44.240
If you have a few nodes with specific hardware,
119

119

00:05:44.240  -->  00:05:47.630
for example GPU's, you can taint them to avoid running
120

120

00:05:47.630  -->  00:05:49.913
non-specific applications on those nodes.
121

121

00:05:50.960  -->  00:05:53.590
Depends what the easiest is for your use case,
122

122

00:05:53.590  -->  00:05:56.230
you can use affinity, or you can use the opposite,
123

123

00:05:56.230  -->  00:05:57.063
which is taint.
124

124

00:05:57.940  -->  00:05:59.830
An alpha, but soon to be beta, feature
125

125

00:05:59.830  -->  00:06:02.420
is to taint nodes by condition.
126

126

00:06:02.420  -->  00:06:05.720
I'm doing this lecture when version 1.11 is already out,
127

127

00:06:05.720  -->  00:06:07.300
and this feature didn't make it.
128

128

00:06:07.300  -->  00:06:09.090
So, it's still an alpha now,
129

129

00:06:09.090  -->  00:06:11.793
but in one of the next versions, it will be in beta.
130

130

00:06:13.340  -->  00:06:15.850
So, the taint nodes by condition
131

131

00:06:15.850  -->  00:06:19.210
will automatically taint nodes that have node problems,
132

132

00:06:19.210  -->  00:06:22.350
allowing you to add tolerations to time the eviction
133

133

00:06:22.350  -->  00:06:24.820
of pods from nodes.
134

134

00:06:24.820  -->  00:06:27.200
So, this is a very specific feature.
135

135

00:06:27.200  -->  00:06:28.203
A node problem example can be
136

136

00:06:28.203  -->  00:06:31.210
that there is no disc space left anymore,
137

137

00:06:31.210  -->  00:06:33.600
so then this node will be tainted,
138

138

00:06:33.600  -->  00:06:37.363
and you can time the eviction of the pod from the node.
139

139

00:06:38.870  -->  00:06:42.290
You can enable alpha features by passing the --feature-gates
140

140

00:06:42.290  -->  00:06:44.140
to the Kubernetes controller manager,
141

141

00:06:44.140  -->  00:06:45.500
or, if you are using kops,
142

142

00:06:45.500  -->  00:06:48.720
you can use kops edit to add to add the following lines.
143

143

00:06:48.720  -->  00:06:49.890
So this feature can be enabled
144

144

00:06:49.890  -->  00:06:52.350
by TaintNodesByCondition true,
145

145

00:06:52.350  -->  00:06:54.800
but I would recommend you to maybe just wait
146

146

00:06:54.800  -->  00:06:56.650
until this feature is stable,
147

147

00:06:56.650  -->  00:06:58.920
and then you can just use this feature.
148

148

00:06:58.920  -->  00:07:01.250
In the next slide I will show you a few taints
149

149

00:07:01.250  -->  00:07:04.640
that can be possibly added when you enable this feature,
150

150

00:07:04.640  -->  00:07:07.760
and then you can create tolerations for those.
151

151

00:07:07.760  -->  00:07:11.035
So, here is an example of a toleration that could be used.
152

152

00:07:11.035  -->  00:07:15.470
Toleration, if it is node.alpha.kubernetes.io/unreachable
153

153

00:07:15.470  -->  00:07:19.460
key exists, then the effect will be NoExecute,
154

154

00:07:19.460  -->  00:07:22.540
so it will evict all the pods on this node.
155

155

00:07:22.540  -->  00:07:24.800
But you can say, "I want only to be evicted
156

156

00:07:24.800  -->  00:07:26.650
after 6000 seconds."
157

157

00:07:26.650  -->  00:07:29.220
Because maybe if you cannot reschedule a pod,
158

158

00:07:29.220  -->  00:07:30.390
it will take a lot of time,
159

159

00:07:30.390  -->  00:07:32.260
so sometimes it is better
160

160

00:07:32.260  -->  00:07:35.300
to wait some more minutes to be evicted.
161

161

00:07:35.300  -->  00:07:38.863
If it is reachable again, then no work needs to be done.
162

162

00:07:39.770  -->  00:07:43.030
You have the node.kubernetes.io/not-ready,
163

163

00:07:43.030  -->  00:07:46.560
a taint that can be applied when the node is not ready.
164

164

00:07:46.560  -->  00:07:48.700
Unreachable when the node is unreachable
165

165

00:07:48.700  -->  00:07:50.569
from the node controller.
166

166

00:07:50.569  -->  00:07:53.570
Out-of-disk, the node becomes out of disk.
167

167

00:07:53.570  -->  00:07:56.360
Memory-pressure, the node has memory pressure.
168

168

00:07:56.360  -->  00:07:59.330
Disk-pressure, the node has disk pressure.
169

169

00:07:59.330  -->  00:08:02.860
Network-unavailable, the node's network is unavailable.
170

170

00:08:02.860  -->  00:08:05.180
Currently this is only the host network.
171

171

00:08:05.180  -->  00:08:07.840
Unscheduable, the node is unscheduable.
172

172

00:08:07.840  -->  00:08:10.680
So these are the taints that are applied on those nodes,
173

173

00:08:10.680  -->  00:08:12.310
and then you control the eviction time
174

174

00:08:12.310  -->  00:08:14.203
by using these tolerations.
175

175

00:08:15.382  -->  00:08:17.090
In the next demo, I will show you
176

176

00:08:17.090  -->  00:08:19.963
how these taints and tolerations work in practice.
