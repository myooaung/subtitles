1
1

00:00:00,230  -->  00:00:01,260
<v Edward>In this demo, I will show you</v>
2

2

00:00:01,260  -->  00:00:03,940
how to deploy my Hello World app,
3

3

00:00:03,940  -->  00:00:04,783
the first Istio-enabled app
4

4

00:00:04,783  -->  00:00:06,993
that we will deploy to our cluster.
5

5

00:00:09,134  -->  00:00:12,640
Let me first show you an architecture diagram
6

6

00:00:12,640  -->  00:00:14,680
so that you have a high-level overview
7

7

00:00:14,680  -->  00:00:16,080
of what you are going to do.
8

8

00:00:17,010  -->  00:00:20,650
I'm going to use curl, which is going to be the client,
9

9

00:00:20,650  -->  00:00:21,923
to contact an app.
10

10

00:00:22,890  -->  00:00:24,900
This app will be a micro-service
11

11

00:00:26,080  -->  00:00:27,600
that is not going to be one app,
12

12

00:00:27,600  -->  00:00:29,593
but multiple micro-services.
13

13

00:00:31,360  -->  00:00:33,680
Now that I have deployed istio,
14

14

00:00:33,680  -->  00:00:36,860
it will be an istio-ingress and AWS load balancer
15

15

00:00:36,860  -->  00:00:39,073
pointing to this istio-ingress controller.
16

16

00:00:39,930  -->  00:00:43,110
So if I contact this AWS URL,
17

17

00:00:43,110  -->  00:00:45,000
this AWS load balancer URL
18

18

00:00:45,000  -->  00:00:47,560
I'll be redirected to the istio service
19

19

00:00:47,560  -->  00:00:49,803
and to the istio-ingress controller.
20

20

00:00:50,950  -->  00:00:52,690
I will have to do some configuration
21

21

00:00:52,690  -->  00:00:55,410
to make sure that istio-ingress knows
22

22

00:00:55,410  -->  00:00:58,800
how to contact my app using some YAML definitions
23

23

00:00:58,800  -->  00:01:00,863
that I will show you in a moment.
24

24

00:01:02,810  -->  00:01:06,023
This istio-ingress will then contact my app,
25

25

00:01:07,480  -->  00:01:10,170
rather than contacting the container directly
26

26

00:01:11,650  -->  00:01:14,040
it will contact the envoy proxy,
27

27

00:01:14,040  -->  00:01:16,580
which is deployed as a sidecar in the same pod.
28

28

00:01:16,580  -->  00:01:19,100
So we have one pod, two containers,
29

29

00:01:19,100  -->  00:01:21,650
one is the real app, which is called hello,
30

30

00:01:21,650  -->  00:01:25,453
and one is the envoy proxy deployed by istio.
31

31

00:01:26,800  -->  00:01:28,640
It will contact this proxy and this
32

32

00:01:28,640  -->  00:01:30,053
will contact my app, hello.
33

33

00:01:31,200  -->  00:01:35,020
This hello app is configured that it will go
34

34

00:01:35,020  -->  00:01:37,630
to another app called the world app
35

35

00:01:37,630  -->  00:01:39,563
to get some of its information.
36

36

00:01:41,160  -->  00:01:43,310
When hello is contacting world,
37

37

00:01:43,310  -->  00:01:45,280
it will use the envoy proxy again.
38

38

00:01:45,280  -->  00:01:48,580
So this goes over to envoy proxy to the world app.
39

39

00:01:48,580  -->  00:01:51,642
The world app is also configured to contact the third app,
40

40

00:01:51,642  -->  00:01:56,080
world-v2, so it will also go over the envoy proxy
41

41

00:01:56,080  -->  00:01:58,233
to contact world-v2.
42

42

00:02:00,110  -->  00:02:01,590
At this point everything is sent back
43

43

00:02:01,590  -->  00:02:05,929
to the hello app again, which now has enough information
44

44

00:02:05,929  -->  00:02:09,240
to send back the data to the client.
45

45

00:02:09,240  -->  00:02:12,350
So the client will then see using curl,
46

46

00:02:12,350  -->  00:02:15,040
it will then see the string that has been returned
47

47

00:02:15,040  -->  00:02:18,003
by the hello app, the world app, and the world-v2 app.
48

48

00:02:18,960  -->  00:02:20,490
I only show three pods here,
49

49

00:02:20,490  -->  00:02:22,420
but actually my deployment will have
50

50

00:02:22,420  -->  00:02:24,350
three pods per deployment,
51

51

00:02:24,350  -->  00:02:26,560
so in total I will have nine pods.
52

52

00:02:26,560  -->  00:02:30,590
Three replicas for every deployment.
53

53

00:02:30,590  -->  00:02:32,350
So let's have look of the YAML definitions
54

54

00:02:32,350  -->  00:02:33,593
of these files.
55

55

00:02:34,920  -->  00:02:36,480
So the first file I want to show you
56

56

00:02:36,480  -->  00:02:38,673
is the helloworld.yaml file.
57

57

00:02:40,060  -->  00:02:44,890
I don't define any istio proxy in this file.
58

58

00:02:44,890  -->  00:02:47,800
This will be injected by the istio-ctl commands.
59

59

00:02:47,800  -->  00:02:49,790
So this just looks like any deployment
60

60

00:02:49,790  -->  00:02:51,030
that you would write in the YAML file
61

61

00:02:51,030  -->  00:02:52,023
for Kubernetes.
62

62

00:02:53,190  -->  00:02:55,960
So I have a deployment called 'hello,'
63

63

00:02:55,960  -->  00:02:59,320
three replicas ... I have two labels,
64

64

00:02:59,320  -->  00:03:00,720
app 'hello,' and version v1.
65

65

00:03:01,950  -->  00:03:03,350
This was put in a container,
66

66

00:03:05,190  -->  00:03:07,840
with name 'hello,' and the container is called
67

67

00:03:07,840  -->  00:03:10,300
'http-echo,' and you can have a look at my
68

68

00:03:10,300  -->  00:03:13,490
GitHub repository, as repository http-echo
69

69

00:03:13,490  -->  00:03:16,350
to look at the code, but it's a very simple app.
70

70

00:03:16,350  -->  00:03:18,707
It will just output whatever you pose
71

71

00:03:19,840  -->  00:03:21,760
as an environment-variable text,
72

72

00:03:21,760  -->  00:03:24,560
so in this case, it will return 'hello.'
73

73

00:03:24,560  -->  00:03:25,710
It will also have a look at
74

74

00:03:25,710  -->  00:03:27,440
the environment variable next,
75

75

00:03:27,440  -->  00:03:29,310
which identifies the next service
76

76

00:03:29,310  -->  00:03:30,920
it needs to contact.
77

77

00:03:30,920  -->  00:03:32,910
The next service in this case is 'world'
78

78

00:03:32,910  -->  00:03:36,090
on port 8080, so it will upend the text
79

79

00:03:36,090  -->  00:03:37,407
that it gets from 'world.'
80

80

00:03:38,450  -->  00:03:40,240
So this one output's 'hello,'
81

81

00:03:40,240  -->  00:03:41,830
and then for the rest of the text,
82

82

00:03:41,830  -->  00:03:43,793
it will go to the next application.
83

83

00:03:44,750  -->  00:03:49,100
We have one port defined, http port on port 8080.
84

84

00:03:49,100  -->  00:03:51,220
We also have to use the word 'http,'
85

85

00:03:51,220  -->  00:03:53,577
so that istio recognizes it, because then
86

86

00:03:53,577  -->  00:03:55,963
istio will use the http protocol.
87

87

00:03:57,280  -->  00:03:58,680
We also have defined a service
88

88

00:03:58,680  -->  00:04:02,630
with the name 'hello,' also name of the port
89

89

00:04:02,630  -->  00:04:04,640
'http,' and the port that we need
90

90

00:04:04,640  -->  00:04:05,683
to contact is 8080.
91

91

00:04:07,400  -->  00:04:09,000
Then we have a second deployment.
92

92

00:04:09,000  -->  00:04:10,907
This one is called 'world,'
93

93

00:04:10,907  -->  00:04:13,510
and 'world' is also using the same image
94

94

00:04:13,510  -->  00:04:15,560
and the text that will be returned,
95

95

00:04:15,560  -->  00:04:17,430
in this case, it's going to be 'world.'
96

96

00:04:17,430  -->  00:04:20,000
So we have one app that is going to return 'hello,'
97

97

00:04:20,000  -->  00:04:22,453
one app that is going to return 'world.'
98

98

00:04:22,453  -->  00:04:24,000
And then the next app that it needs to contact
99

99

00:04:24,000  -->  00:04:26,673
is world v2 on port 8080.
100

100

00:04:27,680  -->  00:04:29,200
The rest is all similar.
101

101

00:04:29,200  -->  00:04:31,450
Let's have a look at this third deployment,
102

102

00:04:31,450  -->  00:04:34,630
world v2, text in this case will be
103

103

00:04:34,630  -->  00:04:37,120
three exclamation marks.
104

104

00:04:37,120  -->  00:04:39,900
And there's no next defined, so this service
105

105

00:04:39,900  -->  00:04:41,203
will just return this.
106

106

00:04:42,160  -->  00:04:43,800
So now you should already have an idea
107

107

00:04:43,800  -->  00:04:46,150
of what the app is going to do.
108

108

00:04:46,150  -->  00:04:48,030
If it's gonna contact 'hello,'
109

109

00:04:48,880  -->  00:04:52,530
then it will output 'hello,' it will contact
110

110

00:04:52,530  -->  00:04:54,660
the next app, which is 'world,'
111

111

00:04:54,660  -->  00:04:56,550
if we have a look at 'world,' it will output
112

112

00:04:56,550  -->  00:04:58,570
the text, 'world.'
113

113

00:04:58,570  -->  00:05:01,510
We'll go to the next app, the next
114

114

00:05:01,510  -->  00:05:03,630
micro-service, world v2.
115

115

00:05:03,630  -->  00:05:06,683
Our world v2 will output three exclamation marks.
116

116

00:05:08,630  -->  00:05:10,263
And this one also has a service.
117

117

00:05:11,140  -->  00:05:14,410
So let's deploy this one. How do we deploy this?
118

118

00:05:14,410  -->  00:05:18,720
Not just by kube ctl create or apply, but let's
119

119

00:05:18,720  -->  00:05:22,560
use istio ctl and copy paste from the Read Me,
120

120

00:05:22,560  -->  00:05:25,370
we need to use istio ctl, kube-inject
121

121

00:05:25,370  -->  00:05:28,363
of this helloworld.yaml to inject the proxy.
122

122

00:05:29,830  -->  00:05:32,730
I will execute this first without the kube ctl
123

123

00:05:32,730  -->  00:05:34,870
appliance so you see what happens,
124

124

00:05:34,870  -->  00:05:36,893
and then I will do a kube ctl apply.
125

125

00:05:38,100  -->  00:05:41,080
First, make sure that you path this correctly.
126

126

00:05:41,080  -->  00:05:42,773
So we're going to just set the path, so that
127

127

00:05:42,773  -->  00:05:44,573
I have istio in my path.
128

128

00:05:49,140  -->  00:05:49,973
Let's have a look what the istio
129

129

00:05:49,973  -->  00:05:51,953
ctl kube inject outputs.
130

130

00:05:53,510  -->  00:05:55,620
It will output everything in YAML format.
131

131

00:05:55,620  -->  00:05:57,330
What it's going to do is, it's going to
132

132

00:05:57,330  -->  00:05:59,563
add another container.
133

133

00:06:02,460  -->  00:06:03,990
It's going to add another container
134

134

00:06:03,990  -->  00:06:05,800
starting from here, args.
135

135

00:06:05,800  -->  00:06:08,770
And it's going to launch the envoy proxy
136

136

00:06:08,770  -->  00:06:10,300
as a separate container, within
137

137

00:06:10,300  -->  00:06:11,133
the same port.
138

138

00:06:13,330  -->  00:06:15,010
Let's apply this kube ctl.
139

139

00:06:15,010  -->  00:06:20,010
Apply minus f, and then we're going to execute this
140

140

00:06:20,830  -->  00:06:23,703
so that we inject the envoy proxy.
141

141

00:06:25,120  -->  00:06:27,740
So this will launch the three deployments,
142

142

00:06:27,740  -->  00:06:29,410
each three pods.
143

143

00:06:29,410  -->  00:06:31,900
Let's have a look at the get pods.
144

144

00:06:31,900  -->  00:06:35,500
You see three pods each and two containers
145

145

00:06:35,500  -->  00:06:39,953
in every pod, one for the app, one for envoy.
146

146

00:06:41,790  -->  00:06:44,910
Now if you want to contact our application,
147

147

00:06:44,910  -->  00:06:47,697
if you wanted to recontact hello,
148

148

00:06:47,697  -->  00:06:51,890
then we'd also need to define the gateway,
149

149

00:06:51,890  -->  00:06:54,843
the istio gateway. Let's have a look at this file.
150

150

00:06:56,010  -->  00:07:00,150
We have kind gateway ... this will select
151

151

00:07:00,150  -->  00:07:01,820
the ingress gateway, so this is
152

152

00:07:01,820  -->  00:07:05,000
the default gateway, default controller.
153

153

00:07:05,000  -->  00:07:06,230
This is the default controller
154

154

00:07:06,230  -->  00:07:08,370
that is already available.
155

155

00:07:08,370  -->  00:07:10,940
You're going to save if you want to.
156

156

00:07:10,940  -->  00:07:14,650
Use port 80, on this ingress controller.
157

157

00:07:14,650  -->  00:07:17,190
Everything that matches, we want to capture
158

158

00:07:17,190  -->  00:07:19,960
using our gateway. You can specify
159

159

00:07:19,960  -->  00:07:22,160
a host here, a host name, or you can just
160

160

00:07:22,160  -->  00:07:23,110
capture everything.
161

161

00:07:24,560  -->  00:07:26,240
You're gonna have a virtual service,
162

162

00:07:26,240  -->  00:07:28,230
again, you can specify the host.
163

163

00:07:28,230  -->  00:07:29,520
If you don't specify a host, you can
164

164

00:07:29,520  -->  00:07:32,253
also specify star. This will match everything.
165

165

00:07:33,470  -->  00:07:35,110
So our virtual service is basically
166

166

00:07:35,110  -->  00:07:36,983
our service that we want to define.
167

167

00:07:38,150  -->  00:07:40,180
The gateway that we use is helloworld-gateway.
168

168

00:07:40,180  -->  00:07:42,363
That's gonna be this gateway.
169

169

00:07:43,430  -->  00:07:47,705
We're going to say http, match, uri,
170

170

00:07:47,705  -->  00:07:49,689
prefix / hello. So whenever we
171

171

00:07:49,689  -->  00:07:51,907
go to our ingress controller, then
172

172

00:07:51,907  -->  00:07:55,082
if the prefix matches on slash hello,
173

173

00:07:55,082  -->  00:07:56,740
then we're going to route it somewhere.
174

174

00:07:56,740  -->  00:07:58,420
We're going to route it here.
175

175

00:07:58,420  -->  00:07:59,860
Our destination is going to be
176

176

00:07:59,860  -->  00:08:03,603
the host, hello.default.svc.cluster.local.
177

177

00:08:05,180  -->  00:08:06,700
So this is gonna be the host name
178

178

00:08:06,700  -->  00:08:10,230
of our first app. The hello app.
179

179

00:08:10,230  -->  00:08:12,740
Default stands for 'default name space.'
180

180

00:08:12,740  -->  00:08:15,400
We're going to do that on port 8080.
181

181

00:08:15,400  -->  00:08:17,820
So typically, you always need a virtual service
182

182

00:08:17,820  -->  00:08:19,740
if you want to define your service
183

183

00:08:19,740  -->  00:08:21,290
in the ingress controller.
184

184

00:08:21,290  -->  00:08:23,730
You always also need one gateway,
185

185

00:08:23,730  -->  00:08:26,250
this is our gateway that we're going to use.
186

186

00:08:26,250  -->  00:08:30,400
So we have one gateway and one virtual service.
187

187

00:08:30,400  -->  00:08:33,353
If you want to directly access other services,
188

188

00:08:33,353  -->  00:08:35,230
then we just have to define multiple
189

189

00:08:35,230  -->  00:08:38,270
virtual services. We don't need to define
190

190

00:08:38,270  -->  00:08:41,860
a virtual service for world and world v2
191

191

00:08:41,860  -->  00:08:44,600
because those will be accessed by the hello app,
192

192

00:08:44,600  -->  00:08:46,773
not by the client itself.
193

193

00:08:47,980  -->  00:08:52,733
'Kube ctl apply helloworld gateway' is created.
194

194

00:08:54,760  -->  00:08:57,160
Now let's have a look at the service
195

195

00:08:57,160  -->  00:09:00,493
of the name space. Istio system.
196

196

00:09:04,540  -->  00:09:07,230
So here we have the istio ingress gateway,
197

197

00:09:07,230  -->  00:09:08,303
let's do o wide,
198

198

00:09:10,110  -->  00:09:12,080
so here we have the full URL of the
199

199

00:09:12,080  -->  00:09:16,080
Load Balancer, and then if you do curl
200

200

00:09:16,080  -->  00:09:18,750
of this URL, we don't get anything
201

201

00:09:19,790  -->  00:09:22,240
because we haven't configured anything.
202

202

00:09:22,240  -->  00:09:26,033
Let's have a look again at helloworld gateway.
203

203

00:09:27,090  -->  00:09:29,653
We only configured something for slash hello.
204

204

00:09:30,860  -->  00:09:34,393
So let's use this URL slash hello,
205

205

00:09:35,710  -->  00:09:39,150
and how do we get? We get hello, world,
206

206

00:09:39,150  -->  00:09:41,159
and three exclamation marks.
207

207

00:09:41,159  -->  00:09:42,463
This comes from ...
208

208

00:09:44,720  -->  00:09:45,553
the hello comes from
209

209

00:09:45,553  -->  00:09:47,730
one of these pods, the world comes from
210

210

00:09:47,730  -->  00:09:49,900
one of these pods, and the three
211

211

00:09:49,900  -->  00:09:53,280
exclamation marks come from one of these pods.
212

212

00:09:53,280  -->  00:09:55,310
So these communicated with each other
213

213

00:09:55,310  -->  00:09:59,740
over the envoy proxy to get this string
214

214

00:09:59,740  -->  00:10:02,770
of information and send it back to the client.
215

215

00:10:02,770  -->  00:10:06,330
The client only accessed the ingress controller,
216

216

00:10:06,330  -->  00:10:09,552
the ingress controller contacted the envoy
217

217

00:10:09,552  -->  00:10:13,280
on this application. This application then
218

218

00:10:13,280  -->  00:10:15,880
contacted this one, and then this application
219

219

00:10:15,880  -->  00:10:17,223
contacted that one.
220

220

00:10:18,580  -->  00:10:20,680
So this is an example of a micro-service
221

221

00:10:20,680  -->  00:10:22,470
with the envoy proxy deployed
222

222

00:10:22,470  -->  00:10:24,653
as a sidecar using istio.
223

223

00:10:26,090  -->  00:10:27,710
In the next demos, I will then show you
224

224

00:10:27,710  -->  00:10:30,780
some more features of istio, to show you really
225

225

00:10:30,780  -->  00:10:33,370
what the benefit is of having istio
226

226

00:10:33,370  -->  00:10:36,653
running in your cluster for your micro-services.
