1
1

00:00:00,200  -->  00:00:01,033
<v Edward Viaene>In this lecture,</v>
2

2

00:00:01,033  -->  00:00:02,850
I'll be talking about security
3

3

00:00:02,850  -->  00:00:05,570
and mutual TLS to secure the communications
4

4

00:00:05,570  -->  00:00:07,053
between your microservices.
5

5

00:00:08,700  -->  00:00:11,350
The goals of Istio security are:
6

6

00:00:11,350  -->  00:00:12,970
Security by default.
7

7

00:00:12,970  -->  00:00:14,350
No changes are needed for
8

8

00:00:14,350  -->  00:00:16,573
application code and infrastructure.
9

9

00:00:17,670  -->  00:00:19,259
This is in general, in Istio
10

10

00:00:19,259  -->  00:00:21,120
you get all the features
11

11

00:00:21,120  -->  00:00:23,310
and you shouldn't have to change your obligation.
12

12

00:00:23,310  -->  00:00:25,113
That is running on your cluster.
13

13

00:00:26,230  -->  00:00:27,780
Defense in depth.
14

14

00:00:27,780  -->  00:00:29,980
Integrate with existing security systems
15

15

00:00:29,980  -->  00:00:32,263
to provide multiple layers of defense.
16

16

00:00:33,120  -->  00:00:36,037
One of these layers is the mutual TLS
17

17

00:00:36,037  -->  00:00:38,453
that I will be explaining in this lecture.
18

18

00:00:39,600  -->  00:00:40,720
Zero-trust network.
19

19

00:00:40,720  -->  00:00:44,040
Build security solutions on entrusted networks.
20

20

00:00:44,040  -->  00:00:46,200
You cannot trust that your network is secure.
21

21

00:00:46,200  -->  00:00:48,670
That's why you want to encrypt the correct communication
22

22

00:00:48,670  -->  00:00:52,123
between your services, using mutual TLS.
23

23

00:00:53,460  -->  00:00:55,610
Istio provides two types of authentication.
24

24

00:00:56,860  -->  00:00:58,330
Transport authentication,
25

25

00:00:58,330  -->  00:01:00,020
service to service authentication,
26

26

00:01:00,020  -->  00:01:01,020
using Mutual TLS.
27

27

00:01:01,020  -->  00:01:03,870
We also have origin authentication
28

28

00:01:03,870  -->  00:01:06,430
and that is end to end authentication.
29

29

00:01:06,430  -->  00:01:09,423
Verifying the end-user using a JSON Web Token.
30

30

00:01:10,350  -->  00:01:12,144
I'll be talking more about the first one
31

31

00:01:12,144  -->  00:01:15,492
transport authentication, service to service authentication
32

32

00:01:15,492  -->  00:01:17,993
and were going to use Mutual TLS for that.
33

33

00:01:18,997  -->  00:01:23,500
Mutual TLS in Istio can be turned on without having
34

34

00:01:23,500  -->  00:01:25,760
to change the code of applications.
35

35

00:01:25,760  -->  00:01:27,700
Because of the sidecar deployment.
36

36

00:01:27,700  -->  00:01:30,130
Once you enable Mutual TLS the sidecars
37

37

00:01:30,130  -->  00:01:33,337
will have TLS enabled between them.
38

38

00:01:33,337  -->  00:01:37,430
Your traffic will be encrypted and the Mutual TLS
39

39

00:01:37,430  -->  00:01:39,550
authentication will be enabled.
40

40

00:01:39,550  -->  00:01:40,738
If you don't have a certificate
41

41

00:01:40,738  -->  00:01:43,600
then you cannot reach the service anymore.
42

42

00:01:43,600  -->  00:01:47,083
Its only Istio that can issue the certificates.
43

43

00:01:48,200  -->  00:01:51,200
It provides each service with a strong identity.
44

44

00:01:51,200  -->  00:01:53,636
So, once Istio starts issuing certificates
45

45

00:01:53,636  -->  00:01:56,123
then a service has an identity.
46

46

00:01:56,123  -->  00:01:58,350
And that identity can be verified
47

47

00:01:58,350  -->  00:02:00,410
because a certificate with a particular name
48

48

00:02:00,410  -->  00:02:02,803
will only belong to a particular service.
49

49

00:02:04,380  -->  00:02:06,360
Attacks like impersonation by rerouting
50

50

00:02:06,360  -->  00:02:08,240
DNS records will then fail.
51

51

00:02:08,240  -->  00:02:11,690
Because a fake application can't prove its identity
52

52

00:02:11,690  -->  00:02:13,870
using the certificate mechanism.
53

53

00:02:13,870  -->  00:02:17,490
If you would have a fake application within your cluster
54

54

00:02:17,490  -->  00:02:20,410
it still cannot impersonate a real service,
55

55

00:02:20,410  -->  00:02:22,100
even though, it would manage to change
56

56

00:02:22,100  -->  00:02:25,100
the DNS records and point it to that service.
57

57

00:02:25,100  -->  00:02:26,600
The certificates will never match.
58

58

00:02:26,600  -->  00:02:29,490
This rogue service will not have the certificates
59

59

00:02:29,490  -->  00:02:31,200
that the real service has.
60

60

00:02:31,200  -->  00:02:34,520
That's why it provides you with strong identity.
61

61

00:02:34,520  -->  00:02:35,890
If the identity doesn't match
62

62

00:02:35,890  -->  00:02:37,672
the communication will not work.
63

63

00:02:37,672  -->  00:02:40,130
That's why it provides excellent security
64

64

00:02:40,130  -->  00:02:41,543
using a strong identity.
65

65

00:02:42,560  -->  00:02:44,820
It also secures, encrypts, service-to-service
66

66

00:02:44,820  -->  00:02:46,910
and end-user to service communication.
67

67

00:02:46,910  -->  00:02:48,673
That comes with it.
68

68

00:02:50,010  -->  00:02:52,330
Istio also provides key and certification management
69

69

00:02:52,330  -->  00:02:55,201
to manage generation, distribution, and rotation.
70

70

00:02:55,201  -->  00:02:58,420
You don't need to manage any of those certificates.
71

71

00:02:58,420  -->  00:03:00,043
Istio will manage that for you.
72

72

00:03:01,331  -->  00:03:04,050
For the next example, I will show you how to activate
73

73

00:03:04,050  -->  00:03:06,040
Mutual TLS on a cluster that doesn't
74

74

00:03:06,040  -->  00:03:08,263
have Mutual TLS enabled yet.
75

75

00:03:09,510  -->  00:03:12,100
I'm going to launch all these services that you see here.
76

76

00:03:12,100  -->  00:03:15,450
We'll have namespace one and two and legacy.
77

77

00:03:15,450  -->  00:03:18,200
The legacy namespace will just have applications
78

78

00:03:18,200  -->  00:03:21,080
that are not deployed with a sidecar.
79

79

00:03:21,080  -->  00:03:22,673
They are not Istio enabled.
80

80

00:03:23,800  -->  00:03:25,430
You're going to have the hello world
81

81

00:03:25,430  -->  00:03:27,540
and the three exclamation marks.
82

82

00:03:27,540  -->  00:03:30,283
That are going to be executed across namespaces.
83

83

00:03:31,520  -->  00:03:33,870
Then we have another hello world
84

84

00:03:33,870  -->  00:03:36,890
and three exclamation marks that are being executed
85

85

00:03:36,890  -->  00:03:39,056
but in the reverse order.
86

86

00:03:39,056  -->  00:03:41,800
You'll have a service that starts from namespace one
87

87

00:03:41,800  -->  00:03:44,410
and will have a service that starts from legacy.
88

88

00:03:44,410  -->  00:03:46,730
(Mumbles) depending on where the service starts
89

89

00:03:46,730  -->  00:03:50,720
how it will communicate once we enable Mutual TLS.
90

90

00:03:50,720  -->  00:03:52,610
Not having a sidecar that has
91

91

00:03:52,610  -->  00:03:54,513
a certificate will have implications.
92

92

00:03:55,540  -->  00:03:58,140
This is what I'm going to show you in the next demo.
