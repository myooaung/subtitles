WEBVTT
1
00:00:00.550 --> 00:00:05.820
In this lecture, I will be talking about deployments in Kubernetes.

2
00:00:05.860 --> 00:00:10.480
Let me first talk about the Replication Sets. The replication Set

3
00:00:10.480 --> 00:00:13.350
is the next generation Replication Controller.

4
00:00:13.450 --> 00:00:18.820
So, it's a newer version of the Replication Controller that I just explained to you in the previous lecture.

5
00:00:19.730 --> 00:00:27.040
It's supports a new selector that can do selection based on filtering according to a set of values.

6
00:00:27.590 --> 00:00:34.130
For instance, the selection could be an environment that is either going to be "dev" or "qa",

7
00:00:34.130 --> 00:00:39.670
not only based on equality like the Replication Controller in the Replication Controller, you can only say an

8
00:00:39.710 --> 00:00:45.820
"environment == dev", you couldn't do anything more complex. With the replication set

9
00:00:45.830 --> 00:00:53.300
you can do more complex matching. This Replica Set rather than Replication Controller is used 

10
00:00:53.300 --> 00:00:55.250
by the deployment object.

11
00:00:55.250 --> 00:01:02.180
Let's talk about the Deployments now. A deployment is a declaration in Kubernetes that allows you to do

12
00:01:02.290 --> 00:01:09.320
after deployments and updates. When using the deployment object, you define the state of your application.

13
00:01:10.170 --> 00:01:15.040
Kubernetes will then make sure the cluster matches your desired state.

14
00:01:15.120 --> 00:01:21.480
A state can just be running this application and make sure it is replicated five times. Just the way to

15
00:01:21.480 --> 00:01:27.470
describe this to Kubernetes is most easily done now with the Deployments.

16
00:01:27.650 --> 00:01:33.770
That's why just using the replication controller that you saw earlier or replication set might

17
00:01:33.770 --> 00:01:35.740
be cumbersome to deploy apps.

18
00:01:35.840 --> 00:01:39.790
So those two things might not be fit to deploy your apps.

19
00:01:39.830 --> 00:01:46.820
It would just be too much manual work to then do updates and rollbacks and so on. The deployment object

20
00:01:46.880 --> 00:01:50.840
is much easier to use and gives you more possibilities.

21
00:01:50.870 --> 00:01:54.910
So, what are those possibilities with a deployment object.

22
00:01:54.980 --> 00:02:02.570
You can create a deployment, for instance, just deploying an app, update a deployment, deploy a new version

23
00:02:02.570 --> 00:02:03.550
of your app.

24
00:02:03.950 --> 00:02:08.500
You can also do rolling updates, which means zero downtime deployments.

25
00:02:08.790 --> 00:02:15.350
You're not immediately going to update your whole app, but you are going to do it in steps, so that you will have zero downtime

26
00:02:15.680 --> 00:02:17.000
during this deployment.

27
00:02:17.790 --> 00:02:24.150
You can also easily rollback to a previous version of your app, you can pause and resume 

28
00:02:24.180 --> 00:02:25.040
a deployment as well.

29
00:02:25.050 --> 00:02:31.560
For instance if you want to roll out to only a certain percentage of your running pods.

30
00:02:31.760 --> 00:02:33.450
So, this is an example of deployment.

31
00:02:33.450 --> 00:02:39.840
It looks again very similar to the previous specifications that I showed you.

32
00:02:39.840 --> 00:02:43.320
Currently this is still in "v1beta1"

33
00:02:43.530 --> 00:02:49.180
That's why you see another API version in "v1". For sure in the next release

34
00:02:49.190 --> 00:02:54.510
this will become stable and it will go to "v1". Again, this object as "metadata".

35
00:02:54.660 --> 00:02:58.980
We give it a name, the name here is, "helloworld-deployment".

36
00:02:59.220 --> 00:03:00.640
Then we have the "specs".

37
00:03:00.930 --> 00:03:05.180
I'm going to run 3 replicas of this pod and the template is below.

38
00:03:05.360 --> 00:03:07.300
The template has begun, "metadata". 

39
00:03:07.530 --> 00:03:11.530
There's a label, the label says, app is "helloworld".

40
00:03:11.640 --> 00:03:14.750
The pod specification then we have one container

41
00:03:14.910 --> 00:03:20.140
still our k8s-demo, still the same image, and still the same port.

42
00:03:20.160 --> 00:03:24.380
So, that looks very, very, similar to all the other things we have seen earlier.

43
00:03:24.480 --> 00:03:28.090
But I will now show you what the deployments really can do for you.

44
00:03:28.810 --> 00:03:35.940
To get information on the growing deployments you can use "kubectl get deployments". 

45
00:03:35.940 --> 00:03:42.810
Because deployments are using replica sets, you can use "kubectl get rs". "rs" stands for "Replica Set"  

46
00:03:42.840 --> 00:03:45.430
to get the information about the replicas sets.

47
00:03:45.510 --> 00:03:50.120
You'll get pods with short labels can show you the pods that are running.

48
00:03:50.120 --> 00:03:55.490
"Kubectl get pods" with "--show-labels", can show you the pods that are running, and that will just show you the pods that are running, including the labels.

49
00:03:55.520 --> 00:04:01.850
So, whenever we add a label to our pods like the app label, then we can see those if we add show labels

50
00:04:03.110 --> 00:04:09.830
"Kubectl rollout status" type of deployment, and then the name of the deployment   

51
00:04:09.900 --> 00:04:11.210
gets the deployment status

52
00:04:11.210 --> 00:04:16.750
So, if you want to know whether the deployment was successfully completed then we can use this command

53
00:04:16.940 --> 00:04:24.240
and this command will show that. "Kubectl set image", our deployment "helloworld-deployment"

54
00:04:24.240 --> 00:04:33.660
can change our image from "k8s-demo" to "k8s-demo:2", with a tag "2". We can actually run another version of this "k8s-demo"

55
00:04:33.750 --> 00:04:39.050
There a version 2 in this repository that is going to say, 

56
00:04:39.050 --> 00:04:39.720
"helloworld v2".

57
00:04:39.720 --> 00:04:45.270
And if you want to use that newer version of the "k8s-demo",

58
00:04:45.320 --> 00:04:49.500
then you can just tag your image for the specific version that you want.

59
00:04:49.620 --> 00:04:53.310
If you don't use any version you will use the version that is tagged "latest".

60
00:04:53.310 --> 00:04:57.210
If you specify one then that exact version will be retrieved.

61
00:04:57.210 --> 00:05:03.090
So, using this command can actually update your application to the latest version.

62
00:05:03.330 --> 00:05:06.350
You can achieve the same thing using "kubectl edit", and then edit this deployment object.

63
00:05:06.450 --> 00:05:13.780
"Kubectl rollout state", is going to give you the status of the rollout.

64
00:05:13.840 --> 00:05:17.570
If you update an image to a new version,

65
00:05:17.680 --> 00:05:21.800
Then you can use this rollout status to see how the deployment is progressing.

66
00:05:22.750 --> 00:05:29.250
"Kubectl rollout history" if you want to see a history of your deployed versions.

67
00:05:29.250 --> 00:05:36.300
So, let's say that you first have version 1, then version 2, and 3, "Kubectl rollout history"

68
00:05:36.300 --> 00:05:37.920
will show you those different versions.

69
00:05:37.920 --> 00:05:40.380
And this brings us to something very useful

70
00:05:40.620 --> 00:05:45.990
If you release a new version of your app that's a version 3 and you want to go back to version 2

71
00:05:46.220 --> 00:05:49.130
then you can do a "Kubectl rollout undo" 

72
00:05:49.320 --> 00:05:51.500
and this rolls back to the previous version.

73
00:05:52.820 --> 00:05:58.570
If you want to rollback to another version, you can see all the versions using rollout history

74
00:05:58.570 --> 00:06:00.750
if you want them rollback to version 1, for instance,

75
00:06:00.780 --> 00:06:03.470
you can just specify doing "Kubectl rollout undo --to revision=n" and the revision number.

76
00:06:03.570 --> 00:06:09.470
That gives you the possibility to rollback

77
00:06:09.470 --> 00:06:12.610
to any version. In the next demo

78
00:06:12.680 --> 00:06:14.790
I'm going to show you how this all works.
