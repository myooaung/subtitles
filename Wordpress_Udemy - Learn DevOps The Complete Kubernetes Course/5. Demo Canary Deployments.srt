1
1

00:00:00,090  -->  00:00:02,370
<v Edward>Now that I have showed you an example of how</v>
2

2

00:00:02,370  -->  00:00:05,550
to do traffic routing, let's continue with this,
3

3

00:00:05,550  -->  00:00:08,333
and let's now explore how to canary deployments.
4

4

00:00:09,800  -->  00:00:12,250
I still have the same pods running.
5

5

00:00:12,250  -->  00:00:16,110
The hello and hello v2 example.
6

6

00:00:16,110  -->  00:00:19,500
And rather than using a header to identify how
7

7

00:00:19,500  -->  00:00:22,920
to route traffic, I want to use a canary deployment.
8

8

00:00:22,920  -->  00:00:26,490
That means that's for the host example that come,
9

9

00:00:26,490  -->  00:00:31,160
I want to route most of the traffic to my first version.
10

10

00:00:31,160  -->  00:00:32,850
So I'm going to give it a wait.
11

11

00:00:32,850  -->  00:00:35,750
The first version of the deployment, the v1,
12

12

00:00:35,750  -->  00:00:37,803
will get a 90% wait.
13

13

00:00:39,070  -->  00:00:42,440
And the version two will get a 10% wait.
14

14

00:00:42,440  -->  00:00:45,740
So everyone who visits helloexample.com,
15

15

00:00:45,740  -->  00:00:49,660
most of time they will get the first version.
16

16

00:00:49,660  -->  00:00:52,350
Only 10% will get the second version.
17

17

00:00:52,350  -->  00:00:55,120
This way we can test our new release
18

18

00:00:55,120  -->  00:00:58,090
and see whether it still has issues.
19

19

00:00:58,090  -->  00:01:01,930
If there are issues only 10% of our users are impacted
20

20

00:01:01,930  -->  00:01:03,910
and not the full 100%.
21

21

00:01:03,910  -->  00:01:06,280
We want to run this canary deployment
22

22

00:01:06,280  -->  00:01:08,010
for at least a couple of hours
23

23

00:01:08,010  -->  00:01:10,480
to see whether our deployment is stable.
24

24

00:01:10,480  -->  00:01:12,890
If it is stable, we could then deploy it
25

25

00:01:12,890  -->  00:01:16,430
to our full population, the 100%.
26

26

00:01:16,430  -->  00:01:17,980
Let me show you how to do this.
27

27

00:01:20,950  -->  00:01:25,950
I still have my hello v2, worlds 2, and worlds deployed.
28

28

00:01:28,310  -->  00:01:30,870
So I'm just going to override the virtual service
29

29

00:01:30,870  -->  00:01:32,960
to change the waitings.
30

30

00:01:32,960  -->  00:01:36,243
So I have this defined in my helloworld v2,
31

31

00:01:38,060  -->  00:01:41,460
canary.yaml so in the previous lecture I used routing,
32

32

00:01:41,460  -->  00:01:43,003
now I will us canary.yaml.
33

33

00:01:45,310  -->  00:01:49,250
I have destination rule, this hasn't changed.
34

34

00:01:49,250  -->  00:01:52,120
I have the virtual service, this has changed.
35

35

00:01:52,120  -->  00:01:57,120
And I have two routes, one destination for v1,
36

36

00:01:57,530  -->  00:01:59,363
and one destination for v2.
37

37

00:02:00,210  -->  00:02:01,740
And I give them waits.
38

38

00:02:01,740  -->  00:02:04,623
So the first version has wait 90,
39

39

00:02:05,820  -->  00:02:08,210
the second version has wait ten.
40

40

00:02:08,210  -->  00:02:10,040
So I'm just going to apply this
41

41

00:02:10,040  -->  00:02:14,493
to route 90% to v1 and route 10% to v2.
42

42

00:02:17,009  -->  00:02:19,740
We're gonna do kubectl apply helloworld-v2-canary.yaml
43

43

00:02:23,650  -->  00:02:27,493
and this will reconfigure my virtual service.
44

44

00:02:28,856  -->  00:02:30,913
Just gonna do get virtualservice.
45

45

00:02:32,000  -->  00:02:33,550
This still has helloworld.
46

46

00:02:35,400  -->  00:02:36,583
Let me describe this.
47

47

00:02:39,320  -->  00:02:41,650
So my previous compilation has been overridden.
48

48

00:02:41,650  -->  00:02:43,403
And now I have the waits.
49

49

00:02:45,570  -->  00:02:49,460
Let me now hit this end point at least ten times
50

50

00:02:49,460  -->  00:02:52,900
to see that I get approximately nine times v1
51

51

00:02:52,900  -->  00:02:54,133
and then one time v2.
52

52

00:02:55,360  -->  00:02:58,600
You can just execute curl ten times
53

53

00:02:58,600  -->  00:03:02,450
or you can use a for loop if you are Linux or Mac
54

54

00:03:02,450  -->  00:03:05,913
to run it ten times after each other.
55

55

00:03:08,630  -->  00:03:10,490
I run it ten times.
56

56

00:03:10,490  -->  00:03:14,050
You see nine times we have hello world.
57

57

00:03:14,050  -->  00:03:16,013
And then one time you have v2.
58

58

00:03:18,380  -->  00:03:19,540
If you have ten visitors,
59

59

00:03:19,540  -->  00:03:21,660
there will be one visitor seeing v2.
60

60

00:03:21,660  -->  00:03:24,860
So this is a very handy way to test your new deployments
61

61

00:03:25,710  -->  00:03:29,600
rather than deploying them to your whole population
62

62

00:03:29,600  -->  00:03:31,430
you can first try them out,
63

63

00:03:31,430  -->  00:03:33,700
test them with a substitute population,
64

64

00:03:33,700  -->  00:03:35,723
and then see if everything works fine.
