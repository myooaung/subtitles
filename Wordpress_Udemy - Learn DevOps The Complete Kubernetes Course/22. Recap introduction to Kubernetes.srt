1
1

00:00:00,250  -->  00:00:01,160
<v Edward>This is the end of</v>
2

2

00:00:01,160  -->  00:00:04,050
the section Introduction to Kubernetes.
3

3

00:00:04,050  -->  00:00:07,340
Let me recap this section using a few diagrams
4

4

00:00:07,340  -->  00:00:10,610
to make sure you understood the concepts.
5

5

00:00:10,610  -->  00:00:14,080
I showed you how to deploy a first application
6

6

00:00:14,080  -->  00:00:16,320
to the Kubernetes Cluster.
7

7

00:00:16,320  -->  00:00:19,840
First, I show you how to create a container image
8

8

00:00:19,840  -->  00:00:21,810
using the Docker command line.
9

9

00:00:21,810  -->  00:00:23,830
So, we created, locally, an image,
10

10

00:00:23,830  -->  00:00:27,170
we tagged it, and then we uploaded the container image
11

11

00:00:27,170  -->  00:00:30,830
using the Docker push command to Docker Hub.
12

12

00:00:30,830  -->  00:00:32,920
So, this point, Docker Hub,
13

13

00:00:32,920  -->  00:00:36,033
has a container image called Kubernetes example.
14

14

00:00:37,530  -->  00:00:41,633
Next, I create a first pod, Kubernetes example,
15

15

00:00:42,790  -->  00:00:45,570
and this is the definition of this first pod.
16

16

00:00:45,570  -->  00:00:48,770
What's important here is that you defined a container.
17

17

00:00:48,770  -->  00:00:51,870
We can define one or more containers in a pod
18

18

00:00:52,750  -->  00:00:55,593
that will run on the Kubernetes Cluster.
19

19

00:00:56,750  -->  00:01:00,260
This container image uses the port 3,000.
20

20

00:01:00,260  -->  00:01:03,600
That's why I defined the ports with the name nodejs-port,
21

21

00:01:03,600  -->  00:01:07,223
and the container port to contact the server is Port 3,000.
22

22

00:01:08,430  -->  00:01:12,700
This launched our first pod on the Kubernetes Cluster.
23

23

00:01:12,700  -->  00:01:15,260
We used the command, kubectl create,
24

24

00:01:15,260  -->  00:01:18,050
to send this yml file to the Kubernetes Cluster
25

25

00:01:18,050  -->  00:01:20,450
and Kubernetes Launch Spot.
26

26

00:01:20,450  -->  00:01:21,710
What Kubernetes is going to do now is
27

27

00:01:21,710  -->  00:01:24,270
going to pull the image from Docker Hub,
28

28

00:01:24,270  -->  00:01:26,510
because we defined that image in the yml file,
29

29

00:01:26,510  -->  00:01:28,400
so it pulls this container image,
30

30

00:01:28,400  -->  00:01:30,860
and it starts running the container
31

31

00:01:30,860  -->  00:01:32,523
in its pod in Kubernetes.
32

32

00:01:33,710  -->  00:01:36,220
Next, we want to contact the pod.
33

33

00:01:36,220  -->  00:01:37,900
And because we don't have service yet,
34

34

00:01:37,900  -->  00:01:40,380
we need to use another way to contact it.
35

35

00:01:40,380  -->  00:01:42,920
One way that you can use to contact the pod
36

36

00:01:42,920  -->  00:01:46,690
from your local machine is using port-forward.
37

37

00:01:46,690  -->  00:01:48,952
So, using kubectl port-forward,
38

38

00:01:48,952  -->  00:01:49,930
and then the name of the pod,
39

39

00:01:49,930  -->  00:01:52,270
and then the ports that you want to use.
40

40

00:01:52,270  -->  00:01:53,990
The first port is a local port
41

41

00:01:53,990  -->  00:01:57,440
in your machine that you want to open,
42

42

00:01:57,440  -->  00:02:00,400
and the second port is the port of the pod.
43

43

00:02:00,400  -->  00:02:02,480
In this case, 3,000.
44

44

00:02:02,480  -->  00:02:05,220
Once we enter this command, we can use our browser
45

45

00:02:05,220  -->  00:02:09,270
on our local machine or a curl command to contact our pod.
46

46

00:02:09,270  -->  00:02:11,433
And, we can do that on port 8081.
47

47

00:02:12,670  -->  00:02:14,520
Port-forward is not the regular way
48

48

00:02:14,520  -->  00:02:16,530
that you would contact an app.
49

49

00:02:16,530  -->  00:02:20,150
It's just a way for us to contact an app locally,
50

50

00:02:20,150  -->  00:02:23,063
because we are administrators of our Kubernetes Cluster.
51

51

00:02:24,070  -->  00:02:27,253
The real way to contact a pod is to create a service,
52

52

00:02:28,600  -->  00:02:29,600
so that's what we did next.
53

53

00:02:29,600  -->  00:02:31,668
We created a service.
54

54

00:02:31,668  -->  00:02:33,844
We defined the yml definitions,
55

55

00:02:33,844  -->  00:02:35,960
and used kubectl create to create
56

56

00:02:35,960  -->  00:02:38,163
the service on the Kubernetes Cluster.
57

57

00:02:39,055  -->  00:02:42,210
And this, for example, is the yml definition for a service
58

58

00:02:42,210  -->  00:02:46,643
for the helloworld-service that is of type LoadBalancer.
59

59

00:02:47,580  -->  00:02:51,690
If you are on the Cloud on the ALUs on Google, on Azure,
60

60

00:02:51,690  -->  00:02:53,850
you can use type LoadBalancer to
61

61

00:02:53,850  -->  00:02:56,650
put a LoadBalancer in front of your service.
62

62

00:02:56,650  -->  00:02:57,810
So, this will launch,
63

63

00:02:57,810  -->  00:03:00,570
this will spin-up LoadBalancer on ALUs,
64

64

00:03:00,570  -->  00:03:04,050
and then you can contact this LoadBalancer on port 80,
65

65

00:03:04,050  -->  00:03:05,900
cause port 80 is defined here.
66

66

00:03:05,900  -->  00:03:08,037
You just extend an HDP port on
67

67

00:03:08,037  -->  00:03:12,040
the LoadBalancer host to contact your app.
68

68

00:03:12,040  -->  00:03:15,690
This is the normal way to contact your app, because then,
69

69

00:03:15,690  -->  00:03:17,970
it exposes your app to the internet.
70

70

00:03:17,970  -->  00:03:19,223
Everyone can contact it.
71

71

00:03:20,310  -->  00:03:23,083
LoadBalancer is not the only way to expose a service.
72

72

00:03:24,050  -->  00:03:25,590
There's also another way to expose
73

73

00:03:25,590  -->  00:03:27,830
a service using a node port.
74

74

00:03:27,830  -->  00:03:31,030
If you'll just open a port that you defined
75

75

00:03:31,030  -->  00:03:32,330
or when you don't define a node port,
76

76

00:03:32,330  -->  00:03:36,680
it'll choose a random port, and to open that port on
77

77

00:03:36,680  -->  00:03:40,710
every single node of your cluster, except the master node.
78

78

00:03:40,710  -->  00:03:44,220
So that way, it doesn't create a LoadBalancer,
79

79

00:03:44,220  -->  00:03:47,940
but it opens a port on your Kubernetes Cluster nodes,
80

80

00:03:47,940  -->  00:03:50,193
so that you can contact your app.
81

81

00:03:51,530  -->  00:03:53,490
This can be useful, for example,
82

82

00:03:53,490  -->  00:03:55,140
if you're going to deploy on-prem,
83

83

00:03:55,140  -->  00:03:57,200
where you don't have a LoadBalancer.
84

84

00:03:57,200  -->  00:03:58,700
Then, you can use a node port.
85

85

00:04:00,080  -->  00:04:02,470
There are different ways to contact your app.
86

86

00:04:02,470  -->  00:04:05,750
And you will see in the next lectures, in the next sections,
87

87

00:04:05,750  -->  00:04:07,580
different ways that you can contact your app.
88

88

00:04:07,580  -->  00:04:09,930
These are just two ways that I just showed you.
89

89

00:04:10,910  -->  00:04:13,180
Now you might ask yourself, "Why do we need the service
90

90

00:04:13,180  -->  00:04:15,740
and why don't we just contact the pod directly?
91

91

00:04:15,740  -->  00:04:16,840
Like, I mean I'll just put
92

92

00:04:16,840  -->  00:04:19,260
a LoadBalancer in front of a pod."
93

93

00:04:19,260  -->  00:04:21,660
Well, now we have only one pod,
94

94

00:04:21,660  -->  00:04:23,370
but you might have more than one pod.
95

95

00:04:23,370  -->  00:04:26,620
You might have five pods, so the service that we create
96

96

00:04:26,620  -->  00:04:30,490
make sure that we don't LoadBalance the request over
97

97

00:04:30,490  -->  00:04:33,950
the multiple nodes, in case that we have multiple nodes.
98

98

00:04:33,950  -->  00:04:36,370
In Kubernetes, we'll always have pods,
99

99

00:04:36,370  -->  00:04:38,880
and we'll always put services in front of them.
100

100

00:04:38,880  -->  00:04:41,600
And from outside, we'll always contact the service first,
101

101

00:04:41,600  -->  00:04:44,160
and the service will make sure that your requests
102

102

00:04:44,160  -->  00:04:47,243
are rooted to one of the pods that you are running.
103

103

00:04:48,100  -->  00:04:50,450
Let's say that your pod is malfunctioning.
104

104

00:04:50,450  -->  00:04:52,180
Pod One is malfunctioning.
105

105

00:04:52,180  -->  00:04:55,620
There are ways that you can use to debug the problem.
106

106

00:04:55,620  -->  00:04:58,500
First of all, you can use kubectl attach
107

107

00:04:58,500  -->  00:05:01,440
to attach to the pod to see what is happening.
108

108

00:05:01,440  -->  00:05:03,100
You can maybe see some output that
109

109

00:05:03,100  -->  00:05:05,780
will help you debug your problem.
110

110

00:05:05,780  -->  00:05:08,100
You can execute a command, for example,
111

111

00:05:08,100  -->  00:05:11,720
if you execute the command bash or sh, it will open a shell,
112

112

00:05:11,720  -->  00:05:15,360
and you can type more commands to debug your problem.
113

113

00:05:15,360  -->  00:05:17,600
Or, you can also use kubectl logs
114

114

00:05:17,600  -->  00:05:19,660
to show you the logs of the pod.
115

115

00:05:19,660  -->  00:05:22,723
Maybe there is something in the logs that can help you.
116

116

00:05:24,090  -->  00:05:25,600
So, these commands are very helpful
117

117

00:05:25,600  -->  00:05:27,693
to debug issues with your pod.
118

118

00:05:29,050  -->  00:05:30,210
Then there's another possibility.
119

119

00:05:30,210  -->  00:05:32,960
You can also launch a new pod, for example,
120

120

00:05:32,960  -->  00:05:36,110
you can use kubectl run to launch a pod buxybox,
121

121

00:05:36,110  -->  00:05:38,250
that is using the image busybox,
122

122

00:05:38,250  -->  00:05:40,180
to then pull the image busybox
123

123

00:05:40,180  -->  00:05:42,613
from Docker Hub and launches in a pod.
124

124

00:05:43,700  -->  00:05:46,692
You will then execute the command sh in a pod,
125

125

00:05:46,692  -->  00:05:48,340
and then that will then open a shell,
126

126

00:05:48,340  -->  00:05:50,790
and that allows you to execute
127

127

00:05:50,790  -->  00:05:52,930
more commands to debug a problem.
128

128

00:05:52,930  -->  00:05:53,950
You could, for instance,
129

129

00:05:53,950  -->  00:05:58,870
connect from this busybox pod to the Kubernetes example.
130

130

00:05:58,870  -->  00:06:00,000
So, that's it for the recap.
131

131

00:06:00,000  -->  00:06:02,210
I hope I made it a little bit more clear
132

132

00:06:02,210  -->  00:06:06,140
what we tried to achieve in the first lectures.
133

133

00:06:06,140  -->  00:06:08,630
In the next lectures, I will go into more details
134

134

00:06:08,630  -->  00:06:11,260
on how you deploy applications on the Kubernetes,
135

135

00:06:11,260  -->  00:06:14,483
and how the architecture of Kubernetes really looks like.
