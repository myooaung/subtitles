1
00:00:00,370 --> 00:00:09,490
In this demo, I will show you how deployment works on Kubernetes. In my Kubernetes-course from my git repository

2
00:00:09,630 --> 00:00:12,530
I have "deployment/helloworld.yml"

3
00:00:13,790 --> 00:00:19,110
And this is the file that I showed you during the theory.

4
00:00:19,660 --> 00:00:28,530
Now I'm going to create this deployment on my local Kubernetes cluster.

5
00:00:28,540 --> 00:00:30,380
"deploymente 'helloworld-deployment' created"

6
00:00:31,390 --> 00:00:32,820
Let's try

7
00:00:33,020 --> 00:00:39,680
"kubectl get deployments" ... "deployments"

8
00:00:39,760 --> 00:00:47,200
I asked for 3 replicas so my desired state was 3 replicas, and the current state is 3 replicas,

9
00:00:48,250 --> 00:00:53,870
which means that it's already launched these 3 replicas. All the replicas are up to date.

10
00:00:53,880 --> 00:01:00,960
They are running version-- "k8s-demo" latest version that I asked to run and they are also available.

11
00:01:00,960 --> 00:01:06,230
So, they are running for a minimum amount of seconds, which means I should be able to connect to them.

12
00:01:06,360 --> 00:01:10,920
I can also get the replica sets.

13
00:01:10,990 --> 00:01:15,240
This is the replica set that has been created for these deployments.

14
00:01:15,340 --> 00:01:18,130
So, you don't need to create those replicas yourself.

15
00:01:18,130 --> 00:01:19,800
Kubernetes does it for you.

16
00:01:20,980 --> 00:01:25,600
I also do get pods, to see the pods.

17
00:01:25,690 --> 00:01:33,520
These are 3 pods and I can also say "--show-labels", and then you see the label, so I said that my label

18
00:01:33,550 --> 00:01:35,770
should "app: helloworld".

19
00:01:35,770 --> 00:01:43,930
So, you will see here, "app=helloworld" is the label for this pod, but it also has a "pod-template-hash",

20
00:01:44,020 --> 00:01:45,140
which is ultimately generated.

21
00:01:45,640 --> 00:01:51,600
I also asked the "roll out status" of this deployment, "helloworld-deployment".

22
00:01:51,910 --> 00:01:54,600
And this successfully rolled out.

23
00:01:54,750 --> 00:02:00,180
We didn't really need to enter this command, we could have seen this information using the 

24
00:02:00,180 --> 00:02:04,960
"get deployments", but these is just another way to see if our app is deployed.

25
00:02:06,180 --> 00:02:16,370
If I log into "http://hub.docker.com", then I also pushed earlier a newer version with tag number 2.

26
00:02:16,650 --> 00:02:19,830
So, not with the tag "latest", which is automatically added

27
00:02:19,860 --> 00:02:21,010
if you don't specify your tag,

28
00:02:21,060 --> 00:02:26,990
but with tag number 2. This is a different version and it is going to say, "helloworld v2".

29
00:02:27,010 --> 00:02:34,030
when I would launch this app. What I am going to show you is how to change the version of this first version

30
00:02:34,090 --> 00:02:38,610
to version 2 and I'm back to the old version.

31
00:02:38,630 --> 00:02:43,270
Let's first check what the app would give back if you would connect to it right now.

32
00:02:44,010 --> 00:02:53,550
To do this we have to run, "kubectl expose" again, "kubectl expose deployment", and deployment is going to be the

33
00:02:53,790 --> 00:03:01,050
"helloworld-deployment", and that type is going to be a "NodePort" like you want a static port

34
00:03:01,290 --> 00:03:09,480
automatically assigned that we can connect to. This exposed command created a service for us.

35
00:03:09,480 --> 00:03:15,590
So, let's do "kubectl get service" and now we can see that that has been a service created.

36
00:03:15,700 --> 00:03:23,200
So, let's describe this service, "helloworld-deployment".

37
00:03:23,390 --> 00:03:31,190
So, we see that "Port 31969" has been opened as a node port for this service, 

38
00:03:31,190 --> 00:03:34,630
so we can go next to our app.

39
00:03:34,640 --> 00:03:35,270
"minikube service helloworld-deployment --url", 

40
00:03:35,300 --> 00:03:41,940
is going to give us the URL of our minikube cluster.

41
00:03:42,230 --> 00:03:49,250
It's going to be the IP that we can use and the port that has been exposed here. The internal IP addresses

42
00:03:49,370 --> 00:03:53,850
of Kubernetes are different than the external IP address that we can connect to.

43
00:03:54,650 --> 00:03:57,340
So, we going to go to this URL

44
00:03:57,410 --> 00:03:59,660
I am going to use curl.

45
00:03:59,660 --> 00:04:00,630
It keeps our "Hello World!".

46
00:04:03,490 --> 00:04:05,250
So, let's now change this version.

47
00:04:05,310 --> 00:04:08,550
So, what I'm going to do now, I'm going to set a new image.

48
00:04:08,550 --> 00:04:18,830
"kubectl set image" of deployment, "/helloworld-deployment", and my image. 

49
00:04:18,830 --> 00:04:26,710
I am going to change my Kubernetes demo image into my new "k8s-demo" version 2.

50
00:04:26,720 --> 00:04:31,070
So, we're going to change the "k8s-demos" that was tagged with letters, 

51
00:04:31,070 --> 00:04:31,420
because we didn't a tag,

52
00:04:31,430 --> 00:04:40,630
so it's going to be letters with the tag number 2. And this now says, "image updated". We can now follow

53
00:04:40,690 --> 00:04:44,020
this rollout status using this command.

54
00:04:44,530 --> 00:04:47,190
And it is already successfully rolled out.

55
00:04:47,320 --> 00:04:52,550
So, if you've done curl again to this URL, you will see "Hello World v2!"

56
00:04:53,380 --> 00:05:01,450
So, our image is now updated and it actually update all our running pods

57
00:05:01,450 --> 00:05:03,010
because we have multiple pods running.

58
00:05:03,040 --> 00:05:05,900
So, we see three of them have been terminated.

59
00:05:06,220 --> 00:05:13,480
Three of them have been started again with this "v2" version.

60
00:05:13,510 --> 00:05:22,590
Let's say you want to see the history, "kubectl rollout history", I see revision 1 and revision 2,

61
00:05:22,590 --> 00:05:32,300
you don't see any "Change-Cause". Because, when we did the "kubectl create -f" over this, 

62
00:05:32,320 --> 00:05:38,840
we could have added, "--record", which would also show changes right here.

63
00:05:38,910 --> 00:05:41,290
I haven't used this, this is the reason why it showed "none" there's a reason why it shows "none".

64
00:05:42,560 --> 00:05:45,080
So, we're not really happy with this version 2.

65
00:05:45,160 --> 00:05:47,890
I rather want to see, "Hello World" without "v2".

66
00:05:48,080 --> 00:05:50,650
So, let's undo this deployment.

67
00:05:50,840 --> 00:05:54,050
We're going to do, "kubectl rollout undo"

68
00:05:54,170 --> 00:05:58,020
And then the name of our deployment.

69
00:05:58,820 --> 00:06:06,860
So, now it's rolling back successfully rolled out again, it was very quick 

70
00:06:06,860 --> 00:06:10,450
because those images are still on file.

71
00:06:10,550 --> 00:06:11,990
Again, three new containers.

72
00:06:12,230 --> 00:06:16,650
And then, if I "curl", it's back to "Hello World".

73
00:06:16,650 --> 00:06:21,720
So, this way you can easily change your versions from one application to another application version

74
00:06:21,800 --> 00:06:26,190
and very quickly do rollbacks if necessary.

75
00:06:26,440 --> 00:06:35,000
Let's say that I want to go back to another revision and the revision is from a long time ago.

76
00:06:35,590 --> 00:06:40,700
That's also possible but by default it only keeps two revisions.

77
00:06:40,750 --> 00:06:46,790
So, we would have to edit, "kubectl edit" can do that, our deployment object, 

78
00:06:46,780 --> 00:06:48,610
and we would have to change its limit parameter.

79
00:06:48,660 --> 00:06:55,060
So, these are objects, we can just make some changes here, and the change that we are going to make is

80
00:06:55,080 --> 00:07:01,220
I'm going to set a revision history limit of 100.

81
00:07:01,710 --> 00:07:03,390
I edit this.

82
00:07:03,720 --> 00:07:06,710
And now let's do another rollout.

83
00:07:06,930 --> 00:07:10,610
Let's go back to number 2.

84
00:07:12,280 --> 00:07:14,650
Let's check our history again.

85
00:07:19,400 --> 00:07:21,550
And now that we've made a few changes.

86
00:07:21,840 --> 00:07:26,000
You can see that our history is getting longer.

87
00:07:26,040 --> 00:07:27,830
So, here I have my three revisions.

88
00:07:27,930 --> 00:07:34,800
And then if I want to go to another revision I can say, "--to-revision=3" for instance, and that

89
00:07:35,090 --> 00:07:45,870
it is actually rolling back to revision 3, which becomes a new revision because now I'm at six. 

90
00:07:45,870 --> 00:07:51,180
Using the "undo --to-revision" can just let you jump to any revision that you want.

91
00:07:51,180 --> 00:07:55,050
And I have no idea anymore on what version we are.

92
00:07:56,000 --> 00:07:59,640
But we are back on the original version.

93
00:08:00,620 --> 00:08:06,050
Deployment objects are the objects that you want to create when you are deploying your applications.

94
00:08:06,320 --> 00:08:11,740
You can also use a replica set or replication controller, but those are just too abstract.

95
00:08:11,840 --> 00:08:17,090
Deployment is going to be the way that you want to put your app on Kubernetes. 

96
00:08:17,090 --> 00:08:21,830
And then, you can manage the lifecycle of your app much better using "rollbacks", and
the "rollouts", and so on.

97
00:08:22,810 --> 00:08:27,820
In the next couple of lectures we will see some more details about the labels and about health checks

98
00:08:27,880 --> 00:08:32,170
and also how health checks can improve the resiliency of your app.
