WEBVTT
1
00:00:00.350 --> 00:00:06.470
In this demo, I am going to show you how to use the Node Selector using labels.

2
00:00:06.560 --> 00:00:12.170
I'm going to show you how this works using minikube, because not everyone has an AWS cluster

3
00:00:12.470 --> 00:00:20.990
but it really makes sense only if you have multiple nodes. Our minikube only has one node, 

4
00:00:20.990 --> 00:00:22.600
but I can still show you how it works.

5
00:00:23.620 --> 00:00:32.180
I have in my deployments folder, I have a "helloworld" with a node selector.

6
00:00:32.320 --> 00:00:34.000
So let's see what's in here.

7
00:00:35.200 --> 00:00:41.850
It's a normal pod specification here, but we have the "nodeSelector", so we can only run on hardware high-spec.

8
00:00:41.860 --> 00:00:47.000
I am going to first show you the labels that are nodes.

9
00:00:47.980 --> 00:00:50.140
So here you can see the labels. 

10
00:00:50.330 --> 00:00:54.360
So, we don't really have the label "hardware: high-spec".

11
00:00:54.830 --> 00:00:56.090
What is that going to happen,

12
00:00:56.090 --> 00:00:58.860
when we try to start this one.

13
00:00:58.940 --> 00:01:01.190
I'll show it to you.

14
00:01:01.190 --> 00:01:05.850
"Kubectl create" over this "helloworld- deployment".

15
00:01:05.910 --> 00:01:08.030
Let's have a look.

16
00:01:09.900 --> 00:01:10.740
We have three "Desired", 

17
00:01:10.810 --> 00:01:13.120
three "Running", three "Up-to-Date", 

18
00:01:13.150 --> 00:01:15.380
but zero "Available".

19
00:01:15.480 --> 00:01:17.750
Let's have a look at their pods.

20
00:01:18.410 --> 00:01:25.660
It's all "Pending", so let's have a look at one of the pods, "kubectl describe pod".

21
00:01:26.330 --> 00:01:30.240
And it says, "failed to fit in any node".

22
00:01:30.290 --> 00:01:36.710
This pod is trying to run on one of the nodes and needs to match the nodeSelector and the matching

23
00:01:37.220 --> 00:01:45.210
was of course using this "hardware: high-spec", but there is no "hardware: high-spec" key-value available

24
00:01:45.990 --> 00:01:47.810
on any of our nodes.

25
00:01:47.940 --> 00:01:56.040
So, first we need to add the label and I can do that using "kubectl label nodes", the name of this node was "minikube"

26
00:01:56.040 --> 00:02:06.540
and I want "hardware" equals "high-spec" as a label. 

27
00:02:07.370 --> 00:02:10.610
So, "node 'minikube' labeled"

28
00:02:10.970 --> 00:02:12.080
"Kubectl get nodes" again with "--show-labels"

29
00:02:12.080 --> 00:02:14.300
And what does it say now? "hardware" equals "high-spec"

30
00:02:14.450 --> 00:02:20.810
So now, we just have to wait a little bit, because the node needs to figure out that this node now has a label

31
00:02:21.290 --> 00:02:24.500
and you can see in our case it didn't need a lot of time.

32
00:02:24.530 --> 00:02:25.850
It is now running.

33
00:02:25.860 --> 00:02:38.350
So, "kubectl describe pod", and then let's take this pod, 

34
00:02:38.350 --> 00:02:38.860
and we see in the beginning we have a warning, 

35
00:02:38.860 --> 00:02:39.940
it couldn't schedule the pod, it is not running. 

36
00:02:40.210 --> 00:02:46.680
But once we changed the label, it could actually run on this node.

37
00:02:47.110 --> 00:02:53.740
If you have multiple nodes, you can specify the label on certain nodes, and your possible only then be

38
00:02:53.740 --> 00:02:59.290
scheduled on these nodes, very useful if you have different types of hardware,

39
00:02:59.500 --> 00:03:05.350
if you want to make sure that a certain workload only runs on a certain type of cluster 

40
00:03:05.350 --> 00:03:06.250
then you can use this.

41
00:03:06.280 --> 00:03:07.410
So, that's it for this demo.

42
00:03:07.480 --> 00:03:11.860
You can try it out yourself using minikube or even on the AWS cluster.
