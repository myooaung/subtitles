1
00:00:00,380 --> 00:00:08,010
In this lecture, I'll be talking about "Secrets". Secrets provides a way in Kubernetes to distribute credentials,

2
00:00:08,220 --> 00:00:16,860
Key, passwords, or secret data to the pods, even Kubernetes itself uses this Secrets mechanism to provide

3
00:00:16,950 --> 00:00:20,650
the credentials to access the internal API.

4
00:00:20,670 --> 00:00:27,270
That means that pods have access to secrets and those secrets must be distributed using this Secrets mechanism.

5
00:00:28,170 --> 00:00:31,940
In the demo I am going to show exactly how it looks like.

6
00:00:32,000 --> 00:00:38,120
You can also use the same mechanism to provide secrets to your application. 

7
00:00:38,120 --> 00:00:39,140
If you have an application that needs credentials,

8
00:00:39,140 --> 00:00:42,090
you can use this same mechanism.

9
00:00:42,120 --> 00:00:47,090
Secrets could be, for instance, a database looking at passwords or anything that needs to be kept secret.

10
00:00:48,010 --> 00:00:52,400
Secrets is one way to provide secrets native to Kubernetes.

11
00:00:53,410 --> 00:01:00,030
There are still other ways your container can get its secrets 

12
00:01:00,050 --> 00:01:00,970
if you don't want to use the secrets in Kubernetes.

13
00:01:01,210 --> 00:01:06,000
For instance, you could be using an external vault service in your app.

14
00:01:06,030 --> 00:01:10,330
There are external vault services that you can use, that your app might be contacting.

15
00:01:10,330 --> 00:01:13,480
So, you can write that completely in the app layer.

16
00:01:13,540 --> 00:01:16,240
You don't really need kubernetes for that.

17
00:01:16,630 --> 00:01:22,090
I'll be explaining this native Kubernetes secrets in the next coming slides.

18
00:01:22,340 --> 00:01:27,770
Secrets can be used in the following ways you can use secrets as environment variables.

19
00:01:27,810 --> 00:01:32,210
So, in your application you will just have to read the environment variables 

20
00:01:32,270 --> 00:01:34,610
and that's where the app will then find the secrets.

21
00:01:34,670 --> 00:01:38,220
You can also use secrets as a file in a pod.

22
00:01:38,270 --> 00:01:43,400
This set up use volumes to be mounted in a container. In this volume

23
00:01:43,430 --> 00:01:44,450
you have files.

24
00:01:44,690 --> 00:01:47,780
So, in your container you're going to have a volume.

25
00:01:47,780 --> 00:01:54,770
It means, it's just a directory that you can access, that contains and all secrets. It can be used, for

26
00:01:54,770 --> 00:02:01,940
instance, for "dotenv" files, if you are familiar with those or your app can just read this file.

27
00:02:03,350 --> 00:02:08,840
So, on your app you can just write some code that says you need to go and look in the specific directory

28
00:02:09,410 --> 00:02:13,400
for the secrets that you need, for instance, to connect to a database.

29
00:02:14,280 --> 00:02:19,920
You can also use an external image to pull the secrets. Obviously, from a private image registry,

30
00:02:19,950 --> 00:02:24,170
you cannot put your secret in a public image registry.

31
00:02:24,210 --> 00:02:30,180
In that case, it would mean that you will have a second docker image and that that image would be pulled and

32
00:02:30,180 --> 00:02:35,370
your app would then read the data that contains the secrets from that image.

33
00:02:36,580 --> 00:02:38,970
First, you need to generate the secrets.

34
00:02:39,050 --> 00:02:47,430
So, we have a login and a password, and it put that in Kubernetes. To generate secrets using files,

35
00:02:47,520 --> 00:02:48,740
you can use these commands.

36
00:02:49,080 --> 00:02:50,780
So, first we're going to create those files,

37
00:02:50,820 --> 00:02:56,640
if you don't have them already, you are just going to create a file "username.txt", put "root" in that file,

38
00:02:56,640 --> 00:03:02,430
and I am going to create a file "password.txt", and we are going to put the string password in that file.

39
00:03:03,660 --> 00:03:07,890
Then you can say, "Kubectl", or "kubecontrol create secret generic", it's in generic secrets,

40
00:03:07,980 --> 00:03:14,190
give the name, and then you say "--from-file", use "username.txt", and for "--from-file=./password.txt",

41
00:03:14,520 --> 00:03:20,550
and then you have the secret database user pass that has been created

42
00:03:20,550 --> 00:03:26,430
that later you can use. A secret can also be an SSH key or an SSL certificate.

43
00:03:27,930 --> 00:03:34,560
Here you say, "kubectl create secret generic", username again as the SSL certificate and the "--from-file"

44
00:03:34,650 --> 00:03:38,560
is a key rather than the user name or password.

45
00:03:38,660 --> 00:03:41,000
So, that's a way to distribute keys for instance.

46
00:03:41,070 --> 00:03:49,140
If you want to generate secrets using the YAML definitions, previously we all learned to use the YAML files,

47
00:03:49,140 --> 00:03:54,050
you're going to create a file secrets secrets-db-secret.yml

48
00:03:54,180 --> 00:03:58,320
And this definition is going to be of "kind: secret".

49
00:03:58,490 --> 00:04:06,270
You'll give a name, a type, and then you will supply the data. Here you're going to supply base64 strings. 

50
00:04:06,270 --> 00:04:09,820
On the right you see how you can generate those base64 strings.

51
00:04:10,020 --> 00:04:16,400
So, you need a Linux or Mac machine, or you can search online for base64 generation tool.

52
00:04:16,680 --> 00:04:22,110
You say I have the string root or you have a string password 

53
00:04:22,110 --> 00:04:22,590
and you generate a base64 string for that,

54
00:04:22,800 --> 00:04:25,910
then you use that in your YAML file.

55
00:04:26,750 --> 00:04:31,990
After creating the YAML file you can just use, "kubectl" to create the database secret.

56
00:04:34,320 --> 00:04:39,980
Once the secrets are created, then you can use them. At that point you have the three options.

57
00:04:39,990 --> 00:04:45,790
I will show you the two most common ones, which is the finance and environment variables.

58
00:04:45,930 --> 00:04:52,100
If you going to use environment variables you can create a pod that exposes the secrets 

59
00:04:52,120 --> 00:04:53,350
as environment variables.

60
00:04:53,370 --> 00:04:58,350
Here we have the pod definition that we always have been using and what are you going to do is you going

61
00:04:58,350 --> 00:04:58,880
to add "env".

62
00:04:58,980 --> 00:05:05,250
You going to give your environment variable a name and then you're going to say that you want

63
00:05:05,400 --> 00:05:08,790
to have the value from another source.

64
00:05:09,090 --> 00:05:15,360
The source is going to be the secrets and you're going to say that 

65
00:05:15,450 --> 00:05:16,840
the name in the secret is database-secret,

66
00:05:17,220 --> 00:05:22,850
and the key that you want is username. Database-secret is the name of the object,

67
00:05:22,860 --> 00:05:25,950
in Kubernetes the key is username,

68
00:05:25,960 --> 00:05:30,770
the value will be the secret value that you store stored in Kubernetes.

69
00:05:30,790 --> 00:05:35,080
You can do the same with other environment variables that you want to have in your pod.

70
00:05:36,920 --> 00:05:40,680
Alternatively, you can provide the secrets in a file.

71
00:05:40,730 --> 00:05:48,260
Here, we have a "volumeMount" within our container that you want a volume. VolumeMount, we give it a name,

72
00:05:48,330 --> 00:05:49,330
we give the path,

73
00:05:49,370 --> 00:05:52,900
so this is the path that your app will have to use.

74
00:05:52,910 --> 00:06:00,440
It's easy "/etc/creds", "readOnly: true", app that is running in this container can not change this,

75
00:06:00,440 --> 00:06:05,900
it can only read this, and I'm going to have a volume definition and in this volume definition you're also going

76
00:06:05,900 --> 00:06:07,850
to define a name, "credvolume".

77
00:06:07,870 --> 00:06:13,130
So, this name practically must be equal to the "volumeMount", because in the "volumeMount" you're referring

78
00:06:13,130 --> 00:06:18,810
to a volume here that you are creating. This volume exists off secrets.

79
00:06:18,840 --> 00:06:25,820
So, we don't see secret with a secret name database-secrets. So all the keys and values of data secrets will

80
00:06:25,820 --> 00:06:34,430
now be inserted, will not be put in this "/etc/creds" folder and the secrets will be stored in "db-secrets",

81
00:06:34,550 --> 00:06:41,780
the name of the secret and the keys.  Get the key username and password, so you will

82
00:06:41,780 --> 00:06:46,220
have two files, username and password, that the application can then read.

83
00:06:46,250 --> 00:06:51,680
The only thing that the application needs to do is read those files and it can then use the secrets within the

84
00:06:51,680 --> 00:06:56,130
application. Using volumes and using environment variables, 

85
00:06:56,160 --> 00:06:57,190
using these two ways,

86
00:06:57,240 --> 00:06:59,150
I will show you in the next demo.
