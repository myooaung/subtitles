1
1

00:00:00,230  -->  00:00:01,400
<v Instructor>In this demo,</v>
2

2

00:00:01,400  -->  00:00:03,663
I will show you how to use Skaffold.
3

3

00:00:05,830  -->  00:00:10,830
First, you will need to install Skaffold, which is binary.
4

4

00:00:10,950  -->  00:00:14,333
So for Linux, you can execute these commands.
5

5

00:00:15,370  -->  00:00:16,680
For macOS, you can use
6

6

00:00:16,680  -->  00:00:19,760
brew install skaffold in a terminal.
7

7

00:00:19,760  -->  00:00:20,880
And if you are on Windows,
8

8

00:00:20,880  -->  00:00:23,950
you can use choco install skaffold,
9

9

00:00:23,950  -->  00:00:26,300
which means you need Chocolatey,
10

10

00:00:26,300  -->  00:00:29,873
which is a package manager for Windows.
11

11

00:00:32,150  -->  00:00:35,920
If you don't have this package manager yet, chocolatey.org,
12

12

00:00:35,920  -->  00:00:39,690
you can go to this website and here click install now.
13

13

00:00:39,690  -->  00:00:42,820
Once you have installed this package manager,
14

14

00:00:42,820  -->  00:00:45,930
then you can run this command from a powershell
15

15

00:00:45,930  -->  00:00:48,383
or a CMD to install Skaffold.
16

16

00:00:49,290  -->  00:00:50,540
Alternatively, if you don't want
17

17

00:00:50,540  -->  00:00:52,310
to use this package manager,
18

18

00:00:52,310  -->  00:00:54,300
you can download the latest release from here.
19

19

00:00:54,300  -->  00:00:55,133
But as they say here,
20

20

00:00:55,133  -->  00:00:58,130
it needs to be in your path to be able to use it.
21

21

00:00:58,130  -->  00:01:01,160
So either you need to change environment variable path
22

22

00:01:01,160  -->  00:01:02,816
or you put it in the directory
23

23

00:01:02,816  -->  00:01:03,649
and can only use it in that directory.
24

24

00:01:05,480  -->  00:01:08,710
The easiest way is to actually use a package manager.
25

25

00:01:08,710  -->  00:01:09,810
So once it is installed,
26

26

00:01:09,810  -->  00:01:10,963
you can start using it.
27

27

00:01:12,670  -->  00:01:14,990
In my kubernetes-course directory,
28

28

00:01:14,990  -->  00:01:17,630
I have a directory skaffold-demo,
29

29

00:01:17,630  -->  00:01:20,873
and here I will show you how to use Skaffold.
30

30

00:01:22,600  -->  00:01:25,280
I have a main.go file here,
31

31

00:01:25,280  -->  00:01:26,803
so it's a Golang project.
32

32

00:01:28,670  -->  00:01:30,500
And in this main.go,
33

33

00:01:30,500  -->  00:01:33,344
I am just going to start a web server,
34

34

00:01:33,344  -->  00:01:35,470
ListenAndServe on port 8080,
35

35

00:01:35,470  -->  00:01:38,900
and when somebody goes to this website
36

36

00:01:38,900  -->  00:01:41,120
I will say "Hello world".
37

37

00:01:41,120  -->  00:01:42,250
When the server starts,
38

38

00:01:42,250  -->  00:01:44,897
I will also print out to the terminal, to the logs,
39

39

00:01:44,897  -->  00:01:46,737
"Listening on port 8080".
40

40

00:01:48,360  -->  00:01:50,250
You don't need to have Golang installed,
41

41

00:01:50,250  -->  00:01:52,200
because we will use Docker to build it.
42

42

00:01:53,040  -->  00:01:56,610
What we need is, to have it deployed,
43

43

00:01:56,610  -->  00:01:58,930
we need a skaffold.yaml
44

44

00:01:58,930  -->  00:02:00,910
So let's have a look at this skaffold.yaml
45

45

00:02:02,450  -->  00:02:04,920
API version skaffold/V1,
46

46

00:02:04,920  -->  00:02:06,760
this is a configuration,
47

47

00:02:06,760  -->  00:02:09,415
and we're going to use an image artifact,
48

48

00:02:09,415  -->  00:02:11,070
and we're going to say
49

49

00:02:11,070  -->  00:02:13,650
this is going to be the image URI,
50

50

00:02:13,650  -->  00:02:15,830
and this is a Docker Hub URL.
51

51

00:02:15,830  -->  00:02:19,860
So I have my login/staffold-demo
52

52

00:02:19,860  -->  00:02:21,720
that I'm going to use.
53

53

00:02:21,720  -->  00:02:23,810
You don't even need to create a repository,
54

54

00:02:23,810  -->  00:02:25,420
it all happens for you.
55

55

00:02:25,420  -->  00:02:26,640
So this is the build phase,
56

56

00:02:26,640  -->  00:02:28,020
and then we have the deploy phase.
57

57

00:02:28,020  -->  00:02:31,550
Skaffold is going to deploy using kubectl,
58

58

00:02:31,550  -->  00:02:33,600
and then we have a manifest file for that,
59

59

00:02:33,600  -->  00:02:36,143
the manifest files start with k8s.
60

60

00:02:38,026  -->  00:02:41,230
k8s, and then you have one file:
61

61

00:02:41,230  -->  00:02:44,100
kubernetes pod.yaml right here.
62

62

00:02:44,100  -->  00:02:45,453
So if you have a look here,
63

63

00:02:48,330  -->  00:02:49,280
then we have a pod,
64

64

00:02:50,740  -->  00:02:53,660
skaffold-demo with the same image,
65

65

00:02:53,660  -->  00:02:56,320
and then we're also going to use a service
66

66

00:02:56,320  -->  00:02:58,440
of type LoadBalancer.
67

67

00:02:58,440  -->  00:03:00,980
You don't really need to use the type LoadBalancer,
68

68

00:03:00,980  -->  00:03:03,450
it's actually easier to use LoadBalancer
69

69

00:03:03,450  -->  00:03:05,740
if you didn't want it also to have public,
70

70

00:03:05,740  -->  00:03:07,810
but you can also use port-forwarding.
71

71

00:03:07,810  -->  00:03:10,230
Skaffold also supports port-forwarding
72

72

00:03:10,230  -->  00:03:12,120
if you don't wanna have LoadBalancer,
73

73

00:03:12,120  -->  00:03:15,300
and then you can just go to a local IP and port.
74

74

00:03:15,300  -->  00:03:16,160
If you have a look here,
75

75

00:03:16,160  -->  00:03:18,813
we'd also then have a Dockerfile,
76

76

00:03:18,813  -->  00:03:20,220
you also then have a go.mod,
77

77

00:03:20,220  -->  00:03:22,010
which is just a definition of the modules
78

78

00:03:22,010  -->  00:03:24,600
we are going to use in Golang.
79

79

00:03:24,600  -->  00:03:26,420
So this is important.
80

80

00:03:26,420  -->  00:03:28,810
We have here the Dockerfile then.
81

81

00:03:30,275  -->  00:03:33,157
In the docker file we are going to build this main.go;
82

82

00:03:34,220  -->  00:03:37,400
go build main.go in /app,
83

83

00:03:37,400  -->  00:03:39,640
and then we are going to have a runtime container
84

84

00:03:39,640  -->  00:03:42,320
using alpine, very small.
85

85

00:03:42,320  -->  00:03:43,850
You're going to execute app,
86

86

00:03:43,850  -->  00:03:48,220
and we're gonna copy our binary from this build container.
87

87

00:03:48,220  -->  00:03:52,820
So, we say copy from builder, from /app
88

88

00:03:52,820  -->  00:03:54,920
to our current directory,
89

89

00:03:54,920  -->  00:03:58,660
and then we will be able to run this application
90

90

00:03:59,640  -->  00:04:01,763
when we run this container.
91

91

00:04:02,710  -->  00:04:06,170
So the typical developer will not use Vim,
92

92

00:04:06,170  -->  00:04:09,420
the typical developer will use something like VS Code.
93

93

00:04:09,420  -->  00:04:12,190
You can use Vim, you can use VS Code,
94

94

00:04:12,190  -->  00:04:13,630
you can use another IDE.
95

95

00:04:13,630  -->  00:04:15,973
I'm going to show you this demo with VS Code.
96

96

00:04:17,730  -->  00:04:19,760
So this is my Visual Studio Code
97

97

00:04:19,760  -->  00:04:23,580
and I already have my skaffold-demo open.
98

98

00:04:23,580  -->  00:04:25,570
So here I have my main.go
99

99

00:04:26,760  -->  00:04:30,340
and I'm gonna open a terminal, new terminal.
100

100

00:04:30,340  -->  00:04:32,440
And then here I'm just gonna check
101

101

00:04:32,440  -->  00:04:34,770
whether my kubernetes cluster is up and running:
102

102

00:04:34,770  -->  00:04:36,143
kubectl get nodes.
103

103

00:04:37,170  -->  00:04:39,120
Just gonna make it a little bit bigger.
104

104

00:04:40,940  -->  00:04:42,670
kubectl get nodes,
105

105

00:04:42,670  -->  00:04:44,120
our nodes are up and running.
106

106

00:04:45,290  -->  00:04:48,240
And then we can type skaffold dev,
107

107

00:04:48,240  -->  00:04:49,633
cause we are developing.
108

108

00:04:51,070  -->  00:04:53,800
And then it's going to start building this container,
109

109

00:04:53,800  -->  00:04:55,540
pushing this container.
110

110

00:04:55,540  -->  00:04:58,470
And then I'm gonna open a second shell
111

111

00:04:58,470  -->  00:05:01,023
because I wanna see when the deployment happens.
112

112

00:05:02,480  -->  00:05:04,230
So now it is tagging it,
113

113

00:05:04,230  -->  00:05:05,500
and now it's starting to deploy.
114

114

00:05:05,500  -->  00:05:07,720
The pod is created,
115

115

00:05:07,720  -->  00:05:09,223
and the service is created.
116

116

00:05:10,070  -->  00:05:11,680
Waiting for changes now,
117

117

00:05:11,680  -->  00:05:14,207
and it says "Listening on port 8080".
118

118

00:05:15,198  -->  00:05:16,048
kubectl get pods,
119

119

00:05:17,370  -->  00:05:19,003
skaffold-demo is now running.
120

120

00:05:21,540  -->  00:05:23,270
kubectl get svc,
121

121

00:05:23,270  -->  00:05:24,973
we have a LoadBalencer running.
122

122

00:05:26,290  -->  00:05:28,090
And then we should be able to curl it,
123

123

00:05:28,090  -->  00:05:29,430
it might still take a couple of minutes
124

124

00:05:29,430  -->  00:05:32,480
before this LoadBalancer gets up the first time,
125

125

00:05:32,480  -->  00:05:34,900
because of DNS, it takes some time
126

126

00:05:34,900  -->  00:05:38,350
so we might have to wait a little bit before it works.
127

127

00:05:38,350  -->  00:05:40,280
But then what we should see
128

128

00:05:40,280  -->  00:05:42,600
when we go to this LoadBalancer URL
129

129

00:05:42,600  -->  00:05:44,687
is that it says "Hello world".
130

130

00:05:46,090  -->  00:05:49,970
So one simple command to deploy our pod
131

131

00:05:49,970  -->  00:05:53,220
on our, I would say, development cluster
132

132

00:05:53,220  -->  00:05:55,870
because this becomes then our development cluster
133

133

00:05:55,870  -->  00:05:59,100
where we can, with multiple developers,
134

134

00:05:59,100  -->  00:06:02,223
push our code on and see whether it is working.
135

135

00:06:06,000  -->  00:06:09,510
So if you try again, it says "Hello world".
136

136

00:06:09,510  -->  00:06:11,810
So our LoadBalancer is now setup
137

137

00:06:11,810  -->  00:06:14,173
and if we try a few times we get hello world.
138

138

00:06:15,550  -->  00:06:17,980
Now let's say that I wanna make a few changes,
139

139

00:06:17,980  -->  00:06:22,980
so I'm saying "Hello world, I'm making a few changes",
140

140

00:06:23,480  -->  00:06:26,660
and then I'm just going to hit the save button here,
141

141

00:06:26,660  -->  00:06:27,510
the shortcut to save,
142

142

00:06:27,510  -->  00:06:28,773
So I'm now saving,
143

143

00:06:30,340  -->  00:06:31,920
and what's happening here?
144

144

00:06:31,920  -->  00:06:36,220
Skaffold immediately sees that there has been a change.
145

145

00:06:36,220  -->  00:06:40,960
It's going to rebuild the Docker image, push it again,
146

146

00:06:40,960  -->  00:06:43,660
push the changes to Docker Hub,
147

147

00:06:43,660  -->  00:06:48,660
and then it's going to the pod with the latest version.
148

148

00:06:51,160  -->  00:06:53,980
You see now it is tagging it, pushing it,
149

149

00:06:53,980  -->  00:06:55,770
and now is listening again on port 8080.
150

150

00:06:55,770  -->  00:06:57,467
Let's curl again.
151

151

00:06:57,467  -->  00:07:00,230
"Hello world, I am making a few changes."
152

152

00:07:00,230  -->  00:07:04,760
So you see, it automatically builds, tags, push,
153

153

00:07:04,760  -->  00:07:07,583
and then I have my new pod running.
154

154

00:07:09,100  -->  00:07:11,000
My pod is updated
155

155

00:07:11,000  -->  00:07:12,780
because it says pod configured,
156

156

00:07:12,780  -->  00:07:16,933
so it puts a new image in place.
157

157

00:07:22,070  -->  00:07:24,400
It puts this image, skaffold-demo
158

158

00:07:24,400  -->  00:07:25,800
and then the tagged version,
159

159

00:07:26,970  -->  00:07:28,890
the one that they tagged here.
160

160

00:07:28,890  -->  00:07:33,170
And then it restarts the container with this new image,
161

161

00:07:33,170  -->  00:07:38,170
and then when I do the curl, then I see that I am getting
162

162

00:07:38,200  -->  00:07:40,130
the new version.
163

163

00:07:40,130  -->  00:07:45,000
So this lets you rapidly iterate over changes
164

164

00:07:45,000  -->  00:07:48,333
and test them immediately on your Kubernetes cluster.
165

165

00:07:49,200  -->  00:07:51,590
So this is a really nice piece of software
166

166

00:07:51,590  -->  00:07:54,180
to use by developers,
167

167

00:07:54,180  -->  00:07:56,580
to then build their software
168

168

00:07:56,580  -->  00:07:59,980
on Kubernetes using Docker containers.
169

169

00:07:59,980  -->  00:08:01,360
And you can even do this demo
170

170

00:08:01,360  -->  00:08:05,210
without having Golang installed on your local PC
171

171

00:08:05,210  -->  00:08:08,320
because it's all running in a Docker container.
172

172

00:08:08,320  -->  00:08:10,180
And like I said in the theory,
173

173

00:08:10,180  -->  00:08:12,720
Skaffold is also very plugable.
174

174

00:08:12,720  -->  00:08:14,360
You can change the way it builds,
175

175

00:08:14,360  -->  00:08:15,710
you can change the way it pushes,
176

176

00:08:15,710  -->  00:08:17,810
you can change the way it deploys,
177

177

00:08:17,810  -->  00:08:19,760
so it's a very interesting piece of software
178

178

00:08:19,760  -->  00:08:22,893
that you or your developers should definitely try out.
179

179

00:08:24,010  -->  00:08:26,360
And then when we hit Control + C,
180

180

00:08:26,360  -->  00:08:28,750
it is actually also going to clean up
181

181

00:08:29,640  -->  00:08:31,600
the pods and the service,
182

182

00:08:31,600  -->  00:08:33,403
so if we then do kubectl get pods,
183

183

00:08:34,300  -->  00:08:36,490
there are no pods found any more.
184

184

00:08:36,490  -->  00:08:38,722
So then it's nicely cleaned up,
185

185

00:08:38,722  -->  00:08:40,100
the service and the pods are gone,
186

186

00:08:40,100  -->  00:08:43,430
and the next time you are going to use Skaffold
187

187

00:08:43,430  -->  00:08:45,493
then it will bring it all up again.
