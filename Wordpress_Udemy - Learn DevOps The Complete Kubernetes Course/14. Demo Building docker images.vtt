WEBVTT
1
00:00:01.630 --> 00:00:06.080
In this demo, I'll show you how to build your own Docker image.

2
00:00:06.290 --> 00:00:13.460
If you already followed my other training, learn devops continuously deliver better software,

3
00:00:13.460 --> 00:00:19.200
then this will be very familiar and you can actually skip this lecture.

4
00:00:19.270 --> 00:00:24.360
In this demo, I'm going to use my "ubuntu-xenial" Vagrant box.

5
00:00:24.590 --> 00:00:31.630
If you haven't set up one yet, have a look at the demo where I explain, how to set up a cluster on AWS.

6
00:00:31.670 --> 00:00:37.910
The first demo explains how to set up a Vagrant box with Linux.

7
00:00:37.910 --> 00:00:46.550
Like I said, you can also just download Docker for Windows, or Docker for Mac, 

8
00:00:46.730 --> 00:00:50.840
and then execute the commands in a terminal, or using CMD, or power shell on Windows.

9
00:00:50.840 --> 00:00:52.780
I'm going to use Linux.

10
00:00:52.910 --> 00:00:58.600
You can get exactly the same box, so you should be able to exactly replicate this labs using this Vagrant box

11
00:00:58.630 --> 00:01:03.340
First thing I'm going to do is, I am going to install Docker.

12
00:01:03.550 --> 00:01:12.410
I can do that using, "apt-get install", so I am just going to, "apt-get install docker.io"

13
00:01:12.520 --> 00:01:17.450
which is going to install docker for me. This is going to install the latest version that is bundled with ubuntu.

14
00:01:17.590 --> 00:01:23.860
If you want the really, really, latest version, then you will have to get the latest version from their website.

15
00:01:23.870 --> 00:01:28.400
And their website also has instructions how to install the latest one.

16
00:01:28.720 --> 00:01:34.500
This one is bundled with ubuntu version 1.12

17
00:01:34.720 --> 00:01:37.550
Definitely good enough to do the lab.

18
00:01:37.590 --> 00:01:46.560
I'm also going to install, "apt-get install git", which in our case it is installed.

19
00:01:46.640 --> 00:01:47.640
Why do I need git?

20
00:01:47.670 --> 00:01:56.570
I'm going to get cloned my git repository, "docker-demo". You can also just go to this URL and get it downloaded as a zip file.

21
00:01:56.580 --> 00:02:02.910
So you don't really need git, it just easy to clone it straight here.

22
00:02:04.140 --> 00:02:14.210
And then, we have the directory "docker-demo". So, in this directory we have, the "index.js", "package.json", and the "Dockerfile" as I explained.

23
00:02:16.650 --> 00:02:20.280
You also have a "docker-compose.yml", "index-db.js", we will have to have a look at that.

24
00:02:23.040 --> 00:02:26.390
Those I used in some of my other courses.

25
00:02:26.400 --> 00:02:33.330
I just have one "docker-demo" repository that we always will use.

26
00:02:33.380 --> 00:02:34.000
"docker build" is going to use the docker file.  

27
00:02:34.100 --> 00:02:38.530
Let's have a look at this "Dockerfile", looks exactly the same.

28
00:02:38.540 --> 00:02:41.020
So, now we can execute the docker build.

29
00:02:41.360 --> 00:02:48.520
You can execute the "docker build" as root, with "sudo". We can do a, "sudo docker build" at the current directory,

30
00:02:48.650 --> 00:02:59.060
or you can make sure that the user ubuntu has access to this docker group, because then user ubuntu, our user,

31
00:02:59.060 --> 00:03:01.880
will always be able to execute dock.

32
00:03:02.450 --> 00:03:05.600
And you need to do this as root.

33
00:03:06.470 --> 00:03:11.070
Once you do this, you actually need to log out, and log in, so I am going to exit here.

34
00:03:11.340 --> 00:03:18.640
Do, a "vagrant ssh" again. We go to, "docker-demo", now I can do the "docker build" of this "docker-demo".

35
00:03:21.250 --> 00:03:24.430
I will just paused the video for a second, this is what you should get.

36
00:03:24.470 --> 00:03:33.620
So, Docker has successfully built this container, and we will go back to my "docker build" 

37
00:03:33.620 --> 00:03:39.720
and you can see first it pulled the node image, then it set the working directory to "/app".

38
00:03:40.040 --> 00:03:44.200
And added the path "/app", runs "npm install", so this gets all the dependencies for node, it installs it, it's quite a lot, 

39
00:03:51.560 --> 00:03:57.650
and then, it says, "npm info ok". It exposes port 3000.

40
00:03:57.800 --> 00:04:04.610
Makes sure that, when you start a container, it uses "npm start". 

41
00:04:04.610 --> 00:04:07.650
So, now we have this container, and you could already this container.

42
00:04:07.700 --> 00:04:14.580
You can use "docker run -p" port "3000", it is the port that this app is running on. You want to expose it as port "3000" on the whole system.

43
00:04:18.260 --> 00:04:21.440
This "ubuntu-xenial" is the whole system.

44
00:04:21.770 --> 00:04:30.950
And, this "-t" runs a Docker image with this ID. You can also specify the "i" flag for interactive mode,

45
00:04:30.950 --> 00:04:36.610
so that if you press "control+c", it'll actually get killed, and you don't have to kill it manually afterwords.

46
00:04:36.790 --> 00:04:38.240
It is going to run this.

47
00:04:38.730 --> 00:04:39.920
Let's open on a window,

48
00:04:42.690 --> 00:04:47.210
and I am just going to do, "curl localhost:3000", and then we have the "Hello World!".

49
00:04:47.230 --> 00:04:52.820
So, this is the "Hello World" of the index.js. 
So, that's it.

50
00:04:52.820 --> 00:04:58.670
Next I'm going to explain to you how to get this image online on DockerHub, Kubernetes can download this image, so that we can run this image on our cluster.
