1
00:00:00,560 --> 00:00:09,110
I will now be talking about ConfigMaps. Configuration parameters that are not secret, not like credentials

2
00:00:09,440 --> 00:00:11,590
can be put in a ConfigMap.

3
00:00:12,550 --> 00:00:16,500
The input is again a key value pair just like credentials.

4
00:00:16,570 --> 00:00:17,950
You have username and password.

5
00:00:17,950 --> 00:00:21,320
Here we have another key value pair.

6
00:00:21,460 --> 00:00:27,180
The ConfigMap key value pair can be read by the app using environment variables again.

7
00:00:27,180 --> 00:00:36,520
Also you can use container commandline arguments in the pod configuration or using volumes.

8
00:00:36,520 --> 00:00:42,850
A ConfigMap can also contain full configuration files where the value is actually a configuration file 

9
00:00:43,240 --> 00:00:45,610
and not just a short string.

10
00:00:45,790 --> 00:00:51,090
For instance a full configuration file can be a web server configuration file.

11
00:00:51,220 --> 00:00:58,060
This file can then be mounted using volumes where the application expects it's config file.

12
00:00:58,090 --> 00:01:05,090
This way you can inject configuration settings into containers without changing the container itself.

13
00:01:05,110 --> 00:01:10,350
Just imagine that you want to use the nginx container and you of course want to change the configuration

14
00:01:10,750 --> 00:01:15,480
and then you inject that configuration file as a volume in that image.

15
00:01:15,530 --> 00:01:21,220
You didn't change the image at all just the confirmation file is different and you can run any container

16
00:01:21,400 --> 00:01:23,220
with the configuration that you want.

17
00:01:24,080 --> 00:01:30,950
To generate a ConfigMap using files where you first put your data in a file 

18
00:01:30,950 --> 00:01:31,700
you can use the following commands.

19
00:01:32,940 --> 00:01:40,920
This command will just get the data that you write on terminal and then put it in "app.properties" until you

20
00:01:41,070 --> 00:01:42,570
write the letters "EOF".

21
00:01:44,040 --> 00:01:48,760
So, here we have "driver" equals "jdbc", "database" equals "Postgres",

22
00:01:48,780 --> 00:01:54,960
this is a property file, key value pairs, and this file we going to read using "kubectl create configmap"

23
00:01:54,960 --> 00:02:01,170
We are going to call the "app.config", and I am going to say, "--from-file=app.properties"

24
00:02:01,170 --> 00:02:02,640
and then you have a ConfigMap

25
00:02:02,710 --> 00:02:07,010
These is a very simple ConfigMap, where you just have very short strings.

26
00:02:07,020 --> 00:02:10,920
You don't really have a configuration file, but we could also use configuration file.

27
00:02:11,080 --> 00:02:18,230
And that's what I'm going to show you during the demo. How to use the configuration, so that we can create a pod that

28
00:02:18,230 --> 00:02:21,940
exposes a ConfigMap that uses a volume.

29
00:02:21,960 --> 00:02:24,050
Here we have a pod.

30
00:02:24,240 --> 00:02:28,340
Still our "k8s-demo", still "containerPort: 3000".

31
00:02:28,470 --> 00:02:30,790
We have volume months.

32
00:02:30,870 --> 00:02:38,280
The name is "config-volume" and the mountPath is "/etc/config". So, we come to mount volume in "/etc/config".

33
00:02:38,280 --> 00:02:46,050
The volume itself is just referring to this ConfigMap that we used earlier and then the content values

34
00:02:46,050 --> 00:02:47,520
will be stored in files.

35
00:02:47,550 --> 00:02:49,840
You will have, for instance, from the previous one,

36
00:02:49,970 --> 00:02:53,980
"/etc/config/driver" and then the value will be in the file.

37
00:02:54,150 --> 00:02:57,790
You can also use hierarchy if you would use dots in a name,

38
00:02:57,810 --> 00:03:04,410
then you can have "param.with.hierarchy", then that translates into param as a directory with a

39
00:03:04,410 --> 00:03:07,930
directory and hierarchy as a file with the value in.

40
00:03:08,070 --> 00:03:12,170
So, you can also create hierarchy in your ConfigMap.

41
00:03:12,180 --> 00:03:18,040
Here is a seam example of a pod that exposes the ConfigMap as an environment variables.

42
00:03:18,880 --> 00:03:23,480
You can use, "env: name", you can say, for instance, "DRIVER",

43
00:03:23,590 --> 00:03:26,930
"valueFrom", so this is exactly the same as what we did with credentials.

44
00:03:27,310 --> 00:03:33,520
But then you have ConfigMap key reference rather than the reference from our credentials.

45
00:03:33,640 --> 00:03:40,360
You posit a name and a key and then the value of the environment variable driver will be the value of

46
00:03:40,420 --> 00:03:42,830
the ConfigMap of the key driver.

47
00:03:44,310 --> 00:03:46,650
In the next demo I'm going to show you how this works.

48
00:03:46,650 --> 00:03:53,430
Using a configuration file, you're going to run an nginx in front of our pod-demo.

49
00:03:53,670 --> 00:03:58,500
We are basically going to run a reverse proxy and we need to update the configuration file for that.

50
00:03:58,680 --> 00:04:00,030
That's why we need ConfigMap.
