1
1

00:00:00,210  -->  00:00:01,480
<v Instructor>And now, I'm going to talk</v>
2

2

00:00:01,480  -->  00:00:03,693
about a tool called Skaffold.
3

3

00:00:05,390  -->  00:00:08,193
Skaffold is an open source project from Google.
4

4

00:00:09,170  -->  00:00:11,720
It's a command line tool for continuous development
5

5

00:00:11,720  -->  00:00:14,703
of applications that can run on Kubernetes.
6

6

00:00:15,930  -->  00:00:18,230
Skaffold will handle,
7

7

00:00:18,230  -->  00:00:21,340
building, for example with docker build.
8

8

00:00:21,340  -->  00:00:25,559
Pushing, to docker hub or other repositories,
9

9

00:00:25,559  -->  00:00:29,463
and deploying to your kubernetes cluster.
10

10

00:00:31,700  -->  00:00:35,820
Having this workflow, Skaffold can monitor your application
11

11

00:00:35,820  -->  00:00:38,803
for changes while you are developing it.
12

12

00:00:40,150  -->  00:00:43,950
When a change happens, it can execute this build, push,
13

13

00:00:43,950  -->  00:00:46,730
deploy workflow to get your application deployed
14

14

00:00:46,730  -->  00:00:49,363
immediately to the Kubernetes cluster.
15

15

00:00:50,290  -->  00:00:54,513
That way you can very quickly iterate on your application.
16

16

00:00:55,600  -->  00:00:58,530
Skaffold can also be used as a tool
17

17

00:00:58,530  -->  00:01:02,370
that can be incorporated into your CI/CD pipeline,
18

18

00:01:02,370  -->  00:01:07,205
as it has the build, push, and deploy workflow built-in.
19

19

00:01:07,205  -->  00:01:10,120
That way you can have the workflow locally
20

20

00:01:10,120  -->  00:01:12,244
to test your app, and have it handled
21

21

00:01:12,244  -->  00:01:15,113
by your CI/CD in the same way.
22

22

00:01:16,544  -->  00:01:18,820
Skaffold is also very pluggable.
23

23

00:01:18,820  -->  00:01:22,260
You can do the build with a local docker installation,
24

24

00:01:22,260  -->  00:01:25,850
or with alternatives like in cluster build with Kaniko
25

25

00:01:25,850  -->  00:01:28,683
or even a remote build on the Google Cloud Builds.
26

26

00:01:29,965  -->  00:01:33,860
Other builds next to docker are also possible,
27

27

00:01:33,860  -->  00:01:36,833
like Bazel, build packs or custom builds,
28

28

00:01:37,770  -->  00:01:41,550
and deploying can be done with kubectl, which I find
29

29

00:01:41,550  -->  00:01:44,200
as the simplest way to, but you also use helm,
30

30

00:01:44,200  -->  00:01:45,833
because it's also a possibility.
31

31

00:01:47,680  -->  00:01:51,220
Here are the Skaffold pipeline stages,
32

32

00:01:51,220  -->  00:01:52,950
so you are the developer,
33

33

00:01:52,950  -->  00:01:56,840
so the developer is going to open his IDE
34

34

00:01:56,840  -->  00:02:00,460
or his editor is going to develop his code,
35

35

00:02:00,460  -->  00:02:02,350
and at some point he's going to save his file,
36

36

00:02:02,350  -->  00:02:07,340
and Skaffold will detect the source code changes.
37

37

00:02:07,340  -->  00:02:10,500
There is a way to do file sync directly
38

38

00:02:10,500  -->  00:02:12,500
with the running pulse,
39

39

00:02:12,500  -->  00:02:16,350
but in most cases, you will have to rebuild the artifact.
40

40

00:02:16,350  -->  00:02:18,540
The artifact is a docker container,
41

41

00:02:18,540  -->  00:02:20,920
so it will run a docker build,
42

42

00:02:20,920  -->  00:02:23,393
most likely on your local system.
43

43

00:02:24,290  -->  00:02:26,160
You can also optionally test artifacts,
44

44

00:02:26,160  -->  00:02:27,787
you can run tests if you want to,
45

45

00:02:27,787  -->  00:02:30,040
so you can define test that need to run,
46

46

00:02:30,040  -->  00:02:32,193
or else the build has been completed.
47

47

00:02:33,230  -->  00:02:35,350
Then Skaffold can tag the artifacts,
48

48

00:02:35,350  -->  00:02:38,191
it can tag the docker container,
49

49

00:02:38,191  -->  00:02:40,780
then it'll render the manifests,
50

50

00:02:40,780  -->  00:02:45,080
so it can make changes to the YAML file that you need
51

51

00:02:45,080  -->  00:02:46,680
to deploy to Kubernetes,
52

52

00:02:46,680  -->  00:02:48,320
so Skaffold will render that,
53

53

00:02:48,320  -->  00:02:49,723
it can make changes to it,
54

54

00:02:51,430  -->  00:02:53,830
and then it will deploy this manifest file,
55

55

00:02:53,830  -->  00:02:55,520
digitally with cubectl,
56

56

00:02:55,520  -->  00:02:58,180
it will deploy it to your Kubernetes cluster,
57

57

00:02:58,180  -->  00:03:00,170
and then it will tell the logs immediately,
58

58

00:03:00,170  -->  00:03:03,140
so you can see what the output is of your application,
59

59

00:03:03,140  -->  00:03:05,760
whether it starts correctly or not.
60

60

00:03:05,760  -->  00:03:07,750
It can optionally also forward ports,
61

61

00:03:07,750  -->  00:03:09,520
so that you don't immediately can go
62

62

00:03:09,520  -->  00:03:11,433
to your application locally.
63

63

00:03:11,433  -->  00:03:14,389
You can also put a log in some place for example
64

64

00:03:14,389  -->  00:03:16,143
to reach your app,
65

65

00:03:17,100  -->  00:03:21,670
and then it can also cleanup the images and the resources.
66

66

00:03:21,670  -->  00:03:23,660
So technically when you exit Skaffold,
67

67

00:03:23,660  -->  00:03:26,962
then it will tear down the infrastructure that it created.
68

68

00:03:26,962  -->  00:03:29,960
So this is the Skaffold pipeline,
69

69

00:03:29,960  -->  00:03:33,030
once you run Skaffold, and you make a change
70

70

00:03:33,030  -->  00:03:35,270
to your source code, then it will go
71

71

00:03:35,270  -->  00:03:37,710
through this pipeline, you make another change,
72

72

00:03:37,710  -->  00:03:40,440
it'll again go through this pipeline.
73

73

00:03:40,440  -->  00:03:43,270
Then on your Kubernetes cluster, you will almost
74

74

00:03:43,270  -->  00:03:47,140
instantaneously see the new version of your application
75

75

00:03:47,140  -->  00:03:49,420
depending on how long it takes to
76

76

00:03:49,420  -->  00:03:52,330
do the build of your application,
77

77

00:03:52,330  -->  00:03:54,743
and that I'll show you in the next demo.
