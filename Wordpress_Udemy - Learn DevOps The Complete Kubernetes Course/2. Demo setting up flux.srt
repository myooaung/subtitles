1
1

00:00:00,190  -->  00:00:01,550
<v Instructor>In this demo, I will show you</v>
2

2

00:00:01,550  -->  00:00:03,150
how to set up Flux
3

3

00:00:03,150  -->  00:00:05,780
and to use a deployment and a service
4

4

00:00:05,780  -->  00:00:08,000
that will automatically be deployed
5

5

00:00:08,000  -->  00:00:09,713
to our Kubernetes cluster.
6

6

00:00:12,460  -->  00:00:14,210
In my Kubernetes course,
7

7

00:00:14,210  -->  00:00:16,173
I have a directory flux.
8

8

00:00:18,090  -->  00:00:19,493
And here I have a README.
9

9

00:00:21,660  -->  00:00:22,840
First thing that we need to do
10

10

00:00:22,840  -->  00:00:24,440
is to install Flux.
11

11

00:00:24,440  -->  00:00:27,363
So here I have the commands available to install Flux.
12

12

00:00:28,530  -->  00:00:32,140
You will need to install fluxctl first.
13

13

00:00:32,140  -->  00:00:34,263
So depending on what operating system you are,
14

14

00:00:34,263  -->  00:00:37,240
you have different installation methods.
15

15

00:00:37,240  -->  00:00:39,340
So let's have a look on the website first.
16

16

00:00:40,970  -->  00:00:42,800
So this is the Flux documentation.
17

17

00:00:42,800  -->  00:00:45,850
They're currently on version 1.17.1.
18

18

00:00:45,850  -->  00:00:48,580
They probably are going to be at a newer version
19

19

00:00:48,580  -->  00:00:50,610
when you are following this lecture.
20

20

00:00:50,610  -->  00:00:53,340
So make sure to go to the Flux URL
21

21

00:00:53,340  -->  00:00:55,440
and have a look in the documentation yourself
22

22

00:00:55,440  -->  00:00:57,240
when you are following this lecture.
23

23

00:00:58,240  -->  00:01:01,413
We need to first install fluxctl so on macOS,
24

24

00:01:01,413  -->  00:01:02,700
it's very simple.
25

25

00:01:02,700  -->  00:01:04,653
Brew install fluxctl.
26

26

00:01:05,560  -->  00:01:07,483
On Linux, you can use snap.
27

27

00:01:09,240  -->  00:01:12,493
And on Windows, you have the Chocolatey package manager
28

28

00:01:12,493  -->  00:01:14,180
that you can use.
29

29

00:01:14,180  -->  00:01:16,210
First, you need to install this package manager
30

30

00:01:16,210  -->  00:01:17,830
and then you can execute this command
31

31

00:01:17,830  -->  00:01:19,593
and this will install fluxctl.
32

32

00:01:20,670  -->  00:01:23,670
You can also download the binary releases yourself
33

33

00:01:23,670  -->  00:01:26,173
from the GitHub release page.
34

34

00:01:28,390  -->  00:01:30,080
So once you have done this,
35

35

00:01:30,080  -->  00:01:31,923
let's start with the installation.
36

36

00:01:33,560  -->  00:01:35,670
Kubectl create namespace flux.
37

37

00:01:35,670  -->  00:01:38,410
We're going to create a namespace for Flux.
38

38

00:01:38,410  -->  00:01:41,070
I have already a Kubernetes cluster running.
39

39

00:01:41,070  -->  00:01:42,670
You can use Minikube or Kops
40

40

00:01:42,670  -->  00:01:44,960
or whatever Kubernetes cluster you have running.
41

41

00:01:44,960  -->  00:01:46,583
Whatever's easiest for you.
42

42

00:01:48,220  -->  00:01:52,720
Then I'm going to use a Git repository.
43

43

00:01:52,720  -->  00:01:54,710
So I'm going to install Flux
44

44

00:01:54,710  -->  00:01:57,290
and currently it only supports one Git repository.
45

45

00:01:57,290  -->  00:01:58,770
So when you install Flux,
46

46

00:01:58,770  -->  00:02:01,090
you're going to pass a Git repository
47

47

00:02:01,090  -->  00:02:04,083
where your manifest files are located.
48

48

00:02:05,040  -->  00:02:07,540
I have in my Git repository,
49

49

00:02:07,540  -->  00:02:09,960
the flux-demo repository.
50

50

00:02:09,960  -->  00:02:11,470
So the best thing that you can do
51

51

00:02:11,470  -->  00:02:13,390
if you wanna do this demo
52

52

00:02:13,390  -->  00:02:15,860
is to go to my GitHub repository,
53

53

00:02:15,860  -->  00:02:17,830
flux-demo, and you fork this
54

54

00:02:17,830  -->  00:02:20,170
which makes a copy of this repository
55

55

00:02:20,170  -->  00:02:22,110
under your own GitHub user
56

56

00:02:22,110  -->  00:02:25,071
and then you can export your own username here
57

57

00:02:25,071  -->  00:02:27,710
and then it'll install Flux
58

58

00:02:27,710  -->  00:02:31,010
using a Git repository that you have write access to,
59

59

00:02:31,010  -->  00:02:35,580
the flux-demo on your own GitHub repository.
60

60

00:02:35,580  -->  00:02:38,563
So I'm going to do export and it's gonna be my user.
61

61

00:02:40,440  -->  00:02:44,523
So the URL of this flux-demo repo is GitHub.com,
62

62

00:02:45,383  -->  00:02:48,966
my username and then /flux-demo.
63

63

00:02:50,601  -->  00:02:52,570
I'll go over the code in a minute.
64

64

00:02:52,570  -->  00:02:54,943
I'm just going to install it first.
65

65

00:02:57,825  -->  00:02:58,803
Fluxctl install.
66

66

00:03:02,326  -->  00:03:04,714
So this created a serviceaccount, clusterrole,
67

67

00:03:04,714  -->  00:03:06,720
clusterrolebinding, the deployment,
68

68

00:03:06,720  -->  00:03:11,720
a secret, the memcache and the service/memcache.
69

69

00:03:11,936  -->  00:03:13,623
Let's have a look.
70

70

00:03:14,540  -->  00:03:16,350
It's still rolling out.
71

71

00:03:16,350  -->  00:03:18,780
So it's downloading the images now
72

72

00:03:18,780  -->  00:03:22,510
and then once this command is complete,
73

73

00:03:22,510  -->  00:03:24,900
we can start using Flux.
74

74

00:03:24,900  -->  00:03:27,603
The deployment Flux has been rolled out.
75

75

00:03:28,740  -->  00:03:31,913
Let's have a look at this flux-demo folder.
76

76

00:03:34,180  -->  00:03:36,970
So this is my repository, flux-demo
77

77

00:03:36,970  -->  00:03:38,910
and then we have two folders.
78

78

00:03:38,910  -->  00:03:41,370
So it's only going to look at those two folders.
79

79

00:03:41,370  -->  00:03:44,510
That's an argument that we passed during the installation.
80

80

00:03:44,510  -->  00:03:46,670
We're only going to look at the namespaces
81

81

00:03:46,670  -->  00:03:48,620
and the workloads directory,
82

82

00:03:48,620  -->  00:03:50,670
so you can still add your application
83

83

00:03:50,670  -->  00:03:54,873
to this repository, any other folders will just be ignored.
84

84

00:03:55,830  -->  00:03:57,730
So we have the namespaces.
85

85

00:03:57,730  -->  00:03:58,830
Here we have the definition
86

86

00:03:58,830  -->  00:04:01,413
to create a new namespace called demo.
87

87

00:04:03,162  -->  00:04:05,518
That's the only file in namespaces.
88

88

00:04:05,518  -->  00:04:07,660
And then we have the workloads and in workloads,
89

89

00:04:07,660  -->  00:04:09,120
we have hello.yaml.
90

90

00:04:10,860  -->  00:04:13,260
And we just have a simple deployment here
91

91

00:04:13,260  -->  00:04:15,023
of a docker-nodejs-demo.
92

92

00:04:15,970  -->  00:04:19,150
We specified annotations so that we can use Flux.
93

93

00:04:19,150  -->  00:04:21,600
So we have fluxcd/io/automated is true
94

94

00:04:22,479  -->  00:04:24,850
and we're also going to say use
95

95

00:04:24,850  -->  00:04:26,890
from this docker-nodejs-demo,
96

96

00:04:26,890  -->  00:04:31,890
the tag that corresponds with sematic version 1.0.0.
97

97

00:04:32,990  -->  00:04:35,810
So whenever we push a new version to our Docker Hub,
98

98

00:04:35,810  -->  00:04:39,090
then the Flux will make sure that when it's still
99

99

00:04:39,090  -->  00:04:41,180
within the major version of one
100

100

00:04:41,180  -->  00:04:43,930
that that latest version is deployed.
101

101

00:04:43,930  -->  00:04:48,520
So I have in this repo version 1.0.1 and 1.0.2.
102

102

00:04:48,520  -->  00:04:53,120
So what I'm going to do is lemme just edit this file
103

103

00:04:53,120  -->  00:04:55,290
and make sure that it is 1.0.1
104

104

00:04:55,290  -->  00:04:56,640
which is an older version,
105

105

00:04:56,640  -->  00:04:58,850
so then you'll immediately see this happening
106

106

00:04:58,850  -->  00:05:01,263
because then it's going to deploy 1.0.2.
107

107

00:05:02,790  -->  00:05:04,790
So I'll just roll this back to 1.0.1.
108

108

00:05:08,189  -->  00:05:10,840
So we are going to deploy the image docker-nodejs-demo
109

109

00:05:10,840  -->  00:05:13,430
version 1.0.1 but we're using
110

110

00:05:13,430  -->  00:05:16,220
semantic versioning here with fluxcd.
111

111

00:05:16,220  -->  00:05:18,680
Fluxcd will see that there's a 1.0.2
112

112

00:05:18,680  -->  00:05:20,943
and then it's going to deploy the 1.0.2.
113

113

00:05:22,320  -->  00:05:24,220
All the rest is pretty default stuff.
114

114

00:05:24,220  -->  00:05:26,667
We have a strategy, rollingUpdates,
115

115

00:05:27,760  -->  00:05:30,840
we want the max unavailability zero.
116

116

00:05:30,840  -->  00:05:32,660
We have a selector, a template,
117

117

00:05:32,660  -->  00:05:34,330
the containers and the ports.
118

118

00:05:34,330  -->  00:05:35,713
The port is 3000.
119

119

00:05:36,720  -->  00:05:38,860
So then we also have a service.
120

120

00:05:38,860  -->  00:05:40,610
And the service is just a NodePort.
121

121

00:05:41,520  -->  00:05:43,430
Depending on what kind of cluster you are,
122

122

00:05:43,430  -->  00:05:46,123
you can change this to a different port.
123

123

00:05:49,210  -->  00:05:51,290
What do we still need to do?
124

124

00:05:51,290  -->  00:05:54,483
We need to here go to Settings.
125

125

00:05:55,850  -->  00:05:59,240
Deployment keys and we need to configure a deployment key
126

126

00:05:59,240  -->  00:06:03,710
for Flux so that Flux has access to this repository.
127

127

00:06:03,710  -->  00:06:05,260
So we can add a deployment key.
128

128

00:06:06,970  -->  00:06:09,030
Going to call it flux.
129

129

00:06:09,030  -->  00:06:10,640
And then we can execute a command
130

130

00:06:10,640  -->  00:06:12,283
to retrieve the correct key.
131

131

00:06:14,730  -->  00:06:17,280
Setup SSH key in the README.
132

132

00:06:17,280  -->  00:06:19,250
Fluxctl identity.
133

133

00:06:19,250  -->  00:06:20,786
And this is the key.
134

134

00:06:20,786  -->  00:06:22,570
This is a public key.
135

135

00:06:22,570  -->  00:06:24,320
Flux has a private key.
136

136

00:06:24,320  -->  00:06:26,963
And we are going to set up the public key in Git.
137

137

00:06:29,610  -->  00:06:32,040
You have to allow write access
138

138

00:06:32,040  -->  00:06:34,423
because Flux can also make changes.
139

139

00:06:36,300  -->  00:06:37,360
The key is added
140

140

00:06:38,230  -->  00:06:42,140
and now Flux will see that it has now access
141

141

00:06:42,140  -->  00:06:43,263
to this repository.
142

142

00:06:45,888  -->  00:06:48,080
It is a fluxctl install.
143

143

00:06:48,080  -->  00:06:50,513
My git-user, the email, the url.
144

144

00:06:51,440  -->  00:06:52,820
This is what I was talking about.
145

145

00:06:52,820  -->  00:06:55,460
The git-path is namespaces, workloads.
146

146

00:06:55,460  -->  00:06:58,000
So you need to make sure these two directories exist
147

147

00:06:58,000  -->  00:07:00,903
and Flux will only look in those paths.
148

148

00:07:01,800  -->  00:07:03,170
The namespace is flux
149

149

00:07:03,170  -->  00:07:04,570
so let's have a look at the ports
150

150

00:07:04,570  -->  00:07:05,863
in the namespace flux.
151

151

00:07:10,790  -->  00:07:13,360
So I have the flux and the memchached
152

152

00:07:13,360  -->  00:07:15,060
and let's have a look at the logs.
153

153

00:07:21,210  -->  00:07:22,627
So what happened here?
154

154

00:07:22,627  -->  00:07:24,330
Git repository was not ready
155

155

00:07:24,330  -->  00:07:27,540
because a clone still was giving permission denied.
156

156

00:07:27,540  -->  00:07:30,150
This was at 11:56
157

157

00:07:30,150  -->  00:07:34,170
and then at 11:57,
158

158

00:07:34,170  -->  00:07:37,890
it retried and it could actually fetch the master branch.
159

159

00:07:37,890  -->  00:07:40,030
Then it goes into our Git repository,
160

160

00:07:40,030  -->  00:07:43,060
figures out that there is a namespace, YAML file
161

161

00:07:43,060  -->  00:07:44,560
and a deployment YAML file.
162

162

00:07:44,560  -->  00:07:49,130
So here then it does a kubectl apply,
163

163

00:07:49,130  -->  00:07:52,140
namespace/demo-created, service created
164

164

00:07:52,140  -->  00:07:53,783
and it started the deployment.
165

165

00:07:55,520  -->  00:07:56,873
Let's have a look.
166

166

00:07:57,910  -->  00:08:00,783
Get pods in the demo namespace.
167

167

00:08:01,810  -->  00:08:03,273
And then this one is running.
168

168

00:08:05,840  -->  00:08:07,080
Let's try to reach it
169

169

00:08:09,260  -->  00:08:10,840
on this NodePort.
170

170

00:08:10,840  -->  00:08:12,133
I'm using Minikube here.
171

171

00:08:14,330  -->  00:08:16,480
But you can really use whatever you want.
172

172

00:08:16,480  -->  00:08:17,830
If you're using Kops, your probably want
173

173

00:08:17,830  -->  00:08:19,559
to put this on a load balancer
174

174

00:08:19,559  -->  00:08:21,073
to make it easy.
175

175

00:08:23,240  -->  00:08:25,380
So this returns Hello World
176

176

00:08:25,380  -->  00:08:27,530
which we typically return.
177

177

00:08:27,530  -->  00:08:32,420
And we also have version 1.2.2.
178

178

00:08:32,420  -->  00:08:36,010
So what happened here is that Flux did a sync
179

179

00:08:36,010  -->  00:08:38,720
of our repo but also,
180

180

00:08:38,720  -->  00:08:42,830
went to Docker Hub, checked what is the last version
181

181

00:08:42,830  -->  00:08:46,920
that I can use taking this semantic version into account
182

182

00:08:46,920  -->  00:08:49,560
and then I can use 1.0.2
183

183

00:08:49,560  -->  00:08:51,803
because there's a newer version.
184

184

00:08:52,640  -->  00:08:57,213
So it switches from 1.0.1 to 1.0.2.
185

185

00:08:59,430  -->  00:09:01,493
So we have a look again in our flux-demo.
186

186

00:09:03,430  -->  00:09:07,770
We see there was a commit two minutes ago
187

187

00:09:07,770  -->  00:09:12,770
from Flux where Flux changed the 1.0.1 in 1.0.2.
188

188

00:09:13,170  -->  00:09:17,800
And then it also pushed this image to Kubernetes
189

189

00:09:17,800  -->  00:09:19,453
instead of the 1.0.1.
190

190

00:09:20,810  -->  00:09:23,810
So Flux will continue to monitor this repo.
191

191

00:09:23,810  -->  00:09:26,210
So if there now is a 1.0.3 released,
192

192

00:09:26,210  -->  00:09:28,923
it will also automatically bump it to 1.0.3.
193

193

00:09:30,730  -->  00:09:33,160
And that's what you will see here in the logs.
194

194

00:09:33,160  -->  00:09:36,130
It will keep on syncing this repo.
195

195

00:09:36,130  -->  00:09:37,970
Even if we make a change,
196

196

00:09:37,970  -->  00:09:40,090
and we commit something,
197

197

00:09:40,090  -->  00:09:41,620
then it will also pick it up
198

198

00:09:41,620  -->  00:09:44,883
and then immediately apply it to our Kubernetes cluster.
199

199

00:09:45,730  -->  00:09:48,020
The only real downside that I find now
200

200

00:09:48,020  -->  00:09:50,810
is that we can only have one Git repository
201

201

00:09:50,810  -->  00:09:53,900
but I'm sure that in the future, it will change.
202

202

00:09:53,900  -->  00:09:55,200
What they that you can do now
203

203

00:09:55,200  -->  00:09:58,710
is run just another flux daemon in another namespace
204

204

00:09:58,710  -->  00:10:01,830
if you want to have multiple repositories.
205

205

00:10:01,830  -->  00:10:03,400
And then you can use then RBAC rules
206

206

00:10:03,400  -->  00:10:06,864
to make sure that Flux can only access that namespace
207

207

00:10:06,864  -->  00:10:08,264
so that there is no overlap.
208

208

00:10:09,890  -->  00:10:12,350
So that is it for this Flux demo.
209

209

00:10:12,350  -->  00:10:13,300
It looks very simple
210

210

00:10:13,300  -->  00:10:15,260
but it's actually a very powerful tool
211

211

00:10:15,260  -->  00:10:18,620
because now you can put all your manifest files
212

212

00:10:18,620  -->  00:10:20,100
in your Git repository
213

213

00:10:20,100  -->  00:10:22,620
and then Flux will automatically monitor it
214

214

00:10:22,620  -->  00:10:24,980
and apply it to the Kubernetes cluster
215

215

00:10:24,980  -->  00:10:26,507
allowing you to do GitOps.
