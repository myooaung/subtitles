WEBVTT
1
1

00:00:00.110  -->  00:00:01.290
<v Edward>I am now going to talk</v>
2

2

00:00:01.290  -->  00:00:03.303
about admission controllers.
3

3

00:00:05.080  -->  00:00:08.010
An admission controller can intercept requests
4

4

00:00:08.010  -->  00:00:09.913
sent to the Kubernetes API server.
5

5

00:00:10.810  -->  00:00:13.570
For example, when you create a new pod,
6

6

00:00:13.570  -->  00:00:16.480
a request will be sent to the kubernetes API server;
7

7

00:00:16.480  -->  00:00:20.200
and this can be intercepted by an admission controller.
8

8

00:00:20.200  -->  00:00:25.200
This interception happens after the user is authenticated
9

9

00:00:25.240  -->  00:00:27.630
using a token or certificate, or any other way
10

10

00:00:27.630  -->  00:00:31.855
of authentication, and authorized, for example, using RBAC
11

11

00:00:31.855  -->  00:00:36.855
and before the object is persisted, saved, in the backend.
12

12

00:00:37.620  -->  00:00:40.003
And the backend is basically etcd.
13

13

00:00:41.670  -->  00:00:45.590
Admission controllers can be enabled by the administrator.
14

14

00:00:45.590  -->  00:00:47.750
They are typically added at cluster creation
15

15

00:00:47.750  -->  00:00:51.189
by passing an argument to the kube-apiserver.
16

16

00:00:51.189  -->  00:00:52.950
So when you launch a kube-apiserver,
17

17

00:00:52.950  -->  00:00:55.670
they can add the enable admission plugins and they can
18

18

00:00:55.670  -->  00:00:59.710
specify a list of admission plugins that you want to enable.
19

19

00:00:59.710  -->  00:01:02.610
By default, there are already quite a few enabled,
20

20

00:01:02.610  -->  00:01:05.090
which I will go over in the next slide.
21

21

00:01:05.090  -->  00:01:07.643
And, in the next lecture, I will explain you one
22

22

00:01:07.643  -->  00:01:10.130
that is currently not enabled by default,
23

23

00:01:10.130  -->  00:01:12.483
but an interesting one that you should enable.
24

24

00:01:13.610  -->  00:01:18.260
This default list is specific to a kubernetes version.
25

25

00:01:18.260  -->  00:01:20.490
Newer kubernetes versions will have
26

26

00:01:20.490  -->  00:01:22.240
a different admission plugin list
27

27

00:01:22.240  -->  00:01:25.513
because there are always new admission plugins coming out.
28

28

00:01:26.920  -->  00:01:28.690
When using kops, it can be configured
29

29

00:01:28.690  -->  00:01:31.620
using the yaml configuration or with minikube
30

30

00:01:31.620  -->  00:01:34.830
by passing an argument after minikube start.
31

31

00:01:34.830  -->  00:01:36.190
I have that documented;
32

32

00:01:36.190  -->  00:01:38.233
you will see that later on in the demo.
33

33

00:01:40.140  -->  00:01:42.400
Here is a list of admission controllers.
34

34

00:01:42.400  -->  00:01:46.723
These are enabled by default in the kubernetes version 1.16;
35

35

00:01:47.680  -->  00:01:49.041
but then in later versions,
36

36

00:01:49.041  -->  00:01:51.403
you will see that it might change.
37

37

00:01:52.580  -->  00:01:55.540
So, for example, the first one is the NamespaceLifecycle.
38

38

00:01:55.540  -->  00:01:58.310
It enforces that no new objects can be created
39

39

00:01:58.310  -->  00:02:00.850
when a namespace is in the terminating state.
40

40

00:02:00.850  -->  00:02:04.190
So when you delete a namespace, this admission controller
41

41

00:02:04.190  -->  00:02:08.020
makes sure that no new objects can be created.
42

42

00:02:08.020  -->  00:02:10.810
It will intercept these objects and make sure
43

43

00:02:10.810  -->  00:02:12.070
that these are not created
44

44

00:02:12.070  -->  00:02:14.743
when the namespace is in a terminating state.
45

45

00:02:15.860  -->  00:02:17.770
Then you have the LimitRanger.
46

46

00:02:17.770  -->  00:02:19.930
Using the LimitRange object type,
47

47

00:02:19.930  -->  00:02:21.500
you can set the default and limit
48

48

00:02:21.500  -->  00:02:25.240
CPU memory resources within a namespace.
49

49

00:02:25.240  -->  00:02:27.750
The LimitRanger admission controller will ensure
50

50

00:02:27.750  -->  00:02:30.874
these defaults and limits are applied.
51

51

00:02:30.874  -->  00:02:33.590
So you can apply default and limits
52

52

00:02:33.590  -->  00:02:36.610
of CPU and memory resources within the namespace
53

53

00:02:36.610  -->  00:02:39.215
and then this admission controller will make sure
54

54

00:02:39.215  -->  00:02:43.860
that these are applied when you create a new object.
55

55

00:02:43.860  -->  00:02:45.340
Then you have the ServiceAccount
56

56

00:02:45.340  -->  00:02:47.800
which implements the ServiceAccount feature,
57

57

00:02:47.800  -->  00:02:49.970
and then you have the DefaultStorageClass.
58

58

00:02:49.970  -->  00:02:52.160
If a PersistentVolumeClaim is created
59

59

00:02:52.160  -->  00:02:54.790
and it doesn't specify any specific storage,
60

60

00:02:54.790  -->  00:02:57.050
then this admission controller will add the default
61

61

00:02:57.050  -->  00:02:59.200
storage class to the PersistentVolumeClaim.
62

62

00:03:00.120  -->  00:03:04.397
This is mainly to avoid that a user using the cluster
63

63

00:03:04.397  -->  00:03:07.810
needs to know the storage types.
64

64

00:03:07.810  -->  00:03:10.390
So if it doesn't specify a specific storage type,
65

65

00:03:10.390  -->  00:03:13.823
then the default storage class will be injected.
66

66

00:03:15.710  -->  00:03:18.350
Then you have the DefaultTolerationSeconds
67

67

00:03:18.350  -->  00:03:20.380
sets a default toleration in seconds
68

68

00:03:20.380  -->  00:03:23.840
if not explicitly defined by the pod specification.
69

69

00:03:23.840  -->  00:03:26.745
So this has to do with the tolerations
70

70

00:03:26.745  -->  00:03:29.810
where I have also lectures on.
71

71

00:03:29.810  -->  00:03:31.540
If the default toleration is not set,
72

72

00:03:31.540  -->  00:03:34.140
then this admission controller can set this for you.
73

73

00:03:35.361  -->  00:03:38.360
NodeRestriction makes sure that the kubelets that run
74

74

00:03:38.360  -->  00:03:41.700
on every node can only modify their own node
75

75

00:03:41.700  -->  00:03:44.610
and pod objects, so only those objects
76

76

00:03:44.610  -->  00:03:46.373
that run on that specific node.
77

77

00:03:47.390  -->  00:03:49.060
And then you have two interesting ones
78

78

00:03:49.060  -->  00:03:51.930
that are used a lot: the MutatingAdmissionWebhook
79

79

00:03:51.930  -->  00:03:53.870
and the ValidatingAdmissionWebhook.
80

80

00:03:53.870  -->  00:03:56.650
And the MutatingAdmissionWebhook, you can set up a webhook
81

81

00:03:56.650  -->  00:04:01.650
that can modify the object being sent to the kube-apiserver.
82

82

00:04:01.826  -->  00:04:04.710
The MutatingAdmissionWebhook ensures that the matching
83

83

00:04:04.710  -->  00:04:08.660
object will be sent to this webhook for modification.
84

84

00:04:08.660  -->  00:04:11.660
So you will run some program; this is called a webhook,
85

85

00:04:11.660  -->  00:04:14.530
in a pod somewhere within your cluster;
86

86

00:04:14.530  -->  00:04:16.650
and then you can make sure that whenever an object
87

87

00:04:16.650  -->  00:04:21.050
is created, it first goes to your program, to your webhook,
88

88

00:04:21.050  -->  00:04:23.860
and then maybe it will make some changes,
89

89

00:04:23.860  -->  00:04:25.750
maybe it will inject a container,
90

90

00:04:25.750  -->  00:04:28.740
and then that will then be persisted to the cluster.
91

91

00:04:28.740  -->  00:04:30.720
So if you want to inject, for example,
92

92

00:04:30.720  -->  00:04:33.190
a container for every pod that is being created,
93

93

00:04:33.190  -->  00:04:35.398
you would use the MutatingAdmissionWebhook.
94

94

00:04:35.398  -->  00:04:36.780
And this is exactly how Istio,
95

95

00:04:36.780  -->  00:04:40.053
for example, is injecting its sidecars.
96

96

00:04:41.070  -->  00:04:42.560
And then you have the ValidatingAdmissionWebhook,
97

97

00:04:42.560  -->  00:04:45.690
which is similar; you can set up a webhook that can validate
98

98

00:04:45.690  -->  00:04:48.030
the objects being sent to the kube-apiserver.
99

99

00:04:48.030  -->  00:04:50.820
If the ValidatingAdmissionWebhook rejects
100

100

00:04:50.820  -->  00:04:53.238
the request, the request fails.
101

101

00:04:53.238  -->  00:04:58.070
So, for validation purposes, you can then validate whatever
102

102

00:04:58.070  -->  00:05:02.100
specification that is being used within a pod, for example.
103

103

00:05:02.100  -->  00:05:03.730
If you don't agree with the specification,
104

104

00:05:03.730  -->  00:05:06.660
you can reject the request; and then the request will fail.
105

105

00:05:06.660  -->  00:05:08.833
The pod will not be created, for example.
106

106

00:05:10.290  -->  00:05:12.300
And then you have the ResourceQuota will check
107

107

00:05:12.300  -->  00:05:14.520
incoming requests to see if it doesn't
108

108

00:05:14.520  -->  00:05:16.060
violate the constraints defined
109

109

00:05:16.060  -->  00:05:18.890
in the ResourceQuota object in a namespace.
110

110

00:05:18.890  -->  00:05:22.690
So, again, this admission controller can then make sure
111

111

00:05:22.690  -->  00:05:24.340
that the resources are checked
112

112

00:05:24.340  -->  00:05:26.793
so that it doesn't go over a specified quota.
113

113

00:05:28.230  -->  00:05:31.960
And this PodSecurityPolicy is not enabled yet by default
114

114

00:05:31.960  -->  00:05:36.790
in Kubernetes 1.16, but it might be enabled in the future;
115

115

00:05:36.790  -->  00:05:40.300
and this one enables you to control the security aspects
116

116

00:05:40.300  -->  00:05:42.840
of the pods creation and updates.
117

117

00:05:42.840  -->  00:05:45.290
So, for example, privileged non-privileged
118

118

00:05:45.290  -->  00:05:48.240
and I have a separate lecture on this admission controller.
119

119

00:05:50.200  -->  00:05:52.280
So the mutating admission controller
120

120

00:05:52.280  -->  00:05:54.270
and the validating admission controller are actually
121

121

00:05:54.270  -->  00:05:56.852
quite interesting because they are very flexible,
122

122

00:05:56.852  -->  00:06:00.960
and they allow you to extend yourself to webhooks
123

123

00:06:00.960  -->  00:06:02.930
because you can write your own software,
124

124

00:06:02.930  -->  00:06:07.020
your own mutating webhook or your own validating webhook
125

125

00:06:07.020  -->  00:06:10.440
that will then modify the pod specification,
126

126

00:06:10.440  -->  00:06:13.430
for example, or validate the pod specification.
127

127

00:06:13.430  -->  00:06:16.690
So here is an overview of how the mutating
128

128

00:06:16.690  -->  00:06:18.429
and validating admission work.
129

129

00:06:18.429  -->  00:06:22.610
You have a request coming in to the API HTTP handler,
130

130

00:06:22.610  -->  00:06:24.971
so this is the kube-apiserver.
131

131

00:06:24.971  -->  00:06:26.650
The request can be, for example,
132

132

00:06:26.650  -->  00:06:30.830
when someone does kubectl create of a pod.
133

133

00:06:30.830  -->  00:06:33.950
So that is a request; it's sent to the API server.
134

134

00:06:33.950  -->  00:06:37.530
Authentication and authorization needs to happen first.
135

135

00:06:37.530  -->  00:06:39.640
Once the users are authenticated and authorized,
136

136

00:06:39.640  -->  00:06:42.820
then the mutating admission invokes the webhook,
137

137

00:06:42.820  -->  00:06:44.507
which can be a custom piece of software
138

138

00:06:44.507  -->  00:06:48.080
that might mutate the request.
139

139

00:06:48.080  -->  00:06:50.878
Then you have the object schema validation.
140

140

00:06:50.878  -->  00:06:54.880
Validating admission might add some XR validations,
141

141

00:06:54.880  -->  00:06:58.030
and only then it is persisted to etcd.
142

142

00:06:58.030  -->  00:07:01.210
And when it's persisted, it might actually have added,
143

143

00:07:01.210  -->  00:07:03.660
it might have modified, your object.
144

144

00:07:03.660  -->  00:07:06.060
It might have injected a container, for example.
145

145

00:07:07.390  -->  00:07:09.630
So that's it for admission controllers;
146

146

00:07:09.630  -->  00:07:11.590
and then in the next lecture, I will talk a little bit
147

147

00:07:11.590  -->  00:07:15.023
about the pod security policy admission controller.
