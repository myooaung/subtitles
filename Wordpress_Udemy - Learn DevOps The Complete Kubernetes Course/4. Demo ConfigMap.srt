1
00:00:00,330 --> 00:00:03,560
In this demo, I'm going to show you how ConfigMaps works.

2
00:00:05,010 --> 00:00:12,210
In my "kubernetes-course", I have a configuration file for our nginx. And I have "configmap" and then I have "reverseproxy.conf"

3
00:00:12,480 --> 00:00:18,760
And this configuration is going to make sure that our nginx is

4
00:00:18,760 --> 00:00:26,260
listening on port 80, the server name is "localhost", and whenever it gets a hit is going to forward its

5
00:00:26,500 --> 00:00:33,910
request to this URL, where the "Hello World" nodejs will be running on port 3000.

6
00:00:33,950 --> 00:00:45,360
So, I am going to edit this "reverseproxy.conf" to create ConfigMap nginx-config, from file "/configmap/reverseproxy.conf" 

7
00:00:45,370 --> 00:00:55,590
ConfigMap is created. 

8
00:00:55,710 --> 00:00:56,580
You want to see my configmaps.

9
00:00:59,200 --> 00:01:02,280
Then I see that "nginx-config" has been created.

10
00:01:02,650 --> 00:01:07,780
And I can also ask to give me the outputs in the YAML format.

11
00:01:07,930 --> 00:01:18,040
So, this config is now with the key "reverseproxy.conf" in the ConfigMap named as nginx-config.

12
00:01:18,840 --> 00:01:30,580
Let's have a look at my pod configuration that I'm going to launch at "nginx.yml". 

13
00:01:30,660 --> 00:01:35,190
"helloworld-nginx" is going to be my pod name.

14
00:01:35,300 --> 00:01:36,570
I have two containers.

15
00:01:36,590 --> 00:01:39,020
One is going to be the nginx container.

16
00:01:39,020 --> 00:01:42,430
The other one the "k8s-demo" container.

17
00:01:42,770 --> 00:01:46,000
One is running on "containerPort: 80".

18
00:01:46,190 --> 00:01:55,460
The other one on 3000. My nginx has a volume mount with the name "config-volume"

19
00:01:55,550 --> 00:02:04,100
and the mount path is "/etc/nginx/conf.d" this is a predefined configuration path 

20
00:02:04,100 --> 00:02:06,880
where nginx this image will be looking for its configuration.

21
00:02:07,040 --> 00:02:08,940
This config-volume is defined here.

22
00:02:10,780 --> 00:02:12,760
It's a config-volume.

23
00:02:13,000 --> 00:02:19,130
It has the same names with this name here, so this names here are matching.

24
00:02:19,140 --> 00:02:24,670
It's going to be looking for a ConfigMap with the name "nginx-config" that I've just created for key "reverseproxy.conf".

25
00:02:25,160 --> 00:02:28,340
So name, the next config key, and "reverseproxy.conf".

26
00:02:28,340 --> 00:02:35,280
And it's going to put that file with the same name "reverse proxy.conf".

27
00:02:37,740 --> 00:02:44,460
I can execute this, "kubectl create -f configmap/nginx.yml" 

28
00:02:44,490 --> 00:02:48,380
I am also going to create the service.

29
00:02:48,390 --> 00:02:58,290
This service is just going to expose a nodePort

30
00:02:59,010 --> 00:02:59,960
"minikube service helloworld-nginx-service --url"

31
00:02:59,960 --> 00:03:05,250
Let's have a look whether my pod is running.

32
00:03:05,250 --> 00:03:09,620
It's all running.

33
00:03:09,780 --> 00:03:19,700
So, I can do "curl", I am going to add minus and some "vvvv", which is going to increase the verbosity,

34
00:03:19,700 --> 00:03:30,200
It is going to show me who is answering to these requests and it is nginx that is answering to my request

35
00:03:30,560 --> 00:03:35,950
and it is forwarding to my other container in this pod, because I'm getting a "Hello World" back.

36
00:03:36,000 --> 00:03:40,690
So, this is how I can put an nginx reverse proxy in front of my nodejs.

37
00:03:40,700 --> 00:03:46,510
So, let's have a look at this container itself, "kubectl"

38
00:03:48,000 --> 00:04:00,690
I want to execute something on my "helloworld-nginx" pod. And, I actually want to login into the container,

39
00:04:00,780 --> 00:04:05,570
because we have two containers I need to specify it now off "nginx" and I am going to execute the "bash".

40
00:04:05,780 --> 00:04:10,980
This is my container that nginx is running, 

41
00:04:11,040 --> 00:04:17,580
and now let's have a look, "/etc/nginx/conf.d/" 

42
00:04:18,000 --> 00:04:21,310
and here I have my "reverseproxy.conf".

43
00:04:21,420 --> 00:04:25,520
So, I wrote this config, this process, right? 

44
00:04:25,800 --> 00:04:35,000
And then it is forwarding this request to my nodejs, that means that at this point you could, for instance,

45
00:04:35,090 --> 00:04:42,930
enable SSL on your nginx it can handle the request for you on your nginx app.

46
00:04:42,930 --> 00:04:49,070
You could use the same system, for let's say PHP. You could have an nginx that then connects to another container that is

47
00:04:49,140 --> 00:04:51,080
then go to process the PHP for you.

48
00:04:51,210 --> 00:04:56,070
So then you have a container nginx, PHP, and then you also need separate configuration files.

49
00:04:56,070 --> 00:05:02,250
So you need to then configure some PHP directives, rather than directives for a proxy, for nodejs.

50
00:05:03,890 --> 00:05:11,740
ConfigMap allows you to inject configuration files to inject configuration data within your application.
