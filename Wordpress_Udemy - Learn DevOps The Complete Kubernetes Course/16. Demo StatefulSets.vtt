WEBVTT
1
1

00:00:00.220  -->  00:00:01.053
<v Speaker>In this demo,</v>
2

2

00:00:01.053  -->  00:00:03.410
I will show you how StatefulSets work.
3

3

00:00:03.410  -->  00:00:05.143
For this I'll use Cassandra.
4

4

00:00:07.250  -->  00:00:09.990
I am here in my git repository.
5

5

00:00:09.990  -->  00:00:11.953
It has an inquiry, statefulsets.
6

6

00:00:11.953  -->  00:00:16.953
I have a cluster running, using cops.
7

7

00:00:17.350  -->  00:00:19.490
With 4 nodes.
8

8

00:00:19.490  -->  00:00:22.483
3 nodes where I can get something on.
9

9

00:00:23.740  -->  00:00:25.570
I'm going to deploy Cassandra,
10

10

00:00:25.570  -->  00:00:27.940
and Cassandra is a database.
11

11

00:00:27.940  -->  00:00:31.410
You don't need to know much about it to deploy it.
12

12

00:00:31.410  -->  00:00:34.050
It's a database that needs static host names,
13

13

00:00:34.050  -->  00:00:37.040
so they need to find each other those nodes,
14

14

00:00:37.040  -->  00:00:39.720
otherwise it cannot work.
15

15

00:00:39.720  -->  00:00:41.120
And to be able to find each other,
16

16

00:00:41.120  -->  00:00:43.140
you need those static host names.
17

17

00:00:43.140  -->  00:00:45.597
But let me show you what's in the ML file.
18

18

00:00:45.597  -->  00:00:48.610
We have kind: stateful sets.
19

19

00:00:48.610  -->  00:00:50.490
We give it the name: cassandra.
20

20

00:00:50.490  -->  00:00:52.270
We want 3 nodes.
21

21

00:00:52.270  -->  00:00:53.820
Every node in Cassandra is the same.
22

22

00:00:53.820  -->  00:00:58.263
So it uses all the same docker image.
23

23

00:00:59.120  -->  00:01:01.650
The image that we're going to use coming from Google.
24

24

00:01:01.650  -->  00:01:04.932
It has a google example that includes Cassandra.
25

25

00:01:04.932  -->  00:01:06.543
We're going to use version 13.
26

26

00:01:08.070  -->  00:01:09.670
These are the ports are defined.
27

27

00:01:11.101  -->  00:01:16.101
So they're intranode ports, jmx for statistics,
28

28

00:01:17.600  -->  00:01:19.563
and cql for the client.
29

29

00:01:20.440  -->  00:01:21.560
We're going to give them limits,
30

30

00:01:21.560  -->  00:01:24.330
so we need 1 gigabyte of memory free
31

31

00:01:24.330  -->  00:01:27.760
to be able to run this box on nodes.
32

32

00:01:27.760  -->  00:01:30.370
We need 3 gigabytes in total to run this.
33

33

00:01:30.370  -->  00:01:33.022
That's why I added another node.
34

34

00:01:33.022  -->  00:01:36.320
It's 4 T2 small nodes, not T2 micro.
35

35

00:01:36.320  -->  00:01:39.250
So I have a total of 2 gigabytes per node
36

36

00:01:39.250  -->  00:01:40.250
that I can scale on.
37

37

00:01:41.650  -->  00:01:45.650
Secure context, we add the capability IPC_LOCK.
38

38

00:01:45.650  -->  00:01:47.920
So it's just going to give a little bit more privileges
39

39

00:01:47.920  -->  00:01:50.503
so that Cassandra can use IPC_LOCK.
40

40

00:01:52.023  -->  00:01:55.900
If we going to stop the pod, the Cassandra,
41

41

00:01:55.900  -->  00:01:58.410
then it will use the command nodetool drain
42

42

00:02:00.156  -->  00:02:01.100
to make sure that the data from that node
43

43

00:02:02.004  -->  00:02:02.903
goes first to the other two nodes.
44

44

00:02:04.450  -->  00:02:06.510
Then we have the environment,
45

45

00:02:06.510  -->  00:02:09.110
and this is just what Cassandra needs.
46

46

00:02:09.110  -->  00:02:11.920
It needs for instance the heap size,
47

47

00:02:11.920  -->  00:02:14.660
it's going to use half a gigabyte of memory.
48

48

00:02:14.660  -->  00:02:16.670
And then this is the most important,
49

49

00:02:16.670  -->  00:02:18.200
the Cassandra seeds.
50

50

00:02:18.200  -->  00:02:22.280
So where does every node need to go to for it's seed
51

51

00:02:23.200  -->  00:02:25.170
because they need to connect.
52

52

00:02:25.170  -->  00:02:27.600
We can have 10 nodes, we can have 100 nodes,
53

53

00:02:27.600  -->  00:02:30.630
but those, all those nodes need to contact one node.
54

54

00:02:30.630  -->  00:02:33.060
That will be called the seat node,
55

55

00:02:33.060  -->  00:02:35.560
and that seat node knows about the whole network.
56

56

00:02:35.560  -->  00:02:37.470
In this case, we're going to use Cassandra as 0,
57

57

00:02:37.470  -->  00:02:40.682
which is the first deployment, the first port.
58

58

00:02:40.682  -->  00:02:42.810
Over at Cassandra Cluster.
59

59

00:02:42.810  -->  00:02:45.540
And this we can do because we're using static host names.
60

60

00:02:45.540  -->  00:02:47.610
So we can use this static host name,
61

61

00:02:47.610  -->  00:02:51.111
Cassandra-0.cassandra, which is a service name,
62

62

00:02:51.111  -->  00:02:54.980
.default.sv.cluster.local.
63

63

00:02:54.980  -->  00:02:57.790
And this host name always stays like this.
64

64

00:02:57.790  -->  00:03:00.230
So this, when we use this host name,
65

65

00:03:00.230  -->  00:03:03.540
always reaches the first node in our cluster.
66

66

00:03:03.540  -->  00:03:04.820
And that is what the difference makes
67

67

00:03:04.820  -->  00:03:06.993
between a stateful set and a deployment.
68

68

00:03:07.890  -->  00:03:10.430
We give the name datacenter rack,
69

69

00:03:10.430  -->  00:03:12.780
and then we also pause the POD IP address,
70

70

00:03:12.780  -->  00:03:16.260
so that the image knows about the IP address
71

71

00:03:16.260  -->  00:03:17.093
that it's using.
72

72

00:03:18.250  -->  00:03:19.470
There's a readiness Probe,
73

73

00:03:19.470  -->  00:03:22.141
to see when the cassandra node is ready.
74

74

00:03:22.141  -->  00:03:24.677
This script is provided with the image.
75

75

00:03:24.677  -->  00:03:27.990
There is a initial delay of 15 seconds,
76

76

00:03:27.990  -->  00:03:30.392
and a timeout of 5 seconds.
77

77

00:03:30.392  -->  00:03:35.392
Going to mount the volume, so this is cassandra-data.
78

78

00:03:35.810  -->  00:03:37.810
Mount Path is /cassandra-data,
79

79

00:03:37.810  -->  00:03:40.130
so that's where we're going to find out data.
80

80

00:03:40.130  -->  00:03:42.820
And then we have the volume claim template,
81

81

00:03:42.820  -->  00:03:45.380
called cassandra-data.
82

82

00:03:45.380  -->  00:03:46.800
Read Write once,
83

83

00:03:46.800  -->  00:03:48.830
and the storage class is standard.
84

84

00:03:48.830  -->  00:03:52.040
And this is the storage class that we're going to provide.
85

85

00:03:52.040  -->  00:03:54.541
SO it's GP2 and eu-west-1a.
86

86

00:03:54.541  -->  00:03:57.920
8 gigabytes of storage per node.
87

87

00:03:57.920  -->  00:03:59.780
And we create a service.
88

88

00:03:59.780  -->  00:04:02.015
So this will be the cassandra service,
89

89

00:04:02.015  -->  00:04:05.920
name it cassandra, doesn't have a cluster IP.
90

90

00:04:05.920  -->  00:04:09.170
We'll have a port, 9042.
91

91

00:04:09.170  -->  00:04:11.900
And the selector is app: cassandra.
92

92

00:04:11.900  -->  00:04:14.250
So this will be the port we're going to use
93

93

00:04:14.250  -->  00:04:18.060
to connect to our cassandra cluster to use cql.
94

94

00:04:18.060  -->  00:04:23.060
Let's kubectl create this cassandra.
95

95

00:04:24.967  -->  00:04:29.967
And then we can immediately check our Pods.
96

96

00:04:31.459  -->  00:04:33.330
So we have now we start with cassandra-0,
97

97

00:04:33.330  -->  00:04:35.140
so this one is pending
98

98

00:04:35.140  -->  00:04:36.060
and we also see
99

99

00:04:37.340  -->  00:04:42.340
the volume so we can have volume here,
100

100

00:04:42.490  -->  00:04:46.175
cassandra-data-cassandra-0.
101

101

00:04:46.175  -->  00:04:48.390
We also have a claim.
102

102

00:04:48.390  -->  00:04:52.776
So if you do watch kubectl get pod.
103

103

00:04:52.776  -->  00:04:57.776
Then we can keep an eye on the launching of the pod.
104

104

00:04:57.890  -->  00:05:00.790
So first we'll have the first node, cassandra-0.
105

105

00:05:00.790  -->  00:05:04.080
This is the host name that we can't use in the config,
106

106

00:05:04.080  -->  00:05:05.860
that we will have cassandra-1.
107

107

00:05:05.860  -->  00:05:08.390
That cassandra-1 will contact cassandra-0
108

108

00:05:08.390  -->  00:05:11.810
to tell this cassandra-0 that it is alive,
109

109

00:05:11.810  -->  00:05:14.893
it is there, and then it will start creating a cluster.
110

110

00:05:15.820  -->  00:05:18.654
Now our first cassandra node is running.
111

111

00:05:18.654  -->  00:05:22.240
It's not ready yet, but it's initializing.
112

112

00:05:22.240  -->  00:05:27.240
First one is ready, so now the second one is creating,
113

113

00:05:27.246  -->  00:05:30.097
and the second one will contact the first one.
114

114

00:05:30.097  -->  00:05:35.097
And now the third one is creating,
115

115

00:05:35.480  -->  00:05:38.330
so we have two ones ready, and our third one is creating.
116

116

00:05:40.370  -->  00:05:41.953
So let's check again.
117

117

00:05:43.130  -->  00:05:47.317
Now all our pods are running for a couple of minutes now.
118

118

00:05:47.317  -->  00:05:52.317
And we should be able to do kubectl exec of cassandra-0.
119

119

00:05:55.969  -->  00:05:59.038
And we should be able to execute nodetool status.
120

120

00:05:59.038  -->  00:06:02.000
Which will give us the status.
121

121

00:06:02.000  -->  00:06:03.500
Don't worry about this error,
122

122

00:06:03.500  -->  00:06:05.090
it's just a temporary DNS error
123

123

00:06:05.090  -->  00:06:08.140
because my cluster is only just a couple of minutes old,
124

124

00:06:08.140  -->  00:06:12.393
so DNS is not yet propagated to our name service yet.
125

125

00:06:13.600  -->  00:06:18.600
Node tool status gives us UN, status up, state normal,
126

126

00:06:19.800  -->  00:06:22.800
of our three nodes.
127

127

00:06:22.800  -->  00:06:25.190
So those are three pods, and they're all working.
128

128

00:06:25.190  -->  00:06:29.130
They all have a part of D, data in cassandra.
129

129

00:06:29.130  -->  00:06:31.330
So we have the data and it's replicated.
130

130

00:06:31.330  -->  00:06:34.669
They communicate with each other, and they're all working.
131

131

00:06:34.669  -->  00:06:38.460
Let me just show you how it now works with the DNS lookup.
132

132

00:06:38.460  -->  00:06:41.428
So if you do bash,
133

133

00:06:41.428  -->  00:06:45.823
then we are now logged in to cassandra-0,
134

134

00:06:46.660  -->  00:06:51.660
and if you use ping cassandra-0.cassandra,
135

135

00:06:51.760  -->  00:06:55.910
we can ping the first one, the second one,
136

136

00:06:55.910  -->  00:06:58.840
and the third one.
137

137

00:06:58.840  -->  00:07:02.290
And in our three node cluster, these are static DNS names,
138

138

00:07:02.290  -->  00:07:06.063
so we will always be able to reach these nodes.
139

139

00:07:08.220  -->  00:07:10.865
Let's try to kill a pod.
140

140

00:07:10.865  -->  00:07:14.023
Kubectl delete pod cassandra-2.
141

141

00:07:16.499  -->  00:07:18.166
Cassandra-2 deleted,
142

142

00:07:20.570  -->  00:07:23.200
and this one will spin up a new pod.
143

143

00:07:23.200  -->  00:07:25.170
It will actually spin up the same pod.
144

144

00:07:25.170  -->  00:07:28.423
The same cassandra-2 will be spun up.
145

145

00:07:30.319  -->  00:07:33.967
Kubectl get pods.
146

146

00:07:33.967  -->  00:07:38.967
So you see, there's already a new one spinning up right now.
147

147

00:07:40.280  -->  00:07:43.490
Kubectl get pv, and you see,
148

148

00:07:43.490  -->  00:07:46.170
no new storage has been created,
149

149

00:07:46.170  -->  00:07:48.200
it's still the same storage that it uses.
150

150

00:07:48.200  -->  00:07:52.173
So it's still the same storage that was spin up earlier.
151

151

00:07:53.927  -->  00:07:58.927
And now it is running again with the same data.
152

152

00:07:59.550  -->  00:08:00.853
So if you do nodetool,
153

153

00:08:01.807  -->  00:08:05.880
we have again our three nodes in the cluster
154

154

00:08:05.880  -->  00:08:07.170
and they're all healthy.
155

155

00:08:07.170  -->  00:08:10.390
So it can recover, it can contact the nodes again.
156

156

00:08:10.390  -->  00:08:11.890
You have static host names,
157

157

00:08:11.890  -->  00:08:14.970
so you can use a stateful set if you have this database
158

158

00:08:14.970  -->  00:08:16.810
like cassandra, like classic search,
159

159

00:08:16.810  -->  00:08:18.060
that you need to run on kubernetes
160

160

00:08:18.060  -->  00:08:20.753
that need static host names and static volumes.
