WEBVTT
1
1

00:00:00.200  -->  00:00:01.033
<v Edward>In this section,</v>
2

2

00:00:01.033  -->  00:00:03.630
I'll be talking about Packaging and Deploying.
3

3

00:00:03.630  -->  00:00:05.680
I will cover Helm in this section,
4

4

00:00:05.680  -->  00:00:09.180
which has gained in importance enormously
5

5

00:00:09.180  -->  00:00:10.963
in the last Kubernetes releases.
6

6

00:00:12.020  -->  00:00:14.143
Let's start with an introduction to Helm.
7

7

00:00:15.280  -->  00:00:18.470
Helm is the best way to find, share,
8

8

00:00:18.470  -->  00:00:21.160
and use software built for Kubernetes.
9

9

00:00:21.160  -->  00:00:24.803
This is the official definition from helm.sh.
10

10

00:00:25.730  -->  00:00:29.370
Helm is a package manager for Kubernetes.
11

11

00:00:29.370  -->  00:00:32.800
It helps you to manage Kubernetes applications.
12

12

00:00:32.800  -->  00:00:35.260
Helm is maintained by the CNCF,
13

13

00:00:35.260  -->  00:00:37.670
the Cloud Native Computing Foundation,
14

14

00:00:37.670  -->  00:00:40.250
together with software like Kubernetes,
15

15

00:00:40.250  -->  00:00:42.433
Fluentd, Linkerd, and others.
16

16

00:00:43.340  -->  00:00:46.240
It is now maintained in collaboration with Microsoft,
17

17

00:00:46.240  -->  00:00:49.853
Google, Bitnami, and the Helm contributor community.
18

18

00:00:51.310  -->  00:00:52.410
To start using Helm,
19

19

00:00:52.410  -->  00:00:55.200
you first need to download the Helm client.
20

20

00:00:55.200  -->  00:00:57.630
You need to run helm init to initialize Helm
21

21

00:00:57.630  -->  00:00:59.283
on your Kubernetes cluster.
22

22

00:01:00.140  -->  00:01:02.663
This will install something that's called Tiller.
23

23

00:01:03.930  -->  00:01:06.280
Also, if you have RBAC installed
24

24

00:01:06.280  -->  00:01:09.570
and recent clusters have it enabled now by default,
25

25

00:01:09.570  -->  00:01:14.200
you will also need to add a ServiceAccount and RBAC rules.
26

26

00:01:14.200  -->  00:01:16.520
And that's what I'm going to show you in a demo.
27

27

00:01:16.520  -->  00:01:18.870
I have the ServiceAccount prepared
28

28

00:01:18.870  -->  00:01:20.300
and then I will initialize Helm
29

29

00:01:20.300  -->  00:01:22.700
and then you will see that it will install Tiller
30

30

00:01:22.700  -->  00:01:25.410
using this ServiceAccount.
31

31

00:01:25.410  -->  00:01:27.740
After this, Helm is ready for use
32

32

00:01:27.740  -->  00:01:29.773
and you can start installing charts.
33

33

00:01:31.480  -->  00:01:35.240
Helm uses a packaging format called charts.
34

34

00:01:35.240  -->  00:01:37.710
A chart is a collection of files that describe
35

35

00:01:37.710  -->  00:01:40.110
a set of Kubernetes resources.
36

36

00:01:40.110  -->  00:01:41.683
Think about YAML files.
37

37

00:01:42.680  -->  00:01:45.380
A single chart can deploy an app,
38

38

00:01:45.380  -->  00:01:47.233
a piece of software, or a database.
39

39

00:01:48.420  -->  00:01:49.910
It can have dependencies.
40

40

00:01:49.910  -->  00:01:52.630
For example, to install the Wordpress chart,
41

41

00:01:52.630  -->  00:01:54.890
you will need the MySQL chart.
42

42

00:01:54.890  -->  00:01:58.370
So, the Wordpress chart will depends on the MySQL chart.
43

43

00:01:58.370  -->  00:02:00.800
You can also write your own chart
44

44

00:02:00.800  -->  00:02:04.373
to deploy your application on Kubernetes using Helm.
45

45

00:02:06.100  -->  00:02:08.810
Charts use templates that are typically developed
46

46

00:02:08.810  -->  00:02:10.093
by a package maintainer.
47

47

00:02:11.340  -->  00:02:15.080
They will generate YAML files that Kubernetes understands.
48

48

00:02:15.080  -->  00:02:18.260
You can think of templates as dynamic YAML files,
49

49

00:02:18.260  -->  00:02:20.473
which can contain logic and variables.
50

50

00:02:21.780  -->  00:02:25.040
This is an example of a template within a chart.
51

51

00:02:25.040  -->  00:02:26.890
Here you can see we have a ConfigMap.
52

52

00:02:27.890  -->  00:02:30.380
In the ConfigMap, we have metadata defined
53

53

00:02:30.380  -->  00:02:32.123
and then we would use a variables.
54

54

00:02:33.180  -->  00:02:35.010
In this short example, we are using
55

55

00:02:35.010  -->  00:02:39.020
the Release.Name variable to name the ConfigMap
56

56

00:02:39.020  -->  00:02:41.950
and we also have some data in this ConfigMap.
57

57

00:02:41.950  -->  00:02:44.923
And for drink we defined Values.favoriteDrink.
58

58

00:02:45.980  -->  00:02:48.490
And the favoriteDrink value can then be overridden
59

59

00:02:48.490  -->  00:02:50.453
by the user when running helm install.
60

60

00:02:51.430  -->  00:02:53.500
Some of the variables have defaults
61

61

00:02:53.500  -->  00:02:56.390
or you don't have to touch, some of them you can override
62

62

00:02:56.390  -->  00:02:58.570
and then you can influence behavior
63

63

00:02:58.570  -->  00:03:02.680
of this application by overriding values.
64

64

00:03:02.680  -->  00:03:06.420
Think, for example, about the root password for MySQL
65

65

00:03:06.420  -->  00:03:10.300
or the login or the underlying storage.
66

66

00:03:10.300  -->  00:03:13.230
You can all override these values
67

67

00:03:13.230  -->  00:03:15.033
to influence the configuration.
68

68

00:03:16.930  -->  00:03:18.710
Let's go over some common commands
69

69

00:03:18.710  -->  00:03:20.310
and then I will show you a demo.
70

70

00:03:21.490  -->  00:03:23.500
Helm init and helm reset.
71

71

00:03:23.500  -->  00:03:25.840
Helm init installs Tiller on the cluster
72

72

00:03:25.840  -->  00:03:28.683
and helm reset removes Tiller from the cluster.
73

73

00:03:29.580  -->  00:03:31.990
Helm install installs a Helm chart
74

74

00:03:31.990  -->  00:03:35.710
so this is what you're going to use to install something.
75

75

00:03:35.710  -->  00:03:37.923
Helm search to search for a chart.
76

76

00:03:39.180  -->  00:03:42.040
Helm list to list the installed charts,
77

77

00:03:42.040  -->  00:03:45.050
the releases it's called in Helm terminology.
78

78

00:03:45.050  -->  00:03:47.990
Helm upgrade to upgrade a release.
79

79

00:03:47.990  -->  00:03:50.140
And helm rollback to rollback the release
80

80

00:03:50.140  -->  00:03:51.320
to the previous version.
81

81

00:03:51.320  -->  00:03:53.940
So, with Helm, you can install a package
82

82

00:03:53.940  -->  00:03:55.820
but then later on you can upgrade it
83

83

00:03:55.820  -->  00:03:58.520
and if the upgrade doesn't work, you can roll it back.
