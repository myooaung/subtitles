WEBVTT
1
1

00:00:00.210  -->  00:00:02.110
<v Edward>Let's talk about Pod State.</v>
2

2

00:00:02.980  -->  00:00:04.560
In this lecture I'll walk you through
3

3

00:00:04.560  -->  00:00:08.550
the different statuses and states of a pod and a container.
4

4

00:00:08.550  -->  00:00:10.980
I will talk about the pod status field,
5

5

00:00:10.980  -->  00:00:13.550
which gives you high level status;
6

6

00:00:13.550  -->  00:00:16.900
the pod condition, which is the condition of the pod;
7

7

00:00:16.900  -->  00:00:20.473
and the container state, the state of the containers itself.
8

8

00:00:21.330  -->  00:00:22.740
I will then show you the lifecycle
9

9

00:00:22.740  -->  00:00:24.853
of a pod in the next lecture.
10

10

00:00:25.830  -->  00:00:28.270
Pods have a status field, which you see
11

11

00:00:28.270  -->  00:00:30.730
when you do kubectl get pods.
12

12

00:00:30.730  -->  00:00:32.393
Here you see the status field.
13

13

00:00:33.760  -->  00:00:37.690
In this scenario all pods are in the running status.
14

14

00:00:37.690  -->  00:00:41.210
This means that the pod has been bound to a node.
15

15

00:00:41.210  -->  00:00:42.872
All containers have been created,
16

16

00:00:42.872  -->  00:00:45.560
and at least one container is still running,
17

17

00:00:45.560  -->  00:00:48.200
or is starting or restarting.
18

18

00:00:48.200  -->  00:00:52.040
Other valid statuses are pending, the pod
19

19

00:00:52.040  -->  00:00:53.903
has been accepted but is not running.
20

20

00:00:54.830  -->  00:00:57.730
This happens when the container image is still downloading,
21

21

00:00:57.730  -->  00:00:59.830
so if you have a slow network connection,
22

22

00:00:59.830  -->  00:01:01.380
this can actually take up time.
23

23

00:01:02.240  -->  00:01:03.563
If the pod cannot be scheduled
24

24

00:01:03.563  -->  00:01:05.740
because of resource constraints,
25

25

00:01:05.740  -->  00:01:07.950
it'll also be in this status.
26

26

00:01:07.950  -->  00:01:10.720
So let's say that you don't have enough CPU or memory
27

27

00:01:10.720  -->  00:01:14.520
any more, then this pod will stay in pending status,
28

28

00:01:14.520  -->  00:01:17.210
and you will have to investigate, for example,
29

29

00:01:17.210  -->  00:01:20.200
using kubectl describe, to see the events
30

30

00:01:20.200  -->  00:01:22.823
to know why exactly the pod is not scheduled.
31

31

00:01:23.710  -->  00:01:26.190
Succeeded; all containers within this pod
32

32

00:01:26.190  -->  00:01:29.950
have been terminated successfully and will not be restarted.
33

33

00:01:29.950  -->  00:01:31.840
Failed; all containers within this pod
34

34

00:01:31.840  -->  00:01:33.980
have been terminated, and at least one container
35

35

00:01:33.980  -->  00:01:36.000
returned a failure code.
36

36

00:01:36.000  -->  00:01:38.770
The failure code is the exit code of the process
37

37

00:01:38.770  -->  00:01:40.740
when a container terminates.
38

38

00:01:40.740  -->  00:01:43.560
So exit code zero means okay,
39

39

00:01:43.560  -->  00:01:47.050
and all other exit codes are a failure.
40

40

00:01:47.050  -->  00:01:49.360
Also you can have unknown, the state
41

41

00:01:49.360  -->  00:01:51.660
of the pod couldn't be determined.
42

42

00:01:51.660  -->  00:01:54.180
A network error might have been occurred;
43

43

00:01:54.180  -->  00:01:57.650
for example, the node where the pod is running on is down.
44

44

00:01:57.650  -->  00:02:00.033
So these are the pod statuses.
45

45

00:02:00.900  -->  00:02:02.520
You can get the pod conditions
46

46

00:02:02.520  -->  00:02:05.693
using kubectl describe pod and the name of the pod.
47

47

00:02:07.230  -->  00:02:10.340
So here we do a kubectl describe of a pod,
48

48

00:02:10.340  -->  00:02:13.583
or the API server in the name space kube system.
49

49

00:02:14.470  -->  00:02:18.550
These pod conditions are conditions which a pod has passed,
50

50

00:02:18.550  -->  00:02:22.493
in this example initialized, ready, and pod scheduled.
51

51

00:02:24.200  -->  00:02:27.220
There are five different types of pod conditions.
52

52

00:02:27.220  -->  00:02:30.520
PodScheduled, the pod has been scheduled to a node.
53

53

00:02:30.520  -->  00:02:33.470
Ready, pod can serve requests and is going
54

54

00:02:33.470  -->  00:02:36.120
to be added to matching services.
55

55

00:02:36.120  -->  00:02:38.480
Initialized, the initialization containers
56

56

00:02:38.480  -->  00:02:40.030
have been started successfully.
57

57

00:02:41.290  -->  00:02:44.050
I will talk about these initialization containers
58

58

00:02:44.050  -->  00:02:47.460
in the next lecture when we go over the lifecycle.
59

59

00:02:47.460  -->  00:02:50.280
Unschedulable, the pod cannot be scheduled,
60

60

00:02:50.280  -->  00:02:54.090
for example due to resource constraints.
61

61

00:02:54.090  -->  00:02:58.483
And ContainersReady, all containers in the pod are ready.
62

62

00:02:59.510  -->  00:03:01.483
There is also a container state.
63

63

00:03:02.420  -->  00:03:05.750
You can get the container state using kubectl get pod,
64

64

00:03:05.750  -->  00:03:09.160
on-putting using yaml, so you can see all the data
65

65

00:03:09.160  -->  00:03:12.130
that is available for a pod, and here you have
66

66

00:03:12.130  -->  00:03:14.870
the container statuses, you have some information
67

67

00:03:14.870  -->  00:03:16.700
about the container, and then here in bold
68

68

00:03:16.700  -->  00:03:18.630
you have the state, and the state
69

69

00:03:18.630  -->  00:03:20.680
of this container is running.
70

70

00:03:20.680  -->  00:03:23.232
So this comes from docker itself, so docker reports
71

71

00:03:23.232  -->  00:03:24.913
that this container is running.
72

72

00:03:26.000  -->  00:03:29.163
The container state can be running, terminated, or waiting.
