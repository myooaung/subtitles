WEBVTT
1
00:00:00.510 --> 00:00:05.060
This demo is really a continuation of the previous demo.

2
00:00:05.220 --> 00:00:06.770
It just became too long.

3
00:00:06.960 --> 00:00:09.080
So I split it up. 

4
00:00:09.090 --> 00:00:16.440
In this demo I'm going to show you some useful "kubectl" commands. 

5
00:00:16.440 --> 00:00:17.300
Some more commands I can use "kubectl attach"

6
00:00:17.840 --> 00:00:18.950
And then the pod name

7
00:00:22.490 --> 00:00:27.630
this attaches to our running process, but our process is just running.

8
00:00:27.710 --> 00:00:32.230
So, we're not going to see much here. If our process would output some log

9
00:00:32.240 --> 00:00:33.730
We would see two logs here.

10
00:00:34.990 --> 00:00:37.980
We can also execute something in that container

11
00:00:38.080 --> 00:00:41.640
So, we can use "kubectl exec" to execute a command.

12
00:00:41.680 --> 00:00:45.470
So, let's say that we use "ls /app"

13
00:00:45.630 --> 00:00:48.330
That's what is in our "/" folder.

14
00:00:48.780 --> 00:00:54.380
So, this is a list of the files of "/app" in the running container.

15
00:00:54.660 --> 00:01:07.870
If a file was created here using for instance, "touch /app/test.txt", this "test.txt" will disappear if this container is killed.

16
00:01:08.100 --> 00:01:15.520
That's what I meant earlier with the date of container is never persistent,

17
00:01:15.660 --> 00:01:18.030
It just disappears when the container is stopped.

18
00:01:18.240 --> 00:01:24.600
You need to use volumes, which we will see much later if you want data to be persisted over time.

19
00:01:26.420 --> 00:01:30.320
There's still one comment that I want to show you.

20
00:01:30.400 --> 00:01:31.430
First, I want to show you the service 

21
00:01:34.110 --> 00:01:45.720
So, I'm going to do "kubectl describe nodehelloworld-service"

22
00:01:45.720 --> 00:01:50.470
So, it has a label, it was exposed as a "NodePort"

23
00:01:50.580 --> 00:01:52.580
It has an IP address.

24
00:01:52.650 --> 00:01:58.780
So, this is an endpoint that is exposed, we could connect to from another pod.

25
00:01:58.950 --> 00:02:04.470
You can either use this endpoint or we could use a "NodePort", because "NodePort" is a static port that will be always accessible 

26
00:02:04.470 --> 00:02:08.010
I am going to use this endpoint now.

27
00:02:08.040 --> 00:02:08.610
So, I am just going to copy and paste this

28
00:02:10.610 --> 00:02:16.910
And what are we going to do is we going to launch another pod with this "busybox", we are going to use "image=busybox".

29
00:02:17.370 --> 00:02:22.870
And we are going to execute a shell and this is going to create a new pod with a new container.

30
00:02:23.950 --> 00:02:29.400
And then we can just execute comments on our Kubernetes cluster.

31
00:02:29.410 --> 00:02:36.910
I don't have "curl" here so I'm going to "telnet" to this endpoint of my "nodehelloworld-service".

32
00:02:39.580 --> 00:02:44.730
And then I'm going to see "GET /"

33
00:02:44.770 --> 00:02:45.200
I get a "200 OK" back.

34
00:02:45.230 --> 00:02:49.020
And this is my express over.

35
00:02:49.170 --> 00:02:50.450
So, it says, "Hello World!".

36
00:02:50.450 --> 00:02:55.990
So this is another way of connecting to the pod from within the cluster not within the same pods

37
00:02:56.000 --> 00:03:00.280
Because then I could actually just connect to a local host port 3000.

38
00:03:00.490 --> 00:03:08.670
If it was a container in the same pod and this is another pod, and then I can use this endpoint and connect to the to this pod still.

39
00:03:08.850 --> 00:03:13.980
Later on I will talk about services discovery and DNS.

40
00:03:14.010 --> 00:03:17.730
And we are not going to use these manual endpoints. But for now for now

41
00:03:17.730 --> 00:03:19.750
I just want to show you what is possible.

42
00:03:20.670 --> 00:03:27.330
In the next lecture, I will show you how to export a service that uses the LoadBalancer on AWS.
