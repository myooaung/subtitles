WEBVTT
1
1

00:00:00.380  -->  00:00:02.070
<v Instructor>In this lecture, I'll be talking about</v>
2

2

00:00:02.070  -->  00:00:04.233
Interpod Affinity and anti-affinity.
3

3

00:00:05.610  -->  00:00:08.390
This mechanism allow you to influence scheduling
4

4

00:00:08.390  -->  00:00:10.280
based on the labels of other pods
5

5

00:00:10.280  -->  00:00:12.603
that are already running on the cluster.
6

6

00:00:13.490  -->  00:00:16.500
Pods belong to a namespace, so your affinity rules
7

7

00:00:16.500  -->  00:00:19.380
will apply to a specific namespace.
8

8

00:00:19.380  -->  00:00:21.850
If no namespace is given in specification,
9

9

00:00:21.850  -->  00:00:23.850
it defaults to the namespace of the pod.
10

10

00:00:24.850  -->  00:00:26.510
Similar to node affinity,
11

11

00:00:26.510  -->  00:00:30.340
you have two types of pod affinity and anti affinity.
12

12

00:00:30.340  -->  00:00:34.089
You have the requiredDuringSchedulingIgnoredDuringExecution,
13

13

00:00:34.089  -->  00:00:38.574
and the preferredDuringSchedulingIgnoredDuringExecution.
14

14

00:00:38.574  -->  00:00:40.840
The required type, the first one, creates rules
15

15

00:00:40.840  -->  00:00:43.700
that must be met for the pod to be scheduled,
16

16

00:00:43.700  -->  00:00:45.780
the preferred type is a soft type,
17

17

00:00:45.780  -->  00:00:47.283
and the rules may be met.
18

18

00:00:48.260  -->  00:00:50.680
So in the preferred type, the pods should always
19

19

00:00:50.680  -->  00:00:52.860
be scheduled in the first one.
20

20

00:00:52.860  -->  00:00:55.090
If the rules are not met,
21

21

00:00:55.090  -->  00:00:56.840
then the pod will not be scheduled.
22

22

00:00:58.000  -->  00:00:59.960
So Interpod Affinity and anti-affinity
23

23

00:00:59.960  -->  00:01:03.233
is very similar to the node affinity and anti-affinity,
24

24

00:01:04.240  -->  00:01:07.940
just that here we do it not pod level in a namespace,
25

25

00:01:07.940  -->  00:01:09.373
instead of a node level.
26

26

00:01:10.570  -->  00:01:13.753
A good use case for pod affinity is co-located pods.
27

27

00:01:15.290  -->  00:01:17.890
You might want that one pod is always co-located
28

28

00:01:17.890  -->  00:01:20.860
on the same node with another pod.
29

29

00:01:20.860  -->  00:01:24.340
For example, you have an app that uses redis as a cache,
30

30

00:01:24.340  -->  00:01:27.210
and you want to have the redis pod always
31

31

00:01:27.210  -->  00:01:29.453
on the same node as the app itself.
32

32

00:01:30.480  -->  00:01:32.660
Another use case is to co-locate pods
33

33

00:01:32.660  -->  00:01:34.930
within the same availability zone.
34

34

00:01:34.930  -->  00:01:37.210
So either same as a previous use case,
35

35

00:01:37.210  -->  00:01:39.340
but rather than on the machine basis,
36

36

00:01:39.340  -->  00:01:42.400
you can do it on an availability zone basis.
37

37

00:01:42.400  -->  00:01:43.850
So then the pods are co-located
38

38

00:01:43.850  -->  00:01:45.190
within the same availability zone.
39

39

00:01:45.190  -->  00:01:46.580
If you have multiple zones,
40

40

00:01:46.580  -->  00:01:50.120
then these pods will only be scheduled within one zone.
41

41

00:01:50.120  -->  00:01:52.810
When writing your pod affinity and anti-affinity rules,
42

42

00:01:52.810  -->  00:01:55.310
you need to specify a topology domain,
43

43

00:01:55.310  -->  00:01:57.483
called topologyKey in the rules.
44

44

00:01:58.740  -->  00:02:01.773
The topologyKey refers to a node label.
45

45

00:02:02.920  -->  00:02:04.880
If the affinity rule matches,
46

46

00:02:04.880  -->  00:02:08.060
the new pod will only be scheduled on the nodes
47

47

00:02:08.060  -->  00:02:10.400
that have the same topologyKey value
48

48

00:02:10.400  -->  00:02:11.750
as the current running pod.
49

49

00:02:12.620  -->  00:02:15.170
This is a bit hard to understand without an example,
50

50

00:02:15.170  -->  00:02:16.853
so let me show you an example.
51

51

00:02:18.080  -->  00:02:19.700
Here we have two nodes,
52

52

00:02:19.700  -->  00:02:23.291
and we have one pod on our Node2 called pod,
53

53

00:02:23.291  -->  00:02:26.233
and it has a label app with a value myapp.
54

54

00:02:27.600  -->  00:02:30.720
You want to schedule a new pod on the left here
55

55

00:02:30.720  -->  00:02:33.123
that has the label app equals redis.
56

56

00:02:34.320  -->  00:02:37.230
This pod has this in it's specification.
57

57

00:02:37.230  -->  00:02:38.765
It has podAffinity
58

58

00:02:38.765  -->  00:02:41.820
requiredDuringSchedulingIgnoredDuringExecution,
59

59

00:02:41.820  -->  00:02:43.770
it has a labelSelector,
60

60

00:02:43.770  -->  00:02:48.240
and the matchExpressions is app in myapp.
61

61

00:02:48.240  -->  00:02:50.800
So it's going to match this app here,
62

62

00:02:50.800  -->  00:02:52.910
this pod here on the right,
63

63

00:02:52.910  -->  00:02:56.173
and when it matches, then the topologyKey is imported.
64

64

00:02:57.610  -->  00:03:01.470
Here we access the topologyKey is kubernetes.io/hostname.
65

65

00:03:01.470  -->  00:03:03.870
So there's a hostname over the node.
66

66

00:03:03.870  -->  00:03:06.140
So if the expression matches,
67

67

00:03:06.140  -->  00:03:08.670
then this pod will be scheduled on the node
68

68

00:03:08.670  -->  00:03:11.780
that has the same topologyKey value.
69

69

00:03:11.780  -->  00:03:13.896
So the value of kubernetes.io/hostname
70

70

00:03:13.896  -->  00:03:18.480
is Node2 in this case, so this pod will only be scheduled
71

71

00:03:18.480  -->  00:03:21.790
on a node that has this label
72

72

00:03:21.790  -->  00:03:24.730
kubernetes.io/hostname equals Node2,
73

73

00:03:24.730  -->  00:03:27.050
and this is only one hostname,
74

74

00:03:27.050  -->  00:03:28.663
so that's gonna be Node2.
75

75

00:03:30.660  -->  00:03:34.323
So then the new pod is scheduled on Node2, and not on Node1.
76

76

00:03:36.540  -->  00:03:38.140
Let me show you another example.
77

77

00:03:39.490  -->  00:03:40.740
Here we have three nodes.
78

78

00:03:40.740  -->  00:03:43.876
Node1 and 2 are in eu-west-1a,
79

79

00:03:43.876  -->  00:03:47.840
and Node3 is in eu-west-1b.
80

80

00:03:47.840  -->  00:03:50.750
So the first two are in the same zone.
81

81

00:03:50.750  -->  00:03:52.940
We want to schedule a new pod, this has a label
82

82

00:03:52.940  -->  00:03:57.100
app equals db, and pod affinity is exactly the same
83

83

00:03:57.100  -->  00:04:00.040
as the previous one, except the last line.
84

84

00:04:00.040  -->  00:04:02.310
In last line, we say topologyKey is the
85

85

00:04:02.310  -->  00:04:05.343
failure-domain.beta.kubernetes.io/zone.
86

86

00:04:06.550  -->  00:04:10.800
So here, if our expression is true the expression is here
87

87

00:04:10.800  -->  00:04:14.730
app in myapp, so if there's a pod app equals myapp,
88

88

00:04:14.730  -->  00:04:18.520
and it is true, then this new pod will be scheduled
89

89

00:04:18.520  -->  00:04:20.410
on a node with a label
90

90

00:04:21.470  -->  00:04:25.470
failure-domain.beta.kubernetes.io/zone equals
91

91

00:04:25.470  -->  00:04:29.620
the same as a node where the pod is running on.
92

92

00:04:29.620  -->  00:04:33.170
So pod app equals myapp is running on Node2.
93

93

00:04:33.170  -->  00:04:35.913
Node2 has a zone eu-west-1a,
94

94

00:04:35.913  -->  00:04:38.340
so the new pod is going to be scheduled either on
95

95

00:04:38.340  -->  00:04:42.863
Node1 or either on Node2, but never on Node3.
96

96

00:04:44.640  -->  00:04:46.800
So, if you have replication by Node2,
97

97

00:04:46.800  -->  00:04:50.750
then the chances are high that one gets scheduled on Node1,
98

98

00:04:50.750  -->  00:04:52.290
and one gets scheduled on Node2.
99

99

00:04:52.290  -->  00:04:53.633
So never on Node3.
100

100

00:04:55.060  -->  00:04:58.573
So this is a difference with the topologyKey.
101

101

00:05:00.350  -->  00:05:01.810
Contrary to affinity,
102

102

00:05:01.810  -->  00:05:05.130
you might want to use pod anti-affinity.
103

103

00:05:05.130  -->  00:05:07.060
You can use anti-affinity to make sure a pod
104

104

00:05:07.060  -->  00:05:10.263
is only scheduled once on a node for example.
105

105

00:05:11.700  -->  00:05:13.600
For example we have three nodes,
106

106

00:05:13.600  -->  00:05:15.580
and you want to schedule two pods,
107

107

00:05:15.580  -->  00:05:18.030
but they shouldn't be scheduled on the same node.
108

108

00:05:19.268  -->  00:05:22.320
Pod anti-affinity allows you to create a rule that says
109

109

00:05:22.320  -->  00:05:26.433
to not schedule on the same host if a pod label matches.
110

110

00:05:28.190  -->  00:05:29.790
So here we have again two nodes.
111

111

00:05:30.636  -->  00:05:33.067
We have a pod running, which is app equals myapp,
112

112

00:05:33.067  -->  00:05:35.650
and we're going to schedule a new pod
113

113

00:05:35.650  -->  00:05:37.283
with the label app equals db.
114

114

00:05:38.170  -->  00:05:41.490
Now we're going to use pod anti-affinity in a specification,
115

115

00:05:41.490  -->  00:05:43.230
the expression is still app in myapp.
116

116

00:05:43.230  -->  00:05:46.372
So it'll match the current running pod,
117

117

00:05:46.372  -->  00:05:49.270
and the topologyKey is the hostname.
118

118

00:05:49.270  -->  00:05:53.220
Because it is anti-affinity, it will not schedule
119

119

00:05:53.220  -->  00:05:56.400
when the expression matches on the same hostname.
120

120

00:05:56.400  -->  00:05:57.690
So where does it go?
121

121

00:05:57.690  -->  00:06:00.360
It goes to Node1, because Node1
122

122

00:06:00.360  -->  00:06:02.763
has a different hostname than Node2.
123

123

00:06:04.630  -->  00:06:07.433
So this is basically just a reverse of pod affinity.
124

124

00:06:07.433  -->  00:06:10.780
Anti-affinity make sure that it doesn't get scheduled
125

125

00:06:10.780  -->  00:06:13.633
on the node with the same topologyKey value.
126

126

00:06:15.200  -->  00:06:16.800
When writing pod affinity rules,
127

127

00:06:16.800  -->  00:06:20.750
you can use the following operators: In, NotIn.
128

128

00:06:20.750  -->  00:06:24.377
Does the label have one of the values that you specify?
129

129

00:06:24.377  -->  00:06:26.360
And Exists, DoesNotExist.
130

130

00:06:26.360  -->  00:06:27.773
Does a label exist or not?
131

131

00:06:29.260  -->  00:06:31.060
Interpod affinity and anti-affinity
132

132

00:06:31.060  -->  00:06:33.903
currently requires a substantial amount of processing.
133

133

00:06:34.800  -->  00:06:36.500
You might have to take this into account
134

134

00:06:36.500  -->  00:06:39.340
if you have a lot of rules and a large cluster.
135

135

00:06:39.340  -->  00:06:42.200
For example, if you have more than 100 nodes.
136

136

00:06:42.200  -->  00:06:43.830
And then, in the next demo, I will show you
137

137

00:06:43.830  -->  00:06:46.893
an example of Interpod Affinity and anti-affinity.
