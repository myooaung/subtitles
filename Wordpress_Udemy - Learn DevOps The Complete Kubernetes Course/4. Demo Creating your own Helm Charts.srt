1
1

00:00:00,150  -->  00:00:00,983
<v Edward>In this demo,</v>
2

2

00:00:00,983  -->  00:00:03,273
I will show you what Helm Create does.
3

3

00:00:05,410  -->  00:00:07,020
I'm in my Helm directory, but you can be
4

4

00:00:07,020  -->  00:00:09,000
in any directory that you want,
5

5

00:00:09,000  -->  00:00:11,400
and I'm just going to enter helm create mychart.
6

6

00:00:14,190  -->  00:00:17,147
Creating my chart is create directory mychart
7

7

00:00:18,030  -->  00:00:20,450
and it created the files and directories
8

8

00:00:20,450  -->  00:00:22,270
that I showed you in the slides.
9

9

00:00:22,270  -->  00:00:24,680
It also directory charts, which is empty,
10

10

00:00:24,680  -->  00:00:26,250
where you can place all the charts in
11

11

00:00:26,250  -->  00:00:28,960
that are dependencies of this chart.
12

12

00:00:28,960  -->  00:00:30,580
I will show you that in the next demo,
13

13

00:00:30,580  -->  00:00:32,323
when I show you a real chart.
14

14

00:00:33,850  -->  00:00:36,580
So chart.yaml is exactly the same
15

15

00:00:36,580  -->  00:00:38,210
as I showed you in the slides.
16

16

00:00:38,210  -->  00:00:41,193
But values.yamls is already a little bit more filled out.
17

17

00:00:42,090  -->  00:00:45,220
Here, these are default values for my chart.
18

18

00:00:45,220  -->  00:00:48,450
This is a YAML format file, and you can just declare
19

19

00:00:48,450  -->  00:00:51,250
the variables to be passed into your templates.
20

20

00:00:51,250  -->  00:00:52,810
So for example, the replica counts,
21

21

00:00:52,810  -->  00:00:54,970
how many pods do you want to run?
22

22

00:00:54,970  -->  00:00:57,890
This is then passed to the deployments YAML file,
23

23

00:00:57,890  -->  00:01:02,710
the image, which has tag stable, the pull policy,
24

24

00:01:02,710  -->  00:01:06,560
the service, the type of a service and port of a service.
25

25

00:01:06,560  -->  00:01:11,160
You can also use ingress, and then you have just some
26

26

00:01:11,160  -->  00:01:12,410
resources, node selector,
27

27

00:01:12,410  -->  00:01:14,840
and tolerations, and affinity defined,
28

28

00:01:14,840  -->  00:01:17,660
that you could use, but are still empty.
29

29

00:01:17,660  -->  00:01:20,210
Let's have a look at how those templates are built.
30

30

00:01:21,400  -->  00:01:23,113
I'm going to CD in templates,
31

31

00:01:24,030  -->  00:01:27,180
and here I have deployment.yaml, for example.
32

32

00:01:27,180  -->  00:01:31,033
And this is a deployment YAML for nginx, in this example.
33

33

00:01:33,440  -->  00:01:36,083
API version apps, if you want beta too,
34

34

00:01:36,083  -->  00:01:39,260
it's a deployment, and then the metadata
35

35

00:01:39,260  -->  00:01:43,000
is going to use a template, my chart full name.
36

36

00:01:43,000  -->  00:01:44,803
So the full name of the chart.
37

37

00:01:45,850  -->  00:01:47,743
Whenever it refers to a template,
38

38

00:01:47,743  -->  00:01:52,313
then it comes from _helpers.tpl.
39

39

00:01:54,030  -->  00:01:56,793
Here is the my chart full name defined,
40

40

00:01:57,650  -->  00:02:00,810
and we referred to my chart full name
41

41

00:02:00,810  -->  00:02:02,760
using the keyword template here.
42

42

00:02:02,760  -->  00:02:04,330
Here it is defined.
43

43

00:02:04,330  -->  00:02:09,330
We can override this full name using our values,
44

44

00:02:09,530  -->  00:02:11,530
our values.yaml, if we'd like
45

45

00:02:11,530  -->  00:02:14,893
to override the name of this deployment.
46

46

00:02:15,850  -->  00:02:18,570
Otherwise it's going to have a unique name
47

47

00:02:18,570  -->  00:02:20,190
that Helm is going to pick.
48

48

00:02:20,190  -->  00:02:21,470
So there's a little bit of code here
49

49

00:02:21,470  -->  00:02:25,633
to make sure that we have a fully-qualified app name.
50

50

00:02:26,820  -->  00:02:30,680
It also says that we truncate at 63 characters,
51

51

00:02:30,680  -->  00:02:33,160
because Kubernetes name fields are limited to this
52

52

00:02:33,160  -->  00:02:34,860
because of the DNS naming.
53

53

00:02:34,860  -->  00:02:37,550
Otherwise service discovery might not work.
54

54

00:02:37,550  -->  00:02:39,100
If the release name contains a chart name,
55

55

00:02:39,100  -->  00:02:40,990
it will be used as a full name.
56

56

00:02:40,990  -->  00:02:43,460
That's what this piece of code does.
57

57

00:02:43,460  -->  00:02:46,203
You will just see that it will have a unique name.
58

58

00:02:47,200  -->  00:02:50,540
This very default, don't worry too much about this.
59

59

00:02:50,540  -->  00:02:53,030
We are just using some variables from the templates.
60

60

00:02:53,030  -->  00:02:56,510
You will see those filled out once they are deployed.
61

61

00:02:56,510  -->  00:03:00,670
We have done the labels, and the app, and the chart,
62

62

00:03:00,670  -->  00:03:03,570
the release, and we also have heritage,
63

63

00:03:03,570  -->  00:03:05,933
which is just the service.
64

64

00:03:07,260  -->  00:03:08,480
Here it's done something interesting.
65

65

00:03:08,480  -->  00:03:12,040
If the values replica count, so if you split again
66

66

00:03:12,040  -->  00:03:13,600
our screen, and we open values,
67

67

00:03:13,600  -->  00:03:15,250
and here we have the replica count.
68

68

00:03:15,250  -->  00:03:18,713
So this is dot values replica count that we use.
69

69

00:03:19,790  -->  00:03:23,290
These are the values that come from this file.
70

70

00:03:23,290  -->  00:03:24,570
Release name and release service
71

71

00:03:24,570  -->  00:03:26,850
are just names that you can use.
72

72

00:03:26,850  -->  00:03:28,040
Whenever you use dot values,
73

73

00:03:28,040  -->  00:03:29,813
it refers to the values YAML file.
74

74

00:03:30,810  -->  00:03:34,710
A little bit further, here we have the container
75

75

00:03:36,259  -->  00:03:37,600
values image repository values image tag
76

76

00:03:38,657  -->  00:03:39,490
to make sure that you use
77

77

00:03:39,490  -->  00:03:42,020
the image repository and the image tag.
78

78

00:03:42,020  -->  00:03:44,970
The image pull policy, here we can change the port
79

79

00:03:44,970  -->  00:03:47,653
if necessary, just like a normal deployment.
80

80

00:03:49,070  -->  00:03:51,900
And then here we have the node selector,
81

81

00:03:51,900  -->  00:03:56,580
affinity, and tolerations that, again, refers to the values.
82

82

00:03:58,240  -->  00:03:59,120
But they are empty,
83

83

00:03:59,120  -->  00:04:01,883
so they will also be empty when we deploy them.
84

84

00:04:02,940  -->  00:04:04,140
What else, ingress.yaml.
85

85

00:04:05,360  -->  00:04:07,280
If values ingress is enabled,
86

86

00:04:07,280  -->  00:04:12,180
by default it is disabled, or ingress enabled false.
87

87

00:04:12,180  -->  00:04:14,260
So this will not be executed, then.
88

88

00:04:14,260  -->  00:04:16,350
So you can use and if to make sure
89

89

00:04:16,350  -->  00:04:19,130
that parts of it will not be executed.
90

90

00:04:19,130  -->  00:04:22,870
We are not going to use ingress, so just leave like that.
91

91

00:04:22,870  -->  00:04:25,533
Service.yaml, we need a service.
92

92

00:04:26,370  -->  00:04:29,700
Here again we also the my chart full name.
93

93

00:04:29,700  -->  00:04:33,020
Port is again coming from the service, and the type as well.
94

94

00:04:33,020  -->  00:04:35,900
So you can specify your type in the service,
95

95

00:04:35,900  -->  00:04:38,270
whether you want just a cluster IP,
96

96

00:04:38,270  -->  00:04:39,963
or lobe answer, or node port.
97

97

00:04:41,610  -->  00:04:44,720
When we deploy it, then it will also show the nodes.txt.
98

98

00:04:44,720  -->  00:04:48,530
So the nodes.txt is also a template.
99

99

00:04:48,530  -->  00:04:51,100
And this can help us to show to the end user
100

100

00:04:51,100  -->  00:04:53,663
how to contact the deployed app.
101

101

00:04:54,570  -->  00:04:56,130
We are going to use a cluster IP,
102

102

00:04:56,130  -->  00:04:58,460
so else if contains cluster IP,
103

103

00:04:58,460  -->  00:05:00,980
values service type, so you will see this.
104

104

00:05:00,980  -->  00:05:05,550
How to contact the ports, it's a export pod name.
105

105

00:05:05,550  -->  00:05:06,477
So you have the pod name,
106

106

00:05:06,477  -->  00:05:08,793
and you're going to port forward the pod name.
107

107

00:05:10,690  -->  00:05:12,390
How to deploy something like this?
108

108

00:05:14,120  -->  00:05:17,270
Helm install and then the name of the directory,
109

109

00:05:17,270  -->  00:05:20,100
or just dot if you are in the name of the current directory.
110

110

00:05:20,100  -->  00:05:21,920
So let me install this example.
111

111

00:05:21,920  -->  00:05:23,373
Helm install my chart.
112

112

00:05:24,258  -->  00:05:25,870
It's deployed.
113

113

00:05:25,870  -->  00:05:29,140
The unique name assigned by Helm is ringed-wolverine,
114

114

00:05:29,140  -->  00:05:31,653
so this is just unique name that it assigns.
115

115

00:05:32,520  -->  00:05:35,160
If we do kubectl get pods,
116

116

00:05:35,160  -->  00:05:38,720
we see ringed-wolverine, my chart.
117

117

00:05:38,720  -->  00:05:42,650
So this is the full name, is this unique part,
118

118

00:05:42,650  -->  00:05:44,660
ringed-wolverine, and then the name of the chart,
119

119

00:05:44,660  -->  00:05:45,643
which is my chart.
120

120

00:05:46,480  -->  00:05:50,080
It has status deployed, it has the resource service,
121

121

00:05:50,080  -->  00:05:51,083
deployment and pods.
122

122

00:05:51,920  -->  00:05:54,730
The service is a cluster IP, so the node here
123

123

00:05:54,730  -->  00:05:56,860
is saying that if you want to contact it,
124

124

00:05:56,860  -->  00:06:00,610
we can export pod name, which is then going to
125

125

00:06:01,680  -->  00:06:04,500
give us a pod name and a variable,
126

126

00:06:04,500  -->  00:06:06,990
and then we can use port forwarding
127

127

00:06:06,990  -->  00:06:11,663
to port forward from 8080 locally to our pod.
128

128

00:06:13,690  -->  00:06:17,363
I'll just do control Z, run it in the background,
129

129

00:06:18,240  -->  00:06:23,240
do a curl, and then you see welcome to nginx.
130

130

00:06:25,810  -->  00:06:29,400
I'll close this port forwarding FG and a control C.
131

131

00:06:29,400  -->  00:06:32,690
Now it's closed, so now the curl is not gonna work anymore
132

132

00:06:32,690  -->  00:06:34,633
because the port forwarding has stopped.
133

133

00:06:35,470  -->  00:06:39,200
If I do helm list, it'll show me what is deployed.
134

134

00:06:39,200  -->  00:06:41,840
If I want to remove it again, helm delete,
135

135

00:06:41,840  -->  00:06:45,470
and then the name of the release, ringed-wolverine.
136

136

00:06:45,470  -->  00:06:49,250
And now the release is deleted.
137

137

00:06:49,250  -->  00:06:51,810
If I would deploy again, or I would deploy a second time,
138

138

00:06:51,810  -->  00:06:54,690
it would just give it another unique name.
139

139

00:06:54,690  -->  00:06:56,620
This is a perfect template to get started,
140

140

00:06:56,620  -->  00:06:59,030
to create your own Helm charts.
141

141

00:06:59,030  -->  00:07:01,610
In the next demo I will show you a more complex
142

142

00:07:01,610  -->  00:07:03,963
example of a Helm chart that I created myself.
