WEBVTT
1
00:00:02.030 --> 00:00:04.510
Let's see MVC in action.

2
00:00:04.510 --> 00:00:09.320
I will show you the Model View Controller in Trackzilla.

3
00:00:09.320 --> 00:00:11.460
Let's look at Trackzilla more closely.

4
00:00:11.460 --> 00:00:14.960
You're already familiar with the domain entities Application,

5
00:00:14.960 --> 00:00:16.610
Release, and Ticket.

6
00:00:16.610 --> 00:00:19.210
Let's look more closely at the controller layer,

7
00:00:19.210 --> 00:00:26.880
which is found in the web package, and it' TzaController so double‑click on that.

8
00:00:26.880 --> 00:00:33.410
This single controller is responsible for handling all incoming HTTP requests.

9
00:00:33.410 --> 00:00:37.830
So, for example, requests to retrieve applications,

10
00:00:37.830 --> 00:00:40.700
retrieve tickets, retrieve releases,

11
00:00:40.700 --> 00:00:46.000
and so all HTTP requests are mapped, in this case to the service layer.

12
00:00:46.000 --> 00:00:51.290
So we see that here in releaseService, and we're calling listReleases.

13
00:00:51.290 --> 00:00:54.490
The service layer usually contains the business logic,

14
00:00:54.490 --> 00:00:57.570
and it retrieves the data using the repository layer,

15
00:00:57.570 --> 00:01:02.040
which you're already familiar with, and it sends that data back to the view.

16
00:01:02.040 --> 00:01:06.230
So let's scroll back up and look more closely at this controller.

17
00:01:06.230 --> 00:01:09.570
Notice here on line 11, the @Controller annotation.

18
00:01:09.570 --> 00:01:14.395
@Controller is used to mark classes as a Spring MVC controller,

19
00:01:14.395 --> 00:01:17.870
and this simply means Spring will consider this class

20
00:01:17.870 --> 00:01:21.010
when handling incoming web requests.

21
00:01:21.010 --> 00:01:28.975
So let's scroll down and look at this retrieveApplications method.

22
00:01:28.975 --> 00:01:36.870
The @GetMapping annotation on line 32 provides routing information.

23
00:01:36.870 --> 00:01:41.340
It tells Spring that any HTTP requests with this particular path,

24
00:01:41.340 --> 00:01:46.585
/applications, whenever a request like that comes in,

25
00:01:46.585 --> 00:01:50.340
to automatically map it to this retrieveApplications method.

26
00:01:50.340 --> 00:01:52.740
And in this retrieveApplications method,

27
00:01:52.740 --> 00:01:55.770
all it's doing is retrieving the list of applications from

28
00:01:55.770 --> 00:01:58.700
the database and setting that as the model.

29
00:01:58.700 --> 00:02:01.895
And remember, the model is what gets displayed on the view.

30
00:02:01.895 --> 00:02:04.560
How is Spring MVC configured?

31
00:02:04.560 --> 00:02:05.775
Well, typically,

32
00:02:05.775 --> 00:02:09.445
you would add the @EnableWebMVC annotation to

33
00:02:09.445 --> 00:02:11.295
import the Spring MVC configuration,

34
00:02:11.295 --> 00:02:15.525
but Spring Boot adds it automatically when it sees the

35
00:02:15.525 --> 00:02:17.985
necessary dependencies on the class path,

36
00:02:17.985 --> 00:02:23.545
and then auto‑configuration kicks in.

37
00:02:23.545 --> 00:02:27.385
So we've talked about the model layer and the controller layer.

38
00:02:27.385 --> 00:02:29.695
Now let's talk about the view layer.

39
00:02:29.695 --> 00:02:33.005
The view layer is a simple front‑end using Thymeleaf,

40
00:02:33.005 --> 00:02:39.595
which is a templating engine that provides support for serving HTML.

41
00:02:39.595 --> 00:02:43.100
So here, underneath the resources folder,

42
00:02:43.100 --> 00:02:48.395
you'll see static resources, but then you'll see templates,

43
00:02:48.395 --> 00:02:54.095
and underneath templates, you'll see several files and then you'll see fragments.

44
00:02:54.095 --> 00:02:57.935
Thymeleaf is included in the Trackzilla application by

45
00:02:57.935 --> 00:02:59.995
adding the Thymeleaf dependency.

46
00:02:59.995 --> 00:03:03.985
So if you hop over to the Maven pom file and you

47
00:03:03.985 --> 00:03:08.185
scroll all the way down to line 51, you will see this dependency here,

48
00:03:08.185 --> 00:03:09.055
spring‑boot‑starter‑thymeleaf.

49
00:03:09.055 --> 00:03:12.665
That makes Thymeleaf available.

50
00:03:12.665 --> 00:03:16.795
Normally with Spring, you would have to register a ViewResolver bean,

51
00:03:16.795 --> 00:03:19.840
which would enable you to render models in the browser,

52
00:03:19.840 --> 00:03:22.855
but with Spring Boot, that's not necessary.

53
00:03:22.855 --> 00:03:27.435
Once Thymeleaf is enabled, there's really no extra configuration necessary,

54
00:03:27.435 --> 00:03:31.795
but if needed, there are a few configuration options for Thymeleaf.

55
00:03:31.795 --> 00:03:33.465
So let me show you what I'm doing.

56
00:03:33.465 --> 00:03:36.595
Navigate to the application.properties file.

57
00:03:36.595 --> 00:03:38.245
I've added a few properties here.

58
00:03:38.245 --> 00:03:41.650
On line 9, this template‑loader‑path,

59
00:03:41.650 --> 00:03:44.375
this is the path where the files are loaded,

60
00:03:44.375 --> 00:03:46.685
so classpath:templates.

61
00:03:46.685 --> 00:03:49.155
And that's this folder here that I showed you, templates.

62
00:03:49.155 --> 00:03:54.755
On line 10, I'm using this thymeleaf.suffix.html.

63
00:03:54.755 --> 00:03:59.995
This specifies the suffix that gets appended to view names when building a URL.

64
00:03:59.995 --> 00:04:04.428
And then here on line 11, I'm disabling the template caching.

65
00:04:04.428 --> 00:04:08.938
They are fragments so there's one fragment is the navbar.

66
00:04:08.938 --> 00:04:11.858
That's what's shared across components, and notice here,

67
00:04:11.858 --> 00:04:13.468
the applications template file.

68
00:04:13.468 --> 00:04:15.948
I've launched the application.

69
00:04:15.948 --> 00:04:18.508
So let's navigate to Trackzilla.

70
00:04:18.508 --> 00:04:22.613
I've already deployed the application, just navigate to localhost:8080,

71
00:04:22.613 --> 00:04:25.968
and this is a look at Trackzilla.

72
00:04:25.968 --> 00:04:29.288
If you're curious about the look and feel of the Trackzilla application,

73
00:04:29.288 --> 00:04:31.078
I chose to use Bootstrap.

74
00:04:31.078 --> 00:04:32.728
I'm a big fan of Bootstrap.

75
00:04:32.728 --> 00:04:35.478
It's easy to use and its components look great.

76
00:04:35.478 --> 00:04:40.078
So this menu bar here, this is a Bootstrap component.

77
00:04:40.078 --> 00:04:42.498
And let's view the list of applications.

78
00:04:42.498 --> 00:04:46.638
So this table here is also a Bootstrap component.

79
00:04:46.638 --> 00:04:57.000
So for now on the Trackzilla menu, we are retrieving the list of applications. We can also see a list of tickets, and we can also see a list of releases.

