1
00:00:02,510 --> 00:00:07,330
Now that we have everything in place, let's see the GraphQL server in action.

2
00:00:07,330 --> 00:00:12,770
We'll look at the GraphQL server, testing the GraphQL API, we'll look

3
00:00:12,770 --> 00:00:19,040
a GraphiQL, and we'll run queries and mutations.

4
00:00:19,040 --> 00:00:22,750
Let's take a look at GraphiQL. I've deployed and launched the

5
00:00:22,750 --> 00:00:27,700
application, and let's navigate to a web browser.

6
00:00:27,700 --> 00:00:29,240
And in that web browser,

7
00:00:29,240 --> 00:00:35,835
the URL that you would use is localhost:8080/graphiql. Notice there is an

8
00:00:35,835 --> 00:00:41,630
i in between graph and ql. On the left‑hand side, this is the command

9
00:00:41,630 --> 00:00:45,190
window where you enter the queries or mutations.

10
00:00:45,190 --> 00:00:48,850
The Execute button is right here in the upper left‑hand corner.

11
00:00:48,850 --> 00:00:53,710
When you execute a query, it will show here on the right‑hand side.

12
00:00:53,710 --> 00:00:55,870
If you expand this Docs,

13
00:00:55,870 --> 00:00:58,730
there is a documentation tab where you can see all of

14
00:00:58,730 --> 00:01:01,140
the queries and mutations available.

15
00:01:01,140 --> 00:01:02,090
So, for example,

16
00:01:02,090 --> 00:01:05,060
for the queries, we have findAllApplications,

17
00:01:05,060 --> 00:01:08,190
countApplications. And for the mutation,

18
00:01:08,190 --> 00:01:11,290
we have newApplication, deleteApplication,

19
00:01:11,290 --> 00:01:12,580
updateApplication.

20
00:01:12,580 --> 00:01:14,670
That's what we expect.

21
00:01:14,670 --> 00:01:16,580
So let's test the query type.

22
00:01:16,580 --> 00:01:21,740
So let's input this query. Notice the query is findAllApplications,

23
00:01:21,740 --> 00:01:24,940
and in this case, I want it to return an id.

24
00:01:24,940 --> 00:01:29,660
Let's execute, and it returns back only the IDs of the

25
00:01:29,660 --> 00:01:34,140
applications because that's what I asked for.

26
00:01:34,140 --> 00:01:38,230
Now let's return back the id and the owner. And notice there's auto

27
00:01:38,230 --> 00:01:44,750
complete. That really helps. And notice now I get back the id and the

28
00:01:44,750 --> 00:01:47,610
owner because that's what I asked for.

29
00:01:47,610 --> 00:01:53,710
Lastly, let's bring back the description, and there we have it.

30
00:01:53,710 --> 00:01:59,890
We have the id, owner, and description. GraphQL offers ultimate flexibility in

31
00:01:59,890 --> 00:02:04,320
that you can get back exactly what you need from the API.

32
00:02:04,320 --> 00:02:06,310
Now let's test mutations.

33
00:02:06,310 --> 00:02:10,690
I do want to note that I went back and stopped the application and

34
00:02:10,690 --> 00:02:14,240
renamed this data.sqlzzzz file so that I could start with an empty

35
00:02:14,240 --> 00:02:17,050
database and relaunch my application.

36
00:02:17,050 --> 00:02:23,020
Now let's add a mutation to create a new application. So

37
00:02:23,020 --> 00:02:26,060
notice I have the keyword mutation.

38
00:02:26,060 --> 00:02:29,290
I have the name of the operation, newApplication.

39
00:02:29,290 --> 00:02:31,610
I have the values that I'm passing in, name,

40
00:02:31,610 --> 00:02:36,420
owner, and description, and then I'm having the values here that I want returned.

41
00:02:36,420 --> 00:02:40,900
So let's execute this, and it created a newApplication with an

42
00:02:40,900 --> 00:02:44,030
id of 1 with the values that I provided.

43
00:02:44,030 --> 00:02:48,790
Now let's look at an update.

44
00:02:48,790 --> 00:02:51,680
So again, we have the mutation keyword.

45
00:02:51,680 --> 00:02:55,910
Now we're calling out to the updateApplicationOwner operation.

46
00:02:55,910 --> 00:03:01,110
We're passing in the newOwner and the id.

47
00:03:01,110 --> 00:03:03,710
So this is for the one that we just created,

48
00:03:03,710 --> 00:03:07,060
and I want back id, name, description, and owner.

49
00:03:07,060 --> 00:03:11,550
So here, Kim Jones is now the new owner for the application.

50
00:03:11,550 --> 00:03:14,020
Now let's see what happens when we attempt to update

51
00:03:14,020 --> 00:03:16,370
an application that doesn't exist.

52
00:03:16,370 --> 00:03:20,000
So let's just change this id to a random number that

53
00:03:20,000 --> 00:03:24,230
does not exist, and let's execute.

54
00:03:24,230 --> 00:03:25,910
And as we expected,

55
00:03:25,910 --> 00:03:28,780
we're receiving the custom Application Not Found error

56
00:03:28,780 --> 00:03:31,740
message that we created for error handling.

57
00:03:31,740 --> 00:03:37,720
You can also delete data. So notice here, we're using the

58
00:03:37,720 --> 00:03:40,970
mutation keyword again, the operation,

59
00:03:40,970 --> 00:03:44,010
which is deleteApplication, and we're passing in the id.

60
00:03:44,010 --> 00:03:50,180
So let's execute it, and we receive back deleteApplication equals true,

61
00:03:50,180 --> 00:03:53,460
so that means the application was deleted. So that's a quick

62
00:03:53,460 --> 00:04:01,000
look at GraphiQL. It's a very useful tool for testing mutations and queries against a GraphQL server.

