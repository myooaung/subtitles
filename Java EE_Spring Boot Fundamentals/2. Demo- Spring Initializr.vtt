WEBVTT
1
00:00:00.680 --> 00:00:03.850
First, I'm going to demo the Spring Initializr,

2
00:00:03.850 --> 00:00:07.100
and we will open the code in the IDE and execute it.

3
00:00:07.100 --> 00:00:13.050
First, I'm going to show you Spring Initializr.

4
00:00:13.050 --> 00:00:15.930
I find this website to be very useful.

5
00:00:15.930 --> 00:00:20.320
You can also use Spring Initializr from within your IDE.

6
00:00:20.320 --> 00:00:21.480
So let's take a look at it.

7
00:00:21.480 --> 00:00:23.655
Now, what this tool is going to do,

8
00:00:23.655 --> 00:00:27.160
it's going to generate the base code and all of the

9
00:00:27.160 --> 00:00:30.450
dependencies in the Maven POM file for you.

10
00:00:30.450 --> 00:00:33.700
So it's a great way to jump‑start your application development.

11
00:00:33.700 --> 00:00:39.350
For Project, we're using Maven, Language, Java.

12
00:00:39.350 --> 00:00:42.145
For the version, just leave it to the defaulted version.

13
00:00:42.145 --> 00:00:47.870
For the Project Metadata, let's change this to be something more descriptive,

14
00:00:47.870 --> 00:00:51.100
Let's say pluralsight, and for the Artifact,

15
00:00:51.100 --> 00:00:56.440
let's say fundamentals.

16
00:00:56.440 --> 00:00:59.380
Now, this is where we go in and add dependencies.

17
00:00:59.380 --> 00:01:01.330
This is a very useful feature.

18
00:01:01.330 --> 00:01:02.510
So, for example,

19
00:01:02.510 --> 00:01:07.310
if you are doing a web application and you want to include the web dependency,

20
00:01:07.310 --> 00:01:09.940
you search for it, and then you click on it,

21
00:01:09.940 --> 00:01:12.240
and it would be added to the list.

22
00:01:12.240 --> 00:01:15.720
For example, if you need to include an H2 in‑memory database,

23
00:01:15.720 --> 00:01:18.640
you can search and add that.

24
00:01:18.640 --> 00:01:21.340
Let's say you wanted to use JPA.

25
00:01:21.340 --> 00:01:24.470
You can search for that dependency, click on it, and add it.

26
00:01:24.470 --> 00:01:27.650
For now, I will just use the Spring Web Starter.

27
00:01:27.650 --> 00:01:30.490
Then you click on Generate project.

28
00:01:30.490 --> 00:01:33.750
What it's going to do, it's going to download and save a ZIP file,

29
00:01:33.750 --> 00:01:37.940
and then you can open that ZIP file in your IDE.

30
00:01:37.940 --> 00:01:42.620
So I've done just that, and let's navigate to IntelliJ.

31
00:01:42.620 --> 00:01:47.740
Let's look at everything that the Spring Initializr generated for us.

32
00:01:47.740 --> 00:01:53.540
First, let's go to the Maven POM file.

33
00:01:53.540 --> 00:01:55.790
Let's expand that.

34
00:01:55.790 --> 00:02:01.703
So notice we have a Maven POM file that is already filled out for us.

35
00:02:01.703 --> 00:02:05.543
Let's start back here on lines 5 through 10 and

36
00:02:05.543 --> 00:02:07.973
talk about this parent dependency.

37
00:02:07.973 --> 00:02:10.993
So the spring‑boot‑starter dependency here,

38
00:02:10.993 --> 00:02:15.443
shown on line 7, is for all Spring Boot projects.

39
00:02:15.443 --> 00:02:17.923
They typically have this parent dependency,

40
00:02:17.923 --> 00:02:20.973
and parent POMs allow you to manage the version of

41
00:02:20.973 --> 00:02:24.923
dependencies for multiple child modules at once.

42
00:02:24.923 --> 00:02:29.703
This means you can omit version tags for each child dependency.

43
00:02:29.703 --> 00:02:35.323
Spring‑boot‑starter specifies the default configuration for several plugins.

44
00:02:35.323 --> 00:02:36.293
And let's scroll down.

45
00:02:36.293 --> 00:02:41.563
The next dependency that was added, here on line 24,

46
00:02:41.563 --> 00:02:46.033
spring‑boot‑starter This is the core starter,

47
00:02:46.033 --> 00:02:48.833
and it includes auto‑configuration support,

48
00:02:48.833 --> 00:02:53.433
logging, YAML support, et cetera.

49
00:02:53.433 --> 00:02:56.663
Notice here the spring‑boot‑starter‑test on line 29.

50
00:02:56.663 --> 00:02:58.733
That was included.

51
00:02:58.733 --> 00:03:02.253
Spring‑boot‑starter‑test includes Spring tests,

52
00:03:02.253 --> 00:03:08.133
JUnit, Hamcrest, Mockito, and other useful testing frameworks.

53
00:03:08.133 --> 00:03:12.463
And now notice that we didn't need to specify a version number

54
00:03:12.463 --> 00:03:15.513
for this dependency or for this dependency,

55
00:03:15.513 --> 00:03:17.013
really for any of the dependencies,

56
00:03:17.013 --> 00:03:20.533
and that's because we're using that parent POM.

57
00:03:20.533 --> 00:03:23.533
If you remember, I added the web dependency,

58
00:03:23.533 --> 00:03:26.163
so that's why we see here on line 35.

59
00:03:26.163 --> 00:03:29.593
We will talk more about this dependency in detail later.

60
00:03:29.593 --> 00:03:33.583
Now let's look at the main method.

61
00:03:33.583 --> 00:03:36.293
So the main classes called FundamentalsApplication,

62
00:03:36.293 --> 00:03:38.863
and let's take a look at that.

63
00:03:38.863 --> 00:03:42.403
This is the SpringBootApplication launch class.

64
00:03:42.403 --> 00:03:46.603
It's used to bootstrap and launch a Spring application from

65
00:03:46.603 --> 00:03:49.633
a Java main method shown here on line 8.

66
00:03:49.633 --> 00:03:53.443
So this is just the standard main method that follows the Java convention

67
00:03:53.443 --> 00:03:57.653
for an application entry point. Notice here on line 9, the method delegates

68
00:03:57.653 --> 00:04:01.962
to Spring Boot's SpringApplication class by calling the run method. Up here

69
00:04:01.962 --> 00:04:07.632
on line 6, this @SpringBootApplication annotation, it bootstraps our

70
00:04:07.632 --> 00:04:09.642
application by starting Spring.

71
00:04:09.642 --> 00:04:10.262
Typically,

72
00:04:10.262 --> 00:04:14.562
it will create an instance of Spring's application context, expose

73
00:04:14.562 --> 00:04:18.782
command‑line arguments as Spring properties, load Spring beans,

74
00:04:18.782 --> 00:04:20.082
et cetera.

75
00:04:20.082 --> 00:04:22.382
So here on line 9 we need to pass in the

76
00:04:22.382 --> 00:04:26.352
FundamentalsApplication.class as an argument to the run method to

77
00:04:26.352 --> 00:04:31.412
identify the primary Spring component. Here, the args array is also

78
00:04:31.412 --> 00:04:34.532
passed through to expose any command‑line arguments.

79
00:04:34.532 --> 00:04:39.842
Let's quickly test this very simple application using the included test.

80
00:04:39.842 --> 00:04:43.882
It's a very simple test that only tests the application's context.

81
00:04:43.882 --> 00:04:50.602
So let's run this test, and let's look at the results.

82
00:04:50.602 --> 00:04:52.792
So, as expected, this test passed.

83
00:04:52.792 --> 00:04:54.072
It's very simple,

84
00:04:54.072 --> 00:04:56.742
but this is something that was generated as a part

85
00:04:56.742 --> 00:04:59.802
of the Spring Initializr setup.

86
00:04:59.802 --> 00:05:01.902
Now let's test our application.

87
00:05:01.902 --> 00:05:09.402
I've navigated back to FundamentalsApplication.java, and let's just run this.

88
00:05:09.402 --> 00:05:16.902
We should eventually see Hello Pluralsight in the output.

89
00:05:16.902 --> 00:05:19.202
Here it is.

90
00:05:19.202 --> 00:05:26.000
That was a quick look at the Spring Initializr, which will help you bootstrap your Spring Boot applications.

