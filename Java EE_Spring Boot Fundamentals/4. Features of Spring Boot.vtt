WEBVTT
1
00:00:02.140 --> 00:00:03.630
When it comes to Spring Boot,

2
00:00:03.630 --> 00:00:07.820
there is a lot of magic that happens behind the scenes

3
00:00:07.820 --> 00:00:10.080
that we will unpack in this course.

4
00:00:10.080 --> 00:00:13.340
First, let's talk about some of the notable features,

5
00:00:13.340 --> 00:00:17.770
automatic configuration, starter dependencies,

6
00:00:17.770 --> 00:00:21.440
the Spring Boot CLI, and the actuator.

7
00:00:21.440 --> 00:00:28.140
So let's talk about each one of these in more detail.

8
00:00:28.140 --> 00:00:31.930
Auto configuration is truly a time saving feature.

9
00:00:31.930 --> 00:00:34.980
It will automatically configure the application based on

10
00:00:34.980 --> 00:00:38.240
libraries added to your project's classpath.

11
00:00:38.240 --> 00:00:39.490
Say, for example,

12
00:00:39.490 --> 00:00:42.540
if you include a dependency in your Maven POM file

13
00:00:42.540 --> 00:00:44.760
for the H2 in‑memory database,

14
00:00:44.760 --> 00:00:47.990
Spring Boot auto configures your application for the

15
00:00:47.990 --> 00:00:50.510
specific database access you need.

16
00:00:50.510 --> 00:00:57.880
I will show you later how easy it is to enable auto configuration.

17
00:00:57.880 --> 00:01:03.820
Another feature that I absolutely love is this concept of a starter dependency.

18
00:01:03.820 --> 00:01:07.230
The starter dependency is included in your POM file,

19
00:01:07.230 --> 00:01:11.160
and it acts like a one‑stop shop or a starter pack that

20
00:01:11.160 --> 00:01:17.190
includes all of the dependent libraries you need.

21
00:01:17.190 --> 00:01:18.080
First of all,

22
00:01:18.080 --> 00:01:20.770
let's look at the minimum dependencies required to

23
00:01:20.770 --> 00:01:24.220
create a web application using Spring.

24
00:01:24.220 --> 00:01:25.520
Unlike Spring,

25
00:01:25.520 --> 00:01:28.580
Spring Boot requires only one dependency to get a

26
00:01:28.580 --> 00:01:30.820
web application up and running.

27
00:01:30.820 --> 00:01:31.720
So,

28
00:01:31.720 --> 00:01:35.530
if you include a starter pack or starter dependency called

29
00:01:35.530 --> 00:01:38.520
spring‑boot‑starter‑test in your POM file,

30
00:01:38.520 --> 00:01:43.040
Spring Boot will include most of the libraries needed for testing,

31
00:01:43.040 --> 00:01:49.240
JUnit, Mockito, Hamcrest, Spring core, and Spring test.

32
00:01:49.240 --> 00:01:51.310
If you include spring‑boot‑starter‑jpa,

33
00:01:51.310 --> 00:01:56.150
it will include what you need for spring‑data‑jpa with Hibernate,

34
00:01:56.150 --> 00:01:59.530
and dependencies for JDBC.

35
00:01:59.530 --> 00:02:06.840
EntityManager, Transaction API, Spring Data JPA, and Aspects.

36
00:02:06.840 --> 00:02:11.660
If you include spring‑boot‑starter‑web for web application development,

37
00:02:11.660 --> 00:02:15.720
it automatically adds libraries like Spring MVC,

38
00:02:15.720 --> 00:02:22.860
REST, Tomcat, and Jackson for JSON to Java object mapping.

39
00:02:22.860 --> 00:02:26.890
The Spring Boot CLI is a command line interface for Spring Boot,

40
00:02:26.890 --> 00:02:31.260
which means an entire application can be written using Groovy scripts.

41
00:02:31.260 --> 00:02:36.600
All you have to do is install the Spring Boot CLI and create a Groovy file

42
00:02:36.600 --> 00:02:40.150
that contains details about the required application.

43
00:02:40.150 --> 00:02:44.270
The CLI is often used for rapid prototyping.

44
00:02:44.270 --> 00:02:46.420
Next, there's the actuator,

45
00:02:46.420 --> 00:02:49.360
which allows you to see what's going on inside of your

46
00:02:49.360 --> 00:02:51.560
running Spring Boot application.

47
00:02:51.560 --> 00:02:54.610
You get a peek into internal runtime operational

48
00:02:54.610 --> 00:02:57.310
information about your application.

49
00:02:57.310 --> 00:03:00.480
You can choose to manage and monitor your application

50
00:03:00.480 --> 00:03:04.630
by using HTTP endpoints or with JMX.

51
00:03:04.630 --> 00:03:08.870
You will be able to see things like your application's health status,

52
00:03:08.870 --> 00:03:13.330
various metrics about your application, configured loggers,

53
00:03:13.330 --> 00:03:18.310
audit events, HTTP trace info, and so on.

54
00:03:18.310 --> 00:03:23.990
I will show you how easy it is to use this feature later on.

55
00:03:23.990 --> 00:03:26.340
The code can be cloned from this link.

56
00:03:26.340 --> 00:03:33.000
I recommend that you clone the code at this point. In the next module, you will be following along with me.

