WEBVTT
1
00:00:01.840 --> 00:00:05.260
For the Trackzilla project, the schemas are found underneath the

2
00:00:05.260 --> 00:00:08.840
graphql directory in the resources package.

3
00:00:08.840 --> 00:00:10.720
Notice there's one schema file,

4
00:00:10.720 --> 00:00:18.540
and it's called application.graphqls. Let's take a look at it.

5
00:00:18.540 --> 00:00:22.330
This is what a schema looks like. Notice there can only be

6
00:00:22.330 --> 00:00:25.690
one route query and one mutation type.

7
00:00:25.690 --> 00:00:28.280
Each file will contain all the query and all the

8
00:00:28.280 --> 00:00:30.940
mutation operations for the given type.

9
00:00:30.940 --> 00:00:31.810
Here,

10
00:00:31.810 --> 00:00:37.075
the type is called Application, and I list out the query operations,

11
00:00:37.075 --> 00:00:43.080
findAllApplications, countApplications, and the Mutation operations,

12
00:00:43.080 --> 00:00:48.240
newApplication, deleteApplication, updateApplicationOwner.

13
00:00:48.240 --> 00:00:50.390
Let's go back to the Application type.

14
00:00:50.390 --> 00:00:52.730
Notice that the fields are typed.

15
00:00:52.730 --> 00:00:58.290
These types can be scaler types like int, float, string. Boolean,

16
00:00:58.290 --> 00:01:01.240
ID, or any other reference type.

17
00:01:01.240 --> 00:01:06.680
So here, the ID is of type id, name is of type String, owner is of

18
00:01:06.680 --> 00:01:09.990
type String, and description is of type String.

19
00:01:09.990 --> 00:01:14.140
This exclamation point here means the field is required.

20
00:01:14.140 --> 00:01:18.140
And if we scroll down here and we look at the brackets,

21
00:01:18.140 --> 00:01:20.340
this means it's an array.

22
00:01:20.340 --> 00:01:24.670
Every complex type in the graphql server is represented by a

23
00:01:24.670 --> 00:01:28.980
corresponding Java object, so we have this Application type and we

24
00:01:28.980 --> 00:01:32.020
have the corresponding application Java object.

25
00:01:32.020 --> 00:01:34.950
And this is the Application class that we've seen before.

26
00:01:34.950 --> 00:01:41.050
It has an id, name, description, and an owner. Like with our RESTful API,

27
00:01:41.050 --> 00:01:45.450
there's an application repository that gives us the ability to interact

28
00:01:45.450 --> 00:01:48.160
with the H2 in‑memory database to create,

29
00:01:48.160 --> 00:01:51.740
read, or update or delete applications.

30
00:01:51.740 --> 00:01:53.970
Now in a real‑world scenario,

31
00:01:53.970 --> 00:01:57.480
you would have the business logic abstracted into a service layer

32
00:01:57.480 --> 00:02:00.570
similar to how the RESTful API was designed.

33
00:02:00.570 --> 00:02:06.000
Since this is a simple use case, I've excluded it, and that is a good look at the schema.

