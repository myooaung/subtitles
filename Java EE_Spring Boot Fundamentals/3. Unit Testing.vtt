WEBVTT
1
00:00:02.110 --> 00:00:07.820
Let's look at unit testing REST APIs using JUnit, Mockito, and Spring Test,

2
00:00:07.820 --> 00:00:10.410
also known as MockMvc.

3
00:00:10.410 --> 00:00:13.670
Writing unit tests using JUnit allows you to test

4
00:00:13.670 --> 00:00:15.980
individual units of source code.

5
00:00:15.980 --> 00:00:20.040
JUnit is by far the most popular unit testing framework.

6
00:00:20.040 --> 00:00:22.250
Mockito is a great mocking framework,

7
00:00:22.250 --> 00:00:25.720
which we'll use to provide data to our unit tests.

8
00:00:25.720 --> 00:00:28.650
Spring also has the @MockBean annotation,

9
00:00:28.650 --> 00:00:34.630
which works well with the Mockito library. @WebMvcTest is an

10
00:00:34.630 --> 00:00:39.180
annotation used for controller layer unit testing and is often used

11
00:00:39.180 --> 00:00:43.310
to test one controller class at a time, and works in combination

12
00:00:43.310 --> 00:00:50.780
with Mockito to mock the dependencies. @WebMvcTest scans only the

13
00:00:50.780 --> 00:00:55.280
controllers, so @Controllers, including @RestControllers,

14
00:00:55.280 --> 00:00:58.730
and will not load the full application context.

15
00:00:58.730 --> 00:01:03.260
In our case study, only the TzaController will be scanned. If

16
00:01:03.260 --> 00:01:06.100
your controller has dependencies on other beans,

17
00:01:06.100 --> 00:01:08.960
for example, a bean from the service layer,

18
00:01:08.960 --> 00:01:10.270
as in our case,

19
00:01:10.270 --> 00:01:13.165
the test will not run until you either load the bean

20
00:01:13.165 --> 00:01:15.700
yourself or provide a mock for it.

21
00:01:15.700 --> 00:01:16.340
Typically,

22
00:01:16.340 --> 00:01:19.410
you will need to provide the beans manually by mocking those

23
00:01:19.410 --> 00:01:25.170
objects. @WebMvcTest speeds up testing by only loading a small

24
00:01:25.170 --> 00:01:27.560
portion of your app for unit testing.

25
00:01:27.560 --> 00:01:33.240
In this case, just the controller layer.

26
00:01:33.240 --> 00:01:39.120
Let's see unit testing in action.

27
00:01:39.120 --> 00:01:40.940
Let's look at unit testing.

28
00:01:40.940 --> 00:01:44.490
I've opened the project and I've navigated to the test package

29
00:01:44.490 --> 00:01:48.210
and I'm opening the TzaControllerUnitTest.

30
00:01:48.210 --> 00:01:51.940
So let's take a look at this.

31
00:01:51.940 --> 00:01:58.280
Start at the very top. Here on line 29, I'm using this @RunWith annotation.

32
00:01:58.280 --> 00:02:02.250
This defines the runner class to be used to run test cases.

33
00:02:02.250 --> 00:02:02.910
In this case,

34
00:02:02.910 --> 00:02:05.940
SpringRunner is the choice since I'm using Spring to build the

35
00:02:05.940 --> 00:02:11.630
application. On line 30, I'm using the @WebMvcTest annotation,

36
00:02:11.630 --> 00:02:15.390
and this uses the class of the controller that I'm testing.

37
00:02:15.390 --> 00:02:19.260
In this case, this is a unit test for the TzaController.

38
00:02:19.260 --> 00:02:21.640
This will start the web application context,

39
00:02:21.640 --> 00:02:25.560
and the embedded servlet container is not used, keeping testing

40
00:02:25.560 --> 00:02:31.640
lightweight. Here on line 33, I'm using mockMvc. MockMvc is a

41
00:02:31.640 --> 00:02:35.910
powerful way to quickly test MVC controllers without needing to

42
00:02:35.910 --> 00:02:38.220
start a full HTTP server.

43
00:02:38.220 --> 00:02:42.930
It also helps with processing HTTP responses by providing

44
00:02:42.930 --> 00:02:45.700
methods for what we call expectations,

45
00:02:45.700 --> 00:02:48.620
and we'll look at expectations in a moment.

46
00:02:48.620 --> 00:02:54.890
On lines 36 and on 39, I'm mocking the Application and the TicketService beans.

47
00:02:54.890 --> 00:02:59.160
The @MockBean annotation creates a Mockito mock of the services,

48
00:02:59.160 --> 00:03:02.620
which are dependencies for the TzaController.

49
00:03:02.620 --> 00:03:07.070
Now let's look at our first unit test. It's here on line 42.

50
00:03:07.070 --> 00:03:10.770
It's a method called getAllApplications, and notice I've

51
00:03:10.770 --> 00:03:14.620
used the @Test annotation here on line 41.

52
00:03:14.620 --> 00:03:19.790
So let's see what this method is doing. Here on line 43, I'm

53
00:03:19.790 --> 00:03:22.630
calling the perform method of mockMvc,

54
00:03:22.630 --> 00:03:27.565
and this method simply simulates making an HTTP request to a REST

55
00:03:27.565 --> 00:03:31.420
controller. So it's going to call out to /tza/applications.

56
00:03:31.420 --> 00:03:38.170
Here on lines 44, 45, and 46, we are using this andExpect method.

57
00:03:38.170 --> 00:03:41.810
So this allows us to set expectations on the HTTP

58
00:03:41.810 --> 00:03:44.820
response received back from the controller.

59
00:03:44.820 --> 00:03:45.910
So in this case,

60
00:03:45.910 --> 00:03:51.980
we're saying I expect the status to be OK, I expect the content type

61
00:03:51.980 --> 00:03:58.580
to be application JSON, I expect the content to be JSON. Down here on

62
00:03:58.580 --> 00:04:01.840
line 48, I'm using the verify method.

63
00:04:01.840 --> 00:04:04.760
This verify method is used to verify the number of

64
00:04:04.760 --> 00:04:07.360
times a mock method has been called.

65
00:04:07.360 --> 00:04:14.370
So in this case, I'm ensuring that listApplications has only been called once.

66
00:04:14.370 --> 00:04:16.930
So that's our test for the getAllApplications

67
00:04:16.930 --> 00:04:19.390
functionality of the TzaController.

68
00:04:19.390 --> 00:04:23.500
Let's run the test by clicking this arrow.

69
00:04:23.500 --> 00:04:25.010
I'll give it a minute,

70
00:04:25.010 --> 00:04:36.136
but I should see a green checkmark saying that the test executed successfully.

71
00:04:36.136 --> 00:04:38.906
Yes, and one test passed.

72
00:04:38.906 --> 00:04:41.696
Now let's take a look at the second unit test.

73
00:04:41.696 --> 00:04:45.906
So this is testing the getAllTickets method for our TzaController,

74
00:04:45.906 --> 00:04:51.116
and it uses the same format except that it calls out to /tza/tickets.

75
00:04:51.116 --> 00:04:53.916
It has the same expectations as before,

76
00:04:53.916 --> 00:04:57.776
and I'm verifying that the listTickets method is only called once.

77
00:04:57.776 --> 00:05:02.616
Let's execute this,

78
00:05:02.616 --> 00:05:05.656
and we should see a green arrow in a moment,

79
00:05:05.656 --> 00:05:10.636
indicating that the test was successful.

80
00:05:10.636 --> 00:05:18.000
And there we go, one test passed. That was a look at adding unit tests to your Spring Boot application.

