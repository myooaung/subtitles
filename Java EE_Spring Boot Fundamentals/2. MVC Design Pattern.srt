1
00:00:03,230 --> 00:00:04,390
For starters,

2
00:00:04,390 --> 00:00:09,610
the dependency needed for spring MVC is spring‑boot‑starter‑web, and as

3
00:00:09,610 --> 00:00:13,750
soon as I add spring‑boot‑starter‑web as a dependency in the project,

4
00:00:13,750 --> 00:00:18,830
Spring Boot's autoconfiguration sees that Spring MVC's on the class path

5
00:00:18,830 --> 00:00:21,380
and autoconfiguration kicks in,

6
00:00:21,380 --> 00:00:24,970
and it provides all of the dependencies and the autoconfiguration

7
00:00:24,970 --> 00:00:29,860
needed to develop web applications, a dispatcher servlet, a default

8
00:00:29,860 --> 00:00:35,210
error page, an embedded servlet container, Tomcat is the default, and

9
00:00:35,210 --> 00:00:39,090
WebJars to manage static dependencies.

10
00:00:39,090 --> 00:00:41,480
Next, let's talk about MVC,

11
00:00:41,480 --> 00:00:46,560
which stands for model‑view‑controller and is one of

12
00:00:46,560 --> 00:00:49,040
the most common design patterns.

13
00:00:49,040 --> 00:00:51,960
I've been in the IT industry for over 20 years,

14
00:00:51,960 --> 00:00:57,140
and one of the very first web apps I developed used this pattern. MVC

15
00:00:57,140 --> 00:01:01,440
decouples major components to promote faster development cycles and

16
00:01:01,440 --> 00:01:05,480
works well for developing large‑scale web applications that need to be

17
00:01:05,480 --> 00:01:08,230
supported by large teams of developers.

18
00:01:08,230 --> 00:01:10,640
Let's look at each component.

19
00:01:10,640 --> 00:01:13,960
The M in MVC stands for model,

20
00:01:13,960 --> 00:01:17,240
and it is the representation of data in a system,

21
00:01:17,240 --> 00:01:20,940
sometimes called an entity or a domain model.

22
00:01:20,940 --> 00:01:23,590
The model is typically data stored in a database,

23
00:01:23,590 --> 00:01:27,220
and is programmatically represented as a java object.

24
00:01:27,220 --> 00:01:32,360
For example, in TrackZilla, there's a screen that shows a list of applications.

25
00:01:32,360 --> 00:01:35,590
The model contains the list of applications.

26
00:01:35,590 --> 00:01:39,080
The V in MVC stands for view.

27
00:01:39,080 --> 00:01:43,000
The view layer is responsible for displaying data, or the model.

28
00:01:43,000 --> 00:01:47,540
In Java the view is typically done in JSP, JSF.

29
00:01:47,540 --> 00:01:50,270
In our case study, we are using Thymeleaf,

30
00:01:50,270 --> 00:01:52,710
which we will talk about in more detail.

31
00:01:52,710 --> 00:01:56,200
The C in MVC stands for controller.

32
00:01:56,200 --> 00:01:59,630
The controller is responsible for directing incoming user

33
00:01:59,630 --> 00:02:03,350
requests to the correct resources and sending responses from

34
00:02:03,350 --> 00:02:05,790
those resources back to the user.

35
00:02:05,790 --> 00:02:06,940
For example,

36
00:02:06,940 --> 00:02:10,940
the controller will get a request to see a list of TrackZilla tickets.

37
00:02:10,940 --> 00:02:13,980
Then it will direct that request to the ticket service,

38
00:02:13,980 --> 00:02:16,860
which returns the list of tickets, and the controller routes

39
00:02:16,860 --> 00:02:19,920
the list of tickets to the view for display.

40
00:02:19,920 --> 00:02:24,420
Thymeleaf has this concept of fragments, which is very powerful.

41
00:02:24,420 --> 00:02:28,650
Fragments allow you to define repeatable chunks of code that can be

42
00:02:28,650 --> 00:02:33,220
reused in another Thymeleaf template file. This works great for

43
00:02:33,220 --> 00:02:37,360
components which you wish to reuse across your web pages. For the

44
00:02:37,360 --> 00:02:48,000
TrackZilla application, the nav bar is a fragment, or a component, that is shared across the index page, the applications page, releases, and tickets.

