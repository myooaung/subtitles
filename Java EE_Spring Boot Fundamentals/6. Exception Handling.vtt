WEBVTT
1
00:00:01.010 --> 00:00:05.680
Let's talk about exception handling. A combination of Spring and Spring Boot

2
00:00:05.680 --> 00:00:09.450
provides multiple options to customize responses for errors.

3
00:00:09.450 --> 00:00:13.900
We've seen that a RESTful API can communicate the success or

4
00:00:13.900 --> 00:00:18.190
failure of an HTTP request by returning the correct status

5
00:00:18.190 --> 00:00:22.140
code in the response to the client.

6
00:00:22.140 --> 00:00:23.610
For exception handling,

7
00:00:23.610 --> 00:00:28.000
we use the ResponseStatusException. ResponseStatusException is a

8
00:00:28.000 --> 00:00:32.620
programmatic alternative to the @ResponseStatus annotation and

9
00:00:32.620 --> 00:00:36.530
is the base class for exceptions used for applying a status code

10
00:00:36.530 --> 00:00:38.400
to an HTTP response.

11
00:00:38.400 --> 00:00:41.420
We simply create an instance of it by providing an

12
00:00:41.420 --> 00:00:46.090
HttpStatus and optionally a reason and a cause.

13
00:00:46.090 --> 00:00:49.520
This approach provides more control over exception handling as

14
00:00:49.520 --> 00:00:53.340
the exceptions can be created programmatically. Spring Boot

15
00:00:53.340 --> 00:01:00.000
provides a default error mapping, returning a JSON response with the HttpStatus and the exception message.

