1
00:00:05,440 --> 00:00:10,070
Hello everyone and welcome to values and variables in this lecture.

2
00:00:10,090 --> 00:00:14,080
We're going to be discussing the differences between the value of a variable and how you can create

3
00:00:14,080 --> 00:00:15,760
them in Scala.

4
00:00:15,760 --> 00:00:19,520
You basically have two options when you're creating a new object in Scala.

5
00:00:19,690 --> 00:00:28,650
You can either declare as a value using VHDL or as a variable using V-A are values the A-L are immutable.

6
00:00:28,680 --> 00:00:34,070
Once they are assigned they cannot be changed variables however they are can be reassigned.

7
00:00:34,080 --> 00:00:40,100
You should know however when you're doing this reassignment you must use the same data type the data

8
00:00:40,100 --> 00:00:45,020
types are going to be discussing in this lecture are int or integer double for floating point numbers

9
00:00:45,320 --> 00:00:48,430
strings and then boolean values such as True and False.

10
00:00:48,440 --> 00:00:52,470
We're going to learn about collections such as lists maps and arrays later on.

11
00:00:53,220 --> 00:00:57,720
Let's go ahead and discuss the general format when you're creating an object in Scala.

12
00:00:57,720 --> 00:01:01,680
You should take note that if you're coming in from a language as Java that already uses the sort of

13
00:01:01,680 --> 00:01:04,140
format this will feel pretty natural to you.

14
00:01:04,140 --> 00:01:08,940
However if you're coming from my dynamic programming language such as Python this is going to be a little

15
00:01:08,940 --> 00:01:10,440
strange to you at first.

16
00:01:10,450 --> 00:01:15,720
You'll go ahead and help you make this transition as smooth as possible when you're learning Skala.

17
00:01:15,720 --> 00:01:20,850
Like I mentioned the general format is going to use VHDL or V-A are as a keyword indicating whether

18
00:01:20,850 --> 00:01:23,270
you want this to be a value or a variable.

19
00:01:23,310 --> 00:01:24,750
Then you'll have your name.

20
00:01:24,840 --> 00:01:26,810
The name is your chosen name of the object.

21
00:01:26,820 --> 00:01:31,060
Things such as my num my list my value etc..

22
00:01:31,170 --> 00:01:32,290
So that's your custom name.

23
00:01:32,310 --> 00:01:34,730
Then you're gonna have a colon the data type.

24
00:01:34,740 --> 00:01:37,380
Those are things such as int double string and boolean.

25
00:01:37,440 --> 00:01:42,750
The actual label their equals and then the literal literal is what you're actually trying to assign

26
00:01:42,750 --> 00:01:44,130
to the object name.

27
00:01:44,230 --> 00:01:49,590
That can be a string such as Hello world or a number such as 11 or double such as twelve point five

28
00:01:49,590 --> 00:01:50,420
etc..

29
00:01:50,700 --> 00:01:55,890
Later on we're going to see that Scala can also infer the data type so well later on Skip defining the

30
00:01:55,890 --> 00:01:59,940
data type and be a little less strict with that sort of general format.

31
00:02:00,210 --> 00:02:04,170
Let's go ahead and get started with some examples so we can further explain these concepts.

32
00:02:04,170 --> 00:02:09,150
I'm going to go ahead and jump to the command prompt now for using Mac jumped to your terminal.

33
00:02:09,180 --> 00:02:14,130
All right here I am at my command prompt for using a Mac to your terminal and I've already started a

34
00:02:14,130 --> 00:02:18,020
spark shell in order to open this Skala interpreter.

35
00:02:18,270 --> 00:02:22,860
Let's go ahead to start off the very basic example of creating a variable.

36
00:02:22,860 --> 00:02:27,520
We say the A R for that variable the name we want this to be.

37
00:02:27,690 --> 00:02:34,650
So I'm going to go ahead and just call this my VAR then we'll say Colon the data type we expect this

38
00:02:34,650 --> 00:02:35,470
to be.

39
00:02:35,850 --> 00:02:37,590
I'm going to go ahead and clarify.

40
00:02:37,590 --> 00:02:39,200
This is an integer data type.

41
00:02:39,210 --> 00:02:48,150
By saying I.A. in there will say equal to 10 enter and notice now you have my VAR colon is an integer

42
00:02:48,240 --> 00:02:49,250
equal to 10.

43
00:02:49,470 --> 00:02:53,310
And when you're learning this if you're coming in from a dynamic programming assignment it may help

44
00:02:53,310 --> 00:02:55,450
if you actually say those words out loud.

45
00:02:55,470 --> 00:02:57,880
My variables and integer equal to 10.

46
00:02:58,240 --> 00:03:01,430
OK now let's go ahead and create a value.

47
00:03:01,660 --> 00:03:04,950
I'll call this my Val colon.

48
00:03:05,240 --> 00:03:12,770
We'll say this is a double anoda time capitalizing d here I will say that's equal to 2.5.

49
00:03:12,790 --> 00:03:14,630
Now I have my avowe is a double.

50
00:03:14,630 --> 00:03:16,450
That's equal to 2.5.

51
00:03:16,460 --> 00:03:23,270
I have my declaration of VAR or Vau the name hole and the data type equal to and then that literal.

52
00:03:23,600 --> 00:03:30,190
Let's go ahead and discuss reassignments remember I said that variable's can be reassigned to FISA.

53
00:03:30,200 --> 00:03:33,010
My VCR is equal to.

54
00:03:33,050 --> 00:03:35,940
Let's go ahead and try to reassign this to a string.

55
00:03:36,030 --> 00:03:37,550
Hello.

56
00:03:37,790 --> 00:03:38,770
We're going to get an error.

57
00:03:38,810 --> 00:03:44,150
And it says Type mismatch and that's because even though this is a variable and it supports reassignments

58
00:03:44,570 --> 00:03:48,740
the assignment that you're reassigning to has to actually be the same data type.

59
00:03:48,740 --> 00:03:51,620
So notice that it actually says required integer.

60
00:03:51,620 --> 00:03:55,690
In this case we can go ahead and then say my VCR is equal to.

61
00:03:55,700 --> 00:04:01,180
Let's go ahead and make it 100 and now we've successfully reassign that variable.

62
00:04:01,400 --> 00:04:03,680
Let's go ahead and try the same thing with my value.

63
00:04:03,680 --> 00:04:10,310
So if I say my vowel is equal to hello I'll get an error again.

64
00:04:10,330 --> 00:04:12,570
But notice the error is different this time.

65
00:04:12,620 --> 00:04:18,170
Even though there's a type mismatch it actually says error re-assignment to now which means you cannot

66
00:04:18,170 --> 00:04:20,450
reassign a value.

67
00:04:20,450 --> 00:04:27,320
You can only do that for variables so even if I say my vowel is equal to and we are using doubles so

68
00:04:27,320 --> 00:04:30,510
I say maybe ten point one I'll still get that error.

69
00:04:30,530 --> 00:04:31,450
Re-assignment to.

70
00:04:31,550 --> 00:04:38,600
Well now as you program along we'll usually actually use just values in order to try to take care of

71
00:04:38,600 --> 00:04:42,790
possible re-assignment errors as we go along for larger chunks of code.

72
00:04:42,860 --> 00:04:46,770
Now really depends on what you're doing whether you're going to use a variable or a value.

73
00:04:46,970 --> 00:04:51,880
And we'll talk about those situations when we actually make larger scripts of code.

74
00:04:51,950 --> 00:04:57,650
But throughout the majority of this course we're going to be using now a little more often than variable's

75
00:04:58,670 --> 00:04:59,290
OK.

76
00:04:59,440 --> 00:05:04,510
So let's go ahead and show you how Skala can actually infer data types that we don't have to constantly

77
00:05:04,530 --> 00:05:10,170
the Klare it's double boolean etc. so we can go ahead and in this.

78
00:05:10,190 --> 00:05:14,350
I'm going to go in and clear this council say control L here since I'm on Windows.

79
00:05:14,470 --> 00:05:16,340
Now it's clear that OK.

80
00:05:16,450 --> 00:05:17,500
So I'm at Scala.

81
00:05:17,500 --> 00:05:25,010
I'll go ahead and say the vowel of C is equal to 12 and I'll hit enter.

82
00:05:25,010 --> 00:05:28,680
So notice here how it says C is an integer equal to 12.

83
00:05:28,780 --> 00:05:33,630
So Scala is actually inferring the data type based on the literal that it gave it.

84
00:05:33,640 --> 00:05:35,910
And this is going to save you a lot of time and a lot of effort.

85
00:05:35,950 --> 00:05:39,300
So you don't constantly have to say it's double or boolean.

86
00:05:39,430 --> 00:05:42,430
And throughout the course this is the kind of assignment we're going to be working with.

87
00:05:42,430 --> 00:05:46,780
The majority of the time we'll go ahead and show you a couple more examples of this.

88
00:05:46,840 --> 00:05:53,700
Maybe you want to go ahead and create a string so you can say my underscore string is equal to and then

89
00:05:53,700 --> 00:05:57,200
in double quotes here I can say something like Hello.

90
00:05:57,450 --> 00:06:02,430
And then I have my string is equal to and in first that string data type based off those double quotes

91
00:06:02,700 --> 00:06:04,840
and it says equal to Hello.

92
00:06:04,890 --> 00:06:11,220
Now is a quick know there are rules as far as what are valid names and invalid names for an object in

93
00:06:11,220 --> 00:06:12,240
Scala.

94
00:06:12,300 --> 00:06:18,000
You can't have names start with some sort of special character or a number so you can't say something

95
00:06:18,000 --> 00:06:19,730
like two.

96
00:06:20,160 --> 00:06:23,020
My string is equal to hello.

97
00:06:23,370 --> 00:06:28,080
Otherwise you'll get an error because you'll get an invalid literal number so you can't start off values

98
00:06:28,080 --> 00:06:29,670
or variables of a number.

99
00:06:29,670 --> 00:06:35,400
The other thing you should also try to avoid doing is using periods instead of underscores so you can't

100
00:06:35,400 --> 00:06:39,470
say something like my string is equal to.

101
00:06:39,570 --> 00:06:41,050
Hello.

102
00:06:41,080 --> 00:06:43,500
That's also going to give an error.

103
00:06:43,510 --> 00:06:51,460
Now I want you to be aware that you can avoid this error if you use these sort of Dasch these dasht

104
00:06:51,460 --> 00:06:59,080
quotes here we can say my string dash and this is actually below that tilde sign on your keyboard and

105
00:06:59,080 --> 00:07:02,320
then say hello and this will actually work.

106
00:07:02,320 --> 00:07:07,960
However I don't recommend that you actually use this will just use underscores throughout this course

107
00:07:07,960 --> 00:07:12,210
because that's usually the main way skald developers will assign names.

108
00:07:12,360 --> 00:07:13,320
OK.

109
00:07:13,390 --> 00:07:15,330
So go ahead and review the notes.

110
00:07:15,400 --> 00:07:21,100
But main Maine thinks the take out of this are values versus variables that variables can be reassigned

111
00:07:21,220 --> 00:07:22,360
values cannot.

112
00:07:22,570 --> 00:07:29,170
And also valid naming schemes such as using underscores and starting with lower case letters instead

113
00:07:29,170 --> 00:07:31,960
of starting with numbers or using dots.

114
00:07:32,230 --> 00:07:32,970
OK.

115
00:07:33,100 --> 00:07:35,260
Hope you found this pretty straightforward.

116
00:07:35,320 --> 00:07:38,260
Go ahead and post any questions you have to the Q&amp;A forums.

117
00:07:38,260 --> 00:07:42,580
We're still keeping it pretty simple just using the command prompt but later on we're going to expand

118
00:07:42,580 --> 00:07:46,360
our knowledge and actually use a script in the next section of the course.

119
00:07:46,360 --> 00:07:46,930
OK.

120
00:07:47,080 --> 00:07:48,910
Thanks everyone and I'll see you at the next lecture.
