WEBVTT
1
00:00:04.910 --> 00:00:10.460
Hello everyone and welcome to the while loops lecture for Scala programming this lecture going to learn

2
00:00:10.460 --> 00:00:15.350
how to create a while loop in Scala and also learn how to use the break command which allows us to break

3
00:00:15.380 --> 00:00:17.790
out of a loop based on some sort of condition.

4
00:00:17.960 --> 00:00:20.730
Let's go ahead and jump to the text editor to get started.

5
00:00:21.110 --> 00:00:21.410
All right.

6
00:00:21.410 --> 00:00:23.000
Here I am at the text editor.

7
00:00:23.000 --> 00:00:25.990
Let's go ahead and get started with some while loops.

8
00:00:26.150 --> 00:00:30.120
In this case we're going to start off by creating a variable not a values.

9
00:00:30.120 --> 00:00:34.590
We're going to use VR as our key word because we're actually going to be re-assigning disvalue.

10
00:00:34.790 --> 00:00:38.640
Let's go in and say the variable x is equal to zero.

11
00:00:40.000 --> 00:00:46.190
And then the while loop is going to say while you'll have a print C's here you'll say wow.

12
00:00:46.270 --> 00:00:47.700
And then some sort of blink condition.

13
00:00:47.710 --> 00:00:57.220
So we'll say while X is less than five curly braces here we'll print a few lines we'll say prints.

14
00:00:57.280 --> 00:01:00.370
In this case I'm going to use this as formatting here.

15
00:01:00.400 --> 00:01:03.440
Second actually type in the variable itself.

16
00:01:03.460 --> 00:01:13.270
I'll say X is currently and then we'll say dollar sign X Close's print CS and then we'll say Crantz

17
00:01:14.540 --> 00:01:22.350
Ellen and then we will say X is still less than 5.

18
00:01:22.360 --> 00:01:30.880
Adding one to X and then finally we're going to go at once X will say x is equal to x plus 1.

19
00:01:30.960 --> 00:01:35.700
Go ahead and save that and let's go in and run this and make sure it works for us.

20
00:01:35.820 --> 00:01:39.690
And you've got to be careful when you're dealing with kloofs because if you accidentally have a while

21
00:01:39.690 --> 00:01:45.660
loop that has infinitely true here you'll have an infinite while loop and you'll have to kill your terminal

22
00:01:45.870 --> 00:01:48.180
in order to actually get your program to run.

23
00:01:48.180 --> 00:01:55.110
So let's go ahead and load this Skala programming Skala script and know what we get out here and expand

24
00:01:55.110 --> 00:01:55.380
this.

25
00:01:55.380 --> 00:02:00.060
We can actually read it will end up getting X is currently 0 which makes sense it's a very first run

26
00:02:00.060 --> 00:02:01.060
of this variable.

27
00:02:01.140 --> 00:02:05.740
We print the line the X is still currently less than 5 at once X and then.

28
00:02:05.760 --> 00:02:10.660
Here we actually add 1 to X execute this again and we keep going while this is true.

29
00:02:10.680 --> 00:02:16.620
And then finally once x is equal to 5 it will no longer print these two statements and it will stop

30
00:02:16.680 --> 00:02:18.000
this loop.

31
00:02:18.000 --> 00:02:22.150
So that's the basics of a WHILE loop hopefully already pretty familiar with this concept.

32
00:02:22.220 --> 00:02:27.570
It's just while put in your condition in your parentheses and then in this curly brackets whatever block

33
00:02:27.570 --> 00:02:29.850
of code you want to actually execute.

34
00:02:29.850 --> 00:02:32.110
Now let's discuss the break statement.

35
00:02:32.250 --> 00:02:36.160
Skala doesn't actually have a built in break functionality.

36
00:02:36.240 --> 00:02:39.460
You have to import it from its utility controls.

37
00:02:39.540 --> 00:02:41.610
Let me go ahead and show you what I mean by that.

38
00:02:41.640 --> 00:02:50.790
I'm going to delete these lines and say VAR of y is equal to zero.

39
00:02:51.140 --> 00:02:55.870
And then before that actually going to import some functionality I will say import.

40
00:02:56.060 --> 00:03:07.160
You'd still control loops not control dots and then capital B breaks dot underscore and with that import

41
00:03:07.160 --> 00:03:14.510
statement I can import the break keyword so that Brakey word doesn't come just built into Skala.

42
00:03:14.510 --> 00:03:17.260
You'll have to import it from its utility controls.

43
00:03:17.270 --> 00:03:18.620
Then we set up this variable.

44
00:03:18.620 --> 00:03:20.490
Why is equal to zero.

45
00:03:20.690 --> 00:03:25.740
And then I'm going to go ahead and say while in a very similar fashion as we did earlier.

46
00:03:25.850 --> 00:03:35.670
While Y is less than 10 curly braces Prince Allen and this case I'm going to do a very similar thing

47
00:03:35.670 --> 00:03:44.160
I'll say why is currently and then Dollar Sign why so we get that current value of y and then I'm going

48
00:03:44.160 --> 00:03:45.480
to go ahead and say print.

49
00:03:45.540 --> 00:03:54.650
Ellen will say why is still less than 10 at one to why.

50
00:03:54.720 --> 00:03:56.190
Going to go ahead and do that.

51
00:03:56.190 --> 00:04:06.490
We'll say why is equal to Y plus one but I'm going to have an if statement here so I will say if y ever

52
00:04:06.490 --> 00:04:12.160
becomes equal to 3 I will go ahead and in the same line I type in this break.

53
00:04:12.230 --> 00:04:14.470
Keyword is just a lowercase break.

54
00:04:14.620 --> 00:04:16.750
But this will only work as a keyword.

55
00:04:16.750 --> 00:04:22.540
If you have this import statement this break keyword isn't builtin you have to import it from one to

56
00:04:22.540 --> 00:04:23.440
Scalia's library.

57
00:04:23.440 --> 00:04:27.280
So let's go ahead and save this interview interviewed this one more time before we run it.

58
00:04:27.370 --> 00:04:33.640
Where importing utility control break stot underscore and then we're saying a variable of white will

59
00:04:33.640 --> 00:04:34.210
say zero.

60
00:04:34.230 --> 00:04:38.590
Because we choose a variable because we're going to be re-assigning it with line 8 here.

61
00:04:38.680 --> 00:04:39.560
Now we're going to say a while.

62
00:04:39.580 --> 00:04:41.380
Why is less than 10.

63
00:04:41.410 --> 00:04:42.870
Print the current value of y.

64
00:04:42.910 --> 00:04:48.190
If it's still less than 10 which means this while it is still happening we add on to why go ahead and

65
00:04:48.190 --> 00:04:51.430
actually perform that operation that line 8 and then inline 9.

66
00:04:51.430 --> 00:04:53.670
We say if y is equal to 3.

67
00:04:53.770 --> 00:04:55.720
Go ahead and break out of this while loop.

68
00:04:55.840 --> 00:04:58.130
So let's run this and make sure it works.

69
00:04:58.150 --> 00:05:00.590
I'm going to expand this window a little bit.

70
00:05:01.700 --> 00:05:05.750
And we'll go ahead and Skoll a program that Skala see what we get.

71
00:05:05.780 --> 00:05:09.290
OK so what happens here if I just expand this a little more.

72
00:05:09.290 --> 00:05:14.540
We get the import tool that controls break statement letting us know that we're importing something

73
00:05:14.900 --> 00:05:17.710
we see why is an integer equal to zero.

74
00:05:17.840 --> 00:05:23.170
And then we see 0 1 2 and notice that the moment why is it a 3.

75
00:05:23.180 --> 00:05:27.190
We actually use this break control to break out of this loop.

76
00:05:27.530 --> 00:05:32.870
OK so that's how you can use break if you ever need the sort of break operation from other languages

77
00:05:33.260 --> 00:05:35.880
in languages such as Python breaks actually built in.

78
00:05:35.900 --> 00:05:38.390
But Skala you're going to go ahead and have to import it.

79
00:05:38.450 --> 00:05:42.320
Using this line right here and you can always reference the notes for this lecture in case you ever

80
00:05:42.320 --> 00:05:44.270
want to reference that actual code.

81
00:05:44.270 --> 00:05:47.410
And that's basically all there is to know for while loops.

82
00:05:47.480 --> 00:05:51.500
Again be careful because if you run something that's always going to be true you'll have an infinite

83
00:05:51.500 --> 00:05:52.850
running while loop.

84
00:05:52.850 --> 00:05:54.850
Thanks everyone and I'll see you at the next lecture.
