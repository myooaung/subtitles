WEBVTT
1
00:00:05.590 --> 00:00:11.140
Hello everyone and welcome to the dates and time stamps lecture in this lecture we're going to be discussing

2
00:00:11.140 --> 00:00:15.140
how to work with dates and time stamp information with SPARK data frames.

3
00:00:15.280 --> 00:00:18.890
Now there's actually a lot of functions and options that are available to you here.

4
00:00:18.910 --> 00:00:22.930
So we're also going to go ahead and explore the documentation a little bit and shoot the most common

5
00:00:22.930 --> 00:00:26.380
operations to perform on a working date and time data.

6
00:00:26.380 --> 00:00:29.250
Let's go ahead and jump to the text editor to get started.

7
00:00:29.740 --> 00:00:30.030
All right.

8
00:00:30.040 --> 00:00:32.440
Here I am at the text editor.

9
00:00:32.530 --> 00:00:33.370
A quick note.

10
00:00:33.400 --> 00:00:38.070
The files we're going to be using are the dates and time stamps that Skala script.

11
00:00:38.090 --> 00:00:41.580
This says all the notes that we're going to be going over this lecture.

12
00:00:41.740 --> 00:00:47.240
And if you also notice that we're going to be reading the Citigroup 2006 2008 data again.

13
00:00:47.320 --> 00:00:52.370
So if you remember from one of the previous lectures the Citigroup data its stock information.

14
00:00:52.390 --> 00:00:58.510
And one of the columns in this state of frame was the date of that particular stock closing price high

15
00:00:58.510 --> 00:00:59.730
price et cetera.

16
00:00:59.740 --> 00:01:04.520
So that's the column we're going to be working with when dealing with this data in this lecture.

17
00:01:04.570 --> 00:01:10.090
Go ahead and copy and paste the first three code lines so starting the spark session importing it and

18
00:01:10.090 --> 00:01:15.160
then going ahead and reading that Citigroup data let's print the schema just so we can remember what

19
00:01:15.280 --> 00:01:21.220
this actually looks like you're going to save this and upload this.

20
00:01:21.270 --> 00:01:26.590
Let's see that Skala script that I'm running in again here we can see that we have a time stamp object

21
00:01:26.890 --> 00:01:27.530
for the date.

22
00:01:27.550 --> 00:01:30.460
And then we have open high low close and volume prices.

23
00:01:30.460 --> 00:01:32.750
So this is the column we're going to be working with.

24
00:01:32.800 --> 00:01:37.520
Now there's a ton of options as far as working with time and date information.

25
00:01:37.750 --> 00:01:43.450
If you go ahead and go to the dates and time stamp thought Skala script you'll see that there's a long

26
00:01:43.450 --> 00:01:44.480
Eurail here.

27
00:01:44.530 --> 00:01:49.330
This is just another link to the actual functions page that we've seen before.

28
00:01:49.330 --> 00:01:51.310
So you've seen this already in other lectures.

29
00:01:51.320 --> 00:01:53.220
Will we go ahead and copy this.

30
00:01:53.230 --> 00:01:58.480
I'm going to jump to that real quick so we can explore it just a little bit so we can get a sense of

31
00:01:58.540 --> 00:02:00.330
all the options available to us.

32
00:02:00.340 --> 00:02:02.110
We're going to go ahead and jump to my browser now

33
00:02:05.290 --> 00:02:05.540
OK.

34
00:02:05.540 --> 00:02:09.410
So here I am at the object functions page that we've seen before.

35
00:02:09.410 --> 00:02:14.240
These are all the functions that are available for a data frame and if you scroll down you should see

36
00:02:14.240 --> 00:02:19.610
eventually past the aggregate function and the collection functions the date time functions.

37
00:02:19.820 --> 00:02:24.920
So these are all the functions that are available to you that you can perform date time operations on

38
00:02:25.310 --> 00:02:28.610
any particular date or time stamp column.

39
00:02:28.610 --> 00:02:34.190
So for instance you can extract the day of the year so you can use this day of year function you pass

40
00:02:34.190 --> 00:02:39.650
in the column and it extracts the day of the year as an integer from a given date slash time stamp slash

41
00:02:39.650 --> 00:02:40.450
string.

42
00:02:40.810 --> 00:02:41.230
OK.

43
00:02:41.360 --> 00:02:47.600
So you can see there's lots of things you can extract so minutes months get months between the quarter.

44
00:02:47.600 --> 00:02:52.650
So whether in the first quarter second quarter that sort of financial information you can see there's

45
00:02:52.650 --> 00:02:58.850
there's some experimental window operations and these luckily have quite a bit more documentation to

46
00:02:58.850 --> 00:03:02.960
them but hopefully we can see that you have a lot of options here when dealing with dates and times

47
00:03:02.960 --> 00:03:07.690
that information we're going to go ahead and walk you through and the very basics of dealing with these

48
00:03:07.690 --> 00:03:09.030
sort of date time functions.

49
00:03:09.110 --> 00:03:13.400
And then you can comeback that this specific you are Airlink when you're dealing with your own data

50
00:03:13.490 --> 00:03:15.620
and need to work for your own time stamp data.

51
00:03:15.620 --> 00:03:19.540
Let's go ahead and jump back to the tech sector to explore a couple of these functions.

52
00:03:22.520 --> 00:03:22.770
All right.

53
00:03:22.770 --> 00:03:25.160
Here I am back at the text editor.

54
00:03:25.200 --> 00:03:29.580
Let me go ahead and just show you how you can use any of these sort of time stamp functions that we

55
00:03:29.580 --> 00:03:30.800
saw earlier.

56
00:03:30.840 --> 00:03:35.640
So couple of the most useful ones are going to be kind of selecting you know the month or the year or

57
00:03:35.640 --> 00:03:37.200
the dates etc..

58
00:03:37.380 --> 00:03:44.750
So we can see if we go ahead and just print out the bath head and print out the first two rows.

59
00:03:44.970 --> 00:03:47.750
You'll notice that we have the whole time stamp information.

60
00:03:47.790 --> 00:03:53.300
In this case we just have the date information since there is no actually specific time here but this

61
00:03:53.290 --> 00:03:54.410
is a time stamp object.

62
00:03:54.420 --> 00:03:57.270
You could have anything from hours to Minutes et cetera.

63
00:03:57.510 --> 00:04:01.930
So let's go ahead and try to select just the month out of this time stamp object.

64
00:04:01.930 --> 00:04:06.930
And the way you do that is you would visit that your L that we just saw look at the function you need

65
00:04:07.020 --> 00:04:07.550
in this case.

66
00:04:07.560 --> 00:04:08.560
It's called month.

67
00:04:08.850 --> 00:04:11.440
And then you pasand the column itself.

68
00:04:11.640 --> 00:04:19.190
In this case it's the dates column and that will return if we go ahead and show this.

69
00:04:19.220 --> 00:04:21.500
Let me run this for us.

70
00:04:23.020 --> 00:04:26.980
That's going to return a column of the month dates.

71
00:04:27.010 --> 00:04:32.090
You notice here all these values say one because all the rows started in January.

72
00:04:32.380 --> 00:04:36.660
So there's only the top 10 heroes you can continue on until we go through the months themselves.

73
00:04:36.780 --> 00:04:45.650
We check out the year instead of the month so we can say year there and run this you'll notice now we

74
00:04:45.650 --> 00:04:52.420
get back the year and all the time stamp information for the very first couple of rows was from 2006.

75
00:04:52.430 --> 00:04:55.150
So let me go ahead and show you a more practical example.

76
00:04:55.160 --> 00:05:01.010
You know usually not just want a singular column data frame with the times the information you want

77
00:05:01.010 --> 00:05:05.430
to use that time stamp affirmation to actually perform some sort of operation.

78
00:05:05.450 --> 00:05:07.640
So let's go ahead and see if we can do this.

79
00:05:07.850 --> 00:05:10.370
Let's try to get the average per year.

80
00:05:10.430 --> 00:05:17.480
So the average stock closing price per year in order to do this are going to go ahead and delete that

81
00:05:18.700 --> 00:05:20.960
going to save Val D-Nev. to.

82
00:05:20.960 --> 00:05:28.390
So that's going to make a new data frame and say thought with column I'm going to name this new column

83
00:05:28.960 --> 00:05:34.580
year and then remember as the second argument we actually pass in the function in this case is that

84
00:05:34.580 --> 00:05:38.850
year function I showed earlier and if you have any to reference what functions are available to you

85
00:05:39.230 --> 00:05:43.440
you can go to that your that we just discussed and then pasand the column itself.

86
00:05:43.460 --> 00:05:49.040
In this case I want to say date and note the difference here I'm passing in the actual column not just

87
00:05:49.040 --> 00:06:01.130
the column name and there we're going to say wow DSF EVGA for averages is equal to DFI to that group

88
00:06:01.130 --> 00:06:07.900
by and I'm going to group by this new year column that I just made and then I'm going to go ahead and

89
00:06:07.900 --> 00:06:14.460
show the mean Methot off of it and then actually I don't want to see all the columns.

90
00:06:14.480 --> 00:06:16.610
I just want to see the closing price.

91
00:06:16.610 --> 00:06:23.860
So let's go and say DSF averages selects and I'm going to use a scarlet notation here just to select

92
00:06:23.860 --> 00:06:30.470
multiple columns to select the year column and the close column.

93
00:06:30.490 --> 00:06:36.790
But what happens is if you'll notice appear you'll see the function name and then the column name.

94
00:06:36.790 --> 00:06:42.540
And in this case when you call mean you're going to end up seeing a Viji and then close.

95
00:06:42.550 --> 00:06:49.480
And this needs to be in string form so keep that in mind if you ever get a result after performing some

96
00:06:49.480 --> 00:06:54.670
sort of operation or function after each group buying or trying to select a lot of time Sparke data

97
00:06:54.690 --> 00:06:59.650
frame's is going to wrap the old column name with whatever the function name you used was.

98
00:06:59.680 --> 00:07:05.380
In this case mine happens to be average but let's say you are doing max or men you would see a max from

99
00:07:05.380 --> 00:07:06.720
in here.

100
00:07:06.730 --> 00:07:07.000
All right.

101
00:07:07.030 --> 00:07:10.960
So let's go ahead and then just show this or run it.

102
00:07:10.960 --> 00:07:14.890
Make sure it all works and we'll break it down for you and show you one more simple example.

103
00:07:17.590 --> 00:07:17.970
OK.

104
00:07:18.020 --> 00:07:22.700
So here we can see the year and then the average closing price for that year.

105
00:07:22.880 --> 00:07:29.810
And you'll notice because the financial crisis from 2006 we have 49 2007 we have for 77 but in 2008

106
00:07:29.810 --> 00:07:31.740
you have a big drop here to 190.

107
00:07:31.940 --> 00:07:37.190
And what you could also do is use order by that we learned about in the group by aggregate functions

108
00:07:37.190 --> 00:07:39.480
to sort this by the year column.

109
00:07:39.500 --> 00:07:44.150
Well let's go ahead and run through this example one more time with the max.

110
00:07:44.240 --> 00:07:51.710
So we go ahead and take our old data frame say with column and then we say year.

111
00:07:51.770 --> 00:07:57.020
So in this case we went ahead and said year is going to be that time stamp function.

112
00:07:57.020 --> 00:08:01.370
Year pass and the column itself not the column name of the column itself.

113
00:08:01.370 --> 00:08:07.070
And I wanted to set that to DFI to then I'm going to grab this new data frame and then I'm going to

114
00:08:07.070 --> 00:08:10.590
group by that year column that I just created above there.

115
00:08:10.660 --> 00:08:16.590
In this case let's go ahead and grab the max so we get the max price for the year not the average price

116
00:08:16.590 --> 00:08:17.780
for the year.

117
00:08:17.960 --> 00:08:21.270
So it's going to be more interesting because of the financial crisis.

118
00:08:21.270 --> 00:08:27.220
Let's go ahead and get the minimum price so just see the floor price for 2006 2007 2008.

119
00:08:27.660 --> 00:08:31.880
And then we're going to set that two averages instead of seeing everything.

120
00:08:31.890 --> 00:08:34.020
I just want to actually grab two columns off of this.

121
00:08:34.010 --> 00:08:40.620
I will say DFI averages instead of averages go in and call this men's and let's go and call this men's

122
00:08:40.620 --> 00:08:41.280
as well.

123
00:08:42.740 --> 00:08:44.690
And this is going to need a change too.

124
00:08:44.750 --> 00:08:47.210
Am I in close.

125
00:08:47.500 --> 00:08:54.250
And let's go in and show this and make sure this all worked to load this up again and explore it.

126
00:08:54.680 --> 00:08:59.030
And now I can see the vast difference in minimum closing prices here.

127
00:08:59.150 --> 00:09:06.590
So you can see in 2006 the lowest price of an entire year as closing was 450 in 2007 the lowest price

128
00:09:06.680 --> 00:09:09.680
for that year in any given day was 292.

129
00:09:09.680 --> 00:09:11.060
But this is incredible.

130
00:09:11.070 --> 00:09:15.020
In 2008 the lowest stock price was $37.

131
00:09:15.020 --> 00:09:20.450
So this really reflects that financial crisis as far as the Citigroup stock which was heavily affected

132
00:09:20.450 --> 00:09:21.220
by that.

133
00:09:21.580 --> 00:09:22.310
OK.

134
00:09:22.370 --> 00:09:27.440
So hopefully you've seen the power of Sparke data frames and how easy it is to use date and time stamp

135
00:09:27.440 --> 00:09:28.400
functions.

136
00:09:28.430 --> 00:09:34.010
Basically what you're going to do is if you ever want to extract some sort of date or time stamp information

137
00:09:34.010 --> 00:09:39.260
from your data you'll go ahead and visit that your URL that I showed earlier apply it using this with

138
00:09:39.260 --> 00:09:43.910
column technique to create a new column with whatever information you want and then you can perform

139
00:09:43.970 --> 00:09:48.650
any sort of operations you want whether it's group by or just an aggregate function that we discussed

140
00:09:48.710 --> 00:09:49.480
earlier.

141
00:09:49.760 --> 00:09:50.270
Okay.

142
00:09:50.540 --> 00:09:52.490
Thanks everyone and I'll see you at the next lecture.
