1
00:00:05,140 --> 00:00:08,310
Hello everyone and welcome to the solutions lecture for the project.

2
00:00:08,320 --> 00:00:11,940
Exercise for the principle component analysis section of the course.

3
00:00:12,220 --> 00:00:13,740
Let's go and get started.

4
00:00:14,080 --> 00:00:14,380
All right.

5
00:00:14,380 --> 00:00:15,220
Here I am.

6
00:00:15,490 --> 00:00:20,770
This is the PCA project exercise thought Skala script and if you want a written reference for everything

7
00:00:20,770 --> 00:00:23,160
going to be coding out you can check it out here and there.

8
00:00:23,170 --> 00:00:26,240
Project exercise underscore solutions that Skala.

9
00:00:26,260 --> 00:00:29,390
Now you start off of the data set description you can read through that.

10
00:00:29,560 --> 00:00:33,270
Let's scroll down until we actually get to the tasks section.

11
00:00:33,300 --> 00:00:34,120
Scroll down.

12
00:00:34,120 --> 00:00:36,470
And here we see Project exercise tasks.

13
00:00:36,490 --> 00:00:41,190
Now the first thing we had to do was import spark and create a spurt session.

14
00:00:41,200 --> 00:00:43,510
That's really easy we've been doing it very often.

15
00:00:43,510 --> 00:00:49,750
By this point in the course we'll say import or Apache that spark that sequel and then call a spark

16
00:00:49,750 --> 00:00:52,770
session and then actually build a spark.

17
00:00:52,770 --> 00:00:59,270
Sessions will save Val Sparke is equal to spark session builder.

18
00:00:59,500 --> 00:01:01,360
We can call the app name whatever we want.

19
00:01:01,360 --> 00:01:04,280
Or you even have to put an app name or call it PCa.

20
00:01:04,360 --> 00:01:09,490
This part doesn't really matter but we just want to make sure we get or create that spark session.

21
00:01:09,490 --> 00:01:14,400
Then we want to use SPARC to read in the cancer underscore data file the check out the cancer underscore

22
00:01:14,410 --> 00:01:15,010
data file.

23
00:01:15,010 --> 00:01:19,870
It's also located here under the PCA folder and just by looking at this we can actually tell it's comma

24
00:01:19,870 --> 00:01:21,210
separated variable.

25
00:01:21,250 --> 00:01:26,340
So that means we should use the C S V as a file format for this.

26
00:01:26,500 --> 00:01:31,080
We can say valid data is equal to spark read.

27
00:01:31,150 --> 00:01:37,420
The option will Hetter to be true because we just saw the file there was a header there and then we

28
00:01:37,420 --> 00:01:42,340
also want to infer the schema that we make sure we get the right schema types so that we're actually

29
00:01:42,340 --> 00:01:46,870
dealing with numerical information instead of string information.

30
00:01:47,040 --> 00:01:53,920
And then I want to say that format is CXXVI and I will ask to load in that file.

31
00:01:54,060 --> 00:01:59,640
And in this case the file is just called Cancer underscore data and there is no extension this case.

32
00:01:59,740 --> 00:02:06,820
I don't want to print the scheme of the data it will say data print schema.

33
00:02:07,000 --> 00:02:11,110
You actually don't have the close princes if you don't want to there but let's slow this up and see

34
00:02:11,110 --> 00:02:12,280
if it works.

35
00:02:12,520 --> 00:02:22,530
Well say load PCA project underscore exercise Skala or you would just run the actual solutions scul

36
00:02:22,540 --> 00:02:24,240
script depending on what you were using.

37
00:02:24,470 --> 00:02:30,750
But here we can see that we have our output on the printed schema.

38
00:02:30,750 --> 00:02:35,580
You can see the mean radius mean texture I mean perimeter mean area etc. and if you scroll the way down

39
00:02:35,580 --> 00:02:40,310
here we see that we have these call names will actually visit that interest a little bit but that's

40
00:02:40,320 --> 00:02:44,060
the actual column names that are left for you you have to type them all out.

41
00:02:44,060 --> 00:02:44,820
Up next.

42
00:02:44,880 --> 00:02:51,630
Let's go ahead and just comment that out so we don't deal with it but we want to import PCA Victor Sembler

43
00:02:51,630 --> 00:02:54,980
and standard scaler from M-L that feature.

44
00:02:55,230 --> 00:03:03,060
So say imports or that Patchi that sparked the M-L the feature and then I'm going to be doing multiples.

45
00:03:03,060 --> 00:03:10,840
I just put this in curly brackets PCa and then call standard scaler and then call vector assembler and

46
00:03:10,840 --> 00:03:13,580
then I want to import vectors from m-L.

47
00:03:13,680 --> 00:03:18,970
Lynn alge so that should be imports or Apache.

48
00:03:19,130 --> 00:03:21,100
That sparked e-mail.

49
00:03:21,390 --> 00:03:22,170
Ouch.

50
00:03:22,390 --> 00:03:28,000
And then just call vectors I don't want to use the vector assembler to convert the input columns to

51
00:03:28,000 --> 00:03:31,800
the cancer data to a single output column of an array called features.

52
00:03:31,800 --> 00:03:37,090
I've done this many times before where we have to basically coalesce all those column features into

53
00:03:37,090 --> 00:03:39,460
a single column with the array of features.

54
00:03:39,580 --> 00:03:43,060
Then we set the input columns from which we are supposed to be the values that we want to call this

55
00:03:43,060 --> 00:03:44,770
new object assembler.

56
00:03:44,800 --> 00:03:50,020
And since there are so many columns I left this line for you this array of the column names which means

57
00:03:50,050 --> 00:03:51,640
all you have to do is this.

58
00:03:51,640 --> 00:04:00,010
We can say Val assembler is equal to a new vector assembler.

59
00:04:01,640 --> 00:04:04,970
Set the input calls to the call names.

60
00:04:05,180 --> 00:04:12,470
The array of column names and then just set the output call to features hopefully that made your life

61
00:04:12,470 --> 00:04:13,520
a little easier.

62
00:04:13,520 --> 00:04:17,810
And then we want to use the assembler to transform our data frame to a single column called features

63
00:04:18,170 --> 00:04:23,610
which means I'll create some value called output and call assembler.

64
00:04:23,840 --> 00:04:27,270
Transform transform that data we have.

65
00:04:27,350 --> 00:04:34,370
And we will just select the actual feature column or features column I should say.

66
00:04:34,370 --> 00:04:39,950
And often it's a good idea to normalize each feature to have a unit standard deviation and or zero mean

67
00:04:39,950 --> 00:04:41,220
when using PCA.

68
00:04:41,410 --> 00:04:42,750
And this is essentially a priest step.

69
00:04:42,740 --> 00:04:47,060
So hopefully you're able to figure out how to do this based off the documentation.

70
00:04:47,180 --> 00:04:52,460
The documentation has a really nice example of how to use this standard scaler It's really similar to

71
00:04:52,460 --> 00:04:53,500
use in the PCA.

72
00:04:53,590 --> 00:04:56,450
But let me walk you through it and in case you were able to figure it out.

73
00:04:56,630 --> 00:05:04,510
Going to create a value called scaler and set that equal to a new standard scalar object.

74
00:05:04,530 --> 00:05:08,940
I'm going to put this all in parentheses so I can write this on multiple lines.

75
00:05:09,890 --> 00:05:12,110
Then let me start a new line here.

76
00:05:13,310 --> 00:05:14,040
Tab.

77
00:05:14,450 --> 00:05:20,510
And then I'm going to set the input columns to be the features column we just created and then I want

78
00:05:20,510 --> 00:05:25,400
to set the output call to be my scaled version of these features.

79
00:05:25,400 --> 00:05:28,500
In this case I'm just going to call it scaled features.

80
00:05:28,520 --> 00:05:31,010
That's what the example in documentation does.

81
00:05:31,010 --> 00:05:40,130
And then I want to say set with SDD meaning set with the standard deviation or pass in the boolean true

82
00:05:40,130 --> 00:05:46,860
for that and set with mean we can go ahead and say whoops false.

83
00:05:46,920 --> 00:05:51,300
And the way you would get these values is just by following the the standard scalar documentation example

84
00:05:51,300 --> 00:05:52,170
exactly.

85
00:05:52,200 --> 00:05:54,190
But basically here you're just choosing the option.

86
00:05:54,210 --> 00:05:58,750
Are you scaling with integrity relation or if the mean true or false etc..

87
00:05:58,850 --> 00:06:02,490
You can check out the documentation example under Mehldau features.

88
00:06:02,490 --> 00:06:07,620
Basically the exact same location of the PCA documentation example.

89
00:06:07,620 --> 00:06:12,870
Now we want to compute summary statistics by actually fitting that standard scalar and we do as you

90
00:06:12,870 --> 00:06:15,150
say create some new value.

91
00:06:15,150 --> 00:06:24,950
This case I will say Val staler model is equal to scalar fit output WIPs.

92
00:06:25,040 --> 00:06:25,880
There it is.

93
00:06:25,970 --> 00:06:31,580
And we want to normalize each feature to some unit standard deviations so you'd transform off of this

94
00:06:31,640 --> 00:06:41,290
scalar model object create your scaled data which means I will say so now scaled data is equal to that

95
00:06:41,290 --> 00:06:45,570
scalar model I just built or just created scalar model.

96
00:06:45,570 --> 00:06:54,600
There it is and then I will say transform my outputs so I fit to the output and then I transform it.

97
00:06:54,600 --> 00:06:56,640
And there's basically those two steps here.

98
00:06:56,640 --> 00:07:01,650
So a normal model instead of a feature usually just fit it and then do something with it.

99
00:07:01,650 --> 00:07:04,630
But in this case we want to fit and transform.

100
00:07:04,680 --> 00:07:05,140
OK.

101
00:07:05,340 --> 00:07:10,530
Now it's time to actually use PCN principal component analysis to reduce the features to some sort of

102
00:07:10,620 --> 00:07:11,940
principal component.

103
00:07:11,940 --> 00:07:17,610
And we want to create a new PC object they'll take in the scale features and output those PCA features

104
00:07:17,610 --> 00:07:25,540
using four principal components and then fit the scale data basically following along with the example

105
00:07:25,570 --> 00:07:26,570
from documentation.

106
00:07:26,590 --> 00:07:37,130
I will say new PCa and then say set the input calls or the input column to be those scaled features

107
00:07:37,140 --> 00:07:38,190
that I just made.

108
00:07:39,160 --> 00:07:45,250
And then I want to set the output column to something like PCA features.

109
00:07:45,250 --> 00:07:51,260
So all I'm doing is I'm taking the features I just scaled and I'm going to basically apply principal

110
00:07:51,280 --> 00:07:52,320
component analysis.

111
00:07:52,330 --> 00:07:58,000
And as I mentioned the last lecture we have this set came at trick and that's how many principal components

112
00:07:58,000 --> 00:08:00,700
you want in this case I asked you to put in four.

113
00:08:00,820 --> 00:08:06,760
And as I mentioned since principal components are difficult to interpret There's no set correct value

114
00:08:06,760 --> 00:08:11,530
for what how many principal components you should choose really depends on what you're trying to achieve

115
00:08:11,530 --> 00:08:11,980
here.

116
00:08:11,980 --> 00:08:15,380
How much do you want to coalesce your data.

117
00:08:16,550 --> 00:08:20,920
And then we want to save fit to the actual scaled data that we just created.

118
00:08:20,930 --> 00:08:26,510
And once your PCa has been it's created and transformed the scale data and call this new data frame

119
00:08:26,800 --> 00:08:36,150
PCA ADF which means I just create that value PCA ZF is equal to that PCA object they just made.

120
00:08:36,150 --> 00:08:39,090
And I'm going to call transform on the scale data.

121
00:08:39,090 --> 00:08:42,160
So again it's another fit transform do.

122
00:08:42,480 --> 00:08:45,700
And then we want to show the new PCA features.

123
00:08:45,930 --> 00:08:53,730
So I'll create some value called results and say PCA DMF and I will select those features just as we

124
00:08:53,730 --> 00:08:56,040
did in the documentation example.

125
00:08:56,130 --> 00:09:02,180
So PCA features and I will say results show but kinda close.

126
00:09:02,190 --> 00:09:08,010
Prince is there and if we also want to use head confirm that the output column array of PC features

127
00:09:08,010 --> 00:09:14,270
only has four principal components I can say results the head of one.

128
00:09:14,280 --> 00:09:15,470
So let me say this.

129
00:09:15,510 --> 00:09:18,240
Let's run it and expand this a little bit so we can see it.

130
00:09:19,110 --> 00:09:20,700
Now I'm going to press up here.

131
00:09:20,700 --> 00:09:25,300
Load up project exercise and make sure everything worked out and I don't have any errors there.

132
00:09:26,730 --> 00:09:30,630
So if we take a look at this I do believe I got one error and here we can see the air.

133
00:09:30,630 --> 00:09:36,600
So just a little quick debugging tip you come up here and see the air dial the input calls is not a

134
00:09:36,600 --> 00:09:42,600
member of standard scalar that makes sense should be just a simple input call not calls plural.

135
00:09:42,600 --> 00:09:49,710
So if I scroll up here to where we have that standard scalar let's fix that to the input call because

136
00:09:49,710 --> 00:09:52,010
it only expects a 1 column feature.

137
00:09:52,020 --> 00:09:57,230
So let's say that run this again and make sure we don't get that same error as we run it a second time.

138
00:09:59,010 --> 00:10:00,450
OK and that's what we expect.

139
00:10:00,450 --> 00:10:02,570
So they can see the output here.

140
00:10:02,580 --> 00:10:07,590
These are our principal component features and we scroll down here and we can confirm that there's only

141
00:10:07,590 --> 00:10:10,950
four principal components based off of what we did.

142
00:10:11,070 --> 00:10:15,300
And that's really all there was to it to this piece of exercise.

143
00:10:15,570 --> 00:10:20,670
Again the PC is pretty simple to do once you have an understanding of how to actually use meld melded

144
00:10:20,700 --> 00:10:25,680
feature objects you set the input call to the features do some sort of transformation of the output

145
00:10:25,680 --> 00:10:28,500
comm fit transform etc..

146
00:10:28,650 --> 00:10:31,110
Do you have any questions feel free to post the Q&amp;A forums.

147
00:10:31,170 --> 00:10:35,970
But definitely check out the documentation too because they have great examples of how to use each feature

148
00:10:36,090 --> 00:10:37,050
object.

149
00:10:37,050 --> 00:10:39,090
Thanks everyone and I'll see you at the next lecture.
