1
00:00:05,200 --> 00:00:12,590
Hello everyone and welcome to the lecture on arrays in Scala arrays are mutable unlike the list which

2
00:00:12,590 --> 00:00:18,770
is immutable and the way Skala is designed you're usually going to be using lists much more often than

3
00:00:18,770 --> 00:00:20,510
you'll be using arrays.

4
00:00:20,540 --> 00:00:23,800
You can go ahead and check out the resource link for more information.

5
00:00:23,900 --> 00:00:29,690
As far as what's going on under the hood for performance differences between a list versus an array

6
00:00:30,050 --> 00:00:34,500
that it's far worse when you're programming a scholar at the basic level that we're doing right now.

7
00:00:34,580 --> 00:00:35,970
They're going to feel so similar.

8
00:00:36,040 --> 00:00:39,940
You may not actually notice a difference between an array and the list.

9
00:00:39,980 --> 00:00:44,780
So we're going to do this lecture as quickly show how to create an array but most likely throughout

10
00:00:44,780 --> 00:00:49,880
the course as far as this section we're going to be using lists rather than arrays.

11
00:00:49,880 --> 00:00:53,820
Let's go ahead and jump to the spark shell and go to the Scala interpreter.

12
00:00:53,840 --> 00:00:56,800
OK here I am at my Scala interpreter.

13
00:00:56,990 --> 00:01:04,030
You can create an array just by saying Val or var pany Fionna value a variable the name of the array.

14
00:01:04,040 --> 00:01:09,110
I'm going to go ahead and call it our for array and then use the keyword array just like you would a

15
00:01:09,110 --> 00:01:11,350
list and then pass in the elements you want.

16
00:01:11,690 --> 00:01:13,070
And Scalzo report back.

17
00:01:13,070 --> 00:01:15,830
They have an array containing whatever the data type is.

18
00:01:15,860 --> 00:01:22,330
In this case integers so it can do something similar again just by saying re-assigning that to an array

19
00:01:22,570 --> 00:01:25,750
for instance strings such as ABC

20
00:01:29,210 --> 00:01:32,010
and now Ill reports back you have an array of strings.

21
00:01:32,060 --> 00:01:38,960
And just like a list can also hold multiple data types so you can say array 1 to point to maybe a boolean

22
00:01:38,960 --> 00:01:41,210
in there and you'll see array.

23
00:01:41,240 --> 00:01:42,320
Any Val.

24
00:01:42,800 --> 00:01:48,800
Now from this standpoint arrays look extremely similar to a list like I mentioned go ahead and check

25
00:01:48,800 --> 00:01:55,280
out that resource link as far as more detailed explanations of what's going on underneath the hood and

26
00:01:55,520 --> 00:01:57,990
the connections to Java based language.

27
00:01:58,130 --> 00:02:02,870
As far as the differences between an array and a list what I really want to let you know about though

28
00:02:02,990 --> 00:02:06,650
in regards to arrays is the use of the range function.

29
00:02:06,890 --> 00:02:12,530
So this range function is going to allow us to generate an array containing a sequence of increasing

30
00:02:12,560 --> 00:02:14,730
integers in a given range.

31
00:02:14,840 --> 00:02:20,890
So there's various ways of calling it you can say either array dot range.

32
00:02:21,080 --> 00:02:29,500
And then you'll input a starting integer and the ending index so 0 to 10 is going to give you from 0

33
00:02:29,770 --> 00:02:37,150
to integer 9 because indexing starts at zero and you can actually specify a step size as well as a third

34
00:02:37,150 --> 00:02:44,630
argument here so you can say zero up to and not including 10 and go in step sizes of two.

35
00:02:44,860 --> 00:02:49,810
And that gives you a bunch of even numbers so zero plus two two plus two is four etc..

36
00:02:50,170 --> 00:02:55,790
And you can call it off of the array but a lot of times what you will end up doing is just calling range.

37
00:02:55,810 --> 00:03:01,570
But notice that I'm using a capital R here and this is going to like to do the exact same thing it's

38
00:03:01,570 --> 00:03:08,130
calling it from Skala dot collection the immutable dot range instead of just saying returning an array.

39
00:03:08,140 --> 00:03:10,460
So that's really the difference here between these two.

40
00:03:10,480 --> 00:03:13,000
One is the actual array being returned.

41
00:03:13,240 --> 00:03:19,960
And another one this capital our range is this actual Skala collection that range object being returned

42
00:03:19,960 --> 00:03:20,260
to you.

43
00:03:20,260 --> 00:03:25,870
So that's a difference between using the array that range versus the capital our range.

44
00:03:25,870 --> 00:03:30,730
Now if you're just using this sort of thing in a for loop which will go over later the capital our range

45
00:03:30,790 --> 00:03:32,440
should be totally fine.

46
00:03:32,440 --> 00:03:32,920
OK.

47
00:03:33,130 --> 00:03:35,950
So that's really all you need to know as far as the basics of array.

48
00:03:35,950 --> 00:03:40,240
Like I mentioned that throughout this course and throughout Scala in a general sense you're probably

49
00:03:40,240 --> 00:03:44,760
going to be using lists much more often than an actual array type object.

50
00:03:44,830 --> 00:03:45,270
All right.

51
00:03:45,520 --> 00:03:47,520
Thanks everyone and I'll see you at the next lecture.
