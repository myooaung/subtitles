WEBVTT
1
00:00:04.940 --> 00:00:09.380
Hello everyone and welcome to the lecture on four loops in this lecture we're going to learn how to

2
00:00:09.380 --> 00:00:14.030
perform some sort of code for every item in an iterable sequence using Skala.

3
00:00:14.030 --> 00:00:17.210
Let's go ahead and jump to our text editor to get started.

4
00:00:17.210 --> 00:00:22.790
All right so here I am at my text editor I'm going to go ahead and get started by copying and pasting

5
00:00:22.790 --> 00:00:28.220
some of the notes for this lecture which is just a general format and the general format is going to

6
00:00:28.220 --> 00:00:33.240
be the for keyword and then in print sees some sort of chosen item name.

7
00:00:33.410 --> 00:00:39.920
And then this arrow symbol then iterable sequence whether that's a list or a range etcetera array and

8
00:00:39.920 --> 00:00:42.550
then you're going to go ahead and do something in that code block.

9
00:00:42.620 --> 00:00:45.230
Let me go ahead and show you some examples.

10
00:00:45.390 --> 00:00:50.490
Some say for as a keyword and then in parentheses I will say item.

11
00:00:50.780 --> 00:00:52.470
And let's go ahead and iterate through a list.

12
00:00:52.490 --> 00:01:00.200
So I say this sort of Arrow this dash and then let's go in and create a list and we'll say one two three

13
00:01:00.200 --> 00:01:01.200
here.

14
00:01:01.280 --> 00:01:06.830
Then we have curly brackets and whatever you want to occur for every item in this list you go ahead

15
00:01:06.860 --> 00:01:08.010
and run it here.

16
00:01:08.300 --> 00:01:17.640
So let's say I just want to go in and say prints hello save that and let's go out and run this.

17
00:01:17.650 --> 00:01:20.390
So I notice I should see Hello printed three times.

18
00:01:20.680 --> 00:01:25.720
And if I want to actually work with these items in this list whatever these elements are I can actually

19
00:01:25.720 --> 00:01:32.670
just put in that item as a keyword here and then I will go ahead and run this and I get one to three.

20
00:01:32.710 --> 00:01:35.530
Now something to know is just like in many other languages.

21
00:01:35.530 --> 00:01:39.340
Whatever you want this variable name to be you can go ahead and choose that.

22
00:01:39.340 --> 00:01:43.110
So if you want this to be something like jelly.

23
00:01:43.330 --> 00:01:47.110
And then we'll go ahead and reference GLT here.

24
00:01:47.110 --> 00:01:48.410
This will work the exact same way.

25
00:01:48.410 --> 00:01:52.370
So if I run this again whatever you want to call this yeah you're free to do so.

26
00:01:52.540 --> 00:01:56.110
So you should keep that in mind and try to call it something that may be a week later you're looking

27
00:01:56.110 --> 00:01:57.740
back your code you'll try to remember.

28
00:01:57.760 --> 00:02:03.130
So for something like this a good thing may be numb for numbers since this list just contains integers

29
00:02:03.380 --> 00:02:07.830
which you also want to avoid doing however is using a keyword such as ANC.

30
00:02:07.900 --> 00:02:12.790
And hopefully if you're a text editor ID has syntax highlighting it will warn you that that's kind of

31
00:02:12.790 --> 00:02:14.590
a reserved keyword.

32
00:02:14.710 --> 00:02:19.610
So if we run this one more time notice we get one to three again.

33
00:02:19.610 --> 00:02:21.690
All right so that's how you can iterate through a list.

34
00:02:21.710 --> 00:02:24.740
Let me go ahead and show you how you can iterate through maybe an array.

35
00:02:24.950 --> 00:02:32.800
You could go ahead and make something like a radar range and then say zero to five.

36
00:02:32.930 --> 00:02:38.330
Save that and run it and this will again just work the exact same way.

37
00:02:38.330 --> 00:02:40.540
And you can do sets as well.

38
00:02:40.730 --> 00:02:48.080
But something to note about a set we say one two three here is that a set may not have a particular

39
00:02:48.110 --> 00:02:48.440
order.

40
00:02:48.440 --> 00:02:52.850
So as you add more and more this set it may not actually be in the order that it was placed into the

41
00:02:52.850 --> 00:02:53.120
set.

42
00:02:53.120 --> 00:02:54.570
So keep that in mind.

43
00:02:55.010 --> 00:02:55.360
OK.

44
00:02:55.370 --> 00:03:00.710
So that's really all you need to know as far as the basics of a for loop as a very simple line.

45
00:03:00.710 --> 00:03:06.470
Let's go ahead and build it up with some flow control such as if else statements and do some more complicated

46
00:03:06.470 --> 00:03:07.160
examples.

47
00:03:07.250 --> 00:03:14.770
So we get a general idea of the format we're going to go ahead and say for and we'll save for now.

48
00:03:15.000 --> 00:03:23.850
Now let's go ahead and just do an iterable here such as range 0 to 10 and then I'm going to say if the

49
00:03:23.850 --> 00:03:32.580
numb 2 is equal to zero I'm going to go ahead and the line.

50
00:03:32.910 --> 00:03:40.320
In this case I'm going to use this as formatting to say no is even and know what I'm doing here and

51
00:03:40.350 --> 00:03:46.640
basically going throughout this range of numbers and checking if that no mod 2 is equal to zero.

52
00:03:46.710 --> 00:03:50.580
That means it's an even number so I'm going to go ahead and use this print formatting with the Dollar

53
00:03:50.580 --> 00:03:55.040
Sign here to actually print out that number else this number is odd.

54
00:03:55.230 --> 00:03:58.170
So we'll go ahead and run another line here.

55
00:03:58.170 --> 00:04:07.740
Another set of curly brackets and say Prince l n s double quotes now is odd closes double quotes and

56
00:04:07.740 --> 00:04:09.640
let's go ahead and run this and see if it works out.

57
00:04:11.500 --> 00:04:17.230
And here we go it looks like it's working fine in this case it's a little weird because zero 2 is equal

58
00:04:17.230 --> 00:04:21.640
to zero so we can actually if you ignore that first one we are getting the results you expect.

59
00:04:21.640 --> 00:04:24.950
One is on two is even three is odd for us even etc..

60
00:04:25.330 --> 00:04:30.060
Let's go ahead and do one more example without number so we can get a little variety here.

61
00:04:30.090 --> 00:04:38.860
I'm going to save our names is equal to list and I will say just put a couple of names here let's put

62
00:04:38.860 --> 00:04:40.070
in John.

63
00:04:40.120 --> 00:04:41.810
Just some shorter names.

64
00:04:42.100 --> 00:04:44.780
Abe let's do Cindy.

65
00:04:45.080 --> 00:04:47.010
Make sure that's double quotes there.

66
00:04:48.000 --> 00:04:52.170
And then we're going to go putting cat or Catherine or something.

67
00:04:52.170 --> 00:04:54.770
So that's going to be our list of names.

68
00:04:54.780 --> 00:05:01.520
I'm going to go ahead and call that names then I'm going to say for name in names.

69
00:05:01.520 --> 00:05:04.340
So notice how there's different in the singular in the plural there.

70
00:05:04.400 --> 00:05:10.850
Just for reference I will say if and since these are strings I can call methods off of them so something

71
00:05:10.850 --> 00:05:18.270
like starts with will say if it starts of A C I will go ahead and unclearly curly brackets for that

72
00:05:18.270 --> 00:05:20.930
flow control say prints line.

73
00:05:21.270 --> 00:05:28.740
And again I'm going to just do some print formatting here her string inter-relations say name starts

74
00:05:28.740 --> 00:05:31.670
with C so nothing too crazy here.

75
00:05:31.680 --> 00:05:36.360
We've seen this all before we're just adding these puzzle pieces together to build some more complicated

76
00:05:36.360 --> 00:05:37.490
code snippets.

77
00:05:37.500 --> 00:05:40.660
They go ahead and clear the Skala and run it again.

78
00:05:41.190 --> 00:05:46.210
And it looks like we get what we expect out Cindy sort of a C and cat starts with C..

79
00:05:46.260 --> 00:05:46.800
All right.

80
00:05:46.860 --> 00:05:51.390
So that's really all you need to know about for loops and we expand some of these concepts to include

81
00:05:51.390 --> 00:05:53.840
control flow statements with for loops.

82
00:05:53.850 --> 00:05:57.270
Thanks everyone and I'll see you at the next lecture or we discuss functions.
