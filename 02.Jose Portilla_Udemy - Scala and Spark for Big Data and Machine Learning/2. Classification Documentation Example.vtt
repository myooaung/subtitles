WEBVTT
1
00:00:05.090 --> 00:00:10.340
Hello everyone and welcome to the documentation example for logistic regression for the classification

2
00:00:10.340 --> 00:00:12.570
section of machine learning with SPARK.

3
00:00:12.890 --> 00:00:18.110
In this lecture we are going to walk you through the official documentation example that comes a spark

4
00:00:18.110 --> 00:00:21.380
to show you how to actually create logistic regression classifier.

5
00:00:21.380 --> 00:00:25.130
And in this example they also make use of something called an object and Sparke.

6
00:00:25.130 --> 00:00:29.270
We're going to introduce this concept and then later on throughout the course when we actually talk

7
00:00:29.270 --> 00:00:35.200
about expanding this to big data clusters on A W-S We will talk more about objects.

8
00:00:35.240 --> 00:00:39.500
I'm going to jump to the text editor now and open up a file to get started.

9
00:00:40.310 --> 00:00:47.900
OK here I am at the classification folder and I've opened up Doc underscore Lague Reg Skala and this

10
00:00:47.900 --> 00:00:52.970
is basically the actual documentation example I've just put it in a script here so you can easily find

11
00:00:52.970 --> 00:00:53.550
it.

12
00:00:53.570 --> 00:00:56.970
You'll notice that this makes use of something called object.

13
00:00:56.990 --> 00:01:02.210
We're going to explore objects a lot later on in the course but right now I'll just keep things simple

14
00:01:02.360 --> 00:01:06.810
and basic explained object as a way to package a bunch of functions together.

15
00:01:06.940 --> 00:01:12.020
You can call off of an object we're going to walk through this documentation example line by line and

16
00:01:12.020 --> 00:01:15.860
then in the next lecture I will actually code out line by line.

17
00:01:15.890 --> 00:01:20.900
A more complicated example but let's see just a quick taste of what a logistic regression classifier

18
00:01:20.900 --> 00:01:22.330
looks like with Sparke.

19
00:01:22.340 --> 00:01:28.940
First thing you want to do is go to import or a patch that sparked the MLK classification and then choose

20
00:01:28.940 --> 00:01:29.710
your algorithm.

21
00:01:29.720 --> 00:01:33.800
In this case we want to keep things simple so we will choose the most basic classification algorithm

22
00:01:34.160 --> 00:01:35.750
which is logistic regression.

23
00:01:36.020 --> 00:01:39.800
Maybe not most basic but at least extremely common.

24
00:01:39.800 --> 00:01:44.960
Then we also need to import that Apache that sparked that sequel spark session and then we are going

25
00:01:44.960 --> 00:01:46.510
to create an object.

26
00:01:46.520 --> 00:01:50.580
And as I mentioned later on we will actually show in more detail objects are free.

27
00:01:50.580 --> 00:01:56.690
Now you can basically think of an object as a way to organize a bunch of functions and values together.

28
00:01:56.690 --> 00:02:01.580
And this is a very simple object from the documentation that basically just has one function called

29
00:02:01.640 --> 00:02:02.870
Main.

30
00:02:02.930 --> 00:02:05.160
So we create this object called logistic regression.

31
00:02:05.180 --> 00:02:08.990
In this case lastic are classic example.

32
00:02:09.170 --> 00:02:11.180
That's the actual documentation example.

33
00:02:11.210 --> 00:02:15.340
So if you go to the documentation it will tell you to find this file.

34
00:02:15.410 --> 00:02:17.280
Here we just got a subset of it.

35
00:02:17.480 --> 00:02:23.360
Then we create a function main and this main unit basically just starts the spark session.

36
00:02:23.360 --> 00:02:28.580
Gives it a name we load in our training data spark that read that format and again we're using this

37
00:02:28.580 --> 00:02:35.000
kind of strange formatting lib SVM and we are loading up this sample app SVM data text and it looks

38
00:02:35.000 --> 00:02:37.200
a little strange but that's just the way it goes.

39
00:02:38.070 --> 00:02:43.170
We'll show you later on the next lecture how to actually load from a c v file or some other more common

40
00:02:43.170 --> 00:02:44.580
file formats.

41
00:02:44.880 --> 00:02:46.680
And then here's where it comes into play.

42
00:02:46.670 --> 00:02:54.240
The logistic regression we want to save Velle L R for religious regression equals create a new logistic

43
00:02:54.240 --> 00:02:57.250
regression model object and then you can set parameters.

44
00:02:57.270 --> 00:03:02.760
In this case the documentation example has already set several parameters for logistic regression such

45
00:03:02.760 --> 00:03:06.890
as Max adorations elastic net parameters etc..

46
00:03:07.020 --> 00:03:11.580
If you want to find out more about what these parameter values actually mean I encourage you to do the

47
00:03:11.580 --> 00:03:16.740
reading in an introduction to SQL learning where they cover a lot of these topics and what these parameters

48
00:03:16.740 --> 00:03:17.720
actually mean.

49
00:03:17.850 --> 00:03:23.250
A lot of times you have to actually set these parameters depending on what your data looks like.

50
00:03:23.250 --> 00:03:27.420
So there's no right or wrong answer as far as what values to put in here.

51
00:03:27.420 --> 00:03:31.740
If you want more understanding about the mathematics behind what this parameter values actually mean

52
00:03:32.040 --> 00:03:34.260
definitely check out the reading.

53
00:03:34.440 --> 00:03:37.820
Once you've created the model you can go ahead and fit the model.

54
00:03:37.820 --> 00:03:41.730
And as a quick note back to these parameters you don't even have to set any parameters.

55
00:03:41.760 --> 00:03:46.090
You don't want to and then you can say print the coefficients.

56
00:03:46.110 --> 00:03:50.690
Here we are going to print the logistic regression coefficients and we call it directly off the model.

57
00:03:50.750 --> 00:03:56.360
Once been fit to that training data and then we can also print out the intercept of the logistic regression

58
00:03:56.360 --> 00:03:57.230
model.

59
00:03:57.230 --> 00:04:04.350
And here we can say sparked up stop because an entire object want to go ahead and stop that spark session.

60
00:04:04.360 --> 00:04:06.990
I'm going to save this and show you how to run it.

61
00:04:07.310 --> 00:04:18.800
Going to open a new terminal load that up it now I'm going to just say spark the shell and hit enter

62
00:04:18.920 --> 00:04:20.120
and load up a spark shell

63
00:04:23.000 --> 00:04:27.700
OK my spark Shell has started up and I have a spark session ready to go.

64
00:04:27.710 --> 00:04:32.450
Now let's load this start script and once we load it and run it we'll have a better understanding of

65
00:04:32.450 --> 00:04:35.360
how this object notation actually works.

66
00:04:35.430 --> 00:04:48.180
Godsake colon load doc underscore log Regg Scala and we're going to load it and do the imports and then

67
00:04:48.180 --> 00:04:53.220
notice that it says the find object logis logistic regression of elastic net example and we have no

68
00:04:53.220 --> 00:04:54.690
actual output results.

69
00:04:54.690 --> 00:04:56.640
Given everything that we just asked for.

70
00:04:56.640 --> 00:05:02.650
That's because we have to actually call this main method or function off of this object.

71
00:05:02.910 --> 00:05:10.170
Which means if I call logistic I can actually probably have autocomplete this but disaggregation with

72
00:05:10.770 --> 00:05:17.360
tab autocomplete main close parentheses enter.

73
00:05:17.420 --> 00:05:22.640
Now I'm actually calling this main function which in this case calls that sparked sessions grabs at

74
00:05:22.640 --> 00:05:28.100
training data creates the logistic regression model fits the model and then prints out the coefficients

75
00:05:28.100 --> 00:05:29.940
in the intercept of that model.

76
00:05:30.200 --> 00:05:34.280
And this is what it's going to look like when you actually run an object.

77
00:05:34.280 --> 00:05:40.010
And later on we'll show you how to pack these even more using something like SBT.

78
00:05:40.020 --> 00:05:42.480
You notice here we actually get the output.

79
00:05:42.500 --> 00:05:48.470
Now the reason we haven't been really using this sort of notation with objects is because if we look

80
00:05:48.470 --> 00:05:52.980
back at the scripts notice that we have training data.

81
00:05:52.980 --> 00:05:55.920
Maybe you want to know what that training data actually looks like.

82
00:05:55.950 --> 00:06:00.450
Usually in the spark shell after running the scripts that we've been showing you you would have been

83
00:06:00.450 --> 00:06:03.180
able to say something like training that show.

84
00:06:03.630 --> 00:06:09.870
But in this case since it's actually inside of the object it's not going to be able to find those values.

85
00:06:09.870 --> 00:06:14.100
Those are stopped when you have only the object itself.

86
00:06:14.220 --> 00:06:20.640
And notice that in this object we also stopped the spark session down here and that's why we've been

87
00:06:20.640 --> 00:06:25.530
kind of avoiding this sort of object notation because it's not very useful when you're just trying to

88
00:06:25.530 --> 00:06:28.140
learn this stuff when you're just learning this stuff.

89
00:06:28.140 --> 00:06:34.890
It's really nice to have functions and values created line by line that way once you run your script

90
00:06:34.980 --> 00:06:36.110
in the spark shell.

91
00:06:36.240 --> 00:06:40.550
You can actually play around those values to understand them more OK.

92
00:06:40.650 --> 00:06:45.500
That's really all there is for this symbologist regression classifier documentation example.

93
00:06:45.630 --> 00:06:50.640
If you didn't understand too much about this don't worry we're actually going to dive much deeper line

94
00:06:50.640 --> 00:06:53.730
by line and code out a full logistic regression example.

95
00:06:53.880 --> 00:06:59.160
And that's going to be coming up in the next lecture where we walk you through this file right here.

96
00:06:59.160 --> 00:07:00.440
Log Regg example.

97
00:07:00.510 --> 00:07:03.530
And no here we won't be following the object notation.

98
00:07:03.540 --> 00:07:08.210
That way you can just play around with all these values in the actual Spark's shell.

99
00:07:08.550 --> 00:07:09.020
OK.

100
00:07:09.180 --> 00:07:13.710
If you have any questions feel free to post them to the Q&amp;A forums but hopefully this was just a very

101
00:07:13.710 --> 00:07:17.450
simple overview of how to create a logistic regression classifier.

102
00:07:17.520 --> 00:07:19.330
By now I should start feeling familiar.

103
00:07:19.410 --> 00:07:25.460
Based on what you've done with the linear regression class or excuse me linear regression models basically

104
00:07:25.460 --> 00:07:28.240
you just import these models get your data.

105
00:07:28.440 --> 00:07:31.470
Train those models after creating a model of some sort of parameters.

106
00:07:31.500 --> 00:07:36.020
If you want the parameters and then you can grab stuff off that trained model.

107
00:07:36.380 --> 00:07:38.930
OK thanks everyone and I will see you at the next lecture.
