1
00:00:05,030 --> 00:00:08,960
Hello everyone and welcome to lecture on sets in Scala.

2
00:00:09,290 --> 00:00:15,890
A set is a collection that contains no duplicate elements meaning that each element in a set is a unique

3
00:00:15,980 --> 00:00:16,850
element.

4
00:00:16,850 --> 00:00:19,550
And there's actually two kinds of sets in Scala.

5
00:00:19,760 --> 00:00:22,160
The immutable sets and the mutable set.

6
00:00:22,400 --> 00:00:27,170
Let's go ahead and jump to the Scala interpreter using the spark shell to get started.

7
00:00:27,170 --> 00:00:27,400
All right.

8
00:00:27,400 --> 00:00:29,230
Here we are at the interpreter.

9
00:00:29,240 --> 00:00:35,240
Let me go ahead and start off by showing you how to build an empty set and create a value called S.

10
00:00:35,450 --> 00:00:42,380
and I'll set it equal to this command set close parentheses and notice that this is a capital S and

11
00:00:42,380 --> 00:00:46,680
this is going to return back Skoll duck collection got immutable.

12
00:00:46,710 --> 00:00:48,200
That said nothing.

13
00:00:48,200 --> 00:00:54,350
So basically this is telling you that we've created an immutable set which falls under the Scala collections

14
00:00:54,350 --> 00:00:58,370
library and it contains nothing right now.

15
00:00:58,370 --> 00:01:06,970
So we can say that S is equal to set and actually passing some values here such as integers 1 2 3.

16
00:01:07,210 --> 00:01:12,590
And when we pass that in we get skald the collection immutable set but Scheller reports back that it

17
00:01:12,590 --> 00:01:15,020
contains integers.

18
00:01:15,020 --> 00:01:18,320
Now as I mentioned a Scala sets are a set.

19
00:01:18,320 --> 00:01:21,960
In general is a collection that contains no duplicate elements.

20
00:01:21,980 --> 00:01:28,970
So if I define a set with many duplicate elements so we'll go ahead and put many instances of ones and

21
00:01:28,970 --> 00:01:30,100
twos and threes.

22
00:01:30,190 --> 00:01:33,600
I run that I get the exact same thing as I did last time.

23
00:01:33,740 --> 00:01:35,670
So it contains no duplicate elements.

24
00:01:35,670 --> 00:01:38,030
It's just the one the two in the three.

25
00:01:38,150 --> 00:01:41,070
Let's go ahead and show you how you can create a mutable set.

26
00:01:41,900 --> 00:01:47,370
So now that I've created immutable sets it means that it can't add anything to them.

27
00:01:47,440 --> 00:01:51,270
I want to go ahead and for instance add another number to a set.

28
00:01:51,290 --> 00:01:52,630
I need a mutable one.

29
00:01:53,090 --> 00:01:56,400
So in order to do that I can say Val S is equal to.

30
00:01:56,520 --> 00:02:01,820
And we're basically going to almost copy the output curve that we got last time we'll say collection

31
00:02:01,870 --> 00:02:11,680
dot mutable that set and then passing the numbers for instance one two three here.

32
00:02:11,710 --> 00:02:14,970
So now we have Skala that collection that mutable that set.

33
00:02:15,010 --> 00:02:19,480
And you'll notice that basically a lot of things and Skala as far as the collections are concerned have

34
00:02:19,480 --> 00:02:21,940
a mutable version and an immutable version.

35
00:02:22,120 --> 00:02:27,780
Kind of in the same way that vowel is immutable and variables are VAR or mutable.

36
00:02:27,850 --> 00:02:30,660
So there's kind of this two way system here.

37
00:02:30,960 --> 00:02:31,280
OK.

38
00:02:31,300 --> 00:02:37,610
So we have S and a reminder that S is now a mutable set that contains the integers 1 2 and 3.

39
00:02:37,730 --> 00:02:43,430
They can go ahead and add another integer to this by saying s plus equals four.

40
00:02:43,610 --> 00:02:47,760
And then we'll notice as is now equal to a set of 1 2 3 4.

41
00:02:47,840 --> 00:02:54,710
If you try doing that with an immutable set so I'm going to go ahead and clear that and hit up on my

42
00:02:54,710 --> 00:02:58,840
arrow key to get back to this original set.

43
00:02:58,850 --> 00:03:00,350
So now s is immutable.

44
00:03:00,350 --> 00:03:02,950
If I try to add that for again note.

45
00:03:03,020 --> 00:03:04,430
Notice what's going to happen here.

46
00:03:04,520 --> 00:03:09,860
I get an error it says value plus equals is not a member of skald a collection immutable set which makes

47
00:03:09,860 --> 00:03:11,750
sense because it's immutable.

48
00:03:11,780 --> 00:03:15,160
We can't actually make any adjustments to it.

49
00:03:15,200 --> 00:03:15,720
All right.

50
00:03:15,950 --> 00:03:19,580
Let me go ahead and show you another method for mutable sets.

51
00:03:19,580 --> 00:03:20,770
So just to review.

52
00:03:21,050 --> 00:03:25,280
Let's go in and say Val immunise s are.

53
00:03:25,350 --> 00:03:33,490
IMO it's funny how you want to read it and we'll go out and call this from collection dot mutable dot

54
00:03:33,490 --> 00:03:37,950
sets and I'm going to pass in one to three.

55
00:03:38,050 --> 00:03:43,560
And now if I call that immutable Esser I'm nuts I can say.

56
00:03:43,570 --> 00:03:47,080
Plus sequel's for if I call it again.

57
00:03:47,120 --> 00:03:49,040
Notice I have one two three four.

58
00:03:49,040 --> 00:03:55,970
Another way of adding another number or another item to this saying add and then go in and put in a

59
00:03:55,970 --> 00:03:56,840
5 there.

60
00:03:58,470 --> 00:04:03,890
Return back True and true is basically telling you that adding that five successfully.

61
00:04:03,900 --> 00:04:06,140
So if I call it mutes or I'm nuts.

62
00:04:06,270 --> 00:04:08,710
Now I have 1 5 2 3 4.

63
00:04:08,820 --> 00:04:12,900
So notice here that a set doesn't actually retain an order.

64
00:04:12,970 --> 00:04:15,140
Kind of works in the same way that a hash table does.

65
00:04:15,240 --> 00:04:17,940
As far as the location of those items.

66
00:04:18,060 --> 00:04:20,730
So you cannot grab from an index from a set.

67
00:04:20,970 --> 00:04:25,910
So that's a very important distinction to make versus a list or an array that does have an order.

68
00:04:25,950 --> 00:04:30,790
Sets are an unordered collection of unique elements.

69
00:04:30,790 --> 00:04:34,060
Now there's a few more useful operations I want to show you.

70
00:04:34,990 --> 00:04:42,070
For instance if I go in and clear this if I show what I am says right now has 1 5 2 3 4 I can go ahead

71
00:04:42,070 --> 00:04:49,610
and call max and min offer that set to ground the minimum and maximum values.

72
00:04:49,820 --> 00:04:55,000
And another important operation they are probably going to be using later on is actually let's say I

73
00:04:55,000 --> 00:05:01,520
have a list of 1 2 3 1 2 3.

74
00:05:01,630 --> 00:05:03,090
So it has duplicate elements.

75
00:05:03,100 --> 00:05:09,160
I can actually cast this to a set and the way I can do that is just by calling the two method off of

76
00:05:09,160 --> 00:05:09,410
it.

77
00:05:09,450 --> 00:05:14,000
And if I click tab here you'll notice I have a lot of options as far as where I can cast it to.

78
00:05:14,200 --> 00:05:21,340
But I'll just say cast two sets and now I have my list to set which means I can actually set this equal

79
00:05:21,340 --> 00:05:22,350
to something.

80
00:05:22,360 --> 00:05:32,120
So for instance I can say thou my new set is equal to my list thought to set.

81
00:05:32,270 --> 00:05:32,930
And there it is.

82
00:05:32,930 --> 00:05:36,240
Enough I call my new set.

83
00:05:36,340 --> 00:05:41,240
I get that set and notice that the list had multiple elements in it 1 2 3 1 2 3.

84
00:05:41,320 --> 00:05:47,160
But the set version gets reduced down to 1 to 3 since it does not contain duplicate elements.

85
00:05:47,200 --> 00:05:52,730
So the main things to get out of this is how to create a set how to add items to a mutable set and the

86
00:05:52,740 --> 00:05:57,830
differences between an immutable immutable set and the fact that a set doesn't retain any sort of order.

87
00:05:57,880 --> 00:05:59,500
It's also important to notice.

88
00:05:59,500 --> 00:06:02,520
OK thanks everyone and I'll see you at the next lecture.
