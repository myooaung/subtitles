1
00:00:05,240 --> 00:00:08,950
Hello everyone and welcome to the arithmetic and numbers lecture.

2
00:00:09,800 --> 00:00:14,420
This is our first lecture in the Scala basics section of this course and we're going to start off just

3
00:00:14,420 --> 00:00:16,570
by using the shell or the ripple.

4
00:00:16,580 --> 00:00:19,240
That's the read evaluate prints and loop.

5
00:00:19,280 --> 00:00:22,880
We're going to explain basic arithmetic and numbers of Skala if you want.

6
00:00:22,880 --> 00:00:27,560
You can write these commands as a script but for right now since we're just going one line at a time

7
00:00:27,800 --> 00:00:32,570
it makes more sense just to go ahead and use the shell later on we're going to expand to more lines

8
00:00:32,600 --> 00:00:34,570
and use an actual text editor.

9
00:00:34,580 --> 00:00:38,230
But for now right now one line at a time and the shell should be fine.

10
00:00:38,270 --> 00:00:40,690
I'm going to go ahead and jump to my command prompt.

11
00:00:40,700 --> 00:00:42,640
Or if you're a Mac user you're terminal.

12
00:00:42,680 --> 00:00:44,160
In order to get started.

13
00:00:44,200 --> 00:00:46,470
All right here I am at my command prompt.

14
00:00:46,490 --> 00:00:48,460
Are your terminal if you're a Mac user.

15
00:00:48,680 --> 00:00:51,300
Let's go ahead and start up the spark shell.

16
00:00:51,470 --> 00:00:52,040
If you want.

17
00:00:52,040 --> 00:00:58,010
You can either use CD to change the rectory to your SPARC folder or you are saving all your scripts

18
00:00:58,340 --> 00:01:04,040
or if you follow the installation instructions properly you should be able to call Spark's shell from

19
00:01:04,160 --> 00:01:06,020
anywhere on your computer.

20
00:01:06,050 --> 00:01:08,020
So let's go ahead and just start the spark shell.

21
00:01:08,060 --> 00:01:12,860
You can do this basically in any folder you want if you follow the instructions and the pending whether

22
00:01:12,860 --> 00:01:17,670
or not you actually turn off the warnings you may receive some warnings as I'm showing here.

23
00:01:17,670 --> 00:01:22,170
But here we have it the sparks shell and we're ready to type in some Scollard code.

24
00:01:22,310 --> 00:01:27,340
So let's go ahead and just walk through the very basics of numbers in arithmetic using Skala.

25
00:01:27,530 --> 00:01:31,070
This is just going to be a few lines of code nothing too intense.

26
00:01:31,070 --> 00:01:32,780
So there's two main types of numbers.

27
00:01:32,780 --> 00:01:34,910
We're going to be working with throughout the course.

28
00:01:35,060 --> 00:01:39,080
There's integers which are whole numbers and that can be something like 100.

29
00:01:39,290 --> 00:01:40,350
So if I hit enter.

30
00:01:40,400 --> 00:01:43,690
You'll notice an output you get rez 0 for.

31
00:01:43,700 --> 00:01:44,870
Result zero.

32
00:01:45,020 --> 00:01:47,790
You get a colon integer equals 100.

33
00:01:47,840 --> 00:01:50,460
And basically this is called telling you a couple of things you have.

34
00:01:50,470 --> 00:01:51,880
Result zero.

35
00:01:51,920 --> 00:01:54,810
It's an integer and it's equal to 100.

36
00:01:54,920 --> 00:01:58,700
And the other type of number we're going to be working with our floating point numbers are what are

37
00:01:58,700 --> 00:02:03,020
known as doubles and basically those are going to be numbers with some sort of decimal point in them

38
00:02:03,470 --> 00:02:05,750
for that resolution.

39
00:02:05,810 --> 00:02:08,590
And here you can see we have read 1 for result 1.

40
00:02:08,780 --> 00:02:10,910
Double is equal to 2.5.

41
00:02:10,910 --> 00:02:15,550
Now we're going to tackle Resler on Rezwan how we actually use those later on.

42
00:02:15,690 --> 00:02:19,480
But right now let's go ahead and just go through the very basics of arithmetic.

43
00:02:19,490 --> 00:02:24,550
So right now we're just treating this Skala shell or interpreter as a basic calculator.

44
00:02:24,620 --> 00:02:31,400
If you want to do addition for example one plus one just adding You wanted the subtraction to minus

45
00:02:31,400 --> 00:02:31,840
one.

46
00:02:31,850 --> 00:02:33,070
It's a dash there.

47
00:02:33,230 --> 00:02:41,090
Multiplication is just an asterix to Asterix five is two times five division will depend whether or

48
00:02:41,090 --> 00:02:43,510
not you're using integers or doubles.

49
00:02:43,510 --> 00:02:46,590
So if you say one divided by two.

50
00:02:46,820 --> 00:02:48,680
So that slash there.

51
00:02:48,830 --> 00:02:50,980
Notice I get integer equals zero.

52
00:02:50,990 --> 00:02:51,720
As a result.

53
00:02:51,740 --> 00:02:57,190
And that's because division with integers in Scala is going to perform what's known as classic division.

54
00:02:57,230 --> 00:03:02,660
So if you actually want truth Division One of these numbers is going to have to be a double or a floating

55
00:03:02,660 --> 00:03:03,630
point number.

56
00:03:03,680 --> 00:03:12,420
So I don't need to say one point zero divided by two or I can say 1 divided by 2.0 or we can have them

57
00:03:12,440 --> 00:03:16,000
both be double so point 1.0 divided by 2.0.

58
00:03:16,130 --> 00:03:22,460
And here we get that true result that 0.5 so won the vote by 2 in classic division becomes zero because

59
00:03:22,460 --> 00:03:23,750
it rounds it down.

60
00:03:23,900 --> 00:03:28,040
But true division which is probably what we're usually looking for you're going to have to use a double

61
00:03:28,040 --> 00:03:33,920
there and know how Skala actually tells you the type of data that's return back and we'll discuss data

62
00:03:33,920 --> 00:03:37,850
types more thoroughly as we encounter more of them as we go along.

63
00:03:37,850 --> 00:03:38,300
All right.

64
00:03:38,390 --> 00:03:43,090
So we just cover in addition subtraction multiplication and division with integers and doubles.

65
00:03:43,100 --> 00:03:45,380
Let's go ahead and show a few more examples.

66
00:03:45,380 --> 00:03:49,800
If you want to do exponents there's no base for exponents.

67
00:03:49,910 --> 00:03:54,490
So we actually have to import that and you can just call math.

68
00:03:54,560 --> 00:03:55,710
P o w.

69
00:03:55,730 --> 00:04:02,240
You don't need actually call an import statement just call p O.W. for power from the math library and

70
00:04:02,240 --> 00:04:05,360
then pasand as a first argument with parentheses here.

71
00:04:05,360 --> 00:04:07,700
The number that you want as the base.

72
00:04:07,700 --> 00:04:09,950
And then what you want to raise it to the power.

73
00:04:10,160 --> 00:04:14,790
So for instance if I want four to the power of two I'm going to go ahead and say math.

74
00:04:14,920 --> 00:04:18,740
P o w and then pass and force the power to.

75
00:04:18,800 --> 00:04:20,250
That's going to be 16.

76
00:04:20,300 --> 00:04:24,580
And notice here that even though I pass in integers I get a double as a result.

77
00:04:24,620 --> 00:04:29,550
So that math library and Skala is going to translate that to a double as an output.

78
00:04:29,930 --> 00:04:30,590
OK.

79
00:04:30,800 --> 00:04:36,980
Now something about these results this aria 6 or 7 is Scalia's actually remembering these results.

80
00:04:36,980 --> 00:04:38,660
Meaning I can call them back.

81
00:04:38,660 --> 00:04:44,330
So for instance I can say yes 0 can actually get back that initial result.

82
00:04:44,330 --> 00:04:47,450
Remember the very first thing I typed was 100.

83
00:04:47,450 --> 00:04:50,270
And note that it also gives me read 10.

84
00:04:50,270 --> 00:04:56,590
So I can actually say read 10 plus Reserva and get 100 plus 100.

85
00:04:56,610 --> 00:05:01,470
We won't really be calling results like that too often but I want you to know that it is possible.

86
00:05:01,490 --> 00:05:01,920
OK.

87
00:05:01,970 --> 00:05:03,670
Couple more things I want to go over.

88
00:05:03,680 --> 00:05:06,780
You can specify order of operations with parentheses.

89
00:05:06,950 --> 00:05:15,140
So for example if I were to say one plus two times three plus four order of operations will actually

90
00:05:15,140 --> 00:05:16,780
make the multiplication happen first.

91
00:05:16,790 --> 00:05:23,900
So in this case if I run this I get 11 which is two times three which is six plus five which is 11.

92
00:05:23,900 --> 00:05:29,690
If I actually want one plus two times the result of three plus four I can use parentheses to specify

93
00:05:29,690 --> 00:05:30,270
that.

94
00:05:30,290 --> 00:05:34,790
So one plus two times three plus four.

95
00:05:35,000 --> 00:05:38,480
And then I get 21 which in this case was the result I was looking for.

96
00:05:38,780 --> 00:05:39,410
OK.

97
00:05:39,560 --> 00:05:42,200
Let's go ahead and do a quick understanding check.

98
00:05:42,320 --> 00:05:47,110
Go ahead and see if you can convert three feet to meters using Skala.

99
00:05:47,120 --> 00:05:49,170
So for instance I have three feet.

100
00:05:49,250 --> 00:05:52,070
See if you can convert that to meters using Scala.

101
00:05:52,070 --> 00:05:53,110
Go ahead.

102
00:05:53,150 --> 00:05:54,380
See if you can figure that out.

103
00:05:54,410 --> 00:05:59,540
You mean to do a google search for the actual factor that you need to multiply three by I'll let you

104
00:05:59,540 --> 00:06:00,730
go ahead and try that out.

105
00:06:01,730 --> 00:06:02,330
OK.

106
00:06:02,580 --> 00:06:09,530
Hopefully you able to do a quick Google search and notice that one foot is zero point 3 0 4 8 meters.

107
00:06:09,540 --> 00:06:17,120
So I can say three times zero point 3 0 for eights and then that gets me this results.

108
00:06:17,130 --> 00:06:22,080
Notice the precision here because it's a double it's actually going to try to give me the max precision

109
00:06:22,080 --> 00:06:27,330
possible and it's going to end up rounding off to a one at the end and later on we'll show you how to

110
00:06:27,330 --> 00:06:28,070
deal with that.

111
00:06:28,110 --> 00:06:30,350
If you want to cut down on that precision.

112
00:06:30,420 --> 00:06:30,960
OK.

113
00:06:31,200 --> 00:06:35,310
So that's the basics of arithmetic and numbers in Scala.

114
00:06:35,550 --> 00:06:42,270
We've seen how sculler reports back data types such as integers and doubles and also has these variables

115
00:06:42,270 --> 00:06:45,540
or values such as rest 13 or 12.

116
00:06:45,540 --> 00:06:46,370
Etc..

117
00:06:46,650 --> 00:06:52,020
Later on we're going to go ahead and show you how to actually create variables and values with Scala

118
00:06:52,110 --> 00:06:55,500
and how to assign data types to literal values.

119
00:06:55,560 --> 00:06:57,510
OK so that's all coming up next.

120
00:06:57,510 --> 00:06:59,520
Thanks everyone and I'll see you at the next lecture.
