1
00:00:05,470 --> 00:00:13,060
Hello everyone and welcome to the lecture on maps and Skala maps allow us to have a key value pair storage.

2
00:00:13,060 --> 00:00:16,450
These are sometimes known as hash tables or dictionaries.

3
00:00:16,450 --> 00:00:19,930
Let's go ahead and jump to the skull interpreter to get started.

4
00:00:20,320 --> 00:00:27,490
OK so here I am at the Scala interpreter and the sparks shell I'm going to create a value called my

5
00:00:27,490 --> 00:00:35,050
map and I will set it equal to and will call the map keyword of capital M and basically are going to

6
00:00:35,050 --> 00:00:39,330
pass in what look like key value pairs in the form of tuples.

7
00:00:39,340 --> 00:00:42,930
So for instance I'm going to say A and then one.

8
00:00:43,180 --> 00:00:47,380
So the key is A and then the value associate of that key is one.

9
00:00:47,650 --> 00:00:58,010
And we can continue to do this so have B to and then we'll have for instance C three OK.

10
00:00:58,060 --> 00:01:03,850
And here we have sculled a collection that immutable that map and we can see here we have that string

11
00:01:03,880 --> 00:01:06,680
integer pairing for that key value pair.

12
00:01:06,700 --> 00:01:12,240
And what's also important to note is that Scala uses this dash operator for an arrow.

13
00:01:12,250 --> 00:01:17,200
So the stash and then greater than or less than sign for that arrow.

14
00:01:17,290 --> 00:01:22,930
And that actually points the key value pair so later on we'll see how we can use that to actually create

15
00:01:22,990 --> 00:01:25,630
additions to a dictionary or a map.

16
00:01:25,630 --> 00:01:26,850
In this case.

17
00:01:27,040 --> 00:01:33,940
So let's go ahead and show you how we can do things such as look ups in this map so I can say my map

18
00:01:34,780 --> 00:01:38,470
an imprint sees I can passen the key.

19
00:01:38,500 --> 00:01:42,360
So for instance if I want the value for the key of A.

20
00:01:42,400 --> 00:01:45,130
It returns back the integer value.

21
00:01:45,130 --> 00:01:50,380
So for instance passen see it returns back the integer 3.

22
00:01:50,390 --> 00:01:57,440
So this sort of indexing or look up is really similar as far as print parentheses wise to looking something

23
00:01:57,440 --> 00:02:04,710
up in a list but instead of passing an index or passing in a key since it's a key value pair match chain.

24
00:02:04,730 --> 00:02:09,450
Now let's go ahead and show you what happens if you try to get something that is not present.

25
00:02:09,710 --> 00:02:20,880
So for instance if I say my map and type and D for the key I will get the sort of error here that no

26
00:02:20,880 --> 00:02:25,770
such element exception key not found the.

27
00:02:25,790 --> 00:02:31,670
Now there's another method I want to show you if I go ahead and clear this for my map I can use the

28
00:02:31,690 --> 00:02:41,170
get key word to pasan a key so I can say my map or my map get a returns back 1 here.

29
00:02:41,440 --> 00:02:43,590
If I did the same thing my map get.

30
00:02:43,610 --> 00:02:48,300
But in this case try to put in a key that does not exist.

31
00:02:48,340 --> 00:02:49,780
I get back this option.

32
00:02:49,790 --> 00:02:51,670
Int equals none.

33
00:02:51,710 --> 00:03:03,610
So that's where the difference lies between doing something like my map of a versus my amap gets a notice

34
00:03:03,700 --> 00:03:07,960
in one we get back the integer that original parentheses notation we get back.

35
00:03:07,970 --> 00:03:14,740
The integer that actual value when we use that keyword we get that option ints and then it's inside

36
00:03:14,740 --> 00:03:16,510
this object called sum.

37
00:03:16,580 --> 00:03:17,850
And we get that one.

38
00:03:17,920 --> 00:03:24,780
The difference here being if I actually call my map for a key that doesn't exist for instance capital

39
00:03:24,780 --> 00:03:27,230
D I get back this exception.

40
00:03:27,270 --> 00:03:29,000
But if I use get instead.

41
00:03:29,010 --> 00:03:38,850
So I say my map get the I get this option equal to none so I basically get an empty value there.

42
00:03:39,100 --> 00:03:41,290
So that's an important distinction to know.

43
00:03:41,290 --> 00:03:45,590
We don't really use it that much during the course but you should be aware of it.

44
00:03:45,670 --> 00:03:46,150
All right.

45
00:03:46,330 --> 00:03:53,790
Now let's go ahead and show you how to do mutable maps in order to add new key value pairs to a map.

46
00:03:53,860 --> 00:04:03,330
So I'm going to go ahead and clear that console and I will say Velle my map is equal to.

47
00:04:03,880 --> 00:04:10,710
And just like we did earlier for other collection objects we can say collection mutable dot map.

48
00:04:10,990 --> 00:04:13,450
And then I can go ahead and pass in some key value pairs.

49
00:04:13,450 --> 00:04:20,950
Let's go in and say X to 1 and then we'll say y to.

50
00:04:21,490 --> 00:04:28,680
And then we'll say Z three and there we have a mutable map collection.

51
00:04:28,890 --> 00:04:34,830
And again no this arrow notation here because we're going to use that in order to actually add in elements

52
00:04:35,190 --> 00:04:40,700
to this map so have Z to 3 y to 2 and then X to 1.

53
00:04:40,710 --> 00:04:47,150
And like I noted before the map doesn't actually retain any order it's just a hash table.

54
00:04:47,190 --> 00:04:52,530
So let's go ahead and show you how you can add to a map a new key value pair.

55
00:04:52,740 --> 00:05:03,480
You'll say my mutes map say plus equals and then say you're Nuki or whatever you want it to be comma.

56
00:05:03,780 --> 00:05:12,400
Actually not a comma you'll say this arrow symbol nine nine nine or whatever value you want.

57
00:05:12,400 --> 00:05:16,160
And this will be permanently added to your mutable map.

58
00:05:16,230 --> 00:05:23,790
So that's why that arrow is so important to realize because if we try to do this using what I was actually

59
00:05:23,910 --> 00:05:33,460
accidentally starting to do that comma so if I say brand new comma 12 you'll actually get an error.

60
00:05:33,460 --> 00:05:34,890
You'll get a type mismatch.

61
00:05:34,900 --> 00:05:41,830
So you need to do is instead replace that comma with that assignment operator for that arrow and then

62
00:05:41,830 --> 00:05:47,880
it will be added in so we can say Miamians map and we can see we have those brand new keys in there.

63
00:05:47,890 --> 00:05:48,430
OK.

64
00:05:48,700 --> 00:05:54,240
Let me go ahead and shoot just a few useful methods such as grabbing the keys and values off a map.

65
00:05:54,280 --> 00:06:04,350
So if we go in and clear this I say my map that was the original map of ABC 1 2 3 I can say my map key

66
00:06:04,350 --> 00:06:12,280
is to get the keys of a map as a set and I can say my map values.

67
00:06:12,400 --> 00:06:16,910
So you get this sort of map like object that has the actual values themselves.

68
00:06:16,910 --> 00:06:21,620
In this case they're just integers and these are iterable meaning later only learn about four loops

69
00:06:21,620 --> 00:06:26,900
I can actually iterate through the Keys or the values they should note that they won't actually retain

70
00:06:27,200 --> 00:06:28,540
any sort of order.

71
00:06:28,940 --> 00:06:34,520
OK that's it for the lecture on maps again maps basically just have a key value pair storage and they're

72
00:06:34,520 --> 00:06:39,620
also known as hash tables or dictionaries and other languages and you have an immutable version and

73
00:06:39,620 --> 00:06:42,060
the mutable version the mutable version.

74
00:06:42,080 --> 00:06:47,300
You're going to add a new pair of values to it using that plus arrow notation.

75
00:06:47,300 --> 00:06:55,370
So again one more time for a minute map and say plus equals and then the new key.

76
00:06:55,580 --> 00:06:59,170
So we can say new one.

77
00:06:59,450 --> 00:07:04,020
And then you're going to put the arrow notation and then you're going to put in some new value for instance

78
00:07:04,030 --> 00:07:05,150
one two three.

79
00:07:05,390 --> 00:07:07,270
And there we have it Miami map.

80
00:07:07,490 --> 00:07:15,020
We'll go and see my map keys and we can say z y x brand new and Yuuki and new one.

81
00:07:15,020 --> 00:07:15,770
All right.

82
00:07:15,770 --> 00:07:17,210
Hope you enjoy that lecture.

83
00:07:17,210 --> 00:07:18,240
I'll see you at the next one.
