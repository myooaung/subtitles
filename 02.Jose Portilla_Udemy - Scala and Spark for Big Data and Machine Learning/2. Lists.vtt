WEBVTT
1
00:00:05.360 --> 00:00:08.540
Hello everyone and welcome to The Last Lecture.

2
00:00:08.540 --> 00:00:13.700
Formally speaking these are going to be like singly linked lists but you can just think of them as an

3
00:00:13.700 --> 00:00:15.740
immutable sequence of elements.

4
00:00:15.740 --> 00:00:20.730
Let's go ahead and show you how you can use and build lists in Scala by jumping to the spark shell and

5
00:00:20.950 --> 00:00:24.500
the interpreter going to go ahead and go to my command prompt now.

6
00:00:25.020 --> 00:00:27.010
OK here I am at my command prompt.

7
00:00:27.020 --> 00:00:29.060
If you're a Mac users will be your terminal.

8
00:00:29.060 --> 00:00:32.120
I've started SPARC shell and I have the Skala interpreter.

9
00:00:32.120 --> 00:00:35.790
Let me go ahead and show you how you can create a basic list of numbers.

10
00:00:35.810 --> 00:00:40.360
We'll go ahead and create a value called evens.

11
00:00:40.520 --> 00:00:44.680
Say equals and they will say capital L I S T.

12
00:00:44.870 --> 00:00:47.540
And then we can pasan a list of elements.

13
00:00:47.570 --> 00:00:52.770
In this case I'm just going to pass on integers and go ahead and just put in even integers here.

14
00:00:52.850 --> 00:00:57.310
So two four six eight 10 hit enter and then notice what scolloped puts out.

15
00:00:57.320 --> 00:00:59.360
It says evens is the object name.

16
00:00:59.450 --> 00:01:06.350
And then it has lists and in brackets it says I.A. meaning this list solely consists of integers.

17
00:01:06.350 --> 00:01:09.340
Now you can actually put in mixed types into a list.

18
00:01:09.410 --> 00:01:19.300
For example I can just say list here and then pasan one say to point to a boolean and close that off.

19
00:01:19.300 --> 00:01:26.050
And you know now Ill say list any vowel meaning any sort of data type can be found in this list so you

20
00:01:26.050 --> 00:01:29.240
can go ahead and have mixed data types inside of a list.

21
00:01:29.410 --> 00:01:35.120
And Scala will try its best to inform you of the contents of the data types in that list.

22
00:01:35.140 --> 00:01:38.210
Let me go ahead and show you how you can index items from a list.

23
00:01:38.230 --> 00:01:41.120
We'll go ahead and use evens.

24
00:01:41.290 --> 00:01:42.530
That's the list we just made up.

25
00:01:42.550 --> 00:01:46.560
Two four six eight ten you can say the name of the list.

26
00:01:46.600 --> 00:01:51.000
And then in parentheses you're going to go ahead and put in the index you want.

27
00:01:51.010 --> 00:01:56.520
So for example if I want the very first index for a list indexing starts at zero.

28
00:01:56.650 --> 00:02:02.530
So you can go ahead and say events of 0 that's going to be the integer to that very first item in this

29
00:02:02.530 --> 00:02:03.370
list.

30
00:02:03.370 --> 00:02:05.760
So for example to want that integer 10.

31
00:02:05.890 --> 00:02:08.570
Well that's going to be 0 1 2 3 4.

32
00:02:08.620 --> 00:02:15.600
So we'll go in and say evens parentheses 4 and we get back that integer 10.

33
00:02:16.060 --> 00:02:21.040
Let me go ahead and show you a couple of different methods that you may find useful for a list.

34
00:02:21.220 --> 00:02:28.090
If you go ahead and say evens dots and then hit tab you'll actually receive a whole list of various

35
00:02:28.090 --> 00:02:30.560
methods and attributes and call off this list.

36
00:02:30.580 --> 00:02:33.520
Let me go in and just show you some of the more useful ones.

37
00:02:33.550 --> 00:02:36.690
One of the more useful ones is the head.

38
00:02:36.910 --> 00:02:39.890
And that's going to be the very first item in the list.

39
00:02:39.910 --> 00:02:41.370
In this case it's just two.

40
00:02:41.590 --> 00:02:46.590
And then you can also call evens that tail and that's going to return everything.

41
00:02:46.630 --> 00:02:48.300
But the head to everything.

42
00:02:48.310 --> 00:02:50.410
But that first item.

43
00:02:50.410 --> 00:02:55.710
And let me go ahead and explain a little more about element types when you nest lists.

44
00:02:55.720 --> 00:03:02.170
You can actually nest lists together so a list can hold multiple lists and Skala has a really interesting

45
00:03:02.170 --> 00:03:05.310
way of showing you when you do that sort of operation.

46
00:03:05.320 --> 00:03:13.960
Let me go and control L here to clear that screen and I'll say Val my underscore list is equal to list

47
00:03:14.980 --> 00:03:17.760
and I'm going to go ahead and then put in another list.

48
00:03:17.770 --> 00:03:19.150
One two three.

49
00:03:19.180 --> 00:03:24.280
So those are all integers and then I'll put in another list as the second item in the most outre list

50
00:03:24.350 --> 00:03:31.630
and I will go in and say four five six and look at what Skala does when it returns it says my list.

51
00:03:31.620 --> 00:03:33.560
But interestingly it says list.

52
00:03:33.590 --> 00:03:37.550
Square brackets another list and the square brackets again integers.

53
00:03:37.550 --> 00:03:42.850
So Scott is actually smart enough to know that this is a nested list where the inside lists just have

54
00:03:42.860 --> 00:03:47.500
integers inside of them and you can also make a list of tuple pairs.

55
00:03:47.510 --> 00:03:50.680
So we've already worked of tuples in the Scala a basic section of the course.

56
00:03:50.870 --> 00:03:54.650
But sometimes people like to use them with less as well.

57
00:03:54.680 --> 00:04:00.930
So you can say that my underscore a list and then we're going to go ahead to do tuple pairs.

58
00:04:01.220 --> 00:04:11.420
So say a and one as one two ball and we'll say be good as a string to as another tuple and then say

59
00:04:12.380 --> 00:04:14.380
C comma 3.

60
00:04:14.450 --> 00:04:17.380
So we have a list here of three tuples.

61
00:04:17.390 --> 00:04:22.700
We'll go ahead and hit enter and notice again that skull is actually pretty smart in understanding what

62
00:04:22.700 --> 00:04:23.770
is in this list.

63
00:04:23.810 --> 00:04:29.910
It tells you you have a list in there and inside of it you have tuples in the form string comma integer.

64
00:04:29.990 --> 00:04:33.200
Let me go ahead and show you a few list operations.

65
00:04:33.200 --> 00:04:40.340
So I'm going to go ahead and make a list here will say thou my list and I'm going to assign this as

66
00:04:40.340 --> 00:04:43.680
list and I'm going to put in some random numbers here.

67
00:04:43.700 --> 00:04:47.720
So go ahead just put his arm round numbers scattered out of order.

68
00:04:47.930 --> 00:04:54.210
Let's see you want to sort this list a useful method for that operation is to call that sorted off of

69
00:04:54.220 --> 00:05:00.860
this object so my list thought sorted and it goes ahead and returns the sorted version of that list.

70
00:05:00.860 --> 00:05:05.690
Other operations you may want to do is trying to figure out how large your list is.

71
00:05:05.690 --> 00:05:11.720
You can use that size to figure out how many items are in your list and then you can also do things

72
00:05:11.720 --> 00:05:15.260
such as Max Min and other mathematical operations.

73
00:05:15.350 --> 00:05:20.120
So for example if you have a list of integers or doubles recone for mathematical operations on those

74
00:05:20.150 --> 00:05:27.830
elements you can say something like my list that Max and that will return the max value in that list.

75
00:05:28.010 --> 00:05:36.170
You can do my list of men for the minimum value you can say my list some are the actual sum of all those

76
00:05:36.170 --> 00:05:36.710
numbers.

77
00:05:36.710 --> 00:05:41.280
So all those numbers sum and you can do the same thing for the product of those numbers.

78
00:05:41.960 --> 00:05:47.330
And like I mentioned you can do that and then click tab to see a variety of options and methods and

79
00:05:47.330 --> 00:05:49.360
operations you can perform on a list.

80
00:05:49.370 --> 00:05:51.700
But right now these are the most basic ones.

81
00:05:51.890 --> 00:05:59.970
Let me go ahead and show you how you can use drop for slicing going to go ahead and clear this there

82
00:05:59.970 --> 00:06:03.230
are various ways to get a slice of a list.

83
00:06:03.360 --> 00:06:07.500
One way is to use the drop method or the take right method.

84
00:06:07.500 --> 00:06:16.130
So for example if I go ahead and create a list will say that x is equal to the list of just 1 2 3 4.

85
00:06:16.140 --> 00:06:24.620
So a very simple list here I can say X stop drop and then the inputs and index location.

86
00:06:24.630 --> 00:06:26.560
So in this case that's going to be two.

87
00:06:26.820 --> 00:06:30.560
And it's going to drop the head up to 2.

88
00:06:30.570 --> 00:06:34.470
So 0 1 and then it's going to start at 2.

89
00:06:34.800 --> 00:06:37.910
This is kind of a modified version of tail.

90
00:06:38.310 --> 00:06:40.560
And another way to do that is with take.

91
00:06:40.600 --> 00:06:41.440
Right.

92
00:06:42.480 --> 00:06:43.630
So take right.

93
00:06:43.680 --> 00:06:45.840
You go ahead and pasan a number.

94
00:06:46.010 --> 00:06:51.660
So for instance I say take rate one it goes ahead and starting from the right side or the right hand

95
00:06:51.660 --> 00:06:52.750
side of that list.

96
00:06:52.830 --> 00:06:55.740
It grabs as many elements as you asked for.

97
00:06:55.740 --> 00:06:58.600
So if we wanted for instance two three four.

98
00:06:58.740 --> 00:07:02.440
Well that's going to be three elements from the right of that list.

99
00:07:03.280 --> 00:07:07.990
Now I've shown you the drop and take right methods but the most common way you're probably going to

100
00:07:07.990 --> 00:07:14.590
be taking specific slices of a list is just by using the slice key word that we've actually seen before.

101
00:07:14.590 --> 00:07:18.970
So for instance if I have a list we'll go ahead and make a new one here.

102
00:07:19.000 --> 00:07:20.650
A couple more elements in it.

103
00:07:20.680 --> 00:07:26.500
One two three four five six seven eighths go ahead and make that our list.

104
00:07:26.620 --> 00:07:28.910
I can say X slice.

105
00:07:29.320 --> 00:07:35.440
And then print sees all input a starting index comma and then the last index that I want.

106
00:07:35.440 --> 00:07:42.580
So for instance if I want to start at zero and then go up to and including index three.

107
00:07:42.610 --> 00:07:44.590
So that's going to be up to the third element.

108
00:07:44.590 --> 00:07:50.060
So that should be 0 1 2 and I get back 1 2 3.

109
00:07:50.070 --> 00:07:57.050
So that makes sense because I'm asking for everything up to and not including that index three elements.

110
00:07:57.270 --> 00:08:01.320
And you can go ahead and kind of play around with this and make sure you understand that as far as the

111
00:08:01.320 --> 00:08:04.570
indexing starting at zero that can be confusing sometimes.

112
00:08:04.590 --> 00:08:07.770
For instance let's go ahead and try to grab four five six.

113
00:08:07.770 --> 00:08:12.330
So it's going to start at 0 1 2 3 elements.

114
00:08:12.570 --> 00:08:18.930
And then I want to get grab all the way up to 6 so let's go ahead and run that.

115
00:08:18.930 --> 00:08:21.580
And there we have four five six.

116
00:08:21.600 --> 00:08:22.170
OK.

117
00:08:22.350 --> 00:08:26.020
That's really all you need to know right now as far as the basics of lists.

118
00:08:26.070 --> 00:08:27.000
Thanks everyone.

119
00:08:27.030 --> 00:08:28.050
I'll see you at the next lecture.
