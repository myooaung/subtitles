WEBVTT
1
00:00:05.090 --> 00:00:11.090
Hello everyone and welcome to the recommender systems section of the course in case you're further interested

2
00:00:11.090 --> 00:00:13.540
in recommender systems and what we cover in this course.

3
00:00:13.700 --> 00:00:17.690
I suggest you take a look at the following textbook called The recommender systems.

4
00:00:17.690 --> 00:00:19.490
It's really a great textbook on this topic.

5
00:00:19.510 --> 00:00:23.930
I want to get a deeper understanding of recommender systems in general if the rise of Web sites such

6
00:00:23.930 --> 00:00:29.840
as Amazon.com or Netflix or Cobb or recommendation systems is a key aspect to the actual functioning

7
00:00:29.840 --> 00:00:33.930
of the Web site recommender systems have really exploded in popularity.

8
00:00:33.950 --> 00:00:38.900
However a full blown recommendation system is a pretty complex topic and we're only going to cover a

9
00:00:38.900 --> 00:00:40.980
brief aspect of it in this course.

10
00:00:41.030 --> 00:00:45.020
So I suggest you take a look at that textbook in case you want a deeper understanding of the topic in

11
00:00:45.020 --> 00:00:51.100
general as I just mentioned a fully developed and deployed recommendation system is extremely complex

12
00:00:51.160 --> 00:00:52.720
and resource intensive.

13
00:00:52.750 --> 00:00:57.910
We're going to begin to expand beyond our local computer and show you how to use the data Brick's notebook

14
00:00:57.940 --> 00:00:59.770
platform data bricks.

15
00:00:59.800 --> 00:01:04.780
As a company started by the creators of Sparke data Brick's is constantly maintaining and adding new

16
00:01:04.780 --> 00:01:07.900
features to spark as well as hosting a data platform.

17
00:01:09.540 --> 00:01:14.850
That data Brick's platform provides a very convenient way to quickly create a large Spart cluster that

18
00:01:14.850 --> 00:01:17.420
you can interact with in a notebook environment.

19
00:01:17.430 --> 00:01:22.560
It's also ideally set up to work with data frames as it has the capability to upload table like data

20
00:01:22.800 --> 00:01:25.640
from a variety of sources.

21
00:01:25.670 --> 00:01:30.410
In this section of the course we're going to combine learning how to create recommender systems with

22
00:01:30.410 --> 00:01:35.420
learning how to use that data Brick's platform and data Brick's is also one of the leading providers

23
00:01:35.420 --> 00:01:37.520
of official Spark's certification.

24
00:01:37.520 --> 00:01:42.350
So it may be an added benefit to you to really understand their platform in case in the future you want

25
00:01:42.350 --> 00:01:44.680
some sort of official SPARC certification.

26
00:01:44.960 --> 00:01:48.850
Luckily they also have a 3 6 gigabyte tier for their cluster.

27
00:01:48.890 --> 00:01:55.060
So you don't have to pay for it just to get started since full recommender systems require a heavy linear

28
00:01:55.090 --> 00:01:56.320
algebra background.

29
00:01:56.320 --> 00:01:59.560
We're going to try to provide only a high level overview in this lecture.

30
00:01:59.670 --> 00:02:04.120
And as I mentioned previously check out that book much the beginning of the lecture for a deeper look

31
00:02:04.210 --> 00:02:06.390
into this topic.

32
00:02:06.480 --> 00:02:11.790
The two most common types of recommender systems are concepts based in collaborative filtering based

33
00:02:11.850 --> 00:02:17.520
recommenders systems collaborative filtering produces recommendations based on the knowledge of users

34
00:02:17.580 --> 00:02:19.170
attitude towards items.

35
00:02:19.320 --> 00:02:25.200
That is it uses the wisdom of the crowd to recommend the items while content based recommender systems

36
00:02:25.470 --> 00:02:27.910
focus on the attributes of the items themselves.

37
00:02:28.050 --> 00:02:31.600
It gives you recommendations based on the similarity between them.

38
00:02:32.830 --> 00:02:39.160
In general collaborative filtering or C F is more commonly used and content based systems because it

39
00:02:39.160 --> 00:02:45.310
usually gives better results and it's relatively easy to understand from an overall implementation perspective.

40
00:02:45.310 --> 00:02:48.390
The algorithm has the ability to do feature learning on its own.

41
00:02:48.580 --> 00:02:55.230
Which means that it can start to learn for itself what features to use these techniques aim to fill

42
00:02:55.230 --> 00:02:59.060
in the missing entries of a user item Association matrix.

43
00:02:59.060 --> 00:03:04.640
Now we're working on a spark that sparked the M-L it currently supports model based collaborative filtering

44
00:03:04.870 --> 00:03:10.490
in which users of products are described by a small set of latent factors that can be used to predict

45
00:03:10.520 --> 00:03:18.050
Bisi and trees and spark and Bell uses the alternating least squares or a ls algorithm to actually learn

46
00:03:18.050 --> 00:03:26.050
about these latent factors HLS is basically a matrix factorization approach to implement a recommendation

47
00:03:26.110 --> 00:03:26.910
algorithm.

48
00:03:26.920 --> 00:03:33.310
You decompose your large user to either matrix into lower missional user factors and ide of factors

49
00:03:33.700 --> 00:03:38.070
and to fully understand this model you need to have a very strong background in linear algebra.

50
00:03:38.170 --> 00:03:43.510
But you can check out the various resource links I provided for you for more details of HLS how it works

51
00:03:43.570 --> 00:03:45.930
in regards to recommender systems.

52
00:03:47.240 --> 00:03:52.220
For this course we're going to leave further review of HLS mathematics up to the student at those resource

53
00:03:52.220 --> 00:03:54.050
links for this lecture.

54
00:03:54.050 --> 00:03:55.510
For now we're going to move on.

55
00:03:55.550 --> 00:03:59.250
Setting up the data platform and running a recommendation system on it.

56
00:03:59.510 --> 00:04:00.740
Let's get started.

57
00:04:00.740 --> 00:04:02.760
Thanks everyone and I'll see you in the next lecture.
