WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.575
Hello everyone.

00:00:01.575 --> 00:00:08.085
Welcome back. So let's talk about what is generous and what are we gonna do with that?

00:00:08.085 --> 00:00:09.869
So think of it this scenario.

00:00:09.869 --> 00:00:15.285
So you have some method which will perform some addition operation.

00:00:15.285 --> 00:00:19.260
So you might pass some integers to the metadata as the inputs.

00:00:19.260 --> 00:00:26.925
But just in case you want to send some double datatype or long our float.

00:00:26.925 --> 00:00:29.010
Do you think that method will work?

00:00:29.010 --> 00:00:32.625
Now? It will not work because that particular method will Wanli,

00:00:32.625 --> 00:00:35.409
unserved the integer inputs.

00:00:35.409 --> 00:00:37.400
But think about this scenario.

00:00:37.400 --> 00:00:40.460
In number. They have different types of data types, right?

00:00:40.460 --> 00:00:45.245
Like we have a short int, long double float.

00:00:45.245 --> 00:00:46.805
All of them are numbered types.

00:00:46.805 --> 00:00:50.060
So if you want to perform some addition operation,

00:00:50.060 --> 00:00:54.305
we have to write a different method for different types.

00:00:54.305 --> 00:00:56.420
And that doesn't look good, right?

00:00:56.420 --> 00:00:59.015
So we have to write a generic method.

00:00:59.015 --> 00:01:06.260
So the generic method which will perform the same operation for all the types of data.

00:01:06.260 --> 00:01:08.450
It doesn't matter whether I am passing an integer,

00:01:08.450 --> 00:01:11.615
I am passing double or I'm passing long, it doesn't matter.

00:01:11.615 --> 00:01:18.525
So all it can do is it has to perform the same operation for all kind of datas.

00:01:18.525 --> 00:01:20.320
Okay, so what does the, another,

00:01:20.320 --> 00:01:21.895
the importance of generics.

00:01:21.895 --> 00:01:23.589
So when it comes to generics,

00:01:23.589 --> 00:01:26.800
it will provide as a compile time safety which helps us,

00:01:26.800 --> 00:01:33.130
the programmer to catch the invalid or wrong type at the compile time itself.

00:01:33.130 --> 00:01:36.715
We don't have to wait for the deployment on once the deployment is done.

00:01:36.715 --> 00:01:39.940
And while you're running, the application will end up with a runtime exception.

00:01:39.940 --> 00:01:41.275
We don't want to do that.

00:01:41.275 --> 00:01:45.220
So the only reason we are going for generics are comparable.

00:01:45.220 --> 00:01:47.725
Identify the issue as soon as possible.

00:01:47.725 --> 00:01:49.390
Okay, what are the advantage?

00:01:49.390 --> 00:01:51.685
So when you go for generics,

00:01:51.685 --> 00:01:53.605
there are two important things.

00:01:53.605 --> 00:01:58.210
The first one is you don't have to do the typecasting.

00:01:58.210 --> 00:01:59.815
So what do you mean by typecasting?

00:01:59.815 --> 00:02:01.260
We'll come to that point.

00:02:01.260 --> 00:02:03.785
And then the second thing is type safety.

00:02:03.785 --> 00:02:08.075
So these two things are available in generics and you might have.

00:02:08.075 --> 00:02:11.869
So will those things are not available in our race and collections?

00:02:11.869 --> 00:02:14.180
Yes, they do have it,

00:02:14.180 --> 00:02:17.495
but we have some problems over there.

00:02:17.495 --> 00:02:20.675
So let's talk about what is array and what is collection.

00:02:20.675 --> 00:02:23.810
And then we'll find out what is the problem with the Iranian collection

00:02:23.810 --> 00:02:27.365
then why we went to that generates, right?

00:02:27.365 --> 00:02:30.785
So before we are moving to the particular topic,

00:02:30.785 --> 00:02:34.114
I'm going to show you a simple example.

00:02:34.114 --> 00:02:37.610
So why the genetic so important?

00:02:37.610 --> 00:02:39.980
For example, what I'm trying to do is I'm going to read

00:02:39.980 --> 00:02:45.020
a common method which will accept two inputs as part of the outcome.

00:02:45.020 --> 00:02:48.725
It will return the list of some types.

00:02:48.725 --> 00:02:50.360
So I might send integers,

00:02:50.360 --> 00:02:51.800
I might send a double IM,

00:02:51.800 --> 00:02:54.440
it's in string, or I might send any kind of datatype.

00:02:54.440 --> 00:02:56.495
See all I'm looking for.

00:02:56.495 --> 00:02:58.925
That particular method has to return a list of

00:02:58.925 --> 00:03:02.720
some the data type that you're providing as an input.

00:03:02.720 --> 00:03:05.100
So let's do that.
