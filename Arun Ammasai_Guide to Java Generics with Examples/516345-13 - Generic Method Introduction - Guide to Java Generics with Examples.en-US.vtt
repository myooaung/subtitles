WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.700
Hello everyone, Welcome back.

00:00:02.700 --> 00:00:05.505
So we discussed about how to create a generic class

00:00:05.505 --> 00:00:08.385
and how to create a generic class and how we can pass

00:00:08.385 --> 00:00:14.325
different types of inputs and how we can access them, use them, right?

00:00:14.325 --> 00:00:16.815
So just like a generic class,

00:00:16.815 --> 00:00:18.705
we have a generic methods as well.

00:00:18.705 --> 00:00:20.580
So you can have a normal class.

00:00:20.580 --> 00:00:23.235
So in your normal class you can have generic method,

00:00:23.235 --> 00:00:25.440
which is pretty much possible.

00:00:25.440 --> 00:00:28.425
Okay, So how does it looks like so generic whether it's

00:00:28.425 --> 00:00:31.965
almost pretty much like our normal methods.

00:00:31.965 --> 00:00:36.180
But that will be a small few elements which we need

00:00:36.180 --> 00:00:40.135
to add to mention saying like this method is going to be generic mutton.

00:00:40.135 --> 00:00:42.230
And the purpose of it,

00:00:42.230 --> 00:00:45.065
write a single generic method.

00:00:45.065 --> 00:00:51.170
And then you can call the method with the different types of inputs.

00:00:51.170 --> 00:00:58.520
For example, you're writing a method and you are passing integer elements, it will work.

00:00:58.520 --> 00:01:01.715
And the same method we should work for a string as well.

00:01:01.715 --> 00:01:05.690
The same method will work for double long boolean everything.

00:01:05.690 --> 00:01:09.500
So which means one solution solves multiple problems.

00:01:09.500 --> 00:01:15.980
So the compiler handles each method called appropriately based on the input type.

00:01:15.980 --> 00:01:17.165
Right?

00:01:17.165 --> 00:01:20.840
And on another important thing, general, generic methods.

00:01:20.840 --> 00:01:24.155
Bodhi is declared just like our normal methods.

00:01:24.155 --> 00:01:26.120
But one thing you need to keep in mind,

00:01:26.120 --> 00:01:28.745
1801 later represent the reference types,

00:01:28.745 --> 00:01:29.780
not the primitive type.

00:01:29.780 --> 00:01:30.905
You cannot use int,

00:01:30.905 --> 00:01:32.494
you can use integer.

00:01:32.494 --> 00:01:36.620
So because primitives are not allowed to use inside degenerates.

00:01:36.620 --> 00:01:38.840
Okay, So let me give you a simple example.

00:01:38.840 --> 00:01:41.720
How does it looks like? So here I have a method which will

00:01:41.720 --> 00:01:45.140
take any type of array elements and it will print.

00:01:45.140 --> 00:01:46.805
So it can be integer, array,

00:01:46.805 --> 00:01:48.650
can be a string,

00:01:48.650 --> 00:01:50.855
it can be a double, can be along.

00:01:50.855 --> 00:01:54.500
But the method implementation is same for all of them.

00:01:54.500 --> 00:01:57.590
Sell a one-month done which will work for multiple types, right?

00:01:57.590 --> 00:02:00.230
So let's jump into an example and we'll

00:02:00.230 --> 00:02:04.110
explore how does it looks like and how it is going to work out.
