WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.370
Hey everyone, Welcome back.

00:00:02.370 --> 00:00:04.605
So let's solve the problem.

00:00:04.605 --> 00:00:06.210
So basically what I need to do,

00:00:06.210 --> 00:00:11.820
I'm going to create a single method which will take any type of array, right?

00:00:11.820 --> 00:00:14.775
But before that, you need to know the syntax.

00:00:14.775 --> 00:00:15.990
So what does this syntax,

00:00:15.990 --> 00:00:19.380
how we can define a method as a generic metadata.

00:00:19.380 --> 00:00:26.805
For example, here I'm going to use public, static, void,

00:00:26.805 --> 00:00:31.590
print data, and which will add,

00:00:31.590 --> 00:00:36.345
for example, in our scenario it's going to be a integer of array.

00:00:36.345 --> 00:00:39.680
Got it. Okay?

00:00:39.680 --> 00:00:42.080
So this isn't normal method looks like,

00:00:42.080 --> 00:00:43.955
but this is not a generic method.

00:00:43.955 --> 00:00:46.370
So if it is a classic generic,

00:00:46.370 --> 00:00:50.360
you need to provide a diamond operator here, right?

00:00:50.360 --> 00:00:52.670
The same thing applicable for a method as well.

00:00:52.670 --> 00:00:55.130
So before you're saying what is

00:00:55.130 --> 00:00:57.980
the return type of this particular method you need to provide?

00:00:57.980 --> 00:01:01.160
This method is going to be a generic method.

00:01:01.160 --> 00:01:04.940
So it has to be before the return type.

00:01:04.940 --> 00:01:06.980
So why does nothing law?

00:01:06.980 --> 00:01:09.515
It means it will then empty or nothing.

00:01:09.515 --> 00:01:14.840
So before you have to provide the diamond operator,

00:01:14.840 --> 00:01:16.790
because which the moment I

00:01:16.790 --> 00:01:19.775
introduce a diamond operator here it becomes the generic method.

00:01:19.775 --> 00:01:23.270
I don't know the type, so I'm going to provide d, which means a child.

00:01:23.270 --> 00:01:27.635
And here I'm not going to pass any specific type of India because if,

00:01:27.635 --> 00:01:30.290
if I'm pausing integer here,

00:01:30.290 --> 00:01:33.530
it will one into here, right?

00:01:33.530 --> 00:01:36.065
But you find out what I'm gonna do, let me remove this and let me

00:01:36.065 --> 00:01:39.275
call the method in a normal way like this.

00:01:39.275 --> 00:01:46.040
So what I'm gonna do is I'm going to create an integer array. Integer.

00:01:46.040 --> 00:01:52.350
So I'm going to create int array

00:01:52.660 --> 00:02:01.670
is an integer and I'm going to go over some elements in it.

00:02:01.670 --> 00:02:03.080
Sorry.

00:02:03.080 --> 00:02:06.515
So when come on to monitoring and off for five,

00:02:06.515 --> 00:02:08.135
okay, so I alpha elements.

00:02:08.135 --> 00:02:11.660
So what I can do is I can simply call the print data method correct.

00:02:11.660 --> 00:02:15.995
So print data, and I can simply pass the integer array to the method.

00:02:15.995 --> 00:02:18.185
And here what I'm gonna do,

00:02:18.185 --> 00:02:23.135
I'm gonna look the array and then we'll print the data.

00:02:23.135 --> 00:02:28.655
So how can we did for so it's an empty j, right?

00:02:28.655 --> 00:02:35.550
So integer data, so data is coming from the right.

00:02:35.920 --> 00:02:43.950
And here you can simply provide sits out here and you can put in the data.

00:02:45.390 --> 00:02:47.620
So it is very simple, my dad,

00:02:47.620 --> 00:02:49.670
okay, let me run this.

00:02:50.250 --> 00:02:52.705
It's just a straightforward math dot.

00:02:52.705 --> 00:02:53.830
Dot is no complications,

00:02:53.830 --> 00:02:55.435
so it will print 125.

00:02:55.435 --> 00:02:56.485
Okay?

00:02:56.485 --> 00:02:58.150
So now what I'm gonna do,

00:02:58.150 --> 00:03:03.010
so just in case I don't want to pass it as an integer array.

00:03:03.010 --> 00:03:06.050
So let's create a character array.

00:03:08.760 --> 00:03:15.320
Array is equal to character.

00:03:23.160 --> 00:03:26.955
And I'm just going to have three elements in it.

00:03:26.955 --> 00:03:28.100
Okay?

00:03:28.100 --> 00:03:31.400
So the moment I pass that character array to

00:03:31.400 --> 00:03:34.880
print data might eventually it'll end up with decompilation,

00:03:34.880 --> 00:03:39.170
which is saying that method is not outstripped planetary flux at one with a integer.

00:03:39.170 --> 00:03:41.345
So this is not a generic method.

00:03:41.345 --> 00:03:45.350
So the generic method will accept all kinda types,

00:03:45.350 --> 00:03:49.565
but make sure all of them are reference classes are the primitive.

00:03:49.565 --> 00:03:51.050
Right?

00:03:51.050 --> 00:03:54.170
So now let's change this method as a generic method.

00:03:54.170 --> 00:03:56.990
So the generic method to notify the competitor is going to be

00:03:56.990 --> 00:04:00.110
generic method you how to provide that type before they're done tie,

00:04:00.110 --> 00:04:02.090
which means here is why does the type right?

00:04:02.090 --> 00:04:05.750
So I'm going to provide the diamond operator here.

00:04:05.750 --> 00:04:08.255
And my saying that type.

00:04:08.255 --> 00:04:10.595
So the moment I provided this,

00:04:10.595 --> 00:04:14.375
this method becomes the generic method.

00:04:14.375 --> 00:04:16.115
Okay, so the type is not a January.

00:04:16.115 --> 00:04:20.490
So I have to use t here because I don't know what the type is going to come.

00:04:21.040 --> 00:04:22.610
Right?

00:04:22.610 --> 00:04:24.380
And then interrupting integer,

00:04:24.380 --> 00:04:27.480
I'm going to process the key element here.

00:04:27.580 --> 00:04:30.500
And everything else is same.

00:04:30.500 --> 00:04:36.365
Now, initially the character array was throwing in compilation issue, correct.

00:04:36.365 --> 00:04:38.465
But now it is not.

00:04:38.465 --> 00:04:41.670
Okay, so let me run this.

00:04:42.310 --> 00:04:45.155
C, a, B, C, it's working.

00:04:45.155 --> 00:04:51.215
So what happens if a pass into a? Still?

00:04:51.215 --> 00:04:52.730
There is no compilation issue.

00:04:52.730 --> 00:04:56.435
So now that is also working.

00:04:56.435 --> 00:05:06.300
Okay, so let me create a string of like string and string array.

00:05:13.870 --> 00:05:21.395
So 1, 2, 3.

00:05:21.395 --> 00:05:24.740
So I have a string which contains three elements in it.

00:05:24.740 --> 00:05:31.295
So I'm passing my string edit to my Brenda damage than stays again, no issues here.

00:05:31.295 --> 00:05:34.200
So let me run this again.

00:05:34.360 --> 00:05:39.275
So it doesn't matter what kind of type you are passing into it.

00:05:39.275 --> 00:05:42.440
It will still work because a set type element,

00:05:42.440 --> 00:05:44.255
which is a generic method,

00:05:44.255 --> 00:05:46.250
whatever type is coming to this print item,

00:05:46.250 --> 00:05:47.870
either it will process.

00:05:47.870 --> 00:05:49.730
Okay, So as I mentioned,

00:05:49.730 --> 00:05:54.260
you can only pass the reference, reference type, right?

00:05:54.260 --> 00:05:57.500
So let's try to greed on normal.

00:05:57.500 --> 00:06:00.530
I mean dissident primitive in array.

00:06:00.530 --> 00:06:09.260
So int. So it's going to be Int array1 and it's going to be new int here.

00:06:09.260 --> 00:06:13.020
Okay, So now let me pass this.

00:06:16.570 --> 00:06:18.800
The moment I passed it,

00:06:18.800 --> 00:06:23.285
it is throw an exception because the choir type is generic type,

00:06:23.285 --> 00:06:28.865
but you provided as a primitive type which is not accepted by a generic.

00:06:28.865 --> 00:06:30.320
Right?

00:06:30.320 --> 00:06:33.845
Okay, so this is just a symbol example how you can

00:06:33.845 --> 00:06:38.000
write a method to simply print the data.

00:06:38.000 --> 00:06:40.460
Okay, so next thing what I want to do is

00:06:40.460 --> 00:06:43.370
I want to write a generic method which will return something.

00:06:43.370 --> 00:06:44.705
So how it can be done.

00:06:44.705 --> 00:06:47.580
So let's see in the next example.
