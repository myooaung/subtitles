WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.425
Hello everyone.

00:00:01.425 --> 00:00:02.625
Welcome back.

00:00:02.625 --> 00:00:04.709
So in the previous example,

00:00:04.709 --> 00:00:08.010
we created a simple example to show you how we can

00:00:08.010 --> 00:00:11.549
create a generic metadata and what is the syntax.

00:00:11.549 --> 00:00:13.560
And we created a void method.

00:00:13.560 --> 00:00:18.885
So let's create another method which will return something, right?

00:00:18.885 --> 00:00:21.630
So let's create a normal matter in the first place.

00:00:21.630 --> 00:00:27.180
So I'm going to create something like public static and it's going on,

00:00:27.180 --> 00:00:32.465
but for now I'm going to give it a want and mine. Any method name.

00:00:32.465 --> 00:00:35.105
So for now, show.

00:00:35.105 --> 00:00:36.845
So this is just an oral method.

00:00:36.845 --> 00:00:38.540
The first thing we'll talk about,

00:00:38.540 --> 00:00:41.090
what are the functionality which you're trying to achieve here.

00:00:41.090 --> 00:00:43.370
I'm going to pass two types of input.

00:00:43.370 --> 00:00:45.830
For example, I'm going to pass two inputs here.

00:00:45.830 --> 00:00:48.530
Both of them is going to be different types.

00:00:48.530 --> 00:00:53.495
So all I need to do is take those two inputs and create a map out of it,

00:00:53.495 --> 00:00:57.035
which means the first one is going to be key and secondarily is going to be value.

00:00:57.035 --> 00:00:59.615
So it's going to be a key and a value by right?

00:00:59.615 --> 00:01:01.745
So what we need to do the first place,

00:01:01.745 --> 00:01:05.210
we have to convert this metadata into a generic method.

00:01:05.210 --> 00:01:07.370
So normally what we will do before they're done,

00:01:07.370 --> 00:01:10.880
dipole provide the diamond operator and we'll provide that type here.

00:01:10.880 --> 00:01:15.260
But normally, this is a normal way to do it.

00:01:15.260 --> 00:01:16.850
But if it is a key and a value,

00:01:16.850 --> 00:01:18.710
but we're not going to use T, right?

00:01:18.710 --> 00:01:22.340
It's, we are going to prefer K and we're going to use a value asset,

00:01:22.340 --> 00:01:23.645
which means two types.

00:01:23.645 --> 00:01:25.295
So first tape and second type,

00:01:25.295 --> 00:01:27.095
K is the key, which is the first step.

00:01:27.095 --> 00:01:31.130
And second one is, we got it.

00:01:31.130 --> 00:01:32.570
Okay, So then I will change this,

00:01:32.570 --> 00:01:34.880
change them at metonym as a map here.

00:01:34.880 --> 00:01:37.430
And then the first input is going to be key rate.

00:01:37.430 --> 00:01:41.945
So K, it's going to be key comma value,

00:01:41.945 --> 00:01:45.380
sorry, v is equal to value.

00:01:45.380 --> 00:01:49.760
Okay? You might think so what will happen if I remove a v here?

00:01:49.760 --> 00:01:53.720
So there will be no issue with the key because this type

00:01:53.720 --> 00:01:57.050
has been mentioned in degenerate,

00:01:57.050 --> 00:02:01.010
but it's not, the compiler doesn't know what is a v in the first place.

00:02:01.010 --> 00:02:06.995
So in case if you provided the we in the generics diamond operator,

00:02:06.995 --> 00:02:08.270
okay, compiler will knows that.

00:02:08.270 --> 00:02:10.595
Okay, So this view comes from the generics,

00:02:10.595 --> 00:02:11.930
so which is a value.

00:02:11.930 --> 00:02:16.220
So here I had to provide K. Come on, we, right?

00:02:16.220 --> 00:02:19.460
So now what I'm gonna do, it needs to return something, right?

00:02:19.460 --> 00:02:23.255
So what I want, I want to written as a map.

00:02:23.255 --> 00:02:25.640
So for now, I'm going to create a map here.

00:02:25.640 --> 00:02:29.435
So map which will take alternate key and a value pair.

00:02:29.435 --> 00:02:33.690
And I have no idea what is the key type is going to be.

00:02:36.910 --> 00:02:42.635
So first thing, bitmap,

00:02:42.635 --> 00:02:48.090
okay, so then map is it called New HashMap.

00:02:49.540 --> 00:02:51.140
Got it.

00:02:51.140 --> 00:02:54.110
So what I need to do, some map.get, put.

00:02:54.110 --> 00:02:59.945
So the key and the value.

00:02:59.945 --> 00:03:01.355
So what I need to do,

00:03:01.355 --> 00:03:03.695
I have to return this map,

00:03:03.695 --> 00:03:07.370
but this method is just returning void.

00:03:07.370 --> 00:03:10.070
So what I needed it in here, instead of void,

00:03:10.070 --> 00:03:11.210
I entered written yeah,

00:03:11.210 --> 00:03:14.885
map which contains a key and a value pair, just change it.

00:03:14.885 --> 00:03:15.710
That's all.

00:03:15.710 --> 00:03:18.810
And then you have to return it.

00:03:20.020 --> 00:03:26.075
And here we return the map.

00:03:26.075 --> 00:03:27.350
That's all it takes.

00:03:27.350 --> 00:03:28.130
C.

00:03:28.130 --> 00:03:32.435
This indicates this mother is a generic method and this is the return type.

00:03:32.435 --> 00:03:36.245
So from the body implementation, so and here,

00:03:36.245 --> 00:03:38.390
map is a name and k is the key,

00:03:38.390 --> 00:03:40.430
and V is the value of these two auto-generate.

00:03:40.430 --> 00:03:42.320
So you can pass any kind of parameter to this,

00:03:42.320 --> 00:03:44.090
whether it's an integer or double,

00:03:44.090 --> 00:03:48.440
or even some reference DDoS, customized reduce.

00:03:48.440 --> 00:03:53.210
Okay, So let me try to call the method and we'll create something.

00:03:53.210 --> 00:03:54.875
So what I need to do, so for now,

00:03:54.875 --> 00:03:58.640
I'm going to create a map which contains,

00:03:58.640 --> 00:04:01.310
as for example, integer.

00:04:01.310 --> 00:04:05.405
A key value is going to be a string.

00:04:05.405 --> 00:04:08.195
So here it's mainly been Map 1.

00:04:08.195 --> 00:04:13.130
So what do I need to do? I notice in blue color map mother, right?

00:04:13.130 --> 00:04:17.120
Map and k is going to be integer, right?

00:04:17.120 --> 00:04:22.500
So one comma value is going to be a string.

00:04:22.990 --> 00:04:26.765
As simple as that. So let me print it out.

00:04:26.765 --> 00:04:30.095
And I'm going to have to add them up.

00:04:30.095 --> 00:04:36.095
So let's run it. Got it,

00:04:36.095 --> 00:04:37.715
we got the data back, right?

00:04:37.715 --> 00:04:40.010
This is a generic mother, so which means we can pass

00:04:40.010 --> 00:04:42.560
any kind of inputs to this, but limit that.

00:04:42.560 --> 00:04:46.520
It's not like integer or string even pass anything.

00:04:46.520 --> 00:04:48.080
So let me try something else.

00:04:48.080 --> 00:04:51.050
Map. I'm going to call a map.

00:04:51.050 --> 00:04:55.790
The key is going to be a string, okay?

00:04:55.790 --> 00:04:58.895
So like hello.

00:04:58.895 --> 00:05:02.060
And the value again is going to be as a string.

00:05:02.060 --> 00:05:03.605
So the first time it is going to be,

00:05:03.605 --> 00:05:05.540
the first time you try to integer string.

00:05:05.540 --> 00:05:07.340
Now I'm trying to just string and a string.

00:05:07.340 --> 00:05:09.180
Hello World.

00:05:10.120 --> 00:05:12.605
That's all we've got the map now.

00:05:12.605 --> 00:05:14.240
So let me run that.

00:05:14.240 --> 00:05:18.990
Aswell can run it.

00:05:20.080 --> 00:05:24.275
See, we got the outcome as we expected.

00:05:24.275 --> 00:05:26.240
So all you need to do, I mean,

00:05:26.240 --> 00:05:29.360
you need to know is when comes to a generic method,

00:05:29.360 --> 00:05:31.895
you need to know how to write a generic method.

00:05:31.895 --> 00:05:34.745
And you need to know how to return

00:05:34.745 --> 00:05:39.680
something from the particular math dot so that two things are necessary here.

00:05:39.680 --> 00:05:42.830
You need to tell the compiler it is going to be

00:05:42.830 --> 00:05:45.950
a generic method which will accept these types.

00:05:45.950 --> 00:05:49.580
And this is going to be returned something if nothing's happening here,

00:05:49.580 --> 00:05:51.380
you can use a void here.

00:05:51.380 --> 00:05:52.970
That's all you need to know.

00:05:52.970 --> 00:05:56.280
Okay, so let's move to the next example.
