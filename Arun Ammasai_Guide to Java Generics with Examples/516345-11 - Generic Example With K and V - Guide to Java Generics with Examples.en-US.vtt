WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.770
Hello everyone, Welcome back.

00:00:01.770 --> 00:00:03.000
So we discussed a boat,

00:00:03.000 --> 00:00:04.605
the naming conventions, right?

00:00:04.605 --> 00:00:07.455
And there are eight different types.

00:00:07.455 --> 00:00:12.435
Basically, we have seen that NANDA normal simple example with the class width,

00:00:12.435 --> 00:00:14.850
which will take one single input audit,

00:00:14.850 --> 00:00:15.990
you'll take multiple inputs.

00:00:15.990 --> 00:00:17.670
So let's try something different here.

00:00:17.670 --> 00:00:19.215
So let's take an example.

00:00:19.215 --> 00:00:20.490
The second 1, third 1,

00:00:20.490 --> 00:00:22.125
K, and V. Which means,

00:00:22.125 --> 00:00:24.540
so wherever you are creating a generic class,

00:00:24.540 --> 00:00:27.495
which are our key and a value, so you can use the KV.

00:00:27.495 --> 00:00:32.680
So let me show you a simple example how it can be done.

00:00:33.530 --> 00:00:38.025
Okay, so here I'm going to create a new class.

00:00:38.025 --> 00:00:41.350
So my class name is going to be a mapping.

00:00:41.350 --> 00:00:49.760
And this is not a generic class because I don't have the diamond operator here,

00:00:49.760 --> 00:00:54.380
so we'll deploy the diamond operator and we need to specify how many parameters.

00:00:54.380 --> 00:00:57.965
So how many parrot type parameters we're going to pass it here.

00:00:57.965 --> 00:00:59.870
It is going to be to ride with us.

00:00:59.870 --> 00:01:01.865
The first one is key and a value.

00:01:01.865 --> 00:01:06.335
So you can provide something like this key comma value.

00:01:06.335 --> 00:01:08.030
But as per the naming convention,

00:01:08.030 --> 00:01:09.440
if you're passing a key-value pair,

00:01:09.440 --> 00:01:12.230
you don't have to pass something like a key and a value.

00:01:12.230 --> 00:01:14.975
You can simply provide k,

00:01:14.975 --> 00:01:16.340
which represents the key.

00:01:16.340 --> 00:01:18.590
And here you can simply provide the Wii if

00:01:18.590 --> 00:01:21.230
someone else comes and they're looking at our code, which means okay,

00:01:21.230 --> 00:01:24.020
they know that, okay, mapping is a generic class it takes to k comma,

00:01:24.020 --> 00:01:26.975
which means it will add some to k value.

00:01:26.975 --> 00:01:28.355
Right?

00:01:28.355 --> 00:01:30.950
So now what I'm gonna do here,

00:01:30.950 --> 00:01:35.000
I'm one on Create Instance for k.

00:01:35.000 --> 00:01:38.090
In the similar, same thing for we ask,

00:01:38.090 --> 00:01:42.440
well, we, and I'm going to create centers.

00:01:42.440 --> 00:01:47.090
I'm first I will create a constructor and I want to print the data, right?

00:01:47.090 --> 00:01:49.040
So I wanted to do that at all.

00:01:49.040 --> 00:01:52.890
So, so I can have the getters and setters as well.

00:01:53.440 --> 00:02:01.740
And let's overriding toString method so we can simply print the object to see that data.

00:02:03.190 --> 00:02:06.320
Okay, so now we have everything in place.

00:02:06.320 --> 00:02:09.185
We have a generic class which takes a key and a value.

00:02:09.185 --> 00:02:11.555
So let's try it.

00:02:11.555 --> 00:02:14.854
So now I'm going to create a mapping.

00:02:14.854 --> 00:02:17.855
The object firm mapping.

00:02:17.855 --> 00:02:22.205
Mapping map is the new mapping.

00:02:22.205 --> 00:02:25.790
So is it the right thing to do a normal scenario?

00:02:25.790 --> 00:02:28.220
It is right, but here we're using generic class.

00:02:28.220 --> 00:02:30.335
It's not an ordinary Classic, the January class.

00:02:30.335 --> 00:02:33.440
So genetic glands, which are two type parameters here.

00:02:33.440 --> 00:02:35.030
So which means when your career,

00:02:35.030 --> 00:02:37.895
when you're trying to create the object for you or a generic class,

00:02:37.895 --> 00:02:40.640
unit dimension, what kind of type you're going to pass here,

00:02:40.640 --> 00:02:41.885
it's just a generic.

00:02:41.885 --> 00:02:44.810
But whenever you're trying to call that particular generic class,

00:02:44.810 --> 00:02:46.655
you need to provide what is the type.

00:02:46.655 --> 00:02:50.150
So here I'm going to pass as my key is going to be

00:02:50.150 --> 00:02:55.550
an integer and my value is going to be strain.

00:02:55.550 --> 00:02:57.200
And then we need to pass information.

00:02:57.200 --> 00:02:59.630
We are, for example, I'm passing key as a one.

00:02:59.630 --> 00:03:05.015
At the same time, our value as the same one in a string format.

00:03:05.015 --> 00:03:10.955
And then I can simply print the data because I already did the toString method, right?

00:03:10.955 --> 00:03:13.590
So let's run it and see.

00:03:13.660 --> 00:03:18.440
We got the data and we've got the outcome asked well, okay,

00:03:18.440 --> 00:03:20.480
So in genetics, as I mentioned earlier,

00:03:20.480 --> 00:03:22.475
we don't have to do the typecasting, right?

00:03:22.475 --> 00:03:25.880
So here I have an object which contains a key and a value.

00:03:25.880 --> 00:03:29.120
Let's try to retrieve the key value here.

00:03:29.120 --> 00:03:34.820
So map, map dot,

00:03:34.820 --> 00:03:43.805
get C0, and so it's an integer.

00:03:43.805 --> 00:03:45.695
And at the same time,

00:03:45.695 --> 00:03:52.760
Let's try two called the value as I've indicated the value as well.

00:03:52.760 --> 00:04:01.655
So get B. So now we're gonna key and a value pair.

00:04:01.655 --> 00:04:07.700
So n here, I don't have to type gets the information because it's generic.

00:04:07.700 --> 00:04:08.825
But if it is a collection,

00:04:08.825 --> 00:04:11.435
you must have to have caching the data.

00:04:11.435 --> 00:04:13.325
So let's print it and say we,

00:04:13.325 --> 00:04:14.765
anyway, we printed the object here.

00:04:14.765 --> 00:04:17.045
Let's print the key value separately.

00:04:17.045 --> 00:04:27.690
So as out here and that k is going to be the n value.

00:04:39.460 --> 00:04:42.090
Right?

00:04:42.880 --> 00:04:46.610
Okay, So I have a virtual primary key and the value,

00:04:46.610 --> 00:04:47.750
let's run it one more time.

00:04:47.750 --> 00:04:50.000
We will see what is the outcome.

00:04:50.000 --> 00:04:53.405
So it will print the exactly what we're looking for.

00:04:53.405 --> 00:04:57.440
So the S I will print the key and the value pet.

00:04:57.440 --> 00:04:59.390
So whenever you're trying to grow it in January class

00:04:59.390 --> 00:05:01.520
which looking for a key and a value pair.

00:05:01.520 --> 00:05:03.800
And again, whichever which we mentioned earlier,

00:05:03.800 --> 00:05:08.345
it is a parameterized class.

00:05:08.345 --> 00:05:10.310
And that parameter is class.

00:05:10.310 --> 00:05:12.680
We call it as a generic class that you'll have subs,

00:05:12.680 --> 00:05:15.200
some type of parameters here anytime.

00:05:15.200 --> 00:05:17.485
So here we can have a K gamma t, right?

00:05:17.485 --> 00:05:22.565
In our presentation we discussed something like e n t SUV.

00:05:22.565 --> 00:05:24.005
You can pass any one of them.

00:05:24.005 --> 00:05:28.175
For example, you can pass something like so I want third parameter,

00:05:28.175 --> 00:05:30.020
which is a collection.

00:05:30.020 --> 00:05:31.925
So you can use e here.

00:05:31.925 --> 00:05:33.380
And you might know,

00:05:33.380 --> 00:05:36.620
so I might have some numbers.

00:05:36.620 --> 00:05:41.810
So integer or a float or a double or long.

00:05:41.810 --> 00:05:43.730
So again, provide yen here,

00:05:43.730 --> 00:05:47.150
which means which represents the numbers. You can still do that.

00:05:47.150 --> 00:05:50.615
So if somebody comes in and they're looking at a generic class, they know that, okay,

00:05:50.615 --> 00:05:53.360
this is a mapping class and they have a k and a v,

00:05:53.360 --> 00:05:55.040
which means it's a key and a value.

00:05:55.040 --> 00:05:57.200
And there is a third element which is e,

00:05:57.200 --> 00:05:59.510
which means it might be collection.

00:05:59.510 --> 00:06:01.400
It is, I mean it is a collection.

00:06:01.400 --> 00:06:03.260
And the fourth one is n,

00:06:03.260 --> 00:06:06.980
which means the fourth generic I'm in.

00:06:06.980 --> 00:06:09.260
The fourth type is going to be a number.

00:06:09.260 --> 00:06:11.765
That number can be anything like integer,

00:06:11.765 --> 00:06:15.575
long, double, float, not shot aren't.

00:06:15.575 --> 00:06:16.415
Okay.

00:06:16.415 --> 00:06:18.155
So let's see in the next example.

00:06:18.155 --> 00:06:21.545
But anyway I'm, I'm just removing this.

00:06:21.545 --> 00:06:25.055
So let's see the next example,

00:06:25.055 --> 00:06:27.920
how we can create a generic method that we discussed.

00:06:27.920 --> 00:06:29.030
I would then reclassify rate.

00:06:29.030 --> 00:06:33.150
So obviously we should know how to create a generic method as well.
