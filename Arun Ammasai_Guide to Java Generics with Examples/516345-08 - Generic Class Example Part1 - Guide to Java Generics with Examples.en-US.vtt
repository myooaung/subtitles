WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.025
Hello everyone, welcome back.

00:00:02.025 --> 00:00:04.980
Now we're going to try a simple class.

00:00:04.980 --> 00:00:06.630
So what I'm trying to achieve here,

00:00:06.630 --> 00:00:13.755
so I want to have a class which will accept some data in it.

00:00:13.755 --> 00:00:16.755
Okay? So that data can be anything.

00:00:16.755 --> 00:00:21.855
So it can be a string or it can be in double whatever.

00:00:21.855 --> 00:00:23.955
So how we can design the class.

00:00:23.955 --> 00:00:26.340
So you have to create a class with

00:00:26.340 --> 00:00:30.180
the objects because OEM Did can object is a baseless liberating, right?

00:00:30.180 --> 00:00:35.255
So let me create a simple class like Class product, right?

00:00:35.255 --> 00:00:41.000
So product, and this is the class and I need to have two parameters here.

00:00:41.000 --> 00:00:42.350
The first one is, for example,

00:00:42.350 --> 00:00:45.155
product ID in the product description, right?

00:00:45.155 --> 00:00:47.570
So it might comes in string,

00:00:47.570 --> 00:00:48.950
it meant comes in integer,

00:00:48.950 --> 00:00:51.305
admin comes in some different kind of data as well.

00:00:51.305 --> 00:00:53.000
So how we can do that?

00:00:53.000 --> 00:00:55.340
Only thing which you can do is you can use it as

00:00:55.340 --> 00:01:00.140
an object because the object is a base class for everything.

00:01:00.140 --> 00:01:07.220
So the first one is product ID,

00:01:07.220 --> 00:01:14.960
and a similar way, the second one is prorate object.

00:01:14.960 --> 00:01:20.700
And a second on this description.

00:01:21.970 --> 00:01:24.500
Okay, so the next thing which I'm going to do,

00:01:24.500 --> 00:01:29.285
I'm going to just simply create a construct that to get the data right.

00:01:29.285 --> 00:01:37.159
So I'm going to provide constructor which takes the ID and the description.

00:01:37.159 --> 00:01:39.920
So we are good to go.

00:01:39.920 --> 00:01:45.900
And then also I want to have deducing matter.

00:01:50.980 --> 00:01:56.280
Okay, so now let's have a getters and setters as well.

00:01:58.560 --> 00:02:02.295
Okay, so just take a look in this class.

00:02:02.295 --> 00:02:06.205
It's a, it's a product class which contains my party description.

00:02:06.205 --> 00:02:09.220
Because the reason why I'm keeping object here because I'm not sure

00:02:09.220 --> 00:02:13.015
whether they're going to pass a string or integer or whatever it is.

00:02:13.015 --> 00:02:13.855
So whatever.

00:02:13.855 --> 00:02:15.700
So because since I'm using object which can,

00:02:15.700 --> 00:02:18.190
which means it can accept any kind of a data.

00:02:18.190 --> 00:02:20.365
But what will happen if you're using that?

00:02:20.365 --> 00:02:22.960
And what is it determined, which I'm going to show you that now.

00:02:22.960 --> 00:02:26.230
So now we have the generic class here.

00:02:26.230 --> 00:02:29.455
So let's write a main class here.

00:02:29.455 --> 00:02:30.820
So now what I'm gonna do,

00:02:30.820 --> 00:02:33.820
I'm gonna create a instance for the product.

00:02:33.820 --> 00:02:42.485
So product is new product.

00:02:42.485 --> 00:02:45.230
So obviously it will throw some error because we need to

00:02:45.230 --> 00:02:47.810
pass some objects here we've got that is a constructor.

00:02:47.810 --> 00:02:50.600
We are created here. So here.

00:02:50.600 --> 00:02:55.565
So first it's going to be so product,

00:02:55.565 --> 00:02:57.410
or it's just an ID, right?

00:02:57.410 --> 00:02:59.420
So ID can be an integer or string,

00:02:59.420 --> 00:03:01.100
so I can be one to one.

00:03:01.100 --> 00:03:03.965
And then the description is,

00:03:03.965 --> 00:03:08.360
so, see, now we've got a product.

00:03:08.360 --> 00:03:09.380
Correct.

00:03:09.380 --> 00:03:11.120
But the problem is,

00:03:11.120 --> 00:03:13.250
so I want to know what is the product.

00:03:13.250 --> 00:03:17.825
So what I'm trying to do is I'm trying to retrieve the product.

00:03:17.825 --> 00:03:22.625
Product did not get product ID.

00:03:22.625 --> 00:03:25.340
So we know that product ID is an integer,

00:03:25.340 --> 00:03:28.085
so I'm trying to retrieve through an integer value,

00:03:28.085 --> 00:03:31.685
so int id is equal.

00:03:31.685 --> 00:03:33.800
So here is a problem.

00:03:33.800 --> 00:03:35.900
And we have seen the problem in the,

00:03:35.900 --> 00:03:37.685
when you're talking about the collection as well.

00:03:37.685 --> 00:03:41.240
Because when you're using normal plasma and knees and autumn methods,

00:03:41.240 --> 00:03:44.225
you have to do the typecasting.

00:03:44.225 --> 00:03:48.890
Because there's a normal, another DDO write, another object.

00:03:48.890 --> 00:03:50.570
So you need to typecast the data.

00:03:50.570 --> 00:03:55.055
So how I have to typecast into an integer again.

00:03:55.055 --> 00:04:05.015
And then we can product ID is equal.

00:04:05.015 --> 00:04:08.540
And I'm going to show you the 200 ID.

00:04:08.540 --> 00:04:09.650
Cool.

00:04:09.650 --> 00:04:15.170
So now let's run this. So here is a problem.

00:04:15.170 --> 00:04:16.970
You have to do the typecasting.

00:04:16.970 --> 00:04:18.995
So, but when you're going for generates, the first thing,

00:04:18.995 --> 00:04:21.365
you don't have to do the typecasting in the first place?

00:04:21.365 --> 00:04:28.400
Correct. And that's also type safety as well. Right?

00:04:28.400 --> 00:04:29.540
So now we've got our data.

00:04:29.540 --> 00:04:32.810
So now what I'm gonna do, so we are going to get,

00:04:32.810 --> 00:04:34.760
try to get the description as well.

00:04:34.760 --> 00:04:40.230
So product to get product description,

00:04:40.780 --> 00:04:43.130
see it's object description,

00:04:43.130 --> 00:04:44.990
but I know that it's a string, right?

00:04:44.990 --> 00:04:50.365
So string, sorry, string.

00:04:50.365 --> 00:04:51.970
So the product description, again,

00:04:51.970 --> 00:04:54.040
it's going to throw an error because it's

00:04:54.040 --> 00:04:57.160
a string and you're iterating it and you're using a normal way.

00:04:57.160 --> 00:05:05.664
So you have to typecast the data into a string C.

00:05:05.664 --> 00:05:10.315
We are good to go. Let me copy this and put it here.

00:05:10.315 --> 00:05:14.620
So here it is going to be product description.

00:05:14.620 --> 00:05:17.740
And you can grow wider the description here and there.

00:05:17.740 --> 00:05:19.885
Now you can undo one more time.

00:05:19.885 --> 00:05:23.905
You should be able to see the product ID and the product description as well.

00:05:23.905 --> 00:05:30.285
So if you want to pass some data and the data can be anything or any type,

00:05:30.285 --> 00:05:33.890
we have to go for objects because object is a base class for everything.

00:05:33.890 --> 00:05:37.655
But how it can be done through genetics.

00:05:37.655 --> 00:05:38.915
We're going to talk about that,

00:05:38.915 --> 00:05:41.855
and we're going to talk about what is the advantages of it.

00:05:41.855 --> 00:05:44.360
So now it can be done through this way,

00:05:44.360 --> 00:05:49.565
but let's do the same thing using our generics,

00:05:49.565 --> 00:05:51.544
which will be much more efficient.

00:05:51.544 --> 00:05:53.640
So let's do that.
