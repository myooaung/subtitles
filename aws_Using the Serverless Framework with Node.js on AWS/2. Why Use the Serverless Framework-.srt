1
00:00:02,380 --> 00:00:03,392
As I mentioned earlier,

2
00:00:03,392 --> 00:00:06,049
community is a huge part of choosing which framework to use,

3
00:00:06,049 --> 00:00:08,858
so let's take a look at some GitHub metrics that serve as

4
00:00:08,858 --> 00:00:11,982
proxies for the quality and size of the development

5
00:00:11,982 --> 00:00:13,602
communities around these frameworks.

6
00:00:13,602 --> 00:00:16,777
We'll be looking at watchers, stars, and forks.

7
00:00:16,777 --> 00:00:20,494
Each of these metrics should indicate relatively how many fellow

8
00:00:20,494 --> 00:00:23,942
developers are interested in the project as of July 2017.

9
00:00:23,942 --> 00:00:27,430
Now some serverless frameworks are supported by smaller groups of developers,

10
00:00:27,430 --> 00:00:28,515
or specific companies.

11
00:00:28,515 --> 00:00:30,979
Or even if they have larger communities,

12
00:00:30,979 --> 00:00:33,026
they may only support a single language,

13
00:00:33,026 --> 00:00:36,054
and can potentially not be the one you're interested in using.

14
00:00:36,054 --> 00:00:37,826
If GitHub can tell us anything,

15
00:00:37,826 --> 00:00:40,743
it's that the serverless framework easily has the largest

16
00:00:40,743 --> 00:00:43,262
development community out of any serverless framework.

17
00:00:43,262 --> 00:00:44,453
It's not a surprise, either,

18
00:00:44,453 --> 00:00:47,522
as the company behind the framework is dedicated to the growth

19
00:00:47,522 --> 00:00:49,624
and maintenance of the framework itself,

20
00:00:49,624 --> 00:00:51,306
rather than the framework being an offshoot of some

21
00:00:51,306 --> 00:00:54,072
other development practice or project.

22
00:00:54,072 --> 00:00:56,313
But don't take my word for it.

23
00:00:56,313 --> 00:00:57,274
In June 2017,

24
00:00:57,274 --> 00:01:00,492
the technology analyst firm Red Monk evaluated several

25
00:01:00,492 --> 00:01:02,967
serverless projects on GitHub over time,

26
00:01:02,967 --> 00:01:05,150
and found that the growth and stars for the serverless

27
00:01:05,150 --> 00:01:08,817
framework vastly outpaced all of the projects that it was

28
00:01:08,817 --> 00:01:10,350
evaluating within the category.

29
00:01:10,350 --> 00:01:13,202
This interest comes not only from smaller startup companies,

30
00:01:13,202 --> 00:01:18,008
like CrazyLister and Ibotta, but it also comes from highly established companies,

31
00:01:18,008 --> 00:01:20,621
like Coca-Cola, Expedia, and Nordstrom.

32
00:01:20,621 --> 00:01:23,806
Now that we understand how popular the serverless framework has become,

33
00:01:23,806 --> 00:01:27,098
let's take a quick look at some of the key features of the framework.

34
00:01:27,098 --> 00:01:29,938
One of the key tooling features that the serverless framework

35
00:01:29,938 --> 00:01:31,862
provides is a highly structured development process,

36
00:01:31,862 --> 00:01:33,788
which we'll look at more shortly.

37
00:01:33,788 --> 00:01:37,086
This process makes it easier to develop new services,

38
00:01:37,086 --> 00:01:40,693
and for developers to quickly gain familiarity with the project.

39
00:01:40,693 --> 00:01:42,993
As part of the structure development process,

40
00:01:42,993 --> 00:01:45,484
the framework also manages all the infrastructure

41
00:01:45,484 --> 00:01:47,366
required for deploying a project.

42
00:01:47,366 --> 00:01:49,168
Because it manages this process,

43
00:01:49,168 --> 00:01:52,914
it starts to significantly reduce the complexity of infrastructure providers.

44
00:01:52,914 --> 00:01:56,573
Rather than having to learn the nuances of multiple APIs,

45
00:01:56,573 --> 00:02:00,117
you can learn the serverless framework commands and that should automate the

46
00:02:00,117 --> 00:02:03,514
deployment process across multiple infrastructure providers.

47
00:02:03,514 --> 00:02:06,395
Further, the framework is somewhat infrastructure independent.

48
00:02:06,395 --> 00:02:10,717
The code structure and deployment process doesn't change very much at

49
00:02:10,717 --> 00:02:13,243
all when switching between infrastructure providers.

50
00:02:13,243 --> 00:02:17,012
While you may have to switch certain libraries, the structure remains the same.

51
00:02:17,012 --> 00:02:21,117
Speaking of infrastructure providers, in addition to using it with AWS,

52
00:02:21,117 --> 00:02:24,567
the serverless framework also has support from Microsoft Azure,

53
00:02:24,567 --> 00:02:28,070
IBM's Open Whisk, and Google Cloud Platform.

54
00:02:28,070 --> 00:02:29,611
Across these infrastructure platforms,

55
00:02:29,611 --> 00:02:33,889
the framework has support for a variety of languages,

56
00:02:33,889 --> 00:02:35,064
including Node.

57
00:02:35,064 --> 00:02:38,592
js, Java, C#, PHP, and Python.

58
00:02:38,592 --> 00:02:40,892
Now I don't want to convince you that this is a

59
00:02:40,892 --> 00:02:41,747
one-size-fits-all kind of solution.

60
00:02:41,747 --> 00:02:45,041
There are potential drawbacks when it comes to using serverless technologies,

61
00:02:45,041 --> 00:02:47,137
and frameworks in particular.

62
00:02:47,137 --> 00:02:50,673
Some of the most common criticisms of the framework is that it obscures

63
00:02:50,673 --> 00:02:52,905
the backend infrastructure behind each of your services.

64
00:02:52,905 --> 00:02:56,333
Now this could technically be both a benefit or a drawback,

65
00:02:56,333 --> 00:02:59,692
depending on whether or not the obscurity increases productivity,

66
00:02:59,692 --> 00:03:03,931
or leads to the potential misunderstandings of the underlying technologies.

67
00:03:03,931 --> 00:03:06,746
I'd say it's important to still have an understanding of the

68
00:03:06,746 --> 00:03:09,392
infrastructure underneath the framework's automation processes,

69
00:03:09,392 --> 00:03:11,767
and keep that in mind when building applications.

70
00:03:11,767 --> 00:03:14,806
The framework is also somewhat permission hungry.

71
00:03:14,806 --> 00:03:16,367
In development environments that are highly locked down,

72
00:03:16,367 --> 00:03:20,403
it can be difficult to use the framework to manage your development processes,

73
00:03:20,403 --> 00:03:24,196
because of the broad permissions required to create and destroy infrastructure.

74
00:03:24,196 --> 00:03:26,336
There are also potential challenges for maintaining

75
00:03:26,336 --> 00:03:28,306
compliance with things like HIPPA.

76
00:03:28,306 --> 00:03:31,388
Because serverless services are by definition somewhat

77
00:03:31,388 --> 00:03:33,212
distributed between many managed services,

78
00:03:33,212 --> 00:03:38,307
it's important to see which ones qualify for compliance and which ones do not.

79
00:03:38,307 --> 00:03:41,361
The development process is also very opinionated.

80
00:03:41,361 --> 00:03:43,426
There's a specific way to write and structure your code,

81
00:03:43,426 --> 00:03:46,586
and similarly, there's a specific way to deploy it.

82
00:03:46,586 --> 00:03:50,175
This again can be a benefit or a drawback, depending on your use case.

83
00:03:50,175 --> 00:03:51,684
So with this basic context out of the way,

84
00:03:51,684 --> 00:03:58,000
let's take a look at the projects and skills that we'll be developing throughout the course.

