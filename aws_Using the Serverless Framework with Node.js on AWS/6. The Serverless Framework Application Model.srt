1
00:00:03,279 --> 00:00:07,102
Now that you're all set up with the serverless framework and your AWS account,

2
00:00:07,102 --> 00:00:11,003
let's get started learning the serverless application model.

3
00:00:11,003 --> 00:00:14,547
Every serverless framework application has the same components.

4
00:00:14,547 --> 00:00:15,385
They have functions,

5
00:00:15,385 --> 00:00:18,466
which execute code in response to specific events that trigger them.

6
00:00:18,466 --> 00:00:21,737
Now these events can be anything ranging from an HTTP request,

7
00:00:21,737 --> 00:00:25,196
a scheduled event, or a specific infrastructure provider event,

8
00:00:25,196 --> 00:00:28,383
like an AWS S3 file upload.

9
00:00:28,383 --> 00:00:32,021
Serverless framework applications also frequently use resources.

10
00:00:32,021 --> 00:00:36,811
Resources are other infrastructure components that your application depends on.

11
00:00:36,811 --> 00:00:39,780
An example of a resource in the AWS infrastructure could

12
00:00:39,780 --> 00:00:44,767
be something like a DynamoDB table, or an AWS simple storage service bucket.

13
00:00:44,767 --> 00:00:46,962
In order to keep all of these moving parts straight,

14
00:00:46,962 --> 00:00:49,525
the serverless framework has a concept of services.

15
00:00:49,525 --> 00:00:52,268
And these services encapsulate your functions,

16
00:00:52,268 --> 00:00:53,640
events, and resources,

17
00:00:53,640 --> 00:00:56,199
so that you can logically separate them from other services.

18
00:00:56,199 --> 00:00:59,332
While it's more than likely that within one full-blown

19
00:00:59,332 --> 00:01:01,148
serverless application you'll have many services,

20
00:01:01,148 --> 00:01:03,706
this really helps to organize everything that you're doing.

21
00:01:03,706 --> 00:01:08,323
So let's take a look at some of these concepts in a little more detail.

22
00:01:08,323 --> 00:01:10,378
Now when we say serverless functions,

23
00:01:10,378 --> 00:01:12,748
we mean something specific depending on the infrastructure

24
00:01:12,748 --> 00:01:14,247
provider the framework is interacting with.

25
00:01:14,247 --> 00:01:17,254
We could use offerings like IBM's Open Whisk,

26
00:01:17,254 --> 00:01:19,433
Google Cloud Functions, or Microsoft's Azure Functions.

27
00:01:19,433 --> 00:01:23,248
But in this course, we'll be relying exclusively on AWS Lambda,

28
00:01:23,248 --> 00:01:27,750
the serverless function equivalent of the other service providers.

29
00:01:27,750 --> 00:01:29,956
What events you can use in your applications also

30
00:01:29,956 --> 00:01:31,882
depends on the platform that you're using.

31
00:01:31,882 --> 00:01:36,552
In AWS, you can trigger functions with events from the AWS API Gateway,

32
00:01:36,552 --> 00:01:38,277
scheduled events like Cron,

33
00:01:38,277 --> 00:01:42,674
from file uploads or changes that happen in AWS S3 buckets,

34
00:01:42,674 --> 00:01:44,408
from CloudWatch logs in AWS,

35
00:01:44,408 --> 00:01:48,869
and from updates of things like DynamoDB tables or even from

36
00:01:48,869 --> 00:01:52,428
IOT devices and things like Alexa Skills.

37
00:01:52,428 --> 00:01:54,653
The most commonly used serverless resources are

38
00:01:54,653 --> 00:01:58,390
things like we mentioned already, like DynamoDB as a serverless database,

39
00:01:58,390 --> 00:02:00,641
and S3 as a file storage service.

40
00:02:00,641 --> 00:02:00,963
However,

41
00:02:00,963 --> 00:02:04,635
you can also have any other AWS resource that can be

42
00:02:04,635 --> 00:02:06,700
described in a cloud formation template.

43
00:02:06,700 --> 00:02:10,409
Now this can be anything ranging from CloudFront Distribution

44
00:02:10,409 --> 00:02:13,944
networks to speed up delivery of files to your users,

45
00:02:13,944 --> 00:02:18,484
or an Amazon Cognito User Pool to manage the users of mobile applications.

46
00:02:18,484 --> 00:02:22,744
And the serverless framework documentation describes a service like a project.

47
00:02:22,744 --> 00:02:24,928
It's where you define your AWS Lambda Functions,

48
00:02:24,928 --> 00:02:30,236
the events that trigger them, and any AWS infrastructure resources they require,

49
00:02:30,236 --> 00:02:32,609
all in a file called serverless.

50
00:02:32,609 --> 00:02:33,004
yml.

51
00:02:33,004 --> 00:02:36,795
Services all share a similar set of characteristics.

52
00:02:36,795 --> 00:02:40,221
All of them have the same logical structure to organize your entire code base.

53
00:02:40,221 --> 00:02:43,519
Services also have a single configuration file that shares the

54
00:02:43,519 --> 00:02:46,585
same structure inside of that configuration file.

55
00:02:46,585 --> 00:02:49,613
Services that require REST APIs also all share the same

56
00:02:49,613 --> 00:02:51,658
endpoint URLs for those endpoints.

57
00:02:51,658 --> 00:02:57,238
And finally, each service shares the same resources amongst its functions.

58
00:02:57,238 --> 00:02:58,835
So we've kind of hinted at this,

59
00:02:58,835 --> 00:03:01,978
but let's look at what's actually in each of these services.

60
00:03:01,978 --> 00:03:03,910
Also services contain a serverless.

61
00:03:03,910 --> 00:03:05,978
yml file, which is the main configuration file,

62
00:03:05,978 --> 00:03:08,310
and defines all the configuration for our service.

63
00:03:08,310 --> 00:03:11,320
They also contain all the function code that will be

64
00:03:11,320 --> 00:03:12,328
triggered in response to events,

65
00:03:12,328 --> 00:03:16,024
as well as any of the dependencies that the code may require.

66
00:03:16,024 --> 00:03:19,818
But let's take a look at an example to see this in a little more detail.

67
00:03:19,818 --> 00:03:21,310
In a simple Node.

68
00:03:21,310 --> 00:03:24,295
js service, we might see two files, serverless.

69
00:03:24,295 --> 00:03:26,953
yml for the service configuration, and handler.

70
00:03:26,953 --> 00:03:29,535
js, which actually contains the function code.

71
00:03:29,535 --> 00:03:32,045
In a medium-sized application with multiple services,

72
00:03:32,045 --> 00:03:35,191
we would see several directories for each service.

73
00:03:35,191 --> 00:03:38,395
Now each of those services will have serverless.

74
00:03:38,395 --> 00:03:40,688
yml configuration files, and in this example,

75
00:03:40,688 --> 00:03:43,626
The Woof Garden pet service interacts with the pets database,

76
00:03:43,626 --> 00:03:46,651
and that database would be a resource required for this purpose.

77
00:03:46,651 --> 00:03:49,232
This service would also have all functions used to

78
00:03:49,232 --> 00:03:51,634
perform CRUD operations within the handler.

79
00:03:51,634 --> 00:03:52,435
js file.

80
00:03:52,435 --> 00:03:55,527
Keep in mind that function code being in a file called

81
00:03:55,527 --> 00:03:56,780
handler is purely by convention,

82
00:03:56,780 --> 00:03:59,658
and this is convention that we'll be breaking later when you

83
00:03:59,658 --> 00:04:02,074
split up CRUD operations into multiple files.

84
00:04:02,074 --> 00:04:06,107
All dependencies for this function live within the node_modules folder.

85
00:04:06,107 --> 00:04:07,518
There's also the package.

86
00:04:07,518 --> 00:04:11,575
json file used to specify the node dependencies required for the service.

87
00:04:11,575 --> 00:04:15,100
Another service in this application used for reminder notifications

88
00:04:15,100 --> 00:04:17,806
would have a completely independent serverless.

89
00:04:17,806 --> 00:04:20,881
yml file, different function code in handler.

90
00:04:20,881 --> 00:04:23,415
js and more than likely different dependencies.

91
00:04:23,415 --> 00:04:26,869
Now let's take a closer look at each of these application components.

92
00:04:26,869 --> 00:04:27,431
The serverless.

93
00:04:27,431 --> 00:04:30,731
yml file contains all your configuration for the service written in.

94
00:04:30,731 --> 00:04:31,081
yml.

95
00:04:31,081 --> 00:04:31,431
Now.

96
00:04:31,431 --> 00:04:33,532
yml is fairly easy to learn,

97
00:04:33,532 --> 00:04:35,891
but for the most part we'll just be modifying existing examples.

98
00:04:35,891 --> 00:04:37,946
So don't worry too much about this.

99
00:04:37,946 --> 00:04:40,465
The first set of things configured by serverless.

100
00:04:40,465 --> 00:04:42,216
yml is the service itself.

101
00:04:42,216 --> 00:04:44,202
It defines a name for the service,

102
00:04:44,202 --> 00:04:47,308
determines which provider and runtime this service will be using,

103
00:04:47,308 --> 00:04:50,493
and specifies files or directories that explicitly should or

104
00:04:50,493 --> 00:04:53,576
shouldn't be included when packaging the function code.

105
00:04:53,576 --> 00:04:56,988
It also defines any resources required by the service.

106
00:04:56,988 --> 00:05:00,250
In this example, we see it defining an imaginary users table,

107
00:05:00,250 --> 00:05:01,646
defining the structure of the table,

108
00:05:01,646 --> 00:05:03,950
and determining the level of read and write capacity

109
00:05:03,950 --> 00:05:05,946
that we should provide the table with.

110
00:05:05,946 --> 00:05:06,617
Critically, serverless.

111
00:05:06,617 --> 00:05:09,684
yml also defines all the functions within the service,

112
00:05:09,684 --> 00:05:11,991
the events that will trigger them,

113
00:05:11,991 --> 00:05:15,119
and any configuration required for the functions themselves.

114
00:05:15,119 --> 00:05:19,459
Each serverless function in AWS' Node environment has an event,

115
00:05:19,459 --> 00:05:20,492
a context, and a callback.

116
00:05:20,492 --> 00:05:22,492
The event object contains data passed into the

117
00:05:22,492 --> 00:05:24,773
function from whatever event triggers it.

118
00:05:24,773 --> 00:05:25,181
Most often,

119
00:05:25,181 --> 00:05:26,811
functions will process the event object and determine

120
00:05:26,811 --> 00:05:28,536
how to act from that information.

121
00:05:28,536 --> 00:05:31,866
The context object contains a variety of information about the function,

122
00:05:31,866 --> 00:05:34,252
such as the function's name, the function memory limit,

123
00:05:34,252 --> 00:05:36,015
and the log group name for the function.

124
00:05:36,015 --> 00:05:38,841
It also provides a method to get the remaining time left for

125
00:05:38,841 --> 00:05:40,391
the function before timeout would occur.

126
00:05:40,391 --> 00:05:40,916
And finally,

127
00:05:40,916 --> 00:05:44,857
the callback is used to pass back information to the function caller.

128
00:05:44,857 --> 00:05:47,412
Many serverless functions make use of dependencies

129
00:05:47,412 --> 00:05:48,872
to enhance their functionality.

130
00:05:48,872 --> 00:05:51,154
These dependencies can be anything from snippets of

131
00:05:51,154 --> 00:05:53,484
custom code included in the same folder,

132
00:05:53,484 --> 00:05:54,892
to full-blown npm packages.

133
00:05:54,892 --> 00:05:58,537
These npm packages can also be serverless framework plugins that enhance

134
00:05:58,537 --> 00:06:01,104
and extend the functionality of the framework itself.

135
00:06:01,104 --> 00:06:03,082
Okay, we've covered a lot of concepts,

136
00:06:03,082 --> 00:06:05,909
so let's quickly visualize everything before we start

137
00:06:05,909 --> 00:06:08,031
developing our own serverless services.

138
00:06:08,031 --> 00:06:08,355
First,

139
00:06:08,355 --> 00:06:12,247
let's think about a service responsible for CRUD operations on some database.

140
00:06:12,247 --> 00:06:14,100
Now, every service is a shared configuration file,

141
00:06:14,100 --> 00:06:16,537
so we'll imagine this as the structure of our service.

142
00:06:16,537 --> 00:06:19,007
And in this case, we'd have several functions,

143
00:06:19,007 --> 00:06:21,588
each one to manage different CRUD operations.

144
00:06:21,588 --> 00:06:25,506
We might also require specific libraries to work properly with the database.

145
00:06:25,506 --> 00:06:26,460
In order to trigger these functions,

146
00:06:26,460 --> 00:06:30,114
we'll likely need to have some sort of web form to create new entries.

147
00:06:30,114 --> 00:06:32,772
These forms would send events through the AWS API

148
00:06:32,772 --> 00:06:34,226
gateway and serve as our events.

149
00:06:34,226 --> 00:06:34,735
And finally,

150
00:06:34,735 --> 00:06:38,656
we might have a database resource to store all this information for our service.

151
00:06:38,656 --> 00:06:41,610
In another example where we're creating a reminder service,

152
00:06:41,610 --> 00:06:44,898
we'd have the same structure for our configuration and our service,

153
00:06:44,898 --> 00:06:47,025
but we might only have one function.

154
00:06:47,025 --> 00:06:49,064
Now, the function might use fewer libraries,

155
00:06:49,064 --> 00:06:51,912
and have a different set of events on a schedule

156
00:06:51,912 --> 00:06:53,582
rather than associated with an API.

157
00:06:53,582 --> 00:06:53,938
Finally,

158
00:06:53,938 --> 00:06:56,788
it might store email reminder templates in a

159
00:06:56,788 --> 00:06:59,431
different kind of resource entirely, such as AWS S3.

160
00:06:59,431 --> 00:07:02,232
So you'll start to see that while the types of

161
00:07:02,232 --> 00:07:03,377
applications can differ substantially,

162
00:07:03,377 --> 00:07:05,488
you'll generally have the same structure and

163
00:07:05,488 --> 00:07:06,694
underlying concepts behind everything.

164
00:07:06,694 --> 00:07:06,896
So,

165
00:07:06,896 --> 00:07:08,718
now that we've got a strong understanding of the

166
00:07:08,718 --> 00:07:16,000
concept used by the serverless framework, let's take a look at how we can develop our applications.

