WEBVTT
1
00:00:02.798 --> 00:00:05.419
Even with the great tooling of the serverless framework,

2
00:00:05.419 --> 00:00:08.612
there's a few other tools that you'll want some experience with to save yourself

3
00:00:08.612 --> 00:00:11.778
time while you're creating serverless applications on AWS.

4
00:00:11.778 --> 00:00:13.846
The first is AWS CloudWatch logs.

5
00:00:13.846 --> 00:00:16.111
CloudWatch is a monitoring service for AWS,

6
00:00:16.111 --> 00:00:19.359
and the logs it has for lambda will help you track down

7
00:00:19.359 --> 00:00:21.049
errors that occur during function execution.

8
00:00:21.049 --> 00:00:23.571
While you can run serverless invoke with the --log

9
00:00:23.571 --> 00:00:25.754
flag like we did in an earlier demo,

10
00:00:25.754 --> 00:00:28.245
you can't watch every function execute in your terminal,

11
00:00:28.245 --> 00:00:32.285
so being able to review the logs after the execution will

12
00:00:32.285 --> 00:00:34.038
help you find errors that you missed.

13
00:00:34.038 --> 00:00:38.194
You should also consider using Postman to help test your serverless APIs.

14
00:00:38.194 --> 00:00:42.747
This tool allows you to create and test HTTP requests with JSON text bodies

15
00:00:42.747 --> 00:00:45.398
in order to test your applications are working correctly.

16
00:00:45.398 --> 00:00:45.700
Finally,

17
00:00:45.700 --> 00:00:48.117
I'd also suggest getting familiar with the serverless

18
00:00:48.117 --> 00:00:49.393
framework GitHub Issues section.

19
00:00:49.393 --> 00:00:51.989
Because the framework is evolving so quickly and

20
00:00:51.989 --> 00:00:53.014
adding significant functionality,

21
00:00:53.014 --> 00:00:56.250
that's a great place to look for issues that others might

22
00:00:56.250 --> 00:00:57.776
have already encountered with the framework.

23
00:00:57.776 --> 00:00:59.719
There's also a lot of other resources that we'll take

24
00:00:59.719 --> 00:01:04.806
a look at that are listed there.

25
00:01:04.806 --> 00:01:05.406
In this demo,

26
00:01:05.406 --> 00:01:07.005
we'll get familiar with some of the debugging

27
00:01:07.005 --> 00:01:09.867
methodologies we can use to test our services.

28
00:01:09.867 --> 00:01:12.608
First, we'll make a change to our CRUD API,

29
00:01:12.608 --> 00:01:15.873
which breaks the function that writes the new entries to the database.

30
00:01:15.873 --> 00:01:18.560
Then we'll re-deploy it with that quirk in order to see how

31
00:01:18.560 --> 00:01:20.513
we could investigate and fix the issue.

32
00:01:20.513 --> 00:01:23.669
We'll check to make sure we're forming the request correctly,

33
00:01:23.669 --> 00:01:27.213
and see what responses we're getting back from the API.

34
00:01:27.213 --> 00:01:30.252
We'll do this using both curl and Postman.

35
00:01:30.252 --> 00:01:30.521
Then,

36
00:01:30.521 --> 00:01:33.475
we'll log into the AWS console and review some of the

37
00:01:33.475 --> 00:01:35.655
CloudWatch logs for our broken function.

38
00:01:35.655 --> 00:01:38.886
After that, we'll isolate the problem that we created,

39
00:01:38.886 --> 00:01:41.388
fix the issue, and then redeploy our service.

40
00:01:41.388 --> 00:01:43.917
So let's get to it.

41
00:01:43.917 --> 00:01:44.924
Within our create.

42
00:01:44.924 --> 00:01:47.275
js file, scroll down to line 33.

43
00:01:47.275 --> 00:01:51.442
On that line, go ahead and add an extra t to the end of put.

44
00:01:51.442 --> 00:01:54.911
Don't forget to save the file after you've done this.

45
00:01:54.911 --> 00:01:56.881
Back in the terminal,

46
00:01:56.881 --> 00:02:01.715
you can specify serverless deploy --function and use create for the function.

47
00:02:01.715 --> 00:02:07.190
After this is deployed, be sure you copy down the full URL for the POST endpoint.

48
00:02:07.190 --> 00:02:08.016
Back in Postman,

49
00:02:08.016 --> 00:02:11.369
go ahead and make sure that the API endpoint that you copied down

50
00:02:11.369 --> 00:02:13.563
just now is the same as what's in the section here.

51
00:02:13.563 --> 00:02:16.184
Then change the values for the petName and petBreed that you

52
00:02:16.184 --> 00:02:17.921
were going to add to the database earlier,

53
00:02:17.921 --> 00:02:19.634
and go ahead and hit the Send button.

54
00:02:19.634 --> 00:02:21.591
You should see this message here.

55
00:02:21.591 --> 00:02:24.844
Now internal server error doesn't actually tell us that much information,

56
00:02:24.844 --> 00:02:26.466
but it does us something useful.

57
00:02:26.466 --> 00:02:29.674
It means we have to take a look at the lambda CloudWatch execution logs

58
00:02:29.674 --> 00:02:32.921
to get a little more information about this error.

59
00:02:32.921 --> 00:02:37.387
Back in the AWS console, go ahead and navigate to the lambda section.

60
00:02:37.387 --> 00:02:40.475
In the lambda section, you might have quite a few functions by now,

61
00:02:40.475 --> 00:02:43.387
so go ahead and filter for the word create.

62
00:02:43.387 --> 00:02:46.412
You should then see the function that we have here.

63
00:02:46.412 --> 00:02:49.532
After you've clicked on that, you should see a page that looks like this.

64
00:02:49.532 --> 00:02:52.162
On that page, we'll go to the monitoring section.

65
00:02:52.162 --> 00:02:54.113
If you scroll down slightly in the monitoring section,

66
00:02:54.113 --> 00:02:57.400
you should see an invocation that just resulted in an error.

67
00:02:57.400 --> 00:02:59.235
You can see this on the chart on the far right.

68
00:02:59.235 --> 00:03:02.386
Go ahead and click the View CloudWatch logs button.

69
00:03:02.386 --> 00:03:05.154
These are the log streams for your function invocations.

70
00:03:05.154 --> 00:03:07.356
You can go ahead and look more in depth at specific runs of your

71
00:03:07.356 --> 00:03:10.692
function by clicking on the most recent log stream.

72
00:03:10.692 --> 00:03:13.386
Be sure to sort by the last event time in order to

73
00:03:13.386 --> 00:03:14.509
find that most recent invocation.

74
00:03:14.509 --> 00:03:17.312
This is especially important if you have a lot of logs.

75
00:03:17.312 --> 00:03:20.835
As you can see, the error log information is surfaced here.

76
00:03:20.835 --> 00:03:23.731
You can see there's an error that has to do with

77
00:03:23.731 --> 00:03:25.186
DynamoDB putt not being a function.

78
00:03:25.186 --> 00:03:28.211
Well, this is obviously because we changed it earlier in the module.

79
00:03:28.211 --> 00:03:31.291
In this case, we see that our function started correctly,

80
00:03:31.291 --> 00:03:33.974
but that there was an error within our create function.

81
00:03:33.974 --> 00:03:37.794
Now this function is located at pets/create.

82
00:03:37.794 --> 00:03:38.340
js.

83
00:03:38.340 --> 00:03:42.419
In that file, we also see that the error occurs on line 33 at position 12,

84
00:03:42.419 --> 00:03:45.640
which would indicate exactly where we need to go to fix this issue,

85
00:03:45.640 --> 00:03:47.965
or at least investigate it further.

86
00:03:47.965 --> 00:03:50.719
Now let's go ahead and load that file back up and

87
00:03:50.719 --> 00:03:52.752
delete the extra t and save it.

88
00:03:52.752 --> 00:03:54.126
After we've done that,

89
00:03:54.126 --> 00:03:57.872
we can go ahead and run the serverless or sls deploy

90
00:03:57.872 --> 00:04:00.917
command with the --function flag, and pass in create,

91
00:04:00.917 --> 00:04:05.642
which is the function that we just mangled in order to test it.

92
00:04:05.642 --> 00:04:09.604
Now let's go back to Postman and go ahead and try the same request again.

93
00:04:09.604 --> 00:04:13.530
After we hit send, we should see this response here.

94
00:04:13.530 --> 00:04:18.304
This indicates that we successfully fixed and redeployed our function.

95
00:04:18.304 --> 00:04:20.885
Another important resource for you as you continue to debug

96
00:04:20.885 --> 00:04:22.564
and work with the serverless framework,

97
00:04:22.564 --> 00:04:25.182
is the GitHub page of the serverless framework itself.

98
00:04:25.182 --> 00:04:26.937
This can be found at this URL.

99
00:04:26.937 --> 00:04:27.689
On that page,

100
00:04:27.689 --> 00:04:30.943
you can take a look at GitHub issues and other

101
00:04:30.943 --> 00:04:33.131
information about the framework itself.

102
00:04:33.131 --> 00:04:36.263
You can also navigate to the serverless website at serverless.

103
00:04:36.263 --> 00:04:38.122
com to get the most up-to-date documentation.

104
00:04:38.122 --> 00:04:42.170
You can also look at the serverless framework's forums at forums.

105
00:04:42.170 --> 00:04:42.684
serverless.

106
00:04:42.684 --> 00:04:43.198
com.

107
00:04:43.198 --> 00:04:45.787
Additionally, you can take a look at the gitter.

108
00:04:45.787 --> 00:04:49.179
im for the serverless framework, which can be found at this URL.

109
00:04:49.179 --> 00:04:51.005
If you want more real-time responses,

110
00:04:51.005 --> 00:04:54.403
I'd definitely suggest the community in the gitter.

111
00:04:54.403 --> 00:04:55.252
im page.

112
00:04:55.252 --> 00:04:58.363
In this module, we learned several new serverless concepts.

113
00:04:58.363 --> 00:05:00.449
We learned about multiple-endpoint serverless APIs that

114
00:05:00.449 --> 00:05:02.767
can be used to perform multiple tasks.

115
00:05:02.767 --> 00:05:05.019
We also learned about serverless databases,

116
00:05:05.019 --> 00:05:08.300
and how we can include them within our serverless framework services.

117
00:05:08.300 --> 00:05:11.536
In addition to these concepts, we picked up some new skills.

118
00:05:11.536 --> 00:05:16.390
We implemented a CRUD API that used lambda, the API Gateway, and DynamoDB.

119
00:05:16.390 --> 00:05:20.696
We also deployed a full stack serverless application with data persistence.

120
00:05:20.696 --> 00:05:24.263
And we learned how to use several testing and debugging tools,

121
00:05:24.263 --> 00:05:27.397
including CloudWatch, curl, Postman, and GitHub.

122
00:05:27.397 --> 00:05:29.066
Coming up in the next module,

123
00:05:29.066 --> 00:05:39.000
we'll take a look at multi-platform serverless and what that means, as well as where we can go next after we learned all these concepts.

