WEBVTT
1
00:00:02.679 --> 00:00:03.795
In this demo,

2
00:00:03.795 --> 00:00:07.889
we'll be creating a serverless API to handle incoming HTTP requests.

3
00:00:07.889 --> 00:00:11.679
That API will allow us to create, read, update,

4
00:00:11.679 --> 00:00:15.139
and delete items inside of a DynamoDB table that we'll be

5
00:00:15.139 --> 00:00:16.787
using to store information on pets.

6
00:00:16.787 --> 00:00:19.126
Let's take a look at each of the steps we'll need to

7
00:00:19.126 --> 00:00:22.997
get through this and make it happen.

8
00:00:22.997 --> 00:00:26.968
To start this demo, we'll be creating a serverless pet database.

9
00:00:26.968 --> 00:00:29.181
To do this, we'll need to start a new serverless project.

10
00:00:29.181 --> 00:00:32.677
We'll do this by copying an example project from our demo files.

11
00:00:32.677 --> 00:00:34.680
Then, we'll review the serverless.

12
00:00:34.680 --> 00:00:38.061
yml configuration file and all the code for the service.

13
00:00:38.061 --> 00:00:41.301
After that, we'll install the requirements for the project using npm,

14
00:00:41.301 --> 00:00:43.978
and then deploy the project to AWS.

15
00:00:43.978 --> 00:00:46.113
Then we'll confirm that our API endpoints are functional,

16
00:00:46.113 --> 00:00:50.500
and we'll review the effects in the AWS console.

17
00:00:50.500 --> 00:00:52.900
First, go ahead and download the demos.

18
00:00:52.900 --> 00:00:54.614
zip file for this module,

19
00:00:54.614 --> 00:00:56.321
then unzip the code and change directories into the

20
00:00:56.321 --> 00:00:57.621
serverless node REST API folder.

21
00:00:57.621 --> 00:01:00.845
I'm currently showing you the contents of the folder with tree,

22
00:01:00.845 --> 00:01:03.375
but again, you don't need to use this for this module.

23
00:01:03.375 --> 00:01:05.854
The first thing you'll want to do is open up our

24
00:01:05.854 --> 00:01:09.044
configuration file for the demo, the serverless.

25
00:01:09.044 --> 00:01:10.140
yml file.

26
00:01:10.140 --> 00:01:13.554
This configuration file takes advantage of some parameterization

27
00:01:13.554 --> 00:01:16.135
that the serverless framework allows us to do.

28
00:01:16.135 --> 00:01:17.659
The first thing you'll notice is that the DynamoDB table

29
00:01:17.659 --> 00:01:20.218
doesn't have a specific name like pets table.

30
00:01:20.218 --> 00:01:24.656
The reason for this is because it's naming it with the parameters that

31
00:01:24.656 --> 00:01:26.766
are already included in the framework configuration.

32
00:01:26.766 --> 00:01:28.036
It's pulling the self:service parameter,

33
00:01:28.036 --> 00:01:32.986
which means that it'll be populating the serverless node REST API value.

34
00:01:32.986 --> 00:01:34.473
It's also including the stage parameters,

35
00:01:34.473 --> 00:01:37.451
which will pull in the stage that this is going to be deployed in.

36
00:01:37.451 --> 00:01:40.134
You'll also notice that we have a more extensive set of

37
00:01:40.134 --> 00:01:41.052
permissions in the iamRoleStatement.

38
00:01:41.052 --> 00:01:44.092
This is because our service will need a variety of permissions

39
00:01:44.092 --> 00:01:47.401
to take every action on this DynamoDB table.

40
00:01:47.401 --> 00:01:51.348
The resource itself that these permissions are granted on also uses the

41
00:01:51.348 --> 00:01:55.608
same parameterization as we see above in Dynamo table.

42
00:01:55.608 --> 00:01:57.983
While you won't need to make any changes to any of these values,

43
00:01:57.983 --> 00:02:00.444
you can choose to rename your service if you prefer

44
00:02:00.444 --> 00:02:01.920
it to be named something else.

45
00:02:01.920 --> 00:02:04.515
Just keep that in mind when we're going forward in the examples.

46
00:02:04.515 --> 00:02:07.461
Now let's take a look at the functions for our service.

47
00:02:07.461 --> 00:02:10.192
The first function in our service is the create function.

48
00:02:10.192 --> 00:02:14.507
Its handler is located in the pets directory, in a create.

49
00:02:14.507 --> 00:02:16.927
js file, and it has the function name of create.

50
00:02:16.927 --> 00:02:19.652
Now we'll take a close look at this when we get back to our terminal.

51
00:02:19.652 --> 00:02:22.619
The events that will trigger any of these functions are HTTP events.

52
00:02:22.619 --> 00:02:23.551
In this case,

53
00:02:23.551 --> 00:02:26.345
that means the API Gateway will process and forward

54
00:02:26.345 --> 00:02:27.429
these along to our functions.

55
00:02:27.429 --> 00:02:28.296
For the create function,

56
00:02:28.296 --> 00:02:32.179
you can see that the method is post directly to the pets endpoint.

57
00:02:32.179 --> 00:02:34.810
This is because the post method is the expected method when

58
00:02:34.810 --> 00:02:36.793
you're changing data within the database.

59
00:02:36.793 --> 00:02:40.364
We see a very similar case below with the list function.

60
00:02:40.364 --> 00:02:44.096
In this case, the location of the function changes slightly to the list.

61
00:02:44.096 --> 00:02:46.748
js file, and the method also changes to get.

62
00:02:46.748 --> 00:02:48.702
That's because we'll be getting back information without

63
00:02:48.702 --> 00:02:50.930
making a change to the underlying service.

64
00:02:50.930 --> 00:02:54.858
If we scroll down slightly, we can see the get function as well.

65
00:02:54.858 --> 00:02:59.488
This is almost identical to the list function, as it also uses the get method.

66
00:02:59.488 --> 00:03:01.494
However, it takes a specific ID, and in this case,

67
00:03:01.494 --> 00:03:05.084
will allow us to pass an id value into the API Gateway,

68
00:03:05.084 --> 00:03:08.906
which will be processed and look up specific within the database,

69
00:03:08.906 --> 00:03:12.683
rather than returning a list of all the values within the database,

70
00:03:12.683 --> 00:03:14.097
which our list function did.

71
00:03:14.097 --> 00:03:16.424
Finally, we have the update and delete functions.

72
00:03:16.424 --> 00:03:17.977
These do about what you'd expect.

73
00:03:17.977 --> 00:03:20.583
They're both contained within the pets folder in

74
00:03:20.583 --> 00:03:22.767
their respective update and delete.

75
00:03:22.767 --> 00:03:27.138
js files, and the function names within those files are update and delete.

76
00:03:27.138 --> 00:03:30.272
Additionally, they each have their own respective method.

77
00:03:30.272 --> 00:03:32.339
In the case of the update function, it uses put,

78
00:03:32.339 --> 00:03:35.199
which is the expected method when changing information in the database,

79
00:03:35.199 --> 00:03:37.231
but not adding a new entry itself.

80
00:03:37.231 --> 00:03:40.005
The delete function uses the delete method,

81
00:03:40.005 --> 00:03:42.382
which is expected for deleting information.

82
00:03:42.382 --> 00:03:42.930
And lastly,

83
00:03:42.930 --> 00:03:45.945
you can also notice that both of these take a specific

84
00:03:45.945 --> 00:03:47.387
id similar to the way that get did.

85
00:03:47.387 --> 00:03:49.378
That's because each of them will be updating a

86
00:03:49.378 --> 00:03:51.433
specific value within the database,

87
00:03:51.433 --> 00:03:55.605
rather than deleting or updating the entire database as a whole.

88
00:03:55.605 --> 00:03:58.624
If you scroll down a little bit, you should see the resources section.

89
00:03:58.624 --> 00:03:59.520
In the resources section,

90
00:03:59.520 --> 00:04:02.427
we see something similar to the examples we were looking at earlier.

91
00:04:02.427 --> 00:04:04.774
We create a serverless framework resource called PetsTable,

92
00:04:04.774 --> 00:04:08.370
which is an AWS DynamoDB table with a deletion policy that

93
00:04:08.370 --> 00:04:11.559
allows it to keep its data even when the serverless framework

94
00:04:11.559 --> 00:04:13.464
is redeploying and making changes.

95
00:04:13.464 --> 00:04:15.660
It uses the same attribute model that we looked at in earlier examples,

96
00:04:15.660 --> 00:04:18.289
and also has the same provision throughput.

97
00:04:18.289 --> 00:04:20.114
The only difference here from the earlier part of the

98
00:04:20.114 --> 00:04:22.946
module is that the table name will be reflective of the

99
00:04:22.946 --> 00:04:24.722
provider and the DynamoDB table name,

100
00:04:24.722 --> 00:04:34.000
which we defined slightly earlier in this configuration file. So now let's take a look at the function code within each of our function files.

