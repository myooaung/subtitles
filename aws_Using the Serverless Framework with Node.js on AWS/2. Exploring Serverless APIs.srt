1
00:00:02,549 --> 00:00:04,729
In order for the website front-end to do anything meaningful,

2
00:00:04,729 --> 00:00:08,031
we'll also need to create an API that the front-end can

3
00:00:08,031 --> 00:00:09,616
interact with to send and receive data.

4
00:00:09,616 --> 00:00:11,609
Let's take a quick look at how the serverless

5
00:00:11,609 --> 00:00:14,114
framework allows us to accomplish this.

6
00:00:14,114 --> 00:00:18,295
The serverless framework helps us create serverless APIs by managing all the

7
00:00:18,295 --> 00:00:20,205
components that we might need in order to create them.

8
00:00:20,205 --> 00:00:22,191
The first thing that a serverless API would need to

9
00:00:22,191 --> 00:00:23,991
deal with is an incoming HTTP request.

10
00:00:23,991 --> 00:00:27,184
In order to handle that within the AWS ecosystem,

11
00:00:27,184 --> 00:00:31,291
the serverless framework uses the AWS API Gateway.

12
00:00:31,291 --> 00:00:35,956
API Gateway handles all these incoming HTTP requests to its web endpoints,

13
00:00:35,956 --> 00:00:38,287
and then passes them along to lambda functions.

14
00:00:38,287 --> 00:00:41,743
Those functions can use managed resources ranging from backing

15
00:00:41,743 --> 00:00:43,606
databases to identity management services,

16
00:00:43,606 --> 00:00:47,321
or other logic to process those requests as needed by

17
00:00:47,321 --> 00:00:49,544
the application and return a response.

18
00:00:49,544 --> 00:00:51,499
Because API Gateway is a core part of the

19
00:00:51,499 --> 00:00:53,325
serverless APIs that we're using on AWS,

20
00:00:53,325 --> 00:00:57,472
let's take a quick look at what it is and how it works.

21
00:00:57,472 --> 00:01:01,870
AWS describes the API Gateway as a service that enables developers to create,

22
00:01:01,870 --> 00:01:06,121
publish, maintain, monitor, and secure APIs at any scale.

23
00:01:06,121 --> 00:01:09,419
So why use the API Gateway when building your serverless applications?

24
00:01:09,419 --> 00:01:10,144
Well, first,

25
00:01:10,144 --> 00:01:14,130
the service makes it super easy to create REST APIs for

26
00:01:14,130 --> 00:01:15,884
both web and mobile applications.

27
00:01:15,884 --> 00:01:18,186
These APIs are fully managed by AWS,

28
00:01:18,186 --> 00:01:20,361
making them easy to scale and removing a large amount of

29
00:01:20,361 --> 00:01:22,264
the overhead required to secure them.

30
00:01:22,264 --> 00:01:25,210
That's not to say security isn't something that you

31
00:01:25,210 --> 00:01:27,307
have to consider when creating an API,

32
00:01:27,307 --> 00:01:30,404
just that AWS takes care of some of those layers for you.

33
00:01:30,404 --> 00:01:33,179
API Gateway also easily integrates with AWS lambda,

34
00:01:33,179 --> 00:01:36,546
and the serverless framework seamlessly handles this integration for

35
00:01:36,546 --> 00:01:40,047
you without having to dive into too many of the detailed

36
00:01:40,047 --> 00:01:42,795
configuration steps that would otherwise be required while working

37
00:01:42,795 --> 00:01:44,689
directly with the AWS services themselves.

38
00:01:44,689 --> 00:01:47,774
Another nice thing about the API Gateway is that the

39
00:01:47,774 --> 00:01:49,579
pricing is completely dependent on the usage.

40
00:01:49,579 --> 00:01:51,940
One million API requests are included with your first

41
00:01:51,940 --> 00:01:55,982
year of using AWS under the free tier, and as of August 2017,

42
00:01:55,982 --> 00:01:57,677
you're only charged between $3.

43
00:01:57,677 --> 00:01:58,695
50 and $4.

44
00:01:58,695 --> 00:02:00,432
25 USD per million requests.

45
00:02:00,432 --> 00:02:01,490
Keep in mind,

46
00:02:01,490 --> 00:02:04,899
there is also a charge associated with the amount of data

47
00:02:04,899 --> 00:02:06,708
that you transfer with the API Gateway,

48
00:02:06,708 --> 00:02:10,577
which at low levels of use is usually between 9 and 14 cents per gigabyte.

49
00:02:10,577 --> 00:02:12,545
Finally, if you'd like to cache information,

50
00:02:12,545 --> 00:02:14,414
you can also pay roughly between $0.

51
00:02:14,414 --> 00:02:15,160
02 and $0.

52
00:02:15,160 --> 00:02:19,401
04 per gigabyte per hour across a selection of cache sizes.

53
00:02:19,401 --> 00:02:21,667
Now let's take a closer look at what configuration

54
00:02:21,667 --> 00:02:23,631
we'll need to use in our serverless.

55
00:02:23,631 --> 00:02:27,745
yml file in order to get our serverless APIs functional In our serverless.

56
00:02:27,745 --> 00:02:30,525
yml file, you'll need to specify functions as usual.

57
00:02:30,525 --> 00:02:32,677
In this case, we have a serverless function create,

58
00:02:32,677 --> 00:02:35,913
which has a lambda handler and a folder called pets.

59
00:02:35,913 --> 00:02:37,813
The filename would be create.

60
00:02:37,813 --> 00:02:40,379
js, and the function inside that would be called create.

61
00:02:40,379 --> 00:02:43,710
If this seems a little abstract right now, don't worry too much.

62
00:02:43,710 --> 00:02:45,939
We'll be taking a closer look at configuration just like

63
00:02:45,939 --> 00:02:47,838
this during our demo for this module.

64
00:02:47,838 --> 00:02:53,064
Now the way we set up our API is by specifying HTTP in the event section.

65
00:02:53,064 --> 00:02:56,754
All we need to define there will be a path,

66
00:02:56,754 --> 00:02:59,833
an HTTP method, and the cross origin resource sharing,

67
00:02:59,833 --> 00:03:00,508
or cors, setting.

68
00:03:00,508 --> 00:03:01,857
In this case, we'll enable this,

69
00:03:01,857 --> 00:03:05,502
because we want to be able to use the API from other domains

70
00:03:05,502 --> 00:03:08,014
other than the one that AWS creates it within.

71
00:03:08,014 --> 00:03:10,191
This configuration would allow us to deploy an API

72
00:03:10,191 --> 00:03:13,762
endpoint that accepts posted JSON and passes it along to

73
00:03:13,762 --> 00:03:15,451
a lambda function for processing.

74
00:03:15,451 --> 00:03:18,950
So what if we wanted to retrieve specific information from our API?

75
00:03:18,950 --> 00:03:22,247
In that case, we might need to pass an ID value through the API,

76
00:03:22,247 --> 00:03:24,869
so it can pass the ID to a lambda function,

77
00:03:24,869 --> 00:03:27,338
and then run a lookup on the other end.

78
00:03:27,338 --> 00:03:29,533
In these cases, a few things would change.

79
00:03:29,533 --> 00:03:32,517
First, we'd need a new serverless function in the pets directory,

80
00:03:32,517 --> 00:03:35,153
in this case, in a file get.

81
00:03:35,153 --> 00:03:37,412
js, we'd use the function get.

82
00:03:37,412 --> 00:03:40,784
We also modified the endpoint path from the previous example,

83
00:03:40,784 --> 00:03:43,449
and add a required id parameter in curly brackets.

84
00:03:43,449 --> 00:03:45,344
The API Gateway will pass this value along,

85
00:03:45,344 --> 00:03:50,102
and we'll use the id value to look up the pet within the backing dataset.

86
00:03:50,102 --> 00:03:53,710
We'll also need to make sure the HTTP method would change to get,

87
00:03:53,710 --> 00:03:56,719
which is the expected method for retrieving data in a way that

88
00:03:56,719 --> 00:03:59,178
would cause no change to the underlying service.

89
00:03:59,178 --> 00:04:03,096
When your API requires additional access to external services,

90
00:04:03,096 --> 00:04:05,579
you may also need to manage environment variables.

91
00:04:05,579 --> 00:04:09,082
Within AWS, environment variables can be set once in the serverless.

92
00:04:09,082 --> 00:04:13,144
yml file, and then referenced within the function code of a service.

93
00:04:13,144 --> 00:04:16,283
Here's an example of how you'd make an access key value

94
00:04:16,283 --> 00:04:17,707
accessible as an environment variable.

95
00:04:17,707 --> 00:04:25,000
We'll also see how to load these values into our function code within the demo later in the module.

