WEBVTT
1
00:00:00.000 --> 00:00:02.369
Developing applications with the serverless framework

2
00:00:02.369 --> 00:00:04.247
from scratch has a few specific steps.

3
00:00:04.247 --> 00:00:08.950
Let's take a look at each of them now before we apply them to our first project.

4
00:00:08.950 --> 00:00:09.181
First,

5
00:00:09.181 --> 00:00:11.955
we'll highlight how to start up your service and install your dependencies.

6
00:00:11.955 --> 00:00:14.739
Then we'll look at some configuration settings.

7
00:00:14.739 --> 00:00:16.943
And while the next step would be writing our own function code,

8
00:00:16.943 --> 00:00:20.332
we'll postpone that for the demo that we're creating at the end of the module.

9
00:00:20.332 --> 00:00:23.416
We'll also highlight how the serverless deployment process works,

10
00:00:23.416 --> 00:00:25.244
and some options you have for deploying your applications,

11
00:00:25.244 --> 00:00:27.638
as well as some things to think about so you can test

12
00:00:27.638 --> 00:00:31.134
your applications effectively later on.

13
00:00:31.134 --> 00:00:33.360
The first thing you would usually do to create a new service

14
00:00:33.360 --> 00:00:35.578
is to create a new service from a template.

15
00:00:35.578 --> 00:00:38.525
You could use this command to create a simple node.

16
00:00:38.525 --> 00:00:40.911
js service in a directory called servicename.

17
00:00:40.911 --> 00:00:42.656
After you create the node service,

18
00:00:42.656 --> 00:00:45.868
you would run an npm init and then npm install any node

19
00:00:45.868 --> 00:00:47.198
dependencies that you wanted to use.

20
00:00:47.198 --> 00:00:49.224
Next, you'd open up your serverless.

21
00:00:49.224 --> 00:00:52.232
yml file and specify the details of the service,

22
00:00:52.232 --> 00:00:55.177
which at a minimum would include the service name,

23
00:00:55.177 --> 00:00:57.987
the provider and runtime, and the functions that you're using in your service,

24
00:00:57.987 --> 00:00:59.813
along with the events that trigger them.

25
00:00:59.813 --> 00:01:02.174
In this example, the filename would be handler.

26
00:01:02.174 --> 00:01:05.903
js, and the function name in that file would be woofGardenEmailer.

27
00:01:05.903 --> 00:01:10.303
As you can see, we also set a scheduled event that runs every three days.

28
00:01:10.303 --> 00:01:12.728
We'll come back to this configuration in a moment

29
00:01:12.728 --> 00:01:14.075
when we're writing our application.

30
00:01:14.075 --> 00:01:16.042
Again, since we'll be writing our own code in a moment,

31
00:01:16.042 --> 00:01:17.407
we'll get back to that part later.

32
00:01:17.407 --> 00:01:18.029
But for now,

33
00:01:18.029 --> 00:01:20.235
let's look at what happens when we're all done writing

34
00:01:20.235 --> 00:01:22.160
our service and we'd like to deploy it.

35
00:01:22.160 --> 00:01:24.801
When we're ready, we can run the serverless deploy command.

36
00:01:24.801 --> 00:01:28.266
This command will deploy or update our entire application.

37
00:01:28.266 --> 00:01:29.674
We'll always need to run the specific command the

38
00:01:29.674 --> 00:01:31.065
first time we deploy our service.

39
00:01:31.065 --> 00:01:32.603
Remember, if you're feeling lazy,

40
00:01:32.603 --> 00:01:37.179
you can always replace serverless with sls and any serverless command.

41
00:01:37.179 --> 00:01:39.889
After we deploy our service for the first time,

42
00:01:39.889 --> 00:01:43.711
we can also run sls deploy function, and pass in a function name as an argument.

43
00:01:43.711 --> 00:01:48.174
This deploys only the function and skips the rest of the deployment process.

44
00:01:48.174 --> 00:01:50.446
This speeds up large deployments considerably.

45
00:01:50.446 --> 00:01:51.672
Function names are case sensitive,

46
00:01:51.672 --> 00:01:54.520
so be sure to match the function name in the serverless.

47
00:01:54.520 --> 00:01:55.368
yml file exactly.

48
00:01:55.368 --> 00:01:58.433
Also, keep in mind that the function name in serverless.

49
00:01:58.433 --> 00:02:02.919
yml is not necessarily the same as the name of the function inside your handler.

50
00:02:02.919 --> 00:02:03.419
js file.

51
00:02:03.419 --> 00:02:04.998
This might be a little confusing at the moment,

52
00:02:04.998 --> 00:02:08.704
but I promise I'll go into more detail when we work on our demo.

53
00:02:08.704 --> 00:02:09.032
Finally,

54
00:02:09.032 --> 00:02:12.635
you can also use the sls deploy package command to specify

55
00:02:12.635 --> 00:02:14.173
our particular package to deploy to AWS.

56
00:02:14.173 --> 00:02:16.991
But we won't be using this option in the course,

57
00:02:16.991 --> 00:02:20.059
as it's primarily reserved for integration with continuous

58
00:02:20.059 --> 00:02:22.277
integration and continuous deployment pipelines.

59
00:02:22.277 --> 00:02:24.403
You may also want to remove your service in the future.

60
00:02:24.403 --> 00:02:28.219
You can do this with the sls or serverless remove command.

61
00:02:28.219 --> 00:02:30.883
But what actually happens in the background when we run these commands?

62
00:02:30.883 --> 00:02:32.494
Let's take a look.

63
00:02:32.494 --> 00:02:35.429
The first thing that happens when we run a command like serverless

64
00:02:35.429 --> 00:02:38.203
deploy is that the framework reviews our serverless.

65
00:02:38.203 --> 00:02:41.667
yml file, and then creates a CloudFormation template from that file.

66
00:02:41.667 --> 00:02:44.295
It also zips up the function code and dependencies and

67
00:02:44.295 --> 00:02:47.133
sends that over to AWS S3 for later use.

68
00:02:47.133 --> 00:02:50.561
The CloudFormation template is then passed to AWS to create

69
00:02:50.561 --> 00:02:53.317
any resources for the service that we need.

70
00:02:53.317 --> 00:02:55.675
This includes things like APIs, databases,

71
00:02:55.675 --> 00:02:58.414
or other resources required for the service.

72
00:02:58.414 --> 00:03:01.710
CloudFormation also then creates the functions themselves from the

73
00:03:01.710 --> 00:03:04.278
zipped deployment packages that were stored in S3.

74
00:03:04.278 --> 00:03:05.616
And when everything is finished,

75
00:03:05.616 --> 00:03:08.235
the serverless framework displays the successful status of the deployment.

76
00:03:08.235 --> 00:03:11.263
Now let's briefly go over how we can set our function code

77
00:03:11.263 --> 00:03:13.238
up to be more testable in the future.

78
00:03:13.238 --> 00:03:13.678
In general,

79
00:03:13.678 --> 00:03:15.875
we'll want to look farther ahead than this course when

80
00:03:15.875 --> 00:03:18.811
building the serverless framework applications.

81
00:03:18.811 --> 00:03:21.653
To do this, we'll want to think about writing testable function code.

82
00:03:21.653 --> 00:03:23.801
Notice I didn't say testable lambda functions.

83
00:03:23.801 --> 00:03:26.554
This is because our function code could be usable on

84
00:03:26.554 --> 00:03:28.085
other infrastructure providers entirely.

85
00:03:28.085 --> 00:03:29.340
On this subject,

86
00:03:29.340 --> 00:03:32.100
try to separate business logic out from the

87
00:03:32.100 --> 00:03:33.904
infrastructure specific code that you're writing.

88
00:03:33.904 --> 00:03:34.427
For example,

89
00:03:34.427 --> 00:03:37.044
if in the future you like to replace a particular

90
00:03:37.044 --> 00:03:39.107
component that sends emails for another one completely on

91
00:03:39.107 --> 00:03:40.286
a different infrastructure provider,

92
00:03:40.286 --> 00:03:44.015
it will be much easier if the business logic is already

93
00:03:44.015 --> 00:03:45.221
separated from the mailer itself.

94
00:03:45.221 --> 00:03:49.133
This will also make it easier to run unit tests for the business logic and

95
00:03:49.133 --> 00:03:57.000
then develop integration tests with the services used. With all of this information in mind, let's make our first service.

