WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.110
in this chapter,

00:00:01.110 --> 00:00:03.800
we're going to talk about dependency injection.

00:00:03.800 --> 00:00:05.270
Before that,

00:00:05.270 --> 00:00:08.560
let us try to understand the term tight coupling.

00:00:08.560 --> 00:00:12.800
Let us take a look at some of the real world examples off tight coupling,

00:00:12.800 --> 00:00:15.050
thereby you'll understand better.

00:00:15.050 --> 00:00:16.740
So here,

00:00:16.740 --> 00:00:17.690
from this image,

00:00:17.690 --> 00:00:22.950
we can say that the pillars and the building are both tightly coupled to each other.

00:00:22.950 --> 00:00:27.250
That's because let's say that I found out that the pillars are getting old,

00:00:27.250 --> 00:00:31.570
and now I have decided to replace all the pillars.

00:00:31.570 --> 00:00:35.650
I can't replace the pillars alone without disturbing the building.

00:00:35.650 --> 00:00:39.350
That's because the boat are tightly coupled to each other.

00:00:39.350 --> 00:00:46.160
But the point here is if I'm making changes to pillars that will have impact on some other

00:00:46.160 --> 00:00:46.950
entity.

00:00:46.950 --> 00:00:50.060
A human hair is another example.

00:00:50.060 --> 00:00:51.570
Off tight coupling.

00:00:51.570 --> 00:00:55.300
He can't pluck the hair from your head without hurting yourself,

00:00:55.300 --> 00:01:00.550
so plucking the hair from your head will have an impact on your body.

00:01:00.550 --> 00:01:04.270
Here we have the one last example off tight coupling.

00:01:04.270 --> 00:01:08.430
The cables off this bridge are tightly coupled to the bridge.

00:01:08.430 --> 00:01:12.900
If you cut down all the cables that because the bridge to collapse.

00:01:12.900 --> 00:01:19.550
So what are some good real world examples off the opposite loose coupling spectacles.

00:01:19.550 --> 00:01:23.780
You can keep switching the spectacles depending on the color off your choice,

00:01:23.780 --> 00:01:27.080
and that will not have any impact on your body.

00:01:27.080 --> 00:01:32.260
So both your body and spectacles are loosely coupled to each other.

00:01:32.260 --> 00:01:37.350
Removing one from the other will not have any impact on either of the object.

00:01:37.350 --> 00:01:38.480
Similarly,

00:01:38.480 --> 00:01:42.100
a mobile case for be a good example Off loose coupling.

00:01:42.100 --> 00:01:46.370
A mobile case would be loosely coupled with a mobile phone.

00:01:46.370 --> 00:01:49.280
You can keep changing the skin as you wish.

00:01:49.280 --> 00:01:52.360
It will not have an impact on the phone.

00:01:52.360 --> 00:01:55.290
The phone would still function as usual.

00:01:55.290 --> 00:01:55.630
Now,

00:01:55.630 --> 00:02:00.920
these are all some of the examples off tight coupling and loose coupling in real world.

00:02:00.920 --> 00:02:02.650
But how about programming?

00:02:02.650 --> 00:02:06.870
So let us see what is tight coupling in programming.

00:02:06.870 --> 00:02:08.160
Before that,

00:02:08.160 --> 00:02:15.140
let us try to understand the term software component just as we have a car that is made out

00:02:15.140 --> 00:02:16.600
off multiple components.

00:02:16.600 --> 00:02:18.290
For example,

00:02:18.290 --> 00:02:21.350
a car would have a competent called engine,

00:02:21.350 --> 00:02:24.260
another component called steering wheel,

00:02:24.260 --> 00:02:28.620
and another competent called gearbox etcetera,

00:02:28.620 --> 00:02:33.250
when all these components combined together will have the final product.

00:02:33.250 --> 00:02:34.620
Similarly,

00:02:34.620 --> 00:02:38.750
a softer product is also combination off multiple components.

00:02:38.750 --> 00:02:42.250
Now these competence can be as simple as a simple class,

00:02:42.250 --> 00:02:47.990
or is combination off set off related files that together will solve a certain problem?

00:02:47.990 --> 00:02:48.430
I mean,

00:02:48.430 --> 00:02:50.210
just as with the case off a car,

00:02:50.210 --> 00:02:52.100
we have a bigger component,

00:02:52.100 --> 00:02:53.910
which is the engine,

00:02:53.910 --> 00:02:56.850
which in itself has multiple other components,

00:02:56.850 --> 00:03:00.100
and we also have some minor components,

00:03:00.100 --> 00:03:01.230
like a steering wheel,

00:03:01.230 --> 00:03:02.210
for example,

00:03:02.210 --> 00:03:07.610
and often times these components are dependent on each other in order to function in a

00:03:07.610 --> 00:03:08.510
certain way.

00:03:08.510 --> 00:03:09.660
For example,

00:03:09.660 --> 00:03:11.780
in order for the wheel to rotate fast,

00:03:11.780 --> 00:03:17.650
you have to press the accelerator so the competent wheel is kind of dependent on the

00:03:17.650 --> 00:03:20.410
competent accelerator and similarly,

00:03:20.410 --> 00:03:21.690
in softer as well.

00:03:21.690 --> 00:03:25.900
We do how multiple components and are dependent on each other.

00:03:25.900 --> 00:03:30.390
What we're going to take a look at now is a very simple example of the same.

00:03:30.390 --> 00:03:38.430
So here we have a very simple example off a competent being heavily dependent on another

00:03:38.430 --> 00:03:39.250
component.

00:03:39.250 --> 00:03:41.800
We have this double bean inside,

00:03:41.800 --> 00:03:43.140
which we're trying to extend.

00:03:43.140 --> 00:03:44.380
She ate the dog class,

00:03:44.380 --> 00:03:47.250
and the dark class has just one method in it,

00:03:47.250 --> 00:03:51.050
which will ask the dog to make noise.

00:03:51.050 --> 00:03:57.250
And that's the matter that we're trying to call from here Now it's safe to say that Java

00:03:57.250 --> 00:04:01.110
Bean is dependent on the dark class.

00:04:01.110 --> 00:04:04.550
Only then can it call its method.

00:04:04.550 --> 00:04:06.820
But we have a very,

00:04:06.820 --> 00:04:08.310
very serious problem.

00:04:08.310 --> 00:04:12.590
Let's that I've decided to make noise like a cat.

00:04:12.590 --> 00:04:14.050
Now what should I do?

00:04:14.050 --> 00:04:19.080
I should go back to my being and try to make changes in the code.

00:04:19.080 --> 00:04:27.570
I'm going to make this a cat and make those changes everywhere and do take a note that this

00:04:27.570 --> 00:04:29.050
matter is no longer valid.

00:04:29.050 --> 00:04:33.270
I need to use the method that is specific to cat,

00:04:33.270 --> 00:04:36.310
which is shout now.

00:04:36.310 --> 00:04:38.150
This is a very simple example.

00:04:38.150 --> 00:04:41.530
Imagine that you're working on a really world project.

00:04:41.530 --> 00:04:45.770
You'd have to make this changes in thousands off locations,

00:04:45.770 --> 00:04:46.380
which is,

00:04:46.380 --> 00:04:47.090
ofcourse,

00:04:47.090 --> 00:04:48.650
not feasible.

00:04:48.650 --> 00:04:56.900
That's why we need to try our best to make this competent as independent as possible or,

00:04:56.900 --> 00:04:57.750
in other words,

00:04:57.750 --> 00:05:01.470
way to make sure that they're loosely coupled to each other,

00:05:01.470 --> 00:05:03.830
not tightly coupled to each other.

00:05:03.830 --> 00:05:07.530
So let's continue from next video and see the solution

