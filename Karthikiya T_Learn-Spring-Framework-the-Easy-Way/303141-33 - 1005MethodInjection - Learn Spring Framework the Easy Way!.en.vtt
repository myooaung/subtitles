WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.390
in this video,

00:00:05.390 --> 00:00:07.900
we're going to talk about matter injection technique.

00:00:07.900 --> 00:00:09.150
But before that,

00:00:09.150 --> 00:00:11.750
let us try to understand the following scenario.

00:00:11.750 --> 00:00:14.250
Let's say that you have couple of beans.

00:00:14.250 --> 00:00:18.780
One is scope to Singleton and the other is the product I've bean.

00:00:18.780 --> 00:00:25.000
And let us assume that the singleton being is dependent on that I.

00:00:25.000 --> 00:00:25.610
Bean,

00:00:25.610 --> 00:00:30.970
which is just having a constructor just to keep things simple.

00:00:30.970 --> 00:00:34.410
And then inside this class,

00:00:34.410 --> 00:00:37.390
we also have on method get new silver.

00:00:37.390 --> 00:00:40.950
And every time we call this method from our code,

00:00:40.950 --> 00:00:44.710
I'm expecting a new instance off silver to be written.

00:00:44.710 --> 00:00:51.180
Now what we're trying to do here is we're trying to use the constructor injection to inject

00:00:51.180 --> 00:00:54.820
an instance off this bean into this,

00:00:54.820 --> 00:00:57.950
and that's what we're trying to do in our conflict file.

00:00:57.950 --> 00:01:04.600
But as we observed from our learnings offspring being life cycle,

00:01:04.600 --> 00:01:10.430
all the dependencies would be resolved during the instant she ation phase and before the

00:01:10.430 --> 00:01:16.260
objects are made available for us to use in our application logic and for that reason,

00:01:16.260 --> 00:01:19.810
spring is actually going to create a new instance off.

00:01:19.810 --> 00:01:26.700
But I bean and is going to inject it into this server conflict credible and good,

00:01:26.700 --> 00:01:28.150
but that's about it.

00:01:28.150 --> 00:01:33.100
It's not going to inject every time you need it in our mean class code.

00:01:33.100 --> 00:01:42.160
I'm just simply trying to call this method off Singleton being and I'm trying to print the

00:01:42.160 --> 00:01:44.950
hash code and I'm doing it three times.

00:01:44.950 --> 00:01:50.910
What I'm expecting here is that the hash could would be different.

00:01:50.910 --> 00:01:54.350
That means I'm expecting a new instance every time I need it,

00:01:54.350 --> 00:01:59.650
because the object that I'm requesting is off type server,

00:01:59.650 --> 00:02:05.340
which is a product I've bean so ideal every time I request for it are supposed to get a

00:02:05.340 --> 00:02:06.510
brand new instance,

00:02:06.510 --> 00:02:08.130
but unfortunately,

00:02:08.130 --> 00:02:11.880
because off the way the spring being life cycle works,

00:02:11.880 --> 00:02:17.350
this is not possible and let me on the program and that would be more evident.

00:02:17.350 --> 00:02:20.950
And here it is so alternatively,

00:02:20.950 --> 00:02:29.510
Aiken just simply keeping simple get it off the constructor injection altogether and

00:02:29.510 --> 00:02:41.650
thereby we're just going to simply introduce a new key would and returned the silver object

00:02:41.650 --> 00:02:44.650
every time we call this method.

00:02:44.650 --> 00:02:47.350
Now this is going to work.

00:02:47.350 --> 00:02:50.570
But as you might have guessed,

00:02:50.570 --> 00:02:59.690
this is off course about practice because this class would now be tightly coupled to this

00:02:59.690 --> 00:03:00.350
class.

00:03:00.350 --> 00:03:01.690
We don't want that.

00:03:01.690 --> 00:03:03.280
So alternatively,

00:03:03.280 --> 00:03:17.510
we can also perform the dependency look up by implementing application context Ever

00:03:17.510 --> 00:03:18.600
interface.

00:03:18.600 --> 00:03:30.400
I think I got the name wrong application A shouldn't context and there and then you're

00:03:30.400 --> 00:03:37.380
going to use this object to perform a dependence and look up off this silver being every

00:03:37.380 --> 00:03:38.790
time we call this method.

00:03:38.790 --> 00:03:40.910
But obviously,

00:03:40.910 --> 00:03:44.090
as I had already mentioned in one off my previous videos,

00:03:44.090 --> 00:03:49.270
that may make our class tightly coupled with the spring framework,

00:03:49.270 --> 00:03:52.150
and we should try to award it as much as possible.

00:03:52.150 --> 00:03:54.130
So alternatively,

00:03:54.130 --> 00:03:56.530
Springville providers another functionality,

00:03:56.530 --> 00:04:02.530
and that is called matter injection are look up matter injection technique to be more

00:04:02.530 --> 00:04:03.470
specific,

00:04:03.470 --> 00:04:05.400
so let's see how it's done.

00:04:05.400 --> 00:04:12.350
So all you have to do is your going to make this method abstract,

00:04:12.350 --> 00:04:17.850
and when you make that method as abstract,

00:04:17.850 --> 00:04:20.350
you don't have any implementation.

00:04:20.350 --> 00:04:24.530
And when you have at least one mattered as abstract,

00:04:24.530 --> 00:04:27.870
he must make the class as abstract as well.

00:04:27.870 --> 00:04:34.250
I'm going to use this key word here as well and from,

00:04:34.250 --> 00:04:35.450
or conflict file.

00:04:35.450 --> 00:04:43.650
I'm going to introduce a new tag called Look Up Method,

00:04:43.650 --> 00:04:48.520
and I'm going to specify that method name but this name,

00:04:48.520 --> 00:05:01.240
attribute and also the being and I'm going to refer.

00:05:01.240 --> 00:05:03.230
So this being in here,

00:05:03.230 --> 00:05:04.810
well,

00:05:04.810 --> 00:05:07.250
this might look a little tricky,

00:05:07.250 --> 00:05:18.510
but what's actually going to happen is Wellspring is actually going to create an

00:05:18.510 --> 00:05:20.310
implementation for this method,

00:05:20.310 --> 00:05:24.880
and that implementation would just simply return an instance off.

00:05:24.880 --> 00:05:27.950
Whatever the bean that you specify in here,

00:05:27.950 --> 00:05:30.250
it's as simple as that.

00:05:30.250 --> 00:05:38.950
And that would happen when you call a method with this name that belonged So this bean.

00:05:38.950 --> 00:05:40.340
So guess what?

00:05:40.340 --> 00:05:42.250
That's all there is to it.

00:05:42.250 --> 00:05:44.780
And if you run the program,

00:05:44.780 --> 00:05:48.250
he would see the hash code is different.

00:05:48.250 --> 00:05:50.950
Which means every time we call this method,

00:05:50.950 --> 00:05:59.600
we're going to get a brand new instance off silver and same thing can be accomplished with

00:05:59.600 --> 00:06:01.270
the Java conflict as well.

00:06:01.270 --> 00:06:14.250
And here is the code that's from the program,

00:06:14.250 --> 00:06:17.590
and it works as well.

00:06:17.590 --> 00:06:22.300
But here is how he would deal with it in Java conflict.

00:06:22.300 --> 00:06:26.850
You just simply tried to return an instance off silver conflict,

00:06:26.850 --> 00:06:29.600
and since it has an abstract method,

00:06:29.600 --> 00:06:33.250
you have to overwrite the behavior off that method,

00:06:33.250 --> 00:06:38.320
and you're just simply return the silver object Justin Plaza.

00:06:38.320 --> 00:06:41.090
Now with Java conflict,

00:06:41.090 --> 00:06:44.780
things would look more obvious than with the XML conflict.

00:06:44.780 --> 00:06:45.630
Here.

00:06:45.630 --> 00:06:51.160
We're just simply calling this method which internally just simply returns the silver

00:06:51.160 --> 00:06:51.650
object.

00:06:51.650 --> 00:06:53.950
And every time you call this method,

00:06:53.950 --> 00:06:56.350
I'm in this method.

00:06:56.350 --> 00:07:00.610
The call would go to its implementation.

00:07:00.610 --> 00:07:06.050
An implementation would just simply call this mattered to return this object.

00:07:06.050 --> 00:07:12.550
And here is one more reason why you want to use Java Contra Gore Tex Immel conflict.

00:07:12.550 --> 00:07:15.540
All right.

00:07:15.540 --> 00:07:17.040
I guess that's about it.

00:07:17.040 --> 00:07:18.290
I'll see you assume.

