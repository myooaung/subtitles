WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.310
in this chapter,

00:00:05.310 --> 00:00:07.960
we're going to talk about property editors,

00:00:07.960 --> 00:00:12.010
and in this weekend we're going to talk about default property editors.

00:00:12.010 --> 00:00:14.120
So let me just walk it through this code,

00:00:14.120 --> 00:00:16.020
and then we'll take a look at an example off.

00:00:16.020 --> 00:00:16.590
Same.

00:00:16.590 --> 00:00:21.350
So what we have here is a simple being that is just holding list.

00:00:21.350 --> 00:00:23.440
Off fields are properties,

00:00:23.440 --> 00:00:25.450
each off different type.

00:00:25.450 --> 00:00:26.710
So we have,

00:00:26.710 --> 00:00:30.250
indeed your double character string.

00:00:30.250 --> 00:00:36.350
And here we have something new currency and you are all and from,

00:00:36.350 --> 00:00:37.450
or conflict file.

00:00:37.450 --> 00:00:41.550
I'm just trying to perform the constructor injection in this manner.

00:00:41.550 --> 00:00:44.010
And as I've already mentioned,

00:00:44.010 --> 00:00:47.350
it's always a good practice to specify the type.

00:00:47.350 --> 00:00:50.250
And so I have done it in here.

00:00:50.250 --> 00:00:51.850
And moreover,

00:00:51.850 --> 00:01:00.640
it's better that you get more specific and even specify the package because the euro class

00:01:00.640 --> 00:01:02.810
may belong to multiple packages.

00:01:02.810 --> 00:01:07.090
So it's better that you be specific and specify the package as well.

00:01:07.090 --> 00:01:07.910
And now,

00:01:07.910 --> 00:01:09.210
if you run the program,

00:01:09.210 --> 00:01:11.950
all these arguments would be injected into the bean.

00:01:11.950 --> 00:01:16.740
But have you ever thought If you're using an XML convict file,

00:01:16.740 --> 00:01:22.860
you cannot really create an object that we can inject directly into the being like we

00:01:22.860 --> 00:01:25.350
normally do in case of Java con flick.

00:01:25.350 --> 00:01:27.550
If you're using XML conflict,

00:01:27.550 --> 00:01:32.020
all you can do is to specify the string literal,

00:01:32.020 --> 00:01:33.850
regardless off type.

00:01:33.850 --> 00:01:41.890
So even if it is something like currency are you are you still have to specify the string

00:01:41.890 --> 00:01:42.680
literal.

00:01:42.680 --> 00:01:50.280
But how is spring managing to convert the string into the destination object?

00:01:50.280 --> 00:01:54.160
Well behind the scenes,

00:01:54.160 --> 00:02:01.700
there is a logic for each and every field that will actually take the string as an argument

00:02:01.700 --> 00:02:01.700
.

00:02:01.700 --> 00:02:07.470
And then the logic offered would convert that string into the destination object to be more

00:02:07.470 --> 00:02:09.490
specific for each and every type.

00:02:09.490 --> 00:02:10.260
In here,

00:02:10.260 --> 00:02:12.280
there is a class file associate ID,

00:02:12.280 --> 00:02:17.240
and Spring is actually going to use that logic to convert the string literal into the

00:02:17.240 --> 00:02:17.760
destination.

00:02:17.760 --> 00:02:20.370
Object by default.

00:02:20.370 --> 00:02:24.850
Spring comes with many such classes to support popular data types.

00:02:24.850 --> 00:02:30.250
But if you won't spring to convert a string literal from the XML document to your own

00:02:30.250 --> 00:02:35.940
custom object and there's a different approach for that you have to create your own code or

00:02:35.940 --> 00:02:37.160
deacon water code,

00:02:37.160 --> 00:02:40.620
which would convert the string value into your custom object.

00:02:40.620 --> 00:02:41.490
But anyway,

00:02:41.490 --> 00:02:42.750
we're going to talk about it.

00:02:42.750 --> 00:02:45.750
Incoming videos But in this video,

00:02:45.750 --> 00:02:49.900
I just want to give you a glimpse off how the commotion process will take place.

00:02:49.900 --> 00:02:50.400
So,

00:02:50.400 --> 00:02:51.470
for example,

00:02:51.470 --> 00:02:55.480
here we provided the currency and we provided the value.

00:02:55.480 --> 00:03:01.550
And behind the scenes Spring is actually going to make use off this class currency editor,

00:03:01.550 --> 00:03:04.790
which is the converter class for currency object.

00:03:04.790 --> 00:03:11.540
And typically all these converter classes would end with the name editor just as you see in

00:03:11.540 --> 00:03:12.210
here.

00:03:12.210 --> 00:03:16.590
And they all extent the property editor support class.

00:03:16.590 --> 00:03:18.310
And once you do so,

00:03:18.310 --> 00:03:19.430
you can all right,

00:03:19.430 --> 00:03:21.860
the falling methods set as text,

00:03:21.860 --> 00:03:25.270
which is a method that will take the string as an argument.

00:03:25.270 --> 00:03:30.640
And this is a string that super wide in your XML file and inside this method,

00:03:30.640 --> 00:03:35.730
but will provide some kind of a logic that would ultimately convert that text into the

00:03:35.730 --> 00:03:36.840
currency object.

00:03:36.840 --> 00:03:43.630
And then we'll pass that result as an argument to this set value mattered off the property

00:03:43.630 --> 00:03:47.320
and it or support and with the getters text mattered.

00:03:47.320 --> 00:03:49.000
We want to do the opposite.

00:03:49.000 --> 00:03:52.690
We want to come with the currency object back to string.

00:03:52.690 --> 00:03:53.950
However,

00:03:53.950 --> 00:03:54.860
in our case,

00:03:54.860 --> 00:03:59.940
this method may not be required and this method may be useful in the context off of

00:03:59.940 --> 00:04:05.190
applications where the trained request would have a string that needs to be converted into

00:04:05.190 --> 00:04:08.090
an object by calling the set US text method.

00:04:08.090 --> 00:04:08.660
And then,

00:04:08.660 --> 00:04:10.320
when you're sending back the response,

00:04:10.320 --> 00:04:11.900
spring will make use off,

00:04:11.900 --> 00:04:17.500
get as text to convert that object back to the string so that it can be presented on the

00:04:17.500 --> 00:04:19.740
client side in some meaningful manner.

00:04:19.740 --> 00:04:20.510
Likewise,

00:04:20.510 --> 00:04:24.080
we got many other editor classes or can motor classes,

00:04:24.080 --> 00:04:28.360
and each would correspond to a specific type.

00:04:28.360 --> 00:04:36.140
And here are the list off classes The editors that are that will come with spring Library

00:04:36.140 --> 00:04:39.530
by default and even for the objects like indigent,

00:04:39.530 --> 00:04:44.010
double byte character etcetera like we have in here.

00:04:44.010 --> 00:04:50.850
They all must be having an editor class corresponding to them to let spring use them.

00:04:50.850 --> 00:04:58.870
And this is a class that will serve that purpose Custom number editor and is basically a

00:04:58.870 --> 00:05:01.340
property editor for any number class,

00:05:01.340 --> 00:05:05.220
such a short in digital along big indigent float,

00:05:05.220 --> 00:05:07.140
double and big decimal etcetera.

00:05:07.140 --> 00:05:16.510
So So this is a quick glimpse off what our property editors and we will explore more

00:05:16.510 --> 00:05:17.700
incoming videos.

00:05:17.700 --> 00:05:19.600
But before we end this video,

00:05:19.600 --> 00:05:21.370
let us run the program,

00:05:21.370 --> 00:05:23.720
which is pretty simple.

00:05:23.720 --> 00:05:31.190
I'm just trying to create the context and then get the bean trying to print the object.

00:05:31.190 --> 00:05:39.700
And the toasting matter is having did logic to display that object in some readable manner

00:05:39.700 --> 00:05:42.700
And here we have the result.

00:05:39.700 --> 00:05:39.700
.

00:05:42.700 --> 00:05:45.300
All right,

00:05:45.300 --> 00:05:46.170
I'll see you soon.

