WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:09.360
in this video we're going to talk about are providing in case off constructor injection and

00:00:09.360 --> 00:00:10.410
for this purpose,

00:00:10.410 --> 00:00:12.580
I have no got it off those settlement.

00:00:12.580 --> 00:00:16.150
It's and have introduced the following constructors.

00:00:16.150 --> 00:00:22.580
One is a default constructor without any argument and the other is with a single argument.

00:00:22.580 --> 00:00:29.960
And finally we have one more constructor with a couple off arguments now from our contact

00:00:29.960 --> 00:00:30.420
file.

00:00:30.420 --> 00:00:37.720
All we have to do now is to add the following attributes and Sprinkle taker off.

00:00:37.720 --> 00:00:40.100
Injecting the dependence is no.

00:00:40.100 --> 00:00:41.050
The question is,

00:00:41.050 --> 00:00:45.080
since we have these two constructors in here,

00:00:45.080 --> 00:00:48.900
which one of these constructors will the spring use to inject?

00:00:48.900 --> 00:00:50.620
The dependence is well,

00:00:50.620 --> 00:00:56.610
it is just simply going to choose the constructor with maximum argument So this constructor

00:00:56.610 --> 00:00:59.460
will qualify for dependency injection.

00:00:59.460 --> 00:01:02.550
It's on the program and see the result,

00:01:02.550 --> 00:01:07.210
and it worked Likewise,

00:01:07.210 --> 00:01:13.350
We can also make use off the auto y it annotation without any problem.

00:01:13.350 --> 00:01:16.390
Let me quickly demonstrate the same.

00:01:16.390 --> 00:01:29.690
So this time we can have what a wide annotation set on this fields and by default or the

00:01:29.690 --> 00:01:33.890
wedding will happen by type that's on the program.

00:01:33.890 --> 00:01:37.280
And it worked.

00:01:37.280 --> 00:01:38.200
Hultin,

00:01:38.200 --> 00:01:38.880
Italy.

00:01:38.880 --> 00:01:47.050
You can also specify the same annotation on the constructor itself.

00:01:47.050 --> 00:01:49.510
So now on whichever constructor,

00:01:49.510 --> 00:01:54.630
you would specify the following annotation that constructor would be used for dependency

00:01:54.630 --> 00:01:55.400
injection.

00:01:55.400 --> 00:01:59.070
Let's try to run the program and see the result.

00:01:59.070 --> 00:02:06.810
And just as with center injection in case if you have a couple of beans pointing to the

00:02:06.810 --> 00:02:10.700
same class than the qualifier would come into picture,

00:02:10.700 --> 00:02:13.150
it's on the program.

00:02:13.150 --> 00:02:14.560
By default,

00:02:14.560 --> 00:02:17.110
the qualifer name would be Samos,

00:02:17.110 --> 00:02:18.350
the field name,

00:02:18.350 --> 00:02:23.550
and this would still work without any confusion.

00:02:23.550 --> 00:02:26.880
But if we change this name as well,

00:02:26.880 --> 00:02:35.250
then certainly this is going to cause confusion to spring and would throw an exception.

00:02:35.250 --> 00:02:40.390
So what we need to do is to introduce a qualifier annotation.

00:02:40.390 --> 00:02:50.800
And then you would specify the name of the bean testing plans that,

00:02:50.800 --> 00:02:56.830
but the thing is a con specify the qualifier in this manner because spring will have

00:02:56.830 --> 00:02:57.700
confusion.

00:02:57.700 --> 00:03:03.240
Whether this qualifier belong to this perimeter are to this perimeter.

00:03:03.240 --> 00:03:14.720
So we need to be more specific by specifying the qualifier right before the perimeter where

00:03:14.720 --> 00:03:17.950
we want incorporate the following qualifier.

00:03:17.950 --> 00:03:23.370
Now let's on the program and spring will not have any contrition.

00:03:23.370 --> 00:03:24.550
It worked well.

00:03:24.550 --> 00:03:28.480
Interestingly,

00:03:28.480 --> 00:03:31.030
Thin Spring Washing number four Door three.

00:03:31.030 --> 00:03:34.680
You don't even have to specify the annotation.

00:03:34.680 --> 00:03:37.490
If you have only one constructor,

00:03:37.490 --> 00:03:44.550
Spring is smart enough to understand that it needs to order wire the only constructor

00:03:44.550 --> 00:03:51.750
president in your bean that's on the program and see the result,

00:03:51.750 --> 00:03:55.080
and it worked.

00:03:55.080 --> 00:03:59.110
But again,

00:03:59.110 --> 00:04:04.520
it works only if you have one single constructor and it works only with constructor

00:04:04.520 --> 00:04:05.270
injection,

00:04:05.270 --> 00:04:07.050
not etcetera injection.

00:04:07.050 --> 00:04:12.130
Unfortunately,

00:04:12.130 --> 00:04:13.750
if you're using Java con trick,

00:04:13.750 --> 00:04:18.840
there is no easy way to perform constructor injection using or providing.

00:04:18.840 --> 00:04:23.980
And it's primarily due to the limitations off the way the Java conflict works.

00:04:23.980 --> 00:04:26.370
But not being said,

00:04:26.370 --> 00:04:30.410
don't conclude that this is down set off Java conflict.

00:04:30.410 --> 00:04:31.490
Incoming videos.

00:04:31.490 --> 00:04:34.460
We're going to talk about some of the pros and cons off,

00:04:34.460 --> 00:04:36.870
using or providing thereby.

00:04:36.870 --> 00:04:40.410
You have to decide whether unit to even use hotel wiring or not.

00:04:40.410 --> 00:04:45.700
But the real usage off for providing will come into picture in the context of developing

00:04:45.700 --> 00:04:47.780
Web applications using spring framework.

00:04:47.780 --> 00:04:49.900
So don't come to any conclusions.

00:04:49.900 --> 00:04:51.090
At this point,

00:04:51.090 --> 00:04:52.460
I will see you soon

