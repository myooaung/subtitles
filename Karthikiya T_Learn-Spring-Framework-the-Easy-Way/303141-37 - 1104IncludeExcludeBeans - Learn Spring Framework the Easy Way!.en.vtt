WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.690
by default.

00:00:05.690 --> 00:00:07.420
All the beans can be auto wired,

00:00:07.420 --> 00:00:12.470
but there might be scenarios where you might want exclude a particular being from Ottawa

00:00:12.470 --> 00:00:12.960
writing.

00:00:12.960 --> 00:00:18.580
That means you won't exclude a bean as a candidate for auto hiding,

00:00:18.580 --> 00:00:24.030
so that nowhere in your code you can use the annotation to let spring perform the outer

00:00:24.030 --> 00:00:25.180
wearing off that bean.

00:00:25.180 --> 00:00:27.720
In order to accomplish that hole,

00:00:27.720 --> 00:00:30.730
you have to do just include the following attribute.

00:00:30.730 --> 00:00:34.150
Auto A candidate and you would set it toe false.

00:00:34.150 --> 00:00:35.360
Now,

00:00:35.360 --> 00:00:36.750
inside our sample bean.

00:00:36.750 --> 00:00:43.400
We have a dependency on that being so spring now will not be able to inject it.

00:00:43.400 --> 00:00:46.070
Performed the auto wedding,

00:00:46.070 --> 00:00:50.610
Let's on the program and we should see an exception.

00:00:50.610 --> 00:01:01.050
Let's switch it over to the maximal conflict and run the program,

00:01:01.050 --> 00:01:02.930
and sure enough,

00:01:02.930 --> 00:01:04.350
we have an exception.

00:01:04.350 --> 00:01:08.310
But this is a problem.

00:01:08.310 --> 00:01:11.050
If somebody disables it being promote a wedding,

00:01:11.050 --> 00:01:13.670
why should our entire application should be crashing?

00:01:13.670 --> 00:01:24.650
So what am I going to do is that I'm going to set a flag saying that this is not required.

00:01:24.650 --> 00:01:26.480
If this being is injected,

00:01:26.480 --> 00:01:27.320
that's fine.

00:01:27.320 --> 00:01:28.270
If not,

00:01:28.270 --> 00:01:29.580
that's fine as well.

00:01:29.580 --> 00:01:31.650
And that's what I'm trying to tell in here,

00:01:31.650 --> 00:01:33.950
but by doing so,

00:01:33.950 --> 00:01:36.220
spring will not throw the exception.

00:01:36.220 --> 00:01:40.000
But we would certainly have a null point exception in here.

00:01:40.000 --> 00:01:43.270
So as a good programmer,

00:01:43.270 --> 00:01:47.950
we need to make sure our code is tuned to handle the scenario.

00:01:47.950 --> 00:01:52.350
But let's on the program and make sure that we get Denel Point exception.

00:01:52.350 --> 00:01:53.650
Sure enough,

00:01:53.650 --> 00:01:54.310
we did.

00:01:54.310 --> 00:02:15.920
So now we're going to wrap this code with a null check and now our code should work well.

00:02:15.920 --> 00:02:18.920
Alternatively,

00:02:18.920 --> 00:02:25.450
you can also specify the falling attribute in the root tank.

00:02:25.450 --> 00:02:27.480
And by doing so,

00:02:27.480 --> 00:02:30.060
you can actually specify water.

00:02:30.060 --> 00:02:37.200
All the beans that you'd like to qualify for auto wiring in this case are mentioned that I

00:02:37.200 --> 00:02:41.970
want to be able to order wire all the beans that start with this word,

00:02:41.970 --> 00:02:45.320
followed by any sequence of characters.

00:02:45.320 --> 00:02:48.480
So this is a wild card that I'm trying to use,

00:02:48.480 --> 00:02:52.150
and this is kind of like a regular expression.

00:02:52.150 --> 00:02:55.840
And if you have to specify multiple expressions like this,

00:02:55.840 --> 00:02:59.160
then you can just simply use a comma character,

00:02:59.160 --> 00:03:02.080
and then you can specify your list,

00:03:02.080 --> 00:03:03.160
whatever it ISS.

00:03:03.160 --> 00:03:05.100
But now,

00:03:05.100 --> 00:03:05.930
in this case,

00:03:05.930 --> 00:03:10.270
we're trying to include another being,

00:03:10.270 --> 00:03:11.550
but here.

00:03:11.550 --> 00:03:13.580
We're doing the opposite.

00:03:13.580 --> 00:03:17.650
We're disqualifying that being from auto wiring.

00:03:17.650 --> 00:03:19.360
So in this case,

00:03:19.360 --> 00:03:21.390
this will take the priority.

00:03:21.390 --> 00:03:25.990
It's on the program and we should see the same result.

00:03:25.990 --> 00:03:28.650
We seem to have an exception list.

00:03:28.650 --> 00:03:35.810
Take a look at it and it say's Hold it.

00:03:35.810 --> 00:03:37.830
The problem is different,

00:03:37.830 --> 00:03:38.180
though.

00:03:38.180 --> 00:03:42.200
Here we're trying to include this being.

00:03:42.200 --> 00:03:45.650
That means we have excluded this being,

00:03:45.650 --> 00:03:55.600
sir way to make sure that we have this flag set in here as well and also went to have the

00:03:55.600 --> 00:03:58.200
following check here.

00:03:58.200 --> 00:04:11.270
Oops and hopes this should work as well.

00:04:11.270 --> 00:04:23.640
This should work now let's on the program and and obviously won't see any messages because

00:04:23.640 --> 00:04:24.550
essentially,

00:04:24.550 --> 00:04:28.620
these two beans are excluded.

00:04:28.620 --> 00:04:31.170
Now,

00:04:31.170 --> 00:04:32.320
if you're on the program,

00:04:32.320 --> 00:04:34.890
I should see a message from another bean.

00:04:34.890 --> 00:04:38.750
And sure enough,

00:04:38.750 --> 00:04:39.450
it did.

00:04:39.450 --> 00:04:52.550
Let's quickly also take care off the Java conflict and on the program it worked,

00:04:52.550 --> 00:05:00.990
and here have just used the following attributes for being annotation in our exclude that

00:05:00.990 --> 00:05:03.320
bean simple as that.

00:05:03.320 --> 00:05:09.120
So that's about it.

00:05:09.120 --> 00:05:09.670
I'll see,

00:05:09.670 --> 00:05:10.180
assume

