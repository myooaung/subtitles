WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.320
Okay.

00:00:05.320 --> 00:00:11.000
Lets see how we can solve our problems using annotations and in order for annotations toe

00:00:11.000 --> 00:00:11.490
work,

00:00:11.490 --> 00:00:14.910
you must first include the following tag.

00:00:14.910 --> 00:00:19.940
Only then will the spring be able to evaluate the annotations that you're going to include

00:00:19.940 --> 00:00:20.930
in your beans.

00:00:20.930 --> 00:00:23.310
And in order for this tag toe work,

00:00:23.310 --> 00:00:27.350
you must first include the following names.

00:00:27.350 --> 00:00:27.970
Space,

00:00:27.970 --> 00:00:32.350
the context and here's the your for the same.

00:00:32.350 --> 00:00:33.800
Along with that,

00:00:33.800 --> 00:00:39.450
you also need to include the following schema locations just as you see in here.

00:00:39.450 --> 00:00:40.060
Now,

00:00:40.060 --> 00:00:42.760
you don't have to type in the link by yourself.

00:00:42.760 --> 00:00:45.220
I'm going to make this project for you to download,

00:00:45.220 --> 00:00:48.250
so I can just simply make use off those files.

00:00:48.250 --> 00:00:50.580
And once you do that,

00:00:50.580 --> 00:00:53.590
instead of specifying the attribute in here,

00:00:53.590 --> 00:00:54.850
what am I going to do?

00:00:54.850 --> 00:01:03.210
Rather is I'll go to the bean and I'm just going to annotate these fields with auto wired

00:01:03.210 --> 00:01:04.400
annotation.

00:01:04.400 --> 00:01:06.480
By doing so,

00:01:06.480 --> 00:01:13.880
spring will automatically look for these beans from the list off beans that you can figure

00:01:13.880 --> 00:01:15.060
in the convict file,

00:01:15.060 --> 00:01:18.590
and it will try to identify the beans by type.

00:01:18.590 --> 00:01:21.880
So even if the name is different,

00:01:21.880 --> 00:01:27.690
spring will still be able to identify these beans and inject them automatically.

00:01:27.690 --> 00:01:31.880
Let's on the program and see the result,

00:01:31.880 --> 00:01:34.930
and it worked.

00:01:34.930 --> 00:01:36.050
But again,

00:01:36.050 --> 00:01:42.350
there could be a chance that more than one being could point to the same class.

00:01:42.350 --> 00:01:45.970
Let me just copy this statement and make a double.

00:01:45.970 --> 00:01:50.960
Get off it and I'm Linda named as being differently.

00:01:50.960 --> 00:01:52.420
And now again,

00:01:52.420 --> 00:01:55.150
Spring will be confused as to which one to inject.

00:01:55.150 --> 00:01:59.340
But this time is just simply going to choose the bean.

00:01:59.340 --> 00:02:01.250
According to the qualifier,

00:02:01.250 --> 00:02:02.920
What is a qualifier?

00:02:02.920 --> 00:02:07.150
It is the name of the property that was specifying here.

00:02:07.150 --> 00:02:16.850
So this time Spring will just simply choose this bean without throwing any exception.

00:02:16.850 --> 00:02:22.610
Let's run the program and it worked as well.

00:02:22.610 --> 00:02:27.850
Now what if the name of this being happens to be different?

00:02:27.850 --> 00:02:37.010
There is no property with that name in here and now Spring will throw an exception in order

00:02:37.010 --> 00:02:38.170
to fix the problem.

00:02:38.170 --> 00:02:48.360
We can explicitly said the qualifier by using the annotation qualifier,

00:02:48.360 --> 00:02:54.460
and then you would specify the name of the bean off your choice.

00:02:54.460 --> 00:02:57.750
That's I want to point this.

00:02:57.750 --> 00:03:05.400
This is the bean I want to inject now Sprinkle.

00:03:05.400 --> 00:03:06.910
Just simply inject the bean.

00:03:06.910 --> 00:03:18.970
But the following qualifier that's on the program handed will And since we didn't add any

00:03:18.970 --> 00:03:22.520
kind of extra para meters in here are attributes.

00:03:22.520 --> 00:03:28.580
The Java conflict would pretty much remain the same without any extra element in it.

00:03:28.580 --> 00:03:29.620
Now,

00:03:29.620 --> 00:03:33.900
unlike a maximal conflict where you have to include all the name spaces,

00:03:33.900 --> 00:03:34.670
etcetera,

00:03:34.670 --> 00:03:38.260
you don't have to deal with such mess in the Java Kontic.

00:03:38.260 --> 00:03:43.450
So here is one more reason why it's better to use Java conflict over example.

00:03:43.450 --> 00:03:50.650
So let's switch over to Java conflict and try to run the program.

00:03:50.650 --> 00:03:56.520
And okay,

00:03:56.520 --> 00:03:58.110
we seem to have an exception list.

00:03:58.110 --> 00:03:59.460
Take a look at what it is.

00:03:59.460 --> 00:04:01.910
Okay,

00:04:01.910 --> 00:04:06.040
just simply say is that there is no being okay.

00:04:06.040 --> 00:04:10.760
This is not annotated with had the red bean.

00:04:10.760 --> 00:04:15.150
So this should work this time.

00:04:15.150 --> 00:04:18.550
Hopes we got some.

00:04:18.550 --> 00:04:21.590
Okay.

00:04:21.590 --> 00:04:25.480
The problem is we have set a qualifier,

00:04:25.480 --> 00:04:29.110
and this qualifier is not have valuable in the conflict.

00:04:29.110 --> 00:04:32.850
Let's on the program again.

00:04:32.850 --> 00:04:40.450
And this time it worked pretty well trying to use this project and experiment with it.

00:04:40.450 --> 00:04:41.570
All right,

00:04:41.570 --> 00:04:42.020
I'll see.

00:04:42.020 --> 00:04:42.550
Assume

