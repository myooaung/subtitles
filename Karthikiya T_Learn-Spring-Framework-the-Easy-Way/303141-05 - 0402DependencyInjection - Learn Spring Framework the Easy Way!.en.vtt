WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.060
In our previous example,

00:00:02.060 --> 00:00:07.250
we've seen that our class is heavily dependent on the dark class and so we're not able to

00:00:07.250 --> 00:00:08.350
switch to the alternate.

00:00:08.350 --> 00:00:08.650
Oh,

00:00:08.650 --> 00:00:10.350
if we make this to cat,

00:00:10.350 --> 00:00:12.450
then just off the court is breaking.

00:00:12.450 --> 00:00:17.440
So one way to solve this problem is by using interfaces.

00:00:17.440 --> 00:00:19.080
Let me explain what I mean.

00:00:19.080 --> 00:00:23.450
So what I have done now is I've created this interface animal,

00:00:23.450 --> 00:00:28.300
and both cat and dog would implement that interface.

00:00:28.300 --> 00:00:34.870
And these two classes would provide their own implementation for the mattered.

00:00:34.870 --> 00:00:35.800
Make noise?

00:00:35.800 --> 00:00:36.600
No,

00:00:36.600 --> 00:00:37.550
in my code.

00:00:37.550 --> 00:00:42.110
Instead off explicitly mentioning the class name as dog.

00:00:42.110 --> 00:00:46.650
I'm going to make it more general and make it animal.

00:00:46.650 --> 00:00:54.440
And the method name in the rest of the code would also change with the method name.

00:00:54.440 --> 00:00:55.550
Make noise.

00:00:55.550 --> 00:00:58.540
Now,

00:00:58.540 --> 00:01:01.540
that way I had the freedom to switch to alternate O.

00:01:01.540 --> 00:01:02.210
For example,

00:01:02.210 --> 00:01:03.670
if I make this toe cat,

00:01:03.670 --> 00:01:06.960
the rest of the court would still remain same.

00:01:06.960 --> 00:01:09.790
No changes are needed or what so ever,

00:01:09.790 --> 00:01:17.440
but still wouldn't accomplish our goal off making this class and the cat class being

00:01:17.440 --> 00:01:19.150
independent off each other.

00:01:19.150 --> 00:01:21.340
So what can we do in here?

00:01:21.340 --> 00:01:25.990
So that this class would be completely independent off the cat or dog.

00:01:25.990 --> 00:01:28.820
Can you make a guess on how we can fix that?

00:01:28.820 --> 00:01:29.950
Well,

00:01:29.950 --> 00:01:31.400
it's actually quite easy.

00:01:31.400 --> 00:01:35.090
All I'm going to do now is introduce a new constructor,

00:01:35.090 --> 00:01:40.650
a parametric constructor and the Param Eter that we're going to pass is going to be off

00:01:40.650 --> 00:01:41.870
type animal.

00:01:41.870 --> 00:01:45.520
We're not going to explicitly mention at the cat or dog,

00:01:45.520 --> 00:01:50.580
but we're going to get more general and say the argument is off type animal.

00:01:50.580 --> 00:01:52.400
So let me show you what I mean.

00:01:52.400 --> 00:01:58.800
So I have this class in here and that defined the constructor that takes in the animal

00:01:58.800 --> 00:01:59.590
Param Eter.

00:01:59.590 --> 00:02:02.950
And I'm just trying to assign it to this variable.

00:02:02.950 --> 00:02:04.500
Now,

00:02:04.500 --> 00:02:10.480
nowhere in this code did we mention cat class are the dark class.

00:02:10.480 --> 00:02:16.550
Now it's really safe to say that this class has no dependency are.

00:02:16.550 --> 00:02:17.400
In other words,

00:02:17.400 --> 00:02:21.740
this class is loosely coupled with a cat or dog.

00:02:21.740 --> 00:02:26.070
But who is actually going to pass this argument?

00:02:26.070 --> 00:02:26.790
Well,

00:02:26.790 --> 00:02:28.550
it's from our main class,

00:02:28.550 --> 00:02:34.780
and all I'm trying to do here is I'm creating an instance off this being and that I'm

00:02:34.780 --> 00:02:37.780
trying to pass the perimeter to its constructor.

00:02:37.780 --> 00:02:38.550
No,

00:02:38.550 --> 00:02:40.600
depending on the perimeter that I pass,

00:02:40.600 --> 00:02:43.430
its corresponding method would be invoked.

00:02:43.430 --> 00:02:45.950
So in here I'm trying to pass the dog object.

00:02:45.950 --> 00:02:50.350
So that's going to result in executing this line off statement.

00:02:50.350 --> 00:02:52.490
If this was cat,

00:02:52.490 --> 00:02:55.600
that would result in executing this statement.

00:02:55.600 --> 00:02:59.270
So let's quickly run the program and see how things will go.

00:02:59.270 --> 00:03:04.250
And now let's make this as Capt.

00:03:04.250 --> 00:03:05.310
Said,

00:03:05.310 --> 00:03:07.150
the file on the program.

00:03:07.150 --> 00:03:08.650
And there it is.

00:03:08.650 --> 00:03:11.270
Now we're certainly accomplished.

00:03:11.270 --> 00:03:16.750
Something really significant in here wouldn't define the being class dependencies in X

00:03:16.750 --> 00:03:17.850
Class itself,

00:03:17.850 --> 00:03:25.720
but rather we have sort off sent its dependencies as a perimeter to its constructor.

00:03:25.720 --> 00:03:26.160
Or,

00:03:26.160 --> 00:03:27.040
in other words,

00:03:27.040 --> 00:03:31.610
we're trying to inject the dependencies into this being.

00:03:31.610 --> 00:03:35.770
And that's exactly what is called dependence injection.

00:03:35.770 --> 00:03:38.970
So by using the technique off dependence injection,

00:03:38.970 --> 00:03:44.450
both this bean and the dark class are not tightly coupled to each other.

00:03:44.450 --> 00:03:46.590
Now,

00:03:46.590 --> 00:03:47.120
all the way.

00:03:47.120 --> 00:03:47.600
Accomplice,

00:03:47.600 --> 00:03:48.130
dependence,

00:03:48.130 --> 00:03:48.960
injection.

00:03:48.960 --> 00:03:52.660
How mean class logic is not intended to manage.

00:03:52.660 --> 00:03:54.550
The dependence is in our application.

00:03:54.550 --> 00:03:59.800
Now imagine that you're working on the Real World Project and you have thousands off class

00:03:59.800 --> 00:04:00.350
files.

00:04:00.350 --> 00:04:05.750
It's really messy to manage all the dependence is from your application logic itself.

00:04:05.750 --> 00:04:06.660
Instead,

00:04:06.660 --> 00:04:11.020
it would be wise to leave that task to 1/3 party to,

00:04:11.020 --> 00:04:16.550
and the tool that I'm talking about is off course spring framework.

00:04:16.550 --> 00:04:22.500
So let's see how we can leave that task of dependency management to spring framework

00:04:22.500 --> 00:04:26.350
because spring is designed specifically for that purpose.

00:04:26.350 --> 00:04:26.970
Well,

00:04:26.970 --> 00:04:27.650
in fact,

00:04:27.650 --> 00:04:30.640
spring is just not meant for dependency management.

00:04:30.640 --> 00:04:32.630
But a host of other stuff,

00:04:32.630 --> 00:04:35.300
which will talk about incoming videos,

00:04:35.300 --> 00:04:36.860
hope it makes ends.

00:04:36.860 --> 00:04:37.870
See you soon.

