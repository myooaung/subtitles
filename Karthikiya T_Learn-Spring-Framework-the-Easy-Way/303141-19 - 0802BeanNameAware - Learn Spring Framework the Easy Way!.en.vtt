WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.420
okay.

00:00:01.420 --> 00:00:05.910
And this week they were going to take a look at a very simple example off ever interface

00:00:05.910 --> 00:00:12.520
and say that you have a bean within which we wanted to perform a task that has something to

00:00:12.520 --> 00:00:13.820
do with the being name.

00:00:13.820 --> 00:00:18.220
Now we can actually hardcore the being name itself in the class.

00:00:18.220 --> 00:00:22.500
But it's definitely a bad practice because in future,

00:00:22.500 --> 00:00:28.400
the name of the Bean can change while our project is pretty small and we know the name of

00:00:28.400 --> 00:00:28.970
the bean.

00:00:28.970 --> 00:00:30.860
But in large project,

00:00:30.860 --> 00:00:34.350
you don't don't really remember the name of the each being.

00:00:34.350 --> 00:00:35.580
In that case,

00:00:35.580 --> 00:00:39.730
he can leverage the functionality off the ever interface.

00:00:39.730 --> 00:00:41.500
So let's see how it's done.

00:00:41.500 --> 00:00:48.600
All I have here is I've just defined a string which is going to hold the name of the bean

00:00:48.600 --> 00:00:49.450
in future.

00:00:49.450 --> 00:00:54.250
And here I'm just simply trying to display that name as simple as that.

00:00:54.250 --> 00:00:56.240
And in our main logic,

00:00:56.240 --> 00:00:58.050
it's pretty straightforward.

00:00:58.050 --> 00:01:00.450
I don't think I have to explain this,

00:01:00.450 --> 00:01:06.180
and our convict file has just one definition off the being,

00:01:06.180 --> 00:01:11.850
and that is off this sample being we have in here pretty straightforward.

00:01:11.850 --> 00:01:15.780
That's on the program and to the result.

00:01:15.780 --> 00:01:16.830
Currently,

00:01:16.830 --> 00:01:17.870
as you would expect,

00:01:17.870 --> 00:01:21.380
there is no being name assigned inside that bean,

00:01:21.380 --> 00:01:24.850
and so he would see a no.

00:01:24.850 --> 00:01:28.050
But now let's try to do something.

00:01:28.050 --> 00:01:34.650
I won't implement one off the so called and ever interface that spring provides.

00:01:34.650 --> 00:01:37.780
And by doing so,

00:01:37.780 --> 00:01:43.210
I have to provide the implementation off the only method present in the bean name ever

00:01:43.210 --> 00:01:44.010
interface.

00:01:44.010 --> 00:01:46.590
And here it is.

00:01:46.590 --> 00:01:52.450
This is basically etcetera that will set this value as simple as that.

00:01:52.450 --> 00:01:57.660
But who is actually going to take care off injecting this particular name?

00:01:57.660 --> 00:01:58.990
Well,

00:01:58.990 --> 00:02:00.010
it's spring.

00:02:00.010 --> 00:02:04.650
We don't have to perform the injection explicitly from or conflict file.

00:02:04.650 --> 00:02:11.180
But spring will take a look at all the beans and try to identify the beans that uses the

00:02:11.180 --> 00:02:14.050
ever interfaces and accordingly,

00:02:14.050 --> 00:02:15.940
spring itself will inject.

00:02:15.940 --> 00:02:17.210
The dependence is,

00:02:17.210 --> 00:02:19.380
and in this case,

00:02:19.380 --> 00:02:21.350
we're using the settle injection,

00:02:21.350 --> 00:02:25.090
and we don't have a constructor were off injecting in this case,

00:02:25.090 --> 00:02:25.450
though,

00:02:25.450 --> 00:02:28.520
and that's all about it.

00:02:28.520 --> 00:02:31.740
Let's on the program and see the result,

00:02:31.740 --> 00:02:35.650
and it worked.

00:02:35.650 --> 00:02:44.350
Let's try to get it done from the Java conflict as well.

00:02:44.350 --> 00:02:50.190
Now let's try to make changes to the name of the bean.

00:02:50.190 --> 00:02:52.950
By providing that attribute,

00:02:52.950 --> 00:02:55.100
I'm going to change the name,

00:02:55.100 --> 00:03:00.350
toe something else.

00:03:00.350 --> 00:03:03.610
Now that's on the program,

00:03:03.610 --> 00:03:05.650
and we should be able to see,

00:03:05.650 --> 00:03:08.340
well,

00:03:08.340 --> 00:03:09.390
an exception.

00:03:09.390 --> 00:03:12.450
No such definition exception.

00:03:12.450 --> 00:03:14.550
All right,

00:03:14.550 --> 00:03:18.950
this has something to do with this in here.

00:03:18.950 --> 00:03:26.750
So let's quickly change this and on the program,

00:03:26.750 --> 00:03:31.750
and it walked.

00:03:31.750 --> 00:03:34.650
And this explains.

00:03:34.650 --> 00:03:36.970
Now,

00:03:36.970 --> 00:03:38.410
if you're a bear of the Observer,

00:03:38.410 --> 00:03:38.630
it is.

00:03:38.630 --> 00:03:39.470
And Patton,

00:03:39.470 --> 00:03:43.200
this is some more similar here.

00:03:43.200 --> 00:03:46.750
The Observer is the bean,

00:03:46.750 --> 00:03:51.450
and spring is going to inject its dependencies using the center injection.

00:03:51.450 --> 00:03:52.380
Also.

00:03:52.380 --> 00:03:58.220
Now you may ask me if we are tightly coupled with the spring framework because we're trying

00:03:58.220 --> 00:04:00.750
to use the spring specific interface in here.

00:04:00.750 --> 00:04:02.830
The answer is of course,

00:04:02.830 --> 00:04:03.350
yes.

00:04:03.350 --> 00:04:05.560
You have to see the pros and guns.

00:04:05.560 --> 00:04:10.690
If you think you're able to add value to replication by using these ever interfaces,

00:04:10.690 --> 00:04:12.150
go ahead and use it.

00:04:12.150 --> 00:04:17.730
But be aware that it might cause your cord to be tightly coupled with the spring

00:04:17.730 --> 00:04:18.700
architecture.

00:04:18.700 --> 00:04:20.020
But let me tell you,

00:04:20.020 --> 00:04:24.260
it's not possible that you have a completely loosely coupled architecture.

00:04:24.260 --> 00:04:28.550
You have to couple the components to some extent to get them working,

00:04:28.550 --> 00:04:30.420
and it is pretty expected.

00:04:30.420 --> 00:04:31.580
Nothing unusual.

00:04:31.580 --> 00:04:33.740
So that's about it.

00:04:33.740 --> 00:04:37.090
That's a quick overview off ever interfaces and how to use them.

00:04:37.090 --> 00:04:41.350
We're going to take a look at a couple of more examples and then we'll see what we can do.

00:04:41.350 --> 00:04:42.380
All right,

00:04:42.380 --> 00:04:43.350
I'll see you soon.

