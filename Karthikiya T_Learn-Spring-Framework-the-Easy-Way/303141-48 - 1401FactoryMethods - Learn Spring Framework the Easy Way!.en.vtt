WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.930
in this week,

00:00:00.930 --> 00:00:06.600
we're going to talk about factory methods when you haven't been definition in this manner

00:00:06.600 --> 00:00:07.720
in your conflict file,

00:00:07.720 --> 00:00:11.420
you're asking spring to create an instance off this being,

00:00:11.420 --> 00:00:16.550
but sometimes you might want to get control on the instance ation process.

00:00:16.550 --> 00:00:21.050
Maybe you want to create an instance depending on certain conditions.

00:00:21.050 --> 00:00:22.350
In that case,

00:00:22.350 --> 00:00:25.190
you shouldn't ask spring to create an instance for you,

00:00:25.190 --> 00:00:28.880
but rather you should our spring to call him method,

00:00:28.880 --> 00:00:33.840
where you would provide a piece off logic that would create the instance depending on your

00:00:33.840 --> 00:00:34.850
own conditions.

00:00:34.850 --> 00:00:40.430
In order to tell spring to not to create an instance but rather call a matter off for

00:00:40.430 --> 00:00:41.090
choice.

00:00:41.090 --> 00:00:44.730
You have to use the following attribute factory method,

00:00:44.730 --> 00:00:48.720
and you would give the name of that method which spring would call,

00:00:48.720 --> 00:00:54.660
and this method would belong to the being itself and inside are being.

00:00:54.660 --> 00:00:58.050
I'm trying to demonstrate a real time scenario.

00:00:58.050 --> 00:01:02.310
Say that I wanted to create an instance off Silver Manager,

00:01:02.310 --> 00:01:04.630
depending on the FBI key,

00:01:04.630 --> 00:01:05.540
for example,

00:01:05.540 --> 00:01:10.010
say that we have a customer who purchased the license to get access to the servers.

00:01:10.010 --> 00:01:11.270
In his case,

00:01:11.270 --> 00:01:14.950
we want to create the server manager in stands as the tears.

00:01:14.950 --> 00:01:16.270
Otherwise,

00:01:16.270 --> 00:01:18.250
if the user is a free user,

00:01:18.250 --> 00:01:24.600
Orphee entered an invalid AP a key are the A P I key that is no longer valid.

00:01:24.600 --> 00:01:29.650
Then we want to set this flag restricted access to true.

00:01:29.650 --> 00:01:32.850
And throughout the logic in this class file,

00:01:32.850 --> 00:01:35.040
we would make use off this flag,

00:01:35.040 --> 00:01:39.900
and we will give restrict access to that user accordingly.

00:01:39.900 --> 00:01:41.350
So here we are,

00:01:41.350 --> 00:01:46.860
checking to see if the A P I key is valid and this matter is just straight of a returning.

00:01:46.860 --> 00:01:47.450
True.

00:01:47.450 --> 00:01:52.290
But you need is in that we have some kind of logic that will actually check the validity of

00:01:52.290 --> 00:01:53.300
the FBI key.

00:01:53.300 --> 00:01:55.170
If that's the case,

00:01:55.170 --> 00:02:00.690
we're strike ever returning the object as it is without enabling the Frank.

00:02:00.690 --> 00:02:03.200
Otherwise,

00:02:03.200 --> 00:02:05.460
if the A p I key is not valid,

00:02:05.460 --> 00:02:08.350
then we would said this flag to true.

00:02:08.350 --> 00:02:16.350
Let's default this to fault and we also have a method display message.

00:02:16.350 --> 00:02:19.650
So depending on the flag that is set,

00:02:19.650 --> 00:02:22.550
we're going to display its corresponding message.

00:02:22.550 --> 00:02:26.050
But currently the a P I key is valid,

00:02:26.050 --> 00:02:34.940
and so we should be able to see this message so Let's go ahead and on the program and see

00:02:34.940 --> 00:02:37.150
the result It worked.

00:02:37.150 --> 00:02:41.250
The user would be qualified for unlimited access.

00:02:41.250 --> 00:02:43.290
No.

00:02:43.290 --> 00:02:50.230
Let's say that the user has entered either an invalid AP a key or his A P I.

00:02:50.230 --> 00:02:51.450
K is expired.

00:02:51.450 --> 00:02:55.350
Then this should written falls.

00:02:55.350 --> 00:03:02.350
So now he should be getting restricted access to the servers,

00:03:02.350 --> 00:03:03.650
and so is the message.

00:03:03.650 --> 00:03:08.960
Let's try to do the same from Java conflict,

00:03:08.960 --> 00:03:10.220
but before that,

00:03:10.220 --> 00:03:16.740
I'd like to point out that dismantled in here has to be static.

00:03:16.740 --> 00:03:17.950
The reason is,

00:03:17.950 --> 00:03:20.750
if Spring has to call that method,

00:03:20.750 --> 00:03:23.750
it needs to have an instance off it.

00:03:23.750 --> 00:03:27.450
But since it cannot create an instance and then call this method,

00:03:27.450 --> 00:03:32.840
it would expect the matter to be off static so that it can call the method by using the

00:03:32.840 --> 00:03:37.590
class name just a quick point to note.

00:03:37.590 --> 00:03:38.810
Also,

00:03:38.810 --> 00:03:42.810
do take a note that we have constructor arguments in here,

00:03:42.810 --> 00:03:45.970
but this is not actually passed to a constructor,

00:03:45.970 --> 00:03:48.400
but rather to this mattered.

00:03:48.400 --> 00:03:49.730
So if you're using it,

00:03:49.730 --> 00:03:50.630
simple conflict,

00:03:50.630 --> 00:03:52.350
this might be a little confusing,

00:03:52.350 --> 00:03:54.110
but that's how it works.

00:03:54.110 --> 00:04:00.750
So the argument that we had passed would end up in here.

00:04:00.750 --> 00:04:03.350
We don't have a Parametric constructor.

00:04:03.350 --> 00:04:04.570
Okay,

00:04:04.570 --> 00:04:06.870
now let's take a look at the Java con.

00:04:06.870 --> 00:04:09.350
Think very straightforward.

00:04:09.350 --> 00:04:16.350
Nothing surprising you just simply trying to call that static method isn't the class name

00:04:16.350 --> 00:04:18.800
and you're passing some argument.

00:04:18.800 --> 00:04:20.380
It's as simple as that,

00:04:20.380 --> 00:04:24.140
and everything would work,

00:04:24.140 --> 00:04:32.650
smoke electron the program and see the result.

00:04:32.650 --> 00:04:33.950
It worked.

00:04:33.950 --> 00:04:36.380
But of course,

00:04:36.380 --> 00:04:38.000
with factory methods,

00:04:38.000 --> 00:04:40.050
you have certain limitations.

00:04:40.050 --> 00:04:42.340
For example,

00:04:42.340 --> 00:04:43.950
the method has to be static,

00:04:43.950 --> 00:04:46.120
and moreover,

00:04:46.120 --> 00:04:49.650
this class is not meant to create objects.

00:04:49.650 --> 00:04:53.950
It would have its own responsibility to handle the business logic.

00:04:53.950 --> 00:04:58.890
So in my next week we're going to talk about so called a factory class,

00:04:58.890 --> 00:05:02.670
which especially meant to manufacture these objects.

00:05:02.670 --> 00:05:05.960
And we don't have to use any static method.

00:05:05.960 --> 00:05:07.650
I'll see you in my next radio.

