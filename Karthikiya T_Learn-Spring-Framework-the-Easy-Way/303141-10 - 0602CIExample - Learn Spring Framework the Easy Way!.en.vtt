WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.630
Okay,

00:00:00.630 --> 00:00:03.680
let us have a court walk through of the following scenario.

00:00:03.680 --> 00:00:04.630
First of all,

00:00:04.630 --> 00:00:08.920
the trusted company will have to publish their FBI so that somebody can provide

00:00:08.920 --> 00:00:10.210
implementation for it.

00:00:10.210 --> 00:00:17.360
Let us assume that this is their project where they would design their FBI for the sake off

00:00:17.360 --> 00:00:18.220
simplicity.

00:00:18.220 --> 00:00:23.650
We just have one single interface in here and that would just define set off standard

00:00:23.650 --> 00:00:30.110
methods that will help their clients connect to the servers and store data insecure manner

00:00:30.110 --> 00:00:33.500
So this would have methods like Configure Silver's,

00:00:30.110 --> 00:00:30.110
.

00:00:33.500 --> 00:00:36.310
which would let their clients connect to their servers.

00:00:36.310 --> 00:00:40.420
And this method is going to accept the falling para meters like account.

00:00:40.420 --> 00:00:40.990
I agree,

00:00:40.990 --> 00:00:45.510
which would be the unique account I D given to a customer their user name,

00:00:45.510 --> 00:00:46.290
password,

00:00:46.290 --> 00:00:52.010
and then the list off service to which they want to connect to and list off Convict para

00:00:52.010 --> 00:00:52.550
Meters,

00:00:52.550 --> 00:00:58.470
which would let the customer provide the amount off course required amount of hard disk.

00:00:58.470 --> 00:00:59.670
The amount off Ram,

00:00:59.670 --> 00:01:04.760
etcetera and rest of the methods are pretty self explanatory.

00:01:04.760 --> 00:01:07.790
And once they defined the FBI like this,

00:01:07.790 --> 00:01:14.450
all they're going to do is to publish a jar archive off this project and in this example,

00:01:14.450 --> 00:01:20.850
all I've done is I've right clicked on this project and then clicked on export search for

00:01:20.850 --> 00:01:24.060
Jaar.

00:01:24.060 --> 00:01:28.250
Select this option jar file.

00:01:28.250 --> 00:01:29.550
Click next,

00:01:29.550 --> 00:01:34.850
and then you can choose Depart Very want to store that jar file?

00:01:34.850 --> 00:01:36.460
Give it some name.

00:01:36.460 --> 00:01:37.610
In my case,

00:01:37.610 --> 00:01:41.980
the name that I've given is trusted company Jar Jar.

00:01:41.980 --> 00:01:44.610
And once you do that click finish,

00:01:44.610 --> 00:01:46.250
that would save the file.

00:01:46.250 --> 00:01:51.800
This is like the trusted company has published their FBI so that the people who implement

00:01:51.800 --> 00:01:55.850
will now start providing the implementation for the FBI.

00:01:55.850 --> 00:02:02.540
So now one of these implementer Z will have a project that looks something like this.

00:02:02.540 --> 00:02:06.730
Let me open this project and inside their project,

00:02:06.730 --> 00:02:11.540
they're going to use that external AP I from the trusted company.

00:02:11.540 --> 00:02:14.150
So I go to the properties,

00:02:14.150 --> 00:02:15.850
I have a bill part,

00:02:15.850 --> 00:02:17.400
choose libraries,

00:02:17.400 --> 00:02:19.150
chills the class part,

00:02:19.150 --> 00:02:25.680
click on add external jars and then you would add this jar file Trusted company,

00:02:25.680 --> 00:02:29.150
which is basically having one single interface in our case,

00:02:29.150 --> 00:02:31.640
have already done that,

00:02:31.640 --> 00:02:33.290
and we're able to see it in here.

00:02:33.290 --> 00:02:35.420
I don't have to do it again.

00:02:35.420 --> 00:02:36.650
Wants to do that.

00:02:36.650 --> 00:02:41.330
You can actually create a class that implements that interface,

00:02:41.330 --> 00:02:43.950
and that's exactly what I've done in here.

00:02:43.950 --> 00:02:46.530
And many implement that interface.

00:02:46.530 --> 00:02:50.950
You're forced to provide implementations for all its methods.

00:02:50.950 --> 00:02:55.250
And I just kept things simple with his out statement,

00:02:55.250 --> 00:03:01.360
just as you see in here pretty straightforward and self explanatory.

00:03:01.360 --> 00:03:07.500
But the key thing to note here is when I'm trying to create an instance half sick,

00:03:07.500 --> 00:03:09.220
you store implementation.

00:03:09.220 --> 00:03:13.950
I'm expecting somebody to set the state off this object with a constructor,

00:03:13.950 --> 00:03:19.330
and the constructor is actually going to act up the same amount off para meters that are

00:03:19.330 --> 00:03:21.150
defined inside this method,

00:03:21.150 --> 00:03:24.050
so that at later point of time,

00:03:24.050 --> 00:03:26.450
when you're trying to call this method connect,

00:03:26.450 --> 00:03:29.040
it's actually going to call this method.

00:03:29.040 --> 00:03:30.270
Conficker servers,

00:03:30.270 --> 00:03:33.910
which is actually going to make use off all the set off,

00:03:33.910 --> 00:03:37.250
feels that we set pretty straightforward.

00:03:37.250 --> 00:03:42.550
No one's the implementer provide implementation.

00:03:42.550 --> 00:03:47.590
They're going to publish their jar file so that somebody can use it again.

00:03:47.590 --> 00:03:48.730
In our example,

00:03:48.730 --> 00:03:58.150
I've just simply exported the jar file and with the name a PR implementer Dodge are.

00:03:58.150 --> 00:04:04.860
And once the published The Jar File,

00:04:04.860 --> 00:04:11.700
it is we who have to use their implementation to be able to access their sores.

00:04:11.700 --> 00:04:14.470
So inside our project,

00:04:14.470 --> 00:04:26.050
all I have done is if you go to manage APP data file.

00:04:26.050 --> 00:04:32.450
I have declared that interface secure store access which belonged to the trusted company.

00:04:32.450 --> 00:04:36.260
That means prayer to this.

00:04:36.260 --> 00:04:40.110
I've actually imported those external libraries.

00:04:40.110 --> 00:04:44.760
So I go to properties libraries.

00:04:44.760 --> 00:04:49.530
And if you notice I know have added this to libraries.

00:04:49.530 --> 00:04:52.760
When is the FBI and the other is implementation off?

00:04:52.760 --> 00:04:56.490
That FBI sounds simple as that.

00:04:56.490 --> 00:05:03.140
The reason why I had used an interface in here is tomorrow at little point of time.

00:05:03.140 --> 00:05:07.490
If I would like to switch toe alternator implementation,

00:05:07.490 --> 00:05:10.390
I can easily switch without much offer trouble.

00:05:10.390 --> 00:05:16.050
And you'll understand why in a while and just off the methods are pretty straightforward.

00:05:16.050 --> 00:05:22.050
All I'm trying to do is to make use off the methods that are defined in the subject.

00:05:22.050 --> 00:05:23.950
Pretty straightforward.

00:05:23.950 --> 00:05:29.630
So imagine that we're trying to really connect to the silver and trying to store the data

00:05:29.630 --> 00:05:31.550
insecure manner or whatever.

00:05:31.550 --> 00:05:32.360
Now,

00:05:32.360 --> 00:05:36.650
let us go to the XML conflict file and see what is happening there.

00:05:36.650 --> 00:05:45.100
So if you notice the constructor of this class is accepting a perimeter off type secure

00:05:45.100 --> 00:05:45.760
store axes,

00:05:45.760 --> 00:05:46.950
which is an interface.

00:05:46.950 --> 00:05:53.150
So we have to create a bean that we're going to inject to this constructor.

00:05:53.150 --> 00:05:58.000
And here is where we defined that being.

00:05:58.000 --> 00:06:03.720
But if you notice this class doesn't belong to the current project,

00:06:03.720 --> 00:06:07.200
but to an extra library that we've just imported.

00:06:07.200 --> 00:06:10.220
So as long as the classes available in the class,

00:06:10.220 --> 00:06:12.350
part spring can find it.

00:06:12.350 --> 00:06:19.240
And if you remember that implementation classes having a constructor with this para meters

00:06:19.240 --> 00:06:21.090
and so we're passing the same.

00:06:21.090 --> 00:06:26.730
But do take a note that so far were able to inject an object.

00:06:26.730 --> 00:06:27.950
But here,

00:06:27.950 --> 00:06:34.230
you can see that were also able to inject primitive data types just as you see in here here

00:06:34.230 --> 00:06:34.230
.

00:06:34.230 --> 00:06:39.510
We're trying to inject the in teacher in the following format and couple of string

00:06:39.510 --> 00:06:43.250
arguments which will be the user name and the password,

00:06:43.250 --> 00:06:50.780
but do make sure that to include the following attribute the type if you don't define the

00:06:50.780 --> 00:06:51.350
type,

00:06:51.350 --> 00:06:53.640
this may lead to ambiguity.

00:06:53.640 --> 00:06:55.370
We're going to talk about ambiguity,

00:06:55.370 --> 00:06:58.050
incoming videos and similarly,

00:06:58.050 --> 00:07:00.840
we can also inject collection types here.

00:07:00.840 --> 00:07:08.900
We're trying to pass the collection list all you have to do is to define the list tag and

00:07:08.900 --> 00:07:09.750
its values.

00:07:09.750 --> 00:07:15.470
Testing Plaza C E mails with the map.

00:07:15.470 --> 00:07:18.150
You just have to define the tag map,

00:07:18.150 --> 00:07:20.470
and then you would introduce the key value.

00:07:20.470 --> 00:07:27.740
Pairs and all these para meters would be injected to this being.

00:07:27.740 --> 00:07:29.650
When an instance off it,

00:07:29.650 --> 00:07:31.950
they'll be created by the spring.

00:07:31.950 --> 00:07:34.810
And after that instances created.

00:07:34.810 --> 00:07:42.670
We're trying to inject that object into our application into this constructor.

00:07:42.670 --> 00:07:45.040
It's as simple as ERT.

00:07:45.040 --> 00:07:50.390
Let's take a look at our main method,

00:07:50.390 --> 00:07:53.880
which will be the my app dot java.

00:07:53.880 --> 00:07:56.210
This is pretty straightforward.

00:07:56.210 --> 00:08:02.990
What I'm trying to do here is to require this particular being from the application context

00:08:02.990 --> 00:08:02.990
.

00:08:02.990 --> 00:08:08.590
And then I'm trying to use its methods pretty straightforward.

00:08:08.590 --> 00:08:12.050
Let me run the program and see the result.

00:08:12.050 --> 00:08:17.160
It worked now a little assignment to you.

00:08:17.160 --> 00:08:21.310
Pause the video and try to do the same thing with Java conflict.

00:08:21.310 --> 00:08:22.880
It's pretty easy to do,

00:08:22.880 --> 00:08:24.900
and I would like you to give it a try.

00:08:24.900 --> 00:08:29.020
All right,

00:08:29.020 --> 00:08:32.900
I hope that you tried and you're successful and guess if you didn't,

00:08:32.900 --> 00:08:34.590
then here's a solution.

00:08:34.590 --> 00:08:43.430
So let's go inside the Java conflict file and see what's inside it.

00:08:43.430 --> 00:08:45.000
It's pretty straightforward.

00:08:45.000 --> 00:08:51.660
All have done here is created all those para meters and then passed it to the secure store

00:08:51.660 --> 00:08:55.310
implementation constructor and I'm returning the same.

00:08:55.310 --> 00:09:02.530
And in here we have defined the other being just as we didn't guess facsimil and I'm trying

00:09:02.530 --> 00:09:05.650
to call this method.

00:09:05.650 --> 00:09:11.250
So this essentially would pass the secular store implementation.

00:09:11.250 --> 00:09:15.690
So the constructor off manage up data Pretty straightforward.

00:09:15.690 --> 00:09:18.950
Let's on the program and see how it goes.

00:09:18.950 --> 00:09:21.950
And it worked well.

00:09:21.950 --> 00:09:25.650
So where is the constructor injection in here?

00:09:25.650 --> 00:09:30.240
Whatever we're trying to do in here is nothing.

00:09:30.240 --> 00:09:34.990
But we're trying to inject Para Meters into a constructor.

00:09:34.990 --> 00:09:36.570
It's as simple as that.

00:09:36.570 --> 00:09:42.340
But the purpose off the center example is just not explain about the constructor injection

00:09:42.340 --> 00:09:42.340
,

00:09:42.340 --> 00:09:45.210
but the lot off takeaways from this example.

00:09:45.210 --> 00:09:48.350
We're going to talk about all that incoming video.

00:09:48.350 --> 00:09:49.430
All right,

00:09:49.430 --> 00:09:50.440
I'll see you soon

