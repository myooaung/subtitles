WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.260
Okay,

00:00:05.260 --> 00:00:07.920
let us take a look at an example off Aspect J.

00:00:07.920 --> 00:00:10.960
Since spring doesn't come along with aspect here by default,

00:00:10.960 --> 00:00:13.750
we have to explicitly download those libraries.

00:00:13.750 --> 00:00:16.830
And what May even our job is pretty easy.

00:00:16.830 --> 00:00:19.450
All you have to do is to add the aspect,

00:00:19.450 --> 00:00:22.350
Jess Dependencies in this manner,

00:00:22.350 --> 00:00:23.480
in our case,

00:00:23.480 --> 00:00:26.070
we would be requiring the falling tow dependencies.

00:00:26.070 --> 00:00:28.080
The 1st 1 is the aspect,

00:00:28.080 --> 00:00:28.870
Jeff Beaver,

00:00:28.870 --> 00:00:31.540
which is the aspect jit compiler that I'm talking about.

00:00:31.540 --> 00:00:36.540
So we're going to let our source files go through this compiler in order to get divide code

00:00:36.540 --> 00:00:38.860
that will have all the aspect supplied.

00:00:38.860 --> 00:00:40.660
And the other is the aspect.

00:00:40.660 --> 00:00:42.550
Jess run time library.

00:00:42.550 --> 00:00:43.390
Together,

00:00:43.390 --> 00:00:46.750
these two dependence is we'll fulfill the need off aspect j.

00:00:46.750 --> 00:00:52.440
And once you include these dependence is do make sure that you clean the project by going

00:00:52.440 --> 00:00:53.230
to project,

00:00:53.230 --> 00:00:54.590
and then click on clean,

00:00:54.590 --> 00:00:56.040
choose the project,

00:00:56.040 --> 00:00:56.760
and then again,

00:00:56.760 --> 00:00:57.650
click on clean.

00:00:57.650 --> 00:01:02.690
This will download all the aspect your libraries from the maven depository to your local

00:01:02.690 --> 00:01:06.190
depository so that you can start using those libraries.

00:01:06.190 --> 00:01:13.890
And our next step is to move out all the crosscutting concerns from our loan service to a

00:01:13.890 --> 00:01:14.890
different file,

00:01:14.890 --> 00:01:18.120
so we don't have all those log messages in here.

00:01:18.120 --> 00:01:22.150
I'm going to move them to a different class or a different aspect.

00:01:22.150 --> 00:01:23.890
So in this file,

00:01:23.890 --> 00:01:28.870
we're going to define what needs to be done when it needs to be done and where it needs to

00:01:28.870 --> 00:01:29.400
be done.

00:01:29.400 --> 00:01:30.270
So first of all,

00:01:30.270 --> 00:01:32.690
let us specify what needs to be done.

00:01:32.690 --> 00:01:33.800
In our case,

00:01:33.800 --> 00:01:40.580
we want to print the log message before enough to reach in every mattered in this loan

00:01:40.580 --> 00:01:41.250
service.

00:01:41.250 --> 00:01:45.270
So we will specified those two methods.

00:01:45.270 --> 00:01:46.760
And here are day,

00:01:46.760 --> 00:01:50.750
and it's just not enough that you add these methods in this manner.

00:01:50.750 --> 00:01:56.020
You need to tell spring which mattered needs to be executed before and which matter needs

00:01:56.020 --> 00:01:57.660
to be executed after.

00:01:57.660 --> 00:02:03.620
So now we're going to specify when the aspects needs to be executed by using the

00:02:03.620 --> 00:02:06.700
annotations before and after.

00:02:06.700 --> 00:02:15.530
So we wanted to print this log message before execution off these methods and this log

00:02:15.530 --> 00:02:18.850
message after execution off these methods.

00:02:18.850 --> 00:02:22.310
But our task is not complete yet.

00:02:22.310 --> 00:02:27.890
We also need to specify where these aspects used to be applied.

00:02:27.890 --> 00:02:35.200
We can't just apply these aspect everywhere for all matter executions went to specify so

00:02:35.200 --> 00:02:36.780
called appoint cut.

00:02:36.780 --> 00:02:40.340
Now this is a term used enable p again,

00:02:40.340 --> 00:02:43.290
we're going to talk about the term knowledge is in a different video.

00:02:43.290 --> 00:02:48.960
But what we're going to do now in order to specify where this aspect needs to be applied,

00:02:48.960 --> 00:02:52.680
we're going to use so called a point that expression language.

00:02:52.680 --> 00:02:57.210
Now you don't have to think of it as a different language that went to learn the syntax off

00:02:57.210 --> 00:02:57.210
.

00:02:57.210 --> 00:03:00.350
That language is pretty much equal into a regular expression.

00:03:00.350 --> 00:03:01.100
Basically,

00:03:01.100 --> 00:03:04.090
the idea is to narrow down all the joint points.

00:03:04.090 --> 00:03:05.060
If remember,

00:03:05.060 --> 00:03:06.150
what is joined points,

00:03:06.150 --> 00:03:10.030
it's the places where we can apply the aspect.

00:03:10.030 --> 00:03:12.510
So with a point could expression language,

00:03:12.510 --> 00:03:13.850
you will specify.

00:03:13.850 --> 00:03:16.480
Butcher all joined points.

00:03:16.480 --> 00:03:19.150
We won't execute these aspect on,

00:03:19.150 --> 00:03:21.420
and this is how you would specify it.

00:03:21.420 --> 00:03:26.300
And it needs to be mentioned right after these annotations in this manner.

00:03:26.300 --> 00:03:27.250
No,

00:03:27.250 --> 00:03:28.590
just by looking at this expression,

00:03:28.590 --> 00:03:34.360
you can say that we wanted to execute the following aspect.

00:03:34.360 --> 00:03:39.450
Are the method before execution tough?

00:03:39.450 --> 00:03:43.370
Any method inside the loan service?

00:03:43.370 --> 00:03:46.690
So that's what this point could expression,

00:03:46.690 --> 00:03:47.410
language,

00:03:47.410 --> 00:03:51.880
say's We're going to take a look at even more examples off the point that expression

00:03:51.880 --> 00:03:57.770
language and then you'll have a better picture so so far were able to tell what needs to be

00:03:57.770 --> 00:04:02.750
done when it needs to be done and where it needs to be done.

00:04:02.750 --> 00:04:08.620
There's one last night going to do now is to tell spring that this class is indeed an

00:04:08.620 --> 00:04:13.310
aspect and that you can specify with the following annotation,

00:04:13.310 --> 00:04:20.690
and only when you add the dependencies off the Asper J will you be able to use these

00:04:20.690 --> 00:04:21.550
annotations.

00:04:21.550 --> 00:04:29.950
So here are the classes that I'm talking about and do take a note that spring will also

00:04:29.950 --> 00:04:38.880
send an argument off type joint point with which we can access the class name or the method

00:04:38.880 --> 00:04:41.750
name in this manner.

00:04:41.750 --> 00:04:45.190
And there are set off at the methods,

00:04:45.190 --> 00:04:46.390
which you can use it,

00:04:46.390 --> 00:04:47.650
depending on your need.

00:04:47.650 --> 00:04:55.430
But this is a key object with which you pretty much can get control on the target class are

00:04:55.430 --> 00:04:57.350
the target object when you run the program,

00:04:57.350 --> 00:04:59.390
and that's all there is to it.

00:04:59.390 --> 00:05:02.950
We don't have to configure a proxy object or something of that sort.

00:05:02.950 --> 00:05:09.780
Inside our conflict files That's because everything is going in here.

00:05:09.780 --> 00:05:13.690
Unlike the previous example,

00:05:13.690 --> 00:05:15.730
an insider conflict file.

00:05:15.730 --> 00:05:19.680
All you have to specify are those two beans.

00:05:19.680 --> 00:05:21.500
But in addition to that,

00:05:21.500 --> 00:05:28.260
you have to explicitly enable the aspect j functionality because by default it is disabled

00:05:28.260 --> 00:05:29.250
by spring.

00:05:29.250 --> 00:05:33.090
And once you activate it with this tank,

00:05:33.090 --> 00:05:34.610
by the way,

00:05:34.610 --> 00:05:42.370
in order to use the stag unit to include the following schema locations as well as the

00:05:42.370 --> 00:05:44.870
following names space and again,

00:05:44.870 --> 00:05:49.150
you don't have to deal with all such mess When you're using a Java conflict,

00:05:49.150 --> 00:05:55.200
all you have to do is to add the following annotation to enable the Aspect J.

00:05:55.200 --> 00:06:04.460
Justin Blauser and then you just define the beans in this manner and from our main class,

00:06:04.460 --> 00:06:06.750
we don't have to fetch the proxy object.

00:06:06.750 --> 00:06:13.400
We can just statically fetch the loan service itself because when these files are compiled

00:06:13.400 --> 00:06:16.910
aspect Dick compiler will do the job for us.

00:06:16.910 --> 00:06:24.150
It will try to combine these two these two concerns and create one single class file.

00:06:24.150 --> 00:06:30.840
So the resulting byte code is equal into a class file with all these aspect supplied

00:06:30.840 --> 00:06:36.130
Assassin Plaza and manufacture the loans office.

00:06:36.130 --> 00:06:44.230
It's all that those aspect supplied and just off the court is pretty self explanatory.

00:06:44.230 --> 00:06:46.750
That's on the program and see the result.

00:06:46.750 --> 00:06:50.850
And it worked.

00:06:50.850 --> 00:06:57.330
Let's start executed.

00:06:57.330 --> 00:07:08.290
The program with the Java conflict was on the program and it worked as well.

00:07:08.290 --> 00:07:14.960
Now let us quickly try to revisit all the terminology is in world in naval P so that down

00:07:14.960 --> 00:07:17.530
the line it would be easier for you to understand.

00:07:17.530 --> 00:07:21.610
And it will become much easier for me to explain the GOP.

00:07:21.610 --> 00:07:31.100
So all these places where we can apply the aspect are called joint points.

00:07:31.100 --> 00:07:35.070
So this is a joint point.

00:07:35.070 --> 00:07:42.070
This is a joint point and in case off aspect J there many other joint points which can be

00:07:42.070 --> 00:07:48.420
utilized in case offspring envelop because of the method it follows to apply the aspect

00:07:48.420 --> 00:07:54.730
which is in the run time were restricted toe have only method executions as a joint points

00:07:54.730 --> 00:07:54.730
.

00:07:54.730 --> 00:07:58.360
But in case off aspect J since the aspect are applied,

00:07:58.360 --> 00:08:03.140
are the weaving operation happens during the compile time?

00:08:03.140 --> 00:08:08.000
We can now have various different joint points like matter execution,

00:08:08.000 --> 00:08:11.960
constructor execution During the time the object gets created,

00:08:11.960 --> 00:08:20.560
etcetera now moving on inside or aspect file your specifying what needs to be done.

00:08:20.560 --> 00:08:24.860
And this is called an ad wise in the terms off able p.

00:08:24.860 --> 00:08:25.760
Well,

00:08:25.760 --> 00:08:26.300
actually,

00:08:26.300 --> 00:08:33.650
the combination off what needs to be done and when it needs to be done together called and

00:08:33.650 --> 00:08:40.980
ed wise and the expression language which tells where these aspects needs to be applied is

00:08:40.980 --> 00:08:42.870
called a point cut.

00:08:42.870 --> 00:08:49.420
And all this together it's called an aspect and the process off.

00:08:49.420 --> 00:08:57.100
Applying these aspect our advisors on the joint point he is called a leading operation in

00:08:57.100 --> 00:09:02.560
case offspring envelop the weaving operation happens during the run time in case off aspect

00:09:02.560 --> 00:09:06.350
J the living operation happens during the compile time.

00:09:06.350 --> 00:09:07.060
Okay,

00:09:07.060 --> 00:09:08.140
that's all for now,

00:09:08.140 --> 00:09:09.380
I hope it makes sense.

00:09:09.380 --> 00:09:11.010
Will continue from next video.

00:09:11.010 --> 00:09:12.150
See you soon.

