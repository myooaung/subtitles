WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.140
spring containable manage multiple beans,

00:00:03.140 --> 00:00:06.950
and each bean may or may not have been it mattered associate ID.

00:00:06.950 --> 00:00:08.250
But regardless,

00:00:08.250 --> 00:00:10.860
office for being has an In it matter or not,

00:00:10.860 --> 00:00:16.660
there might be certain scenarios where you might want execute a common piece off code for

00:00:16.660 --> 00:00:17.750
each and every bean.

00:00:17.750 --> 00:00:19.410
Before there,

00:00:19.410 --> 00:00:25.340
innit Matter is called and another piece off court that they'll be executed after their

00:00:25.340 --> 00:00:27.080
innit method is executed.

00:00:27.080 --> 00:00:27.630
Well,

00:00:27.630 --> 00:00:33.360
Spring will give us that opportunity with an interface called Being Post Processor.

00:00:33.360 --> 00:00:36.950
Let us go to the Eclipse workspace and explored the same.

00:00:36.950 --> 00:00:43.690
So here we have this over conflict file the Java file,

00:00:43.690 --> 00:00:46.310
and this is similar to the previous example.

00:00:46.310 --> 00:00:47.550
Nothing different.

00:00:47.550 --> 00:00:53.930
We don't have a couple of things to inject the dependencies and in a 10 destroy method as

00:00:53.930 --> 00:00:54.250
well.

00:00:54.250 --> 00:00:58.450
But this time I have no into just another being,

00:00:58.450 --> 00:01:02.050
and even it does have the in it and destroy method.

00:01:02.050 --> 00:01:09.050
And I'm trying to display some messages to signify that the messages coming from this bean

00:01:09.050 --> 00:01:11.450
and in or convict file.

00:01:11.450 --> 00:01:13.650
As you would expect,

00:01:13.650 --> 00:01:19.200
we now have defined those two beans along with their dependencies.

00:01:19.200 --> 00:01:20.820
Along with that,

00:01:20.820 --> 00:01:26.850
we also defined this couple off attributes in here in it and destroy methods.

00:01:26.850 --> 00:01:33.160
Now let us take a look at how we can introduce a common piece off code that will be

00:01:33.160 --> 00:01:34.740
executed Before then.

00:01:34.740 --> 00:01:36.610
It mattered off each and every bean,

00:01:36.610 --> 00:01:40.470
and after Thean it method will get executed.

00:01:40.470 --> 00:01:42.450
It is how you would do it.

00:01:42.450 --> 00:01:47.600
You just have to create a class that implements the being post Prosser interface.

00:01:47.600 --> 00:01:50.260
And if you take a look at what's inside it,

00:01:50.260 --> 00:01:58.000
all it has is couple off default method default method in interfaces is a feature

00:01:58.000 --> 00:02:00.090
introduced in Java Abortion eight.

00:02:00.090 --> 00:02:02.490
If you're curious as to how it works,

00:02:02.490 --> 00:02:04.090
then you can take a look at my job.

00:02:04.090 --> 00:02:04.470
Of course,

00:02:04.470 --> 00:02:05.290
on the same,

00:02:05.290 --> 00:02:07.650
we talked about it in detail.

00:02:07.650 --> 00:02:09.280
But even if you don't know,

00:02:09.280 --> 00:02:10.250
that's fine.

00:02:10.250 --> 00:02:19.700
So all I have done here is we have provided the behavior for those two methods by default.

00:02:19.700 --> 00:02:28.140
If you notice these methods are accepting couple of perimeters and these perimeters will be

00:02:28.140 --> 00:02:30.350
sent by the spring container.

00:02:30.350 --> 00:02:34.070
One is the being itself and the other is the name of the bean.

00:02:34.070 --> 00:02:35.410
And in here,

00:02:35.410 --> 00:02:39.800
the default code would just simply return the being as it is.

00:02:39.800 --> 00:02:43.800
But if you override it like we did here,

00:02:43.800 --> 00:02:45.960
then you can all right,

00:02:45.960 --> 00:02:50.810
the behavior and return an object that's unpleasant.

00:02:50.810 --> 00:02:57.590
So this method will be called before the end admitted for each and every being in the

00:02:57.590 --> 00:02:58.260
container,

00:02:58.260 --> 00:03:03.220
and this will be called after the indictment that gets executed.

00:03:03.220 --> 00:03:05.200
Let's go to our main program.

00:03:05.200 --> 00:03:08.300
Let's run the program pretty straightforward.

00:03:08.300 --> 00:03:19.300
If it ignored off the sequins off action that has that took place initially,

00:03:19.300 --> 00:03:24.310
the constructor injection for this over conflict bean has taken place.

00:03:24.310 --> 00:03:29.710
And then the center injection for the same object before,

00:03:29.710 --> 00:03:29.980
innit?

00:03:29.980 --> 00:03:30.450
Method?

00:03:30.450 --> 00:03:34.080
So the call has gone to the bean,

00:03:34.080 --> 00:03:35.600
both Prosser Bean.

00:03:35.600 --> 00:03:39.950
And so we're able to see this message,

00:03:39.950 --> 00:03:42.000
and after that,

00:03:42.000 --> 00:03:46.650
then admitted off civil conflict was called.

00:03:46.650 --> 00:03:48.570
And after that,

00:03:48.570 --> 00:03:49.850
as you would expect,

00:03:49.850 --> 00:03:53.010
this method will be involved.

00:03:53.010 --> 00:04:00.020
And so we're able to see this message and same set off event would occur for each and every

00:04:00.020 --> 00:04:00.550
bean.

00:04:00.550 --> 00:04:05.800
And so we're able to see the same for the another sample being that we had created.

00:04:05.800 --> 00:04:07.130
After that,

00:04:07.130 --> 00:04:10.760
the beans are available for us to use in the application.

00:04:10.760 --> 00:04:15.580
And here I'm just trying to simply display message.

00:04:15.580 --> 00:04:18.250
This message is coming from the main class.

00:04:18.250 --> 00:04:20.450
And then after that,

00:04:20.450 --> 00:04:23.170
once we close on the context,

00:04:23.170 --> 00:04:27.250
the destroy method off put the beans are called.

00:04:27.250 --> 00:04:31.150
And finally the container will also destroy the objects.

00:04:31.150 --> 00:04:36.820
So it's as simple as that now.

00:04:36.820 --> 00:04:38.170
The $1,000,000 question.

00:04:38.170 --> 00:04:40.540
When do we actually want to use this feature?

00:04:40.540 --> 00:04:41.250
Well,

00:04:41.250 --> 00:04:42.570
in my experience,

00:04:42.570 --> 00:04:43.630
I've never used it,

00:04:43.630 --> 00:04:45.700
and I doubt if I have a bill.

00:04:45.700 --> 00:04:51.550
But this mechanism is utilized by the spring itself to provide a severity off features.

00:04:51.550 --> 00:04:56.080
If you go to the documentation offspring in their official website,

00:04:56.080 --> 00:04:57.350
spring dot eyeball,

00:04:57.350 --> 00:05:01.050
and if you search for this interface,

00:05:01.050 --> 00:05:04.860
you would notice that it has a lot off implementations already.

00:05:04.860 --> 00:05:14.040
So these air are part off the spring libraries that will be using indirectly in our coming

00:05:14.040 --> 00:05:14.770
projects.

00:05:14.770 --> 00:05:18.100
So although we won't be using it explicitly,

00:05:18.100 --> 00:05:21.450
Spring is actually using that feature for itself.

00:05:21.450 --> 00:05:23.090
But Justin guests,

00:05:23.090 --> 00:05:28.510
if you have something that you wanted to perform before each and every beans in it mattered

00:05:28.510 --> 00:05:28.510
,

00:05:28.510 --> 00:05:34.210
then you have the provision in to make use off this feature.

00:05:34.210 --> 00:05:35.950
Nobody is going to stop you.

00:05:35.950 --> 00:05:42.050
Let's quickly take a look at the Java conflict as well.

00:05:42.050 --> 00:05:45.750
And here is the cord pretty straightforward,

00:05:45.750 --> 00:05:47.850
nothing really different.

00:05:47.850 --> 00:05:53.740
The only difference between this example in the previous example in terms Off Java conflict

00:05:53.740 --> 00:05:59.490
is that I have now introduced this new being in our Java conflict.

00:05:59.490 --> 00:06:01.100
It's as simple as that,

00:06:01.100 --> 00:06:03.190
and from our main method.

00:06:03.190 --> 00:06:07.000
Let's run the program and see the result.

00:06:07.000 --> 00:06:09.870
And by the way,

00:06:09.870 --> 00:06:17.550
I'm also going to make this project available for you to download so that it can take a

00:06:17.550 --> 00:06:20.210
look at the output and play with it.

00:06:20.210 --> 00:06:21.750
So here we have the output,

00:06:21.750 --> 00:06:24.050
and it worked pretty well.

00:06:24.050 --> 00:06:25.010
Also,

00:06:25.010 --> 00:06:30.960
I want to quickly point out that in case if you have in the in it and destroy mattered for

00:06:30.960 --> 00:06:34.600
a lot of beans and they're having the same name,

00:06:34.600 --> 00:06:44.680
then you can actually take this out from the bean tag and then instead make it part off the

00:06:44.680 --> 00:06:46.350
bean stag itself,

00:06:46.350 --> 00:06:49.950
just as you're seeing here,

00:06:49.950 --> 00:06:53.250
and this will work as usual,

00:06:53.250 --> 00:06:58.610
but do make sure that the method names are consistent across all the beans wherever you're

00:06:58.610 --> 00:06:59.850
using these methods.

00:06:59.850 --> 00:07:06.100
So let's see if things would work and off course.

00:07:06.100 --> 00:07:17.750
Let's change this back to XML and run the program or that we seem to be having some ever.

00:07:17.750 --> 00:07:28.790
Okay,

00:07:28.790 --> 00:07:34.360
I believe the attribute name supposed to be default happen.

00:07:34.360 --> 00:07:35.350
And it mattered.

00:07:35.350 --> 00:07:39.450
And same is applicable here as well.

00:07:39.450 --> 00:07:42.230
And in kids,

00:07:42.230 --> 00:07:42.730
if you want to.

00:07:42.730 --> 00:07:43.320
All right,

00:07:43.320 --> 00:07:48.440
These You always have the freedom to do so in the bean tag.

00:07:48.440 --> 00:07:49.480
No,

00:07:49.480 --> 00:07:51.910
let's run the program and see the result.

00:07:51.910 --> 00:07:56.650
And this time,

00:07:56.650 --> 00:07:59.850
it worked Well,

00:07:59.850 --> 00:08:01.030
All right,

00:08:01.030 --> 00:08:01.950
I'll see you soon.

