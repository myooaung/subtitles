WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.460
when you have multiple conflict files,

00:00:02.460 --> 00:00:05.210
then there is a possibility off duplicate code.

00:00:05.210 --> 00:00:06.570
For example,

00:00:06.570 --> 00:00:08.250
in our conflict files,

00:00:08.250 --> 00:00:14.750
the only place where profile should come into picture is for this particular bean.

00:00:14.750 --> 00:00:19.860
The rest of the court would remain common in both this conflict files.

00:00:19.860 --> 00:00:21.090
Fortunately,

00:00:21.090 --> 00:00:26.830
we will be able to solve this problem by using the profile annotation at matter level so

00:00:26.830 --> 00:00:29.660
that we don't have to create multiple conflict files.

00:00:29.660 --> 00:00:31.650
We can instead use just one.

00:00:31.650 --> 00:00:34.050
And here's a file for that.

00:00:34.050 --> 00:00:41.650
So I have no copied both these methods from both these files to one common conflict file

00:00:41.650 --> 00:00:47.950
and have provided this annotation profile for both these methods.

00:00:47.950 --> 00:00:59.400
Hold it.

00:00:59.400 --> 00:01:00.410
Here we have it.

00:01:00.410 --> 00:01:05.800
So now all the court would remain common no matter which enrollment on what you run the

00:01:05.800 --> 00:01:06.650
application.

00:01:06.650 --> 00:01:11.990
But the only thing that would differ are the beans that are annotated with profile.

00:01:11.990 --> 00:01:18.650
If you're on Devon Rome and then this being would be activated or if you're on production,

00:01:18.650 --> 00:01:21.130
then this would be activated.

00:01:21.130 --> 00:01:22.580
But do take a note.

00:01:22.580 --> 00:01:25.750
Since we have these two matters in the same conflict file,

00:01:25.750 --> 00:01:33.070
we cannot have the freedom to use the same name as part of the method name because that's

00:01:33.070 --> 00:01:34.690
how Java is designed.

00:01:34.690 --> 00:01:37.590
You can't have two methods with the same name,

00:01:37.590 --> 00:01:41.150
but we can give the same name to these beans.

00:01:41.150 --> 00:01:42.420
So hey,

00:01:42.420 --> 00:01:44.760
we named this as data source.

00:01:44.760 --> 00:01:48.250
Same thing went in here and in our cord.

00:01:48.250 --> 00:01:53.950
We don't have to bother about the name because it is going to be consistent.

00:01:53.950 --> 00:01:56.140
And from our main logic,

00:01:56.140 --> 00:02:00.250
I don't have to now scan the package.

00:02:00.250 --> 00:02:01.790
Instead,

00:02:01.790 --> 00:02:06.150
I can just errantly specify the name of the file,

00:02:06.150 --> 00:02:09.580
just as we did before in our earlier examples.

00:02:09.580 --> 00:02:15.080
So this is going to be Java conflict art class now,

00:02:15.080 --> 00:02:16.750
depending on the profile,

00:02:16.750 --> 00:02:20.340
this is development.

00:02:20.340 --> 00:02:21.350
In this case,

00:02:21.350 --> 00:02:33.450
this should be my ask your and if you change the profile of production hard,

00:02:33.450 --> 00:02:34.800
if you don't provide anything,

00:02:34.800 --> 00:02:36.250
that would be production.

00:02:36.250 --> 00:02:51.380
And there you haven't had worked so profess can be applicable at method level as well,

00:02:51.380 --> 00:02:57.030
so that you can now have only one single Java conflict that takes care of everything.

00:02:57.030 --> 00:03:00.010
But it might bring some additional complexity in your file.

00:03:00.010 --> 00:03:03.020
And you also need to take care off these naming conventions.

00:03:03.020 --> 00:03:05.150
And if you take care off all that,

00:03:05.150 --> 00:03:07.900
then it's fine to go with this approach.

00:03:07.900 --> 00:03:09.000
All right,

00:03:09.000 --> 00:03:09.950
I'll see you soon

