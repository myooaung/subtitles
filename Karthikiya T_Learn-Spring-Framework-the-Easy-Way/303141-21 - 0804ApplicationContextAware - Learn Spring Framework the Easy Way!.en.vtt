WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.090
OK,

00:00:02.090 --> 00:00:02.650
in this video,

00:00:02.650 --> 00:00:05.810
we're going to talk about one of the key ever interfaces,

00:00:05.810 --> 00:00:08.020
which is the application context There,

00:00:08.020 --> 00:00:08.450
there,

00:00:08.450 --> 00:00:13.430
this Villela was to get access to the application context object itself,

00:00:13.430 --> 00:00:19.150
which will be injected by the container using settle injection just as you see in here.

00:00:19.150 --> 00:00:24.970
And then we're trying to do something in here with that object and for the sake of this

00:00:24.970 --> 00:00:27.770
demonstration have actually created another bean.

00:00:27.770 --> 00:00:33.760
I would just simply has one method and that's just simply going to display the following

00:00:33.760 --> 00:00:41.350
message and from our sample being we get access to that being isn't the application object

00:00:41.350 --> 00:00:48.970
that is injected by the container and we're trying to call its method Hasn't Blezard apart

00:00:48.970 --> 00:00:49.730
from that,

00:00:49.730 --> 00:00:53.700
the application context object also has set off other methods.

00:00:53.700 --> 00:00:57.250
I'm trying to use a couple of them in here.

00:00:57.250 --> 00:00:58.810
Well,

00:00:58.810 --> 00:01:02.980
this will display what is the default class loader.

00:01:02.980 --> 00:01:04.630
In our case,

00:01:04.630 --> 00:01:09.330
this is going to be the Java's default class loader and ah,

00:01:09.330 --> 00:01:13.150
Spring uses it internally to load the class files etcetera.

00:01:13.150 --> 00:01:21.050
And here we're trying to display the enrollment and this includes profiles that we had set

00:01:21.050 --> 00:01:21.850
etcetera.

00:01:21.850 --> 00:01:24.960
We're going to talk about profiling and all incoming videos,

00:01:24.960 --> 00:01:25.550
for sure.

00:01:25.550 --> 00:01:27.200
And similarly,

00:01:27.200 --> 00:01:28.990
we got several other methods,

00:01:28.990 --> 00:01:31.950
which you can just simply take a look at.

00:01:31.950 --> 00:01:37.590
Just can't through all these methods and read the description.

00:01:37.590 --> 00:01:43.050
The documentation is available right here and get a sense of what each method is doing.

00:01:43.050 --> 00:01:49.240
And if you notice using the application context object,

00:01:49.240 --> 00:01:53.440
you can pretty much get it off All the apparent professors that we had talked about so far

00:01:53.440 --> 00:01:53.440
.

00:01:53.440 --> 00:01:54.550
For example,

00:01:54.550 --> 00:02:02.540
you can even get access to a resource in the file system or by using a Ural or even by

00:02:02.540 --> 00:02:07.520
class path by calling this method get resource,

00:02:07.520 --> 00:02:09.950
and then he would provide the location of the resource.

00:02:09.950 --> 00:02:12.450
So it's a pretty powerful object,

00:02:12.450 --> 00:02:17.960
and you can certainly livers the functionality as you wish.

00:02:17.960 --> 00:02:22.830
So by using this method,

00:02:22.830 --> 00:02:23.880
get parent,

00:02:23.880 --> 00:02:26.070
you'll be able to get dependent.

00:02:26.070 --> 00:02:27.110
Context object.

00:02:27.110 --> 00:02:28.150
In our case,

00:02:28.150 --> 00:02:29.760
there is none.

00:02:29.760 --> 00:02:32.100
Similarly,

00:02:32.100 --> 00:02:34.790
can also get the parent bean factory.

00:02:34.790 --> 00:02:39.930
All right,

00:02:39.930 --> 00:02:40.950
let's on the program,

00:02:40.950 --> 00:02:47.250
and this works pretty well.

00:02:47.250 --> 00:02:54.750
Message from Another bean and other stuff that we're trying to print.

00:02:54.750 --> 00:03:07.400
Also note that it's not a good practice to actually try to get access toe being by using an

00:03:07.400 --> 00:03:09.550
application context in this manner.

00:03:09.550 --> 00:03:16.220
The reason is this may actually destroy the purpose off purpose off introducing spring to

00:03:16.220 --> 00:03:17.890
avoid tight coupling.

00:03:17.890 --> 00:03:19.260
So in here,

00:03:19.260 --> 00:03:23.150
if you observe this being is asking for its dependence is.

00:03:23.150 --> 00:03:26.950
But the dependence is not being injected by the container,

00:03:26.950 --> 00:03:34.040
so usually it is a bad practice to try to ask for dependence is from your being in this

00:03:34.040 --> 00:03:35.990
manner or in other words,

00:03:35.990 --> 00:03:38.110
you should try to avoid dependency.

00:03:38.110 --> 00:03:39.750
Look up from your being.

00:03:39.750 --> 00:03:44.130
Whatever we're trying to do in here is called a dependency.

00:03:44.130 --> 00:03:46.490
Look up and we'll try to award that.

00:03:46.490 --> 00:03:51.160
This is just a quick example on the application context of air.

00:03:51.160 --> 00:03:56.300
And this example doesn't really demonstrate the usefulness off the application context

00:03:56.300 --> 00:03:58.150
being injected as a dependency.

00:03:58.150 --> 00:03:59.760
A better example off.

00:03:59.760 --> 00:04:04.190
This would be demonstrated once we talk about the bean scope.

00:04:04.190 --> 00:04:06.710
So you need to hold on until that point,

00:04:06.710 --> 00:04:08.250
all right,

00:04:08.250 --> 00:04:09.780
How does he assume

