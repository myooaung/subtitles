WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.940
So the basic problem with custom editors is that Spring will create an instance off this

00:00:04.940 --> 00:00:09.340
editor every time we need to come out the string to the server conflict.

00:00:09.340 --> 00:00:14.030
And in here Spring is actually taken care off instead initiating the editor,

00:00:14.030 --> 00:00:15.110
not we.

00:00:15.110 --> 00:00:19.750
And so spring does not know what needs to be injected into this constructor,

00:00:19.750 --> 00:00:24.350
So just simply does not expect a parametric constructor.

00:00:24.350 --> 00:00:28.450
All it needs is a default constructor to create an instance.

00:00:28.450 --> 00:00:31.690
But now our requirement is different.

00:00:31.690 --> 00:00:37.610
We want to be ableto inject a constructor perimeter as it is useful in our code.

00:00:37.610 --> 00:00:41.320
So this time we have to follow a different approach.

00:00:41.320 --> 00:00:48.320
Somehow we need to get control on the instance ation process off the editor bean and

00:00:48.320 --> 00:00:53.090
Sprinkle letters have that control with this interface.

00:00:53.090 --> 00:00:55.150
Property editor Registrar.

00:00:55.150 --> 00:00:57.620
So we're going to create a class.

00:00:57.620 --> 00:00:59.490
You can give any name off your choice,

00:00:59.490 --> 00:01:04.620
but it has to implement the property editor registrar and you have to provide

00:01:04.620 --> 00:01:07.040
implementation for this method.

00:01:07.040 --> 00:01:08.370
And inside this,

00:01:08.370 --> 00:01:11.850
you're just simply create an instance off the editor,

00:01:11.850 --> 00:01:15.230
bypassing the necessary constructor arguments.

00:01:15.230 --> 00:01:16.000
In this case,

00:01:16.000 --> 00:01:21.170
I want to pass the secure string which is useful in the editor bean.

00:01:21.170 --> 00:01:23.190
And along with that,

00:01:23.190 --> 00:01:26.650
I also specified the destination type,

00:01:26.650 --> 00:01:30.050
just simple as that.

00:01:30.050 --> 00:01:31.520
And ultimately,

00:01:31.520 --> 00:01:32.010
this,

00:01:32.010 --> 00:01:32.500
too,

00:01:32.500 --> 00:01:39.070
is to go as para meters toe this mattered register custom editor that belonged to the

00:01:39.070 --> 00:01:39.750
registry.

00:01:39.750 --> 00:01:45.620
So this registry object is kind of like a registry service where you can register all the

00:01:45.620 --> 00:01:46.650
custom editors,

00:01:46.650 --> 00:01:49.450
which is exactly what we're trying to do in here.

00:01:49.450 --> 00:01:52.390
An inner conflict file.

00:01:52.390 --> 00:01:54.700
We will get it off the customer.

00:01:54.700 --> 00:01:55.800
It is property.

00:01:55.800 --> 00:02:03.150
But to use the property editor registers property that belong to this class,

00:02:03.150 --> 00:02:08.130
and this is going to accept a list off beans.

00:02:08.130 --> 00:02:15.080
And these would point to the registrar class that we had just introduced.

00:02:15.080 --> 00:02:16.070
So ultimately,

00:02:16.070 --> 00:02:17.170
with this approach,

00:02:17.170 --> 00:02:18.400
we have control over what?

00:02:18.400 --> 00:02:22.450
The instant creation process off the editor Bean.

00:02:22.450 --> 00:02:27.050
And so we're able to pass the arguments to this constructor?

00:02:27.050 --> 00:02:27.730
No,

00:02:27.730 --> 00:02:30.050
that's on the program and say the result.

00:02:30.050 --> 00:02:32.670
Sure enough,

00:02:32.670 --> 00:02:33.450
it worked,

00:02:33.450 --> 00:02:38.540
and the password also includes That's secure string.

00:02:38.540 --> 00:02:41.430
All right,

00:02:41.430 --> 00:02:42.270
I'll see you soon

