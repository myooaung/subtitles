WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.180
So here is the first take of it from our example.

00:00:03.180 --> 00:00:05.850
Nowhere in our application logic.

00:00:05.850 --> 00:00:11.850
Are we concerned about how to connect to the server to transfer the data or to retrieve?

00:00:11.850 --> 00:00:19.200
We're just simply going to say connect and everything will be taken care by another entity

00:00:19.200 --> 00:00:20.440
or another bean.

00:00:20.440 --> 00:00:21.850
And in fact,

00:00:21.850 --> 00:00:22.540
no,

00:00:22.540 --> 00:00:23.630
very no class.

00:00:23.630 --> 00:00:28.970
Are we mentioning the connection para meters like we didn't mention toe which so what do we

00:00:28.970 --> 00:00:30.100
want to connect to?

00:00:30.100 --> 00:00:31.280
He is in good check on.

00:00:31.280 --> 00:00:34.220
Do we want to connect to what are the conflict paramilitaries,

00:00:34.220 --> 00:00:34.950
etcetera.

00:00:34.950 --> 00:00:42.300
It would all be injected by the spring using constructor injection just as you see in here

00:00:42.300 --> 00:00:42.300
.

00:00:42.300 --> 00:00:48.340
And in fact we're not boned the one specific implementation or another word.

00:00:48.340 --> 00:00:52.260
This class is not tightly coupled to any specific implementation.

00:00:52.260 --> 00:00:58.080
We have the flexibility to switch to other alternative implementations without having to

00:00:58.080 --> 00:01:00.080
change a single line off court.

00:01:00.080 --> 00:01:01.350
In our logic,

00:01:01.350 --> 00:01:05.600
because whatever the implementation that would like to use,

00:01:05.600 --> 00:01:09.260
we can just simply inject it using spring.

00:01:09.260 --> 00:01:12.780
Okay,

00:01:12.780 --> 00:01:14.140
another take ever use.

00:01:14.140 --> 00:01:19.070
You may be having a question as to why do we need a non parametric constructor when you

00:01:19.070 --> 00:01:23.420
have already defined a constructor where the answer is pretty simple.

00:01:23.420 --> 00:01:29.390
It's always a good practice to have an empty constructor just so that you can create an

00:01:29.390 --> 00:01:32.150
instance without having to pass para meters.

00:01:32.150 --> 00:01:32.770
I mean,

00:01:32.770 --> 00:01:37.140
there could be certain methods in this class which has nothing to do with the secure store

00:01:37.140 --> 00:01:37.750
access.

00:01:37.750 --> 00:01:40.460
Then why would you want to take a four to create this,

00:01:40.460 --> 00:01:44.180
accused your axles and passed it as an argument instead.

00:01:44.180 --> 00:01:47.840
If you have this default constructor without any para meters,

00:01:47.840 --> 00:01:50.980
you can create a plane object and access those methods.

00:01:50.980 --> 00:01:51.770
For example,

00:01:51.770 --> 00:01:53.150
if you go to the Java conflict,

00:01:53.150 --> 00:01:59.550
you can't just create an object without having to pass an argument.

00:01:59.550 --> 00:02:04.050
If there was no default constructor,

00:02:04.050 --> 00:02:09.090
so you would see an ever in here that's undue.

00:02:09.090 --> 00:02:17.730
And also make sure whichever the constructor method that you're going to use for dependents

00:02:17.730 --> 00:02:18.580
injection,

00:02:18.580 --> 00:02:24.270
make sure that it is set to public unless you have a good reason to change it to something

00:02:24.270 --> 00:02:24.750
else.

00:02:24.750 --> 00:02:28.290
The reason is if you go to the conflict file,

00:02:28.290 --> 00:02:34.410
were trying to pass this argument to a constructor off a class that belonged to another

00:02:34.410 --> 00:02:35.150
project.

00:02:35.150 --> 00:02:36.740
If the constructor off.

00:02:36.740 --> 00:02:40.150
It was not public.

00:02:40.150 --> 00:02:43.050
Then we wouldn't be able to access that constructor.

00:02:43.050 --> 00:02:47.630
Also,

00:02:47.630 --> 00:02:50.930
I want to quickly point out that if you're not finding it user friendly,

00:02:50.930 --> 00:02:56.100
to call a method within the constructor like so you have an alternative way to deal with

00:02:56.100 --> 00:03:01.410
dependents injection when you're using Java conflict and the approach is quite simple.

00:03:01.410 --> 00:03:02.670
Holy have to do.

00:03:02.670 --> 00:03:11.550
It's just send a para meter that is off type.

00:03:11.550 --> 00:03:16.180
Whatever is the type that is being accepted by this constructor.

00:03:16.180 --> 00:03:21.250
It's as simple as that and spring.

00:03:21.250 --> 00:03:30.510
It's modern of to understand that that it has to inject the following bean and everything

00:03:30.510 --> 00:03:31.670
will work as usual.

00:03:31.670 --> 00:03:36.320
Let's run the program and make sure things are working.

00:03:36.320 --> 00:03:37.510
And sure enough,

00:03:37.510 --> 00:03:38.550
it worked.

00:03:38.550 --> 00:03:40.040
All right,

00:03:40.040 --> 00:03:40.940
I'll see you soon.

