WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.620
Okay.

00:00:04.620 --> 00:00:07.370
Now let us take a look at how we can implement a war.

00:00:07.370 --> 00:00:10.750
P programmatically First things first.

00:00:10.750 --> 00:00:16.660
Let us give the dollar per some piece off mind by removing all these crosscutting concerns

00:00:16.660 --> 00:00:21.150
from his code so that he can focus on the business logic.

00:00:21.150 --> 00:00:24.180
But then we have to take care off.

00:00:24.180 --> 00:00:30.560
Moving all those aspect are not case the logging aspect into a different file for that

00:00:30.560 --> 00:00:31.140
purpose.

00:00:31.140 --> 00:00:35.190
I've actually created another file with the following name.

00:00:35.190 --> 00:00:38.010
You can give any name off your choice,

00:00:38.010 --> 00:00:40.440
but we can't just copy the log.

00:00:40.440 --> 00:00:41.200
Best ages,

00:00:41.200 --> 00:00:43.140
as is to this file.

00:00:43.140 --> 00:00:45.330
It just doesn't work in that manner.

00:00:45.330 --> 00:00:50.640
There certain procedure that may to follow to tell spring that we wanted to display log

00:00:50.640 --> 00:00:55.450
messages before an after each one of these methods are called.

00:00:55.450 --> 00:01:01.830
And the way we convey spring is by using the interfaces that spring is ever off.

00:01:01.830 --> 00:01:03.950
And depending on your needs,

00:01:03.950 --> 00:01:07.350
we had to choose one or more of those interfaces.

00:01:07.350 --> 00:01:08.060
You know,

00:01:08.060 --> 00:01:14.000
case I wanted to displace some messages before each one of these methods get executed.

00:01:14.000 --> 00:01:18.250
And after each one of these methods will get executed.

00:01:18.250 --> 00:01:26.590
And the inter offenses that I need are these method before advice and after returning

00:01:26.590 --> 00:01:30.380
advice that will also provide the implementation methods.

00:01:30.380 --> 00:01:31.850
And here are day,

00:01:31.850 --> 00:01:39.190
the before method would belong to the method before advise and after turning would belong

00:01:39.190 --> 00:01:41.450
to the after returning add wise.

00:01:41.450 --> 00:01:47.660
This method would be called by spring before each one of these methods will get executed

00:01:47.660 --> 00:01:53.080
and this method will be called after each one of these methods will get executed.

00:01:53.080 --> 00:01:54.150
Well,

00:01:54.150 --> 00:01:55.110
as off now,

00:01:55.110 --> 00:02:00.400
we didn't create any kind of relation between these two entities were going to be doing it

00:02:00.400 --> 00:02:02.450
without conflict while in a while.

00:02:02.450 --> 00:02:06.650
But let us try to understand discord in here.

00:02:06.650 --> 00:02:12.830
So what I'm trying to do in these methods is I'm trying to print a message.

00:02:12.830 --> 00:02:16.150
But the message is not going to be same every time.

00:02:16.150 --> 00:02:21.600
The message would differ depending on the class and the method that is being called.

00:02:21.600 --> 00:02:22.880
For example,

00:02:22.880 --> 00:02:29.070
if you want to print a log message for this method issue alone that belonged to loan

00:02:29.070 --> 00:02:29.680
service,

00:02:29.680 --> 00:02:39.070
then we should be able to see a log message with the loan service class name and the

00:02:39.070 --> 00:02:42.250
mattered issue alone for this very purpose.

00:02:42.250 --> 00:02:48.010
Whenever spring caused this method Spring would also send the falling arguments.

00:02:48.010 --> 00:02:54.250
The method object would represent the mattered that is being executed.

00:02:54.250 --> 00:02:58.550
The target would correspond to the target object.

00:02:58.550 --> 00:03:00.110
In our case,

00:03:00.110 --> 00:03:02.650
it's going to be the loans of this class.

00:03:02.650 --> 00:03:04.100
And using that object,

00:03:04.100 --> 00:03:10.550
I'm ableto display the class name and using the method object I'm able to display the

00:03:10.550 --> 00:03:11.440
method name.

00:03:11.440 --> 00:03:12.810
In addition to that,

00:03:12.810 --> 00:03:17.650
if you'd like to get access to the arguments that are passed to these methods,

00:03:17.650 --> 00:03:20.740
you can always access them with this.

00:03:20.740 --> 00:03:21.140
Eddie,

00:03:21.140 --> 00:03:23.090
if they're 10 arguments,

00:03:23.090 --> 00:03:29.180
you can access his specific argument within Head Index Assassin Plaza.

00:03:29.180 --> 00:03:34.830
And we have pretty much the same stuff going in here.

00:03:34.830 --> 00:03:43.250
Except this is exit because this will get executed after these methods will get executed.

00:03:43.250 --> 00:03:44.250
Now,

00:03:44.250 --> 00:03:50.250
the next thing that we need to do is to tell spring to create a proxy object by combining

00:03:50.250 --> 00:03:57.110
these two objects and for that were to first define couple of beans and each would

00:03:57.110 --> 00:04:00.170
correspond to each one of these classes,

00:04:00.170 --> 00:04:02.660
and so have them in here.

00:04:02.660 --> 00:04:03.950
Just as you see,

00:04:03.950 --> 00:04:09.630
we have one for loan service and the other to handle the aspect.

00:04:09.630 --> 00:04:13.750
And in addition to that I'm going to define another bean,

00:04:13.750 --> 00:04:17.900
which is going to be the proxy object off loan service.

00:04:17.900 --> 00:04:19.550
And here it is.

00:04:19.550 --> 00:04:24.550
You have to define the bean proxy factor being,

00:04:24.550 --> 00:04:30.100
and this would accept couple off properties using cetera Injection.

00:04:30.100 --> 00:04:33.870
The first property is the target class itself,

00:04:33.870 --> 00:04:37.670
so we should be pointing to the target class.

00:04:37.670 --> 00:04:38.140
In our case,

00:04:38.140 --> 00:04:39.950
it's going to be the loan service.

00:04:39.950 --> 00:04:42.950
And so sending is specified in here,

00:04:42.950 --> 00:04:47.830
and the second property would point to thes aspect.

00:04:47.830 --> 00:04:48.440
In our case,

00:04:48.440 --> 00:04:49.890
we just have one aspect,

00:04:49.890 --> 00:04:52.880
and that is this.

00:04:52.880 --> 00:04:56.750
And for that,

00:04:56.750 --> 00:05:00.580
we're going to populate the following property,

00:05:00.580 --> 00:05:02.180
which is a list,

00:05:02.180 --> 00:05:04.450
and as an element in that list,

00:05:04.450 --> 00:05:09.340
we're going to be including the following being similarly,

00:05:09.340 --> 00:05:13.450
if you have another being or another aspect,

00:05:13.450 --> 00:05:21.210
then you can just define that being in here and then added as a value to the list off

00:05:21.210 --> 00:05:22.330
interceptors.

00:05:22.330 --> 00:05:23.420
For now,

00:05:23.420 --> 00:05:24.920
to keep things simple,

00:05:24.920 --> 00:05:27.050
we just have one single interceptor,

00:05:27.050 --> 00:05:29.570
but you can have as many as you wish.

00:05:29.570 --> 00:05:30.320
For example,

00:05:30.320 --> 00:05:34.460
that's that you wanted to create another class like this,

00:05:34.460 --> 00:05:40.170
and that's going to deal with transaction so you would basically have same methods,

00:05:40.170 --> 00:05:46.210
but maybe wanted to begin the transaction the before method and commit the transaction in

00:05:46.210 --> 00:05:47.300
the after method.

00:05:47.300 --> 00:05:54.150
Something of that sort and also defined the proxy bean in this manner.

00:05:54.150 --> 00:05:55.240
You're done.

00:05:55.240 --> 00:05:56.650
That's all there is to it.

00:05:56.650 --> 00:05:58.730
But from our main class,

00:05:58.730 --> 00:06:02.950
we're not actually going to ask for the loan service being,

00:06:02.950 --> 00:06:07.350
but rather we're going to ask for the proxy bean off lawn service.

00:06:07.350 --> 00:06:11.050
And here is a code that would illustrate the same.

00:06:11.050 --> 00:06:15.520
I'm no trying to get access to the proxy bean,

00:06:15.520 --> 00:06:17.370
our proxy instance,

00:06:17.370 --> 00:06:21.370
which is going to be off type loan service.

00:06:21.370 --> 00:06:23.970
And this type condition is possible because,

00:06:23.970 --> 00:06:25.380
as at all the dimension,

00:06:25.380 --> 00:06:31.350
the proxy object is going to extend the behavior off the target object.

00:06:31.350 --> 00:06:33.150
So in our case,

00:06:33.150 --> 00:06:39.750
the loans office proxy is the extended version or the child object of the loan service.

00:06:39.750 --> 00:06:44.480
And once we get hold off that particular instance,

00:06:44.480 --> 00:06:46.250
we can call it smelt it.

00:06:46.250 --> 00:06:51.950
So we're able to now call the methods that are part off the loan service.

00:06:51.950 --> 00:06:53.870
But behind the scenes,

00:06:53.870 --> 00:06:57.150
the call wound directly land on these methods.

00:06:57.150 --> 00:07:00.500
It's going to land on the proxy object,

00:07:00.500 --> 00:07:04.550
which will have certain logic that will ultimately be here.

00:07:04.550 --> 00:07:08.250
Has the log messages are right here.

00:07:08.250 --> 00:07:09.390
So,

00:07:09.390 --> 00:07:10.470
for instance,

00:07:10.470 --> 00:07:14.350
the matter would look something like this.

00:07:14.350 --> 00:07:16.090
Let me just,

00:07:16.090 --> 00:07:16.450
uh,

00:07:16.450 --> 00:07:36.850
copy this instruction before method and then parent object dot issue alone.

00:07:36.850 --> 00:07:39.920
And then finally,

00:07:39.920 --> 00:07:46.450
it would call the after returning method something off this sort.

00:07:46.450 --> 00:07:48.600
I hope you're getting what I mean to say,

00:07:48.600 --> 00:07:54.070
Let's run the program and see the result.

00:07:54.070 --> 00:07:58.350
And it worked.

00:07:58.350 --> 00:08:02.550
Loan is shoud for the following customer,

00:08:02.550 --> 00:08:07.650
and we've also called the clear Jew method.

00:08:07.650 --> 00:08:10.150
But before each method,

00:08:10.150 --> 00:08:14.210
we have their corresponding log messages.

00:08:14.210 --> 00:08:18.250
So it worked,

00:08:18.250 --> 00:08:21.600
and from Java convict file,

00:08:21.600 --> 00:08:25.250
you would pretty much do the same stuff that you're doing in here.

00:08:25.250 --> 00:08:29.350
We have bought those beans to find,

00:08:29.350 --> 00:08:32.390
and here is a proxy object as well.

00:08:32.390 --> 00:08:37.110
I'm trying to add the interceptors as part off the string,

00:08:37.110 --> 00:08:37.650
Gary.

00:08:37.650 --> 00:08:42.650
And then I'm trying to pass this as an argument to this method.

00:08:42.650 --> 00:08:43.810
Similarly,

00:08:43.810 --> 00:08:47.550
we had also set the target object.

00:08:47.550 --> 00:08:50.650
This would point to the loan service,

00:08:50.650 --> 00:08:51.800
obviously,

00:08:51.800 --> 00:09:02.010
and finally I'm trying to return The proxy object that has tried to run the program is in

00:09:02.010 --> 00:09:03.150
the Java conflict,

00:09:03.150 --> 00:09:06.850
and this should work as well.

00:09:06.850 --> 00:09:12.500
I also know that when you're working with,

00:09:12.500 --> 00:09:13.400
they will be.

00:09:13.400 --> 00:09:17.050
It's better that you're aware of certain terminology is involved.

00:09:17.050 --> 00:09:20.770
We have a video to talk about all those terminologies.

00:09:20.770 --> 00:09:22.450
But just for the time being,

00:09:22.450 --> 00:09:27.850
this class in here is called an aspect.

00:09:27.850 --> 00:09:30.450
Because logging is an aspect,

00:09:30.450 --> 00:09:31.560
often application,

00:09:31.560 --> 00:09:33.790
a transaction is an aspect.

00:09:33.790 --> 00:09:34.130
Often,

00:09:34.130 --> 00:09:36.940
application security is an aspect,

00:09:36.940 --> 00:09:38.100
often application.

00:09:38.100 --> 00:09:39.950
That's where they're called aspect.

00:09:39.950 --> 00:09:43.750
And we may have a file associate ID with each aspect.

00:09:43.750 --> 00:09:47.550
And all these methods in here are cold.

00:09:47.550 --> 00:09:53.590
Had wise is this is an ed wise and this is an ed wise,

00:09:53.590 --> 00:09:59.820
which means and advice would define what needs to be done and when it needs to be done.

00:09:59.820 --> 00:10:01.050
In this case,

00:10:01.050 --> 00:10:04.490
this is what we wanted to do,

00:10:04.490 --> 00:10:12.590
and this must happen before each matter is executed so and advises talking about what needs

00:10:12.590 --> 00:10:16.550
to be done and when it needs to be done.

00:10:16.550 --> 00:10:22.290
But these advisers are meaningless without so called a joint point.

00:10:22.290 --> 00:10:27.880
A joint point is a location where these advisors can be applied.

00:10:27.880 --> 00:10:29.250
In our case,

00:10:29.250 --> 00:10:31.050
all these methods in here,

00:10:31.050 --> 00:10:35.320
our joint points.

00:10:35.320 --> 00:10:38.150
It's as simple as that and the method off.

00:10:38.150 --> 00:10:43.450
Applying the advisers on the joint point is called Leaving.

00:10:43.450 --> 00:10:44.280
Well,

00:10:44.280 --> 00:10:46.950
all this time knowledge is may sound a little strange,

00:10:46.950 --> 00:10:52.150
but we're going to get used to all these terminologies as we progress through the course.

00:10:52.150 --> 00:10:58.050
But the key thing to note here is we got it off the crosscutting concerns from our cord.

00:10:58.050 --> 00:11:00.160
That's what is the purpose off.

00:11:00.160 --> 00:11:01.830
It will be all right.

00:11:01.830 --> 00:11:03.080
I'll see in my next video.

