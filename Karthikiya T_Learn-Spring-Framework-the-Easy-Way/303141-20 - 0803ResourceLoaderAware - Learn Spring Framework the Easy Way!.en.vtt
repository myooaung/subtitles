WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.060
Okay,

00:00:01.060 --> 00:00:04.270
let us take a look at another example off ever interface.

00:00:04.270 --> 00:00:05.670
And in this case,

00:00:05.670 --> 00:00:11.100
let's say that I wanted to access a resource that recites in the file system and do

00:00:11.100 --> 00:00:11.850
something with it.

00:00:11.850 --> 00:00:13.370
In this case,

00:00:13.370 --> 00:00:15.550
I'm trying to read a properties file,

00:00:15.550 --> 00:00:19.840
and I'm just trying to display the values just as you see in here.

00:00:19.840 --> 00:00:23.110
This technique is often used for internationalisation,

00:00:23.110 --> 00:00:24.390
often application.

00:00:24.390 --> 00:00:25.670
And if you're not ever off,

00:00:25.670 --> 00:00:30.580
what is a properties file is just a simple file with key value pairs.

00:00:30.580 --> 00:00:32.250
The key would remain unique.

00:00:32.250 --> 00:00:33.850
But the values may change,

00:00:33.850 --> 00:00:39.100
and this is usually the preferred way to store the text displayed in your application.

00:00:39.100 --> 00:00:41.950
If you want to know more on properties file,

00:00:41.950 --> 00:00:43.970
you can explore a bit about it.

00:00:43.970 --> 00:00:52.900
But this file in here is reciting under the E Directory and under the temp folder with the

00:00:52.900 --> 00:00:54.880
name Test our properties.

00:00:54.880 --> 00:01:03.690
So this is the resource that I want to get access to Tobe able to read all these values and

00:01:03.690 --> 00:01:05.440
in order to load this resource,

00:01:05.440 --> 00:01:08.510
we need this object resource loader,

00:01:08.510 --> 00:01:13.850
which were expecting spring toe inject into this being using the settle injection.

00:01:13.850 --> 00:01:15.750
It's as simple as that.

00:01:15.750 --> 00:01:17.950
And for that very reason,

00:01:17.950 --> 00:01:22.390
we have now implemented the resource loader ever interface,

00:01:22.390 --> 00:01:24.070
which has the following settle.

00:01:24.070 --> 00:01:29.250
Method and rest will remain same just as our previous example.

00:01:29.250 --> 00:01:31.520
And if you go through this logic,

00:01:31.520 --> 00:01:38.190
we're trying to read The Properties file isn't the input stream and then trying to display

00:01:38.190 --> 00:01:39.920
its values Well,

00:01:39.920 --> 00:01:41.360
this is all core java.

00:01:41.360 --> 00:01:44.950
Let's go to the main chance and try to run the program,

00:01:44.950 --> 00:01:49.000
and it worked pretty well.

00:01:49.000 --> 00:01:54.450
Now it's not necessary that the resource has to reside in the file system.

00:01:54.450 --> 00:02:00.380
It can also decide in the class part if you want to pick a results from the class part

00:02:00.380 --> 00:02:02.560
instead of saying file,

00:02:02.560 --> 00:02:06.790
you would instead say class part.

00:02:06.790 --> 00:02:11.900
But do make sure that this file is reciting in the class part,

00:02:11.900 --> 00:02:14.650
though if you're using a maven project,

00:02:14.650 --> 00:02:18.580
he can keep that file under resources,

00:02:18.580 --> 00:02:21.050
and here we have it.

00:02:21.050 --> 00:02:25.250
And here are the bunt off key value pairs.

00:02:25.250 --> 00:02:31.850
Let's run the program this time and see a different result.

00:02:31.850 --> 00:02:41.080
And it worked Tassan Blazer and say,

00:02:41.080 --> 00:02:44.450
Mazza caspit Java conflict.

00:02:44.450 --> 00:02:47.180
Nothing different.

00:02:47.180 --> 00:02:52.260
You can even loaded resource using,

00:02:52.260 --> 00:02:52.960
and you are Oh,

00:02:52.960 --> 00:02:54.410
if you wish.

00:02:54.410 --> 00:02:55.690
So instead,

00:02:55.690 --> 00:03:03.320
off class spot and you would provide the You are How did that sit on this?

00:03:03.320 --> 00:03:04.750
I'll see you soon.

