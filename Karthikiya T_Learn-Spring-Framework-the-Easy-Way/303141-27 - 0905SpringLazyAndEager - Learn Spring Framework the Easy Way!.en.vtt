WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.950
by default.

00:00:00.950 --> 00:00:03.100
Spring beans are eagerly loaded.

00:00:03.100 --> 00:00:09.930
That means all the beans would be created right when the container loads and before you

00:00:09.930 --> 00:00:11.220
request for a bean.

00:00:11.220 --> 00:00:13.110
In order to demonstrate the same,

00:00:13.110 --> 00:00:17.750
I have put this message in the constructor of sample bean.

00:00:17.750 --> 00:00:21.600
So when the instance off the sample being is being created by the container,

00:00:21.600 --> 00:00:23.650
we would be able to see this message.

00:00:23.650 --> 00:00:25.830
And in our main method,

00:00:25.830 --> 00:00:31.550
we pretty much had the same code except the hand of included the following message.

00:00:31.550 --> 00:00:33.210
Rick listing for a bean.

00:00:33.210 --> 00:00:39.750
We're trying to display this message before we're requesting for a being for the first time

00:00:39.750 --> 00:00:39.750
.

00:00:39.750 --> 00:00:46.000
And now if you run the program since the beans are loaded eagerly,

00:00:46.000 --> 00:00:53.100
that means the constructor is called before we requested for being in stance.

00:00:53.100 --> 00:00:54.580
If you wish,

00:00:54.580 --> 00:00:56.050
you can all right,

00:00:56.050 --> 00:01:02.850
the default behavior and make these beans load in lazy manner just as we are.

00:01:02.850 --> 00:01:09.690
And for that you just have to include one attribute that's lazy in it,

00:01:09.690 --> 00:01:12.780
and then you're going to make it true.

00:01:12.780 --> 00:01:15.480
Just simple as that.

00:01:15.480 --> 00:01:17.640
No,

00:01:17.640 --> 00:01:18.740
it's on the program.

00:01:18.740 --> 00:01:26.800
And this time I'm expecting this message to be displayed first and when we request for the

00:01:26.800 --> 00:01:27.180
object.

00:01:27.180 --> 00:01:28.110
For the first time,

00:01:28.110 --> 00:01:31.150
the constructor would be called.

00:01:31.150 --> 00:01:34.150
And sure enough,

00:01:34.150 --> 00:01:38.950
everything worked well.

00:01:38.950 --> 00:01:43.850
In case if you wish to load all the beans and lazy manner,

00:01:43.850 --> 00:01:59.250
then you can just move this particular attributes to the root tank and call it default lazy

00:01:59.250 --> 00:01:59.790
in it.

00:01:59.790 --> 00:02:06.350
And this works for all the beans now and now.

00:02:06.350 --> 00:02:09.150
This is applicable for all the beans,

00:02:09.150 --> 00:02:11.980
and it worked as expected.

00:02:11.980 --> 00:02:15.970
And when you make all the beans as lazy,

00:02:15.970 --> 00:02:22.290
there might be instances where you might want to make a particular bean as eager.

00:02:22.290 --> 00:02:23.530
In that case,

00:02:23.530 --> 00:02:30.150
you just have to add that attribute in the particular bean so that that particular bean

00:02:30.150 --> 00:02:33.260
would be loaded in eager manner.

00:02:33.260 --> 00:02:34.950
You just have to make delays in it,

00:02:34.950 --> 00:02:37.090
too falls,

00:02:37.090 --> 00:02:41.640
and that will work without any problem.

00:02:41.640 --> 00:02:44.580
Although this are put,

00:02:44.580 --> 00:02:46.100
doesn't really the monster that,

00:02:46.100 --> 00:02:47.650
um,

00:02:47.650 --> 00:02:49.360
trust me,

00:02:49.360 --> 00:02:53.440
it works in order to do the same from Java conflict.

00:02:53.440 --> 00:02:56.850
You just have to include an annotation,

00:02:56.850 --> 00:03:00.850
and let's try to do that.

00:03:00.850 --> 00:03:06.180
Let's I want to make this particular bean lazily load.

00:03:06.180 --> 00:03:25.250
I would just say Lazy Tess and bless that and and it has worked and If you want to make all

00:03:25.250 --> 00:03:26.250
the beans lazy,

00:03:26.250 --> 00:03:38.270
you just have to move this particular annotation at class level and things will work pretty

00:03:38.270 --> 00:03:38.750
smooth.

00:03:38.750 --> 00:03:41.880
And finally,

00:03:41.880 --> 00:03:45.550
if you would like to make particular being lord eagerly,

00:03:45.550 --> 00:03:49.470
then oops,

00:03:49.470 --> 00:04:01.650
you just have to set the flight to faults and it works as well.

00:04:01.650 --> 00:04:08.970
So if you have certain means that you're not going to use it very frequently,

00:04:08.970 --> 00:04:12.350
then it's better to load them in lazy manner.

00:04:12.350 --> 00:04:16.850
That means only when you require those beans would you need it in stance.

00:04:16.850 --> 00:04:20.700
That will save a lot of memory and performance as well.

00:04:20.700 --> 00:04:21.720
For example,

00:04:21.720 --> 00:04:24.130
let's say that you have a database connection object.

00:04:24.130 --> 00:04:28.910
Then you might want to load it in eager manner because it would be used across your

00:04:28.910 --> 00:04:32.450
application very frequently to interact with the database.

00:04:32.450 --> 00:04:33.520
All right,

00:04:33.520 --> 00:04:34.440
that's about it.

00:04:34.440 --> 00:04:35.990
I'll see you in my next video

