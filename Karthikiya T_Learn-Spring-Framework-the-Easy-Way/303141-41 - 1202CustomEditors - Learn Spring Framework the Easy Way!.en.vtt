WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.670
okay.

00:00:04.670 --> 00:00:05.610
In our previous video,

00:00:05.610 --> 00:00:11.000
we have seen how spring will make use off some readily available editors to come with the

00:00:11.000 --> 00:00:14.360
string to a particular data type in the Sweden.

00:00:14.360 --> 00:00:20.260
We're going to explore how we can let spring convert the string to a custom type,

00:00:20.260 --> 00:00:21.160
for example,

00:00:21.160 --> 00:00:27.430
letter that I won't spring to convert the following string literal into my own custom

00:00:27.430 --> 00:00:30.050
object that belonged to server conflict.

00:00:30.050 --> 00:00:31.980
How can we accomplish that?

00:00:31.980 --> 00:00:38.020
Spring does not have any readily available editor class to perform this conversion task,

00:00:38.020 --> 00:00:41.610
so we have to introduce one for that purpose.

00:00:41.610 --> 00:00:43.580
But before we take a look at the code,

00:00:43.580 --> 00:00:47.470
let me just walk you through the other files.

00:00:47.470 --> 00:00:48.940
It's pretty simple.

00:00:48.940 --> 00:00:55.100
All we have here is the example being and is dependent on the server conflict.

00:00:55.100 --> 00:00:59.270
And so we're trying to inject Sovecon figures in the constructor injection.

00:00:59.270 --> 00:01:01.890
It's as simple as that,

00:01:01.890 --> 00:01:04.090
and from our conflict file,

00:01:04.090 --> 00:01:07.880
I'm trying to inject with the constructor argument.

00:01:07.880 --> 00:01:08.470
No,

00:01:08.470 --> 00:01:13.030
let's take a look at this cord like I had all the dimension you need to follow the

00:01:13.030 --> 00:01:17.950
following naming convention the destination type class name.

00:01:17.950 --> 00:01:19.040
In our case,

00:01:19.040 --> 00:01:21.410
this is going to be the civil conflict.

00:01:21.410 --> 00:01:30.110
It has to be exact same class name and you also need to upend the following world editor.

00:01:30.110 --> 00:01:32.410
Only then will things work.

00:01:32.410 --> 00:01:39.000
So this is the format that we need to follow to name your editor class.

00:01:39.000 --> 00:01:48.670
And once you do so you have to extend that class with property editor support class and

00:01:48.670 --> 00:01:51.330
then you'll have the option toe all right.

00:01:51.330 --> 00:01:53.350
They set as text mattered,

00:01:53.350 --> 00:01:57.890
which will do the magic so spring will take her off.

00:01:57.890 --> 00:02:00.640
Passing the string literal.

00:02:00.640 --> 00:02:04.850
Let you configure in your XML as an argument to this method.

00:02:04.850 --> 00:02:10.480
And here you would just simply introduce a piece off code that will ultimately convert the

00:02:10.480 --> 00:02:14.760
string into your destination type.

00:02:14.760 --> 00:02:15.800
In our case,

00:02:15.800 --> 00:02:18.750
it's going to be off type the server conflict.

00:02:18.750 --> 00:02:23.950
So I'm just trying to split the string by this hyphen character.

00:02:23.950 --> 00:02:28.170
And then I'm trying to set the values off Silver conflict,

00:02:28.170 --> 00:02:30.370
which is a simple,

00:02:30.370 --> 00:02:31.450
poor Joe class.

00:02:31.450 --> 00:02:34.070
And then finally,

00:02:34.070 --> 00:02:42.860
I'm trying to send the resulting object to this method set value that belongs to the

00:02:42.860 --> 00:02:44.950
property editor support class.

00:02:44.950 --> 00:02:51.560
And this is exactly what would get injected ultimately and like I had already mentioned

00:02:51.560 --> 00:02:55.350
this method in here is not off significance at the moment.

00:02:55.350 --> 00:02:58.890
This would be useful in the context off of applications.

00:02:58.890 --> 00:03:00.950
So we will ignore it for now,

00:03:00.950 --> 00:03:03.050
and that's all there is to it.

00:03:03.050 --> 00:03:06.950
Let's try to run the program and see the result.

00:03:06.950 --> 00:03:12.500
And it worked pretty well without any problem.

00:03:12.500 --> 00:03:21.850
Now they might be instances where this class may not be reciting in the class part.

00:03:21.850 --> 00:03:25.970
So spring does not have any visual to this class.

00:03:25.970 --> 00:03:28.550
Or maybe you want to use a different name,

00:03:28.550 --> 00:03:32.350
maybe with the name editor X or whatever,

00:03:32.350 --> 00:03:35.500
Then spring will not be able to identify.

00:03:35.500 --> 00:03:39.760
Since you now broke the rule off the class naming convention.

00:03:39.760 --> 00:03:41.250
In this case,

00:03:41.250 --> 00:03:45.950
your program will not run and spring will throw an exception.

00:03:45.950 --> 00:03:47.440
Okay,

00:03:47.440 --> 00:03:52.250
We need to first make sure that they hopes,

00:03:52.250 --> 00:04:00.150
let me name the file to same.

00:04:00.150 --> 00:04:01.950
And now,

00:04:01.950 --> 00:04:03.250
if you're on the program,

00:04:03.250 --> 00:04:06.250
it still seem to have an error.

00:04:06.250 --> 00:04:07.910
Not really.

00:04:07.910 --> 00:04:09.400
Okay,

00:04:09.400 --> 00:04:10.950
if you run the program now,

00:04:10.950 --> 00:04:15.050
things are going to break.

00:04:15.050 --> 00:04:17.250
And sure enough,

00:04:17.250 --> 00:04:20.150
we have an exception.

00:04:20.150 --> 00:04:26.260
So in our next week,

00:04:26.260 --> 00:04:28.750
we're going to take a look at the solution to this problem.

00:04:28.750 --> 00:04:30.490
I'll see you soon

