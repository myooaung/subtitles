WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.280
in this chapter,

00:00:05.280 --> 00:00:07.270
we're going to talk about auto wiring.

00:00:07.270 --> 00:00:13.080
That means we're going to ask spring to perform the wiring operation for us so that we can

00:00:13.080 --> 00:00:15.150
save some effort from our end.

00:00:15.150 --> 00:00:18.960
Before we take a look at a simple example off water wiring.

00:00:18.960 --> 00:00:21.500
Let me just quickly walk it through the scenario.

00:00:21.500 --> 00:00:26.780
Let's say that we have the sample being and is dependent on couple off other beans.

00:00:26.780 --> 00:00:28.050
And here are they.

00:00:28.050 --> 00:00:31.070
These are just simple class files,

00:00:31.070 --> 00:00:33.780
and they both have one method,

00:00:33.780 --> 00:00:36.950
and they print the bean specific message.

00:00:36.950 --> 00:00:43.670
Just as you see in here and inside our sample being,

00:00:43.670 --> 00:00:49.780
we also have their corresponding settle methods to let spring inject the dependencies heels

00:00:49.780 --> 00:00:50.850
and settle injection.

00:00:50.850 --> 00:00:52.590
It's as simple as that.

00:00:52.590 --> 00:00:59.970
We also have one more method that just simply calls the methods residing in this dependent

00:00:59.970 --> 00:01:03.260
beans so that when we call this method,

00:01:03.260 --> 00:01:09.630
we will be sure that the dependencies are indeed injected and no main classes.

00:01:09.630 --> 00:01:10.790
Pretty straightforward,

00:01:10.790 --> 00:01:18.590
we're just trying to call the sample method as simple as that inside our conflict file.

00:01:18.590 --> 00:01:22.430
I've just defined all those three beans in here now,

00:01:22.430 --> 00:01:26.820
since the sample being is dependent on this to beans.

00:01:26.820 --> 00:01:31.890
I have to now add the property tax and refer to these beans.

00:01:31.890 --> 00:01:35.050
But let's say that I'm too lazy to do that.

00:01:35.050 --> 00:01:41.990
So what am I going to do now is I'm just simply going toe ad the following attribute or the

00:01:41.990 --> 00:01:45.400
wire by name by specifying this.

00:01:45.400 --> 00:01:51.150
I'm asking spring to go take a look at the name of the properties in here.

00:01:51.150 --> 00:01:55.270
And if these properties are having the settle methods,

00:01:55.270 --> 00:02:04.440
I won't spring to go take a look at the beans with the exact same name as I defined as

00:02:04.440 --> 00:02:05.370
properties.

00:02:05.370 --> 00:02:09.450
And if Spring finds those beans with the same name,

00:02:09.450 --> 00:02:16.540
I want spring to inject those beans into my sample being it's as simple as that.

00:02:16.540 --> 00:02:17.600
Now,

00:02:17.600 --> 00:02:19.590
if I run the program without this,

00:02:19.590 --> 00:02:28.190
no beans would be injected and so will have no pointer exception because my default this

00:02:28.190 --> 00:02:28.960
would be no.

00:02:28.960 --> 00:02:35.280
If I enter just that attribute dough,

00:02:35.280 --> 00:02:38.290
the result would be good.

00:02:38.290 --> 00:02:43.450
So what spring has just done is are providing.

00:02:43.450 --> 00:02:50.350
Spring has identified the beans but the same property name.

00:02:50.350 --> 00:02:53.000
And that's why I said by name,

00:02:53.000 --> 00:02:56.540
and Springhouse taken care off,

00:02:56.540 --> 00:03:01.880
injecting them to assemble as that But clearly we have one serious problem in here.

00:03:01.880 --> 00:03:06.630
If you modify the name of the bean are the name of the property,

00:03:06.630 --> 00:03:08.250
things are going to mess up.

00:03:08.250 --> 00:03:16.480
Let's say somehow I wanted to change the name off this being to another being one.

00:03:16.480 --> 00:03:21.510
And now spring just can't find that being.

00:03:21.510 --> 00:03:24.950
We'll get to know point exception.

00:03:24.950 --> 00:03:32.870
So I have to make those changes inside are court as well to get it working now.

00:03:32.870 --> 00:03:34.910
This is very tiresome process.

00:03:34.910 --> 00:03:39.850
Imagine that you have thousands of lines off court where the chain needs to go.

00:03:39.850 --> 00:03:42.650
It's quite unimaginable.

00:03:42.650 --> 00:03:44.850
And let's run the program.

00:03:44.850 --> 00:03:46.590
Okay.

00:03:46.590 --> 00:03:46.880
Still,

00:03:46.880 --> 00:03:52.970
we have another because even or settle mattered is to be changed.

00:03:52.970 --> 00:03:54.000
Now,

00:03:54.000 --> 00:03:56.350
this is quite a pain Degnan process.

00:03:56.350 --> 00:04:00.350
So clearly this is not what we wanted.

00:04:00.350 --> 00:04:03.250
Admit quickly undo all those changes.

00:04:03.250 --> 00:04:07.920
So what we can do?

00:04:07.920 --> 00:04:11.150
Rather is instructing by name.

00:04:11.150 --> 00:04:14.830
I'm going to make this toe by type.

00:04:14.830 --> 00:04:22.150
So this time Spring will try to identify the dependencies based on that type,

00:04:22.150 --> 00:04:23.830
not by the name.

00:04:23.830 --> 00:04:26.050
So here.

00:04:26.050 --> 00:04:26.750
Now,

00:04:26.750 --> 00:04:34.850
spring is smart enough to understand that these are the beans that needs to be injected,

00:04:34.850 --> 00:04:39.180
and it would inject regardless off the name off the bean.

00:04:39.180 --> 00:04:41.950
So even if I mess up with the name this time,

00:04:41.950 --> 00:04:43.950
things will still work.

00:04:43.950 --> 00:04:49.350
But we have a problem here as well.

00:04:49.350 --> 00:04:54.710
Let's say that I have another being that points to the same class,

00:04:54.710 --> 00:04:57.780
but with a different name.

00:04:57.780 --> 00:05:07.810
So now which one of these two beans will the spring choose to inject?

00:05:07.810 --> 00:05:08.660
Well,

00:05:08.660 --> 00:05:10.350
Spring will be confused.

00:05:10.350 --> 00:05:17.040
It does not take any spring would rather prefer to throw an error than risking to change

00:05:17.040 --> 00:05:18.740
the behavior off your application?

00:05:18.740 --> 00:05:19.920
No,

00:05:19.920 --> 00:05:21.150
if you run the program,

00:05:21.150 --> 00:05:27.770
he would get an exception because spring is confused as to which Bean to be chosen.

00:05:27.770 --> 00:05:31.640
So in order to solve all these problems,

00:05:31.640 --> 00:05:36.220
we have to use annotation auto wide annotation,

00:05:36.220 --> 00:05:38.850
which will talk about incoming videos.

00:05:38.850 --> 00:05:42.900
But let's also take a look at the Java conflict.

00:05:42.900 --> 00:05:44.010
Equal int off.

00:05:44.010 --> 00:05:44.610
Same.

00:05:44.610 --> 00:05:48.950
It's pretty straightforward.

00:05:48.950 --> 00:05:52.570
All you have to do is you have to know,

00:05:52.570 --> 00:05:57.500
add the following attribute out of wire,

00:05:57.500 --> 00:06:01.250
and then you would either choose by type or by name.

00:06:01.250 --> 00:06:02.740
I mean,

00:06:02.740 --> 00:06:10.850
just as we did in here in case of XML and things would work as usual.

00:06:10.850 --> 00:06:16.500
Let's run the program and it worked.

00:06:16.500 --> 00:06:22.140
But if you notice you see a strike off on this world,

00:06:22.140 --> 00:06:25.750
that's because this is now depreciated.

00:06:25.750 --> 00:06:27.930
We better not use it.

00:06:27.930 --> 00:06:28.480
So again,

00:06:28.480 --> 00:06:30.750
the solution can be found with annotations,

00:06:30.750 --> 00:06:32.950
so I'll see assume.

