WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.610
let us try to understand singleton beans in the context offspring in spring,

00:00:05.610 --> 00:00:06.550
By default,

00:00:06.550 --> 00:00:08.410
all the beans are singleton.

00:00:08.410 --> 00:00:13.690
That means you can only ever create one single instance por Bien and ah,

00:00:13.690 --> 00:00:15.550
in order to demonstrate the same,

00:00:15.550 --> 00:00:19.440
we have a couple of beans defined in here the first off,

00:00:19.440 --> 00:00:22.250
which is with the name another bean,

00:00:22.250 --> 00:00:25.550
which has a very simple structure.

00:00:25.550 --> 00:00:31.210
It has one simple method that takes in one Param Eter and displays the same.

00:00:31.210 --> 00:00:34.690
And know that this class does not hold any state,

00:00:34.690 --> 00:00:36.950
no properties of whatsoever.

00:00:36.950 --> 00:00:43.190
And in our sample being we're trying to inject this another bean is in constructor

00:00:43.190 --> 00:00:50.860
injection and then we're going to use that object to call its methods and perform certain

00:00:50.860 --> 00:00:51.460
task.

00:00:51.460 --> 00:00:54.950
Now imagine this is kind of like a doll object.

00:00:54.950 --> 00:00:57.430
Are Dow class off your application?

00:00:57.430 --> 00:01:03.370
If you're better off MBC architecture down stands for their axis object and typically this

00:01:03.370 --> 00:01:04.720
is how the floor would be.

00:01:04.720 --> 00:01:08.260
That means the Dow object does not hold any state in itself.

00:01:08.260 --> 00:01:11.950
But you asked me We have this property in here.

00:01:11.950 --> 00:01:20.140
I'm going to talk about it after we run the program and in our main class in order to prove

00:01:20.140 --> 00:01:23.200
that the beans are singleton in spring.

00:01:23.200 --> 00:01:26.750
I'm just trying to create multiple threads and in each thread,

00:01:26.750 --> 00:01:31.360
I'm requesting for the same instance off sample Bean.

00:01:31.360 --> 00:01:36.550
And then I'm trying to get the hash code just as you see in here.

00:01:36.550 --> 00:01:42.050
What I'm expecting here is that all the hash courts should be seen.

00:01:42.050 --> 00:01:44.370
And right after that,

00:01:44.370 --> 00:01:51.970
I'm just trying to call the method sample method and trying to send a threat specific.

00:01:51.970 --> 00:01:54.550
Param Eter Just as you see in here.

00:01:54.550 --> 00:01:55.760
Now,

00:01:55.760 --> 00:01:58.450
let's try to run the program and see the result.

00:01:58.450 --> 00:02:02.200
And it worked pretty well.

00:02:02.200 --> 00:02:07.350
All the hash courts are same no matter how many threats you have,

00:02:07.350 --> 00:02:11.120
and the messages are also consistent.

00:02:11.120 --> 00:02:13.040
But it is you,

00:02:13.040 --> 00:02:16.230
as a developer who have to take care off,

00:02:16.230 --> 00:02:19.530
eliminating the possibility off thread rece condition.

00:02:19.530 --> 00:02:25.650
How many for take a look at this being or the class all that is holding one property?

00:02:25.650 --> 00:02:30.470
There is no possibility that multiple threads can edit this field.

00:02:30.470 --> 00:02:31.350
I mean,

00:02:31.350 --> 00:02:36.830
we're not performing in the centre injection to let any other thread to modify this object

00:02:36.830 --> 00:02:37.880
or whatsoever.

00:02:37.880 --> 00:02:43.120
Even this being is stretched safe because it's not holding any state.

00:02:43.120 --> 00:02:46.450
All it has is behavior,

00:02:46.450 --> 00:02:49.650
and same is the case in here,

00:02:49.650 --> 00:02:55.340
and each other thread would send a unique message that will be processed based on the logic

00:02:55.340 --> 00:02:56.350
that you have in here.

00:02:56.350 --> 00:02:57.690
So ultimately,

00:02:57.690 --> 00:03:01.550
it's safe to say that these two beans are thread safe,

00:03:01.550 --> 00:03:05.280
and so a Toki that we can let them be,

00:03:05.280 --> 00:03:06.630
Singleton instance,

00:03:06.630 --> 00:03:07.850
is by default.

00:03:07.850 --> 00:03:11.740
The opposite off single turn is prototype,

00:03:11.740 --> 00:03:13.540
which will talk about incoming videos,

00:03:13.540 --> 00:03:14.250
for sure,

00:03:14.250 --> 00:03:21.900
But here's a quick example that demonstrates Singleton in Spring Java config.

00:03:21.900 --> 00:03:23.650
It's pretty straightforward as well.

00:03:23.650 --> 00:03:30.150
Let me just quickly change this and run the program,

00:03:30.150 --> 00:03:36.850
and this has worked as well.

00:03:36.850 --> 00:03:39.430
All right,

00:03:39.430 --> 00:03:40.250
I'll see you soon.

