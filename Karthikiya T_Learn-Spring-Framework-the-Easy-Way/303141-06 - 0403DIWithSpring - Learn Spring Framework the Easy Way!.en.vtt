WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.790
Okay,

00:00:00.790 --> 00:00:04.160
let us take a look at how we can perform dependency injection.

00:00:04.160 --> 00:00:05.750
Here's in spring framework.

00:00:05.750 --> 00:00:10.690
I don't know the project that is bundled along with this chapter and imported into your

00:00:10.690 --> 00:00:11.530
workspace.

00:00:11.530 --> 00:00:17.280
I believe we already have a video demonstrating how to import maven projects into workspace

00:00:17.280 --> 00:00:17.280
.

00:00:17.280 --> 00:00:21.880
Just follow those instructions and import the project afterward.

00:00:21.880 --> 00:00:25.350
You should be able to locate all these files inside the project.

00:00:25.350 --> 00:00:29.050
And before we move on with the dependence injection,

00:00:29.050 --> 00:00:35.490
let us try to import certain libraries required to perform this job and the libraries off

00:00:35.490 --> 00:00:36.130
interest.

00:00:36.130 --> 00:00:38.120
Our spring core,

00:00:38.120 --> 00:00:43.660
which will provide all the core spring functionalities and spring context which will help

00:00:43.660 --> 00:00:46.520
us create the spring application context,

00:00:46.520 --> 00:00:49.450
will understand what is application context in a while.

00:00:49.450 --> 00:00:50.370
Well,

00:00:50.370 --> 00:00:51.220
ideally,

00:00:51.220 --> 00:00:56.630
it sort required that you need to specify spring core library in here because spring

00:00:56.630 --> 00:00:59.250
context is dependent on spring core.

00:00:59.250 --> 00:01:01.550
So even if you don't Spence fight,

00:01:01.550 --> 00:01:07.350
Megan is actually going to take care off downloading spring core because spring context is

00:01:07.350 --> 00:01:08.690
dependent on it.

00:01:08.690 --> 00:01:10.590
And once you do that,

00:01:10.590 --> 00:01:11.490
just right,

00:01:11.490 --> 00:01:17.410
click on the Project Goto maven and click on Update project.

00:01:17.410 --> 00:01:22.710
Only then will the maven look for all these libraries in the Internet and download them

00:01:22.710 --> 00:01:24.410
into your local depository.

00:01:24.410 --> 00:01:26.950
Once you do that,

00:01:26.950 --> 00:01:28.950
you have to create an XML file.

00:01:28.950 --> 00:01:31.990
You can give any name off your choice in my case,

00:01:31.990 --> 00:01:38.410
it with the name conflict dot XML and this XML file must reside under the resources

00:01:38.410 --> 00:01:39.250
directory.

00:01:39.250 --> 00:01:42.070
And this is XML file,

00:01:42.070 --> 00:01:43.660
which is a key file.

00:01:43.660 --> 00:01:51.110
Where would define although classes in the ice offspring every component are a class is

00:01:51.110 --> 00:01:52.310
called a bean.

00:01:52.310 --> 00:01:57.720
So we just simply defined all the beans that we're going to work on.

00:01:57.720 --> 00:02:00.200
And here is how you would define them.

00:02:00.200 --> 00:02:01.680
House was fired.

00:02:01.680 --> 00:02:02.750
That last name,

00:02:02.750 --> 00:02:07.790
which in this case is dog and I have given it and identify where.

00:02:07.790 --> 00:02:13.270
But the name animal similarly have also defined how about being in here,

00:02:13.270 --> 00:02:15.080
including its package.

00:02:15.080 --> 00:02:17.850
And then I've given a unique name to it.

00:02:17.850 --> 00:02:19.110
Along with that,

00:02:19.110 --> 00:02:21.580
I've also added another tag in here,

00:02:21.580 --> 00:02:22.560
which,

00:02:22.560 --> 00:02:30.380
basically the constructor argument that this being except that's going to accept a argument

00:02:30.380 --> 00:02:32.050
off type animal.

00:02:32.050 --> 00:02:35.520
And it's the same thing that I'm trying to do in here.

00:02:35.520 --> 00:02:43.370
I'm trying to send a bean with identify animal so that points to this dog class,

00:02:43.370 --> 00:02:43.930
which,

00:02:43.930 --> 00:02:44.390
of course,

00:02:44.390 --> 00:02:46.230
implements the animal interface.

00:02:46.230 --> 00:02:46.920
Now,

00:02:46.920 --> 00:02:49.210
earlier in our main class logic,

00:02:49.210 --> 00:02:51.200
this is how the court waas.

00:02:51.200 --> 00:02:56.110
We're explicitly specified the dependent class like cell,

00:02:56.110 --> 00:02:58.150
and then we're trying to call the mattered.

00:02:58.150 --> 00:03:02.300
But this time we're going to do things differently.

00:03:02.300 --> 00:03:03.700
We're going to use spring,

00:03:03.700 --> 00:03:05.840
and this is how it is done.

00:03:05.840 --> 00:03:11.510
We're going to create an application context and what application context essentially does

00:03:11.510 --> 00:03:11.510
,

00:03:11.510 --> 00:03:12.460
is it?

00:03:12.460 --> 00:03:18.150
We're just simply parsed through the XML file that just specify in here.

00:03:18.150 --> 00:03:21.900
And it would take north off all the list off beans available.

00:03:21.900 --> 00:03:23.990
And when you run this program,

00:03:23.990 --> 00:03:29.350
the application context is actually going to create instances off all these classes and

00:03:29.350 --> 00:03:30.370
then inject.

00:03:30.370 --> 00:03:32.980
The dependence is in this case,

00:03:32.980 --> 00:03:36.760
the bean is dependent on the being animal.

00:03:36.760 --> 00:03:44.150
And so application context is going to take her off injecting animal into this being class

00:03:44.150 --> 00:03:44.150
.

00:03:44.150 --> 00:03:46.550
And right after that,

00:03:46.550 --> 00:03:52.340
we're going to use this object context to get the bean off your choice by using its unique

00:03:52.340 --> 00:03:53.280
identifier.

00:03:53.280 --> 00:03:54.260
In this case,

00:03:54.260 --> 00:03:57.850
we're interested in getting this being class object,

00:03:57.850 --> 00:04:01.100
and then we're trying to call its method shout,

00:04:01.100 --> 00:04:08.070
and that would result in executing make noise off animal and whichever declines that were

00:04:08.070 --> 00:04:09.650
trying to inject from here,

00:04:09.650 --> 00:04:17.150
its corresponding method would be called It's as simple as that.

00:04:17.150 --> 00:04:20.530
So if you're on this program,

00:04:20.530 --> 00:04:23.840
this should ideally call the shot method off dog.

00:04:23.840 --> 00:04:26.250
It worked.

00:04:26.250 --> 00:04:29.950
Now that has change this to cat,

00:04:29.950 --> 00:04:34.450
save the file and run the program.

00:04:34.450 --> 00:04:37.050
And it worked as well.

00:04:37.050 --> 00:04:38.570
Well,

00:04:38.570 --> 00:04:41.010
I'm actually trying to keep things simple for now,

00:04:41.010 --> 00:04:45.220
but we will go deep and understand what is application context.

00:04:45.220 --> 00:04:47.310
What is wiring what is in motion,

00:04:47.310 --> 00:04:52.470
off control and all such concepts would becoming in future videos for sure.

00:04:52.470 --> 00:04:55.650
But I hope that this chapter has given you some good start.

00:04:55.650 --> 00:05:00.090
But make sure that you're able to run this program successfully on your own.

00:05:00.090 --> 00:05:02.050
If you face any issues,

00:05:02.050 --> 00:05:03.620
do put your question,

00:05:03.620 --> 00:05:05.480
and then I should be able to answer it.

00:05:05.480 --> 00:05:11.360
But please don't go further unless you get this application working because this is your

00:05:11.360 --> 00:05:13.150
first crucial milestone.

00:05:13.150 --> 00:05:14.650
All right,

00:05:14.650 --> 00:05:15.500
see you soon.

