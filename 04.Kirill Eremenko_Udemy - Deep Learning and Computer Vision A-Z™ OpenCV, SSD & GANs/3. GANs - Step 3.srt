1
00:00:00,510 --> 00:00:06,180
Hello and welcome to this Python tutorial we have just defined in the previous Statoil the architecture

2
00:00:06,480 --> 00:00:08,470
of the neural network of the generator.

3
00:00:08,670 --> 00:00:15,600
And now we need to add a tool to our class G which will be the forward function that will forward propagate

4
00:00:15,720 --> 00:00:19,530
the signal inside the whole neural network.

5
00:00:19,530 --> 00:00:23,430
The good news is that after the storm we had in the British Statoil.

6
00:00:23,550 --> 00:00:29,760
Now things are going to get really easy because we will simply use the main object which remains an

7
00:00:29,760 --> 00:00:35,940
object of the sequential class that contains all the different modules to forward propagate the signal

8
00:00:36,020 --> 00:00:37,320
in just one line of code.

9
00:00:37,500 --> 00:00:38,520
Let's do it.

10
00:00:38,520 --> 00:00:40,740
We are going to define a new function.

11
00:00:40,740 --> 00:00:45,180
There are forms starting with death and then we need to specify the name of this function which will

12
00:00:45,180 --> 00:00:51,650
be forward for the forward propagation and this function is going to take two arguments.

13
00:00:51,780 --> 00:00:57,710
Self our object which represents nothing else than the neural network itself.

14
00:00:57,780 --> 00:00:59,720
The neural network of the generator.

15
00:00:59,910 --> 00:01:06,090
And also because as I've just said we're going to use the main object to propagate the signal but since

16
00:01:06,330 --> 00:01:10,060
this main object is a variable attached to our object.

17
00:01:10,230 --> 00:01:15,770
Well we need to input ourselves object here to be able to use self-determine.

18
00:01:15,840 --> 00:01:16,240
All right.

19
00:01:16,260 --> 00:01:23,160
And then the second argument you can see the year is actually going to be the input that is nothing

20
00:01:23,160 --> 00:01:27,160
else than the input of the neural network of the generator.

21
00:01:27,180 --> 00:01:32,520
I remind this input is going to be some random vector of size 100.

22
00:01:32,520 --> 00:01:39,160
That's why we specified 100 here for the size of the input of our first inverse convolution.

23
00:01:39,180 --> 00:01:45,480
This is going to be a random vector input of the generator which will just represent some noise to generate

24
00:01:45,560 --> 00:01:49,680
a fake image and that fake image will be the output of the generator.

25
00:01:49,710 --> 00:01:52,850
It will be the fake image generated by the generator.

26
00:01:53,040 --> 00:02:00,480
But to get this fake image we need to create this random vector noise that will be exactly this input.

27
00:02:00,480 --> 00:02:04,400
The input of the generator and this input will have a size of 100.

28
00:02:04,590 --> 00:02:09,030
It will become much more clear when we start the training of our two brains.

29
00:02:09,030 --> 00:02:15,300
The brain of the generator and the brain of the discriminator because right now you only see some names

30
00:02:15,300 --> 00:02:22,140
for the variable such as inputs but you'll see that we will create those actual inputs later on in the

31
00:02:22,140 --> 00:02:23,250
training phase.

32
00:02:23,250 --> 00:02:29,310
So no worries if it's not 100 percent crystal clear now it will become much clearer when we start the

33
00:02:29,310 --> 00:02:30,840
training face for now.

34
00:02:30,840 --> 00:02:36,220
Just make sure to understand that we're creating the generator and the discriminator.

35
00:02:36,360 --> 00:02:41,130
And right now we're making the forward function that will forward propagate the signal inside the neural

36
00:02:41,130 --> 00:02:43,440
network at the generator.

37
00:02:43,440 --> 00:02:47,540
All right so now things are going to get super easy.

38
00:02:47,750 --> 00:02:55,680
We are going to take our self duct main memory module which is the metal module of our neural network

39
00:02:55,770 --> 00:02:58,220
object represented by self.

40
00:02:58,270 --> 00:03:06,300
We're going to feed this neural network with the inputs which so far is just an argument but then will

41
00:03:06,300 --> 00:03:14,360
become noise random vector we are fitting the new one that work with the input and this will return

42
00:03:14,660 --> 00:03:22,580
the output because the signal is propagated through all the different modules layers of this neural

43
00:03:22,580 --> 00:03:29,980
network and then in the end we'll get the output which of the three channels of the fake generated images.

44
00:03:30,260 --> 00:03:37,550
And therefore since we get now here I am introducing a new variable that I'm calling output and that

45
00:03:37,550 --> 00:03:43,190
is equal to exactly what is returned by the main metor module.

46
00:03:43,190 --> 00:03:49,550
All right so now that we get the output which just need to return it and therefore I'm just entering

47
00:03:49,910 --> 00:03:53,750
the fourth function with return output.

48
00:03:54,020 --> 00:03:58,400
And there we go we have our output of the generator.

49
00:03:58,400 --> 00:03:59,310
Perfect.

50
00:03:59,330 --> 00:04:06,200
So double congratulations because you made the forward function and because you're done with the whole

51
00:04:06,200 --> 00:04:11,370
class defining the generator but be careful we just defined the class.

52
00:04:11,420 --> 00:04:13,110
Nothing is created yet.

53
00:04:13,160 --> 00:04:19,460
And so in the next to toile we'll have to create an instance that is not checked of the class of the

54
00:04:19,460 --> 00:04:20,570
generator class.

55
00:04:20,690 --> 00:04:26,510
And this object will be nothing else than the neural network of the generator defined by the following

56
00:04:26,510 --> 00:04:33,560
properties and containing the tool or the Ford function to propagate the signal inside the neural network.

57
00:04:33,830 --> 00:04:37,270
So let's create this object in the next tutorial.

58
00:04:37,280 --> 00:04:43,100
It will be quick and easy will just create the object and we'll just apply the weights in it function

59
00:04:43,460 --> 00:04:47,000
to initialize the weights of the neural network as it should be.

60
00:04:47,000 --> 00:04:50,860
That is according to the conventions of the adversarial networks.

61
00:04:50,870 --> 00:04:52,590
So let's do that in the next tutorial.

62
00:04:52,610 --> 00:04:54,490
And until then enjoy computer vision.
