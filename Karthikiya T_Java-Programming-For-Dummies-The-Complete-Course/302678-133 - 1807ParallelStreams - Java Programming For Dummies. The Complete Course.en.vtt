WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.360
in this really,

00:00:01.360 --> 00:00:07.150
ever gonna talk about something called Have Bad Low stream battles Team will divide the

00:00:07.150 --> 00:00:09.170
stream into multiple sub streams,

00:00:09.170 --> 00:00:11.350
also known as forking,

00:00:11.350 --> 00:00:19.000
and they all run as individual treads on individual CP course and finally,

00:00:19.000 --> 00:00:26.520
all the results off individual sub streams or club together into a single result hotel

00:00:26.520 --> 00:00:28.130
called as joining.

00:00:28.130 --> 00:00:31.170
So it's a four can join mechanism,

00:00:31.170 --> 00:00:36.280
which was already in place in Java To make the stream a paddle stream,

00:00:36.280 --> 00:00:39.050
you don't have to make a huge number of changes.

00:00:39.050 --> 00:00:45.950
All you have to do is use battle stream in strove stream,

00:00:45.950 --> 00:00:50.680
and everything will be taken care internally.

00:00:50.680 --> 00:00:53.850
You don't have to explicitly create multiple threads.

00:00:53.850 --> 00:00:56.550
The word the stream into multiple sub strains,

00:00:56.550 --> 00:00:57.150
etcetera.

00:00:57.150 --> 00:00:58.850
There's no such mess.

00:00:58.850 --> 00:01:04.270
Everything will be handled internally just by calling this mother Carol Stream.

00:01:04.270 --> 00:01:05.180
Obviously,

00:01:05.180 --> 00:01:09.210
when you have a single stream split up and run as multiple treads,

00:01:09.210 --> 00:01:14.380
it's going to increase the performance just as multi trail programming.

00:01:14.380 --> 00:01:18.760
Does that mean that you should always use battle stream instead,

00:01:18.760 --> 00:01:19.780
all by a stream?

00:01:19.780 --> 00:01:21.850
The answer is no.

00:01:21.850 --> 00:01:23.170
In some cases,

00:01:23.170 --> 00:01:24.610
paddle upstream or best,

00:01:24.610 --> 00:01:26.080
and in some cases,

00:01:26.080 --> 00:01:29.650
battle streams are the worst because,

00:01:29.650 --> 00:01:31.310
as I've mentioned,

00:01:31.310 --> 00:01:37.260
Carol Stream would spread the stream into multiple threads with each threat handling

00:01:37.260 --> 00:01:38.670
individual sub string.

00:01:38.670 --> 00:01:44.810
And as we know that creating it thread and maintaining it would require some CPU and memory

00:01:44.810 --> 00:01:45.630
resources.

00:01:45.630 --> 00:01:48.150
So what do I mean to say by that is,

00:01:48.150 --> 00:01:53.800
in case if you're performing less CPU demanding operations like in this case,

00:01:53.800 --> 00:01:59.120
it just trying to filter out the even numbers and find the son.

00:01:59.120 --> 00:02:01.560
This is very simple operation,

00:02:01.560 --> 00:02:05.010
and it does not really require too much off CPU.

00:02:05.010 --> 00:02:06.380
In this case,

00:02:06.380 --> 00:02:09.900
you're better off go with stream instead off paddle stream.

00:02:09.900 --> 00:02:11.080
On the other hand,

00:02:11.080 --> 00:02:15.550
if you do any CPU intensive operations that would take a while to run.

00:02:15.550 --> 00:02:16.830
In that case,

00:02:16.830 --> 00:02:22.900
you better go with Farrell streams here to make your choice wisely for the sake off your

00:02:22.900 --> 00:02:23.440
reference,

00:02:23.440 --> 00:02:26.450
I'm going to live this to be a parallel stream,

00:02:26.450 --> 00:02:29.050
but ideally in the scenario,

00:02:29.050 --> 00:02:36.090
the better choice would be to use a stream that's on the program and see the output.

00:02:36.090 --> 00:02:39.360
There it is.

00:02:39.360 --> 00:02:42.030
All right,

00:02:42.030 --> 00:02:42.590
that's it.

00:02:42.590 --> 00:02:43.450
On this video.

00:02:43.450 --> 00:02:44.870
Thanks for watching

