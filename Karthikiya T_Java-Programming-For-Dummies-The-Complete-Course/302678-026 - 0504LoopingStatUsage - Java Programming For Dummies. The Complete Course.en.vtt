WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.410
in this video,

00:00:02.410 --> 00:00:06.490
we're gonna take a look at the differences between four loop while open,

00:00:06.490 --> 00:00:07.250
do while loop,

00:00:07.250 --> 00:00:13.340
and we're gonna understand when to use which loping construct and depending on what

00:00:13.340 --> 00:00:14.450
circumstances.

00:00:14.450 --> 00:00:19.050
Obviously you can always use while opens to go for a loop,

00:00:19.050 --> 00:00:22.820
and you can even use poor loop instead of wild up.

00:00:22.820 --> 00:00:29.220
But it's all this advisable that you follow best practices as a rule off stump always tried

00:00:29.220 --> 00:00:33.050
to use for loop instead off while loop whenever applicable.

00:00:33.050 --> 00:00:37.940
One reason for that is it looks a lot cleaner and more readable.

00:00:37.940 --> 00:00:39.470
For example,

00:00:39.470 --> 00:00:44.180
you write your program today and you come back on this court a year after and you will

00:00:44.180 --> 00:00:49.820
thank yourself that you had used pullup because it looked a lot cleaner and you'll get a

00:00:49.820 --> 00:00:50.310
cent,

00:00:50.310 --> 00:00:51.730
you'll get a glimpse off Ward.

00:00:51.730 --> 00:00:57.420
This loop is doing just by looking at this this line off court because this one off court

00:00:57.420 --> 00:01:01.250
has all the major statement that will define the slope.

00:01:01.250 --> 00:01:02.260
Now,

00:01:02.260 --> 00:01:04.070
just been looking at the statement.

00:01:04.070 --> 00:01:09.700
We're going to say that we're gonna loop through the this this block off statement again

00:01:09.700 --> 00:01:13.130
and again for a number of times in this case,

00:01:13.130 --> 00:01:15.450
it's a red dot linked the length often area.

00:01:15.450 --> 00:01:18.590
So we're gonna look through this world up five times.

00:01:18.590 --> 00:01:24.730
If you would have used Wild Loop than all these three statements must have been scattered

00:01:24.730 --> 00:01:25.300
around.

00:01:25.300 --> 00:01:32.150
And let's say you forget to define this or you forget to increment the counter,

00:01:32.150 --> 00:01:38.940
then we'll lose the track on number of patricians and hence the logical result in infinite

00:01:38.940 --> 00:01:39.390
Loop.

00:01:39.390 --> 00:01:46.080
So there is a chance that you're gonna miss one off this statement and break the court.

00:01:46.080 --> 00:01:48.700
We can minimize that using for loop.

00:01:48.700 --> 00:01:51.520
So now that's one major big difference.

00:01:51.520 --> 00:01:56.260
So it's always advisable that you use for loop instead of a while loop whenever possible.

00:01:56.260 --> 00:02:03.330
So what else could be the reason where you need to use full open stood off while is when

00:02:03.330 --> 00:02:04.700
you know ahead of time.

00:02:04.700 --> 00:02:08.170
How many times you gonna look through this statements?

00:02:08.170 --> 00:02:10.350
By that,

00:02:10.350 --> 00:02:11.010
I mean,

00:02:11.010 --> 00:02:14.680
if we run this program during the compile time itself,

00:02:14.680 --> 00:02:19.490
the compiler will be able to figure out how many times it needs to enter this block off

00:02:19.490 --> 00:02:19.950
court.

00:02:19.950 --> 00:02:22.490
And the since the compiling knows ahead of time,

00:02:22.490 --> 00:02:27.910
it's going to make copy off this set off statements inside this block in this case is just

00:02:27.910 --> 00:02:34.890
one statement that great will make the job easier for the jbm to run the program so that

00:02:34.890 --> 00:02:37.880
will improve the performance aspect as well.

00:02:37.880 --> 00:02:38.790
Not much,

00:02:38.790 --> 00:02:39.250
though,

00:02:39.250 --> 00:02:45.470
And another good reason why you need to use for loop is because off the lines off court,

00:02:45.470 --> 00:02:50.100
the lines off court will decrease if you use for Lopez replied Loop,

00:02:50.100 --> 00:02:50.730
obviously,

00:02:50.730 --> 00:02:56.420
because all the statements will be scattered around multiple lines and in this case is just

00:02:56.420 --> 00:03:02.300
in one line just for your information lines off court is one of the metrics used to

00:03:02.300 --> 00:03:04.250
evaluate the quality of the court.

00:03:04.250 --> 00:03:07.300
Now we have wild loop.

00:03:07.300 --> 00:03:09.150
So when to use wild up,

00:03:09.150 --> 00:03:13.090
you can use wild group when you don't know ahead of time.

00:03:13.090 --> 00:03:14.570
How many times you gonna look?

00:03:14.570 --> 00:03:15.770
Two statements,

00:03:15.770 --> 00:03:17.610
for example.

00:03:17.610 --> 00:03:19.160
Take a look at this example.

00:03:19.160 --> 00:03:25.350
If you wanted to maintain a backup files from your local PC to a remote server,

00:03:25.350 --> 00:03:29.540
then you need to have a logic that looks somewhat like this.

00:03:29.540 --> 00:03:31.750
You're gonna say while true,

00:03:31.750 --> 00:03:32.750
okay,

00:03:32.750 --> 00:03:38.920
and then you come inside that block and if new file is present in your local directory than

00:03:38.920 --> 00:03:41.130
copy that file to the back of server,

00:03:41.130 --> 00:03:42.960
and we'll wait for one hour.

00:03:42.960 --> 00:03:49.750
So what this piece off court is essentially doing is this court is running forever when we

00:03:49.750 --> 00:03:51.170
say while true,

00:03:51.170 --> 00:03:55.050
that means the condition will always be true.

00:03:55.050 --> 00:03:57.610
And we're gonna enter this block again and again.

00:03:57.610 --> 00:04:03.670
Everyone our Because we have a timer set to one hour here and everyone over,

00:04:03.670 --> 00:04:07.280
we're gonna check to see if there are any new files added in your directory.

00:04:07.280 --> 00:04:08.840
And if so,

00:04:08.840 --> 00:04:10.660
if there's a new file president,

00:04:10.660 --> 00:04:14.750
then we're gonna take a backup by copying the files to the remote server.

00:04:14.750 --> 00:04:20.720
So this is one place where you want to use the wild open stroganoff followed during compel

00:04:20.720 --> 00:04:21.030
time.

00:04:21.030 --> 00:04:23.130
We don't know how many times we're gonna look through,

00:04:23.130 --> 00:04:27.380
because in this case is just infinite user have toe,

00:04:27.380 --> 00:04:28.780
determinate it manually,

00:04:28.780 --> 00:04:31.140
or you will have to have a condition here that says,

00:04:31.140 --> 00:04:32.660
Stop this operation after,

00:04:32.660 --> 00:04:32.890
say,

00:04:32.890 --> 00:04:34.450
one or two years and well,

00:04:34.450 --> 00:04:36.250
we need to break out of this loop.

00:04:36.250 --> 00:04:43.920
Another reason why you want to use while loop pays when you are se coping your file copying

00:04:43.920 --> 00:04:45.660
a text from my file to another fire.

00:04:45.660 --> 00:04:50.510
Then we're gonna loop through and copy each and every line.

00:04:50.510 --> 00:04:51.410
Still,

00:04:51.410 --> 00:04:55.440
the end off pile is reached or till there are no lines left.

00:04:55.440 --> 00:04:59.440
So if if it is not in the file,

00:04:59.440 --> 00:05:02.600
that means there's some there still lines to be copied.

00:05:02.600 --> 00:05:04.610
Copied that particle lane again.

00:05:04.610 --> 00:05:08.280
We're gonna come back here and check if we reached end of file.

00:05:08.280 --> 00:05:08.900
If not,

00:05:08.900 --> 00:05:12.900
go to the next lane and copy that line to our destination Prime.

00:05:12.900 --> 00:05:14.010
Obviously,

00:05:14.010 --> 00:05:15.160
we don't know ahead of time.

00:05:15.160 --> 00:05:16.690
How many times you gonna look to?

00:05:16.690 --> 00:05:20.220
We don't know how many lines off text is present in the source file.

00:05:20.220 --> 00:05:21.580
In this case,

00:05:21.580 --> 00:05:25.350
it just makes sense to use while let's take a look at one another.

00:05:25.350 --> 00:05:26.260
Good example,

00:05:26.260 --> 00:05:32.150
The Wild true statement will be used very often in animation field.

00:05:32.150 --> 00:05:33.330
For example,

00:05:33.330 --> 00:05:37.180
whenever you play any game a pure seeing a moving character,

00:05:37.180 --> 00:05:41.630
chances are that they would have used the wild loop construct in this manner.

00:05:41.630 --> 00:05:43.580
We have will have a wild loop.

00:05:43.580 --> 00:05:44.210
True,

00:05:44.210 --> 00:05:50.160
That means this is going to be an infinite loop and we're gonna I say,

00:05:50.160 --> 00:05:51.030
keep walking.

00:05:51.030 --> 00:05:53.980
It got a cartoon character walking or whatever.

00:05:53.980 --> 00:05:58.610
And when the user presses exit or maybe escape key or control,

00:05:58.610 --> 00:05:58.830
see,

00:05:58.830 --> 00:05:59.470
or whatever.

00:05:59.470 --> 00:06:01.500
Whatever is a key toe.

00:06:01.500 --> 00:06:03.440
Get out off out of the game.

00:06:03.440 --> 00:06:06.950
Or maybe to quit the game will break out of the loop as well.

00:06:06.950 --> 00:06:09.760
So this is one another logic.

00:06:09.760 --> 00:06:12.680
Very want to use a while loop instead of folder.

00:06:12.680 --> 00:06:14.220
And obviously,

00:06:14.220 --> 00:06:15.210
as I mentioned,

00:06:15.210 --> 00:06:16.560
you can use four.

00:06:16.560 --> 00:06:18.370
Lupin strove while loop even here.

00:06:18.370 --> 00:06:21.450
But it makes more sense to use a while loop here.

00:06:21.450 --> 00:06:27.450
So always used for loop when you know ahead of time.

00:06:27.450 --> 00:06:29.630
How many times you gonna looked through?

00:06:29.630 --> 00:06:31.050
If you don't know,

00:06:31.050 --> 00:06:37.220
then his wild up and I gave you some examples on when to use wild.

00:06:37.220 --> 00:06:43.100
Now we have a do while loop as we have discussed,

00:06:43.100 --> 00:06:49.160
it's going to perform the action first or execute the block off statements and then we'll

00:06:49.160 --> 00:06:50.060
check the condition.

00:06:50.060 --> 00:06:57.730
One good reason why you want to use do while loop is his demonstrator here?

00:06:57.730 --> 00:07:05.410
What we're doing here is we won't take the input from the user and we're going to check to

00:07:05.410 --> 00:07:09.670
see if the user entered number is in the multiples off.

00:07:09.670 --> 00:07:11.410
10 If so,

00:07:11.410 --> 00:07:19.280
will quit out of this program or will get out of this loop if not gonna ask him again to

00:07:19.280 --> 00:07:21.090
enter a number which is,

00:07:21.090 --> 00:07:22.480
in the multiples off 10.

00:07:22.480 --> 00:07:27.620
Try to accomplish the same thing with why.

00:07:27.620 --> 00:07:28.160
Look,

00:07:28.160 --> 00:07:28.830
first of all,

00:07:28.830 --> 00:07:30.350
let's see how this runs.

00:07:30.350 --> 00:07:37.620
I'm gonna enter some value,

00:07:37.620 --> 00:07:38.300
say eight.

00:07:38.300 --> 00:07:41.990
Now it is not a numerical in the multiples off 10.

00:07:41.990 --> 00:07:42.520
So let's hit.

00:07:42.520 --> 00:07:43.040
Enter.

00:07:43.040 --> 00:07:48.790
We're gonna get prompted with this message once again to enter a number which is multiples

00:07:48.790 --> 00:07:52.050
for 10 that center 88 toe or that 85.

00:07:52.050 --> 00:07:56.030
And let's under 90 now.

00:07:56.030 --> 00:07:57.950
This should get us out of the loop.

00:07:57.950 --> 00:08:03.970
It did try to accomplish the same thing with wild up.

00:08:03.970 --> 00:08:08.050
Chances are that it will get either complicated or not possible.

