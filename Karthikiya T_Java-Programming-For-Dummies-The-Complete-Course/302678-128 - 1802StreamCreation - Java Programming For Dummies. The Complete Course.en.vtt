WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.190
All right,

00:00:01.190 --> 00:00:02.250
let's continue.

00:00:02.250 --> 00:00:03.420
In this example,

00:00:03.420 --> 00:00:08.270
we're kind of letting the stream off strings flow through all these methods down the line.

00:00:08.270 --> 00:00:11.100
And ultimately we're getting some kind off a result.

00:00:11.100 --> 00:00:12.280
In this case,

00:00:12.280 --> 00:00:15.450
it's the some off all the indigenous left in the stream.

00:00:15.450 --> 00:00:15.930
Well,

00:00:15.930 --> 00:00:20.150
this instruction is actually combination off three different operations.

00:00:20.150 --> 00:00:23.560
Number one is to create the stream.

00:00:23.560 --> 00:00:24.930
In this case,

00:00:24.930 --> 00:00:26.750
we're creating the stream from the list,

00:00:26.750 --> 00:00:30.150
but there are many different ways you can create the stream.

00:00:30.150 --> 00:00:32.350
We're gonna talk about it in a minute,

00:00:32.350 --> 00:00:38.450
and then the second operation is the intermediate operations in the skins.

00:00:38.450 --> 00:00:44.920
We have a couple of them map buoyant and filter the job off.

00:00:44.920 --> 00:00:48.980
Intermediate operations would typically be take the stream,

00:00:48.980 --> 00:00:55.630
make changes to it and then written back the mortified stream so that you can further apply

00:00:55.630 --> 00:00:58.850
some more intimate operations on the modified stream.

00:00:58.850 --> 00:01:00.420
And finally,

00:01:00.420 --> 00:01:05.930
we have a terminal operation and this would be only one.

00:01:05.930 --> 00:01:10.140
The terminal operation will not return a stream.

00:01:10.140 --> 00:01:12.660
It will return some kind off a result.

00:01:12.660 --> 00:01:15.780
And once you call a terminal operation,

00:01:15.780 --> 00:01:18.170
you cannot for the work on the same stream.

00:01:18.170 --> 00:01:19.850
Now what?

00:01:19.850 --> 00:01:24.150
We're gonna talk about in this video is different ways to create a stream,

00:01:24.150 --> 00:01:25.400
different types,

00:01:25.400 --> 00:01:30.770
off intermediate operations and different types off terminal operations we have.

00:01:30.770 --> 00:01:31.520
First,

00:01:31.520 --> 00:01:33.650
let's talk about different ways.

00:01:33.650 --> 00:01:34.850
You can create a stream.

00:01:34.850 --> 00:01:41.990
Let me run this program so that we can simultaneously look at the results off this program

00:01:41.990 --> 00:01:41.990
.

00:01:41.990 --> 00:01:44.490
Let's expand this or collapse.

00:01:44.490 --> 00:01:49.970
Now for the sake off.

00:01:49.970 --> 00:01:51.240
Better visibility.

00:01:51.240 --> 00:01:54.050
I have closed all the extra panels,

00:01:54.050 --> 00:01:56.750
which we're not requiring at the moment.

00:01:56.750 --> 00:02:01.880
So in here we're creating a stream from the list,

00:02:01.880 --> 00:02:03.950
just as we did in here.

00:02:03.950 --> 00:02:05.750
We have a list,

00:02:05.750 --> 00:02:11.750
and I'm using them at the stream to create a stream out of this list.

00:02:11.750 --> 00:02:17.080
Prince Stream is a matter which I have just written to print.

00:02:17.080 --> 00:02:18.970
Whatever is there in the current stream,

00:02:18.970 --> 00:02:23.780
I'm going to use this method everywhere to show the result on the council.

00:02:23.780 --> 00:02:24.480
Now,

00:02:24.480 --> 00:02:28.100
you don't have to go look at what's happening inside this method.

00:02:28.100 --> 00:02:29.860
We're gonna talk about it later.

00:02:29.860 --> 00:02:30.750
Point of time,

00:02:30.750 --> 00:02:34.350
but Justin gives if you're curious.

00:02:34.350 --> 00:02:37.420
We're just using this method forage,

00:02:37.420 --> 00:02:41.780
which will let us look through all the elements in the stream and do something with it.

00:02:41.780 --> 00:02:49.580
And in here I'm just using us his up statement to print each one of those elements and a

00:02:49.580 --> 00:02:55.490
pending a Nuland character after that so that the output looks formatted.

00:02:55.490 --> 00:03:01.430
You can also create a stream from N.

00:03:01.430 --> 00:03:02.280
Harry.

00:03:02.280 --> 00:03:03.990
We have,

00:03:03.990 --> 00:03:04.300
ah,

00:03:04.300 --> 00:03:04.880
character.

00:03:04.880 --> 00:03:08.280
Every and I'm just going to pass that area,

00:03:08.280 --> 00:03:08.950
too.

00:03:08.950 --> 00:03:13.170
Stream dot off is a method name,

00:03:13.170 --> 00:03:15.400
and it's going to acts of this argument,

00:03:15.400 --> 00:03:21.950
the area and is going to return a character stream.

00:03:21.950 --> 00:03:24.260
And I'm just printing that.

00:03:24.260 --> 00:03:26.550
And that's exactly what you're seeing in here.

00:03:26.550 --> 00:03:28.370
Stream from Mary.

00:03:28.370 --> 00:03:33.760
If you wanted to create a stream out off a subsidy off in a way,

00:03:33.760 --> 00:03:35.230
you're going to use the method.

00:03:35.230 --> 00:03:40.650
Stream off the areas class and you would give three parameters.

00:03:40.650 --> 00:03:43.650
The 1st 1 is the Hera itself,

00:03:43.650 --> 00:03:47.080
starting Knicks and ending Index.

00:03:47.080 --> 00:03:47.380
Now,

00:03:47.380 --> 00:03:50.190
whatever you give in here is not inclusive.

00:03:50.190 --> 00:03:52.670
Which means if I give one and three,

00:03:52.670 --> 00:03:58.190
it's going to be Index one Index two and that's it.

00:03:58.190 --> 00:04:02.180
It's not going to take into account in next three,

00:04:02.180 --> 00:04:05.150
so we're gonna see P and P,

00:04:05.150 --> 00:04:08.300
and that's exactly what we have been here.

00:04:08.300 --> 00:04:19.180
You can also generate infinite stream by using Generate and I dread methods off stream.

00:04:19.180 --> 00:04:21.580
In this case,

00:04:21.580 --> 00:04:27.100
I'm trying to generate random integers a make news off the class random,

00:04:27.100 --> 00:04:29.550
and then I'm calling the next into method.

00:04:29.550 --> 00:04:31.890
This would generate a random integer,

00:04:31.890 --> 00:04:35.360
and whenever you use the matter generate,

00:04:35.360 --> 00:04:37.850
it's going to create an infinite stream.

00:04:37.850 --> 00:04:40.460
So we need to use some kind of determination,

00:04:40.460 --> 00:04:42.570
operation like limit,

00:04:42.570 --> 00:04:49.700
but some para meter to tell how Maney random into GIs do we want to generate.

00:04:49.700 --> 00:04:50.840
In this case,

00:04:50.840 --> 00:04:53.150
it's going to be three,

00:04:53.150 --> 00:04:56.250
and that's what we specified in here.

00:04:56.250 --> 00:04:57.760
Similarly,

00:04:57.760 --> 00:05:01.410
the iterate matter is going to generate infinite stream,

00:05:01.410 --> 00:05:06.550
and that's why we need to use a limiting operation like limit.

00:05:06.550 --> 00:05:14.640
The way the I tried mother works is it's going to generate an infinite stream with then as

00:05:14.640 --> 00:05:16.790
a first element off the stream.

00:05:16.790 --> 00:05:21.450
The second element is generated by applying the function.

00:05:21.450 --> 00:05:22.200
In this case,

00:05:22.200 --> 00:05:25.350
it's express one on the first element,

00:05:25.350 --> 00:05:33.920
so we get 11 and the third element is generated by applying the Function X plus one on the

00:05:33.920 --> 00:05:34.910
second element.

00:05:34.910 --> 00:05:36.110
Likewise,

00:05:36.110 --> 00:05:38.720
it keeps on generating infinite stream,

00:05:38.720 --> 00:05:43.690
but since we limited it to be off size three in the scales,

00:05:43.690 --> 00:05:45.770
it's going to generate only three elements.

00:05:45.770 --> 00:05:53.600
You can also build a stream on the fly like this by using the admitted.

00:05:53.600 --> 00:05:58.050
This methodology is not used very often.

00:05:58.050 --> 00:06:09.380
You can also create a stream from a string by using the Cavs matter of the string class and

00:06:09.380 --> 00:06:12.670
in here I'm just trying to print them on the console.

00:06:12.670 --> 00:06:17.050
So for locals say it's going to be 97 for P.

00:06:17.050 --> 00:06:19.990
It's going to be one month to likewise,

00:06:19.990 --> 00:06:22.380
we got rest off element in the stream.

00:06:22.380 --> 00:06:28.830
You can also use the method range to create a stream off integers.

00:06:28.830 --> 00:06:32.550
If you're going to call the range method off in stream,

00:06:32.550 --> 00:06:37.710
then this is going to create an in stream from 3 to 9.

00:06:37.710 --> 00:06:40.050
So it's 3 to 9,

00:06:40.050 --> 00:06:43.630
and do they know that it's going to ignore?

00:06:43.630 --> 00:06:46.520
And But if you want to include it,

00:06:46.520 --> 00:06:49.210
then you need to call this matter range closed.

00:06:49.210 --> 00:06:53.020
That would also include whatever you provide in here.

00:06:53.020 --> 00:06:56.610
So for closed range,

00:06:56.610 --> 00:06:58.460
we got 3 to 10.

00:06:58.460 --> 00:06:59.260
Similarly,

00:06:59.260 --> 00:07:01.930
if you call the Rayna Method off long stream,

00:07:01.930 --> 00:07:07.850
it's going to generate a stream that constitute elements off long type from 3 to 9.

00:07:07.850 --> 00:07:11.720
No,

00:07:11.720 --> 00:07:13.450
you may have a question on your mind.

00:07:13.450 --> 00:07:20.250
What's the difference between in stream and stream off integer?

00:07:20.250 --> 00:07:21.940
Well,

00:07:21.940 --> 00:07:25.700
stream appendage er is a stream off integers,

00:07:25.700 --> 00:07:29.050
which means I'm talking about the object integer.

00:07:29.050 --> 00:07:35.900
But whereas in stream is actually a stream off perimeter wind similarly in here,

00:07:35.900 --> 00:07:37.350
it's a stream off.

00:07:37.350 --> 00:07:39.800
Bring me to get a type long.

00:07:39.800 --> 00:07:43.040
I hope that's clear in the next.

00:07:43.040 --> 00:07:43.300
Really,

00:07:43.300 --> 00:07:47.500
we're gonna talk about some of the intermediate operations statute.

