WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.560
in this video,

00:00:01.560 --> 00:00:04.060
we're gonna talk about method references.

00:00:04.060 --> 00:00:05.910
But before that,

00:00:05.910 --> 00:00:11.200
let me just quickly talk about one of the good practices to follow when writing a lambrecks

00:00:11.200 --> 00:00:11.660
Russian.

00:00:11.660 --> 00:00:14.410
In our previous example,

00:00:14.410 --> 00:00:20.640
we have alarmed expression that has a section off court spanning across more Denver online

00:00:20.640 --> 00:00:20.640
.

00:00:20.640 --> 00:00:21.240
Now,

00:00:21.240 --> 00:00:22.410
if you remember,

00:00:22.410 --> 00:00:27.660
one of the primary reasons why you use Lambda Expressions is to reduce the number of lines

00:00:27.660 --> 00:00:30.180
off court and increase irritability.

00:00:30.180 --> 00:00:35.970
But there slammed expression is sort of destroying the purpose for having more than one

00:00:35.970 --> 00:00:36.730
line of court.

00:00:36.730 --> 00:00:40.690
And so we have to introduce additional lines with this Kali braces.

00:00:40.690 --> 00:00:46.180
So it's always important that you keep land expression in just one line.

00:00:46.180 --> 00:00:47.170
How do we do that?

00:00:47.170 --> 00:00:47.910
In this case?

00:00:47.910 --> 00:00:50.050
Just cut this court from here,

00:00:50.050 --> 00:00:52.150
create a method?

00:00:52.150 --> 00:00:57.550
Let's call it just met.

00:00:57.550 --> 00:01:06.610
And this method is going to take in exact same arguments into a and be.

00:01:06.610 --> 00:01:07.160
Of course,

00:01:07.160 --> 00:01:10.250
these arguments can be off any name.

00:01:10.250 --> 00:01:13.890
And then you'll have that block off court.

00:01:13.890 --> 00:01:15.920
No,

00:01:15.920 --> 00:01:16.870
from here,

00:01:16.870 --> 00:01:19.860
of course it is going to return.

00:01:19.860 --> 00:01:31.930
And now in here what you can do is it just call this method like so and just past those

00:01:31.930 --> 00:01:33.430
perimeters toe that mattered,

00:01:33.430 --> 00:01:34.780
and that's it.

00:01:34.780 --> 00:01:38.320
Now we have the lumber expression in just one line.

00:01:38.320 --> 00:01:38.690
Now,

00:01:38.690 --> 00:01:40.290
this is definitely a good practice,

00:01:40.290 --> 00:01:43.570
because off one another reason he is,

00:01:43.570 --> 00:01:45.970
you can have a better exception handling.

00:01:45.970 --> 00:01:48.190
You can have a try catch block in here,

00:01:48.190 --> 00:01:51.870
and then you can handle exceptions as you would need.

00:01:51.870 --> 00:01:55.850
But if you were to handle exception in the land expression again,

00:01:55.850 --> 00:01:58.600
that's going to add up additional lines off court,

00:01:58.600 --> 00:02:02.250
and it would more or less look like an anonymous class,

00:02:02.250 --> 00:02:06.080
which will destroy the sole purpose of using Lambda expressions.

00:02:06.080 --> 00:02:09.520
They just want to let you know the good practice.

00:02:09.520 --> 00:02:12.440
Now let's talk about the method of Francis.

00:02:12.440 --> 00:02:14.650
But that purpose I have this example.

00:02:14.650 --> 00:02:19.560
I have a couple of interfaces in here and one of the interface.

00:02:19.560 --> 00:02:26.410
I have a matter without any arguments and an interface to I have a matter defined with just

00:02:26.410 --> 00:02:27.160
one argument,

00:02:27.160 --> 00:02:28.050
which is a string.

00:02:28.050 --> 00:02:33.810
And then I just have one static method and the non static method.

00:02:33.810 --> 00:02:35.070
In here.

00:02:35.070 --> 00:02:40.630
I have three Lambda expressions and the 1st 1 I'm making use off,

00:02:40.630 --> 00:02:41.770
then depressed one,

00:02:41.770 --> 00:02:49.690
and I'm kind of providing the implementation or the matter and implementation is just

00:02:49.690 --> 00:02:51.510
calling this method static method,

00:02:51.510 --> 00:02:52.970
which has the actual code.

00:02:52.970 --> 00:02:55.080
It just prints one message.

00:02:55.080 --> 00:02:59.270
The statement is somewhat equal into this,

00:02:59.270 --> 00:03:00.690
that no arguments.

00:03:00.690 --> 00:03:05.010
And in here I'm using inter press,

00:03:05.010 --> 00:03:05.510
too,

00:03:05.510 --> 00:03:08.250
and I'm prodding implementation for this method.

00:03:08.250 --> 00:03:11.250
It's going to accept one argument.

00:03:11.250 --> 00:03:18.050
We have that in here and passing that argument toe the parental and matter like so.

00:03:18.050 --> 00:03:19.000
Similarly,

00:03:19.000 --> 00:03:23.660
we have another Lambda expression open to this one.

00:03:23.660 --> 00:03:29.510
And this time we're going to call the non static method and for that off course way to

00:03:29.510 --> 00:03:33.230
create an instance off this class matter difference example.

00:03:33.230 --> 00:03:35.040
That's what I did here,

00:03:35.040 --> 00:03:43.770
and all I'm doing in these three instructions is just called the method defined in these

00:03:43.770 --> 00:03:44.680
interfaces.

00:03:44.680 --> 00:03:46.550
Let's try to run the program.

00:03:46.550 --> 00:03:52.810
The output is as expected Now,

00:03:52.810 --> 00:03:53.810
if you observe,

00:03:53.810 --> 00:03:58.290
there are a couple of things that are common in all these lambda expressions.

00:03:58.290 --> 00:03:59.990
Those are number one.

00:03:59.990 --> 00:04:06.170
The only instruction you have in the Islamic expressions is you're just calling one method

00:04:06.170 --> 00:04:06.170
,

00:04:06.170 --> 00:04:12.620
and number two you're not making any kind off modifications to the Param Eter that you send

00:04:12.620 --> 00:04:13.250
to this method.

00:04:13.250 --> 00:04:14.510
For example,

00:04:14.510 --> 00:04:16.280
here we don't have any arguments.

00:04:16.280 --> 00:04:19.760
And so we're not passing in here and in here,

00:04:19.760 --> 00:04:23.960
we're having one argument and we're passing it to the printed method.

00:04:23.960 --> 00:04:25.050
Has an argument.

00:04:25.050 --> 00:04:26.780
And in here again,

00:04:26.780 --> 00:04:27.650
no arguments.

00:04:27.650 --> 00:04:29.550
And we're not passing anything.

00:04:29.550 --> 00:04:32.050
If these two conditions are met,

00:04:32.050 --> 00:04:34.740
then we can use matter,

00:04:34.740 --> 00:04:35.650
Princess.

00:04:35.650 --> 00:04:40.050
So in this case is sort of having this kind of expression in here.

00:04:40.050 --> 00:04:42.340
What you can do is,

00:04:42.340 --> 00:04:43.820
since this is a static method,

00:04:43.820 --> 00:04:53.750
you can use a class name and then use couple of Collins like Sil and get it off.

00:04:53.750 --> 00:04:56.460
These parentis is in here.

00:04:56.460 --> 00:04:57.530
And guess what?

00:04:57.530 --> 00:05:01.340
What you have in here is a method reference.

00:05:01.340 --> 00:05:07.760
So what this basically means is you're just telling the job watching machine that go call

00:05:07.760 --> 00:05:15.500
this method in this class and passed the list of arguments as it is to this method again.

00:05:15.500 --> 00:05:17.570
It's never mandatory to use Matara,

00:05:17.570 --> 00:05:18.360
Francis,

00:05:18.360 --> 00:05:20.790
instead off our land expression.

00:05:20.790 --> 00:05:21.950
In fact,

00:05:21.950 --> 00:05:26.810
I personally feel and expression is more readable than a matter difference.

00:05:26.810 --> 00:05:32.930
But at times this might come in handing so we talk even if you don't watch this video.

00:05:32.930 --> 00:05:33.780
To be honest,

00:05:33.780 --> 00:05:39.000
method differences are just like an alternate representation off Lambda Expressions.

00:05:39.000 --> 00:05:42.330
Let's take a look at a few more examples so that you get a sense off.

00:05:42.330 --> 00:05:43.910
What matter?

00:05:43.910 --> 00:05:46.770
Differences are so in here again.

00:05:46.770 --> 00:05:50.480
This land expression qualifies for those two conditions.

00:05:50.480 --> 00:05:51.950
Number one,

00:05:51.950 --> 00:05:52.630
the Lamberts.

00:05:52.630 --> 00:05:56.900
Russian has to have only one instruction and that to calling a method.

00:05:56.900 --> 00:05:57.850
In this case,

00:05:57.850 --> 00:06:00.910
we're calling the printed matter and condition number two,

00:06:00.910 --> 00:06:05.550
we're passing the argument as it is to this method has an argument.

00:06:05.550 --> 00:06:07.910
Since these two conditions are met,

00:06:07.910 --> 00:06:11.590
we can certainly make use off matador printers in here as well.

00:06:11.590 --> 00:06:22.130
So we get it off this piece off instruction and just add a couple of Collins and get it off

00:06:22.130 --> 00:06:22.130
.

00:06:22.130 --> 00:06:24.660
Parentis is and everything inside it.

00:06:24.660 --> 00:06:25.720
So again,

00:06:25.720 --> 00:06:31.470
what this means is you're telling the job little machine that go call this method and

00:06:31.470 --> 00:06:38.090
passed the arguments exactly as it is to this method in this instruction.

00:06:38.090 --> 00:06:39.410
That's exactly what we're doing.

00:06:39.410 --> 00:06:41.250
We're calling this method,

00:06:41.250 --> 00:06:44.300
and then we're passing some kind of an argument in here,

00:06:44.300 --> 00:06:48.950
and that argument would be passed as it is to the parental method.

00:06:48.950 --> 00:06:51.570
And we know what the Pentagon at that.

00:06:51.570 --> 00:06:54.750
Does it just print that string on the council.

00:06:54.750 --> 00:06:59.200
How about a non static method reciting inside a class,

00:06:59.200 --> 00:07:00.270
but that,

00:07:00.270 --> 00:07:00.750
obviously,

00:07:00.750 --> 00:07:01.940
and to create an object?

00:07:01.940 --> 00:07:08.150
And then you call that method and the way we do it with method reference by the very even

00:07:08.150 --> 00:07:11.070
this climbed expression qualifies or two conditions.

00:07:11.070 --> 00:07:15.940
So we get it off this and parent Assis,

00:07:15.940 --> 00:07:21.740
and we're going to use a couple of Collins and that's it.

00:07:21.740 --> 00:07:23.610
You have the matter difference.

00:07:23.610 --> 00:07:29.880
Now let's go back to our previous examples and see where we can use Method of friends is

00:07:29.880 --> 00:07:31.480
instead off alarmed expression.

00:07:31.480 --> 00:07:33.380
In this example,

00:07:33.380 --> 00:07:38.160
we have a Lambda expression that just has one line of code,

00:07:38.160 --> 00:07:40.080
and we're just calling him method.

00:07:40.080 --> 00:07:42.500
So condition number one is met.

00:07:42.500 --> 00:07:48.380
Condition number two way to pass the argument as it is to that method in the scarce.

00:07:48.380 --> 00:07:49.580
We're not doing that.

00:07:49.580 --> 00:07:53.860
We're passing in some kind of an argument when in here we don't have any arguments,

00:07:53.860 --> 00:07:58.690
so there's land expression doesn't qualify for mata difference.

00:07:58.690 --> 00:08:01.420
If this matter does not have an argument,

00:08:01.420 --> 00:08:04.960
then we can make use off the method differences.

00:08:04.960 --> 00:08:06.350
Same in here.

00:08:06.350 --> 00:08:08.250
You cannot use a matter difference.

00:08:08.250 --> 00:08:11.950
Let's go to this example even in here.

00:08:11.950 --> 00:08:14.500
Condition number one is met,

00:08:14.500 --> 00:08:22.070
but condition number two didn't meet because we have couple off arguments being passed and

00:08:22.070 --> 00:08:24.200
we're not really passing those two arguments.

00:08:24.200 --> 00:08:24.950
As it is,

00:08:24.950 --> 00:08:27.890
we're making some computation here.

00:08:27.890 --> 00:08:28.900
We're finding the sun.

00:08:28.900 --> 00:08:33.750
So even though Islam the expression does not qualify for met the difference.

00:08:33.750 --> 00:08:35.710
Let's go here,

00:08:35.710 --> 00:08:36.760
In here.

00:08:36.760 --> 00:08:39.120
We have couple of arguments by the Weaken.

00:08:39.120 --> 00:08:44.190
Get it off the data type in here because compiler can figure that out by looking at the

00:08:44.190 --> 00:08:44.960
interface.

00:08:44.960 --> 00:08:46.610
So let's get it up.

00:08:46.610 --> 00:08:47.650
This now.

00:08:47.650 --> 00:08:48.350
In here,

00:08:48.350 --> 00:08:53.790
we have only one line off court and that two calling it mattered and condition.

00:08:53.790 --> 00:08:59.510
Number two is also met because we're passing the argument as it is to this method.

00:08:59.510 --> 00:09:00.940
So guess what?

00:09:00.940 --> 00:09:02.700
We can use them at the difference.

00:09:02.700 --> 00:09:04.950
Since this is a static method,

00:09:04.950 --> 00:09:08.870
we can say class name,

00:09:08.870 --> 00:09:11.810
double colon and the Method name.

00:09:11.810 --> 00:09:13.130
And of course,

00:09:13.130 --> 00:09:15.370
now we can get rid off these arguments.

00:09:15.370 --> 00:09:17.090
This para meters in here.

00:09:17.090 --> 00:09:19.050
This worked like a charm,

00:09:19.050 --> 00:09:26.300
although there is one more addition in here since we were just passing this as an argument

00:09:26.300 --> 00:09:27.020
to matter.

00:09:27.020 --> 00:09:30.870
Only ones violently just directly past this matter.

00:09:30.870 --> 00:09:36.150
Difference has an argument directly without having to create a reference type,

00:09:36.150 --> 00:09:44.490
because now compiler can figure out the which interferes does this when the expression or a

00:09:44.490 --> 00:09:49.490
matter difference belonged to by just looking at the argument type being accepted in this

00:09:49.490 --> 00:09:49.850
method.

00:09:49.850 --> 00:09:53.250
And same is the case with our previous examples.

00:09:53.250 --> 00:09:54.580
In fact,

00:09:54.580 --> 00:10:03.070
we can just copied Islam expression in here and then have it in here has just fine.

00:10:03.070 --> 00:10:10.090
That's where the part now I hope you got a sense of what that the differences are.

00:10:10.090 --> 00:10:11.970
And if you're still with me,

00:10:11.970 --> 00:10:17.930
let's also talk about constructor reference us to enter off,

00:10:17.930 --> 00:10:19.320
sending him at the difference.

00:10:19.320 --> 00:10:21.570
You would send a constructor reference,

00:10:21.570 --> 00:10:25.490
and that's what we're going to talk about in this example.

00:10:25.490 --> 00:10:26.760
In this example,

00:10:26.760 --> 00:10:30.840
I just have one interferes with an method which takes in one argument,

00:10:30.840 --> 00:10:34.180
and I have an implementation off that method,

00:10:34.180 --> 00:10:38.950
using an anonymous in the plants and the implementation part.

00:10:38.950 --> 00:10:43.160
All it does is return and new string object.

00:10:43.160 --> 00:10:43.680
Essentially,

00:10:43.680 --> 00:10:46.990
this instruction would call the constructor of the string class.

00:10:46.990 --> 00:10:51.180
The string class has multiple constructors in it when off,

00:10:51.180 --> 00:10:54.950
which is going to accept a string as an argument.

00:10:54.950 --> 00:10:58.300
Now we can certainly make this alarmed expression.

00:10:58.300 --> 00:11:02.330
Get it off the class declaration part.

00:11:02.330 --> 00:11:04.740
And since there is no class,

00:11:04.740 --> 00:11:07.850
no meaning off having a new operator again,

00:11:07.850 --> 00:11:12.490
all this information can be picked up from the interface being referenced.

00:11:12.490 --> 00:11:17.730
We now have a lambda expression was went to have herro mark again.

00:11:17.730 --> 00:11:21.060
Since this is just one line off court again,

00:11:21.060 --> 00:11:27.360
get it off this Kali braces and also the written type because that can be figured out by

00:11:27.360 --> 00:11:30.010
the compiler just by looking at the interface.

00:11:30.010 --> 00:11:34.890
We don't need the data type in here now.

00:11:34.890 --> 00:11:40.000
Is this land expression qualified for matter difference or a constructor reference?

00:11:40.000 --> 00:11:41.720
The answer is of course,

00:11:41.720 --> 00:11:42.060
yes,

00:11:42.060 --> 00:11:44.900
because condition number one is met.

00:11:44.900 --> 00:11:49.520
We're just calling one constructor and strove a method and condition.

00:11:49.520 --> 00:11:50.310
Number two.

00:11:50.310 --> 00:11:54.360
We're passing the arguments as a tease to this constructor.

00:11:54.360 --> 00:11:59.950
So all you're gonna have to do is you're going to say the class name string,

00:11:59.950 --> 00:12:04.950
double Colon and said new that told it is to it.

00:12:04.950 --> 00:12:11.300
Now you may ask me which constructor does this constructor prince call?

00:12:11.300 --> 00:12:18.490
It depends on the type off argument being passed in here since this is a string.

00:12:18.490 --> 00:12:25.880
There's going to call the constructor that except exactly one argument and off type string

00:12:25.880 --> 00:12:25.880
.

00:12:25.880 --> 00:12:30.900
Let's run this program a bit of it.

00:12:30.900 --> 00:12:31.350
I'm good.

00:12:31.350 --> 00:12:33.010
Hope it makes ends.

00:12:33.010 --> 00:12:34.750
See you in my next radio.

