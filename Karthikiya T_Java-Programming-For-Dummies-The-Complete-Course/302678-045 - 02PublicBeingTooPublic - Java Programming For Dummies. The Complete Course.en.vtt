WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:04.650
One of the problems that were existing before the Java nine module system

00:00:04.650 --> 00:00:08.700
came into existence is a problem of public being to public.

00:00:08.700 --> 00:00:10.275
Let me explain what I mean.

00:00:10.275 --> 00:00:13.980
Say that you have an application or a project called email app,

00:00:13.980 --> 00:00:17.085
which is meant to be used to send emails.

00:00:17.085 --> 00:00:18.900
Just as with any other project,

00:00:18.900 --> 00:00:21.345
even this would have multiple packages.

00:00:21.345 --> 00:00:25.610
Now, let say that the classes inside the uterus package

00:00:25.610 --> 00:00:30.455
are only meant to be used within this project and not outside this project.

00:00:30.455 --> 00:00:32.855
Before Java nine model system.

00:00:32.855 --> 00:00:36.275
The only way you can accomplish this is by making

00:00:36.275 --> 00:00:40.190
all the classes inside the uterus package as public.

00:00:40.190 --> 00:00:46.175
By doing so, those classes can be accessed outside the package where they're residing in.

00:00:46.175 --> 00:00:48.980
But the problem is there are two public,

00:00:48.980 --> 00:00:53.750
meaning that some other project or an app can also access these files.

00:00:53.750 --> 00:00:57.320
For example, let's say that you have another project called banking app,

00:00:57.320 --> 00:01:00.560
and it wants to send emails to their customers or whatever.

00:01:00.560 --> 00:01:02.060
So obviously they're going to use

00:01:02.060 --> 00:01:05.775
the email app library by importing it into their project.

00:01:05.775 --> 00:01:09.369
The problem here is it can also access the utils classes,

00:01:09.369 --> 00:01:13.540
which were originally meant to be used only within the email app project.

00:01:13.540 --> 00:01:15.400
So this is clearly a problem.

00:01:15.400 --> 00:01:20.500
What this means is once after you deploy your application onto the remote server,

00:01:20.500 --> 00:01:25.810
the class loader would actually load all the classes in all the jar files and

00:01:25.810 --> 00:01:30.820
all the classes that were marked as public are visible to every other class.

00:01:30.820 --> 00:01:34.120
So that's definitely something that we need to work on.

00:01:34.120 --> 00:01:37.180
We can actually work around this issue by putting

00:01:37.180 --> 00:01:42.609
security checks and check to see if the call is coming from the right sources.

00:01:42.609 --> 00:01:44.785
But it is not only inefficient,

00:01:44.785 --> 00:01:48.239
but also takes a lot of effort to implement.

00:01:48.239 --> 00:01:53.105
What are the popular examples of this is the class unsafe of Java library.

00:01:53.105 --> 00:01:56.090
This class would allow us to manipulate with the memory.

00:01:56.090 --> 00:01:59.270
And this is originally created to be used by

00:01:59.270 --> 00:02:03.440
the core Java files to implement code Java functionality.

00:02:03.440 --> 00:02:09.694
But this class is also being used by a lot of other tools like Hadoop, power mock, etc.

00:02:09.694 --> 00:02:15.935
So definitely way to address this modulus will actually help us address this issue.

00:02:15.935 --> 00:02:19.980
And we'll see how in coming lectures.
