WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.020
in this video,

00:00:01.020 --> 00:00:03.650
I'm going to talk about the joint method,

00:00:03.650 --> 00:00:05.430
the joint method.

00:00:05.430 --> 00:00:07.450
Wait for the threat to die.

00:00:07.450 --> 00:00:09.210
Let me show you what I mean.

00:00:09.210 --> 00:00:11.740
Let's create a threat for this purpose,

00:00:11.740 --> 00:00:14.180
and I'm going to use an almost class for that.

00:00:14.180 --> 00:00:15.890
So I said,

00:00:15.890 --> 00:00:30.940
Thread t One new tread and inside it I'm going to say New run nable.

00:00:30.940 --> 00:00:34.750
If it chooses rentable,

00:00:34.750 --> 00:00:41.660
interferes and hit Enter then Eclipse is going to do the job for us.

00:00:41.660 --> 00:00:49.230
It's going to give us a skeleton code off the anonymous class with the only matter that

00:00:49.230 --> 00:00:51.120
needs to be implemented,

00:00:51.120 --> 00:00:51.990
which is run.

00:00:51.990 --> 00:00:58.150
And in here we can have our code since out,

00:00:58.150 --> 00:01:01.890
I'm just going to say from T one,

00:01:01.890 --> 00:01:06.050
and from here I'm going to start the thread,

00:01:06.050 --> 00:01:17.240
and after that I want to print a statement that this message is from the main threat.

00:01:17.240 --> 00:01:21.070
Let's run the program.

00:01:21.070 --> 00:01:25.650
Looks like the main finished executing before,

00:01:25.650 --> 00:01:27.780
before the threat D one.

00:01:27.780 --> 00:01:33.440
Now let's say we wanted to pause exhibition off the main threat until the thread t one

00:01:33.440 --> 00:01:35.870
finishes or come to a dead state.

00:01:35.870 --> 00:01:45.150
You're going to use the joint method off t one and this method is going to throw

00:01:45.150 --> 00:01:46.490
interrupter exception.

00:01:46.490 --> 00:01:50.750
Let's use throws declaration Ideally supposed to handle it.

00:01:50.750 --> 00:01:51.450
Now,

00:01:51.450 --> 00:01:53.920
when the interpreter comes across with this line,

00:01:53.920 --> 00:01:57.290
the interpreter I will pause the calling thread,

00:01:57.290 --> 00:01:58.820
which is the main threat,

00:01:58.820 --> 00:02:02.280
and it waits for district to get finished.

00:02:02.280 --> 00:02:03.570
And once it's done,

00:02:03.570 --> 00:02:06.550
once the threat t one comes into dead state,

00:02:06.550 --> 00:02:12.730
only then will it go ahead and execute rest of the instructions in the calling threat,

00:02:12.730 --> 00:02:14.090
which is the main trick.

00:02:14.090 --> 00:02:15.420
No,

00:02:15.420 --> 00:02:16.160
ideally,

00:02:16.160 --> 00:02:17.830
Asper this program.

00:02:17.830 --> 00:02:21.490
We should let the tread t one finish its task.

00:02:21.490 --> 00:02:29.230
So we should see this message and then we see this message that's on the program pretty

00:02:29.230 --> 00:02:29.380
well.

00:02:29.380 --> 00:02:29.750
I'm good.

00:02:29.750 --> 00:02:35.670
You can also tell the maximum time that you want to wait.

00:02:35.670 --> 00:02:42.490
So if I say 10,000 milliseconds which is equal into 10 seconds,

00:02:42.490 --> 00:02:46.450
if the threat t one is going to take more than 10 seconds,

00:02:46.450 --> 00:02:51.270
then the main trade will not wait to godless off 31.

00:02:51.270 --> 00:02:52.650
Finished or not,

00:02:52.650 --> 00:02:56.920
it will move ahead after 10 seconds in the scarce.

00:02:56.920 --> 00:02:57.810
Definitely.

00:02:57.810 --> 00:02:58.690
Ah,

00:02:58.690 --> 00:03:02.990
we don't have instructions that will take more than 10 seconds.

00:03:02.990 --> 00:03:07.590
So let's run the program incredible and good.

00:03:07.590 --> 00:03:08.270
No,

00:03:08.270 --> 00:03:16.200
Let's do something in here that will keep the streak alive for more than 10 seconds and for

00:03:16.200 --> 00:03:16.810
their burgers,

00:03:16.810 --> 00:03:19.150
I'm going to use the method called sleep,

00:03:19.150 --> 00:03:23.250
which isn't the thread class thread dot sleep,

00:03:23.250 --> 00:03:28.350
and you're going to provide the time that you want this threat to sleep.

00:03:28.350 --> 00:03:42.870
I would say 30 seconds or let's make this 10 seconds and let's make this two seconds again

00:03:42.870 --> 00:03:42.870
.

00:03:42.870 --> 00:03:44.430
This is going to throw interpret.

00:03:44.430 --> 00:03:45.100
Exception.

00:03:45.100 --> 00:03:49.460
Let we need to handle it because this is a checked exception.

00:03:49.460 --> 00:03:51.000
Credible and good.

00:03:51.000 --> 00:03:51.790
So now,

00:03:51.790 --> 00:03:52.760
in this case,

00:03:52.760 --> 00:03:57.150
we're waiting at Max two seconds for the thread to get finished.

00:03:57.150 --> 00:04:01.300
But in here it is taken more than two seconds now.

00:04:01.300 --> 00:04:02.210
Ideally,

00:04:02.210 --> 00:04:04.880
we should say this message first,

00:04:04.880 --> 00:04:09.140
and then we should see this message from thread t one.

00:04:09.140 --> 00:04:10.250
Let's on the program.

00:04:10.250 --> 00:04:14.510
So the main trade,

00:04:14.510 --> 00:04:17.280
weighted for two seconds for 212 get produced,

00:04:17.280 --> 00:04:20.930
and it went ahead with rest of the instructions.

00:04:20.930 --> 00:04:21.700
Meanwhile,

00:04:21.700 --> 00:04:22.890
after 10 seconds,

00:04:22.890 --> 00:04:28.210
even t even got executive Incredible and good.

00:04:28.210 --> 00:04:33.350
Let me demonstrate to you something interesting.

00:04:33.350 --> 00:04:34.310
Let's get it out.

00:04:34.310 --> 00:04:39.550
This wait time and I'm going to create a couple of more threads.

00:04:39.550 --> 00:04:52.450
I'll call these t two and T three from TD to and from t three and here I'm going to start

00:04:52.450 --> 00:04:56.330
all those three threads for now.

00:04:56.330 --> 00:04:58.750
Let's get rid off this joint statement.

00:04:58.750 --> 00:05:02.190
T two t three.

00:05:02.190 --> 00:05:07.160
Let's run the program now All these threats.

00:05:07.160 --> 00:05:11.650
Once we use the matter start they all go into rentable state,

00:05:11.650 --> 00:05:18.490
and it's up to the thread scheduler to decide which stead to prioritize.

00:05:18.490 --> 00:05:20.530
And it's at the moment,

00:05:20.530 --> 00:05:22.050
not within our control.

00:05:22.050 --> 00:05:25.610
So what I mean by that is every time around this program,

00:05:25.610 --> 00:05:29.280
we would say different sequins off execution off these threats.

00:05:29.280 --> 00:05:33.660
This time it's main trip t two,

00:05:33.660 --> 00:05:35.050
t three and t one.

00:05:35.050 --> 00:05:41.150
This time it's main and T three t 21.

00:05:41.150 --> 00:05:42.950
You see the difference right?

00:05:42.950 --> 00:05:47.290
This time it's t one T two and Tito.

00:05:47.290 --> 00:05:48.350
It's not predictable,

00:05:48.350 --> 00:05:49.240
however,

00:05:49.240 --> 00:05:52.280
sometimes you want to execute trades in sequence.

00:05:52.280 --> 00:05:59.450
Let's say I wanted to execute T one first and then t two and then t three and then the main

00:05:59.450 --> 00:06:04.720
trade I concertante make use off the join method.

00:06:04.720 --> 00:06:13.700
I'm going to say t one don't join so the main threat,

00:06:13.700 --> 00:06:20.690
but pause right here before it goes ahead and starts the second thread.

00:06:20.690 --> 00:06:26.550
Same is the case here.

00:06:26.550 --> 00:06:35.650
And here it waits were t two to get into that state And Tim with t two in here.

00:06:35.650 --> 00:06:39.220
So now threats will go in sequence.

00:06:39.220 --> 00:06:42.830
That's from the program T one t two,

00:06:42.830 --> 00:06:45.520
t three and mean no matter how many times you run,

00:06:45.520 --> 00:06:47.340
the sequence wouldn't change.

00:06:47.340 --> 00:06:58.080
But what if I do something like this that have all these joint statements in one section

00:06:58.080 --> 00:07:03.740
and t one t two t three in another section?

00:07:03.740 --> 00:07:10.760
Can you make a guess on the output off this program?

00:07:10.760 --> 00:07:14.460
Treads were execute in no particular order.

00:07:14.460 --> 00:07:15.850
Let me just show it to you,

00:07:15.850 --> 00:07:25.770
t one t two t three t one t three t two It's not certain that the sequence is always the

00:07:25.770 --> 00:07:26.190
same.

00:07:26.190 --> 00:07:28.210
The reason is,

00:07:28.210 --> 00:07:30.740
I said when we said to wander,

00:07:30.740 --> 00:07:32.850
join the calling thread.

00:07:32.850 --> 00:07:33.540
In this case,

00:07:33.540 --> 00:07:38.550
the main threat is going to wait for it even to get finished or come to that state.

00:07:38.550 --> 00:07:41.210
Since we use the joint method.

00:07:41.210 --> 00:07:43.710
After we started all these treads,

00:07:43.710 --> 00:07:46.990
all these threats started executing simultaneously.

00:07:46.990 --> 00:07:48.850
I hope that's clear.

00:07:48.850 --> 00:07:51.050
See you in my next video

