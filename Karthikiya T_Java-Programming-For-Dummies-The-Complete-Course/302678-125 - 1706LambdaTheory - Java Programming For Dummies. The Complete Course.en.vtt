WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.440
in this video,

00:00:01.440 --> 00:00:07.340
we're gonna take a look at the key difference between using an anonymous class versus

00:00:07.340 --> 00:00:08.390
slammed expression.

00:00:08.390 --> 00:00:14.580
We may think that Lambda Expression is a compact way off writing and on most classes or

00:00:14.580 --> 00:00:18.770
some off us may assume that whenever we write a Lambda expression,

00:00:18.770 --> 00:00:23.560
the compiler is going to replace the land expression with anonymous class.

00:00:23.560 --> 00:00:25.980
But that's not the case.

00:00:25.980 --> 00:00:28.150
They both are completely different.

00:00:28.150 --> 00:00:32.130
Let me demonstrate that with an example in this example,

00:00:32.130 --> 00:00:35.190
I'm creating couple off threads and I'm starting them.

00:00:35.190 --> 00:00:43.650
Let me just try to run this program without creating these drugs around.

00:00:43.650 --> 00:00:47.430
This program obviously won't see anything on the control.

00:00:47.430 --> 00:00:52.680
Now let's go to the folder where the dark class violence generated.

00:00:52.680 --> 00:00:54.370
I mean the bite cord.

00:00:54.370 --> 00:00:55.920
For that,

00:00:55.920 --> 00:00:59.630
I'm going to right click on this file and then click Properties.

00:00:59.630 --> 00:01:04.700
I copied the location off this project.

00:01:04.700 --> 00:01:13.290
Have already done that in here Go toe bin directory.

00:01:13.290 --> 00:01:18.800
The source directory would considered all the source files dot Java files,

00:01:18.800 --> 00:01:21.750
and if you go toe bin directory,

00:01:21.750 --> 00:01:25.740
you would find their corresponding dark class files.

00:01:25.740 --> 00:01:26.140
I mean,

00:01:26.140 --> 00:01:34.270
compiled files or bite code ready for JV into process now if you notice for our class them

00:01:34.270 --> 00:01:38.090
the example to we just have one class for that.

00:01:38.090 --> 00:01:45.000
But let's see what would happen once I un commend those two and on most classes.

00:01:45.000 --> 00:01:49.420
So let me just on come in.

00:01:49.420 --> 00:01:51.980
This Let me run the program again.

00:01:51.980 --> 00:01:53.230
No,

00:01:53.230 --> 00:01:55.200
If you go to the bin directory,

00:01:55.200 --> 00:02:02.150
you would notice there a couple off more files created with dollar one and dollar too.

00:02:02.150 --> 00:02:10.180
These two are the dark class files off the anonymous classes we created inside the lamp

00:02:10.180 --> 00:02:11.180
example to.

00:02:11.180 --> 00:02:16.950
So what this means is we got to an almost classes for each thread.

00:02:16.950 --> 00:02:20.890
And so we got a couple off additional dark class files.

00:02:20.890 --> 00:02:21.490
No,

00:02:21.490 --> 00:02:25.950
let's replace these with Lambda expression and see what's going to happen.

00:02:25.950 --> 00:02:35.100
Off course we can get it off this Kali braces.

00:02:35.100 --> 00:02:43.510
And this in my colon like so and sending goes in here as well.

00:02:43.510 --> 00:02:46.650
Let's call it from T two.

00:02:46.650 --> 00:02:52.850
That's on the program and you would see the output has expected.

00:02:52.850 --> 00:02:56.470
But if you go to the bin directory now,

00:02:56.470 --> 00:03:00.550
you won't see those extra door class files.

00:03:00.550 --> 00:03:07.460
The reason why the compiler did not generate the dark less file is compiler treats Lambda

00:03:07.460 --> 00:03:09.200
expressions differently.

00:03:09.200 --> 00:03:11.410
When you write a Lambda expression,

00:03:11.410 --> 00:03:14.750
we're not talking about classes and objects,

00:03:14.750 --> 00:03:17.460
which are object oriented programming terms,

00:03:17.460 --> 00:03:24.430
but we're talking about actions to be performed or functionality to be executed has evolved

00:03:24.430 --> 00:03:24.430
.

00:03:24.430 --> 00:03:28.440
We mentioned earlier that when you write a Lambda expression,

00:03:28.440 --> 00:03:31.190
you need to start thinking differently.

00:03:31.190 --> 00:03:35.340
You need to think in a manner that a functional programmer thinks.

00:03:35.340 --> 00:03:39.000
But since we're not much into functional programming,

00:03:39.000 --> 00:03:42.200
we don't need to know anything more than this.

00:03:42.200 --> 00:03:50.070
But just remember that Lambda expression is not an easy the presentation off anonymous

00:03:50.070 --> 00:03:50.670
classes.

00:03:50.670 --> 00:03:54.850
I just want to clarify that with this video correct.

