WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.240
in this video,

00:00:01.240 --> 00:00:04.080
we'll talk about WHL mission architecture.

00:00:04.080 --> 00:00:06.800
JBM is a pretty complex architecture.

00:00:06.800 --> 00:00:08.210
That being said,

00:00:08.210 --> 00:00:10.850
we don't need to know each and every component in it.

00:00:10.850 --> 00:00:15.760
I'm just going to walk you through some of the major component that will add some value to

00:00:15.760 --> 00:00:16.360
your learning.

00:00:16.360 --> 00:00:18.180
Moreover,

00:00:18.180 --> 00:00:24.200
there are multiple vendors for JBM and each wonder will have their own architecture for

00:00:24.200 --> 00:00:24.980
their jbm.

00:00:24.980 --> 00:00:28.650
So no matter what architecture I introduced to you,

00:00:28.650 --> 00:00:31.480
it won't be a complete architecture.

00:00:31.480 --> 00:00:37.510
So let's just focus on some of the major components that are commonly found in any job

00:00:37.510 --> 00:00:38.470
virtual machine.

00:00:38.470 --> 00:00:41.850
And I bet you don't need to know anything more than that.

00:00:41.850 --> 00:00:43.080
First of all,

00:00:43.080 --> 00:00:46.840
you have your source file or the Java file,

00:00:46.840 --> 00:00:52.080
we compile it and then we get a door class file or the bite code.

00:00:52.080 --> 00:00:59.400
Now this not class file will be fed into the Java virtual machine and this is where all the

00:00:59.400 --> 00:01:00.450
magic happens.

00:01:00.450 --> 00:01:03.490
Now let's go deep into it at a very high level.

00:01:03.490 --> 00:01:11.260
The three major components in JBM Number one is class load US up system which is majorly

00:01:11.260 --> 00:01:17.060
responsible for luring all the required class wilds into the system now I'm not going to

00:01:17.060 --> 00:01:19.770
write the complete words that would mess up everything.

00:01:19.770 --> 00:01:23.580
So I'm just going to represent with your upper case letters like,

00:01:23.580 --> 00:01:28.750
So you may want to pull a pen and paper and take down the notes if you're interested.

00:01:28.750 --> 00:01:29.470
Now,

00:01:29.470 --> 00:01:33.370
the second major component is execution engine,

00:01:33.370 --> 00:01:36.930
and we'll have things like just in time.

00:01:36.930 --> 00:01:37.510
Compiler,

00:01:37.510 --> 00:01:38.120
interpreter,

00:01:38.120 --> 00:01:38.770
etcetera.

00:01:38.770 --> 00:01:46.030
And the term major component is run time data access and is majorly responsible for

00:01:46.030 --> 00:01:50.250
fulfilling all the memory needs for jbm to run your code.

00:01:50.250 --> 00:01:51.970
Now let's go deep into it.

00:01:51.970 --> 00:01:57.090
The first component that comes into this picture is class flora subsystem.

00:01:57.090 --> 00:02:03.700
The class Laura Subsystem is majorly responsible for loading the class wiles and in order

00:02:03.700 --> 00:02:05.710
to perform luring,

00:02:05.710 --> 00:02:09.490
there are few other sub components that come into picture.

00:02:09.490 --> 00:02:11.720
Number one is Lauder.

00:02:11.720 --> 00:02:13.620
The job off loader has,

00:02:13.620 --> 00:02:18.650
the name suggests is to lure all the necessary files into the Java virtual machine to run

00:02:18.650 --> 00:02:19.380
the program.

00:02:19.380 --> 00:02:22.980
The loader is actually combination off Three different things.

00:02:22.980 --> 00:02:25.990
One is bootstrap class loader.

00:02:25.990 --> 00:02:32.130
Bootstrap class slaughter is a program that will lord all the class files that are

00:02:32.130 --> 00:02:34.490
essential to run your program.

00:02:34.490 --> 00:02:35.570
Essentially,

00:02:35.570 --> 00:02:42.230
it started our jar file from your Gerica directory artist stands for run time,

00:02:42.230 --> 00:02:45.710
and we thought loading opted are jar into the system.

00:02:45.710 --> 00:02:53.650
JBM is virtually useless because the Arctic George are constitute all the key files that JV

00:02:53.650 --> 00:02:55.680
amuses to run your program.

00:02:55.680 --> 00:02:56.370
Also,

00:02:56.370 --> 00:03:02.590
it's worth noting that this bootstrapped last loader program is actually written using in a

00:03:02.590 --> 00:03:10.570
two language like C C plus plus the seconds up competent off loader is called extension

00:03:10.570 --> 00:03:16.860
class Loader and is responsible for luring all the Dodger files that are in extension

00:03:16.860 --> 00:03:17.580
directory.

00:03:17.580 --> 00:03:22.850
This is essentially the folder named UX T in your Gerica directory,

00:03:22.850 --> 00:03:24.420
and typically,

00:03:24.420 --> 00:03:28.800
if you want to use any external class files or dark jar files,

00:03:28.800 --> 00:03:31.360
you would keep them in this extension directory.

00:03:31.360 --> 00:03:36.880
We've already talked about a scenario where you're using an external door class file.

00:03:36.880 --> 00:03:37.860
By the way,

00:03:37.860 --> 00:03:41.310
if you don't know what the Dodger file for now,

00:03:41.310 --> 00:03:45.840
you can think off it as combination off one or more dark class files.

00:03:45.840 --> 00:03:52.270
So whatever you keep in the extension directory will automatically be taken into the jbm.

00:03:52.270 --> 00:03:54.880
Now the thirds of competent off Lueder,

00:03:54.880 --> 00:03:58.310
he is called Application Class Loader,

00:03:58.310 --> 00:04:03.450
which is responsible for luring all the class wiles from the class part.

00:04:03.450 --> 00:04:04.520
In the beginning,

00:04:04.520 --> 00:04:05.440
off this course,

00:04:05.440 --> 00:04:07.970
we talked about configuring the class part.

00:04:07.970 --> 00:04:14.450
Whatever recites in that class part will be loaded into jbm by application class loader.

00:04:14.450 --> 00:04:19.990
Now the second component off class loaded subsystem is linker.

00:04:19.990 --> 00:04:26.150
The job off linker is to verify that the generator bite court is in proper shape.

00:04:26.150 --> 00:04:27.660
Basically,

00:04:27.660 --> 00:04:32.990
it would sort of perform a complaints test and would see if the bite court is complained

00:04:32.990 --> 00:04:35.590
are compatible with the Java virtual machine.

00:04:35.590 --> 00:04:38.310
If there is any problem with the bite court,

00:04:38.310 --> 00:04:39.920
we would see a runtime error.

00:04:39.920 --> 00:04:42.410
You would almost never come across with this error,

00:04:42.410 --> 00:04:47.760
though the linker will also allocate memory for all the variables present inside the class

00:04:47.760 --> 00:04:48.150
file,

00:04:48.150 --> 00:04:55.380
which also includes static variables and not just a locating the memory but also getting

00:04:55.380 --> 00:04:57.770
the variables with their default values.

00:04:57.770 --> 00:04:59.350
For example,

00:04:59.350 --> 00:05:00.160
foreign teacher,

00:05:00.160 --> 00:05:05.900
it's the value zero and finally we have initialization face.

00:05:05.900 --> 00:05:11.150
This is where all the valuables will be assigned with their actual values.

00:05:11.150 --> 00:05:17.220
And this is also the phase where all the court in the static blocks will be executed.

00:05:17.220 --> 00:05:18.140
Now,

00:05:18.140 --> 00:05:20.730
I guess I haven't yet talked about the static block.

00:05:20.730 --> 00:05:22.800
We'll talk about it pretty soon.

00:05:22.800 --> 00:05:26.350
The second major competent off JV m is runtime.

00:05:26.350 --> 00:05:29.080
Get access in this.

00:05:29.080 --> 00:05:32.250
We have something called metal Area.

00:05:32.250 --> 00:05:35.400
I said that the Lord will load the class files,

00:05:35.400 --> 00:05:38.160
but where does it load it?

00:05:38.160 --> 00:05:44.750
In this method area where all the data will be stored in class structures and the data gets

00:05:44.750 --> 00:05:50.090
stored in certain form it so that exhibition engine will be able to execute the court

00:05:50.090 --> 00:05:50.880
comfortably.

00:05:50.880 --> 00:05:52.070
Also,

00:05:52.070 --> 00:05:56.980
the data in the matter area would be identified with the unique address.

00:05:56.980 --> 00:06:02.450
The second memory section we have is keep area.

00:06:02.450 --> 00:06:07.420
We've already talked about hip area many times and we know what it ISS.

00:06:07.420 --> 00:06:09.980
So I'm not going to go through it once again.

00:06:09.980 --> 00:06:15.850
Now guess what We have stack area and we know what it is.

00:06:15.850 --> 00:06:22.880
We've talked about it in our previous examples and then we have something called PC

00:06:22.880 --> 00:06:23.660
registers.

00:06:23.660 --> 00:06:28.940
Our program control registers are there to hold their dress off the current executing

00:06:28.940 --> 00:06:30.350
instruction in the program.

00:06:30.350 --> 00:06:33.290
Once the current instruction is executed,

00:06:33.290 --> 00:06:37.850
the PC register would be a better with the address off next instruction.

00:06:37.850 --> 00:06:38.610
That way,

00:06:38.610 --> 00:06:42.450
it keeps on getting updated till we reach end of the program.

00:06:42.450 --> 00:06:45.080
Let's talk about execution engine.

00:06:45.080 --> 00:06:46.970
As I've already mentioned,

00:06:46.970 --> 00:06:50.610
this would have components that were helping to get the program.

00:06:50.610 --> 00:06:57.850
So this will have the interpreter and we know what it is it has just in time compiler.

00:06:57.850 --> 00:07:00.530
We have talked about it in the beginning,

00:07:00.530 --> 00:07:01.370
off this course,

00:07:01.370 --> 00:07:05.370
and finally we have garbage collector,

00:07:05.370 --> 00:07:11.920
which is a process that happens periodically where all done difference objects will be

00:07:11.920 --> 00:07:15.940
wiped off from the memory to save the memory for other objects.

00:07:15.940 --> 00:07:19.790
And we have something called NATO Method Library.

00:07:19.790 --> 00:07:25.190
These are all libraries that are essential for you to run a NATO program.

00:07:25.190 --> 00:07:26.560
For example,

00:07:26.560 --> 00:07:32.720
let's say that you wanted to run a C program from your Java program so you would make use

00:07:32.720 --> 00:07:35.200
off these native libraries to be able to do so.

00:07:35.200 --> 00:07:37.000
Because J.

00:07:37.000 --> 00:07:38.790
Veum is meant to Runge.

00:07:38.790 --> 00:07:41.750
Our programs not know two languages like C N.

00:07:41.750 --> 00:07:47.960
C plus plus and we have Jay and I stands for Java NATO interface.

00:07:47.960 --> 00:07:54.320
It is basically an interferes which the execution engine uses to kind off access the native

00:07:54.320 --> 00:07:57.220
libraries to be able to run the native program.

00:07:57.220 --> 00:08:04.450
There is also a separate memory section dedicated for running native programs and that is

00:08:04.450 --> 00:08:07.500
called NATO Mother stank.

00:08:07.500 --> 00:08:14.190
All these components are off work together to accomplish the task off running your Java

00:08:14.190 --> 00:08:14.850
program.

00:08:14.850 --> 00:08:16.530
Isn't that amazing?

00:08:16.530 --> 00:08:20.980
Also just want to quickly talk about the role of J.

00:08:20.980 --> 00:08:22.970
V M in multi threading.

00:08:22.970 --> 00:08:25.710
Now we probably don't know what is multi trading.

00:08:25.710 --> 00:08:27.980
We have a chapter dedicated for that.

00:08:27.980 --> 00:08:29.320
It's a pretty big chapter,

00:08:29.320 --> 00:08:29.850
by the way.

00:08:29.850 --> 00:08:31.160
Um,

00:08:31.160 --> 00:08:32.540
but just for the sake,

00:08:32.540 --> 00:08:35.640
off this video for the completeness off this video,

00:08:35.640 --> 00:08:38.740
I'm just going to give a quick overview on what is multi threading.

00:08:38.740 --> 00:08:45.140
Let's see that you have a program and say that you have your instructions that will help.

00:08:45.140 --> 00:08:50.240
You don't know the file and say that the download will take around 10 minutes off time and

00:08:50.240 --> 00:08:53.100
then in another section in the same program,

00:08:53.100 --> 00:08:56.740
you're doing some kind off mathematical operation.

00:08:56.740 --> 00:08:57.530
Now,

00:08:57.530 --> 00:09:02.050
if you observe these two operations are completely independent off each other,

00:09:02.050 --> 00:09:04.430
the mathematical operations are cheaper.

00:09:04.430 --> 00:09:07.300
Farm has nothing to do with the file download.

00:09:07.300 --> 00:09:07.710
Now,

00:09:07.710 --> 00:09:10.150
the problem here is if you're on this program,

00:09:10.150 --> 00:09:14.400
this section will have to wait until the file gets downloaded.

00:09:14.400 --> 00:09:16.580
Why should we let that happen?

00:09:16.580 --> 00:09:19.480
This is where the multitude airing will come into picture.

00:09:19.480 --> 00:09:23.990
If we can separate these two tasks into two different threats,

00:09:23.990 --> 00:09:24.670
say,

00:09:24.670 --> 00:09:25.320
Donald,

00:09:25.320 --> 00:09:31.040
Operation in 21 and this mathematical operation in 22.

00:09:31.040 --> 00:09:35.080
Now these two threads can actually run simultaneously.

00:09:35.080 --> 00:09:36.210
That way,

00:09:36.210 --> 00:09:38.250
we're saving a lot of time.

00:09:38.250 --> 00:09:40.190
If this sounds confusing,

00:09:40.190 --> 00:09:43.800
then you'll have to wait until we get to multi terrain chapter.

00:09:43.800 --> 00:09:48.110
But the reason why I'm explaining you this is let's go back.

00:09:48.110 --> 00:09:56.180
These two memory sections PC registers and need a matter stack will be allocated for each

00:09:56.180 --> 00:09:57.020
and every threat,

00:09:57.020 --> 00:09:58.680
while metal area,

00:09:58.680 --> 00:10:03.250
hip area and stack area will be shared across all the threads.

00:10:03.250 --> 00:10:08.050
So say that you have 10 threats than for each and every thread.

00:10:08.050 --> 00:10:11.920
You got an individual piece of registrant near the method stack,

00:10:11.920 --> 00:10:18.160
but all those 10 threads will share all these three memory sections again.

00:10:18.160 --> 00:10:19.220
If the sounds confusing,

00:10:19.220 --> 00:10:22.380
you'll have to hold on until we talk about multi training.

00:10:22.380 --> 00:10:23.300
All right,

00:10:23.300 --> 00:10:24.500
that's it on this video.

00:10:24.500 --> 00:10:25.380
See you soon

