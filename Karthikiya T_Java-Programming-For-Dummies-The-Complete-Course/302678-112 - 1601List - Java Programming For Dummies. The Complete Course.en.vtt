WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.470
in this chapter,

00:00:01.470 --> 00:00:03.780
we're gonna talk about collections,

00:00:03.780 --> 00:00:06.970
will understand the definition off collection.

00:00:06.970 --> 00:00:09.970
After a couple of videos in this video,

00:00:09.970 --> 00:00:13.850
I'm focused on making you understand what a list.

00:00:13.850 --> 00:00:18.070
And for that I would like you to open this file list.

00:00:18.070 --> 00:00:18.710
Example.

00:00:18.710 --> 00:00:20.280
Under the project collections,

00:00:20.280 --> 00:00:21.950
let's expand it.

00:00:21.950 --> 00:00:28.630
A list is more or less similar to our regular A raise except Head Azov.

00:00:28.630 --> 00:00:32.810
Fixed size and the list is off variable ties.

00:00:32.810 --> 00:00:34.770
If we're defining an area,

00:00:34.770 --> 00:00:37.050
you need to tell the size off a top front.

00:00:37.050 --> 00:00:40.070
What we're as for list has,

00:00:40.070 --> 00:00:42.460
and when you add new elements into the list,

00:00:42.460 --> 00:00:45.510
the size of the list will keep expanding.

00:00:45.510 --> 00:00:49.830
We had already taken a look at one off such example,

00:00:49.830 --> 00:00:51.850
which is a realist.

00:00:51.850 --> 00:01:00.250
Let's make use of the class to create a list of element I'm going to say at her list.

00:01:00.250 --> 00:01:03.810
Call it list equals.

00:01:03.810 --> 00:01:05.700
I'm going to do control shift,

00:01:05.700 --> 00:01:06.250
oh,

00:01:06.250 --> 00:01:10.880
toe import their list class automatically,

00:01:10.880 --> 00:01:17.610
and I'm going to say new control space would give me suggestions.

00:01:17.610 --> 00:01:19.070
I choose a realist.

00:01:19.070 --> 00:01:21.750
Now,

00:01:21.750 --> 00:01:25.760
this list will allow me to add any kind of elements into it.

00:01:25.760 --> 00:01:32.250
I could add a string I could add an integer or I could even add my own objects.

00:01:32.250 --> 00:01:36.750
But we don't want that because there are some problems associated with this approach,

00:01:36.750 --> 00:01:39.760
as we had looked at in our previous chapter.

00:01:39.760 --> 00:01:44.400
When you have a list in which you can add any kind of elements,

00:01:44.400 --> 00:01:50.440
then you will have the trouble off typecasting each of the element when you read elements

00:01:50.440 --> 00:01:51.260
from the list.

00:01:51.260 --> 00:01:52.370
So in this case,

00:01:52.370 --> 00:01:56.190
we want this list to be off a specific type.

00:01:56.190 --> 00:01:57.230
For example,

00:01:57.230 --> 00:02:06.000
I went to make use off the type argument to say the only type of elements that can be added

00:02:06.000 --> 00:02:08.550
into this list is off type integer.

00:02:08.550 --> 00:02:10.290
No,

00:02:10.290 --> 00:02:14.490
you have to define the same thing in these angler braces.

00:02:14.490 --> 00:02:20.490
But compiler is smart enough to understand that you don't have to tell that.

00:02:20.490 --> 00:02:26.080
So now this list will allow us to add the integer objects,

00:02:26.080 --> 00:02:34.850
and I'm going to make use off the admitted to do so when to say 10 and went to copy past

00:02:34.850 --> 00:02:42.090
because we wanted to insert multiple elements can say 20 30 again,

00:02:42.090 --> 00:02:50.350
20 40 and say another 40 Whatever.

00:02:50.350 --> 00:02:52.510
When I send these integers,

00:02:52.510 --> 00:02:56.160
compiler will implicitly create an object or Pittenger,

00:02:56.160 --> 00:02:57.050
for example,

00:02:57.050 --> 00:03:03.150
the tendon here is equal in two new integer off 10.

00:03:03.150 --> 00:03:09.900
But we can just simply say 10 and computer will do the job for us also.

00:03:09.900 --> 00:03:10.310
Now,

00:03:10.310 --> 00:03:11.620
as you would expect,

00:03:11.620 --> 00:03:12.040
you cannot.

00:03:12.040 --> 00:03:15.250
We cannot pass any other type of argument.

00:03:15.250 --> 00:03:20.240
Now we can use the CIS out statement toe.

00:03:20.240 --> 00:03:26.150
Just simply print everything that is inside this list that's on the program.

00:03:26.150 --> 00:03:28.660
And there it is.

00:03:28.660 --> 00:03:36.700
How to know that the order in which these were printed is the order in which we have

00:03:36.700 --> 00:03:38.450
inserted into that list.

00:03:38.450 --> 00:03:47.620
So what has happened right now is when we call the list and we pass it as an argument to

00:03:47.620 --> 00:03:49.030
the CIS out method.

00:03:49.030 --> 00:03:51.010
Internally,

00:03:51.010 --> 00:03:57.250
this instruction would call the to string mattered inside the ERA list.

00:03:57.250 --> 00:03:59.750
And what does the testing method do?

00:03:59.750 --> 00:04:04.860
It will print all the elements in the list in this format.

00:04:04.860 --> 00:04:09.930
Let me demonstrate by adding our own type up data.

00:04:09.930 --> 00:04:11.580
Let me just create a new class.

00:04:11.580 --> 00:04:15.870
I'll call it my own.

00:04:15.870 --> 00:04:18.140
Inside this,

00:04:18.140 --> 00:04:24.090
I'm going to have a variable saying X equals.

00:04:24.090 --> 00:04:25.670
I'm not going to send anything.

00:04:25.670 --> 00:04:33.950
I'm going to set the state with a constructor my own and there's going to take one argument

00:04:33.950 --> 00:04:33.950
.

00:04:33.950 --> 00:04:42.590
And inside this I'm going to say this dot Exe equals.

00:04:42.590 --> 00:04:47.510
What are the argument that this constructor takes him under control?

00:04:47.510 --> 00:04:49.650
Shift tough to give proper indentation.

00:04:49.650 --> 00:04:52.550
Let's make this variable public.

00:04:52.550 --> 00:04:59.470
Now let's go back and try to create multiple instances off this class.

00:04:59.470 --> 00:05:03.390
So I'm going to say my own.

00:05:03.390 --> 00:05:08.440
No one stands for object one new my own off.

00:05:08.440 --> 00:05:08.850
10.

00:05:08.850 --> 00:05:12.360
Similarly,

00:05:12.360 --> 00:05:18.600
I'm going to create a couple of more objects I'll call this hour two and three.

00:05:18.600 --> 00:05:21.760
I'm also going to create another list.

00:05:21.760 --> 00:05:22.270
Or rather,

00:05:22.270 --> 00:05:23.650
let's make this rest.

00:05:23.650 --> 00:05:26.840
I have type my own,

00:05:26.840 --> 00:05:33.210
so this list would now only accept the object off type my own.

00:05:33.210 --> 00:05:43.390
Let's keep having So this fella was to add ho one Hope to and,

00:05:43.390 --> 00:05:49.320
03 Let's get it on this Now.

00:05:49.320 --> 00:05:51.350
If I try to print the list,

00:05:51.350 --> 00:05:55.870
it's going to show us some random generations.

00:05:55.870 --> 00:05:56.650
Let me show you.

00:05:56.650 --> 00:05:59.570
So basically,

00:05:59.570 --> 00:06:05.250
Shower does not know how to print these values because this is your own object.

00:06:05.250 --> 00:06:11.890
We're to tell Java virtual machine how to display my objects when we wanted to display them

00:06:11.890 --> 00:06:13.640
by the fall.

00:06:13.640 --> 00:06:18.050
It's going to display the class name A dread the hash court.

00:06:18.050 --> 00:06:22.860
They already talked about it in our in one of our previous videos.

00:06:22.860 --> 00:06:28.890
But the thing that we want to do here is to make yourself a method called to string.

00:06:28.890 --> 00:06:29.570
Basically,

00:06:29.570 --> 00:06:30.720
we're going toe alright.

00:06:30.720 --> 00:06:35.960
This to string method for that I can certainly make yourself our i d.

00:06:35.960 --> 00:06:39.540
So I'm going to say all right,

00:06:39.540 --> 00:06:46.850
implement methods when to set to string and to string is a mattered off object.

00:06:46.850 --> 00:06:48.720
Now,

00:06:48.720 --> 00:06:49.500
in here,

00:06:49.500 --> 00:06:58.210
What I'm going to return is simply the value that we set X for example No,

00:06:58.210 --> 00:07:04.450
but not send integer because the return time that is expected in here is the string Saboura

00:07:04.450 --> 00:07:14.290
say into Jer not to string and I'm going to pass.

00:07:14.290 --> 00:07:14.590
Um,

00:07:14.590 --> 00:07:17.850
this X as an argument,

00:07:17.850 --> 00:07:26.260
hopes now they should return the string Russian off Whatever was set in here.

00:07:26.260 --> 00:07:27.980
Let's run the program now.

00:07:27.980 --> 00:07:30.180
Hopefully we should see a meaningful output.

00:07:30.180 --> 00:07:31.970
There it is.

00:07:31.970 --> 00:07:36.350
Let's have some random values in here.

00:07:36.350 --> 00:07:38.330
Pretty well.

00:07:38.330 --> 00:07:38.900
I'm good,

00:07:38.900 --> 00:07:44.010
but definitely printing illustrative is not meaningful at all.

00:07:44.010 --> 00:07:46.280
We wanted to do something with it.

00:07:46.280 --> 00:07:52.870
Maybe if we wanted to do some calculations and for that.

00:07:52.870 --> 00:07:58.750
Let me just undo all these changes and get back to our individualist.

00:07:58.750 --> 00:08:04.830
So what I want to do here is for each one of these elements.

00:08:04.830 --> 00:08:07.470
I'm going to add the value,

00:08:07.470 --> 00:08:08.410
tend to it.

00:08:08.410 --> 00:08:11.420
And for that I can certainly make use off.

00:08:11.420 --> 00:08:15.410
The for loop went to ST I quarts zero.

00:08:15.410 --> 00:08:22.910
I is less than the list Start size I plus plus,

00:08:22.910 --> 00:08:28.960
and here I'm going to do since out I'm going to get the height element.

00:08:28.960 --> 00:08:35.460
Don't get Index is going to be I and plus 10.

00:08:35.460 --> 00:08:39.110
Let's run the program pretty well and good.

00:08:39.110 --> 00:08:42.460
There's actually better way off loping through.

00:08:42.460 --> 00:08:44.990
All these elements will talk about it,

00:08:44.990 --> 00:08:46.250
maybe next radio.

00:08:46.250 --> 00:08:47.670
But for now,

00:08:47.670 --> 00:08:48.860
this should suffice.

00:08:48.860 --> 00:08:53.250
You can also explore all the other methods inside the header list class,

00:08:53.250 --> 00:08:54.390
for example,

00:08:54.390 --> 00:08:57.390
we can say list Dart.

00:08:57.390 --> 00:08:59.690
You got a lot off methods in here.

00:08:59.690 --> 00:09:06.050
It can all this go through each one of them and read the description and use them as you

00:09:06.050 --> 00:09:06.950
would require.

00:09:06.950 --> 00:09:09.150
For example,

00:09:09.150 --> 00:09:14.350
I'm going to say I'm going to make use off sub list method,

00:09:14.350 --> 00:09:16.350
going to say zero,

00:09:16.350 --> 00:09:21.300
23 or whatever And in fact,

00:09:21.300 --> 00:09:25.050
let's wrap this around does his art statement.

00:09:25.050 --> 00:09:35.650
Let's see how the output looks like We have one serious problem here.

00:09:35.650 --> 00:09:42.140
Let's say that you found out another class which is providing the same functionality that

00:09:42.140 --> 00:09:43.100
aerialist does.

00:09:43.100 --> 00:09:45.810
And apart from that,

00:09:45.810 --> 00:09:48.110
it is providing some additional functionality.

00:09:48.110 --> 00:09:51.680
So you wanted to switch to that implementation.

00:09:51.680 --> 00:09:52.530
For example,

00:09:52.530 --> 00:09:59.770
there's a class called Dr How This is going to provide the same functionality or federalist

00:09:59.770 --> 00:09:59.770
,

00:09:59.770 --> 00:10:04.890
except it is having some additional capabilities.

00:10:04.890 --> 00:10:05.560
For example,

00:10:05.560 --> 00:10:07.080
he can get the first element,

00:10:07.080 --> 00:10:12.050
but doing so and obviously can make use off,

00:10:12.050 --> 00:10:19.990
sets out statement like so and you can print.

00:10:19.990 --> 00:10:22.550
Let's come in this out.

00:10:22.550 --> 00:10:28.550
Let's commend this out as well,

00:10:28.550 --> 00:10:32.180
so I print the first element.

00:10:32.180 --> 00:10:34.320
But the point I want to make here is,

00:10:34.320 --> 00:10:42.350
let's say you again change your mind and you decided to use the other list because he found

00:10:42.350 --> 00:10:47.600
or the terrorist is much faster combat toe the implementation that Victor Poets.

00:10:47.600 --> 00:10:50.550
Then let's say you wanted to switch terror list.

00:10:50.550 --> 00:10:53.360
You wanna say federalist again?

00:10:53.360 --> 00:10:57.640
Are you gonna do control shift?

00:10:57.640 --> 00:10:57.920
Oh,

00:10:57.920 --> 00:10:59.730
but we have a problem here.

00:10:59.730 --> 00:11:01.610
Their list does not have this matter.

00:11:01.610 --> 00:11:02.770
First element.

00:11:02.770 --> 00:11:07.910
Imagine that you have used this list across your project,

00:11:07.910 --> 00:11:10.890
which would constitute millions off lines off code,

00:11:10.890 --> 00:11:14.460
then this is going to pose a very serious problem.

00:11:14.460 --> 00:11:17.160
Wherever you have errors like this,

00:11:17.160 --> 00:11:21.550
you need to fix it and try to provide similar implementation.

00:11:21.550 --> 00:11:24.350
This is going to be a very tedious job,

00:11:24.350 --> 00:11:27.350
but we have a solution for that.

00:11:27.350 --> 00:11:32.260
All these implementations like Medalist Wetter.

00:11:32.260 --> 00:11:35.890
Or there's another implementation called Link List.

00:11:35.890 --> 00:11:43.450
They all implement one interface that is called the list into office.

00:11:43.450 --> 00:11:46.150
Let's to control shift Oh,

00:11:46.150 --> 00:11:50.250
the list into for results apart off the usual package.

00:11:50.250 --> 00:11:52.150
By doing so,

00:11:52.150 --> 00:11:59.510
you're forced to use only the matters that are reciting inside the list in defence.

00:11:59.510 --> 00:12:05.150
So now you have to get it off this and let men come in these lines off court.

00:12:05.150 --> 00:12:09.900
I serve the file your program run smoothly,

00:12:09.900 --> 00:12:10.690
But tomorrow,

00:12:10.690 --> 00:12:13.930
if you decide to use somebody else implementation,

00:12:13.930 --> 00:12:16.250
let's they wanted to switch to a wetter.

00:12:16.250 --> 00:12:18.430
It will work smoothly.

00:12:18.430 --> 00:12:19.950
All the trained to do,

00:12:19.950 --> 00:12:20.870
though,

00:12:20.870 --> 00:12:24.180
is it important that class and that's it.

00:12:24.180 --> 00:12:33.220
You don't have to make changes elsewhere in the program because being director link list or

00:12:33.220 --> 00:12:34.180
hair A list,

00:12:34.180 --> 00:12:41.940
all those implementations must and should provide the implementation for whatever the

00:12:41.940 --> 00:12:46.120
methods reciting in the list and you in your court.

00:12:46.120 --> 00:12:48.850
Since you have the interface as the difference type,

00:12:48.850 --> 00:12:55.350
you have no other alternative but to use the method inside the interface.

00:12:55.350 --> 00:13:02.060
So the list interferes is kind of like a set off standards set for all the people who

00:13:02.060 --> 00:13:06.250
wanted to provide implementation for list functionality.

00:13:06.250 --> 00:13:13.630
So it's always advisable that you use the list or it'll affect your project badly.

00:13:13.630 --> 00:13:14.750
Had little point of time.

00:13:14.750 --> 00:13:16.320
All right,

00:13:16.320 --> 00:13:17.940
see you in my next radio.

