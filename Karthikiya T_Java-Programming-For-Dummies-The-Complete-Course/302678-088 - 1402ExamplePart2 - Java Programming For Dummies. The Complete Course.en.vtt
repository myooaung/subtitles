WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.990
All right,

00:00:00.990 --> 00:00:02.680
let's continue now.

00:00:02.680 --> 00:00:04.220
This is not the best example.

00:00:04.220 --> 00:00:06.700
I could demonstrate in this example.

00:00:06.700 --> 00:00:09.780
I have exact Amir court in two places,

00:00:09.780 --> 00:00:15.380
But most often this could be two different operations but are still independent.

00:00:15.380 --> 00:00:19.730
Let's say I want to get it off one of the zero in here.

00:00:19.730 --> 00:00:21.710
Ultimately,

00:00:21.710 --> 00:00:27.920
the point I want to make here is these two are two different operations but are still

00:00:27.920 --> 00:00:28.850
independent.

00:00:28.850 --> 00:00:32.050
Maybe you would want to do Donald off a file here,

00:00:32.050 --> 00:00:36.490
and you're doing something completely independent,

00:00:36.490 --> 00:00:37.440
which is,

00:00:37.440 --> 00:00:37.680
say,

00:00:37.680 --> 00:00:41.330
you're reading from text from a stream or whatever.

00:00:41.330 --> 00:00:42.540
For this example,

00:00:42.540 --> 00:00:47.990
I just excluded another zero just to make sure these two are two different operations.

00:00:47.990 --> 00:00:53.150
Or maybe I just play around with these numbers may be safe for 455 whatever.

00:00:53.150 --> 00:00:54.740
Now,

00:00:54.740 --> 00:01:02.180
let me just copied this file and create another file.

00:01:02.180 --> 00:01:03.290
Let's call this,

00:01:03.290 --> 00:01:07.550
but the same name depended with number two.

00:01:07.550 --> 00:01:11.270
And for your reference,

00:01:11.270 --> 00:01:13.750
I'm undoing all the changes.

00:01:13.750 --> 00:01:16.050
Let's close this file.

00:01:16.050 --> 00:01:21.050
Let me open this file.

00:01:21.050 --> 00:01:22.520
No,

00:01:22.520 --> 00:01:25.110
I have identified two sections that are independent.

00:01:25.110 --> 00:01:27.360
How do I want to treat them?

00:01:27.360 --> 00:01:30.350
I'm going to use the same class,

00:01:30.350 --> 00:01:31.770
but this time going to create,

00:01:31.770 --> 00:01:39.100
do off them in one.

00:01:39.100 --> 00:01:51.390
I'm going to corporate this section off court and paste it in the run method.

00:01:51.390 --> 00:02:02.480
And in another I'll have the other independent code.

00:02:02.480 --> 00:02:08.260
Just like so.

00:02:08.260 --> 00:02:15.840
And all I wanna have here in this two classes is just the court that I want to multi thread

00:02:15.840 --> 00:02:15.840
.

00:02:15.840 --> 00:02:19.020
I'm going to get rid off all this public static,

00:02:19.020 --> 00:02:22.100
wide main and stuff like that.

00:02:22.100 --> 00:02:26.130
In fact,

00:02:26.130 --> 00:02:28.100
I'm going to do control X.

00:02:28.100 --> 00:02:32.310
Let's create a new class file.

00:02:32.310 --> 00:02:38.610
Let's call this some name,

00:02:38.610 --> 00:02:44.790
whatever the name that you want to give and our best in the code in here,

00:02:44.790 --> 00:02:54.650
I'm going to create one object off this class and another object off this glass.

00:02:54.650 --> 00:03:04.550
Let's call this object one and object to Supposed to go in here.

00:03:04.550 --> 00:03:09.250
Peritus.

00:03:09.250 --> 00:03:13.480
Let's try to run the program.

00:03:13.480 --> 00:03:19.330
Let me balls that we do and get back hair.

00:03:19.330 --> 00:03:24.140
It is from design prospect to If you use the threat class,

00:03:24.140 --> 00:03:25.470
I mean extends thread.

00:03:25.470 --> 00:03:32.350
Then you're sort of encouraging the developers to extend the behavior off this class and

00:03:32.350 --> 00:03:32.870
play with it,

00:03:32.870 --> 00:03:34.740
which is definitely bad practice.

00:03:34.740 --> 00:03:37.220
But whereas if implement rentable interferes,

00:03:37.220 --> 00:03:38.750
then it would start off,

00:03:38.750 --> 00:03:44.710
signify the developers that they're not supposed to do anything other than what you want to

00:03:44.710 --> 00:03:45.590
multi thread.

00:03:45.590 --> 00:03:53.450
Which means in this class we only want that independent piece off court that we want to

00:03:53.450 --> 00:03:55.100
execute as a separate thread.

00:03:55.100 --> 00:03:56.650
So always,

00:03:56.650 --> 00:04:00.450
it's better that you use implements rentable than extends threat.

00:04:00.450 --> 00:04:07.340
And you can have as many classes as you want that implements Annable and each one off this

00:04:07.340 --> 00:04:09.780
class perform a separate,

00:04:09.780 --> 00:04:11.450
independent task.

00:04:11.450 --> 00:04:13.580
Hope that makes sense.

00:04:13.580 --> 00:04:18.250
Now let's talk about Call Stack.

00:04:18.250 --> 00:04:21.990
We know what Call Stack is,

00:04:21.990 --> 00:04:25.020
and every time we get an exception,

00:04:25.020 --> 00:04:30.830
we get the call stack from the method word exception originated to the main matter.

00:04:30.830 --> 00:04:35.030
The reason is that call Stack is perfect two.

00:04:35.030 --> 00:04:35.740
Main Trent.

00:04:35.740 --> 00:04:36.680
Similarly,

00:04:36.680 --> 00:04:40.700
when we create our own threats as separate call Stack would be created.

00:04:40.700 --> 00:04:42.320
So now,

00:04:42.320 --> 00:04:45.970
whenever we have an exception in one of these threads,

00:04:45.970 --> 00:04:49.300
let me just explicitly through an exception in here,

00:04:49.300 --> 00:04:54.600
throw new no point exception,

00:04:54.600 --> 00:05:01.840
and if you run the program okay,

00:05:01.840 --> 00:05:06.790
looks like me to have it at the end.

00:05:06.790 --> 00:05:11.870
Let's on the program this time again.

00:05:11.870 --> 00:05:12.950
A lot of weight time,

00:05:12.950 --> 00:05:14.730
it says.

00:05:14.730 --> 00:05:17.820
Exception in 20 thread.

00:05:17.820 --> 00:05:18.290
Zero.

00:05:18.290 --> 00:05:21.750
That's the name thread scheduler named The Tread.

00:05:21.750 --> 00:05:25.550
We'll talk about thread scheduler in our next video,

00:05:25.550 --> 00:05:27.800
but that's it.

00:05:27.800 --> 00:05:31.190
That's all I wanted to talk about in this video.

00:05:31.190 --> 00:05:33.240
See you in my next video,

00:05:33.240 --> 00:05:36.950
where we'll talk about thread lifecycle.

