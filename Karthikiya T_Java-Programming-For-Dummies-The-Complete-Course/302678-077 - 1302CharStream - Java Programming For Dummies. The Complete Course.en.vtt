WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.090
in this video,

00:00:01.090 --> 00:00:03.460
we're gonna talk about character stream.

00:00:03.460 --> 00:00:08.660
The example that we talked about in our previous video used the byte stream,

00:00:08.660 --> 00:00:12.130
meaning their data that we're reading from the text file.

00:00:12.130 --> 00:00:18.180
We're not reading it in the form off character or text were reading it as bites just as it

00:00:18.180 --> 00:00:20.300
gets stored in the computer memory.

00:00:20.300 --> 00:00:21.420
And internally,

00:00:21.420 --> 00:00:23.350
we're trying to convert those bites,

00:00:23.350 --> 00:00:23.830
uh,

00:00:23.830 --> 00:00:24.410
etcetera.

00:00:24.410 --> 00:00:26.110
But ultimately,

00:00:26.110 --> 00:00:27.070
this stream,

00:00:27.070 --> 00:00:33.400
the file input stream is going to hold the bite information off the text present in the

00:00:33.400 --> 00:00:33.780
file.

00:00:33.780 --> 00:00:36.380
And we're looking through each and every bite,

00:00:36.380 --> 00:00:38.060
and we're trying to do something with it.

00:00:38.060 --> 00:00:43.440
We can also use the character stream instead off the byte stream,

00:00:43.440 --> 00:00:48.390
we can have character stream so that we can look through each and every individual

00:00:48.390 --> 00:00:53.580
character from the text file instead off looping truths in every bite off information.

00:00:53.580 --> 00:00:54.620
Now you may ask me,

00:00:54.620 --> 00:00:56.100
How does that make a difference?

00:00:56.100 --> 00:00:58.050
Consider the appalling example.

00:00:58.050 --> 00:01:02.950
That's I'm creating a new file in here.

00:01:02.950 --> 00:01:06.280
Let's call this temp.

00:01:06.280 --> 00:01:14.210
The smile is going to remain here temporarily and in here I'm typing in some random text.

00:01:14.210 --> 00:01:16.850
If I save the file,

00:01:16.850 --> 00:01:18.880
it saves comfortably.

00:01:18.880 --> 00:01:19.700
No,

00:01:19.700 --> 00:01:20.950
problems whatsoever.

00:01:20.950 --> 00:01:26.650
But what if I enter some kind off text that looks something like this?

00:01:26.650 --> 00:01:29.060
Now,

00:01:29.060 --> 00:01:30.580
if I try to save the file,

00:01:30.580 --> 00:01:36.190
then we get a prompt saying the file contents characters in Unicode format,

00:01:36.190 --> 00:01:43.020
which will be lost if you save the file as and in a say and called it takes well now what

00:01:43.020 --> 00:01:43.350
is any?

00:01:43.350 --> 00:01:46.640
An essay and quoted text while to know more about it.

00:01:46.640 --> 00:01:48.950
I would recommend you to go to Wikipedia.

00:01:48.950 --> 00:01:55.600
Here it is and an insight cactus.

00:01:55.600 --> 00:02:00.210
It has no official meeting and has been used to refer the following,

00:02:00.210 --> 00:02:01.390
among other things.

00:02:01.390 --> 00:02:08.350
So the Astra character said that were talked about in our previous video is one of these.

00:02:08.350 --> 00:02:15.570
So what I'm trying to say here is all these characters in here are not part off the asking

00:02:15.570 --> 00:02:16.310
after sent,

00:02:16.310 --> 00:02:21.630
and the kind of incurring the default and quoting which we're trying to use here does not

00:02:21.630 --> 00:02:22.670
support these characters.

00:02:22.670 --> 00:02:24.750
And that's that's the warning that we're getting.

00:02:24.750 --> 00:02:26.960
To keep the Unicord information,

00:02:26.960 --> 00:02:27.340
click,

00:02:27.340 --> 00:02:32.160
cancel below and select one off the record options from the encoding drop down list.

00:02:32.160 --> 00:02:33.470
So let's click cancer.

00:02:33.470 --> 00:02:35.590
Let's save the file.

00:02:35.590 --> 00:02:41.470
Do you want to replace it.

00:02:41.470 --> 00:02:42.450
Yes,

00:02:42.450 --> 00:02:43.990
okay,

00:02:43.990 --> 00:02:45.350
And let's close the file.

00:02:45.350 --> 00:02:47.750
And if you're trying to open the file now,

00:02:47.750 --> 00:02:50.820
we're seeing just a bunch of question marks.

00:02:50.820 --> 00:02:56.200
The reason is the Masai and coded text does not support the characters that we have put in

00:02:56.200 --> 00:02:56.530
here,

00:02:56.530 --> 00:02:59.270
so it just doesn't know what to put in here.

00:02:59.270 --> 00:03:01.750
So it just shown us bunch of question marks.

00:03:01.750 --> 00:03:04.650
Now let's do something different.

00:03:04.650 --> 00:03:10.510
Let's have the same special characters and said the file will get the same morning click

00:03:10.510 --> 00:03:10.970
cancel.

00:03:10.970 --> 00:03:15.650
But this time we're going to use a different encoding Beauty of eight.

00:03:15.650 --> 00:03:17.570
Let's save the file,

00:03:17.570 --> 00:03:19.700
and so I want to replace it.

00:03:19.700 --> 00:03:24.770
Now if I close the file and reopen the file,

00:03:24.770 --> 00:03:27.240
it's going to retain those characters.

00:03:27.240 --> 00:03:29.650
That's the magic off the encoding.

00:03:29.650 --> 00:03:32.550
So what has actually happened here,

00:03:32.550 --> 00:03:35.600
if you understand for each and every bite,

00:03:35.600 --> 00:03:38.950
there are only 2 56 combinations off zeros and ones,

00:03:38.950 --> 00:03:43.690
and all the characters inside the ask a cactus set were occupied.

00:03:43.690 --> 00:03:46.120
All those two with 26 characters.

00:03:46.120 --> 00:03:52.400
It's not possible to represent any off these characters in just one bite up data.

00:03:52.400 --> 00:03:57.220
So if we use the UTF eight character encoding each one off.

00:03:57.220 --> 00:04:01.750
This character is going to be represented in more than one bite.

00:04:01.750 --> 00:04:04.850
It's going to be between 1 to 4 bites.

00:04:04.850 --> 00:04:07.150
Now let's close this file.

00:04:07.150 --> 00:04:11.470
Let's go back to our example in here.

00:04:11.470 --> 00:04:18.150
Let's try to read from the text while the temp file with all the special characters.

00:04:18.150 --> 00:04:20.220
For the sake of this example,

00:04:20.220 --> 00:04:29.550
it's get it off the output stream insert we're just going to use This is out statement and

00:04:29.550 --> 00:04:37.250
we're going to print and all I want to print here is the integer value that we're gonna get

00:04:37.250 --> 00:04:37.250
,

00:04:37.250 --> 00:04:46.750
and I'm going to append it with character presentation off that in Teacher.

00:04:46.750 --> 00:04:52.680
Now let's try to run the program.

00:04:52.680 --> 00:04:54.950
What has just happened?

00:04:54.950 --> 00:04:56.350
Can you guess?

00:04:56.350 --> 00:05:00.250
Although we have only poor characters in the text file,

00:05:00.250 --> 00:05:02.680
why are we getting so many characters?

00:05:02.680 --> 00:05:03.770
The reason is,

00:05:03.770 --> 00:05:04.660
as I mentioned,

00:05:04.660 --> 00:05:07.180
each one of the character in the text,

00:05:07.180 --> 00:05:08.810
while is no longer one by,

00:05:08.810 --> 00:05:11.370
it could be 1 to 4 bites,

00:05:11.370 --> 00:05:15.460
and we're just looking through all the bite information in here.

00:05:15.460 --> 00:05:18.600
So to represent all those four characters,

00:05:18.600 --> 00:05:23.750
there are a total off 11 bites.

00:05:23.750 --> 00:05:24.980
Now,

00:05:24.980 --> 00:05:26.350
this is clearly a problem.

00:05:26.350 --> 00:05:27.100
The characters,

00:05:27.100 --> 00:05:30.250
which we have in the text while we're not getting printed in here.

00:05:30.250 --> 00:05:36.970
That's because we're converting each and every individual by information to character,

00:05:36.970 --> 00:05:38.290
and we're trying to print.

00:05:38.290 --> 00:05:45.250
The solution to this problem is read the content Inside this text well has individual

00:05:45.250 --> 00:05:45.810
characters,

00:05:45.810 --> 00:05:47.300
not as individual bites.

00:05:47.300 --> 00:05:48.760
So how do we do that?

00:05:48.760 --> 00:05:59.870
We're going to use the input stream leader and let's call it I and our Input Stream reader

00:05:59.870 --> 00:06:05.450
and New Input Stream leader.

00:06:05.450 --> 00:06:10.850
And the argument that we're gonna do is the file input stream object.

00:06:10.850 --> 00:06:14.510
Essentially,

00:06:14.510 --> 00:06:18.210
this is going to act like a rapper for this class,

00:06:18.210 --> 00:06:23.950
meaning this is going to convert all those bites off information into characters.

00:06:23.950 --> 00:06:24.930
But still,

00:06:24.930 --> 00:06:27.170
we have one problem by default.

00:06:27.170 --> 00:06:30.890
This is going to use the default and courting What is the default?

00:06:30.890 --> 00:06:32.680
And according if you right,

00:06:32.680 --> 00:06:33.660
click on the smile,

00:06:33.660 --> 00:06:34.850
go to properties.

00:06:34.850 --> 00:06:43.080
And in here you see that default and courting the text while including is off CP one to

00:06:43.080 --> 00:06:43.650
fight too.

00:06:43.650 --> 00:06:45.650
It's click cancer.

00:06:45.650 --> 00:06:56.070
So what we're gonna need to do is we're gonna have to tell the kind of encoding it needs to

00:06:56.070 --> 00:07:03.000
use well converting the bites off information into characters and you can pass in another

00:07:03.000 --> 00:07:05.750
argument to the constructor off input stream reader,

00:07:05.750 --> 00:07:10.850
and you're gonna say you're TF eight format.

00:07:10.850 --> 00:07:16.250
Now let's try to run the program.

00:07:16.250 --> 00:07:19.550
This is still going to cause a problem.

00:07:19.550 --> 00:07:21.900
Obviously,

00:07:21.900 --> 00:07:26.950
we need to use the input stream reader object in here,

00:07:26.950 --> 00:07:30.570
not the file input stream.

00:07:30.570 --> 00:07:35.460
And there's going to result in going through each and individual character,

00:07:35.460 --> 00:07:40.540
not bite pretty well and good ignored this post character.

00:07:40.540 --> 00:07:44.620
This is called Bomb or Bite or Remark.

00:07:44.620 --> 00:07:50.580
This is used for holding the information about the bites that are getting stored,

00:07:50.580 --> 00:07:53.330
accelerates its little tricky there.

00:07:53.330 --> 00:07:54.750
But we're not interested in this.

00:07:54.750 --> 00:07:59.670
All we're interested in here is the rest of the characters which off work actors.

00:07:59.670 --> 00:08:02.020
But still we didn't see the characters in here.

00:08:02.020 --> 00:08:07.550
That's because this council in here is not using the utf eight and courting,

00:08:07.550 --> 00:08:10.060
so we need to change that as well.

00:08:10.060 --> 00:08:14.210
We go to properties and choose other,

00:08:14.210 --> 00:08:17.390
and then here can juice beauty of mate click.

00:08:17.390 --> 00:08:17.960
Okay,

00:08:17.960 --> 00:08:20.090
and then let's run the program.

00:08:20.090 --> 00:08:23.850
You would see all those characters pretty well and good.

00:08:23.850 --> 00:08:25.430
Similarly,

00:08:25.430 --> 00:08:27.350
for file output stream,

00:08:27.350 --> 00:08:30.420
we can have the output stream Reader.

00:08:30.420 --> 00:08:31.080
I'm sorry,

00:08:31.080 --> 00:08:32.410
Output Stream writer,

00:08:32.410 --> 00:08:35.790
and you can specify the kind of including,

00:08:35.790 --> 00:08:38.150
Let's try to do the same.

00:08:38.150 --> 00:08:39.440
I'm going,

00:08:39.440 --> 00:08:39.710
done,

00:08:39.710 --> 00:08:40.270
Come and did.

00:08:40.270 --> 00:08:51.650
That's copied this line and let's call this who is double your Foot Stream writer?

00:08:51.650 --> 00:09:00.390
It's just playing opposite off Input Stream leader but Stream writer.

00:09:00.390 --> 00:09:07.190
And obviously we need to send the are put stream object to this,

00:09:07.190 --> 00:09:16.350
and we're going to use the same to print all those characters using de right method.

00:09:16.350 --> 00:09:19.670
I resent the integer as an argument,

00:09:19.670 --> 00:09:20.440
which in this case,

00:09:20.440 --> 00:09:21.120
is I,

00:09:21.120 --> 00:09:22.450
Let's say the file.

00:09:22.450 --> 00:09:23.700
But this time,

00:09:23.700 --> 00:09:27.690
let's use a different file name.

00:09:27.690 --> 00:09:31.280
Tim Underscore New.

00:09:31.280 --> 00:09:33.530
But before running this program,

00:09:33.530 --> 00:09:37.870
we need to use another method inside the Orbit Stream writer,

00:09:37.870 --> 00:09:39.340
which is flush.

00:09:39.340 --> 00:09:46.650
So what this matter will do is it will flush all the characters that are in the stream or

00:09:46.650 --> 00:09:51.250
put Stream writer to be written into the destination file.

00:09:51.250 --> 00:09:52.520
We'll see,

00:09:52.520 --> 00:09:55.240
and we'll talk about this pretty soon.

00:09:55.240 --> 00:10:01.630
Let's run the file there.

00:10:01.630 --> 00:10:03.780
It is pretty well and good.

00:10:03.780 --> 00:10:06.690
Now,

00:10:06.690 --> 00:10:08.880
instead of creating all this mess,

00:10:08.880 --> 00:10:10.900
let's come in this out.

00:10:10.900 --> 00:10:16.110
You can simply use file,

00:10:16.110 --> 00:10:29.080
reader and file writer objects like So while reader you gonna have exact seem constructor?

00:10:29.080 --> 00:10:31.490
Obviously this has to be changed.

00:10:31.490 --> 00:10:32.130
Two.

00:10:32.130 --> 00:10:32.880
Filed reader.

00:10:32.880 --> 00:10:34.410
Similarly,

00:10:34.410 --> 00:10:41.820
we can have file writer my right to,

00:10:41.820 --> 00:10:59.850
and you can use my reader to read information and file writer to write the information.

00:10:59.850 --> 00:11:09.510
Now How it's while reader and pile writer is different from pile input Stream and Pilot Put

00:11:09.510 --> 00:11:09.920
Stream.

00:11:09.920 --> 00:11:12.440
The file later is going to use the character stream,

00:11:12.440 --> 00:11:14.350
not the byte stream by default,

00:11:14.350 --> 00:11:18.140
but whereas in here we need to use a rapper class,

00:11:18.140 --> 00:11:23.750
which is input stream leader to be able to read bites off information as characters.

00:11:23.750 --> 00:11:25.640
But there is one problem here.

00:11:25.640 --> 00:11:31.540
The file Greater and file writer is going to use the default and courting off your

00:11:31.540 --> 00:11:32.470
operating system.

00:11:32.470 --> 00:11:38.350
And most of the operating system may not support the UTF eight as the default and coding.

00:11:38.350 --> 00:11:40.390
So it's not recommended,

00:11:40.390 --> 00:11:40.790
really,

00:11:40.790 --> 00:11:43.980
that you use file Region file writer Instead,

00:11:43.980 --> 00:11:46.100
he used this mechanism.

00:11:46.100 --> 00:11:47.140
No,

00:11:47.140 --> 00:11:53.700
Obviously this program is going to result in inappropriate results because it's going to

00:11:53.700 --> 00:11:56.110
use the operating systems default and calling.

00:11:56.110 --> 00:11:58.370
So let's undo everything.

00:11:58.370 --> 00:12:03.350
So that's it for this video.

00:12:03.350 --> 00:12:05.850
Thanks for watching See you in my next radio

