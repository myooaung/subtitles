WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.580
OK in this video,

00:00:02.580 --> 00:00:04.660
we're gonna talk about polymorphism.

00:00:04.660 --> 00:00:07.840
Polymorphism is the ability,

00:00:07.840 --> 00:00:08.940
often object toe.

00:00:08.940 --> 00:00:10.790
Perform the same action differently,

00:00:10.790 --> 00:00:12.770
depending on the context.

00:00:12.770 --> 00:00:15.000
Let me explain you what I mean.

00:00:15.000 --> 00:00:18.090
Let's take a real world example.

00:00:18.090 --> 00:00:19.850
Let's talk about a cat.

00:00:19.850 --> 00:00:23.800
It's a cat will run at speed off 10 kilometers per hour.

00:00:23.800 --> 00:00:24.910
Now,

00:00:24.910 --> 00:00:26.460
if a dog is chasing the cat,

00:00:26.460 --> 00:00:27.990
then a tipple run faster,

00:00:27.990 --> 00:00:29.750
maybe 15 kilometers per hour.

00:00:29.750 --> 00:00:33.020
So depending on the context,

00:00:33.020 --> 00:00:35.750
the cat is acting differently.

00:00:35.750 --> 00:00:37.730
But the behavior the same.

00:00:37.730 --> 00:00:38.600
Ultimately,

00:00:38.600 --> 00:00:39.630
the cat is running,

00:00:39.630 --> 00:00:43.320
but the speed is wearing depending on the context.

00:00:43.320 --> 00:00:45.950
That's exactly what Polymorphism is.

00:00:45.950 --> 00:00:48.800
So in here in the cat class,

00:00:48.800 --> 00:00:50.300
we have two methods.

00:00:50.300 --> 00:00:54.250
But these methods performed the same action which is running.

00:00:54.250 --> 00:00:56.830
But in this room method,

00:00:56.830 --> 00:01:03.300
the cat will run at 10 kilometers per hour in this method is going to run at the speed

00:01:03.300 --> 00:01:07.480
Whatever sent as a perimeter in order,

00:01:07.480 --> 00:01:11.650
our program have created an object of the class cat.

00:01:11.650 --> 00:01:15.830
When I do cat object dot run,

00:01:15.830 --> 00:01:17.320
it's going to call this matter.

00:01:17.320 --> 00:01:22.870
When I do cat object dot Ron was sending a perimeter.

00:01:22.870 --> 00:01:29.030
It's going to run this method so What we have done is overloading,

00:01:29.030 --> 00:01:31.190
which we have seen in our previous example.

00:01:31.190 --> 00:01:38.160
The point will make here is ultimately the cat is doing the same job off running,

00:01:38.160 --> 00:01:40.530
but it is running differently.

00:01:40.530 --> 00:01:43.750
This is called compile time Polymorphism.

00:01:43.750 --> 00:01:47.130
That's because during the compile time itself,

00:01:47.130 --> 00:01:50.310
the comparable know which matter to call hold it.

00:01:50.310 --> 00:01:52.270
The name of the mattered is same.

00:01:52.270 --> 00:01:54.110
The signature is different.

00:01:54.110 --> 00:01:54.750
I mean,

00:01:54.750 --> 00:01:58.970
either the number of parameters or the type of perimeter is different,

00:01:58.970 --> 00:02:01.740
just as we looked at in our example or leader.

00:02:01.740 --> 00:02:03.150
No,

00:02:03.150 --> 00:02:10.680
let's talk about runtime polymorphism just as we took really old example for Compound and

00:02:10.680 --> 00:02:11.520
Polymorphism.

00:02:11.520 --> 00:02:14.540
Let's take a real world example for run time polymorphism.

00:02:14.540 --> 00:02:18.550
Let's think of an animal every animal screams,

00:02:18.550 --> 00:02:24.650
but the way the screen will happen is dependent on the animal itself.

00:02:24.650 --> 00:02:28.050
Take a look at this example In this animal class,

00:02:28.050 --> 00:02:30.360
we have this method scream,

00:02:30.360 --> 00:02:31.300
screaming,

00:02:31.300 --> 00:02:37.020
but if you if you see a dog will scream like a dog.

00:02:37.020 --> 00:02:42.840
So we have a scream method in the dark class and it's going to scream like a dog.

00:02:42.840 --> 00:02:51.180
The thing here to understand is we have the exact same signature asked to that off this

00:02:51.180 --> 00:02:53.320
cream matter in animal class,

00:02:53.320 --> 00:02:56.100
what we did here is overloading.

00:02:56.100 --> 00:03:00.080
Where way have two methods with the same name,

00:03:00.080 --> 00:03:01.190
but different in nature.

00:03:01.190 --> 00:03:03.850
And job will not let us right.

00:03:03.850 --> 00:03:06.950
Two methods in the same class with the same signature.

00:03:06.950 --> 00:03:14.270
But it's possible in overrating because in this class this is the only scream method with

00:03:14.270 --> 00:03:15.280
the same did nature.

00:03:15.280 --> 00:03:16.050
No,

00:03:16.050 --> 00:03:18.550
let's understand what is on time polymorphism.

00:03:18.550 --> 00:03:21.260
In this class,

00:03:21.260 --> 00:03:22.850
we have an animal object,

00:03:22.850 --> 00:03:27.850
and using that object I'm going to call the screen matter.

00:03:27.850 --> 00:03:33.550
This instruction will call the screen method inside the animal class.

00:03:33.550 --> 00:03:40.350
But whereas if we have animal reference type and if it points to a dog object,

00:03:40.350 --> 00:03:47.350
then this instruction the result in calling this screen method.

00:03:47.350 --> 00:03:49.650
So depending on the type of animal,

00:03:49.650 --> 00:03:52.700
the stream method will act differently,

00:03:52.700 --> 00:03:54.830
ultimately is just screaming.

00:03:54.830 --> 00:03:55.990
Now again,

00:03:55.990 --> 00:03:58.090
if we have that a cat class,

00:03:58.090 --> 00:04:07.150
then we can We can have the same exact meant that scream like a cat.

00:04:07.150 --> 00:04:20.150
Let's copy this code answer door here can't and kept.

00:04:20.150 --> 00:04:26.350
Now this cream method is going to call this cream method off.

00:04:26.350 --> 00:04:34.130
Cat hope it makes sense in order to make sure that the matter that you wanted to override

00:04:34.130 --> 00:04:35.410
is indeed overridden.

00:04:35.410 --> 00:04:39.380
You're gonna use the annotation called have the rate capital.

00:04:39.380 --> 00:04:41.990
All right,

00:04:41.990 --> 00:04:46.650
this annotation will make sure that this method,

00:04:46.650 --> 00:04:48.880
the method that is next to it,

00:04:48.880 --> 00:04:50.560
is overridden.

00:04:50.560 --> 00:04:52.700
If you make changes to this method,

00:04:52.700 --> 00:04:53.300
for example,

00:04:53.300 --> 00:04:54.470
give it a different name.

00:04:54.470 --> 00:04:56.050
It's going to trust an error,

00:04:56.050 --> 00:04:58.720
or if you add another perimeter,

00:04:58.720 --> 00:05:01.720
it's going to throw us another.

00:05:01.720 --> 00:05:03.450
Let's see what their says.

00:05:03.450 --> 00:05:10.050
The method scream int off type dog must override or implement.

00:05:10.050 --> 00:05:11.240
Hey,

00:05:11.240 --> 00:05:12.570
subtype mattered.

00:05:12.570 --> 00:05:14.890
We're going to overwrite.

00:05:14.890 --> 00:05:21.360
But what is implement will know about implement keyword on may talk about interfaces.

00:05:21.360 --> 00:05:22.650
But for now,

00:05:22.650 --> 00:05:24.450
let's under the changes.

00:05:24.450 --> 00:05:28.830
Let's keep the sanitation to good practice,

00:05:28.830 --> 00:05:31.180
and I always encourage you to do the same.

00:05:31.180 --> 00:05:40.140
So the point I want to make here is depending on the type of object to which this reference

00:05:40.140 --> 00:05:41.440
type is pointing to.

00:05:41.440 --> 00:05:44.970
It's going to act differently ultimately,

00:05:44.970 --> 00:05:46.570
all these objects or animals,

00:05:46.570 --> 00:05:49.800
but an animal can be a dog.

00:05:49.800 --> 00:05:51.030
An animal can be cat,

00:05:51.030 --> 00:05:57.510
and depending on the type of animal we want to trigger,

00:05:57.510 --> 00:05:59.750
it's it's respect to behavior.

00:05:59.750 --> 00:06:04.760
I hope that makes sense this is called Run 10 polymorphism.

00:06:04.760 --> 00:06:07.450
That's because during the compile time,

00:06:07.450 --> 00:06:10.660
compiler cannot make out which screamed matter to call.

00:06:10.660 --> 00:06:13.610
Should it be the scream method inside the animal class?

00:06:13.610 --> 00:06:16.950
Or should it be the screen matter inside the door class?

00:06:16.950 --> 00:06:19.570
It just can't make out.

00:06:19.570 --> 00:06:23.980
So the jbm would be able to do that.

00:06:23.980 --> 00:06:31.540
It's going toe Allred the mattered inside Daniel class and depending on the object it is

00:06:31.540 --> 00:06:33.350
pointing to are,

00:06:33.350 --> 00:06:36.050
are we call it the true object.

00:06:36.050 --> 00:06:38.040
So this agreement,

00:06:38.040 --> 00:06:40.750
it will call the metal inside that true object.

00:06:40.750 --> 00:06:42.160
Now,

00:06:42.160 --> 00:06:43.670
where's the typecasting here?

00:06:43.670 --> 00:06:45.550
Joe has done that for us.

00:06:45.550 --> 00:06:49.080
What has happened in this land is widening.

00:06:49.080 --> 00:06:51.480
Every dog can be an animal,

00:06:51.480 --> 00:06:53.350
so it's widening.

00:06:53.350 --> 00:06:59.140
But in case if you wanted to utilise the method inside the dog,

00:06:59.140 --> 00:07:06.710
then you can always do explicit typecasting off this animal to dog,

00:07:06.710 --> 00:07:07.760
for example,

00:07:07.760 --> 00:07:19.240
you can have a statement that says something like this Dog D equals just copy invested over

00:07:19.240 --> 00:07:19.650
here.

00:07:19.650 --> 00:07:24.480
The order sedition will.

00:07:24.480 --> 00:07:24.860
Actually,

00:07:24.860 --> 00:07:25.620
if it's a problem,

00:07:25.620 --> 00:07:28.940
it will automatically convert this object to dog.

00:07:28.940 --> 00:07:32.350
It will suggest us to convert this object to dunk,

00:07:32.350 --> 00:07:39.450
and now you can always call attain the behavior of dog on the D object did not buck.

00:07:39.450 --> 00:07:43.060
It's really But whereas it if this is,

00:07:43.060 --> 00:07:44.270
if you're trying to do the same,

00:07:44.270 --> 00:07:48.150
any object whose to object is animal,

00:07:48.150 --> 00:07:52.200
then this would yield a compile time error.

00:07:52.200 --> 00:07:54.250
For example.

00:07:54.250 --> 00:07:55.120
You can't do this.

00:07:55.120 --> 00:07:59.170
It will result in compiled a mirror class caste exception.

00:07:59.170 --> 00:08:02.050
It's under those changes.

00:08:02.050 --> 00:08:04.360
Another point,

00:08:04.360 --> 00:08:05.510
which I want to point out,

00:08:05.510 --> 00:08:09.350
is this will actually make all life a little easier.

00:08:09.350 --> 00:08:15.240
That's why we have a matter that's just going to print the details off that animal.

00:08:15.240 --> 00:08:17.350
Let's say so.

00:08:17.350 --> 00:08:24.250
Print details static.

00:08:24.250 --> 00:08:29.460
This Astra static that reason is this is a static method,

00:08:29.460 --> 00:08:36.680
and we can only call another static method inside this where we have something that does

00:08:36.680 --> 00:08:37.260
something,

00:08:37.260 --> 00:08:41.100
this is not going to return anything,

00:08:41.100 --> 00:08:48.280
and the perimeter that we send is animal A.

00:08:48.280 --> 00:08:50.730
This way,

00:08:50.730 --> 00:08:53.650
this method can accept literally any animal.

00:08:53.650 --> 00:08:58.900
And let's say we have 100 different types of animals like dog cat,

00:08:58.900 --> 00:08:59.880
crocodile,

00:08:59.880 --> 00:09:00.470
elephant,

00:09:00.470 --> 00:09:01.550
etcetera and all.

00:09:01.550 --> 00:09:08.190
Inherit the behavior or extend the animal class so we don't have to write 100 different

00:09:08.190 --> 00:09:14.940
methods for each and every object we don't have to have the same method written for a dog

00:09:14.940 --> 00:09:18.230
and the same at the written for cat etcetera,

00:09:18.230 --> 00:09:18.890
insert weaken.

00:09:18.890 --> 00:09:21.480
Just send the parent class object.

00:09:21.480 --> 00:09:23.250
But doing it in this manner.

00:09:23.250 --> 00:09:24.750
If you wanna send dog,

00:09:24.750 --> 00:09:27.230
you could just have a reference type as animal.

00:09:27.230 --> 00:09:31.870
But point to a dog object and send this as a perimeter to this method.

00:09:31.870 --> 00:09:34.910
And inside this matter we do,

00:09:34.910 --> 00:09:39.570
narrowing a valid narrowing that doesn't result in class caste exception.

00:09:39.570 --> 00:09:43.380
And we do anything that we wanted to do inside this method.

00:09:43.380 --> 00:09:45.960
I hope that makes sense.

00:09:45.960 --> 00:09:48.050
See you in my next radio.

