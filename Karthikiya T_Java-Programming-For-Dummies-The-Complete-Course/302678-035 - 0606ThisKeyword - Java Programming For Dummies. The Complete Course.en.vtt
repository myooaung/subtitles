WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.480
in this video.

00:00:01.480 --> 00:00:03.890
I'm going to talk about this keyboard.

00:00:03.890 --> 00:00:05.790
Take a look at this program.

00:00:05.790 --> 00:00:15.640
We just simply created an object and instance off a class Mats and I have sent couple of

00:00:15.640 --> 00:00:20.950
values here 10 and 20 and we're trying to find the edition off those two values.

00:00:20.950 --> 00:00:24.500
Now I'm going to make a small change here.

00:00:24.500 --> 00:00:30.110
I'm going to change D two X and K tau.

00:00:30.110 --> 00:00:30.460
Why?

00:00:30.460 --> 00:00:35.190
So what does this mean?

00:00:35.190 --> 00:00:37.170
The name off,

00:00:37.170 --> 00:00:43.260
both local variables and in strands variables are both saying now we for run this program.

00:00:43.260 --> 00:00:48.840
What is the result that you're expecting would get zero?

00:00:48.840 --> 00:00:49.570
I'll tell you why.

00:00:49.570 --> 00:00:51.780
Let's run the program.

00:00:51.780 --> 00:01:07.310
The reason is the compiler could not figure out if the sex is a local variable that was

00:01:07.310 --> 00:01:08.910
sent as a perimeter here.

00:01:08.910 --> 00:01:10.920
Or is it an instance?

00:01:10.920 --> 00:01:11.520
Variable.

00:01:11.520 --> 00:01:13.360
Hence,

00:01:13.360 --> 00:01:16.230
it just didn't do anything by default.

00:01:16.230 --> 00:01:18.180
The value off and would be zero.

00:01:18.180 --> 00:01:21.990
So some of zero and zero would be zero.

00:01:21.990 --> 00:01:23.130
Now,

00:01:23.130 --> 00:01:24.210
how do you fix this?

00:01:24.210 --> 00:01:27.510
We use the keyboard called this,

00:01:27.510 --> 00:01:31.340
but before that there's one key thing to understand.

00:01:31.340 --> 00:01:34.250
Whenever we call a constructor or method,

00:01:34.250 --> 00:01:37.060
we're also sending one perimeter,

00:01:37.060 --> 00:01:38.950
which we don't see it here.

00:01:38.950 --> 00:01:44.050
That perimeter is nothing but the current object.

00:01:44.050 --> 00:01:49.110
We're just sending the reference variable to that matter,

00:01:49.110 --> 00:01:51.670
and we know that difference.

00:01:51.670 --> 00:01:55.680
Variable holds the address where the actual object is reciting,

00:01:55.680 --> 00:02:00.760
and when we do so we can play anything.

00:02:00.760 --> 00:02:01.140
With that,

00:02:01.140 --> 00:02:03.050
we can do anything with that object.

00:02:03.050 --> 00:02:07.650
The key would appoint to use is this,

00:02:07.650 --> 00:02:11.650
which means the current object.

00:02:11.650 --> 00:02:13.220
Essentially,

00:02:13.220 --> 00:02:15.800
this is same as O.

00:02:15.800 --> 00:02:15.940
B.

00:02:15.940 --> 00:02:19.500
J and O B.

00:02:19.500 --> 00:02:19.930
J.

00:02:19.930 --> 00:02:23.740
Certainly we don't use the word O.

00:02:23.740 --> 00:02:23.850
B.

00:02:23.850 --> 00:02:24.260
J.

00:02:24.260 --> 00:02:26.450
That's because we can have more than one object,

00:02:26.450 --> 00:02:27.750
for example,

00:02:27.750 --> 00:02:30.960
like Control See and Control V.

00:02:30.960 --> 00:02:33.180
I could name this as object one,

00:02:33.180 --> 00:02:36.990
and we cannot change the name here to object one,

00:02:36.990 --> 00:02:40.160
because it might cause problem.

00:02:40.160 --> 00:02:46.050
But the statement So we're just simply going to use a general word called this.

00:02:46.050 --> 00:02:56.470
This will just implicitly assume current object with this statement.

00:02:56.470 --> 00:02:58.560
This will be replaced with O.

00:02:58.560 --> 00:02:58.710
B.

00:02:58.710 --> 00:02:59.030
J.

00:02:59.030 --> 00:03:06.240
During compile time and with this statement that this will be replaced with Object Orbiter

00:03:06.240 --> 00:03:06.580
one.

00:03:06.580 --> 00:03:09.050
Not this will.

00:03:09.050 --> 00:03:10.160
It's all our problem,

00:03:10.160 --> 00:03:16.350
Compiler IHS certain that this is an instance variable and the X in here is a local

00:03:16.350 --> 00:03:18.280
variable that is sent as perimeter.

00:03:18.280 --> 00:03:19.330
Let's try to run.

00:03:19.330 --> 00:03:28.370
The program gripped Great 30.

00:03:28.370 --> 00:03:31.240
Now,

00:03:31.240 --> 00:03:32.310
as I mentioned,

00:03:32.310 --> 00:03:34.360
even when we're calling a method,

00:03:34.360 --> 00:03:38.900
the current object will be sent with me at another matter here.

00:03:38.900 --> 00:03:41.410
I said,

00:03:41.410 --> 00:03:49.220
Why set while use index and and why?

00:03:49.220 --> 00:04:01.200
And I'm just going to simply copy piss discord in here that do all shift F to give proper

00:04:01.200 --> 00:04:04.550
indentation from here.

00:04:04.550 --> 00:04:10.820
Isn't one of these objects I'm going to call said.

00:04:10.820 --> 00:04:11.130
Well,

00:04:11.130 --> 00:04:11.610
use.

00:04:11.610 --> 00:04:21.160
I went to give 50 and 50 Now what is the result that you're expecting it would be 100?

00:04:21.160 --> 00:04:30.640
That's because we have said the values to 10 and 20 initially,

00:04:30.640 --> 00:04:36.660
but those values are actually overridden when we call this method said values.

00:04:36.660 --> 00:04:38.950
So we got an updated value here.

00:04:38.950 --> 00:04:40.450
Football X and y.

00:04:40.450 --> 00:04:49.080
Now let me just get it off this Stedman the key word this and tried to run the program,

00:04:49.080 --> 00:04:51.580
but it's a result that you're expecting.

00:04:51.580 --> 00:04:59.450
How you think it's zero r would be 50 or would it be 100?

00:04:59.450 --> 00:05:05.940
You'll be surprised it would be 30.

00:05:05.940 --> 00:05:12.700
That's because off the same reason,

00:05:12.700 --> 00:05:18.650
compiler is confused and is not able to figure out if this X in here is a local very book

00:05:18.650 --> 00:05:19.430
or an instance.

00:05:19.430 --> 00:05:20.070
Very book.

00:05:20.070 --> 00:05:22.980
Hence it just didn't do any changes at all.

00:05:22.980 --> 00:05:27.360
The last a bear values work then and 20.

00:05:27.360 --> 00:05:31.200
And hence the result is study.

00:05:31.200 --> 00:05:32.820
Would that make sense?

00:05:32.820 --> 00:05:34.950
See you in my next video.

