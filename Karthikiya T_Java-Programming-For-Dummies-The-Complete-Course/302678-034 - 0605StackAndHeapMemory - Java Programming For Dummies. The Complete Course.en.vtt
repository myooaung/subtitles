WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.410
in this video,

00:00:01.410 --> 00:00:04.420
I'm going to talk about stack memory and heat memory.

00:00:04.420 --> 00:00:06.800
Remember the story from your childhood?

00:00:06.800 --> 00:00:09.780
How do you take out the yellow ring from this?

00:00:09.780 --> 00:00:14.560
You'll first take out the blurring and then you'll take out the green ring.

00:00:14.560 --> 00:00:17.850
Only then will you be able to pull the alluring out.

00:00:17.850 --> 00:00:21.450
This is sort of like a last in First Out,

00:00:21.450 --> 00:00:25.880
which means the last one that comes in is the 1st 1 to go out.

00:00:25.880 --> 00:00:31.600
So this is called Straka Broach,

00:00:31.600 --> 00:00:35.200
and it follow last in first out approach.

00:00:35.200 --> 00:00:42.650
Little Java follows the similar methodology to ever get memory while we're on the program

00:00:42.650 --> 00:00:45.200
so we'll have a stack,

00:00:45.200 --> 00:00:47.950
and it did will have sections in it.

00:00:47.950 --> 00:00:53.150
Each of the section will be dedicated to one particular thread.

00:00:53.150 --> 00:00:56.360
You can think off thread as a single process,

00:00:56.360 --> 00:00:57.650
very small process,

00:00:57.650 --> 00:01:01.080
or we can think off it in this manner.

00:01:01.080 --> 00:01:06.080
Let's I crater an object and I say object daughter Eman I called methadone month.

00:01:06.080 --> 00:01:10.850
Now a section will be dedicated for that method in the stack,

00:01:10.850 --> 00:01:14.000
so let's see how it's done.

00:01:14.000 --> 00:01:18.420
Let's get into the inter notes now take a look at this.

00:01:18.420 --> 00:01:24.000
The execution starts from the main method and mean being a method,

00:01:24.000 --> 00:01:26.990
a section in the stack will be together for it.

00:01:26.990 --> 00:01:28.120
For me,

00:01:28.120 --> 00:01:32.670
John,

00:01:32.670 --> 00:01:33.310
what's your mission?

00:01:33.310 --> 00:01:40.020
Uses the section to store all the variables that are local to the main method in this case

00:01:40.020 --> 00:01:40.020
,

00:01:40.020 --> 00:01:41.300
X and Y,

00:01:41.300 --> 00:01:44.440
or the local variables that are local to the main matter.

00:01:44.440 --> 00:01:47.690
And these variables will have the scope within that method,

00:01:47.690 --> 00:01:52.530
whatever are the variables that have the school but in this method will be reciting here.

00:01:52.530 --> 00:01:53.040
In this case,

00:01:53.040 --> 00:02:03.040
it's X Justin and weigh 20 and the interpreter Ghost Land Byline.

00:02:03.040 --> 00:02:08.920
We'll talk about this lane pretty soon with Integrated comes across with this lane object

00:02:08.920 --> 00:02:09.860
daughter Eman.

00:02:09.860 --> 00:02:11.330
We're calling another method,

00:02:11.330 --> 00:02:16.870
so another section will be dedicated in the stack for Method M one.

00:02:16.870 --> 00:02:20.370
And whatever are the variables that have the scope off?

00:02:20.370 --> 00:02:25.250
Eman will be deciding here in this case we're sending when pyramid or X.

00:02:25.250 --> 00:02:31.310
So we're taking it as perimeter P p and well,

00:02:31.310 --> 00:02:31.950
you off.

00:02:31.950 --> 00:02:36.390
That would be 10 because that's what we're sending here.

00:02:36.390 --> 00:02:43.650
Interpreter Anderson's at this matter,

00:02:43.650 --> 00:02:47.050
and it starts executing lines in it.

00:02:47.050 --> 00:02:52.930
They're supposed to be entry when the interpreter comes across but entry.

00:02:52.930 --> 00:02:54.850
We're calling the mattered M three,

00:02:54.850 --> 00:02:57.880
and since this is another matter,

00:02:57.880 --> 00:03:02.380
a section will be dedicated for it to store its local variables,

00:03:02.380 --> 00:03:06.450
and local variables will be reciting here.

00:03:06.450 --> 00:03:11.730
And once interpreter comes to the last line off matter entry,

00:03:11.730 --> 00:03:18.280
it goes back to matter m two and and it will continue with execution off porter

00:03:18.280 --> 00:03:22.330
instructions in the method m warm Now.

00:03:22.330 --> 00:03:23.170
At this point,

00:03:23.170 --> 00:03:24.980
since we're done with entry method,

00:03:24.980 --> 00:03:30.580
even the memory will be freed and is available for future crossing.

00:03:30.580 --> 00:03:36.380
Once the interpreter comes to the last lane off Method M one,

00:03:36.380 --> 00:03:38.350
it will go back.

00:03:38.350 --> 00:03:44.680
The main method rendered will execute the remaining instructions once it returns back to

00:03:44.680 --> 00:03:45.400
main method,

00:03:45.400 --> 00:03:48.750
even M one method will get freed.

00:03:48.750 --> 00:03:52.630
And whatever are the variables that are the inside.

00:03:52.630 --> 00:03:54.340
This will be lost as well,

00:03:54.340 --> 00:03:58.560
because we're done with operations that needs to be performed on those very boats.

00:03:58.560 --> 00:04:02.060
No one's.

00:04:02.060 --> 00:04:03.750
We reach the end off main method.

00:04:03.750 --> 00:04:10.620
Even this memory really get freed when we have nothing in the stack.

00:04:10.620 --> 00:04:12.990
That means we're done with execution of the program.

00:04:12.990 --> 00:04:16.550
So let's talk about this particle instruction.

00:04:16.550 --> 00:04:26.540
We have a heap memory as well in that will store objects and each and every object will

00:04:26.540 --> 00:04:28.080
have a location,

00:04:28.080 --> 00:04:31.100
an address associated with it.

00:04:31.100 --> 00:04:36.350
This air Rosen here is used to look at that beautiful object.

00:04:36.350 --> 00:04:38.120
Let's get into the details.

00:04:38.120 --> 00:04:40.500
Let me go to a fresh page.

00:04:40.500 --> 00:04:42.990
Now take a look at this.

00:04:42.990 --> 00:04:45.100
We have a new key were used.

00:04:45.100 --> 00:04:56.170
This particular section in this instruction will create an object in the heap memory and

00:04:56.170 --> 00:05:02.300
taken Lord that were persons in para meters to the constructor of the maths class 10 and 20

00:05:02.300 --> 00:05:02.300
.

00:05:02.300 --> 00:05:04.970
And we're setting the instance very bolts.

00:05:04.970 --> 00:05:11.870
And these two very bolts are instance variables and they're not local to any method.

00:05:11.870 --> 00:05:14.270
There are specific to an instance Hence,

00:05:14.270 --> 00:05:16.250
this will be stored in here.

00:05:16.250 --> 00:05:24.200
Maybe a is go 10 v equals 20 And in order to identify this object,

00:05:24.200 --> 00:05:30.550
there will be an address associated with it that says you must be the ones you want now.

00:05:30.550 --> 00:05:31.100
Do taken.

00:05:31.100 --> 00:05:31.530
Lord,

00:05:31.530 --> 00:05:35.370
the origin here doesn't hold the object itself.

00:05:35.370 --> 00:05:38.080
It will hold the reference off their object.

00:05:38.080 --> 00:05:39.310
Let me explain what I mean.

00:05:39.310 --> 00:05:42.650
Let's assume that this is inside and main method,

00:05:42.650 --> 00:05:47.850
so we'll have a stack created and a section will be dedicated for main method.

00:05:47.850 --> 00:05:50.950
Now we'll have this O.

00:05:50.950 --> 00:05:51.110
B.

00:05:51.110 --> 00:06:02.460
J created in here and was the value in it the value if it would be 0101 which is the

00:06:02.460 --> 00:06:06.750
address where this particular object is reciting.

00:06:06.750 --> 00:06:15.530
So this is also called as an reference type because it will have information on where the

00:06:15.530 --> 00:06:16.510
object is reciting.

00:06:16.510 --> 00:06:18.100
But this O.

00:06:18.100 --> 00:06:18.250
B.

00:06:18.250 --> 00:06:18.570
J.

00:06:18.570 --> 00:06:20.490
Doesn't hold object by itself.

00:06:20.490 --> 00:06:23.810
It will just have the information about where the object is reciting.

00:06:23.810 --> 00:06:26.230
And the scoop off this O.

00:06:26.230 --> 00:06:29.880
B J is also within this main method.

00:06:29.880 --> 00:06:34.520
Once this particular section pops out off the stack,

00:06:34.520 --> 00:06:37.770
then the reference off this object is no longer available.

00:06:37.770 --> 00:06:38.880
You know,

00:06:38.880 --> 00:06:42.210
stack memory was stored the perimeter letter types as villains.

00:06:42.210 --> 00:06:46.710
The reference time You can hear terms like reference type,

00:06:46.710 --> 00:06:49.920
non primitive data type or use the defined area type.

00:06:49.920 --> 00:06:51.940
They all essentially mean the same.

00:06:51.940 --> 00:06:57.960
We're talking about a reference very bulls in which its value would constitute the address

00:06:57.960 --> 00:07:00.160
where the object is reciting.

00:07:00.160 --> 00:07:03.910
So whatever is residing in the heap will have a global access.

00:07:03.910 --> 00:07:10.190
That means even though there is nothing left in the stack We could still have some object

00:07:10.190 --> 00:07:12.450
hanging around inside this heap memory,

00:07:12.450 --> 00:07:17.760
at least for some time until the garbage collector comes in and cleans them up.

00:07:17.760 --> 00:07:20.050
We'll talk about garbage collection in a moment,

00:07:20.050 --> 00:07:22.560
but this is how it works.

00:07:22.560 --> 00:07:28.420
Let's take a look at another example to bring you more clarity on this.

00:07:28.420 --> 00:07:31.500
Take a look at this talk.

00:07:31.500 --> 00:07:32.640
Let's go line by line.

00:07:32.640 --> 00:07:38.180
We have created a new object with with the keyboard new so that will create an object

00:07:38.180 --> 00:07:45.570
inside the heat memory with the values 10 and 20 because these are instance variables,

00:07:45.570 --> 00:07:48.490
and we'll have an address associated with it.

00:07:48.490 --> 00:07:50.050
You know,

00:07:50.050 --> 00:07:52.470
stack memory for a main method.

00:07:52.470 --> 00:07:53.010
By the way,

00:07:53.010 --> 00:07:56.670
let's as you these instructions are reciting inside the main method.

00:07:56.670 --> 00:07:59.750
There's a section dedicated for me method,

00:07:59.750 --> 00:08:05.560
and we'll have reference type defined,

00:08:05.560 --> 00:08:10.780
and it will have information on the headdress where dob,

00:08:10.780 --> 00:08:12.260
where this object is reciting,

00:08:12.260 --> 00:08:17.420
which is little one Jeroen and interpreter comes to landing.

00:08:17.420 --> 00:08:18.080
But two,

00:08:18.080 --> 00:08:19.970
we have created a new difference type,

00:08:19.970 --> 00:08:24.490
and we ascend this reference type to it.

00:08:24.490 --> 00:08:27.880
So we're not actually assigning the object.

00:08:27.880 --> 00:08:35.040
Were just assigning the address in which the object reciting So here is how it gets a

00:08:35.040 --> 00:08:35.570
located.

00:08:35.570 --> 00:08:42.400
I'll be just too and it will have Whatever is the value inside this object one which is

00:08:42.400 --> 00:08:50.630
0101 So essentially OPD one and a budget to are pointing to the same object.

00:08:50.630 --> 00:08:52.920
We're not creating a duplicate object here.

00:08:52.920 --> 00:08:56.250
Similarly,

00:08:56.250 --> 00:08:59.430
on the similar lines we have Object three,

00:08:59.430 --> 00:09:05.100
which is holding the well do which object to is holding,

00:09:05.100 --> 00:09:08.460
which in turn is holding the value off object.

00:09:08.460 --> 00:09:12.270
So even will have object three.

00:09:12.270 --> 00:09:15.950
And that will hold the same around you.

00:09:15.950 --> 00:09:23.500
So all these reference variables are holding information on the location where the object

00:09:23.500 --> 00:09:26.490
is reciting thought That makes sense.

00:09:26.490 --> 00:09:29.790
So now the $1,000,000 question.

00:09:29.790 --> 00:09:32.800
Why do we need to store objects in heat memory?

00:09:32.800 --> 00:09:35.370
The reason is simple.

00:09:35.370 --> 00:09:41.850
Things will get very messy as well as it will impact the performance dramatically.

00:09:41.850 --> 00:09:44.070
What do I mean by that?

00:09:44.070 --> 00:09:50.720
Whatever are the variables deciding in the stack memory are redefined types.

00:09:50.720 --> 00:09:51.150
I mean,

00:09:51.150 --> 00:09:55.530
we know exactly how much memory they want to take up front,

00:09:55.530 --> 00:09:56.790
right in the beginning,

00:09:56.790 --> 00:09:57.970
when we compile the program.

00:09:57.970 --> 00:10:06.450
But whereas the object is jbm specific the size off object is not Sartain.

00:10:06.450 --> 00:10:11.080
It can vary from jbm to jbm depending on the vendor.

00:10:11.080 --> 00:10:16.300
So it's hard to make a guess on how much memory each object would take.

00:10:16.300 --> 00:10:21.230
A lot of factors that come into picture when deciding the memory location done for an

00:10:21.230 --> 00:10:21.790
object,

00:10:21.790 --> 00:10:23.510
the type of variables,

00:10:23.510 --> 00:10:24.750
the number of variables.

00:10:24.750 --> 00:10:30.960
And we also need to consider the space it takes just to maintain the state off this object

00:10:30.960 --> 00:10:32.770
or to maintain this object itself.

00:10:32.770 --> 00:10:36.250
So it gets really tricky in here and let's not get into it.

00:10:36.250 --> 00:10:41.140
So now that's number one reason and number two.

00:10:41.140 --> 00:10:43.950
Let's assume that there is no heap memory at all,

00:10:43.950 --> 00:10:47.330
and that also means there are no reference type.

00:10:47.330 --> 00:10:51.470
We're directly storing the object in here.

00:10:51.470 --> 00:10:52.710
No,

00:10:52.710 --> 00:10:54.460
take a look at the same example.

00:10:54.460 --> 00:10:56.580
By doing this,

00:10:56.580 --> 00:10:59.750
we're not actually pointing to single object.

00:10:59.750 --> 00:11:03.690
We have to create three different objects inside.

00:11:03.690 --> 00:11:05.800
Distract inside the stack,

00:11:05.800 --> 00:11:10.440
which is pretty consuming.

00:11:10.440 --> 00:11:12.270
That's a lot of memory,

00:11:12.270 --> 00:11:13.490
and each object.

00:11:13.490 --> 00:11:15.420
One consume four bites or eight bites.

00:11:15.420 --> 00:11:17.190
It's a huge chunk off memory,

00:11:17.190 --> 00:11:21.070
and we're trying to dupe will get the same data multiple times.

00:11:21.070 --> 00:11:21.610
Instead,

00:11:21.610 --> 00:11:26.890
why not just have a friend's type and point them to the actual object like we do.

00:11:26.890 --> 00:11:30.170
So that's reason number two.

00:11:30.170 --> 00:11:38.270
Let's take a look at one last reason why you want a store objects and heap memory.

00:11:38.270 --> 00:11:44.660
Take a look at this example for the sake of example that says Jim,

00:11:44.660 --> 00:11:45.810
there's no heat memory,

00:11:45.810 --> 00:11:50.910
so we'll have a stack and a section dedicated for a main method.

00:11:50.910 --> 00:11:51.930
Again that says,

00:11:51.930 --> 00:11:52.140
Jim,

00:11:52.140 --> 00:11:53.220
this is reciting Inside.

00:11:53.220 --> 00:12:01.050
The main method will have an object created that will have a huge chunk off information

00:12:01.050 --> 00:12:02.780
about this object,

00:12:02.780 --> 00:12:06.480
including these variables say 10 and 30.

00:12:06.480 --> 00:12:10.760
Now we're sending this object to this map.

00:12:10.760 --> 00:12:11.780
The M one.

00:12:11.780 --> 00:12:16.380
There will be a new section created for Method Emma,

00:12:16.380 --> 00:12:22.180
and it's local Variable would be the object that we sent and let's go inside this Eman

00:12:22.180 --> 00:12:22.650
mattered.

00:12:22.650 --> 00:12:25.900
I updated the state off this object.

00:12:25.900 --> 00:12:28.970
Let's say object dot Exe.

00:12:28.970 --> 00:12:34.050
Change this value 10 to 20 That says Jim Zone.

00:12:34.050 --> 00:12:37.170
So now inside,

00:12:37.170 --> 00:12:38.850
we'll have an object.

00:12:38.850 --> 00:12:43.290
We're with the Value 24 x.

00:12:43.290 --> 00:12:46.160
Once we come out of this method m one,

00:12:46.160 --> 00:12:51.150
this detail will get popped out off the stack.

00:12:51.150 --> 00:12:57.010
So that means there is no information related to this method and one that also means we

00:12:57.010 --> 00:12:59.570
don't have the details on the update a state.

00:12:59.570 --> 00:13:04.580
So when we send this object to method em to a new section will be created.

00:13:04.580 --> 00:13:09.770
And again the value of X would be 10 nor the updated value.

00:13:09.770 --> 00:13:12.650
This is clearly a problem.

00:13:12.650 --> 00:13:15.420
We're not getting the updated value abated.

00:13:15.420 --> 00:13:22.520
State off their object hope that makes sense the red as if the object is reciting in the

00:13:22.520 --> 00:13:23.180
heap.

00:13:23.180 --> 00:13:24.510
As you can guess.

00:13:24.510 --> 00:13:31.120
Everywhere in all these methods and one M two m three were actually talking about the same

00:13:31.120 --> 00:13:31.540
object,

00:13:31.540 --> 00:13:33.880
and we're all pointing to the same object.

00:13:33.880 --> 00:13:37.370
If the state is abetted by Method M one,

00:13:37.370 --> 00:13:39.590
the rest of the methods will get updated,

00:13:39.590 --> 00:13:40.150
stripped.

00:13:40.150 --> 00:13:46.240
Let's talk a little bit about garbage Collection will get into the details off garbage

00:13:46.240 --> 00:13:47.780
collection or future videos.

00:13:47.780 --> 00:13:48.850
But for now,

00:13:48.850 --> 00:13:56.570
just a quick explanation on it when comes to primitive type or reference type were cleaning

00:13:56.570 --> 00:13:57.090
them up.

00:13:57.090 --> 00:13:59.050
The moment we get out of that particular method,

00:13:59.050 --> 00:14:01.130
in case off objects,

00:14:01.130 --> 00:14:04.320
there has to be somewhere to clean them up.

00:14:04.320 --> 00:14:09.820
Otherwise the memory off the heap will get full and we start getting some exceptions or

00:14:09.820 --> 00:14:13.260
errors like Jabba Heap space out of memory exception.

00:14:13.260 --> 00:14:16.640
So how does jbm solve this problem?

00:14:16.640 --> 00:14:20.100
It uses a tool called garbage Collection.

00:14:20.100 --> 00:14:21.290
What that does.

00:14:21.290 --> 00:14:22.050
It's ready,

00:14:22.050 --> 00:14:22.850
complicated,

00:14:22.850 --> 00:14:24.390
but in simple terms.

00:14:24.390 --> 00:14:27.470
If there are no differences available in the stack,

00:14:27.470 --> 00:14:32.350
that means that particular object is eligible to be cleaned.

00:14:32.350 --> 00:14:36.180
Their garbage collection process happens periodically.

00:14:36.180 --> 00:14:37.920
There is no specific time for it.

00:14:37.920 --> 00:14:38.700
It just happens.

00:14:38.700 --> 00:14:43.750
Beat Article E and takes a look at all the objects and see if it has any references left in

00:14:43.750 --> 00:14:45.670
the stack or elsewhere in the memory.

00:14:45.670 --> 00:14:47.010
If not,

00:14:47.010 --> 00:14:50.350
then we'll just clean that particular object.

00:14:50.350 --> 00:14:54.600
And that way the heat memory is maintained,

00:14:54.600 --> 00:14:58.970
and it will help and not getting the memory to before.

00:14:58.970 --> 00:15:04.650
We also have a way to configure the sizes off heat,

00:15:04.650 --> 00:15:06.020
memory and the stack memory.

00:15:06.020 --> 00:15:06.790
By the way,

00:15:06.790 --> 00:15:07.900
if the stackers full,

00:15:07.900 --> 00:15:09.940
we get this stack overflow error,

00:15:09.940 --> 00:15:11.500
which I'll talk about it later.

00:15:11.500 --> 00:15:14.730
Now let's go back to our program,

00:15:14.730 --> 00:15:19.350
and I bet now you'll be able to understand the concept by yourself.

00:15:19.350 --> 00:15:24.340
Open the file methods and constructors so we have.

00:15:24.340 --> 00:15:27.560
How many new keywords do you see here in this program there.

00:15:27.560 --> 00:15:28.050
Three.

00:15:28.050 --> 00:15:34.820
That means you can stride ever say that we have three objects created in the heat memory In

00:15:34.820 --> 00:15:36.160
the instruction number three,

00:15:36.160 --> 00:15:38.260
we have object three,

00:15:38.260 --> 00:15:45.770
which is a reference type and is actually having the same information that object.

00:15:45.770 --> 00:15:47.310
One difference type is holding.

00:15:47.310 --> 00:15:50.880
That means the address off this particular object.

00:15:50.880 --> 00:15:58.180
Same with the object for it is holding whatever object or Bridget three reference type is

00:15:58.180 --> 00:15:58.650
holding.

00:15:58.650 --> 00:16:06.450
So essentially object one object three An object for are holding the same information about

00:16:06.450 --> 00:16:15.290
the same object The difference type object to points to a new object altogether.

00:16:15.290 --> 00:16:26.690
Object five is reprints type that holds information about any object and who state is set

00:16:26.690 --> 00:16:32.250
Builds on the object one so that this should be 10 and 40.

00:16:32.250 --> 00:16:34.180
Hope that makes sense.

00:16:34.180 --> 00:16:35.550
See you in my next video.

