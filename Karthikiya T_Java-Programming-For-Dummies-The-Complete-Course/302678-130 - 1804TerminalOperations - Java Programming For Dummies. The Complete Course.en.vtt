WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.250
Alright.

00:00:02.250 --> 00:00:03.410
In this video,

00:00:03.410 --> 00:00:08.360
we're gonna talk about terminal operations terminal operations.

00:00:08.360 --> 00:00:09.630
As the name suggests,

00:00:09.630 --> 00:00:14.750
they come at the end of the statement and they will return a result instead off a stream.

00:00:14.750 --> 00:00:19.270
Which also means that once if you use a terminal operation,

00:00:19.270 --> 00:00:21.570
you can no longer work on that stream.

00:00:21.570 --> 00:00:27.460
Let's take a look at some of the terminal operations or methods we have in the stream FBI.

00:00:27.460 --> 00:00:31.670
The first mother that we're gonna take a look at is the count.

00:00:31.670 --> 00:00:34.990
It will help you get the number of elements in the stream,

00:00:34.990 --> 00:00:38.820
an example of which you can see it or hear.

00:00:38.820 --> 00:00:40.350
Let's run the program.

00:00:40.350 --> 00:00:47.160
So we got a couple of streams and that counts.

00:00:47.160 --> 00:00:54.860
We also got him at the collect and it will help you convert the stream to a collection In

00:00:54.860 --> 00:00:55.330
this case,

00:00:55.330 --> 00:00:58.470
I have converted it to and indeed your list.

00:00:58.470 --> 00:01:03.550
So you're gonna call this mother collect and you will have this as an argument.

00:01:03.550 --> 00:01:11.840
The forage matter is used to high trait on each and every element in the stream and apply

00:01:11.840 --> 00:01:13.080
the specified function.

00:01:13.080 --> 00:01:16.750
This may sound similar to our map method,

00:01:16.750 --> 00:01:19.370
but this is not going to return a stream.

00:01:19.370 --> 00:01:23.560
This will just simply apply dysfunction on each and every element.

00:01:23.560 --> 00:01:25.400
And that's what we have in here.

00:01:25.400 --> 00:01:35.720
The reduced meant that is a little tricky and for the convenience off explanation I'm also

00:01:35.720 --> 00:01:41.950
doing ASUs out off the perimeter is being passed to the slammed expression.

00:01:41.950 --> 00:01:44.850
So here's how register mother works.

00:01:44.850 --> 00:01:54.930
It's going to take in the 1st 2 perimeters in the stream two and seven and is going to

00:01:54.930 --> 00:01:59.250
perform dysfunction on those two para meters.

00:01:59.250 --> 00:02:00.620
And again,

00:02:00.620 --> 00:02:08.870
it's going to call itself by sending the result off this as the first argument and the next

00:02:08.870 --> 00:02:10.360
element present in the stream,

00:02:10.360 --> 00:02:14.150
which will be four as the second argument.

00:02:14.150 --> 00:02:16.690
And that's where we got certain.

00:02:16.690 --> 00:02:18.250
Blessed to nine,

00:02:18.250 --> 00:02:21.270
the nineties again passed to the same method,

00:02:21.270 --> 00:02:26.110
but the next element in the stream again,

00:02:26.110 --> 00:02:28.670
it's going to point to some of this,

00:02:28.670 --> 00:02:29.250
too,

00:02:29.250 --> 00:02:30.900
which will be 13.

00:02:30.900 --> 00:02:33.670
Believe it passed to the same method again,

00:02:33.670 --> 00:02:37.850
along with the next element which will be one should take a look at it.

00:02:37.850 --> 00:02:44.180
Scenting keeps going until we get a final result,

00:02:44.180 --> 00:02:48.850
which will be 55.

00:02:48.850 --> 00:02:58.320
I hope it's clear we also have short circuit terminal operations has this.

00:02:58.320 --> 00:03:01.790
Methods can written something even from infinite Stream.

00:03:01.790 --> 00:03:05.270
An example of foot can be seen in here.

00:03:05.270 --> 00:03:14.420
The matter Any match is going to return a Boolean value and it would basically check to see

00:03:14.420 --> 00:03:19.650
if there is any element in the stream that match the specified condition.

00:03:19.650 --> 00:03:21.150
In this case,

00:03:21.150 --> 00:03:24.250
how stream is random generation off indigenous,

00:03:24.250 --> 00:03:26.790
so this will be an infinite stream.

00:03:26.790 --> 00:03:34.750
But this method is going to stop the stream once it comes across with an element that will

00:03:34.750 --> 00:03:39.250
meet this condition basically and numerical that is divisible by five.

00:03:39.250 --> 00:03:42.590
And that's where we got true as a result,

00:03:42.590 --> 00:03:44.790
similarly from the indigent stream,

00:03:44.790 --> 00:03:50.350
I'm trying to see if there is any element that matches this condition.

00:03:50.350 --> 00:03:52.150
And again it's true,

00:03:52.150 --> 00:03:53.270
Andi,

00:03:53.270 --> 00:03:54.070
even in here,

00:03:54.070 --> 00:04:01.020
I'm checking to see if there's banana present in the string stream and in fact it is so

00:04:01.020 --> 00:04:01.780
it's true.

00:04:01.780 --> 00:04:05.300
Similarly,

00:04:05.300 --> 00:04:12.000
we also got all match method and it would check to see if all the elements in the stream

00:04:12.000 --> 00:04:13.880
meet the following condition.

00:04:13.880 --> 00:04:17.130
There is at least one element that doesn't meet the condition,

00:04:17.130 --> 00:04:19.430
then is going to return false.

00:04:19.430 --> 00:04:25.790
So not all elements in the indigenous stream we had are divisible by fire and sword return

00:04:25.790 --> 00:04:25.790
.

00:04:25.790 --> 00:04:26.490
False.

00:04:26.490 --> 00:04:32.050
And we're checking you for fall off our stream elements or less than 50.

00:04:32.050 --> 00:04:33.230
They are.

00:04:33.230 --> 00:04:38.170
So we've got true none.

00:04:38.170 --> 00:04:43.710
Matt will actually check to see if no known element in the stream matched the specific

00:04:43.710 --> 00:04:44.550
condition.

00:04:44.550 --> 00:04:46.850
Regard the results in here.

00:04:46.850 --> 00:04:54.590
The fine first method will return the first element that will meet this persuade condition

00:04:54.590 --> 00:04:57.150
and find any,

00:04:57.150 --> 00:05:02.570
as you can guess it will find and return any element that meets the condition.

00:05:02.570 --> 00:05:07.250
So we got those elements printed in here.

00:05:07.250 --> 00:05:12.800
Also there a couple off more methods,

00:05:12.800 --> 00:05:14.730
which are a little tricky.

00:05:14.730 --> 00:05:16.210
We're going talk about them.

00:05:16.210 --> 00:05:17.450
Incoming videos.

00:05:17.450 --> 00:05:19.750
So you in my next radio.

