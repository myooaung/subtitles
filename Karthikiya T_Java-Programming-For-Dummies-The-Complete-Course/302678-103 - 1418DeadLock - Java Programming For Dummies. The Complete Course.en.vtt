WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.880
in this video,

00:00:01.880 --> 00:00:04.050
we're gonna talk about deadlock.

00:00:04.050 --> 00:00:10.930
Deadlock is a situation where two or more threats will wait forever to acquire the lock

00:00:10.930 --> 00:00:16.920
owned by some of the tread in this example have created a couple off objects off the class

00:00:16.920 --> 00:00:17.650
object.

00:00:17.650 --> 00:00:21.610
We also have couple off threads,

00:00:21.610 --> 00:00:24.450
and in each one of these threats,

00:00:24.450 --> 00:00:27.890
I have nested synchronized block,

00:00:27.890 --> 00:00:36.810
which means a synchronized block inside another synchronize block in 31 before enter.

00:00:36.810 --> 00:00:38.050
Inside this section,

00:00:38.050 --> 00:00:41.390
the T one needs to acquire the lock off object one.

00:00:41.390 --> 00:00:50.690
And inside this I'm waiting for a second and to enter inside this substance green Eyes

00:00:50.690 --> 00:00:51.280
section.

00:00:51.280 --> 00:00:57.550
That threatening stay acquired the lock off object to in threat to its the other way first

00:00:57.550 --> 00:01:01.640
when it acquired the lock off object to and then object one.

00:01:01.640 --> 00:01:05.450
This is a good example for deadlock.

00:01:05.450 --> 00:01:09.560
Now what's going to happen is let's do one started first.

00:01:09.560 --> 00:01:14.970
So it enters inside this block by acquiring the lock off object one,

00:01:14.970 --> 00:01:19.850
and it waits for a second or rather sleeps for a second.

00:01:19.850 --> 00:01:23.050
While the threat to one is sleeping,

00:01:23.050 --> 00:01:27.470
threat T two acquires the lock off object to,

00:01:27.470 --> 00:01:32.990
and it slips for a second and when Threat T one enters this section,

00:01:32.990 --> 00:01:36.260
it needs to acquire the lock off object to,

00:01:36.260 --> 00:01:41.170
but it cannot because object to Lock is acquired by t two.

00:01:41.170 --> 00:01:42.850
Same in here.

00:01:42.850 --> 00:01:46.310
22 interest this section off coat.

00:01:46.310 --> 00:01:49.100
It needs to acquire the lock off object one,

00:01:49.100 --> 00:01:53.470
but it's not possible because it's already acquired by do you want.

00:01:53.470 --> 00:01:58.450
So both these threats will wait forever to acquire the lock.

00:01:58.450 --> 00:02:02.750
And that will never happen if I run this program.

00:02:02.750 --> 00:02:10.790
These statements inside this in a straight synchronized block who never get executed

00:02:10.790 --> 00:02:14.650
instead about the trip will be in waiting state.

00:02:14.650 --> 00:02:21.350
But the threads will keep waiting for each other forever.

00:02:21.350 --> 00:02:25.450
So what strong need this so as a solution?

00:02:25.450 --> 00:02:32.380
So the solution is let's have the ordered way off requesting for locks in all the threats,

00:02:32.380 --> 00:02:39.860
instead of saying object one and then object to and thread one and object to an object one

00:02:39.860 --> 00:02:43.150
in trip to let's make them identical.

00:02:43.150 --> 00:02:46.350
So in here I'll have about just one.

00:02:46.350 --> 00:02:47.950
I'm just too,

00:02:47.950 --> 00:02:52.580
just as we have in 21 Now,

00:02:52.580 --> 00:02:54.440
this will definitely solve the problem.

00:02:54.440 --> 00:03:03.170
Let's assume that t one started first requests Lakoff object one and is going toe weight or

00:03:03.170 --> 00:03:04.350
sleep for a second.

00:03:04.350 --> 00:03:06.260
I mean,

00:03:06.260 --> 00:03:06.440
why,

00:03:06.440 --> 00:03:08.550
when t two starts,

00:03:08.550 --> 00:03:11.220
it cannot acquire the lock off object one.

00:03:11.220 --> 00:03:16.460
And so it's going to wait for the lot to be available.

00:03:16.460 --> 00:03:25.050
And the one acquires the lock off object to executes the statement and releases the lock

00:03:25.050 --> 00:03:28.650
for board these objects and is made available for Tito.

00:03:28.650 --> 00:03:33.560
Anti to them continues and executes the code inside.

00:03:33.560 --> 00:03:38.250
Let's on the program pretty well and good.

00:03:38.250 --> 00:03:39.200
All right,

00:03:39.200 --> 00:03:40.450
see you in my next radio.

