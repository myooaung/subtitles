WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:05.145
In this video, we are going to be talking about default methods.

00:00:05.145 --> 00:00:08.085
Going back to our robot example,

00:00:08.085 --> 00:00:12.210
let's say we have this interface with all these abstract methods,

00:00:12.210 --> 00:00:15.749
walk, navigate, talk, etc.

00:00:15.749 --> 00:00:20.265
The problem with interfaces is it doesn't move along with the trend.

00:00:20.265 --> 00:00:25.770
For example, let's say there's a new technology out there, say fingerprint Center.

00:00:25.770 --> 00:00:33.775
And I want every off my client to provide implementation to use that technology.

00:00:33.775 --> 00:00:37.370
When I say client, I'm talking about the people who

00:00:37.370 --> 00:00:40.925
implemented this interface, my interface.

00:00:40.925 --> 00:00:43.055
But there is a problem.

00:00:43.055 --> 00:00:46.070
Let's say I have introduced a new method,

00:00:46.070 --> 00:00:48.305
new abstract method in here,

00:00:48.305 --> 00:00:51.560
which would be says sense,

00:00:51.560 --> 00:00:54.425
fingerprint, something of that sort.

00:00:54.425 --> 00:01:01.460
Now everybody who is implementing mind affairs are forced to provide implementation.

00:01:01.460 --> 00:01:04.760
This is not a good thing for my reputation.

00:01:04.760 --> 00:01:08.549
Nobody would like to be forced.

00:01:08.590 --> 00:01:12.230
At the same time, if I let go this technology,

00:01:12.230 --> 00:01:15.800
then somebody else is going to define a new interface.

00:01:15.800 --> 00:01:21.725
And he's going to define that standards which will use the latest technology.

00:01:21.725 --> 00:01:23.060
And slowly over time,

00:01:23.060 --> 00:01:26.600
people will start migrating to a different implementation.

00:01:26.600 --> 00:01:28.850
And that's not good either.

00:01:28.850 --> 00:01:31.685
So thinking about all this,

00:01:31.685 --> 00:01:36.110
Java eight introduces default methods.

00:01:36.110 --> 00:01:39.740
The actual reason officers and development that can be

00:01:39.740 --> 00:01:43.175
understood when we call it the concept of collections.

00:01:43.175 --> 00:01:45.275
It makes more sense there.

00:01:45.275 --> 00:01:50.495
But for now, this example should suffice, but let's move on.

00:01:50.495 --> 00:01:53.525
So what is the solution in here?

00:01:53.525 --> 00:01:56.195
Solution is obviously default methods.

00:01:56.195 --> 00:01:57.980
So now what is the default method?

00:01:57.980 --> 00:02:02.270
So far we haven't been able to provide implementation or

00:02:02.270 --> 00:02:06.695
we haven't been able to provide behavior inside an interface.

00:02:06.695 --> 00:02:08.570
I mean all these methods are abstract.

00:02:08.570 --> 00:02:13.700
We cannot have a curly brace and provide all the instructions.

00:02:13.700 --> 00:02:15.590
But from Java eight,

00:02:15.590 --> 00:02:19.250
it is possible that you can provide the implementation,

00:02:19.250 --> 00:02:26.660
but you need to make sure you will mark that method using a keyword called default.

00:02:26.660 --> 00:02:28.610
For, for example, in this case,

00:02:28.610 --> 00:02:34.055
we have introduced this new method which is sends fingerprint.

00:02:34.055 --> 00:02:37.670
So I will just simply get rid of the semicolon in here.

00:02:37.670 --> 00:02:41.314
And I would put the curly brace and provide

00:02:41.314 --> 00:02:46.145
some instructions to do something with the fingerprint sensor technology.

00:02:46.145 --> 00:02:52.325
Let assume so. Now all the people who are implementing my interface,

00:02:52.325 --> 00:02:56.960
they don't have to provide implementation for this method.

00:02:56.960 --> 00:03:00.650
Because I have already given the default behavior.

00:03:00.650 --> 00:03:02.690
I'm using the technology.

00:03:02.690 --> 00:03:08.180
But in case if these guys decide to provide implementation,

00:03:08.180 --> 00:03:09.800
make an always override.

00:03:09.800 --> 00:03:15.635
And the behavior of this method to when we create an object of one of these classes,

00:03:15.635 --> 00:03:18.320
let's call this class C1.

00:03:18.320 --> 00:03:24.155
And when we create an object of its C1 objects equals new C1 whatnot.

00:03:24.155 --> 00:03:34.115
So object dot sends fingerprint is going to call the matter which is overridden.

00:03:34.115 --> 00:03:37.445
And guess if you don't provide an implementation,

00:03:37.445 --> 00:03:42.725
this is going to result in calling the default implementation.

00:03:42.725 --> 00:03:45.710
So that way there is backward compatibility.

00:03:45.710 --> 00:03:48.050
You can introduce new methods at the same time.

00:03:48.050 --> 00:03:53.735
You don't have to worry about people who already implemented your interface.

00:03:53.735 --> 00:03:56.615
But this has introduced a new problem.

00:03:56.615 --> 00:03:57.710
Actually.

00:03:57.710 --> 00:04:02.405
It has brought back the old problem we had with multiple inheritance.

00:04:02.405 --> 00:04:06.215
Remember the diamond problem with the multiple inheritance?

00:04:06.215 --> 00:04:09.290
We have eliminated that problem using interfaces,

00:04:09.290 --> 00:04:14.465
but now we introduce that problem back again by introducing default methods.

00:04:14.465 --> 00:04:17.330
Let's say we have Interface a and B,

00:04:17.330 --> 00:04:22.955
and we have C, which is implementing a and b.

00:04:22.955 --> 00:04:31.170
Now let's assume that both a and B interfaces is having a method, say XYZ.

00:04:34.000 --> 00:04:39.215
And both these interfaces are providing default behavior in here.

00:04:39.215 --> 00:04:42.020
Now when we have an object of C,

00:04:42.020 --> 00:04:45.170
And if we do object dot XYZ,

00:04:45.170 --> 00:04:48.740
which method is it going to call conclusion, right?

00:04:48.740 --> 00:04:53.270
So Java eight has provided some solution for this as well.

00:04:53.270 --> 00:04:56.465
Let's go to our workbench and try to understand.

00:04:56.465 --> 00:05:02.105
First, let's quickly take a look at an example of default method.

00:05:02.105 --> 00:05:05.540
In here, we already implemented this,

00:05:05.540 --> 00:05:09.485
these two interfaces, land animals and water animals.

00:05:09.485 --> 00:05:13.220
What I'm going to do is I'm going to introduce a new method in here.

00:05:13.220 --> 00:05:17.765
So maybe make noise,

00:05:17.765 --> 00:05:19.890
something of that sort.

00:05:20.860 --> 00:05:22.160
No.

00:05:22.160 --> 00:05:24.905
Did you see the problem that I was talking about?

00:05:24.905 --> 00:05:30.485
We are now forced to make changes to provide implementation for this method.

00:05:30.485 --> 00:05:32.540
But with Java eight,

00:05:32.540 --> 00:05:35.750
you can just convert that semicolon into

00:05:35.750 --> 00:05:40.160
curly braces and do whatever you want to do here.

00:05:40.160 --> 00:05:45.125
There is a shortcut to quickly type System.out.print Dylan.

00:05:45.125 --> 00:05:51.540
It's just type in CSR and then control space.

00:05:52.810 --> 00:05:56.630
As just says out.

00:05:56.630 --> 00:05:59.730
And then control space.

00:06:00.760 --> 00:06:04.410
And it's to control space.

00:06:04.990 --> 00:06:09.080
It should work. Maybe it's because of this error.

00:06:09.080 --> 00:06:10.760
It is not working.

00:06:10.760 --> 00:06:12.840
Let's get it off this.

00:06:12.850 --> 00:06:21.574
And as we know where to mark this as default method by using the keyword default.

00:06:21.574 --> 00:06:27.995
Now this should work this out and then control space. It's a shortcut.

00:06:27.995 --> 00:06:30.065
Keep a note of it.

00:06:30.065 --> 00:06:35.855
And making noise, something of that sort.

00:06:35.855 --> 00:06:40.575
And we'll get rid of the capital letter in here.

00:06:40.575 --> 00:06:46.360
Alright, now we no longer are forced to provide implementation.

00:06:46.360 --> 00:06:49.480
And then here I get rid of this.

00:06:49.480 --> 00:06:59.210
I do object dot read and I'm going to say make noise.

00:06:59.610 --> 00:07:03.080
And run the program.

00:07:03.810 --> 00:07:09.055
There you have it. Now let's try to override that method.

00:07:09.055 --> 00:07:15.260
So all I'm going to do is copy this and paste this in here.

00:07:16.110 --> 00:07:21.100
You can always use the sanitation or

00:07:21.100 --> 00:07:29.340
ride and make sure you meet this public.

00:07:31.690 --> 00:07:34.520
Let's run the program.

00:07:34.520 --> 00:07:36.980
By the way, let's make some changes in here.

00:07:36.980 --> 00:07:43.610
Make noise from something like that.

00:07:43.610 --> 00:07:45.335
Let's run the program.

00:07:45.335 --> 00:07:46.730
There you have it.

00:07:46.730 --> 00:07:49.170
The method is overridden.

00:07:49.240 --> 00:07:52.610
Now let's talk about the diamond problem

00:07:52.610 --> 00:07:55.220
or the problem we had with the multiple inheritance.

00:07:55.220 --> 00:07:57.810
Let's get rid of this.

00:07:59.860 --> 00:08:05.550
Let's introduce the same method here as well.

00:08:09.000 --> 00:08:18.560
And we're going to get rid of this key word to mean this default.

00:08:18.600 --> 00:08:23.335
Make noise from water.

00:08:23.335 --> 00:08:25.540
Let's have the file.

00:08:25.540 --> 00:08:30.590
Okay, see now we have an error here.

00:08:30.600 --> 00:08:32.965
What does that say?

00:08:32.965 --> 00:08:38.410
Duplicate default methods named make noise with the parameters blablabla.

00:08:38.410 --> 00:08:43.300
So as this basically suggesting that there is a conflict.

00:08:43.300 --> 00:08:49.120
So the way we deal with the conflict is by overriding.

00:08:49.120 --> 00:08:51.830
We'll all right.

00:08:51.840 --> 00:08:57.895
And in here, instead of giving your own instructions,

00:08:57.895 --> 00:09:02.005
it will tell Java which default method to call.

00:09:02.005 --> 00:09:06.055
And the syntax for the a is you're going to use the name of the interface.

00:09:06.055 --> 00:09:07.660
For example, I'm going to be using

00:09:07.660 --> 00:09:18.340
this name dot super dot make noise.

00:09:18.340 --> 00:09:21.280
Now if you run this method,

00:09:21.280 --> 00:09:26.210
it's going to call the make noise method inside the land animals.

00:09:27.330 --> 00:09:29.410
Right?

00:09:29.410 --> 00:09:39.635
And let say you gave the water animals interface in here.

00:09:39.635 --> 00:09:45.470
Then it's going to call the water animal default method.

00:09:45.470 --> 00:09:48.815
So that's how we deal with the conflict.

00:09:48.815 --> 00:09:51.650
That's it on the default methods.

00:09:51.650 --> 00:09:55.835
But again, the real reason off introducing

00:09:55.835 --> 00:10:01.955
default method can be understood in better fashion when we talk about collections.

00:10:01.955 --> 00:10:04.980
See you in my next video.
