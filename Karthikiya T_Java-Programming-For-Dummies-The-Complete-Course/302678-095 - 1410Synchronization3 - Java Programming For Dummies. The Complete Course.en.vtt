WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.910
All right,

00:00:00.910 --> 00:00:01.800
let's continue.

00:00:01.800 --> 00:00:06.180
We were talking about multiple threats accessing a system resource.

00:00:06.180 --> 00:00:07.100
Have filed,

00:00:07.100 --> 00:00:07.970
for example,

00:00:07.970 --> 00:00:15.250
in this example of how created a couple of more methods and in the mattered right to file

00:00:15.250 --> 00:00:19.960
on passing string as an argument and with the file writer stream,

00:00:19.960 --> 00:00:25.820
I'm going to write each one off this character on which one off the line in tow,

00:00:25.820 --> 00:00:28.150
this file temp dot txt.

00:00:28.150 --> 00:00:31.150
And for every character I write to the pile,

00:00:31.150 --> 00:00:37.810
I'm making sure I'm rushing the data because that's what is going to put the data from the

00:00:37.810 --> 00:00:39.590
buffer to the file.

00:00:39.590 --> 00:00:42.130
And then I'm baiting for one second.

00:00:42.130 --> 00:00:44.860
So for each character,

00:00:44.860 --> 00:00:46.550
I'm going to wait for a second.

00:00:46.550 --> 00:00:47.900
In another matter,

00:00:47.900 --> 00:00:49.850
I'm doing read from file.

00:00:49.850 --> 00:00:53.560
So in here I'm reading the data from the same pile.

00:00:53.560 --> 00:00:54.810
But before doing so,

00:00:54.810 --> 00:01:00.050
I'm waiting for a couple of seconds just to make sure that something is written in here.

00:01:00.050 --> 00:01:03.170
So to demonstrate the inconsistency,

00:01:03.170 --> 00:01:05.060
I'm just expressively waiting,

00:01:05.060 --> 00:01:06.250
uh,

00:01:06.250 --> 00:01:09.630
a second and in here for a couple of seconds,

00:01:09.630 --> 00:01:12.550
and from our main method,

00:01:12.550 --> 00:01:17.450
I'm going to commend out these two method calls.

00:01:17.450 --> 00:01:18.630
Instead,

00:01:18.630 --> 00:01:20.900
I'm going to write something into the file.

00:01:20.900 --> 00:01:24.690
So instead of display,

00:01:24.690 --> 00:01:31.180
I'm going to say right to file and ambassador in some string.

00:01:31.180 --> 00:01:32.400
The Methodist,

00:01:32.400 --> 00:01:33.460
during an exception,

00:01:33.460 --> 00:01:36.550
went to handle it with the try catch block.

00:01:36.550 --> 00:01:47.760
And in here I want to call object dot read from a file method again with the handle the

00:01:47.760 --> 00:01:48.450
exception.

00:01:48.450 --> 00:01:51.870
Now let's run these two threats simultaneously.

00:01:51.870 --> 00:01:57.450
What I'm expecting is when the thread one writes a couple off characters,

00:01:57.450 --> 00:02:04.730
the threat to wakes up from the sleep mode after sleeping for a couple of seconds,

00:02:04.730 --> 00:02:08.010
and then it tries to read whatever is there in the pile.

00:02:08.010 --> 00:02:13.750
And this would happen only if the thread scheduler schedules to run the tread one first.

00:02:13.750 --> 00:02:17.150
If it decides to run threat to,

00:02:17.150 --> 00:02:22.350
then we get nothing on the output because there's nothing in the file by them.

00:02:22.350 --> 00:02:25.740
What's on the program.

00:02:25.740 --> 00:02:37.260
So threat to finished executing and it printed the 1st 2 characters because that's what is

00:02:37.260 --> 00:02:38.450
currently written to the file.

00:02:38.450 --> 00:02:40.540
Let's run the program again.

00:02:40.540 --> 00:02:42.210
So threat finished executing,

00:02:42.210 --> 00:02:43.700
but still the program is running.

00:02:43.700 --> 00:02:47.700
That's because thread one had to write all those characters.

00:02:47.700 --> 00:02:53.340
But the point I want to make here is when the data is being written.

00:02:53.340 --> 00:02:56.800
We're trying to read the same data from the file,

00:02:56.800 --> 00:02:59.150
so this is very inconsistent,

00:02:59.150 --> 00:03:05.320
although we're consistently seeing the result because we have an explicit wait time here,

00:03:05.320 --> 00:03:06.950
but in real time,

00:03:06.950 --> 00:03:10.350
you might experience were inconsistent behavior.

00:03:10.350 --> 00:03:13.340
So how do we deal with this?

00:03:13.340 --> 00:03:15.050
The solution is same.

00:03:15.050 --> 00:03:20.420
We're going to use a synchronized keyword for these methods.

00:03:20.420 --> 00:03:23.740
Public Synchronised ward,

00:03:23.740 --> 00:03:25.750
Synchronised white.

00:03:25.750 --> 00:03:26.500
Now,

00:03:26.500 --> 00:03:27.510
in this case,

00:03:27.510 --> 00:03:28.900
you can think off this,

00:03:28.900 --> 00:03:37.000
ask having to private changing rooms and if one tried enters into anyone off these rooms

00:03:37.000 --> 00:03:38.780
are from court perspective.

00:03:38.780 --> 00:03:42.620
When one threat interest into anyone off these code sections,

00:03:42.620 --> 00:03:44.350
it will acquire the lock.

00:03:44.350 --> 00:03:46.870
Once the lock is acquired by the thread,

00:03:46.870 --> 00:03:51.520
no other threat can enter into anyone off the synchronized blocks.

00:03:51.520 --> 00:03:53.150
So in our example,

00:03:53.150 --> 00:03:55.550
when we call this method right to files,

00:03:55.550 --> 00:03:57.950
Stephen is going to enter inside this,

00:03:57.950 --> 00:04:00.300
and it was quite the lock.

00:04:00.300 --> 00:04:01.600
Meanwhile,

00:04:01.600 --> 00:04:07.680
threat to will be in waiting state because lock is not available for it to enter inside the

00:04:07.680 --> 00:04:11.400
reed from file Method one strayed.

00:04:11.400 --> 00:04:13.160
One finishes executing this.

00:04:13.160 --> 00:04:19.260
Then it will release the lock which allows that red to get out of the waiting state.

00:04:19.260 --> 00:04:27.060
And then it comes into rentable state and thereby it qualifies for entering inside this

00:04:27.060 --> 00:04:27.590
section.

00:04:27.590 --> 00:04:30.530
Let's see if that's the case,

00:04:30.530 --> 00:04:32.490
and this would happen only if you have.

00:04:32.490 --> 00:04:37.500
If the thread scheduler schedules t one first,

00:04:37.500 --> 00:04:38.890
let's run the program.

00:04:38.890 --> 00:04:44.740
So T one started first,

00:04:44.740 --> 00:04:45.450
and it is.

00:04:45.450 --> 00:04:47.850
It is writing all the data into the file.

00:04:47.850 --> 00:04:51.150
And then teacher started better for a couple of seconds,

00:04:51.150 --> 00:04:52.780
and it read everything in that file.

00:04:52.780 --> 00:04:56.520
Now result is something meaningful.

00:04:56.520 --> 00:04:58.210
We're seeing the entire world.

00:04:58.210 --> 00:05:00.050
Whatever we're passing in here,

00:05:00.050 --> 00:05:03.020
let me quickly show you another example.

00:05:03.020 --> 00:05:05.700
Let's open this file.

00:05:05.700 --> 00:05:08.090
I already have some gold written.

00:05:08.090 --> 00:05:15.690
I'm having account in here in more matter and just increment ing the count to say several

00:05:15.690 --> 00:05:16.310
times.

00:05:16.310 --> 00:05:18.040
Meanwhile,

00:05:18.040 --> 00:05:18.840
from another thread,

00:05:18.840 --> 00:05:24.650
I'm going to call this matter who it count to get the current while you have the count,

00:05:24.650 --> 00:05:27.450
let's see what the behavior would be.

00:05:27.450 --> 00:05:32.410
So we're going to create an object off this class.

00:05:32.410 --> 00:05:36.840
I would instead she it sing.

00:05:36.840 --> 00:05:37.340
Example.

00:05:37.340 --> 00:05:37.840
Two.

00:05:37.840 --> 00:05:44.550
Let's call it object to coast new think example to as simple as that.

00:05:44.550 --> 00:05:56.210
Let me commend this entire court out by pressing control shipped slash and then goes to the

00:05:56.210 --> 00:05:57.090
same in here.

00:05:57.090 --> 00:06:00.020
I'm committing this girl just for your reference.

00:06:00.020 --> 00:06:02.450
You may want done comment it and play with it.

00:06:02.450 --> 00:06:13.360
So let's use this object to call the method increment count and from threat to I'm going to

00:06:13.360 --> 00:06:14.350
read the count.

00:06:14.350 --> 00:06:17.210
Let's run the program now.

00:06:17.210 --> 00:06:18.660
Every time you run the program,

00:06:18.660 --> 00:06:21.350
you're gonna see inconsistent behavior.

00:06:21.350 --> 00:06:25.740
So when threat to read the value of the count,

00:06:25.740 --> 00:06:35.650
the Values 1023 this time it's 3 28,088 The number is very unpredictable,

00:06:35.650 --> 00:06:37.590
very unpredictable.

00:06:37.590 --> 00:06:39.520
So how do we deal with this?

00:06:39.520 --> 00:06:40.560
What's the solution?

00:06:40.560 --> 00:06:42.330
As you can guess,

00:06:42.330 --> 00:06:52.450
we use the word synchronized for each one of these methods by the Internalised synchronized

00:06:52.450 --> 00:06:52.700
key.

00:06:52.700 --> 00:06:56.780
War is going to do the job off locking and unlocking,

00:06:56.780 --> 00:07:03.470
just as the example we have seen earlier is just the conveniently off dealing with locks.

00:07:03.470 --> 00:07:13.650
Now let's run the program say we see a proper result every time credible and good.

00:07:13.650 --> 00:07:15.320
I think this explains,

00:07:15.320 --> 00:07:21.510
is what is a side effect off using multi threading and how we can get it off it.

00:07:21.510 --> 00:07:23.150
See you in my next video

