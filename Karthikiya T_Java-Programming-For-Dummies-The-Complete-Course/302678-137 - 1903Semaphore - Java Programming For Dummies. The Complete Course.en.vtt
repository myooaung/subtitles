WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.360
in this video,

00:00:01.360 --> 00:00:03.950
we're gonna talk about Seema pores.

00:00:03.950 --> 00:00:06.380
We know what a synchronous section is.

00:00:06.380 --> 00:00:08.340
The synchronized mechanism.

00:00:08.340 --> 00:00:08.760
Bilge.

00:00:08.760 --> 00:00:11.940
You mutual exclusive access to only one thread at a time.

00:00:11.940 --> 00:00:13.910
If you run this program,

00:00:13.910 --> 00:00:17.600
since all these threats are trying to access the same section off court,

00:00:17.600 --> 00:00:19.080
the synchronized section,

00:00:19.080 --> 00:00:24.450
you would see this stretch being executed one the one with the timing control off by

00:00:24.450 --> 00:00:25.160
seconds.

00:00:25.160 --> 00:00:28.900
I'm not going to run this program to save your time.

00:00:28.900 --> 00:00:29.860
If you're interested,

00:00:29.860 --> 00:00:30.450
you can run it.

00:00:30.450 --> 00:00:37.270
But at times you might want to you access to the section off.

00:00:37.270 --> 00:00:40.090
Gord do not just one thread,

00:00:40.090 --> 00:00:41.990
but a limited off threats.

00:00:41.990 --> 00:00:43.430
For example,

00:00:43.430 --> 00:00:47.930
you wanted to let to threats at a time to enter inside the section off court.

00:00:47.930 --> 00:00:50.750
Then the answer is Seema,

00:00:50.750 --> 00:00:56.430
for that's when you're going to use Simmer for the first thing that you need to do is to

00:00:56.430 --> 00:00:59.690
create the same a poor using the class.

00:00:59.690 --> 00:01:00.600
Singapore.

00:01:00.600 --> 00:01:03.350
I'm going to say static.

00:01:03.350 --> 00:01:08.050
See my poor I call it Seema.

00:01:08.050 --> 00:01:13.870
Poor or lower case new simmer,

00:01:13.870 --> 00:01:19.350
for there's going to create an object off simmer for now,

00:01:19.350 --> 00:01:24.990
The reason why we have a never here is the constructor off semaphore is going to accept an

00:01:24.990 --> 00:01:25.810
argument,

00:01:25.810 --> 00:01:27.650
and that makes sense.

00:01:27.650 --> 00:01:33.000
This argument is nothing but a numerical or the limit off.

00:01:33.000 --> 00:01:38.840
This seem a poor you say to that means the semaphore would constitute two locks that to

00:01:38.840 --> 00:01:39.270
threats,

00:01:39.270 --> 00:01:40.930
can acquire and release.

00:01:40.930 --> 00:01:45.570
Let's take a look at the example and then you'll understand.

00:01:45.570 --> 00:01:48.040
So instead off saying Synchronized,

00:01:48.040 --> 00:01:52.060
I'm going to say semaphore dot at choir.

00:01:52.060 --> 00:01:58.310
The first red that's going to enter inside the section is going to acquire one of these two

00:01:58.310 --> 00:01:58.970
locks,

00:01:58.970 --> 00:02:05.250
and I'm going to say Simmer for dot release.

00:02:05.250 --> 00:02:11.720
It's going to release the lock when the first threat is still executing this section off

00:02:11.720 --> 00:02:12.350
court.

00:02:12.350 --> 00:02:14.380
The second thread,

00:02:14.380 --> 00:02:18.490
the renters inside the section is going to acquire the second lock,

00:02:18.490 --> 00:02:20.260
which is available ones.

00:02:20.260 --> 00:02:21.870
The second requires the lock.

00:02:21.870 --> 00:02:23.750
There are no locks to be acquired,

00:02:23.750 --> 00:02:30.290
which means the rest of the threats will have to wait until one of the locks gets released

00:02:30.290 --> 00:02:30.290
.

00:02:30.290 --> 00:02:32.520
So if you're on the program,

00:02:32.520 --> 00:02:36.290
you would see to threats executing at a time.

00:02:36.290 --> 00:02:43.650
Let's on the program t one t two and then the boat will wait for five seconds like you can

00:02:43.650 --> 00:02:51.750
see it in here and then t three and t four entered defying do six great

