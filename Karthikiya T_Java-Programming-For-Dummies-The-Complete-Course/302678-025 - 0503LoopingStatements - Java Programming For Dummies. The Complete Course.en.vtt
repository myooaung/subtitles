WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.490
all right,

00:00:01.490 --> 00:00:02.210
in this reader,

00:00:02.210 --> 00:00:04.450
we're gonna talk about Why loop?

00:00:04.450 --> 00:00:05.580
First of all,

00:00:05.580 --> 00:00:08.680
open this file named while loop examples or Java,

00:00:08.680 --> 00:00:11.770
and in that you will see this syntax.

00:00:11.770 --> 00:00:15.890
You must probably be seeing the code written already.

00:00:15.890 --> 00:00:16.890
Um,

00:00:16.890 --> 00:00:21.460
what I would suggest is you get rid off the court and try to write from scratch along with

00:00:21.460 --> 00:00:21.780
me.

00:00:21.780 --> 00:00:23.780
Now,

00:00:23.780 --> 00:00:25.400
this is the syntax were used for.

00:00:25.400 --> 00:00:25.950
Why loop?

00:00:25.950 --> 00:00:32.180
We had already talked about why loop in the beginning off this chapter when I explained it

00:00:32.180 --> 00:00:33.090
on the white board.

00:00:33.090 --> 00:00:34.130
Now,

00:00:34.130 --> 00:00:40.930
this is the syntax we use the word while and then the expression this expression should

00:00:40.930 --> 00:00:42.580
result in a bullion value.

00:00:42.580 --> 00:00:46.220
If this expression results in faults,

00:00:46.220 --> 00:00:48.550
then we're gonna come out of this loop.

00:00:48.550 --> 00:00:50.990
If this expression is true,

00:00:50.990 --> 00:00:57.020
then we're gonna get inside this block and execute the set off statements we keep on

00:00:57.020 --> 00:01:03.250
entering this block and execute whatever the statements are inside this till the condition

00:01:03.250 --> 00:01:06.480
is not met or till the condition becomes false.

00:01:06.480 --> 00:01:07.930
Now,

00:01:07.930 --> 00:01:09.900
let's take a look at one good example.

00:01:09.900 --> 00:01:10.670
Off I Look,

00:01:10.670 --> 00:01:15.170
I'm going to consider the same example we've talked about in the beginning off the chapter

00:01:15.170 --> 00:01:16.650
the robot example.

00:01:16.650 --> 00:01:25.060
What we're going to do here is the robot will try to attempt to start the car with Max in

00:01:25.060 --> 00:01:26.150
terms off 10.

00:01:26.150 --> 00:01:28.890
If it succeeds before 10 attempt,

00:01:28.890 --> 00:01:31.050
then we're gonna get out of this loop.

00:01:31.050 --> 00:01:34.990
Let's see how it goes again.

00:01:34.990 --> 00:01:40.160
We're gonna be needing the user to give some input at me.

00:01:40.160 --> 00:01:41.450
Best that code here,

00:01:41.450 --> 00:01:45.150
let me fix the error.

00:01:45.150 --> 00:01:53.880
In addition to these tree lines off court,

00:01:53.880 --> 00:02:01.280
we also have couple off variables defined the max atoms is the maximum number off attempts

00:02:01.280 --> 00:02:03.050
that the robot will try to start the car,

00:02:03.050 --> 00:02:04.690
after which it will.

00:02:04.690 --> 00:02:09.470
It will simply give up and count is something that we're gonna using your logic.

00:02:09.470 --> 00:02:14.240
This is basically to keep track on the number of attempts happened.

00:02:14.240 --> 00:02:18.940
The attempt is something that the the user will give,

00:02:18.940 --> 00:02:23.580
which actually tells the logic in how many attempts with the car istan.

00:02:23.580 --> 00:02:25.990
In order to save your time,

00:02:25.990 --> 00:02:27.700
let me copy paste the court.

00:02:27.700 --> 00:02:33.550
Let's do all shift f so that the court will have proper indentation.

00:02:33.550 --> 00:02:35.030
So first of all,

00:02:35.030 --> 00:02:37.820
let's talk about these two blocks in here.

00:02:37.820 --> 00:02:42.870
We haven't if condition and it will check to see if count is equals to attempt.

00:02:42.870 --> 00:02:44.750
If this condition is met,

00:02:44.750 --> 00:02:47.770
that means the car is going to start.

00:02:47.770 --> 00:02:53.970
So we're gonna send them a set saying Robert successfully started the car and count attempt

00:02:53.970 --> 00:02:54.990
number off attempts.

00:02:54.990 --> 00:03:00.260
We is the keyword break to break out of this while loop where all they talked about the

00:03:00.260 --> 00:03:02.450
keyword break earlier in this chapter.

00:03:02.450 --> 00:03:05.080
Now we have another condition.

00:03:05.080 --> 00:03:07.580
It will check to see if Count is a quotes.

00:03:07.580 --> 00:03:07.930
Max.

00:03:07.930 --> 00:03:12.940
It meant that means Robert tried maximum allowable number of times.

00:03:12.940 --> 00:03:18.660
And then it needed to give up that we're gonna bring the message.

00:03:18.660 --> 00:03:25.120
Robot has failed to start the car and automatically we're gonna come out of this loop.

00:03:25.120 --> 00:03:30.320
We don't have to use the board break here because this condition will any of us will become

00:03:30.320 --> 00:03:30.810
false.

00:03:30.810 --> 00:03:34.760
And we're gonna get out of the slough now.

00:03:34.760 --> 00:03:37.690
This is the post increment operator.

00:03:37.690 --> 00:03:40.960
Every time we enter inside this block while loop,

00:03:40.960 --> 00:03:46.240
we're gonna keep incriminating this count just to keep track on number off attempts being

00:03:46.240 --> 00:03:46.750
happening.

00:03:46.750 --> 00:03:49.070
And that's it.

00:03:49.070 --> 00:03:49.850
Um,

00:03:49.850 --> 00:03:51.130
let's ah,

00:03:51.130 --> 00:04:00.170
try toe run the program in.

00:04:00.170 --> 00:04:02.390
How many attempts will the car start?

00:04:02.390 --> 00:04:04.950
Let's say 13 No,

00:04:04.950 --> 00:04:08.890
the 13 is greater than the maximum attempts.

00:04:08.890 --> 00:04:10.840
So ideally,

00:04:10.840 --> 00:04:14.390
the robot should give up trying intended EMS.

00:04:14.390 --> 00:04:18.990
Let's see the output that's press region or hit.

00:04:18.990 --> 00:04:19.410
Enter.

00:04:19.410 --> 00:04:23.050
And if you see,

00:04:23.050 --> 00:04:24.790
let's expand this.

00:04:24.790 --> 00:04:29.700
But the book looking it robot indeed tried 10 times.

00:04:29.700 --> 00:04:31.720
Robot is attempting to start the car,

00:04:31.720 --> 00:04:35.800
and we see that message 10 times finally were displayed.

00:04:35.800 --> 00:04:39.450
The message that says Robert has failed to start the car.

00:04:39.450 --> 00:04:43.260
That's because we gave 13 here because car,

00:04:43.260 --> 00:04:46.330
because the car is going to start in 13 attempts,

00:04:46.330 --> 00:04:48.570
which is greater than the maximums,

00:04:48.570 --> 00:04:50.700
lets you another try.

00:04:50.700 --> 00:04:53.650
This time,

00:04:53.650 --> 00:04:55.550
I'm going to give you three.

00:04:55.550 --> 00:05:00.000
I'm going to tell the logic that the car will start in three attempts.

00:05:00.000 --> 00:05:00.590
That's it.

00:05:00.590 --> 00:05:01.050
Enter.

00:05:01.050 --> 00:05:04.160
So the robot tried three times,

00:05:04.160 --> 00:05:07.980
and after the third attempt it has succeeded.

00:05:07.980 --> 00:05:12.420
Robot successfully started the car in three attempts.

00:05:12.420 --> 00:05:13.240
Of course,

00:05:13.240 --> 00:05:15.390
this program doesn't make a lot of sense,

00:05:15.390 --> 00:05:17.550
but in really old programming,

00:05:17.550 --> 00:05:18.750
it's not human.

00:05:18.750 --> 00:05:19.990
Who's going to give this value?

00:05:19.990 --> 00:05:23.120
It will be dependent on the mission logics,

00:05:23.120 --> 00:05:27.280
which is pretty complicated way out of the scope of this chapter.

00:05:27.280 --> 00:05:31.650
This is the intention here is to explain the while loop,

00:05:31.650 --> 00:05:36.450
and I hope you understood what it is and what we're doing here.

00:05:36.450 --> 00:05:43.120
We have another construct called do while loop.

00:05:43.120 --> 00:05:44.550
Let's see what it is.

00:05:44.550 --> 00:05:52.980
The do while loop has the followings in tax.

00:05:52.980 --> 00:05:59.550
The only difference between while loop and do while loop is we execute the statements at

00:05:59.550 --> 00:06:02.280
least once before checking the condition.

00:06:02.280 --> 00:06:04.550
Now,

00:06:04.550 --> 00:06:05.560
in this chapter,

00:06:05.560 --> 00:06:07.690
maybe next radio,

00:06:07.690 --> 00:06:10.720
we're gonna talk about how it makes sense to use.

00:06:10.720 --> 00:06:11.910
Do do while open,

00:06:11.910 --> 00:06:13.030
stood up the while loop.

00:06:13.030 --> 00:06:14.080
But for now,

00:06:14.080 --> 00:06:17.480
let us try to understand what do while loop pays.

00:06:17.480 --> 00:06:23.510
I'm going to use the exact same piece off court in here and make little amendments.

00:06:23.510 --> 00:06:28.770
Let's copy this code and best it over here.

00:06:28.770 --> 00:06:42.190
The only difference here is went to take all this wild condition control X and pestered

00:06:42.190 --> 00:06:49.800
overhit and use the keyword called Duke and the statement.

00:06:49.800 --> 00:06:52.530
This is a statement and we tend this with a semicolon.

00:06:52.530 --> 00:06:54.160
All right,

00:06:54.160 --> 00:06:54.700
we're good.

00:06:54.700 --> 00:06:55.270
Now,

00:06:55.270 --> 00:06:58.360
this will do more or less the same thing.

00:06:58.360 --> 00:06:59.840
What we have seen in the while,

00:06:59.840 --> 00:07:00.740
loop example.

00:07:00.740 --> 00:07:04.610
But the difference is without checking the condition,

00:07:04.610 --> 00:07:09.380
we're gonna execute this block off statement at least ones.

00:07:09.380 --> 00:07:11.180
If you're on the program,

00:07:11.180 --> 00:07:13.820
you were pretty much can expect the same results.

00:07:13.820 --> 00:07:16.440
Astra that off this program again,

00:07:16.440 --> 00:07:21.320
we'll talk about the differences between the wild loop and Do I Loop will understand when

00:07:21.320 --> 00:07:25.020
to use do y lo pen when to use while loop etcetera.

00:07:25.020 --> 00:07:28.310
Now we have another looping construct.

00:07:28.310 --> 00:07:34.450
Let's see what it is it's called the for loop.

00:07:34.450 --> 00:07:39.200
The for loop does more or less the same job.

00:07:39.200 --> 00:07:39.500
What?

00:07:39.500 --> 00:07:39.710
Why?

00:07:39.710 --> 00:07:39.950
Look,

00:07:39.950 --> 00:07:46.770
does accept it will look more compact and improve the readability.

00:07:46.770 --> 00:07:49.270
And not just that.

00:07:49.270 --> 00:07:51.790
There are some additional advantages with full loop,

00:07:51.790 --> 00:07:57.100
and definitely sometimes it makes sense to use via Lupin strove follow up and vice versa.

00:07:57.100 --> 00:07:59.680
We're gonna talk about it in our next radio,

00:07:59.680 --> 00:08:06.520
but full of has the following syntax it has initialization in here will initialize a

00:08:06.520 --> 00:08:13.860
variable the termination or the expression that would result in a the true or false and

00:08:13.860 --> 00:08:15.750
then increment and equipment statement.

00:08:15.750 --> 00:08:19.220
Let me let me show you with an example.

00:08:19.220 --> 00:08:21.650
I'm going to use the same court,

00:08:21.650 --> 00:08:23.190
which I had used in the while.

00:08:23.190 --> 00:08:27.750
Loop Tory.

00:08:27.750 --> 00:08:37.120
I'm going to copy this and bested a pestered or here blessed art shift f to do proper

00:08:37.120 --> 00:08:37.930
indentation.

00:08:37.930 --> 00:08:52.350
First thing is to change this keyword while 24 and we're gonna get it off the cone variable

00:08:52.350 --> 00:08:55.550
from here and put it in here.

00:08:55.550 --> 00:08:59.110
That's scripted on this.

00:08:59.110 --> 00:09:13.350
And we'll also get it off this post increment off count Control X and best it over here

00:09:13.350 --> 00:09:16.450
separating.

00:09:16.450 --> 00:09:18.660
But that semi colon.

00:09:18.660 --> 00:09:22.920
So this is it.

00:09:22.920 --> 00:09:26.320
This is exactly how far look looks like.

00:09:26.320 --> 00:09:28.680
Now this will do exact same job.

00:09:28.680 --> 00:09:28.930
What?

00:09:28.930 --> 00:09:29.140
Why?

00:09:29.140 --> 00:09:29.460
Look,

00:09:29.460 --> 00:09:30.300
did.

00:09:30.300 --> 00:09:31.760
If you run the program,

00:09:31.760 --> 00:09:34.300
it would see the same results.

00:09:34.300 --> 00:09:35.270
Let's run the program.

00:09:35.270 --> 00:09:43.660
I would say three the same results.

00:09:43.660 --> 00:09:45.090
So far,

00:09:45.090 --> 00:09:48.750
Loop looks more compact and more readable.

00:09:48.750 --> 00:09:55.670
So now that we have learned three different looping constructs in our next radio,

00:09:55.670 --> 00:09:58.950
we're gonna see when to use which looping constructs.

