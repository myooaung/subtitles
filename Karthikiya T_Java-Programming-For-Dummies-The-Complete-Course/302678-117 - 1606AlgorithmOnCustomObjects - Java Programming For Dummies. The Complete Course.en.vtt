WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.370
all right.

00:00:01.370 --> 00:00:02.550
In the last radio,

00:00:02.550 --> 00:00:04.810
I left you with the question mark in your mind.

00:00:04.810 --> 00:00:08.860
So let me just bring Priety on that in this example,

00:00:08.860 --> 00:00:11.110
have created a class called Dog,

00:00:11.110 --> 00:00:13.080
and it has couple ferryboats,

00:00:13.080 --> 00:00:14.990
height and the name of the dog.

00:00:14.990 --> 00:00:21.080
I also have a constructor to set the initial state for the dog object and have also

00:00:21.080 --> 00:00:26.290
overridden the matter to string so that when you try to display these dog objects,

00:00:26.290 --> 00:00:28.580
you would see something readable,

00:00:28.580 --> 00:00:29.650
not the hash court.

00:00:29.650 --> 00:00:33.200
In our main class,

00:00:33.200 --> 00:00:41.550
I have created three objects off dog and I've added each one off those elements into list

00:00:41.550 --> 00:00:44.660
that can constitute the stop dogs.

00:00:44.660 --> 00:00:46.680
And in here,

00:00:46.680 --> 00:00:51.050
I'm trying to perform sort on this list.

00:00:51.050 --> 00:00:52.920
Obviously,

00:00:52.920 --> 00:00:58.050
as you would expect we have never because the sort of garden does not know.

00:00:58.050 --> 00:01:01.390
On what basis should my elements besotted,

00:01:01.390 --> 00:01:06.250
So startled Garden is kind off confused.

00:01:06.250 --> 00:01:09.170
So we need to do something to let the sort of guard,

00:01:09.170 --> 00:01:09.950
um no.

00:01:09.950 --> 00:01:13.800
The criteria under which my list should be sorted.

00:01:13.800 --> 00:01:18.250
Let me just simply print us list by committing this line first.

00:01:18.250 --> 00:01:22.390
And then there it is.

00:01:22.390 --> 00:01:24.350
It's on comment.

00:01:24.350 --> 00:01:32.410
Know what the sort algorithm expect us to do is which are the type of element that you add

00:01:32.410 --> 00:01:33.100
in the list.

00:01:33.100 --> 00:01:36.250
If you want that list to be sort herbal,

00:01:36.250 --> 00:01:40.750
then you need to implement an interface called Compatible.

00:01:40.750 --> 00:01:42.250
In this case,

00:01:42.250 --> 00:01:43.940
it's instances of dog.

00:01:43.940 --> 00:01:50.780
So let's say implements compatible.

00:01:50.780 --> 00:01:53.950
It's going to accept one gender perimeter.

00:01:53.950 --> 00:01:54.380
In this case,

00:01:54.380 --> 00:01:55.870
it's going to be off type dunk.

00:01:55.870 --> 00:01:57.760
Obviously,

00:01:57.760 --> 00:02:03.970
we need to implement all the unimplemented methods is just one single method,

00:02:03.970 --> 00:02:05.170
which is combat,

00:02:05.170 --> 00:02:05.650
too,

00:02:05.650 --> 00:02:11.060
and went to have some kind of logic in here that will help the sort of guard,

00:02:11.060 --> 00:02:11.380
um,

00:02:11.380 --> 00:02:13.220
to sort are elements.

00:02:13.220 --> 00:02:14.450
In this case,

00:02:14.450 --> 00:02:18.550
I want to sort all my dog elements based on their height.

00:02:18.550 --> 00:02:29.650
So the way I tell it is I'm going to say this dot height minus object dot height.

00:02:29.650 --> 00:02:31.380
Of course,

00:02:31.380 --> 00:02:32.590
we want to return this.

00:02:32.590 --> 00:02:36.590
Now guess what this will do.

00:02:36.590 --> 00:02:42.650
The magic are elements will be sorted based on the height in ascending order.

00:02:42.650 --> 00:02:44.600
No,

00:02:44.600 --> 00:02:45.150
I agree.

00:02:45.150 --> 00:02:48.900
The fact that this instruction is not making complete sense,

00:02:48.900 --> 00:02:51.450
But in order to understand this,

00:02:51.450 --> 00:02:57.470
we need to understand how the sort of garden books to make complete sense out of this

00:02:57.470 --> 00:02:58.150
instruction.

00:02:58.150 --> 00:02:59.390
But just remember,

00:02:59.390 --> 00:03:00.550
as a rule off stump,

00:03:00.550 --> 00:03:03.490
if you wanted to start best on end,

00:03:03.490 --> 00:03:05.470
which in this case is height,

00:03:05.470 --> 00:03:07.270
then you want to do it this way.

00:03:07.270 --> 00:03:12.250
This instruction will thought all the elements based on the height in ascending water.

00:03:12.250 --> 00:03:16.020
If you want the list to be sorted in descending order,

00:03:16.020 --> 00:03:19.070
you want to slap this to you.

00:03:19.070 --> 00:03:24.650
Want to do object dot high minus this don't hide.

00:03:24.650 --> 00:03:28.140
But I wanted to sort these elements in ascending order.

00:03:28.140 --> 00:03:32.270
So let's just undo that and say the pile.

00:03:32.270 --> 00:03:33.420
Guess what?

00:03:33.420 --> 00:03:34.950
That's all there is to it.

00:03:34.950 --> 00:03:39.700
That's from the program and listers sorted Best on the height.

00:03:39.700 --> 00:03:40.850
10 2030.

00:03:40.850 --> 00:03:42.580
Call it.

00:03:42.580 --> 00:03:43.250
Fair enough.

00:03:43.250 --> 00:03:44.250
No,

00:03:44.250 --> 00:03:46.560
let's say at little born of time in the cord.

00:03:46.560 --> 00:03:51.050
Somehow I want my list to be sorted best on the name.

00:03:51.050 --> 00:03:52.850
How do you deal with that?

00:03:52.850 --> 00:03:55.440
Since we have already awarded in the method,

00:03:55.440 --> 00:04:02.560
come back to we cannot have another combative method and private instruction to sort

00:04:02.560 --> 00:04:05.150
elements best on the dog name.

00:04:05.150 --> 00:04:12.680
So what we can do is we can create a class and implement and interface called Comparator

00:04:12.680 --> 00:04:17.690
instead of creating a new class and implementing Comparator.

00:04:17.690 --> 00:04:19.550
We can certainly make use off.

00:04:19.550 --> 00:04:20.870
Guess what,

00:04:20.870 --> 00:04:22.100
anonymous class.

00:04:22.100 --> 00:04:24.290
If you don't know what is anonymous class,

00:04:24.290 --> 00:04:28.000
I would recommend you to go back and take a look at my video on that.

00:04:28.000 --> 00:04:28.990
So in here,

00:04:28.990 --> 00:04:35.050
I'm going to create an anonymous class off compare rate or not comparable.

00:04:35.050 --> 00:04:37.640
This is going to be off time,

00:04:37.640 --> 00:04:38.440
dog.

00:04:38.440 --> 00:04:43.750
I'm going to name it us sort by name,

00:04:43.750 --> 00:04:46.930
a coast new comp aerator.

00:04:46.930 --> 00:04:48.050
And when I hit,

00:04:48.050 --> 00:04:51.750
enter her Eclipse idea is going to do the job for us.

00:04:51.750 --> 00:04:56.510
It's going to create an anonymous class by all writing.

00:04:56.510 --> 00:05:01.690
The only method which is present in this interface so in here will have our logic.

00:05:01.690 --> 00:05:05.490
So since the name is not an integer,

00:05:05.490 --> 00:05:09.120
we can't have a logic that is similar to this.

00:05:09.120 --> 00:05:11.210
What we need to have,

00:05:11.210 --> 00:05:11.670
though,

00:05:11.670 --> 00:05:19.140
is willing to make use off the compact to method the exact method combat to have the string

00:05:19.140 --> 00:05:19.700
class.

00:05:19.700 --> 00:05:23.120
Let's see how we can make yourself so.

00:05:23.120 --> 00:05:24.150
I'm going to say,

00:05:24.150 --> 00:05:32.080
01 don't name dot combat too,

00:05:32.080 --> 00:05:36.050
or to dart name.

00:05:36.050 --> 00:05:38.060
Now,

00:05:38.060 --> 00:05:44.080
this will sort all our elements in alphabetical order if you want to sort them in reverse

00:05:44.080 --> 00:05:44.510
order.

00:05:44.510 --> 00:05:50.510
Then you want to swap these two you want or two not name here.

00:05:50.510 --> 00:05:53.210
And no one dot name here.

00:05:53.210 --> 00:05:54.250
That's undue.

00:05:54.250 --> 00:06:00.340
Now all you have to do is you need to pass this as an argument there,

00:06:00.340 --> 00:06:01.050
sort method,

00:06:01.050 --> 00:06:04.850
like so and that's all there is to it.

00:06:04.850 --> 00:06:10.680
So with this instruction will actually sort all the elements based on their height first,

00:06:10.680 --> 00:06:17.150
and then it will sort all the elements best on the name in alphabetical order.

00:06:17.150 --> 00:06:18.540
So ultimately,

00:06:18.540 --> 00:06:22.750
we should see a list with elements ordered in alphabetical order.

00:06:22.750 --> 00:06:23.750
Let's from the program.

00:06:23.750 --> 00:06:25.970
There.

00:06:25.970 --> 00:06:31.130
You have it again.

00:06:31.130 --> 00:06:35.000
This instruction may not be making complete sense at this point of time,

00:06:35.000 --> 00:06:37.230
but just be aware of how to use that.

00:06:37.230 --> 00:06:39.050
That should suffice for now.

00:06:39.050 --> 00:06:40.510
All right,

00:06:40.510 --> 00:06:41.050
that's it.

