WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.710
in this video,

00:00:02.710 --> 00:00:07.280
we're gonna talk about Intel trade communication using a blocking que.

00:00:07.280 --> 00:00:08.890
In other words,

00:00:08.890 --> 00:00:14.660
we will understand how two or more trips are going to communicate each other using a

00:00:14.660 --> 00:00:17.360
blocking que Consider the following scenario.

00:00:17.360 --> 00:00:18.410
That's a regard.

00:00:18.410 --> 00:00:21.750
Couple of threats T one and T two.

00:00:21.750 --> 00:00:24.650
We want these two threats to communicate each other,

00:00:24.650 --> 00:00:29.810
and the way it works is 21 is going to generate a list off objects,

00:00:29.810 --> 00:00:34.950
and we want Threatt to to consume all those objects.

00:00:34.950 --> 00:00:38.600
The way it's going to work is is by using a.

00:00:38.600 --> 00:00:39.140
Q.

00:00:39.140 --> 00:00:40.940
We know what a Q is.

00:00:40.940 --> 00:00:43.350
The Q is going to have a certain size.

00:00:43.350 --> 00:00:50.810
21 is going to keep inserting elements into the Q and simultaneously.

00:00:50.810 --> 00:00:54.420
Tra T two is going to take those elements one by one.

00:00:54.420 --> 00:00:57.770
Let's call it a t one a producer,

00:00:57.770 --> 00:01:02.500
as it is producing a list of elements and t to a consumer.

00:01:02.500 --> 00:01:03.940
As obviously,

00:01:03.940 --> 00:01:07.330
it's going to consume those elements being produced by T.

00:01:07.330 --> 00:01:07.630
One.

00:01:07.630 --> 00:01:14.250
Now the problem with this approach is 21 can try to insert an element,

00:01:14.250 --> 00:01:22.590
even though the qs for similarly Threatt to can try to read an element when there are no

00:01:22.590 --> 00:01:24.820
elements left in the queue In both,

00:01:24.820 --> 00:01:28.950
this case is an exception can occur in programming world.

00:01:28.950 --> 00:01:32.250
This is called a producer consumer problem.

00:01:32.250 --> 00:01:42.050
The solution to this problem is instead off using a que use a blocking que And that was all

00:01:42.050 --> 00:01:45.600
the problem the way the blocking que mechanism works.

00:01:45.600 --> 00:01:51.540
ISS threat E one is going to keep on insulting the elements in the queue until the Q is for

00:01:51.540 --> 00:01:53.750
and once the crew is full,

00:01:53.750 --> 00:01:55.520
the blocking que McCann is,

00:01:55.520 --> 00:01:55.830
um,

00:01:55.830 --> 00:02:01.280
is going to block the threat t one to stop inserting the elements in the queue.

00:02:01.280 --> 00:02:02.650
Meanwhile,

00:02:02.650 --> 00:02:08.290
32 keeps on consuming those elements and at any given point of time,

00:02:08.290 --> 00:02:11.240
if there are no elements left in the queue to be read,

00:02:11.240 --> 00:02:14.780
then the blocking Q would block threat.

00:02:14.780 --> 00:02:15.230
Ito.

00:02:15.230 --> 00:02:20.580
So doing so regarded off The producer Consumer problem Mystic.

00:02:20.580 --> 00:02:23.350
Look at this example programmatically.

00:02:23.350 --> 00:02:25.460
In order to save your time,

00:02:25.460 --> 00:02:27.660
I've already returned the court for you.

00:02:27.660 --> 00:02:29.670
Let me walk you through this code.

00:02:29.670 --> 00:02:33.930
The first thing that we need to do is to create those two threats,

00:02:33.930 --> 00:02:35.710
one being the producer,

00:02:35.710 --> 00:02:37.350
the other being the consumer.

00:02:37.350 --> 00:02:40.590
Here we have the court for producing the element.

00:02:40.590 --> 00:02:42.830
But before that,

00:02:42.830 --> 00:02:46.850
I've also created Have blocking que like Sil.

00:02:46.850 --> 00:02:52.950
Not this instruction in here is going to create a blocking que off size one.

00:02:52.950 --> 00:02:55.890
Let's make it three.

00:02:55.890 --> 00:02:57.930
That makes more sense.

00:02:57.930 --> 00:03:00.250
So the producer,

00:03:00.250 --> 00:03:06.520
I was going to keep inserting elements by the this matter is called as part off the

00:03:06.520 --> 00:03:09.180
strength and in another thread,

00:03:09.180 --> 00:03:12.150
we're consuming those objects.

00:03:12.150 --> 00:03:16.290
So the way we're inserting in the queue is by using the matter put,

00:03:16.290 --> 00:03:22.550
we're just using a for loop to insert the ICT element,

00:03:22.550 --> 00:03:27.120
and we're gonna look through about 10 times.

00:03:27.120 --> 00:03:32.760
So we're gonna be inserting 10 elements into this Q heritable.

00:03:32.760 --> 00:03:33.830
We put an element.

00:03:33.830 --> 00:03:38.760
I'm also printing just for us to be able to see what's happening.

00:03:38.760 --> 00:03:39.560
Similarly,

00:03:39.560 --> 00:03:43.280
we got another threat which is going to consume those objects.

00:03:43.280 --> 00:03:47.340
And in here I'm trying to get the element by using the method,

00:03:47.340 --> 00:03:55.310
take off the blocking que and this instruction is going to take the element using the

00:03:55.310 --> 00:04:02.270
before approach and is going to return an integer because that's what the type off elements

00:04:02.270 --> 00:04:03.250
that were inserting.

00:04:03.250 --> 00:04:07.090
And every time I take the element,

00:04:07.090 --> 00:04:08.780
I'm also waiting for a second,

00:04:08.780 --> 00:04:11.610
and I'm printing what that item is.

00:04:11.610 --> 00:04:15.650
Let's run the program and see what happens.

00:04:15.650 --> 00:04:17.520
If we run this program,

00:04:17.520 --> 00:04:23.050
you would immediately see three elements being put because that's what the sizes in here.

00:04:23.050 --> 00:04:25.650
After inserting three elements,

00:04:25.650 --> 00:04:34.920
this thread in here is going to be blocked right here because we cannot insert anymore

00:04:34.920 --> 00:04:40.700
elements so the producer will be blocked by the blocking Huma Can is in.

00:04:40.700 --> 00:04:42.940
On the other hand,

00:04:42.940 --> 00:04:49.850
the consumer will keep consuming those elements every one second and as soon as there is

00:04:49.850 --> 00:04:54.190
one space available in the queue after consuming the blocking,

00:04:54.190 --> 00:05:00.020
Que mechanism is going to resume the producer threat and it will keep inserting.

00:05:00.020 --> 00:05:03.950
And again it will get blocked once the Q is full.

00:05:03.950 --> 00:05:06.030
Similarly,

00:05:06.030 --> 00:05:10.370
once we insert all the elements and once all the elements are consumed,

00:05:10.370 --> 00:05:16.670
the blocking que mechanism is going to block the consumer trend right here in this

00:05:16.670 --> 00:05:17.470
instruction,

00:05:17.470 --> 00:05:21.480
because there won't be any elements to be consumed.

00:05:21.480 --> 00:05:23.260
But in this case,

00:05:23.260 --> 00:05:28.090
we're exiting out of this loop once after we reach the item cone,

00:05:28.090 --> 00:05:33.370
which means we're never going to see the consumer tripped being blocked.

00:05:33.370 --> 00:05:37.150
But we will definitely see the producer threat being blocked.

00:05:37.150 --> 00:05:41.150
Let's run the program and see the output.

00:05:41.150 --> 00:05:47.770
Let it finish,

00:05:47.770 --> 00:05:49.220
and then we'll go through it.

00:05:49.220 --> 00:05:56.350
We have the Q size off three,

00:05:56.350 --> 00:06:00.610
and so three elements were inserted by the producer threat.

00:06:00.610 --> 00:06:01.870
Afterwards,

00:06:01.870 --> 00:06:04.050
the producer threat is blocked.

00:06:04.050 --> 00:06:09.330
And after the consumer threat reads one of the elements from the queue,

00:06:09.330 --> 00:06:15.770
they blocking key Mechanism again resumed the producer threat to put another element.

00:06:15.770 --> 00:06:16.280
In this case,

00:06:16.280 --> 00:06:16.890
it's three.

00:06:16.890 --> 00:06:21.450
Now you might be wondering why we have four elements showing up in here.

00:06:21.450 --> 00:06:29.000
That's because after the consumer takes the element and before we printed it on the screen

00:06:29.000 --> 00:06:29.000
,

00:06:29.000 --> 00:06:35.830
the producer threat was resumed and resulted in another element to be inserted into the

00:06:35.830 --> 00:06:36.200
kill.

00:06:36.200 --> 00:06:40.250
So don't get confused by looking at the output.

00:06:40.250 --> 00:06:48.660
So it has essentially blocked the producer threat after inserting the 1st 3 elements and

00:06:48.660 --> 00:06:52.640
then the consumer consumed in element again,

00:06:52.640 --> 00:06:55.850
one element ISS put by the producer,

00:06:55.850 --> 00:07:02.710
and it kept on going and going until all the elements were put and all the elements were

00:07:02.710 --> 00:07:03.770
consumed.

00:07:03.770 --> 00:07:05.530
Finally,

00:07:05.530 --> 00:07:08.150
we got this program terminated.

00:07:08.150 --> 00:07:13.910
Now let's see what's going to happen if you try to consume more elements than what they are

00:07:13.910 --> 00:07:14.550
in the queue,

00:07:14.550 --> 00:07:17.670
Let's say 100 in the scarce.

00:07:17.670 --> 00:07:21.770
We would definitely reached to a point where the Q is empty,

00:07:21.770 --> 00:07:24.860
but still we're trying to consume elements in the scales.

00:07:24.860 --> 00:07:29.860
The blocking que mechanism is going to block the consumer threat until some element gets

00:07:29.860 --> 00:07:30.400
inserted,

00:07:30.400 --> 00:07:31.790
which will never happen.

00:07:31.790 --> 00:07:32.950
So we're running.

00:07:32.950 --> 00:07:36.890
This program would result in running forever.

00:07:36.890 --> 00:07:50.060
It's from the program Derek Tous Peritus.

00:07:50.060 --> 00:07:52.100
All the elements are consumed,

00:07:52.100 --> 00:07:55.390
but the consumer threat is not terminated,

00:07:55.390 --> 00:07:59.870
and that's why you need to handle it wisely.

00:07:59.870 --> 00:08:00.750
Just like so.

00:08:00.750 --> 00:08:03.910
And by the way,

00:08:03.910 --> 00:08:11.370
the blocking Q is an inter press and one of the implementations off that interfaces Harry

00:08:11.370 --> 00:08:13.720
blocking que in the scares.

00:08:13.720 --> 00:08:14.290
Internally,

00:08:14.290 --> 00:08:17.710
the Q users essentially an array.

00:08:17.710 --> 00:08:19.070
Likewise,

00:08:19.070 --> 00:08:22.010
we have got many such mechanisms.

00:08:22.010 --> 00:08:26.340
We got the delay que linked,

00:08:26.340 --> 00:08:30.400
blocking que priority blocking que etcetera.

00:08:30.400 --> 00:08:36.010
The job off all these mechanisms is to provide the functionality of blocking que but the

00:08:36.010 --> 00:08:40.530
different terms off performance and the way the deal with threat communication.

00:08:40.530 --> 00:08:44.790
You can easily go through the documentation off this implementation,

00:08:44.790 --> 00:08:50.400
and I bet it all self explanatory all right to you in my next radio

