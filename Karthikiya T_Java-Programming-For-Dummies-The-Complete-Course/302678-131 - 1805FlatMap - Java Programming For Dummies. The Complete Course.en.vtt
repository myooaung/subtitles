WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.280
hold it in this video,

00:00:02.280 --> 00:00:04.750
we're gonna talk about flat map.

00:00:04.750 --> 00:00:10.080
Sometimes he might want to combine multiple streams into one stream,

00:00:10.080 --> 00:00:12.850
and that's when you would use flap map.

00:00:12.850 --> 00:00:19.340
The best way to explain it is with an example in this program have created four different

00:00:19.340 --> 00:00:20.650
individualists,

00:00:20.650 --> 00:00:23.550
and I've added them in here.

00:00:23.550 --> 00:00:28.350
So this statement in here is going to create a stream off elements,

00:00:28.350 --> 00:00:31.890
and each element in the scarce is individualist,

00:00:31.890 --> 00:00:39.710
and I'm using the map mattered to perform such an operation on each one of those elements

00:00:39.710 --> 00:00:42.960
and generate another stream in the scarce.

00:00:42.960 --> 00:00:47.760
I'm just trying to get stream from each and every individual element,

00:00:47.760 --> 00:00:50.700
and since each element is off type list,

00:00:50.700 --> 00:00:52.150
this will work.

00:00:52.150 --> 00:00:53.370
Ultimately,

00:00:53.370 --> 00:00:57.970
we get another stream that constitute list of elements,

00:00:57.970 --> 00:01:01.150
and each element is off type stream.

00:01:01.150 --> 00:01:04.380
So innocence until this point,

00:01:04.380 --> 00:01:07.480
we're actually getting a stream off streams.

00:01:07.480 --> 00:01:08.990
Hope it's not confusing,

00:01:08.990 --> 00:01:12.920
and I'm using the forage method to loop through,

00:01:12.920 --> 00:01:17.650
which never individual stream element and I'm doing since out.

00:01:17.650 --> 00:01:19.740
Let's see how the output looks.

00:01:19.740 --> 00:01:23.250
We're going to get list off objects which are off type stream.

00:01:23.250 --> 00:01:33.170
Now let's see how the result would look If I use flat map now,

00:01:33.170 --> 00:01:36.910
the Flattener is going to combine all the individual streams,

00:01:36.910 --> 00:01:39.900
and the result in stream would constitute.

00:01:39.900 --> 00:01:41.870
Let's stop elements,

00:01:41.870 --> 00:01:43.720
which are these indigent numbers.

00:01:43.720 --> 00:01:47.650
Let's try to run the program Nurit ease.

00:01:47.650 --> 00:01:55.420
So Worster difference between a map in the flat map map is going to apply this function on

00:01:55.420 --> 00:02:00.830
each and every individual element in the stream and generate another stream with updated

00:02:00.830 --> 00:02:01.650
elements.

00:02:01.650 --> 00:02:03.750
But whereas flat map,

00:02:03.750 --> 00:02:08.810
it not only applies this function on each and every individual element in the stream,

00:02:08.810 --> 00:02:14.180
but would also flatten them or combined them into a single stream.

00:02:14.180 --> 00:02:16.770
So whenever you have a stream off streams,

00:02:16.770 --> 00:02:18.750
you can use frat Matt.

00:02:18.750 --> 00:02:21.080
If this sounds confusing,

00:02:21.080 --> 00:02:23.610
let's take a look at another example.

00:02:23.610 --> 00:02:33.320
Let's commend this line out and let some coming this in here with this instruction.

00:02:33.320 --> 00:02:35.450
When I do file start lines,

00:02:35.450 --> 00:02:41.160
this would actually create a stream off strings in the scarce.

00:02:41.160 --> 00:02:45.850
Each string is each and every individual line in the specified file.

00:02:45.850 --> 00:02:49.550
Do take note off this in tax in here,

00:02:49.550 --> 00:02:54.950
and then I'm going to use the map method to perform such an operation on each and every

00:02:54.950 --> 00:02:55.650
element,

00:02:55.650 --> 00:02:57.910
which in this case is a string,

00:02:57.910 --> 00:03:02.480
and the thing that I'm doing here is on each and every line.

00:03:02.480 --> 00:03:06.750
I'm going to split using a white space character.

00:03:06.750 --> 00:03:13.090
This would give me a string Eri and I'm converting that area into a list using areas.

00:03:13.090 --> 00:03:20.390
DOT has list and I'm doing dot stream to generate a stream off that list.

00:03:20.390 --> 00:03:21.400
No.

00:03:21.400 --> 00:03:24.020
So far in this instruction,

00:03:24.020 --> 00:03:30.050
we're again creating a stream off streams and for each and every element with each element

00:03:30.050 --> 00:03:31.590
has stream itself.

00:03:31.590 --> 00:03:38.150
I'm doing since out Do take a note that I'm using a matter difference.

00:03:38.150 --> 00:03:41.180
This is equal into this.

00:03:41.180 --> 00:03:42.750
That's on the program.

00:03:42.750 --> 00:03:49.620
Now let's try using flat map so that would start off.

00:03:49.620 --> 00:03:52.980
Combine all the streams into a single stream.

00:03:52.980 --> 00:03:53.660
No,

00:03:53.660 --> 00:03:54.890
let's run the program.

00:03:54.890 --> 00:03:59.350
You would see each and every individual element,

00:03:59.350 --> 00:04:04.550
which would be now award would be listed like this.

00:04:04.550 --> 00:04:07.890
Now this is all is a single stream.

00:04:07.890 --> 00:04:10.800
If the still sounds confusing,

00:04:10.800 --> 00:04:13.210
then you can just simply ignore.

00:04:13.210 --> 00:04:16.900
We rarely come across with using a flat map honestly,

00:04:16.900 --> 00:04:19.550
so see you in my next radio

