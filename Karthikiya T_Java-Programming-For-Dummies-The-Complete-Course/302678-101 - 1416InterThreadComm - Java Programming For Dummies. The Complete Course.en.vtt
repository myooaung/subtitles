WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.210
in this video,

00:00:01.210 --> 00:00:03.890
we're gonna talk about indoctrinate communication.

00:00:03.890 --> 00:00:11.450
Don't let that term scare you because it's just about three methods which are in the object

00:00:11.450 --> 00:00:11.990
class.

00:00:11.990 --> 00:00:15.000
Those are wait,

00:00:15.000 --> 00:00:16.860
notify and notify all.

00:00:16.860 --> 00:00:19.870
And as we would normally do,

00:00:19.870 --> 00:00:24.140
let's take a look at the real world example before we jump into the code.

00:00:24.140 --> 00:00:30.150
So we have an Inter set the changing room and waits at,

00:00:30.150 --> 00:00:33.730
and everything is being monitored by the Monitor.

00:00:33.730 --> 00:00:34.350
Obviously,

00:00:34.350 --> 00:00:39.050
one person enters inside the changing room by acquiring the lock.

00:00:39.050 --> 00:00:47.010
And let's say the person who just entered has decided to sacrifice the room for some of the

00:00:47.010 --> 00:00:48.650
person in the Inter set.

00:00:48.650 --> 00:00:52.160
So it's going to handle that Locke back to the Monitor,

00:00:52.160 --> 00:00:57.880
and he is going to be going to the weight set and the next verse.

00:00:57.880 --> 00:00:58.700
No jumps in,

00:00:58.700 --> 00:00:59.800
Of course,

00:00:59.800 --> 00:01:04.110
by quitting the lock is going to finish the activity.

00:01:04.110 --> 00:01:06.230
But before finishing,

00:01:06.230 --> 00:01:12.900
it's the responsibility off this person who's using the changing room to notify the person

00:01:12.900 --> 00:01:15.890
in the weights that that he's done using once he does.

00:01:15.890 --> 00:01:17.730
So those guys,

00:01:17.730 --> 00:01:21.920
again going to handle the log back to the monitor and monitor,

00:01:21.920 --> 00:01:27.310
will call the person in the weight set again to continue with his activity in the changing

00:01:27.310 --> 00:01:30.360
room by handling the lock to him,

00:01:30.360 --> 00:01:31.230
Of course.

00:01:31.230 --> 00:01:34.550
So we've talked about two major things here.

00:01:34.550 --> 00:01:37.940
One is this person.

00:01:37.940 --> 00:01:40.520
When he was here in the changing room,

00:01:40.520 --> 00:01:41.700
Hey said,

00:01:41.700 --> 00:01:48.800
I want to wait in the waiting set and the next person who has just entered is going to

00:01:48.800 --> 00:01:53.290
notify this person once he's done with Dr Witting.

00:01:53.290 --> 00:01:56.800
Now keep this entire scenario in mind.

00:01:56.800 --> 00:01:59.150
Now let's move on with our cord.

00:01:59.150 --> 00:02:00.670
Example.

00:02:00.670 --> 00:02:03.800
So for the sake of this example,

00:02:03.800 --> 00:02:07.040
I have created a couple of files in this file.

00:02:07.040 --> 00:02:11.480
I just have one method that will take in one indigent variable and all.

00:02:11.480 --> 00:02:12.750
It's going to do it.

00:02:12.750 --> 00:02:16.210
It's going to find some off all the digits.

00:02:16.210 --> 00:02:16.750
I mean,

00:02:16.750 --> 00:02:18.550
if I send the value asked three.

00:02:18.550 --> 00:02:22.860
It's going to find the some off 3 to 1% the value.

00:02:22.860 --> 00:02:23.430
Five.

00:02:23.430 --> 00:02:28.400
It's going to find the some off 54321 like so and is going to return.

00:02:28.400 --> 00:02:32.650
The result have created an object off that plans.

00:02:32.650 --> 00:02:37.670
We have couple off threads T one and T two from t one.

00:02:37.670 --> 00:02:38.850
I'm trying to,

00:02:38.850 --> 00:02:40.350
uh,

00:02:40.350 --> 00:02:47.130
get the total and this variable is actually a static member off the class.

00:02:47.130 --> 00:02:47.730
Wait,

00:02:47.730 --> 00:02:56.920
notify example and from threat to We're using the same object that were created here to

00:02:56.920 --> 00:03:00.470
find the sum off in this case,

00:03:00.470 --> 00:03:05.150
the number 10 and we're sending that value to this very book.

00:03:05.150 --> 00:03:12.630
Now what we want to make sure is we want to make sure that t one starts first and Tito

00:03:12.630 --> 00:03:13.980
start second.

00:03:13.980 --> 00:03:17.250
And for that I have just have asleep.

00:03:17.250 --> 00:03:21.750
But that called so innovates Ah,

00:03:21.750 --> 00:03:25.650
it's almost guaranteed that anyone is going to be called first.

00:03:25.650 --> 00:03:26.630
Dante,

00:03:26.630 --> 00:03:27.010
too.

00:03:27.010 --> 00:03:28.350
In here,

00:03:28.350 --> 00:03:31.350
my task is to display the total.

00:03:31.350 --> 00:03:33.870
But since day one is starting first,

00:03:33.870 --> 00:03:37.350
the total would display has zero,

00:03:37.350 --> 00:03:40.450
which on the program There it is.

00:03:40.450 --> 00:03:47.370
But what I am expecting here is 55 because that's what the result that would get from the

00:03:47.370 --> 00:03:47.670
method.

00:03:47.670 --> 00:03:50.750
So what is the solution for this?

00:03:50.750 --> 00:03:59.570
So what I'm going to do is I'm going to have another variable which is going to be static

00:03:59.570 --> 00:04:04.660
bowling done as faults.

00:04:04.660 --> 00:04:08.100
Once we are.

00:04:08.100 --> 00:04:15.280
Once we found out the total and abated the value we're going to say done equals true,

00:04:15.280 --> 00:04:24.080
and in here we're going to have a wild loop which will check to see if that done is to or

00:04:24.080 --> 00:04:24.880
not.

00:04:24.880 --> 00:04:29.650
If it is not true,

00:04:29.650 --> 00:04:37.350
then we want to continuously loop forever until the done becomes true.

00:04:37.350 --> 00:04:39.440
Now,

00:04:39.440 --> 00:04:40.860
if I run the program,

00:04:40.860 --> 00:04:43.650
we will have one problem with this.

00:04:43.650 --> 00:04:48.050
Let's go to the control.

00:04:48.050 --> 00:04:50.800
The program is running forever.

00:04:50.800 --> 00:04:54.850
So what's actually happening in threat to?

00:04:54.850 --> 00:04:58.250
We have said the value of done to True,

00:04:58.250 --> 00:05:03.470
but seems like the value is not updating the actual memory.

00:05:03.470 --> 00:05:08.450
It is updated in the local cash off the processor core.

00:05:08.450 --> 00:05:09.650
We're threat.

00:05:09.650 --> 00:05:10.550
T two is running.

00:05:10.550 --> 00:05:12.730
So guess what?

00:05:12.730 --> 00:05:14.550
Let's stop this program.

00:05:14.550 --> 00:05:17.750
What is the solution?

00:05:17.750 --> 00:05:20.150
Make this variable wallet tile.

00:05:20.150 --> 00:05:26.420
Let's on the program now and vote.

00:05:26.420 --> 00:05:26.880
See,

00:05:26.880 --> 00:05:31.200
the results were expecting pretty well and good.

00:05:31.200 --> 00:05:31.900
Naturally,

00:05:31.900 --> 00:05:34.010
pretty bad,

00:05:34.010 --> 00:05:38.020
because this is definitely a bad practice.

00:05:38.020 --> 00:05:41.610
This is like we're constantly pulling the status off done,

00:05:41.610 --> 00:05:49.490
and we keep on looping through for a very long period of time until this is set to true by

00:05:49.490 --> 00:05:50.350
some other process.

00:05:50.350 --> 00:05:54.650
This is definitely a performance overhead for larger applications.

00:05:54.650 --> 00:05:57.580
So guess what?

00:05:57.580 --> 00:06:00.340
Let's make use off the inter threat communication.

00:06:00.340 --> 00:06:08.880
Let me get rid off all the court in here but no longer want to use this.

00:06:08.880 --> 00:06:10.350
Let's save the file.

00:06:10.350 --> 00:06:20.500
And what I'm going to do now is since we want to let the one weight until two definitions

00:06:20.500 --> 00:06:21.650
and gets the result,

00:06:21.650 --> 00:06:28.950
what we want to do here is I'm going to call the wait method inside this object from inside

00:06:28.950 --> 00:06:29.450
here.

00:06:29.450 --> 00:06:31.280
Don't wait.

00:06:31.280 --> 00:06:38.810
So basically what this weight matter does is it's going to release the lock off this object

00:06:38.810 --> 00:06:45.550
and is going to wait until some other thread caused the notify mattered off the same object

00:06:45.550 --> 00:06:45.550
.

00:06:45.550 --> 00:06:49.190
But clearly we have a problem here.

00:06:49.190 --> 00:06:51.630
Since weight matter releases the lock,

00:06:51.630 --> 00:06:55.560
we have to be in the synchronized block or in synchronized matter,

00:06:55.560 --> 00:07:02.200
even in our changing room Example that we just looked at There is no purpose off lock

00:07:02.200 --> 00:07:03.390
without the changing room.

00:07:03.390 --> 00:07:08.460
And even in here there is no purpose off weight on this.

00:07:08.460 --> 00:07:11.990
We're inside this synchronized block in here.

00:07:11.990 --> 00:07:14.450
We cannot make the run matter synchronized.

00:07:14.450 --> 00:07:18.530
That's because we're never going to call the run better directly.

00:07:18.530 --> 00:07:20.110
We're going to call the start matter,

00:07:20.110 --> 00:07:24.000
and internally Java implementation is going to call the run matter.

00:07:24.000 --> 00:07:27.050
So we cannot make the run method of synchronized.

00:07:27.050 --> 00:07:38.640
So the only option we have is to use the synchronized block and in here I'm going to pass

00:07:38.640 --> 00:07:44.670
in this object and wouldn't the synchronized block.

00:07:44.670 --> 00:07:46.720
I want to call this method.

00:07:46.720 --> 00:07:47.150
Wait,

00:07:47.150 --> 00:07:51.250
this is going to throw interrupted exception.

00:07:51.250 --> 00:07:55.220
We'll talk about interrupted exception in a while.

00:07:55.220 --> 00:07:58.200
That's dilly comment.

00:07:58.200 --> 00:08:01.890
Now the thread will go into waits at right here.

00:08:01.890 --> 00:08:06.670
But listen the lock So some other thread can grab that lock.

00:08:06.670 --> 00:08:12.800
The only tried we have in here is trying to on which Threatt one is dependent on.

00:08:12.800 --> 00:08:14.150
So in here.

00:08:14.150 --> 00:08:16.340
After we do the operation,

00:08:16.340 --> 00:08:22.550
we're going to notify the thread that is waiting in the weight set by using the notify

00:08:22.550 --> 00:08:24.350
method off that object.

00:08:24.350 --> 00:08:25.670
And again,

00:08:25.670 --> 00:08:33.240
this method used to recite inside the synchronize block How type as buoyancy,

00:08:33.240 --> 00:08:33.970
control,

00:08:33.970 --> 00:08:37.250
space and press written.

00:08:37.250 --> 00:08:45.160
I'm going to have this two state mentions that this an hour passes object as an argument

00:08:45.160 --> 00:08:47.160
now by calling the notify.

00:08:47.160 --> 00:08:53.610
It just means that threat to is willing to be the lock.

00:08:53.610 --> 00:08:55.250
Do take a note,

00:08:55.250 --> 00:08:59.350
is just willing to give the lock but not handling the log directly.

00:08:59.350 --> 00:09:04.520
If you have any more instructions after the notify matter,

00:09:04.520 --> 00:09:11.710
The lock will not be released by the monitor until all these instructions are executed.

00:09:11.710 --> 00:09:13.380
So we notify.

00:09:13.380 --> 00:09:19.500
Tattoo is just informing the thread in the weight set that can continue what it is doing

00:09:19.500 --> 00:09:24.130
Fastened Blast that now Guess what?

00:09:24.130 --> 00:09:25.550
We're pretty much done.

00:09:25.550 --> 00:09:30.120
Let's run the program credible and good.

00:09:30.120 --> 00:09:34.760
Also do taken note that this object really has no purpose.

00:09:34.760 --> 00:09:35.700
In fact,

00:09:35.700 --> 00:09:41.500
the argument that we're sending to the synchronized is can be any object literally.

00:09:41.500 --> 00:09:42.260
Ultimately,

00:09:42.260 --> 00:09:46.340
what we want to accomplish is we want a unique identifier.

00:09:46.340 --> 00:09:52.150
But these two synchronized sections I hope that's clear.

00:09:52.150 --> 00:09:54.150
Let me prove that to you.

00:09:54.150 --> 00:09:57.170
Let's take any random class.

00:09:57.170 --> 00:10:02.950
It will take sink example using example.

00:10:02.950 --> 00:10:11.050
And let's say I want to use this object and I want to wait on that object.

00:10:11.050 --> 00:10:13.750
Same thing goes here.

00:10:13.750 --> 00:10:16.040
So in here Oh,

00:10:16.040 --> 00:10:20.310
since Day one enters first to one is going to quite the lock.

00:10:20.310 --> 00:10:22.530
And when it comes across with the statement,

00:10:22.530 --> 00:10:23.000
wait.

00:10:23.000 --> 00:10:27.400
It's going to release the lock for other threats in the interest set,

00:10:27.400 --> 00:10:30.050
and it's going to put itself in the weights at,

00:10:30.050 --> 00:10:31.360
meanwhile,

00:10:31.360 --> 00:10:33.660
tried to enters by calling the lock,

00:10:33.660 --> 00:10:36.250
and it does whatever it needs to do,

00:10:36.250 --> 00:10:38.570
and it will call the notify.

00:10:38.570 --> 00:10:45.630
The notify is just a signal that all the predator in the weight set can now join back in

00:10:45.630 --> 00:10:48.990
the changing room and continue what they're doing.

00:10:48.990 --> 00:10:54.980
But only after monitor handles them the lock and more inter handles than the lock.

00:10:54.980 --> 00:11:01.850
Only after making sure all the rest of the instructions in this threat is are executed.

00:11:01.850 --> 00:11:03.480
No,

00:11:03.480 --> 00:11:06.820
let's run the program very well.

00:11:06.820 --> 00:11:07.280
I'm good.

00:11:07.280 --> 00:11:09.750
Let's undo those changes.

00:11:09.750 --> 00:11:12.200
Let no,

00:11:12.200 --> 00:11:13.820
let's talk about interrupt.

00:11:13.820 --> 00:11:18.910
Let's say I want to make I want to somehow make this tread.

00:11:18.910 --> 00:11:20.150
Wait forever.

00:11:20.150 --> 00:11:26.260
So I'll run threat to first and then Trade one.

00:11:26.260 --> 00:11:28.420
Definitely.

00:11:28.420 --> 00:11:32.460
This will keep this tread in weights it forever,

00:11:32.460 --> 00:11:40.320
because nobody else is really notifying because that instruction is ordered executed.

00:11:40.320 --> 00:11:46.490
But this is not guaranteed way off keeping this tread in Wait State that's on the program

00:11:46.490 --> 00:11:47.650
and see what happens.

00:11:47.650 --> 00:11:52.420
Guess what?

00:11:52.420 --> 00:11:53.850
It's waiting forever.

00:11:53.850 --> 00:11:56.550
Let's stop the program.

00:11:56.550 --> 00:12:01.240
Sometimes you might want to interrupt the thread,

00:12:01.240 --> 00:12:03.330
which is waiting for a long time.

00:12:03.330 --> 00:12:08.280
So we're going to do is from the calling threat.

00:12:08.280 --> 00:12:09.450
I want to interrupt.

00:12:09.450 --> 00:12:14.760
They tread t one after waiting for,

00:12:14.760 --> 00:12:15.450
say,

00:12:15.450 --> 00:12:22.280
thread dot sleep 10 seconds before 10 seconds.

00:12:22.280 --> 00:12:24.810
If those finishes executing by itself,

00:12:24.810 --> 00:12:25.850
that's great.

00:12:25.850 --> 00:12:27.660
But if it doesn't,

00:12:27.660 --> 00:12:32.350
then I want to force interrupt the waiting threat that's on the program,

00:12:32.350 --> 00:12:37.550
so it's going forever.

00:12:37.550 --> 00:12:43.990
The main thing is going to wait for 10 seconds at Max and is going to interrupt when the

00:12:43.990 --> 00:12:45.150
interrupt happens,

00:12:45.150 --> 00:12:48.750
it's going to throw the interrupted exception.

00:12:48.750 --> 00:12:51.870
The wait method is going toe toe the interrupter exception,

00:12:51.870 --> 00:12:54.710
and that's why we have try catch block.

00:12:54.710 --> 00:12:56.030
It's a checked exception,

00:12:56.030 --> 00:12:56.550
by the way,

00:12:56.550 --> 00:12:59.150
as you can guess,

00:12:59.150 --> 00:13:03.600
and when the thread is interrupted,

00:13:03.600 --> 00:13:10.150
the flag off is interrupted is going to be set to true.

00:13:10.150 --> 00:13:12.710
And in here,

00:13:12.710 --> 00:13:14.430
if the threat T one is interrupted,

00:13:14.430 --> 00:13:17.020
you might want to do some operation.

00:13:17.020 --> 00:13:20.960
You might want executive set of instructions that are meaningful,

00:13:20.960 --> 00:13:26.370
so let's we don't want to get there at the moment.

00:13:26.370 --> 00:13:27.550
Well,

00:13:27.550 --> 00:13:32.340
let me just undo everything just to demonstrate you.

00:13:32.340 --> 00:13:33.900
What has said interrupting.

00:13:33.900 --> 00:13:35.720
All right,

00:13:35.720 --> 00:13:37.820
let's talk about one last matter We have,

00:13:37.820 --> 00:13:39.280
which is not a fair at all.

00:13:39.280 --> 00:13:43.260
Notify All is very similar to notify,

00:13:43.260 --> 00:13:49.490
except it's going to notify all the threats that are waiting in the weights that So let's

00:13:49.490 --> 00:13:51.470
assume we have another thread.

00:13:51.470 --> 00:13:54.960
Let's call it t three.

00:13:54.960 --> 00:14:06.250
And even that is waiting for They tried t to do execute and I want to start the thread.

00:14:06.250 --> 00:14:13.100
I want to start a t one anti three before Tito Strunz.

00:14:13.100 --> 00:14:14.110
Now,

00:14:14.110 --> 00:14:21.530
let's on the program pretty well and good,

00:14:21.530 --> 00:14:25.510
except okay,

00:14:25.510 --> 00:14:26.750
here is a problem.

00:14:26.750 --> 00:14:29.500
We just said notify.

00:14:29.500 --> 00:14:36.980
So the notify matter is going to notify only one thread in the weight set so hated off

00:14:36.980 --> 00:14:41.600
these two threats may get the notification devil tradable.

00:14:41.600 --> 00:14:42.850
Keep waiting forever.

00:14:42.850 --> 00:14:45.760
So I went to use,

00:14:45.760 --> 00:14:47.480
as you can guess.

00:14:47.480 --> 00:14:53.800
Notify all Now the program will run smoothly pretty well and good.

00:14:53.800 --> 00:14:55.850
See you in my next radio.

