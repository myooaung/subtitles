WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.330
in this video,

00:00:02.330 --> 00:00:04.910
we're gonna talk about closing the streams.

00:00:04.910 --> 00:00:07.620
Once you're done using the streams,

00:00:07.620 --> 00:00:11.880
it's always important that you close the stream to explain you in better fashion.

00:00:11.880 --> 00:00:15.300
I'm going to make use off the functionality provided by the Eclipse,

00:00:15.300 --> 00:00:22.210
which is debugging debugging will elevate to pause the program while the program is running

00:00:22.210 --> 00:00:25.570
and it will let you analyze the code then and there.

00:00:25.570 --> 00:00:30.480
So to make use of the debunker way to have some break points.

00:00:30.480 --> 00:00:31.500
For example,

00:00:31.500 --> 00:00:36.880
if I have a break point in here and when we run the program using the debug er,

00:00:36.880 --> 00:00:42.680
the program execution is going to pausing here for us to do something,

00:00:42.680 --> 00:00:44.010
let me just show you.

00:00:44.010 --> 00:00:45.640
So instead of running the program,

00:00:45.640 --> 00:00:51.880
I'm going to click this bug icon to start the debate process,

00:00:51.880 --> 00:00:55.430
and the controller will stop right there.

00:00:55.430 --> 00:00:58.650
It won't process border until we say to go.

00:00:58.650 --> 00:01:01.950
So in here you can just analyze this line.

00:01:01.950 --> 00:01:05.840
So the line currently is holding this text.

00:01:05.840 --> 00:01:07.510
If you press f six,

00:01:07.510 --> 00:01:12.580
it's going to move on the next instruction My the way.

00:01:12.580 --> 00:01:17.150
I have moved out the court off before return before writer under another file which is

00:01:17.150 --> 00:01:24.710
before reader writer Door Java and I've also have a new line introduced right after each

00:01:24.710 --> 00:01:25.470
and every line,

00:01:25.470 --> 00:01:29.920
so the output will now have a new land character.

00:01:29.920 --> 00:01:38.170
Each line will be printed in a new line now moving on so you can analyze the code like so.

00:01:38.170 --> 00:01:40.550
And if you click resume,

00:01:40.550 --> 00:01:44.450
the controller will stop at the next break point.

00:01:44.450 --> 00:01:47.290
If there is no break point on its way,

00:01:47.290 --> 00:01:51.350
it's just going to complete the execution off the program.

00:01:51.350 --> 00:01:53.300
So let's click this.

00:01:53.300 --> 00:01:55.450
And since we are in while loop,

00:01:55.450 --> 00:01:58.050
it's going to stop here again.

00:01:58.050 --> 00:01:59.960
But this time the line is different.

00:01:59.960 --> 00:02:05.410
I hope you got the purpose off the debunker enemy.

00:02:05.410 --> 00:02:06.780
Why am I explaining this?

00:02:06.780 --> 00:02:10.450
To tell you the significance off closing the streams,

00:02:10.450 --> 00:02:13.880
we have this output stream open.

00:02:13.880 --> 00:02:19.670
That means we didn't use any statement like clothes or something to close the stream.

00:02:19.670 --> 00:02:20.250
No,

00:02:20.250 --> 00:02:23.350
let's see what can happen if you don't close the stream.

00:02:23.350 --> 00:02:27.980
If I go here and if I try to delete this file,

00:02:27.980 --> 00:02:33.540
I'm going to get a message saying the action can be completed because the pilots open in

00:02:33.540 --> 00:02:35.770
Java platform issue binary,

00:02:35.770 --> 00:02:39.580
which means some Java processes using this file,

00:02:39.580 --> 00:02:41.410
and so we cannot delete it.

00:02:41.410 --> 00:02:45.000
This is a very simple program,

00:02:45.000 --> 00:02:48.420
and we may not see any damage being done.

00:02:48.420 --> 00:02:53.970
But think off very large applications where there could be thousands off our files.

00:02:53.970 --> 00:02:58.850
And when you run that application and let's say you have opened the stream and you forgot

00:02:58.850 --> 00:02:59.570
to close it,

00:02:59.570 --> 00:03:02.930
then throughout execution off that entire application,

00:03:02.930 --> 00:03:05.130
you cannot do anything with that file.

00:03:05.130 --> 00:03:10.030
And that's why I've used the D bugger in here to stop the program,

00:03:10.030 --> 00:03:14.980
making sure that the stream is still open and as we look that we cannot delete the file.

00:03:14.980 --> 00:03:18.810
So what we need to do is we need to use that.

00:03:18.810 --> 00:03:29.380
Use the matter inside the Buffer writer called Close Let's stop the program to close the

00:03:29.380 --> 00:03:33.570
stream before writer dot close.

00:03:33.570 --> 00:03:40.790
Now they're a couple of things that's going to happen with this one is you no longer need

00:03:40.790 --> 00:03:44.150
to use the PLASCHKE word because when you close the stream,

00:03:44.150 --> 00:03:47.680
it's going to automatically flush the data onto the destination.

00:03:47.680 --> 00:03:48.250
In this case,

00:03:48.250 --> 00:03:49.950
it's not the text file.

00:03:49.950 --> 00:03:51.240
Number two.

00:03:51.240 --> 00:03:54.510
If you close the buffered writer stream,

00:03:54.510 --> 00:03:58.800
it's also going to close all the corresponding streams,

00:03:58.800 --> 00:03:59.890
which are are put,

00:03:59.890 --> 00:04:02.680
stream writer file output stream as well.

00:04:02.680 --> 00:04:10.070
And it's also important that we close the input stream just like so isn't the clothes

00:04:10.070 --> 00:04:12.040
method now This way,

00:04:12.040 --> 00:04:17.990
we're ensuring that we didn't keep the file stream open through investigation off the

00:04:17.990 --> 00:04:19.200
entire application.

00:04:19.200 --> 00:04:24.650
Let's run the program and everything works just as before.

00:04:24.650 --> 00:04:29.690
Now,

00:04:29.690 --> 00:04:35.540
another reason why you want to close the streams is from operating system perspective.

00:04:35.540 --> 00:04:39.150
When you create an output stream or an input stream,

00:04:39.150 --> 00:04:43.360
you're essentially opening your file to do something with it.

00:04:43.360 --> 00:04:45.740
And even in your operating system,

00:04:45.740 --> 00:04:48.680
you cannot just open unlimited number of files.

00:04:48.680 --> 00:04:52.330
There is a certain limit if you keep opening files,

00:04:52.330 --> 00:04:54.180
you know hundreds and thousands,

00:04:54.180 --> 00:04:59.350
or what time you will reach to a point where you won't be ableto open anymore files.

00:04:59.350 --> 00:05:00.500
Same with this.

00:05:00.500 --> 00:05:06.390
If you keep creating the streams and not closing them ultimately in larger applications,

00:05:06.390 --> 00:05:10.450
it's going to result in reaching the limit off the files.

00:05:10.450 --> 00:05:16.900
And the rest of the program may not be able to create streams or deal with files.

00:05:16.900 --> 00:05:18.400
Now that's a big problem.

00:05:18.400 --> 00:05:22.340
So always remember to close the streams the moment you're done with it.

00:05:22.340 --> 00:05:24.770
If you don't close the stream manually,

00:05:24.770 --> 00:05:27.050
the Java is going to take her off it.

00:05:27.050 --> 00:05:32.900
But there will be a very big delay because when the garbage collector comes in and destroys

00:05:32.900 --> 00:05:33.860
this object,

00:05:33.860 --> 00:05:36.530
that's when the stream will get closed.

00:05:36.530 --> 00:05:41.550
And we're not sure when the garbage collector will come and definitely we don't want to

00:05:41.550 --> 00:05:42.450
rely on it.

00:05:42.450 --> 00:05:45.360
We still have one more problem in here.

00:05:45.360 --> 00:05:46.650
Can you guess?

00:05:46.650 --> 00:05:49.000
Well,

00:05:49.000 --> 00:05:49.880
I'll give you a clue.

00:05:49.880 --> 00:05:55.700
Is there any possibility that these instructions will not get executed?

00:05:55.700 --> 00:05:58.500
Sure,

00:05:58.500 --> 00:06:04.350
if you have an exception in these lines than this is not going to get executed,

00:06:04.350 --> 00:06:07.800
what is the solution used?

00:06:07.800 --> 00:06:07.990
Try,

00:06:07.990 --> 00:06:08.520
catch,

00:06:08.520 --> 00:06:09.510
finally block.

00:06:09.510 --> 00:06:10.780
So let's get it off.

00:06:10.780 --> 00:06:13.020
Throws in here and insert.

00:06:13.020 --> 00:06:23.650
Let's grab the entire code inside the try Catch block surround with try catch block.

00:06:23.650 --> 00:06:30.550
Eclipse has automatically did the job for me.

00:06:30.550 --> 00:06:32.990
We have another here,

00:06:32.990 --> 00:06:33.840
will get their war.

00:06:33.840 --> 00:06:34.350
It is,

00:06:34.350 --> 00:06:40.010
But we're leaving the scope for these instructions to not get executed.

00:06:40.010 --> 00:06:41.980
For example,

00:06:41.980 --> 00:06:43.790
if we have a written statement in here,

00:06:43.790 --> 00:06:45.260
won't get executed.

00:06:45.260 --> 00:06:46.820
So what is the solution?

00:06:46.820 --> 00:06:55.750
We're gonna have the finally block and we're gonna have these two instructions in here.

00:06:55.750 --> 00:07:01.060
No,

00:07:01.060 --> 00:07:02.490
let's see what they're says.

00:07:02.490 --> 00:07:07.610
There is one checked exception so far they're going to provide another try catch inside the

00:07:07.610 --> 00:07:08.600
finally block.

00:07:08.600 --> 00:07:10.890
And even for this,

00:07:10.890 --> 00:07:18.160
the court is really getting bigger due to introducing the exception handling.

00:07:18.160 --> 00:07:19.610
But it's really what that.

00:07:19.610 --> 00:07:20.350
Believe me,

00:07:20.350 --> 00:07:22.080
we have one more error.

00:07:22.080 --> 00:07:23.030
That's what it is.

00:07:23.030 --> 00:07:25.850
It just says the variable is not initialized.

00:07:25.850 --> 00:07:29.340
This has to be initialized to some value.

00:07:29.340 --> 00:07:30.470
In this case,

00:07:30.470 --> 00:07:32.250
let's make this and no,

00:07:32.250 --> 00:07:41.250
because the initialization happened inside the try block.

00:07:41.250 --> 00:07:45.270
By the way,

00:07:45.270 --> 00:07:49.550
what if this be our is a no?

00:07:49.550 --> 00:07:52.890
Then this is going to throw a null pointer exception.

00:07:52.890 --> 00:07:56.150
And since exceptions not handled in here,

00:07:56.150 --> 00:07:59.850
this statement will not get executed.

00:07:59.850 --> 00:08:01.620
C s problem.

00:08:01.620 --> 00:08:02.060
Right?

00:08:02.060 --> 00:08:03.310
So as a good practice,

00:08:03.310 --> 00:08:06.520
it's always better that you check to see if this object is now.

00:08:06.520 --> 00:08:07.840
If it is not know,

00:08:07.840 --> 00:08:09.680
then go ahead and throws a stream.

00:08:09.680 --> 00:08:10.600
So it's going to be,

00:08:10.600 --> 00:08:13.660
if not equals no.

00:08:13.660 --> 00:08:17.390
Then you'll do this same in here.

00:08:17.390 --> 00:08:24.410
B w and let's have the file.

00:08:24.410 --> 00:08:25.320
In fact,

00:08:25.320 --> 00:08:29.750
now you can have this to handle under one try catch block.

00:08:29.750 --> 00:08:32.270
No problem whatsoever.

00:08:32.270 --> 00:08:34.750
Let's hear the file.

00:08:34.750 --> 00:08:38.930
Let's do control shift F to give proper indentation.

00:08:38.930 --> 00:08:40.630
And there it is.

00:08:40.630 --> 00:08:44.560
This is a proper way off dealing with streams.

00:08:44.560 --> 00:08:51.670
And the reason why I said you need to have this variable initialized is because you can't

00:08:51.670 --> 00:08:57.200
just use a simple reference type without that difference type pointing to certain object.

00:08:57.200 --> 00:09:01.550
We cannot call the matter close without pointing it to some object.

00:09:01.550 --> 00:09:05.750
And that's why when you get rid off this in here,

00:09:05.750 --> 00:09:11.460
it's going to show us the combat is going to tell us to initialize the variable.

00:09:11.460 --> 00:09:12.070
All right,

00:09:12.070 --> 00:09:13.010
that's it for now.

00:09:13.010 --> 00:09:14.500
See you in my next video.

