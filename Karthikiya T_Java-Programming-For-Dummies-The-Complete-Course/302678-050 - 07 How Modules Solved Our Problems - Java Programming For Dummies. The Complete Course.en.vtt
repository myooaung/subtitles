WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.150
So how did the model system helped us get rid of

00:00:03.150 --> 00:00:06.555
the problems we had discussed earlier? Let's take a look.

00:00:06.555 --> 00:00:09.990
We obviously got rid of the problem of public being

00:00:09.990 --> 00:00:12.930
to public because whatever the district,

00:00:12.930 --> 00:00:16.050
the access to the public classes available inside

00:00:16.050 --> 00:00:21.915
the uterus package by not exploiting that package from the module where it is reciting.

00:00:21.915 --> 00:00:25.755
So this was addressed by the module system.

00:00:25.755 --> 00:00:30.475
And other problem that it had addressed is the problem of John Heller.

00:00:30.475 --> 00:00:33.185
Because of the fact that we can now define

00:00:33.185 --> 00:00:36.350
the list of modules that our project is dependent on.

00:00:36.350 --> 00:00:39.590
Java is ever of all the dependencies to run

00:00:39.590 --> 00:00:43.820
our project In case if there are any missing libraries or modules,

00:00:43.820 --> 00:00:47.330
Java would report an error during the compile them itself.

00:00:47.330 --> 00:00:49.070
We don't have to wait until we deployed

00:00:49.070 --> 00:00:52.490
the application and then wait for somebody to use a feature,

00:00:52.490 --> 00:00:54.950
but might be requiring a class file inside one of

00:00:54.950 --> 00:00:59.340
the missing jars just to see no class deaf found error.

00:00:59.680 --> 00:01:05.540
And now the problem that it addresses is the problem of cyclic dependencies.

00:01:05.540 --> 00:01:08.930
Cycles would lead to inconsistent application behavior

00:01:08.930 --> 00:01:12.694
and might lead to some unforeseen exceptions or errors.

00:01:12.694 --> 00:01:15.890
This happens primarily because you have two projects,

00:01:15.890 --> 00:01:21.620
project a and B, where a depends on B and B depends on a limiter.

00:01:21.620 --> 00:01:26.600
To give you an example of one of the issues that might arise due to cyclic dependencies.

00:01:26.600 --> 00:01:29.105
So that you have email app and the banking app.

00:01:29.105 --> 00:01:30.380
From inside the email app,

00:01:30.380 --> 00:01:34.820
you have a method that makes a call to a method inside the banking app.

00:01:34.820 --> 00:01:41.030
And the exact same method would actually make a call back to the method of email app.

00:01:41.030 --> 00:01:43.160
What happens is this goes on forever.

00:01:43.160 --> 00:01:46.070
They just keep on calling each other forever.

00:01:46.070 --> 00:01:48.620
And might lead to some kind of an exception like

00:01:48.620 --> 00:01:51.755
stack overflow error or something of that sort.

00:01:51.755 --> 00:01:55.710
The model system will not allow this to happen.

00:01:56.550 --> 00:02:01.780
For example, if you say email app requests bandgap,

00:02:01.780 --> 00:02:05.320
and vice versa, bandgap requires email app.

00:02:05.320 --> 00:02:09.655
That's actually going to show you a compile-time error that says

00:02:09.655 --> 00:02:17.170
cycle Xist modulus will not allow you to have cyclic dependencies. With modules.

00:02:17.170 --> 00:02:20.245
We can also get it off the problem of shadowing,

00:02:20.245 --> 00:02:25.015
where two classes might be having the exact same fully qualified name.

00:02:25.015 --> 00:02:30.565
In modules, you're not allowed to have two packages with the exact same name.

00:02:30.565 --> 00:02:32.160
Let me show you what I mean.

00:02:32.160 --> 00:02:35.800
Say that you have the project's banking app and the email app.

00:02:35.800 --> 00:02:40.220
And let's say that they both have the exact same package name.

00:02:40.220 --> 00:02:45.470
And then if you export the same package in both the modules,

00:02:45.470 --> 00:02:48.485
then this is going to show us an error that

00:02:48.485 --> 00:02:52.355
says cannot export the package com dot email app dot e-mail,

00:02:52.355 --> 00:02:55.865
which belongs to the module home.html app.

00:02:55.865 --> 00:03:00.335
If you have a third project which require a drop these modules,

00:03:00.335 --> 00:03:04.505
then you're going to see compile-time error there as well.

00:03:04.505 --> 00:03:08.300
If you cannot have two packages with the exact same name,

00:03:08.300 --> 00:03:13.800
then there isn't a question of classes having the exact same fully qualified name.
