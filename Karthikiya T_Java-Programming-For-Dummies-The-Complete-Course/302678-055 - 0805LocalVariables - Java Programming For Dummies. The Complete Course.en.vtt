WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.390
in this video,

00:00:01.390 --> 00:00:03.600
we're gonna talk about local classes,

00:00:03.600 --> 00:00:07.670
unlike in the class,

00:00:07.670 --> 00:00:10.020
which acts like a member off a class.

00:00:10.020 --> 00:00:10.750
Hey,

00:00:10.750 --> 00:00:11.690
local classes,

00:00:11.690 --> 00:00:13.150
local toe a block.

00:00:13.150 --> 00:00:14.860
And when I say block,

00:00:14.860 --> 00:00:16.350
it could be inside a method.

00:00:16.350 --> 00:00:21.880
It could be inside a four loop or even it can be inside any condition.

00:00:21.880 --> 00:00:22.850
Xterra.

00:00:22.850 --> 00:00:24.840
Now,

00:00:24.840 --> 00:00:25.890
take a look at this.

00:00:25.890 --> 00:00:29.450
We have the main method from bird execution begins.

00:00:29.450 --> 00:00:35.930
We have an object off the ultra class is in which we're calling a method inside it.

00:00:35.930 --> 00:00:38.410
Inside this method,

00:00:38.410 --> 00:00:40.250
we have another class defined,

00:00:40.250 --> 00:00:47.020
which is called the local class and revolt created an object off the local class to be able

00:00:47.020 --> 00:00:49.700
to access this method inside that local class.

00:00:49.700 --> 00:00:56.110
Now this local class acts more or less like an inner class.

00:00:56.110 --> 00:01:00.450
It will have access to all the private members off the ultra class.

00:01:00.450 --> 00:01:07.380
And just as in your classes local class does not encourage is to put static members No

00:01:07.380 --> 00:01:11.920
static variables are static methods except the constants,

00:01:11.920 --> 00:01:13.900
the final static variables.

00:01:13.900 --> 00:01:16.550
Now that being said,

00:01:16.550 --> 00:01:21.390
there are certain differences between the both in her class and the local class.

00:01:21.390 --> 00:01:22.590
For example,

00:01:22.590 --> 00:01:28.520
we cannot instead initiate the local plants outside the school bearer it is defined.

00:01:28.520 --> 00:01:29.310
For example,

00:01:29.310 --> 00:01:36.160
this local class is written the scope of this method so we cannot create an object off this

00:01:36.160 --> 00:01:44.020
class outside the scope and this look of less cannot have the access pacifiers like public

00:01:44.020 --> 00:01:44.020
,

00:01:44.020 --> 00:01:44.480
private,

00:01:44.480 --> 00:01:47.920
protected whatsoever and for obvious reasons.

00:01:47.920 --> 00:01:51.470
That's because in the class is like a member off a class,

00:01:51.470 --> 00:01:55.750
and every member off a class can utilize the access restriction.

00:01:55.750 --> 00:01:58.150
Now this is inside a method.

00:01:58.150 --> 00:02:00.820
This is not a member off a class,

00:02:00.820 --> 00:02:06.510
and hence actor specify IRS or access restrictions is not applicable for local class.

00:02:06.510 --> 00:02:07.490
Also,

00:02:07.490 --> 00:02:13.950
whenever a local plants is using a variable that is local to this matter,

00:02:13.950 --> 00:02:20.250
be it a perimeter or a variable which is declared and initialized inside this method,

00:02:20.250 --> 00:02:23.170
it should be a final variable.

00:02:23.170 --> 00:02:24.510
Otherwise,

00:02:24.510 --> 00:02:25.850
we get that compel ish netter.

00:02:25.850 --> 00:02:29.160
There is a very good reason to do so.

00:02:29.160 --> 00:02:36.950
This class in here does not have visibility off the local members or local variables off

00:02:36.950 --> 00:02:39.740
the enclosed scope or,

00:02:39.740 --> 00:02:40.450
in this case,

00:02:40.450 --> 00:02:42.490
the local variables off this matter.

00:02:42.490 --> 00:02:46.080
But Jaber does a little trick to this.

00:02:46.080 --> 00:02:48.250
Then we compel this program.

00:02:48.250 --> 00:02:56.600
Javal will actually create a copy off this local variables and make them part off this

00:02:56.600 --> 00:02:57.350
class.

00:02:57.350 --> 00:03:00.210
And at the same time,

00:03:00.210 --> 00:03:04.540
Job will also create a constructor to view the initial values,

00:03:04.540 --> 00:03:07.950
which would be the same values whatever we have here.

00:03:07.950 --> 00:03:14.420
So job is essentially during compile Time is just making a copy off all these local

00:03:14.420 --> 00:03:22.560
variables and pasting them here with the constructor to initialize them So during runtime.

00:03:22.560 --> 00:03:25.740
If the variable is not final,

00:03:25.740 --> 00:03:31.590
then there's a scope off changing and that will definitely caused confusion.

00:03:31.590 --> 00:03:32.670
Let me explain what I mean.

00:03:32.670 --> 00:03:41.300
Let's say I have has seen the value of X two factorial affects.

00:03:41.300 --> 00:03:43.130
Of course we don't have this matter.

00:03:43.130 --> 00:03:44.850
That's where we're getting completion error.

00:03:44.850 --> 00:03:50.410
But just for the sake of explanation that zoom we're finding the factory off the Value X

00:03:50.410 --> 00:03:52.770
and then a sending it back to the same variable.

00:03:52.770 --> 00:03:55.880
No pubes.

00:03:55.880 --> 00:04:01.090
Air Java is actually creating a copy off variable X during compile time,

00:04:01.090 --> 00:04:04.370
but this competition happens during runtime.

00:04:04.370 --> 00:04:07.730
Java cannot predict a hair off time during the compile time.

00:04:07.730 --> 00:04:09.300
The result off X,

00:04:09.300 --> 00:04:16.690
so the only way we can respect do not make changes to the local variables is when we make

00:04:16.690 --> 00:04:17.550
it to final.

00:04:17.550 --> 00:04:22.090
So that's the very reason why we have accomplish in error.

00:04:22.090 --> 00:04:22.950
Okay,

00:04:22.950 --> 00:04:32.390
let me just show you a betting this value x 2 30 Hope that makes sense.

00:04:32.390 --> 00:04:37.600
Now you may ask me this variable in here is not final,

00:04:37.600 --> 00:04:39.750
but still wouldn't get a comparison error.

00:04:39.750 --> 00:04:42.190
This is not final,

00:04:42.190 --> 00:04:49.830
but this is effectively final since Java eight remove the restriction off making a very

00:04:49.830 --> 00:04:50.850
blast final,

00:04:50.850 --> 00:04:54.200
but it should be at least effectively final.

00:04:54.200 --> 00:04:57.900
What that means is I didn't make any changes to this variable.

00:04:57.900 --> 00:04:59.800
So that means effectively.

00:04:59.800 --> 00:05:04.000
It's a final variable and java below me to do so.

00:05:04.000 --> 00:05:09.380
Hello Me to access the lets them abrade the value too.

00:05:09.380 --> 00:05:10.930
40.

00:05:10.930 --> 00:05:12.270
Let's see not.

00:05:12.270 --> 00:05:18.990
This will definitely show an error saying local variables were friends from the inner class

00:05:18.990 --> 00:05:18.990
.

00:05:18.990 --> 00:05:25.500
Must be final or effectively Final makes perfect sense That's scheduled off this.

00:05:25.500 --> 00:05:28.850
If you run the program,

00:05:28.850 --> 00:05:31.450
he would definitely see the value.

00:05:31.450 --> 00:05:31.780
10.

00:05:31.780 --> 00:05:33.450
Let's do it.

00:05:33.450 --> 00:05:38.640
There you go.

00:05:38.640 --> 00:05:40.750
See you in my next video

