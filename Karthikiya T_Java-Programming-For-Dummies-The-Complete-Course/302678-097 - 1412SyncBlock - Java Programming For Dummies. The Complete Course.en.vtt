WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.370
in this video,

00:00:02.370 --> 00:00:04.850
we're gonna talk about synchronize block,

00:00:04.850 --> 00:00:07.800
take a look at this example,

00:00:07.800 --> 00:00:12.440
lets him conducting a marathon event and say,

00:00:12.440 --> 00:00:14.670
I have five participants.

00:00:14.670 --> 00:00:23.620
I have decided a route from source to destination men on my route.

00:00:23.620 --> 00:00:32.770
There are fire lines by lanes for each one off this participants to run.

00:00:32.770 --> 00:00:36.050
But somewhere in the middle of the route,

00:00:36.050 --> 00:00:39.250
there happen to be a bridge,

00:00:39.250 --> 00:00:43.250
and only one person can fit into this bridge.

00:00:43.250 --> 00:00:47.390
Now let's assume that the distance between the source and destination,

00:00:47.390 --> 00:00:57.910
his 20 kilometers and it takes an average off one are for a person to reach from the source

00:00:57.910 --> 00:00:58.770
to destination.

00:00:58.770 --> 00:01:01.980
Since somewhere in the middle of the route,

00:01:01.980 --> 00:01:03.690
only one person can fit in.

00:01:03.690 --> 00:01:08.190
I have decided to allow only one person to run at a time.

00:01:08.190 --> 00:01:14.830
So for five people it's going to take five hours off time to complete them their arrests

00:01:14.830 --> 00:01:16.490
before we announce the results.

00:01:16.490 --> 00:01:23.190
So just because off a particular section where only one person can fit in,

00:01:23.190 --> 00:01:26.710
I'm not allowing all the prayers to go simultaneously.

00:01:26.710 --> 00:01:33.050
But what if I allow all the players toe go simultaneously until this point?

00:01:33.050 --> 00:01:35.180
And after that,

00:01:35.180 --> 00:01:41.990
only one player will go at a time and again they continue going simultaneously from this

00:01:41.990 --> 00:01:42.560
point.

00:01:42.560 --> 00:01:47.450
And this way I'm pretty sure I'm going to save a lot off time.

00:01:47.450 --> 00:01:54.790
So we thought This bridge if it takes one hour off time for all the players,

00:01:54.790 --> 00:01:57.850
an average time with this bridge.

00:01:57.850 --> 00:02:00.930
And if they go simultaneous Landel,

00:02:00.930 --> 00:02:07.460
this bridge go one at a time in this bridge and then again continue with their simultaneous

00:02:07.460 --> 00:02:07.990
running.

00:02:07.990 --> 00:02:14.440
Then only within this time where the run on this bridge there will be a slight delay.

00:02:14.440 --> 00:02:17.740
So it would be more or less say,

00:02:17.740 --> 00:02:22.010
one or for 10 minutes versus five hours.

00:02:22.010 --> 00:02:25.180
There's a big time difference between this and this.

00:02:25.180 --> 00:02:27.290
Same with the programming.

00:02:27.290 --> 00:02:33.050
Let's say you have thousands of lines off court and you have five different threads.

00:02:33.050 --> 00:02:39.280
Just because a section of discord require synchronization,

00:02:39.280 --> 00:02:42.470
we don't want to make the entire court synchronized.

00:02:42.470 --> 00:02:43.640
As you can see,

00:02:43.640 --> 00:02:45.850
there is ah difference in performance.

00:02:45.850 --> 00:02:48.120
It's going to take fire.

00:02:48.120 --> 00:02:50.170
Are strict good discord.

00:02:50.170 --> 00:02:53.590
If we l only wanted at a time instead,

00:02:53.590 --> 00:02:55.450
what we can do is we Canelo.

00:02:55.450 --> 00:03:00.170
The threats takes get simultaneously in this section and this section,

00:03:00.170 --> 00:03:01.600
but only Witten.

00:03:01.600 --> 00:03:03.170
This critical section.

00:03:03.170 --> 00:03:07.480
We want to allow only one threat at the time,

00:03:07.480 --> 00:03:10.190
so let's see this in action.

00:03:10.190 --> 00:03:12.460
Let's go to our workspace.

00:03:12.460 --> 00:03:14.430
For this example,

00:03:14.430 --> 00:03:16.110
I have created couple of files.

00:03:16.110 --> 00:03:21.380
Read one dot txt Henry to Dr Extreme and read one.

00:03:21.380 --> 00:03:25.640
I just have Apple as the text and then re too.

00:03:25.640 --> 00:03:34.510
I have been known as text Now from our program Now created couple off threads from dread

00:03:34.510 --> 00:03:35.050
one.

00:03:35.050 --> 00:03:41.980
I'm just going to call a method inside this class sink block example,

00:03:41.980 --> 00:03:44.250
which I'm going to talk about in a while,

00:03:44.250 --> 00:03:48.250
and I'm passing the path to that file has an argument.

00:03:48.250 --> 00:03:53.120
We'll see what we're doing in this matter and then threat to.

00:03:53.120 --> 00:03:56.500
I'm passing the retooled Arctic STI as an argument.

00:03:56.500 --> 00:03:58.500
Mother,

00:03:58.500 --> 00:04:05.130
you have also We can also give the name to these threats like so you just have to pass

00:04:05.130 --> 00:04:07.050
another Param Eter.

00:04:07.050 --> 00:04:08.080
In this case,

00:04:08.080 --> 00:04:11.250
it's thread one and hear that too.

00:04:11.250 --> 00:04:21.420
This is just to see which thread is doing what when we get the output and I'm trying to

00:04:21.420 --> 00:04:27.590
wait for these treads to finish in our main threat just to be able to calculate the total

00:04:27.590 --> 00:04:31.140
time in here what I'm doing?

00:04:31.140 --> 00:04:31.600
Yes,

00:04:31.600 --> 00:04:32.250
the method.

00:04:32.250 --> 00:04:35.290
I'm just reading the data inside.

00:04:35.290 --> 00:04:37.170
Whatever the file path,

00:04:37.170 --> 00:04:38.700
send it as an argument.

00:04:38.700 --> 00:04:41.850
If you go inside the reed from file,

00:04:41.850 --> 00:04:47.640
I was just going to have the file reader and read the data from the file.

00:04:47.640 --> 00:04:49.480
And ultimately,

00:04:49.480 --> 00:04:52.120
this method is going to return the string,

00:04:52.120 --> 00:04:56.360
which is the texture inside that pile.

00:04:56.360 --> 00:05:00.950
And that string is assigned to the string object,

00:05:00.950 --> 00:05:03.710
and we're passing that string.

00:05:03.710 --> 00:05:04.780
Ultimately,

00:05:04.780 --> 00:05:06.450
the Texans had that file.

00:05:06.450 --> 00:05:09.850
What are the file abroad in here?

00:05:09.850 --> 00:05:15.770
And we're writing that text into into another file.

00:05:15.770 --> 00:05:18.450
So in our right to file method,

00:05:18.450 --> 00:05:27.010
we're writing that information to the temp dot txt and that's all we're doing.

00:05:27.010 --> 00:05:33.150
And every time we write each and every character with rushing it and waiting for a second

00:05:33.150 --> 00:05:41.030
and whatever is inside the TEM Doc txt file which are we have written,

00:05:41.030 --> 00:05:48.330
is going to be read into this now the string variable and we're trying to print it,

00:05:48.330 --> 00:05:49.640
chew it on the output,

00:05:49.640 --> 00:05:53.110
along with the current thread details.

00:05:53.110 --> 00:05:57.650
And this is where we we would see our trade name.

00:05:57.650 --> 00:06:01.550
All right,

00:06:01.550 --> 00:06:02.940
that's all we're doing now.

00:06:02.940 --> 00:06:06.240
We're not having any kind of synchronization functionality.

00:06:06.240 --> 00:06:08.920
Now let's see what's going to happen.

00:06:08.920 --> 00:06:22.500
The result is something really messy.

00:06:22.500 --> 00:06:24.210
Let's run the program again,

00:06:24.210 --> 00:06:26.790
and I bet you won't see the same result again.

00:06:26.790 --> 00:06:37.060
There you go was from the program again,

00:06:37.060 --> 00:06:44.740
so result is very inconsistent,

00:06:44.740 --> 00:06:47.640
and it took her on six seconds to execute that.

00:06:47.640 --> 00:06:50.950
That's because both the stretch or running simultaneously.

00:06:50.950 --> 00:06:54.160
But as per our previous examples,

00:06:54.160 --> 00:06:55.200
let's make this.

00:06:55.200 --> 00:06:57.150
Let's synchronize this method.

00:06:57.150 --> 00:07:01.840
We want to put it before the wide written statement.

00:07:01.840 --> 00:07:04.330
No,

00:07:04.330 --> 00:07:06.370
the controlled space to get the suggestions.

00:07:06.370 --> 00:07:09.090
I'll make use off the idea functionality.

00:07:09.090 --> 00:07:23.970
But now let's run the program Happel and but number.

00:07:23.970 --> 00:07:27.330
It sold our problem off reading difference,

00:07:27.330 --> 00:07:31.810
but at the cost off performance it took.

00:07:31.810 --> 00:07:34.200
11 seconds were so six seconds.

00:07:34.200 --> 00:07:35.620
So basically,

00:07:35.620 --> 00:07:38.080
every time you use synchronized keyword,

00:07:38.080 --> 00:07:42.240
we're sacrificing performance that multi training provides.

00:07:42.240 --> 00:07:45.900
So if you keep all the court under synchronized section,

00:07:45.900 --> 00:07:49.140
it's as good as having everything run under one single threat.

00:07:49.140 --> 00:07:51.920
As in our marathon example,

00:07:51.920 --> 00:07:57.420
we don't want to make every runner to run individually just because there is a bridge at

00:07:57.420 --> 00:07:58.950
some point of time in the root,

00:07:58.950 --> 00:08:03.340
it will take a lot of time to finish the event instead,

00:08:03.340 --> 00:08:05.350
only when the bridge occurs.

00:08:05.350 --> 00:08:07.900
We want the runner to go one at a time.

00:08:07.900 --> 00:08:09.510
Similarly,

00:08:09.510 --> 00:08:15.160
we can make our threats go one at a time in the critical sections off the court and let

00:08:15.160 --> 00:08:18.510
them run simultaneously in rest of the places.

00:08:18.510 --> 00:08:20.310
So as a rule off term,

00:08:20.310 --> 00:08:25.490
always use synchronization sparingly and only when required.

00:08:25.490 --> 00:08:29.070
So let's see what we can do to this code.

00:08:29.070 --> 00:08:37.770
If you take a look are you can easily identify that reading from file is not that critical

00:08:37.770 --> 00:08:37.770
.

00:08:37.770 --> 00:08:38.570
I mean,

00:08:38.570 --> 00:08:43.790
even multiple threats can execute these these two lines simultaneously.

00:08:43.790 --> 00:08:47.070
Same is the case with six out statement.

00:08:47.070 --> 00:08:52.050
We don't want threats to go one at a time for this piece off court.

00:08:52.050 --> 00:09:00.620
But whereas these two sections I feel are critical and we don't want threats to write to

00:09:00.620 --> 00:09:08.520
the same pile simultaneously now what we can do is get rid off the synchronized keyword in

00:09:08.520 --> 00:09:13.250
here and only make this section synchronized.

00:09:13.250 --> 00:09:15.100
How do we do that?

00:09:15.100 --> 00:09:17.100
He used the same keywords,

00:09:17.100 --> 00:09:22.850
and within the parent this is you would provide the object.

00:09:22.850 --> 00:09:28.490
We'll talk about what you're going to provide in this parentis is in a while,

00:09:28.490 --> 00:09:36.050
but ultimately going to keep this cord inside this section.

00:09:36.050 --> 00:09:37.530
Now,

00:09:37.530 --> 00:09:43.430
when Tread one and dread to starts executing simultaneously the enter inside this method

00:09:43.430 --> 00:09:49.050
simultaneously and they're going to execute these two lines off court.

00:09:49.050 --> 00:09:52.850
But when they come across with the synchronous block,

00:09:52.850 --> 00:09:55.640
whichever threatened to us inside,

00:09:55.640 --> 00:09:58.950
this block is going to acquire the lock off that object.

00:09:58.950 --> 00:10:01.530
While the second red is going toe.

00:10:01.530 --> 00:10:07.570
Wait until the first read Richard's end of the instruction inside this block and releases a

00:10:07.570 --> 00:10:08.150
lock.

00:10:08.150 --> 00:10:10.600
Once Tread,

00:10:10.600 --> 00:10:12.510
one releases the lock.

00:10:12.510 --> 00:10:15.780
It goes ahead with executing just off the instructions,

00:10:15.780 --> 00:10:18.240
and meanwhile,

00:10:18.240 --> 00:10:21.780
the lock is made available for thread to to enter,

00:10:21.780 --> 00:10:25.450
and it can gladly enter inside the section.

00:10:25.450 --> 00:10:28.250
And from that point on,

00:10:28.250 --> 00:10:31.860
it will exert everything rest of the court,

00:10:31.860 --> 00:10:33.350
along with other threats.

00:10:33.350 --> 00:10:35.760
Now let's run the program.

00:10:35.760 --> 00:10:36.590
Hopefully,

00:10:36.590 --> 00:10:38.180
we'll see some consistency.

00:10:38.180 --> 00:10:40.210
I'm sure we do.

00:10:40.210 --> 00:10:50.800
It's on the program Thread one Happel.

00:10:50.800 --> 00:10:53.550
That's what we had passed.

00:10:53.550 --> 00:10:59.880
That's what we have in that read one dot txt and threat to banana pretty well and good.

00:10:59.880 --> 00:11:05.940
Now you have seen a slight improvement in performance.

00:11:05.940 --> 00:11:09.480
We have got it done in 11 2nd sources 12 seconds.

00:11:09.480 --> 00:11:11.810
In this particular example,

00:11:11.810 --> 00:11:15.170
you may not be ableto see big performance difference,

00:11:15.170 --> 00:11:17.930
but in high end up locations,

00:11:17.930 --> 00:11:21.600
you would definitely see a big performance difference.

00:11:21.600 --> 00:11:27.460
You don't want the entire court to be synchronized,

00:11:27.460 --> 00:11:30.980
so you can only single as critical sections.

00:11:30.980 --> 00:11:37.240
Now let's talk about what we're passing in here.

00:11:37.240 --> 00:11:39.170
Inside this parentis is,

00:11:39.170 --> 00:11:45.040
Let's say you have another section off court,

00:11:45.040 --> 00:11:47.190
which is also critical section,

00:11:47.190 --> 00:11:50.590
that you want to allow only one threat to execute at a time.

00:11:50.590 --> 00:11:54.930
But it's an independent section.

00:11:54.930 --> 00:11:56.360
Let me show you what I mean.

00:11:56.360 --> 00:12:04.500
Let's say I wanted to call this display method from here and for that went to create an

00:12:04.500 --> 00:12:05.850
object off this class.

00:12:05.850 --> 00:12:07.550
Let's do that.

00:12:07.550 --> 00:12:11.750
That's call this S E or whatever you want to call it.

00:12:11.750 --> 00:12:14.050
Example.

00:12:14.050 --> 00:12:16.880
Now,

00:12:16.880 --> 00:12:18.610
based on our previous example,

00:12:18.610 --> 00:12:23.350
we're seeing that we cannot run this piece off court simultaneously.

00:12:23.350 --> 00:12:28.950
But let's I want it to call that matin display,

00:12:28.950 --> 00:12:34.150
and I'm going to pass the exact same argument for the sake off this example.

00:12:34.150 --> 00:12:36.900
No,

00:12:36.900 --> 00:12:40.780
Since this is also a critical piece off court,

00:12:40.780 --> 00:12:43.570
I'm going to do control.

00:12:43.570 --> 00:12:46.050
X and control we here inside the synchronized block.

00:12:46.050 --> 00:12:48.130
But we have a problem here.

00:12:48.130 --> 00:12:52.400
This section and this section are completely independent.

00:12:52.400 --> 00:12:57.110
We don't want this section off court to be waiting until this section.

00:12:57.110 --> 00:12:58.860
So what we can do?

00:12:58.860 --> 00:13:04.830
We can make it part off another section which,

00:13:04.830 --> 00:13:05.670
as you can guess,

00:13:05.670 --> 00:13:07.050
a synchronized block.

00:13:07.050 --> 00:13:11.110
And instead of saying this,

00:13:11.110 --> 00:13:15.800
I'm going to past this object his essay,

00:13:15.800 --> 00:13:17.370
which is an object off this.

00:13:17.370 --> 00:13:19.290
Now,

00:13:19.290 --> 00:13:20.440
if I run the program,

00:13:20.440 --> 00:13:26.650
only one thread is going toe is going to be a load in both these sections.

00:13:26.650 --> 00:13:32.640
But these two sections can now be executed simultaneously.

00:13:32.640 --> 00:13:34.350
Let's run the program.

00:13:34.350 --> 00:13:53.110
So we're starting to see the argument that were passed.

00:13:53.110 --> 00:13:57.450
Let me pause the video and get back once we get the full result.

00:13:57.450 --> 00:14:01.610
So ultimately,

00:14:01.610 --> 00:14:02.910
if you look at the results,

00:14:02.910 --> 00:14:06.350
there are actually indeed running simultaneously.

00:14:06.350 --> 00:14:08.110
Basically,

00:14:08.110 --> 00:14:14.200
whatever the object that you send in here is sort off acting like an identifiable for this

00:14:14.200 --> 00:14:16.160
section off synchronized cold.

00:14:16.160 --> 00:14:19.380
But if you observe still,

00:14:19.380 --> 00:14:23.610
we are dealing with only one lakh for this object.

00:14:23.610 --> 00:14:28.470
There was only one lock and is grabbed by some thread.

00:14:28.470 --> 00:14:32.520
And in here the thread needs to grab the lock off.

00:14:32.520 --> 00:14:36.530
Whatever the object that we give here and thats way,

00:14:36.530 --> 00:14:43.730
these two sections can be executor simultaneously because they're two different locks from

00:14:43.730 --> 00:14:45.380
two different objects.

00:14:45.380 --> 00:14:50.650
But let's say somewhere else in the cord you have another section,

00:14:50.650 --> 00:14:54.860
and you have this has a keyword,

00:14:54.860 --> 00:15:01.710
which you have already used elsewhere in another synchronized block than in this case.

00:15:01.710 --> 00:15:09.020
No to threats can enter inside and execute this section and this section simultaneously

00:15:09.020 --> 00:15:13.400
because only one thread can acquire Lock off this object.

00:15:13.400 --> 00:15:19.520
So when any of the thread is executing a drove the sections with the same object,

00:15:19.520 --> 00:15:19.850
then,

00:15:19.850 --> 00:15:20.060
no,

00:15:20.060 --> 00:15:23.040
the trip can enter inside the synchronized block,

00:15:23.040 --> 00:15:27.040
which is having this as an argument home.

00:15:27.040 --> 00:15:27.940
That's really clear.

00:15:27.940 --> 00:15:34.250
That's under those changes and save the file.

00:15:34.250 --> 00:15:40.590
Let's continue in our next video.

