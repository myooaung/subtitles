WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.600
Okay.

00:00:01.600 --> 00:00:02.410
In this example,

00:00:02.410 --> 00:00:06.200
we're gonna talk about something called the Lazy Evaluation.

00:00:06.200 --> 00:00:12.300
Which means you don't want to perform intermediate operations unless there is a real need

00:00:12.300 --> 00:00:12.650
for it.

00:00:12.650 --> 00:00:17.500
In this example were performing filter and map operations,

00:00:17.500 --> 00:00:21.050
but we're not doing anything with the result in stream.

00:00:21.050 --> 00:00:26.950
So why should the job virtual machine perform filter and map operations on the stream?

00:00:26.950 --> 00:00:29.460
That's unnecessary performance overhead,

00:00:29.460 --> 00:00:29.870
Right?

00:00:29.870 --> 00:00:34.360
So went to perform some kind off a terminal operation.

00:00:34.360 --> 00:00:39.930
Only then will the filter and map operations be applied on the stream,

00:00:39.930 --> 00:00:40.760
for example,

00:00:40.760 --> 00:00:47.760
we can do count or let me just prove my point by running this program.

00:00:47.760 --> 00:00:49.900
Where is the output that you're expecting?

00:00:49.900 --> 00:00:51.190
Obviously nothing.

00:00:51.190 --> 00:00:53.200
Because we don't have a system doubt,

00:00:53.200 --> 00:00:58.170
outdoor parental and method are we're not converting this stream into a list and then

00:00:58.170 --> 00:00:58.890
printing it.

00:00:58.890 --> 00:01:00.410
Anything of that sort.

00:01:00.410 --> 00:01:02.920
For the purpose of debugging,

00:01:02.920 --> 00:01:06.660
we can make use off a method called Peak.

00:01:06.660 --> 00:01:08.950
Let me just show you what it is.

00:01:08.950 --> 00:01:10.950
Hold a peak.

00:01:10.950 --> 00:01:15.350
I went to pass in the element,

00:01:15.350 --> 00:01:17.750
and I'm going to do something in here.

00:01:17.750 --> 00:01:19.120
In this case,

00:01:19.120 --> 00:01:23.750
it's system dot out dot print Ellen,

00:01:23.750 --> 00:01:29.380
and then I'm just simply going to print that element so the peak matter will actually help

00:01:29.380 --> 00:01:29.840
us.

00:01:29.840 --> 00:01:35.890
Executor set off instructions on the current element that is in the stream so that it will

00:01:35.890 --> 00:01:37.400
help you in debugging.

00:01:37.400 --> 00:01:39.780
You'll see the peak matter in action in a while.

00:01:39.780 --> 00:01:45.450
Let's put some kind off meaningful description in here.

00:01:45.450 --> 00:01:51.150
Filter Helaman.

00:01:51.150 --> 00:02:00.350
I'm going to copy the same instruction after the map as well,

00:02:00.350 --> 00:02:07.640
like so mapped element now as the stream goes down the line,

00:02:07.640 --> 00:02:10.220
the peak measurable print element.

00:02:10.220 --> 00:02:11.160
Now,

00:02:11.160 --> 00:02:12.420
if you're on the program,

00:02:12.420 --> 00:02:14.630
it's not going to print anything.

00:02:14.630 --> 00:02:19.730
That's because the filter and map functions are not applied on the stream yet.

00:02:19.730 --> 00:02:23.570
Because guess what?

00:02:23.570 --> 00:02:25.700
We don't have a terminal operation.

00:02:25.700 --> 00:02:32.140
Let's perform some kind of a terminal operation,

00:02:32.140 --> 00:02:34.450
something like a count.

00:02:34.450 --> 00:02:35.280
Now,

00:02:35.280 --> 00:02:36.460
if you run the program,

00:02:36.460 --> 00:02:38.210
he would see that.

00:02:38.210 --> 00:02:41.050
But from this peak method,

00:02:41.050 --> 00:02:45.050
this is called lazy evaluation,

00:02:45.050 --> 00:02:51.160
which means the intimate operations are going to be lazy and they don't perform any kind of

00:02:51.160 --> 00:02:57.270
operations on the streams unless there is a call to do so they call in.

00:02:57.270 --> 00:02:59.260
Here is nothing but a terminal operation.

00:02:59.260 --> 00:02:59.950
Well,

00:02:59.950 --> 00:03:00.360
actually,

00:03:00.360 --> 00:03:04.190
I should also mention that while the stream is going down the line.

00:03:04.190 --> 00:03:08.280
I don't mean to say that filter will be performed first,

00:03:08.280 --> 00:03:13.350
and the list off filter element will then be fed into the map method.

00:03:13.350 --> 00:03:18.490
And then it will be passed on to the commenter to count the number of elements That's not

00:03:18.490 --> 00:03:20.290
went of the case holder.

00:03:20.290 --> 00:03:22.180
The stream is going down the line.

00:03:22.180 --> 00:03:26.150
The matter called will actually go from bottom to top.

00:03:26.150 --> 00:03:31.180
The cold weather will actually requests the map method to get the elements to be counted,

00:03:31.180 --> 00:03:33.420
and the map matter will,

00:03:33.420 --> 00:03:36.410
in turn will request for elements,

00:03:36.410 --> 00:03:39.150
which will start with letter B.

00:03:39.150 --> 00:03:45.740
The filter matter will find the first element and is going to return it back to the map

00:03:45.740 --> 00:03:48.330
method the map matter bill.

00:03:48.330 --> 00:03:55.010
Apply dysfunction on that element and forward it to the convent it since the stream hasn't

00:03:55.010 --> 00:03:55.760
ended yet,

00:03:55.760 --> 00:04:02.730
The comment that is again going to do the same requesting for more elements on the call

00:04:02.730 --> 00:04:05.080
goes back to the filter matter.

00:04:05.080 --> 00:04:06.170
The filter,

00:04:06.170 --> 00:04:07.260
measurable again,

00:04:07.260 --> 00:04:09.250
comes across with this element.

00:04:09.250 --> 00:04:11.380
What satisfies this condition,

00:04:11.380 --> 00:04:18.310
which is also the last element to president in the stream so element is returned back to

00:04:18.310 --> 00:04:19.150
the map method.

00:04:19.150 --> 00:04:20.580
The map,

00:04:20.580 --> 00:04:20.990
though,

00:04:20.990 --> 00:04:22.290
returned to the corn method.

00:04:22.290 --> 00:04:23.100
Ultimately,

00:04:23.100 --> 00:04:27.650
we get the amount up elements that are left in the stream.

00:04:27.650 --> 00:04:29.200
I hope that's clear.

00:04:29.200 --> 00:04:37.080
One of the other reasons why intermediate operations has to be lazy can be explained with

00:04:37.080 --> 00:04:38.010
the court in here.

00:04:38.010 --> 00:04:41.080
That's just uncommon that recommending this out.

00:04:41.080 --> 00:04:49.450
So in here we're trying to generate an infinite stream using the I tripped method.

00:04:49.450 --> 00:04:52.260
If the stream is not lazy,

00:04:52.260 --> 00:04:59.450
then this instruction should keep on creating the stream forever without ever reaching.

00:04:59.450 --> 00:05:00.470
Luckily,

00:05:00.470 --> 00:05:02.070
stream is lazy,

00:05:02.070 --> 00:05:05.450
so this program doesn't go forever.

00:05:05.450 --> 00:05:07.760
Of course,

00:05:07.760 --> 00:05:08.780
nothing will get printed.

00:05:08.780 --> 00:05:20.630
We can use for each method to print element that's on the program.

00:05:20.630 --> 00:05:22.800
There it is,

00:05:22.800 --> 00:05:24.130
all right,

00:05:24.130 --> 00:05:26.400
that's it on lazy evaluation.

00:05:26.400 --> 00:05:27.460
But wait,

00:05:27.460 --> 00:05:32.330
maybe I just want to quickly point out that you cannot reuse a stream.

00:05:32.330 --> 00:05:34.700
Streams are meant to be used only once.

00:05:34.700 --> 00:05:36.080
In this case,

00:05:36.080 --> 00:05:37.900
we got an indigenous stream,

00:05:37.900 --> 00:05:40.850
and we have used it once already.

00:05:40.850 --> 00:05:47.560
We cannot use the same stream again to try to get the elements,

00:05:47.560 --> 00:05:48.210
for example,

00:05:48.210 --> 00:05:49.550
let's say count.

00:05:49.550 --> 00:05:53.450
There's going to give an exception,

00:05:53.450 --> 00:06:01.350
and that makes sense because if you remember in our example where we're taking the water

00:06:01.350 --> 00:06:01.540
from.

00:06:01.540 --> 00:06:02.400
There is a wire.

00:06:02.400 --> 00:06:08.190
Once we take out all the water present in the reserve wire and purified them we got the

00:06:08.190 --> 00:06:08.740
result.

00:06:08.740 --> 00:06:09.910
The purified water.

00:06:09.910 --> 00:06:11.880
But there is no water left in.

00:06:11.880 --> 00:06:13.200
There is a war to take,

00:06:13.200 --> 00:06:15.260
so we cannot reuse it.

00:06:15.260 --> 00:06:19.850
It's only for one time purpose all adopted on this video.

00:06:19.850 --> 00:06:21.450
See you in the next radio.

