WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.325
Let's talk about JSON, which is one of the main features introduced in Java version line.

00:00:05.325 --> 00:00:08.205
You can think of gestural as a fun little toy,

00:00:08.205 --> 00:00:13.200
or rather a professional toy that I begin a Java programmer can play with.

00:00:13.200 --> 00:00:15.255
Well, what do I mean by that?

00:00:15.255 --> 00:00:20.470
Day shall is actually a command-line tool which will read the input from the user.

00:00:20.470 --> 00:00:26.119
And the input that a user can enter can be any valid Java expression,

00:00:26.119 --> 00:00:29.180
something like integer x equals ten plus five.

00:00:29.180 --> 00:00:30.995
The same would be executed,

00:00:30.995 --> 00:00:33.260
meaning that it would calculate the sum of

00:00:33.260 --> 00:00:37.400
ten plus five and stored the value inside the variable x.

00:00:37.400 --> 00:00:42.604
And same will be printed on the console as x equals 15,

00:00:42.604 --> 00:00:45.110
which will then be seen by the user.

00:00:45.110 --> 00:00:48.395
And the same process would be repeated again and again.

00:00:48.395 --> 00:00:51.470
Which means it's going to allow the user to enter something.

00:00:51.470 --> 00:00:56.284
Once again, it's going to execute it and print some results.

00:00:56.284 --> 00:00:59.585
So that's Read, execute, print loop,

00:00:59.585 --> 00:01:04.420
read execute print loop, or simply rapper.

00:01:04.420 --> 00:01:07.150
But what's the significance of this?

00:01:07.150 --> 00:01:09.730
Well, it is to paint a good first impression on

00:01:09.730 --> 00:01:14.275
Java programming for someone who is getting started to learn Java.

00:01:14.275 --> 00:01:16.510
Let me explain it with an example.

00:01:16.510 --> 00:01:20.140
Say that you are a beginner programmer and you've

00:01:20.140 --> 00:01:24.130
heard a lot about Java programming being one of the best languages to ever exist.

00:01:24.130 --> 00:01:26.215
You're pretty excited to learn Java.

00:01:26.215 --> 00:01:28.420
And so you just wanted to try with

00:01:28.420 --> 00:01:32.410
a very simple application which has probably a Hello World application.

00:01:32.410 --> 00:01:36.580
So for that, what you have to do is you need to create

00:01:36.580 --> 00:01:41.200
a class and then introduce a method with the signature public,

00:01:41.200 --> 00:01:43.405
static, void, main, String args.

00:01:43.405 --> 00:01:46.520
And only then you actually introduce

00:01:46.520 --> 00:01:50.675
a statement that will print the message that you wanted to print.

00:01:50.675 --> 00:01:53.825
And it's not enough that you write the source code.

00:01:53.825 --> 00:01:56.555
You actually need to create a Java file,

00:01:56.555 --> 00:01:59.570
copy that source code inside the Java file,

00:01:59.570 --> 00:02:03.335
and compile the Java file so that you get the byte code.

00:02:03.335 --> 00:02:09.230
And then you run that class file only after which you will see the results.

00:02:09.230 --> 00:02:10.880
Now think from the prospect to offer

00:02:10.880 --> 00:02:14.629
complete beginner who doesn't know anything about programming.

00:02:14.629 --> 00:02:17.495
And he wanted to learn Java.

00:02:17.495 --> 00:02:21.650
This is surely going to create a bad impression because he wanted

00:02:21.650 --> 00:02:25.865
to experiment with Java by just printing a simple helloworld message,

00:02:25.865 --> 00:02:27.665
which is this spot.

00:02:27.665 --> 00:02:30.605
But he's also required to pay attention to a lot of

00:02:30.605 --> 00:02:34.265
other things which might take a while to understand.

00:02:34.265 --> 00:02:36.110
Like they will be having questions.

00:02:36.110 --> 00:02:37.910
What is public, what is static?

00:02:37.910 --> 00:02:43.850
What is wide? Why the method name has to be put the name main and water string box,

00:02:43.850 --> 00:02:46.385
where are they coming from and what are they doing?

00:02:46.385 --> 00:02:49.489
And why is this called a method in first-place,

00:02:49.489 --> 00:02:52.369
not a function like another programming languages.

00:02:52.369 --> 00:02:56.180
So they get all these questions and ultimately they come to conclusion

00:02:56.180 --> 00:03:01.010
that Java is a very difficult language to learn when it actually isn't.

00:03:01.010 --> 00:03:03.050
So j shall, will come in to rescue.

00:03:03.050 --> 00:03:05.480
In this case, it will allow them to enter

00:03:05.480 --> 00:03:08.780
some Java expressions and instantly see the results without

00:03:08.780 --> 00:03:15.320
having to introduce the class or main method or even compile the Java file, et cetera.

00:03:15.320 --> 00:03:18.185
And when they see results based on what then,

00:03:18.185 --> 00:03:22.069
that will give them some confidence that they can learn Java.

00:03:22.069 --> 00:03:24.125
So digital would actually do that.

00:03:24.125 --> 00:03:25.400
First good impression about

00:03:25.400 --> 00:03:28.940
Java programming for someone who is getting started with Java.

00:03:28.940 --> 00:03:33.965
So that it will motivate them to learn more and execute better Java code.

00:03:33.965 --> 00:03:36.950
It's like if you make a good first impression with your crush,

00:03:36.950 --> 00:03:39.065
then your journey would be smooth.

00:03:39.065 --> 00:03:42.785
Otherwise, if you make a bad impression in the very first go,

00:03:42.785 --> 00:03:45.845
then obviously, no matter how hard you try,

00:03:45.845 --> 00:03:48.275
everything would look very complicated.

00:03:48.275 --> 00:03:49.925
But that being said,

00:03:49.925 --> 00:03:53.615
you might be coming to conclusion that j shall is not a tool for

00:03:53.615 --> 00:03:57.560
somebody who is experienced or somebody who already know Java programming.

00:03:57.560 --> 00:03:59.135
Well, that's not the case.

00:03:59.135 --> 00:04:01.025
I mean, let me try to give you a,

00:04:01.025 --> 00:04:05.615
a use case where tissue can be useful for professionals.

00:04:05.615 --> 00:04:08.600
Imagine that you are working on real-time project

00:04:08.600 --> 00:04:12.440
and you're required to validate the user entered form.

00:04:12.440 --> 00:04:17.510
One of the things that you might do is to check the length of the person name.

00:04:17.510 --> 00:04:22.070
And you wanted to restrict to only ten characters.

00:04:22.070 --> 00:04:25.400
You're probably going to use some of the methods available in string,

00:04:25.400 --> 00:04:31.340
like the length method that would give you the length of a given string.

00:04:31.340 --> 00:04:37.640
Now, you don't need the length method would consider whitespace as a character or not.

00:04:37.640 --> 00:04:39.215
And if it does,

00:04:39.215 --> 00:04:42.860
you don't know if the length method would consider multiple whitespaces

00:04:42.860 --> 00:04:47.135
as a single whitespace or multiple whitespace characters.

00:04:47.135 --> 00:04:49.055
In order to figure this out,

00:04:49.055 --> 00:04:53.705
you would either need to write a test case that will test multiple scenarios.

00:04:53.705 --> 00:04:56.165
And this is definitely a lengthy process.

00:04:56.165 --> 00:04:57.995
A better approach, however,

00:04:57.995 --> 00:05:00.320
which are usually used to do before j shall,

00:05:00.320 --> 00:05:02.765
is to create a Java file,

00:05:02.765 --> 00:05:05.615
have sample code with bunch of variables,

00:05:05.615 --> 00:05:10.070
and experiment with the string manipulation methods.

00:05:10.070 --> 00:05:13.325
And save result is as expected.

00:05:13.325 --> 00:05:17.720
But that still takes a bit of an effort because inside Eclipse,

00:05:17.720 --> 00:05:19.475
if you wanted to run Java program,

00:05:19.475 --> 00:05:21.980
you have to actually create a Java project.

00:05:21.980 --> 00:05:24.290
Once you do that, you have to again

00:05:24.290 --> 00:05:27.035
introduce a class file with public static, void, main.

00:05:27.035 --> 00:05:31.265
And only then you can experiment with your code with j shall however,

00:05:31.265 --> 00:05:34.400
you can just execute this statement alone

00:05:34.400 --> 00:05:37.715
on the console and you'd get the results instantly.

00:05:37.715 --> 00:05:41.060
And you can figure out how the length method is working.

00:05:41.060 --> 00:05:45.275
This definitely is a lifesaver at times.

00:05:45.275 --> 00:05:50.250
Next, we are going to take a look at how we can play with our professional toy.
