WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.910
one of the primary reasons why department that's are introduced in Java I ate is to let the

00:00:06.910 --> 00:00:11.730
FBI dollar perf make use off the benefits that land expressions offer.

00:00:11.730 --> 00:00:14.720
Let me explain you water mean with an example.

00:00:14.720 --> 00:00:15.880
In this example,

00:00:15.880 --> 00:00:19.100
I've just created an airy with 10 elements,

00:00:19.100 --> 00:00:22.150
and they're all are off type integer,

00:00:22.150 --> 00:00:25.200
and I've just converted that area as a list,

00:00:25.200 --> 00:00:29.180
and I've stored all elements in this list in here.

00:00:29.180 --> 00:00:31.720
I'm just looking through it in their element,

00:00:31.720 --> 00:00:34.550
and I'm finding the product off each element by itself.

00:00:34.550 --> 00:00:38.800
So the first and the controller enters inside the slope,

00:00:38.800 --> 00:00:41.880
it's going to be one multiplied by one.

00:00:41.880 --> 00:00:45.550
The second time it enters its going to be the second element,

00:00:45.550 --> 00:00:48.760
which would be two multiplied by two.

00:00:48.760 --> 00:00:49.950
Similarly,

00:00:49.950 --> 00:00:54.950
we're going to find the product for each and every element in this list that's on the

00:00:54.950 --> 00:00:56.850
program and see how the output looks.

00:00:56.850 --> 00:01:00.450
Now let me write the same section off court,

00:01:00.450 --> 00:01:04.530
which I've just selected differently using a lambda expression,

00:01:04.530 --> 00:01:12.750
and for this I'm going to make use off a mattered that is in the list interface that's

00:01:12.750 --> 00:01:14.190
called Forage,

00:01:14.190 --> 00:01:18.650
and if you notice it's going to accept one argument,

00:01:18.650 --> 00:01:22.610
which is consumer If you remember,

00:01:22.610 --> 00:01:29.390
Consumer is a function interface part off the function package who had already talked about

00:01:29.390 --> 00:01:30.190
it earlier.

00:01:30.190 --> 00:01:32.850
Here goes the land expression.

00:01:32.850 --> 00:01:39.910
So for each ever meant what we want to do is exact same thing.

00:01:39.910 --> 00:01:50.950
What we have here e multiplied by E that's coming discord and run the program.

00:01:50.950 --> 00:01:54.870
The output is going to look similar.

00:01:54.870 --> 00:01:59.670
So what is the difference between this coat and this code?

00:01:59.670 --> 00:02:01.330
Of course,

00:02:01.330 --> 00:02:03.470
this took less number off lines,

00:02:03.470 --> 00:02:08.580
but there is one significant difference between these two in here.

00:02:08.580 --> 00:02:10.210
As a programmer,

00:02:10.210 --> 00:02:16.620
you need to tell the compiler how to look through these elements and what needs to be done

00:02:16.620 --> 00:02:17.950
on each element.

00:02:17.950 --> 00:02:24.610
But whereas in here you're not telling the compiler how to look through the elements.

00:02:24.610 --> 00:02:29.650
But you're just focused on what needs to be done on each element.

00:02:29.650 --> 00:02:31.550
There is a difference.

00:02:31.550 --> 00:02:33.060
And again,

00:02:33.060 --> 00:02:35.370
this is a feature of functional programming.

00:02:35.370 --> 00:02:38.150
You would focus more on what needs to be done,

00:02:38.150 --> 00:02:40.470
then how it needs to be done now,

00:02:40.470 --> 00:02:45.470
since in the scarce you're not telling the compiler how to look through each of the

00:02:45.470 --> 00:02:49.180
elements as it is taken care by the forage method.

00:02:49.180 --> 00:02:53.270
This is called internal I traitor.

00:02:53.270 --> 00:02:59.410
But whereas in here you're explicitly telling the compiler how to look through each element

00:02:59.410 --> 00:02:59.410
.

00:02:59.410 --> 00:03:02.430
So this is called external high traitor.

00:03:02.430 --> 00:03:02.910
Also,

00:03:02.910 --> 00:03:06.260
you may argue that you can use for each loop in here.

00:03:06.260 --> 00:03:07.070
Still,

00:03:07.070 --> 00:03:12.110
you're telling the compiler how to look through each one of these elements.

00:03:12.110 --> 00:03:13.000
For example,

00:03:13.000 --> 00:03:22.750
he could say for each element off type integer in the list you want to do,

00:03:22.750 --> 00:03:24.990
he multiplied by E.

00:03:24.990 --> 00:03:28.600
So this is still an external high traitor.

00:03:28.600 --> 00:03:30.310
So whenever possible,

00:03:30.310 --> 00:03:32.740
always use internal I traitor.

00:03:32.740 --> 00:03:37.330
But if you want to have control on how to look through each element,

00:03:37.330 --> 00:03:38.440
for example,

00:03:38.440 --> 00:03:42.350
let's say you wanted to use break statement when a condition is met.

00:03:42.350 --> 00:03:43.880
In that case,

00:03:43.880 --> 00:03:49.420
it would better use an external I traitor like full loop or while up.

00:03:49.420 --> 00:03:56.850
Also notice that the forage matter was not defined in the list interface before Java eight

00:03:56.850 --> 00:03:56.850
.

00:03:56.850 --> 00:03:59.510
This method was introduced in Java.

00:03:59.510 --> 00:04:02.660
Eight Just digitalize the Lambda expression.

00:04:02.660 --> 00:04:06.440
So does that mean that the implementations off the list int office,

00:04:06.440 --> 00:04:10.950
for example medalist has to provide implementation for that method?

00:04:10.950 --> 00:04:12.650
Not necessary?

00:04:12.650 --> 00:04:18.730
The default implementation was provided by the list interface itself by using another

00:04:18.730 --> 00:04:21.990
feature off Java eight called Deport Methods.

00:04:21.990 --> 00:04:25.550
If you click this matter by pressing control,

00:04:25.550 --> 00:04:33.360
you would notice that this method is a deep old method and is part off the I terrible class

00:04:33.360 --> 00:04:33.360
.

00:04:33.360 --> 00:04:37.960
And we have already talked about default methods in our previous chapter.

00:04:37.960 --> 00:04:39.790
Alright,

00:04:39.790 --> 00:04:41.050
that's it for this video.

00:04:41.050 --> 00:04:43.300
See you in my next video.

