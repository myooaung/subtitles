WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.400
in this video,

00:00:01.400 --> 00:00:08.150
we're gonna talk about immutable objects and how it's going to add value to multi traded

00:00:08.150 --> 00:00:12.270
programming we already know about string.

00:00:12.270 --> 00:00:14.670
History is immutable,

00:00:14.670 --> 00:00:17.250
meaning once the string is created,

00:00:17.250 --> 00:00:19.140
nobody can ever change it,

00:00:19.140 --> 00:00:23.290
which makes it qualify for usage in multitude programming.

00:00:23.290 --> 00:00:26.840
No matter how many threats are accessing a string variable,

00:00:26.840 --> 00:00:30.060
none of those threats can actually change the string.

00:00:30.060 --> 00:00:31.640
In other words,

00:00:31.640 --> 00:00:34.650
no threat can actually change the state off string object.

00:00:34.650 --> 00:00:37.040
So just like a string,

00:00:37.040 --> 00:00:41.350
we can actually create our own immutable objects in the scarce.

00:00:41.350 --> 00:00:44.290
The person object in here is immutable,

00:00:44.290 --> 00:00:46.820
and for that you need to follow.

00:00:46.820 --> 00:00:49.890
Certain guidelines were creating the person class.

00:00:49.890 --> 00:00:51.950
First of all,

00:00:51.950 --> 00:00:54.000
you need to make the class final,

00:00:54.000 --> 00:00:57.940
which will make this class non extendable.

00:00:57.940 --> 00:01:00.590
That means you cannot create another class,

00:01:00.590 --> 00:01:04.050
extending the person class and extend the behavior off it.

00:01:04.050 --> 00:01:06.210
You're going to get a combat a mirror,

00:01:06.210 --> 00:01:09.540
so we're preventing overriding.

00:01:09.540 --> 00:01:12.000
There's no all writing off behavior.

00:01:12.000 --> 00:01:12.960
Also,

00:01:12.960 --> 00:01:20.390
all the fields that you define in here make sure their final by making sell it could only

00:01:20.390 --> 00:01:22.690
have a value assigned to this variable,

00:01:22.690 --> 00:01:23.290
right?

00:01:23.290 --> 00:01:24.850
When the time you create the object,

00:01:24.850 --> 00:01:27.550
and that's what we're doing in this constructor.

00:01:27.550 --> 00:01:30.700
But ascending have value to it.

00:01:30.700 --> 00:01:31.990
And if you try toe,

00:01:31.990 --> 00:01:36.100
assign some kind of a value to this variable again,

00:01:36.100 --> 00:01:38.070
it's going to throw a combat a mirror.

00:01:38.070 --> 00:01:42.220
So having a settlement it for this variable doesn't make sense.

00:01:42.220 --> 00:01:47.710
Let me just some common this piece off court and you'll see a combat a mirror saying the

00:01:47.710 --> 00:01:51.800
final field person dot name cannot be assigned.

00:01:51.800 --> 00:01:53.490
And that's very obvious.

00:01:53.490 --> 00:01:59.150
So we can only have a getter which will get the name.

00:01:59.150 --> 00:02:04.910
And in here we have created an instance of the class,

00:02:04.910 --> 00:02:07.850
which is an immutable object.

00:02:07.850 --> 00:02:13.510
He cannot change some name to something else because there is no provision to do so.

00:02:13.510 --> 00:02:20.400
You cannot have something like object dot set Very bull or whatsoever were not allowing it

00:02:20.400 --> 00:02:20.400
.

00:02:20.400 --> 00:02:21.220
In fact,

00:02:21.220 --> 00:02:22.590
compel er is complaining.

00:02:22.590 --> 00:02:23.960
Also,

00:02:23.960 --> 00:02:25.900
let's talk about string,

00:02:25.900 --> 00:02:29.250
buffer and string builder classes.

00:02:29.250 --> 00:02:32.060
We know that string is immutable,

00:02:32.060 --> 00:02:34.980
but if you want a string that is mutable,

00:02:34.980 --> 00:02:38.950
then you can use string buffer just like silk,

00:02:38.950 --> 00:02:42.990
and you can use the methods inside it.

00:02:42.990 --> 00:02:43.730
In this case,

00:02:43.730 --> 00:02:48.150
I'm using the app in method to happen the string to the existing string,

00:02:48.150 --> 00:02:53.390
and this will actually modify the original strength.

00:02:53.390 --> 00:02:55.880
This is mutable in this case,

00:02:55.880 --> 00:02:58.350
and if I do sis out,

00:02:58.350 --> 00:03:01.750
you're going to see the combination off these two strengths.

00:03:01.750 --> 00:03:04.440
But that's not going to the case with string.

00:03:04.440 --> 00:03:06.700
Have created a string object,

00:03:06.700 --> 00:03:12.410
and I'm using the cone cat method off the string to can't get this string.

00:03:12.410 --> 00:03:19.600
And when I do since out str this is only going to print this piece off string.

00:03:19.600 --> 00:03:22.460
That's because spring is immutable.

00:03:22.460 --> 00:03:24.180
Let's run the program.

00:03:24.180 --> 00:03:28.520
There it is.

00:03:28.520 --> 00:03:36.270
Now you may ask me when the Houston buffer over a string Well,

00:03:36.270 --> 00:03:42.150
the string buffer is actually going to make use off buffering mechanism to perform all the

00:03:42.150 --> 00:03:44.690
string operations more efficiently.

00:03:44.690 --> 00:03:50.450
So string Buffer will have some performance benefit compared to using a string.

00:03:50.450 --> 00:03:54.100
But I said string buffer is mutable.

00:03:54.100 --> 00:03:58.350
So should be you String buffer in multi treated programming,

00:03:58.350 --> 00:04:00.580
The answer is still yes,

00:04:00.580 --> 00:04:03.550
all the string buffer is mutable.

00:04:03.550 --> 00:04:07.760
All the methods inside the string buffer are synchronized.

00:04:07.760 --> 00:04:09.680
If you go deep into it,

00:04:09.680 --> 00:04:14.700
he can see the word synchronized in each and every method.

00:04:14.700 --> 00:04:17.750
So this is threat safe,

00:04:17.750 --> 00:04:19.430
But that being said,

00:04:19.430 --> 00:04:21.570
when you have all the metadata synchronized,

00:04:21.570 --> 00:04:27.500
that's going to cost us some performance because at any given point of time,

00:04:27.500 --> 00:04:30.950
only one thread can enter inside the synchronize block,

00:04:30.950 --> 00:04:33.350
but bears on your design,

00:04:33.350 --> 00:04:35.350
you need to make your choice.

00:04:35.350 --> 00:04:38.670
We also have something called string Builder.

00:04:38.670 --> 00:04:42.600
Let's have it in here as well.

00:04:42.600 --> 00:04:47.890
It's going to work the same day that these sting buffer works.

00:04:47.890 --> 00:04:53.220
But the methods inside the string builder are not synchronised,

00:04:53.220 --> 00:04:55.050
which means it's not thread safe.

00:04:55.050 --> 00:04:59.750
When you have only one single thread or very limited set off threats,

00:04:59.750 --> 00:05:03.860
then you can use string builder over this string buffer.

00:05:03.860 --> 00:05:08.190
Let's run the program and you would pretty much see the same result.

00:05:08.190 --> 00:05:11.590
See you in the next video.

