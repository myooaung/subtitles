WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.440
in this video,

00:00:01.440 --> 00:00:04.350
we're gonna talk about threat priorities.

00:00:04.350 --> 00:00:10.100
That thread prior to defines would spread will take priority over the other.

00:00:10.100 --> 00:00:16.100
The treads with higher priority will have the higher chances off executing.

00:00:16.100 --> 00:00:16.650
First,

00:00:16.650 --> 00:00:23.660
we can have the priorities set between the range 1 to 10 with one being the low priority

00:00:23.660 --> 00:00:26.350
and 10 being the highest priority.

00:00:26.350 --> 00:00:31.450
And the default priority for any thread is five.

00:00:31.450 --> 00:00:32.750
Now,

00:00:32.750 --> 00:00:36.280
let's see how we can set the priorities off all these three trends.

00:00:36.280 --> 00:00:39.560
I have the same example as previous,

00:00:39.560 --> 00:00:46.640
just that I don't have those joint statements you can make use off the method set priority

00:00:46.640 --> 00:00:49.750
to set the priority for a particular threat.

00:00:49.750 --> 00:00:53.450
And I'm going to do the same.

00:00:53.450 --> 00:00:56.700
So before you started the thread,

00:00:56.700 --> 00:01:04.190
we can said the priority said priority,

00:01:04.190 --> 00:01:09.650
and you can give and numerical within the range 1 to 10.

00:01:09.650 --> 00:01:12.440
If you do any value that is not within that range,

00:01:12.440 --> 00:01:14.310
then you would get an exception,

00:01:14.310 --> 00:01:22.550
and we don't want that he could Ada Gill and number like 10 one or five.

00:01:22.550 --> 00:01:27.350
Or you can make use off the constants that are defined inside the thread class.

00:01:27.350 --> 00:01:32.230
The Max priority will have the value.

00:01:32.230 --> 00:01:32.720
10.

00:01:32.720 --> 00:01:36.660
The main priority will have the value zero,

00:01:36.660 --> 00:01:40.170
and the gnome priority will have the value.

00:01:40.170 --> 00:01:40.630
Fine.

00:01:40.630 --> 00:01:43.850
So let's make use off these.

00:01:43.850 --> 00:02:01.180
I would like to give you thread t one the main priority and and for thread t to I'd like to

00:02:01.180 --> 00:02:07.390
give Max parity and for thread,

00:02:07.390 --> 00:02:08.450
t three.

00:02:08.450 --> 00:02:12.300
I'll give the norm priority.

00:02:12.300 --> 00:02:14.480
If I run this program,

00:02:14.480 --> 00:02:19.880
you might think that the Threat T two will get executed first because it's with the max

00:02:19.880 --> 00:02:23.080
priority and then t 300 t one.

00:02:23.080 --> 00:02:25.350
But that's not going to be the case.

00:02:25.350 --> 00:02:28.610
We may see different sequence every time we run,

00:02:28.610 --> 00:02:30.200
and I'll tell you why.

00:02:30.200 --> 00:02:31.500
Let's on the program.

00:02:31.500 --> 00:02:35.790
It keeps changing every time.

00:02:35.790 --> 00:02:38.960
The reason is,

00:02:38.960 --> 00:02:39.970
if you have,

00:02:39.970 --> 00:02:40.250
say,

00:02:40.250 --> 00:02:42.030
four course in your CPU,

00:02:42.030 --> 00:02:44.790
and if you're scheduling less than four threads,

00:02:44.790 --> 00:02:46.140
then each one off.

00:02:46.140 --> 00:02:49.350
These dreads can run in one go simultaneously.

00:02:49.350 --> 00:02:56.630
Prioritizing it Threat does not mean that the other threats will stop until the prioritized

00:02:56.630 --> 00:02:57.910
tried finishings getting.

00:02:57.910 --> 00:03:00.120
If you want threat toe,

00:03:00.120 --> 00:03:02.430
wait until the child tried executes.

00:03:02.430 --> 00:03:04.640
Then you can use the joint method,

00:03:04.640 --> 00:03:07.450
which we have seen in our previous example.

00:03:07.450 --> 00:03:13.840
So it's just that we're telling the underlying operating system which threat in my

00:03:13.840 --> 00:03:15.950
application should take the priority,

00:03:15.950 --> 00:03:19.160
and it's with the mercy off the operating system.

00:03:19.160 --> 00:03:21.290
The treads will be executed,

00:03:21.290 --> 00:03:27.110
and usually CPU tends to allocate more time in running the threats with higher priority.

00:03:27.110 --> 00:03:33.980
So setting the priority does not guarantee the order in which the threads get is a good it

00:03:33.980 --> 00:03:33.980
.

00:03:33.980 --> 00:03:38.670
And that's why you're seeing all these random results.

00:03:38.670 --> 00:03:44.510
If you want to see the real example off threat priorities,

00:03:44.510 --> 00:03:49.370
then have a sippy demanding operation on which one off these threats,

00:03:49.370 --> 00:03:56.320
like we did earlier and have said 10 threats running with each threat set to some priority

00:03:56.320 --> 00:03:56.320
.

00:03:56.320 --> 00:04:02.890
I bet you would see the priority is significant and threads with higher priority will

00:04:02.890 --> 00:04:06.990
finish us all adopted on Dredd Priorities.

00:04:06.990 --> 00:04:08.580
See you in my next radio

