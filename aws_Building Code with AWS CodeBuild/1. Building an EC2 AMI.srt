1
00:00:00,500 --> 00:00:03,100
The final part of this course will conclude with

2
00:00:03,100 --> 00:00:09,910
creating an EC2 AMI using Packer, which is being run by a CodeBuild build.

3
00:00:09,910 --> 00:00:13,810
Let's jump right in and get to it.

4
00:00:13,810 --> 00:00:14,160
First,

5
00:00:14,160 --> 00:00:17,160
we need to make sure you have the right prerequisites required

6
00:00:17,160 --> 00:00:21,370
to create an EC2 AMI with AWS Codebuild.

7
00:00:21,370 --> 00:00:22,910
There's only one thing we need to have,

8
00:00:22,910 --> 00:00:25,990
and it's already set up for this module as we set it

9
00:00:25,990 --> 00:00:30,340
up previously in an earlier module, and that's the service role.

10
00:00:30,340 --> 00:00:33,430
Awesome.

11
00:00:33,430 --> 00:00:36,210
So we already have everything set up and in place.

12
00:00:36,210 --> 00:00:41,820
Let's take a look at how to plan our build for AWS CodeBuild.

13
00:00:41,820 --> 00:00:47,740
For our next build, we need to set up an S3 bucket on a CodeBuild project,

14
00:00:47,740 --> 00:00:55,180
which will then create an EC2 AMI using Packer.

15
00:00:55,180 --> 00:00:58,530
So now we understand the core components of this next build.

16
00:00:58,530 --> 00:01:02,780
Let's take a look at creating it.

17
00:01:02,780 --> 00:01:05,790
In this demo, we're going to cover the following.

18
00:01:05,790 --> 00:01:09,680
We're going to be creating a build, we're going to set up the S3 buckets,

19
00:01:09,680 --> 00:01:13,210
were going to have a look at the source code, we're going to run that build,

20
00:01:13,210 --> 00:01:18,730
and then we're going to have a look at managing the AMI artifacts.

21
00:01:18,730 --> 00:01:21,980
Let's create our S3 bucket.

22
00:01:21,980 --> 00:01:36,440
Remember to give it a unique name, location London, and create the bucket. Cool.

23
00:01:36,440 --> 00:01:39,620
Now,

24
00:01:39,620 --> 00:01:44,130
let's find it, and let's go into it, and then we're going

25
00:01:44,130 --> 00:01:47,440
to create two folders, same as last time, one called

26
00:01:47,440 --> 00:01:51,850
Source and one called Artifacts.

27
00:01:51,850 --> 00:02:00,780
So let's add that Artifacts one too, save that, on the in Source,

28
00:02:00,780 --> 00:02:10,990
we're going to upload our ZIP file of our source code and then

29
00:02:10,990 --> 00:02:19,200
upload that. Cool. Then let's head over to the CodeBuild dashboard,

30
00:02:19,200 --> 00:02:23,310
and then let's create a build project.

31
00:02:23,310 --> 00:02:30,830
We'll give it a name, PAcker‑ CodeBuild, and we don't need to give a

32
00:02:30,830 --> 00:02:36,770
description, and then select our Source as S3, similar to how we did it

33
00:02:36,770 --> 00:02:41,460
in the previous module, and then we'll give it an S3 object key of

34
00:02:41,460 --> 00:02:51,560
Source/Archive.zip. It doesn't need to have a source version, and we're

35
00:02:51,560 --> 00:02:56,240
going to select the Managed image from Ubuntu, it's going to have the

36
00:02:56,240 --> 00:02:58,420
Standard runtime,

37
00:02:58,420 --> 00:03:02,620
and then we're going to select 4.0. We're going to

38
00:03:02,620 --> 00:03:05,890
select an existing service role.

39
00:03:05,890 --> 00:03:07,990
We're going to pick the one that we created in a previous

40
00:03:07,990 --> 00:03:13,140
module that has the elevated EC2 permissions.

41
00:03:13,140 --> 00:03:17,440
It's going to use the buildspec file in the archive.zip,

42
00:03:17,440 --> 00:03:21,900
and then it's going to produce a build.log for us, so let's store

43
00:03:21,900 --> 00:03:27,560
that in our S3 bucket, and then we're going to give it a path as well

44
00:03:27,560 --> 00:03:37,840
of artifact/build.log. We're not going to package that up, and we'll

45
00:03:37,840 --> 00:03:39,950
have CloudWatch logs enabled.

46
00:03:39,950 --> 00:03:44,960
So let's create the build project now. So that's now

47
00:03:44,960 --> 00:03:53,240
created. Let's start our build.

48
00:03:53,240 --> 00:03:56,800
Let's scroll down to Phase details, and we can watch

49
00:03:56,800 --> 00:04:00,810
CodeBuild running through our build spec file.

50
00:04:00,810 --> 00:04:02,490
This might take a few minutes,

51
00:04:02,490 --> 00:04:07,390
so let's leave that to run until we hit Build phase, and then we can have

52
00:04:07,390 --> 00:04:13,500
a look at CodeBuild, spin it up an EC2 instance for us, fire a packet, and

53
00:04:13,500 --> 00:04:20,730
then creating the EC2 AMI for us. That's now into the BUILD phase. So

54
00:04:20,730 --> 00:04:24,880
let's jump over to the EC2 dashboard,

55
00:04:24,880 --> 00:04:28,660
and there it is, spinning up our EC2 server,

56
00:04:28,660 --> 00:04:31,370
and it's going to run in our install scripts, it's going to copy

57
00:04:31,370 --> 00:04:35,480
over our Go binary, and then it's going to create the image for

58
00:04:35,480 --> 00:04:41,520
us. So let's jump back over to CodeBuild. That looks like our

59
00:04:41,520 --> 00:04:44,010
CodeBuild build has succeeded.

60
00:04:44,010 --> 00:04:49,000
Let's jump back over to EC2, and then let's have a

61
00:04:49,000 --> 00:04:53,240
look at the images that it created.

62
00:04:53,240 --> 00:04:57,660
There we are. There's our latest image, and we can see that's

63
00:04:57,660 --> 00:05:02,180
just been created for us, and the tags that we set in packet 2

64
00:05:02,180 --> 00:05:06,030
are Go‑AMI and it's our Go Web Server.

65
00:05:06,030 --> 00:05:14,000
How cool is that? Super simple, super easy, and CodeBuild, it just takes the headache away.

