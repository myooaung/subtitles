1
00:00:00,910 --> 00:00:06,239
Let's implement our own custom actuator endpoint in our demo application.

2
00:00:06,239 --> 00:00:10,170
In this last demo, we'll write our very own custom actuator endpoint.

3
00:00:10,170 --> 00:00:13,006
Spring Boot Actuator comes with a built-in endpoint for checking

4
00:00:13,006 --> 00:00:15,250
health as we've seen throughout the course,

5
00:00:15,250 --> 00:00:18,346
but it doesn't provide a check for readiness.

6
00:00:18,346 --> 00:00:21,828
So you're probably wondering what exactly is readiness and readiness

7
00:00:21,828 --> 00:00:25,662
determines whether the application is able to receive traffic.

8
00:00:25,662 --> 00:00:29,438
An application may be healthy, but not ready to receive traffic.

9
00:00:29,438 --> 00:00:33,020
Let's write a custom actuator endpoint that determines readiness.

10
00:00:33,020 --> 00:00:39,313
First, create a new package inside the main package called endpoint.

11
00:00:39,313 --> 00:00:44,355
In the new package, create a new class called ReadinessEndpoint.

12
00:00:44,355 --> 00:00:51,558
Annotate the class with the @Component annotation and the @Endpoint annotation.

13
00:00:51,558 --> 00:00:56,954
Set the ID attribute of the @Endpoint annotation to readiness.

14
00:00:56,954 --> 00:01:01,035
This ID will then be used in the path to access our endpoint.

15
00:01:01,035 --> 00:01:04,087
Create a new string instance variable called ready and

16
00:01:04,087 --> 00:01:06,944
initialize it to the String NOT_READY.

17
00:01:06,944 --> 00:01:15,279
Next, add a new method called getReadiness that returns a string.

18
00:01:15,279 --> 00:01:20,215
Annotate the method with the @ReadOperation annotation and return the instance

19
00:01:20,215 --> 00:01:24,369
variable indicating whether or not the application is ready.

20
00:01:24,369 --> 00:01:27,567
When we call the path /actuator/readiness,

21
00:01:27,567 --> 00:01:29,803
this is the method that will get invoked.

22
00:01:29,803 --> 00:01:33,435
Right now, our endpoint is always returning NOT_READY.

23
00:01:33,435 --> 00:01:37,073
Let's create a new method called setReady that returns void.

24
00:01:37,073 --> 00:01:41,999
This method will set whether or not the application is ready to serve traffic.

25
00:01:41,999 --> 00:01:46,015
You can imagine that there could be some complex logic here to

26
00:01:46,015 --> 00:01:48,695
determine whether or not the app is ready.

27
00:01:48,695 --> 00:01:50,978
We'll just be doing a simple check for our demo.

28
00:01:50,978 --> 00:01:55,008
Annotate the method with the @EventListener annotation and use

29
00:01:55,008 --> 00:01:59,794
the ApplicationReadyEvent class as the value.

30
00:01:59,794 --> 00:02:00,548
In the body of the method,

31
00:02:00,548 --> 00:02:04,295
change the instance variable ready to the value of ready.

32
00:02:04,295 --> 00:02:08,514
This method will execute and set the status to ready when Spring

33
00:02:08,514 --> 00:02:11,771
sends the ApplicationReadyEvent after starting up.

34
00:02:11,771 --> 00:02:15,069
We're almost ready to give our new actuator endpoint a try,

35
00:02:15,069 --> 00:02:18,838
but don't forget that we need to expose the endpoint.

36
00:02:18,838 --> 00:02:23,570
Navigate to the src, main, resources, and open up the application.properties.

37
00:02:23,570 --> 00:02:25,871
On the property that controls which endpoints are exposed,

38
00:02:25,871 --> 00:02:30,802
add a comma to the end of the value and type readiness.

39
00:02:30,802 --> 00:02:32,887
We're now ready to start our application.

40
00:02:32,887 --> 00:02:37,103
Navigate to the main application class, right-click, and go to Run.

41
00:02:37,103 --> 00:02:38,664
Once the application is started,

42
00:02:38,664 --> 00:02:45,874
fire up a browser and visit localhost:8080/actuator/readiness.

43
00:02:45,874 --> 00:02:47,081
If everything went as planned,

44
00:02:47,081 --> 00:02:54,000
you'll get back a ready response indicating that the application is ready to receive traffic.

