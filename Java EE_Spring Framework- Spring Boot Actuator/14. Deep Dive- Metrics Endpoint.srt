1
00:00:00,960 --> 00:00:05,038
Just like the health endpoint, we briefly took a look at the metrics endpoint,

2
00:00:05,038 --> 00:00:09,576
and also like the health endpoint, we really only scratch the surface.

3
00:00:09,576 --> 00:00:14,027
So let's take a deeper look at the metrics endpoint.

4
00:00:14,027 --> 00:00:15,151
Out of the box,

5
00:00:15,151 --> 00:00:19,319
the metrics endpoint supports a large number of monitoring systems.

6
00:00:19,319 --> 00:00:22,234
So it supports everything from Software as a Service

7
00:00:22,234 --> 00:00:26,083
monitoring systems like New Relic and DataDog to self-managed

8
00:00:26,083 --> 00:00:29,595
solutions like Prometheus and Grafana.

9
00:00:29,595 --> 00:00:31,660
If you're wondering whether or not a particular monitoring

10
00:00:31,660 --> 00:00:33,942
system is supported by the metrics endpoint,

11
00:00:33,942 --> 00:00:36,558
be sure to check out the documentation.

12
00:00:36,558 --> 00:00:40,304
The documentation contains a list of all the default supported

13
00:00:40,304 --> 00:00:43,023
monitoring systems and how to configure them.

14
00:00:43,023 --> 00:00:45,687
One of the nice things about the metrics endpoint is that it

15
00:00:45,687 --> 00:00:47,909
supports both a push and a pull model.

16
00:00:47,909 --> 00:00:50,767
A lot of the Software as a Service offerings like New

17
00:00:50,767 --> 00:00:53,163
Relic and DataDog are push models.

18
00:00:53,163 --> 00:00:55,947
You send your metrics to them, they process them,

19
00:00:55,947 --> 00:00:58,945
they analyze them, and they graph them for you.

20
00:00:58,945 --> 00:01:02,285
There is also the pull model like what Grafana uses where the

21
00:01:02,285 --> 00:01:04,817
metrics are available in a certain format,

22
00:01:04,817 --> 00:01:07,792
so in this case it would be a Prometheus format,

23
00:01:07,792 --> 00:01:11,953
and Grafana continuously reaches out to the endpoint to fetch

24
00:01:11,953 --> 00:01:15,291
the data and record and analyze and graph it.

25
00:01:15,291 --> 00:01:18,339
The metrics endpoint also comes with a number of built-in metrics

26
00:01:18,339 --> 00:01:21,275
that it automatically collects and gathers.

27
00:01:21,275 --> 00:01:24,548
These are referred to as the core metrics and they include

28
00:01:24,548 --> 00:01:27,035
things like JVM metrics and CPU metrics.

29
00:01:27,035 --> 00:01:31,570
To get a list of all the available metrics that are exposed,

30
00:01:31,570 --> 00:01:33,857
be sure to check out the documentation.

31
00:01:33,857 --> 00:01:38,844
Lastly, it should come as no surprise that you can add your own custom metrics.

32
00:01:38,844 --> 00:01:39,915
So maybe, for instance,

33
00:01:39,915 --> 00:01:43,421
you have an in-memory cache and you want to see how many

34
00:01:43,421 --> 00:01:46,492
times you had a cache hit or a cache miss,

35
00:01:46,492 --> 00:01:49,772
you can easily expose these metrics at the metrics endpoint,

36
00:01:49,772 --> 00:01:53,421
and not only does it support completely custom metrics,

37
00:01:53,421 --> 00:01:56,575
you can also augment existing metrics.

38
00:01:56,575 --> 00:02:01,756
A common example of this would be adding the AWS region to all of your metrics.

39
00:02:01,756 --> 00:02:09,000
This would then allow you to individually analyze a particular metric within an individual region.

