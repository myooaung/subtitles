WEBVTT

00:00.180 --> 00:02.370
Hello and welcome to this new editorial.

00:02.370 --> 00:08.190
All right so we got the final shape of the output the stochastic output as opposed to deterministic

00:08.280 --> 00:13.880
output that we got in the previous tutorials and now we're ready to get the and coefficients.

00:13.890 --> 00:19.460
So before we get them let's jump back a bit into the theory to remind ourselves what they are.

00:19.500 --> 00:23.390
And so I've prepared some good resource for you which is right here.

00:23.430 --> 00:31.440
This PBF by saga or 3 Harry which explains everything about mixture density networks but what I only

00:31.440 --> 00:38.430
want to show you right now is just a reminder of what the parameters of a mixture density network are.

00:38.490 --> 00:40.790
We can see them a bit below.

00:40.860 --> 00:43.870
Here they are the parameters of a mixture model.

00:43.980 --> 00:46.260
Our first the mixing coefficients.

00:46.260 --> 00:49.330
Second the means and third the variances.

00:49.350 --> 00:56.160
And that's exactly what we're about to get inside a function which we'll call get Andean coefficient.

00:56.190 --> 00:56.790
All right.

00:56.790 --> 00:57.920
So let's do this.

00:57.930 --> 00:59.670
Let's go back to Python.

00:59.670 --> 01:00.390
Here we go.

01:00.450 --> 01:02.590
And let's implement that function.

01:02.640 --> 01:08.360
So first it's important to explain here that we're not about to make a method you know because we're

01:08.400 --> 01:09.740
already inside a method.

01:09.750 --> 01:12.780
We are right now implementing the build model method.

01:12.810 --> 01:17.910
So what we're about to do now is a function inside the build model method.

01:17.910 --> 01:26.010
And so again we start with Def to define this new function which we're going to call get and the N coefficient

01:26.580 --> 01:32.430
or code which we'll take as arguments not self because it is just a simple function.

01:32.430 --> 01:40.110
But of course the output because we computing the MGM coefficient from the output and the way we're

01:40.110 --> 01:46.500
going to do this is we're going to split the output in three parts along the horizontal axis meaning

01:46.800 --> 01:54.360
along the dimension of index 1 and each of these parts will be used to compute each of the three coefficients

01:54.900 --> 01:56.390
and we won't compute.

01:56.400 --> 01:58.410
Now the mean and the variance.

01:58.410 --> 02:05.250
This is done in some other parts of the implementation but we will already include the formula for the

02:05.490 --> 02:09.450
mixing coefficient which is the first parameter here.

02:09.540 --> 02:14.890
So let's do this let's for a split the output in three parts three equal parts.

02:14.910 --> 02:22.220
And for this we're going to use the T F that split function which I've worked here for you in the tensor

02:22.230 --> 02:23.910
flow documentation.

02:23.910 --> 02:29.610
So here we go the T F split function takes a couple of arguments the first one is the value meaning

02:29.610 --> 02:35.580
what you want to split and this is going to be of course are output the sarcastic output resulting from

02:35.580 --> 02:43.050
the MDA and Arnon after the MDA an output layer then the number of CI splits meaning the number of splits

02:43.110 --> 02:49.080
you want to have from your output and this is going to be of course three because we want to split the

02:49.140 --> 02:56.010
output in three parts one for each of the three and the N parameters and then the Axis and the axis

02:56.010 --> 02:59.860
is along which axis you want to split your output.

02:59.970 --> 03:06.810
And so we want to split it along the horizontal axis remember our output right now is a 2D tensor so

03:06.810 --> 03:11.610
we're gonna split it along the horizontal axis meaning we're going to split it along some buckets of

03:11.940 --> 03:13.030
observations right.

03:13.050 --> 03:17.320
Because the rows correspond to the observations or the samples.

03:17.330 --> 03:22.410
All right and then the less arguments we don't really care we're going to keep the default values and

03:22.410 --> 03:25.620
therefore here we go we're ready to use that function.

03:25.620 --> 03:32.850
So since this T F split function returns the part resulting from the split well we're directly going

03:32.850 --> 03:39.870
to introduce here the variables that will represent these splits and since each split corresponds to

03:40.140 --> 03:45.090
each one of the three MGM parameters Well that's exactly what we're about to introduce here.

03:45.110 --> 03:52.080
So the first one is going to be lug mix which is for the mixing coefficients the first parameter then

03:52.350 --> 03:58.830
the second one is going to be the mean and third the third one is going to be the low FTD standard deviation.

03:58.830 --> 04:04.020
So we're taking the look here which is the classic thing to do in mathematics working with the luggage

04:04.020 --> 04:10.350
the parameters will facilitate operations including some exponential which is the case for the mixing

04:10.350 --> 04:17.130
coefficients and the standard deviation which is the root of the variance which we've got here as the

04:17.130 --> 04:18.470
third parameter.

04:18.480 --> 04:23.550
All right so this is what is going to be returned by the T F split functions and now it is the time

04:23.580 --> 04:24.750
to call it.

04:24.930 --> 04:31.680
And so I'm getting a sense of flow first from which I'm calling the split function which takes as we've

04:31.680 --> 04:36.960
just seen three arguments the first one is what you want to split which is the output.

04:36.960 --> 04:42.540
The second one is the number of splits you want to get which is three and the third one is the axis

04:42.770 --> 04:47.420
the index of the axis along which you want to do the split which is 1.

04:47.520 --> 04:48.090
All right.

04:48.090 --> 04:49.530
So this bit is ready.

04:49.680 --> 04:54.540
And now as we've said we just want to include some computations of the lug mix.

04:54.540 --> 05:01.880
And so for this we're going to use another function by tens of flow which is this 1 math reduce luck

05:01.880 --> 05:10.160
some exp which will compute the lug of the sum of the exponential of the elements across the dimensions

05:10.160 --> 05:11.050
of a tensor.

05:11.090 --> 05:18.830
And so this tensor is going to be this log mix part of the output resulting from the split which is

05:18.830 --> 05:26.240
made that s denser than the dimension is going to be again the horizontal axis meaning the axis of index

05:26.240 --> 05:26.780
1.

05:26.780 --> 05:32.090
So again we're just going to take all the rows you know all the observations which are exactly these

05:32.120 --> 05:37.310
elements across this dimension of the next one and we're going to take the exponential each of them

05:37.670 --> 05:42.060
then summing all of these exponential and then taking the final look.

05:42.200 --> 05:48.320
And so the formula of this lug mix is a discrimination of this formula here.

05:48.350 --> 05:54.110
The Log of the sum of the exponential of the elements across this dimension of the next one of this

05:54.470 --> 05:57.030
lug mix part of the output tensor.

05:57.140 --> 06:00.050
So we're going to write that into code right away.

06:00.050 --> 06:07.100
As we said it's a discrimination so I'm going to take lug mix and then documentation goes this way you

06:07.100 --> 06:14.120
can do minus equals or if you clearly want to see what's happening you can do it this way equals lug

06:14.270 --> 06:17.450
mix minus and then exactly this function.

06:17.480 --> 06:25.160
So we're not gonna use the T F math reduce look some X function directly but it s second alias T F to

06:25.220 --> 06:33.740
reduce look some X so I'm going to say this then going back into Python going to paste this and in the

06:33.750 --> 06:35.020
parenthesis here we go.

06:35.160 --> 06:40.880
Let us input the arguments so the first one is as we said the tensor inside which you want to do this

06:41.120 --> 06:46.730
log of the sum of the exponential of all the elements and cross the axis and this tensor is of course

06:47.030 --> 06:54.300
the lug mix part of the output you know resulting from one of the three splits that we did before with

06:54.300 --> 07:01.820
this step split function and so here we go let's input that bar the output log mix and then remember

07:01.820 --> 07:09.890
the second argument was the index of the axis along which we want to do this big formula some of the

07:09.890 --> 07:12.990
exponential of all the elements across this dimension.

07:12.990 --> 07:19.390
So the second argument is the index of this dimension and so as we said is the index 1.

07:19.610 --> 07:26.630
And finally we have a third argument which is keep dims the default value is none but we're actually

07:26.630 --> 07:31.970
going to set that to true and keep dims as you see is the deprecated I asked for keep teams and that's

07:31.970 --> 07:38.660
because we're using the alias here t f that reduce looks some X right this implementation was actually

07:38.660 --> 07:44.720
not done and tend to flow one point twelve but I think one point ten we'll check that in the end but

07:44.960 --> 07:49.940
if you use this by the way the whole implementation will still work very well so you can do it with

07:49.940 --> 07:52.750
twenty four one point twelve there is no problem for that.

07:52.820 --> 08:01.130
All right so going back to Python you would go let's input that final argument keep dims equals true

08:01.820 --> 08:09.590
perfect and now as we said we're not going to compute here the mean and the log FTD inside the two remaining

08:09.590 --> 08:14.930
splits resulting from the output this will be on later but at least we have the part of the output for

08:14.960 --> 08:18.390
each of the two remaining parameters the mean and the largest city.

08:18.680 --> 08:25.130
And so what we're going to do now is simply return directly these parameters with their actual form

08:25.520 --> 08:33.700
and so the first one is look makes then the second one is the mean and the third one is the log FTD.

08:33.860 --> 08:34.210
All right.

08:34.310 --> 08:39.960
And now that this function is ready to return these parameters in their actual form.

08:39.980 --> 08:43.030
Well let's get these parameters by calling this function.

08:43.100 --> 08:48.500
And so we are going to introduce three new variables corresponding to each of these parameters starting

08:48.500 --> 08:55.460
with the log mix which we're going to rename out love makes because indeed this is resulting from a

08:55.460 --> 09:05.070
split of the output outlook mix then same out mean that's for the mean and then out lug as.

09:05.270 --> 09:06.680
And that's where the variance.

09:06.680 --> 09:14.270
And so we're gonna get them by calling the Get em the end carafe function which takes this argument

09:14.270 --> 09:16.260
of course the output.

09:16.430 --> 09:16.790
Right.

09:16.880 --> 09:25.040
This now gives us these coefficients and lastly we gonna put these variables into some object variable

09:25.070 --> 09:30.280
because remember we're building a method of this engine art in class.

09:30.450 --> 09:36.060
And so the way we're gonna do this is first create an object variable for the lug mix.

09:36.170 --> 09:43.390
And so we're gonna call that self that out lug mix equals out lug mix.

09:43.400 --> 09:43.800
Right.

09:43.820 --> 09:52.490
Exactly this one which already exists at this point then self that out this time I mean it's going to

09:52.490 --> 09:58.510
be equal to the out mean Vogel returned by the get and the end of a function.

09:58.670 --> 10:08.240
And finally self that out luggage C.D. which is of course equal to this third variable here resulting

10:08.240 --> 10:11.390
from the split right out luggage city.

10:11.390 --> 10:12.440
Here we go.

10:12.440 --> 10:16.630
We now have some object variables for the MGM parameters.

10:16.730 --> 10:17.630
Perfect.

10:17.630 --> 10:23.270
Now we're done with this MGM and part of the implementation so we're going to move on to the last and

10:23.270 --> 10:29.930
final part which will be the same as what we did for the V E meaning you know implementing the training

10:29.990 --> 10:30.620
operation.

10:30.620 --> 10:34.580
So let's put that new element of the structure right away.

10:34.610 --> 10:40.580
I'm going to go back here and here we go in the next story or we'll start the implementation of the

10:40.580 --> 10:42.130
training operations.

10:42.380 --> 10:48.530
So it's going to be a bit more complex than what we did here because we'll have to make some other functions

10:48.530 --> 10:52.450
inside the method but you know we'll do it step by step.

10:52.490 --> 10:55.070
And so as soon as you're ready let's tackle this.

10:55.130 --> 10:56.570
Until then enjoy a.
