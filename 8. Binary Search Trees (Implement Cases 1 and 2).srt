1
1

00:00:00,663  -->  00:00:02,527
(gentle music)
2

2

00:00:02,527  -->  00:00:05,260
(keyboard clacking)
3

3

00:00:05,260  -->  00:00:06,680
<v Sarah>Alright, so let's go ahead</v>
4

4

00:00:06,680  -->  00:00:08,770
and start implementing delete.
5

5

00:00:08,770  -->  00:00:11,370
Now, normally, we've been putting a method
6

6

00:00:11,370  -->  00:00:13,800
in the TreeNode class and one in the Tree class,
7

7

00:00:13,800  -->  00:00:17,230
but for delete, we're gonna do everything in the Tree class.
8

8

00:00:17,230  -->  00:00:19,130
And so, I'm gonna go over to Tree,
9

9

00:00:19,130  -->  00:00:23,950
and I'll add the delete method after the get method.
10

10

00:00:23,950  -->  00:00:27,530
So, I'm gonna say public, void, delete,
11

11

00:00:27,530  -->  00:00:29,570
and we want the value that we wanna delete,
12

12

00:00:29,570  -->  00:00:31,123
so we'll say int value.
13

13

00:00:32,240  -->  00:00:34,910
And what we're gonna do here is call a second method
14

14

00:00:34,910  -->  00:00:37,570
that's going to be a recursive method.
15

15

00:00:37,570  -->  00:00:41,210
And we're going to say the root equals
16

16

00:00:41,210  -->  00:00:42,620
delete
17

17

00:00:42,620  -->  00:00:45,990
and we're gonna pass the root and the value.
18

18

00:00:45,990  -->  00:00:46,970
We're getting an error right now
19

19

00:00:46,970  -->  00:00:48,900
'cause I haven't written this second delete method yet.
20

20

00:00:48,900  -->  00:00:51,420
What we're doing here is we're passing,
21

21

00:00:51,420  -->  00:00:54,540
as the first value, we're passing the root of the subtree
22

22

00:00:54,540  -->  00:00:57,510
that we want to search for the value.
23

23

00:00:57,510  -->  00:00:59,880
And so, when we first call this method, of course,
24

24

00:00:59,880  -->  00:01:01,410
we wanna search the Tree.
25

25

00:01:01,410  -->  00:01:03,310
We don't know which direction to go in yet,
26

26

00:01:03,310  -->  00:01:06,600
so we're passing the root and then we're passing the value
27

27

00:01:06,600  -->  00:01:08,610
that we want to delete.
28

28

00:01:08,610  -->  00:01:12,580
And what we're ultimately going to return is
29

29

00:01:13,580  -->  00:01:14,470
the root of the Tree.
30

30

00:01:14,470  -->  00:01:17,530
Now, this might not change, but if it turns out
31

31

00:01:17,530  -->  00:01:19,830
that the root is the value we wanna delete,
32

32

00:01:19,830  -->  00:01:21,310
then the root will change.
33

33

00:01:21,310  -->  00:01:22,700
So, let's code this method,
34

34

00:01:22,700  -->  00:01:25,670
'cause things will probably become clearer at that point.
35

35

00:01:25,670  -->  00:01:27,230
And so, I'll say private,
36

36

00:01:27,230  -->  00:01:29,810
because we don't need to expose this method
37

37

00:01:29,810  -->  00:01:31,380
to the outside world.
38

38

00:01:31,380  -->  00:01:33,880
They would call this delete method with the value.
39

39

00:01:33,880  -->  00:01:34,920
So, private
40

40

00:01:35,822  -->  00:01:37,040
TreeNode.
41

41

00:01:37,040  -->  00:01:41,060
This essentially returns the replacement node.
42

42

00:01:41,060  -->  00:01:42,990
If a node doesn't have to be replaced,
43

43

00:01:42,990  -->  00:01:45,270
then you just get the same node back.
44

44

00:01:45,270  -->  00:01:47,820
And so here, if the root wasn't the one being replaced,
45

45

00:01:47,820  -->  00:01:50,840
we'd just get the same node back for the root.
46

46

00:01:50,840  -->  00:01:51,700
Delete.
47

47

00:01:51,700  -->  00:01:53,363
And for this one,
48

48

00:01:54,500  -->  00:01:56,463
we need the subtreeRoot.
49

49

00:01:57,317  -->  00:02:00,120
And so this is the root of the subtree we wanna search
50

50

00:02:00,120  -->  00:02:02,647
and when we start out, we wanna search the entire Tree
51

51

00:02:02,647  -->  00:02:04,360
because we don't know which direction to go in yet
52

52

00:02:04,360  -->  00:02:07,460
and so we're passing the root of the entire Tree,
53

53

00:02:07,460  -->  00:02:10,450
and we need the value that we wanna delete.
54

54

00:02:10,450  -->  00:02:11,790
And when I say search, of course,
55

55

00:02:11,790  -->  00:02:14,320
we need to find the value that we wanna delete,
56

56

00:02:14,320  -->  00:02:16,820
so we know which node to actually delete.
57

57

00:02:16,820  -->  00:02:18,440
Okay, so the first thing we're gonna check
58

58

00:02:18,440  -->  00:02:19,800
is if this is null
59

59

00:02:19,800  -->  00:02:22,010
and that would be the case of the Tree being empty.
60

60

00:02:22,010  -->  00:02:25,463
So we're gonna if subtreeRoot equals null,
61

61

00:02:27,370  -->  00:02:30,143
then we're just gonna return subtreeRoot.
62

62

00:02:32,400  -->  00:02:34,870
I mean, if it's null, we're essentially returning null.
63

63

00:02:34,870  -->  00:02:36,530
We could put null here.
64

64

00:02:36,530  -->  00:02:38,700
And so basically, we'd just being assigning
65

65

00:02:38,700  -->  00:02:39,720
null to root again.
66

66

00:02:39,720  -->  00:02:42,430
And root is already null, so that's fine.
67

67

00:02:42,430  -->  00:02:43,900
In the case of a subtree,
68

68

00:02:43,900  -->  00:02:46,270
that would mean that we've decided that we wanna
69

69

00:02:46,270  -->  00:02:48,090
look down the left or the right subtree
70

70

00:02:48,090  -->  00:02:49,560
and there's no child there.
71

71

00:02:49,560  -->  00:02:52,630
And so this would stop the recursion essentially.
72

72

00:02:52,630  -->  00:02:54,950
So at this point, there are three possibilities,
73

73

00:02:54,950  -->  00:02:57,130
either the root of the subtree
74

74

00:02:57,130  -->  00:02:58,710
is the value we're looking for,
75

75

00:02:58,710  -->  00:03:00,750
so that's the node we wanna delete,
76

76

00:03:00,750  -->  00:03:03,810
or we've gotta go down and search the left subtree
77

77

00:03:03,810  -->  00:03:04,807
or the right subtree.
78

78

00:03:04,807  -->  00:03:07,400
And so we're gonna say, if value
79

79

00:03:07,400  -->  00:03:09,140
is less than
80

80

00:03:09,140  -->  00:03:11,093
subtreeRoot.getData,
81

81

00:03:13,420  -->  00:03:15,760
then we wanna search the left subtree.
82

82

00:03:15,760  -->  00:03:17,497
And so we'll say, subtreeroot.,
83

83

00:03:18,510  -->  00:03:22,730
now remember, this method returns the replacement node.
84

84

00:03:22,730  -->  00:03:27,200
And so we're gonna say, set the left child with
85

85

00:03:27,200  -->  00:03:28,083
whatever this method returns
86

86

00:03:28,083  -->  00:03:30,250
because we're gonna call this method in here.
87

87

00:03:30,250  -->  00:03:32,710
So we're gonna say delete,
88

88

00:03:32,710  -->  00:03:34,226
subtreeRoot
89

89

00:03:34,226  -->  00:03:35,309
.getLeftChild
90

90

00:03:36,530  -->  00:03:39,880
and the same value that we're searching for.
91

91

00:03:39,880  -->  00:03:41,620
And so what this is saying is
92

92

00:03:41,620  -->  00:03:44,890
if the value is less than than the root
93

93

00:03:44,890  -->  00:03:46,610
of the subtree we're searching,
94

94

00:03:46,610  -->  00:03:49,750
then we wanna move to the subtree's left child.
95

95

00:03:49,750  -->  00:03:52,930
And at the end, we're gonna replace the subtree's
96

96

00:03:52,930  -->  00:03:56,340
left child with whatever the result of the delete is.
97

97

00:03:56,340  -->  00:03:57,890
Now it's possible that
98

98

00:03:57,890  -->  00:04:00,590
this means this will be replaced,
99

99

00:04:00,590  -->  00:04:02,760
the left child, because the left child
100

100

00:04:02,760  -->  00:04:04,710
is gonna be the value that we actually delete
101

101

00:04:04,710  -->  00:04:06,550
or it's possible that it won't change.
102

102

00:04:06,550  -->  00:04:09,580
And if it doesn't change, we'll just get the same node back
103

103

00:04:09,580  -->  00:04:11,210
that's already the left child.
104

104

00:04:11,210  -->  00:04:14,750
So that handles the case of if the value is
105

105

00:04:14,750  -->  00:04:17,150
less than the subtreeRoot.
106

106

00:04:17,150  -->  00:04:20,230
So now, of course, we wanna check if the value is greater.
107

107

00:04:20,230  -->  00:04:24,923
I'll see if value is greater than subtreeRoot.getData.
108

108

00:04:27,320  -->  00:04:28,970
In that case, we wanna do the same thing,
109

109

00:04:28,970  -->  00:04:30,240
but we're gonna go to the right.
110

110

00:04:30,240  -->  00:04:33,500
So we'll say subtreeRoot.setRightChild
111

111

00:04:34,760  -->  00:04:35,800
delete
112

112

00:04:35,800  -->  00:04:37,733
subtreeRoot.getRightChild,
113

113

00:04:40,010  -->  00:04:40,860
and the value.
114

114

00:04:40,860  -->  00:04:41,960
It's the same deal here,
115

115

00:04:41,960  -->  00:04:43,910
we're now gonna look down the right subtree
116

116

00:04:43,910  -->  00:04:46,140
and if it turns out that the right child
117

117

00:04:46,140  -->  00:04:47,580
needs to be replaced,
118

118

00:04:47,580  -->  00:04:49,450
what will be returned is the new node,
119

119

00:04:49,450  -->  00:04:51,560
and so we'll set the right child to that new node.
120

120

00:04:51,560  -->  00:04:52,840
If it doesn't need to be replaced,
121

121

00:04:52,840  -->  00:04:54,710
we'll just get back the same node.
122

122

00:04:54,710  -->  00:04:57,150
Now if the value isn't less than the root
123

123

00:04:57,150  -->  00:04:58,430
and it isn't greater than the root,
124

124

00:04:58,430  -->  00:05:00,090
that means it's equal to the root.
125

125

00:05:00,090  -->  00:05:02,860
And so that essentially means that we have found
126

126

00:05:02,860  -->  00:05:04,900
the node that we want to delete
127

127

00:05:04,900  -->  00:05:06,437
and it is the subtreeRoot.
128

128

00:05:06,437  -->  00:05:08,610
And we're gonna say else.
129

129

00:05:08,610  -->  00:05:12,040
And we're now gonna handle the first two cases
130

130

00:05:12,040  -->  00:05:14,520
that the subtreeRoot has no children,
131

131

00:05:14,520  -->  00:05:17,380
or the subtreeRoot has one child.
132

132

00:05:17,380  -->  00:05:18,930
So we're gonna say, if
133

133

00:05:21,034  -->  00:05:22,756
subtreeRoot
134

134

00:05:22,756  -->  00:05:23,839
.getLeftChild
135

135

00:05:25,820  -->  00:05:27,093
equals null,
136

136

00:05:28,280  -->  00:05:30,360
now there are two possibilities here.
137

137

00:05:30,360  -->  00:05:32,230
Either this is a leaf
138

138

00:05:32,230  -->  00:05:34,270
and so the right child is also null
139

139

00:05:34,270  -->  00:05:36,070
or it has a right child.
140

140

00:05:36,070  -->  00:05:39,720
And so what do we wanna replace this node with?
141

141

00:05:39,720  -->  00:05:42,130
So if this node has zero children,
142

142

00:05:42,130  -->  00:05:43,810
meaning that the left child is null
143

143

00:05:43,810  -->  00:05:45,610
and the right child is also null,
144

144

00:05:45,610  -->  00:05:47,260
then we just wanna lop off the node.
145

145

00:05:47,260  -->  00:05:50,520
And so the replacement node is nothing, it's null.
146

146

00:05:50,520  -->  00:05:53,140
If it has a right child, then the replacement node
147

147

00:05:53,140  -->  00:05:54,760
is its right child.
148

148

00:05:54,760  -->  00:05:57,970
So what we're gonna do is return subtreeRoot.getRightChild.
149

149

00:06:00,950  -->  00:06:02,990
Because this works in both cases.
150

150

00:06:02,990  -->  00:06:07,390
This TreeNode is returning the replacement node
151

151

00:06:07,390  -->  00:06:09,900
and so, if this is a leaf,
152

152

00:06:09,900  -->  00:06:12,150
then the right child will be null and that works
153

153

00:06:12,150  -->  00:06:14,107
'cause we're saying the replacement node is null.
154

154

00:06:14,107  -->  00:06:16,200
And so what that will do ultimately
155

155

00:06:16,200  -->  00:06:17,430
because of the recursion,
156

156

00:06:17,430  -->  00:06:20,860
is the appropriate child of the parent will be nulled out
157

157

00:06:20,860  -->  00:06:22,380
because here, as you can see,
158

158

00:06:22,380  -->  00:06:24,910
we're setting the left and right children
159

159

00:06:24,910  -->  00:06:26,480
with the result of the delete.
160

160

00:06:26,480  -->  00:06:28,200
And so, if we're returning null,
161

161

00:06:28,200  -->  00:06:29,540
that would mean the left to right child
162

162

00:06:29,540  -->  00:06:30,780
is being set to null.
163

163

00:06:30,780  -->  00:06:33,290
And so in the case of a leaf, we'd return null,
164

164

00:06:33,290  -->  00:06:34,927
meaning we're telling the parents,
165

165

00:06:34,927  -->  00:06:37,267
"Set your left or right child to null
166

166

00:06:37,267  -->  00:06:38,730
"because I'm gone now."
167

167

00:06:38,730  -->  00:06:41,860
If it does have a right child, then we want that right child
168

168

00:06:41,860  -->  00:06:43,543
to replace subtreeRoot.
169

169

00:06:43,543  -->  00:06:46,468
And so we want the right child to replace
170

170

00:06:46,468  -->  00:06:47,927
the left or right child of this node's parent.
171

171

00:06:49,880  -->  00:06:52,410
Now we do the same thing for the opposite case.
172

172

00:06:52,410  -->  00:06:53,243
Else
173

173

00:06:53,243  -->  00:06:54,076
if
174

174

00:06:54,076  -->  00:06:55,757
subtreeRoot.getRightChild
175

175

00:06:56,850  -->  00:06:57,913
equals null,
176

176

00:06:59,110  -->  00:07:02,277
then we're gonna return subtreeRoot.getLeftChild.
177

177

00:07:03,900  -->  00:07:05,350
And that does the same thing.
178

178

00:07:05,350  -->  00:07:08,100
We're saying, okay, if I don't have a right child
179

179

00:07:08,100  -->  00:07:10,610
and I don't have a left child, then just lop me off,
180

180

00:07:10,610  -->  00:07:12,070
so return null.
181

181

00:07:12,070  -->  00:07:15,100
And then up here, when the recursive call returns
182

182

00:07:15,100  -->  00:07:16,240
and we're handling the parent,
183

183

00:07:16,240  -->  00:07:19,280
the parent will set its left of right child to null.
184

184

00:07:19,280  -->  00:07:22,250
If it does have a left child, then we want the parent.
185

185

00:07:22,250  -->  00:07:24,860
We want the left child to replace the node we're deleting.
186

186

00:07:24,860  -->  00:07:27,420
And so due to the recursion, the parent
187

187

00:07:27,420  -->  00:07:30,390
will set its left of right child
188

188

00:07:30,390  -->  00:07:33,420
to the left child of the node we're deleting.
189

189

00:07:33,420  -->  00:07:35,340
And then what we're gonna return at the bottom,
190

190

00:07:35,340  -->  00:07:37,420
now this is, cases zero and one.
191

191

00:07:37,420  -->  00:07:38,830
Let me put this in here.
192

192

00:07:38,830  -->  00:07:39,980
So
193

193

00:07:39,980  -->  00:07:40,813
cases
194

194

00:07:40,813  -->  00:07:41,780
zero
195

195

00:07:41,780  -->  00:07:42,923
and one.
196

196

00:07:44,020  -->  00:07:44,950
Node to delete
197

197

00:07:44,950  -->  00:07:45,890
has
198

198

00:07:45,890  -->  00:07:46,723
zero
199

199

00:07:46,723  -->  00:07:48,010
or one children,
200

200

00:07:48,010  -->  00:07:50,810
zero or one child, children.
201

201

00:07:50,810  -->  00:07:54,510
Make that grammatically correct for the one child case.
202

202

00:07:54,510  -->  00:07:56,260
We haven't handled case two yet.
203

203

00:07:56,260  -->  00:07:58,370
We're gonna do that in another video,
204

204

00:07:58,370  -->  00:08:00,520
but down here, once we're done,
205

205

00:08:00,520  -->  00:08:02,410
we're gonna return the subtreeRoot.
206

206

00:08:02,410  -->  00:08:05,620
And so as I said, if we make it down here,
207

207

00:08:05,620  -->  00:08:08,800
it means that this node is not the node we wanna delete.
208

208

00:08:08,800  -->  00:08:10,720
And so we just, the subtreeRoot
209

209

00:08:11,680  -->  00:08:13,230
isn't the node that we wanna delete
210

210

00:08:13,230  -->  00:08:15,450
and so we just wanna return it.
211

211

00:08:15,450  -->  00:08:17,390
And so that's why this works,
212

212

00:08:17,390  -->  00:08:19,900
because we're always returning the replacement node
213

213

00:08:19,900  -->  00:08:21,960
and if this isn't the node we wanna delete,
214

214

00:08:21,960  -->  00:08:23,979
then we just want the same node.
215

215

00:08:23,979  -->  00:08:27,060
Essentially, the node will be a replacement node
216

216

00:08:27,060  -->  00:08:30,000
for itself if it's not the node we're deleting.
217

217

00:08:30,000  -->  00:08:32,100
And so when we return to the parent
218

218

00:08:32,100  -->  00:08:33,800
and we're setting the left and right child,
219

219

00:08:33,800  -->  00:08:36,470
we'd be, essentially be setting the left and right child
220

220

00:08:36,470  -->  00:08:38,730
to the existing value.
221

221

00:08:38,730  -->  00:08:41,560
All right, so that's it for
222

222

00:08:41,560  -->  00:08:43,210
the first case.
223

223

00:08:43,210  -->  00:08:45,290
And the second case,
224

224

00:08:45,290  -->  00:08:48,350
I guess cases zero and one, I think I'm doing arrays here,
225

225

00:08:48,350  -->  00:08:49,650
cases one and two.
226

226

00:08:49,650  -->  00:08:52,870
Okay, so that's the cases one and two.
227

227

00:08:52,870  -->  00:08:54,300
We have the third case to do.
228

228

00:08:54,300  -->  00:08:57,120
We're not gonna test this until we've added the code
229

229

00:08:57,120  -->  00:08:58,190
for the third case.
230

230

00:08:58,190  -->  00:08:59,420
And the third case, of course,
231

231

00:08:59,420  -->  00:09:01,490
is when the node isn't a leaf
232

232

00:09:01,490  -->  00:09:03,930
and the node doesn't have just one child,
233

233

00:09:03,930  -->  00:09:05,460
but the node has two children.
234

234

00:09:05,460  -->  00:09:08,190
And so let's move onto how to handle that case.
235

235

00:09:08,190  -->  00:09:09,740
I'll see you in the next video.
