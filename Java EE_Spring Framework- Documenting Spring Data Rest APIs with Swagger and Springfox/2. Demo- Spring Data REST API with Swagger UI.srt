1
00:00:02,320 --> 00:00:07,540
Let's go to an example Spring Data REST project and add in the Springfox

2
00:00:07,540 --> 00:00:12,530
dependencies and a class to configure Swagger. We'll then build it and see

3
00:00:12,530 --> 00:00:15,440
what the default documentation looks like.

4
00:00:15,440 --> 00:00:18,840
Here's our example Spring Data REST Project.

5
00:00:18,840 --> 00:00:24,860
We have an Employee entity that has a few different attributes, id, name,

6
00:00:24,860 --> 00:00:28,430
title, and department, with the basic constructors.

7
00:00:28,430 --> 00:00:33,740
Spring Data is handling all of the endpoints that are generated for this entity.

8
00:00:33,740 --> 00:00:39,170
We've set up a repository for the Employee object, and we're using Spring Boot.

9
00:00:39,170 --> 00:00:44,040
We've also added an example service that has a simple get request.

10
00:00:44,040 --> 00:00:47,250
We've configured it to run on port 8080 and enabled

11
00:00:47,250 --> 00:00:50,210
some of the Spring actuator endpoints.

12
00:00:50,210 --> 00:00:53,750
If we try to hit the Swagger UI right now, we get an error.

13
00:00:53,750 --> 00:00:55,300
We haven't added anything yet,

14
00:00:55,300 --> 00:00:59,790
so we need to configure this project to include the necessary libraries.

15
00:00:59,790 --> 00:01:06,410
First, we'll add in the repository for the Springfox artifacts. Next,

16
00:01:06,410 --> 00:01:10,450
we'll define the Springfox version that we're going to use. Currently

17
00:01:10,450 --> 00:01:15,390
we'll be using the 3.0.0‑SNAPSHOT, because there's some things in 2.9.2

18
00:01:15,390 --> 00:01:20,000
that don't quite work with our Spring Data REST setup. Finally, we'll add

19
00:01:20,000 --> 00:01:27,230
in the three dependencies, springfox‑swagger2, springfox‑swagger‑ui, and

20
00:01:27,230 --> 00:01:29,740
springfox‑data‑rest.

21
00:01:29,740 --> 00:01:32,370
That's it for the POM. Now let's go create the

22
00:01:32,370 --> 00:01:35,440
configuration class for our Swagger.

23
00:01:35,440 --> 00:01:39,620
I'll call it ApplicationSwaggerConfig. We'll add the required

24
00:01:39,620 --> 00:01:44,790
annotations, @Configuration, @EnableSwagger2WebMvc, and we'll

25
00:01:44,790 --> 00:01:48,070
import the SpringDataRestConfiguration.class.

26
00:01:48,070 --> 00:01:52,640
Next, we'll add our method to create the Docket object.

27
00:01:52,640 --> 00:01:55,900
Remember to add the @Bean annotation to the method.

28
00:01:55,900 --> 00:01:59,840
It doesn't matter what you call it, I'll just call it employeeApi,

29
00:01:59,840 --> 00:02:03,340
and it will simply return a new Docket object.

30
00:02:03,340 --> 00:02:06,730
We'll be using the SWAGGER_2 spec for this project.

31
00:02:06,730 --> 00:02:11,040
That's why we specified DocumentationType.SWAGGER_2.

32
00:02:11,040 --> 00:02:15,420
Everything else is just the default for the Docket object. We'll get into

33
00:02:15,420 --> 00:02:18,490
some of the customizations for this in the next module.

34
00:02:18,490 --> 00:02:19,340
But for now,

35
00:02:19,340 --> 00:02:25,840
let's restart the app so it can pick up the Swagger UI, and we'll check it out.

36
00:02:25,840 --> 00:02:29,640
We'll go back to our web page and refresh,

37
00:02:29,640 --> 00:02:34,630
and now we have our default Swagger UI. Notice how the Employee Entity and

38
00:02:34,630 --> 00:02:38,290
the other endpoints are automatically picked up by Swagger.

39
00:02:38,290 --> 00:02:41,950
We can expand to see the different methods and even try hitting

40
00:02:41,950 --> 00:02:45,880
some of the services with the REST client.

41
00:02:45,880 --> 00:02:47,390
So that's all it takes.

42
00:02:47,390 --> 00:02:55,000
We added three dependencies and a repository to our POM and a configuration class to generate the Swagger Docket.

