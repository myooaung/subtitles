WEBVTT
1
1

00:00:00.000  -->  00:00:01.600
Hey guys, welcome back to the course.
2

2

00:00:01.600  -->  00:00:06.480
Next concept up on the table is what's called an array.
3

3

00:00:06.480  -->  00:00:10.010
Ok, now, an array, I'm not sure if you've ever heard of this term before
4

4

00:00:10.010  -->  00:00:15.900
in just plain spoken English, but what it means is a series of pieces of information.
5

5

00:00:15.900  -->  00:00:22.890
In programming, what it means is a series 
of information that is all formatted the same.
6

6

00:00:22.890  -->  00:00:24.960
What do I mean by that?
7

7

00:00:24.960  -->  00:00:29.900
By formatted the same I mean it's a series of pieces of information like numbers,
8

8

00:00:29.900  -->  00:00:35.560
like strings, or like variables, you don't mix the three together.
9

9

00:00:35.560  -->  00:00:42.070
So what you would do in programming, and this is actually a goofy situation
10

10

00:00:42.070  -->  00:00:45.820
where in Python you don't actually do it this way,
11

11

00:00:45.820  -->  00:00:47.920
so we're just going to ignore Python right now,
12

12

00:00:47.920  -->  00:00:54.930
but what you would do in other languages 
is you would, remember, save everything,
13

13

00:00:54.930  -->  00:00:56.870
you're essentially going to save anything as a variable.
14

14

00:00:56.870  -->  00:01:03.900
So we would say our array variable equals, and then I can say, "array,"
15

15

00:01:03.900  -->  00:01:06.260
this is going to make a little more sense to you in a second,
16

16

00:01:06.260  -->  00:01:12.300
and this is in PHP, and then I could put 
within the parentheses a series of numbers,
17

17

00:01:12.300  -->  00:01:15.540
a series of words, or a series of variables.
18

18

00:01:15.540  -->  00:01:20.500
Now, the idea here is, so I could say, one, two, actually it's a space,
19

19

00:01:20.500  -->  00:01:25.400
one, two, three, four, five.
20

20

00:01:25.400  -->  00:01:30.460
Now, the idea behind this is that being able to save information like that
21

21

00:01:30.460  -->  00:01:36.250
saves you a lot of time in certain circumstances.
22

22

00:01:36.250  -->  00:01:42.630
Let's say I was making a website that, I don't know, teaches horoscopes,
23

23

00:01:42.630  -->  00:01:46.750
and I wanted in the website you to type in what your sign was.
24

24

00:01:46.750  -->  00:01:50.680
Like I could type in I'm a Gemini, or a Libra, or whatever,
25

25

00:01:50.680  -->  00:01:56.250
and it returns to you some information about that.
26

26

00:01:56.250  -->  00:01:58.500
How exactly would you do that?
27

27

00:01:58.500  -->  00:02:03.230
Let's say we wanted it to just return a bunch of adjectives about your sign.
28

28

00:02:03.230  -->  00:02:10.350
The way that you would do that manually is you would have to tell it like,
29

29

00:02:10.350  -->  00:02:23.000
if I had ten adjectives, I'd have to it something like, adjective 1 equals inspiring,
30

30

00:02:23.000  -->  00:02:38.300
then I'd have to go all the way down, then I'd have to change these up.
31

31

00:02:38.300  -->  00:02:47.100
Dramatic, happy, cautious, you know, etc.
32

32

00:02:47.100  -->  00:02:50.850
So I would have to save all of these adjectives by themselves,
33

33

00:02:50.850  -->  00:02:55.180
and then I'd have to have a way to associate those with, let's say, Gemini,
34

34

00:02:55.180  -->  00:03:02.150
so I'd have to say, well, the Gemini variable, 
these are the things that are important to it,
35

35

00:03:02.150  -->  00:03:06.980
and then I'd have to go like, adjective 1, plus adjective 2, plus,
36

36

00:03:06.980  -->  00:03:13.660
it basically just makes it way to tedious, and so with an array instead,
37

37

00:03:13.660  -->  00:03:18.640
I could just say, and this is, again, PHP, it's a goofy way of doing it,
38

38

00:03:18.640  -->  00:03:25.810
but I could say array, and then followed by equals, and instead of doing
39

39

00:03:25.810  -->  00:03:31.050
that nonsense I just did above, I could actually 
just type it out as the actual words,
40

40

00:03:31.050  -->  00:03:34.820
inspiring, dramatic, and I don't even have to put spaces in it,
41

41

00:03:34.820  -->  00:03:41.270
happy, inspiring. Alternatively, I can follow the same syntax,
42

42

00:03:41.270  -->  00:03:44.260
often in languages there's multiple ways of doing the exact same thing.
43

43

00:03:44.260  -->  00:03:48.070
Why? Again, because they didn't plan this from the very beginning,
44

44

00:03:48.070  -->  00:03:50.670
they came up with solutions as they needed it,
45

45

00:03:50.670  -->  00:03:55.370
equals same thing we did above.
46

46

00:03:55.370  -->  00:04:00.210
And so what this is going to do is that, now, as opposed to if I just said,
47

47

00:04:00.210  -->  00:04:06.750
Gemini equals sleepy, anytime I'd ask the computer to come back to me
48

48

00:04:06.750  -->  00:04:09.030
and say what is Gemini, it would say "sleepy,"
49

49

00:04:09.030  -->  00:04:11.760
but if I wanted to have more information on it,
50

50

00:04:11.760  -->  00:04:13.750
I would have to use an array.
51

51

00:04:13.750  -->  00:04:17.720
So this way, what it could say is, well, there's actually ten different
52

52

00:04:17.720  -->  00:04:23.370
individual pieces of information that are specific to being a Gemini.
53

53

00:04:23.370  -->  00:04:27.700
And guys, the syntax up here may or may not be completely right,
54

54

00:04:27.700  -->  00:04:32.680
I think in PHP you're fine without putting quotations, I might be wrong,
55

55

00:04:32.680  -->  00:04:37.220
you might actually have to put these in quotations, but it doesn't really matter.
56

56

00:04:37.220  -->  00:04:45.000
I'll put these up so we know it's a string.
57

57

00:04:45.000  -->  00:04:48.320
Ok, so then what I would have to do, let's say if someone
58

58

00:04:48.320  -->  00:04:54.200
was typing in what I am, and they said Gemini, I could make it say,
59

59

00:04:54.200  -->  00:04:56.530
and we'll cover this later when we get to conditionals,
60

60

00:04:56.530  -->  00:05:06.000
you could say, if input is equal to Gemini,
61

61

00:05:06.000  -->  00:05:10.680
then you can tell it to display the array, so you can say print Gemini.
62

62

00:05:10.680  -->  00:05:14.050
So essentially what that would say is,
63

63

00:05:14.050  -->  00:05:20.500
if the person types in the word Gemini, I spell it right,
64

64

00:05:20.500  -->  00:05:26.090
then spit back at them the value of Gemini, 
which could be multiple things in an array.
65

65

00:05:26.090  -->  00:05:28.130
Ok, last thing we need to know about arrays,
66

66

00:05:28.130  -->  00:05:31.820
and, again, guys, this is all purely conceptual, such that
67

67

00:05:31.820  -->  00:05:37.610
when you get into actual programming, 
you don't run into, this isn't brand new to you.
68

68

00:05:37.610  -->  00:05:41.910
The other thing you need to understand about arrays is what's called a pointer.
69

69

00:05:41.910  -->  00:05:47.000
When your computer saves information as an array, because it's just
70

70

00:05:47.000  -->  00:05:50.920
a sequence of pieces of information, it saves it in memory,
71

71

00:05:50.920  -->  00:05:55.730
and so every time I ask it to display something, or print,
72

72

00:05:55.730  -->  00:06:01.200
or recall something out of that group, it's going to grab all of them,
73

73

00:06:01.200  -->  00:06:05.900
and what if I, for instance, wanted to just grab one thing in that array?
74

74

00:06:05.900  -->  00:06:11.450
What if I wanted to say Geminis are one of these, some random one of these?
75

75

00:06:11.450  -->  00:06:16.410
Well, the way you would have to handle that is what's called a pointer.
76

76

00:06:16.410  -->  00:06:18.600
Do we need to understand how to use pointers right now?
77

77

00:06:18.600  -->  00:06:24.020
No. What a pointer is is essentially, it's like a theoretical kind of arrow
78

78

00:06:24.020  -->  00:06:27.930
inside of the array that just says what position each item is in.
79

79

00:06:27.930  -->  00:06:31.320
So it could be the case that inspiring is in the first position,
80

80

00:06:31.320  -->  00:06:33.360
dramatic is in the second, and happy is in the third,
81

81

00:06:33.360  -->  00:06:37.800
or, depending on whether or not you've run a command on this array previously,
82

82

00:06:37.800  -->  00:06:40.200
and the code might have changed this up, such that
83

83

00:06:40.200  -->  00:06:43.940
this is the first position, this is the second, this is the third, this is the forth,
84

84

00:06:43.940  -->  00:06:47.450
with a pointer, that's how we know that.
85

85

00:06:47.450  -->  00:06:51.880
So if we know the pointer is on happy, this is just, again, a very abstract term,
86

86

00:06:51.880  -->  00:06:55.280
that's how we know happy is number one, 
followed by two, followed by the next one,
87

87

00:06:55.280  -->  00:06:57.000
four, five, six, and then it goes in a loop.
88

88

00:06:57.000  -->  00:06:59.760
Again, don't worry about that one entirely too much, you will hear about that,
89

89

00:06:59.760  -->  00:07:02.520
and it will make more sense when you're actually programming something,
90

90

00:07:02.520  -->  00:07:04.330
or in an actual situation using it.
91

91

00:07:04.330  -->  00:07:06.500
Ok, so arrays. What are they?
92

92

00:07:06.500  -->  00:07:11.290
They are just series of pieces of information saved in one big bundle
93

93

00:07:11.290  -->  00:07:16.170
to save you time from basically making a variable 
for every single piece of information.
94

94

00:07:16.170  -->  00:07:22.810
We only did four things, but what if I wanted to associate a zip code
95

95

00:07:22.810  -->  00:07:26.480
with every single phone number in that area code?
96

96

00:07:26.480  -->  00:07:29.420
Well, then we have thousands, and thousands, and thousands,
97

97

00:07:29.420  -->  00:07:31.580
I'm not going to make a variable for every single one and then
98

98

00:07:31.580  -->  00:07:34.050
type out the name of every single variable every single time.
99

99

00:07:34.050  -->  00:07:38.430
It's much easier to just make one of these and it's one big storage container.
100

100

00:07:38.430  -->  00:07:44.970
Then, depending on which one I want to 
pull out, if I didn't want to just display all of them,
101

101

00:07:44.970  -->  00:07:47.070
maybe I want to display the second one and not the first one,
102

102

00:07:47.070  -->  00:07:51.080
well, you have to do that by changing what is called a pointer,
103

103

00:07:51.080  -->  00:07:54.410
and in your computer's memory, as it's running through the code,
104

104

00:07:54.410  -->  00:07:59.880
it will have in its head essentially which of these items
105

105

00:07:59.880  -->  00:08:03.850
is going to come out in the first position, if it were just generically called.
106

106

00:08:03.850  -->  00:08:04.790
Hopefully, that makes sense.
107

107

00:08:04.790  -->  00:08:08.230
Explaining this in a non-technical way is very, very difficult, keep in mind.
108

108

00:08:08.230  -->  00:08:10.190
Questions or concerns, just post in the Q&A,
109

109

00:08:10.190  -->  00:08:12.080
otherwise we're going to move on to the next concept.
