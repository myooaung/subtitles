1
1

00:00:00,000  -->  00:00:02,030
Hey guys, welcome back to the course.
2

2

00:00:02,030  -->  00:00:05,080
So, this lecture, we're going to talk about another advanced concept,
3

3

00:00:05,080  -->  00:00:08,010
and it's called continuous integration.
4

4

00:00:08,010  -->  00:00:12,320
All right, so you need to understand what I mean by integration, right?
5

5

00:00:12,320  -->  00:00:15,890
Integration, especially in programming sense, refers to when
6

6

00:00:15,890  -->  00:00:19,700
I write some code, and you write some code, how do we integrate them together?
7

7

00:00:19,700  -->  00:00:22,430
Or how do I integrate something I've written into something
8

8

00:00:22,430  -->  00:00:25,390
that's large and already existed, like a content management system?
9

9

00:00:25,390  -->  00:00:29,560
Now, this is a big problem in the development world.
10

10

00:00:29,560  -->  00:00:33,500
One of the biggest issues is that in large team environments,
11

11

00:00:33,500  -->  00:00:36,140
even medium-sized team environments,
12

12

00:00:36,140  -->  00:00:40,740
when you're working on an app, the basic rules of division of labor would say that
13

13

00:00:40,740  -->  00:00:43,880
one person works on one thing, and then another person is in charge of another thing,
14

14

00:00:43,880  -->  00:00:45,310
and then another person is in charge of another thing.
15

15

00:00:45,310  -->  00:00:46,720
Let's say we're making a mobile app.
16

16

00:00:46,720  -->  00:00:49,620
One person might make the home screen, the other person might
17

17

00:00:49,620  -->  00:00:54,230
figure out how to integrate Stripe for payments, and the other person might
18

18

00:00:54,230  -->  00:00:58,060
do something else, set up another API, let's say with Facebook.
19

19

00:00:58,060  -->  00:01:01,260
Ok, that's all fine and dandy, but what happens at the end of the day
20

20

00:01:01,260  -->  00:01:05,270
when you take those three things and see if they work together well?
21

21

00:01:05,270  -->  00:01:09,300
That is what is humorously referred to as "integration hell,"
22

22

00:01:09,300  -->  00:01:14,450
and it apparently takes up an enormous amount 
of time for developers that have to do it.
23

23

00:01:14,450  -->  00:01:17,980
If you ever had two people write a paper on the same topic,
24

24

00:01:17,980  -->  00:01:21,390
and then you had to figure out on how you could combine the two,
25

25

00:01:21,390  -->  00:01:24,150
it's an entirely new process in and of itself.
26

26

00:01:24,150  -->  00:01:28,700
So one of the solutions is a concept that's called continuous integration,
27

27

00:01:28,700  -->  00:01:34,530
and it's actually part of a system protocol that includes continuous delivery,
28

28

00:01:34,530  -->  00:01:37,830
continuous deployment, and continuous integration.
29

29

00:01:37,830  -->  00:01:41,520
We're going to kind of refer to it all as continuous integration.
30

30

00:01:41,520  -->  00:01:45,540
So the idea behind continuous integration is that you make a somewhat elaborate
31

31

00:01:45,540  -->  00:01:50,510
server setup that can automatically do these integrations for you.
32

32

00:01:50,510  -->  00:01:55,290
The way that it solves this is by making everyone check in more often.
33

33

00:01:55,290  -->  00:01:58,620
In the original version, one person makes something, and when it's done,
34

34

00:01:58,620  -->  00:02:01,400
they say "Hey, it's done, let's stick it together with your other piece."
35

35

00:02:01,400  -->  00:02:05,200
With the continuous integration, instead, you actually check in
36

36

00:02:05,200  -->  00:02:09,380
and see if what you're making, even if it's incomplete, fits with the rest of
37

37

00:02:09,380  -->  00:02:13,120
what everybody else is making, and what's already been made in the application.
38

38

00:02:13,120  -->  00:02:14,850
And the way they do this from a technical perspective,
39

39

00:02:14,850  -->  00:02:17,000
we're not going to get too detailed about this,
40

40

00:02:17,000  -->  00:02:21,040
they set up two different servers, one is called a version control server,
41

41

00:02:21,040  -->  00:02:23,180
and the other one is called a build server.
42

42

00:02:23,180  -->  00:02:26,280
The idea here is that several times throughout the day,
43

43

00:02:26,280  -->  00:02:31,550
people will take what they're working on and 
stick it up into what's called a version control server.
44

44

00:02:31,550  -->  00:02:36,860
Then, the build server is basically designed 
to constantly look at the version control server
45

45

00:02:36,860  -->  00:02:42,870
and see if the things that are being uploaded fit, see if the code executes properly,
46

46

00:02:42,870  -->  00:02:48,580
see if there are errors, or something pops up, or there are just general issues,
47

47

00:02:48,580  -->  00:02:53,970
and when it finds something like that, it usually will notify people immediately.
48

48

00:02:53,970  -->  00:02:56,280
Then, when it happens, pretty much everyone stops,
49

49

00:02:56,280  -->  00:02:59,050
and then they look at the problem, and they try to solve it.
50

50

00:02:59,050  -->  00:03:02,820
That's infinitely better than trying to solve large problems
51

51

00:03:02,820  -->  00:03:05,890
after everyone's built what they're trying to make,
52

52

00:03:05,890  -->  00:03:09,760
versus check in more often when the problems are smaller.
53

53

00:03:09,760  -->  00:03:13,250
So really the idea is just to speed up the process of development,
54

54

00:03:13,250  -->  00:03:19,000
because it limits how long you have to spend 
checking if Jimmy's code matches Timmy's code.
55

55

00:03:19,000  -->  00:03:24,780
It's kind of a miniature project in and of itself, 
and that's why a lot of places don't use it.
56

56

00:03:24,780  -->  00:03:27,450
It's usually something that you see with larger companies.
57

57

00:03:27,450  -->  00:03:32,770
The usual method that people use to make apps is they'll just use
58

58

00:03:32,770  -->  00:03:36,500
a test server and a live server, so when you build something,
59

59

00:03:36,500  -->  00:03:41,000
you put it on the test and then you just see how it operates in the wild, in a browser,
60

60

00:03:41,000  -->  00:03:44,960
and with users, and if it works, then you move it over in batches to the live server,
61

61

00:03:44,960  -->  00:03:48,030
which is what people see when they go to the actual URL.
62

62

00:03:48,030  -->  00:03:49,290
So just keep that in mind.
63

63

00:03:49,290  -->  00:03:55,730
Continuous integration is a system to make large 
team development much easier and faster,
64

64

00:03:55,730  -->  00:03:59,210
but it's not something that usually you see with smaller teams,
65

65

00:03:59,210  -->  00:04:02,580
because it takes a lot of time to set up and operate.
66

66

00:04:02,580  -->  00:04:04,210
There are also some other downsides to it.
67

67

00:04:04,210  -->  00:04:08,560
A lot of people don't like to work in a start-stop, start-stop, start-stop way,
68

68

00:04:08,560  -->  00:04:12,050
and also it kind of has this prisoner dilemma problem, where
69

69

00:04:12,050  -->  00:04:16,100
let's say in a team of ten, and nine people are putting their code up
70

70

00:04:16,100  -->  00:04:20,450
every single day the correct way, and one person is just not doing it.
71

71

00:04:20,450  -->  00:04:22,930
Well, in that case, it actually defeats the whole purpose,
72

72

00:04:22,930  -->  00:04:25,000
because still at the end of the day it's like,
73

73

00:04:25,000  -->  00:04:28,100
"Oh man, we have to take that tenth person's stuff and integrate it
74

74

00:04:28,100  -->  00:04:31,580
with everybody else's stuff," and you hate that tenth person.
75

75

00:04:31,580  -->  00:04:33,600
So that's really all it is.
76

76

00:04:33,600  -->  00:04:36,800
It's a process to speed up development for large teams, such that
77

77

00:04:36,800  -->  00:04:42,320
you don't have to spend as much time figuring 
out if people's code match other people's code,
78

78

00:04:42,320  -->  00:04:44,820
the idea here is that it saves you money,
79

79

00:04:44,820  -->  00:04:48,690
you can spend that money and that time you saved on other things.
80

80

00:04:48,690  -->  00:04:50,260
All right guys, see you in the next lecture!
