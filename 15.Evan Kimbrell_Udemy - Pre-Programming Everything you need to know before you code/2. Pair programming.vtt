WEBVTT
1
1

00:00:00.000  -->  00:00:01.140
Hey guys, welcome back.
2

2

00:00:01.140  -->  00:00:04.900
So the next trend that we're going to discuss is what's called pair programming.
3

3

00:00:04.900  -->  00:00:08.620
Now, typically, when you think of someone making an application and programming,
4

4

00:00:08.620  -->  00:00:13.080
you think of someone sitting there in their pajamas, staring at a black screen
5

5

00:00:13.080  -->  00:00:19.660
with white text for very long periods of time, and just kind of talking to themselves silently.
6

6

00:00:19.660  -->  00:00:25.530
And that is kind of the standard way of doing it, but that is changing.
7

7

00:00:25.530  -->  00:00:28.560
What's making it change is a concept called pair programming.
8

8

00:00:28.560  -->  00:00:32.840
Now, the basics of how this works is opposed to one person sitting down,
9

9

00:00:32.840  -->  00:00:37.400
working on an application and doing their programming,
10

10

00:00:37.400  -->  00:00:41.270
you actually have two people sat at the same exact place.
11

11

00:00:41.270  -->  00:00:43.600
I've seen it in some cases when you sit behind them,
12

12

00:00:43.600  -->  00:00:45.420
and you alternate, or something like that.
13

13

00:00:45.420  -->  00:00:50.890
The idea is two people will write one piece of code.
14

14

00:00:50.890  -->  00:00:53.450
Now, I know that's a little weird, right?
15

15

00:00:53.450  -->  00:00:56.060
Aren't you just going to step on each other's toes?
16

16

00:00:56.060  -->  00:01:00.400
Why do you need to share a computer? 
Are you running out of computers?
17

17

00:01:00.400  -->  00:01:04.670
No, actually it's something that is designed to increase quality.
18

18

00:01:04.670  -->  00:01:08.210
Do you remember how we talked about bugs and debugging,
19

19

00:01:08.210  -->  00:01:12.840
and how architecture makes such a huge difference in applications?
20

20

00:01:12.840  -->  00:01:16.580
Well, the idea here is that if you have two sets of eyes on something,
21

21

00:01:16.580  -->  00:01:20.620
then the chance of you coming out with something that doesn't work
22

22

00:01:20.620  -->  00:01:24.490
or creates problems down the road is just much less likely.
23

23

00:01:24.490  -->  00:01:27.560
Now, doesn't that mean slower development?
24

24

00:01:27.560  -->  00:01:30.120
Well, yeah, in general it does.
25

25

00:01:30.120  -->  00:01:33.830
You won't get as many features done as quickly.
26

26

00:01:33.830  -->  00:01:36.400
But it does have two prominent upsides.
27

27

00:01:36.400  -->  00:01:41.670
One, the code quality improves, that means less time fixing it, it means
28

28

00:01:41.670  -->  00:01:46.810
it's easier for people to learn it, and just in 
general, it's going to have better performance.
29

29

00:01:46.810  -->  00:01:52.640
The second benefit is that by pairing developers together, they learn from each other.
30

30

00:01:52.640  -->  00:01:56.120
So, often times, what you'll see is a senior developer with a junior,
31

31

00:01:56.120  -->  00:02:01.260
and the junior, just by doing this process, they 
learn an enormous amount from the senior.
32

32

00:02:01.260  -->  00:02:04.050
It's also just the case that everybody thinks differently,
33

33

00:02:04.050  -->  00:02:09.160
and so being exposed to that can make you learn quite efficiently.
34

34

00:02:09.160  -->  00:02:11.730
There's actually a pretty well-known quote, it's by Mark Zuckerberg,
35

35

00:02:11.730  -->  00:02:14.000
he said something along the lines of
36

36

00:02:14.000  -->  00:02:19.710
he would take one great programmer over 100 good programmers any day.
37

37

00:02:19.710  -->  00:02:22.470
Now, the basic sentiment behind that statement is similar
38

38

00:02:22.470  -->  00:02:25.650
to the reason why people use pair programming.
39

39

00:02:25.650  -->  00:02:31.360
Code is designed to essentially replace what humans would traditionally have done.
40

40

00:02:31.360  -->  00:02:34.300
So if you have better design, and you have a great engineer
41

41

00:02:34.300  -->  00:02:38.030
who has a great way of thinking through big problems,
42

42

00:02:38.030  -->  00:02:43.400
that's actually better than having a large team that can produce things quickly,
43

43

00:02:43.400  -->  00:02:46.640
but it's not going to be of the highest quality.
44

44

00:02:46.640  -->  00:02:48.900
Now, remember, when you're building something, you don't know if tomorrow
45

45

00:02:48.900  -->  00:02:52.900
you're going to have to pivot and change entirely what your app or your business does,
46

46

00:02:52.900  -->  00:02:55.700
and you also don't know if you might blow up in size.
47

47

00:02:55.700  -->  00:02:58.920
What's going to happen when this thing you made for 100 users
48

48

00:02:58.920  -->  00:03:02.950
now needs 10 million users to be accommodated?
49

49

00:03:02.950  -->  00:03:09.960
In general, it's better to do it right in a slow fashion than do it ok quickly.
50

50

00:03:09.960  -->  00:03:12.560
Now, the best way of thinking about pair programming is if you are someone
51

51

00:03:12.560  -->  00:03:16.830
who is going to go into programming, you should have some familiarity with it.
52

52

00:03:16.830  -->  00:03:21.770
It's a fantastic way to learn how to communicate, especially with another developer,
53

53

00:03:21.770  -->  00:03:26.780
which is something that you're going to have to do 
on a job regardless, so it's a great litmus test.
54

54

00:03:26.780  -->  00:03:32.020
If you're someone that's going into programming 
as a business, development businesses,
55

55

00:03:32.020  -->  00:03:37.280
pair programming is not going to be used 
as often, because you're more budget conscious.
56

56

00:03:37.280  -->  00:03:40.830
The only time we've ever used pair programming at Sprintkick was
57

57

00:03:40.830  -->  00:03:44.360
with big applications that had a long timeline.
58

58

00:03:44.360  -->  00:03:48.030
All right, so the next time you walk through a building, and you see two people
59

59

00:03:48.030  -->  00:03:52.040
programming on the same screen, sitting next to each other, like they're dating,
60

60

00:03:52.040  -->  00:03:56.340
that's pair programming, and it's something that you should be familiar with.
61

61

00:03:56.340  -->  00:03:57.950
All right guys, see you in the next lecture!
