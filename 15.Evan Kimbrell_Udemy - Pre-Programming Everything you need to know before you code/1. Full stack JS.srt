1
1

00:00:00,000  -->  00:00:02,010
Hey guys, welcome back to the course.
2

2

00:00:02,010  -->  00:00:05,830
This lecture, we're going to talk about one of the bigger trends
3

3

00:00:05,830  -->  00:00:09,450
that will last 2-3 years, which is called full stack JavaScript.
4

4

00:00:09,450  -->  00:00:12,440
Now, you remember what we said about JavaScript before,
5

5

00:00:12,440  -->  00:00:16,690
JavaScript, up until this point, has been pretty squarely
6

6

00:00:16,690  -->  00:00:22,360
a technology that works on your browser, and not on your server.
7

7

00:00:22,360  -->  00:00:25,160
Remember, JavaScript, interaction.
8

8

00:00:25,160  -->  00:00:29,900
Button clicking, form submitting, motions, animations, those kind of things
9

9

00:00:29,900  -->  00:00:32,180
are what we always think of when we think of JavaScript.
10

10

00:00:32,180  -->  00:00:38,280
Now, that all changed recently with the advent of what's called Node.js.
11

11

00:00:38,280  -->  00:00:45,620
Now, Node.js is not a library, it's not even a framework, it's a system
12

12

00:00:45,620  -->  00:00:52,910
that allows you to create an environment on your browser and then test your JavaScript.
13

13

00:00:52,910  -->  00:00:56,620
For some reason, and I'm not technical enough to give you this answer,
14

14

00:00:56,620  -->  00:00:58,430
and I don't even think you need to know this, but
15

15

00:00:58,430  -->  00:01:03,800
that innovation has allowed people to use JavaScript both on the front-end,
16

16

00:01:03,800  -->  00:01:06,280
on the browser, to deal with elements on the page,
17

17

00:01:06,280  -->  00:01:11,580
and also on the back-end, to do the traditional 
job you'd see back-end languages doing,
18

18

00:01:11,580  -->  00:01:18,350
like querying databases, or making calculations, or pulling information from APIs.
19

19

00:01:18,350  -->  00:01:23,680
The reason why Node has been able to be 
created is because Google recently came out
20

20

00:01:23,680  -->  00:01:31,400
with what they called the V8 JavaScript engine, 
and it at first ran exclusively on Google Chrome,
21

21

00:01:31,400  -->  00:01:34,870
so at first, you could only do this on Google 
Chrome, and now it's on the other browsers.
22

22

00:01:34,870  -->  00:01:37,000
Now, you might not be technical enough to appreciate this,
23

23

00:01:37,000  -->  00:01:43,240
but this is a very big change in programming, and if it's a trend that sticks,
24

24

00:01:43,240  -->  00:01:46,310
it's going to turn everything pretty much upside down.
25

25

00:01:46,310  -->  00:01:47,650
The reason why I say that is, well,
26

26

00:01:47,650  -->  00:01:51,680
so many people have spent so long learning back-end languages,
27

27

00:01:51,680  -->  00:01:57,750
learning how to do everything using traditional 
languages, like Python, and PHP, and Ruby,
28

28

00:01:57,750  -->  00:02:02,290
and if it's such the case that company start using full stack JavaScript,
29

29

00:02:02,290  -->  00:02:06,320
just using JavaScript on the front and the back,
30

30

00:02:06,320  -->  00:02:10,640
well, then, essentially, a lot of people are going to have obsolete skills.
31

31

00:02:10,640  -->  00:02:15,580
Now, the obvious advantage to using full stack JavaScript 
is that you only have to know one language,
32

32

00:02:15,580  -->  00:02:20,000
so if you're someone who learned the front-end, 
you don't have to learn a new language
33

33

00:02:20,000  -->  00:02:25,450
to now learn how to do basic back-end functions, and have a full control of your app.
34

34

00:02:25,450  -->  00:02:27,180
Now, something that's worth knowing is that
35

35

00:02:27,180  -->  00:02:31,450
this new type of JavaScript is called asynchronous JavaScript.
36

36

00:02:31,450  -->  00:02:36,720
What that means is that when a browser reads that index file,
37

37

00:02:36,720  -->  00:02:40,930
the first page it sees on a website, or a web app,
38

38

00:02:40,930  -->  00:02:44,530
it reads it from top to bottom, it executes the code at the top,
39

39

00:02:44,530  -->  00:02:47,900
then it goes to the middle, then it goes all the way to the bottom.
40

40

00:02:47,900  -->  00:02:53,450
With JavaScript, you originally could insert actions and interactions that could run,
41

41

00:02:53,450  -->  00:02:57,780
check something, and then change the code further down the page,
42

42

00:02:57,780  -->  00:03:02,710
so it can actually interact with you as you're using 
it without having to refresh the page.
43

43

00:03:02,710  -->  00:03:06,550
Asynchronous JavaScript is kind of a step even past that,
44

44

00:03:06,550  -->  00:03:10,090
and it's through a thing called multi-threading, which basically means that
45

45

00:03:10,090  -->  00:03:15,760
when the browser tries to run that code, the JavaScript actually will be running
46

46

00:03:15,760  -->  00:03:20,070
several things simultaneously as it goes through,
47

47

00:03:20,070  -->  00:03:23,000
so you could be pulling information from the back-end,
48

48

00:03:23,000  -->  00:03:25,640
checking basic validation on the front-end,
49

49

00:03:25,640  -->  00:03:29,480
and kind of completing the whole package all in one page.
50

50

00:03:29,480  -->  00:03:34,380
Now, from a practical standpoint, what do you need to know about full stack JavaScript?
51

51

00:03:34,380  -->  00:03:39,160
Now, I obviously take it from the web development business angle,
52

52

00:03:39,160  -->  00:03:42,290
which is that if you're trying to work in a web development firm,
53

53

00:03:42,290  -->  00:03:46,820
or you're someone who's making a decision about should we use traditional methods
54

54

00:03:46,820  -->  00:03:51,440
of application development, or this new thing called full stack JavaScript,
55

55

00:03:51,440  -->  00:03:55,370
I tend to focus on the efficiency.
56

56

00:03:55,370  -->  00:04:00,210
Full stack JavaScript has a lot of potential, but as it currently stands,
57

57

00:04:00,210  -->  00:04:04,600
it's actually still underdeveloped, it's made leaps and bounds,
58

58

00:04:04,600  -->  00:04:09,720
but, for instance, full stack JavaScript doesn't work very well with databases.
59

59

00:04:09,720  -->  00:04:15,440
If you use information that you need to save 
and pull all the time, it's actually really inefficient.
60

60

00:04:15,440  -->  00:04:20,350
Also, in general, my experience with it is that it will take someone longer
61

61

00:04:20,350  -->  00:04:23,460
to do something in full stack JavaScript than if they just did it
62

62

00:04:23,460  -->  00:04:27,240
in regular JavaScript plus an actual back-end language.
63

63

00:04:27,240  -->  00:04:32,070
The great things about this new JavaScript abilities is that you can see
64

64

00:04:32,070  -->  00:04:36,050
cooler and cooler things, especially with full stack JavaScript.
65

65

00:04:36,050  -->  00:04:41,690
What ends up happening is now we can make pages reload significantly faster.
66

66

00:04:41,690  -->  00:04:45,220
It almost kind of has the feeling as if it's instant.
67

67

00:04:45,220  -->  00:04:47,260
So that's really what you need to know.
68

68

00:04:47,260  -->  00:04:53,350
It can make some really cool effects on your page, it could potentially up-end
69

69

00:04:53,350  -->  00:04:56,870
a lot of people who know traditional programming,
70

70

00:04:56,870  -->  00:05:01,640
but at the same time it's still not efficient enough,
71

71

00:05:01,640  -->  00:05:05,270
and because of that reason, it hasn't yet become the mainstream,
72

72

00:05:05,270  -->  00:05:09,500
but don't hold your breath, it could actually change everything.
73

73

00:05:09,500  -->  00:05:13,050
And that's what we mean when we say that JavaScript is eating everything.
74

74

00:05:13,050  -->  00:05:14,700
All right guys, see you in the next lecture!
