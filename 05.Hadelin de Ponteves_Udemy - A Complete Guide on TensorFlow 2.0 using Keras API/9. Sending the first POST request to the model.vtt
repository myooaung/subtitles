WEBVTT
1
00:00:00.600 --> 00:00:03.910
Hello everyone and welcome to this python tutorial.

2
00:00:03.960 --> 00:00:07.410
I'm incredibly excited that we are finally in this lesson.

3
00:00:07.560 --> 00:00:13.590
Until this point we went from easy to hard stuff and everything was building up for this lesson right

4
00:00:13.590 --> 00:00:13.950
now.

5
00:00:14.890 --> 00:00:21.630
So far we didn't have a chance to test our image classification API by setting data to it.

6
00:00:21.790 --> 00:00:24.380
In this video we're going to do just that.

7
00:00:24.420 --> 00:00:29.710
We are going to send a random moment from our test set to the model and then receive some predictions

8
00:00:29.710 --> 00:00:38.580
from it let's start by building our first post to request let us begin from the headers when sending

9
00:00:38.580 --> 00:00:41.110
a request from a browsers to a server.

10
00:00:41.160 --> 00:00:48.320
There is an essential part of that request called headers the headers is nothing more than a string

11
00:00:48.350 --> 00:00:50.400
that gives information to a server.

12
00:00:50.660 --> 00:00:56.120
What type of information or data is should expect to send or receive.

13
00:00:56.360 --> 00:01:05.190
For example each the email CSX JavaScript files or in our case Jason data on the browser side.

14
00:01:05.190 --> 00:01:13.200
It uses this information to prepare it to process a file in a certain way let's define headers for our

15
00:01:13.200 --> 00:01:18.020
API right headers equal to python dictionary.

16
00:01:18.330 --> 00:01:26.130
It always has the same key content dash type and for a value we need to specify what type of file are

17
00:01:26.130 --> 00:01:28.560
we going to send in our case.

18
00:01:28.590 --> 00:01:32.190
Just put application slash Jason.

19
00:01:32.550 --> 00:01:39.080
Since we are sending Jason data to our server now that we have our data in our header.

20
00:01:39.100 --> 00:01:46.390
It's time to send our first post request and that is the most exciting part of this lesson let's define

21
00:01:46.400 --> 00:01:47.150
a new variable.

22
00:01:47.150 --> 00:01:50.910
Call Jason response and that is equal to requests.

23
00:01:50.990 --> 00:01:53.360
Our library not post.

24
00:01:53.750 --> 00:01:59.930
Since we are sending some data to a server in the post request we have to provide a few things.

25
00:01:59.990 --> 00:02:03.830
We have our model your URL which is our first argument.

26
00:02:03.830 --> 00:02:07.130
Then we have data and that is our data object.

27
00:02:07.130 --> 00:02:11.000
Then we have this Jason which is not important for us right now.

28
00:02:11.000 --> 00:02:18.500
And Heather's as the last argument that we have to provide says you're all is equal to Asia's GDP column

29
00:02:18.530 --> 00:02:20.890
slash slash local host.

30
00:02:21.140 --> 00:02:23.570
And then we need to specify our report.

31
00:02:23.900 --> 00:02:30.590
If you remember when we defined tens of flow serving coal we set our report for the model in our case

32
00:02:30.620 --> 00:02:36.120
it is 8 5 0 1 slash we 1.

33
00:02:36.240 --> 00:02:44.270
Since this is the first version of the API slash models and that is the name of the folder slash C4

34
00:02:44.300 --> 00:02:44.970
10.

35
00:02:45.120 --> 00:02:51.830
And if you remember that is the model name that we defined as well then we need to set column predict

36
00:02:53.090 --> 00:02:59.130
and that is our whole Euro then provide data is equal to data.

37
00:02:59.330 --> 00:03:02.220
And lastly said headers equaled headers.

38
00:03:02.720 --> 00:03:03.880
Execute a cell.

39
00:03:03.930 --> 00:03:09.050
And as you can see we received the first official results from our model.

40
00:03:09.050 --> 00:03:16.500
How exciting is that but if we print our results we receive something very strange response.

41
00:03:16.560 --> 00:03:17.870
200.

42
00:03:17.980 --> 00:03:19.700
What does it mean.

43
00:03:19.720 --> 00:03:25.060
Well when you're working with internet requests there are some predefined numbers that indicate the

44
00:03:25.060 --> 00:03:27.250
status of our response.

45
00:03:27.250 --> 00:03:33.930
For example if we misspell our U.R.L. we are going to get that error called for 0 4.

46
00:03:33.940 --> 00:03:39.460
Or if you're forbidden access to a certain page you're going to get for free.

47
00:03:39.460 --> 00:03:45.550
However if everything is okay we are going to get a response two hundred and that is what we want to

48
00:03:45.550 --> 00:03:51.090
see now that we know that let success predictions from our response.

49
00:03:51.210 --> 00:03:51.590
Right.

50
00:03:51.590 --> 00:03:52.410
Predictions.

51
00:03:52.490 --> 00:03:57.580
Equal to Jason got loads since we received Jason as well and provide.

52
00:03:57.620 --> 00:04:05.430
Jason responds that text and let us only accept the prediction key from our Jason object.

53
00:04:05.480 --> 00:04:11.820
Let's bring them out for this image we have received 96 percent for this class.

54
00:04:11.870 --> 00:04:18.310
However at this point we only know the accuracy but we still don't know if the prediction is correct.

55
00:04:18.320 --> 00:04:26.470
Let's visualize our image and print out the name of our highest or most certain class let's write BLT

56
00:04:26.470 --> 00:04:33.530
Dot I'm show and then set x test of random image and let's executed.

57
00:04:33.670 --> 00:04:40.380
As you can see this is the image of a course let's make sure that our network has predicted the horse

58
00:04:40.530 --> 00:04:45.510
as the class with the highest accuracy to do this right.

59
00:04:45.510 --> 00:04:52.020
Class names and that is our array of all class names and we only need to access an index of a class

60
00:04:52.440 --> 00:04:55.890
where the probability is the highest to do this.

61
00:04:55.890 --> 00:05:01.290
Let's access the index with the highest value from our predictions right.

62
00:05:01.290 --> 00:05:08.180
MP dot ARG marks of predictions as you can see it is array inside another array.

63
00:05:08.340 --> 00:05:12.380
Just put zero of it after predictions and execute it.

64
00:05:12.790 --> 00:05:16.890
And now you can see that our API worked perfectly.

65
00:05:16.890 --> 00:05:20.390
It recognizes horse now that we know.

66
00:05:20.400 --> 00:05:21.390
Official results.

67
00:05:21.390 --> 00:05:27.510
I want to congratulate you for building your awesome scalable classification API that can be scaled

68
00:05:27.520 --> 00:05:31.030
in use by millions or even billions of users.

69
00:05:31.050 --> 00:05:33.900
This is very high achievement in the world of deep learning.

70
00:05:35.570 --> 00:05:37.100
And that's it for this video.

71
00:05:37.130 --> 00:05:41.040
If you have any questions or comments please post them in the comments section.

72
00:05:41.120 --> 00:05:43.040
Otherwise I've seen the next tutorial.
