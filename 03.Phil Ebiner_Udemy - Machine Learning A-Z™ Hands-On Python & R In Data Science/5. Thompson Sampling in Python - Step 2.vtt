WEBVTT
1
00:00:00.280 --> 00:00:00.560
All right.

2
00:00:00.570 --> 00:00:01.410
Let's do this.

3
00:00:01.490 --> 00:00:03.690
Let's implement Thompson sampling.

4
00:00:03.810 --> 00:00:09.120
So we already initialize you know the main parameters which are part of the common framework between

5
00:00:09.210 --> 00:00:10.940
Thompson sampling and UCB.

6
00:00:10.980 --> 00:00:16.980
So this is n the total number of rounds or the total number of users to whom we're gonna show successively

7
00:00:17.190 --> 00:00:17.900
the ads.

8
00:00:18.060 --> 00:00:22.830
And then we have the number of ads which is 10 here we're dealing with 10 different designs of ads which

9
00:00:22.830 --> 00:00:27.220
we are experimenting to figure out which one has the highest conversion rate.

10
00:00:27.220 --> 00:00:32.610
And then we have this list which is initialized as an empty list but which will be populated over the

11
00:00:32.610 --> 00:00:34.770
rounds with different ads that we select.

12
00:00:34.770 --> 00:00:39.090
So at the end it will contain all the different ads that were selected at each round.

13
00:00:39.560 --> 00:00:44.380
And now now what we're about to code is specific to Thompson sampling.

14
00:00:44.430 --> 00:00:45.360
So there we go.

15
00:00:45.360 --> 00:00:47.460
We're going to start with the first step.

16
00:00:47.460 --> 00:00:55.980
Step one which says that at each round n we actually consider two numbers for each ad I and I won and

17
00:00:56.010 --> 00:01:03.140
which is a number of times to add I got we were won up to round n and and I 0 n number of times the

18
00:01:03.140 --> 00:01:05.910
ad I got rewards 0 up to round then.

19
00:01:05.940 --> 00:01:12.070
So basically what we have to do in this step one is create two variables here for these two numbers.

20
00:01:12.180 --> 00:01:18.990
And we have to initialize them of course as 0 0 4 both because of course before we begin in the first

21
00:01:18.990 --> 00:01:19.530
round.

22
00:01:19.530 --> 00:01:24.860
Well these two numbers are equal to zero because the ad didn't get any reward at all.

23
00:01:24.870 --> 00:01:26.960
So that's what I would like you to do.

24
00:01:27.060 --> 00:01:30.820
And since you know these numbers are for each ad I.

25
00:01:31.020 --> 00:01:37.170
Well what we're going to do is we will create a list of 10 elements where each element is indeed this

26
00:01:37.170 --> 00:01:38.930
number for each of the ads.

27
00:01:38.940 --> 00:01:39.400
Right.

28
00:01:39.420 --> 00:01:40.320
And same for this one.

29
00:01:40.620 --> 00:01:48.120
So now your turn please press buzz on the video and create two variables which will initialize these

30
00:01:48.120 --> 00:01:54.850
two lists of numbers and you can call these two lists first for this one you can call it number as a

31
00:01:54.870 --> 00:02:01.160
reward one with on this course and for this one you can call it numbers of rewards zero.

32
00:02:01.170 --> 00:02:01.560
OK.

33
00:02:01.710 --> 00:02:05.580
So please press pause and I'll give you the solution in a second.

34
00:02:05.580 --> 00:02:06.490
OK good.

35
00:02:06.600 --> 00:02:07.890
Let's do this together.

36
00:02:07.890 --> 00:02:12.220
So as we said we want to introduce two new variables which will be two lists.

37
00:02:12.240 --> 00:02:17.380
First for the numbers of times each ad gets the reward one.

38
00:02:17.490 --> 00:02:23.580
And we're going to call that numbers of rewards 1.

39
00:02:23.760 --> 00:02:24.460
All right.

40
00:02:24.480 --> 00:02:29.400
And as we said we want to initialize it as a list of 10 elements.

41
00:02:29.400 --> 00:02:32.130
And all these elements should be initialized to 0.

42
00:02:32.160 --> 00:02:35.370
Because at the beginning no ad got any reward.

43
00:02:35.370 --> 00:02:35.990
Right.

44
00:02:36.000 --> 00:02:42.180
And remember the trick to initialize a list of 10 zeros it is to put a zero here in square brackets

45
00:02:42.510 --> 00:02:45.330
and then multiply this by G.

46
00:02:45.860 --> 00:02:46.230
OK.

47
00:02:46.680 --> 00:02:53.360
And then very simply for the other list you know corresponding to these numbers.

48
00:02:53.400 --> 00:02:59.610
Well same we're going to call that numbers of reward not one but zero.

49
00:02:59.880 --> 00:03:03.600
And same we initialize it as a list of 10 zeros.

50
00:03:03.630 --> 00:03:10.080
And over the rounds the elements of these lists will be populated for this one as soon as an ad receives

51
00:03:10.170 --> 00:03:10.620
a reward.

52
00:03:10.620 --> 00:03:15.270
One in which case we increment the element corresponding to the ad by one.

53
00:03:15.390 --> 00:03:19.380
And same for this one each time an ad gets a reward rewards zero.

54
00:03:19.390 --> 00:03:22.830
We increment the element corresponding to this ad in the list.

55
00:03:22.830 --> 00:03:23.440
OK.

56
00:03:23.500 --> 00:03:28.290
Very simply and that's the two parameters specific to Thompson simply.

57
00:03:28.290 --> 00:03:29.420
So if you've got this too.

58
00:03:29.460 --> 00:03:32.610
Well congratulations you just implemented step 1.

59
00:03:33.210 --> 00:03:33.690
All right.

60
00:03:33.810 --> 00:03:36.180
So now according to you what do we have to do.

61
00:03:36.390 --> 00:03:37.780
Well not yet.

62
00:03:37.830 --> 00:03:43.920
The big four loop remember that we also want to keep the accumulated reward that we well you know accumulate

63
00:03:43.950 --> 00:03:44.880
over time.

64
00:03:44.880 --> 00:03:50.550
And we're going to introduce the same variable as in UCB you know could have even kept it in a framework.

65
00:03:50.730 --> 00:03:53.910
But remember that variable is total reward.

66
00:03:53.910 --> 00:03:59.490
So here we introduce the same new variable which of course we initialize still to zero.

67
00:03:59.520 --> 00:04:01.810
And now now we can start the for loop.

68
00:04:01.820 --> 00:04:07.800
You know that main for loop which will iterate through all the 10000 rounds in each.

69
00:04:07.800 --> 00:04:12.990
We will show an ad to a user which will decide to click yes or no on the ad.

70
00:04:13.050 --> 00:04:13.980
And so there we go.

71
00:04:13.990 --> 00:04:17.350
Let's stop this loop so it's exactly the same as in the UCB.

72
00:04:17.460 --> 00:04:18.630
We start with four.

73
00:04:18.720 --> 00:04:24.540
Then we choose and for the iterative variable because same and represents the rounds and then and we'll

74
00:04:24.540 --> 00:04:33.630
go in the range from same zero because indexes in both and start from zero up to n right the total number

75
00:04:33.630 --> 00:04:40.480
of rounds or the total number of customers or users to whom we show successively theat and then colon.

76
00:04:40.750 --> 00:04:41.670
And there we go.

77
00:04:41.670 --> 00:04:44.820
Here we are inside this big first for loop.

78
00:04:44.820 --> 00:04:45.090
All right.

79
00:04:45.090 --> 00:04:48.180
So according to you what will be the first step here.

80
00:04:48.180 --> 00:04:50.700
You know there is a second full loop coming up.

81
00:04:50.700 --> 00:04:53.960
It is the follow that will iterate through the different ads.

82
00:04:54.030 --> 00:05:01.300
But before this we need to introduce a new variable which we already did in the UCB Ed. remember we

83
00:05:01.300 --> 00:05:07.690
need to introduce that variable which will be the ad that we select at each front end and as in the

84
00:05:07.690 --> 00:05:12.500
UCB implementation we will introduce that variable as ad right.

85
00:05:12.610 --> 00:05:17.580
Ad which will be the index of the ad that will be selected at each round.

86
00:05:18.030 --> 00:05:23.560
And we initialize this to zero because you know we're gonna have that second for loop that will iterate

87
00:05:23.560 --> 00:05:27.250
through different ads starting from zero up to the last one of index nine.

88
00:05:27.460 --> 00:05:34.000
Okay then let's have a look at the algorithm and let's see if we need to introduce a new variable you

89
00:05:34.000 --> 00:05:36.410
know before we start this second for loop.

90
00:05:36.460 --> 00:05:42.700
I remind that you know for UCB we indeed had to introduce a new variable here which was Max or about

91
00:05:42.730 --> 00:05:48.520
you know we introduced Max Appelbaum and initialized it to zero before we started the second loop.

92
00:05:48.520 --> 00:05:48.960
Okay.

93
00:05:49.300 --> 00:05:50.380
So here that's kind of the same.

94
00:05:50.380 --> 00:05:56.890
Let's see if we have to introduce a new variable other than add 1 before starting the second for loop.

95
00:05:56.890 --> 00:06:02.890
And well you know when we have a look at step three here we see that indeed we select the add that has

96
00:06:02.890 --> 00:06:08.620
the highest of these random draws you know taken from the beta distributions and therefore there is

97
00:06:08.620 --> 00:06:11.680
still a maximum value to consider here.

98
00:06:11.830 --> 00:06:17.920
And that's exactly what we will introduce as a new variable just before starting this second loop that

99
00:06:17.920 --> 00:06:21.970
new variable will be exactly that maximum of the random draws.

100
00:06:22.030 --> 00:06:29.410
And we're going to call it Max underscore random okay Max random which we will initialize of course

101
00:06:29.410 --> 00:06:30.820
to zero.

102
00:06:30.820 --> 00:06:33.810
And now now we can start the second for loop.

103
00:06:33.820 --> 00:06:36.030
All right so let's do this try to do it faster than me.

104
00:06:36.040 --> 00:06:37.850
You know exactly how to do it.

105
00:06:37.870 --> 00:06:38.890
We start with four.

106
00:06:39.070 --> 00:06:42.040
Then you know the iterated variable will still be I.

107
00:06:42.070 --> 00:06:47.350
Which will iterate through the different ads from 0 to 9 because they're the indexes.

108
00:06:47.350 --> 00:06:55.910
So for I in the range from indeed 0 to well deep because we had the divide both for the number of ads

109
00:06:56.500 --> 00:07:03.760
and then column and there we go now is the time we implement the next step in the Thompson sampling

110
00:07:03.880 --> 00:07:04.760
algorithm.

111
00:07:04.870 --> 00:07:08.860
I'm talking of course about step two where for each ad I.

112
00:07:08.980 --> 00:07:15.130
Well that's exactly what this second full loop is about you know it will implement Step Two for each

113
00:07:15.220 --> 00:07:17.820
of the ad I from zero to 9.

114
00:07:17.860 --> 00:07:25.090
And so for each of these ads we take a random draw from the beta distribution given below of parameters

115
00:07:25.330 --> 00:07:32.800
and I N plus 1 where n n is of course number of times that I got we were one of to run n and the second

116
00:07:32.800 --> 00:07:39.790
parameter and I 0 and plus 1 were and I 0 n is of course a number of times to add I got we were 0 up

117
00:07:39.790 --> 00:07:40.710
to round n.

118
00:07:40.810 --> 00:07:47.710
So that means you can totally implement the Step 2 on your own because you have all the parameters right.

119
00:07:47.710 --> 00:07:50.410
We already introduced these two new variables.

120
00:07:50.410 --> 00:07:52.090
We initialize them the right way.

121
00:07:52.090 --> 00:07:55.420
And so now you can totally implement Step 2 on your own.

122
00:07:55.420 --> 00:07:58.110
Before we do it together I will just give you a hint.

123
00:07:58.180 --> 00:08:03.550
Unless you don't want to listen to it and look into the documentation online which is even better.

124
00:08:03.640 --> 00:08:05.520
But I'll give you that hint anyway.

125
00:08:05.620 --> 00:08:11.800
The way to get the random draw from a better distribution of these parameters is given by a certain

126
00:08:11.800 --> 00:08:18.340
function of well this random library which we by the way already imported in our implementation that

127
00:08:18.340 --> 00:08:24.160
random library while this random library contains a certain function which can give you exactly what

128
00:08:24.160 --> 00:08:29.260
you want here meaning a random draw from the beta distribution of any parameters.

129
00:08:29.260 --> 00:08:36.040
And that function is called Beta variant in one word BTC a V A r i ATP.

130
00:08:36.260 --> 00:08:36.550
Okay.

131
00:08:36.580 --> 00:08:37.530
So that's the function.

132
00:08:37.540 --> 00:08:38.710
That's all I'm going to tell you.

133
00:08:38.960 --> 00:08:44.290
And so now you can really implement this step two on your own so please press bus on this video and

134
00:08:44.290 --> 00:08:47.630
will implement a solution together in a few seconds.

135
00:08:47.680 --> 00:08:48.300
All right.

136
00:08:48.370 --> 00:08:49.090
Are you ready.

137
00:08:49.090 --> 00:08:50.500
I hope you got it correct.

138
00:08:50.500 --> 00:08:54.810
Really there is no trap so it should be totally fine but let's do this.

139
00:08:54.820 --> 00:08:59.560
So here we are at the beginning of the second full loop iterating through the different ad and so what

140
00:08:59.560 --> 00:09:02.190
we have to do is collect for each of these.

141
00:09:02.190 --> 00:09:09.070
At this particular number taken as a random draw of this beta distribution called with these parameters.

142
00:09:09.310 --> 00:09:10.430
So let's do this.

143
00:09:10.460 --> 00:09:15.130
First we're going to introduce a new variable which will be exactly that random draw.

144
00:09:15.130 --> 00:09:18.690
And we're gonna call it random underscore theta.

145
00:09:18.940 --> 00:09:20.460
So that's exactly the random draw.

146
00:09:20.460 --> 00:09:27.100
Taken from the beta distribution of these two parameters so random beta and then as I told you the way

147
00:09:27.310 --> 00:09:31.280
to get the random draw from the beta distribution of certain parameters.

148
00:09:31.420 --> 00:09:40.020
Well we first need to call the random library from which we're going to call the beta variant function.

149
00:09:40.030 --> 00:09:40.580
All right.

150
00:09:40.660 --> 00:09:41.750
That's the function.

151
00:09:41.840 --> 00:09:45.720
And inside this function well of course we input these two parameters.

152
00:09:45.820 --> 00:09:49.580
And I N plus 1 and i n 0 plus 1.

153
00:09:49.780 --> 00:09:54.220
And since right now we're dealing with a specific add you know the ADD I.

154
00:09:54.220 --> 00:09:59.430
In the second for loop so it start from zero and then goes to 1 2 3 etc. up to 9.

155
00:09:59.470 --> 00:10:05.720
Well these two parameters that we have to enter are for this specific ad I meaning for the specific

156
00:10:05.930 --> 00:10:10.140
index i in these two numbers and I want end an icy ruin.

157
00:10:10.290 --> 00:10:10.940
Okay.

158
00:10:11.030 --> 00:10:19.640
And therefore the way to get these two numbers is by calling our list of numbers of rewards one in the

159
00:10:19.640 --> 00:10:25.830
number of times each ad and especially are at I we're dealing with right now got the reward one.

160
00:10:25.940 --> 00:10:32.870
So we take this list we pasted inside this beta void function as the first parameter.

161
00:10:32.870 --> 00:10:38.810
And then of course we take the index I write because we're dealing right now with this specific had

162
00:10:38.900 --> 00:10:47.490
I in this second for loop and then forget the plus one and then same for the second parameter that's

163
00:10:47.490 --> 00:10:54.500
going to be the number of times this particular ad I we're dealing with right now in the second loop

164
00:10:54.770 --> 00:10:57.580
has received the reward zero.

165
00:10:57.590 --> 00:11:04.640
So here I'm basing that but I don't forget to take the index I have this at I.

166
00:11:04.730 --> 00:11:07.340
And then of course I add plus 1.

167
00:11:07.440 --> 00:11:07.950
Okay.

168
00:11:08.000 --> 00:11:10.760
And that's it that's all you had to do for this.

169
00:11:10.760 --> 00:11:11.650
Step two.

170
00:11:11.660 --> 00:11:18.140
So you see it's actually a bit simpler than the UCB algorithm but now I trust that you're going to use

171
00:11:18.140 --> 00:11:23.510
the same right trick to implement Step Three because indeed in his step three we have to select the

172
00:11:23.510 --> 00:11:26.410
add that has the highest of these random draws.

173
00:11:26.420 --> 00:11:32.840
You know we took 10 successive random draws for each of these add but inside the same for loop that

174
00:11:32.840 --> 00:11:39.500
is iterating through the add we need to use a trick to keep in memory the highest of these random draws.

175
00:11:39.500 --> 00:11:43.710
And at the end of the full loop we'll get the final highest of these random draws.

176
00:11:43.730 --> 00:11:51.290
So the trick that you have to use is exactly the same as in UCB you're going to use of course this variable

177
00:11:51.320 --> 00:11:56.900
Max random which we introduced and initialized to zero right before this second for loop and you're

178
00:11:56.900 --> 00:12:03.710
going to use it to keep in memory over this second for loop Well the maximum of these random draws.

179
00:12:03.740 --> 00:12:09.560
So that's the new exercise for you your new exercise is basically to implement step three with that

180
00:12:09.560 --> 00:12:16.100
same trick we already learned in the UCB implementation and now see you in the next material to implement

181
00:12:16.190 --> 00:12:17.530
the solution with you.

182
00:12:17.560 --> 00:12:19.400
And until then enjoy machine learning.
