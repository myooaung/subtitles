1
00:00:00,180 --> 00:00:00,840
Hello my friends.

2
00:00:00,840 --> 00:00:02,680
Welcome back to this implementation.

3
00:00:02,760 --> 00:00:08,910
Are you ready to start that big full loop which will iterate through all the rounds in all the 10000

4
00:00:09,000 --> 00:00:14,700
rounds meaning the 10000 customers to which we're going to show the ad and therefore in this loop at

5
00:00:14,700 --> 00:00:15,480
each step.

6
00:00:15,480 --> 00:00:18,300
Well we have to implement the three steps here.

7
00:00:18,300 --> 00:00:23,610
Well we already implemented step 1 but we have to implement step two and step three at each iteration

8
00:00:23,790 --> 00:00:24,800
of the loop.

9
00:00:24,900 --> 00:00:25,600
Let's do this.

10
00:00:25,650 --> 00:00:28,670
Let's start this for loop starting with 4.

11
00:00:28,740 --> 00:00:32,580
Then we need to choose a variable name for you know that iterated variable.

12
00:00:32,580 --> 00:00:38,430
And this time instead of calling it I you know as the classic name we will call it in because clearly

13
00:00:38,550 --> 00:00:45,830
what we are iterating through are the round in the round from round one the first user to round 10000

14
00:00:45,950 --> 00:00:47,640
the last user to whom we should be at.

15
00:00:47,980 --> 00:00:48,230
Okay.

16
00:00:48,240 --> 00:00:49,720
So for n n.

17
00:00:49,830 --> 00:00:56,250
And then of course range from zero because you know indexes in Python start from zero up to.

18
00:00:56,460 --> 00:01:02,070
And here you can either put 10000 but we already put 10000 in a variable so let's put and so that you

19
00:01:02,070 --> 00:01:06,230
know then if you want to try another number of rounds you can just change the value of n here.

20
00:01:06,300 --> 00:01:11,100
Okay so for n in range from 0 to n then Colin and there we go.

21
00:01:11,130 --> 00:01:12,940
Let's start that for loop.

22
00:01:12,960 --> 00:01:13,160
All right.

23
00:01:13,160 --> 00:01:15,810
So I'm gonna scroll down a bit you know from here.

24
00:01:15,810 --> 00:01:16,780
Perfect.

25
00:01:16,860 --> 00:01:17,600
And there we go.

26
00:01:17,610 --> 00:01:18,480
Let's do this.

27
00:01:18,480 --> 00:01:18,780
All right.

28
00:01:18,810 --> 00:01:20,910
So what do we need to start with.

29
00:01:21,210 --> 00:01:27,060
Well you know right now what we want you know what we ultimately want you know within this particular

30
00:01:27,120 --> 00:01:31,100
iteration of number and what we want is to select and that right.

31
00:01:31,110 --> 00:01:35,670
We want to select and add and we're going to select it according to these steps you know we will select

32
00:01:35,670 --> 00:01:39,470
the add it has the maximum UCB upper confidence bound.

33
00:01:39,510 --> 00:01:46,090
So the first thing that we'll do is start from the first ad you know ad number one but since we're going

34
00:01:46,090 --> 00:01:49,360
to work with indexes the index of this ad will be zero.

35
00:01:49,380 --> 00:01:56,610
So I'm going to start from this ad equals zero here I'm introducing of course a new variable ad which

36
00:01:56,610 --> 00:02:02,730
is initialized as zero but then you're going to see that we will do a second for loop which will loop

37
00:02:02,970 --> 00:02:08,370
over all the different ads one by one you know starting from this one at number one of index zero then

38
00:02:08,370 --> 00:02:14,910
going to this one at number two of index 1 and etc. up to add 10 because indeed in order to get the

39
00:02:14,910 --> 00:02:20,640
maximum upper confidence bound we will need to compare the upper confidence bound of each of these ads

40
00:02:20,670 --> 00:02:26,090
and therefore we'll have to iterate through each of these ads to find the maximum upper confidence balance.

41
00:02:26,100 --> 00:02:32,130
And that's why right now I'm initializing this new ad Bible a zero to start with ad number one and then

42
00:02:32,130 --> 00:02:36,720
we'll compute the UCB of this ad number one and then through the for loop you know we will get the other

43
00:02:36,810 --> 00:02:41,620
upper confidence bounce and we will get the maximum one you see the idea very simple.

44
00:02:41,700 --> 00:02:46,440
We just have to follow you know a certain logic where we know that the ultimate goal is to select the

45
00:02:46,440 --> 00:02:49,340
ad that has the highest upper confidence mount.

46
00:02:49,440 --> 00:02:49,970
All right.

47
00:02:49,980 --> 00:02:53,750
So then do you think we have to already start that second for loop.

48
00:02:54,030 --> 00:02:55,260
Well almost.

49
00:02:55,260 --> 00:02:57,530
But we need to do something else.

50
00:02:57,570 --> 00:03:03,360
We need to introduce a new variable which will be you know that maximum of the upper confidence bound

51
00:03:03,390 --> 00:03:08,370
because for each of the add through that second for loop we will compute the upper confidence bound.

52
00:03:08,430 --> 00:03:12,560
But in order to compare them to the maximum upper confidence bound.

53
00:03:12,720 --> 00:03:18,380
Well a smart thing to do would be to introduce a new variable here that will be that maximum upper confidence

54
00:03:18,390 --> 00:03:22,270
bound and which will be compared to each of the U.S. because of the ads.

55
00:03:22,380 --> 00:03:26,950
And therefore here I'm introducing a new variable which I'm gonna call Max.

56
00:03:27,420 --> 00:03:30,120
Let's say upper bound.

57
00:03:30,120 --> 00:03:30,780
All right.

58
00:03:30,810 --> 00:03:34,760
And which I'm initializing to zero because indeed at the beginning.

59
00:03:34,800 --> 00:03:39,440
Well let's say that the maximum you know the highest upper confidence bound is zero.

60
00:03:39,450 --> 00:03:44,680
And then of course once we get an ad that has a higher up we convince abandoned zero.

61
00:03:44,760 --> 00:03:50,400
We will update this value of Max upper bound to this new higher output continues down.

62
00:03:50,430 --> 00:03:50,670
All right.

63
00:03:50,670 --> 00:03:53,130
So all logic here then.

64
00:03:53,190 --> 00:03:54,460
Now we can start to.

65
00:03:54,470 --> 00:03:59,570
You know the second loop that will iterate through the different ad from one to 10.

66
00:03:59,580 --> 00:04:05,310
So there we go we start the second for loop for then a new looping variable you know iterated variable

67
00:04:05,310 --> 00:04:07,060
which we're going to call this time of course.

68
00:04:07,110 --> 00:04:11,290
Well either ad but ad is already taken you know that's already an existing variable.

69
00:04:11,370 --> 00:04:20,190
So let's just choose I for I in range from zero because indexes and by then start 0 up to either 10

70
00:04:20,190 --> 00:04:25,710
here or you know D because we already introduced that D variable which is equal to 10.

71
00:04:25,740 --> 00:04:31,260
And if you want to do that same UCB implementation on a different number of ads imagine you have you

72
00:04:31,260 --> 00:04:37,590
know five hours or even 50 AD while you simply have to change that deep value here and nowhere else.

73
00:04:37,590 --> 00:04:40,850
All right so that's the purpose of introducing these variables here.

74
00:04:40,860 --> 00:04:43,860
So for I in range from zero g and there we go.

75
00:04:43,890 --> 00:04:49,530
We can start the second full loop and it is now in the second for loop that we will really implement

76
00:04:49,710 --> 00:04:51,230
each of these steps.

77
00:04:51,240 --> 00:04:57,060
So now now is the time you're going to press pause on the video to indeed implement that.

78
00:04:57,060 --> 00:05:00,660
Step two First I would like you to implement from scratch.

79
00:05:00,670 --> 00:05:00,810
No.

80
00:05:00,810 --> 00:05:03,300
You can totally do this because you have everything here.

81
00:05:03,310 --> 00:05:05,610
I would like you to implement that step too.

82
00:05:05,620 --> 00:05:11,320
You have also all the variables so it should be all fine and then don't implement Step 3 because that

83
00:05:11,320 --> 00:05:13,390
will be done for next exercise.

84
00:05:13,390 --> 00:05:17,590
And besides it is not that direct you know we will have to use a certain trick in order to implement

85
00:05:17,590 --> 00:05:18,390
that step 3.

86
00:05:18,430 --> 00:05:19,060
All right.

87
00:05:19,060 --> 00:05:23,290
So please implement Step 2 now please press bus on the video and implement Step 2.

88
00:05:23,440 --> 00:05:25,570
But let me just give you two hints.

89
00:05:25,600 --> 00:05:30,130
You know because maybe you will encounter issues with something in this part as you can see you'll have

90
00:05:30,130 --> 00:05:36,820
to compute the square root of that value here and you have to know that in order to use the square root

91
00:05:36,850 --> 00:05:42,520
in Python you have to import a certain library which is simply called the math library and from which

92
00:05:42,520 --> 00:05:45,880
you can use a lot of mathematical tools like the square root.

93
00:05:45,880 --> 00:05:51,400
So actually let's do it right now so that it's done we can either imported here or you know since I

94
00:05:51,400 --> 00:05:53,470
prefer to keep the essential libraries here.

95
00:05:53,560 --> 00:05:57,320
Let's just import it at the beginning of this implementation.

96
00:05:57,400 --> 00:05:57,780
All right.

97
00:05:57,790 --> 00:05:58,830
Right here.

98
00:05:58,960 --> 00:06:03,180
So that it's done you know so that you can be ready to use that square root function.

99
00:06:03,190 --> 00:06:06,700
And then I will let you of course look in the documentation online.

100
00:06:06,700 --> 00:06:08,510
What is the exact function name.

101
00:06:08,560 --> 00:06:09,190
So math.

102
00:06:09,190 --> 00:06:10,210
There we go.

103
00:06:10,210 --> 00:06:15,640
And then the second hint I wanted to give you was the fact that you have to start the step two with

104
00:06:15,820 --> 00:06:17,040
an if condition.

105
00:06:17,140 --> 00:06:17,380
Right.

106
00:06:17,380 --> 00:06:23,260
Because at the beginning no add was selected and therefore this you know this quantity is equal to zero

107
00:06:23,290 --> 00:06:24,580
for all the ads.

108
00:06:24,580 --> 00:06:25,820
And if this is equal to zero.

109
00:06:25,870 --> 00:06:29,530
This doesn't make sense you know it will be equal to plus infinity.

110
00:06:29,530 --> 00:06:34,400
So you have to start with this if condition to make sure that the add we're dealing with in the second

111
00:06:34,400 --> 00:06:38,400
full loop was already selected so that this is different than zero.

112
00:06:38,410 --> 00:06:39,790
And this exists.

113
00:06:39,790 --> 00:06:43,090
And so that then you can indeed compute the confidence interval.

114
00:06:43,090 --> 00:06:44,750
All right so that was the last hint.

115
00:06:44,800 --> 00:06:46,130
And now your turn.

116
00:06:46,210 --> 00:06:50,350
Please press pause in the video and please implement this step 2.

117
00:06:50,710 --> 00:06:51,060
All right.

118
00:06:51,060 --> 00:06:51,580
Perfect.

119
00:06:51,700 --> 00:06:54,790
So now let's implement the solution together of the step two.

120
00:06:55,270 --> 00:06:55,570
All right.

121
00:06:55,600 --> 00:07:04,750
So as we said we have to actually start here with an if condition that will check if the add we're dealing

122
00:07:04,750 --> 00:07:08,710
with right now you know the add of index I has already been selected.

123
00:07:08,710 --> 00:07:12,610
It's not the case at the beginning you know but over the round it will be the case you know the ads

124
00:07:12,700 --> 00:07:14,010
will already have been selected.

125
00:07:14,020 --> 00:07:18,790
But at the beginning for the first round we need to check that indeed the ad has been selected.

126
00:07:18,790 --> 00:07:20,890
So in order to check this well that's very simple.

127
00:07:20,890 --> 00:07:24,070
You know we have these variables that gives for each of the ads.

128
00:07:24,280 --> 00:07:26,710
How many times they have been selected so far.

129
00:07:26,710 --> 00:07:33,280
You know at round end up to round n and therefore we're going to take this now you know and then we

130
00:07:33,280 --> 00:07:36,430
will check that the index I.

131
00:07:36,550 --> 00:07:42,070
Which is the index of the ad we're dealing with right now in this numbers of selections list well we're

132
00:07:42,070 --> 00:07:49,000
going to check that the element of index I in this numbers of selections list is indeed larger than

133
00:07:49,210 --> 00:07:55,290
0 because if it is larger than 0 then that means that the ad was indeed already selected at least once.

134
00:07:55,300 --> 00:07:56,040
Okay.

135
00:07:56,050 --> 00:08:01,610
And now if you want but that's totally optional you can put this condition in parentheses right.

136
00:08:01,720 --> 00:08:07,060
And then you add just a column and now now you're gonna say to python what should happen or what must

137
00:08:07,060 --> 00:08:09,530
happen if indeed that at I.

138
00:08:09,550 --> 00:08:13,710
Which we're dealing with right now in the second for loop was already selected.

139
00:08:13,750 --> 00:08:14,050
All right.

140
00:08:14,140 --> 00:08:19,350
So now now is it time we can implement all this because indeed this is different than zero.

141
00:08:19,360 --> 00:08:20,860
This is larger than zero.

142
00:08:20,890 --> 00:08:23,910
So very simply let's just follow this step by step.

143
00:08:23,920 --> 00:08:28,780
First let's you know create a new variable for this which we're going to call average reward you know

144
00:08:28,810 --> 00:08:34,180
because this corresponds to an average of the reward because it is the accumulated reward here of this

145
00:08:34,270 --> 00:08:38,050
add up to run and divided by the number of times it was selected.

146
00:08:38,080 --> 00:08:39,760
So that's nothing else than an average.

147
00:08:39,940 --> 00:08:46,300
And therefore let's create a new variable here which we're gonna call average underscore reward.

148
00:08:47,080 --> 00:08:49,520
And it is simply going to be equal to.

149
00:08:49,660 --> 00:08:56,710
Well the accumulated reward of that specific ad I up to round n which is given exactly thanks to this

150
00:08:56,860 --> 00:09:03,130
variable here of which we're going to have to take the index I write that at I which we're dealing with

151
00:09:03,130 --> 00:09:03,920
right now.

152
00:09:03,970 --> 00:09:09,290
So I'm basing that here and I'm taking of course in pair of square brackets the index I.

153
00:09:09,400 --> 00:09:16,570
Because this you know all this corresponds exactly to the accumulated reward of that specific ad I up

154
00:09:16,570 --> 00:09:17,310
to run in.

155
00:09:17,440 --> 00:09:18,010
Okay.

156
00:09:18,160 --> 00:09:19,970
So some of rewards I.

157
00:09:19,990 --> 00:09:26,710
And then of course we need to divide that by the number of times that same ad I was selected.

158
00:09:26,710 --> 00:09:29,710
And this is given of course by this again.

159
00:09:29,710 --> 00:09:30,210
Right.

160
00:09:30,250 --> 00:09:33,130
The numbers of selections of index I.

161
00:09:33,160 --> 00:09:37,660
Which corresponds to the number of times the out of index I was selected.

162
00:09:37,660 --> 00:09:41,900
And that gives you exactly the average reward that gives you exactly that value here.

163
00:09:41,920 --> 00:09:42,590
Okay.

164
00:09:42,640 --> 00:09:43,990
So very easy so far.

165
00:09:44,050 --> 00:09:49,160
Then next step the next step is to get the confidence interval.

166
00:09:49,270 --> 00:09:51,690
And more specifically we're going to get that value.

167
00:09:51,690 --> 00:09:54,550
So right now we're going to compute this value here.

168
00:09:55,270 --> 00:09:55,690
All right.

169
00:09:55,690 --> 00:09:57,990
So let's simply call it Delta.

170
00:09:58,090 --> 00:10:03,450
You know as a new variable Delta underscore I equals.

171
00:10:03,450 --> 00:10:04,350
And now there you go.

172
00:10:04,350 --> 00:10:09,480
That's where you needed to take that square root function from the math library.

173
00:10:09,480 --> 00:10:12,570
So first we have to call indeed that math library.

174
00:10:12,570 --> 00:10:13,550
And from which.

175
00:10:13,560 --> 00:10:16,740
Well we need to call this function that allows to compute the square root.

176
00:10:16,830 --> 00:10:22,400
And I'm sure you've found very easily online that this function is called as Q R T.

177
00:10:22,530 --> 00:10:24,740
And then parentheses right.

178
00:10:24,750 --> 00:10:30,030
This computes the square root of a value and the value we have to put inside this function is of course

179
00:10:30,210 --> 00:10:36,840
exactly this you know three divided by two multiplied by the legality of the round and divided by the

180
00:10:36,840 --> 00:10:39,720
number of times that I was selected up to round n.

181
00:10:39,780 --> 00:10:40,180
Okay.

182
00:10:40,210 --> 00:10:41,330
So let's do this.

183
00:10:41,400 --> 00:10:47,380
First we start with this three divided by two then multiplied by then.

184
00:10:47,430 --> 00:10:51,930
There you go you need to call the luck function which is another function of this mass library.

185
00:10:51,960 --> 00:10:54,420
So actually this math library is used twice.

186
00:10:54,420 --> 00:10:58,640
I'm calling it now to indeed be able to call that log function.

187
00:10:58,770 --> 00:11:04,290
And now inside this log function well be careful maybe I should have given you another hint here but

188
00:11:04,290 --> 00:11:07,710
be careful we can not input end here.

189
00:11:07,710 --> 00:11:08,700
Why is that.

190
00:11:08,700 --> 00:11:09,860
That's because actually.

191
00:11:09,900 --> 00:11:14,470
And you know in this range here this first range starts from zero.

192
00:11:14,490 --> 00:11:20,430
The first value of n is zero and that's you know because of the indexes in Python and you have to know

193
00:11:20,430 --> 00:11:24,150
that the logarithm of 0 is actually minus infinity.

194
00:11:24,150 --> 00:11:28,920
Therefore it would be very dangerous here to only put n in order to protect us from this.

195
00:11:28,950 --> 00:11:31,650
We're just going to start from one.

196
00:11:31,670 --> 00:11:32,310
Okay.

197
00:11:32,400 --> 00:11:37,560
That's one way to do this the other way is of course to you know make that first for loop going from

198
00:11:37,800 --> 00:11:42,480
one to and plus one so that we can go indeed from round one to and plus one.

199
00:11:42,510 --> 00:11:46,440
But you know with Python we always work with the same indexes starting from zero.

200
00:11:46,500 --> 00:11:49,400
So that's why we go with the first option here.

201
00:11:49,410 --> 00:11:49,670
All right.

202
00:11:49,680 --> 00:11:51,080
So all good so far.

203
00:11:51,090 --> 00:11:57,810
And then of course we have to divide that by Well let's look at it again the number of times the ad

204
00:11:57,870 --> 00:12:00,270
I was selected up to round in.

205
00:12:00,360 --> 00:12:03,410
And that's of course exactly this value.

206
00:12:03,780 --> 00:12:08,580
So I'm copying this again and pasting that here and there we go very quickly.

207
00:12:08,580 --> 00:12:16,830
We got our Delta I we got exactly this value and now we have a final value to compute which is of course

208
00:12:16,860 --> 00:12:20,240
well you know that long awaited upper confidence bound.

209
00:12:20,400 --> 00:12:22,460
That's exactly what we have to compute right now.

210
00:12:22,620 --> 00:12:27,990
And it is going to be simply the sum of that average reward plus that delta here.

211
00:12:27,990 --> 00:12:35,010
So let's hear at a new line of code and then introduce a new variable which we're going to call upper

212
00:12:35,220 --> 00:12:42,150
underscore bound not Max upper bound but upper bound and which will simply be equal to the sum of the

213
00:12:42,240 --> 00:12:44,660
average reward.

214
00:12:44,660 --> 00:12:45,670
There we go.

215
00:12:45,680 --> 00:12:50,120
Plus the Delta high end perfect.

216
00:12:50,120 --> 00:12:55,400
And now you know thanks to this for loop the second full of iterating through all the ads from zero

217
00:12:55,400 --> 00:12:58,050
to nine but from and number one and number 10.

218
00:12:58,100 --> 00:12:59,690
Well we have the upper Bell.

219
00:12:59,750 --> 00:13:04,670
We have the upper bound of each of these add and the upper bound at that specific round.

220
00:13:04,700 --> 00:13:07,950
And we're dealing with right now inside this first for loop.

221
00:13:07,970 --> 00:13:11,790
All right so basically we're done implementing this step two.

222
00:13:12,320 --> 00:13:17,750
We implemented a step two and we even got that value here you know the upper bound but now step three

223
00:13:17,750 --> 00:13:23,530
is not implemented yet because it did step three consist of selecting the add that has a maximum Brooke

224
00:13:23,550 --> 00:13:24,240
conference.

225
00:13:24,380 --> 00:13:30,500
So now we need to add one trick you know which is kind of classic in Python but do we need to add one

226
00:13:30,500 --> 00:13:35,150
trick to select the maximum upper confidence bound of these ten at.

227
00:13:35,240 --> 00:13:36,980
So going back to here.

228
00:13:37,190 --> 00:13:43,460
Well we will surely take a little break here and actually I will directly ask you to try to implement

229
00:13:43,460 --> 00:13:48,230
that step three you know between this literal and the next one before you start the next material.

230
00:13:48,260 --> 00:13:50,530
Please try to implement step three.

231
00:13:50,870 --> 00:13:55,820
It's not that direct it's not that easy but you know you have to use some kind of algorithmic logic.

232
00:13:55,930 --> 00:13:56,300
Okay.

233
00:13:56,510 --> 00:14:00,710
But I'll give you of course some hints unless you don't want to hence and therefore you can directly

234
00:14:01,010 --> 00:14:05,790
press pause or quit this video now but I'm going to give you some hints if you want the first hand.

235
00:14:05,810 --> 00:14:12,470
Is that right now you're done with this if condition so you can go back here you know inside this second

236
00:14:12,470 --> 00:14:16,210
full loop and then you're gonna have to start with of course and else.

237
00:14:16,280 --> 00:14:16,700
Right.

238
00:14:16,730 --> 00:14:22,530
Which is the condition where you know that ad we're dealing with right now has not been selected yet.

239
00:14:22,550 --> 00:14:29,570
So what you'll have to do and that's my last hint will be to use a trick to select the ads that have

240
00:14:29,570 --> 00:14:30,990
not been selected yet.

241
00:14:31,010 --> 00:14:32,840
Why do you need to select these ads.

242
00:14:32,840 --> 00:14:34,260
Well the answer is here.

243
00:14:34,280 --> 00:14:35,960
That's exactly because of this.

244
00:14:35,990 --> 00:14:39,590
You know this denominator which shouldn't be equal to zero.

245
00:14:39,590 --> 00:14:47,030
And since this is exactly the number of times the ad I was selected well we need this to be different

246
00:14:47,030 --> 00:14:53,060
than zero in order to compute this average reward and therefore in order to compute then the confidence

247
00:14:53,090 --> 00:14:56,150
interval with the upper confidence balance.

248
00:14:56,180 --> 00:15:03,410
And that's why in the UCB algorithm it's compulsory to make sure that during the first round all the

249
00:15:03,410 --> 00:15:04,520
ads are selected.

250
00:15:04,530 --> 00:15:11,390
So actually during the first 10 rounds we have to use a trick so that we make sure to select all the

251
00:15:11,510 --> 00:15:17,390
ads so that this way well all that and I end here you know for all the different ads will be different

252
00:15:17,390 --> 00:15:18,170
than zero.

253
00:15:18,230 --> 00:15:18,610
Okay.

254
00:15:18,860 --> 00:15:25,080
So basically the exercise for next time you know the next material is to indeed implement that step

255
00:15:25,090 --> 00:15:28,710
three to compute the maximum of the upper confidence balance.

256
00:15:28,730 --> 00:15:36,170
Well at the same time implementing a trick to make sure that all the ads are selected in the 10 first

257
00:15:36,170 --> 00:15:36,540
rounds.

258
00:15:36,770 --> 00:15:41,560
So pretty challenging but at least try at least try as hard as you can.

259
00:15:41,600 --> 00:15:45,770
And I promise you that you will progress and improve your skills in machine learning.
