WEBVTT
1
00:00:00.210 --> 00:00:06.060
Hello my friends and welcome back to the final step of this implementation of the upper confidence bound

2
00:00:06.120 --> 00:00:07.120
algorithm.

3
00:00:07.140 --> 00:00:13.800
We actually already implemented the algorithm itself in this cell implementing UCB and now we can just

4
00:00:13.970 --> 00:00:19.590
you know sit comfortably in our chair and visualize the results because indeed implementing this final

5
00:00:19.590 --> 00:00:21.390
set will be super easy.

6
00:00:21.390 --> 00:00:27.420
We just have to plot a histogram and make a nice title to the chart and also some labels for the x axis

7
00:00:27.810 --> 00:00:28.530
and the y axis.

8
00:00:28.560 --> 00:00:31.400
So let's do this let's create a new code cell here.

9
00:00:31.410 --> 00:00:33.510
I'm gonna scroll down a bit.

10
00:00:33.510 --> 00:00:33.990
All right.

11
00:00:34.380 --> 00:00:35.430
And there we go.

12
00:00:35.550 --> 00:00:37.200
Let's plot that histogram.

13
00:00:37.230 --> 00:00:43.200
So just to make sure we all understand this histogram will plot for each of the add.

14
00:00:43.200 --> 00:00:45.980
Well the number of times it was selected.

15
00:00:46.080 --> 00:00:52.140
So on the x axis we will have the different adds you know from not one to 10 but you know zero to nine

16
00:00:52.170 --> 00:00:55.340
because we work with indexes and they start from zero.

17
00:00:55.380 --> 00:01:00.660
And on the y axis will have the number of times each of these add was selected.

18
00:01:01.110 --> 00:01:01.400
All right.

19
00:01:01.410 --> 00:01:07.740
So the good news now is that you know we already have the tool we need to plot such a histogram which

20
00:01:07.740 --> 00:01:09.830
is made plotted by plot.

21
00:01:09.900 --> 00:01:12.700
And for this we gave a shortcut named Pete LTE.

22
00:01:12.750 --> 00:01:19.030
So that's what we're going to start with P L T going mentality that by blood and from which we're going

23
00:01:19.030 --> 00:01:26.040
to call a specific function from this bipolar module which is the Hist function and as you might guess

24
00:01:26.310 --> 00:01:29.880
well this his function can plot any histogram.

25
00:01:29.880 --> 00:01:30.390
All right.

26
00:01:30.510 --> 00:01:36.680
So let's add some parenthesis and now according to you what do we have to plot in this hist function.

27
00:01:36.690 --> 00:01:37.940
Well that's actually easy.

28
00:01:37.950 --> 00:01:43.560
You know if we scroll down here you can see the parameters the only parameters that will need is this

29
00:01:43.560 --> 00:01:49.110
one X and this is supposed to be you know either an array or a sequence of arrays.

30
00:01:49.110 --> 00:01:54.750
Basically it's going to be a list of values which will be the values on the y axis of the Instagram.

31
00:01:54.810 --> 00:01:55.360
Right.

32
00:01:55.440 --> 00:02:03.450
And therefore what we simply need to input here in our histogram is you know this variable at selected

33
00:02:03.480 --> 00:02:09.660
which would create it which contains indeed the sequence of add that were selected over the round.

34
00:02:09.690 --> 00:02:17.640
So keep in mind at selected is a list of 10000 elements where each element is the add that was selected

35
00:02:17.730 --> 00:02:18.880
at a particular round.

36
00:02:18.900 --> 00:02:25.230
You know the end element of this at selected list is the add that was selected at random you know shown

37
00:02:25.230 --> 00:02:26.120
to the user.

38
00:02:26.280 --> 00:02:26.930
All right.

39
00:02:26.970 --> 00:02:31.510
And this is exactly what it's supposed to be the input of this hist function.

40
00:02:31.560 --> 00:02:35.070
So let's just paste that inside and there we go.

41
00:02:35.070 --> 00:02:36.470
Basically here the job is done.

42
00:02:36.480 --> 00:02:38.670
This will plot the histogram.

43
00:02:38.790 --> 00:02:41.640
However of course we want to make it nice and to make it nice.

44
00:02:41.640 --> 00:02:48.270
Well you know we will just add a title to this plot and we will choose you know in quotes this title

45
00:02:48.270 --> 00:02:53.790
to be histogram of ad selections.

46
00:02:53.820 --> 00:03:01.140
All right then we're going to add a nice label to the x axis and the function for this remember is X

47
00:03:01.560 --> 00:03:02.220
label.

48
00:03:02.220 --> 00:03:04.100
Same as the plot function actually.

49
00:03:04.110 --> 00:03:10.380
So X label and in parentheses well we'll give in quote a nice label to the x axis.

50
00:03:10.440 --> 00:03:16.470
And since the x axis corresponds to the different ad you know from 0 to 9 because of the Python indexes

51
00:03:16.860 --> 00:03:19.860
Well we'll set this X label as at.

52
00:03:19.920 --> 00:03:26.970
Okay then same for the Y label and in parentheses we will enter in quotes.

53
00:03:26.970 --> 00:03:27.860
Well this time.

54
00:03:28.410 --> 00:03:38.080
Well let's make it very clear you know let's just input number of times each ad was selected.

55
00:03:38.080 --> 00:03:40.300
All right so that it is 100 percent clear.

56
00:03:40.320 --> 00:03:47.640
And finally remember we have to end with P. LTE that show to display the graph in the output of the

57
00:03:47.640 --> 00:03:48.400
notebook.

58
00:03:48.430 --> 00:03:49.080
Okay.

59
00:03:49.260 --> 00:03:50.940
So we're done.

60
00:03:50.940 --> 00:03:54.840
Do you understand what is expected is here right in the histogram.

61
00:03:54.840 --> 00:04:02.460
It is expected you know if the UCB algorithm was powerful it is expected that one of the ad was selected

62
00:04:02.580 --> 00:04:08.730
the most you know was selected way more than the others because the goal of the UCB algorithm is to

63
00:04:08.730 --> 00:04:14.490
quickly you know is to as fast as possible identify the ad that has the highest CAGR and once it is

64
00:04:14.490 --> 00:04:17.790
identified well only this ad will be selected.

65
00:04:17.790 --> 00:04:18.050
OK.

66
00:04:18.060 --> 00:04:23.250
So we should see one ad that was selected way more than the others.

67
00:04:23.250 --> 00:04:28.380
In other words we should see one bar in the histogram that is way higher than the others.

68
00:04:28.380 --> 00:04:29.010
Are you ready.

69
00:04:29.260 --> 00:04:30.960
Let's play this cell.

70
00:04:31.020 --> 00:04:32.550
And there we go.

71
00:04:32.550 --> 00:04:34.040
We got what we want.

72
00:04:34.050 --> 00:04:41.190
Indeed this ad of index for here meaning the ad number five was clearly the ad selected the most therefore

73
00:04:41.190 --> 00:04:44.080
was clearly the ad with the highest click through rate.

74
00:04:44.100 --> 00:04:48.780
And in terms of our business case study it corresponds indeed to the ad that is the most attractive

75
00:04:48.990 --> 00:04:54.680
meaning the ad that has the most beautiful image of that car that will sell the most to the user as

76
00:04:54.690 --> 00:04:56.060
a future customers.

77
00:04:56.070 --> 00:04:56.530
OK.

78
00:04:56.790 --> 00:04:58.280
So good job.

79
00:04:58.280 --> 00:05:04.720
The UCB algorithm did a very up here however remember that you know the girl is in fact to you know

80
00:05:04.780 --> 00:05:11.440
identify this ad as fast as possible you know in a minimum number of rounds and therefore what we should

81
00:05:11.440 --> 00:05:12.570
experiment right now.

82
00:05:12.580 --> 00:05:14.260
You know it's not quite over.

83
00:05:14.380 --> 00:05:20.530
We should experiment to see and actually how many rounds the UCB algorithm was able to identify this

84
00:05:20.590 --> 00:05:28.010
ad with the highest city are and the way to check this is by you know changing that value.

85
00:05:28.210 --> 00:05:32.420
And here because this algorithm was run with 10000 rounds.

86
00:05:32.500 --> 00:05:39.280
But what if we put instead you know 5000 rounds you know we would like to see if the UCB is still able

87
00:05:39.280 --> 00:05:44.620
to identify that ad of index for you know with the high city or in 5000 rounds.

88
00:05:44.620 --> 00:05:46.440
So that's exactly what we're going to check now.

89
00:05:46.450 --> 00:05:53.350
But you know rerun everything and the way to do this is by clicking run time here and then restart and

90
00:05:53.500 --> 00:05:54.370
run.

91
00:05:54.490 --> 00:06:02.470
And we're going to see if with 5000 rounds well at UCB algorithm is also able to quickly figure out

92
00:06:03.040 --> 00:06:05.630
the best ad and yes very good.

93
00:06:05.770 --> 00:06:12.530
Even with 5000 rounds you know with 5000 users the UCB was able to identify the ad with the highest

94
00:06:12.530 --> 00:06:13.430
CAGR.

95
00:06:13.450 --> 00:06:17.360
And now let's make it even more challenging to the UCB.

96
00:06:17.570 --> 00:06:24.570
Let's replace 5000 here by 1000 and let's click runtime again and restart and run.

97
00:06:24.580 --> 00:06:30.540
Oh and let's see if with only 1000 rounds while the UCB is able to.

98
00:06:30.970 --> 00:06:31.440
Wow.

99
00:06:31.550 --> 00:06:31.870
OK.

100
00:06:31.870 --> 00:06:37.750
So still it was still able to do it you know identifying the ad with the high CGI which is still of

101
00:06:37.750 --> 00:06:41.010
course ad of the next four but quite just you know.

102
00:06:41.020 --> 00:06:44.650
So now I of course want to try with 500 rounds.

103
00:06:44.800 --> 00:06:45.460
Right.

104
00:06:45.490 --> 00:06:53.570
We're going to replace that 1000 here by 500 then rerun everything by clicking restart and run out.

105
00:06:53.860 --> 00:06:54.890
And now let's see.

106
00:06:54.930 --> 00:06:56.080
But I'm not sure it.

107
00:06:56.140 --> 00:07:01.030
Let's see if it is still able to identify that ad with the high CGI.

108
00:07:01.300 --> 00:07:07.780
And that's what I'm talking about you know 500 rounds is not enough for the UCB algorithm to identify

109
00:07:07.780 --> 00:07:13.840
that best at you know that ad with the highest CAGR because indeed the ad with the high city or is clearly

110
00:07:13.840 --> 00:07:14.650
at number four.

111
00:07:14.950 --> 00:07:22.540
But in 500 round the UCB identified the best ad as ad of index 7 so 500 is not enough.

112
00:07:22.870 --> 00:07:29.290
And so now it will be very interesting to see with the Thompson sampling algorithm if you know it can

113
00:07:29.290 --> 00:07:35.650
beat the UCB algorithm in the sense that it can find this out of index for with the highest city are

114
00:07:35.920 --> 00:07:40.220
in 500 rounds because they used to be can clearly find it in 1000 rounds.

115
00:07:40.240 --> 00:07:43.000
That's for sure but not in 500 rounds.

116
00:07:43.000 --> 00:07:48.250
So we're going to see with Thompson sampling algorithm if this one is able to find that best ad you

117
00:07:48.250 --> 00:07:52.300
know because we're going to work on the same data set of course if it is going to identify the best

118
00:07:52.390 --> 00:07:58.710
ad of index four in 500 rounds and if yes we will even try lower numbers of rounds.

119
00:07:59.020 --> 00:08:04.210
So I can't wait to now implement Thompson something with you we will work on the exact same data set.

120
00:08:04.210 --> 00:08:05.720
So we will just compare.

121
00:08:05.770 --> 00:08:07.630
So let's do this in the next section.

122
00:08:07.660 --> 00:08:09.490
And until then enjoy machine learning.
