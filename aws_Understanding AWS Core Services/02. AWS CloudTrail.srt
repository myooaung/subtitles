1
00:00:01,040 --> 00:00:05,330
So next, we're going to talk about a service called AWS CloudTrail.

2
00:00:05,330 --> 00:00:08,810
And according to AWS, CloudTrail is a service where you can log,

3
00:00:08,810 --> 00:00:12,290
continuously monitor, and retain account activity related to

4
00:00:12,290 --> 00:00:15,640
actions across your AWS infrastructure.

5
00:00:15,640 --> 00:00:15,810
Now,

6
00:00:15,810 --> 00:00:18,470
one of the great things about this is no matter which

7
00:00:18,470 --> 00:00:20,300
interaction method you're using,

8
00:00:20,300 --> 00:00:23,480
whether that's the console or whether you're using the CLI

9
00:00:23,480 --> 00:00:26,580
or whether you're working within the SDKs, CloudTrail is

10
00:00:26,580 --> 00:00:29,340
going to log all of those actions.

11
00:00:29,340 --> 00:00:30,640
So when we look at CloudTrail,

12
00:00:30,640 --> 00:00:34,010
first of all you need to know that it includes this information into

13
00:00:34,010 --> 00:00:37,250
an S3 bucket, or you can even utilize CloudWatch,

14
00:00:37,250 --> 00:00:40,820
which we'll talk about later within this module. And it logs events

15
00:00:40,820 --> 00:00:44,900
in the regions in which they occur. Now one of the good things about

16
00:00:44,900 --> 00:00:48,310
CloudTrail is that it meets many different compliance requirements

17
00:00:48,310 --> 00:00:50,170
for infrastructure auditing.

18
00:00:50,170 --> 00:00:52,640
So in terms of even just general best practices,

19
00:00:52,640 --> 00:00:56,660
you want to know who is initiating actions that change your infrastructure.

20
00:00:56,660 --> 00:00:57,560
But for some of you,

21
00:00:57,560 --> 00:01:00,200
you might be in environments where that's not just a like to

22
00:01:00,200 --> 00:01:02,950
have, that is a requirement based on different compliance

23
00:01:02,950 --> 00:01:04,820
standards, and for many of those standards,

24
00:01:04,820 --> 00:01:08,940
CloudTrail will meet that. Now as a best practice, it should be enabled on

25
00:01:08,940 --> 00:01:13,620
every AWS account. Now if you have your own personal development account and

26
00:01:13,620 --> 00:01:16,420
you're the only one that has access to it and you don't want to deal with the

27
00:01:16,420 --> 00:01:20,380
cost of storing this information in S3, you could choose to forgo it.

28
00:01:20,380 --> 00:01:22,600
But for any other situation besides that,

29
00:01:22,600 --> 00:01:26,280
you want to be sure that this is turned on. And you can consolidate this.

30
00:01:26,280 --> 00:01:29,140
So if you are using AWS Organizations,

31
00:01:29,140 --> 00:01:32,400
you could utilize the organizational trail to get

32
00:01:32,400 --> 00:01:35,040
information across all of your accounts.

33
00:01:35,040 --> 00:01:39,580
Now, let's talk about some general use cases for using CloudTrail. First of all,

34
00:01:39,580 --> 00:01:43,260
and we've alluded to this already, it might be a compliance requirement.

35
00:01:43,260 --> 00:01:45,340
So if you want to be able to track information

36
00:01:45,340 --> 00:01:49,070
specifically for compliance purposes, CloudTrail can meet that.

37
00:01:49,070 --> 00:01:51,940
It could be that you're using this for forensic analysis.

38
00:01:51,940 --> 00:01:55,200
So if you have already had a data breach and you want to go back and

39
00:01:55,200 --> 00:01:57,740
see what actions were taken against infrastructure,

40
00:01:57,740 --> 00:01:59,740
you could utilize it for that.

41
00:01:59,740 --> 00:02:03,230
Also, you could use it for operational analysis.

42
00:02:03,230 --> 00:02:06,470
So if you're looking to determine who potentially changed

43
00:02:06,470 --> 00:02:10,410
infrastructure that caused a crash or caused an outage, you could go in

44
00:02:10,410 --> 00:02:13,140
and analyze the users that perform that and then work with them to make

45
00:02:13,140 --> 00:02:15,540
sure that that action isn't taken again.

46
00:02:15,540 --> 00:02:18,700
You also can do it generally just for troubleshooting. So you could

47
00:02:18,700 --> 00:02:22,670
go back and look at when a specific bad configuration was injected

48
00:02:22,670 --> 00:02:29,000
into the system and use that to fix any issues that are happening within your infrastructure.

