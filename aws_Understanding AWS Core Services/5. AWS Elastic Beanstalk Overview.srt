1
00:00:01,040 --> 00:00:02,270
So up to this point,

2
00:00:02,270 --> 00:00:06,380
we've been focusing on Amazon EC2, but now we're going to look

3
00:00:06,380 --> 00:00:09,750
at a different compute option that is available on the platform,

4
00:00:09,750 --> 00:00:12,810
and that is AWS Elastic Beanstalk.

5
00:00:12,810 --> 00:00:16,430
So at a high level, Elastic Beanstalk automates the process of

6
00:00:16,430 --> 00:00:20,700
deploying and scaling your workloads on EC2, but the difference is

7
00:00:20,700 --> 00:00:22,990
instead of dealing with those servers directly,

8
00:00:22,990 --> 00:00:25,670
which we would call Infrastructure as a Service,

9
00:00:25,670 --> 00:00:30,040
this is more of a Platform as a Service type approach.

10
00:00:30,040 --> 00:00:33,930
Now because of that, it does support a specific set of technologies.

11
00:00:33,930 --> 00:00:36,860
So unlike EC2 where you can really do anything you want,

12
00:00:36,860 --> 00:00:38,700
as long as you can get it up and running on a server,

13
00:00:38,700 --> 00:00:41,890
you can do that on EC2. Here, Elastic Beanstalk

14
00:00:41,890 --> 00:00:45,040
works within a set of technologies.

15
00:00:45,040 --> 00:00:48,230
Now it does leverage existing AWS services,

16
00:00:48,230 --> 00:00:52,260
and you only pay for the other services that you leverage, and so this

17
00:00:52,260 --> 00:00:55,930
brings up kind of a new category of services for us on AWS,

18
00:00:55,930 --> 00:00:59,330
and these are services that really just make it easier to

19
00:00:59,330 --> 00:01:02,200
use other AWS services. So in this case,

20
00:01:02,200 --> 00:01:06,060
we're still theoretically running all of our compute on EC2, but

21
00:01:06,060 --> 00:01:09,300
the process of managing those servers and handling things like

22
00:01:09,300 --> 00:01:10,830
provisioning and load balancing,

23
00:01:10,830 --> 00:01:13,500
scaling, and monitoring are all handled automatically

24
00:01:13,500 --> 00:01:16,030
through the work of Elastic Beanstalk by connecting other

25
00:01:16,030 --> 00:01:18,860
services into the overall platform.

26
00:01:18,860 --> 00:01:19,950
Now you might be asking, well,

27
00:01:19,950 --> 00:01:23,250
what platforms does it support, and that's a great question.

28
00:01:23,250 --> 00:01:26,730
So here, we're going to be looking at a lot of the usual suspects here,

29
00:01:26,730 --> 00:01:32,330
like Java and NET. We also have PHP and Node.js, as well as

30
00:01:32,330 --> 00:01:35,930
Python, Ruby, Go, and then interestingly enough,

31
00:01:35,930 --> 00:01:38,040
it also supports Docker.

32
00:01:38,040 --> 00:01:40,320
So the good thing here is even if you weren't using

33
00:01:40,320 --> 00:01:41,630
one of these other platforms,

34
00:01:41,630 --> 00:01:46,530
but you still wanted to use Elastic Beanstalk, if you could configure a Docker

35
00:01:46,530 --> 00:01:50,070
container with whatever framework you wanted to leverage,

36
00:01:50,070 --> 00:01:52,950
you could still find a way to support it on Elastic Beanstalk, but with

37
00:01:52,950 --> 00:01:56,050
just a little bit of extra work. Now you might be saying,

38
00:01:56,050 --> 00:01:56,230
well,

39
00:01:56,230 --> 00:01:59,260
I get that, and I get that all of these different technologies are

40
00:01:59,260 --> 00:02:02,450
supported, but why would I choose Elastic Beanstalk?

41
00:02:02,450 --> 00:02:04,470
What are the features that it has that would be an

42
00:02:04,470 --> 00:02:07,300
advantage over using EC2 directly? Well,

43
00:02:07,300 --> 00:02:08,150
first of all,

44
00:02:08,150 --> 00:02:10,470
one of the great things about Elastic Beanstalk is it does

45
00:02:10,470 --> 00:02:12,760
have integrated monitoring included,

46
00:02:12,760 --> 00:02:15,640
and again, it's using other services that we'll talk about later to

47
00:02:15,640 --> 00:02:18,020
pull that monitoring information in. Now here,

48
00:02:18,020 --> 00:02:19,360
deployment is critical.

49
00:02:19,360 --> 00:02:21,290
You might just think well I'm just copying some files

50
00:02:21,290 --> 00:02:23,350
to a server, how hard can it be?

51
00:02:23,350 --> 00:02:26,520
But in reality, in production, deployments aren't that easy,

52
00:02:26,520 --> 00:02:29,890
especially when we're talking about load balanced environments and you're

53
00:02:29,890 --> 00:02:33,810
dealing with multiple servers and trying to figure out how to appropriately

54
00:02:33,810 --> 00:02:37,500
deploy things onto servers and make that available to end users, and Elastic

55
00:02:37,500 --> 00:02:39,970
Beanstalk manages all of that for us.

56
00:02:39,970 --> 00:02:42,640
In addition, it also handles scaling.

57
00:02:42,640 --> 00:02:45,690
So if we want to be sure that our web application that's used

58
00:02:45,690 --> 00:02:48,140
within our business as an internal application,

59
00:02:48,140 --> 00:02:51,420
if we know that there's going to be a huge demand upcoming,

60
00:02:51,420 --> 00:02:53,550
we can trust that Elastic Beanstalk is going to be able

61
00:02:53,550 --> 00:02:55,260
to handle that scaling appropriately,

62
00:02:55,260 --> 00:02:58,220
and we can add some configuration to that so that we

63
00:02:58,220 --> 00:03:00,640
can best handle upcoming demand.

64
00:03:00,640 --> 00:03:03,380
But it also allows for EC2 customization.

65
00:03:03,380 --> 00:03:07,050
So here is the one area where it kind of starts to maybe stretch beyond

66
00:03:07,050 --> 00:03:10,290
just a little bit, the Platform as a Service approach,

67
00:03:10,290 --> 00:03:13,620
it does give you the ability to add some customizations to those

68
00:03:13,620 --> 00:03:15,940
servers that it's actually going to be running on.

69
00:03:15,940 --> 00:03:18,320
So why would you want to use Elastic Beanstalk?

70
00:03:18,320 --> 00:03:21,280
So, if you want to deploy an application with minimal knowledge of other

71
00:03:21,280 --> 00:03:23,530
services, so let's say you know Elastic Beanstalk,

72
00:03:23,530 --> 00:03:26,660
but you're not familiar with really administering EC2 servers or

73
00:03:26,660 --> 00:03:29,410
auto scaling groups or getting metrics from CloudWatch, setting

74
00:03:29,410 --> 00:03:32,400
scaling rules, these are things that you can simply rely on

75
00:03:32,400 --> 00:03:34,640
Elastic Beanstalk to do for you.

76
00:03:34,640 --> 00:03:35,290
In addition,

77
00:03:35,290 --> 00:03:38,540
if you want to reduce the overall maintenance needed for the application,

78
00:03:38,540 --> 00:03:40,050
this can be a great choice.

79
00:03:40,050 --> 00:03:44,710
So if you can fit into the specific use case that Elastic Beanstalk has,

80
00:03:44,710 --> 00:03:48,320
you can avoid having to deal with many of the other administrative

81
00:03:48,320 --> 00:03:51,540
tasks that are simply taken care of by the platform.

82
00:03:51,540 --> 00:03:52,090
In addition,

83
00:03:52,090 --> 00:03:54,820
this makes sense if you're not looking to completely

84
00:03:54,820 --> 00:03:57,100
customize the environment that you're in.

85
00:03:57,100 --> 00:03:58,010
And if you say, well,

86
00:03:58,010 --> 00:04:01,400
I want to use this specific AMI and it has to have this specific package

87
00:04:01,400 --> 00:04:04,210
and I don't want it to upgrade to this other version of the package, you

88
00:04:04,210 --> 00:04:06,270
can get really specific about those things.

89
00:04:06,270 --> 00:04:10,140
If that's you, you probably want to look at using EC2 directly.

90
00:04:10,140 --> 00:04:11,150
But if you say, you know what,

91
00:04:11,150 --> 00:04:13,990
I really don't need to customize it, I can take what it gives

92
00:04:13,990 --> 00:04:23,000
me by default, then Elastic Beanstalk can be a great choice and one that will save you time, especially over the life of the application.

