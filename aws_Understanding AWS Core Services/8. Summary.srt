1
00:00:01,140 --> 00:00:06,190
So we've covered a lot of new AWS services here within this module.

2
00:00:06,190 --> 00:00:08,550
Let's quickly give an overview of what we've learned,

3
00:00:08,550 --> 00:00:12,740
and then we'll dive into the scenarios that we discussed in the previous clip.

4
00:00:12,740 --> 00:00:17,640
So first of all, we introduced virtual private clouds on AWS.

5
00:00:17,640 --> 00:00:20,960
We also understood the purpose of AWS Direct Connect,

6
00:00:20,960 --> 00:00:23,730
which gives you that direct connection between your datacenters,

7
00:00:23,730 --> 00:00:26,940
your office locations, and AWS.

8
00:00:26,940 --> 00:00:30,090
We examined DNS with Amazon Route 53.

9
00:00:30,090 --> 00:00:33,930
We understood what DNS does and how Amazon Route 53 can help

10
00:00:33,930 --> 00:00:36,550
us build highly available applications.

11
00:00:36,550 --> 00:00:41,070
And then we reviewed Amazon CloudFront, as well as API Gateway.

12
00:00:41,070 --> 00:00:41,820
And then finally,

13
00:00:41,820 --> 00:00:45,050
we introduced Elastic Load Balancing and the different scaling

14
00:00:45,050 --> 00:00:48,140
approaches that you can take when you're leveraging it.

15
00:00:48,140 --> 00:00:50,930
Now let's look back at our scenario with Jane.

16
00:00:50,930 --> 00:00:54,030
So Jane's company has two different corporate datacenters,

17
00:00:54,030 --> 00:00:58,350
and they're looking to have their datacenters work closely with AWS.

18
00:00:58,350 --> 00:01:02,340
So, what service from AWS would you recommend for her company?

19
00:01:02,340 --> 00:01:06,080
Well in this case, AWS Direct Connect is a great fit.

20
00:01:06,080 --> 00:01:10,210
They can build direct connections between their datacenters and AWS,

21
00:01:10,210 --> 00:01:13,580
which means that that traffic does not have to go over the public internet.

22
00:01:13,580 --> 00:01:15,530
That also means that a lot of this communication it can

23
00:01:15,530 --> 00:01:18,220
happen behind the firewall for them.

24
00:01:18,220 --> 00:01:20,580
Next, we're going to talk about Tim,

25
00:01:20,580 --> 00:01:23,850
and his company serves content through their site to users all around the

26
00:01:23,850 --> 00:01:27,250
globe, and they really are looking to optimize performance.

27
00:01:27,250 --> 00:01:28,880
And they want to leverage a CDN,

28
00:01:28,880 --> 00:01:31,370
or content delivery network, so what service would

29
00:01:31,370 --> 00:01:33,840
optimize that performance globally?

30
00:01:33,840 --> 00:01:34,520
Well, in this case,

31
00:01:34,520 --> 00:01:37,530
this would be Amazon CloudFront. That is the content

32
00:01:37,530 --> 00:01:40,640
delivery network that is present on AWS.

33
00:01:40,640 --> 00:01:43,300
So any time you hear a question on the exam talking

34
00:01:43,300 --> 00:01:44,980
about a content delivery network,

35
00:01:44,980 --> 00:01:47,570
think about Amazon CloudFront and how that could help the

36
00:01:47,570 --> 00:01:50,050
users that are leveraging that service.

37
00:01:50,050 --> 00:01:53,470
So next we have Ellen, and her company is running that internal

38
00:01:53,470 --> 00:01:56,670
application on an EC2 server and they're having the downtime.

39
00:01:56,670 --> 00:01:58,800
So which scaling approach would you recommend?

40
00:01:58,800 --> 00:01:59,940
Well, in this case,

41
00:01:59,940 --> 00:02:02,880
we would recommend horizontal scaling, or scaling

42
00:02:02,880 --> 00:02:05,980
out, using Elastic Load Balancing.

43
00:02:05,980 --> 00:02:09,960
This is preferable over using just bigger servers because it can

44
00:02:09,960 --> 00:02:13,080
handle whatever future load you can throw at it.

45
00:02:13,080 --> 00:02:14,670
However, if you get bigger servers,

46
00:02:14,670 --> 00:02:16,320
it's possible you're just going to have to take those

47
00:02:16,320 --> 00:02:18,280
servers down again and make them even bigger.

48
00:02:18,280 --> 00:02:19,610
We went to limit downtime,

49
00:02:19,610 --> 00:02:22,750
and we're going to do that by taking a horizontal scaling approach.

50
00:02:22,750 --> 00:02:30,000
And by using Elastic Load Balancing, we can make sure that we are routing users to the best server for them to use.

