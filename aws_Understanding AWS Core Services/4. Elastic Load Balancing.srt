1
00:00:01,040 --> 00:00:05,560
So next, we're going to talk about a service called Elastic Load Balancing.

2
00:00:05,560 --> 00:00:08,070
And this might be a term that you're familiar with because we did

3
00:00:08,070 --> 00:00:11,210
introduce earlier the concept of elasticity.

4
00:00:11,210 --> 00:00:12,500
And just as a reminder,

5
00:00:12,500 --> 00:00:15,980
it is the ability for infrastructure that's supporting an application to grow

6
00:00:15,980 --> 00:00:20,140
and contract based on how much it is used at a point in time.

7
00:00:20,140 --> 00:00:20,340
Well,

8
00:00:20,340 --> 00:00:25,270
one aspect of that is how we actually route users to the correct infrastructure.

9
00:00:25,270 --> 00:00:28,040
And that's where Elastic Load Balancing comes in.

10
00:00:28,040 --> 00:00:30,520
So what Elastic Load Balancing does, in essence,

11
00:00:30,520 --> 00:00:34,340
is that it can distribute traffic across multiple targets.

12
00:00:34,340 --> 00:00:35,880
So at a really high level,

13
00:00:35,880 --> 00:00:40,200
if we have users that are coming to our web application and we have two servers,

14
00:00:40,200 --> 00:00:42,700
it can choose to route the users between those two different

15
00:00:42,700 --> 00:00:45,380
servers based on the load of each of those servers.

16
00:00:45,380 --> 00:00:47,940
So by default, it will integrate with EC2,

17
00:00:47,940 --> 00:00:52,950
ECS, which we haven't yet talked about, but this is AWS's container service,

18
00:00:52,950 --> 00:00:56,530
so for running Docker containers, and Lambda.

19
00:00:56,530 --> 00:01:00,660
So it supports one or more availability zones within a region.

20
00:01:00,660 --> 00:01:02,120
So you could say, for example,

21
00:01:02,120 --> 00:01:05,280
we want to have our customer website running across

22
00:01:05,280 --> 00:01:07,230
three different availability zones,

23
00:01:07,230 --> 00:01:10,430
and we want to have servers that exist in each availability zone.

24
00:01:10,430 --> 00:01:14,020
And then we can leverage Elastic Load Balancing to distribute users to the

25
00:01:14,020 --> 00:01:17,490
right servers in one of those three availability zones.

26
00:01:17,490 --> 00:01:20,150
Now there are three types of load balancers.

27
00:01:20,150 --> 00:01:24,550
We have Application Load Balancers, or ALBs, Network Load Balancers,

28
00:01:24,550 --> 00:01:27,930
which you'll hear called NLBs, and we have Classic Load Balancers,

29
00:01:27,930 --> 00:01:28,670
and in some cases,

30
00:01:28,670 --> 00:01:33,280
those will just be referred to as either classic or ELBs. Next,

31
00:01:33,280 --> 00:01:37,820
let's talk about the process of scaling, specifically with Amazon EC2.

32
00:01:37,820 --> 00:01:41,510
And we will be diving down into this quite a bit deeper in a later

33
00:01:41,510 --> 00:01:43,990
course within this path, but at a high level,

34
00:01:43,990 --> 00:01:48,640
we have a couple of choices when we need to scale our servers on EC2.

35
00:01:48,640 --> 00:01:51,680
So the first here is what we call vertical scaling.

36
00:01:51,680 --> 00:01:53,480
This is when you scale up.

37
00:01:53,480 --> 00:01:56,240
So note here that vertical scaling and scale up are

38
00:01:56,240 --> 00:01:58,010
talking about the same approach.

39
00:01:58,010 --> 00:02:00,790
We scale up our instance type to a larger instance

40
00:02:00,790 --> 00:02:03,050
type with additional resources.

41
00:02:03,050 --> 00:02:07,810
So let's say we were using a t3 medium instance type, and let's say that we just

42
00:02:07,810 --> 00:02:10,580
noticed that our users are hitting that server pretty hard,

43
00:02:10,580 --> 00:02:13,010
and it's not responding as quick as it needs to, and it's even

44
00:02:13,010 --> 00:02:15,170
dropping the connection for some of our users.

45
00:02:15,170 --> 00:02:17,580
Well that's not a good thing, we need to address that.

46
00:02:17,580 --> 00:02:18,090
And sure,

47
00:02:18,090 --> 00:02:21,380
we could go in and say that we want to get a larger server, we could

48
00:02:21,380 --> 00:02:26,180
do something like an m4 xlarge, but if we do that,

49
00:02:26,180 --> 00:02:28,940
we're going to have to shut our server down,

50
00:02:28,940 --> 00:02:31,230
and then we can add those additional resources to it

51
00:02:31,230 --> 00:02:32,790
by changing the instance type,

52
00:02:32,790 --> 00:02:36,240
spin it back up, and now we're able to meet our customer's need.

53
00:02:36,240 --> 00:02:39,650
However, that's usually not the best way.

54
00:02:39,650 --> 00:02:44,270
The best approach is what we would call horizontal scaling, or scale out.

55
00:02:44,270 --> 00:02:46,830
And again, remember here that horizontal scaling and scale

56
00:02:46,830 --> 00:02:49,040
out are talking about the same approach.

57
00:02:49,040 --> 00:02:54,260
This is where we leverage Elastic Load Balancing and we add additional

58
00:02:54,260 --> 00:02:57,180
instances to handle the demand of the application.

59
00:02:57,180 --> 00:03:00,130
So in that case, maybe we have a t3 medium server,

60
00:03:00,130 --> 00:03:04,800
and maybe then we just add two more t3 medium servers, and then we rely on

61
00:03:04,800 --> 00:03:08,800
horizontal scaling with the Elastic Load Balancer to actually handle the

62
00:03:08,800 --> 00:03:11,440
process of routing our users to the correct server.

63
00:03:11,440 --> 00:03:14,130
Now as I mentioned, in a later course within this path,

64
00:03:14,130 --> 00:03:17,040
we're going to tie this together with EC2 and talk about how

65
00:03:17,040 --> 00:03:23,000
you can leverage auto scaling groups alongside Elastic Load Balancing to make this work.

