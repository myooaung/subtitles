WEBVTT
1
00:00:01.040 --> 00:00:04.340
So we have covered quite a bit within this module as we have looked

2
00:00:04.340 --> 00:00:07.680
at management and governance services on AWS.

3
00:00:07.680 --> 00:00:11.140
So let's quickly just take a look at what we've been able to cover.

4
00:00:11.140 --> 00:00:11.730
First of all,

5
00:00:11.730 --> 00:00:14.320
we reviewed the ecosystem of services that are provided

6
00:00:14.320 --> 00:00:17.640
for management of infrastructure on AWS.

7
00:00:17.640 --> 00:00:20.040
We then looked at how to create an audit trail

8
00:00:20.040 --> 00:00:23.580
utilizing a service called AWS CloudTrail.

9
00:00:23.580 --> 00:00:26.440
And then we explored how you track infrastructure

10
00:00:26.440 --> 00:00:29.790
utilizing services like CloudWatch and Config.

11
00:00:29.790 --> 00:00:33.910
And then, we introduced infrastructure automation with CloudFormation

12
00:00:33.910 --> 00:00:37.140
and this concept called infrastructure as code.

13
00:00:37.140 --> 00:00:39.480
We then were able to look at operational insights with

14
00:00:39.480 --> 00:00:41.610
a service called Systems Manager.

15
00:00:41.610 --> 00:00:44.700
And then finally, we reviewed the capabilities of AWS

16
00:00:44.700 --> 00:00:48.560
Organizations when you are leveraging Control Tower. So now,

17
00:00:48.560 --> 00:00:51.240
let's take a look at our scenarios.

18
00:00:51.240 --> 00:00:52.700
So here in this first scenario,

19
00:00:52.700 --> 00:00:55.920
we had Elliot, and he was concerned that some of these changes on

20
00:00:55.920 --> 00:00:59.170
servers might go undetected until there was a data breach.

21
00:00:59.170 --> 00:01:02.240
So, what service would allow him to continuously track

22
00:01:02.240 --> 00:01:04.340
the configuration of infrastructure?

23
00:01:04.340 --> 00:01:07.110
Well in this case, this would be AWS Config,

24
00:01:07.110 --> 00:01:11.170
and they could make sure that there is a set of rules enabled on Config that

25
00:01:11.170 --> 00:01:15.280
checks for the settings they care most about. Now next,

26
00:01:15.280 --> 00:01:19.590
let's take a look at James, and James was the lead architect at a SaaS company,

27
00:01:19.590 --> 00:01:23.380
and he was looking to minimize the manual work required to spin up

28
00:01:23.380 --> 00:01:26.180
new infrastructure for their new application.

29
00:01:26.180 --> 00:01:29.840
So what service would enable James to automate much of this effort?

30
00:01:29.840 --> 00:01:30.000
Well,

31
00:01:30.000 --> 00:01:34.450
this is going to be AWS CloudFormation because, here, James and his

32
00:01:34.450 --> 00:01:37.680
developer team could go through and create templates,

33
00:01:37.680 --> 00:01:40.300
and these templates could be launched with CloudFormation,

34
00:01:40.300 --> 00:01:43.040
which would manage that infrastructure.

35
00:01:43.040 --> 00:01:46.630
So next, let's talk about Candace, and Candace is the CTO at a

36
00:01:46.630 --> 00:01:50.010
manufacturing company, and she was looking again to find out who

37
00:01:50.010 --> 00:01:52.080
deleted one of their production servers.

38
00:01:52.080 --> 00:01:53.260
They know it was an accident,

39
00:01:53.260 --> 00:01:55.780
but they want to be able to follow up with that resource.

40
00:01:55.780 --> 00:01:57.680
So what service could she use?

41
00:01:57.680 --> 00:01:58.410
Well in this case,

42
00:01:58.410 --> 00:02:01.760
this is going to be AWS CloudTrail because it is going to

43
00:02:01.760 --> 00:02:06.310
provide an audit trail of actions performed on AWS, irrespective

44
00:02:06.310 --> 00:02:13.000
of whether or not they were done with the console or with the CLI, or with one of the SDKs.

