1
00:00:01,040 --> 00:00:04,150
So next, we're going to run through a few scenarios to see

2
00:00:04,150 --> 00:00:06,360
how well you've done at absorbing the material we have

3
00:00:06,360 --> 00:00:08,740
presented within this module.

4
00:00:08,740 --> 00:00:12,150
And so the first scenario that we're going to look at has to do with Jennifer,

5
00:00:12,150 --> 00:00:16,540
and she is an IT executive in a financial services company.

6
00:00:16,540 --> 00:00:20,920
Now they're transitioning their data warehouse to AWS to take advantage

7
00:00:20,920 --> 00:00:23,150
of some of the great analysis features that are there,

8
00:00:23,150 --> 00:00:25,100
including some machine learning features they want to

9
00:00:25,100 --> 00:00:27,240
take advantage of in the future.

10
00:00:27,240 --> 00:00:30,900
Now their data warehouse would need to support up to 2 PB of

11
00:00:30,900 --> 00:00:36,040
data, so for Jennifer and her company, which approach would you recommend?

12
00:00:36,040 --> 00:00:39,670
And so next, we're going to be talking about Sam, and Sam

13
00:00:39,670 --> 00:00:42,340
is a DevOps engineer at a tech company,

14
00:00:42,340 --> 00:00:45,980
and he needs to launch a MySQL database for a new web application

15
00:00:45,980 --> 00:00:48,640
they're going to start building next month.

16
00:00:48,640 --> 00:00:51,340
Now in this case, because of some of their security needs,

17
00:00:51,340 --> 00:00:56,740
they need to have direct access to the virtual server that MySQL is running on.

18
00:00:56,740 --> 00:01:00,440
So, what approach would you recommend for Sam's company?

19
00:01:00,440 --> 00:01:04,980
And so next we have Frank, and he is the CTO at a gaming company,

20
00:01:04,980 --> 00:01:09,440
and they are trying to determine how to store realâ€‘time user analytics.

21
00:01:09,440 --> 00:01:13,180
Now they need really low latency and the ability to scale to handle up

22
00:01:13,180 --> 00:01:16,100
to a million players for this new game that they're getting ready to

23
00:01:16,100 --> 00:01:18,440
launch that they know is going to be a hit.

24
00:01:18,440 --> 00:01:21,740
He also wants to minimize the amount of time it takes to maintain the database,

25
00:01:21,740 --> 00:01:24,800
because in the past, they've worked with some very complicated

26
00:01:24,800 --> 00:01:27,840
databases to be able to get this level of performance.

27
00:01:27,840 --> 00:01:31,890
But in this case, he wants to look at AWS first for a solution.

28
00:01:31,890 --> 00:01:35,840
So which AWS approach would you recommend for Frank?

29
00:01:35,840 --> 00:01:36,780
So in the next clip,

30
00:01:36,780 --> 00:01:44,000
we're going to be walking through the answers to this scenario and take a look back at all the things we've covered within this module.

