WEBVTT
1
00:00:01.040 --> 00:00:07.170
So we have covered a lot in relation to databases and database utilities on AWS.

2
00:00:07.170 --> 00:00:10.540
So let's quickly take a look back and review what we've covered.

3
00:00:10.540 --> 00:00:15.140
First, we reviewed the cloud computing models for databases on AWS.

4
00:00:15.140 --> 00:00:17.880
We talked about how the concept of Infrastructure as a Service,

5
00:00:17.880 --> 00:00:19.280
Platform as a Service,

6
00:00:19.280 --> 00:00:21.980
and Software as a Service play out through the different

7
00:00:21.980 --> 00:00:24.080
database services that are available.

8
00:00:24.080 --> 00:00:28.170
We also introduced the Relational Database Service, or RDS.

9
00:00:28.170 --> 00:00:30.160
And we talked about Amazon Aurora,

10
00:00:30.160 --> 00:00:33.280
which is one of the specialty made engines for RDS that

11
00:00:33.280 --> 00:00:35.740
was built by Amazon for the cloud.

12
00:00:35.740 --> 00:00:38.120
We then introduced the DynamoDB service.

13
00:00:38.120 --> 00:00:42.450
We talked about how it is a completely managed NoSQL database,

14
00:00:42.450 --> 00:00:46.140
and we talked about some of the unique capabilities that it provides.

15
00:00:46.140 --> 00:00:48.910
Then, we reviewed the ElastiCache service,

16
00:00:48.910 --> 00:00:54.180
as well as looking at data warehousing on AWS with Redshift.

17
00:00:54.180 --> 00:00:54.500
Now,

18
00:00:54.500 --> 00:00:56.830
let's go back and take a look at the three scenarios that

19
00:00:56.830 --> 00:00:59.240
we introduced in the previous clip.

20
00:00:59.240 --> 00:01:01.440
So first of all, we had Jennifer,

21
00:01:01.440 --> 00:01:04.680
and she is an IT executive at a financial services company and

22
00:01:04.680 --> 00:01:08.340
she has a need for a data warehouse in AWS.

23
00:01:08.340 --> 00:01:10.440
So, what approach would you recommend?

24
00:01:10.440 --> 00:01:13.760
Well in this case, the answer is going to be Amazon Redshift.

25
00:01:13.760 --> 00:01:18.770
This is the born‑in‑the‑cloud data warehousing solution from AWS.

26
00:01:18.770 --> 00:01:22.740
So if somebody asks you, what do you recommend for data warehousing on AWS,

27
00:01:22.740 --> 00:01:24.980
Redshift is going to be the best answer.

28
00:01:24.980 --> 00:01:25.900
And in addition,

29
00:01:25.900 --> 00:01:29.310
we need to look here and see that it is dealing with petabytes of data.

30
00:01:29.310 --> 00:01:32.530
Now, if we were talking about something like exabytes of data,

31
00:01:32.530 --> 00:01:36.590
Redshift Spectrum might be an ideal option to consider.

32
00:01:36.590 --> 00:01:39.750
Now, next we have Sam, and Sam was looking to launch a

33
00:01:39.750 --> 00:01:42.990
MySQL database for a new web application.

34
00:01:42.990 --> 00:01:45.840
So what approach would you recommend for Sam's company?

35
00:01:45.840 --> 00:01:47.230
Well, let me be honest with you.

36
00:01:47.230 --> 00:01:49.630
This is a bit of a tricky question.

37
00:01:49.630 --> 00:01:50.970
You might look at this and say, well,

38
00:01:50.970 --> 00:01:54.870
I know that MySQL is supported within RDS, so Sam should

39
00:01:54.870 --> 00:01:57.690
choose RDS, but here's the problem.

40
00:01:57.690 --> 00:02:00.760
Sam says that he needs to have direct access to the

41
00:02:00.760 --> 00:02:03.790
virtual server that MySQL is running on.

42
00:02:03.790 --> 00:02:06.730
So if he wants to manage that server directly, RDS

43
00:02:06.730 --> 00:02:08.740
can't be the solution for him.

44
00:02:08.740 --> 00:02:09.560
So in this case,

45
00:02:09.560 --> 00:02:13.510
we would be recommending EC2, and we would recommend this because he

46
00:02:13.510 --> 00:02:16.520
is wanting an Infrastructure as a Service option,

47
00:02:16.520 --> 00:02:20.880
which is going to be taking MySQL and installing it onto an EC2 server.

48
00:02:20.880 --> 00:02:24.340
Now, if Sam didn't need to manage the underlying infrastructure,

49
00:02:24.340 --> 00:02:27.910
we would certainly push him towards RDS because many aspects

50
00:02:27.910 --> 00:02:30.640
of the platform would be managed for him.

51
00:02:30.640 --> 00:02:34.050
Now next, let's talk about Frank, and Frank needed a low

52
00:02:34.050 --> 00:02:37.070
latency database that could scale to handle up to a million

53
00:02:37.070 --> 00:02:39.060
users of the new game they're building.

54
00:02:39.060 --> 00:02:42.470
So, which AWS approach would you recommend for Frank?

55
00:02:42.470 --> 00:02:46.250
Well in this case, DynamoDB is going to be a great choice.

56
00:02:46.250 --> 00:02:49.040
It can absolutely handle this level of scale,

57
00:02:49.040 --> 00:02:59.000
and it can also handle the low latency requirement, so many gaming companies have adopted DynamoDB for requirements just like this.

