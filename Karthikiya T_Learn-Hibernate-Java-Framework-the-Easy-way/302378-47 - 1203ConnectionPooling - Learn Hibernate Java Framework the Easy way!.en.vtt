WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.260
in this video,

00:00:01.260 --> 00:00:06.070
we're going to talk about connection pooling mechanism whenever you're trying to perform

00:00:06.070 --> 00:00:10.020
the transaction from your application when the transaction begins,

00:00:10.020 --> 00:00:15.160
your application is actually going to request for the database connection to connect to the

00:00:15.160 --> 00:00:20.000
database and perform the transaction in a typical Jedi busy application.

00:00:20.000 --> 00:00:20.770
I mean,

00:00:20.770 --> 00:00:22.700
in case you're not using any or,

00:00:22.700 --> 00:00:22.870
um,

00:00:22.870 --> 00:00:23.280
tool,

00:00:23.280 --> 00:00:26.650
and you're just using the GBC to connect to the database,

00:00:26.650 --> 00:00:29.450
then here is how the scenario would be.

00:00:29.450 --> 00:00:33.950
Your application would request for database connection to the data source,

00:00:33.950 --> 00:00:38.350
whose implementation would be provided by the database driver that you use.

00:00:38.350 --> 00:00:44.280
And the database sores will delegate that request to the driver software,

00:00:44.280 --> 00:00:48.720
which in turn will try to acquire the connection based on the connection.

00:00:48.720 --> 00:00:53.800
Perimeters that you provide and ultimately application will be able to connect to the

00:00:53.800 --> 00:00:56.350
database and perform the transaction.

00:00:56.350 --> 00:00:58.760
And once the transaction is over,

00:00:58.760 --> 00:01:01.050
the connection would be lost as well.

00:01:01.050 --> 00:01:01.800
Well,

00:01:01.800 --> 00:01:04.350
there is one serious performance problem with this.

00:01:04.350 --> 00:01:07.010
If you keep on creating and destroying the connections,

00:01:07.010 --> 00:01:08.120
everyone's a vile,

00:01:08.120 --> 00:01:11.630
then it is going to cost you a lot off performance,

00:01:11.630 --> 00:01:14.570
and it will also increase the load on the server,

00:01:14.570 --> 00:01:18.370
So the solution to this problem is connection pooling.

00:01:18.370 --> 00:01:22.470
So instead of delegating the request from data source to the driver,

00:01:22.470 --> 00:01:26.850
the request would be sent two so called a connection pool.

00:01:26.850 --> 00:01:31.570
Now this is a mechanism which will manage all the connections.

00:01:31.570 --> 00:01:34.350
So let's talk about the connection pool a little bit.

00:01:34.350 --> 00:01:40.590
This thing about a real world scenario off connection pooling we can correlate connection

00:01:40.590 --> 00:01:42.790
pulling with carpooling in real world,

00:01:42.790 --> 00:01:45.810
let's say that you have the carpooling service,

00:01:45.810 --> 00:01:51.150
and at the moment you dont have any cars because there is no customer requesting for a car

00:01:51.150 --> 00:01:51.150
.

00:01:51.150 --> 00:01:51.720
No,

00:01:51.720 --> 00:01:55.470
let's say that you have one customer who has requested for a car,

00:01:55.470 --> 00:01:57.110
so you will buy a car,

00:01:57.110 --> 00:01:58.720
keep it inside your pool,

00:01:58.720 --> 00:02:00.410
and then you will start the car,

00:02:00.410 --> 00:02:03.290
after which you will provide the keys to the customer.

00:02:03.290 --> 00:02:09.040
He can roam around in the car and come back to the same place when he parks the car back in

00:02:09.040 --> 00:02:09.630
place.

00:02:09.630 --> 00:02:11.490
He's not going to turn off the car.

00:02:11.490 --> 00:02:16.550
He's just going to get down from the car and he goes back home now for the next.

00:02:16.550 --> 00:02:17.790
Wasn't ho comes in?

00:02:17.790 --> 00:02:19.200
The question for the car.

00:02:19.200 --> 00:02:26.230
He would have a car ready and neither you are the customer have to stop the car.

00:02:26.230 --> 00:02:27.650
He will take the car,

00:02:27.650 --> 00:02:29.120
which is already started.

00:02:29.120 --> 00:02:30.550
Hebel roam around.

00:02:30.550 --> 00:02:31.590
Come back.

00:02:31.590 --> 00:02:35.450
He would park the car and go back home without stopping the car.

00:02:35.450 --> 00:02:36.320
Now,

00:02:36.320 --> 00:02:40.530
in case if the customer ho took the car is still roaming around.

00:02:40.530 --> 00:02:41.660
Meanwhile,

00:02:41.660 --> 00:02:44.080
let's it therefore more customers to be sold.

00:02:44.080 --> 00:02:49.970
Then you will just simply by for more cars start them all and give it to customers.

00:02:49.970 --> 00:02:51.100
And in case,

00:02:51.100 --> 00:02:55.900
if you're running out of space and you have lot off simultaneous customers requesting for

00:02:55.900 --> 00:02:56.650
the car,

00:02:56.650 --> 00:03:02.570
then you would keep them in the waiting state until the car is made available by other

00:03:02.570 --> 00:03:03.400
customers.

00:03:03.400 --> 00:03:08.380
This is how exactly Connection Pool would work in hibernate as well,

00:03:08.380 --> 00:03:13.400
so you would have a pool Whenever there is a purpose for the database connection from your

00:03:13.400 --> 00:03:14.290
application,

00:03:14.290 --> 00:03:18.850
there will be a new connection created to perform the transaction,

00:03:18.850 --> 00:03:23.980
and this would happen when you start decision and initiate the transaction.

00:03:23.980 --> 00:03:26.720
Once the transaction finishes what it has to do,

00:03:26.720 --> 00:03:28.720
the connection will not be closed.

00:03:28.720 --> 00:03:34.100
It would be made available for other requests and in case if there are a couple of

00:03:34.100 --> 00:03:36.350
transactions taking place simultaneously,

00:03:36.350 --> 00:03:42.150
we'll have couple of connections in the pool and each would correspond to one transaction,

00:03:42.150 --> 00:03:42.880
like,

00:03:42.880 --> 00:03:46.100
Where's the connection pool will manage all the connections.

00:03:46.100 --> 00:03:52.310
The advantage here is we're saving a lot of time and performance because we don't have to

00:03:52.310 --> 00:03:54.050
create the connection and destroy it.

00:03:54.050 --> 00:03:55.380
Everyone's a while.

00:03:55.380 --> 00:03:59.860
Hibernate automatically supports the pooling mechanism by default,

00:03:59.860 --> 00:04:05.150
but unfortunately it is not very efficient and is not meant for high end applications.

00:04:05.150 --> 00:04:07.260
So for connection pooling mechanism,

00:04:07.260 --> 00:04:13.520
we have to use a tour party library which especially tuned to sell this purpose off pulling

00:04:13.520 --> 00:04:13.520
.

00:04:13.520 --> 00:04:16.350
So let's take a look at an example of the same.

00:04:16.350 --> 00:04:20.060
First of all,

00:04:20.060 --> 00:04:24.010
let me prove that having it uses its own pulling mechanism.

00:04:24.010 --> 00:04:25.740
So for this purpose,

00:04:25.740 --> 00:04:29.050
you can just simply run any off our previous programs.

00:04:29.050 --> 00:04:38.150
And if you go to the output and search for the term pool,

00:04:38.150 --> 00:04:44.950
you would notice that there is already a pooling mechanism taken care by hibernate.

00:04:44.950 --> 00:04:50.850
But let us take a look at how we can use 1/3 party tool to stop the process.

00:04:50.850 --> 00:04:52.990
And for this purpose,

00:04:52.990 --> 00:04:55.610
the many implementations African News.

00:04:55.610 --> 00:05:02.520
We're going to be using se three p o library to incorporate the connection pooling

00:05:02.520 --> 00:05:05.640
mechanism the many libraries out there,

00:05:05.640 --> 00:05:07.560
but this is the one which is popular.

00:05:07.560 --> 00:05:12.060
So I'm going to add this dependency.

00:05:12.060 --> 00:05:13.550
And in addition to that,

00:05:13.550 --> 00:05:15.840
we can also add this.

00:05:15.840 --> 00:05:20.150
Configurations that are specific to that library,

00:05:20.150 --> 00:05:27.040
and what these configurations would allow us to do is to do some customization for the pool

00:05:27.040 --> 00:05:28.700
that gets created on the fly.

00:05:28.700 --> 00:05:30.670
So by this perimeter,

00:05:30.670 --> 00:05:35.430
men size were saying that the minimum size off the pool should be five.

00:05:35.430 --> 00:05:40.390
That means our pool should at least hold five connection simultaneously,

00:05:40.390 --> 00:05:47.230
and it can grow up to 20 connections by setting this perimeter back size the time.

00:05:47.230 --> 00:05:53.100
What would just simply means how long should the connection stay idle in seconds?

00:05:53.100 --> 00:05:55.480
So after waiting for 300 seconds,

00:05:55.480 --> 00:05:58.010
if the connection is not utilized by your application,

00:05:58.010 --> 00:05:59.940
then the connection would be closed.

00:05:59.940 --> 00:06:05.050
The Max statements is simply the maximum number off prepared statements.

00:06:05.050 --> 00:06:06.580
Finally,

00:06:06.580 --> 00:06:09.380
we have this perimeter adult US period.

00:06:09.380 --> 00:06:10.780
This is a little tricky,

00:06:10.780 --> 00:06:15.390
basically from the database and as well the connection would time out.

00:06:15.390 --> 00:06:19.700
So what adult a spirit means is happen.

00:06:19.700 --> 00:06:20.860
It will ping database.

00:06:20.860 --> 00:06:26.940
Everyone's a while to make sure that the connection would stay active for a two least 3000

00:06:26.940 --> 00:06:27.670
seconds.

00:06:27.670 --> 00:06:31.530
And once you configure this and you have this,

00:06:31.530 --> 00:06:32.660
dependency added,

00:06:32.660 --> 00:06:35.670
we just have to update the project ones,

00:06:35.670 --> 00:06:36.080
though,

00:06:36.080 --> 00:06:41.750
because this will download all the libraries required.

00:06:41.750 --> 00:06:45.900
It's going to take a while,

00:06:45.900 --> 00:06:51.780
so let me pause the video and get back So we're done.

00:06:51.780 --> 00:06:54.080
And now if you run the program,

00:06:54.080 --> 00:07:00.090
he would notice that this time the pooling mechanism,

00:07:00.090 --> 00:07:06.150
his say Threepio.

00:07:06.150 --> 00:07:10.170
And sure enough,

00:07:10.170 --> 00:07:12.000
that's the library,

00:07:12.000 --> 00:07:12.950
which is used.

00:07:12.950 --> 00:07:16.050
So that's about it.

00:07:16.050 --> 00:07:17.350
See you soon.

