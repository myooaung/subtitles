WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.720
in this video,

00:00:01.720 --> 00:00:06.720
we're going to talk about various fetching strategies used by have been eight toe fresh to

00:00:06.720 --> 00:00:11.310
details from the database when we try to perform the load operation.

00:00:11.310 --> 00:00:14.000
So what we have here is the boss class,

00:00:14.000 --> 00:00:19.900
and we have defined the mapping with the employees class in here so each boss will have one

00:00:19.900 --> 00:00:22.280
to manipulation with the list off.

00:00:22.280 --> 00:00:28.690
Employees now assume that we have 10,000 employees under a single boss.

00:00:28.690 --> 00:00:32.290
And when you're trying to display that particular boss object,

00:00:32.290 --> 00:00:36.490
should they have been a display the boss object alone?

00:00:36.490 --> 00:00:42.710
Our Should it also display the list off employees that are associated with that boss?

00:00:42.710 --> 00:00:43.390
Will.

00:00:43.390 --> 00:00:46.790
This fetching stategy defines the same there.

00:00:46.790 --> 00:00:47.990
A couple of strategies.

00:00:47.990 --> 00:00:52.120
When is the fetch type lazy and the other is eager loading.

00:00:52.120 --> 00:00:54.880
This was talk about lazy loading.

00:00:54.880 --> 00:00:57.950
So when you have the Fed strategy set too lazy,

00:00:57.950 --> 00:01:03.140
having it would just fetch the employee object but not its associate ID.

00:01:03.140 --> 00:01:04.470
The stop employees.

00:01:04.470 --> 00:01:06.530
So when does the have been it?

00:01:06.530 --> 00:01:12.300
Fetch the list off employees is when there's a real need to fetch employees.

00:01:12.300 --> 00:01:13.940
Let's take a look at an example,

00:01:13.940 --> 00:01:15.800
and you would understand better.

00:01:15.800 --> 00:01:21.610
So the example that we have in here he is similar to the one we had taken a look at when we

00:01:21.610 --> 00:01:23.550
talked about one too many relation.

00:01:23.550 --> 00:01:29.040
The only difference is a guarded out that delete method from here.

00:01:29.040 --> 00:01:31.420
So inside the inside method,

00:01:31.420 --> 00:01:34.730
a matting list off employees to the boss object,

00:01:34.730 --> 00:01:38.620
and then I'm trying to store the boss object into the database.

00:01:38.620 --> 00:01:45.080
Since we have the cascading option set toe all this will also save the list off employees

00:01:45.080 --> 00:01:46.450
along with the boss object.

00:01:46.450 --> 00:01:49.530
So now let's take a look at what's happening in this.

00:01:49.530 --> 00:01:50.960
Get details mattered.

00:01:50.960 --> 00:01:58.270
So what we're trying to do here is we're trying to fetch the boss details past object to be

00:01:58.270 --> 00:01:59.050
specific.

00:01:59.050 --> 00:02:01.450
And then after that,

00:02:01.450 --> 00:02:07.150
let me discreetly copy the statement to display that boss object.

00:02:07.150 --> 00:02:21.160
So now what is your gas is going to be the result off these three instructions in here.

00:02:21.160 --> 00:02:28.650
So I'm just trying to display the boss object in here and also note that I have now disable

00:02:28.650 --> 00:02:30.150
this to string method.

00:02:30.150 --> 00:02:32.250
I'll explain why I had to do that.

00:02:32.250 --> 00:02:35.920
But here I'm trying to display the boss object.

00:02:35.920 --> 00:02:36.850
And after that,

00:02:36.850 --> 00:02:39.950
I'm trying to get the list of employees in here.

00:02:39.950 --> 00:02:42.160
If around this program,

00:02:42.160 --> 00:02:50.000
since we have the fetch typeset too lazy have been it is just going to perform one select

00:02:50.000 --> 00:02:52.540
query to get the boss object.

00:02:52.540 --> 00:02:54.990
But it's not going to get the list off employees.

00:02:54.990 --> 00:03:00.670
Let's on the program and see what's happening.

00:03:00.670 --> 00:03:04.940
So as you can see,

00:03:04.940 --> 00:03:08.870
it has fish the boss details like Boss I D.

00:03:08.870 --> 00:03:10.700
Boss age and boss name.

00:03:10.700 --> 00:03:17.050
But nobody in here do you see employee objects,

00:03:17.050 --> 00:03:21.650
and that explains everything.

00:03:21.650 --> 00:03:26.560
So although we're trying to fetch the employee details in here,

00:03:26.560 --> 00:03:28.950
there is no real purpose off it.

00:03:28.950 --> 00:03:30.360
After officially stuff,

00:03:30.360 --> 00:03:32.760
employees were not doing anything with it.

00:03:32.760 --> 00:03:38.320
So let's do something with it so that we were telling have been made that Yes,

00:03:38.320 --> 00:03:42.850
we do have a real need for employees because we want to display it on the console.

00:03:42.850 --> 00:03:46.460
So I am just looking through all the list off employees and trying to display it.

00:03:46.460 --> 00:03:53.940
And now Cabinet would actually fetch the list off employees that are associated with the

00:03:53.940 --> 00:03:55.160
glass object.

00:03:55.160 --> 00:03:56.960
It's on the program again,

00:03:56.960 --> 00:04:06.150
and this time you would notice that have been It has not only fetched the boss object,

00:04:06.150 --> 00:04:10.910
but also fetched the list off employees.

00:04:10.910 --> 00:04:13.080
And here are those two.

00:04:13.080 --> 00:04:17.210
So these are getting the spread from the toasting matter off the employer object.

00:04:17.210 --> 00:04:23.170
So the reason why I didn't enabled this testing method as part of the that is part of this

00:04:23.170 --> 00:04:30.390
boss class is because if I enable this then having it things that there is a need to fetch

00:04:30.390 --> 00:04:36.650
the employee details because this will get displayed on the console enter is just going to

00:04:36.650 --> 00:04:38.150
catch everything,

00:04:38.150 --> 00:04:38.700
regardless,

00:04:38.700 --> 00:04:41.380
offer for doing something in here or not.

00:04:41.380 --> 00:04:48.950
Let's on the program and the result would be has expected.

00:04:48.950 --> 00:04:50.250
We got a couple off,

00:04:50.250 --> 00:04:52.510
said a statement on its to display the boss.

00:04:52.510 --> 00:04:54.770
Another is for employees,

00:04:54.770 --> 00:05:01.290
so that's about the lazy lowering.

00:05:01.290 --> 00:05:03.870
So what is the real purpose off lazy loading?

00:05:03.870 --> 00:05:04.840
Well,

00:05:04.840 --> 00:05:09.400
Liz Alluring has a significant role in improving the overall performance off your

00:05:09.400 --> 00:05:10.250
application.

00:05:10.250 --> 00:05:11.610
And ultimately,

00:05:11.610 --> 00:05:13.630
the user experience as well,

00:05:13.630 --> 00:05:14.570
for example,

00:05:14.570 --> 00:05:19.330
lets it that you've logged into your Facebook account and think about a situation where

00:05:19.330 --> 00:05:24.070
Facebook keeps on loading all the posts that ever existed.

00:05:24.070 --> 00:05:30.630
That would happen if Facebook was quoted in such way that the lazy loading is disabled.

00:05:30.630 --> 00:05:35.570
Since the logic behind the Facebook is Leslie lowering all the pose,

00:05:35.570 --> 00:05:38.560
you're able to see the pose only on demand.

00:05:38.560 --> 00:05:40.790
So as you scroll down the page,

00:05:40.790 --> 00:05:43.020
the post will get displayed.

00:05:43.020 --> 00:05:44.140
And that happens.

00:05:44.140 --> 00:05:44.370
You too.

00:05:44.370 --> 00:05:50.000
Lazy loading and Lizzie loading can also be absorbed in all the commerce websites.

00:05:50.000 --> 00:05:54.000
You don't get to see all the list off products that ever existed.

00:05:54.000 --> 00:05:56.610
You would see a few of them,

00:05:56.610 --> 00:05:57.910
and as you scroll down,

00:05:57.910 --> 00:06:00.450
the product would keep popping up.

00:06:00.450 --> 00:06:02.490
So that's about lazy loading.

00:06:02.490 --> 00:06:07.850
And the other option that you can set in here is eager loading.

00:06:07.850 --> 00:06:10.240
And that's simply the opposite.

00:06:10.240 --> 00:06:11.250
Awfully easy loading.

00:06:11.250 --> 00:06:14.800
So in case awful easy loading,

00:06:14.800 --> 00:06:20.450
it has performed a couple off select queries to display but the object.

00:06:20.450 --> 00:06:21.600
But now,

00:06:21.600 --> 00:06:23.550
if we run this program,

00:06:23.550 --> 00:06:26.350
you would know it.

00:06:26.350 --> 00:06:28.250
ISS that happened.

00:06:28.250 --> 00:06:35.840
It has actually performed the joint operation to be able to get the boss details,

00:06:35.840 --> 00:06:41.290
so it has not only fetched the boss details but also list off employees.

00:06:41.290 --> 00:06:49.730
So that's it on a lazy loading and other fetch strategies that have been it supports and

00:06:49.730 --> 00:06:55.250
lastly would like to mention that even if you don't specify any kind off Brett stategy in

00:06:55.250 --> 00:06:55.750
here.

00:06:55.750 --> 00:06:59.520
Depending on the type of relationship happen,

00:06:59.520 --> 00:07:05.690
it is actually going to default defense strategy to a the lazy or eager.

00:07:05.690 --> 00:07:14.240
So when you have a single entity that has to deal with many entities are many objects,

00:07:14.240 --> 00:07:16.570
like when you have one to manipulation,

00:07:16.570 --> 00:07:17.620
then sure,

00:07:17.620 --> 00:07:19.100
when you're trying to display this,

00:07:19.100 --> 00:07:21.230
we want lazy loading.

00:07:21.230 --> 00:07:22.270
So have been eight.

00:07:22.270 --> 00:07:26.120
The fall defects stategy Too lazy in this case.

00:07:26.120 --> 00:07:27.780
Same as with many,

00:07:27.780 --> 00:07:31.680
and you're trying to do something with one of the objects on this end,

00:07:31.680 --> 00:07:37.250
then we want have a need to default to lazy fat stategy.

00:07:37.250 --> 00:07:40.350
And when it comes to many to one mapping,

00:07:40.350 --> 00:07:46.160
many entities will have mapping with only one entity on the other end of the relation.

00:07:46.160 --> 00:07:51.250
So there's no real need off having touch type lazy in here,

00:07:51.250 --> 00:07:54.560
and same is the case with 1 to 1 relation.

00:07:54.560 --> 00:07:55.360
However,

00:07:55.360 --> 00:07:56.980
if you define your mapping,

00:07:56.980 --> 00:08:00.850
I'm in your annotation on the other end of the relation.

00:08:00.850 --> 00:08:06.140
Then it's like one to manipulation from this side from right to left.

00:08:06.140 --> 00:08:07.410
In that case again,

00:08:07.410 --> 00:08:10.450
we want the fit stategy to be lazy.

00:08:10.450 --> 00:08:11.120
All right,

00:08:11.120 --> 00:08:11.880
that's about it.

00:08:11.880 --> 00:08:13.110
Hope it made sense.

00:08:13.110 --> 00:08:14.050
So you assume

