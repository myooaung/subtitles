WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.870
Okay,

00:00:00.870 --> 00:00:01.360
First of all,

00:00:01.360 --> 00:00:04.400
let us explore what's happening in this data access class.

00:00:04.400 --> 00:00:09.930
The first method is to load this session factory and the code inside it is pretty

00:00:09.930 --> 00:00:10.850
straightforward.

00:00:10.850 --> 00:00:15.930
And I'm sure that your ordinary ever off this have picked this court from our previous

00:00:15.930 --> 00:00:16.750
examples.

00:00:16.750 --> 00:00:21.900
And we're actually going to call this method from some of the other matters we have in the

00:00:21.900 --> 00:00:22.800
same class.

00:00:22.800 --> 00:00:27.250
Let's take a look at how we perform the create operation.

00:00:27.250 --> 00:00:28.700
So as usual,

00:00:28.700 --> 00:00:32.350
we have initiated a transaction using the session object,

00:00:32.350 --> 00:00:35.010
and we're committing the transaction.

00:00:35.010 --> 00:00:36.560
And between these two,

00:00:36.560 --> 00:00:40.010
we are performing the insert operation.

00:00:40.010 --> 00:00:41.250
Well,

00:00:41.250 --> 00:00:42.950
we know this instructional dirty,

00:00:42.950 --> 00:00:50.870
but the only thing changes in here is that I have added this full loop to add 10 entries as

00:00:50.870 --> 00:00:51.750
simple as that.

00:00:51.750 --> 00:00:55.900
And I'm trying to save each and every object while we looked through.

00:00:55.900 --> 00:01:00.470
And rest of the court is just as our previous example,

00:01:00.470 --> 00:01:02.010
nothing different.

00:01:02.010 --> 00:01:04.800
We have catch block to catch the exceptions,

00:01:04.800 --> 00:01:10.250
and in case if there is any exception and we're trying to roll back the transaction and we

00:01:10.250 --> 00:01:17.380
got the finally blocked to close the session and we have read method to read all the

00:01:17.380 --> 00:01:18.800
entries from the database.

00:01:18.800 --> 00:01:23.950
The court in here is almost similar to what we have seen in create method,

00:01:23.950 --> 00:01:26.810
but the difference is this spot.

00:01:26.810 --> 00:01:33.490
So here's something new we're trying to use have been it query language in this way to read

00:01:33.490 --> 00:01:35.050
all the interest from the database.

00:01:35.050 --> 00:01:43.320
So I decision don't create query and I'll pass in some string and this has to be having it

00:01:43.320 --> 00:01:43.320
.

00:01:43.320 --> 00:01:48.050
Query language we're going to talk about have been equity language in future videos,

00:01:48.050 --> 00:01:49.440
but for now,

00:01:49.440 --> 00:01:54.780
this is a statement that you need to use to read the data from the employee table.

00:01:54.780 --> 00:02:00.990
Also do taken note that you should not give the actual table name in here as we've already

00:02:00.990 --> 00:02:01.590
talked.

00:02:01.590 --> 00:02:04.210
This supposed to be the class name,

00:02:04.210 --> 00:02:05.690
the persistent last name.

00:02:05.690 --> 00:02:13.340
So this is going to return list off employees in the table and the beauty off this is we're

00:02:13.340 --> 00:02:19.220
not really typecasting are we're not taking care of converting this into our employees

00:02:19.220 --> 00:02:19.750
object.

00:02:19.750 --> 00:02:22.750
It's all done by having it automatically.

00:02:22.750 --> 00:02:29.360
And so we're able to directly Assane all those entries into the list off employees.

00:02:29.360 --> 00:02:30.720
So that's the beauty off.

00:02:30.720 --> 00:02:35.300
Have been it and in our update employ method.

00:02:35.300 --> 00:02:37.250
I'm passing in one argument,

00:02:37.250 --> 00:02:44.010
which will be the idea of the employees off whom I want to make some updates and all the

00:02:44.010 --> 00:02:48.350
code will remain same and only part that changes is this.

00:02:48.350 --> 00:02:55.880
So we're trying to get the employees using the statement session don't get and then have a

00:02:55.880 --> 00:03:01.530
passing these two arguments and I'm trying to typecast this to employ object.

00:03:01.530 --> 00:03:01.950
Well,

00:03:01.950 --> 00:03:03.510
I believe we don't have to do this.

00:03:03.510 --> 00:03:10.170
I can just get it off this And what comes next is we're trying to update that particular

00:03:10.170 --> 00:03:15.060
object by calling the forger matted,

00:03:15.060 --> 00:03:17.850
and I'm sending the new updated value.

00:03:17.850 --> 00:03:26.450
And finally we have the Delete Ricard method and we're passing the identify where the

00:03:26.450 --> 00:03:28.710
employees that we want to delete and,

00:03:28.710 --> 00:03:29.530
as usual,

00:03:29.530 --> 00:03:32.250
everything remains same except this part.

00:03:32.250 --> 00:03:39.200
So this time I'm trying to do session dot load and passing the same arguments what we had

00:03:39.200 --> 00:03:47.110
passed in here while updating and again here we don't have to really typecast our search,

00:03:47.110 --> 00:03:54.250
and I'm calling sessions or delete person that object to dilate.

00:03:54.250 --> 00:03:54.970
Well,

00:03:54.970 --> 00:03:59.770
you may be asking what is the difference between session not get and session,

00:03:59.770 --> 00:04:03.950
not load well in terms off functionality.

00:04:03.950 --> 00:04:05.750
It doesn't really matter much,

00:04:05.750 --> 00:04:09.780
but session that load offers lazy loading.

00:04:09.780 --> 00:04:11.260
We'll talk about lazy luring,

00:04:11.260 --> 00:04:12.000
inhabiting it.

00:04:12.000 --> 00:04:12.940
Incoming videos,

00:04:12.940 --> 00:04:13.600
for sure.

00:04:13.600 --> 00:04:15.260
But roughly speaking,

00:04:15.260 --> 00:04:17.860
Lord will not load the actual object.

00:04:17.860 --> 00:04:21.190
But it would rather load a sample object,

00:04:21.190 --> 00:04:24.550
which doesn't actually represent the existing object.

00:04:24.550 --> 00:04:26.850
And then when you're trying to do something,

00:04:26.850 --> 00:04:29.720
then the actual Lord will happen.

00:04:29.720 --> 00:04:32.440
That's when the actual object will get picked up.

00:04:32.440 --> 00:04:38.730
So only when we do something with it will the habit and get the actual entry or the object

00:04:38.730 --> 00:04:39.850
from the database.

00:04:39.850 --> 00:04:41.660
If the object is not present,

00:04:41.660 --> 00:04:42.730
then happen.

00:04:42.730 --> 00:04:45.870
It will throw an exception but coming to get.

00:04:45.870 --> 00:04:48.570
If the object is not present,

00:04:48.570 --> 00:04:51.200
then we just simply get a null value.

00:04:51.200 --> 00:04:53.400
So I really before we perform this,

00:04:53.400 --> 00:04:55.950
we should check to see if the object is now or not.

00:04:55.950 --> 00:04:57.730
Only then,

00:04:57.730 --> 00:05:02.310
with love Date otherwise obviously will get no point exception.

00:05:02.310 --> 00:05:04.450
So that's the basic difference.

00:05:04.450 --> 00:05:08.550
But we're going to talk about the lazy loading incoming videos for sure,

00:05:08.550 --> 00:05:14.820
and then we have this method delete all which will delete all the entries in the table.

00:05:14.820 --> 00:05:20.980
And here is again the have been it query language to do the same.

00:05:20.980 --> 00:05:24.750
And finally,

00:05:24.750 --> 00:05:29.890
we have a mattered that we're going to call the Close the Session factory or it,

00:05:29.890 --> 00:05:30.310
you know,

00:05:30.310 --> 00:05:30.590
next,

00:05:30.590 --> 00:05:30.800
Really,

00:05:30.800 --> 00:05:33.150
we're going to take a look at the main logic,

00:05:33.150 --> 00:05:36.050
and we'll also take a look at how our application runs.

00:05:36.050 --> 00:05:37.180
See you soon.

