WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.360
Okay,

00:00:04.360 --> 00:00:06.060
let us take a look at some of the northward.

00:00:06.060 --> 00:00:09.150
A points based on the things that we learned so far.

00:00:09.150 --> 00:00:10.170
The first off,

00:00:10.170 --> 00:00:11.500
which is cash,

00:00:11.500 --> 00:00:12.930
doesn't store the objects,

00:00:12.930 --> 00:00:15.580
but it's data in the form off key value pair,

00:00:15.580 --> 00:00:16.700
and we start off,

00:00:16.700 --> 00:00:17.950
although he talked about it.

00:00:17.950 --> 00:00:25.170
But for the very reason you have to access the objects data by using its side and the fire

00:00:25.170 --> 00:00:25.170
.

00:00:25.170 --> 00:00:30.050
Because the key in the key value pair is the ad didn't fire off that object,

00:00:30.050 --> 00:00:34.290
and you have to use the identifier but not anything else.

00:00:34.290 --> 00:00:35.260
Also,

00:00:35.260 --> 00:00:40.290
you can't use Cabinet query language to leverage the functionality off cachet.

00:00:40.290 --> 00:00:41.950
If you use Hatch you'll,

00:00:41.950 --> 00:00:45.950
then things will be fetched directly from the database.

00:00:45.950 --> 00:00:49.450
And even if you use identify where to fish the data.

00:00:49.450 --> 00:00:52.170
The data would be fished from the database.

00:00:52.170 --> 00:00:52.990
For example,

00:00:52.990 --> 00:00:56.850
if you use SQL Statement like Sylhet star from employees,

00:00:56.850 --> 00:01:02.570
where ideas a call to to then even though there is an object present in the cachet,

00:01:02.570 --> 00:01:04.050
but that I didn't fire.

00:01:04.050 --> 00:01:08.420
The select query would be fired in the database to get the data,

00:01:08.420 --> 00:01:09.710
not from the cachet,

00:01:09.710 --> 00:01:13.820
and Justin gives If you're wondering the second level cache.

00:01:13.820 --> 00:01:17.560
A would stay updated with the latest modifications in the database,

00:01:17.560 --> 00:01:22.790
so it just simply keeps updating itself with the latest data in the database.

00:01:22.790 --> 00:01:27.600
So if you have multiple sessions trying to access the same object and one of the sessions,

00:01:27.600 --> 00:01:32.150
make an update off that object and it stores the data in the database,

00:01:32.150 --> 00:01:36.190
then the cash it would be updated with the updated data in the database.

00:01:36.190 --> 00:01:37.580
It's as simple as that.

00:01:37.580 --> 00:01:42.050
If you manually make an update from the database,

00:01:42.050 --> 00:01:46.380
then the cashier won't be notified to keep itself up to date.

00:01:46.380 --> 00:01:48.090
And that's the reason.

00:01:48.090 --> 00:01:49.270
As a rule of thumb,

00:01:49.270 --> 00:01:54.820
you don't want to really mess with the database directly from its console because that may

00:01:54.820 --> 00:01:59.770
lead to a lot off inconsistencies and only when you're sure of what you're doing.

00:01:59.770 --> 00:02:01.310
Do you want to do that?

00:02:01.310 --> 00:02:02.580
But Justin,

00:02:02.580 --> 00:02:05.160
because if you mess with it and you feel sorry,

00:02:05.160 --> 00:02:09.750
then you can just clean up the second level cache A by writing a piece off code.

00:02:09.750 --> 00:02:11.680
The session,

00:02:11.680 --> 00:02:12.580
not refresh,

00:02:12.580 --> 00:02:14.730
will update the first level cachet,

00:02:14.730 --> 00:02:16.400
and you want to use this method,

00:02:16.400 --> 00:02:20.610
especially to handle some data inconsistencies associated with Foster.

00:02:20.610 --> 00:02:21.300
Will cachet,

00:02:21.300 --> 00:02:22.360
for example,

00:02:22.360 --> 00:02:25.850
say that you have a couple of sessions and they both read the same object?

00:02:25.850 --> 00:02:29.020
One of the session writes the object back to the database,

00:02:29.020 --> 00:02:30.300
but still,

00:02:30.300 --> 00:02:31.920
in the second session,

00:02:31.920 --> 00:02:33.650
we may have the old data.

00:02:33.650 --> 00:02:34.950
In that case,

00:02:34.950 --> 00:02:39.450
you may get an exception saying that you have a stale object exception.

00:02:39.450 --> 00:02:40.820
In that case,

00:02:40.820 --> 00:02:41.800
you can just do session,

00:02:41.800 --> 00:02:42.670
not refresh.

00:02:42.670 --> 00:02:46.750
That would fetch the fresh data from the database into the cachet,

00:02:46.750 --> 00:02:48.830
and you can repeat the same operation.

00:02:48.830 --> 00:02:50.350
Whatever you're doing in that session,

00:02:50.350 --> 00:02:57.270
it's not recommended that you do heavy and time bond operations in a session because the

00:02:57.270 --> 00:03:00.550
first level cachet to a session would be very limited,

00:03:00.550 --> 00:03:08.380
and that may result in some are off memory exceptions by default.

00:03:08.380 --> 00:03:10.200
When you make an entity catchable,

00:03:10.200 --> 00:03:13.950
it doesn't mean that it's collections would also be catchable.

00:03:13.950 --> 00:03:15.750
You have to explicitly mention it.

00:03:15.750 --> 00:03:17.850
A sample code is seen in here.

00:03:17.850 --> 00:03:20.860
You have made the entity catchable,

00:03:20.860 --> 00:03:24.150
but then you have 12 minute relation in here,

00:03:24.150 --> 00:03:32.500
but the employees and so you also need to specify the cashing stategy that corresponds to

00:03:32.500 --> 00:03:33.750
this collection as well.

00:03:33.750 --> 00:03:35.310
So that's about it.

00:03:35.310 --> 00:03:36.170
See you soon

