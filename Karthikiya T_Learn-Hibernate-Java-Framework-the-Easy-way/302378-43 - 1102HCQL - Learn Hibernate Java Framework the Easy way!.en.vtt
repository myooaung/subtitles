WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.200
in this video,

00:00:05.200 --> 00:00:07.140
we're going to talk about criteria,

00:00:07.140 --> 00:00:07.850
queries,

00:00:07.850 --> 00:00:09.240
criteria.

00:00:09.240 --> 00:00:13.920
Query is just an alternate away to manipulate the data in the database.

00:00:13.920 --> 00:00:14.560
I mean,

00:00:14.560 --> 00:00:16.160
whatever you can do with the other hatch,

00:00:16.160 --> 00:00:17.730
kill our SQL,

00:00:17.730 --> 00:00:22.230
you can pretty much accomplish the same using criteria query.

00:00:22.230 --> 00:00:26.140
But there is one primary advantage in using criteria.

00:00:26.140 --> 00:00:26.760
Query.

00:00:26.760 --> 00:00:29.150
We're going to talk about it in a while,

00:00:29.150 --> 00:00:34.440
so let's think about the following scenario where you have these two tables in the database

00:00:34.440 --> 00:00:34.440
.

00:00:34.440 --> 00:00:36.230
One is the boss table,

00:00:36.230 --> 00:00:39.180
and it corresponds to list off employees.

00:00:39.180 --> 00:00:44.600
That means we have one too many relation from boss to employees,

00:00:44.600 --> 00:00:45.490
and similarly,

00:00:45.490 --> 00:00:50.760
we also have many to one mapping specified in the employee entity.

00:00:50.760 --> 00:00:54.650
Let's take a look at the code and see how it would look.

00:00:54.650 --> 00:01:01.200
So we have the Boston Duty and whispers fire one too many relation with list off employees

00:01:01.200 --> 00:01:01.200
,

00:01:01.200 --> 00:01:02.470
and similarly,

00:01:02.470 --> 00:01:03.860
in the Employ entity,

00:01:03.860 --> 00:01:09.150
we have specified many to one mapping with a boss object.

00:01:09.150 --> 00:01:13.400
So it's bidirectional mapping that goes from both the ends.

00:01:13.400 --> 00:01:19.350
So now my task is to extract data from these two tables,

00:01:19.350 --> 00:01:21.920
and let's say that this is my task.

00:01:21.920 --> 00:01:26.910
I want to display list off employees whose name starts with E M.

00:01:26.910 --> 00:01:31.000
P X and who's boss is Sunder.

00:01:31.000 --> 00:01:37.800
I also want to order the results that in descending order how can we accomplish this using

00:01:37.800 --> 00:01:40.150
hatch creo r sq Uh,

00:01:40.150 --> 00:01:44.450
I would have to follow the following syntax.

00:01:44.450 --> 00:01:50.210
You would say select and then you would specify list off feels that you want to select In

00:01:50.210 --> 00:01:50.850
this case,

00:01:50.850 --> 00:01:52.690
we want to select the employee name,

00:01:52.690 --> 00:02:00.450
his salary and the boss name that corresponds to this employee from the boss table.

00:02:00.450 --> 00:02:08.150
And we're going to use the keyboard from to specify from which table or tables We won't

00:02:08.150 --> 00:02:09.390
extract the data.

00:02:09.390 --> 00:02:10.590
In this case,

00:02:10.590 --> 00:02:17.050
we won't extract the data from two tables and so we have to use the joint operation.

00:02:17.050 --> 00:02:24.230
So we're performing the joint operation between the Boston Duty and the employees entity or

00:02:24.230 --> 00:02:26.270
table by default.

00:02:26.270 --> 00:02:27.640
When we say join,

00:02:27.640 --> 00:02:29.650
it's going to be in our joint.

00:02:29.650 --> 00:02:31.560
And after we do that,

00:02:31.560 --> 00:02:34.290
we can now specify our list.

00:02:34.290 --> 00:02:41.920
Off closets are conditions using this key would where so here he would specify all the list

00:02:41.920 --> 00:02:47.800
of conditions like on what basis do we want to join these two tables we want to join these

00:02:47.800 --> 00:02:51.370
two tables based on the foreign key.

00:02:51.370 --> 00:02:52.250
I mean,

00:02:52.250 --> 00:02:53.520
based on the B i.

00:02:53.520 --> 00:02:53.910
D.

00:02:53.910 --> 00:02:57.260
In the boss table and boss i D,

00:02:57.260 --> 00:03:00.350
which is the foreign key from the employee table.

00:03:00.350 --> 00:03:06.250
Once we specify that we can now specify the like condition.

00:03:06.250 --> 00:03:10.890
So we're trying to list on all the employees whose name starts with E.

00:03:10.890 --> 00:03:11.050
M.

00:03:11.050 --> 00:03:11.760
P X.

00:03:11.760 --> 00:03:18.050
And then after that we have one more condition is to further filter the list based on who

00:03:18.050 --> 00:03:19.980
their bosses in the scarce.

00:03:19.980 --> 00:03:23.870
We're trying to extract all the employees who's boss,

00:03:23.870 --> 00:03:23.990
eh,

00:03:23.990 --> 00:03:24.710
sunder?

00:03:24.710 --> 00:03:25.940
And finally,

00:03:25.940 --> 00:03:29.060
we want to order the list in descending order.

00:03:29.060 --> 00:03:29.630
Well,

00:03:29.630 --> 00:03:33.960
this is how you would do either by using hetch Grill or rescuer.

00:03:33.960 --> 00:03:38.090
But the problem with this approach is that if you make any mistakes,

00:03:38.090 --> 00:03:38.650
for example,

00:03:38.650 --> 00:03:43.480
if you say instruct from you would say from or whatever,

00:03:43.480 --> 00:03:45.300
if it is some type of error,

00:03:45.300 --> 00:03:50.960
then you would get to see the error during the run time and imagine that you have a very

00:03:50.960 --> 00:03:52.150
large application,

00:03:52.150 --> 00:03:53.950
which takes a while to build,

00:03:53.950 --> 00:04:00.220
and then you have to deploy that application onto the silver to see the exception instead,

00:04:00.220 --> 00:04:06.530
It would be a lot better in case if you're notified with the error during the compile time

00:04:06.530 --> 00:04:07.250
itself.

00:04:07.250 --> 00:04:10.590
And another problem with this approach is as a job,

00:04:10.590 --> 00:04:11.070
a dollop.

00:04:11.070 --> 00:04:11.430
Er,

00:04:11.430 --> 00:04:12.320
you didn't find it.

00:04:12.320 --> 00:04:15.150
We're in to to to write a query like this.

00:04:15.150 --> 00:04:21.320
You would rather prefer to interact with the Java objects and methods rather than having to

00:04:21.320 --> 00:04:28.260
learn a language like SQL or Hetch kill and do a lot of Google research before you figure

00:04:28.260 --> 00:04:29.650
out the query like this.

00:04:29.650 --> 00:04:34.150
So the answer to these queries is criteria query.

00:04:34.150 --> 00:04:37.820
And here are the list off steps that I've listed down,

00:04:37.820 --> 00:04:41.780
which will explain how we can use the criteria query.

00:04:41.780 --> 00:04:45.970
So the first step is to create so called value object.

00:04:45.970 --> 00:04:46.350
Now,

00:04:46.350 --> 00:04:47.540
this is something new,

00:04:47.540 --> 00:04:49.900
and we haven't talked about this so far.

00:04:49.900 --> 00:04:51.800
So what is the object?

00:04:51.800 --> 00:04:52.360
Well,

00:04:52.360 --> 00:04:54.580
it is essentially same as oppo Joe,

00:04:54.580 --> 00:04:58.780
but it does not have any representation off a relational database table.

00:04:58.780 --> 00:05:00.690
But then why is it there?

00:05:00.690 --> 00:05:04.450
It is there to hold all this list off values,

00:05:04.450 --> 00:05:10.190
So the results said that could get by using criteria Query would be in the form off in

00:05:10.190 --> 00:05:13.400
stances off the value object trance.

00:05:13.400 --> 00:05:20.240
So this value object class is going to hold all these properties along with a constructor.

00:05:20.240 --> 00:05:20.910
First,

00:05:20.910 --> 00:05:24.970
take a look at the value object and see how it looks in our kids.

00:05:24.970 --> 00:05:27.350
We want to display this tree fields.

00:05:27.350 --> 00:05:30.900
So one is to hold the string.

00:05:30.900 --> 00:05:35.890
The employee name and the other is to hold the salary and then one more,

00:05:35.890 --> 00:05:39.050
which is also going to be a strength to store the boss name.

00:05:39.050 --> 00:05:45.050
So here is the value object we have and those three fields in here,

00:05:45.050 --> 00:05:46.570
and along with that,

00:05:46.570 --> 00:05:52.970
it's mandatory the tune to specify the falling constructor that's going to help us populate

00:05:52.970 --> 00:05:54.010
these fields.

00:05:54.010 --> 00:05:56.610
If you don't specify the constructor,

00:05:56.610 --> 00:05:57.980
you're going to see an error.

00:05:57.980 --> 00:06:03.630
That's because having it is actually going to use this constructor to give values for the

00:06:03.630 --> 00:06:06.350
instances that gets created on the fly.

00:06:06.350 --> 00:06:10.610
So once you have this value object class ready,

00:06:10.610 --> 00:06:14.600
we can move on and create our criteria Equity object,

00:06:14.600 --> 00:06:20.790
and it would specify list off entities involved to generate their desired result.

00:06:20.790 --> 00:06:21.280
Through this,

00:06:21.280 --> 00:06:22.450
take a look at the code.

00:06:22.450 --> 00:06:24.950
So whatever we have in here,

00:06:24.950 --> 00:06:25.570
I mean,

00:06:25.570 --> 00:06:30.230
asked for the project This is similar to our bi directional mapping example,

00:06:30.230 --> 00:06:33.150
but this is the code that does the magic.

00:06:33.150 --> 00:06:34.630
So first of all,

00:06:34.630 --> 00:06:40.710
in order to acquire decried equity object you to first acquire so called a criteria builder

00:06:40.710 --> 00:06:45.990
and that you can get a day from session are from the entity manager object.

00:06:45.990 --> 00:06:49.100
We're going to talk about entity manager incoming videos,

00:06:49.100 --> 00:06:49.650
by the way.

00:06:49.650 --> 00:06:53.480
So you would cessation don't get criteria builder,

00:06:53.480 --> 00:06:56.200
and then he would say,

00:06:56.200 --> 00:06:57.530
corrected a builder,

00:06:57.530 --> 00:06:59.150
not create query.

00:06:59.150 --> 00:07:02.170
And then you would pass in that value object trance.

00:07:02.170 --> 00:07:02.690
So,

00:07:02.690 --> 00:07:03.950
by the statement were telling,

00:07:03.950 --> 00:07:07.620
have been eight that we want the criteria equity object.

00:07:07.620 --> 00:07:11.720
And we want to use this value object class to store the results.

00:07:11.720 --> 00:07:13.730
That and enough to that,

00:07:13.730 --> 00:07:19.330
you'd have to specify list off entities involved to generate the desired result.

00:07:19.330 --> 00:07:24.370
And the way you go about doing that is by defining the route object off each entity.

00:07:24.370 --> 00:07:25.430
In this manner,

00:07:25.430 --> 00:07:29.790
they would say criteria query dot from So,

00:07:29.790 --> 00:07:34.330
just like we specified the keyword from in here as part of the SQL query.

00:07:34.330 --> 00:07:37.690
And then we mentioned the list off tables involved.

00:07:37.690 --> 00:07:45.970
We're going to do the same by using this method from and we specified list off entities

00:07:45.970 --> 00:07:48.310
involved to get the desired results.

00:07:48.310 --> 00:07:50.150
That and internally,

00:07:50.150 --> 00:07:56.110
these two instructions would actually result in performing the joint operation off.

00:07:56.110 --> 00:07:58.230
These two entities are tables.

00:07:58.230 --> 00:08:00.340
So with these two instructions,

00:08:00.340 --> 00:08:06.060
we're also going to get so called their route objects using these objects,

00:08:06.060 --> 00:08:12.220
we can actually get access toe their fields and we're going to use their fields and the

00:08:12.220 --> 00:08:13.350
rest off our code.

00:08:13.350 --> 00:08:20.450
So the next step is to apply the restrictions dislike were doing in here.

00:08:20.450 --> 00:08:27.170
We have set of restrictions are predicates are were clauses in order to filter out the

00:08:27.170 --> 00:08:31.250
results that we do have the same stuff in our court as well.

00:08:31.250 --> 00:08:34.700
And just like we have three conditions in here,

00:08:34.700 --> 00:08:39.290
we have the same stuff in our court as well.

00:08:39.290 --> 00:08:40.970
Everything is pretty similar.

00:08:40.970 --> 00:08:46.050
But the only difference is we're doing things in more object oriented manner.

00:08:46.050 --> 00:08:49.000
So you would use the criteria builder object,

00:08:49.000 --> 00:08:53.890
and you would call this matter equal to check the equality off these two values.

00:08:53.890 --> 00:09:01.560
So this is similar to what we specified in here and then in addition to that,

00:09:01.560 --> 00:09:09.110
we also specified this like claws to see who are all employees or having the name that

00:09:09.110 --> 00:09:14.450
starts with the MPX just like we specified in here.

00:09:14.450 --> 00:09:16.630
And finally,

00:09:16.630 --> 00:09:20.510
we're also checking to see that their boss is Sunder.

00:09:20.510 --> 00:09:25.910
And once we acquire an area off restrictions,

00:09:25.910 --> 00:09:32.340
we can apply them by using this method where and you would apply list off those We're

00:09:32.340 --> 00:09:33.100
clauses.

00:09:33.100 --> 00:09:39.250
So you would say criteria clearly dot where and then you would specify set off restrictions

00:09:39.250 --> 00:09:41.650
and after that,

00:09:41.650 --> 00:09:44.950
he would apply the order by clause,

00:09:44.950 --> 00:09:46.750
just like we did in here.

00:09:46.750 --> 00:09:49.350
So here it is.

00:09:49.350 --> 00:09:57.290
Here's the statement and this time you're going to use the DSE method off criteria builder

00:09:57.290 --> 00:10:03.520
to order the results at in descending order in which field you're going to use to sort the

00:10:03.520 --> 00:10:03.890
results.

00:10:03.890 --> 00:10:08.950
That is what you would specify in here that's by the employee name.

00:10:08.950 --> 00:10:16.440
And finally you would call this method select and here you would specify everything.

00:10:16.440 --> 00:10:16.980
I mean,

00:10:16.980 --> 00:10:23.110
just like we did in here who said select and in these three fields you had mentioned the

00:10:23.110 --> 00:10:27.460
same stuff we mentioned these three fields and in addition to that,

00:10:27.460 --> 00:10:33.450
you also need to specify the value object using which the results that would be stored.

00:10:33.450 --> 00:10:39.960
So until this far you have constructed the criteria query,

00:10:39.960 --> 00:10:43.020
which would essentially represent the same Cleary.

00:10:43.020 --> 00:10:45.760
And after that you have to take care off.

00:10:45.760 --> 00:10:46.850
Executing the same.

00:10:46.850 --> 00:10:53.150
You can do so by saying session dot create query and then you would pass in that criteria

00:10:53.150 --> 00:10:54.320
quickly as an object.

00:10:54.320 --> 00:10:55.100
So far,

00:10:55.100 --> 00:10:56.800
we created a hedge bill statement,

00:10:56.800 --> 00:11:01.350
which is a static string and would pass it as an argument.

00:11:01.350 --> 00:11:04.210
But this time we're passing the criteria query.

00:11:04.210 --> 00:11:05.100
And finally,

00:11:05.100 --> 00:11:10.880
we're just trying to display the results set so this on the program and see how things will

00:11:10.880 --> 00:11:11.250
go.

00:11:11.250 --> 00:11:16.540
And sure enough,

00:11:16.540 --> 00:11:19.920
you have the result.

00:11:19.920 --> 00:11:21.450
As expected,

00:11:21.450 --> 00:11:27.000
I'm going to make this project about bull for you to import so that you can play with it.

00:11:27.000 --> 00:11:37.080
Now let's say that I wanted to apply one more clause that only the employees whose salaries

00:11:37.080 --> 00:11:40.550
greater than 1500 I want to display.

00:11:40.550 --> 00:11:45.180
So we just have to simply apply on more cross in here.

00:11:45.180 --> 00:11:51.950
So I'm going to say criteria builder docked.

00:11:51.950 --> 00:11:59.810
We have another method called greater than you would specify the employee's salary field in

00:11:59.810 --> 00:12:07.270
here salary and you would do the number which will be 1500.

00:12:07.270 --> 00:12:10.660
And that will do so out of this.

00:12:10.660 --> 00:12:13.160
To employees that got populated,

00:12:13.160 --> 00:12:15.630
we would see only one employee,

00:12:15.630 --> 00:12:20.100
and it's going to be this because only his salary is greater than 1500.

00:12:20.100 --> 00:12:22.450
Let's run the program again.

00:12:22.450 --> 00:12:29.140
And sure enough,

00:12:29.140 --> 00:12:31.450
we have the result as expected.

00:12:31.450 --> 00:12:33.940
So that's about it.

00:12:33.940 --> 00:12:35.630
On the criteria query.

00:12:35.630 --> 00:12:40.170
It is useful because all the Java developers would feel more native.

00:12:40.170 --> 00:12:45.590
And they're more comfortable in writing code in object oriented approach than having to

00:12:45.590 --> 00:12:48.040
learn a new language like SQL.

00:12:48.040 --> 00:12:50.380
So whichever way you find comfortable,

00:12:50.380 --> 00:12:51.200
you can use it.

00:12:51.200 --> 00:12:52.630
Both are preferred,

00:12:52.630 --> 00:12:54.750
and they both work very well.

00:12:54.750 --> 00:12:55.910
All right,

00:12:55.910 --> 00:12:56.580
that's about it.

00:12:56.580 --> 00:12:57.170
See you soon.

