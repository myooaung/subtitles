WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.190
in this video,

00:00:05.190 --> 00:00:08.250
we're going to talk about transactions and have been eight.

00:00:08.250 --> 00:00:12.900
We had talked about transactions in detail in my database course.

00:00:12.900 --> 00:00:14.730
If you want to check that course,

00:00:14.730 --> 00:00:20.270
I have put the link to that course in the final chapter off this course.

00:00:20.270 --> 00:00:22.320
But for the sake off this course,

00:00:22.320 --> 00:00:24.880
and in case if you don't know what is a transaction,

00:00:24.880 --> 00:00:27.450
then here is a quick example of the same.

00:00:27.450 --> 00:00:32.930
Let's say that you have a banking application and see that there are a couple of customers

00:00:32.930 --> 00:00:39.000
A and B A holds the total amount off 1000 and same is with the B.

00:00:39.000 --> 00:00:43.050
Now let's say that a wants to send 500 to be.

00:00:43.050 --> 00:00:48.660
So here are the sequence off actions you would take as part of a single transaction,

00:00:48.660 --> 00:00:52.790
so you would basically didn't find it from his account,

00:00:52.790 --> 00:00:56.690
and then you would credit 500 to bees account.

00:00:56.690 --> 00:01:01.940
So if you're performing this kind of task without using the transaction mechanism,

00:01:01.940 --> 00:01:05.420
then this is going to yield a lot of problems.

00:01:05.420 --> 00:01:06.720
As an example,

00:01:06.720 --> 00:01:10.980
say that after you directed find it from his account,

00:01:10.980 --> 00:01:15.050
there is an exception in our code when there is an exception.

00:01:15.050 --> 00:01:17.680
All the rest of the lines was not be executed.

00:01:17.680 --> 00:01:22.280
And that includes crediting by wonder Toby's account.

00:01:22.280 --> 00:01:30.200
So we're going to see is a count as 500 and bees account would still remain as 1000.

00:01:30.200 --> 00:01:32.050
That is clearly a problem.

00:01:32.050 --> 00:01:39.190
So if you use transaction mechanism that would fulfill all these transaction properties.

00:01:39.190 --> 00:01:44.620
So let's talk about all of them at Thomas City insurers that all the sequence off factions

00:01:44.620 --> 00:01:50.190
involved in a transaction will take place or none at all in case off an exception.

00:01:50.190 --> 00:01:52.460
And that is certainly a good thing to have.

00:01:52.460 --> 00:01:53.910
For example,

00:01:53.910 --> 00:01:57.960
if we have an exception after deducting finder from his account,

00:01:57.960 --> 00:02:02.290
then none of these actions should actually take effect.

00:02:02.290 --> 00:02:05.750
Everything should be rolled back to their original state.

00:02:05.750 --> 00:02:06.910
So still,

00:02:06.910 --> 00:02:09.450
the values should remain to be same,

00:02:09.450 --> 00:02:14.250
and data consistency insurers that after performing the transaction,

00:02:14.250 --> 00:02:16.940
the data is inconsistent state.

00:02:16.940 --> 00:02:18.010
For example,

00:02:18.010 --> 00:02:20.710
before performing these two transactions,

00:02:20.710 --> 00:02:27.890
the total value would be 2000 and even after you perform this transaction,

00:02:27.890 --> 00:02:31.190
the total should still remain 2000.

00:02:31.190 --> 00:02:32.560
If not,

00:02:32.560 --> 00:02:36.150
then there is some problem and data is not consistent.

00:02:36.150 --> 00:02:41.960
The isolation defines that each and every transaction should be performed in isolation.

00:02:41.960 --> 00:02:43.040
For example,

00:02:43.040 --> 00:02:44.440
we have a couple of transactions,

00:02:44.440 --> 00:02:45.020
let's say,

00:02:45.020 --> 00:02:48.420
and the boat are trying to obey the same record in the database,

00:02:48.420 --> 00:02:53.270
Then only one transaction should take effect in isolation,

00:02:53.270 --> 00:02:54.720
while the other transition relay,

00:02:54.720 --> 00:02:55.970
the being waiting state,

00:02:55.970 --> 00:02:57.550
are doing something else.

00:02:57.550 --> 00:03:02.870
Durability ensures that when the transaction is taking place,

00:03:02.870 --> 00:03:05.330
if there is any loss of data in the database,

00:03:05.330 --> 00:03:08.700
maybe it's due to natural calamities or whatever.

00:03:08.700 --> 00:03:12.850
That should not impact the overall consistency off the database.

00:03:12.850 --> 00:03:15.520
So that's what is durability.

00:03:15.520 --> 00:03:20.090
So together all these properties are called acid properties.

00:03:20.090 --> 00:03:22.790
So when you take out first letter from all these properties,

00:03:22.790 --> 00:03:25.930
it becomes the world acid and hence the name.

00:03:25.930 --> 00:03:30.780
So let's take a look at a quick example off transaction and believe it or not,

00:03:30.780 --> 00:03:32.810
so far in our examples,

00:03:32.810 --> 00:03:35.130
we were all very performing transactions.

00:03:35.130 --> 00:03:36.950
So to begin a transaction,

00:03:36.950 --> 00:03:42.340
you're going to use this statement session dot begin transaction,

00:03:42.340 --> 00:03:47.470
and then you would perform all the sequence off past that together can be considered as a

00:03:47.470 --> 00:03:48.720
single transaction,

00:03:48.720 --> 00:03:50.480
and once you're done with it,

00:03:50.480 --> 00:03:56.300
we're going to say transaction dot com It this is what will come with the changes into the

00:03:56.300 --> 00:03:57.070
database.

00:03:57.070 --> 00:03:59.010
And in our example,

00:03:59.010 --> 00:04:03.950
I'm just trying to get the employees object with identify are one,

00:04:03.950 --> 00:04:07.700
and I'm trying to set his salary to zero.

00:04:07.700 --> 00:04:11.050
Same is the case with employees with I d to.

00:04:11.050 --> 00:04:13.100
But in between these two,

00:04:13.100 --> 00:04:15.330
I'm trying to get an employee,

00:04:15.330 --> 00:04:17.260
which is basically a null object,

00:04:17.260 --> 00:04:20.160
and I'm trying to set the salary to zero.

00:04:20.160 --> 00:04:21.340
So guess what?

00:04:21.340 --> 00:04:25.070
This instruction should result in an exception.

00:04:25.070 --> 00:04:26.160
In our case,

00:04:26.160 --> 00:04:28.790
this is going to be a null pointer exception.

00:04:28.790 --> 00:04:32.650
So an exception would be caught somewhere in the middle of the transaction.

00:04:32.650 --> 00:04:34.550
And after it is caught,

00:04:34.550 --> 00:04:37.450
I'm checking to see if the transaction object is now.

00:04:37.450 --> 00:04:42.650
And after that I'm calling this Method Transaction Tot roll back.

00:04:42.650 --> 00:04:46.870
So what this matter is going to do is it's going to reverse everything,

00:04:46.870 --> 00:04:50.180
whatever has been done since the beginning off the transaction.

00:04:50.180 --> 00:04:51.570
And that's what we want.

00:04:51.570 --> 00:04:55.000
We won't roll back everything in case off an exception.

00:04:55.000 --> 00:04:59.750
Imagine this transaction to be the banking transaction that we had talked about.

00:04:59.750 --> 00:05:01.950
Then there is an exception.

00:05:01.950 --> 00:05:03.780
After performing the first task,

00:05:03.780 --> 00:05:08.150
we won't roll back everything we don't want anything to take effect at all,

00:05:08.150 --> 00:05:10.250
and that's what I'm trying to do here.

00:05:10.250 --> 00:05:17.070
Let me try to run the program without having any exception.

00:05:17.070 --> 00:05:19.310
Everything should work smoothly.

00:05:19.310 --> 00:05:29.910
Let's go to the database and see what's happening there.

00:05:29.910 --> 00:05:33.290
So if you go to the employees stable,

00:05:33.290 --> 00:05:34.120
sure enough,

00:05:34.120 --> 00:05:36.150
we have the salary set to zero.

00:05:36.150 --> 00:05:41.490
Now let's try to change your code and make sure that we get an exception.

00:05:41.490 --> 00:05:43.870
Let's on the program again,

00:05:43.870 --> 00:05:49.650
and sure enough,

00:05:49.650 --> 00:05:51.480
we have the no point exception.

00:05:51.480 --> 00:05:53.270
And if you go to the database,

00:05:53.270 --> 00:05:55.150
nothing will take effect at all.

00:05:55.150 --> 00:05:57.710
So that's the beauty of transactions.

00:05:57.710 --> 00:06:00.490
So these are the primary methods,

00:06:00.490 --> 00:06:02.580
which are typically used in Harbin.

00:06:02.580 --> 00:06:05.620
Eight to perform the to manage the transactions.

00:06:05.620 --> 00:06:09.230
It begin the transaction and come in the transaction.

00:06:09.230 --> 00:06:11.070
In case if there is an exception,

00:06:11.070 --> 00:06:12.250
he would roll back.

00:06:12.250 --> 00:06:18.210
Also taken note that in case if you forget to specify the rollback mechanism,

00:06:18.210 --> 00:06:19.250
then happen.

00:06:19.250 --> 00:06:23.940
It is actually going to manage transaction for us and will perform the role back on our

00:06:23.940 --> 00:06:24.650
behalf,

00:06:24.650 --> 00:06:26.760
but we can't completely rely on it.

00:06:26.760 --> 00:06:31.660
It's better that you explicitly roll back the transaction and guess that something is going

00:06:31.660 --> 00:06:32.150
wrong.

00:06:32.150 --> 00:06:36.750
So that's on the program and see that nothing would take effect.

00:06:36.750 --> 00:06:40.650
And sure enough,

00:06:40.650 --> 00:06:43.550
there's no change taking place.

00:06:43.550 --> 00:06:45.850
So likewise,

00:06:45.850 --> 00:06:50.870
we got a lot off other methods that you can access from the transaction object.

00:06:50.870 --> 00:06:53.650
So in here in the finally block,

00:06:53.650 --> 00:06:55.660
before I'm closing on the session,

00:06:55.660 --> 00:06:58.750
I'm trying to see if the transaction is still act to.

00:06:58.750 --> 00:07:03.440
So this would display a bullion value,

00:07:03.440 --> 00:07:06.130
whether the transaction is still act or not.

00:07:06.130 --> 00:07:07.140
But before that,

00:07:07.140 --> 00:07:10.430
let me just quickly undo and put the rollback statement.

00:07:10.430 --> 00:07:11.650
So in no case,

00:07:11.650 --> 00:07:13.960
before we execute the statement,

00:07:13.960 --> 00:07:16.350
we're trying to roll back the transaction.

00:07:16.350 --> 00:07:19.550
So this should result in falls,

00:07:19.550 --> 00:07:26.640
and sure enough,

00:07:26.640 --> 00:07:27.950
it is set to falls.

00:07:27.950 --> 00:07:28.900
Similarly,

00:07:28.900 --> 00:07:30.520
we got a lot of other methods.

00:07:30.520 --> 00:07:31.330
Not a lot,

00:07:31.330 --> 00:07:32.350
but quite a few.

00:07:32.350 --> 00:07:34.970
You can easily understand what they are.

00:07:34.970 --> 00:07:38.220
Just scroll through all the medicine,

00:07:38.220 --> 00:07:41.150
see the description and get a sense of what they're doing.

00:07:41.150 --> 00:07:45.560
Let's try to get the status of the transaction,

00:07:45.560 --> 00:07:48.250
and it gets displayed there.

00:07:48.250 --> 00:07:50.930
Okay,

00:07:50.930 --> 00:07:55.880
let's get whatever the string that she was to give here and on the program.

00:07:55.880 --> 00:08:03.050
And here's the status transaction has been rolled back.

00:08:03.050 --> 00:08:04.280
All right,

00:08:04.280 --> 00:08:05.190
that's about it.

00:08:05.190 --> 00:08:06.250
See you soon.

