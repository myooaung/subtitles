WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.230
Okay,

00:00:01.230 --> 00:00:04.150
let's take a look at what's happening in our main method.

00:00:04.150 --> 00:00:06.690
All the court in here is pretty,

00:00:06.690 --> 00:00:07.230
Is it?

00:00:07.230 --> 00:00:08.050
Understand?

00:00:08.050 --> 00:00:10.360
I'm not sure if I need to walk you through,

00:00:10.360 --> 00:00:11.850
but I'm just doing it anyway.

00:00:11.850 --> 00:00:17.690
So what we're essentially doing is to call all those methods in the Dow class one by one.

00:00:17.690 --> 00:00:20.870
So we're trying to add entries into the table,

00:00:20.870 --> 00:00:26.720
but calling this create method and then we're trying to read whatever has been added,

00:00:26.720 --> 00:00:30.750
and we're just sloping through all the entries to display them.

00:00:30.750 --> 00:00:35.820
And this is the reason why I had to override the to string method so that when you're

00:00:35.820 --> 00:00:37.550
trying to display these objects,

00:00:37.550 --> 00:00:39.860
they will be displayed in human,

00:00:39.860 --> 00:00:40.750
readable manner,

00:00:40.750 --> 00:00:42.620
and similarly,

00:00:42.620 --> 00:00:45.950
we're trying to update a record bypassing the identifier.

00:00:45.950 --> 00:00:46.910
In this case,

00:00:46.910 --> 00:00:52.770
I'm trying to update the employer with i d five and after I update,

00:00:52.770 --> 00:00:56.820
I'm again trying to display all the list off employees.

00:00:56.820 --> 00:00:58.030
And similarly,

00:00:58.030 --> 00:01:01.050
I'm trying to delete an employee with I d to.

00:01:01.050 --> 00:01:03.850
And then I'm trying to display everything.

00:01:03.850 --> 00:01:05.410
And finally,

00:01:05.410 --> 00:01:07.990
I'm deleting all the records in the table.

00:01:07.990 --> 00:01:09.510
Of course,

00:01:09.510 --> 00:01:12.350
we're closing the session factory in the end,

00:01:12.350 --> 00:01:17.050
so Let's take a look at how things will go that's run the program,

00:01:17.050 --> 00:01:25.850
creating the employee records.

00:01:25.850 --> 00:01:32.500
So after employees courts are created,

00:01:32.500 --> 00:01:34.900
we're trying to read the same.

00:01:34.900 --> 00:01:36.850
And here are the list off employees.

00:01:36.850 --> 00:01:45.870
And then we're trying to update the employee card with I D five particular,

00:01:45.870 --> 00:01:47.540
get the employees with I D five.

00:01:47.540 --> 00:01:50.420
His name is now updated with something else,

00:01:50.420 --> 00:01:51.510
and similarly,

00:01:51.510 --> 00:01:54.000
we're trying to delete the record with I D,

00:01:54.000 --> 00:01:54.630
too.

00:01:54.630 --> 00:01:56.280
So you don't find employees with.

00:01:56.280 --> 00:01:56.590
I did,

00:01:56.590 --> 00:02:02.970
too in here in this list dilated all the records closed on the session factory.

00:02:02.970 --> 00:02:04.450
But do take a note.

00:02:04.450 --> 00:02:06.800
Although we closed on the session factory,

00:02:06.800 --> 00:02:09.150
how process is still running?

00:02:09.150 --> 00:02:15.090
Can you guess why this is issue that I was talking.

00:02:15.090 --> 00:02:16.750
Let's stop this.

00:02:16.750 --> 00:02:19.950
Let's go to our doll class.

00:02:19.950 --> 00:02:23.280
So here is where we have the issue.

00:02:23.280 --> 00:02:25.530
Can you make a guess on what's going wrong?

00:02:25.530 --> 00:02:29.400
We have a serious issue,

00:02:29.400 --> 00:02:35.610
something to do with performance positivity and try to fix the problem.

00:02:35.610 --> 00:02:36.810
If you're not successful,

00:02:36.810 --> 00:02:37.950
just continue watching.

00:02:37.950 --> 00:02:39.740
But don't give up on trying,

00:02:39.740 --> 00:02:40.050
though,

00:02:40.050 --> 00:02:50.880
So here is where the fix needs to go every time you're calling this method from all these

00:02:50.880 --> 00:02:55.870
methods we're re initiating are recreating a session factory.

00:02:55.870 --> 00:02:58.150
That is a very expensive thing to do.

00:02:58.150 --> 00:03:03.100
You have to try to create only one session factory for application.

00:03:03.100 --> 00:03:07.950
And we want that session factor to stay alive as long as the application is running.

00:03:07.950 --> 00:03:09.020
So in here,

00:03:09.020 --> 00:03:23.680
we can just quickly check to see if session factory not equals no.

00:03:23.680 --> 00:03:38.960
Then we just simply return it return session Factory as simple has done so the session

00:03:38.960 --> 00:03:42.800
object is all that existing then would just simply return it.

00:03:42.800 --> 00:03:43.590
Otherwise,

00:03:43.590 --> 00:03:44.970
we'll go ahead and create one.

00:03:44.970 --> 00:03:45.830
No,

00:03:45.830 --> 00:03:49.690
that's tried to run the program and see if things will go well.

00:03:49.690 --> 00:03:54.040
Sure enough,

00:03:54.040 --> 00:03:55.880
After closing Decision Factory,

00:03:55.880 --> 00:03:58.350
our process is also done.

00:03:58.350 --> 00:04:02.750
I'm going to make this project available for you to download.

00:04:02.750 --> 00:04:05.250
So do give it a try.

00:04:05.250 --> 00:04:06.040
Other words.

00:04:06.040 --> 00:04:08.090
Just import the project and use mine.

00:04:08.090 --> 00:04:09.680
All right,

00:04:09.680 --> 00:04:10.450
see you soon.

