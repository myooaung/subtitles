WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.670
in this video,

00:00:01.670 --> 00:00:03.870
we're going to take a look at how we can manage.

00:00:03.870 --> 00:00:06.510
Many too many mapping using have been eight.

00:00:06.510 --> 00:00:08.490
So now what is many to many mapping?

00:00:08.490 --> 00:00:12.000
You can understand the same based on this diagram in here,

00:00:12.000 --> 00:00:16.280
so we can have multiple employees and rolling for a single course,

00:00:16.280 --> 00:00:20.650
and we can have multiple courses and rolled by a single employee.

00:00:20.650 --> 00:00:23.090
So that's many too many mapping.

00:00:23.090 --> 00:00:29.800
And the way we maintain this relationship is with another table that just combines the form

00:00:29.800 --> 00:00:31.250
case off both these tables.

00:00:31.250 --> 00:00:32.650
So in here,

00:00:32.650 --> 00:00:39.230
you can say that employees with I D 2001 has enrolled for these two courses with I D.

00:00:39.230 --> 00:00:44.360
1001 and 1002 which corresponds to Java and have been eight.

00:00:44.360 --> 00:00:45.690
And similarly,

00:00:45.690 --> 00:00:54.270
we have a couple of employees with desire identifiers t 03 and two or two and the boat and

00:00:54.270 --> 00:01:00.730
rolled for the same course 1004 which corresponds to pose great skill course so in or

00:01:00.730 --> 00:01:01.970
having it example.

00:01:01.970 --> 00:01:04.330
We can deal with this in couple off.

00:01:04.330 --> 00:01:10.450
Phase one is to introduce the many to many annotation in either off this persistent classes

00:01:10.450 --> 00:01:10.450
,

00:01:10.450 --> 00:01:17.310
so either off these classes would own the relationship are we can make it bi directional

00:01:17.310 --> 00:01:23.930
and specify our many too many annotation in both these classes so that we can create either

00:01:23.930 --> 00:01:26.580
of these objects to add an entry.

00:01:26.580 --> 00:01:33.670
So we can either create an employee object and fearing list of courses are we can create a

00:01:33.670 --> 00:01:38.400
course object and give that object list off employees who want to enroll for that course.

00:01:38.400 --> 00:01:41.150
So let's go to clips and take a look at how it's done.

00:01:41.150 --> 00:01:47.880
So here we have the employees class as well as the course class now inside the employee

00:01:47.880 --> 00:01:48.210
class,

00:01:48.210 --> 00:01:53.800
I have defined the collection off type course so that we can set list off courses while

00:01:53.800 --> 00:01:55.280
trying to add the employees.

00:01:55.280 --> 00:01:57.600
And on the other hand,

00:01:57.600 --> 00:01:58.810
in the course class,

00:01:58.810 --> 00:02:01.120
we can add list off employees,

00:02:01.120 --> 00:02:03.550
so that's many too many mapping.

00:02:03.550 --> 00:02:05.640
But you also need toe,

00:02:05.640 --> 00:02:06.170
of course,

00:02:06.170 --> 00:02:08.950
mentioned the annotation on board the ends.

00:02:08.950 --> 00:02:14.790
The target entity points to the target entity in case of employees.

00:02:14.790 --> 00:02:20.050
This points to the course class and wise versa in case off course class at this points to

00:02:20.050 --> 00:02:20.960
employ class,

00:02:20.960 --> 00:02:26.650
and you don't really have to define this because against having it can figure that out.

00:02:26.650 --> 00:02:29.870
Is dawn the type in here?

00:02:29.870 --> 00:02:37.380
And we know this option casket in type that will come into picture when we on this program

00:02:37.380 --> 00:02:37.380
.

00:02:37.380 --> 00:02:38.340
Now,

00:02:38.340 --> 00:02:41.600
here is something noticeable here.

00:02:41.600 --> 00:02:43.690
If you mention joint table,

00:02:43.690 --> 00:02:48.050
we can actually create the store table in here.

00:02:48.050 --> 00:02:51.150
This is what maintained the relationship.

00:02:51.150 --> 00:02:53.770
And along with that,

00:02:53.770 --> 00:02:58.890
we've also specified couple of columns in here that corresponds to the primary keys off.

00:02:58.890 --> 00:03:01.570
Both the tables are in the stable.

00:03:01.570 --> 00:03:03.550
There would be foreign keys,

00:03:03.550 --> 00:03:09.850
so you would specify a couple off joint column annotation as part off joined table

00:03:09.850 --> 00:03:10.590
annotation.

00:03:10.590 --> 00:03:13.090
Just as you see in here,

00:03:13.090 --> 00:03:17.200
you have to follow the following syntax with Kali braces and all.

00:03:17.200 --> 00:03:23.910
And you would provide the name of the column off the current table,

00:03:23.910 --> 00:03:25.670
which corresponds to employee I.

00:03:25.670 --> 00:03:26.150
D.

00:03:26.150 --> 00:03:30.820
And you also mentioned the in most joint columns.

00:03:30.820 --> 00:03:34.970
That means this would be the column of the target entity,

00:03:34.970 --> 00:03:39.050
which would be course I d and ah,

00:03:39.050 --> 00:03:42.740
So let's take a look at the description off in Most joined Coleman,

00:03:42.740 --> 00:03:44.150
and you'd understand better.

00:03:44.150 --> 00:03:49.280
So this is an optional parameter that we can set that spot off the sanitation.

00:03:49.280 --> 00:03:53.780
And that is basically the former Greek columns off the joint table,

00:03:53.780 --> 00:03:58.650
which reference the primary key off the entity that does not own the association.

00:03:58.650 --> 00:04:00.480
That means in this case,

00:04:00.480 --> 00:04:04.910
this association is owned by the employee class.

00:04:04.910 --> 00:04:10.050
When you're defining a column that refer to the primary key off another table,

00:04:10.050 --> 00:04:11.640
then you have to mention it,

00:04:11.640 --> 00:04:12.680
as in Was joined.

00:04:12.680 --> 00:04:15.870
Column out of it belongs to the same class,

00:04:15.870 --> 00:04:16.960
are the same table.

00:04:16.960 --> 00:04:21.550
Then you can just mention it with the joint columns as simple as that.

00:04:21.550 --> 00:04:26.700
And you pretty much have the same annotation defined inside the course class as well.

00:04:26.700 --> 00:04:31.850
But this time the employee idea is going to be in Western columns,

00:04:31.850 --> 00:04:36.250
and the joint column would correspond to the core society.

00:04:36.250 --> 00:04:38.250
Well,

00:04:38.250 --> 00:04:41.360
I guess you don't really have to mention these annotations in here.

00:04:41.360 --> 00:04:47.410
If you don't specify these annotations than have a net will actually do the job for you.

00:04:47.410 --> 00:04:49.320
But if you define,

00:04:49.320 --> 00:04:53.180
you'd have the flexibility to define the column,

00:04:53.180 --> 00:04:56.800
so that's pretty much it.

00:04:56.800 --> 00:04:58.480
And if you go to the main class,

00:04:58.480 --> 00:05:00.250
our main logic,

00:05:00.250 --> 00:05:03.240
I have a couple off methods at it,

00:05:03.240 --> 00:05:09.170
one is to perform the insert operation by creating an employee object and the other is to

00:05:09.170 --> 00:05:09.920
performance.

00:05:09.920 --> 00:05:12.350
That operation is in the course object,

00:05:12.350 --> 00:05:15.240
and just by taking a look at this code,

00:05:15.240 --> 00:05:18.000
it can easily understand what's happening in here.

00:05:18.000 --> 00:05:23.450
I really don't have to walk it through this pretty easy to understand.

00:05:23.450 --> 00:05:27.240
And same thing goes for religion update.

00:05:27.240 --> 00:05:31.290
I would like your experiment with other operations like Delete Update,

00:05:31.290 --> 00:05:32.650
etcetera.

00:05:32.650 --> 00:05:33.980
Give it a try.

00:05:33.980 --> 00:05:35.590
It's pretty easy to accomplish,

00:05:35.590 --> 00:05:39.750
and it's pretty much similar to what we're seeing in our previous examples.

00:05:39.750 --> 00:05:42.450
So that's about it.

00:05:42.450 --> 00:05:45.070
We'll see you soon.

