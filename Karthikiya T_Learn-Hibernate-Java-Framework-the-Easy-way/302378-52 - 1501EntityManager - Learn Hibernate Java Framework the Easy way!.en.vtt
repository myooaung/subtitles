WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.490
so far in our examples,

00:00:02.490 --> 00:00:05.460
we have talked the bottom of the hibernate specific terms,

00:00:05.460 --> 00:00:06.350
like session,

00:00:06.350 --> 00:00:08.270
factory session,

00:00:08.270 --> 00:00:10.660
havin a dot C of Jadot XML,

00:00:10.660 --> 00:00:11.720
etcetera.

00:00:11.720 --> 00:00:13.720
Now these a ro specific tohave,

00:00:13.720 --> 00:00:16.960
anade but are not part off GPS specification.

00:00:16.960 --> 00:00:21.430
Let's that letter point off time you have decided to switch to a different or,

00:00:21.430 --> 00:00:21.610
um,

00:00:21.610 --> 00:00:22.040
tool.

00:00:22.040 --> 00:00:29.150
Then it becomes hard to make changes in your code because you have used some have been its

00:00:29.150 --> 00:00:30.990
specific classes and interfaces.

00:00:30.990 --> 00:00:36.240
So the better approach is always to use GPS specifications so that tomorrow,

00:00:36.240 --> 00:00:37.450
at little one off time,

00:00:37.450 --> 00:00:39.800
if you want to switch to another or UM tool,

00:00:39.800 --> 00:00:42.600
which also implements GPS specifications,

00:00:42.600 --> 00:00:45.000
then your job would be a lot easier.

00:00:45.000 --> 00:00:50.010
But the reason why I had used these have been in terms is to make you understand some of

00:00:50.010 --> 00:00:51.750
the habit specific concepts,

00:00:51.750 --> 00:00:54.370
like how the session factory works,

00:00:54.370 --> 00:01:00.620
how the session work's etcetera but ideally told us a good idea to use GPS specifications

00:01:00.620 --> 00:01:01.310
everywhere.

00:01:01.310 --> 00:01:05.410
So whatever we had talked about in terms off hibernate,

00:01:05.410 --> 00:01:09.450
we pretty much have the same stuff in JPs specifications as well.

00:01:09.450 --> 00:01:13.810
By the end of the day have been eight implements JPs specifications,

00:01:13.810 --> 00:01:15.450
and in addition to that,

00:01:15.450 --> 00:01:18.310
it provides some more additional functionalities.

00:01:18.310 --> 00:01:21.450
If you want to compromise on those additional functionalities,

00:01:21.450 --> 00:01:24.200
then you can use these JPs specifications.

00:01:24.200 --> 00:01:26.720
So instead of session factory,

00:01:26.720 --> 00:01:30.210
you would just simply replace it with Entity Manager factory,

00:01:30.210 --> 00:01:31.550
which belongs to J.

00:01:31.550 --> 00:01:31.690
P.

00:01:31.690 --> 00:01:32.690
A specification.

00:01:32.690 --> 00:01:33.520
Similarly,

00:01:33.520 --> 00:01:37.300
session can be replaced with the entity manager Arhab,

00:01:37.300 --> 00:01:37.520
innit?

00:01:37.520 --> 00:01:41.600
Convict file would be replaced with persistence or XML file,

00:01:41.600 --> 00:01:44.480
and it would have the same convict stuff.

00:01:44.480 --> 00:01:46.300
What goes inside the Cabinet?

00:01:46.300 --> 00:01:46.810
Confident,

00:01:46.810 --> 00:01:47.610
similar as well.

00:01:47.610 --> 00:01:50.320
And instead of get mattered,

00:01:50.320 --> 00:01:52.050
you would use find,

00:01:52.050 --> 00:01:53.240
insert off of it.

00:01:53.240 --> 00:01:58.310
You would find it match and some of the methods will actually remain common like refresh,

00:01:58.310 --> 00:01:59.080
closest,

00:01:59.080 --> 00:02:00.550
clear etcetera.

00:02:00.550 --> 00:02:06.940
So what we have here is a very simple example that uses only JPs passive occassions.

00:02:06.940 --> 00:02:11.030
Nowhere in here do we see any habit.

00:02:11.030 --> 00:02:13.050
Specific classes are interfaces.

00:02:13.050 --> 00:02:16.430
So instead of session factory,

00:02:16.430 --> 00:02:18.810
we're now using Entity manager factory,

00:02:18.810 --> 00:02:20.210
an insert off session.

00:02:20.210 --> 00:02:26.260
We're not using entity manager and just off the court is pretty self explanatory.

00:02:26.260 --> 00:02:27.610
And of course,

00:02:27.610 --> 00:02:31.480
we're not really following good practices like wrapping the court on try catch,

00:02:31.480 --> 00:02:31.710
block,

00:02:31.710 --> 00:02:32.450
etcetera.

00:02:32.450 --> 00:02:34.740
I just want to keep things simple.

00:02:34.740 --> 00:02:39.900
The idea is just to make you understand how we can use GPS specifications.

00:02:39.900 --> 00:02:40.230
Instead,

00:02:40.230 --> 00:02:42.190
Off have been its Pacific stuff.

00:02:42.190 --> 00:02:44.260
And internally,

00:02:44.260 --> 00:02:50.850
this is actually going to use have been it specific stuff like Session Factory and to do

00:02:50.850 --> 00:02:55.050
manager is actually going to use have a net session to do its job.

00:02:55.050 --> 00:02:59.370
And also note that insert off our binary XML file.

00:02:59.370 --> 00:03:01.950
We now have persistent or xml file,

00:03:01.950 --> 00:03:04.710
and it pretty much has the same stuff.

00:03:04.710 --> 00:03:06.380
What goes inside a habit?

00:03:06.380 --> 00:03:07.220
Xml file.

00:03:07.220 --> 00:03:12.810
So we have all these properties to connect to the database Desirable Connection para meters

00:03:12.810 --> 00:03:12.810
.

00:03:12.810 --> 00:03:20.380
But do take a note that now the name changes and uses some JPs stuff rather than have been

00:03:20.380 --> 00:03:21.310
eight packages.

00:03:21.310 --> 00:03:26.860
But by using persistent or XML file doesn't mean that you can't use any have been it

00:03:26.860 --> 00:03:28.260
specific configurations.

00:03:28.260 --> 00:03:34.300
An example off which can be seen in here We can still use have been it library and said

00:03:34.300 --> 00:03:35.380
this configuration,

00:03:35.380 --> 00:03:37.750
just as you see in here.

00:03:37.750 --> 00:03:41.050
Also unlike having a dot XML file,

00:03:41.050 --> 00:03:43.350
which goes inside the Resources folder,

00:03:43.350 --> 00:03:45.990
the persistence dot xml file.

00:03:45.990 --> 00:03:53.870
But go inside meta hyphen I enough directory under the Resources Directory if you're having

00:03:53.870 --> 00:03:55.060
a maven project,

00:03:55.060 --> 00:03:58.850
so that's pretty much it.

00:03:58.850 --> 00:04:04.050
And everything is going to remain same in our entity class.

00:04:04.050 --> 00:04:06.800
We were already following GPS.

00:04:06.800 --> 00:04:09.950
Pontifications would induce any have been X specific stuff,

00:04:09.950 --> 00:04:13.350
and that's about it.

00:04:13.350 --> 00:04:18.490
Just take a look at the code and try to understand we're trying to begin the transaction

00:04:18.490 --> 00:04:20.630
doing something in here.

00:04:20.630 --> 00:04:21.520
In this case,

00:04:21.520 --> 00:04:25.590
we're trying to persist an object and then finally committing the transaction.

00:04:25.590 --> 00:04:27.660
We're trying to read the employees,

00:04:27.660 --> 00:04:29.160
and finally,

00:04:29.160 --> 00:04:32.530
we're also trying toe removed the employees from the database.

00:04:32.530 --> 00:04:34.350
So if we run this program,

00:04:34.350 --> 00:04:37.810
all these actions would take place in sequence.

00:04:37.810 --> 00:04:43.390
And here is the result.

00:04:43.390 --> 00:04:50.550
We inserted an employee reading an employee and finally would delete it.

00:04:50.550 --> 00:04:54.350
That regard It's as simple as that.

00:04:54.350 --> 00:04:56.650
All right,

00:04:56.650 --> 00:04:57.370
see,

00:04:57.370 --> 00:04:57.850
assume

