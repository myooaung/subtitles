WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.440
hold it.

00:00:01.440 --> 00:00:04.690
Let us take a look at an example off post little cachet.

00:00:04.690 --> 00:00:09.520
So what I'm trying to do here is I created the employee object,

00:00:09.520 --> 00:00:11.180
created decision,

00:00:11.180 --> 00:00:17.100
begin the transaction and then I'm just trying to say that employ object into the database

00:00:17.100 --> 00:00:17.100
.

00:00:17.100 --> 00:00:23.430
So what this is going to do is this will make a copy off this employee object or rather,

00:00:23.430 --> 00:00:28.910
its data into the second level cache that responds to this particular session.

00:00:28.910 --> 00:00:30.640
And then it will persist.

00:00:30.640 --> 00:00:33.950
Or have been it'll purses the data into the database.

00:00:33.950 --> 00:00:38.460
So after I commit the transaction and before I closed on the session,

00:00:38.460 --> 00:00:44.630
I'm trying to check to see how many fetches have been done from the database.

00:00:44.630 --> 00:00:45.680
In this case,

00:00:45.680 --> 00:00:48.190
we're not trying to retrieve the data from the database,

00:00:48.190 --> 00:00:51.870
So this is going to show us the count zero.

00:00:51.870 --> 00:00:53.080
And by the way,

00:00:53.080 --> 00:00:54.950
in order for this method to work,

00:00:54.950 --> 00:01:00.310
you have to introduced this particular configuration in your conflict file.

00:01:00.310 --> 00:01:04.410
And once you do so have been,

00:01:04.410 --> 00:01:08.590
it will be able to display some statistics that will be useful in our example.

00:01:08.590 --> 00:01:09.530
So now,

00:01:09.530 --> 00:01:14.550
if around this program I'm expecting this particular instruction to display zero.

00:01:14.550 --> 00:01:20.450
And sure enough,

00:01:20.450 --> 00:01:23.700
since there is no data best fetch operation,

00:01:23.700 --> 00:01:27.050
I'll read operations to count is zero.

00:01:27.050 --> 00:01:32.980
And if you notice we don't have any select query in here pretty obvious right now,

00:01:32.980 --> 00:01:40.010
let me try to do something different The right after I commit the transaction and before I

00:01:40.010 --> 00:01:41.170
close on the session,

00:01:41.170 --> 00:01:44.550
I'm trying to retrieve the same employees object,

00:01:44.550 --> 00:01:46.870
using the identify air,

00:01:46.870 --> 00:01:49.360
and then I'm trying to display his name.

00:01:49.360 --> 00:01:55.000
Now this step is necessary because taken note that we're trying to load the object which

00:01:55.000 --> 00:01:56.800
will not Lord the actual object,

00:01:56.800 --> 00:01:59.740
but a representation off it are a proxy object.

00:01:59.740 --> 00:02:01.330
We had already talked about it.

00:02:01.330 --> 00:02:06.160
So you need to do something with that object in order to first the employees.

00:02:06.160 --> 00:02:07.260
So now,

00:02:07.260 --> 00:02:08.350
in this case,

00:02:08.350 --> 00:02:12.590
happen it will not trust the employees from the database,

00:02:12.590 --> 00:02:15.450
but rather from the festival cash off the session.

00:02:15.450 --> 00:02:18.470
And that's what we've talked in our previous video.

00:02:18.470 --> 00:02:20.100
So if I run this program,

00:02:20.100 --> 00:02:22.750
we're going to see the employing name.

00:02:22.750 --> 00:02:24.250
But still,

00:02:24.250 --> 00:02:26.850
the fetch count is going to be zero.

00:02:26.850 --> 00:02:39.650
And this explains now from another method.

00:02:39.650 --> 00:02:44.750
Have you tried access the same object from a different sessional together.

00:02:44.750 --> 00:02:47.240
So I go to test to method.

00:02:47.240 --> 00:02:51.060
And in here I'm just trying to retrieve that object are rather,

00:02:51.060 --> 00:02:52.050
Lord that object.

00:02:52.050 --> 00:02:57.230
So this time in the scarce since this is a new session altogether,

00:02:57.230 --> 00:03:00.610
there's going to be new cache memory associated with the session.

00:03:00.610 --> 00:03:06.690
And the first thing that you're doing here is to load that employees object now happen.

00:03:06.690 --> 00:03:10.240
It will check to see if that object is present in its cachet,

00:03:10.240 --> 00:03:13.250
and we know that it is not present.

00:03:13.250 --> 00:03:17.850
So happen it will not fetch the details from the database,

00:03:17.850 --> 00:03:22.100
and so we should be able to see the count as one.

00:03:22.100 --> 00:03:23.650
So let's on the program.

00:03:23.650 --> 00:03:30.440
And I want to keep this method actor as well because we want that entry to be added into a

00:03:30.440 --> 00:03:33.150
database because in our conflict file,

00:03:33.150 --> 00:03:38.350
I've said this to create that there's going to be a brand new scheme every time.

00:03:38.350 --> 00:03:42.900
So we want to populate some data before we try to read the same.

00:03:42.900 --> 00:03:45.250
That's on the program and see how things will go.

00:03:45.250 --> 00:03:47.970
So this is going to be one,

00:03:47.970 --> 00:03:50.340
and sure enough,

00:03:50.340 --> 00:03:52.250
there is one fetch operation,

00:03:52.250 --> 00:03:53.390
credible and good.

00:03:53.390 --> 00:03:58.450
Let me try to repeat the statement in here multiple times.

00:03:58.450 --> 00:04:01.150
Not this time.

00:04:01.150 --> 00:04:04.870
Let me give a different name.

00:04:04.870 --> 00:04:11.750
These two instructions will not result in fetching the employees from the database,

00:04:11.750 --> 00:04:15.160
because after we executed this instruction,

00:04:15.160 --> 00:04:16.810
we have our employees.

00:04:16.810 --> 00:04:20.750
Details present in the festival cash off the session.

00:04:20.750 --> 00:04:23.590
So still,

00:04:23.590 --> 00:04:26.310
the result of the statement is going to be one.

00:04:26.310 --> 00:04:29.080
So no matter how many times you read that object,

00:04:29.080 --> 00:04:34.580
there's just going to be one single data best fetch operation.

00:04:34.580 --> 00:04:36.150
Let's run the program.

00:04:36.150 --> 00:04:41.620
And sure enough,

00:04:41.620 --> 00:04:42.430
it's still one,

00:04:42.430 --> 00:04:46.150
but were able to retrieve the object three times,

00:04:46.150 --> 00:04:51.890
So this will certainly contribute and improving the performance.

00:04:51.890 --> 00:04:54.050
Now let's try to do something different.

00:04:54.050 --> 00:04:57.750
So before I try to fetch the same object,

00:04:57.750 --> 00:05:02.060
let me try to evict this object so I'll do session.

00:05:02.060 --> 00:05:03.990
Not effect now,

00:05:03.990 --> 00:05:04.950
its employees.

00:05:04.950 --> 00:05:11.190
So what the statement does is it will take all this employee from the cashing,

00:05:11.190 --> 00:05:13.020
and that's the job off effect.

00:05:13.020 --> 00:05:15.670
It is going to remove that object from the cachet.

00:05:15.670 --> 00:05:18.170
So let me try to run the program.

00:05:18.170 --> 00:05:19.380
And this time,

00:05:19.380 --> 00:05:20.950
as you might have guessed,

00:05:20.950 --> 00:05:24.020
this will result in one patch operation.

00:05:24.020 --> 00:05:27.250
And since we've removed the object from the cash as well.

00:05:27.250 --> 00:05:34.360
This instruction would demand another database Request two fresh the employee details.

00:05:34.360 --> 00:05:37.050
So this time the count is going to be too.

00:05:37.050 --> 00:05:43.570
And sure enough,

00:05:43.570 --> 00:05:46.350
it is to a simple as that.

00:05:46.350 --> 00:05:49.070
And we have a couple off cell queries populated.

00:05:49.070 --> 00:05:55.150
So second level cache is pretty nice feature and you don't have to do anything with it.

00:05:55.150 --> 00:05:58.300
It will all be taken care by have been it.

00:05:58.300 --> 00:05:59.050
And in fact,

00:05:59.050 --> 00:06:00.700
you can't even disable it.

00:06:00.700 --> 00:06:04.370
It is enabled by default and you can't change it.

00:06:04.370 --> 00:06:06.420
All right,

00:06:06.420 --> 00:06:08.620
we'll continue from next video hold.

00:06:08.620 --> 00:06:10.060
It will continue from next video.

00:06:10.060 --> 00:06:10.850
See you soon.

