WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.150
in this video,

00:00:01.150 --> 00:00:04.290
we're going to take a look at how we can deal with many to one.

00:00:04.290 --> 00:00:07.250
Mapping isn't have been eight now.

00:00:07.250 --> 00:00:10.050
This is not a very popular data business and approach.

00:00:10.050 --> 00:00:15.880
Most database designers would rather prefer to use one too many mapping over many to one

00:00:15.880 --> 00:00:16.420
mapping.

00:00:16.420 --> 00:00:17.420
But just in case,

00:00:17.420 --> 00:00:20.440
if you're curious on how happen it deals with it,

00:00:20.440 --> 00:00:22.170
this really explains the same.

00:00:22.170 --> 00:00:24.510
So as you can see,

00:00:24.510 --> 00:00:29.250
the diagram is going to remain pretty much the same as with one too many mapping.

00:00:29.250 --> 00:00:35.230
But in case of one too many mapping we have defined are mapping or our relation with the

00:00:35.230 --> 00:00:39.690
employee table inside the boss class with the annotation one too many.

00:00:39.690 --> 00:00:46.800
But this time we're going to define our relation with the boss table inside the employee

00:00:46.800 --> 00:00:47.530
class.

00:00:47.530 --> 00:00:51.030
And as your guests were going to use the annotation,

00:00:51.030 --> 00:00:56.590
many to one so many employees can correspond to a single boss,

00:00:56.590 --> 00:00:59.650
so let's see how it's done in the code.

00:00:59.650 --> 00:01:08.000
So here we have the boss class and it does not have any fancy annotations.

00:01:08.000 --> 00:01:10.720
We used to have one too many mapping in here,

00:01:10.720 --> 00:01:15.400
but now we got rid off it from here and for many toe one mapping.

00:01:15.400 --> 00:01:18.680
We have to define our mapping inside the child class,

00:01:18.680 --> 00:01:20.280
which in this case is employees.

00:01:20.280 --> 00:01:21.850
And here we have it.

00:01:21.850 --> 00:01:24.220
So here we have the sanitation,

00:01:24.220 --> 00:01:25.080
many to one,

00:01:25.080 --> 00:01:28.640
and its target entity is going to be the boss.

00:01:28.640 --> 00:01:29.970
Class happens,

00:01:29.970 --> 00:01:34.550
were explaining have been made that descended the employees going to have many to one

00:01:34.550 --> 00:01:38.080
relation with the entity boss.

00:01:38.080 --> 00:01:38.540
Well,

00:01:38.540 --> 00:01:40.260
you don't really have to define this,

00:01:40.260 --> 00:01:41.220
even if you don't,

00:01:41.220 --> 00:01:42.910
that's fine as well,

00:01:42.910 --> 00:01:48.920
because having it is smart enough to expect that based on the data type in here and then we

00:01:48.920 --> 00:01:50.850
know what cascading is.

00:01:50.850 --> 00:01:57.740
We have this joint column and it does the same job as with our previous examples.

00:01:57.740 --> 00:01:59.000
Nothing really different.

00:01:59.000 --> 00:02:03.410
But this time we're going to create in stands off employees.

00:02:03.410 --> 00:02:04.230
Well,

00:02:04.230 --> 00:02:08.390
we're going to create an instance off boss first and then we're going to feed that object

00:02:08.390 --> 00:02:15.570
to employ object and for the very reason we have this constructor about a meter that takes

00:02:15.570 --> 00:02:23.150
in the instance off boss class and rest of the code is pretty easy to understand.

00:02:23.150 --> 00:02:29.350
We got get us interests and until string method onboard these classes just so that we can

00:02:29.350 --> 00:02:32.050
display details in some meaningful way.

00:02:32.050 --> 00:02:35.150
So here is our insert logic.

00:02:35.150 --> 00:02:36.810
And as you would expect,

00:02:36.810 --> 00:02:38.550
you'd create multiple employees.

00:02:38.550 --> 00:02:45.890
And before that you have to create an instance off the boss class with required values.

00:02:45.890 --> 00:02:49.280
And then you're going to send this object to the employer,

00:02:49.280 --> 00:02:51.550
object to its constructor,

00:02:51.550 --> 00:03:00.350
and finally we went to begin the transaction and save these two employees into the database

00:03:00.350 --> 00:03:00.350
.

00:03:00.350 --> 00:03:02.230
So that's how it's done.

00:03:02.230 --> 00:03:03.510
Very straightforward.

00:03:03.510 --> 00:03:09.570
And since we had said the cascading Type two all having it will not only save the employer

00:03:09.570 --> 00:03:10.180
object,

00:03:10.180 --> 00:03:16.950
but it's also going to save the boss object before persisting the employee object.

00:03:16.950 --> 00:03:22.850
And let's take a look at how we can extract data from the database.

00:03:22.850 --> 00:03:25.440
And here's how we would do it.

00:03:25.440 --> 00:03:27.400
And it's pretty straightforward.

00:03:27.400 --> 00:03:32.140
So we're trying to display the employees by fetching it,

00:03:32.140 --> 00:03:33.890
using the identify air.

00:03:33.890 --> 00:03:37.200
So let's see how things will go.

00:03:37.200 --> 00:03:39.050
We're going to talk about delete in a while.

00:03:39.050 --> 00:03:41.400
It's on the program,

00:03:41.400 --> 00:03:48.560
incredible and good.

00:03:48.560 --> 00:03:50.510
Let's see what's happening in the database.

00:03:50.510 --> 00:03:56.870
So I've already deleted all the existing tables before I ran this program and if I don't

00:03:56.870 --> 00:03:57.200
slash.

00:03:57.200 --> 00:03:57.690
Detain,

00:03:57.690 --> 00:03:57.940
pause,

00:03:57.940 --> 00:03:58.550
grease.

00:03:58.550 --> 00:04:00.350
We have list off tables,

00:04:00.350 --> 00:04:06.390
so select star from boss stable.

00:04:06.390 --> 00:04:07.630
So we have,

00:04:07.630 --> 00:04:08.750
our boss added.

00:04:08.750 --> 00:04:14.890
And so let's start from employee table.

00:04:14.890 --> 00:04:16.250
And sure enough,

00:04:16.250 --> 00:04:24.540
these two employees would correspond to boss with Heidi one s and Blouse that now coming to

00:04:24.540 --> 00:04:25.870
delete operation.

00:04:25.870 --> 00:04:31.580
It's little tricky because it's not possible that we can get the employees details and then

00:04:31.580 --> 00:04:36.650
we can delete when we have the cascading typeset to all.

00:04:36.650 --> 00:04:42.910
That's because it's not possible that we delete an employee and expect Cabinet to also

00:04:42.910 --> 00:04:49.290
delete its corresponding bars because that boss object may have some relation with other

00:04:49.290 --> 00:04:50.770
employees in the table.

00:04:50.770 --> 00:04:51.430
Well,

00:04:51.430 --> 00:04:52.580
when I say relationship,

00:04:52.580 --> 00:04:54.020
it's database relational,

00:04:54.020 --> 00:04:55.750
a real world relation.

00:04:55.750 --> 00:04:58.830
So for that very reason happen,

00:04:58.830 --> 00:05:01.780
it is not going to perform the delete operation.

00:05:01.780 --> 00:05:03.160
At the same time,

00:05:03.160 --> 00:05:06.370
you can't fetch the boss object and try to delete it,

00:05:06.370 --> 00:05:11.700
because there might be some employees who have foreign key relationship with that boss.

00:05:11.700 --> 00:05:14.560
So what is the solution?

00:05:14.560 --> 00:05:15.080
Well,

00:05:15.080 --> 00:05:17.280
there are multiple ways you can deal with this.

00:05:17.280 --> 00:05:21.910
One simple approach is to get it off the cascading type,

00:05:21.910 --> 00:05:24.250
which is in here.

00:05:24.250 --> 00:05:26.000
Just get it off this,

00:05:26.000 --> 00:05:28.010
and then you take it off manually,

00:05:28.010 --> 00:05:30.540
deleting each and every entity.

00:05:30.540 --> 00:05:33.120
So you would do it all the child objects first,

00:05:33.120 --> 00:05:37.390
which will be list off employees that are dependent on a particular bars.

00:05:37.390 --> 00:05:42.660
And then you have complete freedom in the world to delete the boss object so you can go

00:05:42.660 --> 00:05:43.660
with that approach.

00:05:43.660 --> 00:05:44.600
Or alternatively,

00:05:44.600 --> 00:05:47.330
you can also use one too many approach.

00:05:47.330 --> 00:05:54.360
Just as we've seen in our previous video are alternately can also go with bi directional

00:05:54.360 --> 00:05:55.130
mapping,

00:05:55.130 --> 00:05:57.440
which will take a look at incoming video.

00:05:57.440 --> 00:05:59.950
So if I try to delete,

00:05:59.950 --> 00:06:02.470
we're going to see an exception.

00:06:02.470 --> 00:06:05.550
So I've just committed this out for the time being.

00:06:05.550 --> 00:06:06.510
Oh,

00:06:06.510 --> 00:06:11.850
let me just get rid off this because I'm going to save this project for you to download.

00:06:11.850 --> 00:06:15.150
And I don't want you to mess around with this method,

00:06:15.150 --> 00:06:19.650
so let me just get it off this.

00:06:19.650 --> 00:06:22.700
I'm going to say this project for you to download.

00:06:22.700 --> 00:06:24.230
All right.

00:06:24.230 --> 00:06:25.750
See you in my next video.

