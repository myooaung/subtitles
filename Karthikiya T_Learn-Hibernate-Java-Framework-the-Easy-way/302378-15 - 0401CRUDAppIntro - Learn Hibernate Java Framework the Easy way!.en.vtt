WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.780
we have some solid understanding on some of the basics off hibernate.

00:00:03.780 --> 00:00:09.150
Now it's time to take a look at the very simple crowd application where we perform the

00:00:09.150 --> 00:00:11.860
basic database operations like create,

00:00:11.860 --> 00:00:12.510
read,

00:00:12.510 --> 00:00:17.000
update and delete in a typical real world Web application.

00:00:17.000 --> 00:00:18.450
This is how it works.

00:00:18.450 --> 00:00:19.750
You'll have some front,

00:00:19.750 --> 00:00:24.150
and technologies like HTML or GSP harnessed the end usable interact,

00:00:24.150 --> 00:00:29.520
and the records will get forwarded to a controller logic and something like so that will

00:00:29.520 --> 00:00:33.400
take the request and forward the request to the next layer,

00:00:33.400 --> 00:00:37.510
which will be services layer where the actual business logic will take place.

00:00:37.510 --> 00:00:40.000
So here you may use Enterprise Java beans,

00:00:40.000 --> 00:00:40.950
etcetera.

00:00:40.950 --> 00:00:46.390
But this business ladies actually going to instead initiate so called and data access

00:00:46.390 --> 00:00:51.980
object so data access object will have set off behaviors or methods,

00:00:51.980 --> 00:00:56.600
and each method will have a certain logic to interact with the database.

00:00:56.600 --> 00:00:59.130
In our simple crowd application,

00:00:59.130 --> 00:01:02.230
we're not really concerned about all these layers on top,

00:01:02.230 --> 00:01:07.650
but instead we're just simply going to replace the business logic with the main method,

00:01:07.650 --> 00:01:10.790
which will decide in a separate class.

00:01:10.790 --> 00:01:17.000
And this class will interact with the Dow class where will have all the list off methods

00:01:17.000 --> 00:01:20.650
that performed the crowd operations to talk to the database.

00:01:20.650 --> 00:01:23.730
Now I can walk you through how this is achieved,

00:01:23.730 --> 00:01:27.750
but I want you to give it a try before you move on with my next video.

00:01:27.750 --> 00:01:31.220
But let me just give you a glimpse off what we're trying to dio.

00:01:31.220 --> 00:01:32.650
Let's go to Eclipse.

00:01:32.650 --> 00:01:34.440
Okay,

00:01:34.440 --> 00:01:38.420
here is our doll class and here have introduced a few month.

00:01:38.420 --> 00:01:42.550
It's the first of which is to load Decision Factory,

00:01:42.550 --> 00:01:47.050
and then we have a mattered to create list off employees.

00:01:47.050 --> 00:01:50.500
I'm just simply going to use a for loop to populate the data,

00:01:50.500 --> 00:01:52.340
nor table isn't happening,

00:01:52.340 --> 00:01:52.950
of course.

00:01:52.950 --> 00:01:55.650
And then we have this read method which,

00:01:55.650 --> 00:01:56.450
when called,

00:01:56.450 --> 00:01:59.480
would written a list of all the employees residing in the table.

00:01:59.480 --> 00:02:01.550
And we have the update method,

00:02:01.550 --> 00:02:04.050
and we're going to pass the identify air,

00:02:04.050 --> 00:02:09.560
has a perimeter and based on the idea that we sent its respect to entry,

00:02:09.560 --> 00:02:11.370
will get updated in the database.

00:02:11.370 --> 00:02:12.000
Similarly,

00:02:12.000 --> 00:02:18.880
we have delivery card and we send an identifier as an argument and based on the identifier

00:02:18.880 --> 00:02:18.880
,

00:02:18.880 --> 00:02:23.620
we would delete an employee from the table and finally we got a deal.

00:02:23.620 --> 00:02:30.590
It all method which one called will deal it all the entries in the table and we have close

00:02:30.590 --> 00:02:33.360
session factory to close on Decision Factory.

00:02:33.360 --> 00:02:34.550
Pretty straightforward.

00:02:34.550 --> 00:02:38.860
And it's corresponding main method from where we trigger everything.

00:02:38.860 --> 00:02:44.830
And we call all those methods in our employees or Java,

00:02:44.830 --> 00:02:46.450
which is a persistent class.

00:02:46.450 --> 00:02:50.850
I have now made this I d part off this constructor.

00:02:50.850 --> 00:02:57.580
That's because in real world applications the idea will be sent automatically by the view

00:02:57.580 --> 00:02:58.150
layer.

00:02:58.150 --> 00:03:02.510
But since our application is not a full fledged NBC application,

00:03:02.510 --> 00:03:07.210
we have to explicitly provide the identifier from our main class.

00:03:07.210 --> 00:03:11.000
And that's why I had to have this in here.

00:03:11.000 --> 00:03:13.450
You'll see why when I the most with the example.

00:03:13.450 --> 00:03:18.690
Also I have over didn't diss mattered to string so that when you're trying to display

00:03:18.690 --> 00:03:20.050
objects off this class,

00:03:20.050 --> 00:03:26.150
you would see a meaningful string rather than some random set off characters and integers

00:03:26.150 --> 00:03:28.350
and in our convict file,

00:03:28.350 --> 00:03:33.460
have disabled these two properties because now we're performing quite a bit off

00:03:33.460 --> 00:03:34.450
transactions,

00:03:34.450 --> 00:03:38.030
and this is going to display all their skill statements.

00:03:38.030 --> 00:03:42.090
I don't want that to happen that will value the actual mess Agers.

00:03:42.090 --> 00:03:44.140
So I have disabled is for the time being,

00:03:44.140 --> 00:03:46.950
and I have said this property to update.

00:03:46.950 --> 00:03:47.880
Actually,

00:03:47.880 --> 00:03:51.790
I have intentionally left one issue with our program,

00:03:51.790 --> 00:03:53.150
and when I talk about it,

00:03:53.150 --> 00:03:58.550
I'll also talk about this particular field and in a pond or XML.

00:03:58.550 --> 00:04:02.050
I have actually added this library look for J,

00:04:02.050 --> 00:04:04.020
which is a framework now.

00:04:04.020 --> 00:04:07.450
This is nothing to get scared if you're not ever off lock for J.

00:04:07.450 --> 00:04:12.450
We're just using this just to disable some of the unnecessary messages that gets displayed

00:04:12.450 --> 00:04:13.550
on the console.

00:04:13.550 --> 00:04:20.010
We're still using the good old system dot r dot parental and everywhere we're not using the

00:04:20.010 --> 00:04:24.050
framework have used this just to add does that particular problem?

00:04:24.050 --> 00:04:26.140
Because when you get to see the output,

00:04:26.140 --> 00:04:28.750
we don't want to see all the have been it logs in here.

00:04:28.750 --> 00:04:31.290
We want to see whatever we're trying to display.

00:04:31.290 --> 00:04:34.750
So even if you don't have this,

00:04:34.750 --> 00:04:37.790
that's fine is just for our convenience.

00:04:37.790 --> 00:04:41.940
I've done that and we have this file lock for J,

00:04:41.940 --> 00:04:47.530
which corresponds to this framework not for Gerard Properties that decides under the

00:04:47.530 --> 00:04:48.750
Resources Directory,

00:04:48.750 --> 00:04:51.350
and I have said this to off.

00:04:51.350 --> 00:04:56.150
This is what will disable all the logging to get printed on the standard output.

00:04:56.150 --> 00:04:58.670
So that's about it.

00:04:58.670 --> 00:05:01.270
Try to write the program on your own.

00:05:01.270 --> 00:05:04.190
It doesn't necessarily have to be the perfect code,

00:05:04.190 --> 00:05:05.820
but just give it a try.

00:05:05.820 --> 00:05:09.950
I'm going to walk you through all these in my next video anyway,

00:05:09.950 --> 00:05:11.300
so see you soon.

