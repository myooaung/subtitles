WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.650
we pretty much talked about all the components involved in our sample had been it

00:00:04.650 --> 00:00:05.460
application.

00:00:05.460 --> 00:00:09.870
But one thing I feel that we left behind is to talk about this property,

00:00:09.870 --> 00:00:12.560
which is part of the convict file here.

00:00:12.560 --> 00:00:15.870
We can actually provide multiple options so far,

00:00:15.870 --> 00:00:21.620
Reviews this option update meaning that we're asking Have Nick to check to see if there is

00:00:21.620 --> 00:00:26.120
any difference between the database schema and the scheme of that happen it is expecting,

00:00:26.120 --> 00:00:28.750
based on the per system class.

00:00:28.750 --> 00:00:34.830
Then we're asking have been made to make an update in the database to avoid any discrepancy

00:00:34.830 --> 00:00:37.730
is but we have multiple other options in here.

00:00:37.730 --> 00:00:42.350
We can also use create when he uses option create.

00:00:42.350 --> 00:00:48.670
This will essentially drop or destroy all the data in the database and is going to recreate

00:00:48.670 --> 00:00:52.090
everything from scratch when we initiate the application.

00:00:52.090 --> 00:00:55.090
So let me just demonstrate what this means.

00:00:55.090 --> 00:00:56.620
So in my database,

00:00:56.620 --> 00:00:57.850
I don't have anything at all,

00:00:57.850 --> 00:00:59.800
and I'm going to run this.

00:00:59.800 --> 00:01:05.270
So,

00:01:05.270 --> 00:01:06.080
as expected,

00:01:06.080 --> 00:01:10.790
it has created the table as well as it has inserted an entry.

00:01:10.790 --> 00:01:15.770
So now you should be able to see that limit on this program again.

00:01:15.770 --> 00:01:18.340
mid term net existing one,

00:01:18.340 --> 00:01:21.350
and then that's on it.

00:01:21.350 --> 00:01:26.490
So you see that happen.

00:01:26.490 --> 00:01:30.200
It has actually re executed all these instructions.

00:01:30.200 --> 00:01:32.590
That's because prior to these,

00:01:32.590 --> 00:01:35.990
it has actually dropped the table employees.

00:01:35.990 --> 00:01:38.320
So when you give the option as create,

00:01:38.320 --> 00:01:39.910
it's going to destroy everything,

00:01:39.910 --> 00:01:43.950
and then it will recreate everything from scratch,

00:01:43.950 --> 00:01:47.060
and update is similar to create.

00:01:47.060 --> 00:01:48.920
But it's not going to destroy anything.

00:01:48.920 --> 00:01:53.080
Only there is a need to upgrade the database schema happen.

00:01:53.080 --> 00:01:54.350
It will do that for us.

00:01:54.350 --> 00:01:56.730
The other option is validate,

00:01:56.730 --> 00:01:59.000
and it's pretty self explanatory.

00:01:59.000 --> 00:02:01.640
So this option will L.

00:02:01.640 --> 00:02:01.760
O.

00:02:01.760 --> 00:02:07.680
Have been made to check to see if there is any mismatch between the database and what it is

00:02:07.680 --> 00:02:09.250
expecting from the database.

00:02:09.250 --> 00:02:11.740
If there is a mismatch than happen,

00:02:11.740 --> 00:02:13.610
it is just going to try an exception.

00:02:13.610 --> 00:02:18.820
So let's make sure that we drop or database or rather,

00:02:18.820 --> 00:02:19.580
the table.

00:02:19.580 --> 00:02:23.900
So now employ Table is not accessible,

00:02:23.900 --> 00:02:29.780
so having it should ideally invalidate this and shows an exception.

00:02:29.780 --> 00:02:32.800
Let's on our program and see what's happening.

00:02:32.800 --> 00:02:34.950
And sure enough,

00:02:34.950 --> 00:02:41.050
it's a schema management exception and is pointing to this employee table and this saying

00:02:41.050 --> 00:02:50.550
it is missing and one last option that we can provide in here is to create drop.

00:02:50.550 --> 00:02:52.800
This is something interesting.

00:02:52.800 --> 00:02:58.800
This will create the schema when we initiate Decision Factory and when we closed the

00:02:58.800 --> 00:03:04.600
session factory is just going to destroy or drop off the tables in the database.

00:03:04.600 --> 00:03:06.950
So let's see an example of the same.

00:03:06.950 --> 00:03:08.360
And for this purpose,

00:03:08.360 --> 00:03:16.550
I'm actually going to close the session factory close.

00:03:16.550 --> 00:03:20.320
And so let's on our program before that.

00:03:20.320 --> 00:03:24.950
Let's terminate all existing process and run it,

00:03:24.950 --> 00:03:31.400
and here you notice that it has.

00:03:31.400 --> 00:03:32.850
It has dropped everything,

00:03:32.850 --> 00:03:38.730
and then and then it has created the table along with it.

00:03:38.730 --> 00:03:41.290
It has also added the entry as expected,

00:03:41.290 --> 00:03:44.050
but when session factories closed,

00:03:44.050 --> 00:03:49.850
it has also dropped the employee table just as expected.

00:03:49.850 --> 00:03:56.630
Although this is a very cool feature,

00:03:56.630 --> 00:04:01.160
we don't want to blindly rely on this in real world applications.

00:04:01.160 --> 00:04:02.400
We don't want to use this.

00:04:02.400 --> 00:04:04.250
Options like update,

00:04:04.250 --> 00:04:05.080
create,

00:04:05.080 --> 00:04:05.410
drop,

00:04:05.410 --> 00:04:06.150
etcetera.

00:04:06.150 --> 00:04:08.010
There's a little risk involved.

00:04:08.010 --> 00:04:12.890
So all this it's better that you use a safe option like validate,

00:04:12.890 --> 00:04:18.100
and then a database administrator will take her off manually,

00:04:18.100 --> 00:04:21.150
making sure that everything is intact.

00:04:21.150 --> 00:04:25.060
But for our examples It's absolutely fine.

00:04:25.060 --> 00:04:28.970
We can use any of these options and they work where it's moot.

00:04:28.970 --> 00:04:30.740
I hope it makes sense.

00:04:30.740 --> 00:04:31.590
See assume.

