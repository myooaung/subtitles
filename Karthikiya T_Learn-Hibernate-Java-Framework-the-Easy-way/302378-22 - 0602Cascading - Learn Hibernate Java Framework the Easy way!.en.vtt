WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.140
in this video,

00:00:01.140 --> 00:00:03.200
we're going to try to explore this option.

00:00:03.200 --> 00:00:06.950
Casket type will understand what is cast getting etcetera.

00:00:06.950 --> 00:00:08.520
But before that,

00:00:08.520 --> 00:00:13.740
I want to let you know that I have said this option to create so that every time you run

00:00:13.740 --> 00:00:14.850
this test program,

00:00:14.850 --> 00:00:20.160
having it is actually going to get it off existing schema and is going to recreate

00:00:20.160 --> 00:00:26.220
everything from scratch have also incorporated certain amendments to this code so that it

00:00:26.220 --> 00:00:27.400
looks little clean.

00:00:27.400 --> 00:00:34.210
So we now have these two method calls when its students are the employees with contact and

00:00:34.210 --> 00:00:36.650
the other is to delete the employees with contact.

00:00:36.650 --> 00:00:37.940
The start explored.

00:00:37.940 --> 00:00:41.350
This mattered in here to insert the employ with contact.

00:00:41.350 --> 00:00:46.560
So the court that we have here it's pretty much the same core that we're seeing in our

00:00:46.560 --> 00:00:47.750
previous example.

00:00:47.750 --> 00:00:52.260
But I want to let you know that if you want to accomplish the same task using SQL

00:00:52.260 --> 00:00:53.050
statements,

00:00:53.050 --> 00:00:55.620
then this is how you would do it.

00:00:55.620 --> 00:01:00.280
You would create about the tables and then you will add the foreign key constraint for the

00:01:00.280 --> 00:01:01.750
employees contact table,

00:01:01.750 --> 00:01:07.280
and then you will first insert the employees and then you will try to insert the

00:01:07.280 --> 00:01:09.720
corresponding contact details.

00:01:09.720 --> 00:01:15.150
It's not possible that you run the squarely first before you try to add the employees.

00:01:15.150 --> 00:01:16.770
When you try to do that,

00:01:16.770 --> 00:01:22.450
you would see an error saying that you need to have a foreign key that maps to an existing

00:01:22.450 --> 00:01:25.550
table row in the employ table.

00:01:25.550 --> 00:01:29.890
But if you take a look at the court in here when you're trying to accomplish the same with

00:01:29.890 --> 00:01:30.590
hibernate,

00:01:30.590 --> 00:01:36.890
we're not really trying to perform to insert operations were trying to say only the contact

00:01:36.890 --> 00:01:40.050
object and having it is actually going to take care off,

00:01:40.050 --> 00:01:43.480
inserting the employee object as well.

00:01:43.480 --> 00:01:45.370
How is this happening?

00:01:45.370 --> 00:01:48.750
That's because off the option that we had set in here.

00:01:48.750 --> 00:01:55.730
So when you say Cascade type and you said it to all for all the session related operations

00:01:55.730 --> 00:01:56.490
happen,

00:01:56.490 --> 00:02:00.250
it is actually going to take care off cascading because heaven,

00:02:00.250 --> 00:02:07.420
it is aware that these two entities are related to each other and the border having oneto

00:02:07.420 --> 00:02:08.350
one relation.

00:02:08.350 --> 00:02:11.290
So let me just demonstrate you what I mean.

00:02:11.290 --> 00:02:12.510
For example,

00:02:12.510 --> 00:02:14.260
if I try to get rid off this option,

00:02:14.260 --> 00:02:16.290
then happen,

00:02:16.290 --> 00:02:21.530
it is not actually going to perform any cascading and so it's going to throw an exception,

00:02:21.530 --> 00:02:24.120
lets on the program and see how the output looks.

00:02:24.120 --> 00:02:26.350
Let's stop the existing program.

00:02:26.350 --> 00:02:37.890
So if you notice we have an exception in here and that has happened when having it is

00:02:37.890 --> 00:02:41.050
trying to insert the employees contact,

00:02:41.050 --> 00:02:46.710
that's because we haven't saved the employees before.

00:02:46.710 --> 00:02:54.780
We try to perform the insert off the contact details and let's take a look at the message

00:02:54.780 --> 00:03:01.550
that gets shown up in here the object references and unsaved transient in stands.

00:03:01.550 --> 00:03:05.240
Which means it is saying that there is no employees existing,

00:03:05.240 --> 00:03:08.380
so we cannot add the contact details off him.

00:03:08.380 --> 00:03:13.910
And it is suggesting us to save the transient in stands before Flushing.

00:03:13.910 --> 00:03:19.750
And it has also pointed the instance that went to Persist employees.

00:03:19.750 --> 00:03:26.750
So I really we thought that cascading Options said what we need to Dio is to perform

00:03:26.750 --> 00:03:31.540
another similar transaction till in the first transaction,

00:03:31.540 --> 00:03:39.450
were actually going to save the employees and then we'll try to save the contact details.

00:03:39.450 --> 00:03:48.190
So now we have this couple off calls to the same method when it's to save the employees

00:03:48.190 --> 00:03:53.400
that there is to say the contact just as we're doing here just as we have a couple off

00:03:53.400 --> 00:03:53.970
inserts.

00:03:53.970 --> 00:03:56.150
We have these two statements in here.

00:03:56.150 --> 00:03:56.900
No,

00:03:56.900 --> 00:04:01.830
let's start on the program and everything works well,

00:04:01.830 --> 00:04:05.150
and you would see an entry in the database as well.

00:04:05.150 --> 00:04:21.060
It's there as well as and employees contact table pretty well and good.

00:04:21.060 --> 00:04:28.090
So in order to award the trouble off you having to write so many transactions,

00:04:28.090 --> 00:04:30.760
let me just quickly undo all the changes.

00:04:30.760 --> 00:04:39.390
You can just simply set this option two casket type,

00:04:39.390 --> 00:04:41.020
all so that happen.

00:04:41.020 --> 00:04:42.160
It will take care off,

00:04:42.160 --> 00:04:48.250
adding the employee first before it tries to add the parent object contact.

00:04:48.250 --> 00:04:51.450
So that's what is gas getting inhabit Nate.

00:04:51.450 --> 00:04:53.480
Now in here,

00:04:53.480 --> 00:04:55.950
we have multiple options to choose from.

00:04:55.950 --> 00:04:57.070
For example,

00:04:57.070 --> 00:05:02.380
if you want cascading toe happen only when you try to remove and enter from the table,

00:05:02.380 --> 00:05:07.550
then we can say remove from here now.

00:05:07.550 --> 00:05:12.900
So with this cascading is not going to happen when you're trying to perform the insertion.

00:05:12.900 --> 00:05:15.680
So again this is going to throw an exception.

00:05:15.680 --> 00:05:17.750
Let's take a look at how it looks,

00:05:17.750 --> 00:05:21.940
and,

00:05:21.940 --> 00:05:23.250
as expected,

00:05:23.250 --> 00:05:30.550
it is pretty much saying the same to add the employees before you tried to save his contact

00:05:30.550 --> 00:05:38.660
and let me just quickly repeat the same thing that we've done to perform couple off save

00:05:38.660 --> 00:05:39.890
transactions.

00:05:39.890 --> 00:05:41.450
So this is going to work.

00:05:41.450 --> 00:05:46.150
And then let me just un commend this method to delete the employer with the contact.

00:05:46.150 --> 00:05:51.650
Can you make a guess on how the court would look like to delete an employee with contact?

00:05:51.650 --> 00:06:02.130
The task is pretty much similar to what you would do manually using SQL statement so we

00:06:02.130 --> 00:06:07.390
would try to fetch the contact closed on its identify ire.

00:06:07.390 --> 00:06:09.660
I'm trying to keep things simple here,

00:06:09.660 --> 00:06:12.110
so I'm just explicitly providing that into fire.

00:06:12.110 --> 00:06:15.760
But as of all the dimension in real world applications,

00:06:15.760 --> 00:06:18.110
you'd get the identify are automatically bills.

00:06:18.110 --> 00:06:19.490
Don't what use the chooses,

00:06:19.490 --> 00:06:24.230
and I want to get this contact object you can just simply do.

00:06:24.230 --> 00:06:25.360
Sessions are delayed,

00:06:25.360 --> 00:06:28.080
and you would pass this object now,

00:06:28.080 --> 00:06:32.150
since we said this option casket type to remove,

00:06:32.150 --> 00:06:36.910
having it is going to perform the cascading for us for remove operation.

00:06:36.910 --> 00:06:39.490
So when you do delete,

00:06:39.490 --> 00:06:42.710
it's not only going to delete the contact details,

00:06:42.710 --> 00:06:45.850
but also its associate ID employee details.

00:06:45.850 --> 00:06:47.680
It's a limit on this program,

00:06:47.680 --> 00:06:56.800
so this would insert all the details and then is going to delete as well.

00:06:56.800 --> 00:06:57.810
But we got in there.

00:06:57.810 --> 00:06:59.250
Let's take a look at what it is.

00:06:59.250 --> 00:07:00.450
Okay,

00:07:00.450 --> 00:07:06.050
this is saying that there's no default constructor for entity employees.

00:07:06.050 --> 00:07:07.560
Well,

00:07:07.560 --> 00:07:13.880
that's the reason I mentioned that he had to follow those Poggio good practices.

00:07:13.880 --> 00:07:14.130
Um,

00:07:14.130 --> 00:07:16.190
open up this particular file,

00:07:16.190 --> 00:07:16.860
employees.

00:07:16.860 --> 00:07:22.770
And and sure enough,

00:07:22.770 --> 00:07:25.750
we don't have the default constructor in here.

00:07:25.750 --> 00:07:28.570
So this is a learning for us.

00:07:28.570 --> 00:07:34.490
We have to follow those Poggio good practices as much as possible because this different

00:07:34.490 --> 00:07:38.950
constructor is going to help happening to create instance off employees.

00:07:38.950 --> 00:07:44.160
And if you don't want to see all these side effects again,

00:07:44.160 --> 00:07:46.850
just follow all deported good practices.

00:07:46.850 --> 00:07:50.120
So I've created this.

00:07:50.120 --> 00:07:53.170
I believe we don't have the default constructor here as well,

00:07:53.170 --> 00:07:53.810
but we do.

00:07:53.810 --> 00:07:54.690
That's great.

00:07:54.690 --> 00:07:57.150
So now things should go smoothly.

00:07:57.150 --> 00:07:58.950
What's on the program again?

00:07:58.950 --> 00:08:04.990
And sure enough,

00:08:04.990 --> 00:08:11.880
it has added the entry and then it has also deleted the employees.

00:08:11.880 --> 00:08:14.480
And here's the statement and happened.

00:08:14.480 --> 00:08:18.250
It taken care off joining and all too,

00:08:18.250 --> 00:08:24.300
to perform joint operations off both the tables to relate the entry and you don't have to

00:08:24.300 --> 00:08:26.950
deal it with multiple transactions as search.

00:08:26.950 --> 00:08:28.670
But now,

00:08:28.670 --> 00:08:35.930
if I get it off the statement in here now,

00:08:35.930 --> 00:08:36.840
can you make a guess?

00:08:36.840 --> 00:08:41.540
On whether do we see an exceptional not hold it?

00:08:41.540 --> 00:08:42.290
Let's see.

00:08:42.290 --> 00:08:44.350
The answer is,

00:08:44.350 --> 00:08:45.660
we don't see an exception.

00:08:45.660 --> 00:08:50.350
Let's on the program and everything works well.

00:08:50.350 --> 00:08:54.200
Can you guess why?

00:08:54.200 --> 00:08:56.640
Well,

00:08:56.640 --> 00:09:00.550
it's not possible that you have the contact details often employee,

00:09:00.550 --> 00:09:02.210
when the employee is not present.

00:09:02.210 --> 00:09:04.350
But it's possible the other way.

00:09:04.350 --> 00:09:08.950
You can have an employee without having his contact details.

00:09:08.950 --> 00:09:10.150
I mean,

00:09:10.150 --> 00:09:14.590
since we have the foreign key constant on the employee contact table,

00:09:14.590 --> 00:09:21.530
you cannot get rid off the employees associated with the contact unless you get it off its

00:09:21.530 --> 00:09:23.280
corresponding contact details.

00:09:23.280 --> 00:09:25.170
But it's possible the other way.

00:09:25.170 --> 00:09:28.830
What we're trying to do here is to delete the contact details,

00:09:28.830 --> 00:09:30.170
and that's all.

00:09:30.170 --> 00:09:32.550
We're not trying to delete the employees as such,

00:09:32.550 --> 00:09:39.370
and have a neat is not going to take her off dilating the employees because we removed that

00:09:39.370 --> 00:09:39.920
option.

00:09:39.920 --> 00:09:40.880
Ask Ed.

00:09:40.880 --> 00:09:43.050
So now if you go to the database,

00:09:43.050 --> 00:09:46.250
you won't see employ contact.

00:09:46.250 --> 00:09:51.750
But guess what you would see the employees and uh,

00:09:51.750 --> 00:09:56.830
that explains so similarly can also perform,

00:09:56.830 --> 00:09:59.440
update and read operations,

00:09:59.440 --> 00:10:01.600
and they both are pretty straightforward.

00:10:01.600 --> 00:10:04.220
And it would pretty much do the same thing.

00:10:04.220 --> 00:10:06.750
What we've done in our crowd application,

00:10:06.750 --> 00:10:14.740
I'm just trying to explain this option in here cascading.

00:10:14.740 --> 00:10:17.470
So it again is it when required?

00:10:17.470 --> 00:10:23.860
So we have all the options that that are part off a session object.

00:10:23.860 --> 00:10:24.980
Detach,

00:10:24.980 --> 00:10:25.630
merge.

00:10:25.630 --> 00:10:26.480
Persist,

00:10:26.480 --> 00:10:27.440
refreshing,

00:10:27.440 --> 00:10:27.950
removed.

00:10:27.950 --> 00:10:35.950
I'd like to keep this toe all for the time being and let me bring back all the changes.

00:10:35.950 --> 00:10:39.200
And then I'm going to make this project available for you to download,

00:10:39.200 --> 00:10:43.850
and you can import it into your eclipse and Roman to work on the same.

00:10:43.850 --> 00:10:51.160
So try to take the score and try to experiment with the various options we have and just

00:10:51.160 --> 00:10:52.460
simply play around with it.

00:10:52.460 --> 00:10:53.630
All right,

00:10:53.630 --> 00:10:54.350
See you soon.

