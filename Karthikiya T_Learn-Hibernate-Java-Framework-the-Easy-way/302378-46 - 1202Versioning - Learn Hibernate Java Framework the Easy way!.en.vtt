WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.110
in this video,

00:00:01.110 --> 00:00:05.660
we're going to take a look at how we can manage data consistency for the concept off

00:00:05.660 --> 00:00:06.290
worsening.

00:00:06.290 --> 00:00:07.880
This is applicable,

00:00:07.880 --> 00:00:12.870
especially when couple of transactions are trying to read the same record and do something

00:00:12.870 --> 00:00:13.190
with it.

00:00:13.190 --> 00:00:17.250
Now let us take a look at a real world example of the same.

00:00:17.250 --> 00:00:23.370
Let's say that you have a banking application and say that you have these three customers A

00:00:23.370 --> 00:00:23.370
,

00:00:23.370 --> 00:00:35.170
B and C is holding the total sum off 1000 and say that BNC has decided to send 500 toe is

00:00:35.170 --> 00:00:38.080
account as a gift on his birthday.

00:00:38.080 --> 00:00:38.680
Now,

00:00:38.680 --> 00:00:44.360
under the exemption that BNC did not initiate the transactions simultaneously.

00:00:44.360 --> 00:00:46.750
This is how the scenario would be.

00:00:46.750 --> 00:00:49.590
First people transfer the funds.

00:00:49.590 --> 00:00:57.510
So his transaction primarily in Moore's these two steps so his transaction will read the

00:00:57.510 --> 00:00:59.980
value off A which will be 1000.

00:00:59.980 --> 00:01:07.910
And then it will credit the value by 500 would save the total amount back to the database

00:01:07.910 --> 00:01:13.560
and at later point off time seyval log into his account and we'll also do the same.

00:01:13.560 --> 00:01:18.580
So in his transaction he would be able to read the latest value,

00:01:18.580 --> 00:01:20.000
which will be 1500.

00:01:20.000 --> 00:01:24.960
It would credit 500 to it and then commit the transaction.

00:01:24.960 --> 00:01:30.050
So the end result is that a will hold the total off 2000.

00:01:30.050 --> 00:01:30.870
But no,

00:01:30.870 --> 00:01:36.350
Let us try to understand what would happen if these two transactions go simultaneously.

00:01:36.350 --> 00:01:36.990
I mean,

00:01:36.990 --> 00:01:41.920
led to that both B and C has initiated their fun transfer simultaneously.

00:01:41.920 --> 00:01:44.450
Then here are the steps in mold.

00:01:44.450 --> 00:01:50.660
This transaction will read the value off A which will be 1000 and same is the case would

00:01:50.660 --> 00:01:52.260
see now,

00:01:52.260 --> 00:01:59.250
see has read that value off 1000 before B has modified and committed the changes.

00:01:59.250 --> 00:02:06.480
So these two transaction will read the same value off 1000 and down the line people at 500

00:02:06.480 --> 00:02:12.000
would update the value to 1500 and C is also going to do the same.

00:02:12.000 --> 00:02:17.160
It will read the value of 500 and upgrade the value to 1500.

00:02:17.160 --> 00:02:21.750
But unfortunately the resulting valley is not 2000.

00:02:21.750 --> 00:02:29.420
This is 1500 but still both being see see their account debited with 500 Now,

00:02:29.420 --> 00:02:32.490
this is definitely not something that we want.

00:02:32.490 --> 00:02:36.710
So let us try to replicate the same behavior in our example.

00:02:36.710 --> 00:02:38.550
So in order to illustrate this,

00:02:38.550 --> 00:02:41.870
I'm using the concept off multi threading.

00:02:41.870 --> 00:02:48.970
So I have extended our class with the tread class and that will be able to introduce this

00:02:48.970 --> 00:02:51.100
method run inside,

00:02:51.100 --> 00:02:55.580
which I'm just simply trying to call this method test.

00:02:55.580 --> 00:03:02.280
And in here I'm just trying to read the employee record with a particular identify air and

00:03:02.280 --> 00:03:06.400
then simply trying to update its salary by adding 500.

00:03:06.400 --> 00:03:07.140
Now,

00:03:07.140 --> 00:03:12.450
the key thing to note here is that inside our main logic,

00:03:12.450 --> 00:03:19.930
I'm initiating couple off threads in here just as you see in here by calling this method

00:03:19.930 --> 00:03:20.980
start now,

00:03:20.980 --> 00:03:22.720
this is all core java.

00:03:22.720 --> 00:03:24.550
We don't want to get deep into it.

00:03:24.550 --> 00:03:25.670
But the point is,

00:03:25.670 --> 00:03:30.940
I'm trying to initiate couple of treads and assume that we're trying to perform a couple

00:03:30.940 --> 00:03:40.590
off transactions and additionally have also put this instruction to pause the trade for

00:03:40.590 --> 00:03:46.750
three seconds so that we're sure that both the transactions will take place simultaneously

00:03:46.750 --> 00:03:46.750
,

00:03:46.750 --> 00:03:48.510
not in sequence.

00:03:48.510 --> 00:03:53.650
So currently the employee value is 1000.

00:03:53.650 --> 00:03:58.470
So we're calling this method insert before we are initiating these two threads.

00:03:58.470 --> 00:04:05.940
So the value will be 1000 and after we perform a couple of increments with couple off

00:04:05.940 --> 00:04:06.550
threads.

00:04:06.550 --> 00:04:09.450
What is the value that you're expecting here?

00:04:09.450 --> 00:04:10.790
Well,

00:04:10.790 --> 00:04:13.550
let's run the program and see the result.

00:04:13.550 --> 00:04:26.550
So we waited for three seconds on each thread,

00:04:26.550 --> 00:04:27.840
and ultimately,

00:04:27.840 --> 00:04:34.850
if you notice we have a couple of updates from both the trends,

00:04:34.850 --> 00:04:37.270
so ask for you.

00:04:37.270 --> 00:04:41.650
Would the value B 2000 or would it be 1500?

00:04:41.650 --> 00:04:42.770
Well,

00:04:42.770 --> 00:04:49.150
let's take a look at the data base and you would notice that the value is 1500.

00:04:49.150 --> 00:04:51.010
This is quite wrong.

00:04:51.010 --> 00:04:54.370
We did not get any kind often exception in here.

00:04:54.370 --> 00:04:58.680
This is as though what the transactions were successful.

00:04:58.680 --> 00:04:59.880
But in the end,

00:04:59.880 --> 00:05:02.910
we have a very inconsistent data.

00:05:02.910 --> 00:05:05.000
So going back to our example,

00:05:05.000 --> 00:05:11.630
this is equal into these two years are seeing the success message that their transaction is

00:05:11.630 --> 00:05:12.450
successful.

00:05:12.450 --> 00:05:13.860
But in the end,

00:05:13.860 --> 00:05:16.790
the result is still not updated.

00:05:16.790 --> 00:05:19.050
So why is this happening?

00:05:19.050 --> 00:05:25.360
This is happening because have been It is not aware that the data is updated by some other

00:05:25.360 --> 00:05:26.320
transaction,

00:05:26.320 --> 00:05:30.940
So we need to incorporate a certain mechanism that would solve this problem.

00:05:30.940 --> 00:05:32.320
And obviously,

00:05:32.320 --> 00:05:33.350
as you would guess,

00:05:33.350 --> 00:05:40.620
the solution is worsening All you have to do is to go to the entity class and introduce a

00:05:40.620 --> 00:05:44.740
new field and with the name version.

00:05:44.740 --> 00:05:46.770
And in addition to that,

00:05:46.770 --> 00:05:51.000
he also have to specify this annotation worship in now.

00:05:51.000 --> 00:05:52.280
Believe it or not,

00:05:52.280 --> 00:05:53.830
that's all there is to it.

00:05:53.830 --> 00:05:55.510
This will solve the problem.

00:05:55.510 --> 00:05:57.660
But how is it going to solve the problem?

00:05:57.660 --> 00:05:58.250
Really?

00:05:58.250 --> 00:05:58.920
Well,

00:05:58.920 --> 00:06:01.890
let's go back to our example.

00:06:01.890 --> 00:06:06.440
So this time we're actually going to see a new column in here.

00:06:06.440 --> 00:06:11.550
But the name version and that column is taken care by hibernate.

00:06:11.550 --> 00:06:13.950
But what does that column signify?

00:06:13.950 --> 00:06:14.420
Well,

00:06:14.420 --> 00:06:16.330
it will just signify the Harbin aid.

00:06:16.330 --> 00:06:18.850
Whether that record is updated or not,

00:06:18.850 --> 00:06:20.940
let me explain what I mean.

00:06:20.940 --> 00:06:26.510
So whenever you make an update on a particular object and you commit the transaction,

00:06:26.510 --> 00:06:30.090
the object details will be poor sister into the database,

00:06:30.090 --> 00:06:31.490
and along with that,

00:06:31.490 --> 00:06:33.350
having it will also increment.

00:06:33.350 --> 00:06:34.480
It's worsen.

00:06:34.480 --> 00:06:39.400
So every time you make an update on the object and you persist into the database,

00:06:39.400 --> 00:06:41.470
the worship will keep on incremental.

00:06:41.470 --> 00:06:48.250
Now can you try to imagine how is this going to solve our problem off concrete access?

00:06:48.250 --> 00:06:49.870
Well,

00:06:49.870 --> 00:06:54.920
it's pretty simple let's say that we have a couple of threats trying to pitch in to this

00:06:54.920 --> 00:07:01.350
code and the boat with the value off 1000 and along with that,

00:07:01.350 --> 00:07:04.190
they will also read the washing number off that record.

00:07:04.190 --> 00:07:06.660
Let's say that the current washing is one,

00:07:06.660 --> 00:07:10.090
so those two transactions will read the value as one,

00:07:10.090 --> 00:07:13.750
and they just simply move on with other instructions.

00:07:13.750 --> 00:07:17.260
Those two threads will wait for three seconds,

00:07:17.260 --> 00:07:21.150
and ultimately they will make an update on the object.

00:07:21.150 --> 00:07:22.650
And what come it,

00:07:22.650 --> 00:07:25.550
the first transaction that will come with the changes.

00:07:25.550 --> 00:07:30.880
We'll also update or income in the wash in of the object by one.

00:07:30.880 --> 00:07:32.660
So now the washing will become,

00:07:32.660 --> 00:07:33.130
too.

00:07:33.130 --> 00:07:33.820
And then,

00:07:33.820 --> 00:07:38.600
when the second transaction price to come with the changes hibernate notices that there is

00:07:38.600 --> 00:07:44.350
a mismatch between the wash in that was read before and the washing that is president now,

00:07:44.350 --> 00:07:46.450
due to that mismatch happen,

00:07:46.450 --> 00:07:52.110
it will be able to understand that it needs to fail the transaction and roll back the

00:07:52.110 --> 00:07:52.980
changes.

00:07:52.980 --> 00:07:54.840
So that's how it's going to work.

00:07:54.840 --> 00:07:59.750
It's on the program and make sure this time we're going to see an exception.

00:07:59.750 --> 00:08:10.290
And sure enough,

00:08:10.290 --> 00:08:11.600
regard this exception,

00:08:11.600 --> 00:08:15.150
it say's optimistic lock exception.

00:08:15.150 --> 00:08:17.450
And if you go through the description,

00:08:17.450 --> 00:08:22.800
you would notice that is just simply mentioning that there is basically the washing

00:08:22.800 --> 00:08:23.650
mismatch.

00:08:23.650 --> 00:08:26.800
So now,

00:08:26.800 --> 00:08:29.770
at least in the scares,

00:08:29.770 --> 00:08:36.400
the second user will be notified that his transaction has failed so that he can at least

00:08:36.400 --> 00:08:40.220
reinitiate the transaction are in your application code.

00:08:40.220 --> 00:08:44.730
You can write your court in such way that it will re attempt to perform the same

00:08:44.730 --> 00:08:45.700
transaction.

00:08:45.700 --> 00:08:50.650
Let's also quickly take a look at the data base,

00:08:50.650 --> 00:08:53.790
and here is a new column.

00:08:53.790 --> 00:08:57.690
Coercion or it See you soon.

