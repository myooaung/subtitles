WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.280
in this sector.

00:00:01.280 --> 00:00:05.110
Let's discuss about Web applications in Gentle on.

00:00:05.110 --> 00:00:07.960
And how do we do that in Jeolla?

00:00:07.960 --> 00:00:08.950
In specific.

00:00:08.950 --> 00:00:15.400
Every publication is just another software application that can be accessible on the Web,

00:00:15.400 --> 00:00:16.780
which is not in the Internet,

00:00:16.780 --> 00:00:19.860
and the Internet is accessed YR.

00:00:19.860 --> 00:00:27.690
Http protocol or its DPS and hence this involves an HDD People lined on an http server so

00:00:27.690 --> 00:00:30.320
the application runs on the server.

00:00:30.320 --> 00:00:33.630
We typically call that as a Web server on end,

00:00:33.630 --> 00:00:39.380
users like you and I access the same using its GDP climbed typically a browser,

00:00:39.380 --> 00:00:43.140
but it can be any other applications like another job.

00:00:43.140 --> 00:00:44.460
Our fight on application.

00:00:44.460 --> 00:00:46.040
It's the client,

00:00:46.040 --> 00:00:48.550
which always sends a request,

00:00:48.550 --> 00:00:50.290
and based on the request,

00:00:50.290 --> 00:00:55.800
the server sends some response and the response is going to be processed by your browser.

00:00:55.800 --> 00:00:57.410
And that's the content.

00:00:57.410 --> 00:01:02.950
What we see on the browser and be with the website website is a very generic name given toe

00:01:02.950 --> 00:01:04.880
a location on the server,

00:01:04.880 --> 00:01:08.440
which is given a unique name in the entire world,

00:01:08.440 --> 00:01:10.030
which is called the My Name.

00:01:10.030 --> 00:01:11.450
But on the website,

00:01:11.450 --> 00:01:14.990
you may have a static application or a dynamic application,

00:01:14.990 --> 00:01:20.660
a static obligation consist off a bunch of HTML CSS jealous good fights.

00:01:20.660 --> 00:01:23.050
They just lie around on the subway,

00:01:23.050 --> 00:01:26.580
acclaimed with its that and get the content.

00:01:26.580 --> 00:01:32.050
And the complete content is processed on the client side so that Sarwar doesn't add any

00:01:32.050 --> 00:01:34.710
value other than just storing those points.

00:01:34.710 --> 00:01:37.400
Here is an example that you can see.

00:01:37.400 --> 00:01:43.550
The website caving on dot com has a resource here called a boat.

00:01:43.550 --> 00:01:46.610
When I access that this is the content BC.

00:01:46.610 --> 00:01:50.040
So if I right click somewhere and then say inspect on,

00:01:50.040 --> 00:01:54.550
then Goto Network and then do a reload again,

00:01:54.550 --> 00:01:58.550
you can see that it comes back with few files from my website.

00:01:58.550 --> 00:02:00.990
A number one is this resource,

00:02:00.990 --> 00:02:02.370
and if you click on that,

00:02:02.370 --> 00:02:04.470
it's nothing but an HTML content.

00:02:04.470 --> 00:02:07.200
You can see there is a bunch off response.

00:02:07.200 --> 00:02:08.750
Headers requested us.

00:02:08.750 --> 00:02:10.780
But if you click on this response here,

00:02:10.780 --> 00:02:13.880
this is the HTML file that I kept in those server.

00:02:13.880 --> 00:02:14.980
That's right here.

00:02:14.980 --> 00:02:18.040
You can see that under cave in or dot com.

00:02:18.040 --> 00:02:20.390
There is a folder here called a boat,

00:02:20.390 --> 00:02:24.060
so the folder about contains two finds here.

00:02:24.060 --> 00:02:30.000
Number one is the index startext chairman on the other one is we know doc jpg If I click on

00:02:30.000 --> 00:02:31.110
index dot xml,

00:02:31.110 --> 00:02:35.750
it's nothing but the same content what our browser saw earlier.

00:02:35.750 --> 00:02:37.050
Let's close this,

00:02:37.050 --> 00:02:40.350
and if you carefully observe the response,

00:02:40.350 --> 00:02:46.060
there is a reference to a style sheet here coming from a website called Boots watch dot com

00:02:46.060 --> 00:02:51.650
And that is the boot strap dot mean Doxy says What you see here at the second request and

00:02:51.650 --> 00:02:55.340
then the 3rd 1 on the boot shop itself has a reference toe.

00:02:55.340 --> 00:02:56.110
Other files,

00:02:56.110 --> 00:03:00.290
such as foreign files and they're also being downloaded from the intimate.

00:03:00.290 --> 00:03:03.940
There is one more here called favorite conduct Ice Evil,

00:03:03.940 --> 00:03:06.010
and it is not found in my website,

00:03:06.010 --> 00:03:08.280
hence that red color indicating an error.

00:03:08.280 --> 00:03:09.450
But the point is,

00:03:09.450 --> 00:03:11.050
when we access this website,

00:03:11.050 --> 00:03:15.060
all that happened waas the climb since the request to an index.

00:03:15.060 --> 00:03:16.400
It CML by default.

00:03:16.400 --> 00:03:18.550
Indebted German is the one that it's fetched.

00:03:18.550 --> 00:03:19.460
You can see her.

00:03:19.460 --> 00:03:20.910
It's not mentioning that,

00:03:20.910 --> 00:03:22.190
but it's stained exist demon.

00:03:22.190 --> 00:03:26.070
And then the references used in the index HTML,

00:03:26.070 --> 00:03:32.490
such as styles and JavaScript del being victory along with images and then everything else

00:03:32.490 --> 00:03:34.380
is being processed on the browser.

00:03:34.380 --> 00:03:38.750
So the seller has no role other than just responding with the http response,

00:03:38.750 --> 00:03:41.360
whereas a dynamic Web application,

00:03:41.360 --> 00:03:42.170
for example,

00:03:42.170 --> 00:03:47.400
is little different because when the user with itself website probably let's take an

00:03:47.400 --> 00:03:49.960
example off my website here,

00:03:49.960 --> 00:03:51.450
Vino darko,

00:03:51.450 --> 00:03:57.640
you can see that everybody sees the same content when they visit this particular page here

00:03:57.640 --> 00:03:57.640
.

00:03:57.640 --> 00:03:58.860
So to that extent,

00:03:58.860 --> 00:04:00.650
this is a static content.

00:04:00.650 --> 00:04:01.800
However,

00:04:01.800 --> 00:04:03.620
if I click on log in here,

00:04:03.620 --> 00:04:04.860
then it's asking me.

00:04:04.860 --> 00:04:08.070
Watch the user name and password and so on and so forth.

00:04:08.070 --> 00:04:17.640
But the moment I key in my user name and password and enter the content that I see here

00:04:17.640 --> 00:04:20.790
will be different than the content you may see when you log in.

00:04:20.790 --> 00:04:24.800
So here are some of the products that I have on as a lot.

00:04:24.800 --> 00:04:25.380
Being user,

00:04:25.380 --> 00:04:27.330
you will have a different set of products.

00:04:27.330 --> 00:04:28.320
Similarly,

00:04:28.320 --> 00:04:30.550
if you visit a banking application like,

00:04:30.550 --> 00:04:31.340
let's say I c.

00:04:31.340 --> 00:04:32.410
A c bank dot com,

00:04:32.410 --> 00:04:33.550
this pitch,

00:04:33.550 --> 00:04:35.960
maybe the same thing that you and I see.

00:04:35.960 --> 00:04:41.720
But the moment we log in the content off the account would be totally different.

00:04:41.720 --> 00:04:44.360
And to facilitate this on the server side,

00:04:44.360 --> 00:04:47.010
you must have a program to do the same thing,

00:04:47.010 --> 00:04:50.600
and these programs can be written in different programming languages.

00:04:50.600 --> 00:04:54.610
Java is a very popular choice on Other Than Joel.

00:04:54.610 --> 00:04:56.970
You have the Microsoft Darknet platform,

00:04:56.970 --> 00:04:59.790
where you can you see shop or rebuilt toe court,

00:04:59.790 --> 00:05:01.490
the several state programs.

00:05:01.490 --> 00:05:04.270
There's a PHP fight on,

00:05:04.270 --> 00:05:06.040
and in the last decade in North,

00:05:06.040 --> 00:05:08.030
Jace has also become very popular,

00:05:08.030 --> 00:05:12.290
and in this course we are actually trying to do the same thing using Java.

00:05:12.290 --> 00:05:13.610
To make things easier,

00:05:13.610 --> 00:05:15.040
Javal Community Process,

00:05:15.040 --> 00:05:15.970
or JCP,

00:05:15.970 --> 00:05:19.630
standardize the way at developer can develop Web applications.

00:05:19.630 --> 00:05:22.110
Because a Web publication has many,

00:05:22.110 --> 00:05:23.320
many requirements,

00:05:23.320 --> 00:05:27.110
these requirements can be considered as functional as a less nonfunctional.

00:05:27.110 --> 00:05:33.090
The functional requirements are requirements that are specific toe customer demand.

00:05:33.090 --> 00:05:33.720
For example,

00:05:33.720 --> 00:05:35.780
if I'm developing a banking obligation,

00:05:35.780 --> 00:05:41.730
there might be features like a user should log in should be able to log out view there a

00:05:41.730 --> 00:05:43.460
cone detailed and so on and so forth.

00:05:43.460 --> 00:05:46.310
Whereas if I'm looking at a shopping mall application,

00:05:46.310 --> 00:05:48.430
the requirements are totally different.

00:05:48.430 --> 00:05:49.900
There may be customers,

00:05:49.900 --> 00:05:52.790
but the customers are free to registered by themselves.

00:05:52.790 --> 00:05:56.320
Bacon a multiple account without having to pay for it.

00:05:56.320 --> 00:05:59.310
A customer may add items to the shopping cart,

00:05:59.310 --> 00:06:00.090
removed them,

00:06:00.090 --> 00:06:01.320
change the quantity,

00:06:01.320 --> 00:06:02.740
proceed to building ID,

00:06:02.740 --> 00:06:04.570
additional addresses and so many things.

00:06:04.570 --> 00:06:05.160
Similarly,

00:06:05.160 --> 00:06:07.260
if I'm looking at a social media applications,

00:06:07.260 --> 00:06:11.330
so the requirements are totally different and these are all functional requirements.

00:06:11.330 --> 00:06:14.230
Nonfunctional requirements are typically common.

00:06:14.230 --> 00:06:15.790
Toe all applications,

00:06:15.790 --> 00:06:16.670
for example,

00:06:16.670 --> 00:06:20.110
how to handle multiple users concurrently.

00:06:20.110 --> 00:06:22.180
How to secure the resources.

00:06:22.180 --> 00:06:24.090
How do I manage transactions?

00:06:24.090 --> 00:06:29.010
How do I convert the It's TDP requests information coming from the browser in tow,

00:06:29.010 --> 00:06:30.250
a Java object.

00:06:30.250 --> 00:06:34.590
So a lot off requirements often application can be characterised in tow.

00:06:34.590 --> 00:06:36.300
Nonfunctional requirements.

00:06:36.300 --> 00:06:42.620
Jessie P came up with something called Java e R Java into press tradition in which they

00:06:42.620 --> 00:06:46.700
clearly separated functional and nonfunctional requirements.

00:06:46.700 --> 00:06:52.310
And JCP then made specifications for how to handle nonfunctional requirements,

00:06:52.310 --> 00:06:55.150
which are now called as containers on.

00:06:55.150 --> 00:06:56.640
In case of a Web application,

00:06:56.640 --> 00:07:01.300
they're called Web containers and then how to address these functional requirements in the

00:07:01.300 --> 00:07:04.350
form of components that can be given toe containers.

00:07:04.350 --> 00:07:06.100
The other developer,

00:07:06.100 --> 00:07:11.280
I would be interested toe create components that addressed the functional requirements and

00:07:11.280 --> 00:07:17.390
then deploy my components onto containers which are created by others after developers are

00:07:17.390 --> 00:07:18.390
organizations.

00:07:18.390 --> 00:07:19.270
For example,

00:07:19.270 --> 00:07:21.530
we have a Web container called Tomcat,

00:07:21.530 --> 00:07:27.200
which is from an organization called Apache Like Ways You Have Oracle Grab Logic.

00:07:27.200 --> 00:07:29.400
You have Web Spear from IBM.

00:07:29.400 --> 00:07:31.870
You have glasses from Sun Microsystems.

00:07:31.870 --> 00:07:33.840
Adobe has something called Children.

00:07:33.840 --> 00:07:39.690
So there are many many third party Web containers that are available on which I can deploy

00:07:39.690 --> 00:07:40.750
my components.

00:07:40.750 --> 00:07:43.140
And as for his job of applications,

00:07:43.140 --> 00:07:43.770
are concerned,

00:07:43.770 --> 00:07:46.910
there is only one kind of component that you can create,

00:07:46.910 --> 00:07:48.620
which is called Sublet A.

00:07:48.620 --> 00:07:49.130
Similarly,

00:07:49.130 --> 00:07:52.090
the Java class that follow certain guidelines are,

00:07:52.090 --> 00:07:52.720
you can say,

00:07:52.720 --> 00:07:58.050
implement certain contract into fish and then provide certain standard functions.

00:07:58.050 --> 00:08:02.960
So no matter how many's tablets we have or what kind of suffrage we have our water,

00:08:02.960 --> 00:08:08.760
the names of the same village of that container will only look in tow your classes and

00:08:08.760 --> 00:08:13.650
treat them as sublet and execute those standard contract functions.

00:08:13.650 --> 00:08:16.320
I may have additional functions in my class,

00:08:16.320 --> 00:08:18.710
but there are no use to the container,

00:08:18.710 --> 00:08:23.210
so container always invokes the standard lifecycle functions off.

00:08:23.210 --> 00:08:23.860
Sell it.

00:08:23.860 --> 00:08:29.530
So if I have to explain that in a natural request from the client is reserved by a

00:08:29.530 --> 00:08:31.550
container like Apache Tomcat.

00:08:31.550 --> 00:08:36.930
And then the container decides toe in oak function on a sublet,

00:08:36.930 --> 00:08:43.580
which is quoted by us as developers on our function takes the perimeters and other

00:08:43.580 --> 00:08:45.190
information sent by the client,

00:08:45.190 --> 00:08:49.290
which is given to me in the form of Java objects by the container process.

00:08:49.290 --> 00:08:53.760
Then do my response back to the container container with then do the response back to the

00:08:53.760 --> 00:08:57.950
client because that's the one that received the client request in the first place.

00:08:57.950 --> 00:08:58.560
So,

00:08:58.560 --> 00:08:59.960
as a component developer,

00:08:59.960 --> 00:09:03.060
I don't have to worry about any of the nonfunctional requirements,

00:09:03.060 --> 00:09:06.200
which are completely taken care by the Web containers.

00:09:06.200 --> 00:09:10.530
And since all the Web continous taker of the nonfunctional requirements,

00:09:10.530 --> 00:09:15.960
it becomes the choice for us to choose between different containers based on the

00:09:15.960 --> 00:09:19.750
performance are prising or any other factors.

00:09:19.750 --> 00:09:23.050
So when we develop our job based Web applications,

00:09:23.050 --> 00:09:26.310
we'll have different files such as HTML,

00:09:26.310 --> 00:09:26.810
CSS,

00:09:26.810 --> 00:09:30.140
JavaScript and as far as Joe's concerned,

00:09:30.140 --> 00:09:32.770
we may have sublet our entity.

00:09:32.770 --> 00:09:34.620
Classes are business tragic.

00:09:34.620 --> 00:09:34.910
Plus,

00:09:34.910 --> 00:09:36.770
as our data access logic classes,

00:09:36.770 --> 00:09:41.540
there is also something called Joshua Starr were pages which are nothing but some extreme.

00:09:41.540 --> 00:09:42.340
Unlike court,

00:09:42.340 --> 00:09:45.110
which eventually get converted into a sunlit.

00:09:45.110 --> 00:09:47.970
We will discuss that in great detail later,

00:09:47.970 --> 00:09:51.190
but all these lines exist in my computer,

00:09:51.190 --> 00:09:55.800
but we have to give them toe a Web container like Tomcat in a standard format,

00:09:55.800 --> 00:09:59.100
which is standardised by Jolla community process.

00:09:59.100 --> 00:10:02.740
We call this as a war file or Web archive,

00:10:02.740 --> 00:10:08.640
so it's nothing but a zip file that comprises off all the finds in a standard for the

00:10:08.640 --> 00:10:09.280
structure.

00:10:09.280 --> 00:10:15.330
And this is standardize because now I can do this war file toe any Web container without

00:10:15.330 --> 00:10:16.410
having to worry about,

00:10:16.410 --> 00:10:19.260
which is the Web container that we're going to deploy on.

00:10:19.260 --> 00:10:20.720
So as a developer,

00:10:20.720 --> 00:10:22.490
when I'm developing a Web application,

00:10:22.490 --> 00:10:28.500
I don't have to keep a specific Web container in mind because my application is developed

00:10:28.500 --> 00:10:31.210
according to the standards set by Job I E.

00:10:31.210 --> 00:10:33.920
Not by Apache or Oracle or IBM.

00:10:33.920 --> 00:10:35.470
So in the next lecture,

00:10:35.470 --> 00:10:41.040
let's discuss more about the Web archive on the wildfire structure.

00:10:41.040 --> 00:10:43.910
So that's all for this electoral CEO in the next one

