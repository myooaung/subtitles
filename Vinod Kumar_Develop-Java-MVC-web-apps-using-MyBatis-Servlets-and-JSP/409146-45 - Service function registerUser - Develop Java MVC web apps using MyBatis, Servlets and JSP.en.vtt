WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.040
in this lecture.

00:00:01.040 --> 00:00:04.950
Let's add a function in this user service class,

00:00:04.950 --> 00:00:12.250
which can be used for registering a new user on Let's Right the function as Public User

00:00:12.250 --> 00:00:14.520
Register User,

00:00:14.520 --> 00:00:18.250
which takes parameters such as string name,

00:00:18.250 --> 00:00:19.730
string email,

00:00:19.730 --> 00:00:21.390
Basler,

00:00:21.390 --> 00:00:22.290
Andi,

00:00:22.290 --> 00:00:25.830
the confirm password which the user would have entered in the text box.

00:00:25.830 --> 00:00:27.440
So let's call it at sea password.

00:00:27.440 --> 00:00:32.830
I noticed the function should return a new user object that is only available after

00:00:32.830 --> 00:00:34.040
successful registration.

00:00:34.040 --> 00:00:39.440
So we're gonna say it on now for the time being on then import the user from our entity

00:00:39.440 --> 00:00:40.150
package.

00:00:40.150 --> 00:00:43.100
So the first thing we have to do is toe check.

00:00:43.100 --> 00:00:46.650
If the input given here is valid or not,

00:00:46.650 --> 00:00:51.500
such as whether the name email password are all not in districts.

00:00:51.500 --> 00:00:52.160
Also,

00:00:52.160 --> 00:00:54.050
there is no record for the email given.

00:00:54.050 --> 00:00:55.770
Then it is considered as valid.

00:00:55.770 --> 00:00:58.160
But if anyone off them are invalid,

00:00:58.160 --> 00:01:02.330
then we need to collect all those error messages and then give the same thing back to the

00:01:02.330 --> 00:01:02.970
controller.

00:01:02.970 --> 00:01:08.370
But not that we have already decided that we're gonna return a user object so you can't

00:01:08.370 --> 00:01:11.120
really dynamically change the written type in Java.

00:01:11.120 --> 00:01:17.280
So the only other way left is that Let's ask the user another perimeter so the user can

00:01:17.280 --> 00:01:19.860
give me a container object like a collection.

00:01:19.860 --> 00:01:21.210
Let's a map,

00:01:21.210 --> 00:01:21.950
for example,

00:01:21.950 --> 00:01:24.060
and get validation errors.

00:01:24.060 --> 00:01:27.440
Vigorous Store those error messages in the map given by the user.

00:01:27.440 --> 00:01:32.870
So I'm going to declare here another variable called US map on map is supposed to be

00:01:32.870 --> 00:01:34.240
important from Java Util.

00:01:34.240 --> 00:01:36.330
The key type e string,

00:01:36.330 --> 00:01:37.720
the Value Tape String.

00:01:37.720 --> 00:01:42.060
Let's give the name as errors and then come over here in Dawson violation.

00:01:42.060 --> 00:01:46.410
I noticed the number off arguments here are four,

00:01:46.410 --> 00:01:47.710
which is okay,

00:01:47.710 --> 00:01:54.710
but sometimes you may have a form that contains 15 2025 feels obviously you can expect

00:01:54.710 --> 00:01:59.650
somebody toe pass all those 15 to 25 variables over here.

00:01:59.650 --> 00:02:02.980
And that is when we create something called the data transfer object.

00:02:02.980 --> 00:02:06.460
Since the number of parameters is very less over here,

00:02:06.460 --> 00:02:09.490
let's not worry about the terror transfer object over here,

00:02:09.490 --> 00:02:12.400
So let's come back over here and do the validation.

00:02:12.400 --> 00:02:20.080
So the first validation I want to do is about the name I'll say If name dot trim dot length

00:02:20.080 --> 00:02:21.760
equals toe zero,

00:02:21.760 --> 00:02:27.940
that means the user has not entered any value are only blank spaces has been entered.

00:02:27.940 --> 00:02:29.090
And that's what we're doing.

00:02:29.090 --> 00:02:31.980
A trim which removes the leading and trailing spaces.

00:02:31.980 --> 00:02:33.870
If this is true,

00:02:33.870 --> 00:02:39.880
then we're gonna say editors dot put on the keys Nothing with the field named to which we

00:02:39.880 --> 00:02:41.280
want us than an error message,

00:02:41.280 --> 00:02:44.950
and this is going to be like name is mandatory or required.

00:02:44.950 --> 00:02:46.770
Similarly,

00:02:46.770 --> 00:02:57.440
we say else if named Artim Dorland is less than three letters we can say others dot put for

00:02:57.440 --> 00:02:58.650
the same name field,

00:02:58.650 --> 00:03:03.280
but this time the um messages like at least three letters are required.

00:03:03.280 --> 00:03:06.540
Similarly,

00:03:06.540 --> 00:03:09.930
we can do the validation for email and password.

00:03:09.930 --> 00:03:12.370
So dis remain the same thing because their mandate refills.

00:03:12.370 --> 00:03:14.950
Let's a email list mandatory.

00:03:14.950 --> 00:03:17.920
Let's give the key as email on the method.

00:03:17.920 --> 00:03:21.150
All social indicate email address is mandatory.

00:03:21.150 --> 00:03:23.170
Another one is the password.

00:03:23.170 --> 00:03:25.250
Let's give the same thing Password.

00:03:25.250 --> 00:03:29.090
The field is fast for Andi off course.

00:03:29.090 --> 00:03:32.450
The method also should indicate possible it is managing,

00:03:32.450 --> 00:03:34.640
But apart from possibly being manager,

00:03:34.640 --> 00:03:36.580
it should also match with a C password.

00:03:36.580 --> 00:03:44.510
So we're gonna type your if password dot equals c Bus word is equals toe false.

00:03:44.510 --> 00:03:46.550
That means they don't match on this time.

00:03:46.550 --> 00:03:48.980
The error message can be for the key.

00:03:48.980 --> 00:03:50.010
See password.

00:03:50.010 --> 00:03:51.910
So I'll pay pure error.

00:03:51.910 --> 00:03:53.560
Start put on.

00:03:53.560 --> 00:04:01.550
The key is the Phoebus were The value is like pass words do not match another.

00:04:01.550 --> 00:04:02.930
The basic relegation is done.

00:04:02.930 --> 00:04:07.880
Let's also check whether there is a record for this particular email in our database and

00:04:07.880 --> 00:04:09.990
found that I need the deer wallet,

00:04:09.990 --> 00:04:10.790
me full screen.

00:04:10.790 --> 00:04:18.910
This we will create a user deal Variable called Dio equals toe deal factory dot get user

00:04:18.910 --> 00:04:19.550
dio,

00:04:19.550 --> 00:04:21.560
and that throws an Iot exception.

00:04:21.560 --> 00:04:23.440
So let's throw it away from this function.

00:04:23.440 --> 00:04:24.250
Press control.

00:04:24.250 --> 00:04:24.440
One.

00:04:24.440 --> 00:04:25.770
Enter and that'll do.

00:04:25.770 --> 00:04:34.340
And then we say your user equals toe deal dot get user by email and you that needs to be

00:04:34.340 --> 00:04:40.230
created off type user In case if this user is not equal sternal,

00:04:40.230 --> 00:04:43.140
that means there is a valid user for this particular email.

00:04:43.140 --> 00:04:47.050
We have to tell the user that had this email it already been registered with us.

00:04:47.050 --> 00:04:52.040
Use a different email so I can check your if user Noriko's toe now.

00:04:52.040 --> 00:04:54.050
And it was dark put,

00:04:54.050 --> 00:04:56.970
and then the key would be email.

00:04:56.970 --> 00:05:02.550
Let's get the value as this email is already registered with us.

00:05:02.550 --> 00:05:06.100
So since the well addition is now done,

00:05:06.100 --> 00:05:08.820
we don't have to continue forward if there is another.

00:05:08.820 --> 00:05:13.650
So we can check your If errors dot size is greater than zero,

00:05:13.650 --> 00:05:16.030
simply say return now.

00:05:16.030 --> 00:05:22.480
We don't have to do anything at all because the return value goes as now in the controller

00:05:22.480 --> 00:05:22.480
.

00:05:22.480 --> 00:05:25.200
We can now check a water the others regard,

00:05:25.200 --> 00:05:29.580
and then forward the request of the resisted our JSP with all the other messages.

00:05:29.580 --> 00:05:31.790
But if there is no other,

00:05:31.790 --> 00:05:37.700
that means we are right now here we simply have to create a user object based on the name,

00:05:37.700 --> 00:05:38.700
email and password.

00:05:38.700 --> 00:05:40.660
So we're gonna use the same user variable.

00:05:40.660 --> 00:05:43.290
But it's gonna be a new user object.

00:05:43.290 --> 00:05:44.130
And if you remember,

00:05:44.130 --> 00:05:50.720
we added a constructor that takes name email and then pass were as argument Remember,

00:05:50.720 --> 00:05:51.190
at this time,

00:05:51.190 --> 00:05:52.850
there is no idea for the user,

00:05:52.850 --> 00:05:53.800
however,

00:05:53.800 --> 00:05:58.200
we're gonna say deal dot create user user.

00:05:58.200 --> 00:06:01.190
This is going to know insert the record on.

00:06:01.190 --> 00:06:05.260
That's where my betters comes in tow help and my buddies will collect the out agenda that i

00:06:05.260 --> 00:06:08.550
d designs that back to this particular user object,

00:06:08.550 --> 00:06:10.860
and that is what we need to return from here.

00:06:10.860 --> 00:06:16.180
So our registered user function in this service layer is complete.

00:06:16.180 --> 00:06:17.600
And in the next lecture,

00:06:17.600 --> 00:06:23.380
let's create a register separate which in works dysfunction by supplying the appropriate

00:06:23.380 --> 00:06:28.450
perimeters handles are errors or the newly generated user object.

