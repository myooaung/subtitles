WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.415
Hello everyone, welcome back.

00:00:02.415 --> 00:00:05.385
So as I discussed in the previous video,

00:00:05.385 --> 00:00:08.580
we are going to explode or we are going to try it.

00:00:08.580 --> 00:00:12.660
A simple example how we can create an issue and we can track

00:00:12.660 --> 00:00:19.530
that particular issue in our GFR using Java machine control.

00:00:19.530 --> 00:00:20.610
Right?

00:00:20.610 --> 00:00:23.745
So here's a sample program is I got it from the Internet.

00:00:23.745 --> 00:00:25.290
This is pretty simple one, okay?

00:00:25.290 --> 00:00:28.484
So what basically will happen when I execute the program?

00:00:28.484 --> 00:00:32.170
I will get some memory issue.

00:00:32.390 --> 00:00:33.870
Okay?

00:00:33.870 --> 00:00:36.195
So that memory is your how it can be captured,

00:00:36.195 --> 00:00:38.685
how it was captured in the GFR.

00:00:38.685 --> 00:00:43.520
So that issue has been raised and the people has been left.

00:00:43.520 --> 00:00:44.720
So if somebody comes in,

00:00:44.720 --> 00:00:46.085
they have to see what went wrong.

00:00:46.085 --> 00:00:47.690
So instead of day-out,

00:00:47.690 --> 00:00:49.040
execute the code again,

00:00:49.040 --> 00:00:52.040
they can go to the DJ FOR file and they can open

00:00:52.040 --> 00:00:56.150
the PDF file and they can track what went wrong, right?

00:00:56.150 --> 00:00:58.205
So let me execute this code.

00:00:58.205 --> 00:01:03.260
And this is an example which is located in my test folder.

00:01:03.260 --> 00:01:06.020
So first thing, I need to open my terminal.

00:01:06.020 --> 00:01:10.175
Okay, So the folder I need to navigate is test folder.

00:01:10.175 --> 00:01:11.810
So LSI's and anterior.

00:01:11.810 --> 00:01:14.540
So this is a file J, FOR example, that Java,

00:01:14.540 --> 00:01:17.705
so this is the file I'm going to compile.

00:01:17.705 --> 00:01:21.635
So Java C space g, f,

00:01:21.635 --> 00:01:27.675
or that example. Okay?

00:01:27.675 --> 00:01:30.395
So the first thing, so now we'll compile the code.

00:01:30.395 --> 00:01:32.660
We need to run the application now.

00:01:32.660 --> 00:01:35.540
So as I mentioned earlier,

00:01:35.540 --> 00:01:40.985
we need to unlock the commercial features and then we introduce a flight recorder.

00:01:40.985 --> 00:01:47.795
Okay, so the way how we can do that, Java Executor, okay,

00:01:47.795 --> 00:01:55.040
and now I'm going to enable the unlock commercial motions.

00:01:55.040 --> 00:02:00.170
Okay, so unlock commercial features.

00:02:00.170 --> 00:02:02.735
So the first part is then the next one.

00:02:02.735 --> 00:02:07.050
I have to write this as a file.

00:02:07.890 --> 00:02:14.740
Okay, so let me execute this one because I'm trying to unlock the commercial fishers.

00:02:14.740 --> 00:02:21.910
And then I have a 2 enabled AI enabled the flight record. Now I'm going to use it.

00:02:21.910 --> 00:02:26.230
So iPhone XS, XS plus,

00:02:26.230 --> 00:02:31.810
and I'm going to use the flight flight recorder.

00:02:31.810 --> 00:02:35.140
Flight recorder and iPhone XS.

00:02:35.140 --> 00:02:39.110
Xs, I have to grow it some duration.

00:02:42.330 --> 00:02:50.835
Start. I start FALIGN flight.

00:02:50.835 --> 00:02:56.825
Recording. Recording is equal to

00:02:56.825 --> 00:03:04.970
duration and

00:03:04.970 --> 00:03:09.020
settings profile.

00:03:09.020 --> 00:03:13.205
And we need to have a filename for our GFR file limb,

00:03:13.205 --> 00:03:23.190
thick walled test or leak test.

00:03:23.260 --> 00:03:26.510
So now I enable

00:03:26.510 --> 00:03:30.830
the commercial features and I opened the flight recorder and I mentioned it has run for

00:03:30.830 --> 00:03:33.980
the citizen and duration and my file name is leaked

00:03:33.980 --> 00:03:38.150
test.js far and then I need to provide which application I'm going to run.

00:03:38.150 --> 00:03:41.405
I'm going to run, for example.

00:03:41.405 --> 00:03:43.910
So this is application, okay,

00:03:43.910 --> 00:03:45.770
some illegal parameter exception.

00:03:45.770 --> 00:03:47.735
Okay, so what we need to do, right?

00:03:47.735 --> 00:03:55.490
Okay, So let me try to unlock the feature of Java I x,

00:03:55.490 --> 00:04:00.440
x plus and

00:04:00.440 --> 00:04:07.500
lock commercial features.

00:04:08.950 --> 00:04:13.414
See now the common hill feature has been enabled.

00:04:13.414 --> 00:04:15.515
So now we can a core.

00:04:15.515 --> 00:04:17.825
So I'm going to make it even simpler now.

00:04:17.825 --> 00:04:20.430
So what I'm gonna do is

00:04:25.960 --> 00:04:28.760
so now we enable the commercial refrigerator.

00:04:28.760 --> 00:04:31.715
So I'm going to directly using the flight recorder.

00:04:31.715 --> 00:04:42.320
So Java iPhone X and start recording.

00:04:42.320 --> 00:04:48.300
And it's mentioned some duration rate.

00:04:49.450 --> 00:04:53.405
Duration is a quote,

00:04:53.405 --> 00:04:57.600
I didn't 30 seconds is better.

00:05:00.120 --> 00:05:07.300
Settings, profile and pretty much everything the same.

00:05:07.300 --> 00:05:12.770
And we needed an image right? Filename.

00:05:14.940 --> 00:05:19.210
Filename is equal to okay, leak,

00:05:19.210 --> 00:05:23.860
test for and obligations.

00:05:23.860 --> 00:05:27.925
I'm going to use j for example.

00:05:27.925 --> 00:05:29.785
Let's execute it.

00:05:29.785 --> 00:05:32.020
Could unlock option must proceed.

00:05:32.020 --> 00:05:33.579
I'll start right accordingly.

00:05:33.579 --> 00:05:35.635
Okay, let's see what is wrong here.

00:05:35.635 --> 00:05:39.555
Because I just said, I think we did some syntax issue.

00:05:39.555 --> 00:05:41.810
Let me copy paste. I don't want to type it,

00:05:41.810 --> 00:05:43.610
so I already tried before,

00:05:43.610 --> 00:05:45.140
so I'm going to copy paste it right now.

00:05:45.140 --> 00:05:47.405
So just right-click and paste it here.

00:05:47.405 --> 00:05:48.815
Just take a look at the code.

00:05:48.815 --> 00:05:50.255
So Java IF and X6.

00:05:50.255 --> 00:05:53.870
And the first thing I'm unlocking the commercial features, That's the first step.

00:05:53.870 --> 00:05:57.500
And I'm enabling the flight recorder. Okay.

00:05:57.500 --> 00:05:58.700
So and I'm start.

00:05:58.700 --> 00:06:00.365
Okay. We just made a spelling.

00:06:00.365 --> 00:06:01.700
I mean, some typo should be four.

00:06:01.700 --> 00:06:02.900
That is why it is not working.

00:06:02.900 --> 00:06:04.670
So I mentioned in thirty-seconds and settings,

00:06:04.670 --> 00:06:07.295
profile and file them is going to be.

00:06:07.295 --> 00:06:09.200
So let's have some different filename here.

00:06:09.200 --> 00:06:14.900
So leak test.js far. Okay, let's execute it.

00:06:14.900 --> 00:06:17.515
Yep, so now I call,

00:06:17.515 --> 00:06:18.590
it has been started.

00:06:18.590 --> 00:06:21.260
So all we need to do just wait for

00:06:21.260 --> 00:06:25.760
some time because we're expecting the out-of-memory, the hippy shoe, right?

00:06:25.760 --> 00:06:27.960
So just wait for a minute.

00:06:28.150 --> 00:06:30.920
Ten to 20 seconds, it will come.

00:06:30.920 --> 00:06:34.910
See now we've got the out-of-memory error.

00:06:34.910 --> 00:06:36.920
So now what we can do,

00:06:36.920 --> 00:06:41.690
we can go back to our location where we have the file. See this is the location.

00:06:41.690 --> 00:06:44.839
So here we have the j FOR example,

00:06:44.839 --> 00:06:49.265
and we compile the code and the leak test.js.

00:06:49.265 --> 00:06:51.110
Far. Great.

00:06:51.110 --> 00:06:52.625
So let me open this one.

00:06:52.625 --> 00:06:57.515
It will open in a mission control so where we can see everything.

00:06:57.515 --> 00:06:59.790
Just double-click on it.

00:06:59.790 --> 00:07:02.845
It is open through Java mission control.

00:07:02.845 --> 00:07:05.200
There are other ways to open a JAR file also,

00:07:05.200 --> 00:07:06.640
but I'll prefer to go with the

00:07:06.640 --> 00:07:07.240
Java machine

00:07:07.240 --> 00:07:08.780
control

00:07:16.740 --> 00:07:18.385
distorting.

00:07:18.385 --> 00:07:23.515
So this is a dashboard for your recorded so you can track everything here.

00:07:23.515 --> 00:07:25.015
This is your Java application?

00:07:25.015 --> 00:07:26.035
Correct?

00:07:26.035 --> 00:07:28.060
Have you seen some fluctuation here,

00:07:28.060 --> 00:07:29.785
some red colored area,

00:07:29.785 --> 00:07:32.350
which is some, something went wrong.

00:07:32.350 --> 00:07:35.920
You can see everything Machine total JVM application heap.

00:07:35.920 --> 00:07:37.870
And here you can check the memory.

00:07:37.870 --> 00:07:40.150
And you can check each and every one of them.

00:07:40.150 --> 00:07:44.825
So the byte which took 1.1 Fiji hub x, which is the wrong thing.

00:07:44.825 --> 00:07:47.105
So we should not take this much of a space.

00:07:47.105 --> 00:07:49.550
So this took a lot of space.

00:07:49.550 --> 00:07:53.390
So I eventually, my RAM is paralysed memory,

00:07:53.390 --> 00:07:58.580
so I'm getting the memory exception and you can check the file F0.

00:07:58.580 --> 00:07:59.930
And if he is there any exception,

00:07:59.930 --> 00:08:01.010
yes, there is an exception.

00:08:01.010 --> 00:08:04.190
So you can track it here and you have the details over here.

00:08:04.190 --> 00:08:07.880
And you can check the threads as well, tried dumps as well.

00:08:07.880 --> 00:08:09.575
And also you can find out,

00:08:09.575 --> 00:08:12.710
so the JVM redder information like garbage collections,

00:08:12.710 --> 00:08:16.385
garbage configurations, and virtual machine operation.

00:08:16.385 --> 00:08:19.070
Okay, So, okay, So someone

00:08:19.070 --> 00:08:22.610
is ran the application and they're going now I came in, I want to check.

00:08:22.610 --> 00:08:27.260
So what is the eye JRE which they are used on what version they used.

00:08:27.260 --> 00:08:28.730
Okay, so what I'm gonna do,

00:08:28.730 --> 00:08:31.669
so here there's a tab called environment.

00:08:31.669 --> 00:08:33.155
So it has everything.

00:08:33.155 --> 00:08:34.460
So you can click the process,

00:08:34.460 --> 00:08:37.805
it will give you the flow, the CPU usage.

00:08:37.805 --> 00:08:42.875
So it is started here and some Veritas going for a peak and then came down.

00:08:42.875 --> 00:08:44.750
And then it got ended with an issue.

00:08:44.750 --> 00:08:46.505
And Enron one variable.

00:08:46.505 --> 00:08:49.050
Okay, So here, which will tell you what is

00:08:49.050 --> 00:08:53.870
the path location and what is the JRE which you use?

00:08:53.870 --> 00:08:56.735
And this example I used JDK 10,

00:08:56.735 --> 00:08:59.405
I'm not using Derek 11 because I'm using JDK, right?

00:08:59.405 --> 00:09:02.585
So since Java, in Java 11,

00:09:02.585 --> 00:09:07.369
it was a flight recorder mode two, OpenJDK.

00:09:07.369 --> 00:09:08.645
So but we install JDK.

00:09:08.645 --> 00:09:11.660
That is why I went back to ten and I combine the core.

00:09:11.660 --> 00:09:17.855
So this is a Java home and the home and everything, all the informations.

00:09:17.855 --> 00:09:20.555
And if you want to check the system properties, it will give you.

00:09:20.555 --> 00:09:23.195
So what is the JVM specification motion?

00:09:23.195 --> 00:09:25.910
They sit in and uen.org corporation.

00:09:25.910 --> 00:09:29.105
It is not the OpenJDK and our call home.

00:09:29.105 --> 00:09:32.210
I mean, with the JDK home and the library folder.

00:09:32.210 --> 00:09:34.100
And what are the version exact number,

00:09:34.100 --> 00:09:37.700
every information, everything will be available here.

00:09:37.700 --> 00:09:42.484
It is a kind of console to handle entire application's background.

00:09:42.484 --> 00:09:46.530
It's just a backbone of your JVM.

00:09:47.290 --> 00:09:52.280
This is how we need to make use of GFR.

00:09:52.280 --> 00:09:57.350
Okay, So whenever you have some bigger application and you want to maintain our,

00:09:57.350 --> 00:09:58.400
you want to control it?

00:09:58.400 --> 00:10:01.925
Are you wanted bad track what is what is happening over there.

00:10:01.925 --> 00:10:05.960
So it is better to rent the application with

00:10:05.960 --> 00:10:10.565
the help of GFR so your code execution will not end.

00:10:10.565 --> 00:10:12.110
It will not have any impact.

00:10:12.110 --> 00:10:13.730
Your code keep executing that,

00:10:13.730 --> 00:10:16.835
but that is someone behind who's it?

00:10:16.835 --> 00:10:21.320
For the flight recorder which controlled and it's not controlled,

00:10:21.320 --> 00:10:24.215
it is monitoring your flows.

00:10:24.215 --> 00:10:25.985
You're JVM flows.

00:10:25.985 --> 00:10:27.560
So if something is wrong,

00:10:27.560 --> 00:10:30.710
everything has been captured here and you can retrieve everything here.

00:10:30.710 --> 00:10:37.160
So it will give you all the information which we required.

00:10:37.160 --> 00:10:40.130
So just go to try and let me know.

00:10:40.130 --> 00:10:46.280
Hopefully you might get some exception because i've I end up with a lot of issues.

00:10:46.280 --> 00:10:47.900
So if you start out with the issue,

00:10:47.900 --> 00:10:50.525
just let me know so I can help you on that.

00:10:50.525 --> 00:10:54.950
It might be a little bit tricky because it is something like whether

00:10:54.950 --> 00:10:59.510
I need to use OpenJDK R0 or could you regain so I can help you on that.

00:10:59.510 --> 00:11:02.960
So in the next video we're going to talk about another important feature.

00:11:02.960 --> 00:11:04.650
Thank you.
