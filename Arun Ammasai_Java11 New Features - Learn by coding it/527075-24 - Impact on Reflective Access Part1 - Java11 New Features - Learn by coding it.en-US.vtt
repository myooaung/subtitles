WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.445
Hello everyone, Welcome back.

00:00:02.445 --> 00:00:04.380
So in this example,

00:00:04.380 --> 00:00:05.685
what we're going to discuss our boat,

00:00:05.685 --> 00:00:10.965
we discuss about how they access control has been modified for the net losses, right?

00:00:10.965 --> 00:00:14.069
So now we're going to see the same impact on the reflection.

00:00:14.069 --> 00:00:17.460
Okay, So how the inner classes can communicate to each other.

00:00:17.460 --> 00:00:19.230
Instead of the binding method,

00:00:19.230 --> 00:00:22.785
we are going to have a new nist host or nist members methods, right?

00:00:22.785 --> 00:00:26.520
So the thing, how it's going to work on in the affliction.

00:00:26.520 --> 00:00:28.769
So what's real-world is the purpose of reflection.

00:00:28.769 --> 00:00:30.645
So when you're using reflection,

00:00:30.645 --> 00:00:34.380
you can entirely have the independent access to each and every classes.

00:00:34.380 --> 00:00:36.630
Independent axis, you can get the,

00:00:36.630 --> 00:00:38.920
you can set the permission, you can get the permission.

00:00:38.920 --> 00:00:44.809
Pretty much we can do anything with the reflection and it's a hard component.

00:00:44.809 --> 00:00:49.160
So window make sure whenever you're raising reflection, it is really necessary.

00:00:49.160 --> 00:00:50.930
Then you're gonna go for reflection. For now.

00:00:50.930 --> 00:00:53.615
We're going to talk about the impact on data collection.

00:00:53.615 --> 00:00:55.340
I'm going to show in a simple example.

00:00:55.340 --> 00:00:59.375
Here, I have a class called a reflective access.

00:00:59.375 --> 00:01:03.605
The similar way I have a inner class like nested class, which is good.

00:01:03.605 --> 00:01:07.865
And in her class method I have a method called do some and

00:01:07.865 --> 00:01:12.620
do some whether I'm using a reflector you to get the field x.

00:01:12.620 --> 00:01:14.255
So we're basically what I'm trying to do.

00:01:14.255 --> 00:01:16.655
I have the variable in my Adafruit or access.

00:01:16.655 --> 00:01:20.360
I'm trying to access the variable using the reflection,

00:01:20.360 --> 00:01:23.915
the field, because x is the variable type, right?

00:01:23.915 --> 00:01:30.695
So it's a field, so you can access them using declared field, right?

00:01:30.695 --> 00:01:37.835
So if you try this same code in Java 11, it will work.

00:01:37.835 --> 00:01:42.650
But when you're, when you try to do the same coding before Java term motion,

00:01:42.650 --> 00:01:44.899
we will get an exception.

00:01:44.899 --> 00:01:49.250
Okay, so we got an exception called cannot access the member of the class.

00:01:49.250 --> 00:01:52.055
Because when you are doing the same thing in reflection,

00:01:52.055 --> 00:01:55.265
we have a problem to communicate their prey weight members.

00:01:55.265 --> 00:01:58.850
But if it is not a reflective in normal glass is working.

00:01:58.850 --> 00:01:59.240
Okay.

00:01:59.240 --> 00:02:02.450
So now that I've loved IV access has some issues.

00:02:02.450 --> 00:02:04.745
So it has been resolved and Java 11.

00:02:04.745 --> 00:02:11.750
So if you compare the same code in Java 11 and it should be working fine.

00:02:11.750 --> 00:02:13.490
So what we're gonna do right now,

00:02:13.490 --> 00:02:17.930
I'm going to create this same example and I'll show you when you're compiling in Java 7,

00:02:17.930 --> 00:02:21.665
what will happen when you're compiling in Java and what will happen, right?

00:02:21.665 --> 00:02:23.660
So basically when you do it,

00:02:23.660 --> 00:02:25.880
the same code in Java 11,

00:02:25.880 --> 00:02:27.755
no issues, issue has been fixed.

00:02:27.755 --> 00:02:33.305
But in Java, we have a unit of lecture when you're trying to access the Num class.

00:02:33.305 --> 00:02:39.725
So let's go back to sublime.

00:02:39.725 --> 00:02:42.200
And I'm going to create a new class here.

00:02:42.200 --> 00:02:46.620
So we can call on to kind.

00:02:50.320 --> 00:02:53.375
So let's create a class here.

00:02:53.375 --> 00:03:01.700
So my class name is going to be reflective access.

00:03:01.700 --> 00:03:12.320
So first grader class and then save it as and save it reflective access dot Java, sorry.

00:03:12.320 --> 00:03:17.330
So push a reference to the Access Control C File.

00:03:17.330 --> 00:03:21.900
Save As a flip, you access that.

00:03:25.600 --> 00:03:29.240
Okay, so now I got data flip to access class.

00:03:29.240 --> 00:03:33.590
So first thing first, I'm going to create a private number here.

00:03:33.590 --> 00:03:40.220
Private static int x is equal to 50.

00:03:40.220 --> 00:03:41.045
Got it.

00:03:41.045 --> 00:03:43.580
So now I'm going to create a class yet,

00:03:43.580 --> 00:03:45.140
which means in their class.

00:03:45.140 --> 00:03:53.330
So public static class, nested class.

00:03:53.330 --> 00:04:04.890
So here I'm going to create a method called do some public static wide to some here.

00:04:06.520 --> 00:04:11.885
I'm going to use the dry and a gas blog because I'm trying to use the reflect tool.

00:04:11.885 --> 00:04:16.340
And I'm going to use the field because the index is a declared a field rate.

00:04:16.340 --> 00:04:19.250
So in order to receive them using that affliction,

00:04:19.250 --> 00:04:22.080
I need to have a plane catch block.

00:04:44.020 --> 00:04:47.435
Okay, So here what I'm trying to do.

00:04:47.435 --> 00:04:55.060
So we need to tried to receive that declared a field, right?

00:04:55.060 --> 00:04:57.865
So I'm going to use the field here.

00:04:57.865 --> 00:05:01.810
The field packages available in java Lambda to reflect, okay,

00:05:01.810 --> 00:05:06.250
So field FIL, the failed is equal to.

00:05:06.250 --> 00:05:09.205
So I'm going to use reflective access.

00:05:09.205 --> 00:05:12.745
There's a class name radial flow to access dot class.

00:05:12.745 --> 00:05:15.610
This is a class I'm trying to access inside of the class.

00:05:15.610 --> 00:05:19.285
I'm trying to retrieve that get declared a field.

00:05:19.285 --> 00:05:22.705
If you're using ID, it will give you the citations.

00:05:22.705 --> 00:05:28.029
Declare field. So I entered the field which I'm trying to look for is yes.

00:05:28.029 --> 00:05:30.325
Okay, save it.

00:05:30.325 --> 00:05:32.100
So now what I'm gonna do,

00:05:32.100 --> 00:05:34.520
Let's try to save some value here.

00:05:34.520 --> 00:05:36.425
So I don't want the 50 here.

00:05:36.425 --> 00:05:38.945
So I want to set some value here.

00:05:38.945 --> 00:05:43.955
Failed dot sit in similar they're saying to feel right.

00:05:43.955 --> 00:05:46.640
So there is no data on it.

00:05:46.640 --> 00:05:47.810
I'm in concert are going to pass.

00:05:47.810 --> 00:05:50.820
So I'm going to provide something called 1D the data.

00:05:51.640 --> 00:05:54.980
Okay? So now what I'm gonna do,

00:05:54.980 --> 00:06:00.665
I'm gonna create a main method in my reflective access.

00:06:00.665 --> 00:06:03.875
Okay, not on the ins inner method. Okay, just make sure.

00:06:03.875 --> 00:06:05.915
So this is a method here.

00:06:05.915 --> 00:06:13.530
And here I'm going to create public static, void main.

00:06:15.810 --> 00:06:18.010
So here what I'm gonna do,

00:06:18.010 --> 00:06:20.560
I'm trying to access the do some method.

00:06:20.560 --> 00:06:23.170
So do some is available in the nested class rate.

00:06:23.170 --> 00:06:28.105
So nested class Control C.

00:06:28.105 --> 00:06:30.640
And instead do some dot,

00:06:30.640 --> 00:06:36.080
sorry, mistake class, write nested class, do some.

00:06:37.710 --> 00:06:41.260
Right? So then what I'm trying to do,

00:06:41.260 --> 00:06:49.540
I'm trying to access the system dot out dot print LN.

00:06:49.540 --> 00:06:59.580
And I'm trying to access the x here by flood peer axis to x.

00:06:59.740 --> 00:07:04.940
So I'm not going to compile them using Java 11 because I want to show you what Lab and if

00:07:04.940 --> 00:07:09.845
a company using Java 10 and then 11, I'll show in the next video.

00:07:09.845 --> 00:07:11.340
Thank you.
