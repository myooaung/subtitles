WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.920 --> 00:00:03.765
Hello everyone, Welcome back.

00:00:03.765 --> 00:00:05.820
Celebrate this example.

00:00:05.820 --> 00:00:08.490
We'll see two methods.

00:00:08.490 --> 00:00:12.690
One for us in goodness coal and another one is for synchronous call.

00:00:12.690 --> 00:00:15.960
Okay, So let's have some proper example.

00:00:15.960 --> 00:00:21.360
So what I'm gonna do is I'm going to create a method which takes your multiple URLs.

00:00:21.360 --> 00:00:25.780
For example, google.com or our DOD, your own websites.

00:00:25.780 --> 00:00:28.820
Okay, So I'm going to ping each one of

00:00:28.820 --> 00:00:33.185
the server and I'm just checking whether we are getting the proper response from them.

00:00:33.185 --> 00:00:34.910
So if that is what is true,

00:00:34.910 --> 00:00:36.320
a 100 of each mint is valid.

00:00:36.320 --> 00:00:37.580
You audit success, URL,

00:00:37.580 --> 00:00:39.410
audit failure at one.

00:00:39.410 --> 00:00:41.630
Okay, so I'm going to write a method and I'm

00:00:41.630 --> 00:00:43.910
going to do one will matter to verify the URLs.

00:00:43.910 --> 00:00:45.320
So first thing first,

00:00:45.320 --> 00:00:48.140
let's create a new class here.

00:00:48.140 --> 00:00:52.639
So this is going to be hashed to DB2 client.

00:00:52.639 --> 00:00:55.980
Verify you are.

00:00:57.190 --> 00:01:02.160
Okay, so let's go back to presentation mode.

00:01:02.530 --> 00:01:05.120
So the first thing first,

00:01:05.120 --> 00:01:06.740
let's create a main method anyway,

00:01:06.740 --> 00:01:11.585
I'm not going to use it for now because I'm going to create a separate matter.

00:01:11.585 --> 00:01:16.235
I get the first method to make the call and getting the response from them.

00:01:16.235 --> 00:01:20.690
And then we can use the another method which will verify the URL.

00:01:20.690 --> 00:01:21.995
Okay?

00:01:21.995 --> 00:01:28.625
So the first thing I'm going to create a metonym called static void,

00:01:28.625 --> 00:01:34.830
which you are a response.

00:01:35.800 --> 00:01:41.120
So here out I'm gonna do is I'm going to use the list of URLs here.

00:01:41.120 --> 00:01:44.390
So the list of you,

00:01:44.390 --> 00:01:49.775
All right. So your eyes.

00:01:49.775 --> 00:01:55.835
So you guys have guns from Java input class, right?

00:01:55.835 --> 00:01:57.500
Okay.

00:01:57.500 --> 00:01:59.945
So I'm going to prove that the stream of data, okay.

00:01:59.945 --> 00:02:05.550
So Stream dot, I'm going to use the ultimate ritual activity multiple input, right?

00:02:08.080 --> 00:02:11.610
So what's the problem here?

00:02:14.560 --> 00:02:18.270
Stream of a string.

00:02:18.460 --> 00:02:20.600
Okay, let's modify it later.

00:02:20.600 --> 00:02:22.295
Okay, So first thing is,

00:02:22.295 --> 00:02:26.105
I'm going to call the HTTP as simple one.

00:02:26.105 --> 00:02:30.125
So we always verify the google.com, right?

00:02:30.125 --> 00:02:33.380
Are you don't have to prove it www or that's a much

00:02:33.380 --> 00:02:36.740
better able to provide that google.com.

00:02:36.740 --> 00:02:38.975
This is the first you I'm going to verify,

00:02:38.975 --> 00:02:42.260
and the second one I'm going to use the GitHub.

00:02:42.260 --> 00:02:50.750
So nice GDP is end dot github.com.

00:02:50.750 --> 00:02:57.095
And then I'm going to use the map method.

00:02:57.095 --> 00:03:03.179
So which will create your URI. Uri.

00:03:03.280 --> 00:03:06.860
So I'm going to have my data frames here to create method.

00:03:06.860 --> 00:03:08.465
It's a mouthful acceptor function.

00:03:08.465 --> 00:03:11.030
So I'm taking a URI as a input on an MI calling

00:03:11.030 --> 00:03:16.565
the create method and then collect them as a list.

00:03:16.565 --> 00:03:18.800
So now we got everything lists.

00:03:18.800 --> 00:03:21.230
Now I hardly stuff a URIs and,

00:03:21.230 --> 00:03:22.910
and I'm returning the master list.

00:03:22.910 --> 00:03:24.155
So basically what I'm trying to do,

00:03:24.155 --> 00:03:26.840
I'm going to ping this particular website URL,

00:03:26.840 --> 00:03:30.050
and I'm going to validate whether it is they're doing the proper response,

00:03:30.050 --> 00:03:32.300
which means a 200 response.

00:03:32.300 --> 00:03:34.310
Okay, so first thing,

00:03:34.310 --> 00:03:36.390
let's create a client.

00:03:36.390 --> 00:03:40.760
Hi students declined, and it is going to be a client.

00:03:41.160 --> 00:03:48.085
And using the typic line dot new build a model.

00:03:48.085 --> 00:03:54.010
So here I'm going to add few more things.

00:03:54.010 --> 00:03:56.740
So normally we use the connection timeout right before the building.

00:03:56.740 --> 00:03:59.840
Okay, so now I'm gonna do that.

00:04:00.150 --> 00:04:03.850
So dot going, I can't die mode,

00:04:03.850 --> 00:04:06.910
which will take the duration as a input of seconds and it will

00:04:06.910 --> 00:04:11.155
get some data as input. But not only that.

00:04:11.155 --> 00:04:15.985
So I'm going to use the follow redirects.

00:04:15.985 --> 00:04:19.545
So you all know Buddha redirection to rate.

00:04:19.545 --> 00:04:24.140
So if for example you are trying to call somebody and that is known as pounds from them,

00:04:24.140 --> 00:04:25.820
it has to rewrite it to somebody else.

00:04:25.820 --> 00:04:28.744
And that option is enabled always.

00:04:28.744 --> 00:04:35.670
So hydrophobic lines dot redirect dot always.

00:04:36.730 --> 00:04:38.300
Okay?

00:04:38.300 --> 00:04:40.535
So now I have the client ID.

00:04:40.535 --> 00:04:42.590
So we need to provide the information how

00:04:42.590 --> 00:04:44.540
long the connection has to weighed down by that.

00:04:44.540 --> 00:04:47.960
It needs to relate it to some other place or everything.

00:04:47.960 --> 00:04:49.640
You need to prove it in the client itself.

00:04:49.640 --> 00:04:57.390
So now we're going to use yes different approach here.

00:04:57.490 --> 00:05:00.185
But that's my ultimate goal is here,

00:05:00.185 --> 00:05:01.520
I want to violate them.

00:05:01.520 --> 00:05:03.080
So here what I'm gonna do,

00:05:03.080 --> 00:05:08.510
I have to use the completable future to validate the response.

00:05:08.510 --> 00:05:09.740
But before I'm doing that,

00:05:09.740 --> 00:05:12.830
let me write a one more method which will verify the ureter.

00:05:12.830 --> 00:05:13.550
Okay?

00:05:13.550 --> 00:05:22.250
So static wide verify URL.

00:05:22.250 --> 00:05:24.950
So you'll understand once I complete the program.

00:05:24.950 --> 00:05:26.420
So why I used very fair,

00:05:26.420 --> 00:05:30.350
you are limited and it lack septa HTTP client as an input.

00:05:30.350 --> 00:05:32.750
So blind.

00:05:32.750 --> 00:05:40.175
It loves subdata, You are a SQL, right?

00:05:40.175 --> 00:05:43.730
So here what I'm going to do is I don't have any builder here, right?

00:05:43.730 --> 00:05:46.985
So in the previous fed you are a response, correct?

00:05:46.985 --> 00:05:49.010
So I have a client here.

00:05:49.010 --> 00:05:52.430
So what I need to do is I'm going to create a request here.

00:05:52.430 --> 00:05:55.380
So how HTTP request,

00:05:55.570 --> 00:06:01.265
request basic what your question is equal to,

00:06:01.265 --> 00:06:02.750
and we know what to do, right?

00:06:02.750 --> 00:06:07.325
Http request dot mu.

00:06:07.325 --> 00:06:13.440
By Lemma, end, I will provide a time or decile.

00:06:17.580 --> 00:06:22.940
And then I will pass the URL which is coming as the input to this method.

00:06:26.580 --> 00:06:29.740
And then I build the instance.

00:06:29.740 --> 00:06:33.550
So this instance will be used to make a,

00:06:33.550 --> 00:06:35.470
make a call because using this client,

00:06:35.470 --> 00:06:37.360
so this is a client and desert request.

00:06:37.360 --> 00:06:39.880
So every time I'm getting a different client and

00:06:39.880 --> 00:06:42.715
I'm making a request for this particular URL,

00:06:42.715 --> 00:06:44.245
and I'm going to make the call.

00:06:44.245 --> 00:06:46.960
So that is the ultimate goal here.

00:06:46.960 --> 00:06:49.720
So basically what I'm trying to do here,

00:06:49.720 --> 00:06:57.705
I'm trying to use a client to make the calls the client sent us implement that.

00:06:57.705 --> 00:07:00.440
So since passing method which will take the two different inputs,

00:07:00.440 --> 00:07:02.195
right? So what is that?

00:07:02.195 --> 00:07:06.050
The first one is request.

00:07:06.050 --> 00:07:08.780
Okay? And the second one is,

00:07:08.780 --> 00:07:14.645
of course there's a body handler which is available in the HTTP response dot.

00:07:14.645 --> 00:07:16.410
Body.

00:07:17.740 --> 00:07:21.725
Body handless start off string, right?

00:07:21.725 --> 00:07:24.740
So now I got the data.

00:07:24.740 --> 00:07:28.100
So I have to do some other process.

00:07:28.100 --> 00:07:29.990
Once you've got that response,

00:07:29.990 --> 00:07:34.895
I have to retrieve the status code and I'll verify the status code.

00:07:34.895 --> 00:07:37.700
So the simple way to do that,

00:07:37.700 --> 00:07:41.720
I can use that then applying my thought, right?

00:07:41.720 --> 00:07:47.885
So I'm going to use dot then applied.

00:07:47.885 --> 00:07:50.975
So apply matter. We all know that it takes a function as a input, right?

00:07:50.975 --> 00:07:52.310
So what does this function here?

00:07:52.310 --> 00:07:54.350
It is going to be HTTP response, right?

00:07:54.350 --> 00:07:58.400
So because in high sugar respond we have method called status,

00:07:58.400 --> 00:08:00.095
but I'm not going to use a body here.

00:08:00.095 --> 00:08:01.910
The previous example we use mody on here,

00:08:01.910 --> 00:08:03.890
I'm going to use the status code.

00:08:03.890 --> 00:08:06.870
So let me put it in the next line here.

00:08:08.440 --> 00:08:10.745
Okay, So then apply.

00:08:10.745 --> 00:08:14.390
So you are getting, from this point you have the status code and then you

00:08:14.390 --> 00:08:18.365
have to do one more then apply because you need to check the condition, right?

00:08:18.365 --> 00:08:20.570
So i'm, I'm going to use the,

00:08:20.570 --> 00:08:22.100
the status code here.

00:08:22.100 --> 00:08:27.905
So status code.

00:08:27.905 --> 00:08:32.370
And I'm going to write a lambda expression here,

00:08:35.500 --> 00:08:40.010
is equal to 100, which means intersex.

00:08:40.010 --> 00:08:47.630
That's correct. Okay, So then what happened if something went wrong exception.

00:08:47.630 --> 00:08:55.550
So I had to provide that explanation.

00:08:55.550 --> 00:08:59.990
It's a files in then it might bigger,

00:08:59.990 --> 00:09:02.630
but when you understand the code to be even easier.

00:09:02.630 --> 00:09:06.080
So the final everything is done then accept,

00:09:06.080 --> 00:09:09.710
accept matter which will accept a consumer, right?

00:09:09.710 --> 00:09:12.290
So what I'm gonna do, I'm gonna pass the valid as

00:09:12.290 --> 00:09:17.120
a input and opened the multi line explanations here.

00:09:17.120 --> 00:09:21.270
So here I'm going to try if valid.

00:09:22.240 --> 00:09:29.940
What I'm gonna do, I'm gonna throw it out here, S out.

00:09:30.310 --> 00:09:33.650
So here, let's provide some information.

00:09:33.650 --> 00:09:39.695
So this is going to be a success.

00:09:39.695 --> 00:09:44.659
Which means the Bing has been sepsis verified.

00:09:44.659 --> 00:09:55.175
And let's provide the URL, URI.

00:09:55.175 --> 00:09:57.950
Okay, so what happens if it is not?

00:09:57.950 --> 00:10:01.430
So we have to provide the L spot here.

00:10:01.430 --> 00:10:05.810
We're going to provide says out and it is going to be a failure.

00:10:05.810 --> 00:10:09.960
And we're failure.

00:10:11.230 --> 00:10:15.845
Could not connect.

00:10:15.845 --> 00:10:22.460
And plus ERA.

00:10:22.460 --> 00:10:25.940
So okay.

00:10:25.940 --> 00:10:28.100
So the client that's in Let's go back one by one.

00:10:28.100 --> 00:10:29.930
Okay. So the first time I'm making a call,

00:10:29.930 --> 00:10:32.150
so once you've got the response, what are the outcomes here?

00:10:32.150 --> 00:10:35.270
Completable feature from the HTTP response,

00:10:35.270 --> 00:10:36.725
I'm retrieving the status code.

00:10:36.725 --> 00:10:38.225
From the status code.

00:10:38.225 --> 00:10:41.690
I'm checking by that the trade is good, it's 200.

00:10:41.690 --> 00:10:48.964
If it is true, it will walk or else it'll make the flag as a false.

00:10:48.964 --> 00:10:53.420
Okay, So then it locks into phi and the final implementation.

00:10:53.420 --> 00:10:54.530
So everything has gone down.

00:10:54.530 --> 00:10:57.890
And now finally, what is the output part? I'm going to print it.

00:10:57.890 --> 00:11:03.665
So if it is a true or a valid if this part is executor,

00:11:03.665 --> 00:11:06.530
which means we will get the true if this part is executed,

00:11:06.530 --> 00:11:08.090
we are getting the files here.

00:11:08.090 --> 00:11:09.740
Okay, So if it is true,

00:11:09.740 --> 00:11:10.940
we are providing success,

00:11:10.940 --> 00:11:15.080
it's verified, else we'll provide, it is not.

00:11:15.080 --> 00:11:15.950
Okay.

00:11:15.950 --> 00:11:17.435
Here, here's the deal.

00:11:17.435 --> 00:11:20.945
So this particular method which will return a completable futures, correct.

00:11:20.945 --> 00:11:22.430
Okay, so keep that in mind.

00:11:22.430 --> 00:11:23.765
So now we have the method.

00:11:23.765 --> 00:11:28.040
So all you need to do use the POSIX client and the URL.

00:11:28.040 --> 00:11:30.500
It will do the process.

00:11:30.500 --> 00:11:32.435
So now we have the completable.

00:11:32.435 --> 00:11:34.460
Let's go back to the face. You are a response to that.

00:11:34.460 --> 00:11:36.810
We have multiple URIs.

00:11:36.970 --> 00:11:42.860
Right? So now I'm going to do is let's try something like this.

00:11:42.860 --> 00:11:45.140
Because now we have a method for a way to failure URLs.

00:11:45.140 --> 00:11:54.980
So, so comfortable future and which will it's the array here, futures.

00:11:55.020 --> 00:11:59.245
So I'm going to use the URIs.

00:11:59.245 --> 00:12:06.340
It's a stream, right anyway, so I'm going to use the stream here, stream dot.

00:12:06.340 --> 00:12:08.695
So I'm going to use the map here.

00:12:08.695 --> 00:12:10.510
So map-like for the function, correct.

00:12:10.510 --> 00:12:12.760
So the URL is my input.

00:12:12.760 --> 00:12:15.850
So, so every DEM that you are a comes into place.

00:12:15.850 --> 00:12:17.650
I'm going to call the Verifit.

00:12:17.650 --> 00:12:18.880
You are a mother with a client.

00:12:18.880 --> 00:12:21.070
So client, which I already have it in the place.

00:12:21.070 --> 00:12:25.870
And the second one is that you or I cut

00:12:25.870 --> 00:12:31.000
it and then I have to count note that response ACE2,

00:12:31.000 --> 00:12:35.560
array and completable feature.

00:12:35.560 --> 00:12:38.230
Yeah, got it.

00:12:38.230 --> 00:12:39.400
So now we have a problem.

00:12:39.400 --> 00:12:41.770
So because we are finally written in the completable future,

00:12:41.770 --> 00:12:43.810
but this is my that is returning of void.

00:12:43.810 --> 00:12:46.105
So what do you need to do in Unit 2?

00:12:46.105 --> 00:12:52.430
Replace the completable feature and it's a void, right?

00:12:53.130 --> 00:12:56.605
Okay, So this will walk.

00:12:56.605 --> 00:12:58.990
So now we have the comparable feature.

00:12:58.990 --> 00:13:05.215
Now all we need to do is just combine all of them and print it correctly.

00:13:05.215 --> 00:13:06.565
It's to that.

00:13:06.565 --> 00:13:13.130
So I'm gonna do is completable feature it all off.

00:13:13.130 --> 00:13:16.325
And just simply provide the features here.

00:13:16.325 --> 00:13:19.535
Features dot join.

00:13:19.535 --> 00:13:21.650
So now when you're under SmartArt,

00:13:21.650 --> 00:13:25.850
we will know whether each and every URLs getting ping to properly.

00:13:25.850 --> 00:13:28.505
Can, we can say that.

00:13:28.505 --> 00:13:33.365
Okay, so all I need is called the Fed, your response.

00:13:33.365 --> 00:13:36.005
Let's save it. And then when I run it, I'm not exile here.

00:13:36.005 --> 00:13:38.585
It is going to work in the first attempt itself.

00:13:38.585 --> 00:13:40.235
So missing edition been here.

00:13:40.235 --> 00:13:43.550
Okay, So here there's a museum and okay,

00:13:43.550 --> 00:13:46.260
so here I have to return.

00:13:49.990 --> 00:13:53.520
Okay, so now let me run it again.

00:13:57.060 --> 00:13:58.990
Oh cool.

00:13:58.990 --> 00:14:02.605
We're lucky. So you've got executed the first m itself.

00:14:02.605 --> 00:14:07.240
So the google.com into verified and good hub is very FET.

00:14:07.240 --> 00:14:11.335
Okay, you might think so how I can validate that it is already valid it.

00:14:11.335 --> 00:14:13.600
So in order to double-check that you have to provide

00:14:13.600 --> 00:14:16.750
some random URL which is not existing at all.

00:14:16.750 --> 00:14:20.080
So what I'm gonna do is I'm going to do one more example here.

00:14:20.080 --> 00:14:23.140
So it's GTPase. And I'm going to put a w,

00:14:23.140 --> 00:14:26.155
w dot x y x y x y.

00:14:26.155 --> 00:14:27.520
I don't take this website,

00:14:27.520 --> 00:14:29.905
it'll be existed, but still I'm one of you to try.

00:14:29.905 --> 00:14:33.025
So what will happen? It had heard enough files.

00:14:33.025 --> 00:14:35.450
So let's run it.

00:14:40.600 --> 00:14:45.965
Yes. See, it is failure because we're not able to communicate the guy.

00:14:45.965 --> 00:14:49.550
We are not able to establish a connection to this particular web services.

00:14:49.550 --> 00:14:51.290
I mean, this website.

00:14:51.290 --> 00:14:53.900
The reason that is that that does not exist,

00:14:53.900 --> 00:14:56.600
but Google and get up that existing there returning to a 100.

00:14:56.600 --> 00:15:00.215
So we are getting this axis response here, failure.

00:15:00.215 --> 00:15:03.635
So what happened when the third parameter comes here?

00:15:03.635 --> 00:15:06.830
It will go to the exception part.

00:15:06.830 --> 00:15:09.875
So then apply will have exception pad.

00:15:09.875 --> 00:15:12.725
So once everything is done, It's kind of if and else.

00:15:12.725 --> 00:15:13.580
Okay.

00:15:13.580 --> 00:15:18.620
So it might look a bit hard the first time because they did the same for me.

00:15:18.620 --> 00:15:20.300
Once you go through one-by-one,

00:15:20.300 --> 00:15:23.420
you'll easily understand what I'm trying to do here.

00:15:23.420 --> 00:15:24.260
Okay?

00:15:24.260 --> 00:15:27.470
So let's see each other next video in different.

00:15:27.470 --> 00:15:30.510
We'll talk about a different Fisher. Thank you.
