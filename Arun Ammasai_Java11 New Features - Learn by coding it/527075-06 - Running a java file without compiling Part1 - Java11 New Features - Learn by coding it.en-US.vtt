WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.580
Hello everyone, welcome back.

00:00:02.580 --> 00:00:05.490
The first feature in Java 11 we're going to talk about

00:00:05.490 --> 00:00:09.315
is how to run a Java file without compiling them.

00:00:09.315 --> 00:00:12.765
Steady, the first feature. First things.

00:00:12.765 --> 00:00:15.180
So now we can render Java file without compelling,

00:00:15.180 --> 00:00:19.080
which means without the Java C. And the next one,

00:00:19.080 --> 00:00:23.790
you can run the file just using Java space,

00:00:23.790 --> 00:00:25.020
the class name dot Java.

00:00:25.020 --> 00:00:26.100
So if you have a Java file,

00:00:26.100 --> 00:00:28.800
read how to do Java C space class name dot Java,

00:00:28.800 --> 00:00:34.340
and then you need to use Java dot class name that's not required anymore.

00:00:34.340 --> 00:00:35.675
End.

00:00:35.675 --> 00:00:40.354
This was implemented as part of that GIP number 330.

00:00:40.354 --> 00:00:44.250
That is a ticket number which is available in the OpenJDK.

00:00:44.290 --> 00:00:46.115
End.

00:00:46.115 --> 00:00:48.154
When you have a multiple classes,

00:00:48.154 --> 00:00:50.300
order matters, not the class name.

00:00:50.300 --> 00:00:51.920
This might little confusing.

00:00:51.920 --> 00:00:55.490
Okay, So take an example normally how we create a Java file.

00:00:55.490 --> 00:00:59.165
When you create a Java file called Hello World,

00:00:59.165 --> 00:01:01.265
you are creating a class called HelloWorld.

00:01:01.265 --> 00:01:05.285
The file needs to be saved as a HelloWorld.java Sarah,

00:01:05.285 --> 00:01:08.765
which means if I are under HelloWorld.java,

00:01:08.765 --> 00:01:11.585
one way the HelloWorld main method will be executed.

00:01:11.585 --> 00:01:15.890
But since Java 11 jasmine changed,

00:01:15.890 --> 00:01:18.110
you can say how early you want,

00:01:18.110 --> 00:01:22.190
but the matter is,

00:01:22.190 --> 00:01:25.325
which is the first class available in the file.

00:01:25.325 --> 00:01:28.565
For example, in a single class file you have a multiple,

00:01:28.565 --> 00:01:30.920
single Jarrod failure or multiple classes.

00:01:30.920 --> 00:01:33.920
So whoever is available in the first place,

00:01:33.920 --> 00:01:35.960
which when the first class which will be executed.

00:01:35.960 --> 00:01:38.330
We'll talk about data. I'm going to show you

00:01:38.330 --> 00:01:41.615
an example to show you how it is exactly working.

00:01:41.615 --> 00:01:43.670
Okay, so this is simple example.

00:01:43.670 --> 00:01:45.455
So Java is jealousy.

00:01:45.455 --> 00:01:51.575
So I'm just, I'm just going to under same phi with simple Java's face, Java.

00:01:51.575 --> 00:01:54.110
Java, which means I'm not compiling them and I'm,

00:01:54.110 --> 00:01:56.805
I'm just directly executing them.

00:01:56.805 --> 00:01:58.360
Right?

00:01:58.360 --> 00:02:00.190
And then a few things which you,

00:02:00.190 --> 00:02:01.990
you need to keep it in mind again.

00:02:01.990 --> 00:02:03.355
So while running a Java file,

00:02:03.355 --> 00:02:04.810
order matters in Java,

00:02:04.810 --> 00:02:06.855
it's not the file name, okay,

00:02:06.855 --> 00:02:09.820
at the same time, and you have a multiple classes.

00:02:09.820 --> 00:02:13.420
The first class by default will be executed.

00:02:13.420 --> 00:02:14.515
End.

00:02:14.515 --> 00:02:15.475
Here is an example.

00:02:15.475 --> 00:02:17.515
I have a class a, class B, class C,

00:02:17.515 --> 00:02:23.005
and Java versus Java C. So that unfold classes.

00:02:23.005 --> 00:02:25.420
So normally when you execute this particular file,

00:02:25.420 --> 00:02:28.400
one legal method available in the Java,

00:02:29.370 --> 00:02:31.870
java C method will be executed.

00:02:31.870 --> 00:02:33.940
But in jonathan the class you will be executed

00:02:33.940 --> 00:02:36.370
because that is available in the first place,

00:02:36.370 --> 00:02:39.705
which mean that is the first class in the entire file.

00:02:39.705 --> 00:02:41.495
It might be a little confusing.

00:02:41.495 --> 00:02:43.910
Let me go back to our Notepad and I'll give you

00:02:43.910 --> 00:02:46.835
an example so it is easy for us to understand.

00:02:46.835 --> 00:02:51.030
So what I'm gonna do is I'm going to open a notepad here.

00:02:52.210 --> 00:02:55.460
So I'm going to do the same thing.

00:02:55.460 --> 00:02:58.655
I'm going to create a class called Java.

00:02:58.655 --> 00:03:01.295
Wo, races.

00:03:01.295 --> 00:03:02.375
Shall I see?

00:03:02.375 --> 00:03:04.940
So let me save the file for now What I'm done,

00:03:04.940 --> 00:03:08.600
I'm gonna do is I'm going to save the file in my user directory.

00:03:08.600 --> 00:03:09.350
Okay?

00:03:09.350 --> 00:03:14.780
I just created a one more folder in my user directory called a taste.

00:03:14.780 --> 00:03:18.335
So I can say the files here.

00:03:18.335 --> 00:03:21.020
So hello world, I mean Java,

00:03:21.020 --> 00:03:23.270
java C dot hello,

00:03:23.270 --> 00:03:25.535
I guess, and now I saved the file.

00:03:25.535 --> 00:03:30.380
So let me create a simple main matter and then we can go for multiple classes.

00:03:30.380 --> 00:03:32.330
Okay, So now what I'm gonna do,

00:03:32.330 --> 00:03:39.845
I'm gonna create a minute that public, static, void main.

00:03:39.845 --> 00:03:47.495
And I'm going to provide a is fundamental here.

00:03:47.495 --> 00:03:55.980
And here I'm going to simply provide system dot out, dot, print LN.

00:03:57.070 --> 00:04:03.860
Simplicity. Welcome to.

00:04:03.860 --> 00:04:06.905
Well I will save it.

00:04:06.905 --> 00:04:10.775
So, so normally what we do,

00:04:10.775 --> 00:04:12.110
just compile them and enjoy them.

00:04:12.110 --> 00:04:13.505
Now, I'm not going to compile them.

00:04:13.505 --> 00:04:15.380
I'm going to directly execute them.

00:04:15.380 --> 00:04:18.035
Okay, so I'm going to open a terminal.

00:04:18.035 --> 00:04:22.850
So the folder which I'm looking for under my directories test file,

00:04:22.850 --> 00:04:27.200
I mean test RFP, CDs face test.

00:04:27.200 --> 00:04:29.660
Okay, so let's put ls here.

00:04:29.660 --> 00:04:34.100
So I have only one file which is Java versus the asi dot Java which I created.

00:04:34.100 --> 00:04:37.010
All right, so now what I'm gonna do, I'm gonna wanna compare them.

00:04:37.010 --> 00:04:41.630
I'm going to directly then the file java space. Jiao Estella.

00:04:41.630 --> 00:04:45.545
See can you see what happened?

00:04:45.545 --> 00:04:48.690
I got welcome to Chapter 11.

00:04:49.060 --> 00:04:51.575
There is no compulsion here.

00:04:51.575 --> 00:04:53.015
Okay. Let me put ls here.

00:04:53.015 --> 00:04:55.535
See there is no class fail at all.

00:04:55.535 --> 00:04:56.555
Okay?

00:04:56.555 --> 00:04:58.370
So in that scenario, what will happen in,

00:04:58.370 --> 00:05:02.195
but even though you, if you have a multiple classes in your Java,

00:05:02.195 --> 00:05:05.660
it will note impact anything it will only

00:05:05.660 --> 00:05:09.905
execute or whoever is available in the first place.

00:05:09.905 --> 00:05:11.690
Here, since I have only one class,

00:05:11.690 --> 00:05:13.880
it is executed Done main method which is available,

00:05:13.880 --> 00:05:15.530
That's our SSL and jealousy.

00:05:15.530 --> 00:05:23.150
Okay, so let's do the same thing using our older versions of Java.

00:05:23.150 --> 00:05:24.725
Okay, So how we can do that?

00:05:24.725 --> 00:05:32.795
So I want to compile them using library in Java,

00:05:32.795 --> 00:05:35.510
java virtual machine under the ocean machinery,

00:05:35.510 --> 00:05:41.765
how would we have a JDK? Jdk.

00:05:41.765 --> 00:05:45.425
Let me try with delegate in JDK.

00:05:45.425 --> 00:05:48.810
So there you have a home,

00:05:49.240 --> 00:05:54.425
contents, home, and you'll have a bin folder there.

00:05:54.425 --> 00:05:58.985
And then you have Java C added to the Java SE here.

00:05:58.985 --> 00:06:01.910
And then I'm gonna do that. Yeah, Ours is jealousy.

00:06:01.910 --> 00:06:07.190
So now I ran the same Java file with a normal way, normal compiler.

00:06:07.190 --> 00:06:08.555
Now let's do ls here.

00:06:08.555 --> 00:06:12.620
Now you should be able to see Java versus Java.

00:06:12.620 --> 00:06:15.260
I see dot class fit. So let me remove the class fail,

00:06:15.260 --> 00:06:18.110
Search dot-dot-dot, class fail.

00:06:18.110 --> 00:06:19.745
So now what I'm trying to do,

00:06:19.745 --> 00:06:22.835
so I'm trying to run the file without the Java C,

00:06:22.835 --> 00:06:25.220
which means direct execution like him JavaScript.

00:06:25.220 --> 00:06:27.395
But now I'm running energy to get n,

00:06:27.395 --> 00:06:31.430
which will not work eventually because it says there is no classical existing.

00:06:31.430 --> 00:06:33.020
So in order to execute a Java file,

00:06:33.020 --> 00:06:35.855
you need to compile them first and then Daron them.

00:06:35.855 --> 00:06:37.985
So let me do that again.

00:06:37.985 --> 00:06:40.370
So Java C spaces,

00:06:40.370 --> 00:06:42.185
now I have compiled the code,

00:06:42.185 --> 00:06:43.595
so now I can execute the code.

00:06:43.595 --> 00:06:45.260
So that is how it will walk.

00:06:45.260 --> 00:06:47.450
Let's say in Jackson's dam, in till Jarrod,

00:06:47.450 --> 00:06:50.945
then you have to compare an execute the code and academic 11.

00:06:50.945 --> 00:06:52.040
You don't have to.

00:06:52.040 --> 00:06:53.840
You can simply using the Java,

00:06:53.840 --> 00:06:57.170
java executed to execute the Java file, not the class fail.

00:06:57.170 --> 00:06:58.850
Okay, So in the next video,

00:06:58.850 --> 00:07:02.550
I'm gonna show the same example with a multiple classes.
