WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.535
Hello everyone, Welcome back.

00:00:02.535 --> 00:00:07.125
The next feature we're gonna talk about is the changes in the path interface.

00:00:07.125 --> 00:00:10.350
Basically we need to know why we need a path in the first place.

00:00:10.350 --> 00:00:14.720
You're trying to read a file and it is located in a specific location.

00:00:14.720 --> 00:00:16.490
So you want to read the file.

00:00:16.490 --> 00:00:19.910
So in order to read the file unit to provide the path.

00:00:19.910 --> 00:00:22.595
So that is where the pod comes into place.

00:00:22.595 --> 00:00:27.755
And this part is an interface which is introduced as part of Java 7.

00:00:27.755 --> 00:00:29.030
But before Java 7,

00:00:29.030 --> 00:00:31.610
there are other ways we can read the file using,

00:00:31.610 --> 00:00:32.930
we can use a scanner,

00:00:32.930 --> 00:00:36.245
we can use file input reader or new FileReader,

00:00:36.245 --> 00:00:37.550
or you can use a scanner.

00:00:37.550 --> 00:00:38.150
Also.

00:00:38.150 --> 00:00:40.040
In, there are different ways.

00:00:40.040 --> 00:00:42.875
We have u to the packages to read the file.

00:00:42.875 --> 00:00:46.070
But this is an efficient way as of now.

00:00:46.070 --> 00:00:49.430
So let's talk about the path.

00:00:49.430 --> 00:00:53.480
So there are two new static methods has been added to retrieve

00:00:53.480 --> 00:00:58.400
the part of a specific file in a convenient way.

00:00:58.400 --> 00:01:03.050
The first one is the method called off my thought.

00:01:03.050 --> 00:01:06.695
So automata, which will accept two input parameters.

00:01:06.695 --> 00:01:08.795
So the first input parameters the string,

00:01:08.795 --> 00:01:11.060
and the second is a string parameter,

00:01:11.060 --> 00:01:13.085
but 87 variable arguments,

00:01:13.085 --> 00:01:17.240
which means you can pass any number of variables.

00:01:17.240 --> 00:01:19.730
So it might be looks different,

00:01:19.730 --> 00:01:22.550
but when we talk about the example,

00:01:22.550 --> 00:01:25.145
we will get to know even much better.

00:01:25.145 --> 00:01:26.960
So the three dots,

00:01:26.960 --> 00:01:30.230
which means that is a number of arguments.

00:01:30.230 --> 00:01:31.670
It can be any number of arguments,

00:01:31.670 --> 00:01:37.230
it can be 0 or it can be multiples.

00:01:37.230 --> 00:01:40.540
So the next month down, again,

00:01:40.540 --> 00:01:44.170
it's going to be offer that was a different kind of input.

00:01:44.170 --> 00:01:46.705
The input is going to be URI.

00:01:46.705 --> 00:01:49.735
So in the URI, how we are going to treat the path.

00:01:49.735 --> 00:01:54.460
So we're going to talk about a simple program to execute in a both ways.

00:01:54.460 --> 00:01:57.760
So using the first method and using the second one.

00:01:57.760 --> 00:02:00.729
So let's go back to our ID.

00:02:00.729 --> 00:02:02.665
First thing, let's create a package.

00:02:02.665 --> 00:02:05.440
So new package.

00:02:05.440 --> 00:02:10.585
And here I'm going to name the meso path changes.

00:02:10.585 --> 00:02:13.610
And I'm going to create a class here.

00:02:15.720 --> 00:02:24.410
File path example, the presentation mode.

00:02:25.860 --> 00:02:29.420
Okay, So let me create a main method.

00:02:30.450 --> 00:02:35.125
I guess over the file is you're trying to do. We're trying to read.

00:02:35.125 --> 00:02:37.870
So since from the beginning we are trying to read

00:02:37.870 --> 00:02:40.890
a file which is available in my desktop, right?

00:02:40.890 --> 00:02:43.480
So let's try to read them.

00:02:43.480 --> 00:02:45.220
So normally how we can provide,

00:02:45.220 --> 00:02:47.560
so this is how we'll get a path.

00:02:47.560 --> 00:02:54.790
So this part is specifically available in the path dot n IO package.

00:02:54.790 --> 00:02:58.960
So n i o dot file dotplot packet is not out of file IO.

00:02:58.960 --> 00:03:03.740
It is a n i o dot file dot, dot, dot. Here.

00:03:03.740 --> 00:03:07.340
I'm going to use the bad dot,

00:03:07.340 --> 00:03:08.660
as I mentioned often at that.

00:03:08.660 --> 00:03:12.305
Okay. Let let me let me provide various may file is located.

00:03:12.305 --> 00:03:20.630
So my file is located users and my username is Ireland and desktop.

00:03:20.630 --> 00:03:25.680
And then the file name is test dot dx dy.

00:03:25.900 --> 00:03:29.300
So this is how we used to read the path.

00:03:29.300 --> 00:03:31.460
Okay, so now the same thing.

00:03:31.460 --> 00:03:35.525
Can we provide it into multiple sequences,

00:03:35.525 --> 00:03:38.570
which means let me rewrite it again.

00:03:38.570 --> 00:03:44.405
So this is a previous way and now I'm going to tell you how we can do this in Java 11.

00:03:44.405 --> 00:03:48.590
So part of me that just take a look at this one.

00:03:48.590 --> 00:03:50.510
So the first one is the URL method,

00:03:50.510 --> 00:03:52.400
that is an extra example which we'll discuss.

00:03:52.400 --> 00:03:54.305
And the second method, the string.

00:03:54.305 --> 00:03:57.350
The first string and the more string mostly

00:03:57.350 --> 00:04:01.400
means which will accept a variable arguments have you can you see three dots here,

00:04:01.400 --> 00:04:03.260
which means multiple arguments.

00:04:03.260 --> 00:04:05.030
So I'm going to use this method.

00:04:05.030 --> 00:04:08.120
So first, input is going to be,

00:04:08.120 --> 00:04:10.205
I'm going to take one lead this user.

00:04:10.205 --> 00:04:11.960
So you can simply,

00:04:11.960 --> 00:04:15.620
you can multiply your URL or

00:04:15.620 --> 00:04:19.310
you can segregate your URL and you can provide the mess of multiple parameter.

00:04:19.310 --> 00:04:21.035
So I'm going to provide something like,

00:04:21.035 --> 00:04:27.020
so the first parameter is what is the path I'm in the location?

00:04:27.020 --> 00:04:31.700
So user, when you have a multiple users unit is specifically user, which user?

00:04:31.700 --> 00:04:34.865
And then the second parameter is going to be which user.

00:04:34.865 --> 00:04:36.665
So I'm going to use Arun.

00:04:36.665 --> 00:04:43.144
So the n, then the similar way I can provide different things like desktop.

00:04:43.144 --> 00:04:50.645
And then I can use a one more parameter which is specifying my filename, test.txt.

00:04:50.645 --> 00:04:52.685
Have you seen the difference here?

00:04:52.685 --> 00:04:57.395
The first parameter is going to be either one part of the entire URL.

00:04:57.395 --> 00:05:01.010
And the second, third unfold everything is a mode parameter,

00:05:01.010 --> 00:05:03.230
which means the variable arguments.

00:05:03.230 --> 00:05:06.155
So this is how the changes has been done.

00:05:06.155 --> 00:05:08.750
So you can directly provide the URL or you can

00:05:08.750 --> 00:05:11.735
segregate them and you can pass them as a parameter.

00:05:11.735 --> 00:05:13.790
Okay, let's print a path here.

00:05:13.790 --> 00:05:16.880
So as out in the path,

00:05:16.880 --> 00:05:19.220
okay, You might think whether it is working or not.

00:05:19.220 --> 00:05:22.085
So we need to measure whether the file exists.

00:05:22.085 --> 00:05:23.495
The path is Xist or not.

00:05:23.495 --> 00:05:29.220
So we can find out that using file.txt method, sorry,

00:05:31.990 --> 00:05:35.040
files dot

00:05:42.220 --> 00:05:46.955
files dot exist.

00:05:46.955 --> 00:05:50.720
So there exist a specific path,

00:05:50.720 --> 00:05:52.625
the path which I already created.

00:05:52.625 --> 00:05:55.310
So which will return a boolean.

00:05:55.310 --> 00:05:59.285
Boolean exist.

00:05:59.285 --> 00:06:01.970
So if I print the existing here,

00:06:01.970 --> 00:06:04.610
we will know whether they

00:06:04.610 --> 00:06:13.410
exist or not exist.

00:06:15.820 --> 00:06:17.840
So let me run this.

00:06:17.840 --> 00:06:20.010
The first way of doing that.

00:06:21.880 --> 00:06:24.320
See the file is existing,

00:06:24.320 --> 00:06:27.500
so which will return a true and the path is user.

00:06:27.500 --> 00:06:31.530
I don't desktop taste dot TXT.

00:06:32.980 --> 00:06:38.570
Got it. Okay, So there's a first way of approaching the path.

00:06:38.570 --> 00:06:43.055
And the second one is we are going to use a URI to create the path.

00:06:43.055 --> 00:06:45.140
So let's talk about that in the next video.

00:06:45.140 --> 00:06:46.740
Thank you.
