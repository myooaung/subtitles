WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.355
Hello everyone, Welcome back.

00:00:02.355 --> 00:00:06.990
In the last example we discussed your vote how the HTTP client will work.

00:00:06.990 --> 00:00:11.250
Because it was inside incubator module in Java 11,

00:00:11.250 --> 00:00:12.645
it is in a different module.

00:00:12.645 --> 00:00:16.275
Okay, So we have a sample example and we go through everything,

00:00:16.275 --> 00:00:19.335
creating a client and making a request and response.

00:00:19.335 --> 00:00:22.410
And basically the response as a string and raising

00:00:22.410 --> 00:00:26.070
the response to the fire bay discussed all of the things in the previous example.

00:00:26.070 --> 00:00:27.810
So now what we're gonna do,

00:00:27.810 --> 00:00:29.520
we're trying to create the same,

00:00:29.520 --> 00:00:32.980
a similar example or the same example using Java 11.

00:00:32.980 --> 00:00:35.555
But you need to keep one thing in your mind.

00:00:35.555 --> 00:00:37.820
So here it is, DAD get an incubator model.

00:00:37.820 --> 00:00:41.315
The reason the model is not fully functional,

00:00:41.315 --> 00:00:43.505
which meant is not completed yet.

00:00:43.505 --> 00:00:46.190
So that is why it is available under the incubator model.

00:00:46.190 --> 00:00:48.470
But in Java 11, it was standardized.

00:00:48.470 --> 00:00:52.040
It is available under Java dotnet module.

00:00:52.040 --> 00:00:55.790
Okay, So what I'm gonna do is I'm going to create a new package here.

00:00:55.790 --> 00:00:58.039
No package.

00:00:58.039 --> 00:01:01.130
So HTTP client.

00:01:01.130 --> 00:01:03.500
So under the hashtag decline,

00:01:03.500 --> 00:01:06.695
I'm going to create a new class here TO class.

00:01:06.695 --> 00:01:17.495
So HTTP 2 example on Java 11 for the presentation mode.

00:01:17.495 --> 00:01:21.170
Okay, The first thing first, let me create a main method here.

00:01:21.170 --> 00:01:23.180
So what are we going to do?

00:01:23.180 --> 00:01:27.200
So I'm going to simulate the previous example using Java 11.

00:01:27.200 --> 00:01:33.560
So what I'm gonna do, I'm gonna create a different method point.

00:01:33.560 --> 00:01:35.810
When we got The reason why I'm creating a numerator,

00:01:35.810 --> 00:01:38.450
I'm going to create a method for synchronous call,

00:01:38.450 --> 00:01:41.540
and I'm gonna get one more method for how we can do the same thing using

00:01:41.540 --> 00:01:47.030
asynchronous call, synchronous call.

00:01:47.030 --> 00:01:48.785
So this is synchronous call matter.

00:01:48.785 --> 00:01:49.925
So the first thing first,

00:01:49.925 --> 00:01:51.305
we need a hashtable client.

00:01:51.305 --> 00:01:52.190
Great.

00:01:52.190 --> 00:01:54.905
So let's try and look for UDP client.

00:01:54.905 --> 00:01:56.675
And I don't get any reference here,

00:01:56.675 --> 00:01:58.790
which means there is something wrong.

00:01:58.790 --> 00:02:00.740
The thing is java.net,

00:02:00.740 --> 00:02:03.155
it's not a default base package.

00:02:03.155 --> 00:02:04.910
It is available in a different module.

00:02:04.910 --> 00:02:07.655
So in order to visible are make visible,

00:02:07.655 --> 00:02:10.100
we have to go back to our module config file and

00:02:10.100 --> 00:02:12.800
then you need to make sure require Java dotnet.

00:02:12.800 --> 00:02:14.885
They got that is where we have our modules.

00:02:14.885 --> 00:02:18.155
So let's go back to our model info.

00:02:18.155 --> 00:02:20.495
So it's available under our project.

00:02:20.495 --> 00:02:23.975
And here you need two requires,

00:02:23.975 --> 00:02:26.360
java.net dot and HTTP.

00:02:26.360 --> 00:02:27.455
And let's save it.

00:02:27.455 --> 00:02:29.060
Let's come back to our example.

00:02:29.060 --> 00:02:31.220
Go back to the presentation mode.

00:02:31.220 --> 00:02:33.590
Okay, So now let me try that.

00:02:33.590 --> 00:02:35.150
Now we've got the reference,

00:02:35.150 --> 00:02:36.800
so that's typically find is available.

00:02:36.800 --> 00:02:39.890
So which means, So once the model has been added,

00:02:39.890 --> 00:02:41.480
you should be able to see the reference.

00:02:41.480 --> 00:02:42.815
So now I have a client.

00:02:42.815 --> 00:02:44.240
So what basically we will do,

00:02:44.240 --> 00:02:47.540
so that actually reclined which hasn't builder.

00:02:47.540 --> 00:02:51.785
So which will create an instance of a request, right?

00:02:51.785 --> 00:02:56.915
So what I'm gonna do is I'm going to use the Azure glen new build and build matter.

00:02:56.915 --> 00:02:59.795
But not only that,

00:02:59.795 --> 00:03:01.880
I had to provide some other information here.

00:03:01.880 --> 00:03:05.615
So for example, you can set the connection timeout also.

00:03:05.615 --> 00:03:08.300
So how we can do that? So once a builder is available,

00:03:08.300 --> 00:03:11.015
then what you can do is before using the build method,

00:03:11.015 --> 00:03:16.490
you can using one more method called connection timeout.

00:03:16.490 --> 00:03:21.270
So here you can provide that duration.

00:03:21.370 --> 00:03:25.460
So duration dot, you're going to use the All seconds

00:03:25.460 --> 00:03:28.550
my dark so you can provide a specific timeframe.

00:03:28.550 --> 00:03:30.950
So I want to wait until 10 seconds then it has

00:03:30.950 --> 00:03:34.595
two timed out or I can keep it something like that.

00:03:34.595 --> 00:03:38.780
Connection timeout and mailed. Okay.

00:03:38.780 --> 00:03:41.495
Now, we had a client in place.

00:03:41.495 --> 00:03:42.545
Right?

00:03:42.545 --> 00:03:45.305
So the next thing which we required,

00:03:45.305 --> 00:03:47.150
if there is one trait, it's a fun.

00:03:47.150 --> 00:03:51.515
Now what I'm gonna do, I'm gonna create a HTTP response.

00:03:51.515 --> 00:03:55.265
So I'm going to keep it as a response here.

00:03:55.265 --> 00:03:59.465
Response for now, I'm going to keep it as a null because I,

00:03:59.465 --> 00:04:01.730
let's implement the logic and then we'll use it.

00:04:01.730 --> 00:04:04.415
So I'm going to create a try and catch block.

00:04:04.415 --> 00:04:12.170
So exception and it print stack trace.

00:04:12.170 --> 00:04:14.045
So now we have the code already.

00:04:14.045 --> 00:04:17.810
Okay, so now what do we need to do? In Brian?

00:04:17.810 --> 00:04:20.000
You're right, and I don't know right at the end point.

00:04:20.000 --> 00:04:21.920
So what we can do the previous example,

00:04:21.920 --> 00:04:24.140
we had the endpoint ID and use that.

00:04:24.140 --> 00:04:28.280
So you can copy this end point or you can directly

00:04:28.280 --> 00:04:32.195
copy the entire thing you're going to see. And global.

00:04:32.195 --> 00:04:40.385
And here you can provide the endpoint control V. Sorry,

00:04:40.385 --> 00:04:42.260
I think it's not copied properly.

00:04:42.260 --> 00:04:48.950
So Control C and Control V. Got it.

00:04:48.950 --> 00:04:50.570
So now we've got the endpoint URL.

00:04:50.570 --> 00:04:54.080
Let's make it as a end point.

00:04:54.080 --> 00:04:55.100
You are.

00:04:55.100 --> 00:04:57.290
So now I have the URL in place.

00:04:57.290 --> 00:05:02.345
So just make sure one thing I'm going to try using the same goodness we're here.

00:05:02.345 --> 00:05:07.745
So once you have the endpoint URL unit to create a URI,

00:05:07.745 --> 00:05:13.200
so Java dotnet, and I'm going to provide a URL.

00:05:14.530 --> 00:05:16.980
So.

00:05:16.990 --> 00:05:20.060
Here, right? Dot.

00:05:20.060 --> 00:05:22.415
So what basically it does,

00:05:22.415 --> 00:05:25.685
it will use the endpoint URL and we'll create a URI.

00:05:25.685 --> 00:05:32.240
So which one which we can use inside our request.

00:05:32.240 --> 00:05:34.040
Okay, so now we have the endpoint URL,

00:05:34.040 --> 00:05:36.440
you thin pen, you're likely to do URI.

00:05:36.440 --> 00:05:42.120
So now let's create a request HTTP request,

00:05:43.720 --> 00:05:47.240
request quilt.

00:05:47.240 --> 00:05:49.400
And now let's try that.

00:05:49.400 --> 00:05:53.360
So which means that we need to use in HTTP request,

00:05:53.360 --> 00:05:55.100
we have the new builder, right?

00:05:55.100 --> 00:05:59.315
So we need to use that new version, sorry, http,

00:05:59.315 --> 00:06:08.360
request dot, new, build up the one which are looking for the first method.

00:06:08.360 --> 00:06:10.835
And then what do we need to do?

00:06:10.835 --> 00:06:12.290
So once the builder is ready,

00:06:12.290 --> 00:06:19.610
we need to provide the URL and URL like suburbia URL as input.

00:06:19.610 --> 00:06:24.335
So you already created so which is available in line number 21.

00:06:24.335 --> 00:06:26.810
Okay, so then the URI is built.

00:06:26.810 --> 00:06:30.380
Then what we need to do, we can use the build method to build a request.

00:06:30.380 --> 00:06:32.285
So now we have the client,

00:06:32.285 --> 00:06:33.500
we have the endpoint URL.

00:06:33.500 --> 00:06:35.810
Using the endpoint, we have the URI also,

00:06:35.810 --> 00:06:39.125
and also I had the request in place.

00:06:39.125 --> 00:06:41.030
So now all I need to do yes.

00:06:41.030 --> 00:06:45.859
Just pause the request and receive the response.

00:06:45.859 --> 00:06:48.335
So response.

00:06:48.335 --> 00:06:54.830
We all know that the client is the one is going to be make a call.

00:06:54.830 --> 00:06:57.290
So I'm going to use this in my data.

00:06:57.290 --> 00:07:01.130
So cinema that will accept your request at the same time.

00:07:01.130 --> 00:07:02.720
It will act so the body handler,

00:07:02.720 --> 00:07:07.010
so basically what kind of respond to you wonder, done, right?

00:07:07.010 --> 00:07:09.065
So cent, and first thing,

00:07:09.065 --> 00:07:10.790
I'm going to pause it here.

00:07:10.790 --> 00:07:16.655
And the second is going to be a high GDP response dot.

00:07:16.655 --> 00:07:18.590
We all know that what it should be.

00:07:18.590 --> 00:07:20.495
So body handless.

00:07:20.495 --> 00:07:23.390
And I wonder Dasa,

00:07:23.390 --> 00:07:31.340
string sorting, body handler dot of string,

00:07:31.340 --> 00:07:34.625
type. It. Got it.

00:07:34.625 --> 00:07:39.620
So now all we need to do is just print the response time, see the outcome.

00:07:39.620 --> 00:07:45.350
So now what I'm gonna do is let's print it out.

00:07:45.350 --> 00:07:48.395
And so first let's see what is the status code.

00:07:48.395 --> 00:07:49.880
If status code is 200,

00:07:49.880 --> 00:07:51.725
which means it's a successful one, right?

00:07:51.725 --> 00:08:00.530
So status code is available inside the response dot status code,

00:08:00.530 --> 00:08:02.075
which is good, right?

00:08:02.075 --> 00:08:09.680
And then nets check what are the headers here is not required.

00:08:09.680 --> 00:08:12.770
But anyway, let's see what is inside behaviors.

00:08:12.770 --> 00:08:16.580
So if you want to get the head does you're gonna do use the response.

00:08:16.580 --> 00:08:18.020
And under that is one.

00:08:18.020 --> 00:08:20.075
Do you have a head does in dot.

00:08:20.075 --> 00:08:24.305
You can use the old values method to print the list.

00:08:24.305 --> 00:08:26.060
So what are the parameter bonobos?

00:08:26.060 --> 00:08:30.785
I'm going to pass the content type, content hyphen type.

00:08:30.785 --> 00:08:32.945
It'll give you what are the type of content.

00:08:32.945 --> 00:08:37.070
And then we have to print the body which contains the output data.

00:08:37.070 --> 00:08:39.230
So let's print that as well.

00:08:39.230 --> 00:08:48.830
So I'm going to print the body and response dot body.

00:08:48.830 --> 00:08:51.155
So now we have everything in place.

00:08:51.155 --> 00:08:57.300
All we need to do is just call the method and see the outcome.

00:08:59.290 --> 00:09:02.705
So synchronous call, so good.

00:09:02.705 --> 00:09:04.130
Okay, so now we have everything in place.

00:09:04.130 --> 00:09:06.590
Let's execute the code and then see what is the outcome

00:09:06.590 --> 00:09:14.970
of content type could right-click and just run it once.

00:09:16.120 --> 00:09:20.370
Okay, and closer to L and number 30.

00:09:22.810 --> 00:09:26.435
Okay, So where is unclothed through here?

00:09:26.435 --> 00:09:28.340
Okay. It's my bad.

00:09:28.340 --> 00:09:29.795
It's supposed to be double-checked, right.

00:09:29.795 --> 00:09:32.405
So okay, got it.

00:09:32.405 --> 00:09:35.970
So save it and run it one more time.

00:09:42.820 --> 00:09:45.635
See, we've got the status code.

00:09:45.635 --> 00:09:47.760
200.

00:09:47.860 --> 00:09:50.825
Status code is 200 words application.

00:09:50.825 --> 00:09:52.220
Our header between the content Thai,

00:09:52.220 --> 00:09:54.965
we did not embody the JSON response.

00:09:54.965 --> 00:09:56.420
And if you take a look at the body,

00:09:56.420 --> 00:09:58.490
it is a JSON response.

00:09:58.490 --> 00:10:01.550
So we've got D argument and

00:10:01.550 --> 00:10:05.315
the head deaths and all the information which is available in the response body.

00:10:05.315 --> 00:10:08.060
Okay, this is pretty much the same outcome from the previous example.

00:10:08.060 --> 00:10:10.220
Not a pretty much is the same, same output anyway,

00:10:10.220 --> 00:10:12.770
the API call is the same how we are calling them.

00:10:12.770 --> 00:10:15.450
That is a different thing, right?

00:10:16.480 --> 00:10:19.670
So I'm going to try the same example in

00:10:19.670 --> 00:10:22.250
a different way because now we try a synchronous call, right?

00:10:22.250 --> 00:10:27.050
I'm gonna do the same thing using ASM goodness called in the next video.

00:10:27.050 --> 00:10:28.650
Thank you.
