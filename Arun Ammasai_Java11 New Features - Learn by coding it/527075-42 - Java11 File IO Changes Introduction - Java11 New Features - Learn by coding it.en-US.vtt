WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.050 --> 00:00:02.670
Hello everyone, Welcome back.

00:00:02.670 --> 00:00:05.415
As part of Java 11 new features.

00:00:05.415 --> 00:00:08.160
The last one, we are going to discuss a boat.

00:00:08.160 --> 00:00:11.445
There are few changes in the IO package.

00:00:11.445 --> 00:00:16.080
So basically it's about all streams.

00:00:16.080 --> 00:00:19.290
Okay, so when we create a stream as another,

00:00:19.290 --> 00:00:21.120
when you're passing your null data into

00:00:21.120 --> 00:00:24.525
a stream contract that we will end up with an open-air exception.

00:00:24.525 --> 00:00:31.500
So what I'm trying to say is before Java 11 initialize a stream with another value,

00:00:31.500 --> 00:00:38.280
it's not possible because we will end up with a NullPointerException.

00:00:38.280 --> 00:00:44.120
But in Java, in Java 11, we can do that.

00:00:44.120 --> 00:00:46.175
The way we can do that,

00:00:46.175 --> 00:00:48.275
there are a few method has been introduced.

00:00:48.275 --> 00:00:53.599
So we can make use of that methods and we can create natural streams.

00:00:53.599 --> 00:00:56.330
So but what isn't analyst team?

00:00:56.330 --> 00:00:59.570
So there are situations where we use method requires

00:00:59.570 --> 00:01:02.360
a stream parameters and we want to

00:01:02.360 --> 00:01:05.780
process the parameters even though if you know that is a null value,

00:01:05.780 --> 00:01:09.365
because the value might be rendered some point later.

00:01:09.365 --> 00:01:10.355
Okay?

00:01:10.355 --> 00:01:16.235
So there are four methods has been added to this shame,

00:01:16.235 --> 00:01:18.965
where we can use them when you're creating a stream,

00:01:18.965 --> 00:01:21.875
it can be created as a null string.

00:01:21.875 --> 00:01:27.215
The first one, now input stream and the similar way,

00:01:27.215 --> 00:01:33.170
OutputStream, end, reader, malware, end this.

00:01:33.170 --> 00:01:36.920
Similarly, we can use the Nile red dress.

00:01:36.920 --> 00:01:41.015
Well, so what we are going to do right now,

00:01:41.015 --> 00:01:43.265
I'm going to create a simple program,

00:01:43.265 --> 00:01:46.310
and I'm going to show you how we can make

00:01:46.310 --> 00:01:50.405
use of these methods and we can implement some logic.

00:01:50.405 --> 00:01:53.450
And we'll talk about how it was existing before and

00:01:53.450 --> 00:01:56.615
how we'd side it will be modified in Zhao element.

00:01:56.615 --> 00:02:00.275
Okay, so let's go back to our ID.

00:02:00.275 --> 00:02:05.750
So let's open your ID here into okay,

00:02:05.750 --> 00:02:07.640
So let me create a new package here.

00:02:07.640 --> 00:02:09.635
That's what we always do.

00:02:09.635 --> 00:02:13.580
So package, so if features, it is going to be I0.

00:02:13.580 --> 00:02:17.060
So I'm going to create a new class in that,

00:02:17.060 --> 00:02:20.160
but it'll package and the class name is going to be.

00:02:21.850 --> 00:02:23.840
So it can be anything, right?

00:02:23.840 --> 00:02:27.320
So maybe I can do Java.

00:02:27.320 --> 00:02:34.340
Second. Okay, Control N.

00:02:34.340 --> 00:02:37.775
Okay, so here right-click again, new Java class.

00:02:37.775 --> 00:02:38.870
Okay, got it.

00:02:38.870 --> 00:02:43.530
So Java 11, I will change this.

00:02:45.790 --> 00:02:50.555
Okay, let me go back to the presentation mode.

00:02:50.555 --> 00:02:54.155
The first thing first, let me create a main method.

00:02:54.155 --> 00:02:55.685
Got it.

00:02:55.685 --> 00:02:58.280
Okay, so what else we're going to do?

00:02:58.280 --> 00:03:01.730
So first, let me see how it can be done before Java 11.

00:03:01.730 --> 00:03:06.020
I, let me give you a simple, very simple example using maybe,

00:03:06.020 --> 00:03:07.505
let's use some simpler.

00:03:07.505 --> 00:03:08.900
Maybe we can use string, read it.

00:03:08.900 --> 00:03:13.140
Okay? So what I'm gonna do is I'm going to use a reader here.

00:03:13.990 --> 00:03:20.720
Reader. So we used to create coding, something like that.

00:03:20.720 --> 00:03:21.980
What I'm gonna do right now.

00:03:21.980 --> 00:03:26.360
So this is how we normally do the coding in pretty much most of the scenarios.

00:03:26.360 --> 00:03:34.410
So the reader, It's available in the IO package inch reader.

00:03:34.630 --> 00:03:37.385
So for now I'm going to keep it as another

00:03:37.385 --> 00:03:40.505
because we will create a try and a catch block.

00:03:40.505 --> 00:03:42.650
And then you might have,

00:03:42.650 --> 00:03:44.390
you know what I'm gonna do right now.

00:03:44.390 --> 00:03:49.040
So this is what we normally do the CT In traditional way.

00:03:49.040 --> 00:03:51.920
So E dot winch type person here.

00:03:51.920 --> 00:03:55.189
What we will do, we are going to use this trader

00:03:55.189 --> 00:03:59.000
and we're going to create a new what kind of return which we are looking for.

00:03:59.000 --> 00:04:00.965
I lead a string, read it.

00:04:00.965 --> 00:04:05.730
So you can play with any kind of data here, okay, hello.

00:04:06.640 --> 00:04:09.425
This is how we used to do.

00:04:09.425 --> 00:04:11.270
And you can try,

00:04:11.270 --> 00:04:15.995
let me read that data in AI is equal.

00:04:15.995 --> 00:04:18.290
So reader dot rate,

00:04:18.290 --> 00:04:21.800
so which will give you the byte data.

00:04:21.800 --> 00:04:24.110
So S out.

00:04:24.110 --> 00:04:27.500
So I'm going to print I.

00:04:27.500 --> 00:04:29.970
So let me run this.

00:04:31.540 --> 00:04:35.120
So we get something like 72,

00:04:35.120 --> 00:04:43.445
which means it's a byte data for the Hajj bagasse to read character by character,

00:04:43.445 --> 00:04:44.885
okay, if you want to print the value,

00:04:44.885 --> 00:04:47.660
what you can simply do is you can type cast it to car,

00:04:47.660 --> 00:04:52.595
and then you should be able to see what is the appropriate data.

00:04:52.595 --> 00:04:55.895
Say it's a height, which means the first one.

00:04:55.895 --> 00:04:58.670
Okay, So this is how we normally does.

00:04:58.670 --> 00:04:59.990
I'm just giving a simple example.

00:04:59.990 --> 00:05:02.735
Normally will use file input stream

00:05:02.735 --> 00:05:06.650
or file output stream that are different kinds of scenarios.

00:05:06.650 --> 00:05:11.525
And if you pass null here, what will happen?

00:05:11.525 --> 00:05:17.840
It will throw a NullPointerException when you're trying to read the data, right?

00:05:17.840 --> 00:05:22.430
So now what I'm gonna do is I'm going to comment out this code or yeah,

00:05:22.430 --> 00:05:23.825
let's comment out this code.

00:05:23.825 --> 00:05:28.100
So what I'm gonna do is I'm going to create a method which

00:05:28.100 --> 00:05:32.375
will lead the stream data using null, null stream reader.

00:05:32.375 --> 00:05:34.805
So okay, let me create a new method here.

00:05:34.805 --> 00:05:37.370
Okay, So let's get into our numerator in the next video.

00:05:37.370 --> 00:05:38.910
Thank you.
