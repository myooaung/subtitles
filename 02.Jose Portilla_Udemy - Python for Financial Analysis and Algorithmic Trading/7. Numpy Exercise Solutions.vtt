WEBVTT
1
00:00:05.390 --> 00:00:09.110
Welcome back everyone to the solutions lecture for the umpire exercises.

2
00:00:09.110 --> 00:00:11.310
Let's go to the notebook and go through the solutions.

3
00:00:11.540 --> 00:00:16.470
OK here I am at the numpad exercises notebook the very first task was the important umpires.

4
00:00:16.940 --> 00:00:21.260
We went through that in the previous lecture so hopefully figure that out next was to create an array

5
00:00:21.350 --> 00:00:23.370
of 10 zeros.

6
00:00:23.490 --> 00:00:27.670
Remember that you can just say and zeros and then call 10 here.

7
00:00:27.680 --> 00:00:29.750
That creates an array of 10 zeros.

8
00:00:29.750 --> 00:00:31.100
Let's zoom in one more level here.

9
00:00:31.140 --> 00:00:32.420
We can really see it.

10
00:00:32.570 --> 00:00:34.810
Next was to create an array of 10 ones.

11
00:00:34.820 --> 00:00:40.890
So one way to do that is just say and P the ones shift then turn.

12
00:00:40.940 --> 00:00:46.050
And then you have the array of 10 ones the next one is create an array of 10 fives.

13
00:00:46.050 --> 00:00:47.940
Now obviously there's no MP that 5s.

14
00:00:47.940 --> 00:00:49.080
Boy you can do just say.

15
00:00:49.080 --> 00:00:51.080
And that one's 10.

16
00:00:51.210 --> 00:00:53.930
And then use broadcasting to multiply it by five.

17
00:00:54.000 --> 00:00:56.550
And there you have your array of 10 5s.

18
00:00:57.530 --> 00:01:01.090
The next question was create an array of the integers from 10 to 50.

19
00:01:01.100 --> 00:01:08.540
So the way we can do that is say p a range and then we want to go from 10 to 51 because we want to get

20
00:01:08.540 --> 00:01:11.340
one extra essence who actually want 50 included.

21
00:01:11.450 --> 00:01:15.950
And this sort of formatting here is just because I'm zoomed in so much if I zoom out you'll see the

22
00:01:15.950 --> 00:01:17.430
format starts to fix itself.

23
00:01:17.580 --> 00:01:24.410
OK let's zoom back in the next one was create an array of all the even integers from 10 to 50 so that's

24
00:01:24.410 --> 00:01:30.830
easy with unpure range you just need to say 10:51 and then specify that you want the step size to be

25
00:01:30.830 --> 00:01:31.230
2.

26
00:01:31.370 --> 00:01:36.040
And then you have the array 10:12 etc. all the way to 50.

27
00:01:36.060 --> 00:01:40.140
Next we wanted to create a three by three matrix of values ranging from zero to 8.

28
00:01:40.140 --> 00:01:42.470
You can see here we had zero to eight.

29
00:01:42.480 --> 00:01:48.600
The easiest way to do this is just with the reshape method using derange will say and pure range and

30
00:01:48.600 --> 00:01:51.590
we'll go from zero to nine zeros a default start.

31
00:01:51.590 --> 00:01:58.110
So I just need to say nine here and then I will reshape this to be a three by three Matrix.

32
00:01:58.110 --> 00:02:00.390
And there you have your answer.

33
00:02:00.480 --> 00:02:04.700
Next we wanted to create a three by three identity matrix for that.

34
00:02:04.770 --> 00:02:10.230
All you do is say I 3 that creates the three by three I and see matrix.

35
00:02:10.230 --> 00:02:16.120
Next was to create or use them PI to generate a random number between 0 and 1.

36
00:02:16.130 --> 00:02:23.830
So for that we can say P that random thought Rand and if you remember this gives you ran the values

37
00:02:23.830 --> 00:02:26.380
in the given shape from 0 to 1.

38
00:02:26.390 --> 00:02:31.640
So we're going to say skimming one number there and there's your random number.

39
00:02:31.640 --> 00:02:37.320
Next was to use them PI to generate an array of 25 random numbers sampled from a standard normal distribution.

40
00:02:37.580 --> 00:02:44.090
So the way you do that is you just say N.P. thought random and we call Rande and here and then we won

41
00:02:44.150 --> 00:02:45.450
25 of those.

42
00:02:45.480 --> 00:02:47.240
That gives you 25 numbers.

43
00:02:47.300 --> 00:02:51.010
Obviously you won't get the same numbers that I do.

44
00:02:51.070 --> 00:02:53.020
Next we create the following matrix.

45
00:02:53.030 --> 00:02:57.020
And let me zoom out so we can see this properly formatted.

46
00:02:57.060 --> 00:02:58.850
So I want you to create this following matrix or here.

47
00:02:58.860 --> 00:03:05.600
And it goes from zero point zero one in step sizes of points or 1 all the way to 1.

48
00:03:05.610 --> 00:03:09.640
There's a couple of ways you could do this one way you can do it is the following.

49
00:03:09.640 --> 00:03:18.870
We can say and P-doc arr. and I'm going to start from 1 and go to 101.

50
00:03:19.140 --> 00:03:22.820
So I'll start with this and this gives me 1 to 100.

51
00:03:22.830 --> 00:03:28.080
What I couldn't do is say divide this by a hundred and I can see now.

52
00:03:28.110 --> 00:03:33.810
Give me point 0 1 point 0 2 etc. all the way to 1.0.

53
00:03:33.810 --> 00:03:36.930
But right now this is just a single dimension.

54
00:03:36.980 --> 00:03:40.040
Those are the brackets here versus the double set of brackets here.

55
00:03:40.230 --> 00:03:42.710
So what I want to do first is reshape this.

56
00:03:42.750 --> 00:03:48.460
So I'm going to say reshape this into a 10 by 10 matrix.

57
00:03:48.780 --> 00:03:52.110
And now I have the exact same matrix that I have here.

58
00:03:52.110 --> 00:03:54.880
So again 1 to 100 divided by 100.

59
00:03:54.900 --> 00:03:56.970
But I want to reshape it to a 10 by 10 first.

60
00:03:57.060 --> 00:04:05.270
So matches this output exactly next was create an array of 20 linearly spaced points between 0 and 1

61
00:04:05.670 --> 00:04:11.300
to that we'll just say P Lance Bass go from 0 to 1.

62
00:04:11.300 --> 00:04:12.390
Give me 20 of those.

63
00:04:12.650 --> 00:04:15.090
And there's a result.

64
00:04:15.100 --> 00:04:17.860
Up next we wanted to use pi indexing and selection.

65
00:04:17.860 --> 00:04:23.230
So we start with this particular matrix this math and P that arrange it goes from 1 to 25 and it's a

66
00:04:23.260 --> 00:04:25.300
5 by 5 matrix.

67
00:04:25.300 --> 00:04:31.720
So the first thing I want to do is grab this matrix right here and zoom in one level it goes 12 to 15

68
00:04:31.720 --> 00:04:38.690
17 to 20 20 to 25 which is basically right here these three subsections of those rows.

69
00:04:39.040 --> 00:04:44.890
So we can do in order to get that is the following we'll say given the matrix and the rows you want

70
00:04:45.100 --> 00:04:51.520
is starting at 2 all the way to the end of the columns you want is starting at index 1 all the way to

71
00:04:51.520 --> 00:04:52.390
the end.

72
00:04:52.390 --> 00:04:54.670
And that gives you back this matrix right here.

73
00:04:56.280 --> 00:04:59.100
Next one we want to just grab the singular number 20.

74
00:04:59.100 --> 00:05:04.150
So if we take a look at the Matrix again we can see the singular value 20 is located right here.

75
00:05:04.350 --> 00:05:12.220
So in order to grab it we just want to say give me the number at index row three and column index four.

76
00:05:12.420 --> 00:05:15.340
And then as you back the number 20.

77
00:05:15.550 --> 00:05:20.260
Next we wanted to do was grab this subsection of the array to 7 12.

78
00:05:20.260 --> 00:05:28.240
So if we take a look at our matrix again we get to 7 12 and where are they the right here 2 7 and 12.

79
00:05:28.600 --> 00:05:30.600
So we're going to end up doing is the following.

80
00:05:30.730 --> 00:05:36.910
As far as the rows are concerned I want to get everything up to and including row index 3 and the columns

81
00:05:36.910 --> 00:05:42.810
I want starting at index 1 and going up Toobin not including two.

82
00:05:42.810 --> 00:05:50.360
So the reason we do that is this is basically the same way of saying the first indexed or index 1 column

83
00:05:50.360 --> 00:05:50.980
here.

84
00:05:51.150 --> 00:05:56.530
If I just say the following one then I get this back in a flat form.

85
00:05:56.550 --> 00:06:01.450
So if you want this exact same format we have to do is use a slice notation.

86
00:06:01.800 --> 00:06:02.900
So notice the difference here.

87
00:06:02.910 --> 00:06:04.230
Well it's still the same data.

88
00:06:04.290 --> 00:06:05.480
The formatting is different.

89
00:06:05.490 --> 00:06:10.700
So it's one column two instead of just one here.

90
00:06:10.720 --> 00:06:10.960
All right.

91
00:06:10.960 --> 00:06:15.470
The next question was to grab this Cerezo Let's take a look at our matrix again.

92
00:06:17.070 --> 00:06:19.180
So this looks like just the bottom row.

93
00:06:19.200 --> 00:06:26.790
So in order to do that the way we can do is just say get me row everything for every column.

94
00:06:27.030 --> 00:06:29.100
So row for everything every column.

95
00:06:29.130 --> 00:06:30.540
That's how it is.

96
00:06:30.540 --> 00:06:33.000
Next one if we take a look at the map again.

97
00:06:33.140 --> 00:06:36.250

98
16:21 So it's just the bottom two.

99
00:06:36.330 --> 00:06:41.530
So we're going to say give me rose 3 up to index five.

100
00:06:41.580 --> 00:06:47.190
We can actually say even all the way to the end here and then we'll grab every column from that now

101
00:06:47.190 --> 00:06:49.600
returns back the same result.

102
00:06:49.600 --> 00:06:50.710
Now I want to do the following.

103
00:06:50.710 --> 00:06:52.580
Get the sum of all the values in the map.

104
00:06:52.770 --> 00:06:53.760
That's actually quite simple.

105
00:06:53.760 --> 00:06:57.030
You need to say as math that some execute that.

106
00:06:57.060 --> 00:07:00.810
And that sums up everything in the matrix to get the standard deviation.

107
00:07:00.810 --> 00:07:05.820
Hopefully we're able to figure out through some exploring using tab that it's just going to be SDD for

108
00:07:05.820 --> 00:07:09.330
standard deviation and then we have 7.2 on one.

109
00:07:09.950 --> 00:07:14.940
OK and the final question that was not the bonus question was to get the sum of all the columns in math.

110
00:07:15.120 --> 00:07:16.830
The result should look like this.

111
00:07:16.900 --> 00:07:23.790
The way we do that if we take a look at Matt we can actually call Matt thought some and we have an access

112
00:07:23.850 --> 00:07:28.480
argument that we can provide where the access argument will indicate whether you actually want to sum

113
00:07:28.480 --> 00:07:30.180
it along an axis.

114
00:07:30.180 --> 00:07:40.200
So if I say is equal to zero I get back this result right here 55 60 65 and if I say x is equal to 1

115
00:07:40.530 --> 00:07:46.350
this will actually sum along this axis that sums every value in the rows together.

116
00:07:46.380 --> 00:07:52.080
So this might be a little confusing at first but the notation of Zura and 1 It comes from the fundamental

117
00:07:53.040 --> 00:07:54.240
shape tuple.

118
00:07:54.270 --> 00:08:01.020
So if you take a look at your shape you have an index at zero and an index at one where 0 represents

119
00:08:01.020 --> 00:08:03.840
the rows and one represents the columns.

120
00:08:03.840 --> 00:08:08.380
So that's where those access numbers are coming from 0 and 1.

121
00:08:08.510 --> 00:08:13.850
And then we call a function such as some and you provided the access argument you're basically indicating

122
00:08:14.180 --> 00:08:18.070
which access do you want to execute this along if you don't do anything.

123
00:08:18.170 --> 00:08:19.190
You say none.

124
00:08:19.190 --> 00:08:20.890
It's going to sum everything together.

125
00:08:21.080 --> 00:08:23.810
But if you say something like access equal to zero.

126
00:08:23.930 --> 00:08:28.850
Remember that stands for the rows but it's going to do is run that function along the rows.

127
00:08:28.880 --> 00:08:33.690
So it's going to say 1 6 11 16 21 that all sums up to 55.

128
00:08:33.710 --> 00:08:38.960
This is a little unintuitive to think about at first because you may think that you want to sum the

129
00:08:38.960 --> 00:08:44.030
rows you would say X is zero but it's really what they mentioned you want to run this along so you want

130
00:08:44.030 --> 00:08:50.350
to run it along the rows you want to run it along the columns then you would say x is equal to 1.

131
00:08:50.390 --> 00:08:56.120
And that would sum up essentially what is a rose but it's running the some along the columns.

132
00:08:56.140 --> 00:08:57.310
Finally the bonus question.

133
00:08:57.310 --> 00:08:58.830
So we worked a lot of random data.

134
00:08:58.840 --> 00:09:01.510
How do you actually ensure it's always the same random numbers.

135
00:09:01.510 --> 00:09:09.730
You can say the random seed and this will allow you to set a seed for the random number generator.

136
00:09:09.730 --> 00:09:17.890
So if you set the seed to 101 and then you ask for any random some random integer just one of them you

137
00:09:17.890 --> 00:09:20.170
will end up getting the exact same result.

138
00:09:20.170 --> 00:09:24.850
Now if you the brunt of this multiple times you'll still get a different result every time but you'll

139
00:09:24.850 --> 00:09:26.830
get the same result in the same order.

140
00:09:26.920 --> 00:09:29.120
That idea if you set your seed to 101.

141
00:09:29.290 --> 00:09:33.640
So sometimes we'll set seeds in order for you to get the same random numbers that I do.

142
00:09:33.640 --> 00:09:35.420
So keep in mind if you're Rissi the seed.

143
00:09:35.590 --> 00:09:36.910
That's what I'm doing here.

144
00:09:36.910 --> 00:09:41.590
So if you ever need to kind of reset your see just run that cell again and you can see we always get

145
00:09:41.590 --> 00:09:46.740
back 0.5 1:06 as long as I run my seed right for that.

146
00:09:47.040 --> 00:09:47.670
OK.

147
00:09:47.800 --> 00:09:48.600
Thanks everyone.

148
00:09:48.600 --> 00:09:51.220
And let's head over to the next section we'll discuss pantless.
