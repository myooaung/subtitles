1
00:00:05,280 --> 00:00:07,770
Welcome back everyone to my plotless part two.

2
00:00:07,860 --> 00:00:11,910
Let's hop over to the Jupiter notebook and continue right where we left off last time.

3
00:00:11,910 --> 00:00:12,200
OK.

4
00:00:12,210 --> 00:00:17,850
Here I am back at the Jupiter notebook member from last time we learned how to use that figure and then

5
00:00:17,850 --> 00:00:21,090
figure the axis and then x is not plot.

6
00:00:21,090 --> 00:00:27,060
In order to plot onto an object oriented figure using that plotless the next thing we're going to do

7
00:00:27,210 --> 00:00:31,650
is learn how to create subplots using the same object oriented programming.

8
00:00:31,650 --> 00:00:38,030
That said I'm going to go out and say Here let's just clear everything in the cell.

9
00:00:40,180 --> 00:00:50,960
And we're going to go ahead and say this move the cell to the center and we'll say fig comma axes is

10
00:00:50,960 --> 00:00:55,640
equal to peel T and instead of calling figure now since we're going to try to do subplots we're going

11
00:00:55,640 --> 00:01:00,080
to say subplots it's appeal t that subplots.

12
00:01:00,140 --> 00:01:01,890
Let's go ahead and run this.

13
00:01:02,210 --> 00:01:05,270
And notice here we get subplots just out.

14
00:01:05,270 --> 00:01:10,550
Now what I can do is just use the axes object like I've done before to plot on it.

15
00:01:10,760 --> 00:01:13,300
And this is essentially no different than what we were doing before.

16
00:01:15,360 --> 00:01:21,720
And here he said X is that plot x come a Y where subplots differs is where you can specify the number

17
00:01:21,720 --> 00:01:23,260
of rows and columns.

18
00:01:23,460 --> 00:01:32,070
For instance I can say and rose as my first argument is equal to 1 and calls as my second argument is

19
00:01:32,070 --> 00:01:33,980
equal to two.

20
00:01:34,350 --> 00:01:39,580
And I'm going to go ahead and just show you what that looks like a hash tag of that out and run this.

21
00:01:39,730 --> 00:01:47,330
Now you can see I have one row with two columns and that's basically just a nice front handle on calling

22
00:01:47,420 --> 00:01:55,320
PLDT that figure all subplots is doing is essentially calling these fig axes automatically for you based

23
00:01:55,320 --> 00:01:56,720
off of these arguments.

24
00:01:56,880 --> 00:01:58,550
Rows and columns.

25
00:01:58,830 --> 00:02:00,500
Let's go ahead and play around with this.

26
00:02:00,500 --> 00:02:02,220
Let's go show one more example.

27
00:02:02,250 --> 00:02:10,080
Three rows by let's go in and say three columns and we see now we have three rows by three columns.

28
00:02:10,180 --> 00:02:13,860
Later on we'll see how to deal with the issue of stuff overlapping.

29
00:02:13,870 --> 00:02:16,120
But it's essentially just a one line call.

30
00:02:16,270 --> 00:02:17,700
We just say peel T.

31
00:02:19,400 --> 00:02:24,430
Titely out and that actually ends up fixing those overlaps.

32
00:02:24,440 --> 00:02:30,930
Let's go ahead and take a step back and just work with this one by two.

33
00:02:30,930 --> 00:02:31,410
All right.

34
00:02:31,410 --> 00:02:37,230
We have Pulte that subplots and essentially it's just an axes manager on top of that figure.

35
00:02:37,230 --> 00:02:42,630
Something to note here is that instead of just saying fig equals P-T the figure I am doing some tuple

36
00:02:42,630 --> 00:02:48,750
and packing them saying fig comma axes is equal to peel teeth that subplots and the thing to know about

37
00:02:48,750 --> 00:02:56,400
these axes object is if I go down here to this cell and type in axes axes is actually just an array

38
00:02:56,730 --> 00:02:58,520
of map plot lib axes.

39
00:02:58,530 --> 00:03:03,980
Essentially it's just the list of these axes object meaning I can actually iterate through it.

40
00:03:04,120 --> 00:03:19,880
I can say something like this for current underscore lips X in axes axes dot plot x comma Y and I don't

41
00:03:19,880 --> 00:03:21,270
actually want to say X is not plot.

42
00:03:21,290 --> 00:03:30,190
I want to say current X plot and then we see that we've actually plotted through this axes.

43
00:03:30,350 --> 00:03:37,130
Again this is just to show that this axes object is essentially just a list of map Cutlip axes which

44
00:03:37,130 --> 00:03:39,850
are the ones that you manually created when you said of Fig.

45
00:03:39,890 --> 00:03:46,820
Add underscore axes just further driving the point home that the only difference between PBT subplots

46
00:03:46,910 --> 00:03:52,760
and just doing Kilty that figure is that Pilani the subplots is essentially doing this add underscore

47
00:03:52,760 --> 00:03:57,760
axes stuff for you automatically based off of how many rows and columns you want.

48
00:03:58,160 --> 00:04:03,240
OK since we can iterate through this axes object we can actually also index it.

49
00:04:03,260 --> 00:04:10,090
Meaning I can say axes 0 up plots X come away.

50
00:04:11,170 --> 00:04:14,720
And here I've plotted on this first axes and I can do the same thing.

51
00:04:14,740 --> 00:04:24,920
The second one I can say axes 1 dot plots y comma X and here we seen how to either index call off of

52
00:04:24,930 --> 00:04:32,970
the axes array or iterate through this axes or a and just like we saw earlier we can also call titles

53
00:04:33,000 --> 00:04:43,450
and labels off of this so I can say something like xes 0 got set title will say first plot and then

54
00:04:43,450 --> 00:04:55,400
I will say axes 1 underscore title second plot and hero are able to call titles and you can say say

55
00:04:55,420 --> 00:04:59,290
X label set y label off of either of these axes objects.

56
00:04:59,290 --> 00:05:05,710
All you're doing is just actually grabbing that axes subplot object based off of its position in the

57
00:05:05,710 --> 00:05:06,960
array.

58
00:05:06,970 --> 00:05:11,910
All right let's do a quick review of these two object oriented methods.

59
00:05:11,950 --> 00:05:13,980
This first method is a little more manual.

60
00:05:14,020 --> 00:05:15,920
It's Piel T-Dog figure.

61
00:05:16,090 --> 00:05:22,300
You go ahead and create that figure you manually add the axes and choose its location and size and then

62
00:05:22,420 --> 00:05:29,260
based off the axes you go ahead and say that plot and that set title X label set y label etc. which

63
00:05:29,260 --> 00:05:30,860
we show examples up here.

64
00:05:32,640 --> 00:05:37,920
The second method is for subplots that you want are arranged by rows and columns.

65
00:05:37,920 --> 00:05:45,120
This allows you to call fig comma axes so tuple and packing here is equal to the subplots call and then

66
00:05:45,150 --> 00:05:51,270
based off of those axes you get an array of axes and you can plot and set titles either by indexing

67
00:05:51,330 --> 00:05:54,930
or by iterating through that axes object.

68
00:05:55,010 --> 00:06:02,670
And if you ever have any issues with things overlapping You can always just say KLT tightly close print

69
00:06:02,740 --> 00:06:06,110
CS and this will take care of any overlapping plots.

70
00:06:06,120 --> 00:06:09,380
I recommend that you just always put this at the end of your plot statements.

71
00:06:10,490 --> 00:06:17,960
OK now start talking about figure size aspect ratio and GPI map lib allows you to control each of these

72
00:06:18,120 --> 00:06:22,090
aspects and you can specify them when you're calling the figure object.

73
00:06:22,280 --> 00:06:28,080
Let me go ahead and show you an example I'm going to say fig equals Piazzi figure.

74
00:06:29,510 --> 00:06:34,550
And the arguments I can passen are fixed size is equal to.

75
00:06:34,550 --> 00:06:40,040
And then you pass in a tuple where the tuple is the width and height of the figure in inches.

76
00:06:40,040 --> 00:06:47,870
For instance I can go ahead and say three by two and then a second argument you can add is the API for

77
00:06:47,870 --> 00:06:53,660
instance 100 GPI where it is just the dots per inch or pixels per inch.

78
00:06:53,780 --> 00:06:57,140
I usually just use the default GPI when I'm working with the Jupiter note book.

79
00:06:57,260 --> 00:07:00,180
So I'm going to go ahead and just clear that for now.

80
00:07:01,430 --> 00:07:03,620
I'm going to add a set of axes to this.

81
00:07:03,680 --> 00:07:16,800
Call it just X and we'll say fig dot and underscore axes and we'll say 0 0 1 comma 1 and then I'm going

82
00:07:16,800 --> 00:07:22,860
to go ahead and say X dot plot x come y.

83
00:07:22,990 --> 00:07:23,380
All right.

84
00:07:23,380 --> 00:07:24,360
So there's our plot.

85
00:07:24,370 --> 00:07:26,610
Let's go ahead and mess around as a figure size.

86
00:07:26,650 --> 00:07:29,090
Let's say we wanted this to be very wide.

87
00:07:29,140 --> 00:07:30,820
Go ahead and say 8 by 2.

88
00:07:31,330 --> 00:07:35,450
And now I have this to be 8 inches by 2 inches.

89
00:07:35,490 --> 00:07:36,150
All right.

90
00:07:36,610 --> 00:07:44,860
So you can do the same thing with subplots I could say peel t that subplots set that Fig's size member

91
00:07:44,860 --> 00:07:45,160
here.

92
00:07:45,160 --> 00:07:50,900
Now we're going to say fig axes and I'm going to go ahead and remove the axes.

93
00:07:50,980 --> 00:07:56,750
Set the figure size and the axes will go ahead and plot onto the first axes.

94
00:07:57,580 --> 00:08:05,350
I'm going to just say axes plots X Y and I get a very similar plot.

95
00:08:05,350 --> 00:08:10,930
Now I'm going to go out and specify some rows and columns for this subplot will say and Rose is equal

96
00:08:10,930 --> 00:08:14,870
to one to actually make two rows since we're going wide here.

97
00:08:15,160 --> 00:08:18,190
And then let's say we have one column.

98
00:08:18,370 --> 00:08:21,280
So and calls is equal to 1.

99
00:08:21,280 --> 00:08:24,370
Now I'm going to call 0 here.

100
00:08:24,490 --> 00:08:26,170
Plot X come A-Y.

101
00:08:26,710 --> 00:08:35,750
And then we'll say axes one dot plot y comma X and here we can see the fig size has taken this into

102
00:08:35,750 --> 00:08:39,150
account as far as two rows by one column.

103
00:08:39,440 --> 00:08:46,900
And as always since we have a little bit of a roll up here site try saying peel teeth Titely out and

104
00:08:46,900 --> 00:08:51,710
this will attempt its best to fix up the type layout and it looks like it did a pretty good job here.

105
00:08:51,700 --> 00:08:56,770
There's some issues here with this y axes but we'll show you later how you can customize this y axes

106
00:08:56,770 --> 00:08:59,000
to show a little less information.

107
00:09:00,930 --> 00:09:01,260
All right.

108
00:09:01,260 --> 00:09:06,630
Now that we've finished discussing figure size and GPI Let's go ahead and make a new cell and begin

109
00:09:06,630 --> 00:09:12,840
discussing how to actually save a figure in order to save a figure you can use map plot lived to generate

110
00:09:12,870 --> 00:09:17,670
just high quality outputs in a number of formats including PNB JPAC.

111
00:09:17,740 --> 00:09:26,860
P.s. as SPG TGF and PTF to save a figure to a file you can use the save thig method.

112
00:09:27,160 --> 00:09:30,490
So for instance we have our figure here that we already created.

113
00:09:30,490 --> 00:09:33,270
Remember that just right here Fig.

114
00:09:33,760 --> 00:09:40,140
And then I can save fig dot save fig and all you have to do is pass in the file name you want.

115
00:09:40,240 --> 00:09:47,380
So for instance my underscore picture and then you pass in the extension and map Cutlip is smart enough

116
00:09:47,380 --> 00:09:48,550
to know what you want.

117
00:09:48,550 --> 00:09:57,080
So if you want to PNB you say up here in G if you want to J-P you say that J peg JP G etc..

118
00:09:57,210 --> 00:10:04,220
So to say this as that PMG and that will automatically say the figure here you can also specify the

119
00:10:04,220 --> 00:10:05,140
CPI.

120
00:10:05,450 --> 00:10:10,630
So if you forgot to specify the CPI over here when you're actually creating the plot you can specify

121
00:10:10,640 --> 00:10:15,980
in DPR over here so you can do this if like a 200 GPI and you can increase the GPI as you want more

122
00:10:15,980 --> 00:10:17,510
detail.

123
00:10:17,520 --> 00:10:18,130
All right.

124
00:10:18,510 --> 00:10:24,560
We've already gone over figure titles and axes labels such as set the X label and set the y label both

125
00:10:24,570 --> 00:10:26,570
show you a quick reminder of how to do that.

126
00:10:26,760 --> 00:10:30,580
Going to change this back to just a simple Fig.

127
00:10:30,630 --> 00:10:34,810
Equals P.L. t figure.

128
00:10:34,860 --> 00:10:37,140
Go ahead and add a set of axes to this.

129
00:10:37,140 --> 00:10:39,280
So we'll say fig.

130
00:10:39,290 --> 00:10:50,460
Dot add underscore axes we'll put them at 0 0 1 1 and then we'll say X stop plot x comma Y.

131
00:10:50,510 --> 00:10:51,070
All right.

132
00:10:51,320 --> 00:10:57,710
So as a reminder if you want to add a title you take one of these axes and you say set title and you're

133
00:10:57,710 --> 00:11:03,940
just passing in string of the title you want in order to set a white label.

134
00:11:03,950 --> 00:11:09,050
You just say set y label passing a string of the y label you want.

135
00:11:09,470 --> 00:11:12,090
And then for X label you can do the same thing.

136
00:11:13,490 --> 00:11:18,270
Set the table you want.

137
00:11:18,320 --> 00:11:22,300
OK so I have my title my white label and my X label.

138
00:11:22,370 --> 00:11:25,280
Let's talk about legends with legends.

139
00:11:25,280 --> 00:11:32,530
You can use label text to actually clarify what plot is what plot and I'll show you what I mean by that.

140
00:11:32,630 --> 00:11:43,860
I'm going to go ahead and remove this these three lines of code and say X stop plots why comma X so

141
00:11:43,880 --> 00:11:49,750
notice I'm just doing this on the same figure meaning if I say and actually run this I will get two

142
00:11:49,750 --> 00:11:56,260
lines here I will get the x y plot and the y exploit.

143
00:11:56,390 --> 00:11:57,620
Since these are quite different.

144
00:11:57,620 --> 00:12:00,210
Let's go ahead and get something that's a little more similar.

145
00:12:00,230 --> 00:12:08,510
I'm going to go ahead and plot x versus x square and X versus x cubed.

146
00:12:08,530 --> 00:12:09,150
All right.

147
00:12:09,370 --> 00:12:14,230
So now we have two lines here and if you were just looking at this figure by itself without being able

148
00:12:14,230 --> 00:12:19,540
to reference the code you're probably a little confused as to what each plot represents.

149
00:12:19,540 --> 00:12:22,380
You wouldn't want to add in a legend in an order.

150
00:12:22,420 --> 00:12:23,750
Add in a legend.

151
00:12:24,220 --> 00:12:27,080
It's actually quite simple but it's a two step process.

152
00:12:27,160 --> 00:12:33,850
The first step is to just call X thought Legin at the bottom of your code where your axes are the fine

153
00:12:34,690 --> 00:12:39,940
and if you run that you will notice you get a warning it says no labeled objects found.

154
00:12:40,180 --> 00:12:42,490
And that's where the second step comes in.

155
00:12:42,490 --> 00:12:47,770
For each of these plot calls that you just made you're going to add in an argument called label and

156
00:12:47,770 --> 00:12:53,320
this label is just a string that you want for the X that legend function to be able to reference let's

157
00:12:53,320 --> 00:12:58,530
go to show you what I mean by that we can go ahead and say X squared here.

158
00:13:00,590 --> 00:13:04,810
Are our label and then and this label I'm going to go ahead and say

159
00:13:07,480 --> 00:13:08,280
execute

160
00:13:11,010 --> 00:13:15,760
and now when I run this if X legend I see I've been able to create a legend.

161
00:13:15,840 --> 00:13:20,940
So all this does when you call X that legend is it looks for each of the plot calls and then checks

162
00:13:20,940 --> 00:13:26,610
to see if there's a label and then the label which is just a string gets returned and gets matched up

163
00:13:26,610 --> 00:13:29,460
to the correct color of your line.

164
00:13:29,550 --> 00:13:32,480
And later on we'll show you how to actually customize your line colors.

165
00:13:33,850 --> 00:13:35,040
Now quick no is that.

166
00:13:35,040 --> 00:13:41,680
Notice how some of this legend overlaps the actual plots which you can do in the X that legend call

167
00:13:41,680 --> 00:13:45,560
in order to avoid this is specify Alosi.

168
00:13:45,610 --> 00:13:50,700
Now they're actually quite a few locations you can specify and I'll show you the documentation page

169
00:13:50,710 --> 00:13:51,490
real quick for it.

170
00:13:51,490 --> 00:13:57,040
It's linked in your notebook in this section let me go ahead and go to that link so that link will take

171
00:13:57,040 --> 00:13:58,820
you to a page that looks like this.

172
00:13:58,900 --> 00:14:04,300
And you can click legend and there's basically a set of parameters here and there's a location code

173
00:14:04,480 --> 00:14:06,130
and a location string.

174
00:14:06,130 --> 00:14:12,910
So you can specify the best upper right upper left lower left etc. based after location code.

175
00:14:12,940 --> 00:14:17,770
I would always recommend that you just use location code 0 because that allows map lib to try to choose

176
00:14:17,770 --> 00:14:19,650
the best location for your legend.

177
00:14:19,900 --> 00:14:20,820
Let's go ahead and do that.

178
00:14:20,830 --> 00:14:26,770
We'll go in and say hello see Call 0 plotted out and then we see that the best location is over here

179
00:14:26,930 --> 00:14:29,430
in the top left.

180
00:14:29,470 --> 00:14:33,120
Let's go ahead and check out one more location code if we go back here.

181
00:14:33,130 --> 00:14:40,150
For instance if you wanted it in the center we can specify a location code 10 and here we have in the

182
00:14:40,150 --> 00:14:41,140
center.

183
00:14:41,140 --> 00:14:47,170
Now if none of these options are working for you such as 0 3 or 10 which you can do is you can also

184
00:14:47,170 --> 00:14:52,300
specify a tuple giving the x and y of the lower left corner of the legend.

185
00:14:52,540 --> 00:15:00,220
So for instance we can go ahead and say something like this 0.1 comma 0.1 and that means just like you

186
00:15:00,220 --> 00:15:02,760
did earlier when you're putting in an insert plot.

187
00:15:02,860 --> 00:15:07,420
You can put in a tuple here specifying the location of where you want your legend.

188
00:15:07,420 --> 00:15:09,400
Bottom corner to be.

189
00:15:09,530 --> 00:15:10,210
All right.

190
00:15:10,440 --> 00:15:12,290
That's it for this second part.

191
00:15:12,360 --> 00:15:15,960
Coming up next on this last part of the map Partlow concepts lecture.

192
00:15:15,960 --> 00:15:19,890
We're going to talk about setting colors line with and line types.

193
00:15:19,890 --> 00:15:20,820
Thanks everyone.

194
00:15:20,820 --> 00:15:25,730
Go ahead and post any questions you have the Q&amp;A forums and I'll be happy to answer them there.

195
00:15:25,760 --> 00:15:28,460
Remember to reference the notebooks for this lecture.

196
00:15:28,800 --> 00:15:30,670
OK I'll see if next lecture.
