WEBVTT
1
00:00:05.360 --> 00:00:08.330
Welcome back everyone in this lecture can actually code along.

2
00:00:08.330 --> 00:00:13.180
Three an example portfolio allocation and description of the Sharpe ratio with Python.

3
00:00:13.370 --> 00:00:18.420
Let's open up a Jupiter notebook and get started OK here I am at the Jupiter note book.

4
00:00:18.440 --> 00:00:24.470
The first thing going to do is import pandas as PD and I'm also going to use Crondall to actually get

5
00:00:24.470 --> 00:00:26.150
the data we're going to be working with.

6
00:00:26.210 --> 00:00:30.950
We're going to do work of a bunch of tech stocks like Apple Cisco IBM and Amazon.

7
00:00:30.950 --> 00:00:37.280
So let's go ahead and create a start date for what we're going to grab from will say PD to date time

8
00:00:37.330 --> 00:00:43.480
and then it's going to pass in the spring 2012 01 So January 1st 2012.

9
00:00:43.760 --> 00:00:45.420
And then the 8 date or end date.

10
00:00:45.440 --> 00:00:51.870
I'm going to do is PD to date time and I will say 2017 0 1 0 1.

11
00:00:51.890 --> 00:00:58.130
So we'll just have 5 years worth of data from 2012 to 2017 and then we're going to use quando to grab

12
00:00:58.130 --> 00:01:00.970
a bunch of data for the Sox.

13
00:01:01.190 --> 00:01:06.660
So I'll say Apple is difficult to handle that gets.

14
00:01:06.780 --> 00:01:10.350
And then the curve for that is just wickie slash Apple.

15
00:01:10.410 --> 00:01:11.840
And then the 11.

16
00:01:11.850 --> 00:01:14.070
So we just want it just that close column.

17
00:01:14.190 --> 00:01:21.270
You could say just wiki slash Apple and they would give you back the 8 or 11 columns of data that contains

18
00:01:21.270 --> 00:01:25.390
a bunch more information but we're really just concerned with the just so close price.

19
00:01:25.410 --> 00:01:27.020
Still say they are.

20
00:01:27.110 --> 00:01:32.100
They as equal to that variable and the end date is equal to end.

21
00:01:32.100 --> 00:01:35.370
Now keep in mind that case quando doesn't work for you or your firewall issues.

22
00:01:35.370 --> 00:01:41.280
We do have CSB files of Apple closed Cisco close IBM close an Amazon close for you so can go ahead and

23
00:01:41.280 --> 00:01:44.140
grab those from the notes in case this is not an option for you.

24
00:01:44.320 --> 00:01:49.100
I'm going to copy and paste this a few times and then let's go in and edit this.

25
00:01:49.170 --> 00:01:55.120
So instead of apple here will say Cisco for the next one instead of apple there will say IBM in the

26
00:01:55.120 --> 00:01:58.640
last will be Amazon OK.

27
00:01:58.730 --> 00:02:11.510
And then let's go ahead and change this to AMC and this will then be IBM and so b c s c o do shift run

28
00:02:11.630 --> 00:02:13.030
and the pending on your internet connection.

29
00:02:13.030 --> 00:02:20.230
This may take a while but eventually what we should have are all the time series so here we have a basically

30
00:02:20.230 --> 00:02:27.250
a very simple data frame with a data index 2012 starting date January 3rd and then adjusted close because

31
00:02:27.250 --> 00:02:30.110
this is the first trading day of that month.

32
00:02:30.430 --> 00:02:30.960
Okay.

33
00:02:31.150 --> 00:02:36.440
So we're going to do is show you just a couple of review on metrics.

34
00:02:36.520 --> 00:02:43.160
So for example if we want the cumulative daily returns for example it's just check out Apple in the

35
00:02:43.270 --> 00:02:45.200
location zero.

36
00:02:45.370 --> 00:02:47.950
So that coming back just a close $53.

37
00:02:47.980 --> 00:02:54.340
And if actually just want the very first thing what I can do is just say give me a justed close and

38
00:02:54.340 --> 00:02:55.480
that gives me back the number.

39
00:02:55.480 --> 00:02:58.060
So this is the very first price.

40
00:02:58.060 --> 00:03:03.340
So if you come back all the way up here if we start off and invest some money here I can buy one stock

41
00:03:03.340 --> 00:03:10.240
for $53 and at the very end of the day that one stock towards the end is worth $114.

42
00:03:10.240 --> 00:03:15.430
So it's actually with my cumulative return but I actually want to figure out this is also known as normalizing

43
00:03:15.430 --> 00:03:16.280
a price.

44
00:03:16.480 --> 00:03:25.120
Well what I can do is I'm going to say for stock data frame in that it can make a list or a tuple of

45
00:03:25.120 --> 00:03:33.790
the stock data frame's IBM Amazon what I'm going to say is create a new column in the stock data frame

46
00:03:33.790 --> 00:03:40.790
called normal return and then set that equal to the stock data frame.

47
00:03:42.610 --> 00:03:47.770
And then say the adjusted close price and then I'm going to divide that by the stock frame.

48
00:03:47.790 --> 00:03:54.110
Thought I'll go see 0 and then call a just that close.

49
00:03:54.130 --> 00:03:56.100
We just grab that number.

50
00:03:56.130 --> 00:03:58.360
Let me zoom out so we can review what's going on here.

51
00:03:58.530 --> 00:04:03.780
Basically for every stock frame that I'm doing I'm creating a new column called normalized return.

52
00:04:03.780 --> 00:04:09.780
This is the same as cumulative daily returns where I take the adjusted close column and then I divide

53
00:04:09.780 --> 00:04:13.440
it by the very initial price.

54
00:04:13.680 --> 00:04:18.510
So I'm going to run then let's mixture that should be AAPL.

55
00:04:18.540 --> 00:04:18.810
All right.

56
00:04:18.810 --> 00:04:22.470
So if I take a look at my Apple stock I had a friend that shook the head of it.

57
00:04:22.470 --> 00:04:25.330
I can see just the close and the normalized return.

58
00:04:25.350 --> 00:04:26.060
So it makes sense.

59
00:04:26.060 --> 00:04:30.380
The very first normalized return is just one because essentially you just get one of your money back

60
00:04:30.420 --> 00:04:33.190
if you immediately buy and sell at the exact same price.

61
00:04:33.940 --> 00:04:35.560
And if we check out the tail of this.

62
00:04:35.560 --> 00:04:45.160
So if I say Apple tail I should begin to see the normalizer return at the very end of this 2.1 six return

63
00:04:45.160 --> 00:04:47.610
versus a 1.0 return.

64
00:04:47.620 --> 00:04:47.870
OK.

65
00:04:47.890 --> 00:04:50.160
So you can see we kind of doubled our money here.

66
00:04:50.260 --> 00:04:53.580
Let's not pretend we have some allocations in our portfolio.

67
00:04:53.860 --> 00:04:58.810
So we're going to just kind of go with the following allocations will say 30 percent of our money is

68
00:04:58.810 --> 00:05:07.800
going to go into Apple then we're going to say 20 percent in Google or alphabet.

69
00:05:07.810 --> 00:05:11.830
Actually it's not Google off of Cisco sorry.

70
00:05:12.070 --> 00:05:16.140
Then we'll say 40 percent at Amazon.

71
00:05:16.360 --> 00:05:20.040
And finally 10 percent in IBM OK.

72
00:05:20.040 --> 00:05:21.980
So those are the applications we're going to do.

73
00:05:22.200 --> 00:05:32.080
So the way I'm going to do that is a nice little for loop will say for stock data frame Khama aloe in

74
00:05:32.380 --> 00:05:39.760
and I'm going to zip together the previous two bull that I had here of the stock frames.

75
00:05:39.980 --> 00:05:48.620
Copy that come down here paste it in and then going to pasan a list also be a tuple point 3.2 point

76
00:05:48.650 --> 00:05:50.000
for point 1.

77
00:05:50.000 --> 00:05:53.330
Remember these should all sum up to be equal to 1.0.

78
00:05:53.330 --> 00:05:57.140
Now that may change for shorting but right now we're just going along and all of these so they should

79
00:05:57.140 --> 00:05:59.170
all sum up to be a 1.0.

80
00:06:00.310 --> 00:06:04.990
And if you're curious what's actually happening with the Zipp I can show you we can't just copy this

81
00:06:05.430 --> 00:06:05.810
point.

82
00:06:05.890 --> 00:06:11.890
And you call them or new cell here pass that into a listening and kind of see what I'm doing here.

83
00:06:11.890 --> 00:06:17.530
So what I'm doing is each of these items is a data frame and then at the very end of this if you see

84
00:06:17.530 --> 00:06:22.520
this that has the rest of that data frame and then it's attached to point 3 allocation.

85
00:06:22.690 --> 00:06:24.510
So that's what this Zipp is doing.

86
00:06:24.850 --> 00:06:27.850
It's making a list of tuples for us.

87
00:06:28.030 --> 00:06:34.160
So we're going to do is using tuple and packing points say that stock data frame.

88
00:06:34.240 --> 00:06:43.160
Let's create an allocation column and that's going to be equal to stock data frame the normalized return

89
00:06:43.220 --> 00:06:47.970
which we created which we called normal return and then we're going to multiply it by the allocation

90
00:06:49.560 --> 00:06:54.720
run that and then if I Cheka Apple da head what do we actually get out here.

91
00:06:54.900 --> 00:07:00.220
Well now I kind of get a better idea of what my returns are portfolio wise so I can see here.

92
00:07:00.240 --> 00:07:05.050
Might just sit close price my normalized return multiply then by my allocation.

93
00:07:05.220 --> 00:07:11.820
So 30 percent of my money is an apple when that means I'm going to say point three times my first unnormalized

94
00:07:11.820 --> 00:07:12.840
return of one.

95
00:07:12.840 --> 00:07:17.600
So I can get an idea of overall and the specter of the portfolio what's actually happening here.

96
00:07:18.900 --> 00:07:24.150
And then this allows us to easily expand on this idea by actually getting our position values so I can

97
00:07:24.150 --> 00:07:31.550
see them right now at the very beginning 30 percent or point three of my money is allocated to Apple.

98
00:07:31.740 --> 00:07:36.630
So if I just multiply this by how much money invested let's say a million dollars I can just say a million

99
00:07:36.630 --> 00:07:42.060
dollars times my education and they'll give me the actual money in regards to the rest of the portfolio.

100
00:07:42.120 --> 00:07:50.870
So it's actually code that up sunlight's save for stock underscored the F in and let's copy and paste

101
00:07:50.870 --> 00:07:53.650
this tuple the stock data frame's again.

102
00:07:54.990 --> 00:07:59.670
So for a restock data frame in that tuple or a list of stock data frames it can be a two pluralists

103
00:07:59.670 --> 00:08:00.780
doesn't matter.

104
00:08:00.870 --> 00:08:09.830
I'm going say stock data frame grab my position or create a column called position of values and then

105
00:08:09.830 --> 00:08:13.500
that's going to be equal to my allocation.

106
00:08:14.530 --> 00:08:18.590
Multiply that by well say one million dollars.

107
00:08:18.690 --> 00:08:20.060
Make sure I count that right.

108
00:08:20.100 --> 00:08:21.950
Six zeros.

109
00:08:22.020 --> 00:08:28.440
So let's take a look at let's say Apple again we check out the head of Apple.

110
00:08:28.470 --> 00:08:30.870
I can see my actual position values.

111
00:08:30.870 --> 00:08:33.780
So let's break this down kind of all four of these columns.

112
00:08:33.780 --> 00:08:35.530
Here's my just hit close price.

113
00:08:35.640 --> 00:08:37.170
Here's a normalized return.

114
00:08:37.170 --> 00:08:39.560
Otherwise known as cumulative daily return.

115
00:08:39.810 --> 00:08:44.730
Multiply then by the allocations or how much of my portfolio's money is actually allocated to this particular

116
00:08:44.730 --> 00:08:45.480
stock.

117
00:08:45.600 --> 00:08:50.260
And then if you multiply the actual money amount we invested we get our position values.

118
00:08:50.280 --> 00:08:56.330
So on day one I have 300000 or 30 percent of a million dollars allocated in Apple.

119
00:08:56.970 --> 00:09:04.410
And the very next day since Apple went up those $300000 have now turned into a little more 300000 plus

120
00:09:04.410 --> 00:09:11.010
about $1600 dollars and you could see continues rising and sometimes it drops etc. but now we actually

121
00:09:11.010 --> 00:09:14.510
know how much money is in our portfolio as the days change along.

122
00:09:14.520 --> 00:09:20.940
So now let's go ahead and create a kind of larger portfolio data frame that essentially just has all

123
00:09:20.940 --> 00:09:23.750
these positioned values for all of our stocks.

124
00:09:24.290 --> 00:09:31.020
So I'm going to say portfolio underscore Vau is equal to PD.

125
00:09:32.150 --> 00:09:33.810
Comcast concatenate.

126
00:09:34.010 --> 00:09:39.510
And I'm going to concatenate basically Apple's stock.

127
00:09:39.610 --> 00:09:43.050
Well let's go ahead and let's go to make another list.

128
00:09:43.270 --> 00:09:47.190
So we'll say all Paul's vowels.

129
00:09:48.210 --> 00:09:52.680
And I'm going to say all pause vowels is equal to.

130
00:09:52.710 --> 00:09:54.450
And then I'm going to pass in a list here.

131
00:09:54.450 --> 00:10:04.020
Apple position values comma Cisco position values and just use tab to autocomplete this for yourself.

132
00:10:04.390 --> 00:10:13.070
Then we have IBM position values and last one was Amazon position values.

133
00:10:13.330 --> 00:10:17.220
Ok so now they have that list in the past in that list to be concatenated here.

134
00:10:18.500 --> 00:10:23.610
And let's go ahead to make sure we specify access is equal to 1 so we run that.

135
00:10:23.650 --> 00:10:31.100
And if we Chucko portfolio underscore Val at least the head of it I have all my position values so 300000

136
00:10:31.100 --> 00:10:34.620
in this stock 200000 this stock 400000 100000.

137
00:10:34.670 --> 00:10:38.560
These various stocks and I can see day by day how my positions are changing.

138
00:10:38.560 --> 00:10:42.090
So how much money do I actually have in my entire portfolio.

139
00:10:42.180 --> 00:10:44.720
Something we haven't done yet is we forgot to.

140
00:10:44.770 --> 00:10:48.760
Well we forget but unfortunately the actual stock names aren't here.

141
00:10:48.760 --> 00:10:50.010
It just has positioned values.

142
00:10:50.140 --> 00:10:57.580
We can easily amend that though by just saying portfolio yvel core columns on this and set it equal

143
00:10:57.580 --> 00:11:05.220
to Apple position and then the next one week actually can remember from here we have Apple first.

144
00:11:05.220 --> 00:11:12.120
Then it goes to Cisco positions will say that will say Cisco position the next when we pass and concatenate

145
00:11:12.120 --> 00:11:15.350
them is IBM position.

146
00:11:15.450 --> 00:11:17.920
So let's make sure those quotes are closed here.

147
00:11:20.120 --> 00:11:29.080
And then finally the last one was Amazon position instead of right in the hole where it's just a POS.

148
00:11:29.200 --> 00:11:29.570
All right.

149
00:11:29.670 --> 00:11:36.320
So now for a check up portfolio Val and how I can see Apple positioned Cisco position etc..

150
00:11:36.500 --> 00:11:39.650
So if I actually ever want to get my total position well that's quite easy.

151
00:11:39.650 --> 00:11:47.560
All I need to do is create a new column called Total position and well I guess to keep in line of everything

152
00:11:47.560 --> 00:11:49.270
else so just say total POS.

153
00:11:49.270 --> 00:11:55.860
So total position is equal to portfolio thou.

154
00:11:56.110 --> 00:11:58.310
And then I'm going to take some along.

155
00:11:58.330 --> 00:12:04.210
Access is equal to one because access equal to one is going to allow me to take the sum along this way.

156
00:12:04.210 --> 00:12:05.660
So I should get a new column here.

157
00:12:05.680 --> 00:12:10.330
And the very first of all you should be basically a million dollars so I'll check out our portfolio

158
00:12:10.330 --> 00:12:10.780
again.

159
00:12:10.840 --> 00:12:11.570
We'll see portfolio.

160
00:12:11.570 --> 00:12:17.320
I'll check out the head of this and arrogancy a million dollars and then I can see day by day how my

161
00:12:17.890 --> 00:12:21.450
essentially total amount of money is changing.

162
00:12:21.480 --> 00:12:23.500
Now let's go ahead and plot this out.

163
00:12:24.240 --> 00:12:24.890
To plot it out.

164
00:12:24.900 --> 00:12:34.720
Others say that plot lib pipe plot as peel tea and then I'll say Plott live in line run that and then

165
00:12:34.720 --> 00:12:45.340
say portfolio well grab our total position and then I'm going to just plot with the size of the fleet

166
00:12:45.360 --> 00:12:47.290
this will be large enough 10 mate.

167
00:12:47.350 --> 00:12:48.770
You can always mess around that.

168
00:12:48.820 --> 00:12:53.730
Now let's get the title of total portfolio value.

169
00:12:54.520 --> 00:12:59.670
So essentially if I invested a million dollars over time how much is that million dollars come to be.

170
00:12:59.930 --> 00:13:05.320
And I can see here it's come to be almost around $2 billion is the 1.8 million mark.

171
00:13:05.350 --> 00:13:10.810
And over those five years I invested well in these companies and you can see it slowly starts growing.

172
00:13:11.080 --> 00:13:16.680
And if we want to check out just the actual positions themselves individually I can do that by saying

173
00:13:16.690 --> 00:13:19.170
portfolio well.

174
00:13:19.600 --> 00:13:26.860
And then just drop the total position column make sure it's a long accessible to one so it knows it's

175
00:13:26.860 --> 00:13:34.520
a column and then I'm going to plot and we're going to say Figgs size is equal to go ahead and make

176
00:13:34.520 --> 00:13:36.040
it the same size and buy.

177
00:13:36.350 --> 00:13:41.560
We run that and I can see all my positions I mean zoom out just a little bit here and I can see how

178
00:13:41.560 --> 00:13:47.600
the positions themselves have changed so we can see here the big grower here is Apple and we can also

179
00:13:47.600 --> 00:13:49.220
see Amazon has a lot of growth.

180
00:13:49.230 --> 00:13:56.000
IBM the pinning of how much we allocated as well as Cisco those may not have been the best choice.

181
00:13:56.010 --> 00:14:00.770
So the question arises like how do we actually choose what's the optimal amount of money to put into

182
00:14:00.830 --> 00:14:01.970
each of these stocks.

183
00:14:01.970 --> 00:14:06.750
So for that we're going to calculate some portfolio statistics and then explore the Sharpe ratio.

184
00:14:07.070 --> 00:14:10.850
All right we're going to do all of that stuff in the next lecture as a quick review of what we did in

185
00:14:10.850 --> 00:14:11.570
this lecture.

186
00:14:11.570 --> 00:14:13.900
Let's kind of just quickly sum it up.

187
00:14:14.000 --> 00:14:17.040
Essentially all we did was we set a start and end date.

188
00:14:17.240 --> 00:14:22.780
We grabbed our portfolio of stocks and then we slowly built up a portfolio data frame.

189
00:14:23.090 --> 00:14:27.560
What we did at first is we created a normalized return column that's just taking each value and did

190
00:14:27.560 --> 00:14:30.400
just that close and dividing it by the very first value.

191
00:14:30.440 --> 00:14:31.570
And it just that close.

192
00:14:31.580 --> 00:14:35.130
This is basically the cumulative daily return.

193
00:14:35.120 --> 00:14:40.820
Then we have that normalized return what we can do is and multiply it by its allocation and these allocations

194
00:14:40.820 --> 00:14:42.480
here are just chosen arbitrarily.

195
00:14:42.560 --> 00:14:46.490
Later on we're going to discover how to optimize those allocation choices choices.

196
00:14:46.730 --> 00:14:51.770
Then once we have those allocation choices we just have the position values by multiplying it by our

197
00:14:51.800 --> 00:14:52.880
initial position.

198
00:14:52.880 --> 00:14:57.950
In this case we again arbitrarily chose a million dollars as our initial investment.

199
00:14:57.950 --> 00:15:02.080
Once we have that we have all these values we bring them together into a single data frame.

200
00:15:02.210 --> 00:15:06.590
So then I can some of them all up to get my total position and I can plot it out and see how much money

201
00:15:06.830 --> 00:15:08.900
have I made or lost over time.

202
00:15:09.680 --> 00:15:12.770
And then we can see it for the individual stocks as well.

203
00:15:12.770 --> 00:15:16.800
All right coming up in the next lecture we're going to calculate some powerful sophistic such as daily

204
00:15:16.800 --> 00:15:17.420
returns.

205
00:15:17.450 --> 00:15:18.740
Average returns.

206
00:15:18.860 --> 00:15:20.370
Standard deviation of daily returns.

207
00:15:20.390 --> 00:15:25.730
And we're going to use those to create the Sharpe ratio and the ratio is going to allow us to later

208
00:15:25.730 --> 00:15:28.490
on actually optimize our allocations.

209
00:15:28.490 --> 00:15:29.090
Okay.

210
00:15:29.090 --> 00:15:30.830
Thanks everyone and I'll see at the next lecture.
