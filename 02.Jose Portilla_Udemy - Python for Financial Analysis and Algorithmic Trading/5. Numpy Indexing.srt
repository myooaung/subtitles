1
00:00:05,440 --> 00:00:11,530
Welcome everyone to the lecture on using pi for indexing and selection Let's hop over to a Jupiter notebook

2
00:00:11,590 --> 00:00:12,940
and get started.

3
00:00:13,000 --> 00:00:13,200
OK.

4
00:00:13,210 --> 00:00:18,970
So the first thing to do in this notebook is say important up-I as and piece and then I'm going to create

5
00:00:19,030 --> 00:00:26,580
a array using just N.P. arrange and will save from 0 and up to and including 11.

6
00:00:26,680 --> 00:00:29,210
So that should get me through 10 as an array.

7
00:00:29,620 --> 00:00:32,410
OK let's talk about bracket indexing and selection.

8
00:00:32,410 --> 00:00:37,220
The simplest way to pick one or some elements of an array is actually pretty much exactly like we did

9
00:00:37,220 --> 00:00:38,890
for a python list.

10
00:00:38,890 --> 00:00:43,870
You can grab the array and use bracket indexing to grab an index location.

11
00:00:43,870 --> 00:00:49,670
So for example if I want the element to index 8 I just asked for index 8 and it returns 8.

12
00:00:49,720 --> 00:00:53,050
In this case it matches up perfectly because the first element is 0.

13
00:00:53,350 --> 00:00:57,520
If you actually want to get values and a range you can use slice notation which essentially follows

14
00:00:57,520 --> 00:01:00,590
the exact same thing as a python list.

15
00:01:00,670 --> 00:01:05,950
You include the starting location colon and then up to but not including the last index.

16
00:01:05,950 --> 00:01:12,420
So this should give us 1 through four if you want to get everything up to a certain position and not

17
00:01:12,420 --> 00:01:13,010
including it.

18
00:01:13,010 --> 00:01:17,310
You can do colon 5 and that will give us 0 to 4.

19
00:01:17,550 --> 00:01:22,320
And likewise you can do a starting position up to the end and that because you three all the way to

20
00:01:22,320 --> 00:01:28,080
the end so bracket indexing and selection works exactly like a python list or even a python string.

21
00:01:28,080 --> 00:01:30,470
Broadcasting is another topic we're going to talk about.

22
00:01:30,660 --> 00:01:35,550
So an umpire res differ from a normal Python list because of their ability to broadcast.

23
00:01:35,550 --> 00:01:36,960
Let me show you what I mean by that.

24
00:01:38,130 --> 00:01:44,100
If we look at my array I have zero through 10 what I can actually do is broadcast the re-assignment

25
00:01:44,580 --> 00:01:54,700
so I can actually grab a slice of this let's say 0 1 2 3 4 and I can set that slice all equal to 100.

26
00:01:54,750 --> 00:01:57,000
And you can't do this for normal Python list.

27
00:01:57,030 --> 00:02:04,230
So now if I ask for that array back I end up seeing that these first five elements here 0 1 2 3 4 are

28
00:02:04,230 --> 00:02:05,550
now all the number one hundred.

29
00:02:05,550 --> 00:02:07,620
And this is known as broadcasting.

30
00:02:07,620 --> 00:02:12,670
So let me reset that array because Note that the change is actually permanent here.

31
00:02:13,450 --> 00:02:14,840
Those are two 11.

32
00:02:14,920 --> 00:02:17,000
Now check out my array it's back to normal.

33
00:02:17,200 --> 00:02:23,080
So what's important to note here is that if you have some sort of variable that's a sign to the slice

34
00:02:23,080 --> 00:02:29,350
of an array for instance will say 0 lips 0 colon 6.

35
00:02:29,370 --> 00:02:36,120
So if I check up the slice of an array here I have those first elements and if I reassign this if I

36
00:02:36,120 --> 00:02:43,290
say slice of array and then I say OK select everything that's just a simple call and select everything

37
00:02:43,290 --> 00:02:46,970
in that slice and set that equal to ninety nine.

38
00:02:47,100 --> 00:02:53,290
If I took up the slice of my array I have everything ninety nine if I check back on my original array.

39
00:02:53,310 --> 00:02:57,570
Notice that that slice was essentially just a pointer to that first half of the array.

40
00:02:57,600 --> 00:03:00,790
So it actually changes the original array as well.

41
00:03:00,960 --> 00:03:03,390
So you can see here that data is not actually copied.

42
00:03:03,390 --> 00:03:05,810
It's just a view of the original array.

43
00:03:05,880 --> 00:03:08,500
And the reason for that is to avoid memory problems.

44
00:03:08,610 --> 00:03:12,630
A lot of times the work of Pi and then panderers as well it's built on top of some pie.

45
00:03:12,720 --> 00:03:16,590
You're probably working in a pretty large datasets and you don't want every single variable assignment

46
00:03:16,860 --> 00:03:18,930
to create another copy of your dataset.

47
00:03:18,960 --> 00:03:22,320
Otherwise you would quickly run out of RAM if you had really large data sets.

48
00:03:22,320 --> 00:03:25,930
So instead if you actually explicitly want a copy you need to say so.

49
00:03:25,930 --> 00:03:32,190
So you need to say something like this variable array copy or previously that slice is equal to array

50
00:03:32,310 --> 00:03:38,230
dots and then you call copy and if you check out this array it's 9 9 9 9 6 through 10.

51
00:03:38,250 --> 00:03:46,280
And if I do something to array copy such as grab everything and set it equal to 200 MY or a copy has

52
00:03:46,280 --> 00:03:50,320
been changed but my original array is still that same thing.

53
00:03:50,330 --> 00:03:54,770
So you have to explicitly call copy if you want a copy of your array.

54
00:03:54,770 --> 00:03:57,700
OK let's talk about indexing a two dimensional array.

55
00:03:57,740 --> 00:04:03,470
Otherwise known as a matrix the general format for indexing an array looks something like this.

56
00:04:03,470 --> 00:04:08,810
You have some to them mentionable array or call it mat to make it like a matrix and then you end up

57
00:04:08,810 --> 00:04:15,470
saying square brackets the row you want to index and then the column you're on index.

58
00:04:15,470 --> 00:04:18,180
So again it's going to be row comma column.

59
00:04:18,320 --> 00:04:21,510
The other way you can do this is by actually splitting up into steps.

60
00:04:21,520 --> 00:04:25,220
You can say bracket row and then bracket column.

61
00:04:25,220 --> 00:04:26,270
So that's for indexing.

62
00:04:26,270 --> 00:04:28,480
Let's show you a couple of examples of this.

63
00:04:28,550 --> 00:04:33,990
I'm going to create an object called Matt and I will say it's an NPR-A.

64
00:04:34,510 --> 00:04:43,800
And let's actually just make this be a nested list so we'll say five 10 15 next item in this list are

65
00:04:43,790 --> 00:04:48,280
going to be 20 25 30.

66
00:04:48,450 --> 00:04:53,400
And then finally one more will say 35 40 45.

67
00:04:53,430 --> 00:04:59,230
So here I'm just passing the nested list into NPR-A to get back matrix it looks like this.

68
00:04:59,230 --> 00:05:01,560
So five 10 15 20 to 45.

69
00:05:01,560 --> 00:05:03,240
Lots of ways we could have made this matrix.

70
00:05:03,270 --> 00:05:05,390
This is just the simplest doing it manually.

71
00:05:05,400 --> 00:05:12,450
So let's say I want to index an entire row I end up saying mat braces and then ask for the index position

72
00:05:12,480 --> 00:05:13,200
of the row I want.

73
00:05:13,200 --> 00:05:19,320
So if I want that very first row 5 10 15 I just pass in a zero net returns back that very first row

74
00:05:19,800 --> 00:05:22,170
if I want that last row that's going to be 0 1 2.

75
00:05:22,170 --> 00:05:25,780
So we pass into that chasm back that very last row.

76
00:05:26,040 --> 00:05:31,110
If I to actually grab an individual element value the way I can do that there's two ways.

77
00:05:31,320 --> 00:05:32,650
Let's say I want to grab we.

78
00:05:32,690 --> 00:05:36,770
Let's take a look at our matrix for a quick phone grab 25.

79
00:05:36,780 --> 00:05:37,450
How would I do that.

80
00:05:37,470 --> 00:05:41,350
Well I can say that it's at RHO position 1.

81
00:05:41,670 --> 00:05:48,180
And then as another set of braces or brackets I can say the column position which is again 1 0 0 1.

82
00:05:48,180 --> 00:05:55,620
So it's in the first row or it's in the index one row at the index one column and the x me back 25.

83
00:05:55,650 --> 00:06:00,390
Now more commonly you actually see this done in one step like this one comma one.

84
00:06:00,390 --> 00:06:03,870
So typically this is the way you'll see it done in examples in the documentation.

85
00:06:03,870 --> 00:06:08,310
You'll use this common notation instead of the dual brackets because this common notation will also

86
00:06:08,550 --> 00:06:10,750
expand to slice notation.

87
00:06:11,130 --> 00:06:12,920
So try this one more time.

88
00:06:13,350 --> 00:06:15,010
And what you should do is pick a number.

89
00:06:15,020 --> 00:06:15,800
Kind of in your head.

90
00:06:15,810 --> 00:06:19,050
Pause the video and see if you can index it out using this common notation.

91
00:06:19,290 --> 00:06:21,470
So let's see if you can index out 15.

92
00:06:21,510 --> 00:06:23,770
Go ahead and positivity and try that yourself.

93
00:06:23,820 --> 00:06:25,360
OK I'll do it now.

94
00:06:25,410 --> 00:06:26,430
So if we look at 15.

95
00:06:26,430 --> 00:06:27,220
What ROSETT in.

96
00:06:27,240 --> 00:06:31,340
Well it's in Roseborough and what column is in its index column 2.

97
00:06:31,410 --> 00:06:33,170
And there you have 15.

98
00:06:33,180 --> 00:06:37,450
So let's talk about to the array slicing of we take a look at our matrix again.

99
00:06:37,800 --> 00:06:44,790
All right so to do slicing we end up doing is let's say we wanted to grab 10 15 here and 25 30.

100
00:06:44,790 --> 00:06:50,610
So we wanted to grab this little square 10 15 25 30 then we would do that is we say the rows we want

101
00:06:50,640 --> 00:06:51,900
as a slice.

102
00:06:51,900 --> 00:06:59,110
So basically I want everything from the first row 0 up to but not including index 2.

103
00:06:59,220 --> 00:07:02,250
So I can say colon too.

104
00:07:02,250 --> 00:07:08,600
So as far as the rows go grab everything up to not including two that's rows 0 and rows 1.

105
00:07:08,790 --> 00:07:15,750
And then I actually want the similar aspect of the columns themselves for the columns I want to start

106
00:07:16,260 --> 00:07:22,470
at column one or column index one and then go all the way to the end so 10 15 25 30.

107
00:07:22,470 --> 00:07:27,390
So it's going to be start at column 1 and then go all the way to the end so if I do this then I get

108
00:07:27,390 --> 00:07:30,280
back 10 15 25 30.

109
00:07:30,770 --> 00:07:31,320
OK.

110
00:07:31,680 --> 00:07:35,690
So go ahead and try to pick out another square and see if you can index it.

111
00:07:35,700 --> 00:07:40,780
See if you can index out 2025 and then 35 40 this little square right here.

112
00:07:41,010 --> 00:07:43,100
I'll do that right now as an example.

113
00:07:43,140 --> 00:07:45,840
So 20 and 25 what rows are those in.

114
00:07:45,840 --> 00:07:49,110
Well that's going to be rows 1 and 2.

115
00:07:49,170 --> 00:07:53,790
So we can say the fallings start at row 1 go all the way to the end.

116
00:07:53,810 --> 00:07:59,020
Those are the rows and then for the actual columns will that starting at 0 and then going up to and

117
00:07:59,030 --> 00:08:00,650
not including index 2.

118
00:08:00,710 --> 00:08:02,930
And that's going to be basically opposite.

119
00:08:03,300 --> 00:08:08,140
And there we can see we have 20 25 35 40 essentially the reverse of what we did on the first one.

120
00:08:09,170 --> 00:08:11,800
You put a note book that goes along with his lectures a couple more.

121
00:08:11,800 --> 00:08:13,110
Indexing help examples.

122
00:08:13,240 --> 00:08:18,190
Well actually there's stuff like this too often because we'll mostly use pandas and named indices.

123
00:08:18,190 --> 00:08:23,110
This is just kind of to get your brain in the mode of thinking of to them internal slicing.

124
00:08:23,110 --> 00:08:25,900
But as far as the actual syntax we don't use it that often.

125
00:08:25,990 --> 00:08:29,360
Instead we're mostly going to be doing something called conditional selection.

126
00:08:29,470 --> 00:08:33,570
And this is a really fundamental concept that will directly translate to Pandas in the next section

127
00:08:33,580 --> 00:08:35,760
so make sure you really understand this specific part.

128
00:08:35,770 --> 00:08:39,550
This is a really important topic and it's called again conditional selection.

129
00:08:39,940 --> 00:08:46,670
So conditional selection and to show this off we're going to create an array and it's just going to

130
00:08:46,670 --> 00:08:50,210
be rearranged and we'll say 1 to 11.

131
00:08:50,210 --> 00:08:53,860
So if we took out our array just one through 10 there.

132
00:08:53,980 --> 00:08:59,260
So let's imagine that I wanted to grab elements off of the cerate based off some sort of comparison

133
00:08:59,260 --> 00:09:00,090
operator.

134
00:09:00,100 --> 00:09:05,520
I wanted to grab every element that was greater than for the process for doing this is the following.

135
00:09:06,610 --> 00:09:12,250
I can actually compare my entire array to the number four I can say where is this array greater than

136
00:09:12,250 --> 00:09:13,420
the four.

137
00:09:13,750 --> 00:09:18,140
And it returns back this array of boolean values where the first few ones are false.

138
00:09:18,160 --> 00:09:25,270
So 1 2 3 and 4 are not actually greater than 4 hour 5 and beyond are greater than four so you get true

139
00:09:25,270 --> 00:09:26,050
here.

140
00:09:26,050 --> 00:09:28,080
So this is an array of booleans.

141
00:09:28,120 --> 00:09:33,010
And then what I can do is I can assign will say boolean array.

142
00:09:33,730 --> 00:09:40,810
I can assign that result to this boolean array and then I can grab my original array.

143
00:09:41,930 --> 00:09:47,300
And then passing that array of boolean values and what it ends up doing is it only returns the array

144
00:09:47,540 --> 00:09:50,080
where the boolean values happen to be true.

145
00:09:50,090 --> 00:09:54,000
So again I'm getting this boolean array array greater than 4 Sunday.

146
00:09:54,050 --> 00:09:59,690
So this boolean array and then passing that in to my original array and ends up returning only the values

147
00:09:59,690 --> 00:10:03,020
for the index location matches true here.

148
00:10:03,020 --> 00:10:05,690
So that's how I get 5 6 7 8 9 10.

149
00:10:05,690 --> 00:10:08,990
Now typically you actually don't separate this out into three steps.

150
00:10:08,990 --> 00:10:11,280
Instead what you commonly do is the following.

151
00:10:11,510 --> 00:10:16,850
You grab your array and then say OK give me back where the array is greater than 4 and you get this

152
00:10:16,850 --> 00:10:18,810
sort of notation we see array twice here.

153
00:10:18,830 --> 00:10:23,420
Once inside the braces and once outside the braces and you get back the exact same result.

154
00:10:23,450 --> 00:10:27,800
And this is what's commonly done when you work with some PI and pantless and this is known as conditional

155
00:10:27,800 --> 00:10:28,610
selection.

156
00:10:28,790 --> 00:10:31,730
So you can do the same thing for any sort of comparison operator.

157
00:10:31,730 --> 00:10:38,060
You can say going back where the array is less than or equal to nine and you get back one through nine

158
00:10:38,170 --> 00:10:39,500
etc..

159
00:10:39,500 --> 00:10:43,250
So again conditional selection we're going to see this a lot and we'll get a lot more practice with

160
00:10:43,250 --> 00:10:44,810
this when we work with pandas.

161
00:10:45,020 --> 00:10:50,360
And that's the basics of selection and indexing with some PI if you have any questions feel free to

162
00:10:50,360 --> 00:10:52,040
post them to the Q&amp;A forums.

163
00:10:52,040 --> 00:10:53,540
Thanks and I'll see you at the next lecture.
