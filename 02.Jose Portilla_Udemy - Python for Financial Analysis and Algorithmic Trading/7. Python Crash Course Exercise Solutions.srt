1
00:00:05,480 --> 00:00:09,820
Hello everyone and welcome to the solutions lecture for the python crash course exercises.

2
00:00:10,010 --> 00:00:12,650
Let's hop over to the notebook and get started.

3
00:00:12,650 --> 00:00:12,850
All right.

4
00:00:12,850 --> 00:00:17,480
Here I am at the python crash course exercises notebook and we're going to go ahead and do just scroll

5
00:00:17,480 --> 00:00:18,790
down to the first task.

6
00:00:18,800 --> 00:00:23,740
So task one was given the price is equal to 300 use Python to figure out the square price.

7
00:00:23,750 --> 00:00:27,350
So let's define price equal to 300 by running that sell.

8
00:00:27,410 --> 00:00:29,120
And then there's two ways you could do this.

9
00:00:29,120 --> 00:00:35,690
One way is to take the price and take the exponent to the power of one half.

10
00:00:35,690 --> 00:00:41,240
So one divided by two and that gives you seven point three two or you could just say to the power of

11
00:00:41,240 --> 00:00:42,030
0.5.

12
00:00:42,050 --> 00:00:47,020
That's the same thing as taking the square root of something taking the power to it's reciprocal.

13
00:00:47,180 --> 00:00:51,980
The other way you could do this and we actually showed this during the crash course is you can import

14
00:00:51,980 --> 00:00:58,970
math and then say math as security square root of the price and that returns the same thing.

15
00:00:58,970 --> 00:01:04,430
OK moving on to task number two is given the string stock underscore indexes equal to Espey five hundred

16
00:01:04,430 --> 00:01:08,380
GRABBE 500 from the string using indexing or slicing.

17
00:01:08,390 --> 00:01:15,260
So if we run this find it all you have to do after that is call stock index and then we want 500 So

18
00:01:15,260 --> 00:01:22,440
that's going to start at index 0 1 2 which means we want to go from to Colan all the way to the end.

19
00:01:22,440 --> 00:01:29,480
So we run this and we get back 500 task number 3 was given the variable stock index sequel's espie 500

20
00:01:29,810 --> 00:01:33,580
price 300 used that format to print out the following string.

21
00:01:33,740 --> 00:01:36,220
The S P 500 is 300 say Okay.

22
00:01:36,410 --> 00:01:42,110
So we'll run that to find those two variables and then we'll start off first string will say the curly

23
00:01:42,110 --> 00:01:46,140
braces is at curly braces today.

24
00:01:46,820 --> 00:01:52,650
Then I'll say doc formats and I'm going to pass in stock index and is using tabs autocomplete there

25
00:01:53,090 --> 00:01:55,160
and they'll say tab price.

26
00:01:55,160 --> 00:01:56,050
There we go.

27
00:01:56,080 --> 00:02:01,120
And then print out this entire thing wrapped in parentheses.

28
00:02:01,330 --> 00:02:02,090
And there you go.

29
00:02:02,110 --> 00:02:04,780
S&amp;P 500 is 330.

30
00:02:04,960 --> 00:02:09,470
Task number four given the variable of NSA dictionary if it lists and this one's a little tricky gets

31
00:02:09,490 --> 00:02:14,560
kind of giant variable thing use indexing and he calls to grab the following items to 50 and then number

32
00:02:14,560 --> 00:02:15,480
3 6 5.

33
00:02:15,580 --> 00:02:19,760
So I'm going to zoom out just a little bit so you can see this entire dictionary.

34
00:02:19,960 --> 00:02:22,100
So we have the stock info dictionary.

35
00:02:22,180 --> 00:02:26,660
And what we're gonna do is try to first grab this 250 from it and this is tricky.

36
00:02:26,680 --> 00:02:29,040
First specially if you're not used to this sort of thing.

37
00:02:29,050 --> 00:02:31,090
But let's check out stock info.

38
00:02:31,090 --> 00:02:35,850
And let's just find out what the key is it has so say stock info.

39
00:02:37,050 --> 00:02:42,990
Keys and we can see that the top level keys presented here are espie 500 and info.

40
00:02:42,990 --> 00:02:47,280
These other keys those are in the Knesset keys inside of this other key.

41
00:02:47,280 --> 00:02:50,630
So we don't actually get to see and they're not actually part of stock in folkies.

42
00:02:50,790 --> 00:02:52,770
They're part of the nested dictionary keys.

43
00:02:52,770 --> 00:02:59,970
So the top little keys are SPF 100 and info so I can see that I want to grab S&amp;P 500 first to get back

44
00:03:00,030 --> 00:03:02,220
this dictionary then from that dictionary.

45
00:03:02,230 --> 00:03:05,780
I want to grab yesterday to get back this 250 value.

46
00:03:05,850 --> 00:03:06,990
So that's exactly what I'll do.

47
00:03:07,050 --> 00:03:16,950
I'll say stock info and then I will grab S&amp;P 500 and if I run that I get back today 300 yesterday to

48
00:03:16,970 --> 00:03:18,030
50.

49
00:03:18,070 --> 00:03:24,970
So then I'm going to just do another call here and call yesterday and that gives me back to 250.

50
00:03:24,970 --> 00:03:26,120
So it's stock info.

51
00:03:26,130 --> 00:03:29,260
Key call Espey 500 call yesterday.

52
00:03:29,320 --> 00:03:31,360
The next we want to get is 3 6 5.

53
00:03:31,570 --> 00:03:32,520
So 3 6 5.

54
00:03:32,520 --> 00:03:34,810
We take a look at it it looks like it's on info.

55
00:03:34,810 --> 00:03:39,370
So we'll start off with that we'll say stock info.

56
00:03:40,230 --> 00:03:44,360
Grab the info key that returns this list which is actually in nested list.

57
00:03:44,360 --> 00:03:47,550
We have time and then 24 7 3 6 5.

58
00:03:47,820 --> 00:03:49,820
So now I have to use numerical indexing.

59
00:03:49,830 --> 00:03:57,210
So this list is the second item out of this our list which means I need to use indexing one here and

60
00:03:57,210 --> 00:03:59,730
then that returns back 24 7 3 6 5.

61
00:03:59,730 --> 00:04:07,590
So if I want 365 that is an index to which gives him back 3 6 5 sose info then one then two.

62
00:04:07,710 --> 00:04:11,380
And if get trouble of these don't worry about too much but a really great practice.

63
00:04:11,410 --> 00:04:15,140
It just kind of break down the layers so keep kind of peeling away at this.

64
00:04:15,140 --> 00:04:17,280
To get an idea of what's actually happening here.

65
00:04:18,880 --> 00:04:23,160
Now let's go to task 5 which is given the strings with this form or the last source value is always

66
00:04:23,170 --> 00:04:24,460
separated by two dashes.

67
00:04:24,460 --> 00:04:25,580
That's kind of the key here.

68
00:04:25,750 --> 00:04:30,760
Always separated by two dashes create a function called Source finder returns the source.

69
00:04:30,760 --> 00:04:33,710
So that's actually going to be pretty simple the split method.

70
00:04:33,790 --> 00:04:36,720
So it's going to zoom in here and write or function.

71
00:04:36,760 --> 00:04:41,920
So to start off to actually create the function will use the DFA keyword and then we'll type out source

72
00:04:41,920 --> 00:04:47,950
finder and we'll just accept that string and then what I'm going to do on the string is I'm going to

73
00:04:47,950 --> 00:04:49,920
split these two dashes.

74
00:04:50,050 --> 00:04:57,280
So I'm going to return the string and I'm going to split it on the two Ashes.

75
00:04:57,370 --> 00:05:03,220
So if I just run this I will get back a list where the last item on my list is always going to be equal

76
00:05:03,220 --> 00:05:10,450
to that source which means I can just index it say negative 1 and then off of that I get quando the

77
00:05:10,450 --> 00:05:10,930
source.

78
00:05:10,930 --> 00:05:15,970
So I'm just splitting those two dashes and then grabbing the last item in that list of the split result.

79
00:05:17,590 --> 00:05:23,450
Or I test them for 5st a function called Price finder that returns true if the word price is in a string.

80
00:05:23,450 --> 00:05:27,180
So your function should work even if price is capitalized or next to punctuation.

81
00:05:27,200 --> 00:05:28,940
So the way we do that is the following.

82
00:05:29,030 --> 00:05:35,990
We will say DMF resume here one more level and then we'll say price underscore Finder.

83
00:05:36,280 --> 00:05:46,460
It's going to take in some string as it's going to return checking if the string price is in S.

84
00:05:46,480 --> 00:05:51,670
So if we just do that by itself it's actually not enough because it's going to happen is a trigger for

85
00:05:51,670 --> 00:05:52,630
this first one.

86
00:05:52,780 --> 00:05:56,800
But for the second one it will say false because this is capitalized and it's looking for this exact

87
00:05:56,800 --> 00:05:58,540
stream.

88
00:05:58,560 --> 00:06:03,440
So the next thing we can do here is on s I will call the DOT lower method.

89
00:06:03,600 --> 00:06:09,120
And so what that ends up doing is it lower case a string and then checks if price it lower case is in

90
00:06:09,120 --> 00:06:13,830
the lower case version of string and then we'll get true off all these.

91
00:06:14,290 --> 00:06:20,040
Okay task number 6 is to create a function called Count price that counts the number of times the word

92
00:06:20,040 --> 00:06:22,690
price occurs in the string.

93
00:06:22,800 --> 00:06:26,940
And it says to account for capitalization afterward is next to punctuation.

94
00:06:26,940 --> 00:06:29,520
So that one's probably a little more complicated of a function.

95
00:06:29,790 --> 00:06:39,600
We're going to say if cowled price takes in a string and we'll say count as equal to zero at first so

96
00:06:39,600 --> 00:06:41,790
we'll initialize our count and then we're going to do the following.

97
00:06:41,780 --> 00:06:54,030
We'll say four word in and I'm going to say as the lower and then we'll split it all the whitespace.

98
00:06:54,200 --> 00:07:06,170
We're going to say if price is an word I'm going to add one to my count I'll say counts as equal to

99
00:07:06,170 --> 00:07:08,670
counts plus 1.

100
00:07:09,110 --> 00:07:11,750
Then at the end of this once the for loop is done.

101
00:07:11,780 --> 00:07:15,040
Note in the station here I'm going to return the counts.

102
00:07:15,200 --> 00:07:16,420
So no the and then Station.

103
00:07:16,430 --> 00:07:21,650
I'm not doing Return here in the 4 instead I'm doing it aligned with the four.

104
00:07:21,710 --> 00:07:23,530
So it does actually this is the following.

105
00:07:23,530 --> 00:07:30,500
It's going to say set my count equal to zero then four word in estopped lower at that split that's going

106
00:07:30,500 --> 00:07:34,980
to lower case everything then split it on the whitespace which gives me back a list of the lowercase

107
00:07:35,000 --> 00:07:40,280
words if price is in that lowercase version of the word Adelanto the count.

108
00:07:40,280 --> 00:07:41,890
And then finally return the count.

109
00:07:42,140 --> 00:07:45,220
So I can run this and you get three.

110
00:07:45,270 --> 00:07:46,330
So that also works.

111
00:07:46,350 --> 00:07:54,720
There's actually a simpler method and the simpler method is to just say if Count price then you're going

112
00:07:54,720 --> 00:07:56,870
to return the lower.

113
00:07:57,150 --> 00:07:59,640
And then there's actually another method you can call called Count.

114
00:07:59,660 --> 00:08:01,980
You kind of stack these methods on top of each other.

115
00:08:02,040 --> 00:08:05,410
You can just say that count price and that works the exact same way.

116
00:08:05,730 --> 00:08:09,270
This was a little more advanced than I would expect you to kind of get it right away unless you're familiar

117
00:08:09,270 --> 00:08:10,260
with Python.

118
00:08:10,260 --> 00:08:12,040
This is kind of the more logical way to do it.

119
00:08:13,890 --> 00:08:17,850
And then finally test number 7 create a function called average price that takes in a list of stock

120
00:08:17,850 --> 00:08:19,850
price numbers and calculates the average.

121
00:08:19,980 --> 00:08:28,620
So all we need to do here is say the average price takes in some stocks and then I'm going to return

122
00:08:29,980 --> 00:08:32,040
the some of the stocks in this one.

123
00:08:32,060 --> 00:08:35,900
You may have had to look up the word some was a big enough hint there.

124
00:08:37,070 --> 00:08:42,790
And then divided by the length of the stocks.

125
00:08:43,010 --> 00:08:43,950
And there you have it.

126
00:08:44,300 --> 00:08:44,750
OK.

127
00:08:44,750 --> 00:08:49,730
Hope that those tests weren't too hard for you if you felt that this was kind of an overwhelming challenge.

128
00:08:49,760 --> 00:08:54,800
I would recommend you take some sort of refresher course in basic Python if you felt these were pretty

129
00:08:54,800 --> 00:08:57,620
easy or you know OK that's good.

130
00:08:57,620 --> 00:09:00,910
That's exactly what we should be to continue on with the rest of the course.

131
00:09:01,010 --> 00:09:03,950
If you have any questions feel free to post the Q&amp;A forums.

132
00:09:03,950 --> 00:09:05,400
Thanks and I'll see you at the next section.
