WEBVTT
1
00:00:05.410 --> 00:00:11.080
Welcome back everyone and welcome to this lecture on Pandurs visualisations Panas has amazing visualization

2
00:00:11.080 --> 00:00:11.970
capabilities.

3
00:00:12.010 --> 00:00:16.360
And if you set your data frame right you can pretty much create almost any visualization of a single

4
00:00:16.360 --> 00:00:17.240
line of code.

5
00:00:17.440 --> 00:00:20.050
Let's go ahead and show you some examples.

6
00:00:20.050 --> 00:00:26.200
All right here I am at this notebook and I'm going to go out and say important PI and P are going to

7
00:00:26.290 --> 00:00:34.120
import pandas as PD and then I'm also going to specify plot lib in line so I can see that data visualizations

8
00:00:34.210 --> 00:00:41.740
inside of the actual notebook and then the CSP files are going to upload are the ones I want to say.

9
00:00:41.740 --> 00:00:45.310
PD Reed cxxviii pasand DBF one.

10
00:00:45.320 --> 00:00:52.380
And for if one also going to specify that the index be the first column at index 0.

11
00:00:52.390 --> 00:00:58.060
So now if I look at the one I can see that the index is actually a time series and that's going to be

12
00:00:58.060 --> 00:01:00.130
important when we actually visualize that out.

13
00:01:00.280 --> 00:01:08.770
And then for a non-time series index and going it say PD read cxxviii and then pass and just to that

14
00:01:08.780 --> 00:01:10.940
are for Take a look at the two said.

15
00:01:11.010 --> 00:01:15.690
Very similar except this is just read data and it has a sequential index.

16
00:01:15.690 --> 00:01:16.230
All right.

17
00:01:16.470 --> 00:01:21.530
Let me go ahead and just show you a quick example of what you can do with these sort of data frames

18
00:01:21.530 --> 00:01:22.630
in these columns.

19
00:01:22.650 --> 00:01:29.680
Imagine we wanted to get a histogram of all the values in the A column for data one well pandas can

20
00:01:29.680 --> 00:01:30.270
actually do that.

21
00:01:30.330 --> 00:01:38.290
Rectally we can just call the EF 1 and then call hissed off of this and it will actually automatically

22
00:01:38.440 --> 00:01:42.760
start creating a histogram and note that it's actually calling that live under the hood.

23
00:01:42.970 --> 00:01:48.310
And you can begin to add in that plot lib arguments or even see more style arguments like the number

24
00:01:48.310 --> 00:01:50.230
of bins you want in this histogram.

25
00:01:50.580 --> 00:01:51.230
OK.

26
00:01:51.670 --> 00:01:55.740
Now something to note is this style actually isn't very good looking.

27
00:01:55.750 --> 00:01:56.800
In my opinion.

28
00:01:56.980 --> 00:02:01.480
So what you can do in order to fix that is if you come up to the top or really anywhere in the notebook

29
00:02:01.870 --> 00:02:08.160
go ahead and say import Seaborn as asinus.

30
00:02:08.290 --> 00:02:13.520
And once that's imported If you start running these cells again it will look like a seaborne plot.

31
00:02:13.670 --> 00:02:14.670
Now look a little nicer.

32
00:02:14.680 --> 00:02:15.940
So it's something I like to do.

33
00:02:15.970 --> 00:02:23.110
You can actually see turnstyles and the panderers calls will look like them pandas has several plot

34
00:02:23.140 --> 00:02:28.540
types built into it and we're going to do just briefly go and show examples of how to create these plots.

35
00:02:28.810 --> 00:02:34.930
Pretty much all the plots can be done through a command off of the data frame and you can basically

36
00:02:34.930 --> 00:02:40.000
do this with two methods you can call the data frame itself or call a column off the data frame.

37
00:02:40.000 --> 00:02:47.220
Let's go in and just do a column now and you can call plots and then under the arguments of plot specific

38
00:02:47.220 --> 00:02:49.350
kind and there is a list in your notebook.

39
00:02:49.360 --> 00:02:53.680
And we're going to go through out this list and then you specify the key word of the kind.

40
00:02:53.680 --> 00:02:57.010
So if I wanted a histogram I could also create it this way.

41
00:02:57.010 --> 00:03:03.490
And then here you can add an histogram arguments such as the number of minutes you want.

42
00:03:03.510 --> 00:03:09.300
So that's one method of creating For example a histogram off of a data frame column called dot plot

43
00:03:09.510 --> 00:03:11.100
and then call kind.

44
00:03:11.100 --> 00:03:16.980
All right the other way you can call a plot using pandas is instead of specifying kind equals hissed

45
00:03:17.280 --> 00:03:24.030
you can actually call hist directly off of plot so you can say dot plot and then hist and this will

46
00:03:24.030 --> 00:03:25.710
also create the plot.

47
00:03:25.710 --> 00:03:29.790
This is the method we're going to be using throughout the rest of this lecture so we either grab the

48
00:03:29.790 --> 00:03:35.450
entire data frame or the column called dot plot and then call dot whatever the plot type we want.

49
00:03:35.700 --> 00:03:38.860
Let's go ahead and just go through all the plot types and check them out.

50
00:03:39.970 --> 00:03:45.350
So let's go ahead and work with these two which is the non-time series.

51
00:03:45.350 --> 00:03:54.130
So as an example it just has a normal index and one plot you can do is an area plot so you can go in

52
00:03:54.130 --> 00:04:00.880
and specify plot that area and it is essentially just going to show an area plot and what you can also

53
00:04:00.880 --> 00:04:04.790
do is specify Alpha as an argument here.

54
00:04:04.840 --> 00:04:10.310
If you want some more transparency so you can say Alfas equal to 0.4.

55
00:04:10.600 --> 00:04:15.850
And this shows some transparency here and this is just showing the area of the values.

56
00:04:16.150 --> 00:04:20.320
You can essentially just think of this as a normal line plot except the area underneath it has been

57
00:04:20.320 --> 00:04:22.710
filled in with some sort of color.

58
00:04:22.720 --> 00:04:24.540
All right that's an area of plot.

59
00:04:24.610 --> 00:04:27.490
And again very easy to call off the data frame.

60
00:04:27.490 --> 00:04:35.010
Let's go ahead and take a look at Bart plot's so you can say Hasen you're a data frame to plot and then

61
00:04:35.010 --> 00:04:36.310
bar.

62
00:04:36.520 --> 00:04:40.930
And so automatically create a bar plot.

63
00:04:41.070 --> 00:04:45.240
And what this does is it just takes the index value basically as a category.

64
00:04:45.240 --> 00:04:48.410
So in this case your index should be categorical.

65
00:04:48.660 --> 00:04:52.980
Our data frame is actually small enough so this makes sense if we take a look at the data frame it only

66
00:04:52.980 --> 00:04:54.020
has 0.39.

67
00:04:54.030 --> 00:04:55.060
So this works.

68
00:04:55.140 --> 00:04:58.500
A typical data frame with a sequential index you probably would want to do this.

69
00:04:58.680 --> 00:05:04.180
But if it's a categorical index then as a category they'll just list the values per each column.

70
00:05:04.380 --> 00:05:12.110
Then you can actually also create this to be stacked by passing in stacked equals true and you'll get

71
00:05:12.110 --> 00:05:16.790
a plot that looks like this basically the exact same thing it's set except at stacking the values.

72
00:05:16.790 --> 00:05:20.380
Personally I would actually recommend that ease see more and for these types of plots.

73
00:05:20.510 --> 00:05:24.980
But if you just doing some very quick analysis this sort of thing is going to work for you.

74
00:05:24.980 --> 00:05:29.740
Just calling it off a pandas now it's call histogram.

75
00:05:29.780 --> 00:05:32.050
Just to clarify what it looks like again.

76
00:05:32.050 --> 00:05:39.360
So going to call say if one a dot plot just we've seen this before.

77
00:05:39.550 --> 00:05:42.880
And here's our histogram and you can specify the number of bins you want.

78
00:05:42.900 --> 00:05:50.020
So if you want a larger number of bins in order to get a little more clarity as far as Panthers plots

79
00:05:50.050 --> 00:05:56.150
go and doing stuff that's built into Pandurs histograms are probably the one to use the most.

80
00:05:56.240 --> 00:06:00.630
You can also do line plot's which is another common one that I like to use for Pandurs.

81
00:06:00.800 --> 00:06:02.490
For example if we check out the IF one.

82
00:06:02.500 --> 00:06:05.200
Remember that's our time series index.

83
00:06:05.360 --> 00:06:09.220
Let's imagine that we wanted to plot the data of one of these time series.

84
00:06:09.260 --> 00:06:13.190
Can Go ahead just say dÃ­a one plot and then call line.

85
00:06:13.190 --> 00:06:20.120
This is just going to create a line plot and for the line plot you have to specify the X and the Y.

86
00:06:20.120 --> 00:06:29.010
So in this case I want the X to be my actual index so I can say if one index and I want my y to be one

87
00:06:29.010 --> 00:06:31.950
of these columns then you pass and the column is a string.

88
00:06:31.950 --> 00:06:33.100
So I want to go and just pass it.

89
00:06:33.120 --> 00:06:35.310
Let's say be.

90
00:06:35.510 --> 00:06:41.350
And if I just run this I get a plot that looks something like this generally just a line plot.

91
00:06:41.390 --> 00:06:45.500
So you can imagine if this was stock information and you wanted to plot it out versus time you can get

92
00:06:45.500 --> 00:06:46.990
something that looks like this.

93
00:06:47.090 --> 00:06:49.720
And this is all built off of that plot lib.

94
00:06:49.850 --> 00:06:53.840
You can begin adding map plot lib arguments such as the size you want.

95
00:06:53.840 --> 00:06:56.930
So you want something much wider.

96
00:06:57.000 --> 00:06:58.580
You can do something like this.

97
00:06:58.710 --> 00:07:01.450
Or let's say I wanted to adjust the line with.

98
00:07:01.490 --> 00:07:04.650
Well you can just do LW just like we saw for about plotting.

99
00:07:05.250 --> 00:07:09.080
And so the line with to something a little skinnier you can get in markers.

100
00:07:09.090 --> 00:07:10.900
All these other map plotless commands.

101
00:07:10.950 --> 00:07:15.630
So everything you learn about MAP plot live can be applicable to these data frame plots.

102
00:07:15.630 --> 00:07:24.010
Now let's go ahead and check out scatterplot So let's say I have one I can say plot scatter and you're

103
00:07:24.010 --> 00:07:26.050
going to have to specify an x and y.

104
00:07:26.080 --> 00:07:30.750
So for this let's just go ahead and pass the streams of column names.

105
00:07:31.000 --> 00:07:35.820
So a b and this will create a nice looking scatterplot for us.

106
00:07:35.930 --> 00:07:40.440
Something else you can do is actually set the color based off in another column.

107
00:07:40.730 --> 00:07:49.740
So for instance you can say see the color is going to be equal off column C.

108
00:07:49.810 --> 00:07:52.810
So if I just read that it gets me a black and white.

109
00:07:52.810 --> 00:07:58.920
So if I take a look at the if one just clarify what we're doing here the different one we have a value

110
00:07:58.920 --> 00:08:02.190
for A and B and we have a value for c..

111
00:08:02.430 --> 00:08:05.780
So essentially we're showing now three levels of information.

112
00:08:05.850 --> 00:08:07.860
Three dimensional plot if you will.

113
00:08:07.860 --> 00:08:12.790
Since we have A versus B and then a third argument see displayed by color.

114
00:08:12.810 --> 00:08:17.910
Now you can actually pasan see math as an arguments and passing your own color map.

115
00:08:17.910 --> 00:08:23.430
So for instance cool warm which you've seen before and now you're showing three levels of information

116
00:08:23.580 --> 00:08:25.330
A versus B where they stand.

117
00:08:25.470 --> 00:08:27.680
And then the color value for c..

118
00:08:27.720 --> 00:08:31.980
Sometimes people don't like to show things by color but prefer to show them by size.

119
00:08:32.130 --> 00:08:35.920
You can actually do that as well instead of passing C as an argument here.

120
00:08:36.900 --> 00:08:38.080
You'll just go ahead and pass it.

121
00:08:38.120 --> 00:08:44.000
S and for s You'll go ahead and pass in a data frame column.

122
00:08:44.050 --> 00:08:50.380
So for this you have to actually passen the data frame column itself and you probably just do this.

123
00:08:50.380 --> 00:08:51.690
The point will be too small.

124
00:08:52.820 --> 00:08:59.840
And what you can do is multiply this by some sort of factor so you can see the points are a versus B

125
00:09:00.020 --> 00:09:07.120
and the size indicates how much larger value was relative to each other.

126
00:09:07.130 --> 00:09:10.670
All right but this is the kind of thing where you probably wouldn't remember this off the top of your

127
00:09:10.670 --> 00:09:15.320
head you would go back to Jupiter a notebook that I have assembled for you and use that as a reference

128
00:09:15.560 --> 00:09:17.690
or check out the documentation.

129
00:09:17.690 --> 00:09:20.570
Let's go ahead and move on to box plots again.

130
00:09:20.600 --> 00:09:25.820
I really like see more box plots but if you just want a quick analysis of a box plot pandas can do that

131
00:09:25.820 --> 00:09:33.930
for you as well to just pass on your whole data frame call plot call box and you can see a box plot

132
00:09:34.080 --> 00:09:36.850
that's basically automatically for you per column.

133
00:09:36.870 --> 00:09:42.450
So it just takes every column as a category and then plots the distributions for you as a box plot.

134
00:09:42.510 --> 00:09:43.290
All right.

135
00:09:43.290 --> 00:09:50.550
For by various data you can do a hexagonal plot which you'd actually seen before with panderers excuse

136
00:09:50.550 --> 00:09:51.480
me with Seaborn.

137
00:09:51.790 --> 00:09:55.990
But let me go and make a new data frame for this to actually show up correctly.

138
00:09:56.100 --> 00:10:03.890
So I want to say PD data frame going to pass in some random data Rande then and I'm going to have this

139
00:10:03.890 --> 00:10:11.930
be 1000 by let's say two and then I'm going to pass in the columns to be just a and b

140
00:10:15.180 --> 00:10:18.250
and if we take a look at our data frame looks something like this.

141
00:10:18.250 --> 00:10:19.290
Just some random data.

142
00:10:19.330 --> 00:10:20.470
A freebie.

143
00:10:20.470 --> 00:10:26.920
I just wanted some more random points here and what I can do since this is by variant are two variables

144
00:10:26.920 --> 00:10:27.210
here.

145
00:10:27.250 --> 00:10:36.930
And B I can say plot Hexton and x is equal to a mass and Y is equal to B.

146
00:10:36.930 --> 00:10:40.340
And if you just do this you will get a hex plot.

147
00:10:40.560 --> 00:10:44.790
Now this is essentially like a scatterplot except it's the hexagonal bins.

148
00:10:44.790 --> 00:10:47.090
Right now the bin size is really quite small.

149
00:10:47.340 --> 00:10:52.910
So to change that we can say grid size is equal to 25.

150
00:10:53.190 --> 00:10:59.340
And this will enlarge the size of the hexagons and essentially the hexagons get darker as there's more

151
00:10:59.340 --> 00:11:05.340
points inside of them and you can also change the color mapping here and say See map is equal to something

152
00:11:05.340 --> 00:11:05.790
else.

153
00:11:05.790 --> 00:11:10.350
For instance if we wanted cool Warum to be our color mapping you could do that as well.

154
00:11:11.600 --> 00:11:15.610
And then finally we can do kernel density estimation plots.

155
00:11:15.680 --> 00:11:21.620
So if for some reason you don't just want a histogram but you want kernel density estimation you can

156
00:11:21.620 --> 00:11:29.520
call your data frame or a column off your data frame and then the save plot KDE in it will create this

157
00:11:29.520 --> 00:11:35.550
kernel density estimation plot for you and you can do the same thing with density which is another call

158
00:11:35.550 --> 00:11:36.030
you can make.

159
00:11:36.030 --> 00:11:41.460
So in say density and that will be the same thing.

160
00:11:41.460 --> 00:11:46.240
So if you want density or kernel density estimation plot those will be the same thing and you can actually

161
00:11:46.240 --> 00:11:48.910
do this off the entire data frame as well.

162
00:11:48.910 --> 00:11:55.020
You don't have to do it just off of one column if you wanted to compare the density it kernel density

163
00:11:55.030 --> 00:12:00.460
estimation plot of all the columns in your data frame I hope you found this useful and I will see you

164
00:12:00.460 --> 00:12:04.570
at the next lecture or we're going to describe the quick exercise for you to practice what we just learned

165
00:12:04.570 --> 00:12:05.300
here.

166
00:12:05.320 --> 00:12:07.040
Thanks everyone and I'll see you at the next lecture.
