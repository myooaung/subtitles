1
00:00:05,450 --> 00:00:09,210
Hello everyone and welcome to part one of the Arema code along lecture.

2
00:00:09,290 --> 00:00:14,390
We're actually going to be using Python since that's models to implement Arema and seasonal Arema on

3
00:00:14,390 --> 00:00:15,660
a real data set.

4
00:00:15,710 --> 00:00:20,450
And I think at the end of this entire series of lectures you'll get a good understanding of why Arema

5
00:00:20,750 --> 00:00:25,060
probably may not always be a good choice for financial data and stock information.

6
00:00:25,280 --> 00:00:28,280
Let's hop over to a Jupiter note book and get started.

7
00:00:28,280 --> 00:00:33,350
OK here I am at a new Jupiter notebook and the general process for Arena models is the following.

8
00:00:33,350 --> 00:00:37,720
First we want to visualize the time series data actually get to understand it.

9
00:00:37,850 --> 00:00:43,280
Then you want to make the time series data stationary if necessary they will want to plot the correlation

10
00:00:43,310 --> 00:00:44,900
and autocorrelation charts.

11
00:00:44,900 --> 00:00:49,880
Remember that's the HCF and then also partial autocorrelation charts that will help us understand what

12
00:00:49,880 --> 00:00:54,440
parameters what values we should use when we construct our Arema model that we actually use that model

13
00:00:54,440 --> 00:00:56,540
to make predictions on future data points.

14
00:00:56,540 --> 00:00:58,030
That is called forecasting.

15
00:00:58,190 --> 00:01:02,210
So when you go through all these steps and the very first step is to actually get the data.

16
00:01:02,390 --> 00:01:05,260
So we're going to be using some data about monthly milk production.

17
00:01:05,270 --> 00:01:10,520
It's a seasonal data set and it's already saved the C S V file for you under the time series analysis

18
00:01:10,520 --> 00:01:11,100
folder.

19
00:01:11,210 --> 00:01:17,450
But let's go ahead and do a couple of imports here and get it loaded up going to just do the usual ones.

20
00:01:17,560 --> 00:01:28,210
Well important on Pi isn't the import pand this is PD will import stat's models API as S M and then

21
00:01:28,640 --> 00:01:34,740
last visualisations will say important plot lib pipe plot as Piel T.

22
00:01:34,860 --> 00:01:37,030
And if you get this warning Don't worry it's just a warning.

23
00:01:37,030 --> 00:01:42,230
Later on they'll updates that's models to be up to date so the latest panel's version is just a warning.

24
00:01:42,240 --> 00:01:43,520
It's not actually an error.

25
00:01:43,810 --> 00:01:48,240
And finally it will say that plug lib in line.

26
00:01:48,260 --> 00:01:52,560
OK so let's go ahead and read in that dataset will say DFAC equal to PD.

27
00:01:52,580 --> 00:01:57,380
Let me zoom in one more level here will say DFAC equal to PD.

28
00:01:57,380 --> 00:02:04,480
Read the underscore c v and R file that were going to be working with is called the monthly milk production.

29
00:02:04,490 --> 00:02:05,930
So let's go ahead and grab that.

30
00:02:06,050 --> 00:02:10,100
Say monthly and we should build hit TAB autocomplete.

31
00:02:10,310 --> 00:02:12,220
I can it because I'm in the same directory.

32
00:02:12,260 --> 00:02:17,180
If you're not in the same directory just passing the whole file path to the CSP file and then we're

33
00:02:17,180 --> 00:02:23,940
going to check out the head of this OK so we have this month column and then this kind of awkwardly

34
00:02:23,940 --> 00:02:26,880
named monthly milk production pounds per cow.

35
00:02:26,970 --> 00:02:34,330
January 62 to 75 and there's little question mark there because it wasn't able to interpret that letter.

36
00:02:34,410 --> 00:02:39,000
OK so we're going to do now is kind of work with this data and make sure it's in the correct format

37
00:02:39,000 --> 00:02:40,180
for our Erina model.

38
00:02:40,260 --> 00:02:41,900
Couple of things we probably want to change this.

39
00:02:41,900 --> 00:02:43,730
This is a really long name.

40
00:02:43,800 --> 00:02:46,850
It's unnecessary to say in the column name or that they are.

41
00:02:46,920 --> 00:02:51,460
We also want to change this month to be a date time index and get rid of this normal index.

42
00:02:51,480 --> 00:02:54,850
So let's go ahead and clean it up.

43
00:02:54,900 --> 00:02:59,580
We'll start off by just rename in the columns I'm going to say these columns.

44
00:02:59,580 --> 00:03:06,030
Let's go ahead and keep month that works for now and then we'll say for this other column will say milk

45
00:03:06,120 --> 00:03:06,690
in

46
00:03:09,430 --> 00:03:11,340
pounds per cow.

47
00:03:14,030 --> 00:03:15,830
And Sue the Fed.

48
00:03:16,130 --> 00:03:17,890
OK so we get milk and pounds per cow.

49
00:03:18,050 --> 00:03:19,760
We got rid of this kind of awkwardly.

50
00:03:19,760 --> 00:03:26,980
January 6 to December 75 portion and then we're also going to do so if we check the tail of this data

51
00:03:27,010 --> 00:03:27,390
frame.

52
00:03:27,400 --> 00:03:30,280
You know this is kind of weird a value here for that month.

53
00:03:30,280 --> 00:03:32,800
It's like a string and then it's missing some data.

54
00:03:33,010 --> 00:03:43,490
So we're going to do is we're going to drop that sort to say DSF drop 1 6 8 axes is equal to zero.

55
00:03:43,930 --> 00:03:47,220
And we'll say in place equals true.

56
00:03:47,480 --> 00:03:52,430
And then if I check out my tail now I've gotten rid of that index for the 168.

57
00:03:52,700 --> 00:03:53,420
OK.

58
00:03:53,420 --> 00:03:58,550
Up next we're going to convert the monthly column to a date time column and that's easy we know how

59
00:03:58,550 --> 00:04:09,730
to do that we just say a month instead of equal to the to date time and then we'll see if now if I took

60
00:04:09,730 --> 00:04:14,150
out the head of my data set it should look the same except now I have a little day here in the Kading

61
00:04:14,150 --> 00:04:15,080
that it's month.

62
00:04:15,530 --> 00:04:19,760
So let's continue on in this next step.

63
00:04:19,760 --> 00:04:26,710
We're going to do is actually set the index so they set the index to be the month column and we'll have

64
00:04:26,710 --> 00:04:33,970
this be in place equals true so that if I check up the head of my data frame I have converted this month

65
00:04:33,970 --> 00:04:35,840
index milk in pounds per cow.

66
00:04:35,980 --> 00:04:42,130
It's a time series I can confirm that by saying the appendix and I see it's the time index and perfect

67
00:04:42,430 --> 00:04:47,760
and as a nice little final step we can do here now that we've cleaned up the data is called the scribe

68
00:04:47,760 --> 00:04:48,310
on this.

69
00:04:48,340 --> 00:04:55,180
And then I I personally like to transpose the scribe data frame so I get it out kind of like this nice

70
00:04:55,180 --> 00:04:55,970
one row.

71
00:04:56,080 --> 00:04:56,940
I can see the count.

72
00:04:56,980 --> 00:05:01,480
The means turn deviation the max etc. just typical information.

73
00:05:01,660 --> 00:05:07,600
And I have 168 rows looks like on average it's seven 754 pounds of milk per cow.

74
00:05:07,630 --> 00:05:13,270
So now we're on to Step Two numbers Step two is to visualize the data.

75
00:05:13,460 --> 00:05:18,840
So this is actually quite easy for us essentially just to index and one column so we can say the plot.

76
00:05:19,100 --> 00:05:24,380
I can see here the milk in pounds per cow and you should immediately start thinking this is seasonal

77
00:05:24,380 --> 00:05:25,010
data.

78
00:05:25,040 --> 00:05:27,170
Clearly there's some sort of seasonal behavior.

79
00:05:27,260 --> 00:05:32,080
So we have a seasonality portion to it and it seems to also have a trend that seems to be trending upwards

80
00:05:32,090 --> 00:05:32,840
a little bit.

81
00:05:33,050 --> 00:05:38,120
So what you should also be thinking is hey I can confirm that it has a trend that's back and that it

82
00:05:38,150 --> 00:05:44,390
has a seasonality aspect by actually doing some sort of on this some sort of error trend seasonality

83
00:05:44,390 --> 00:05:45,740
decomposition.

84
00:05:45,740 --> 00:05:48,340
So we're going to explore that later on in just a little bit.

85
00:05:48,680 --> 00:05:55,400
But what I also want to show is calculating for instance the 12 month rolling average or simple average.

86
00:05:55,410 --> 00:06:06,340
So let's go ahead and say my time series is equal to DSF milk in pounds per cow just tab autocomplete

87
00:06:06,500 --> 00:06:07,190
there.

88
00:06:07,200 --> 00:06:12,420
So now if I check the type of Time series it's a series instead of just a data frame.

89
00:06:12,420 --> 00:06:17,280
And I just reassigned that to time series so I don't have to keep typing out this giant column name.

90
00:06:17,340 --> 00:06:22,750
So then what I'm going to do is just grab my time series and I'm going to call rolling on it.

91
00:06:24,070 --> 00:06:30,460
And let's go ahead and calculate the sense of what is a 12 month rolling simple average and the simple

92
00:06:30,460 --> 00:06:36,610
moving average is a reflection of the yearly moving average because remember each row at each index

93
00:06:36,610 --> 00:06:41,430
position is a month worth of data which means total those months that's a year.

94
00:06:41,500 --> 00:06:43,130
So that I'm going to plot this.

95
00:06:43,180 --> 00:06:54,240
And let's just give this a label will say 12 month ruling mean and then I'm also going to plot the time

96
00:06:54,240 --> 00:06:55,180
series itself.

97
00:07:00,650 --> 00:07:05,780
All right so if we see this we can see here that this 12 month rolling mean is definitely showing some

98
00:07:05,780 --> 00:07:07,360
sort of upward trend the milk.

99
00:07:07,370 --> 00:07:12,440
It's also pretty obvious just to our eyes that there is some sort of upward trend here and we can kind

100
00:07:12,440 --> 00:07:16,240
of almost just visually here separate the trend versus the seasonality.

101
00:07:16,370 --> 00:07:23,680
And what's also common to do in these sort of plots is to plot out the standard deviation So we want

102
00:07:23,680 --> 00:07:26,220
to kind of check is the variance changing at all.

103
00:07:26,290 --> 00:07:32,630
So we'll say SDD here and we'll say instead of rolling I mean I'll say SDD.

104
00:07:32,630 --> 00:07:38,670
So this kind of checking hey on a yearly basis is the standard deviation changing a lot is when you're

105
00:07:38,670 --> 00:07:40,700
kind of crazy for milk production.

106
00:07:40,740 --> 00:07:46,570
Now let's go ahead and say peel tea legend so we can see the actual names of the columns in that plot.

107
00:07:46,860 --> 00:07:51,630
And this is a really common plot you'll see with time series data where you see the actual data the

108
00:07:51,660 --> 00:07:57,690
kind of rolling mean or simple moving average trend line and then usually at the bottom you'll see some

109
00:07:57,690 --> 00:07:58,710
rolling standard deviation.

110
00:07:58,710 --> 00:08:03,390
Usually the scale of standard deviation is much lower than the actual values and that pretty much makes

111
00:08:03,390 --> 00:08:05,710
sense for most time series data sets.

112
00:08:05,870 --> 00:08:11,130
Well you don't want to see is kind of some crazy behavior here on this 12 month rolling standard deviation

113
00:08:11,220 --> 00:08:15,080
if in comparison it looks pretty flat to and compare to your normal dataset.

114
00:08:15,100 --> 00:08:18,060
Then you know you're dealing with something that's pretty workable.

115
00:08:18,410 --> 00:08:19,020
All right.

116
00:08:19,020 --> 00:08:24,480
Now the next thing we can check out visually is our ETF the composition plot that is the air trend and

117
00:08:24,480 --> 00:08:26,300
seasonality the composition.

118
00:08:26,340 --> 00:08:31,580
Remember that the composition plot what it does is it mathematically separates out the trend component.

119
00:08:31,710 --> 00:08:36,240
The seasonality component and then the residual that's the error that's not explained by seasonality

120
00:08:36,270 --> 00:08:37,200
or trend.

121
00:08:37,400 --> 00:08:40,380
It plots them up nicely for us and we can do that.

122
00:08:40,410 --> 00:08:42,890
That's model pretty easily.

123
00:08:42,960 --> 00:08:55,250
So we end up saying we'll save from stat's models that TSA that seasonal import seasonal decompose and

124
00:08:55,250 --> 00:09:03,250
then will go ahead and do is we'll say the composition or it will just say the comp here is equal to

125
00:09:03,280 --> 00:09:08,770
seasonal decompose and then we'll pass in that time series that we've been messing around with.

126
00:09:08,770 --> 00:09:12,600
Remember that's just the milk in pounds column from our data frame.

127
00:09:12,910 --> 00:09:20,330
And then all we have say is the comp that plot and we'll get back our decomposition data.

128
00:09:20,480 --> 00:09:27,250
So our the composition you can see the observed values the trend the seasonal values and then the residual.

129
00:09:27,250 --> 00:09:32,200
You'll notice here that because of the way that's models currently interacts with Jupiter notebook you

130
00:09:32,200 --> 00:09:35,440
end up getting two plots and that's the way it's returning the plot.

131
00:09:35,440 --> 00:09:38,980
So if you actually want to make sure that you just get a single plot we can and that doing is something

132
00:09:38,980 --> 00:09:46,220
like this you can set fig equal to D-cup that plot and then you'll get back one plot.

133
00:09:46,220 --> 00:09:51,980
Now what's also nice about this is if you want to edit the size of this plot you can say fig dot and

134
00:09:51,980 --> 00:09:57,210
call sets underscore size and there's a bunch of map plot live calls here that you can do.

135
00:09:57,380 --> 00:09:58,660
And you can set size inches.

136
00:09:58,670 --> 00:09:59,950
You can do something like.

137
00:10:00,050 --> 00:10:04,380
Well I don't know let's say 15 by and this will kind of clear it up for us.

138
00:10:04,380 --> 00:10:05,460
Notice I'm really zoomed in.

139
00:10:05,460 --> 00:10:09,460
So it may not look this way for you it won't be this large.

140
00:10:09,480 --> 00:10:13,210
Well probably a little smaller but here we can clearly see our observed data.

141
00:10:13,410 --> 00:10:15,330
There's clearly an upward trend.

142
00:10:15,360 --> 00:10:20,930
The seasonality component seems to be kind of on a yearly frequency here and then the residual data.

143
00:10:21,090 --> 00:10:26,040
There's another argument you can specify for the seasonal decompose and if we take a look at it here

144
00:10:26,580 --> 00:10:30,750
we chose an additive model to default because it looks like it's just kind of some linear earth if it

145
00:10:30,750 --> 00:10:32,880
doesn't look like it's a multiplicative.

146
00:10:33,120 --> 00:10:35,300
And then there's filt and frequency.

147
00:10:35,340 --> 00:10:40,230
So this frequency argument that we've kind of touched on before a little bit is the frequency of the

148
00:10:40,230 --> 00:10:40,910
series.

149
00:10:41,010 --> 00:10:47,220
So it has to be used if x is not a panel object and if it is a Panas object what it's going to do is

150
00:10:47,700 --> 00:10:50,800
override the default what's known as pure this city.

151
00:10:50,940 --> 00:10:57,420
So basically what you end up doing here is if you wanted to make sure that every period was a yearly

152
00:10:57,420 --> 00:11:04,740
period for the season you could say hey set my frequency to be 12 and then you would see something like

153
00:11:04,740 --> 00:11:04,950
this.

154
00:11:04,960 --> 00:11:10,260
Now basically is the exact same result but where you're kind of specifying here is OK every 12 months

155
00:11:10,260 --> 00:11:11,170
is going to be year.

156
00:11:11,190 --> 00:11:15,840
And that's what I kind of want you to focus on as far as the seasonal data and usually can do this automatically

157
00:11:15,870 --> 00:11:20,310
if it's a panel date time index so typically you don't need to provide it but I just want you to be

158
00:11:20,310 --> 00:11:23,680
aware of it just in case you ever find yourself needing it in the future.

159
00:11:24,170 --> 00:11:28,220
OK the next thing I want to do is test for stationary.

160
00:11:28,350 --> 00:11:29,240
Well go ahead and do that.

161
00:11:29,250 --> 00:11:33,600
And the very next lecture video now we finished the visualization tasks.

162
00:11:33,600 --> 00:11:38,570
So we're going to move on to some of the more mathematical tasks that allow us to set up for the remodel.

163
00:11:38,610 --> 00:11:39,660
Coming up next.

164
00:11:39,780 --> 00:11:41,620
Thanks everyone and I'll see you at the next lecture.
