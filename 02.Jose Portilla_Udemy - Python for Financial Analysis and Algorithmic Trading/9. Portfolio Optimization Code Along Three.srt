1
00:00:05,330 --> 00:00:05,620
All right.

2
00:00:05,620 --> 00:00:08,930
So we're back where we left off last time we recreated this plot.

3
00:00:08,930 --> 00:00:13,970
Now let's move on from random allocations to actually performing a mathematical optimization.

4
00:00:14,150 --> 00:00:18,470
Luckily all the heavy lifting will be done with Type-I for us so we just have to do a couple of things

5
00:00:18,650 --> 00:00:20,980
to set up the optimization function.

6
00:00:21,080 --> 00:00:25,700
We're going to start off by creating a simple function that can take in some weights and then return

7
00:00:25,700 --> 00:00:30,800
back an array consisting of the returns the volatility and the Sharpe ratio.

8
00:00:31,190 --> 00:00:40,640
So I'll say this function is called gets r t the o l s r waits so we pasand some weights and let's make

9
00:00:40,640 --> 00:00:42,810
sure that the weights are in umpiring.

10
00:00:43,280 --> 00:00:47,080
So we'll just pass them in as an array just in case we forget and we pass them in as a list.

11
00:00:47,090 --> 00:00:51,460
We'll have that little safeguard for us and then we're going to do the same things we did last time

12
00:00:51,470 --> 00:01:00,200
we'll take the some of the log return mean multiplied by the weights and then we're going to multiply

13
00:01:00,200 --> 00:01:01,740
that by 252.

14
00:01:01,940 --> 00:01:06,040
And technically it doesn't really matter if this 2:52 goes inside the some or outside the sum.

15
00:01:06,030 --> 00:01:11,460
Since you're multiplying it throughout it's basically going to be the same result either way next for

16
00:01:11,460 --> 00:01:12,090
volatility.

17
00:01:12,090 --> 00:01:18,480
We're going to say take the square roots of the dot product just like we did last time where we transpose

18
00:01:18,480 --> 00:01:26,100
the weights and then we're going to take the internal dot product here of the covariance of the returns

19
00:01:26,190 --> 00:01:30,030
multiplied by 252 with the weights here.

20
00:01:33,010 --> 00:01:34,380
All right there we go.

21
00:01:34,390 --> 00:01:35,490
So that should balance out.

22
00:01:35,500 --> 00:01:41,200
And then finally the Sharpe ratio is just equal to these returns divided by the volatility that we're

23
00:01:41,200 --> 00:01:47,820
going to return in the array and it's going to be an array consisting of the returns the volatility

24
00:01:47,850 --> 00:01:49,040
and the Sharpe ratio.

25
00:01:50,070 --> 00:01:50,380
OK.

26
00:01:50,400 --> 00:01:51,470
So there we have it.

27
00:01:51,690 --> 00:01:58,230
Then what we're going to do is say from site PI optimize import minimize who have already talked a little

28
00:01:58,230 --> 00:02:00,150
bit about minimization of functions.

29
00:02:00,150 --> 00:02:05,370
If you want to get the full details on this particular function you can say help minimize and I'll give

30
00:02:05,370 --> 00:02:10,890
you this really nice large helpful documentation for the minimization function here from site pipe where

31
00:02:10,890 --> 00:02:16,200
it's going to show you the basics doing a deeper dive into this particular optimization algorithm is

32
00:02:16,200 --> 00:02:20,910
a little beyond the scope of this course but we're going to show you how you can easily use say abilities

33
00:02:22,320 --> 00:02:24,180
in order to use some of these functions.

34
00:02:24,200 --> 00:02:26,510
We first have to create some helper functions.

35
00:02:26,630 --> 00:02:30,200
So the first one is going to be called negative sharp.

36
00:02:30,440 --> 00:02:37,740
It's going to take in some weights and then it's just going to return the result of return volatility

37
00:02:37,740 --> 00:02:39,460
Sharpe ratio.

38
00:02:39,640 --> 00:02:44,370
We pasand those weights and then remember that the sharp ratio.

39
00:02:44,370 --> 00:02:51,000
That's the second indexed item or index to excuse me because we have 0 1 and 2 if we look back at the

40
00:02:51,000 --> 00:02:55,090
array we're returning here it's 0 1 and index 2 has a sharper ratio.

41
00:02:55,260 --> 00:03:00,510
So we'll come over here and I just want to return the Sharpe ratio but remember as we discussed we want

42
00:03:00,510 --> 00:03:03,060
to minimize the negative sharp ratio.

43
00:03:03,060 --> 00:03:05,620
So we're going to multiply this by negative 1.

44
00:03:05,640 --> 00:03:09,930
So what is actually doing well this function is going to take in some way allocation and then it's going

45
00:03:09,930 --> 00:03:12,090
return back the negative Sharpe ratio.

46
00:03:12,090 --> 00:03:14,110
This is the thing that we're actually trying to minimize.

47
00:03:14,130 --> 00:03:17,120
So we've kind of functional ised that aspect of it.

48
00:03:17,130 --> 00:03:23,670
Up next we have constraints so we can help our off my zation minimization function with constraints

49
00:03:23,880 --> 00:03:27,370
because if we have constraints that means there's less things to check.

50
00:03:27,370 --> 00:03:31,790
So one of the constraints that we have to do is going to be called checksummed.

51
00:03:31,930 --> 00:03:37,180
Remember that our allocations all need to add up to one as long as we're not shorting anything.

52
00:03:37,180 --> 00:03:45,590
So then are we're going to see His return and piece some of the weights minus one.

53
00:03:45,620 --> 00:03:46,920
So what does this actually do.

54
00:03:46,970 --> 00:03:55,130
Well it's going to return 0 if the sum of the weights is one.

55
00:03:55,310 --> 00:03:59,810
If not it's just going to return how off you are from 1 itself.

56
00:03:59,810 --> 00:04:03,290
So that's kind of the format it needs to be in for constraints.

57
00:04:03,290 --> 00:04:09,140
And we're going to pass in just some constraints and some bounce as dictionaries and tuples and then

58
00:04:09,140 --> 00:04:11,470
we'll put that all into the minimize function.

59
00:04:11,540 --> 00:04:16,190
So actually using the minimise function it's a little complicated at first but once we see it again

60
00:04:16,220 --> 00:04:19,900
when we actually perform the efficient frontier you'll kind of get a handle on it.

61
00:04:20,120 --> 00:04:23,360
Don't worry about it too much because we don't really use it throughout the course.

62
00:04:23,360 --> 00:04:27,950
It's just kind of the way we're actually going to optimize our portfolio in this case.

63
00:04:27,950 --> 00:04:33,400
So since we just have one single constraint I'm going to create a variable called constraints and essentially

64
00:04:33,460 --> 00:04:42,240
what is it's a tuple with a dictionary inside of it in the dictionary takes in a first argument and

65
00:04:42,250 --> 00:04:48,430
says Type E Q And basically what this says is hey this constraint is going to be an equation type constraint

66
00:04:48,520 --> 00:04:54,330
because basically I have an equation here and then the second item in this dictionary goes under a function

67
00:04:55,110 --> 00:05:01,270
and then we just pass in the function itself which is checked some so by convention this minimized function

68
00:05:01,290 --> 00:05:04,430
should be a function that returns zero for the correct conditions.

69
00:05:04,670 --> 00:05:12,020
And then we also have bounds so these bounds is going to be a tuple of tuples and we'll explain what

70
00:05:12,020 --> 00:05:13,970
that actually stands for in a second.

71
00:05:13,970 --> 00:05:19,070
So essentially we're just going to have this same tuple repeated four times.

72
00:05:19,070 --> 00:05:20,990
So there we go.

73
00:05:21,020 --> 00:05:22,250
So what are these actual bounds.

74
00:05:22,270 --> 00:05:24,840
Well since we know that the sum has to equal to 1.

75
00:05:24,980 --> 00:05:30,110
We also know that the bounds of the actual weights themselves have to be between 0 and 1.

76
00:05:30,170 --> 00:05:33,420
So we have this bounds variable that we're going to be able to pass in as well.

77
00:05:34,350 --> 00:05:37,760
And then finally we need to start off with some sort of initial guess.

78
00:05:37,780 --> 00:05:43,660
So usually the best initial guess you can do is just and even allocation for say 0.35 and whip's this

79
00:05:43,660 --> 00:05:52,320
needs to be a list 0.5 0.2 5 0.5 and then 0.5 OK.

80
00:05:52,330 --> 00:05:53,900
So those are initial guesses.

81
00:05:54,040 --> 00:05:59,560
Now we're going to put this all into the minimization function so will say optimal results is equal

82
00:05:59,560 --> 00:06:02,080
to you can minimize here.

83
00:06:02,770 --> 00:06:07,090
And so first thing we do we check minimize is what does the actual function we're trying to minimize

84
00:06:07,290 --> 00:06:09,340
or remember we're trying to minimize this function.

85
00:06:09,360 --> 00:06:10,100
Negative sharp.

86
00:06:10,270 --> 00:06:16,780
So this first and mean passen negative chirp and then we see here it takes x 0 or X not.

87
00:06:16,780 --> 00:06:20,920
That basically stands for the very first x values to put in or your initial guess.

88
00:06:20,920 --> 00:06:25,690
So that's we're going to put in all say in its guess.

89
00:06:25,690 --> 00:06:28,430
Then the next argument it takes in is method.

90
00:06:28,480 --> 00:06:32,160
Now a discussion of different methods is a little beyond the scope of this course.

91
00:06:32,170 --> 00:06:35,560
But if you scroll down here there's different types of solvers.

92
00:06:35,560 --> 00:06:39,660
So these are all different algorithms you can use to minimize the function.

93
00:06:39,670 --> 00:06:41,900
We're going to go ahead and use this right here.

94
00:06:41,970 --> 00:06:45,640
Ls l l s l s q p.

95
00:06:45,730 --> 00:06:47,440
Check of the documentation a little more.

96
00:06:47,470 --> 00:06:53,200
It has links for each of these minimization functions and it tends to recommend this one for most basic

97
00:06:53,200 --> 00:07:00,420
tasks so we'll go ahead and passen method here to be equal to this particular minimization method.

98
00:07:02,240 --> 00:07:04,830
And if you're wondering what s l s p stands for.

99
00:07:04,830 --> 00:07:08,560
It just stands for sequential at least squares algorithm here.

100
00:07:09,590 --> 00:07:14,380
So we'll continue on and the next thing we're going to add in are the bounds.

101
00:07:14,400 --> 00:07:20,830
So the bounds we want is just equal to bounds and then our constraints dictionary is just going to be

102
00:07:20,830 --> 00:07:22,280
equal to conc.

103
00:07:22,480 --> 00:07:23,390
So we run that.

104
00:07:23,590 --> 00:07:28,150
And if we take a look at our Opta results we have various things that come with it.

105
00:07:28,180 --> 00:07:33,190
Function Giacobbe in this message terminated successfully that means it was able to find some sort of

106
00:07:33,190 --> 00:07:35,050
minimal value there.

107
00:07:35,050 --> 00:07:40,570
And if you actually want the values that minimized the particular function we're looking for you say

108
00:07:40,570 --> 00:07:43,510
Opt. results and then the values are held in this array.

109
00:07:43,510 --> 00:07:46,830
This last one I see say Opta results.

110
00:07:46,940 --> 00:07:47,750
X.

111
00:07:47,760 --> 00:07:50,240
So if you hit tab here you can see everything you can grab off of it.

112
00:07:50,240 --> 00:07:58,350
We just want the X actual values and there is are actual allocation so we can do is say get read vol

113
00:07:58,410 --> 00:07:58,960
s r.

114
00:07:58,980 --> 00:08:03,560
So get return volatility S.R. and passen Opta results.

115
00:08:03,660 --> 00:08:09,500
X and this returns back the daily returns volatility and the Sharpe ratio.

116
00:08:09,690 --> 00:08:15,060
So it looks like the picture operation we can possibly get is 1 point 0 3 and out of the guesses we

117
00:08:15,060 --> 00:08:22,460
did last time it was around there so if we Krenov scroll back up here we saw we had like a 1 point zero

118
00:08:22,460 --> 00:08:23,980
of three values.

119
00:08:24,000 --> 00:08:29,070
So even with just like 5000 random guesses that we did or never have that number happened to be we got

120
00:08:29,070 --> 00:08:29,610
pretty close.

121
00:08:29,610 --> 00:08:32,310
We didn't get the exact weights but pretty darn close.

122
00:08:32,310 --> 00:08:36,040
Now something to keep in mind because we only had 4 securities or four stocks.

123
00:08:36,150 --> 00:08:38,510
Actual guessing and checking with the Monte-Carlo simulation.

124
00:08:38,520 --> 00:08:43,230
That didn't take too long but if you have a portfolio consisting of hundreds of securities definitely

125
00:08:43,230 --> 00:08:46,940
go through this optimization instead of the random allocation.

126
00:08:47,340 --> 00:08:50,010
OK so we have our optimal results.

127
00:08:50,010 --> 00:08:54,600
Now we're going to do is check all optimal portfolios and this is called the efficient frontier.

128
00:08:54,600 --> 00:08:59,310
So what the fishing frontier is it's just a set of optimal portfolios that offers the highest expected

129
00:08:59,310 --> 00:09:05,610
return for the defined that level of risk or the lowest risk possible for a given level of expected

130
00:09:05,610 --> 00:09:07,880
return depending on which way you want to think about it.

131
00:09:07,890 --> 00:09:10,890
Basically what's the best value for each x value.

132
00:09:11,220 --> 00:09:13,110
So let's go ahead and create that.

133
00:09:13,110 --> 00:09:20,220
So only to do here say front tier of y and this is going to be equal to and P and we're going to call

134
00:09:20,220 --> 00:09:21,960
Lynde's space.

135
00:09:22,050 --> 00:09:28,410
So we're going to go from zero to 0.3 because if you look at our previous plot it looks like our results

136
00:09:28,410 --> 00:09:33,080
go from around 0 to let's say 0.3 here.

137
00:09:33,090 --> 00:09:35,580
So it looks like it doesn't reach higher than point 3.

138
00:09:35,610 --> 00:09:37,580
So that's how we're getting those values.

139
00:09:37,590 --> 00:09:43,470
So those will be the frontier values and then we're going to do is kind of optimize each x value for

140
00:09:43,470 --> 00:09:44,360
each of those y values.

141
00:09:44,370 --> 00:09:48,990
So we should get basically that efficient frontier curve and eventually we'll kind of just peak and

142
00:09:49,670 --> 00:09:54,380
go up at the very end and they'll also go straight down at the very end here.

143
00:09:54,420 --> 00:09:56,940
So we just kind of want to get this bullet shape.

144
00:09:57,250 --> 00:09:59,390
So scroll back down do that.

145
00:09:59,400 --> 00:10:04,440
So these are going to be our actual VI y values and then we're going to do here just say let's go ahead

146
00:10:04,440 --> 00:10:05,970
and get 100 points.

147
00:10:06,060 --> 00:10:09,270
You probably don't need this money but it should be good enough.

148
00:10:09,270 --> 00:10:15,860
We're going to say minimize now the volatility because we're actually going along the x axis so say

149
00:10:15,860 --> 00:10:23,150
minimize the volatility takes and some whites and it's going to return the get return of all.

150
00:10:23,150 --> 00:10:30,340
As are we pasand those weights and then we grab the very next one which is that volatility.

151
00:10:30,780 --> 00:10:31,010
OK.

152
00:10:31,020 --> 00:10:32,670
So we actually want to minimize volatility.

153
00:10:32,670 --> 00:10:38,240
No need to multiply this by negative one because remember volatility if we just want to minimize that.

154
00:10:38,440 --> 00:10:39,950
That's the actual value.

155
00:10:39,960 --> 00:10:46,000
We don't need to inverse it like we did a sharp ratio and wanting them to do here is save front tier

156
00:10:46,760 --> 00:10:47,860
volatility.

157
00:10:48,590 --> 00:10:51,830
Is an empty list and then I'm going to do the part the following.

158
00:10:52,000 --> 00:10:57,090
I'll say for every possible return in front here of why.

159
00:10:57,100 --> 00:10:58,180
So what does that actually mean.

160
00:10:58,180 --> 00:11:03,870
Well remember frontier why that's essentially the y axis which from the plot is the returns.

161
00:11:03,880 --> 00:11:09,060
So I'm saying for every possible return on this Y-axis What is the best volatility value I can get.

162
00:11:10,140 --> 00:11:11,440
So we'll come over here.

163
00:11:11,880 --> 00:11:19,430
So every possible return in front tier of why I'm going to have my constraints and they're going to

164
00:11:19,430 --> 00:11:20,320
be the following.

165
00:11:22,640 --> 00:11:31,060
So the first one is going to be we first say type q free equation and then the function I'm passing

166
00:11:31,060 --> 00:11:39,620
in is checksum because that's still the same and then the other thing in the passen is another equation

167
00:11:39,620 --> 00:11:40,580
here will say type

168
00:11:43,490 --> 00:11:45,270
equation.

169
00:11:45,500 --> 00:11:48,290
And then for this function I'm going to do the following.

170
00:11:48,470 --> 00:12:00,760
I'm going to say lambda W going to say gets return of all s r of W.

171
00:12:00,780 --> 00:12:08,630
So for those weights zero minus the possible return.

172
00:12:08,650 --> 00:12:10,320
OK so what does this actually doing.

173
00:12:10,540 --> 00:12:14,670
Well I'm going to be saying OK for a possible turn blah blah.

174
00:12:14,860 --> 00:12:19,560
Have these constraints checked some we know all the sums have to equal to 1 point zero.

175
00:12:19,570 --> 00:12:22,690
The second one says for some land that W.

176
00:12:22,690 --> 00:12:27,970
So for some weights essentially just the way check sums took weights we're doing the same thing here.

177
00:12:27,970 --> 00:12:34,480
So for some weights we're going to do is we are going to get the zero or the very first item which is

178
00:12:34,480 --> 00:12:35,630
the returns.

179
00:12:35,650 --> 00:12:42,510
So I'm going to get those returns and then subtract the possible return because I know in my frontier

180
00:12:42,510 --> 00:12:45,920
what I am essentially doing is saying well that's the max possible return.

181
00:12:46,020 --> 00:12:49,710
So that's what this equation is trying to do as far as the constraints are concerned.

182
00:12:50,740 --> 00:12:55,890
And then the result itself is going to be minimize and are going to pass in the function.

183
00:12:55,900 --> 00:12:58,210
I want to minimize that to minimize volatility.

184
00:12:58,210 --> 00:13:00,660
All have the same initial guess as last time.

185
00:13:00,970 --> 00:13:09,490
We'll do the same method will say assess Cupie and then has the same bounds.

186
00:13:10,030 --> 00:13:16,640
And then for the constraints I'm just going to pass in what we have here and then finally once I have

187
00:13:16,640 --> 00:13:20,890
the result I'm going to append it to my frontier volatility list.

188
00:13:21,060 --> 00:13:29,900
So I'll say append results in what I'm actually going to do is append fun.

189
00:13:30,010 --> 00:13:33,600
So if you take a look back here we got the sexual function value.

190
00:13:33,610 --> 00:13:37,330
So that's why we're going to spend here.

191
00:13:37,400 --> 00:13:38,450
So let's run that.

192
00:13:38,450 --> 00:13:42,960
This may take a little bit of time depending on how many points you added here.

193
00:13:42,980 --> 00:13:47,580
So if this is taking too long for you just check less points make this like 10 or something.

194
00:13:47,720 --> 00:13:49,650
But eventually it should be finished running.

195
00:13:49,670 --> 00:13:59,870
So what we can do here is say Piazzi figure say Fig's size is let's say told by eight's and that ongoing

196
00:14:00,130 --> 00:14:06,030
appeal to scatter in effect where we're actually going to copy and paste this from up here.

197
00:14:06,260 --> 00:14:14,010
So it's copy and paste this bring it all the way down so let's make sure that works for us.

198
00:14:14,010 --> 00:14:17,270
So here's our initial guesses from the Monte-Carlo simulation.

199
00:14:17,280 --> 00:14:26,380
But on top of that I'm going to plot out my front tier vault or Frontier volatility on the x axis and

200
00:14:26,380 --> 00:14:30,370
then my front tier y values and we can just add in a code here.

201
00:14:30,370 --> 00:14:39,280
Let's have a dasht green line and let's make that line with let's say three just so it's a little thicker

202
00:14:39,280 --> 00:14:41,530
so we can see it OK.

203
00:14:41,600 --> 00:14:43,080
So it's actually going on here.

204
00:14:43,220 --> 00:14:50,750
Well we went ahead and we plotted out a line and this line represents for each desired level of volatility.

205
00:14:50,810 --> 00:14:52,780
What is the best possible return you can get.

206
00:14:52,790 --> 00:14:55,580
Now you know it is because the bullet shape eventually comes back around.

207
00:14:55,760 --> 00:15:00,830
But if you take the max of this function value you should get the max return possible.

208
00:15:00,830 --> 00:15:06,740
So let's say you're an investor and the max volatility you want is point 2 to someone's given you money

209
00:15:06,770 --> 00:15:10,210
and they say hey I'm not willing to see anything more volatile than that.

210
00:15:10,370 --> 00:15:11,400
So you say no problem.

211
00:15:11,420 --> 00:15:12,560
Check this volatility.

212
00:15:12,650 --> 00:15:16,970
You go up to the max possible optimization you check the screen line get the function of value and say

213
00:15:17,300 --> 00:15:21,430
I can expect this return the sharp ratio based off my historical data.

214
00:15:21,510 --> 00:15:24,350
Remember that's not a perfect indicator of future data.

215
00:15:24,350 --> 00:15:29,790
Everything may change in the future but based on historical data I can expect the sort of return.

216
00:15:30,200 --> 00:15:33,800
And then you can decide what the allocations you want are for that case.

217
00:15:33,800 --> 00:15:36,560
Now keep in mind we're actually saving the allocations instead.

218
00:15:36,560 --> 00:15:38,990
We're saving the results of the function itself.

219
00:15:39,720 --> 00:15:40,220
Okay.

220
00:15:40,430 --> 00:15:41,090
So that's it.

221
00:15:41,090 --> 00:15:43,750
This is known as Marco portfolio optimization.

222
00:15:43,750 --> 00:15:45,230
That's the actual technique.

223
00:15:45,380 --> 00:15:51,590
And again the main idea here is what's the best possible return for your indicated level of volatility.

224
00:15:51,590 --> 00:15:52,130
All right.

225
00:15:52,130 --> 00:15:57,650
If you have any questions feel free to post them to the Q&amp;A forums as far as the overall expectation

226
00:15:57,650 --> 00:15:59,110
here for your understanding.

227
00:15:59,210 --> 00:16:05,390
I would not expect you to be a pro in using any of these methods or functions as far as minimization.

228
00:16:05,420 --> 00:16:07,250
We won't really see them again in the course.

229
00:16:07,340 --> 00:16:13,670
This is just the mathematical way we can use size power to actually get this optimization line.

230
00:16:13,670 --> 00:16:17,900
I wouldn't worry too much about understanding the full details under the hood because we won't really

231
00:16:17,900 --> 00:16:19,990
need to use them throughout the course.

232
00:16:20,000 --> 00:16:25,210
However if you are interested in those aspects I definitely recommend you check out the CPI documentation.

233
00:16:25,220 --> 00:16:29,680
It's really clear and has really full explanations for each of the parameters we covered.

234
00:16:29,990 --> 00:16:31,760
Thanks everyone and I'll see you at the next lecture.
