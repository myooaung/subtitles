1
00:00:05,330 --> 00:00:07,760
Welcome back everyone to our first lecture on PI.

2
00:00:07,770 --> 00:00:10,040
We're going to be discussing Empire days.

3
00:00:10,160 --> 00:00:13,400
Let's open up a new Jupiter notebook and get started.

4
00:00:13,400 --> 00:00:13,750
All right.

5
00:00:13,760 --> 00:00:16,780
So to start off we're going to do is just important umpire.

6
00:00:16,900 --> 00:00:18,160
You just import it.

7
00:00:18,190 --> 00:00:22,200
You can just say important umpire and by convention it's as and P.

8
00:00:22,970 --> 00:00:23,900
And we're going to discuss.

9
00:00:23,900 --> 00:00:25,780
Here is some pie arrays.

10
00:00:25,830 --> 00:00:29,230
Empire pirates are the main way we're going to be using numpty throughout the course.

11
00:00:29,330 --> 00:00:31,770
Non-power rays essentially come in two flavors.

12
00:00:31,910 --> 00:00:37,910
Vectors and matrices were vectors are just one dimensional arrays essentially just a straight list and

13
00:00:37,910 --> 00:00:39,850
then a matrix are two dimensional.

14
00:00:40,130 --> 00:00:43,390
But you should note that a matrix will have only one row or one column.

15
00:00:43,400 --> 00:00:47,840
So don't worry about that terminology too much because sometimes people tend to mix them up a little

16
00:00:47,840 --> 00:00:48,850
bit.

17
00:00:48,860 --> 00:00:51,170
All right let's start with just creating a new umpire.

18
00:00:51,190 --> 00:00:58,590
And so how to actually creates a pie or a well you can create an umpire a through various methods.

19
00:00:58,600 --> 00:01:03,920
One thing you can do is if you have a list one two three you can cast that to an array.

20
00:01:03,970 --> 00:01:07,690
You can say N.P. dots and then call the array function.

21
00:01:07,730 --> 00:01:09,820
You can do shift type here to find out more about it.

22
00:01:10,060 --> 00:01:15,160
But essentially you just pass an object such as a list and it will output the array.

23
00:01:15,190 --> 00:01:16,490
And what happened here.

24
00:01:16,550 --> 00:01:19,560
Jupiter is actually telling you hey this is no longer just the normal Python list.

25
00:01:19,570 --> 00:01:20,670
It's actually an array.

26
00:01:20,710 --> 00:01:25,780
And if you want to confirm that you could for instance save this as a variable x and then check the

27
00:01:25,780 --> 00:01:30,940
type of x and you can check that it's now and pi and the array.

28
00:01:30,970 --> 00:01:34,810
So that's one thing you can do if you actually want to build a matrix.

29
00:01:34,810 --> 00:01:39,640
You can create a variable matrix and have a nested list.

30
00:01:39,640 --> 00:01:46,230
So that's a list of list will say one 2 three 4 5 6 7 8 9.

31
00:01:46,230 --> 00:01:47,540
So note what I have here.

32
00:01:47,610 --> 00:01:52,440
I have a list with three items in it and each of those items is a list that self with three additional

33
00:01:52,440 --> 00:01:53,850
items.

34
00:01:53,850 --> 00:02:01,150
So now if I pass this to some PI array pass in my matrix I get back in array.

35
00:02:01,200 --> 00:02:04,670
But the actual dimensionality has been taken into effect.

36
00:02:04,680 --> 00:02:11,040
When displaying the output so pi smart enough to realize that this is a two dimensional array or a two

37
00:02:11,040 --> 00:02:16,860
dimensional matrix where I have three columns and then three rows and each they mentioned is notated

38
00:02:16,860 --> 00:02:18,780
at the very end with a set of brackets.

39
00:02:18,780 --> 00:02:23,250
So one set of brackets one dimensional two sets are brackets it's to them missional you can go to three

40
00:02:23,250 --> 00:02:28,040
sets through them and for them in tonal center for financial data really don't go beyond to.

41
00:02:28,080 --> 00:02:33,050
And sometimes three depending if you want to include another feature but really it's just to the data

42
00:02:33,060 --> 00:02:35,260
we're working with.

43
00:02:35,310 --> 00:02:39,570
OK so this is because a few built in methods to generate arrays sometimes you're working with financial

44
00:02:39,570 --> 00:02:40,040
data.

45
00:02:40,170 --> 00:02:44,850
You want to quickly model something that isn't that a random or straight zeros or straight ones or straight

46
00:02:44,850 --> 00:02:45,950
fives etc..

47
00:02:46,050 --> 00:02:49,320
An umpire is a really nice way to quickly create an array like that.

48
00:02:49,680 --> 00:02:53,580
So if you remember we have the builtin arr. function in Python.

49
00:02:53,790 --> 00:03:00,510
So if I cast range from 0 to 5 that gives me back a list of integers 0 1 2 3 4.

50
00:03:00,560 --> 00:03:05,200
There's actually a PI version of this and it's arr..

51
00:03:05,270 --> 00:03:06,680
Note that there's just one are there.

52
00:03:06,930 --> 00:03:13,170
And it basically works the exact same way say N.P. that range 0 5 and it creates an array version of

53
00:03:13,170 --> 00:03:13,820
that list.

54
00:03:13,840 --> 00:03:15,360
So pie's version of range.

55
00:03:15,390 --> 00:03:16,500
It's just a range.

56
00:03:16,530 --> 00:03:19,460
So you can think of it as like array range.

57
00:03:19,530 --> 00:03:20,600
So that's one way to do it.

58
00:03:20,790 --> 00:03:27,530
And just like range it can take in a starting point and end point and then a step size.

59
00:03:27,550 --> 00:03:32,320
So this has me back all the odd numbers starting at one going up tube and not including 11 and step

60
00:03:32,320 --> 00:03:33,230
size of two.

61
00:03:33,280 --> 00:03:35,000
That gives you all those odd numbers if you want.

62
00:03:35,020 --> 00:03:37,110
Even ones you start at zero.

63
00:03:37,540 --> 00:03:38,150
OK.

64
00:03:38,350 --> 00:03:42,820
So let's continue along and talk about generating arrays of zeros and ones and this will be useful in

65
00:03:42,820 --> 00:03:45,450
case you ever want to do some sort of financial model.

66
00:03:45,850 --> 00:03:54,150
So I'll say P and we'll call zeros in zeros allows us to quickly create an array or a matrix of zeros.

67
00:03:54,160 --> 00:04:01,060
So if I just pass in one number here it returns in array of three zeros and know that we see here there's

68
00:04:01,150 --> 00:04:02,420
zero dots.

69
00:04:02,440 --> 00:04:05,520
And that basically in the case that this is a floating point number.

70
00:04:05,590 --> 00:04:07,450
So there's two major types of numbers.

71
00:04:07,450 --> 00:04:11,230
In Python there is a single integer such as 1 and we can check this.

72
00:04:11,230 --> 00:04:14,100
We can say type 1 it produces integer.

73
00:04:14,320 --> 00:04:21,460
If I say type 1 point zero it produces a flow when a work of Pi and Pancho's and start doing operations

74
00:04:21,460 --> 00:04:22,360
on our numbers.

75
00:04:22,360 --> 00:04:28,330
Even if we take things in as an integer usually especially if panderers it will convert it to a floating

76
00:04:28,330 --> 00:04:30,450
point number to make sure you don't lose any data.

77
00:04:30,550 --> 00:04:35,710
That way if you have something like 0.5 it doesn't accidentally get round down to zero around up to

78
00:04:35,710 --> 00:04:36,470
1.

79
00:04:36,490 --> 00:04:39,020
So that's why when you put the zeros you get this little dot there.

80
00:04:39,040 --> 00:04:40,680
It just stands for floating point.

81
00:04:40,780 --> 00:04:42,700
So that's how you can create a one dimensional array.

82
00:04:42,760 --> 00:04:45,050
Again just zeros.

83
00:04:46,240 --> 00:04:51,700
And in person how many numbers you want the array you can actually do this for them engines as well.

84
00:04:51,700 --> 00:04:56,940
You'll say zeros and then you can pasan a couple or a tuple of mentioned.

85
00:04:56,950 --> 00:05:02,680
So if you want five by five matrix of zeros there you have it if you want something like a three by

86
00:05:02,680 --> 00:05:03,530
five.

87
00:05:03,880 --> 00:05:09,640
You have that so remember three the very first one at index 0 of the tuple stands for how many rows

88
00:05:09,640 --> 00:05:10,480
you have.

89
00:05:10,480 --> 00:05:17,910
Index 1 over here stands for how many columns you have similarly to zeros there's a ones function.

90
00:05:17,930 --> 00:05:23,590
And as you may have guessed ones operates the exact same way except it gives you back an array of ones.

91
00:05:23,690 --> 00:05:27,820
And again you can pasan a tuple of dimensions of three by three.

92
00:05:27,860 --> 00:05:31,780
And that gives you back a three three mention of ones.

93
00:05:31,790 --> 00:05:37,430
Now if you want to return evenly spaced numbers over a specified interval you can use Lyn's space.

94
00:05:37,460 --> 00:05:43,110
Unless space is a little different than range Let me show you how so he can grab in space by saying

95
00:05:43,650 --> 00:05:45,600
that land space.

96
00:05:45,810 --> 00:05:52,320
And this stands for linearly spaced so it takes an a start a stop and then a number and what that does

97
00:05:52,620 --> 00:05:56,820
is it returns evenly spaced numbers over the specified interval of start and stops.

98
00:05:56,820 --> 00:05:58,110
It's a little different than arr..

99
00:05:58,200 --> 00:06:04,320
Remember arr. just takes your starting and stopping and then gives you in one step or two steps or whatever

100
00:06:04,320 --> 00:06:09,270
step you wanted it just gives you integers linearly space is a little different.

101
00:06:09,270 --> 00:06:15,880
You take a stop or excuse me a start and then just stop and then you ask for how many numbers you want

102
00:06:15,940 --> 00:06:18,280
in between the start and the stop.

103
00:06:18,280 --> 00:06:24,680
So if I want three evenly spaced numbers between 0 and 10 I get back 0 5 and 10.

104
00:06:24,880 --> 00:06:30,670
I can also change this to say Give me back 30 evenly spaced numbers between 0 and 10 and then you get

105
00:06:30,670 --> 00:06:32,910
back zeros or 0.3 for etc..

106
00:06:32,950 --> 00:06:38,710
However these are all evenly spaced so the space between zero and this 0.3 four is the same space between

107
00:06:38,710 --> 00:06:43,350
0.3 4 and 0.6 a Saints based between this one and the next one and so on.

108
00:06:43,360 --> 00:06:49,120
So this linearly space that spacing them out evenly so we can do things like give me 50 etc. you can

109
00:06:49,120 --> 00:06:50,580
say give me 51.

110
00:06:50,620 --> 00:06:54,570
He can get starting at zero in spaces of 0.2.

111
00:06:54,760 --> 00:06:55,720
Something to keep in mind.

112
00:06:55,780 --> 00:06:59,280
It's a little weird if you're not thinking of indexing starting at zero.

113
00:06:59,380 --> 00:07:03,220
You may suspect that this should have been with 50 to get the 0.2.

114
00:07:03,450 --> 00:07:07,870
But because indexing starts at zero you usually have to do either plus or minus 1 to get these nice

115
00:07:07,870 --> 00:07:09,310
little even cut offs.

116
00:07:09,580 --> 00:07:11,770
So that's linearly spaced elements.

117
00:07:12,160 --> 00:07:19,030
There's also an identity matrix that you can call which the function sets and I and this actually just

118
00:07:19,030 --> 00:07:24,820
takes one number in because an identity matrix is a square matrix square meaning that it has the same

119
00:07:24,820 --> 00:07:31,450
number of rows and same number of columns an identity matrix is just a matrix of zeros where the diagonal

120
00:07:31,450 --> 00:07:32,680
happens to be 1.

121
00:07:32,680 --> 00:07:34,310
So that's an identity matrix.

122
00:07:35,130 --> 00:07:35,430
All right.

123
00:07:35,430 --> 00:07:40,410
Now let's take the time to talk about some Pye's random library numpad has lots of ways to create random

124
00:07:40,410 --> 00:07:41,330
number arrays.

125
00:07:41,460 --> 00:07:46,080
And when we work in the financial data and we want to kind of randomly model something like a Monte-Carlo

126
00:07:46,200 --> 00:07:49,370
simulation we're going to be using them pie's ran the module.

127
00:07:49,530 --> 00:07:51,140
So let's go over how it works.

128
00:07:51,160 --> 00:07:56,090
The first we end up doing is say any random and they are going to say dots.

129
00:07:56,150 --> 00:08:00,210
And if you hit tab here you'll notice that there's a bunch of different methods and distributions you

130
00:08:00,210 --> 00:08:02,690
can use for creating random numbers.

131
00:08:03,440 --> 00:08:08,420
So we're going to end up doing is saying are a and D off of random.

132
00:08:08,480 --> 00:08:13,010
And if you do shift tab here it basically kind of explains what this is going to do.

133
00:08:13,010 --> 00:08:15,930
So what this does is it says random values in a given shape.

134
00:08:15,950 --> 00:08:20,930
So it's going to create an array of the given shape and populated with random samples from a uniform

135
00:08:20,930 --> 00:08:23,770
distribution over 0 to 1.

136
00:08:23,960 --> 00:08:30,050
So what is a uniform distribution a uniform distribution basically says that all the numbers between

137
00:08:30,050 --> 00:08:34,360
0 and 1 have the same probability of being picked.

138
00:08:34,370 --> 00:08:42,840
So if I just ask for one number one random number between 0 and 1 I get back an array of 0.1 8.

139
00:08:43,050 --> 00:08:47,890
And if I run this again I get back another random number between 0 and 1.

140
00:08:47,890 --> 00:08:50,260
Notice these are floating point system not integers.

141
00:08:50,300 --> 00:08:54,800
I can also passen multiple numbers here.

142
00:08:54,830 --> 00:08:59,660
And what this says gives me a five by five matrix of random numbers between 0 and 1.

143
00:08:59,930 --> 00:09:01,160
And this formatting looks a little weird.

144
00:09:01,160 --> 00:09:03,740
Let's make this kind of a little smaller so it looks a little nicer.

145
00:09:03,740 --> 00:09:04,190
There we go.

146
00:09:04,190 --> 00:09:05,650
Now we have a five by four.

147
00:09:05,690 --> 00:09:11,090
All these random numbers are between 0 and 1 and all of them come from a uniform distribution meaning

148
00:09:11,210 --> 00:09:14,160
every single number has the same odds of being picked.

149
00:09:14,210 --> 00:09:18,620
The next thing we're going to discuss is sampling from a random standard normal distribution which unlike

150
00:09:18,620 --> 00:09:21,730
Rand is not uniform.

151
00:09:21,810 --> 00:09:25,780
So we can do any random Rand.

152
00:09:25,860 --> 00:09:31,190
And if you do shift had people give me information saying this is returning from a standard normal distribution.

153
00:09:31,380 --> 00:09:35,330
So a standard normal distribution basically looks something like this right.

154
00:09:35,340 --> 00:09:39,860
Here you have the means centered around zero with a variance of 1.

155
00:09:40,020 --> 00:09:44,210
So the closer you are to zero the higher probability of the number being picked.

156
00:09:44,310 --> 00:09:48,720
Unlike uniform where every number between 0 and 1 has the same odds of being picked.

157
00:09:48,720 --> 00:09:53,370
Now keep in mind if you expand this here let me zoom out just a little bit so we can read this a little

158
00:09:53,370 --> 00:09:54,120
better.

159
00:09:54,120 --> 00:09:57,900
They'll say down here that this is from a standard normal distribution.

160
00:09:57,930 --> 00:10:03,210
It's sometimes also known as a Gaussian distribution and it has a mean of 0 and the variance of 1.

161
00:10:03,210 --> 00:10:07,260
So given that the mean is zero that means we can actually get negative numbers off of this and the variance

162
00:10:07,260 --> 00:10:07,930
is one.

163
00:10:08,040 --> 00:10:11,940
If you actually want to kind of supply your own arguments of where Lamine should be what the variance

164
00:10:11,940 --> 00:10:13,140
should be etc..

165
00:10:13,170 --> 00:10:17,490
There's other functions you can use stuff like non-pilot random thought standard normal and then you

166
00:10:17,490 --> 00:10:19,610
could do non-pilot random normal etc..

167
00:10:19,620 --> 00:10:23,910
There's a lot of functions for that kind of play around with there so Legacy's rant and the standard

168
00:10:23,910 --> 00:10:29,460
normal distribution and we'll say here is let's say any five numbers and now we can see there's five

169
00:10:29,460 --> 00:10:33,780
numbers here randomly chosen from the standard normal distribution.

170
00:10:33,810 --> 00:10:40,050
So then we can say Give me a five by five matrix of numbers again with five by four.

171
00:10:40,050 --> 00:10:41,280
So it looks a little nicer.

172
00:10:41,280 --> 00:10:41,550
OK.

173
00:10:41,580 --> 00:10:44,960
So you can see here instead of being a uniform distribution from 0 to 1.

174
00:10:44,970 --> 00:10:50,220
Now we're doing a standard normal distribution centered at zero for a variance of 1 and you can see

175
00:10:50,220 --> 00:10:55,780
that the closer you are to zero the more likely probability have of being picked as a random number.

176
00:10:56,160 --> 00:10:59,180
If you just want a random integer that's also pretty straightforward.

177
00:10:59,190 --> 00:11:06,000
You just say that random thoughts ran I.A. you shift enter here and it just returns a random integer

178
00:11:06,240 --> 00:11:12,680
from low to the high and the highest Xclusive just like we've been dealing with for list in fixing so

179
00:11:12,870 --> 00:11:18,450
saying OK give me a random number anywhere between 1 and then up to and not including 100.

180
00:11:18,450 --> 00:11:20,960
So there you have it just a random integer and you can keep calling this.

181
00:11:21,000 --> 00:11:24,480
You'll keep going back different random integers between those two points.

182
00:11:24,510 --> 00:11:29,520
And if you actually want more random integers and that you can specify kind of a third argument here

183
00:11:29,940 --> 00:11:36,180
of the size of your race you can see getting back 10 random integers between 1 and 100 one inclusive

184
00:11:36,390 --> 00:11:37,890
100 exclusive.

185
00:11:38,310 --> 00:11:38,850
OK.

186
00:11:39,000 --> 00:11:42,450
Now discuss a few Auray attributes and methods that are useful.

187
00:11:42,540 --> 00:11:47,860
I'm going to create an array will say a variable A R R and B zoom in one level here.

188
00:11:48,700 --> 00:11:49,650
So a r r.

189
00:11:49,690 --> 00:12:00,950
That's going to be equal to arrange and I will say 25 and then I'm going to say Give me a Ranh array.

190
00:12:01,170 --> 00:12:07,750
That's just going to be random just some random integers let's say between 0 50 and give me 10 of them.

191
00:12:08,640 --> 00:12:11,200
OK so we have our array here.

192
00:12:12,150 --> 00:12:15,870
And then because I'm zoomed in the formatting looks a little different but if I start zooming out you'll

193
00:12:15,870 --> 00:12:17,580
see that the formatting kind of fixes itself.

194
00:12:17,580 --> 00:12:19,050
So they zoomed in.

195
00:12:19,060 --> 00:12:20,160
You get different formatting than me.

196
00:12:20,160 --> 00:12:22,660
Don't worry that's just the display thing.

197
00:12:22,920 --> 00:12:27,450
And then the random array looks something like this just kind of some random integers there.

198
00:12:27,450 --> 00:12:33,020
OK so a really common method to use is the reshape method and that returns an array containing the exact

199
00:12:33,120 --> 00:12:33,890
same data.

200
00:12:33,900 --> 00:12:35,250
However if a new shape.

201
00:12:35,250 --> 00:12:36,650
So take a look at my array.

202
00:12:36,720 --> 00:12:39,660
Right now it's just a one dimensional array.

203
00:12:39,660 --> 00:12:41,660
It goes from 0 to 24.

204
00:12:41,760 --> 00:12:46,910
I can call reshape on this and reshape it into an array of different size.

205
00:12:46,920 --> 00:12:52,710
For example I could reshape it to a five by five matrix and I have the numbers in a two dimensional

206
00:12:52,710 --> 00:12:55,220
matrix five by five mansions.

207
00:12:55,230 --> 00:13:00,150
Now keep in mind if I try to do something like five by four you'll end up getting an error because it

208
00:13:00,150 --> 00:13:05,420
can't reshape a size 25 into a shape 5 by for a quick clever trick for this.

209
00:13:05,420 --> 00:13:09,640
It's just these two numbers right here need to multiply to equal this one.

210
00:13:09,840 --> 00:13:15,540
So it could do this with 20 numbers but I can't do it with 25 numbers so 5 by 5 ends up working because

211
00:13:15,570 --> 00:13:17,190
five times five is twenty five.

212
00:13:17,310 --> 00:13:19,540
So you have enough spaces to fit in all those numbers.

213
00:13:19,620 --> 00:13:24,160
So that's the reshape it's really useful for quickly creating a matrix.

214
00:13:24,370 --> 00:13:27,750
Then we're also going to discuss the shape attribute.

215
00:13:27,930 --> 00:13:31,020
So the shape attribute is just a shape of the array.

216
00:13:31,260 --> 00:13:38,430
So if I take a look at my original array that is the sky but I can end up doing is asking for the shape

217
00:13:38,460 --> 00:13:44,070
attribute and no it's just an attribute right here and it says back 25 comma nothing.

218
00:13:44,100 --> 00:13:48,080
So essentially what this indicates is that this is a one dimensional array.

219
00:13:48,120 --> 00:13:50,820
So just has twenty five on one axis.

220
00:13:50,850 --> 00:14:00,730
If I were to reshape this into a five by five and then call the shape off of that I end up getting Hey

221
00:14:00,820 --> 00:14:08,590
now your dimensions are five by five and I could reshape this to be 25 by 1 which is basically going

222
00:14:08,590 --> 00:14:12,000
to instead of having 25 columns in one single row.

223
00:14:12,000 --> 00:14:14,070
It's gonna have 25 rows in one single column.

224
00:14:14,260 --> 00:14:14,800
What that looks like.

225
00:14:14,800 --> 00:14:15,640
Real quick.

226
00:14:15,670 --> 00:14:17,640
So now the dimensions look like this.

227
00:14:17,650 --> 00:14:22,600
And if I ask for the shape that's going to say hey now you have a 25 by 1 instead of just a straight

228
00:14:22,600 --> 00:14:24,190
flat 25.

229
00:14:24,190 --> 00:14:28,350
So that's kind of difference between seeing just 25 comma versus 25 comma 1.

230
00:14:28,360 --> 00:14:29,440
So keep that in mind.

231
00:14:30,810 --> 00:14:35,820
If at any time you want to know the data type that your array is holding you can just grab your array

232
00:14:36,420 --> 00:14:41,610
and ask for the D type attribute and it returns back what kind of integer it has or what kind of float

233
00:14:41,610 --> 00:14:42,910
has etc..

234
00:14:43,110 --> 00:14:49,820
So you can see here this is 32 which just describes has like 32 bit integers and they're finally we're

235
00:14:49,820 --> 00:14:54,020
going to discuss four key methods that are really useful and we're going to do these off the random

236
00:14:54,020 --> 00:14:54,770
array.

237
00:14:54,830 --> 00:14:58,790
So because this is a random number right you may not get the same values I have here but that doesn't

238
00:14:58,790 --> 00:15:00,170
really matter for our purposes.

239
00:15:00,410 --> 00:15:06,050
If you ever want to grab the max number in an array all you need to do is call the max method and this

240
00:15:06,050 --> 00:15:08,730
returns back the highest or maximum number here.

241
00:15:08,750 --> 00:15:14,690
In our case 37 your number may be different if you actually want the index location of where this max

242
00:15:14,690 --> 00:15:17,620
number is you can call our good Max.

243
00:15:17,690 --> 00:15:19,120
So our Max what it does.

244
00:15:19,130 --> 00:15:22,390
It returns the index location of this maximum value.

245
00:15:22,400 --> 00:15:30,170
So if you go to index 7 so 0 1 2 3 4 5 6 7 I can see here that's where my maximum lies.

246
00:15:30,200 --> 00:15:36,500
And similarly there's the men which gives you the minimum value and then there's argument which gives

247
00:15:36,500 --> 00:15:38,190
you the index of the minimum value.

248
00:15:38,210 --> 00:15:40,550
So a minimum value is index three.

249
00:15:40,640 --> 00:15:41,880
The number six.

250
00:15:41,900 --> 00:15:42,280
OK.

251
00:15:42,290 --> 00:15:45,180
And that's really the basis of umpire arrays.

252
00:15:45,230 --> 00:15:47,150
Thanks everyone and I'll see you at the next lecture.
