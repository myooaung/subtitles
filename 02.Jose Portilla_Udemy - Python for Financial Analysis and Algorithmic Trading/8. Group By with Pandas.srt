1
00:00:05,360 --> 00:00:11,150
Hello everyone and welcome back to the lecture on group by pandas has a very powerful group by feature

2
00:00:11,390 --> 00:00:16,880
that allows you to aggregate multiple rows and aggregate them into one singular value.

3
00:00:16,880 --> 00:00:23,210
To put it simply grouped by allows you to group together rows based off of a column and then perform

4
00:00:23,210 --> 00:00:25,210
some sort of aggregate function on them.

5
00:00:25,400 --> 00:00:31,720
For instance in this example here we have three partitions of IDS one two and three.

6
00:00:31,790 --> 00:00:38,540
And then we have several values for them we can group by the ID column and aggregate them using some

7
00:00:38,540 --> 00:00:44,450
sort of aggregate function in every function is basically just a fancy term for any function that takes

8
00:00:44,450 --> 00:00:51,380
and many values and then spits out or outputs a single value such as taking the sum of a bunch of values

9
00:00:51,650 --> 00:00:56,000
and outputting the results or taking the average or standard deviation etc..

10
00:00:56,120 --> 00:01:02,270
These are all aggregate function and that's all a group by method does it allows you to choose a column

11
00:01:02,270 --> 00:01:03,260
to Group By.

12
00:01:03,320 --> 00:01:08,360
It gathers all those rows together based off that column value and then you perform some sort of aggregate

13
00:01:08,360 --> 00:01:09,670
function on it.

14
00:01:09,680 --> 00:01:10,300
All right.

15
00:01:10,520 --> 00:01:14,310
But that being said let's go ahead and learn how to use GROUP BY with pandas.

16
00:01:14,330 --> 00:01:17,170
I'm going to go ahead and jump to Jupiter notebook.

17
00:01:17,200 --> 00:01:19,740
All right so here we are at the Jupiter notebook.

18
00:01:19,870 --> 00:01:22,990
I went ahead and copied and pasted this line of data.

19
00:01:23,000 --> 00:01:29,640
It's basically just a dictionary from the notebook and this note book is just called by the pandas folder.

20
00:01:30,070 --> 00:01:30,760
OK.

21
00:01:31,000 --> 00:01:35,640
You can go ahead and type this up manually but I would just say go ahead and copy this data.

22
00:01:35,820 --> 00:01:36,920
Just a dictionary.

23
00:01:36,940 --> 00:01:43,900
And then you can go ahead and say PD data frame and then passen that data dictionary and it should automatically

24
00:01:43,900 --> 00:01:46,350
then create it data frame that looks like this.

25
00:01:46,360 --> 00:01:48,260
And basically that's just a made up data.

26
00:01:48,340 --> 00:01:51,670
We have a company column with three company codes.

27
00:01:51,670 --> 00:01:53,650
Google Microsoft and Facebook.

28
00:01:53,830 --> 00:01:59,550
Now we have a person column of a bunch of unique people in it and then we have some sales numbers 200

29
00:01:59,620 --> 00:02:01,670
120 etc..

30
00:02:01,900 --> 00:02:07,330
Now what we can do is use that group by method to group rows together based off of a column name for

31
00:02:07,330 --> 00:02:12,840
instance let's go ahead and grouped by the company I'm going to go on to say.

32
00:02:13,350 --> 00:02:20,380
And then you say group by call as a method and you pass in the column you want to group by this case.

33
00:02:20,400 --> 00:02:26,620
I want a group by the company column and noticed when I get out here I just do this.

34
00:02:26,740 --> 00:02:31,690
I will get a group by object and it just points to where it's stored in memory.

35
00:02:31,690 --> 00:02:37,000
What I can do is store this as a new variable so I can say something like.

36
00:02:37,270 --> 00:02:43,520
Come for my company and I have this group by object.

37
00:02:43,600 --> 00:02:49,630
Then the second step of using group by after you've grouped by that column is to go ahead and call some

38
00:02:49,630 --> 00:02:51,760
sort of aggregate function on it.

39
00:02:51,760 --> 00:02:58,650
So for example if I wanted to get the mean by company it would look at the sales column and give me

40
00:02:58,650 --> 00:03:01,640
the mean or average sale by the company.

41
00:03:01,650 --> 00:03:06,480
The reason it can't do this for the person column is because these are strings and there's no way you

42
00:03:06,480 --> 00:03:08,830
can just take the mean of a string.

43
00:03:09,030 --> 00:03:14,370
And that means pandal just automatically ignores anything that's a non-numeric column.

44
00:03:14,390 --> 00:03:20,840
Likewise we can go ahead and perform other aggregate functions such as some of everything as far as

45
00:03:20,840 --> 00:03:22,220
sales per company.

46
00:03:22,240 --> 00:03:31,630
You can even do standard deviations with stv etc and you should notice that what I get back is an actual

47
00:03:31,630 --> 00:03:37,150
data frame with an index called Company and the column value of sales.

48
00:03:37,420 --> 00:03:44,260
And that means I could do stuff such as index offer so I could say by come up let's go ahead and sum

49
00:03:44,260 --> 00:03:46,300
up all the sales by company.

50
00:03:47,020 --> 00:03:55,390
So I have that some of sales by company and then I could even call something like EHLO see Effie and

51
00:03:55,430 --> 00:04:02,620
that gives me the sales some of Facebook now a lot of times which you're going to be doing is not actually

52
00:04:02,650 --> 00:04:05,860
setting this group by object as a variable.

53
00:04:05,860 --> 00:04:08,020
You'll probably just call this all in one line.

54
00:04:08,050 --> 00:04:13,460
Once you start getting really comfortable with pantless they'll say something like group by company

55
00:04:14,120 --> 00:04:16,250
then you call something like some.

56
00:04:16,430 --> 00:04:23,720
And then if you just want it for Facebook you the call FBI and that's all the same thing just in one

57
00:04:23,720 --> 00:04:24,830
line now.

58
00:04:24,980 --> 00:04:30,140
Some other useful aggregate functions that you may find yourself doing are things such as count which

59
00:04:30,140 --> 00:04:31,990
just counts the number of instances.

60
00:04:32,030 --> 00:04:32,910
Or column.

61
00:04:33,050 --> 00:04:38,210
In this case it was able to return the person column because it's able to count how many instances of

62
00:04:38,210 --> 00:04:41,750
a person occur in that column or company.

63
00:04:41,780 --> 00:04:45,680
So we have two people and they have two sales each and that's makes sense.

64
00:04:45,680 --> 00:04:52,980
You can also do things such as max and min and note here that it also returns the person because Python

65
00:04:52,980 --> 00:04:57,740
is able to store things in alphabetical order and that's basically what it's trying to show here.

66
00:04:57,810 --> 00:05:05,550
The max is the latest towards the end of the alphabet and if you call in that's the earliest in the

67
00:05:05,550 --> 00:05:07,910
alphabet C and C we have agencies here.

68
00:05:08,130 --> 00:05:11,640
However you probably shouldn't be using Minner Macs with a string column.

69
00:05:11,640 --> 00:05:15,370
You'll probably use all these functions really with numeric columns.

70
00:05:15,630 --> 00:05:22,770
One last useful thing I want to show you with group by is a lot of times you can use GROUP BY with the

71
00:05:23,490 --> 00:05:30,610
described method and that gives you a bunch of useful information all at once so you can say DFT group

72
00:05:30,610 --> 00:05:36,030
by the company name and then say the scribe and it will give you a bunch of information.

73
00:05:36,030 --> 00:05:41,570
So for instance to count the mean the standard deviation the men and the max as well as the core tile

74
00:05:41,580 --> 00:05:43,160
values for each company.

75
00:05:43,500 --> 00:05:48,650
And if you don't like this format and you can actually transpose this so you can say something like.

76
00:05:48,840 --> 00:05:56,830
Transpose if you prefer each company to be a column instead of an actual index.

77
00:05:56,830 --> 00:06:01,840
So whatever format you like better you can describe to that and then you can actually just call column

78
00:06:01,840 --> 00:06:02,570
names off of this.

79
00:06:02,590 --> 00:06:07,130
If you're just interested in a single company or a single column.

80
00:06:07,180 --> 00:06:09,230
All right that's really it for group by.

81
00:06:09,460 --> 00:06:10,260
It's quite basic.

82
00:06:10,250 --> 00:06:17,140
You just call the data frame say Dopp group by the column you want to group by and then whatever aggregate

83
00:06:17,140 --> 00:06:18,130
method you want.

84
00:06:18,130 --> 00:06:24,370
Remember it has to aggregate the column values to a single value and it usually only works on numeric

85
00:06:24,370 --> 00:06:27,970
columns depending on what kind of aggregate function you're working with.

86
00:06:28,060 --> 00:06:34,300
We'll get a lot more practice of group by as we go through the exercises as well as the kept some projects.

87
00:06:34,300 --> 00:06:36,950
All right thanks everyone and I'll see you at the next lecture.
