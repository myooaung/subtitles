1
00:00:05,560 --> 00:00:09,880
Welcome back everyone to this lecture on Quanto in basic algorithm methods.

2
00:00:11,260 --> 00:00:15,970
Remember that the corresponding code for this lectures notebook will only work inside the Clintonian

3
00:00:16,070 --> 00:00:17,140
ID.

4
00:00:17,530 --> 00:00:20,860
We're going to start off beginning exploring how to create trading algorithms.

5
00:00:20,860 --> 00:00:23,490
And there's a few key functions that we need to learn about.

6
00:00:23,540 --> 00:00:28,960
It's initialize handle data and then before tradings start once we understand how these key functions

7
00:00:28,960 --> 00:00:30,400
work inside the Quanto open.

8
00:00:30,410 --> 00:00:34,740
Ideally we'll be able to expand on them to create our own trading algorithms.

9
00:00:34,750 --> 00:00:36,620
But first let's start off with the basics.

10
00:00:36,880 --> 00:00:42,730
Let's chumped Clintonian dot com and show you how to get to the ITC or here and at Quanto Appian dot

11
00:00:42,730 --> 00:00:43,310
com.

12
00:00:43,360 --> 00:00:46,810
And there's two ways to actually get to the development environment.

13
00:00:46,810 --> 00:00:49,980
One is just click on this queue and then click on start coding.

14
00:00:50,170 --> 00:00:53,800
And the other way is if you click on research and then go to algorithms.

15
00:00:54,070 --> 00:00:56,440
This will take you to a list of all the algorithms you created.

16
00:00:56,440 --> 00:00:58,270
You can see here I created a bunch of them.

17
00:00:58,480 --> 00:01:05,560
So we're going to do is select here new algorithm and then give your algorithm a name so I'll say BASIX

18
00:01:05,560 --> 00:01:10,860
algo or whatever you want to call it and then create algorithm and this will eventually create an algorithm.

19
00:01:10,900 --> 00:01:15,850
It will auto fill this of a template for you to work with and it will become more useful to us later

20
00:01:15,850 --> 00:01:16,150
on.

21
00:01:16,150 --> 00:01:21,120
But for now you can go ahead and just do control or command and delete everything.

22
00:01:21,370 --> 00:01:27,670
This left panel here is basically like an editor so you can code in Python here etc. and then you can

23
00:01:27,670 --> 00:01:32,780
save this to save any changes once you hit build algorithm it will begin a simple back tests here.

24
00:01:32,800 --> 00:01:37,040
And if you want to run a full back to us with a lot more information and click here and run full back

25
00:01:37,040 --> 00:01:37,480
to us.

26
00:01:37,600 --> 00:01:39,660
But that just takes a lot longer.

27
00:01:39,800 --> 00:01:41,710
And then there's also a log's panel here.

28
00:01:41,860 --> 00:01:47,020
So anything that gets printed out you'll see it in the logs or if you didn't actually successfully execute

29
00:01:47,020 --> 00:01:47,400
a trade.

30
00:01:47,410 --> 00:01:48,940
It will also log that for you.

31
00:01:48,940 --> 00:01:51,870
And then if you ever get any errors there's runtime errors.

32
00:01:51,910 --> 00:01:52,240
All right.

33
00:01:52,240 --> 00:01:54,650
So let's get started on the very basics.

34
00:01:54,700 --> 00:01:59,620
So the very first function you talk about is the initialize function and then we also need discuss the

35
00:01:59,620 --> 00:02:01,160
handle data function.

36
00:02:01,300 --> 00:02:06,400
What we're going to be doing is we're going to use the tech stock portfolio that we calculated in earlier

37
00:02:06,400 --> 00:02:09,400
lectures when we're talking about portfolio optimization.

38
00:02:09,550 --> 00:02:15,580
Keep remember that we had the Apple Cisco Amazon IBM stock that we were trying to optimize a portfolio

39
00:02:15,580 --> 00:02:16,220
holding.

40
00:02:16,420 --> 00:02:22,990
So our basic algorithm here is just going to be by those three stocks in the optimized portfolio allocation

41
00:02:22,990 --> 00:02:24,400
that we discovered earlier.

42
00:02:24,460 --> 00:02:27,030
It's truly a trading algorithm it's a very simple one.

43
00:02:27,220 --> 00:02:30,900
Essentially just buy three stocks and hold them for a specific time period.

44
00:02:30,940 --> 00:02:36,280
We're really focused here on learning how can we use Quanto paeans ID to take what I think is a good

45
00:02:36,280 --> 00:02:40,240
trading algorithm idea and then actually code it out.

46
00:02:40,240 --> 00:02:45,430
So again the key function when you talk about here is initialize.

47
00:02:45,500 --> 00:02:49,740
So we have initialize and that's going to take in context.

48
00:02:50,150 --> 00:02:54,730
And so to initialize those it's called exactly once when our algorithm starts.

49
00:02:54,760 --> 00:03:01,280
And it requires context as input and this context variable is essentially an augmented Python dictionary

50
00:03:01,280 --> 00:03:06,780
that's used for maintaining the status of your algorithm during your back test or during a live trading.

51
00:03:06,920 --> 00:03:11,090
And it can be referenced in different parts for algorithms so we'll be passing around this context object

52
00:03:11,720 --> 00:03:16,850
throughout our actual functions and it should be used instead of global variables throughout the algorithm

53
00:03:17,360 --> 00:03:21,940
and properties can be assigned that accessed using dot notation.

54
00:03:21,950 --> 00:03:23,820
So let's go ahead and show you how you can do that.

55
00:03:23,840 --> 00:03:26,070
First we'll show you how to reference stocks.

56
00:03:26,330 --> 00:03:31,370
So you end up doing you say contex dot and then you'll notice you have a count in portfolio already

57
00:03:31,370 --> 00:03:32,540
attached to this context.

58
00:03:32,540 --> 00:03:33,890
We'll discuss that later on.

59
00:03:34,080 --> 00:03:39,820
Well we're going to do is we're going to essentially add a property to it and we're going to add AAPL

60
00:03:39,820 --> 00:03:45,150
for Apple and then we're going to use the builtin as ID function.

61
00:03:45,450 --> 00:03:50,650
And this is the security ID function remember as we discussed earlier we don't really want to use symbols

62
00:03:50,650 --> 00:03:55,910
you want to use numerical IDs in case a symbol name has ever been changed or reassigned or been dropped.

63
00:03:55,920 --> 00:04:02,340
So the North uses ID you just type an ID open print season a should see a little window pop up and then

64
00:04:02,340 --> 00:04:03,780
you can search here for company names.

65
00:04:03,810 --> 00:04:05,510
You can search by Ticker.

66
00:04:05,550 --> 00:04:10,980
So you say AAPL will bring up Apple or you can search by the actual company name such as Apple and it

67
00:04:10,980 --> 00:04:14,110
will end up showing you different companies like Applebee's Apple Inc.

68
00:04:14,110 --> 00:04:16,760
Etc. so we end up going.

69
00:04:16,770 --> 00:04:21,730
And then up and down on your key on the keyboard then enter here 24.

70
00:04:21,810 --> 00:04:24,610
If you click your mouse it sometimes doesn't work so keep that in mind.

71
00:04:25,020 --> 00:04:26,410
And now we have our security.

72
00:04:26,430 --> 00:04:29,420
The 24 is linked to context Apple.

73
00:04:29,760 --> 00:04:38,030
And we're going to do this two more times one for Cisco as ID and I began searching Cisco and I found

74
00:04:38,030 --> 00:04:45,320
that here hit enter 19:00 and in context thought AMCON and it's going to be Amazon.

75
00:04:45,440 --> 00:04:53,820
So I'll say the and I will say 16 8 401.

76
00:04:53,830 --> 00:04:54,350
And there it is.

77
00:04:54,380 --> 00:04:55,960
Amazon.com Inc.

78
00:04:55,960 --> 00:04:56,500
Okay.

79
00:04:56,560 --> 00:04:58,660
So that is initialize function.

80
00:04:58,780 --> 00:05:04,390
And the next function we don't need to do is handle data so create a new function here called handle

81
00:05:04,400 --> 00:05:06,800
underscore data.

82
00:05:06,980 --> 00:05:11,300
And this also takes in context but then it also takes in data.

83
00:05:11,330 --> 00:05:14,450
And this is required these two arguments context and data.

84
00:05:14,450 --> 00:05:19,760
So this handle data function is called Once at the end of each minute and it requires that context and

85
00:05:19,760 --> 00:05:25,270
data as input context is a reference to that same dictionary type object in initialize.

86
00:05:25,460 --> 00:05:30,700
So this context is going to have access to this information from initialize so we call initialized first.

87
00:05:30,890 --> 00:05:36,110
And now we've assigned Apple Cisco and Amazon to these three security IDs and we don't have access to

88
00:05:36,110 --> 00:05:38,030
that inside that context.

89
00:05:38,030 --> 00:05:43,150
Data is an object that stores several API functions that we're going to discuss at a later time.

90
00:05:43,160 --> 00:05:46,190
For now we're mainly just going to be working with this context data.

91
00:05:46,460 --> 00:05:52,460
So what we're going to do is learn about one of the fundamental already built in functions in the ID

92
00:05:52,730 --> 00:05:55,630
which is order target percent.

93
00:05:55,760 --> 00:06:00,990
So we're going to say order and you'll see it begins kind of helping you here.

94
00:06:01,140 --> 00:06:01,460
S..

95
00:06:01,480 --> 00:06:02,560
Order target percent.

96
00:06:02,560 --> 00:06:08,110
Go ahead and select that one and it will say place in order to adjust the position to a target percent

97
00:06:08,170 --> 00:06:09,950
the current portfolio value.

98
00:06:10,000 --> 00:06:14,740
So what you end up doing is you pass in a security I.D. and then a target percent.

99
00:06:14,980 --> 00:06:16,020
So what does this actually mean.

100
00:06:16,030 --> 00:06:22,870
Well this handled data function is called At the end of each minute throughout your back test and then

101
00:06:22,870 --> 00:06:26,430
it's going to attempt to order this target percent.

102
00:06:26,620 --> 00:06:33,910
So that is going to pass and here contex that Apple because remember this apple in this context Apple

103
00:06:34,000 --> 00:06:35,640
is that security I.D. for Apple.

104
00:06:35,660 --> 00:06:37,900
I could have also just pass an ID 24.

105
00:06:38,080 --> 00:06:40,960
But it's a lot nicer to read if actually pass an apple here.

106
00:06:41,200 --> 00:06:43,420
And then the second argument is the actual percentage.

107
00:06:43,420 --> 00:06:50,260
I want to order and back when we did our portfolio optimization we figured out that point 2 7 was optimal

108
00:06:50,260 --> 00:06:51,790
for Apple.

109
00:06:51,790 --> 00:06:56,750
So I'm going to do this a couple of more times here for the other stocks.

110
00:06:56,790 --> 00:07:05,880
We're going to say Order target percent's will say contex Cisco and order 20 of that 20 percent of that

111
00:07:06,410 --> 00:07:15,670
and that order target percent's and then say context that AMD ZMM for Amazon and that's going to be

112
00:07:15,670 --> 00:07:17,320
point 5 3.

113
00:07:17,320 --> 00:07:23,200
Now keep in mind this is being called at the end of each minute this may be too often for a more realistic

114
00:07:23,200 --> 00:07:23,950
trading algorithm.

115
00:07:23,950 --> 00:07:27,610
Right now it kind of is want to go over the basics so essential we're going to do is try at the end

116
00:07:27,610 --> 00:07:32,820
of every single minute rebalance our entire portfolio to make sure these percentages are true.

117
00:07:32,830 --> 00:07:36,060
So it's either going to sell or buy securities as needed.

118
00:07:36,100 --> 00:07:38,380
So let's go ahead and save this.

119
00:07:38,470 --> 00:07:40,140
So it's already been saved for us.

120
00:07:41,110 --> 00:07:42,830
And let's run a quick back test on this.

121
00:07:42,840 --> 00:07:45,310
So I have 7:26 20:17 here.

122
00:07:45,450 --> 00:07:51,600
Let's go ahead and run a quick two year back test on this or a little more over two years and we'll

123
00:07:51,600 --> 00:07:56,700
start with let's say just a million dollars and then we're going to say build algorithm again if you

124
00:07:56,700 --> 00:07:57,810
hit run full back.

125
00:07:57,840 --> 00:08:02,440
I'll take you to another page or there's a lot more stuff instead we'll just say build algorithm it

126
00:08:02,490 --> 00:08:07,080
will build it and then it will begin to initialize the back test and then we'll also start taking logs

127
00:08:07,170 --> 00:08:09,140
of what happened during your test.

128
00:08:09,270 --> 00:08:13,560
So you can see here it begins warning you hey your order for 18 shares of Apple failed to fill.

129
00:08:13,560 --> 00:08:19,530
So later on we'll see how we can kind of avoid these fill orders or errors I should say but you can

130
00:08:19,530 --> 00:08:21,060
see here that we're beginning to back to us.

131
00:08:21,060 --> 00:08:24,660
We have our algorithms returns versus the benchmark returns.

132
00:08:24,660 --> 00:08:29,310
So let's go ahead and jump forward in time until the spec test is finished should take just a few minutes

133
00:08:29,310 --> 00:08:33,930
depending on how much time you put in here and how complicated your algorithm is going to jump forward

134
00:08:33,930 --> 00:08:34,680
in time now.

135
00:08:36,080 --> 00:08:40,160
All right so that just finished running that took several minutes for me the pinning on how far your

136
00:08:40,160 --> 00:08:44,160
back Tessa's it could take longer and if you shorten it up they'll take less time.

137
00:08:44,180 --> 00:08:46,550
Now you'll notice here the results are kind of wacky.

138
00:08:46,550 --> 00:08:50,630
We have a huge amount of returns but we have kind of a crazy drawdown and we're going to split the draw

139
00:08:50,630 --> 00:08:52,030
that is at a later date.

140
00:08:52,160 --> 00:08:57,260
But keep in mind that because we're ordering our target percentage every single minute we're going to

141
00:08:57,260 --> 00:08:58,980
get some pretty crazy behavior here.

142
00:08:59,000 --> 00:09:01,850
So I don't think that this was some amazing strategy.

143
00:09:01,940 --> 00:09:06,380
The volatility here is quite bad and you even have a negative sharp ratio.

144
00:09:06,380 --> 00:09:12,750
So we're going to do is show you how you can more realistically achieve trading algorithms later on.

145
00:09:12,770 --> 00:09:15,580
But what I want to do is quickly discuss this data.

146
00:09:15,740 --> 00:09:18,270
So to do that we're going to do a couple of things here.

147
00:09:18,290 --> 00:09:22,870
The first we're going to do is instead of saying each individual ID has its own attribute.

148
00:09:23,060 --> 00:09:24,430
We're going to comment this out.

149
00:09:24,470 --> 00:09:31,800
It's going to highlight this and then do control forward slash and I'm going to create a context object

150
00:09:32,460 --> 00:09:39,840
called let's say tekkies for my tech stocks and it's just going to be a list of these IDs so I'll do

151
00:09:39,840 --> 00:09:40,370
the following.

152
00:09:40,370 --> 00:09:48,310
I have this this and this and so now I have a list of my IDs.

153
00:09:48,360 --> 00:09:53,120
We can expand this just a little more so we get some more room here in the pinning on how much you're

154
00:09:53,140 --> 00:09:57,910
zoomed in you may not get more room so you zoom out and we can see we have more room now for the typing.

155
00:09:57,910 --> 00:10:02,070
And then over here in order target percent I'm actually not going to be ordering anything.

156
00:10:02,260 --> 00:10:04,580
So let's go ahead and comment these out.

157
00:10:04,840 --> 00:10:08,120
It's going to be doing is showing you how we can use data.

158
00:10:08,410 --> 00:10:13,710
So off of this result I'm going to say the following I'll say data dots.

159
00:10:13,710 --> 00:10:18,900
And you notice I have currents can trade is Stael history and fetcher assets.

160
00:10:18,900 --> 00:10:20,480
First off we're going to discuss current.

161
00:10:20,490 --> 00:10:21,010
We'll discuss.

162
00:10:21,010 --> 00:10:23,320
Can trade is stale in history later on.

163
00:10:23,580 --> 00:10:28,110
But we're going to do current and current gets the current value of the specified field for one or more

164
00:10:28,110 --> 00:10:29,770
assets so what does that actually mean.

165
00:10:29,900 --> 00:10:33,740
We can passen either a single ID or a list of IDs.

166
00:10:33,750 --> 00:10:40,200
So for instance I can pass and context that tekkies which is my list of IDs and then I can ask for a

167
00:10:40,200 --> 00:10:41,220
specific field.

168
00:10:41,220 --> 00:10:43,650
And if you want the list of fields and click here and learn more.

169
00:10:43,740 --> 00:10:46,060
But one of the fields that's available is just lowercase.

170
00:10:46,080 --> 00:10:55,010
Close and let's set this equal to our tech close is equal to data current.

171
00:10:55,150 --> 00:11:00,320
And then I'm going to print out that value tech close.

172
00:11:00,630 --> 00:11:05,070
So let's go ahead and see what this looks like when I actually run it and I'm going to make this a lot

173
00:11:05,070 --> 00:11:05,480
shorter.

174
00:11:05,490 --> 00:11:13,900
Let's just make this just essentially one day will say 2017 7 and let's make this the 25th.

175
00:11:13,950 --> 00:11:14,410
All right.

176
00:11:14,490 --> 00:11:18,420
So we're just doing one day back to us and I'm going to make sure that say that I'm going to build the

177
00:11:18,420 --> 00:11:19,050
algorithm.

178
00:11:19,080 --> 00:11:20,260
And let's see what happens here.

179
00:11:21,400 --> 00:11:26,780
So essentially there's nothing to actually back test which means we basically get no results appear.

180
00:11:26,780 --> 00:11:29,300
Instead what I want you to focus on are the logs.

181
00:11:29,590 --> 00:11:35,710
So if we kind of zoom in on the logs here you'll notice we get back this prints equity Apple 1 5 2 3

182
00:11:35,710 --> 00:11:41,830
6 equities Cisco 3 1.9 7 equity Amazon 1 0 3 5.

183
00:11:41,830 --> 00:11:46,350
So what this is doing is remember that handled data operates every single minute.

184
00:11:46,440 --> 00:11:52,620
So every single minute it's grabbing the current closing price for this technical tech stock and then

185
00:11:52,720 --> 00:11:57,570
printing it out and you'll notice that it's printing it out as a panda series.

186
00:11:57,580 --> 00:12:05,800
So I can prove that to you by saying prints the type of tech close and also print a newline here so

187
00:12:05,800 --> 00:12:06,990
we can separate it out.

188
00:12:10,690 --> 00:12:11,660
So prints a new line.

189
00:12:11,670 --> 00:12:15,320
Let's go ahead and save this and build the algorithm and where we should see it.

190
00:12:15,350 --> 00:12:18,500
Oh whoops in bold syntax forgot to close.

191
00:12:18,530 --> 00:12:19,740
Princess here.

192
00:12:20,550 --> 00:12:24,170
Right close the Sprint CS now save and build the algorithm.

193
00:12:24,260 --> 00:12:31,120
Take a look at our logs we can see it storing the initialised back to us just one day and I can see

194
00:12:31,120 --> 00:12:36,520
here my time series and it's going to print out hey this the panels that core series.

195
00:12:36,580 --> 00:12:41,620
So what this is doing is grabbing your current data closing price and you can print it out.

196
00:12:41,620 --> 00:12:45,000
Now usually you won't be printing it out especially if you're running this every minute.

197
00:12:45,010 --> 00:12:50,140
Instead you'll be using the sort of data for your trading algorithm so you could do things like hey

198
00:12:50,140 --> 00:12:56,230
if Apple's current stock price is greater than a certain percentage of Cisco stock price sell Cisco

199
00:12:56,390 --> 00:13:02,140
etc just kind of different things like that so that's the use of data sexy GRABBE current data for use

200
00:13:02,230 --> 00:13:04,330
in your algorithms.

201
00:13:04,330 --> 00:13:09,370
Now there's two other methods I want to discuss off data and that is the is Stael method as well as

202
00:13:09,370 --> 00:13:11,260
they can trade a method.

203
00:13:11,380 --> 00:13:13,960
So we're going to do is the following.

204
00:13:14,170 --> 00:13:22,300
We're going to say we come in all this out or just delete it but in case you ever want to know if the

205
00:13:22,330 --> 00:13:26,950
last traded date for the asah is different than the current algorithm time you can use the is stale

206
00:13:27,210 --> 00:13:29,810
and it's just gonna return a boolean true or false.

207
00:13:29,830 --> 00:13:35,050
So a person in ID for example let's say Apple.

208
00:13:35,500 --> 00:13:39,880
And then we can say print data is stale.

209
00:13:40,360 --> 00:13:46,690
So essentially what that tells you is hey is the current data that I'm getting back equal to the current

210
00:13:46,690 --> 00:13:48,550
data in my back test.

211
00:13:48,550 --> 00:13:50,470
So let's go ahead and build this algorithm.

212
00:13:52,210 --> 00:13:53,740
Let it run.

213
00:13:53,860 --> 00:13:55,000
So here we can see in the log.

214
00:13:55,000 --> 00:13:56,350
It just prints out false.

215
00:13:56,350 --> 00:13:59,470
So again this data is stale method.

216
00:13:59,470 --> 00:14:04,870
What it does is for the given asah or can also taken in iterable of assets such as a list it returns

217
00:14:04,870 --> 00:14:06,960
true if the asset has ever traded.

218
00:14:07,060 --> 00:14:09,720
And there is no trade data for the current simulation time.

219
00:14:09,760 --> 00:14:13,090
And then if the asset has never traded just returns false in our case we're not really trading it.

220
00:14:13,090 --> 00:14:14,250
So it just returns FALSE.

221
00:14:14,410 --> 00:14:20,080
And is just the way you can check if the current data that you're getting is current with the specific

222
00:14:20,080 --> 00:14:23,370
time and the back test.

223
00:14:23,580 --> 00:14:28,600
And then finally the last month I don't want to show you off this data object is can trade it.

224
00:14:28,680 --> 00:14:34,620
So let's go ahead and show you how we can do that so we can say data can trade.

225
00:14:34,620 --> 00:14:41,370
So analysts say if data and we'll see here can trade and this basically just returns true or false.

226
00:14:41,410 --> 00:14:48,630
And it's true if the asset is alive and has traded at least once and we just Pessin in SD here.

227
00:14:48,760 --> 00:14:56,550
So you don't need the extra princes passenger side it's just say for Amazon So Amazon that come sole

228
00:14:56,560 --> 00:15:07,000
say if data can trade this as ID I'm going to order target percent's And let's just say grab SITD of

229
00:15:07,000 --> 00:15:10,420
Amazon which was 1 6 8 4 1

230
00:15:14,880 --> 00:15:19,880
and then we can say what percentage of it we want which is make our whole portfolio that.

231
00:15:20,030 --> 00:15:25,190
So all this is doing is going to be use the term and if the assets currently listed on a supported exchange

232
00:15:25,440 --> 00:15:30,800
in a returns true for a particular asset in a given minute bar in our backtesting result and whether

233
00:15:30,800 --> 00:15:34,880
or not we're able to place an order for that asset and it's actually a really important Guard to have

234
00:15:34,880 --> 00:15:35,650
in your algorithm.

235
00:15:35,660 --> 00:15:41,140
If you're handpicking securities that you want to trade that we don't ever stumble into any errors.

236
00:15:41,160 --> 00:15:46,050
If for some reason you're trying to order a specific stock and maybe sometime in your backtesting gets

237
00:15:46,050 --> 00:15:49,260
delisted or something else happens where you make an error there.

238
00:15:49,440 --> 00:15:53,820
So if data that can trade if you're dealing with particular stocks it's always a good idea to try to

239
00:15:53,820 --> 00:15:55,230
include that.

240
00:15:55,230 --> 00:15:55,510
All right.

241
00:15:55,530 --> 00:15:59,460
So there's the very basics we learned about initialize which is called the once at the beginning of

242
00:15:59,460 --> 00:16:03,220
the algorithm and then handle data which is called every single minute.

243
00:16:03,240 --> 00:16:08,910
So we're going to learn about before trading start which is going to occur before the start of the trading

244
00:16:08,910 --> 00:16:09,680
day.

245
00:16:09,690 --> 00:16:14,610
Let's go ahead and discuss that in the next lecture with part two of the basic algorithm methods.

246
00:16:14,610 --> 00:16:16,630
Thanks everyone and I'll see you at the next lecture.
