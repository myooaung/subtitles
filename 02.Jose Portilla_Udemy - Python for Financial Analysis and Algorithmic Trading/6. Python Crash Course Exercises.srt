1
00:00:05,420 --> 00:00:10,190
Hello everyone and this lecture we're going to quickly go over the exercises for the python crash course

2
00:00:10,200 --> 00:00:13,600
section let's jump to the Jupiter note book and get started.

3
00:00:13,610 --> 00:00:13,880
All right.

4
00:00:13,880 --> 00:00:19,160
So in the zip file that goes along this course the Python for finance repo folder you'll find the python

5
00:00:19,160 --> 00:00:24,650
crash course folder and inside of that there's three files the python crash course notebook which went

6
00:00:24,860 --> 00:00:30,080
through everything that we just covered and there's two notebooks the exercises and the exercise solutions.

7
00:00:30,080 --> 00:00:31,790
Go ahead and click on the exercise notebook.

8
00:00:31,790 --> 00:00:35,970
Open it up and then that will have the python crash course exercises.

9
00:00:36,050 --> 00:00:41,060
And again there's just different tasks free to do and the tasks are related to a little bit of financial

10
00:00:41,060 --> 00:00:41,340
data.

11
00:00:41,360 --> 00:00:46,310
But again very basic stuff will get into a lot more detail finance data later on in the course.

12
00:00:46,310 --> 00:00:50,080
These are just basic tests to review the python crash course material.

13
00:00:50,090 --> 00:00:54,290
So given a price of three hundred Python to figure out the square root of the price there's different

14
00:00:54,290 --> 00:00:58,590
ways you can do that and you can see the expected answers here as output to themselves.

15
00:00:58,600 --> 00:01:02,410
You just fill in the cell with whatever method you thought was best.

16
00:01:02,420 --> 00:01:08,300
Task number two given the string stock indexes equal to espie 500 grabbed 500 from the string using

17
00:01:08,300 --> 00:01:12,020
indexing and slicing task number three.

18
00:01:12,020 --> 00:01:17,220
Given the variables these two guys use that format to print out this following string so that string

19
00:01:17,220 --> 00:01:22,680
interpretation and the DOT format method task number four given the variable of a nested dictionary

20
00:01:22,680 --> 00:01:27,960
of nested lists what I want you to do is just copy and paste this or you actually already have it here.

21
00:01:28,080 --> 00:01:32,570
Use indexing and key calls to grab the following items so you have this dictionary.

22
00:01:32,730 --> 00:01:34,710
And there's actually a nested dictionary inside of it.

23
00:01:34,830 --> 00:01:37,470
And there's another key with a list and a nested list.

24
00:01:37,620 --> 00:01:43,620
So it's kind of a complicated exercise in grabbing keys and grabbing list indices don't worry nothing

25
00:01:43,620 --> 00:01:48,240
in real life for the rest of the course going to be this complicated this nested this is just a practice

26
00:01:48,240 --> 00:01:50,920
to make sure you really understood what we're talking about.

27
00:01:51,120 --> 00:01:59,580
So use indexing he calls to grab this value 250 which is yesterday's S&amp;P 500 price and the number 365

28
00:01:59,640 --> 00:02:00,700
nested inside a list.

29
00:02:00,710 --> 00:02:05,080
So if we come over here you can see there's 365 all the way back there.

30
00:02:05,220 --> 00:02:13,940
So I want you to grab those two values or elements using key calls and index calls task number five.

31
00:02:14,090 --> 00:02:18,940
Given some strings of this form right here what I want you to do is create a function called Source

32
00:02:18,940 --> 00:02:20,900
finder that returns the source.

33
00:02:20,900 --> 00:02:27,080
So you can either price some price than it says source dash dash and source of whatever this data was.

34
00:02:27,170 --> 00:02:32,060
I want you to create a function called Source finder that when you pass the stream here it will return

35
00:02:32,060 --> 00:02:33,470
back the string.

36
00:02:33,680 --> 00:02:41,390
QUANDO as number five is create a function called Price finder that returns true if the word price is

37
00:02:41,390 --> 00:02:44,960
in a string and then returns false with the price is not in a string.

38
00:02:45,200 --> 00:02:47,670
So the keyword is going to be really helpful here.

39
00:02:47,690 --> 00:02:52,340
And as a quick note your function should work even if prices capitalize or an extra punctuation.

40
00:02:52,580 --> 00:02:56,150
So you can see here that what is the price next to questionmark that worked.

41
00:02:56,210 --> 00:03:00,300
Dude what is price on all caps that also works and the price is 300.

42
00:03:00,320 --> 00:03:01,280
That also worked.

43
00:03:01,280 --> 00:03:03,650
So again the keyword is going to be helpful there.

44
00:03:04,970 --> 00:03:10,340
Then test number six is to create a function called Count price that counts the number of times the

45
00:03:10,340 --> 00:03:14,280
word price occurs in a string and then account for capitalization.

46
00:03:14,300 --> 00:03:16,170
And if the word is next to punctuation.

47
00:03:16,430 --> 00:03:19,400
So here we get a string that says wow that is a nice price.

48
00:03:19,400 --> 00:03:23,340
Next to a very nice price Persse couple as I said price three times.

49
00:03:23,450 --> 00:03:28,280
If you pass that string as into the function count price it should be able to count how many times price

50
00:03:28,280 --> 00:03:30,660
showed up then the last task.

51
00:03:30,660 --> 00:03:36,480
Task number seven is create a function called AEG underscore price or average price that takes in a

52
00:03:36,480 --> 00:03:41,220
list of stock price numbers and calculates the average So the average is just the sum of the numbers

53
00:03:41,430 --> 00:03:44,960
divided by the number of elements in the list and it should return a float.

54
00:03:44,970 --> 00:03:47,030
So you see average price three four or five.

55
00:03:47,040 --> 00:03:48,450
And here's a quick hint to this one.

56
00:03:48,600 --> 00:03:53,460
If you want to get the length of a list you can use the built in LTE and length function.

57
00:03:53,700 --> 00:03:58,230
So if you ask for the length of this lists one two three four it returns back.

58
00:03:58,230 --> 00:04:05,210
There's four elements or if you ask for the length of the list a be it returns back to elements so they'll

59
00:04:05,220 --> 00:04:08,080
be useful for this particular task.

60
00:04:08,340 --> 00:04:08,780
OK.

61
00:04:08,970 --> 00:04:09,810
And that's it.

62
00:04:09,810 --> 00:04:11,190
Best of luck on the exercises.

63
00:04:11,190 --> 00:04:13,010
Coming up next are the solutions to.
