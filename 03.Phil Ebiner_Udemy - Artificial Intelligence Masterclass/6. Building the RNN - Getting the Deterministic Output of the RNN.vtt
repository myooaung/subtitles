WEBVTT

00:00.330 --> 00:02.520
Hello and welcome to this new tutorial.

00:02.520 --> 00:07.890
All right so we've just created the island variables curb with our two tensor is first the matrix of

00:07.890 --> 00:11.980
weights output W and second one dy tensor basis.

00:12.060 --> 00:12.770
Output B.

00:13.110 --> 00:20.550
And now we're finally ready to get the output of the iron in which are I remind if we go to our world

00:20.550 --> 00:27.930
morals article the two outputs of the iron in our first Z which will first get in a deterministic way

00:28.080 --> 00:31.010
as in the classic model of the island.

00:31.050 --> 00:37.080
And second the hidden state which will get as well in this same function that we're going to use which

00:37.080 --> 00:40.180
is dynamic iron in function.

00:40.230 --> 00:45.990
And speaking of this dynamic Arnold function well this is going to be our starting point right now because

00:45.990 --> 00:53.550
what we're going to do exactly is just get this whole function with all these inputs here and for the

00:53.600 --> 00:55.970
input where we'll keep the default values.

00:56.010 --> 00:57.670
Well we'll just remove them.

00:57.720 --> 01:01.630
All right so I'm going to copy this and back in python.

01:01.650 --> 01:02.760
Well here we go.

01:02.760 --> 01:04.650
Let's get our two outputs.

01:04.800 --> 01:10.770
And since this function returns directly these outputs Well the first thing we're going to do is introduce

01:10.980 --> 01:14.300
the variables which will be returned by this function.

01:14.340 --> 01:18.870
And so the first output Z first obtained in a deterministic way.

01:18.960 --> 01:24.840
We're going to call that simply output and for the second output meaning the hidden state.

01:24.840 --> 01:28.540
Well we're gonna call this last state.

01:28.640 --> 01:29.880
All right then equals.

01:29.940 --> 01:36.300
And then we can just paste what we've just copied before and now let's just input the argument one by

01:36.300 --> 01:36.540
one.

01:37.080 --> 01:40.570
So starting with the first one cell let's see what it is.

01:40.590 --> 01:43.380
Everything is in the documentation.

01:43.560 --> 01:50.520
And as we see cell is an instance of the iron and cell or the Elysium cell which is our case for us

01:50.850 --> 01:56.550
because indeed the cell that we created before you know implementation is exactly here.

01:56.610 --> 02:04.890
Cell F N equals TAF country or an N lesser known basic Elysium cell it was created as an object of this

02:04.890 --> 02:07.680
class living on basic LSD himself.

02:07.770 --> 02:13.140
And that's exactly our first argument here which is nothing else than the cell in the Palestinian.

02:13.620 --> 02:20.520
And therefore here what we're going to simply do is input for this cell argument are same cell variable

02:20.790 --> 02:26.980
which you created here with the several cases here whether we want to use dropouts on the input the

02:27.000 --> 02:29.750
output and the LSD himself.

02:29.790 --> 02:30.140
All right.

02:30.150 --> 02:34.360
So that's why our first argument now let's see for the second one inputs.

02:34.440 --> 02:37.030
So let's go back again to documentation.

02:37.080 --> 02:41.920
The second argument is inputs which are of course the iron inputs.

02:42.090 --> 02:49.290
And as far as we are concerned well the inputs are exactly the input x which we've created here with

02:49.500 --> 02:55.170
the right shape and which we've copied in this new variable actual input x.

02:55.320 --> 03:02.700
So here for the second argument inputs is going to be equal to actual input x.

03:02.800 --> 03:09.470
All right then next argument the sequence length so the sequence length is of course the sequence length

03:09.470 --> 03:11.310
that we already introduced before.

03:11.420 --> 03:16.070
But remember we actually put that already in the input and output.

03:16.220 --> 03:21.980
So we don't have to specify the here and therefore we'll just leave it to the default value none and

03:21.980 --> 03:28.550
so we can just remove all this and move on to the next argument which is initial state which is of course

03:28.610 --> 03:29.810
what we've gathered here.

03:29.840 --> 03:31.270
Self that initial state.

03:31.280 --> 03:38.360
So I'm just going to copy this so that we can enter here for the initial state argument or self that

03:38.420 --> 03:42.040
initial state object firewall then D type.

03:42.110 --> 03:47.390
Well let's have a look at what it is exactly in the documentation the detail is the data type for the

03:47.450 --> 03:49.860
initial state and expected output.

03:50.000 --> 03:58.720
And as usual and as we've done before we're going to use the tensor flow float 32 to f that float 32

03:59.440 --> 04:02.400
then for the next argument parallel iterations.

04:02.430 --> 04:08.570
Let's see what it is exactly parallel iterations is the number of iterations to run in parallel and

04:08.570 --> 04:11.410
the default values for that is none.

04:11.420 --> 04:12.860
And we will actually not use this.

04:12.860 --> 04:20.150
So we will keep the default values to none and therefore I'm just going to remove that right here.

04:20.150 --> 04:21.560
Then swap memory.

04:21.560 --> 04:23.200
Let's see what it is exactly.

04:23.210 --> 04:30.360
Swap memory swaps the tensor is produced for inference but needed for back prop from GP to use that

04:30.380 --> 04:34.490
for the training and actually for this we will actually use it.

04:34.490 --> 04:41.060
And therefore here instead of keeping the false default value well we will set it to true then for the

04:41.060 --> 04:46.550
time Major the time Major is this time the shape format of the inputs and outputs.

04:46.550 --> 04:49.480
And actually we will keep the default value of false.

04:49.520 --> 04:50.080
So.

04:50.240 --> 04:53.670
And again going to remove this we don't need it.

04:53.780 --> 04:59.840
And finally the scope Well the scope is gonna be of course the scope we already created here which is

04:59.950 --> 05:07.250
our are an invaluable scope and therefore instead of none here I'm just going to input Arnon in quotes.

05:07.250 --> 05:11.000
And here we go that gives us the output and the last date.

05:11.330 --> 05:17.210
Now it's time for you to clearly visualize what is going to be that output in that last state because

05:17.510 --> 05:23.150
we gonna do a lot of reshape and I clearly want you to see the difference between the deterministic

05:23.210 --> 05:29.810
output of the iron and and just to getting output that we will get Then thanks to our matrix of weights

05:29.810 --> 05:35.970
in one detention of basis you know this is to create this hidden layer.

05:35.990 --> 05:41.360
You know this additional hidden layer which we could call the MDC an output layer and which will give

05:41.360 --> 05:46.960
us the output Z and the stochastic way you know as opposed to a deterministic prediction of Z.

05:47.060 --> 05:47.660
Right.

05:47.690 --> 05:49.550
And it is confirmed here.

05:49.550 --> 05:54.060
Right now we've just created a classic Elysium record a neural network.

05:54.230 --> 06:01.780
And then in the next to soils we will add this extra mixture density network as the output layer.

06:01.790 --> 06:09.020
You know exactly this and this will be created thanks to this matrix of weights W and this one did sensor

06:09.080 --> 06:15.890
basis output B and so before we do all the reshaped Well it's important that you clearly understand

06:16.160 --> 06:22.190
what we get here at this stage when we call the dynamic on and function and to do this so that you can

06:22.310 --> 06:23.470
clearly see it.

06:23.510 --> 06:30.830
Well I've prepared all the values of the iron in that we're building you know with the future values

06:30.830 --> 06:36.130
of the parameters that will be used for this model and they are all gathered here.

06:36.170 --> 06:43.100
So you know you have for example the max sequence length which will be 1000 the input SEC with which

06:43.130 --> 06:45.510
we've already mentioned to be equal to 35.

06:45.530 --> 06:51.930
The output SEC with equal to 32 the iron in size which is basically the number of neurons in the and

06:51.970 --> 07:00.260
256 but also you know the number of elements of the vector z for each of the 1000 frames which will

07:00.260 --> 07:01.440
be gathered in the output.

07:01.450 --> 07:08.060
We will see that right away and all the other parameters such as the learning rate equals to 0.01 percent

07:08.450 --> 07:11.450
and all the drop outs values which have already gathered.

07:11.480 --> 07:17.870
So what we're going to do now in order to clearly see what this output is equal to.

07:17.930 --> 07:26.240
Well I'm simply going to execute all this from here to the top so that we can see the shape of that

07:26.240 --> 07:26.870
output.

07:26.960 --> 07:31.200
So executing by precision command or control plus enter.

07:31.520 --> 07:32.460
And now we have it.

07:32.510 --> 07:33.770
Now we have the output.

07:33.770 --> 07:40.850
So what I'm going to do now is I'm going to select that output press again command plus and to execute.

07:40.850 --> 07:41.730
And here we go.

07:41.750 --> 07:45.010
Now we can clearly see the shape of that output.

07:45.090 --> 07:51.800
And so the shape of the output as we can see is a 3D tensor you know 3D tensor flow tensor of dimensions.

07:51.800 --> 07:55.250
One hundred one thousand and two hundred and fifty six.

07:55.280 --> 07:57.480
So it's really important to understand this.

07:57.500 --> 08:00.230
I'm going to explain right away what these numbers are.

08:00.580 --> 08:07.300
Let's the first one 100 is the number of samples in the batch so this first dimension corresponds to

08:07.600 --> 08:17.650
the batch then 1000 here corresponds to that Max sequence link that we've specified for the input and

08:17.650 --> 08:25.240
also for the output and this corresponds basically to the number of frames that we'll have in each sample

08:25.240 --> 08:26.120
of the batch.

08:26.130 --> 08:33.490
So for each of these 100 samples of the bat we'll have 1000 frames and for each of these 1000 friends

08:33.490 --> 08:42.610
we'll have 256 elements in that output vector returned by the iron and so we'll have 1000 output vectors

08:42.880 --> 08:47.470
returns in total by the origin each one corresponding to a specific frame.

08:47.530 --> 08:51.530
However all these frames are not taken randomly.

08:51.560 --> 08:55.570
They are of course a sequence of frames happening in the game.

08:55.660 --> 09:02.890
And the reason why we take 1000 frames is so that I can understand the correlations happening in the

09:02.890 --> 09:05.620
game know the correlations of the frames happening in the game.

09:05.620 --> 09:11.260
So for example when the car has to turn left on a certain corner of the road while a big part of the

09:11.260 --> 09:18.010
1000 frames will capture what the A.I. has to do in order to stay on the road and not get lost in the

09:18.010 --> 09:24.160
green field so the 1000 frames will catch that and for each of the frames will have an encoding vector

09:24.160 --> 09:30.490
of 256 elements encoding what's happening and encoding the correlations so that the agent can learn

09:30.760 --> 09:36.170
to navigate properly you know to stay on the road and go as fast as possible.

09:36.220 --> 09:38.660
So it's really important that you get this.

09:38.860 --> 09:45.160
Right now we've just got the deterministic output of the iron in which is a 3D tensor for which the

09:45.160 --> 09:48.970
three dimensions correspond respectively to first the batch.

09:48.970 --> 09:54.450
Second the max sequence length for the number of frames that there are in each sample of the batch.

09:54.540 --> 10:00.560
And for each frame the third dimension will be the number of elements in the output vector encoding

10:00.790 --> 10:03.280
what's happening in that specific frame.

10:03.310 --> 10:08.500
All right so I'm going to keep that in the console and I'm also going to give you that on and values

10:08.500 --> 10:10.290
that way so that you can play with it.

10:10.360 --> 10:15.700
But this is not going to be the final code because as you can notice I took what's inside the function

10:15.880 --> 10:21.030
and basically put it out of a function so that we can execute it and get all the values.

10:21.100 --> 10:26.230
But I really recommend to do this especially when you're working on a large code you know with a lot

10:26.230 --> 10:27.020
of lines of code.

10:27.020 --> 10:32.230
Well it's important sometimes to keep track of what you're doing and take a step back so that you can

10:32.290 --> 10:36.490
understand what you were creating when dealing with all these variables.

10:36.490 --> 10:36.790
All right.

10:36.790 --> 10:43.100
So now we're going to move on to the next tutorial where we'll start all the reshapes of the outputs.

10:43.120 --> 10:49.390
And the reason for that is because we're going to create that additional layer which is exactly this

10:49.390 --> 10:55.300
one and we're going to do that thanks to what we've created here meaning the matrix of weights output

10:55.300 --> 10:57.770
W and the matrix of bases output.

10:57.790 --> 11:05.920
You have to understand that the purpose of creating these two tenses here is just to create this additional

11:06.160 --> 11:12.790
hidden layer or output layer as it says in the article you know a mixture density network as the output

11:12.790 --> 11:19.690
layer so that we can get the output set as is the Catholic prediction as opposed to a deterministic

11:19.690 --> 11:20.830
prediction.

11:20.830 --> 11:27.160
All right so we'll do that in the next material and of course I'll keep executing in the console what

11:27.160 --> 11:32.320
the output will become after the reshapes so that we can clearly see what we're doing what the output

11:32.320 --> 11:38.650
is becoming and that you can clearly follow how we build these extra hidden layers or empty and output

11:38.650 --> 11:39.560
layer.

11:39.580 --> 11:41.470
All right so let's do that in the next material.

11:41.470 --> 11:46.810
I can't wait to move on to the next step because here we go we are starting now the engine part of the

11:46.810 --> 11:50.360
MGM ion and we're done with this section building the iron in.

11:50.380 --> 11:54.460
And so as soon as you're ready let's kick this off in the next tutorial.

11:54.460 --> 11:55.990
Until then enjoy a.
