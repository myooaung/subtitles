WEBVTT
1
00:00:01.188 --> 00:00:04.255
Another generic problem that Spring Data aims to solve

2
00:00:04.255 --> 00:00:06.718
is the paging and sorting of data.

3
00:00:06.718 --> 00:00:09.659
Imagine our Java application wanted to read all of

4
00:00:09.659 --> 00:00:11.408
the orders from an order table.

5
00:00:11.408 --> 00:00:14.186
If we tried a naÃ¯ve SELECT * FROM orders query,

6
00:00:14.186 --> 00:00:15.111
it would work,

7
00:00:15.111 --> 00:00:19.061
but would also result in the entire orders table being loaded into memory.

8
00:00:19.061 --> 00:00:22.387
If the number of orders was in the order of millions,

9
00:00:22.387 --> 00:00:26.080
then this could result in our app running out of memory and crashing,

10
00:00:26.080 --> 00:00:26.964
not great.

11
00:00:26.964 --> 00:00:30.917
This is why we introduce pagination and sorting into the equation.

12
00:00:30.917 --> 00:00:33.072
Instead of querying all the resulting rows,

13
00:00:33.072 --> 00:00:35.525
we would only query a slice or a page of them,

14
00:00:35.525 --> 00:00:37.606
fixing the memory problem.

15
00:00:37.606 --> 00:00:41.609
If we were using SQL, this would mean providing key words like LIMIT,

16
00:00:41.609 --> 00:00:44.487
OFFSET, and possibly ORDER BY into the query,

17
00:00:44.487 --> 00:00:46.569
introducing this constraint.

18
00:00:46.569 --> 00:00:51.015
What's important to realize though is that this is actually an abstract problem.

19
00:00:51.015 --> 00:00:53.915
Whatever the database, we're always going to be querying data,

20
00:00:53.915 --> 00:00:56.901
and we're always going to need to make sure that the data we

21
00:00:56.901 --> 00:01:00.397
return doesn't result in an out of memory error.

22
00:01:00.397 --> 00:01:03.903
So pagination will be required wherever we use a graph,

23
00:01:03.903 --> 00:01:09.108
document, relational, columnar, or any other type of database.

24
00:01:09.108 --> 00:01:13.320
Okay, so let's take a look at paging and sorting in Spring Data.

25
00:01:13.320 --> 00:01:15.777
Here is our findyByName derived query from earlier,

26
00:01:15.777 --> 00:01:19.861
only it now has two extra arguments, Pageable and Sort.

27
00:01:19.861 --> 00:01:23.164
The first thing to note is that when using the page and sort arguments,

28
00:01:23.164 --> 00:01:24.962
the query is derived as usual.

29
00:01:24.962 --> 00:01:30.071
So with or without these arguments, the same core findByName query is generated.

30
00:01:30.071 --> 00:01:33.860
The pageable argument is pretty simple to create.

31
00:01:33.860 --> 00:01:36.772
We can build a page request and implementation of Pageable,

32
00:01:36.772 --> 00:01:40.598
passing in the page index and size of a page.

33
00:01:40.598 --> 00:01:42.206
When our query is generated,

34
00:01:42.206 --> 00:01:46.110
adding this parameter will add an offset and LIMIT keyword to it.

35
00:01:46.110 --> 00:01:48.409
The sort argument is also simple.

36
00:01:48.409 --> 00:01:51.286
In this example, we can create a sort by a column name,

37
00:01:51.286 --> 00:01:53.267
in this case date of birth.

38
00:01:53.267 --> 00:01:55.435
This will add an order by to the query.

39
00:01:55.435 --> 00:01:58.188
And by default, we will get ascending order.

40
00:01:58.188 --> 00:02:00.916
As well as using page and sort directly in derived queries,

41
00:02:00.916 --> 00:02:04.960
you can also make use of the PagingAndSortingRepository.

42
00:02:04.960 --> 00:02:07.226
This is a subclass of the CRUDRepository,

43
00:02:07.226 --> 00:02:10.428
overloading the findAll method in the T times.

44
00:02:10.428 --> 00:02:12.855
The first method overloads with the sort argument,

45
00:02:12.855 --> 00:02:15.537
and the second overloads with the pageable argument.

46
00:02:15.537 --> 00:02:19.070
It really is up to you when you make use of this

47
00:02:19.070 --> 00:02:21.108
repository or whether you just add page and sort

48
00:02:21.108 --> 00:02:24.189
arguments directly to your derived queries.

49
00:02:24.189 --> 00:02:26.780
As a rule of thumb though, less code is always better.

50
00:02:26.780 --> 00:02:35.000
So I'd recommend defaulting to use of the PagingAndSortingRepository and then creating additional methods on top of it when required.

