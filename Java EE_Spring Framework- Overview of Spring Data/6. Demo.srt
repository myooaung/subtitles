1
00:00:00,983 --> 00:00:05,656
Okay, in our first demo, we'll be creating a project using Spring Initializr,

2
00:00:05,656 --> 00:00:08,918
a simple way of creating a Spring Boot application.

3
00:00:08,918 --> 00:00:12,400
We'll then create a Java class, which maps to a database table.

4
00:00:12,400 --> 00:00:12,905
And finally,

5
00:00:12,905 --> 00:00:16,856
we'll create a small health check test to verify our application boots

6
00:00:16,856 --> 00:00:21,340
and that we can write our entity to the database.

7
00:00:21,340 --> 00:00:26,364
Okay, to get started with Spring Data, we first need to create our demo project.

8
00:00:26,364 --> 00:00:28,255
As this will be a Spring Boot project,

9
00:00:28,255 --> 00:00:32,131
the easiest way to do this is via start.spring .io.

10
00:00:32,131 --> 00:00:34,106
Essentially, it's an online form,

11
00:00:34,106 --> 00:00:36,663
which allows you to select some settings for your new

12
00:00:36,663 --> 00:00:39,574
Spring Boot project after which you can then generate it

13
00:00:39,574 --> 00:00:41,737
and download it in a ZIP file.

14
00:00:41,737 --> 00:00:45,554
For example, you can choose a build tool here, such as Maven or Gradle.

15
00:00:45,554 --> 00:00:48,138
We'll be using Maven for this project.

16
00:00:48,138 --> 00:00:52,094
You can also choose a language, and, in our case, we'll be sticking with Java.

17
00:00:52,094 --> 00:00:53,846
The Spring Boot version is also configurable,

18
00:00:53,846 --> 00:00:59,399
but we'll stick with the latest, in this case version 2.1 .9.

19
00:00:59,399 --> 00:01:03,538
Okay, for the rest of our project, we need to do some customizations.

20
00:01:03,538 --> 00:01:06,257
Let's give our project a group ID, com.pluralsight,

21
00:01:06,257 --> 00:01:10,152
an artifact ID, spring-data-overview.

22
00:01:10,152 --> 00:01:10,641
Following this,

23
00:01:10,641 --> 00:01:15,275
we can scroll down and pick some extra Maven dependencies to be added.

24
00:01:15,275 --> 00:01:19,228
Doing it this way is pretty nice as setting up a POM with various starter

25
00:01:19,228 --> 00:01:22,728
dependencies and plugins can be a bit cumbersome to do manually.

26
00:01:22,728 --> 00:01:25,839
We can first search for Spring Data JPA as it's the Spring

27
00:01:25,839 --> 00:01:27,978
Data module we'll be using for this course.

28
00:01:27,978 --> 00:01:31,334
We don't need to include Spring Data Commons as it's a

29
00:01:31,334 --> 00:01:33,635
transitive dependency of each module.

30
00:01:33,635 --> 00:01:38,918
Then, we can add H2, the in-memory database that we'll be using during our tests.

31
00:01:38,918 --> 00:01:40,118
And that's about it.

32
00:01:40,118 --> 00:01:42,048
All we need to do now is press Generate,

33
00:01:42,048 --> 00:01:44,687
and our project will be packaged into a ZIP file and

34
00:01:44,687 --> 00:01:46,772
downloaded onto our file system.

35
00:01:46,772 --> 00:01:51,787
After this, we can then import the project into our IDE.

36
00:01:51,787 --> 00:01:56,533
Okay, so now we've imported our project, let's take a look at its contents.

37
00:01:56,533 --> 00:01:57,647
Navigating to our POM file,

38
00:01:57,647 --> 00:02:00,699
we can see that it inherits from the spring-boot-starter- parent,

39
00:02:00,699 --> 00:02:04,501
providing us with managed dependency versions and plugins.

40
00:02:04,501 --> 00:02:07,041
I'm not going to go into too much detail about this as its

41
00:02:07,041 --> 00:02:09,300
better covered in a Spring Boot course.

42
00:02:09,300 --> 00:02:12,283
Scrolling down, we can see the dependencies that we added,

43
00:02:12,283 --> 00:02:15,333
spring-boot-starter-jpa and h2.

44
00:02:15,333 --> 00:02:18,671
Spring-boot-starter-test is also added by default.

45
00:02:18,671 --> 00:02:20,583
Now let's add one more additional dependency,

46
00:02:20,583 --> 00:02:24,799
assertj, as we'll be using it for our test assertions.

47
00:02:24,799 --> 00:02:28,600
An alternative, such as Hamcrest or even native assertions would be fine,

48
00:02:28,600 --> 00:02:31,215
but I'm choosing AssertJ for personal preference as it

49
00:02:31,215 --> 00:02:32,859
comes with some really useful assertions,

50
00:02:32,859 --> 00:02:35,858
which we'll make use of throughout the demos.

51
00:02:35,858 --> 00:02:38,436
Now that's done, let's navigate to our class file.

52
00:02:38,436 --> 00:02:39,154
By default,

53
00:02:39,154 --> 00:02:42,306
there's one single class file named after our project

54
00:02:42,306 --> 00:02:45,038
annotated with @SpringBootApplication.

55
00:02:45,038 --> 00:02:47,029
It comes with a default main method,

56
00:02:47,029 --> 00:02:49,639
which will be executed when the application is started.

57
00:02:49,639 --> 00:02:49,938
Again,

58
00:02:49,938 --> 00:02:53,132
I'm not going to go into the specifics here as this is

59
00:02:53,132 --> 00:02:55,343
covered in a Spring Boot-specific course.

60
00:02:55,343 --> 00:02:57,503
Navigating to our test directory,

61
00:02:57,503 --> 00:03:00,030
we can see this one Spring Boot test named contextLoads.

62
00:03:00,030 --> 00:03:02,891
By default, it runs with the SpringRunner,

63
00:03:02,891 --> 00:03:04,928
meaning that when we execute it,

64
00:03:04,928 --> 00:03:09,429
our Spring Boot application will start up with a close to full context.

65
00:03:09,429 --> 00:03:12,074
Let's execute it and look at the logs.

66
00:03:12,074 --> 00:03:13,580
We can first see the Spring banner,

67
00:03:13,580 --> 00:03:16,203
signifying that our Spring Boot application is starting.

68
00:03:16,203 --> 00:03:20,748
We can also see log lines referencing that Spring Data is starting up,

69
00:03:20,748 --> 00:03:22,995
for example bootstrapping repositories and,

70
00:03:22,995 --> 00:03:24,991
at an even lower level, Hibernate is starting,

71
00:03:24,991 --> 00:03:29,191
which is what Spring Data JPA uses behind the scenes.

72
00:03:29,191 --> 00:03:30,228
The test has gone green,

73
00:03:30,228 --> 00:03:34,609
which means our application and all its dependencies started successfully.

74
00:03:34,609 --> 00:03:35,000
Okay,

75
00:03:35,000 --> 00:03:38,618
let's start by creating a JPA entity that we'll use

76
00:03:38,618 --> 00:03:40,382
during the rest of this course.

77
00:03:40,382 --> 00:03:43,437
We'll call it Flight, and it will represent a scheduled flight.

78
00:03:43,437 --> 00:03:46,552
This will map directly to a database table.

79
00:03:46,552 --> 00:03:49,897
We'll start by giving it an ID field, the database ID,

80
00:03:49,897 --> 00:03:53,671
an origin field, representing the airport that a flight starts at,

81
00:03:53,671 --> 00:03:56,902
a destination field, representing the airport where it terminates,

82
00:03:56,902 --> 00:03:58,672
and a scheduledAt field,

83
00:03:58,672 --> 00:04:02,030
representing what time the flight is scheduled to depart.

84
00:04:02,030 --> 00:04:02,823
Once we've done this,

85
00:04:02,823 --> 00:04:06,478
we can map it with the JPA annotations to make it a managed entity,

86
00:04:06,478 --> 00:04:09,680
in other words something that can be loaded and saved

87
00:04:09,680 --> 00:04:12,136
into the database using Spring Data JPA.

88
00:04:12,136 --> 00:04:14,978
Again, JPA is not the focus of the course,

89
00:04:14,978 --> 00:04:18,796
so I won't go into the details of what these annotations do.

90
00:04:18,796 --> 00:04:22,452
But essentially, we use our entity to make it recognized as a table,

91
00:04:22,452 --> 00:04:25,679
an ID to denote a primary key, which, by default,

92
00:04:25,679 --> 00:04:30,118
will be generated for us using a GeneratedValue annotation.

93
00:04:30,118 --> 00:04:33,123
Finally, let's generate some getters and setters.

94
00:04:33,123 --> 00:04:35,832
We don't need any more JPA annotations because it's

95
00:04:35,832 --> 00:04:38,332
intelligent enough to figure out that the rest of the fields

96
00:04:38,332 --> 00:04:41,074
map to database columns of the same name.

97
00:04:41,074 --> 00:04:44,160
Okay, let's switch to our test and modify it slightly.

98
00:04:44,160 --> 00:04:46,587
We're not going to use Spring Data at all here,

99
00:04:46,587 --> 00:04:51,098
but we're going to use a Spring JPA EntityManager directly to verify that

100
00:04:51,098 --> 00:04:55,516
it's possible to save and read our flight to our H2 database just as a health

101
00:04:55,516 --> 00:04:58,327
check to know that everything's set up correctly.

102
00:04:58,327 --> 00:05:01,173
Let's start by wiring in our EntityManager and then

103
00:05:01,173 --> 00:05:04,624
renaming our test to verifyFlightCanBeSaved.

104
00:05:04,624 --> 00:05:09,436
Our EntityManager is set up for us automatically by Spring Boot starter JPA.

105
00:05:09,436 --> 00:05:12,553
Once we've done this, we can create an instance of our flight.

106
00:05:12,553 --> 00:05:14,942
Let's give it some arbitrary data and then call

107
00:05:14,942 --> 00:05:18,105
entityManager.persist to store it in the H2 database.

108
00:05:18,105 --> 00:05:20,942
Once we've done that, let's create a query,

109
00:05:20,942 --> 00:05:23,413
SELECT FROM Flight, which will read our flight from the database,

110
00:05:23,413 --> 00:05:27,330
and then we'll create an assertion that our single flight has been returned,

111
00:05:27,330 --> 00:05:30,500
and that it's the same flight as the one we saved.

112
00:05:30,500 --> 00:05:32,294
We didn't bother overriding equals here,

113
00:05:32,294 --> 00:05:34,946
so it's checking the flights are the same instance,

114
00:05:34,946 --> 00:05:37,633
which they are as the EntityManager already has it

115
00:05:37,633 --> 00:05:39,610
in memory from when we saved it.

116
00:05:39,610 --> 00:05:42,038
We'll also make this a DataJpaTest,

117
00:05:42,038 --> 00:05:45,123
which means that only a partial Spring context will be created

118
00:05:45,123 --> 00:05:47,106
containing our persistence specific bean,

119
00:05:47,106 --> 00:05:50,808
which is H2, our EntityManager, Spring Data repositories,

120
00:05:50,808 --> 00:05:51,976
and so on.

121
00:05:51,976 --> 00:05:52,731
This, in turn,

122
00:05:52,731 --> 00:05:56,000
makes our test execute as quickly as possible as there's no

123
00:05:56,000 --> 00:05:58,112
overhead of starting up things that we don't need,

124
00:05:58,112 --> 00:05:59,892
such as a web server.

125
00:05:59,892 --> 00:06:02,198
If you're wondering about creating our database table,

126
00:06:02,198 --> 00:06:06,334
by default, it's created for us based on the JPA annotations.

127
00:06:06,334 --> 00:06:09,502
So we don't need to create SQL to do this ourselves.

128
00:06:09,502 --> 00:06:12,748
Okay, let's run our test and verify that it passes.

129
00:06:12,748 --> 00:06:13,289
It does.

130
00:06:13,289 --> 00:06:15,967
This confirms we can save our entity to our database,

131
00:06:15,967 --> 00:06:19,956
so we're ready to get started by making use of Spring Data.

132
00:06:19,956 --> 00:06:22,758
It's thanks to Spring Boot that this was so simple as the

133
00:06:22,758 --> 00:06:25,932
creation and configuration of things, such as our EntityManager,

134
00:06:25,932 --> 00:06:32,000
are all handled for us by Spring. This pattern will be the same across all modules of Spring Data.

