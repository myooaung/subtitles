1
00:00:00,937 --> 00:00:02,759
In our final demo for this module,

2
00:00:02,759 --> 00:00:05,900
we're going to create a custom repository interface.

3
00:00:05,900 --> 00:00:08,907
We'll then implement the interface with our own custom code,

4
00:00:08,907 --> 00:00:13,005
after which we'll make our Spring Data repository extend it.

5
00:00:13,005 --> 00:00:18,986
And finally, we'll verify our custom implementation functions with a test.

6
00:00:18,986 --> 00:00:24,175
Okay, let's get started by creating a new test called CustomImplTest.

7
00:00:24,175 --> 00:00:28,426
We'll run it with the SpringRunner and make it a JPA test just like before,

8
00:00:28,426 --> 00:00:30,928
also wiring in our FlightRepository.

9
00:00:30,928 --> 00:00:34,855
We'll then create a test named shouldSaveCustomImpl and then save a flight

10
00:00:34,855 --> 00:00:37,948
to London whilst creating a helper method in the process.

11
00:00:37,948 --> 00:00:42,287
We'll call this flight toDelete and then create a second flight called toKeep,

12
00:00:42,287 --> 00:00:44,243
which will be to Paris.

13
00:00:44,243 --> 00:00:48,327
Following this, we'll save them, delete the one to London by origin,

14
00:00:48,327 --> 00:00:52,208
and assert that the only flight in the database is the one to Paris.

15
00:00:52,208 --> 00:00:56,236
Notice how we didn't generate the deleteByOrigin method yet as in this case,

16
00:00:56,236 --> 00:00:59,865
we're going to create a custom implementation to perform our query

17
00:00:59,865 --> 00:01:02,919
rather than relying on Spring Data to generate it for us.

18
00:01:02,919 --> 00:01:07,750
First, let's create a new interface called DeleteByOriginRepository.

19
00:01:07,750 --> 00:01:10,107
We'll define our method deleteByOrigin here,

20
00:01:10,107 --> 00:01:12,090
navigate to our existing FlightRepository,

21
00:01:12,090 --> 00:01:14,597
and make it implement this interface.

22
00:01:14,597 --> 00:01:18,685
It's important we do it this way as putting a method on a separate

23
00:01:18,685 --> 00:01:22,577
interface allows us to create a custom implementation of it.

24
00:01:22,577 --> 00:01:27,235
Let's do this by creating a subclass called DeleteByOriginRepositoryImpl.

25
00:01:27,235 --> 00:01:29,712
Now we can literally put any code we want here,

26
00:01:29,712 --> 00:01:32,579
even code that wasn't data access code.

27
00:01:32,579 --> 00:01:33,394
But for this example,

28
00:01:33,394 --> 00:01:37,764
we'll just use the JPA EntityManager to perform the delete query.

29
00:01:37,764 --> 00:01:40,489
We'll inject the EntityManager by making it a constructor

30
00:01:40,489 --> 00:01:43,218
argument and then create a native delete query,

31
00:01:43,218 --> 00:01:47,911
DELETE from flight WHERE origin is equal to our provided parameter.

32
00:01:47,911 --> 00:01:48,687
Now that's done,

33
00:01:48,687 --> 00:01:52,971
let's switch back to our test and run it to see if it goes green.

34
00:01:52,971 --> 00:01:55,583
It does meaning our query has worked.

35
00:01:55,583 --> 00:01:56,837
Now we could stop here.

36
00:01:56,837 --> 00:01:59,596
But to prove that it really was our code that was executed,

37
00:01:59,596 --> 00:02:03,355
let's navigate back to it and add a breakpoint.

38
00:02:03,355 --> 00:02:06,810
We can then rerun our test and confirm that the breakpoint was hit,

39
00:02:06,810 --> 00:02:11,054
proving that it's indeed our custom code that's getting executed.

40
00:02:11,054 --> 00:02:12,952
And that covers it for this demo.

41
00:02:12,952 --> 00:02:15,438
This last step hopefully proves that there's no limit

42
00:02:15,438 --> 00:02:23,000
to the extensibility of Spring Data, even though in the majority of use cases, the base abstractions are still probably enough.

