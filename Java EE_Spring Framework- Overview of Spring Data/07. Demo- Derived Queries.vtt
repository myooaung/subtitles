WEBVTT
1
00:00:01.041 --> 00:00:02.257
Okay, in this demo,

2
00:00:02.257 --> 00:00:06.550
we're going to create some derived queries for our scheduled flights.

3
00:00:06.550 --> 00:00:10.770
We're then going to verify that those queries function with a test.

4
00:00:10.770 --> 00:00:11.139
Okay,

5
00:00:11.139 --> 00:00:16.493
let's start by navigating to our test directory and creating a new test class.

6
00:00:16.493 --> 00:00:18.891
We'll call it DerivedQueryTest.

7
00:00:18.891 --> 00:00:19.984
Just like our other test,

8
00:00:19.984 --> 00:00:24.189
we'll use a SpringRunner and make it a JPA test so only a partial

9
00:00:24.189 --> 00:00:28.251
persistent specific Spring context is created during our tests.

10
00:00:28.251 --> 00:00:30.618
We'll then wire in our FlightRepository so we can

11
00:00:30.618 --> 00:00:32.543
make use of it during the test.

12
00:00:32.543 --> 00:00:36.747
This time we'll create a setUp method and call deleteAll during it.

13
00:00:36.747 --> 00:00:39.745
This ensures a database is empty at the start of each test.

14
00:00:39.745 --> 00:00:42.952
So the state of one test cannot interfere with the state of

15
00:00:42.952 --> 00:00:46.513
another by leaving some data behind accidentally.

16
00:00:46.513 --> 00:00:48.066
We can call our test shouldFindFlightsFromLondon,

17
00:00:48.066 --> 00:00:52.860
and it will be used to query all flights departing from London.

18
00:00:52.860 --> 00:00:54.858
Let's start by creating our flight instance,

19
00:00:54.858 --> 00:00:59.293
this time with a helper method while we pass in the origin as an argument,

20
00:00:59.293 --> 00:01:03.316
London, and the rest of the fields are populated with some defaults.

21
00:01:03.316 --> 00:01:06.642
We'll create two flights from London and one flight from New York and then

22
00:01:06.642 --> 00:01:10.644
save all three of them to the database using the repository.

23
00:01:10.644 --> 00:01:14.200
Okay, what we need to do now is query all the flights from London,

24
00:01:14.200 --> 00:01:17.029
which we can't do yet as we've yet to create our

25
00:01:17.029 --> 00:01:19.211
repository method to perform the query.

26
00:01:19.211 --> 00:01:22.058
Let's assign a list of flights to a call to find by

27
00:01:22.058 --> 00:01:23.953
origin the method we're going to create,

28
00:01:23.953 --> 00:01:26.580
passing in London as an argument.

29
00:01:26.580 --> 00:01:26.842
Then,

30
00:01:26.842 --> 00:01:30.768
let's assert that we've received two flights back as only two are to London,

31
00:01:30.768 --> 00:01:34.457
and then let's assert that they are equal to flight1 and flight2,

32
00:01:34.457 --> 00:01:36.861
not flight3, which was to New York.

33
00:01:36.861 --> 00:01:39.143
Okay, thanks to the beauty of derived queries,

34
00:01:39.143 --> 00:01:41.844
we don't actually need to implement our methods.

35
00:01:41.844 --> 00:01:44.719
We only need to declare it in our interface.

36
00:01:44.719 --> 00:01:47.648
Nicely, our IDE can do this for us.

37
00:01:47.648 --> 00:01:48.354
Behind the scenes,

38
00:01:48.354 --> 00:01:52.633
this method will map to a SELECT * FROM flight WHERE origin = parameter,

39
00:01:52.633 --> 00:01:57.125
but only because we're using the JPA version of Spring Data.

40
00:01:57.125 --> 00:02:00.234
That's the beauty of the repository pattern as this method would

41
00:02:00.234 --> 00:02:03.402
remain the same across multiple Spring Data modules.

42
00:02:03.402 --> 00:02:06.436
Whereas a derived query would change based on what's needed

43
00:02:06.436 --> 00:02:08.763
for the particular data store being used.

44
00:02:08.763 --> 00:02:13.760
Great, let's switch back to our test and run it to confirm that it passes.

45
00:02:13.760 --> 00:02:18.050
It does, meaning our derived query has worked successfully.

46
00:02:18.050 --> 00:02:19.820
So now we've done a simple example,

47
00:02:19.820 --> 00:02:22.732
we're going to create a few more tests trying out some

48
00:02:22.732 --> 00:02:24.615
different types of derived queries.

49
00:02:24.615 --> 00:02:29.298
We'll start by creating a test called shouldFindFlightsFromLondonToParis.

50
00:02:29.298 --> 00:02:31.026
This time we'll give our method two arguments,

51
00:02:31.026 --> 00:02:35.021
an origin and a destination, and then we'll generate it.

52
00:02:35.021 --> 00:02:37.358
Once this is done, we can create a couple more flights.

53
00:02:37.358 --> 00:02:41.652
So we have one from London to Paris, one from London to New York,

54
00:02:41.652 --> 00:02:43.901
and one from Madrid to Paris.

55
00:02:43.901 --> 00:02:47.667
We'll create a query method called findByOriginAndDestination,

56
00:02:47.667 --> 00:02:51.775
passing in London and Paris, and then generate it using our IDE.

57
00:02:51.775 --> 00:02:52.496
Behind the scenes,

58
00:02:52.496 --> 00:02:56.117
this will become a SELECT * FROM flight WHERE origin =

59
00:02:56.117 --> 00:02:59.842
parameter 1 AND destination = parameter 2.

60
00:02:59.842 --> 00:03:03.037
Finally, we can assert that our query returns only one flight,

61
00:03:03.037 --> 00:03:08.122
the one from London to Paris, in order to verify it works.

62
00:03:08.122 --> 00:03:10.652
We can then save the flight so the start of the test,

63
00:03:10.652 --> 00:03:12.987
run the test, wait for a second or so,

64
00:03:12.987 --> 00:03:16.997
and be pleased to see that the test has gone green proving we've

65
00:03:16.997 --> 00:03:20.250
successfully implemented yet another derived query.

66
00:03:20.250 --> 00:03:24.486
And now we've done an AND query, we can also try out an OR query.

67
00:03:24.486 --> 00:03:28.034
We'll create a test called shouldFindFlightsFromLondonOrMadrid,

68
00:03:28.034 --> 00:03:30.608
creating a flight from London to New York,

69
00:03:30.608 --> 00:03:34.091
Tokyo to New York, and Madrid to New York too.

70
00:03:34.091 --> 00:03:36.752
We'll then save these to the database and then generate

71
00:03:36.752 --> 00:03:41.825
our derived query named findByOriginIn, providing an array or arguments.

72
00:03:41.825 --> 00:03:45.408
This one's interesting as behind the scenes we can in query where

73
00:03:45.408 --> 00:03:49.199
Spring Data is intelligent enough to infer that the array is all of

74
00:03:49.199 --> 00:03:51.478
the values to passed into the IN clause.

75
00:03:51.478 --> 00:03:54.293
The generated query would be something like SELECT *

76
00:03:54.293 --> 00:03:57.068
FROM flight WHERE origin IN values.

77
00:03:57.068 --> 00:03:59.565
Finally, let's create our assertion.

78
00:03:59.565 --> 00:04:02.364
We expect two elements here as the first flight is from London,

79
00:04:02.364 --> 00:04:04.741
and the last flight is from Madrid.

80
00:04:04.741 --> 00:04:08.697
On running our test, we can wait and then see that it's gone green,

81
00:04:08.697 --> 00:04:11.969
proving again that our query works successfully.

82
00:04:11.969 --> 00:04:15.377
Okay, let's create one final test where we query for flights,

83
00:04:15.377 --> 00:04:16.995
but make our search case-insensitive.

84
00:04:16.995 --> 00:04:21.169
This is something that's likely to come up a lot in a real system,

85
00:04:21.169 --> 00:04:24.100
for example if we're dependent on user input.

86
00:04:24.100 --> 00:04:26.509
We'll create a flight from London all in uppercase,

87
00:04:26.509 --> 00:04:29.077
save the flight, and then, to begin with,

88
00:04:29.077 --> 00:04:31.896
use our existing findyByOrigin query.

89
00:04:31.896 --> 00:04:35.199
Then we can assert a flight is returned.

90
00:04:35.199 --> 00:04:36.905
If we run our test, it will, of course,

91
00:04:36.905 --> 00:04:40.237
fail as every flight is returned instead of one.

92
00:04:40.237 --> 00:04:42.934
If we switch back to our test method and create a new

93
00:04:42.934 --> 00:04:46.529
method called findByOriginIgnoreCase, it should work.

94
00:04:46.529 --> 00:04:47.293
Behind the scenes,

95
00:04:47.293 --> 00:04:50.363
a query will look something like SELECT * FROM flight

96
00:04:50.363 --> 00:04:53.572
WHERE upper origin = upper parameter.

97
00:04:53.572 --> 00:04:57.894
Okay, now that's done, let's run our test and see if it now passes.

98
00:04:57.894 --> 00:04:58.550
It does.

99
00:04:58.550 --> 00:05:00.848
And that covers it for this demo.

100
00:05:00.848 --> 00:05:03.780
Whilst we've only hit the tip of the iceberg in terms of what Spring

101
00:05:03.780 --> 00:05:07.163
Data is capable of in terms of derived queries,

102
00:05:07.163 --> 00:05:12.000
this should hopefully lay a solid foundation for us to start to work with them in the future.

