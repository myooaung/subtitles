WEBVTT
1
00:00:01.241 --> 00:00:05.810
Okay, in this demo, we're going to be creating our first CRUDRepository.

2
00:00:05.810 --> 00:00:06.637
Once we've done that,

3
00:00:06.637 --> 00:00:12.014
we'll use the CRUDRepository to interact with our database table.

4
00:00:12.014 --> 00:00:16.938
Okay, let's start by creating a repository interface for our flight entity.

5
00:00:16.938 --> 00:00:19.720
We'll create a repository package for it and then call

6
00:00:19.720 --> 00:00:21.179
the repository itself FlightRepository.

7
00:00:21.179 --> 00:00:26.002
Once we've done that, we make it extend from the CRUDRepository.

8
00:00:26.002 --> 00:00:28.142
We'll provide two type arguments,

9
00:00:28.142 --> 00:00:31.227
Flight representing the entity that it manages and Long

10
00:00:31.227 --> 00:00:34.695
representing the data type of the ID of the entity.

11
00:00:34.695 --> 00:00:38.065
Let's then switch back to our test and rename it CrudTests and then

12
00:00:38.065 --> 00:00:41.390
delete what's there already as it's no longer needed.

13
00:00:41.390 --> 00:00:45.290
We'll use our repository to save and read our flight instead now.

14
00:00:45.290 --> 00:00:49.426
Okay, let's create a test named shouldPerformCRUDOperations.

15
00:00:49.426 --> 00:00:52.089
We'll then wire in our FlightRepository as a dependency and

16
00:00:52.089 --> 00:00:55.438
then start making use of it within our tests.

17
00:00:55.438 --> 00:01:00.052
Let's first create a flight entity, populating it with some arbitrary data.

18
00:01:00.052 --> 00:01:03.100
Then let's use our repository to save our flight.

19
00:01:03.100 --> 00:01:05.497
Remember, all we've done is implement an interface here.

20
00:01:05.497 --> 00:01:10.539
Yet now we've got all this data store agnostic capability out of the box.

21
00:01:10.539 --> 00:01:15.555
We can see variations of operations for saving, deleting, finding, and more.

22
00:01:15.555 --> 00:01:16.259
In our case,

23
00:01:16.259 --> 00:01:20.529
let's call save to save our flight instance to a row in the flight table.

24
00:01:20.529 --> 00:01:21.090
Once that's done,

25
00:01:21.090 --> 00:01:23.928
we can see if it has been saved successfully by reading it

26
00:01:23.928 --> 00:01:27.041
back from the database using the repository.

27
00:01:27.041 --> 00:01:31.583
We can do this by first calling findAll, which will return all the rows.

28
00:01:31.583 --> 00:01:32.770
As we've only saved one flight,

29
00:01:32.770 --> 00:01:37.123
there will only be one row so we can assert the list has a size of 1.

30
00:01:37.123 --> 00:01:40.630
We can read this first element from the list and assert all of its fields

31
00:01:40.630 --> 00:01:43.318
are equal to the fields of the flight that we saved,

32
00:01:43.318 --> 00:01:46.688
which they will be as they'll be the same instance of the flight.

33
00:01:46.688 --> 00:01:48.876
Next, let's try deleting our flight.

34
00:01:48.876 --> 00:01:49.191
Again,

35
00:01:49.191 --> 00:01:53.638
this proves how Spring Data JPA is easy to work with as all we need to do is

36
00:01:53.638 --> 00:01:56.017
call the preconfigured delete method on our CRUDRepository,

37
00:01:56.017 --> 00:01:58.808
passing in the instance of our flight.

38
00:01:58.808 --> 00:01:59.206
Afterwards,

39
00:01:59.206 --> 00:02:03.023
we can verify that the deletion was successful by doing a count

40
00:02:03.023 --> 00:02:05.593
query and asserting that the result is 0.

41
00:02:05.593 --> 00:02:09.444
This is because we deleted the only row there is for the table.

42
00:02:09.444 --> 00:02:11.332
Thus, it should be empty.

43
00:02:11.332 --> 00:02:14.639
Okay, let's run our test and verify that it still passes.

44
00:02:14.639 --> 00:02:15.433
It does,

45
00:02:15.433 --> 00:02:19.476
which verifies that our repository allows us to interact with the database.

46
00:02:19.476 --> 00:02:23.467
Hopefully this is now starting to build a picture of just how powerful Spring

47
00:02:23.467 --> 00:02:32.000
Data is as all we've done is implement a single interface, yet we've got all these CRUD operations available to us out of the box.

