1
00:00:01,204 --> 00:00:02,338
Sometimes, but rarely,

2
00:00:02,338 --> 00:00:05,737
the Spring Data Repository interface as in derived queries

3
00:00:05,737 --> 00:00:07,924
might not be enough for our use case.

4
00:00:07,924 --> 00:00:09,159
If this is the case,

5
00:00:09,159 --> 00:00:12,396
we can implement a repository method ourselves rather than

6
00:00:12,396 --> 00:00:15,078
leaving Spring Data to do it for us.

7
00:00:15,078 --> 00:00:17,816
A common gotcha when trying to do this is thinking you can

8
00:00:17,816 --> 00:00:20,779
implement the Spring Data Repository method and that Spring Data

9
00:00:20,779 --> 00:00:23,476
will use that implementation by default.

10
00:00:23,476 --> 00:00:25,365
Without getting into the finer details,

11
00:00:25,365 --> 00:00:28,299
this won't work as when Spring generates a repository implementation,

12
00:00:28,299 --> 00:00:31,810
it will ignore the existing implementations.

13
00:00:31,810 --> 00:00:35,453
To get it to work, we need to generate an additional repository interface,

14
00:00:35,453 --> 00:00:38,567
which does not inherit from the Spring Data repository.

15
00:00:38,567 --> 00:00:41,682
Any method we put there, we can, of course, implement.

16
00:00:41,682 --> 00:00:44,072
We then use composition with our original repository

17
00:00:44,072 --> 00:00:46,813
to write our custom method to it.

18
00:00:46,813 --> 00:00:49,406
So if we want to implement a method with our own code,

19
00:00:49,406 --> 00:00:57,000
we put it in a separate interface, implement that interface, and then make our repository inherit from that interface.

