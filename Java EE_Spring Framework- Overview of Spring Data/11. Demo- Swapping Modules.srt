1
00:00:01,179 --> 00:00:01,952
In this demo,

2
00:00:01,952 --> 00:00:05,181
we're going to try switching our project from Spring Data JPA

3
00:00:05,181 --> 00:00:09,380
to Spring Data MongoDB as a proof of context of the generic

4
00:00:09,380 --> 00:00:12,000
nature of Spring Data Commons.

5
00:00:12,000 --> 00:00:14,100
We'll first change the required Maven dependencies,

6
00:00:14,100 --> 00:00:17,944
switch our database from H2 to embedded Mongo,

7
00:00:17,944 --> 00:00:21,561
remap our entities removing the JPA annotations,

8
00:00:21,561 --> 00:00:24,803
leave our repository class untouched, the most important step,

9
00:00:24,803 --> 00:00:29,299
and then verify everything still functions by running the tests.

10
00:00:29,299 --> 00:00:34,721
Okay, let's start by navigating to our POM file and changing our dependencies.

11
00:00:34,721 --> 00:00:39,954
We'll first go from spring-boot-starter-jpa to spring-boot-starter-mongodb.

12
00:00:39,954 --> 00:00:42,916
Then we'll remove our H2 dependency as we're no longer

13
00:00:42,916 --> 00:00:44,159
working with a relational database,

14
00:00:44,159 --> 00:00:48,324
and we'll add a dependency on an embedded MongoDB instead as this

15
00:00:48,324 --> 00:00:51,781
is what will now be required as our data store.

16
00:00:51,781 --> 00:00:53,301
Thanks to the spring-boot-starter,

17
00:00:53,301 --> 00:00:58,237
this will be spun up and torn down automatically during test just like with H2.

18
00:00:58,237 --> 00:01:00,852
Once we've done this, our code will no longer compile.

19
00:01:00,852 --> 00:01:01,293
However,

20
00:01:01,293 --> 00:01:06,268
it's important to note it's only the JPA-specific code that has this problem.

21
00:01:06,268 --> 00:01:09,501
Whereas the Spring Data code is fine as we've only worked with

22
00:01:09,501 --> 00:01:12,515
shared interfaces in Spring Data Commons.

23
00:01:12,515 --> 00:01:15,470
Let's delete the JPA annotations from our Flight entity and

24
00:01:15,470 --> 00:01:18,701
change our ID field to a String data type,

25
00:01:18,701 --> 00:01:20,308
which MongoDB prefers.

26
00:01:20,308 --> 00:01:22,561
That's all we need to do here, but in doing so,

27
00:01:22,561 --> 00:01:26,127
our tests no longer compile as they were using a long ID.

28
00:01:26,127 --> 00:01:29,381
We can change our ID type parameter to a String in our repository,

29
00:01:29,381 --> 00:01:30,940
and really that is it.

30
00:01:30,940 --> 00:01:33,536
We've not had to change our repository methods,

31
00:01:33,536 --> 00:01:36,386
import any MongoDB- specific repository code,

32
00:01:36,386 --> 00:01:41,418
or do anything other than removing JPA and change the type of our ID.

33
00:01:41,418 --> 00:01:46,122
Let's run all our tests to verify it still works.

34
00:01:46,122 --> 00:01:49,705
They don't pass yet because we still have a data JPA test,

35
00:01:49,705 --> 00:01:52,197
which requires Spring Data JPA.

36
00:01:52,197 --> 00:01:57,806
All we need to do to fix this is change from DataJpaTest to DataMongoTest,

37
00:01:57,806 --> 00:02:02,210
and then we can run our test one final time and see if they pass now.

38
00:02:02,210 --> 00:02:02,674
They do,

39
00:02:02,674 --> 00:02:05,401
only now we're connecting to a completely different data store

40
00:02:05,401 --> 00:02:08,458
with a completely different query language.

41
00:02:08,458 --> 00:02:11,157
If we navigate to our CrudTests, we can see that saving,

42
00:02:11,157 --> 00:02:11,519
deleting,

43
00:02:11,519 --> 00:02:15,787
and finding all work as they did before as they're common operations provided

44
00:02:15,787 --> 00:02:19,881
by the CRUDRepository interface in Spring Data Commons.

45
00:02:19,881 --> 00:02:24,073
Our derived queries also work, even though MongoDB as a document store,

46
00:02:24,073 --> 00:02:28,340
and the queries generated will be in a different query language to before.

47
00:02:28,340 --> 00:02:28,723
Also,

48
00:02:28,723 --> 00:02:32,172
our paging and sorting repository works too because again these

49
00:02:32,172 --> 00:02:39,000
are common abstractions provided by Spring Data Commons regardless of the underlying data store.

