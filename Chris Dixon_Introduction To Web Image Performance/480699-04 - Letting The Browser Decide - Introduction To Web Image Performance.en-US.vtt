WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.720 --> 00:00:07.395
To help with choosing the correct size image for the device or browser,

00:00:07.395 --> 00:00:12.240
the image element has a really useful built-in attribute called srcet.

00:00:12.240 --> 00:00:17.595
Srcet will allow us to list out multiple images which you want to potentially use,

00:00:17.595 --> 00:00:20.970
and we're going to let the browser decide which one is best.

00:00:20.970 --> 00:00:23.460
Inside of our Lesson Two folder,

00:00:23.460 --> 00:00:25.395
which is Letting the Browser Decide,

00:00:25.395 --> 00:00:28.200
we have two items and one is the index page,

00:00:28.200 --> 00:00:30.960
which we're going to use. We can copy the path.

00:00:30.960 --> 00:00:34.860
This is pretty empty. We're going to add the contents in just a moment,

00:00:34.860 --> 00:00:37.275
then paste this inside the browser.

00:00:37.275 --> 00:00:41.800
Over inside the images folder we have six versions of the same image.

00:00:41.800 --> 00:00:47.285
We have one version which is 320 pixels wide, we have 640,

00:00:47.285 --> 00:00:50.840
we have 1,500, and also some images with 1X,

00:00:50.840 --> 00:00:52.820
2X, and 4X too,

00:00:52.820 --> 00:00:56.035
which we'll take a look at what these are very soon.

00:00:56.035 --> 00:00:58.215
Just as we did previously,

00:00:58.215 --> 00:01:03.320
inside the body section we're going to set up a regular HTML image element.

00:01:03.320 --> 00:01:07.790
This wants to go into the images folder and select the road image,

00:01:07.790 --> 00:01:12.885
which is 320 pixels wide. Save and refresh.

00:01:12.885 --> 00:01:16.070
As expected, we see this small image loaded.

00:01:16.070 --> 00:01:20.210
So this is generally what we do to load up an image inside of a website.

00:01:20.210 --> 00:01:23.720
But rather than being stuck with this one single image,

00:01:23.720 --> 00:01:26.810
we can use what is called the srcet attribute.

00:01:26.810 --> 00:01:31.315
It provides some alternative images depending on the size of the browser.

00:01:31.315 --> 00:01:34.040
To do this, we go back to our image elements.

00:01:34.040 --> 00:01:36.395
Let's just remove this for this example,

00:01:36.395 --> 00:01:40.740
and I'm going to add inside here the srcet attribute.

00:01:40.970 --> 00:01:46.835
This attribute will allow us to add multiple images inside of our image elements,

00:01:46.835 --> 00:01:49.280
which the browser can decide which one is most

00:01:49.280 --> 00:01:52.510
appropriate for the current size of the browser.

00:01:52.510 --> 00:01:56.255
The first one, again inside the images folder,

00:01:56.255 --> 00:01:58.790
let's go for the road, dash,

00:01:58.790 --> 00:02:01.800
640, and then separated by a comma,

00:02:01.800 --> 00:02:03.405
we can add multiple images.

00:02:03.405 --> 00:02:07.085
We also have an image that is 1,500 pixels wide.

00:02:07.085 --> 00:02:11.260
So road, dash, 1,500, dot JPEG.

00:02:11.260 --> 00:02:15.200
What is happening here is we're using the original source

00:02:15.200 --> 00:02:20.315
attributes if the source set attribute is unsupported in the Chrome browser.

00:02:20.315 --> 00:02:22.910
So this is basically a fallback image.

00:02:22.910 --> 00:02:25.400
If we can not select any of these,

00:02:25.400 --> 00:02:26.870
srcet is in fact,

00:02:26.870 --> 00:02:29.495
pretty well-supported in all major browsers.

00:02:29.495 --> 00:02:35.285
If you go to caniuse.com and do a search for srcet,

00:02:35.285 --> 00:02:40.085
we can see that srcet is widely supported in all these major browsers.

00:02:40.085 --> 00:02:43.205
The only issue is the older Internet Explorer.

00:02:43.205 --> 00:02:45.850
But this has been replaced with the newer Edge Browser,

00:02:45.850 --> 00:02:47.645
which has full support.

00:02:47.645 --> 00:02:50.530
So this means that srcet is pretty well-supported

00:02:50.530 --> 00:02:53.570
and we are safe to use it on our projects.

00:02:53.570 --> 00:02:56.770
There goes our project. Let's try this out.

00:02:56.770 --> 00:03:00.945
Refresh. We see the road, dash, 640 image,

00:03:00.945 --> 00:03:02.910
and if we shrink this down,

00:03:02.910 --> 00:03:07.930
still see the 640. Let's make this bigger.

00:03:08.030 --> 00:03:10.940
If we get this over 1,500 pixels,

00:03:10.940 --> 00:03:14.090
which was the size of the larger image,

00:03:14.090 --> 00:03:17.210
we can still see inside of the developer tools that we are still

00:03:17.210 --> 00:03:20.450
downloading the 640 pixels version.

00:03:20.450 --> 00:03:24.085
So the browser is not selecting the alternative image.

00:03:24.085 --> 00:03:28.145
This is because for the browser to figure out which one it's going to choose,

00:03:28.145 --> 00:03:30.695
we also need to tell it the width of the image.

00:03:30.695 --> 00:03:36.275
It doesn't automatically detect that this is 640 and this one is 1,500,

00:03:36.275 --> 00:03:38.910
but after the file path to the image,

00:03:38.910 --> 00:03:42.255
only to do is add to the width with the image in pixels,

00:03:42.255 --> 00:03:44.055
with a W just after.

00:03:44.055 --> 00:03:47.340
This is 640 pixels wide,

00:03:47.340 --> 00:03:51.915
this is 1,500 pixels wide, and let's try this out.

00:03:51.915 --> 00:03:56.960
Back over to the browser, I'm going to shrink this down to a small size, refresh.

00:03:56.960 --> 00:04:01.725
We see the 640 pixels version. Let's make this bigger.

00:04:01.725 --> 00:04:08.760
We see at some point the 1,500 pixels version has been loaded. Let's just try this again.

00:04:08.760 --> 00:04:13.485
640. I want to see the size just here.

00:04:13.485 --> 00:04:17.950
So 300 pixels, or,

00:04:19.370 --> 00:04:24.915
mine changes to the large image around about 500 pixels.

00:04:24.915 --> 00:04:28.865
As we know, it's choosing this based off the browser's viewport,

00:04:28.865 --> 00:04:31.460
which is the browser's visible area.

00:04:31.460 --> 00:04:34.370
It's also choosing under the assumption that we want

00:04:34.370 --> 00:04:37.880
these images to be the full width of the viewport.

00:04:37.880 --> 00:04:41.185
However, though, this is not always the case.

00:04:41.185 --> 00:04:49.485
So to control this, we can set up the sizes attribute after our srcet. Let's add this in.

00:04:49.485 --> 00:04:52.160
If we leave out this sizes attribute,

00:04:52.160 --> 00:04:54.650
it is assumed that we want the images to

00:04:54.650 --> 00:04:57.560
be the full width of the viewport or the browser,

00:04:57.560 --> 00:04:59.050
or at its most basic,

00:04:59.050 --> 00:05:02.285
we can add in a size to apply to all images.

00:05:02.285 --> 00:05:07.600
For example, if we want all images to only be 50 percent of the available width,

00:05:07.600 --> 00:05:09.180
just like with CSS,

00:05:09.180 --> 00:05:14.210
we could add at 50vw, set this to be half of the viewport width.

00:05:14.210 --> 00:05:19.505
Save this. Even though our 640 pixels version has been loaded,

00:05:19.505 --> 00:05:23.315
this has only taken up 50 percent of the browser's width.

00:05:23.315 --> 00:05:25.970
If we go up to the larger version,

00:05:25.970 --> 00:05:28.570
the same will still apply.

00:05:28.570 --> 00:05:31.520
With small screens, it is common to see images and

00:05:31.520 --> 00:05:34.535
content using all of the available width,

00:05:34.535 --> 00:05:36.440
just like we see on the left,

00:05:36.440 --> 00:05:42.005
and then maybe it'll only take up 50 percent of the width on a larger screen size.

00:05:42.005 --> 00:05:45.605
So how would you do this with the sizes attribute?

00:05:45.605 --> 00:05:48.830
We do this by combining these size attributes with

00:05:48.830 --> 00:05:53.860
media queries to tailor the images for the size of the device.

00:05:53.860 --> 00:05:58.040
Using our example, since we have two different images to choose from,

00:05:58.040 --> 00:06:01.940
we are going to add two different values separated by a comma.

00:06:01.940 --> 00:06:03.890
Just like with regular CSS,

00:06:03.890 --> 00:06:10.970
I'm going to add in a media query and set up the maximum width to be equal to 600 pixels.

00:06:10.970 --> 00:06:14.180
So below 600 pixels we then want to set

00:06:14.180 --> 00:06:18.280
our images to be 100 percent of the viewport width.

00:06:18.280 --> 00:06:23.895
Otherwise, want these to be 50 percent or half of the available width.

00:06:23.895 --> 00:06:26.990
So this is a great way to control the size of

00:06:26.990 --> 00:06:31.340
the images with different screen sizes. Let's try this out.

00:06:31.340 --> 00:06:36.570
First of all, we need to go down to the smaller size and refresh.

00:06:36.570 --> 00:06:38.010
We see the road, dash,

00:06:38.010 --> 00:06:40.245
640 is being loaded as expected,

00:06:40.245 --> 00:06:43.740
and that this is 100 percent of the viewport width.

00:06:43.740 --> 00:06:49.450
Since we set this up to 600 pixels if we keep going,

00:06:52.520 --> 00:06:55.310
there's our large image now downloaded,

00:06:55.310 --> 00:06:58.505
and if we take this just above 600 pixels,

00:06:58.505 --> 00:07:00.110
because of the second value,

00:07:00.110 --> 00:07:02.660
this now drops down to 50vw.

00:07:02.660 --> 00:07:06.365
Something which you may have noticed is inside my browser.

00:07:06.365 --> 00:07:10.415
It's jumping up to the large image at around 500 pixels.

00:07:10.415 --> 00:07:13.775
You may have a different value and we'll see why very soon.

00:07:13.775 --> 00:07:16.280
But you may think that 500 pixels is a little bit

00:07:16.280 --> 00:07:18.725
too small to be jumping up to the large image,

00:07:18.725 --> 00:07:23.095
considering it's not even any wider than our first image.

00:07:23.095 --> 00:07:26.550
Surely the 640 version will be better suited.

00:07:26.550 --> 00:07:31.890
Well, this is a very valid question and something which we are going to answer next.
