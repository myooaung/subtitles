WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.660 --> 00:00:05.760
We have a webpage which has images.

00:00:05.760 --> 00:00:08.220
Sometimes when the page first loads,

00:00:08.220 --> 00:00:10.845
not all of these images are visible.

00:00:10.845 --> 00:00:15.630
For example, if we have some images right down at the very bottom of our page,

00:00:15.630 --> 00:00:18.630
we shouldn't really expect the user to wait on these images

00:00:18.630 --> 00:00:22.500
being downloaded before the page initially loads.

00:00:22.500 --> 00:00:27.555
To help with this, the final technique I want to show you is called lazy loading.

00:00:27.555 --> 00:00:33.075
This is a way of delaying or deferring the loading of images which is not critical.

00:00:33.075 --> 00:00:35.580
There are often images which the user doesn't initially

00:00:35.580 --> 00:00:38.940
see and has to scroll down to move into view.

00:00:38.940 --> 00:00:41.865
An example of this is something like Pinterest.

00:00:41.865 --> 00:00:44.390
A page may have thousands of images and

00:00:44.390 --> 00:00:47.525
loading all of these at once would take a lot of time.

00:00:47.525 --> 00:00:51.800
So it makes sense to only load what the user can initially see,

00:00:51.800 --> 00:00:55.265
and then load more images as the user scrolls.

00:00:55.265 --> 00:00:59.375
We can even add simple or lightweight placeholder content

00:00:59.375 --> 00:01:01.805
while these images are being downloaded.

00:01:01.805 --> 00:01:04.610
Lazy loading is not just for images either.

00:01:04.610 --> 00:01:07.855
It exists in other parts of web development too.

00:01:07.855 --> 00:01:12.770
We can lazy load pretty much any type of content depending on what languages,

00:01:12.770 --> 00:01:15.865
libraries, or frameworks we're using.

00:01:15.865 --> 00:01:19.025
We can lazy load newsfeeds, articles,

00:01:19.025 --> 00:01:23.975
social media feeds, and generally any other type of content which you want.

00:01:23.975 --> 00:01:28.490
There are multiple ways of doing this, including using JavaScript.

00:01:28.490 --> 00:01:31.460
But here, I'm going to show you a really easy way to

00:01:31.460 --> 00:01:34.880
add lazy loading natively through this interaction,

00:01:34.880 --> 00:01:36.590
head over to number eight,

00:01:36.590 --> 00:01:38.755
and open up the index page.

00:01:38.755 --> 00:01:42.615
Then paste this into a new tab inside the browser.

00:01:42.615 --> 00:01:45.960
We can see we have some dog images loaded up just here

00:01:45.960 --> 00:01:49.610
and we don't have any images stored inside of this project folder.

00:01:49.610 --> 00:01:52.975
Instead, these all link into external images.

00:01:52.975 --> 00:01:55.260
We have 10 different images here.

00:01:55.260 --> 00:02:00.020
As expected, all 10 of these images are loaded up at the same time,

00:02:00.020 --> 00:02:03.770
even though many of them are not in view when we first load the page,

00:02:03.770 --> 00:02:05.450
I have a pretty good connection speed,

00:02:05.450 --> 00:02:07.100
but many users do not.

00:02:07.100 --> 00:02:11.915
Users could also be on a slower mobile device and if there were lots of images like this,

00:02:11.915 --> 00:02:14.000
it can really slow things down.

00:02:14.000 --> 00:02:19.325
To delay the loading of our images which are outside of the viewport or the visible area,

00:02:19.325 --> 00:02:21.410
we can add it to our image element,

00:02:21.410 --> 00:02:24.950
a loading attribute, and then set it to be lazy.

00:02:24.950 --> 00:02:28.390
Currently, we can see about three images inside the view.

00:02:28.390 --> 00:02:32.340
So we can leave the first three images to load up straight away.

00:02:32.340 --> 00:02:35.155
Now if we go down to image number four,

00:02:35.155 --> 00:02:39.715
we can add the loading attributes and set this equal to lazy.

00:02:39.715 --> 00:02:46.115
Copy this and we can paste this into all of the rest of our images just below.

00:02:46.115 --> 00:02:50.380
Make sure this is in image number four right through to 10.

00:02:50.380 --> 00:02:53.615
Let's go to the browser and see what happens.

00:02:53.615 --> 00:02:57.200
If we refresh, we can still see our first three images,

00:02:57.200 --> 00:03:01.180
but all of the images are still being downloaded at the same time.

00:03:01.180 --> 00:03:05.600
There is no change because until these images are loaded in the browser,

00:03:05.600 --> 00:03:09.550
the browser will not know the height and the width of each image.

00:03:09.550 --> 00:03:12.200
So if it doesn't have the height and the width,

00:03:12.200 --> 00:03:14.540
it cannot tell which images are going to be in

00:03:14.540 --> 00:03:17.785
view and which ones are going to be below the fold.

00:03:17.785 --> 00:03:20.480
The fold is the bottom part of the browser.

00:03:20.480 --> 00:03:21.830
Before we need to scroll down.

00:03:21.830 --> 00:03:26.150
To fix this, we can add some simple CSS in the head section,

00:03:26.150 --> 00:03:28.750
place in the style section.

00:03:28.750 --> 00:03:33.630
For the images, we'll just set up a standard width for all these of

00:03:33.630 --> 00:03:39.510
600 pixels and also the height of 400 pixels too.

00:03:39.510 --> 00:03:41.980
If you wanted to, you could also add the width

00:03:41.980 --> 00:03:44.440
and the height of each individual image too.

00:03:44.440 --> 00:03:49.155
But I'm just going to keep this simple for this example. Let's try this out.

00:03:49.155 --> 00:03:51.660
Up to the top of the page and refresh.

00:03:51.660 --> 00:03:54.810
Now we only see six images loading inside

00:03:54.810 --> 00:03:58.710
the dev tools rather than the 10 which we originally had.

00:03:58.710 --> 00:04:00.640
This is a saving of four images,

00:04:00.640 --> 00:04:02.320
but why are we getting six images

00:04:02.320 --> 00:04:06.310
downloaded when we can only see about three inside the viewport?

00:04:06.310 --> 00:04:10.180
Well, this is because I'm using Google Chrome and Chrome has decided to

00:04:10.180 --> 00:04:14.170
load some extra images which I expect we're going to need pretty soon.

00:04:14.170 --> 00:04:18.440
We can see how this reacts in different browsers by copying this link,

00:04:18.440 --> 00:04:23.175
I'm going to open up Firefox. Paste this in.

00:04:23.175 --> 00:04:26.360
We see initially the same number of images.

00:04:26.360 --> 00:04:27.890
Open up the developer tools,

00:04:27.890 --> 00:04:29.915
we're to right-click and inspect element.

00:04:29.915 --> 00:04:32.410
We see our first three images just here.

00:04:32.410 --> 00:04:35.179
If we go into the network and refresh,

00:04:35.179 --> 00:04:38.480
Firefox will only choose the first four images,

00:04:38.480 --> 00:04:42.365
so it doesn't pre-load in advance as many images as Chrome does.

00:04:42.365 --> 00:04:44.510
Now if we close Firefox,

00:04:44.510 --> 00:04:47.465
and let's go back over to Chrome.

00:04:47.465 --> 00:04:50.340
If we start to scroll down,

00:04:50.620 --> 00:04:54.335
and we can now see as we scroll down the page that extra images

00:04:54.335 --> 00:04:57.650
are being loaded as we get closer to needing them.

00:04:57.650 --> 00:05:00.680
As I mentioned before, this is because Chrome will prefetch

00:05:00.680 --> 00:05:03.650
them earlier so they are ready for the user.

00:05:03.650 --> 00:05:07.370
How early depends on the connection speed and also the type of image.

00:05:07.370 --> 00:05:08.870
That's what we've seen with Firefox,

00:05:08.870 --> 00:05:11.760
it also varies by the browser and all of

00:05:11.760 --> 00:05:16.340
these extra four images have now been saved from the initial page load time,

00:05:16.340 --> 00:05:18.755
resulting in a better experience.

00:05:18.755 --> 00:05:22.310
If there is an image which you want to load immediately,

00:05:22.310 --> 00:05:25.270
regardless of if it's below the page fold or not,

00:05:25.270 --> 00:05:27.805
we can set the loading to be eager.

00:05:27.805 --> 00:05:32.540
If we go down to the very last image and set this to eager,

00:05:32.540 --> 00:05:35.510
up to the very top of the page and refresh.

00:05:35.510 --> 00:05:38.570
We see that now rather than the initial six images,

00:05:38.570 --> 00:05:42.835
we now get the seventh image loaded even though it's not in view.

00:05:42.835 --> 00:05:45.560
As you can imagine, these lazy attributes can only help

00:05:45.560 --> 00:05:48.155
things even further as we have more images

00:05:48.155 --> 00:05:53.180
on our pages and especially if the user needs to scroll down to reveal more content.

00:05:53.180 --> 00:05:55.700
We've just seen that this loading attribute worked

00:05:55.700 --> 00:05:58.670
perfectly fine in my version of Chrome and Firefox.

00:05:58.670 --> 00:06:02.915
But the support still has a little bit of catching up to do in some of the browsers.

00:06:02.915 --> 00:06:07.220
Let's do a search on caniuse.com for the loading attributes.

00:06:07.220 --> 00:06:08.780
This is one I need you to see, which is

00:06:08.780 --> 00:06:11.945
the lazy loading attribute for images and iframes.

00:06:11.945 --> 00:06:13.510
So it's finding Edge.

00:06:13.510 --> 00:06:17.000
With Firefox we only have partial support and this is just because

00:06:17.000 --> 00:06:20.465
it only supports images rather than iframes.

00:06:20.465 --> 00:06:22.800
It's finding Chrome or Safari.

00:06:22.800 --> 00:06:25.325
This is not something which is enabled by default,

00:06:25.325 --> 00:06:28.010
but we can enable this inside the browser settings.

00:06:28.010 --> 00:06:32.840
Also, this loading attribute can also be used with the pitcher element too and we

00:06:32.840 --> 00:06:35.495
only need to add it to the fallback image elements

00:06:35.495 --> 00:06:38.270
rather than all of the sources for it to take effect.

00:06:38.270 --> 00:06:43.010
So if we go back into our project folder and go into any one of these index pages,

00:06:43.010 --> 00:06:45.650
we only need to add the loading attributes to

00:06:45.650 --> 00:06:49.610
this image element rather than each one of these sources.

00:06:49.610 --> 00:06:51.485
With this all in mind,

00:06:51.485 --> 00:06:56.120
we now have an example just here where we scroll down and the images will lazy load.

00:06:56.120 --> 00:07:00.709
But what happens if we scroll down faster than the images can be downloaded?

00:07:00.709 --> 00:07:04.040
It's not a problem for this small example where if we

00:07:04.040 --> 00:07:07.370
had thousands of images and a really slow connection speed,

00:07:07.370 --> 00:07:11.155
we may start to scroll down faster than the images can be downloaded.

00:07:11.155 --> 00:07:14.885
For this problem, there are some different approaches which we can take.

00:07:14.885 --> 00:07:18.755
We could also provide some lower-quality placeholder images,

00:07:18.755 --> 00:07:23.245
which are going to download faster and we can set this up with the picture element.

00:07:23.245 --> 00:07:26.975
We could also have one single generic placeholder image,

00:07:26.975 --> 00:07:30.170
which we use in place until the image is downloaded.

00:07:30.170 --> 00:07:35.480
Or even things like a solid background color using some CSS.

00:07:35.480 --> 00:07:39.380
But is also JavaScript libraries to help with this too and also

00:07:39.380 --> 00:07:44.135
plug-ins if you were using WordPress or any other content management system.

00:07:44.135 --> 00:07:48.500
One of the popular ones is called lazy sizes and this

00:07:48.500 --> 00:07:53.165
allows us to make use of JavaScript to apply fast and performance lazy loading.

00:07:53.165 --> 00:07:58.990
It also makes use of the picture elements and the source set to create responsive images.

00:07:58.990 --> 00:08:05.270
It's SEO friendly and also intelligently loads images when needed based on the browser,

00:08:05.270 --> 00:08:08.545
the scroll position, and also the network connection.

00:08:08.545 --> 00:08:11.780
So it can really handle a lot of the hard work for us.

00:08:11.780 --> 00:08:13.100
Also in addition to this,

00:08:13.100 --> 00:08:18.005
it also allows us to use low quality or blurry images as placeholders.

00:08:18.005 --> 00:08:20.960
I'm not going to go into the setup and installation,

00:08:20.960 --> 00:08:23.585
but it's pretty simple to get started with.

00:08:23.585 --> 00:08:26.045
We scroll down to the how-to section.

00:08:26.045 --> 00:08:30.625
All we need to do is to download the script and link it inside of our HTML.

00:08:30.625 --> 00:08:35.690
Or we could also install this via NPM too if you're using it on a node project.

00:08:35.690 --> 00:08:37.760
There is no configuration needed,

00:08:37.760 --> 00:08:40.130
all we need to do is to set up our images,

00:08:40.130 --> 00:08:42.800
like the examples which you see here if you're

00:08:42.800 --> 00:08:45.755
using responsive or non-responsive options.

00:08:45.755 --> 00:08:48.700
We can also use this with an iframe if needed too.

00:08:48.700 --> 00:08:52.325
I hope this class has given you something to think about and also some

00:08:52.325 --> 00:08:56.150
useful techniques which you can use in your future or existing projects.

00:08:56.150 --> 00:08:58.280
Next, we're going to talk about a little challenge to set up

00:08:58.280 --> 00:09:01.590
so we can test all of these new skills.
