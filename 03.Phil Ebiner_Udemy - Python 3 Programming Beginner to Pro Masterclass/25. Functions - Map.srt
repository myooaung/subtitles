1
00:00:01,810 --> 00:00:03,930
Hello everyone and welcome to this lecture.

2
00:00:04,180 --> 00:00:10,570
In the biggest lecture we've been able to learn how function works and we've been able as well to cover

3
00:00:10,630 --> 00:00:12,310
lambda expressions.

4
00:00:12,310 --> 00:00:15,700
Let's take a look at kind of an operation.

5
00:00:15,760 --> 00:00:17,780
It's called Map which is really really powerful.

6
00:00:18,400 --> 00:00:18,720
OK.

7
00:00:18,880 --> 00:00:20,710
So let's take a look at the definition first.

8
00:00:20,750 --> 00:00:22,650
And let's take a look at the example right away.

9
00:00:22,720 --> 00:00:29,710
So the map function takes in a function and list the function simply performs an operation on the Empire

10
00:00:29,710 --> 00:00:33,280
list and returns the results in a new list.

11
00:00:33,280 --> 00:00:33,520
OK.

12
00:00:33,550 --> 00:00:34,300
What you mean by this.

13
00:00:34,300 --> 00:00:35,360
Let's take a look.

14
00:00:35,430 --> 00:00:40,010
So what we could do I say OK let's define a function let's say take two two numbers.

15
00:00:40,030 --> 00:00:49,370
Let's say they are A and B and the function returns the summation can return a plus b enter.

16
00:00:49,490 --> 00:00:56,470
We go and let's assume that A and B are actually not just values.

17
00:00:56,540 --> 00:00:59,600
I wanted to do the that operation on an entire list.

18
00:00:59,780 --> 00:01:06,870
So I would say okay a equals two for example 1 4 5 6 and 9.

19
00:01:07,100 --> 00:01:16,350
And you define another let's say list and you put in that list 1 7 9 twelve and let's say seven enter

20
00:01:16,630 --> 00:01:25,020
we go and what I want you guys to simplify what we wanted to do here is to simply go ahead and perform

21
00:01:25,080 --> 00:01:29,960
that operation simply call that function for F each of these elements within my list.

22
00:01:30,000 --> 00:01:33,760
I need to do one plus one and then four plus seven and five plus nine.

23
00:01:33,840 --> 00:01:37,390
What we could do here we can use the map operation to do that for us.

24
00:01:37,410 --> 00:01:40,550
So what I could do here is okay map.

25
00:01:41,040 --> 00:01:42,170
Right.

26
00:01:42,480 --> 00:01:45,380
And here I need to specify the name of the function.

27
00:01:45,480 --> 00:01:51,170
So going to say summation which is the name of my function and they need to pass along what the argument.

28
00:01:51,170 --> 00:01:52,670
So I'm sending to lists.

29
00:01:52,800 --> 00:01:59,890
I'm saying the first list a second list B and what I would do here afterwards was a little bit confusing

30
00:01:59,920 --> 00:02:00,220
I know.

31
00:02:00,250 --> 00:02:05,530
But let's we're going to cast whatever return is going to come out of that map going to put it in a

32
00:02:05,530 --> 00:02:06,970
form of lists.

33
00:02:07,060 --> 00:02:13,000
And that should be let's say my value of c which is my return of my math function but at least on it

34
00:02:13,030 --> 00:02:14,340
and I'm going to show you exactly what it is.

35
00:02:14,390 --> 00:02:15,520
Shift enter shift enter.

36
00:02:15,550 --> 00:02:17,780
Let's take a look at C and here we go.

37
00:02:18,100 --> 00:02:23,440
We'll come up with two which is one plus one two four plus 711 five plus nine 14 and so on.

38
00:02:23,440 --> 00:02:25,380
What happened here.

39
00:02:25,380 --> 00:02:28,620
So what happened here is we simply used the map operation.

40
00:02:28,800 --> 00:02:29,200
OK.

41
00:02:29,260 --> 00:02:36,070
Or map function to simply take a longer function and not value not a single value.

42
00:02:36,070 --> 00:02:38,820
We're actually going to be sending an entire list here.

43
00:02:38,840 --> 00:02:42,330
I sent out a entire list and then be an entire list.

44
00:02:42,520 --> 00:02:47,350
And then we cast whatever returning or coming out of the function would put in a list format and that

45
00:02:47,350 --> 00:02:49,270
should be my outcome or my output c.

46
00:02:49,330 --> 00:02:49,560
OK.

47
00:02:49,570 --> 00:02:52,180
That's pretty much how can we use the map operation.

48
00:02:52,180 --> 00:02:53,540
Can we use map operation.

49
00:02:53,710 --> 00:02:59,540
It takes in a function takes in the list it performed well applies the all that function on our list.

50
00:02:59,770 --> 00:03:00,560
OK.

51
00:03:01,030 --> 00:03:01,270
All right.

52
00:03:01,720 --> 00:03:05,210
So what I want you guys to do is to simply go here OK.

53
00:03:05,380 --> 00:03:12,010
Define a new function and that function is called Multiply.

54
00:03:12,220 --> 00:03:12,630
OK.

55
00:03:12,640 --> 00:03:19,180
And please use the map operation to multiply these two lists together.

56
00:03:19,180 --> 00:03:21,330
So here going to think the exact same operation here.

57
00:03:22,550 --> 00:03:29,180
I have again two lists and I wanted to multiply these two lists together using a multiply function and

58
00:03:29,180 --> 00:03:31,010
obviously using the map operation as well.

59
00:03:31,430 --> 00:03:31,820
OK.

60
00:03:31,820 --> 00:03:35,050
Please go ahead pause a video and they will see you guys after the challenge.

61
00:03:37,640 --> 00:03:41,860
All right I hope you guys were able to figure out the challenge well ask us to do is to simply go ahead

62
00:03:41,870 --> 00:03:49,310
in here and use the map operation with the new function that you guys will be defining obviously to

63
00:03:49,310 --> 00:03:51,710
multiply all the elements in here between EMV.

64
00:03:51,710 --> 00:03:53,580
Let's see how can we do that first.

65
00:03:53,690 --> 00:03:58,190
I need to define a function and that function I'm going to call it multiply and that function simply

66
00:03:58,190 --> 00:04:00,650
takes two arguments it can call him let's say x and y.

67
00:04:01,970 --> 00:04:04,830
And what the function does just returns X times Y.

68
00:04:06,460 --> 00:04:14,740
And when I need to do it I need to say okay my output or let's call it C to be consistent C equals too.

69
00:04:14,750 --> 00:04:21,170
I'm going to say lists and then going to say map and within the map I will send along the name of the

70
00:04:21,170 --> 00:04:27,560
function which is multiply and I'm going to pass along simply my parameters which is my two of two of

71
00:04:27,560 --> 00:04:30,010
my lists a and b.

72
00:04:30,110 --> 00:04:30,610
All right.

73
00:04:31,010 --> 00:04:31,900
Enter.

74
00:04:31,900 --> 00:04:33,080
Here we go.

75
00:04:33,080 --> 00:04:35,510
Let's take a look at C ship entered.

76
00:04:35,510 --> 00:04:36,410
Here we go.

77
00:04:36,410 --> 00:04:41,200
So now one times one is one four time 728 five times then forty five.

78
00:04:41,210 --> 00:04:42,230
And so on so forth.

79
00:04:42,230 --> 00:04:48,110
And that's pretty much how can you use the map to kind of perform and third operation or entire function

80
00:04:48,620 --> 00:04:51,190
to a specific list.

81
00:04:51,200 --> 00:04:51,440
All right.

82
00:04:52,460 --> 00:04:56,690
Let's take a look at how can we use the map with a lambda expression which is again way more powerful

83
00:04:56,690 --> 00:04:57,530
example.

84
00:04:57,530 --> 00:05:00,650
So what I wanted to do here I wanted to remove that function.

85
00:05:00,650 --> 00:05:07,130
I wanted to just have one line of code that does everything for me which is a very very powerful.

86
00:05:07,130 --> 00:05:08,180
So it's define a new list.

87
00:05:08,200 --> 00:05:13,100
I'm going to call it my list equals to let's say 1 2 3 and 4.

88
00:05:13,140 --> 00:05:13,810
OK.

89
00:05:14,360 --> 00:05:19,240
And what I'm going to do here I'm going to say out on the school list equals two.

90
00:05:19,330 --> 00:05:23,430
I'm gonna say list is yes the same as we have done before and then map.

91
00:05:23,700 --> 00:05:24,130
Right.

92
00:05:24,800 --> 00:05:30,090
And then here I need to simply define a name of a function along with my list.

93
00:05:30,110 --> 00:05:30,370
Right.

94
00:05:30,380 --> 00:05:36,290
Which is my array or my list that I wanted to perform the operation on and instead of calling the function

95
00:05:36,320 --> 00:05:39,200
let's say multiply here and have the function separately.

96
00:05:39,200 --> 00:05:43,940
I can actually use your lambda expression directly so I'm going to say lambda I'm going to say I need

97
00:05:43,940 --> 00:05:48,250
to send you X and please return back x square.

98
00:05:48,450 --> 00:05:49,030
All right.

99
00:05:49,040 --> 00:05:52,270
And do this operation please on my list.

100
00:05:52,340 --> 00:05:52,910
That's it.

101
00:05:52,910 --> 00:05:53,330
Here we go.

102
00:05:54,830 --> 00:05:55,710
Just enter.

103
00:05:56,100 --> 00:06:00,280
And if I take a look at our lists we go.

104
00:06:00,340 --> 00:06:05,250
We come up with 1 4 9 and 16 which is simply the square all the elements in here.

105
00:06:05,300 --> 00:06:05,580
All right.

106
00:06:05,610 --> 00:06:06,390
So what happened here.

107
00:06:06,900 --> 00:06:11,610
So here I simply used the map operation of the Mac funk map function that we have done before.

108
00:06:11,620 --> 00:06:12,500
OK.

109
00:06:12,600 --> 00:06:18,570
And instead of defining the function separately here and calling its name here along with the arguments

110
00:06:19,110 --> 00:06:23,710
I can actually just use lambda expression directly right whatever I want.

111
00:06:23,860 --> 00:06:29,150
Going to send you X you turn back x square for me and then I pass along my list which is my list and

112
00:06:29,160 --> 00:06:34,910
here to do the entire operation in just one shot where just one line of code is really very powerful.

113
00:06:35,040 --> 00:06:35,650
Okay.

114
00:06:35,670 --> 00:06:35,940
All right.

115
00:06:36,750 --> 00:06:45,080
So what I want you guys to do is to simply take these two parameters.

116
00:06:45,240 --> 00:06:52,480
This is this is our mini challenge that's our challenge I want you guys to do is to simply use lists.

117
00:06:52,770 --> 00:06:58,040
I'm sorry use the these two specific lists was EMV or going to use map operation.

118
00:06:58,060 --> 00:07:06,180
We're going to use lambda expression as well to simply multiply all the elements within the two lists.

119
00:07:06,810 --> 00:07:07,220
OK.

120
00:07:07,260 --> 00:07:12,440
Please go ahead pause a video and I'll see you guys after the challenge.

121
00:07:12,630 --> 00:07:13,120
All right.

122
00:07:13,160 --> 00:07:14,690
You guys were able to figure out the challenge.

123
00:07:14,700 --> 00:07:16,510
I said Okay c equals two.

124
00:07:16,560 --> 00:07:25,710
I wanted to do lists and then do map and then do lambda right lambda simply will take two parameters

125
00:07:25,740 --> 00:07:27,960
and return the multiplication of it.

126
00:07:28,190 --> 00:07:35,780
The lambda are going to take a right and we're going to take B and Lambda we're going to return simply

127
00:07:35,810 --> 00:07:37,640
a times B.

128
00:07:37,780 --> 00:07:39,210
Okay looks good.

129
00:07:39,200 --> 00:07:43,400
And what arguments are gonna be sending I have to specify what arguments I will be sending.

130
00:07:43,400 --> 00:07:48,640
So I'll be sending the arguments a and I be sending B as well.

131
00:07:48,680 --> 00:07:54,560
So these are kind of a two of my arrays in here into my list in here which is a and b and this is simply

132
00:07:54,560 --> 00:07:55,730
my lambda expression.

133
00:07:55,940 --> 00:07:59,360
It takes a and b and it just multiply them together shift enter.

134
00:07:59,670 --> 00:08:01,200
And if you take a look at sea.

135
00:08:01,280 --> 00:08:06,490
Here we go come up with one twenty eight forty five seventy two and sixty three.

136
00:08:06,620 --> 00:08:10,790
All right I hope you guys were able to figure out the challenge and hope it was pretty clear pretty

137
00:08:10,860 --> 00:08:12,260
straightforward.

138
00:08:12,260 --> 00:08:18,000
Best of luck and next lecture I'm gonna walk you through kind of another concept called filter.

139
00:08:18,150 --> 00:08:18,720
Okay.

140
00:08:18,890 --> 00:08:24,560
To add kind of a specific condition in here as well was kind of this is kind of the most advanced for

141
00:08:24,590 --> 00:08:28,940
once you do that then you're gonna become you know like pro and then I'm gonna jump right away into

142
00:08:28,940 --> 00:08:31,220
exercises we have tons of exercises for you.

143
00:08:31,220 --> 00:08:33,550
Best of luck and I'll see you guys in the next lecture.
