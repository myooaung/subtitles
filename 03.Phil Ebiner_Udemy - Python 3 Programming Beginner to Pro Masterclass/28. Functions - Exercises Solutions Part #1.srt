1
00:00:02,360 --> 00:00:02,970
All right.

2
00:00:03,150 --> 00:00:05,250
Hello everyone and welcome to this lecture.

3
00:00:05,940 --> 00:00:12,390
Let's keep going and let's say hello everyone and welcome to this lecture.

4
00:00:12,390 --> 00:00:13,250
Let's get started.

5
00:00:13,260 --> 00:00:19,830
And let's start solving the questions for functions and filters and lambda expressions.

6
00:00:19,830 --> 00:00:20,400
Let's go ahead.

7
00:00:20,400 --> 00:00:25,620
So write a function that takes a variable squared it and test the function by taking an input from a

8
00:00:25,620 --> 00:00:26,220
user.

9
00:00:26,250 --> 00:00:26,870
OK.

10
00:00:27,120 --> 00:00:29,120
So let's say can we write the function to say OK.

11
00:00:29,190 --> 00:00:29,980
Define.

12
00:00:30,060 --> 00:00:34,340
Def squared you can call it whatever you want.

13
00:00:34,340 --> 00:00:41,770
And this functionally I think a variable X and we'll get a simpler return x times x.

14
00:00:41,790 --> 00:00:42,120
Right.

15
00:00:42,120 --> 00:00:44,760
That's basically the function really simple.

16
00:00:44,760 --> 00:00:45,700
Let's run it.

17
00:00:45,700 --> 00:00:45,930
Okay.

18
00:00:45,930 --> 00:00:49,350
Nothing happened obviously because he didn't call the function yet.

19
00:00:49,350 --> 00:00:50,790
Let's take an input from the users.

20
00:00:50,850 --> 00:00:53,700
Going to say okay that's a equals to

21
00:00:58,160 --> 00:01:03,340
int and we're going to take an input from the user and the user are going to enter let's say enter a

22
00:01:03,340 --> 00:01:04,130
number.

23
00:01:04,610 --> 00:01:08,740
So we can ask the user to enter number and answer in a and then we're gonna do here we're going to take

24
00:01:08,740 --> 00:01:20,240
a print and I want it to print let's say the square of something is something and we're going to use

25
00:01:20,240 --> 00:01:26,590
the format because I remember format to pass along our variable a.

26
00:01:26,710 --> 00:01:27,070
Okay.

27
00:01:27,080 --> 00:01:31,430
Which is the value that the user has entered along with the call for the function.

28
00:01:31,430 --> 00:01:32,470
And that's the beauty about it.

29
00:01:32,960 --> 00:01:35,650
Now actually right here the function call.

30
00:01:35,900 --> 00:01:38,240
So this line we're just going to go here.

31
00:01:38,330 --> 00:01:42,370
Call the function and we have to send it an argument right.

32
00:01:42,380 --> 00:01:45,080
So we get a call okay I'm going gonna call the function with its name.

33
00:01:45,080 --> 00:01:47,980
If you guys remember we're just gonna get the exact same stuff here.

34
00:01:48,050 --> 00:01:50,530
Copy it from here pasted.

35
00:01:50,600 --> 00:01:52,970
So called the function with its name.

36
00:01:52,970 --> 00:01:54,720
And I'm going to pass along the variable.

37
00:01:55,580 --> 00:01:55,880
All right.

38
00:01:56,000 --> 00:01:57,100
That's it.

39
00:01:57,140 --> 00:02:01,080
Let's run that's enter a number let's say four.

40
00:02:01,280 --> 00:02:03,700
And that's what we're getting the square to 416.

41
00:02:03,770 --> 00:02:04,220
Looks good.

42
00:02:04,220 --> 00:02:07,480
Let's run it again and number let's say 10.

43
00:02:07,640 --> 00:02:12,480
The square of ten is hundred one more time square of let's say five is twenty five.

44
00:02:12,650 --> 00:02:15,120
Perfect all right.

45
00:02:15,270 --> 00:02:21,870
The next question is I'm asking you to write a function that takes two variables and obtain the summation

46
00:02:21,870 --> 00:02:25,900
and multiplication then test the function by taking an input from a user.

47
00:02:26,010 --> 00:02:28,380
I'm asking you to repeat it using lambda expression.

48
00:02:28,380 --> 00:02:30,240
So basically I'm asking for two solutions in here.

49
00:02:30,860 --> 00:02:31,790
All right let's do this.

50
00:02:31,800 --> 00:02:37,200
Let's see the first solution ask you to define to say we can call it whatever I'm going to hit I'm going

51
00:02:37,200 --> 00:02:44,380
to call it some multiply I'm going to pass along two variables X and Y Okay.

52
00:02:44,850 --> 00:02:51,010
And the function going to return some equals to let's call it actually summation to avoid any desert

53
00:02:51,030 --> 00:02:53,550
keywords when I say X plus Y.

54
00:02:53,700 --> 00:02:53,970
Right.

55
00:02:54,660 --> 00:03:00,960
And I'm going to call it let's say multiply and there will be X times Y.

56
00:03:01,170 --> 00:03:02,140
Looks good.

57
00:03:02,230 --> 00:03:03,170
All right.

58
00:03:03,300 --> 00:03:06,940
And the function simply should return right.

59
00:03:06,960 --> 00:03:13,290
So I need to return back to the main I need to return back these two summation and they need to return

60
00:03:13,290 --> 00:03:13,740
back.

61
00:03:13,740 --> 00:03:14,520
Multiply

62
00:03:17,650 --> 00:03:18,390
all right.

63
00:03:18,490 --> 00:03:19,670
Okay let's run.

64
00:03:19,670 --> 00:03:21,130
That looks good.

65
00:03:21,130 --> 00:03:22,390
And let's call the function.

66
00:03:22,750 --> 00:03:26,380
So simply here I wanted to get two variables from the user right.

67
00:03:26,380 --> 00:03:31,900
So I mean I need to get the first integer so I can take a equals to cast as an integer.

68
00:03:32,030 --> 00:03:39,840
When I say okay input I mean ask Okay enter any integer.

69
00:03:40,320 --> 00:03:41,440
OK.

70
00:03:41,950 --> 00:03:47,560
And it's copy that again and let's put it here and let's call it B.

71
00:03:47,840 --> 00:03:48,170
Right.

72
00:03:48,830 --> 00:03:53,420
And yes it can enter let's say another integer right.

73
00:03:53,420 --> 00:03:56,700
So these are going to enter into these two and now to the fun part.

74
00:03:56,720 --> 00:04:01,830
Now to the actual call for the function so to call the function.

75
00:04:01,830 --> 00:04:02,080
OK.

76
00:04:02,090 --> 00:04:06,790
So we'll get a call this function so multiply again I'm going to call it again with its name right.

77
00:04:06,830 --> 00:04:09,260
So I need to get the exact same stuff here.

78
00:04:09,260 --> 00:04:10,100
Call it here right.

79
00:04:10,850 --> 00:04:14,060
So going to call it and pass along the variables A and B right.

80
00:04:14,530 --> 00:04:15,250
OK.

81
00:04:15,290 --> 00:04:21,650
The function would work somehow and the function would return simply to parameters would get a return

82
00:04:21,830 --> 00:04:25,280
let's call them whatever again information multiplication is called a different name.

83
00:04:25,280 --> 00:04:25,720
Right.

84
00:04:26,070 --> 00:04:29,740
And call it let's say a result of some.

85
00:04:30,370 --> 00:04:34,850
And we're going to return as a result underscore multiply

86
00:04:37,190 --> 00:04:38,270
o kay.

87
00:04:38,320 --> 00:04:41,750
And let's go ahead and actually printed in The Secret print.

88
00:04:41,750 --> 00:04:47,440
I'm going to say OK multiplication sorry multiplication

89
00:04:50,920 --> 00:04:53,680
equals two and then curly brackets right.

90
00:04:53,810 --> 00:04:58,250
Then going add K addition equals to curly bracket AGAIN.

91
00:04:58,270 --> 00:04:59,080
RIGHT.

92
00:04:59,090 --> 00:05:06,920
GONNA TAKE A DOT format right and I'm gonna pass along these two parameters simply results and the result

93
00:05:06,940 --> 00:05:13,630
summation and result multiply actually to make sure we're in the same order so we need to do result

94
00:05:13,630 --> 00:05:19,200
multiply first and then the solid result submission.

95
00:05:19,240 --> 00:05:19,860
All right.

96
00:05:19,900 --> 00:05:21,040
That's pretty much it.

97
00:05:21,040 --> 00:05:22,750
Let's go ahead and run it.

98
00:05:22,990 --> 00:05:24,670
So let's run this one first looks good.

99
00:05:24,700 --> 00:05:28,870
Let's run this one for a second sorry and so forth and then enter another integer.

100
00:05:28,870 --> 00:05:31,220
Let's say five looks good.

101
00:05:31,660 --> 00:05:33,870
And let's run that very well.

102
00:05:33,940 --> 00:05:35,140
The multiplication is 20.

103
00:05:35,170 --> 00:05:36,890
Which is four times five is 20.

104
00:05:36,970 --> 00:05:38,320
And then addition is nine.

105
00:05:38,320 --> 00:05:46,100
All right let's run one more time let's say 10 and let's say 50 and let's run that that well multiplication

106
00:05:46,100 --> 00:05:48,190
five hundred and summation is 60.

107
00:05:48,190 --> 00:05:49,830
Looks perfect.

108
00:05:50,110 --> 00:05:50,900
All right.

109
00:05:50,920 --> 00:05:51,690
OK.

110
00:05:51,820 --> 00:05:57,790
My next question here I am asking you to actually repeat the exact same question but using the lambda

111
00:05:57,790 --> 00:05:58,920
expression.

112
00:05:59,010 --> 00:05:59,260
All right.

113
00:05:59,860 --> 00:06:02,260
So I'm not going to go ahead and repeat those.

114
00:06:02,290 --> 00:06:04,170
I just wanted to repeat repeat the function part.

115
00:06:04,180 --> 00:06:06,670
So what I could do using the land expression.

116
00:06:06,670 --> 00:06:07,780
OK.

117
00:06:08,110 --> 00:06:17,080
We could actually do know say OK I wanted to use lambda because remember lambda and then I write my

118
00:06:17,430 --> 00:06:17,980
inputs.

119
00:06:18,010 --> 00:06:24,790
So the lambda we're gonna take let's say two variables x and y and it's going to return back x plus

120
00:06:24,790 --> 00:06:28,850
y because remember that was kind of how we write using that expression right.

121
00:06:28,870 --> 00:06:30,110
But we need to put that somewhere.

122
00:06:30,140 --> 00:06:33,450
I'm going to take a summation equals to this again.

123
00:06:33,450 --> 00:06:39,610
Think of it read it that way lambda expression takes two variables x and y and that's column.

124
00:06:39,940 --> 00:06:44,440
And that would be the feedback that would be the outcome which is x plus y and that would be back in

125
00:06:44,440 --> 00:06:45,740
the summation.

126
00:06:45,820 --> 00:06:47,310
Let's do the same.

127
00:06:47,350 --> 00:06:48,760
Put it here.

128
00:06:49,180 --> 00:06:55,900
And that would be X instead of plus going to be a multiplication and that would be going to call it

129
00:06:56,020 --> 00:06:56,990
multiply.

130
00:06:57,760 --> 00:07:00,170
Right let's run it.

131
00:07:00,270 --> 00:07:00,970
K looks good.

132
00:07:00,970 --> 00:07:02,410
So no problems.

133
00:07:02,410 --> 00:07:05,250
And let's actually go ahead here and copy this.

134
00:07:05,260 --> 00:07:08,130
Pretty much the same mistake in print multiplication addition.

135
00:07:08,140 --> 00:07:11,650
But here that format here I actually need to call it with its name right.

136
00:07:11,650 --> 00:07:17,800
So I'm going to call summation and I'm going to pass along simply whatever very values I wanted to write

137
00:07:17,830 --> 00:07:23,080
whatever numbers they wanted to see they wanted to let's say send a for example in B which is the inputs

138
00:07:23,080 --> 00:07:30,530
I'm getting from the user and result some I'm going to pass along as well a and b apologies that's a

139
00:07:30,560 --> 00:07:32,480
and b.

140
00:07:32,480 --> 00:07:33,050
All right.

141
00:07:33,050 --> 00:07:33,820
So I'm sorry.

142
00:07:33,830 --> 00:07:34,900
That's summation.

143
00:07:34,910 --> 00:07:36,090
We'll call this right.

144
00:07:36,110 --> 00:07:38,350
And here we have multiply all that multiply.

145
00:07:38,510 --> 00:07:41,740
So that'll be my multiply and I'm going to be a and b.

146
00:07:41,780 --> 00:07:43,220
All right let's test it.

147
00:07:43,280 --> 00:07:48,290
So it's Sharon shift enter on that and on that and that's what we're getting we're getting multiplication

148
00:07:48,320 --> 00:07:50,470
equal sixty addition equals four or five hundred.

149
00:07:50,540 --> 00:07:52,120
Actually they're reversed right.

150
00:07:52,130 --> 00:08:01,030
So let's go back and make this multiply and let's make this summation.

151
00:08:01,030 --> 00:08:02,730
All right let's do it again.

152
00:08:02,890 --> 00:08:03,810
And that's what we're getting it.

153
00:08:03,820 --> 00:08:06,870
Multiplication five hundred and additions is sixty.

154
00:08:06,880 --> 00:08:08,580
Let's test it again.

155
00:08:08,740 --> 00:08:10,840
So please just I don't want you to be confused again.

156
00:08:10,870 --> 00:08:12,220
These are kind of two solutions right.

157
00:08:12,220 --> 00:08:20,190
So I'm going to insert two new cells into insert that put it here and maybe enters into let's say I

158
00:08:20,260 --> 00:08:21,920
call it lambda.

159
00:08:22,560 --> 00:08:23,530
OK.

160
00:08:23,800 --> 00:08:28,610
And go here make it mark down and maybe add a hash tag.

161
00:08:28,650 --> 00:08:32,730
Here's just to show you that is just you know the sequence.

162
00:08:32,800 --> 00:08:33,660
Second Solution.

163
00:08:33,680 --> 00:08:34,710
That's a different solution.

164
00:08:34,720 --> 00:08:36,270
Right.

165
00:08:36,610 --> 00:08:37,180
That's it.

166
00:08:37,300 --> 00:08:37,770
Let's shift it.

167
00:08:37,780 --> 00:08:38,470
Let's run it again.

168
00:08:38,480 --> 00:08:39,950
Let's set to values.

169
00:08:39,960 --> 00:08:47,170
Let's say 20 and let's say 40 and run the lambda expressions go he'll run it and that's all getting

170
00:08:47,170 --> 00:08:50,240
we're getting eight hundred and sixty looks perfect.

171
00:08:50,240 --> 00:08:50,740
All right.

172
00:08:50,830 --> 00:08:56,440
The next question is I'm asking to write a function that takes a variable and return its factorial.

173
00:08:56,490 --> 00:08:57,190
All right.

174
00:08:57,340 --> 00:09:02,320
So if you remember from the factorial is let's say for three to four is four times three times two times

175
00:09:02,320 --> 00:09:03,120
one.

176
00:09:03,130 --> 00:09:05,530
So basically the stopping condition is one.

177
00:09:05,530 --> 00:09:06,380
Right.

178
00:09:06,420 --> 00:09:07,600
Well let's see how can we do that.

179
00:09:08,230 --> 00:09:12,850
So what we could do is a little bit tricky but let's say I'm going to do they're going to say OK define

180
00:09:13,290 --> 00:09:18,540
quality factorial and the function I'm going to take just one variable x.

181
00:09:18,580 --> 00:09:18,790
Right.

182
00:09:19,870 --> 00:09:21,760
And what we're going to say here.

183
00:09:21,870 --> 00:09:29,230
I'm going to say OK let's return right I'm going to do here going to take a return x.

184
00:09:29,350 --> 00:09:37,060
So since factorial is let's have a total of four is four times three and then you know it seems like

185
00:09:37,420 --> 00:09:42,580
the idea of running a factorial and this again is a little bit tricky is you know like factorial let's

186
00:09:42,580 --> 00:09:47,200
say a 5 equals to five times the factorial of four.

187
00:09:47,680 --> 00:09:48,670
Right.

188
00:09:48,670 --> 00:09:52,920
Think of it this way like you wanted to call the factorial several times in a way.

189
00:09:52,940 --> 00:09:58,390
OK but every time I'm going to call the factorial again but you gonna subtract one from the original

190
00:09:58,390 --> 00:09:59,320
number.

191
00:09:59,320 --> 00:10:00,540
Let's take a look.

192
00:10:00,590 --> 00:10:01,440
Okay.

193
00:10:01,480 --> 00:10:07,500
Return x multiplied by and that's the tricky part.

194
00:10:07,510 --> 00:10:13,320
We're actually going to call the exact same function again which is really look strange about two here

195
00:10:13,320 --> 00:10:16,560
we're just going to pass along minus one instead.

196
00:10:16,600 --> 00:10:17,040
All right.

197
00:10:17,040 --> 00:10:19,460
Looks looks crazy but you know let's see what's happening here.

198
00:10:19,460 --> 00:10:22,710
So I'm going to say okay factorial can take number four.

199
00:10:22,890 --> 00:10:31,260
Go here the function return four times factorial again of Four minus one which is three right.

200
00:10:31,260 --> 00:10:32,670
So again I go back.

201
00:10:32,670 --> 00:10:34,200
Call the function again.

202
00:10:34,200 --> 00:10:37,330
OK so the return we're going to call the function back again.

203
00:10:37,340 --> 00:10:38,630
You know we're going to keep doing this.

204
00:10:38,630 --> 00:10:39,680
It's crazy again.

205
00:10:39,690 --> 00:10:39,960
Right.

206
00:10:40,350 --> 00:10:44,260
So keep doing this right until you actually stop.

207
00:10:44,270 --> 00:10:46,830
This has to be a stopping condition somehow.

208
00:10:46,830 --> 00:10:54,380
So the stopping condition can be OK if for example you found x the number is zero.

209
00:10:54,380 --> 00:10:57,300
So if he found that he actually reached you know like the end.

210
00:10:57,560 --> 00:10:58,190
OK.

211
00:10:58,290 --> 00:11:00,540
So can I return one.

212
00:11:00,540 --> 00:11:00,930
All right.

213
00:11:01,260 --> 00:11:02,180
That's it.

214
00:11:02,190 --> 00:11:03,600
So once that's pretty much it.

215
00:11:03,600 --> 00:11:06,060
So what we're going to do here going to keep repeating.

216
00:11:06,060 --> 00:11:10,830
You know like doing that factorial thing until you actually subtract the finger each one right.

217
00:11:10,830 --> 00:11:12,800
So one minus one.

218
00:11:12,810 --> 00:11:14,430
We're going to be zero.

219
00:11:14,460 --> 00:11:17,440
It's going to call the function with zero.

220
00:11:17,480 --> 00:11:17,940
Go here.

221
00:11:17,940 --> 00:11:20,140
If X equals to zero that's true.

222
00:11:20,160 --> 00:11:21,780
So I'm going to return one.

223
00:11:21,870 --> 00:11:24,260
So the function here is going to return one in here.

224
00:11:24,450 --> 00:11:26,220
But you already have the entire result.

225
00:11:26,220 --> 00:11:26,400
Right.

226
00:11:26,400 --> 00:11:29,890
So that would be the entire results return it back to the mean again.

227
00:11:30,510 --> 00:11:32,420
Looks crazy but let's test it.

228
00:11:32,490 --> 00:11:33,350
So let's run it.

229
00:11:33,360 --> 00:11:34,880
Okay looks good right.

230
00:11:34,920 --> 00:11:39,460
No errors which is good but obviously it might be looking all like garbage at the end.

231
00:11:39,480 --> 00:11:44,190
Let's test it's going to say okay x equals two let's call it the different variables call X equals to

232
00:11:44,240 --> 00:11:45,070
eight equals two.

233
00:11:45,090 --> 00:11:46,990
It's going to say okay

234
00:11:50,170 --> 00:11:58,190
we're going to say here's input and let's say for example enter number right.

235
00:11:58,270 --> 00:11:58,870
Let's close.

236
00:11:59,110 --> 00:12:00,740
That looks good.

237
00:12:00,970 --> 00:12:09,970
And I'm going to say Okay print we're going to say factorial of something is something right.

238
00:12:10,210 --> 00:12:15,390
And I'm going to say dot format because remember I'm going to pass along the variable a.

239
00:12:15,550 --> 00:12:22,300
And again we're going to call the function factorial and pass along the parameter a That's it.

240
00:12:22,310 --> 00:12:23,080
Let's test it.

241
00:12:23,080 --> 00:12:25,160
So let's run it along for.

242
00:12:25,300 --> 00:12:29,750
Going to turn back 24 which is four times three times two times one.

243
00:12:29,760 --> 00:12:30,840
Right.

244
00:12:30,860 --> 00:12:31,270
Amazing.

245
00:12:31,310 --> 00:12:33,640
Let's run it again with maybe simpler numbers.

246
00:12:33,650 --> 00:12:34,760
Let's end should three.

247
00:12:34,760 --> 00:12:36,430
That would be the answer is six Why.

248
00:12:36,440 --> 00:12:42,790
Because three times two times one which it's six and the one more time it's done for example 10 return

249
00:12:42,800 --> 00:12:46,790
the crazy number you know 3 6 8 8 0 k looks good.

250
00:12:46,880 --> 00:12:47,500
All right.

251
00:12:47,510 --> 00:12:49,240
That's pretty much all what I have for this lecture.

252
00:12:49,250 --> 00:12:50,580
I hope you guys enjoyed it.

253
00:12:50,600 --> 00:12:52,940
And when next lecture I'm going to keep going.

254
00:12:52,970 --> 00:12:55,410
And please stay tuned.

255
00:12:55,430 --> 00:12:57,480
Keep solving the rest of the questions.

256
00:12:57,500 --> 00:12:58,910
See you guys in the next lecture.
