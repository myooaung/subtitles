WEBVTT
1
00:00:00.450 --> 00:00:03.340
Hello everyone and welcome to this lecture and this lecture.

2
00:00:03.360 --> 00:00:06.110
We're going to cover what we call it variable assignment.

3
00:00:06.180 --> 00:00:06.790
Okay.

4
00:00:06.870 --> 00:00:11.460
Which is kind of a very important concept in programming in general and it's very important concept

5
00:00:11.460 --> 00:00:13.520
in Python programming specifically.

6
00:00:13.770 --> 00:00:18.750
And I'm going to be using it kind of extensively throughout throughout the course and through all the

7
00:00:18.780 --> 00:00:21.280
practical projects as well moving forward.

8
00:00:21.390 --> 00:00:22.080
Great.

9
00:00:22.230 --> 00:00:23.820
So let's zoom in a little bit.

10
00:00:23.820 --> 00:00:29.080
So it could be clear for you guys so we're going to do here to perform naval assignment.

11
00:00:29.200 --> 00:00:35.400
First we're doing a very big assignment so let's assume that we wanted to for example multiply two numbers

12
00:00:35.400 --> 00:00:35.840
together.

13
00:00:35.940 --> 00:00:41.770
So I have two options the first option is going to say 10 multiplied by five and then come around this

14
00:00:41.770 --> 00:00:43.360
cell that will generate 50.

15
00:00:43.530 --> 00:00:44.170
OK.

16
00:00:44.490 --> 00:00:48.810
The only problem is that in general in programming in general we just don't like this.

17
00:00:48.830 --> 00:00:52.350
You know doing this we don't like just multiplying two numbers.

18
00:00:52.350 --> 00:00:55.100
And you know like don't we like it.

19
00:00:55.170 --> 00:00:58.380
Instead of using these two numbers just to multiply them directly.

20
00:00:58.530 --> 00:01:03.440
We prefer to actually put these numbers in what we call variables which is kind of a tank.

21
00:01:03.440 --> 00:01:04.890
Think of it as kind of a tank.

22
00:01:05.070 --> 00:01:11.160
And we put very you know like value in that tank and then that gwilt before whatever we want on these

23
00:01:11.160 --> 00:01:13.070
variables what that tank moving forward.

24
00:01:13.080 --> 00:01:14.740
All right let's take a look at example.

25
00:01:14.870 --> 00:01:18.970
So let's assume I wanted to perform the exact same operation but just kind of in a different kind of

26
00:01:18.970 --> 00:01:22.320
a more you know like elete way or elegant way.

27
00:01:22.470 --> 00:01:27.600
I'm going to call a variable call it a and then get put equals 2 and then I'm going to put 10 in it

28
00:01:28.110 --> 00:01:32.250
which means I find the fabre called A and I put numbers 10 into it.

29
00:01:32.340 --> 00:01:36.960
So if I hit on this cell actually see the 10 has ran already but nothing happened.

30
00:01:36.960 --> 00:01:37.290
Why.

31
00:01:37.290 --> 00:01:39.750
Because you didn't perform any operation.

32
00:01:39.750 --> 00:01:46.570
You just put 10 in to a if you wanted to view a from one to look at a neck and write a.

33
00:01:46.660 --> 00:01:49.700
And run That was TELL ME WHAT'S IN A.

34
00:01:49.710 --> 00:01:54.400
Which means there is value of 10 inside our variable which makes complete sense.

35
00:01:54.480 --> 00:01:55.220
OK.

36
00:01:56.040 --> 00:01:58.840
What if I wanted to divine and find another variable called.

37
00:01:58.870 --> 00:02:02.870
And the find be equal to let's say five k and around it.

38
00:02:03.220 --> 00:02:03.470
OK.

39
00:02:03.510 --> 00:02:04.190
Nothing happened.

40
00:02:04.230 --> 00:02:07.360
But if I look take a look at B and run it that will tell me.

41
00:02:07.390 --> 00:02:08.130
Well.

42
00:02:08.200 --> 00:02:09.680
B has number 5.

43
00:02:10.140 --> 00:02:13.470
Well I could do right now that it can do what we call it.

44
00:02:13.560 --> 00:02:18.900
Mathematical Operations Executive seem as we have done before but in a kind of a more elegant way.

45
00:02:19.080 --> 00:02:26.010
What I'm going to do here are going to see which is it go continue variable sequence to say a multiply

46
00:02:26.010 --> 00:02:27.130
by B.

47
00:02:27.420 --> 00:02:34.160
So instead of directly multiplying 10 times 5 what I did here is just some of the ply 10 by 5.

48
00:02:34.260 --> 00:02:40.340
Okay but I did that kind of an invariable assignment format instead of multiplying number two directly.

49
00:02:40.460 --> 00:02:46.090
I'm going to multiply the actual variables which is a n B which is already contains 10 and 5 as well.

50
00:02:46.120 --> 00:02:48.890
Right around that nothing can happen.

51
00:02:48.900 --> 00:02:53.710
But if I view C for C and are run it then you would come up with values 50.

52
00:02:53.720 --> 00:02:57.980
Which is exactly the same as the value that we are in before here which is great.

53
00:02:58.080 --> 00:03:01.160
Okay so what's the what's the value what's licking.

54
00:03:01.170 --> 00:03:02.490
Well what did we gain here.

55
00:03:02.610 --> 00:03:05.020
What we gain here is flexibility.

56
00:03:05.170 --> 00:03:12.000
Okay so now I can actually put whatever value in my tank which is kind of these variables in B and can

57
00:03:12.000 --> 00:03:13.800
perform whatever operations on em.

58
00:03:13.830 --> 00:03:16.160
I don't go have to go and write them again right.

59
00:03:16.230 --> 00:03:17.460
So whatever you can do here.

60
00:03:17.570 --> 00:03:19.710
And so scale it C D equals.

61
00:03:19.950 --> 00:03:21.900
Let's say a plus b.

62
00:03:21.920 --> 00:03:25.460
I can do that the multiplication can divine the variable in just months.

63
00:03:25.590 --> 00:03:26.380
Add them together.

64
00:03:26.580 --> 00:03:31.440
Run it and if every one of you d run it now is going to be 15 which makes sense.

65
00:03:31.440 --> 00:03:34.140
Now I added 5 plus then there's an 8 15.

66
00:03:34.180 --> 00:03:35.030
Great.

67
00:03:35.130 --> 00:03:35.960
Great.

68
00:03:36.420 --> 00:03:38.680
So what they're going to do here again.

69
00:03:38.700 --> 00:03:41.520
I'm going to show you two more important concepts.

70
00:03:41.520 --> 00:03:46.990
First one is that we wanted to get the kind of what we call the type of the variable.

71
00:03:47.180 --> 00:03:48.900
Okay so we have different types.

72
00:03:48.900 --> 00:03:53.160
In general when it comes to programming here I'm just going to cover the basic one which is what we

73
00:03:53.160 --> 00:03:54.610
call it integer.

74
00:03:55.020 --> 00:03:59.170
So if I wanted to let's say get a type of A which is a defined form.

75
00:03:59.220 --> 00:04:02.320
Put a put into it.

76
00:04:02.350 --> 00:04:07.740
It's what it could do here and I say okay I'm going to wanted to get what's a type I'm going to type

77
00:04:07.860 --> 00:04:13.250
type and then open brackets and then I say what's the type let's say of D.

78
00:04:13.260 --> 00:04:18.830
For example or 8 for instance is a type of a cell phone and that then you're supposed to apply that

79
00:04:18.830 --> 00:04:19.920
thing with them UK SC.

80
00:04:19.910 --> 00:04:21.110
Actually this is an integer.

81
00:04:21.270 --> 00:04:21.480
OK.

82
00:04:21.510 --> 00:04:22.350
Which means.

83
00:04:22.350 --> 00:04:25.890
Which makes sense because he defined a as 10.

84
00:04:26.370 --> 00:04:28.700
What if for example here I said okay.

85
00:04:28.740 --> 00:04:31.780
No I'm not going to put 10 action in a put ten point five.

86
00:04:31.920 --> 00:04:32.400
OK.

87
00:04:32.550 --> 00:04:40.150
And then find another variable called it C E equals to 10.5 and run the 7 and then I'm going to go ahead

88
00:04:40.150 --> 00:04:42.330
then get type of E..

89
00:04:42.660 --> 00:04:48.260
Alright if I did that then you come up with something we need or they could totally different datatype

90
00:04:48.340 --> 00:04:50.000
protocol float.

91
00:04:50.370 --> 00:04:53.630
Which means that because here that is kind of a fraction in here.

92
00:04:53.880 --> 00:04:55.380
So it's not integer anymore.

93
00:04:55.500 --> 00:04:59.900
We call it in general in programming in general could just computer engineering quality float which.

94
00:05:00.130 --> 00:05:04.000
There is a fraction no affection element in here.

95
00:05:04.000 --> 00:05:09.670
There are tons of you know datatypes that are strings that are listed there are you know like sets.

96
00:05:09.670 --> 00:05:10.530
There are tuple.

97
00:05:10.540 --> 00:05:13.210
There are tons of them going to cover all of them here.

98
00:05:13.210 --> 00:05:18.100
I just wanted to get just a quick overview of integers and floats.

99
00:05:18.100 --> 00:05:24.430
Simply put integers to just number without any flexion in it here float is that when there is a kind

100
00:05:24.430 --> 00:05:29.070
of very flat flexions Heath 10.5 then that means this is a foot.

101
00:05:29.390 --> 00:05:29.670
OK.

102
00:05:29.710 --> 00:05:30.610
Let's add a new sense.

103
00:05:30.610 --> 00:05:34.400
Again I'm going to press a new sense of I could do here.

104
00:05:34.420 --> 00:05:41.280
The last concept I wanted to use is that if let's assume that one or two for example take a number.

105
00:05:41.340 --> 00:05:42.250
What's the key variable.

106
00:05:42.250 --> 00:05:45.820
Let's call it why for example called a why let's say equal to 6.

107
00:05:46.030 --> 00:05:46.290
OK.

108
00:05:46.300 --> 00:05:47.360
And around it.

109
00:05:47.650 --> 00:05:52.660
And what I wanted to do they wanted to increment that variable that VB Y by 1.

110
00:05:52.840 --> 00:05:53.400
OK.

111
00:05:53.920 --> 00:06:01.860
So again Simply put I want to take y add 1 to it and then put the new value which is suppose to be 7

112
00:06:02.080 --> 00:06:02.490
again.

113
00:06:02.620 --> 00:06:09.190
Back in y I can actually do this by saying wilkey I want it to y plus 1.

114
00:06:09.220 --> 00:06:10.600
Again very simple.

115
00:06:10.830 --> 00:06:13.140
And whatever that is onsen going to be getting here.

116
00:06:13.210 --> 00:06:15.180
I'm going to put it again into Y.

117
00:06:15.440 --> 00:06:21.340
Alright so that means the Y old plus one whatever the result I'm going to put it in we'll call it Y

118
00:06:21.340 --> 00:06:21.720
new.

119
00:06:21.730 --> 00:06:25.510
Which is kind of an overriding the actual variable again.

120
00:06:25.690 --> 00:06:33.070
So if I run this way and if a view y right y and run it that was in a means 7 which means that it took

121
00:06:33.070 --> 00:06:37.970
six added increment the one and then overwrote the value of y again.

122
00:06:38.290 --> 00:06:44.380
When I it wanted to show you with that is kind of look like a kind of a professional way of writing

123
00:06:44.380 --> 00:06:50.320
the increment operation in Python and in so many different programming languages that I've been exposed

124
00:06:50.590 --> 00:06:51.140
to.

125
00:06:51.340 --> 00:06:54.260
What you can do instead is say okay why.

126
00:06:54.370 --> 00:06:55.040
Okay.

127
00:06:55.180 --> 00:07:02.110
Plus equals 1 which is really strange scooches looks to me looks weird why its look looks as a kind

128
00:07:02.110 --> 00:07:03.270
of you know a syntax error.

129
00:07:03.300 --> 00:07:05.330
Like you or like something you know something is wrong.

130
00:07:05.500 --> 00:07:07.560
Actually this means that y.

131
00:07:07.600 --> 00:07:13.320
This means dits which means Y plus equal 1 means y equals y plus 1.

132
00:07:13.570 --> 00:07:17.660
Which means take the old y add one to it and then generate a new one.

133
00:07:17.680 --> 00:07:23.800
If I run it and if I give you why they call he'd said Y and run it then you come up with valuev 8.

134
00:07:23.830 --> 00:07:24.100
Why.

135
00:07:24.100 --> 00:07:29.230
Because you actually took 7 added one to it and generated it afterwards.

136
00:07:29.460 --> 00:07:30.130
Right.

137
00:07:30.310 --> 00:07:33.850
And that's again kind of a quick overview of what we have done so far.

138
00:07:33.850 --> 00:07:37.840
So for the available assignment now we know instead of just multiplying two numbers together then one

139
00:07:37.840 --> 00:07:44.360
can put a number into a variable number into a variable and then can perform operations on these variables.

140
00:07:44.770 --> 00:07:46.860
Now I know two data types so far.

141
00:07:46.860 --> 00:07:50.860
I know how do we do integers by getting the type of any variable.

142
00:07:50.920 --> 00:07:52.900
I'm going to come up with integer.

143
00:07:52.930 --> 00:07:55.850
Now I know what you mean by float with we have some fractions.

144
00:07:56.050 --> 00:07:57.350
And here.

145
00:07:57.550 --> 00:08:05.590
I know as well how can we increment variable within Python by you know just assuming y plus whatever

146
00:08:05.590 --> 00:08:09.210
number you wanted to do and then override that value on y.

147
00:08:09.610 --> 00:08:15.540
Other alternative is if we wanted to do Y plus equal 1 or Y plus equal to whatever the value wanted

148
00:08:15.550 --> 00:08:18.780
to do that means Y old quite old.

149
00:08:19.000 --> 00:08:24.040
Add the numbers to it and then put it on one new and that's pretty much all what we have for this section.

150
00:08:24.040 --> 00:08:27.160
Again you're getting closer to mastering python.

151
00:08:27.160 --> 00:08:27.870
Keep it up.

152
00:08:27.880 --> 00:08:29.000
I hope you enjoyed it.

153
00:08:29.020 --> 00:08:30.680
And see you in the next election.
