WEBVTT
1
00:00:00.360 --> 00:00:03.270
Hello everyone and welcome to this lecture and this lecture.

2
00:00:03.270 --> 00:00:09.840
We're going to cover the list which is very important datatype when it comes to Python programming in

3
00:00:09.840 --> 00:00:10.460
general.

4
00:00:10.470 --> 00:00:11.070
All right.

5
00:00:11.490 --> 00:00:15.640
So we covered before how to let's say define an integer.

6
00:00:15.660 --> 00:00:18.780
For example if you live say say X equals let's say 10.

7
00:00:18.990 --> 00:00:23.500
And if I find that if I wanted to take a look at x if I were right it's only okay.

8
00:00:23.550 --> 00:00:25.460
That has value of Ken with an X..

9
00:00:25.740 --> 00:00:31.610
And if I want to go and just get the type of x and if I hit on it that would tell me there's an integer.

10
00:00:32.040 --> 00:00:36.960
If I go and change that and make it let's say 10.5 run in granite granite then you'll.

11
00:00:37.020 --> 00:00:38.410
Well that pipe has flopped.

12
00:00:38.500 --> 00:00:39.150
All right.

13
00:00:39.600 --> 00:00:44.650
If I change that and make it let's say whatever string method.

14
00:00:44.700 --> 00:00:46.730
Hello world for instance.

15
00:00:46.810 --> 00:00:50.950
And around it running on it they'll tell me well that's actually a string.

16
00:00:50.980 --> 00:00:56.020
Okay so now we have pretty much you know kind of experts come to the finding.

17
00:00:56.180 --> 00:01:01.580
We used the tapes again such as strings integer and flopped.

18
00:01:01.920 --> 00:01:03.440
Now let's go to the fun part.

19
00:01:03.480 --> 00:01:06.520
Let's go and define what we call list.

20
00:01:07.260 --> 00:01:12.210
So list simply is kind of a collection of elements.

21
00:01:12.450 --> 00:01:18.960
So we can for example make a collection of let's say seeders of numbers instead of having just one single

22
00:01:18.960 --> 00:01:25.380
number let's say five or 10 or whatever we can create a list think of a list that's kind of an array

23
00:01:25.440 --> 00:01:28.780
which is kind of a series of elements you know connected to each other.

24
00:01:29.100 --> 00:01:31.400
Let's see how can we define a list first.

25
00:01:31.590 --> 00:01:34.370
OK so I'm going to define my list.

26
00:01:34.890 --> 00:01:38.470
So here I'm just fine you can call it whatever anybody want.

27
00:01:38.490 --> 00:01:43.370
And to the list we actually use the square brackets here and then we list the elements in order.

28
00:01:43.380 --> 00:01:46.190
So we say okay that's the first element to the second element.

29
00:01:46.200 --> 00:01:47.750
And that's my third element.

30
00:01:47.820 --> 00:01:48.000
Right.

31
00:01:48.150 --> 00:01:49.960
And then we separately them with comma.

32
00:01:50.100 --> 00:01:50.590
Right.

33
00:01:51.030 --> 00:01:53.620
And if I don't that nothing happened.

34
00:01:53.820 --> 00:01:54.750
Looks good.

35
00:01:54.750 --> 00:01:56.900
If I wanted to view what's on my list.

36
00:01:56.970 --> 00:01:57.540
I don't know.

37
00:01:57.630 --> 00:02:00.860
Tell me where my list has elements 1 2 and 3.

38
00:02:00.930 --> 00:02:01.250
Right.

39
00:02:01.290 --> 00:02:07.890
If I wanted to take a look and let's say give the tape of my list and if I find it they'll tell me the

40
00:02:07.890 --> 00:02:09.900
data pipe is actually a list which is great.

41
00:02:09.900 --> 00:02:12.690
This was actually what I was expecting.

42
00:02:12.990 --> 00:02:15.280
I did what we could do actually.

43
00:02:15.330 --> 00:02:18.880
Here we find the list that has all integers in it.

44
00:02:18.930 --> 00:02:24.990
What we could do is that we can actually mix and match different data types within a list which is again

45
00:02:25.020 --> 00:02:28.640
really very powerful it comes to Python programming.

46
00:02:28.800 --> 00:02:32.160
So let's assume they're going to find again another list going to my list again.

47
00:02:32.310 --> 00:02:36.250
And then I'm going to initialize it with just a bunch of data types.

48
00:02:36.390 --> 00:02:40.350
When I say okay let's find an integer for instance let's put some string.

49
00:02:40.440 --> 00:02:46.500
Let's call it Mitch for example let's for example say five for instance let's hear it.

50
00:02:46.680 --> 00:02:47.980
Okay but it looks good.

51
00:02:48.300 --> 00:02:54.130
And if I wanted to view again my list I'm going to say okay my lists and granite will tell me.

52
00:02:54.130 --> 00:02:56.580
Okay well that's basically that is what I've got.

53
00:02:56.790 --> 00:02:58.580
I can go ahead as well and print.

54
00:02:58.590 --> 00:03:03.630
If I wanted to print my list and if I had it they would tell me these out of kind of the elements that

55
00:03:03.640 --> 00:03:06.130
were expecting as well within our lives.

56
00:03:06.300 --> 00:03:07.420
Great.

57
00:03:07.450 --> 00:03:09.530
I think that's pretty much how can we find a list.

58
00:03:09.570 --> 00:03:17.130
And what we could do as well here if they wanted to show you this kind of an advanced form of the list

59
00:03:17.130 --> 00:03:21.490
is what we call it the nested list which is ilist INSIDE THE LIST.

60
00:03:21.510 --> 00:03:21.760
OK.

61
00:03:21.780 --> 00:03:24.100
And I want it to be confused again it's very simple.

62
00:03:24.120 --> 00:03:25.750
Let's see how can we define that.

63
00:03:25.800 --> 00:03:28.750
So it's actually going to the final key my list equals two.

64
00:03:28.890 --> 00:03:33.830
And then again open square brackets and they're going to say Okay first element in my list is call it

65
00:03:33.870 --> 00:03:34.730
Mitch.

66
00:03:34.730 --> 00:03:35.200
Right.

67
00:03:35.490 --> 00:03:38.630
And then the second element it will be just the number.

68
00:03:38.700 --> 00:03:44.420
It won't be just float for example at 1 be such a string.

69
00:03:44.420 --> 00:03:49.820
We're actually going to define ilist INSIDE THE LIST and that's what we call it nested lists.

70
00:03:49.950 --> 00:03:51.900
OK so how can we define that.

71
00:03:51.930 --> 00:03:57.150
Actually you can again create another list inside the list by again opening another square bracket which

72
00:03:57.150 --> 00:04:03.180
means that's kind of you know like in New lists inside my bigger list which is defined here.

73
00:04:03.570 --> 00:04:08.560
And then you call it whatever you want then here you can simply go ahead and define it at say three

74
00:04:09.020 --> 00:04:12.070
find six and find seven or eight.

75
00:04:12.420 --> 00:04:13.260
You can on that.

76
00:04:13.260 --> 00:04:14.330
Looks good.

77
00:04:14.670 --> 00:04:17.210
And I can go ahead and copy and paste.

78
00:04:17.250 --> 00:04:17.810
Done it.

79
00:04:17.820 --> 00:04:20.700
That would give me that's my Again nested list.

80
00:04:21.550 --> 00:04:27.150
So what we need to do here is that we need to do what we call it indexing which is simply we want to

81
00:04:27.210 --> 00:04:28.580
access a specific element.

82
00:04:28.590 --> 00:04:33.200
Let's assume that it wanted for example to access number six or element here of the value of six.

83
00:04:33.200 --> 00:04:34.430
How can I get this.

84
00:04:34.680 --> 00:04:36.520
We do that by quality indexing.

85
00:04:36.640 --> 00:04:40.000
OK let's take a look at a very simple example first.

86
00:04:40.020 --> 00:04:40.650
So it's.

87
00:04:40.710 --> 00:04:45.600
We're going to just ignore the nested list because it's still a bit complex.

88
00:04:45.690 --> 00:04:47.870
We're just going to take a look at just a simple one.

89
00:04:47.910 --> 00:04:53.540
Just again finding my list that has too much and 5 and it's assumed that I wanted to print.

90
00:04:53.580 --> 00:04:59.820
For example let's see the first element you get to what it could do a mistook it print open print.

91
00:05:00.370 --> 00:05:05.210
And then like the name of my list which is called My underscored list.

92
00:05:05.250 --> 00:05:12.220
And in order to access elements within the list I open square brackets and then specify a number here

93
00:05:12.280 --> 00:05:13.840
which is what we call it index.

94
00:05:13.960 --> 00:05:14.590
Right.

95
00:05:14.980 --> 00:05:19.700
So the first element in my list has an index of zero.

96
00:05:19.870 --> 00:05:26.050
The second element in my list he admits has an index of one and then he of the third element in my list

97
00:05:26.050 --> 00:05:30.310
has an index of two which is a little bit confusing with a D with Python but you going to get used to

98
00:05:30.310 --> 00:05:31.450
it afterwards.

99
00:05:31.720 --> 00:05:37.730
Again so to xes the first element I just need to use to come up with zero and that we're simply here

100
00:05:37.890 --> 00:05:44.020
is generally to two okay go to my list and access the first ilim element or the element that has an

101
00:05:44.080 --> 00:05:45.190
index of 0.

102
00:05:45.190 --> 00:05:46.650
That's exactly what I'm looking for.

103
00:05:46.890 --> 00:05:51.480
Alright let's run it and then you come up with two which is the value of the perfect.

104
00:05:51.670 --> 00:05:54.720
If I change that and make it let's say 1.

105
00:05:54.820 --> 00:05:55.630
If it.

106
00:05:55.840 --> 00:06:01.120
Then you come up with Mitch which is the value you that were getting fibre and to come up with 5 which

107
00:06:01.120 --> 00:06:02.240
is a value for you that would count.

108
00:06:02.250 --> 00:06:08.350
Again please remember and don't forget that you know like when we do indexing to a list the first element

109
00:06:08.350 --> 00:06:14.210
has an index of zero index of 1 and this have index of two great.

110
00:06:14.740 --> 00:06:18.190
Let's see how can we do what the nested indexing.

111
00:06:18.220 --> 00:06:21.390
So let's assume that can define elist.

112
00:06:21.400 --> 00:06:28.050
Okay go find it whatever you mean to say here okay my list equates to again open square brackets and

113
00:06:28.110 --> 00:06:34.120
I'm going to find that C string first Mets for example and then here I'm going to create actually two

114
00:06:34.120 --> 00:06:37.060
lists which is going to come here to create two lists.

115
00:06:37.660 --> 00:06:44.920
First list has values 3 6 and 7 and then the second list has let's say another value let's call it yellow

116
00:06:45.220 --> 00:06:49.430
like the column for instance and then five and then six or eight.

117
00:06:49.560 --> 00:06:57.700
If that looks good and what I wanted to do I wanted for example to print let's say the letter T here.

118
00:06:58.030 --> 00:07:01.100
Which is weird but let's assume they're going to print.

119
00:07:01.180 --> 00:07:05.170
He had the letter T for example although one for innocence to print Lety only yellow.

120
00:07:05.170 --> 00:07:05.600
Here.

121
00:07:05.770 --> 00:07:06.850
How can we access that.

122
00:07:06.850 --> 00:07:10.150
How can it do indexing for a nested list.

123
00:07:10.150 --> 00:07:16.840
Listicle OK I think a print right and I'm going to call the name of my list which my list or put square

124
00:07:16.870 --> 00:07:17.880
brackets.

125
00:07:18.520 --> 00:07:20.520
And if I listed let's say 0.

126
00:07:20.680 --> 00:07:22.540
Okay an error run it.

127
00:07:22.550 --> 00:07:25.610
That will give me mitsch which is the first value here.

128
00:07:26.040 --> 00:07:33.090
If I say my list of 1 and if I ran it that would return the second element in the launch.

129
00:07:33.100 --> 00:07:40.000
In the big basically list and that's why you end up with another list which is here because this is

130
00:07:40.000 --> 00:07:44.510
the element that has an index of 1 in my big list.

131
00:07:44.740 --> 00:07:49.960
Yes it's a list that's a different topic but you know the idea is in my big list.

132
00:07:49.990 --> 00:07:51.360
This is has indicate 0.

133
00:07:51.540 --> 00:07:54.620
This has index one and all that has an index of 2.

134
00:07:54.670 --> 00:07:57.430
Let's give it a shot to run it.

135
00:07:57.580 --> 00:08:00.750
You'll come up with yellow five and six which agree.

136
00:08:01.320 --> 00:08:02.050
All right.

137
00:08:02.680 --> 00:08:05.600
Let's assume that a one or two exits elements within the element.

138
00:08:05.620 --> 00:08:08.950
Let's assume that just no one to access let's say all of this.

139
00:08:08.960 --> 00:08:11.010
I just need for example to adjust the yellow.

140
00:08:11.230 --> 00:08:12.580
How can I do that.

141
00:08:12.580 --> 00:08:19.570
So if I say print my list and then open square brackets then I would value of two that would return

142
00:08:19.840 --> 00:08:21.530
the entire list.

143
00:08:21.580 --> 00:08:23.720
What I could do here is to do nested indexing.

144
00:08:23.740 --> 00:08:28.990
I can actually open another square bracket and put in mix of zeo.

145
00:08:29.020 --> 00:08:32.680
Simply put I'm saying look go to my larger list.

146
00:08:32.920 --> 00:08:39.250
Take the element number two which is simply all this and then within this get the element number dizzier

147
00:08:39.280 --> 00:08:40.480
which is simply yellow.

148
00:08:40.480 --> 00:08:41.360
Go for it.

149
00:08:41.560 --> 00:08:43.340
You'll come up with yellow which is great.

150
00:08:43.510 --> 00:08:48.170
If I change that and make it let's say to run it to come up with a value of six.

151
00:08:49.090 --> 00:08:53.450
If I let's say I want to talk in this 6 foot x for instance then I need that's zero.

152
00:08:53.500 --> 00:08:57.660
All that is one which means they have to go here making this one.

153
00:08:57.910 --> 00:09:03.130
And inside my list they have this index zero this index one great So that's why I need to come here

154
00:09:03.310 --> 00:09:04.540
and make this index one.

155
00:09:04.560 --> 00:09:08.460
Before I run it you you'll come up with a value of x here which is great.

156
00:09:08.470 --> 00:09:09.490
Perfect.

157
00:09:10.020 --> 00:09:12.140
Alright I hope it's not too confusing.

158
00:09:12.150 --> 00:09:16.890
Hope it's pretty straightforward where you chose the next topic that we're going to be covering.

159
00:09:16.910 --> 00:09:19.130
That's why we call it negative indexing.

160
00:09:19.410 --> 00:09:21.640
OK what do you mean by negative indexing.

161
00:09:21.850 --> 00:09:26.510
Let's assume that it wanted to access for example elements from the end of my list.

162
00:09:26.890 --> 00:09:27.640
Let's give it a shot.

163
00:09:27.640 --> 00:09:29.880
This is something and I just copy that here.

164
00:09:30.820 --> 00:09:34.550
And I wanted to opt in the last elements within the list.

165
00:09:34.600 --> 00:09:42.010
I can actually do that easily by seeing it print anything and specify my list and then open square brackets.

166
00:09:42.160 --> 00:09:46.990
And within that square brackets is going to seem minus one indicating that any in the last element within

167
00:09:46.990 --> 00:09:47.750
my list.

168
00:09:48.250 --> 00:09:53.080
If I done that if I run it that will return the value of 5 which is simply the last element within my

169
00:09:53.170 --> 00:09:53.710
list.

170
00:09:53.900 --> 00:09:55.430
And that's how we do.

171
00:09:55.510 --> 00:09:58.820
Being basically negative indexing.

172
00:09:58.870 --> 00:09:59.350
OK.

173
00:09:59.680 --> 00:10:04.520
If I change that and make it live seem like a stew that will give me the second last element here which

174
00:10:04.520 --> 00:10:08.380
is you know like from from from the back from the end which is you know Mitch.

175
00:10:08.580 --> 00:10:09.990
OK great.

176
00:10:10.110 --> 00:10:11.030
Right.

177
00:10:11.270 --> 00:10:14.880
The next example I'm going be covering is what we call it slicing.

178
00:10:14.870 --> 00:10:18.690
So now we cover it how we do just the finalist.

179
00:10:18.850 --> 00:10:26.390
The fine nested list but for him indexing which is exis element within the list we know how to perform

180
00:10:26.390 --> 00:10:26.630
as well.

181
00:10:26.630 --> 00:10:29.500
Indexing in nested list which is great.

182
00:10:29.540 --> 00:10:34.910
Now I know how to do negative indexing which is how can I get this element at the end of the list.

183
00:10:35.060 --> 00:10:42.820
And now I can actually define as well for colic element or a list slicing which is just going into a

184
00:10:42.820 --> 00:10:47.420
list that actually opening just one element in thinning more of them than one element of it it's the

185
00:10:47.420 --> 00:10:53.410
good at listicle of the secret list to find my lists and let's call it for instance two.

186
00:10:54.310 --> 00:10:56.460
Let's call it Mitch for example.

187
00:10:56.950 --> 00:11:06.600
Let's define let's say five seven eight and 10 and let's say 15 for example and so on and that's right.

188
00:11:06.610 --> 00:11:07.180
That's my list.

189
00:11:07.180 --> 00:11:08.300
Looks great.

190
00:11:08.420 --> 00:11:11.760
Let us assume that I wanted to access for example a couple of elements in here.

191
00:11:11.770 --> 00:11:12.880
How can access them.

192
00:11:12.970 --> 00:11:14.600
You know it's not just one element.

193
00:11:14.650 --> 00:11:15.130
Action one.

194
00:11:15.130 --> 00:11:18.330
Go ahead and exis more than one element.

195
00:11:18.820 --> 00:11:21.240
We can do that by seeing it print.

196
00:11:21.610 --> 00:11:24.800
I'm going to see my list which is the name of the list.

197
00:11:24.810 --> 00:11:27.490
They wanted to access or put a square brackets.

198
00:11:27.640 --> 00:11:33.850
And then I can mention here the index which is the start and end point of whatever it is that I'm looking

199
00:11:33.850 --> 00:11:34.220
for.

200
00:11:34.300 --> 00:11:34.820
Okay.

201
00:11:35.080 --> 00:11:37.540
Let's assume going to start off let's say from zero.

202
00:11:37.870 --> 00:11:38.460
Okay.

203
00:11:38.570 --> 00:11:39.890
Put two columns.

204
00:11:39.950 --> 00:11:41.130
Let's say two.

205
00:11:41.200 --> 00:11:42.920
Let's see what's going to happen.

206
00:11:43.450 --> 00:11:47.960
If I had done that you would find that you came up with a value of too much.

207
00:11:48.010 --> 00:11:48.550
Okay.

208
00:11:48.610 --> 00:11:53.270
Which means that he had when it put zero Colin to.

209
00:11:53.320 --> 00:11:57.100
Means I'm asking to get the element with index of zero which is this one.

210
00:11:57.640 --> 00:12:01.800
And then the element of index of one which is this one and that's it.

211
00:12:01.810 --> 00:12:02.880
We're going to stop.

212
00:12:02.890 --> 00:12:10.210
Which means that here when I mentions zero column two that means any the element of index of zero end

213
00:12:10.450 --> 00:12:13.380
element of index of one and that's it.

214
00:12:13.380 --> 00:12:13.660
All right.

215
00:12:13.700 --> 00:12:14.560
And that's it again.

216
00:12:14.570 --> 00:12:15.840
Little bit of confusion Susan.

217
00:12:15.850 --> 00:12:17.410
Actually there are two confusing points.

218
00:12:17.410 --> 00:12:22.740
You know it comes off you know like Python in general indexing or slicing first.

219
00:12:23.290 --> 00:12:26.560
The first element has a value of zero index of zeo.

220
00:12:26.730 --> 00:12:30.560
Okay not one second element when I put two.

221
00:12:30.640 --> 00:12:33.030
Just think of it as it's not two it's actually one.

222
00:12:33.100 --> 00:12:33.340
OK.

223
00:12:33.370 --> 00:12:35.830
So we just we put up to.

224
00:12:35.930 --> 00:12:38.190
This value and not including.

225
00:12:38.250 --> 00:12:43.250
That's the overall idea I get it's a little bit confusing but think of it this as zero and 1.

226
00:12:43.300 --> 00:12:48.490
So we need the element here element and the second element that if I change that and make it let's say

227
00:12:48.490 --> 00:12:58.000
for if I had it you would come up with the elements in 0 1 2 and 3 you'd include the index.

228
00:12:58.120 --> 00:12:59.700
OK.

229
00:13:00.040 --> 00:13:01.370
That's pretty much.

230
00:13:01.420 --> 00:13:02.140
That's pretty much it.

231
00:13:02.140 --> 00:13:03.340
How can you the elements.

232
00:13:03.340 --> 00:13:07.390
Let's say I wanted to access for example these elements a 10 and 15.

233
00:13:07.660 --> 00:13:13.520
This is index 0 1 2 3 4 so he is going to come here and list four.

234
00:13:13.690 --> 00:13:14.340
Right.

235
00:13:14.650 --> 00:13:18.540
And then I need five six and seven.

236
00:13:18.540 --> 00:13:23.380
All right so can you just put seven here and if I'd done it you would come up with a value of a 10 and

237
00:13:23.380 --> 00:13:23.740
15.

238
00:13:23.740 --> 00:13:24.860
You simply put.

239
00:13:24.990 --> 00:13:25.990
You took the elements.

240
00:13:25.990 --> 00:13:32.540
This is again 0 1 2 3 4 you took the number 4 5 6 and you did it include seven.

241
00:13:32.610 --> 00:13:32.890
Okay.

242
00:13:32.890 --> 00:13:33.130
Why.

243
00:13:33.130 --> 00:13:39.150
Because it's again you don't you include up to and not including the last element 7.

244
00:13:39.400 --> 00:13:41.790
I hope it's pretty clear and not confusing.

245
00:13:41.830 --> 00:13:42.850
Let's keep going.

246
00:13:42.850 --> 00:13:45.950
This is one that I wanted to print for example all the elements within the list.

247
00:13:45.970 --> 00:13:49.490
You can do that in print or in parentheses.

248
00:13:49.490 --> 00:13:55.840
See my list and what we could do we're going to say open square brackets and just put two columns in

249
00:13:55.840 --> 00:14:01.720
there two columns here and means OK just bring demanding all the elements around it that would bring

250
00:14:01.740 --> 00:14:04.460
me all the elements that they have within my list.

251
00:14:04.730 --> 00:14:05.110
All right.

252
00:14:05.110 --> 00:14:06.360
Great.

253
00:14:06.730 --> 00:14:12.840
What if I wanted to for example o'keane let's say the elements starting from for example this element

254
00:14:13.420 --> 00:14:21.730
and moving on just you know all the list I need 5 7 8 10 and 15 and all like all elements I can do that

255
00:14:21.750 --> 00:14:29.590
by seeing okay print right thing and specify my list my list open square brackets and I could say I

256
00:14:29.590 --> 00:14:30.310
need the element.

257
00:14:30.310 --> 00:14:32.890
This is elliman 0 1 2.

258
00:14:33.070 --> 00:14:33.940
Right.

259
00:14:33.940 --> 00:14:40.100
Let's assume there is say okay okay I'm going to do let's say elements starting from 3 and then C column

260
00:14:40.410 --> 00:14:46.570
a column that mean any element starting from number 3 and moving on all of it all in our list of right.

261
00:14:46.600 --> 00:14:54.290
It then will come up with the element 7 8 10 and 15 again use in the 0 1 2 and 3.

262
00:14:54.290 --> 00:14:56.240
So you started from the element number to 3.

263
00:14:56.590 --> 00:14:57.640
And moving on.

264
00:14:57.650 --> 00:14:58.520
And that's why we're pleased.

265
00:14:58.540 --> 00:15:05.170
All these elements hit 7 8 10 and 15 the last one that I wanted to discuss is how can we all clean the

266
00:15:05.170 --> 00:15:09.750
length of the list which is how many elements are contained within the list.

267
00:15:09.820 --> 00:15:19.110
You can do that by say print my list open and you're going to say I wanted for example if I little pin

268
00:15:19.180 --> 00:15:23.120
elements within the list if I wanted to get the length of the list I actually don't need to do this

269
00:15:23.120 --> 00:15:24.640
are just going to see any more of this.

270
00:15:24.650 --> 00:15:30.070
And I think I need the lens which is a function to obtain the lens of my list.

271
00:15:30.110 --> 00:15:32.530
I think I should printed on the screen.

272
00:15:32.770 --> 00:15:37.480
I'm sorry here I just need to add another brackets were fed on that that will give me number 7 which

273
00:15:37.480 --> 00:15:44.150
is the number of elements contained within the list which is 1 2 3 4 5 6 and 7 7 elements.

274
00:15:44.200 --> 00:15:45.640
There's a number of elements by using them.

275
00:15:45.640 --> 00:15:49.630
The use of function that's right and that's pretty much what I have for this lecture.

276
00:15:49.630 --> 00:15:52.800
I hope you guys enjoyed it and see you in the next election.
