WEBVTT
1
00:00:02.340 --> 00:00:05.390
Hello everyone and welcome to this lecture this lecture.

2
00:00:05.430 --> 00:00:10.880
We're going to cover the strings and just a quick introduction to strings.

3
00:00:10.890 --> 00:00:14.580
We're going to be using again extensively into the practical section of this course.

4
00:00:14.910 --> 00:00:19.980
And we're going to again have tons of exercises right after we introduce the concept.

5
00:00:19.980 --> 00:00:26.100
So here I want you to open just three a concept strings he just added like filming because he don't

6
00:00:26.100 --> 00:00:26.980
have any commands.

7
00:00:27.000 --> 00:00:29.200
But he should see the filming.

8
00:00:29.340 --> 00:00:30.500
Merely common here.

9
00:00:30.510 --> 00:00:35.010
You should find see a concept sings just to open the show put it in a book and I'm going to walk you

10
00:00:35.010 --> 00:00:36.270
through it step by step.

11
00:00:36.360 --> 00:00:36.890
OK.

12
00:00:37.380 --> 00:00:39.980
So first of first of all what do we mean by string.

13
00:00:40.170 --> 00:00:43.320
So we sing in Python is simply a sequence of characters.

14
00:00:43.320 --> 00:00:48.780
So if I wanted to let's say print for example let's say hello world for instance.

15
00:00:48.870 --> 00:00:54.590
All these scenes of characters that we print on the screen we call the mystery which is kind of a datatype.

16
00:00:54.660 --> 00:00:57.420
So now we know what they mean by integer which is just a number.

17
00:00:57.600 --> 00:01:01.560
If we have a float that means you know a number with a decimal value in it.

18
00:01:01.750 --> 00:01:04.480
Okay with a fraction there element in it and its.

19
00:01:04.970 --> 00:01:06.780
And we know that right now is when stinks.

20
00:01:06.790 --> 00:01:08.990
OK let's take it a quick quick example.

21
00:01:09.030 --> 00:01:12.730
You know what I find a very cold I'm going to call y equal for example.

22
00:01:12.840 --> 00:01:15.600
Hello world.

23
00:01:15.600 --> 00:01:15.940
All right.

24
00:01:16.040 --> 00:01:21.600
And if I done that and if I want to view why again shift into their own hand or world.

25
00:01:21.600 --> 00:01:25.430
If I said Okay show me the type of why I know that.

26
00:01:25.550 --> 00:01:27.000
Now any Actually there was a string.

27
00:01:27.030 --> 00:01:27.260
OK.

28
00:01:27.280 --> 00:01:28.110
Which makes sense.

29
00:01:28.110 --> 00:01:28.740
All right.

30
00:01:29.190 --> 00:01:29.900
Okay.

31
00:01:29.910 --> 00:01:35.940
So what we could do on the strings let's assume that I wanted for example to let's say the first name

32
00:01:35.970 --> 00:01:39.680
defined last name and I wanted for example to print the full name.

33
00:01:39.690 --> 00:01:45.600
Let's see how can we concatenate two strings when I say OK on catinat that mean to putting two strings

34
00:01:45.600 --> 00:01:47.340
together you know next to each other.

35
00:01:47.340 --> 00:01:48.360
Let's take a look.

36
00:01:48.700 --> 00:01:53.660
So going the final four available at air quality first on this code name and I'm going to call it whatever

37
00:01:53.690 --> 00:01:54.850
Mitch for example.

38
00:01:55.700 --> 00:02:02.150
And then I'm going to define last underscored name and thing he would again call it let's say whatever

39
00:02:02.150 --> 00:02:06.650
Steve for example and then I'm going to find the full name.

40
00:02:06.890 --> 00:02:12.880
OK full underscored mean equal to what I'm going to do when I say Kate's first underscored name.

41
00:02:13.070 --> 00:02:13.800
OK.

42
00:02:14.150 --> 00:02:15.430
Plus.

43
00:02:15.430 --> 00:02:16.600
All right.

44
00:02:17.000 --> 00:02:17.880
And then I'm going right.

45
00:02:17.900 --> 00:02:19.890
Let's say last under scrutiny.

46
00:02:19.970 --> 00:02:22.560
Let's take a look what's going to happen I say plus OK.

47
00:02:22.630 --> 00:02:22.890
You.

48
00:02:22.910 --> 00:02:26.450
Plus he is and we're fine basically these two very with this ching's.

49
00:02:26.540 --> 00:02:32.210
That means you're asking Python to just kind of do concatenation to each other which means putting the

50
00:02:32.210 --> 00:02:33.960
two strings next to each other.

51
00:02:34.250 --> 00:02:36.580
And if we don't that's okay.

52
00:02:36.620 --> 00:02:43.340
And if we simply view full underscored name on that then you would find that there is much Steve basically

53
00:02:43.340 --> 00:02:46.810
kind of you know like lect link to each other with no spacing between.

54
00:02:47.080 --> 00:02:47.690
All right.

55
00:02:47.720 --> 00:02:50.990
What if he wanted to let's say create a space you what you could do.

56
00:02:51.030 --> 00:02:52.840
They can actually put a space here.

57
00:02:53.060 --> 00:02:56.420
So if you're on it and read it again then you find there is a space.

58
00:02:56.450 --> 00:03:01.910
That's just one way of doing it the other way of doing it is that if you wanted to give this TV like

59
00:03:01.910 --> 00:03:06.340
this what you could do then you can add or create your own string in here.

60
00:03:06.590 --> 00:03:12.470
You can add the plus and then you can add kind of you know courtsey and create Espy's kind of you know

61
00:03:12.470 --> 00:03:14.950
one artificial kind of space in between.

62
00:03:15.020 --> 00:03:18.810
If you're on there that then you will find that there is much Steve here.

63
00:03:19.270 --> 00:03:19.860
Right.

64
00:03:20.290 --> 00:03:21.160
Okay great.

65
00:03:21.410 --> 00:03:23.620
That's pretty much you know how can you define a string.

66
00:03:23.690 --> 00:03:28.130
Let's say How can you if you want to let's say print a string you could do and say print.

67
00:03:28.220 --> 00:03:32.130
And then you open and then you pass along your full name in here.

68
00:03:32.540 --> 00:03:37.190
When you're on that then you would find there's Mitch Steve and there no Colts because that's the actual

69
00:03:37.190 --> 00:03:38.280
message or text.

70
00:03:38.420 --> 00:03:43.220
They want it to be printed on the screen or a perfect book.

71
00:03:43.400 --> 00:03:45.320
What other stuff that we could do on a street.

72
00:03:45.320 --> 00:03:47.520
So what we could do can do tons of stuff on the scene.

73
00:03:47.570 --> 00:03:53.360
Obviously here in this election I want to be able to copper of the methods and all the kind of you know

74
00:03:53.360 --> 00:03:55.650
like functions that we can apply on a string.

75
00:03:55.700 --> 00:03:58.910
I'm just going to cover a couple of methods that are going to be useful for us.

76
00:03:59.270 --> 00:04:04.400
Let's assume that if we wanted to take let's say fool me that we had here and turn it all to uppercase

77
00:04:04.520 --> 00:04:09.620
For example instead of having Mitch just called Steve for example a lower case we're going to make it

78
00:04:09.680 --> 00:04:13.780
all uppercase or a capital letters to basically how can we do that.

79
00:04:14.000 --> 00:04:16.600
Well we could do it though can take whatever variable.

80
00:04:16.700 --> 00:04:24.440
OK so let's say take the exact same name which is full underscored underscored any and then you basically

81
00:04:24.440 --> 00:04:25.610
do dot.

82
00:04:25.850 --> 00:04:28.760
And then you specify which is kind of up like we do dot.

83
00:04:28.790 --> 00:04:31.130
That means you're applying a method OK.

84
00:04:31.460 --> 00:04:34.560
When you say he now again apply a method called Upper.

85
00:04:34.790 --> 00:04:35.220
Okay.

86
00:04:35.240 --> 00:04:39.330
Any open brackets and just leave open parentheses just leave it like this gape.

87
00:04:39.590 --> 00:04:46.100
Then you are asking simply to take the full name and apply a method called Upper on that variable on

88
00:04:46.100 --> 00:04:47.820
that full name variable.

89
00:04:48.080 --> 00:04:52.340
Again we're going to cover dozens of like you know like methods and object oriented programming moving

90
00:04:52.340 --> 00:04:53.010
forward.

91
00:04:53.150 --> 00:04:54.780
But he of this is just a quick ordeal.

92
00:04:54.800 --> 00:04:59.720
When we do that then you'll find there's much Steve becomes uppercase.

93
00:05:00.620 --> 00:05:04.000
The next example though going to do the next method I'm going to do.

94
00:05:04.180 --> 00:05:05.310
Let's split.

95
00:05:05.390 --> 00:05:12.560
Okay let's stick full name again full name and apply a method called splits swing as a dart and say

96
00:05:12.560 --> 00:05:17.990
splits and then open again parentheses empty parenthesis.

97
00:05:18.110 --> 00:05:22.300
If you're on that you will find basically that read what you've got.

98
00:05:22.420 --> 00:05:26.480
You have uart kind of kind of a with square brackets here.

99
00:05:26.590 --> 00:05:31.420
OK and then there is the first name on its own comma and then there's last name on it's on.

100
00:05:31.670 --> 00:05:38.570
What happened here is that you simply apply a split method on the full name which is simply taking the

101
00:05:38.570 --> 00:05:41.920
entire string and turning it into seeders of words.

102
00:05:42.110 --> 00:05:44.050
So that's why you're playing Mitch on its own.

103
00:05:44.060 --> 00:05:45.460
And then Steve on its own.

104
00:05:45.890 --> 00:05:47.230
And it's your turn here.

105
00:05:47.240 --> 00:05:49.480
As what we call it list.

106
00:05:49.550 --> 00:05:49.820
OK.

107
00:05:49.850 --> 00:05:51.420
I did uncover a list so far.

108
00:05:51.530 --> 00:05:57.200
But think of a list as kind of you know is seeders of numbers or a series of strings so queer that as

109
00:05:57.290 --> 00:06:01.750
it lists a full list like a shopping list you know your ad for example we're going to buy.

110
00:06:01.750 --> 00:06:07.790
Let's say you know like I don't know like like pence for example along with shoes along with a mix of

111
00:06:07.790 --> 00:06:14.180
stuff he can do with the same so he can list of any of this stuff or the words and they are separated

112
00:06:14.180 --> 00:06:16.140
by a comma in here OK.

113
00:06:16.820 --> 00:06:22.340
Actually if you're going to do this let's say in a call it for example my underscored list for instance

114
00:06:22.760 --> 00:06:29.000
and if I did that and if I wanted to view my own lists if I were on it they're going to come up with

115
00:06:29.000 --> 00:06:29.850
these.

116
00:06:29.900 --> 00:06:37.010
If you check the data type or in a C type key bracket parentheses are going to take the type of my list.

117
00:06:37.010 --> 00:06:42.110
If I'm that then you'll come up with the data type that's called list which means again it's kind of

118
00:06:42.110 --> 00:06:43.870
a it's not a string.

119
00:06:44.000 --> 00:06:50.630
It is not an integer is not a float but it's actually a list which is not a mix of stuff in their lists.

120
00:06:50.630 --> 00:06:53.080
You know I kind of think of it as an error rate as well.

121
00:06:53.300 --> 00:06:54.080
Right.

122
00:06:54.710 --> 00:06:55.410
OK.

123
00:06:55.970 --> 00:06:56.620
OK.

124
00:06:56.810 --> 00:06:58.480
So let's take a look at another example.

125
00:06:58.520 --> 00:07:00.620
Let's assume that you won it like you know for example.

126
00:07:00.680 --> 00:07:05.500
Let's have some a couple of cells and let's assume that in wanted to for example find like a very worthwhile

127
00:07:05.590 --> 00:07:12.790
equals to an e-mail for instance and say Okay Mitch Okay so let's open the records Mitch and let's assume

128
00:07:12.830 --> 00:07:19.030
for example Steve at g mail dot com which is an email.

129
00:07:19.520 --> 00:07:27.320
And what I would do here is that it can actually split my meistersinger in here.

130
00:07:27.410 --> 00:07:28.360
OK.

131
00:07:28.910 --> 00:07:31.740
He split the string into different seeders of words.

132
00:07:31.760 --> 00:07:31.980
OK.

133
00:07:32.000 --> 00:07:34.630
Because he would have words separated by space.

134
00:07:34.670 --> 00:07:38.870
I can actually use a split as well method but I can specify where I need to split.

135
00:07:38.870 --> 00:07:40.250
Let's assume they wanted to split.

136
00:07:40.250 --> 00:07:42.910
For example my string here based on the ET.

137
00:07:42.910 --> 00:07:44.940
So at the end I need to split it.

138
00:07:44.990 --> 00:07:45.560
Let's do that.

139
00:07:45.560 --> 00:07:49.110
Let's say can we do it the same case Z equals 2.

140
00:07:49.390 --> 00:07:49.780
OK.

141
00:07:49.810 --> 00:07:50.240
Why.

142
00:07:50.240 --> 00:07:52.060
Which is my variable k.

143
00:07:52.240 --> 00:07:57.350
I think I'll apply the method method but split open parentheses.

144
00:07:57.560 --> 00:07:58.380
I'm going to do here.

145
00:07:58.430 --> 00:07:59.780
I'm going to pass along.

146
00:08:00.050 --> 00:08:01.750
Simply what I wanted to split.

147
00:08:01.760 --> 00:08:06.850
If you leave it empty then it would be split based on the spaces on the different words.

148
00:08:06.920 --> 00:08:11.440
If I just do you know look at it that means I wanted to split it at the set.

149
00:08:11.480 --> 00:08:11.880
OK.

150
00:08:11.960 --> 00:08:16.670
OK let's run that and let's run this and let's take a look at Z.

151
00:08:16.670 --> 00:08:17.520
What happened with it.

152
00:08:17.540 --> 00:08:21.800
So actually you can come here with Mitch of Steve which is kind of you know your user name or you have

153
00:08:21.810 --> 00:08:27.470
here and then you separate the two the name and then it and then you find g.m. Dot Com separated here

154
00:08:27.500 --> 00:08:29.570
again Z as well is a list.

155
00:08:29.660 --> 00:08:34.360
So if you get again what's the type of Z.

156
00:08:34.370 --> 00:08:38.190
If you're on it then you come up with a list which is simply huge the elements that we have here.

157
00:08:38.300 --> 00:08:39.190
Okay.

158
00:08:39.360 --> 00:08:44.930
Well what I want is for example doping let's say the first element within the list or the last element

159
00:08:44.930 --> 00:08:46.000
within the list let's see.

160
00:08:46.030 --> 00:08:49.670
It to in Mitch stiefel example or let's see the g.m. on its own.

161
00:08:49.860 --> 00:08:53.570
Again we're going to cover that extensively recover lists in the future.

162
00:08:53.750 --> 00:08:57.860
But here I just want to give you kind of a quick overview because we're going to use it in doing the

163
00:08:57.910 --> 00:08:58.850
exercise.

164
00:08:59.090 --> 00:08:59.980
What you could do.

165
00:08:59.980 --> 00:09:08.480
They can say okay zed's or right square brackets and say zero which means Because here have a list kind

166
00:09:08.480 --> 00:09:10.910
of you know like an array of two elements.

167
00:09:10.910 --> 00:09:15.020
I can access the first element within the list using its index.

168
00:09:15.020 --> 00:09:19.670
I'm going to say Okay I now go to the Z or pain the element that has index of zero.

169
00:09:19.670 --> 00:09:23.230
This is the element with a has index zero which is the first element.

170
00:09:23.470 --> 00:09:27.700
This is the Index the element that has index of one and so on so forth.

171
00:09:27.710 --> 00:09:33.800
So a list starts with an index of 0 1 2 3 4 and so on and so forth.

172
00:09:33.800 --> 00:09:40.050
So if they say okay Z squared backwards zero in on that then you'll come up with mitchard Looks.

173
00:09:41.280 --> 00:09:41.620
Alright.

174
00:09:41.630 --> 00:09:46.110
What if I wanted for example to say okay Z for instance one font on it.

175
00:09:46.220 --> 00:09:49.430
Then you come up with the second element which is you know g mail dot com.

176
00:09:49.460 --> 00:09:53.010
Again we're going to do that again extensively on a recovery list.

177
00:09:53.020 --> 00:09:58.910
He this is just a quick overview of how to perform a string and how to apply different methods on a

178
00:09:58.910 --> 00:09:59.330
string.

179
00:09:59.450 --> 00:10:00.770
Let's recap.

180
00:10:00.770 --> 00:10:03.020
So now we know how can we define a string.

181
00:10:03.020 --> 00:10:07.490
How can we apply it type of searching and unclear which are going to get come up with S T R B C is a

182
00:10:07.490 --> 00:10:08.570
data type.

183
00:10:08.600 --> 00:10:14.270
How can we perform string concatenation which is simply just ad Plus as if you are adding for example

184
00:10:14.270 --> 00:10:16.280
strings next to each other.

185
00:10:16.280 --> 00:10:18.930
How can we get the upper case using opposite method.

186
00:10:18.950 --> 00:10:25.000
How can we split the string using the split method and how can we split as well.

187
00:10:25.000 --> 00:10:28.610
Based on a specific element you know it at for example.

188
00:10:28.610 --> 00:10:35.750
And then he said how can we simply access the different elements within the list by coming up with you

189
00:10:35.750 --> 00:10:41.240
know the first name or last name using indexing said 0 for the first element and one for the second

190
00:10:41.240 --> 00:10:42.490
element.

191
00:10:42.830 --> 00:10:46.660
And now you're getting closer to mastering Python.

192
00:10:46.670 --> 00:10:50.000
I hope you guys enjoyed this section and see you in the next section.
