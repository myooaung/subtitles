1
00:00:02,170 --> 00:00:05,610
Hello everyone and welcome to this lecture and this lecture.

2
00:00:05,650 --> 00:00:11,070
We're going to dig a little bit deeper in to our confusion the network that we discussed in the past.

3
00:00:11,170 --> 00:00:16,110
I'm going to kind of get more details about each individual later.

4
00:00:16,260 --> 00:00:16,870
OK.

5
00:00:17,230 --> 00:00:22,490
So the first layer if you a call that we had the feature detector or kernel layers.

6
00:00:23,460 --> 00:00:25,020
What do you mean by this.

7
00:00:25,080 --> 00:00:33,240
So simply put we take our image and we feed that image to certain filters or call kernels or feature

8
00:00:33,240 --> 00:00:34,010
detectors.

9
00:00:34,110 --> 00:00:34,940
OK.

10
00:00:35,250 --> 00:00:40,090
So when we say when we see kernels or feet say feature detectors what happens.

11
00:00:40,110 --> 00:00:41,830
Think of it as kind of a filter.

12
00:00:41,950 --> 00:00:42,260
Okay.

13
00:00:42,270 --> 00:00:50,850
And that filter goes it here and scan the entire image and apply specific kind of a feature detect detection

14
00:00:50,910 --> 00:00:54,380
algorithm to extract information out of this image.

15
00:00:54,410 --> 00:00:54,990
OK.

16
00:00:55,260 --> 00:01:00,810
And what happens is once we apply these feature detectors we appeal one quality feature the maps think

17
00:01:00,810 --> 00:01:06,480
of feature maps as kind of you know different variations of this image so this image is kind of divided

18
00:01:06,810 --> 00:01:10,310
into certain you know like series of images we'll call it feature maps.

19
00:01:10,650 --> 00:01:13,590
Let's take a look at the feature detector in action.

20
00:01:13,980 --> 00:01:16,550
Let's assume that here we have our image OK.

21
00:01:16,590 --> 00:01:22,440
Which again if you have it a member any image is just a bunch of numbers that change from zero to two

22
00:01:22,440 --> 00:01:23,910
hundred and fifty five.

23
00:01:24,070 --> 00:01:30,140
And let's assume that in this case our image contains a bunch of zeros and ones.

24
00:01:30,270 --> 00:01:34,640
What we do here is that we're going to we're going to assume that this is our input image.

25
00:01:34,800 --> 00:01:36,940
And here we have our feature detectors.

26
00:01:37,030 --> 00:01:37,580
OK.

27
00:01:37,800 --> 00:01:39,270
Which is simply you back.

28
00:01:39,270 --> 00:01:41,730
That's our feature detector in our kernel.

29
00:01:42,120 --> 00:01:47,800
Our kernel is again in Matrix 3 by C Matrix has a bunch of zeros and ones.

30
00:01:48,270 --> 00:01:54,390
And what we could do would what happen when the convolution on networks is that we apply this feature

31
00:01:54,390 --> 00:01:56,520
detector on our image.

32
00:01:56,610 --> 00:01:56,820
OK.

33
00:01:56,850 --> 00:01:58,270
Let's see how can we apply it.

34
00:01:58,620 --> 00:02:02,480
So first we place our feature detector here on this image here.

35
00:02:02,760 --> 00:02:06,240
And then what we do with that we multiply each of the pixels.

36
00:02:06,270 --> 00:02:08,400
This is simply see by the pixels.

37
00:02:08,450 --> 00:02:13,950
Here we have to see Basically as well and multiply We simply like apply the convolution.

38
00:02:13,950 --> 00:02:22,270
What do you mean we multiply one basia that will generate 0 0 by one woman and it is 0 0 by one widget

39
00:02:22,270 --> 00:02:26,700
in zero and so on and then we sum up all the results of all of this.

40
00:02:26,930 --> 00:02:27,560
Okay.

41
00:02:27,930 --> 00:02:29,060
Let's see how can we do this.

42
00:02:29,070 --> 00:02:36,220
So simply if we multiply all these pixels by all these values in here and some the opposite that would

43
00:02:36,230 --> 00:02:38,550
generate a value of 1 or a.

44
00:02:38,790 --> 00:02:39,580
Why.

45
00:02:39,600 --> 00:02:48,270
Because simply put all these values originated as zero here zero times 1g is 0 1 0 0 0 times literally

46
00:02:48,330 --> 00:02:54,150
Lokey zero times 1 0 and then Hume 1 times 1.

47
00:02:54,150 --> 00:02:59,760
That's the only value that's used to this once we miss some of the values here which is all of them

48
00:02:59,760 --> 00:03:01,820
are zeros and one.

49
00:03:01,900 --> 00:03:03,040
Some of them are these.

50
00:03:03,110 --> 00:03:05,690
The outcome will going to be one or a gate.

51
00:03:06,130 --> 00:03:13,590
And what we do afterwards is that we move out of feature detector to the right a little bit OK and then

52
00:03:13,590 --> 00:03:18,990
we apply the exact same method again so we multiply all this by this.

53
00:03:18,990 --> 00:03:21,230
Some of them up in the value of one.

54
00:03:21,560 --> 00:03:21,850
OK.

55
00:03:21,870 --> 00:03:27,450
Let's shift it again once we shift it again we multiply again all this by why all this will gaoth the

56
00:03:27,450 --> 00:03:31,140
value of one and then we move down to here.

57
00:03:31,410 --> 00:03:32,270
And then we multiply.

58
00:03:32,290 --> 00:03:33,460
Let's do this actually.

59
00:03:33,750 --> 00:03:39,180
So here we have 1 claims 1 8 1 0 times 0 0 0 times it.

60
00:03:39,240 --> 00:03:40,340
Okay.

61
00:03:40,350 --> 00:03:43,010
Here we have zero times zero is zero one.

62
00:03:43,090 --> 00:03:44,130
Times are one.

63
00:03:44,170 --> 00:03:45,560
That's my second one right there.

64
00:03:45,630 --> 00:03:48,870
All we have to now zero times you know as you know.

65
00:03:49,050 --> 00:03:52,970
And then we have zero time zero zero one thomes one is one.

66
00:03:53,070 --> 00:03:56,670
That's my third one and then zero times one is zero.

67
00:03:56,700 --> 00:04:03,930
That's why when we apply the feature detector on our image we actually need the value of three.

68
00:04:03,990 --> 00:04:04,920
Let's keep going.

69
00:04:04,920 --> 00:04:09,210
And once we do that once we move the colonel wants to move the feature detector over the entire image

70
00:04:09,460 --> 00:04:14,990
we come up with this feature map which is simply put this feature map.

71
00:04:15,000 --> 00:04:19,010
It's kind of really kind of a reduced form Okay kind of a condensed.

72
00:04:19,010 --> 00:04:23,830
Think of it as kind of the zip file kind of a condensed information out of our image.

73
00:04:23,830 --> 00:04:30,770
So this image will apply to our future detective here has been condensed to become this feature map.

74
00:04:30,810 --> 00:04:31,380
All right.

75
00:04:31,620 --> 00:04:32,350
Okay.

76
00:04:32,630 --> 00:04:37,890
And what we do is that we don't only do this once we actually go back if we go back here you find that

77
00:04:37,890 --> 00:04:40,010
we have this seat as a feature detectors.

78
00:04:40,110 --> 00:04:41,390
So that's one feature detector.

79
00:04:41,400 --> 00:04:46,860
We have another feature detector so the second feature detectors will generate another feature map another

80
00:04:46,860 --> 00:04:51,900
feature detector was it that featured a map and then we come up with all these future maps and then

81
00:04:51,900 --> 00:04:55,910
we're going to be ready to use them moving forward to the next layer.

82
00:04:56,670 --> 00:05:03,930
OK so let's let's go ahead and read all the slides we have convolution is use a kernel Matrix dust can

83
00:05:03,960 --> 00:05:05,590
give an image or an image.

84
00:05:05,600 --> 00:05:12,630
This econometrics feature detectors and apply filters to a set in effect an image kernel is a matrix.

85
00:05:12,630 --> 00:05:16,140
You stop light effects such as blurring control trial sharpening.

86
00:05:16,140 --> 00:05:17,340
So simply put.

87
00:05:17,340 --> 00:05:21,620
Here we can use that kernel's to prit let's say perform for example blurring.

88
00:05:21,660 --> 00:05:22,780
Or for example.

89
00:05:23,210 --> 00:05:29,060
Sharpening of the image kurnos are using machine learning for feature extraction to select the most

90
00:05:29,090 --> 00:05:31,050
important pixels of the image.

91
00:05:31,250 --> 00:05:39,110
So simply put once a year when we apply our our site our colonel or our feature detector to our image

92
00:05:39,410 --> 00:05:44,090
he will paint kind of you know the most important features out of our out of our image.

93
00:05:44,090 --> 00:05:45,800
And that's one feature map.

94
00:05:46,010 --> 00:05:51,310
It's kind of again a condensed form that contains all the information that we need out of our image.

95
00:05:51,750 --> 00:05:52,770
Let's go back.

96
00:05:54,310 --> 00:05:59,710
So convolutions preserve or spatial relationship between pixels and that's actually very important very

97
00:05:59,710 --> 00:06:00,920
very important.

98
00:06:01,280 --> 00:06:01,700
Okay.

99
00:06:01,780 --> 00:06:06,970
And that's why we actually we don't feed that image directly into our traditional network in a flat

100
00:06:06,970 --> 00:06:07,850
and format.

101
00:06:08,020 --> 00:06:12,410
We have to pass it through it couldn't for luciane and layers which is our contribution you know feature

102
00:06:12,470 --> 00:06:13,220
effectively.

103
00:06:13,420 --> 00:06:14,140
Why.

104
00:06:14,140 --> 00:06:22,720
Because now simply this value for example 3 does not capture only specific pixel actually captures what's

105
00:06:22,720 --> 00:06:25,770
happening over and over all in this entire region.

106
00:06:25,810 --> 00:06:32,060
So that's why it covers all of this spatial kind of dependency between this specific pixel for instance

107
00:06:32,410 --> 00:06:34,440
and all our neighbouring pixels.

108
00:06:34,680 --> 00:06:34,890
OK.

109
00:06:34,930 --> 00:06:38,530
That's very important because you know if you want to look at the eyes for example the way I look at

110
00:06:38,530 --> 00:06:42,970
the eyes and let's say the eyebrows for example if want to look at the teeth for instance you can look

111
00:06:42,970 --> 00:06:44,470
at the neighbouring pixels too.

112
00:06:44,500 --> 00:06:45,940
And so on.

113
00:06:46,180 --> 00:06:51,910
And that's why you know we have to apply the convolution and layered first before we put the data into

114
00:06:51,910 --> 00:06:53,910
our convolution of neurone work.

115
00:06:54,230 --> 00:06:54,790
Alright.

116
00:06:55,300 --> 00:07:00,340
Let's go ahead and take a look at kind of what look like involution which is really interesting really

117
00:07:00,340 --> 00:07:02,190
powerful in that link.

118
00:07:02,350 --> 00:07:03,200
Let's go.

119
00:07:04,150 --> 00:07:04,740
All right.

120
00:07:04,800 --> 00:07:07,870
So let's take a look at convolution in action.

121
00:07:08,040 --> 00:07:08,590
OK.

122
00:07:08,940 --> 00:07:12,310
So this is pretty cool website.

123
00:07:12,380 --> 00:07:19,440
It's called a tool set of aisles less easy it's less image Col's and you can find the link in the actual

124
00:07:19,440 --> 00:07:22,800
slides and it's actually pretty really interesting.

125
00:07:22,800 --> 00:07:29,470
It shows shows you here is your image so that's pretty much an image of a like you know like a person.

126
00:07:29,580 --> 00:07:31,940
And here it would show you all the pixels in here.

127
00:07:31,940 --> 00:07:34,390
So these are the actual values of the pixels.

128
00:07:35,010 --> 00:07:38,160
So if you take a look here for example this pixel is really white.

129
00:07:38,160 --> 00:07:41,370
That's why it's umbilically about 255 of value.

130
00:07:41,400 --> 00:07:42,360
Right.

131
00:07:42,410 --> 00:07:46,710
And if we go back to this pixel for instance these are kind of very dark or very black.

132
00:07:46,710 --> 00:07:53,520
It shows let's say 29 venue which makes sense because we know that you know like if we have a certain

133
00:07:53,520 --> 00:08:02,370
image zero indicates black collar 255 indicates Wyke white collar and in between these are just different

134
00:08:02,370 --> 00:08:03,900
shades of grey.

135
00:08:03,900 --> 00:08:09,020
So if you go here for example there's kind of a little bit of grey shows like hundreds in 10 if you

136
00:08:09,040 --> 00:08:15,390
go here's hundred fifty five 255 because they're white and that's pretty much how can we interpret images

137
00:08:16,020 --> 00:08:21,390
within in a digital format within our within the computer.

138
00:08:21,750 --> 00:08:22,160
Okay.

139
00:08:22,200 --> 00:08:27,450
So now to the fun part of this actually implement kernels in and see how can we implement criminals

140
00:08:27,450 --> 00:08:28,590
in action.

141
00:08:28,680 --> 00:08:32,170
So let's assume that we for example select this specific kernel.

142
00:08:32,340 --> 00:08:38,730
Again if we when we say current or feature detector it's simply a matrix okay of let's say here had

143
00:08:38,740 --> 00:08:45,150
three by three for example we have different options for kernels we have let's say sharpening the blurring

144
00:08:45,600 --> 00:08:46,860
we have different options.

145
00:08:46,860 --> 00:08:47,650
Let's pick one.

146
00:08:47,670 --> 00:08:49,270
So let's let's say sharpening.

147
00:08:49,610 --> 00:08:49,860
Okay.

148
00:08:49,890 --> 00:08:54,440
So zero minus one zero minus one five minus one zero minus one and zero.

149
00:08:54,780 --> 00:08:59,750
And actually what we could do here is we can actually implement convolution in action.

150
00:08:59,940 --> 00:09:01,920
It's really really amazing.

151
00:09:02,070 --> 00:09:10,020
So here that read a three by three That's our kernel or our featured text with place of feature detectors

152
00:09:10,030 --> 00:09:11,220
here in the corner.

153
00:09:11,460 --> 00:09:12,090
OK.

154
00:09:12,390 --> 00:09:13,950
We can then apply the convolutions.

155
00:09:13,950 --> 00:09:19,170
So if you can see here it's more of the mouse so you guys can you know kind of you know try to interpret

156
00:09:19,170 --> 00:09:19,790
what I'm seeing.

157
00:09:19,860 --> 00:09:22,340
I'm talking about this base of these values in here.

158
00:09:22,640 --> 00:09:22,870
OK.

159
00:09:22,890 --> 00:09:29,320
So if I put my kernel here in my in the corner you would find that there is 206.

160
00:09:29,330 --> 00:09:35,150
These are the value of the pixels the actual pixels to a 6 to 5 to 4 7 to the first row.

161
00:09:35,580 --> 00:09:42,900
And then 2 4 2 4 4 1 6 1 1 3 7 there's a second the actual value of the pixels and the multiplication.

162
00:09:42,910 --> 00:09:49,260
Here are the actual values of the kernel of our feature detectors which is what sharpening feature detector

163
00:09:49,920 --> 00:09:55,060
zeo Minus 1 0 minus 1 5 minus 1 0 minus 1 0.

164
00:09:55,530 --> 00:09:59,290
And what happened is he and we just multiply basically the two.

165
00:09:59,520 --> 00:10:04,890
And some of them up so we come up with this value which is you know in this case was let's say 65 for

166
00:10:04,890 --> 00:10:10,070
example and then value will get to be translated in here to the right hand side.

167
00:10:10,530 --> 00:10:13,720
In that basically opaque image.

168
00:10:14,010 --> 00:10:18,720
So here on the left hand side that's the input image he was using our colonel.

169
00:10:18,790 --> 00:10:21,680
This is our mathematical operations and here's the output.

170
00:10:21,720 --> 00:10:27,420
So if we put the kernel here on the left hand side if we do the maths multiply them together some of

171
00:10:27,420 --> 00:10:32,880
them up become 65 that will be translated to the output and then we shift the chrono to the right a

172
00:10:32,880 --> 00:10:38,960
little bit do the exact same maths we'll come up with minus 42 and then go be transitively upward.

173
00:10:39,150 --> 00:10:42,880
We keep shifting shifting shifting to the right as we move forward.

174
00:10:43,140 --> 00:10:44,460
And then we go down here.

175
00:10:44,520 --> 00:10:50,850
We keep shifting to the right to forward and we basically scan the entire image and that's the power

176
00:10:50,850 --> 00:10:53,890
of convolutions or it's what's that what happened.

177
00:10:53,910 --> 00:10:57,480
You know it's amazing because now we actually use the input image.

178
00:10:57,570 --> 00:11:01,200
You applied your feature detector and you come up with the output image.

179
00:11:01,200 --> 00:11:05,250
If you take a look at the output image you would find that the output image is kind of feel a little

180
00:11:05,250 --> 00:11:08,510
bit sharpened compared to the input image which is really powerful.

181
00:11:08,890 --> 00:11:12,090
Okay let's take a look at for example another feature detector.

182
00:11:12,570 --> 00:11:14,700
Let's assume it's blurring for example.

183
00:11:15,000 --> 00:11:15,380
OK.

184
00:11:15,510 --> 00:11:20,370
If we do the maths again we're going to scan again our colonel you'll find that the images have been

185
00:11:20,370 --> 00:11:23,500
blurred which is really interesting or exciting too as well.

186
00:11:23,600 --> 00:11:24,130
OK.

187
00:11:24,570 --> 00:11:29,790
It's kind of like if you take a look at the on the actual blurting it looks like you're not in the average

188
00:11:29,790 --> 00:11:31,150
for all the value of the pixels.

189
00:11:31,150 --> 00:11:34,090
And that's why you're kind of you know blurring the image in here.

190
00:11:34,440 --> 00:11:38,640
Obviously there are hundreds you know there are tons of kernels in here and that's pretty much how can

191
00:11:38,640 --> 00:11:45,360
you apply for example filters Instagram filters or you know like Snapchat filters or whatever.

192
00:11:45,510 --> 00:11:47,370
It's pretty much the same idea.

193
00:11:47,380 --> 00:11:48,470
Have you input image.

194
00:11:48,470 --> 00:11:53,590
You are place specific kernel to it or you know a feature detector and you come up with the output image.

195
00:11:53,940 --> 00:12:00,330
But in our exercise in our example we're going to use that output image which is our kind of feature

196
00:12:00,360 --> 00:12:03,460
maps to actually feeded within our network.

197
00:12:03,550 --> 00:12:06,370
The beauty or the power of convolution and neuro network.

198
00:12:06,810 --> 00:12:13,880
We do the convolution layer first and then we take that output we feed it afterwards to our next pulling

199
00:12:13,890 --> 00:12:15,030
layers on.

200
00:12:15,030 --> 00:12:20,850
Afterwards we had some of that northern sections but that's pretty much of the overall overall idea.

201
00:12:20,940 --> 00:12:26,700
How can we all paint or perform convolutions before we actually run our fission unit.

202
00:12:27,070 --> 00:12:27,860
All right.

203
00:12:27,960 --> 00:12:29,670
And there's been much with this lecture.

204
00:12:29,700 --> 00:12:32,620
I hope you guys enjoyed it and see you in the next lecture.
