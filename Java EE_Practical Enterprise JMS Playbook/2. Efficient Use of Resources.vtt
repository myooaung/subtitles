WEBVTT
1
00:00:01.670 --> 00:00:03.866
When working a scale, we need to consider resources,

2
00:00:03.866 --> 00:00:07.295
and that can mean a lot of different things,

3
00:00:07.295 --> 00:00:10.200
including memory, processing power, disk space,

4
00:00:10.200 --> 00:00:12.085
network packets, threads, etc.

5
00:00:12.085 --> 00:00:14.647
We want our applications to work efficiently,

6
00:00:14.647 --> 00:00:17.103
so with JMS, we need to consider a few things.

7
00:00:17.103 --> 00:00:20.716
First off, caching of resources, and by that I mean connection,

8
00:00:20.716 --> 00:00:22.214
sessions, consumers, and producers.

9
00:00:22.214 --> 00:00:26.788
If every time we want to send a message or consume a message,

10
00:00:26.788 --> 00:00:29.127
we create a new connection session, consumer,

11
00:00:29.127 --> 00:00:34.116
or producer, then that takes time, and also requires more network hits.

12
00:00:34.116 --> 00:00:38.657
It's far better to reuse a single connection and maintain a number of sessions.

13
00:00:38.657 --> 00:00:40.610
You can always reuse a session.

14
00:00:40.610 --> 00:00:43.874
A producer can be used to send many messages.

15
00:00:43.874 --> 00:00:47.434
In a similar way, a consumer can consume many messages.

16
00:00:47.434 --> 00:00:51.654
If applicable though, you do need to consider transactional boundaries.

17
00:00:51.654 --> 00:00:52.924
At the most basic level,

18
00:00:52.924 --> 00:00:56.449
caching a connection or session is simply a case of using a member

19
00:00:56.449 --> 00:00:59.156
variable and assigning it when only really required,

20
00:00:59.156 --> 00:01:02.866
a similar approach for session, etc.

21
00:01:02.866 --> 00:01:05.349
If you look at this example piece of code,

22
00:01:05.349 --> 00:01:09.424
you'll notice that I'm using member variables to store and use the connection.

23
00:01:09.424 --> 00:01:13.142
I advise that you do the same or something similar.

24
00:01:13.142 --> 00:01:15.985
You may also want to consider using libraries such as the Apache

25
00:01:15.985 --> 00:01:19.265
Commons Pool library for pooling resources.

26
00:01:19.265 --> 00:01:20.568
If you do so,

27
00:01:20.568 --> 00:01:27.000
make sure you correctly free up resources when returning the resources to the pool.

