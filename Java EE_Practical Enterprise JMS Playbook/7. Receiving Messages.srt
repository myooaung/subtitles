1
00:00:02,607 --> 00:00:05,788
Receiving a message in a JEE environment is also a fairly

2
00:00:05,788 --> 00:00:08,335
trivial affair when using message-driven Beans.

3
00:00:08,335 --> 00:00:11,882
Here is a typical example of an EJB 3.

4
00:00:11,882 --> 00:00:13,065
1 message-driven Bean.

5
00:00:13,065 --> 00:00:16,770
Firstly, my Bean is annotated with a MessageDriven annotation,

6
00:00:16,770 --> 00:00:18,265
which takes a number of configuration properties.

7
00:00:18,265 --> 00:00:21,921
There are a number of predefined ones in the specification

8
00:00:21,921 --> 00:00:23,083
like destinationType and messageSelector,

9
00:00:23,083 --> 00:00:26,004
but one that is missing is how to define the

10
00:00:26,004 --> 00:00:28,400
destination the Bean should consume from.

11
00:00:28,400 --> 00:00:33,388
This led to implementation-specific versions that weren't consistent,

12
00:00:33,388 --> 00:00:35,706
and luckily they fixed this in the EJB 3.

13
00:00:35,706 --> 00:00:38,251
2 specification, which is part of JEE 7,

14
00:00:38,251 --> 00:00:41,656
so there is now a standard property used called destinationLookup,

15
00:00:41,656 --> 00:00:45,473
which will look up the provided JNDI name for the destination

16
00:00:45,473 --> 00:00:47,850
from which the Bean should consume messages.

17
00:00:47,850 --> 00:00:51,759
So for the most part, once you've declared the class level annotations,

18
00:00:51,759 --> 00:00:54,744
the class is a fairly standard JMS messageListener implementation

19
00:00:54,744 --> 00:00:58,879
that could well run outside of a JEE container.

20
00:00:58,879 --> 00:01:00,550
We have seen a number of examples of these

21
00:01:00,550 --> 00:01:01,832
messageListeners already in this course,

22
00:01:01,832 --> 00:01:04,006
so I won't cover them again.

23
00:01:04,006 --> 00:01:05,503
The only comment I will make, however,

24
00:01:05,503 --> 00:01:09,305
is that these are considered Beans within the JEE container,

25
00:01:09,305 --> 00:01:11,374
therefore, there is a pool of them,

26
00:01:11,374 --> 00:01:15,131
and that pool size can be controlled via your JEE administration console.

27
00:01:15,131 --> 00:01:17,990
What this ultimately means is that the number of available

28
00:01:17,990 --> 00:01:21,861
consumers from the queue is based on this pool size.

29
00:01:21,861 --> 00:01:28,000
This is how you control the throughput of the messages through your JEE application.

