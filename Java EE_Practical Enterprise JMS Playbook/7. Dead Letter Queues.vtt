WEBVTT
1
00:00:02.222 --> 00:00:07.079
Sometimes we need to use JMS to perform request/response type operations.

2
00:00:07.079 --> 00:00:10.021
As an example, as part of rendering a web page using JSPs,

3
00:00:10.021 --> 00:00:11.719
you need to get some data.

4
00:00:11.719 --> 00:00:14.929
That data is retrieved by placing a request message on

5
00:00:14.929 --> 00:00:17.208
a queue and waiting for a response.

6
00:00:17.208 --> 00:00:20.852
The problem here is that that JMS is asynchronous by nature,

7
00:00:20.852 --> 00:00:26.069
so you need to tie the response back to unique requests and continue processing.

8
00:00:26.069 --> 00:00:28.645
So how do we do that?

9
00:00:28.645 --> 00:00:31.518
We can use the messageSelector API.

10
00:00:31.518 --> 00:00:35.736
So in this example, I've got a method that starts a ConsumerService.

11
00:00:35.736 --> 00:00:39.804
Now this represents some piece of logic that could run in a

12
00:00:39.804 --> 00:00:41.489
totally different application or JVM,

13
00:00:41.489 --> 00:00:44.990
but basically it receives messages from a queue,

14
00:00:44.990 --> 00:00:49.440
and sends them to this CorrelationIdReplyMessageListener.

15
00:00:49.440 --> 00:00:51.070
If we look at an implementation of that,

16
00:00:51.070 --> 00:00:54.291
then it creates a response message for the request.

17
00:00:54.291 --> 00:00:58.973
It then sets the JMSCorrelationID to the same value

18
00:00:58.973 --> 00:01:01.458
as the inbound request message ID.

19
00:01:01.458 --> 00:01:06.477
Now the JMSCorrelationID isn't specific to asynchronous messaging,

20
00:01:06.477 --> 00:01:09.726
it can be used as part of asynchronous messaging to show that a number of

21
00:01:09.726 --> 00:01:13.193
messages tied together as part of the chain are processing.

22
00:01:13.193 --> 00:01:13.575
Anyway,

23
00:01:13.575 --> 00:01:17.012
we then send the response message we have created

24
00:01:17.012 --> 00:01:19.243
back on a queue called replyQueue.

25
00:01:19.243 --> 00:01:21.956
Jumping back to the main example application,

26
00:01:21.956 --> 00:01:26.295
so this block of code represents a sending

27
00:01:26.295 --> 00:01:30.403
requestMessage onto the REQUEST_QUEUE, nothing new here.

28
00:01:30.403 --> 00:01:33.610
The next part is where we call blockForMessage,

29
00:01:33.610 --> 00:01:37.070
which will effectively block the current thread of

30
00:01:37.070 --> 00:01:39.780
execution until we receive a response.

31
00:01:39.780 --> 00:01:41.827
So we register a new consumer on the replyQueue,

32
00:01:41.827 --> 00:01:46.104
but we also use a messageSelector that requests all messages that

33
00:01:46.104 --> 00:01:49.111
have a string property of the correlationID,

34
00:01:49.111 --> 00:01:52.724
which is equal to the ID of the requestMessage we've already sent.

35
00:01:52.724 --> 00:01:55.746
We can then call the receive method on the consumer,

36
00:01:55.746 --> 00:01:59.328
which will block indefinitely until we receive the response.

37
00:01:59.328 --> 00:02:01.966
When we do, we can continue processing.

38
00:02:01.966 --> 00:02:05.402
Now generally waiting indefinitely isn't a good idea,

39
00:02:05.402 --> 00:02:08.713
there is a variant of this receive method where you can specify a timeout,

40
00:02:08.713 --> 00:02:11.618
which could be an amount of time you'd be willing to

41
00:02:11.618 --> 00:02:13.743
reasonably wait for a response.

42
00:02:13.743 --> 00:02:19.526
Remember in our example, we said it might be a JSP page you're wanting to render.

43
00:02:19.526 --> 00:02:21.426
You don't want to get the customer to wait indefinitely

44
00:02:21.426 --> 00:02:23.656
without reporting some form of error.

45
00:02:23.656 --> 00:02:25.696
In fact, in this case,

46
00:02:25.696 --> 00:02:30.579
your request and response messages are only really valid for a period of time.

47
00:02:30.579 --> 00:02:33.206
So, in case something goes wrong with your system,

48
00:02:33.206 --> 00:02:35.058
and it's not responding within a reasonable amount of time,

49
00:02:35.058 --> 00:02:39.102
you should also set the messages to expire after that period of time,

50
00:02:39.102 --> 00:02:42.334
to avoid wasting resources on the message broker for

51
00:02:42.334 --> 00:02:44.972
messages that no longer need to be processed.

52
00:02:44.972 --> 00:02:46.111
So let's run this.

53
00:02:46.111 --> 00:02:47.250
The output is simple.

54
00:02:47.250 --> 00:02:55.000
You can see the message being sent and then us getting a response back for that request message.

