WEBVTT
1
00:00:00.511 --> 00:00:05.382
We briefly touched on the defaultMesageListenerContainer in an earlier module,

2
00:00:05.382 --> 00:00:09.726
here we're going to use it in a more integrated way with the Spring Framework.

3
00:00:09.726 --> 00:00:11.695
The DefaultMessageListenerContainer is really the heavy lifter in the

4
00:00:11.695 --> 00:00:14.783
Spring Framework when it comes to message consumption.

5
00:00:14.783 --> 00:00:17.950
Its role is to connect to a message broker and

6
00:00:17.950 --> 00:00:20.086
consume messages from a destination,

7
00:00:20.086 --> 00:00:23.644
and distribute those messages to messageListeners.

8
00:00:23.644 --> 00:00:26.542
Some of its features are supports multiple consumers dynamically,

9
00:00:26.542 --> 00:00:29.133
scaling up and down based on load,

10
00:00:29.133 --> 00:00:32.687
automatically reconnects in the event of connection failures,

11
00:00:32.687 --> 00:00:36.489
deals with the caching of resources, supports transactions,

12
00:00:36.489 --> 00:00:39.258
and can be stopped and started and runtime.

13
00:00:39.258 --> 00:00:43.555
It doesn't matter whether you're using XML or annotations for configuration.

14
00:00:43.555 --> 00:00:49.142
Under the hood, it's the DefaultMessageListenerContainer that gets instantiated.

15
00:00:49.142 --> 00:00:52.205
An important object that needs to be in place for

16
00:00:52.205 --> 00:00:55.018
instantiation of the container is a ConnectionFactory.

17
00:00:55.018 --> 00:00:56.099
Unlike the JmsTemplate,

18
00:00:56.099 --> 00:01:00.236
they recommend you do not pass in a pooled or cached ConnectionFactory.

19
00:01:00.236 --> 00:01:12.000
It is better to let the container manage its own resources. Therefore in our examples, we'll be using the raw ActiveMQ ConnectionFactory.

