1
00:00:02,540 --> 00:00:05,140
So here I've got a Singleton session Bean that has the MessageSender

2
00:00:05,140 --> 00:00:09,984
implementation injected into it using the EJB annotation.

3
00:00:09,984 --> 00:00:12,266
I'm also looking up the Emails queue destination and

4
00:00:12,266 --> 00:00:14,361
injected it via the resource annotation.

5
00:00:14,361 --> 00:00:18,904
I then have a method called sendEmail that takes three pieces

6
00:00:18,904 --> 00:00:21,197
of required information to send an email,

7
00:00:21,197 --> 00:00:25,640
the email address, the subject, and the message body or content.

8
00:00:25,640 --> 00:00:28,563
I call sendMessage method on the message sender with the

9
00:00:28,563 --> 00:00:30,304
emails queue as the first parameter.

10
00:00:30,304 --> 00:00:34,902
The second parameter is a lambda that gives me access to the session object,

11
00:00:34,902 --> 00:00:38,331
which I then use to create a text message.

12
00:00:38,331 --> 00:00:42,020
To send the email, I'm storing the email address and subject,

13
00:00:42,020 --> 00:00:42,881
a string properties,

14
00:00:42,881 --> 00:00:46,614
and the body of the email is the main text within the message.

15
00:00:46,614 --> 00:00:49,099
Hopefully there is nothing really new here if

16
00:00:49,099 --> 00:00:50,652
you've been following this playbook.

17
00:00:50,652 --> 00:00:52,579
So what invokes this sendEmail method?

18
00:00:52,579 --> 00:00:54,184
Well, in the real world,

19
00:00:54,184 --> 00:00:56,373
you would have some client that would invoke this

20
00:00:56,373 --> 00:00:58,063
whenever an email needs to be sent.

21
00:00:58,063 --> 00:00:59,022
For simplicity of demonstration,

22
00:00:59,022 --> 00:01:02,559
I have a simple scheduled job that executes the sendEmail method

23
00:01:02,559 --> 00:01:05,147
every 5 seconds with the same information.

24
00:01:05,147 --> 00:01:16,000
So, we will effectively get many copies of the same email on the queue, but the example serves the purpose of showing how the JMS interaction works.

