1
00:00:02,669 --> 00:00:04,705
Before we go and jump into JMS examples and code,

2
00:00:04,705 --> 00:00:08,357
let's pause for a second and possibly take a step back.

3
00:00:08,357 --> 00:00:10,759
This course has practical in title,

4
00:00:10,759 --> 00:00:14,893
so we need to consider is JMS a practical solution for

5
00:00:14,893 --> 00:00:16,622
the problem you're trying to solve.

6
00:00:16,622 --> 00:00:19,171
Now don't get me wrong, I'm not trying to scare you off JMS,

7
00:00:19,171 --> 00:00:20,484
but there are plenty options out there,

8
00:00:20,484 --> 00:00:25,476
and we should just make sure that JMS is the correct choice.

9
00:00:25,476 --> 00:00:27,355
So what are the pros and cons of JMS?

10
00:00:27,355 --> 00:00:31,481
Okay, it's good to end on a positive, so let's start with the negatives.

11
00:00:31,481 --> 00:00:36,039
JMS is a Java specification, therefore it only runs on the JVM.

12
00:00:36,039 --> 00:00:39,260
You can interact with it with other languages such as Kotlin and Scala,

13
00:00:39,260 --> 00:00:41,629
but it does depend on the language you are using,

14
00:00:41,629 --> 00:00:43,951
and how interoperable it is with Java.

15
00:00:43,951 --> 00:00:45,904
For example, there isn't a pure.

16
00:00:45,904 --> 00:00:47,085
NET equivalent of JMS.

17
00:00:47,085 --> 00:00:51,829
Now that does not mean that messages put on a queue can't be read from.

18
00:00:51,829 --> 00:00:53,191
NET or vice versa,

19
00:00:53,191 --> 00:00:56,383
but it does mean that it's more vendor specific and that specific

20
00:00:56,383 --> 00:00:58,357
capabilities of the underlying message broker.

21
00:00:58,357 --> 00:01:03,126
If you are really in mix language or technology stack environment,

22
00:01:03,126 --> 00:01:07,709
then maybe consider using something like Advanced Message Queuing Protocol,

23
00:01:07,709 --> 00:01:09,617
or AMQP for short.

24
00:01:09,617 --> 00:01:13,713
As the name suggests, however, it is more of a protocol than an API.

25
00:01:13,713 --> 00:01:18,435
Some of the JMS APIs can be a little clunky to use; however, with JMS 2.

26
00:01:18,435 --> 00:01:22,786
0, which is still backwards compatible, this is somewhat improved.

27
00:01:22,786 --> 00:01:23,095
Also,

28
00:01:23,095 --> 00:01:26,185
there are various frameworks and patterns you can put in

29
00:01:26,185 --> 00:01:27,814
place to mitigate a lot of these concerns.

30
00:01:27,814 --> 00:01:31,199
There are some example plays within this course that cover these off.

31
00:01:31,199 --> 00:01:34,295
One of the pro sides, JMS is really mature.

32
00:01:34,295 --> 00:01:37,673
It has been in use now for many, many years,

33
00:01:37,673 --> 00:01:38,990
and therefore has great support right there,

34
00:01:38,990 --> 00:01:41,947
both in terms of the number of JMS providers and implementations available,

35
00:01:41,947 --> 00:01:46,493
as well as the amount of documentation that is out there in the wild.

36
00:01:46,493 --> 00:01:48,253
Considering how long JMS has been around,

37
00:01:48,253 --> 00:01:52,509
the APIs haven't changed that much, so chasing your tail isn't a big concern.

38
00:01:52,509 --> 00:01:56,383
Sometimes this is a concern with newer APIs and frameworks.

39
00:01:56,383 --> 00:02:01,201
It's generally fairly simple to move from one JMS provider to another.

40
00:02:01,201 --> 00:02:02,775
If you stick to the specifications,

41
00:02:02,775 --> 00:02:05,747
then you'll find there isn't much work in changing provider.

42
00:02:05,747 --> 00:02:08,192
This means you can avoid vendor lock-in,

43
00:02:08,192 --> 00:02:10,773
which is a concern for some corporations.

44
00:02:10,773 --> 00:02:13,416
Although every JMS implementation is different,

45
00:02:13,416 --> 00:02:16,133
most JMS implementations are now really stable,

46
00:02:16,133 --> 00:02:19,575
extremely performant, and have good solutions for high availability,

47
00:02:19,575 --> 00:02:20,922
but the feature sets do change,

48
00:02:20,922 --> 00:02:24,075
so that is something you will have to check out for yourself.

49
00:02:24,075 --> 00:02:27,803
You can usually find a JMS vendor to match your budget.

50
00:02:27,803 --> 00:02:30,459
If you are looking for an all-singing and dancing solution,

51
00:02:30,459 --> 00:02:32,712
then you can find one within the commercial players.

52
00:02:32,712 --> 00:02:34,982
If you are looking for something a little cheaper and

53
00:02:34,982 --> 00:02:36,296
with less administrative features,

54
00:02:36,296 --> 00:02:40,035
then there are plenty of open-source offerings around with

55
00:02:40,035 --> 00:02:42,358
the possibility of a commercial support.

56
00:02:42,358 --> 00:02:44,802
Even some of the open-source offerings have good

57
00:02:44,802 --> 00:02:45,918
administration features these days.

58
00:02:45,918 --> 00:02:47,270
So based on all that,

59
00:02:47,270 --> 00:02:59,000
let's assume you're here because you are on the JMS journey and want to see some examples, so let's get cracking.

