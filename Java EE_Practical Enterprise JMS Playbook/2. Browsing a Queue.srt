1
00:00:02,070 --> 00:00:04,919
Sometimes to be able to diagnose issues or watch performance,

2
00:00:04,919 --> 00:00:08,051
you need the ability to browse the contents of a queue.

3
00:00:08,051 --> 00:00:12,238
The JMS API provides a mechanism to do this.

4
00:00:12,238 --> 00:00:15,176
This approach can be especially useful if you want them ability

5
00:00:15,176 --> 00:00:17,168
to count the number of messages on a queue,

6
00:00:17,168 --> 00:00:19,103
although generally your JMS provider should provide

7
00:00:19,103 --> 00:00:21,247
some mechanism to do this; however,

8
00:00:21,247 --> 00:00:24,997
the queue browser is the only mechanism I know in the JMS API to be

9
00:00:24,997 --> 00:00:27,985
able to count the number of messages on a queue.

10
00:00:27,985 --> 00:00:32,686
The queue browser actually gives you access to the JMS message object itself.

11
00:00:32,686 --> 00:00:34,141
Therefore, you can preview its contents.

12
00:00:34,141 --> 00:00:37,053
This can be good in the case of a dead letter queue,

13
00:00:37,053 --> 00:00:39,962
or you might want to get an impression of the types of

14
00:00:39,962 --> 00:00:41,633
messages on that queue without processing them.

15
00:00:41,633 --> 00:00:45,477
So here is an example of how you browse a queue.

16
00:00:45,477 --> 00:00:47,779
I've got a single method here, which takes in two parameters,

17
00:00:47,779 --> 00:00:52,408
my JMS session object and the JMS queue I want to browse.

18
00:00:52,408 --> 00:00:57,755
I then use the session object to create a new queue browser object.

19
00:00:57,755 --> 00:01:01,711
This is another example of where I think the JMS API could do with an update,

20
00:01:01,711 --> 00:01:03,974
we call getEnumeration on that queue browser object,

21
00:01:03,974 --> 00:01:06,389
which returns a list of objects.

22
00:01:06,389 --> 00:01:09,476
Now really those objects are all JMS messages,

23
00:01:09,476 --> 00:01:11,637
but as it's using an old Java API,

24
00:01:11,637 --> 00:01:14,373
there are no generic types on the enumeration returned.

25
00:01:14,373 --> 00:01:16,748
Therefore when you iterate around your enumeration,

26
00:01:16,748 --> 00:01:20,349
you need to cast the object returned to a message,

27
00:01:20,349 --> 00:01:22,938
and then further checking the type to see if it's an

28
00:01:22,938 --> 00:01:28,171
instance of a JMS text message, which all of our examples used in this course,

29
00:01:28,171 --> 00:01:32,038
and if so, output the contents to the console.

30
00:01:32,038 --> 00:01:35,277
As I'm iterating around the objects, I'm also counting them,

31
00:01:35,277 --> 00:01:36,854
which provides the queue size.

32
00:01:36,854 --> 00:01:40,284
It's important to note the order of the messages within the

33
00:01:40,284 --> 00:01:43,646
enumeration is the same as the order on the queue itself.

34
00:01:43,646 --> 00:01:45,701
So let's just run this to see.

35
00:01:45,701 --> 00:01:46,874
From the console output,

36
00:01:46,874 --> 00:01:49,974
you can see are the contents of the messages and the

37
00:01:49,974 --> 00:01:51,638
number of messages on that queue.

38
00:01:51,638 --> 00:01:53,883
Now I'm actually going to run this again.

39
00:01:53,883 --> 00:01:57,435
Notice I get the same output namely for two messages.

40
00:01:57,435 --> 00:02:04,000
So my queue browser didn't consume the messages, they're still on the queue waiting to be processed.

