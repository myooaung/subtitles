WEBVTT
1
00:00:02.574 --> 00:00:07.229
So I said I would cover off how to use the newer JMS 2.

2
00:00:07.229 --> 00:00:08.227
0 client API.

3
00:00:08.227 --> 00:00:10.417
The new API has tried to simplify the relationship

4
00:00:10.417 --> 00:00:11.539
between sessions and connections,

5
00:00:11.539 --> 00:00:14.398
and kind of merges these concepts together into a

6
00:00:14.398 --> 00:00:18.101
new object called a JMSContext.

7
00:00:18.101 --> 00:00:21.920
I've created another local Bean interface similar to my previous JMS 1.

8
00:00:21.920 --> 00:00:23.068
1 messageSender interface.

9
00:00:23.068 --> 00:00:28.470
This time, however, the input parameter to the function is a JMSContent,

10
00:00:28.470 --> 00:00:30.540
rather than the session.

11
00:00:30.540 --> 00:00:33.577
Let's see the implementation of this method.

12
00:00:33.577 --> 00:00:36.478
So it's noticeably shorter than the JMS 1.

13
00:00:36.478 --> 00:00:37.929
1 equivalent, but why?

14
00:00:37.929 --> 00:00:41.645
Well firstly, I haven't even injected my ConnectionFactory,

15
00:00:41.645 --> 00:00:43.681
so how does the JMS context get this?

16
00:00:43.681 --> 00:00:45.905
Well, the JMS 2.

17
00:00:45.905 --> 00:00:51.298
0 API specifies a default ConnectionFactory that can be looked up

18
00:00:51.298 --> 00:00:53.502
within any Java Enterprise Edition 7 container.

19
00:00:53.502 --> 00:00:56.626
So the JMSContext will use that by default.

20
00:00:56.626 --> 00:01:01.879
Also, we are now getting a JMSProducer from the context, rather than a JMS 1.

21
00:01:01.879 --> 00:01:02.651
1 messageProducer.

22
00:01:02.651 --> 00:01:04.969
This again has a simpler API,

23
00:01:04.969 --> 00:01:08.464
and in fact allows me to send various pieces of information

24
00:01:08.464 --> 00:01:10.652
without creating a JMS message at all.

25
00:01:10.652 --> 00:01:13.626
There is an overloaded version of the send method that will

26
00:01:13.626 --> 00:01:15.409
take a string or a byte array for example.

27
00:01:15.409 --> 00:01:16.507
In my case, however,

28
00:01:16.507 --> 00:01:20.663
I'm still going to allow the messageCreator function to create the JMS message.

29
00:01:20.663 --> 00:01:25.854
One other thing about the JMSProducer is that it has a more fluent API style.

30
00:01:25.854 --> 00:01:30.357
So for the most part, the methods all return the JMSProducer object itself.

31
00:01:30.357 --> 00:01:32.415
The other difference to the JMS 1.

32
00:01:32.415 --> 00:01:34.179
1 implementation is the exceptions thrown.

33
00:01:34.179 --> 00:01:38.094
They are now all runtime exceptions, not a checked exception even in sight,

34
00:01:38.094 --> 00:01:40.989
so I don't have to catch them here in the code,

35
00:01:40.989 --> 00:01:43.325
I could do without the tricatch block all together,

36
00:01:43.325 --> 00:01:46.855
in which case the exception will be thrown up the stack.

37
00:01:46.855 --> 00:01:50.042
But to demonstrate the exceptions, I've defined them here.

38
00:01:50.042 --> 00:01:52.353
Notice also there isn't a finally block,

39
00:01:52.353 --> 00:01:55.141
the JMSContext can be managed in one of two ways.

40
00:01:55.141 --> 00:01:57.765
The first is using application management,

41
00:01:57.765 --> 00:02:01.103
in which case the application is required to close the JMSContext,

42
00:02:01.103 --> 00:02:02.660
and the other is container management,

43
00:02:02.660 --> 00:02:05.902
which his what we have in a JEE container environment.

44
00:02:05.902 --> 00:02:08.404
So when we inject the JMS context as we have,

45
00:02:08.404 --> 00:02:12.157
the container will take care of correctly closing that context for us.

46
00:02:12.157 --> 00:02:16.795
So let's look at the client of this new JMS 2 message sender.

47
00:02:16.795 --> 00:02:18.924
Well, actually it's pretty much identical to the 1.

48
00:02:18.924 --> 00:02:19.160
1.

49
00:02:19.160 --> 00:02:22.391
version, the only difference is we now inject the JMS2MesageSender,

50
00:02:22.391 --> 00:02:31.000
so we have access to a JMSContext rather than a JMS session, but otherwise the operations are pretty much identical.

