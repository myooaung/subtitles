1
00:00:01,552 --> 00:00:05,279
We'll be using the Spring JMS template as the main

2
00:00:05,279 --> 00:00:06,770
mechanism for sending messages.

3
00:00:06,770 --> 00:00:08,971
It's actually capable of receiving messages as well,

4
00:00:08,971 --> 00:00:12,168
which we will touch on, but generally I use messageListeners for this,

5
00:00:12,168 --> 00:00:15,519
which we will see in use in a later section.

6
00:00:15,519 --> 00:00:19,299
The JMS template can create basic JMS messages for you,

7
00:00:19,299 --> 00:00:22,959
but it is also possible to send business-level objects.

8
00:00:22,959 --> 00:00:26,878
For example, if you have an object in your system representing a customer order,

9
00:00:26,878 --> 00:00:30,482
then it's possible to send this using a JmsTemplate.

10
00:00:30,482 --> 00:00:34,597
It will use a define message converter to convert the

11
00:00:34,597 --> 00:00:35,999
message into a suitable JMS message,

12
00:00:35,999 --> 00:00:38,920
after which it will be sent to the destination.

13
00:00:38,920 --> 00:00:43,380
This functionality requires the use of a message converter implementation.

14
00:00:43,380 --> 00:00:45,886
There are various ones available, for example,

15
00:00:45,886 --> 00:00:48,399
XML, standard Java serialization, and JSON,

16
00:00:48,399 --> 00:00:50,985
or you can declare your own.

17
00:00:50,985 --> 00:00:54,598
In our examples, we will be using JSON as the message format.

18
00:00:54,598 --> 00:00:57,831
I would not recommend using the standard

19
00:00:57,831 --> 00:01:00,017
serialization implementations in production.

20
00:01:00,017 --> 00:01:03,284
To have a serialization does not really have a concept of object versioning.

21
00:01:03,284 --> 00:01:07,406
This makes it difficult to upgrade your application without having to delete

22
00:01:07,406 --> 00:01:10,659
messages from queues and/or topics during the release process.

23
00:01:10,659 --> 00:01:13,940
Jackson is the JSON serialization library I will be using,

24
00:01:13,940 --> 00:01:18,120
and it can generally fairly easily serialize objects into a JSON format.

25
00:01:18,120 --> 00:01:20,958
This is then stored within the body of the JMS message.

26
00:01:20,958 --> 00:01:24,419
In order for Jackson to de-serialize a message from raw

27
00:01:24,419 --> 00:01:27,783
JSON back into a business object, which is required at the consumer end,

28
00:01:27,783 --> 00:01:30,113
Jackson needs to know the type of object,

29
00:01:30,113 --> 00:01:32,190
therefore as part of the serialization process,

30
00:01:32,190 --> 00:01:34,984
it also sets a JMS property on the message,

31
00:01:34,984 --> 00:01:38,574
which contains the fully-qualified class name of the object.

32
00:01:38,574 --> 00:01:39,852
When using the JMS template,

33
00:01:39,852 --> 00:01:43,841
it assumes by default that you are sending message to a queue,

34
00:01:43,841 --> 00:01:49,166
unless you explicitly declare the JMS destination object when you're using it.

35
00:01:49,166 --> 00:01:52,719
In our upcoming examples, we don't want to have to do this.

36
00:01:52,719 --> 00:01:56,545
So we'll actually be declaring two implementations of the JMS template,

37
00:01:56,545 --> 00:02:01,087
one for queuing destinations and another for topic destinations.

38
00:02:01,087 --> 00:02:03,848
In the documentation for the JMS template,

39
00:02:03,848 --> 00:02:06,483
it also suggests using cached or pooled connections,

40
00:02:06,483 --> 00:02:14,000
therefore we will be using the cachingConnectionFactory we created in the previous section.

