1
00:00:02,437 --> 00:00:05,904
I'm going to create a method called consumeFromDestination,

2
00:00:05,904 --> 00:00:08,464
which takes a JMS session object as a parameter,

3
00:00:08,464 --> 00:00:11,272
and also the queue name we want to consume messages from.

4
00:00:11,272 --> 00:00:14,482
I'm actually going to show you two ways of consuming messages,

5
00:00:14,482 --> 00:00:20,834
one which uses polling, and another one which uses the JMS message listener.

6
00:00:20,834 --> 00:00:25,126
For both, I need to create a reference to the queue we need to consume from.

7
00:00:25,126 --> 00:00:27,827
We then need to create a message consumer object by calling

8
00:00:27,827 --> 00:00:30,212
createConsumer on the session object.

9
00:00:30,212 --> 00:00:34,620
To use the polling method, we can then call consumer.

10
00:00:34,620 --> 00:00:40,518
recieve, which will wait or block indefinitely for a message to be received.

11
00:00:40,518 --> 00:00:45,530
I'm going to change this slightly, as I typically try and avoid this approach,

12
00:00:45,530 --> 00:00:47,851
but it may be useful in your scenario.

13
00:00:47,851 --> 00:00:50,018
I'm going to create a Boolean called someCondition,

14
00:00:50,018 --> 00:00:52,625
which would represent some condition in your application that

15
00:00:52,625 --> 00:00:55,129
defines how long we should consume messages for,

16
00:00:55,129 --> 00:00:55,445
i.

17
00:00:55,445 --> 00:00:55,762
e.

18
00:00:55,762 --> 00:01:00,071
it's related to some form of lifecycle in your application.

19
00:01:00,071 --> 00:01:05,666
While the condition is true, we continuously loop and request messages,

20
00:01:05,666 --> 00:01:08,216
timing out every 500 ms.

21
00:01:08,216 --> 00:01:10,311
If no message is received within that time period,

22
00:01:10,311 --> 00:01:11,840
then we will simply try again.

23
00:01:11,840 --> 00:01:13,632
But if a message is received,

24
00:01:13,632 --> 00:01:18,272
then you can do something with that message and process it in

25
00:01:18,272 --> 00:01:20,520
whatever way your application requires.

26
00:01:20,520 --> 00:01:23,991
This will work perfectly fine, but generally I prefer a different approach,

27
00:01:23,991 --> 00:01:27,643
which is to use a message listener.

28
00:01:27,643 --> 00:01:29,600
Now it does depend on your application.

29
00:01:29,600 --> 00:01:33,215
Sometimes you want your application to simply request messages at certain times,

30
00:01:33,215 --> 00:01:35,244
in which case the polling approach is best,

31
00:01:35,244 --> 00:01:38,569
but generally I try and keep systems loosely coupled with messaging,

32
00:01:38,569 --> 00:01:42,852
and therefore I have my consumers generally listening all the time.

33
00:01:42,852 --> 00:01:46,009
Therefore, the message listener is a good solution for this.

34
00:01:46,009 --> 00:01:50,264
I'll change the parameters of this method to take an

35
00:01:50,264 --> 00:01:54,383
implementation on the JMS MessageListener interface,

36
00:01:54,383 --> 00:01:56,585
then I'll get rid of the loop,

37
00:01:56,585 --> 00:01:59,699
and let the JMS implementation effectively take care of that work for me.

38
00:01:59,699 --> 00:02:02,981
All I need to do is simply call setMessageListener on

39
00:02:02,981 --> 00:02:07,142
the message consumer I've created, and pass in the messageListener parameter.

40
00:02:07,142 --> 00:02:10,354
Actually, I'm going to return the message consumer from this method,

41
00:02:10,354 --> 00:02:12,643
and you'll see why in a moment.

42
00:02:12,643 --> 00:02:15,259
Let's see how this method could be invoked.

43
00:02:15,259 --> 00:02:19,213
Back in my main method, I'm going to call the consumeFromDestination method,

44
00:02:19,213 --> 00:02:22,099
passing in the session, the queue name,

45
00:02:22,099 --> 00:02:24,343
and a lambda expression for the messageListener.

46
00:02:24,343 --> 00:02:26,104
Now if you're not using Java 8,

47
00:02:26,104 --> 00:02:30,682
then you can pass in an anonymous class here or do something similar.

48
00:02:30,682 --> 00:02:34,906
Inside the lambda, I'm simply getting a reference to the message,

49
00:02:34,906 --> 00:02:38,103
and stating that you can do whatever you need do with the message,

50
00:02:38,103 --> 00:02:39,327
which will depend on your application.

51
00:02:39,327 --> 00:02:43,124
One other thing we need to do though is to free up any

52
00:02:43,124 --> 00:02:45,099
resources which our application uses.

53
00:02:45,099 --> 00:02:47,441
Now you can do this in whatever way is best for your application,

54
00:02:47,441 --> 00:02:49,152
but to kind of represent that here,

55
00:02:49,152 --> 00:02:52,338
I'm going to add a shutdown hook to the runtime.

56
00:02:52,338 --> 00:02:56,275
Inside that, I'll close the consumer we returned,

57
00:02:56,275 --> 00:02:58,410
the session object, and the connection.

58
00:02:58,410 --> 00:03:01,828
Actually, there's one more thing you need to do to make this work.

59
00:03:01,828 --> 00:03:07,175
You need to start the connection, and you do this by calling connection.

60
00:03:07,175 --> 00:03:07,705
start.

61
00:03:07,705 --> 00:03:14,000
And therefore, when shutting down your application, you should also call the stop method on the connection.

