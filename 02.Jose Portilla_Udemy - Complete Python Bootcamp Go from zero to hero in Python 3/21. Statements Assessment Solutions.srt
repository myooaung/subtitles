1
1

00:00:01,028  -->  00:00:02,855
<v Narrator>Hello everyone, and welcome to the lecture on</v>
2

2

00:00:02,855  -->  00:00:06,062
the Statements Assessment Test Solutions,
3

3

00:00:06,062  -->  00:00:08,007
so let's go ahead and take a look at them.
4

4

00:00:08,007  -->  00:00:10,085
I'll do a brief overview of the solutions, and you can
5

5

00:00:10,085  -->  00:00:13,926
check out the Jupyter notebook to take a more detailed look.
6

6

00:00:13,926  -->  00:00:18,826
First up was use for, split and if to create a statement
7

7

00:00:18,826  -->  00:00:21,557
that will print out the letters that start with S.
8

8

00:00:21,557  -->  00:00:25,748
So what I did was say for word in this string,
9

9

00:00:25,748  -->  00:00:29,001
call the split method on it, and that will return a list
10

10

00:00:29,001  -->  00:00:32,485
of all the words because I'm splitting by the white space,
11

11

00:00:32,485  -->  00:00:35,444
and then I said if word index of zero,
12

12

00:00:35,444  -->  00:00:38,986
so the first letter of that word is equal to S,
13

13

00:00:38,986  -->  00:00:41,958
go ahead and print that word.
14

14

00:00:41,958  -->  00:00:44,956
Next up, use range to print all the even numbers
15

15

00:00:44,956  -->  00:00:46,101
from zero to 10.
16

16

00:00:46,101  -->  00:00:49,174
So I said range, go from zero 11 remember,
17

17

00:00:49,174  -->  00:00:52,787
'cause indexing starts at zero and it goes up to 11,
18

18

00:00:52,787  -->  00:00:54,461
but not including 11,
19

19

00:00:54,461  -->  00:00:56,814
and then I did spacing by two,
20

20

00:00:56,814  -->  00:00:59,457
where that was my step size.
21

21

00:00:59,457  -->  00:01:01,926
Next, for list comprehension to create a list of all numbers
22

22

00:01:01,926  -->  00:01:04,873
between one and 50 that are divisible by three,
23

23

00:01:04,873  -->  00:01:07,838
I've just said X for X in range 50,
24

24

00:01:07,838  -->  00:01:10,505
if X mod three is equal to zero.
25

25

00:01:11,454  -->  00:01:15,024
Equal equal because it's a bullion check.
26

26

00:01:15,024  -->  00:01:18,046
After that, I wanted you to go through the string below
27

27

00:01:18,046  -->  00:01:22,825
and if the length of the word is even, print even.
28

28

00:01:22,825  -->  00:01:27,262
And I'm gonna refresh this real quick to show the answer.
29

29

00:01:27,262  -->  00:01:29,650
Okay, I refreshed, so sorry if there was a jump
30

30

00:01:29,650  -->  00:01:31,500
or a glitch there.
31

31

00:01:31,500  -->  00:01:32,951
But now I have the solution.
32

32

00:01:32,951  -->  00:01:34,911
So for going through the string below,
33

33

00:01:34,911  -->  00:01:37,240
and checking if the length of a word is even,
34

34

00:01:37,240  -->  00:01:40,758
I said for word in ST split, if the length of that word
35

35

00:01:40,758  -->  00:01:44,110
mod two is bullion check equal to zero,
36

36

00:01:44,110  -->  00:01:46,878
print and you could've printed whatever you wanted here,
37

37

00:01:46,878  -->  00:01:49,754
I just printed the word plus this arrow saying
38

38

00:01:49,754  -->  00:01:52,171
has an even length, FizzBuzz.
39

39

00:01:53,557  -->  00:01:56,558
You can go ahead check out this answer,
40

40

00:01:56,558  -->  00:01:58,062
should have been pretty similar to what we discussed
41

41

00:01:58,062  -->  00:02:00,022
in the lecture,
42

42

00:02:00,022  -->  00:02:03,171
and then, at the end, I wanted you to use list comprehension
43

43

00:02:03,171  -->  00:02:05,069
to create a list of the first letters of every word
44

44

00:02:05,069  -->  00:02:06,549
in the string below.
45

45

00:02:06,549  -->  00:02:09,403
So what I did was say word, index zero for word
46

46

00:02:09,403  -->  00:02:10,486
and ST.split.
47

47

00:02:11,655  -->  00:02:13,448
So go ahead and check out this Jupyter notebook and
48

48

00:02:13,448  -->  00:02:15,547
check out the details of the code in case you're confused
49

49

00:02:15,547  -->  00:02:16,596
on anything.
50

50

00:02:16,596  -->  00:02:19,143
And as always, feel free to start a discussion question
51

51

00:02:19,143  -->  00:02:21,298
in case you want more clarification.
52

52

00:02:21,298  -->  00:02:24,401
Alright, thank you, and I'll see you at the next lecture.
