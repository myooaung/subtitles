WEBVTT
1
1

00:00:00.769  -->  00:00:02.788
<v ->Hello everyone</v>
2

2

00:00:02.788  -->  00:00:04.751
and welcome to the Filter lecture.
3

3

00:00:04.751  -->  00:00:05.613
And in this lecture
4

4

00:00:05.613  -->  00:00:08.941
we're going to be going over the built-in function filter.
5

5

00:00:08.941  -->  00:00:10.730
So, let's go ahead and get started.
6

6

00:00:10.730  -->  00:00:13.218
So, what the filter function does
7

7

00:00:13.218  -->  00:00:15.292
is just like map and reduce
8

8

00:00:15.292  -->  00:00:16.599
it takes in a function
9

9

00:00:16.599  -->  00:00:19.616
and then a sequence iterable such as a list.
10

10

00:00:19.616  -->  00:00:20.883
And it offers a really convenient way
11

11

00:00:20.883  -->  00:00:23.310
to filter out all the elements of an iterable,
12

12

00:00:23.310  -->  00:00:25.939
for which the function returns true.
13

13

00:00:25.939  -->  00:00:27.129
So what I mean by that,
14

14

00:00:27.129  -->  00:00:28.942
the function filter is gonna take in a function
15

15

00:00:28.942  -->  00:00:30.692
and then here I have just "l",
16

16

00:00:30.692  -->  00:00:32.840
which just stands for some sort of list.
17

17

00:00:32.840  -->  00:00:34.385
So, function is the first argument.
18

18

00:00:34.385  -->  00:00:36.623
Your list will be the second one.
19

19

00:00:36.623  -->  00:00:38.481
And then the function will return a Boolean value
20

20

00:00:38.481  -->  00:00:39.716
either true or false.
21

21

00:00:39.716  -->  00:00:41.115
So, maybe you're checking for even numbers
22

22

00:00:41.115  -->  00:00:42.238
or something like that.
23

23

00:00:42.238  -->  00:00:43.363
Well you'll return true or false,
24

24

00:00:43.363  -->  00:00:46.507
depending on if the number is even or not.
25

25

00:00:46.507  -->  00:00:47.497
And then the function is gonna be applied
26

26

00:00:47.497  -->  00:00:48.783
to every number in that iterable.
27

27

00:00:48.783  -->  00:00:50.941
And only if the function returns true,
28

28

00:00:50.941  -->  00:00:54.105
will the element of the iterable be included in the result.
29

29

00:00:54.105  -->  00:00:55.012
So, let's go ahead
30

30

00:00:55.012  -->  00:00:56.018
and go to the live code
31

31

00:00:56.018  -->  00:00:57.935
and see how this works.
32

32

00:00:59.956  -->  00:01:02.085
Alright, so we've jumped to the live code,
33

33

00:01:02.085  -->  00:01:04.277
so let's go ahead and see an example.
34

34

00:01:04.277  -->  00:01:06.541
First, let's make a function.
35

35

00:01:06.541  -->  00:01:10.267
In this case, I'm going to use normal def function notation
36

36

00:01:10.267  -->  00:01:13.131
and let's have it be that even check
37

37

00:01:13.131  -->  00:01:14.953
that we were talking about.
38

38

00:01:14.953  -->  00:01:16.536
So, here if the num
39

39

00:01:18.887  -->  00:01:20.312
returns,
40

40

00:01:20.312  -->  00:01:22.110
actually what we can do,
41

41

00:01:22.110  -->  00:01:23.946
Well, I'll show you two ways of doing this.
42

42

00:01:23.946  -->  00:01:25.665
You can say if num mod two
43

43

00:01:25.665  -->  00:01:28.248
or modula two is equal to zero,
44

44

00:01:29.467  -->  00:01:30.467
return true.
45

45

00:01:35.030  -->  00:01:36.893
So, let's use this version of the function
46

46

00:01:36.893  -->  00:01:39.428
and I'll do an even check.
47

47

00:01:39.428  -->  00:01:40.884
Let's check 34,
48

48

00:01:40.884  -->  00:01:42.234
that's even.
49

49

00:01:42.234  -->  00:01:44.749
Let's go ahead and check 35,
50

50

00:01:44.749  -->  00:01:45.694
nothing comes out.
51

51

00:01:45.694  -->  00:01:47.528
So we need to say,
52

52

00:01:47.528  -->  00:01:48.393
we could say
53

53

00:01:48.393  -->  00:01:49.226
else
54

54

00:01:51.194  -->  00:01:52.667
false.
55

55

00:01:52.667  -->  00:01:53.750
Return false.
56

56

00:01:57.527  -->  00:01:58.459
Alright great.
57

57

00:01:58.459  -->  00:02:01.380
So, we've created a way of filtering
58

58

00:02:01.380  -->  00:02:02.539
the numbers based on
59

59

00:02:02.539  -->  00:02:04.542
whether or not they're even.
60

60

00:02:04.542  -->  00:02:05.692
So, we have a function that returns a Boolean.
61

61

00:02:05.692  -->  00:02:09.517
You could also just return this result.
62

62

00:02:09.517  -->  00:02:11.639
Return num mod two equals zero
63

63

00:02:11.639  -->  00:02:13.598
and Python will treat it the same way.
64

64

00:02:13.598  -->  00:02:15.174
But just for clarity sake,
65

65

00:02:15.174  -->  00:02:17.563
we're gonna build out the function completely.
66

66

00:02:17.563  -->  00:02:19.293
Alright, so let's filter out a list of numbers.
67

67

00:02:19.293  -->  00:02:21.074
Let's go ahead and say
68

68

00:02:21.074  -->  00:02:23.574
that our list lst is equal to,
69

69

00:02:24.893  -->  00:02:26.555
let's just create a range,
70

70

00:02:26.555  -->  00:02:28.149
to 10.
71

71

00:02:28.149  -->  00:02:29.768
And we check lst.
72

72

00:02:29.768  -->  00:02:31.252
Zero, one through nine.
73

73

00:02:31.252  -->  00:02:32.383
Okay, great.
74

74

00:02:32.383  -->  00:02:34.499
So, let's go ahead and filter it.
75

75

00:02:34.499  -->  00:02:35.999
So, I wanna filter
76

76

00:02:37.140  -->  00:02:38.473
with even check.
77

77

00:02:41.896  -->  00:02:44.098
and return only the even numbers.
78

78

00:02:44.098  -->  00:02:46.126
And that's exactly what it does.
79

79

00:02:46.126  -->  00:02:48.119
So, as I mentioned before,
80

80

00:02:48.119  -->  00:02:50.130
just like map and reduce,
81

81

00:02:50.130  -->  00:02:51.319
filter is more commonly used
82

82

00:02:51.319  -->  00:02:54.681
with lambda expressions just for a quick adhoc job.
83

83

00:02:54.681  -->  00:02:55.739
So, I could say lambda
84

84

00:02:57.172  -->  00:02:58.005
num.
85

85

00:03:01.351  -->  00:03:03.421
where it's equal to zero.
86

86

00:03:03.421  -->  00:03:05.018
The num modula two
87

87

00:03:05.018  -->  00:03:07.005
and apply that to my list.
88

88

00:03:07.005  -->  00:03:09.459
And filter works the exact same way.
89

89

00:03:09.459  -->  00:03:11.979
So, hopefully this looks very familiar
90

90

00:03:11.979  -->  00:03:14.572
given what we learned about map and reduce.
91

91

00:03:14.572  -->  00:03:17.135
But basically, your first function
92

92

00:03:17.135  -->  00:03:19.686
is any function that returns a Boolean.
93

93

00:03:19.686  -->  00:03:22.737
And you can pass a list and it'll filter out
94

94

00:03:22.737  -->  00:03:24.171
everything that's not true.
95

95

00:03:24.171  -->  00:03:26.162
Let's go ahead and see one more example.
96

96

00:03:27.961  -->  00:03:30.107
Let's say I wanted to find every number in this list
97

97

00:03:30.107  -->  00:03:32.971
that was greater than three.
98

98

00:03:32.971  -->  00:03:34.296
So, I could say filter,
99

99

00:03:35.582  -->  00:03:36.499
lambda num,
100

100

00:03:37.705  -->  00:03:39.277
given num greater than three,
101

101

00:03:41.176  -->  00:03:42.596
pass my list
102

102

00:03:42.596  -->  00:03:44.979
and now I have every number that's greater than three.
103

103

00:03:44.979  -->  00:03:47.883
Okay, so hopefully that's all pretty straight forward.
104

104

00:03:47.883  -->  00:03:50.243
Remember, filter you just put in the function name,
105

105

00:03:50.243  -->  00:03:51.398
no parentheses,
106

106

00:03:51.398  -->  00:03:53.122
the sequence iterable you wanna pass,
107

107

00:03:53.122  -->  00:03:54.894
in this case we're usually doing lists.
108

108

00:03:54.894  -->  00:03:57.164
And then it'll filter out
109

109

00:03:57.164  -->  00:03:59.950
and return everything where the element would pass
110

110

00:03:59.950  -->  00:04:02.445
with a true Boolean for that function.
111

111

00:04:02.445  -->  00:04:04.871
Okay, that's actually all I have for filter.
112

112

00:04:04.871  -->  00:04:07.045
You can go ahead and check out the jupiter notebook,
113

113

00:04:07.045  -->  00:04:09.215
if you want some more in-depth explanation.
114

114

00:04:09.215  -->  00:04:10.893
But that's really all there is to it.
115

115

00:04:10.893  -->  00:04:11.856
Okay, thanks.
116

116

00:04:11.856  -->  00:04:14.486
And I'll see you at the next lecture.
