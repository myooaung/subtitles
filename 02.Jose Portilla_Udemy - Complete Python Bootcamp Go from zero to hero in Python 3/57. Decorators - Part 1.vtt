WEBVTT
1
1

00:00:01.915  -->  00:00:02.748
<v Instructor>Hello everyone,</v>
2

2

00:00:02.748  -->  00:00:06.155
and welcome to the decorators section of this course.
3

3

00:00:06.155  -->  00:00:08.915
So, decorators can be thought of as functions
4

4

00:00:08.915  -->  00:00:11.846
which modify the functionality of another function,
5

5

00:00:11.846  -->  00:00:14.173
which I know sounds weird but they'll help
6

6

00:00:14.173  -->  00:00:16.492
make your code shorter and more Pythonic.
7

7

00:00:16.492  -->  00:00:19.229
It's a pretty advanced topic, and you'll run it to more
8

8

00:00:19.229  -->  00:00:21.702
when you start to, working with Web frameworks
9

9

00:00:21.702  -->  00:00:24.518
such as Django or Flask, with Python.
10

10

00:00:24.518  -->  00:00:28.223
So, something I wanna note, before you start this lecture,
11

11

00:00:28.223  -->  00:00:30.712
restart Python, and the Jupyter notebooks,
12

12

00:00:30.712  -->  00:00:32.633
in order to keep track some of the global
13

13

00:00:32.633  -->  00:00:34.923
functions we'll be working with.
14

14

00:00:34.923  -->  00:00:38.128
I think the lecture will make more sense that way.
15

15

00:00:38.128  -->  00:00:42.488
Okay, so we might have to split up this section
16

16

00:00:42.488  -->  00:00:45.124
into multiple videos, so we'll see how it goes.
17

17

00:00:45.124  -->  00:00:47.684
But what we're gonna do is just start explaining
18

18

00:00:47.684  -->  00:00:50.906
decorators by slowly building up from functions.
19

19

00:00:50.906  -->  00:00:54.145
So let's go ahead and do a little bit of a functions review.
20

20

00:00:54.145  -->  00:00:58.520
So I'm gonna make the simplest function that I can.
21

21

00:00:58.520  -->  00:01:01.291
I'm gonna make a function called, def func one.
22

22

00:01:01.291  -->  00:01:03.462
Let me zoom in a bit for you guys.
23

23

00:01:03.462  -->  00:01:06.462
And all it's gonna do is return one.
24

24

00:01:07.534  -->  00:01:12.423
So if I call func, F-U-N-C, I get one.
25

25

00:01:12.423  -->  00:01:15.939
So let's go over a bit, of a review with scope.
26

26

00:01:15.939  -->  00:01:18.454
So remember from the nested statements lecture
27

27

00:01:18.454  -->  00:01:20.255
that Python uses scope to know
28

28

00:01:20.255  -->  00:01:23.011
what a label it's referring to.
29

29

00:01:23.011  -->  00:01:27.629
So for instance, I'm going to create a variable called s.
30

30

00:01:27.629  -->  00:01:29.132
And it's gonna be a string called
31

31

00:01:29.132  -->  00:01:31.299
This is a global variable.
32

32

00:01:35.143  -->  00:01:37.177
And notice how it's not inside any functions,
33

33

00:01:37.177  -->  00:01:38.427
so it's global.
34

34

00:01:39.560  -->  00:01:41.902
And it's not inside a class, either.
35

35

00:01:41.902  -->  00:01:45.069
And so now, I'm gonna make a function,
36

36

00:01:45.958  -->  00:01:50.125
I'm gonna rewrite func and it's gonna print locals.
37

37

00:01:52.239  -->  00:01:53.501
Okay.
38

38

00:01:53.501  -->  00:01:57.279
So remember that Python functions create a new scope,
39

39

00:01:57.279  -->  00:01:59.494
meaning the function has its own namespace,
40

40

00:01:59.494  -->  00:02:01.294
so this function has its own namespace
41

41

00:02:01.294  -->  00:02:03.409
to find variable names when they're mentioned
42

42

00:02:03.409  -->  00:02:04.878
from within the function.
43

43

00:02:04.878  -->  00:02:06.240
So remember it checks this first
44

44

00:02:06.240  -->  00:02:09.555
before checking the global scope.
45

45

00:02:09.555  -->  00:02:12.971
And we can check for local variables and global variables
46

46

00:02:12.971  -->  00:02:13.971
with locals,
47

47

00:02:16.913  -->  00:02:17.958
and globals.
48

48

00:02:17.958  -->  00:02:20.469
Those are just built-in functions that you can call
49

49

00:02:20.469  -->  00:02:22.974
to get the globals and local variables.
50

50

00:02:22.974  -->  00:02:24.901
So let's say I wanted to figure out, okay,
51

51

00:02:24.901  -->  00:02:27.814
what are all the global variables I have.
52

52

00:02:27.814  -->  00:02:30.221
If I say print globals, we're gonna get
53

53

00:02:30.221  -->  00:02:32.415
a large output right now.
54

54

00:02:32.415  -->  00:02:36.644
So we get all this, and this is basically a dictionary
55

55

00:02:36.644  -->  00:02:39.384
of a bunch of, basically all the global variables
56

56

00:02:39.384  -->  00:02:41.126
we have right now.
57

57

00:02:41.126  -->  00:02:43.132
So what we can do, is,
58

58

00:02:43.132  -->  00:02:46.762
just call the keys of that dictionary.
59

59

00:02:46.762  -->  00:02:49.621
And so here are all the keys of that dictionary.
60

60

00:02:49.621  -->  00:02:52.890
And this basically are all the global variables right now
61

61

00:02:52.890  -->  00:02:55.223
that Python is holding onto.
62

62

00:02:57.393  -->  00:03:00.669
And so remember that we created this s,
63

63

00:03:00.669  -->  00:03:02.549
so it's a global variable and if you'll notice,
64

64

00:03:02.549  -->  00:03:04.036
it's right here.
65

65

00:03:04.036  -->  00:03:05.722
So it's a key, so I can actually,
66

66

00:03:05.722  -->  00:03:07.539
since this is a dictionary,
67

67

00:03:07.539  -->  00:03:11.041
call s, and it treats them all as strings.
68

68

00:03:11.041  -->  00:03:14.909
It converts all the keys into strings.
69

69

00:03:14.909  -->  00:03:15.742
And now,
70

70

00:03:15.742  -->  00:03:17.960
this is a global variable pops out.
71

71

00:03:17.960  -->  00:03:20.822
So, just to keep in mind, globals,
72

72

00:03:20.822  -->  00:03:24.336
it's a dictionary of all the global variables
73

73

00:03:24.336  -->  00:03:26.672
and what they stand for, and right now
74

74

00:03:26.672  -->  00:03:28.922
we've created one called s,
75

75

00:03:30.226  -->  00:03:33.554
which is just a string saying this is a global variable.
76

76

00:03:33.554  -->  00:03:36.496
But now it's interesting is if I run my function,
77

77

00:03:36.496  -->  00:03:38.966
remember this function just prints locals,
78

78

00:03:38.966  -->  00:03:43.534
but since there's no variables defined within that function,
79

79

00:03:43.534  -->  00:03:46.104
I get an empty dictionary out.
80

80

00:03:46.104  -->  00:03:48.264
Alright, so that's just something to keep in mind.
81

81

00:03:48.264  -->  00:03:50.576
So now we're gonna continue with building out the logic
82

82

00:03:50.576  -->  00:03:53.420
of what a decorator actually is.
83

83

00:03:53.420  -->  00:03:55.532
And in order to do that, I wanna remind you
84

84

00:03:55.532  -->  00:03:57.864
that in Python as we discussed before,
85

85

00:03:57.864  -->  00:03:59.603
everything is an object.
86

86

00:03:59.603  -->  00:04:01.115
That means functions are objects,
87

87

00:04:01.115  -->  00:04:02.555
which can be assigned labels
88

88

00:04:02.555  -->  00:04:04.555
and passed into other functions.
89

89

00:04:04.555  -->  00:04:07.599
So let's start with a simple example of that.
90

90

00:04:07.599  -->  00:04:11.438
I'm gonna create a function, and it's called hello.
91

91

00:04:11.438  -->  00:04:13.201
And it takes a name, and by default
92

92

00:04:13.201  -->  00:04:15.868
I'll just have the name be Jose.
93

93

00:04:18.659  -->  00:04:21.576
And I'll have it return hello space
94

94

00:04:23.868  -->  00:04:25.035
plus the name.
95

95

00:04:26.033  -->  00:04:30.200
Okay, so if I call hello right now I get hello Jose.
96

96

00:04:31.197  -->  00:04:35.636
Now what I can do is assign a label to that function.
97

97

00:04:35.636  -->  00:04:38.886
So, check this out, I'm gonna say greet
98

98

00:04:40.455  -->  00:04:41.538
equals hello.
99

99

00:04:42.917  -->  00:04:45.050
And notice that I'm not using parentheses here
100

100

00:04:45.050  -->  00:04:47.319
because I'm not calling the function hello.
101

101

00:04:47.319  -->  00:04:49.786
Instead I'm just assigning it to the variable.
102

102

00:04:49.786  -->  00:04:51.119
So if I do this,
103

103

00:04:55.053  -->  00:04:56.988
and then call greet.
104

104

00:04:56.988  -->  00:04:59.655
It's a function, which is hello.
105

105

00:05:00.497  -->  00:05:03.535
So then if I call greet closed,
106

106

00:05:03.535  -->  00:05:05.065
it'll print out hello Jose.
107

107

00:05:05.065  -->  00:05:09.500
So I set the greet variable equal to the hello function.
108

108

00:05:09.500  -->  00:05:12.173
And something to understand is that this assignment
109

109

00:05:12.173  -->  00:05:15.932
with greet, is not attached to the original function.
110

110

00:05:15.932  -->  00:05:17.682
So if I delete hello,
111

111

00:05:21.270  -->  00:05:23.923
so notice I've deleted that function from memory now.
112

112

00:05:23.923  -->  00:05:27.058
So if I call hello, it says hello's not defined.
113

113

00:05:27.058  -->  00:05:30.910
I have to run this cell again, to redefine it.
114

114

00:05:30.910  -->  00:05:33.841
But I want you to realise that greet
115

115

00:05:33.841  -->  00:05:34.891
isn't actually attached.
116

116

00:05:34.891  -->  00:05:36.790
So greet still works.
117

117

00:05:36.790  -->  00:05:38.128
Okay.
118

118

00:05:38.128  -->  00:05:41.637
So, let's go over slowly what we've done.
119

119

00:05:41.637  -->  00:05:42.830
We're thinking about decorators,
120

120

00:05:42.830  -->  00:05:45.672
and we wanna build our understanding off of functions.
121

121

00:05:45.672  -->  00:05:47.863
So here's an example of a simple function
122

122

00:05:47.863  -->  00:05:49.303
that just returns one.
123

123

00:05:49.303  -->  00:05:51.739
So if I call that function, I get one.
124

124

00:05:51.739  -->  00:05:54.140
Now let's remember about global variables.
125

125

00:05:54.140  -->  00:05:56.746
I set s to be global variable,
126

126

00:05:56.746  -->  00:05:59.851
which is just a string saying this is a global variable.
127

127

00:05:59.851  -->  00:06:04.018
And I've called the function F-U-N-C which prints locals.
128

128

00:06:04.908  -->  00:06:06.849
And since there's no other local variables
129

129

00:06:06.849  -->  00:06:10.013
defined within this function, just to remind this was scope,
130

130

00:06:10.013  -->  00:06:11.713
if I were to call that function,
131

131

00:06:11.713  -->  00:06:15.347
I get an empty dictionary out from that locals call.
132

132

00:06:15.347  -->  00:06:18.234
Now something else, we wanted to check globals,
133

133

00:06:18.234  -->  00:06:21.055
which we could do if that globals function
134

134

00:06:21.055  -->  00:06:23.374
which returns that dictionary of all the globals,
135

135

00:06:23.374  -->  00:06:28.208
and I can call the s key to get back the global variable.
136

136

00:06:28.208  -->  00:06:30.078
Next, we wanted to reiterate
137

137

00:06:30.078  -->  00:06:33.830
that functions can be assigned to variable labels,
138

138

00:06:33.830  -->  00:06:35.792
'cause everything is an object in Python.
139

139

00:06:35.792  -->  00:06:38.666
So I created a function called hello,
140

140

00:06:38.666  -->  00:06:40.565
default was name equals Jose
141

141

00:06:40.565  -->  00:06:43.255
and it just returned hello plus name.
142

142

00:06:43.255  -->  00:06:46.317
So when I called hello, I got hello Jose.
143

143

00:06:46.317  -->  00:06:48.526
Since everything in Python is an object,
144

144

00:06:48.526  -->  00:06:52.597
I could assign hello to the variable greet.
145

145

00:06:52.597  -->  00:06:53.947
Now something to note here
146

146

00:06:53.947  -->  00:06:56.942
is that greet wasn't attached to hello,
147

147

00:06:56.942  -->  00:07:00.968
so if I deleted hello, hello didn't work anymore
148

148

00:07:00.968  -->  00:07:02.797
but greet still did.
149

149

00:07:02.797  -->  00:07:05.688
Okay, so, that's it for now.
150

150

00:07:05.688  -->  00:07:06.652
In the next video,
151

151

00:07:06.652  -->  00:07:09.762
we're gonna learn about functions within functions.
152

152

00:07:09.762  -->  00:07:12.004
And we're gonna also be dealing with this,
153

153

00:07:12.004  -->  00:07:14.592
same hello and greet function.
154

154

00:07:14.592  -->  00:07:16.973
Okay, I'll go ahead and stop the video here.
155

155

00:07:16.973  -->  00:07:20.306
And we'll continue on in the next video.
