1
1

00:00:01,141  -->  00:00:02,669
<v Instructor>Hello everyone and welcome</v>
2

2

00:00:02,669  -->  00:00:04,995
to the lambda expressions lecture.
3

3

00:00:04,995  -->  00:00:06,048
So in this lecture we're going
4

4

00:00:06,048  -->  00:00:07,802
to be learning about lambda expressions,
5

5

00:00:07,802  -->  00:00:11,163
what they are, and how to use them.
6

6

00:00:11,163  -->  00:00:13,537
So we're gonna start with a brief presentation
7

7

00:00:13,537  -->  00:00:16,923
just describing lambda expressions purely in words,
8

8

00:00:16,923  -->  00:00:20,412
and then we'll learn how to do it in the live code session.
9

9

00:00:20,412  -->  00:00:23,503
So one of Pythons most useful tools,
10

10

00:00:23,503  -->  00:00:25,779
and a lot of times it's really confusing for beginners,
11

11

00:00:25,779  -->  00:00:29,121
is the lambda expression, and what lambda expressions
12

12

00:00:29,121  -->  00:00:32,760
basically allow us to do is create anonymous functions
13

13

00:00:32,760  -->  00:00:35,565
so just quickly make ad-hoc functions
14

14

00:00:35,565  -->  00:00:37,687
where you don't want to spend the time
15

15

00:00:37,687  -->  00:00:41,854
defining an entire function using a def statement.
16

16

00:00:42,823  -->  00:00:44,640
So what is lambda?
17

17

00:00:44,640  -->  00:00:47,700
Lambda's body is gonna be just a single one line expression,
18

18

00:00:47,700  -->  00:00:49,564
it's not gonna be a block of statements,
19

19

00:00:49,564  -->  00:00:51,896
and the lambda's body looks really similar
20

20

00:00:51,896  -->  00:00:55,295
to what we put in a def body's return statement,
21

21

00:00:55,295  -->  00:00:57,981
so you can simply type the results as an expression
22

22

00:00:57,981  -->  00:01:00,557
instead of explicitly returning it.
23

23

00:01:00,557  -->  00:01:02,404
And then because it's limited to just
24

24

00:01:02,404  -->  00:01:04,207
like a one line expression, it's gonna be
25

25

00:01:04,207  -->  00:01:06,957
less general than a def function.
26

26

00:01:07,890  -->  00:01:09,858
So when are you gonna use lambda?
27

27

00:01:09,858  -->  00:01:13,278
You can only squeeze design to limit programme nesting.
28

28

00:01:13,278  -->  00:01:15,403
So the issue with lambda is that
29

29

00:01:15,403  -->  00:01:17,692
it's designed for coding simple functions.
30

30

00:01:17,692  -->  00:01:19,840
If you want a larger task to be done
31

31

00:01:19,840  -->  00:01:22,700
you're gonna have to use def.
32

32

00:01:22,700  -->  00:01:23,909
Okay, so the best way to learn
33

33

00:01:23,909  -->  00:01:26,334
how to use lambda expressions is too slowly convert
34

34

00:01:26,334  -->  00:01:29,718
a normal def function into a lambda expression.
35

35

00:01:29,718  -->  00:01:30,811
So let's go ahead and hop over
36

36

00:01:30,811  -->  00:01:33,728
to the code to see how that's done.
37

37

00:01:35,127  -->  00:01:37,802
Okay, now we're at the lambda expressions
38

38

00:01:37,802  -->  00:01:39,963
Jupyter notebook, and I have it open here
39

39

00:01:39,963  -->  00:01:42,408
and this is basically what we're gonna all go through
40

40

00:01:42,408  -->  00:01:46,049
and a couple of examples during this lecture.
41

41

00:01:46,049  -->  00:01:48,855
So let's go ahead and get started
42

42

00:01:48,855  -->  00:01:50,676
and what we're gonna do is go ahead and
43

43

00:01:50,676  -->  00:01:52,864
jump to a live code session,
44

44

00:01:52,864  -->  00:01:57,199
so I'm gonna make a really simple def function
45

45

00:01:57,199  -->  00:02:00,609
using just normal syntax, I'm gonna say def space,
46

46

00:02:00,609  -->  00:02:03,460
gonna name my function square,
47

47

00:02:03,460  -->  00:02:07,229
it's gonna take a num as an argument,
48

48

00:02:07,229  -->  00:02:10,896
it's going to set a variable called results,
49

49

00:02:12,901  -->  00:02:14,484
square that number,
50

50

00:02:15,591  -->  00:02:18,841
and then it's gonna return the results.
51

51

00:02:19,952  -->  00:02:23,886
So that's my simple function, it's just squaring numbers.
52

52

00:02:23,886  -->  00:02:27,636
So if I call it square two, it releases four.
53

53

00:02:29,555  -->  00:02:31,230
Okay, so let's go ahead and continue
54

54

00:02:31,230  -->  00:02:32,596
breaking this down and you'll see
55

55

00:02:32,596  -->  00:02:34,944
that we're gonna slowly form it
56

56

00:02:34,944  -->  00:02:37,773
into a lambda expression, so
57

57

00:02:37,773  -->  00:02:40,940
how can I keep reducing this function.
58

58

00:02:42,469  -->  00:02:45,729
If you notice, I'm returning results
59

59

00:02:45,729  -->  00:02:47,286
and setting results as a variable
60

60

00:02:47,286  -->  00:02:48,495
but I actually don't need to do that,
61

61

00:02:48,495  -->  00:02:50,078
I could just return
62

62

00:02:51,439  -->  00:02:53,702
this num to the power of two, right,
63

63

00:02:53,702  -->  00:02:55,869
so I could just say return
64

64

00:02:57,626  -->  00:03:00,360
num to the power of two,
65

65

00:03:00,360  -->  00:03:01,554
and that's gonna be the same thing,
66

66

00:03:01,554  -->  00:03:02,925
I don't need to save this variable
67

67

00:03:02,925  -->  00:03:05,046
if I'm just gonna return it.
68

68

00:03:05,046  -->  00:03:08,259
So let's go ahead and make sure that works.
69

69

00:03:08,259  -->  00:03:11,413
So square of let's do four this time,
70

70

00:03:11,413  -->  00:03:13,909
and we get out 16 so that makes sense.
71

71

00:03:13,909  -->  00:03:17,826
Okay, so how can we put this all into one line?
72

72

00:03:19,318  -->  00:03:21,399
So Python, I know we've been making
73

73

00:03:21,399  -->  00:03:24,450
a big deal of white space for functions,
74

74

00:03:24,450  -->  00:03:28,033
but I could actually write this in one line
75

75

00:03:28,869  -->  00:03:32,546
in this fashion, def square num colon
76

76

00:03:32,546  -->  00:03:35,096
return num to the power of two.
77

77

00:03:35,096  -->  00:03:38,596
Now this is kind of bad styling, but it is
78

78

00:03:39,557  -->  00:03:42,384
okay syntax-wise to do that,
79

79

00:03:42,384  -->  00:03:44,417
although I wouldn't recommend doing that normally,
80

80

00:03:44,417  -->  00:03:46,145
but we're doing that just to
81

81

00:03:46,145  -->  00:03:49,101
slowly convert it into a one line lambda expression.
82

82

00:03:49,101  -->  00:03:52,026
So again, let's go ahead and do square of three
83

83

00:03:52,026  -->  00:03:53,767
and we get nine, so notice how
84

84

00:03:53,767  -->  00:03:55,567
in this format it still works.
85

85

00:03:55,567  -->  00:03:57,943
We have kind of this one line function.
86

86

00:03:57,943  -->  00:04:00,350
So this kind of form is the form
87

87

00:04:00,350  -->  00:04:04,425
that a lambda expression's gonna try to replicate.
88

88

00:04:04,425  -->  00:04:07,159
So when you're using lambda expressions,
89

89

00:04:07,159  -->  00:04:08,785
you're basically going to write
90

90

00:04:08,785  -->  00:04:11,914
kind of a one line version of a function.
91

91

00:04:11,914  -->  00:04:14,388
And the way we would convert this square function
92

92

00:04:14,388  -->  00:04:16,799
into a lambda expression would look like this,
93

93

00:04:16,799  -->  00:04:19,216
I would type lambda num colon
94

94

00:04:23,199  -->  00:04:25,199
num to the power of two.
95

95

00:04:26,535  -->  00:04:29,507
So the syntax is you write lambda,
96

96

00:04:29,507  -->  00:04:32,512
you write what it's gonna take in,
97

97

00:04:32,512  -->  00:04:35,676
and then you write colon and what you want
98

98

00:04:35,676  -->  00:04:37,500
the output to look like.
99

99

00:04:37,500  -->  00:04:39,396
So this is one of the most basic
100

100

00:04:39,396  -->  00:04:40,694
versions of a lambda expression,
101

101

00:04:40,694  -->  00:04:42,687
and notice how when I run that,
102

102

00:04:42,687  -->  00:04:45,379
Python's gonna treat it as a function.
103

103

00:04:45,379  -->  00:04:48,624
So I can actually get the function back
104

104

00:04:48,624  -->  00:04:50,928
by assigning a label to it
105

105

00:04:50,928  -->  00:04:53,937
and as we've gone over a little bit
106

106

00:04:53,937  -->  00:04:55,619
throughout the course, we can actually
107

107

00:04:55,619  -->  00:04:58,097
assign labels to functions.
108

108

00:04:58,097  -->  00:05:00,198
So I can say square is equal to
109

109

00:05:00,198  -->  00:05:02,115
that lambda expression.
110

110

00:05:03,144  -->  00:05:04,778
Okay now if I call square, you'll notice
111

111

00:05:04,778  -->  00:05:08,528
it works just as it did for the full function
112

112

00:05:09,924  -->  00:05:12,963
and just to make sure that it's actually
113

113

00:05:12,963  -->  00:05:14,846
taking its results from this lambda expression
114

114

00:05:14,846  -->  00:05:17,337
let's go ahead and put square two,
115

115

00:05:17,337  -->  00:05:19,534
put square two on ten, and notice
116

116

00:05:19,534  -->  00:05:21,597
you get the exact same thing.
117

117

00:05:21,597  -->  00:05:23,664
So that's the simplest breakdown
118

118

00:05:23,664  -->  00:05:25,614
of a lambda expression, and I'm just gonna
119

119

00:05:25,614  -->  00:05:27,540
go over it one more time.
120

120

00:05:27,540  -->  00:05:30,438
You can think of a lambda expression
121

121

00:05:30,438  -->  00:05:33,650
as basically kind of this one line
122

122

00:05:33,650  -->  00:05:36,678
condensed version of a function
123

123

00:05:36,678  -->  00:05:39,970
where you have lambda, what you're taking in
124

124

00:05:39,970  -->  00:05:41,482
and then what you wanna do with it
125

125

00:05:41,482  -->  00:05:43,010
separated by a colon.
126

126

00:05:43,010  -->  00:05:44,285
Now usually you actually don't save
127

127

00:05:44,285  -->  00:05:46,587
lambda expressions to a variable
128

128

00:05:46,587  -->  00:05:50,314
since you want what's called a anonymous function
129

129

00:05:50,314  -->  00:05:52,369
which means you never spend the time
130

130

00:05:52,369  -->  00:05:54,639
to actually save it, you usually run it
131

131

00:05:54,639  -->  00:05:56,928
within a context of your code
132

132

00:05:56,928  -->  00:05:59,832
where you just need something to quickly perform
133

133

00:05:59,832  -->  00:06:03,374
some sort of expression and then not worry about it later.
134

134

00:06:03,374  -->  00:06:07,413
So let's go ahead and go through a couple more examples
135

135

00:06:07,413  -->  00:06:10,404
and really drive this lambda syntax
136

136

00:06:10,404  -->  00:06:12,842
into our heads, so I'm gonna say
137

137

00:06:12,842  -->  00:06:16,342
let's make an example to check if a number
138

138

00:06:17,749  -->  00:06:20,499
is even using lambda expressions.
139

139

00:06:21,397  -->  00:06:23,230
So I would say lambda,
140

140

00:06:25,609  -->  00:06:28,026
I wanna take in a number, num
141

141

00:06:29,508  -->  00:06:31,177
and how do I check something is even,
142

142

00:06:31,177  -->  00:06:33,594
remember if the mod is equal,
143

143

00:06:34,761  -->  00:06:37,972
mod two is equal to zero, then you know it's even
144

144

00:06:37,972  -->  00:06:39,639
so I'm gonna say num
145

145

00:06:40,976  -->  00:06:42,893
mod two, equal to zero.
146

146

00:06:47,326  -->  00:06:49,804
And there's my even function, or function
147

147

00:06:49,804  -->  00:06:52,054
to return a boolean, right?
148

148

00:06:53,217  -->  00:06:55,518
So I can set that equal to even,
149

149

00:06:55,518  -->  00:06:57,619
that lambda expression
150

150

00:06:57,619  -->  00:07:00,427
and now I can check if numbers are even.
151

151

00:07:00,427  -->  00:07:02,313
So just like we did earlier,
152

152

00:07:02,313  -->  00:07:05,512
where we converted a function into lambda expression,
153

153

00:07:05,512  -->  00:07:07,196
let's work backwards now and convert
154

154

00:07:07,196  -->  00:07:08,885
this lambda expression to a function
155

155

00:07:08,885  -->  00:07:10,650
just to drive the point home.
156

156

00:07:10,650  -->  00:07:12,780
So what does this lambda expression actually
157

157

00:07:12,780  -->  00:07:15,596
trying to do that a function would?
158

158

00:07:15,596  -->  00:07:19,026
Well, it would look something like this, right?
159

159

00:07:19,026  -->  00:07:20,859
Even, take num, return
160

160

00:07:24,016  -->  00:07:26,183
the boolean if num mod two
161

161

00:07:28,229  -->  00:07:29,646
is equal to zero.
162

162

00:07:31,133  -->  00:07:35,151
And that's gonna be the exact same thing
163

163

00:07:35,151  -->  00:07:36,897
as that lambda expression.
164

164

00:07:36,897  -->  00:07:38,395
So you notice now instead of writing
165

165

00:07:38,395  -->  00:07:41,226
this entire syntax of death, we can just actually have
166

166

00:07:41,226  -->  00:07:44,239
one line lambda expressions throughout our code
167

167

00:07:44,239  -->  00:07:47,831
if we ever need just to do a quick function.
168

168

00:07:47,831  -->  00:07:50,406
Okay, let's go through a couple more examples.
169

169

00:07:50,406  -->  00:07:52,589
So let's say I wanted to make a function
170

170

00:07:52,589  -->  00:07:55,089
that grabs the first character
171

171

00:07:57,627  -->  00:07:58,627
of a string.
172

172

00:08:00,073  -->  00:08:01,484
So what would that look like?
173

173

00:08:01,484  -->  00:08:05,317
Well, I have lambda, I'm gonna take in some s,
174

174

00:08:06,561  -->  00:08:08,803
some string, and I know the first character's
175

175

00:08:08,803  -->  00:08:12,429
just gonna be zero index there, right?
176

176

00:08:12,429  -->  00:08:14,057
So again, I have my function,
177

177

00:08:14,057  -->  00:08:16,502
we can go ahead and save it if we want.
178

178

00:08:16,502  -->  00:08:18,789
Let's give it a variable.
179

179

00:08:18,789  -->  00:08:21,789
And now I'm gonna say first of hello
180

180

00:08:24,019  -->  00:08:26,943
and you notice it returns that zero index.
181

181

00:08:26,943  -->  00:08:29,069
Okay, so let's move along, let's see
182

182

00:08:29,069  -->  00:08:30,577
how we could reverse the string.
183

183

00:08:30,577  -->  00:08:32,965
We've seen this a couple times throughout the course,
184

184

00:08:32,965  -->  00:08:34,734
but remember to reverse a string,
185

185

00:08:34,734  -->  00:08:36,951
you take it in, that s
186

186

00:08:36,951  -->  00:08:39,527
and then you can actually just
187

187

00:08:39,527  -->  00:08:42,017
go through it backwards for indexing.
188

188

00:08:42,017  -->  00:08:44,627
Hopefully you'll remember this from the indexing lecture.
189

189

00:08:44,627  -->  00:08:46,117
There's our function, let's go ahead
190

190

00:08:46,117  -->  00:08:50,106
and set it to a variable label called rev
191

191

00:08:50,106  -->  00:08:51,606
and say rev hello.
192

192

00:08:53,580  -->  00:08:55,223
And you'll notice it's reversed.
193

193

00:08:55,223  -->  00:08:59,040
Okay, so moving on to a little more advanced
194

194

00:08:59,040  -->  00:09:01,361
we can, just like a normal function,
195

195

00:09:01,361  -->  00:09:05,528
accept more than one argument into a lambda expression.
196

196

00:09:06,481  -->  00:09:08,537
So let's go ahead and see what that looks like.
197

197

00:09:08,537  -->  00:09:10,472
Let's say I wanted to add two numbers
198

198

00:09:10,472  -->  00:09:12,422
together as a function.
199

199

00:09:12,422  -->  00:09:13,993
So let's say I made a function,
200

200

00:09:13,993  -->  00:09:16,401
and this is just a normal def function
201

201

00:09:16,401  -->  00:09:19,401
called adder, and it took x and y
202

202

00:09:21,634  -->  00:09:24,301
and it returned the sum of them.
203

203

00:09:26,738  -->  00:09:30,094
So if I say adder, I could say add,
204

204

00:09:30,094  -->  00:09:33,094
let's say 10 and 12, we get 22 back.
205

205

00:09:34,103  -->  00:09:36,286
So now let's breakdown this function
206

206

00:09:36,286  -->  00:09:38,334
that takes in multiple arguments
207

207

00:09:38,334  -->  00:09:41,639
and turn it into a lambda expression.
208

208

00:09:41,639  -->  00:09:43,472
So I would say lambda,
209

209

00:09:44,962  -->  00:09:46,929
I'm gonna take in two arguments,
210

210

00:09:46,929  -->  00:09:48,734
and you'll notice I separate them by commas
211

211

00:09:48,734  -->  00:09:51,733
just like I would in a normal function.
212

212

00:09:51,733  -->  00:09:52,912
And then what do I wanna return,
213

213

00:09:52,912  -->  00:09:56,412
I wanna return x plus y, and that's it.
214

214

00:09:58,102  -->  00:10:01,269
And then I could, say, call this adder
215

215

00:10:02,328  -->  00:10:05,161
and now if I call adder in my code
216

216

00:10:06,526  -->  00:10:10,541
you'll notice I can say 30 30 and I get 60 out
217

217

00:10:10,541  -->  00:10:13,694
so lambda expressions are really gonna shine
218

218

00:10:13,694  -->  00:10:15,614
and be used a lot when they're used
219

219

00:10:15,614  -->  00:10:19,226
in conjunction with three main functions,
220

220

00:10:19,226  -->  00:10:21,976
map, filter, and reduce, and each
221

221

00:10:24,140  -->  00:10:26,571
of those functions actually has its own lecture
222

222

00:10:26,571  -->  00:10:28,521
so feel free to explore them if
223

223

00:10:28,521  -->  00:10:30,753
you're more interested in lambda functions
224

224

00:10:30,753  -->  00:10:33,457
but you'll be introduced to these three functions
225

225

00:10:33,457  -->  00:10:36,690
specifically since they have a lecture each.
226

226

00:10:36,690  -->  00:10:41,610
Okay, so, there's a really, really great blog post
227

227

00:10:41,610  -->  00:10:43,919
that I highly recommend you read
228

228

00:10:43,919  -->  00:10:47,977
after you go through this lesson and it's called,
229

229

00:10:47,977  -->  00:10:50,724
it's at this site called Python Conquers The Universe
230

230

00:10:50,724  -->  00:10:53,757
and it also has a great breakdown on lambda expressions
231

231

00:10:53,757  -->  00:10:56,288
and some more explanations for common confusion
232

232

00:10:56,288  -->  00:10:58,883
so if you click that link in the Jupyter notebook
233

233

00:10:58,883  -->  00:11:01,201
it'll take you to this website right here,
234

234

00:11:01,201  -->  00:11:03,135
Python Conquers The Universe,
235

235

00:11:03,135  -->  00:11:04,739
and he says Yet Another Lambda Tutorial,
236

236

00:11:04,739  -->  00:11:05,932
there's actually a tonne of tutorials
237

237

00:11:05,932  -->  00:11:07,223
out there for lambda so you can
238

238

00:11:07,223  -->  00:11:09,923
check out his own links as well,
239

239

00:11:09,923  -->  00:11:12,330
but again, he goes over
240

240

00:11:12,330  -->  00:11:15,105
basically the necessities of what lambda's good for
241

241

00:11:15,105  -->  00:11:17,406
and right now you may not think
242

242

00:11:17,406  -->  00:11:19,466
that you'll be using lambda a lot
243

243

00:11:19,466  -->  00:11:22,675
instead of just writing a full def function
244

244

00:11:22,675  -->  00:11:25,556
but you'll notice as you go throughout your code
245

245

00:11:25,556  -->  00:11:28,075
and don't need an entire function,
246

246

00:11:28,075  -->  00:11:29,723
you just need a quick expression,
247

247

00:11:29,723  -->  00:11:31,799
lambda will come in super useful.
248

248

00:11:31,799  -->  00:11:35,470
So as far as his blog post, he goes more into
249

249

00:11:35,470  -->  00:11:37,917
why you should use lambda and more
250

250

00:11:37,917  -->  00:11:41,843
of the theory behind lambda than actual coding,
251

251

00:11:41,843  -->  00:11:43,554
but I think it's a great blog post
252

252

00:11:43,554  -->  00:11:45,327
and I highly recommend you read it
253

253

00:11:45,327  -->  00:11:46,574
after you go through this lesson
254

254

00:11:46,574  -->  00:11:49,855
and understand how to build your own lambda expressions.
255

255

00:11:49,855  -->  00:11:53,653
So let's go over quickly what we learned in this lecture.
256

256

00:11:53,653  -->  00:11:55,649
So we learned about lambda expressions,
257

257

00:11:55,649  -->  00:11:59,532
how they're pretty useful as anonymous functions,
258

258

00:11:59,532  -->  00:12:02,319
and these ad-hoc expressions,
259

259

00:12:02,319  -->  00:12:03,288
and we notice that they're made
260

260

00:12:03,288  -->  00:12:05,021
of a single expressions, they're not
261

261

00:12:05,021  -->  00:12:07,102
a block of statements like you usually would
262

262

00:12:07,102  -->  00:12:09,542
for a full dev function.
263

263

00:12:09,542  -->  00:12:12,459
So we have this def square function
264

264

00:12:13,473  -->  00:12:17,277
and we slowly broke it down until we got
265

265

00:12:17,277  -->  00:12:21,195
a lambda expression that served a similar purpose.
266

266

00:12:21,195  -->  00:12:24,511
And then, our own lecture here in the live coding
267

267

00:12:24,511  -->  00:12:26,741
we then created a lambda expression
268

268

00:12:26,741  -->  00:12:29,978
and kinda did the reverse, broke it back into,
269

269

00:12:29,978  -->  00:12:33,580
or built it back into a full function.
270

270

00:12:33,580  -->  00:12:35,747
And then we went through a couple examples
271

271

00:12:35,747  -->  00:12:38,179
of lambda expressions.
272

272

00:12:38,179  -->  00:12:39,872
So just to reiterate, remember,
273

273

00:12:39,872  -->  00:12:43,372
a lambda expression takes the form lambda,
274

274

00:12:46,254  -->  00:12:49,664
some item or object, and then what you wanna do
275

275

00:12:49,664  -->  00:12:52,462
to that item or object, so you could
276

276

00:12:52,462  -->  00:12:54,795
maybe take the length of it.
277

277

00:12:57,521  -->  00:13:00,771
And in context, usually you don't save,
278

278

00:13:02,706  -->  00:13:05,114
let's call this length check,
279

279

00:13:05,114  -->  00:13:08,942
you don't save a lambda expression to a
280

280

00:13:08,942  -->  00:13:10,643
variable like this, you use it
281

281

00:13:10,643  -->  00:13:15,026
in conjunction with map, filter, and reduce,
282

282

00:13:15,026  -->  00:13:16,559
which I know doesn't make a lot of sense right now
283

283

00:13:16,559  -->  00:13:18,567
since you're not familiar with these functions
284

284

00:13:18,567  -->  00:13:20,290
but you'll see that when you're using
285

285

00:13:20,290  -->  00:13:22,243
map, filter, and reduce,
286

286

00:13:22,243  -->  00:13:23,576
you'll actually just end up passing
287

287

00:13:23,576  -->  00:13:25,824
this lambda expression as the argument
288

288

00:13:25,824  -->  00:13:28,741
instead of saving it to a variable.
289

289

00:13:29,926  -->  00:13:33,152
So now we can do length check.
290

290

00:13:33,152  -->  00:13:34,735
Let's say a string,
291

291

00:13:35,837  -->  00:13:38,920
how many chars does this string have?
292

292

00:13:45,653  -->  00:13:46,486
37, okay.
293

293

00:13:47,985  -->  00:13:49,814
So go ahead and make sure you understand
294

294

00:13:49,814  -->  00:13:51,930
at least how to read a lambda expression
295

295

00:13:51,930  -->  00:13:54,577
and how to build out simple lambda expressions.
296

296

00:13:54,577  -->  00:13:56,079
Don't worry too much about implementing
297

297

00:13:56,079  -->  00:13:58,162
these into your actual code.
298

298

00:13:58,162  -->  00:14:00,759
As you get more and more advanced in Python,
299

299

00:14:00,759  -->  00:14:02,390
you'll suddenly feel like, hey, maybe I can
300

300

00:14:02,390  -->  00:14:04,080
use a lambda expression here instead
301

301

00:14:04,080  -->  00:14:06,560
of writing this full function.
302

302

00:14:06,560  -->  00:14:08,685
Okay, so that's it for this lecture
303

303

00:14:08,685  -->  00:14:10,631
on lambda expressions, hope you enjoyed it,
304

304

00:14:10,631  -->  00:14:12,400
and hope you got something useful out of it
305

305

00:14:12,400  -->  00:14:14,292
and I'll see you at the next lecture.
306

306

00:14:14,292  -->  00:14:16,125
Okay, thanks everyone.
