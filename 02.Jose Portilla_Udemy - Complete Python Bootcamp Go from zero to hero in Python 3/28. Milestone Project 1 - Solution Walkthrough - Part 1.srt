1
1

00:00:01,323  -->  00:00:02,374
<v Instructor>Hello everyone, and welcome to</v>
2

2

00:00:02,374  -->  00:00:06,278
the milestone project one complete solution walkthrough.
3

3

00:00:06,278  -->  00:00:08,065
In this lecture, what we're going to be doing
4

4

00:00:08,065  -->  00:00:11,105
is going through the entire walkthrough solution,
5

5

00:00:11,105  -->  00:00:14,213
each of the steps, solving those functions.
6

6

00:00:14,213  -->  00:00:17,012
So we're going to be going through each major function.
7

7

00:00:17,012  -->  00:00:20,059
Try to solve and create the function on your own first,
8

8

00:00:20,059  -->  00:00:21,806
but let's go ahead and jump,
9

9

00:00:21,806  -->  00:00:23,956
and get started to the Jupyter notebook,
10

10

00:00:23,956  -->  00:00:26,556
and see what's going on.
11

11

00:00:26,556  -->  00:00:27,851
Okay, so here we are at the
12

12

00:00:27,851  -->  00:00:31,137
milestone project one walkthrough steps workbook.
13

13

00:00:31,137  -->  00:00:34,956
What I've done is I've downloaded this Jupyter notebook
14

14

00:00:34,956  -->  00:00:37,980
to my local computer so we can actually go along,
15

15

00:00:37,980  -->  00:00:40,752
go through each of these steps, fill out the functions,
16

16

00:00:40,752  -->  00:00:43,029
and make sure we match up correctly
17

17

00:00:43,029  -->  00:00:44,820
with the solutions notebook.
18

18

00:00:44,820  -->  00:00:45,753
So if you want to follow along
19

19

00:00:45,753  -->  00:00:47,379
with the actual coding that I'm doing,
20

20

00:00:47,379  -->  00:00:48,436
you can go to the other notebook,
21

21

00:00:48,436  -->  00:00:49,940
which is Milestone Project One:
22

22

00:00:49,940  -->  00:00:51,727
Full Walkthrough Code Solution.
23

23

00:00:51,727  -->  00:00:53,269
And this is basically what we're going to be doing,
24

24

00:00:53,269  -->  00:00:54,612
I'm going to be typing this out
25

25

00:00:54,612  -->  00:00:58,231
and explaining the logic along the way.
26

26

00:00:58,231  -->  00:01:00,814
Let's go ahead and get started.
27

27

00:01:01,965  -->  00:01:03,752
So again, if you want to follow along here,
28

28

00:01:03,752  -->  00:01:06,395
what you should be doing is you should have downloaded
29

29

00:01:06,395  -->  00:01:07,818
this notebook, Milestone Project One:
30

30

00:01:07,818  -->  00:01:09,155
Walkthrough Steps Workbook,
31

31

00:01:09,155  -->  00:01:12,359
and be following me working through it.
32

32

00:01:12,359  -->  00:01:15,287
And before we do each step, I'm going to really stress
33

33

00:01:15,287  -->  00:01:17,032
that you should pause the video
34

34

00:01:17,032  -->  00:01:18,742
and really try to solve this on you own.
35

35

00:01:18,742  -->  00:01:20,040
It's going to be really helpful
36

36

00:01:20,040  -->  00:01:23,569
if you give it a fair shot at solving on your own.
37

37

00:01:23,569  -->  00:01:25,558
Okay, with that being said,
38

38

00:01:25,558  -->  00:01:27,103
first thing we're going to say is
39

39

00:01:27,103  -->  00:01:31,210
from underscore underscore future import the print_function.
40

40

00:01:31,210  -->  00:01:33,775
I'm just doing that so I can always use the print function,
41

41

00:01:33,775  -->  00:01:37,810
so for example I can do something like this.
42

42

00:01:37,810  -->  00:01:41,366
"Hello" Instead of using the print statement,
43

43

00:01:41,366  -->  00:01:42,912
which would have looked like that.
44

44

00:01:42,912  -->  00:01:45,230
That's just to make sure whether people are using
45

45

00:01:45,230  -->  00:01:48,767
Python two or three, all the code matches up.
46

46

00:01:48,767  -->  00:01:51,207
So if you're using Python two, like I am right now,
47

47

00:01:51,207  -->  00:01:53,199
go ahead and put this line here.
48

48

00:01:53,199  -->  00:01:54,907
If you're just using Python three,
49

49

00:01:54,907  -->  00:01:56,407
you don't have to worry about this line,
50

50

00:01:56,407  -->  00:01:59,372
you can just use the print function naturally.
51

51

00:01:59,372  -->  00:02:02,659
One other note, that I want to make sure you guys realise,
52

52

00:02:02,659  -->  00:02:05,653
is Python two users, you'll notice throughout some
53

53

00:02:05,653  -->  00:02:06,486
of the functions we're going to be
54

54

00:02:06,486  -->  00:02:10,043
asking for input from the player,
55

55

00:02:10,043  -->  00:02:12,033
Python two users should use
56

56

00:02:12,033  -->  00:02:15,059
"raw_input" to get the player input.
57

57

00:02:15,059  -->  00:02:18,712
Python three users should just use "input".
58

58

00:02:18,712  -->  00:02:20,094
We'll go over that later on,
59

59

00:02:20,094  -->  00:02:23,055
when we actually use those functions.
60

60

00:02:23,055  -->  00:02:25,378
Alright, so what's our first step?
61

61

00:02:25,378  -->  00:02:26,761
First step is to write a function
62

62

00:02:26,761  -->  00:02:28,876
that can print out a board.
63

63

00:02:28,876  -->  00:02:30,706
We're going to set up our board as a list,
64

64

00:02:30,706  -->  00:02:32,779
where each index, one through nine,
65

65

00:02:32,779  -->  00:02:35,418
corresponds with a number on a number pad.
66

66

00:02:35,418  -->  00:02:40,130
So you get a three by three board representation.
67

67

00:02:40,130  -->  00:02:41,875
Here, what I've done is said
68

68

00:02:41,875  -->  00:02:45,812
"from Ipython.display import clear_output."
69

69

00:02:45,812  -->  00:02:48,297
That just allows us to clear the output.
70

70

00:02:48,297  -->  00:02:51,238
So I'll show you an example of that.
71

71

00:02:51,238  -->  00:02:53,155
If I say print "hello,"
72

72

00:02:56,209  -->  00:02:58,361
I get "hello" here.
73

73

00:02:58,361  -->  00:03:02,823
Let me go ahead and run this, so I've imported clear_output.
74

74

00:03:02,823  -->  00:03:05,417
So I just ran the cell, but now I'm going to say
75

75

00:03:05,417  -->  00:03:09,584
"clear_output", no other arguments, close the parentheses,
76

76

00:03:11,465  -->  00:03:13,703
and you'll notice it will basically print "hello,"
77

77

00:03:13,703  -->  00:03:16,589
and then clear the output so you don't get anything out.
78

78

00:03:16,589  -->  00:03:19,596
And if I add another print statement after that,
79

79

00:03:19,596  -->  00:03:22,805
like "world", then I just get "world" out,
80

80

00:03:22,805  -->  00:03:25,035
because it printed "hello," it cleared the output,
81

81

00:03:25,035  -->  00:03:26,380
and then printed "world."
82

82

00:03:26,380  -->  00:03:27,640
It happened so fast that you only end up
83

83

00:03:27,640  -->  00:03:30,200
seeing "world" at the end, but I just wanted to clarify
84

84

00:03:30,200  -->  00:03:32,719
that's what clear_output is doing.
85

85

00:03:32,719  -->  00:03:35,282
That's for Jupyter Notebook, you may need to use
86

86

00:03:35,282  -->  00:03:38,493
another output, or clearing of output,
87

87

00:03:38,493  -->  00:03:42,267
if you're using a different IDE or development environment.
88

88

00:03:42,267  -->  00:03:44,461
This is what you have to do for Jupyter Notebook.
89

89

00:03:44,461  -->  00:03:48,294
Say "from Ipython.display import clear_output"
90

90

00:03:49,419  -->  00:03:51,904
Okay, you can go ahead and google search
91

91

00:03:51,904  -->  00:03:54,231
for your particular developer environment
92

92

00:03:54,231  -->  00:03:57,546
what you should do to clear the output.
93

93

00:03:57,546  -->  00:03:58,563
So first thing we're going to do is
94

94

00:03:58,563  -->  00:04:00,754
write a function that can print out the board
95

95

00:04:00,754  -->  00:04:02,583
and set up our board as a list
96

96

00:04:02,583  -->  00:04:04,408
where each index, as I mentioned of course,
97

97

00:04:04,408  -->  00:04:07,008
corresponds to a number on the number pad.
98

98

00:04:07,008  -->  00:04:10,540
First thing I'm going to do is say "clear_output".
99

99

00:04:10,540  -->  00:04:13,016
That way every time I call "display_board",
100

100

00:04:13,016  -->  00:04:15,609
all the previous output is cleared,
101

101

00:04:15,609  -->  00:04:18,489
and then I can actually print out the board.
102

102

00:04:18,489  -->  00:04:20,519
Alright, so here again I'm going to stress that you
103

103

00:04:20,519  -->  00:04:22,595
pause the video and really try to think
104

104

00:04:22,595  -->  00:04:25,517
how can you display this board?
105

105

00:04:25,517  -->  00:04:28,726
Alright, now lets go ahead and continue.
106

106

00:04:28,726  -->  00:04:31,449
Hopefully you've had a good shot at this now,
107

107

00:04:31,449  -->  00:04:35,349
but when I say print board, all you have to do is,
108

108

00:04:35,349  -->  00:04:37,988
let's go ahead and practise printing an empty board.
109

109

00:04:37,988  -->  00:04:41,731
So an empty board might look something like this.
110

110

00:04:41,731  -->  00:04:45,898
If I say, just a string that looks something like this,
111

111

00:04:48,553  -->  00:04:53,231
then right below it I'll print, maybe another string,
112

112

00:04:53,231  -->  00:04:55,814
that looks something like this.
113

113

00:04:59,200  -->  00:05:02,533
Maybe it has a couple more dashes there.
114

114

00:05:04,325  -->  00:05:05,989
But this is basically all this step
115

115

00:05:05,989  -->  00:05:08,058
was trying to make you do.
116

116

00:05:08,058  -->  00:05:10,943
Just print out a board right now.
117

117

00:05:10,943  -->  00:05:14,187
And then later on we're gunna, in just a second,
118

118

00:05:14,187  -->  00:05:17,787
we're going to add what we would need to add
119

119

00:05:17,787  -->  00:05:19,467
to take in a board and print it out.
120

120

00:05:19,467  -->  00:05:21,782
But let's go ahead and just practise this.
121

121

00:05:21,782  -->  00:05:26,740
If I call "display_board", lets see, and pass in a board,
122

122

00:05:26,740  -->  00:05:30,963
in this case, I'm just going to pass in an empty list,
123

123

00:05:30,963  -->  00:05:33,524
you notice we get a very simple board.
124

124

00:05:33,524  -->  00:05:35,761
And we're actually missing a couple lines here,
125

125

00:05:35,761  -->  00:05:37,548
but we'll get to that in a second.
126

126

00:05:37,548  -->  00:05:41,651
What we're going to do now, is go ahead and assume
127

127

00:05:41,651  -->  00:05:44,738
that our board is a list that looks something like this.
128

128

00:05:44,738  -->  00:05:48,821
The board is going to be a list from zero to ten,
129

129

00:05:50,552  -->  00:05:53,435
and its going to have corresponding strings.
130

130

00:05:53,435  -->  00:05:56,648
So, we'll ignore the zero index, so don't worry about that,
131

131

00:05:56,648  -->  00:05:58,072
but it's going to look something like this.
132

132

00:05:58,072  -->  00:06:01,077
Where each of these indexes
133

133

00:06:01,077  -->  00:06:02,786
matches up with some sort of position.
134

134

00:06:02,786  -->  00:06:04,779
So if I do something like this,
135

135

00:06:04,779  -->  00:06:07,137
blah blah blah, all the way on,
136

136

00:06:07,137  -->  00:06:08,151
what we're going to do is have a board
137

137

00:06:08,151  -->  00:06:10,915
that looks something like that.
138

138

00:06:10,915  -->  00:06:12,053
So I'm going to go ahead and
139

139

00:06:12,053  -->  00:06:13,842
there's a lot of print statements here,
140

140

00:06:13,842  -->  00:06:15,917
so I'm going to copy them from the solution notebook,
141

141

00:06:15,917  -->  00:06:18,000
which you can do as well,
142

142

00:06:19,898  -->  00:06:21,974
and then I'm just going to go ahead and call this,
143

143

00:06:21,974  -->  00:06:23,603
and explain what it looks like.
144

144

00:06:23,603  -->  00:06:26,037
I'm going to go ahead and make a board,
145

145

00:06:26,037  -->  00:06:30,416
going to say it's 'X', so we're just going to have all 'X's,
146

146

00:06:30,416  -->  00:06:32,916
and lets multiply this by ten.
147

147

00:06:34,642  -->  00:06:38,225
And say "display_board", call in the board.
148

148

00:06:39,111  -->  00:06:41,025
Let's go ahead and see what that looks like.
149

149

00:06:41,025  -->  00:06:43,497
Alright, so now we have a board full of 'X's.
150

150

00:06:43,497  -->  00:06:47,119
And I can edit this list so that I have zeros in there too,
151

151

00:06:47,119  -->  00:06:49,025
or "O"s I should say,
152

152

00:06:49,025  -->  00:06:53,192
so I can do something like 'X', 'X', then let's have,
153

153

00:06:55,893  -->  00:06:58,810
copy paste this, and let's do 'O's.
154

154

00:07:06,616  -->  00:07:09,007
And if you notice, I get my list index out of range
155

155

00:07:09,007  -->  00:07:12,007
because I need to have one more there.
156

156

00:07:12,007  -->  00:07:15,178
The reason for that is because we're using one through nine,
157

157

00:07:15,178  -->  00:07:17,699
so that the numbers correspond with a number pad.
158

158

00:07:17,699  -->  00:07:20,502
So if you notice up here I'm indexing nine,
159

159

00:07:20,502  -->  00:07:21,595
and that's because we're always just
160

160

00:07:21,595  -->  00:07:22,858
going to ignore the zero index.
161

161

00:07:22,858  -->  00:07:25,422
So this can actually be pretty much
162

162

00:07:25,422  -->  00:07:26,932
anything you want it to be,
163

163

00:07:26,932  -->  00:07:28,640
it's just always going to get ignored
164

164

00:07:28,640  -->  00:07:31,319
for this particular displaying of the board.
165

165

00:07:31,319  -->  00:07:33,270
That way, if you notice here,
166

166

00:07:33,270  -->  00:07:36,525
one two there, four five six, seven eight nine,
167

167

00:07:36,525  -->  00:07:40,385
it looks and matches up with the numbers of a number pad.
168

168

00:07:40,385  -->  00:07:42,907
So that's the function "display_board".
169

169

00:07:42,907  -->  00:07:45,019
Lets go ahead and break it down one more time,
170

170

00:07:45,019  -->  00:07:47,293
just zoom in, what's really going on here.
171

171

00:07:47,293  -->  00:07:49,041
We're printing a line, that's the top
172

172

00:07:49,041  -->  00:07:50,825
of the tic tac to board.
173

173

00:07:50,825  -->  00:07:53,545
Here, is where we're actually taking
174

174

00:07:53,545  -->  00:07:56,669
the string values from that list,
175

175

00:07:56,669  -->  00:07:59,065
and then adding empty strings,
176

176

00:07:59,065  -->  00:08:02,397
plus those vertical dash marks,
177

177

00:08:02,397  -->  00:08:05,064
in order to construct the board.
178

178

00:08:08,772  -->  00:08:12,469
Okay, so that's our "display_board" function.
179

179

00:08:12,469  -->  00:08:14,823
Again, we're just taking in a board,
180

180

00:08:14,823  -->  00:08:17,306
we're assuming that it already has one to nine
181

181

00:08:17,306  -->  00:08:20,513
correspondents with some sort of number pad,
182

182

00:08:20,513  -->  00:08:22,342
and then we're just printing out the values
183

183

00:08:22,342  -->  00:08:24,211
so that we get something that looks like this.
184

184

00:08:24,211  -->  00:08:27,129
You can choose however you want to display the board itself,
185

185

00:08:27,129  -->  00:08:30,135
as far as dashes or lines, but this is the basic premise
186

186

00:08:30,135  -->  00:08:34,199
of what this function and step was trying to get you to do.
187

187

00:08:34,199  -->  00:08:36,675
Okay, so we've done that,
188

188

00:08:36,675  -->  00:08:39,277
lets go ahead and go on to the next one.
189

189

00:08:39,277  -->  00:08:41,722
The next one is "Write a function that can take
190

190

00:08:41,722  -->  00:08:46,184
in a player input and assign their marker as 'X' or 'O'.
191

191

00:08:46,184  -->  00:08:48,540
What we want to think about is using while loops
192

192

00:08:48,540  -->  00:08:52,687
to continually ask until you get a correct answer."
193

193

00:08:52,687  -->  00:08:56,186
Alright, I encourage you, again, to pause the video now,
194

194

00:08:56,186  -->  00:09:00,088
and see if you can solve this on your own.
195

195

00:09:00,088  -->  00:09:03,012
Alright, let's go ahead and get started.
196

196

00:09:03,012  -->  00:09:07,683
I'm going to say "marker" equal to just an empty string,
197

197

00:09:07,683  -->  00:09:09,954
that way I actually define my variable
198

198

00:09:09,954  -->  00:09:11,985
inside this function called marker,
199

199

00:09:11,985  -->  00:09:16,152
and what I'm going to say is while not marker equal to
200

200

00:09:19,952  -->  00:09:23,285
either an 'O' or marker equal to an 'X'.
201

201

00:09:30,391  -->  00:09:32,098
I'm going to ask for the user's input,
202

202

00:09:32,098  -->  00:09:35,848
so I'm going to say "marker = raw_input"
203

203

00:09:38,353  -->  00:09:40,547
and for this input function it's going to be
204

204

00:09:40,547  -->  00:09:44,810
"raw_input" for Python two, just "input" for Python three.
205

205

00:09:44,810  -->  00:09:48,810
I can say whatever I want the actual line to be,
206

206

00:09:49,812  -->  00:09:53,979
so I can say, "Player 1: Do you want to be X or O?"
207

207

00:09:59,762  -->  00:10:02,280
and what I'm going to do is I'm going to call upper on it,
208

208

00:10:02,280  -->  00:10:03,984
to automatically uppercase it,
209

209

00:10:03,984  -->  00:10:07,963
so that it matches with uppercase O or uppercase X,
210

210

00:10:07,963  -->  00:10:09,142
and then I'm going to say
211

211

00:10:09,142  -->  00:10:12,142
"if marker is equal to uppercase X,"
212

212

00:10:13,486  -->  00:10:16,903
I'm going to return a tuple in this case.
213

213

00:10:17,993  -->  00:10:20,588
Again, you have some flexibility on what you want to return,
214

214

00:10:20,588  -->  00:10:25,018
the way I've constructed this is so that it returns a tuple.
215

215

00:10:25,018  -->  00:10:28,259
So I can later on use something called tuple unpacking,
216

216

00:10:28,259  -->  00:10:32,893
which I'll show you much later on in this solution.
217

217

00:10:32,893  -->  00:10:36,389
But this is basically assigning player one and player two,
218

218

00:10:36,389  -->  00:10:39,604
or the reverse, player one and player two,
219

219

00:10:39,604  -->  00:10:41,998
based on that tuple position index.
220

220

00:10:41,998  -->  00:10:43,910
Let's go ahead and explore this function,
221

221

00:10:43,910  -->  00:10:46,789
make sure it makes sense to us.
222

222

00:10:46,789  -->  00:10:49,622
Alright, so I call "player_input",
223

223

00:10:50,622  -->  00:10:52,274
and I'm just going to run this.
224

224

00:10:52,274  -->  00:10:55,159
And then I see a little, you see it has an asterisk here,
225

225

00:10:55,159  -->  00:10:57,604
that means it's running, but that actually means,
226

226

00:10:57,604  -->  00:11:00,362
because I have input, it's waiting for an input.
227

227

00:11:00,362  -->  00:11:02,034
So we get this little dialogue,
228

228

00:11:02,034  -->  00:11:04,061
says "Player 1: Do you want to be X or O?"
229

229

00:11:04,061  -->  00:11:07,107
So that's coming from this string here, in raw_input.
230

230

00:11:07,107  -->  00:11:09,190
And I'm going to say "x".
231

231

00:11:11,129  -->  00:11:15,195
And then you notice it just returns X and O as our output.
232

232

00:11:15,195  -->  00:11:16,374
So that makes sense, let's just go ahead
233

233

00:11:16,374  -->  00:11:18,364
and run this again, type in O.
234

234

00:11:18,364  -->  00:11:21,281
Notice, whether I put a lowercase o
235

235

00:11:22,226  -->  00:11:25,433
or if I put an uppercase O, it still works
236

236

00:11:25,433  -->  00:11:29,412
because I called ".upper " here.
237

237

00:11:29,412  -->  00:11:30,472
Let's go ahead and check,
238

238

00:11:30,472  -->  00:11:33,889
what if I put in the wrong type of value?
239

239

00:11:34,781  -->  00:11:36,281
If I put in a "2"?
240

240

00:11:37,420  -->  00:11:40,018
You'll notice, because it says "while not",
241

241

00:11:40,018  -->  00:11:42,131
the markers equal to O or X,
242

242

00:11:42,131  -->  00:11:44,405
it's just going to keep asking for this raw_input.
243

243

00:11:44,405  -->  00:11:46,438
So that's a great way to use a while loop,
244

244

00:11:46,438  -->  00:11:50,605
to keep asking if you get the wrong type of inputs.
245

245

00:11:52,171  -->  00:11:54,688
And then once I actually put in a correct one,
246

246

00:11:54,688  -->  00:11:57,254
it returns the correct tuple assignment there.
247

247

00:11:57,254  -->  00:11:58,091
You'll see later one why
248

248

00:11:58,091  -->  00:12:01,591
we actually return tuples in our function.
249

249

00:12:02,727  -->  00:12:06,144
Alright, so that's it for "player_input".
250

250

00:12:07,137  -->  00:12:10,504
Let's go ahead and move on to step three.
251

251

00:12:10,504  -->  00:12:13,599
But before we do, just let me break this down one more time,
252

252

00:12:13,599  -->  00:12:16,628
we're setting a variable called "marker" as an empty string,
253

253

00:12:16,628  -->  00:12:18,990
it's just, there's no space there.
254

254

00:12:18,990  -->  00:12:22,690
Then we're saying, while not marker is equal to O or X,
255

255

00:12:22,690  -->  00:12:24,962
which is the reason we set it as a empty string,
256

256

00:12:24,962  -->  00:12:27,316
so we don't set it beforehand as O or X,
257

257

00:12:27,316  -->  00:12:30,522
otherwise this while not loop would never execute.
258

258

00:12:30,522  -->  00:12:34,610
We say "raw_input" "Player 1: Do you want to be X or O?"
259

259

00:12:34,610  -->  00:12:35,718
So if I just take this line,
260

260

00:12:35,718  -->  00:12:36,753
just to make sure you guys understand
261

261

00:12:36,753  -->  00:12:39,021
what raw_input is doing,
262

262

00:12:39,021  -->  00:12:40,604
it's just going to.
263

263

00:12:42,850  -->  00:12:45,931
If I just say, "answer equal to raw_input"
264

264

00:12:45,931  -->  00:12:49,381
and run this cell, say, "Player do you want to be X or O?"
265

265

00:12:49,381  -->  00:12:53,935
and I put in some value here and click enter,
266

266

00:12:53,935  -->  00:12:55,596
then if I check what my answer is,
267

267

00:12:55,596  -->  00:12:58,403
it just sets it equal to a string version
268

268

00:12:58,403  -->  00:13:00,596
of whatever you put in.
269

269

00:13:00,596  -->  00:13:02,449
What'S nice about this though,
270

270

00:13:02,449  -->  00:13:04,173
using raw_input in Python two,
271

271

00:13:04,173  -->  00:13:07,139
if I put in a "2", and click enter,
272

272

00:13:07,139  -->  00:13:11,079
it'll automatically still keep it as a string.
273

273

00:13:11,079  -->  00:13:12,297
So just keep that in mind, again,
274

274

00:13:12,297  -->  00:13:15,342
if you're using Python three, this should be "input",
275

275

00:13:15,342  -->  00:13:17,820
Python two, this should be "raw_input".
276

276

00:13:17,820  -->  00:13:19,897
So that's all that functions doing.
277

277

00:13:19,897  -->  00:13:21,847
And upper, just to remind ourselves,
278

278

00:13:21,847  -->  00:13:26,808
if I have something like "hello" and call upper on it,
279

279

00:13:26,808  -->  00:13:30,419
it will just uppercase everything.
280

280

00:13:30,419  -->  00:13:33,467
Alright, that's it for our player_input function.
281

281

00:13:33,467  -->  00:13:36,877
Step three was to write a function that takes
282

282

00:13:36,877  -->  00:13:40,794
in the board list object, a marker, 'X' or 'O',
283

283

00:13:41,748  -->  00:13:44,184
a desired position, numbers one through nine,
284

284

00:13:44,184  -->  00:13:46,292
and assigns it to the board.
285

285

00:13:46,292  -->  00:13:49,860
Alright, this was actually really easy.
286

286

00:13:49,860  -->  00:13:51,309
Even though it was difficult
287

287

00:13:51,309  -->  00:13:52,976
to describe what's actually going on.
288

288

00:13:52,976  -->  00:13:54,845
But, all we should have done for this is say
289

289

00:13:54,845  -->  00:13:59,012
"board at that position and set it equal to marker."
290

290

00:13:59,966  -->  00:14:03,989
You're just assigning that index position on the board list
291

291

00:14:03,989  -->  00:14:05,976
to that particular marker value.
292

292

00:14:05,976  -->  00:14:09,019
So that's all we had to do there.
293

293

00:14:09,019  -->  00:14:13,728
Alright, step 4 was to write a function that takes
294

294

00:14:13,728  -->  00:14:16,923
in a board and the mark, X or O,
295

295

00:14:16,923  -->  00:14:19,765
and then check to see if that mark has won.
296

296

00:14:19,765  -->  00:14:22,615
This ones a little bit more complicated,
297

297

00:14:22,615  -->  00:14:24,851
and it's actually, it's a simple idea,
298

298

00:14:24,851  -->  00:14:27,042
but it just takes up a lot of typing.
299

299

00:14:27,042  -->  00:14:29,109
So, what you have to think about is,
300

300

00:14:29,109  -->  00:14:31,180
how can you write a function that
301

301

00:14:31,180  -->  00:14:34,183
takes in a board and a mark, X or O,
302

302

00:14:34,183  -->  00:14:37,151
and then checks to see if that mark has won.
303

303

00:14:37,151  -->  00:14:38,327
Alright, go ahead and pause the video,
304

304

00:14:38,327  -->  00:14:41,782
see if you can figure this out on your own.
305

305

00:14:41,782  -->  00:14:44,543
Okay, so what we're going to do here
306

306

00:14:44,543  -->  00:14:48,405
is, think of how I can win at tic tac to.
307

307

00:14:48,405  -->  00:14:51,498
Either, everything across the top matches,
308

308

00:14:51,498  -->  00:14:54,139
across the middle, across the bottom,
309

309

00:14:54,139  -->  00:14:56,419
diagonals, and then up and down.
310

310

00:14:56,419  -->  00:14:59,057
So what I can do here is show you an example
311

311

00:14:59,057  -->  00:15:01,741
of what one of these would look like.
312

312

00:15:01,741  -->  00:15:04,500
I essentially want to do this,
313

313

00:15:04,500  -->  00:15:08,066
I take in that board list and a mark,
314

314

00:15:08,066  -->  00:15:09,509
and I want to check, lets say I just wanted
315

315

00:15:09,509  -->  00:15:13,005
to check across the top, if they all matched up.
316

316

00:15:13,005  -->  00:15:13,838
Then I could say this,
317

317

00:15:13,838  -->  00:15:17,671
"return board value at seven equals that mark,
318

318

00:15:22,877  -->  00:15:26,794
and board value at eight is equal to that mark,
319

319

00:15:30,350  -->  00:15:34,267
and board value at nine is equal to that mark."
320

320

00:15:37,864  -->  00:15:40,220
And this would check if everything
321

321

00:15:40,220  -->  00:15:42,414
on the top row was the same.
322

322

00:15:42,414  -->  00:15:46,231
This would then check if the top left corner,
323

323

00:15:46,231  -->  00:15:48,870
at seven, was equal to the mark,
324

324

00:15:48,870  -->  00:15:51,067
if the top middle was equal to the mark
325

325

00:15:51,067  -->  00:15:52,940
and if the top right was equal to the mark.
326

326

00:15:52,940  -->  00:15:54,971
So that's checking across the top.
327

327

00:15:54,971  -->  00:15:59,074
So what we're going to do is keep doing these checks
328

328

00:15:59,074  -->  00:16:03,339
for every single possible win that you could do.
329

329

00:16:03,339  -->  00:16:06,018
And I'm just going to go ahead and copy this
330

330

00:16:06,018  -->  00:16:09,714
from the solution notebook, because its quite a few checks.
331

331

00:16:09,714  -->  00:16:11,460
There's a couple of ways that you can be more clever
332

332

00:16:11,460  -->  00:16:14,467
and get around this, I just went ahead and copied this here.
333

333

00:16:14,467  -->  00:16:16,540
But really, there's going to be a lot of typing here.
334

334

00:16:16,540  -->  00:16:18,816
And you can see here how we're checking it.
335

335

00:16:18,816  -->  00:16:21,816
And this ones also a diagonal check.
336

336

00:16:23,946  -->  00:16:25,479
Alright, so we're using parentheses
337

337

00:16:25,479  -->  00:16:26,775
to make sure we mark everything
338

338

00:16:26,775  -->  00:16:28,158
and then we're using the key words
339

339

00:16:28,158  -->  00:16:30,311
"or" and "and" to check everything.
340

340

00:16:30,311  -->  00:16:34,815
So, each of these in parentheses is its own separate check.
341

341

00:16:34,815  -->  00:16:37,700
And then we're saying "or" to keep checking
342

342

00:16:37,700  -->  00:16:42,006
every other version of three matching in a line.
343

343

00:16:42,006  -->  00:16:44,079
And then we're just taking advantage of indexing here
344

344

00:16:44,079  -->  00:16:48,140
across our board to check for the wins.
345

345

00:16:48,140  -->  00:16:52,307
Alright, and that's going to be down the left side.
346

346

00:16:53,824  -->  00:16:57,323
So, that's step four, what we're going to do,
347

347

00:16:57,323  -->  00:17:00,326
is go ahead and stop the video here.
348

348

00:17:00,326  -->  00:17:01,952
Coming up next, in the next video, we'll go through
349

349

00:17:01,952  -->  00:17:05,363
step five, step six, step seven, step eight,
350

350

00:17:05,363  -->  00:17:06,260
and we'll see if we can get
351

351

00:17:06,260  -->  00:17:08,328
to step nine and step ten in a reasonable time,
352

352

00:17:08,328  -->  00:17:10,602
otherwise, we'll do a third video for that.
353

353

00:17:10,602  -->  00:17:13,042
But just to review what we've done so far,
354

354

00:17:13,042  -->  00:17:17,793
we went ahead, learned about from future print_function,
355

355

00:17:17,793  -->  00:17:19,545
learned about raw_input and input,
356

356

00:17:19,545  -->  00:17:21,941
for Python two versus Python three.
357

357

00:17:21,941  -->  00:17:24,131
We discovered how we could display the board,
358

358

00:17:24,131  -->  00:17:27,499
learned about clear_output for Jupyter Notebook.
359

359

00:17:27,499  -->  00:17:29,413
We understood now how we can display a board
360

360

00:17:29,413  -->  00:17:31,931
and print it out in Python.
361

361

00:17:31,931  -->  00:17:34,066
Then, we wrote a function that would ask
362

362

00:17:34,066  -->  00:17:38,274
the player for input and then assign a marker,
363

363

00:17:38,274  -->  00:17:40,604
and then return tuples in our case.
364

364

00:17:40,604  -->  00:17:43,165
This you could do in various ways depending how your final
365

365

00:17:43,165  -->  00:17:46,819
logic game structure is going to be.
366

366

00:17:46,819  -->  00:17:48,762
Here, we wrote a function that takes in
367

367

00:17:48,762  -->  00:17:51,106
the board, the marker, and a position,
368

368

00:17:51,106  -->  00:17:55,027
and then just uses list indexing to assign that marker
369

369

00:17:55,027  -->  00:17:57,118
at that position of the board.
370

370

00:17:57,118  -->  00:17:59,841
And then we wrote a function that takes in the board,
371

371

00:17:59,841  -->  00:18:03,578
a mark, X or O, and then checks to see if that mark has won.
372

372

00:18:03,578  -->  00:18:06,845
Which we can do like this, by checking each possible
373

373

00:18:06,845  -->  00:18:10,146
combination across top, middle, bottom, et cetera.
374

374

00:18:10,146  -->  00:18:13,030
Okay, with that being said, thanks everyone.
375

375

00:18:13,030  -->  00:18:16,161
Hopefully, these steps aren't too hard for you,
376

376

00:18:16,161  -->  00:18:19,246
but I do hope that this walkthrough guide does help you
377

377

00:18:19,246  -->  00:18:22,170
and that you find this video helpful.
378

378

00:18:22,170  -->  00:18:23,791
Again, in the next video, what we're going to do
379

379

00:18:23,791  -->  00:18:26,589
is going over the next couple of functions.
380

380

00:18:26,589  -->  00:18:30,339
Thanks, and I'll see you at the next lecture.
