1
1

00:00:00,976  -->  00:00:02,340
<v Instructor>Hello everyone,</v>
2

2

00:00:02,340  -->  00:00:06,072
and welcome to the Regular Expressions lecture.
3

3

00:00:06,072  -->  00:00:09,212
Regular expressions are text matching patterns,
4

4

00:00:09,212  -->  00:00:11,747
and they're described with some sort of formal syntax.
5

5

00:00:11,747  -->  00:00:14,582
So you'll often hear regular expressions
6

6

00:00:14,582  -->  00:00:16,437
used for finding repetition,
7

7

00:00:16,437  -->  00:00:19,398
for matching text, et cetera.
8

8

00:00:19,398  -->  00:00:20,815
And as you advance in Python,
9

9

00:00:20,815  -->  00:00:22,575
you'll see that a lot of your parsing problems
10

10

00:00:22,575  -->  00:00:24,473
can actually be solved with regular expressions,
11

11

00:00:24,473  -->  00:00:26,692
and they're also a common interview question.
12

12

00:00:26,692  -->  00:00:28,373
So, if you're actually familiar with Perl,
13

13

00:00:28,373  -->  00:00:30,282
you'll notice that the syntax for regular expressions
14

14

00:00:30,282  -->  00:00:32,676
are really similar in Python.
15

15

00:00:32,676  -->  00:00:35,147
The module we're gonna be using
16

16

00:00:35,147  -->  00:00:36,912
is the regular expressions operations module,
17

17

00:00:36,912  -->  00:00:39,175
which is just RE in Python.
18

18

00:00:39,175  -->  00:00:41,397
Here I have open the documentation page for it.
19

19

00:00:41,397  -->  00:00:43,057
You can see it's pretty extensive
20

20

00:00:43,057  -->  00:00:44,604
and there's a tonne of stuff you can do
21

21

00:00:44,604  -->  00:00:46,355
with regular expressions in Python.
22

22

00:00:46,355  -->  00:00:47,712
We're just going to be going over
23

23

00:00:47,712  -->  00:00:49,274
the most useful functions it has.
24

24

00:00:49,274  -->  00:00:51,261
But again, I encourage you to check out the entire
25

25

00:00:51,261  -->  00:00:55,141
Jupyter Notebook that's associated with this lecture.
26

26

00:00:55,141  -->  00:00:56,541
But let's go ahead and get started
27

27

00:00:56,541  -->  00:00:59,460
with some live code so we can see how it works.
28

28

00:00:59,460  -->  00:01:01,824
So, let's say I want to search for some patterns in text,
29

29

00:01:01,824  -->  00:01:03,680
which is one of the most common uses
30

30

00:01:03,680  -->  00:01:05,206
for a regular expression.
31

31

00:01:05,206  -->  00:01:06,570
The first thing you're gonna do is
32

32

00:01:06,570  -->  00:01:09,342
import the regular expression module.
33

33

00:01:09,342  -->  00:01:12,675
Next, I'm gonna make a list of patterns,
34

34

00:01:13,602  -->  00:01:17,252
and these are just gonna be two strings: term1
35

35

00:01:17,252  -->  00:01:18,085
and term2.
36

36

00:01:20,976  -->  00:01:23,964
Then I'm gonna make a large text string,
37

37

00:01:23,964  -->  00:01:25,168
and it's gonna say:
38

38

00:01:25,168  -->  00:01:27,501
This is a string with term1,
39

39

00:01:28,370  -->  00:01:29,203
but not
40

40

00:01:31,525  -->  00:01:32,775
the other term.
41

41

00:01:33,674  -->  00:01:36,473
So notice it has term1 but not term2.
42

42

00:01:36,473  -->  00:01:38,892
So how do you actually use
43

43

00:01:38,892  -->  00:01:40,598
the regular expression module?
44

44

00:01:40,598  -->  00:01:43,461
So one of the features you can use is search.
45

45

00:01:43,461  -->  00:01:46,240
So you can use the search method,
46

46

00:01:46,240  -->  00:01:50,139
and we can search for a particular pattern,
47

47

00:01:50,139  -->  00:01:52,023
so in this case I could search for,
48

48

00:01:52,023  -->  00:01:54,234
just to show you an example,
49

49

00:01:54,234  -->  00:01:55,067
hello,
50

50

00:01:56,905  -->  00:01:57,941
and in the next argument you pass
51

51

00:01:57,941  -->  00:01:59,406
the text you want to search.
52

52

00:01:59,406  -->  00:02:00,489
So I can say,
53

53

00:02:01,735  -->  00:02:03,127
hello
54

54

00:02:03,127  -->  00:02:03,960
world.
55

55

00:02:06,427  -->  00:02:08,660
I need to close off the parentheses,
56

56

00:02:08,660  -->  00:02:11,827
and notice how you get a match object.
57

57

00:02:12,785  -->  00:02:14,519
That's something I want you to keep in mind
58

58

00:02:14,519  -->  00:02:17,410
as we go throughout the larger example.
59

59

00:02:17,410  -->  00:02:18,845
So you're gonna get a match object
60

60

00:02:18,845  -->  00:02:20,889
and it's actually more than just a bullion.
61

61

00:02:20,889  -->  00:02:22,380
So what I'm going to do now is hop over
62

62

00:02:22,380  -->  00:02:25,106
to the Jupyter Notebook and copy
63

63

00:02:25,106  -->  00:02:26,856
some code right here.
64

64

00:02:27,812  -->  00:02:29,100
And then I'll break down the code.
65

65

00:02:29,100  -->  00:02:30,885
You can go ahead and feel free to copy this code as well,
66

66

00:02:30,885  -->  00:02:33,027
just to save you some typing time.
67

67

00:02:33,027  -->  00:02:34,399
But what this code is going to do,
68

68

00:02:34,399  -->  00:02:36,870
it's gonna say, for pattern in patterns,
69

69

00:02:36,870  -->  00:02:39,719
so for every term in this pattern's list,
70

70

00:02:39,719  -->  00:02:41,812
it's gonna print, searching for
71

71

00:02:41,812  -->  00:02:44,528
the pattern in that text.
72

72

00:02:44,528  -->  00:02:46,945
Then, if search pattern text,
73

73

00:02:47,987  -->  00:02:50,515
so if that match object exists,
74

74

00:02:50,515  -->  00:02:53,937
then it's gonna print, Match was found.
75

75

00:02:53,937  -->  00:02:55,778
Else, which means no match was found,
76

76

00:02:55,778  -->  00:02:57,922
it's gonna print that.
77

77

00:02:57,922  -->  00:02:59,622
So if you go ahead and run this,
78

78

00:02:59,622  -->  00:03:01,329
you'll notice it was able to say
79

79

00:03:01,329  -->  00:03:03,786
Searching for term1 in this string,
80

80

00:03:03,786  -->  00:03:04,976
Match was found.
81

81

00:03:04,976  -->  00:03:08,245
Searching for term2, No match was found.
82

82

00:03:08,245  -->  00:03:09,078
Okay, so
83

83

00:03:10,632  -->  00:03:13,026
we've seen that the search method will take a pattern,
84

84

00:03:13,026  -->  00:03:15,819
scan the text, and then return that match object.
85

85

00:03:15,819  -->  00:03:19,228
If no pattern is found, a none is returned.
86

86

00:03:19,228  -->  00:03:21,293
So I can go ahead and check that out.
87

87

00:03:21,293  -->  00:03:22,960
I can say, re.search
88

88

00:03:24,828  -->  00:03:27,705
put in an h here, and then give it a w,
89

89

00:03:27,705  -->  00:03:29,399
so there's no match,
90

90

00:03:29,399  -->  00:03:32,192
and we can go ahead and print whatever that is.
91

91

00:03:32,192  -->  00:03:33,837
You'll notice it's None.
92

92

00:03:33,837  -->  00:03:35,994
So a None is returned if there is no match.
93

93

00:03:35,994  -->  00:03:38,425
Now, let's go ahead and take a closer look
94

94

00:03:38,425  -->  00:03:40,175
at this match object.
95

95

00:03:41,382  -->  00:03:44,549
And what I'm gonna do now is just say,
96

96

00:03:45,574  -->  00:03:46,991
this match equals
97

97

00:03:49,275  -->  00:03:51,025
search of, let's say,
98

98

00:03:53,790  -->  00:03:56,569
let's just say patterns,
99

99

00:03:56,569  -->  00:03:59,902
the first term and then the text string.
100

100

00:04:01,191  -->  00:04:03,779
And now let's check the type of that object,
101

101

00:04:03,779  -->  00:04:07,979
match, and you notice we get this match object.
102

102

00:04:07,979  -->  00:04:09,995
So it's actually a lot more, like I said,
103

103

00:04:09,995  -->  00:04:11,276
than just the bullion.
104

104

00:04:11,276  -->  00:04:13,460
It also contains information about the match,
105

105

00:04:13,460  -->  00:04:15,457
including the original input string,
106

106

00:04:15,457  -->  00:04:17,072
the regular expression that was used,
107

107

00:04:17,072  -->  00:04:18,570
and the location of the match.
108

108

00:04:18,570  -->  00:04:21,816
So we can actually call methods on this match object.
109

109

00:04:21,816  -->  00:04:23,625
So for instance,
110

110

00:04:23,625  -->  00:04:25,375
I can say match.start
111

111

00:04:28,006  -->  00:04:29,917
and it will actually tell me the index
112

112

00:04:29,917  -->  00:04:32,283
of the start of the match.
113

113

00:04:32,283  -->  00:04:37,127
So at index 22, the pattern started to match with the text.
114

114

00:04:37,127  -->  00:04:38,709
It can also show me the end,
115

115

00:04:38,709  -->  00:04:40,542
so I can say match.end
116

116

00:04:43,287  -->  00:04:46,332
and likewise, it shows me index there as well.
117

117

00:04:46,332  -->  00:04:48,733
Alright, so that's just something to keep in mind
118

118

00:04:48,733  -->  00:04:50,609
as far as the match object that the
119

119

00:04:50,609  -->  00:04:52,744
regular expression module returns.
120

120

00:04:52,744  -->  00:04:54,046
There's a lot of methods,
121

121

00:04:54,046  -->  00:04:56,685
and I encourage you to go ahead and explore them,
122

122

00:04:56,685  -->  00:04:59,730
if you find yourself needing to.
123

123

00:04:59,730  -->  00:05:00,563
So you can see there's a tonne of methods
124

124

00:05:00,563  -->  00:05:02,870
here that you can use.
125

125

00:05:02,870  -->  00:05:04,873
Go ahead and explore those here
126

126

00:05:04,873  -->  00:05:07,483
or within the documentation.
127

127

00:05:07,483  -->  00:05:09,800
Alright, moving along now we're gonna see
128

128

00:05:09,800  -->  00:05:11,690
how we can split with regular expressions.
129

129

00:05:11,690  -->  00:05:12,523
This is gonna be one of the most
130

130

00:05:12,523  -->  00:05:15,344
useful features of regular expressions.
131

131

00:05:15,344  -->  00:05:18,110
So it should look really familiar to you,
132

132

00:05:18,110  -->  00:05:21,604
given the split methods we've already seen on strings.
133

133

00:05:21,604  -->  00:05:23,641
And let's go ahead and see what it looks like,
134

134

00:05:23,641  -->  00:05:25,984
just purely in the regular expressions module.
135

135

00:05:25,984  -->  00:05:28,890
So I'm going to say split_term,
136

136

00:05:28,890  -->  00:05:31,807
which is going to be, let's say, @.
137

137

00:05:34,524  -->  00:05:38,416
And now, I'm going to put a phrase in.
138

138

00:05:38,416  -->  00:05:39,984
So I'm going to say,
139

139

00:05:39,984  -->  00:05:42,067
What is your email, is it
140

140

00:05:44,343  -->  00:05:45,676
hello@gmail.com?
141

141

00:05:49,465  -->  00:05:52,882
Alright, so let's say you wanted to split
142

142

00:05:53,992  -->  00:05:56,154
at this split term, @.
143

143

00:05:56,154  -->  00:05:58,936
So you can use the split method,
144

144

00:05:58,936  -->  00:05:59,769
and say,
145

145

00:06:01,155  -->  00:06:03,738
split term, give it the phrase,
146

146

00:06:05,105  -->  00:06:07,188
and it will return a list
147

147

00:06:08,108  -->  00:06:09,522
with the split,
148

148

00:06:09,522  -->  00:06:10,957
not with the split term included.
149

149

00:06:10,957  -->  00:06:12,385
So this should look really familiar,
150

150

00:06:12,385  -->  00:06:15,192
given what you already know about splits
151

151

00:06:15,192  -->  00:06:16,172
in a string.
152

152

00:06:16,172  -->  00:06:17,172
So if I say,
153

153

00:06:18,419  -->  00:06:20,801
hello world, and I called the split method
154

154

00:06:20,801  -->  00:06:24,747
that string has built in, it's really similar.
155

155

00:06:24,747  -->  00:06:27,029
So, the split returns a list
156

156

00:06:27,029  -->  00:06:28,968
with the term to split on removed,
157

157

00:06:28,968  -->  00:06:30,634
and the terms in the list
158

158

00:06:30,634  -->  00:06:32,477
are a split up version of that string.
159

159

00:06:32,477  -->  00:06:34,617
So make sure you can understand this example fully,
160

160

00:06:34,617  -->  00:06:36,584
so go ahead and create a couple more examples
161

161

00:06:36,584  -->  00:06:39,216
in case you're unsure of what's actually going on.
162

162

00:06:39,216  -->  00:06:41,155
The reason I choose the @ symbol here,
163

163

00:06:41,155  -->  00:06:42,982
is that's sometimes an interview question,
164

164

00:06:42,982  -->  00:06:44,564
as far as, how would you split
165

165

00:06:44,564  -->  00:06:47,481
domain names from an email address.
166

166

00:06:48,799  -->  00:06:50,850
The answer's pretty much always regular expressions,
167

167

00:06:50,850  -->  00:06:53,773
as far as one of the most efficient ways to do that.
168

168

00:06:53,773  -->  00:06:55,457
Now what we're gonna do is move on
169

169

00:06:55,457  -->  00:06:58,299
and talk about finding all instances of a pattern.
170

170

00:06:58,299  -->  00:07:01,848
And with that you can use the find all method.
171

171

00:07:01,848  -->  00:07:02,931
So I can say,
172

172

00:07:05,327  -->  00:07:06,160
findall,
173

173

00:07:08,015  -->  00:07:08,848
and what it's going to do is
174

174

00:07:08,848  -->  00:07:11,598
return a list of all the matches.
175

175

00:07:12,565  -->  00:07:14,760
So, for instance, the first thing you put is
176

176

00:07:14,760  -->  00:07:16,174
the pattern you want to match,
177

177

00:07:16,174  -->  00:07:18,158
so let's say I want to match
178

178

00:07:18,158  -->  00:07:19,821
the actual word match.
179

179

00:07:19,821  -->  00:07:22,815
Then I'm gonna put a string that says
180

180

00:07:22,815  -->  00:07:23,960
Here is
181

181

00:07:23,960  -->  00:07:24,793
one match,
182

182

00:07:25,751  -->  00:07:27,001
here is another
183

183

00:07:28,178  -->  00:07:29,243
match.
184

184

00:07:29,243  -->  00:07:32,582
So right now there's two matches in that string.
185

185

00:07:32,582  -->  00:07:35,728
So it'll return both instances of that.
186

186

00:07:35,728  -->  00:07:39,450
So findall will find all the instances of your match.
187

187

00:07:39,450  -->  00:07:40,977
So what might be interesting is then you can
188

188

00:07:40,977  -->  00:07:43,489
count the length of this and it will tell you
189

189

00:07:43,489  -->  00:07:46,622
how many matches there are in that string.
190

190

00:07:46,622  -->  00:07:50,789
Okay, so the bulk of this lecture's going to be on
191

191

00:07:52,839  -->  00:07:55,922
using the RE module syntax of Python.
192

192

00:07:57,065  -->  00:07:58,685
And what I mean by that is,
193

193

00:07:58,685  -->  00:08:00,633
the regular expressions, it's gonna support
194

194

00:08:00,633  -->  00:08:03,646
a huge variety of patterns that just simplify
195

195

00:08:03,646  -->  00:08:06,620
finding where a single string occurred.
196

196

00:08:06,620  -->  00:08:09,898
And we're gonna do something called using metacharacters.
197

197

00:08:09,898  -->  00:08:13,590
So let me go ahead and show you what I mean by that.
198

198

00:08:13,590  -->  00:08:16,426
Let's go ahead and jump back to the Jupyter Notebook,
199

199

00:08:16,426  -->  00:08:17,806
'cause it's a little more clear there
200

200

00:08:17,806  -->  00:08:19,145
with some markdown text.
201

201

00:08:19,145  -->  00:08:20,936
Let's scroll down,
202

202

00:08:20,936  -->  00:08:21,853
here we go.
203

203

00:08:22,788  -->  00:08:26,134
So finding patterns in this syntax,
204

204

00:08:26,134  -->  00:08:28,498
what does this actually look like?
205

205

00:08:28,498  -->  00:08:30,931
So, before we begin,
206

206

00:08:30,931  -->  00:08:33,293
as far as going through a different syntax,
207

207

00:08:33,293  -->  00:08:35,237
I created this function here,
208

208

00:08:35,237  -->  00:08:37,534
and it's called multi re find,
209

209

00:08:37,534  -->  00:08:40,266
and it takes in patterns and then a phrase.
210

210

00:08:40,266  -->  00:08:42,958
So it takes in a list of these regular expression patterns
211

211

00:08:42,958  -->  00:08:45,213
and prints a list of all matches.
212

212

00:08:45,213  -->  00:08:47,330
So it goes, for pattern in patterns
213

213

00:08:47,330  -->  00:08:50,339
print Searching the phrase using re check
214

214

00:08:50,339  -->  00:08:51,476
pattern
215

215

00:08:51,476  -->  00:08:53,620
then it says findall.
216

216

00:08:53,620  -->  00:08:56,608
Okay, so I'm going to go ahead and copy this function.
217

217

00:08:56,608  -->  00:08:59,754
You can go ahead and copy it as well,
218

218

00:08:59,754  -->  00:09:01,254
and paste it here,
219

219

00:09:02,477  -->  00:09:04,183
and what we're going to be doing now
220

220

00:09:04,183  -->  00:09:06,573
is going through different syntax.
221

221

00:09:06,573  -->  00:09:08,279
And this is actually best explained
222

222

00:09:08,279  -->  00:09:10,696
though this Ipython Notebook.
223

223

00:09:12,049  -->  00:09:14,239
So, there's repetition syntax.
224

224

00:09:14,239  -->  00:09:18,559
That's the first syntax that we're gonna be covering.
225

225

00:09:18,559  -->  00:09:22,036
So what I have here is repetition syntax
226

226

00:09:22,036  -->  00:09:24,261
and there's gonna be five
227

227

00:09:24,261  -->  00:09:27,480
main repetition syntaxes we can use.
228

228

00:09:27,480  -->  00:09:29,048
And they look a little something like this,
229

229

00:09:29,048  -->  00:09:30,913
you have a star, a plus,
230

230

00:09:30,913  -->  00:09:34,283
a question mark, curly brackets with one number,
231

231

00:09:34,283  -->  00:09:36,393
curly brackets with two numbers.
232

232

00:09:36,393  -->  00:09:39,208
So let me break these down on how they actually work.
233

233

00:09:39,208  -->  00:09:40,447
And what I encourage you to do
234

234

00:09:40,447  -->  00:09:42,145
to get the most out of this lecture,
235

235

00:09:42,145  -->  00:09:44,543
is just take your time and read the Jupyter Notebook,
236

236

00:09:44,543  -->  00:09:47,243
take the code like this, copy,
237

237

00:09:47,243  -->  00:09:51,988
and after reading the explanations and markdown,
238

238

00:09:51,988  -->  00:09:54,474
go to your own live Jupyter Notebook,
239

239

00:09:54,474  -->  00:09:56,495
run it, and then check the results,
240

240

00:09:56,495  -->  00:09:58,871
and make sure they make sense to you.
241

241

00:09:58,871  -->  00:10:02,536
So let's go ahead and start with the repetition syntax.
242

242

00:10:02,536  -->  00:10:05,605
So if you use a star, or an asterisk,
243

243

00:10:05,605  -->  00:10:08,697
then what this basically means is
244

244

00:10:08,697  -->  00:10:10,100
take an s,
245

245

00:10:10,100  -->  00:10:11,017
followed by
246

246

00:10:12,263  -->  00:10:13,680
zero or more d's,
247

247

00:10:14,980  -->  00:10:18,847
which means basically take anywhere that starts with an s.
248

248

00:10:18,847  -->  00:10:20,981
So if we look at our test phrase,
249

249

00:10:20,981  -->  00:10:23,588
this particular pattern returned anywhere
250

250

00:10:23,588  -->  00:10:25,505
that started with an s.
251

251

00:10:26,487  -->  00:10:29,513
Then what the plus sign does, it says
252

252

00:10:29,513  -->  00:10:31,918
s followed by one or more d's.
253

253

00:10:31,918  -->  00:10:33,726
And I know this general syntax looks strange,
254

254

00:10:33,726  -->  00:10:37,893
but that's the way regular expression in Python work.
255

255

00:10:38,959  -->  00:10:42,019
So here we can see anywhere where there was an s
256

256

00:10:42,019  -->  00:10:43,927
followed by one or more d's.
257

257

00:10:43,927  -->  00:10:46,988
So we don't get all these single s's.
258

258

00:10:46,988  -->  00:10:48,776
Next output for repetition,
259

259

00:10:48,776  -->  00:10:51,151
or syntax repetition is a question mark,
260

260

00:10:51,151  -->  00:10:53,651
and that will be s followed by
261

261

00:10:54,824  -->  00:10:56,157
zero or one d's.
262

262

00:10:57,174  -->  00:11:01,037
So if we look at this, here's basically output
263

263

00:11:01,037  -->  00:11:02,859
of zero or one d's,
264

264

00:11:02,859  -->  00:11:04,359
no more than that.
265

265

00:11:05,483  -->  00:11:07,426
So if you have these twos or threes,
266

266

00:11:07,426  -->  00:11:10,514
those don't show up in the question mark syntax.
267

267

00:11:10,514  -->  00:11:12,306
After that there's curly brackets,
268

268

00:11:12,306  -->  00:11:13,699
which will just
269

269

00:11:13,699  -->  00:11:16,723
allow you to specify how many repetitions you want.
270

270

00:11:16,723  -->  00:11:17,890
So this says s
271

271

00:11:18,887  -->  00:11:20,720
followed by three d's,
272

272

00:11:21,925  -->  00:11:24,568
and this says s followed by
273

273

00:11:24,568  -->  00:11:27,486
two or three d's, and you can continue on
274

274

00:11:27,486  -->  00:11:29,910
as you go throughout your code.
275

275

00:11:29,910  -->  00:11:32,700
Okay, so go ahead and read over the
276

276

00:11:32,700  -->  00:11:35,736
general explanations for each of those,
277

277

00:11:35,736  -->  00:11:38,702
which are just basic explanations of what I just said,
278

278

00:11:38,702  -->  00:11:41,877
and go ahead and test out the code yourself here.
279

279

00:11:41,877  -->  00:11:43,411
So I know there's a lot to read here
280

280

00:11:43,411  -->  00:11:44,692
in the regular expressions,
281

281

00:11:44,692  -->  00:11:45,989
but the most important thing is
282

282

00:11:45,989  -->  00:11:47,327
that you just feel comfortable
283

283

00:11:47,327  -->  00:11:50,171
using this syntax: pattern, phrase.
284

284

00:11:50,171  -->  00:11:53,433
'Cause you can always look up these exact test patterns
285

285

00:11:53,433  -->  00:11:56,378
as far as syntax later on in this Jupyter Notebook.
286

286

00:11:56,378  -->  00:11:58,992
So, we went over the repetition syntax,
287

287

00:11:58,992  -->  00:12:01,209
so there's five ways to express repetition,
288

288

00:12:01,209  -->  00:12:03,883
and now what we're going to go over is character sets.
289

289

00:12:03,883  -->  00:12:06,292
So, character sets are used when you wish to match
290

290

00:12:06,292  -->  00:12:09,669
any one group of characters at a point in the input.
291

291

00:12:09,669  -->  00:12:13,406
And we use brackets to construct character set inputs.
292

292

00:12:13,406  -->  00:12:15,544
So for example, this input
293

293

00:12:15,544  -->  00:12:20,130
for ab, searches for occurrences of either a or b.
294

294

00:12:20,130  -->  00:12:21,329
Which is a little weird,
295

295

00:12:21,329  -->  00:12:23,622
'cause you might see brackets and think,
296

296

00:12:23,622  -->  00:12:25,452
oh, that's a list, where's the comma?
297

297

00:12:25,452  -->  00:12:27,143
But in this case regular expressions
298

298

00:12:27,143  -->  00:12:29,387
there's no comma there.
299

299

00:12:29,387  -->  00:12:33,625
So here, you pass a string as a pattern with brackets,
300

300

00:12:33,625  -->  00:12:36,173
and it says, either s or d,
301

301

00:12:36,173  -->  00:12:38,638
look for either of those two patterns.
302

302

00:12:38,638  -->  00:12:40,150
So basically, everything where
303

303

00:12:40,150  -->  00:12:42,704
there's an s or a d gets returned.
304

304

00:12:42,704  -->  00:12:44,558
And now, I can add something like this,
305

305

00:12:44,558  -->  00:12:45,475
I can say s
306

306

00:12:47,208  -->  00:12:50,008
followed by one or more of s or d's.
307

307

00:12:50,008  -->  00:12:54,175
So notice I'm adding now repetition syntax to this here.
308

308

00:12:55,192  -->  00:12:56,719
And you can see the results here.
309

309

00:12:56,719  -->  00:13:00,038
So it's s followed by one or more s or d's.
310

310

00:13:00,038  -->  00:13:01,651
So it kind of makes sense that
311

311

00:13:01,651  -->  00:13:03,299
the first sd returns every instance,
312

312

00:13:03,299  -->  00:13:05,675
'cause it's just looking for s or d,
313

313

00:13:05,675  -->  00:13:07,325
and the second bit will just return anything
314

314

00:13:07,325  -->  00:13:10,025
starting with an s in this particular case,
315

315

00:13:10,025  -->  00:13:13,277
since our input test phrase looks like this.
316

316

00:13:13,277  -->  00:13:14,861
Alright,
317

317

00:13:14,861  -->  00:13:18,396
so moving along let's look at exclusion.
318

318

00:13:18,396  -->  00:13:20,880
So we can use this caret to exclude terms
319

319

00:13:20,880  -->  00:13:24,170
by incorporating it into the bracket syntax notation.
320

320

00:13:24,170  -->  00:13:26,898
So, for example, bracket, caret,
321

321

00:13:26,898  -->  00:13:28,886
and then whatever terms you want
322

322

00:13:28,886  -->  00:13:31,874
will match any single character not in the brackets.
323

323

00:13:31,874  -->  00:13:33,861
So let's go ahead and look at some examples.
324

324

00:13:33,861  -->  00:13:35,308
So I have this test phrase that says,
325

325

00:13:35,308  -->  00:13:38,299
This is a string, but it has punctuation.
326

326

00:13:38,299  -->  00:13:40,049
How can we remove it?
327

327

00:13:41,654  -->  00:13:45,262
So, I have a caret here and then a bunch of punctuation:
328

328

00:13:45,262  -->  00:13:49,044
an exclamation point, a period, a question mark.
329

329

00:13:49,044  -->  00:13:52,211
I'm gonna zoom in so you can see that.
330

330

00:13:53,418  -->  00:13:55,892
So here, what I'm doing is,
331

331

00:13:55,892  -->  00:13:57,392
passing this caret
332

332

00:13:59,989  -->  00:14:01,828
and then it's gonna have exclamation, period,
333

333

00:14:01,828  -->  00:14:06,046
question mark, space, and then a plus sign.
334

334

00:14:06,046  -->  00:14:07,618
So remember, we add that plus
335

335

00:14:07,618  -->  00:14:10,216
to check that the match appears at least once,
336

336

00:14:10,216  -->  00:14:12,016
which basically translates into finding
337

337

00:14:12,016  -->  00:14:14,139
all the words in that string, right?
338

338

00:14:14,139  -->  00:14:17,494
'Cause I'm saying return everything
339

339

00:14:17,494  -->  00:14:21,209
where this caret allows us to exclude those terms,
340

340

00:14:21,209  -->  00:14:23,499
which is just all the punctuation terms.
341

341

00:14:23,499  -->  00:14:26,393
So this is the kind of regular expression you can use
342

342

00:14:26,393  -->  00:14:28,476
to remove punctuation from a string.
343

343

00:14:28,476  -->  00:14:29,943
And note we get a list here that says,
344

344

00:14:29,943  -->  00:14:31,356
This is a string but it has punctuation,
345

345

00:14:31,356  -->  00:14:32,857
how can we remove it.
346

346

00:14:32,857  -->  00:14:35,859
Now there's no punctuation there.
347

347

00:14:35,859  -->  00:14:38,933
Alright, we'll move along now to character ranges.
348

348

00:14:38,933  -->  00:14:40,800
So as character sets grow larger,
349

349

00:14:40,800  -->  00:14:42,483
typing every character that should,
350

350

00:14:42,483  -->  00:14:45,000
or should not, match can become really tedious.
351

351

00:14:45,000  -->  00:14:48,776
So what you can do is a dash expression.
352

352

00:14:48,776  -->  00:14:50,071
And I'll show you what I mean.
353

353

00:14:50,071  -->  00:14:52,685
So here are some test patterns we're gonna check out.
354

354

00:14:52,685  -->  00:14:56,268
So, let me zoom out so you can see 'em all.
355

355

00:14:57,323  -->  00:15:00,805
Here we have sequences of lower case letters,
356

356

00:15:00,805  -->  00:15:02,638
so we say a through z.
357

357

00:15:03,923  -->  00:15:05,750
Here we have sequences of upper case letters,
358

358

00:15:05,750  -->  00:15:08,581
capital A through capital Z.
359

359

00:15:08,581  -->  00:15:11,223
Here we can have sequences of lower or upper case letters,
360

360

00:15:11,223  -->  00:15:14,860
so a through z, capital A through Z.
361

361

00:15:14,860  -->  00:15:17,153
And then we have, again,
362

362

00:15:17,153  -->  00:15:21,320
one upper case letter followed by one lower case letter.
363

363

00:15:22,167  -->  00:15:25,476
Alright, so go ahead and then check this code out.
364

364

00:15:25,476  -->  00:15:28,544
You can go ahead and copy this,
365

365

00:15:28,544  -->  00:15:31,340
and then paste it into your Jupyter Notebook,
366

366

00:15:31,340  -->  00:15:35,686
and check the results to see if they make sense to you.
367

367

00:15:35,686  -->  00:15:38,552
Alright, so for instance, looking at this
368

368

00:15:38,552  -->  00:15:40,783
this will return anywhere where a capital letter
369

369

00:15:40,783  -->  00:15:43,873
is followed by a lower case letter,
370

370

00:15:43,873  -->  00:15:45,795
and these are the two results where that happens,
371

371

00:15:45,795  -->  00:15:46,962
This and Lets.
372

372

00:15:48,140  -->  00:15:49,914
Alright, so that was character ranges,
373

373

00:15:49,914  -->  00:15:53,790
which is basically just that dash notation,
374

374

00:15:53,790  -->  00:15:54,991
and then escape codes.
375

375

00:15:54,991  -->  00:15:57,203
So we've probably seen a few of these,
376

376

00:15:57,203  -->  00:15:58,578
but something to keep in mind is
377

377

00:15:58,578  -->  00:16:00,634
you can use special escape codes to find specific
378

378

00:16:00,634  -->  00:16:01,784
patterns in your data.
379

379

00:16:01,784  -->  00:16:03,247
So just digits, non-digits,
380

380

00:16:03,247  -->  00:16:04,378
whitespace, and more.
381

381

00:16:04,378  -->  00:16:06,701
So, for example I've listed all these codes here
382

382

00:16:06,701  -->  00:16:08,201
and their meaning.
383

383

00:16:09,171  -->  00:16:12,022
So for instance, if you say findall
384

384

00:16:12,022  -->  00:16:14,696
and you put in this code, slash d,
385

385

00:16:14,696  -->  00:16:16,434
it'll think of it as a digit.
386

386

00:16:16,434  -->  00:16:19,073
Slash capital D is non-digit.
387

387

00:16:19,073  -->  00:16:20,624
Lower case s is whitespace,
388

388

00:16:20,624  -->  00:16:22,522
capital S is non-whitespace.
389

389

00:16:22,522  -->  00:16:24,386
And then lower case w is alphanumeric.
390

390

00:16:24,386  -->  00:16:27,627
Capital W is non-alphanumeric.
391

391

00:16:27,627  -->  00:16:30,010
So something to keep in mind in strings,
392

392

00:16:30,010  -->  00:16:32,768
there already are escape codes built into strings.
393

393

00:16:32,768  -->  00:16:34,851
So for instance, if I say
394

394

00:16:36,829  -->  00:16:37,662
print
395

395

00:16:38,751  -->  00:16:40,168
hello backslash n
396

396

00:16:41,081  -->  00:16:41,914
new line,
397

397

00:16:43,167  -->  00:16:45,951
remember this backslash n is already an escape code
398

398

00:16:45,951  -->  00:16:47,956
telling Python, hey, this isn't an n,
399

399

00:16:47,956  -->  00:16:51,818
I want you to print this on a new line.
400

400

00:16:51,818  -->  00:16:53,377
So this is where sometimes
401

401

00:16:53,377  -->  00:16:55,629
regular expressions get hard to read.
402

402

00:16:55,629  -->  00:16:57,298
What regular expressions do,
403

403

00:16:57,298  -->  00:16:59,637
so that Python doesn't get confused that there's
404

404

00:16:59,637  -->  00:17:02,229
an escape character already in there,
405

405

00:17:02,229  -->  00:17:04,785
is it adds this r beforehand,
406

406

00:17:04,785  -->  00:17:07,643
and then some single quotes.
407

407

00:17:07,643  -->  00:17:09,613
So if we took it this example,
408

408

00:17:09,613  -->  00:17:13,780
copy it, and take it over to the Jupyter Notebook,
409

409

00:17:15,508  -->  00:17:17,806
we can look for each of the test patterns.
410

410

00:17:17,806  -->  00:17:19,661
So this first one,
411

411

00:17:19,661  -->  00:17:20,744
slash d plus,
412

412

00:17:21,881  -->  00:17:23,098
sequence of digits.
413

413

00:17:23,098  -->  00:17:26,266
So this will return any sequence of digits.
414

414

00:17:26,266  -->  00:17:28,700
The next one is gonna return any sequence of non-digits,
415

415

00:17:28,700  -->  00:17:30,687
this capital D plus.
416

416

00:17:30,687  -->  00:17:33,056
After that we can get sequence of whitespace,
417

417

00:17:33,056  -->  00:17:34,870
non-whitespace.
418

418

00:17:34,870  -->  00:17:36,475
So here's all the whitespace,
419

419

00:17:36,475  -->  00:17:38,862
here's all the non whitespace.
420

420

00:17:38,862  -->  00:17:42,368
And then alphanumeric and non-alphanumeric characters.
421

421

00:17:42,368  -->  00:17:45,673
So alphanumeric and then the non-alphanumeric.
422

422

00:17:45,673  -->  00:17:48,431
Alright, hopping back to the Jupyter Notebook.
423

423

00:17:48,431  -->  00:17:51,080
So you should have at least a solid understanding
424

424

00:17:51,080  -->  00:17:54,183
after completely reading this Jupyter Notebook.
425

425

00:17:54,183  -->  00:17:55,703
So I don't expect you to learn everything
426

426

00:17:55,703  -->  00:17:59,104
just from this quick overview video,
427

427

00:17:59,104  -->  00:18:01,338
but you should at least have a solid understanding
428

428

00:18:01,338  -->  00:18:03,028
of the general form.
429

429

00:18:03,028  -->  00:18:04,732
So you have a pattern,
430

430

00:18:04,732  -->  00:18:06,575
and then the text you want to search.
431

431

00:18:06,575  -->  00:18:08,989
So if we look back to the Jupyter Notebook,
432

432

00:18:08,989  -->  00:18:10,240
it always goes like this.
433

433

00:18:10,240  -->  00:18:11,073
You have,
434

434

00:18:11,939  -->  00:18:13,703
either the term, the split term,
435

435

00:18:13,703  -->  00:18:15,143
and then the phrase,
436

436

00:18:15,143  -->  00:18:17,584
or the pattern and the phrase or text.
437

437

00:18:17,584  -->  00:18:19,225
So it always looks like that,
438

438

00:18:19,225  -->  00:18:21,926
the pattern that your looking for and then the text.
439

439

00:18:21,926  -->  00:18:24,136
And then where regular expressions really shine
440

440

00:18:24,136  -->  00:18:26,771
are all these, basically special pattern codes,
441

441

00:18:26,771  -->  00:18:30,046
that will look for a sequence of digits in this case,
442

442

00:18:30,046  -->  00:18:31,716
or this will look for a sequence
443

443

00:18:31,716  -->  00:18:33,639
of lower case letters, et cetera.
444

444

00:18:33,639  -->  00:18:35,453
We can look at exclusions,
445

445

00:18:35,453  -->  00:18:38,664
character sets, and repetition.
446

446

00:18:38,664  -->  00:18:41,226
So I know that's a tonne of stuff,
447

447

00:18:41,226  -->  00:18:42,915
and most people, unless you're using
448

448

00:18:42,915  -->  00:18:45,171
this regular expressions quite a lot in your work,
449

449

00:18:45,171  -->  00:18:46,455
don't memorise this.
450

450

00:18:46,455  -->  00:18:48,533
They will either look at a table
451

451

00:18:48,533  -->  00:18:49,932
or look at the documentation.
452

452

00:18:49,932  -->  00:18:51,751
So, like I mentioned before,
453

453

00:18:51,751  -->  00:18:53,912
go ahead and take a look at the full documentation
454

454

00:18:53,912  -->  00:18:55,823
in case you ever need to look something up,
455

455

00:18:55,823  -->  00:18:57,548
and there's also a nice summary of tables
456

456

00:18:57,548  -->  00:18:59,470
at this source that I linked to here,
457

457

00:18:59,470  -->  00:19:01,400
Python Regular Expressions,
458

458

00:19:01,400  -->  00:19:03,581
so you can check that out yourself.
459

459

00:19:03,581  -->  00:19:05,512
Go ahead and make sure you read through
460

460

00:19:05,512  -->  00:19:07,045
this Jupyter Notebook
461

461

00:19:07,045  -->  00:19:09,147
to fully understand regular expressions.
462

462

00:19:09,147  -->  00:19:11,127
I hope this video helped you out
463

463

00:19:11,127  -->  00:19:13,657
as far as understanding the general syntax,
464

464

00:19:13,657  -->  00:19:16,642
where you have a re module, some dot methods,
465

465

00:19:16,642  -->  00:19:19,264
and then you check for the pattern and then the text,
466

466

00:19:19,264  -->  00:19:21,243
and then what makes regular expressions
467

467

00:19:21,243  -->  00:19:22,971
special in Python is that you have
468

468

00:19:22,971  -->  00:19:25,628
these various notations for syntax
469

469

00:19:25,628  -->  00:19:27,154
as far as exclusion,
470

470

00:19:27,154  -->  00:19:30,100
character sets, repetition, et cetera.
471

471

00:19:30,100  -->  00:19:31,704
And there's a lot more than that
472

472

00:19:31,704  -->  00:19:33,116
that you can check out in the
473

473

00:19:33,116  -->  00:19:35,197
regular expression documentation.
474

474

00:19:35,197  -->  00:19:36,881
Okay, thanks everyone.
475

475

00:19:36,881  -->  00:19:39,614
That's probably one of the most difficult
476

476

00:19:39,614  -->  00:19:42,372
lectures as far as the modules go,
477

477

00:19:42,372  -->  00:19:44,575
so I really encourage you to take your time
478

478

00:19:44,575  -->  00:19:47,092
and go through the Jupyter Notebook slowly.
479

479

00:19:47,092  -->  00:19:48,572
Okay, thank you everyone,
480

480

00:19:48,572  -->  00:19:51,655
and I'll see you at the next lecture.
