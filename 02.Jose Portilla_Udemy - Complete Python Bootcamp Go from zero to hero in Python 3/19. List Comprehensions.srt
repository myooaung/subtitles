1
1

00:00:01,640  -->  00:00:02,473
<v Instructor>Hello everyone,</v>
2

2

00:00:02,473  -->  00:00:04,942
and welcome to the comprehensions lecture.
3

3

00:00:04,942  -->  00:00:07,209
So we've already seen some sequence operations
4

4

00:00:07,209  -->  00:00:09,301
and list methods in Python,
5

5

00:00:09,301  -->  00:00:11,791
but Python also includes this more advanced operation
6

6

00:00:11,791  -->  00:00:13,944
called a list comprehension.
7

7

00:00:13,944  -->  00:00:16,064
It's super useful but it's one of those things
8

8

00:00:16,064  -->  00:00:17,586
that sometimes beginners have a hard time
9

9

00:00:17,586  -->  00:00:19,333
being able to read.
10

10

00:00:19,333  -->  00:00:21,446
So, what list comprehensions allow us to do
11

11

00:00:21,446  -->  00:00:25,271
is build out lists using a slightly different notation.
12

12

00:00:25,271  -->  00:00:26,749
So you can think of this as essentially
13

13

00:00:26,749  -->  00:00:30,501
a one line for loop that's built inside of brackets.
14

14

00:00:30,501  -->  00:00:31,707
So we're gonna go ahead here,
15

15

00:00:31,707  -->  00:00:33,178
I have the Jupyter notebook open,
16

16

00:00:33,178  -->  00:00:35,763
we're gonna go ahead and work through several examples
17

17

00:00:35,763  -->  00:00:38,965
so we can make sure we understand what's going on.
18

18

00:00:38,965  -->  00:00:40,200
So the first thing I'm gonna do
19

19

00:00:40,200  -->  00:00:43,700
is do a building out of a list, basically,
20

20

00:00:46,976  -->  00:00:49,392
an old fashioned way using for loops,
21

21

00:00:49,392  -->  00:00:51,267
the way we know how to already do.
22

22

00:00:51,267  -->  00:00:52,788
So I'm gonna create a list
23

23

00:00:52,788  -->  00:00:56,046
and I'm gonna make an empty list that's just brackets.
24

24

00:00:56,046  -->  00:00:59,879
And then I'm also gonna create, I'm gonna say,
25

25

00:01:01,273  -->  00:01:02,856
for letter in word,
26

26

00:01:07,450  -->  00:01:11,333
and I'm just gonna pass in that string, word,
27

27

00:01:11,333  -->  00:01:14,833
take my list and append that letter to it.
28

28

00:01:17,389  -->  00:01:20,800
And then I'm gonna say, outside of the for loop,
29

29

00:01:20,800  -->  00:01:23,232
at the end of that, print L, that list.
30

30

00:01:23,232  -->  00:01:24,906
So what's gonna go on here,
31

31

00:01:24,906  -->  00:01:27,506
I'm gonna build my empty list out,
32

32

00:01:27,506  -->  00:01:30,138
I'm gonna go through every element in the sequence
33

33

00:01:30,138  -->  00:01:33,290
that is a string, so that's gonna be every letter there.
34

34

00:01:33,290  -->  00:01:35,674
And I'm gonna append that letter to the list.
35

35

00:01:35,674  -->  00:01:38,267
So let's go ahead and see what happens there.
36

36

00:01:38,267  -->  00:01:41,036
Okay, so I've built out that list,
37

37

00:01:41,036  -->  00:01:42,174
and it's basically every element
38

38

00:01:42,174  -->  00:01:45,921
is one of the letters in that string.
39

39

00:01:45,921  -->  00:01:49,407
So, now I'm gonna show you how to build this out
40

40

00:01:49,407  -->  00:01:51,884
using list comprehension.
41

41

00:01:51,884  -->  00:01:54,723
So list comprehension, the format is,
42

42

00:01:54,723  -->  00:01:58,095
you basically kind of flatten out this for loop
43

43

00:01:58,095  -->  00:02:02,428
within a list, so, or at least within the brackets.
44

44

00:02:02,428  -->  00:02:06,095
And I'm gonna say letter for letter in word.
45

45

00:02:11,204  -->  00:02:14,602
And that's it, that's the syntax for list comprehension.
46

46

00:02:14,602  -->  00:02:17,426
So, you begin with what you actually want
47

47

00:02:17,426  -->  00:02:19,859
the list to consist of.
48

48

00:02:19,859  -->  00:02:22,656
So I want the list to consist of the letters.
49

49

00:02:22,656  -->  00:02:25,406
So for letter for letter in word.
50

50

00:02:27,106  -->  00:02:28,350
And that's it, you don't have to worry
51

51

00:02:28,350  -->  00:02:30,734
about the sort of append structure,
52

52

00:02:30,734  -->  00:02:33,286
because you're in a list comprehension.
53

53

00:02:33,286  -->  00:02:35,367
It knows that it wants the letters there
54

54

00:02:35,367  -->  00:02:37,778
based on what you've put in.
55

55

00:02:37,778  -->  00:02:41,373
So now if I check what L is equal to, it's the same.
56

56

00:02:41,373  -->  00:02:44,160
And let me go ahead and just make a new object called lst,
57

57

00:02:44,160  -->  00:02:45,566
so we really make sure that it's
58

58

00:02:45,566  -->  00:02:47,630
the list comprehension that's doing it,
59

59

00:02:47,630  -->  00:02:49,099
and there you have it.
60

60

00:02:49,099  -->  00:02:51,585
So it's the basic idea of list comprehension
61

61

00:02:51,585  -->  00:02:54,587
that you're kind of flattening out that for loop.
62

62

00:02:54,587  -->  00:02:58,439
So, if you're familiar with mathematical notation,
63

63

00:02:58,439  -->  00:03:01,040
this might kind of feel familiar.
64

64

00:03:01,040  -->  00:03:04,840
So sometimes in mathematics, just to type,
65

65

00:03:04,840  -->  00:03:06,717
let's say something out, so I'm gonna change this
66

66

00:03:06,717  -->  00:03:10,199
to a markdown cell to show you what I mean.
67

67

00:03:10,199  -->  00:03:12,214
Sometimes in mathematics we have this kind of notation
68

68

00:03:12,214  -->  00:03:15,714
where you say, like, X squared colon X in,
69

69

00:03:16,869  -->  00:03:19,519
and then you have some sort of set of numbers.
70

70

00:03:19,519  -->  00:03:21,736
So maybe you've taken some more advanced math classes
71

71

00:03:21,736  -->  00:03:23,917
and this sort of notation makes sense to you.
72

72

00:03:23,917  -->  00:03:26,201
So that's basically what you're doing in list comprehension.
73

73

00:03:26,201  -->  00:03:28,515
Where this colon stands for for.
74

74

00:03:28,515  -->  00:03:30,809
And you're gonna say something like,
75

75

00:03:30,809  -->  00:03:34,976
X squared for X, and then, in some sort of iterable,
76

76

00:03:36,235  -->  00:03:39,601
so that could have been a range, like that.
77

77

00:03:39,601  -->  00:03:41,519
So let's go ahead and actually build out that example
78

78

00:03:41,519  -->  00:03:43,698
that we just talked about.
79

79

00:03:43,698  -->  00:03:45,380
So I'm gonna square numbers in range,
80

80

00:03:45,380  -->  00:03:47,216
and then turn it into a list.
81

81

00:03:47,216  -->  00:03:50,716
So I'm gonna say lst is equal to brackets,
82

82

00:03:51,881  -->  00:03:53,798
I'm going to take an X,
83

83

00:03:56,552  -->  00:03:58,885
and square it for X in range
84

84

00:04:02,773  -->  00:04:05,325
zero up to but not including 11.
85

85

00:04:05,325  -->  00:04:10,072
So what's going on here, I'm going to take every X
86

86

00:04:10,072  -->  00:04:13,812
in this range, and I'm going to square it,
87

87

00:04:13,812  -->  00:04:17,207
and that will be the result of my list.
88

88

00:04:17,207  -->  00:04:19,247
So that's list comprehension.
89

89

00:04:19,247  -->  00:04:22,377
And also, quick note, we could have done X range here,
90

90

00:04:22,377  -->  00:04:24,208
since we're using Python Two,
91

91

00:04:24,208  -->  00:04:26,367
that's gonna be the same thing.
92

92

00:04:26,367  -->  00:04:29,214
Okay, so again let's just break down what's happening here,
93

93

00:04:29,214  -->  00:04:30,714
and something that's a little confusing
94

94

00:04:30,714  -->  00:04:32,644
when it comes to list comprehensions,
95

95

00:04:32,644  -->  00:04:34,503
sometimes you feel like you have to know already
96

96

00:04:34,503  -->  00:04:37,926
the results, so when you're writing a normal for loop,
97

97

00:04:37,926  -->  00:04:41,665
you kinda start more on this end first.
98

98

00:04:41,665  -->  00:04:45,832
And then, put in whatever object or output you want.
99

99

00:04:46,720  -->  00:04:48,467
And in list comprehensions you actually start
100

100

00:04:48,467  -->  00:04:50,414
with the output you want, and then define
101

101

00:04:50,414  -->  00:04:54,245
how you're gonna get it through some sort of for loop.
102

102

00:04:54,245  -->  00:04:55,261
Okay.
103

103

00:04:55,261  -->  00:04:57,480
So in this example we're saying,
104

104

00:04:57,480  -->  00:05:01,647
take my X, square it for X in range blah blah blah,
105

105

00:05:02,891  -->  00:05:06,229
zero to 11, and then we have brackets there.
106

106

00:05:06,229  -->  00:05:07,378
Okay.
107

107

00:05:07,378  -->  00:05:10,352
So, let's go ahead and do another example
108

108

00:05:10,352  -->  00:05:12,904
that checks for even numbers in a range.
109

109

00:05:12,904  -->  00:05:14,155
And now we're gonna basically introduce
110

110

00:05:14,155  -->  00:05:17,658
an if statement in our list comprehension.
111

111

00:05:17,658  -->  00:05:19,739
So, let's go ahead and make an example
112

112

00:05:19,739  -->  00:05:23,791
that checks for even numbers in a range.
113

113

00:05:23,791  -->  00:05:27,958
So I want a number, I'll just type it out, number,
114

114

00:05:29,549  -->  00:05:33,716
and I want that, I want even numbers from zero to 10.
115

115

00:05:34,644  -->  00:05:38,811
So I'm gonna say give me the number for number in range,
116

116

00:05:41,957  -->  00:05:46,040
and I'm going to want up to but not including 11,
117

117

00:05:47,515  -->  00:05:49,879
remember default for range starting is zero,
118

118

00:05:49,879  -->  00:05:52,399
and since I only want the even numbers,
119

119

00:05:52,399  -->  00:05:54,694
I'm gonna write an if statement here.
120

120

00:05:54,694  -->  00:05:57,323
I'm gonna say, number for number in range,
121

121

00:05:57,323  -->  00:06:01,106
if, that number, remember we can check for evens
122

122

00:06:01,106  -->  00:06:05,023
using the modulo, modulo two, is equal to zero.
123

123

00:06:07,583  -->  00:06:11,895
So if I run that, now I have a list of even numbers
124

124

00:06:11,895  -->  00:06:13,228
from zero to 10.
125

125

00:06:14,171  -->  00:06:15,247
So let's go ahead and quickly
126

126

00:06:15,247  -->  00:06:17,157
break down what's going on here.
127

127

00:06:17,157  -->  00:06:20,944
I'm saying, number for number in that range,
128

128

00:06:20,944  -->  00:06:23,349
keep that number and build out the list
129

129

00:06:23,349  -->  00:06:25,435
if that number, when it's modded,
130

130

00:06:25,435  -->  00:06:28,078
modulo two, is equal to zero.
131

131

00:06:28,078  -->  00:06:30,761
And let's go ahead and deconstruct this list comprehension
132

132

00:06:30,761  -->  00:06:31,955
to make sure we really understand it
133

133

00:06:31,955  -->  00:06:34,443
by building out a for loop of it.
134

134

00:06:34,443  -->  00:06:36,214
So the way I would do this in a for loop,
135

135

00:06:36,214  -->  00:06:39,942
I would say list, build out an empty list,
136

136

00:06:39,942  -->  00:06:42,692
and then say for number in range,
137

137

00:06:45,390  -->  00:06:48,807
11, if number, mod two, is equal to zero,
138

138

00:06:53,133  -->  00:06:54,883
append it to my list.
139

139

00:06:55,719  -->  00:06:57,302
Append that number.
140

140

00:06:59,919  -->  00:07:02,901
And now the list you'll see is the same thing.
141

141

00:07:02,901  -->  00:07:05,553
So the reason list comprehension is so popular in Python
142

142

00:07:05,553  -->  00:07:09,779
is that once you get used to list comprehension syntax,
143

143

00:07:09,779  -->  00:07:13,841
this kind of thing becomes a lot cleaner
144

144

00:07:13,841  -->  00:07:17,174
and more Pythonistic than this for loop.
145

145

00:07:18,247  -->  00:07:22,032
Now it's kind of debatable what is easier to read.
146

146

00:07:22,032  -->  00:07:24,099
Frankly a lot of times, depending on how complicated
147

147

00:07:24,099  -->  00:07:25,769
list comprehension can get,
148

148

00:07:25,769  -->  00:07:29,227
I actually still find this kind of for loop easier to read.
149

149

00:07:29,227  -->  00:07:30,763
But sometimes it's more efficient
150

150

00:07:30,763  -->  00:07:33,208
and just cleaner looking syntax
151

151

00:07:33,208  -->  00:07:36,432
to have everything a singular list comprehension.
152

152

00:07:36,432  -->  00:07:38,516
And as you start getting more and more comfortable
153

153

00:07:38,516  -->  00:07:40,093
with list comprehensions you'll find yourself
154

154

00:07:40,093  -->  00:07:42,392
using them more and more.
155

155

00:07:42,392  -->  00:07:46,649
Alright, so now we're gonna do a more complicated example.
156

156

00:07:46,649  -->  00:07:47,926
So we're gonna make an example
157

157

00:07:47,926  -->  00:07:51,632
that converts Celsius to Fahrenheit.
158

158

00:07:51,632  -->  00:07:55,465
So I'm gonna start with a list called Celsius,
159

159

00:07:56,449  -->  00:07:58,644
and it's just gonna contain some temperatures
160

160

00:07:58,644  -->  00:08:01,060
that I'm making up that are in Celsius.
161

161

00:08:01,060  -->  00:08:03,505
So zero degrees Celsius, 10,
162

162

00:08:03,505  -->  00:08:05,205
let's put in some floating point numbers,
163

163

00:08:05,205  -->  00:08:07,074
and let's say 34.5.
164

164

00:08:07,074  -->  00:08:11,478
Okay, so I have my list of Celsius temperatures.
165

165

00:08:11,478  -->  00:08:13,582
And now I'm gonna use list comprehension
166

166

00:08:13,582  -->  00:08:16,332
to convert those into Fahrenheit.
167

167

00:08:17,637  -->  00:08:21,838
So I'm gonna create a list called Fahrenheit,
168

168

00:08:21,838  -->  00:08:25,495
and create my brackets for the list comprehension,
169

169

00:08:25,495  -->  00:08:27,832
and let's build out what we actually want to do.
170

170

00:08:27,832  -->  00:08:30,249
So, temp for temp in Celsius.
171

171

00:08:34,978  -->  00:08:36,556
So what's that gonna output?
172

172

00:08:36,556  -->  00:08:39,425
Well, that should output basically a duplicate list
173

173

00:08:39,425  -->  00:08:42,056
of the Celsius, right, if I just grab
174

174

00:08:42,056  -->  00:08:47,032
every temperature there, that's the same as Celsius,
175

175

00:08:47,032  -->  00:08:49,532
woops, misspelt it, Celsius.
176

176

00:08:50,973  -->  00:08:54,288
Okay, so right now, Fahrenheit should look exactly the same.
177

177

00:08:54,288  -->  00:08:57,256
Okay, so what do we want to do with this temperature?
178

178

00:08:57,256  -->  00:08:59,507
So if you look up the conversion equation,
179

179

00:08:59,507  -->  00:09:02,007
what I actually want to do is,
180

180

00:09:03,096  -->  00:09:04,513
take temperature,
181

181

00:09:06,585  -->  00:09:10,459
I want to divide it by five, actually wait.
182

182

00:09:10,459  -->  00:09:12,959
I want to take the temperature
183

183

00:09:14,265  -->  00:09:17,598
and multiply it by nine divided by five.
184

184

00:09:21,076  -->  00:09:22,734
And I'm gonna go ahead and put 5.0
185

185

00:09:22,734  -->  00:09:24,765
so we don't have any floating point errors
186

186

00:09:24,765  -->  00:09:27,455
since I'm working in Python Two.
187

187

00:09:27,455  -->  00:09:30,955
And then, I'm gonna add 32 to that number.
188

188

00:09:32,907  -->  00:09:34,719
And I'm gonna go ahead and wrap that in parentheses
189

189

00:09:34,719  -->  00:09:37,866
to make sure there's no order of operations error.
190

190

00:09:37,866  -->  00:09:41,699
Okay, so let's go ahead and see if that works.
191

191

00:09:43,880  -->  00:09:46,188
And there you have it, and you can quickly check,
192

192

00:09:46,188  -->  00:09:47,444
hopefully if you're familiar
193

193

00:09:47,444  -->  00:09:49,569
with both Celsius and Fahrenheit, you know that zero degrees
194

194

00:09:49,569  -->  00:09:52,625
is the same as 32 degrees in Fahrenheit,
195

195

00:09:52,625  -->  00:09:55,030
so you can see that this matches up.
196

196

00:09:55,030  -->  00:09:56,940
So let's go ahead and break down again real quick
197

197

00:09:56,940  -->  00:09:58,357
what we just did.
198

198

00:10:01,085  -->  00:10:05,498
I'm saying, take my temperature, multiply it by some factor,
199

199

00:10:05,498  -->  00:10:09,665
add 32 for it, and do that for every temperature in Celsius,
200

200

00:10:10,541  -->  00:10:12,631
and then because this statement is in brackets,
201

201

00:10:12,631  -->  00:10:14,191
it's a list comprehension and it's gonna build out
202

202

00:10:14,191  -->  00:10:15,441
a list for you.
203

203

00:10:16,469  -->  00:10:18,030
Okay, great.
204

204

00:10:18,030  -->  00:10:21,548
Now moving on to a more complicated example.
205

205

00:10:21,548  -->  00:10:24,766
We're going to perform a nested list comprehension.
206

206

00:10:24,766  -->  00:10:28,838
And as you start nesting list comprehensions
207

207

00:10:28,838  -->  00:10:30,283
it might get more and more debatable
208

208

00:10:30,283  -->  00:10:33,467
how useful and how clean it is,
209

209

00:10:33,467  -->  00:10:35,380
but it's important that you're able to at least
210

210

00:10:35,380  -->  00:10:37,425
be aware of them and read them.
211

211

00:10:37,425  -->  00:10:41,592
So what we're gonna do, is, make one list comprehension,
212

212

00:10:43,644  -->  00:10:45,214
I'm gonna say, let's go ahead and do
213

213

00:10:45,214  -->  00:10:49,286
that squared comprehension we were talking about earlier.
214

214

00:10:49,286  -->  00:10:50,286
In range 11.
215

215

00:10:54,622  -->  00:10:58,455
Okay, so, now my list is every number squared.
216

216

00:10:59,549  -->  00:11:02,505
But I can actually nest that list comprehension.
217

217

00:11:02,505  -->  00:11:04,589
So, that's already a list,
218

218

00:11:04,589  -->  00:11:07,295
kind of the same way Celsius was a list earlier.
219

219

00:11:07,295  -->  00:11:10,708
And now I can do something for every item in that list,
220

220

00:11:10,708  -->  00:11:13,521
so let's go ahead and square it again,
221

221

00:11:13,521  -->  00:11:16,604
so I'm gonna say, X squared for X in,
222

222

00:11:19,884  -->  00:11:22,542
and since I have a list here,
223

223

00:11:22,542  -->  00:11:25,175
Python's gonna treat that list comprehension we just made
224

224

00:11:25,175  -->  00:11:27,749
as an already completed list,
225

225

00:11:27,749  -->  00:11:30,774
since it's nested inside this list comprehension.
226

226

00:11:30,774  -->  00:11:35,186
And now I should get every number to the power of four.
227

227

00:11:35,186  -->  00:11:36,130
Great.
228

228

00:11:36,130  -->  00:11:37,898
And you can see that worked out.
229

229

00:11:37,898  -->  00:11:42,241
So, you could keep nesting and nesting list comprehensions,
230

230

00:11:42,241  -->  00:11:44,224
but just be careful and make sure
231

231

00:11:44,224  -->  00:11:46,767
that you yourself can always go back and read them.
232

232

00:11:46,767  -->  00:11:49,757
And as always you can use just comments,
233

233

00:11:49,757  -->  00:11:53,924
so I could say, here, final result is X four from range,
234

234

00:12:00,161  -->  00:12:02,661
let's say for num in range 11,
235

235

00:12:04,574  -->  00:12:06,060
so if I came back to this later I would understand
236

236

00:12:06,060  -->  00:12:08,143
what's actually going on.
237

237

00:12:09,678  -->  00:12:11,564
Okay, so later on in this course
238

238

00:12:11,564  -->  00:12:13,173
we'll actually learn about something
239

239

00:12:13,173  -->  00:12:14,993
called generator comprehensions,
240

240

00:12:14,993  -->  00:12:17,422
and I know I've slowly been sneaking in previews
241

241

00:12:17,422  -->  00:12:19,688
and dropping hints about generators,
242

242

00:12:19,688  -->  00:12:21,795
but after this lecture you should at least
243

243

00:12:21,795  -->  00:12:23,279
feel comfortable reading and writing
244

244

00:12:23,279  -->  00:12:25,558
pretty basic list comprehensions.
245

245

00:12:25,558  -->  00:12:27,557
So let's go ahead and hop back to the Jupyter notebook
246

246

00:12:27,557  -->  00:12:29,874
and just make sure we got everything.
247

247

00:12:29,874  -->  00:12:32,003
So remember, list comprehensions,
248

248

00:12:32,003  -->  00:12:33,864
they're basically like deconstructed for loops
249

249

00:12:33,864  -->  00:12:36,944
that are flattened out within brackets.
250

250

00:12:36,944  -->  00:12:39,667
And you can do list comprehensions
251

251

00:12:39,667  -->  00:12:44,039
on any iterable or anything you can do a for loop for.
252

252

00:12:44,039  -->  00:12:46,408
So if you find yourself making a for loop
253

253

00:12:46,408  -->  00:12:49,475
that's just building out a list,
254

254

00:12:49,475  -->  00:12:51,646
keep in mind that maybe a list comprehension
255

255

00:12:51,646  -->  00:12:54,799
is a cleaner way of doing it.
256

256

00:12:54,799  -->  00:12:56,888
Okay, and again, all these examples
257

257

00:12:56,888  -->  00:12:58,058
are in the Jupyter notebook,
258

258

00:12:58,058  -->  00:13:01,098
so you can go ahead and feel free to explore them later,
259

259

00:13:01,098  -->  00:13:02,882
and we'll be using list comprehensions
260

260

00:13:02,882  -->  00:13:06,250
later on in some projects down the road.
261

261

00:13:06,250  -->  00:13:08,083
Okay, thanks everyone.
