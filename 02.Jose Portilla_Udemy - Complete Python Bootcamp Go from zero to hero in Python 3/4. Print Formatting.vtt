WEBVTT
1
1

00:00:01.016  -->  00:00:01.849
<v Instructor>Hello everyone,</v>
2

2

00:00:01.849  -->  00:00:04.554
and welcome to the print formatting lecture.
3

3

00:00:04.554  -->  00:00:05.799
In this lecture, we're gonna cover
4

4

00:00:05.799  -->  00:00:08.602
the various ways to format your print statements.
5

5

00:00:08.602  -->  00:00:11.712
As always, there's a full Jupyter notebook that goes along
6

6

00:00:11.712  -->  00:00:13.793
everything we're gonna cover, so we'll be covering
7

7

00:00:13.793  -->  00:00:17.960
the various formats of strings in Python 2 and Python 3.
8

8

00:00:19.049  -->  00:00:22.431
We'll also go over floating point number syntax.
9

9

00:00:22.431  -->  00:00:25.182
We'll look at some conversion format methods.
10

10

00:00:25.182  -->  00:00:27.287
We'll look at multiple formats,
11

11

00:00:27.287  -->  00:00:30.066
and then we'll look at the string.format method,
12

12

00:00:30.066  -->  00:00:31.164
which is probably the best way
13

13

00:00:31.164  -->  00:00:34.290
to use print formatting in Python.
14

14

00:00:34.290  -->  00:00:38.548
Okay, so let's go ahead and get started with some live code.
15

15

00:00:38.548  -->  00:00:39.628
The first thing we're gonna do
16

16

00:00:39.628  -->  00:00:42.397
is what we just covered in the string lecture,
17

17

00:00:42.397  -->  00:00:44.487
which is just a basic print statement.
18

18

00:00:44.487  -->  00:00:47.247
Again, remember, this is for Python 2.
19

19

00:00:47.247  -->  00:00:49.961
So I'm gonna say this is a string.
20

20

00:00:49.961  -->  00:00:52.515
If you're using Python 3, this would be a print function,
21

21

00:00:52.515  -->  00:00:54.701
which we covered in the last lecture.
22

22

00:00:54.701  -->  00:00:57.487
Continuing on, let's say we had a variable
23

23

00:00:57.487  -->  00:01:00.376
that we wanted to insert into this string.
24

24

00:01:00.376  -->  00:01:03.736
So I'm gonna make a variable called s,
25

25

00:01:03.736  -->  00:01:06.153
and it will be called String.
26

26

00:01:07.466  -->  00:01:08.440
And now what I wanna do
27

27

00:01:08.440  -->  00:01:11.872
is place that string within another string,
28

28

00:01:11.872  -->  00:01:13.787
or really place that variable.
29

29

00:01:13.787  -->  00:01:15.870
So I'm going to say print
30

30

00:01:17.029  -->  00:01:19.112
'Place my variable here:,
31

31

00:01:22.104  -->  00:01:23.621
and the syntax looks like this.
32

32

00:01:23.621  -->  00:01:26.371
It's gonna be percentage sign, s,
33

33

00:01:28.639  -->  00:01:31.812
percentage sign, parentheses,
34

34

00:01:31.812  -->  00:01:34.729
and then the object variable label.
35

35

00:01:35.924  -->  00:01:38.004
So if I click Shift + Enter here,
36

36

00:01:38.004  -->  00:01:42.171
it's inserted that string variable into my other string.
37

37

00:01:45.172  -->  00:01:46.312
And I want you to notice here,
38

38

00:01:46.312  -->  00:01:48.045
I could have named this variable anything.
39

39

00:01:48.045  -->  00:01:49.813
So I could have said x here,
40

40

00:01:49.813  -->  00:01:54.584
and as long as it matches up x, it'll still work.
41

41

00:01:54.584  -->  00:01:57.057
What this s stands for is string.
42

42

00:01:57.057  -->  00:01:59.553
So what this is actually doing is transforming
43

43

00:01:59.553  -->  00:02:02.647
whatever object you have in these parentheses
44

44

00:02:02.647  -->  00:02:03.971
in front of the percentage sign
45

45

00:02:03.971  -->  00:02:07.546
into a string so it can place it in the string.
46

46

00:02:07.546  -->  00:02:10.066
And because it's transforming it into a string,
47

47

00:02:10.066  -->  00:02:12.905
I can actually put in numbers here as well,
48

48

00:02:12.905  -->  00:02:16.977
and if I run this cell, you'll notice it still works.
49

49

00:02:16.977  -->  00:02:19.085
And it's the same with floating point numbers.
50

50

00:02:19.085  -->  00:02:23.252
So, for instance, 13.13, if I run it, it takes 13.13
51

51

00:02:24.564  -->  00:02:27.673
here as x and transforms it into a string
52

52

00:02:27.673  -->  00:02:32.154
that I can put and format into my string before I print it.
53

53

00:02:32.154  -->  00:02:34.782
Okay, so that's one method
54

54

00:02:34.782  -->  00:02:38.636
of putting your variables into your string.
55

55

00:02:38.636  -->  00:02:40.648
Let's go ahead and check another one
56

56

00:02:40.648  -->  00:02:44.565
that's more specific to floating point numbers.
57

57

00:02:45.926  -->  00:02:48.009
So I'm going to say print
58

58

00:02:49.731  -->  00:02:52.148
Floating point number, colon,
59

59

00:02:53.811  -->  00:02:55.767
and the format's gonna look something like this.
60

60

00:02:55.767  -->  00:02:57.635
It's gonna have that same percentage sign,
61

61

00:02:57.635  -->  00:03:00.167
but it's gone to have two decimals...
62

62

00:03:00.167  -->  00:03:02.902
Excuse me, two numbers with a decimal in between.
63

63

00:03:02.902  -->  00:03:04.652
So I'm gonna say 1.2,
64

64

00:03:05.616  -->  00:03:07.804
and then an f for floating point number.
65

65

00:03:07.804  -->  00:03:11.133
And then we'll close off that string with a single quote,
66

66

00:03:11.133  -->  00:03:14.059
and here, we'll pass in a floating point number.
67

67

00:03:14.059  -->  00:03:15.726
So let's say 13.145.
68

68

00:03:20.099  -->  00:03:20.932
All right.
69

69

00:03:20.932  -->  00:03:23.558
So let's take a look at what happens.
70

70

00:03:23.558  -->  00:03:27.475
So if you notice here, it got cut off to 13.14.
71

71

00:03:28.640  -->  00:03:29.820
So why is that?
72

72

00:03:29.820  -->  00:03:33.573
If we notice these two numbers here, the first number
73

73

00:03:33.573  -->  00:03:35.827
is the total minimum number of digits
74

74

00:03:35.827  -->  00:03:38.796
that the string should contain, and I'll make that clear
75

75

00:03:38.796  -->  00:03:41.155
in just a second by enlarging the number.
76

76

00:03:41.155  -->  00:03:42.472
What we wanna focus on right now
77

77

00:03:42.472  -->  00:03:45.389
is the number that comes after the decimal.
78

78

00:03:45.389  -->  00:03:47.179
So this placeholder number stands
79

79

00:03:47.179  -->  00:03:50.265
for how many numbers to show past that decimal point.
80

80

00:03:50.265  -->  00:03:52.735
So if I were to change this to three,
81

81

00:03:52.735  -->  00:03:56.229
it will show 145 when I run this cell,
82

82

00:03:56.229  -->  00:03:59.834
and likewise, if I change it to one,
83

83

00:03:59.834  -->  00:04:04.145
it will only show one number when I print that cell.
84

84

00:04:04.145  -->  00:04:08.245
Now, if I make it a very large number such as 10,
85

85

00:04:08.245  -->  00:04:11.263
it's going to fill in the rest of those numbers with zeroes.
86

86

00:04:11.263  -->  00:04:15.220
So again, this number, after the decimal point,
87

87

00:04:15.220  -->  00:04:19.387
tells you or tells Python how many digits will I show
88

88

00:04:20.340  -->  00:04:23.501
past that decimal point if it's a floating point number.
89

89

00:04:23.501  -->  00:04:26.148
Let's go ahead and remain it with three,
90

90

00:04:26.148  -->  00:04:28.600
or have it stay with three.
91

91

00:04:28.600  -->  00:04:31.588
Now, this first number is the total minimum number
92

92

00:04:31.588  -->  00:04:33.477
of digits that the string should contain.
93

93

00:04:33.477  -->  00:04:35.464
At least, that's the way you can think about it.
94

94

00:04:35.464  -->  00:04:38.853
So if I put one, nothing's gonna change,
95

95

00:04:38.853  -->  00:04:42.867
but let's say I put in a very large number such as 25
96

96

00:04:42.867  -->  00:04:44.739
and click Enter.
97

97

00:04:44.739  -->  00:04:47.620
Notice how we will in a bunch of white space.
98

98

00:04:47.620  -->  00:04:49.659
So since you're telling Python,
99

99

00:04:49.659  -->  00:04:52.312
I need this entire digit here
100

100

00:04:52.312  -->  00:04:55.395
to take up 25 essentially characters,
101

101

00:04:57.519  -->  00:04:59.061
it's gonna fill in the characters
102

102

00:04:59.061  -->  00:05:01.658
that are not there with white space.
103

103

00:05:01.658  -->  00:05:03.761
So you can go ahead and just arbitrarily
104

104

00:05:03.761  -->  00:05:06.089
leave this as one if you're not really concerned
105

105

00:05:06.089  -->  00:05:09.946
about your print formatting for floating point numbers.
106

106

00:05:09.946  -->  00:05:12.306
If we hop back over to the Jupyter notebook,
107

107

00:05:12.306  -->  00:05:14.777
I put in quite a few examples for you to really
108

108

00:05:14.777  -->  00:05:18.340
get an idea of how this affects your print statements.
109

109

00:05:18.340  -->  00:05:22.015
Okay, let's go ahead and move on to conversion format
110

110

00:05:22.015  -->  00:05:24.914
methods, which, we've actually already seen one.
111

111

00:05:24.914  -->  00:05:29.395
So these two methods will just convert any Python object
112

112

00:05:29.395  -->  00:05:30.940
into a string.
113

113

00:05:30.940  -->  00:05:33.953
So the first one that we've already seen is
114

114

00:05:33.953  -->  00:05:37.953
convert to string, and that's just that %s.
115

115

00:05:40.390  -->  00:05:43.540
And then what I'll do is just pass in any object
116

116

00:05:43.540  -->  00:05:48.319
such as an integer, and it converts it into a string.
117

117

00:05:48.319  -->  00:05:52.831
The other formatting tool we can use is %r,
118

118

00:05:52.831  -->  00:05:55.195
and it will actually do the same thing.
119

119

00:05:55.195  -->  00:05:56.618
But the difference between them
120

120

00:05:56.618  -->  00:05:58.752
is they use two separate methods.
121

121

00:05:58.752  -->  00:06:02.278
One uses something called str function,
122

122

00:06:02.278  -->  00:06:06.186
and the other one uses repr function.
123

123

00:06:06.186  -->  00:06:08.779
So don't worry about those specific functions right now.
124

124

00:06:08.779  -->  00:06:10.025
We'll learn about them later on
125

125

00:06:10.025  -->  00:06:12.240
and how those two separate methods are different,
126

126

00:06:12.240  -->  00:06:14.418
but I just want you to be aware
127

127

00:06:14.418  -->  00:06:18.936
of %r and %s as print formatting options.
128

128

00:06:18.936  -->  00:06:19.995
Okay.
129

129

00:06:19.995  -->  00:06:24.383
So let's say you wanted to put in more than one variable
130

130

00:06:24.383  -->  00:06:25.830
into your string.
131

131

00:06:25.830  -->  00:06:27.438
How would you do that?
132

132

00:06:27.438  -->  00:06:30.335
Well, you can use multiple percentage signs.
133

133

00:06:30.335  -->  00:06:31.918
So I can say print,
134

134

00:06:33.085  -->  00:06:35.168
let's say First: %s,
135

135

00:06:37.811  -->  00:06:39.144
Second: %s,
136

136

00:06:41.232  -->  00:06:43.149
and then Third %s,
137

137

00:06:45.247  -->  00:06:48.073
and then I will finally call a percentage sign
138

138

00:06:48.073  -->  00:06:49.721
and here have parentheses.
139

139

00:06:49.721  -->  00:06:51.845
And what I'm gonna do now is pass in objects
140

140

00:06:51.845  -->  00:06:54.797
in the order I want them to show up,
141

141

00:06:54.797  -->  00:06:58.350
and this is something that we're gonna look into further
142

142

00:06:58.350  -->  00:07:00.507
in just a tiny second.
143

143

00:07:00.507  -->  00:07:03.507
So, if I say hi! as my first object,
144

144

00:07:04.740  -->  00:07:07.323
and I'll have this one say two,
145

145

00:07:08.475  -->  00:07:11.977
and this one, just pass in a number three,
146

146

00:07:11.977  -->  00:07:14.833
and I run that cell, what Python's gonna do
147

147

00:07:14.833  -->  00:07:16.266
is it's gonna take 'em in order.
148

148

00:07:16.266  -->  00:07:19.339
So this first percentage sign is going to be assigned
149

149

00:07:19.339  -->  00:07:22.580
the first item in this, which is a tuple,
150

150

00:07:22.580  -->  00:07:25.926
which we actually learn about later on.
151

151

00:07:25.926  -->  00:07:28.539
And then the second one takes in two in order.
152

152

00:07:28.539  -->  00:07:31.665
The third %s takes in three and converts it into a string,
153

153

00:07:31.665  -->  00:07:34.881
and then places it, formats it into your string.
154

154

00:07:34.881  -->  00:07:38.033
This is kind of a classic method that you see used a lot
155

155

00:07:38.033  -->  00:07:39.966
when you're reading other people's code,
156

156

00:07:39.966  -->  00:07:43.378
but the best Pythonic way to do this
157

157

00:07:43.378  -->  00:07:46.758
is using the string.format method,
158

158

00:07:46.758  -->  00:07:48.317
and I'll show you why.
159

159

00:07:48.317  -->  00:07:50.900
So let's say we wanted to print
160

160

00:07:54.158  -->  00:07:55.991
first, second %s.
161

161

00:08:02.625  -->  00:08:04.901
Now, if I actually wanted the same object
162

162

00:08:04.901  -->  00:08:08.884
to go to both of them, I'd have to write it out twice,
163

163

00:08:08.884  -->  00:08:11.766
something like this, in order to make sure
164

164

00:08:11.766  -->  00:08:14.194
the code doesn't have any errors,
165

165

00:08:14.194  -->  00:08:16.982
but with the format method, it's actually a lot cleaner,
166

166

00:08:16.982  -->  00:08:18.950
and I'll show you why.
167

167

00:08:18.950  -->  00:08:21.117
So I can say print First:,
168

168

00:08:23.929  -->  00:08:26.314
and I'm gonna use curly brackets here,
169

169

00:08:26.314  -->  00:08:30.348
and I'm going to put in some arbitrary variable label,
170

170

00:08:30.348  -->  00:08:32.338
and you'll see why in just a second.
171

171

00:08:32.338  -->  00:08:34.362
And then I'm going to say second, and again,
172

172

00:08:34.362  -->  00:08:37.880
I actually will put in the same label.
173

173

00:08:37.880  -->  00:08:39.191
Close off my string.
174

174

00:08:39.191  -->  00:08:42.334
Immediately afterwards, put in a period
175

175

00:08:42.334  -->  00:08:45.882
and call the format method on that string.
176

176

00:08:45.882  -->  00:08:49.248
And then I will pass in the variable x,
177

177

00:08:49.248  -->  00:08:53.415
which, let's say I wanted it to be a string called inserted.
178

178

00:08:56.434  -->  00:08:59.326
And notice here, I only have to define this variable
179

179

00:08:59.326  -->  00:09:02.963
once for it to get inserted multiple times.
180

180

00:09:02.963  -->  00:09:05.334
And this sort of syntax is really powerful
181

181

00:09:05.334  -->  00:09:07.728
in case you want to mess around with the order.
182

182

00:09:07.728  -->  00:09:11.291
So let's make another variable here called y,
183

183

00:09:11.291  -->  00:09:15.245
which we'll call just two, exclamation point,
184

184

00:09:15.245  -->  00:09:17.092
so it's really clear where it is.
185

185

00:09:17.092  -->  00:09:21.259
And what I'm gonna do is now change this to Third,
186

186

00:09:22.349  -->  00:09:24.682
put in Second in the middle,
187

187

00:09:25.705  -->  00:09:27.967
curly brackets, y, curly brackets.
188

188

00:09:27.967  -->  00:09:30.134
So notice the syntax here.
189

189

00:09:31.611  -->  00:09:35.774
I put in curly brackets and then the variable name,
190

190

00:09:35.774  -->  00:09:40.405
and then the .format, I just define what each variable is.
191

191

00:09:40.405  -->  00:09:42.460
And now if I run this, you'll notice I get
192

192

00:09:42.460  -->  00:09:46.210
First: inserted Second: two! Third: Inserted.
193

193

00:09:47.117  -->  00:09:49.599
So this is really nice, since I don't have to worry
194

194

00:09:49.599  -->  00:09:52.055
about everything being in the right order anymore.
195

195

00:09:52.055  -->  00:09:53.823
I just have to worry about the variables
196

196

00:09:53.823  -->  00:09:56.355
having the correct names when I call them.
197

197

00:09:56.355  -->  00:09:59.024
And this is really the way you should be
198

198

00:09:59.024  -->  00:10:02.481
print formatting as you go along throughout this course.
199

199

00:10:02.481  -->  00:10:05.398
It's the more Pythonic way of doing things.
200

200

00:10:05.398  -->  00:10:06.739
Okay.
201

201

00:10:06.739  -->  00:10:08.925
So that's the basics of string formatting,
202

202

00:10:08.925  -->  00:10:12.443
and just to remind you, Python 3 uses the print function,
203

203

00:10:12.443  -->  00:10:13.871
not the print statement.
204

204

00:10:13.871  -->  00:10:16.324
So I've already shown you how we can change that
205

205

00:10:16.324  -->  00:10:17.750
with an import method,
206

206

00:10:17.750  -->  00:10:19.333
so let's go ahead and bring it out here.
207

207

00:10:19.333  -->  00:10:20.750
So I'm gonna say,
208

208

00:10:21.929  -->  00:10:23.012
from, whoops,
209

209

00:10:26.715  -->  00:10:28.882
__future__, whoops, sorry.
210

210

00:10:31.777  -->  00:10:34.944
From __future__ import print_function,
211

211

00:10:36.585  -->  00:10:40.752
and if I call that, now I can say print some string, hello.
212

212

00:10:43.860  -->  00:10:45.265
It prints.
213

213

00:10:45.265  -->  00:10:48.341
So this would be the case if you're using Python 3.
214

214

00:10:48.341  -->  00:10:50.482
Now again, I'm using Python 2 here,
215

215

00:10:50.482  -->  00:10:52.868
so I had to do this import statement,
216

216

00:10:52.868  -->  00:10:54.992
and we'll learn about import modules further on
217

217

00:10:54.992  -->  00:10:57.309
in the course, even though we already covered them
218

218

00:10:57.309  -->  00:11:00.033
a bit in the last lecture.
219

219

00:11:00.033  -->  00:11:03.237
All right, so what if I want to do the same formatting?
220

220

00:11:03.237  -->  00:11:04.736
It would be pretty much the same,
221

221

00:11:04.736  -->  00:11:07.629
just within the context of that function.
222

222

00:11:07.629  -->  00:11:11.796
So I would say ('One: {x}'.format,
223

223

00:11:18.188  -->  00:11:19.021
call in x,
224

224

00:11:22.271  -->  00:11:25.760
insert some string so that it's really obvious,
225

225

00:11:25.760  -->  00:11:29.281
close off my parentheses, make sure they all match,
226

226

00:11:29.281  -->  00:11:30.791
Enter, and there you have it.
227

227

00:11:30.791  -->  00:11:31.832
So this is what it would look like
228

228

00:11:31.832  -->  00:11:34.040
if you were using Python 3.
229

229

00:11:34.040  -->  00:11:37.635
Again, in case you're confused about print functions
230

230

00:11:37.635  -->  00:11:39.847
and Python 2 versus Python 3,
231

231

00:11:39.847  -->  00:11:43.000
make sure you go back and visit the string lecture
232

232

00:11:43.000  -->  00:11:45.996
where we cover the differences between both of them.
233

233

00:11:45.996  -->  00:11:48.857
Okay, so let's do a quick overview of what we learned,
234

234

00:11:48.857  -->  00:11:51.663
and let's hop back over the Jupyter notebook.
235

235

00:11:51.663  -->  00:11:54.938
So, in this lecture, we covered print formatting.
236

236

00:11:54.938  -->  00:11:56.880
We saw how we can format with strings
237

237

00:11:56.880  -->  00:12:00.842
using the %s notation and syntax.
238

238

00:12:00.842  -->  00:12:05.000
Remember this %s will just format strings into your print
239

239

00:12:05.000  -->  00:12:09.221
statements by converting any object type into a string.
240

240

00:12:09.221  -->  00:12:12.222
We also saw the specific syntax for floating point numbers
241

241

00:12:12.222  -->  00:12:14.791
if we wanted to declare exactly how many numbers
242

242

00:12:14.791  -->  00:12:16.890
we wanted or how many characters we wanted,
243

243

00:12:16.890  -->  00:12:20.889
either after the decimal point or just in total.
244

244

00:12:20.889  -->  00:12:23.163
Remember white space will be filled if you don't have
245

245

00:12:23.163  -->  00:12:26.908
enough characters in that floating point number.
246

246

00:12:26.908  -->  00:12:29.247
Then we looked at two conversion format methods,
247

247

00:12:29.247  -->  00:12:33.592
%s and %r, that actually convert any Python object
248

248

00:12:33.592  -->  00:12:36.529
into two separate methods.
249

249

00:12:36.529  -->  00:12:39.844
We looked at multiple formatting using this syntax,
250

250

00:12:39.844  -->  00:12:40.705
and then finally,
251

251

00:12:40.705  -->  00:12:43.800
we learned about the .format method for strings,
252

252

00:12:43.800  -->  00:12:46.547
which allows us to just define variables, and here, you can
253

253

00:12:46.547  -->  00:12:50.033
see more examples in the Jupyter notebook about that.
254

254

00:12:50.033  -->  00:12:51.930
But what's nice about this is we only have to worry
255

255

00:12:51.930  -->  00:12:54.833
about calling the variable names inside these curly brackets
256

256

00:12:54.833  -->  00:12:57.633
instead of maintaining the order as we did
257

257

00:12:57.633  -->  00:13:00.406
in that previous percentage sign method.
258

258

00:13:00.406  -->  00:13:03.447
Okay, so that's it as far as print formatting.
259

259

00:13:03.447  -->  00:13:05.995
Make sure you take your time throughout this lecture
260

260

00:13:05.995  -->  00:13:07.808
and go ahead and read the Jupyter notebook
261

261

00:13:07.808  -->  00:13:09.750
if anything was not clear.
262

262

00:13:09.750  -->  00:13:11.526
All right, thank you very much,
263

263

00:13:11.526  -->  00:13:14.767
and I will see you at the next lecture.
