1
1

00:00:00,510  -->  00:00:01,650
<v Instructor>Hello everyone.</v>
2

2

00:00:01,650  -->  00:00:04,333
Welcome to the part two lecture video
3

3

00:00:04,333  -->  00:00:06,242
for the Milestone Project 1,
4

4

00:00:06,242  -->  00:00:11,042
walkthrough solution through all the steps in that workbook.
5

5

00:00:11,042  -->  00:00:14,000
So in the last video lecture, we went ahead and
6

6

00:00:14,000  -->  00:00:16,942
went over Step 1, display board function,
7

7

00:00:16,942  -->  00:00:19,178
Step 2, the player input function,
8

8

00:00:19,178  -->  00:00:22,105
Step 3, the place marker function,
9

9

00:00:22,105  -->  00:00:24,583
Step 4, that win check function,
10

10

00:00:24,583  -->  00:00:27,309
and then Step 5, which is writing a function
11

11

00:00:27,309  -->  00:00:29,301
to use the random module to randomly decide
12

12

00:00:29,301  -->  00:00:30,482
which player goes first.
13

13

00:00:30,482  -->  00:00:34,269
Let's go ahead and now begin that task.
14

14

00:00:34,269  -->  00:00:35,568
Gonna zoom in just a little more
15

15

00:00:35,568  -->  00:00:37,684
so it's a little more clear.
16

16

00:00:37,684  -->  00:00:42,121
So as I mentioned, you may want to look up random.randint.
17

17

00:00:42,121  -->  00:00:45,979
Let's go ahead and see what that does.
18

18

00:00:45,979  -->  00:00:47,892
If I wanted to find out more about this function,
19

19

00:00:47,892  -->  00:00:50,781
I could just do Shift+Tab with my cursor
20

20

00:00:50,781  -->  00:00:52,203
inside the parenthesis,
21

21

00:00:52,203  -->  00:00:54,193
and then I get the document string,
22

22

00:00:54,193  -->  00:00:55,544
also known as a DocString,
23

23

00:00:55,544  -->  00:00:58,310
and it says, Return a random integer in range a, b,
24

24

00:00:58,310  -->  00:01:00,338
including both end points.
25

25

00:01:00,338  -->  00:01:01,192
OK, great.
26

26

00:01:01,192  -->  00:01:02,614
Since I am only going to have two players,
27

27

00:01:02,614  -->  00:01:05,136
then what I'm gonna say is,
28

28

00:01:05,136  -->  00:01:06,636
if random.randint,
29

29

00:01:09,359  -->  00:01:13,259
and I'll just say 0, 1, is equal to zero,
30

30

00:01:13,259  -->  00:01:15,170
since it's including both end points,
31

31

00:01:15,170  -->  00:01:16,883
the only two integers available are zero and one,
32

32

00:01:16,883  -->  00:01:19,198
so it's basically a coin flip here.
33

33

00:01:19,198  -->  00:01:21,365
I'll say, Return Player 1,
34

34

00:01:23,538  -->  00:01:26,205
else, I'll say, return Player 2,
35

35

00:01:29,709  -->  00:01:33,321
and that's all we're gonna do for that particular function.
36

36

00:01:33,321  -->  00:01:37,488
And if I just go ahead and say, Print choose first.
37

37

00:01:39,377  -->  00:01:41,434
In that case, it's Player 1.
38

38

00:01:41,434  -->  00:01:43,181
In that case, it was Player 2.
39

39

00:01:43,181  -->  00:01:44,930
Player 2 again.
40

40

00:01:44,930  -->  00:01:46,635
Player 2 again.
41

41

00:01:46,635  -->  00:01:47,468
Player 1,
42

42

00:01:47,468  -->  00:01:48,791
so that makes sense, right?
43

43

00:01:48,791  -->  00:01:52,495
It's basically a coin flip for who's going first.
44

44

00:01:52,495  -->  00:01:54,482
OK, the next function we're going to do
45

45

00:01:54,482  -->  00:01:55,496
is actually quite simple.
46

46

00:01:55,496  -->  00:01:57,732
It's just write a function that returns a boolean
47

47

00:01:57,732  -->  00:02:02,321
indicating whether a space on the board is freely available.
48

48

00:02:02,321  -->  00:02:04,592
I can actually do that really simply.
49

49

00:02:04,592  -->  00:02:06,925
I can say, board at position
50

50

00:02:14,541  -->  00:02:16,938
double equal sign, check, if it's a string,
51

51

00:02:16,938  -->  00:02:19,377
and just return this.
52

52

00:02:19,377  -->  00:02:21,002
So this will return a boolean,
53

53

00:02:21,002  -->  00:02:22,992
saying, OK, is the board at that position,
54

54

00:02:22,992  -->  00:02:26,451
that indexed, so that number between one and nine,
55

55

00:02:26,451  -->  00:02:28,811
is that element equal to a space?
56

56

00:02:28,811  -->  00:02:30,886
Just return True or False.
57

57

00:02:30,886  -->  00:02:33,036
So, return True if it is equal to a space.
58

58

00:02:33,036  -->  00:02:34,619
False, if it's not.
59

59

00:02:36,044  -->  00:02:38,523
All right, Step 7 is write a function
60

60

00:02:38,523  -->  00:02:40,395
that checks if the board is full
61

61

00:02:40,395  -->  00:02:43,277
and returns a boolean value.
62

62

00:02:43,277  -->  00:02:46,938
I'm actually gonna take advantage of space_check to do this.
63

63

00:02:46,938  -->  00:02:48,113
So, I'll do the following.
64

64

00:02:48,113  -->  00:02:50,946
I'll say for i in range one to 10.
65

65

00:02:54,191  -->  00:02:57,603
I gotta do 10 because it goes up to, but not including 10,
66

66

00:02:57,603  -->  00:03:01,268
and I want the numbers one through nine here.
67

67

00:03:01,268  -->  00:03:05,018
I'll say if space_check, then I'll say board,
68

68

00:03:07,653  -->  00:03:09,400
at that position index,
69

69

00:03:09,400  -->  00:03:11,764
so I'm checking for all the numbers here.
70

70

00:03:11,764  -->  00:03:13,955
If that ever comes up as True,
71

71

00:03:13,955  -->  00:03:16,268
meaning there is an empty space,
72

72

00:03:16,268  -->  00:03:17,693
I'm gonna return False here,
73

73

00:03:17,693  -->  00:03:19,851
because the board isn't full yet.
74

74

00:03:19,851  -->  00:03:23,018
Otherwise, I'm just gonna return True.
75

75

00:03:27,746  -->  00:03:30,511
And the reason I don't put an else statement here
76

76

00:03:30,511  -->  00:03:31,856
is because I want to actually run
77

77

00:03:31,856  -->  00:03:34,333
through each of the possibilities here,
78

78

00:03:34,333  -->  00:03:35,595
so basically what's gonna happen here
79

79

00:03:35,595  -->  00:03:37,180
at full board check
80

80

00:03:37,180  -->  00:03:40,377
is I'm saying for i in range, one through 10,
81

81

00:03:40,377  -->  00:03:42,165
which is just, in this case,
82

82

00:03:42,165  -->  00:03:44,604
going through the numbers one through nine,
83

83

00:03:44,604  -->  00:03:47,328
if the board at that index,
84

84

00:03:47,328  -->  00:03:49,804
if space_check ever equals True,
85

85

00:03:49,804  -->  00:03:52,248
meaning there was a space there,
86

86

00:03:52,248  -->  00:03:54,891
I'm going to return False,
87

87

00:03:54,891  -->  00:03:56,924
because that wasn't a full board.
88

88

00:03:56,924  -->  00:03:59,078
If I go through this entire For loop,
89

89

00:03:59,078  -->  00:04:00,704
and I never return False,
90

90

00:04:00,704  -->  00:04:01,963
then I'm just gonna return True,
91

91

00:04:01,963  -->  00:04:04,232
because I know now the board is full
92

92

00:04:04,232  -->  00:04:07,284
and that's why we don't use an else there.
93

93

00:04:07,284  -->  00:04:08,663
All right.
94

94

00:04:08,663  -->  00:04:10,006
Time to to go Step 8.
95

95

00:04:10,006  -->  00:04:11,798
Step 8 is write a function that asks for
96

96

00:04:11,798  -->  00:04:15,333
a player's next position as a number between one and nine
97

97

00:04:15,333  -->  00:04:17,322
and then uses the function from Step 6
98

98

00:04:17,322  -->  00:04:19,351
to check to see if it's a free position.
99

99

00:04:19,351  -->  00:04:23,987
If it is, then return the position for later use.
100

100

00:04:23,987  -->  00:04:26,058
OK, let's go ahead and think about how we can do this.
101

101

00:04:26,058  -->  00:04:29,720
I'm gonna go ahead and make a variable called position
102

102

00:04:29,720  -->  00:04:32,564
and set it equal to an empty string,
103

103

00:04:32,564  -->  00:04:36,647
and what I'm gonna do is I'll say while position.
104

104

00:04:38,205  -->  00:04:41,942
Just gonna put a dot-dot-dot for a second there
105

105

00:04:41,942  -->  00:04:44,094
to show you what I'm gonna actually do.
106

106

00:04:44,094  -->  00:04:46,094
I'm gonna say raw_input.
107

107

00:04:46,983  -->  00:04:51,150
I'm gonna ask the player to "Choose your next position."
108

108

00:04:54,104  -->  00:04:55,521
One through nine,
109

109

00:04:58,533  -->  00:05:00,927
and then what I want to do is continually ask
110

110

00:05:00,927  -->  00:05:03,772
this person or player to choose the next position
111

111

00:05:03,772  -->  00:05:05,804
until it's a valid topic.
112

112

00:05:05,804  -->  00:05:08,529
So I'm gonna say, "while position is not in,"
113

113

00:05:08,529  -->  00:05:10,353
and this is where we're gonna do a little trick here.
114

114

00:05:10,353  -->  00:05:13,853
I'm gonna say, "1 2 3 4 5 6 7 8 9. split."
115

115

00:05:17,719  -->  00:05:19,466
Let me show you what that's actually going to do.
116

116

00:05:19,466  -->  00:05:22,216
That's going to take that string,
117

117

00:05:23,778  -->  00:05:27,028
and it's going to split it into a list.
118

118

00:05:28,290  -->  00:05:31,430
So what split does, it's just a method on that string
119

119

00:05:31,430  -->  00:05:35,097
and it automatically splits on empty spaces.
120

120

00:05:36,461  -->  00:05:39,716
In this case, in between the numbers
121

121

00:05:39,716  -->  00:05:41,991
and then returns a list.
122

122

00:05:41,991  -->  00:05:43,412
OK. So we have that.
123

123

00:05:43,412  -->  00:05:44,834
So that's gonna check if the raw input
124

124

00:05:44,834  -->  00:05:49,144
is actually there or one of these string numbers
125

125

00:05:49,144  -->  00:05:52,894
and then I'm gonna say, "or not space_check,"
126

126

00:05:54,999  -->  00:05:56,383
and in this case, what I'm gonna do
127

127

00:05:56,383  -->  00:05:59,593
is I want to make sure the number isn't already taken,
128

128

00:05:59,593  -->  00:06:02,093
so I'll say space_check board,
129

129

00:06:03,456  -->  00:06:07,623
and then cast that string into an integer, by using int
130

130

00:06:10,724  -->  00:06:14,636
and let's go ahead and put a colon in there.
131

131

00:06:14,636  -->  00:06:16,545
So what I'm doing, let's just read this along.
132

132

00:06:16,545  -->  00:06:20,128
I'm saying while position not in this list,
133

133

00:06:22,154  -->  00:06:24,917
meaning the player hasn't actually put
134

134

00:06:24,917  -->  00:06:26,990
the right number in.
135

135

00:06:26,990  -->  00:06:28,411
Maybe they put in a different number
136

136

00:06:28,411  -->  00:06:29,668
or they put in the wrong string.
137

137

00:06:29,668  -->  00:06:30,726
They just said, "Hello,"
138

138

00:06:30,726  -->  00:06:33,085
when you asked them, "Choose your next position," et cetera.
139

139

00:06:33,085  -->  00:06:36,219
Or, we'll do a space_check on that position,
140

140

00:06:36,219  -->  00:06:37,760
cast that as an integer,
141

141

00:06:37,760  -->  00:06:40,010
meaning the space is taken.
142

142

00:06:42,351  -->  00:06:44,506
I'm gonna say, "Please choose your next position."
143

143

00:06:44,506  -->  00:06:46,090
Basically, I'm gonna keep asking this person
144

144

00:06:46,090  -->  00:06:48,284
for the next position over and over again,
145

145

00:06:48,284  -->  00:06:51,499
until they give me a value that makes sense,
146

146

00:06:51,499  -->  00:06:52,392
and then once they do,
147

147

00:06:52,392  -->  00:06:54,912
I'm just gonna return that value position
148

148

00:06:54,912  -->  00:06:58,245
as an integer, so I can use it later on.
149

149

00:06:59,699  -->  00:07:00,877
OK.
150

150

00:07:00,877  -->  00:07:02,463
Step 9 is to write a function
151

151

00:07:02,463  -->  00:07:05,064
that asks the player if they want to play again,
152

152

00:07:05,064  -->  00:07:08,516
and returns a boolean True if they do want to play again.
153

153

00:07:08,516  -->  00:07:11,016
So I'm just gonna say, return.
154

154

00:07:13,068  -->  00:07:15,385
Because I'm using Python 2, I'll use raw_input.
155

155

00:07:15,385  -->  00:07:18,313
Python 3 users should use just input.
156

156

00:07:18,313  -->  00:07:21,396
I'll say, "Do you want to play again?
157

157

00:07:25,181  -->  00:07:26,681
"Enter Yes or No."
158

158

00:07:29,004  -->  00:07:31,358
And you can have a couple of If statements here,
159

159

00:07:31,358  -->  00:07:33,802
checking If string is equal to "Yes,"
160

160

00:07:33,802  -->  00:07:35,954
or while string equals "No," et cetera.
161

161

00:07:35,954  -->  00:07:38,719
In this case, I'm just gonna kind of do a little trick here.
162

162

00:07:38,719  -->  00:07:40,052
I'll say .lower,
163

163

00:07:41,032  -->  00:07:43,449
and I'll say .startswith "y."
164

164

00:07:48,957  -->  00:07:50,662
And basically what it's gonna do
165

165

00:07:50,662  -->  00:07:53,429
is I'm going to go ahead and run that
166

166

00:07:53,429  -->  00:07:55,136
and then show you something.
167

167

00:07:55,136  -->  00:07:58,144
So let's say I have a string here that's just "hello."
168

168

00:07:58,144  -->  00:07:59,483
This is a little bit of information
169

169

00:07:59,483  -->  00:08:01,070
from the Advanced Strings lecture,
170

170

00:08:01,070  -->  00:08:03,672
which is why I'm gonna go over that "startswith."
171

171

00:08:03,672  -->  00:08:05,983
There's tonnes of methods you can do on a string,
172

172

00:08:05,983  -->  00:08:08,400
but if I just wanted "hello,"
173

173

00:08:12,107  -->  00:08:14,607
let me set this as a variable,
174

174

00:08:15,692  -->  00:08:18,459
my_string, just so it's really clear.
175

175

00:08:18,459  -->  00:08:20,569
So my_string is hello,
176

176

00:08:20,569  -->  00:08:23,069
and then I can say, my_string,
177

177

00:08:24,593  -->  00:08:26,298
and if I put in Tab, that gives me
178

178

00:08:26,298  -->  00:08:28,455
all the methods available on this.
179

179

00:08:28,455  -->  00:08:31,714
There's one called "startswith,"
180

180

00:08:31,714  -->  00:08:34,557
and if you're interested in more of these methods,
181

181

00:08:34,557  -->  00:08:36,992
you can check out the Advanced Strings lecture,
182

182

00:08:36,992  -->  00:08:39,471
but "startswith" will just go ahead,
183

183

00:08:39,471  -->  00:08:41,176
and if I click Shift+Tab,
184

184

00:08:41,176  -->  00:08:43,858
it'll say, Return True if that string s
185

185

00:08:43,858  -->  00:08:46,657
starts with the specified prefix, False otherwise.
186

186

00:08:46,657  -->  00:08:50,074
If I've just put in "h," it returns True.
187

187

00:08:52,521  -->  00:08:54,997
And then if I turn for something like "n,"
188

188

00:08:54,997  -->  00:08:55,849
it returns False.
189

189

00:08:55,849  -->  00:08:58,248
So in this case, I expect the user to say something
190

190

00:08:58,248  -->  00:09:01,951
like, "Yes," but maybe they put uppercase or lowercase,
191

191

00:09:01,951  -->  00:09:06,118
"Yes," or they say, like, "Yeah," or "Yep," kind of thing.
192

192

00:09:07,022  -->  00:09:08,977
So even if they just say, "Yep,"
193

193

00:09:08,977  -->  00:09:12,144
if I say startswith.y, it'll say True.
194

194

00:09:13,485  -->  00:09:18,399
And if I say lower first, and then I say startswith,
195

195

00:09:18,399  -->  00:09:21,900
now I don't even have to worry if they say, like "Yup,"
196

196

00:09:21,900  -->  00:09:23,488
something like this with a capital,
197

197

00:09:23,488  -->  00:09:26,948
because I've already lowered case it,
198

198

00:09:26,948  -->  00:09:28,007
and I can do the same thing,
199

199

00:09:28,007  -->  00:09:29,958
if I just said something like upper,
200

200

00:09:29,958  -->  00:09:33,551
and then only checked for uppercase ys.
201

201

00:09:33,551  -->  00:09:37,282
So that's what's going on with these lines right here.
202

202

00:09:37,282  -->  00:09:40,003
And I'll make more sense when we actually
203

203

00:09:40,003  -->  00:09:42,519
implement Step 10, which is the hard part.
204

204

00:09:42,519  -->  00:09:43,981
We're gonna use a bunch of while loops
205

205

00:09:43,981  -->  00:09:45,851
and the functions that we've just made
206

206

00:09:45,851  -->  00:09:47,889
to run the actual game.
207

207

00:09:47,889  -->  00:09:49,755
All right, since this is quite a bit of code
208

208

00:09:49,755  -->  00:09:50,770
for this block,
209

209

00:09:50,770  -->  00:09:52,804
I'm gonna leave that for the next video.
210

210

00:09:52,804  -->  00:09:55,485
As a quick review of what we did in this video,
211

211

00:09:55,485  -->  00:09:57,801
we went ahead, made a function
212

212

00:09:57,801  -->  00:10:00,524
that randomly chooses which player goes first.
213

213

00:10:00,524  -->  00:10:02,354
We wrote a function that returns a boolean,
214

214

00:10:02,354  -->  00:10:05,316
indicating whether a space on the board is freely available.
215

215

00:10:05,316  -->  00:10:07,145
We wrote a function that checks if the board is full
216

216

00:10:07,145  -->  00:10:09,380
and then returns a boolean value
217

217

00:10:09,380  -->  00:10:10,677
and then we also wrote a function
218

218

00:10:10,677  -->  00:10:12,706
that asks for a player's next position
219

219

00:10:12,706  -->  00:10:15,962
and then uses that space_check function
220

220

00:10:15,962  -->  00:10:17,829
to check if it's a free position
221

221

00:10:17,829  -->  00:10:20,993
and then we return it for later use.
222

222

00:10:20,993  -->  00:10:22,582
And then Step 9, we just wrote a function
223

223

00:10:22,582  -->  00:10:24,817
that asks the player if they want to play again
224

224

00:10:24,817  -->  00:10:28,600
and returns a boolean True if they do want to play again.
225

225

00:10:28,600  -->  00:10:30,670
All right, so for Step 10, we'll do that
226

226

00:10:30,670  -->  00:10:31,687
in the next lecture,
227

227

00:10:31,687  -->  00:10:33,394
but basically we'll take everything we've just done,
228

228

00:10:33,394  -->  00:10:35,349
all the functions we just made,
229

229

00:10:35,349  -->  00:10:36,854
and use a bunch of while loops
230

230

00:10:36,854  -->  00:10:39,209
to actually run a tic-tac-toe game.
231

231

00:10:39,209  -->  00:10:43,376
OK, thanks everyone, and I'll see you at the next lecture.
