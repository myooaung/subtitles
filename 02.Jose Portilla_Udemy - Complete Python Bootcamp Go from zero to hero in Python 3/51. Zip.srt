1
1

00:00:01,385  -->  00:00:03,445
<v Instructor>Hello everyone and welcome to this lecture</v>
2

2

00:00:03,445  -->  00:00:06,388
where we're going to discuss the built in function zip.
3

3

00:00:06,388  -->  00:00:09,429
Which basically makes an iterator that aggregates elements
4

4

00:00:09,429  -->  00:00:11,679
from two or more iterables.
5

5

00:00:12,937  -->  00:00:16,460
Okay, so, let's go ahead and see how this works.
6

6

00:00:16,460  -->  00:00:18,106
Just to give you a quick note,
7

7

00:00:18,106  -->  00:00:20,901
zip, you could actually write it yourself,
8

8

00:00:20,901  -->  00:00:23,093
This is what the function is equal to,
9

9

00:00:23,093  -->  00:00:24,343
so if you want to explore,
10

10

00:00:24,343  -->  00:00:25,583
if you had to make your own function
11

11

00:00:25,583  -->  00:00:26,853
that was similar to zip,
12

12

00:00:26,853  -->  00:00:28,305
this is how you would do it.
13

13

00:00:28,305  -->  00:00:30,430
What we're gonna do is actually just
14

14

00:00:30,430  -->  00:00:32,299
go ahead and see it in action first,
15

15

00:00:32,299  -->  00:00:35,537
cuz I think it's best explained through example.
16

16

00:00:35,537  -->  00:00:38,219
So let's say you had two lists.
17

17

00:00:38,219  -->  00:00:40,760
We're gonna make one list called x,
18

18

00:00:40,760  -->  00:00:42,316
one two three,
19

19

00:00:42,316  -->  00:00:44,305
and another called y,
20

20

00:00:44,305  -->  00:00:46,400
one two, let's make it different,
21

21

00:00:46,400  -->  00:00:49,900
let's say four five whoops, four five six.
22

22

00:00:51,743  -->  00:00:53,592
Okay, so you have these two lists.
23

23

00:00:53,592  -->  00:00:54,425
X and y.
24

24

00:00:55,531  -->  00:00:58,924
And now what we're gonna do is use zip
25

25

00:00:58,924  -->  00:01:01,543
to essentially zip them together.
26

26

00:01:01,543  -->  00:01:04,043
So I'm gonna say x comma y,
27

27

00:01:04,990  -->  00:01:08,017
and the output is gonna be basically tuplets,
28

28

00:01:08,017  -->  00:01:11,715
or tuples, pairs of two, or, pairs inside a tuple,
29

29

00:01:11,715  -->  00:01:12,670
excuse me,
30

30

00:01:12,670  -->  00:01:14,844
and a whole list of them.
31

31

00:01:14,844  -->  00:01:17,424
So, let's go ahead and see an example
32

32

00:01:17,424  -->  00:01:19,507
of how we would use this.
33

33

00:01:22,057  -->  00:01:24,791
So what we're gonna do now is create two more lists.
34

34

00:01:24,791  -->  00:01:26,161
A,
35

35

00:01:26,161  -->  00:01:29,661
which let's say is gonna have one two one,
36

36

00:01:30,906  -->  00:01:34,469
let's say one two three four five,
37

37

00:01:34,469  -->  00:01:37,916
and b which is gonna not be sequential,
38

38

00:01:37,916  -->  00:01:41,499
it's gonna take, two, two, let's put in 10,
39

39

00:01:42,942  -->  00:01:43,775
one, one.
40

40

00:01:46,063  -->  00:01:48,876
Let's make sure they match up, okay.
41

41

00:01:48,876  -->  00:01:50,987
So we could use zip to pick
42

42

00:01:50,987  -->  00:01:54,048
the largest between both of these.
43

43

00:01:54,048  -->  00:01:55,885
So what I mean by that is let's say we only wanted
44

44

00:01:55,885  -->  00:02:00,700
to return a list that included the largest in each index.
45

45

00:02:00,700  -->  00:02:03,963
So between a and b, the first largest at the zero index
46

46

00:02:03,963  -->  00:02:05,487
would be from b.
47

47

00:02:05,487  -->  00:02:07,802
The second largest would be from a, et cetera.
48

48

00:02:07,802  -->  00:02:09,488
So there's actually lots of ways to do this,
49

49

00:02:09,488  -->  00:02:12,155
but we're gonna use it with zip.
50

50

00:02:12,992  -->  00:02:16,385
So let's go ahead and see how that would work.
51

51

00:02:16,385  -->  00:02:17,635
So I could say,
52

52

00:02:18,905  -->  00:02:20,062
something like this.
53

53

00:02:20,062  -->  00:02:20,979
I could say
54

54

00:02:22,156  -->  00:02:22,989
for pair
55

55

00:02:25,325  -->  00:02:26,492
in zip of a b,
56

56

00:02:29,583  -->  00:02:30,750
return the max
57

57

00:02:31,804  -->  00:02:32,887
of that pair.
58

58

00:02:33,948  -->  00:02:36,557
And let's see what we get.
59

59

00:02:36,557  -->  00:02:38,073
Oops I have return outside of function,
60

60

00:02:38,073  -->  00:02:41,344
I need to put that in a function.
61

61

00:02:41,344  -->  00:02:44,525
Or I can just say, let's say print.
62

62

00:02:44,525  -->  00:02:46,608
Let's bring that back in.
63

63

00:02:50,397  -->  00:02:51,271
Okay.
64

64

00:02:51,271  -->  00:02:52,781
So what did I do here?
65

65

00:02:52,781  -->  00:02:55,465
Instead of writing a whole function, just a quick foreloop.
66

66

00:02:55,465  -->  00:02:59,325
So I went through each pair in the zip
67

67

00:02:59,325  -->  00:03:01,409
for these guys which would have looked something like this.
68

68

00:03:01,409  -->  00:03:02,678
Let's go ahead and copy and paste this
69

69

00:03:02,678  -->  00:03:04,608
so we know what we're looking at,
70

70

00:03:04,608  -->  00:03:06,843
so it went ahead, saw each pair,
71

71

00:03:06,843  -->  00:03:10,235
and returned the max from that tuple.
72

72

00:03:10,235  -->  00:03:14,645
So let's go ahead and do this now using map.
73

73

00:03:14,645  -->  00:03:16,646
Since we learned about it earlier.
74

74

00:03:16,646  -->  00:03:20,447
So I could say map, with a lambda expression,
75

75

00:03:20,447  -->  00:03:22,436
for every pair we wanna return
76

76

00:03:22,436  -->  00:03:25,587
let's say the max of that pair,
77

77

00:03:25,587  -->  00:03:27,504
and go through zip a b.
78

78

00:03:30,360  -->  00:03:31,853
Let's see if that works,
79

79

00:03:31,853  -->  00:03:33,865
and notice now we have the exact same result
80

80

00:03:33,865  -->  00:03:35,400
but as a list.
81

81

00:03:35,400  -->  00:03:37,899
So this should really show you how powerful zip can be.
82

82

00:03:37,899  -->  00:03:38,950
Now something you might be wondering is
83

83

00:03:38,950  -->  00:03:41,554
what if one iterable is longer than the other?
84

84

00:03:41,554  -->  00:03:45,792
So let's say I have one list that says one two three,
85

85

00:03:45,792  -->  00:03:47,162
and another list that's much longer,
86

86

00:03:47,162  -->  00:03:51,329
let's say it's equal to four five six seven, eight.
87

87

00:03:55,480  -->  00:03:58,551
So what happens if I zip these two guys together now?
88

88

00:03:58,551  -->  00:04:00,896
Well what happens is you're defined
89

89

00:04:00,896  -->  00:04:03,163
by the shortest iterable.
90

90

00:04:03,163  -->  00:04:05,681
So you can only go as far as the shortest iterable
91

91

00:04:05,681  -->  00:04:07,431
in that zip function.
92

92

00:04:08,972  -->  00:04:09,856
Okay, so what happens
93

93

00:04:09,856  -->  00:04:12,062
if we try to zip together dictionaries?
94

94

00:04:12,062  -->  00:04:12,942
So we've done lists,
95

95

00:04:12,942  -->  00:04:15,139
but let's go ahead and explore dictionaries.
96

96

00:04:15,139  -->  00:04:18,056
So I'm gonna make two dictionaries.
97

97

00:04:19,586  -->  00:04:22,553
One of a key a, with a value one,
98

98

00:04:22,553  -->  00:04:25,053
one for key b, with value two,
99

99

00:04:27,077  -->  00:04:28,410
a dictionary d2,
100

100

00:04:30,581  -->  00:04:31,998
key c value four,
101

101

00:04:33,773  -->  00:04:35,190
key d value five.
102

102

00:04:37,296  -->  00:04:41,463
Okay. So, let's go ahead and zip these and see what happens.
103

103

00:04:44,866  -->  00:04:45,699
All right.
104

104

00:04:45,699  -->  00:04:47,800
So you notice we only get the keys.
105

105

00:04:47,800  -->  00:04:50,044
And that's because simply iterating through a dictionary
106

106

00:04:50,044  -->  00:04:52,545
if you remember, will only give you the keys.
107

107

00:04:52,545  -->  00:04:53,545
So if I say,
108

108

00:04:54,394  -->  00:04:55,394
for I in d1,
109

109

00:04:58,500  -->  00:04:59,382
print I,
110

110

00:04:59,382  -->  00:05:02,015
remember from dictionaries lectures,
111

111

00:05:02,015  -->  00:05:04,778
we only get that key back out.
112

112

00:05:04,778  -->  00:05:07,845
So what if I want to get the values?
113

113

00:05:07,845  -->  00:05:11,077
Well if you're using Python 2, you can use iter values,
114

114

00:05:11,077  -->  00:05:13,199
or if you're using Python 3 you can just use values.
115

115

00:05:13,199  -->  00:05:15,018
So I could do something like this.
116

116

00:05:15,018  -->  00:05:19,538
Let's say d2, and let's say I want the values from d1.
117

117

00:05:19,538  -->  00:05:21,538
So I can say itervalues,
118

118

00:05:23,741  -->  00:05:25,807
and there we go.
119

119

00:05:25,807  -->  00:05:27,735
All right, so that's a couple methods we can use
120

120

00:05:27,735  -->  00:05:29,667
to mix keys and values.
121

121

00:05:29,667  -->  00:05:33,101
So what we're gonna finally do is use zip
122

122

00:05:33,101  -->  00:05:37,456
to switch the keys and values of two dictionaries.
123

123

00:05:37,456  -->  00:05:40,464
So, let's go ahead and make a function to do that.
124

124

00:05:40,464  -->  00:05:43,686
So I'm gonna call this function switcharoo.
125

125

00:05:43,686  -->  00:05:46,915
And what it does it takes in d1, d2,
126

126

00:05:46,915  -->  00:05:49,192
takes in two dictionaries,
127

127

00:05:49,192  -->  00:05:51,576
I'm going to define an object called dout
128

128

00:05:51,576  -->  00:05:53,804
as an empty dictionary,
129

129

00:05:53,804  -->  00:05:55,735
that'll be the dictionary it returns
130

130

00:05:55,735  -->  00:05:57,652
when I say return dout.
131

131

00:06:00,143  -->  00:06:01,667
And so how do we wanna build this?
132

132

00:06:01,667  -->  00:06:02,917
So I wanna say,
133

133

00:06:03,862  -->  00:06:05,612
let's say for d1 key,
134

134

00:06:07,112  -->  00:06:08,279
and d2 val in,
135

135

00:06:10,677  -->  00:06:12,151
zip
136

136

00:06:12,151  -->  00:06:15,067
the first dictionary keys
137

137

00:06:15,067  -->  00:06:17,900
and the second dictionary's values
138

138

00:06:18,876  -->  00:06:19,876
iter values,
139

139

00:06:22,562  -->  00:06:25,895
and what I'm gonna do is say dout, d1key
140

140

00:06:28,813  -->  00:06:30,980
has the value from d2 val.
141

141

00:06:33,576  -->  00:06:37,945
And, whoops. That should have been an equal sign.
142

142

00:06:37,945  -->  00:06:39,184
And now let's go ahead and see what happens
143

143

00:06:39,184  -->  00:06:40,381
when we say switcharoo.
144

144

00:06:40,381  -->  00:06:42,821
So remember d1 looks like that,
145

145

00:06:42,821  -->  00:06:44,721
d2 looks like that,
146

146

00:06:44,721  -->  00:06:47,554
and if I call switcharoo on d1 d2,
147

147

00:06:50,126  -->  00:06:54,190
then I've switched the values from dictionary one
148

148

00:06:54,190  -->  00:06:57,002
with the values from dictionary two.
149

149

00:06:57,002  -->  00:06:58,002
Okay, great.
150

150

00:06:58,910  -->  00:07:02,175
So, hopefully you've seen how zip can save a lot of typing
151

151

00:07:02,175  -->  00:07:03,827
in a lot of situations,
152

152

00:07:03,827  -->  00:07:04,947
and you should have a good understanding
153

153

00:07:04,947  -->  00:07:07,545
of how to read zip and how to use it.
154

154

00:07:07,545  -->  00:07:09,718
So remember zip is pretty simple,
155

155

00:07:09,718  -->  00:07:11,651
you just take two iterables
156

156

00:07:11,651  -->  00:07:16,607
and basically zip them up together in tuple pairs.
157

157

00:07:16,607  -->  00:07:18,802
All right, and one last note.
158

158

00:07:18,802  -->  00:07:21,659
Is if one iterable is shorter than the other,
159

159

00:07:21,659  -->  00:07:24,533
you're defined by the shorter iterable.
160

160

00:07:24,533  -->  00:07:27,165
So feel free to play around with zip,
161

161

00:07:27,165  -->  00:07:30,050
it's gonna be a great tool to have
162

162

00:07:30,050  -->  00:07:32,123
as you code more in python.
163

163

00:07:32,123  -->  00:07:34,990
Okay everyone, I'll see you at the next lecture.
