1
1

00:00:01,462  -->  00:00:02,295
<v Instructor>Hello everyone.</v>
2

2

00:00:02,295  -->  00:00:03,952
In this lecture, what we're going to do
3

3

00:00:03,952  -->  00:00:05,134
is I'm just going to go quickly over
4

4

00:00:05,134  -->  00:00:08,501
the solutions for the Advanced Functions test.
5

5

00:00:08,501  -->  00:00:11,447
So for problem 1, I used the map
6

6

00:00:11,447  -->  00:00:14,416
and I mapped the length function
7

7

00:00:14,416  -->  00:00:17,483
to phrase with the split method applied to it
8

8

00:00:17,483  -->  00:00:19,914
so I could get a list of all the words,
9

9

00:00:19,914  -->  00:00:22,582
and then mapping that I just cast it as a list
10

10

00:00:22,582  -->  00:00:24,273
and returned that.
11

11

00:00:24,273  -->  00:00:27,039
A little tricky, but it's all on 1 line.
12

12

00:00:27,039  -->  00:00:29,135
Problem 2, what I did was I used
13

13

00:00:29,135  -->  00:00:31,927
a lambda expression here
14

14

00:00:31,927  -->  00:00:33,260
to have X and Y,
15

15

00:00:34,911  -->  00:00:36,601
and notice I could not convert
16

16

00:00:36,601  -->  00:00:38,045
the integers to strings.
17

17

00:00:38,045  -->  00:00:40,185
So what I had to do was take X,
18

18

00:00:40,185  -->  00:00:41,382
multiply it by 10,
19

19

00:00:41,382  -->  00:00:43,029
and then add Y
20

20

00:00:43,029  -->  00:00:44,426
so I could keep moving along
21

21

00:00:44,426  -->  00:00:46,270
through this digits list.
22

22

00:00:46,270  -->  00:00:47,469
And then I used reduce
23

23

00:00:47,469  -->  00:00:49,950
to reduce this lambda expression
24

24

00:00:49,950  -->  00:00:52,096
on the digits list.
25

25

00:00:52,096  -->  00:00:53,546
Okay.
26

26

00:00:53,546  -->  00:00:54,856
Problem 3,
27

27

00:00:54,856  -->  00:00:57,973
I had to use filter to return the words
28

28

00:00:57,973  -->  00:00:59,041
from a list of words which
29

29

00:00:59,041  -->  00:01:00,606
start with the target letter.
30

30

00:01:00,606  -->  00:01:02,898
So, I made a lambda expression,
31

31

00:01:02,898  -->  00:01:05,356
Said word, where the first word
32

32

00:01:05,356  -->  00:01:08,930
if it is equal to that letter filter it out.
33

33

00:01:08,930  -->  00:01:11,780
On the word list, use that lambda expression.
34

34

00:01:11,780  -->  00:01:12,947
Again, 1 line.
35

35

00:01:14,254  -->  00:01:15,158
Problem 4,
36

36

00:01:15,158  -->  00:01:17,171
I used list comprehension and zip
37

37

00:01:17,171  -->  00:01:19,310
to zip up the 2 lists,
38

38

00:01:19,310  -->  00:01:22,024
and then said word 1, plus that connector,
39

39

00:01:22,024  -->  00:01:25,883
plus word 2, for, the word 1 or word 2
40

40

00:01:25,883  -->  00:01:27,633
result from that zip.
41

41

00:01:29,020  -->  00:01:29,853
Problem 5,
42

42

00:01:32,020  -->  00:01:34,327
I did a little dictionary comprehension here
43

43

00:01:34,327  -->  00:01:36,835
where I said key value for value key
44

44

00:01:36,835  -->  00:01:38,085
in enumerate L.
45

45

00:01:39,726  -->  00:01:41,409
And then problem 6,
46

46

00:01:41,409  -->  00:01:43,659
finally what I did was said
47

47

00:01:45,308  -->  00:01:46,714
list comprehension here,
48

48

00:01:46,714  -->  00:01:49,953
num for count num in enumerate L
49

49

00:01:49,953  -->  00:01:51,724
if the num is equal to the count,
50

50

00:01:51,724  -->  00:01:53,411
so that basically means if that number
51

51

00:01:53,411  -->  00:01:55,351
is equal to the index,
52

52

00:01:55,351  -->  00:01:57,875
and then return the length of that list,
53

53

00:01:57,875  -->  00:01:59,981
which returns this count here.
54

54

00:01:59,981  -->  00:02:00,888
Okay,
55

55

00:02:00,888  -->  00:02:02,002
so these were all pretty tricky,
56

56

00:02:02,002  -->  00:02:03,242
especially with the requirement
57

57

00:02:03,242  -->  00:02:05,629
that they are done on 1 line.
58

58

00:02:05,629  -->  00:02:06,867
But hopefully you see how powerful
59

59

00:02:06,867  -->  00:02:08,142
the built-in functions now,
60

60

00:02:08,142  -->  00:02:10,284
and they can save you a lot of code.
61

61

00:02:10,284  -->  00:02:12,184
Alright, thanks everyone,
62

62

00:02:12,184  -->  00:02:14,485
and I'll see you at the next lecture.
