1
1

00:00:01,958  -->  00:00:03,485
<v Instructor>Hello, everyone and welcome to</v>
2

2

00:00:03,485  -->  00:00:05,800
the lecture on for loops.
3

3

00:00:05,800  -->  00:00:07,200
So in this lecture, we're just gonna learn about
4

4

00:00:07,200  -->  00:00:10,751
for loops and you can see here I have the Jupyter Notebook.
5

5

00:00:10,751  -->  00:00:13,722
And the for loops are gonna help us iterate through
6

6

00:00:13,722  -->  00:00:16,197
any items that are a sequence in Python
7

7

00:00:16,197  -->  00:00:18,803
or really, any items that you can iterate over.
8

8

00:00:18,803  -->  00:00:20,411
So you can see here, I have the Jupyter Notebook.
9

9

00:00:20,411  -->  00:00:22,480
We're just gonna go through a bunch of examples
10

10

00:00:22,480  -->  00:00:25,828
and we'll introduce two new topics along the way.
11

11

00:00:25,828  -->  00:00:27,773
And these are all the examples we're gonna work through.
12

12

00:00:27,773  -->  00:00:31,402
So let's go ahead and cut to a very brief presentation
13

13

00:00:31,402  -->  00:00:33,748
just to break down what a for loop is
14

14

00:00:33,748  -->  00:00:35,737
and then we'll get started with some live coding
15

15

00:00:35,737  -->  00:00:37,972
and the for loops.
16

16

00:00:37,972  -->  00:00:42,139
So let's go ahead and jump over to the presentation.
17

17

00:00:43,019  -->  00:00:44,936
So for loop statements.
18

18

00:00:46,153  -->  00:00:49,282
So a for loop can act as an iterator in Python
19

19

00:00:49,282  -->  00:00:51,216
and what it does is it goes through items
20

20

00:00:51,216  -->  00:00:54,056
that are in a sequence or any other iterable item.
21

21

00:00:54,056  -->  00:00:56,497
So if you remember these objects we covered in the
22

22

00:00:56,497  -->  00:00:58,312
objects and data structures section,
23

23

00:00:58,312  -->  00:01:01,074
that we learned about that we can iterate over,
24

24

00:01:01,074  -->  00:01:04,406
those items include strings, lists, tuples,
25

25

00:01:04,406  -->  00:01:07,709
and then we can also iterate over the built-in iterables
26

26

00:01:07,709  -->  00:01:09,862
in dictionaries, such as keys or values.
27

27

00:01:09,862  -->  00:01:13,771
And we'll break down that topic later in this lecture.
28

28

00:01:13,771  -->  00:01:16,944
So the general format for a for loop in Python
29

29

00:01:16,944  -->  00:01:18,514
is gonna look a little something like this.
30

30

00:01:18,514  -->  00:01:22,014
You're gonna say for item in object colon.
31

31

00:01:24,419  -->  00:01:25,781
Next line, you're gonna indent
32

32

00:01:25,781  -->  00:01:27,598
and say statements to do stuff.
33

33

00:01:27,598  -->  00:01:30,978
Now if you're in NEID or if you're in Jupyter Notebooks,
34

34

00:01:30,978  -->  00:01:33,359
this sort of indentation is taken care of
35

35

00:01:33,359  -->  00:01:35,262
automatically for you.
36

36

00:01:35,262  -->  00:01:37,244
So again, the format is gonna be
37

37

00:01:37,244  -->  00:01:40,912
for item in your iterable object colon
38

38

00:01:40,912  -->  00:01:44,226
and then you're gonna have some code to do stuff.
39

39

00:01:44,226  -->  00:01:46,539
So that variable name that I used, item,
40

40

00:01:46,539  -->  00:01:48,109
is actually completely up to the coder.
41

41

00:01:48,109  -->  00:01:50,418
So you're gonna be able to just choose a name
42

42

00:01:50,418  -->  00:01:51,901
that makes sense to you and hopefully,
43

43

00:01:51,901  -->  00:01:54,045
you choose one that you're gonna be able to understand
44

44

00:01:54,045  -->  00:01:56,894
when you're revisiting your code in the future.
45

45

00:01:56,894  -->  00:01:59,039
And then that item name can also be referenced
46

46

00:01:59,039  -->  00:02:00,555
inside of your loop.
47

47

00:02:00,555  -->  00:02:02,916
So, for example, if you wanted to use
48

48

00:02:02,916  -->  00:02:05,759
if statements to perform checks.
49

49

00:02:05,759  -->  00:02:07,611
So that's the presentation, let's go ahead and hop
50

50

00:02:07,611  -->  00:02:10,028
back to the Jupyter Notebook.
51

51

00:02:10,956  -->  00:02:13,051
Great, so we're back
52

52

00:02:13,051  -->  00:02:14,410
and we're gonna go ahead and get started
53

53

00:02:14,410  -->  00:02:16,803
through a very simple example.
54

54

00:02:16,803  -->  00:02:18,451
So now we're gonna start with some live coding.
55

55

00:02:18,451  -->  00:02:23,242
I'm gonna make a list and this list is just gonna be
56

56

00:02:23,242  -->  00:02:25,139
the numbers one through five.
57

57

00:02:25,139  -->  00:02:26,745
So I have my list, l.
58

58

00:02:26,745  -->  00:02:29,383
So l's equal to 1,2,3,4,5.
59

59

00:02:29,383  -->  00:02:31,608
And now I'm gonna say a for loop.
60

60

00:02:31,608  -->  00:02:35,609
Let's say I wanted to print every element in that list.
61

61

00:02:35,609  -->  00:02:38,442
I could say for element in l colon
62

62

00:02:44,270  -->  00:02:45,427
I'm gonna click enter.
63

63

00:02:45,427  -->  00:02:47,496
It's automatically gonna indent for me.
64

64

00:02:47,496  -->  00:02:50,344
I'm gonna say print element.
65

65

00:02:50,344  -->  00:02:52,155
Shift+Enter to run that cell.
66

66

00:02:52,155  -->  00:02:54,840
And you'll notice, it went ahead and printed
67

67

00:02:54,840  -->  00:02:56,622
each of those elements.
68

68

00:02:56,622  -->  00:02:58,979
And to drive the point home that we can actually name
69

69

00:02:58,979  -->  00:03:03,098
this item, that variable name, whatever you want,
70

70

00:03:03,098  -->  00:03:04,497
I'm gonna go ahead and switch it here.
71

71

00:03:04,497  -->  00:03:07,061
For num in l, print num.
72

72

00:03:07,061  -->  00:03:09,577
And you notice, it's the exact same thing when I run it.
73

73

00:03:09,577  -->  00:03:11,924
So what's nice about this is within your for loop,
74

74

00:03:11,924  -->  00:03:13,860
before it, you don't have to worry about
75

75

00:03:13,860  -->  00:03:16,875
pre-defining that num and you can then reference it
76

76

00:03:16,875  -->  00:03:18,974
inside of your for loop.
77

77

00:03:18,974  -->  00:03:21,452
Okay, so let's go ahead and do
78

78

00:03:21,452  -->  00:03:23,017
something a little differently here.
79

79

00:03:23,017  -->  00:03:23,928
What I'm gonna do is I'm gonna say
80

80

00:03:23,928  -->  00:03:26,428
for num in l, print something.
81

81

00:03:30,788  -->  00:03:33,057
So what this is gonna do is you're gonna tell Python
82

82

00:03:33,057  -->  00:03:37,641
Hey, for every number, for every element in that list,
83

83

00:03:37,641  -->  00:03:40,824
I want you to do the code below, which is print something.
84

84

00:03:40,824  -->  00:03:44,924
So it should print something then five times.
85

85

00:03:44,924  -->  00:03:46,287
And there you have it.
86

86

00:03:46,287  -->  00:03:50,032
So you could imagine we could have lots of code here
87

87

00:03:50,032  -->  00:03:51,801
in this space and it'll do it for
88

88

00:03:51,801  -->  00:03:55,393
every element that's in that iterable or that list.
89

89

00:03:55,393  -->  00:03:57,788
Okay, so that's our simplest example.
90

90

00:03:57,788  -->  00:03:59,644
So we're gonna build on top of this
91

91

00:03:59,644  -->  00:04:02,366
and we're gonna write an if statement within that for loop
92

92

00:04:02,366  -->  00:04:03,891
that can check for even numbers.
93

93

00:04:03,891  -->  00:04:06,493
So in order to check for even numbers,
94

94

00:04:06,493  -->  00:04:08,602
I'm gonna introduce a new concept called
95

95

00:04:08,602  -->  00:04:12,769
the modulo, which is spelled M-O-D-U-L-O.
96

96

00:04:17,909  -->  00:04:19,521
And what this is gonna allow us to do
97

97

00:04:19,521  -->  00:04:22,001
is get the remainder in division
98

98

00:04:22,001  -->  00:04:23,696
and it uses the percent symbol.
99

99

00:04:23,696  -->  00:04:26,295
So I'm gonna show you an example.
100

100

00:04:26,295  -->  00:04:29,462
So imagine I have 10 divided by three.
101

101

00:04:32,357  -->  00:04:34,010
So what would the remainder be?
102

102

00:04:34,010  -->  00:04:36,198
Well three times three is nine
103

103

00:04:36,198  -->  00:04:40,848
and so three goes into 10 three times, remainder one.
104

104

00:04:40,848  -->  00:04:43,443
So that means when I type this in,
105

105

00:04:43,443  -->  00:04:47,441
10 modulo three, or sometimes called mod three,
106

106

00:04:47,441  -->  00:04:49,382
one is my remainder.
107

107

00:04:49,382  -->  00:04:51,648
So I have three remainder one.
108

108

00:04:51,648  -->  00:04:55,572
And let's say I wanted to do, just another quick example,
109

109

00:04:55,572  -->  00:04:56,905
18 modulo seven.
110

110

00:04:59,693  -->  00:05:03,860
So seven can go into 18 two times with a remainder of four
111

111

00:05:05,479  -->  00:05:08,696
cause there's gonna be 14, seven times two is 14,
112

112

00:05:08,696  -->  00:05:10,303
and then in order to get up to 18,
113

113

00:05:10,303  -->  00:05:12,038
you have a remainder of four.
114

114

00:05:12,038  -->  00:05:14,018
So that's what we output there.
115

115

00:05:14,018  -->  00:05:16,454
And let's just drive the point home with
116

116

00:05:16,454  -->  00:05:21,038
four mod two, so two actually goes in evenly into four,
117

117

00:05:21,038  -->  00:05:23,922
so you have no remainder, zero.
118

118

00:05:23,922  -->  00:05:27,922
Okay, so go ahead and make sure that this makes sense to you
119

119

00:05:27,922  -->  00:05:29,531
by typing in examples,
120

120

00:05:29,531  -->  00:05:31,641
but basically all that modulo is doing
121

121

00:05:31,641  -->  00:05:36,473
is it's just giving you the remainder that's left.
122

122

00:05:36,473  -->  00:05:39,152
Which remember, that's not equal to the decimal point
123

123

00:05:39,152  -->  00:05:41,093
after the number, that's just the remainder
124

124

00:05:41,093  -->  00:05:45,760
as in a super-basic kind of elementary division.
125

125

00:05:45,760  -->  00:05:49,275
Alright, so moving along, we can notice that if this number
126

126

00:05:49,275  -->  00:05:51,797
is fully divisible with no remainder,
127

127

00:05:51,797  -->  00:05:53,983
then the result of the modulo call is zero.
128

128

00:05:53,983  -->  00:05:56,573
So that means we can use this test for even numbers.
129

129

00:05:56,573  -->  00:06:00,242
So we can think that if we get a zero output
130

130

00:06:00,242  -->  00:06:03,325
from this percent sign or modulo two,
131

131

00:06:04,491  -->  00:06:05,481
if that's equal to zero,
132

132

00:06:05,481  -->  00:06:07,055
that means it's an even number, right?
133

133

00:06:07,055  -->  00:06:09,910
Cause if two goes into your number evenly,
134

134

00:06:09,910  -->  00:06:13,096
then you know that number is even.
135

135

00:06:13,096  -->  00:06:14,707
And if it outputs a one,
136

136

00:06:14,707  -->  00:06:16,725
then you know you have an odd number.
137

137

00:06:16,725  -->  00:06:19,075
So let's go ahead and go back to that for loop
138

138

00:06:19,075  -->  00:06:20,311
we were doing.
139

139

00:06:20,311  -->  00:06:23,228
So I have l which is 1, 2, 3, 4, 5.
140

140

00:06:24,279  -->  00:06:28,029
I'm gonna go ahead and say for num in l colon
141

141

00:06:33,572  -->  00:06:34,970
and then I'm gonna have an if statement.
142

142

00:06:34,970  -->  00:06:38,637
I'm gonna say if num modulo two is equal to,
143

143

00:06:44,787  -->  00:06:46,476
and notice how I have two equal signs
144

144

00:06:46,476  -->  00:06:48,620
because I'm making a comparison statement here,
145

145

00:06:48,620  -->  00:06:52,698
so I'm saying if that number is absolutely equal to zero
146

146

00:06:52,698  -->  00:06:54,698
colon, print the number.
147

147

00:06:57,856  -->  00:07:00,823
So let's go ahead and break down what this is gonna do.
148

148

00:07:00,823  -->  00:07:04,252
It's gonna go through each of those items in that list
149

149

00:07:04,252  -->  00:07:06,692
and it's gonna say okay, grab that item,
150

150

00:07:06,692  -->  00:07:11,187
which in this case is a number, perform modulo two on it,
151

151

00:07:11,187  -->  00:07:13,979
check if it equals zero, and if that's the case,
152

152

00:07:13,979  -->  00:07:15,380
then print that number.
153

153

00:07:15,380  -->  00:07:17,565
So go ahead and see if that works.
154

154

00:07:17,565  -->  00:07:21,113
Awesome, so you notice we only printed the even numbers.
155

155

00:07:21,113  -->  00:07:23,715
And so what would happen if we set this equal to one?
156

156

00:07:23,715  -->  00:07:25,277
Let's go ahead and find out.
157

157

00:07:25,277  -->  00:07:27,304
We only print the odd numbers.
158

158

00:07:27,304  -->  00:07:30,310
Excellent, so let's go ahead and build on top of this
159

159

00:07:30,310  -->  00:07:32,413
and add an else statement.
160

160

00:07:32,413  -->  00:07:33,946
So I'm gonna set this back to zero,
161

161

00:07:33,946  -->  00:07:37,630
so it only prints odd, or even numbers, excuse me.
162

162

00:07:37,630  -->  00:07:38,788
And I'm actually gonna change this.
163

163

00:07:38,788  -->  00:07:41,788
I'm gonna say print Here is an even.
164

164

00:07:45,013  -->  00:07:46,578
And remember this sort of print statements
165

165

00:07:46,578  -->  00:07:48,690
are for Python 2.
166

166

00:07:48,690  -->  00:07:52,440
And then I'm gonna say else print Odd number.
167

167

00:07:58,511  -->  00:08:01,688
So take a moment, make sure you understand what is gonna
168

168

00:08:01,688  -->  00:08:03,674
actually output from the cell and then check if you're right
169

169

00:08:03,674  -->  00:08:04,841
by running it.
170

170

00:08:07,685  -->  00:08:09,708
Okay great, so let's go ahead
171

171

00:08:09,708  -->  00:08:12,022
and do one more edit to this code.
172

172

00:08:12,022  -->  00:08:13,557
So I'm gonna say,
173

173

00:08:13,557  -->  00:08:15,743
let's say I want to actually print the number
174

174

00:08:15,743  -->  00:08:19,209
if it's even, so I'm just gonna print the num here.
175

175

00:08:19,209  -->  00:08:22,556
And then if it's odd, print an alert That was an odd number.
176

176

00:08:22,556  -->  00:08:24,124
Let's go ahead and run that cell.
177

177

00:08:24,124  -->  00:08:24,989
And you notice I get
178

178

00:08:24,989  -->  00:08:28,831
Odd number, 2, Odd number, 4, Odd number.
179

179

00:08:28,831  -->  00:08:30,983
Keep this in mind cause on your test,
180

180

00:08:30,983  -->  00:08:33,000
there's gonna be a question that kind of uses
181

181

00:08:33,000  -->  00:08:34,447
this sort of logic.
182

182

00:08:34,447  -->  00:08:36,135
It's gonna be called the fizz buzz question
183

183

00:08:36,135  -->  00:08:37,913
and it's actually a really common
184

184

00:08:37,913  -->  00:08:39,769
interview programming question
185

185

00:08:39,769  -->  00:08:42,119
as one of the first screens you do.
186

186

00:08:42,119  -->  00:08:44,221
Okay, so moving along,
187

187

00:08:44,221  -->  00:08:47,043
we're gonna go with a totally different example now.
188

188

00:08:47,043  -->  00:08:51,011
So another common idea during a for loop
189

189

00:08:51,011  -->  00:08:52,870
is keeping some sort of running tally
190

190

00:08:52,870  -->  00:08:54,602
during the multiple loops.
191

191

00:08:54,602  -->  00:08:56,750
And, for example, what we're gonna do is create a for loop
192

192

00:08:56,750  -->  00:08:59,226
that sums up that list.
193

193

00:08:59,226  -->  00:09:01,498
So let's go ahead and make a list.
194

194

00:09:01,498  -->  00:09:05,049
Actually, we already have our list, l, 1, 2, 3, 4, 5.
195

195

00:09:05,049  -->  00:09:08,799
And I'm gonna make a variable called list_sum
196

196

00:09:11,493  -->  00:09:14,410
and I'm gonna set it equal to zero.
197

197

00:09:15,453  -->  00:09:18,713
Okay and then I'm gonna do a for loop that says
198

198

00:09:18,713  -->  00:09:21,130
for num in l take my list_sum
199

199

00:09:28,690  -->  00:09:32,857
and I'm gonna set it equal to the current list_sum
200

200

00:09:33,853  -->  00:09:35,270
plus that number.
201

201

00:09:37,446  -->  00:09:40,781
And then after the for loop has run,
202

202

00:09:40,781  -->  00:09:43,543
I'm going to print list_sum.
203

203

00:09:43,543  -->  00:09:46,477
And notice how this statement right here is
204

204

00:09:46,477  -->  00:09:47,921
outside of the for loop
205

205

00:09:47,921  -->  00:09:50,609
cause it's not indented inside of it.
206

206

00:09:50,609  -->  00:09:53,255
Okay, let's go ahead and run that.
207

207

00:09:53,255  -->  00:09:55,152
And I get 15, so that makes sense.
208

208

00:09:55,152  -->  00:09:57,569
So basically what happened is
209

209

00:09:58,542  -->  00:10:00,522
one plus two plus three plus four plus five
210

210

00:10:00,522  -->  00:10:01,762
is gonna be equal to 15.
211

211

00:10:01,762  -->  00:10:03,460
So let's break down what's going on in this cell
212

212

00:10:03,460  -->  00:10:05,239
so we really understand it.
213

213

00:10:05,239  -->  00:10:07,548
I'm setting a variable, list_sum,
214

214

00:10:07,548  -->  00:10:10,438
and I'm setting it equal to zero outside of the for loop,
215

215

00:10:10,438  -->  00:10:12,448
before the for loop takes place.
216

216

00:10:12,448  -->  00:10:16,404
And then I'm saying for every number in that list,
217

217

00:10:16,404  -->  00:10:19,571
go ahead and take the current list_sum
218

218

00:10:20,528  -->  00:10:22,839
and then add that number to it
219

219

00:10:22,839  -->  00:10:24,982
and reassign list_sum.
220

220

00:10:24,982  -->  00:10:27,959
So it's doing this code again and again
221

221

00:10:27,959  -->  00:10:30,771
for each of these numbers.
222

222

00:10:30,771  -->  00:10:33,747
And you'll notice, list_sum is then acting like a
223

223

00:10:33,747  -->  00:10:37,330
current running tally for your current sum.
224

224

00:10:38,171  -->  00:10:39,171
Okay, great.
225

225

00:10:40,027  -->  00:10:41,303
So read over that cell,
226

226

00:10:41,303  -->  00:10:43,615
make sure you fully understand what's going on
227

227

00:10:43,615  -->  00:10:46,830
and something I want to note that we've gone over before
228

228

00:10:46,830  -->  00:10:50,247
is if we're editing a variable by itself,
229

229

00:10:51,277  -->  00:10:55,528
we can also use this sort of notation, this plus equals.
230

230

00:10:55,528  -->  00:10:57,136
And you'll notice if I run that cell,
231

231

00:10:57,136  -->  00:10:59,080
it's gonna equal the exact same thing.
232

232

00:10:59,080  -->  00:11:00,080
Okay, great.
233

233

00:11:01,098  -->  00:11:05,181
So let's go ahead and move on to another example.
234

234

00:11:07,297  -->  00:11:09,526
So we've already looped through lists
235

235

00:11:09,526  -->  00:11:11,343
and now we're gonna loop through a string.
236

236

00:11:11,343  -->  00:11:15,343
So I'm gonna say s is equal to this is a string.
237

237

00:11:18,568  -->  00:11:19,969
Okay, perfect.
238

238

00:11:19,969  -->  00:11:23,517
So remember when we index strings,
239

239

00:11:23,517  -->  00:11:25,782
Python thought of them as a sequence.
240

240

00:11:25,782  -->  00:11:27,102
So now when we iterate through them,
241

241

00:11:27,102  -->  00:11:30,740
we'll also be accessing each of those items in the string.
242

242

00:11:30,740  -->  00:11:34,907
So I can say for item in s, that string, print item.
243

243

00:11:40,742  -->  00:11:43,834
Shift+Enter and you'll notice it's going along
244

244

00:11:43,834  -->  00:11:45,976
the zero, the one, the two, the three,
245

245

00:11:45,976  -->  00:11:47,749
almost as if it was indexing it
246

246

00:11:47,749  -->  00:11:50,265
and then it's printing every single item
247

247

00:11:50,265  -->  00:11:53,893
in that sequence, this is a string.
248

248

00:11:53,893  -->  00:11:58,060
Great, so right now if I was to do this in my own code,
249

249

00:11:59,064  -->  00:12:01,463
I would have called this something that makes sense to me.
250

250

00:12:01,463  -->  00:12:04,027
So for instance, letter makes a lot of sense,
251

251

00:12:04,027  -->  00:12:05,806
since I know I'm going through the letters.
252

252

00:12:05,806  -->  00:12:09,723
And I'm gonna say for letter in s print letter.
253

253

00:12:10,638  -->  00:12:14,810
And you notice the output is exactly the same.
254

254

00:12:14,810  -->  00:12:16,952
Okay, so now let's go ahead and look
255

255

00:12:16,952  -->  00:12:20,255
at how a for loop can be used with a tuple.
256

256

00:12:20,255  -->  00:12:22,403
So I'm gonna make a tuple.
257

257

00:12:22,403  -->  00:12:24,722
I'm just gonna call it tup
258

258

00:12:24,722  -->  00:12:26,498
and remember tuples are with parentheses
259

259

00:12:26,498  -->  00:12:30,248
and I'm gonna use 1,2,3,4,5 and I'm gonna say
260

260

00:12:32,196  -->  00:12:33,946
for t in tup print t.
261

261

00:12:39,613  -->  00:12:40,893
So you notice it's iterating it
262

262

00:12:40,893  -->  00:12:43,495
just like as if it were a list.
263

263

00:12:43,495  -->  00:12:45,360
It just cares that it's a sequence
264

264

00:12:45,360  -->  00:12:49,527
and we can also, again, call these whatever we want.
265

265

00:12:51,632  -->  00:12:52,632
Okay, great.
266

266

00:12:54,027  -->  00:12:56,957
So something that's interesting about tuples,
267

267

00:12:56,957  -->  00:12:59,767
and this is where we're gonna get a little more advanced
268

268

00:12:59,767  -->  00:13:01,934
than in a typical lecture,
269

269

00:13:03,105  -->  00:13:05,373
we're gonna learn about something that's called
270

270

00:13:05,373  -->  00:13:06,706
tuple unpacking.
271

271

00:13:07,844  -->  00:13:09,078
And to fully show that,
272

272

00:13:09,078  -->  00:13:13,040
what we're gonna do is create a list of tuples.
273

273

00:13:13,040  -->  00:13:17,463
So I'm gonna redefine l to be equal to a list
274

274

00:13:17,463  -->  00:13:20,731
and what I'm gonna have it do is
275

275

00:13:20,731  -->  00:13:22,711
create some tuple pairs in that list.
276

276

00:13:22,711  -->  00:13:26,878
So is gonna be an element in that list.
277

277

00:13:28,894  -->  00:13:31,625
, so you notice I'm kinda nesting these tuples
278

278

00:13:31,625  -->  00:13:33,274
inside of that list.
279

279

00:13:33,274  -->  00:13:36,107
And then .
280

280

00:13:37,444  -->  00:13:39,433
Okay, so what's going on here?
281

281

00:13:39,433  -->  00:13:42,766
I have l which is a list of tuple pairs.
282

282

00:13:44,981  -->  00:13:46,175
And to show you what that looks like,
283

283

00:13:46,175  -->  00:13:49,432
let's go ahead and index the zeroth item.
284

284

00:13:49,432  -->  00:13:51,248
That's gonna be that pair, that tuple.
285

285

00:13:51,248  -->  00:13:55,004
And I can again, if I wanted to, index again
286

286

00:13:55,004  -->  00:13:58,193
and say that's just 2, so zero zero.
287

287

00:13:58,193  -->  00:14:00,627
And then I could say one, grab 4.
288

288

00:14:00,627  -->  00:14:03,651
So let's say we wanted to grab 10,
289

289

00:14:03,651  -->  00:14:06,047
hopefully this is familiar to you,
290

290

00:14:06,047  -->  00:14:08,685
that would be the second index of that list
291

291

00:14:08,685  -->  00:14:11,162
and it's gonna be that first item
292

292

00:14:11,162  -->  00:14:12,809
and there we have 10.
293

293

00:14:12,809  -->  00:14:15,368
Okay, so now that we have that sort of logic down,
294

294

00:14:15,368  -->  00:14:18,837
we can actually do what's called tuple unpacking.
295

295

00:14:18,837  -->  00:14:20,483
So if you're iterating through a sequence
296

296

00:14:20,483  -->  00:14:23,324
that contains tuples and the item actually be
297

297

00:14:23,324  -->  00:14:24,602
the tuple itself.
298

298

00:14:24,602  -->  00:14:28,538
So during the for loop, we will be unpacking that tuple
299

299

00:14:28,538  -->  00:14:29,733
inside of a sequence
300

300

00:14:29,733  -->  00:14:33,120
and we can access the individual items inside that tuple.
301

301

00:14:33,120  -->  00:14:34,030
So I know that was a lot,
302

302

00:14:34,030  -->  00:14:36,591
so let's just go ahead and show you an example.
303

303

00:14:36,591  -->  00:14:40,508
So first, I'm gonna say for tup in l print tup.
304

304

00:14:43,035  -->  00:14:44,318
Okay, so that makes sense, right?
305

305

00:14:44,318  -->  00:14:46,960
I'm printing every element in that list.
306

306

00:14:46,960  -->  00:14:50,143
And now, I'm gonna show you how to do it with unpacking.
307

307

00:14:50,143  -->  00:14:54,158
So if I know what my data structure looks like inside that
308

308

00:14:54,158  -->  00:14:57,740
and it's a tuple, I can actually write something
309

309

00:14:57,740  -->  00:14:58,573
that looks like this.
310

310

00:14:58,573  -->  00:15:02,740
I can write that item that I'm iterating with as a tuple.
311

311

00:15:04,336  -->  00:15:07,669
And I can say for this tuple in l print,
312

312

00:15:12,302  -->  00:15:13,864
let's just want to print the first ones,
313

313

00:15:13,864  -->  00:15:14,947
the 2, 6, 10.
314

314

00:15:15,884  -->  00:15:17,797
And now, this is called tuple unpacking.
315

315

00:15:17,797  -->  00:15:19,364
So with tuples in a sequence,
316

316

00:15:19,364  -->  00:15:21,340
we can access the items inside of them
317

317

00:15:21,340  -->  00:15:22,654
through this unpacking.
318

318

00:15:22,654  -->  00:15:24,384
And the reason that this is really important is
319

319

00:15:24,384  -->  00:15:26,158
because a lot of objects
320

320

00:15:26,158  -->  00:15:28,465
will deliver iterables through tuples.
321

321

00:15:28,465  -->  00:15:30,527
And what we're gonna do now is start exploring
322

322

00:15:30,527  -->  00:15:32,182
iterating through dictionaries
323

323

00:15:32,182  -->  00:15:34,820
so we can take this concept a little further.
324

324

00:15:34,820  -->  00:15:37,307
So just to break down what we did,
325

325

00:15:37,307  -->  00:15:42,205
we said for tup in l we printed tup and that will output
326

326

00:15:42,205  -->  00:15:44,846
the entire items in that list,
327

327

00:15:44,846  -->  00:15:47,988
but if I state that item to look like a tuple,
328

328

00:15:47,988  -->  00:15:52,333
this t1,t2, and remember I have to match it up exactly
329

329

00:15:52,333  -->  00:15:54,846
to what all those items look like in the list,
330

330

00:15:54,846  -->  00:15:56,664
so the items have to be uniform,
331

331

00:15:56,664  -->  00:16:00,581
then I can print things from that actual tuple.
332

332

00:16:01,619  -->  00:16:03,649
So I could do something like this as well.
333

333

00:16:03,649  -->  00:16:06,254
Or then I could perform operations on it.
334

334

00:16:06,254  -->  00:16:09,671
So I could say maybe I wanted t1 minus t2
335

335

00:16:11,786  -->  00:16:13,308
and I get -2 for all of them.
336

336

00:16:13,308  -->  00:16:15,333
Or let's say I wanted the sum of them,
337

337

00:16:15,333  -->  00:16:16,666
six, 14, 22 etc.
338

338

00:16:17,611  -->  00:16:20,086
Okay, so let's go ahead and expand on that idea
339

339

00:16:20,086  -->  00:16:22,437
by working through a dictionary.
340

340

00:16:22,437  -->  00:16:25,330
So I'm gonna say d is equal to,
341

341

00:16:25,330  -->  00:16:27,772
let's go ahead and make a quick dictionary here.
342

342

00:16:27,772  -->  00:16:31,272
I'm gonna make three keys, k1, k2, and k3.
343

343

00:16:39,515  -->  00:16:41,490
Great, so now I have my dictionary,
344

344

00:16:41,490  -->  00:16:44,921
1, 2, and 3 with three keys, k1, k2, k3.
345

345

00:16:44,921  -->  00:16:48,921
And I'm gonna say for item in d, that dictionary
346

346

00:16:50,071  -->  00:16:50,988
print item.
347

347

00:16:53,867  -->  00:16:56,637
So what do you think's gonna come out?
348

348

00:16:56,637  -->  00:16:57,875
It's actually just the keys
349

349

00:16:57,875  -->  00:16:59,313
and notice how they're also out of order.
350

350

00:16:59,313  -->  00:17:02,776
Remember dictionaries are mappings.
351

351

00:17:02,776  -->  00:17:04,305
So what's gonna happen here is
352

352

00:17:04,305  -->  00:17:05,872
that this is only producing the keys.
353

353

00:17:05,872  -->  00:17:07,975
And what do we do if we want to get the values
354

354

00:17:07,975  -->  00:17:10,250
or both the keys and the values?
355

355

00:17:10,250  -->  00:17:12,441
So we're actually gonna have a Python 3 alert.
356

356

00:17:12,441  -->  00:17:17,097
So let's go ahead and jump back to the Jupyter Notebook.
357

357

00:17:17,097  -->  00:17:19,571
Okay, so jump back to the Jupyter Notebook
358

358

00:17:19,571  -->  00:17:22,375
to fully discover this Python 3 alert.
359

359

00:17:22,375  -->  00:17:24,934
So if you're using Python 2,
360

360

00:17:24,934  -->  00:17:27,620
the method that we're gonna use to iterate through the items
361

361

00:17:27,620  -->  00:17:29,370
is called .iteritems.
362

362

00:17:31,254  -->  00:17:33,605
So if you're using Python 2, you should use .iteritems
363

363

00:17:33,605  -->  00:17:36,491
to iterate through the keys and values of a dictionary.
364

364

00:17:36,491  -->  00:17:38,637
So what this does is basically creates a generator
365

365

00:17:38,637  -->  00:17:39,787
and we're gonna learn about generators
366

366

00:17:39,787  -->  00:17:41,888
later on in the course and that's gonna generate
367

367

00:17:41,888  -->  00:17:44,323
the keys and values of your dictionary.
368

368

00:17:44,323  -->  00:17:46,311
So to see it in action,
369

369

00:17:46,311  -->  00:17:48,697
I'm just gonna walk through the code here.
370

370

00:17:48,697  -->  00:17:50,970
I have d.iteritems
371

371

00:17:50,970  -->  00:17:54,230
and we can see that this creates a generator.
372

372

00:17:54,230  -->  00:17:59,050
So calling the items method returns a list of tuples.
373

373

00:17:59,050  -->  00:18:01,906
And then you could iterate through that list
374

374

00:18:01,906  -->  00:18:04,840
of tuples of the keys and the values.
375

375

00:18:04,840  -->  00:18:07,284
Now if you're using Python 3,
376

376

00:18:07,284  -->  00:18:09,598
what you want to use is .items.
377

377

00:18:09,598  -->  00:18:13,765
So .items for Python 3 is gonna be the same as using
378

378

00:18:14,639  -->  00:18:16,472
iteritems in Python 2.
379

379

00:18:17,572  -->  00:18:20,826
It's basically a really similar change as
380

380

00:18:20,826  -->  00:18:24,493
when we were learning about range and xrange
381

381

00:18:26,401  -->  00:18:29,002
which we'll cover in more detail throughout this course,
382

382

00:18:29,002  -->  00:18:33,628
but a lot of the changes in Python 2 to Python 3
383

383

00:18:33,628  -->  00:18:36,099
were turning things into generators
384

384

00:18:36,099  -->  00:18:38,862
so you want to store things in lists.
385

385

00:18:38,862  -->  00:18:43,029
Okay so you might be wondering why this worked in Python 2
386

386

00:18:43,864  -->  00:18:46,176
and that's because of the introduction to generators
387

387

00:18:46,176  -->  00:18:48,615
in Python during its earlier years.
388

388

00:18:48,615  -->  00:18:51,465
So go ahead and read this in the Jupyter Notebook.
389

389

00:18:51,465  -->  00:18:53,621
Hopefully, you already have before coming to this lecture.
390

390

00:18:53,621  -->  00:18:56,183
But it's just a little more of a breakdown
391

391

00:18:56,183  -->  00:18:57,956
as to what's going on here.
392

392

00:18:57,956  -->  00:19:00,123
But let's go ahead and say
393

393

00:19:00,964  -->  00:19:03,526
a quick tuple unpacking for a dictionary.
394

394

00:19:03,526  -->  00:19:07,693
So I'm gonna say for k,v in d.iteritems ;
395

395

00:19:15,443  -->  00:19:16,860
print k, print v.
396

396

00:19:20,069  -->  00:19:23,168
And there, I'm printing every key and every value.
397

397

00:19:23,168  -->  00:19:24,978
And it actually doesn't matter
398

398

00:19:24,978  -->  00:19:28,459
whether or not you have these parentheses in there.
399

399

00:19:28,459  -->  00:19:29,869
It's gonna work the same,
400

400

00:19:29,869  -->  00:19:31,770
so that's actually up to you.
401

401

00:19:31,770  -->  00:19:33,173
I just put them in there cause
402

402

00:19:33,173  -->  00:19:34,162
it might be a little more clear
403

403

00:19:34,162  -->  00:19:35,851
that you're doing tuple unpacking.
404

404

00:19:35,851  -->  00:19:37,251
But if you're reading someone else's code,
405

405

00:19:37,251  -->  00:19:39,273
more than likely, you're gonna read it like this,
406

406

00:19:39,273  -->  00:19:42,244
just without any parentheses, the k and the v,
407

407

00:19:42,244  -->  00:19:45,131
or whatever the items happen to be in that tuple.
408

408

00:19:45,131  -->  00:19:47,606
Alright, so that's it for this lecture.
409

409

00:19:47,606  -->  00:19:49,751
Go ahead and make sure you go over
410

410

00:19:49,751  -->  00:19:51,687
all of the examples in the Jupyter Notebook.
411

411

00:19:51,687  -->  00:19:54,163
They're really similar to the ones we did
412

412

00:19:54,163  -->  00:19:56,758
in this lecture, but just make sure you understand
413

413

00:19:56,758  -->  00:19:58,613
the context of a for loop
414

414

00:19:58,613  -->  00:20:00,304
and how to make your own for loops.
415

415

00:20:00,304  -->  00:20:02,054
Alright, thanks guys.
