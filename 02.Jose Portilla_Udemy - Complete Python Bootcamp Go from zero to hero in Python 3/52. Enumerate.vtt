WEBVTT
1
1

00:00:01.437  -->  00:00:03.652
<v Instructor>Hello everyone, and welcome to the lecture</v>
2

2

00:00:03.652  -->  00:00:05.689
on the built-in function, enumerate.
3

3

00:00:05.689  -->  00:00:07.419
So we'll learn about enumerate
4

4

00:00:07.419  -->  00:00:08.859
and we'll learn how to use it.
5

5

00:00:08.859  -->  00:00:10.762
So it's an extremely useful function,
6

6

00:00:10.762  -->  00:00:12.672
and you'll find yourself, I believe using it
7

7

00:00:12.672  -->  00:00:14.411
all the time after this.
8

8

00:00:14.411  -->  00:00:16.676
What it basically does is, it allows you to
9

9

00:00:16.676  -->  00:00:20.638
keep a count as you iterate through an object.
10

10

00:00:20.638  -->  00:00:23.462
And it does this by the form, it returns a tuple,
11

11

00:00:23.462  -->  00:00:25.738
which has the count and then the element.
12

12

00:00:25.738  -->  00:00:27.729
So you could actually build out your own enumerate
13

13

00:00:27.729  -->  00:00:30.693
function with this definition here,
14

14

00:00:30.693  -->  00:00:33.632
but I think it's best learned just through examples.
15

15

00:00:33.632  -->  00:00:36.659
So, let's go ahead and see what this looks like.
16

16

00:00:36.659  -->  00:00:38.337
First what we're gonna do is make a list.
17

17

00:00:38.337  -->  00:00:42.504
I'm just gonna say, list l equal to, let's say, a,
18

18

00:00:44.321  -->  00:00:48.340
b, c, and you'll see in a second why I'm passing letters
19

19

00:00:48.340  -->  00:00:50.717
instead of just regular numbers.
20

20

00:00:50.717  -->  00:00:53.300
So I'm gonna say for item in l,
21

21

00:00:56.121  -->  00:00:57.038
print item.
22

22

00:00:59.290  -->  00:01:02.320
Okay, so this is nice, but let's say I wanted to also
23

23

00:01:02.320  -->  00:01:05.418
print out the index of this item.
24

24

00:01:05.418  -->  00:01:07.106
Or I wanted to keep track
25

25

00:01:07.106  -->  00:01:09.483
of how many items I had gone through.
26

26

00:01:09.483  -->  00:01:11.239
I could do something like this,
27

27

00:01:11.239  -->  00:01:13.739
I could say count equals zero,
28

28

00:01:15.073  -->  00:01:17.035
and then say for item in l,
29

29

00:01:17.035  -->  00:01:20.785
print item, then, let's say, I could've said,
30

30

00:01:22.593  -->  00:01:26.176
print count, and then count, add one to it.
31

31

00:01:27.580  -->  00:01:28.953
So what does that look like?
32

32

00:01:28.953  -->  00:01:32.566
So now I'm printing the count, so right now I start at zero,
33

33

00:01:32.566  -->  00:01:35.423
I print the item out, I add one to my count,
34

34

00:01:35.423  -->  00:01:36.816
and then I start over again.
35

35

00:01:36.816  -->  00:01:39.579
One is the count, b, two, c.
36

36

00:01:39.579  -->  00:01:41.592
Alright, so right now that's how you probably
37

37

00:01:41.592  -->  00:01:44.861
usually have been keeping track
38

38

00:01:44.861  -->  00:01:46.293
when you're iterating through items.
39

39

00:01:46.293  -->  00:01:49.909
But it's actually not necessary, because it's such an,
40

40

00:01:49.909  -->  00:01:53.363
tool, well, it's a task that you want to do so often
41

41

00:01:53.363  -->  00:01:55.453
that Python actually has a built-in method,
42

42

00:01:55.453  -->  00:01:56.870
and it's called enumerate.
43

43

00:01:56.870  -->  00:02:01.067
So what enumerate does, is that it returns back a tuple.
44

44

00:02:01.067  -->  00:02:03.567
So I'm gonna say, enumerate l.
45

45

00:02:05.569  -->  00:02:09.569
And it returns a tuple in the form, count, item.
46

46

00:02:10.405  -->  00:02:12.794
So I discussed before in tuple unpacking
47

47

00:02:12.794  -->  00:02:15.298
that you actually don't need these parentheses,
48

48

00:02:15.298  -->  00:02:18.199
but hopefully it just makes things a little more clear.
49

49

00:02:18.199  -->  00:02:20.211
And then I'm gonna say, print count.
50

50

00:02:20.211  -->  00:02:22.751
And you'll notice that the exact same thing,
51

51

00:02:22.751  -->  00:02:24.177
as we did before.
52

52

00:02:24.177  -->  00:02:26.891
So what it does is it basically just allows you
53

53

00:02:26.891  -->  00:02:31.147
to keep track of the count or it enumerates
54

54

00:02:31.147  -->  00:02:33.412
your iterable as you go through it.
55

55

00:02:33.412  -->  00:02:36.602
Okay, so, like I said enumerate becomes particularly
56

56

00:02:36.602  -->  00:02:38.101
useful when you have a case for,
57

57

00:02:38.101  -->  00:02:39.867
need to have some sort of a tracker.
58

58

00:02:39.867  -->  00:02:42.700
So for example, let's go ahead and
59

59

00:02:43.830  -->  00:02:47.597
make a new for loop that says for count, item,
60

60

00:02:47.597  -->  00:02:49.764
in enumerate of that list,
61

61

00:02:52.467  -->  00:02:53.967
let's say if count
62

62

00:02:55.434  -->  00:02:59.184
is greater than two, so I've gone through it,
63

63

00:03:01.229  -->  00:03:02.062
three times.
64

64

00:03:02.062  -->  00:03:05.635
And let's go ahead and, alright, let's say, yeah,
65

65

00:03:05.635  -->  00:03:09.378
greater or equal to two, let's go ahead and break that
66

66

00:03:09.378  -->  00:03:10.211
for loop.
67

67

00:03:10.211  -->  00:03:13.044
If not, I'm gonna say, print item.
68

68

00:03:14.025  -->  00:03:17.228
So, I went ahead and ran it, and I get only a and b.
69

69

00:03:17.228  -->  00:03:18.743
So what's going on here?
70

70

00:03:18.743  -->  00:03:21.489
So using enumerate, I was able to keep track,
71

71

00:03:21.489  -->  00:03:22.906
using that count,
72

72

00:03:25.067  -->  00:03:26.979
because with this if loop,
73

73

00:03:26.979  -->  00:03:29.960
if the count was either greater than or equal to two,
74

74

00:03:29.960  -->  00:03:32.096
it went ahead and breaked it, broke the loop.
75

75

00:03:32.096  -->  00:03:35.231
So it didn't really actually print out c.
76

76

00:03:35.231  -->  00:03:36.231
Okay, great.
77

77

00:03:37.120  -->  00:03:38.507
So, hopefully, you have a good understanding
78

78

00:03:38.507  -->  00:03:39.854
of what enumerate is actually doing.
79

79

00:03:39.854  -->  00:03:43.477
It's quite simple, and I think you get the best view
80

80

00:03:43.477  -->  00:03:45.736
of what's actually going on through this example right here.
81

81

00:03:45.736  -->  00:03:50.684
So you just say, for the count comma item, in enumerate
82

82

00:03:50.684  -->  00:03:52.964
of whatever your iterable is, and then you can use
83

83

00:03:52.964  -->  00:03:55.893
the count and use the item through tuple unpacking.
84

84

00:03:55.893  -->  00:03:59.938
A lot of times, you'll see it used with an i,
85

85

00:03:59.938  -->  00:04:03.602
if you're reading someone else's code, whoops.
86

86

00:04:03.602  -->  00:04:07.285
You'll, let's go ahead and change count here,
87

87

00:04:07.285  -->  00:04:10.295
to be i, so a lot of times people tend
88

88

00:04:10.295  -->  00:04:13.962
to use this notation i or sometimes even, n.
89

89

00:04:15.507  -->  00:04:17.839
Go ahead and use whatever notation works best for you,
90

90

00:04:17.839  -->  00:04:19.583
but just keep in mind that if you're reading someone
91

91

00:04:19.583  -->  00:04:22.176
else's code, and they've used enumerate a lot,
92

92

00:04:22.176  -->  00:04:24.499
they'll probably use i as the count.
93

93

00:04:24.499  -->  00:04:27.325
And the most important thing to keep in mind for enumerate
94

94

00:04:27.325  -->  00:04:29.823
is that count comes first, comma,
95

95

00:04:29.823  -->  00:04:32.863
and then it's your element in that iterable.
96

96

00:04:32.863  -->  00:04:35.460
Okay, that's really all there is to it for enumerate.
97

97

00:04:35.460  -->  00:04:37.791
Go ahead and explore it, make sure you understand it.
98

98

00:04:37.791  -->  00:04:42.058
But remember, it's just returning a tuple,
99

99

00:04:42.058  -->  00:04:43.808
that looks like this.
100

100

00:04:47.351  -->  00:04:49.782
That's all enumerate's doing.
101

101

00:04:49.782  -->  00:04:53.742
Okay, so great, I will see you at the next lecture
102

102

00:04:53.742  -->  00:04:57.167
where we'll discuss another built-in function in Python.
103

103

00:04:57.167  -->  00:04:58.500
Thanks everyone.
