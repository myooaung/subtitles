1
00:00:05,260 --> 00:00:07,110
Selamat datang kembali semua orang di kuliah ini.

2
00:00:07,120 --> 00:00:12,190
Kami akan membahas fungsi dan fungsi akan menjadi lompatan besar dalam kemampuan Anda sebagai

3
00:00:12,250 --> 00:00:13,290
seorang programmer.

4
00:00:14,290 --> 00:00:19,060
Sekarang membuat kode berulang bersih adalah bagian penting untuk menjadi programmer yang efektif.

5
00:00:19,060 --> 00:00:24,460
Dan sekarang jika kita ingin kode berulang pada dasarnya kita hanya perlu menyalin dan menempelkan

6
00:00:24,460 --> 00:00:25,270
kode itu.

7
00:00:25,420 --> 00:00:30,460
Untungnya fungsi memungkinkan membuat blok kode yang dapat dengan mudah dieksekusi berkali-kali tanpa perlu terus menulis

8
00:00:30,490 --> 00:00:33,730
ulang atau menyalin dan menempelkan seluruh blok kode tersebut.

9
00:00:33,730 --> 00:00:39,830
Sebagai gantinya, kita bisa membuat panggilan fungsi sederhana, mari kita menjelajahi sintaks untuk benar-benar membuat

10
00:00:39,830 --> 00:00:41,050
fungsi kita sendiri.

11
00:00:41,060 --> 00:00:43,300
Dimulai dengan kata kunci DPF.

12
00:00:43,370 --> 00:00:45,630
Pada dasarnya mendefinisikan fungsi.

13
00:00:45,740 --> 00:00:51,260
Kemudian kita memiliki nama fungsi dan nama fungsi harus semuanya huruf kecil dan kemudian menggunakan

14
00:00:51,290 --> 00:00:52,430
casing ular.

15
00:00:52,430 --> 00:00:58,250
Jadi itu menggarisbawahi kata-kata terpisah bahwa kita memiliki tanda kurung usus besar dan kemudian kita memiliki docstring yang menjelaskan

16
00:00:58,280 --> 00:01:03,340
fungsi yang Anda lihat dalam kuliah sebelumnya bagaimana kita memiliki string docstring yang menjelaskan metode.

17
00:01:03,380 --> 00:01:09,410
Begitu juga docstring serupa menjelaskan fungsi dan kemudian kita memiliki kode apa pun yang ingin kita jalankan ketika kita memanggil

18
00:01:09,410 --> 00:01:10,320
fungsi itu.

19
00:01:10,340 --> 00:01:13,860
Jadi sekarang semua fungsi ini dilakukan adalah mencetak kata Halo.

20
00:01:14,180 --> 00:01:18,140
Jadi di sini kita melihat di bagian bawah warna ungu seperti apa sebenarnya yang kita sebut fungsi.

21
00:01:18,170 --> 00:01:21,780
Dan dalam hal ini akan mencetak kembali halo.

22
00:01:22,000 --> 00:01:25,210
Sekarang juga harus dicatat bahwa fungsi sebenarnya dapat mengambil parameter.

23
00:01:25,210 --> 00:01:30,010
Jadi di sini sekarang kita melewati parameter nama yang akan diberikan pengguna ketika mereka memanggil fungsi.

24
00:01:30,190 --> 00:01:34,360
Dan kemudian kami mencetak Halo digabung dengan nama jadi halo ditambah nama.

25
00:01:34,360 --> 00:01:38,260
Jadi dalam hal ini Anda akan memanggil fungsi seperti yang ditunjukkan di

26
00:01:38,260 --> 00:01:45,120
bawah di sini nama fungsi dan Anda akan mengirimkan beberapa string dan kemudian ia akan mengatakan Hello Jose Now biasanya daripada

27
00:01:45,120 --> 00:01:50,130
mencetak hal-hal yang sebenarnya kita akan menggunakan kembalikan kata kunci untuk mengirim kembali hasil fungsi

28
00:01:50,130 --> 00:01:51,270
alih-alih hanya mencetak.

29
00:01:51,270 --> 00:01:55,170
Jadi pertanyaan yang sangat cepat untuk pemula adalah apa perbedaan antara mencetak

30
00:01:55,580 --> 00:02:01,610
barang dan mengembalikan barang yang sesuai dengan fungsi akan kembali memungkinkan kita untuk menetapkan keluaran fungsi ke variabel baru.

31
00:02:01,830 --> 00:02:03,450
Jadi akan terlihat seperti ini.

32
00:02:03,720 --> 00:02:05,320
Inilah fungsi sederhana.

33
00:02:05,490 --> 00:02:10,890
Dan itu disebut fungsi add dan dibutuhkan dalam dua parameter atau dua argumen nomor satu dan nomor dua.

34
00:02:11,100 --> 00:02:15,690
Dan kemudian kita akan mengembalikan nomor 1 ditambah mereka 2 daripada mencetaknya.

35
00:02:15,690 --> 00:02:20,280
Dan cara Anda menggunakan ini dalam kode Anda adalah ketika Anda memanggil fungsi Anda akan mendapatkan hasil

36
00:02:20,280 --> 00:02:22,050
yang sama dengan beberapa nama variabel.

37
00:02:22,050 --> 00:02:28,210
Jadi di sini saya katakan hasilnya sama dengan menambahkan fungsi 1 berkomitmen pada makna ketika benar-benar mencetak hasilnya.

38
00:02:28,260 --> 00:02:30,250
Saya bisa melihat tiga.

39
00:02:30,300 --> 00:02:35,610
Jadi sekarang kita telah membahas sintaksnya Mari kita lompat ke Anda karena notebook benar-benar menjelajahi ini lebih jauh.

40
00:02:35,610 --> 00:02:38,670
Baiklah mari kita mulai dengan mendefinisikan fungsi yang sangat sederhana.

41
00:02:38,670 --> 00:02:42,430
Kami menggunakan kata kunci DPF perhatikan yang memiliki penyorotan sintaksis di sana.

42
00:02:42,600 --> 00:02:49,980
Dan kemudian Anda dapat memanggil fungsi apa pun yang Anda inginkan sehingga kami dapat mengatakan sesuatu seperti fungsi nama membuka

43
00:02:49,990 --> 00:02:50,950
kurung tutup.

44
00:02:50,960 --> 00:02:55,160
Dan saat ini kami tidak akan memiliki fungsi ini mengambil parameter apa pun dan kemudian kami memiliki titik dua.

45
00:02:55,270 --> 00:02:59,350
Dan seperti yang kita ketahui, Colon mengindikasikan bahwa akan ada blok kode.

46
00:02:59,570 --> 00:03:04,730
Jadi kita tekan enter di sini dan sekarang kita melihat lekukan ini sehingga blok kode ini akan dieksekusi setiap

47
00:03:04,730 --> 00:03:06,660
kali kita memanggil fungsi bernama ini.

48
00:03:06,680 --> 00:03:13,480
Jadi semua fungsi ini akan melakukannya hanya mencetak halo dan kemudian setelah itu didefinisikan yang bisa kita

49
00:03:13,480 --> 00:03:15,340
lakukan adalah memanggil fungsi.

50
00:03:15,350 --> 00:03:20,600
Jadi jika saya hanya mengatakan fungsi nama seperti ini apa yang akan terjadi adalah Python akan melaporkan kembali

51
00:03:20,600 --> 00:03:26,420
hei Anda memiliki fungsi ini memanggil fungsi nama dan ada yang benar-benar memilikinya menjalankan apa yang perlu dilakukan adalah memiliki

52
00:03:26,810 --> 00:03:28,390
tanda kurung buka dan tutup.

53
00:03:28,430 --> 00:03:30,250
Jadi ketika saya menjalankannya saya benar-benar kembali.

54
00:03:30,470 --> 00:03:31,550
Halo.

55
00:03:31,550 --> 00:03:35,990
Jadi ini mungkin salah satu fungsi paling dasar yang Anda dapat memiliki F nama fungsi.

56
00:03:35,990 --> 00:03:37,160
Buka tutup cetak melihatku.

57
00:03:37,160 --> 00:03:40,760
Tidak perlu argumen dan kemudian kami hanya memiliki sesuatu yang dicetak.

58
00:03:40,780 --> 00:03:41,700
Mereka perhatikan sekarang.

59
00:03:41,720 --> 00:03:46,720
Jika saya menggeser tab saya mendapatkan tanda tangan dan kemudian mengatakan tidak ada dokumen di sini.

60
00:03:46,880 --> 00:03:50,680
Dan jika saya memanggil bantuan untuk fungsi ini, maka Fickell membantu di sini.

61
00:03:51,630 --> 00:03:56,190
Dan saya menjalankan ini saya hanya akan mengatakan hei ini adalah fungsi nama tanpa informasi lebih lanjut.

62
00:03:56,190 --> 00:04:00,210
Nah, itu tidak benar-benar berguna bagi orang lain di masa depan yang akan menggunakan kode kita

63
00:04:00,210 --> 00:04:01,120
dalam fungsi kita.

64
00:04:01,170 --> 00:04:07,680
Jadi bantuan ini kita akhirnya menambahkan docstring Dan kemudian ketika kita melakukan ini adalah kita memiliki sepasang tiga set melihat

65
00:04:07,680 --> 00:04:13,830
salah satu tanda kutip atau mengutip di sini bahwa Jupiter dan sebagian besar ide akan otomatis menyelesaikan ini.

66
00:04:13,830 --> 00:04:16,400
Jadi kami memiliki tiga tanda kutip tunggal di sini dan tiga tanda kutip tunggal di sini.

67
00:04:16,560 --> 00:04:18,270
Dan kemudian kami memiliki dokumen kami.

68
00:04:18,690 --> 00:04:27,360
Jadi di sini hanya informasi tentang fungsi dan hal-hal baik untuk dimasukkan di sini adalah input yang diharapkan.

69
00:04:27,380 --> 00:04:34,540
Jadi sesuatu seperti input adalah nama dan kemudian sesuatu seperti output bisa menjadi halo.

70
00:04:34,620 --> 00:04:41,310
Dan saat ini kami sebenarnya tidak memiliki input apa pun sehingga kami dapat mengatakan tidak dan meletakkannya. Tapi Anda tahu apa yang akan Anda

71
00:04:41,330 --> 00:04:43,230
lakukan sekarang adalah menjalankan ini lagi.

72
00:04:43,540 --> 00:04:46,530
Jadi sekarang saya menjalankan untuk menjual lagi untuk mendefinisikan kembali fungsi ini.

73
00:04:46,600 --> 00:04:51,310
Dan sekarang ketika saya memanggil bantuan dan saya menjalankan ini sekarang saya melihat informasi docstring

74
00:04:51,310 --> 00:04:53,290
docstring aktual tentang fungsi input output.

75
00:04:53,290 --> 00:04:58,480
Jadi ketika Anda melakukan shift plus tab pada fungsi built in di mana Anda kembali adalah

76
00:04:58,510 --> 00:04:59,620
docstring inilah fungsinya.

77
00:04:59,940 --> 00:05:00,310
BAIK.

78
00:05:00,430 --> 00:05:04,840
Jadi banyak fungsi yang kita lakukan dalam kursus ini, kita tidak akan repot menempatkan string Dachs di dalamnya

79
00:05:04,840 --> 00:05:09,580
karena Anda akan melihat bagaimana saya membangun mereka tetapi ketika Anda akan membuat kode bukan hanya untuk diri sendiri tetapi

80
00:05:09,580 --> 00:05:13,990
untuk orang lain itu pasti ide yang baik untuk dimasukkan ke dalam string dokumentasi seperti itu di

81
00:05:13,990 --> 00:05:14,520
masa depan.

82
00:05:14,530 --> 00:05:18,040
Orang-orang mengerti apa tujuan fungsi itu.

83
00:05:18,040 --> 00:05:19,130
Jadi mari kita lanjutkan.

84
00:05:19,690 --> 00:05:26,200
Mari kita kembali ke fungsi ini yang hanya menyapa kita akan menyapa usus besar

85
00:05:26,210 --> 00:05:28,210
dan kemudian mencetak Halo.

86
00:05:28,210 --> 00:05:32,460
Jadi ketika saya benar-benar menyebutnya lagi buka tutup cetak melihat saya kembali.

87
00:05:32,470 --> 00:05:33,270
Halo.

88
00:05:33,310 --> 00:05:35,080
Begitu juga fungsi cetak Hello sederhana.

89
00:05:35,290 --> 00:05:38,350
Dan sekarang mari kita tambahkan parameter atau argumen fungsi ini.

90
00:05:38,360 --> 00:05:44,890
Jadi kita akan mengambil parameter ini bernama name dan kemudian kita akan menyuruhnya menyapa dengan nama

91
00:05:44,890 --> 00:05:51,640
dan kemudian ketika saya menjalankan loop ini Sekarang Anda akan melihat bahwa saya mendapatkan kesalahan ia mengatakan Say

92
00:05:51,640 --> 00:05:54,190
hello hilang satu diperlukan argumen posisi.

93
00:05:54,190 --> 00:05:56,600
Jadi sebenarnya sekarang membutuhkan nama.

94
00:05:56,650 --> 00:06:00,040
Jadi mari kita beri nama, kita akan mengatakan Jose.

95
00:06:00,040 --> 00:06:01,010
Dan kemudian kita jalankan ini kembali.

96
00:06:01,030 --> 00:06:01,510
Saya kembali.

97
00:06:01,510 --> 00:06:03,520
Halo Jose.

98
00:06:03,520 --> 00:06:08,010
Sekarang seperti yang Anda catat saya mendapat kesalahan ketika saya tidak pasan parameter.

99
00:06:08,020 --> 00:06:13,780
Katanya, Hei, saya mengharapkan beberapa argumen posisi yang diperlukan sehingga yang bisa kita lakukan adalah memiliki argumen

100
00:06:14,140 --> 00:06:16,410
default atau parameter default di sini.

101
00:06:16,420 --> 00:06:21,850
Jadi jika saya tidak memasukkan nama sekarang saya mendapatkan kesalahan tetapi untuk menghindari apa yang bisa saya lakukan adalah memberikan

102
00:06:21,850 --> 00:06:22,690
nama standar.

103
00:06:22,990 --> 00:06:30,340
Jadi nama default yang bisa saya berikan adalah sesuatu seperti nama untuk semua nama huruf besar dan saya menandatangani default dengan tanda sama

104
00:06:30,340 --> 00:06:36,040
dengan ini sehingga ketika saya menjalankan ini dan saya menyapa lagi tanpa memberikan apa pun yang mengatakan Halo

105
00:06:36,070 --> 00:06:36,730
nama.

106
00:06:36,760 --> 00:06:43,200
Jadi default ini pada dasarnya akan meninggalkan sesuatu di sana kalau-kalau Anda tidak menyediakannya.

107
00:06:43,240 --> 00:06:47,060
Dan ada banyak fungsi dan saya menemukan default untuk banyak parameter.

108
00:06:47,380 --> 00:06:51,790
Tetapi sekarang jika saya benar-benar memberikan nama mungkin saya katakan Sally akan melaporkan kembali.

109
00:06:51,790 --> 00:06:52,630
Halo Sally.

110
00:06:52,630 --> 00:06:57,310
Jadi default hanya terjadi ketika Anda tidak benar-benar memberikan apa pun ke fungsi ini.

111
00:06:57,320 --> 00:07:01,790
Jadi ia mengatakan halo nama tetapi ketika saya benar-benar memberikan sesuatu David saya tidak bisa melihat.

112
00:07:01,810 --> 00:07:02,070
Halo.

113
00:07:02,080 --> 00:07:04,000
David OK

114
00:07:04,220 --> 00:07:07,290
Jadi itu adalah dasar-dasar fungsi yang hanya mencetak barang.

115
00:07:07,610 --> 00:07:13,430
Tetapi biasanya yang akan kita lakukan adalah ingin mendapatkan hasil aktual kembali untuk menyimpan ke variabel.

116
00:07:13,430 --> 00:07:14,930
Dan saya akan tunjukkan apa yang saya maksud dengan itu.

117
00:07:15,650 --> 00:07:18,230
Jika saya katakan hasilnya sama dengan.

118
00:07:18,230 --> 00:07:21,290
Say hello, David dan aku yang menjalankan ini.

119
00:07:21,420 --> 00:07:22,350
Masih dicetak.

120
00:07:22,400 --> 00:07:23,430
Halo David.

121
00:07:23,450 --> 00:07:29,200
Biarkan saya menunjukkan kepada Anda bahwa dengan jelas dengan memasukkan nama lain akan cocok untuk Zach dan itu mengatakan halo Zach bliss

122
00:07:29,240 --> 00:07:29,630
jijik.

123
00:07:29,690 --> 00:07:33,250
Hasil yang sebenarnya tidak kita dapatkan untuk hasil kita.

124
00:07:33,250 --> 00:07:37,110
Bahkan jika kita memeriksa jenis hasil kita itu kebetulan bukan tipe.

125
00:07:37,120 --> 00:07:43,930
Dan karena fungsi ini hanya mencetak sesuatu, sebenarnya mengembalikan apa pun untuk ditetapkan ke

126
00:07:43,930 --> 00:07:44,910
variabel.

127
00:07:45,070 --> 00:07:47,890
Untuk itu kita perlu menggunakan kata kunci kembali.

128
00:07:47,890 --> 00:07:55,160
Jadi saya ingin menyingkirkan pangeran ini dan memasukkan kata kunci kembali di sini dan mari kita hapus sel dengan

129
00:07:55,160 --> 00:07:55,610
cepat.

130
00:07:55,730 --> 00:08:00,190
Jadi kami mendapatkan hasil yang bersih dan saya ingin menjalankan kembali sel untuk membaca denda fungsi itu.

131
00:08:00,200 --> 00:08:09,640
Sekarang sudah kembali dan akhirnya saya bisa mengatakan hasilnya say hello atau taruh Jose di sini dan sekarang ketika saya melihat

132
00:08:09,650 --> 00:08:14,460
hasilnya itu adalah string yang sebenarnya Halo digabungkan dengan Jose.

133
00:08:14,460 --> 00:08:15,890
Jadi mari kita lihat contoh lain dari ini.

134
00:08:15,900 --> 00:08:22,180
Kita akan mengatakan jika kita akan membuat fungsi bernama add dan kemudian kita katakan akhiri satu dan dua atau variabel

135
00:08:22,190 --> 00:08:24,130
apa pun yang Anda inginkan.

136
00:08:24,130 --> 00:08:36,250
Dan saya akan kembali dan satu tambah dan dua dan kemudian saya bisa mengatakan hasilnya sama dengan menambahkan 20 koma 30

137
00:08:36,310 --> 00:08:40,000
dan kemudian hasil saya adalah 50.

138
00:08:40,180 --> 00:08:46,600
Jadi itulah kemampuan untuk menggunakan kata kunci kembali untuk mengembalikan operasi yang sedang dilakukan

139
00:08:46,600 --> 00:08:47,240
fungsi.

140
00:08:47,350 --> 00:08:50,320
Dan hasil akhirnya Anda bisa menyimpannya ke variabel yang berbeda.

141
00:08:50,530 --> 00:08:53,590
Dan ini biasanya yang akan Anda gunakan dengan fungsi.

142
00:08:53,620 --> 00:08:58,330
Ini tidak terlalu umum bahwa Anda menggunakan fungsi untuk hanya mencetak hal-hal hanya karena kami mencoba

143
00:08:58,330 --> 00:09:01,370
menunjukkan kepada Anda sintaks dasar dari hal-hal pencetakan ulang fungsional.

144
00:09:01,570 --> 00:09:05,500
Biasanya kami menggunakan fungsi di sini sering menggunakan kata kunci kembali

145
00:09:05,500 --> 00:09:10,450
karena Anda ingin menyimpan hasil sebagai semacam nama variabel untuk menggunakannya nanti dalam kode Anda.

146
00:09:10,470 --> 00:09:14,700
Jadi saya bisa menggunakan hasil di sel lain atau lebih jauh di skrip saya.

147
00:09:16,360 --> 00:09:16,840
Baiklah.

148
00:09:16,840 --> 00:09:22,780
Jadi kita sebenarnya tahu semua sintaks yang perlu kita ketahui untuk membuat fungsi kita sendiri dan

149
00:09:22,840 --> 00:09:26,200
fungsi yang benar-benar akan memungkinkan Anda untuk menyelesaikan masalah.

150
00:09:26,200 --> 00:09:31,930
Dan saya ingin menunjukkan kepada Anda bahwa dengan menulis beberapa contoh masalah di sini dan kemudian menggunakan fungsi

151
00:09:31,930 --> 00:09:32,620
untuk menyelesaikannya.

152
00:09:32,620 --> 00:09:37,450
Jadi fungsi benar-benar ingin mengambil dalam parameter melakukan semacam operasi logis dengannya

153
00:09:37,450 --> 00:09:39,070
dan kemudian kembali solusi.

154
00:09:39,070 --> 00:09:40,090
Jadi, saya tunjukkan apa yang saya maksud dengan itu.

155
00:09:40,120 --> 00:09:51,550
Mari kita bayangkan kita memiliki pernyataan masalah yang mengatakan Cari tahu apakah kata dog ada dalam string.

156
00:09:51,660 --> 00:09:55,060
Jadi kita memiliki masalah ini, kita perlu mencari tahu apakah kata anjing ada dalam sebuah string.

157
00:09:55,410 --> 00:09:58,810
Nah agar memiliki fungsi kita bisa melakukan hal berikut.

158
00:09:58,830 --> 00:10:01,460
Kami akan mengatakan cek anjing.

159
00:10:01,890 --> 00:10:07,050
Dan dibutuhkan beberapa strain yang akan label s dan Anda dapat memanggil variabel ini apa pun yang Anda inginkan

160
00:10:07,050 --> 00:10:11,380
sehingga Anda dapat menyebutnya string saya atau S atau string anjing dan merasa seperti itu.

161
00:10:11,400 --> 00:10:12,730
Jadi saya menyebutnya string saya.

162
00:10:13,260 --> 00:10:16,860
Dan kemudian apa yang kita lakukan di sini adalah memeriksa kata anjing dalam string.

163
00:10:17,220 --> 00:10:35,320
Jadi kita bisa melakukan hal berikut yang akan mengatakan jika anjing di string saya mengembalikan TRUE yang lain mengembalikan false.

164
00:10:35,330 --> 00:10:40,790
Jadi ini biasanya apa yang dipikirkan oleh pemula adalah solusi yang cukup bagus tapi mari kita lihat apa yang

165
00:10:40,850 --> 00:10:46,160
terjadi jika kita benar-benar menjalankan kode ini dengan baik katakanlah cek anjing dan kita akan melakukan yang berikut.

166
00:10:46,160 --> 00:10:51,590
Kami akan mengatakan anjing saya melarikan diri.

167
00:10:51,740 --> 00:10:57,660
Jadi ketika saya membaca ini dikatakan benar hei anjing saya ada anjing di sana jadi mari kita lakukan tes lain

168
00:10:57,680 --> 00:11:00,370
Katakanlah kucing saya melarikan diri dan melihat apa yang terjadi.

169
00:11:00,410 --> 00:11:01,540
Dan sekarang itu salah.

170
00:11:01,580 --> 00:11:05,750
Namun bagaimana jika kita menulis anjing ini melarikan diri.

171
00:11:06,110 --> 00:11:08,630
Ketika saya ketika saya menjalankan ini akan kembali salah.

172
00:11:08,690 --> 00:11:13,630
Dan alasannya adalah karena ia hanya mencari anjing dalam huruf kecil.

173
00:11:13,670 --> 00:11:20,360
Jadi yang bisa saya lakukan adalah menambahkan sedikit lebih banyak logika di sini saya bisa mengatakan dalam string saya pengembalian yang lebih rendah BENAR

174
00:11:20,360 --> 00:11:21,490
lagi mengembalikan palsu.

175
00:11:21,650 --> 00:11:27,470
Jadi saya menjalankan kembali sel untuk memperbarui fungsi saya dan kemudian ketika saya menjalankan ini sekarang dikatakan benar karena

176
00:11:27,470 --> 00:11:30,870
sekarang logika mengatakan jika anjing dalam string saya huruf kecil

177
00:11:30,930 --> 00:11:35,740
Jadi, huruf kecil semua huruf-huruf ini sebelum melakukan pemeriksaan anjing di dalam string itu.

178
00:11:36,020 --> 00:11:38,860
Dan kita sebenarnya dapat meningkatkan fungsi ini lebih jauh.

179
00:11:38,870 --> 00:11:44,390
Sebenarnya saya akan mengatakan bahwa cara fungsi ini ditulis sekarang pada dasarnya adalah salah satu indikator kunci bahwa

180
00:11:44,390 --> 00:11:47,410
siapa pun yang menulis ini masih pemula di Python.

181
00:11:47,510 --> 00:11:52,850
Dan alasannya adalah anjing ini di tali saya yang lebih rendah itu sendiri adalah boolean.

182
00:11:53,030 --> 00:11:54,420
Dan saya ingin menunjukkan kepada Anda apa yang saya maksud dengan itu.

183
00:11:54,470 --> 00:11:57,690
Saya akan menyalin ini.

184
00:11:57,690 --> 00:12:04,530
Jadi katakanlah anjing di anjing melarikan diri.

185
00:12:05,050 --> 00:12:11,050
Jadi ketika saya menjalankan pernyataan ini, pernyataan ini dengan sendirinya sudah mengembalikan makna boolean benar

186
00:12:11,530 --> 00:12:17,170
atau salah. Saya bahkan tidak memerlukan pernyataan if ini karena ini di sini sudah

187
00:12:17,170 --> 00:12:18,710
benar atau salah.

188
00:12:18,730 --> 00:12:24,130
Jadi ini sebabnya saya katakan adalah contoh umum pamer bahwa seseorang masih pemula di Python karena mereka

189
00:12:24,190 --> 00:12:26,710
agak lupa fakta bahwa ini sudah boolean.

190
00:12:26,710 --> 00:12:36,400
Jadi yang sebenarnya perlu saya lakukan adalah mengatakan anjing kembali dalam string saya lebih rendah bahwa saya dapat melakukan pernyataan if else karena ini

191
00:12:36,490 --> 00:12:39,750
dengan sendirinya sudah boolean benar atau salah.

192
00:12:39,850 --> 00:12:44,380
Jadi tidak ada seorang pun di sini dalam hal ini saya melihat kembali hasil yang sama.

193
00:12:44,380 --> 00:12:48,190
Dan di sinilah Anda bisa memberi tahu seseorang sedikit pengalaman dalam Python karena

194
00:12:48,190 --> 00:12:53,160
mereka bisa melakukan ini dengan bersih dan satu baris dengan menyadari ini dengan sendirinya sudah menjadi boolean.

195
00:12:53,170 --> 00:12:57,600
OK jadi itu contoh masalah yang baru saja kita selesaikan menggunakan fungsi.

196
00:12:57,610 --> 00:13:02,790
Baiklah jadi tugas aktual selanjutnya yang akan bisa kita selesaikan dengan suatu fungsi adalah babi latin.

197
00:13:02,790 --> 00:13:06,010
Dan jika Anda tidak terbiasa dengan babi latin, inilah aturannya.

198
00:13:06,010 --> 00:13:10,100
Ini pada dasarnya cara untuk mengubah kata normal menjadi kata kode rahasia.

199
00:13:10,480 --> 00:13:16,600
Dan jika kata dimulai dengan vokal yang akhirnya kita lakukan adalah menambahkan istilah ini ke akhir jika kata itu tidak

200
00:13:16,600 --> 00:13:22,000
dimulai dengan vokal maka kita ambil huruf pertama dan kemudian kita tempelkan sampai akhir dan kemudian kita katakan

201
00:13:22,210 --> 00:13:23,720
tambahkan ay ada .

202
00:13:23,740 --> 00:13:26,690
Jadi di sini kita memiliki contoh kata bahwa ini adalah semacam vokal.

203
00:13:26,800 --> 00:13:28,040
Kata kata yang sebenarnya.

204
00:13:28,270 --> 00:13:32,430
Dan kemudian kita ambil w karena bukan yvel menempelkannya di akhir dan kemudian tambahkan y.

205
00:13:32,440 --> 00:13:35,310
Jadi sekarang kita telah memasang Ordway yang dimulai dengan vokal.

206
00:13:35,320 --> 00:13:36,820
Jadi kita tambahkan saja y.

207
00:13:36,850 --> 00:13:38,220
Kami tidak benar-benar memindahkan huruf pertama.

208
00:13:38,230 --> 00:13:39,790
Jadi kita punya Apple.

209
00:13:40,480 --> 00:13:42,160
OK, mari kita periksa ini.

210
00:13:42,880 --> 00:13:45,340
Mari kita lihat apakah kita bisa membuat penerjemah latin babi.

211
00:13:45,340 --> 00:13:49,140
Jadi kita punya babi latin dan kita akan mengambil beberapa variabel.

212
00:13:49,140 --> 00:13:52,280
Jadi kita akan memanggil kata kolon variabel ini.

213
00:13:52,480 --> 00:13:56,150
Dan sekarang saatnya untuk benar-benar memulai logika penerjemah baris ini.

214
00:13:56,230 --> 00:14:00,700
Jadi hal pertama yang harus kita lakukan mungkin adalah mengambil surat pertama karena kita perlu memeriksa

215
00:14:00,700 --> 00:14:02,380
untuk melihat apakah itu ya.

216
00:14:02,380 --> 00:14:03,220
Jadi kita akan lakukan yang berikut.

217
00:14:03,220 --> 00:14:11,260
Kami akan mengatakan bahwa huruf pertama sama dengan kata pada indeks 0 dan kami akan menganggap setiap kasus tepi aneh

218
00:14:11,260 --> 00:14:14,890
seperti orang yang melewati satu huruf sebagai string.

219
00:14:14,890 --> 00:14:20,140
Kami hanya akan berasumsi mereka mengucapkan kata-kata normal dan kami akan mengatakan huruf pertama sama dengan indeks

220
00:14:20,140 --> 00:14:20,870
kata itu.

221
00:14:21,280 --> 00:14:24,250
Jadi mari kita periksa apakah huruf pertama adalah ya.

222
00:14:24,380 --> 00:14:26,080
Dan ini bagus untuk dimasukkan dalam kode Anda.

223
00:14:26,300 --> 00:14:28,010
Jadi katakan periksa jika

224
00:14:30,740 --> 00:14:35,730
vokal jadi kita akan mengatakan huruf pertama dan mari kita benar-benar membuat pernyataan if.

225
00:14:36,210 --> 00:14:45,210
Jika huruf pertama dalam string h e i o u colon maka kita memiliki vokal di sini.

226
00:14:45,450 --> 00:14:50,230
Jadi, jika huruf pertama ini sebenarnya dalam deretan vokal ini.

227
00:14:50,370 --> 00:14:55,090
Jadi tidak, ini semacam pemeriksaan yang sama yang kami lakukan di sini dengan anjing di tali saya lebih rendah.

228
00:14:55,260 --> 00:14:59,120
Ini yang sekarang memeriksa hei adalah huruf pertama ini dalam arti string ini.

229
00:14:59,190 --> 00:15:01,340
Apakah itu dalam deretan huruf vokal.

230
00:15:01,560 --> 00:15:04,440
Yang akan kita lakukan sebenarnya adalah membangun kata.

231
00:15:04,440 --> 00:15:10,070
Jadi saya akan mengatakan kata babi sama dengan.

232
00:15:10,080 --> 00:15:16,890
Jadi, jika itu yang pertama-tama kita lakukan adalah kita meraih kata normal dan kemudian menambahkan y ke akhir

233
00:15:16,890 --> 00:15:21,960
kata itu lalu kita tahu tidak ada vokal yang sebenarnya di sana.

234
00:15:22,010 --> 00:15:31,560
Jadi yang harus kita lakukan adalah yang berikut ini akan mengatakan bahwa kata itu sama dengan kata

235
00:15:31,560 --> 00:15:41,410
dari indeks 1 sampai akhir ditambah huruf pertama ditambah Y dan kemudian pada akhir semua ini di luar

236
00:15:41,460 --> 00:15:46,650
garis bahwa jika ini kita akan mengembalikan kata pick.

237
00:15:46,670 --> 00:15:52,550
Baiklah, jadi kita punya kode di sini, mari kita periksa dan melihat apakah itu berfungsi kita akan mengatakan babi latin dan

238
00:15:52,550 --> 00:15:54,110
kemudian disahkan dan semua kata.

239
00:15:54,110 --> 00:15:57,610
Mari kita lanjutkan dan lulus kata melihat apakah itu berhasil.

240
00:15:57,650 --> 00:15:58,370
Lalu kita kembali.

241
00:15:58,370 --> 00:15:59,580
Ordway sempurna.

242
00:15:59,600 --> 00:16:04,920
Mari kita lihat apakah kita lulus atau ini atau kurang seperti Apple dan kita kembali Appling.

243
00:16:05,330 --> 00:16:10,430
Dan ini adalah bagaimana Anda dapat memecahkan masalah dasar dengan fungsi dan ini sekarang akan

244
00:16:10,430 --> 00:16:13,580
menjadi blok bangunan utama Anda ketika bekerja dengan Python.

245
00:16:13,590 --> 00:16:18,530
Jadi fungsi benar-benar akan meningkatkan kemampuan dan kita bisa lihat di sini sudah jenis masalah yang bisa kita

246
00:16:18,860 --> 00:16:19,910
pecahkan dengan mudah.

247
00:16:19,940 --> 00:16:23,810
Sekarang kita memiliki kekuatan fungsi di depan kita.

248
00:16:23,830 --> 00:16:24,120
BAIK.

249
00:16:24,140 --> 00:16:26,590
Jadi itu saja untuk pelajaran ini dalam fungsi.

250
00:16:26,660 --> 00:16:31,610
Dan Anda dapat memeriksa buku catatan untuk beberapa contoh yang lebih rumit seperti memeriksa apakah suatu bilangan prima

251
00:16:31,610 --> 00:16:36,530
dan kami benar-benar dalam buku catatan menunjukkan kepada Anda dua metode berbeda dalam menangani hal itu.

252
00:16:36,620 --> 00:16:40,590
Tetapi sekarang yang perlu kita ketahui tentang fungsi adalah bahwa kita memiliki kata kunci DFA.

253
00:16:40,790 --> 00:16:46,070
Anda memiliki nama fungsi itu sendiri parameter apa pun atau bahkan Anda ingin menyampaikan bahwa Anda memiliki logika

254
00:16:46,070 --> 00:16:51,950
kode apa pun yang indentasi dalam fungsi yang hanya memiliki titik dua di sini dan akhirnya Anda mengembalikan hasil apa

255
00:16:51,950 --> 00:16:53,550
pun yang ingin Anda kembalikan.

256
00:16:53,570 --> 00:16:54,770
Itulah dasar-dasar fungsi.

257
00:16:54,810 --> 00:16:58,280
Kita akan berlatih lebih banyak dengan mereka hanya dalam sedikit.

258
00:16:58,280 --> 00:16:59,360
Sampai jumpa di kuliah berikutnya.
