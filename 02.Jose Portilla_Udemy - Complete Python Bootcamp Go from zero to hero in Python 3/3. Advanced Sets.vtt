WEBVTT
1
1

00:00:01.532  -->  00:00:03.306
<v Narrator>Hello everyone, and welcome to</v>
2

2

00:00:03.306  -->  00:00:05.912
the Advanced Sets lecture.
3

3

00:00:05.912  -->  00:00:07.549
So in this lecture, we'll be learning about
4

4

00:00:07.549  -->  00:00:10.258
lots of different methods for sets
5

5

00:00:10.258  -->  00:00:11.990
that you may not have seen yet.
6

6

00:00:11.990  -->  00:00:13.614
And we'll start by going over the basic ones
7

7

00:00:13.614  -->  00:00:16.267
you already know and then dive a little deeper.
8

8

00:00:16.267  -->  00:00:18.845
So as always, there's a jupyter notebook that has
9

9

00:00:18.845  -->  00:00:20.411
everything we're gonna go over
10

10

00:00:20.411  -->  00:00:21.979
as well as many examples.
11

11

00:00:21.979  -->  00:00:24.090
So you can go ahead and check that out.
12

12

00:00:24.090  -->  00:00:27.322
So let's go ahead and look at Advanced Sets first.
13

13

00:00:27.322  -->  00:00:28.583
So in this lecture,
14

14

00:00:28.583  -->  00:00:31.785
we'll start with some of the basics.
15

15

00:00:31.785  -->  00:00:34.657
So we'll start with building our sets, and then
16

16

00:00:34.657  -->  00:00:36.607
how do we add things to a set.
17

17

00:00:36.607  -->  00:00:38.229
Well we just use the add method.
18

18

00:00:38.229  -->  00:00:40.853
So here I'm gonna add one to my sets.
19

19

00:00:40.853  -->  00:00:42.270
And I'll add two.
20

20

00:00:43.398  -->  00:00:47.109
And remember, a set won't take any duplicate items.
21

21

00:00:47.109  -->  00:00:50.053
It only presents them one, that's what makes it a set.
22

22

00:00:50.053  -->  00:00:52.676
So if I were to try to add two again.
23

23

00:00:52.676  -->  00:00:54.907
I only get one, two.
24

24

00:00:54.907  -->  00:00:57.621
So we know we can add with add.
25

25

00:00:57.621  -->  00:01:00.581
So we can also clear or remove all the elements
26

26

00:01:00.581  -->  00:01:03.763
from a set using the clear method.
27

27

00:01:03.763  -->  00:01:04.947
And that looks like this.
28

28

00:01:04.947  -->  00:01:07.988
So if I check my set, now it's empty.
29

29

00:01:07.988  -->  00:01:09.256
So, another interesting method
30

30

00:01:09.256  -->  00:01:11.431
that you may not have seen yet is copy,
31

31

00:01:11.431  -->  00:01:13.467
which returns a copy of the set.
32

32

00:01:13.467  -->  00:01:15.800
So to show you that example.
33

33

00:01:16.680  -->  00:01:19.868
Here I have a set one, two, three.
34

34

00:01:19.868  -->  00:01:22.749
And I'm going to set a variable called SC
35

35

00:01:22.749  -->  00:01:24.249
to a copy of that.
36

36

00:01:28.234  -->  00:01:30.252
And now SC is one, two, three.
37

37

00:01:30.252  -->  00:01:32.752
So it is a copy, so changes to the original
38

38

00:01:32.752  -->  00:01:34.165
won't affect the copy.
39

39

00:01:34.165  -->  00:01:35.582
So if I say s.add
40

40

00:01:39.558  -->  00:01:41.739
Here is my original.
41

41

00:01:41.739  -->  00:01:43.575
There's the copy.
42

42

00:01:43.575  -->  00:01:44.408
Okay.
43

43

00:01:45.452  -->  00:01:46.285
So,
44

44

00:01:47.193  -->  00:01:48.961
what about a couple of more methods
45

45

00:01:48.961  -->  00:01:50.212
that you haven't seen yet
46

46

00:01:50.212  -->  00:01:51.825
such as the difference method.
47

47

00:01:51.825  -->  00:01:54.632
So difference method is a super useful method,
48

48

00:01:54.632  -->  00:01:57.605
and it returns the difference of two or more sets.
49

49

00:01:57.605  -->  00:01:59.074
So the syntax looks like this.
50

50

00:01:59.074  -->  00:02:00.741
You provide your set
51

51

00:02:01.647  -->  00:02:03.249
called difference and then the set
52

52

00:02:03.249  -->  00:02:05.821
you wanna check the difference between.
53

53

00:02:05.821  -->  00:02:09.154
So the only difference between S and SC,
54

54

00:02:10.023  -->  00:02:11.959
is this four element.
55

55

00:02:11.959  -->  00:02:15.792
So it returns the elements that are different.
56

56

00:02:18.194  -->  00:02:20.117
And so another really interested related method
57

57

00:02:20.117  -->  00:02:21.398
is difference update,
58

58

00:02:21.398  -->  00:02:23.325
and what difference update does
59

59

00:02:23.325  -->  00:02:26.688
is the method returns set one after removing elements
60

60

00:02:26.688  -->  00:02:30.855
from set two if you have this sort of format here.
61

61

00:02:32.191  -->  00:02:33.372
So,
62

62

00:02:33.372  -->  00:02:35.565
I just copy and pasted this from the jupyter notebook.
63

63

00:02:35.565  -->  00:02:36.825
So the syntax looks like this.
64

64

00:02:36.825  -->  00:02:38.614
You have set one,
65

65

00:02:38.614  -->  00:02:41.685
you call for the difference underscore update with set2.
66

66

00:02:41.685  -->  00:02:44.189
And the method returns set1
67

67

00:02:44.189  -->  00:02:45.690
after removing all the elements
68

68

00:02:45.690  -->  00:02:47.690
that were found in set2.
69

69

00:02:48.724  -->  00:02:52.891
So I'll show you an example of what this looks like.
70

70

00:02:53.728  -->  00:02:55.895
I'll create a new set, s1.
71

71

00:02:57.832  -->  00:03:00.445
Create another new set, s2.
72

72

00:03:00.445  -->  00:03:03.918
This one'll have one, four, five.
73

73

00:03:03.918  -->  00:03:07.168
And now, if I call s1 difference update
74

74

00:03:09.499  -->  00:03:10.332
with s2.
75

75

00:03:11.747  -->  00:03:14.497
And then I'm gonna call s1 again.
76

76

00:03:16.279  -->  00:03:18.661
So note what I get back, two, three.
77

77

00:03:18.661  -->  00:03:22.161
So the matching elements between s1 and s2
78

78

00:03:23.878  -->  00:03:27.449
was the one element here, number one.
79

79

00:03:27.449  -->  00:03:29.427
And what difference_update did
80

80

00:03:29.427  -->  00:03:31.152
was it returned the first set
81

81

00:03:31.152  -->  00:03:34.159
after removing all the elements found in the second one.
82

82

00:03:34.159  -->  00:03:35.703
In which case, it would've been one,
83

83

00:03:35.703  -->  00:03:38.342
so you get back two, three.
84

84

00:03:38.342  -->  00:03:40.959
Another interesting method is the discard method.
85

85

00:03:40.959  -->  00:03:43.238
And it removes an element from a set
86

86

00:03:43.238  -->  00:03:44.618
if it's a member.
87

87

00:03:44.618  -->  00:03:47.090
So if the element's not a member it doesn't do anything.
88

88

00:03:47.090  -->  00:03:49.287
So, I'll show you what I mean by that.
89

89

00:03:49.287  -->  00:03:51.618
So, let's go ahead and check out this set.
90

90

00:03:51.618  -->  00:03:54.727
We have S, which is one, two, three, four,
91

91

00:03:54.727  -->  00:03:56.144
and I can discard
92

92

00:03:58.989  -->  00:04:01.989
let's say I discard the two element.
93

93

00:04:02.982  -->  00:04:05.317
And if it's in the set, it'll get rid of it.
94

94

00:04:05.317  -->  00:04:09.455
If it's not in the set, say 12, nothing happens.
95

95

00:04:09.455  -->  00:04:11.250
So you don't get an error if it's not in the set,
96

96

00:04:11.250  -->  00:04:13.111
something to keep in mind.
97

97

00:04:13.111  -->  00:04:14.263
Okay.
98

98

00:04:14.263  -->  00:04:15.589
Now let's go ahead and learn about
99

99

00:04:15.589  -->  00:04:17.576
the intersection method,
100

100

00:04:17.576  -->  00:04:19.916
another very useful method for sets.
101

101

00:04:19.916  -->  00:04:22.063
And what it does, it returns the intersection
102

102

00:04:22.063  -->  00:04:24.791
of two or more sets as a new set.
103

103

00:04:24.791  -->  00:04:26.946
And the intersection is just the elements
104

104

00:04:26.946  -->  00:04:28.890
that are common to all the sets.
105

105

00:04:28.890  -->  00:04:32.307
So let's go ahead and redefine s1 and s2.
106

106

00:04:33.294  -->  00:04:35.322
So one, two, three, four,
107

107

00:04:35.322  -->  00:04:39.231
and then s2 is gonna be equal to one, whoops
108

108

00:04:39.231  -->  00:04:40.481
one, two, four.
109

109

00:04:41.820  -->  00:04:42.851
Okay.
110

110

00:04:42.851  -->  00:04:44.195
And what I'm gonna do is check
111

111

00:04:44.195  -->  00:04:46.382
for the intersection of the two.
112

112

00:04:46.382  -->  00:04:47.789
And there's an intersection update method
113

113

00:04:47.789  -->  00:04:50.365
which we'll learn about in just a second.
114

114

00:04:50.365  -->  00:04:52.623
So, s1 and s2, the elements that are common
115

115

00:04:52.623  -->  00:04:55.540
to both of the sets is one and two.
116

116

00:04:57.693  -->  00:04:58.526
Alright.
117

117

00:04:59.719  -->  00:05:02.655
So, intersection update will update a set
118

118

00:05:02.655  -->  00:05:06.407
with the intersection of itself and another.
119

119

00:05:06.407  -->  00:05:08.907
So if I try this method on s1.
120

120

00:05:12.625  -->  00:05:15.287
Notice s1 is one, two, three.
121

121

00:05:15.287  -->  00:05:18.954
But if I say s1 intersection update with s2,
122

122

00:05:21.444  -->  00:05:24.027
it will actually update set one
123

123

00:05:25.103  -->  00:05:29.247
to be equal to the intersection of set one with s2.
124

124

00:05:29.247  -->  00:05:31.789
So s1 was one, two, three,
125

125

00:05:31.789  -->  00:05:34.198
and now it's gonna be with intersection update,
126

126

00:05:34.198  -->  00:05:36.614
equal to, whoops, that intersection.
127

127

00:05:36.614  -->  00:05:38.804
So now if I check s1 it's one, two.
128

128

00:05:38.804  -->  00:05:40.378
So let me just break that down
129

129

00:05:40.378  -->  00:05:43.167
cause I know it's a lot of ones and twos that I'm saying.
130

130

00:05:43.167  -->  00:05:46.695
So originally, set one was the numbers one, two, three,
131

131

00:05:46.695  -->  00:05:50.467
and set two was the numbers one, two, four.
132

132

00:05:50.467  -->  00:05:51.951
So the intersection, or the elements
133

133

00:05:51.951  -->  00:05:53.587
that are in common between them
134

134

00:05:53.587  -->  00:05:55.237
are the numbers one and two,
135

135

00:05:55.237  -->  00:05:56.839
that's their intersection.
136

136

00:05:56.839  -->  00:05:58.546
And with intersection update
137

137

00:05:58.546  -->  00:06:00.876
it basically makes the first set
138

138

00:06:00.876  -->  00:06:03.116
equal to that intersection.
139

139

00:06:03.116  -->  00:06:05.374
So if I check it again here after the update,
140

140

00:06:05.374  -->  00:06:07.513
I just get one, two back.
141

141

00:06:07.513  -->  00:06:09.118
Okay.
142

142

00:06:09.118  -->  00:06:12.707
So, now we're gonna check a method called
143

143

00:06:12.707  -->  00:06:14.449
isdisjoint.
144

144

00:06:14.449  -->  00:06:16.949
So I'm gonna create a few sets
145

145

00:06:17.867  -->  00:06:19.490
to show you how it works.
146

146

00:06:19.490  -->  00:06:20.805
So I'm gonna create three sets.
147

147

00:06:20.805  -->  00:06:22.555
s1, so it's one, two.
148

148

00:06:23.475  -->  00:06:26.440
I'll create s2, which is one, two, four.
149

149

00:06:26.440  -->  00:06:29.690
And let's say s3 is equal to just five.
150

150

00:06:31.305  -->  00:06:32.138
Okay.
151

151

00:06:33.371  -->  00:06:35.298
So, this method was gonna return true
152

152

00:06:35.298  -->  00:06:38.949
if the two sets have a null intersection.
153

153

00:06:38.949  -->  00:06:40.532
So for instance, s1
154

154

00:06:42.306  -->  00:06:43.223
is disjoint
155

155

00:06:45.687  -->  00:06:46.520
s2.
156

156

00:06:48.436  -->  00:06:50.519
Is going to return false.
157

157

00:06:52.017  -->  00:06:54.192
Which makes sense because they did have an intersection.
158

158

00:06:54.192  -->  00:06:57.509
They have one, the elements number one and number two
159

159

00:06:57.509  -->  00:07:00.056
are in common between the first two sets.
160

160

00:07:00.056  -->  00:07:03.275
Now, for instance, s1, and s3 here,
161

161

00:07:03.275  -->  00:07:05.319
don't have any things in common.
162

162

00:07:05.319  -->  00:07:07.226
So they don't have an intersection
163

163

00:07:07.226  -->  00:07:09.626
which means they have a null intersection.
164

164

00:07:09.626  -->  00:07:13.043
So if I was to say s1 isdisjoint with s3,
165

165

00:07:14.637  -->  00:07:16.170
I should get true,
166

166

00:07:16.170  -->  00:07:19.792
because they do have a null intersection.
167

167

00:07:19.792  -->  00:07:22.518
Another interesting method is is subset.
168

168

00:07:22.518  -->  00:07:24.368
And the method reports whether another set
169

169

00:07:24.368  -->  00:07:26.138
contains this set.
170

170

00:07:26.138  -->  00:07:29.952
So if I look at what s1 equals, it's one, two.
171

171

00:07:29.952  -->  00:07:33.042
If I look at what s2 equals, it's one, two, four.
172

172

00:07:33.042  -->  00:07:36.263
So you notice s1 is a subset of s2,
173

173

00:07:36.263  -->  00:07:38.790
and we can check that by asking
174

174

00:07:38.790  -->  00:07:41.707
is subset with the is subset method
175

175

00:07:42.652  -->  00:07:44.989
and this will return true.
176

176

00:07:44.989  -->  00:07:46.903
And then basically the reverse of that
177

177

00:07:46.903  -->  00:07:48.523
is is superset.
178

178

00:07:48.523  -->  00:07:50.590
So the method reports whether the set
179

179

00:07:50.590  -->  00:07:52.028
contains another set.
180

180

00:07:52.028  -->  00:07:55.712
So I can reverse this and say is s2
181

181

00:07:55.712  -->  00:07:57.212
is superset of s1.
182

182

00:08:00.155  -->  00:08:01.181
And that's also true,
183

183

00:08:01.181  -->  00:08:03.643
so they're just the inverse of each other.
184

184

00:08:03.643  -->  00:08:04.991
Alright.
185

185

00:08:04.991  -->  00:08:06.418
Now we're gonna learn about a method
186

186

00:08:06.418  -->  00:08:08.763
called symmetric difference.
187

187

00:08:08.763  -->  00:08:10.334
And there is also a symmetric update
188

188

00:08:10.334  -->  00:08:11.853
to go along with it.
189

189

00:08:11.853  -->  00:08:15.270
So, symmetric difference will return the,
190

190

00:08:16.205  -->  00:08:17.501
symmetric difference of two sets,
191

191

00:08:17.501  -->  00:08:18.999
and what that is it's all the elements
192

192

00:08:18.999  -->  00:08:21.442
that are exactly in one of the sets.
193

193

00:08:21.442  -->  00:08:22.645
So you can think of this as basically
194

194

00:08:22.645  -->  00:08:25.413
the opposite of the intersection.
195

195

00:08:25.413  -->  00:08:27.590
So if we have s1 that's one, two,
196

196

00:08:27.590  -->  00:08:31.298
and we have s2 that's one, two, four,
197

197

00:08:31.298  -->  00:08:35.467
then the elements that are only in one of the sets
198

198

00:08:35.467  -->  00:08:37.031
is that four element, right.
199

199

00:08:37.031  -->  00:08:41.017
So I can check for the symmetric difference.
200

200

00:08:41.017  -->  00:08:43.373
And that will return four,
201

201

00:08:43.373  -->  00:08:46.482
since that's the element that's in exactly one of the sets.
202

202

00:08:46.482  -->  00:08:48.052
Okay.
203

203

00:08:48.052  -->  00:08:50.685
And then there's also a
204

204

00:08:50.685  -->  00:08:52.668
update to go along with that as well.
205

205

00:08:52.668  -->  00:08:54.749
If you wanted to change s1
206

206

00:08:54.749  -->  00:08:58.081
into just the symmetric difference or four.
207

207

00:08:58.081  -->  00:09:01.331
Movin' along, I will now go over union.
208

208

00:09:02.476  -->  00:09:04.143
So, the union method
209

209

00:09:05.745  -->  00:09:07.646
returns the union of two sets.
210

210

00:09:07.646  -->  00:09:11.563
And that's all elements that are in either set.
211

211

00:09:13.700  -->  00:09:16.507
And that will be here in this case, one, two, four,
212

212

00:09:16.507  -->  00:09:20.619
because one, two, and four are in either set.
213

213

00:09:20.619  -->  00:09:21.659
Okay.
214

214

00:09:21.659  -->  00:09:23.031
And last but not least
215

215

00:09:23.031  -->  00:09:24.783
we'll go over the update method.
216

216

00:09:24.783  -->  00:09:28.684
And it updates a set with the union of itself and others.
217

217

00:09:28.684  -->  00:09:31.434
So that means if I said s1.update
218

218

00:09:33.028  -->  00:09:33.861
s2.
219

219

00:09:35.181  -->  00:09:37.472
If we check s1 it's now the exact same result
220

220

00:09:37.472  -->  00:09:40.684
as if we asked the union on itself
221

221

00:09:40.684  -->  00:09:42.351
and another one, s2.
222

222

00:09:43.618  -->  00:09:45.676
Okay, so you should have an at least now
223

223

00:09:45.676  -->  00:09:48.351
a complete awareness of all the methods available to you
224

224

00:09:48.351  -->  00:09:50.374
for a set object type.
225

225

00:09:50.374  -->  00:09:52.382
I personally think the data structure
226

226

00:09:52.382  -->  00:09:54.747
is under-utilized by beginners.
227

227

00:09:54.747  -->  00:09:56.191
So, try to keep it mind
228

228

00:09:56.191  -->  00:09:58.274
when you're trying to do comparisons
229

229

00:09:58.274  -->  00:10:00.288
or looking for unique values.
230

230

00:10:00.288  -->  00:10:03.343
The data structure itself is extremely useful,
231

231

00:10:03.343  -->  00:10:04.942
and let's just take a brief overview
232

232

00:10:04.942  -->  00:10:07.275
of everything we learned as far as methods.
233

233

00:10:07.275  -->  00:10:09.356
So, we know about the add method
234

234

00:10:09.356  -->  00:10:11.181
which adds elements to a set.
235

235

00:10:11.181  -->  00:10:13.754
The clear method which removes all elements from a set.
236

236

00:10:13.754  -->  00:10:16.621
The copy method returns the copy of a set.
237

237

00:10:16.621  -->  00:10:18.194
The difference returns the difference
238

238

00:10:18.194  -->  00:10:21.228
of two or more sets, has that syntax.
239

239

00:10:21.228  -->  00:10:22.689
Remember there's a lot of update methods
240

240

00:10:22.689  -->  00:10:26.606
which will change the first set in that method.
241

241

00:10:27.615  -->  00:10:30.149
The discard which removes an element from a set
242

242

00:10:30.149  -->  00:10:31.685
if it's a member.
243

243

00:10:31.685  -->  00:10:33.749
If the element's not a member it doesn't do anything,
244

244

00:10:33.749  -->  00:10:36.087
so it won't throw up an error.
245

245

00:10:36.087  -->  00:10:37.448
Intersection returns the intersection
246

246

00:10:37.448  -->  00:10:39.245
of two or more sets, which is just the elements
247

247

00:10:39.245  -->  00:10:42.173
that are in common to all of the sets.
248

248

00:10:42.173  -->  00:10:44.010
Also has an update method.
249

249

00:10:44.010  -->  00:10:48.161
Isdisjoint returns true if they have a null intersection,
250

250

00:10:48.161  -->  00:10:49.966
so they don't share any elements.
251

251

00:10:49.966  -->  00:10:53.650
Issubset reports whether another set contains that set.
252

252

00:10:53.650  -->  00:10:56.317
Issuperset, the inverse of that.
253

253

00:10:57.658  -->  00:10:59.902
Symmetric difference will return all elements
254

254

00:10:59.902  -->  00:11:03.440
that are in exactly only one of the sets.
255

255

00:11:03.440  -->  00:11:06.136
And then you can update it as well.
256

256

00:11:06.136  -->  00:11:08.034
Union returns the union of two sets,
257

257

00:11:08.034  -->  00:11:10.940
with all elements that are in either set.
258

258

00:11:10.940  -->  00:11:13.199
And then update will update a set
259

259

00:11:13.199  -->  00:11:15.473
with the union of itself and whatever others
260

260

00:11:15.473  -->  00:11:17.982
you pass in as arguments.
261

261

00:11:17.982  -->  00:11:18.980
Okay.
262

262

00:11:18.980  -->  00:11:21.562
So, that's it for the advanced sets lecture.
263

263

00:11:21.562  -->  00:11:23.200
Thank you, and good job.
264

264

00:11:23.200  -->  00:11:25.448
I'll see you at the next lecture.
