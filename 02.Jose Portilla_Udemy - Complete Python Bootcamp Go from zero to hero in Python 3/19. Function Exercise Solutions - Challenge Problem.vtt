WEBVTT
1
00:00:05.460 --> 00:00:07.430
Selamat datang kembali semua orang di kuliah ini.

2
00:00:07.440 --> 00:00:11.890
Kami akan menyelesaikan dengan mengatasi masalah yang menantang dan kami akan mulai dengan

3
00:00:11.890 --> 00:00:12.660
Spike lagi.

4
00:00:12.810 --> 00:00:18.450
Sekarang Spike pada awalnya tampak mirip dengan get 33 kecuali dalam kasus ini kami ingin menulis fungsi

5
00:00:18.450 --> 00:00:24.380
yang mengambil daftar bilangan bulat dan mengembalikan true jika mengandung Double-O 7 secara berurutan dan benar-benar berarti secara

6
00:00:24.430 --> 00:00:27.520
berurutan dan kami menunjukkan bahwa contoh kedua di sini.

7
00:00:27.750 --> 00:00:32.070
Jadi contoh pertama ini yang dapat Anda lihat di sini memiliki dua kali lipat 0 7 atau 0 0 7 secara berurutan.

8
00:00:32.070 --> 00:00:33.580
Jadi itu mengembalikan benar.

9
00:00:33.600 --> 00:00:39.660
Sekarang Anda juga akan melihat bahwa yang kedua memiliki dua nol muncul sebelum 7 yang juga berarti benar.

10
00:00:39.900 --> 00:00:42.120
Jadi A7 ganda ini tidak harus berurutan.

11
00:00:42.120 --> 00:00:44.870
Bisa juga bekerja seperti ini 0 0 7.

12
00:00:44.940 --> 00:00:48.350
Dan di sini Anda dapat melihat kami memiliki 7 0 0 sehingga mengembalikan false.

13
00:00:48.780 --> 00:00:55.500
Jadi mari kita lihat bagaimana kita benar-benar bisa mendekati masalah ini, kita akan mengatakan fungsi permainan mata-mata dan diperlukan

14
00:00:55.500 --> 00:00:57.310
beberapa nomor pelajaran di dalamnya.

15
00:00:57.330 --> 00:01:01.470
Jadi segera kita tahu bahwa kita harus melalui masing-masing angka-angka ini dan

16
00:01:01.470 --> 00:01:02.710
melakukan semacam pemeriksaan.

17
00:01:02.730 --> 00:01:07.920
Jadi sesuatu yang mungkin baik untuk dikatakan mati rasa.

18
00:01:08.130 --> 00:01:11.970
Dan saat ini kita dapat mengatakan lulus hanya placeholder kecil ketika kita memikirkan hal ini.

19
00:01:12.060 --> 00:01:16.430
Saya ingin memeriksa apakah dua nol muncul sebelum tujuh.

20
00:01:16.440 --> 00:01:23.950
Jadi ada banyak cara yang bisa kita lakukan ini tetapi salah satu caranya adalah dengan mengatur daftar kode dalam daftar kode

21
00:01:23.950 --> 00:01:30.600
kita itu akan menjadi 0 0 7 dan kemudian beberapa string SOL tambahan memiliki X di sana.

22
00:01:30.600 --> 00:01:36.630
Dan apa yang akan kita lakukan adalah kita akan memeriksa setiap angka dalam daftar ini dan jika

23
00:01:36.630 --> 00:01:40.970
kita menekan item pertama dalam daftar kita akan melanjutkan dan hanya menghapusnya.

24
00:01:41.400 --> 00:01:51.550
Jadi yang saya maksud dengan ini adalah jika saya mengatakan Fortnum dan angka jika angka saya saat ini sama dengan item pertama dalam kode, apa

25
00:01:51.640 --> 00:01:57.920
yang akan saya katakan sama dengan item pertama dalam kode jadi kode pada indeks 0.

26
00:01:57.940 --> 00:02:04.490
Saya akan mengambil daftar kode itu dan menghapus item pertama itu.

27
00:02:04.510 --> 00:02:06.030
Jadi apa artinya ini sebenarnya.

28
00:02:06.040 --> 00:02:11.140
Ini berarti ketika saya mengulangi daftar ini saya memeriksa nomor dan mengatakan hei adalah angka ini sama dengan

29
00:02:11.140 --> 00:02:16.300
nomor pertama dalam daftar kode ini sehingga Anda dapat membayangkan untuk kasus pertama akhirnya mencapai nol dan saya

30
00:02:16.630 --> 00:02:19.180
katakan ya saya punya pertandingan 0 dan 0.

31
00:02:19.180 --> 00:02:23.360
Jadi apa yang saya lakukan adalah saya mematikan indeks pada 0.

32
00:02:23.410 --> 00:02:25.040
Itu berarti saya mematikan 0.

33
00:02:25.210 --> 00:02:27.430
Jadi iterasi kode selanjutnya terlihat seperti ini.

34
00:02:27.430 --> 00:02:35.420
Kami memiliki 0 7 dan kemudian beberapa string X. Dan kemudian jika saya mendapatkan pertandingan lain maka saya muncul lagi.

35
00:02:35.530 --> 00:02:44.860
Jadi saya akan mendapatkan tujuh string x dan kemudian jika saya lepas satu kali lagi berarti saya cocok 007 dalam

36
00:02:44.860 --> 00:02:50.150
urutan berturut-turut maka saya hanya akan memiliki daftar panjang 1

37
00:02:50.200 --> 00:02:55.750
Jadi perhatikan di sini kita memiliki panjang sama dengan 1 dan Anda juga bisa memeriksa apakah panjangnya kosong atau sesuatu seperti

38
00:02:55.750 --> 00:02:57.650
itu tetapi akan melakukan panjang ke 1.

39
00:02:57.670 --> 00:03:01.130
Supaya lebih mudah dimengerti.

40
00:03:01.190 --> 00:03:09.130
Jadi di sini saya hanya akan mengembalikan panjang kode saya setelah menjalankannya untuk satu loop sama dengan 1.

41
00:03:09.140 --> 00:03:13.250
Jadi mari kita telusuri ini sekali lagi karena kodenya sedikit aneh pada awalnya tetapi jika kita

42
00:03:13.250 --> 00:03:15.110
memecah logika itu akan masuk akal.

43
00:03:15.110 --> 00:03:21.770
Saya memiliki daftar kode ini dan memiliki 0 0 7 dan beberapa string tambahan dan saya akan memeriksa setiap angka

44
00:03:21.770 --> 00:03:22.950
dalam daftar ini.

45
00:03:22.950 --> 00:03:27.580
Sekarang saya akan periksa apakah angka itu sama dengan indeks kode 0.

46
00:03:27.860 --> 00:03:32.230
Jika itu masalahnya maka saya akan menghapus item pertama dalam kode.

47
00:03:32.240 --> 00:03:34.010
Jadi pertama-tama sekarang mulai dari nol.

48
00:03:34.010 --> 00:03:36.750
Itu berarti tidak ada kode yang sama dengan 0 7 x.

49
00:03:36.770 --> 00:03:41.410
Jadi saya terus melakukannya untuk satu lingkaran dan saya periksa, hei, Anda tahu saya memiliki nomor yang disebut kode ini

50
00:03:41.500 --> 00:03:42.300
nol, ini nol.

51
00:03:42.300 --> 00:03:44.420
Sekarang jika itu benar maka saya mematikannya.

52
00:03:44.450 --> 00:03:47.150
Dan sekarang tanpa mantel saya terlihat seperti ini 7 x.

53
00:03:47.150 --> 00:03:52.310
Jadi saya terus berkeliling sampai saya melihat bahwa 7 dan saya katakan hei jika tujuh sama dengan item pertama

54
00:03:52.310 --> 00:03:55.400
dan saya bisa daftar tujuh di sini dan pop 7 itu.

55
00:03:55.460 --> 00:04:00.860
Dan jika saya bisa melalui seluruh empat loop ini dan akhirnya saya karena ini adalah daftar bilangan bulat saya punya

56
00:04:00.860 --> 00:04:03.710
string di sini dan itu akan menjadi daftar panjang 1

57
00:04:03.920 --> 00:04:11.270
Kemudian jika panjang kodenya sama dengan yang saya tahu saya punya 007 atau dua kali lipat A7 agar kita bisa

58
00:04:11.270 --> 00:04:12.840
memeriksanya dengan menjalankan ini.

59
00:04:12.980 --> 00:04:14.920
Mari kita ambil beberapa contoh ini.

60
00:04:14.990 --> 00:04:17.120
Jalankan mereka, kita kembali.

61
00:04:17.120 --> 00:04:18.140
Benar.

62
00:04:18.380 --> 00:04:19.810
Mari kita jalankan yang kedua.

63
00:04:19.820 --> 00:04:26.350
Kita juga harus kembali dan mari kita jalankan yang ketiga yang seharusnya mengembalikan false

64
00:04:29.350 --> 00:04:30.180
OK.

65
00:04:30.190 --> 00:04:34.360
Jadi sekali lagi ini sedikit lebih menantang karena kami harus menggunakan

66
00:04:34.360 --> 00:04:38.970
struktur data luar dan menggunakan logika untuk mengetahui cara terbaik untuk menemukan angka-angka berturut-turut.

67
00:04:38.980 --> 00:04:41.230
Ada banyak cara berbeda yang bisa Anda lakukan untuk mendekati yang satu ini.

68
00:04:41.230 --> 00:04:43.900
Merasa bebas untuk berbagi metode lain dalam cuniform.

69
00:04:44.260 --> 00:04:45.520
OK, pertanyaan selanjutnya adalah.

70
00:04:45.520 --> 00:04:50.500
Hitung bilangan prima yang akan menulis fungsi yang mengembalikan jumlah bilangan prima yang ada hingga dan

71
00:04:50.560 --> 00:04:55.240
termasuk bilangan tertentu dan secara konvensional akan memperlakukan 0 dan 1 sebagai bilangan prima.

72
00:04:55.240 --> 00:04:57.080
Jadi bagaimana kita sebenarnya mendekati ini.

73
00:04:57.330 --> 00:05:04.820
Kita akan mulai dengan mengatakan hitungan matematika bilangan prima dan kita berikan sejumlah angka.

74
00:05:04.920 --> 00:05:07.420
Jadi itu akan menjadi bilangan bulat itu sendiri.

75
00:05:07.430 --> 00:05:12.030
Sekarang karena kita memperlakukan 0 dan 1 tidak prima, kita mungkin akan memeriksa cepat untuk mereka.

76
00:05:12.080 --> 00:05:16.560
Jadi saya tidak akan mengatakan jika jumlah orang yang dimasukkan kurang dari dua.

77
00:05:16.610 --> 00:05:19.520
Berarti nol atau 1 atau angka negatif.

78
00:05:19.520 --> 00:05:21.190
Kami hanya akan mengembalikan 0.

79
00:05:21.440 --> 00:05:32.860
Jadi ini adalah cek kami untuk 0 atau 1 dan masukkan sekarang jika kita belum kembali setelah cek ini maka kita tahu kita sedang berhadapan dengan

80
00:05:32.860 --> 00:05:41.140
angka yang dua atau lebih besar sekarang untuk dirinya sendiri adalah bilangan prima dan saya ingin membuat daftar

81
00:05:41.140 --> 00:05:43.360
untuk melacak bilangan prima.

82
00:05:43.390 --> 00:05:44.820
Jadi inilah yang akan saya lakukan.

83
00:05:44.860 --> 00:05:48.580
Dan ini semacam trik pintar yang membuat ini menantang.

84
00:05:48.580 --> 00:05:52.430
Saya akan memulai daftar saya yang disebut bilangan prima dengan nomor dua di dalamnya.

85
00:05:53.460 --> 00:05:58.890
Dan kemudian saya akan mengatur variabel x sama dengan 3 dan kapan saya akan melakukannya.

86
00:05:59.100 --> 00:06:07.590
Tidak akan terus menambahkan ke X sampai saya menekan nomor input dan kami akan memeriksa apakah X akhirnya menjadi prima atau

87
00:06:07.590 --> 00:06:08.060
tidak.

88
00:06:08.070 --> 00:06:09.970
Jadi itu menunjukkan maksud saya dengan itu.

89
00:06:10.050 --> 00:06:15.510
Jadi kita sudah tahu bahwa jika kita telah melewati itu jika pernyataan gagal maka atau berurusan dengan dua atau lebih besar dan kita

90
00:06:16.530 --> 00:06:17.730
punya daftar di sini.

91
00:06:17.730 --> 00:06:19.490
Biarkan saya memperbesar sedikit di sini.

92
00:06:19.560 --> 00:06:22.370
Kami memiliki A-list untuk menyimpan nomor utama kami.

93
00:06:25.360 --> 00:06:33.490
Dan kemudian kita memiliki semacam akan mengatakan keluar semacam counter counter yang naik ke input dan

94
00:06:36.440 --> 00:06:50.180
kita akan mengatakan sementara X kurang atau sama dengan jumlah input saya akan mengatakan untuk y dalam kisaran dari 3 sepanjang jalan naik ke nomor saat ini

95
00:06:50.180 --> 00:06:54.890
x dan kemudian kita akan mengambil langkah ukuran dua.

96
00:06:54.890 --> 00:07:00.350
Alasan kami mengambil langkah ukuran dua di sini adalah karena bahkan angka di atas dua kita sudah tahu bahwa mereka

97
00:07:00.350 --> 00:07:04.610
tidak akan memiliki kesempatan untuk menjadi prima karena mereka bahkan angka semua akan dapat dibagi

98
00:07:04.610 --> 00:07:05.390
oleh dua.

99
00:07:05.690 --> 00:07:09.050
Jadi yang kami lakukan di sini adalah kami memiliki X yang merupakan penghitung ini.

100
00:07:09.350 --> 00:07:12.220
Dan kemudian kita mengatakan OK semacam subproblem di sini.

101
00:07:12.230 --> 00:07:25.280
Kita perlu memeriksa apakah X itu sendiri adalah prima Jadi X akan melalui setiap angka hingga nomor input.

102
00:07:25.670 --> 00:07:30.370
Dan kemudian di sini kita perlu memeriksa apakah X prima.

103
00:07:30.440 --> 00:07:39.670
Jadi simpan untuk y dalam kisaran dari 3 hingga X dan bahkan langkah-langkah karena kita hanya ingin

104
00:07:41.200 --> 00:07:46.950
memeriksanya atau apakah x mod Y sama dengan nol.

105
00:07:48.710 --> 00:07:53.360
Maka kita tahu kita tidak memiliki nomor genap di sana atau permisi kita tahu kita

106
00:07:53.870 --> 00:08:02.230
tidak memiliki nomor utama di sana sehingga yang akan kita lakukan adalah menambah X jenis menambahkan ke akun kita dan kita akan keluar dari ini untuk loop.

107
00:08:02.240 --> 00:08:03.100
Jadi ini untuk loop.

108
00:08:03.110 --> 00:08:10.370
Yang perlu dilakukan adalah memeriksa apakah X adalah prima karena akan melalui setiap angka dalam rentang 3 hingga x

109
00:08:10.370 --> 00:08:13.920
atau x akan melalui setiap angka hingga nomor input.

110
00:08:13.970 --> 00:08:15.740
Jadi ini memeriksa apakah X prima.

111
00:08:15.740 --> 00:08:22.550
Kita katakan jika angka x itu selalu terbagi rata dengan salah satu dari angka-angka ini dan rentangnya maka kita tahu itu bukan bilangan prima

112
00:08:22.550 --> 00:08:28.400
dan kita akan menambahkan hitungan ke jenis lompatan ke depan melewati angka genap itu dan kemudian kita akan keluar dari

113
00:08:28.400 --> 00:08:31.690
ini untuk loop karena kita sudah selesai memeriksa apakah X prima.

114
00:08:31.910 --> 00:08:38.180
Namun, jika kita berhasil melewati seluruh empat loop itu dan kita tidak benar-benar berakhir,

115
00:08:38.720 --> 00:08:42.480
maka kita memiliki nomor utama di suatu tempat.

116
00:08:42.590 --> 00:08:47.310
Jadi yang ingin kita lakukan adalah mengambil bilangan prima itu dan menambahkannya ke daftar bilangan prima kita.

117
00:08:47.510 --> 00:08:53.540
Dan inilah yang membuat masalah menjadi menantang adalah Anda bisa menggunakan pernyataan Else dan ini adalah sesuatu

118
00:08:53.540 --> 00:08:55.240
yang unik untuk Python.

119
00:08:55.250 --> 00:08:59.690
Sekarang ELSE saya sebenarnya berbaris empat saya bukan dengan IF saya di sini.

120
00:08:59.690 --> 00:09:02.550
Itu karena saya memiliki istirahat dalam 4 saya.

121
00:09:02.570 --> 00:09:10.130
Jadi apa lagi yang dikatakan di sini adalah jika saya melalui seluruh empat loop ini dan saya tidak pernah putus maka pernyataan

122
00:09:10.220 --> 00:09:11.290
ini akan dijalankan.

123
00:09:11.420 --> 00:09:16.040
Dan lagi sesuatu yang unik untuk Python sebelum kita belum membicarakannya sebelumnya

124
00:09:16.040 --> 00:09:19.260
yang membuat masalah ini sebagai bonus tantangan.

125
00:09:19.340 --> 00:09:20.940
Jadi itu yang terjadi.

126
00:09:21.050 --> 00:09:23.770
Artinya kami memeriksa dan kami tidak pernah keluar dari ini.

127
00:09:23.780 --> 00:09:25.540
Jadi X sebenarnya prima.

128
00:09:25.670 --> 00:09:32.150
Kami akan mengambil daftar bilangan prima kami dan kami akan menambahkan nomor x untuk itu dan kemudian kami melompat maju.

129
00:09:33.170 --> 00:09:39.260
Lewati bahwa bilangan genap akan mengatakan X tidak sama dengan x plus sama dengan 2.

130
00:09:39.350 --> 00:09:45.260
Dan setelah semua ini selesai kita akan mencetak daftar bilangan prima dan kemudian kita akan

131
00:09:45.260 --> 00:09:50.660
kembali apa pertanyaan sebenarnya yang panjang berapa banyak nomor prima yang ada.

132
00:09:50.690 --> 00:09:52.270
Jadi mereka dengan cepat melewati logika di sini.

133
00:09:52.280 --> 00:09:58.390
Sekali lagi kami pertama memeriksa nol pada satu input dengan mengatakan jika angka kurang dari 2 mengembalikan 0 lalu mengatakan Tidak,

134
00:09:58.450 --> 00:10:03.670
saya sedang berhadapan dengan angka dua atau lebih besar, saya akan mulai menghitung bilangan prima saya dengan bilangan

135
00:10:03.680 --> 00:10:06.420
dua di sana jadi saya bisa mulai dengan tiga.

136
00:10:06.500 --> 00:10:12.830
Dan bonus memulai dengan tiga berarti saya dapat menggunakan ukuran langkah dua dan itu ditunjukkan di sini dari rentang

137
00:10:12.830 --> 00:10:17.440
3 x 2 serta ketika saya menambahkan dua ke hitungan X saya ..

138
00:10:17.630 --> 00:10:23.390
Jika saya akhirnya keluar dari salah satu dari empat loop ini atau trik atau pernyataan lain karena

139
00:10:23.390 --> 00:10:28.910
saya melewatkan semua angka genap itu sebabnya kami memiliki plus sama dengan di sini dan di mana

140
00:10:28.910 --> 00:10:35.220
kami mengambil langkah kisaran Dan kemudian semua yang kita lakukan adalah kita akan melalui X sampai ke nomor itu

141
00:10:35.470 --> 00:10:37.110
untuk memeriksa perdana X.

142
00:10:37.260 --> 00:10:40.620
Dan jika tidak jika itu adalah makna utama kami tidak pernah keluar dari ini.

143
00:10:40.650 --> 00:10:45.210
Kita akan menambahkannya ke daftar utama dan menambahkan dua ke hitungan kita dan terus

144
00:10:45.210 --> 00:10:46.590
melalui loop sementara ini.

145
00:10:46.590 --> 00:10:52.220
Sekarang kita akan meletakkan semua bilangan prima kita dan mengembalikan panjang bilangan prima sehingga kita menjalankan ini dan kita katakan

146
00:10:53.350 --> 00:10:54.990
count adalah call count prime.

147
00:10:54.990 --> 00:10:56.500
Jadi Anda berada di 100.

148
00:10:56.580 --> 00:11:00.910
Dapatkan kembali daftar bilangan prima dan kami dapatkan kembali angkanya 25.

149
00:11:00.920 --> 00:11:05.780
Sekarang ada trik pintar yang dapat Anda tambahkan ke ini dan faktanya adalah

150
00:11:05.930 --> 00:11:10.240
Anda sebenarnya tidak perlu memeriksa setiap nomor hingga x tahun saja.

151
00:11:10.340 --> 00:11:14.330
Ingatlah bahwa Anda sebenarnya sudah menyimpan daftar bilangan prima di sini.

152
00:11:14.630 --> 00:11:22.490
Jadi Anda bisa mengatakan untuk y di dan bukannya mengatakan kisaran 3 x 2 Anda bisa mengatakan untuk y di bilangan prima.

153
00:11:22.640 --> 00:11:27.010
Jadi, manfaatkan bilangan prima yang Anda kumpulkan saat Anda melanjutkan.

154
00:11:27.020 --> 00:11:33.110
Jadi tidak mengatakan untuk y dan bilangan prima periksa dengan X maade salah satu bilangan prima ini sama dengan nol.

155
00:11:33.620 --> 00:11:35.900
Dan itulah yang bisa kita lakukan X adalah yang utama.

156
00:11:35.900 --> 00:11:37.240
Periksa di sana.

157
00:11:37.280 --> 00:11:40.390
Perlu diingat ini harus melakukan lebih banyak matematika saya percaya daripada coding.

158
00:11:40.400 --> 00:11:43.460
Jadi jika ini adalah perjuangan untuk Anda jangan terlalu khawatir tentang hal itu.

159
00:11:43.460 --> 00:11:49.910
Ini lebih merupakan masalah matematika tantangan daripada masalah program tantangan saya akan mengatakan terutama karena ini adalah

160
00:11:49.910 --> 00:11:50.980
masalah tantangan.

161
00:11:50.980 --> 00:11:51.950
Ini bonus.

162
00:11:51.950 --> 00:11:56.150
Dan Anda masih belum cukup pada tingkat keterampilan di mana Anda dapat mengatasi dua masalah secara bersamaan.

163
00:11:56.150 --> 00:12:00.110
Satu adalah masalah pemrograman yang sangat sulit dan yang lainnya adalah masalah matematika yang sangat sulit.

164
00:12:00.110 --> 00:12:03.870
Jadi ini menggabungkan keduanya yang membuatnya sangat menantang.

165
00:12:03.890 --> 00:12:10.330
Namun jika Anda benar-benar menyukai masalah semacam ini saya akan memeriksa adalah proyek oli atau proyek E U L

166
00:12:10.580 --> 00:12:16.310
E R yang memiliki satu ton jenis masalah matematika yang secara umum hanya dapat diselesaikan dengan

167
00:12:16.310 --> 00:12:16.820
pengkodean.

168
00:12:16.830 --> 00:12:20.420
Jadi kami memeriksa situs web jika Anda benar-benar menikmati yang ini.

169
00:12:20.420 --> 00:12:24.460
Jika Anda benar-benar tersesat dalam matematika ini karena matematika yang berat ini, jangan khawatir.

170
00:12:24.470 --> 00:12:26.590
Itu sebabnya ini masalah tantangan.

171
00:12:26.600 --> 00:12:27.160
BAIK.

172
00:12:27.410 --> 00:12:30.300
Jadi itu saja untuk dua masalah tantangan ini.

173
00:12:30.320 --> 00:12:32.370
Kami juga memiliki masalah hanya untuk bersenang-senang.

174
00:12:32.390 --> 00:12:36.590
Itu tidak benar-benar nyata itu hanya mencetak fungsi untuk mengambil satu huruf.

175
00:12:36.590 --> 00:12:40.190
Jadi saya akan membawanya dari notebook itu sendiri.

176
00:12:40.190 --> 00:12:44.960
Jadi ini hanya untuk bersenang-senang dan pada dasarnya Anda harus membuat semacam kamus yang akan

177
00:12:44.960 --> 00:12:46.130
mencetak huruf-huruf ini.

178
00:12:46.130 --> 00:12:50.720
Dan karena itu kami hanya bisa mengatakan ABC e di sini sebagai contoh.

179
00:12:50.720 --> 00:12:56.810
Segala sesuatu yang Anda harus cetak secara manual tetapi itu hanya sebuah gagasan tentang bagaimana Anda

180
00:12:56.870 --> 00:13:00.500
bisa mencetak grafik yang sebenarnya menggunakan kode Python.

181
00:13:00.710 --> 00:13:04.290
Dan kita akan mendapatkan ide nanti tentang menggunakan proyek mouse pertama Anda.

182
00:13:04.430 --> 00:13:07.620
Jadi, Anda dapat memiliki grafik yang dapat berinteraksi dengan pengguna.

183
00:13:07.670 --> 00:13:09.440
Mereka akan untuk papan tic tac tac Anda.

184
00:13:09.440 --> 00:13:11.430
Mereka akan mencetak nanti.

185
00:13:11.430 --> 00:13:11.780
BAIK.

186
00:13:11.810 --> 00:13:15.440
Jika Anda memiliki pertanyaan, jangan ragu untuk mengeposkan forum Q&amp;A itu tetapi kita akan lihat di kuliah berikutnya.
