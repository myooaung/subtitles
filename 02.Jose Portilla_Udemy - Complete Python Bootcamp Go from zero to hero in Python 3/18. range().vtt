WEBVTT
1
1

00:00:01.498  -->  00:00:03.376
<v Lecturer>Hello everyone and welcome to the lecture</v>
2

2

00:00:03.376  -->  00:00:05.277
on the range function.
3

3

00:00:05.277  -->  00:00:07.216
So in this short lecture we'll be discussing
4

4

00:00:07.216  -->  00:00:08.658
the range function.
5

5

00:00:08.658  -->  00:00:11.027
And we haven't developed a very deep level of knowledge
6

6

00:00:11.027  -->  00:00:13.709
on functions yet but we can understand the basics
7

7

00:00:13.709  -->  00:00:16.391
of this pretty simple function, range.
8

8

00:00:16.391  -->  00:00:19.418
It's gonna be extremely useful and you'll see a lot
9

9

00:00:19.418  -->  00:00:21.590
throughout the code
10

10

00:00:21.590  -->  00:00:24.761
so here I have the Jupyter notebook open.
11

11

00:00:24.761  -->  00:00:26.752
This is what we're gonna be going over
12

12

00:00:26.752  -->  00:00:28.306
and what's interesting is there's gonna be
13

13

00:00:28.306  -->  00:00:30.827
a pretty interesting Python 3 alert that happens
14

14

00:00:30.827  -->  00:00:34.122
and we'll be exploring what that means later on.
15

15

00:00:34.122  -->  00:00:36.682
So let's go ahead and just get started.
16

16

00:00:36.682  -->  00:00:39.323
Right now I'm working in Python 2
17

17

00:00:39.323  -->  00:00:41.656
and we're gonna use range so
18

18

00:00:43.836  -->  00:00:45.640
what the range function allows you to do;
19

19

00:00:45.640  -->  00:00:47.763
it allows you to create a list of numbers ranging
20

20

00:00:47.763  -->  00:00:51.277
from a starting point up to an ending point
21

21

00:00:51.277  -->  00:00:53.677
and then you can also specify step size
22

22

00:00:53.677  -->  00:00:57.366
so if I just write range and then click Shift+Tab,
23

23

00:00:57.366  -->  00:00:59.694
since I'm working in Python,
24

24

00:00:59.694  -->  00:01:02.065
it's gonna go ahead give you the Docstring here
25

25

00:01:02.065  -->  00:01:05.498
so you can say range give a list of integers.
26

26

00:01:05.498  -->  00:01:07.631
range
27

27

00:01:07.631  -->  00:01:10.955
so this is basically what we're gonna be going over.
28

28

00:01:10.955  -->  00:01:13.107
So I have the range function
29

29

00:01:13.107  -->  00:01:15.940
and I can give it a starting point
30

30

00:01:18.188  -->  00:01:21.021
and a stopping point so let's go ahead and run that
31

31

00:01:21.021  -->  00:01:24.162
and then it outputs a list of integers from
32

32

00:01:24.162  -->  00:01:27.107
that stop or that start, excuse me.
33

33

00:01:27.107  -->  00:01:29.688
Up to that stop but no including it.
34

34

00:01:29.688  -->  00:01:32.553
So if you've noticed, I have from 0 all the way up to 9
35

35

00:01:32.553  -->  00:01:34.676
and you can kind of think that this relates
36

36

00:01:34.676  -->  00:01:36.259
with zero-indexing.
37

37

00:01:37.275  -->  00:01:38.933
A lot of times this is confusing for beginners.
38

38

00:01:38.933  -->  00:01:42.516
They expect to have a 10 in the output list
39

39

00:01:43.355  -->  00:01:46.605
but remember, it's up to not including.
40

40

00:01:48.337  -->  00:01:52.168
Okay, so moving along, another thing you can do
41

41

00:01:52.168  -->  00:01:53.418
is just specify
42

42

00:01:54.318  -->  00:01:56.211
for the 0 there by default.
43

43

00:01:56.211  -->  00:01:59.878
I could also just put 10 or let's say 11
44

44

00:01:59.878  -->  00:02:01.715
and you can kind of think of this as;
45

45

00:02:01.715  -->  00:02:04.743
if you put in range for just a singular number,
46

46

00:02:04.743  -->  00:02:08.136
it's gonna give you from 0 up to but not including
47

47

00:02:08.136  -->  00:02:09.136
that number.
48

48

00:02:11.274  -->  00:02:14.048
Okay and just to drive the point home;
49

49

00:02:14.048  -->  00:02:15.511
that we're outputting a list,
50

50

00:02:15.511  -->  00:02:18.089
I'm gonna say, a variable x
51

51

00:02:18.089  -->  00:02:20.700
is equal to your range
52

52

00:02:20.700  -->  00:02:23.367
from 0 up to 10
53

53

00:02:25.112  -->  00:02:28.078
and then if I output x, it's gonna be a list.
54

54

00:02:28.078  -->  00:02:31.837
And another function we can use to check the type
55

55

00:02:31.837  -->  00:02:34.320
of object that is, is the type function.
56

56

00:02:34.320  -->  00:02:36.932
For the type function, you just put in
57

57

00:02:36.932  -->  00:02:39.978
type and in parentheses you enter the object
58

58

00:02:39.978  -->  00:02:43.208
and it outputs the type so we get a list out.
59

59

00:02:43.208  -->  00:02:46.754
And let's go ahead and just explore this a little further
60

60

00:02:46.754  -->  00:02:51.033
and let's say my start can be, let's say, the number five.
61

61

00:02:51.033  -->  00:02:53.450
My stop will be the number 20
62

62

00:02:54.485  -->  00:02:58.613
and I'm gonna say give me a range from start
63

63

00:02:58.613  -->  00:02:59.446
to stop
64

64

00:03:00.544  -->  00:03:04.160
and you'll notice I start at that number five and output it
65

65

00:03:04.160  -->  00:03:08.151
and I go up to but not including my stop number.
66

66

00:03:08.151  -->  00:03:12.274
Okay, so we notice how we went up to 20
67

67

00:03:12.274  -->  00:03:13.960
but not actually produce 20
68

68

00:03:13.960  -->  00:03:17.759
so it goes up to but not including just like in indexing.
69

69

00:03:17.759  -->  00:03:20.157
Something we're gonna explore now is step size
70

70

00:03:20.157  -->  00:03:22.908
so we can specify that as a third argument
71

71

00:03:22.908  -->  00:03:25.643
so I'm gonna go ahead and change my start to 0
72

72

00:03:25.643  -->  00:03:28.424
so I get the numbers 0 through 19
73

73

00:03:28.424  -->  00:03:32.530
and then as a third argument here in my range function,
74

74

00:03:32.530  -->  00:03:34.697
I can specify a step size.
75

75

00:03:36.419  -->  00:03:40.697
So here, if I enter the third number to be two,
76

76

00:03:40.697  -->  00:03:44.503
I'll go in steps of two; so basically all the even numbers
77

77

00:03:44.503  -->  00:03:47.138
up to but not including 20.
78

78

00:03:47.138  -->  00:03:49.753
So this is a useful tool later on your code
79

79

00:03:49.753  -->  00:03:53.376
when you want to produce lists of a certain range
80

80

00:03:53.376  -->  00:03:55.550
or at a certain step size.
81

81

00:03:55.550  -->  00:03:59.990
Range is going to really allow you to do that very quickly.
82

82

00:03:59.990  -->  00:04:03.145
Okay, so that's not it,
83

83

00:04:03.145  -->  00:04:04.869
we'll have a Python 3 alert.
84

84

00:04:04.869  -->  00:04:09.078
So let's go ahead and jump back to the Jupyter notebook
85

85

00:04:09.078  -->  00:04:12.205
and this is gonna be a bit of a sneak peek
86

86

00:04:12.205  -->  00:04:15.021
at introducing generators.
87

87

00:04:15.021  -->  00:04:19.208
Let's go ahead and jump to a quick brief presentation
88

88

00:04:19.208  -->  00:04:22.041
on what is actually going on here.
89

89

00:04:23.088  -->  00:04:24.866
Okay, so we're at the presentation
90

90

00:04:24.866  -->  00:04:27.375
and we're just gonna go over a brief explanation
91

91

00:04:27.375  -->  00:04:29.813
of ranges, range and xrange
92

92

00:04:29.813  -->  00:04:31.703
and Python 2 versus Python 3
93

93

00:04:31.703  -->  00:04:34.933
and how to deal with these functions.
94

94

00:04:34.933  -->  00:04:36.904
So you might have been wondering;
95

95

00:04:36.904  -->  00:04:39.557
what happens if I wanna do a huge range of numbers
96

96

00:04:39.557  -->  00:04:43.234
so if I said range from 0 to one billion;
97

97

00:04:43.234  -->  00:04:45.963
can your computer store that all in memory?
98

98

00:04:45.963  -->  00:04:47.020
And that's a great question
99

99

00:04:47.020  -->  00:04:52.009
so you can imagine if we had put range 0, a billion.
100

100

00:04:52.009  -->  00:04:55.350
Your output is going to have to save every single one
101

101

00:04:55.350  -->  00:04:58.267
of those numbers in a huge list
102

102

00:04:58.267  -->  00:05:00.489
but maybe you just wanted to do for loop
103

103

00:05:00.489  -->  00:05:02.373
for each of these numbers and then and actually need
104

104

00:05:02.373  -->  00:05:04.842
to save the entire result.
105

105

00:05:04.842  -->  00:05:06.427
So that's where generators come in
106

106

00:05:06.427  -->  00:05:10.369
and we'll have an entire section devoted to generators
107

107

00:05:10.369  -->  00:05:11.637
but right now, I'm just gonna give you kind
108

108

00:05:11.637  -->  00:05:14.663
of a sneak preview and a quick explanation of what they are.
109

109

00:05:14.663  -->  00:05:17.366
So you can think of a generator as allowing generation
110

110

00:05:17.366  -->  00:05:19.422
of these objects
111

111

00:05:19.422  -->  00:05:22.176
or sometimes called generated objects and they're provided
112

112

00:05:22.176  -->  00:05:24.492
at that instance but it doesn't store
113

113

00:05:24.492  -->  00:05:27.020
every instance generated into memory
114

114

00:05:27.020  -->  00:05:29.353
so if you use the generator,
115

115

00:05:30.788  -->  00:05:32.323
for creating that...
116

116

00:05:32.323  -->  00:05:34.293
Basically, the output of numbers,
117

117

00:05:34.293  -->  00:05:37.067
you wouldn't have to store each single one of those numbers
118

118

00:05:37.067  -->  00:05:40.196
so for instance if you wanted to get all the numbers
119

119

00:05:40.196  -->  00:05:42.379
from 0 to a billion, use them once
120

120

00:05:42.379  -->  00:05:43.914
and then toss them aside,
121

121

00:05:43.914  -->  00:05:45.736
that's where a generator can come in to play.
122

122

00:05:45.736  -->  00:05:49.523
You wouldn't have to save those billion numbers in a list.
123

123

00:05:49.523  -->  00:05:51.364
So, like I was saying, this means the generator
124

124

00:05:51.364  -->  00:05:53.131
is not gonna create a list to generate,
125

125

00:05:53.131  -->  00:05:55.856
like range does but instead, provide a one time generation
126

126

00:05:55.856  -->  00:05:59.066
of all the numbers in that range.
127

127

00:05:59.066  -->  00:06:02.123
So, specifically for Python 2.
128

128

00:06:02.123  -->  00:06:05.304
Python 2 has a built-in range generator
129

129

00:06:05.304  -->  00:06:07.791
and it's called xrange
130

130

00:06:07.791  -->  00:06:11.237
and it's recommended to use xrange for for loops
131

131

00:06:11.237  -->  00:06:13.045
in Python 2.
132

132

00:06:13.045  -->  00:06:16.467
So, in Python 2, the normal range function
133

133

00:06:16.467  -->  00:06:17.982
it's going to output a list
134

134

00:06:17.982  -->  00:06:20.800
and it's gonna save all those numbers into memory.
135

135

00:06:20.800  -->  00:06:23.073
xrange will generate elements
136

136

00:06:23.073  -->  00:06:25.675
but not save them into memory.
137

137

00:06:25.675  -->  00:06:28.500
Now, if you're using Python 3,
138

138

00:06:28.500  -->  00:06:30.846
the normal range is already a generator
139

139

00:06:30.846  -->  00:06:33.702
and you don't need to worry about using xrange .
140

140

00:06:33.702  -->  00:06:37.379
You only ever just use range and that's it.
141

141

00:06:37.379  -->  00:06:39.134
Okay, so let's go ahead and hop back to the code
142

142

00:06:39.134  -->  00:06:43.301
and see some examples of what I'm trying to explain here.
143

143

00:06:44.986  -->  00:06:45.903
So, let's go ahead and start off
144

144

00:06:45.903  -->  00:06:48.655
with a simple for loop example.
145

145

00:06:48.655  -->  00:06:50.072
So I'm gonna say,
146

146

00:06:50.960  -->  00:06:53.543
let's go ahead and make a list.
147

147

00:06:54.779  -->  00:06:58.779
Equal to one, two, three, four, five.
148

148

00:07:00.285  -->  00:07:03.618
Then I'm gonna say for num in l my list,
149

149

00:07:05.315  -->  00:07:06.815
go ahead and print
150

150

00:07:07.661  -->  00:07:09.591
that number, that num.
151

151

00:07:09.591  -->  00:07:11.663
Okay, perfect.
152

152

00:07:11.663  -->  00:07:12.963
Now, you remember earlier,
153

153

00:07:12.963  -->  00:07:16.375
we set x equal to this output
154

154

00:07:16.375  -->  00:07:19.078
of the range function and we were able to get a list.
155

155

00:07:19.078  -->  00:07:20.599
So now, let's go ahead and do that.
156

156

00:07:20.599  -->  00:07:22.349
So instead of the l,
157

157

00:07:22.349  -->  00:07:25.640
I'm gonna go ahead and say range
158

158

00:07:25.640  -->  00:07:28.941
from one to...
159

159

00:07:28.941  -->  00:07:30.885
up to but not including six.
160

160

00:07:30.885  -->  00:07:32.998
So I'm saying now for num in that range.
161

161

00:07:32.998  -->  00:07:34.319
Remember that outputs a list,
162

162

00:07:34.319  -->  00:07:36.115
go ahead and print that num.
163

163

00:07:36.115  -->  00:07:37.779
Shift+Enter to run that cell and you notice
164

164

00:07:37.779  -->  00:07:39.731
it gets the exact same result
165

165

00:07:39.731  -->  00:07:41.802
and let me go ahead and change that slightly
166

166

00:07:41.802  -->  00:07:44.262
so you can see that it's actually running.
167

167

00:07:44.262  -->  00:07:47.675
Okay, so change that back to six.
168

168

00:07:47.675  -->  00:07:51.027
So that's an example of just the regular range function
169

169

00:07:51.027  -->  00:07:52.642
in Python 2.
170

170

00:07:52.642  -->  00:07:55.717
Now something to note; is that Python is actually saving
171

171

00:07:55.717  -->  00:08:00.634
this and creating an entire list with these numbers.
172

172

00:08:00.634  -->  00:08:04.947
So what if you wanted to do some gigantic range?
173

173

00:08:04.947  -->  00:08:05.947
You wouldn't wanna run this
174

174

00:08:05.947  -->  00:08:08.506
because now you're gonna take up a huge amount of memory
175

175

00:08:08.506  -->  00:08:10.506
with that gigantic list.
176

176

00:08:11.392  -->  00:08:14.980
So that's where the xrange comes into play.
177

177

00:08:14.980  -->  00:08:17.662
So if I use xrange
178

178

00:08:17.662  -->  00:08:19.611
I'm going to generate those numbers
179

179

00:08:19.611  -->  00:08:21.726
but not actually save them.
180

180

00:08:21.726  -->  00:08:23.667
So, let's go ahead and see what this looks like.
181

181

00:08:23.667  -->  00:08:26.459
I'm gonna go xrange from,
182

182

00:08:26.459  -->  00:08:29.111
let's say the numbers one through 10.
183

183

00:08:29.111  -->  00:08:33.704
I run this and you'll notice the output is really similar.
184

184

00:08:33.704  -->  00:08:35.237
It's the same almost.
185

185

00:08:35.237  -->  00:08:37.045
Just the fact that the range is different.
186

186

00:08:37.045  -->  00:08:39.495
So let's go ahead and go back to six
187

187

00:08:39.495  -->  00:08:41.515
and you'll notice, as far as this for loop's concerned,
188

188

00:08:41.515  -->  00:08:43.435
nothing's really changed
189

189

00:08:43.435  -->  00:08:45.791
but now let's go ahead and just look at what's going on
190

190

00:08:45.791  -->  00:08:48.543
if I were to type xrange,
191

191

00:08:48.543  -->  00:08:50.710
one through six by itself.
192

192

00:08:51.582  -->  00:08:54.040
Notice, my output is just xrange
193

193

00:08:54.040  -->  00:08:56.750
and let's go ahead and check the type of that
194

194

00:08:56.750  -->  00:09:01.720
so I'm gonna say x is equal to the xrange one to six
195

195

00:09:01.720  -->  00:09:04.377
and if I ask for the type,
196

196

00:09:04.377  -->  00:09:06.685
you'll notice now, the type is xrange.
197

197

00:09:06.685  -->  00:09:09.102
It's actually a generator now
198

198

00:09:11.143  -->  00:09:12.925
and if I were to set
199

199

00:09:12.925  -->  00:09:13.758
let's say
200

200

00:09:14.673  -->  00:09:17.423
x2 as range
201

201

00:09:18.289  -->  00:09:19.122
one to six
202

202

00:09:20.077  -->  00:09:22.832
and I check the type of x2,
203

203

00:09:22.832  -->  00:09:24.904
that's actually a list
204

204

00:09:24.904  -->  00:09:26.649
so the main take away here;
205

205

00:09:26.649  -->  00:09:28.590
is that for Python 2,
206

206

00:09:28.590  -->  00:09:31.559
if you're using range
207

207

00:09:31.559  -->  00:09:33.387
in the fashion if a for loop
208

208

00:09:33.387  -->  00:09:36.764
and you actually don't need to save that entire list,
209

209

00:09:36.764  -->  00:09:38.917
go ahead and make sure you use xrange
210

210

00:09:38.917  -->  00:09:41.823
to not have to waste memory.
211

211

00:09:41.823  -->  00:09:43.256
For really small...
212

212

00:09:43.256  -->  00:09:46.026
Let's say like anywhere in the thousands
213

213

00:09:46.026  -->  00:09:48.652
or tens of thousands; that's not gonna be a big deal.
214

214

00:09:48.652  -->  00:09:51.151
Especially with how much RAM computers have these days
215

215

00:09:51.151  -->  00:09:53.171
but it's good practise to use xrange
216

216

00:09:53.171  -->  00:09:54.524
and to know what's going on when you're reading
217

217

00:09:54.524  -->  00:09:56.069
someone else's code.
218

218

00:09:56.069  -->  00:09:58.130
Now, if you're using Python 3,
219

219

00:09:58.130  -->  00:10:00.711
basically, you don't have to worry about this anymore
220

220

00:10:00.711  -->  00:10:04.612
and range is xrange.
221

221

00:10:04.612  -->  00:10:07.291
Okay, so one last thing;
222

222

00:10:07.291  -->  00:10:11.223
remember x was xrange type
223

223

00:10:11.223  -->  00:10:15.481
so what will happen if we try to cast this as a list,
224

224

00:10:15.481  -->  00:10:17.364
using the list function?
225

225

00:10:17.364  -->  00:10:19.446
Then we have the output
226

226

00:10:19.446  -->  00:10:21.672
that we would've gotten from range
227

227

00:10:21.672  -->  00:10:25.035
so we can actually confirm this
228

228

00:10:25.035  -->  00:10:27.392
by checking that x2 is equal to
229

229

00:10:27.392  -->  00:10:29.975
this xrange casted into a list.
230

230

00:10:30.936  -->  00:10:33.894
Okay, so I know this was a little advanced
231

231

00:10:33.894  -->  00:10:37.002
but don't worry, we're gonna go over iteration
232

232

00:10:37.002  -->  00:10:39.673
and generation in much more detail
233

233

00:10:39.673  -->  00:10:41.705
but I just wanted you to be aware
234

234

00:10:41.705  -->  00:10:44.590
of essentially this Python 3 alert
235

235

00:10:44.590  -->  00:10:47.251
where there's a difference between range and xrange
236

236

00:10:47.251  -->  00:10:49.728
in Python 2 but in Python 3,
237

237

00:10:49.728  -->  00:10:52.656
this range function has become that generator
238

238

00:10:52.656  -->  00:10:55.488
and it's not gonna save that entire list into memory
239

239

00:10:55.488  -->  00:10:57.918
and if you wanted to save that entire list into memory,
240

240

00:10:57.918  -->  00:10:59.602
you'd have to cast it using something
241

241

00:10:59.602  -->  00:11:02.132
that looks like this list.
242

242

00:11:02.132  -->  00:11:04.460
Okay, so that's it for range.
243

243

00:11:04.460  -->  00:11:06.336
Just a quick overview.
244

244

00:11:06.336  -->  00:11:09.011
If you ever find yourself trying to make a list
245

245

00:11:09.011  -->  00:11:11.542
of integers in some sort of sequence,
246

246

00:11:11.542  -->  00:11:15.443
keep in mind range and xrange are good options there
247

247

00:11:15.443  -->  00:11:17.646
and you'll see them a tonne in your code
248

248

00:11:17.646  -->  00:11:19.627
and in other people's code.
249

249

00:11:19.627  -->  00:11:21.416
Alright, that's it for this lesson
250

250

00:11:21.416  -->  00:11:24.499
and I'll see you at the next lecture.
