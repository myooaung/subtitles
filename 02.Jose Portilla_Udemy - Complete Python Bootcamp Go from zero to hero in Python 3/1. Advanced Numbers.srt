1
1

00:00:01,814  -->  00:00:02,647
<v Instructor>Hello everyone,</v>
2

2

00:00:02,647  -->  00:00:04,869
and welcome to the Advanced Numbers lecture.
3

3

00:00:04,869  -->  00:00:06,860
In this lecture we're gonna go over
4

4

00:00:06,860  -->  00:00:09,410
a few more representations of numbers in Python
5

5

00:00:09,410  -->  00:00:12,038
and then a few of the built in methods
6

6

00:00:12,038  -->  00:00:14,162
that have to do with numbers in Python.
7

7

00:00:14,162  -->  00:00:18,329
Should be a pretty brief lecture, but an interesting one.
8

8

00:00:19,664  -->  00:00:21,090
Just going through the Jupyter notebook,
9

9

00:00:21,090  -->  00:00:22,844
we're gonna look at hexadecimal,
10

10

00:00:22,844  -->  00:00:25,767
representation of numbers, binary representations of numbers
11

11

00:00:25,767  -->  00:00:30,498
and then a couple of built in functions for numbers.
12

12

00:00:30,498  -->  00:00:33,590
In case you're not familiar with hexadecimal formatting
13

13

00:00:33,590  -->  00:00:35,538
or binary formatting, I went ahead
14

14

00:00:35,538  -->  00:00:38,698
and linked the Wikipedia pages for both those formats,
15

15

00:00:38,698  -->  00:00:41,578
and you can check them out, as far as the
16

16

00:00:41,578  -->  00:00:44,026
descriptions and how they actually work here.
17

17

00:00:44,026  -->  00:00:46,108
So, I won't be teaching you what
18

18

00:00:46,108  -->  00:00:48,181
hexadecimal numbers actually are,
19

19

00:00:48,181  -->  00:00:49,606
what binary numbers actually are,
20

20

00:00:49,606  -->  00:00:51,289
you can go ahead and read about that
21

21

00:00:51,289  -->  00:00:53,673
on the Wikipedia page yourself.
22

22

00:00:53,673  -->  00:00:55,706
I figured these two topics are
23

23

00:00:55,706  -->  00:00:58,000
only useful if you're familiar with
24

24

00:00:58,000  -->  00:01:01,130
the computer science topics or in your math classes
25

25

00:01:01,130  -->  00:01:04,381
and were curious on how to do it in Python.
26

26

00:01:04,381  -->  00:01:07,341
Quick overview on how to do them in Python,
27

27

00:01:07,341  -->  00:01:10,841
for hexadecimal numbers, you call it, hex,
28

28

00:01:12,027  -->  00:01:15,110
built in function and it will convert
29

29

00:01:16,260  -->  00:01:20,105
numbers into the hexadecimal representation of numbers.
30

30

00:01:20,105  -->  00:01:22,351
For instance, if I call 12 there,
31

31

00:01:22,351  -->  00:01:26,518
it returns the hexadecimal, a representation of that number
32

32

00:01:28,651  -->  00:01:32,568
and let's just do another one such as, 512
33

33

00:01:32,568  -->  00:01:35,318
and there's another representation of it.
34

34

00:01:35,318  -->  00:01:38,589
If you're interested in binary representation in numbers,
35

35

00:01:38,589  -->  00:01:41,112
you can use the bin function and
36

36

00:01:41,112  -->  00:01:44,673
that will return the binary representation of some numbers.
37

37

00:01:44,673  -->  00:01:46,696
For instance, we just go for some classics,
38

38

00:01:46,696  -->  00:01:49,613
just 128s or 512, you can see those
39

39

00:01:52,207  -->  00:01:54,626
in the binary representations of those numbers,
40

40

00:01:54,626  -->  00:01:57,231
if you're familiar with binary representation.
41

41

00:01:57,231  -->  00:02:01,398
Okay, now let's go over some more common built-in functions,
42

42

00:02:02,282  -->  00:02:05,615
so we know that we can call to the power
43

43

00:02:06,741  -->  00:02:10,908
using two asterisks, but there's also a function for that,
44

44

00:02:12,116  -->  00:02:16,283
so you can code, pow and it will do the same thing.
45

45

00:02:17,832  -->  00:02:20,332
If you put in three arguments,
46

46

00:02:21,966  -->  00:02:24,799
such as this, what will happen is,
47

47

00:02:25,944  -->  00:02:28,076
the third argument will be treated as mod,
48

48

00:02:28,076  -->  00:02:30,469
so with two arguments, it's the equivalent
49

49

00:02:30,469  -->  00:02:33,624
of x to the power of y, x and y are your
50

50

00:02:33,624  -->  00:02:35,526
first and second, respectively.
51

51

00:02:35,526  -->  00:02:38,192
But with three arguments, it's equivalent to
52

52

00:02:38,192  -->  00:02:40,692
x to the power of y, mod z and
53

53

00:02:43,122  -->  00:02:46,971
this just has to do with some efficiency cases.
54

54

00:02:46,971  -->  00:02:48,952
In case you're interested in why there's
55

55

00:02:48,952  -->  00:02:51,608
a whole built in function for that.
56

56

00:02:51,608  -->  00:02:54,581
Now, there's also an absolute value function,
57

57

00:02:54,581  -->  00:02:56,688
which is abs, which will return the absolute
58

58

00:02:56,688  -->  00:02:59,938
value of a number that you put into it.
59

59

00:03:01,494  -->  00:03:03,576
There's also the round function,
60

60

00:03:03,576  -->  00:03:05,401
and it'll round the number to a given precision
61

61

00:03:05,401  -->  00:03:07,331
in decimal points, and by default, it's zero,
62

62

00:03:07,331  -->  00:03:11,487
so following it to around, let's say 3.1,
63

63

00:03:11,487  -->  00:03:15,154
it will round it off to zero decimal points.
64

64

00:03:16,387  -->  00:03:18,718
For instance, to make it clear,
65

65

00:03:18,718  -->  00:03:20,882
if I also put in just three, it rounds it off
66

66

00:03:20,882  -->  00:03:24,465
to zero decimal points, or if I put in 3.9,
67

67

00:03:25,798  -->  00:03:29,890
it rounds it off to zero decimal points here, to just four.
68

68

00:03:29,890  -->  00:03:31,738
Okay, interesting to note though,
69

69

00:03:31,738  -->  00:03:33,404
it always returns a floating point number,
70

70

00:03:33,404  -->  00:03:35,839
which is why you're seeing that point zero there.
71

71

00:03:35,839  -->  00:03:39,371
You can also specify how many digits you want
72

72

00:03:39,371  -->  00:03:41,512
after decimal points, so for instance,
73

73

00:03:41,512  -->  00:03:45,578
if you had the longer representation of pi,
74

74

00:03:45,578  -->  00:03:48,687
let's say, you only wanted to see
75

75

00:03:48,687  -->  00:03:51,604
two decimal places past the points,
76

76

00:03:53,367  -->  00:03:56,247
you can add that in as a second argument.
77

77

00:03:56,247  -->  00:03:59,440
Okay, that's really all there is for the advanced numbers,
78

78

00:03:59,440  -->  00:04:03,185
should have been a pretty brief and straightforward topic,
79

79

00:04:03,185  -->  00:04:05,854
main takeaways are, there's the hex and bin functions
80

80

00:04:05,854  -->  00:04:08,860
for you, in case you're interested in that.
81

81

00:04:08,860  -->  00:04:11,948
There's also these built in functions, abs,
82

82

00:04:11,948  -->  00:04:14,365
round and also pow, for power
83

83

00:04:16,061  -->  00:04:18,269
and Python also has a built in math library,
84

84

00:04:18,269  -->  00:04:19,639
which maybe useful to play around
85

85

00:04:19,639  -->  00:04:21,131
in case you're ever in need of
86

86

00:04:21,131  -->  00:04:23,403
some more mathematical operations.
87

87

00:04:23,403  -->  00:04:26,195
Okay, and as always, here's the Jupyter notebook
88

88

00:04:26,195  -->  00:04:27,612
because that goes along with this lecture,
89

89

00:04:27,612  -->  00:04:28,859
for you to check out.
90

90

00:04:28,859  -->  00:04:33,026
Alright, thanks everyone, I'll see you at the next lecture.
