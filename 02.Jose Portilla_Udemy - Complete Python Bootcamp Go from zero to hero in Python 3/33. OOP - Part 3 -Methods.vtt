WEBVTT
1
1

00:00:01.630  -->  00:00:04.520
<v Instructor>Hello everyone and welcome to the third video</v>
2

2

00:00:04.520  -->  00:00:08.049
in the Object Oriented Programming section of this course.
3

3

00:00:08.049  -->  00:00:11.372
In this course we're going to dive deeper into methods.
4

4

00:00:11.372  -->  00:00:13.732
So I've used that term methods
5

5

00:00:13.732  -->  00:00:16.332
and you can think of it as basically when you're
6

6

00:00:16.332  -->  00:00:20.163
constructing the function syntaxes within that class,
7

7

00:00:20.163  -->  00:00:21.913
that D-E-F,
8

8

00:00:22.791  -->  00:00:26.702
and to put it more formally, you can think of methods
9

9

00:00:26.702  -->  00:00:29.834
not just as functions to find inside the body class,
10

10

00:00:29.834  -->  00:00:32.362
but they're used to perform operations
11

11

00:00:32.362  -->  00:00:34.472
with the attributes of our objects.
12

12

00:00:34.472  -->  00:00:38.841
And methods are used in the encapsulation concept
13

13

00:00:38.841  -->  00:00:42.152
of the Object Oriented Programming paradigm.
14

14

00:00:42.152  -->  00:00:45.182
And encapsulation, basically, allows you to
15

15

00:00:45.182  -->  00:00:47.635
divide responsibilities in programming
16

16

00:00:47.635  -->  00:00:51.852
and it allows you to handle really large applications.
17

17

00:00:51.852  -->  00:00:54.490
So, for the most part, you can basically
18

18

00:00:54.490  -->  00:00:57.838
think of methods as functions acting on the object
19

19

00:00:57.838  -->  00:01:00.383
that take the object itself into account
20

20

00:01:00.383  -->  00:01:02.143
through that self argument.
21

21

00:01:02.143  -->  00:01:06.524
So what we're gonna do now is create a circle class.
22

22

00:01:06.524  -->  00:01:10.634
Or a circle object, using the class keyword.
23

23

00:01:10.634  -->  00:01:12.716
And we're gonna be using a tonne of methods
24

24

00:01:12.716  -->  00:01:14.907
and this should really drive home a lot of
25

25

00:01:14.907  -->  00:01:16.374
what we've been learning about
26

26

00:01:16.374  -->  00:01:20.265
as far as objects, methods, and instantiation.
27

27

00:01:20.265  -->  00:01:23.225
So I'm gonna create a class
28

28

00:01:23.225  -->  00:01:24.058
called Circle.
29

29

00:01:24.058  -->  00:01:24.891
Capital c.
30

30

00:01:25.915  -->  00:01:29.325
I pass in the object as a keyword.
31

31

00:01:29.325  -->  00:01:30.908
And now I put pass.
32

32

00:01:32.255  -->  00:01:35.446
So we have our really basic circle class.
33

33

00:01:35.446  -->  00:01:37.779
So what do I wanna do first?
34

34

00:01:39.556  -->  00:01:41.376
If you remember from the last video
35

35

00:01:41.376  -->  00:01:44.756
we had class object attributes.
36

36

00:01:44.756  -->  00:01:48.156
And that was the species class object attribute
37

37

00:01:48.156  -->  00:01:49.355
for that dog class.
38

38

00:01:49.355  -->  00:01:51.144
So remember all dogs are mammals.
39

39

00:01:51.144  -->  00:01:52.916
So we would put that first.
40

40

00:01:52.916  -->  00:01:55.456
So here I'm gonna put any,
41

41

00:01:55.456  -->  00:01:56.706
remember, class
42

42

00:01:57.872  -->  00:01:58.705
object
43

43

00:02:00.081  -->  00:02:00.998
attributes.
44

44

00:02:03.014  -->  00:02:07.603
So something that's true for any instance of the class.
45

45

00:02:07.603  -->  00:02:09.128
So what's true for circles?
46

46

00:02:09.128  -->  00:02:10.545
Well, for circles
47

47

00:02:11.704  -->  00:02:15.156
in general we know pi is always a constant, right?
48

48

00:02:15.156  -->  00:02:18.337
And so I'm gonna put, as a class object attribute,
49

49

00:02:18.337  -->  00:02:20.004
pi is equal to 3.14.
50

50

00:02:22.127  -->  00:02:25.768
And I'm gonna actually embed that into the circle class.
51

51

00:02:25.768  -->  00:02:28.708
Now, it doesn't make a whole lotta sense
52

52

00:02:28.708  -->  00:02:32.088
that pi is part of the circle but it's nice
53

53

00:02:32.088  -->  00:02:34.227
that we can have it as an instance
54

54

00:02:34.227  -->  00:02:35.979
of this class object attribute.
55

55

00:02:35.979  -->  00:02:39.237
To show that it's the same no matter what kind of circle
56

56

00:02:39.237  -->  00:02:41.375
or how large of a circle you're building.
57

57

00:02:41.375  -->  00:02:45.656
So I've rounded it off to the .14 two decimal places.
58

58

00:02:45.656  -->  00:02:48.796
And now what I'm gonna do is get started with,
59

59

00:02:48.796  -->  00:02:51.005
remember, our special method the first one.
60

60

00:02:51.005  -->  00:02:53.887
This underscore underscore I-N-I-T.
61

61

00:02:53.887  -->  00:02:56.164
This initiation method.
62

62

00:02:56.164  -->  00:02:58.244
Remember I always put in self
63

63

00:02:58.244  -->  00:03:01.535
whenever I'm putting a method inside a class.
64

64

00:03:01.535  -->  00:03:03.952
And let's just say pass here.
65

65

00:03:07.027  -->  00:03:10.860
And let's go ahead and make a circle called c.
66

66

00:03:12.674  -->  00:03:16.576
Okay, so we have our circle. Super simple.
67

67

00:03:16.576  -->  00:03:19.127
So what do we want to add to this circle?
68

68

00:03:19.127  -->  00:03:22.007
Well we know circles have a radius, right?
69

69

00:03:22.007  -->  00:03:25.266
Now a radius would be an attribute of a circle.
70

70

00:03:25.266  -->  00:03:27.516
So I'm gonna put in radius.
71

71

00:03:29.225  -->  00:03:32.894
And by default I'll set the radius equal to one.
72

72

00:03:32.894  -->  00:03:34.444
So in case I don't pass a radius
73

73

00:03:34.444  -->  00:03:38.033
it'll automatically set that to one.
74

74

00:03:38.033  -->  00:03:40.275
So now I'll say self.radius,
75

75

00:03:40.275  -->  00:03:44.275
the attribute of the circle, is equal to radius.
76

76

00:03:45.405  -->  00:03:46.565
Okay.
77

77

00:03:46.565  -->  00:03:48.032
So now if I have my circle.
78

78

00:03:48.032  -->  00:03:51.792
I just ran all three of these cells.
79

79

00:03:51.792  -->  00:03:54.863
If I put tab I can ask for pi from the circle
80

80

00:03:54.863  -->  00:03:57.173
and it'll always give me back 3.14
81

81

00:03:57.173  -->  00:03:58.851
no matter how big the circle is.
82

82

00:03:58.851  -->  00:04:02.273
And now I can also ask for tab radius.
83

83

00:04:02.273  -->  00:04:04.714
And the radius of this circle is one.
84

84

00:04:04.714  -->  00:04:07.135
Now I could have made another circle
85

85

00:04:07.135  -->  00:04:08.534
of a radius of whatever I wanted.
86

86

00:04:08.534  -->  00:04:10.182
Maybe 100.
87

87

00:04:10.182  -->  00:04:11.474
And note now when I run that cell
88

88

00:04:11.474  -->  00:04:13.964
and ask for the radius it gives me 100.
89

89

00:04:13.964  -->  00:04:15.797
But when I ask for pi,
90

90

00:04:16.640  -->  00:04:20.370
still, since it's a class object attribute defined outside
91

91

00:04:20.370  -->  00:04:22.870
of any of these methods so far
92

92

00:04:24.804  -->  00:04:26.274
it's gonna be the same
93

93

00:04:26.274  -->  00:04:30.284
no matter what other attributes the object has.
94

94

00:04:30.284  -->  00:04:31.302
Okay.
95

95

00:04:31.302  -->  00:04:33.469
So now let's start another
96

96

00:04:35.963  -->  00:04:37.518
method.
97

97

00:04:37.518  -->  00:04:40.226
So again, methods are basically functions within
98

98

00:04:40.226  -->  00:04:45.135
an object that have a reference to the object itself.
99

99

00:04:45.135  -->  00:04:49.683
So let's make a method that calculates the area of a circle.
100

100

00:04:49.683  -->  00:04:51.850
So I'll call this def area
101

101

00:04:52.965  -->  00:04:56.298
and I always pass in the self arguments.
102

102

00:04:57.632  -->  00:04:59.847
And so what is the area of a circle?
103

103

00:04:59.847  -->  00:05:02.356
Well the area of circle will be,
104

104

00:05:02.356  -->  00:05:04.206
and I'm gonna put in in comments here,
105

105

00:05:04.206  -->  00:05:07.129
it's gonna be the radius squared.
106

106

00:05:07.129  -->  00:05:07.962
Right?
107

107

00:05:11.299  -->  00:05:15.715
Multiplied, I'll put an asterisk here, by pi.
108

108

00:05:15.715  -->  00:05:16.548
Right?
109

109

00:05:16.548  -->  00:05:19.323
Pi r squared is the radius of a circle.
110

110

00:05:19.323  -->  00:05:21.892
Or, excuse me, is the area of a circle.
111

111

00:05:21.892  -->  00:05:23.225
So, if I ask for
112

112

00:05:25.053  -->  00:05:27.386
the area of my Circle object
113

113

00:05:28.635  -->  00:05:30.885
I'm going to want to return
114

114

00:05:32.365  -->  00:05:33.198
radius
115

115

00:05:34.801  -->  00:05:35.634
squared
116

116

00:05:36.980  -->  00:05:38.620
times pi.
117

117

00:05:38.620  -->  00:05:42.203
But remember, radius isn't clear enough for
118

118

00:05:43.618  -->  00:05:44.489
Python here.
119

119

00:05:44.489  -->  00:05:45.868
It needs to know which radius.
120

120

00:05:45.868  -->  00:05:49.701
And that's why I'm going to input self.radius.
121

121

00:05:51.289  -->  00:05:53.860
Since radius isn't actually defined anywhere
122

122

00:05:53.860  -->  00:05:55.822
except as a class attribute.
123

123

00:05:55.822  -->  00:05:59.135
So self.radius lets Python know,
124

124

00:05:59.135  -->  00:06:02.377
hey, take the radius, or this attributes,
125

125

00:06:02.377  -->  00:06:04.217
of this current object.
126

126

00:06:04.217  -->  00:06:06.365
And we can do the same with pi.
127

127

00:06:06.365  -->  00:06:08.698
And now this will work well.
128

128

00:06:10.188  -->  00:06:13.488
And actually, excuse me, for this self to stop pi,
129

129

00:06:13.488  -->  00:06:15.338
remember, it's not a normal attribute
130

130

00:06:15.338  -->  00:06:17.354
it's a class object attribute.
131

131

00:06:17.354  -->  00:06:20.687
So it's actually gonna call from Circle.
132

132

00:06:22.189  -->  00:06:24.410
So if I run that.
133

133

00:06:24.410  -->  00:06:27.071
Create a circle for radius 100.
134

134

00:06:27.071  -->  00:06:29.321
Now I can ask for its area.
135

135

00:06:31.146  -->  00:06:34.278
Close parenthesis since this is a method not an attribute.
136

136

00:06:34.278  -->  00:06:36.711
And it returns the area for me.
137

137

00:06:36.711  -->  00:06:40.942
Okay, so let's break down what's actually happening here.
138

138

00:06:40.942  -->  00:06:43.543
From the top. I have my class.
139

139

00:06:43.543  -->  00:06:45.993
Capitalised Circle. Pass an object.
140

140

00:06:45.993  -->  00:06:48.233
We have class object attributes.
141

141

00:06:48.233  -->  00:06:51.113
These are referenced for any instance of Circle.
142

142

00:06:51.113  -->  00:06:53.484
It'll always have these be true.
143

143

00:06:53.484  -->  00:06:56.734
So Circle.pi will always be 3.14. Okay.
144

144

00:06:58.173  -->  00:07:00.635
Then I have my init, this special method,
145

145

00:07:00.635  -->  00:07:03.534
which initiates all the attributes of my class.
146

146

00:07:03.534  -->  00:07:06.385
And in this case I only have one other than self.
147

147

00:07:06.385  -->  00:07:08.422
Which is the radius.
148

148

00:07:08.422  -->  00:07:10.770
And then I have a method within my class as well.
149

149

00:07:10.770  -->  00:07:12.769
Which looks just like a function.
150

150

00:07:12.769  -->  00:07:16.511
And in this case it only takes in the self arguments.
151

151

00:07:16.511  -->  00:07:19.361
And it's gonna be the radius squared times pi.
152

152

00:07:19.361  -->  00:07:23.528
So I'm gonna return the self.radius, this attribute,
153

153

00:07:25.024  -->  00:07:28.524
squared times this class object attribute.
154

154

00:07:29.894  -->  00:07:32.727
Which is Circle.pi. Okay, perfect.
155

155

00:07:34.244  -->  00:07:35.827
So now let's go ahead and build
156

156

00:07:35.827  -->  00:07:39.237
on top of what we're thinking about.
157

157

00:07:39.237  -->  00:07:42.849
And let's say I wanted to reset the radius.
158

158

00:07:42.849  -->  00:07:45.049
How would I do that?
159

159

00:07:45.049  -->  00:07:47.382
I could make another method.
160

160

00:07:48.529  -->  00:07:50.529
I'll call it set_radius.
161

161

00:07:53.898  -->  00:07:56.481
It'll take self as an argument.
162

162

00:07:57.550  -->  00:08:00.800
And it will also take, let's call this,
163

163

00:08:02.269  -->  00:08:04.436
new_radius as an argument.
164

164

00:08:06.399  -->  00:08:08.148
And what is this gonna do?
165

165

00:08:08.148  -->  00:08:10.799
It's gonna be a method you can call in your circle,
166

166

00:08:10.799  -->  00:08:13.328
set_radius, that takes in an argument.
167

167

00:08:13.328  -->  00:08:14.648
A new radius.
168

168

00:08:14.648  -->  00:08:18.998
And then it will reset its self.radius attribute.
169

169

00:08:18.998  -->  00:08:23.165
And the way we can do that is just by saying self dot--
170

170

00:08:24.258  -->  00:08:28.008
Self.radius is then equal to that new radius.
171

171

00:08:29.976  -->  00:08:32.527
Okay, so I ran that cell.
172

172

00:08:32.527  -->  00:08:37.003
So now let's make a circle, c, that has a radius of 10.
173

173

00:08:37.003  -->  00:08:38.955
Let's go ahead and check its area.
174

174

00:08:38.955  -->  00:08:39.788
314.
175

175

00:08:41.194  -->  00:08:44.804
And now if you notice I have this set radius.
176

176

00:08:44.804  -->  00:08:45.637
And
177

177

00:08:46.624  -->  00:08:51.024
if I put shift-tab tells me the type, string form, file.
178

178

00:08:51.024  -->  00:08:54.243
I can actually add a docstring in here
179

179

00:08:54.243  -->  00:08:57.384
just like I could for a function.
180

180

00:08:57.384  -->  00:08:58.217
And say
181

181

00:08:59.881  -->  00:09:00.798
this method
182

182

00:09:03.310  -->  00:09:04.727
takes in a radius
183

183

00:09:06.799  -->  00:09:07.966
and resets the
184

184

00:09:09.924  -->  00:09:12.341
current radius of the circle.
185

185

00:09:15.096  -->  00:09:16.263
Okay, perfect.
186

186

00:09:17.462  -->  00:09:18.962
Let's go ahead and
187

187

00:09:20.163  -->  00:09:21.576
take that.
188

188

00:09:21.576  -->  00:09:22.743
Run that cell.
189

189

00:09:23.956  -->  00:09:26.577
Create the circle. Check its area again.
190

190

00:09:26.577  -->  00:09:29.327
And now if I click shift-tab here
191

191

00:09:30.208  -->  00:09:33.079
you'll notice I can expand it.
192

192

00:09:33.079  -->  00:09:35.619
Get the definition and see this method,
193

193

00:09:35.619  -->  00:09:38.385
the docstring there, that I wrote.
194

194

00:09:38.385  -->  00:09:39.552
Perfect. Okay.
195

195

00:09:40.469  -->  00:09:43.450
So now set_radius. What's my current radius?
196

196

00:09:43.450  -->  00:09:45.841
Well, I have c right?
197

197

00:09:45.841  -->  00:09:47.391
And I can check its attribute.
198

198

00:09:47.391  -->  00:09:50.061
Its current radius is 10.
199

199

00:09:50.061  -->  00:09:52.703
So I'm going to use my new method I just created
200

200

00:09:52.703  -->  00:09:54.559
to set the radius
201

201

00:09:54.559  -->  00:09:56.059
to, let's say, 20.
202

202

00:09:58.869  -->  00:10:02.369
And now if I check the radius of my circle
203

203

00:10:03.232  -->  00:10:04.482
it's set to 20.
204

204

00:10:05.511  -->  00:10:07.821
So, that's how we're basically building out
205

205

00:10:07.821  -->  00:10:12.713
our own methods for the objects we're able to create.
206

206

00:10:12.713  -->  00:10:13.796
And one more.
207

207

00:10:14.660  -->  00:10:19.422
Let's just say we wanted a method for getting radius.
208

208

00:10:19.422  -->  00:10:22.051
That was strictly a method not an attribute.
209

209

00:10:22.051  -->  00:10:25.634
I could just say something like get_radius.
210

210

00:10:27.683  -->  00:10:29.282
Remember all methods within a class
211

211

00:10:29.282  -->  00:10:32.112
have to take self as an argument.
212

212

00:10:32.112  -->  00:10:35.293
And I will just return self.radius.
213

213

00:10:35.293  -->  00:10:38.323
So this is essentially the same as just calling radius.
214

214

00:10:38.323  -->  00:10:41.095
But I just wanna make it explicitly a method
215

215

00:10:41.095  -->  00:10:43.095
instead of an attribute.
216

216

00:10:44.044  -->  00:10:45.663
So I'm gonna create in Circle again.
217

217

00:10:45.663  -->  00:10:47.295
Check the area.
218

218

00:10:47.295  -->  00:10:48.212
It's radius
219

219

00:10:49.964  -->  00:10:50.916
is 10.
220

220

00:10:50.916  -->  00:10:53.666
And I can also now use get_radius
221

221

00:10:55.991  -->  00:10:57.630
to get the same number out.
222

222

00:10:57.630  -->  00:10:59.488
Notice how radius, since it's an attribute,
223

223

00:10:59.488  -->  00:11:01.508
doesn't have the parentheses.
224

224

00:11:01.508  -->  00:11:03.267
But since get_radius is a method
225

225

00:11:03.267  -->  00:11:05.184
it does need these parentheses to signify
226

226

00:11:05.184  -->  00:11:07.516
I'm not passing in any arguments.
227

227

00:11:07.516  -->  00:11:09.005
Okay.
228

228

00:11:09.005  -->  00:11:11.034
So, I want you to notice how we use
229

229

00:11:11.034  -->  00:11:14.122
the self notation throughout this class
230

230

00:11:14.122  -->  00:11:15.652
to reference attributes of the class
231

231

00:11:15.652  -->  00:11:17.713
within the method calls.
232

232

00:11:17.713  -->  00:11:20.232
And go ahead and review how the code above works
233

233

00:11:20.232  -->  00:11:22.649
by creating your own methods.
234

234

00:11:24.310  -->  00:11:26.531
So what I want you to do is to make sure
235

235

00:11:26.531  -->  00:11:28.470
you fully understand this,
236

236

00:11:28.470  -->  00:11:30.720
is create a new method here
237

237

00:11:32.411  -->  00:11:33.244
called def
238

238

00:11:35.064  -->  00:11:35.897
perimeter.
239

239

00:11:37.856  -->  00:11:39.004
It'll take in self.
240

240

00:11:39.004  -->  00:11:41.066
And I want you to fill in the code here
241

241

00:11:41.066  -->  00:11:44.076
that returns the perimeter of the circle.
242

242

00:11:44.076  -->  00:11:46.177
That will be the method.
243

243

00:11:46.177  -->  00:11:48.136
And then what I also want you to do
244

244

00:11:48.136  -->  00:11:50.426
is instead of creating a method
245

245

00:11:50.426  -->  00:11:53.747
see if you'd be able to take perimeter in as an attribute.
246

246

00:11:53.747  -->  00:11:55.546
How would you do that?
247

247

00:11:55.546  -->  00:11:57.146
See if you'd be able to somehow, either,
248

248

00:11:57.146  -->  00:12:00.356
calculate it or reset it based on
249

249

00:12:00.356  -->  00:12:03.417
what the radius in that class object attribute was.
250

250

00:12:03.417  -->  00:12:07.146
So see if you could say self.perimeter.
251

251

00:12:07.146  -->  00:12:10.387
What would you put in here? Question mark.
252

252

00:12:10.387  -->  00:12:12.387
To make that work. Okay.
253

253

00:12:13.687  -->  00:12:15.847
So I know we just went over a lot.
254

254

00:12:15.847  -->  00:12:19.466
And we're gonna go over it just as a basic rundown.
255

255

00:12:19.466  -->  00:12:21.390
But really take your time with this.
256

256

00:12:21.390  -->  00:12:23.451
I know it's hard and I know it's confusing.
257

257

00:12:23.451  -->  00:12:25.381
But it'll eventually click.
258

258

00:12:25.381  -->  00:12:27.168
So don't worry if you're still a little confused
259

259

00:12:27.168  -->  00:12:29.108
on what's actually going on.
260

260

00:12:29.108  -->  00:12:30.969
So just to cover what we did in this lecture.
261

261

00:12:30.969  -->  00:12:32.539
We went over methods.
262

262

00:12:32.539  -->  00:12:34.379
And generally you can think of methods
263

263

00:12:34.379  -->  00:12:37.429
as just functions defined inside the body of a class
264

264

00:12:37.429  -->  00:12:39.929
that take in a self argument so they know
265

265

00:12:39.929  -->  00:12:43.096
they're referring to the object class.
266

266

00:12:44.564  -->  00:12:47.635
So here we have what's known as a special method.
267

267

00:12:47.635  -->  00:12:50.607
This underscore underscore init underscore underscore.
268

268

00:12:50.607  -->  00:12:52.217
It always takes in self.
269

269

00:12:52.217  -->  00:12:54.784
And then it takes in any parameters you want
270

270

00:12:54.784  -->  00:12:57.555
to initialise that version of your object.
271

271

00:12:57.555  -->  00:12:59.201
In this case Circle.
272

272

00:12:59.201  -->  00:13:02.643
Before that we put in any class object attributes we want.
273

273

00:13:02.643  -->  00:13:04.483
And those are attributes that will be the same
274

274

00:13:04.483  -->  00:13:08.650
for any instance of this circle class or circle object.
275

275

00:13:10.152  -->  00:13:13.214
And then, nitty gritty, the methods themselves.
276

276

00:13:13.214  -->  00:13:16.326
Here we've created a method called area
277

277

00:13:16.326  -->  00:13:18.796
that just returns the area of the circle
278

278

00:13:18.796  -->  00:13:23.237
based on, both, an attribute and a class object attribute.
279

279

00:13:23.237  -->  00:13:26.177
Then we created a method called set_radius
280

280

00:13:26.177  -->  00:13:28.155
and we created a docstring for this one
281

281

00:13:28.155  -->  00:13:29.847
and said this method takes in a radius
282

282

00:13:29.847  -->  00:13:32.127
and resets the current radius of the circle.
283

283

00:13:32.127  -->  00:13:34.289
Again it always takes in self.
284

284

00:13:34.289  -->  00:13:37.787
And in this case it took in new_radius as an argument.
285

285

00:13:37.787  -->  00:13:41.954
And it just reset the attribute radius to the new radius.
286

286

00:13:43.188  -->  00:13:44.021
Okay.
287

287

00:13:44.021  -->  00:13:46.076
And what I want you to do is go ahead
288

288

00:13:46.076  -->  00:13:48.964
and create a new method for getting the perimeter out.
289

289

00:13:48.964  -->  00:13:50.093
And then I also want you to see,
290

290

00:13:50.093  -->  00:13:51.671
how would you do that if you just wanted
291

291

00:13:51.671  -->  00:13:53.362
to do the attribute version?
292

292

00:13:53.362  -->  00:13:55.013
Just set perimeter as a straight up attribute
293

293

00:13:55.013  -->  00:13:56.583
since the beginning.
294

294

00:13:56.583  -->  00:13:57.491
Okay.
295

295

00:13:57.491  -->  00:13:59.071
So again, take your time with this.
296

296

00:13:59.071  -->  00:14:01.819
And I'd like to emphasise that at the bottom
297

297

00:14:01.819  -->  00:14:03.729
of this Jupiter notebook, I know I said this
298

298

00:14:03.729  -->  00:14:06.080
in the first lecture of this section,
299

299

00:14:06.080  -->  00:14:08.370
but there's some great resources here.
300

300

00:14:08.370  -->  00:14:10.958
These four are very good for continuing
301

301

00:14:10.958  -->  00:14:13.268
your understanding of Object Oriented Programming.
302

302

00:14:13.268  -->  00:14:14.939
How classes work.
303

303

00:14:14.939  -->  00:14:17.020
And usually you have to see it explained
304

304

00:14:17.020  -->  00:14:20.300
a couple of different ways for it to really click.
305

305

00:14:20.300  -->  00:14:23.240
Alright, so that's it for this lecture.
306

306

00:14:23.240  -->  00:14:25.858
In the next lecture what we're gonna be doing
307

307

00:14:25.858  -->  00:14:28.335
is going over inheritance.
308

308

00:14:28.335  -->  00:14:29.958
Which is a way to form new classes
309

309

00:14:29.958  -->  00:14:32.638
using classes that have already been defined.
310

310

00:14:32.638  -->  00:14:35.688
Okay, thanks, and I'll see you at the next lecture.
