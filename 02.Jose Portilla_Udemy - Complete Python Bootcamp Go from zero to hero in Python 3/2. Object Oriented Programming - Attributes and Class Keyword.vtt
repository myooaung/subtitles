WEBVTT
1
00:00:05.430 --> 00:00:06.700
Selamat datang kembali semuanya.

2
00:00:06.720 --> 00:00:12.230
Sudah waktunya untuk benar-benar menyelam ke Python dan menggunakan pemrograman berorientasi objek untuk membuat objek kita sendiri.

3
00:00:12.300 --> 00:00:18.210
Dalam Bagian 1 dari seri kuliah ini kita akan fokus pada kata kunci kelas serta

4
00:00:18.270 --> 00:00:20.560
menciptakan atribut untuk objek kita.

5
00:00:20.700 --> 00:00:23.870
Mari kita melompat ke Jupiter dalam sebuah buku dan memulai.

6
00:00:23.870 --> 00:00:29.150
Baiklah jadi mari kita mulai dengan benar-benar menyadari apa objek sudah terlihat seperti di Python.

7
00:00:29.180 --> 00:00:36.440
Jika saya membuat daftar saya satu dua tiga saya akan dapat kemudian memanggil variabel daftar saya katakan Dot hit

8
00:00:36.770 --> 00:00:41.150
tab dan melihat banyak atribut dan metode dari objek ini.

9
00:00:41.150 --> 00:00:42.960
Dan hal yang sama berlaku untuk satu set.

10
00:00:43.040 --> 00:00:49.730
Dan kita telah melihat bagaimana membuat set menggunakan set saya sama dengan maka kita memiliki set kata kunci ini dan kemudian

11
00:00:49.730 --> 00:00:55.040
jika saya melihat set saya, saya bisa melakukan tab itu dan melihat banyak atribut dan metode.

12
00:00:55.250 --> 00:01:00.680
Nah yang akan kita lakukan adalah melihat apakah kita dapat membuat objek yang ditentukan pengguna kita sendiri dan semua yang ada di

13
00:01:00.770 --> 00:01:01.690
Python adalah objek.

14
00:01:01.730 --> 00:01:08.240
Jadi saya bisa mengatakan apa jenis set saya dan saya akan melaporkan kembali bahwa itu adalah set dan saya dapat melakukan hal yang sama

15
00:01:08.240 --> 00:01:12.140
untuk daftar itu. Saya baru saja membuat laporan kembali bahwa itu adalah daftar.

16
00:01:12.140 --> 00:01:16.950
Jadi mari kita jelajahi bagaimana kita dapat menggunakan kata kunci kelas untuk membuat objek yang ditentukan pengguna.

17
00:01:16.950 --> 00:01:18.470
Jadi ini dibangun di objek.

18
00:01:18.470 --> 00:01:20.890
Mari kita gunakan Kelas C L.

19
00:01:20.900 --> 00:01:22.810
SS Itu kata kunci di sini.

20
00:01:23.000 --> 00:01:28.760
Untuk objek yang ditentukan pengguna, kelas pada dasarnya adalah cetak biru yang mendefinisikan sifat objek di masa

21
00:01:28.880 --> 00:01:29.930
depan dari kelas.

22
00:01:29.930 --> 00:01:36.110
Kita kemudian dapat membuat instance objek dalam instance adalah objek spesifik yang dibuat dari

23
00:01:36.110 --> 00:01:37.280
kelas tertentu.

24
00:01:37.520 --> 00:01:40.870
Jadi sekarang kita akan membuat kelas sesederhana mungkin.

25
00:01:41.030 --> 00:01:42.800
Jadi saya akan mengatakan sampel.

26
00:01:42.830 --> 00:01:45.640
Perhatikan bagaimana nama kelas saya ditulis dengan huruf besar.

27
00:01:45.800 --> 00:01:53.160
Jadi dengan konvensi untuk kelas kita mengikuti selubung unta yang mengatakan bahwa setiap kata di sini memiliki bagian dari huruf kapital dan

28
00:01:53.180 --> 00:01:57.590
seperti Snake casing untuk nama variabel dan nama fungsi atau kita memiliki garis

29
00:01:58.070 --> 00:02:02.350
bawah sehingga dengan konvensi kita menggunakan nama huruf besar untuk kelas.

30
00:02:02.390 --> 00:02:05.710
Kami memiliki sampel kata kelas dan saya akan mengatakan sampel di sini.

31
00:02:06.650 --> 00:02:08.300
Buka kurung tutup.

32
00:02:08.600 --> 00:02:11.420
Colon dan kemudian kita akan mengatakan lulus.

33
00:02:11.650 --> 00:02:16.130
Jadi ingat kata Kunci masa lalu pada dasarnya hanya mengatakan jangan lakukan apa-apa dan itu adalah pengganti di sana.

34
00:02:16.180 --> 00:02:18.900
Jika kami tidak memilikinya, kami akan mendapatkan semacam kesalahan sintaksis.

35
00:02:19.000 --> 00:02:19.590
Dan filenya.

36
00:02:19.590 --> 00:02:21.810
Jadi alih-alih kami telah lulus dan hanya itu.

37
00:02:21.850 --> 00:02:27.220
Kami baru saja membuat kelas pertama kami dan yang dilakukannya hanyalah mengatakan hei Anda membuat kelas sampel dan hanya

38
00:02:27.250 --> 00:02:27.760
itu.

39
00:02:27.760 --> 00:02:29.040
Tidak ada yang lain di sana.

40
00:02:29.500 --> 00:02:37.180
Jadi mari kita buat contoh kelas sampel kita akan mengatakan sampel saya sama dengan dan kemudian kita sebut sampel buka

41
00:02:37.540 --> 00:02:41.500
tutup Princie kita belum memasukkan apa pun ke dalamnya.

42
00:02:41.500 --> 00:02:42.610
Shift enter untuk menjalankannya.

43
00:02:42.640 --> 00:02:48.310
Dan jika saya memeriksa jenis sampel saya, Anda akan melihat sesuatu yang membuat Anda tahu bahwa itu adalah

44
00:02:48.310 --> 00:02:49.240
jenis sampel.

45
00:02:49.240 --> 00:02:49.720
Baiklah.

46
00:02:49.870 --> 00:02:54.210
Jadi yang telah kami lakukan sejauh ini adalah kami menggunakan kelas kata kunci yang dibuat kelas sampel kami sendiri.

47
00:02:54.250 --> 00:02:55.700
Itu tidak benar-benar melakukan apa pun.

48
00:02:55.750 --> 00:03:02.630
Kemudian kita membuat instance dari kelas itu dengan mengatakan nama variabel sama dengan instance sampel.

49
00:03:02.770 --> 00:03:07.510
Dan kemudian saya dapat memeriksa sampel saya dan ia mengatakan contoh pemikiran utamanya

50
00:03:07.510 --> 00:03:12.550
nanti di kuliah mendatang kita akan membahas apa kata garis bawah ini garis bawah

51
00:03:12.840 --> 00:03:18.640
menggarisbawahi sebenarnya berarti pada dasarnya hanya membiarkan Anda tahu bahwa contoh tertentu dari sampel terhubung ke skrip

52
00:03:18.640 --> 00:03:20.320
utama Anda di sini.

53
00:03:20.340 --> 00:03:20.810
Baiklah.

54
00:03:21.040 --> 00:03:23.170
Jadi ini adalah kelas yang paling sederhana.

55
00:03:23.320 --> 00:03:26.200
Ini tidak terlalu berguna karena tidak memiliki atribut.

56
00:03:26.200 --> 00:03:32.090
Jadi sekarang mari kita lihat bagaimana kita bisa membuat atribut di dalam kelas di sini.

57
00:03:32.220 --> 00:03:34.470
Saya akan menulis dua baris kode.

58
00:03:34.770 --> 00:03:40.500
Saya akan mengatakan DPF sama seperti yang kita lakukan untuk suatu fungsi kecuali ketika itu di dalam kelas

59
00:03:40.500 --> 00:03:41.830
kita menyebutnya sebagai metode.

60
00:03:42.150 --> 00:03:47.610
Dan ini adalah metode khusus yang disebut metode init yang akan dipanggil setiap kali

61
00:03:47.610 --> 00:03:49.680
Anda benar-benar membuat instance kelas.

62
00:03:50.010 --> 00:03:56.760
Dan kami selalu memulai dengan kata kunci mandiri yang pada dasarnya menghubungkan metode ini ke instance kelas dan

63
00:03:56.760 --> 00:04:03.750
itu memungkinkan kami untuk merujuk pada dirinya sendiri dan kemudian kami meneruskan atribut apa pun yang kami ingin

64
00:04:03.750 --> 00:04:05.250
pengguna untuk mendefinisikan.

65
00:04:05.250 --> 00:04:13.770
Jadi sebagai contoh alih-alih memanggil sampel kelas kami, saya akan mengatakan bahwa ini adalah kelas anjing sehingga anjing memiliki atribut untuk

66
00:04:13.830 --> 00:04:17.620
mereka dan atribut adalah karakteristik dari suatu objek.

67
00:04:17.640 --> 00:04:21.310
Nanti kita akan membahas metode yang merupakan operasi yang bisa kita lakukan dengan objek.

68
00:04:21.480 --> 00:04:23.750
Tetapi sekarang fokus pada atribut.

69
00:04:23.880 --> 00:04:28.100
Jadi kita mungkin berpikir dengan baik atribut atau karakteristik apa yang dimiliki anjing.

70
00:04:28.320 --> 00:04:29.590
Yah, mereka memiliki keturunan.

71
00:04:29.810 --> 00:04:34.060
Jadi yang mungkin ingin kita lewati adalah jenis anjing.

72
00:04:34.220 --> 00:04:41.200
Saya ingat ketika kami memiliki set dan daftar saya, saya bisa melakukan dot tab dan kemudian melihat banyak opsi.

73
00:04:41.240 --> 00:04:45.890
Beberapa di antaranya adalah metode yang beberapa di antaranya adalah atribut yang akan kita lakukan sekarang

74
00:04:45.890 --> 00:04:52.310
adalah mencoba membuat atribut di sini sehingga ketika saya membuat instance dari kelas anjing, saya dapat menekan titik dan melihat breed tersebut muncul.

75
00:04:52.310 --> 00:04:56.960
Jadi biarkan saya menghapus baris ini karena kita tidak membutuhkannya lagi

76
00:04:57.860 --> 00:05:03.560
karena kelas sampel akan digunakan dan kemudian kita akan mengatakan breed otodidak sama dengan breed.

77
00:05:03.780 --> 00:05:08.500
Dan dua baris ini bisa sangat membingungkan pada awalnya karena ini adalah pertama kalinya kita melihat kata

78
00:05:08.510 --> 00:05:11.060
kunci sendiri dan kita melihat semacam tugas aneh.

79
00:05:11.270 --> 00:05:15.570
Tetapi saya ingin menjalankan ini terlebih dahulu dan kemudian memecah apa yang terjadi dalam dua baris kode ini.

80
00:05:16.130 --> 00:05:20.460
Jadi mari kita jalankan ini dan perhatikan indentasi saya di sana semuanya sedikit menjorok.

81
00:05:20.710 --> 00:05:22.560
Dan mari kita buat variabel.

82
00:05:22.780 --> 00:05:27.970
Saya akan mengatakan anjing saya sama dengan turunan dari kelas anjing.

83
00:05:27.970 --> 00:05:31.990
Sekarang jika saya tidak lulus apa pun saya benar-benar akan mendapatkan kesalahan.

84
00:05:32.050 --> 00:05:37.630
Jadi, Anda akan melihat bahwa kami benar-benar mendapatkan kesalahan ketika kami menjalankan ini

85
00:05:37.910 --> 00:05:41.380
tanpa argumen posisi karena kami mengharapkan parameter Breede.

86
00:05:41.380 --> 00:05:46.650
Jadi apa yang python ini coba katakan kepada kami adalah hei ketika Anda membuat anjing itu mengharapkan Anda untuk melewati

87
00:05:46.660 --> 00:05:48.370
parameter apa pun untuk berkembang biak.

88
00:05:48.460 --> 00:05:50.130
Jadi mari kita lakukan itu.

89
00:05:50.140 --> 00:05:53.670
Kita akan mengatakan bahwa jenis anjing adalah lab.

90
00:05:54.930 --> 00:05:58.130
Dan sekarang ketika kita menjalankan ini kita tidak mendapatkan kesalahan.

91
00:05:58.440 --> 00:06:05.340
Dan saya dapat memeriksa jenis anjing saya ini sangat banteng dan mengatakan hei Anda sekarang memiliki turunan dari

92
00:06:05.370 --> 00:06:06.300
kelas anjing.

93
00:06:06.660 --> 00:06:12.970
Dan jika saya mengatakan titik-titik anjing saya dan kemudian menekan tab saya harus dapat berkembang biak secara otomatis.

94
00:06:13.140 --> 00:06:17.370
Sekarang alasan breed autocomplete adalah karena saat ini satu-satunya atribut nanti ketika kita menambahkan lebih

95
00:06:17.370 --> 00:06:19.310
banyak atribut akan melihat daftar dropdown.

96
00:06:19.530 --> 00:06:27.370
Tetapi jika saya menjalankan laporan ini kembali, hei ini contoh dari kelas anjing disebut anjing saya trahnya adalah lab jadi mari

97
00:06:27.370 --> 00:06:34.060
gulir kembali ke sini dan memecah apa yang terjadi di dalamnya pada dasarnya dapat dianggap sebagai konstruktor

98
00:06:34.060 --> 00:06:39.850
untuk kelas dan itu akan dipanggil secara otomatis ketika Anda membuat turunan dari kelas ini

99
00:06:39.850 --> 00:06:40.610
sendiri.

100
00:06:40.770 --> 00:06:44.690
Kata kunci itu mewakili instance dari objek itu sendiri.

101
00:06:44.710 --> 00:06:49.750
Dan sebenarnya sebagian besar bahasa berorientasi objek melewatkan ini sebagai parameter tersembunyi ke metode yang didefinisikan

102
00:06:49.750 --> 00:06:50.700
pada objek.

103
00:06:50.800 --> 00:06:52.480
Tapi Python tidak melakukan ini.

104
00:06:52.480 --> 00:06:57.130
Anda harus menyatakan secara eksplisit dan dengan konvensi kami menggunakan kata diri di sini.

105
00:06:57.130 --> 00:07:01.300
Secara teknis Anda bisa menulis dalam nama variabel apa pun yang Anda inginkan, tetapi Anda harus tetap dengan diri seperti

106
00:07:01.600 --> 00:07:01.860
itu.

107
00:07:01.870 --> 00:07:05.520
Pemrogram lain ketika mereka melihat kode Anda masuk akal bagi mereka.

108
00:07:05.560 --> 00:07:10.090
Sekarang saya ingin fokus pada Breede karena saya menemukan itu membingungkan ketika saya baru saja mulai.

109
00:07:10.190 --> 00:07:16.480
Anda melihat Breede di sini tiga kali Anda melihat Breede otodidak. Breede sama dengan breed dan saya ingin menunjukkan

110
00:07:16.480 --> 00:07:19.030
kepada Anda sesuatu yang tidak akan benar.

111
00:07:19.030 --> 00:07:25.940
Diharapkan akan membantu Anda memahami bagaimana Breede dikerjakan ke dalam seluruh objek ini.

112
00:07:26.350 --> 00:07:31.930
Jadi apa yang terjadi adalah ketika Anda membuat turunan dari kelas anjing, Python akan memanggil metode

113
00:07:31.930 --> 00:07:36.760
ini dan itu akan menggunakan diri untuk mewakili contoh objek itu sendiri dan

114
00:07:36.760 --> 00:07:42.620
kemudian akan mengharapkan Anda untuk melewati argumen ini berkembang biak dan saya Aku akan menyebut ini trahku.

115
00:07:42.880 --> 00:07:50.480
Dan yang terjadi adalah ketika Anda mengatakan trah saya di sini saya dapat mengatur abrade saya di sini dan kemudian Anda menetapkan atribut

116
00:07:50.510 --> 00:07:52.710
sama dengan apa pun parameter ini.

117
00:07:52.970 --> 00:07:56.790
Secara konvensi ketiganya memiliki nama yang sama.

118
00:07:56.930 --> 00:08:01.940
Tapi saya ingin menunjukkan kepada Anda bagaimana mengubah nama mudah-mudahan ini akan menjelaskan kepada Anda apa koneksi

119
00:08:01.940 --> 00:08:03.940
yang sebenarnya ketika Anda memasukkan parameter.

120
00:08:03.950 --> 00:08:11.090
Jadi saya akan mengulangi ini dan jika saya melihat anjing dan kemudian lakukan shift tab dan Anda juga dapat memanggil bantuan

121
00:08:11.090 --> 00:08:11.890
pada anjing.

122
00:08:11.930 --> 00:08:15.360
Anda perhatikan bahwa itu diharapkan keturunan saya akan diteruskan.

123
00:08:15.770 --> 00:08:22.010
Jadi yang terjadi adalah Anda Pessin variabel ini untuk breed saya dan kemudian langkah selanjutnya adalah Anda

124
00:08:22.010 --> 00:08:29.060
mengambil variabel apa pun yang disediakan untuk breed saya dan kemudian berkata sama dengan breed atribut atau breed otodidak karena

125
00:08:29.060 --> 00:08:32.000
ini mewakili instance dari objek itu sendiri.

126
00:08:32.000 --> 00:08:38.440
Jadi semua yang kita lakukan ketika datang ke atribut yang lagi merupakan karakteristik

127
00:08:38.440 --> 00:08:44.410
dari objek nanti kita akan belajar tentang metode jika kita mengambil argumen.

128
00:08:44.760 --> 00:08:54.170
Dalam hal ini Breede saya dan kami menugaskannya menggunakan nama atribut otodidak.

129
00:08:54.180 --> 00:08:58.050
Jadi itu hanya sebuah konvensi tentang apa yang Anda ketikkan belajar sendiri.

130
00:08:58.070 --> 00:08:59.480
Dan kemudian Anda memilih nama atribut.

131
00:08:59.480 --> 00:09:01.950
Dalam hal ini saya menyebutnya trah.

132
00:09:02.390 --> 00:09:04.290
Jadi mari kita jalankan ini lagi.

133
00:09:04.370 --> 00:09:11.510
Pastikan Anda menjalankan kembali sel sehingga kita memiliki jenis saya di sana dan kemudian saya dapat mengatakan jenis saya sama dengan

134
00:09:11.510 --> 00:09:16.080
katakanlah Sam adalah seorang husky sekarang saya menjalankan ini saya menjalankan ini lagi.

135
00:09:16.190 --> 00:09:22.550
Saya masih memiliki kelas anjing dan jika saya melihat anjing saya jika saya menekan tab saya hanya memiliki Breede, saya

136
00:09:22.550 --> 00:09:27.860
tidak memiliki breed saya karena breed saya hanya nama parameter yang kami pilih untuk argumen.

137
00:09:27.860 --> 00:09:33.110
Jadi dia berkata, Oh, tolonglah aku dari argumen breed saya dan saya akan menugaskannya untuk breed otodidak di sini

138
00:09:33.110 --> 00:09:34.780
dan saya ingin membuatnya lebih jelas.

139
00:09:36.280 --> 00:09:43.900
Dengan mengatakan breed sekarang atribut saya.

140
00:09:44.050 --> 00:09:50.940
Jika saya menjalankan ini lagi apa yang terjadi adalah saya lulus dan lagi trah saya adalah Huskie tipe lagi staes dog.

141
00:09:51.220 --> 00:09:57.660
Tetapi jika saya mengatakan tab anjing saya sekarang atribut saya dan kebetulan Huskey.

142
00:09:57.680 --> 00:10:04.070
Jadi yang kita lakukan di sini adalah Anda memasukkan parameter atau argumen dan kemudian ditugaskan ke atribut yang nantinya

143
00:10:04.200 --> 00:10:06.680
bisa Anda panggil pada objek Anda.

144
00:10:06.680 --> 00:10:12.180
Namun dengan konvensi Anda hanya akan menggunakan nama parameter yang sama untuk ketiganya.

145
00:10:12.290 --> 00:10:20.470
Itulah sebabnya Anda akhirnya melihat sesuatu seperti breed otodidak sama dengan breed dan Anda baru saja berkembang biak.

146
00:10:20.470 --> 00:10:25.510
Ini membingungkan pada awalnya untuk pemula karena mereka melihat Brehon di sini tiga kali tetapi Anda dapat

147
00:10:25.510 --> 00:10:30.100
mengatakan bahwa setelah Anda terbiasa pemrograman berorientasi objek itu hanya bersih adalah memiliki ketiga ini

148
00:10:30.490 --> 00:10:35.600
menjadi istilah yang sama bahwa kita Anda tahu apa yang sedang berlalu dan di mana ia ditugaskan.

149
00:10:35.740 --> 00:10:39.740
Tidak ada alasan nyata bahwa mereka semua harus memiliki nama-nama yang terpisah.

150
00:10:39.760 --> 00:10:42.580
Jadi saat ini anjing kami hanya memiliki jenis.

151
00:10:42.700 --> 00:10:45.280
Tapi mari kita lanjutkan dan berikan lebih banyak atribut.

152
00:10:45.280 --> 00:10:46.840
Jadi apa lagi yang bisa dimiliki seekor anjing.

153
00:10:46.840 --> 00:10:48.400
Anjing yang baik

154
00:10:51.580 --> 00:10:58.190
bisa memiliki nama dan mungkin kita tidak bisa mengatakan apakah anjing itu bercak atau tidak.

155
00:10:58.220 --> 00:11:01.400
Jadi kami memiliki nama dan tempat berkembang biak.

156
00:11:03.060 --> 00:11:08.850
Jadi di sini kita hanya mengatakan membuat beberapa atribut lebih lembut tetapi nama anjing

157
00:11:08.850 --> 00:11:15.760
sama dengan nama apa pun yang Anda pasan dan tempat otodidak sama dengan setiap orang untuk tempat.

158
00:11:15.920 --> 00:11:22.670
Dan perhatikan di sini apa yang saya lakukan adalah saya jenis mengharapkan tipe data tertentu 10:02 Saya berharap berkembang biak

159
00:11:22.670 --> 00:11:23.570
menjadi string.

160
00:11:23.600 --> 00:11:29.720
Saya berharap nama menjadi string dan melihat cara saya berpikir itu sebenarnya akan menjadi boolean

161
00:11:29.720 --> 00:11:31.440
Jadi saya punya komentar di sini.

162
00:11:32.980 --> 00:11:35.700
Saya berharap boolean benar atau salah.

163
00:11:35.730 --> 00:11:37.970
Apakah anjing itu bercak atau tidak.

164
00:11:38.070 --> 00:11:42.450
Jadi saya harap Anda mendapatkan ide di sini setiap atribut yang Anda lewati akan

165
00:11:42.450 --> 00:11:48.710
menjadi sebuah string tetapi bisa berupa bilangan bulat, sebuah floating point bisa menjadi daftar, bisa banyak hal, jadi saya jalankan kembali.

166
00:11:48.950 --> 00:11:53.080
Dan sekarang mari kita lihat apa yang kita butuhkan untuk mendefinisikan anjing kita.

167
00:11:53.180 --> 00:12:00.860
Kita membutuhkan jenis anjing nama anjing dan benar atau salah apakah ada bintik sehingga kita

168
00:12:00.860 --> 00:12:06.430
akan memiliki jenis anjing menjadi laboratorium akan memiliki nama anjing.

169
00:12:07.900 --> 00:12:13.520
B Sammy dan kita akan memiliki bintik-bintik menjadi palsu Sammy tidak memiliki bintik-bintik.

170
00:12:14.690 --> 00:12:16.870
Jadi saya jalankan ini saya jalankan lagi.

171
00:12:16.880 --> 00:12:23.360
Saya masih memiliki kelas anjing itu tetapi sekarang ketika saya mengatakan anjing saya dan saya menekan tab saya melihat

172
00:12:23.630 --> 00:12:30.920
opsi saya dapat melihat nama dan bintik Breede sehingga saya dapat memanggil cek ini dengan jenis turunan dari kelas anjing saya dapat

173
00:12:30.920 --> 00:12:34.850
memeriksa apa namanya dari anjing itu dan aku bisa memeriksanya.

174
00:12:35.300 --> 00:12:36.590
Anjing itu memiliki bintik-bintik.

175
00:12:36.890 --> 00:12:37.810
Mereka akan memberitahuku salah.

176
00:12:37.850 --> 00:12:39.490
Itu tidak memiliki bintik-bintik.

177
00:12:39.500 --> 00:12:44.930
Salah satu masalah Python yang begitu fleksibel adalah nanti ketika Anda seorang programmer

178
00:12:44.990 --> 00:12:50.270
dan mengharapkan orang lain untuk menggunakan kelas Anda, Anda perlu menambahkan beberapa dokumentasi

179
00:12:50.300 --> 00:12:55.510
untuk memberi tahu mereka. string untuk nama dan tempat harus boolean.

180
00:12:55.520 --> 00:13:03.190
Karena saat ini saya bisa mengatakan sesuatu seperti tidak ada bintik-bintik dan Python tidak akan mengeluh di sini karena saya tidak

181
00:13:03.190 --> 00:13:07.270
melakukan pemeriksaan jenis apa pun untuk memastikan bahwa Spotts adalah boolean.

182
00:13:07.270 --> 00:13:10.360
Jadi jika saya menjalankan ini semua lagi tidak akan ada kesalahan.

183
00:13:10.360 --> 00:13:14.130
Tepat ketika Anda mengatakan bintik itu akan mencetak bintik-bintik tali itu.

184
00:13:14.700 --> 00:13:17.770
OK jadi itu adalah atribut yang sangat dasar.

185
00:13:17.800 --> 00:13:23.710
Kami akan membahas cara-cara yang lebih baik untuk memiliki kontrol tipe untuk memastikan hal-hal seperti bintik adalah boolean

186
00:13:23.710 --> 00:13:29.440
Kemudian dalam kursus tetapi saat ini yang benar-benar ingin kita fokuskan adalah gagasan dasar bahwa Anda

187
00:13:29.440 --> 00:13:34.920
menggunakan kata kunci kelas kemudian dengan nama huruf besar Anda akan menemukan nama kelas Anda.

188
00:13:35.140 --> 00:13:40.870
Dan metode pertama di kelas Anda akan menjadi metode khusus yang disebut dalam metode dan

189
00:13:40.880 --> 00:13:43.120
metode yang bertindak sebagai konstruktor.

190
00:13:43.120 --> 00:13:48.910
Dan kami memiliki kata kunci mandiri ini yang merupakan referensi ke instance kelas ke

191
00:13:48.910 --> 00:13:55.070
instance kelas kemudian akan memiliki atribut yang Anda berikan berdasarkan parameter apa yang Anda tetapkan di

192
00:13:55.090 --> 00:13:55.770
sini.

193
00:13:55.870 --> 00:14:00.880
Dan dengan konvensi nama parameter nama atributnya sama.

194
00:14:00.880 --> 00:14:06.490
Yang berarti Anda akan melihatnya tiga kali sekali ketika Anda mengirimkannya dan kemudian sekali di sini

195
00:14:06.640 --> 00:14:10.150
untuk atribut dan sekali untuk panggilan tugas yang sebenarnya OK.

196
00:14:10.340 --> 00:14:13.540
Itulah dasar-dasar menciptakan atribut dalam kuliah berikutnya.

197
00:14:13.550 --> 00:14:18.300
Kita akan membahas atribut objek kelas dan kemudian kita akan beralih ke berbicara tentang metode.

198
00:14:18.440 --> 00:14:19.070
Kami akan melihat apakah mereka.
