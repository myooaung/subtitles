1
1

00:00:00,838  -->  00:00:02,669
<v Instructor>Hello, everyone, and welcome to</v>
2

2

00:00:02,669  -->  00:00:06,054
this quick video going over the second
3

3

00:00:06,054  -->  00:00:07,795
Milestone Project 2 Solution,
4

4

00:00:07,795  -->  00:00:09,731
at least my implementation of a solution,
5

5

00:00:09,731  -->  00:00:12,434
and it's just a simple game of Blackjack.
6

6

00:00:12,434  -->  00:00:14,983
So what I'm gonna go over here is just
7

7

00:00:14,983  -->  00:00:18,148
how I used classes in my solution.
8

8

00:00:18,148  -->  00:00:20,644
Since that's really the main purpose
9

9

00:00:20,644  -->  00:00:22,693
of this exercise in general.
10

10

00:00:22,693  -->  00:00:25,749
So I went ahead and made a card class,
11

11

00:00:25,749  -->  00:00:28,236
and in my card class, each card
12

12

00:00:28,236  -->  00:00:30,616
has an attribute, a suit, and a rank.
13

13

00:00:30,616  -->  00:00:34,671
And then I went ahead and made a string,
14

14

00:00:34,671  -->  00:00:36,427
remember we had those special methods?
15

15

00:00:36,427  -->  00:00:38,363
If I said print card, it would return
16

16

00:00:38,363  -->  00:00:40,197
its suit plus its rank, whatever
17

17

00:00:40,197  -->  00:00:41,861
those strings happen to be.
18

18

00:00:41,861  -->  00:00:43,974
And then I had a grab suit and grab rank method
19

19

00:00:43,974  -->  00:00:46,789
that returned those attributes.
20

20

00:00:46,789  -->  00:00:48,920
And then I had a draw, which basically
21

21

00:00:48,920  -->  00:00:52,503
returned the suit and the rank printed out.
22

22

00:00:54,977  -->  00:00:56,029
Okay.
23

23

00:00:56,029  -->  00:00:58,266
So then I made a hand class.
24

24

00:00:58,266  -->  00:01:00,183
And if you notice here,
25

25

00:01:01,760  -->  00:01:03,621
something I had to take care of
26

26

00:01:03,621  -->  00:01:07,174
were that Aces can either be one or eleven in Blackjack.
27

27

00:01:07,174  -->  00:01:11,161
So I had Ace be basically a boolean value,
28

28

00:01:11,161  -->  00:01:13,775
whether or not there was an Ace in the hand.
29

29

00:01:13,775  -->  00:01:16,258
And then I had cards and values
30

30

00:01:16,258  -->  00:01:20,511
so the cards I used list as my data structure.
31

31

00:01:20,511  -->  00:01:24,678
And then this special method, the str, for printing.
32

32

00:01:25,540  -->  00:01:27,139
Basically would just return the string
33

33

00:01:27,139  -->  00:01:29,478
of a current hand composition.
34

34

00:01:29,478  -->  00:01:31,596
So maybe there's a better way of writing this out
35

35

00:01:31,596  -->  00:01:33,600
with a list comprehension possibly,
36

36

00:01:33,600  -->  00:01:37,045
but I just wanted to show, for clarity, a for loop here.
37

37

00:01:37,045  -->  00:01:39,941
So for every card in the cards list,
38

38

00:01:39,941  -->  00:01:43,608
I went ahead, called it out, its str method,
39

39

00:01:44,807  -->  00:01:47,027
and then used this to return the entire
40

40

00:01:47,027  -->  00:01:48,835
hand composition which is basically just
41

41

00:01:48,835  -->  00:01:51,252
all the strings put together.
42

42

00:01:53,602  -->  00:01:56,505
Then moving on to the card add which
43

43

00:01:56,505  -->  00:01:58,601
adds another card to the hand.
44

44

00:01:58,601  -->  00:02:02,613
I take my self.cards list and append the card to it.
45

45

00:02:02,613  -->  00:02:04,596
I check for Aces so if the card rank
46

46

00:02:04,596  -->  00:02:08,763
is equal to A for Ace, I set self.ace equal to True.
47

47

00:02:10,199  -->  00:02:11,806
That way that boolean value now knows
48

48

00:02:11,806  -->  00:02:14,086
that there's an Ace in my hand.
49

49

00:02:14,086  -->  00:02:16,367
Then I have another method for calculating the value,
50

50

00:02:16,367  -->  00:02:17,989
and that calculates the value of the hand.
51

51

00:02:17,989  -->  00:02:21,081
So that makes Aces an eleven if they don't bust the hand.
52

52

00:02:21,081  -->  00:02:24,752
So if Ace is true, I have an Ace in the hand.
53

53

00:02:24,752  -->  00:02:26,546
If my value is less than twelve,
54

54

00:02:26,546  -->  00:02:29,560
then I return value plus ten.
55

55

00:02:29,560  -->  00:02:32,809
Else, I just return it as if it was a one.
56

56

00:02:32,809  -->  00:02:34,242
Then I also have a draw method
57

57

00:02:34,242  -->  00:02:38,482
which has these two factors, hidden and true.
58

58

00:02:38,482  -->  00:02:40,881
So I don't wanna show the first hidden card,
59

59

00:02:40,881  -->  00:02:45,549
and that has to do with the way the dealer works.
60

60

00:02:45,549  -->  00:02:50,169
So we can also continue on to the deck class that I made.
61

61

00:02:50,169  -->  00:02:51,262
And remember your solution might be
62

62

00:02:51,262  -->  00:02:52,542
totally different, but as long as
63

63

00:02:52,542  -->  00:02:53,923
you used object oriented programming,
64

64

00:02:53,923  -->  00:02:56,792
that was the main point of this exercise.
65

65

00:02:56,792  -->  00:02:58,578
So I wanted to create a deck in order,
66

66

00:02:58,578  -->  00:03:02,520
so I have a deck here and I say for suit in suits,
67

67

00:03:02,520  -->  00:03:06,085
for rank in ranking, append a tuple here.
68

68

00:03:06,085  -->  00:03:08,244
Or a card, excuse me.
69

69

00:03:08,244  -->  00:03:11,510
So create a card object with a suit and that rank.
70

70

00:03:11,510  -->  00:03:12,645
And you might be thinking well
71

71

00:03:12,645  -->  00:03:14,416
where are these suits and rankings coming from.
72

72

00:03:14,416  -->  00:03:17,316
So I actually defined them up here.
73

73

00:03:17,316  -->  00:03:19,330
Hearts, diamonds, cloves, spades,
74

74

00:03:19,330  -->  00:03:21,997
and then all the possible ranks.
75

75

00:03:22,896  -->  00:03:26,037
As well as a dictionary of point values for them.
76

76

00:03:26,037  -->  00:03:29,118
So moving on with this deck class.
77

77

00:03:29,118  -->  00:03:32,201
I had the creation of it, shuffle it,
78

78

00:03:33,357  -->  00:03:35,798
which I just used from the random library to shuffle.
79

79

00:03:35,798  -->  00:03:39,798
I used deal, it just pops items off of the list,
80

80

00:03:42,091  -->  00:03:44,940
that deck list, and then str was just
81

81

00:03:44,940  -->  00:03:47,919
for printing the deck composition.
82

82

00:03:47,919  -->  00:03:50,300
Okay, so that's it for the classes.
83

83

00:03:50,300  -->  00:03:52,514
I'll let you go ahead and check out the functions.
84

84

00:03:52,514  -->  00:03:54,485
I used global variables just because
85

85

00:03:54,485  -->  00:03:55,860
it's in the Jupiter notebook and
86

86

00:03:55,860  -->  00:03:57,197
it's a little easier that way,
87

87

00:03:57,197  -->  00:03:58,452
but you didn't have to.
88

88

00:03:58,452  -->  00:03:59,732
There's tonnes of ways to implement
89

89

00:03:59,732  -->  00:04:02,287
this game of Blackjack so, as long as it works
90

90

00:04:02,287  -->  00:04:05,080
and as long as you're happy with it, great job.
91

91

00:04:05,080  -->  00:04:06,323
Okay, so I'll let you go ahead
92

92

00:04:06,323  -->  00:04:07,859
and read through the rest of that solution.
93

93

00:04:07,859  -->  00:04:09,276
Thanks, everyone.
