1
1

00:00:01,589  -->  00:00:02,422
<v Instructor>Hello everyone</v>
2

2

00:00:02,422  -->  00:00:05,489
and welcome to the strings coding lecture.
3

3

00:00:05,489  -->  00:00:08,049
In this lecture we'll be learning about strings.
4

4

00:00:08,049  -->  00:00:10,302
Right now I have opened the live coding notebook
5

5

00:00:10,302  -->  00:00:12,359
and, as always, there's an entire
6

6

00:00:12,359  -->  00:00:16,143
corresponding Jupyter notebook for this lecture.
7

7

00:00:16,143  -->  00:00:18,292
For a quick overview of the notebook,
8

8

00:00:18,292  -->  00:00:21,099
it goes over creating strings, printing strings,
9

9

00:00:21,099  -->  00:00:24,414
some differences in printing between Python 2 and 3,
10

10

00:00:24,414  -->  00:00:27,029
string indexing and slicing, string properties,
11

11

00:00:27,029  -->  00:00:31,004
string methods, and then some print formatting issues.
12

12

00:00:31,004  -->  00:00:32,723
Here's what the notebook looks like.
13

13

00:00:32,723  -->  00:00:34,518
You can go ahead and check it out on your own
14

14

00:00:34,518  -->  00:00:35,656
and everything in this notebook
15

15

00:00:35,656  -->  00:00:38,125
is what we're gonna be going over in this lecture.
16

16

00:00:38,125  -->  00:00:39,577
Okay, great.
17

17

00:00:39,577  -->  00:00:41,280
Let's go ahead and just jump right in
18

18

00:00:41,280  -->  00:00:44,030
and get started with some coding.
19

19

00:00:45,338  -->  00:00:50,168
Alright, so strings in Python are used to record,
20

20

00:00:50,168  -->  00:00:53,114
usually text information, such is the name.
21

21

00:00:53,114  -->  00:00:54,744
The way you can create a string
22

22

00:00:54,744  -->  00:00:58,565
is by using single quotes or double quotes
23

23

00:00:58,565  -->  00:00:59,987
in the most basic format.
24

24

00:00:59,987  -->  00:01:02,270
So I can put in a single quote here
25

25

00:01:02,270  -->  00:01:04,937
and then say, hello, and end it.
26

26

00:01:05,951  -->  00:01:07,912
Close it off with another single quote.
27

27

00:01:07,912  -->  00:01:11,300
Shift, enter to run that cell and now I have a string there.
28

28

00:01:11,300  -->  00:01:14,547
You can also do an entire phrase, like a sentence.
29

29

00:01:14,547  -->  00:01:18,377
So I can say, this is also a string.
30

30

00:01:18,377  -->  00:01:21,852
Close it off and you have a string that way, as well.
31

31

00:01:21,852  -->  00:01:24,834
Now something important to know in Python
32

32

00:01:24,834  -->  00:01:27,448
is that what Python realises here
33

33

00:01:27,448  -->  00:01:30,166
is that this string is a sequence
34

34

00:01:30,166  -->  00:01:32,816
and we'll go over that further in just a little bit.
35

35

00:01:32,816  -->  00:01:36,950
But the way Python is thinking about this string,
36

36

00:01:36,950  -->  00:01:41,361
if you will, is that it's seeing every single letter, here,
37

37

00:01:41,361  -->  00:01:43,867
as part of a sequence including the spaces.
38

38

00:01:43,867  -->  00:01:46,355
When we learn about indexing and slicing strings,
39

39

00:01:46,355  -->  00:01:49,242
that will become a little more clear.
40

40

00:01:49,242  -->  00:01:50,777
Something else I wanna note
41

41

00:01:50,777  -->  00:01:52,234
is we've been using single quotes,
42

42

00:01:52,234  -->  00:01:55,197
but we can also use double quotes to create a string.
43

43

00:01:55,197  -->  00:01:57,021
Here I have a double quote and I can say,
44

44

00:01:57,021  -->  00:01:58,438
this is a string.
45

45

00:02:01,394  -->  00:02:05,291
As you can see that works just as well.
46

46

00:02:05,291  -->  00:02:09,285
Now, why would you use double quotes versus single quotes?
47

47

00:02:09,285  -->  00:02:11,994
The reason for that is let's say you have a string
48

48

00:02:11,994  -->  00:02:15,244
where you want it to say, I'm a string.
49

49

00:02:16,432  -->  00:02:19,964
Now, if you notice here, I'm using a single quote
50

50

00:02:19,964  -->  00:02:23,355
in this I'm, so that's gonna return an error
51

51

00:02:23,355  -->  00:02:25,570
because of an invalid syntax.
52

52

00:02:25,570  -->  00:02:27,952
So that's one of the instances where you're gonna want
53

53

00:02:27,952  -->  00:02:31,182
to use double quotes, if you have
54

54

00:02:31,182  -->  00:02:33,298
a single quote within your string.
55

55

00:02:33,298  -->  00:02:35,131
Now that will be fine.
56

56

00:02:36,965  -->  00:02:39,385
You can also do the opposite.
57

57

00:02:39,385  -->  00:02:42,468
You could, let's say this is a quote.
58

58

00:02:45,737  -->  00:02:47,414
As you can see that double quotes
59

59

00:02:47,414  -->  00:02:50,345
are now within this string.
60

60

00:02:50,345  -->  00:02:51,178
Great.
61

61

00:02:52,046  -->  00:02:54,756
Now let's learn about printing a string.
62

62

00:02:54,756  -->  00:02:57,280
Because we're using this Jupyter notebook setting,
63

63

00:02:57,280  -->  00:03:00,355
if we just run a cell that only has a string in it,
64

64

00:03:00,355  -->  00:03:03,156
it will automatically output the strings.
65

65

00:03:03,156  -->  00:03:06,080
But the correct way to display strings in your code,
66

66

00:03:06,080  -->  00:03:09,717
if you're using Idol or another Ide
67

67

00:03:09,717  -->  00:03:12,495
that we've gone over before is through printing a string.
68

68

00:03:12,495  -->  00:03:16,328
So we can decare a string, such as hello world
69

69

00:03:22,643  -->  00:03:26,644
and let's say we wanted to put in multiple strings,
70

70

00:03:26,644  -->  00:03:30,061
so I say hello world 1 and hello world 2.
71

71

00:03:34,201  -->  00:03:37,201
If you notice here, in this Jupyter notebook setting,
72

72

00:03:37,201  -->  00:03:40,118
only the last string was displayed.
73

73

00:03:41,258  -->  00:03:43,103
The correct way to output these strings
74

74

00:03:43,103  -->  00:03:45,353
is using a print statement.
75

75

00:03:46,219  -->  00:03:50,376
The way that works in Python 2 is by writing the word
76

76

00:03:50,376  -->  00:03:54,745
print, space, and then whatever string you want to print.
77

77

00:03:54,745  -->  00:03:58,541
Here again I'll do it, print, space, and then the string.
78

78

00:03:58,541  -->  00:04:02,632
Now, you'll notice here, it's actually printing the string
79

79

00:04:02,632  -->  00:04:05,227
and these quotes, these single quotes that we saw earlier
80

80

00:04:05,227  -->  00:04:07,782
have gone away and this is the main way you want
81

81

00:04:07,782  -->  00:04:11,282
to output or display strings in your code.
82

82

00:04:14,394  -->  00:04:17,189
Alright, some other things to note
83

83

00:04:17,189  -->  00:04:21,456
is that there's special backslash characters we can use,
84

84

00:04:21,456  -->  00:04:24,013
in order to print certain things.
85

85

00:04:24,013  -->  00:04:27,056
What I mean by that is let's say I wanted to print
86

86

00:04:27,056  -->  00:04:30,473
a new line, such as a space or something.
87

87

00:04:31,494  -->  00:04:35,339
The way you can do that is by using a backslash n notation,
88

88

00:04:35,339  -->  00:04:37,345
so I'll show you what that looks like in practise.
89

89

00:04:37,345  -->  00:04:41,512
I'm gonna put a string that says, here is a new line
90

90

00:04:42,457  -->  00:04:45,290
and I'm gonna put that backslash n
91

91

00:04:46,676  -->  00:04:49,009
and here is the second line.
92

92

00:04:51,180  -->  00:04:54,407
So if you notice, this backslash n
93

93

00:04:54,407  -->  00:04:58,636
is an indication to Python to not treat this as a regular n,
94

94

00:04:58,636  -->  00:05:01,419
but actually treat this as a new line symbol.
95

95

00:05:01,419  -->  00:05:04,591
What that does is it prints out everything,
96

96

00:05:04,591  -->  00:05:06,469
until it hits that new line,
97

97

00:05:06,469  -->  00:05:09,423
and then it prints everything else afterwards,
98

98

00:05:09,423  -->  00:05:11,741
so it's able to break up your print statement
99

99

00:05:11,741  -->  00:05:13,408
into multiple lines.
100

100

00:05:15,296  -->  00:05:19,129
Another feature that uses that backslash is t,
101

101

00:05:20,273  -->  00:05:21,455
which stands for tab.
102

102

00:05:21,455  -->  00:05:24,809
So if I run this, it'll actually insert a tab,
103

103

00:05:24,809  -->  00:05:28,976
those five spaces in between where that backslash t was.
104

104

00:05:29,848  -->  00:05:32,150
That's just something to be aware of.
105

105

00:05:32,150  -->  00:05:32,983
Okay.
106

106

00:05:33,893  -->  00:05:37,746
If we hop over to the Jupyter notebook,
107

107

00:05:37,746  -->  00:05:40,913
you'll notice there's a Python 3 alert
108

108

00:05:41,961  -->  00:05:43,973
when it comes to printing.
109

109

00:05:43,973  -->  00:05:45,245
Let's go ahead and take a better look
110

110

00:05:45,245  -->  00:05:49,237
at what that's actually talking about.
111

111

00:05:49,237  -->  00:05:50,346
Python 3 alerts.
112

112

00:05:50,346  -->  00:05:52,891
There's something to note, if you're using Python 3
113

113

00:05:52,891  -->  00:05:56,182
versus Python 2, print is a function,
114

114

00:05:56,182  -->  00:05:57,731
not a statement anymore.
115

115

00:05:57,731  -->  00:06:00,128
If you notice earlier, we've been printing things
116

116

00:06:00,128  -->  00:06:04,245
with print, space, and then that string.
117

117

00:06:04,245  -->  00:06:07,987
In Python 2, your print statements are actually gonna be
118

118

00:06:07,987  -->  00:06:11,423
print functions and they're gonna look like this.
119

119

00:06:11,423  -->  00:06:14,090
They're gonna say print, parentheses,
120

120

00:06:14,090  -->  00:06:15,889
whatever string you want to print,
121

121

00:06:15,889  -->  00:06:17,777
and then close parentheses.
122

122

00:06:17,777  -->  00:06:19,786
That happens to be a point of confusion
123

123

00:06:19,786  -->  00:06:21,794
because a lot of times you start tutorials
124

124

00:06:21,794  -->  00:06:24,655
that are either in Python 3 or Python 2
125

125

00:06:24,655  -->  00:06:26,880
and one of the very first assignments you have to do
126

126

00:06:26,880  -->  00:06:29,718
is print hello world and people get confused
127

127

00:06:29,718  -->  00:06:33,102
based on what version they're using.
128

128

00:06:33,102  -->  00:06:37,132
You can go ahead and fix this, if you're using Python 2,
129

129

00:06:37,132  -->  00:06:39,159
but want to use the print function.
130

130

00:06:39,159  -->  00:06:42,757
Just as before, you can import from the future module
131

131

00:06:42,757  -->  00:06:44,990
and we'll go over modules later on in the course,
132

132

00:06:44,990  -->  00:06:49,157
but if you want to be printing using Python 3 functions
133

133

00:06:51,144  -->  00:06:54,257
instead of Python 2, you can put this line in your code,
134

134

00:06:54,257  -->  00:06:56,807
from underscore underscore future underscore underscore
135

135

00:06:56,807  -->  00:07:00,745
space import space print underscore function,
136

136

00:07:00,745  -->  00:07:04,912
and that will import this functionality into your Python 2.
137

137

00:07:07,232  -->  00:07:10,444
Up next we're gonna be learning about string basics,
138

138

00:07:10,444  -->  00:07:13,327
such as length and string indexing.
139

139

00:07:13,327  -->  00:07:16,077
I won't go ahead and import this,
140

140

00:07:17,315  -->  00:07:19,795
I'll keep using the Python 2 notation,
141

141

00:07:19,795  -->  00:07:22,307
but if you're using Python 3, just keep in mind
142

142

00:07:22,307  -->  00:07:25,952
this is what your print functions are gonna look like.
143

143

00:07:25,952  -->  00:07:27,838
If your using Python 2 you can
144

144

00:07:27,838  -->  00:07:31,789
import that functionality with that statement.
145

145

00:07:31,789  -->  00:07:36,214
Let's go ahead and move along to some string basics.
146

146

00:07:36,214  -->  00:07:39,096
We can use a function called len
147

147

00:07:39,096  -->  00:07:41,479
to check the length of a string.
148

148

00:07:41,479  -->  00:07:45,646
I can say, hello world, close it off with single quotes,
149

149

00:07:49,313  -->  00:07:53,480
and then I can put that inside a length function, len.
150

150

00:07:55,860  -->  00:08:00,186
The way that's gonna look is, len open parentheses,
151

151

00:08:00,186  -->  00:08:02,818
whatever that string is, close parentheses.
152

152

00:08:02,818  -->  00:08:06,132
If I run that, it counts the length of the string.
153

153

00:08:06,132  -->  00:08:09,565
Keep in mind, as I said before, the strings are a sequence.
154

154

00:08:09,565  -->  00:08:13,266
That means that Python can use indexes
155

155

00:08:13,266  -->  00:08:15,018
to call parts of that sequence.
156

156

00:08:15,018  -->  00:08:18,087
That also means that Python is taking to account
157

157

00:08:18,087  -->  00:08:21,420
that middle space as part of it's count.
158

158

00:08:23,625  -->  00:08:26,518
If you count this here, there's 10 letters,
159

159

00:08:26,518  -->  00:08:29,956
but that space counts as another part of that sequence,
160

160

00:08:29,956  -->  00:08:34,345
so the total count of that length of that string is 11.
161

161

00:08:34,345  -->  00:08:38,095
Alright, so let's go ahead and assign a label
162

162

00:08:40,207  -->  00:08:41,832
and create a variable, here.
163

163

00:08:41,832  -->  00:08:45,249
I'm gonna say, s is equal to hello world.
164

164

00:08:47,856  -->  00:08:51,757
Now if I call that s, either by printing it
165

165

00:08:51,757  -->  00:08:55,924
or just calling s there, s has been assigned hello world.
166

166

00:08:57,668  -->  00:08:58,501
Great.
167

167

00:08:59,861  -->  00:09:03,274
Lets go ahead and start indexing.
168

168

00:09:03,274  -->  00:09:06,024
Indexing uses brackets in Python.
169

169

00:09:07,648  -->  00:09:11,815
The way this is gonna work is I can say s, open bracket,
170

170

00:09:13,263  -->  00:09:16,259
the index number, close brackets,
171

171

00:09:16,259  -->  00:09:19,495
and that will return the first element.
172

172

00:09:19,495  -->  00:09:21,163
So something to note in Python
173

173

00:09:21,163  -->  00:09:23,830
is that indexing starts at zero.
174

174

00:09:24,792  -->  00:09:27,865
Like I said before, each of these letters
175

175

00:09:27,865  -->  00:09:30,939
and spaces in this string is part of a sequence.
176

176

00:09:30,939  -->  00:09:33,442
So Python is thinking of this capital h
177

177

00:09:33,442  -->  00:09:35,145
as being in the zero part of the sequence,
178

178

00:09:35,145  -->  00:09:37,488
e as being in the one part of the sequence,
179

179

00:09:37,488  -->  00:09:40,892
two, three, four, so on and so on.
180

180

00:09:40,892  -->  00:09:43,659
Let's say I wanted to get that second letter,
181

181

00:09:43,659  -->  00:09:46,479
which if we're counting from index zero,
182

182

00:09:46,479  -->  00:09:51,382
that's gonna be bracket one, then that can be e there.
183

183

00:09:51,382  -->  00:09:52,965
Great.
184

184

00:09:52,965  -->  00:09:54,421
We can also perform slicing
185

185

00:09:54,421  -->  00:09:58,269
and slicing grabs everything up to a designated point
186

186

00:09:58,269  -->  00:10:02,148
and the syntax for that is using a colon.
187

187

00:10:02,148  -->  00:10:04,648
I'll show you a quick example.
188

188

00:10:06,480  -->  00:10:10,230
Let's go ahead and grab that s, open bracket,
189

189

00:10:13,852  -->  00:10:16,019
one, colon, close bracket.
190

190

00:10:18,479  -->  00:10:20,810
Before we actually run this, let's break down
191

191

00:10:20,810  -->  00:10:22,657
what Python's gonna say.
192

192

00:10:22,657  -->  00:10:27,066
It's gonna say, for this s object, which is hello world,
193

193

00:10:27,066  -->  00:10:31,066
grab everything from that first, that one index,
194

194

00:10:32,532  -->  00:10:34,949
and this colon means onwards.
195

195

00:10:37,077  -->  00:10:40,835
This will grab everything from one all the way to the end
196

196

00:10:40,835  -->  00:10:42,590
and since indexing starts at zero,
197

197

00:10:42,590  -->  00:10:45,340
that's gonna be ello space world.
198

198

00:10:46,968  -->  00:10:49,131
If you notice, something to keep in mind
199

199

00:10:49,131  -->  00:10:52,699
is right now there's no change to that original string.
200

200

00:10:52,699  -->  00:10:57,362
We're just grabbing part of it with this notation.
201

201

00:10:57,362  -->  00:11:01,529
Okay, so you can also say grab everything up to something.
202

202

00:11:04,300  -->  00:11:08,467
Let's say I wanted to grab everything up to the third index.
203

203

00:11:10,210  -->  00:11:12,127
That will give you hel.
204

204

00:11:13,814  -->  00:11:17,278
To keep in mind, it's everything up to the third index.
205

205

00:11:17,278  -->  00:11:19,430
If I look at hello world again, let's just go ahead
206

206

00:11:19,430  -->  00:11:22,263
and show s, that's zero, one, two.
207

207

00:11:25,383  -->  00:11:29,489
If I say colon to three, that says grab everything,
208

208

00:11:29,489  -->  00:11:31,335
that's what the colon stands for,
209

209

00:11:31,335  -->  00:11:33,885
up to that third index.
210

210

00:11:33,885  -->  00:11:36,410
Remember it's up to, it doesn't actually include it,
211

211

00:11:36,410  -->  00:11:38,188
which is why we only get three letters back.
212

212

00:11:38,188  -->  00:11:41,500
The zero, the one, and the two index.
213

213

00:11:41,500  -->  00:11:44,239
Just to reiterate, here we're telling Python
214

214

00:11:44,239  -->  00:11:46,599
to grab everything from zero up to three,
215

215

00:11:46,599  -->  00:11:48,745
not including the third index.
216

216

00:11:48,745  -->  00:11:50,722
You'll notice this a lot in Python.
217

217

00:11:50,722  -->  00:11:52,705
A lot of the statements and usually a lot
218

218

00:11:52,705  -->  00:11:56,713
of the indexing statements are in the context of up to,
219

219

00:11:56,713  -->  00:11:58,213
but not including.
220

220

00:12:02,550  -->  00:12:04,925
Hopping back to that colon notation.
221

221

00:12:04,925  -->  00:12:07,213
If I wanted to grab everything,
222

222

00:12:07,213  -->  00:12:11,380
then I can just say colon and that says grab everything.
223

223

00:12:13,478  -->  00:12:16,016
Something that's really nice about indexing
224

224

00:12:16,016  -->  00:12:18,855
is that we can also go backwards.
225

225

00:12:18,855  -->  00:12:22,957
If you imagine that this string is almost like a loop,
226

226

00:12:22,957  -->  00:12:27,130
if h is zero, then negative one or one backwards
227

227

00:12:27,130  -->  00:12:31,297
would be the last letter or element in that string.
228

228

00:12:32,581  -->  00:12:36,258
So I can say s, bracket, negative one
229

229

00:12:36,258  -->  00:12:37,986
and that will return d.
230

230

00:12:37,986  -->  00:12:39,269
So that's the last letter.
231

231

00:12:39,269  -->  00:12:40,634
So one index behind zero,
232

232

00:12:40,634  -->  00:12:43,801
it loops back around and grabs that d.
233

233

00:12:45,088  -->  00:12:47,960
I can also use that same notation to, let's say,
234

234

00:12:47,960  -->  00:12:50,388
grab everything but the last letter.
235

235

00:12:50,388  -->  00:12:52,555
I can say grab everything,
236

236

00:12:55,797  -->  00:12:57,762
but that last letter there.
237

237

00:12:57,762  -->  00:13:01,929
So that will be hello worl, without that d at the end.
238

238

00:13:03,872  -->  00:13:06,405
Another thing we can use indexing and slice notation
239

239

00:13:06,405  -->  00:13:10,072
is to grab elements of a sequence by a specified step size.
240

240

00:13:10,072  -->  00:13:13,739
If you notice right now, the default is one,
241

241

00:13:15,464  -->  00:13:19,066
but we can use two colons in a row and then a number
242

242

00:13:19,066  -->  00:13:22,192
to specify a frequency to grab elements.
243

243

00:13:22,192  -->  00:13:25,442
What I mean by that is a quick example.
244

244

00:13:26,769  -->  00:13:30,269
I could say square brackets, colon, colon,
245

245

00:13:31,273  -->  00:13:35,106
so that means grab everything up to everything
246

246

00:13:36,537  -->  00:13:39,610
and that third number is gonna specify the frequency,
247

247

00:13:39,610  -->  00:13:40,970
so in step size.
248

248

00:13:40,970  -->  00:13:43,450
So right now this will be everything,
249

249

00:13:43,450  -->  00:13:47,617
so grab everything, that colon, colon in step sizes of one.
250

250

00:13:50,087  -->  00:13:53,086
But I could also say go in steps of two.
251

251

00:13:53,086  -->  00:13:56,503
I could say, colon, colon, step size two.
252

252

00:13:59,008  -->  00:14:02,405
Now that's pretty much gonna grab every other element
253

253

00:14:02,405  -->  00:14:04,488
or letter in that string.
254

254

00:14:06,473  -->  00:14:10,064
Something you can also do is use that same notation
255

255

00:14:10,064  -->  00:14:12,211
to print that string backwards.
256

256

00:14:12,211  -->  00:14:16,599
I can say grab from the beginning of everything
257

257

00:14:16,599  -->  00:14:20,224
to the end of everything, but your step size
258

258

00:14:20,224  -->  00:14:22,973
is gonna be negative one, so that's actually telling Python
259

259

00:14:22,973  -->  00:14:27,140
to traverse the string backwards and it's actually gone
260

260

00:14:28,211  -->  00:14:31,062
and printed out that string in reverse.
261

261

00:14:31,062  -->  00:14:35,229
This is just a simple notation for reversing a string.
262

262

00:14:38,869  -->  00:14:41,658
These double colon notation methods
263

263

00:14:41,658  -->  00:14:45,718
are not super common, but this reversing of a string
264

264

00:14:45,718  -->  00:14:48,517
is a pretty quick and common way,
265

265

00:14:48,517  -->  00:14:52,115
at least this particular line is pretty common.
266

266

00:14:52,115  -->  00:14:54,313
These other ones are not super common,
267

267

00:14:54,313  -->  00:14:55,773
but it's important to know them
268

268

00:14:55,773  -->  00:14:58,801
in case you ever find yourself needing them in your code.
269

269

00:14:58,801  -->  00:14:59,634
Alright.
270

270

00:15:00,722  -->  00:15:05,580
Let's go ahead and learn about some string properties.
271

271

00:15:05,580  -->  00:15:06,524
Something that's important to note
272

272

00:15:06,524  -->  00:15:11,500
is that strings have a property known as immutability
273

273

00:15:11,500  -->  00:15:13,363
and the way you spell that
274

274

00:15:13,363  -->  00:15:16,780
is i m m u t a b i l i t y, immutability.
275

275

00:15:21,945  -->  00:15:24,463
What this means is that once that string is created
276

276

00:15:24,463  -->  00:15:27,940
the elements within it can't be changed or replaced.
277

277

00:15:27,940  -->  00:15:32,107
For example, remember s currently stands for hello world.
278

278

00:15:33,737  -->  00:15:35,240
Let's say you wanted to try to change
279

279

00:15:35,240  -->  00:15:37,798
the first letter to x instead of h.
280

280

00:15:37,798  -->  00:15:40,427
You might think you'd be able to say,
281

281

00:15:40,427  -->  00:15:43,594
hey, that zero one, set it equal to x.
282

282

00:15:46,145  -->  00:15:48,666
But if you notice, we get an error.
283

283

00:15:48,666  -->  00:15:51,899
The type error is string object
284

284

00:15:51,899  -->  00:15:54,548
does not support item assignment.
285

285

00:15:54,548  -->  00:15:57,026
As you go along in learning Python,
286

286

00:15:57,026  -->  00:15:59,373
these errors are gonna be super helpful
287

287

00:15:59,373  -->  00:16:02,777
to find out what you're doing wrong in your code.
288

288

00:16:02,777  -->  00:16:04,905
Something that's always important to remember for strings
289

289

00:16:04,905  -->  00:16:06,282
is that they're immutable.
290

290

00:16:06,282  -->  00:16:09,430
Once it's created, you can't go around changing
291

291

00:16:09,430  -->  00:16:12,465
the particular elements in the sequence.
292

292

00:16:12,465  -->  00:16:15,498
What you can do, though, is concatenate strings together.
293

293

00:16:15,498  -->  00:16:18,261
So you can add on to them, you can't just change
294

294

00:16:18,261  -->  00:16:20,335
what's already there, though.
295

295

00:16:20,335  -->  00:16:22,695
What I mean by concatenating is,
296

296

00:16:22,695  -->  00:16:25,807
let's say you have s, you can use the plus symbol
297

297

00:16:25,807  -->  00:16:27,744
to concatenate strings together.
298

298

00:16:27,744  -->  00:16:30,913
So I can say s plus and then let's go ahead
299

299

00:16:30,913  -->  00:16:32,337
and make another string, so I can say
300

300

00:16:32,337  -->  00:16:35,532
concatenate me, which is basically
301

301

00:16:35,532  -->  00:16:38,199
just saying to stick it onto it.
302

302

00:16:39,614  -->  00:16:43,951
Here I have hello world, space, concatenate me.
303

303

00:16:43,951  -->  00:16:47,451
While I can't change particular elements in that string,
304

304

00:16:47,451  -->  00:16:50,618
I can add onto it, so that is allowed.
305

305

00:16:51,724  -->  00:16:54,496
I can also reassign s completely.
306

306

00:16:54,496  -->  00:16:58,477
Just as we saw earlier in some previous lectures,
307

307

00:16:58,477  -->  00:17:01,977
I could say s equals s plus concatenate me
308

308

00:17:03,352  -->  00:17:07,044
and now if I run that and I check what s is,
309

309

00:17:07,044  -->  00:17:10,920
now s is equal to hello world, space, concatenate me.
310

310

00:17:10,920  -->  00:17:11,753
Great.
311

311

00:17:12,878  -->  00:17:16,447
Some other arithmetic symbols you can use for strings
312

312

00:17:16,447  -->  00:17:18,393
is the multiplication symbol.
313

313

00:17:18,393  -->  00:17:21,810
For instance, if I say letter is equal to
314

314

00:17:23,610  -->  00:17:26,871
the string just z and then if you notice
315

315

00:17:26,871  -->  00:17:30,567
I call letter as that variable and I get z.
316

316

00:17:30,567  -->  00:17:33,150
Then, if I say letter times 10,
317

317

00:17:36,049  -->  00:17:40,102
Python's gonna print that letter 10 more times
318

318

00:17:40,102  -->  00:17:42,697
or 10 times the original amount, whatever it happens to be.
319

319

00:17:42,697  -->  00:17:46,447
So then if I say, let's say letter equals zz.
320

320

00:17:47,419  -->  00:17:49,238
Print out that letter check.
321

321

00:17:49,238  -->  00:17:53,405
Now I've printed 10, so now it's double as many times.
322

322

00:17:54,280  -->  00:17:56,928
Okay and now we're gonna wrap up our method
323

323

00:17:56,928  -->  00:18:00,761
with a quick introduction to built in strings.
324

324

00:18:03,591  -->  00:18:06,733
Excuse me, built in string methods.
325

325

00:18:06,733  -->  00:18:09,455
Objects in Python, they usually have built in methods.
326

326

00:18:09,455  -->  00:18:11,011
These methods are basically
327

327

00:18:11,011  -->  00:18:13,072
just functions inside the objects.
328

328

00:18:13,072  -->  00:18:16,950
We'll go into all that in much more depth later on,
329

329

00:18:16,950  -->  00:18:18,698
but they basically allow us to perform
330

330

00:18:18,698  -->  00:18:22,017
actions or commands on the objects itself.
331

331

00:18:22,017  -->  00:18:26,040
Let's go ahead and create or reassign s again,
332

332

00:18:26,040  -->  00:18:27,540
just to say hello.
333

333

00:18:28,546  -->  00:18:30,859
Here I have s equal to hello
334

334

00:18:30,859  -->  00:18:34,013
and the syntax for methods on objects
335

335

00:18:34,013  -->  00:18:38,180
is going to be whatever that object label name is,
336

336

00:18:39,028  -->  00:18:43,054
in our case s dot and then you call the method on it.
337

337

00:18:43,054  -->  00:18:46,852
One of the most simple methods for strings
338

338

00:18:46,852  -->  00:18:49,284
is to upper case a string.
339

339

00:18:49,284  -->  00:18:53,451
That method is known as upper, close parentheses there.
340

340

00:18:54,798  -->  00:18:56,508
Basically, what this is doing is it's saying
341

341

00:18:56,508  -->  00:19:00,675
okay, take my string s, that period or decimal point
342

342

00:19:01,947  -->  00:19:03,401
is an indicator that I want to call a method
343

343

00:19:03,401  -->  00:19:07,860
on that object and then the method I'm using is upper.
344

344

00:19:07,860  -->  00:19:10,107
I'm gonna say close parentheses because I'm not gonna add
345

345

00:19:10,107  -->  00:19:13,037
what are called arguments into that method.
346

346

00:19:13,037  -->  00:19:15,559
What that does is it basically
347

347

00:19:15,559  -->  00:19:18,142
upper cases that entire string.
348

348

00:19:19,120  -->  00:19:20,622
The reason we're using Jupyter notebooks
349

349

00:19:20,622  -->  00:19:24,836
and that's super awesome, is you'll see if I click tab,
350

350

00:19:24,836  -->  00:19:28,421
right after that decimal or a period, I get a list
351

351

00:19:28,421  -->  00:19:32,443
of all the different methods I can use on my strings.
352

352

00:19:32,443  -->  00:19:34,046
If you want you can go ahead and check out
353

353

00:19:34,046  -->  00:19:36,054
the advanced string lectures and we'll go over
354

354

00:19:36,054  -->  00:19:38,753
and break down a lot of these different methods
355

355

00:19:38,753  -->  00:19:41,586
that are super useful for strings.
356

356

00:19:43,262  -->  00:19:45,826
A couple more methods I want to show you
357

357

00:19:45,826  -->  00:19:49,409
is lower and I can close parentheses there.
358

358

00:19:50,603  -->  00:19:54,361
That will lower that string again, so you'll notice here
359

359

00:19:54,361  -->  00:19:58,076
that capital h is now lower case h.
360

360

00:19:58,076  -->  00:20:00,829
Another thing is I can split a string.
361

361

00:20:00,829  -->  00:20:04,996
I can say, s dot the split method, close parentheses
362

362

00:20:09,191  -->  00:20:11,878
and if you notice here, nothing happens.
363

363

00:20:11,878  -->  00:20:13,996
It's returning a list, which we'll learn about in
364

364

00:20:13,996  -->  00:20:18,163
a little bit, but I can say split by a particular element.
365

365

00:20:20,490  -->  00:20:23,427
I can say split by e and now you'll notice
366

366

00:20:23,427  -->  00:20:26,427
it's returned a list of that string,
367

367

00:20:28,250  -->  00:20:30,549
but it split it where that e occurred.
368

368

00:20:30,549  -->  00:20:33,186
I have h as an element and now llo
369

369

00:20:33,186  -->  00:20:34,976
as another element in that list.
370

370

00:20:34,976  -->  00:20:38,559
We'll be going over lists in just a second.
371

371

00:20:39,797  -->  00:20:40,630
Great.
372

372

00:20:41,844  -->  00:20:45,594
That's about it as far as strings in general.
373

373

00:20:46,624  -->  00:20:48,776
We'll be working with them a tonne in Python,
374

374

00:20:48,776  -->  00:20:52,404
so go ahead and review the Jupyter notebook
375

375

00:20:52,404  -->  00:20:54,338
that goes along with this lecture.
376

376

00:20:54,338  -->  00:20:55,815
Make sure you understand everything
377

377

00:20:55,815  -->  00:20:59,932
and we'll be recovering and regoing over strings
378

378

00:20:59,932  -->  00:21:01,845
as we move along in the course.
379

379

00:21:01,845  -->  00:21:04,053
Great and like I said earlier,
380

380

00:21:04,053  -->  00:21:06,161
if you wanna learn more about some of these methods,
381

381

00:21:06,161  -->  00:21:08,887
go ahead and check out the advanced strings lecture.
382

382

00:21:08,887  -->  00:21:12,888
Okay, thanks and I'll see you at the next lecture.
