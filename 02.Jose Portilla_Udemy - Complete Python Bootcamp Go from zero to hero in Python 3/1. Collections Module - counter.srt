1
1

00:00:01,151  -->  00:00:02,647
<v Instructor>Hello everyone, and welcome</v>
2

2

00:00:02,647  -->  00:00:05,073
to this lecture on the collections module.
3

3

00:00:05,073  -->  00:00:06,836
So the collections module is actually
4

4

00:00:06,836  -->  00:00:08,909
my personal favourite built-in module
5

5

00:00:08,909  -->  00:00:09,768
and it implements a bunch
6

6

00:00:09,768  -->  00:00:12,496
of specialised container datatypes.
7

7

00:00:12,496  -->  00:00:14,997
So we'll be learning about these various datatypes
8

8

00:00:14,997  -->  00:00:18,914
and there are going to be counter, defaultdict,
9

9

00:00:19,824  -->  00:00:22,243
ordereddict, which is just an order dictionary,
10

10

00:00:22,243  -->  00:00:23,679
we'll look a little more into
11

11

00:00:23,679  -->  00:00:25,950
equality with an ordered dictionary,
12

12

00:00:25,950  -->  00:00:28,240
and then we'll also look at some namedtuples.
13

13

00:00:28,240  -->  00:00:30,361
Alright, so let's go ahead and get started.
14

14

00:00:30,361  -->  00:00:32,427
As always the Jupyter notebook's available for you
15

15

00:00:32,427  -->  00:00:34,553
in case you want to read the notes along,
16

16

00:00:34,553  -->  00:00:37,725
but we'll go ahead and get started with the live code.
17

17

00:00:37,725  -->  00:00:40,892
Okay, so let's start off with counter.
18

18

00:00:42,137  -->  00:00:44,634
So counter is basically a dictionary subclass
19

19

00:00:44,634  -->  00:00:47,450
which helps count hashable objects,
20

20

00:00:47,450  -->  00:00:49,168
and let's see how it can be used.
21

21

00:00:49,168  -->  00:00:50,430
So the first thing we're going to do
22

22

00:00:50,430  -->  00:00:53,847
is say "from collections import Counter".
23

23

00:00:56,929  -->  00:00:59,382
Okay, now that it's imported what we're going to see
24

24

00:00:59,382  -->  00:01:01,922
is that inside of the counter it's elements
25

25

00:01:01,922  -->  00:01:04,154
are stored as dictionary keys and then the count
26

26

00:01:04,154  -->  00:01:07,164
of the objects are stored as the value.
27

27

00:01:07,164  -->  00:01:08,701
So let's go ahead and make a list here,
28

28

00:01:08,701  -->  00:01:11,299
I'll call this list "l".
29

29

00:01:11,299  -->  00:01:13,866
And I'm going to put in a bunch of numbers,
30

30

00:01:13,866  -->  00:01:15,595
most of them repeated,
31

31

00:01:15,595  -->  00:01:17,839
doesn't really matter here, but you'll see
32

32

00:01:17,839  -->  00:01:22,006
how counter works when I call it on that list "l".
33

33

00:01:24,034  -->  00:01:25,843
So now what counter does is it counts
34

34

00:01:25,843  -->  00:01:28,598
the number of occurrences of each of these objects,
35

35

00:01:28,598  -->  00:01:31,106
or elements, in that list.
36

36

00:01:31,106  -->  00:01:34,335
So two showed up five times, one showed up four,
37

37

00:01:34,335  -->  00:01:36,209
four showed up four, three three,
38

38

00:01:36,209  -->  00:01:38,313
five three, twelve once.
39

39

00:01:38,313  -->  00:01:40,091
Okay, so that's how you can quickly count
40

40

00:01:40,091  -->  00:01:42,945
the number of elements in a list
41

41

00:01:42,945  -->  00:01:45,749
and it basically acts as a dictionary.
42

42

00:01:45,749  -->  00:01:47,808
So let's look now at counter with strings.
43

43

00:01:47,808  -->  00:01:49,619
So I'm going to make a string,
44

44

00:01:49,619  -->  00:01:52,178
"s", and it's going to be a bunch
45

45

00:01:52,178  -->  00:01:55,730
of random letters here that I'm quickly typing,
46

46

00:01:55,730  -->  00:01:58,298
and then I'm going to call counter on "s",
47

47

00:01:58,298  -->  00:02:00,533
and what that's going to do is count
48

48

00:02:00,533  -->  00:02:03,784
again the number of elements in this iterable here
49

49

00:02:03,784  -->  00:02:05,952
which is a string, so s shows up nine,
50

50

00:02:05,952  -->  00:02:10,373
a shows up six, b shows up six times, v shows up four.
51

51

00:02:10,373  -->  00:02:13,527
Okay, now let's work with counter
52

52

00:02:13,527  -->  00:02:15,363
and the words in a sentence.
53

53

00:02:15,363  -->  00:02:17,169
So let's say you wanted to count
54

54

00:02:17,169  -->  00:02:19,918
how many times each word shows up in a sentence.
55

55

00:02:19,918  -->  00:02:22,087
So I'm going to make a string
56

56

00:02:22,087  -->  00:02:25,254
and say "how many times does each word
57

57

00:02:26,507  -->  00:02:30,257
"show up in this sentence word word shoe up",
58

58

00:02:33,559  -->  00:02:37,726
well "shoe up" put in "show" and then we'll stop that there.
59

59

00:02:42,426  -->  00:02:44,903
Okay, so if I wanted to count the number of words
60

60

00:02:44,903  -->  00:02:47,484
and how many times they showed up
61

61

00:02:47,484  -->  00:02:51,002
I could do this, I could say "words", we could
62

62

00:02:51,002  -->  00:02:54,752
go ahead and split that string by white space
63

63

00:02:58,594  -->  00:03:01,894
and then call counter on the words,
64

64

00:03:01,894  -->  00:03:04,672
object that I just made.
65

65

00:03:04,672  -->  00:03:07,147
And now the counter's going to be this dictionary
66

66

00:03:07,147  -->  00:03:08,846
and has counted up the amount of times
67

67

00:03:08,846  -->  00:03:10,529
each word has shown up.
68

68

00:03:10,529  -->  00:03:12,392
So that's gonna to be really useful if you ever
69

69

00:03:12,392  -->  00:03:15,359
find yourself trying to parse through some sort of text
70

70

00:03:15,359  -->  00:03:18,961
or even doing natural language processing techniques.
71

71

00:03:18,961  -->  00:03:22,290
Okay, now let's look at methods of counter.
72

72

00:03:22,290  -->  00:03:26,040
So if I say, "c" is equal to counter of words
73

73

00:03:31,354  -->  00:03:33,225
I can actually call various methods on it,
74

74

00:03:33,225  -->  00:03:36,769
so I can say, "Hey what are the most common words?",
75

75

00:03:36,769  -->  00:03:38,933
and then I can pass in an argument here.
76

76

00:03:38,933  -->  00:03:41,429
So I can say, "Show me the two most common words",
77

77

00:03:41,429  -->  00:03:44,114
and it'll return this list of tuple pairs.
78

78

00:03:44,114  -->  00:03:47,550
And I can even ask for the three most common words etc.
79

79

00:03:47,550  -->  00:03:49,787
So I'm going to hop over to the Jupyter notebook
80

80

00:03:49,787  -->  00:03:52,837
and walk through some common patterns
81

81

00:03:52,837  -->  00:03:55,925
that you might be using when you use the counter objects.
82

82

00:03:55,925  -->  00:03:58,508
So, one of them is just the sum
83

83

00:04:01,617  -->  00:04:05,556
of the values, so you'll get the total of all counts.
84

84

00:04:05,556  -->  00:04:09,723
So if I go back here and ask for the sum of c.values
85

85

00:04:13,521  -->  00:04:17,468
that'll tell me the total words in that string.
86

86

00:04:17,468  -->  00:04:19,347
We can also do some other methods
87

87

00:04:19,347  -->  00:04:20,635
that I actually won't implement here
88

88

00:04:20,635  -->  00:04:24,433
because they might interact with each other.
89

89

00:04:24,433  -->  00:04:25,908
You could reset all the counts
90

90

00:04:25,908  -->  00:04:29,369
by calling the "clear" method on that counter object.
91

91

00:04:29,369  -->  00:04:31,523
You could call "list" on that counter object
92

92

00:04:31,523  -->  00:04:34,725
to get a list of the unique elements.
93

93

00:04:34,725  -->  00:04:38,099
You could call "set" to convert it to a set.
94

94

00:04:38,099  -->  00:04:39,975
Sometimes you may just want to convert it
95

95

00:04:39,975  -->  00:04:42,028
into a normal dictionary.
96

96

00:04:42,028  -->  00:04:45,117
You could call "items" on the counter object
97

97

00:04:45,117  -->  00:04:46,415
and that will convert to a list
98

98

00:04:46,415  -->  00:04:49,505
of these elements and count pairs.
99

99

00:04:49,505  -->  00:04:52,275
You can also call the dictionary
100

100

00:04:52,275  -->  00:04:55,913
on list of pairs and counter, and that basically
101

101

00:04:55,913  -->  00:04:59,595
will convert from a list of element count pairs,
102

102

00:04:59,595  -->  00:05:02,245
instead of "to" it'll convert "from"
103

103

00:05:02,245  -->  00:05:04,590
so you'll have basically this list of pairs
104

104

00:05:04,590  -->  00:05:06,801
which you get out of c.items.
105

105

00:05:06,801  -->  00:05:09,066
You could call dictionary on it and call counter on it
106

106

00:05:09,066  -->  00:05:12,525
and this is just the inverse of the c.items.
107

107

00:05:12,525  -->  00:05:15,956
Then again, like I mentioned, you have "most common",
108

108

00:05:15,956  -->  00:05:18,566
and you can actually use string indexing
109

109

00:05:18,566  -->  00:05:20,525
to get the least common elements
110

110

00:05:20,525  -->  00:05:22,307
with this sort of notation.
111

111

00:05:22,307  -->  00:05:23,687
So this notation will allow you to get
112

112

00:05:23,687  -->  00:05:25,514
the "n least common elements",
113

113

00:05:25,514  -->  00:05:29,135
so you can plug in whatever number you want there for "n".
114

114

00:05:29,135  -->  00:05:30,470
And then finally, you can also remove zero
115

115

00:05:30,470  -->  00:05:34,470
and negative counts by using this notation here.
116

116

00:05:35,712  -->  00:05:39,651
Okay, so that's it as far as the counter object.
117

117

00:05:39,651  -->  00:05:41,344
Up next in this section what we're going to be
118

118

00:05:41,344  -->  00:05:45,103
learning about is the default dictionary.
119

119

00:05:45,103  -->  00:05:46,622
Alright, thanks everyone
120

120

00:05:46,622  -->  00:05:49,595
and I'll see you at the next lecture.
