WEBVTT
1
1

00:00:01.530  -->  00:00:02.363
<v Voiceover>Hello everyone,</v>
2

2

00:00:02.363  -->  00:00:04.981
and welcome to the namedtuple lecture.
3

3

00:00:04.981  -->  00:00:07.120
So this lecture will be the last lecture
4

4

00:00:07.120  -->  00:00:08.981
in the collections module series.
5

5

00:00:08.981  -->  00:00:11.561
And we'll be learning about the namedtuple.
6

6

00:00:11.561  -->  00:00:14.589
So, let's first start with a standard tuple.
7

7

00:00:14.589  -->  00:00:19.311
If I say t is equal to parentheses, one, two, three,
8

8

00:00:19.311  -->  00:00:21.331
and then I can use indexing
9

9

00:00:21.331  -->  00:00:24.430
to grab elements from that tuple.
10

10

00:00:24.430  -->  00:00:28.082
And for most cases, that's usually enough.
11

11

00:00:28.082  -->  00:00:31.701
However, remembering which index should be used
12

12

00:00:31.701  -->  00:00:33.721
is sometimes hard to remember.
13

13

00:00:33.721  -->  00:00:35.791
So, if you haven't seen this tuple in a while,
14

14

00:00:35.791  -->  00:00:38.501
throughout your code, you may not know which index,
15

15

00:00:38.501  -->  00:00:40.880
in case these values are each associated
16

16

00:00:40.880  -->  00:00:45.047
for a particular element or variable throughout your code.
17

17

00:00:46.917  -->  00:00:48.980
So especially if the tuple has lots of fields,
18

18

00:00:48.980  -->  00:00:51.380
and it's been constructed far away,
19

19

00:00:51.380  -->  00:00:54.910
using just a normal tuple may lead to errors.
20

20

00:00:54.910  -->  00:00:57.999
So, what a namedtuple does, it assigns names,
21

21

00:00:57.999  -->  00:01:01.750
as well as a numerical index, to each member in the tuple.
22

22

00:01:01.750  -->  00:01:03.632
And the way I like to think of tuples,
23

23

00:01:03.632  -->  00:01:05.541
that basically, each kind of namedtuple
24

24

00:01:05.541  -->  00:01:09.789
is almost like creating a class very quickly.
25

25

00:01:09.789  -->  00:01:13.639
So it's created by using the namedtuple factory function.
26

26

00:01:13.639  -->  00:01:16.806
So, I'm gonna say import, collections.
27

27

00:01:18.278  -->  00:01:21.711
Actually, let's just import from collections.
28

28

00:01:21.711  -->  00:01:25.711
So I'll say, from collections import namedtuple.
29

29

00:01:26.839  -->  00:01:27.920
And then I'll show you the context
30

30

00:01:27.920  -->  00:01:30.087
for creating a namedtuple.
31

31

00:01:31.078  -->  00:01:34.740
So I'm gonna make Dog, and I'm gonna capitalise this,
32

32

00:01:34.740  -->  00:01:36.450
because you can think of this as just quickly creating
33

33

00:01:36.450  -->  00:01:39.200
a new class, you call namedtuple.
34

34

00:01:42.910  -->  00:01:45.140
And then there's gonna be two arguments here.
35

35

00:01:45.140  -->  00:01:49.990
The first one is the name of the class that you're creating.
36

36

00:01:49.990  -->  00:01:53.073
So I will say, it will be called Dog.
37

37

00:01:54.480  -->  00:01:56.710
And then, you're gonna pass a string,
38

38

00:01:56.710  -->  00:01:59.543
with the various attribute fields.
39

39

00:02:00.500  -->  00:02:04.529
So these are almost like the self dot attributes of a class.
40

40

00:02:04.529  -->  00:02:06.860
And it's a bit strange, as far as the syntax.
41

41

00:02:06.860  -->  00:02:08.691
But you pass it all as one string,
42

42

00:02:08.691  -->  00:02:11.791
with spaces in between the names of each attribute.
43

43

00:02:11.791  -->  00:02:15.624
So a dog can have an age, a breed, and a name.
44

44

00:02:18.987  -->  00:02:21.880
Okay, and then I can create a dog,
45

45

00:02:21.880  -->  00:02:24.140
just as if I had created a whole class for this.
46

46

00:02:24.140  -->  00:02:25.640
So I can say, dog,
47

47

00:02:26.991  -->  00:02:28.574
with an age of two,
48

48

00:02:30.439  -->  00:02:32.689
a breed of, let's say, lab,
49

49

00:02:34.500  -->  00:02:38.050
and the name this dog has is Sammy.
50

50

00:02:38.050  -->  00:02:40.639
And I'm assigning it to the variable Sam.
51

51

00:02:40.639  -->  00:02:42.360
So, just as if we had created
52

52

00:02:42.360  -->  00:02:45.001
a entire class with attributes,
53

53

00:02:45.001  -->  00:02:47.399
the namedtuple basically acts the same way.
54

54

00:02:47.399  -->  00:02:49.499
So I can say Sam,
55

55

00:02:49.499  -->  00:02:52.514
age, as an attribute, call it off.
56

56

00:02:52.514  -->  00:02:55.367
And I can say, sam dot, notice if I click tab here
57

57

00:02:55.367  -->  00:02:57.364
to see all the various methods,
58

58

00:02:57.364  -->  00:03:00.185
I have all the attributes, age, breed, and name.
59

59

00:03:00.185  -->  00:03:03.259
And then I also have counts and index,
60

60

00:03:03.259  -->  00:03:05.227
because it still has those tuples,
61

61

00:03:05.227  -->  00:03:07.707
and it's a subclass of tuple.
62

62

00:03:07.707  -->  00:03:10.527
I can also just call by index,
63

63

00:03:10.527  -->  00:03:12.924
if I remember what the index is for age.
64

64

00:03:12.924  -->  00:03:15.830
So, zero, one, two, alright.
65

65

00:03:15.830  -->  00:03:18.009
So that's it for namedtuples.
66

66

00:03:18.009  -->  00:03:19.865
So let's go ahead and do a quick overview
67

67

00:03:19.865  -->  00:03:22.596
by creating one more example.
68

68

00:03:22.596  -->  00:03:25.544
So remember, a namedtuple is just like a normal tuple,
69

69

00:03:25.544  -->  00:03:30.229
except that it basically creates a new object type.
70

70

00:03:30.229  -->  00:03:33.477
And it allows names for the various fields.
71

71

00:03:33.477  -->  00:03:36.560
So I can make another one called Cat.
72

72

00:03:37.807  -->  00:03:42.606
It will be a namedtuple, the object type will be called cat.
73

73

00:03:42.606  -->  00:03:44.773
And then I pass one string
74

74

00:03:45.757  -->  00:03:48.235
with spaces in between the fields.
75

75

00:03:48.235  -->  00:03:50.318
So I can say, fur, claws,
76

76

00:03:53.719  -->  00:03:55.649
and let's also pass name.
77

77

00:03:55.649  -->  00:03:57.102
So now I've created my namedtuple,
78

78

00:03:57.102  -->  00:04:01.101
I can make a cat object, I'll just call it c.
79

79

00:04:01.101  -->  00:04:04.729
And I can create a cat, and I will assign it,
80

80

00:04:04.729  -->  00:04:07.979
fur will be, let's say, I dunno, fuzzy.
81

81

00:04:11.150  -->  00:04:14.641
Claws, let's say claws is a Boolean,
82

82

00:04:14.641  -->  00:04:16.974
so I'll say false, no claws.
83

83

00:04:18.391  -->  00:04:21.808
And we'll put the name is equal to kitty.
84

84

00:04:24.791  -->  00:04:29.089
Alright, now if I just type out c, it's a namedtuple,
85

85

00:04:29.089  -->  00:04:31.351
which is the object class cat,
86

86

00:04:31.351  -->  00:04:33.772
has fuzzy fur, no claws,
87

87

00:04:33.772  -->  00:04:36.311
false for claws, and the name kitty.
88

88

00:04:36.311  -->  00:04:39.591
And again, I can call attributes off of it,
89

89

00:04:39.591  -->  00:04:42.091
or I can use indexing as well,
90

90

00:04:43.321  -->  00:04:45.930
just as if it were a normal tuple.
91

91

00:04:45.930  -->  00:04:49.492
Okay, I hope you find, as you advance more in your code,
92

92

00:04:49.492  -->  00:04:52.322
that namedtuples are really nice, quick way
93

93

00:04:52.322  -->  00:04:57.180
to assign variables and field names to a situation
94

94

00:04:57.180  -->  00:04:59.798
where a normal tuple might get confusing,
95

95

00:04:59.798  -->  00:05:02.010
or you might lose track.
96

96

00:05:02.010  -->  00:05:04.146
So this is the final lecture in the collections module,
97

97

00:05:04.146  -->  00:05:06.689
I hope you found the collections module useful.
98

98

00:05:06.689  -->  00:05:09.439
Go ahead and, if you want, google
99

99

00:05:10.720  -->  00:05:14.053
python documentation collections module,
100

100

00:05:16.967  -->  00:05:19.750
and you'll find a tonne of more information.
101

101

00:05:19.750  -->  00:05:21.349
But the main ones, you should know,
102

102

00:05:21.349  -->  00:05:23.671
are namedtuple, counter,
103

103

00:05:23.671  -->  00:05:26.191
order dictionary and default dictionary.
104

104

00:05:26.191  -->  00:05:30.559
There's also deques, which are a list-like container,
105

105

00:05:30.559  -->  00:05:34.820
with faster appends and pops on either end.
106

106

00:05:34.820  -->  00:05:37.038
But you can go ahead and check that out on your own,
107

107

00:05:37.038  -->  00:05:38.451
in case you're used to it,
108

108

00:05:38.451  -->  00:05:40.790
from any computer science background.
109

109

00:05:40.790  -->  00:05:42.169
But again, like I mentioned before,
110

110

00:05:42.169  -->  00:05:44.678
collections is a super-useful library
111

111

00:05:44.678  -->  00:05:47.791
and I hope you find instances to use it in your code.
112

112

00:05:47.791  -->  00:05:51.958
Alright, thank you, and I'll see you at the next lecture.
