WEBVTT
1
00:00:05.370 --> 00:00:07.230
Selamat datang kembali semua orang di kuliah ini.

2
00:00:07.230 --> 00:00:10.170
Kita akan berbicara tentang pernyataan dan ruang lingkup bersarang.

3
00:00:10.170 --> 00:00:14.310
Kami sudah membahas cara menulis fungsi kami sendiri dan kami bahkan sudah sedikit

4
00:00:14.310 --> 00:00:15.130
berlatih dengannya.

5
00:00:15.150 --> 00:00:20.160
Namun penting untuk memahami bagaimana Python berurusan dengan nama variabel yang Anda tetapkan saat Anda membuat nama

6
00:00:20.220 --> 00:00:21.460
variabel dengan Python.

7
00:00:21.480 --> 00:00:27.270
Nama itu disimpan dalam apa yang disebut namespace dan nama variabel juga memiliki cakupan dan cakupan

8
00:00:27.360 --> 00:00:31.400
menentukan visibilitas nama variabel itu ke bagian lain dari kode Anda.

9
00:00:31.650 --> 00:00:36.450
Jadi jika Anda pernah bertanya-tanya apa yang Anda dapatkan beberapa kesalahan yang mengatakan sesuatu seperti variabel

10
00:00:36.450 --> 00:00:41.820
ini tidak didefinisikan Kita akan mengeksplorasi mengapa itu terjadi dan bagaimana cara memperbaiki kesalahan-kesalahan itu di masa depan.

11
00:00:41.820 --> 00:00:42.790
Mari kita mulai.

12
00:00:42.970 --> 00:00:43.200
BAIK.

13
00:00:43.200 --> 00:00:47.160
Hal pertama yang akan kita lakukan adalah dengan sedikit eksperimen pikiran dan kemudian

14
00:00:47.160 --> 00:00:48.450
kita akan mengeksplorasi hasilnya.

15
00:00:48.450 --> 00:00:54.670
Saat ini saya akan mengatakan x sama dengan 25 dan di bawahnya saya akan membuat sebuah fungsi.

16
00:00:55.250 --> 00:00:57.610
Ini akan disebut printer.

17
00:00:57.660 --> 00:01:00.930
Pastikan Anda tidak menyebutnya mencetak karena jika tidak akan menimpa fungsi cetak.

18
00:01:01.080 --> 00:01:09.510
Tetapi yang dilakukan adalah menetapkan X ke 50 dan mengembalikan x.

19
00:01:09.520 --> 00:01:16.030
Jadi mari kita jalankan ini dan saya ingin bertanya apa yang Anda harapkan terjadi ketika saya mengatakan Pangeran X.

20
00:01:16.090 --> 00:01:19.940
Apakah Anda berharap melihat 25 atau 50.

21
00:01:19.980 --> 00:01:22.420
Jadi ketika saya menjalankan ini saya mendapatkan kembali 25.

22
00:01:22.770 --> 00:01:25.980
Dan jika Anda memiliki intuisi bahwa itu akan menjadi 25 itu bagus.

23
00:01:26.040 --> 00:01:28.890
Dan jika Anda memiliki intuisi yang akan menjadi 50 Jangan khawatir.

24
00:01:28.890 --> 00:01:31.210
Itulah yang ingin dijelaskan oleh kuliah ini.

25
00:01:32.190 --> 00:01:38.620
Yang ingin saya tunjukkan kepada Anda adalah jika saya mengatakan printer cetak buka tutup tanda kurung.

26
00:01:38.630 --> 00:01:42.420
Jadi saya benar-benar menjalankan hasil printer dan mengembalikan X di sini.

27
00:01:42.710 --> 00:01:44.700
Lalu aku kembali 50.

28
00:01:44.960 --> 00:01:50.030
Jadi, ketika saya mencetak X saya mendapatkan 25 dan ketika saya mencetak hasilnya printer saya mendapatkan 50.

29
00:01:50.120 --> 00:01:51.320
Jadi itu cukup menarik.

30
00:01:51.350 --> 00:01:56.390
Tetapi pertanyaan yang ingin kami jawab adalah bagaimana Python benar-benar tahu latihan mana yang saya maksud

31
00:01:56.390 --> 00:01:57.500
dalam kode saya.

32
00:01:57.500 --> 00:02:02.030
Apakah saya mengacu pada latihan ini 25 atau saya mengacu pada tambahan 50 ini.

33
00:02:02.060 --> 00:02:07.910
Dan mengapa tugas ulang ini tampaknya tidak mempengaruhi tugas yang muncul ketika saya

34
00:02:08.000 --> 00:02:14.750
kemudian meminta print X dan ini karena gagasan lingkup memungkinkan Python untuk memahami memiliki seperangkat aturan

35
00:02:14.750 --> 00:02:21.840
untuk memutuskan variabel mana yang Anda referensikan dalam Anda kode dan aturan ini adalah format GB pedesaan.

36
00:02:21.890 --> 00:02:27.170
Jadi EJB adalah singkatan dari local inclosing function lokal dan global.

37
00:02:27.170 --> 00:02:29.330
Jadi mari kita lihat ini.

38
00:02:29.360 --> 00:02:36.350
Jadi ini adalah aturan L E G-B dan ini pada dasarnya adalah urutan Python akan

39
00:02:36.380 --> 00:02:40.630
mencari variabel dan dimulai dengan memeriksa namespace lokal.

40
00:02:40.640 --> 00:02:46.490
Dan ini adalah nama-nama yang ditugaskan dengan cara apa pun dalam suatu fungsi seperti F atau di dalam suatu panggilan dan

41
00:02:46.790 --> 00:02:48.980
mereka tidak dinyatakan global dalam fungsi itu.

42
00:02:48.980 --> 00:02:53.560
Dan nanti kita akan melihat apa yang kami maksud dengan menyatakan global yang menggunakan kata kunci global.

43
00:02:53.570 --> 00:02:59.630
Jadi pertama Python akan mengatakan hei jika Anda memanggil variabel itu di namespace lokal saya maka itu

44
00:02:59.630 --> 00:03:02.210
akan memeriksa untuk menyertakan fungsi lokal.

45
00:03:02.240 --> 00:03:07.110
Dan ini adalah nama-nama dalam lingkup lokal dari setiap dan semua fungsi yang muncul dari dalam ke luar.

46
00:03:07.160 --> 00:03:11.380
Jadi Anda sebenarnya dapat memiliki fungsi di dalam fungsi yang akan Anda lihat hanya dalam sedetik.

47
00:03:11.780 --> 00:03:15.910
Kemudian mencari variabel jika masih tidak dapat menemukannya di namespace global.

48
00:03:15.950 --> 00:03:21.800
Dan ini adalah nama-nama yang ditetapkan di tingkat atas file modul atau dinyatakan global dalam ADF di

49
00:03:21.800 --> 00:03:22.600
dalam file.

50
00:03:22.850 --> 00:03:25.330
Kemudian terlihat di namespace bawaan.

51
00:03:25.340 --> 00:03:31.350
Jadi ini adalah nama-nama yang telah ditetapkan sebelumnya dalam modul-modul nama-nama built-in seperti daftar Open Range sebagai

52
00:03:31.360 --> 00:03:38.330
kesalahan sintaks TR dan lain-lain yang dibangun dengan kata kunci dengan Python yang Anda lihat memiliki sintaks yang menyoroti aturan-aturan khusus

53
00:03:38.330 --> 00:03:39.250
untuk mereka.

54
00:03:39.560 --> 00:03:46.400
Mari kita telusuri apa yang masing-masing terlihat seperti lokal yang memiliki fungsi lokal dan global.

55
00:03:46.970 --> 00:03:49.210
Kami akan memulai contoh lokal.

56
00:03:49.280 --> 00:03:56.450
Jadi contoh lokal akan menjadi sesuatu seperti di dalam fungsi jika kita mengatakan mati rasa mati rasa

57
00:03:56.530 --> 00:03:57.890
dengan kekuatan dua.

58
00:03:58.030 --> 00:04:00.440
Ini adalah contoh dari variabel lokal.

59
00:04:00.460 --> 00:04:05.990
Jadi mati rasa di sini adalah ekspresi lokal lambda ini.

60
00:04:06.050 --> 00:04:09.320
Sekarang mari kita lihat contoh fungsi inclosing lokal.

61
00:04:09.400 --> 00:04:15.200
Jadi kita akan pergi ke depan dan hanya berkomentar ini untuk menunjukkan kepada Anda contoh menyertakan fungsi

62
00:04:15.200 --> 00:04:18.970
lokal, pertama-tama kita perlu membuat fungsi dan kemudian fungsi di dalamnya.

63
00:04:19.010 --> 00:04:27.680
Jadi saya akan mengatakan nama di bagian paling atas pemberitahuan ini dalam notasi dan mengatakan ini adalah string

64
00:04:29.990 --> 00:04:39.110
global yang akan membuat fungsi yang disebut sapa tidak memerlukan argumen dan di dalam ini saya mengatakan nama sama

65
00:04:39.110 --> 00:04:40.110
dengan Sammy.

66
00:04:40.310 --> 00:04:42.310
Jadi saya menimpa variabel nama itu di sini.

67
00:04:44.590 --> 00:04:54.220
Dan di dalam fungsi ini saya akan menyapa dan saya akan mengatakan Hei Pangeran Halo disatukan dengan

68
00:04:54.220 --> 00:04:58.850
nama dan kemudian saya akan memanggil halo.

69
00:04:59.570 --> 00:05:01.690
Dan kemudian saya akan memanggil salam.

70
00:05:01.880 --> 00:05:02.180
Baiklah.

71
00:05:02.190 --> 00:05:05.560
Ada banyak hal yang terjadi di sini terutama karena ada fungsi alih-alih fungsi.

72
00:05:05.720 --> 00:05:08.190
Jadi mari kita hancurkan yang ini di sini.

73
00:05:08.210 --> 00:05:15.050
Saya memiliki fungsi yang disebut sapa dan apa yang dilakukannya di dalamnya itu menetapkan nama variabel sama dengan Samie.

74
00:05:15.050 --> 00:05:19.280
Kemudian di dalam fungsi kelompok dan perhatikan bagaimana semua ini di sini

75
00:05:19.280 --> 00:05:25.700
yang telah saya sorot adalah di dalam pertambahan karena lekukan kita memiliki DPF daripada fungsi halo dan di dalam fungsi

76
00:05:25.700 --> 00:05:27.130
halo saya bertanya hey.

77
00:05:27.260 --> 00:05:34.010
Cetak Halo nama dan sekarang kami memiliki nama yang didefinisikan dua kali muncul sebagai global dan kemudian

78
00:05:34.130 --> 00:05:41.180
di sini sebagai fungsi terlampir lokal dan setelah kami mendefinisikan Halo di dalam salam saya benar-benar akan memanggil

79
00:05:41.750 --> 00:05:42.970
dan menjalankan Hello.

80
00:05:43.280 --> 00:05:45.380
Dan kemudian saya akan memanggil salam.

81
00:05:45.400 --> 00:05:47.630
Jadi mari kita lihat apa yang terjadi ketika kita menjalankan ini.

82
00:05:47.630 --> 00:05:48.590
Kami kembali.

83
00:05:48.590 --> 00:05:49.690
Halo Sammy.

84
00:05:49.760 --> 00:05:52.000
Ketika saya benar-benar mengeksekusi salam.

85
00:05:52.010 --> 00:05:53.500
Jadi apa yang sebenarnya terjadi di sini.

86
00:05:53.780 --> 00:06:00.860
Nah ketika saya menjalankan salam yang berlaku kita bisa menempatkan ini di sel baru sehingga sedikit lebih jelas apa yang

87
00:06:00.860 --> 00:06:01.360
terjadi

88
00:06:01.370 --> 00:06:06.020
Jadi keserakahan adalah jenis yang terpisah sehingga panggilan salam terpisah dari definisi keserakahan.

89
00:06:06.620 --> 00:06:10.860
Ketika saya memanggil keserakahan, yang terjadi adalah saya memanggil dan menjalankan fungsi.

90
00:06:10.910 --> 00:06:15.050
Itu memberi nama sama dengan Samie dan kemudian mendefinisikan fungsi ini.

91
00:06:15.050 --> 00:06:15.650
Halo.

92
00:06:15.890 --> 00:06:17.040
Dan kemudian memanggil fungsi.

93
00:06:17.050 --> 00:06:17.520
Halo.

94
00:06:17.600 --> 00:06:22.170
Jadi ketika Anda memanggil salam secara internal, itu membuat nama variabel ini.

95
00:06:22.340 --> 00:06:23.270
Itu didefinisikan dalam fungsi ini.

96
00:06:23.270 --> 00:06:23.710
Halo.

97
00:06:23.870 --> 00:06:25.100
Dan kemudian menjalankan fungsi ini.

98
00:06:25.100 --> 00:06:26.250
Halo.

99
00:06:26.460 --> 00:06:29.030
Ini akan mengikuti ini.

100
00:06:29.100 --> 00:06:33.420
Aturan EJB saat kami ingin mengetahui dengan baik nama apa yang Anda maksud.

101
00:06:33.420 --> 00:06:36.020
Jadi pertama kita lihat di namespace lokal.

102
00:06:36.180 --> 00:06:41.740
Jadi namespace lokal yang baru saja kita diskusikan berada dalam suatu fungsi.

103
00:06:41.870 --> 00:06:47.340
Jadi di sini di fungsi DPF Halo itu akan mengatakan hei apakah saya mendefinisikan nama di mana saja.

104
00:06:47.420 --> 00:06:49.700
Jika tidak dapat menemukannya maka naik ke level berikutnya.

105
00:06:49.910 --> 00:06:56.390
Jadi setelah mencari lokal kita pergi ke inclosing function local jadi kita punya fungsi inclosing ini karena

106
00:06:56.390 --> 00:06:59.100
fungsi ini ada di dalam function ini.

107
00:06:59.270 --> 00:07:01.790
Dan kemudian di sini kita menemukan bahwa nama itu telah didefinisikan.

108
00:07:01.970 --> 00:07:03.050
Itu sama dengan Samie.

109
00:07:03.080 --> 00:07:04.480
Jadi itu yang kita pilih.

110
00:07:04.610 --> 00:07:09.670
Ketika kami akhirnya mengeksekusi Halo di sini dan itulah mengapa Anda melihat Hello Sammy.

111
00:07:09.740 --> 00:07:10.780
Sekarang mari kita lihat apa yang terjadi.

112
00:07:10.820 --> 00:07:19.340
Jika saya berkomentar tentang hal ini, maka saya sudah berkomentar Samie dan jika saya menjalankan ini lagi dan saya menjalankannya lagi sekarang saya

113
00:07:19.670 --> 00:07:20.270
mengerti.

114
00:07:20.270 --> 00:07:20.850
Halo.

115
00:07:20.900 --> 00:07:22.300
Ini adalah tekanan global.

116
00:07:22.520 --> 00:07:23.510
Jadi, apa yang terjadi sekarang?

117
00:07:23.510 --> 00:07:25.130
Kita akan melalui aturan yang sama.

118
00:07:25.130 --> 00:07:26.510
Kami pertama kali melihat lokal.

119
00:07:26.690 --> 00:07:27.530
Jadi saat kita mengeksekusinya.

120
00:07:27.530 --> 00:07:31.730
Halo di sini fungsi halo ini berkata baik saya harus mencari tahu apa nama variabel.

121
00:07:31.760 --> 00:07:33.680
Saya tidak melihatnya didefinisikan secara lokal.

122
00:07:33.920 --> 00:07:39.020
Dan sekarang karena ini dikomentari, saya tidak melihatnya didefinisikan dalam fungsi inclosing.

123
00:07:39.020 --> 00:07:44.940
Jadi saya akan pergi ke langkah selanjutnya yaitu melihat secara global dan itu ada di tingkat global.

124
00:07:44.960 --> 00:07:50.360
Ini adalah string global dan Global ditentukan oleh pada dasarnya tidak memiliki lekukan, itu jauh ke

125
00:07:50.360 --> 00:07:54.130
kiri baik dalam skrip Anda atau di sel notebook Jupiter Anda.

126
00:07:54.320 --> 00:07:58.130
Dan karena ia menemukan bahwa di namespace global sekarang ia mengatakan halo.

127
00:07:58.160 --> 00:07:59.880
Ini adalah string global.

128
00:08:00.320 --> 00:08:05.940
Mari kita lihat apa yang terjadi jika kita menghilangkan tanda komentar ini dan kita menyebut nama Sammy yang sama.

129
00:08:06.110 --> 00:08:07.950
Jadi saya ingin memberi label ini sekarang.

130
00:08:08.060 --> 00:08:10.340
Ini global.

131
00:08:10.540 --> 00:08:15.770
Yang ini di sini termasuk dan mari kita buat yang lokal.

132
00:08:16.380 --> 00:08:27.230
Jadi nama lokal akan sama dengan saya seorang lokal dan sekarang ketika kita jalankan ini untuk mendefinisikan kembali fungsi ini dan saya sebut

133
00:08:27.740 --> 00:08:30.170
sapa itu akan kembali.

134
00:08:30.320 --> 00:08:32.070
Halo, saya orang lokal.

135
00:08:32.150 --> 00:08:38.120
Karena ketika Anda mengeksekusi halo yang mengeksekusi fungsi ini di sini yang mengatakan hey Python untuk mencari

136
00:08:38.120 --> 00:08:40.270
tahu apa variabel namanya ditugaskan.

137
00:08:40.550 --> 00:08:44.640
Dan segera menemukan di namespace lokal di mana di sini nama saya lokal.

138
00:08:44.660 --> 00:08:46.030
Jadi itulah yang digunakannya.

139
00:08:46.520 --> 00:08:50.900
Ketika Anda dapat mengomentari ini di luar sana lihat di tingkat berikutnya yang berarti fungsi yang disertakan.

140
00:08:50.990 --> 00:08:56.360
Jika Anda berkomentar yang keluar maka akan terlihat di tingkat namespace global dan satu-satunya

141
00:08:56.360 --> 00:09:02.130
tingkat di atas Global adalah tingkat fungsi bawaan yang akan menjadi sesuatu seperti fungsi bawaan sebagai panjang.

142
00:09:02.180 --> 00:09:06.830
Jadi, Anda harus selalu berhati-hati untuk tidak menimpa nama fungsi bawaan ini dan mereka selalu ditunjukkan

143
00:09:06.830 --> 00:09:08.600
kepada Anda dengan penyorotan sintaksis.

144
00:09:08.630 --> 00:09:14.480
Dan jika Anda tidak yakin apakah Anda dapat memanggil bantuan dan Anda melihat beberapa hal muncul maka itu

145
00:09:14.500 --> 00:09:16.970
pasti dibangun karena sudah memiliki informasi itu.

146
00:09:16.970 --> 00:09:22.590
Akhirnya untuk menutup diskusi ini yang akan kita lakukan adalah melihat kembali eksperimen pemikiran awal kita.

147
00:09:22.700 --> 00:09:28.510
Tugas ini x 25 di tingkat global menugaskan kembali di tingkat lokal mengembalikan tanda-tanda lokal itu tapi

148
00:09:28.510 --> 00:09:33.350
masih bisa mencetak baik ketika kita ingin kita bisa mencetak yang global atau kita bisa

149
00:09:33.350 --> 00:09:36.040
mengembalikan yang lokal dan mencetak demikian juga.

150
00:09:36.080 --> 00:09:40.750
Jadi kita akan membahas variabel lokal serta kata kunci global.

151
00:09:40.830 --> 00:09:46.440
Jadi kami akan menunjukkan kepada Anda sebuah contoh eksperimen pikiran itu

152
00:09:46.470 --> 00:09:58.140
lagi yang akan mengatakan x sama dengan 50 dan saya akan membuat fungsi yang mengambil X dan itu akan dicetak menggunakan notasi string x

153
00:09:58.140 --> 00:10:00.300
adalah x di sini.

154
00:10:00.330 --> 00:10:07.520
Jadi mari kita jalankan itu dan mari kita lihat apa yang terjadi ketika kita memanggil fungsi X katanya X adalah 50.

155
00:10:07.650 --> 00:10:08.850
Sempurna.

156
00:10:08.850 --> 00:10:14.630
Sekarang juga di dalam fungsi ini saya akan menetapkan kembali X secara lokal.

157
00:10:14.700 --> 00:10:27.000
Jadi ini adalah penugasan kembali secara lokal dan kemudian saya akan mencetak Saya hanya mengubah bibir secara lokal, x dan

158
00:10:29.970 --> 00:10:40.100
kemudian kita akan memasukkan X di sana dan memastikan variabel X Anda huruf kecil di sini.

159
00:10:40.150 --> 00:10:44.780
Jika huruf kecil ada di sana sekarang kita jalankan ulang sel untuk membaca denda fungsi itu.

160
00:10:44.910 --> 00:10:49.860
Dan sekarang saya melihat X's 50 Saya hanya mengubah x secara lokal menjadi 200.

161
00:10:50.050 --> 00:10:57.440
Sekarang di luar ini yang terjadi jika saya mencetak X, saya akan mendapatkan kembali X's 50.

162
00:10:57.550 --> 00:11:00.730
Meskipun di dalam fungsi ini saya menetapkan kembali menjadi 200.

163
00:11:01.000 --> 00:11:07.480
Dan ini karena penugasan ulang ini hanya terjadi di ruang lokal di dalam fungsi ini.

164
00:11:07.510 --> 00:11:10.290
Itu tidak akan mempengaruhi apa pun pada lingkup yang lebih tinggi.

165
00:11:10.510 --> 00:11:12.160
Jadi inilah ruang lingkup sebenarnya.

166
00:11:12.160 --> 00:11:17.890
Adalah fakta bahwa ketika Anda mendeklarasikan variabel di dalam definisi fungsi seperti apa

167
00:11:17.890 --> 00:11:24.070
yang telah kami lakukan di sini, nama variabel tersebut hanya memiliki cakupan lokal untuk fungsi ini.

168
00:11:24.100 --> 00:11:29.770
Jadi itulah ruang lingkup variabel x ini di sini ketika kita menetapkan ketika kita menetapkannya dalam

169
00:11:29.770 --> 00:11:30.640
fungsi ini.

170
00:11:30.730 --> 00:11:36.310
Kami memiliki X di sini yang melayang-layang di ruang global, tetapi lingkup penugasan lokal

171
00:11:36.310 --> 00:11:44.620
ini tidak akan dapat meluas ke luar ke tingkat lain. Karena itu, bagaimanapun, kami masih dapat mencetak x di sini sebagai 50

172
00:11:44.650 --> 00:11:49.900
Jadi mari kita bayangkan Anda berada dalam situasi di mana untuk alasan apa pun Anda benar-benar ingin

173
00:11:49.900 --> 00:11:52.760
meraih global x ini dan menetapkan kembali menjadi 200.

174
00:11:52.810 --> 00:11:54.070
Bagaimana Anda bisa melakukan itu.

175
00:11:54.540 --> 00:11:58.360
Nah dalam hal ini kita benar-benar akan menerima X sebagai parameter.

176
00:11:58.370 --> 00:12:02.110
Sebaliknya kita akan melakukan di dalam atau berfungsi di baris pertama.

177
00:12:02.410 --> 00:12:10.030
Kita akan mendeklarasikan kata kunci global di sini dan kemudian mengatakan X dan apa yang dilakukan adalah alih-alih

178
00:12:10.030 --> 00:12:13.100
melewati X kita akan mendeklarasikan global x.

179
00:12:13.390 --> 00:12:20.590
Dan itu memberitahu Python, hei, saya ingin pergi ke namespace melompat ke tingkat global dan ambil variabel x di sana dan kemudian

180
00:12:20.590 --> 00:12:26.370
apa yang saya ingin Anda lakukan adalah segala sesuatu yang terjadi di dalam lingkup tugas ini.

181
00:12:26.590 --> 00:12:28.930
Ini akan mempengaruhi global x itu.

182
00:12:29.080 --> 00:12:35.050
Jadi kita akan mengambil Global X melaporkan apa yang akan kita lakukan

183
00:12:35.050 --> 00:12:44.380
penugasan kembali lokal kecuali sekarang itu pada variabel global yang berarti akan berpengaruh pada orang ini di sini 50 dan di

184
00:12:44.380 --> 00:12:50.790
sana kita akan mencetak Saya baru saja mengubah global x ke beberapa nilai lainnya.

185
00:12:51.350 --> 00:12:56.450
OK jadi mari kita jalankan ini lagi dan saya akan bukannya memiliki ini menjadi 200 saya akan membuatnya

186
00:12:56.450 --> 00:12:59.420
sangat jelas bahwa kita mengubahnya dengan mengatakan nilai baru.

187
00:12:59.450 --> 00:13:01.370
Jadi X dulu nomor 50.

188
00:13:01.570 --> 00:13:05.820
Saya ingin memanggil fungsi ini menjangkau global namespace, ambil x itu.

189
00:13:05.900 --> 00:13:07.280
Laporkan kembali apa itu.

190
00:13:07.280 --> 00:13:10.060
Ubah ke string nilai baru dan tampilan.

191
00:13:10.080 --> 00:13:12.260
Hei, saya baru saja mengubah global x.

192
00:13:12.350 --> 00:13:18.610
Jadi mari kita jalankan ini dan saya akan membuat beberapa sel lagi di sini menggunakan alt enter.

193
00:13:18.630 --> 00:13:20.350
Hanya kita mendapatkan semacam batu tulis yang bersih.

194
00:13:20.470 --> 00:13:21.650
Jadi saya hanya menjalankan ini.

195
00:13:21.910 --> 00:13:23.820
Dan mari kita lihat apa yang terjadi ketika saya benar-benar menyebutnya.

196
00:13:23.830 --> 00:13:25.630
Jadi sekarang saya hanya mendefinisikan fungsinya.

197
00:13:25.630 --> 00:13:27.920
Saya belum benar-benar mengeksekusinya.

198
00:13:28.150 --> 00:13:33.010
Jadi ketika saya sekarang mengatakan cetak X saya masih memiliki 50 di sana.

199
00:13:33.010 --> 00:13:39.140
Mari kita lihat apa yang terjadi ketika saya menjalankan fungsi yang katanya hey X adalah 50 seperti yang baru saja kita lihat.

200
00:13:39.210 --> 00:13:44.950
Dan sekarang ini melaporkan kembali saya hanya secara lokal mengubah global x ke nilai string baru.

201
00:13:45.070 --> 00:13:47.660
Dan sekarang mari kita lihat apa yang terjadi ketika saya mencetak x.

202
00:13:47.850 --> 00:13:49.800
Dikatakan nilai baru.

203
00:13:49.800 --> 00:13:54.810
Jadi, menggunakan kata kunci global Anda dapat menjangkau ke namespace global dan kemudian

204
00:13:54.810 --> 00:13:58.030
tugas lokal Anda mempengaruhi variabel global itu.

205
00:13:58.080 --> 00:14:03.390
Sekarang karena kekuatan kunci global ini, kami melakukannya secara umum, terutama jika Anda seorang pemula,

206
00:14:03.660 --> 00:14:07.850
Anda harus menghindari penggunaan kata kunci global itu kecuali benar-benar diperlukan.

207
00:14:07.890 --> 00:14:14.610
Alih-alih apa yang harus Anda lakukan adalah jika Anda ingin mengambil variabel global

208
00:14:14.610 --> 00:14:24.700
itu dan kemudian mempengaruhinya, Anda harus menerimanya sebagai parameter melakukan penugasan kembali dan kemudian mengembalikan penugasan kembali sebagai objek itu

209
00:14:24.700 --> 00:14:25.690
sendiri.

210
00:14:25.690 --> 00:14:28.530
Jadi, saya akan tunjukkan mengapa Anda ingin melakukan itu.

211
00:14:28.630 --> 00:14:37.690
Jadi sekarang saya menjalankan bahwa jika saya mencetak ke XX masih 50 dan kemudian saya akan mengatakan Phunk dari X dan kemudian saya akan mengatakan X sekarang

212
00:14:37.690 --> 00:14:44.430
sama dengan Phunk dari x jadi X adalah 50 Saya hanya berubah secara lokal dan saya harus ' Sudah dihapus

213
00:14:44.420 --> 00:14:46.230
ini tidak lagi variabel global.

214
00:14:46.530 --> 00:14:47.940
Namun secara teknis.

215
00:14:47.940 --> 00:14:53.570
Sekarang ketika saya memanggil X itu telah dipindahkan ke nilai string baru karena saya mengembalikan X dan saya

216
00:14:53.670 --> 00:14:56.330
menetapkan ulang tingkat global X menggunakan fungsi itu.

217
00:14:56.460 --> 00:15:01.540
Dan secara umum ini adalah jalan yang jauh lebih baik daripada menggunakan kata kunci global itu.

218
00:15:01.560 --> 00:15:07.950
Jadi meskipun ini dikombinasikan dengan ini adalah hal yang sama dengan kata kunci global. Ini jauh lebih bersih dan

219
00:15:07.950 --> 00:15:14.220
lebih aman karena Anda harus tahu bahwa Anda ingin penugasan ulang ini terjadi di tempat lain dalam

220
00:15:14.220 --> 00:15:15.030
kode Anda.

221
00:15:15.030 --> 00:15:20.310
Sangat berbahaya untuk memiliki penugasan ulang terjadi dari kata kunci global karena ketika Anda menggunakan skrip yang lebih besar

222
00:15:20.310 --> 00:15:24.930
dan lebih besar dan Anda memiliki skrip yang terpisah berinteraksi satu sama lain, Anda secara tidak

223
00:15:24.960 --> 00:15:28.540
sengaja menimpa kata kunci global di dalam suatu fungsi tanpa pernah menyadarinya.

224
00:15:28.550 --> 00:15:30.390
Dan itu membuatnya jauh lebih sulit untuk di-debug.

225
00:15:30.390 --> 00:15:34.950
Jauh lebih mudah untuk men-debug sesuatu seperti ini karena ada penugasan ulang yang jelas terjadi di

226
00:15:35.250 --> 00:15:40.330
sini di mana kami secara khusus mengambil Global X itu dan berkata Hei sekarang buat itu sama dengan output.

227
00:15:40.330 --> 00:15:41.640
Apa fungsi ini.

228
00:15:41.640 --> 00:15:45.960
Dan nanti ketika Anda memiliki tonggak pertama Anda satu proyek itulah jalur

229
00:15:45.960 --> 00:15:50.590
yang kami akan merekomendasikan mengambil untuk berurusan dengan objek tertentu di namespace global tersebut.

230
00:15:50.950 --> 00:15:51.660
BAIK.

231
00:15:51.750 --> 00:15:56.910
Jelas merupakan topik yang lebih kompleks tetapi mudah-mudahan ini memungkinkan Anda untuk membangun intuisi pernyataan bersarang

232
00:15:57.180 --> 00:15:59.760
dan yang lebih penting adalah ruang lingkup variabel.

233
00:15:59.760 --> 00:16:02.110
Terima kasih semuanya dan kami akan menemui Anda di kuliah berikutnya.
