1
1

00:00:01,716  -->  00:00:02,738
<v Instructor>Hello, everyone.</v>
2

2

00:00:02,738  -->  00:00:04,291
And welcome to the third lecture
3

3

00:00:04,291  -->  00:00:06,789
in the decorator section of this course.
4

4

00:00:06,789  -->  00:00:08,031
And now we're gonna learn about
5

5

00:00:08,031  -->  00:00:10,272
passing functions as arguments.
6

6

00:00:10,272  -->  00:00:12,252
So, in the last lecture we learned
7

7

00:00:12,252  -->  00:00:14,357
about functions within functions
8

8

00:00:14,357  -->  00:00:17,368
and how we could return functions.
9

9

00:00:17,368  -->  00:00:19,858
And now we're gonna learn about functions as arguments.
10

10

00:00:19,858  -->  00:00:20,828
So, we'll see how we can pass
11

11

00:00:20,828  -->  00:00:23,032
functions into other functions.
12

12

00:00:23,032  -->  00:00:26,466
So, again, continue on with the hello.
13

13

00:00:26,466  -->  00:00:28,725
Gonna reassign the hello function.
14

14

00:00:28,725  -->  00:00:31,642
I'm gonna just say return to string
15

15

00:00:33,287  -->  00:00:34,450
Hi Jose!
16

16

00:00:34,450  -->  00:00:37,097
So, that's my hello function.
17

17

00:00:37,097  -->  00:00:40,485
Then, I'm gonna make an other function
18

18

00:00:40,485  -->  00:00:44,327
that takes on the argument F-U-N-C.
19

19

00:00:44,327  -->  00:00:45,994
And it's gonna print
20

20

00:00:47,865  -->  00:00:49,615
Other code goes here!
21

21

00:00:51,642  -->  00:00:52,519
And then what it'll do,
22

22

00:00:52,519  -->  00:00:55,559
it's gonna print the results
23

23

00:00:55,559  -->  00:00:56,392
of func.
24

24

00:00:56,392  -->  00:00:59,919
So, it's expecting func to be a function.
25

25

00:00:59,919  -->  00:01:02,252
And so now, if I call other,
26

26

00:01:04,799  -->  00:01:05,936
you'll notice we get an error
27

27

00:01:05,936  -->  00:01:07,538
'cause it's expecting an argument.
28

28

00:01:07,538  -->  00:01:10,216
So, I'm actually going to pass
29

29

00:01:10,216  -->  00:01:11,671
the hello function.
30

30

00:01:11,671  -->  00:01:13,159
And so, what happens here?
31

31

00:01:13,159  -->  00:01:16,835
Well, other function takes in a function,
32

32

00:01:16,835  -->  00:01:18,771
it prints Other code goes here,
33

33

00:01:18,771  -->  00:01:20,359
which is one of the outputs.
34

34

00:01:20,359  -->  00:01:21,764
And then it prints the results
35

35

00:01:21,764  -->  00:01:23,710
of whatever that function happened to be.
36

36

00:01:23,710  -->  00:01:25,048
Which, in this case, was hello.
37

37

00:01:25,048  -->  00:01:27,297
Which returns, Hi Jose!
38

38

00:01:27,297  -->  00:01:29,795
Great, so we've seen how we can pass the function
39

39

00:01:29,795  -->  00:01:32,990
as objects and then use them within other functions.
40

40

00:01:32,990  -->  00:01:34,249
So, now we can get started
41

41

00:01:34,249  -->  00:01:37,784
with manually creating our first decorator.
42

42

00:01:37,784  -->  00:01:39,715
So, in the previous example,
43

43

00:01:39,715  -->  00:01:42,506
we kind of actually manually created a decorator.
44

44

00:01:42,506  -->  00:01:45,126
So, we're gonna modify it to make it very clear
45

45

00:01:45,126  -->  00:01:47,224
what's actually happening here.
46

46

00:01:47,224  -->  00:01:48,469
So, I'm gonna say def.
47

47

00:01:48,469  -->  00:01:52,386
And I'm gonna call this function new decorator.
48

48

00:01:54,328  -->  00:01:57,379
And it takes in a function as an argument.
49

49

00:01:57,379  -->  00:02:01,377
And now, there's a function here within it,
50

50

00:02:01,377  -->  00:02:04,210
called wrap F-U-N-C,
51

51

00:02:05,393  -->  00:02:08,143
takes no arguments and it prints,
52

52

00:02:11,885  -->  00:02:14,545
let's just say Code here,
53

53

00:02:14,545  -->  00:02:15,378
before
54

54

00:02:16,732  -->  00:02:17,565
executing
55

55

00:02:18,435  -->  00:02:19,268
the func.
56

56

00:02:21,665  -->  00:02:23,903
And then I'm gonna call the function
57

57

00:02:23,903  -->  00:02:28,350
that you pass to this new decorator function.
58

58

00:02:28,350  -->  00:02:30,100
Then I'm gonna print,
59

59

00:02:33,079  -->  00:02:34,162
say Code here
60

60

00:02:35,743  -->  00:02:36,576
will
61

61

00:02:37,798  -->  00:02:38,631
execute
62

62

00:02:40,461  -->  00:02:41,711
after the func.
63

63

00:02:44,650  -->  00:02:46,011
And then what I actually do
64

64

00:02:46,011  -->  00:02:49,791
is I return this wrap underscore func.
65

65

00:02:49,791  -->  00:02:52,192
And notice, I'm returning the function itself.
66

66

00:02:52,192  -->  00:02:54,775
Not the result of the function.
67

67

00:02:57,270  -->  00:02:58,502
So, that's one function.
68

68

00:02:58,502  -->  00:03:02,419
And I'm gonna create a new function called func
69

69

00:03:03,278  -->  00:03:04,111
needs
70

70

00:03:05,539  -->  00:03:06,372
decorator.
71

71

00:03:07,904  -->  00:03:11,366
And all this does is it says print
72

72

00:03:11,366  -->  00:03:12,449
This function
73

73

00:03:13,373  -->  00:03:14,206
needs a
74

74

00:03:16,008  -->  00:03:16,841
decorator.
75

75

00:03:19,809  -->  00:03:23,976
Okay, so, what happens if I call func needs a decorator?
76

76

00:03:25,993  -->  00:03:27,588
It prints, simply, that statement.
77

77

00:03:27,588  -->  00:03:29,255
Okay, simple enough.
78

78

00:03:30,631  -->  00:03:33,600
This is where we actually see how a decorator works.
79

79

00:03:33,600  -->  00:03:35,350
I'm going to say func
80

80

00:03:37,612  -->  00:03:38,862
need decorator.
81

81

00:03:40,712  -->  00:03:43,295
I'm setting that function equal
82

82

00:03:44,398  -->  00:03:45,912
to
83

83

00:03:45,912  -->  00:03:48,079
the new decorator function
84

84

00:03:49,092  -->  00:03:53,009
with the func needs decorator passed within it.
85

85

00:03:55,494  -->  00:03:59,212
Okay, so let's kinda break down what we just did here.
86

86

00:03:59,212  -->  00:04:02,002
I have this func needs a decorator function.
87

87

00:04:02,002  -->  00:04:03,595
All it used to do was print
88

88

00:04:03,595  -->  00:04:05,796
this function needs a decorator.
89

89

00:04:05,796  -->  00:04:10,626
So, what I ended up doing was I took this new decorator,
90

90

00:04:10,626  -->  00:04:11,856
right here, that function,
91

91

00:04:11,856  -->  00:04:15,126
which accepts a function as an argument.
92

92

00:04:15,126  -->  00:04:18,626
And I passed it, the func needs decorator.
93

93

00:04:19,540  -->  00:04:21,570
So, noticed how it's gonna get used
94

94

00:04:21,570  -->  00:04:23,737
within this block of code.
95

95

00:04:24,783  -->  00:04:25,866
So, if I call
96

96

00:04:27,616  -->  00:04:30,479
func needs decorator now,
97

97

00:04:30,479  -->  00:04:32,745
and run it, notice what I get.
98

98

00:04:32,745  -->  00:04:36,957
I get Code here, before executing the func.
99

99

00:04:36,957  -->  00:04:38,507
This function needs a decorator,
100

100

00:04:38,507  -->  00:04:41,611
which was the original func needs a decorator,
101

101

00:04:41,611  -->  00:04:44,496
and then I said, code here will execute after the func.
102

102

00:04:44,496  -->  00:04:46,447
And looks like I spelled execute wrong.
103

103

00:04:46,447  -->  00:04:47,530
My apologies.
104

104

00:04:48,817  -->  00:04:50,878
So, if I run these cells,
105

105

00:04:50,878  -->  00:04:53,697
code here will execute after the func.
106

106

00:04:53,697  -->  00:04:55,125
So, what happened here?
107

107

00:04:55,125  -->  00:04:57,464
So, the decorator, just simply,
108

108

00:04:57,464  -->  00:05:00,545
wrapped the function and modified its behaviour.
109

109

00:05:00,545  -->  00:05:04,340
So, this decorator wrapped this function
110

110

00:05:04,340  -->  00:05:07,070
to modify its behaviour.
111

111

00:05:07,070  -->  00:05:09,887
So, this is exactly what a decorator is.
112

112

00:05:09,887  -->  00:05:10,720
And now I'm gonna show you
113

113

00:05:10,720  -->  00:05:15,363
how you can rewrite this code using the at symbol.
114

114

00:05:15,363  -->  00:05:17,921
Which is a symbol that Python recognises
115

115

00:05:17,921  -->  00:05:19,754
as a decorator symbol.
116

116

00:05:21,130  -->  00:05:24,880
So, I'm gonna do at new underscore decorator.
117

117

00:05:25,941  -->  00:05:28,274
And I'm gonna copy and paste
118

118

00:05:29,733  -->  00:05:33,150
this original function needs a decorator.
119

119

00:05:36,663  -->  00:05:41,092
So, notice what's gonna happen now if I say func
120

120

00:05:41,092  -->  00:05:43,443
needs decorator and I call it.
121

121

00:05:43,443  -->  00:05:45,666
We get the exact same code,
122

122

00:05:45,666  -->  00:05:47,333
as if had done this.
123

123

00:05:48,524  -->  00:05:50,134
Okay.
124

124

00:05:50,134  -->  00:05:54,206
So, we've just built out a decorator manually here.
125

125

00:05:54,206  -->  00:05:58,234
And then we saw how we can use the at symbol
126

126

00:05:58,234  -->  00:06:00,802
to do this automatically in Python.
127

127

00:06:00,802  -->  00:06:02,958
Again, I'm gonna just slowly break down
128

128

00:06:02,958  -->  00:06:05,208
exactly what happened here.
129

129

00:06:07,464  -->  00:06:09,616
Notice all this statement is doing,
130

130

00:06:09,616  -->  00:06:13,560
this decorator, is exactly what we did here.
131

131

00:06:13,560  -->  00:06:15,892
It takes in this function
132

132

00:06:15,892  -->  00:06:18,821
that we called needs a decorator.
133

133

00:06:18,821  -->  00:06:21,615
And by decorating it with this function,
134

134

00:06:21,615  -->  00:06:25,896
we pass it into that new decorator function
135

135

00:06:25,896  -->  00:06:29,688
and reassign it to this function here.
136

136

00:06:29,688  -->  00:06:31,834
Which allows us to basically do exactly
137

137

00:06:31,834  -->  00:06:35,723
what we did here but with this at symbol.
138

138

00:06:35,723  -->  00:06:37,480
So, I really want you to take your time
139

139

00:06:37,480  -->  00:06:38,969
and read what's going on here.
140

140

00:06:38,969  -->  00:06:41,854
We created a function called new decorator.
141

141

00:06:41,854  -->  00:06:43,977
It takes in a function.
142

142

00:06:43,977  -->  00:06:46,394
It has a function inside of it, called wrap func,
143

143

00:06:46,394  -->  00:06:48,285
which says print some Code here,
144

144

00:06:48,285  -->  00:06:51,483
before executing that past function.
145

145

00:06:51,483  -->  00:06:54,143
Does the function that you passed,
146

146

00:06:54,143  -->  00:06:56,922
prints Code here will execute after the func
147

147

00:06:56,922  -->  00:07:00,142
and then returns the wrap func.
148

148

00:07:00,142  -->  00:07:02,522
Then we created a very simple function,
149

149

00:07:02,522  -->  00:07:05,753
called func needs a decorator.
150

150

00:07:05,753  -->  00:07:08,765
All it did was print This function needs a decorator.
151

151

00:07:08,765  -->  00:07:11,154
Originally when we called it with no decoration,
152

152

00:07:11,154  -->  00:07:12,996
it just printed that statement.
153

153

00:07:12,996  -->  00:07:17,163
But we passed it into that new decorator function,
154

154

00:07:18,654  -->  00:07:21,737
and resigned it to its original name.
155

155

00:07:22,651  -->  00:07:24,582
So, then when we called it,
156

156

00:07:24,582  -->  00:07:25,626
you got the Code here,
157

157

00:07:25,626  -->  00:07:28,193
before executing the function happening.
158

158

00:07:28,193  -->  00:07:29,322
This, because remember,
159

159

00:07:29,322  -->  00:07:31,158
we're returning the wrap func.
160

160

00:07:31,158  -->  00:07:32,565
So, you get basically everything
161

161

00:07:32,565  -->  00:07:35,828
that's going on the wrap func with the function included.
162

162

00:07:35,828  -->  00:07:37,547
So, we got code here,
163

163

00:07:37,547  -->  00:07:38,969
This function needs a decorator,
164

164

00:07:38,969  -->  00:07:40,607
which is this statement.
165

165

00:07:40,607  -->  00:07:45,099
And then, code executes here after the func is called.
166

166

00:07:45,099  -->  00:07:46,815
Now you could've done
167

167

00:07:46,815  -->  00:07:49,408
this line right here that I'm highlighting,
168

168

00:07:49,408  -->  00:07:51,839
with this at new decorator symbol.
169

169

00:07:51,839  -->  00:07:54,988
And you'll realise it's the exact same thing.
170

170

00:07:54,988  -->  00:07:57,923
So, when are you gonna use this kind of behaviour?
171

171

00:07:57,923  -->  00:08:00,278
This is really common when you're working
172

172

00:08:00,278  -->  00:08:03,342
with web frameworks, such as Django and Flask.
173

173

00:08:03,342  -->  00:08:05,052
Which, you'll run into decorators
174

174

00:08:05,052  -->  00:08:07,080
a lot with web development.
175

175

00:08:07,080  -->  00:08:09,513
And you can even go through just
176

176

00:08:09,513  -->  00:08:13,182
the very beginning of the official Flask tutorial,
177

177

00:08:13,182  -->  00:08:15,893
and you'll notice that a decorator will be placed there.
178

178

00:08:15,893  -->  00:08:18,095
A lot of times, that's what prevents beginners
179

179

00:08:18,095  -->  00:08:19,594
from working with web frameworks,
180

180

00:08:19,594  -->  00:08:21,205
when they're just learning Python.
181

181

00:08:21,205  -->  00:08:22,800
Because this sort of notation,
182

182

00:08:22,800  -->  00:08:24,668
doesn't make any sense to them.
183

183

00:08:24,668  -->  00:08:27,320
But I hope now, that when you see
184

184

00:08:27,320  -->  00:08:28,728
how we manually built out
185

185

00:08:28,728  -->  00:08:32,696
that decorator notation and that reassignment,
186

186

00:08:32,696  -->  00:08:34,341
you'll feel that it's actually a lot easier
187

187

00:08:34,341  -->  00:08:35,935
just to call the new decorator,
188

188

00:08:35,935  -->  00:08:38,694
like this, with the at symbol.
189

189

00:08:38,694  -->  00:08:41,527
Okay, so that's it for decorators.
190

190

00:08:42,681  -->  00:08:45,328
And go ahead and check out the Jupyter notebook,
191

191

00:08:45,328  -->  00:08:47,680
if you're having any trouble.
192

192

00:08:47,680  -->  00:08:49,802
So, let's go ahead and open it here
193

193

00:08:49,802  -->  00:08:51,779
and zoom out of it.
194

194

00:08:51,779  -->  00:08:54,665
I want you to know that this entire Jupyter notebook
195

195

00:08:54,665  -->  00:08:56,594
takes you step by step,
196

196

00:08:56,594  -->  00:08:59,072
through decorators, functions review,
197

197

00:08:59,072  -->  00:09:00,489
the scope review,
198

198

00:09:01,659  -->  00:09:02,709
then it takes you through
199

199

00:09:02,709  -->  00:09:04,264
the functions within functions,
200

200

00:09:04,264  -->  00:09:07,603
returning functions, functions as assignments,
201

201

00:09:07,603  -->  00:09:09,339
and then creating a decorator,
202

202

00:09:09,339  -->  00:09:11,431
and using this decorator notation.
203

203

00:09:11,431  -->  00:09:13,700
So, I encourage you, even if you
204

204

00:09:13,700  -->  00:09:15,220
went through all the videos,
205

205

00:09:15,220  -->  00:09:17,012
take your time and really read through
206

206

00:09:17,012  -->  00:09:19,727
this decorator Jupyter notebook.
207

207

00:09:19,727  -->  00:09:22,781
Okay, so that's it for decorators.
208

208

00:09:22,781  -->  00:09:24,681
As for as uses, you probably won't see them
209

209

00:09:24,681  -->  00:09:26,486
within your own code unless you're doing
210

210

00:09:26,486  -->  00:09:29,373
some more advanced function passing
211

211

00:09:29,373  -->  00:09:31,810
or you're interested in web frameworks.
212

212

00:09:31,810  -->  00:09:34,271
But I hope this entire breakdown,
213

213

00:09:34,271  -->  00:09:37,258
really helps cement the topic for you.
214

214

00:09:37,258  -->  00:09:38,898
Okay, thanks, everyone.
215

215

00:09:38,898  -->  00:09:41,492
And I'll see you at the next lecture.
