WEBVTT
1
00:00:05.410 --> 00:00:06.430
Selamat datang kembali semuanya.

2
00:00:06.490 --> 00:00:10.080
Dan kuliah ini akan kita bahas untuk loop.

3
00:00:10.290 --> 00:00:15.600
Sekarang banyak objek dalam Python yang dapat diartikan artinya kita dapat beralih pada setiap elemen dalam objek

4
00:00:16.050 --> 00:00:21.150
seperti setiap elemen dalam daftar atau setiap karakter dalam string dan kita dapat menggunakan loop untuk

5
00:00:21.150 --> 00:00:23.170
mengeksekusi blok kode untuk setiap iterasi.

6
00:00:23.430 --> 00:00:27.570
Jadi saya ingin sedikit fokus pada istilah iterable karena Anda sering mendengarnya terutama dalam dokumentasi

7
00:00:27.570 --> 00:00:31.310
Python dan ini semacam istilah aneh jika Anda belum pernah mendengarnya sebelumnya.

8
00:00:31.350 --> 00:00:37.350
Jadi semua istilah ini berarti bahwa Anda dapat beralih pada objek dan itu berarti Anda dapat melakukan

9
00:00:37.380 --> 00:00:39.990
tindakan untuk setiap hal dalam objek.

10
00:00:39.990 --> 00:00:46.200
Jadi misalnya untuk setiap karakter dalam string, Anda dapat mengulangi melalui string itu dan kemudian melakukan sesuatu untuk

11
00:00:46.200 --> 00:00:46.960
setiap karakter.

12
00:00:46.980 --> 00:00:51.360
Seringkali mungkin Anda ingin mencetak setiap huruf dalam string itu atau setiap karakter tunggal dalam

13
00:00:51.360 --> 00:00:52.030
string itu.

14
00:00:52.050 --> 00:00:54.380
Jadi itu berarti string bukan objek yang dapat diubah.

15
00:00:54.390 --> 00:00:56.040
Anda bisa mengatasinya.

16
00:00:56.070 --> 00:00:58.390
Anda juga dapat mengulangi setiap item dalam daftar.

17
00:00:58.410 --> 00:01:02.850
Itu artinya daftar itu dapat diubah dan kemudian Anda dapat mengulangi setiap kunci dalam kamus.

18
00:01:02.880 --> 00:01:06.140
Jadi kamus itu sendiri juga bisa diulangi.

19
00:01:06.540 --> 00:01:12.810
Jadi agak sedikit istilah lucu di sana tapi anggap itu sebagai cara untuk melewati sesuatu.

20
00:01:12.900 --> 00:01:17.380
Jadi mari kita lihat contoh sintaks dari for for.

21
00:01:17.410 --> 00:01:19.830
Jadi ini adalah sintaks dari for loop break di sini.

22
00:01:19.840 --> 00:01:21.930
Perhatikan bahwa kita memiliki daftar yang ditentukan.

23
00:01:21.970 --> 00:01:26.380
Dan kemudian kami memiliki beberapa kata kunci dan kemudian kami melakukan beberapa tindakan jadi mari kita

24
00:01:26.380 --> 00:01:28.390
fokus pada setiap aspek sintaks ini.

25
00:01:28.390 --> 00:01:32.950
Kami mulai dengan pernyataan dan ini hanya tugas yang kami katakan iterable kami memilih itu

26
00:01:32.950 --> 00:01:33.970
sebagai nama variabel.

27
00:01:33.970 --> 00:01:38.530
Ini bisa menjadi daftar barang saya anjing saya apa pun yang Anda inginkan sama dengan.

28
00:01:38.560 --> 00:01:39.900
Dalam hal ini kami memilih daftar.

29
00:01:39.910 --> 00:01:43.540
Kita akan melihat contoh lain dari mangkuk lain hanya dalam sedetik.

30
00:01:43.750 --> 00:01:45.300
Jadi dia membuat semacam tugas.

31
00:01:45.310 --> 00:01:51.190
Kami memiliki nama variabel di sana dan kemudian kami akan mengatakan empat kata kunci untuk nama item.

32
00:01:51.190 --> 00:01:53.220
Jadi ini adalah nama variabel yang dapat Anda pilih.

33
00:01:53.380 --> 00:01:58.500
Itu akan menjadi sedikit penampung untuk setiap item di objek yang dapat Anda ubah.

34
00:01:58.540 --> 00:02:05.050
Dalam hal ini nama item sebenarnya mewakili angka-angka dalam daftar itu dan kami mengucapkan demikian kata kunci lain di sana dan

35
00:02:05.050 --> 00:02:08.870
kemudian nama variabel yang Anda pilih dalam kasus ini saya dapat diubah.

36
00:02:08.920 --> 00:02:15.580
Jadi kami mengatakan untuk setiap item atau nama item dalam daftar 1 hingga 3 ini maka kami memiliki titik dua dan kemudian kami memiliki

37
00:02:15.580 --> 00:02:18.790
spasi putih dan kemudian kami melakukan atau menjalankan beberapa blok kode.

38
00:02:18.790 --> 00:02:23.210
Dalam hal ini kami mengatakan nama item cetak tetapi Anda tidak harus benar-benar menggunakan nama item.

39
00:02:23.230 --> 00:02:26.610
Anda bisa mencetaknya halo tiga kali sehingga kami akan menunjukkan lebih banyak contoh tentang itu.

40
00:02:26.800 --> 00:02:29.040
Tapi itu sintaks dasar untuk loop

41
00:02:29.050 --> 00:02:33.500
Jadi mari kita benar-benar menjelajahi konsep-konsep ini dalam sebuah notebook Jupiter dan mencoba membangun pemahaman yang lebih dalam.

42
00:02:33.670 --> 00:02:37.150
Jadi kita akan melakukan loop untuk banyak objek yang berbeda dengan Python.

43
00:02:37.330 --> 00:02:41.630
Dan saya pikir pada akhir kuliah ini Anda akan memiliki pemahaman yang adil tentang ide dasar

44
00:02:41.650 --> 00:02:43.580
for loop dan bagaimana bekerja dengan mereka.

45
00:02:43.750 --> 00:02:46.430
Dan di sinilah Anda mulai meningkatkan keterampilan Anda.

46
00:02:46.450 --> 00:02:51.760
Jadi sebelum kita pada dasarnya baru saja belajar tentang objek tipe data kita belum benar-benar mampu

47
00:02:51.760 --> 00:02:53.140
membangun apa pun.

48
00:02:53.320 --> 00:02:57.880
Setelah Anda mulai belajar tentang aliran kontrol dan untuk loop dan kemudian saat

49
00:02:57.880 --> 00:03:03.670
loop dan kemudian setelah itu berfungsi dll. Di sinilah kita benar-benar mulai dapat membangun program logis.

50
00:03:03.700 --> 00:03:03.960
BAIK.

51
00:03:03.970 --> 00:03:05.050
Jadi ini adalah lompatan yang menarik.

52
00:03:05.140 --> 00:03:07.900
Mari kita menuju ke buku catatan Jupiter dan memulai.

53
00:03:07.900 --> 00:03:10.960
Baiklah mari kita mulai dengan contoh sederhana.

54
00:03:10.960 --> 00:03:13.020
Saya akan membuat daftar bernama daftar saya.

55
00:03:13.120 --> 00:03:18.800
Dan kita akan mengatur sekuel melalui angka satu sampai sepuluh akan mengatakan satu dua tiga empat

56
00:03:18.800 --> 00:03:20.820
lima enam tujuh delapan sembilan.

57
00:03:20.920 --> 00:03:24.160
Dan akhirnya 10 dan itu catatan yang sangat cepat.

58
00:03:24.370 --> 00:03:26.740
Anda tidak boleh menggunakan daftar sebagai nama variabel di sini.

59
00:03:26.740 --> 00:03:29.830
Perhatikan bahwa itu sedang disorot melalui penyorotan sintaks.

60
00:03:29.830 --> 00:03:35.160
Itu berarti daftar adalah kata kunci bawaan, jadi hindari menggunakan daftar adil dengan sendirinya sebagai nama variabel.

61
00:03:35.230 --> 00:03:40.480
Jika karena alasan tertentu Anda tidak sengaja atau melakukan itu, lanjutkan dan hapus ini lalu tekan saja kernel restart dan kemudian restart ini

62
00:03:40.930 --> 00:03:45.320
dan yang akan mengatur ulang semua nama variabel Anda di mana Anda harus lakukan adalah kemudian jalankan kembali

63
00:03:45.340 --> 00:03:47.340
sendiri jika Anda sudah memiliki barang yang ditentukan.

64
00:03:47.350 --> 00:03:49.090
Jadi saya hanya perlu memundurkannya.

65
00:03:49.090 --> 00:03:50.450
Perhatikan bagaimana sekarang kembali jam 1.

66
00:03:50.500 --> 00:03:54.730
Jadi saya sudah me-restart semuanya OK jadi saya punya daftar ini 1 sampai 10

67
00:03:54.730 --> 00:03:59.590
Sekarang saya akan membuat loop for untuk beralih ke setiap item dalam daftar ini.

68
00:03:59.590 --> 00:04:05.230
Jadi saya mulai dengan kata kunci 4 dan kemudian saya bisa memilih nama variabel yang akan mewakili

69
00:04:05.290 --> 00:04:06.950
elemen di dalam daftar ini.

70
00:04:07.700 --> 00:04:17.210
Jadi tidak aman bagi sebagian orang dalam daftar saya sehingga titik dua saya tekan enter dan perhatikan sekarang ada blok kode di

71
00:04:17.210 --> 00:04:18.070
sana.

72
00:04:18.320 --> 00:04:20.940
Jadi sekarang saya bisa berinteraksi dengan elemen-elemen aktual itu.

73
00:04:20.960 --> 00:04:21.760
Jadi mari kita cetak.

74
00:04:21.770 --> 00:04:23.660
Saya akan mengatakan untuk saat ini mereka dalam daftar saya.

75
00:04:23.660 --> 00:04:28.310
Mencetak mati rasa dan kemudian ketika saya menjalankan ini saya melihat satu dua tiga empat lima enam tujuh delapan sembilan 10.

76
00:04:28.310 --> 00:04:33.620
Jadi sebenarnya mencetak nomor ini untuk setiap nomor dalam daftar itu sesuatu yang saya

77
00:04:33.620 --> 00:04:38.780
ingin jelaskan adalah nama variabel yang Anda pilih untuk mewakili elemen-elemen di dalam daftar

78
00:04:38.780 --> 00:04:39.310
itu.

79
00:04:39.380 --> 00:04:40.550
Itu bisa menjadi apa pun yang Anda inginkan.

80
00:04:40.790 --> 00:04:45.770
Jadi di sini saya memilih bukan karena ini adalah angka tetapi saya hanya akan membuatnya

81
00:04:45.830 --> 00:04:53.750
sangat jelas dengan memilih Jeli dan kemudian mengatakan untuk Jeli dalam daftar saya cetak Jeli jalankan itu lagi dan Anda mendapatkan kembali hasil yang sama persis.

82
00:04:53.750 --> 00:04:59.930
Jadi sekali lagi nama variabel ini bisa menjadi apa pun yang Anda inginkan, iterable tidak boleh harus ditentukan sebelumnya tetapi

83
00:04:59.990 --> 00:05:05.060
nama variabel ini yang akan mewakili objek aktual di dalam iterable yang adalah apa pun yang

84
00:05:05.090 --> 00:05:05.890
Anda inginkan.

85
00:05:06.670 --> 00:05:11.020
Sekarang saya ingin menunjukkan titik bahwa kita secara teknis bahkan tidak perlu menggunakan nama variabel ini.

86
00:05:11.050 --> 00:05:16.480
Kami masih dapat menjalankan beberapa blok kode untuk setiap item dalam daftar meskipun kode itu sendiri tidak

87
00:05:16.510 --> 00:05:17.800
terkait dengan item tersebut.

88
00:05:17.860 --> 00:05:19.810
Jadi saya dapat mencetak halo untuk

89
00:05:23.560 --> 00:05:25.760
setiap item dalam daftar itu dan kami kembali.

90
00:05:25.780 --> 00:05:26.510
Halo.

91
00:05:26.710 --> 00:05:28.260
Satu sampai 10 kali.

92
00:05:28.300 --> 00:05:31.510
Dan lagi kita bisa menyebutnya apa pun yang kita inginkan.

93
00:05:31.750 --> 00:05:34.680
Jalankan itu dan kami kembali Halo 10 kali.

94
00:05:34.690 --> 00:05:38.920
Jadi perlu diingat ketika memilih nama variabel ini Anda memiliki fleksibilitas penuh

95
00:05:38.920 --> 00:05:44.010
sehingga Anda ingin memilih nama variabel yang entah bagaimana terkait dengan objek di dalam iterable.

96
00:05:44.010 --> 00:05:48.800
Sekarang mari kita menggabungkan pengetahuan kita untuk loop dengan sedikit dari apa yang baru saja kita bahas dalam aliran kontrol.

97
00:05:48.810 --> 00:05:52.800
Mari kita lihat apakah kita bisa mencetak hanya angka genap dalam daftar ini.

98
00:05:52.800 --> 00:05:59.580
Jadi untuk melakukan itu kita akan mulai dengan mengatakan untuk sekarang saya di daftar saya dan kemudian saya akan menambahkan beberapa

99
00:05:59.580 --> 00:06:02.060
aliran kontrol untuk entah bagaimana memeriksa angka.

100
00:06:02.070 --> 00:06:04.930
Meski begitu itu cek bahkan di sini.

101
00:06:04.950 --> 00:06:06.440
Ini hanya komentar.

102
00:06:06.750 --> 00:06:08.210
Dan kemudian apa yang akan saya lakukan adalah sebagai berikut.

103
00:06:08.210 --> 00:06:17.650
Saya akan mengatakan jika angka mati sama dengan nol titik dua mencetak nomor.

104
00:06:17.700 --> 00:06:23.970
Jadi apa yang saya lakukan di sini adalah saya katakan OK untuk setiap angka dalam daftar itu jika maumb mati rasa untuk mengatakan Ingat

105
00:06:24.060 --> 00:06:27.000
itu adalah sisa ketika Anda membagi 2 sama dengan nol.

106
00:06:27.000 --> 00:06:30.730
Jadi jika ada bilangan genap dan Anda membaginya dengan dua dan sisanya adalah nol.

107
00:06:30.840 --> 00:06:33.170
Kemudian Anda dapat melanjutkan dan mencetak nomor itu.

108
00:06:33.180 --> 00:06:34.870
Jadi kita jalankan ini.

109
00:06:34.980 --> 00:06:36.550
Di sini kita memiliki semua angka genap.

110
00:06:36.570 --> 00:06:38.320
Dua empat enam delapan 10.

111
00:06:38.520 --> 00:06:45.460
Dan itu dapat menambahkan lebih banyak aliran kontrol dengan melampirkan pernyataan lain ke pernyataan if ini dan

112
00:06:45.460 --> 00:06:54.250
kemudian mengatakan nomor ganjil Prince dan kita bahkan dapat melakukan beberapa format string literal jadi saya bisa mengatakan jika angka di sana

113
00:06:58.440 --> 00:07:03.510
menjalankannya dan mengatakan nomor ganjil nomor satu ke nomor tiga empat.

114
00:07:03.510 --> 00:07:04.830
Nomor lima enam.

115
00:07:05.090 --> 00:07:10.770
Jadi ini adalah pekerjaan yang baik di sini sejauh menggabungkan empat loop dengan aliran kontrol dari sebelumnya.

116
00:07:10.850 --> 00:07:13.410
Hal utama yang perlu diperhatikan di sini adalah dalam notasi.

117
00:07:13.460 --> 00:07:17.840
Jadi untungnya Python sangat bersih karena penggunaan case indentation.

118
00:07:17.900 --> 00:07:21.440
Jadi semua yang ada di level indentasi ini ada di dalam loop ini.

119
00:07:21.440 --> 00:07:27.050
Jadi seluruh blok kode ini akan mengeksekusi setiap nomor tunggal dalam daftar itu dan kemudian kita dapat

120
00:07:27.050 --> 00:07:31.100
melihat bahwa cetakan ini hanya akan dieksekusi ketika pernyataan ini jika benar.

121
00:07:31.160 --> 00:07:34.170
Dan yang lainnya dalam notasi ini berbaris dengan ini.

122
00:07:34.190 --> 00:07:41.150
Jika demikian kita katakan jika case ini dicetak yang lain dan kemudian kita mencetak nomor dan lagi menggunakan beberapa string literal

123
00:07:41.150 --> 00:07:44.230
di sini untuk mencetak nomor itu sendiri dengan baik.

124
00:07:45.270 --> 00:07:46.490
Baiklah, mari kita lanjutkan.

125
00:07:46.500 --> 00:07:51.960
Jadi ide umum lainnya untuk for loop adalah untuk menjaga semacam menjalankan penghitungan selama beberapa loop dan

126
00:07:51.960 --> 00:07:56.070
kemudian saya akan menunjukkan kepada Anda fungsi enumerasi yang melakukan ini gratis

127
00:07:56.070 --> 00:08:00.830
secara otomatis sekarang dan yang akan saya lakukan adalah mengatakan daftar beberapa sama dengan nol.

128
00:08:01.040 --> 00:08:04.520
Jadi mari kita coba untuk mendapatkan jumlah dari setiap angka dalam daftar itu.

129
00:08:04.520 --> 00:08:15.120
Jadi saya akan mengatakan untuk beberapa dalam daftar saya, saya akan mengatakan jumlah daftar sama dengan daftar saat ini.

130
00:08:15.120 --> 00:08:23.450
Beberapa ditambah jumlahnya dan kemudian saya akan ke luar untuk loop ini.

131
00:08:23.780 --> 00:08:26.730
Cetak beberapa daftar.

132
00:08:26.750 --> 00:08:28.880
Jadi ketika saya menjalankan ini saya mendapatkan kembali 55.

133
00:08:28.880 --> 00:08:33.250
Jadi ini adalah contoh lekukan dan kasus penggunaan yang baik.

134
00:08:33.260 --> 00:08:35.830
Jadi sekarang saya punya daftar ini.

135
00:08:35.870 --> 00:08:38.520
Jadi saya katakan bahwa jumlah awal saya adalah nol.

136
00:08:38.660 --> 00:08:44.990
Kemudian untuk setiap nomor tunggal dalam daftar itu saya mengambil nilai lama saya dari jumlah saya dan saya menambahkan nomor sekarang dan

137
00:08:45.080 --> 00:08:48.020
kemudian saya menetapkan kembali nilai itu untuk daftar beberapa.

138
00:08:48.020 --> 00:08:52.870
Jadi saya melakukan itu berulang-ulang untuk setiap angka dalam daftar itu dan kemudian pada

139
00:08:52.980 --> 00:08:57.860
akhir ini untuk loop 1 setelah selesai menyelesaikan level indentasi di sini saya mencetak daftar beberapa.

140
00:08:57.920 --> 00:09:03.580
Mari kita lihat apa yang akan terjadi jika saya menekan tab di sini dan memiliki pernyataan cetak ini di

141
00:09:03.590 --> 00:09:04.630
dalamnya untuk loop

142
00:09:04.640 --> 00:09:08.840
Sekarang ketika saya menjalankan ini saya mendapatkan kembali penghitungan berjalan dari jumlah ini.

143
00:09:08.930 --> 00:09:10.570
Jadi itu dimulai dari nol.

144
00:09:10.640 --> 00:09:14.440
Dan kemudian setelah menjalankan pertama di dalam for loop itu akan dicetak.

145
00:09:14.480 --> 00:09:16.430
Jadi itu nol plus satu.

146
00:09:16.580 --> 00:09:17.480
Yah itu sama dengan satu.

147
00:09:17.480 --> 00:09:20.200
Jadi cetak satu maka kita punya satu tambah dua.

148
00:09:20.270 --> 00:09:21.290
Ya, itu tiga.

149
00:09:21.290 --> 00:09:24.050
Jadi tiga tiga tambah tiga adalah enam.

150
00:09:24.050 --> 00:09:27.190
Enam dipaksa sepuluh sepuluh ditambah lima 15 dan seterusnya.

151
00:09:27.200 --> 00:09:30.840
Jadi sekarang kita mendapatkan penghitungan berjalan dan hanya sampai akhir kita melihat 55.

152
00:09:30.960 --> 00:09:35.990
Jika kita hanya ingin melihat hasil terakhir maka saya hanya perlu Sprint di luar itu untuk satu lingkaran.

153
00:09:36.050 --> 00:09:38.990
Jadi itu sebabnya di stasiun semua ruang putih sangat penting.

154
00:09:39.830 --> 00:09:42.120
Jadi kami hanya melihat cara menggunakan empat loop dengan daftar.

155
00:09:42.140 --> 00:09:43.440
Tapi bagaimana dengan string.

156
00:09:43.490 --> 00:09:44.930
Ingat string adalah suatu urutan.

157
00:09:44.930 --> 00:09:50.030
Itu berarti kita dapat mengulanginya dan kita akan mengakses setiap karakter dalam string itu.

158
00:09:50.090 --> 00:10:01.200
Jadi kita akan mengatakan empat huruf dalam dan mari kita membuat string akan mengatakan string saya sama dengan Hello World daripada empat

159
00:10:01.200 --> 00:10:08.600
huruf di usus saya mencetak huruf itu dan saya menjalankan ini di sini.

160
00:10:08.620 --> 00:10:13.890
C H E L L O ruang mereka akan menjadi O R L D.

161
00:10:13.920 --> 00:10:17.310
Jadi begitulah cara kita benar-benar dapat beralih melalui string itu sendiri.

162
00:10:17.310 --> 00:10:20.860
Dan secara teknis Anda tidak perlu benar-benar menetapkan nama variabel ke string.

163
00:10:20.900 --> 00:10:25.830
Anda bisa melakukannya hanya dengan meletakkan tali di sini.

164
00:10:26.250 --> 00:10:31.290
Jadi Anda bisa mengatakan empat huruf dalam surat cetak Hello World dan kami mendapatkan hasil yang sama persis.

165
00:10:31.380 --> 00:10:32.860
Dan saya benar-benar ingin mengarahkan titik ini ke rumah.

166
00:10:32.880 --> 00:10:35.850
Anda dapat memanggil ini apa pun yang Anda inginkan ke nama variabel surat ini.

167
00:10:35.850 --> 00:10:38.750
Anda bisa mengatakan GHC H.

168
00:10:38.760 --> 00:10:45.180
Dan selama itu adalah hal yang sama di dalam ini dan Anda menjalankan ini Anda akan mendapatkan hasil yang sama.

169
00:10:45.240 --> 00:10:49.320
Dan hal lain yang ingin saya tekankan adalah Anda secara teknis bahkan tidak perlu menggunakan variabel ini.

170
00:10:49.560 --> 00:10:53.880
Jadi sering kali apa yang dilakukan orang saat mereka semakin mahir dengan Python karena alasan tertentu mereka

171
00:10:53.880 --> 00:10:55.640
ingin mengulangi sesuatu dalam jumlah tertentu.

172
00:10:55.650 --> 00:10:57.390
Jadi bayangkan saya ingin

173
00:11:00.170 --> 00:11:03.570
Pangeran keren sebanyak karakter Anda ada di sini.

174
00:11:03.590 --> 00:11:03.980
Jadi saya mengerti.

175
00:11:03.980 --> 00:11:04.370
Gila.

176
00:11:04.370 --> 00:11:04.700
Gila.

177
00:11:04.700 --> 00:11:05.620
Keren.

178
00:11:05.690 --> 00:11:09.800
Apa yang mereka lakukan adalah alih-alih menetapkan nama variabel ini, mereka hanya menggunakan garis bawah.

179
00:11:09.800 --> 00:11:14.840
Dan itu sintaks yang sangat umum ketika Anda tidak bermaksud untuk benar-benar menggunakan nama variabel itu

180
00:11:14.840 --> 00:11:15.890
saat Anda mengulanginya.

181
00:11:15.920 --> 00:11:17.930
Jadi mereka hanya menggunakan garis bawah sederhana di sana.

182
00:11:18.050 --> 00:11:19.790
Dengan begitu sedikit lebih mudah dibaca.

183
00:11:20.180 --> 00:11:22.570
OK jadi itu iterasi melalui for for loop.

184
00:11:22.610 --> 00:11:25.820
Anda juga dapat menggunakan iterasi yang sama untuk setiap tuple.

185
00:11:25.820 --> 00:11:36.790
Jadi saya bisa mengatakan Toop sama dengan satu hingga tiga lalu untuk item dan TUPE mencetak item menjalankannya dan kembali

186
00:11:36.800 --> 00:11:38.980
1 sampai 3.

187
00:11:38.990 --> 00:11:43.670
Sekarang saya ingin menyebutkan pengemasan tuple sehingga tuple memiliki sedikit kualitas khusus dalam hal

188
00:11:43.670 --> 00:11:44.360
loop.

189
00:11:44.390 --> 00:11:50.560
Jadi iterasi melalui urutan yang berisi sendiri tupel item dapat digunakan dengan tuple dan

190
00:11:50.570 --> 00:11:51.350
pengepakan.

191
00:11:51.350 --> 00:11:53.700
Jadi, saya tunjukkan apa yang saya maksud dengan ini.

192
00:11:53.780 --> 00:12:00.120
Saya ingin membuat daftar baru yang disebut daftar saya dan saya akan mengatur ini sama dengan daftar tupel.

193
00:12:00.140 --> 00:12:04.610
Jadi di sini Anda memiliki tanda kurung siku dan saya akan membuat beberapa pasangan tuple.

194
00:12:04.700 --> 00:12:15.600
Kita akan mengatakan satu dua koma lalu tiga empat koma lima enam koma tujuh delapan.

195
00:12:15.620 --> 00:12:17.030
Jadi perhatikan apa yang Anda miliki di sini.

196
00:12:17.030 --> 00:12:18.040
Saya punya daftar.

197
00:12:18.080 --> 00:12:22.170
Dan kemudian ada pasangan tuple sebagai item dalam daftar itu.

198
00:12:22.190 --> 00:12:29.750
Jadi jika saya memeriksa panjang daftar saya, saya punya empat item di mana setiap item adalah pasangan tuple.

199
00:12:29.810 --> 00:12:32.440
Jadi mari kita cetak barang-barang itu sendiri.

200
00:12:32.480 --> 00:12:35.540
Untuk item dalam daftar saya.

201
00:12:35.540 --> 00:12:36.890
Cetak item tersebut.

202
00:12:37.220 --> 00:12:39.210
Dan ketika saya menjalankan ini sebenarnya melihat tuple sendiri.

203
00:12:39.230 --> 00:12:41.980
Satu dua tiga empat lima enam tujuh delapan.

204
00:12:42.290 --> 00:12:47.480
Jenis struktur data ini sangat umum di Python dan kemudian kita akan

205
00:12:47.480 --> 00:12:53.420
melihat bahwa banyak fungsi Python yang dibangun memanfaatkan struktur bawaan ini dan mengembalikan tupel

206
00:12:53.570 --> 00:12:54.950
di dalam daftar.

207
00:12:54.950 --> 00:12:57.710
Dan alasan untuk itu adalah sesuatu yang disebut tuple dan packing.

208
00:12:57.710 --> 00:13:01.740
Saat ini kami telah mencetak setiap item di dalam tuple ini.

209
00:13:02.240 --> 00:13:04.150
Tapi yang bisa dilakukan adalah sebagai berikut.

210
00:13:04.430 --> 00:13:08.140
Bisa saya katakan biarkan saya menghapus pernyataan cetak.

211
00:13:08.370 --> 00:13:09.090
Saya bisa melakukan yang berikut ini.

212
00:13:09.090 --> 00:13:16.770
Saya bisa mengatakan dan membuat semacam nama variabel sementara yang terlihat seperti tuple di sini.

213
00:13:16.770 --> 00:13:25.870
Jadi untuk B dalam daftar saya maka saya dapat mencetak variabel A dan kemudian mencetak variabel b.

214
00:13:26.040 --> 00:13:30.490
Jadi apa yang terjadi sekarang saya katakan 1 2 3 4 5 6 7 8.

215
00:13:30.540 --> 00:13:31.750
Jadi sebenarnya terjadi di sini.

216
00:13:31.770 --> 00:13:37.740
Nah ini disebut tuple membongkar di mana Anda jenis menduplikasi struktur item.

217
00:13:37.860 --> 00:13:41.700
Dalam hal ini tuple di dalam urutan ini dan kemudian membukanya.

218
00:13:41.700 --> 00:13:44.330
Jadi sekarang saya memiliki akses ke item individual.

219
00:13:44.370 --> 00:13:50.550
Jadi, jika saya hanya ingin mencetak item pertama di tupel itu, maka saya menjalankan ini, saya kembali 1 3 5 7

220
00:13:50.550 --> 00:13:52.030
karena tidak hanya mencetak a.

221
00:13:52.160 --> 00:13:53.810
Jadi ini dikenal sebagai tuple dalam pengepakan.

222
00:13:53.970 --> 00:13:56.600
Dan secara teknis Anda sebenarnya tidak membutuhkan pangeran-pangeran ini di sini.

223
00:13:56.730 --> 00:14:00.340
Jadi jauh lebih umum untuk melihatnya dilakukan dengan cara ini tanpa tanda kurung.

224
00:14:00.540 --> 00:14:03.850
Jadi saya katakan untuk huruf B dalam daftar saya cetak a.

225
00:14:03.960 --> 00:14:08.220
Kita akan melihat apa yang terjadi jika kita mencetak B kita harus mendapatkan kembali nomor genap Aldo

226
00:14:08.220 --> 00:14:10.470
sehingga paruh kedua itu 2 4 6 8.

227
00:14:10.470 --> 00:14:16.750
Jadi sekali lagi ini tuple dalam pengepakan dan Anda akan sering menggunakannya saat Anda mulai bekerja dengan

228
00:14:16.770 --> 00:14:22.960
lebih banyak fungsi Python karena banyak hal akan mengembalikan jenis pasangan dan urutan dengan cara ini.

229
00:14:22.960 --> 00:14:26.890
Kami memiliki daftar tupel dan ingin menunjukkan satu contoh lagi kepada Anda.

230
00:14:27.690 --> 00:14:38.050
Katakanlah daftar saya sama dengan daftar satu hingga tiga, satu hingga tiga, sementara beberapa angka berbeda mengatakan lima enam

231
00:14:38.950 --> 00:14:45.200
tujuh dan kami akan melakukan satu lagi dengan sembilan dan 10.

232
00:14:45.200 --> 00:14:47.850
Saya mendapatkan nomor empat di sini tetapi bukan masalah besar.

233
00:14:47.940 --> 00:14:55.510
Katakan untuk item dalam daftar item cetak saya dan ada tiga tupel saya.

234
00:14:55.580 --> 00:14:57.180
Tapi saya bisa melakukan tuple membongkar di sini.

235
00:14:57.230 --> 00:15:04.270
Cara saya bisa melakukannya adalah membuat tiga nama variabel yang memisahkannya dengan koma sehingga saya bisa mengatakan A B C.

236
00:15:04.370 --> 00:15:05.610
Perhatikan saya tidak memiliki pangeran-pangeran ini.

237
00:15:05.630 --> 00:15:08.430
Dan kemudian saya dapat mencetak yang mana saja dari yang saya inginkan ini.

238
00:15:08.510 --> 00:15:14.720
Sebagai contoh jika saya hanya ingin mencetak angka 6 6 dan 9 itu saya hanya akan mengatakan B dan di sana kita pergi kita

239
00:15:14.720 --> 00:15:16.750
memiliki akses untuk menjadi hanya nomor tengah.

240
00:15:16.750 --> 00:15:21.890
Jadi ini sangat berguna ketika Anda mungkin ingin menata ulang struktur ini menjadi beberapa cara lain atau

241
00:15:22.160 --> 00:15:25.980
mungkin Anda hanya ingin berurusan dengan item pertama dalam pasangan tuple ini.

242
00:15:26.330 --> 00:15:28.490
OK jadi itu tuple dalam pengepakan.

243
00:15:28.550 --> 00:15:33.830
Dan sekarang mari kita selesaikan diskusi ini tentang empat loop dengan membahas bagaimana cara

244
00:15:34.760 --> 00:15:40.890
mengulanginya melalui kamus sehingga kita akan membuat kamus yang disebut akan memiliki K-1 adalah nilai kunci

245
00:15:40.890 --> 00:15:45.480
dan akan memiliki nomor satu adalah nilai katakan K-2 di sini.

246
00:15:47.160 --> 00:15:55.050
Panggil dan 2 dan kemudian kita akan mengatakan K3 usus tiga dan kemudian saya pergi ke empat.

247
00:15:55.080 --> 00:16:00.260
Item dalam item cetak.

248
00:16:00.280 --> 00:16:02.020
Jadi ini sesuatu yang agak menarik.

249
00:16:02.020 --> 00:16:06.860
Perhatikan bahwa secara default ketika Anda beralih melalui kamus Anda hanya mengulang melalui Tombol.

250
00:16:06.880 --> 00:16:13.960
Jadi K-1 K-2 dan K3 jika Anda berjalan, kami ingin mengulang item itu sendiri.

251
00:16:13.980 --> 00:16:21.440
Yang perlu Anda lakukan adalah memanggil item di sini dan sekarang ketika Anda menjalankannya Anda mendapatkan kembali dua pasang K-1 ini satu hingga

252
00:16:21.580 --> 00:16:26.760
dua tiga atau tiga yang berarti kita dapat menggunakan teknik tuple dan pengemasan yang sama.

253
00:16:26.770 --> 00:16:27.960
Kami baru saja berdiskusi.

254
00:16:27.970 --> 00:16:34.270
Jadi alih-alih item yang bisa dilakukan adalah mengatakan nilai koma kunci dan katakanlah saya hanya ingin

255
00:16:34.270 --> 00:16:38.670
mencetak nilai-nilai maka saya bisa mengatakan untuk nilai kunci dalam item.

256
00:16:38.670 --> 00:16:44.530
Cetak nilainya dan saya punya 1 2 dan 3 lagi mengambil keuntungan dari tuple dan pengepakan di

257
00:16:44.550 --> 00:16:50.520
sini karena item mengembalikan sesuatu dalam format semacam ini dan lebih mungkin itu jenis forment yang kami miliki

258
00:16:50.520 --> 00:16:51.800
kunci dan nilainya.

259
00:16:51.810 --> 00:16:56.440
Jadi kami menggunakan kemasan tuple yang sama yang baru saja kami diskusikan dengan item D.

260
00:16:56.460 --> 00:16:59.910
Jadi secara default ketika Anda beralih melalui kamus itu akan menjadi kunci.

261
00:16:59.910 --> 00:17:04.030
Jika Anda ingin mengulangi item-item tersebut, Anda dapat menggunakan tuple unpacking packing untuk mengambil kunci dan nilai-nilai.

262
00:17:04.200 --> 00:17:12.370
Jika Anda hanya menginginkan nilai-nilai itu sendiri, Anda dapat melakukannya dengan mengatakan nilai Diderot dan kemudian memanggilnya untuk ini.

263
00:17:12.700 --> 00:17:16.020
Jalankan itu dan hanya cetak nilai satu dua tiga.

264
00:17:16.030 --> 00:17:20.310
Hal terakhir yang ingin saya perhatikan di sini adalah bahwa kamus secara teknis tidak teratur.

265
00:17:20.320 --> 00:17:21.760
Ini adalah kamus yang sangat kecil.

266
00:17:21.760 --> 00:17:25.700
Jadi sepertinya semuanya berjalan dalam urutan 1 2 3 K-1 K-2 K3.

267
00:17:25.840 --> 00:17:29.970
Tetapi jika Anda memiliki kamus yang sangat besar, tidak ada jaminan semuanya akan diurutkan atau dalam

268
00:17:29.980 --> 00:17:31.070
urutan apa pun.

269
00:17:31.150 --> 00:17:33.460
Jadi ingatlah itu ketika Anda beralih melalui kamus.

270
00:17:33.560 --> 00:17:37.380
Tidak ada jaminan bahwa Anda akan mendapatkan kembali barang sesuai urutan yang Anda masukkan.

271
00:17:37.390 --> 00:17:37.840
BAIK.

272
00:17:38.050 --> 00:17:42.970
Jadi sekarang kita telah belajar tentang cara menggunakan untuk loop dengan tuple senarai dan kamus.

273
00:17:42.970 --> 00:17:44.670
Ini akan menjadi alat yang sangat penting bagi kami.

274
00:17:44.670 --> 00:17:48.940
Jadi pastikan Anda memahaminya dengan baik contoh di atas secara khusus memastikan Anda benar-benar

275
00:17:49.000 --> 00:17:53.110
memahami spasi putih jadi mungkin hal yang paling bijaksana untuk keluar dari kuliah

276
00:17:53.110 --> 00:17:59.950
ini adalah fakta untuk menggunakan ini untuk kata kunci dan variabel sementara yang ingin Anda katakan kemudian kata kunci dalam beberapa semacam objek

277
00:18:00.040 --> 00:18:02.760
iterable baik nilai daftar atau string itu sendiri.

278
00:18:02.800 --> 00:18:08.620
Seperti yang kita lihat di sini titik dua dan kemudian di blok kode ini yang akan mengeksekusi

279
00:18:08.620 --> 00:18:11.560
setiap waktu untuk setiap iterable dalam daftar itu.

280
00:18:11.560 --> 00:18:12.310
Terimakasih semuanya.

281
00:18:12.310 --> 00:18:15.630
Dan jika Anda memiliki pertanyaan, jangan ragu untuk mengirimkannya ke forum Tanya Jawab.

282
00:18:15.670 --> 00:18:16.690
Sampai jumpa di kuliah berikutnya.
