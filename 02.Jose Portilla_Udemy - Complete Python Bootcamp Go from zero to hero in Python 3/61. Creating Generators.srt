1
1

00:00:01,562  -->  00:00:05,210
<v Instructor>Hello everyone and welcome to the live code</v>
2

2

00:00:05,210  -->  00:00:07,878
first lecture in the iterators and generators
3

3

00:00:07,878  -->  00:00:09,056
section of this course.
4

4

00:00:09,056  -->  00:00:10,626
So we already gotten a brief introduction
5

5

00:00:10,626  -->  00:00:12,855
of just the general concept of generators.
6

6

00:00:12,855  -->  00:00:15,166
Now let's actually make some generator functions
7

7

00:00:15,166  -->  00:00:16,777
to see how they work.
8

8

00:00:16,777  -->  00:00:19,917
So what I'm gonna do is create a generator function
9

9

00:00:19,917  -->  00:00:22,767
and it's gonna look very similar to a normal function.
10

10

00:00:22,767  -->  00:00:25,830
With one key difference being the yield keyword.
11

11

00:00:25,830  -->  00:00:28,330
So I'm gonna call it gencubes.
12

12

00:00:29,328  -->  00:00:31,879
And it's gonna take an argument, n.
13

13

00:00:31,879  -->  00:00:34,853
And then for num in range n.
14

14

00:00:34,853  -->  00:00:36,775
So n's gonna be a number.
15

15

00:00:36,775  -->  00:00:39,358
I'm going to yield, not return,
16

16

00:00:40,336  -->  00:00:42,919
that num to the power of three.
17

17

00:00:44,496  -->  00:00:46,829
And then I'm gonna say for x
18

18

00:00:47,955  -->  00:00:48,955
in gencubes.
19

19

00:00:50,385  -->  00:00:51,468
Let's say 10.
20

20

00:00:52,414  -->  00:00:54,164
Go ahead and print x.
21

21

00:00:56,074  -->  00:00:57,943
So if you notice what's going on here.
22

22

00:00:57,943  -->  00:00:59,823
Since we have a generator function
23

23

00:00:59,823  -->  00:01:01,614
we don't actually have to keep track
24

24

00:01:01,614  -->  00:01:05,295
of every single cubed number that we created.
25

25

00:01:05,295  -->  00:01:06,755
So as I mentioned, generators are best
26

26

00:01:06,755  -->  00:01:09,416
for calculating large sets of results.
27

27

00:01:09,416  -->  00:01:13,988
So if I ended up putting some ginormous number here.
28

28

00:01:13,988  -->  00:01:15,276
Yes, they would all print.
29

29

00:01:15,276  -->  00:01:18,446
Which would be a little bit messy.
30

30

00:01:18,446  -->  00:01:20,354
But if I just wanted to do something
31

31

00:01:20,354  -->  00:01:22,585
with that number and not actually print it out.
32

32

00:01:22,585  -->  00:01:26,895
That'd be a lot better than if I had a list return here.
33

33

00:01:26,895  -->  00:01:30,523
So the way this would look if it was a normal function.
34

34

00:01:30,523  -->  00:01:34,105
I would have some sort of list out.
35

35

00:01:34,105  -->  00:01:36,438
And then be, say, out.append
36

36

00:01:37,985  -->  00:01:39,126
that number.
37

37

00:01:39,126  -->  00:01:40,917
But you can imagine
38

38

00:01:40,917  -->  00:01:43,816
if I were to, at the end,
39

39

00:01:43,816  -->  00:01:47,983
return out and then say for x in gencubes of 10.
40

40

00:01:48,826  -->  00:01:51,284
Let's go ahead and run this.
41

41

00:01:51,284  -->  00:01:54,274
You'll notice it's the exact same thing.
42

42

00:01:54,274  -->  00:01:58,814
But Python's actually keeping out here in memory.
43

43

00:01:58,814  -->  00:02:00,813
So if this is a humongous number
44

44

00:02:00,813  -->  00:02:02,333
you're gonna run into errors.
45

45

00:02:02,333  -->  00:02:06,145
Or just general problems with your code slowing down.
46

46

00:02:06,145  -->  00:02:07,774
To show you a better example of this
47

47

00:02:07,774  -->  00:02:10,073
I'm going to create an example generator
48

48

00:02:10,073  -->  00:02:12,613
that calculates Fibonacci numbers.
49

49

00:02:12,613  -->  00:02:15,073
So in case you're not familiar with Fibonacci numbers
50

50

00:02:15,073  -->  00:02:17,955
you can go ahead and go to the Jupyter notebook
51

51

00:02:17,955  -->  00:02:20,012
and click this link here.
52

52

00:02:20,012  -->  00:02:21,694
If you want go ahead and pause the video
53

53

00:02:21,694  -->  00:02:24,544
so you can see what Fibonacci's numbers are.
54

54

00:02:24,544  -->  00:02:26,454
But basically you can think of it as just
55

55

00:02:26,454  -->  00:02:29,253
an integer sequence where the last two numbers
56

56

00:02:29,253  -->  00:02:31,986
are getting summed together for the next one.
57

57

00:02:31,986  -->  00:02:35,016
So if you can zoom in here.
58

58

00:02:35,016  -->  00:02:38,206
Check out this first integer.
59

59

00:02:38,206  -->  00:02:41,068
And in modern uses they usually start at zero.
60

60

00:02:41,068  -->  00:02:42,397
But what you're doing here is saying
61

61

00:02:42,397  -->  00:02:45,117
one plus one equals two, one plus two equals three,
62

62

00:02:45,117  -->  00:02:46,785
two plus three equals five, et cetera.
63

63

00:02:46,785  -->  00:02:48,406
So on and so on.
64

64

00:02:48,406  -->  00:02:49,787
So there's a lot of interesting patterns
65

65

00:02:49,787  -->  00:02:51,386
that you can check out on this page
66

66

00:02:51,386  -->  00:02:52,687
but that's all you need to know
67

67

00:02:52,687  -->  00:02:56,016
as far as this lecture video's concerned.
68

68

00:02:56,016  -->  00:02:58,956
So going back to the lecture for the live code.
69

69

00:02:58,956  -->  00:03:03,123
Let's go ahead and make a generator called genfibon.
70

70

00:03:04,485  -->  00:03:06,157
It's gonna take a number, n.
71

71

00:03:06,157  -->  00:03:10,447
And it's gonna generate a Fibonacci sequence up to n.
72

72

00:03:10,447  -->  00:03:14,377
So I'll make a equal one. And b equal one.
73

73

00:03:14,377  -->  00:03:18,134
So we'll go with that more classic starting point.
74

74

00:03:18,134  -->  00:03:19,697
Or where it starts one, one.
75

75

00:03:19,697  -->  00:03:21,308
So that first line of that Wikipedia page.
76

76

00:03:21,308  -->  00:03:24,089
And then I'm gonna say for i
77

77

00:03:24,089  -->  00:03:24,922
in range n
78

78

00:03:28,599  -->  00:03:29,432
yield a.
79

79

00:03:31,339  -->  00:03:32,979
And then after you yield it I'm gonna say
80

80

00:03:32,979  -->  00:03:34,767
a is now equal to b.
81

81

00:03:34,767  -->  00:03:36,996
And then b is now equal to the sum of those two.
82

82

00:03:36,996  -->  00:03:37,829
A plus b.
83

83

00:03:39,835  -->  00:03:41,835
So now I can say for num
84

84

00:03:43,003  -->  00:03:44,170
in genfibon 10
85

85

00:03:48,644  -->  00:03:49,477
print num.
86

86

00:03:50,684  -->  00:03:54,101
And you'll notice here we start printing.
87

87

00:03:55,032  -->  00:03:56,471
And you'll notice this sequence of numbers
88

88

00:03:56,471  -->  00:03:57,648
is actually incorrect.
89

89

00:03:57,648  -->  00:03:59,489
This is not a Fibonacci sequence.
90

90

00:03:59,489  -->  00:04:01,871
And I hope you spotted the error.
91

91

00:04:01,871  -->  00:04:02,930
The reason I showed this is because
92

92

00:04:02,930  -->  00:04:05,481
this is a common interview question mistake.
93

93

00:04:05,481  -->  00:04:06,581
But what's going on here is
94

94

00:04:06,581  -->  00:04:09,783
we need to actually assign a temporary variable.
95

95

00:04:09,783  -->  00:04:12,645
Since we're reassigning a to b here.
96

96

00:04:12,645  -->  00:04:14,644
This is actually a statement of just saying
97

97

00:04:14,644  -->  00:04:16,035
b plus b equals b.
98

98

00:04:16,035  -->  00:04:18,224
So what we can do, there's actually two ways to do this.
99

99

00:04:18,224  -->  00:04:21,898
I'll show you the more general way first.
100

100

00:04:21,898  -->  00:04:23,065
So I would say
101

101

00:04:24,226  -->  00:04:25,893
a temporary variable
102

102

00:04:28,653  -->  00:04:29,986
t is equal to a.
103

103

00:04:31,766  -->  00:04:33,599
Then set a equal to b.
104

104

00:04:34,865  -->  00:04:38,326
And here I can have b equal to t plus b.
105

105

00:04:38,326  -->  00:04:41,765
And if I run that now we have the Fibonacci sequence.
106

106

00:04:41,765  -->  00:04:44,996
Another way to do this is using tuple unpacking.
107

107

00:04:44,996  -->  00:04:47,596
And that will actually reduce this to one line
108

108

00:04:47,596  -->  00:04:50,508
where you can do the assignments at the same time.
109

109

00:04:50,508  -->  00:04:52,319
And that will look like this.
110

110

00:04:52,319  -->  00:04:53,402
A b equals b.
111

111

00:04:55,259  -->  00:04:56,092
A plus b.
112

112

00:04:57,131  -->  00:04:59,711
And you'll notice that's the same result.
113

113

00:04:59,711  -->  00:05:01,061
Just something to keep in mind.
114

114

00:05:01,061  -->  00:05:03,691
And we go over this tuple unpacking later on
115

115

00:05:03,691  -->  00:05:06,779
in the advanced tuple section of this course.
116

116

00:05:06,779  -->  00:05:07,612
Okay.
117

117

00:05:07,612  -->  00:05:08,788
Just wanted to mention that since
118

118

00:05:08,788  -->  00:05:10,927
that's a common interview question.
119

119

00:05:10,927  -->  00:05:13,144
And it's also a common interview mistake.
120

120

00:05:13,144  -->  00:05:16,436
As you're learning about generators.
121

121

00:05:16,436  -->  00:05:17,873
Okay.
122

122

00:05:17,873  -->  00:05:19,405
So moving along.
123

123

00:05:19,405  -->  00:05:22,595
We've created this Fibonacci sequence.
124

124

00:05:22,595  -->  00:05:24,287
So what would this look like
125

125

00:05:24,287  -->  00:05:26,993
if we wanted to create a normal function?
126

126

00:05:26,993  -->  00:05:28,583
Well it would look something like this.
127

127

00:05:28,583  -->  00:05:30,112
I would have
128

128

00:05:30,112  -->  00:05:30,945
def fibon
129

129

00:05:32,418  -->  00:05:34,031
n.
130

130

00:05:34,031  -->  00:05:36,034
Let's go ahead and start it at one again.
131

131

00:05:36,034  -->  00:05:38,571
So a equals one. B equals one.
132

132

00:05:38,571  -->  00:05:40,155
Again we can actually use tuple unpacking
133

133

00:05:40,155  -->  00:05:41,476
to do that assignment.
134

134

00:05:41,476  -->  00:05:44,655
A comma b equals one comma one.
135

135

00:05:44,655  -->  00:05:46,337
But we won't do that for now.
136

136

00:05:46,337  -->  00:05:50,467
We have to assign an output list and then say for
137

137

00:05:50,467  -->  00:05:51,467
i in range n
138

138

00:05:54,643  -->  00:05:55,976
output.append a.
139

139

00:05:58,909  -->  00:06:01,347
And then do the assignment here.
140

140

00:06:01,347  -->  00:06:02,430
A b equals b.
141

141

00:06:03,649  -->  00:06:04,482
A plus b.
142

142

00:06:05,840  -->  00:06:08,923
And then at the end we return output.
143

143

00:06:12,391  -->  00:06:14,724
And then if I call fibon 10.
144

144

00:06:16,211  -->  00:06:19,459
I get the Fibonacci list sequence out.
145

145

00:06:19,459  -->  00:06:20,379
Okay.
146

146

00:06:20,379  -->  00:06:25,197
So notice again if we call some very large value of n.
147

147

00:06:25,197  -->  00:06:28,526
You know if I were to pass in a lot of zeroes here.
148

148

00:06:28,526  -->  00:06:31,626
We would have to hold that entire list in memory.
149

149

00:06:31,626  -->  00:06:34,924
And we'd have to keep track of every single result.
150

150

00:06:34,924  -->  00:06:37,805
But for the generators we only keep track
151

151

00:06:37,805  -->  00:06:40,415
of the current number in that sequence.
152

152

00:06:40,415  -->  00:06:43,335
So we don't keep track of every single result.
153

153

00:06:43,335  -->  00:06:44,202
Okay.
154

154

00:06:44,202  -->  00:06:46,742
So the key to fully understanding generators
155

155

00:06:46,742  -->  00:06:49,003
is the next function and the iter function.
156

156

00:06:49,003  -->  00:06:50,393
And this will really help you cement
157

157

00:06:50,393  -->  00:06:52,785
what's actually going on.
158

158

00:06:52,785  -->  00:06:54,675
So the next function,
159

159

00:06:54,675  -->  00:06:57,104
and it literally looks like this, just next.
160

160

00:06:57,104  -->  00:07:00,024
Allows us to access the next element in a sequence.
161

161

00:07:00,024  -->  00:07:02,624
So I'll show you through some simple examples.
162

162

00:07:02,624  -->  00:07:05,184
I wanna create a function.
163

163

00:07:05,184  -->  00:07:09,481
Or, excuse me, a generator function, simple_gen.
164

164

00:07:09,481  -->  00:07:12,464
It's not gonna take in any arguments and it's gonna say,
165

165

00:07:12,464  -->  00:07:14,381
for x in range three
166

166

00:07:18,074  -->  00:07:18,907
yield x.
167

167

00:07:20,925  -->  00:07:21,952
Okay.
168

168

00:07:21,952  -->  00:07:22,969
Now what I'm gonna do,
169

169

00:07:22,969  -->  00:07:24,670
since everything in Python is an object,
170

170

00:07:24,670  -->  00:07:27,790
I'm actually going to assign simple_gen
171

171

00:07:27,790  -->  00:07:29,040
to the label g.
172

172

00:07:31,438  -->  00:07:33,521
Simple_gen. Close it off.
173

173

00:07:35,127  -->  00:07:36,677
And then say print,
174

174

00:07:36,677  -->  00:07:38,358
and this is where the next function comes in.
175

175

00:07:38,358  -->  00:07:40,608
I'm gonna say print next g.
176

176

00:07:42,167  -->  00:07:44,099
First one's gonna be zero.
177

177

00:07:44,099  -->  00:07:47,527
If I do this again. Print next g.
178

178

00:07:47,527  -->  00:07:50,066
We'll get a one. If I do this again.
179

179

00:07:50,066  -->  00:07:53,824
Notice I'm gonna keep going up and up.
180

180

00:07:53,824  -->  00:07:56,397
So now I'm gonna copy this.
181

181

00:07:56,397  -->  00:07:58,307
Control copy.
182

182

00:07:58,307  -->  00:08:00,307
And I'm gonna keep going
183

183

00:08:01,274  -->  00:08:03,145
until we get an error.
184

184

00:08:03,145  -->  00:08:05,452
Here we go, stop iteration.
185

185

00:08:05,452  -->  00:08:08,381
So after yielding all the values.
186

186

00:08:08,381  -->  00:08:11,432
So notice all the values was up to three here.
187

187

00:08:11,432  -->  00:08:13,211
So that was zero, one, two.
188

188

00:08:13,211  -->  00:08:14,461
So up to three.
189

189

00:08:15,531  -->  00:08:17,013
We have a stop iteration error.
190

190

00:08:17,013  -->  00:08:18,421
So what this error informs us of
191

191

00:08:18,421  -->  00:08:21,129
is that all the values have been yielded.
192

192

00:08:21,129  -->  00:08:22,139
So you might be wondering:
193

193

00:08:22,139  -->  00:08:25,811
Why don't we get this error when we're using a for loop?
194

194

00:08:25,811  -->  00:08:28,168
And that's because the for loop automatically catches
195

195

00:08:28,168  -->  00:08:31,221
this error and then stops calling next.
196

196

00:08:31,221  -->  00:08:32,332
So let's go ahead and check out
197

197

00:08:32,332  -->  00:08:34,390
how to use the iter function.
198

198

00:08:34,390  -->  00:08:37,037
Which is I-T-E-R.
199

199

00:08:37,037  -->  00:08:40,427
So you remember that strings are iterables.
200

200

00:08:40,427  -->  00:08:42,578
So, for example, I could say
201

201

00:08:42,578  -->  00:08:44,828
s equals the string 'hello'
202

202

00:08:46,715  -->  00:08:49,517
for L-E-T in s
203

203

00:08:49,517  -->  00:08:51,190
prints ets.
204

204

00:08:51,190  -->  00:08:52,940
Print let, excuse me.
205

205

00:08:54,740  -->  00:08:58,632
So I'm gonna print every letter in that string.
206

206

00:08:58,632  -->  00:09:00,995
So, we can iterate though a string
207

207

00:09:00,995  -->  00:09:02,075
since they're iterables.
208

208

00:09:02,075  -->  00:09:05,845
But that doesn't mean the string itself is an iterator.
209

209

00:09:05,845  -->  00:09:08,123
What we can do is check this with the next function.
210

210

00:09:08,123  -->  00:09:09,661
So, for instance, if I wanted to say,
211

211

00:09:09,661  -->  00:09:12,328
okay, give me the next one of s.
212

212

00:09:13,853  -->  00:09:16,813
It'll say string object is not an iterator.
213

213

00:09:16,813  -->  00:09:18,020
So it's an iterable.
214

214

00:09:18,020  -->  00:09:19,988
Which means we can iterate through it.
215

215

00:09:19,988  -->  00:09:21,498
But it's not an iterator itself.
216

216

00:09:21,498  -->  00:09:25,198
It's not returning stuff like a function.
217

217

00:09:25,198  -->  00:09:27,738
Alright, so, that's where the iter function
218

218

00:09:27,738  -->  00:09:29,659
actually comes into play.
219

219

00:09:29,659  -->  00:09:32,479
So the string object supports iteration
220

220

00:09:32,479  -->  00:09:34,312
but we cannot directly iterate over it
221

221

00:09:34,312  -->  00:09:36,780
as we could with a generator function.
222

222

00:09:36,780  -->  00:09:38,770
Unless we use the iter function.
223

223

00:09:38,770  -->  00:09:42,270
So I can say s underscore iter is equal to
224

224

00:09:44,142  -->  00:09:44,975
iter s.
225

225

00:09:46,272  -->  00:09:47,272
Shift-enter.
226

226

00:09:48,493  -->  00:09:50,243
And then we can call next on it.
227

227

00:09:50,243  -->  00:09:53,743
And you'll notice we don't get an error.
228

228

00:09:53,743  -->  00:09:56,782
This will actually keep calling everything
229

229

00:09:56,782  -->  00:09:58,365
until we've yielded
230

230

00:09:59,943  -->  00:10:01,193
all the values.
231

231

00:10:03,931  -->  00:10:06,150
And then we have a stop iteration error.
232

232

00:10:06,150  -->  00:10:08,572
Alright, so now you know how to convert objects
233

233

00:10:08,572  -->  00:10:12,621
that are iterables into iterators themselves.
234

234

00:10:12,621  -->  00:10:14,711
Okay, I know that was a lot and some of it
235

235

00:10:14,711  -->  00:10:16,349
may have been a little complicated,
236

236

00:10:16,349  -->  00:10:18,081
but the main takeaway from this lecture
237

237

00:10:18,081  -->  00:10:20,831
is that using the yield keyword--
238

238

00:10:22,429  -->  00:10:23,970
A function that'll cause the function
239

239

00:10:23,970  -->  00:10:25,839
to become an actual generator.
240

240

00:10:25,839  -->  00:10:26,910
And this change can save you
241

241

00:10:26,910  -->  00:10:29,670
a lot of memory for large use cases.
242

242

00:10:29,670  -->  00:10:32,251
So for more information on generators I actually want you,
243

243

00:10:32,251  -->  00:10:34,451
and this is a bit of a homework assignment for you,
244

244

00:10:34,451  -->  00:10:36,172
go to the Jupyter notebook.
245

245

00:10:36,172  -->  00:10:38,392
Scroll all the way down.
246

246

00:10:38,392  -->  00:10:39,623
And click these two links.
247

247

00:10:39,623  -->  00:10:43,090
A stack overflow answer and another stack overflow answer.
248

248

00:10:43,090  -->  00:10:44,621
And they're basically explanations
249

249

00:10:44,621  -->  00:10:46,954
on understanding generators.
250

250

00:10:48,021  -->  00:10:49,732
So if we look at these two links
251

251

00:10:49,732  -->  00:10:52,374
I want you to go ahead and read here.
252

252

00:10:52,374  -->  00:10:55,674
Now note, this post assumes 3.x syntax
253

253

00:10:55,674  -->  00:10:58,245
but it's okay you should still be able to understand it.
254

254

00:10:58,245  -->  00:11:00,065
And it goes through some of the similar explanations
255

255

00:11:00,065  -->  00:11:02,702
of I did of next and the iter function.
256

256

00:11:02,702  -->  00:11:03,934
So I want you to go ahead
257

257

00:11:03,934  -->  00:11:06,233
and read this stack overflow answer.
258

258

00:11:06,233  -->  00:11:08,712
I know it's a lot but it's definitely worth it.
259

259

00:11:08,712  -->  00:11:12,045
And he also points out some 2.x changes.
260

260

00:11:14,801  -->  00:11:16,194
So that's your first assignment
261

261

00:11:16,194  -->  00:11:19,085
is read that stack overflow answer.
262

262

00:11:19,085  -->  00:11:20,615
And then I also want you to read this
263

263

00:11:20,615  -->  00:11:22,844
separate breakdown on the yield keyword.
264

264

00:11:22,844  -->  00:11:24,364
So there's another great breakdown
265

265

00:11:24,364  -->  00:11:26,507
of iterables versus generators here.
266

266

00:11:26,507  -->  00:11:28,264
And the yield statement.
267

267

00:11:28,264  -->  00:11:30,878
Okay, so your assignment is to,
268

268

00:11:30,878  -->  00:11:33,447
after you're done reading that Jupyter notebook,
269

269

00:11:33,447  -->  00:11:35,827
read these two stack overflow questions
270

270

00:11:35,827  -->  00:11:37,278
and that should complete your understanding
271

271

00:11:37,278  -->  00:11:39,780
of generators and the yield statement.
272

272

00:11:39,780  -->  00:11:41,040
Okay.
273

273

00:11:41,040  -->  00:11:43,797
So, thanks for listening on to this lecture everyone.
274

274

00:11:43,797  -->  00:11:46,229
And I will see you at the next section.
275

275

00:11:46,229  -->  00:11:47,562
Thanks everyone.
