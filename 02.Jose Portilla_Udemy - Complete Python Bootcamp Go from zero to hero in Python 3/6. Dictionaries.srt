1
1

00:00:01,592  -->  00:00:02,713
<v Narrator>Hello everyone, and welcome to</v>
2

2

00:00:02,713  -->  00:00:04,965
the coding lecture for dictionaries.
3

3

00:00:04,965  -->  00:00:08,431
So with strings and lists, we've been learning about
4

4

00:00:08,431  -->  00:00:10,849
sequences in Python, but now we're going to switch gears
5

5

00:00:10,849  -->  00:00:13,109
to learn about mappings in Python.
6

6

00:00:13,109  -->  00:00:14,636
So if you're familiar with other languages,
7

7

00:00:14,636  -->  00:00:16,410
you can sort of think of dictionaries in Python
8

8

00:00:16,410  -->  00:00:18,148
as a hash table.
9

9

00:00:18,148  -->  00:00:20,416
So right now I have open the Jupyter Notebook,
10

10

00:00:20,416  -->  00:00:22,705
and we're going to be going over how to construct
11

11

00:00:22,705  -->  00:00:26,788
a dictionary, various ways to access objects from
12

12

00:00:28,054  -->  00:00:30,361
a dictionary, learn about nesting with dictionaries,
13

13

00:00:30,361  -->  00:00:32,669
just like we learned about nesting of lists,
14

14

00:00:32,669  -->  00:00:34,021
and then we'll learn about a few of the basic
15

15

00:00:34,021  -->  00:00:35,511
dictionary methods.
16

16

00:00:35,511  -->  00:00:39,678
Okay, so let's go ahead and get started with the code.
17

17

00:00:40,525  -->  00:00:42,977
So like I mentioned earlier,
18

18

00:00:42,977  -->  00:00:45,244
dictionaries in Python are mappings.
19

19

00:00:45,244  -->  00:00:47,386
And what mappings basically are is just a collection
20

20

00:00:47,386  -->  00:00:50,049
of objects that are sorted by a key.
21

21

00:00:50,049  -->  00:00:53,082
So unlike a sequence that stores objects by their
22

22

00:00:53,082  -->  00:00:56,620
relative position, so if you remember in a list,
23

23

00:00:56,620  -->  00:01:00,474
for example, I can make a list l, 1, 2, 3.
24

24

00:01:00,474  -->  00:01:03,235
So remember I could access things from that list
25

25

00:01:03,235  -->  00:01:04,657
by indexing.
26

26

00:01:04,657  -->  00:01:06,286
So that's how a sequence works.
27

27

00:01:06,286  -->  00:01:08,848
What a mappping's going to do is is it's going
28

28

00:01:08,848  -->  00:01:11,369
to store objects with a key.
29

29

00:01:11,369  -->  00:01:14,396
So it's an important distinction since mappings aren't
30

30

00:01:14,396  -->  00:01:18,468
going to retain order like lists and strings did.
31

31

00:01:18,468  -->  00:01:20,059
So let's go ahead and see how we can construct
32

32

00:01:20,059  -->  00:01:21,065
a dictionary.
33

33

00:01:21,065  -->  00:01:23,601
So in Python a dictionary consists of a key and then
34

34

00:01:23,601  -->  00:01:25,668
an associated value.
35

35

00:01:25,668  -->  00:01:28,248
And the value can be pretty much any Python object.
36

36

00:01:28,248  -->  00:01:30,906
So I'll make my first example dictionary by saying
37

37

00:01:30,906  -->  00:01:33,323
my_dict as the variable name.
38

38

00:01:34,277  -->  00:01:37,261
And we make dictionaries in Python with curly brackets,
39

39

00:01:37,261  -->  00:01:40,813
so if you just put shift above your square brackets,
40

40

00:01:40,813  -->  00:01:43,598
you should get these curly brackets on your keyboard.
41

41

00:01:43,598  -->  00:01:46,961
And then the way we can construct a dictionary is,
42

42

00:01:46,961  -->  00:01:49,518
the most basic example is you put in a key name,
43

43

00:01:49,518  -->  00:01:53,630
usually a string, pretty much always a string, and
44

44

00:01:53,630  -->  00:01:55,260
then the value you want.
45

45

00:01:55,260  -->  00:01:58,853
So in this case, I'm going to put in values, and there's
46

46

00:01:58,853  -->  00:02:01,575
a colon separating the key in the value.
47

47

00:02:01,575  -->  00:02:04,096
And then we have commas separating the various key
48

48

00:02:04,096  -->  00:02:07,013
and value combos in our dictionary.
49

49

00:02:08,196  -->  00:02:12,120
So then I'm going to put colon and put in value2.
50

50

00:02:12,120  -->  00:02:14,961
So this is probably the most basic version
51

51

00:02:14,961  -->  00:02:17,154
of a dictionary you can have in Python.
52

52

00:02:17,154  -->  00:02:19,169
So if you notice, what we've constructed is I have
53

53

00:02:19,169  -->  00:02:23,343
these curly brackets and then I have a key, colon,
54

54

00:02:23,343  -->  00:02:26,088
and then the value that's associated with that key.
55

55

00:02:26,088  -->  00:02:28,642
And then comma for every key value combo throughout
56

56

00:02:28,642  -->  00:02:29,975
that dictionary.
57

57

00:02:30,926  -->  00:02:34,926
So if you remember, we could use square brackets
58

58

00:02:35,939  -->  00:02:39,772
to access index elements in lists and strings.
59

59

00:02:40,628  -->  00:02:42,922
In this case, we're going to use the keys for a
60

60

00:02:42,922  -->  00:02:45,770
dictionary with the same bracket notation.
61

61

00:02:45,770  -->  00:02:47,991
So I have this bracket notation, but if you notice
62

62

00:02:47,991  -->  00:02:50,753
if I put zero, it's not going to work.
63

63

00:02:50,753  -->  00:02:52,519
It's going to say KeyError.
64

64

00:02:52,519  -->  00:02:55,562
And that's because it's not a sequence; it's a mapping.
65

65

00:02:55,562  -->  00:02:57,928
So what I end up putting is the key instead.
66

66

00:02:57,928  -->  00:03:01,302
So if I put in key1, it outputs the value
67

67

00:03:01,302  -->  00:03:03,788
that's associated with that key.
68

68

00:03:03,788  -->  00:03:07,148
So another important note is that dictionaries,
69

69

00:03:07,148  -->  00:03:09,293
just like lists, are super flexible in the type
70

70

00:03:09,293  -->  00:03:11,600
of data types they can hold.
71

71

00:03:11,600  -->  00:03:16,229
So for example, I can get my_dict, and I'm going
72

72

00:03:16,229  -->  00:03:18,778
to create a new dictionary now.
73

73

00:03:18,778  -->  00:03:22,943
I'll put k1 for key one, and I can put a number,
74

74

00:03:22,943  -->  00:03:24,824
such as like an integer.
75

75

00:03:24,824  -->  00:03:29,180
I can also mix data types, so I can say key two, colon,
76

76

00:03:29,180  -->  00:03:33,347
put in a floating point number there, and let's say k3.
77

77

00:03:34,616  -->  00:03:37,199
I can set that equal to string.
78

78

00:03:38,921  -->  00:03:41,132
Close off with another curly brackets.
79

79

00:03:41,132  -->  00:03:44,335
And so now I can say my_dict, and I can call any one
80

80

00:03:44,335  -->  00:03:48,502
of those keys, and it will return the value associated
81

81

00:03:49,594  -->  00:03:50,761
with that key.
82

82

00:03:51,709  -->  00:03:53,749
So let's try calling another item.
83

83

00:03:53,749  -->  00:03:57,653
Let's try getting that third key out there, which is string.
84

84

00:03:57,653  -->  00:03:58,899
Cool.
85

85

00:03:58,899  -->  00:04:03,652
So what's really interesting now is based on the value
86

86

00:04:03,652  -->  00:04:07,170
that gets outputted from that key, I can then call
87

87

00:04:07,170  -->  00:04:08,853
different methods on that value.
88

88

00:04:08,853  -->  00:04:13,020
So right now, if you notice my_dict with the k3 key
89

89

00:04:14,155  -->  00:04:18,260
is this string, which is also labelled string there.
90

90

00:04:18,260  -->  00:04:22,666
So I can actually perform different things that I would
91

91

00:04:22,666  -->  00:04:24,642
be able to do on a string such as index, which would
92

92

00:04:24,642  -->  00:04:28,986
output s there, or maybe I could reverse it like we
93

93

00:04:28,986  -->  00:04:33,153
did for strings, which is ::-1, and then I can even
94

94

00:04:34,345  -->  00:04:37,749
call different methods, so I can say maybe like
95

95

00:04:37,749  -->  00:04:41,208
upper method, if you remember, upper case.
96

96

00:04:41,208  -->  00:04:43,517
So what this is basically doing is it's returning
97

97

00:04:43,517  -->  00:04:46,575
that string, and I can do anything I want with that
98

98

00:04:46,575  -->  00:04:50,829
object that I'd be able to normally do with a string.
99

99

00:04:50,829  -->  00:04:51,690
Great.
100

100

00:04:51,690  -->  00:04:55,603
So we can also affect the values of the key as well.
101

101

00:04:55,603  -->  00:05:00,494
So for instance, right now if you notice my_dict, k1,
102

102

00:05:00,494  -->  00:05:02,894
remember that square brackets, that k1 key,
103

103

00:05:02,894  -->  00:05:04,227
is equal to 123.
104

104

00:05:05,069  -->  00:05:09,236
So if I say k1, let's say 123, minus let's say 120,
105

105

00:05:12,866  -->  00:05:14,424
that's going to be equal to three.
106

106

00:05:14,424  -->  00:05:15,257
So that makes sense.
107

107

00:05:15,257  -->  00:05:16,897
Right now I'm just calling that number and subtracting
108

108

00:05:16,897  -->  00:05:18,545
120 from it.
109

109

00:05:18,545  -->  00:05:23,519
But if copy and paste this, you'll notice it doesn't
110

110

00:05:23,519  -->  00:05:26,577
actually affect that value permanently.
111

111

00:05:26,577  -->  00:05:29,402
But what I can do to affect that value permanently
112

112

00:05:29,402  -->  00:05:31,124
is use an equal sign.
113

113

00:05:31,124  -->  00:05:35,207
So I can say my_dict of k1 is equal to my_dict k1
114

114

00:05:39,904  -->  00:05:40,737
minus 120.
115

115

00:05:42,980  -->  00:05:45,287
And now what that's done is it's actually changed
116

116

00:05:45,287  -->  00:05:48,787
the value that's associated with that key.
117

117

00:05:50,054  -->  00:05:51,809
And so now it equals three permanently.
118

118

00:05:51,809  -->  00:05:54,686
So now if I print out my dictionary just by calling it,
119

119

00:05:54,686  -->  00:05:56,642
you'll notice that I've permanently affected the
120

120

00:05:56,642  -->  00:06:00,475
value associated with that k1, that first key.
121

121

00:06:01,414  -->  00:06:02,247
Cool.
122

122

00:06:04,205  -->  00:06:07,198
Alright, so now what I want to mention is that
123

123

00:06:07,198  -->  00:06:10,554
you'll notice while you're doing your various coding
124

124

00:06:10,554  -->  00:06:14,238
exercises throughout the course, you may be trying
125

125

00:06:14,238  -->  00:06:18,739
to do this type of operation a lot, this take a value,
126

126

00:06:18,739  -->  00:06:22,415
set it equal to either addition or subtraction
127

127

00:06:22,415  -->  00:06:23,906
from the value itself.
128

128

00:06:23,906  -->  00:06:26,555
So some sort of self-subtraction or self-addition
129

129

00:06:26,555  -->  00:06:29,242
or even like a multiplication or division.
130

130

00:06:29,242  -->  00:06:31,807
So what's really nice about Python is it actually
131

131

00:06:31,807  -->  00:06:34,646
has a quick syntax for you to do self-subtraction
132

132

00:06:34,646  -->  00:06:37,669
or self-addition or multiplication and division.
133

133

00:06:37,669  -->  00:06:41,224
And what that looks like is you basically put the
134

134

00:06:41,224  -->  00:06:43,961
operation before the equal sign.
135

135

00:06:43,961  -->  00:06:45,539
And I'll show you a quick example of what I mean.
136

136

00:06:45,539  -->  00:06:48,931
So remember right now we have my_dict,
137

137

00:06:48,931  -->  00:06:51,883
the k1 key is equal to three.
138

138

00:06:51,883  -->  00:06:54,716
So if I say my_dict, k1, plus 100,
139

139

00:07:08,053  -->  00:07:10,886
now it's going to be equal to 103.
140

140

00:07:14,505  -->  00:07:19,307
So I can use a quick syntax to basically fast forward
141

141

00:07:19,307  -->  00:07:22,591
through this notation, and the way that works is
142

142

00:07:22,591  -->  00:07:26,508
I end up taking this plus sign here, putting it
143

143

00:07:27,365  -->  00:07:31,198
behind the equal sign and then get rid of this
144

144

00:07:32,742  -->  00:07:35,209
notation there that's self-referencing it.
145

145

00:07:35,209  -->  00:07:38,272
So this is the exact same thing, that plus minus,
146

146

00:07:38,272  -->  00:07:42,293
performs the exact operation that we just did before.
147

147

00:07:42,293  -->  00:07:44,407
And you'll notice since I ran both of these cells,
148

148

00:07:44,407  -->  00:07:46,551
now it's at 203.
149

149

00:07:46,551  -->  00:07:49,857
So you can go ahead and check out the Jupyter Notebook
150

150

00:07:49,857  -->  00:07:52,315
for some other examples.
151

151

00:07:52,315  -->  00:07:55,928
So for instance, if I wanted to do a self-subtraction,
152

152

00:07:55,928  -->  00:07:58,445
I just do minus equals and then the number
153

153

00:07:58,445  -->  00:08:01,052
I want to subtract itself from.
154

154

00:08:01,052  -->  00:08:03,265
You can also do multiplication equals and
155

155

00:08:03,265  -->  00:08:06,015
then division equals as well.
156

156

00:08:06,015  -->  00:08:06,848
Great.
157

157

00:08:08,564  -->  00:08:11,723
So that's just a nice syntax so you don't waste a
158

158

00:08:11,723  -->  00:08:15,318
lot of time rewriting the same object over and over again.
159

159

00:08:15,318  -->  00:08:18,328
So I can just say minus equal and then 120 here
160

160

00:08:18,328  -->  00:08:19,966
in this case.
161

161

00:08:19,966  -->  00:08:22,876
Alright, so moving along, we can also create keys
162

162

00:08:22,876  -->  00:08:24,181
by assignment.
163

163

00:08:24,181  -->  00:08:25,914
So for instance, if we started off with an empty
164

164

00:08:25,914  -->  00:08:28,528
dictionary, we could continually add to it.
165

165

00:08:28,528  -->  00:08:29,833
So I'll show you what I mean by that.
166

166

00:08:29,833  -->  00:08:32,583
I'm going to make a label or a variable called d
167

167

00:08:32,583  -->  00:08:34,429
and I'm going to create an empty dictionary.
168

168

00:08:34,429  -->  00:08:37,019
And I can create an empty dictionary just by putting
169

169

00:08:37,019  -->  00:08:39,655
curly brackets with nothing inside them.
170

170

00:08:39,655  -->  00:08:42,588
So d is now just an empty dictionary.
171

171

00:08:42,588  -->  00:08:45,841
So the way I can create a new key is through assignment.
172

172

00:08:45,841  -->  00:08:49,845
And the way I do that is I can say d, and we'll have
173

173

00:08:49,845  -->  00:08:53,124
the key be called animal in this case, and I'll
174

174

00:08:53,124  -->  00:08:55,819
set it equal to a value.
175

175

00:08:55,819  -->  00:09:00,180
In this case, I'll have it be equal to Dog.
176

176

00:09:00,180  -->  00:09:02,036
And we can do this for any type of objects.
177

177

00:09:02,036  -->  00:09:06,203
I could say again d, answer for a key, and I can set
178

178

00:09:08,624  -->  00:09:11,384
this equal to 42, for instance.
179

179

00:09:11,384  -->  00:09:13,658
And now if I check out what my dictionary looks like,
180

180

00:09:13,658  -->  00:09:16,774
I've actually added in those keys and the values
181

181

00:09:16,774  -->  00:09:19,117
associated with them.
182

182

00:09:19,117  -->  00:09:22,509
So this is how you can add new keys and new values
183

183

00:09:22,509  -->  00:09:26,073
to your dictionary through this sort of assignment.
184

184

00:09:26,073  -->  00:09:30,294
Okay, so now we'll look into nesting with dictionaries.
185

185

00:09:30,294  -->  00:09:32,447
So hopefully you've seen right now that Python is
186

186

00:09:32,447  -->  00:09:35,120
super flexible with nesting objects and calling
187

187

00:09:35,120  -->  00:09:36,281
methods on them.
188

188

00:09:36,281  -->  00:09:38,571
So now we're going to look at a quick example
189

189

00:09:38,571  -->  00:09:41,425
of a dictionary nested inside a dictionary.
190

190

00:09:41,425  -->  00:09:44,272
So you remember we were able to nest lists.
191

191

00:09:44,272  -->  00:09:46,128
So we can actually do the same thing with dictionaries.
192

192

00:09:46,128  -->  00:09:50,295
So I could say d is equal to, and we'll make say k1
193

193

00:09:51,913  -->  00:09:56,080
be one of the keys, colon, and in this case, that k1 key
194

194

00:09:58,467  -->  00:10:01,796
is going to refer to another dictionary.
195

195

00:10:01,796  -->  00:10:03,995
So let me close off that first dictionary,
196

196

00:10:03,995  -->  00:10:05,524
and now I'm going to have another dictionary.
197

197

00:10:05,524  -->  00:10:10,356
I'm going to call this key nestkey, and to show you
198

198

00:10:10,356  -->  00:10:12,507
how deep we could go, we could even create another
199

199

00:10:12,507  -->  00:10:15,737
dictionary inside that one and then say like
200

200

00:10:15,737  -->  00:10:20,725
subnestkey, colon, and then let's just put a string
201

201

00:10:20,725  -->  00:10:22,558
in called value there.
202

202

00:10:23,529  -->  00:10:26,354
And you notice this is almost like quite an inception
203

203

00:10:26,354  -->  00:10:30,638
of dictionaries, so how can we grab that value,
204

204

00:10:30,638  -->  00:10:32,273
this string right here?
205

205

00:10:32,273  -->  00:10:34,266
How do we go about doing that?
206

206

00:10:34,266  -->  00:10:38,173
So first off, I have my dictionary, and my dictionary
207

207

00:10:38,173  -->  00:10:41,835
actually only consists of one key, k1, this most
208

208

00:10:41,835  -->  00:10:44,334
outer dictionary, and the rest of it is just
209

209

00:10:44,334  -->  00:10:45,956
dictionaries nested inside.
210

210

00:10:45,956  -->  00:10:49,794
So if I say d, k1, what does that return?
211

211

00:10:49,794  -->  00:10:53,380
That returns those two nested dictionaries.
212

212

00:10:53,380  -->  00:10:57,130
So I can go again and say nestkey off of that
213

213

00:10:59,416  -->  00:11:03,505
return dictionary, and now I have that subnestkey
214

214

00:11:03,505  -->  00:11:04,338
in that value.
215

215

00:11:04,338  -->  00:11:08,088
And then one more time, I can say subnestkey,
216

216

00:11:09,137  -->  00:11:10,833
and finally I get out that value.
217

217

00:11:10,833  -->  00:11:12,682
And then again I can call different methods on it.
218

218

00:11:12,682  -->  00:11:16,177
So I could say upper, and then it returns
219

219

00:11:16,177  -->  00:11:17,988
a capitalised version of value.
220

220

00:11:17,988  -->  00:11:20,446
So hopefully you can see just how powerful nesting
221

221

00:11:20,446  -->  00:11:24,321
with dictionaries could be within your code.
222

222

00:11:24,321  -->  00:11:27,112
So you're probably never going to go this deep
223

223

00:11:27,112  -->  00:11:29,670
for basic codes, but it is really useful to go
224

224

00:11:29,670  -->  00:11:32,335
at least one nest deep as you get better
225

225

00:11:32,335  -->  00:11:33,663
at programming.
226

226

00:11:33,663  -->  00:11:36,272
Okay, so what we're going to do now is go over
227

227

00:11:36,272  -->  00:11:40,306
a few of the dictionary methods that are built in.
228

228

00:11:40,306  -->  00:11:44,509
So let's go ahead and create a new dictionary.
229

229

00:11:44,509  -->  00:11:48,152
I'm actually going to call an empty dictionary
230

230

00:11:48,152  -->  00:11:50,411
to go over how we can construct it again.
231

231

00:11:50,411  -->  00:11:52,911
So let's say k1 is equal to 1.
232

232

00:11:56,500  -->  00:11:59,917
I'll say d of key 2, so k2 is equal to 2.
233

233

00:12:01,382  -->  00:12:04,593
And then I'll make one more key, and I'll have its
234

234

00:12:04,593  -->  00:12:06,516
associated value be 3.
235

235

00:12:06,516  -->  00:12:08,514
And now if I check out what my d, that dictionary,
236

236

00:12:08,514  -->  00:12:13,230
is equal to, it's equal to k1 of 1, k2 2, k3 3.
237

237

00:12:13,230  -->  00:12:14,349
Great.
238

238

00:12:14,349  -->  00:12:17,817
So now I have my full mapping where I have three keys,
239

239

00:12:17,817  -->  00:12:20,630
k1, k2, k3, and then three values associated
240

240

00:12:20,630  -->  00:12:25,483
with each of those keys, 1, 2, and 3 respectively.
241

241

00:12:25,483  -->  00:12:27,219
So there's different methods.
242

242

00:12:27,219  -->  00:12:30,413
If I put d, and since I'm using Jupyter Notebook,
243

243

00:12:30,413  -->  00:12:33,656
I can actually click tab, and these are a bunch
244

244

00:12:33,656  -->  00:12:35,766
of the different methods that are available to us
245

245

00:12:35,766  -->  00:12:36,635
for dictionaries.
246

246

00:12:36,635  -->  00:12:38,074
You can go ahead and check out the advanced dictionaries
247

247

00:12:38,074  -->  00:12:40,813
lecture if you want to learn about all of them.
248

248

00:12:40,813  -->  00:12:41,661
But in this case we're going to look
249

249

00:12:41,661  -->  00:12:42,976
at some of the basic ones.
250

250

00:12:42,976  -->  00:12:47,312
So for instance, d.keys, closed parentheses since I'm
251

251

00:12:47,312  -->  00:12:49,947
not adding in any arguments there, will actually return
252

252

00:12:49,947  -->  00:12:51,864
a list of all the keys.
253

253

00:12:53,207  -->  00:12:56,927
And there's a similar method for the values
254

254

00:12:56,927  -->  00:12:58,323
in the dictionary.
255

255

00:12:58,323  -->  00:13:01,466
d.values will return all the values.
256

256

00:13:01,466  -->  00:13:05,179
And you notice here they're out of order from what
257

257

00:13:05,179  -->  00:13:07,687
we originally printed out that dictionary.
258

258

00:13:07,687  -->  00:13:09,339
And that's important to note because remember
259

259

00:13:09,339  -->  00:13:12,644
dictionaries are never going to hold a specific order.
260

260

00:13:12,644  -->  00:13:15,941
Since they're mappings, the way they keep track of things
261

261

00:13:15,941  -->  00:13:18,716
is through the keys and the value combinations.
262

262

00:13:18,716  -->  00:13:22,400
So there's no such thing as indexing a mapping.
263

263

00:13:22,400  -->  00:13:24,937
So we could index lists and strings since those
264

264

00:13:24,937  -->  00:13:29,242
are sequences, but we can't index a dictionary.
265

265

00:13:29,242  -->  00:13:32,546
What we'd have to do is call things by its key.
266

266

00:13:32,546  -->  00:13:36,028
So it's not a direct index of like d zero, d one, etc.
267

267

00:13:36,028  -->  00:13:39,361
You're referencing things by their keys.
268

268

00:13:40,361  -->  00:13:43,834
Okay, so we have d.keys method to grab a list
269

269

00:13:43,834  -->  00:13:46,505
of all the keys, d.values to grab a list
270

270

00:13:46,505  -->  00:13:48,193
of all the values.
271

271

00:13:48,193  -->  00:13:51,188
And if you wanted a combination of those,
272

272

00:13:51,188  -->  00:13:56,010
we can say d.items, and that will return a list,
273

273

00:13:56,010  -->  00:14:00,728
something called tuples or sometimes called tupples,
274

274

00:14:00,728  -->  00:14:01,562
of all the items.
275

275

00:14:01,562  -->  00:14:04,580
So if you notice here we have a list and we have this
276

276

00:14:04,580  -->  00:14:08,747
notation of these parentheses that are all the pair combos.
277

277

00:14:09,812  -->  00:14:12,811
So we'll learn about tupples, or tuples,
278

278

00:14:12,811  -->  00:14:14,728
in an upcoming lecture.
279

279

00:14:15,781  -->  00:14:19,368
And that's about it as far as just this beginner's
280

280

00:14:19,368  -->  00:14:21,336
introduction to dictionaries.
281

281

00:14:21,336  -->  00:14:23,927
So let's just go over everything we covered
282

282

00:14:23,927  -->  00:14:25,655
in this lecture really quickly.
283

283

00:14:25,655  -->  00:14:28,465
Remember dictionaries are mappings in Python.
284

284

00:14:28,465  -->  00:14:30,990
They are different than sequences because they don't
285

285

00:14:30,990  -->  00:14:35,075
retain any order, so we refer to the values or the
286

286

00:14:35,075  -->  00:14:38,089
objects within that dictionary through their keys.
287

287

00:14:38,089  -->  00:14:40,766
In order to construct a dictionary, we use this
288

288

00:14:40,766  -->  00:14:44,933
curly bracket notation with the key name, a colon,
289

289

00:14:45,773  -->  00:14:47,927
and then the value name.
290

290

00:14:47,927  -->  00:14:50,230
And then we can call values by their keys using
291

291

00:14:50,230  -->  00:14:52,063
that bracket notation.
292

292

00:14:54,285  -->  00:14:57,277
Continuing along, dictionaries are super flexible
293

293

00:14:57,277  -->  00:14:59,207
in the data types they can hold.
294

294

00:14:59,207  -->  00:15:03,013
For instance, here I have a list inside of a dictionary,
295

295

00:15:03,013  -->  00:15:06,236
numbers, we can have dictionaries inside of dictionaries,
296

296

00:15:06,236  -->  00:15:09,208
and then you can call items from that dictionary,
297

297

00:15:09,208  -->  00:15:13,731
and then index our methods on those values as well.
298

298

00:15:13,731  -->  00:15:16,897
So we also learned about this quick notation
299

299

00:15:16,897  -->  00:15:19,203
of self-subtraction or addition.
300

300

00:15:19,203  -->  00:15:21,441
Remember we could do that minus equals instead
301

301

00:15:21,441  -->  00:15:25,700
of doing something like this, which was that object
302

302

00:15:25,700  -->  00:15:27,783
self-reference minus, so that should save you
303

303

00:15:27,783  -->  00:15:30,200
some time with you're coding.
304

304

00:15:31,279  -->  00:15:34,385
And then to create a new dictionary, you can create
305

305

00:15:34,385  -->  00:15:38,362
new keys through assignment just like we did here
306

306

00:15:38,362  -->  00:15:40,725
with that equal sign sort of assignments,
307

307

00:15:40,725  -->  00:15:42,785
and then here's the result.
308

308

00:15:42,785  -->  00:15:44,050
You can nest dictionaries.
309

309

00:15:44,050  -->  00:15:44,964
We went over that.
310

310

00:15:44,964  -->  00:15:47,749
And keep calling the keys to go further and further
311

311

00:15:47,749  -->  00:15:49,341
in those nests.
312

312

00:15:49,341  -->  00:15:51,636
And then we went over a few dictionary methods,
313

313

00:15:51,636  -->  00:15:53,892
the keys, the values, and then items.
314

314

00:15:53,892  -->  00:15:57,606
So hopefully by now you have a good basic understanding
315

315

00:15:57,606  -->  00:15:59,295
of how to construct dictionaries.
316

316

00:15:59,295  -->  00:16:01,369
There's a lot more to go into here, but we'll be
317

317

00:16:01,369  -->  00:16:03,452
constantly revisiting dictionaries throughout
318

318

00:16:03,452  -->  00:16:04,876
the lectures.
319

319

00:16:04,876  -->  00:16:06,532
Alright, great.
320

320

00:16:06,532  -->  00:16:10,699
So let's go ahead and move on to the next lecture.
