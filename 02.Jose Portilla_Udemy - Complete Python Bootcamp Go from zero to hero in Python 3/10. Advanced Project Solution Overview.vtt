WEBVTT
1
1

00:00:01.561  -->  00:00:03.589
<v Instructor>Hello, everyone, and in this lecture,</v>
2

2

00:00:03.589  -->  00:00:05.320
I'm just gonna go over my own solution
3

3

00:00:05.320  -->  00:00:07.278
for the Tic Tac Toe project.
4

4

00:00:07.278  -->  00:00:09.167
Your solution might look totally different,
5

5

00:00:09.167  -->  00:00:10.966
and that's okay, as long as it works,
6

6

00:00:10.966  -->  00:00:12.837
but in case you're stuck on anything
7

7

00:00:12.837  -->  00:00:16.626
or just want to see how I would tackle this Tic Tac Toe
8

8

00:00:16.626  -->  00:00:18.585
within Jupyter Notebook, I'll go ahead
9

9

00:00:18.585  -->  00:00:20.378
and walk through my own solution.
10

10

00:00:20.378  -->  00:00:22.878
So, first off, what I did was,
11

11

00:00:23.953  -->  00:00:27.071
since I'm using the iPython or Jupyter Notebook,
12

12

00:00:27.071  -->  00:00:30.299
I imported this statement from IPython.display import
13

13

00:00:30.299  -->  00:00:31.472
clear_output.
14

14

00:00:31.472  -->  00:00:35.671
So that allowed me to clear the printed output
15

15

00:00:35.671  -->  00:00:39.109
to update that print statement, which printed the board.
16

16

00:00:39.109  -->  00:00:41.296
Then, I created some global variables.
17

17

00:00:41.296  -->  00:00:45.213
I made an empty list that was 10 elements long.
18

18

00:00:47.259  -->  00:00:50.780
And then I set a variable called game_state equal to True.
19

19

00:00:50.780  -->  00:00:54.691
And then announce equal to a blank string.
20

20

00:00:54.691  -->  00:00:57.971
And we'll get into those later on.
21

21

00:00:57.971  -->  00:01:00.703
Next, I made a function that resets the board.
22

22

00:01:00.703  -->  00:01:04.083
In case, in this case, I'm gonna store the values as a list.
23

23

00:01:04.083  -->  00:01:07.905
So, note the game's gonna ignore the zero index.
24

24

00:01:07.905  -->  00:01:11.375
So the way my tic tac toe game worked,
25

25

00:01:11.375  -->  00:01:14.004
is if you remember, if you ever have a keyboard
26

26

00:01:14.004  -->  00:01:16.520
with a num pad, that's the one, two, three, four, five, six,
27

27

00:01:16.520  -->  00:01:18.990
seven, eight, nine as a little square
28

28

00:01:18.990  -->  00:01:20.568
on the right side of the keyboard.
29

29

00:01:20.568  -->  00:01:22.541
So I'm using those numbers to correlate
30

30

00:01:22.541  -->  00:01:24.482
with my tic tac toe board.
31

31

00:01:24.482  -->  00:01:27.898
So, for instance, if you click the seven on the num pad,
32

32

00:01:27.898  -->  00:01:29.590
that's gonna be the top left square
33

33

00:01:29.590  -->  00:01:31.907
of that tic tac toe board.
34

34

00:01:31.907  -->  00:01:34.524
So I have my function here that resets the board,
35

35

00:01:34.524  -->  00:01:36.481
and it takes in...
36

36

00:01:36.481  -->  00:01:38.158
In this case, since I'm using Jupyter Notebook,
37

37

00:01:38.158  -->  00:01:42.325
I set board and game_state to be global variables.
38

38

00:01:43.611  -->  00:01:44.611
And board...
39

39

00:01:45.703  -->  00:01:46.965
Oh, sorry, yeah.
40

40

00:01:46.965  -->  00:01:50.869
And board's gonna be reset to an empty board that lists,
41

41

00:01:50.869  -->  00:01:53.002
and game_state's gonna be True.
42

42

00:01:53.002  -->  00:01:53.970
Okay.
43

43

00:01:53.970  -->  00:01:57.123
So next, I created a function to display the board.
44

44

00:01:57.123  -->  00:01:58.687
And like I mentioned, I'll use the num pad
45

45

00:01:58.687  -->  00:02:00.319
as the board reference.
46

46

00:02:00.319  -->  00:02:04.490
So could just make the board and player classes later,
47

47

00:02:04.490  -->  00:02:05.323
but since we haven't learned
48

48

00:02:05.323  -->  00:02:07.417
about object-oriented programming,
49

49

00:02:07.417  -->  00:02:10.231
we're just using functions right now.
50

50

00:02:10.231  -->  00:02:12.776
So, here I have my function display board
51

51

00:02:12.776  -->  00:02:14.731
and the doc string that goes along with it.
52

52

00:02:14.731  -->  00:02:17.185
Let me zoom out so it's a little more readable.
53

53

00:02:17.185  -->  00:02:18.525
So this function prints out the board,
54

54

00:02:18.525  -->  00:02:20.664
so the num pad can be used as reference.
55

55

00:02:20.664  -->  00:02:23.918
So what it does is it prints out the board,
56

56

00:02:23.918  -->  00:02:27.469
which is that empty list, and notice the numbers
57

57

00:02:27.469  -->  00:02:29.219
align with a num pad.
58

58

00:02:30.463  -->  00:02:34.473
And then it also has this clear output function.
59

59

00:02:34.473  -->  00:02:36.931
So define a function to check for a win
60

60

00:02:36.931  -->  00:02:39.139
by comparing inputs in the board list.
61

61

00:02:39.139  -->  00:02:41.977
And maybe I should have just have a list of winning combos,
62

62

00:02:41.977  -->  00:02:43.403
combinations, and cycle through them?
63

63

00:02:43.403  -->  00:02:45.348
That's an option there as well.
64

64

00:02:45.348  -->  00:02:49.154
So, my current function is kinda this big chunk
65

65

00:02:49.154  -->  00:02:51.070
of bullion checks.
66

66

00:02:51.070  -->  00:02:52.975
So I have a win_check here.
67

67

00:02:52.975  -->  00:02:55.998
And it checks if all the diagonal combinations
68

68

00:02:55.998  -->  00:02:58.127
is equal to player.
69

69

00:02:58.127  -->  00:03:00.142
And what player is, it's an argument that's either
70

70

00:03:00.142  -->  00:03:01.559
an O or X string.
71

71

00:03:03.683  -->  00:03:06.577
So that way I can check for a win
72

72

00:03:06.577  -->  00:03:09.403
by getting a input board, which is that list,
73

73

00:03:09.403  -->  00:03:11.378
and then checking if any of the diagonals
74

74

00:03:11.378  -->  00:03:12.757
are all equal to each other.
75

75

00:03:12.757  -->  00:03:15.347
And I have this or statement to check for any diagonals.
76

76

00:03:15.347  -->  00:03:18.430
And that dash just breaks the line there.
77

77

00:03:18.430  -->  00:03:20.842
So this all isn't on one huge line.
78

78

00:03:20.842  -->  00:03:22.285
Then I return True if there's a win.
79

79

00:03:22.285  -->  00:03:24.867
Otherwise, I return False.
80

80

00:03:24.867  -->  00:03:26.538
Then I define the function to check if the board
81

81

00:03:26.538  -->  00:03:28.798
is already full in case of a tie.
82

82

00:03:28.798  -->  00:03:29.975
And this is pretty straightforward
83

83

00:03:29.975  -->  00:03:31.845
since our board is stored as a list.
84

84

00:03:31.845  -->  00:03:34.379
And just remember that index zero is always empty.
85

85

00:03:34.379  -->  00:03:37.962
So, I said if there's a blank in the board,
86

86

00:03:39.753  -->  00:03:41.632
remember that the board starts out empty,
87

87

00:03:41.632  -->  00:03:44.215
from anywhere from one to nine,
88

88

00:03:45.738  -->  00:03:47.042
then I return False.
89

89

00:03:47.042  -->  00:03:49.401
Otherwise, there's still remaining blanks,
90

90

00:03:49.401  -->  00:03:52.476
and the board's not full yet.
91

91

00:03:52.476  -->  00:03:53.436
Okay.
92

92

00:03:53.436  -->  00:03:56.748
After that, I created a function to get player input
93

93

00:03:56.748  -->  00:03:58.771
and do various checks on it.
94

94

00:03:58.771  -->  00:04:02.072
So I said ask_player and then mark.
95

95

00:04:02.072  -->  00:04:05.377
So, it asks a player where to place their X or O mark,
96

96

00:04:05.377  -->  00:04:07.929
and then it checks the validity of it.
97

97

00:04:07.929  -->  00:04:10.444
So it inputs that global board.
98

98

00:04:10.444  -->  00:04:12.944
And then it says this request.
99

99

00:04:14.106  -->  00:04:15.746
"Choose where to place your mark."
100

100

00:04:15.746  -->  00:04:16.588
Plus mark.
101

101

00:04:16.588  -->  00:04:18.254
Based on which player it is.
102

102

00:04:18.254  -->  00:04:21.132
And while True, I had this try statement.
103

103

00:04:21.132  -->  00:04:24.838
I say try, the choice, this raw_input.
104

104

00:04:24.838  -->  00:04:27.619
And it says if the player doesn't input a number,
105

105

00:04:27.619  -->  00:04:29.564
let's say they input a string,
106

106

00:04:29.564  -->  00:04:32.174
it'd print this ValueError and then say continue.
107

107

00:04:32.174  -->  00:04:34.873
So it's gonna keep asking this person
108

108

00:04:34.873  -->  00:04:37.790
for correct input from one to nine.
109

109

00:04:40.054  -->  00:04:42.688
And then I have this if board.
110

110

00:04:42.688  -->  00:04:44.771
Choice is equal to blank.
111

111

00:04:45.864  -->  00:04:49.101
Then set it equal to the mark, and then break.
112

112

00:04:49.101  -->  00:04:52.252
Otherwise, if there's something already in that board space,
113

113

00:04:52.252  -->  00:04:54.606
I print, "That space isn't empty!"
114

114

00:04:54.606  -->  00:04:58.275
Continue, and it goes back here asking for another input.
115

115

00:04:58.275  -->  00:05:00.369
So now, we want to have a function
116

116

00:05:00.369  -->  00:05:02.344
that takes in the player's choice
117

117

00:05:02.344  -->  00:05:06.194
via the ask_player function, and returns the game_state.
118

118

00:05:06.194  -->  00:05:08.012
So I have this function called player_choice,
119

119

00:05:08.012  -->  00:05:09.540
which takes in a mark.
120

120

00:05:09.540  -->  00:05:12.399
We input that global board, the global game_state,
121

121

00:05:12.399  -->  00:05:14.071
and then that announce statement.
122

122

00:05:14.071  -->  00:05:16.521
And I set the game blank.
123

123

00:05:16.521  -->  00:05:17.721
I set the game...
124

124

00:05:17.721  -->  00:05:19.958
Excuse me, I set the blank game_state announcement,
125

125

00:05:19.958  -->  00:05:22.639
so I have announce, just an empty string.
126

126

00:05:22.639  -->  00:05:26.127
I get the player input with mark.
127

127

00:05:26.127  -->  00:05:29.163
Make sure it's a string by casting it to a string.
128

128

00:05:29.163  -->  00:05:32.413
I validate the player input, so I ask the player.
129

129

00:05:32.413  -->  00:05:35.277
Remember, mark is just the X or O string.
130

130

00:05:35.277  -->  00:05:38.978
And then I check for a player win with win_check function.
131

131

00:05:38.978  -->  00:05:42.606
And then that win_check, what it's gonna do is,
132

132

00:05:42.606  -->  00:05:45.938
afterwards, if it's a win, it clears the output,
133

133

00:05:45.938  -->  00:05:48.407
displays the board, and announces that somebody won,
134

134

00:05:48.407  -->  00:05:52.574
either X or O, and then sets the game_state equal to False.
135

135

00:05:53.430  -->  00:05:55.512
Then I show the board, I clear the output,
136

136

00:05:55.512  -->  00:05:57.061
display the board again.
137

137

00:05:57.061  -->  00:05:58.826
I check for a tie, just in case.
138

138

00:05:58.826  -->  00:05:59.916
If it's no one had won,
139

139

00:05:59.916  -->  00:06:03.254
I say if the full_board check, then I announce a tie
140

140

00:06:03.254  -->  00:06:06.111
and set the game_state returns to False.
141

141

00:06:06.111  -->  00:06:09.049
And then I return the game_state and the announcement.
142

142

00:06:09.049  -->  00:06:10.661
And you'll see why I do that
143

143

00:06:10.661  -->  00:06:13.872
when I put it all together in a function called play_game.
144

144

00:06:13.872  -->  00:06:15.967
So what does my play_game function do?
145

145

00:06:15.967  -->  00:06:17.590
It resets the board
146

146

00:06:17.590  -->  00:06:20.844
and takes in the global announce variable.
147

147

00:06:20.844  -->  00:06:22.509
Sets the mark, X and Os.
148

148

00:06:22.509  -->  00:06:25.979
And it says, while True, clear the output,
149

149

00:06:25.979  -->  00:06:26.812
display the board.
150

150

00:06:26.812  -->  00:06:27.754
So it's gonna show the board.
151

151

00:06:27.754  -->  00:06:29.595
Then I have the player X turn.
152

152

00:06:29.595  -->  00:06:33.082
Which is gonna output the game_state and the announce
153

153

00:06:33.082  -->  00:06:35.484
from that player choice function we just went over.
154

154

00:06:35.484  -->  00:06:36.866
It prints that announcement,
155

155

00:06:36.866  -->  00:06:39.383
and if the game_state is unequal to False,
156

156

00:06:39.383  -->  00:06:41.484
meaning there's a tie or somebody won,
157

157

00:06:41.484  -->  00:06:44.406
it goes ahead and breaks this while loop.
158

158

00:06:44.406  -->  00:06:46.451
And then same thing for player O.
159

159

00:06:46.451  -->  00:06:48.846
Asks, get the player choice.
160

160

00:06:48.846  -->  00:06:50.856
Get the game_state and the announcement.
161

161

00:06:50.856  -->  00:06:52.520
Print the announcement.
162

162

00:06:52.520  -->  00:06:54.329
If game_state is equal to False,
163

163

00:06:54.329  -->  00:06:56.002
that means somebody won or there's a tie.
164

164

00:06:56.002  -->  00:06:57.230
Go ahead and break.
165

165

00:06:57.230  -->  00:06:59.092
And then finally, after that,
166

166

00:06:59.092  -->  00:07:01.532
I ask the player for a rematch,
167

167

00:07:01.532  -->  00:07:02.681
which I take in the raw_input.
168

168

00:07:02.681  -->  00:07:03.673
Would like to play again?
169

169

00:07:03.673  -->  00:07:04.825
Yes or no.
170

170

00:07:04.825  -->  00:07:06.624
If it's a rematch, equals yes.
171

171

00:07:06.624  -->  00:07:08.600
We play_game again.
172

172

00:07:08.600  -->  00:07:10.651
Else, we just print, "Thanks for playing!"
173

173

00:07:10.651  -->  00:07:11.778
And that's it.
174

174

00:07:11.778  -->  00:07:12.713
And you can go ahead and check this out
175

175

00:07:12.713  -->  00:07:15.096
by downloading the notebook and then running this last cell,
176

176

00:07:15.096  -->  00:07:16.997
which is play_game.
177

177

00:07:16.997  -->  00:07:19.307
Okay, I know that was a lot.
178

178

00:07:19.307  -->  00:07:22.368
And really, the best way to go about doing this
179

179

00:07:22.368  -->  00:07:25.910
if you were very, very confused on the Tic Tac Toe project
180

180

00:07:25.910  -->  00:07:28.574
in general is just to go line by line
181

181

00:07:28.574  -->  00:07:31.702
and type this out yourself, and you'll realise
182

182

00:07:31.702  -->  00:07:33.493
you'll have a better understanding of how this
183

183

00:07:33.493  -->  00:07:35.076
all comes together.
184

184

00:07:35.952  -->  00:07:37.494
And I know it's a lot of embedded functions,
185

185

00:07:37.494  -->  00:07:39.149
which sometimes, it's confusing.
186

186

00:07:39.149  -->  00:07:42.178
But if you just go slowly and methodically through this,
187

187

00:07:42.178  -->  00:07:43.816
you should have no problem then.
188

188

00:07:43.816  -->  00:07:46.598
Understanding if you just manually type this out
189

189

00:07:46.598  -->  00:07:49.137
if you were having trouble with the Tic Tac Toe project
190

190

00:07:49.137  -->  00:07:50.212
to begin with.
191

191

00:07:50.212  -->  00:07:51.045
Okay.
192

192

00:07:51.045  -->  00:07:52.730
Now, that being said,
193

193

00:07:52.730  -->  00:07:54.918
I hope you didn't have too much trouble
194

194

00:07:54.918  -->  00:07:56.582
with the Tic Tac Toe project.
195

195

00:07:56.582  -->  00:07:57.763
It should have been challenging,
196

196

00:07:57.763  -->  00:08:00.155
and you should have had some moments of struggle.
197

197

00:08:00.155  -->  00:08:03.306
But hopefully you didn't think it was totally impossible.
198

198

00:08:03.306  -->  00:08:04.929
Okay, thanks so much,
199

199

00:08:04.929  -->  00:08:08.012
and I'll see you at the next lecture!
