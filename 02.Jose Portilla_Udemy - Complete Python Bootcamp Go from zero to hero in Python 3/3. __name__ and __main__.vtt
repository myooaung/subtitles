WEBVTT
1
00:00:05.520 --> 00:00:11.300
Untuk menyelesaikan bagian ini tentu saja saya ingin membahas dua ide nama ini dan kemudian string utama.

2
00:00:11.390 --> 00:00:17.950
Bagian yang sering membingungkan dari Python adalah ketika Anda mulai melihat skrip pie yang lebih besar yang telah Anda

3
00:00:17.950 --> 00:00:18.880
tulis sendiri.

4
00:00:19.030 --> 00:00:23.740
Anda sering melihat di bagian paling bawah dari garis kode misterius ini yang mengatakan jika garis

5
00:00:23.740 --> 00:00:30.040
bawah garis bawah garis bawah sama dengan string garis bawah garis bawah garis bawah utama dan garis bawah garis bawah dan

6
00:00:30.160 --> 00:00:32.380
kemudian ada blok kode yang akan dieksekusi.

7
00:00:33.510 --> 00:00:38.840
Jadi kadang-kadang seluruh ide di balik baris kode itu adalah bahwa kita mengimpor dari sebuah modul.

8
00:00:38.970 --> 00:00:44.370
Anda sebenarnya ingin tahu apakah fungsi modular digunakan sebagai impor atau jika Anda menggunakan file

9
00:00:44.370 --> 00:00:46.780
asli tetapi py dari modul itu.

10
00:00:47.960 --> 00:00:50.700
Jadi yang akan kita lakukan adalah mengeksplorasi semua ini sedikit lebih banyak.

11
00:00:50.900 --> 00:00:55.250
Tetapi pastikan untuk memeriksa file teks penjelasan lengkap yang memiliki penjelasan tertulis tentang semua yang akan

12
00:00:55.250 --> 00:00:56.610
kita bahas di sini.

13
00:00:56.620 --> 00:01:01.280
Yah yang akan kita lakukan pada dasarnya adalah hanya membuat dua postscript sederhana dan mencoba untuk menunjukkan kepada Anda ide

14
00:01:01.310 --> 00:01:02.210
di balik itu.

15
00:01:02.300 --> 00:01:08.390
Jika nama sama dengan blok kode utama yang biasanya di akhir file skrip pie lebih besar.

16
00:01:08.390 --> 00:01:15.450
Mari kita mulai OK mari kita mulai dengan benar-benar membuat dua file baru akan membuatnya di desktop saya.

17
00:01:15.450 --> 00:01:20.990
Saya akan menyimpan untuk menyimpan file pertama ini sebagai dan saya akan mengatakan ini sebagai satu titik pi.

18
00:01:21.210 --> 00:01:24.240
Jadi ini adalah pi.

19
00:01:24.300 --> 00:01:32.630
Kemudian saya akan membuat file baru dan saya akan menyimpan yang ini untuk pi itu untuk PI itu lagi di atas meja

20
00:01:32.700 --> 00:01:35.430
saya putar yang ini ke pi itu.

21
00:01:35.450 --> 00:01:38.420
Jadi pastikan Anda menyimpannya.

22
00:01:38.420 --> 00:01:43.450
Jadi mari kita pikirkan apa yang sebenarnya terjadi ketika Anda memanggil skrip Python di baris perintah Anda.

23
00:01:43.520 --> 00:01:47.860
Anda pergi ke baris perintah Anda dan Anda mengetik ruang python nama skrip PI Anda.

24
00:01:47.930 --> 00:01:54.920
Jadi apa yang sebenarnya terjadi ketika Anda memanggil Python script saya PI semua kode itu tingkat

25
00:01:54.920 --> 00:01:55.910
lekukan 0.

26
00:01:56.090 --> 00:01:59.810
Pada dasarnya sesuatu seperti ini akan dijalankan.

27
00:01:59.810 --> 00:02:03.840
Jadi itu berarti setiap kode yang mengambil level 0 akan dijalankan.

28
00:02:03.890 --> 00:02:09.290
Dan itu berarti bahwa fungsi Anda yang secara otomatis biasanya akan didefinisikan di level stasiun

29
00:02:09.290 --> 00:02:10.970
0 di kelas Anda.

30
00:02:11.050 --> 00:02:14.640
Level lekukan 0 juga akan ditentukan.

31
00:02:14.690 --> 00:02:20.990
Jadi tidak seperti bahasa lain di Python tidak ada fungsi utama yang Anda panggil di suatu tempat di bagian

32
00:02:20.990 --> 00:02:23.430
atas skrip Anda yang dijalankan secara otomatis.

33
00:02:23.480 --> 00:02:29.240
Alih-alih, yang terjadi hanyalah secara implisit semua kode pada level indentasi nol dijalankan ketika Anda memanggil file skrip

34
00:02:29.240 --> 00:02:33.920
dan Anda mungkin sudah memiliki intuisi mengenai hal itu sekarang karena kami telah mengerjakan

35
00:02:33.980 --> 00:02:34.860
strategi itu.

36
00:02:34.970 --> 00:02:43.550
Paruh pertama seluruh Kursus sekarang di Python sebenarnya ada dibangun di variabel yang disebut nama.

37
00:02:43.670 --> 00:02:48.470
Jadi seperti ada fungsi bawaan, ini adalah variabel bawaan dan cukup jelas dibangun karena

38
00:02:48.470 --> 00:02:52.970
kami memiliki dua set garis bawah ganda di awal dan di belakangnya.

39
00:02:52.970 --> 00:02:57.550
Jadi itu akan memungkinkan Anda untuk benar-benar mencoba menimpanya secara tidak sengaja.

40
00:02:57.560 --> 00:03:04.640
Jadi yang terjadi adalah nama variabel ini diberikan string tergantung pada bagaimana Anda menjalankan skrip yang

41
00:03:04.640 --> 00:03:05.370
sebenarnya.

42
00:03:05.540 --> 00:03:08.110
Dan jika Anda menjalankan skrip secara langsung.

43
00:03:08.120 --> 00:03:14.750
Jadi jika saya pergi ke baris perintah dan saya menulis Python satu spasi yang pi apa Python akan

44
00:03:14.750 --> 00:03:20.060
lakukan akan menetapkan dibangun ini dalam variabel yang disebut nama untuk menjadi sama dengan

45
00:03:22.770 --> 00:03:24.260
garis bawah berarti.

46
00:03:24.270 --> 00:03:26.250
Jadi Python melakukan ini di latar belakang.

47
00:03:26.430 --> 00:03:28.220
Yah itu benar-benar melakukan ini.

48
00:03:28.230 --> 00:03:31.080
Ini memberikan string ke variabel nama.

49
00:03:31.080 --> 00:03:32.660
Ketika Anda menjalankannya secara langsung.

50
00:03:32.880 --> 00:03:37.560
Dan itu memungkinkan Anda untuk memiliki blok IF untuk memeriksa apakah mereka sama satu sama lain.

51
00:03:37.860 --> 00:03:39.480
Anda akan sering melakukan hal seperti ini.

52
00:03:39.480 --> 00:03:46.830
Anda mengatakan jika nama sama dengan Utama dan kemudian Anda dapat melakukan sesuatu karena Anda tahu bahwa file PI

53
00:03:46.970 --> 00:03:49.410
khusus ini sedang dijalankan dengan benar.

54
00:03:49.710 --> 00:03:53.880
Dan jika Anda pernah menjalankan sesuatu secara langsung dari Python, Anda tahu kasus ini benar.

55
00:03:54.180 --> 00:03:59.370
Jadi yang sering terjadi adalah orang-orang hanya di bagian paling bawah dari kode mereka, mereka akan mengatakan jika nama sama

56
00:03:59.550 --> 00:04:03.450
dengan Main dan kemudian mereka mengatakan jenis menjalankan banyak fungsi yang mereka temukan di sini.

57
00:04:03.690 --> 00:04:09.930
Jadi di atas mereka melakukan banyak definisi fungsi sehingga fungsi satu fungsi dan dua seterusnya dan seterusnya.

58
00:04:09.930 --> 00:04:13.770
Jadi Anda bisa membayangkan ratusan baris definisi fungsi atau kelas dan kemudian semua jalan di bagian

59
00:04:13.770 --> 00:04:14.150
bawah.

60
00:04:14.160 --> 00:04:19.160
Mereka benar-benar terorganisir atau kode pada apa yang sebenarnya ingin mereka jalankan dan mereka tahu bahwa mereka

61
00:04:19.160 --> 00:04:24.210
ingin menjalankannya karena mereka mengatakan jika ini dibangun dalam variabel yang disebut nama kebetulan sama dengan string

62
00:04:24.300 --> 00:04:28.360
utama maka saya tahu saya sedang menjalankan file py ini secara langsung .

63
00:04:28.590 --> 00:04:33.630
Jadi kita akan mengeksplorasi seluruh ide ini sedikit lebih jauh dan untuk itu kita akan melakukan yang

64
00:04:34.050 --> 00:04:35.530
berikut dalam satu pai.

65
00:04:35.550 --> 00:04:37.370
Jadi mari kita kembali ke sini.

66
00:04:37.440 --> 00:04:38.590
Ini adalah salah satu yang pi.

67
00:04:38.730 --> 00:04:40.070
Saya akan menulis kode berikut.

68
00:04:40.110 --> 00:04:45.830
Saya akan mengatakan DPF membuat fungsi dan fungsi ini akan sangat sederhana.

69
00:04:45.840 --> 00:04:50.390
Itu akan mengatakan func dalam satu PI.

70
00:04:50.790 --> 00:04:56.760
Jadi ketika Anda memanggil fungsi itu dikatakan func dan pi yang baru saja mencetak itu dan kemudian saya

71
00:04:56.760 --> 00:05:00.490
juga akan lakukan di sini adalah pada tingkat lekukan 0.

72
00:05:00.480 --> 00:05:09.210
Jadi di luar fungsi ini saya akan mengatakan tingkat atas dalam 1 pi itu.

73
00:05:09.220 --> 00:05:14.570
Jadi sekarang saya memiliki definisi fungsi serta tingkat atas pernyataan cetak global dan satu yang pi.

74
00:05:14.780 --> 00:05:19.330
Kemudian di bagian bawah ini saya akan mengatakan jika Anda akan melihat teks luhur yang sebenarnya

75
00:05:19.330 --> 00:05:22.840
akan melengkapi ini secara otomatis untuk Anda jika nama sama dengan berarti.

76
00:05:22.990 --> 00:05:24.550
Saya akan menghapus ini.

77
00:05:24.550 --> 00:05:26.560
Jadi saya punya blok kode IF di sini.

78
00:05:27.540 --> 00:05:31.350
Jadi jika namanya sama dengan yang saya tahu saya menjalankan ini secara langsung.

79
00:05:31.380 --> 00:05:37.990
Jadi saya akan mengatakan satu dot pi dijalankan dengan benar.

80
00:05:40.190 --> 00:05:43.430
Dan kemudian saya benar-benar akan berbaris di blok ELSE dengan pernyataan if ini.

81
00:05:43.460 --> 00:05:47.150
Anda tidak melihat ini yang sering Anda lihat jika dan kemudian Anda mengeksekusi kode Anda.

82
00:05:47.150 --> 00:05:51.900
Tetapi hanya untuk memperjelas bagaimana kerja variabel ini juga akan menambahkan yang lain akan mengatakan.

83
00:05:51.920 --> 00:05:52.790
Lain.

84
00:05:52.940 --> 00:06:01.320
Cetak 1 pi telah diimpor jadi saya akan mengatakan itu.

85
00:06:01.470 --> 00:06:03.130
Dan mari kita lihat apa yang terjadi.

86
00:06:03.300 --> 00:06:04.980
Saya menemukan fungsi ini.

87
00:06:04.980 --> 00:06:10.740
Saya mencetak pernyataan ini setiap kali Anda memanggil satu pie itu dan kemudian tergantung jika satu PI adalah makna skrip utama

88
00:06:11.040 --> 00:06:14.970
dan memanggil satu PI itu langsung di baris perintah saya akan mencetak ini.

89
00:06:15.390 --> 00:06:21.480
Lain Itu berarti nama variabel tidak disetel berarti cetak lama yang ini pi telah diimpor.

90
00:06:21.930 --> 00:06:30.630
Jadi sekarang mari kita bekerja dengan file kedua kita ke pi yang akan dilakukan di sini adalah mengatakan impor 1

91
00:06:30.720 --> 00:06:34.830
dan saya akan mencetak di tingkat paling atas.

92
00:06:35.030 --> 00:06:37.230
Mari kita cetak seperti ini.

93
00:06:37.730 --> 00:06:47.030
Tingkat atas dalam dua titik PI dan karena saya baru saja mengimpor satu mari kita jalankan fungsi yang dari 1 atau

94
00:06:47.030 --> 00:06:55.340
katakan satu yang func dan di sini akan memiliki pernyataan if akan melengkapi otomatis ini jika nama sama

95
00:06:55.390 --> 00:06:56.620
dengan berarti.

96
00:06:56.830 --> 00:07:14.470
Saya akan mencetak ke PI sedang dijalankan langsung kalau tidak cetak ke PI telah diimpor.

97
00:07:14.580 --> 00:07:20.270
Jadi mari kita simpan perubahan pada keduanya dan kemudian buka baris perintah kita.

98
00:07:20.270 --> 00:07:26.600
Baiklah, hal pertama yang akan kita lakukan di command line adalah menjalankan PI secara langsung.

99
00:07:26.780 --> 00:07:27.580
Jadi kita jalankan ini.

100
00:07:27.620 --> 00:07:28.690
Dan kami perhatikan apa yang terjadi.

101
00:07:28.730 --> 00:07:35.000
Kita mendapatkan pernyataan cetak tingkat atas dalam satu tinggi-tinggi dan kemudian kita melihat dari itu jika nama sama dengan

102
00:07:35.260 --> 00:07:37.270
satu yang dijalankan secara langsung.

103
00:07:37.280 --> 00:07:41.630
Jadi kita dapat melihat di sini bahwa bawaan garis bawah variabel nama garis bawah

104
00:07:41.630 --> 00:07:43.820
digarisbawahi telah ditetapkan sebagai string utama.

105
00:07:43.910 --> 00:07:49.300
Jadi Python yang tahu dan seluruh skrip bisa tahu bahwa pai itu telah dipanggil secara langsung.

106
00:07:49.490 --> 00:07:54.240
Tapi sekarang mari kita periksa Python ke PI.

107
00:07:54.250 --> 00:07:58.580
Jadi sekarang ketika saya menjalankan notifier ini terjadi saya mendapatkan kembali level atas dan yang pi.

108
00:07:58.840 --> 00:08:07.260
Tapi sekarang salah satu yang pi itu dibangun di nama variabel belum ditetapkan menjadi berarti karena telah diimpor.

109
00:08:07.420 --> 00:08:13.340
Jadi sekarang kita mendapatkan kembali pi yang telah diimpor dan kemudian saya mendapatkan tingkat atas dan ke

110
00:08:13.480 --> 00:08:19.690
funk pie dalam satu PI dan kemudian ke Pye yang dijalankan secara langsung sehingga variabel bawaan benar-benar memungkinkan Anda

111
00:08:19.690 --> 00:08:23.220
untuk melihat apakah ada sesuatu yang diimpor atau dijalankan langsung.

112
00:08:23.300 --> 00:08:29.110
Jadi itulah ide dalam konsep di balik nama variabel nama dan memeriksa fisik ke utama.

113
00:08:29.120 --> 00:08:34.550
Namun apa yang Anda lihat adalah orang yang tidak benar-benar melakukannya seperti yang kami lakukan di sini dengan cek adalah sesuatu

114
00:08:34.870 --> 00:08:36.540
yang dijalankan secara langsung atau tidak.

115
00:08:36.740 --> 00:08:44.650
Sebaliknya kita kembali ke Sublime Text Editor apa yang mereka lakukan adalah alih-alih memiliki pernyataan L di sini karena mereka hanya mengatakan

116
00:08:44.700 --> 00:08:50.820
jika nama sama dengan saya, ini adalah hal yang sama dengan mengatakan menjalankan skrip dengan benar.

117
00:08:50.920 --> 00:08:55.770
Karena kita sudah tahu bahwa jika ini terjadi maka seseorang menjalankan PI itu secara langsung.

118
00:08:55.810 --> 00:09:00.640
Jadi apa yang mereka lakukan adalah mereka mendefinisikan banyak fungsi di sini atau menemukan kelas mereka.

119
00:09:00.640 --> 00:09:03.320
Jadi, inilah fungsi lainnya.

120
00:09:03.460 --> 00:09:08.380
Anda menulis beberapa fungsi fungsi lain untuk dikatakan dan kemudian di sini di bagian bawah apa

121
00:09:08.380 --> 00:09:14.140
yang akhirnya Anda lakukan adalah Anda hanya memanggil fungsi Anda sehingga Anda akan mengatakan OK jalankan fungsi untuk kemudian jalankan fungsi

122
00:09:14.140 --> 00:09:19.090
1 dan kemudian mungkin memiliki sedikit logika di sini tapi ide utamanya adalah ini lebih untuk organisasi kode.

123
00:09:19.090 --> 00:09:23.290
Anda memiliki semua fungsi dan kelas Anda didefinisikan di sini dan kemudian logika Anda di mana Anda

124
00:09:23.290 --> 00:09:24.600
benar-benar menjalankan sesuatu didefinisikan.

125
00:09:24.610 --> 00:09:29.500
Di sini, di bagian bawah dan ini adalah struktur yang sangat umum Anda akan melihat lebih besar

126
00:09:29.500 --> 00:09:32.480
dengan skrip terutama ketika Anda mulai menggunakan modul dan paket.

127
00:09:32.840 --> 00:09:33.270
Baiklah.

128
00:09:33.280 --> 00:09:34.940
Itulah dasar-dasar dari baris ini.

129
00:09:34.960 --> 00:09:39.460
Jika nama sama dengan berarti pasti memeriksa penjelasan bahwa file teks yang sesuai dengan

130
00:09:39.460 --> 00:09:40.140
kuliah ini.

131
00:09:40.190 --> 00:09:43.240
Dan jika Anda memiliki pertanyaan, jangan ragu untuk mengirimkan forum Tanya Jawab.

132
00:09:43.240 --> 00:09:44.380
Sampai jumpa di kuliah berikutnya.
