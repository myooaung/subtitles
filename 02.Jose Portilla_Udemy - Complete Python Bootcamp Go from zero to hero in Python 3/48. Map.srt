1
1

00:00:01,728  -->  00:00:02,561
<v Instructor>Hello everyone,</v>
2

2

00:00:02,561  -->  00:00:05,350
and welcome to this lecture on the map function.
3

3

00:00:05,350  -->  00:00:07,768
So map is a built in function in Python
4

4

00:00:07,768  -->  00:00:09,617
and it's gonna be one of the first built-in functions
5

5

00:00:09,617  -->  00:00:10,829
we work with.
6

6

00:00:10,829  -->  00:00:13,680
And it's a really useful function,
7

7

00:00:13,680  -->  00:00:15,318
especially when you use it in conjunction
8

8

00:00:15,318  -->  00:00:16,710
with the lambda expression,
9

9

00:00:16,710  -->  00:00:20,229
and we'll go into that a little further.
10

10

00:00:20,229  -->  00:00:22,562
So map comes in the form map
11

11

00:00:25,637  -->  00:00:27,303
and then it takes in two arguments,
12

12

00:00:27,303  -->  00:00:30,931
a function and a sequence iterable, such as a list.
13

13

00:00:30,931  -->  00:00:33,909
And what it does, it applies this function
14

14

00:00:33,909  -->  00:00:36,321
to every element in this sequence
15

15

00:00:36,321  -->  00:00:38,742
and then returns a new list with the elements changed
16

16

00:00:38,742  -->  00:00:40,460
by the function.
17

17

00:00:40,460  -->  00:00:41,830
So let's go ahead and see what this looks like
18

18

00:00:41,830  -->  00:00:43,969
in a live coding example.
19

19

00:00:43,969  -->  00:00:47,350
If you remember from the list comprehension lectures,
20

20

00:00:47,350  -->  00:00:51,060
we used list comprehension to convert temperatures, right?
21

21

00:00:51,060  -->  00:00:52,868
Fahrenheit to Celsius.
22

22

00:00:52,868  -->  00:00:55,762
So let's go in and see what that looks like with map.
23

23

00:00:55,762  -->  00:00:57,561
So I'm gonna use map.
24

24

00:00:57,561  -->  00:01:00,898
I'm gonna create a function called fahrenheit
25

25

00:01:00,898  -->  00:01:03,898
and it's gonna take in a temperature
26

26

00:01:04,748  -->  00:01:05,950
that's in Celsius
27

27

00:01:05,950  -->  00:01:09,301
and it's gonna return the temperature in Fahrenheit.
28

28

00:01:09,301  -->  00:01:13,218
So it's gonna return the temperature in Celsius
29

29

00:01:15,731  -->  00:01:18,547
and that equation looks like this.
30

30

00:01:18,547  -->  00:01:21,211
You may remember it from
31

31

00:01:21,211  -->  00:01:23,338
the list comprehension tutorials.
32

32

00:01:23,338  -->  00:01:26,496
So here we have our fahrenheit function.
33

33

00:01:26,496  -->  00:01:28,049
It takes in the temperature
34

34

00:01:28,049  -->  00:01:31,959
and then returns the temperature in Fahrenheit.
35

35

00:01:31,959  -->  00:01:33,358
So to give you an example,
36

36

00:01:33,358  -->  00:01:36,737
let's go ahead and look at Fahrenheit
37

37

00:01:36,737  -->  00:01:40,732
of zero degrees Celsius is 32 degrees, right?
38

38

00:01:40,732  -->  00:01:42,489
The temperature where water freezes.
39

39

00:01:42,489  -->  00:01:47,153
Okay, so what if I had a list of temperatures in Celsius
40

40

00:01:47,153  -->  00:01:51,696
so I could say zero, less like room temperature,
41

41

00:01:51,696  -->  00:01:55,863
and then let's say boiling water at 100 degrees Celsius.
42

42

00:01:57,294  -->  00:02:01,453
So what if I wanted to apply this function
43

43

00:02:01,453  -->  00:02:04,095
to every element in my temperature list?
44

44

00:02:04,095  -->  00:02:06,245
That's where map comes in.
45

45

00:02:06,245  -->  00:02:07,955
So I'm gonna say map,
46

46

00:02:07,955  -->  00:02:10,955
the name of my function, fahrenheit,
47

47

00:02:12,682  -->  00:02:15,064
and notice I'm not actually passing any parenthesis,
48

48

00:02:15,064  -->  00:02:17,012
I'm just passing the name of my function.
49

49

00:02:17,012  -->  00:02:18,416
So I don't do this.
50

50

00:02:18,416  -->  00:02:20,474
It's just the name of the function.
51

51

00:02:20,474  -->  00:02:22,053
And then I pass in the sequence iterable,
52

52

00:02:22,053  -->  00:02:24,195
in this case my list.
53

53

00:02:24,195  -->  00:02:28,604
And what I get is every element in that list
54

54

00:02:28,604  -->  00:02:31,875
with the fahrenheit function applied to it.
55

55

00:02:31,875  -->  00:02:32,733
Great.
56

56

00:02:32,733  -->  00:02:36,365
So in this example we could have used a lambda expression
57

57

00:02:36,365  -->  00:02:39,333
so we didn't have to actually define this whole fahrenheit.
58

58

00:02:39,333  -->  00:02:41,035
So this is great when you wanna do
59

59

00:02:41,035  -->  00:02:43,644
some sort of anonymous function call.
60

60

00:02:43,644  -->  00:02:45,934
So you don't want to have to define entire functions,
61

61

00:02:45,934  -->  00:02:47,624
so you use the lambda expression.
62

62

00:02:47,624  -->  00:02:48,474
And I mentioned before,
63

63

00:02:48,474  -->  00:02:50,166
when we were covering lambda expressions,
64

64

00:02:50,166  -->  00:02:51,855
that they would be really useful with map
65

65

00:02:51,855  -->  00:02:53,516
and filter and reduce,
66

66

00:02:53,516  -->  00:02:56,415
so now we're gonna see them in their true action.
67

67

00:02:56,415  -->  00:02:59,665
So I'm gonna say lambda take in some T,
68

68

00:03:02,017  -->  00:03:05,227
multiply it by nine divided by five.
69

69

00:03:05,227  -->  00:03:08,696
And I'm using 9.0 so I don't get any floating point errors,
70

70

00:03:08,696  -->  00:03:10,368
I don't get any cut-offs.
71

71

00:03:10,368  -->  00:03:11,449
If you're using Python Three
72

72

00:03:11,449  -->  00:03:13,373
you didn't have to worry about that.
73

73

00:03:13,373  -->  00:03:16,723
And that's my lambda expression
74

74

00:03:16,723  -->  00:03:18,990
and now I'm going to apply it to my list.
75

75

00:03:18,990  -->  00:03:21,004
And we get the exact same result.
76

76

00:03:21,004  -->  00:03:21,837
Awesome.
77

77

00:03:21,837  -->  00:03:23,842
So now I actually, with map,
78

78

00:03:23,842  -->  00:03:25,720
don't even have to define
79

79

00:03:25,720  -->  00:03:27,808
an entire function name and call-it.
80

80

00:03:27,808  -->  00:03:30,269
I can just use a lambda expression instead.
81

81

00:03:30,269  -->  00:03:32,451
And usually when you see map in someone else's code
82

82

00:03:32,451  -->  00:03:35,820
it's almost always using a lambda expression.
83

83

00:03:35,820  -->  00:03:39,237
Okay, so how can we build on top of this?
84

84

00:03:40,482  -->  00:03:41,315
So if you remember,
85

85

00:03:41,315  -->  00:03:44,371
lambda expressions can actually take in multiple arguments.
86

86

00:03:44,371  -->  00:03:48,551
So I could have something like lambda x, y
87

87

00:03:48,551  -->  00:03:50,134
return x plus y.
88

88

00:03:53,291  -->  00:03:55,180
So I could have that sorta lambda function.
89

89

00:03:55,180  -->  00:03:57,270
And we can incorporate that with map.
90

90

00:03:57,270  -->  00:03:59,772
So we can pass more than one sequence iterable
91

91

00:03:59,772  -->  00:04:01,633
and I'll show you what I mean by that.
92

92

00:04:01,633  -->  00:04:03,072
I'm gonna create two lists.
93

93

00:04:03,072  -->  00:04:03,905
Actually three.
94

94

00:04:03,905  -->  00:04:06,489
One, two, a, b, and c,
95

95

00:04:06,489  -->  00:04:10,903
so let's go, a is gonna have one, two, three,
96

96

00:04:10,903  -->  00:04:13,153
b will have four, five, six
97

97

00:04:15,222  -->  00:04:18,139
and c will have seven, eight, nine.
98

98

00:04:20,084  -->  00:04:23,755
Okay, so I have a, b, c and now what I'm gonna do
99

99

00:04:23,755  -->  00:04:26,588
is map the lambda expression I had
100

100

00:04:27,612  -->  00:04:31,665
which takes in two arguments, x and y
101

101

00:04:31,665  -->  00:04:35,499
and then returns x and y added together.
102

102

00:04:35,499  -->  00:04:40,454
But remember I'm gonna take in two arguments now, a and b.
103

103

00:04:40,454  -->  00:04:42,427
So what map is gonna do,
104

104

00:04:42,427  -->  00:04:43,968
is it's gonna be able to work
105

105

00:04:43,968  -->  00:04:47,658
with two or more sequence iterables.
106

106

00:04:47,658  -->  00:04:51,825
So it's gonna apply this lambda function in order.
107

107

00:04:52,792  -->  00:04:56,600
So it's gonna take zero index of a, zero index of b,
108

108

00:04:56,600  -->  00:04:58,511
apply this lambda expression.
109

109

00:04:58,511  -->  00:05:00,872
Then the one index of a, one index of b,
110

110

00:05:00,872  -->  00:05:02,344
apply this lambda expression,
111

111

00:05:02,344  -->  00:05:04,359
and continually do that.
112

112

00:05:04,359  -->  00:05:07,374
So if we see the results, we basically get a plus b,
113

113

00:05:07,374  -->  00:05:10,881
so one plus four, two plus five, three plus six,
114

114

00:05:10,881  -->  00:05:12,453
five, seven, nine.
115

115

00:05:12,453  -->  00:05:15,332
And we can actually extend this further
116

116

00:05:15,332  -->  00:05:16,241
to even more than two.
117

117

00:05:16,241  -->  00:05:17,573
So I could say,
118

118

00:05:17,573  -->  00:05:20,093
let me put a space in here so it's really clear,
119

119

00:05:20,093  -->  00:05:22,593
x, y, z, plus z input a, b, c,
120

120

00:05:27,311  -->  00:05:29,553
and you'll notice now we get one plus four plus seven,
121

121

00:05:29,553  -->  00:05:30,765
two plus five plus eight,
122

122

00:05:30,765  -->  00:05:33,014
three plus six plus nine.
123

123

00:05:33,014  -->  00:05:35,592
Usually you won't see something
124

124

00:05:35,592  -->  00:05:37,534
or map in lambda expressions used
125

125

00:05:37,534  -->  00:05:39,893
for this many sequence iterables,
126

126

00:05:39,893  -->  00:05:43,545
at least it's not too common from my own coding experience
127

127

00:05:43,545  -->  00:05:45,433
but it is used sometimes
128

128

00:05:45,433  -->  00:05:48,415
if it's the right tool in that case.
129

129

00:05:48,415  -->  00:05:52,582
So maybe you'd want to perhaps change these variables,
130

130

00:05:54,975  -->  00:05:57,142
if it's more clear for you
131

131

00:05:58,093  -->  00:05:59,465
to see it this way.
132

132

00:05:59,465  -->  00:06:00,364
Although it may be unclear
133

133

00:06:00,364  -->  00:06:01,732
because it may think you're referencing
134

134

00:06:01,732  -->  00:06:03,175
those list's themselves
135

135

00:06:03,175  -->  00:06:05,685
but you will get the exact same result.
136

136

00:06:05,685  -->  00:06:09,435
Okay, so let's go ahead and do one more example
137

137

00:06:09,435  -->  00:06:13,246
to really drive the point home of what map is doing.
138

138

00:06:13,246  -->  00:06:15,826
Let's go ahead and make an example that creates the,
139

139

00:06:15,826  -->  00:06:18,996
let's say, times every number in a list by negative one.
140

140

00:06:18,996  -->  00:06:22,606
So I want to map some lambda expression
141

141

00:06:22,606  -->  00:06:24,595
and the lambda's gonna take the number
142

142

00:06:24,595  -->  00:06:27,515
and return that number times negative one.
143

143

00:06:27,515  -->  00:06:30,374
And I'm gonna apply that to my a list.
144

144

00:06:30,374  -->  00:06:31,207
And there you have it,
145

145

00:06:31,207  -->  00:06:33,346
negative one, negative two, negative three.
146

146

00:06:33,346  -->  00:06:35,865
So map, this idea is actually pretty simple.
147

147

00:06:35,865  -->  00:06:37,427
You put in a function,
148

148

00:06:37,427  -->  00:06:39,116
remember it's a function name,
149

149

00:06:39,116  -->  00:06:41,415
you don't actually pass in the parenthesis,
150

150

00:06:41,415  -->  00:06:44,541
and then you pass in some sequence iterable, like a list.
151

151

00:06:44,541  -->  00:06:45,803
And then it returns a list
152

152

00:06:45,803  -->  00:06:49,332
of that function applied to every element in that sequence.
153

153

00:06:49,332  -->  00:06:51,252
And that's really all there is to map.
154

154

00:06:51,252  -->  00:06:52,892
And it's super-useful when you use it
155

155

00:06:52,892  -->  00:06:55,274
in conjunction with lambda.
156

156

00:06:55,274  -->  00:06:58,374
Alright, so go ahead and read over the other examples
157

157

00:06:58,374  -->  00:07:01,311
in the Jupyter notebook that we have here
158

158

00:07:01,311  -->  00:07:03,681
and make sure you understand map
159

159

00:07:03,681  -->  00:07:04,576
before continuing on
160

160

00:07:04,576  -->  00:07:06,997
to the other built-in function lectures.
161

161

00:07:06,997  -->  00:07:08,425
Alright, thanks everyone
162

162

00:07:08,425  -->  00:07:11,508
and I'll see you at the next lecture.
