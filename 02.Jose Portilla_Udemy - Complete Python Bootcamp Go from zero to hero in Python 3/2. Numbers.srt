1
1

00:00:01,941  -->  00:00:02,774
<v Instructor>Hello everyone,</v>
2

2

00:00:02,774  -->  00:00:04,946
and welcome to your first coding lecture!
3

3

00:00:04,946  -->  00:00:06,601
So in this lecture, we're going to be learning
4

4

00:00:06,601  -->  00:00:08,834
about numbers and more in Python.
5

5

00:00:08,834  -->  00:00:10,919
And we're gonna cover the different types of numbers
6

6

00:00:10,919  -->  00:00:12,674
that we can use in Python,
7

7

00:00:12,674  -->  00:00:16,599
some basic arithmetic using those numbers in Python.
8

8

00:00:16,599  -->  00:00:17,993
We'll also learn about some differences
9

9

00:00:17,993  -->  00:00:21,293
between Python 2 and 3 when it comes to division,
10

10

00:00:21,293  -->  00:00:25,278
and we'll get a quick peek at object assignment in Python.
11

11

00:00:25,278  -->  00:00:29,090
So here I have open the Jupyter or IPython notebook.
12

12

00:00:29,090  -->  00:00:31,420
So you can scroll through this notebook, check it out
13

13

00:00:31,420  -->  00:00:34,363
if you wanna go in a little slower at your own pace.
14

14

00:00:34,363  -->  00:00:35,868
There's tonnes of information here.
15

15

00:00:35,868  -->  00:00:40,058
And we'll be going over all this in this lecture video.
16

16

00:00:40,058  -->  00:00:41,408
Okay, great.
17

17

00:00:41,408  -->  00:00:43,247
So let's just get a quick presentation
18

18

00:00:43,247  -->  00:00:46,329
on the two types of numbers we're gonna be working with,
19

19

00:00:46,329  -->  00:00:49,699
which are integers and floating point numbers.
20

20

00:00:49,699  -->  00:00:53,532
So, I'll do a quick break to the presentation.
21

21

00:00:55,211  -->  00:00:58,977
Okay, here we are at the presentation now.
22

22

00:00:58,977  -->  00:01:01,864
There's a lot of different types of numbers in Python,
23

23

00:01:01,864  -->  00:01:04,516
and we're going to focus on two types right now,
24

24

00:01:04,516  -->  00:01:07,516
integers and floating point numbers.
25

25

00:01:08,455  -->  00:01:11,945
So, integers are just whole numbers, positive or negative.
26

26

00:01:11,945  -->  00:01:14,442
So for example two and negative two
27

27

00:01:14,442  -->  00:01:16,900
are just examples of integers.
28

28

00:01:16,900  -->  00:01:19,706
And floating point numbers is the other number type
29

29

00:01:19,706  -->  00:01:21,435
we're going to be concerned with right now.
30

30

00:01:21,435  -->  00:01:24,687
So floating point numbers have a decimal point in them
31

31

00:01:24,687  -->  00:01:28,203
or they can use an exponential e to define the number.
32

32

00:01:28,203  -->  00:01:31,888
So for example, 2.0 or two point zero there
33

33

00:01:31,888  -->  00:01:35,911
and negative 2.1 are examples of floating point numbers.
34

34

00:01:35,911  -->  00:01:39,411
Also, 4E2, either capital E or lowercase e
35

35

00:01:40,973  -->  00:01:43,589
is an example of a floating point number in Python.
36

36

00:01:43,589  -->  00:01:46,873
And all that means is four times 10 to the power of two.
37

37

00:01:46,873  -->  00:01:47,706
We'll mainly focus
38

38

00:01:47,706  -->  00:01:51,915
on those 2.0s and 2.1 type of floating point numbers,
39

39

00:01:51,915  -->  00:01:54,333
the one with decimal points in the.
40

40

00:01:54,333  -->  00:01:58,416
Okay, so let's go ahead and hop back to the code.
41

41

00:01:59,909  -->  00:02:03,659
Okay, and we're back to the Jupyter notebook,
42

42

00:02:04,514  -->  00:02:08,667
and now I'm going to hop over to our live code session.
43

43

00:02:08,667  -->  00:02:10,825
All right, so here, I'm just going to be going over
44

44

00:02:10,825  -->  00:02:13,240
the code that we do in the notebook.
45

45

00:02:13,240  -->  00:02:14,896
So let's go ahead and check out
46

46

00:02:14,896  -->  00:02:18,497
how to do some basic arithmetic in Python.
47

47

00:02:18,497  -->  00:02:20,939
Here, I have my cell, and for addition,
48

48

00:02:20,939  -->  00:02:23,926
all you do is you type the number in
49

49

00:02:23,926  -->  00:02:27,132
and put in a plus sign so two plus one,
50

50

00:02:27,132  -->  00:02:29,144
remember, Shift + Enter to run your cells,
51

51

00:02:29,144  -->  00:02:29,997
and there you go.
52

52

00:02:29,997  -->  00:02:31,282
That's how you can do addition.
53

53

00:02:31,282  -->  00:02:34,849
So, for example, two plus two, again, just four.
54

54

00:02:34,849  -->  00:02:36,918
All right, subtraction.
55

55

00:02:36,918  -->  00:02:41,085
It's also pretty simple, just a simple dash sign there.
56

56

00:02:42,596  -->  00:02:45,237
And we can do another example.
57

57

00:02:45,237  -->  00:02:46,291
And three minus two.
58

58

00:02:46,291  -->  00:02:48,812
So right now, when we're first looking into Python,
59

59

00:02:48,812  -->  00:02:51,851
we can go ahead and think of Python as just a calculator.
60

60

00:02:51,851  -->  00:02:55,326
So multiplication, the symbol for that used in Python
61

61

00:02:55,326  -->  00:02:59,029
is an asterisk, so there you have two times two
62

62

00:02:59,029  -->  00:03:02,544
or three times two is six, et cetera.
63

63

00:03:02,544  -->  00:03:04,764
Okay, so here's where we have to kind of keep
64

64

00:03:04,764  -->  00:03:08,014
close attention as we go into division.
65

65

00:03:09,951  -->  00:03:12,592
And the reason I say that we have to pay close attention
66

66

00:03:12,592  -->  00:03:13,936
is because of the following.
67

67

00:03:13,936  -->  00:03:17,407
So let's say I wanted to do three divided by two.
68

68

00:03:17,407  -->  00:03:20,658
So, what would you expect three divided by two to be?
69

69

00:03:20,658  -->  00:03:23,095
Probably 1.5, right?
70

70

00:03:23,095  -->  00:03:26,199
So if you notice, I'm using Python 2 right now.
71

71

00:03:26,199  -->  00:03:27,989
You can see up here in the right here corner.
72

72

00:03:27,989  -->  00:03:30,196
And the output is one.
73

73

00:03:30,196  -->  00:03:31,850
So why did this happen?
74

74

00:03:31,850  -->  00:03:34,893
And if you hop over to the Jupyter notebook,
75

75

00:03:34,893  -->  00:03:38,128
you'll notice you get a Python 3 alert here.
76

76

00:03:38,128  -->  00:03:39,711
So what's going on?
77

77

00:03:42,059  -->  00:03:43,805
So the reason we're getting this result
78

78

00:03:43,805  -->  00:03:45,349
is because of Python 2.
79

79

00:03:45,349  -->  00:03:48,602
In Python 2 and Python 3, you perform division
80

80

00:03:48,602  -->  00:03:52,010
using this forward slash symbol for division.
81

81

00:03:52,010  -->  00:03:53,949
But the difference is in Python 2,
82

82

00:03:53,949  -->  00:03:57,427
this symbol performs what's known as classic division,
83

83

00:03:57,427  -->  00:04:01,167
and that means that the decimal points are truncated off.
84

84

00:04:01,167  -->  00:04:03,584
So 1.5 gets truncated to one.
85

85

00:04:04,663  -->  00:04:09,195
In Python 3, however, this single forward slash for division
86

86

00:04:09,195  -->  00:04:11,375
performs what's known as true division,
87

87

00:04:11,375  -->  00:04:14,598
so you would get a 1.5 if you had inputted
88

88

00:04:14,598  -->  00:04:17,598
three divided by two using Python 3.
89

89

00:04:18,464  -->  00:04:20,885
So, what do we do if we're using Python 2
90

90

00:04:20,885  -->  00:04:24,437
and we want to avoid this kind of floating point error?
91

91

00:04:24,437  -->  00:04:25,761
So there's different methods.
92

92

00:04:25,761  -->  00:04:27,868
One method is that you can specify
93

93

00:04:27,868  -->  00:04:29,958
one of the numbers to be that floating point number.
94

94

00:04:29,958  -->  00:04:32,625
So I can say 3.0 divided by two,
95

95

00:04:33,936  -->  00:04:37,211
and then you'll notice we get out 1.5, the expected result.
96

96

00:04:37,211  -->  00:04:38,935
And that can work for either number.
97

97

00:04:38,935  -->  00:04:42,278
So three divided by 2.0, the difference being
98

98

00:04:42,278  -->  00:04:46,181
just one of 'em has to be defined as a float.
99

99

00:04:46,181  -->  00:04:48,660
Some other things you can do in Python 2
100

100

00:04:48,660  -->  00:04:51,765
is also cast one of the numbers to be a float.
101

101

00:04:51,765  -->  00:04:54,389
And what casting does is it uses a function
102

102

00:04:54,389  -->  00:04:57,121
that basically turns integers into floats.
103

103

00:04:57,121  -->  00:04:59,500
So, what that would look like,
104

104

00:04:59,500  -->  00:05:01,936
and we haven't learned about functions yet,
105

105

00:05:01,936  -->  00:05:03,898
but we'll get a quick sneak peek,
106

106

00:05:03,898  -->  00:05:07,782
is you can call float like this on one of those numbers.
107

107

00:05:07,782  -->  00:05:11,699
So it's float, parenthesis, three, parenthesis,
108

108

00:05:12,623  -->  00:05:15,748
divided by two, and what that's basically doing
109

109

00:05:15,748  -->  00:05:19,110
is casting that integer three as a float.
110

110

00:05:19,110  -->  00:05:23,159
So if I check what's going on there by itself,
111

111

00:05:23,159  -->  00:05:23,992
I get 3.0.
112

112

00:05:25,037  -->  00:05:29,204
Okay, so there's one other thing that we could possibly do,
113

113

00:05:30,518  -->  00:05:32,930
and again, this is just kind of a sneak preview,
114

114

00:05:32,930  -->  00:05:36,412
because we haven't gone over functions or modules yet,
115

115

00:05:36,412  -->  00:05:39,221
but a really interesting module
116

116

00:05:39,221  -->  00:05:42,471
that Python 2 has is called __future__,
117

117

00:05:45,060  -->  00:05:48,169
and it'll actually allow you to import
118

118

00:05:48,169  -->  00:05:52,002
some capabilities from Python 3 into Python 2.
119

119

00:05:53,901  -->  00:05:56,432
And we'll go over what this is actually doing
120

120

00:05:56,432  -->  00:05:59,732
and how it's working later on in some lectures,
121

121

00:05:59,732  -->  00:06:01,315
but with this line,
122

122

00:06:02,822  -->  00:06:04,489
division, let's see.
123

123

00:06:05,355  -->  00:06:08,105
So right now I've written down from, space,
124

124

00:06:08,105  -->  00:06:11,702
underscore, underscore, future, underscore, underscore,
125

125

00:06:11,702  -->  00:06:13,903
space, import division.
126

126

00:06:13,903  -->  00:06:15,958
If I go ahead and run that line,
127

127

00:06:15,958  -->  00:06:20,120
what's that done is it's imported division
128

128

00:06:20,120  -->  00:06:23,450
from this future module, and what that basically does
129

129

00:06:23,450  -->  00:06:27,617
is now it treats division as if it were using Python 3.
130

130

00:06:29,049  -->  00:06:32,141
So you notice I can just say three divided by two,
131

131

00:06:32,141  -->  00:06:34,808
and now that's corrected to 1.5.
132

132

00:06:35,880  -->  00:06:37,872
So, let me just reiterate
133

133

00:06:37,872  -->  00:06:40,216
the three different things we can do here.
134

134

00:06:40,216  -->  00:06:44,978
You can make sure one of the numbers is a float,
135

135

00:06:44,978  -->  00:06:46,408
or you can actually cast
136

136

00:06:46,408  -->  00:06:49,081
one of the numbers to be a float to make that happen,
137

137

00:06:49,081  -->  00:06:53,248
or you can run this line, from __future__ import division,
138

138

00:06:55,673  -->  00:06:57,107
and that will take care
139

139

00:06:57,107  -->  00:07:01,274
of the rest of the divisions you do throughout Python 2.
140

140

00:07:02,142  -->  00:07:04,918
So, my suggestion is running this line.
141

141

00:07:04,918  -->  00:07:07,618
We'll learn later on in lectures about modules
142

142

00:07:07,618  -->  00:07:11,486
and what this is actually doing and how this is working,
143

143

00:07:11,486  -->  00:07:13,045
but right now you can just kind of treat it
144

144

00:07:13,045  -->  00:07:14,628
as this magic line.
145

145

00:07:15,759  -->  00:07:17,556
So if you're ever going to be dealing with division
146

146

00:07:17,556  -->  00:07:19,463
a lot in your code, you wanna go ahead
147

147

00:07:19,463  -->  00:07:23,015
and put this at the top if you're using Python 2.
148

148

00:07:23,015  -->  00:07:24,348
Okay.
149

149

00:07:24,348  -->  00:07:27,633
So moving onto some more arithmetic,
150

150

00:07:27,633  -->  00:07:29,340
how about we check out powers.
151

151

00:07:29,340  -->  00:07:32,945
So for instance, two to the power of three.
152

152

00:07:32,945  -->  00:07:36,375
So the way you do that is by doing double asterisks.
153

153

00:07:36,375  -->  00:07:40,459
So two, asterisk, asterisk, the power of three is eight.
154

154

00:07:40,459  -->  00:07:44,459
I can say four to the power of, let's say, five.
155

155

00:07:46,740  -->  00:07:47,740
That's 1024.
156

156

00:07:50,289  -->  00:07:53,340
And we can also, if we wanna do roots that way.
157

157

00:07:53,340  -->  00:07:56,002
So I could say like the square root of four
158

158

00:07:56,002  -->  00:07:59,752
is the same of four to the power of one-half,
159

159

00:08:01,313  -->  00:08:03,315
in this case, 0.5,
160

160

00:08:03,315  -->  00:08:06,253
and that's the same as the square root of four.
161

161

00:08:06,253  -->  00:08:10,423
You can also do square roots by importing the math function
162

162

00:08:10,423  -->  00:08:12,682
or importing the math module, excuse me,
163

163

00:08:12,682  -->  00:08:15,834
but we'll look at that later on in the course.
164

164

00:08:15,834  -->  00:08:16,667
Okay.
165

165

00:08:16,667  -->  00:08:18,645
So, moving along,
166

166

00:08:18,645  -->  00:08:21,502
we can also learn about order of operations
167

167

00:08:21,502  -->  00:08:23,410
that are followed in Python.
168

168

00:08:23,410  -->  00:08:26,063
So your standard order of operations are followed.
169

169

00:08:26,063  -->  00:08:28,765
So what I mean by that is if I say
170

170

00:08:28,765  -->  00:08:31,432
two plus 20 times 20 plus three,
171

171

00:08:34,055  -->  00:08:35,837
order of operations indicates
172

172

00:08:35,837  -->  00:08:39,530
that multiplication has to occur first before addition.
173

173

00:08:39,530  -->  00:08:41,742
So this 10 times 10 is gonna happen
174

174

00:08:41,742  -->  00:08:45,408
before the two and three get added.
175

175

00:08:45,408  -->  00:08:49,213
So Python's not gonna follow this reading left to right.
176

176

00:08:49,213  -->  00:08:51,988
It's actually going to follow order of operations.
177

177

00:08:51,988  -->  00:08:56,155
And I can see that occur due to the 105 result we get there.
178

178

00:08:57,198  -->  00:09:00,707
Okay, so what if I want to specify some orders?
179

179

00:09:00,707  -->  00:09:02,977
I can use parentheses, just as if you were writing
180

180

00:09:02,977  -->  00:09:07,144
a math equation in perhaps like a TI-83 calculator.
181

181

00:09:09,145  -->  00:09:11,801
So, if I wanted that two plus 10 to occur first,
182

182

00:09:11,801  -->  00:09:15,968
I can use parentheses to specify my custom orders there.
183

183

00:09:18,919  -->  00:09:20,106
Okay.
184

184

00:09:20,106  -->  00:09:23,152
So, that's the basic arithmetic, just a quick overview.
185

185

00:09:23,152  -->  00:09:24,916
Addition is just a plus sign.
186

186

00:09:24,916  -->  00:09:27,340
Subtraction, just that dash, that minus.
187

187

00:09:27,340  -->  00:09:29,378
Multiplication is the asterisk symbol.
188

188

00:09:29,378  -->  00:09:31,734
Division, forward slash.
189

189

00:09:31,734  -->  00:09:34,237
Careful to note that if you're using Python 2,
190

190

00:09:34,237  -->  00:09:36,376
you're not going to perform true division;
191

191

00:09:36,376  -->  00:09:38,643
you're going to perform classic division,
192

192

00:09:38,643  -->  00:09:41,405
unless one of 'em's a float or you use this
193

193

00:09:41,405  -->  00:09:43,898
from __future__ import division line.
194

194

00:09:43,898  -->  00:09:45,515
Okay.
195

195

00:09:45,515  -->  00:09:47,669
And if you're interested in some more details on that,
196

196

00:09:47,669  -->  00:09:49,973
you can go ahead and read this Python 3 alert
197

197

00:09:49,973  -->  00:09:53,973
in a little more detail in that Jupyter notebook.
198

198

00:09:53,973  -->  00:09:55,775
All right, so moving along,
199

199

00:09:55,775  -->  00:09:59,139
I'm just going to give you a really quick introduction
200

200

00:09:59,139  -->  00:10:03,971
to assigning labels to objects to create variables.
201

201

00:10:03,971  -->  00:10:08,319
So what I mean by that is I can use a single equals sign
202

202

00:10:08,319  -->  00:10:10,506
to assign labels to objects.
203

203

00:10:10,506  -->  00:10:12,230
So to show you an example of this
204

204

00:10:12,230  -->  00:10:14,897
is I can say a is equal to five.
205

205

00:10:19,672  -->  00:10:20,505
Sorry about that.
206

206

00:10:20,505  -->  00:10:23,172
And so now, I've set a label, a,
207

207

00:10:24,869  -->  00:10:28,079
as a reference to that number five.
208

208

00:10:28,079  -->  00:10:32,263
So if I call a in my script again, anywhere,
209

209

00:10:32,263  -->  00:10:36,430
Python's gonna great it as if it was the number five.
210

210

00:10:38,537  -->  00:10:41,918
And I can also add those objects together,
211

211

00:10:41,918  -->  00:10:43,987
so I can say, for example,
212

212

00:10:43,987  -->  00:10:46,280
variable a+a, and it's gonna treat it
213

213

00:10:46,280  -->  00:10:48,861
as if it was five plus five.
214

214

00:10:48,861  -->  00:10:51,190
So an interesting thing that we note
215

215

00:10:51,190  -->  00:10:53,829
in Python is what happens if we reassign this label.
216

216

00:10:53,829  -->  00:10:57,391
So what happens if I say now a equals 10.
217

217

00:10:57,391  -->  00:10:59,910
So Python lets it write over.
218

218

00:10:59,910  -->  00:11:02,357
So now if I reference a, it's 10 now.
219

219

00:11:02,357  -->  00:11:04,481
So you can write over those assigned labels
220

220

00:11:04,481  -->  00:11:06,759
on those variables, and we'll go in,
221

221

00:11:06,759  -->  00:11:09,007
on the next lecture, into a little more detail,
222

222

00:11:09,007  -->  00:11:10,925
in case you're jumping in from another language
223

223

00:11:10,925  -->  00:11:13,372
on how Python actually deals with these labels.
224

224

00:11:13,372  -->  00:11:15,496
But for the basics right now, you can just treat it
225

225

00:11:15,496  -->  00:11:19,646
as you choose your variable name, an equals sign,
226

226

00:11:19,646  -->  00:11:23,399
and then whatever object you wanna label that.
227

227

00:11:23,399  -->  00:11:27,458
Okay, and you can also use the variable label itself
228

228

00:11:27,458  -->  00:11:30,334
to reassign the variable.
229

229

00:11:30,334  -->  00:11:34,501
So what I mean by that is I can say a equals a+a,
230

230

00:11:36,108  -->  00:11:39,182
and what Python will do is now it will say, okay,
231

231

00:11:39,182  -->  00:11:41,682
so a is now equal to a plus a.
232

232

00:11:42,559  -->  00:11:44,806
So what was a originally?
233

233

00:11:44,806  -->  00:11:46,389
It was right now 10.
234

234

00:11:46,389  -->  00:11:48,663
So a is now going to be equal to 10+10.
235

235

00:11:48,663  -->  00:11:51,635
So if we check that out, there we have 20.
236

236

00:11:51,635  -->  00:11:52,938
Okay, great.
237

237

00:11:52,938  -->  00:11:54,218
So you might be thinking, okay,
238

238

00:11:54,218  -->  00:11:58,627
so what are the rules on creating these variable names?
239

239

00:11:58,627  -->  00:12:01,254
And there's a couple rules that they have to follow
240

240

00:12:01,254  -->  00:12:03,087
so I'll jump over here
241

241

00:12:03,945  -->  00:12:06,203
to the Jupyter notebook where I have 'em all.
242

242

00:12:06,203  -->  00:12:10,996
Okay, so these names, they cannot start with a number.
243

243

00:12:10,996  -->  00:12:12,971
There can also be no spaces in the name.
244

244

00:12:12,971  -->  00:12:15,872
If you want to specify some spaces,
245

245

00:12:15,872  -->  00:12:19,007
probably use an underscore instead.
246

246

00:12:19,007  -->  00:12:22,255
It can't use any of these symbols right here.
247

247

00:12:22,255  -->  00:12:24,152
All of these symbols are forbidden,
248

248

00:12:24,152  -->  00:12:26,251
and it's usually considered best practise
249

249

00:12:26,251  -->  00:12:28,668
that the names are lowercase.
250

250

00:12:29,867  -->  00:12:33,049
So let's go ahead and go over a super simple example
251

251

00:12:33,049  -->  00:12:35,995
of how we can use these labels and these variables
252

252

00:12:35,995  -->  00:12:39,963
that we make to clean up our code a bit.
253

253

00:12:39,963  -->  00:12:42,421
So these variable names help us keep better track
254

254

00:12:42,421  -->  00:12:44,166
of what's going on in our code.
255

255

00:12:44,166  -->  00:12:45,861
So to give you a small example,
256

256

00:12:45,861  -->  00:12:50,006
I'm going to make a variable called my_income,
257

257

00:12:50,006  -->  00:12:54,341
and I'm going to set it equal to the number of 100.
258

258

00:12:54,341  -->  00:12:59,010
And then I'm gonna make another one called tax rate,
259

259

00:12:59,010  -->  00:13:03,177
tax, underscore, rate, and I'll set that equal to 0.1.
260

260

00:13:04,516  -->  00:13:05,349
Great.
261

261

00:13:05,349  -->  00:13:09,516
And so now, finally, I'll say my_taxes that I have to pay
262

262

00:13:10,909  -->  00:13:15,076
is going to be equal to my_income multiplied by my tax_rate.
263

263

00:13:18,607  -->  00:13:19,440
Great.
264

264

00:13:19,440  -->  00:13:23,190
And if I run that cell, now I define my_taxes
265

265

00:13:24,243  -->  00:13:26,798
as my income times my tax_rate,
266

266

00:13:26,798  -->  00:13:31,377
and if I call it to see what that value is, it's 10.
267

267

00:13:31,377  -->  00:13:34,938
So 100 times .1, that 10% tax rate,
268

268

00:13:34,938  -->  00:13:36,355
my taxes are $10.
269

269

00:13:37,640  -->  00:13:39,034
Great.
270

270

00:13:39,034  -->  00:13:40,578
So, what have we learned?
271

271

00:13:40,578  -->  00:13:43,252
We've learned some of the basics of numbers in Python.
272

272

00:13:43,252  -->  00:13:44,776
We've also learned how to do arithmetic
273

273

00:13:44,776  -->  00:13:47,104
and use Python as a basic calculator.
274

274

00:13:47,104  -->  00:13:51,271
And we wrapped it up with a quick introduction to variables
275

275

00:13:52,109  -->  00:13:56,561
and how we can create them and label them in Python.
276

276

00:13:56,561  -->  00:13:59,461
So next up, we're going to learn a little bit more
277

277

00:13:59,461  -->  00:14:03,070
of how this variable creation and labelling works,
278

278

00:14:03,070  -->  00:14:06,095
but go ahead and feel free to just mess around with Python.
279

279

00:14:06,095  -->  00:14:08,740
I think one of the best ways to get a quick introduction
280

280

00:14:08,740  -->  00:14:11,520
to Python is just treat it as a calculator,
281

281

00:14:11,520  -->  00:14:15,324
and then with the introduction of variables and label names,
282

282

00:14:15,324  -->  00:14:18,802
you'll slowly get more and more complex with your code.
283

283

00:14:18,802  -->  00:14:21,484
But go ahead and mess around with different additions,
284

284

00:14:21,484  -->  00:14:24,618
multiplications, powers, et cetera, divisions.
285

285

00:14:24,618  -->  00:14:26,308
Make sure you really understand how to do
286

286

00:14:26,308  -->  00:14:28,937
all those operations, because numbers is gonna be
287

287

00:14:28,937  -->  00:14:31,959
one of the main building blocks we work off of in our code.
288

288

00:14:31,959  -->  00:14:33,448
So keep in minute the difference
289

289

00:14:33,448  -->  00:14:35,782
between integers and floating point numbers,
290

290

00:14:35,782  -->  00:14:39,009
differences between Python 2 versus 3
291

291

00:14:39,009  -->  00:14:41,448
when it comes to division,
292

292

00:14:41,448  -->  00:14:46,323
and all the different arithmetic you can use Python for.
293

293

00:14:46,323  -->  00:14:48,857
Okay, so that about sums up our lesson.
294

294

00:14:48,857  -->  00:14:50,575
Remember, there's always more to read
295

295

00:14:50,575  -->  00:14:51,735
in the Jupyter notebooks
296

296

00:14:51,735  -->  00:14:54,997
if you wanna go into a little more detail over anything.
297

297

00:14:54,997  -->  00:14:56,074
All right, guys.
298

298

00:14:56,074  -->  00:14:59,396
Thanks, and I'll see you at the next lecture.
