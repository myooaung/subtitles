1
1

00:00:01,844  -->  00:00:03,427
<v Narrator>Hello everyone, and welcome to the</v>
2

2

00:00:03,427  -->  00:00:06,072
Nested Statements and Scope lecture.
3

3

00:00:06,072  -->  00:00:08,274
So we've gone over writing our own functions using
4

4

00:00:08,274  -->  00:00:11,787
lambda expressions, et cetera, but now it's important
5

5

00:00:11,787  -->  00:00:14,493
to understand how Python deals with the variable names
6

6

00:00:14,493  -->  00:00:16,842
we actually assign.
7

7

00:00:16,842  -->  00:00:19,434
Before we start this lecture, what I want you to do is
8

8

00:00:19,434  -->  00:00:21,980
read and code through the entire Jupyter notebook
9

9

00:00:21,980  -->  00:00:23,323
for this lecture.
10

10

00:00:23,323  -->  00:00:25,801
This is a super important topic for fully understanding
11

11

00:00:25,801  -->  00:00:28,301
the more advanced Python programming features,
12

12

00:00:28,301  -->  00:00:30,762
so what I want you to do is read through the entire
13

13

00:00:30,762  -->  00:00:34,321
Python Jupyter notebook, read through all the code,
14

14

00:00:34,321  -->  00:00:36,895
code it out yourself, make sure you understand it,
15

15

00:00:36,895  -->  00:00:38,272
and then come back and we're gonna
16

16

00:00:38,272  -->  00:00:40,458
explain those ideas further.
17

17

00:00:40,458  -->  00:00:43,992
Okay, so let's go ahead and get started.
18

18

00:00:43,992  -->  00:00:47,759
Through a quick introduction, so like I mentioned before,
19

19

00:00:47,759  -->  00:00:50,058
we've written our own functions, now let's understand
20

20

00:00:50,058  -->  00:00:53,673
how Python deals with the variable names that we assign.
21

21

00:00:53,673  -->  00:00:56,270
So when you create a variable name in Python, that name
22

22

00:00:56,270  -->  00:00:58,902
is stored in what's called a namespace.
23

23

00:00:58,902  -->  00:01:01,896
And variable names also have what's known as a scope.
24

24

00:01:01,896  -->  00:01:04,819
The scope determines the visibility of that variable name
25

25

00:01:04,819  -->  00:01:06,722
to other parts of your code.
26

26

00:01:06,722  -->  00:01:09,889
So, let's see a quick example of this.
27

27

00:01:10,947  -->  00:01:13,617
Here, we have the cell block that was in
28

28

00:01:13,617  -->  00:01:16,052
the Jupyter notebook, so as I mentioned before, you should
29

29

00:01:16,052  -->  00:01:18,290
have gone through the Jupyter notebook already
30

30

00:01:18,290  -->  00:01:20,509
and typed out this code yourself.
31

31

00:01:20,509  -->  00:01:24,060
So, we have the cell block, we have X equals 25,
32

32

00:01:24,060  -->  00:01:26,351
and then we have this function printer,
33

33

00:01:26,351  -->  00:01:30,660
which sets X equals to 50, and then returns X.
34

34

00:01:30,660  -->  00:01:33,058
So what do you imagine the output of printer is,
35

35

00:01:33,058  -->  00:01:37,927
and what do you imagine is the output of print X?
36

36

00:01:37,927  -->  00:01:41,156
So the output of that print X statement is 25,
37

37

00:01:41,156  -->  00:01:44,323
and the output of print printer is 50.
38

38

00:01:46,670  -->  00:01:50,094
So if you notice here, you basically have two different X's
39

39

00:01:50,094  -->  00:01:54,089
one for printer, and one in a more global scale or scope
40

40

00:01:54,089  -->  00:01:56,212
which we'll learn about in a second.
41

41

00:01:56,212  -->  00:01:58,867
So what we really want to figure out is how does Python know
42

42

00:01:58,867  -->  00:02:02,344
what X to refer to in your code.
43

43

00:02:02,344  -->  00:02:03,752
And this is where scope comes in,
44

44

00:02:03,752  -->  00:02:06,510
so Python has a set of rules it follows to decide
45

45

00:02:06,510  -->  00:02:09,836
what variables, in this case X, you're referencing
46

46

00:02:09,836  -->  00:02:11,196
in your code.
47

47

00:02:11,196  -->  00:02:15,976
And what we're gonna do is break down some of those rules.
48

48

00:02:15,976  -->  00:02:17,500
Okay, so this is what I just said,
49

49

00:02:17,500  -->  00:02:21,807
let's go ahead and break it down through name assignment.
50

50

00:02:21,807  -->  00:02:24,569
So name assignments will create or change local names
51

51

00:02:24,569  -->  00:02:25,906
by default.
52

52

00:02:25,906  -->  00:02:30,296
And name references search, at most, only four scopes.
53

53

00:02:30,296  -->  00:02:34,631
The four scopes are local, enclosing functions, global,
54

54

00:02:34,631  -->  00:02:35,714
and built-in.
55

55

00:02:38,016  -->  00:02:40,365
So let's go ahead and start with a quick definition
56

56

00:02:40,365  -->  00:02:41,492
of all these scopes.
57

57

00:02:41,492  -->  00:02:43,335
First, local scopes.
58

58

00:02:43,335  -->  00:02:46,276
So names assigned in any way within a function,
59

59

00:02:46,276  -->  00:02:49,558
such as a def function or lambda expression,
60

60

00:02:49,558  -->  00:02:52,145
and not declared global in that function.
61

61

00:02:52,145  -->  00:02:53,944
That has a local scope.
62

62

00:02:53,944  -->  00:02:57,554
So if we go back real quick, that X equals 50,
63

63

00:02:57,554  -->  00:03:00,352
it's defined within a function, printer,
64

64

00:03:00,352  -->  00:03:03,738
so currently that has a local scope, which is why
65

65

00:03:03,738  -->  00:03:06,821
when you call printer, it returns 50.
66

66

00:03:08,239  -->  00:03:12,432
Okay, next, if it couldn't find it in local, it looks for
67

67

00:03:12,432  -->  00:03:14,746
enclosing function locals.
68

68

00:03:14,746  -->  00:03:18,046
So, the name in the local scope of any and all enclosing
69

69

00:03:18,046  -->  00:03:22,079
functions, such as def or lambda, from inner to outer.
70

70

00:03:22,079  -->  00:03:25,316
And we'll see an example of that in a further slide.
71

71

00:03:25,316  -->  00:03:27,421
After that, it checks for global.
72

72

00:03:27,421  -->  00:03:29,444
And those are names assigned at the top level of the
73

73

00:03:29,444  -->  00:03:33,420
module file, or declared global in a def within a file.
74

74

00:03:33,420  -->  00:03:36,779
And we'll talk about the global statement in just a second.
75

75

00:03:36,779  -->  00:03:40,063
After that, it checks for built-in names in Python.
76

76

00:03:40,063  -->  00:03:42,775
Those are names that are preassigned built-in names
77

77

00:03:42,775  -->  00:03:46,022
in the Python language, so such as open, range,
78

78

00:03:46,022  -->  00:03:48,261
SyntaxError, et cetera.
79

79

00:03:48,261  -->  00:03:49,962
So let's go ahead and break down a few examples
80

80

00:03:49,962  -->  00:03:51,614
of all four of these.
81

81

00:03:51,614  -->  00:03:53,143
So first, local.
82

82

00:03:53,143  -->  00:03:55,242
So for instance, if we have a expression here,
83

83

00:03:55,242  -->  00:03:59,409
X is local to that lambda expression, or any function.
84

84

00:04:00,679  -->  00:04:02,714
Next, enclosing function locals.
85

85

00:04:02,714  -->  00:04:04,299
This one's a little different.
86

86

00:04:04,299  -->  00:04:05,449
So here I have an example
87

87

00:04:05,449  -->  00:04:07,170
which you've already coded through.
88

88

00:04:07,170  -->  00:04:10,591
I'm assigning name is equal to this is a global name,
89

89

00:04:10,591  -->  00:04:12,698
outside of any function.
90

90

00:04:12,698  -->  00:04:15,802
Then I crate a function called greet,
91

91

00:04:15,802  -->  00:04:17,380
and name equals Sammy.
92

92

00:04:17,380  -->  00:04:19,303
And then, this is something a little new that we
93

93

00:04:19,303  -->  00:04:21,882
haven't seen yet, I put a function within that function,
94

94

00:04:21,882  -->  00:04:25,669
I enclose it, and I have a function called hello,
95

95

00:04:25,669  -->  00:04:28,495
and it prints hello plus name.
96

96

00:04:28,495  -->  00:04:31,839
Then, I call hello in my greet function,
97

97

00:04:31,839  -->  00:04:35,099
and then at the end, I call greet.
98

98

00:04:35,099  -->  00:04:38,129
So if you notice it prints Hello Sammy.
99

99

00:04:38,129  -->  00:04:42,046
So what happens here, is if we work inside out,
100

100

00:04:43,706  -->  00:04:45,706
we have this hello call,
101

101

00:04:46,584  -->  00:04:48,448
and if we look at the function hello,
102

102

00:04:48,448  -->  00:04:50,876
it says def hello, print hello name.
103

103

00:04:50,876  -->  00:04:54,981
So what Python's gonna do is it first looks for local scope.
104

104

00:04:54,981  -->  00:04:58,225
Is name defined anywhere within this hello function?
105

105

00:04:58,225  -->  00:04:59,302
It's not.
106

106

00:04:59,302  -->  00:05:02,182
Okay, then let's go to enclosing functions.
107

107

00:05:02,182  -->  00:05:04,670
Is hello enclosed within another function?
108

108

00:05:04,670  -->  00:05:07,233
It is, it's enclosed within this greet function.
109

109

00:05:07,233  -->  00:05:10,119
It looks for the name variable there, and here it is:
110

110

00:05:10,119  -->  00:05:11,453
name equals Sammy.
111

111

00:05:11,453  -->  00:05:14,789
So now that it's found it, it brings it back here.
112

112

00:05:14,789  -->  00:05:17,656
It won't actually go all the way out to this global,
113

113

00:05:17,656  -->  00:05:21,108
because it's found it already in the enclosing function.
114

114

00:05:21,108  -->  00:05:22,180
Alright.
115

115

00:05:22,180  -->  00:05:24,143
Next up, global.
116

116

00:05:24,143  -->  00:05:27,157
So, globally if I were to just say print name,
117

117

00:05:27,157  -->  00:05:28,686
since I defined it earlier here
118

118

00:05:28,686  -->  00:05:30,115
with outside of any function,
119

119

00:05:30,115  -->  00:05:33,869
this is a global name, it'll print this is a global name.
120

120

00:05:33,869  -->  00:05:36,963
And then built-in, we've seen a tonne of examples of these,
121

121

00:05:36,963  -->  00:05:40,767
such as len, which is the function length, et cetera.
122

122

00:05:40,767  -->  00:05:42,196
So you're gonna want to be careful not to overwrite
123

123

00:05:42,196  -->  00:05:43,779
any built-in names.
124

124

00:05:44,830  -->  00:05:48,858
Alright, so moving along, local variables.
125

125

00:05:48,858  -->  00:05:52,608
When you declare variables inside a function,
126

126

00:05:55,154  -->  00:05:57,753
they are not related in any way to other variables
127

127

00:05:57,753  -->  00:06:00,027
with the same names used outside the function.
128

128

00:06:00,027  -->  00:06:04,215
So variable names are local to the function.
129

129

00:06:04,215  -->  00:06:06,577
And this is called the scope of the variable.
130

130

00:06:06,577  -->  00:06:09,006
And all variables have the scope of the block
131

131

00:06:09,006  -->  00:06:11,552
they are declared in starting from the point of definition
132

132

00:06:11,552  -->  00:06:12,572
of the name.
133

133

00:06:12,572  -->  00:06:14,711
So we kind of just went over this, but let's go ahead
134

134

00:06:14,711  -->  00:06:18,006
and break it down a little further.
135

135

00:06:18,006  -->  00:06:20,577
So here's one more example, I have assigned here
136

136

00:06:20,577  -->  00:06:24,293
X is equal to 50, this is a global variable,
137

137

00:06:24,293  -->  00:06:25,994
it's global in scope.
138

138

00:06:25,994  -->  00:06:29,635
Then I have a function, func, which takes in X,
139

139

00:06:29,635  -->  00:06:33,052
it prints X is, X, resets X equal to two,
140

140

00:06:35,099  -->  00:06:37,349
prints change local X to X,
141

141

00:06:38,196  -->  00:06:41,368
then we're gonna call that function and print X is still.
142

142

00:06:41,368  -->  00:06:43,535
So what happens here?
143

143

00:06:43,535  -->  00:06:44,785
I say, X is 50.
144

144

00:06:46,197  -->  00:06:48,882
So that's this line right here, print X is.
145

145

00:06:48,882  -->  00:06:52,528
So the function takes in 50, it says X is 50,
146

146

00:06:52,528  -->  00:06:55,547
locally it changes X equal to two.
147

147

00:06:55,547  -->  00:06:58,071
It does not change the global variable.
148

148

00:06:58,071  -->  00:07:00,940
Which then it says, change local X to two.
149

149

00:07:00,940  -->  00:07:03,875
But outside the function, even after we call the function
150

150

00:07:03,875  -->  00:07:07,208
if I were to print X, it still stays 50.
151

151

00:07:08,075  -->  00:07:12,075
So it only affects that change on a local level.
152

152

00:07:13,463  -->  00:07:16,304
Now what if we wanted to change that on a global level?
153

153

00:07:16,304  -->  00:07:18,340
So, if you want to assign a value to a name defined at
154

154

00:07:18,340  -->  00:07:21,614
the top level of the programme, not inside any kind of scope
155

155

00:07:21,614  -->  00:07:25,105
such as functions or classes, which we'll learn about later,
156

156

00:07:25,105  -->  00:07:27,407
then you have to tell Python that the name is not local,
157

157

00:07:27,407  -->  00:07:28,484
but it's global.
158

158

00:07:28,484  -->  00:07:30,264
And we do this using the global statement.
159

159

00:07:30,264  -->  00:07:33,209
So let's see what that looks like.
160

160

00:07:33,209  -->  00:07:35,768
So here, it's the same code you've gone through before
161

161

00:07:35,768  -->  00:07:37,066
in the Jupyter notebook.
162

162

00:07:37,066  -->  00:07:40,948
I have assigned X is equal to 50, and now, this is
163

163

00:07:40,948  -->  00:07:43,328
where it gets interesting, within my func,
164

164

00:07:43,328  -->  00:07:46,078
my function here, I say global X,
165

165

00:07:46,913  -->  00:07:49,835
and this basically tells the function, hey, I'm looking for
166

166

00:07:49,835  -->  00:07:52,375
the global name of X here.
167

167

00:07:52,375  -->  00:07:56,542
I'm, whatever, whatever changes I do will affect X globally.
168

168

00:07:58,922  -->  00:08:03,041
So then I print this function is now using the global X.
169

169

00:08:03,041  -->  00:08:06,924
Print because of the global X is print out X,
170

170

00:08:06,924  -->  00:08:09,100
resets X equal to two,
171

171

00:08:09,100  -->  00:08:12,202
print ran func, changed global X to X.
172

172

00:08:12,202  -->  00:08:15,034
So, outside of the function, what I first do is I print
173

173

00:08:15,034  -->  00:08:18,431
before calling func, X is, so let's see the output.
174

174

00:08:18,431  -->  00:08:21,769
Before calling that function, X is 50.
175

175

00:08:21,769  -->  00:08:23,619
Then we call the function.
176

176

00:08:23,619  -->  00:08:26,193
And this function is now using that global X.
177

177

00:08:26,193  -->  00:08:29,169
Because it's global, it knows X is 50.
178

178

00:08:29,169  -->  00:08:32,502
It resets the global X to two, and then,
179

179

00:08:33,522  -->  00:08:35,930
even after calling the function outside of the function,
180

180

00:08:35,930  -->  00:08:38,221
X is now equal to two.
181

181

00:08:38,221  -->  00:08:41,696
So with that global statement, I can affect name changes
182

182

00:08:41,696  -->  00:08:45,432
to variables that have a global scope
183

183

00:08:45,432  -->  00:08:47,468
using that global statement.
184

184

00:08:47,468  -->  00:08:51,635
And I'll use that a lot throughout the project of the
185

185

00:08:52,623  -->  00:08:55,746
black jack game that you'll see later on in this course
186

186

00:08:55,746  -->  00:09:00,411
to really nail it in that global statements allow us to
187

187

00:09:00,411  -->  00:09:02,897
take in global variables.
188

188

00:09:02,897  -->  00:09:04,560
Okay.
189

189

00:09:04,560  -->  00:09:07,551
So in conclusion, one last thing I wanna mention is that
190

190

00:09:07,551  -->  00:09:10,936
you can use globals, a built-in function, parentheses
191

191

00:09:10,936  -->  00:09:13,709
and locals, another built-in function, to check what you
192

192

00:09:13,709  -->  00:09:16,416
current local and global variables are.
193

193

00:09:16,416  -->  00:09:18,494
And another thing to keep in mind is that everything
194

194

00:09:18,494  -->  00:09:20,102
in Python is an object.
195

195

00:09:20,102  -->  00:09:22,639
So I can assign variables to functions just like I can
196

196

00:09:22,639  -->  00:09:25,828
with numbers, or any other type of objects we learned
197

197

00:09:25,828  -->  00:09:28,231
about in the first section of this course.
198

198

00:09:28,231  -->  00:09:30,001
So we're gonna go over again this whole idea that
199

199

00:09:30,001  -->  00:09:32,537
everything in Python is an object a lot more in the
200

200

00:09:32,537  -->  00:09:34,195
Decorators section of this course.
201

201

00:09:34,195  -->  00:09:37,425
But I just want to mention to you now so you have a feeling
202

202

00:09:37,425  -->  00:09:39,329
of what to expect.
203

203

00:09:39,329  -->  00:09:41,253
Okay, so let's hop over to the Jupyter notebook
204

204

00:09:41,253  -->  00:09:42,503
really quickly.
205

205

00:09:44,970  -->  00:09:48,030
So again, you should have gone over this entire notebook
206

206

00:09:48,030  -->  00:09:51,999
before seeing that slide presentations, and go over
207

207

00:09:51,999  -->  00:09:53,497
this code and make sure you really understand
208

208

00:09:53,497  -->  00:09:55,010
what's happening here.
209

209

00:09:55,010  -->  00:09:56,951
So the things that are important to understand.
210

210

00:09:56,951  -->  00:09:58,853
It's important to understand for this cell block
211

211

00:09:58,853  -->  00:10:02,686
why X is printed as 25 here with this command,
212

212

00:10:03,883  -->  00:10:06,454
and why it's printed as 50 here with this command.
213

213

00:10:06,454  -->  00:10:09,491
That's crucial for your understanding of how variables
214

214

00:10:09,491  -->  00:10:12,407
and nested statements and scope works in Python.
215

215

00:10:12,407  -->  00:10:16,219
Once you have a good feeling of why that's happening,
216

216

00:10:16,219  -->  00:10:18,025
you need to make sure you have a good feeling
217

217

00:10:18,025  -->  00:10:19,756
of why this is happening.
218

218

00:10:19,756  -->  00:10:22,745
Why is hello Sammy being printed, instead of hello,
219

219

00:10:22,745  -->  00:10:24,855
this is a global name.
220

220

00:10:24,855  -->  00:10:27,637
Make sure you understand that, and then finally,
221

221

00:10:27,637  -->  00:10:30,014
make sure you understand these last two examples.
222

222

00:10:30,014  -->  00:10:33,393
This one right here, why X equals two,
223

223

00:10:33,393  -->  00:10:35,758
is printed only when you call that function,
224

224

00:10:35,758  -->  00:10:39,535
and then X is still 50 globally, and then you also need
225

225

00:10:39,535  -->  00:10:43,872
to understand after reading all this, this example here
226

226

00:10:43,872  -->  00:10:47,789
why X is 50 and why, since we've called global,
227

227

00:10:48,652  -->  00:10:52,402
X is equal to two resets the global X to two,
228

228

00:10:53,410  -->  00:10:55,572
even outside of the function.
229

229

00:10:55,572  -->  00:10:58,502
Okay, once you understand those examples, you pretty much
230

230

00:10:58,502  -->  00:11:01,275
have a full understanding of scope in Python,
231

231

00:11:01,275  -->  00:11:02,975
and you're ready to go.
232

232

00:11:02,975  -->  00:11:04,982
So take your time with this lecture,
233

233

00:11:04,982  -->  00:11:08,600
this should take you about a whole day if necessary
234

234

00:11:08,600  -->  00:11:10,162
to really understand what's going on.
235

235

00:11:10,162  -->  00:11:11,950
But make sure you take your time to really understand
236

236

00:11:11,950  -->  00:11:14,050
nested statements and scope.
237

237

00:11:14,050  -->  00:11:18,217
Okay, thanks everyone, and I'll see you at the next lecture.
