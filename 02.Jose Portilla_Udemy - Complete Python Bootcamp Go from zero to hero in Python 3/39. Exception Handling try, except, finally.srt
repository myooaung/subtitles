1
1

00:00:01,245  -->  00:00:02,135
<v Instructor>Hello everyone,</v>
2

2

00:00:02,135  -->  00:00:03,870
and welcome to the live coding section
3

3

00:00:03,870  -->  00:00:07,516
of the Errors and Exception Handling part of this course.
4

4

00:00:07,516  -->  00:00:08,508
And now we're going to learn how to use
5

5

00:00:08,508  -->  00:00:10,045
try, except and finally,
6

6

00:00:10,045  -->  00:00:13,498
which we learned about in context in the previous video.
7

7

00:00:13,498  -->  00:00:15,003
Now we're actually going to use them.
8

8

00:00:15,003  -->  00:00:16,028
So let's go ahead and see
9

9

00:00:16,028  -->  00:00:18,524
if we can get an exception to occur, some sort of error.
10

10

00:00:18,524  -->  00:00:20,499
I'm going to say 2 plus,
11

11

00:00:20,499  -->  00:00:22,261
and I'm going to try to add a string to it.
12

12

00:00:22,261  -->  00:00:24,766
Now clearly this is impossible.
13

13

00:00:24,766  -->  00:00:26,365
So I get a Type error.
14

14

00:00:26,365  -->  00:00:29,518
There's unsupported operands + for an integer and a string.
15

15

00:00:29,518  -->  00:00:31,488
Okay, that makes sense.
16

16

00:00:31,488  -->  00:00:33,571
So I could have said try,
17

17

00:00:35,329  -->  00:00:36,734
and now here I'm going to put in code
18

18

00:00:36,734  -->  00:00:39,194
that I think may put an error out.
19

19

00:00:39,194  -->  00:00:40,784
Or some sort of exception.
20

20

00:00:40,784  -->  00:00:43,034
So it says try 2 + 's'
21

21

00:00:44,241  -->  00:00:48,501
and now I'm going to put in the except block.
22

22

00:00:48,501  -->  00:00:52,418
I'm going to say except if there's a TypeError,
23

23

00:00:53,999  -->  00:00:54,832
print
24

24

00:00:56,512  -->  00:00:58,512
"There was a type error!
25

25

00:01:02,770  -->  00:01:04,502
And let's see what happens now.
26

26

00:01:04,502  -->  00:01:07,780
So if you notice, I mention that some of these exceptions
27

27

00:01:07,780  -->  00:01:10,006
are not unconditionally fatal,
28

28

00:01:10,006  -->  00:01:11,776
TypeError is one of them.
29

29

00:01:11,776  -->  00:01:14,467
So TypeError, since it's not unconditionally fatal,
30

30

00:01:14,467  -->  00:01:17,024
the rest of your code can actually still run
31

31

00:01:17,024  -->  00:01:19,279
using this try-and-except format.
32

32

00:01:19,279  -->  00:01:23,259
So what happens is the code tries to do 2 + 's'
33

33

00:01:23,259  -->  00:01:25,969
except there's a TypeError,
34

34

00:01:25,969  -->  00:01:28,529
so it prints There was a type error!
35

35

00:01:28,529  -->  00:01:30,779
And then the finally block,
36

36

00:01:32,028  -->  00:01:34,760
will execute any code after these exceptions.
37

37

00:01:34,760  -->  00:01:36,010
So I'll say finally
38

38

00:01:36,010  -->  00:01:37,260
we'll say print
39

39

00:01:38,959  -->  00:01:41,126
'Finally this was printed'
40

40

00:01:41,997  -->  00:01:43,461
So now if we run this,
41

41

00:01:43,461  -->  00:01:45,387
we get both the except statement
42

42

00:01:45,387  -->  00:01:47,799
and Finally this was printed.
43

43

00:01:47,799  -->  00:01:50,010
So something to note here,
44

44

00:01:50,010  -->  00:01:53,119
is that I don't actually have to specify
45

45

00:01:53,119  -->  00:01:54,497
what error it is,
46

46

00:01:54,497  -->  00:01:56,008
otherwise that would require you memorising
47

47

00:01:56,008  -->  00:01:57,907
the entire list of exceptions,
48

48

00:01:57,907  -->  00:01:59,844
but if you go back to the Jupyter notebook
49

49

00:01:59,844  -->  00:02:00,993
and scroll down,
50

50

00:02:00,993  -->  00:02:03,524
I do have a link there to check out the full list
51

51

00:02:03,524  -->  00:02:06,005
of built-in exceptions in Python.
52

52

00:02:06,005  -->  00:02:07,757
And you can check them out all here,
53

53

00:02:07,757  -->  00:02:10,521
so you can just go ahead and, if you want,
54

54

00:02:10,521  -->  00:02:11,760
generally browse this,
55

55

00:02:11,760  -->  00:02:14,506
but there's no point in memorising all of these.
56

56

00:02:14,506  -->  00:02:17,531
This is just to help you debug your code later on.
57

57

00:02:17,531  -->  00:02:20,258
So if I just say except, I don't actually need to know
58

58

00:02:20,258  -->  00:02:22,514
or guess what kind of error's going to pop up.
59

59

00:02:22,514  -->  00:02:24,508
If I run this cell,
60

60

00:02:24,508  -->  00:02:26,757
you'll notice I get the exact same thing.
61

61

00:02:26,757  -->  00:02:29,513
Okay, so this is how you're usually going to see
62

62

00:02:29,513  -->  00:02:32,013
try-except-finally used in your own code.
63

63

00:02:32,013  -->  00:02:33,397
You're probably not going to type
64

64

00:02:33,397  -->  00:02:37,018
in the actual exceptions that you expect to occur.
65

65

00:02:37,018  -->  00:02:40,753
All right, so let's go ahead and break down exceptions
66

66

00:02:40,753  -->  00:02:44,003
with try-except-else sort of statement.
67

67

00:02:45,858  -->  00:02:47,781
So I'm going to do by trying to open a file.
68

68

00:02:47,781  -->  00:02:49,781
So I'm going to say try,
69

69

00:02:50,938  -->  00:02:52,355
say f = open
70

70

00:02:55,974  -->  00:02:59,224
and I'm going to try to open 'testfile'
71

71

00:03:00,769  -->  00:03:02,778
with being able to write to it,
72

72

00:03:02,778  -->  00:03:04,778
I'm going to say f.write
73

73

00:03:08,863  -->  00:03:10,280
'Test write this'
74

74

00:03:15,497  -->  00:03:18,484
and then what's going to happen is
75

75

00:03:18,484  -->  00:03:21,764
let me go ahead and make sure I don't have this file
76

76

00:03:21,764  -->  00:03:23,000
by adding in some numbers.
77

77

00:03:23,000  -->  00:03:25,511
It's going to try to open a file that's not there.
78

78

00:03:25,511  -->  00:03:27,761
And I'm going to say except
79

79

00:03:31,738  -->  00:03:34,821
print 'Error in writing to the file!'
80

80

00:03:39,235  -->  00:03:41,818
And then I'm going to say else,
81

81

00:03:42,743  -->  00:03:43,576
print
82

82

00:03:45,213  -->  00:03:47,463
'File write was a success!"
83

83

00:03:51,516  -->  00:03:52,797
And if I run this,
84

84

00:03:52,797  -->  00:03:55,325
it says File write was a success.
85

85

00:03:55,325  -->  00:03:56,825
Now that's because
86

86

00:03:58,483  -->  00:03:59,846
when I open a file like this,
87

87

00:03:59,846  -->  00:04:02,429
it'll actually create the file for me.
88

88

00:04:02,429  -->  00:04:05,946
So I open the file, testfile1232,
89

89

00:04:05,946  -->  00:04:08,529
the file didn't exist so Python went ahead
90

90

00:04:08,529  -->  00:04:09,895
and wrote it for me.
91

91

00:04:09,895  -->  00:04:11,790
And now if I look at my folder,
92

92

00:04:11,790  -->  00:04:13,790
I'll have a testfile1232
93

93

00:04:14,773  -->  00:04:16,698
that says test write this,
94

94

00:04:16,698  -->  00:04:18,268
so file write was a success.
95

95

00:04:18,268  -->  00:04:20,269
So that's how you can use else.
96

96

00:04:20,269  -->  00:04:22,278
So when you don't have any exceptions,
97

97

00:04:22,278  -->  00:04:24,397
else will help you know that.
98

98

00:04:24,397  -->  00:04:26,233
So it says try this,
99

99

00:04:26,233  -->  00:04:27,747
except if there's an error,
100

100

00:04:27,747  -->  00:04:28,755
print out an error,
101

101

00:04:28,755  -->  00:04:31,506
else if there's no exceptions and everything went well,
102

102

00:04:31,506  -->  00:04:33,732
execute this code block.
103

103

00:04:33,732  -->  00:04:35,762
Now I'm going to try to induce an error
104

104

00:04:35,762  -->  00:04:37,242
by saying read.
105

105

00:04:37,242  -->  00:04:39,756
So remember from file opening and closing,
106

106

00:04:39,756  -->  00:04:40,612
if I just put R,
107

107

00:04:40,612  -->  00:04:42,286
that means I can only read the file.
108

108

00:04:42,286  -->  00:04:44,008
I don't have write permission.
109

109

00:04:44,008  -->  00:04:47,498
So now let's see what happens if I run this cell.
110

110

00:04:47,498  -->  00:04:50,856
No, I have an error in writing to the file.
111

111

00:04:50,856  -->  00:04:53,743
Great, so we only printed a statement
112

112

00:04:53,743  -->  00:04:55,359
and the code still ran.
113

113

00:04:55,359  -->  00:04:57,039
So we're able to continue doing actions
114

114

00:04:57,039  -->  00:04:58,517
and running code blocks,
115

115

00:04:58,517  -->  00:05:00,268
even if I do have an error occur,
116

116

00:05:00,268  -->  00:05:01,488
which is really nice.
117

117

00:05:01,488  -->  00:05:03,723
So it's super useful when you have to account
118

118

00:05:03,723  -->  00:05:05,850
for possible input errors in your code.
119

119

00:05:05,850  -->  00:05:08,756
So you can be prepared for the error and keep running code,
120

120

00:05:08,756  -->  00:05:10,050
instead of your code just breaking
121

121

00:05:10,050  -->  00:05:13,515
the minute it sees some sort of exception occur.
122

122

00:05:13,515  -->  00:05:15,747
So we could have also just said,
123

123

00:05:15,747  -->  00:05:17,772
except if we weren't sure
124

124

00:05:17,772  -->  00:05:19,759
if a certain exception were to occur.
125

125

00:05:19,759  -->  00:05:24,017
So for instance I know that this sort of error
126

126

00:05:24,017  -->  00:05:25,850
is called an IO error,
127

127

00:05:26,772  -->  00:05:28,458
and that's fine.
128

128

00:05:28,458  -->  00:05:30,381
But I can also just put except,
129

129

00:05:30,381  -->  00:05:32,027
I just want to make that clear,
130

130

00:05:32,027  -->  00:05:33,010
that you don't actually have to put in
131

131

00:05:33,010  -->  00:05:35,901
what kind of error will actually occur.
132

132

00:05:35,901  -->  00:05:38,318
All right, now continuing on.
133

133

00:05:39,993  -->  00:05:42,124
Right now we have this else statement
134

134

00:05:42,124  -->  00:05:44,791
that will execute only if errors
135

135

00:05:46,437  -->  00:05:48,241
don't occur, right?
136

136

00:05:48,241  -->  00:05:50,010
But what if we wanted to continue doing stuff
137

137

00:05:50,010  -->  00:05:52,009
even if an error occurred?
138

138

00:05:52,009  -->  00:05:54,278
So that's where the finally block of code will run.
139

139

00:05:54,278  -->  00:05:57,015
So that will run regardless if there's an exception.
140

140

00:05:57,015  -->  00:05:59,038
Right now we have try-except-else,
141

141

00:05:59,038  -->  00:06:00,407
so it's going to try some code,
142

142

00:06:00,407  -->  00:06:02,647
if there's an exception it'll do this.
143

143

00:06:02,647  -->  00:06:06,993
Otherwise, or else, it'll do that code block.
144

144

00:06:06,993  -->  00:06:09,724
But what if we wanted to do this code block
145

145

00:06:09,724  -->  00:06:11,790
regardless if there's an exception or not?
146

146

00:06:11,790  -->  00:06:14,002
So we're going to use finally to do that.
147

147

00:06:14,002  -->  00:06:16,002
So I'm going to say try.
148

148

00:06:17,247  -->  00:06:20,164
Let's say try this code right here,
149

149

00:06:21,490  -->  00:06:22,740
and say finally
150

150

00:06:25,261  -->  00:06:26,094
print
151

151

00:06:27,966  -->  00:06:29,216
'Always execute
152

152

00:06:32,371  -->  00:06:34,121
finally code blocks!'
153

153

00:06:37,977  -->  00:06:39,077
So if you notice,
154

154

00:06:39,077  -->  00:06:41,020
even if there was an error that occurred,
155

155

00:06:41,020  -->  00:06:43,388
finally was still able to print
156

156

00:06:43,388  -->  00:06:45,759
Always execute finally code blocks!
157

157

00:06:45,759  -->  00:06:47,527
So what happened here?
158

158

00:06:47,527  -->  00:06:49,307
So I had to try this,
159

159

00:06:49,307  -->  00:06:50,795
I got an error,
160

160

00:06:50,795  -->  00:06:53,276
and then finally still occurred
161

161

00:06:53,276  -->  00:06:56,257
even if there was an IO error there.
162

162

00:06:56,257  -->  00:06:58,257
So I can write an except
163

163

00:07:01,751  -->  00:07:05,234
I'll do it for any error and print,
164

164

00:07:05,234  -->  00:07:06,984
'There was an error!'
165

165

00:07:08,260  -->  00:07:10,033
and let's see what happens now.
166

166

00:07:10,033  -->  00:07:13,032
So if you notice, this except block of code
167

167

00:07:13,032  -->  00:07:15,944
basically eliminates Python's built-in output
168

168

00:07:15,944  -->  00:07:19,136
for exception handling, or the errors popping up.
169

169

00:07:19,136  -->  00:07:20,876
So you can write in your own except
170

170

00:07:20,876  -->  00:07:22,138
and print There was an error!,
171

171

00:07:22,138  -->  00:07:23,514
so your code's a little cleaner.
172

172

00:07:23,514  -->  00:07:27,017
Then have a finally block that will always execute.
173

173

00:07:27,017  -->  00:07:28,770
All right, so what we're going to do
174

174

00:07:28,770  -->  00:07:33,541
is use this in conjunction with asking a user for input.
175

175

00:07:33,541  -->  00:07:35,998
So I'm going to say,
176

176

00:07:35,998  -->  00:07:37,248
make a function
177

177

00:07:38,170  -->  00:07:39,918
let me zoom in a bit here,
178

178

00:07:39,918  -->  00:07:41,993
make a function, def,
179

179

00:07:41,993  -->  00:07:44,660
and I'm going to call it askint,
180

180

00:07:46,505  -->  00:07:48,260
and what it's going to do
181

181

00:07:48,260  -->  00:07:49,593
is it's going to
182

182

00:07:51,290  -->  00:07:52,123
try
183

183

00:07:53,515  -->  00:07:55,265
to set a variable val
184

184

00:07:56,280  -->  00:07:57,863
equal to raw_input,
185

185

00:08:00,484  -->  00:08:03,020
I'm using raw_input because I'm using Python 2,
186

186

00:08:03,020  -->  00:08:06,485
if you're using Python 3 you may just use input.
187

187

00:08:06,485  -->  00:08:10,152
I'm going to say 'Please enter an integer: '
188

188

00:08:15,995  -->  00:08:18,518
okay, and what I'm going to try to do after that
189

189

00:08:18,518  -->  00:08:19,601
is convert it
190

190

00:08:21,443  -->  00:08:22,610
to an integer.
191

191

00:08:24,007  -->  00:08:26,771
I'm going to put an except statement,
192

192

00:08:26,771  -->  00:08:28,021
that says print
193

193

00:08:29,845  -->  00:08:33,345
'Looks like you did not enter an integer!'
194

194

00:08:38,495  -->  00:08:42,211
then after that I'm going to say finally,
195

195

00:08:42,211  -->  00:08:43,044
print
196

196

00:08:45,002  -->  00:08:47,085
'Finally block executed!'
197

197

00:08:54,739  -->  00:08:57,640
And then I'm going to say
198

198

00:08:57,640  -->  00:08:58,950
print the val.
199

199

00:08:58,950  -->  00:09:02,869
Okay, so let me zoom out now so we can see the whole thing.
200

200

00:09:02,869  -->  00:09:05,248
All right, so I have my function here,
201

201

00:09:05,248  -->  00:09:07,420
askint, it's going to try
202

202

00:09:07,420  -->  00:09:10,617
to take whatever raw_input the user puts in,
203

203

00:09:10,617  -->  00:09:13,361
convert it to an integer and set that equal to val.
204

204

00:09:13,361  -->  00:09:15,224
If there's an exception that occurs,
205

205

00:09:15,224  -->  00:09:17,946
it's going to occur because I wasn't able to convert
206

206

00:09:17,946  -->  00:09:20,405
whatever they put in as an integer.
207

207

00:09:20,405  -->  00:09:21,244
So I'm going to print
208

208

00:09:21,244  -->  00:09:23,043
Looks like you did not enter an integer!
209

209

00:09:23,043  -->  00:09:25,446
Finally, whether or not there's an exception,
210

210

00:09:25,446  -->  00:09:28,013
I'm going to print Finally block executed!
211

211

00:09:28,013  -->  00:09:30,598
And then I'm going to print the val.
212

212

00:09:30,598  -->  00:09:32,336
So let's see if this works.
213

213

00:09:32,336  -->  00:09:34,503
Let's go ahead and askint,
214

214

00:09:36,485  -->  00:09:38,014
close parentheses, there's no arguments,
215

215

00:09:38,014  -->  00:09:41,006
I run it, it says, Please enter an integer:.
216

216

00:09:41,006  -->  00:09:42,673
I'm going to enter 3
217

217

00:09:43,746  -->  00:09:45,187
Finally block executed!
218

218

00:09:45,187  -->  00:09:46,490
Val was equal to 3.
219

219

00:09:46,490  -->  00:09:48,011
All right, perfect.
220

220

00:09:48,011  -->  00:09:49,861
So let's try this again.
221

221

00:09:49,861  -->  00:09:51,364
I'm going to say askint,
222

222

00:09:51,364  -->  00:09:52,382
it says Please enter an integer:
223

223

00:09:52,382  -->  00:09:54,254
Now let's say I was confused
224

224

00:09:54,254  -->  00:09:55,837
and I entered five.
225

225

00:09:57,489  -->  00:09:59,500
So if you notice here,
226

226

00:09:59,500  -->  00:10:02,516
it says Looks like you did not enter an integer!
227

227

00:10:02,516  -->  00:10:04,959
Finally block executed!
228

228

00:10:04,959  -->  00:10:07,304
And we have an extra error
229

229

00:10:07,304  -->  00:10:11,012
because we're trying to locate the variable, val,
230

230

00:10:11,012  -->  00:10:13,125
before it was actually assigned.
231

231

00:10:13,125  -->  00:10:15,022
And that's because this prints val
232

232

00:10:15,022  -->  00:10:18,535
is outside the finally code block.
233

233

00:10:18,535  -->  00:10:19,368
Okay,
234

234

00:10:20,243  -->  00:10:21,767
so we got an error
235

235

00:10:21,767  -->  00:10:23,243
when we're trying to print val,
236

236

00:10:23,243  -->  00:10:25,001
notice because it's never properly assigned.
237

237

00:10:25,001  -->  00:10:26,266
So we can go ahead and remedy this
238

238

00:10:26,266  -->  00:10:28,271
by asking the user and checking to make sure
239

239

00:10:28,271  -->  00:10:31,017
the input type is an integer.
240

240

00:10:31,017  -->  00:10:33,507
So what I'm going to do now
241

241

00:10:33,507  -->  00:10:35,340
is in my except block,
242

242

00:10:37,007  -->  00:10:41,174
I'm going to say val = int ,
243

243

00:10:44,647  -->  00:10:45,480
I'm going to say
244

244

00:10:45,480  -->  00:10:49,647
.
245

245

00:10:57,519  -->  00:10:59,279
Okay, so let's break down what the code's doing
246

246

00:10:59,279  -->  00:11:03,009
and I'll space it out so it's a little more clear.
247

247

00:11:03,009  -->  00:11:05,274
So now my function, what it's going to do,
248

248

00:11:05,274  -->  00:11:08,892
is it's going to try to take the raw_input a user puts in,
249

249

00:11:08,892  -->  00:11:11,699
convert it to an integer and set that equal to val.
250

250

00:11:11,699  -->  00:11:13,504
If there's an exception that occurs,
251

251

00:11:13,504  -->  00:11:16,315
it's going to say Looks like you did not enter an integer
252

252

00:11:16,315  -->  00:11:17,784
and then it's going to do it again.
253

253

00:11:17,784  -->  00:11:20,380
It's going to try again, Please enter an integer,
254

254

00:11:20,380  -->  00:11:23,231
raw_input converted to an integer.
255

255

00:11:23,231  -->  00:11:24,320
Finally it's going to print
256

256

00:11:24,320  -->  00:11:25,599
Finally block executed!
257

257

00:11:25,599  -->  00:11:26,766
Print val.
258

258

00:11:26,766  -->  00:11:28,028
Okay, so I ran that.
259

259

00:11:28,028  -->  00:11:29,770
Let's go ahead and see what happens.
260

260

00:11:29,770  -->  00:11:31,687
Askint, put an integer,
261

261

00:11:32,743  -->  00:11:34,768
I'm going to put in five
262

262

00:11:34,768  -->  00:11:37,158
It says, Looks like you did not enter an integer!
263

263

00:11:37,158  -->  00:11:38,771
Try again - Please enter an integer:
264

264

00:11:38,771  -->  00:11:40,477
Now if I put in 5,
265

265

00:11:40,477  -->  00:11:41,985
everything works.
266

266

00:11:41,985  -->  00:11:42,818
Great.
267

267

00:11:44,098  -->  00:11:46,348
So that only did one check.
268

268

00:11:47,245  -->  00:11:50,264
If you notice, if I try this again,
269

269

00:11:50,264  -->  00:11:52,485
and mess up twice,
270

270

00:11:52,485  -->  00:11:54,759
So askint, Please enter an integer:
271

271

00:11:54,759  -->  00:11:56,270
let's say I put in 5,
272

272

00:11:56,270  -->  00:11:58,264
it says Try again- Please enter an integer:
273

273

00:11:58,264  -->  00:11:59,268
let's say I put in 5 again,
274

274

00:11:59,268  -->  00:12:01,252
we're going to get an error now.
275

275

00:12:01,252  -->  00:12:02,761
A value error.
276

276

00:12:02,761  -->  00:12:04,010
Right? Because it's not able
277

277

00:12:04,010  -->  00:12:07,015
to convert five into an integer.
278

278

00:12:07,015  -->  00:12:11,514
So what can I do to try to keep continually checking?
279

279

00:12:11,514  -->  00:12:12,766
Well, hopefully your mind is thinking
280

280

00:12:12,766  -->  00:12:14,226
about a while loop, right?
281

281

00:12:14,226  -->  00:12:18,218
I want to do this statement over and over again,
282

282

00:12:18,218  -->  00:12:20,510
raw_input, check for an integer
283

283

00:12:20,510  -->  00:12:23,111
until the user actually puts in something correct.
284

284

00:12:23,111  -->  00:12:25,489
So I'm going to start again,
285

285

00:12:25,489  -->  00:12:29,406
I'm going to say def askint :
286

286

00:12:30,341  -->  00:12:32,091
and I'm going to say,
287

287

00:12:33,767  -->  00:12:34,684
while True:
288

288

00:12:36,497  -->  00:12:39,580
try to set val equal to that integer,
289

289

00:12:41,387  -->  00:12:42,387
raw_input of
290

290

00:12:44,769  -->  00:12:46,769
please enter an integer:
291

291

00:12:52,977  -->  00:12:54,451
if there's an exception that occurs,
292

292

00:12:54,451  -->  00:12:55,951
I say except print
293

293

00:12:58,241  -->  00:13:00,241
'Looks like you didn't--
294

294

00:13:01,741  -->  00:13:02,574
whoops,
295

295

00:13:03,743  -->  00:13:05,511
let's make this a double quote
296

296

00:13:05,511  -->  00:13:06,535
so I don't have to worry about
297

297

00:13:06,535  -->  00:13:08,257
that's in quote inside,
298

298

00:13:08,257  -->  00:13:10,736
Looks like you didn't
299

299

00:13:10,736  -->  00:13:12,153
enter an integer!
300

300

00:13:16,505  -->  00:13:19,005
And then I'm going to continue
301

301

00:13:20,653  -->  00:13:21,486
else,
302

302

00:13:23,247  -->  00:13:24,924
so remember else happens
303

303

00:13:24,924  -->  00:13:26,510
when the try is actually correct,
304

304

00:13:26,510  -->  00:13:28,260
so I'm going to print
305

305

00:13:30,234  -->  00:13:32,734
'Correct, that is an integer!'
306

306

00:13:40,111  -->  00:13:41,305
and then once I know it's correct,
307

307

00:13:41,305  -->  00:13:44,504
I'm just going to break out of that finally loop.
308

308

00:13:44,504  -->  00:13:46,278
Or, excuse me, that while loop.
309

309

00:13:46,278  -->  00:13:48,264
Then finally after that,
310

310

00:13:48,264  -->  00:13:52,264
I'm going to print again Finally block executed!
311

311

00:13:58,239  -->  00:14:01,260
And then outside of this I'm going to print
312

312

00:14:01,260  -->  00:14:02,093
the value.
313

313

00:14:03,214  -->  00:14:04,047
Okay.
314

314

00:14:06,110  -->  00:14:08,841
So let's break down real quickly what's happening here.
315

315

00:14:08,841  -->  00:14:10,519
I'm going to say while true,
316

316

00:14:10,519  -->  00:14:12,743
so basically forever,
317

317

00:14:12,743  -->  00:14:16,968
try to get the input here the first question.
318

318

00:14:16,968  -->  00:14:19,888
So this is like the very first output.
319

319

00:14:19,888  -->  00:14:21,782
It says Please enter an integer:
320

320

00:14:21,782  -->  00:14:24,013
and let's say there's an exception that occurs,
321

321

00:14:24,013  -->  00:14:25,998
I print Looks like you didn't enter an integer!
322

322

00:14:25,998  -->  00:14:26,831
Continue
323

323

00:14:27,985  -->  00:14:29,558
And then it comes back up here,
324

324

00:14:29,558  -->  00:14:30,963
tries it again
325

325

00:14:30,963  -->  00:14:32,589
except, continue--
326

326

00:14:32,589  -->  00:14:34,303
so this is going to keep going forever
327

327

00:14:34,303  -->  00:14:38,480
until we get a correct input where there's no error.
328

328

00:14:38,480  -->  00:14:39,752
And it's going to say else
329

329

00:14:39,752  -->  00:14:41,520
print Correct, that is an integer!
330

330

00:14:41,520  -->  00:14:44,769
And that will break that while loop there,
331

331

00:14:44,769  -->  00:14:46,038
and then it's going to say
332

332

00:14:46,038  -->  00:14:48,766
Finally print the code executed, print val.
333

333

00:14:48,766  -->  00:14:51,499
So let's in and see if this works.
334

334

00:14:51,499  -->  00:14:55,768
I'm going to say askint
335

335

00:14:55,768  -->  00:14:56,998
Please enter an integer:
336

336

00:14:56,998  -->  00:14:59,017
I'm going to put e, which I know it's not.
337

337

00:14:59,017  -->  00:15:01,230
I'm going to put r.
338

338

00:15:01,230  -->  00:15:03,000
So if you notice
339

339

00:15:03,000  -->  00:15:05,571
my finally block is always being executed
340

340

00:15:05,571  -->  00:15:07,600
even though I'm having these errors.
341

341

00:15:07,600  -->  00:15:11,019
But the second I put in a correct number,
342

342

00:15:11,019  -->  00:15:12,290
with that else statement,
343

343

00:15:12,290  -->  00:15:13,760
it says Correct, that is an integer!
344

344

00:15:13,760  -->  00:15:16,785
And then the last time the finally block is executed.
345

345

00:15:16,785  -->  00:15:20,972
All right, so that's actually it for this video lecture.
346

346

00:15:20,972  -->  00:15:25,001
So we're just going to go quickly over everything we did.
347

347

00:15:25,001  -->  00:15:26,991
So try-except-finally,
348

348

00:15:26,991  -->  00:15:28,464
the very first thing we did
349

349

00:15:28,464  -->  00:15:31,455
was put in a TypeError exception.
350

350

00:15:31,455  -->  00:15:34,505
So two plus a string, that didn't make any sense.
351

351

00:15:34,505  -->  00:15:37,009
So we notice we could use try
352

352

00:15:37,009  -->  00:15:39,509
so I'm trying to execute this block of code
353

353

00:15:39,509  -->  00:15:41,524
except if there's any sort of exception,
354

354

00:15:41,524  -->  00:15:43,778
I print Finally there was a type error!
355

355

00:15:43,778  -->  00:15:46,512
Excuse me, I print There was a type error!
356

356

00:15:46,512  -->  00:15:49,581
Then finally this block of code will always execute
357

357

00:15:49,581  -->  00:15:54,249
whether or not there is an exception that occurs.
358

358

00:15:54,249  -->  00:15:56,042
Again here I said try
359

359

00:15:56,042  -->  00:15:58,010
I said open this test file.
360

360

00:15:58,010  -->  00:16:02,528
Remember we switched from writing to reading permissions?
361

361

00:16:02,528  -->  00:16:04,284
So if there was an error that occurred,
362

362

00:16:04,284  -->  00:16:05,573
I said There was an error!
363

363

00:16:05,573  -->  00:16:08,997
Finally always executes this code block.
364

364

00:16:08,997  -->  00:16:10,875
Then we started exploring how to deal
365

365

00:16:10,875  -->  00:16:13,002
with user inputs that are incorrect,
366

366

00:16:13,002  -->  00:16:14,258
so we made this function,
367

367

00:16:14,258  -->  00:16:16,496
in this case I say try,
368

368

00:16:16,496  -->  00:16:18,086
take the raw_input,
369

369

00:16:18,086  -->  00:16:21,005
try to convert it to an integer and set that as val,
370

370

00:16:21,005  -->  00:16:22,629
is there any exception,
371

371

00:16:22,629  -->  00:16:25,499
then I print, Looks like you did not enter an integer!
372

372

00:16:25,499  -->  00:16:27,764
Put raw_input again, try it again,
373

373

00:16:27,764  -->  00:16:29,261
but this only works twice, right?
374

374

00:16:29,261  -->  00:16:30,764
Since it's not in the while loop.
375

375

00:16:30,764  -->  00:16:33,008
And then finally the block's executed
376

376

00:16:33,008  -->  00:16:34,841
and then we print val.
377

377

00:16:36,990  -->  00:16:39,527
And again if you mess up twice in a row,
378

378

00:16:39,527  -->  00:16:41,649
we're still getting a value error there.
379

379

00:16:41,649  -->  00:16:43,912
So how do we continue doing this forever?
380

380

00:16:43,912  -->  00:16:45,509
Well, that's where the while loop comes in.
381

381

00:16:45,509  -->  00:16:47,264
So we say, while true,
382

382

00:16:47,264  -->  00:16:48,985
try this block,
383

383

00:16:48,985  -->  00:16:50,380
if there's an exception,
384

384

00:16:50,380  -->  00:16:52,008
print that and continue.
385

385

00:16:52,008  -->  00:16:53,778
Which means it's going to try it again.
386

386

00:16:53,778  -->  00:16:55,517
And it's going to keep going
387

387

00:16:55,517  -->  00:16:57,027
and then we can put an else block
388

388

00:16:57,027  -->  00:16:59,258
which says if there's no exception there,
389

389

00:16:59,258  -->  00:17:01,192
then print Correct that's an integer
390

390

00:17:01,192  -->  00:17:02,998
and then we break out of that loop.
391

391

00:17:02,998  -->  00:17:05,264
Then finally this always executes
392

392

00:17:05,264  -->  00:17:07,293
whether or not there is an exception.
393

393

00:17:07,293  -->  00:17:10,499
So you notice here even when there was an error here
394

394

00:17:10,499  -->  00:17:12,514
and I say Looks like you didn't enter an integer,
395

395

00:17:12,514  -->  00:17:15,764
the finally block was always executed every single time.
396

396

00:17:15,764  -->  00:17:17,012
And then at the end,
397

397

00:17:17,012  -->  00:17:18,266
when I did get it right,
398

398

00:17:18,266  -->  00:17:20,255
it says Correct, that is an integer!
399

399

00:17:20,255  -->  00:17:22,492
That else block executed
400

400

00:17:22,492  -->  00:17:25,992
and then I printed Finally block executed!
401

401

00:17:26,975  -->  00:17:27,975
Okay, great.
402

402

00:17:28,846  -->  00:17:32,009
So that's it for this lecture.
403

403

00:17:32,009  -->  00:17:35,025
Go ahead and explore try-except-finally a little more.
404

404

00:17:35,025  -->  00:17:38,261
It's going to be super useful in your beginning code
405

405

00:17:38,261  -->  00:17:39,773
when you're trying to handle user input
406

406

00:17:39,773  -->  00:17:42,011
that you think may be incorrect.
407

407

00:17:42,011  -->  00:17:45,498
But later on you'll use it more and more.
408

408

00:17:45,498  -->  00:17:47,156
Just be careful with it, though,
409

409

00:17:47,156  -->  00:17:48,511
'cause you don't want try statements
410

410

00:17:48,511  -->  00:17:49,987
everywhere in your code.
411

411

00:17:49,987  -->  00:17:51,266
Otherwise it gets harder and harder
412

412

00:17:51,266  -->  00:17:53,044
to actually debug your code
413

413

00:17:53,044  -->  00:17:56,500
unless you put in very clear print statements
414

414

00:17:56,500  -->  00:17:57,784
for your exceptions.
415

415

00:17:57,784  -->  00:18:00,222
So you can imagine if your code's kind of always running
416

416

00:18:00,222  -->  00:18:01,305
these finally blocks
417

417

00:18:01,305  -->  00:18:03,510
and you have a tonne of try blocks in there.
418

418

00:18:03,510  -->  00:18:04,522
It might be hard to pinpoint
419

419

00:18:04,522  -->  00:18:06,768
where the actual error is taking place,
420

420

00:18:06,768  -->  00:18:08,535
if all your print statements are:
421

421

00:18:08,535  -->  00:18:11,516
There was an error or something for the exception blocks.
422

422

00:18:11,516  -->  00:18:13,496
So this is super powerful,
423

423

00:18:13,496  -->  00:18:14,764
and it's a really great tool,
424

424

00:18:14,764  -->  00:18:16,267
but just be careful with it
425

425

00:18:16,267  -->  00:18:20,499
and make sure you use it well in your code.
426

426

00:18:20,499  -->  00:18:24,381
Okay, thanks everyone and I'll see you at the next lecture.
