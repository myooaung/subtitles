WEBVTT
1
1

00:00:00.696  -->  00:00:02.802
<v Narrator>Hello and welcome to the</v>
2

2

00:00:02.802  -->  00:00:06.295
Iterators and Generators section of this course.
3

3

00:00:06.295  -->  00:00:07.989
So in this section of the course, we'll be learning
4

4

00:00:07.989  -->  00:00:10.834
the difference between iteration and generation.
5

5

00:00:10.834  -->  00:00:12.826
We'll get started with a brief presentation on just
6

6

00:00:12.826  -->  00:00:16.913
the overall ideas of iteration versus generation.
7

7

00:00:16.913  -->  00:00:20.632
So, like I mentioned, here we're going to be discussing
8

8

00:00:20.632  -->  00:00:22.906
iteration and generation in Python and how to construct
9

9

00:00:22.906  -->  00:00:27.033
our own generators with the yield statement.
10

10

00:00:27.033  -->  00:00:29.894
So we've touched on this topic in the past when discussing
11

11

00:00:29.894  -->  00:00:32.663
the range function in Python 2 and the similar
12

12

00:00:32.663  -->  00:00:34.977
Xrange function, with the difference between
13

13

00:00:34.977  -->  00:00:39.144
range and Xrange was that the Xrange was a generator.
14

14

00:00:40.011  -->  00:00:41.792
So let's start by creating generators.
15

15

00:00:41.792  -->  00:00:43.908
We've learned how to create functions with a def
16

16

00:00:43.908  -->  00:00:45.609
and the return statement.
17

17

00:00:45.609  -->  00:00:47.490
What generator functions allow us to do is
18

18

00:00:47.490  -->  00:00:50.367
write a function that can send back a value and then
19

19

00:00:50.367  -->  00:00:53.826
later resume to pick up right where it left off.
20

20

00:00:53.826  -->  00:00:56.159
So this type of function is a generator in Python
21

21

00:00:56.159  -->  00:00:59.866
and allows us to generate a sequence of values over time.
22

22

00:00:59.866  -->  00:01:02.172
The main difference in syntax that you'll see
23

23

00:01:02.172  -->  00:01:03.784
is the use of a yield statement
24

24

00:01:03.784  -->  00:01:05.403
instead of a return statement.
25

25

00:01:05.403  -->  00:01:08.684
Otherwise, you'll see that a normal function that iterates
26

26

00:01:08.684  -->  00:01:11.749
versus a generator function will actually look
27

27

00:01:11.749  -->  00:01:13.742
really similar, the only difference being
28

28

00:01:13.742  -->  00:01:16.625
the return and the yield statement.
29

29

00:01:16.625  -->  00:01:18.079
So how do generators work?
30

30

00:01:18.079  -->  00:01:20.570
In most aspects, a generator function, like I said,
31

31

00:01:20.570  -->  00:01:23.475
appears super similar to a normal function.
32

32

00:01:23.475  -->  00:01:26.476
The main difference is when a generator function is compiled
33

33

00:01:26.476  -->  00:01:30.078
they become an object that supports an iteration protocol.
34

34

00:01:30.078  -->  00:01:33.322
So that means when they're called in your code,
35

35

00:01:33.322  -->  00:01:35.735
they don't actually return a value and then exit.
36

36

00:01:35.735  -->  00:01:38.323
So you can think of range just returned the list,
37

37

00:01:38.323  -->  00:01:39.635
and then exited.
38

38

00:01:39.635  -->  00:01:42.227
The generator functions will automatically suspend
39

39

00:01:42.227  -->  00:01:45.821
and resume their execution, and state around the last point
40

40

00:01:45.821  -->  00:01:47.794
of value generation.
41

41

00:01:47.794  -->  00:01:49.604
And the main advantage here is that instead of having
42

42

00:01:49.604  -->  00:01:52.623
to compute an entire series of values up front,
43

43

00:01:52.623  -->  00:01:54.705
such as that entire range list,
44

44

00:01:54.705  -->  00:01:57.230
the generator functions can be suspended,
45

45

00:01:57.230  -->  00:01:59.708
and this feature is known as state suspension.
46

46

00:01:59.708  -->  00:02:00.896
And we'll explore that later on
47

47

00:02:00.896  -->  00:02:03.396
in this section of the course.
48

48

00:02:04.519  -->  00:02:05.977
So why use generators?
49

49

00:02:05.977  -->  00:02:07.487
Generators are best for calculating
50

50

00:02:07.487  -->  00:02:10.306
very large sets of results, particularly in calculations
51

51

00:02:10.306  -->  00:02:12.407
that involve loops themselves,
52

52

00:02:12.407  -->  00:02:14.240
in cases where we don't want to allocate the memory
53

53

00:02:14.240  -->  00:02:16.656
for all the results at the same time,
54

54

00:02:16.656  -->  00:02:19.557
just as I mentioned back in the range lecture.
55

55

00:02:19.557  -->  00:02:22.682
And like I mentioned, we've noted before that a lot of the
56

56

00:02:22.682  -->  00:02:25.529
functions in the Standard Library that return lists
57

57

00:02:25.529  -->  00:02:29.113
in Python 2, such as range, have been modified to return
58

58

00:02:29.113  -->  00:02:33.280
generators in Python 3 because generators are a better way
59

59

00:02:34.414  -->  00:02:36.977
of creating those objects.
60

60

00:02:36.977  -->  00:02:40.644
So let's go ahead and jump to the live code.
