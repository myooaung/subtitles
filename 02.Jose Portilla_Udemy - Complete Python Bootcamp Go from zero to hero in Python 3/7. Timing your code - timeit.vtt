WEBVTT
1
1

00:00:01.331  -->  00:00:03.409
<v Narrator>Hello everyone, and welcome to the</v>
2

2

00:00:03.409  -->  00:00:05.457
Timeit Module lecture.
3

3

00:00:05.457  -->  00:00:07.682
So in this lecture we'll learn about timing your code
4

4

00:00:07.682  -->  00:00:11.025
and how to use the timeit module to do that.
5

5

00:00:11.025  -->  00:00:14.372
So, first thing you're gonna want to do is check out
6

6

00:00:14.372  -->  00:00:15.998
this Jupyter notebook.
7

7

00:00:15.998  -->  00:00:19.432
We go over two methods: importing timeit, which is how
8

8

00:00:19.432  -->  00:00:22.465
you would use the module in standard Python,
9

9

00:00:22.465  -->  00:00:25.947
and then we'll also look at a bit of magic functions
10

10

00:00:25.947  -->  00:00:28.535
that we can use in Jupyter with iPython.
11

11

00:00:28.535  -->  00:00:32.702
Okay, so let's go ahead and hop over to the live code.
12

12

00:00:34.417  -->  00:00:36.972
So the first thing you're gonna need to do is
13

13

00:00:36.972  -->  00:00:37.805
import
14

14

00:00:38.882  -->  00:00:40.523
timeit.
15

15

00:00:40.523  -->  00:00:44.858
Alright, so now that it's imported, what we're gonna do is
16

16

00:00:44.858  -->  00:00:48.876
use timeit to time various methods of creating the string
17

17

00:00:48.876  -->  00:00:50.112
that looks like this,
18

18

00:00:50.112  -->  00:00:52.798
So I want to create a string that looks zero dash one
19

19

00:00:52.798  -->  00:00:56.798
dash two dash three dash all the way to dash 99.
20

20

00:00:59.661  -->  00:01:01.363
So we're gonna use a bunch of different methods to
21

21

00:01:01.363  -->  00:01:05.507
make that string, so one way we can do it,
22

22

00:01:05.507  -->  00:01:06.507
is by saying
23

23

00:01:11.526  -->  00:01:12.359
join
24

24

00:01:14.799  -->  00:01:15.716
oops, .join
25

25

00:01:20.609  -->  00:01:21.692
the string N,
26

26

00:01:23.417  -->  00:01:25.000
for N in range 100.
27

27

00:01:31.072  -->  00:01:31.905
Okay.
28

28

00:01:31.905  -->  00:01:33.460
So that's exactly the kind of string we want.
29

29

00:01:33.460  -->  00:01:34.900
So what's this doing here?
30

30

00:01:34.900  -->  00:01:38.913
It's saying for every N in that range, zero to 99,
31

31

00:01:38.913  -->  00:01:42.354
go ahead and convert that integer to a string,
32

32

00:01:42.354  -->  00:01:44.971
and then join it with a dash in between.
33

33

00:01:44.971  -->  00:01:49.113
Alright so what we want to do is now time this method.
34

34

00:01:49.113  -->  00:01:51.433
So now that we've imported the timeit module,
35

35

00:01:51.433  -->  00:01:53.600
what we're gonna do is say
36

36

00:01:56.340  -->  00:01:57.423
timeit.timeit
37

37

00:01:59.599  -->  00:02:04.130
and what you do is you pass your entire expression,
38

38

00:02:04.130  -->  00:02:07.797
whatever it happens to be, as a string here.
39

39

00:02:11.646  -->  00:02:14.276
And then the second argument is the number of times
40

40

00:02:14.276  -->  00:02:15.728
you'll want to run this.
41

41

00:02:15.728  -->  00:02:19.679
So I'm gonna run it, let's say, 10,000 times.
42

42

00:02:19.679  -->  00:02:21.921
If you don't do enough times, it will be too fast
43

43

00:02:21.921  -->  00:02:25.028
to get an accurate comparison to different methods.
44

44

00:02:25.028  -->  00:02:28.695
Okay, so this method took about .248 seconds
45

45

00:02:31.928  -->  00:02:34.187
and it's gonna be different depending on how fast
46

46

00:02:34.187  -->  00:02:35.788
your computer is.
47

47

00:02:35.788  -->  00:02:37.583
So don't be worried if you don't get numbers
48

48

00:02:37.583  -->  00:02:39.441
exactly like mine.
49

49

00:02:39.441  -->  00:02:42.154
Now let's try doing a different method
50

50

00:02:42.154  -->  00:02:43.692
with list comprehension.
51

51

00:02:43.692  -->  00:02:47.454
So we basically did a four loop in essence here,
52

52

00:02:47.454  -->  00:02:50.337
and what we're gonna do now is try list comprehension.
53

53

00:02:50.337  -->  00:02:54.504
So I'm gonna say try joining here and add the brackets
54

54

00:02:56.430  -->  00:02:58.616
to make it the list comprehension.
55

55

00:02:58.616  -->  00:03:01.443
Let's go ahead and run this, let's actually run it,
56

56

00:03:01.443  -->  00:03:04.096
let's run this as a separate line so we can keep everything
57

57

00:03:04.096  -->  00:03:04.929
in site.
58

58

00:03:06.514  -->  00:03:08.880
So I'll run it as a list comprehension here,
59

59

00:03:08.880  -->  00:03:11.618
and notice it was a little bit faster,
60

60

00:03:11.618  -->  00:03:14.910
and what we're gonna do now, finally, is try using
61

61

00:03:14.910  -->  00:03:16.327
the map function.
62

62

00:03:19.697  -->  00:03:22.499
So what I'm gonna do is say
63

63

00:03:22.499  -->  00:03:26.416
.join, and I'm going to map the string function
64

64

00:03:30.651  -->  00:03:34.484
to every number from the range zero up to 100,
65

65

00:03:37.643  -->  00:03:41.810
and then what we're gonna do is pass that in as a string,
66

66

00:03:43.651  -->  00:03:45.318
itself, into timeit.
67

67

00:03:47.380  -->  00:03:48.630
Timeit, timeit.
68

68

00:03:51.045  -->  00:03:54.021
And the number of times I want this to run again,
69

69

00:03:54.021  -->  00:03:56.271
number equals 10,000 times.
70

70

00:03:57.394  -->  00:04:01.598
Alright, now notice by far, map is the most efficient way,
71

71

00:04:01.598  -->  00:04:04.147
so we can see that there's a significant time difference
72

72

00:04:04.147  -->  00:04:05.676
using the map function.
73

73

00:04:05.676  -->  00:04:08.243
So this is good to know, you should keep it in mind,
74

74

00:04:08.243  -->  00:04:12.758
but this is the way you would generally use timeit
75

75

00:04:12.758  -->  00:04:14.460
in your own code if you weren't working
76

76

00:04:14.460  -->  00:04:15.804
in a Jupyter notebook.
77

77

00:04:15.804  -->  00:04:18.163
Now if you're working in the Jupyter notebook, the best
78

78

00:04:18.163  -->  00:04:21.749
way to do this is using Python's built-in magic,
79

79

00:04:21.749  -->  00:04:23.805
so we discussed built-in magic a little bit when
80

80

00:04:23.805  -->  00:04:25.420
we were going over Jupyter notebooks.
81

81

00:04:25.420  -->  00:04:29.587
But basically built-in magic is defined by a percentage sign
82

82

00:04:30.531  -->  00:04:34.321
and it basically has timeit built in,
83

83

00:04:34.321  -->  00:04:36.314
so what I'm going to say is timeit,
84

84

00:04:36.314  -->  00:04:37.868
and then just copy this methods,
85

85

00:04:37.868  -->  00:04:42.088
and you don't need to pass in the strings anymore.
86

86

00:04:42.088  -->  00:04:44.411
And the interesting thing about timeit is what it's gonna do
87

87

00:04:44.411  -->  00:04:47.241
it's gonna perform the same code in that line
88

88

00:04:47.241  -->  00:04:48.841
a certain number of times,
89

89

00:04:48.841  -->  00:04:51.340
so it's gonna do it through a couple loops.
90

90

00:04:51.340  -->  00:04:53.618
So in this case, it did it through 10,000 loops,
91

91

00:04:53.618  -->  00:04:57.368
and then it'll report back the best of three.
92

92

00:04:58.716  -->  00:05:02.826
So in this case, the best was 28.9 microseconds per loop.
93

93

00:05:02.826  -->  00:05:05.463
Now remember in this case, with timeit timeit,
94

94

00:05:05.463  -->  00:05:07.914
it's telling you the total time it took to perform
95

95

00:05:07.914  -->  00:05:12.819
all 10,000 of those, which makes sense if you see, woops,
96

96

00:05:12.819  -->  00:05:17.114
10,000 times whatever this number, or, this number divided
97

97

00:05:17.114  -->  00:05:19.396
by 10,000 and then you have microseconds.
98

98

00:05:19.396  -->  00:05:22.842
Alright, moving along, let's go ahead and use the
99

99

00:05:22.842  -->  00:05:26.793
magic function to test out the rest of these.
100

100

00:05:26.793  -->  00:05:31.313
So, magic percentage sign timeit, and in this case,
101

101

00:05:31.313  -->  00:05:34.813
I'm going to check the list comprehension.
102

102

00:05:36.306  -->  00:05:39.354
And then what's really nice about using this magic function
103

103

00:05:39.354  -->  00:05:42.608
is that it gives you a better idea of how long it's
104

104

00:05:42.608  -->  00:05:46.775
actually taking to perform, on average, the command.
105

105

00:05:49.011  -->  00:05:51.980
With this normal timeit method, you have to kind of decide
106

106

00:05:51.980  -->  00:05:56.618
a large number of times to perform it, and you don't get
107

107

00:05:56.618  -->  00:06:00.688
a good idea of how long each individual time is going.
108

108

00:06:00.688  -->  00:06:02.966
And if you're just doing one here, on the number,
109

109

00:06:02.966  -->  00:06:05.550
you probably won't get an accurate average,
110

110

00:06:05.550  -->  00:06:08.157
unlike timeit here, and now notice,
111

111

00:06:08.157  -->  00:06:11.138
this is when a magic function is really great.
112

112

00:06:11.138  -->  00:06:14.405
Here when we ran it with map, since map was so much faster
113

113

00:06:14.405  -->  00:06:18.830
than the other methods, Jupyter iPython ran it
114

114

00:06:18.830  -->  00:06:22.997
100,000 times through 100,000 loops instead of just 10,000.
115

115

00:06:24.453  -->  00:06:27.589
So you'll notice if something takes a really long time
116

116

00:06:27.589  -->  00:06:31.246
to run, the Jupyter iPython may just run it
117

117

00:06:31.246  -->  00:06:34.588
three times, if it takes many seconds to run.
118

118

00:06:34.588  -->  00:06:37.068
If it's very fast, it will run it more times,
119

119

00:06:37.068  -->  00:06:38.955
to get a better average.
120

120

00:06:38.955  -->  00:06:41.188
But basically we arrived at the same conclusion,
121

121

00:06:41.188  -->  00:06:45.366
the map function was the fastest method of them all.
122

122

00:06:45.366  -->  00:06:48.040
Now like I said before, iPython will limit the amount
123

123

00:06:48.040  -->  00:06:51.347
of real time it will spend on its timeit procedure.
124

124

00:06:51.347  -->  00:06:55.987
So if you're running 100,000 loops, that would've taken
125

125

00:06:55.987  -->  00:06:58.625
10 minutes, iPython's automatically going to reduce
126

126

00:06:58.625  -->  00:07:00.440
the number of loops to something more reasonable, like
127

127

00:07:00.440  -->  00:07:03.348
100 or 1000, depending on how long it actually takes.
128

128

00:07:03.348  -->  00:07:06.989
Okay, so as always, there's a Jupyter notebook
129

129

00:07:06.989  -->  00:07:11.711
with a more comprehensive breakdown of what's going on.
130

130

00:07:11.711  -->  00:07:14.250
And you can check out the documentation here for the
131

131

00:07:14.250  -->  00:07:16.904
timeit library, but go ahead and check out that link,
132

132

00:07:16.904  -->  00:07:19.820
and you can learn about a couple more methods and timers
133

133

00:07:19.820  -->  00:07:21.346
to use.
134

134

00:07:21.346  -->  00:07:26.002
Alright, that's it as far as using timeit to time your code.
135

135

00:07:26.002  -->  00:07:28.919
I will see you at the next lecture.
