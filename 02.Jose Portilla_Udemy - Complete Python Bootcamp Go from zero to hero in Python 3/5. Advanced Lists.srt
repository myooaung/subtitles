1
1

00:00:00,993  -->  00:00:01,826
<v Narrator>Hello, everyone,</v>
2

2

00:00:01,826  -->  00:00:04,319
and welcome to the Advanced Lists lecture.
3

3

00:00:04,319  -->  00:00:05,669
So, in this series of lectures,
4

4

00:00:05,669  -->  00:00:07,593
we're gonna be diving a little deeper into all the methods
5

5

00:00:07,593  -->  00:00:08,946
available in a list.
6

6

00:00:08,946  -->  00:00:11,229
So, these aren't officially advanced features,
7

7

00:00:11,229  -->  00:00:14,269
just methods that you wouldn't typically encounter
8

8

00:00:14,269  -->  00:00:16,028
without some additional exploring.
9

9

00:00:16,028  -->  00:00:17,905
So, we've actually seen quite a few of these,
10

10

00:00:17,905  -->  00:00:21,902
append, count, extend, index, insert, pop, remove,
11

11

00:00:21,902  -->  00:00:25,618
reverse, sort, so we may have seen a lot of these already
12

12

00:00:25,618  -->  00:00:29,395
just by using lists and in the Methods lecture itself,
13

13

00:00:29,395  -->  00:00:30,889
but let's go ahead and go over them
14

14

00:00:30,889  -->  00:00:34,465
just in case you need a refresher.
15

15

00:00:34,465  -->  00:00:37,467
Okay, so let's start by making a very simple list.
16

16

00:00:37,467  -->  00:00:38,883
I'll call it l,
17

17

00:00:38,883  -->  00:00:42,236
and I'll have one, two, three in it.
18

18

00:00:42,236  -->  00:00:44,708
You definitely should've used this method by now.
19

19

00:00:44,708  -->  00:00:46,375
It's append, whoops.
20

20

00:00:48,054  -->  00:00:49,889
It's the append method, and of course,
21

21

00:00:49,889  -->  00:00:51,806
it just appends an item
22

22

00:00:53,887  -->  00:00:54,970
to your list.
23

23

00:00:55,988  -->  00:00:59,048
Alright, so we discussed this also a number of times,
24

24

00:00:59,048  -->  00:01:00,465
the count method.
25

25

00:01:01,571  -->  00:01:03,586
So, we can use the count method, and it'll count
26

26

00:01:03,586  -->  00:01:06,309
how many times an object occurs in your list.
27

27

00:01:06,309  -->  00:01:08,371
And, it'll actually count whether it's in there or not,
28

28

00:01:08,371  -->  00:01:09,531
so notice how I count a 10,
29

29

00:01:09,531  -->  00:01:11,531
doesn't occur any times.
30

30

00:01:12,466  -->  00:01:14,716
One occurs once in my list.
31

31

00:01:15,590  -->  00:01:17,929
So, moving along, here's one that you may not have heard of,
32

32

00:01:17,929  -->  00:01:20,796
and, or may not have used yet.
33

33

00:01:20,796  -->  00:01:22,115
It's called extend.
34

34

00:01:22,115  -->  00:01:24,375
So, many times people find the difference
35

35

00:01:24,375  -->  00:01:26,917
between extend and append to be unclear.
36

36

00:01:26,917  -->  00:01:30,212
So, I'm gonna show you by means of example.
37

37

00:01:30,212  -->  00:01:33,840
So, let's go ahead and make a list called x.
38

38

00:01:33,840  -->  00:01:36,668
It's just like y, it's, er just like the l list,
39

39

00:01:36,668  -->  00:01:39,302
it's gonna have one, two, three.
40

40

00:01:39,302  -->  00:01:40,885
I'm going to append
41

41

00:01:45,146  -->  00:01:47,282
another list to that.
42

42

00:01:47,282  -->  00:01:50,196
And, this list will contain four, five.
43

43

00:01:50,196  -->  00:01:53,464
And then, I'm gonna say print x.
44

44

00:01:53,464  -->  00:01:54,811
Okay, so what happened here?
45

45

00:01:54,811  -->  00:01:58,734
So, remember append just adds the entire element
46

46

00:01:58,734  -->  00:02:01,469
to the list, so what's it's doing here is
47

47

00:02:01,469  -->  00:02:05,273
it's adding this and appending this list
48

48

00:02:05,273  -->  00:02:07,273
to an element in itself.
49

49

00:02:08,725  -->  00:02:12,133
Now, what happens if you wanted to extend this list
50

50

00:02:12,133  -->  00:02:13,381
into your original list?
51

51

00:02:13,381  -->  00:02:15,302
So, that's where extend comes in.
52

52

00:02:15,302  -->  00:02:17,474
So, now I'm gonna show you again,
53

53

00:02:17,474  -->  00:02:19,650
but in this time we're gonna use extend.
54

54

00:02:19,650  -->  00:02:21,817
So, I'm gonna say x.extend
55

55

00:02:24,496  -->  00:02:29,286
and pass in a list again with just two elements, four, five.
56

56

00:02:29,286  -->  00:02:31,034
Then, I'm gonna say print x.
57

57

00:02:31,034  -->  00:02:32,723
So, notice the difference here.
58

58

00:02:32,723  -->  00:02:35,800
You're actually adding in the entire list.
59

59

00:02:35,800  -->  00:02:39,737
So, your extend will append each element in that iterable.
60

60

00:02:39,737  -->  00:02:42,379
And, that's the key difference there.
61

61

00:02:42,379  -->  00:02:45,517
So, again, just to cover append
62

62

00:02:45,517  -->  00:02:49,605
is going to append elements just the entire iterable,
63

63

00:02:49,605  -->  00:02:51,028
all the elements in it.
64

64

00:02:51,028  -->  00:02:54,962
And, what extend does is appends elements individually
65

65

00:02:54,962  -->  00:02:56,937
from the iterable.
66

66

00:02:56,937  -->  00:03:00,031
Alright, so let's move along.
67

67

00:03:00,031  -->  00:03:03,047
Take a look at our l list that has one, two, three in it,
68

68

00:03:03,047  -->  00:03:04,727
or one, two, three, four, excuse me.
69

69

00:03:04,727  -->  00:03:06,457
And, index is another method
70

70

00:03:06,457  -->  00:03:08,683
that we've probably seen already.
71

71

00:03:08,683  -->  00:03:10,024
So, what does index do?
72

72

00:03:10,024  -->  00:03:12,164
Index will return the index of whatever element
73

73

00:03:12,164  -->  00:03:14,399
is placed as an argument.
74

74

00:03:14,399  -->  00:03:17,713
So, let's find the index of two.
75

75

00:03:17,713  -->  00:03:18,700
And, it's one, right?
76

76

00:03:18,700  -->  00:03:20,344
'Cause, yeah, indexing starts at zero,
77

77

00:03:20,344  -->  00:03:24,657
zero, one, the object at the one index is two.
78

78

00:03:24,657  -->  00:03:27,215
Something to note here is that you will get an error
79

79

00:03:27,215  -->  00:03:30,455
if you try to index something that's not in your list.
80

80

00:03:30,455  -->  00:03:32,986
And, it'll tell you very clearly value error
81

81

00:03:32,986  -->  00:03:35,006
10 is not in list.
82

82

00:03:35,006  -->  00:03:38,173
Alright, let's move along with insert.
83

83

00:03:41,310  -->  00:03:42,146
So, what does insert do?
84

84

00:03:42,146  -->  00:03:44,137
Insert takes in two arguments.
85

85

00:03:44,137  -->  00:03:46,703
It takes in index and the object.
86

86

00:03:46,703  -->  00:03:49,667
So, this method places the object at the index applied.
87

87

00:03:49,667  -->  00:03:52,076
So, for example, let's just make sure we know
88

88

00:03:52,076  -->  00:03:53,216
what l looks like.
89

89

00:03:53,216  -->  00:03:55,901
L looks like one, two, three, four.
90

90

00:03:55,901  -->  00:04:00,068
And, what I'm gonna do is in that list I'm going to insert
91

91

00:04:02,329  -->  00:04:05,496
at index two a string called inserted.
92

92

00:04:07,589  -->  00:04:09,585
So, note the order here of the arguments.
93

93

00:04:09,585  -->  00:04:11,969
You put in the index first
94

94

00:04:11,969  -->  00:04:15,117
and then the object you want to insert.
95

95

00:04:15,117  -->  00:04:17,256
So, what does my list look like now?
96

96

00:04:17,256  -->  00:04:20,933
Notice how it has the inserted at the two index.
97

97

00:04:20,933  -->  00:04:24,173
So, zero index, one index, and at the two index
98

98

00:04:24,173  -->  00:04:27,197
it's placed this string inserted here.
99

99

00:04:27,197  -->  00:04:29,531
So, again, you put your index in first
100

100

00:04:29,531  -->  00:04:31,986
and then the object you wanna insert second.
101

101

00:04:31,986  -->  00:04:35,227
Okay, might be useful if throughout your code
102

102

00:04:35,227  -->  00:04:36,694
you really wanna make sure that you know
103

103

00:04:36,694  -->  00:04:39,214
the particular index of an object.
104

104

00:04:39,214  -->  00:04:42,925
Okay, moving along, you've definitely already seen pop,
105

105

00:04:42,925  -->  00:04:46,153
which allows you to pop off the last element of a list.
106

106

00:04:46,153  -->  00:04:49,230
So, again, here's the list,
107

107

00:04:49,230  -->  00:04:50,397
and I can pop.
108

108

00:04:54,624  -->  00:04:57,602
And by default, it's the last element in that list.
109

109

00:04:57,602  -->  00:05:00,016
So, I set l pop equal to ele,
110

110

00:05:00,016  -->  00:05:01,740
and ele, you notice it was four.
111

111

00:05:01,740  -->  00:05:04,144
And again, remember that change is permanent.
112

112

00:05:04,144  -->  00:05:07,086
It's in place on your list.
113

113

00:05:07,086  -->  00:05:07,919
Okay.
114

114

00:05:11,450  -->  00:05:12,904
So, something else to note is that
115

115

00:05:12,904  -->  00:05:15,569
you can pass in an index into pop.
116

116

00:05:15,569  -->  00:05:17,908
So, I could say pop zero,
117

117

00:05:17,908  -->  00:05:19,099
notice how it's one,
118

118

00:05:19,099  -->  00:05:20,950
so now l looks like this,
119

119

00:05:20,950  -->  00:05:22,700
two, inserted, three.
120

120

00:05:23,790  -->  00:05:27,724
So, what's another method for a list that we can use?
121

121

00:05:27,724  -->  00:05:29,957
Remove is another method.
122

122

00:05:29,957  -->  00:05:33,076
So, the remove method removes the first occurrence
123

123

00:05:33,076  -->  00:05:34,144
of a value.
124

124

00:05:34,144  -->  00:05:35,375
So, for example, I have my list,
125

125

00:05:35,375  -->  00:05:38,713
and let's say I wanna remove that string inserted.
126

126

00:05:38,713  -->  00:05:41,118
So, I pass in the value,
127

127

00:05:41,118  -->  00:05:44,267
and it will now remove it in place.
128

128

00:05:44,267  -->  00:05:48,087
So, I wanna show you one more example with this,
129

129

00:05:48,087  -->  00:05:51,083
just to make sure you get the idea
130

130

00:05:51,083  -->  00:05:53,201
that it's only removing the first instance of it.
131

131

00:05:53,201  -->  00:05:57,067
So, here you notice my list is one, two, three, four, three.
132

132

00:05:57,067  -->  00:05:58,844
There's two threes in it.
133

133

00:05:58,844  -->  00:06:02,261
So, if I say l.remove
134

134

00:06:04,109  -->  00:06:07,800
it's only going to remove the first instance of it.
135

135

00:06:07,800  -->  00:06:12,024
So, that's something to keep in mind with remove.
136

136

00:06:12,024  -->  00:06:15,872
Another method we can use if I see l here is reverse,
137

137

00:06:15,872  -->  00:06:17,872
and as you might guess,
138

138

00:06:17,872  -->  00:06:20,455
reverse just reverses your list
139

139

00:06:21,684  -->  00:06:23,924
and reverses the indexes for them.
140

140

00:06:23,924  -->  00:06:25,684
So, note that this occurs in place,
141

141

00:06:25,684  -->  00:06:28,751
so it will affect your list permanently.
142

142

00:06:28,751  -->  00:06:32,668
And, we can also use a sort method on our list.
143

143

00:06:34,633  -->  00:06:38,598
And, sort will sort your list also in place.
144

144

00:06:38,598  -->  00:06:41,931
So, those are all the methods on a list.
145

145

00:06:43,561  -->  00:06:44,594
Some of them we've covered a lot.
146

146

00:06:44,594  -->  00:06:46,272
Some of them might be new to you.
147

147

00:06:46,272  -->  00:06:49,524
But, just go ahead and again review the Jupyter notebook.
148

148

00:06:49,524  -->  00:06:50,841
Make sure you understand everything.
149

149

00:06:50,841  -->  00:06:53,738
So, let's just go a quick rundown of everything we learned.
150

150

00:06:53,738  -->  00:06:56,282
So, append, you've definitely used this method.
151

151

00:06:56,282  -->  00:06:59,607
It appends an element to the end of a list.
152

152

00:06:59,607  -->  00:07:01,899
Count, we've discussed this as well.
153

153

00:07:01,899  -->  00:07:04,096
It'll count how many times that object
154

154

00:07:04,096  -->  00:07:06,128
takes place in your list.
155

155

00:07:06,128  -->  00:07:08,289
Whether or not it actually occurs in your list
156

156

00:07:08,289  -->  00:07:09,834
it won't return error.
157

157

00:07:09,834  -->  00:07:11,990
Extend, here's the tricky one.
158

158

00:07:11,990  -->  00:07:16,157
Remember in extend appends each element in that iterable,
159

159

00:07:17,055  -->  00:07:19,046
so it appends here four and five,
160

160

00:07:19,046  -->  00:07:21,879
not just the list with four, five.
161

161

00:07:23,070  -->  00:07:25,089
Index will return the index of whatever element's
162

162

00:07:25,089  -->  00:07:26,749
placed in as an argument.
163

163

00:07:26,749  -->  00:07:28,769
But remember, it has to actually be in the list,
164

164

00:07:28,769  -->  00:07:31,242
otherwise you get an error.
165

165

00:07:31,242  -->  00:07:33,460
Insert takes in two arguments,
166

166

00:07:33,460  -->  00:07:35,967
first the index and then the object.
167

167

00:07:35,967  -->  00:07:38,092
So, here we insert it at two,
168

168

00:07:38,092  -->  00:07:40,019
this word or string inserted.
169

169

00:07:40,019  -->  00:07:43,206
And, notice now it's inserted in the set index two.
170

170

00:07:43,206  -->  00:07:45,162
Pop, we've seen that already,
171

171

00:07:45,162  -->  00:07:48,123
allows us to pop off the last element of a list,
172

172

00:07:48,123  -->  00:07:52,064
or we can also pass in a specific index if necessary.
173

173

00:07:52,064  -->  00:07:55,228
Remove, the remove method removes the first occurrence
174

174

00:07:55,228  -->  00:07:58,009
of a value, so we just saw an example of that.
175

175

00:07:58,009  -->  00:08:01,039
Reverse, as you know reverses a list,
176

176

00:08:01,039  -->  00:08:02,868
and sort will sort your list in place.
177

177

00:08:02,868  -->  00:08:05,904
So, both reverse and sort are in place
178

178

00:08:05,904  -->  00:08:07,837
and will affect your list permanently.
179

179

00:08:07,837  -->  00:08:10,426
Okay, that's it for the Advanced Lists lecture,
180

180

00:08:10,426  -->  00:08:12,794
which is basically just all the methods on a list,
181

181

00:08:12,794  -->  00:08:14,810
and some of them you wouldn't typically encounter
182

182

00:08:14,810  -->  00:08:16,759
without some additional exploring.
183

183

00:08:16,759  -->  00:08:20,756
Okay, thanks everyone, and I'll see you at the next lecture.
