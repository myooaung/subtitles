1
00:00:00,640 --> 00:00:05,200
Bienvenido de nuevo a esta discusin sobre declaraciones anidadas y alcance.

2
00:00:05,270 --> 00:00:11,090
Ahora que comprende las funciones, es hora de analizar el alcance al definir los parmetros fuera y dentro de

3
00:00:11,090 --> 00:00:11,780
las funciones.

4
00:00:11,780 --> 00:00:18,040
Python usa el alcance para comprender a qu variable se hace referencia dentro de la funcin.

5
00:00:18,050 --> 00:00:20,050
Esto se explica mejor a travs del ejemplo.

6
00:00:20,060 --> 00:00:23,250
As que vamos a abrir un cuaderno de Jpiter y ver de qu estamos hablando.

7
00:00:27,930 --> 00:00:30,180
Comencemos con un simple experimento mental.

8
00:00:30,180 --> 00:00:36,420
Imagina que defino la variable x y ser una tensin llamada afuera.

9
00:00:36,570 --> 00:00:40,340
Luego voy a crear una funcin llamada informes.

10
00:00:40,510 --> 00:00:46,550
Va a ser solo una funcin que no requiere parmetros y que dentro

11
00:00:46,550 --> 00:00:54,130
de esta funcin definir una variable llamada X dentro y luego voy a devolver el objeto x.

12
00:00:54,300 --> 00:00:58,020
Ahora, qu espera que sea el resultado cuando llamo al informe?

13
00:00:58,020 --> 00:01:01,570
Debera ser la cuerda afuera o debera ser la cuerda adentro?

14
00:01:01,950 --> 00:01:05,250
Bueno, si ejecuta esto, vuelve adentro e intuitivamente.

15
00:01:05,250 --> 00:01:11,020
Espero que tenga sentido ya que podemos ver que X fue reasignado dentro de la funcin de informe.

16
00:01:11,020 --> 00:01:15,300
Sin embargo, qu crees que suceder cuando llame print x.

17
00:01:15,300 --> 00:01:17,970
Ser eso fuera o dentro?

18
00:01:18,540 --> 00:01:21,240
Y si adivinaste dentro de esto es donde ests equivocado.

19
00:01:21,240 --> 00:01:25,770
De hecho, esta nueva asignacin solo est ocurriendo para esta funcin.

20
00:01:25,770 --> 00:01:28,170
No est sucediendo fuera de la funcin.

21
00:01:28,170 --> 00:01:33,870
La razn por la cual no vemos que este efecto ocurra es debido a algo llamado alcance y la idea de

22
00:01:33,870 --> 00:01:39,150
alcance en su cdigo es muy importante de entender para asignar y llamar apropiadamente los nombres de las variables

23
00:01:39,600 --> 00:01:40,500
en trminos simples.

24
00:01:40,500 --> 00:01:43,980
La idea del alcance puede describirse por tres reglas generales.

25
00:01:43,980 --> 00:01:50,400
El primero es que las asignaciones de nombres crearn o cambiarn los nombres locales por defecto y las referencias de nombres.

26
00:01:50,400 --> 00:02:03,420
La bsqueda a lo sumo para mbitos y los cuatro mbitos son mbito local que abarca el alcance global del alcance y luego se integra

27
00:02:03,600 --> 00:02:05,310
en el mbito.

28
00:02:05,310 --> 00:02:08,300
Entonces esto tambin se conoce como L e. gramo. Regla B

29
00:02:08,320 --> 00:02:13,450
Entonces L para E local para incluir G para global y B para incorporada.

30
00:02:13,470 --> 00:02:18,880
As que echemos un vistazo a cada nivel de estos mbitos para entender lo que queremos decir con ellos.

31
00:02:18,930 --> 00:02:22,410
Primero comenzaremos con un ejemplo de alcance local.

32
00:02:22,410 --> 00:02:27,900
As que imaginemos que creo esa funcin de nuevo informe y realice esta tarea.

33
00:02:27,900 --> 00:02:32,700
Esto se conoce como mbito local porque es local para esta funcin real.

34
00:02:32,700 --> 00:02:38,210
Entonces, si digo imprime X y llamo a informe, vuelvo a local.

35
00:02:38,220 --> 00:02:45,210
Ahora veamos un ejemplo de inclusin y recordemos que ocurre cuando una funcin est encerrada dentro

36
00:02:45,210 --> 00:02:46,470
de otra funcin.

37
00:02:46,680 --> 00:02:48,450
Y estas se llaman funciones anidadas.

38
00:02:48,450 --> 00:02:54,570
No los usar demasiado al comenzar la programacin, pero es posible,

39
00:02:54,790 --> 00:03:01,670
entonces crear una variable llamada X y dir que es un nivel global.

40
00:03:01,890 --> 00:03:15,560
Luego crearemos una funcin llamada enclosing y dir que x es igual al nivel de cierre y dentro de esta funcin de

41
00:03:15,560 --> 00:03:19,290
inclusin voy a poner otra funcin.

42
00:03:19,730 --> 00:03:23,070
Y como mencion cuando empiezas a aprender sobre Python, no vas a estar haciendo funciones

43
00:03:23,090 --> 00:03:24,740
dentro de las funciones con demasiada frecuencia.

44
00:03:24,740 --> 00:03:29,800
Esto es realmente solo para mostrarle el alcance o el concepto de alcance.

45
00:03:29,920 --> 00:03:37,050
Entonces crear una funcin que se llama adentro y luego dentro de esta funcin,

46
00:03:37,200 --> 00:03:45,470
dir print x y luego reviso mi sangrado aqu. Llamar a la funcin adentro dentro de adjuntando.

47
00:03:45,480 --> 00:03:49,710
Entonces, veamos qu pasa cuando llamo para cerrar y antes de ejecutar esto, imaginemos lo que

48
00:03:49,710 --> 00:03:50,820
va a pasar aqu.

49
00:03:50,820 --> 00:03:53,650
Empiezo con X reasignado a nivel global.

50
00:03:53,670 --> 00:03:54,940
Este es un nivel global.

51
00:03:55,200 --> 00:03:56,750
Entonces tengo la funcin de inclusin.

52
00:03:56,800 --> 00:03:58,960
Reasigno X para que sea nivel de inclusin.

53
00:03:59,070 --> 00:04:06,360
Luego defino esta funcin dentro de la funcin de inclusin y podemos ver la sangra de los basfilos.

54
00:04:06,530 --> 00:04:09,710
Y luego llamo adentro dentro de la funcin de inclusin.

55
00:04:09,710 --> 00:04:13,400
Entonces, cuando ejecuto esto, recupero el nivel de inclusin.

56
00:04:13,430 --> 00:04:18,110
As que este es el siguiente nivel despus de un cierre local.

57
00:04:18,110 --> 00:04:24,650
As que puedes imaginar que Python cuando finalmente llamas un nombre de variable dentro de X, se

58
00:04:24,710 --> 00:04:30,470
ve localmente y dice que esta variable x est definida localmente dentro de esta funcin.

59
00:04:30,560 --> 00:04:33,220
Si no lo encuentra sube un nivel.

60
00:04:33,270 --> 00:04:36,010
En el cierre es esta variable x.

61
00:04:36,020 --> 00:04:38,780
El hallazgo en algn lugar dentro de esta funcin adjunta.

62
00:04:38,780 --> 00:04:41,150
Y de hecho est subiendo de nivel.

63
00:04:41,150 --> 00:04:44,060
Entonces eso es lo que elige como el valor de x.

64
00:04:44,060 --> 00:04:47,120
Ahora sigamos y descubramos el nivel global.

65
00:04:47,270 --> 00:04:55,110
As que voy a eliminar esta lnea que define x y el nivel de inclusin y luego el siguiente nivel para encontrar que

66
00:04:55,110 --> 00:04:56,720
X es el nivel global.

67
00:04:56,720 --> 00:05:02,120
Entonces, si vuelvo a ejecutar la celda para leer la multa de estas dos funciones y luego me encierro, vuelvo.

68
00:05:02,120 --> 00:05:04,130
Este es un nivel global.

69
00:05:04,130 --> 00:05:08,670
As que, de nuevo, estamos pasando por los niveles aqu, incluyndonos globalmente globalmente e integrados.

70
00:05:08,750 --> 00:05:13,570
As que echamos un vistazo a la primera Python local dice Bueno, dnde est la variable x definida.

71
00:05:13,700 --> 00:05:15,770
Se ve localmente no puede encontrarlo.

72
00:05:15,950 --> 00:05:18,440
Entonces, se ve dentro de una funcin adjunta.

73
00:05:18,560 --> 00:05:24,280
Si hay uno, siempre hay una funcin adjunta y dice que as X no est definido aqu.

74
00:05:24,320 --> 00:05:31,210
Y luego se ve en el espacio de nombres global y el espacio de nombres global bsicamente se define como no tener indentacin.

75
00:05:31,220 --> 00:05:35,110
Por lo tanto, no tiene sangra en ningn tipo de funcin, va completamente a la izquierda.

76
00:05:35,120 --> 00:05:39,390
Y aqu encontramos que X es una definicin global.

77
00:05:39,530 --> 00:05:43,210
As que eso es lo que elegimos como este valor global.

78
00:05:43,220 --> 00:05:47,750
Ahora estn incorporados de manera integrada, es un nivel de global.

79
00:05:47,930 --> 00:05:55,160
Entonces, si todava no puede encontrarlo en una asignacin global, asume que va a ser una funcin o palabra

80
00:05:55,160 --> 00:05:55,740
clave incorporada.

81
00:05:55,760 --> 00:06:01,430
Y estas son palabras clave como Eliane para algunos o una lista.

82
00:06:01,430 --> 00:06:06,950
Y es por eso que es tan importante que no reasignen estos trminos bsicos que han incorporado funcionalidad

83
00:06:07,250 --> 00:06:11,420
en nuestra parte de Python porque comienzas a jugar con el alcance de Python.

84
00:06:11,810 --> 00:06:20,750
Entonces, eso significa que si no podemos encontrar X a nivel local, nivel de inclusin o nivel global, Python

85
00:06:20,750 --> 00:06:27,620
intentar ver si se trata de un parmetro integrado predefinido en su cdigo en Python.

86
00:06:27,620 --> 00:06:31,960
Pero si no es as, finalmente imaginemos que decimos que aqu tenemos y.

87
00:06:32,360 --> 00:06:39,150
Si ejecutamos esto y luego llamamos a la funcin de cierre, el nombre de error nombre y no est definido.

88
00:06:39,230 --> 00:06:44,630
Eso significa que mir todos sus niveles, se vea en el mbito local, abarcaba el alcance, miraba las palabras

89
00:06:44,630 --> 00:06:49,880
clave globales y, finalmente, verificaba todo lo que estaba integrado en Python y todava no puede encontrar el motivo.

90
00:06:49,910 --> 00:06:51,600
Entonces terminas recibiendo este error de nombre.

91
00:06:51,620 --> 00:06:53,260
Por qu no est definido

92
00:06:53,450 --> 00:06:59,210
Entonces, ahora que hemos visto los niveles, quiero mostrar rpidamente un ejemplo ms de global versus local

93
00:06:59,210 --> 00:07:03,920
porque esos son los principales que tendr que enfrentar para comprender el alcance global

94
00:07:03,980 --> 00:07:05,160
frente al alcance local.

95
00:07:05,180 --> 00:07:13,350
As que voy a crear X aqu y decir que esto es global afuera, entonces crear

96
00:07:14,350 --> 00:07:27,600
una funcin simple y la funcin tomar una X e imprimir X y luego formatearemos X as que note lo que sucede si llamo a mi

97
00:07:27,610 --> 00:07:35,320
phunk I passen X dice que X es global afuera porque X ya ha sido

98
00:07:35,320 --> 00:07:36,390
definido aqu globalmente.

99
00:07:36,770 --> 00:07:48,470
Sin embargo, si ms adelante DENTRO de esta funcin digo redefinida dentro de mi phunk y luego intento imprimir de nuevo X y corro mi phunk, dir que X es

100
00:07:48,590 --> 00:07:56,780
global afuera pero para el momento en que X viene aqu, Python est haciendo esa bsqueda una vez ms si primero

101
00:07:56,780 --> 00:08:02,480
busca en el espacio de nombres local y puede encontrar aqu que X se ha

102
00:08:02,480 --> 00:08:03,320
definido localmente.

103
00:08:03,350 --> 00:08:09,320
Por lo tanto, elige que lo haga antes de buscar una funcin adjunta o antes

104
00:08:09,320 --> 00:08:11,440
de buscar una asignacin global.

105
00:08:11,660 --> 00:08:16,020
As que eso es realmente local incluido en EJB global e integrado.

106
00:08:16,280 --> 00:08:19,690
Es solo el orden en que Python busca los nombres de las variables.

107
00:08:19,700 --> 00:08:23,540
Esto permite que Python busque efectivamente el espacio de nombres.

108
00:08:23,540 --> 00:08:28,790
Ahora puede haber una ocasin en la que por cualquier razn que desee sobrescribir

109
00:08:28,790 --> 00:08:35,480
especficamente la variable global dentro de una funcin para poder hacer eso, puede usar la palabra clave global

110
00:08:35,720 --> 00:08:39,760
para la variable para indicar que desea citar la variable global.

111
00:08:39,770 --> 00:08:42,020
Tenga en cuenta que esto generalmente no es recomendable.

112
00:08:42,040 --> 00:08:47,210
A debe hacer todo lo posible para evitar esto hasta que tenga ms experiencia con Python, ya que es

113
00:08:47,210 --> 00:08:52,790
muy fcil crear errores de esta manera al sobrescribir las variables en una parte de la secuencia de comandos que afectan

114
00:08:52,910 --> 00:08:55,400
la secuencia de comandos en una parte completamente diferente.

115
00:08:55,520 --> 00:08:59,690
As que vamos a mostrarle cmo puede usar la palabra clave global, pero si solo es

116
00:08:59,780 --> 00:09:01,690
un principiante en Python, realmente debera evitar usarla.

117
00:09:02,150 --> 00:09:05,120
Entonces, aqu veo que es global afuera.

118
00:09:05,120 --> 00:09:07,910
Imprimo X es bla, bla.

119
00:09:07,910 --> 00:09:10,560
Le la fina xy luego imprim x.

120
00:09:10,580 --> 00:09:12,090
Entonces, si vuelvo a ejecutar la celda.

121
00:09:12,320 --> 00:09:14,230
Observe que obtengo el mundo global de X afuera.

122
00:09:14,240 --> 00:09:20,570
Lee el hallazgo en mi func y si tuviera que escribir x otra vez con suerte, ahora te habrs

123
00:09:20,570 --> 00:09:26,560
dado cuenta de que ser global afuera porque estas reasignaciones solo estn dentro del alcance de esta funcin.

124
00:09:26,780 --> 00:09:33,590
En realidad, no tiene mbito para los niveles globales, por lo que esta reasignacin solo ocurre dentro

125
00:09:33,710 --> 00:09:35,110
del alcance localmente.

126
00:09:35,180 --> 00:09:35,960
Entonces que significa eso.

127
00:09:35,960 --> 00:09:42,470
Imaginemos que realmente quiero afectar la variable global y sobrescribirla dentro de mi funcin.

128
00:09:43,070 --> 00:09:48,990
Entonces, la forma en que puede usar la palabra clave global es antes de usar la variable dentro de una funcin.

129
00:09:49,010 --> 00:09:54,500
Vas a decir global y que el nombre de la variable y que le dir

130
00:09:54,500 --> 00:10:01,520
a Python seguir adelante y buscar esta variable en el espacio de nombres global y cualquier cambio que hagas

131
00:10:01,520 --> 00:10:03,630
localmente afectar a esta variable global.

132
00:10:03,650 --> 00:10:09,080
Sin embargo, cuando usa la palabra clave global, tampoco puede tener el nombre de un parmetro dentro

133
00:10:09,080 --> 00:10:09,890
de su funcin.

134
00:10:09,890 --> 00:10:14,350
De hecho, si intenta ejecutar este cdigo, Python le avisar de ese error.

135
00:10:14,480 --> 00:10:17,040
Entonces ejecutamos esto y dice error de sintaxis.

136
00:10:17,210 --> 00:10:21,940
El nombre x es parmetro y global y eso simplemente no tiene sentido para Python.

137
00:10:22,100 --> 00:10:27,500
No puede tener ambas formas de tratar con una variable global x, sino que tambin tiene algn tipo de parmetro

138
00:10:27,500 --> 00:10:29,370
que se pasa con el mismo nombre.

139
00:10:29,380 --> 00:10:33,380
Te confundirs tratando de descubrir cul de estos dos usars.

140
00:10:33,380 --> 00:10:36,850
Entonces continuaremos y lo eliminaremos del parmetro en nuestra funcin.

141
00:10:36,850 --> 00:10:39,930
Solo quiero establecer el parmetro en lugar de lo que va a hacer.

142
00:10:40,070 --> 00:10:45,140
Llega al espacio de nombres global para encontrar contenido global fuera de l.

143
00:10:45,140 --> 00:10:46,400
Lo vuelve a asignar.

144
00:10:46,400 --> 00:10:50,820
Recuerdo volver a asignar ahora la x global y luego voy a imprimirla de nuevo.

145
00:10:50,900 --> 00:10:52,470
As que corramos esto.

146
00:10:52,550 --> 00:10:54,560
Y ahora Python no tiene problemas.

147
00:10:54,560 --> 00:11:00,020
Y luego cuando llamo a mi phunk note que ya no me pasa nada, vuelvo.

148
00:11:00,040 --> 00:11:01,660
X es global afuera.

149
00:11:01,670 --> 00:11:10,750
Lea bien dentro de mi funcin y ahora, a diferencia de la ltima vez, cuando digo que imprime x x en un nivel global ahora se

150
00:11:10,760 --> 00:11:17,270
ha redefinido para que sea esta cadena y la nica forma que puede suceder es si llama especficamente la

151
00:11:17,510 --> 00:11:20,480
palabra clave global al frente de esa variable.

152
00:11:20,720 --> 00:11:25,880
Y como mencionamos anteriormente, esto no se recomienda para principiantes y, en general, es una prctica de

153
00:11:25,880 --> 00:11:29,660
programacin deficiente a menos que tenga un caso de uso muy especfico.

154
00:11:29,720 --> 00:11:32,650
Y sabes muy bien por qu ests usando global.

155
00:11:32,660 --> 00:11:38,390
Y una vez ms, la razn de esto es que se vuelve realmente fcil inducir errores en otro lugar de tu

156
00:11:38,390 --> 00:11:43,870
cdigo porque es posible que tengas otra funcin en algn lugar de tu script que est aprovechando una variable global.

157
00:11:43,910 --> 00:11:46,360
Suponiendo que no se est jugando con.

158
00:11:46,370 --> 00:11:48,410
O reasignado en alguna otra funcin.

159
00:11:48,560 --> 00:11:54,530
Tal vez cientos de lneas abajo, por eso generalmente quiere evitar esta palabra clave global.

160
00:11:54,620 --> 00:11:56,770
Te lo mostramos ahora para que lo sepas.

161
00:11:56,810 --> 00:11:58,270
En caso de que alguna vez necesite usarlo.

162
00:11:58,490 --> 00:12:00,440
Pero en general trata de evitarlo.

163
00:12:00,500 --> 00:12:07,280
En su lugar, use los parmetros que se pasan y si necesita afectar la variable global en

164
00:12:07,280 --> 00:12:13,580
lugar de imprimirlo, lo que debe hacer es devolver X y devolver la x local.

165
00:12:13,610 --> 00:12:15,400
Entonces veamos qu pasa all.

166
00:12:15,530 --> 00:12:20,860
As que diremos que X es global fuera de mi phunk pasar una X aqu.

167
00:12:20,930 --> 00:12:22,410
Va a imprimir el formato x.

168
00:12:22,460 --> 00:12:25,420
Va a redefinirlo y luego lo va a devolver.

169
00:12:25,580 --> 00:12:28,580
Y esa es realmente la razn por la que queremos hacer en lugar de usar esa palabra clave global.

170
00:12:28,610 --> 00:12:36,420
Entonces cuando ejecutas esto y pasas una X y luego obtienes un resultado, sigue adelante y dice que imprime

171
00:12:36,510 --> 00:12:42,520
X es global afuera pero luego tu resultado ahora se redefine dentro de mi funcin.

172
00:12:42,750 --> 00:12:47,940
Y esta es una buena manera de tener ambas cosas, porque si llamas a X, sigue siendo

173
00:12:47,940 --> 00:12:53,750
global afuera, pero has podido adaptar los cambios que deseas y devolverlos y guardarlos como una especie de otra variable.

174
00:12:53,770 --> 00:12:57,330
Est bien, eso es todo para las declaraciones anidadas en el alcance.

175
00:12:57,330 --> 00:13:02,810
Espero que esto quede claro en cuanto a cmo lidiar con el espacio de nombre en Python.

176
00:13:02,860 --> 00:13:03,820
Te veremos en la prxima leccin.

177
00:13:03,820 --> 00:13:04,150
Recluta.

