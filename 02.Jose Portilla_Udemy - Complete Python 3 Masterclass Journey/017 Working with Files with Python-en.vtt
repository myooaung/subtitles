WEBVTT
1

00:00:00.420 --> 00:00:06.900

Welcome back recruit for your last lesson on Python basics working with files to conclude this section



2

00:00:06.990 --> 00:00:12.060

we're going to discuss this more practical aspect of Python which is opening reading and writing two



3

00:00:12.060 --> 00:00:13.490

basic text files.



4

00:00:13.500 --> 00:00:15.450

You never know in the field as an agent.



5

00:00:15.450 --> 00:00:20.930

You may need to open text files programmatically and then read or write to them.



6

00:00:20.940 --> 00:00:24.530

Python has builtin capabilities to open basic text files.



7

00:00:24.630 --> 00:00:30.080

Later on we're going to discuss other file types such as see espie files or pedia files.



8

00:00:30.090 --> 00:00:35.190

For now let's explore the builtin capabilities in Jupiter's notebook for allowing us to work with basic



9

00:00:35.190 --> 00:00:40.410

files.



10

00:00:40.430 --> 00:00:43.570

Let's begin by seeing how we can open a file.



11

00:00:43.610 --> 00:00:50.680

The key for this is the open function and the open function takes in the file path to a text file for



12

00:00:50.680 --> 00:00:50.780

it.



13

00:00:50.780 --> 00:00:55.760

Now we're going to focus on files that are located in the same directory as the notebook or that PI



14

00:00:55.760 --> 00:00:57.470

script you're using.



15

00:00:57.470 --> 00:01:02.160

So let's imagine that we're trying to open a text file that doesn't actually exist.



16

00:01:02.420 --> 00:01:05.120

So I'm going to make up some new name.



17

00:01:05.150 --> 00:01:07.640

Go ahead and make up some new name of a text file.



18

00:01:07.640 --> 00:01:10.420

Make sure that it doesn't actually exist on your computer.



19

00:01:10.550 --> 00:01:14.610

And we're going to assign this to some variable called Eriphyle.



20

00:01:14.630 --> 00:01:20.360

Now when I run this I get back as we would expect an error and this error is file not found or otherwise



21

00:01:20.360 --> 00:01:24.800

known as error number two here and it says no such file or directory.



22

00:01:24.830 --> 00:01:27.230

This make up some text file.



23

00:01:27.230 --> 00:01:30.120

This is basically indicating one of two possible things.



24

00:01:30.200 --> 00:01:36.140

Either the name of the file is wrong so maybe you just accidentally misspelled something here as far



25

00:01:36.140 --> 00:01:37.020

as that text.



26

00:01:37.220 --> 00:01:41.120

Or more likely you didn't provide the correct file path.



27

00:01:41.150 --> 00:01:47.090

So in our case we're trying to reach a text file that's in the same location as this notebook.



28

00:01:47.090 --> 00:01:50.650

If you ever want to figure out what directory this notebook is located in.



29

00:01:50.900 --> 00:01:59.150

You can type in PWT NMT cell shift enter and it'll return back the actual location you are in and then



30

00:01:59.150 --> 00:02:05.570

you can use this to understand the file path that you need to save that text file to later on we're



31

00:02:05.570 --> 00:02:10.770

going to see how to open text files that are located in different parts of your computer.



32

00:02:10.820 --> 00:02:16.490

So right now make sure that the tests underscore file that txt file is located in the same directory



33

00:02:16.490 --> 00:02:17.880

as this notebook.



34

00:02:17.990 --> 00:02:27.350

So we're going to say my file is equal to open and you should be able to fine test file thought T.



35

00:02:27.440 --> 00:02:34.570

In the same location as this working of simple text files notebook and as a check for that.



36

00:02:34.730 --> 00:02:37.360

You should also be able to have auto complete this.



37

00:02:37.370 --> 00:02:43.940

That's a good indication that the text the text files there so we run this and always successfully open



38

00:02:44.090 --> 00:02:49.080

this text file and there's various methods of reading off of this text file.



39

00:02:49.130 --> 00:02:58.100

The first one is to say my file not read and this is going to return the entire contents as a string.



40

00:02:58.100 --> 00:03:00.770

So here I can see one giant string.



41

00:03:00.830 --> 00:03:03.150

All the contents in the text file.



42

00:03:03.170 --> 00:03:04.880

This is a good choice for smaller files.



43

00:03:04.880 --> 00:03:10.060

However if you have a very large text file you may not want to grab everything as a single string.



44

00:03:10.070 --> 00:03:11.650

So keep that in mind.



45

00:03:11.730 --> 00:03:17.270

In other thing you should keep in mind is if you try to read this file again you'll notice that it returns



46

00:03:17.270 --> 00:03:20.840

back a blank string instead of the file contents.



47

00:03:20.840 --> 00:03:26.090

The reason for that is because every time you read the file you can imagine that there is a cursor going



48

00:03:26.090 --> 00:03:31.310

through the entire file and at the very end of your first reading it ends up at the very end of the



49

00:03:31.310 --> 00:03:36.250

file so the cursor is at the end of the file and then when you read again the cursor being at the end



50

00:03:36.290 --> 00:03:38.160

there's nothing left for it to read.



51

00:03:38.180 --> 00:03:45.160

So what we do instead is we have to reset the cursor and we can do that by saying my file dots then



52

00:03:45.170 --> 00:03:46.580

call the seek method.



53

00:03:46.790 --> 00:03:47.930

Passen 0.



54

00:03:48.720 --> 00:03:50.630

And you'll see a zero being returned.



55

00:03:50.700 --> 00:03:56.330

Basically this resets the cursor to the very beginning of the file so index 0 and then you can call



56

00:03:56.340 --> 00:04:01.260

my file read again and you'll see the contents of the file.



57

00:04:01.260 --> 00:04:06.510

Notice here how we're getting this special escape character backslash.



58

00:04:06.740 --> 00:04:12.390

And recall from the strings lesson that this actually means there's a new line there because so many



59

00:04:12.390 --> 00:04:15.270

files often have line breaks.



60

00:04:15.270 --> 00:04:19.950

People use them as separators and instead of reading everything as a single string what we want to do



61

00:04:20.430 --> 00:04:24.490

is get a list that represents every line in the file.



62

00:04:24.690 --> 00:04:27.150

To do that we're going to reset ourselves.



63

00:04:27.150 --> 00:04:36.980

I will say seek 0 and then we will type in my file and will use read lines and what this does is it



64

00:04:36.980 --> 00:04:43.930

returns back a list where every item is a single line so it uses the natural breaking of a new line



65

00:04:44.360 --> 00:04:46.970

to indicate the lines of the text file.



66

00:04:46.970 --> 00:04:51.260

Now that we've discussed opening local files in the same directory as a notebook.



67

00:04:51.260 --> 00:04:55.050

Let's discuss in general how to type out file locations.



68

00:04:55.040 --> 00:05:00.620

A good way to understand how file locations work on your operating system is again typing P.W. the inside



69

00:05:00.620 --> 00:05:02.320

of a cell running.



70

00:05:02.480 --> 00:05:08.740

And you can see the syntax that Python is going to expect for you to pass in the file path.



71

00:05:08.750 --> 00:05:11.470

Let me go ahead and paste some examples here.



72

00:05:11.480 --> 00:05:15.390

All right so I'll copy and paste it some examples here so we can discuss the differences.



73

00:05:15.500 --> 00:05:21.350

When working on a Windows computer versus a Mac OS or Linux computer you've noticed here that when I



74

00:05:21.350 --> 00:05:27.500

typed in p w the I got this set of double backslashes that actually indicates that I'm currently working



75

00:05:27.500 --> 00:05:29.750

on a Windows computer for Windows.



76

00:05:29.750 --> 00:05:36.290

You need to use the double backslash so that Python doesn't treat the second backslash as an escape



77

00:05:36.290 --> 00:05:37.090

character.



78

00:05:37.340 --> 00:05:42.560

Recall from the strings lecture that escape characters with that backslash have some sort of letter



79

00:05:42.560 --> 00:05:47.510

afterwards indicating a special code such as a new line or a tab.



80

00:05:47.510 --> 00:05:53.180

Since Windows by itself has backslashes for file locations we want to make sure that Python doesn't



81

00:05:53.180 --> 00:05:57.520

try to read the next letter after the backslash as some sort of special character.



82

00:05:57.710 --> 00:06:04.400

So to fix the issue we just have two sets of backslashes essentially escaping the second backslash.



83

00:06:04.430 --> 00:06:10.420

So if you're on a Windows computer your file path is going to look something like this as a string.



84

00:06:10.610 --> 00:06:11.790

You'll say See.



85

00:06:11.870 --> 00:06:19.370

Go to users your username and then find the file path to your text file and instead of passing in just



86

00:06:19.370 --> 00:06:20.590

the file that text.



87

00:06:20.620 --> 00:06:26.330

If the text file is located on a different folder in your computer apart from where this notebook is



88

00:06:26.330 --> 00:06:30.920

located you can just passen the entire file path here.



89

00:06:31.040 --> 00:06:36.560

Now for Mac OS and Linux users you're actually going to use single slashes in the opposite direction



90

00:06:36.620 --> 00:06:42.320

so your file path is going to look something like this and your file path when you type that PWT was



91

00:06:42.320 --> 00:06:44.900

probably reported to you in this manner as well.



92

00:06:45.200 --> 00:06:52.760

OK so that's how you can call files that are located anywhere on your computer for both operating systems.



93

00:06:52.760 --> 00:06:57.380

So finally let's see a full example using what we've learned so far.



94

00:06:57.380 --> 00:07:06.560

We're going say my file We're going to open the test file that 60 I'm going to say lines is equal to



95

00:07:07.040 --> 00:07:10.300

my file and then I'm going to read this.



96

00:07:10.340 --> 00:07:17.190

Let's make sure we have a Y here and then I'm going to print lines or remember lines.



97

00:07:17.210 --> 00:07:24.830

Actually has this special new line escape code so we should see this print out 4 lines and then finally



98

00:07:24.830 --> 00:07:28.860

we will say my file and we will close the file.



99

00:07:28.860 --> 00:07:32.790

Remember to always close the file once you open opening it so you run this.



100

00:07:32.790 --> 00:07:35.550

And here we see the four lines of the file.



101

00:07:35.550 --> 00:07:40.470

So I just mentioned that you have to close files after opening them so you don't have Python constantly



102

00:07:40.470 --> 00:07:41.910

having a file open.



103

00:07:42.090 --> 00:07:46.680

Otherwise when you're working if it somewhere else in your operating system you may not be able to edit



104

00:07:46.680 --> 00:07:47.640

it or delete it.



105

00:07:47.880 --> 00:07:53.290

So for best practice there's actually the with statements and the with statement allows you to open



106

00:07:53.290 --> 00:07:56.520

the files and not worry about having to close them.



107

00:07:56.520 --> 00:07:58.280

So let's show you how you can use that.



108

00:07:58.320 --> 00:08:02.040

You can say with open and the pass and the file path.



109

00:08:02.070 --> 00:08:08.400

In this case I'll just say test file that text and then you say as and then whatever variable you want



110

00:08:08.400 --> 00:08:11.280

the file to be called will say my file.



111

00:08:11.280 --> 00:08:12.660

And then you have a colon.



112

00:08:12.660 --> 00:08:18.690

So so far we'll say with open the text file as the variable name.



113

00:08:18.690 --> 00:08:21.570

So this is an alternative to using the first line here.



114

00:08:21.750 --> 00:08:24.890

And because we're using with now we don't need to worry about closing the file.



115

00:08:25.140 --> 00:08:27.710

Instead what's going to happen is we're going to write a colon.



116

00:08:27.840 --> 00:08:30.910

And when you hit enter you'll notice indentation happens.



117

00:08:30.930 --> 00:08:36.720

So now you can have an indented block of code and all that code will execute whatever is indented beyond



118

00:08:36.720 --> 00:08:44.020

this call right here and then once that block of code isn't executing we will automatically close the



119

00:08:44.020 --> 00:08:51.930

file so we can then say lines is equal to my file read.



120

00:08:51.950 --> 00:08:59.340

So we've been able to open this file as my file and then lines set that variable equal to my file that



121

00:08:59.390 --> 00:09:03.650

read and the file has been automatically closed with the with statement.



122

00:09:03.650 --> 00:09:10.280

And lucky for us we already defined the lines here in this which means we can still call it outside



123

00:09:10.370 --> 00:09:13.200

of this with statement.



124

00:09:13.320 --> 00:09:18.530

Now I can see that giant string which if I just call the string itself is the same thing we got last



125

00:09:18.530 --> 00:09:19.320

time.



126

00:09:19.320 --> 00:09:22.490

Finally let's discuss reading and writing options.



127

00:09:22.490 --> 00:09:28.800

There's actually different modes that you can open a file with by default the mode is to read it.



128

00:09:28.820 --> 00:09:34.460

So if you do shift tab here again that's shift tab with my cursor here in the open.



129

00:09:34.580 --> 00:09:40.070

You'll notice that there is a mode parameter set to the string R and this indicates that we're opening



130

00:09:40.070 --> 00:09:45.030

the file for reading only so the file pointers place the beginning of the file.



131

00:09:45.110 --> 00:09:47.960

And this is actually the default mode of opening a file.



132

00:09:47.960 --> 00:09:50.940

However you can also write to a file and to do that.



133

00:09:51.080 --> 00:09:53.850

You can set the mode to the string w.



134

00:09:53.950 --> 00:09:58.200

You can check out the notebook that corresponds to this lesson for various other modes.



135

00:09:58.210 --> 00:10:04.640

There is reading mode reading and writing writing writing and reading and then a for appending and then



136

00:10:04.640 --> 00:10:07.370

there's also B notes or B modes.



137

00:10:07.370 --> 00:10:14.870

I should say RB and WB and the Cate's reading or writing in a binary format bullies that when we discuss



138

00:10:14.870 --> 00:10:18.150

things like c a c files are pedia files.



139

00:10:18.280 --> 00:10:21.850

Let's show you how you can write to a file.



140

00:10:22.090 --> 00:10:30.820

So I'll say F is equal to open and we're going to open the second file.



141

00:10:30.820 --> 00:10:40.110

TIA XTi and will indicate that mode is equal to read which is the default mode.



142

00:10:40.280 --> 00:10:45.700

And then we will read this and see that we have only one line inside this file.



143

00:10:46.090 --> 00:10:47.090

Then we will say



144

00:10:50.290 --> 00:10:55.980

f close that file and I'm going to try opening this again.



145

00:10:57.070 --> 00:11:02.210

Second file the text and the mode is again going to be R for reading.



146

00:11:02.230 --> 00:11:07.170

Or you can just set it to the default meaning just don't bother passing anything here.



147

00:11:07.210 --> 00:11:08.770

It's the same idea.



148

00:11:08.770 --> 00:11:15.570

And then I'm going to attempt to use the right command and I'm going to write a new line onto this file.



149

00:11:15.580 --> 00:11:16.810

Now notice what happened here.



150

00:11:16.830 --> 00:11:19.960

I got unsupported operation not ridable.



151

00:11:19.990 --> 00:11:25.330

That's because I didn't pass in the mode indicating that I have permission to write to this file to



152

00:11:25.330 --> 00:11:26.160

do that.



153

00:11:26.170 --> 00:11:33.630

You can say mode is equal to W or you can just pass in as a second premire here w.



154

00:11:33.700 --> 00:11:38.980

It's up to you whether you want to include mode as equals are or just R or just w.



155

00:11:38.980 --> 00:11:42.580

So once you've done that we can write a new line to this.



156

00:11:42.580 --> 00:11:49.930

You'll see some sort of output indicating that the write was successful and then we can close this file.



157

00:11:51.000 --> 00:11:53.080

And let's go ahead and check it out.



158

00:11:53.080 --> 00:11:58.320

We'll say with open second file text as



159

00:12:01.640 --> 00:12:05.560

Prince if read.



160

00:12:06.050 --> 00:12:09.680

And when we were that we can see we have that new line.



161

00:12:09.680 --> 00:12:12.860

Now you may be wondering what happened to the original line.



162

00:12:12.920 --> 00:12:14.600

Only one line it seems.



163

00:12:14.600 --> 00:12:17.250

Now we're only getting back a new line.



164

00:12:17.540 --> 00:12:24.530

Well the reason that happened is because when you use the W mode that right mode opens a file for writing



165

00:12:24.560 --> 00:12:25.370

only.



166

00:12:25.370 --> 00:12:30.530

But it also overwrites the file if the file exists and or the file doesn't exist.



167

00:12:30.530 --> 00:12:32.730

That actually creates a new file for writing.



168

00:12:33.050 --> 00:12:40.670

So let me explore this idea a little further with you will say with open and we're going to make up



169

00:12:40.880 --> 00:12:43.120

some text file that's definitely not here.



170

00:12:43.160 --> 00:12:50.000

So I just want a bunch of random letters that text and then I'm going to say w as my mode then say as



171

00:12:50.090 --> 00:12:57.330

f and I'm going to writes a new file made and run this.



172

00:12:57.350 --> 00:13:00.290

And you'll notice that there was no errors in effect.



173

00:13:00.290 --> 00:13:06.530

Now I can actually open this and I can begin to type this out and see if I can tab autocomplete that.



174

00:13:06.790 --> 00:13:14.000

So going to open this with just the default permissions and then print out after read and I can see



175

00:13:14.060 --> 00:13:15.980

new file was made there.



176

00:13:15.980 --> 00:13:23.390

If I already have an existing file that I want to add or append to instead of overwriting then the correct



177

00:13:23.390 --> 00:13:27.640

the mode to do that is the a mode or append mode.



178

00:13:28.070 --> 00:13:34.320

So I can say with open and it was passen that crazy pathing and so tab autocomplete that.



179

00:13:34.610 --> 00:13:38.080

And then I will indicate that my mode is a.



180

00:13:38.240 --> 00:13:44.060

There's also a plus which indicates the opening for both appending and reading will just append right



181

00:13:44.060 --> 00:13:44.650

now.



182

00:13:45.400 --> 00:13:50.590

And I will say as F and then we are going to say F dot.



183

00:13:50.620 --> 00:13:51.470

Right.



184

00:13:51.790 --> 00:13:58.720

And then we'll say some other line do shift enter to run that.



185

00:13:58.920 --> 00:14:07.650

And then if we say with open again tab autocomplete that and we'll just have it in read only mode as



186

00:14:07.740 --> 00:14:11.770

f if I say Prince F..



187

00:14:11.870 --> 00:14:13.490

Read notice.



188

00:14:13.520 --> 00:14:19.530

Now I have a new file made some other line if I wanted to actually add in a new line.



189

00:14:19.550 --> 00:14:25.160

What I could have done here is pasan that New Line special characters indicate that there's going to



190

00:14:25.160 --> 00:14:26.800

be a line break.



191

00:14:26.810 --> 00:14:31.910

So if we run this again that is now I added in the other line.



192

00:14:32.150 --> 00:14:32.740

OK.



193

00:14:32.960 --> 00:14:37.850

You can check out the notebook for the various other method modes but essentially it's are for reading



194

00:14:38.200 --> 00:14:41.880

our plus for reading and writing W for writing only.



195

00:14:41.960 --> 00:14:45.550

And remember that's going to overwrite the file or create a new one.



196

00:14:45.770 --> 00:14:51.140

There'll be a plus for writing and reading and then if you need to append to an existing file use the



197

00:14:51.210 --> 00:14:57.490

a method or if you want to append and read during this block of code you can use a plus.



198

00:14:57.490 --> 00:14:58.070

All right.



199

00:14:58.160 --> 00:15:02.150

That's it for your First of recruitment trials upcoming.



200

00:15:02.150 --> 00:15:04.660

Is your field readiness exam.



201

00:15:04.670 --> 00:15:06.360

Best of luck on that recruit.



202

00:15:06.410 --> 00:15:07.580

I'll see you at the next lesson.



