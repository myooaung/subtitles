1
00:00:01,270 --> 00:00:02,660
Welcome back agent.

2
00:00:03,040 --> 00:00:08,830
Let's go ahead and explore just a few more examples of web scraping and this particular example we're

3
00:00:08,830 --> 00:00:17,370
going to scrape an image off a web site so we will be using the wikipedia article for cicada 3 3 0 1.

4
00:00:17,380 --> 00:00:19,490
Notice here there's a little logo for it.

5
00:00:19,690 --> 00:00:25,540
So that is what we're going to extract from this web page and we're going to save this logo as a dot.

6
00:00:25,540 --> 00:00:27,370
JPG file on your computer.

7
00:00:28,260 --> 00:00:33,440
So we will inspect this image and see what we can gather here.

8
00:00:33,450 --> 00:00:38,790
I can see there is an image tag but we don't want to use the image tag because there may be other images

9
00:00:38,790 --> 00:00:41,490
on this page and it only really want one image.

10
00:00:41,490 --> 00:00:44,930
Notice how this Wikipedia globe is also an image.

11
00:00:44,940 --> 00:00:48,520
And if you scroll down you may begin to see other images sometimes.

12
00:00:48,540 --> 00:00:49,750
Sometimes there isn't.

13
00:00:49,870 --> 00:00:54,650
And you can see here there's a little image here for the Internet portal and we don't really want that.

14
00:00:54,870 --> 00:01:02,510
So what we would use instead is the class will use the class thumb image and see if that works for us.

15
00:01:02,550 --> 00:01:08,620
It may work it may not work but since there's no ID here we will go with it instead of using the image.

16
00:01:08,620 --> 00:01:10,490
Or I am e-tag.

17
00:01:11,190 --> 00:01:16,470
So grabbing some image we will come back here and start off of the very first step which is to make

18
00:01:16,470 --> 00:01:28,160
a request to the actual web site page will type out Arrius requests get and we will copy and paste the

19
00:01:28,160 --> 00:01:32,650
Wikipedia article you are l.

20
00:01:32,920 --> 00:01:37,790
And then once we have that we're going to create a soup little say soup is equal to be.

21
00:01:37,790 --> 00:01:49,270
As for beautiful soup pasand the text of that request and then type out L S M L.

22
00:01:49,330 --> 00:01:50,650
So we've created our soup.

23
00:01:50,650 --> 00:01:54,740
Now it's time to actually select something from the soup as we just discussed.

24
00:01:54,760 --> 00:02:05,730
We decided that we'll use the class from Image and because it's a class we will say Dot some image and

25
00:02:05,730 --> 00:02:11,970
it looks like this is what we want it says cicada three theories zil one underscore logo that J peg

26
00:02:12,090 --> 00:02:19,200
and if you notice at the S R C or source of the image we have some sort of u r l here that leads to

27
00:02:19,350 --> 00:02:23,630
wherever Wikimedia or pedia is hosting the actual Adjaye pedophile.

28
00:02:23,790 --> 00:02:29,010
And eventually that's what we want to grab and we'll make a separate request for that particular JPEG

29
00:02:29,010 --> 00:02:31,520
file and then save its raw content.

30
00:02:32,300 --> 00:02:40,790
In order to do that we will create a new variable called Image info and will confirm the image info

31
00:02:40,850 --> 00:02:47,690
is just a list of tags and it is here and it's actually if we take a look at this again it's just one

32
00:02:47,690 --> 00:02:51,740
item in that image or in that list I should say.

33
00:02:52,040 --> 00:03:00,100
So let's save that first item as cicada.

34
00:03:00,380 --> 00:03:04,730
And if we have that time here we can see the actual image tag.

35
00:03:04,850 --> 00:03:10,320
And because this is the tag we can make dictionary like calls for parts of the tag.

36
00:03:10,340 --> 00:03:12,770
Notice how the tag has a class.

37
00:03:12,770 --> 00:03:18,670
It has some sort of heights with and then information about its source or S R C.

38
00:03:18,930 --> 00:03:25,280
And more information about another part of it's with in order to actually grab essentially subsections

39
00:03:25,280 --> 00:03:29,180
of this tax information you can make a dictionary like call.

40
00:03:29,300 --> 00:03:35,300
So I would be able to type in class here and it will return back the class some image or anything the

41
00:03:35,420 --> 00:03:38,130
class equals inside of this tag object.

42
00:03:38,270 --> 00:03:41,260
But in reality we take a look at this again.

43
00:03:41,930 --> 00:03:44,930
What I really want is S R C or the source.

44
00:03:44,930 --> 00:03:51,290
So every image tag and HTL is going to have S or C or or source and that's essentially telling you where

45
00:03:51,290 --> 00:03:54,850
the actual image is being hosted on the Web site.

46
00:03:54,950 --> 00:03:57,040
So we will type that out as RC.

47
00:03:57,110 --> 00:04:03,640
And now we have the Pegge location for this image and know how it starts with two forward slashes.

48
00:04:03,680 --> 00:04:10,070
If we actually want to make the request we need to add on h t t s colon to this or HTP

49
00:04:12,530 --> 00:04:19,120
meaning I will say the image link is equal to HTP colon.

50
00:04:19,340 --> 00:04:23,150
And then I will concatenate what this is right here.

51
00:04:23,420 --> 00:04:29,830
So I'll copy and paste that here and then if I take a look at my image link I have this nice you are

52
00:04:29,830 --> 00:04:32,010
able to grab the image from.

53
00:04:32,200 --> 00:04:43,290
Meaning we're going to make another request cicada image is equal to requests gets and then passen the

54
00:04:43,290 --> 00:04:44,200
image link.

55
00:04:44,250 --> 00:04:50,000
And remember that person X L and now we have the cicada image.

56
00:04:50,130 --> 00:04:52,440
So since we actually have an image

57
00:04:55,170 --> 00:04:56,020
we take a look at it.

58
00:04:56,060 --> 00:04:57,100
Ill say response.

59
00:04:57,110 --> 00:04:57,800
Two hundred.

60
00:04:57,800 --> 00:05:03,520
That actually means it's basically a code saying that the response went through everything was successful

61
00:05:04,290 --> 00:05:06,200
and other code could be 404.

62
00:05:06,380 --> 00:05:11,000
Meaning you are not found but in our case it was 200 it was successful which makes sense because we

63
00:05:11,000 --> 00:05:17,130
essentially we're already told that that Yoro existed in Phonogram the actual content of the image.

64
00:05:17,180 --> 00:05:23,260
Then I called the content attribute and you will end up seeing something that looks like this.

65
00:05:23,450 --> 00:05:25,030
And this is binary code.

66
00:05:25,250 --> 00:05:31,950
Meaning if I want to read or write to this I can use Python's ability of opening and writing to files.

67
00:05:31,970 --> 00:05:41,220
However instead of just a mode of W or are only to add in WB or RB which means the next step is to actually

68
00:05:41,220 --> 00:05:43,220
create a jpg file.

69
00:05:43,310 --> 00:05:47,380
Write the content to it close it and see if it worked.

70
00:05:47,970 --> 00:05:51,450
Meaning we will say F is equal to open.

71
00:05:51,960 --> 00:06:02,570
And here we're going to create new file names so I'll type out Takeda image new J pag and I will open

72
00:06:02,570 --> 00:06:05,600
this file with right and binary permissions.

73
00:06:05,600 --> 00:06:10,080
Right now this file does not exist on our computer so it's going to create that file for me.

74
00:06:10,100 --> 00:06:11,690
It's an empty file right now.

75
00:06:12,080 --> 00:06:20,290
So I will write out the actual content of the image cicada image contents or write to it.

76
00:06:20,290 --> 00:06:23,350
You will get some sort of number in the kingdom that the write was successful.

77
00:06:24,500 --> 00:06:26,350
And then we will close this.

78
00:06:26,510 --> 00:06:32,750
And now I will be able to actually search my computer and find this JPEG file and it will be the picture

79
00:06:32,750 --> 00:06:34,690
of that cicada in the logo.

80
00:06:34,700 --> 00:06:39,070
So let's open it up by actually using markdown.

81
00:06:39,380 --> 00:06:46,220
We can do this all the chip in a notebook click on a cell go to cell appear and then say cell type mark

82
00:06:46,220 --> 00:06:50,060
down and mark down cells can actually accept h t m l.

83
00:06:50,270 --> 00:06:58,250
So we will provide some very simple aged him code here will say image S or C source and instead of saying

84
00:06:58,490 --> 00:07:05,210
this HTP link or some other online hosted link I will actually grab the jpeg that we just created.

85
00:07:05,210 --> 00:07:11,040
We will copy this string and then paste it here.

86
00:07:11,940 --> 00:07:13,610
And then close off the image tag.

87
00:07:13,650 --> 00:07:19,440
And if I run this I should be able to see that cicada image which means that it was able to successfully

88
00:07:19,560 --> 00:07:23,280
write and down download and then write to a file.

89
00:07:23,280 --> 00:07:26,270
The JPEG image that was on that Wikipedia page.

90
00:07:26,280 --> 00:07:30,750
So let's quickly go through those steps since it's a little more complicated than a regular scraping

91
00:07:30,750 --> 00:07:31,610
job.

92
00:07:31,650 --> 00:07:36,420
The first thing we had to do is make the request to the actual Yoro and then create a soup out of that

93
00:07:36,420 --> 00:07:38,430
request text object.

94
00:07:38,550 --> 00:07:44,430
Then we had to inspect the page to figure out what we were actually going to select in real situations.

95
00:07:44,430 --> 00:07:46,500
This may take some experimentation.

96
00:07:46,590 --> 00:07:53,050
In our case we went ahead and chose the class classes and ideas are always good first starting points.

97
00:07:53,790 --> 00:07:59,940
Then after we got back the list of information tags we went ahead and grabbed the object from that list

98
00:08:00,510 --> 00:08:06,180
and then we can make dictionary like calls for the source link s r c for the image itself.

99
00:08:06,180 --> 00:08:13,020
We created an image linked by adding HTP to this to get a full link made a fresh request realized that

100
00:08:13,020 --> 00:08:18,090
we could get the contents from that request essentially the image itself opened up a new file wrote

101
00:08:18,090 --> 00:08:22,920
the contents of the file close it and then you'll find this file saved on your computer in the same

102
00:08:22,920 --> 00:08:24,780
directory wherever this notebook is.

103
00:08:24,840 --> 00:08:30,960
And recall if you ever want to figure out where it notebooks is saved you just type PWT run this and

104
00:08:30,960 --> 00:08:33,860
it will tell you where you're actually saved.

