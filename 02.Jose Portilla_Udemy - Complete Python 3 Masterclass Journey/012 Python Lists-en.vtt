WEBVTT
1

00:00:00.420 --> 00:00:02.330

Welcome back to your next lesson recruit.



2

00:00:02.340 --> 00:00:09.860

Now it's time to discuss python lists lists or ordered sequences that can hold a variety of object types.



3

00:00:09.860 --> 00:00:14.600

They use the same square bracket notation that we've seen earlier and commas to separate out objects



4

00:00:14.600 --> 00:00:15.400

in a list.



5

00:00:15.410 --> 00:00:21.380

Here we can see an example of a list of integers lists support indexing and slicing and lists can be



6

00:00:21.380 --> 00:00:25.730

nested and also have a variety of useful methods that can be called off of them.



7

00:00:25.730 --> 00:00:33.660

Let's explore all these concepts by opening a Jupiter notebook.



8

00:00:33.670 --> 00:00:40.960

Let's start off by making an example list will say my list and create an example list of integers something



9

00:00:40.960 --> 00:00:45.340

you want to avoid doing as you've mentioned the past and choosing variable names is if you choose the



10

00:00:45.340 --> 00:00:46.570

variable name list.



11

00:00:46.570 --> 00:00:48.760

You notice that it's actually highlighted.



12

00:00:48.760 --> 00:00:52.360

That means it's a pre-built and key word and you don't want to use that.



13

00:00:52.570 --> 00:00:56.610

If you accidentally already that some sort of assignment like list is one to three.



14

00:00:56.680 --> 00:01:00.400

You should do is go to kernel and then hit restart.



15

00:01:00.400 --> 00:01:03.640

Then make sure you delete or comment out that line.



16

00:01:04.100 --> 00:01:05.140

Continuing on.



17

00:01:05.180 --> 00:01:07.090

Notice that we have my list.



18

00:01:07.160 --> 00:01:08.680

Now here you have a list of integers.



19

00:01:08.720 --> 00:01:17.780

But I can also create a list of strings such as a other string will be another strange the bunch of



20

00:01:17.810 --> 00:01:22.310

random letters or characters and then we see my list is there as well.



21

00:01:22.620 --> 00:01:30.490

And also note that we can have mixed data types so I can have integers floats and then strings as well.



22

00:01:30.560 --> 00:01:31.580

All mixed up here.



23

00:01:31.640 --> 00:01:34.460

And the list has no problem with that.



24

00:01:34.690 --> 00:01:37.070

Now let's discuss quickly indexing and slicing.



25

00:01:37.070 --> 00:01:43.340

It basically works the exact same way as in a string will create a brand new list and will have this



26

00:01:43.340 --> 00:01:51.920

be a list of letters say A B C and D and then if I check out my list I have a list of letters.



27

00:01:51.920 --> 00:01:55.540

Imagine I wanted to grab the first item in my list.



28

00:01:55.580 --> 00:02:02.810

That's the string A so I can say my list 0 and then that's a if I want to grab a b and c..



29

00:02:03.230 --> 00:02:04.540

Well let's think about this.



30

00:02:04.550 --> 00:02:09.220

I want to grab 0 1 to add up to and including three.



31

00:02:09.260 --> 00:02:15.330

Which means I start at 0 and then go up to and don't include three and then I have a list.



32

00:02:15.350 --> 00:02:19.360

So notice here it returns back the list subsection.



33

00:02:19.370 --> 00:02:23.860

Now I want to quickly make a note here that Python has a built in functions.



34

00:02:23.990 --> 00:02:30.860

We just saw that list was actually pre-built into Python as a essentially special keyword that we're



35

00:02:30.860 --> 00:02:32.290

going to use later on.



36

00:02:32.300 --> 00:02:35.270

You can use it to transform things into lists.



37

00:02:35.270 --> 00:02:41.660

There's a really useful built in function called L E N for length and this allows you to return back



38

00:02:41.690 --> 00:02:43.530

the length of objects.



39

00:02:43.610 --> 00:02:45.440

So if you pass any string into this.



40

00:02:45.500 --> 00:02:49.710

So hello it's going to return back how many characters are in that string.



41

00:02:49.760 --> 00:02:54.260

And likewise if you pass in a list to this say my list is going to return back.



42

00:02:54.260 --> 00:02:56.780

How many objects are in that list.



43

00:02:56.870 --> 00:03:03.410

So you should also be careful of not wanting to overwrite Eliane with some other functionality or some



44

00:03:03.410 --> 00:03:05.500

other variable.



45

00:03:05.510 --> 00:03:08.480

Now let's go ahead and move on to discuss useful list methods.



46

00:03:08.540 --> 00:03:14.510

We just saw that strings had methods such as upper and lower and split and we saw that split created



47

00:03:14.600 --> 00:03:17.640

that list and we've learned a little bit more about lists so far.



48

00:03:17.720 --> 00:03:24.880

I want to discuss methods that can be called off of a list object to do this will say my list is equal



49

00:03:24.880 --> 00:03:32.920

to one two three and one really useful method is appending to a list and appending to a list allows



50

00:03:32.920 --> 00:03:35.780

us to add something onto the end of a list.



51

00:03:35.890 --> 00:03:40.850

You can say my list that append should be able to tab autocomplete this.



52

00:03:40.930 --> 00:03:45.670

If you're not able to tap autocomplete it is probably because you actually haven't ran the cell that



53

00:03:45.680 --> 00:03:51.900

defined my list yet and then append just allows you to append another item to the end of the list.



54

00:03:51.910 --> 00:03:54.090

So right now my list is 1 to 3.



55

00:03:54.100 --> 00:04:00.180

Let's go ahead and append 4 to it and then I can check that my list is now 1 2 3 4.



56

00:04:00.460 --> 00:04:06.250

If I want to remove an item from the end of my list I can use the pop method.



57

00:04:06.370 --> 00:04:07.690

I will say pop.



58

00:04:07.690 --> 00:04:10.080

Make sure to do open close princes if you don't.



59

00:04:10.090 --> 00:04:12.760

Again you just get the report back of what it is.



60

00:04:13.000 --> 00:04:20.110

Open close print sees run that and notice it returns back the last item of my list which happens to



61

00:04:20.110 --> 00:04:28.730

be 4 and this is an in-place method meaning it actually affects the current variable in place so if



62

00:04:28.730 --> 00:04:34.160

I take a look at my list again it no longer has that for OK.



63

00:04:34.420 --> 00:04:42.130

Let's go ahead and append Forgan one more time we'll say it my list append four.



64

00:04:42.420 --> 00:04:49.020

And then we see my list imagine that I wanted to remove not the last item on my list but the first item



65

00:04:49.020 --> 00:04:49.650

on my list.



66

00:04:49.740 --> 00:04:50.650

How can I do that.



67

00:04:50.820 --> 00:04:56.850

Well Pop takes and parameters and later on we'll see that many methods actually take in parameters in



68

00:04:56.850 --> 00:04:59.680

order to adjust what the method is going to do.



69

00:05:00.240 --> 00:05:09.570

We'll say my list pop and I can do shift tab to see the documentation string of this method and it says



70

00:05:09.570 --> 00:05:14.300

back elde up pop and it's going to remove and return the item at the index.



71

00:05:14.520 --> 00:05:19.700

Meaning that I can actually provide an index location to this pop argument.



72

00:05:20.460 --> 00:05:26.100

So by default the index is negative 1 meaning it returns back the very last item of the list.



73

00:05:26.130 --> 00:05:33.660

But if you want to grab the first item you could say 0 for index 0 and it pops off the first item of



74

00:05:33.660 --> 00:05:34.810

that list.



75

00:05:34.830 --> 00:05:39.890

So now that I see my list I see two three four and I remove that first item.



76

00:05:40.080 --> 00:05:48.110

Let's do my list is equal to 1 2 3 for one more time here to show my list again.



77

00:05:48.410 --> 00:05:55.520

Notice that my list pop is actually returning back this either first item second item or whatever happens



78

00:05:55.670 --> 00:05:56.810

for the index.



79

00:05:56.810 --> 00:06:05.410

If I actually wanted to save the item as a variable what I can do is say my first item is equal to.



80

00:06:05.420 --> 00:06:08.690

Let's put in some other scores for snicked casing here.



81

00:06:08.750 --> 00:06:10.400

My first item is equal to my list.



82

00:06:10.440 --> 00:06:12.720

The pop 0.



83

00:06:12.980 --> 00:06:17.390

So what is happening here is we're popping off the first elements in that list.



84

00:06:17.570 --> 00:06:21.250

And there were actually salient to my first item.



85

00:06:21.350 --> 00:06:23.880

So my list no longer has that number one.



86

00:06:23.900 --> 00:06:32.690

Instead we've been able to save it as my first item this general idea of methods returning things are



87

00:06:32.750 --> 00:06:38.330

operating in place is sometimes a little confusing for new recruits and it takes a little while to build



88

00:06:38.330 --> 00:06:41.590

some sort of intuition about what's going on with a method.



89

00:06:41.720 --> 00:06:46.910

And I want to show you a couple of more examples to get an idea of methods that sometimes don't return



90

00:06:46.940 --> 00:06:50.090

anything or operate in place.



91

00:06:50.090 --> 00:06:56.240

So let's go ahead and say my list again is equal to.



92

00:06:56.240 --> 00:07:01.330

We're going to say one two three four five.



93

00:07:01.670 --> 00:07:04.530

OK I have my list and if I do.



94

00:07:04.830 --> 00:07:06.300

And then hit tab I noticed yours.



95

00:07:06.310 --> 00:07:07.550

A lot of methods here.



96

00:07:07.670 --> 00:07:10.280

I'm going to use the reverse method now.



97

00:07:10.610 --> 00:07:14.900

So this method interestingly enough doesn't actually return anything.



98

00:07:14.900 --> 00:07:17.220

Instead it operates in place.



99

00:07:17.270 --> 00:07:21.210

So if I take a look at my list now it's been reversed.



100

00:07:21.530 --> 00:07:32.150

What I cannot do is something like this result is equal to my list reverse because my list thought reverse



101

00:07:32.240 --> 00:07:33.800

is occurring in place.



102

00:07:33.800 --> 00:07:38.900

It means it's affecting the actual variable my list and it's not actually returning anything.



103

00:07:38.900 --> 00:07:44.640

So if I take a look at results I don't get anything back that basically does not return anything.



104

00:07:44.660 --> 00:07:50.060

And this idea of returning something is going to come into play when we learn how to build out our own



105

00:07:50.060 --> 00:07:50.900

functions.



106

00:07:50.960 --> 00:07:55.400

So keep that idea of returning something or not returning something in the back because you're mine



107

00:07:55.820 --> 00:07:59.890

for when we cover functions we're actually going to use a return keyword.



108

00:08:00.050 --> 00:08:05.810

But for now just keep a general idea that some functions or some methods won't return anything and others



109

00:08:05.870 --> 00:08:08.540

will affect the variable in place.



110

00:08:11.090 --> 00:08:15.610

Another very similar method to reverse is sorting.



111

00:08:15.610 --> 00:08:22.540

So if I say my list is equal to let's put in a bunch of kind of random unsorted numbers here I can actually



112

00:08:22.540 --> 00:08:30.970

say my list dot and then say sort and nothing's returned here meaning my list has been sorted in place.



113

00:08:30.970 --> 00:08:37.940

So the methods we've gone over so far is sorting a list reversing a list popping an item off of the



114

00:08:37.940 --> 00:08:38.310

list.



115

00:08:38.330 --> 00:08:43.790

And this is something where we do return an object and then we have appending to a list nothing's returned



116

00:08:43.790 --> 00:08:46.820

here we just add on an object to the very end.



117

00:08:46.820 --> 00:08:51.620

Now if we want to not put in an object at the very end but actually insert it to a special location



118

00:08:52.010 --> 00:08:54.300

we can use the insert method for that.



119

00:08:54.680 --> 00:09:01.000

So create one last list here for example 1 2 3 and instead of appending to the very end.



120

00:09:01.040 --> 00:09:09.860

I want to insert it as the first item that is index 0 that I can say inserts and the first argument



121

00:09:09.860 --> 00:09:12.120

is the index to the ssion of where you want to insert this.



122

00:09:12.170 --> 00:09:13.950

I will insert this at zero.



123

00:09:14.180 --> 00:09:15.370

That is the first item.



124

00:09:15.530 --> 00:09:19.290

And then let's make it really obvious by saying new.



125

00:09:19.470 --> 00:09:24.150

And then I check my list I see new one to three.



126

00:09:24.150 --> 00:09:24.450

OK.



127

00:09:24.480 --> 00:09:31.280

So you have insert with the capability of inserting this item at any location.



128

00:09:31.300 --> 00:09:37.060

Finally the last topic I want to cover is nested lists and that's just the idea that a list can hold



129

00:09:37.390 --> 00:09:42.550

not just the variable objects that we've seen before or like floats numbers or strings.



130

00:09:42.580 --> 00:09:44.530

It can actually hold in other lists.



131

00:09:44.830 --> 00:09:55.060

So I can say let's get a couple empty cells here a new list equal to one comma to comma and then I can



132

00:09:55.180 --> 00:10:03.750

insert another sublist here a b c.



133

00:10:03.820 --> 00:10:11.110

So now notice that I have a list inside of another list and the type of this is still a list.



134

00:10:11.290 --> 00:10:16.650

So imagine I wanted to grab the letter A from this list how would I actually do that.



135

00:10:16.870 --> 00:10:22.690

Well I would need to check out my list and index out this nested list.



136

00:10:22.720 --> 00:10:26.030

So that is at 0 1 index 2.



137

00:10:26.290 --> 00:10:27.970

So let's grab that.



138

00:10:27.970 --> 00:10:34.480

And now I've been able to retrieve that list itself and then actually off of this I can perform another



139

00:10:34.480 --> 00:10:40.090

set of index calls to grab the first item here which is a index 0.



140

00:10:40.420 --> 00:10:42.480

And then I can grab the string A.



141

00:10:42.850 --> 00:10:47.120

Having more than one level of nested list is not really that common.



142

00:10:47.170 --> 00:10:53.710

It's sometimes pretty common to see objects nested one level in such as a list inside of another list.



143

00:10:53.710 --> 00:10:57.760

It's pretty uncommon to see a list inside of a list and side of a list et cetera just because it gets



144

00:10:57.760 --> 00:10:59.930

so hard and tricky to retrieve things.



145

00:11:00.120 --> 00:11:02.380

OK that's it for this lesson.



146

00:11:02.440 --> 00:11:03.550

We'll see at the next one.



