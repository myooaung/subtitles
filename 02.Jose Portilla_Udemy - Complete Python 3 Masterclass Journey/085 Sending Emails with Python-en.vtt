WEBVTT
1

00:00:00.890 --> 00:00:04.610

Welcome back agent Let's discuss sending emails.



2

00:00:04.850 --> 00:00:09.290

The yellow mission return back and e-mail address info at the gold bugs dot com.



3

00:00:09.320 --> 00:00:16.090

Let's explore how we can use Python to send and receive e-mails from this e-mail address to send emails



4

00:00:16.090 --> 00:00:16.710

of Python.



5

00:00:16.720 --> 00:00:21.520

We need to manually go through the steps of connecting to an email server confirming that connection



6

00:00:21.720 --> 00:00:26.190

sending a protocol logging onto your email account and then sending the message.



7

00:00:26.440 --> 00:00:34.770

Fortunately the built in S T P lib library in Python makes the steps just simple function calls every



8

00:00:34.770 --> 00:00:40.660

major email provider has her own s a.p that is simple Mail Transfer Protocol server.



9

00:00:40.680 --> 00:00:45.900

Essentially that's a domain name where you need to connect to if you want to perform these steps manually.



10

00:00:45.900 --> 00:00:51.840

We'll be using Gmail for our example because we will be using a Gmail account.



11

00:00:51.840 --> 00:00:57.300

We're also going to generate an app password instead of our normal password which is also going to require



12

00:00:57.300 --> 00:01:00.230

us to enable two factor authentication.



13

00:01:00.240 --> 00:01:05.070

This basically is just to let Gmail know that the python script attempting to access our account is



14

00:01:05.070 --> 00:01:07.700

authorized by us.



15

00:01:07.740 --> 00:01:15.280

Let's explore this entire process in the Jupiter notebook.



16

00:01:15.380 --> 00:01:19.100

We'll begin by importing the s m t P.



17

00:01:19.110 --> 00:01:25.490

That's a simple mail transfer protocol library so Esam t p lib and then what we're going to do is create



18

00:01:25.490 --> 00:01:30.920

an S-M T.P. object for a server and you can look at the table in the corresponding notebook for your



19

00:01:30.920 --> 00:01:37.780

server domain name but we'll be using Gmail as our server so we will say s m t p object



20

00:01:40.510 --> 00:01:50.480

is equal to S and T P lib and we'll call S-M T P function off of this and then we'll provide the actual



21

00:01:50.990 --> 00:01:54.160

domain server which is t p.



22

00:01:54.290 --> 00:01:56.210

Gmail dot com.



23

00:01:56.430 --> 00:02:01.450

And then for Gmail we can also provide a port number so we'll try 5 8 7.



24

00:02:01.760 --> 00:02:06.920

If for some reason the number of 5 8 7 doesn't work and when you try using this and running this you



25

00:02:06.920 --> 00:02:08.380

get back some sort of error.



26

00:02:08.570 --> 00:02:11.750

Something else you can try is using the port number 4 6 5.



27

00:02:11.990 --> 00:02:15.950

If that also doesn't work you can try not passing in any number for the port number.



28

00:02:15.950 --> 00:02:21.290

Keep in mind if you have a firewall or anti-virus that may prevent your python script from trying to



29

00:02:21.290 --> 00:02:28.760

reach out and connect over the Internet the next step would need to do is run an e h l o method command



30

00:02:28.790 --> 00:02:31.770

which greets the server and establishes the connection.



31

00:02:31.780 --> 00:02:34.690

This method call should be done directly after creating the object.



32

00:02:34.690 --> 00:02:37.720

So make sure you follow the steps exactly calling it after.



33

00:02:37.730 --> 00:02:41.930

Other methods will basically result in errors and connecting later on.



34

00:02:41.930 --> 00:02:49.000

So right after you create the object the very next line should be running in this ello so will say grab



35

00:02:49.010 --> 00:02:57.350

or object and run Chilo which essentially creates the server and when you run this you should see some



36

00:02:57.350 --> 00:02:59.130

sort of code that starts with 250.



37

00:02:59.180 --> 00:03:03.080

And this basically says that we had a successful connection.



38

00:03:03.080 --> 00:03:08.470

Now when using the port 5 8 7 this means you're using less encryption.



39

00:03:08.690 --> 00:03:13.550

So basically all emails you send is encrypted that way people can't read your emails without being the



40

00:03:13.550 --> 00:03:15.130

actual recipient.



41

00:03:15.500 --> 00:03:23.190

And in order to actually initiate this sort of encryption we're going to grab her object again as to



42

00:03:23.330 --> 00:03:26.740

object and then we'll call the method starts.



43

00:03:26.750 --> 00:03:30.110

T l s.



44

00:03:30.170 --> 00:03:36.110

If you ended up using the port for 6:5 you can basically skip this step because that means using SSL



45

00:03:38.470 --> 00:03:41.480

OK you should have gone a code to 20 and it says it's a start.



46

00:03:41.500 --> 00:03:42.880

T ls.



47

00:03:42.880 --> 00:03:45.920

Now it's time to set up the email and the passwords.



48

00:03:45.970 --> 00:03:51.370

Keep in mind that you should NEVER save the raw string of your password or email in a script because



49

00:03:51.370 --> 00:03:56.310

basically that means that anyone that sees this script will be able to then see or email password.



50

00:03:56.380 --> 00:04:00.710

Instead what you should do is try using the input function to get that information.



51

00:04:01.000 --> 00:04:03.900

If you don't want your password to be visible when you're typing it in.



52

00:04:04.060 --> 00:04:08.920

You can also use the builtin get pass library that will hide your password as you type it in.



53

00:04:09.010 --> 00:04:15.040

To further explain what we mean by this let's imagine we use the input function to save a password so



54

00:04:15.040 --> 00:04:23.320

we will say What is your password and let's say we're going to save this to some variable called password.



55

00:04:23.540 --> 00:04:28.550

If we were to run this if I were to type my password here it would be visible to the user.



56

00:04:28.610 --> 00:04:33.640

So whatever I type here someone's going to be able to see it if they're watching my computer now.



57

00:04:33.800 --> 00:04:38.670

A better way of doing this is say import get pass.



58

00:04:38.870 --> 00:04:46.230

And then once you've done that we'll say password is equal to and you'll run get pass dot get pass and



59

00:04:46.230 --> 00:04:49.510

you should be saving this to a variable.



60

00:04:49.760 --> 00:04:53.960

And then we can provide password please.



61

00:04:54.250 --> 00:04:58.510

And then if we run this and we start typing something you'll notice that it's invisible and you can



62

00:04:58.510 --> 00:05:00.140

type a really long password here.



63

00:05:00.250 --> 00:05:04.030

And even after you run it it won't really indicate how long your password was.



64

00:05:04.030 --> 00:05:08.980

So this is a secure way to pass information for people that are viewing your computer that rectally.



65

00:05:09.010 --> 00:05:13.500

So just in case that happens you should be using the past instead of just a simple input.



66

00:05:13.510 --> 00:05:17.620

It really depends on how secure you want your script to be or your notebook to be.



67

00:05:17.620 --> 00:05:21.760

But we should never do it just save your password as a variable directly.



68

00:05:21.790 --> 00:05:28.000

So you should never just do something like this password and then say you know password 1 2 3 that's



69

00:05:28.390 --> 00:05:32.430

pretty secure pretty dangerous so you may end up losing your password that way.



70

00:05:33.830 --> 00:05:34.420

OK.



71

00:05:34.800 --> 00:05:40.200

Now let's go over a second step and this specifically for Gmail users where we need to generate an app



72

00:05:40.260 --> 00:05:43.290

password instead of our normal email password.



73

00:05:43.290 --> 00:05:46.530

And this also requires enabling Two-Step authentication.



74

00:05:46.550 --> 00:05:51.450

So there's a link in the notebook that you can follow as far as the instructions are set up to step



75

00:05:51.450 --> 00:05:54.320

factor authentication as well as the app password.



76

00:05:54.330 --> 00:05:57.150

So let's go to that link right now.



77

00:05:57.150 --> 00:06:02.400

So if you go to that link it will take you to sign in using app passwords and Ill say right here if



78

00:06:02.400 --> 00:06:06.750

you use Two-Step Verification so click on that Two-Step Verification link.



79

00:06:06.780 --> 00:06:09.710

And we need to turn on Two-Step Verification.



80

00:06:09.750 --> 00:06:14.580

So this is actually quite simple just go to the Two-Step Verification page here you might have to sign



81

00:06:14.590 --> 00:06:18.450

into Google account select get started and then follow the step by step process.



82

00:06:18.510 --> 00:06:25.110

So if you click here on Two-Step Verification they'll say protect your account with Two-Step Verification



83

00:06:25.230 --> 00:06:30.930

and actually recommend doing any doing this anyways even if you don't intend to use Python for email



84

00:06:30.960 --> 00:06:33.260

because it's just safer for your e-mail address.



85

00:06:33.420 --> 00:06:34.620

So click get started.



86

00:06:34.860 --> 00:06:38.850

Once you've signed in you should see something that looks like this and that basically sets up your



87

00:06:38.850 --> 00:06:42.260

phone number as the second factor of authentication.



88

00:06:42.420 --> 00:06:47.010

So you're going to need to do this if you want to be able to send and receive emails with Python on



89

00:06:47.010 --> 00:06:48.020

a gmail account.



90

00:06:48.240 --> 00:06:53.100

She'll go ahead and type in the phone number that you want to use and they'll confirm you with either



91

00:06:53.100 --> 00:06:58.530

a text message or a phone call and you'll go through those steps and then you'll have to step verification.



92

00:06:58.620 --> 00:06:59.670

Ready to go.



93

00:06:59.790 --> 00:07:03.590

If you already have to step verification that you won't actually see this pop up.



94

00:07:03.600 --> 00:07:07.800

Instead it will just take you to your security page in Gmail and that basically in the case that you're



95

00:07:07.800 --> 00:07:10.420

actually ready to go you already had Two-Step Verification.



96

00:07:10.560 --> 00:07:16.710

So you can confirm that if you've ever received some sort of security code on your phone from Gmail.



97

00:07:16.710 --> 00:07:18.760

So that's setting up Two-Step Verification.



98

00:07:18.930 --> 00:07:21.920

Once you've done that we'll be able to set up our app password.



99

00:07:21.930 --> 00:07:23.490

So let's go back to that link.



100

00:07:23.850 --> 00:07:26.760

And this is the link to sign and using app passwords.



101

00:07:26.760 --> 00:07:30.450

So we'll scroll down here and we're going to now generate an app password.



102

00:07:30.530 --> 00:07:35.580

Open this and we'll click this app passwords page and there's some instructions here on how to generate



103

00:07:35.580 --> 00:07:36.000

them.



104

00:07:36.180 --> 00:07:37.950

Go ahead and click on that passwords.



105

00:07:38.250 --> 00:07:43.080

If you get this result here it means that you have not set up two factor authentication and you need



106

00:07:43.080 --> 00:07:45.030

to go back and do that.



107

00:07:45.030 --> 00:07:50.250

So let's go ahead and show you what it looks like when you have set up two factor authentication with



108

00:07:50.250 --> 00:07:52.250

Two-Step Verification authorized.



109

00:07:52.260 --> 00:07:54.660

You'll have this app passwords page.



110

00:07:54.690 --> 00:07:56.420

You'll go ahead and select an app.



111

00:07:56.430 --> 00:07:58.750

In this case we want to use our mail app.



112

00:07:58.800 --> 00:08:03.990

So that's the app we want to interact with and we can select the device which will select our custom



113

00:08:03.990 --> 00:08:09.440

name and this will just be something like script Python or really whatever you want to call it just



114

00:08:09.440 --> 00:08:15.840

something memorable so you can understand why you generate this app password then hit generates and



115

00:08:15.840 --> 00:08:22.030

it will generate an app password for you so you will copy this and save it somewhere on your computer



116

00:08:22.030 --> 00:08:26.560

because that's the password are going to be using for our actual logon.



117

00:08:26.950 --> 00:08:35.170

So we'll come back here to our notebook and let's actually set up our e-mail so we'll show you how to



118

00:08:35.320 --> 00:08:35.860

get past.



119

00:08:35.860 --> 00:08:40.820

Just to remind you we'll say get past it pass e-mail.



120

00:08:41.050 --> 00:08:56.810

We will say password is equal to get pass get pass password and then finally we will say S-M T.P. objects



121

00:08:57.320 --> 00:09:02.560

we'll call the log in method from that email and password.



122

00:09:02.620 --> 00:09:03.960

So we're going to run this.



123

00:09:03.970 --> 00:09:06.030

So go ahead and type in your e-mail address.



124

00:09:06.090 --> 00:09:09.070

In this case on typing in a gmail address



125

00:09:12.790 --> 00:09:18.010

and the next thing I wanted to do is I'm going to paste in that app password.



126

00:09:18.010 --> 00:09:20.020

So again this is not your normal gmail password.



127

00:09:20.020 --> 00:09:22.090

This is the app password.



128

00:09:22.210 --> 00:09:27.280

So once you've done that you should see a code indicating that it was accepted.



129

00:09:27.280 --> 00:09:29.550

Now we're able to send e-mail.



130

00:09:29.560 --> 00:09:31.870

Keep in mind if you stop right here.



131

00:09:31.900 --> 00:09:34.760

Walk away from a computer for a few hours and then come back.



132

00:09:34.900 --> 00:09:36.260

You may be disconnected.



133

00:09:36.280 --> 00:09:40.070

Just because it took so long so keep So keep that in mind.



134

00:09:40.150 --> 00:09:44.680

You're going to want to if you're in a notebook setting do all you're sending of your e-mail immediately



135

00:09:44.680 --> 00:09:45.990

after logging in.



136

00:09:46.000 --> 00:09:52.570

Otherwise you may get disconnected and you'll have to regenerate another app password so we can basically



137

00:09:52.570 --> 00:09:54.510

send an e-mail.



138

00:09:54.570 --> 00:09:56.070

We're going to need a couple of things.



139

00:09:56.070 --> 00:09:57.580

We need a from address.



140

00:09:57.630 --> 00:10:00.770

So we need to indicate where are the actual e-mails coming from.



141

00:10:00.840 --> 00:10:02.550

This is going to be your e-mail again.



142

00:10:02.550 --> 00:10:05.390

So we will say from address is equal to my e-mail.



143

00:10:05.640 --> 00:10:10.170

We need a new address and that's going to be the e-mail address that you want to send it to.



144

00:10:10.170 --> 00:10:12.120

That's the e-mail you user of your recipient.



145

00:10:12.120 --> 00:10:14.410

I will send myself an e-mail here.



146

00:10:15.240 --> 00:10:19.600

And then the subject line so we'll have that be an input.



147

00:10:19.600 --> 00:10:22.660

So enter the subject line.



148

00:10:24.160 --> 00:10:26.920

And then we'll have the actual body or message.



149

00:10:26.950 --> 00:10:35.260

We can also have that be input and through the body message and then the way the message is constructed



150

00:10:35.650 --> 00:10:44.610

is asked to be subject Colan space than the actual subject itself.



151

00:10:44.850 --> 00:10:51.300

And then a new line that indicates that the subject has stopped and then you paste in the rest of the



152

00:10:51.300 --> 00:10:52.030

message.



153

00:10:52.170 --> 00:10:57.780

Because the way the sexual function is going to work is it's going to except one giant string to indicate



154

00:10:57.780 --> 00:11:00.100

both the subject and the message body.



155

00:11:00.230 --> 00:11:05.730

And in order to differentiate between the subject and the message it needs this sort of format subject



156

00:11:06.220 --> 00:11:09.110

colon space than the actual subject title.



157

00:11:09.360 --> 00:11:13.160

And then a new line and then the rest of your message.



158

00:11:13.290 --> 00:11:21.210

So once you've done that you'll say awesome T.P. object you call the send the male method off of this



159

00:11:21.630 --> 00:11:27.060

and then you'll passen your from address your to address.



160

00:11:27.060 --> 00:11:31.500

So the headers are sending to and then the actual string message.



161

00:11:31.500 --> 00:11:35.050

So I'm sending right now an address for myself to myself.



162

00:11:35.070 --> 00:11:38.640

I recommend you just do the same though you can quickly check it when you log in.



163

00:11:38.820 --> 00:11:40.540

But let's run this.



164

00:11:40.570 --> 00:11:47.940

We'll enter the subject line and let's just enter subject new test Python whatever you want and then



165

00:11:47.940 --> 00:11:48.930

enter the body message.



166

00:11:48.930 --> 00:11:49.560

Hello.



167

00:11:49.590 --> 00:11:52.500

This is a test again whatever you want to send.



168

00:11:52.650 --> 00:11:55.130

Run that and right now it's sending it.



169

00:11:55.380 --> 00:11:58.700

If you get back an empty dictionary that means ascending sending was successful.



170

00:11:58.710 --> 00:12:00.580

So you should get something like this back.



171

00:12:00.750 --> 00:12:06.450

If you're getting an error it's most likely having to do with either your connection appear or your



172

00:12:06.450 --> 00:12:10.380

actual email and password combination once you've been able to do that.



173

00:12:10.500 --> 00:12:20.480

You'll want to quit and close your session so you will say S-M T.P. objects quit and that will now close



174

00:12:20.480 --> 00:12:21.610

my connection.



175

00:12:21.620 --> 00:12:26.300

Let's log in using our browser to see if we received the message and then later on we'll see how we



176

00:12:26.300 --> 00:12:29.270

could do that same sort of functionality with Python.



177

00:12:29.270 --> 00:12:35.510

So I'm going to now go to my Gmail inbox and in my Gmail inbox I can see sent 0 minutes ago is a message



178

00:12:35.570 --> 00:12:38.210

from myself so blind carbon copy me.



179

00:12:38.240 --> 00:12:40.670

Hello this is a test and the title is new test.



180

00:12:40.670 --> 00:12:44.890

Python looks like it was all successful excellent work so far.



181

00:12:44.900 --> 00:12:50.700

We'll see you in the next lesson or we discuss how to do this sort of checking automatically with Python.



