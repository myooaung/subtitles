1
00:00:00,610 --> 00:00:07,030
Welcome back recruit in this series of lessons we'll be discussing object oriented programming object

2
00:00:07,060 --> 00:00:13,300
oriented programming or O.P. for short allows programmers to create their own objects that have methods

3
00:00:13,330 --> 00:00:14,540
and attributes.

4
00:00:14,590 --> 00:00:19,900
Recall that after defining a string list dictionary or other data types and objects that are built into

5
00:00:19,900 --> 00:00:25,060
Python you are able to call methods offer them with the dot and then the method name.

6
00:00:25,180 --> 00:00:26,310
Open and close parentheses.

7
00:00:26,350 --> 00:00:34,170
Syntax these methods act as functions that use information about the object as well as the object itself

8
00:00:34,180 --> 00:00:38,530
to return results or change in effect on the current object.

9
00:00:38,530 --> 00:00:44,110
For example this includes appending a new element to a list or counting the number of occurrences of

10
00:00:44,110 --> 00:00:51,470
an element and a tuple object oriented programming allows users to create their own objects.

11
00:00:51,470 --> 00:00:56,690
The general format is often confusing when first encountered and its usefulness may not be completely

12
00:00:56,690 --> 00:01:04,570
clear at first but in general OPI allows us to create code that's repeatable in organized for much larger

13
00:01:04,570 --> 00:01:10,480
scripts of Python code functions by themselves aren't going to be enough for organization and repeatability

14
00:01:10,960 --> 00:01:16,510
commonly repeated tasks and objects can be defined with O.P. to create code that's more usable at a

15
00:01:16,510 --> 00:01:17,510
larger scale.

16
00:01:17,740 --> 00:01:21,850
Let's check out the syntax for object oriented programming with Python.

17
00:01:21,850 --> 00:01:26,580
Here we can see the general syntax for object oriented programming of Python.

18
00:01:26,620 --> 00:01:32,230
That is how we use the class keyword and then we have some indented methods inside of this block of

19
00:01:32,230 --> 00:01:32,890
code.

20
00:01:33,100 --> 00:01:37,870
We're going to go through all of this in a lot more detail when we actually program it out in a notebook

21
00:01:37,870 --> 00:01:38,510
setting.

22
00:01:38,650 --> 00:01:44,100
But for now let's go ahead and just discuss a very high level overview of what this code is doing.

23
00:01:44,140 --> 00:01:47,350
The first thing you'll notice is the use of the class keyword.

24
00:01:47,350 --> 00:01:52,620
So another way of stating this is that we're creating our own object or we're creating our own class.

25
00:01:52,720 --> 00:01:55,930
So we have that class keyword and then you have the name of the class.

26
00:01:55,930 --> 00:02:01,090
Notice here that we're using camel case that is to say instead of using underscores we actually use

27
00:02:01,090 --> 00:02:02,080
capital letters.

28
00:02:02,170 --> 00:02:06,280
So by convention the names of the classes have capital letters.

29
00:02:06,450 --> 00:02:12,450
Then the very first method here underneath that class is going to be the special init method so it's

30
00:02:12,510 --> 00:02:16,280
underscore underscore and I-T underscore underscore.

31
00:02:16,530 --> 00:02:22,140
And this allows us to create the parameters that will be expected when you actually create an instance

32
00:02:22,260 --> 00:02:24,830
of this object or an instance of this class.

33
00:02:24,840 --> 00:02:30,670
So when we call the name of class it will expect two parameters to be passed in program on in Paramo

34
00:02:30,690 --> 00:02:31,550
two.

35
00:02:31,650 --> 00:02:39,380
And then we use this self keyword to basically assign attributes or methods and relate them to this

36
00:02:39,450 --> 00:02:40,860
actual class.

37
00:02:40,860 --> 00:02:44,650
And this will make more sense when we actually code this out ourselves.

38
00:02:44,760 --> 00:02:50,670
But essentially once you pass in program on the program to they get assigned to the objects own program

39
00:02:50,670 --> 00:02:52,680
one and program two attributes.

40
00:02:52,680 --> 00:02:58,260
So that uses the self keyword there than here at the bottom we have some method and it's performing

41
00:02:58,260 --> 00:02:59,070
some action.

42
00:02:59,100 --> 00:03:06,520
In this case it's just reporting back what parameter 1 was when you made an instantiation of the class.

43
00:03:06,530 --> 00:03:11,010
Let's now go ahead and build up some simple examples in a notebook setting.

44
00:03:11,240 --> 00:03:14,240
So we can clarify all of this new syntax

45
00:03:20,130 --> 00:03:27,990
Let's begin by recalling that if we have a normal object such as a list object my list there's different

46
00:03:27,990 --> 00:03:29,370
methods we can call off of it.

47
00:03:29,460 --> 00:03:35,940
So if I say my list dot and then hit tab I see all this various methods such as appending to a list

48
00:03:36,870 --> 00:03:43,870
or maybe I want to count how many times the number two occurs in my list so I can say count two.

49
00:03:44,430 --> 00:03:47,990
And then if I call my list I can see that I've appended the 4 there.

50
00:03:48,030 --> 00:03:56,160
So these are called methods right here on this object my list and keep in mind in Python really everything

51
00:03:56,190 --> 00:03:57,190
is an object.

52
00:03:57,210 --> 00:04:02,850
And from previous lectures recall that we can use the type function to check the type of an object something

53
00:04:02,850 --> 00:04:03,350
is.

54
00:04:03,540 --> 00:04:07,020
So I can say well what type of object is one.

55
00:04:07,320 --> 00:04:11,980
And it's an integer or what type of object is this empty list right here.

56
00:04:12,090 --> 00:04:17,480
And it's a list object or what type of object is this dictionary.

57
00:04:17,730 --> 00:04:21,900
So if I make a dictionary it says DHC etc..

58
00:04:22,020 --> 00:04:24,270
So here we have everything in Python.

59
00:04:24,270 --> 00:04:25,830
Becoming an object.

60
00:04:25,950 --> 00:04:29,820
Now user defined objects are created using that class keyword.

61
00:04:29,820 --> 00:04:31,010
We just discussed.

62
00:04:31,020 --> 00:04:32,870
So let's see an example of that.

63
00:04:33,360 --> 00:04:37,620
We say class notices syntax highlighting already indicating that it's keyword.

64
00:04:37,770 --> 00:04:43,160
And then we'll create an object called sample.

65
00:04:43,270 --> 00:04:44,890
So we have open close parentheses.

66
00:04:44,890 --> 00:04:47,690
You don't need to worry about passing in anything there.

67
00:04:47,950 --> 00:04:52,330
And then we'll just use the pass keyword and recall that the past Key word basically says just don't

68
00:04:52,330 --> 00:04:53,610
do anything.

69
00:04:53,620 --> 00:04:55,930
So this is the simplest class possible.

70
00:04:55,930 --> 00:05:04,710
Essentially it does nothing except create an instance of the class else say X is sample.

71
00:05:04,930 --> 00:05:11,220
And now if I check what type is X notice back it says its main sample.

72
00:05:11,460 --> 00:05:18,480
So we've already created our own object in the same way that one is an integer list or this empty set

73
00:05:18,480 --> 00:05:25,110
of brackets is an empty list or this dictionary is a dictionary type object or my list is a one two

74
00:05:25,110 --> 00:05:31,560
three four list this x variable is now a sample object.

75
00:05:31,650 --> 00:05:39,970
So now that we have our very basic objects let's go ahead and add onto this by adding in some attributes.

76
00:05:40,020 --> 00:05:46,700
So the syntax for creating an attribute is self daat the attribute name is equal to something.

77
00:05:46,950 --> 00:05:54,510
So we will create a new class called Agent those capitalize in the class there and then typically you

78
00:05:54,510 --> 00:06:01,950
will have the F underscore underscore I and I t underscore underscore and this is a special method used

79
00:06:01,950 --> 00:06:05,540
to initialize the attributes of an object.

80
00:06:05,790 --> 00:06:10,180
So the first thing you're always going to pass and here is the keyword self.

81
00:06:10,440 --> 00:06:17,040
And that allows us to realize that whenever discussing this init method we're talking about itself in

82
00:06:17,040 --> 00:06:22,350
regards to the agent class and then you can passen any attributes here that you want passed in.

83
00:06:22,380 --> 00:06:25,520
Once you create a sample of the agent class.

84
00:06:25,800 --> 00:06:32,370
So let's passen an agents should have a real name.

85
00:06:32,620 --> 00:06:46,050
And then we will say self dot real name is equal to real underscore name and if we run that and we'll

86
00:06:46,050 --> 00:06:52,230
create a new instance of agents all say x is equal to agents.

87
00:06:52,230 --> 00:06:55,760
Now if I just run this by itself it's going to give us an error.

88
00:06:56,040 --> 00:07:00,990
And that's because it says you're missing one required positional argument you're missing a real name.

89
00:07:00,990 --> 00:07:02,550
So what's actually happening here.

90
00:07:02,820 --> 00:07:08,380
Well when you create the agent class what's going to happen is you're going to call this in method this

91
00:07:08,400 --> 00:07:14,110
instantiation method and what the instantiation method says is referencing myself.

92
00:07:14,220 --> 00:07:21,720
I expect a parameter real name and then I'm going to assign my attribute self-taught real name equal

93
00:07:21,720 --> 00:07:28,140
to whatever real name has been passed and the name variable will go ahead and say it's a string.

94
00:07:28,140 --> 00:07:36,400
So that means I'm going to pasand something like James Bond as my real name there and then I will say

95
00:07:36,490 --> 00:07:46,900
X and it's main agent at this location in memory and if I say X dots and a hit tab here it will auto

96
00:07:46,910 --> 00:07:52,580
complete real name and real name is an attribute not a method meaning we don't open.

97
00:07:52,630 --> 00:07:54,520
We don't have open and close is there.

98
00:07:54,520 --> 00:08:01,150
We'll get to methods later on but this is the basic way we can create a class that has attributes.

99
00:08:01,410 --> 00:08:03,740
So the difference between an attribute and a method.

100
00:08:03,790 --> 00:08:07,130
Is that an attribute is a characteristic of an object.

101
00:08:07,240 --> 00:08:13,190
A method is going to be an action or an operation that we can perform with the object.

102
00:08:13,200 --> 00:08:18,270
Now sometimes the syntax is confusing the fact that ases self-taught real name is equal to real name

103
00:08:18,810 --> 00:08:20,250
sometimes to clear this up.

104
00:08:20,250 --> 00:08:25,430
What I like to show you recruits is that instead of saying real name here we could really put whatever

105
00:08:25,430 --> 00:08:33,110
you want we could put something like jelly fish and then say jellyfish here.

106
00:08:33,390 --> 00:08:38,790
So if you run this they'll still work the same in all these lines.

107
00:08:38,970 --> 00:08:45,150
All this is doing is it's connecting the variable you pass and here to the variable that you're assigning

108
00:08:45,450 --> 00:08:47,880
to this attribute called real name.

109
00:08:47,880 --> 00:08:51,060
And you can technically also call this attribute whatever you want.

110
00:08:51,330 --> 00:08:59,730
So we can call this attribute code name and then we rerun this agent class we create this but now instead

111
00:08:59,730 --> 00:09:05,850
of saying real name you'll if you run this Ill say error agent object has an attribute real name.

112
00:09:05,850 --> 00:09:11,430
Instead we redefine this attribute to be called if you hit tab here they'll say code name.

113
00:09:11,670 --> 00:09:14,120
And then the code name is James Bond.

114
00:09:14,250 --> 00:09:20,310
By convention However all three of these are going to have the same variable name.

115
00:09:20,310 --> 00:09:24,870
So you'll always see it as everything having the same shared variable name.

116
00:09:24,870 --> 00:09:26,760
So we'll say this is a real name.

117
00:09:26,880 --> 00:09:30,290
This is real name and this is real name as well.

118
00:09:30,600 --> 00:09:31,770
And if you run all this.

119
00:09:31,770 --> 00:09:34,350
Make sure that says X-type real name.

120
00:09:34,350 --> 00:09:35,910
And then we see James Bond there.

121
00:09:36,060 --> 00:09:39,780
So hopefully that shows you the relationship of how this is actually being created.

122
00:09:39,840 --> 00:09:45,510
You're passing in a parameter here and then it's the finding some attribute that's connected to this

123
00:09:45,620 --> 00:09:48,920
aging object to it or a variable you passed in.

124
00:09:48,930 --> 00:09:54,300
So that's why we're able to call X the real name because we're saying self-taught real name is equal

125
00:09:54,300 --> 00:09:55,590
to whatever you passed in.

126
00:09:55,630 --> 00:10:00,000
And in our case we passed in James Bond.

127
00:10:00,000 --> 00:10:04,920
Now if we wanted more than just a single attribute we could keep adding on attributes.

128
00:10:04,920 --> 00:10:11,790
So agents may have an eye color and they may have a height and then what we can do here is set up all

129
00:10:11,790 --> 00:10:18,270
those attributes we'll say self-taught the eye color of the agent is equal to whatever you pass in as

130
00:10:18,270 --> 00:10:19,390
eye color.

131
00:10:19,410 --> 00:10:25,340
And then we can say self-taught height is equal to whatever you passed in as height.

132
00:10:25,350 --> 00:10:30,400
So then when we run that and if we try to run this again you'll notice you get an error it says.

133
00:10:30,480 --> 00:10:32,910
Now we're missing eye color and height.

134
00:10:32,910 --> 00:10:34,960
So you need to pass those in as well.

135
00:10:35,520 --> 00:10:42,860
So we will pass in let's say green for eye color and we'll just use something like centimeters for height

136
00:10:43,380 --> 00:10:46,130
and we can just pass this in as a number so 175.

137
00:10:46,260 --> 00:10:50,810
So far we have no real checks as far as what data should be passed in.

138
00:10:50,820 --> 00:10:52,920
So technically you can pass in a dictionary here.

139
00:10:52,940 --> 00:11:01,130
The Python wouldn't complain and now we have an agent X variable is now an instance of an agent object

140
00:11:01,140 --> 00:11:06,160
so if we say type of x it's going to say it's an agent.

141
00:11:06,160 --> 00:11:12,370
And if we recall just X it says this agent at this location and your computer's memory.

142
00:11:12,370 --> 00:11:18,130
And now we can say X dots and hit tab and notice we have other attributes we can check the color of

143
00:11:18,130 --> 00:11:19,120
the agent.

144
00:11:19,240 --> 00:11:24,720
We can check the height of the agents and you can check the real name of the agents.

145
00:11:24,790 --> 00:11:32,560
So all this is doing is it's taking in when you instantiate your method or your object it's taking in

146
00:11:32,860 --> 00:11:35,740
whatever parameters you wanted there inside the init method.

147
00:11:35,740 --> 00:11:37,550
So that's all the init method it's doing.

148
00:11:37,660 --> 00:11:43,510
It's when you do your very first creation or instantiation of this object called Agent it's going to

149
00:11:43,510 --> 00:11:49,960
expect these parameters passed then and then it's going to assign those parameters to its attributes

150
00:11:50,140 --> 00:11:55,870
and the attributes are going to match up the same name as the parameters you pass in here.

151
00:11:56,010 --> 00:12:02,970
Now there can also be a class object attribute in the class object attribute is going to be the same

152
00:12:02,970 --> 00:12:05,790
for any instance of the class.

153
00:12:05,790 --> 00:12:16,940
So what I mean by that is outside of this method I can say Planetes is equal to earth and this is now

154
00:12:16,940 --> 00:12:22,730
it's known as a class object attribute.

155
00:12:22,800 --> 00:12:29,070
And what this means is that this class object attribute is going to be true and already be set for you

156
00:12:29,370 --> 00:12:32,280
for any instance of Agent class.

157
00:12:32,280 --> 00:12:38,460
So right now I have X as the agent James Bond who has green eyes and he's 175 centimeters tall.

158
00:12:38,460 --> 00:12:43,140
If I create other agents called Sally.

159
00:12:43,610 --> 00:12:51,840
Maybe her eyes are blue and she's a hunter in 60 centimeters tall and there's no complaints there.

160
00:12:51,890 --> 00:12:55,340
And when I say X dots Let's rerun this again.

161
00:12:55,370 --> 00:12:57,450
Make sure all the cells are in.

162
00:12:57,740 --> 00:12:58,870
If I say x.

163
00:12:58,940 --> 00:13:03,530
So that's the James Bond agent and they check his real name his real insurance spawn.

164
00:13:03,560 --> 00:13:07,280
If I check Y's real name her real name is Sally.

165
00:13:07,640 --> 00:13:14,300
With this class object attributes I didn't get a chance to find it inside of the agent call for X or

166
00:13:14,300 --> 00:13:20,360
Y and that's because a class object attribute should be true regardless of whatever instance the agent

167
00:13:20,360 --> 00:13:21,770
class is being created.

168
00:13:21,770 --> 00:13:25,500
So hopefully every single agent lives on planet Earth.

169
00:13:25,550 --> 00:13:30,350
So I know that something is going to be true regardless of what their name is eye color or height is.

170
00:13:30,420 --> 00:13:35,130
So you can create a class object attribute that's always going to do the same for any instance.

171
00:13:35,330 --> 00:13:43,640
Meaning if we take a look at the calls on x and y I can say X dots and have planet there and it's going

172
00:13:43,640 --> 00:13:47,430
to be Earth and it's the same for white planet Earth.

173
00:13:47,430 --> 00:13:52,250
So both James Bond and Sally are always going to be on planet Earth and I don't need to define that

174
00:13:52,310 --> 00:13:57,710
as a parameter because it's outside of this method and it's on the very first thing.

175
00:13:57,710 --> 00:14:02,720
So this is where your class object attributes go and it's going to be an attribute that you want to

176
00:14:02,780 --> 00:14:03,750
always be true.

177
00:14:03,760 --> 00:14:08,150
And notice here we also don't need to then use the self parameter.

178
00:14:08,180 --> 00:14:13,100
So when you're first beginning you won't be using class objects attributes often but you should be aware

179
00:14:13,130 --> 00:14:14,950
that they can exist here.

180
00:14:14,960 --> 00:14:19,700
All right so far we've learned about the very basic syntax of creating a class.

181
00:14:19,700 --> 00:14:26,030
Again if we go up here the very basic syntax is class the capitalized name of that class and then we

182
00:14:26,030 --> 00:14:27,170
can have passed here.

183
00:14:27,440 --> 00:14:33,530
If you want a class that has attributes you almost always will you will call a class and then have this

184
00:14:33,530 --> 00:14:36,520
special init method with the self keyword.

185
00:14:36,680 --> 00:14:40,970
The parameters you're going to pass for your attributes and then you're going to do the actual assignment

186
00:14:40,970 --> 00:14:42,090
of these attributes.

187
00:14:42,140 --> 00:14:46,520
So you're going to pass in this parameter and assign it to some attribute where the self-talk keyword

188
00:14:46,580 --> 00:14:53,410
is basically telling Python hey this attribute called real name is being assigned to itself agent.

189
00:14:53,900 --> 00:14:58,190
And then if you want a class object attribute that's going to be the very first thing under the class

190
00:14:58,490 --> 00:15:01,950
and you call it appear and you no longer need to use a self-taught keyword.

191
00:15:01,970 --> 00:15:06,970
Again not going to be using it very often as you first start off with object oriented programming.

192
00:15:07,010 --> 00:15:09,650
You should be aware that it's an option for you.

193
00:15:09,740 --> 00:15:11,270
That's the basics of attributes.

194
00:15:11,270 --> 00:15:14,630
Again these are characteristics of an instance of this class.

195
00:15:14,870 --> 00:15:19,700
If we actually want to perform methods on this class we're going to have to use a slightly different

196
00:15:19,700 --> 00:15:20,270
syntax.

197
00:15:20,300 --> 00:15:23,660
And we're going to add them on below our instantiation.

198
00:15:23,960 --> 00:15:26,900
So let's go ahead and cover methods in our next lesson.

199
00:15:26,960 --> 00:15:27,790
We'll see there.

