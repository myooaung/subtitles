1
00:00:04,310 --> 00:00:09,260
Welcome back recruit to finish off our discussion of object oriented programming we're going to discuss

2
00:00:09,290 --> 00:00:12,340
private methods as well as special methods.

3
00:00:12,350 --> 00:00:18,530
Let's begin by showing you how to add a private method here we can see our agent class from the last

4
00:00:18,530 --> 00:00:23,620
couple of lessons and we have this method report method and true name method.

5
00:00:23,870 --> 00:00:30,830
So if I run this in let's define and agents will say A is equal to an agent and we're going to need

6
00:00:30,830 --> 00:00:33,770
a first name so we'll just use what we did last time.

7
00:00:33,770 --> 00:00:46,180
Alan last name Turing and the code name will be hero and if we hit a dot and then hit tab you'll see

8
00:00:46,180 --> 00:00:50,350
a dropdown list of the methods that are available as well as the attributes.

9
00:00:50,500 --> 00:00:59,560
So we can say report as a method or we can call an attribute such as their first name and we can see

10
00:00:59,560 --> 00:01:00,630
Alan.

11
00:01:00,670 --> 00:01:05,860
Now what if you actually wanted to hide a method maybe you have a method in your class that's really

12
00:01:05,860 --> 00:01:11,620
more for designing the upkeep of the class maybe have some methods that you want to call within other

13
00:01:11,620 --> 00:01:17,080
methods and you don't really want them available to users for fear that they may use them incorrectly.

14
00:01:17,080 --> 00:01:23,470
Well you can do is create a private method and private methods look the same as a normal method except

15
00:01:23,470 --> 00:01:27,700
you start them off with a single underscore and then you call the method or whatever you want.

16
00:01:27,700 --> 00:01:31,550
You can say private method or just private.

17
00:01:31,630 --> 00:01:37,480
It's up to you but the key here is that they start with a single underscore and then what you can do

18
00:01:37,660 --> 00:01:44,260
is say self and then really whatever you want here we'll just have self and we'll have this method just

19
00:01:44,260 --> 00:01:48,730
say Prince private method.

20
00:01:48,740 --> 00:01:57,000
So the purpose of this private method is really just to work with other methods inside of your object.

21
00:01:57,170 --> 00:02:00,720
You noticed here in true name we had to call self-taught report.

22
00:02:00,890 --> 00:02:05,930
Maybe you're looking for additional functionality that you don't want to have available as a normal

23
00:02:05,930 --> 00:02:06,620
method.

24
00:02:06,620 --> 00:02:09,380
Instead maybe you just want to have a as a private method.

25
00:02:09,380 --> 00:02:11,270
That way you can use it within the object.

26
00:02:11,360 --> 00:02:16,430
But whoever is the user using this new agent class when they create one it won't be available to them.

27
00:02:16,430 --> 00:02:19,730
So that's really the idea of the private method by default.

28
00:02:19,730 --> 00:02:26,420
Python is very open by its nature and other concepts from other languages such as Java Users will be

29
00:02:26,420 --> 00:02:29,950
familiar with kind of public versus private ideas.

30
00:02:29,960 --> 00:02:37,940
It's actually really hard to obscure your code in Python so if you have a script in Python it becomes

31
00:02:37,940 --> 00:02:42,290
very difficult to try to hide your code from someone else who is going to use it.

32
00:02:42,290 --> 00:02:43,380
So keep that in mind.

33
00:02:43,550 --> 00:02:49,490
This idea of private method is really just to kind of guide the user into indicating that they shouldn't

34
00:02:49,490 --> 00:02:51,670
be messing around with this private method.

35
00:02:51,680 --> 00:02:57,020
The idea behind the private method is not to hide anything from the user itself.

36
00:02:58,260 --> 00:03:00,420
So we're going to run this cell again.

37
00:03:00,430 --> 00:03:06,780
Has the private method we're going to recreate our agents and then notice we all say report first name

38
00:03:07,200 --> 00:03:12,230
and then if I say a dot and then hit tab I won't see the private method.

39
00:03:12,240 --> 00:03:19,170
So basically this method is not immediately visible to the user and that helps the user realize that

40
00:03:19,170 --> 00:03:23,580
they shouldn't be playing around that method that it's not really meant for them to interact with.

41
00:03:23,580 --> 00:03:28,680
However if you do want to call a private method all you do is sort of an underscore and then you'll

42
00:03:28,680 --> 00:03:31,890
end up seeing a bunch of other methods and attributes.

43
00:03:31,890 --> 00:03:36,650
And these are a mix of private as well as just special methods.

44
00:03:36,660 --> 00:03:39,230
And we're going to play around with some of these later on.

45
00:03:39,420 --> 00:03:42,090
But notice here at the very bottom we can see our private method.

46
00:03:42,090 --> 00:03:45,400
So again private doesn't mean that you're hiding this from the user.

47
00:03:45,420 --> 00:03:50,790
That really means that you're just guiding the user into realizing that they probably shouldn't be using

48
00:03:50,790 --> 00:03:55,440
this private method unless they really are familiar if the object itself.

49
00:03:55,440 --> 00:03:57,650
Now we saw a list of a bunch of special methods.

50
00:03:57,660 --> 00:04:04,920
Let's go ahead and discuss those special methods allow you to interact with pythons built in functionality.

51
00:04:05,160 --> 00:04:09,990
For example imagine I wanted to print the instance of my agent.

52
00:04:09,990 --> 00:04:11,710
So I said print a.

53
00:04:12,000 --> 00:04:17,430
Well what happens is by default I just get back main agent object at this location in memory.

54
00:04:17,430 --> 00:04:20,270
What if I wanted to check the length of my agent.

55
00:04:20,310 --> 00:04:21,540
Does that even make sense.

56
00:04:21,540 --> 00:04:23,200
Should an agent have a length.

57
00:04:23,430 --> 00:04:29,100
Well in this case you'll notice that it says object of type agent has no length but maybe you're working

58
00:04:29,100 --> 00:04:34,750
with some sort of other object that you've created where you would like a result for length.

59
00:04:34,800 --> 00:04:40,470
In that case you'll need to use special methods special methods allow you to interact with builtin Python

60
00:04:40,470 --> 00:04:45,070
functionality such as the built in print function or the built in length function.

61
00:04:45,450 --> 00:04:49,500
Let's go ahead and explore these ideas by creating a new class.

62
00:04:49,650 --> 00:04:59,530
We're going to create a class called book and we will say the F and our special method in it and this

63
00:04:59,530 --> 00:05:06,550
is special because basically initialises all the parameters will take in a title and author and the

64
00:05:06,550 --> 00:05:08,080
pages of a book.

65
00:05:08,930 --> 00:05:11,320
And then we'll do the following we'll say self.

66
00:05:11,540 --> 00:05:23,590
Title is equal to title self the author is equal to author and self-taught pages is equal to pages.

67
00:05:23,840 --> 00:05:31,520
And then we will add in a special method underscore underscore as TR underscore underscore self and

68
00:05:31,520 --> 00:05:36,920
what this special method does is it provides a string representation of the book.

69
00:05:37,250 --> 00:05:44,780
And when you actually call Prince on an object what it does is it looks at the class of the object and

70
00:05:44,780 --> 00:05:46,220
then it looks for this method.

71
00:05:46,280 --> 00:05:49,950
It looks for the string representation that it can print out.

72
00:05:49,970 --> 00:05:55,250
So in this case what we're going to do is we're going to return String wrap.

73
00:05:55,250 --> 00:05:57,690
Just we can get an idea of how this would work.

74
00:05:57,770 --> 00:06:01,490
So create a book with the variable b.

75
00:06:02,630 --> 00:06:05,270
Whoops forgot to add in the title.

76
00:06:05,270 --> 00:06:14,420
So we'll say the title is on Iraq's The author will be James Bond and the number of pages will be 200

77
00:06:14,420 --> 00:06:15,330
pages.

78
00:06:15,330 --> 00:06:15,800
There we go.

79
00:06:15,800 --> 00:06:17,980
So now we've created our book object.

80
00:06:17,990 --> 00:06:21,650
Let's go ahead and print out our book object and see what happens.

81
00:06:21,830 --> 00:06:28,430
We get back string rep which means when the function is called on B the print function looks at your

82
00:06:28,430 --> 00:06:33,220
class book and says OK is there a string representation of this object.

83
00:06:33,350 --> 00:06:38,630
And in that case it looks for this special method underscore underscore as TR underscore underscore

84
00:06:38,990 --> 00:06:42,000
and whatever it returns is what it prints out.

85
00:06:42,080 --> 00:06:46,940
In this case for our class book doesn't make a whole lot of sense to return string representation.

86
00:06:46,940 --> 00:06:52,370
Instead what probably makes more sense when you print out a book is to have a little bit of a mixture

87
00:06:52,400 --> 00:07:07,920
maybe say title is and author is and then we can use that format to pasan self-taught title and self-taught

88
00:07:07,980 --> 00:07:10,400
author I know how I'm using the self here.

89
00:07:10,410 --> 00:07:15,720
This allows the class and the function and the method to understand that when we say self-taught title

90
00:07:15,720 --> 00:07:22,230
we're referring to the book's own title not some global variable called Title which is why it's so important

91
00:07:22,230 --> 00:07:27,490
to understand the use of self when you're working within methods inside of a class.

92
00:07:27,510 --> 00:07:28,680
So let's run this again.

93
00:07:28,680 --> 00:07:30,980
So we read the fine book.

94
00:07:31,080 --> 00:07:32,280
Let's run our book again.

95
00:07:32,290 --> 00:07:35,740
And now when I say Prince B It says title is python rocks.

96
00:07:35,760 --> 00:07:37,460
An author is James Bond.

97
00:07:37,560 --> 00:07:43,550
And the more typical representation of how you would be using your own creation of string representation.

98
00:07:43,560 --> 00:07:48,510
Because if you didn't have this instead you'd be getting something that looks like this agent object.

99
00:07:48,510 --> 00:07:54,580
At some point in your memory now we can do the same thing for length right now if we said what's the

100
00:07:54,580 --> 00:07:56,360
length of the book.

101
00:07:56,620 --> 00:07:59,390
We'd get back object the type book has no link.

102
00:07:59,740 --> 00:08:05,270
And lucky for us there is a attribute that really correlates well to length which is the number of pages.

103
00:08:05,320 --> 00:08:09,500
So we should just have the number of pages be return to do that.

104
00:08:09,790 --> 00:08:14,670
We're going to use the special method that's connected to what the length function does.

105
00:08:14,710 --> 00:08:16,160
And that's just underscore underscore.

106
00:08:16,210 --> 00:08:20,060
L e n underscore underscore pasand self.

107
00:08:20,170 --> 00:08:25,720
And then we're going to return self thought pages so that when you ask how long is the book it just

108
00:08:25,720 --> 00:08:27,990
returns back how many pages it has.

109
00:08:28,570 --> 00:08:34,370
So we say be print's be and if we check the length of the book it returns back 200.

110
00:08:34,420 --> 00:08:39,400
So that's an example of two special methods that you'll be using when you creating your own classes.

111
00:08:39,400 --> 00:08:44,050
Now keep in mind that there's a lot more special methods and just the two if shown here or three if

112
00:08:44,050 --> 00:08:45,540
you count the method.

113
00:08:45,790 --> 00:08:51,280
But right now as you begin to just approach object oriented programming the only ones that you really

114
00:08:51,280 --> 00:08:55,410
need to worry about are the string representation and the length representation.

115
00:08:55,450 --> 00:08:59,990
Those are going to be the ones the most commonly used especially the string representation.

116
00:09:00,130 --> 00:09:07,600
So you can print out your own objects and other ones just to show you various examples is the DTL or

117
00:09:07,600 --> 00:09:09,130
deletes a special method.

118
00:09:09,460 --> 00:09:14,980
And this is what gets returned or what executes when you delete the actual object.

119
00:09:14,980 --> 00:09:21,700
So in this case we can just type in anything and prints a book has been deleted.

120
00:09:21,700 --> 00:09:23,920
So we're going to run this again.

121
00:09:24,010 --> 00:09:28,990
We're going to create a new book b equals book Python rocks James Bond and then we're going to print

122
00:09:28,990 --> 00:09:30,010
the book.

123
00:09:30,010 --> 00:09:35,920
Check the length of the book and if we call the special the L which is a delete statement in order to

124
00:09:35,920 --> 00:09:41,730
delete a variable out of memory we can type and delete book and it says whoops.

125
00:09:41,770 --> 00:09:42,900
Scuse me b.

126
00:09:42,940 --> 00:09:47,200
That's what we find as a variable and then it says A book has been deleted.

127
00:09:47,470 --> 00:09:51,810
And then if we check b it says B is no longer fine.

128
00:09:51,850 --> 00:09:57,650
So by default delete B is going to remove whatever that variable is connected to.

129
00:09:57,700 --> 00:10:05,590
In your memory space however we can add onto it by actually affecting the daily method here.

130
00:10:05,740 --> 00:10:10,980
Or the special method which basically says what would you like to occur in addition to the leading variable.

131
00:10:11,020 --> 00:10:14,800
When you call deletes or DL on the variable itself.

132
00:10:15,130 --> 00:10:19,840
And as we've previously mentioned you're not going to be using private methods or special methods that

133
00:10:19,840 --> 00:10:23,650
often when you're beginning to use object oriented programming.

134
00:10:23,740 --> 00:10:24,670
We'll see you at the next lesson.

135
00:10:24,670 --> 00:10:25,000
Recruit.

