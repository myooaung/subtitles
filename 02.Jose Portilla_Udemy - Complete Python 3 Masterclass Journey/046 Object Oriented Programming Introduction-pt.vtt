WEBVTT
1

00:00:00.610 --> 00:00:07.030

Bem-vindo de volta recrutar nesta srie de lies que estaremos discutindo programao orientada a objeto programao



2

00:00:07.060 --> 00:00:13.300

orientada a objeto ou O. P. em suma, permite que os programadores criem seus prprios



3

00:00:13.330 --> 00:00:14.540

objetos que possuem mtodos e atributos.



4

00:00:14.590 --> 00:00:19.900

Lembre-se de que depois de definir um dicionrio de lista de strings ou outros tipos de dados e objetos que so



5

00:00:19.900 --> 00:00:25.060

construdos no Python, voc pode chamar os mtodos de oferec-los com o ponto e, em seguida, o nome do mtodo.



6

00:00:25.180 --> 00:00:26.310

Abra e feche parnteses.



7

00:00:26.350 --> 00:00:34.170

Sintaxe esses mtodos funcionam como funes que usam informaes sobre o objeto, bem como o prprio objeto



8

00:00:34.180 --> 00:00:38.530

para retornar resultados ou alterar o efeito no objeto atual.



9

00:00:38.530 --> 00:00:44.110

Por exemplo, isso inclui anexar um novo elemento a uma lista ou contar o nmero de



10

00:00:44.110 --> 00:00:51.470

ocorrncias de um elemento e uma programao orientada a objeto de tupla permite que os usurios criem seus prprios objetos.



11

00:00:51.470 --> 00:00:56.690

O formato geral  muitas vezes confuso quando encontrado pela primeira vez e sua utilidade pode



12

00:00:56.690 --> 00:01:04.570

no estar completamente clara no comeo, mas em geral o OPI nos permite criar cdigo que  repetvel em organizados para scripts muito maiores



13

00:01:04.570 --> 00:01:10.480

de funes de cdigo Python por si s no sero suficientes organizao e repetibilidade tarefas e objetos comumente



14

00:01:10.960 --> 00:01:16.510

repetidos podem ser definidos com O. P. para criar cdigo mais utilizvel



15

00:01:16.510 --> 00:01:17.510

em maior escala.



16

00:01:17.740 --> 00:01:21.850

Vamos verificar a sintaxe da programao orientada a objetos com o Python.



17

00:01:21.850 --> 00:01:26.580

Aqui podemos ver a sintaxe geral para programao orientada a objetos do Python.



18

00:01:26.620 --> 00:01:32.230

 assim que usamos a palavra-chave class e, em seguida, temos alguns mtodos recuados dentro desse bloco



19

00:01:32.230 --> 00:01:32.890

de cdigo.



20

00:01:33.100 --> 00:01:37.870

Ns vamos passar por tudo isso com muito mais detalhes quando ns realmente o programarmos em um ambiente



21

00:01:37.870 --> 00:01:38.510

de notebook.



22

00:01:38.650 --> 00:01:44.100

Mas por enquanto vamos em frente e apenas discutir uma viso geral de alto nvel do que esse cdigo est fazendo.



23

00:01:44.140 --> 00:01:47.350

A primeira coisa que voc notar  o uso da palavra-chave class.



24

00:01:47.350 --> 00:01:52.620

Ento, outra maneira de afirmar isso  que estamos criando nosso prprio objeto ou estamos criando nossa prpria classe.



25

00:01:52.720 --> 00:01:55.930

Portanto, temos essa palavra-chave class e, em seguida, voc tem o nome da classe.



26

00:01:55.930 --> 00:02:01.090

Observe aqui que estamos usando um caso de camelo, ou seja, em vez de usar sublinhados,



27

00:02:01.090 --> 00:02:02.080

usamos letras maisculas.



28

00:02:02.170 --> 00:02:06.280

Ento, por conveno, os nomes das classes tm letras maisculas.



29

00:02:06.450 --> 00:02:12.450

Ento, o primeiro mtodo aqui embaixo daquela classe ser o mtodo init especial,



30

00:02:12.510 --> 00:02:16.280

ento  sublinhado sublinhado e sublinhado I-T sublinhado.



31

00:02:16.530 --> 00:02:22.140

E isso nos permite criar os parmetros que sero esperados quando voc realmente criar uma instncia



32

00:02:22.260 --> 00:02:24.830

desse objeto ou uma instncia dessa classe.



33

00:02:24.840 --> 00:02:30.670

Ento, quando chamamos o nome de classe, esperamos que dois parmetros sejam passados no programa em



34

00:02:30.690 --> 00:02:31.550

Paramo dois.



35

00:02:31.650 --> 00:02:39.380

E ento usamos essa palavra-chave self para basicamente atribuir atributos ou mtodos e relacion-los a



36

00:02:39.450 --> 00:02:40.860

essa classe real.



37

00:02:40.860 --> 00:02:44.650

E isso far mais sentido quando ns mesmos codificarmos isso.



38

00:02:44.760 --> 00:02:50.670

Mas, essencialmente, uma vez que voc passar no programa no programa, eles so atribudos ao prprio programa



39

00:02:50.670 --> 00:02:52.680

de objetos e programam dois atributos.



40

00:02:52.680 --> 00:02:58.260

Ento, isso usa a palavra-chave self l do que aqui na parte inferior, temos algum mtodo e est



41

00:02:58.260 --> 00:02:59.070

executando alguma ao.



42

00:02:59.100 --> 00:03:06.520

Neste caso,  apenas reportar o parmetro 1 quando voc fez uma instanciao da classe.



43

00:03:06.530 --> 00:03:11.010

Vamos agora seguir em frente e criar alguns exemplos simples em uma configurao de notebook.



44

00:03:11.240 --> 00:03:14.240

Assim, podemos esclarecer toda essa nova sintaxe.



45

00:03:20.130 --> 00:03:27.990

Vamos comear lembrando que se tivermos um objeto normal, como um objeto de lista, minha lista, h mtodos diferentes



46

00:03:27.990 --> 00:03:29.370

que podemos cancelar.



47

00:03:29.460 --> 00:03:35.940

Ento, se eu disser o meu ponto de lista e, em seguida, aperte a guia Eu vejo todos esses vrios mtodos, como



48

00:03:36.870 --> 00:03:43.870

acrescentar a uma lista ou talvez eu queira contar quantas vezes o nmero dois ocorre na minha lista, ento posso dizer contar dois.



49

00:03:44.430 --> 00:03:47.990

E ento, se eu ligar para a minha lista, posso ver que acrescentei as 4 l.



50

00:03:48.030 --> 00:03:56.160

Ento, esses so chamados de mtodos aqui mesmo neste objeto minha lista e lembre-se no Python realmente tudo 



51

00:03:56.190 --> 00:03:57.190

um objeto.



52

00:03:57.210 --> 00:04:02.850

E de palestras anteriores lembre-se que podemos usar a funo de tipo para verificar o tipo de um objeto



53

00:04:02.850 --> 00:04:03.350

 algo.



54

00:04:03.540 --> 00:04:07.020

Ento eu posso dizer bem que tipo de objeto  um.



55

00:04:07.320 --> 00:04:11.980

E  um nmero inteiro ou que tipo de objeto  essa lista vazia aqui.



56

00:04:12.090 --> 00:04:17.480

E  um objeto de lista ou que tipo de objeto  esse dicionrio.



57

00:04:17.730 --> 00:04:21.900

Ento, se eu fizer um dicionrio, ele diz DHC etc. Ento aqui ns temos tudo em Python.



58

00:04:22.020 --> 00:04:24.270

Tornando-se um objeto.



59

00:04:24.270 --> 00:04:25.830

Agora, objetos definidos pelo usurio so criados usando essa palavra-chave de classe.



60

00:04:25.950 --> 00:04:29.820

Ns acabamos de discutir.



61

00:04:29.820 --> 00:04:31.010

Ento vamos ver um exemplo disso.



62

00:04:31.020 --> 00:04:32.870

Dizemos que o destaque da sintaxe dos avisos de classe j indica que  uma palavra-chave.



63

00:04:33.360 --> 00:04:37.620

E ento vamos criar um objeto chamado sample.



64

00:04:37.770 --> 00:04:43.160

Ento, temos parnteses de fechamento aberto.



65

00:04:43.270 --> 00:04:44.890

Voc no precisa se preocupar em passar nada l.



66

00:04:44.890 --> 00:04:47.690

E ento, vamos apenas usar a palavra-chave pass



67

00:04:47.950 --> 00:04:52.330

e lembrar que a palavra-chave anterior basicamente diz apenas no fazer nada.



68

00:04:52.330 --> 00:04:53.610

Ento esta  a classe mais simples possvel.



69

00:04:53.620 --> 00:04:55.930

Essencialmente, ele no faz nada, exceto criar uma instncia da classe, como X  amostra.



70

00:04:55.930 --> 00:05:04.710

E agora, se eu verificar que tipo  o X, ele diz sua amostra principal.



71

00:05:04.930 --> 00:05:11.220

Ento, ns j criamos o nosso prprio objeto da mesma maneira que uma  uma



72

00:05:11.460 --> 00:05:18.480

lista inteira ou este conjunto vazio de colchetes  uma lista vazia ou este dicionrio  um



73

00:05:18.480 --> 00:05:25.110

objeto do tipo dicionrio ou minha lista  uma lista dois agora  um objeto de amostra.



74

00:05:25.110 --> 00:05:31.560

Ento, agora que temos nossos objetos bsicos, vamos em frente e adicionar isso adicionando alguns atributos.



75

00:05:31.650 --> 00:05:39.970

Portanto, a sintaxe para criar um atributo  self daat, o nome do atributo  igual a alguma coisa.



76

00:05:40.020 --> 00:05:46.700

Ento, vamos criar uma nova classe chamada Agent, que capitaliza na classe l



77

00:05:46.950 --> 00:05:54.510

e, em seguida, normalmente voc ter o sublinhado F sublinhado I e eu sublinhado sublinhado



78

00:05:54.510 --> 00:06:01.950

e este  um mtodo especial usado para inicializar os atributos de um objeto.



79

00:06:01.950 --> 00:06:05.540

Ento, a primeira coisa que voc sempre vai passar e aqui  a palavra-chave self.



80

00:06:05.790 --> 00:06:10.180

E isso nos permite perceber que, sempre que discutimos esse mtodo init, estamos falando



81

00:06:10.440 --> 00:06:17.040

de si mesmo em relao  classe agent e, em seguida, voc pode passar quaisquer atributos aqui que voc queira passar.



82

00:06:17.040 --> 00:06:22.350

Depois de criar uma amostra da classe do agente.



83

00:06:22.380 --> 00:06:25.520

Ento, vamos passar um agente deve ter um nome real.



84

00:06:25.800 --> 00:06:32.370

E ento diremos que o nome real do auto-ponto  igual



85

00:06:32.620 --> 00:06:46.050

ao nome sublinhado real e, se executarmos isso, criaremos uma nova instncia de agentes, todos dizendo que x  igual aos agentes.



86

00:06:46.050 --> 00:06:52.230

Agora, se eu apenas executar isso por si s, isso vai nos dar um erro.



87

00:06:52.230 --> 00:06:55.760

E isso  porque diz que voc est perdendo um argumento posicional obrigatrio que est perdendo um nome real.



88

00:06:56.040 --> 00:07:00.990

Ento, o que est realmente acontecendo aqui?



89

00:07:00.990 --> 00:07:02.550

Bem, quando voc cria a classe agente, o



90

00:07:02.820 --> 00:07:08.380

que vai acontecer  que voc vai chamar isso de mtodo neste mtodo de instanciao e o que o mtodo de instanciao diz  referenciar a mim mesmo.



91

00:07:08.400 --> 00:07:14.110

Espero um nome real de parmetro e, em seguida, atribuirei meu nome real autodidata ao atributo igual



92

00:07:14.220 --> 00:07:21.720

a qualquer nome real que tenha sido passado e a varivel de nome seguir em frente e dir que  uma string.



93

00:07:21.720 --> 00:07:28.140

Ento isso significa que eu vou passar algo como James Bond como meu nome real l



94

00:07:28.140 --> 00:07:36.400

e ento eu direi X e  o agente principal neste local na memria e se eu disser X pontos e



95

00:07:36.490 --> 00:07:46.900

uma aba de sucesso aqui ele ir auto completar o nome real e nome real  um atributo e no um mtodo que significa que no abrimos.



96

00:07:46.910 --> 00:07:52.580

Ns no temos aberto e prximo est l.



97

00:07:52.630 --> 00:07:54.520

Ns vamos chegar aos mtodos mais tarde, mas esta  a maneira bsica que podemos criar uma classe que tenha atributos.



98

00:07:54.520 --> 00:08:01.150

Ento a diferena entre um atributo e um mtodo.



99

00:08:01.410 --> 00:08:03.740

 que um atributo  uma caracterstica de um objeto.



100

00:08:03.790 --> 00:08:07.130

Um mtodo ser uma ao ou uma operao que podemos executar com o objeto.



101

00:08:07.240 --> 00:08:13.190

Agora, s vezes, a sintaxe est confundindo o fato de que o nome



102

00:08:13.200 --> 00:08:18.270

real auto-didata  um nome real, s vezes, para esclarecer isso.



103

00:08:18.810 --> 00:08:20.250

O que eu gosto de mostrar a vocs



104

00:08:20.250 --> 00:08:25.430

recrutas  que em vez de dizer o nome real aqui ns poderamos realmente colocar o que voc quiser, ns poderamos colocar algo como medusas e depois dizer gua-viva aqui.



105

00:08:25.430 --> 00:08:33.110

Ento, se voc executar isso, eles ainda funcionaro da mesma forma em todas essas linhas.



106

00:08:33.390 --> 00:08:38.790

Tudo o que isso faz  conectar a varivel que voc passa



107

00:08:38.970 --> 00:08:45.150

e, aqui, a varivel que voc est atribuindo a esse atributo chamado nome real.



108

00:08:45.450 --> 00:08:47.880

E voc pode tecnicamente chamar esse atributo como quiser.



109

00:08:47.880 --> 00:08:51.060

Ento ns podemos chamar este nome de cdigo de atributo e ento



110

00:08:51.330 --> 00:08:59.730

ns reexecutamos essa classe de agente que criamos, mas agora em vez de dizer o nome real se voc rodar este objeto Ill say error agent tem um nome real de atributo.



111

00:08:59.730 --> 00:09:05.850

Em vez disso, redefinimos esse atributo para ser chamado se voc clicar na guia aqui, eles dizem o nome do cdigo.



112

00:09:05.850 --> 00:09:11.430

E ento o nome do cdigo  James Bond.



113

00:09:11.670 --> 00:09:14.120

Por conveno No entanto, todos os trs tero o mesmo nome de varivel.



114

00:09:14.250 --> 00:09:20.310

Ento, voc sempre ver isso como tudo com o mesmo nome de varivel compartilhada.



115

00:09:20.310 --> 00:09:24.870

Ento, vamos dizer que este  um nome real.



116

00:09:24.870 --> 00:09:26.760

Este  o nome real e este  o nome real tambm.



117

00:09:26.880 --> 00:09:30.290

E se voc executar tudo isso.



118

00:09:30.600 --> 00:09:31.770

Certifique-se de que diz o nome real do tipo X.



119

00:09:31.770 --> 00:09:34.350

E ento vemos James Bond l.



120

00:09:34.350 --> 00:09:35.910

Ento, espero que isso mostre a relao de como isso est realmente sendo criado.



121

00:09:36.060 --> 00:09:39.780

Voc est passando um parmetro aqui e, em seguida,  encontrar



122

00:09:39.840 --> 00:09:45.510

algum atributo que esteja conectado a esse objeto antigo ou a uma varivel que voc transmitiu.



123

00:09:45.620 --> 00:09:48.920

Ento  por isso que podemos chamar X o nome



124

00:09:48.930 --> 00:09:54.300

real porque estamos dizendo que o nome real autodidata  igual ao que voc passou.



125

00:09:54.300 --> 00:09:55.590

E no nosso caso ns passamos em James Bond.



126

00:09:55.630 --> 00:10:00.000

Agora, se quisssemos mais do que apenas um nico atributo, poderamos continuar adicionando atributos.



127

00:10:00.000 --> 00:10:04.920

Assim, os agentes podem ter uma cor dos olhos e eles podem ter



128

00:10:04.920 --> 00:10:11.790

uma altura e, em seguida, o que podemos fazer aqui  configurar todos os atributos que vamos dizer



129

00:10:11.790 --> 00:10:18.270

autodidata a cor dos olhos do agente  igual ao que voc passar como cor dos olhos.



130

00:10:18.270 --> 00:10:19.390

E ento podemos dizer que a altura autodidata  igual ao que voc passou como altura.



131

00:10:19.410 --> 00:10:25.340

Ento, quando ns executamos isso e se tentarmos executar isso de novo, voc perceber que voc recebeu um erro.



132

00:10:25.350 --> 00:10:30.400

Agora estamos perdendo a cor dos olhos e a altura.



133

00:10:30.480 --> 00:10:32.910

Ento voc precisa passar isso tambm.



134

00:10:32.910 --> 00:10:34.960

Ento, vamos passar digamos verde para



135

00:10:35.520 --> 00:10:42.860

a cor dos olhos e usaremos apenas algo como centmetros para a altura e podemos passar isso como um nmero de 175.



136

00:10:43.380 --> 00:10:46.130

At agora no temos verificaes reais sobre quais dados devem ser passados.



137

00:10:46.260 --> 00:10:50.810

Ento, tecnicamente, voc pode passar em um dicionrio aqui.



138

00:10:50.820 --> 00:10:52.920

O Python no iria reclamar e agora



139

00:10:52.940 --> 00:11:01.130

temos uma varivel do agente X agora  uma instncia de um objeto de agente ento se dissermos o tipo de x ele dir que  um agente.



140

00:11:01.140 --> 00:11:06.160

E se nos lembrarmos apenas de X, ele diz este agente neste local e na memria do seu computador.



141

00:11:06.160 --> 00:11:12.370

E agora podemos dizer X pontos e apertar a aba e perceber



142

00:11:12.370 --> 00:11:18.130

que temos outros atributos que podemos verificar a cor do agente.



143

00:11:18.130 --> 00:11:19.120

Podemos verificar a altura dos agentes e voc pode verificar o nome real dos agentes.



144

00:11:19.240 --> 00:11:24.720

Ento, tudo isso est fazendo  quando voc instancia o seu mtodo



145

00:11:24.790 --> 00:11:32.560

ou o seu objeto est levando em qualquer parmetro que voc queria l dentro do mtodo init.



146

00:11:32.860 --> 00:11:35.740

Ento, esse  todo o mtodo init que est sendo feito.



147

00:11:35.740 --> 00:11:37.550

 quando voc faz sua primeira



148

00:11:37.660 --> 00:11:43.510

criao ou instanciao desse objeto chamado Agent, ele espera que esses parmetros sejam passados e, ento, ele ir atribuir



149

00:11:43.510 --> 00:11:49.960

esses parmetros a seus atributos e os atributos vo combinar o mesmo nome que os parmetros que voc passar aqui.



150

00:11:50.140 --> 00:11:55.870

Agora tambm pode haver um atributo de objeto de classe no



151

00:11:56.010 --> 00:12:02.970

atributo de objeto de classe que ser o mesmo para qualquer instncia da classe.



152

00:12:02.970 --> 00:12:05.790

Ento, o que quero dizer com



153

00:12:05.790 --> 00:12:16.940

isso  fora desse mtodo, eu posso dizer que Planetes  igual a terra e agora  conhecido como um atributo de objeto de classe.



154

00:12:16.940 --> 00:12:22.730

E isso significa que esse atributo de objeto de classe ser verdadeiro



155

00:12:22.800 --> 00:12:29.070

e j estar definido para voc em qualquer instncia da classe Agent.



156

00:12:29.370 --> 00:12:32.280

Ento, agora eu tenho X como o agente James Bond, que tem olhos verdes e ele tem 175 centmetros de altura.



157

00:12:32.280 --> 00:12:38.460

Se eu criar outros agentes chamados Sally.



158

00:12:38.460 --> 00:12:43.140

Talvez seus olhos sejam azuis e ela  uma caadora de 60 centmetros de altura e no h queixas.



159

00:12:43.610 --> 00:12:51.840

E quando eu digo X pontos Vamos repetir isso novamente.



160

00:12:51.890 --> 00:12:55.340

Certifique-se de todas as clulas esto dentro



161

00:12:55.370 --> 00:12:57.450

Se eu disser x.



162

00:12:57.740 --> 00:12:58.870

Ento esse  o agente do James Bond e eles checam seu nome verdadeiro como o verdadeiro spawn do seguro.



163

00:12:58.940 --> 00:13:03.530

Se eu verificar o nome real de Y, seu nome verdadeiro  Sally.



164

00:13:03.560 --> 00:13:07.280

Com esses atributos de objeto de classe, no tive a chance



165

00:13:07.640 --> 00:13:14.300

de encontr-lo dentro da chamada de agente para X ou Y e isso porque um atributo de objeto de



166

00:13:14.300 --> 00:13:20.360

classe deve ser verdadeiro, independentemente de qualquer instncia em que a classe de agente est sendo criada.



167

00:13:20.360 --> 00:13:21.770

Ento, esperamos que todos os agentes vivam no planeta Terra.



168

00:13:21.770 --> 00:13:25.500

Ento, eu sei que algo vai ser verdade, independentemente do nome deles ser a cor dos olhos ou a altura dos olhos.



169

00:13:25.550 --> 00:13:30.350

Assim, voc pode criar um atributo de objeto de classe que sempre far o mesmo para qualquer instncia.



170

00:13:30.420 --> 00:13:35.130

Ou seja, se dermos uma olhada nas chamadas em xey, posso dizer



171

00:13:35.330 --> 00:13:43.640

X pontos e ter o planeta l e ser a Terra, e  o mesmo para o planeta branco Terra.



172

00:13:43.640 --> 00:13:47.430

Ento, James Bond e Sally sempre estaro no planeta Terra e eu no



173

00:13:47.430 --> 00:13:52.250

preciso definir isso como um parmetro, porque est fora desse mtodo e est na primeira coisa.



174

00:13:52.310 --> 00:13:57.710

Ento  para onde seus atributos de objeto de classe vo



175

00:13:57.710 --> 00:14:02.720

e vai ser um atributo que voc quer sempre ser verdadeiro.



176

00:14:02.780 --> 00:14:03.750

E observe aqui que tambm no precisamos usar o parmetro self.



177

00:14:03.760 --> 00:14:08.150

Ento, quando voc est comeando, voc no estar usando os atributos de objetos



178

00:14:08.180 --> 00:14:13.100

de classe com frequncia, mas deve estar ciente de que eles podem existir aqui.



179

00:14:13.130 --> 00:14:14.950

Tudo bem at agora ns aprendemos sobre a sintaxe muito bsica da criao de uma classe.



180

00:14:14.960 --> 00:14:19.700

Novamente, se subirmos aqui, a sintaxe muito bsica 



181

00:14:19.700 --> 00:14:26.030

classear o nome em maiscula daquela classe e ento podemos ter passado aqui.



182

00:14:26.030 --> 00:14:27.170

Se voc quer uma



183

00:14:27.440 --> 00:14:33.530

classe que tenha atributos, voc quase sempre ir chamar uma classe e ento ter este mtodo init especial com a palavra-chave self.



184

00:14:33.530 --> 00:14:36.520

Os parmetros que voc vai passar para seus



185

00:14:36.680 --> 00:14:40.970

atributos e, em seguida, voc far a atribuio real desses atributos.



186

00:14:40.970 --> 00:14:42.090

Ento voc vai passar esse parmetro e



187

00:14:42.140 --> 00:14:46.520

atribu-lo a algum atributo onde a palavra-chave self talk  basicamente dizendo ao Python que este atributo chamado nome real est sendo atribudo a ele mesmo agente.



188

00:14:46.580 --> 00:14:53.410

E se voc quiser um atributo de objeto de classe que ser a primeira coisa sob a classe e



189

00:14:53.900 --> 00:14:58.190

voc o chamar, aparea e no precisar mais usar uma palavra-chave autodidata.



190

00:14:58.490 --> 00:15:01.950

Mais uma vez no vai us-lo com muita freqncia como voc comea com programao orientada a objeto.



191

00:15:01.970 --> 00:15:06.970

Voc deve estar ciente de que  uma opo para voc.



192

00:15:07.010 --> 00:15:09.650

Esse  o bsico dos atributos.



193

00:15:09.740 --> 00:15:11.270

Novamente, essas so caractersticas de uma instncia dessa classe.



194

00:15:11.270 --> 00:15:14.630

Se realmente quisermos executar mtodos nesta



195

00:15:14.870 --> 00:15:19.700

classe, teremos que usar uma sintaxe ligeiramente diferente.



196

00:15:19.700 --> 00:15:20.270

E vamos adicion-los abaixo da nossa instanciao.



197

00:15:20.300 --> 00:15:23.660

Ento, vamos em frente e abordar os mtodos em nossa prxima lio.



198

00:15:23.960 --> 00:15:26.900

Ns vamos ver l.



199

00:15:26.960 --> 00:15:27.790

&nbsp;



