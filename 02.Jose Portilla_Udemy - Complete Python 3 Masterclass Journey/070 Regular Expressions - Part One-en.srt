1
00:00:01,260 --> 00:00:02,440
Welcome back agent.

2
00:00:02,460 --> 00:00:07,250
Let's take some time to discuss regular expressions as a field agent.

3
00:00:07,280 --> 00:00:11,900
You will often need to search through large amounts of text for a particular piece of information such

4
00:00:11,900 --> 00:00:14,000
as an email or a phone number.

5
00:00:14,090 --> 00:00:18,210
Searching for patterns can be done through regular expressions.

6
00:00:18,210 --> 00:00:23,850
Imagine you needed to search a string for a term such as phone you could use the key word that you already

7
00:00:23,850 --> 00:00:24,380
know about.

8
00:00:24,420 --> 00:00:29,820
To do this you would just say the string phone in and then the string you want it to search.

9
00:00:29,820 --> 00:00:36,780
In this case it would return true because the string phone is in that string is the phone here.

10
00:00:36,780 --> 00:00:43,320
Now imagine that you need to find some telephone number such as 4 0 5 5 5 1 2 3 4 you could do the same

11
00:00:43,320 --> 00:00:49,110
action search that string in another string and it would return a boolean indicating whether or not

12
00:00:49,110 --> 00:00:50,070
the string was there.

13
00:00:51,190 --> 00:00:53,790
But what if he didn't actually know the exact phone number.

14
00:00:53,800 --> 00:00:59,050
If all you knew was the format of the number to be three numbers a dash three numbers a dash and then

15
00:00:59,050 --> 00:00:59,940
four numbers.

16
00:01:00,040 --> 00:01:04,900
You would need regular expressions to search through the document for this pattern instead of just a

17
00:01:04,900 --> 00:01:06,950
normal string.

18
00:01:07,150 --> 00:01:10,720
Regular Expressions allow for pattern searching in a text document.

19
00:01:10,720 --> 00:01:14,290
Now the syntax for regular expressions can be very intimidating at first.

20
00:01:14,290 --> 00:01:18,400
Here we can see an example of what the pattern structure looks like for a phone number.

21
00:01:19,830 --> 00:01:24,810
The key thing to keep in mind is that every character type has a corresponding pattern code.

22
00:01:24,930 --> 00:01:29,820
For example digits have the placeholder pattern code of backslash.

23
00:01:30,120 --> 00:01:35,550
The use of the backslash allows Python to understand that this is just a special code and not the actual

24
00:01:35,550 --> 00:01:36,000
letter.

25
00:01:36,010 --> 00:01:44,030
The Python's built in regular expressions model or R E can work if the special pattern codes to search

26
00:01:44,030 --> 00:01:46,430
through the documents to retrieve information.

27
00:01:46,430 --> 00:01:54,550
Let's get an overview of how to use this pattern code syntax.

28
00:01:54,560 --> 00:01:58,010
Let's begin by understanding how to search for basic patterns.

29
00:01:58,010 --> 00:02:08,570
You'll create some example Tex saying something like the agent's phone number is 4 0 8 5 5 5 1 2 3 4

30
00:02:10,270 --> 00:02:13,460
call soome as we just discussed.

31
00:02:13,490 --> 00:02:21,410
You could search for simple strings in the text such as phone in text and you would get Beckie boolean

32
00:02:21,470 --> 00:02:22,880
indicating true or false.

33
00:02:22,940 --> 00:02:25,400
Is that actual string in the text.

34
00:02:25,420 --> 00:02:28,610
But now let's show the format for regular expressions to do this.

35
00:02:28,610 --> 00:02:31,630
We will import the regular expressions module.

36
00:02:31,640 --> 00:02:32,320
R E.

37
00:02:34,040 --> 00:02:38,670
And then we'll assign the pattern phone to a variable called pattern.

38
00:02:39,050 --> 00:02:42,550
So I will say that the string phone is equal to pattern.

39
00:02:42,830 --> 00:02:44,770
Then we can say R E.

40
00:02:45,080 --> 00:02:51,600
Called the search function off of the regular expressions module and then you pass in the pattern and

41
00:02:51,600 --> 00:02:55,490
then you pass in the text and you get back this match object.

42
00:02:55,530 --> 00:02:58,020
And so notice how much more information is here.

43
00:02:59,420 --> 00:03:05,390
This match object will report back not just whether there was a match to the phone but also where the

44
00:03:05,390 --> 00:03:07,610
actual index location spanned two.

45
00:03:07,610 --> 00:03:12,150
So it starts to index 12 and then ends the index 17.

46
00:03:12,170 --> 00:03:15,050
So now let's search for a pattern that we know is not in the text.

47
00:03:15,050 --> 00:03:20,180
So we'll create another pattern variable or really overwrite it and then something like not in text

48
00:03:20,240 --> 00:03:21,630
which we know isn't there.

49
00:03:22,100 --> 00:03:27,730
And if we search for the new pattern in our text we get back none.

50
00:03:27,770 --> 00:03:31,680
Which means we don't really get back anything because there is no match.

51
00:03:31,700 --> 00:03:37,160
So now that we've seen that this are that search function will take the pattern and scan the text and

52
00:03:37,160 --> 00:03:38,750
return a match object.

53
00:03:38,750 --> 00:03:43,730
And if no pattern is found none is returned which in the notebook setting just means that nothing is

54
00:03:43,760 --> 00:03:45,420
output to the cell.

55
00:03:45,710 --> 00:03:52,990
Let's take a closer look at this match object from before we're going to reset pattern as phone and

56
00:03:52,990 --> 00:03:55,100
we're going to run this search again.

57
00:03:55,220 --> 00:04:03,090
We'll say e that search pattern and the text and we're actually say this to the variable match so we

58
00:04:03,090 --> 00:04:06,950
can explore this match object.

59
00:04:06,960 --> 00:04:12,110
So this is a regular expression match object and it has a lot of information that we can grab from it.

60
00:04:12,480 --> 00:04:16,950
We can call the spand method in order to get the actual index location of the span.

61
00:04:18,320 --> 00:04:23,540
And then you could also ask for the start or the end.

62
00:04:23,550 --> 00:04:26,230
In that case by themselves.

63
00:04:26,520 --> 00:04:33,390
And keep in mind if we had multiple matches inside the string we would unfortunately only get back the

64
00:04:33,390 --> 00:04:34,520
first match.

65
00:04:34,800 --> 00:04:44,100
So if I had a string that said my phone once my phone twice and then I tried running the same command

66
00:04:44,160 --> 00:04:52,970
as before saying match r e search for phone inside of this new text.

67
00:04:53,690 --> 00:04:55,450
And then I checked the match itself.

68
00:04:55,460 --> 00:05:00,210
It only turns back one span 3 8 because that's the first metric here.

69
00:05:00,290 --> 00:05:06,030
If I want to find multiple matches or all the matches I can use the find the all function instead.

70
00:05:06,140 --> 00:05:18,670
So I can say match's is equal to r e find all and I will search for Again phone in that text.

71
00:05:19,000 --> 00:05:24,090
And then if I check my matches I get back this list of how many matches I had.

72
00:05:24,340 --> 00:05:30,610
So if we wanted to check how many matches there were I could get the length of this list and if I want

73
00:05:30,610 --> 00:05:36,400
to get back actual match objects then I use the iterator so to show you what I mean by that I can say

74
00:05:36,400 --> 00:05:41,630
for match an R E fine and sort of fine.

75
00:05:41,650 --> 00:05:46,440
All I can say find her and then pass and what are pattern I'm looking for.

76
00:05:46,510 --> 00:05:51,050
So I could be looking for phone again and then pass in the text I want to search.

77
00:05:51,520 --> 00:05:57,790
And what this does is it iterates through this text and then returns each match object that's found.

78
00:05:57,790 --> 00:06:03,520
So just like before when we were using search we returned back the first match object essentially indicating

79
00:06:03,730 --> 00:06:05,320
where we first matched up.

80
00:06:05,410 --> 00:06:09,190
If we use find all it just returns back a list of the strings themselves.

81
00:06:09,310 --> 00:06:15,010
If I want to kind of combine these two by iterating through the text object and then finding every single

82
00:06:15,010 --> 00:06:17,350
match object I use find it.

83
00:06:17,590 --> 00:06:20,710
So you're going to need to essentially use a for loop with this to iterate.

84
00:06:20,800 --> 00:06:26,320
So we're saying for match in our e that find it or you pass in the pattern and the text you want to

85
00:06:26,320 --> 00:06:31,780
search for and then you can print out the actual match object.

86
00:06:31,780 --> 00:06:34,210
And then we get back the match objects and you can do whatever you want.

87
00:06:34,210 --> 00:06:35,140
These match objects.

88
00:06:35,140 --> 00:06:40,180
For instance if you were just interested in the span's you could call the span method off of it run

89
00:06:40,180 --> 00:06:42,670
that and return back the span's.

90
00:06:42,670 --> 00:06:47,740
Now if you wanted the actual text that matched all you need to do is use the group method.

91
00:06:47,740 --> 00:06:54,420
So you could say here group and that returns back the actual text that matched up that you were searching

92
00:06:54,420 --> 00:06:54,870
for.

93
00:06:54,900 --> 00:06:57,760
Essentially what you get back when you use Find all.

94
00:06:58,020 --> 00:07:03,330
So far we've been able to realize the critical functions of the regular expressions module and that

95
00:07:03,330 --> 00:07:09,120
is the search function where again you just pass in a pattern in the text and it returns back the first

96
00:07:09,120 --> 00:07:09,400
match.

97
00:07:09,410 --> 00:07:16,650
Object the find all function which again patterned text and it returns back just the list of matches

98
00:07:16,680 --> 00:07:19,560
indicating the strings that matched and then they find.

99
00:07:19,620 --> 00:07:24,450
Which is essentially a combination of these two where you go through the entire string and you return

100
00:07:24,450 --> 00:07:29,830
back match objects for the actual pattern you're searching for in the text.

101
00:07:29,920 --> 00:07:33,580
Then you can call any methods you are off of that match object.

102
00:07:33,600 --> 00:07:38,760
What we haven't discussed yet is the actual special regular expression syntax for general patterns.

103
00:07:38,760 --> 00:07:41,790
Right now we've only been searching for basic strings.

104
00:07:41,790 --> 00:07:48,470
Up next we're going to discuss how to build these special identifying regular expression pattern codes.

105
00:07:48,540 --> 00:07:49,440
We'll see their agent.

