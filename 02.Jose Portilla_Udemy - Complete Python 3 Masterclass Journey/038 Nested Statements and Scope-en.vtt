WEBVTT
1

00:00:00.640 --> 00:00:05.200

Welcome back to this discussion on nested statements and scope.



2

00:00:05.270 --> 00:00:11.090

Now that you understand functions it's time to discuss scope when defining parameters outside and inside



3

00:00:11.090 --> 00:00:11.780

of functions.



4

00:00:11.780 --> 00:00:18.040

Python uses scope to understand what variable is being referred to inside of the function.



5

00:00:18.050 --> 00:00:20.050

This is best explained through example.



6

00:00:20.060 --> 00:00:23.250

So let's open up a Jupiter notebook and see what we're talking about.



7

00:00:27.930 --> 00:00:30.180

Let's begin with a simple thought experiment.



8

00:00:30.180 --> 00:00:36.420

Imagine I define the variable x and it will be a strain called outside.



9

00:00:36.570 --> 00:00:40.340

Then I'm going to create a function called reports.



10

00:00:40.510 --> 00:00:46.550

It's going to be just a function that takes no parameters and that inside this function I will define



11

00:00:46.550 --> 00:00:54.130

a variable called X called inside and then I'm going to return the object x.



12

00:00:54.300 --> 00:00:58.020

Now what do you expect the result to be when I call report.



13

00:00:58.020 --> 00:01:01.570

Should it be the string outside or should it be the string inside.



14

00:01:01.950 --> 00:01:05.250

Well if you run this you get back inside and intuitively.



15

00:01:05.250 --> 00:01:11.020

Hopefully that makes sense since we can see that X was reassigned inside the report function.



16

00:01:11.020 --> 00:01:15.300

However what do you think will happen when I call print x.



17

00:01:15.300 --> 00:01:17.970

Will that be outside or inside.



18

00:01:18.540 --> 00:01:21.240

And if you guessed inside this is where you're wrong.



19

00:01:21.240 --> 00:01:25.770

In fact this re-assignment is only happening for this function.



20

00:01:25.770 --> 00:01:28.170

It's not happening outside of the function.



21

00:01:28.170 --> 00:01:33.870

The reason we don't see this effect take place is because of something called scope and the idea of



22

00:01:33.870 --> 00:01:39.150

scope in your code is very important to understand in order to properly assign and called variable names



23

00:01:39.600 --> 00:01:40.500

in simple terms.



24

00:01:40.500 --> 00:01:43.980

The idea of scope can be described by three general rules.



25

00:01:43.980 --> 00:01:50.400

The first is that name assignments will create or change local names by default and name references.



26

00:01:50.400 --> 00:02:03.420

Search at most for scopes and the four scopes are local scope enclosing scope global scope and then



27

00:02:03.600 --> 00:02:05.310

built in scope.



28

00:02:05.310 --> 00:02:08.300

So this is also known as the L e.g. B rule.



29

00:02:08.320 --> 00:02:13.450

So L for local E for inclosing G for global and B for built in.



30

00:02:13.470 --> 00:02:18.880

So let's look at each level of these scopes to get an understanding of what we mean by them.



31

00:02:18.930 --> 00:02:22.410

We'll first start off with an example of local scope.



32

00:02:22.410 --> 00:02:27.900

So let's imagine I create that function again report and do this assignment.



33

00:02:27.900 --> 00:02:32.700

This is known as local scope because it's local to this actual function.



34

00:02:32.700 --> 00:02:38.210

So then if I say prints X and I call report I get back local.



35

00:02:38.220 --> 00:02:45.210

Now let's look at an example of inclosing and remember that occurs when a function is enclosed inside



36

00:02:45.210 --> 00:02:46.470

of another function.



37

00:02:46.680 --> 00:02:48.450

And these are called nested functions.



38

00:02:48.450 --> 00:02:54.570

You're not going to use them too much as you start out programming but it is possible so will creates



39

00:02:54.790 --> 00:03:01.670

a variable called X and will say this is global level.



40

00:03:01.890 --> 00:03:15.560

Then we will create a function called enclosing and it will say x is equal to in closing level and inside



41

00:03:15.560 --> 00:03:19.290

of this inclosing function I'm going to put in another function.



42

00:03:19.730 --> 00:03:23.070

And as I mentioned when you're starting off learning about Python you're not going to be doing functions



43

00:03:23.090 --> 00:03:24.740

inside of functions too often.



44

00:03:24.740 --> 00:03:29.800

This is really just to show you scope or the concept of scope.



45

00:03:29.920 --> 00:03:37.050

So I will create a function called inside and then inside this function I will say print x and then



46

00:03:37.200 --> 00:03:45.470

check out my indentation here I will call the inside function inside enclosing.



47

00:03:45.480 --> 00:03:49.710

So now let's see what happens when I call in closing and before we run this let's imagine what's going



48

00:03:49.710 --> 00:03:50.820

to happen here.



49

00:03:50.820 --> 00:03:53.650

I start off with X being reassigned at the global level.



50

00:03:53.670 --> 00:03:54.940

This is global level.



51

00:03:55.200 --> 00:03:56.750

Then I have the inclosing function.



52

00:03:56.800 --> 00:03:58.960

I re-assign X to be inclosing level.



53

00:03:59.070 --> 00:04:06.360

Then I define this function inside of the inclosing function and we can see that basophils indentation.



54

00:04:06.530 --> 00:04:09.710

And then I call inside inside the inclosing function.



55

00:04:09.710 --> 00:04:13.400

So when I run this I get back inclosing level.



56

00:04:13.430 --> 00:04:18.110

So this is the next level after a local inclosing.



57

00:04:18.110 --> 00:04:24.650

So you can imagine that Python when you finally call a variable name all the way inside X it first looks



58

00:04:24.710 --> 00:04:30.470

locally it says is this x variable defined somewhere locally inside this function.



59

00:04:30.560 --> 00:04:33.220

If it doesn't find it it goes up a level.



60

00:04:33.270 --> 00:04:36.010

In closing is this variable x.



61

00:04:36.020 --> 00:04:38.780

The find somewhere inside this enclosing function.



62

00:04:38.780 --> 00:04:41.150

And in fact it is inclosing level.



63

00:04:41.150 --> 00:04:44.060

So that's what it chooses as the value of x.



64

00:04:44.060 --> 00:04:47.120

Now let's go ahead and discover the global level.



65

00:04:47.270 --> 00:04:55.110

So I'm going to delete this line that defines x and inclosing level and then the next level up to find



66

00:04:55.110 --> 00:04:56.720

that X is the global level.



67

00:04:56.720 --> 00:05:02.120

So if I rerun the cell to read the fine these two functions and then I run inclosing I get back.



68

00:05:02.120 --> 00:05:04.130

This is global level.



69

00:05:04.130 --> 00:05:08.670

So again we're going through the levels here local inclosing global and built in.



70

00:05:08.750 --> 00:05:13.570

So we check out local first Python says Well where's the variable x defined.



71

00:05:13.700 --> 00:05:15.770

It looks locally it can't find it.



72

00:05:15.950 --> 00:05:18.440

So then it looks inside an enclosing function.



73

00:05:18.560 --> 00:05:24.280

If there is one there is always an enclosing function and says well X isn't defined here.



74

00:05:24.320 --> 00:05:31.210

And then it looks in the global namespace and global namespace is basically defined as having no indentation.



75

00:05:31.220 --> 00:05:35.110

So it's not indented in any sort of function it goes all the way to the left.



76

00:05:35.120 --> 00:05:39.390

And here we do find that X is a globally defined.



77

00:05:39.530 --> 00:05:43.210

So that's what we choose as this global value.



78

00:05:43.220 --> 00:05:47.750

Now there are built in so built in is one level of of global.



79

00:05:47.930 --> 00:05:55.160

So if it still can't find it in a global assignment it assumes that it's going to be a built in function



80

00:05:55.160 --> 00:05:55.740

or keyword.



81

00:05:55.760 --> 00:06:01.430

And these are keywords such as Eliane for length some or list.



82

00:06:01.430 --> 00:06:06.950

And that's why it's so important they don't reassign these basic terms that have built in functionality



83

00:06:07.250 --> 00:06:11.420

in our part of Python because you start messing up with the scope of Python.



84

00:06:11.810 --> 00:06:20.750

So that means if we can't find X at a local level inclosing level or global level Python is going to



85

00:06:20.750 --> 00:06:27.620

try to see if it's a predefined built in parameter in its code in Python.



86

00:06:27.620 --> 00:06:31.960

But if it's not then finally let's imagine that we say here we have y.



87

00:06:32.360 --> 00:06:39.150

If we run this and then call unclosing it's going to say name error name y is not defined.



88

00:06:39.230 --> 00:06:44.630

So that means it looked at all its levels it looked in local scope enclosing scope it looked at global



89

00:06:44.630 --> 00:06:49.880

keywords and then finally checked everything that's built into Python and it still cannot find why.



90

00:06:49.910 --> 00:06:51.600

So you end up getting this name error.



91

00:06:51.620 --> 00:06:53.260

Why is not defined.



92

00:06:53.450 --> 00:06:59.210

So now that we've seen the levels I quickly want to show one more example of global versus local because



93

00:06:59.210 --> 00:07:03.920

those are really the main ones you're going to be having to deal with understanding global scope versus



94

00:07:03.980 --> 00:07:05.160

local scope.



95

00:07:05.180 --> 00:07:13.350

So I'm going to create X over here and say this is global outside then I will create a simple function



96

00:07:14.350 --> 00:07:27.600

and the function takes an X and it's going to print X is and then we're going to format X there so Notice



97

00:07:27.610 --> 00:07:35.320

what happens if I call my phunk I passen X it says X is global outside because X has already been defined



98

00:07:35.320 --> 00:07:36.390

here globally.



99

00:07:36.770 --> 00:07:48.470

However if later on INSIDE this function I say redefined inside my phunk and then I try to print outs



100

00:07:48.590 --> 00:07:56.780

X again and I run my phunk it will say X is global outside but by the time X comes here Python is doing



101

00:07:56.780 --> 00:08:02.480

that search all over again if first searches the local namespace and it can find here that X has been



102

00:08:02.480 --> 00:08:03.320

defined locally.



103

00:08:03.350 --> 00:08:09.320

So it chooses that it does that before it goes to search for an enclosing function or before searches



104

00:08:09.320 --> 00:08:11.440

for a global assignment.



105

00:08:11.660 --> 00:08:16.020

So that's really EJB local inclosing global and builtin.



106

00:08:16.280 --> 00:08:19.690

It's just the order that Python searches for variable names.



107

00:08:19.700 --> 00:08:23.540

So this allows Python to effectively search the namespace.



108

00:08:23.540 --> 00:08:28.790

Now there may be an occasion where for whatever reason you specifically want to overwrite the global



109

00:08:28.790 --> 00:08:35.480

variable inside of a function in order to do that you can actually use the global keyword for the variable



110

00:08:35.720 --> 00:08:39.760

to indicate that you want to quote grab the global variable.



111

00:08:39.770 --> 00:08:42.020

Keep in mind this is generally not recommended.



112

00:08:42.040 --> 00:08:47.210

A should try your best to avoid this until you become more experienced with Python because it becomes



113

00:08:47.210 --> 00:08:52.790

really easy to accidently create errors this way by overwriting variables in one part of your script



114

00:08:52.910 --> 00:08:55.400

that affect the script in a completely different part.



115

00:08:55.520 --> 00:08:59.690

So we're going to show you how you can use the global keyword but if you're just a beginner in Python



116

00:08:59.780 --> 00:09:01.690

you should really avoid using it.



117

00:09:02.150 --> 00:09:05.120

So here I see is global outside.



118

00:09:05.120 --> 00:09:07.910

I print out X is blah blah.



119

00:09:07.910 --> 00:09:10.560

I read the fine x and then I print out x.



120

00:09:10.580 --> 00:09:12.090

So if I run the cell again.



121

00:09:12.320 --> 00:09:14.230

Notice I get X's global outside.



122

00:09:14.240 --> 00:09:20.570

Read the find in my func and if I were to type x again hopefully by now you've realized it will be global



123

00:09:20.570 --> 00:09:26.560

outside because this reassignments is only in the scope of this function.



124

00:09:26.780 --> 00:09:33.590

It doesn't actually have scope to global levels so this re-assignment only happens inside the scope



125

00:09:33.710 --> 00:09:35.110

locally.



126

00:09:35.180 --> 00:09:35.960

So what does that mean.



127

00:09:35.960 --> 00:09:42.470

Let's imagine that I want to actually affect the global variable and overwrite it inside of my function.



128

00:09:43.070 --> 00:09:48.990

So the way you can use the global keyword is before you ever use the variable inside of a function.



129

00:09:49.010 --> 00:09:54.500

You're going to say global and that the name of the variable and that will tell Python go ahead and



130

00:09:54.500 --> 00:10:01.520

reach out to find this variable in the global namespace and any changes you do locally will affect this



131

00:10:01.520 --> 00:10:03.630

global variable.



132

00:10:03.650 --> 00:10:09.080

However when you're using the global keyword you can't also have it be a parameter name inside your



133

00:10:09.080 --> 00:10:09.890

function.



134

00:10:09.890 --> 00:10:14.350

In fact if you try to run this code Python will warn you of that error.



135

00:10:14.480 --> 00:10:17.040

So we run this and it says syntax error.



136

00:10:17.210 --> 00:10:21.940

The name x is parameter and global and that just doesn't make sense of Python.



137

00:10:22.100 --> 00:10:27.500

It can't have it both ways of dealing with a global variable x but also having some sort of parameter



138

00:10:27.500 --> 00:10:29.370

being passed in the same name.



139

00:10:29.380 --> 00:10:33.380

You'll get confused trying to figure out which one of these two to use.



140

00:10:33.380 --> 00:10:36.850

So we'll go ahead and remove it here from the parameter in our function.



141

00:10:36.850 --> 00:10:39.930

Just want to set the parameter instead what it's going to do.



142

00:10:40.070 --> 00:10:45.140

Reaches out to the global namespace to find global outside it prints it out.



143

00:10:45.140 --> 00:10:46.400

It re-assign it.



144

00:10:46.400 --> 00:10:50.820

I remember re-assigning now the global x and then it's going to print it out again.



145

00:10:50.900 --> 00:10:52.470

So let's run this.



146

00:10:52.550 --> 00:10:54.560

And now Python has no problems.



147

00:10:54.560 --> 00:11:00.020

And then when I call my phunk notice not passing anything anymore I get back.



148

00:11:00.040 --> 00:11:01.660

X is global outside.



149

00:11:01.670 --> 00:11:10.750

Read the fine inside of my function and now unlike last time when I say prints x x at a global level



150

00:11:10.760 --> 00:11:17.270

has now been redefined to be this string and the only way that can happen is if you specifically call



151

00:11:17.510 --> 00:11:20.480

the global keyword in front of that variable.



152

00:11:20.720 --> 00:11:25.880

And as we previously mentioned this is really not recommended for beginners and in general is just poor



153

00:11:25.880 --> 00:11:29.660

programming practice unless you have a very specific use case for it.



154

00:11:29.720 --> 00:11:32.650

And you know very well why you're using global.



155

00:11:32.660 --> 00:11:38.390

And again the reason for that is it becomes really easy to induce bugs somewhere else in your code because



156

00:11:38.390 --> 00:11:43.870

you may have another function somewhere in your script that is making a grab to some global variable.



157

00:11:43.910 --> 00:11:46.360

Assuming it's not being played around with.



158

00:11:46.370 --> 00:11:48.410

Or reassigned in some other function.



159

00:11:48.560 --> 00:11:54.530

Maybe hundreds of lines down so that's why you want to generally avoid this global keyword.



160

00:11:54.620 --> 00:11:56.770

We show it to you now so you're aware of it.



161

00:11:56.810 --> 00:11:58.270

In case you ever do need to use it.



162

00:11:58.490 --> 00:12:00.440

But in general try to avoid it.



163

00:12:00.500 --> 00:12:07.280

Instead use parameters that are passed in and if you do need to affect the global variable instead of



164

00:12:07.280 --> 00:12:13.580

printing it you should do is return X and you're going to be returning the local x.



165

00:12:13.610 --> 00:12:15.400

So let's see what happens there.



166

00:12:15.530 --> 00:12:20.860

So we'll say X is global outside my phunk will pass an X here.



167

00:12:20.930 --> 00:12:22.410

It's going to print format x.



168

00:12:22.460 --> 00:12:25.420

It's going to redefine it and then it's going to return it.



169

00:12:25.580 --> 00:12:28.580

And that's really why we want to do instead of using that global keyword.



170

00:12:28.610 --> 00:12:36.420

So then when you run this and you pass an X and then have a result it goes ahead and says it prints



171

00:12:36.510 --> 00:12:42.520

X is global outside but then your result is now redefined inside my function.



172

00:12:42.750 --> 00:12:47.940

And this is a nice way of having it both ways because if you call X it's still global outside but you've



173

00:12:47.940 --> 00:12:53.750

been able to adapt any changes you want to it and return it and save it as some sort of other variable.



174

00:12:53.770 --> 00:12:57.330

All right that's it for nested statements in scope.



175

00:12:57.330 --> 00:13:02.810

Hopefully this is clear to you as far as how to deal with namespace in Python.



176

00:13:02.860 --> 00:13:03.820

We'll see you at the next lesson.



177

00:13:03.820 --> 00:13:04.150

Recruit.



