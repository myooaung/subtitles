WEBVTT
1

00:00:00.420 --> 00:00:06.900

Welcome back in this lesson you're going to be given word problems to solve by creating functions understanding



2

00:00:06.900 --> 00:00:10.710

functions allows you to solve much harder and more generalized problems.



3

00:00:10.710 --> 00:00:15.120

It's very important to get practice combining everything you've learned so far such as control flow



4

00:00:15.300 --> 00:00:19.060

loops etc. with functions to become an effective programmer.



5

00:00:20.170 --> 00:00:24.060

Many recruits find this jump to solving generalized problems very difficult.



6

00:00:24.280 --> 00:00:29.350

So far you've had a slow and steady increment in the skills you've been learning but understanding functions



7

00:00:29.380 --> 00:00:31.020

gives you a big leap forward.



8

00:00:31.920 --> 00:00:38.330

Sometimes known as a difficulty curve so far your progress in Python has been increasing steadily as



9

00:00:38.330 --> 00:00:42.740

well as your capability to solve more and more difficult problems.



10

00:00:42.740 --> 00:00:47.960

However once you learn about functions you're going to have a huge jump in the level of problem difficulty



11

00:00:48.050 --> 00:00:52.620

they are able to solve just by learning about functions.



12

00:00:52.700 --> 00:00:57.380

So when you have these new problems to solve make sure you're patient with yourself as you begin to



13

00:00:57.380 --> 00:00:59.140

tackle on these harder problems.



14

00:00:59.360 --> 00:01:01.460

And a good piece of advice is to try to break down.



15

00:01:01.460 --> 00:01:06.920

Problem statements into smaller so the problems you can solve either one line of code or just a few



16

00:01:06.920 --> 00:01:07.990

lines of code.



17

00:01:08.090 --> 00:01:12.930

Then you can combine those smaller solutions to a full functional solution.



18

00:01:12.980 --> 00:01:17.060

Remember to take advantage of useful resources for help such as Stack Overflow.



19

00:01:17.060 --> 00:01:21.770

Many of the questions you're going to begin to encounter will be similar to other people's experiences



20

00:01:21.770 --> 00:01:25.320

in the past and will likely already have an easily searchable answer.



21

00:01:26.670 --> 00:01:28.680

Let's have an overview of your function tasks.



22

00:01:28.680 --> 00:01:31.100

Now remember to try your best to all of them.



23

00:01:31.170 --> 00:01:34.590

But if you ever get stuck Don't feel bad about looking at the solutions lesson.



24

00:01:34.590 --> 00:01:39.840

Coming up next often seeing many examples of problems already solved for you helps in gaining those



25

00:01:39.840 --> 00:01:41.310

skills yourself.



26

00:01:41.310 --> 00:01:43.550

Let's quickly go over your actual tests.



27

00:01:47.720 --> 00:01:52.910

Here are the tasks you're going to need to complete using functions and as you can see a basic skeleton



28

00:01:52.910 --> 00:01:57.250

of what the function should look like has been filled in for you in the problem description.



29

00:01:57.480 --> 00:02:02.270

If we take a look at the first example your chomps create a function that takes into integers and returns



30

00:02:02.270 --> 00:02:06.560

true if there are some as time false if there are some is something else.



31

00:02:06.560 --> 00:02:08.500

So here we have the skeleton code for you.



32

00:02:08.720 --> 00:02:13.340

If the name of the function and then the parameters is going to accept and your job is to fill in the



33

00:02:13.340 --> 00:02:17.590

actual code and then below this will have some example inputs and outputs.



34

00:02:17.840 --> 00:02:21.120

So template 0 should be true because there some is ten.



35

00:02:21.170 --> 00:02:22.830

Five plus five returns true.



36

00:02:22.850 --> 00:02:25.670

Sum is 10 to plus 7 does not equal 10.



37

00:02:25.760 --> 00:02:27.180

So it return false.



38

00:02:27.200 --> 00:02:32.480

The basic idea as you'll have a task some skeleton code to fill out and then some example inputs and



39

00:02:32.480 --> 00:02:36.180

outputs so you can tell whether or not you're on the right track.



40

00:02:36.200 --> 00:02:40.690

Task number 2 is create a function that takes into integers and returns true if their sum is 10.



41

00:02:40.700 --> 00:02:42.880

Otherwise return the actual some value.



42

00:02:43.010 --> 00:02:44.540

So note the difference here.



43

00:02:44.540 --> 00:02:46.730

If the sum is 10 we return true.



44

00:02:47.000 --> 00:02:49.820

If it's not 10 then we actually return the number.



45

00:02:49.820 --> 00:02:55.960

So sometimes you'll return the boolean true or other times you're actually going to return the sum task.



46

00:02:55.970 --> 00:02:59.340

Number three is to create a function that takes in a string and returns back.



47

00:02:59.340 --> 00:03:02.090

The first character of that string in uppercase.



48

00:03:02.100 --> 00:03:03.630

So here we see the string hello.



49

00:03:03.670 --> 00:03:10.740

It returned back uppercase h agent returns back capital-T task for create a function that takes on a



50

00:03:10.740 --> 00:03:15.180

string and returns the last two characters if there are less than two characters you should return the



51

00:03:15.180 --> 00:03:17.770

string error and there's a link here.



52

00:03:17.820 --> 00:03:24.870

If you need a bit of a help or a hint here you can see last two Elbot last two of hi hi.



53

00:03:24.900 --> 00:03:28.910

And here we can see we're passing in the string a which has less than two characters.



54

00:03:28.980 --> 00:03:30.930

So return back to string error.



55

00:03:32.760 --> 00:03:39.580

Task 5 is given a list of integers return true if the sequence 1 to 3 is somewhere in that list.



56

00:03:39.600 --> 00:03:42.530

So you should use slicing and a for loop check for this.



57

00:03:42.690 --> 00:03:47.370

For example here we can see in the sequence 1 2 3 we have the sequence 1 2 3 inside of it.



58

00:03:47.490 --> 00:03:52.560

So we say true in this sequence somewhere in this list one to three is an order here.



59

00:03:52.560 --> 00:03:53.850

So we say true.



60

00:03:53.850 --> 00:03:58.560

And in this sequence we have a bunch of ones twos and threes but nowhere along the way do we actually



61

00:03:58.560 --> 00:04:05.270

have one two and three consecutively in a row to return false task.



62

00:04:05.270 --> 00:04:09.880

Number six is given two strings create a function that returns the difference in length between them.



63

00:04:10.100 --> 00:04:13.730

This difference in length should always be a positive number or just 0.



64

00:04:13.730 --> 00:04:18.260

So as a hint you may want to think about using absolute values.



65

00:04:18.450 --> 00:04:20.850

So we're comparing the length of the string and the string.



66

00:04:20.870 --> 00:04:27.790

So string the length difference is zero difference between a and b b the length differences 1 and difference



67

00:04:27.800 --> 00:04:29.750

team B B in a same way.



68

00:04:29.760 --> 00:04:36.960

The difference is one task 7 given a list of integers is the length of the list as an even number.



69

00:04:36.970 --> 00:04:38.350

Return the sum of the list.



70

00:04:38.630 --> 00:04:42.200

If the length of the list is odd return the max value in that list.



71

00:04:42.200 --> 00:04:46.700

So those who are going to have to check for the length the list and then you have two possibilities



72

00:04:47.030 --> 00:04:49.100

of the data type you're going to return.



73

00:04:49.100 --> 00:04:56.630

So we'll call this summer Max here we actually take the max object because it only has 3 or odd element



74

00:04:56.630 --> 00:04:58.640

number for even element number.



75

00:04:58.650 --> 00:05:00.880

We go ahead and sum up all the elements in it.



76

00:05:02.750 --> 00:05:03.880

Task 8 is.



77

00:05:03.890 --> 00:05:07.340

Let's imagine we have agents in the field and they sometimes need to speak in code.



78

00:05:07.580 --> 00:05:12.680

So your job is create a function that takes in a string names such as James or Sindi and replaces all



79

00:05:12.680 --> 00:05:14.300

the vowels with the letter x.



80

00:05:14.450 --> 00:05:21.080

For our purposes consider these letters as vowels A E I O U then additional to this you need to switch



81

00:05:21.080 --> 00:05:23.780

the position of the first and last letters.



82

00:05:23.780 --> 00:05:27.590

So this task is challenging to try to breaking it down into multiple pieces.



83

00:05:27.590 --> 00:05:30.130

We've actually received something pretty similar to this.



84

00:05:30.320 --> 00:05:35.700

We just are now adding on the idea of switching the position of the first and last letters.



85

00:05:35.720 --> 00:05:42.410

So here we can see that James A and E are being replaced by X and then we're switching around J and



86

00:05:42.490 --> 00:05:43.130

S..



87

00:05:43.370 --> 00:05:45.420

So you can see various examples here.



88

00:05:45.440 --> 00:05:47.330

All right best of luck of these tasks.



89

00:05:47.330 --> 00:05:49.720

We'll see you in the next lesson or we go over the solutions.



