1
00:00:00,660 --> 00:00:07,140
Welcome back agent we just discussed how to use regular strings for pattern searching when using regular

2
00:00:07,140 --> 00:00:08,700
expressions library.

3
00:00:08,700 --> 00:00:13,860
Now let's move on to the key part of regular expressions which is the special pattern codes you can

4
00:00:13,860 --> 00:00:16,790
use to build out your own pattern sequences.

5
00:00:16,800 --> 00:00:19,140
We'll start off by discussing character at the fires.

6
00:00:19,140 --> 00:00:24,300
And here we have a table that tries to explain what each character that the fire is.

7
00:00:24,810 --> 00:00:30,370
Basically you'll have special characters and the fires start off with the backslash code and then a

8
00:00:30,370 --> 00:00:33,520
letter indicating what character you're referencing.

9
00:00:33,540 --> 00:00:38,430
So to start off we can look at this example backslash the and this description is a digit.

10
00:00:38,430 --> 00:00:42,150
Essentially you would have this as a placeholder for any digit.

11
00:00:42,420 --> 00:00:48,480
So in your example pattern code you could have a string file underscore backslash the backslash D and

12
00:00:48,480 --> 00:00:53,820
it would look for anything that holds that pattern file underscore and then two digits following it.

13
00:00:53,820 --> 00:00:57,890
For example file underscore 20:5 would match the pattern code.

14
00:00:57,900 --> 00:01:02,130
Here we can also see there's alphanumeric basically indicating letters or numbers.

15
00:01:02,130 --> 00:01:03,950
So alphabet or numerical.

16
00:01:04,070 --> 00:01:10,290
And that's backslash W and this is what a example pattern code could look like backslash w dash and

17
00:01:10,290 --> 00:01:12,110
then three backslash W's.

18
00:01:12,240 --> 00:01:18,180
And that basically says any letter or number followed by a dash and then followed by three letters or

19
00:01:18,180 --> 00:01:19,680
numbers and alphanumerics.

20
00:01:19,770 --> 00:01:22,880
Also include things like underscores So keep that in mind.

21
00:01:23,760 --> 00:01:25,030
Then there's whitespace.

22
00:01:25,170 --> 00:01:30,600
So if you're particularly looking for whitespace in the pattern you can say backslash S and that indicates

23
00:01:30,660 --> 00:01:32,490
a placeholder for whitespace.

24
00:01:32,490 --> 00:01:38,430
So an example pattern code for that would be the letter a backslash s the letter B backslash s letter

25
00:01:38,430 --> 00:01:39,210
C.

26
00:01:39,210 --> 00:01:44,170
And what this does is it indicates that you're looking for a whitespace B whitespace C.

27
00:01:44,370 --> 00:01:46,120
So here we have an example match.

28
00:01:46,410 --> 00:01:52,230
There's also a non digit character placeholder which is backslash capital-T and you can think of the

29
00:01:52,230 --> 00:01:58,520
pattern here as lowercase is a digit of lowercase D and then uppercase is a non digit.

30
00:01:58,530 --> 00:02:03,190
So you can see how these are related to each other and backslash the backslash D-Backs like where they're

31
00:02:03,210 --> 00:02:08,750
all uppercase is going to match up with for instance this pattern ABC because none of these are digits

32
00:02:08,820 --> 00:02:10,860
and they're all in a row with each other.

33
00:02:10,920 --> 00:02:13,360
You also have non-alphanumeric and non-whites base.

34
00:02:13,380 --> 00:02:16,350
Again the capitalized version of their counterparts.

35
00:02:16,380 --> 00:02:19,640
So here you can see some various example matches.

36
00:02:19,650 --> 00:02:22,740
Let's begin by checking out that example of the telephone number.

37
00:02:22,980 --> 00:02:31,910
We will say our text variable is my phone number is 4 0 8 5 5 5 1 2 3 4.

38
00:02:32,030 --> 00:02:40,100
And then we will say phone is equal to our e search and if we actually search the phone number itself

39
00:02:40,100 --> 00:02:49,400
for 0 8 5 5 5 1 2 3 4 in our text will see that phone is that match objects saying where it found that

40
00:02:49,400 --> 00:02:50,260
span.

41
00:02:50,360 --> 00:02:52,690
However we may not always know the actual number.

42
00:02:52,700 --> 00:02:58,640
We just know the pattern where it's three digits a dash three digits and then a dash and then for that

43
00:02:58,640 --> 00:02:59,360
it's.

44
00:02:59,360 --> 00:03:03,740
So what we can do is replace this using the pattern character identifiers.

45
00:03:03,770 --> 00:03:04,700
We just learned about.

46
00:03:04,820 --> 00:03:06,610
In this case we're looking for a digit.

47
00:03:06,620 --> 00:03:12,520
So we will use backslash the tool say backslash d backslash d backslash D.

48
00:03:12,560 --> 00:03:18,340
Then we expect that dash 3 more numbers another dash and then finally four numbers.

49
00:03:18,560 --> 00:03:24,980
However recall that when working with strings these backslashes indicated special escape characters

50
00:03:25,310 --> 00:03:32,090
such as backslash and for a new line or backslash t for a tab to tell Python that we're using these

51
00:03:32,210 --> 00:03:38,080
as a pattern for a regular expression what we do is we add an R right in front of the string.

52
00:03:38,300 --> 00:03:44,060
So that basically tells Python that these aren't really escape slashes such as new line or in the case

53
00:03:44,060 --> 00:03:44,700
tab.

54
00:03:44,850 --> 00:03:48,240
Instead we're using them as a pattern for regular expressions.

55
00:03:48,320 --> 00:03:53,900
So that's why you see this are in front of the strings when working with patterns for regular expressions.

56
00:03:53,900 --> 00:03:59,660
So this rerun the cell and now see what our phone object is and your Lowder's the phone object is again

57
00:03:59,660 --> 00:04:01,170
the exact same thing it's a match.

58
00:04:01,310 --> 00:04:03,490
But if I were to change these numbers around.

59
00:04:03,530 --> 00:04:08,840
So I said 7 7 7 7 for the techs and rerun the cells.

60
00:04:08,960 --> 00:04:13,730
It would still get the match before it would not get the match because it's looking for the exact numbers

61
00:04:14,060 --> 00:04:16,400
here instead we're doing a smarter approach.

62
00:04:16,400 --> 00:04:20,630
We're actually searching for the pattern itself.

63
00:04:20,690 --> 00:04:25,730
And if you ever wanted the actual number you could say the phone object here you see the span.

64
00:04:26,060 --> 00:04:31,820
And if you called the group method we discussed earlier on it it returns the actual piece of string

65
00:04:31,820 --> 00:04:32,600
that matched.

66
00:04:32,600 --> 00:04:36,650
So this is how you could actually grab that phone number itself.

67
00:04:36,680 --> 00:04:40,420
Now notice what we did here for every single digit in this phone number.

68
00:04:40,430 --> 00:04:42,570
We wrote a backslash.

69
00:04:42,890 --> 00:04:48,440
But what if we were looking for a pattern that included 20 digits or 100 digits we wouldn't want to

70
00:04:48,440 --> 00:04:52,760
have to write back slash the 20 50 or 100 times.

71
00:04:52,880 --> 00:04:59,350
For this reason we can use quantifiers to indicate repetition of the same character.

72
00:04:59,460 --> 00:05:01,650
So we already know our character to the fires.

73
00:05:01,650 --> 00:05:08,460
Now let's learn about the quantifiers allowing us to not have to write these multiple times so here

74
00:05:08,460 --> 00:05:13,860
we have the quantified table and basically the way the syntax works is you stick your character identifier

75
00:05:14,190 --> 00:05:20,010
and then immediately after you stick this quantifier if you want to indicate a certain quantity.

76
00:05:20,010 --> 00:05:22,750
So you have various quantities you can choose from.

77
00:05:22,840 --> 00:05:27,770
There's the plus symbol indicating that the character and then the fire occurs one or more times.

78
00:05:27,780 --> 00:05:31,760
So an example of this pattern code could be version backslash w.

79
00:05:31,790 --> 00:05:36,470
So that's alphanumeric dash backslash w alphanumeric plus.

80
00:05:36,480 --> 00:05:42,220
So what this plus indicates is that you're looking for backslash w one or more times.

81
00:05:42,270 --> 00:05:46,740
So an example match could be a dash B one underscore one.

82
00:05:46,740 --> 00:05:50,340
So all of these are alphanumerics that occurred one or more times.

83
00:05:50,340 --> 00:05:53,760
Recall the underscore counts as an alphanumeric.

84
00:05:53,760 --> 00:05:55,720
Now let's imagine you want something to occur.

85
00:05:55,740 --> 00:05:56,580
Exactly.

86
00:05:56,640 --> 00:05:57,540
And the amount of time.

87
00:05:57,540 --> 00:06:02,640
So exactly three times four times you get the idea you can use curly braces in that sense.

88
00:06:02,790 --> 00:06:05,420
So you would stick on your character than the fire.

89
00:06:05,460 --> 00:06:09,460
This case we're looking for backslash capital-T indicating a non digit.

90
00:06:09,690 --> 00:06:12,320
And we want this to occur exactly three times.

91
00:06:12,330 --> 00:06:19,020
So an example match would be ABC 3 non digits if you want a range you're looking for for example occurs

92
00:06:19,020 --> 00:06:20,020
two to four times.

93
00:06:20,160 --> 00:06:25,800
It's the same curly braces except now you indicate the lower limit comma at the upper limit.

94
00:06:25,800 --> 00:06:31,770
So backslash lowercase the curly braces to come for an example match could be one to three.

95
00:06:31,770 --> 00:06:36,470
Another example match could be one two or one two three four because we're looking for a range here.

96
00:06:38,720 --> 00:06:44,210
Alternatively if you're looking for three or more or some and number or more so you don't want to set

97
00:06:44,210 --> 00:06:45,230
an upper limit.

98
00:06:45,230 --> 00:06:50,210
You can just say curly braces your lower limit comma and leave the upper limit blank.

99
00:06:50,210 --> 00:06:57,920
So backslash lowercase w along with curly braces three comma upper limit basically that just says three

100
00:06:57,920 --> 00:06:59,150
or more alphanumerics.

101
00:06:59,180 --> 00:07:00,420
Go ahead and match them.

102
00:07:00,560 --> 00:07:05,580
So you can see any characters here that string will match because it's three or more alphanumerics and

103
00:07:05,660 --> 00:07:11,810
you can see how regular expression code can get a little complicated quite quickly because you're adding

104
00:07:12,080 --> 00:07:13,910
characters in the fires and quantifiers.

105
00:07:13,910 --> 00:07:19,990
But if you break it down you'll be able to see what the actual pattern code is asking for the next quantifier

106
00:07:20,000 --> 00:07:21,940
we can look at is an asterix here.

107
00:07:22,250 --> 00:07:25,930
And that basically indicates if it occurs 0 or more times.

108
00:07:25,940 --> 00:07:32,030
So here we have an example pattern code a than asterisk B strict and then C strict.

109
00:07:32,120 --> 00:07:35,100
And what is asking for does a occur.

110
00:07:35,180 --> 00:07:42,200
Zero or more times followed by be occurring zero or more times followed by C occurring or more times.

111
00:07:42,200 --> 00:07:49,460
So there are a ton of actual patterns that can match up to for example Triple-A than two C's that indicates

112
00:07:49,460 --> 00:07:53,060
that a did occur three times b occurred 0 or more times.

113
00:07:53,150 --> 00:07:56,140
And then you have Z or C occurring two times.

114
00:07:56,150 --> 00:07:59,220
So a very powerful here and it's going to match a lot.

115
00:07:59,220 --> 00:08:04,420
So keep that in mind and then you have a question mark here in the kitting once or none.

116
00:08:04,430 --> 00:08:11,330
So here we can see plurals question mark indicating those s occur once or none.

117
00:08:11,330 --> 00:08:14,860
And so an example match could be plural or could be plurals.

118
00:08:14,890 --> 00:08:18,190
So either it occurs once or no times.

119
00:08:18,290 --> 00:08:26,080
All right let's see how we could transform our original search for a telephone number using quantifiers

120
00:08:27,110 --> 00:08:29,070
will place our example phone.

121
00:08:29,210 --> 00:08:35,360
But now we know the actual mouse who wants to say we're going to replace this with our character identifier

122
00:08:35,420 --> 00:08:41,590
and then saying I want exactly three numbers then a dash then another three numbers.

123
00:08:43,360 --> 00:08:46,920
And then we want four numbers.

124
00:08:47,130 --> 00:08:52,980
And this is now a regular expression pattern code for a phone number with dashes.

125
00:08:53,340 --> 00:09:00,270
So we can run this and see that we check our phone we get back the same match here because we're asking

126
00:09:00,270 --> 00:09:05,850
for three digits in a row followed by a dash followed by three digits in a row followed by a dash followed

127
00:09:05,850 --> 00:09:07,540
by four digits in a row.

128
00:09:09,750 --> 00:09:12,210
Now let's imagine that we wanted to do two tasks.

129
00:09:12,210 --> 00:09:17,520
One was to find phone numbers but then also to be quickly able to extract their area code.

130
00:09:17,520 --> 00:09:19,740
That is the first three digits of the phone number.

131
00:09:19,740 --> 00:09:21,530
These first three digits right here.

132
00:09:21,810 --> 00:09:28,110
What we can do is we can use groups for any general tasks that involves grouping together regular expressions

133
00:09:28,380 --> 00:09:30,740
and that allows us to later break them down.

134
00:09:30,960 --> 00:09:38,400
So to do that we need to learn about the compile function so we all say phone underscore pattern is

135
00:09:38,400 --> 00:09:49,350
equal to r e compile a comp. does it compiles together different regular expression pattern codes.

136
00:09:49,350 --> 00:09:54,750
For example the first pattern could we see here that's just a single pattern code.

137
00:09:54,750 --> 00:09:59,870
But what we could do is think about it as three pattern codes connected by the dash.

138
00:09:59,940 --> 00:10:01,610
So that's exactly what we're going to do here.

139
00:10:01,620 --> 00:10:02,760
We will say our.

140
00:10:02,970 --> 00:10:09,540
And then our quotes and in parentheses we're going to group together three pattern codes.

141
00:10:09,540 --> 00:10:13,490
So the print C's indicate that it's a group of a pattern.

142
00:10:13,530 --> 00:10:20,310
So the first one that's going to go into first print sees is this one right here backslash the curly

143
00:10:20,310 --> 00:10:21,460
braces three.

144
00:10:21,480 --> 00:10:26,760
So there's our first group and then dash and we're going to do our second group which is actually the

145
00:10:26,760 --> 00:10:27,650
same thing.

146
00:10:28,020 --> 00:10:33,510
And then the third group is going to be with the four here.

147
00:10:33,520 --> 00:10:40,240
So what this does is it takes multiple pattern codes and each pattern code is separated with parentheses

148
00:10:40,300 --> 00:10:45,340
as a group and then it compiles them into a single expression.

149
00:10:45,340 --> 00:10:51,750
So what this is going to do is it's going to compile these into this expression that we see right here.

150
00:10:51,790 --> 00:10:57,090
But what's nice about using the compile is that it still understands that these were three separate

151
00:10:57,100 --> 00:11:05,080
groupings so you could call the groupings individually so you Kreator a phone pattern using the compile

152
00:11:05,080 --> 00:11:06,430
function.

153
00:11:06,430 --> 00:11:16,530
So if I say results is equal to r e search and I search for the phone pattern in my text and then I

154
00:11:16,530 --> 00:11:20,310
say results and I group them together.

155
00:11:20,310 --> 00:11:24,840
I see here 4 0 8 5 5 5 7 7 7 7.

156
00:11:24,840 --> 00:11:32,270
Now what I can do is say results group and call them by the group position and the groups words noted

157
00:11:32,270 --> 00:11:33,240
by these princes.

158
00:11:33,260 --> 00:11:40,700
So if I want the first group I can say Group 1 and notice here and a little bit of a differentiation

159
00:11:40,700 --> 00:11:42,280
from normal Python code.

160
00:11:42,500 --> 00:11:44,940
We don't start indexing at zero we're starting at 1.

161
00:11:44,960 --> 00:11:47,260
So group ordering starts at 1.

162
00:11:47,270 --> 00:11:54,330
So if I grab those results and I group and I just say Group 1 it only returns back the first group here.

163
00:11:54,350 --> 00:11:59,350
So if I want a group to essentially that second set of digits I could say Group 2.

164
00:11:59,720 --> 00:12:01,500
In a word turn back five five five.

165
00:12:01,570 --> 00:12:07,900
And if I wanted the third group I would say Group 3 and or return back 7 7 7 7.

166
00:12:08,120 --> 00:12:13,610
And if I ask for a group that is outside of this such as group 4 it's going to say sorry there is no

167
00:12:13,610 --> 00:12:17,740
such group because here we only had three sets of parentheses.

168
00:12:17,810 --> 00:12:20,450
First Group second group and third group.

169
00:12:20,540 --> 00:12:27,590
What's nice about this approach in regards to our first approach is that now we can easily extract parts

170
00:12:27,590 --> 00:12:31,880
of that information while at the same time looking for a complete match.

171
00:12:31,880 --> 00:12:37,880
So if you just call a group with no number it groups together all the patterns you had in your compile

172
00:12:37,880 --> 00:12:40,810
function and then returns back the whole match.

173
00:12:40,820 --> 00:12:45,550
So if you wanted to find phone numbers you could just use this approach and then group them together.

174
00:12:45,920 --> 00:12:52,130
And if you wanted to find phone numbers and there area codes you could use group with nothing and then

175
00:12:52,130 --> 00:12:54,760
say Group 1 and that returns the area code.

176
00:12:54,770 --> 00:12:59,330
So that's why the compile function along of the group method is so powerful.

177
00:13:00,250 --> 00:13:05,010
That's it so far for quantifiers as well as the compile and group function.

178
00:13:05,020 --> 00:13:10,510
Up next all we have left to talk about is some additional regular expression syntax such as wildcard

179
00:13:10,510 --> 00:13:16,030
characters and then or pipe operators and stuff with like starts with or ends with.

180
00:13:16,030 --> 00:13:17,900
Let's quickly review what we covered here.

181
00:13:18,130 --> 00:13:24,580
Basically we discovered that if we don't want to repeat character identifiers often where we can do

182
00:13:24,670 --> 00:13:30,340
is use quantifiers and we have various quantifiers indicated by special character then there's a description

183
00:13:30,340 --> 00:13:32,770
here and we can essentially tack them on.

184
00:13:32,860 --> 00:13:39,280
We also learned that if we want to grab subsections or subgroups of our entire pattern we can use the

185
00:13:39,280 --> 00:13:44,650
compile function to create the actual pattern instead of just passing in the pattern as a whole string

186
00:13:45,340 --> 00:13:47,860
separating each group with parentheses.

187
00:13:47,860 --> 00:13:54,370
And then we can say grouped together off of the search results in order to grab everything together.

188
00:13:54,370 --> 00:13:59,340
But if we only want to grab subgroups we can say a group and then that group position where group positions

189
00:13:59,340 --> 00:14:00,840
start at 1.

190
00:14:00,850 --> 00:14:05,560
All right we'll see you at the next overview where we're going to talk about some additional regular

191
00:14:05,560 --> 00:14:06,640
expression syntax.

