1
00:00:01,490 --> 00:00:05,950
Welcome back recruit Congratulations on completing your first field readiness exam.

2
00:00:06,170 --> 00:00:09,820
Let's check your performance by going over the solutions.

3
00:00:09,820 --> 00:00:15,960
Let's begin by taking a look at your first task which was to open that exam that textfile did this we'll

4
00:00:15,970 --> 00:00:19,190
say with the open function.

5
00:00:19,380 --> 00:00:25,350
And since this notebook is located in the same directory or same folder as the text file it can just

6
00:00:25,350 --> 00:00:28,330
begin to type in the string example text.

7
00:00:28,350 --> 00:00:34,680
And if I hit tab here I should be able to see the option of exam that text in the dropdown and then

8
00:00:34,680 --> 00:00:41,130
for the read only mode that's going to be the string are if you do shift tab here you'll actually get

9
00:00:41,250 --> 00:00:46,680
the documentation string for this open function and we'll discuss documentation strings for functions

10
00:00:46,920 --> 00:00:47,990
later on.

11
00:00:48,120 --> 00:00:51,240
You'll notice that the default mode is read only.

12
00:00:51,270 --> 00:00:55,260
So you actually can just ignore that and leave that blank.

13
00:00:55,350 --> 00:01:00,570
If you only want read permissions Otherwise you can also just type it in here.

14
00:01:00,600 --> 00:01:07,710
Now we're going to say as F so choose f as a variable name and then we will say exam lines is equal

15
00:01:07,710 --> 00:01:11,440
to f dot read lines.

16
00:01:12,860 --> 00:01:17,190
We'll run this and then check out what exam lines looks like.

17
00:01:19,480 --> 00:01:24,940
And here I can see a list of all the lines in the text file.

18
00:01:24,950 --> 00:01:30,890
Up next was the answer how many lines of code are this this file have since they already have exam lines.

19
00:01:30,890 --> 00:01:35,810
I can just check the length of exam lines and it returns back 7.

20
00:01:35,810 --> 00:01:38,030
So there are seven lines in that file.

21
00:01:38,300 --> 00:01:44,040
If I want to print out the fifth line of that file remember that indexing starts at zero.

22
00:01:44,060 --> 00:01:51,550
So I want to print out the index number for if I want the line because it goes 0 1 2 3 4.

23
00:01:51,650 --> 00:01:56,800
So that's a bit of a trick just to check if you remembered that indexing starts at zero.

24
00:01:56,820 --> 00:02:00,120
So pronounce the fifth line it's going to be four.

25
00:02:00,140 --> 00:02:02,590
So you can check on this by coming back up here.

26
00:02:02,660 --> 00:02:07,180
We can count first line second line third line for flying.

27
00:02:07,200 --> 00:02:11,570
The flying is it should be pretty simple so chilling to the basics so far.

28
00:02:11,580 --> 00:02:15,740
Notice if I say for I get back the fifth line should be pretty simple since you only know the basics

29
00:02:15,740 --> 00:02:16,500
so far.

30
00:02:16,840 --> 00:02:17,320
OK.

31
00:02:18,150 --> 00:02:23,540
Test number four was to grab the last line of the text file and save it to a variable called last.

32
00:02:23,710 --> 00:02:25,430
There's different ways of doing this.

33
00:02:25,440 --> 00:02:34,210
The simplest way is to say last is equal to exam underscore lines and then we can use negative indexing

34
00:02:34,420 --> 00:02:39,560
to grab the last line and then if we check out the result of last.

35
00:02:39,670 --> 00:02:40,330
It just says.

36
00:02:40,330 --> 00:02:41,920
Best of luck recruit.

37
00:02:41,920 --> 00:02:47,110
The alternative way would be to count how many lines there are and then pass in the index of the last

38
00:02:47,110 --> 00:02:47,720
line.

39
00:02:47,770 --> 00:02:53,250
But this method allows you to always get the last line regardless of how many lines it actually has.

40
00:02:53,260 --> 00:02:59,910
So negative 1 is a good trick to use their Test Number five is the use indexing to grab the letter O

41
00:03:00,110 --> 00:03:01,930
from the last line of the file.

42
00:03:02,180 --> 00:03:05,240
If we check out what last looks like we have.

43
00:03:05,240 --> 00:03:08,950
Best of luck recruits we can see here we have this character.

44
00:03:09,140 --> 00:03:17,480
Oh and if we start counting off by 0 we can check the index for which is 0 1 2 3 4 for that space and

45
00:03:17,480 --> 00:03:19,280
then 5.

46
00:03:19,410 --> 00:03:25,160
So we will say last and then use indexing pass and index 5 and those brackets and you get back the letter

47
00:03:25,210 --> 00:03:25,660
O.

48
00:03:26,790 --> 00:03:32,850
Task number six was how could you use Python to count how many words there are in the last line.

49
00:03:32,850 --> 00:03:37,540
Well that's simply just using length again and then passing it last here.

50
00:03:37,560 --> 00:03:40,040
Now we can see we have 21.

51
00:03:40,080 --> 00:03:46,230
However that's not the correct answer because 21 is how many characters to are not how many words there

52
00:03:46,230 --> 00:03:46,870
are.

53
00:03:46,980 --> 00:03:50,130
If we take a look at the last line it says Best of luck recruit.

54
00:03:50,130 --> 00:03:52,780
There should only really be 4 words there.

55
00:03:52,830 --> 00:03:57,440
There's 21 characters including the spaces and the period but there's only four words.

56
00:03:57,450 --> 00:03:58,830
So how do we actually do this.

57
00:03:59,040 --> 00:04:07,350
Well recall that strings have a split method you can call off of them which gives you back a list split

58
00:04:07,440 --> 00:04:08,840
on whatever you pass in here.

59
00:04:08,850 --> 00:04:14,580
And by default it splits on spaces and words are separated by spaces which means we can then check the

60
00:04:14,580 --> 00:04:18,330
length of last split.

61
00:04:18,570 --> 00:04:21,500
Run that and then I get back that there were forwards.

62
00:04:21,690 --> 00:04:25,850
We'll discuss more complex methods of analyzing for patterns.

63
00:04:25,940 --> 00:04:33,560
And as regular expressions later on in your training next we have task seven which is what data types

64
00:04:33,560 --> 00:04:35,900
are returned by the following lines of code.

65
00:04:36,260 --> 00:04:40,370
So this is actually pretty straightforward and you can check this just by running these lines of code

66
00:04:40,520 --> 00:04:41,330
in Python.

67
00:04:41,480 --> 00:04:44,930
But the first one is division and division always returns back float.

68
00:04:44,930 --> 00:04:50,360
Here we have an integer being added to a flow which means the result is going to be a float integer

69
00:04:50,360 --> 00:04:51,410
plus integer.

70
00:04:51,440 --> 00:04:54,340
The result is going to be an integer.

71
00:04:54,350 --> 00:05:00,050
Here we have a string to concatenated with the string to which is what happens when you add a string

72
00:05:00,050 --> 00:05:04,130
to another string so that ends up returning a string.

73
00:05:04,130 --> 00:05:11,250
And then here we can see a comparison operation and that will return a boolean past number 8 is basically

74
00:05:11,250 --> 00:05:13,620
asking you to index to grab.

75
00:05:13,620 --> 00:05:14,880
Get me please.

76
00:05:14,970 --> 00:05:20,380
And you can check out the solutions notebook to see how we do this step by step.

77
00:05:20,550 --> 00:05:23,470
But we're essentially just going to do it out here.

78
00:05:24,690 --> 00:05:28,920
The first thing if we say D we can run keys here.

79
00:05:28,960 --> 00:05:29,600
Whoops.

80
00:05:29,670 --> 00:05:32,440
Let's run this cell to make sure we find D.

81
00:05:32,910 --> 00:05:33,420
There we go.

82
00:05:33,420 --> 00:05:36,140
So I see my dictionary keys I have only one key.

83
00:05:36,140 --> 00:05:39,130
Level one on the outer dictionary.

84
00:05:39,150 --> 00:05:42,460
So we'll pass that in level 1.

85
00:05:42,790 --> 00:05:45,520
Run that and then I see I have a list here.

86
00:05:45,850 --> 00:05:51,450
And it looks like I want this dictionary right here which is the third item in the list or index to

87
00:05:51,490 --> 00:05:54,090
0 1 to we run that.

88
00:05:54,090 --> 00:05:56,260
Now we get this dictionary back.

89
00:05:56,280 --> 00:05:59,340
We'll go ahead and grab this key.

90
00:05:59,560 --> 00:06:01,430
Level 2 loops.

91
00:06:01,470 --> 00:06:05,060
Let me make sure we pass that in as a string correctly.

92
00:06:05,520 --> 00:06:06,980
Then I have this list.

93
00:06:07,020 --> 00:06:09,360
And now just indexing off of this.

94
00:06:09,570 --> 00:06:16,620
So I will grab the second index which gets me that sublist where that nested list the first index which

95
00:06:16,620 --> 00:06:21,130
grabs me in the next one and sometimes a lot of recruits tend to end that here.

96
00:06:21,230 --> 00:06:23,180
Number We actually just want the stream.

97
00:06:23,400 --> 00:06:28,000
This object right here is still technically a list of a single string item.

98
00:06:28,020 --> 00:06:33,870
So if we just wanted the string by itself we would add an additional bracket for 0 and then just get

99
00:06:33,870 --> 00:06:34,940
the string itself.

100
00:06:36,030 --> 00:06:41,700
Finally the bonus task was how many unique integers are in this particular list and you're going to

101
00:06:41,700 --> 00:06:44,390
need to use a casting method we haven't shown yet.

102
00:06:44,610 --> 00:06:51,810
Well the easiest way to do this is if you run this you can actually pass in my list into a set and it

103
00:06:51,810 --> 00:06:57,610
returns back the only the unique integers or unique items in the list.

104
00:06:57,690 --> 00:07:05,850
And then we can check the length of this set to see that we have 12 unique integers in this list.

105
00:07:05,850 --> 00:07:06,330
OK.

106
00:07:06,510 --> 00:07:10,910
Excellent work your crew now that you're done with the basics of data types and storage of Python.

107
00:07:11,040 --> 00:07:14,110
Let's move on to learning about control flow with Python.

108
00:07:14,420 --> 00:07:15,530
I'll see you at the next lesson.

