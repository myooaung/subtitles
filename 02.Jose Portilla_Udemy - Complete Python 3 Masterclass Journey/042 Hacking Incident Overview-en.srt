1
00:00:05,830 --> 00:00:10,860
Is glad to connect to your recruit.

2
00:00:10,860 --> 00:00:15,540
We've been infiltrated through a hack and need to get a message from one server to another.

3
00:00:15,540 --> 00:00:19,910
Other agents are right now scrambling to deflect other incoming malware programs.

4
00:00:19,920 --> 00:00:26,520
That means we need your help now to create a method of sending messages that go undetected.

5
00:00:26,550 --> 00:00:31,050
We need to send messages from our local server all the way to our main server.

6
00:00:32,270 --> 00:00:37,520
Unfortunately it looks like the current hack has created some malware that is scanning for possible

7
00:00:37,520 --> 00:00:41,430
messages that contain English words.

8
00:00:41,650 --> 00:00:47,210
If it sees words in the message it will block it from reaching the main server.

9
00:00:47,240 --> 00:00:53,060
However it might be possible to fool that malware scanning tool by scrambling the message so it uses

10
00:00:53,140 --> 00:00:56,090
non English jibberish.

11
00:00:56,190 --> 00:01:03,280
One way to scramble a message like that is using a Caesar cipher a Caesar cipher can attempt to hide

12
00:01:03,280 --> 00:01:05,890
a message from someone viewing it first.

13
00:01:05,950 --> 00:01:11,060
Ascender writes out their message plainly such as The quick brown fox.

14
00:01:11,290 --> 00:01:17,160
Then for the second step a cipher alphabet is created by shifting over the plain alphabet.

15
00:01:17,380 --> 00:01:20,950
For example here we have a shift value of three.

16
00:01:20,980 --> 00:01:27,550
We have the plain alphabet on top and then the shifted alphabet on the bottom so we can see here that

17
00:01:27,590 --> 00:01:30,770
we grabbed the last three letters and shifted them to go.

18
00:01:30,770 --> 00:01:37,660
At the beginning thus creating a shifted alphabet and now the index positions can be used as a cipher

19
00:01:38,110 --> 00:01:42,770
taking letters from the plain alphabet and then shifting them over to the cipher alphabet.

20
00:01:42,910 --> 00:01:47,170
So a becomes X becomes Y C becomes Z and so on.

21
00:01:48,860 --> 00:01:54,560
We then convert the original message to an encrypted message so that original plain text message of

22
00:01:54,560 --> 00:02:01,270
the quick brown fox becomes ciphertext which is just jibberish and there's no real words there.

23
00:02:02,710 --> 00:02:09,580
The recipient then only needs to know that shift value to decrypt the message back to plain text.

24
00:02:09,630 --> 00:02:16,020
If for some reason the shift value is not known then they can use brute force by checking all 26 possible

25
00:02:16,020 --> 00:02:17,070
shift values.

26
00:02:18,700 --> 00:02:21,480
All other agents are busy working on other defenses.

27
00:02:21,490 --> 00:02:22,930
Can you help us recruit.

28
00:02:23,050 --> 00:02:28,600
Use your knowledge of functions in Python to create two functions one for encrypting using Sezer ciphers

29
00:02:28,900 --> 00:02:31,930
and another for decrypting an already encrypted message.

30
00:02:31,990 --> 00:02:34,440
We've set up a framework notebook to help you get started.

31
00:02:34,630 --> 00:02:35,790
Let's check it out.

32
00:02:36,280 --> 00:02:38,620
Here's a notebook we've been able to set up for you.

33
00:02:38,620 --> 00:02:42,420
You need to accomplish three tasks each of them contained within a function.

34
00:02:42,520 --> 00:02:45,780
The first line is to create a Caesar cipher encryption function.

35
00:02:45,820 --> 00:02:50,710
The second one is create another function that will decrypt a Caesar cipher message and the third one

36
00:02:50,800 --> 00:02:57,230
is to create a function that will brute force every possible output for an encrypted Sezer cipher.

37
00:02:57,330 --> 00:03:02,450
Here we also mention some useful tips for actually grabbing the entire alphabet.

38
00:03:02,460 --> 00:03:09,420
Python has a built in string library that you can use to quickly call a lowercase string of letters

39
00:03:09,420 --> 00:03:14,690
in the alphabet which you can then convert to a list by just passing it into the list function.

40
00:03:14,730 --> 00:03:19,770
We've been able to help out as best we can by creating and encrypt function with some detailed comments

41
00:03:19,770 --> 00:03:20,280
here.

42
00:03:20,280 --> 00:03:25,800
As far as the steps you need to take to actually encrypt a message this encrypt function should take

43
00:03:25,800 --> 00:03:31,710
in text as a string as well as some integer shift value and that will output the shifted text after

44
00:03:31,710 --> 00:03:33,280
being run through the cypher.

45
00:03:33,330 --> 00:03:36,850
And here are some laid out steps for actually creating the cipher.

46
00:03:36,900 --> 00:03:38,790
So an example input output would be.

47
00:03:38,850 --> 00:03:45,190
Get this message to the main server shifted by 13 and we can see here we get back the shift the text.

48
00:03:45,300 --> 00:03:50,450
Then you'll create a very similar function for decryption which will take in just a text.

49
00:03:50,550 --> 00:03:54,570
The shift value and then output the plaintext original message.

50
00:03:54,690 --> 00:04:00,350
It will be very similar to the encryption except the alphabets will be switched and this is an example

51
00:04:00,350 --> 00:04:03,830
output that same encrypted message with the ship's value.

52
00:04:04,010 --> 00:04:05,720
And then we get back the original text.

53
00:04:05,750 --> 00:04:07,700
Get this message to the main server.

54
00:04:07,700 --> 00:04:13,040
Finally just in case the person on the other end doesn't actually know the ship's value.

55
00:04:13,040 --> 00:04:18,710
You'll also create a brute force message function and this will be able to take in a message and then

56
00:04:18,710 --> 00:04:21,460
it will output every possible Schiff's value.

57
00:04:21,470 --> 00:04:28,100
For example if we call brute force and pasan an encrypted message with no shift value it will go ahead

58
00:04:28,160 --> 00:04:34,610
and say what shift value it's using an output every possible combination and eventually by reading through

59
00:04:34,610 --> 00:04:38,550
these you should be able to tell that one of these actually makes sense.

60
00:04:38,570 --> 00:04:40,590
Get this message to the main server.

61
00:04:40,640 --> 00:04:41,130
All right.

62
00:04:41,180 --> 00:04:42,080
Best of luck recruit.

