WEBVTT
1

00:00:04.690 --> 00:00:06.940

Welcome to your final field write an exam.



2

00:00:07.180 --> 00:00:12.250

The main purpose of this field reading this exam is to test your skills with object oriented programming.



3

00:00:12.310 --> 00:00:15.340

Let's commence a quick overview of how the exam will work.



4

00:00:16.570 --> 00:00:19.490

Let's discuss your final field readiness exam in detail.



5

00:00:20.650 --> 00:00:26.240

You will be using object oriented programming to create a simple encryption class object an instance



6

00:00:26.270 --> 00:00:31.940

of this object will be able to encrypt and decrypt messages through two separate method calls.



7

00:00:31.940 --> 00:00:37.990

Let's get a quick overview of how it's going to do this encryption process the encryption method will



8

00:00:37.990 --> 00:00:39.430

work in the following manner.



9

00:00:39.430 --> 00:00:41.340

First you will be given a string.



10

00:00:41.350 --> 00:00:43.070

So for example Hello world.



11

00:00:43.270 --> 00:00:49.120

Then you're going to pass this string into encrypt method called off an instance of the object and the



12

00:00:49.120 --> 00:00:52.700

encryption method will go through the following.



13

00:00:52.720 --> 00:00:56.590

You will then add random letters in every other index position.



14

00:00:56.680 --> 00:01:03.010

So here we can see and underline in a different color we've inserted random letters in every other position



15

00:01:03.130 --> 00:01:04.090

in the string.



16

00:01:05.960 --> 00:01:08.380

So now we have this following string.



17

00:01:08.420 --> 00:01:13.160

The next step in your encryption process will be to reverse the string.



18

00:01:13.160 --> 00:01:20.590

So here we can see after inserting those random letters we've gone ahead and reversed the string then



19

00:01:20.590 --> 00:01:26.380

the next step and your encryption process will be to create a shuffled version of the alphabet.



20

00:01:26.440 --> 00:01:29.540

So at the very top we have the normal version of the alphabet.



21

00:01:29.800 --> 00:01:34.960

Your object will be able to shuffle it and then once you have that shuffled version of the alphabet



22

00:01:35.520 --> 00:01:39.490

you will use the shuffled alphabet as a Caesar cipher.



23

00:01:39.500 --> 00:01:44.900

So then once you replace the letters with their Caesar cipher equivalent you will now have your full



24

00:01:44.900 --> 00:01:46.770

encrypted word.



25

00:01:46.870 --> 00:01:50.920

So at the end you're going to have an encrypted string that looks quite different from your original



26

00:01:51.030 --> 00:01:54.940

and should be pretty hard to decrypt through normal methods.



27

00:01:55.060 --> 00:02:00.100

Your object will also have a decrypts method that essentially reverses all the steps.



28

00:02:00.100 --> 00:02:02.440

It goes back through the Sezer cipher.



29

00:02:02.470 --> 00:02:07.490

It reverses the other way around and then replaces or removes every other letter.



30

00:02:07.690 --> 00:02:13.850

And then you'll have your original string a skill to have the code for this is ready for you in the



31

00:02:13.850 --> 00:02:19.130

exam notebook and it has outlined steps to break down the process into smaller subproblems.



32

00:02:19.130 --> 00:02:21.520

Let's review this notebook and what it has for you.



33

00:02:25.550 --> 00:02:30.410

Here we have the final field readiness test and notebook and the instructions I just went over are also



34

00:02:30.410 --> 00:02:35.230

laid out in detail at the very top of this notebook in case you need to review them.



35

00:02:35.350 --> 00:02:40.190

And as we go down we end up seeing the skeleton of the code that has been filled out for you the very



36

00:02:40.250 --> 00:02:42.080

first thing is a couple of imports.



37

00:02:42.140 --> 00:02:44.830

We have the random library imported for you.



38

00:02:44.900 --> 00:02:50.480

That way you can shuffle the alphabet and string allows you to actually grab the alphabet as we've seen



39

00:02:50.480 --> 00:02:51.080

before.



40

00:02:51.080 --> 00:02:58.160

You can call A.S.C. I lowercase to grab a lowercase string of all the alphabet letters and then we have



41

00:02:58.160 --> 00:02:59.750

our encryption class.



42

00:02:59.750 --> 00:03:04.420

So in the encryption class you have this in a method and you have to do a couple of things.



43

00:03:04.490 --> 00:03:11.150

It's going to expect a seed and you're going to set a random seed and a self-taught seed attribute.



44

00:03:11.210 --> 00:03:17.680

So go ahead and google search if you're still not familiar with how to set a random seed in python but



45

00:03:17.690 --> 00:03:21.240

it has to do with the random library and random plus seed.



46

00:03:21.260 --> 00:03:25.750

Hopefully that gives you a big enough hint how to do that but your encryption object is going to take



47

00:03:25.750 --> 00:03:27.330

in seed as an attribute.



48

00:03:27.470 --> 00:03:33.020

So you will set a self-taught seed attribute then you will create an empty string attribute that will



49

00:03:33.020 --> 00:03:35.240

hold the encrypted Phraselator on.



50

00:03:35.570 --> 00:03:40.460

And then you will use the string in random libraries to create two attributes which is one is the correct



51

00:03:40.460 --> 00:03:41.300

alphabet.



52

00:03:41.300 --> 00:03:44.720

And another is the shuffled alphabet and there's a little hint free here.



53

00:03:44.810 --> 00:03:45.960

Random thought sample.



54

00:03:45.980 --> 00:03:47.450

So see if you can explore that.



55

00:03:48.320 --> 00:03:50.330

And then we have the encryption method.



56

00:03:50.330 --> 00:03:54.590

So again this method takes in the string message and encrypts it and you can check out the instructions.



57

00:03:54.590 --> 00:03:58.880

We just went over there at the top of this notebook but there laid out here for you.



58

00:03:58.880 --> 00:04:02.010

Step one is to replace every other letter with a random letter.



59

00:04:02.270 --> 00:04:08.720

Then it's reverse the string then it's use the random shuffled alphabet for a Caesar cipher and then



60

00:04:08.720 --> 00:04:11.480

we have passed here that you will eventually remove.



61

00:04:11.870 --> 00:04:15.920

And then we have our decryption method which basically does these steps in reverse.



62

00:04:15.920 --> 00:04:20.540

You go back through that Caesar cipher you reverse the string and then you remove every other letter



63

00:04:20.540 --> 00:04:23.080

that was random.



64

00:04:23.100 --> 00:04:25.920

So an example of this in action would look like the following.



65

00:04:25.920 --> 00:04:27.070

Here we have an encryption.



66

00:04:27.100 --> 00:04:32.720

Now we pass in our seed as 20 and then we have the encryption of Hello World return.



67

00:04:32.730 --> 00:04:39.030

This string right here and then we have the description here of this string along with the seed that



68

00:04:39.030 --> 00:04:40.320

we supply to get back.



69

00:04:40.320 --> 00:04:41.130

Hello world.



70

00:04:41.130 --> 00:04:47.850

The reason we have seed as a major part of this encryption process is because the seed allows you to



71

00:04:47.850 --> 00:04:56.210

randomly shuffle the same way each time so that way you know how to undo the shuffled Caesar cipher.



72

00:04:56.250 --> 00:04:56.940

All right.



73

00:04:56.940 --> 00:05:00.640

Best of luck and this is definitely a tough assignment.



74

00:05:00.720 --> 00:05:05.380

So take your time with it and try to break things down into smaller subproblems.



75

00:05:05.550 --> 00:05:08.580

We'll see at the next lesson where we go over the solutions.



76

00:05:08.580 --> 00:05:09.220

Best of luck.



