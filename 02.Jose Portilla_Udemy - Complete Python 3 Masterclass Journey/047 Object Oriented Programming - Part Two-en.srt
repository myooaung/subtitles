1
00:00:04,660 --> 00:00:10,480
Welcome back recruit in our previous lesson we discussed how to create a simple class and then add attributes

2
00:00:10,480 --> 00:00:17,230
that class now is time to discuss methods methods or functions defined inside the body of a class and

3
00:00:17,230 --> 00:00:21,890
they're used to perform operations with the attributes of our objects.

4
00:00:21,910 --> 00:00:26,950
You can basically think of methods as those functions acting on an object that also take the object

5
00:00:26,950 --> 00:00:30,830
itself into account through the use of that self keyword argument.

6
00:00:31,060 --> 00:00:40,140
Let's go through this with an example of another class we will call this class circle and then let's

7
00:00:40,140 --> 00:00:42,040
create a class object attribute.

8
00:00:42,060 --> 00:00:48,510
Remember from previous discussion the class object attribute is going to be some attribute that's going

9
00:00:48,510 --> 00:00:51,080
to be true for any instance of the class.

10
00:00:51,090 --> 00:00:52,240
So for Agent.

11
00:00:52,290 --> 00:00:54,970
All agents are going to be living on planet Earth.

12
00:00:54,990 --> 00:00:59,910
So if we scroll down here something that may be true for any circle is the fact that we can't estimate

13
00:00:59,910 --> 00:01:04,890
pi to be 1 or 3.1 for now doesn't matter how large your circle is.

14
00:01:04,890 --> 00:01:06,290
That's always going to be constant.

15
00:01:06,330 --> 00:01:14,040
So we'll have that as our class object attribute and then we will creates our instantiation method or

16
00:01:14,370 --> 00:01:16,790
method and we'll say self.

17
00:01:16,800 --> 00:01:18,950
So we always pass in that key word self.

18
00:01:19,140 --> 00:01:24,900
Just flip Python so that this is a method that's related to this object.

19
00:01:25,100 --> 00:01:38,920
And then we're going to do here is have a radius and then we will say solve the radius is equal to radius.

20
00:01:39,000 --> 00:01:40,810
So we have this very simple circle method.

21
00:01:40,830 --> 00:01:46,680
So if I say my circle is an instance of the circle class.

22
00:01:47,150 --> 00:01:50,050
Now I have to have open close parentheses here.

23
00:01:50,990 --> 00:01:53,150
It says missing the radius.

24
00:01:53,150 --> 00:01:54,620
So let's provide one.

25
00:01:54,650 --> 00:01:57,160
Go ahead and say radiuses to.

26
00:01:57,350 --> 00:02:03,470
And then if I check out my circle thought radius it gives back to.

27
00:02:03,810 --> 00:02:06,650
Now let's say I don't always want to have to provide something.

28
00:02:06,690 --> 00:02:09,690
Maybe I want a default radius in case I don't provide one.

29
00:02:09,690 --> 00:02:12,270
Then all I have to do here is say is equal to.

30
00:02:12,390 --> 00:02:14,540
And we can set the default radius to be 1.

31
00:02:14,610 --> 00:02:21,240
So when I read the fine that circle class include that default value I can then run again and the radius

32
00:02:21,240 --> 00:02:22,640
will default to 1.

33
00:02:22,750 --> 00:02:27,600
So that's a class object attribute and that's the only attribute our circle needs is a radius.

34
00:02:27,600 --> 00:02:33,960
Now let's have a method and a method looks very similar to a function except that it's actually inside

35
00:02:33,960 --> 00:02:41,700
this class in the very first parameter it's going to take is self.

36
00:02:41,920 --> 00:02:45,270
And let's create a method that calculates the area of a circle.

37
00:02:45,340 --> 00:02:54,690
So it's going to return self-taught radius times self-taught radius times pi.

38
00:02:54,700 --> 00:02:59,740
So pire squared is the area of a circle in an order to call the class object attribute.

39
00:02:59,770 --> 00:03:05,320
Instead of calling self-taught pi we can go ahead and call circle that pi to indicate that it's a class

40
00:03:05,380 --> 00:03:06,700
object attribute.

41
00:03:06,940 --> 00:03:12,250
And I'm going to run this cell again to add those additions to a circle class.

42
00:03:12,340 --> 00:03:18,610
Run this again and then I can call radius but it can also call my circle and then if I hit tab here

43
00:03:18,670 --> 00:03:22,190
I have Area PI and also of radius.

44
00:03:22,300 --> 00:03:28,040
I mean area and if I just run an area like this ill say bound method.

45
00:03:28,230 --> 00:03:31,800
A circle area on the circle object at this point in memory.

46
00:03:32,010 --> 00:03:34,350
If I want to execute it just like I would have a function.

47
00:03:34,350 --> 00:03:38,370
I need to add in this open close parentheses and then it returns back the area.

48
00:03:38,430 --> 00:03:42,930
In this case 1 times one times 3 point 1 4 is just going to be three point 1 4.

49
00:03:42,990 --> 00:03:46,620
So let's go and create a circle for a radius of 3 so I can see the results.

50
00:03:46,620 --> 00:03:52,200
It's a radius of 3 means the area is 28 points to 6 or roughly about that.

51
00:03:52,230 --> 00:03:54,590
So let's explain the syntax a little further.

52
00:03:54,840 --> 00:03:56,460
This is a method right here.

53
00:03:56,490 --> 00:04:02,070
This area method knows that it's a method instead of a normal function because we passed in that sulf

54
00:04:02,070 --> 00:04:07,350
keyword which essentially says hey this isn't just some function we're happened to be defining.

55
00:04:07,350 --> 00:04:15,000
This is a method that's going to refer to this actual circle class and then if we want to use the attributes

56
00:04:15,090 --> 00:04:20,920
of this current iteration of the circle we call self-taught radius instead of just calling radius.

57
00:04:20,940 --> 00:04:26,590
And the reason we do that is to let Python know that I'm talking about the radius that was defined here

58
00:04:26,880 --> 00:04:32,760
when we initialized our version of the circle and then we multiplied again by radius and then we call

59
00:04:32,760 --> 00:04:33,680
circle that pi.

60
00:04:33,750 --> 00:04:36,220
Which is this class object attribute.

61
00:04:36,240 --> 00:04:44,040
Let's go ahead and show another example by creating a perimeter method so we can say the F perimeter

62
00:04:45,060 --> 00:04:50,850
self and the perimeter of a circle is just 2 times the radius.

63
00:04:50,850 --> 00:04:53,190
Note here I have to use self-taught radius.

64
00:04:53,190 --> 00:04:56,160
Otherwise it's not going to know what radius I'm talking about.

65
00:04:56,160 --> 00:04:58,010
And then I can say circled pi.

66
00:04:58,080 --> 00:05:05,700
If I need to use the class object attribute PI appear so that when I run this all over again I can say

67
00:05:07,110 --> 00:05:13,140
my circle you can call perimeter and remember if I just call perimeter like this is going to report

68
00:05:13,140 --> 00:05:17,320
the method I need to actually execute the perimeter clock or method.

69
00:05:17,400 --> 00:05:19,700
Run that and get the perimeter of my circle.

70
00:05:19,770 --> 00:05:21,090
Or at least an estimate of it.

71
00:05:22,120 --> 00:05:26,950
Now these methods are quite simple they only taken the self argument but you can also have additional

72
00:05:27,370 --> 00:05:30,100
parameters as long as they start with self.

73
00:05:30,130 --> 00:05:40,260
So let's say I wanted to report something method that's going to take itself and I can have an other

74
00:05:40,260 --> 00:05:48,210
parameters such as let's say name and I can say return

75
00:05:51,060 --> 00:05:52,250
reports.

76
00:05:53,520 --> 00:06:03,270
And then we can say the format name and if I rerun this again radius area perimeter I can say my circle

77
00:06:04,110 --> 00:06:04,750
hit tab.

78
00:06:04,770 --> 00:06:13,440
Notice I have report something and then this will expect something to report so I can say John and I'll

79
00:06:13,450 --> 00:06:15,220
say report John.

80
00:06:15,230 --> 00:06:21,470
So that's how you can have methods that also Ticken parameters because recall for other objects like

81
00:06:21,470 --> 00:06:26,900
the list we created earlier if we go all the way back up here at the top some of these methods needed

82
00:06:26,900 --> 00:06:31,610
to take in parameters that you provided such as appending a new number or counting how many times that

83
00:06:31,610 --> 00:06:32,680
occurred.

84
00:06:32,690 --> 00:06:38,120
So you have options there to add in additional parameters where you should always start off with however

85
00:06:38,390 --> 00:06:44,210
is that self keyword which basically tells Python again that this is a method not just some function

86
00:06:44,570 --> 00:06:47,420
it's a method that's connected to itself.

87
00:06:47,450 --> 00:06:49,920
Here in the circle class.

88
00:06:49,930 --> 00:06:52,930
All right so that notation is very important.

89
00:06:52,930 --> 00:06:54,160
Let's go ahead and show you.

90
00:06:54,160 --> 00:06:59,850
Inheritance inheritance is a way to form new classes using classes that have already been defined.

91
00:07:00,740 --> 00:07:03,820
Often you're going to have similar classes.

92
00:07:03,860 --> 00:07:08,750
You don't want to have to repeat all your work so you can use inheritance to form a new class based

93
00:07:08,750 --> 00:07:10,310
off of previous work.

94
00:07:10,520 --> 00:07:18,400
Not to do this we're going to build out a class and this class is going to be called person will have

95
00:07:19,250 --> 00:07:30,700
an in it method self first underscore name last underscore name and will create the attributes as well.

96
00:07:30,720 --> 00:07:37,380
So I'll say sulf first name is equal to the first name you pass in and then we'll say self-taught last

97
00:07:37,380 --> 00:07:39,390
name is equal to the last name.

98
00:07:39,420 --> 00:07:40,210
Pasan.

99
00:07:40,680 --> 00:07:45,940
And later on we're going to discuss why this init method has this set of double underscores indicates

100
00:07:45,940 --> 00:07:49,210
that it's a special method so we'll discuss special methods in just a bit.

101
00:07:49,260 --> 00:07:50,160
But for right now.

102
00:07:50,220 --> 00:08:00,600
Just make sure your syntax matches and then we will also say the E-F report self.

103
00:08:01,070 --> 00:08:03,040
And it's just going to print something out.

104
00:08:03,050 --> 00:08:04,300
Notice I'm not returning anything.

105
00:08:04,310 --> 00:08:05,670
I'm just going to print something out.

106
00:08:05,900 --> 00:08:14,460
Don't say I am and we are going to say the formats and will say self-taught first name.

107
00:08:14,720 --> 00:08:17,540
Self-taught last name.

108
00:08:17,750 --> 00:08:25,370
So if I create an instance of this person I need to pass on a first name so I will say James pass on

109
00:08:25,370 --> 00:08:26,120
a last name.

110
00:08:26,140 --> 00:08:33,570
Bond and I can say the report and I execute the report method and it prints out.

111
00:08:33,630 --> 00:08:34,800
I am James Bond.

112
00:08:35,040 --> 00:08:40,740
Let's get in one more method to this that says the F Hello.

113
00:08:41,780 --> 00:08:42,990
Self.

114
00:08:43,180 --> 00:08:48,040
And it just prints out Hello.

115
00:08:48,240 --> 00:08:55,100
So I have this person called James Bond that report who he is and he can also say hello.

116
00:08:55,110 --> 00:08:58,460
Now the second class we're going to do is called agent.

117
00:08:58,680 --> 00:09:00,950
Now every agent may be a person as well.

118
00:09:00,960 --> 00:09:09,180
So it may be nice if agents can report who they are and if agents can say hello who will say class agent

119
00:09:09,660 --> 00:09:14,550
and now we are actually going to pass on something here we're going to pass in the person class because

120
00:09:14,610 --> 00:09:17,930
I want to be able to use everything that I've worked with here.

121
00:09:17,940 --> 00:09:23,460
I want to be able to use this report method or use this hello method and in order to do that I can inherit

122
00:09:23,610 --> 00:09:30,650
the class and this is sometimes also known as extending the person class to the agent class depending

123
00:09:30,650 --> 00:09:31,910
on which way you think about it.

124
00:09:31,910 --> 00:09:36,160
If Agent is inheriting from person or person is extending to agents.

125
00:09:36,230 --> 00:09:43,010
Either way we're going to pass on person into the agent class we're going to have our method again here

126
00:09:43,870 --> 00:09:55,430
and we're going to say self What's self comma first name and then last name and an agent should also

127
00:09:55,430 --> 00:09:56,270
have a code name

128
00:09:59,270 --> 00:10:00,300
so we'll have this.

129
00:10:00,350 --> 00:10:08,020
And then what we're going to do here is inside this instantiation or in a method I will say person and

130
00:10:08,020 --> 00:10:17,960
I will call that init method of the original the person then I will say self first name last name and

131
00:10:17,960 --> 00:10:23,610
then I will say self code name is equal to code name.

132
00:10:23,610 --> 00:10:25,970
Now the syntax can be confusing at first.

133
00:10:26,010 --> 00:10:28,040
Let's go ahead and define what's happening.

134
00:10:28,050 --> 00:10:29,160
Each of these lines.

135
00:10:29,340 --> 00:10:34,020
The first thing we're doing is from Agent We are inheriting the person class.

136
00:10:34,200 --> 00:10:38,130
So we want to use these methods report and hello from the person class.

137
00:10:38,220 --> 00:10:39,930
So we'll go ahead and inherit it.

138
00:10:39,960 --> 00:10:40,760
Notice here.

139
00:10:40,860 --> 00:10:46,090
Hi I'm not calling open and close parentheses after person I'm just passing in person Street by itself.

140
00:10:46,170 --> 00:10:52,200
Then we have our own method for Agent and it takes on a first name a last name and a code name then

141
00:10:52,200 --> 00:10:58,020
what it does is use that first name and last name provided it instantiates person by calling and person

142
00:10:58,110 --> 00:11:04,710
that in it self first name and last name and then the extra parameters that are specific to an agent

143
00:11:04,770 --> 00:11:06,340
instead of just a person.

144
00:11:06,360 --> 00:11:11,160
We go ahead and add in a self-taught and then whatever the attribute name we want matching up with the

145
00:11:11,160 --> 00:11:12,600
private that's passed then.

146
00:11:12,840 --> 00:11:15,470
So that's the main part of inheritance.

147
00:11:15,720 --> 00:11:24,150
And if I run this and it creates a new agent so say agents we'll call it variable x isn't agents and

148
00:11:24,150 --> 00:11:27,170
they have a first name we'll give first name.

149
00:11:27,180 --> 00:11:39,790
Alan will say their last name is touring and their code name is hero so if we say x dot and hit TAB

150
00:11:40,150 --> 00:11:47,110
we can grab the attributes code name first name last name but then we can also have them say hello and

151
00:11:47,110 --> 00:11:51,320
we can also have them say give a report.

152
00:11:52,000 --> 00:12:00,990
I am Alan Turing So notice how we were able to inherit the hello method and the report method from the

153
00:12:00,990 --> 00:12:02,490
person class.

154
00:12:02,520 --> 00:12:08,600
Now since this is an agent we probably don't want them saying their real name by just asking a report.

155
00:12:08,820 --> 00:12:15,660
So if I ever want to overwrite a method that I inherited I can just come down here and read the fine

156
00:12:15,660 --> 00:12:21,740
that method I can say if reports pasand self.

157
00:12:21,810 --> 00:12:25,920
And I'm going to overwrite the self or the report method that came in from person.

158
00:12:26,220 --> 00:12:28,660
So instead of reporting my name I'm going to print out.

159
00:12:28,810 --> 00:12:34,190
Sorry I cannot tell you my real name.

160
00:12:36,530 --> 00:12:40,290
Prince but you can call me.

161
00:12:40,530 --> 00:12:47,880
And then we'll format in their code name say format's self-taught code name so same thing we create

162
00:12:47,880 --> 00:12:49,610
that agents they can say hello.

163
00:12:49,770 --> 00:12:54,240
Except now when you ask them to report instead of reporting their name we were able to successfully

164
00:12:54,330 --> 00:12:57,070
overwrite the report method from person.

165
00:12:57,210 --> 00:12:59,490
And now we have our own report method for Asian.

166
00:12:59,580 --> 00:13:03,360
Sorry can't tell you my real name but you can call me hero.

167
00:13:03,360 --> 00:13:10,770
So besides inheriting other methods from this class and being able to overwrite them we can also then

168
00:13:10,800 --> 00:13:17,100
add in new methods so we can add a new method called true name in case we ever do want to report our

169
00:13:17,100 --> 00:13:18,270
true name.

170
00:13:18,270 --> 00:13:22,200
And this can take and the self keyword and it can also maybe taken a passcode.

171
00:13:22,190 --> 00:13:26,550
So you need to provide a passcode in order to learn the real name of this agent.

172
00:13:26,550 --> 00:13:37,860
So say if the passcode is equal to one 2 three prints correct pass code and then then we can go ahead

173
00:13:37,860 --> 00:13:39,930
and just copy this right here.

174
00:13:39,930 --> 00:13:46,190
The actual reporting of the names will copy this come back down here.

175
00:13:47,740 --> 00:13:48,720
Paste that in.

176
00:13:48,820 --> 00:13:52,130
So that's the past could provide it is one to three it's correct.

177
00:13:52,210 --> 00:13:57,400
Else we're going to do is we will just say Sorry can't tell you my real name but instead of copying

178
00:13:57,400 --> 00:14:00,640
and pasting all we have to do is say self-taught.

179
00:14:00,880 --> 00:14:02,120
Call the report method.

180
00:14:02,140 --> 00:14:09,130
So this just tells this class that if this pass code provided is not 1 2 3 then just execute your own

181
00:14:09,130 --> 00:14:09,960
report method.

182
00:14:10,030 --> 00:14:15,340
And that's what's so key about using the self key word whether it's an attribute or a method call it

183
00:14:15,340 --> 00:14:23,020
lets Python know that you're referring to its own methods not some other function in the global namespace.

184
00:14:23,020 --> 00:14:29,680
So now if I run this let's make sure we have correct syntax we need this to be equals equals.

185
00:14:29,680 --> 00:14:30,310
Now let's run this.

186
00:14:30,310 --> 00:14:31,270
There we go.

187
00:14:31,300 --> 00:14:33,780
So Alan Turing code named Hero.

188
00:14:33,940 --> 00:14:36,560
They can say hello if we ask them to report.

189
00:14:36,880 --> 00:14:44,990
They won't tell you their real name if we ask him let's say true name and we passen the wrong pass code

190
00:14:45,560 --> 00:14:48,250
they'll say sorry can't tell you my real name can call me a hero.

191
00:14:48,260 --> 00:14:55,100
So they keep calling a report if I do pasan one as the correct code though they say correct pass code.

192
00:14:55,100 --> 00:14:56,780
I am Alan Turing.

193
00:14:56,870 --> 00:15:02,210
And then finally what we need to discuss are special methods and also private methods.

194
00:15:02,210 --> 00:15:07,940
We've seen a couple of special methods specifically this method and it's denoted a special due to its

195
00:15:08,000 --> 00:15:09,860
double set of underscores.

196
00:15:09,860 --> 00:15:14,870
So in the very next lesson we're going to finish our discussion of object oriented programming by talking

197
00:15:14,870 --> 00:15:17,750
about private methods and special methods.

198
00:15:17,810 --> 00:15:18,410
We'll see there.

