WEBVTT
1

00:00:00.610 --> 00:00:07.030

Bienvenido nuevo recluta en esta serie de lecciones que vamos a discutir la programacin orientada a objetos de



2

00:00:07.060 --> 00:00:13.300

programacin orientada a objetos o O. PAG. para abreviar permite a los programadores crear sus propios



3

00:00:13.330 --> 00:00:14.540

objetos que tienen mtodos y atributos.



4

00:00:14.590 --> 00:00:19.900

Recuerde que despus de definir un diccionario de lista de cadenas u otros tipos de datos y objetos que



5

00:00:19.900 --> 00:00:25.060

estn integrados en Python, puede invocarlos para ofrecerlos con el punto y luego con el nombre del mtodo.



6

00:00:25.180 --> 00:00:26.310

Abre y cierra parntesis.



7

00:00:26.350 --> 00:00:34.170

Sintaxis: estos mtodos actan como funciones que utilizan informacin sobre el objeto, as como sobre el propio objeto para



8

00:00:34.180 --> 00:00:38.530

devolver resultados o cambiar su efecto en el objeto actual.



9

00:00:38.530 --> 00:00:44.110

Por ejemplo, esto incluye agregar un nuevo elemento a una lista o contar el nmero de



10

00:00:44.110 --> 00:00:51.470

apariciones de un elemento y una programacin orientada a objetos de tupla permite a los usuarios crear sus propios objetos.



11

00:00:51.470 --> 00:00:56.690

El formato general suele ser confuso cuando se lo encuentra por primera vez y su utilidad puede no



12

00:00:56.690 --> 00:01:04.570

estar completamente clara al principio, pero en general OPI nos permite crear cdigo que se puede repetir en secuencias organizadas para secuencias de comandos mucho ms grandes.



13

00:01:04.570 --> 00:01:10.480

Las funciones de cdigo de Python por s mismas no sern suficientes organizacin y repetibilidad, las tareas y objetos comnmente



14

00:01:10.960 --> 00:01:16.510

repetidos se pueden definir con O. PAG. para crear cdigo que sea ms til



15

00:01:16.510 --> 00:01:17.510

a una escala mayor.



16

00:01:17.740 --> 00:01:21.850

Vamos a ver la sintaxis para la programacin orientada a objetos con Python.



17

00:01:21.850 --> 00:01:26.580

Aqu podemos ver la sintaxis general para la programacin orientada a objetos de Python.



18

00:01:26.620 --> 00:01:32.230

As es como usamos la palabra clave class y luego tenemos algunos mtodos sangrados dentro de este bloque



19

00:01:32.230 --> 00:01:32.890

de cdigo.



20

00:01:33.100 --> 00:01:37.870

Vamos a analizar todo esto con ms detalle cuando lo programemos en una configuracin de



21

00:01:37.870 --> 00:01:38.510

computadora porttil.



22

00:01:38.650 --> 00:01:44.100

Pero, por ahora, sigamos adelante y solo analicemos una visin general de alto nivel de lo que est haciendo este cdigo.



23

00:01:44.140 --> 00:01:47.350

Lo primero que notar es el uso de la palabra clave class.



24

00:01:47.350 --> 00:01:52.620

Entonces, otra forma de decir esto es que estamos creando nuestro propio objeto o estamos creando nuestra propia clase.



25

00:01:52.720 --> 00:01:55.930

Entonces tenemos esa palabra clave class y luego tienes el nombre de la clase.



26

00:01:55.930 --> 00:02:01.090

Observe aqu que estamos usando camel case, es decir, en lugar de usar guiones bajos, en



27

00:02:01.090 --> 00:02:02.080

realidad usamos maysculas.



28

00:02:02.170 --> 00:02:06.280

Entonces, por convencin, los nombres de las clases tienen letras maysculas.



29

00:02:06.450 --> 00:02:12.450

Entonces, el primer mtodo aqu debajo de esa clase va a ser el mtodo init especial, por



30

00:02:12.510 --> 00:02:16.280

lo tanto, subrayado guin bajo y guin bajo subrayado I-T.



31

00:02:16.530 --> 00:02:22.140

Y esto nos permite crear los parmetros que se esperarn cuando realmente cree una instancia de



32

00:02:22.260 --> 00:02:24.830

este objeto o una instancia de esta clase.



33

00:02:24.840 --> 00:02:30.670

Entonces, cuando llamemos el nombre de clase, se espera que pasen dos parmetros en el programa encendido



34

00:02:30.690 --> 00:02:31.550

en Paramo dos.



35

00:02:31.650 --> 00:02:39.380

Y luego usamos esta palabra clave para asignar atributos o mtodos y relacionarlos con



36

00:02:39.450 --> 00:02:40.860

esta clase real.



37

00:02:40.860 --> 00:02:44.650

Y esto tendr ms sentido cuando realmente codifiquemos esto nosotros mismos.



38

00:02:44.760 --> 00:02:50.670

Pero, esencialmente, una vez que pasa el programa en el programa, se lo asigna al programa propio de los



39

00:02:50.670 --> 00:02:52.680

objetos uno y programa dos atributos.



40

00:02:52.680 --> 00:02:58.260

Entonces, eso usa la palabra clave self all que aqu en la parte inferior tenemos algn mtodo y est



41

00:02:58.260 --> 00:02:59.070

realizando alguna accin.



42

00:02:59.100 --> 00:03:06.520

En este caso, solo informa el parmetro 1 cuando hizo una instancia de la clase.



43

00:03:06.530 --> 00:03:11.010

Avancemos y desarrollemos algunos ejemplos simples en una configuracin de computadora porttil.



44

00:03:11.240 --> 00:03:14.240

Entonces, podemos aclarar toda esta nueva sintaxis



45

00:03:20.130 --> 00:03:27.990

Comencemos por recordar que si tenemos un objeto normal como un objeto de lista, mi lista contiene diferentes mtodos



46

00:03:27.990 --> 00:03:29.370

que podemos cancelar.



47

00:03:29.460 --> 00:03:35.940

As que si digo mi lista de puntos y luego presiono la tecla Veo todos estos mtodos diferentes, como agregar a



48

00:03:36.870 --> 00:03:43.870

una lista o tal vez quiero contar cuntas veces aparece el nmero dos en mi lista, as que puedo decir la cuenta dos.



49

00:03:44.430 --> 00:03:47.990

Y luego si llamo a mi lista, puedo ver que he agregado el 4 all.



50

00:03:48.030 --> 00:03:56.160

As que estos se llaman mtodos aqu en este objeto mi lista y tener en cuenta que en Python realmente todo



51

00:03:56.190 --> 00:03:57.190

es un objeto.



52

00:03:57.210 --> 00:04:02.850

Y de las conferencias anteriores recordamos que podemos usar la funcin tipo para verificar el tipo de objeto que



53

00:04:02.850 --> 00:04:03.350

es algo.



54

00:04:03.540 --> 00:04:07.020

Entonces puedo decir bien qu tipo de objeto es uno.



55

00:04:07.320 --> 00:04:11.980

Y es un nmero entero o qu tipo de objeto es esta lista vaca aqu.



56

00:04:12.090 --> 00:04:17.480

Y es un objeto de lista o qu tipo de objeto es este diccionario.



57

00:04:17.730 --> 00:04:21.900

Entonces, si hago un diccionario, dice DHC, etc. Entonces aqu tenemos todo en Python.



58

00:04:22.020 --> 00:04:24.270

Convertirse en un objeto.



59

00:04:24.270 --> 00:04:25.830

Ahora los objetos definidos por el usuario se crean utilizando esa palabra clave de clase.



60

00:04:25.950 --> 00:04:29.820

Acabamos de discutir.



61

00:04:29.820 --> 00:04:31.010

Entonces veamos un ejemplo de eso.



62

00:04:31.020 --> 00:04:32.870

Decimos clase que destaca el resaltado de sintaxis que ya indica que es una palabra clave.



63

00:04:33.360 --> 00:04:37.620

Y luego crearemos un objeto llamado muestra.



64

00:04:37.770 --> 00:04:43.160

Entonces tenemos un parntesis abierto.



65

00:04:43.270 --> 00:04:44.890

No necesita preocuparse por pasar nada all.



66

00:04:44.890 --> 00:04:47.690

Y luego usaremos la palabra clave pass y



67

00:04:47.950 --> 00:04:52.330

recordaremos que la palabra clave pasada bsicamente dice simplemente no hacer nada.



68

00:04:52.330 --> 00:04:53.610

Entonces esta es la clase ms simple posible.



69

00:04:53.620 --> 00:04:55.930

Bsicamente, no hace nada, excepto crear una instancia de la clase, de lo contrario, dice que X es muestra.



70

00:04:55.930 --> 00:05:04.710

Y ahora si compruebo qu tipo es X aviso atrs, dice que es su muestra principal.



71

00:05:04.930 --> 00:05:11.220

As que ya hemos creado nuestro propio objeto de la misma manera que uno es una lista



72

00:05:11.460 --> 00:05:18.480

entera o este conjunto vaco de corchetes es una lista vaca o este diccionario es un objeto de tipo



73

00:05:18.480 --> 00:05:25.110

diccionario o mi lista es uno dos tres cuatro lista esta variable x ahora es un objeto de muestra.



74

00:05:25.110 --> 00:05:31.560

Entonces, ahora que tenemos nuestros objetos bsicos, sigamos adelante y agreguemos esto agregando algunos atributos.



75

00:05:31.650 --> 00:05:39.970

Entonces la sintaxis para crear un atributo es self daat, el nombre del atributo es igual a algo.



76

00:05:40.020 --> 00:05:46.700

Por lo tanto, crearemos una nueva clase llamada Agente, que se capitalizar en la clase



77

00:05:46.950 --> 00:05:54.510

all y, por lo general, tendr el carcter de subrayado F subrayado I y yo, subrayar el



78

00:05:54.510 --> 00:06:01.950

guin bajo y este es un mtodo especial usado para inicializar los atributos de un objeto.



79

00:06:01.950 --> 00:06:05.540

Entonces, lo primero que siempre pasar y aqu est la palabra clave self.



80

00:06:05.790 --> 00:06:10.180

Y eso nos permite darnos cuenta de que cada vez que hablamos de este mtodo de



81

00:06:10.440 --> 00:06:17.040

inicio estamos hablando de s mismo con respecto a la clase de agente y, a continuacin, puede pasar cualquier atributo aqu que desee pasar.



82

00:06:17.040 --> 00:06:22.350

Una vez que crea una muestra de la clase de agente.



83

00:06:22.380 --> 00:06:25.520

Pasemos que los agentes deben tener un nombre real.



84

00:06:25.800 --> 00:06:32.370

Y luego diremos que el nombre real del punto propio es igual



85

00:06:32.620 --> 00:06:46.050

al nombre real del guin bajo y si lo ejecutamos y crearemos una nueva instancia de agentes, todos dicen que x es igual a los agentes.



86

00:06:46.050 --> 00:06:52.230

Ahora si solo ejecuto esto por s solo nos dar un error.



87

00:06:52.230 --> 00:06:55.760

Y eso es porque dice que te falta un argumento posicional requerido que te hace falta un nombre real.



88

00:06:56.040 --> 00:07:00.990

Entonces, qu est pasando realmente aqu?



89

00:07:00.990 --> 00:07:02.550

Bueno, cuando crees la clase de agente, lo



90

00:07:02.820 --> 00:07:08.380

que va a pasar es que vas a llamar a esto en mtodo este mtodo de instanciacin y lo que el mtodo de instanciacin dice que me estoy haciendo referencia.



91

00:07:08.400 --> 00:07:14.110

Espero un nombre real de parmetro y luego voy a asignar mi nombre real autodidacta de



92

00:07:14.220 --> 00:07:21.720

atributo igual a cualquier nombre real que se haya pasado y la variable de nombre continuar y dir que es una cadena.



93

00:07:21.720 --> 00:07:28.140

Eso significa que voy a pasar algo as como James Bond como mi nombre real all



94

00:07:28.140 --> 00:07:36.400

y luego dir X y es el agente principal en este lugar en la memoria y si digo X puntos y



95

00:07:36.490 --> 00:07:46.900

una pestaa de hit aqu automticamente completar el nombre real y el nombre real es un atributo, no un mtodo, lo que significa que no abrimos.



96

00:07:46.910 --> 00:07:52.580

No tenemos abierto y cerrado est all.



97

00:07:52.630 --> 00:07:54.520

Veremos los mtodos ms adelante, pero esta es la forma bsica en que podemos crear una clase que tenga atributos.



98

00:07:54.520 --> 00:08:01.150

Entonces, la diferencia entre un atributo y un mtodo.



99

00:08:01.410 --> 00:08:03.740

Es que un atributo es una caracterstica de un objeto.



100

00:08:03.790 --> 00:08:07.130

Un mtodo va a ser una accin o una operacin que podemos realizar con el objeto.



101

00:08:07.240 --> 00:08:13.190

Ahora, a veces, la sintaxis confunde el hecho de que el nombre real



102

00:08:13.200 --> 00:08:18.270

autodidacta de ases es, a veces, igual al nombre real para aclararlo.



103

00:08:18.810 --> 00:08:20.250

Lo que me gusta mostrarles a los



104

00:08:20.250 --> 00:08:25.430

reclutas es que en lugar de decir el nombre real aqu podramos poner lo que quieran, podramos poner algo as como medusas y luego decir medusas aqu.



105

00:08:25.430 --> 00:08:33.110

Entonces, si ejecuta esto, seguir funcionando igual en todas estas lneas.



106

00:08:33.390 --> 00:08:38.790

Todo lo que est haciendo es conectar la variable que pasa



107

00:08:38.970 --> 00:08:45.150

y aqu la variable que est asignando a este atributo llamado nombre real.



108

00:08:45.450 --> 00:08:47.880

Y tcnicamente tambin puedes llamar a este atributo como quieras.



109

00:08:47.880 --> 00:08:51.060

As que podemos llamar a este nombre de cdigo de atributo y luego



110

00:08:51.330 --> 00:08:59.730

volvemos a ejecutar esta clase de agente, creamos esto, pero ahora, en lugar de decir el nombre real, si ejecutas este objeto, el agente de error dice que el objeto tiene un nombre real de atributo.



111

00:08:59.730 --> 00:09:05.850

En cambio, redefinimos este atributo al que se llama si aciertas aqu dirn el nombre del cdigo.



112

00:09:05.850 --> 00:09:11.430

Y luego el nombre en clave es James Bond.



113

00:09:11.670 --> 00:09:14.120

Por convencin Sin embargo, los tres de estos tendrn el mismo nombre de variable.



114

00:09:14.250 --> 00:09:20.310

Por lo tanto, siempre lo ver como todo lo que tiene el mismo nombre de variable compartida.



115

00:09:20.310 --> 00:09:24.870

Entonces diremos que este es un nombre real.



116

00:09:24.870 --> 00:09:26.760

Este es un nombre real y este es un nombre real tambin.



117

00:09:26.880 --> 00:09:30.290

Y si ejecuta todo esto



118

00:09:30.600 --> 00:09:31.770

Asegrate de que dice el nombre real de tipo X.



119

00:09:31.770 --> 00:09:34.350

Y luego vemos a James Bond all.



120

00:09:34.350 --> 00:09:35.910

As que con suerte eso muestra la relacin de cmo se est creando realmente esto.



121

00:09:36.060 --> 00:09:39.780

Est pasando un parmetro aqu y luego es el hallazgo



122

00:09:39.840 --> 00:09:45.510

de algn atributo que est conectado a este objeto envejecido o una variable que pas.



123

00:09:45.620 --> 00:09:48.920

Entonces, es por eso que podemos llamar a X el



124

00:09:48.930 --> 00:09:54.300

nombre real porque estamos diciendo que el nombre real autodidacta es igual a lo que haya pasado.



125

00:09:54.300 --> 00:09:55.590

Y en nuestro caso pasamos en James Bond.



126

00:09:55.630 --> 00:10:00.000

Ahora, si quisiramos algo ms que un solo atributo, podramos seguir agregando atributos.



127

00:10:00.000 --> 00:10:04.920

Entonces, los agentes pueden tener un color de ojos y pueden tener



128

00:10:04.920 --> 00:10:11.790

una altura y luego, lo que podemos hacer aqu es establecer todos esos atributos que diremos autodidactas,



129

00:10:11.790 --> 00:10:18.270

el color de ojos del agente es igual a lo que pase como color de ojos.



130

00:10:18.270 --> 00:10:19.390

Y luego podemos decir que la altura autodidacta es igual a lo que pas en altura.



131

00:10:19.410 --> 00:10:25.340

Entonces cuando ejecutamos eso y si tratamos de ejecutar esto de nuevo notar que obtiene un error que dice.



132

00:10:25.350 --> 00:10:30.400

Ahora nos falta el color y la altura de los ojos.



133

00:10:30.480 --> 00:10:32.910

Entonces debes pasarlos tambin.



134

00:10:32.910 --> 00:10:34.960

As que vamos a pasar, digamos verde



135

00:10:35.520 --> 00:10:42.860

para el color de los ojos y usaremos algo as como centmetros para la altura y podemos pasar esto como un nmero tan 175.



136

00:10:43.380 --> 00:10:46.130

Hasta el momento no tenemos controles reales en cuanto a qu datos se deben pasar.



137

00:10:46.260 --> 00:10:50.810

Entonces, tcnicamente puedes pasar un diccionario aqu.



138

00:10:50.820 --> 00:10:52.920

Python no se quejara y ahora tenemos una



139

00:10:52.940 --> 00:11:01.130

variable de agente X que ahora es una instancia de un objeto de agente, por lo que si decimos tipo de x, va a decir que es un agente.



140

00:11:01.140 --> 00:11:06.160

Y si recordamos solo X, dice este agente en esta ubicacin y en la memoria de su computadora.



141

00:11:06.160 --> 00:11:12.370

Y ahora podemos decir X puntos y presionar la pestaa y



142

00:11:12.370 --> 00:11:18.130

notar que tenemos otros atributos, podemos verificar el color del agente.



143

00:11:18.130 --> 00:11:19.120

Podemos verificar la altura de los agentes y puede verificar el nombre real de los agentes.



144

00:11:19.240 --> 00:11:24.720

As que todo lo que est haciendo es tomarlo en cuenta cuando



145

00:11:24.790 --> 00:11:32.560

instancias tu mtodo o tu objeto est tomando los parmetros que queras all dentro del mtodo init.



146

00:11:32.860 --> 00:11:35.740

Entonces ese es todo el mtodo init que est haciendo.



147

00:11:35.740 --> 00:11:37.550

Es cuando haces tu primera creacin



148

00:11:37.660 --> 00:11:43.510

o creacin de instancia de este objeto llamado Agente, que va a esperar que pasen estos parmetros y luego va



149

00:11:43.510 --> 00:11:49.960

a asignar esos parmetros a sus atributos y los atributos van a coincidir con el mismo nombre que los parmetros que pasas aqu.



150

00:11:50.140 --> 00:11:55.870

Ahora tambin puede haber un atributo de objeto de clase en el atributo



151

00:11:56.010 --> 00:12:02.970

de objeto de clase va a ser el mismo para cualquier instancia de la clase.



152

00:12:02.970 --> 00:12:05.790

Entonces, lo que quiero decir con eso



153

00:12:05.790 --> 00:12:16.940

est fuera de este mtodo, puedo decir que Planetes es igual a la Tierra y ahora se lo conoce como un atributo de objeto de clase.



154

00:12:16.940 --> 00:12:22.730

Y lo que esto significa es que este atributo de objeto de clase va a



155

00:12:22.800 --> 00:12:29.070

ser verdadero y ya estar configurado para usted para cualquier instancia de la clase de agente.



156

00:12:29.370 --> 00:12:32.280

As que ahora tengo a X como el agente James Bond que tiene ojos verdes y mide 175 centmetros de alto.



157

00:12:32.280 --> 00:12:38.460

Si creo otros agentes llamados Sally.



158

00:12:38.460 --> 00:12:43.140

Tal vez sus ojos son azules y ella es una cazadora de 60 centmetros de alto y no hay quejas all.



159

00:12:43.610 --> 00:12:51.840

Y cuando digo X puntos, volvamos a ejecutar esto de nuevo.



160

00:12:51.890 --> 00:12:55.340

Asegrate de que todas las celdas estn dentro



161

00:12:55.370 --> 00:12:57.450

Si digo x.



162

00:12:57.740 --> 00:12:58.870

As que ese es el agente de James Bond y verifican su verdadero nombre, su verdadera fuente de seguros.



163

00:12:58.940 --> 00:13:03.530

Si reviso el nombre real de Y, su verdadero nombre es Sally.



164

00:13:03.560 --> 00:13:07.280

Con estos atributos de objeto de clase, no tuve la oportunidad



165

00:13:07.640 --> 00:13:14.300

de encontrarlo dentro de la llamada de agente para X o Y, y eso se debe a que un atributo



166

00:13:14.300 --> 00:13:20.360

de objeto de clase debe ser verdadero independientemente de la instancia en que se cree la clase de agente.



167

00:13:20.360 --> 00:13:21.770

As que espero que cada agente viva en el planeta Tierra.



168

00:13:21.770 --> 00:13:25.500

As que s que algo va a ser cierto independientemente de cmo se llame el color de los ojos o la altura.



169

00:13:25.550 --> 00:13:30.350

De modo que puede crear un atributo de objeto de clase que siempre har lo mismo para cualquier instancia.



170

00:13:30.420 --> 00:13:35.130

Es decir, si echamos un vistazo a las llamadas a xey, puedo decir



171

00:13:35.330 --> 00:13:43.640

X puntos y tener un planeta all y va a ser la Tierra y es lo mismo para el planeta Tierra blanco.



172

00:13:43.640 --> 00:13:47.430

As que tanto James Bond como Sally siempre estarn en el planeta Tierra



173

00:13:47.430 --> 00:13:52.250

y no necesito definirlo como un parmetro porque est fuera de este mtodo y es lo primero.



174

00:13:52.310 --> 00:13:57.710

As que aqu es donde van sus atributos de objeto de clase



175

00:13:57.710 --> 00:14:02.720

y va a ser un atributo que siempre quiere que sea verdadero.



176

00:14:02.780 --> 00:14:03.750

Y note aqu que tampoco necesitamos usar el parmetro de auto.



177

00:14:03.760 --> 00:14:08.150

Por lo tanto, cuando comienzas por primera vez, no usars atributos de



178

00:14:08.180 --> 00:14:13.100

objetos de clase a menudo, pero debes tener en cuenta que pueden existir aqu.



179

00:14:13.130 --> 00:14:14.950

De acuerdo, hasta ahora hemos aprendido sobre la sintaxis bsica de crear una clase.



180

00:14:14.960 --> 00:14:19.700

Nuevamente, si subimos aqu, la sintaxis bsica es el



181

00:14:19.700 --> 00:14:26.030

nombre en maysculas de esa clase y luego podemos haber pasado aqu.



182

00:14:26.030 --> 00:14:27.170

Si quieres una clase



183

00:14:27.440 --> 00:14:33.530

que tenga atributos, casi siempre llamars a una clase y luego tendrs este mtodo de inicio especial con la palabra clave self.



184

00:14:33.530 --> 00:14:36.520

Los parmetros que va a pasar para sus



185

00:14:36.680 --> 00:14:40.970

atributos y luego va a hacer la asignacin real de estos atributos.



186

00:14:40.970 --> 00:14:42.090

As que vas a pasar este parmetro y



187

00:14:42.140 --> 00:14:46.520

asignarlo a algn atributo donde la palabra clave de dilogo interno bsicamente le est diciendo a Python, oye, este atributo llamado nombre real se le est asignando a s mismo agente.



188

00:14:46.580 --> 00:14:53.410

Y luego, si desea un atributo de objeto de clase que ser el primero de la clase y



189

00:14:53.900 --> 00:14:58.190

lo llame, aparecer y ya no necesitar usar una palabra clave autodidacta.



190

00:14:58.490 --> 00:15:01.950

De nuevo, no lo usar con mucha frecuencia cuando empiece con programacin orientada a objetos.



191

00:15:01.970 --> 00:15:06.970

Debe saber que es una opcin para usted.



192

00:15:07.010 --> 00:15:09.650

Eso es lo bsico de los atributos.



193

00:15:09.740 --> 00:15:11.270

De nuevo, estas son las caractersticas de una instancia de esta clase.



194

00:15:11.270 --> 00:15:14.630

Si realmente queremos realizar mtodos en esta



195

00:15:14.870 --> 00:15:19.700

clase, vamos a tener que usar una sintaxis ligeramente diferente.



196

00:15:19.700 --> 00:15:20.270

Y los vamos a agregar debajo de nuestra creacin de instancias.



197

00:15:20.300 --> 00:15:23.660

As que avancemos y cubramos los mtodos en nuestra prxima leccin.



198

00:15:23.960 --> 00:15:26.900

Veremos all.



199

00:15:26.960 --> 00:15:27.790

&nbsp;



