1
00:00:00,360 --> 00:00:01,470
Welcome back.

2
00:00:01,470 --> 00:00:06,430
Let's evaluate your performance on the second field readiness exam by going over the solutions.

3
00:00:06,570 --> 00:00:11,730
We'll begin by taking a look at your first task which was to create a for loop and indexing that printed

4
00:00:11,730 --> 00:00:16,580
out the only the words that served as in the sentence string right here so we can do that by saying

5
00:00:16,590 --> 00:00:25,900
for word in my string what we can do is as the hint says is use the Split method and recall the split

6
00:00:25,900 --> 00:00:28,990
method by default splits and the white spaces string.

7
00:00:29,230 --> 00:00:34,870
So now that split is actually just a list of the words and we can show this in another cell.

8
00:00:34,990 --> 00:00:41,510
Just to clarify that if we do that split here we can see secret agents etc. all the words in a list.

9
00:00:41,530 --> 00:00:45,790
So now I can iterate through these words in this list and then I can check what the first letter is

10
00:00:47,180 --> 00:00:53,770
by saying take that word lowercase that word and then off that word index the very first letter off

11
00:00:53,770 --> 00:01:04,260
of it and then if the first letter is equal to S then I'm going to print the word and if I run that

12
00:01:04,410 --> 00:01:07,820
I get back the same results secret super and staying.

13
00:01:07,890 --> 00:01:11,760
So key things here was to realize you could use split in order to create this list.

14
00:01:11,760 --> 00:01:15,860
And when you're iterating through it you can use the lower to lower case.

15
00:01:15,870 --> 00:01:21,810
This entire word and then use indexing to just grab the first character of that word and then check

16
00:01:21,810 --> 00:01:28,540
to see if it equals lowercase us test number two is using the same string as previously used.

17
00:01:28,600 --> 00:01:31,940
Use a for loop to only put out the words with an even number of characters.

18
00:01:31,990 --> 00:01:38,760
It's going to be quite a similar setup we will say for word in my string and will again split this.

19
00:01:38,790 --> 00:01:49,230
We can go through every word and this will say if the length of the word maade to is equal to zero print

20
00:01:49,230 --> 00:01:50,370
out the word.

21
00:01:50,370 --> 00:01:53,850
So what's actually happening is basically in the key line here.

22
00:01:53,880 --> 00:02:00,120
Length of word is going to return an integer length of every word in this particular list once we call

23
00:02:00,120 --> 00:02:01,240
that split on it.

24
00:02:01,240 --> 00:02:05,070
They'll check the length for that word Maat by two is equal to zero.

25
00:02:05,100 --> 00:02:07,870
Meaning when you divide it by 2 it has a remainder of 0.

26
00:02:07,980 --> 00:02:12,570
If that's the case then we know that that word only has an even number of characters so it can go ahead

27
00:02:12,630 --> 00:02:19,480
and print it out past number three was to use a list comprehension to create a list of every first letter

28
00:02:19,840 --> 00:02:20,990
in this string.

29
00:02:21,190 --> 00:02:26,380
So there's a little trick here because basically you want to rewrite something similar to this except

30
00:02:26,380 --> 00:02:28,390
you don't need to check out the S anymore.

31
00:02:28,400 --> 00:02:31,190
Instead we kind of really want to focus on this line right here.

32
00:02:32,030 --> 00:02:33,070
So what do we do.

33
00:02:33,380 --> 00:02:44,240
We can go ahead and say the following will say set up the brackets word indexed at 0 4 word in my string

34
00:02:45,060 --> 00:02:52,040
that split again basically saying for every word in this list my string that split.

35
00:02:52,140 --> 00:02:55,180
Go ahead and index off the zero from that word.

36
00:02:55,200 --> 00:03:01,260
And then we here we have the first letters in the string and if we want to we could also done that lower

37
00:03:01,740 --> 00:03:05,190
in order to lower case this first S was optional.

38
00:03:05,190 --> 00:03:07,540
It's pretty much up to you.

39
00:03:07,540 --> 00:03:09,060
Up next was the useless comprehension.

40
00:03:09,070 --> 00:03:12,010
Create a list of all the even numbers from 0 to 10.

41
00:03:12,010 --> 00:03:21,340
So to do that they can easily say and for n in range and we'll go 0 up to 11 and then we can have our

42
00:03:21,340 --> 00:03:28,990
if statement if and Mattu is 2 0 and you can check out the list comprehension lecture for an example

43
00:03:28,990 --> 00:03:30,940
that pretty much looks like this.

44
00:03:31,700 --> 00:03:33,260
The next one was pretty similar.

45
00:03:33,260 --> 00:03:36,380
It was said use the range functions create a list of all even numbers.

46
00:03:36,380 --> 00:03:43,220
So to do that recall that range function has a third parameter which is a step size of two.

47
00:03:43,370 --> 00:03:48,450
And then if we cast that to illest we get back the same results.

48
00:03:48,460 --> 00:03:53,260
Likewise you could have also done the same thing here or you could just said Comet too and then gotten

49
00:03:53,320 --> 00:04:00,180
rid of the if statement and that would have been the same thing task number six was to create a for

50
00:04:00,180 --> 00:04:04,480
loop that uses the random library to create a list of 10 random numbers.

51
00:04:04,770 --> 00:04:11,040
So to do this for a loop we first set up some sort of list as a placeholder and then we'll say for x

52
00:04:11,190 --> 00:04:21,400
in range 0 to 11 so that we do this 10 times the results list we're going to append the random number

53
00:04:21,400 --> 00:04:28,270
and we'll say random Rantz that built in function and then grab a random number from 0 to 100.

54
00:04:28,570 --> 00:04:33,940
And then finally outside of this for loop we can go ahead and print the results and whoops forgot to

55
00:04:33,940 --> 00:04:35,030
import ran them here.

56
00:04:35,040 --> 00:04:36,100
Run this again.

57
00:04:36,310 --> 00:04:37,390
And here we see the results.

58
00:04:37,390 --> 00:04:40,650
And every time you run this you're pretty much going to get a different set of results.

59
00:04:40,650 --> 00:04:44,890
So keep that in mind since they are random numbers you're not going to get the exact same results every

60
00:04:44,890 --> 00:04:50,700
time task number 7 was to use less comprehension in the random library to create a list of 10 random

61
00:04:50,700 --> 00:04:51,490
numbers.

62
00:04:51,510 --> 00:04:57,280
So that's a very similar thing essentially just transforming the list above into a list comprehension.

63
00:04:57,300 --> 00:05:08,800
So it's a random random random ANC zero to 100 for whatever variable and in range 0 to 11.

64
00:05:09,030 --> 00:05:11,730
And then we get our random list of numbers.

65
00:05:11,730 --> 00:05:13,980
So keep in mind you could call this and whatever you want.

66
00:05:14,040 --> 00:05:17,560
So you could say elements run this and still work.

67
00:05:17,670 --> 00:05:25,420
So it's totally up to you but this is essentially the list comprehension method of this your final task

68
00:05:25,420 --> 00:05:26,490
was created a while loop.

69
00:05:26,510 --> 00:05:31,150
That's going to continually ask the user input even number and it's going to keep repeating that request

70
00:05:31,510 --> 00:05:33,550
until an even integer is provided.

71
00:05:33,790 --> 00:05:36,220
So there are lots and lots of ways you could have done this.

72
00:05:36,220 --> 00:05:37,480
So keep that in mind.

73
00:05:37,690 --> 00:05:43,810
Your results may look different than what I have here but I'm going to do this as I will set some variable

74
00:05:43,810 --> 00:05:51,730
called result and I'll start that off as an odd number and I'll say it while this result Mattu is not

75
00:05:51,760 --> 00:05:53,330
equal to zero.

76
00:05:54,260 --> 00:05:55,490
Do the following.

77
00:05:55,490 --> 00:06:03,920
So all I'm saying here is while this number is not even continues to do something so I'll say number

78
00:06:03,920 --> 00:06:13,020
provided by the user is input and then we'll say please input a number and I will cast this because

79
00:06:13,020 --> 00:06:15,240
remember input returns a string.

80
00:06:15,240 --> 00:06:27,440
I will cast this to be an integer and then I will say what if some Matsu is not equal to zero meaning.

81
00:06:27,480 --> 00:06:29,420
This is still not an even number.

82
00:06:29,520 --> 00:06:33,960
I to keep the result as an odd number else.

83
00:06:34,160 --> 00:06:35,660
I will print.

84
00:06:35,850 --> 00:06:36,840
Thank you.

85
00:06:36,870 --> 00:06:38,730
That is an even number.

86
00:06:40,780 --> 00:06:45,690
And then I will set my result equal to some even number such as two.

87
00:06:45,700 --> 00:06:47,670
So let's take a look at the logic here.

88
00:06:47,680 --> 00:06:50,610
We're saying this result variable starts off as odd.

89
00:06:50,800 --> 00:06:56,890
And while it remains on go ahead and continually ask for an even number and once we do have an even

90
00:06:56,890 --> 00:07:00,670
number go ahead and set the result even and then we're good to go.

91
00:07:00,670 --> 00:07:05,930
So if I run this it's going to ask me to put a number or put in three put in five.

92
00:07:05,920 --> 00:07:10,250
Keep putting in odd numbers but then finally if we put in something like 6 it will say thank you.

93
00:07:10,260 --> 00:07:11,540
That is an even number.

94
00:07:11,560 --> 00:07:12,910
So that's one way to do this.

95
00:07:12,940 --> 00:07:16,800
If it's confusing to you then you have result as the main check.

96
00:07:16,810 --> 00:07:19,620
Well we can do instead is have a result be a boolean.

97
00:07:20,170 --> 00:07:23,950
So we'll say boolean right now is true.

98
00:07:24,340 --> 00:07:30,730
And then we'll say while results so continually run while result is true.

99
00:07:30,970 --> 00:07:37,930
And if the number happens to be odd we will say result is still true but if it happens to be even we'll

100
00:07:37,930 --> 00:07:40,830
say result is false.

101
00:07:40,840 --> 00:07:43,690
So this is actually the exact same thing.

102
00:07:43,890 --> 00:07:47,560
And if this is more readable to you or makes more sense go ahead and do it this way.

103
00:07:47,760 --> 00:07:52,320
Basically just have some sort of variable whose condition is going to change based off what you want

104
00:07:52,320 --> 00:07:56,240
it to accomplish which was to get an even number from the user.

105
00:07:56,240 --> 00:07:56,730
All right.

106
00:07:56,880 --> 00:08:00,450
That's it for field readiness exam number two hope you dwell on it.

107
00:08:00,450 --> 00:08:01,380
We'll see at the next lesson.

108
00:08:01,380 --> 00:08:01,710
Recruit.

