1
00:00:01,090 --> 00:00:02,100
Welcome back agent.

2
00:00:02,170 --> 00:00:05,930
Let's now discuss working of pedia files in Python.

3
00:00:06,520 --> 00:00:11,800
Often in the field you will need to work with not only CSFB files but also pedia files and there are

4
00:00:11,800 --> 00:00:14,350
many libraries for PBF with Python.

5
00:00:14,350 --> 00:00:17,370
The most common one is Pi PDA too.

6
00:00:17,440 --> 00:00:21,910
You can install it at your command line by running Pipp install py PDA.

7
00:00:22,150 --> 00:00:28,170
And notice the capitalization here we have uppercase P and in lowercase Y and then all uppercase PBF

8
00:00:28,270 --> 00:00:33,640
and then two that needs to match in order for the installation to work again just a command line you

9
00:00:33,640 --> 00:00:34,240
can type up.

10
00:00:34,240 --> 00:00:39,200
Pitman's Thall PI PDAF to keep in mind.

11
00:00:39,230 --> 00:00:43,780
Not every pedia file will be readable by Python pedia ifs that are too blurry.

12
00:00:43,790 --> 00:00:46,200
Have a special encoding encrypted.

13
00:00:46,340 --> 00:00:49,020
Or maybe just create a particular program that doesn't work well.

14
00:00:49,040 --> 00:00:50,340
Typedef to.

15
00:00:50,360 --> 00:00:57,670
It just won't be able to read it typedef to can only read text information from a PDA document.

16
00:00:57,680 --> 00:01:01,630
It won't be able to grab images or other media files from the PTF.

17
00:01:01,920 --> 00:01:10,740
Let's not explore how to work with this particular pipe program with Python.

18
00:01:10,770 --> 00:01:14,890
The first thing we're going to do is import py PTF too.

19
00:01:14,910 --> 00:01:20,400
So make sure you've installed at your command line already and then once we do that we can simply open

20
00:01:20,910 --> 00:01:27,350
a file and it's going to be similar to the way we opened CXVII files or really any other file.

21
00:01:27,450 --> 00:01:32,130
The file We're going to be working with is the working underscore business underscore proposal that

22
00:01:32,240 --> 00:01:36,600
pedia you can find under your yellow mission folder and it looks something like this.

23
00:01:36,600 --> 00:01:41,640
If you're just to open it and your browser has business proposal and then essentially just some random

24
00:01:41,640 --> 00:01:45,710
text here over a couple of pages.

25
00:01:45,780 --> 00:01:50,040
So since we're in the same directory as it we're just going to build a tab autocomplete parking business

26
00:01:50,040 --> 00:01:51,580
proposal PBF.

27
00:01:51,780 --> 00:01:55,930
And the last thing to know is because it's a PDA file.

28
00:01:55,950 --> 00:01:59,400
We need to read it not just with the R mode but also with the RB.

29
00:01:59,490 --> 00:02:02,560
Essentially saying read it as a binary file.

30
00:02:02,880 --> 00:02:08,410
Once we do that we're able to create a PDAF file reader version of it.

31
00:02:08,410 --> 00:02:14,890
It will say PTF reader is equal to pi PTF 2.

32
00:02:15,300 --> 00:02:19,890
And then we can call PTF file reader on that variable.

33
00:02:19,950 --> 00:02:23,390
And this is very similar to the same way we created a cxxviii reader.

34
00:02:23,690 --> 00:02:29,820
But now we have a PDAF file reader so there's a few things we can do now with this variable.

35
00:02:29,820 --> 00:02:33,040
You can ask for the of pages attribute.

36
00:02:33,300 --> 00:02:37,920
So it's an attribute method meaning there's no open close parentheses and then returns back the number

37
00:02:37,920 --> 00:02:39,840
of pages in the document.

38
00:02:39,840 --> 00:02:43,800
And if you actually want to grab a page you need to do the following.

39
00:02:43,800 --> 00:02:53,130
You can say page one variable is equal to PTF reader and then call get page and then Passons starting

40
00:02:53,130 --> 00:03:00,000
at index 0 that will grab the first page and then FXE want Page 1 text.

41
00:03:00,060 --> 00:03:09,720
I can grab the page one object and call the extract text method and from there I will have all the text

42
00:03:09,720 --> 00:03:11,240
on that first page.

43
00:03:11,280 --> 00:03:17,310
So keep in mind it's only grabbing the actual text and it also won't be able to really understand what

44
00:03:17,400 --> 00:03:21,880
is wanted differently or what has different capitalisation.

45
00:03:21,900 --> 00:03:27,570
We take a look at the very first page where we noticed that business proposals the title and the revolution

46
00:03:27,570 --> 00:03:29,380
is coming as some subtitle.

47
00:03:29,670 --> 00:03:34,620
And if we zoom in here we can also see that it has numbering at the bottom so business proposal page

48
00:03:34,620 --> 00:03:40,770
1 and then she go down because proposal page to this pedia reader is really not going to be able to

49
00:03:40,830 --> 00:03:46,890
understand that and few pedia readers are really that's something that's very difficult for a computer

50
00:03:46,890 --> 00:03:48,570
to programmatically realize.

51
00:03:48,630 --> 00:03:52,650
But it will be able to read in that text so we can see here we have business proposal.

52
00:03:52,650 --> 00:03:56,610
We can see the revolution is coming and there's a backslash.

53
00:03:56,680 --> 00:03:58,870
And in order to indicate that new lines.

54
00:03:59,010 --> 00:04:03,630
And if you go all the way to the bottom you'll see business proposal and then kind of an indication

55
00:04:03,630 --> 00:04:05,180
of page 1 there.

56
00:04:05,340 --> 00:04:10,560
So once you're done reading the sexual text where you can do is you can either print out the text so

57
00:04:10,560 --> 00:04:17,610
we could say print prints page 1 text in order to see it in a little bit more a fashion that it's intended

58
00:04:17,610 --> 00:04:19,850
to or you could just close the file.

59
00:04:19,890 --> 00:04:23,620
And can say f Bhatt's close.

60
00:04:24,060 --> 00:04:29,380
Now let's imagine we actually wanted to add to the PTF so we cannot write to PTF.

61
00:04:29,400 --> 00:04:34,470
Using Python because of the differences between the single string type of Python and the variety of

62
00:04:34,470 --> 00:04:37,950
fonts placements and other parameters that a PDA could have.

63
00:04:38,160 --> 00:04:42,480
Well we can do however is copy pages and the Penda pages to the end.

64
00:04:42,510 --> 00:04:48,420
So again just to make it clear because of all the different varieties of fonts placements and parameters

65
00:04:48,720 --> 00:04:53,740
we're not going to be able to directly for instance insert a paragraph into this PDA.

66
00:04:53,970 --> 00:04:56,550
What we can do though is copy the last page.

67
00:04:56,580 --> 00:05:00,170
Or really any page in the PDAF and then append that to the end.

68
00:05:00,510 --> 00:05:09,330
So the way we would do that is we would again open that file working business proposal and then say

69
00:05:10,450 --> 00:05:14,200
Arbi for reading in binary mode.

70
00:05:14,260 --> 00:05:15,990
Create the reader object again.

71
00:05:16,150 --> 00:05:24,500
So that's PI PDAF typedef to P.F. file reader say fear.

72
00:05:24,900 --> 00:05:26,070
And we can say something like.

73
00:05:26,070 --> 00:05:38,220
The first page is equal to PEF for get page and will get page zero the very first page and then I'm

74
00:05:38,230 --> 00:05:41,680
going to create a writer object.

75
00:05:41,760 --> 00:05:53,250
Will say PTF underscore writer is equal to pi PTF to PTF file writer and just open close Princie here

76
00:05:53,310 --> 00:05:57,240
essentially creating the writer object and using this writer object.

77
00:05:57,250 --> 00:06:07,630
We can say PTF writer and we can add a page and we'll add in that first page.

78
00:06:08,230 --> 00:06:22,090
So once we ran the page all we can do is say PDAF output is equal to open and we'll say some new file

79
00:06:22,330 --> 00:06:31,490
PTF and we'll hope we will open this in right binary mode and then we can actually write that output.

80
00:06:31,560 --> 00:06:42,040
You can say PTF writer writes that PTF output and then once you've done everything you can just close

81
00:06:42,040 --> 00:06:48,910
the files so we can say PTF output and then close that as well.

82
00:06:49,830 --> 00:06:50,360
OK.

83
00:06:50,670 --> 00:06:57,550
So that's essentially the way you can writes to new files or essentially make copies.

84
00:06:57,660 --> 00:07:03,840
All we did here was we opened up our original business proposal PDAF then we created a reader object

85
00:07:03,930 --> 00:07:05,360
off of this file.

86
00:07:05,520 --> 00:07:12,300
We grab the first page then we created a writer objects after we read the first page then using that

87
00:07:12,390 --> 00:07:14,920
we added a page the first page.

88
00:07:15,120 --> 00:07:24,030
To this writer object and then we were able to open this new some new file and then say right PTF output

89
00:07:24,120 --> 00:07:32,430
and then we close them and if we take a look at this some new file PTF we have it open right here.

90
00:07:32,470 --> 00:07:34,650
It's essentially just that first page.

91
00:07:34,720 --> 00:07:36,400
So that's all you can really do.

92
00:07:36,420 --> 00:07:40,020
Just grab some pages you want and save it to a new file.

93
00:07:40,030 --> 00:07:41,810
Or if you wanted to append.

94
00:07:41,860 --> 00:07:46,660
You could open this as a B instead of just WB.

95
00:07:46,750 --> 00:07:46,960
All right.

96
00:07:46,960 --> 00:07:52,480
So let's do a very simple example of grabbing all the text from a PDA file which more likely than not

97
00:07:52,570 --> 00:07:54,700
is what you're going to be doing.

98
00:07:54,730 --> 00:07:56,040
We're going to again.

99
00:07:56,230 --> 00:08:00,500
Let's make a couple of cells here will open up the file.

100
00:08:00,680 --> 00:08:02,210
It's working business proposal.

101
00:08:03,000 --> 00:08:11,460
With our B because it's a Barney file and then we'll create a list an empty list to hold every page

102
00:08:11,460 --> 00:08:19,520
is text and basically the index will correspond to the page number will create the reader object again.

103
00:08:20,140 --> 00:08:24,470
So PTF lips should be capitalized.

104
00:08:24,470 --> 00:08:33,150
PTF file reader pasand the file we want to read and then say for p in range

105
00:08:35,490 --> 00:08:42,080
PDAF reader the number of pages will do the following.

106
00:08:43,270 --> 00:08:49,090
We will grab the page itself which will be calling the reader object and then saying get page

107
00:08:53,390 --> 00:08:56,810
and we'll pasand p here so we can really say.

108
00:08:56,810 --> 00:09:01,120
And so for page number that makes more sense.

109
00:09:02,170 --> 00:09:04,880
And then the PDAF text itself.

110
00:09:04,880 --> 00:09:11,690
We're going to append the extracts text from that page.

111
00:09:11,850 --> 00:09:13,710
You have to call that method.

112
00:09:14,110 --> 00:09:21,620
So when we run this and we check out our PTF text now we have a list of every page so you can see every

113
00:09:21,620 --> 00:09:27,530
index position and the pages match up so all we're doing here is the following.

114
00:09:27,540 --> 00:09:30,250
We're opening up the file in read binary mode.

115
00:09:30,550 --> 00:09:39,110
We are saying an empty list for a PDA text we read in the file with pipes F to and then for every page.

116
00:09:39,160 --> 00:09:45,040
So for an in range for the number of pages that this file has we grabbed the page and then we extract

117
00:09:45,040 --> 00:09:47,630
the text from the page and we append that to that list.

118
00:09:47,650 --> 00:09:50,580
So now using PDL text where you could do it.

119
00:09:50,590 --> 00:09:59,730
For example if you wanted to print the page at index to you could just do this and I can see here's

120
00:09:59,740 --> 00:10:02,010
a page index too.

121
00:10:02,120 --> 00:10:02,490
All right.

122
00:10:02,510 --> 00:10:04,850
That's really all you have to do for PBS.

123
00:10:04,880 --> 00:10:08,590
Hopefully that was helpful to you and we'll see you at the next overview.

