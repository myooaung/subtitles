1
00:00:00,440 --> 00:00:05,780
Let's now walk through some examples tasks using Python and the various libraries for web scraping.

2
00:00:06,090 --> 00:00:07,250
Let's go to Jupiter notebook

3
00:00:11,350 --> 00:00:14,100
to begin we're going to start with a very simple web site.

4
00:00:14,240 --> 00:00:22,440
We will be scraping w WWE example dot com just see example domain for illustrating purposes.

5
00:00:22,480 --> 00:00:29,600
So the first thing we need to do is import the requests library the request library allows us to send

6
00:00:29,600 --> 00:00:32,870
the request and grab information from a Web site.

7
00:00:32,980 --> 00:00:37,980
We will say Arrius is equal to then we'll type out requests.

8
00:00:37,990 --> 00:00:39,510
We will say Dot get.

9
00:00:39,670 --> 00:00:42,490
And then we need to provide that you are all of the Web site.

10
00:00:42,490 --> 00:00:46,980
So in this case we're going to say HTP for Slash for Slash.

11
00:00:47,010 --> 00:00:49,610
W w w dot example dot com.

12
00:00:49,630 --> 00:00:53,530
And it's important that you add in either HTP or Eesh to P. S..

13
00:00:53,590 --> 00:00:58,060
Otherwise if you just say exampled dot com most likely you're going to get some sort of failure.

14
00:00:58,060 --> 00:01:01,500
Now keep in mind if you have a firewall you're going to need to disable it.

15
00:01:01,510 --> 00:01:04,570
Otherwise Python may get blocked from scraping the Web site.

16
00:01:04,960 --> 00:01:10,770
So if you run this and you've already installed requests then you should see this run with no problem.

17
00:01:10,930 --> 00:01:14,920
And if we check out the result of this we have a response.

18
00:01:14,910 --> 00:01:17,290
Results and this response.

19
00:01:17,500 --> 00:01:20,480
We can grab the text attribute.

20
00:01:20,650 --> 00:01:26,030
And this is essentially the actual each team that's on the Web site and we're going to be using the

21
00:01:26,030 --> 00:01:28,990
beautiful soup to analyze the extracted page.

22
00:01:29,140 --> 00:01:30,360
So keep that difference in mind.

23
00:01:30,370 --> 00:01:35,500
We use the requests library to actually get the content of a Web site and then we use the beautiful

24
00:01:35,500 --> 00:01:37,530
soup to analyze that content.

25
00:01:37,570 --> 00:01:43,390
And if we check out exampled dot com and if we were to right click and view page source we can see that

26
00:01:43,390 --> 00:01:47,720
we have the actual HTML file from example dot com.

27
00:01:47,740 --> 00:01:51,640
This is essentially the information that's returned when you type in a request.

28
00:01:51,640 --> 00:01:57,850
You can see that same information here except it's not nicely formatted but it's the same information.

29
00:01:57,880 --> 00:02:03,090
So what we're going to do next is import B-S for food beautiful soup.

30
00:02:03,640 --> 00:02:10,390
And the idea behind beautiful soup is that we create a soup object that contains all the quote unquote

31
00:02:10,390 --> 00:02:18,220
ingredients of a web page so it will do is say soup is equal to B-S for and we'll call the beautiful

32
00:02:18,220 --> 00:02:19,420
soup method.

33
00:02:21,130 --> 00:02:24,300
And then we will pass in this text we have right here.

34
00:02:24,490 --> 00:02:34,290
So we're going to say yes that text and then we need to pasan l l as a code that allows us to actually

35
00:02:34,710 --> 00:02:41,140
format this and then read it and we need to make sure you've installed Elham L S M library as well.

36
00:02:41,250 --> 00:02:43,680
So make sure you've done pipin Soller Condon's call for both.

37
00:02:43,710 --> 00:02:48,250
B As for the request library and elec Semei library.

38
00:02:48,270 --> 00:02:53,040
Once you run this the beautiful soup is going to create a soup object out of this.

39
00:02:53,040 --> 00:02:57,070
That means you can easily read things off of it or select elements off of it.

40
00:02:57,360 --> 00:03:03,270
So we have this soup object so if we check out what soup is it's this beautiful soup object and we can

41
00:03:03,270 --> 00:03:08,170
call the Select method off of this and then we can pass and tags.

42
00:03:08,280 --> 00:03:10,990
So if we take a look back at the H team L here.

43
00:03:11,010 --> 00:03:16,760
If I zoom in a lot I can see that there's a title here for the web page and it says example domain.

44
00:03:16,920 --> 00:03:21,580
And that's going to be the same title that's appear in the tab of the example domain.

45
00:03:21,690 --> 00:03:26,230
So when I come here I can select the title tag.

46
00:03:26,260 --> 00:03:30,730
Now what is actually returned the back is a list of a tag object.

47
00:03:30,790 --> 00:03:32,210
So let's explain that a little more.

48
00:03:32,210 --> 00:03:42,510
We're going to say that my title tag list is equal to super select title.

49
00:03:42,840 --> 00:03:49,050
I run this and if I check up my title tag list and run that I see I have this and that's going to be

50
00:03:49,050 --> 00:03:55,670
a list of everything that had a title tag inside of this example domains H-2A mail.

51
00:03:55,680 --> 00:04:00,960
Now what we can do is index off of this and then I can see I have this tag object.

52
00:04:00,960 --> 00:04:07,680
So this is actually not a string yet it's still if we take a look at type it's this special beautiful

53
00:04:07,680 --> 00:04:10,120
suit for element tag object.

54
00:04:10,320 --> 00:04:12,580
And what we want is the actual text of that.

55
00:04:12,600 --> 00:04:15,400
So if I take a look at just what that was.

56
00:04:15,840 --> 00:04:18,530
It's this title and I just want the actual text.

57
00:04:18,540 --> 00:04:24,720
So what I'm going to do is say Dot and there's a text method you can call for this to get the example

58
00:04:24,720 --> 00:04:28,790
domain and that is a full example of web scraping.

59
00:04:28,790 --> 00:04:31,790
It's a very simple example but it technically goes through all the steps.

60
00:04:31,790 --> 00:04:32,660
Let's quickly review.

61
00:04:32,660 --> 00:04:34,470
So we have an idea of what we need to do.

62
00:04:34,820 --> 00:04:40,220
You first need to import the request library then send your request to whatever you are all you're interested

63
00:04:40,220 --> 00:04:41,300
in.

64
00:04:41,300 --> 00:04:47,270
Check the text and that should be the HTML document itself and then you're going to import beautiful

65
00:04:47,270 --> 00:04:48,110
soup.

66
00:04:48,110 --> 00:04:54,680
You're going to create a soup out of that text then you're going to use L L S and L as a string code

67
00:04:54,680 --> 00:04:58,050
for reading this text in and created the soup from it.

68
00:04:58,280 --> 00:05:05,120
Then you can select different tags from the actual soup object and that will return back a list of all

69
00:05:05,120 --> 00:05:09,950
the objects to have that tag and then you can extract information from that.

70
00:05:09,950 --> 00:05:15,920
Now let's move on to another example where we attempt to grab all the elements of a particular class

71
00:05:16,010 --> 00:05:17,300
on a Web site.

72
00:05:17,420 --> 00:05:23,210
For example we're going to be using a Wikipedia page and the Wikipedia page will be using is the Wikipedia

73
00:05:23,210 --> 00:05:25,900
page for ROOM 6 4 1 8.

74
00:05:26,090 --> 00:05:31,670
And you have this link in the guide to web scraping notebook so you can go ahead and check that out

75
00:05:31,730 --> 00:05:34,540
or do a simple Google search for this Wikipedia page.

76
00:05:34,580 --> 00:05:39,920
Well we will attempt to do is grab all the section headings of this wikipedia article and what we mean

77
00:05:39,920 --> 00:05:46,810
by section headings are the words here description last to gallery and then see also.

78
00:05:46,850 --> 00:05:50,750
So the actual titles of these headings or whatever these words are.

79
00:05:50,750 --> 00:05:53,750
The text and these headings is what we want to grab.

80
00:05:54,200 --> 00:05:57,770
So how do we actually do this when we first need to actually request the Web site.

81
00:05:57,770 --> 00:06:03,380
So let's do that and then we'll come back in a second and explain what this syntax means.

82
00:06:03,620 --> 00:06:08,380
But we will say R E S is equal to requests.

83
00:06:08,390 --> 00:06:16,190
Dots gets and we will passen that u r l and it will grab that Web site information for us then we will

84
00:06:16,190 --> 00:06:26,080
say soup is equal to B S for beautiful soup and then we'll pass in the text and say x.

85
00:06:26,180 --> 00:06:28,970
L in order to read that in.

86
00:06:29,010 --> 00:06:31,400
And now we have a soup object.

87
00:06:31,410 --> 00:06:34,970
So then I can't say soup select.

88
00:06:35,040 --> 00:06:36,660
However now I have a problem.

89
00:06:36,780 --> 00:06:39,630
Previously I wanted to select the title.

90
00:06:39,630 --> 00:06:42,220
Now we need to figure out what I actually want to select.

91
00:06:42,300 --> 00:06:47,870
And in this case we're going to need to inspect this website or inspect the source code for this Web

92
00:06:47,870 --> 00:06:48,460
site.

93
00:06:49,170 --> 00:06:54,660
So what you need to do is whenever your web scraping a Web site and you're looking for a particular

94
00:06:54,690 --> 00:07:00,420
class or what you actually want to pass into the select statement what you do is you right click on

95
00:07:00,420 --> 00:07:06,020
whatever you're interested in and then say inspect not view page source but inspect.

96
00:07:06,180 --> 00:07:13,500
And then if you're using the Chrome browser you should be able to see a doc h l type come up on part

97
00:07:13,500 --> 00:07:18,890
of your screen either on the bottom or the side and you will see highlighted what you just inspected

98
00:07:19,080 --> 00:07:23,210
and hopefully what you inspected either has an ID or a class.

99
00:07:23,340 --> 00:07:31,530
And if we look at this closely we can see that under each two tab there is a class M.W. that headline

100
00:07:31,620 --> 00:07:33,880
and an ID description.

101
00:07:33,940 --> 00:07:37,280
There's no right answer as far as what we need to select.

102
00:07:37,290 --> 00:07:42,870
A lot of times it's going to take experimentation to see if it makes sense to grab IDs make sense to

103
00:07:42,870 --> 00:07:46,850
grab headers or tags or it makes sense to grab a class.

104
00:07:46,860 --> 00:07:52,830
So one approach would be to try to grab everything that is an H to heading on this page and that might

105
00:07:52,830 --> 00:07:54,660
be all the titles.

106
00:07:54,660 --> 00:07:59,280
However we might get some other stuff really you're going to have to experiment when working of other

107
00:07:59,280 --> 00:08:00,400
web sites.

108
00:08:00,510 --> 00:08:06,600
In our case we're going we're going to attempt to use this class M.W. dash headline because that seems

109
00:08:06,600 --> 00:08:12,660
to be like a good indicator of the actual headers for the content description lawsuit cetera.

110
00:08:12,870 --> 00:08:21,120
So we will do as we were we are going to grab this M.W. dash headline and use that as our selection.

111
00:08:21,130 --> 00:08:31,400
So we'll come back here and we will say M.W. dash headline except keep in mind M.W. Dasch headline.

112
00:08:31,450 --> 00:08:34,560
It's actually a class so there's a bit of a syntax.

113
00:08:34,570 --> 00:08:37,820
We need to use for certain CSSA calls.

114
00:08:38,170 --> 00:08:39,610
And these are the following.

115
00:08:39,610 --> 00:08:43,750
You can find this table as well in your notebook but these are the following syntax calls for the different

116
00:08:43,750 --> 00:08:45,290
things are going to select.

117
00:08:45,340 --> 00:08:51,040
If you just say that selects with a single string that's going to assume that that string stands for

118
00:08:51,040 --> 00:08:55,280
some sort of h m l element such as all the paragraphs.

119
00:08:55,300 --> 00:09:01,270
Everything of a DIV tag everything or title just like we did appear we get everything of the title.

120
00:09:01,270 --> 00:09:02,260
In this case.

121
00:09:02,320 --> 00:09:08,070
Were you actually going to be using a CSSA class if you start with a hash tag that's going to be trying

122
00:09:08,070 --> 00:09:10,510
to grab anything with that ID.

123
00:09:10,830 --> 00:09:16,110
And then if you start with a period or a dot that's going to grab everything with the class.

124
00:09:16,140 --> 00:09:17,830
In this case named notice.

125
00:09:17,970 --> 00:09:24,520
So we're using a class which means we need to store our select statement with Dot M.W. dash headline

126
00:09:25,050 --> 00:09:28,710
and if you were to open up a CSSA file it follows the same convention.

127
00:09:28,710 --> 00:09:35,040
So IDs for hash tag classes start off a dot and if you want to get a little more complex with your select

128
00:09:35,040 --> 00:09:43,650
methods you can also have two tags spaced out and the selects all elements named spanne that are within

129
00:09:43,800 --> 00:09:45,590
a div elements.

130
00:09:45,750 --> 00:09:53,400
And if you use this greater than symbol that's going to select any elements named spanne that are directly

131
00:09:53,400 --> 00:09:58,100
with an element named div with no other elements in between.

132
00:09:58,110 --> 00:10:02,960
So these are a little more complex and sometimes they require you to study up a little more on team

133
00:10:02,970 --> 00:10:03,790
Ellen CSSA.

134
00:10:03,810 --> 00:10:08,700
But in our case we're mostly going to be using these first three either grab all the elements of some

135
00:10:08,700 --> 00:10:13,470
sort of tag grab all the ID elements or grab all the class elements.

136
00:10:13,470 --> 00:10:20,160
Now when I run this select statement for the class it looks like I get a list of all the letters that

137
00:10:20,160 --> 00:10:25,110
I wanted description lawsuit Galerie see also references and external links.

138
00:10:25,110 --> 00:10:26,970
So it looks like we made the right choice.

139
00:10:27,090 --> 00:10:29,090
If we had done another choice like soup.

140
00:10:29,280 --> 00:10:36,580
Select everything from H to and ran that I probably would have gotten some stuff that it didn't want

141
00:10:36,580 --> 00:10:40,230
and you can see here it looks like we're getting more information than we really wanted.

142
00:10:40,240 --> 00:10:45,340
And it looks like it has some other sections in there like navigation menu but it might have been a

143
00:10:45,340 --> 00:10:46,410
pretty close call.

144
00:10:46,420 --> 00:10:51,160
So as I previously mentioned it's going to take some guessing and checking to see what's the right thing

145
00:10:51,160 --> 00:10:52,390
you want to select.

146
00:10:52,480 --> 00:10:56,730
In our case it looks like it's going to be M.W. that headline.

147
00:10:56,740 --> 00:11:01,420
Now remember I actually just want the text of this not the for tag objects.

148
00:11:01,510 --> 00:11:05,110
So instead of that I'm going to iterate through this.

149
00:11:05,500 --> 00:11:15,000
We're going to say for item in this list of tags print out the items text and then when we run that

150
00:11:15,080 --> 00:11:20,850
I get back what I wanted description lawsuit Galerie see also references and external links.

151
00:11:20,910 --> 00:11:22,750
So let's review what we did here.

152
00:11:22,870 --> 00:11:29,610
What we did was we sent a request to the U R L we created a soup out of that by passing in the text

153
00:11:29,610 --> 00:11:31,120
of that and created soup.

154
00:11:31,290 --> 00:11:33,150
And then we said soup that select.

155
00:11:33,210 --> 00:11:40,370
And we had to do was use the inspect tool in our browser to actually figure out what we're looking for.

156
00:11:40,410 --> 00:11:43,770
And that's really the hardest part of any web scraping.

157
00:11:43,770 --> 00:11:49,650
It's not actually getting the stuff or creating the soup it's trying to figure out what exactly am I

158
00:11:49,650 --> 00:11:50,920
trying to select.

159
00:11:50,970 --> 00:11:55,740
And we're looking at pretty basic examples so it's more or less obvious especially if you have a little

160
00:11:55,740 --> 00:12:00,820
experience weps scraping but a lot of times there's going to be classes within classes.

161
00:12:00,840 --> 00:12:06,090
Many I had an idea for a lot of elements and they're going to be tags associated with that.

162
00:12:06,140 --> 00:12:11,190
So you're going to do some guessing and checking to see what you are actually trying to grab or select

163
00:12:11,520 --> 00:12:13,150
in order to grab what you want.

164
00:12:13,910 --> 00:12:18,920
But in our case we figured out that we wanted to grab a class and because it was a class we had to start

165
00:12:18,920 --> 00:12:22,280
with a period or a there and then the class name.

166
00:12:22,280 --> 00:12:26,390
So as a review if it's just an HTL tag you pass in the string.

167
00:12:26,390 --> 00:12:28,220
If it's a particular ID.

168
00:12:28,340 --> 00:12:34,310
So if you were to come over here and you saw the description and you wanted to grab that ID then you

169
00:12:34,310 --> 00:12:37,250
would say hash tag and the ID name.

170
00:12:37,250 --> 00:12:42,240
Keep in mind IDs only occur or should only occur once each team document.

171
00:12:42,290 --> 00:12:47,480
So it's a good indication that describing one thing if you're trying to grab a class of objects you

172
00:12:47,480 --> 00:12:52,340
would say dot and then whatever name of the classes and then you have some more complex methods in case

173
00:12:52,340 --> 00:12:55,490
you want elements within elements.

174
00:12:55,490 --> 00:13:00,150
All right we still have a few more examples to go and we'll be going over them in the next lesson.

175
00:13:00,170 --> 00:13:00,800
We'll see you there.

176
00:13:00,810 --> 00:13:01,210
Agent.

