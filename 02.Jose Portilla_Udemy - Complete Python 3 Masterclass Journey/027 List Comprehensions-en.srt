1
00:00:00,270 --> 00:00:00,990
Welcome back.

2
00:00:00,990 --> 00:00:07,250
Let's now discuss list comprehensions list comprehensions are a unique way of quickly creating a list

3
00:00:07,340 --> 00:00:08,810
with Python.

4
00:00:08,810 --> 00:00:14,450
They basically allow you to build out lists using a different notation essentially allowing you to create

5
00:00:14,510 --> 00:00:19,560
a one line for loop built inside of list brackets.

6
00:00:19,580 --> 00:00:24,470
The syntax can be confusing at first for new recruits but break it down step by step will hopefully

7
00:00:24,470 --> 00:00:26,660
make it all clear in order to do this.

8
00:00:26,660 --> 00:00:29,650
Let's jump to a Jupiter note book and show you the syntax.

9
00:00:34,850 --> 00:00:38,080
Let's begin with a simple example using a for loop.

10
00:00:38,480 --> 00:00:46,080
We'll start off with an empty list called my list and let's imagine we have some sort of string s and

11
00:00:46,120 --> 00:00:51,070
we'll assign this string some string.

12
00:00:51,070 --> 00:00:57,790
Now imagine we wanted to somehow get every single character to be an individual element in this list.

13
00:00:57,790 --> 00:01:03,380
Well we could do is we can use a for loop saying four letter in the string.

14
00:01:03,400 --> 00:01:09,650
S Take my list and the pen that letter to the list.

15
00:01:09,940 --> 00:01:13,130
And if I run this and check the result of my list.

16
00:01:13,130 --> 00:01:19,250
Now I have backlist where every single element is now the characters that we were iterating through

17
00:01:19,430 --> 00:01:20,580
in this for a loop.

18
00:01:20,810 --> 00:01:24,620
Let's now show how we could do the same task using a list comprehension.

19
00:01:24,920 --> 00:01:28,460
We'll begin by actually deleting this first line my list.

20
00:01:28,460 --> 00:01:34,280
Since we don't actually need to define that yet and we're going to do here is we basically change this

21
00:01:34,370 --> 00:01:36,170
append statement.

22
00:01:36,170 --> 00:01:42,560
Instead all we do is we take this letter cut it and put it in front of here.

23
00:01:42,600 --> 00:01:49,890
So we're saying letter for letter in S and then we get rid of the append and we get rid of this colon

24
00:01:51,120 --> 00:01:57,580
and then we put this inside of brackets and that is the list comprehension format.

25
00:01:57,660 --> 00:02:06,420
You say element four elements in iterable and inside of brackets and then we can have this be my new

26
00:02:06,420 --> 00:02:09,140
list and that is list comprehension.

27
00:02:09,180 --> 00:02:18,150
Essentially similar to a one line for loop and if we check up my list against my new list we get the

28
00:02:18,150 --> 00:02:19,590
exact same results.

29
00:02:19,620 --> 00:02:22,430
So let's walk through a couple more examples.

30
00:02:22,440 --> 00:02:26,410
Let's imagine we wanted to get a list of a bunch of square numbers.

31
00:02:26,490 --> 00:02:40,570
What I could do is say squares is equal to here I'm going to say X to the power of two for x in range.

32
00:02:40,730 --> 00:02:45,750
We can say zero to 11 and then if I took a look take a look at what squares is.

33
00:02:45,820 --> 00:02:47,640
It's these numbers Square.

34
00:02:47,660 --> 00:02:49,960
So it's the numbers and range 0 to 11.

35
00:02:50,000 --> 00:02:51,520
So the power of two.

36
00:02:51,530 --> 00:02:59,690
So again the general syntax is element for elements in some sort of iterable either range or a list

37
00:02:59,780 --> 00:03:02,660
or another string etc..

38
00:03:02,690 --> 00:03:05,620
So let's show another example called evens.

39
00:03:06,370 --> 00:03:15,380
And here we're going to create a list of even numbers will say x for x in range 0 to 10.

40
00:03:15,550 --> 00:03:22,450
And if we run that and check evens we get back the actual numbers in order to get only the even numbers

41
00:03:22,460 --> 00:03:29,640
we need to add some sort of if statement and the if statement we're going to say is if X percent sign

42
00:03:29,650 --> 00:03:35,240
2 and that's mod 2 or modulus operator is equal to zero.

43
00:03:35,890 --> 00:03:37,930
And then I only get back the even numbers.

44
00:03:37,930 --> 00:03:40,940
So let's quickly explain what the smart operator can do.

45
00:03:41,170 --> 00:03:47,400
In case you haven't seen it before what most operators do is they return the remainder after the division.

46
00:03:47,620 --> 00:03:55,230
So you can imagine that four divided by three is one point three through three three but the remainder

47
00:03:55,410 --> 00:03:58,950
of this is one because three goes to four once.

48
00:03:58,960 --> 00:04:00,230
Remainder 1.

49
00:04:00,250 --> 00:04:09,680
So if you say for mod 3 you'll get back the value 1 if you say five more three that you have remained

50
00:04:09,680 --> 00:04:10,470
are two.

51
00:04:10,880 --> 00:04:17,690
And if you say six three you have remainder zero because three goes into six evenly two times with no

52
00:04:17,690 --> 00:04:18,770
remainder.

53
00:04:18,770 --> 00:04:24,560
And this maade function allows you to check the numbers even by saying maade to check if it's equal

54
00:04:24,560 --> 00:04:32,220
to zero because any number that's even when you check the maade against two it should have no remainder.

55
00:04:32,220 --> 00:04:33,860
And that's so you can check for something.

56
00:04:33,920 --> 00:04:35,310
Even.

57
00:04:35,320 --> 00:04:38,230
So that's another example of a list comprehension.

58
00:04:38,560 --> 00:04:42,630
And finally you can also do an if else statement in a list comprehension.

59
00:04:42,640 --> 00:04:46,960
But keep in mind at a certain point you're really going to be sacrificing readability.

60
00:04:47,000 --> 00:04:48,810
And that's also a big part of Python.

61
00:04:49,000 --> 00:04:53,310
So if you're find yourself having trouble figure out how to put something in a list comprehension.

62
00:04:53,440 --> 00:04:54,800
Just use a for loop instead.

63
00:04:54,820 --> 00:04:58,140
It's almost always just as efficient as list comprehension.

64
00:04:58,150 --> 00:05:02,710
You'll find yourself using lists comprehensions as you get more advanced in Python they'll feel forced

65
00:05:02,770 --> 00:05:06,520
to constantly have to use them as you're just learning about Python.

66
00:05:06,610 --> 00:05:09,070
So we'll show one last more complex example.

67
00:05:10,140 --> 00:05:25,480
Will say my list x if x mod 2 is equal to zero else not even string for x in range 0 to 10.

68
00:05:25,720 --> 00:05:31,120
And this sort of syntax is a bit strange at first to learn because you just learned that if you only

69
00:05:31,120 --> 00:05:37,370
have a single if statement the if statement comes after this element for element in iterable statement.

70
00:05:37,390 --> 00:05:44,530
However if you're using an if else statement that actually needs to come first before you say for iterable

71
00:05:44,620 --> 00:05:46,810
in or four elements in iterable.

72
00:05:46,900 --> 00:05:52,810
So that's what's a little bit weird about starting to learn how to do more complex tasks in list comprehension

73
00:05:52,810 --> 00:05:53,510
format.

74
00:05:53,860 --> 00:05:58,120
And just to really make it clear if you're having trouble figuring out how to do something in a list

75
00:05:58,120 --> 00:06:03,220
comprehension just go ahead and use the for loop we use at the beginning because that will always work

76
00:06:03,250 --> 00:06:06,380
and it's always going to be a lot more readable.

77
00:06:06,400 --> 00:06:14,310
So for check out my list now I have evens and then string's not even where mod to the not equal zero.

78
00:06:14,320 --> 00:06:16,580
All right that's it for list comprehensions.

79
00:06:16,660 --> 00:06:20,560
You'll find these are used often for little quick jobs and other people's code.

80
00:06:20,680 --> 00:06:25,360
So it's important that you learn how to read them but don't worry too much right now about having to

81
00:06:25,360 --> 00:06:26,630
always write them.

82
00:06:26,710 --> 00:06:27,880
Excellent work so far.

83
00:06:27,910 --> 00:06:29,000
I'll see you at the next lesson.

