WEBVTT
1

00:00:00.640 --> 00:00:05.200

Bem-vindo de volta a esta discusso sobre instrues aninhadas e escopo.



2

00:00:05.270 --> 00:00:11.090

Agora que voc entende as funes,  hora de discutir o escopo ao definir os parmetros fora e dentro



3

00:00:11.090 --> 00:00:11.780

das funes.



4

00:00:11.780 --> 00:00:18.040

O Python usa o escopo para entender a qual varivel est sendo referenciada dentro da funo.



5

00:00:18.050 --> 00:00:20.050

Isso  melhor explicado pelo exemplo.



6

00:00:20.060 --> 00:00:23.250

Ento, vamos abrir um caderno Jupiter e ver do que estamos falando.



7

00:00:27.930 --> 00:00:30.180

Vamos comear com um simples experimento mental.



8

00:00:30.180 --> 00:00:36.420

Imagine que eu defino a varivel xe ser uma tenso chamada de fora.



9

00:00:36.570 --> 00:00:40.340

Ento eu vou criar uma funo chamada reports.



10

00:00:40.510 --> 00:00:46.550

Vai ser apenas uma funo que no usa parmetros e que dentro dessa



11

00:00:46.550 --> 00:00:54.130

funo eu vou definir uma varivel chamada X chamada inside e ento vou retornar o objeto x.



12

00:00:54.300 --> 00:00:58.020

Agora, o que voc espera que o resultado seja quando eu ligar para o relatrio.



13

00:00:58.020 --> 00:01:01.570

Deve ser a corda fora ou deve ser a corda dentro.



14

00:01:01.950 --> 00:01:05.250

Bem, se voc executar isso, voc volta para dentro e intuitivamente.



15

00:01:05.250 --> 00:01:11.020

Espero que isso faa sentido, j que podemos ver que X foi reatribudo dentro da funo de relatrio.



16

00:01:11.020 --> 00:01:15.300

No entanto, o que voc acha que acontecer quando eu chamar print x.



17

00:01:15.300 --> 00:01:17.970

Isso ser fora ou dentro.



18

00:01:18.540 --> 00:01:21.240

E se voc adivinhou isso  onde voc est errado.



19

00:01:21.240 --> 00:01:25.770

Na verdade, essa reatribuio s est acontecendo para essa funo.



20

00:01:25.770 --> 00:01:28.170

No est acontecendo fora da funo.



21

00:01:28.170 --> 00:01:33.870

A razo pela qual no vemos esse efeito ocorre por causa de algo chamado escopo e a ideia de



22

00:01:33.870 --> 00:01:39.150

escopo em seu cdigo  muito importante de entender para designar adequadamente e chamar nomes de variveis



23

00:01:39.600 --> 00:01:40.500

em termos simples.



24

00:01:40.500 --> 00:01:43.980

A ideia de escopo pode ser descrita por trs regras gerais.



25

00:01:43.980 --> 00:01:50.400

A primeira  que as atribuies de nomes criaro ou alteraro nomes locais por padro e referncias de nome.



26

00:01:50.400 --> 00:02:03.420

Pesquise no mximo por escopos e os quatro escopos so escopo local abrangendo escopo global do escopo e, em seguida,



27

00:02:03.600 --> 00:02:05.310

construdo no escopo.



28

00:02:05.310 --> 00:02:08.300

Ento isso tambm  conhecido como L e. g. Regra B



29

00:02:08.320 --> 00:02:13.450

Ento, L para o local E para incluir G para global e B para interno.



30

00:02:13.470 --> 00:02:18.880

Ento, vamos analisar cada nvel desses escopos para entender o que queremos dizer com eles.



31

00:02:18.930 --> 00:02:22.410

Primeiramente, comearemos com um exemplo de escopo local.



32

00:02:22.410 --> 00:02:27.900

Ento, vamos imaginar que eu crie essa funo denuncie novamente e faa essa atribuio.



33

00:02:27.900 --> 00:02:32.700

Isso  conhecido como escopo local porque  local para essa funo real.



34

00:02:32.700 --> 00:02:38.210

Ento, se eu disser que imprime X e eu chamo de relatrio, eu volto a ser local.



35

00:02:38.220 --> 00:02:45.210

Agora vamos dar uma olhada em um exemplo de incluso e lembrana que ocorre quando uma funo  includa



36

00:02:45.210 --> 00:02:46.470

dentro de outra funo.



37

00:02:46.680 --> 00:02:48.450

E essas so chamadas de funes aninhadas.



38

00:02:48.450 --> 00:02:54.570

Voc no vai us-los muito quando comear a programar, mas  possvel,



39

00:02:54.790 --> 00:03:01.670

ento criar uma varivel chamada X e dir que isso  um nvel global.



40

00:03:01.890 --> 00:03:15.560

Ento vamos criar uma funo chamada delimitadora e vai dizer que x  igual ao nvel de fechamento e dentro desta funo inclinada



41

00:03:15.560 --> 00:03:19.290

eu vou colocar em outra funo.



42

00:03:19.730 --> 00:03:23.070

E como eu mencionei quando voc est comeando a aprender sobre o Python, voc no estar



43

00:03:23.090 --> 00:03:24.740

fazendo funes dentro das funes com muita freqncia.



44

00:03:24.740 --> 00:03:29.800

Isso  apenas para mostrar seu escopo ou o conceito de escopo.



45

00:03:29.920 --> 00:03:37.050

Ento eu vou criar uma funo chamada dentro e depois dentro desta funo vou



46

00:03:37.200 --> 00:03:45.470

dizer print x e ento confira meu recuo aqui vou chamar a funo dentro dentro de delimitar.



47

00:03:45.480 --> 00:03:49.710

Ento agora vamos ver o que acontece quando eu clico para fechar e antes de executarmos isso vamos imaginar



48

00:03:49.710 --> 00:03:50.820

o que vai acontecer aqui.



49

00:03:50.820 --> 00:03:53.650

Eu comeo com X sendo reatribudo em nvel global.



50

00:03:53.670 --> 00:03:54.940

Este  o nvel global.



51

00:03:55.200 --> 00:03:56.750

Ento eu tenho a funo de inclinao.



52

00:03:56.800 --> 00:03:58.960

Eu atribuo novamente X para estar nivelado.



53

00:03:59.070 --> 00:04:06.360

Ento eu defino essa funo dentro da funo de inclinao e podemos ver a indentao dos basfilos.



54

00:04:06.530 --> 00:04:09.710

E ento eu chamo dentro da funo de inclinao.



55

00:04:09.710 --> 00:04:13.400

Ento, quando eu corro isso, volto nivelando.



56

00:04:13.430 --> 00:04:18.110

Portanto, este  o prximo nvel depois de uma inclinao local.



57

00:04:18.110 --> 00:04:24.650

Ento voc pode imaginar que o Python quando voc finalmente chama um nome de varivel todo o caminho dentro do X



58

00:04:24.710 --> 00:04:30.470

ele primeiro parece localmente, diz que  essa varivel x definida em algum lugar localmente dentro desta funo.



59

00:04:30.560 --> 00:04:33.220

Se no encontrar, subir um nvel.



60

00:04:33.270 --> 00:04:36.010

No fechamento  essa varivel x.



61

00:04:36.020 --> 00:04:38.780

O encontrar em algum lugar dentro desta funo envolvente.



62

00:04:38.780 --> 00:04:41.150

E de fato est incluso nvel.



63

00:04:41.150 --> 00:04:44.060

Ento  isso que escolhe como o valor de x.



64

00:04:44.060 --> 00:04:47.120

Agora vamos em frente e descobrir o nvel global.



65

00:04:47.270 --> 00:04:55.110

Ento, eu vou deletar essa linha que define xe inclising level e ento o prximo nvel at descobrir que X



66

00:04:55.110 --> 00:04:56.720

 o nvel global.



67

00:04:56.720 --> 00:05:02.120

Ento, se eu reexecutar a clula para ler a multa essas duas funes e, em seguida, eu corro incluso eu volto.



68

00:05:02.120 --> 00:05:04.130

Este  o nvel global.



69

00:05:04.130 --> 00:05:08.670

Ento, novamente, estamos passando pelos nveis aqui locais, incluindo globais e incorporados.



70

00:05:08.750 --> 00:05:13.570

Ento ns verificamos o primeiro local em Python diz Bem onde est a varivel x definida.



71

00:05:13.700 --> 00:05:15.770

Parece localmente no pode encontr-lo.



72

00:05:15.950 --> 00:05:18.440

Ento, ele parece dentro de uma funo de fechamento.



73

00:05:18.560 --> 00:05:24.280

Se houver um, h sempre uma funo de fechamento e diz que o X no est definido aqui.



74

00:05:24.320 --> 00:05:31.210

E, em seguida, ele aparece no namespace global e o namespace global  basicamente definido como sem recuo.



75

00:05:31.220 --> 00:05:35.110

Portanto, no  recuado em qualquer tipo de funo, vai todo o caminho para a esquerda.



76

00:05:35.120 --> 00:05:39.390

E aqui descobrimos que o X  globalmente definido.



77

00:05:39.530 --> 00:05:43.210

Ento  isso que escolhemos como este valor global.



78

00:05:43.220 --> 00:05:47.750

Agora, h construdo em construdo em um nvel de global.



79

00:05:47.930 --> 00:05:55.160

Portanto, se ainda no conseguir encontr-lo em uma atribuio global, ele pressupe que seja uma funo ou palavra-chave



80

00:05:55.160 --> 00:05:55.740

incorporada.



81

00:05:55.760 --> 00:06:01.430

E estas so palavras-chave como a Eliane para o comprimento de alguns ou lista.



82

00:06:01.430 --> 00:06:06.950

E  por isso que  to importante que eles no reatribuam esses termos bsicos que criaram funcionalidades



83

00:06:07.250 --> 00:06:11.420

em nossa parte do Python, porque voc comea a bagunar o escopo do Python.



84

00:06:11.810 --> 00:06:20.750

Ento, isso significa que, se no for possvel encontrar o X em nvel local, incluindo nvel ou nvel global,



85

00:06:20.750 --> 00:06:27.620

o Python tentar ver se  um parmetro interno predefinido em seu cdigo em Python.



86

00:06:27.620 --> 00:06:31.960

Mas se no for, finalmente, vamos imaginar que dizemos que temos y.



87

00:06:32.360 --> 00:06:39.150

Se executarmos isso e, em seguida, chamar unclosing, vai dizer nome nome do erro y no est definido.



88

00:06:39.230 --> 00:06:44.630

Ento, isso significa que ele olhou para todos os seus nveis e olhou para o escopo local, abrangendo o escopo, ele olhou



89

00:06:44.630 --> 00:06:49.880

para as palavras-chave globais e, finalmente, verificou tudo o que  construdo em Python e ainda no consegue encontrar o porqu.



90

00:06:49.910 --> 00:06:51.600

Ento voc acaba recebendo esse erro de nome.



91

00:06:51.620 --> 00:06:53.260

Por que no est definido.



92

00:06:53.450 --> 00:06:59.210

Ento, agora que vimos os nveis, eu rapidamente quero mostrar mais um exemplo de global versus local, porque esses



93

00:06:59.210 --> 00:07:03.920

so realmente os principais que voc ter que lidar com a compreenso do escopo global



94

00:07:03.980 --> 00:07:05.160

versus o escopo local.



95

00:07:05.180 --> 00:07:13.350

Ento eu vou criar o X aqui e dizer que isso  global l fora ento eu vou criar



96

00:07:14.350 --> 00:07:27.600

uma funo simples e a funo pega um X e ele vai imprimir o X  e ento ns vamos formatar o X ento observe o que acontece se eu



97

00:07:27.610 --> 00:07:35.320

chamo meu phunk eu passen X ele diz que X  globalmente externo porque X j foi definido



98

00:07:35.320 --> 00:07:36.390

aqui globalmente.



99

00:07:36.770 --> 00:07:48.470

No entanto, se mais tarde INSIDE esta funo eu digo redefinido dentro do meu phunk e ento tento imprimir as sadas X novamente e eu executo meu



100

00:07:48.590 --> 00:07:56.780

phunk ele dir X  global l fora mas no momento X vem aqui Python est fazendo essa busca



101

00:07:56.780 --> 00:08:02.480

novamente se primeiro procura o namespace local e pode encontrar aqui que X



102

00:08:02.480 --> 00:08:03.320

foi definido localmente.



103

00:08:03.350 --> 00:08:09.320

Por isso, ele escolhe que ele faa isso antes de procurar uma funo de incluso ou antes



104

00:08:09.320 --> 00:08:11.440

de procurar por uma atribuio global.



105

00:08:11.660 --> 00:08:16.020

Ento, esse  realmente o local do EJB global e integrado.



106

00:08:16.280 --> 00:08:19.690

 apenas a ordem em que o Python pesquisa nomes de variveis.



107

00:08:19.700 --> 00:08:23.540

Isso permite que o Python pesquise efetivamente o namespace.



108

00:08:23.540 --> 00:08:28.790

Agora pode haver uma ocasio em que, por qualquer razo, voc queira especificamente sobrescrever



109

00:08:28.790 --> 00:08:35.480

a varivel global dentro de uma funo para fazer isso, voc pode realmente usar a palavra-chave global para



110

00:08:35.720 --> 00:08:39.760

a varivel para indicar que deseja citar grab a varivel global.



111

00:08:39.770 --> 00:08:42.020

Tenha em mente que isso geralmente no  recomendado.



112

00:08:42.040 --> 00:08:47.210

Um deve tentar o seu melhor para evitar isso at que voc se torne mais experiente com



113

00:08:47.210 --> 00:08:52.790

o Python, pois torna-se realmente fcil criar erros dessa maneira sobrescrevendo variveis em uma parte do seu script que



114

00:08:52.910 --> 00:08:55.400

afeta o script em uma parte completamente diferente.



115

00:08:55.520 --> 00:08:59.690

Ento vamos mostrar como voc pode usar a palavra-chave global, mas se voc  apenas um



116

00:08:59.780 --> 00:09:01.690

iniciante em Python, voc deve evitar us-la.



117

00:09:02.150 --> 00:09:05.120

Ento, aqui eu vejo  global fora.



118

00:09:05.120 --> 00:09:07.910

Eu imprimo X  blah blah.



119

00:09:07.910 --> 00:09:10.560

Eu leio o x fino e depois imprimo x.



120

00:09:10.580 --> 00:09:12.090

Ento, se eu executar a clula novamente.



121

00:09:12.320 --> 00:09:14.230

Repare que recebo o exterior global do X.



122

00:09:14.240 --> 00:09:20.570

Leia o find no meu func e se eu fosse digitar x novamente espero que agora



123

00:09:20.570 --> 00:09:26.560

voc tenha percebido que ser globalmente externo porque essa reatribuio est apenas no escopo desta funo.



124

00:09:26.780 --> 00:09:33.590

Na verdade, ele no tem escopo para nveis globais, portanto, essa reatribuio ocorre apenas dentro



125

00:09:33.710 --> 00:09:35.110

do escopo localmente.



126

00:09:35.180 --> 00:09:35.960

Ento, o que isso significa.



127

00:09:35.960 --> 00:09:42.470

Vamos imaginar que eu queira realmente afetar a varivel global e sobrescrev-la dentro da minha funo.



128

00:09:43.070 --> 00:09:48.990

Portanto, a maneira como voc pode usar a palavra-chave global  antes de usar a varivel dentro de uma funo.



129

00:09:49.010 --> 00:09:54.500

Voc vai dizer global e que o nome da varivel e que ir dizer



130

00:09:54.500 --> 00:10:01.520

Python v em frente e chegar a encontrar essa varivel no namespace global e quaisquer alteraes que voc



131

00:10:01.520 --> 00:10:03.630

fizer localmente afetar essa varivel global.



132

00:10:03.650 --> 00:10:09.080

No entanto, quando voc est usando a palavra-chave global, voc tambm no pode ter um nome de parmetro dentro



133

00:10:09.080 --> 00:10:09.890

de sua funo.



134

00:10:09.890 --> 00:10:14.350

De fato, se voc tentar executar este cdigo, o Python ir avis-lo sobre esse erro.



135

00:10:14.480 --> 00:10:17.040

Ento ns rodamos isso e ele diz erro de sintaxe.



136

00:10:17.210 --> 00:10:21.940

O nome x  parmetro e global e isso no faz sentido em Python.



137

00:10:22.100 --> 00:10:27.500

No pode ter ambas as formas de lidar com uma varivel global x, mas tambm ter algum tipo de



138

00:10:27.500 --> 00:10:29.370

parmetro sendo passado no mesmo nome.



139

00:10:29.380 --> 00:10:33.380

Voc vai ficar confuso tentando descobrir qual desses dois para usar.



140

00:10:33.380 --> 00:10:36.850

Ento, vamos em frente e remov-lo aqui do parmetro em nossa funo.



141

00:10:36.850 --> 00:10:39.930

S quero definir o parmetro em vez disso, o que vai fazer.



142

00:10:40.070 --> 00:10:45.140

Estende a mo para o espao de nomes global para descobrir que o global fora o imprime.



143

00:10:45.140 --> 00:10:46.400

 re-atribu-lo.



144

00:10:46.400 --> 00:10:50.820

Lembro-me de reatribuir agora o x global e depois imprimi-lo novamente.



145

00:10:50.900 --> 00:10:52.470

Ento vamos rodar isso.



146

00:10:52.550 --> 00:10:54.560

E agora o Python no tem problemas.



147

00:10:54.560 --> 00:11:00.020

E quando eu ligo para o meu aviso de no passar mais nada, eu volto.



148

00:11:00.040 --> 00:11:01.660

X  global fora.



149

00:11:01.670 --> 00:11:10.750

Leia a parte interna da minha funo e, agora, diferentemente da ltima vez em que digo que as impresses x x em nvel



150

00:11:10.760 --> 00:11:17.270

global foram redefinidas como sendo essa string, a nica maneira de acontecer  se voc chamar



151

00:11:17.510 --> 00:11:20.480

especificamente a palavra-chave global na frente dessa varivel.



152

00:11:20.720 --> 00:11:25.880

E como mencionamos anteriormente, isso no  recomendado para iniciantes e, em geral,  apenas uma prtica de programao



153

00:11:25.880 --> 00:11:29.660

ruim, a menos que voc tenha um caso de uso muito especfico para isso.



154

00:11:29.720 --> 00:11:32.650

E voc sabe muito bem porque est usando globalmente.



155

00:11:32.660 --> 00:11:38.390

E, novamente, a razo para isso  que  realmente fcil induzir bugs em algum outro lugar em seu cdigo, porque



156

00:11:38.390 --> 00:11:43.870

voc pode ter outra funo em algum lugar em seu script que est fazendo um grab para alguma varivel global.



157

00:11:43.910 --> 00:11:46.360

Assumindo que no est sendo jogado por a.



158

00:11:46.370 --> 00:11:48.410

Ou reatribudo em alguma outra funo.



159

00:11:48.560 --> 00:11:54.530

Talvez centenas de linhas caiam, ento  por isso que voc geralmente evita essa palavra-chave global.



160

00:11:54.620 --> 00:11:56.770

Ns mostramos a voc agora, ento voc est ciente disso.



161

00:11:56.810 --> 00:11:58.270

Caso voc precise us-lo.



162

00:11:58.490 --> 00:12:00.440

Mas, em geral, tente evit-lo.



163

00:12:00.500 --> 00:12:07.280

Em vez disso, use parmetros que so passados e se voc precisa afetar a varivel



164

00:12:07.280 --> 00:12:13.580

global em vez de imprimi-lo, voc deve retornar X e retornar o x local.



165

00:12:13.610 --> 00:12:15.400

Ento vamos ver o que acontece l.



166

00:12:15.530 --> 00:12:20.860

Ento, ns vamos dizer que o X  global fora do meu Pokmon vai passar um X aqui.



167

00:12:20.930 --> 00:12:22.410

Vai imprimir o formato x.



168

00:12:22.460 --> 00:12:25.420

Vai redefini-lo e depois vai devolv-lo.



169

00:12:25.580 --> 00:12:28.580

E  realmente por isso que queremos fazer em vez de usar essa palavra-chave global.



170

00:12:28.610 --> 00:12:36.420

Ento, quando voc executa isso e passa um X e, em seguida, obtm um resultado, ele avana e diz que



171

00:12:36.510 --> 00:12:42.520

o X  global, mas o seu resultado agora est redefinido dentro da minha funo.



172

00:12:42.750 --> 00:12:47.940

E esta  uma boa maneira de ter as duas coisas, porque se voc chamar X ele



173

00:12:47.940 --> 00:12:53.750

ainda  global, mas voc foi capaz de adaptar as alteraes desejadas e retorn-las e salv-las como uma outra varivel.



174

00:12:53.770 --> 00:12:57.330

Tudo bem,  isso para instrues aninhadas no escopo.



175

00:12:57.330 --> 00:13:02.810

Espero que isso esteja claro para voc sobre como lidar com o namespace no Python.



176

00:13:02.860 --> 00:13:03.820

Nos vemos na prxima aula.



177

00:13:03.820 --> 00:13:04.150

Recrutar.



