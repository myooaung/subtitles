WEBVTT
1

00:00:00.300 --> 00:00:07.130

Welcome back recruit It's time to quickly cover another fundamental data structure the set sets are



2

00:00:07.200 --> 00:00:09.840

unordered collections of unique elements.



3

00:00:10.160 --> 00:00:13.000

We can construct them by using the set function.



4

00:00:13.220 --> 00:00:19.360

Let's explore some examples in a Jupiter notebook.



5

00:00:19.370 --> 00:00:21.600

Let's begin by constructing a set.



6

00:00:21.650 --> 00:00:24.860

We'll do that using this builtin step function.



7

00:00:24.860 --> 00:00:30.850

Notice how there is syntax highlighting there letting you know that the set as easy as a built in functions



8

00:00:30.860 --> 00:00:33.360

you don't want to accidentally overwrite that.



9

00:00:33.410 --> 00:00:36.480

So you've constructed a set and assigned the variable x.



10

00:00:36.500 --> 00:00:43.580

If you want to add items to the set we can say add 1 and then if I take a look at what my set looks



11

00:00:43.580 --> 00:00:44.330

like.



12

00:00:44.330 --> 00:00:46.980

Notice it uses the same curly braces as a dictionary.



13

00:00:47.000 --> 00:00:50.910

But it doesn't have colons there so it doesn't really have a key value pairs.



14

00:00:50.930 --> 00:00:53.930

It's just an unordered collection of unique elements.



15

00:00:53.930 --> 00:01:00.390

And that's basically the keyword unique elements meaning every element there has to be unique.



16

00:01:00.400 --> 00:01:06.500

So if I try to add in another element such as too no problem I see one and two.



17

00:01:06.760 --> 00:01:12.960

However let's say I try to add one again and take a look at x.



18

00:01:13.060 --> 00:01:19.990

It's still only has a singular one there and that's because we only accept unique elements inside of



19

00:01:19.990 --> 00:01:20.710

a set.



20

00:01:20.770 --> 00:01:25.720

So it doesn't matter how many times I try to add in a one if it's already in there we only have unique



21

00:01:25.720 --> 00:01:30.600

elements meaning we just have 1 1 or 1 2.



22

00:01:30.610 --> 00:01:32.070

This is useful sometimes.



23

00:01:32.080 --> 00:01:39.970

In case you have a list so I'll say my list with many repeated elements so have 1 on 1 and 1 and then



24

00:01:40.510 --> 00:01:43.260

2 2 2 2 2 3 3 3.



25

00:01:43.630 --> 00:01:48.540

And imagine that we only wanted to grab the unique elements out of this list.



26

00:01:48.730 --> 00:01:52.480

I could transform it to a set again using that step function.



27

00:01:52.750 --> 00:01:58.930

I would pass on my list here and I would get back the sets of the unique elements in this case 1 2 and



28

00:01:58.930 --> 00:01:59.810

3.



29

00:02:00.190 --> 00:02:05.410

And then as a last final note for sets I know we showed you how you can quickly create one using this



30

00:02:05.490 --> 00:02:09.130

set function with just an empty thing and then keep adding onto it.



31

00:02:09.130 --> 00:02:16.510

The other thing you can do is just use the actual curly braces themselves so we can say My set is equal



32

00:02:16.510 --> 00:02:22.030

to curly braces and then one two three if we check the type of my set.



33

00:02:22.390 --> 00:02:23.450

It's just a set.



34

00:02:23.560 --> 00:02:27.390

Again the key words to remember is that it's an an ordered collection.



35

00:02:27.400 --> 00:02:32.710

So it's an order that means you can't index things off of a set and it's also only containing unique



36

00:02:32.800 --> 00:02:33.770

elements.



37

00:02:33.850 --> 00:02:35.170

That's the basis of sets.



38

00:02:35.260 --> 00:02:36.500

We'll see at the next lesson.



