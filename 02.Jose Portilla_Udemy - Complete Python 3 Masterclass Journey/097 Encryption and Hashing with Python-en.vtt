WEBVTT
1

00:00:01.140 --> 00:00:02.280

Welcome back agent.



2

00:00:02.280 --> 00:00:07.140

Let's now discuss how to actually perform encryption and hashing with Python.



3

00:00:07.150 --> 00:00:11.940

Remember in order to do the encryption you'll need to install the cryptography library with Pipp install



4

00:00:11.940 --> 00:00:13.380

cryptography.



5

00:00:13.380 --> 00:00:14.950

Let's open up a Jupiter notebook.



6

00:00:20.440 --> 00:00:24.320

The first step to all of this is to import hash lib.



7

00:00:24.370 --> 00:00:26.350

So we'll start off with just hashing.



8

00:00:26.590 --> 00:00:32.710

And as we previously mentioned there are a large variety of hashing algorithms available socially cryptographic



9

00:00:32.710 --> 00:00:36.660

hashing because it's a large research area of study.



10

00:00:37.150 --> 00:00:41.650

And if you want to see all the algorithms available in the hashed lib library there's a built in library



11

00:00:41.650 --> 00:00:42.590

in Python.



12

00:00:42.910 --> 00:00:49.300

You can use algorithms underscore available and it's an attribute off of this where it just lists off



13

00:00:49.300 --> 00:00:51.130

all the libraries that are available.



14

00:00:51.130 --> 00:00:56.530

Keep in mind some of these are not recommended to be used such as like M.D 4 and the 5 and other ones



15

00:00:56.530 --> 00:00:57.940

are kind of more cutting edge.



16

00:00:57.940 --> 00:01:03.820

Maybe some of the Blake or SHC three algorithms those are a little more modern than some of the other



17

00:01:03.820 --> 00:01:06.360

algorithms you'll see in this list.



18

00:01:06.370 --> 00:01:11.230

Here you have a lot of options to choose from and you can even download more options if you want from



19

00:01:11.230 --> 00:01:12.060

the internet.



20

00:01:12.490 --> 00:01:16.820

For our case we're going to use SHK three 256 bit.



21

00:01:16.870 --> 00:01:22.570

So the second number stands for the bits that you are using where we we're going to do is first off



22

00:01:22.600 --> 00:01:24.320

create a hash object.



23

00:01:24.340 --> 00:01:27.890

Let's zoom in just a little bit so we can get an idea of what we're doing here.



24

00:01:27.910 --> 00:01:34.680

We'll create a hash object and you do that by calling hash lid and then one of the methods said here



25

00:01:34.690 --> 00:01:36.950

so we'll choose h a.



26

00:01:37.250 --> 00:01:46.150

Secure hash algorithm version 3 256 bit and this was created in an open competition from the NSA.



27

00:01:46.190 --> 00:01:53.410

Once you've created your hash object what you do is you update it if you want to hash a string we will



28

00:01:53.410 --> 00:01:59.810

call a hash object and update it with the byte string of whatever we want to hash.



29

00:01:59.830 --> 00:02:04.630

For example if you want hash Hello we have to pass in a byte string indicating there's a B at the beginning



30

00:02:04.630 --> 00:02:05.730

of this.



31

00:02:05.980 --> 00:02:14.080

And if you actually want what the DI just looks like the next I just can be obtained by calling hex



32

00:02:14.080 --> 00:02:17.250

digest method off your object.



33

00:02:17.830 --> 00:02:21.370

And now this is the hash version of this string.



34

00:02:21.400 --> 00:02:22.920

Hello.



35

00:02:22.930 --> 00:02:29.170

Now I want to show you just how different even a minor change in the string will cause the hash to be



36

00:02:30.040 --> 00:02:32.130

if we just lowercase h here.



37

00:02:32.260 --> 00:02:34.390

That's a very minor change in the string.



38

00:02:34.390 --> 00:02:39.970

But if we rerun these lines I'm going to run this again and instead of running this cell again let's



39

00:02:39.970 --> 00:02:41.240

copy and paste this here.



40

00:02:41.260 --> 00:02:45.130

We can compare the previous hash to the new hash.



41

00:02:45.320 --> 00:02:52.160

You can see here that there's a lot that is actually an entirely different hash from just lower casing



42

00:02:52.220 --> 00:02:52.900

the H.



43

00:02:53.000 --> 00:02:59.280

And there's no way that you'd be able to go from this hash to the string.



44

00:02:59.540 --> 00:03:03.590

A common question that arises here is what is the real purpose of a one way hash function.



45

00:03:03.590 --> 00:03:08.230

Where would I see this in everyday life and a really good example is when you're logging into a Web



46

00:03:08.230 --> 00:03:15.380

site that requires a password or an email your password needs to be secure and it would be a pretty



47

00:03:15.390 --> 00:03:21.330

insecure method if Google or Facebook just stored your password as plain text.



48

00:03:21.650 --> 00:03:28.120

We can imagine that if you were to pass in your password as a byte string here.



49

00:03:28.190 --> 00:03:31.030

So maybe your password is password 1 2 3.



50

00:03:31.040 --> 00:03:32.330

Not a very good password.



51

00:03:32.480 --> 00:03:38.810

And you ran this what you would not want Facebook or Google to do is to save your password as password



52

00:03:38.810 --> 00:03:39.700

1 2 3.



53

00:03:39.860 --> 00:03:44.180

Because that means if their servers were ever compromised and someone who was actually able to view



54

00:03:44.180 --> 00:03:49.880

their information they would be able to read your password with just plain text.



55

00:03:49.970 --> 00:03:57.590

Instead what Google Facebook and pretty much every other major company does is they will save only the



56

00:03:57.590 --> 00:03:59.840

hash version of your password.



57

00:04:00.020 --> 00:04:06.260

So on file they'll have this hash but they will actually have your real password and what they do then



58

00:04:06.350 --> 00:04:08.040

is when you enter your password.



59

00:04:08.270 --> 00:04:13.730

They run it through the hash function and then check that the hash function of your password matches



60

00:04:13.730 --> 00:04:16.210

the hash function of what they have on file.



61

00:04:16.220 --> 00:04:21.740

That way they can still confirm that you are the correct user of the correct password without having



62

00:04:21.740 --> 00:04:24.620

to save your actual password on file.



63

00:04:24.620 --> 00:04:29.450

And then there's other even more advanced methods which are also actually quite common now things like



64

00:04:29.900 --> 00:04:35.240

adding salt and pepper to a password which essentially is in the case they are adding an extra piece



65

00:04:35.240 --> 00:04:42.830

of string after this so maybe out Google or Facebook they add in some little bit of salt which is essentially



66

00:04:42.830 --> 00:04:47.600

just a little more extra string to your password and they'll store that extra string somewhere else



67

00:04:47.600 --> 00:04:48.650

on their servers.



68

00:04:48.650 --> 00:04:53.000

So then your password is even more secure because they've salted it with more information.



69

00:04:53.000 --> 00:04:58.700

So even if someone actually is able to read for some reason your original password or the hex of it



70

00:04:58.880 --> 00:05:01.580

they'll still won't be able to guess with the additional salt.



71

00:05:01.580 --> 00:05:08.180

So that's just another method of encrypting passwords or I should say hashing passwords online.



72

00:05:08.180 --> 00:05:10.940

So that's why you would use a one way hash.



73

00:05:11.300 --> 00:05:14.870

And now let's see how we can perform encryption.



74

00:05:14.870 --> 00:05:20.120

Again this is just the one way we can't really go backwards from this to the actual string but with



75

00:05:20.120 --> 00:05:25.250

an encryption and decryption we will be able to go back and forth as long as we have the correct key



76

00:05:26.120 --> 00:05:28.460

in order to perform encryption and decryption.



77

00:05:28.460 --> 00:05:35.640

Make sure you've installed the cryptography library once you have you'll be able to run from cryptography.



78

00:05:35.690 --> 00:05:42.840

Let's make sure we spell this right from critique cryptography thought Fernet imports Fernet with a



79

00:05:42.840 --> 00:05:48.660

capital F and then the first step is to actually generate a key.



80

00:05:48.660 --> 00:05:53.640

Later on we'll show you how to create your own keys but it's a lot more secure if you allow the cryptography



81

00:05:53.640 --> 00:05:56.510

library to generate a key so to do that.



82

00:05:57.650 --> 00:06:06.440

You'll call the Gennari key method off of this and then you will have some hashed byte string here.



83

00:06:06.570 --> 00:06:07.970

And now that is your key.



84

00:06:08.040 --> 00:06:11.080

Is it cryptographic Lee executed key.



85

00:06:11.280 --> 00:06:16.420

And later on we'll see how to make her own based off of some seed string.



86

00:06:16.510 --> 00:06:24.210

Once you have the key Well you can do is create a cipher will create a cipher and we pass that key into



87

00:06:24.210 --> 00:06:29.530

this Fernet and we create the cipher object and now it's actually quite simple you just take whatever



88

00:06:29.530 --> 00:06:37.030

text you want and offer your cipher object you call encrypt and you passen the byte string of your text



89

00:06:37.030 --> 00:06:43.980

that says hello are you there and it will return back the encrypted version.



90

00:06:43.990 --> 00:06:50.830

So this is what you can publicly send around and hopefully no one will be able to actually infer what



91

00:06:51.100 --> 00:06:54.430

is the actual message behind this encrypted version of it.



92

00:06:54.580 --> 00:06:59.130

Then if you're on the other end what you do is you create your own cipher.



93

00:06:59.710 --> 00:07:04.520

So let's say the person on the other computer they create another cipher.



94

00:07:04.630 --> 00:07:07.480

What they will need to know is this secret key.



95

00:07:08.590 --> 00:07:10.850

So that's kind of the challenge of encryption and decryption.



96

00:07:10.930 --> 00:07:16.080

You have to somehow get this securely to the other user.



97

00:07:16.220 --> 00:07:18.370

And then we have your other cipher.



98

00:07:18.710 --> 00:07:27.020

And what we can do now is from other cipher we can call decrypt and then pass an encrypted message here



99

00:07:27.020 --> 00:07:28.760

so we'll copy this.



100

00:07:28.820 --> 00:07:34.700

Notice again it's a byte strings storing to be outside of that quote and we pasand this whole thing



101

00:07:34.910 --> 00:07:37.010

and if we decrypt it we get back.



102

00:07:37.010 --> 00:07:38.200

Hello are you there.



103

00:07:39.080 --> 00:07:43.910

All right so we just mention that in general you should try to generate keys from this library to make



104

00:07:43.910 --> 00:07:45.570

sure the cryptographically secure.



105

00:07:45.800 --> 00:07:51.890

But a lot of times it's easier if the recipient on the other end has some sort of basic string to go



106

00:07:51.890 --> 00:07:52.760

off of.



107

00:07:52.760 --> 00:07:55.890

So let's now show you how you can create a custom key.



108

00:07:55.970 --> 00:07:58.760

Again we don't recommend you do this unless you absolutely have to.



109

00:08:00.460 --> 00:08:05.010

We'll create a key word for our custom string.



110

00:08:05.060 --> 00:08:08.740

So let's say the custom string is just one two three.



111

00:08:08.780 --> 00:08:09.830

So that's our key word.



112

00:08:09.830 --> 00:08:11.950

No it's a byte strings and let us be there.



113

00:08:12.290 --> 00:08:14.930

So we have our custom keyword string.



114

00:08:14.930 --> 00:08:16.200

One two three.



115

00:08:16.340 --> 00:08:22.870

We now need to use hashing to actually turn it into a hash of base 64.



116

00:08:22.880 --> 00:08:28.990

Basically this format that the Fernet function is going to be able to use.



117

00:08:29.150 --> 00:08:37.790

So we will say key is equal to we'll call hash lib and we will call the secure hash algorithm version



118

00:08:37.790 --> 00:08:45.860

3 256 bit and we will pass in our keyword sensu that be 1 to 3 and now we have a key.



119

00:08:46.190 --> 00:08:54.480

So we have this hashed object and we can grab the actual digest off of this and we have this Digest.



120

00:08:54.700 --> 00:09:01.180

And this is actually still not in the format that the Fernet object expects to actually get in the format



121

00:09:01.240 --> 00:09:03.840

we need to encode it to base 64 it.



122

00:09:03.910 --> 00:09:07.840

So to do that we will import base 64



123

00:09:11.320 --> 00:09:17.430

and say key bytes is equal to key dot digest.



124

00:09:17.460 --> 00:09:28.030

Essentially what we had up here run that and then say you're finnicky is equal to base 64 and the method



125

00:09:28.030 --> 00:09:33.100

call here is quite a long one so I recommend using tab complete and say you are all safe.



126

00:09:33.110 --> 00:09:35.190

Be 6:04 and code.



127

00:09:35.320 --> 00:09:39.390

So that's E for and Kotze we're going to encode these key bytes.



128

00:09:39.400 --> 00:09:48.190

What we got here and once you code it the key should be in the format that we expect something that



129

00:09:48.190 --> 00:09:49.170

looks like this.



130

00:09:49.210 --> 00:09:56.680

And that's how you can start off with a keyword that is easy to share and then some sort of agreed upon



131

00:09:56.830 --> 00:10:02.520

hashing algorithm and eventually you can get back out a key that will work with the cryptography library.



132

00:10:02.530 --> 00:10:05.340

This is not as secure of a method but it still works.



133

00:10:06.160 --> 00:10:09.970

So once you have this key what you do is you can create your own custom cipher



134

00:10:12.950 --> 00:10:16.350

and then pass that key when you're creating it.



135

00:10:17.130 --> 00:10:25.440

Let's say for key run that and using that custom cipher you can then encrypt any message you want to



136

00:10:25.450 --> 00:10:26.140

chose.



137

00:10:26.250 --> 00:10:28.270

Well let's make sure it's a byte string.



138

00:10:28.770 --> 00:10:35.550

Hello we get back that encryption and then we can call custom cipher and decrypt it again.



139

00:10:35.550 --> 00:10:40.410

So will copy and paste this and we get back.



140

00:10:40.430 --> 00:10:41.750

Hello.



141

00:10:41.820 --> 00:10:42.600

All right.



142

00:10:42.600 --> 00:10:46.730

Those are really all the basics you need to know about hashing encryption and decryption.



143

00:10:46.740 --> 00:10:49.290

Let's have a very quick overview of what we just covered.



144

00:10:49.590 --> 00:10:55.220

So starting from the top to do basic caching you can just call the python's builtin hash library.



145

00:10:55.420 --> 00:10:57.530

There's lots of algorithms available.



146

00:10:57.720 --> 00:11:03.000

So you can see here not all of them are recommended some of them have been deemed secure but something



147

00:11:03.030 --> 00:11:08.210

go for right now is say three to six but that's still deemed secure.



148

00:11:08.490 --> 00:11:14.610

And you can then update a byte string and get back its hexed digest if you want.



149

00:11:14.640 --> 00:11:16.300

The one way hash.



150

00:11:16.530 --> 00:11:21.840

And again to make it clear if you do even a minor change on that string you'll get back a completely



151

00:11:21.840 --> 00:11:22.580

different hash.



152

00:11:22.590 --> 00:11:28.830

Because it's cryptographically secure if you want to perform encryption you use the cryptography library



153

00:11:29.220 --> 00:11:35.100

and you can either generate keys from the library itself and then use those keys to create ciphers and



154

00:11:35.100 --> 00:11:37.950

off the cipher say encrypt or decrypt.



155

00:11:38.190 --> 00:11:44.330

And as an alternative to using generate key you can essentially create your own key based off some root



156

00:11:44.450 --> 00:11:48.480

keyword and some agreed upon hashing algorithm.



157

00:11:48.480 --> 00:11:53.430

So you decide on the keyword byte string you're going to use and the hash algorithm you'll also use



158

00:11:53.790 --> 00:12:00.870

pass that keyword into that hash algorithm then grab that digest and using the built in base 64 library



159

00:12:01.260 --> 00:12:05.610

encode it into the same format that the cipher will expect.



160

00:12:05.610 --> 00:12:06.860

Which is this right here.



161

00:12:07.080 --> 00:12:13.800

Then passen Internet that key you'll get back your custom cipher and you'll be able to encrypt or decrypt



162

00:12:13.890 --> 00:12:15.480

messages.



163

00:12:15.550 --> 00:12:16.510

That's it.



164

00:12:16.510 --> 00:12:17.900

Best of luck on your next mission.



165

00:12:17.900 --> 00:12:18.190

Agent.



