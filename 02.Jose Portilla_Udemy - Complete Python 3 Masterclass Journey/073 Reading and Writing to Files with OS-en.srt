1
00:00:01,120 --> 00:00:02,190
Welcome back agent.

2
00:00:02,320 --> 00:00:05,060
Let's now discuss opening and reading files.

3
00:00:05,890 --> 00:00:09,850
In your recruitment bootcamp you've actually already learned how to open a single file.

4
00:00:10,130 --> 00:00:15,500
However often you're going to need to open every file and a directory or multiple directories on the

5
00:00:15,500 --> 00:00:16,440
computer.

6
00:00:16,580 --> 00:00:22,790
Python's built 10 O S module for operating systems can apply to walk through files and folders on the

7
00:00:22,790 --> 00:00:30,230
computer as well as open them the os module functions and commands are also independent of Mac OS Linux

8
00:00:30,260 --> 00:00:32,770
Windows or other operating systems.

9
00:00:32,900 --> 00:00:38,180
Meaning that the same script you use to open and go through the rectories files on your computer will

10
00:00:38,180 --> 00:00:39,860
work on any operating system.

11
00:00:39,860 --> 00:00:52,030
As long as you use the os module Let's explore how to use this module by going to an open book.

12
00:00:52,170 --> 00:00:56,370
Let's begin by quickly creating a file we can use to practice with.

13
00:00:56,700 --> 00:01:04,440
We will call this file practice thought Trixi for a simple text file and will say open with the mode

14
00:01:04,500 --> 00:01:05,400
w plus.

15
00:01:05,430 --> 00:01:08,370
That way we can write this file because it doesn't exist yet.

16
00:01:09,310 --> 00:01:12,010
And then we're going to write a single line to this file.

17
00:01:12,040 --> 00:01:19,960
Just test line or test whatever you want and let's close the file.

18
00:01:20,100 --> 00:01:20,550
All right.

19
00:01:20,550 --> 00:01:21,620
Nlisse discuss this.

20
00:01:21,620 --> 00:01:23,080
Built an os module.

21
00:01:23,280 --> 00:01:26,000
The first thing you need to do is actually import it by running.

22
00:01:26,020 --> 00:01:27,870
Import os.

23
00:01:28,020 --> 00:01:31,770
There's many different methods and functions that are available off of the os module.

24
00:01:31,770 --> 00:01:34,200
Let's discuss a few of the more basic ones.

25
00:01:34,200 --> 00:01:38,270
The first one is to actually get your current directory to do that.

26
00:01:38,460 --> 00:01:44,010
You can type os dots and if you hit tab you'll realize all the various functions and attributes that

27
00:01:44,010 --> 00:01:47,600
are here but the one we're going to be using is G.T. gets.

28
00:01:47,700 --> 00:01:53,730
And then C W D stands for get current working rectory.

29
00:01:53,920 --> 00:01:59,850
And if you run this method or this function off of the os module it basically just reports back where

30
00:01:59,850 --> 00:02:02,000
the notebook is currently located.

31
00:02:02,190 --> 00:02:08,040
And if you were to run this in your script it would run and return back the location wherever your script

32
00:02:08,130 --> 00:02:09,340
is currently located.

33
00:02:09,390 --> 00:02:12,400
So again it returns back your current working directory.

34
00:02:12,420 --> 00:02:15,980
What's really nice about this is it returns back the string.

35
00:02:15,990 --> 00:02:22,140
You can then use to maybe pass along with an open statement to know what location and text files are

36
00:02:22,140 --> 00:02:23,510
in.

37
00:02:23,570 --> 00:02:25,650
So that's getting your current working directory.

38
00:02:25,730 --> 00:02:34,420
If you want to list all the files in a directory you can use OS dot and then l i s t d.

39
00:02:34,490 --> 00:02:38,340
R that's for listing everything in your current directory.

40
00:02:38,420 --> 00:02:43,220
Obviously the results will differ the pending on where you're located but here you can see these are

41
00:02:43,280 --> 00:02:49,640
all the files I have located under this current directory and you can actually pasan any directory you

42
00:02:49,640 --> 00:02:50,600
want.

43
00:02:50,600 --> 00:02:59,410
So for example you can pasan your users directory and it will return back everything that's in the user's

44
00:02:59,500 --> 00:03:00,760
directory.

45
00:03:00,760 --> 00:03:03,800
So again this is a basic list directory command.

46
00:03:03,940 --> 00:03:09,640
And if you just run it by itself it prints out everything that's in your current directory.

47
00:03:09,690 --> 00:03:14,090
Again to find a current directory see there'll be the or if you want.

48
00:03:14,120 --> 00:03:19,920
You can pass in any folder or directory location and it lists everything that's in that directory.

49
00:03:20,530 --> 00:03:28,700
In other very helpful builtin module in Python is the s h util model or as utility module.

50
00:03:29,010 --> 00:03:30,320
Let's show you how to use it.

51
00:03:30,330 --> 00:03:39,060
We're going to import S H U T I L and this basically provides a lot of utilities for dealing with files

52
00:03:39,060 --> 00:03:41,610
on your computer and later on we'll see how we can use it.

53
00:03:41,610 --> 00:03:43,940
We're also zipping and unzipping files.

54
00:03:44,130 --> 00:03:49,110
Right now we're going to show you how you can move files around your computer programmatically using

55
00:03:49,170 --> 00:03:53,440
this module to move the file.

56
00:03:53,460 --> 00:03:59,440
You can say move and you can see here basically it just takes two commands as her see.

57
00:03:59,450 --> 00:04:05,480
That is the source of the file and then the s t which is the destination of a file.

58
00:04:05,480 --> 00:04:11,930
Now remember we actually have the practice text file we just created appear so let's confirm that by

59
00:04:11,930 --> 00:04:12,890
running OS.

60
00:04:12,880 --> 00:04:14,840
Thought list.

61
00:04:14,910 --> 00:04:16,260
Diyar.

62
00:04:16,660 --> 00:04:22,480
And if we run that eventually somewhere in this list you should find the text file you just created.

63
00:04:22,480 --> 00:04:24,540
So it looks like I have it right here.

64
00:04:24,580 --> 00:04:32,950
This text file and want to move this practice text file to let's say in other users file silts move

65
00:04:32,950 --> 00:04:35,000
it to this user's file right here.

66
00:04:35,840 --> 00:04:42,320
So we're going to scroll down here and we're going to move the practice t x t file.

67
00:04:43,650 --> 00:04:45,190
Too one of the user's files

68
00:04:49,930 --> 00:04:54,940
and note the actual syntax here if you're on Linux or Mac you're going to want to make sure that your

69
00:04:54,940 --> 00:05:00,550
forward slashes are backslashes follow the same syntax that is reported back to you when you say get

70
00:05:00,560 --> 00:05:01,590
c d.

71
00:05:01,630 --> 00:05:06,730
Maybe you have single forward slashes on a Mac or Linux computers follow that format.

72
00:05:06,730 --> 00:05:14,480
If you're on Windows you'll follow the double backslash OK so this is saying move this practice text

73
00:05:14,490 --> 00:05:17,020
file to this location on your computer.

74
00:05:17,150 --> 00:05:19,760
So when we run this it reports back.

75
00:05:19,760 --> 00:05:21,310
The final location of the file.

76
00:05:21,350 --> 00:05:21,980
So it looks like it.

77
00:05:21,980 --> 00:05:22,720
Move it.

78
00:05:22,730 --> 00:05:28,950
Let's confirm that it move it by listing everything in our the directory again.

79
00:05:28,990 --> 00:05:33,910
And if we look back to P We no longer actually have the practice textfile there.

80
00:05:33,910 --> 00:05:40,430
So let's try moving it back to our current directory so way we can do that is through the following.

81
00:05:40,600 --> 00:05:43,150
Let's comment this out.

82
00:05:43,190 --> 00:05:46,990
We will again call the move function.

83
00:05:47,110 --> 00:05:52,300
We already know the location because it is reported Baxi can copy and paste whatever reports back as

84
00:05:52,300 --> 00:05:53,830
your source.

85
00:05:53,830 --> 00:06:01,590
And if we want to move it to our current directory all we have to do is say oh yes that's gets current

86
00:06:01,620 --> 00:06:08,160
working directory and execute that function because remember this get current work the rectory just

87
00:06:08,160 --> 00:06:10,930
returns back your current working that victory.

88
00:06:10,950 --> 00:06:16,710
So now this will go and grab that practice text file from this user and move it back to the directory

89
00:06:16,710 --> 00:06:25,900
we're currently in and out report's backward is and we can again confirm by listing out make sure syntax

90
00:06:25,900 --> 00:06:32,460
is right there by listing our current directory and we scroll down and we eventually see that yes practice

91
00:06:32,460 --> 00:06:40,590
that text file is back in our current directory now discuss deleting files the O S module provides three

92
00:06:40,590 --> 00:06:45,210
methods for the leading files and we are going to go show them right now.

93
00:06:45,280 --> 00:06:54,330
There is OS dot unlink and it takes in some sort of path parameter so this deletes a file at the pass

94
00:06:54,420 --> 00:06:55,560
you provide.

95
00:06:55,560 --> 00:07:02,010
So for example if I wanted to delete this practice that txt file I would just copy the entire path to

96
00:07:02,010 --> 00:07:05,700
it and then pass it into unlink and it would delete the file.

97
00:07:05,730 --> 00:07:06,890
Your path.

98
00:07:06,900 --> 00:07:12,500
There is also and will run these commands yet because we're going to still talk about them.

99
00:07:12,510 --> 00:07:18,900
There's also our m Diyar which has removed the directory and that also takes a path and instead of a

100
00:07:18,900 --> 00:07:23,660
file path you provide a folder path and the full there must be empty.

101
00:07:23,940 --> 00:07:32,730
In order for this to work so unlink is for files are MDR is for empty directories and then finally the

102
00:07:32,730 --> 00:07:42,540
one we're going to show you here is there's is sh still dot r m tree and you can pass any path to that

103
00:07:42,540 --> 00:07:43,830
one as well.

104
00:07:43,830 --> 00:07:50,310
This one is the most dangerous out of these results because it will remove all files and folders contained

105
00:07:50,340 --> 00:07:51,150
in the path.

106
00:07:51,240 --> 00:07:57,810
So be extremely careful with this command right here because all three of these methods cannot be reversed.

107
00:07:57,840 --> 00:08:03,030
Which means if you made a mistake and you actually provided the wrong path you will not be able to recover

108
00:08:03,090 --> 00:08:04,380
the file.

109
00:08:04,380 --> 00:08:10,350
So unlike normal delete commands on your computer where you can later look in your trash or your recycling

110
00:08:10,350 --> 00:08:18,390
bin and recover the file using these OS level module methods it's going to permanently remove the file

111
00:08:18,390 --> 00:08:22,970
in a way that makes it extremely hard or almost impossible to get back.

112
00:08:23,220 --> 00:08:26,910
So unlink again that's for a single file or MDR.

113
00:08:26,940 --> 00:08:30,180
That's for an empty directory or an empty folder.

114
00:08:30,180 --> 00:08:31,820
Remove tree if you give it a path.

115
00:08:31,830 --> 00:08:33,850
Again extremely dangerous command here.

116
00:08:33,870 --> 00:08:39,840
It will remove all files and folders permanently on your computer because these are so dangerous and

117
00:08:39,840 --> 00:08:42,510
it makes it really hard to recover files afterwards.

118
00:08:43,500 --> 00:08:46,920
What we're going to show you is the send to trash module.

119
00:08:47,270 --> 00:08:51,270
So to install the send to trash module what you need to do is at your command line.

120
00:08:51,360 --> 00:08:59,000
Type out Pitman's stall send to trash so you need to install this library.

121
00:08:59,000 --> 00:09:03,740
Again you do this at your command line not inside the Jupiter notebook and what you can do to run command

122
00:09:03,740 --> 00:09:08,060
lines inside the Juber notebook is try starting with an exclamation point.

123
00:09:08,090 --> 00:09:12,400
So if you run this it should eventually install send to trash.

124
00:09:12,410 --> 00:09:14,530
And in this case I already have it installed.

125
00:09:14,720 --> 00:09:15,770
So it worked alright.

126
00:09:15,890 --> 00:09:21,650
If you ever get an asterix here that indicates that it's continually running forever just go ahead and

127
00:09:21,650 --> 00:09:27,200
run this Pipp install send it to trash at your command line and make sure to use Pipp install.

128
00:09:27,200 --> 00:09:32,990
This library is currently not available with the install again run Pipp install send to trash at your

129
00:09:32,990 --> 00:09:35,980
command line or you can try running it in the Jupiter notebook.

130
00:09:36,110 --> 00:09:39,270
By providing exclamation point in front of it.

131
00:09:39,620 --> 00:09:46,280
Once you have sent to trash installed we can use that to send things to our trash bin or recycling bin

132
00:09:46,580 --> 00:09:47,120
that way.

133
00:09:47,120 --> 00:09:51,010
Just in case we accidentally deleted something that we still need we can always recover it.

134
00:09:51,100 --> 00:10:00,280
And it's quite simple all you need to do is say import send the trash and then let's go ahead and list

135
00:10:00,280 --> 00:10:06,370
what we have currently here it looks like we have our practice that textfile Let's go ahead and send

136
00:10:06,370 --> 00:10:14,280
them the trash and the command is quite easy to send to trash that send the trash and then the file

137
00:10:14,280 --> 00:10:14,840
path.

138
00:10:14,880 --> 00:10:20,040
In this case because I'm in the same directory as a text file I can just copy and paste that in.

139
00:10:20,190 --> 00:10:20,790
Run that.

140
00:10:20,790 --> 00:10:23,130
And it's been sent to my recycling bin.

141
00:10:23,370 --> 00:10:28,800
And this is the safe way to delete things on your computer using Python because the files are recoverable

142
00:10:28,800 --> 00:10:30,910
in your recycling bin or in the trash.

143
00:10:31,530 --> 00:10:38,840
Programmatically you may see unlink aren't our MDR remove the rectory and then removed tree use in scripts.

144
00:10:38,850 --> 00:10:42,930
But you should be very very careful with these commands because they will permanently delete things

145
00:10:43,230 --> 00:10:46,160
off of your computer in a way where you cannot recover them.

146
00:10:46,200 --> 00:10:50,430
So I recommend using scent to trash in order to safely delete things on your computer.

147
00:10:51,290 --> 00:10:57,170
OK we've discussed getting directories listing everything and directory moving files around on your

148
00:10:57,170 --> 00:11:00,380
computer as well as sending things to the trash.

149
00:11:00,380 --> 00:11:05,590
The last thing I want to discuss is walking through a directory to walk through the rectory.

150
00:11:05,600 --> 00:11:08,650
You can just use the OS walk function.

151
00:11:08,690 --> 00:11:16,720
Now first off I'm going to create a variable called my path and set equal to the same path where the

152
00:11:16,720 --> 00:11:21,540
corresponding notebook for this Lessner this overview is located.

153
00:11:21,760 --> 00:11:24,380
So let me copy and paste that here basically.

154
00:11:24,650 --> 00:11:32,760
I'm just passing in where the orange mission folder is and setting that as my pass.

155
00:11:32,830 --> 00:11:40,910
Or you could alternatively use your current working directory so you could set my path equal to OS dot.

156
00:11:41,430 --> 00:11:42,340
CW.

157
00:11:42,520 --> 00:11:45,920
Just keep in mind your results may look a little different than what we have here.

158
00:11:45,940 --> 00:11:50,920
If you use this approach because you may go through the folders are different folders.

159
00:11:50,920 --> 00:11:58,300
So I'll just set my path to the orange folder location and then what we will do is show you how to use

160
00:11:58,300 --> 00:11:59,710
OS walk.

161
00:11:59,770 --> 00:12:05,380
So OS walk's uses a little bit of tuple unpacking because it's going to return back may three main pieces

162
00:12:05,380 --> 00:12:12,190
of information the folder it's looking at the current soap folders it's looking at and then the current

163
00:12:12,190 --> 00:12:13,440
files looking at.

164
00:12:13,750 --> 00:12:19,140
And then you say and Os thoughts walk and then whatever directory you want to walk through.

165
00:12:19,200 --> 00:12:27,700
So will say my path and then let's just print out the folder we're looking at.

166
00:12:28,310 --> 00:12:34,220
So what this does is it says I'm going to be checking through all these folders first Tharp's starts

167
00:12:34,220 --> 00:12:41,600
with the top folder and then it looks like at different examples example top level example extract the

168
00:12:41,600 --> 00:12:45,180
contents on all these various folders there.

169
00:12:45,230 --> 00:12:52,230
Then there's also the sub folders so we can print the folder and let's write a message here to make

170
00:12:52,240 --> 00:12:53,680
a little clear.

171
00:12:53,730 --> 00:13:02,530
Currently looking at this folder and then we print that folder and then we can print the sub folders

172
00:13:02,550 --> 00:13:03,190
for it.

173
00:13:03,480 --> 00:13:11,150
So folders here are and then so pull there is essentially a list of folders in that folder.

174
00:13:12,210 --> 00:13:18,550
And you can think a folder is another word for the directory so we can say for a subfolder in the list

175
00:13:18,610 --> 00:13:30,620
of some folders plural there print out the subfolder and then we're going to at the end of this prints

176
00:13:31,840 --> 00:13:34,180
Well let's print a new line here.

177
00:13:39,320 --> 00:13:44,700
So I run that and it says I'm currently looking at this folder right here and it looks like the three

178
00:13:44,700 --> 00:13:47,500
subfolder here are the check points folder.

179
00:13:47,640 --> 00:13:49,300
See example top level folder.

180
00:13:49,340 --> 00:13:49,930
This mission.

181
00:13:49,950 --> 00:13:54,960
Orange files folder and then it looks like another folder and it doesn't find any folders inside of

182
00:13:54,960 --> 00:13:55,770
that one.

183
00:13:55,770 --> 00:14:01,380
So notice how it's basically recursively walking through every single folder and subfolder and seeing

184
00:14:01,410 --> 00:14:02,290
what's in there.

185
00:14:02,430 --> 00:14:04,420
Sometimes it won't find that a subfolder.

186
00:14:04,470 --> 00:14:09,970
So you can see here in this python notebook checkpoints folder it didn't find any other folders there.

187
00:14:09,990 --> 00:14:15,840
That means after number folders left there's probably only files left or it's just an empty folder to

188
00:14:15,840 --> 00:14:17,010
see the files.

189
00:14:17,950 --> 00:14:28,250
You can just say for f in files princess and then we can print the new line after this.

190
00:14:31,410 --> 00:14:34,140
And if we run that it's going to look through more things.

191
00:14:34,380 --> 00:14:40,050
So it says hey I'm currently looking at this folder here of the folders and then it prints out all the

192
00:14:40,050 --> 00:14:46,110
files that it found there in those folders and it continues and you'll end up getting repeated results

193
00:14:46,110 --> 00:14:51,890
here because if it looks at certain folders multiple times you'll see repeated results.

194
00:14:51,900 --> 00:14:56,190
But basically what it's doing is just recursively walking through every single folder.

195
00:14:56,250 --> 00:15:03,120
And we've gone ahead and inside the Orange mission folder there should be some clear examples called

196
00:15:03,200 --> 00:15:07,690
Mid example one example two bottom level one bottom level two.

197
00:15:07,830 --> 00:15:09,900
And then there's also top level folders.

198
00:15:09,930 --> 00:15:16,290
Example top level and that's just designed to help you understand how this walk is currently happening.

199
00:15:16,380 --> 00:15:22,150
But basically all it's doing is again you provide a file path and it will look for every folder every

200
00:15:22,170 --> 00:15:25,610
subfolder and every file in that particular path.

201
00:15:25,620 --> 00:15:32,700
And this is a nice way to allow yourself to interact with some sort of or through some sort of functionality

202
00:15:33,210 --> 00:15:40,650
for every file in a directory so you can imagine that if you needed to open every single file that was

203
00:15:40,740 --> 00:15:46,410
in a group of folders inside another folder you could just use the OS walk on that path that eventually

204
00:15:46,410 --> 00:15:48,890
points to every single file.

205
00:15:48,900 --> 00:15:54,570
So eventually here instead of maybe printing f you would say hey why don't I open these files and then

206
00:15:54,600 --> 00:15:57,570
maybe I can write to them somehow.

207
00:15:57,990 --> 00:16:03,100
It's really up to you what you're going to be doing in those files but hopefully you get the idea again

208
00:16:03,130 --> 00:16:09,420
that using the OS the walk function you should now be aware of how to work with computers files and

209
00:16:09,420 --> 00:16:12,150
folders in whichever directory they're in.

210
00:16:12,150 --> 00:16:17,370
Remember that the OS module works for any operating system that supports Python which means these commands

211
00:16:17,370 --> 00:16:21,750
will work across Linux Mac OS or Windows computers without any need for adjustment.

212
00:16:21,750 --> 00:16:26,850
So you can share scripts that use the OS module command across different colleagues working on different

213
00:16:26,850 --> 00:16:28,080
computers.

214
00:16:28,080 --> 00:16:32,340
Keep in mind that the only time you will need to make an adjustment is if you're manually providing

215
00:16:32,340 --> 00:16:37,710
file paths like that appear if you're doing that you're going to want to make sure it's using the correct

216
00:16:37,710 --> 00:16:39,720
syntax for your operating system.

217
00:16:39,840 --> 00:16:44,630
And if you ever need a reminder of what that syntax looks like all you need to do is run the get C-w

218
00:16:44,640 --> 00:16:50,270
the command and it will output the file or the current directory you are in in the syntax it expects.

219
00:16:50,430 --> 00:16:55,240
So for Windows computers it looks like it's expecting two backslashes per folder.

220
00:16:56,320 --> 00:16:57,120
All right.

221
00:16:57,160 --> 00:16:58,880
Hope that was helpful to you Agent.

222
00:16:59,020 --> 00:17:00,400
Best of luck on your next mission.

