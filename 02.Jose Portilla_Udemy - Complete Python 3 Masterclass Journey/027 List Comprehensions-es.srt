1
00:00:00,270 --> 00:00:00,990
Dar una buena acogida.

2
00:00:00,990 --> 00:00:07,250
Analicemos las listas de comprensin. Las listas de comprensin son una forma nica de crear rpidamente

3
00:00:07,340 --> 00:00:08,810
una lista con Python.

4
00:00:08,810 --> 00:00:14,450
Bsicamente te permiten construir listas usando una notacin diferente que te permite crear una

5
00:00:14,510 --> 00:00:19,560
lnea para el bucle construido dentro de los corchetes de la lista.

6
00:00:19,580 --> 00:00:24,470
La sintaxis puede ser confusa al principio para los nuevos reclutas, pero desglosarla paso a paso con

7
00:00:24,470 --> 00:00:26,660
suerte aclarar todo para poder hacer esto.

8
00:00:26,660 --> 00:00:29,650
Saltemos a un libro de notas de Jpiter y le mostraremos la sintaxis.

9
00:00:34,850 --> 00:00:38,080
Comencemos con un ejemplo simple usando un ciclo for.

10
00:00:38,480 --> 00:00:46,080
Comenzaremos con una lista vaca llamada lista e imaginemos que tenemos algn tipo de cadena

11
00:00:46,120 --> 00:00:51,070
y le asignaremos a esta cadena algo de cadena.

12
00:00:51,070 --> 00:00:57,790
Ahora imagina que de alguna manera queremos que cada personaje sea un elemento individual en esta lista.

13
00:00:57,790 --> 00:01:03,380
Bueno, podramos hacer es que podemos usar un ciclo para decir cuatro letras en la cadena.

14
00:01:03,400 --> 00:01:09,650
S Tome mi lista y el bolgrafo esa letra a la lista.

15
00:01:09,940 --> 00:01:13,130
Y si ejecuto esto y verifico el resultado de mi lista.

16
00:01:13,130 --> 00:01:19,250
Ahora tengo una lista de referencias en la que cada elemento es ahora los caracteres por los que estbamos iterando en

17
00:01:19,430 --> 00:01:20,580
esto para un ciclo.

18
00:01:20,810 --> 00:01:24,620
Veamos ahora cmo podramos hacer la misma tarea usando una lista de comprensin.

19
00:01:24,920 --> 00:01:28,460
Comenzaremos por eliminar esta primera lnea de mi lista.

20
00:01:28,460 --> 00:01:34,280
Ya que no necesitamos definir eso todava y lo vamos a hacer aqu, bsicamente cambiamos

21
00:01:34,370 --> 00:01:36,170
esta declaracin de adicin.

22
00:01:36,170 --> 00:01:42,560
En cambio, lo nico que hacemos es tomar esta carta, cortarla y ponerla en frente de aqu.

23
00:01:42,600 --> 00:01:49,890
As que estamos diciendo letra por letra en S y luego nos deshacemos del apndice y nos deshacemos de este

24
00:01:51,120 --> 00:01:57,580
dos puntos y luego lo ponemos entre corchetes y ese es el formato de comprensin de la lista.

25
00:01:57,660 --> 00:02:06,420
Dice el elemento cuatro elementos en iterable y dentro de corchetes y luego podemos hacer que esta sea mi nueva lista

26
00:02:06,420 --> 00:02:09,140
y que sea lista de comprensin.

27
00:02:09,180 --> 00:02:18,150
Esencialmente similar a un ciclo de una lnea y si revisamos mi lista contra mi nueva lista obtenemos exactamente

28
00:02:18,150 --> 00:02:19,590
los mismos resultados.

29
00:02:19,620 --> 00:02:22,430
As que veamos algunos ejemplos ms.

30
00:02:22,440 --> 00:02:26,410
Imaginemos que queramos obtener una lista de un montn de nmeros cuadrados.

31
00:02:26,490 --> 00:02:40,570
Lo que podra hacer es decir cuadrados es igual a aqu. Voy a decir X a la potencia de dos para x en el rango.

32
00:02:40,730 --> 00:02:45,750
Podemos decir cero a 11 y luego, si ech un vistazo mira qu cuadrados es.

33
00:02:45,820 --> 00:02:47,640
Son estos nmeros Square.

34
00:02:47,660 --> 00:02:49,960
Entonces son los nmeros y el rango de 0 a 11.

35
00:02:50,000 --> 00:02:51,520
Entonces el poder de dos.

36
00:02:51,530 --> 00:02:59,690
Entonces, de nuevo, la sintaxis general es un elemento para elementos en algn tipo de iterable rango o

37
00:02:59,780 --> 00:03:02,660
una lista u otra cadena, etc. Entonces, mostremos otro ejemplo llamado evens.

38
00:03:02,690 --> 00:03:05,620
Y aqu vamos a crear una lista de nmeros pares que diga x para x en el rango de 0 a 10.

39
00:03:06,370 --> 00:03:15,380
Y si ejecutamos eso y comprobamos los evens, recuperamos los nmeros reales para obtener solo los nmeros pares, necesitamos agregar algn

40
00:03:15,550 --> 00:03:22,450
tipo de instruccin if y la instruccin if que vamos a decir es si X muestra

41
00:03:22,460 --> 00:03:29,640
por ciento 2 y eso es mod 2 o el operador de mdulo es igual a cero.

42
00:03:29,650 --> 00:03:35,240
Y luego solo recupero los nmeros pares.

43
00:03:35,890 --> 00:03:37,930
Entonces, expliquemos rpidamente qu puede hacer el operador inteligente.

44
00:03:37,930 --> 00:03:40,940
En caso de que no lo haya visto antes, lo que hacen la mayora de los operadores es devolver el resto despus de la divisin.

45
00:03:41,170 --> 00:03:47,400
Entonces puedes imaginar que cuatro divididos por tres es un punto tres hasta

46
00:03:47,620 --> 00:03:55,230
tres tres, pero el resto de esto es uno porque tres pasa a cuatro una vez.

47
00:03:55,410 --> 00:03:58,950
Resto 1.

48
00:03:58,960 --> 00:04:00,230
Entonces, si dices

49
00:04:00,250 --> 00:04:09,680
que para el mod 3 obtendrs el valor 1 si dices cinco ms tres que has quedado son dos.

50
00:04:09,680 --> 00:04:10,470
Y si

51
00:04:10,880 --> 00:04:17,690
dices seis tres, tienes resto cero porque tres entran en seis dos veces iguales sin resto.

52
00:04:17,690 --> 00:04:18,770
Y esta funcin de maade le

53
00:04:18,770 --> 00:04:24,560
permite verificar los nmeros incluso diciendo maade para comprobar si es igual a cero porque cualquier nmero que sea incluso cuando compruebe el maade contra dos no debera tener ningn resto.

54
00:04:24,560 --> 00:04:32,220
Y eso es para que puedas verificar algo.

55
00:04:32,220 --> 00:04:33,860
Incluso.

56
00:04:33,920 --> 00:04:35,310
Entonces ese es otro ejemplo de una lista de comprensin.

57
00:04:35,320 --> 00:04:38,230
Y, por ltimo, tambin puede hacer una declaracin if else en una lista de comprensin.

58
00:04:38,560 --> 00:04:42,630
Pero ten en cuenta que en cierto punto realmente vas a estar sacrificando la legibilidad.

59
00:04:42,640 --> 00:04:46,960
Y eso tambin es una gran parte de Python.

60
00:04:47,000 --> 00:04:48,810
Entonces, si te encuentras teniendo problemas para descubrir cmo poner algo en una lista de comprensin.

61
00:04:49,000 --> 00:04:53,310
Solo use un bucle for en su lugar.

62
00:04:53,440 --> 00:04:54,800
Casi siempre es tan eficiente como la comprensin de la lista.

63
00:04:54,820 --> 00:04:58,140
Te encontrars utilizando listas de comprensin a medida que te vayas haciendo ms

64
00:04:58,150 --> 00:05:02,710
avanzado en Python, y se vern obligados a utilizarlas constantemente, ya que solo ests aprendiendo sobre Python.

65
00:05:02,770 --> 00:05:06,520
Entonces mostraremos un ltimo ejemplo ms complejo.

66
00:05:06,610 --> 00:05:09,070
Dir mi lista x si x mod 2 es igual a cero else ni siquiera string para x en el rango de 0 a 10.

67
00:05:10,140 --> 00:05:25,480
Y este tipo de sintaxis es un poco extrao al principio para aprender porque acabas de aprender que si solo tienes una nica instruccin if, la instruccin if viene despus

68
00:05:25,720 --> 00:05:31,120
de este elemento para el elemento en la instruccin iterable.

69
00:05:31,120 --> 00:05:37,370
Sin embargo, si est utilizando una instruccin if else que realmente debe

70
00:05:37,390 --> 00:05:44,530
ser lo primero antes de decir iterable en o cuatro elementos en iterable.

71
00:05:44,620 --> 00:05:46,810
Entonces, eso es un poco raro

72
00:05:46,900 --> 00:05:52,810
acerca de cmo empezar a aprender cmo hacer tareas ms complejas en el formato de comprensin de listas.

73
00:05:52,810 --> 00:05:53,510
Y para dejar

74
00:05:53,860 --> 00:05:58,120
en claro si tienes problemas para descubrir cmo hacer algo en una lista de comprensin, sigue adelante

75
00:05:58,120 --> 00:06:03,220
y utiliza el bucle for que usamos al principio porque eso siempre funcionar y siempre va a ser mucho ms legible.

76
00:06:03,250 --> 00:06:06,380
Entonces, para ver mi lista ahora tengo evens y luego string no es ni siquiera donde mod para el cero diferente.

77
00:06:06,400 --> 00:06:14,310
Est bien, eso es todo para las comprensiones de la lista.

78
00:06:14,320 --> 00:06:16,580
Encontrar que estos se usan a menudo para pequeos trabajos rpidos y para el cdigo de otras personas.

79
00:06:16,660 --> 00:06:20,560
Por lo tanto, es importante que aprenda a leerlos,

80
00:06:20,680 --> 00:06:25,360
pero no se preocupe demasiado por tener que escribirlos siempre.

81
00:06:25,360 --> 00:06:26,630
Excelente trabajo hasta el momento.

82
00:06:26,710 --> 00:06:27,880
Te ver en la prxima leccin.

83
00:06:27,910 --> 00:06:29,000
&nbsp;

