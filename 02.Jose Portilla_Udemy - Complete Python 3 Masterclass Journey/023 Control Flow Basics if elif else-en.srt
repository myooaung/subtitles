1
00:00:00,240 --> 00:00:06,870
Welcome back recruit and this lesson we're going to be discussing control flow basics control flow allows

2
00:00:06,870 --> 00:00:09,480
us to add logic to our code.

3
00:00:09,480 --> 00:00:15,390
It allows us to also specify under what conditions we want certain blocks of code to execute to do this.

4
00:00:15,390 --> 00:00:16,470
We use that if.

5
00:00:16,530 --> 00:00:17,160
Elif.

6
00:00:17,190 --> 00:00:18,990
Else statements.

7
00:00:18,990 --> 00:00:26,400
Now in order to show the syntax for the statements we to quickly discuss comparison operators comparison

8
00:00:26,400 --> 00:00:30,240
operators allow us to compare two different objects.

9
00:00:30,240 --> 00:00:34,620
Typically for these examples we'll be using them with numbers that you can use them for a variety of

10
00:00:34,680 --> 00:00:35,890
data types.

11
00:00:35,970 --> 00:00:40,170
Here we can see the symbols as well as are associated meaning they should be pretty straightforward

12
00:00:40,560 --> 00:00:44,740
things like greater than less than Lessner equal to greater than or equal to.

13
00:00:44,880 --> 00:00:49,200
And then if you want to check if two objects are equal to each other you can use two equal signs for

14
00:00:49,200 --> 00:00:54,010
equality and then exclamation mark and an equal sign for not being equal.

15
00:00:55,710 --> 00:01:00,780
Now that we know that we can understand how control flow is going to use boolean conditions to decide

16
00:01:00,810 --> 00:01:03,140
whether or not to execute a block of code.

17
00:01:03,270 --> 00:01:09,270
Recall that booleans are either true or false objects and comparison operators that we just saw will

18
00:01:09,270 --> 00:01:12,900
always return a boolean value that we can use for control flow.

19
00:01:12,930 --> 00:01:18,870
So let's go ahead and see some examples of control flow the control flow syntax makes use of colons

20
00:01:18,960 --> 00:01:21,850
and indentation otherwise known as whitespace.

21
00:01:21,980 --> 00:01:26,820
This indentation system is crucial to Python and it's really what sets it apart from other programming

22
00:01:26,820 --> 00:01:28,270
languages.

23
00:01:28,590 --> 00:01:30,830
Indentation results in more readable code.

24
00:01:30,990 --> 00:01:34,760
And it also forces a programmer to organize their code as they program.

25
00:01:34,980 --> 00:01:39,260
And this is one of the main factors in Python's quick rise to popularity.

26
00:01:39,270 --> 00:01:43,260
Let's explore some syntax examples for control flow.

27
00:01:43,730 --> 00:01:46,100
This is the syntax of an IF statement.

28
00:01:46,280 --> 00:01:51,940
We will say if and then check for some condition and then have a colon and then beyond that Colon will

29
00:01:51,950 --> 00:01:55,340
have an indented block of code where we can execute it.

30
00:01:55,460 --> 00:02:00,880
If that condition happens to be true for example we can say if one is less than 2.

31
00:02:01,130 --> 00:02:02,460
Print this is true.

32
00:02:02,540 --> 00:02:05,330
And if we were to run that small block of code we would get out.

33
00:02:05,330 --> 00:02:11,610
This is true since one is less than two we can add on an ELSE to the statement.

34
00:02:11,690 --> 00:02:16,550
We'll first check if some condition is true and if that condition happens to be true will execute some

35
00:02:16,550 --> 00:02:17,410
code.

36
00:02:17,510 --> 00:02:23,600
However we can also specify some other condition to execute if that condition doesn't happen to be true

37
00:02:24,080 --> 00:02:28,480
with the addition of the else statement and notice the indentation line up here.

38
00:02:28,670 --> 00:02:35,360
The else is associated with the same if statement above it because there indentation lines up and that's

39
00:02:35,360 --> 00:02:41,720
how Python is able to understand what blocks of code relate to other blocks of code that uses indentation

40
00:02:41,720 --> 00:02:42,860
to understand that.

41
00:02:43,340 --> 00:02:51,470
Let's go ahead and actually put an example here we can say if one is equal to two prints Whoa else prints

42
00:02:51,530 --> 00:02:52,670
everything normal.

43
00:02:52,850 --> 00:02:54,490
And we were to run this block of code.

44
00:02:54,530 --> 00:02:57,760
You should see everything normal because one is not equal to two.

45
00:02:57,770 --> 00:02:59,600
So that block code doesn't execute.

46
00:02:59,750 --> 00:03:02,060
So then we go down to the else statement.

47
00:03:02,060 --> 00:03:07,400
Finally we can add in Elif statements in order to check for other conditions that are not in the if

48
00:03:07,400 --> 00:03:08,220
statement.

49
00:03:08,420 --> 00:03:13,730
That means we check for the original if statement if one is equal to to print something or execute some

50
00:03:13,730 --> 00:03:19,310
block code and then we can have multiple Elif statements below it and this can check for any number

51
00:03:19,370 --> 00:03:24,100
of other cases that are specific that we want to check to see if that condition is true or false.

52
00:03:24,320 --> 00:03:27,550
And if all of those fail then finally we have our L statement.

53
00:03:27,560 --> 00:03:32,180
Notice how there is no condition on the L statement because it's only going to execute if everything

54
00:03:32,180 --> 00:03:33,770
above it happens to be false.

55
00:03:33,950 --> 00:03:39,340
And in this case we can go along the code and see one is not equal to two so we don't print out whoa

56
00:03:39,860 --> 00:03:42,660
the second block of code is true one is equal to one.

57
00:03:42,710 --> 00:03:44,460
Then we print out what is equal to 1.

58
00:03:44,570 --> 00:03:49,970
And that basically ends this entire block code the elso only get executed if everything above it is

59
00:03:49,970 --> 00:03:50,650
false.

60
00:03:52,050 --> 00:03:57,210
Keep in mind the invitation when utilizing control flow porn that station can lead to mistakes or bugs

61
00:03:57,240 --> 00:03:58,290
in your code.

62
00:03:58,290 --> 00:04:03,140
Let's explore these examples in actual practice and see how we can program using control flow.

63
00:04:08,660 --> 00:04:12,590
Let's begin by cutting out a simple example illustrating what we just talked about.

64
00:04:12,970 --> 00:04:19,730
We'll say if one is less than two colon and then notice when we enter here Jupiter notebook and many

65
00:04:19,730 --> 00:04:28,220
other Python IDS will automatically create the indentation for you and then we can say Prince condition

66
00:04:28,540 --> 00:04:29,510
met.

67
00:04:29,620 --> 00:04:36,230
And when I run this notice I get back condition met if I were to reverse this asking if one is greater

68
00:04:36,230 --> 00:04:43,250
than 2 prints condition meant I don't get any output because this block of code will only execute when

69
00:04:43,250 --> 00:04:45,680
the condition here happens to be true.

70
00:04:45,950 --> 00:04:49,010
And keep in mind it doesn't have to be a comparison operation.

71
00:04:49,130 --> 00:04:50,530
It could just be something like.

72
00:04:50,540 --> 00:04:51,060
True.

73
00:04:51,110 --> 00:04:58,760
So we can say if true prink condition or we could say if false nothing's happened.

74
00:04:58,910 --> 00:05:00,960
Typically you're not going to see a straight bully in here.

75
00:05:00,960 --> 00:05:07,530
Instead you may see an assigned variable so you may have something like C O N D for condition.

76
00:05:07,820 --> 00:05:10,600
Say 1 is less than two.

77
00:05:10,640 --> 00:05:11,980
That's our condition right there.

78
00:05:12,110 --> 00:05:19,810
And then we'll say if condition Prince Khan met and then we see conman's.

79
00:05:19,850 --> 00:05:24,290
So when you're reading someone else's code more likely than not there's going to be some sort of variable

80
00:05:24,290 --> 00:05:27,470
here or some sort of variable comparison.

81
00:05:27,470 --> 00:05:29,380
That's the basis of the if statement.

82
00:05:29,420 --> 00:05:31,980
Let's quickly discuss the if else statement.

83
00:05:32,300 --> 00:05:38,030
And now we can add in an alternate action in case that first if statement doesn't actually end up having

84
00:05:38,030 --> 00:05:45,020
a true condition and really take notice of the indentation and how the blocks are lining up here will

85
00:05:45,200 --> 00:05:57,050
say if one is equal to one Prince condition Mets one equals one and then I'm going to line up an ELSE

86
00:05:57,050 --> 00:06:00,760
block at the same indentation level of this if statement.

87
00:06:00,780 --> 00:06:06,350
And notice I don't have any condition in the else block because the else block it's job is to execute

88
00:06:06,470 --> 00:06:13,070
only if all the other ifs checks above it happen to not occur or be false.

89
00:06:13,070 --> 00:06:21,210
So then will Prince last block happen to run.

90
00:06:21,210 --> 00:06:24,700
We run this and we say condition one is go to one.

91
00:06:24,810 --> 00:06:32,580
If we were to change this so that it was something false like one is equal to a thousand and then I

92
00:06:32,580 --> 00:06:33,220
run this.

93
00:06:33,270 --> 00:06:37,410
It says last block happened to run because this statement didn't execute.

94
00:06:37,410 --> 00:06:44,670
So then we see the Q if we want to check for more than just one condition we can have the Ellis statements.

95
00:06:44,670 --> 00:06:47,460
So that allows us to check for multiple conditions.

96
00:06:47,460 --> 00:06:53,120
Let's give an example of this will say if two is equal to zero.

97
00:06:53,340 --> 00:07:04,220
Prince first US first condition true and then we're going to check for an additional condition.

98
00:07:04,270 --> 00:07:11,710
And here we can actually have a condition that checks will say two equals one here will print.

99
00:07:11,740 --> 00:07:12,870
Second condition.

100
00:07:12,880 --> 00:07:14,670
True.

101
00:07:15,010 --> 00:07:16,910
We'll have one more will say else.

102
00:07:16,920 --> 00:07:31,810
Or else if two is equal to two printouts third condition true and then finally will have an L saying

103
00:07:34,090 --> 00:07:37,540
nothing above was true.

104
00:07:37,540 --> 00:07:41,770
So there we have if now you can have as many elist statements as you want.

105
00:07:42,190 --> 00:07:46,870
And if we run this we get back that the third conditional is true because 2 is equal to is not equal

106
00:07:46,870 --> 00:07:47,610
to zero.

107
00:07:47,610 --> 00:07:49,890
It is not equal to one but two is equal to two.

108
00:07:50,110 --> 00:07:56,230
And the else doesn't occur because it only occurs when all the matching up blocks of LFA if conditions

109
00:07:56,530 --> 00:07:58,060
happen to be false.

110
00:07:58,060 --> 00:08:03,640
Now notice what happens if we end up having multiple conditions in a row that happened to be true.

111
00:08:03,700 --> 00:08:09,750
So we'll say two is equal to two appear as well as Ellis two is equal to two.

112
00:08:09,820 --> 00:08:15,310
So here we have two true statements and if you run this well it ends up occurring is you only end up

113
00:08:15,340 --> 00:08:18,130
executing the first true condition.

114
00:08:18,130 --> 00:08:19,540
So keep that in mind.

115
00:08:19,540 --> 00:08:25,690
This third one here even though the condition it had was true the way Python works is it's going to

116
00:08:25,690 --> 00:08:31,540
keep going up until it finds that first true condition.

117
00:08:31,540 --> 00:08:33,430
Let's work out one final example.

118
00:08:33,430 --> 00:08:36,060
That is a little more practical.

119
00:08:36,090 --> 00:08:39,690
We will create a variable called agent code.

120
00:08:39,690 --> 00:08:42,250
Go ahead and just give the some number.

121
00:08:42,270 --> 00:08:51,120
Doesn't matter what number it is can be random and we'll set up access equal to the variable false.

122
00:08:51,120 --> 00:08:57,630
So we have an agent's code and some sort of access parameter and then we'll write some blocks of code

123
00:08:57,630 --> 00:09:07,990
here to check if the agent code matches up will say if the agent code is equal to 1 2 3 4 5 we will

124
00:09:07,990 --> 00:09:20,190
print out code reset and then also printouts call a supervisor.

125
00:09:20,310 --> 00:09:25,560
That's the first conditional check then we'll actually check to see if we have a matching agent code.

126
00:09:25,680 --> 00:09:28,500
We'll see if agent code is equal to what we wrote above here.

127
00:09:28,590 --> 00:09:39,150
I we'll just go ahead and copy this then we'll Prince welcome agents you know just passing that number

128
00:09:39,150 --> 00:09:44,610
there and I will say access is equal to true.

129
00:09:44,620 --> 00:09:50,770
So no what I'm doing here I will actually be reassigning a variable only on the condition of this agent

130
00:09:50,770 --> 00:09:54,050
code matching up.

131
00:09:54,140 --> 00:10:01,830
And then finally I'll have an else statement here that says print Sorry no matching code

132
00:10:04,790 --> 00:10:09,850
and then further down in this block can actually create some other set of control flow logic.

133
00:10:10,340 --> 00:10:14,710
So I really put a bunch of hash tags here comments to kind of separate out this other block here.

134
00:10:14,720 --> 00:10:18,010
You don't need to do this but it's just for visibility.

135
00:10:18,320 --> 00:10:28,830
We'll say if the access code is equal to true print access granted and then we'll say.

136
00:10:28,830 --> 00:10:29,820
Else.

137
00:10:29,830 --> 00:10:33,010
Prince access.

138
00:10:34,570 --> 00:10:36,160
Access denied.

139
00:10:36,920 --> 00:10:37,350
OK.

140
00:10:37,540 --> 00:10:40,190
So let's see what's actually going to happen before we run this.

141
00:10:40,210 --> 00:10:43,340
We have an agent code and we say x is equal to false.

142
00:10:43,360 --> 00:10:45,190
So Python is going to go along.

143
00:10:45,220 --> 00:10:45,820
It's going to check.

144
00:10:45,820 --> 00:10:47,690
Does the agent Cody go one two three four.

145
00:10:47,860 --> 00:10:48,610
Well it does not.

146
00:10:48,640 --> 00:10:53,160
So we won't run this block code that it's going to check because the agent could equal this number.

147
00:10:53,230 --> 00:10:53,730
It does.

148
00:10:53,740 --> 00:10:54,860
So it will say Prince.

149
00:10:54,880 --> 00:10:55,810
Welcome agent.

150
00:10:55,910 --> 00:11:01,210
And it's going to reset access to be true then else it's not going to execute because we had something

151
00:11:01,210 --> 00:11:04,040
true up here and it's going to keep going down.

152
00:11:04,210 --> 00:11:11,140
And here we can see we've now said and started another block of if else statements and the way Python

153
00:11:11,140 --> 00:11:17,950
knows that this block up here doesn't have anything to do if this block down here is because we've essentially

154
00:11:17,950 --> 00:11:24,770
closed off this if statement with an L statement leaving us open to start up a new if else statement.

155
00:11:24,790 --> 00:11:26,650
So let's run this and see what happens.

156
00:11:27,010 --> 00:11:28,020
We get welcome.

157
00:11:28,030 --> 00:11:29,670
Agent 2 3 1 9 2.

158
00:11:29,710 --> 00:11:33,490
And then we also get access is granted because we had an additional check here.

159
00:11:33,520 --> 00:11:39,640
X is equal to true print access granted and we can actually if we wanted to take a look at this last

160
00:11:39,640 --> 00:11:50,160
set we could split up this one into a new cell itself or a new piece or another script.

161
00:11:50,170 --> 00:11:58,000
If you want to analyse what's going to happen here so we say if we run this code says welcome.

162
00:11:58,000 --> 00:11:59,700
Agent 2 3 1 9 2.

163
00:11:59,800 --> 00:12:08,560
And if we run this year you'll still say access granted Let's run this with 1 2 3 4 5 well run this

164
00:12:09,220 --> 00:12:13,230
run this sell again and now it's as code reset call a supervisor.

165
00:12:13,240 --> 00:12:18,390
And if we run this again here since Access is equal to false and we never actually reassigned it in

166
00:12:18,400 --> 00:12:25,000
this block because we instead ran the code reset block when I run this last cell it will say Access

167
00:12:25,180 --> 00:12:33,860
Denied the last point I want to make here is if you already know that your variable itself is a Boolean

168
00:12:33,890 --> 00:12:35,590
either true or false.

169
00:12:35,960 --> 00:12:42,640
So for example if I just ask what access is it's going to be false or if it happens to be a right re-assign

170
00:12:42,680 --> 00:12:43,960
it will be true.

171
00:12:44,000 --> 00:12:49,840
You don't really need to make this comparison because Access itself is already a boolean and this is

172
00:12:49,840 --> 00:12:55,700
a typical example of being able to differentiate someone who's just learning Python to someone who's

173
00:12:55,700 --> 00:12:57,740
a little more experienced than Python.

174
00:12:57,740 --> 00:13:03,500
This sort of code right here indicates someone who's not very experienced in Python because a more experienced

175
00:13:03,500 --> 00:13:08,900
developer would have realized that Access itself is already a boolean meaning it could have just done

176
00:13:08,900 --> 00:13:09,400
this.

177
00:13:09,410 --> 00:13:11,770
They don't need a check if x is equal to true.

178
00:13:11,810 --> 00:13:15,130
They just need to check the access variable itself.

179
00:13:15,160 --> 00:13:19,740
So this is how you're going to see more experienced developers write their code.

180
00:13:19,780 --> 00:13:27,340
They will say if Access print access granted else print access denied and this code you can see here

181
00:13:27,350 --> 00:13:28,150
we ran it again.

182
00:13:28,190 --> 00:13:29,210
Works exactly the same.

183
00:13:29,230 --> 00:13:34,020
Because Access itself is the actual boolean variable.

184
00:13:34,130 --> 00:13:39,710
So writing code like we just did is a little bit cleaner and it also allows you to name your variables

185
00:13:39,710 --> 00:13:42,370
differently to make it even more readable.

186
00:13:42,380 --> 00:13:48,630
So we could have renamed access to be access underscore granted to that it could say if Access Granted

187
00:13:48,650 --> 00:13:50,150
print access granted.

188
00:13:50,150 --> 00:13:52,520
All right excellent work so far.

189
00:13:52,550 --> 00:13:56,500
Now that we understand control flow we can begin to build an understanding of loops.

190
00:13:56,600 --> 00:13:57,410
Coming up next.

