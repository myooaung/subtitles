1
00:00:01,220 --> 00:00:03,430
Welcome back recruit excellent work.

2
00:00:03,470 --> 00:00:07,820
Let's have a quick de-briefing to see how you were able to accomplish your tasks.

3
00:00:07,820 --> 00:00:12,550
The first thing you did was create an encryption function and there's many ways to do this.

4
00:00:12,680 --> 00:00:19,500
But one possible way that will show in this de-briefing is to first off create a placeholder list you

5
00:00:19,680 --> 00:00:27,410
will say encrypted text is equal to a List Range length of the text.

6
00:00:27,410 --> 00:00:29,410
So what is this actually going to be.

7
00:00:29,630 --> 00:00:35,900
Well this is just a list of numbers where every number stands for in place of a character in that actual

8
00:00:35,900 --> 00:00:36,750
text.

9
00:00:36,770 --> 00:00:37,940
So we'll just see what this looks like.

10
00:00:37,940 --> 00:00:45,160
If we were to run it and then let's define or text as hello.

11
00:00:45,620 --> 00:00:49,160
And we'll see what that encrypted text looks like.

12
00:00:49,160 --> 00:00:53,050
So if we run this we can see now we have a number for every letter here.

13
00:00:53,060 --> 00:00:57,010
That way we can quickly swap these numbers in and out for other letters.

14
00:00:57,020 --> 00:01:03,040
The reason we do this is because we can't exactly do that for string coming back up here.

15
00:01:03,040 --> 00:01:06,720
We then want to create an alphabet and a shift that version of the alphabet.

16
00:01:08,720 --> 00:01:18,020
So we will say alphabet SQL to string and we want to import string in order to use this so we can do

17
00:01:18,020 --> 00:01:19,310
that just above here.

18
00:01:19,490 --> 00:01:26,520
Import string and we'll say string SCIRI underscore lowercase.

19
00:01:26,630 --> 00:01:30,110
So that's our alphabet and we'll create a shifted version of the alphabet.

20
00:01:31,220 --> 00:01:39,150
And the first half is going to be equal to the normal alphabet starting from the beginning all the way.

21
00:01:39,170 --> 00:01:44,440
The shift index point and then the second half of the alphabet.

22
00:01:45,280 --> 00:01:51,800
Will be the normal off the bits starting from the shift index colon all the way to the end.

23
00:01:52,060 --> 00:02:02,310
Then we will have a shifted alphabet equal to the second half concatenated with the first half.

24
00:02:02,500 --> 00:02:07,030
And so that's basically just taking that and then sticking it back in the front.

25
00:02:07,150 --> 00:02:08,800
And now we have a shift in alphabet.

26
00:02:08,830 --> 00:02:14,470
So now it's time to actually create a for loop that does the translation from the normal plain text

27
00:02:14,470 --> 00:02:16,460
message to the encrypted message.

28
00:02:16,510 --> 00:02:17,580
So we're going to do that here.

29
00:02:17,590 --> 00:02:23,330
We can remove all this comments we'll use enumerates for convenience.

30
00:02:24,110 --> 00:02:31,130
We'll for I come a letter and enumerates text and we're going to lowercase all the text that way we

31
00:02:31,130 --> 00:02:32,830
can do our comparisons.

32
00:02:33,020 --> 00:02:39,380
If the letter is in the normal alphabet which basically indicates that it's not a space we'll do something

33
00:02:39,380 --> 00:02:39,700
here.

34
00:02:39,710 --> 00:02:45,950
So right now pass else we're dealing with punctuation or a space and in that case we'll will say that

35
00:02:45,980 --> 00:02:51,330
our encrypted text list at that index point is just equal to the letter.

36
00:02:51,590 --> 00:02:54,530
So what we're doing here is we have our input text.

37
00:02:54,590 --> 00:03:00,560
That's the actual message so we want to encrypt and we have this encrypted text which essentially just

38
00:03:00,560 --> 00:03:05,080
looks like a list of numbers with the same length as what the text was.

39
00:03:05,240 --> 00:03:12,320
We're going to using the enumerate function go through every single character in this message.

40
00:03:12,320 --> 00:03:18,020
And then if that letter or character is in the alphabet meaning it's an actual letter not just a space

41
00:03:18,020 --> 00:03:18,960
or punctuation.

42
00:03:19,070 --> 00:03:21,460
We're going to do something we still need to figure that out.

43
00:03:21,530 --> 00:03:27,530
Otherwise if it's not in the alphabet that means it's a period or a punctuation or a space or something

44
00:03:27,530 --> 00:03:32,930
else and we'll just keep it that way we'll say encrypted text at that point is equal to that letter

45
00:03:33,750 --> 00:03:38,820
and a better word or a variable name here maybe just character instead of letter.

46
00:03:39,130 --> 00:03:46,120
Now if the letter is in the alphabet we will say the original index position of that letter is equal

47
00:03:46,120 --> 00:03:55,060
to alphabet and we will call the index method and find the letter position and then we can say that

48
00:03:55,060 --> 00:04:01,780
the new letter is equal to shifted alphabet.

49
00:04:02,890 --> 00:04:13,960
From the original index and then my encrypted text index will be equal to that in the letter.

50
00:04:13,980 --> 00:04:16,320
So let's explain the logic here.

51
00:04:16,380 --> 00:04:20,460
We're going through every single lowercase letter in this text.

52
00:04:20,460 --> 00:04:29,340
If that character happens to be in the alphabet meaning something like if a in and then we have ab cd

53
00:04:29,340 --> 00:04:30,130
etc..

54
00:04:30,540 --> 00:04:33,260
So we have all that then we're dealing with actual letter.

55
00:04:33,270 --> 00:04:35,800
If it's not then we just set it to whatever it was.

56
00:04:35,940 --> 00:04:41,640
If it isn't the alphabet then we grab the original index location of that letter in the alphabet.

57
00:04:41,640 --> 00:04:43,820
So for example letter 8 would be zero.

58
00:04:43,830 --> 00:04:47,770
Letter B would be one letter C would be two ops and so on.

59
00:04:48,030 --> 00:04:54,240
And the new letter that's going to be its replacement will be the shifted alphabet at the original index

60
00:04:54,240 --> 00:04:54,860
point.

61
00:04:54,900 --> 00:04:59,910
So then we'll go to the next point location of 0 1 or 2 and then grab whatever that letter happens to

62
00:04:59,910 --> 00:05:03,650
be since we shifted the alphabet by doing that split.

63
00:05:03,990 --> 00:05:12,560
Once we do that we can assign that new letter location and then finally we can just return the encrypted

64
00:05:12,560 --> 00:05:13,720
text.

65
00:05:13,730 --> 00:05:17,120
However if you just return the encrypted text it's actually still a list.

66
00:05:17,120 --> 00:05:26,330
So we can join it together as a string by saying join the encrypted text with no space string.

67
00:05:26,330 --> 00:05:28,430
Let's run this and see if it worked.

68
00:05:29,230 --> 00:05:31,380
So will say get this much as the main server.

69
00:05:31,740 --> 00:05:33,920
And we got the exact same results.

70
00:05:33,930 --> 00:05:39,600
Now it's time to create a decryption function and that's pretty much going to be the exact same thing

71
00:05:39,840 --> 00:05:42,420
except the alphabets will be switched.

72
00:05:42,630 --> 00:05:46,130
So we can actually just copy and paste all the work we did here.

73
00:05:46,410 --> 00:05:52,630
So I will copy this come down and paste it in.

74
00:05:52,680 --> 00:05:59,600
But now all we're doing is instead of using the original index and the alphabet is essentially reversed.

75
00:05:59,640 --> 00:06:05,570
So the index we're going to be using Well we'll just rewrite the lines here.

76
00:06:05,720 --> 00:06:10,670
We'll say if letter in alphabet then we'll find the original index position we'll say index is equal

77
00:06:10,670 --> 00:06:13,470
to shifted alphabet

78
00:06:16,280 --> 00:06:19,340
index at that letter.

79
00:06:20,440 --> 00:06:26,150
Then the original letter is equal to the original alphabet.

80
00:06:27,820 --> 00:06:33,950
At that location and then we will say let's make decrypted text sort of encrypted text.

81
00:06:34,030 --> 00:06:35,230
So let's do this.

82
00:06:36,190 --> 00:06:39,340
Let's say decrypted text.

83
00:06:39,420 --> 00:06:43,520
The point I is equal to the original letter

84
00:06:46,350 --> 00:06:49,470
and then we'll change this appear some sort of encrypted text.

85
00:06:49,560 --> 00:06:53,710
It's decrypted text so decrypt the text.

86
00:06:53,710 --> 00:06:55,390
We still have the same alphabet.

87
00:06:55,390 --> 00:06:59,000
We still have first half second half and the shifted alphabet itself.

88
00:06:59,050 --> 00:07:01,020
We're still doing the same for loop.

89
00:07:01,030 --> 00:07:06,430
The only thing that switched was basically the alphabet order here or start with the alphabet and then

90
00:07:06,430 --> 00:07:09,400
find a location in the original plane alphabet.

91
00:07:09,880 --> 00:07:15,040
And then in case we have punctuation or something we'll just keep the same character or letter there

92
00:07:15,550 --> 00:07:17,440
and then we'll join decrypted text.

93
00:07:17,440 --> 00:07:18,850
So let's run this mixture.

94
00:07:18,880 --> 00:07:23,710
We didn't get any typos and it looks like it was able to decrypt this message get this message to the

95
00:07:23,710 --> 00:07:25,600
main server.

96
00:07:25,900 --> 00:07:31,830
Finally Where's the brute force method which is essentially just printing out every single possibility.

97
00:07:31,990 --> 00:07:36,520
And that's quite easy if we just use our previous Decrypter method will do the following.

98
00:07:36,520 --> 00:07:44,080
We'll say for an in range 26 because those are pretty much all the possible shifts we're going to print

99
00:07:44,740 --> 00:07:49,320
using a shift value of.

100
00:07:49,400 --> 00:07:58,820
And then we'll see that format and we will print prints decrypts the message with that value.

101
00:07:58,820 --> 00:08:03,130
Then and then print the new line.

102
00:08:03,190 --> 00:08:10,060
So if we run that there we can see the brute force values all the values being use the result and you

103
00:08:10,060 --> 00:08:14,440
can scroll down until you find something that you can actually read in English such as this one.

104
00:08:14,440 --> 00:08:17,510
Get this message to the main server.

105
00:08:17,590 --> 00:08:21,670
Ok let's quickly go over the logic of the main encryption decryption function.

106
00:08:21,670 --> 00:08:24,830
One last time to make sure everyone understands it.

107
00:08:26,410 --> 00:08:32,830
So the logic here for encryption was to first create some sort of placeholder here we created a list

108
00:08:33,160 --> 00:08:39,690
that acted as a placeholder so that later on we could inject characters into that list.

109
00:08:39,700 --> 00:08:41,520
So right now it just starts off as numbers.

110
00:08:41,620 --> 00:08:47,530
Then we have our plain alphabet we create or shifted alphabet by grabbing the end and sticking it in

111
00:08:47,530 --> 00:08:55,320
the front based off wherever that Schiff's point was then we say for by letter and enumerate.

112
00:08:55,390 --> 00:09:01,030
And we're going to lowercase all the text that way we can use this lowercase alphabet if that letter

113
00:09:01,060 --> 00:09:06,850
characters in the alphabet we're going to find that letters location in the location in the original

114
00:09:06,850 --> 00:09:07,550
alphabet.

115
00:09:07,690 --> 00:09:09,630
Save that original index.

116
00:09:09,670 --> 00:09:15,210
Then once we know that original index location we will find out in the shift that alphabet.

117
00:09:15,250 --> 00:09:16,780
What new letter that is.

118
00:09:16,840 --> 00:09:22,720
So pass that original index into the shift in alphabet index off the new letter and then inside of our

119
00:09:22,720 --> 00:09:26,080
encrypted texts we replace that actual index location.

120
00:09:26,120 --> 00:09:28,050
I with the new letter.

121
00:09:28,510 --> 00:09:32,380
If it wasn't in the alphabet we just encrypt that with the current existing letter.

122
00:09:32,530 --> 00:09:36,930
Then we join it all together to get back some sort of string output.

123
00:09:36,930 --> 00:09:37,640
All right.

124
00:09:37,920 --> 00:09:38,610
Excellent work.

125
00:09:38,620 --> 00:09:40,680
Agent We'll see you at the next lesson.

