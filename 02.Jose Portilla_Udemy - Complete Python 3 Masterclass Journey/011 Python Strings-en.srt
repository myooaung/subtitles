1
00:00:00,670 --> 00:00:06,010
Welcome to your next lesson in the basics of Python today we're going to discuss another basic data

2
00:00:06,010 --> 00:00:12,870
type which is strings strings are an ordered sequence of characters enclosed of either single or double

3
00:00:12,870 --> 00:00:13,600
quotes.

4
00:00:13,620 --> 00:00:17,700
Here you can see two examples strings one of double quotes one with single quotes.

5
00:00:17,910 --> 00:00:24,390
Since strings are ordered we can use indexing to treat individual characters or slicing to retrieve

6
00:00:24,420 --> 00:00:26,560
a subsection of the original string.

7
00:00:28,330 --> 00:00:33,670
When we're saying the word ordered that means there's actually a numerical index that relates to the

8
00:00:33,670 --> 00:00:40,090
position of every character and the actions of indexing and slicing use square brackets which will see

9
00:00:40,090 --> 00:00:42,130
many examples of later on.

10
00:00:42,250 --> 00:00:48,490
But here we can see an example string with characters H E L L O for the string hello and the corresponding

11
00:00:48,580 --> 00:00:50,670
index and Python starts at zero.

12
00:00:50,770 --> 00:00:56,230
Meaning that you can use indexing at 0 to grab the letter H indexing at 1 to grab the single letter

13
00:00:56,260 --> 00:01:00,040
E 2 for the first l 3 for the second L etc..

14
00:01:00,340 --> 00:01:03,730
And Python also supports reverse indexing.

15
00:01:03,730 --> 00:01:07,710
That is you could do the reverse and starting from zero.

16
00:01:07,840 --> 00:01:13,690
H go backwards in the string so that the very last character first to negative one the second to last

17
00:01:13,690 --> 00:01:17,230
character first and maybe two thirds less character negative three.

18
00:01:17,290 --> 00:01:24,010
And so on reverse indexing is useful for when you don't know how large your string is and you want to

19
00:01:24,010 --> 00:01:28,660
grab subsections of it or the last character of it at the very end.

20
00:01:28,860 --> 00:01:30,860
There you can use reverse indexing.

21
00:01:30,970 --> 00:01:33,790
And that way you don't need to know the full size of the string.

22
00:01:33,820 --> 00:01:39,540
You can just intuitively start from the end of the string and work backwards using negative numbers.

23
00:01:39,640 --> 00:01:44,410
We'll see other examples of this later on first slice notation.

24
00:01:44,430 --> 00:01:51,780
It also uses square brackets and it uses the format start colon stop colon step where step is actually

25
00:01:51,840 --> 00:01:55,470
optional start is a numerical index for the slice.

26
00:01:55,480 --> 00:02:02,340
Start stop is the index you will go up to B actually don't include that stop index and we'll see an

27
00:02:02,340 --> 00:02:07,310
example of that later on and step is how large of a jump to make between characters.

28
00:02:07,640 --> 00:02:12,650
OK we've discussed the basics so far but it's going to make a lot more sense in practice.

29
00:02:12,780 --> 00:02:16,420
Let's connect to a Jupiter notebook and see how this is all done with Python.

30
00:02:20,030 --> 00:02:20,320
OK.

31
00:02:20,320 --> 00:02:24,290
Here we are a notebook before we actually type out our first string.

32
00:02:24,290 --> 00:02:30,770
I want to remind you that for comments you can use a hash tag and then type in whatever you want and

33
00:02:30,760 --> 00:02:31,680
this is a comment.

34
00:02:31,710 --> 00:02:36,800
And if I run this nothing is going to show up and no code in a comment will actually run.

35
00:02:37,040 --> 00:02:41,420
So you can do one plus one here run this and you're not going to see any results anything with that

36
00:02:41,420 --> 00:02:44,000
hash tag in front of it is going to get ignored.

37
00:02:44,930 --> 00:02:49,240
Ok now discuss strings so hello.

38
00:02:49,350 --> 00:02:56,080
We hear we have a string with single quotes and we can also define a string with double quotes.

39
00:02:56,080 --> 00:02:57,690
Now there may be potential errors.

40
00:02:57,700 --> 00:03:02,500
For example imagine we're trying to create a string of single quotes and the string itself contains

41
00:03:02,500 --> 00:03:06,250
a single quote such as I'm not a spy

42
00:03:09,100 --> 00:03:14,860
here we can see we try to enclose this string in single quotes but the problem is the string already

43
00:03:14,860 --> 00:03:16,970
has a single quote in sight of it.

44
00:03:17,020 --> 00:03:21,610
So there's a potential error here because Python is getting confused as where the start and where the

45
00:03:21,610 --> 00:03:23,520
stop of the string should be.

46
00:03:23,980 --> 00:03:26,460
So if you have this it will report back an error.

47
00:03:26,500 --> 00:03:31,750
Invalid syntax because it prematurely ended that string in order to avoid this.

48
00:03:31,840 --> 00:03:35,990
Try to use another set of quotes to capture the inside single quote.

49
00:03:36,310 --> 00:03:37,520
So if we're trying to make.

50
00:03:37,540 --> 00:03:44,470
I'm not a spy a viable string will use double quotes to basically encapsulate that single quote.

51
00:03:44,530 --> 00:03:49,390
And here I can see that the syntax coloring is also indicating that this is now a functional string

52
00:03:49,650 --> 00:03:52,720
and I can see I'm not a spy.

53
00:03:52,720 --> 00:03:58,330
Now let's discuss the basic printing of strings in the Jupiter notebook for this particular environment.

54
00:03:58,510 --> 00:04:02,170
A single string in a cell is automatically returned the back.

55
00:04:02,170 --> 00:04:07,270
However this is actually different than printing a string printing a string allows us to have multiple

56
00:04:07,330 --> 00:04:08,160
outputs.

57
00:04:08,400 --> 00:04:10,690
Let's work through some basic examples.

58
00:04:10,840 --> 00:04:16,210
And as a quick note if your running this code in a dot PI file and you're running your script so your

59
00:04:16,210 --> 00:04:21,610
command line if you just have a single string nothing is going to be output when you run your script

60
00:04:21,730 --> 00:04:24,670
unless you use a print statement.

61
00:04:24,900 --> 00:04:27,640
So let me show you what is peculiar about the notebook.

62
00:04:27,660 --> 00:04:31,320
Let's say I have two strings one in two on separate lines.

63
00:04:31,380 --> 00:04:36,930
If I run this it only actually returns back the last string and in that PI scripts you actually won't

64
00:04:36,930 --> 00:04:38,340
get anything back.

65
00:04:38,370 --> 00:04:42,900
So if you want to see results you should really be printing them out using the prince function and the

66
00:04:42,900 --> 00:04:48,750
print function is just print open close parentheses and then whatever variable or string you want to

67
00:04:48,750 --> 00:04:50,420
print inside there.

68
00:04:50,430 --> 00:04:56,550
So now let's say print 1 and I get back 1 and notice the difference here that the notebook is indicating

69
00:04:56,550 --> 00:04:58,410
that you printed something out.

70
00:04:58,410 --> 00:05:02,250
Previously we saw that the output set out and then the actual string.

71
00:05:02,250 --> 00:05:04,020
Now we're printing something out.

72
00:05:04,020 --> 00:05:06,220
We just see the string message displayed.

73
00:05:06,240 --> 00:05:09,150
We no longer see the quotes and we no longer see the output.

74
00:05:09,330 --> 00:05:13,790
And you'll see a similar result if you're running a PI script you'll just see your output.

75
00:05:14,250 --> 00:05:20,420
And if we want to run or print more than one string I can now say prints 1 print to run this.

76
00:05:20,490 --> 00:05:22,790
And now I can see both results.

77
00:05:22,800 --> 00:05:29,460
There's also special characters or escape codes that Python and most programming languages use.

78
00:05:29,520 --> 00:05:36,470
Let's say we wanted to create a new line so I had hello.

79
00:05:36,690 --> 00:05:41,020
I want this in two lines period.

80
00:05:41,400 --> 00:05:49,160
Well if I run this I see this all in one line and I can actually create this with two lines by using

81
00:05:49,160 --> 00:05:54,260
a special character and we use a backslash in space.

82
00:05:54,260 --> 00:05:57,350
And what this does is this indicates a new line.

83
00:05:57,350 --> 00:06:03,440
So now when I run this I get a new line break and then the rest of the string in this case the rest

84
00:06:03,440 --> 00:06:05,670
of the string Sarto for space.

85
00:06:05,690 --> 00:06:11,510
So if I actually wanted it to have kind of the same indentation I could run this in I can see I've gotten

86
00:06:11,510 --> 00:06:12,690
rid of the space.

87
00:06:12,800 --> 00:06:20,380
The backslash tells Python ignored this and it's basically a special indicator that we want a new line.

88
00:06:20,390 --> 00:06:25,220
There's lots of little special Escape codes for this and we'll discuss this later on especially when

89
00:06:25,220 --> 00:06:28,010
we talk about things like regular expressions.

90
00:06:28,010 --> 00:06:34,460
But in one you should be aware of is backslash T and this in the case a tab essentially four spaces

91
00:06:35,710 --> 00:06:39,130
all right now let's discuss indexing and slicing.

92
00:06:39,310 --> 00:06:44,740
Recall that strings are ordered sequences of characters and that means we can actually grab single characters

93
00:06:44,800 --> 00:06:47,050
using indexing.

94
00:06:47,050 --> 00:06:54,780
Let's create a variable called a word and we will assign that the string hello.

95
00:06:55,270 --> 00:07:00,520
And now I can't say a word is hello and I can use bracket notation.

96
00:07:00,520 --> 00:07:05,620
That is these square brackets to actually index individual characters off of this.

97
00:07:05,620 --> 00:07:10,860
That means if I wanted to grab just a single string or STINGEL character H I could say zero.

98
00:07:11,170 --> 00:07:12,340
And then I get back.

99
00:07:12,340 --> 00:07:24,340
H if I wanted to grab the last o I could either count 0 1 2 3 4 and pass and 4 and I get back that last.

100
00:07:24,350 --> 00:07:24,830
Oh.

101
00:07:25,060 --> 00:07:32,230
Or I can actually use reverse indexing such as negative 1 and that grabs that last chunk of the sequence

102
00:07:32,270 --> 00:07:34,210
as we previously discussed.

103
00:07:34,270 --> 00:07:36,080
That's the basis of indexing.

104
00:07:36,150 --> 00:07:42,400
Square Brecken notation and you pasan a single index location in returns back whatever letter or character

105
00:07:42,760 --> 00:07:45,350
is at that location.

106
00:07:45,490 --> 00:07:51,600
Next let's discuss slicing and that's where you can actually grab an entire subsection of a string.

107
00:07:51,610 --> 00:07:53,680
Let's create another example string.

108
00:07:53,680 --> 00:08:01,550
We'll call this example Alpha for alphabet and it's going to be a b c d e f that way we can tell that

109
00:08:01,550 --> 00:08:04,160
there is a distinct order to this.

110
00:08:04,580 --> 00:08:12,260
If I want to grab a subsection of this string for example let's say I want to grab a b and c what I

111
00:08:12,260 --> 00:08:17,890
do is I indicate my starting index my starting index here is going to be at zero.

112
00:08:17,930 --> 00:08:23,310
So I will say 0 then I will say Colan up to the last index.

113
00:08:23,360 --> 00:08:26,770
And this is where it gets a little tricky and a lot of recruits have trouble.

114
00:08:26,780 --> 00:08:35,270
This particular step you may think that you only need to say 0 1 2 in order to grab ABC but the way

115
00:08:35,270 --> 00:08:43,680
Python works you actually are going to say up to index three here and then we can get ABC.

116
00:08:44,030 --> 00:08:48,490
And I know that can be a little confusing because we just mentioned that indexing starts at zero.

117
00:08:48,710 --> 00:08:56,540
So it's actually going on with this command here is we're saying start at 0 and go up to index 3 and

118
00:08:56,540 --> 00:08:59,420
buy up to they mean go up to it but don't include it.

119
00:08:59,450 --> 00:09:02,300
That means we get 0 1 2.

120
00:09:02,330 --> 00:09:05,550
So we go up to D but we don't include the.

121
00:09:05,630 --> 00:09:10,160
And that's why for slice notation it can be a little tricky at first to kind of wrap your head around

122
00:09:10,460 --> 00:09:16,580
this zero indexing and going up to but not including what's a little strange about it is that the starting

123
00:09:16,580 --> 00:09:19,900
index always includes that value at the index.

124
00:09:19,910 --> 00:09:22,870
However for the stop index it doesn't include that value.

125
00:09:22,880 --> 00:09:27,730
It goes up to it let's try to do a little more practice here.

126
00:09:27,820 --> 00:09:30,660
Let's say we want to grab just the letters C and D.

127
00:09:31,150 --> 00:09:34,180
So I'm going to start index 0 1 2.

128
00:09:34,210 --> 00:09:35,220
So that's where da.

129
00:09:35,220 --> 00:09:37,270
Or C is we'll say two.

130
00:09:37,600 --> 00:09:39,470
And then I want to grab D.

131
00:09:39,640 --> 00:09:43,020
So I want to go up to but not include character.

132
00:09:43,080 --> 00:09:47,060
So that's going to be 0 1 2 3 4.

133
00:09:47,140 --> 00:09:53,020
So we will pass and for run that and that's how I can get back CD for practice.

134
00:09:53,020 --> 00:09:58,740
Try to create other subsections of alpha and see if you can do slice notation to grab them.

135
00:09:58,780 --> 00:10:06,070
You can even make alpha longer Finally I wanted to know some special versions of slicing where you don't

136
00:10:06,160 --> 00:10:12,130
indicate a start or a stop if you want to just grab everything all the way to the end of a string.

137
00:10:12,130 --> 00:10:14,390
You can set your starting index position.

138
00:10:14,500 --> 00:10:18,730
Let's say two for the letter C and I want to grab everything all the way to the end.

139
00:10:18,760 --> 00:10:24,570
I can just say colon and it will grab everything starting at index 2 all the way to the end.

140
00:10:24,580 --> 00:10:31,510
Similarly I can do the same thing by saying colon start at the beginning and go all the way up to but

141
00:10:31,510 --> 00:10:37,360
not including a particular exposition so colon 2 is going to start at the very beginning of the string

142
00:10:37,660 --> 00:10:43,900
and go up to benot including index to basically returning back the characters at 0 and 1 which is a

143
00:10:43,960 --> 00:10:45,050
and b.

144
00:10:45,160 --> 00:10:47,590
Those are the basics of slicing notation.

145
00:10:47,770 --> 00:10:54,430
And finally we can actually use the step to indicate how big of a jump we want to make from character

146
00:10:54,430 --> 00:10:55,140
to character.

147
00:10:55,210 --> 00:10:57,320
By default the step size is one.

148
00:10:57,520 --> 00:11:02,990
But you can adjust it with a third parameter in the slice notation.

149
00:11:03,040 --> 00:11:10,420
So if we take a look at Alpha is again let's say I wanted to grab everything from index 0 all the way

150
00:11:10,420 --> 00:11:11,970
up to the very end.

151
00:11:11,980 --> 00:11:14,560
But I wanted to do it in step size of two.

152
00:11:14,560 --> 00:11:20,980
So I wanted to skip every other letter so go from a take a jump of two steps to grab C take a jump of

153
00:11:20,980 --> 00:11:23,640
two steps to grab e to do that.

154
00:11:23,680 --> 00:11:30,070
I can say Alpha my starting position my stop position and then my step size.

155
00:11:30,160 --> 00:11:36,280
So if I say step size of 2 it returns back to straight A's because it's essentially grabbing every other

156
00:11:36,400 --> 00:11:36,880
letter.

157
00:11:36,880 --> 00:11:43,870
So it goes from a takes a jump of to script C takes a jump of Toot's grab E and that's start stop and

158
00:11:43,870 --> 00:11:45,520
step size for slice notation.

159
00:11:45,700 --> 00:11:48,930
Now let's move on to discussing basic string methods.

160
00:11:49,060 --> 00:11:54,670
Methods are essentially actions that you can call off an object and they're usually in the form dots

161
00:11:54,730 --> 00:11:56,530
or period and method name.

162
00:11:56,530 --> 00:11:58,490
Open and close parentheses.

163
00:11:58,540 --> 00:12:01,130
Let's go ahead and explore these just a little further.

164
00:12:02,150 --> 00:12:10,730
I'm going to create a basic string will say hello world run that cell makes you run that cell that way.

165
00:12:10,730 --> 00:12:12,400
Basic has been defined.

166
00:12:12,750 --> 00:12:13,820
So I checked basic.

167
00:12:13,820 --> 00:12:16,120
It's now defined as a string.

168
00:12:16,210 --> 00:12:18,500
I can say basic dots.

169
00:12:18,550 --> 00:12:24,940
And then your Jupiter notebook hit tab here and you'll notice a list of methods and also attributes

170
00:12:24,940 --> 00:12:32,830
which we'll discuss later on but basic methods allow you to affect or change the variable itself.

171
00:12:32,860 --> 00:12:34,260
Some of them are in place.

172
00:12:34,270 --> 00:12:35,880
Some of them are not in place.

173
00:12:36,010 --> 00:12:40,900
And what I mean by in place is that some of them permanently affect the variable itself.

174
00:12:40,900 --> 00:12:46,860
Others just show you and return a version of it that you would need to save to another variable.

175
00:12:46,870 --> 00:12:52,760
Let's start off with one of the basic methods we can do which is the upper and then we have open enclose

176
00:12:52,800 --> 00:12:59,050
princess here and if we run this you'll notice back it returns uppercase version of the string.

177
00:12:59,080 --> 00:13:00,550
So hello world.

178
00:13:00,550 --> 00:13:07,390
However this is actually not in place meaning that if I check basic again the change is not permanent.

179
00:13:07,420 --> 00:13:13,810
If I wanted the change to happen I could create some new variable and then set that equal to a basic

180
00:13:14,730 --> 00:13:21,310
dot upper open close princes and then that new variable would be hello world in if I wanted the change

181
00:13:21,310 --> 00:13:25,800
to be permanent then instead of just saying variable I would reassign basic itself.

182
00:13:25,810 --> 00:13:30,500
But I'm not going to do that because we still want to play around with basic a little further.

183
00:13:30,580 --> 00:13:32,130
So if I check basic it's still.

184
00:13:32,140 --> 00:13:33,480
Hello world.

185
00:13:33,490 --> 00:13:40,280
There's other methods such as the lower open close parentheses and it will lowercase everything.

186
00:13:40,330 --> 00:13:45,760
We can also do something called split and this is a very common method and it's going to lead us into

187
00:13:45,760 --> 00:13:51,340
our next lesson where split splits on a particular string.

188
00:13:51,730 --> 00:13:59,090
So are a particular character or sequence of characters by default it splits the string on spaces.

189
00:13:59,200 --> 00:14:05,830
So in hello world there's a space here and it returns back what's known as a list of all the characters

190
00:14:05,830 --> 00:14:08,310
that were separated by a space.

191
00:14:08,320 --> 00:14:09,840
We'll discuss this later on.

192
00:14:09,850 --> 00:14:12,670
But I want to show you just one more basic example here.

193
00:14:12,670 --> 00:14:19,630
So if I said basic splits and I wanted to split on all the shows all the O's get removed from the string

194
00:14:19,870 --> 00:14:24,730
and you get back everything that was in between those O's including spaces here.

195
00:14:24,770 --> 00:14:26,230
OK so that's that split.

196
00:14:26,230 --> 00:14:33,150
It's a useful method and it returns back a list and the string is split on whatever character you define.

197
00:14:33,160 --> 00:14:36,160
And if you don't define anything by default it's a space.

198
00:14:36,310 --> 00:14:38,740
We're going to discuss what lists are later on.

199
00:14:38,740 --> 00:14:42,640
So keep this in the back of your mind for the lesson on lists.

200
00:14:43,120 --> 00:14:43,670
OK.

201
00:14:43,810 --> 00:14:49,150
That's all I want to talk about for now as far as basic methods as a quick note if you accidentally

202
00:14:49,150 --> 00:14:54,760
do something like this basic thought split and you forget those open and close print CS you'll get back

203
00:14:54,760 --> 00:14:57,820
something that says O function as TR split.

204
00:14:57,820 --> 00:15:02,120
That means you haven't actually called the function to execute or the method to execute.

205
00:15:02,170 --> 00:15:07,000
It means that you have just asked what is this and Python returns back.

206
00:15:07,000 --> 00:15:12,030
This is a function string split will discuss functions and methods.

207
00:15:12,070 --> 00:15:15,760
A lot further in detail we discussed object oriented programming.

208
00:15:15,970 --> 00:15:19,330
For now just keep in mind that variables once are the fine.

209
00:15:19,360 --> 00:15:25,060
You hit a dot right after them there's going to be a list of methods and attributes available to you.

210
00:15:25,060 --> 00:15:26,520
Finally let's quickly discuss.

211
00:15:26,560 --> 00:15:27,750
Print formatting.

212
00:15:28,090 --> 00:15:33,040
And there's a format method off of a string have already seen the split method in the lower method.

213
00:15:33,160 --> 00:15:37,930
There's a doc format method that allows you to perform what is formally known as string and interpolation

214
00:15:38,230 --> 00:15:41,910
which is essentially inserting variables when printing out a string.

215
00:15:42,250 --> 00:15:48,010
Let's imagine that I have a user name variable and we call this recruits.

216
00:15:48,010 --> 00:15:56,240
I have an action variable called just the string run and I want to say the recruit runs.

217
00:15:56,440 --> 00:15:58,830
Well unfortunately I can't just do something like this.

218
00:15:58,840 --> 00:16:06,240
I cannot say the user name action otherwise I literally get out the user name action.

219
00:16:06,400 --> 00:16:12,760
But we want to do is insert not these strings but these actual variables and the values they hold.

220
00:16:12,760 --> 00:16:16,030
The way we can do that is with the DOT format method.

221
00:16:16,030 --> 00:16:20,380
So the simple way of doing this is we have curly braces here.

222
00:16:20,400 --> 00:16:26,330
So note that these are curly braces and then immediately after the string we call the format method.

223
00:16:26,540 --> 00:16:32,530
Open and close parentheses and then we pass in the variable that we want to insert inside where these

224
00:16:32,530 --> 00:16:33,900
curly braces are.

225
00:16:34,120 --> 00:16:39,210
So I can say that user name variable run that and I see the recruit.

226
00:16:39,220 --> 00:16:43,510
Now let's say I want to print out the recruit needs to run.

227
00:16:43,510 --> 00:16:51,850
I can say the curly braces needs to another set of curly braces and I'll just passen these in order

228
00:16:52,180 --> 00:16:53,110
as expected.

229
00:16:53,230 --> 00:16:59,540
So the username and then needs to action.

230
00:16:59,730 --> 00:17:05,790
We run this and we see that it's injecting in order the user name so the first thing and form it goes

231
00:17:05,790 --> 00:17:07,370
to the first curly braces.

232
00:17:07,380 --> 00:17:11,400
The second thing format goes to the next set of curly braces.

233
00:17:11,400 --> 00:17:18,390
However Python allows for even more flexibility by allowing you to define some parameter names inside

234
00:17:18,390 --> 00:17:22,320
a format and then defining those inside of the curly braces.

235
00:17:22,320 --> 00:17:25,050
Let me show you an example of that instead of format.

236
00:17:25,050 --> 00:17:30,370
I'm going to say A is equal to user name and B is equal to action.

237
00:17:30,570 --> 00:17:37,950
And then I will say A and B here and then when I run this will happen as format sees that these curly

238
00:17:37,950 --> 00:17:43,740
braces asking for whatever parameter is then it looks here and it says well is equal to user names so

239
00:17:43,740 --> 00:17:47,610
I'm going to grab whatever user name is and then inject in here.

240
00:17:47,610 --> 00:17:52,770
What's nice about this is then I can quickly adjust my string without needing to adjust the order of

241
00:17:52,770 --> 00:17:55,610
what's in my format so I could say something like.

242
00:17:55,890 --> 00:18:03,910
The run needs to run or I can say do the reverse here B and then a.

243
00:18:03,910 --> 00:18:06,620
Here the run needs to recruit etc..

244
00:18:06,810 --> 00:18:11,830
So this is a more flexible way of quickly injecting variables into your string.

245
00:18:11,910 --> 00:18:14,530
And this is known as print formatting.

246
00:18:14,550 --> 00:18:17,420
There's also special cases such as formatting numbers.

247
00:18:17,430 --> 00:18:23,140
Let's imagine you have a number of very large floating point number such as one two three point six

248
00:18:23,160 --> 00:18:24,260
seventy nine.

249
00:18:24,780 --> 00:18:26,540
And we wanted to print this out.

250
00:18:26,550 --> 00:18:31,800
Well I could say the code is curly braces.

251
00:18:32,080 --> 00:18:34,060
Then say that format.

252
00:18:34,810 --> 00:18:38,890
Run that and it prints back the entire number for floating point numbers.

253
00:18:38,890 --> 00:18:40,440
You can actually format them.

254
00:18:40,570 --> 00:18:48,160
If you don't want all the significant digits past the decimal point the way you can ask for only a particular

255
00:18:48,160 --> 00:18:51,510
number of significant digits is through the following syntax you say.

256
00:18:51,520 --> 00:19:00,620
Inside this curly braces colon dots then the number of decimals you want off of these decimal places

257
00:19:00,830 --> 00:19:02,960
or number of numbers will often decimal place.

258
00:19:03,050 --> 00:19:06,100
So I will say that one and then you say F..

259
00:19:06,200 --> 00:19:10,690
Run that and now it's going to round off to one place after the decimal.

260
00:19:10,850 --> 00:19:15,050
Let's say I want to round off to two places after That's more than I just change this number two to

261
00:19:15,650 --> 00:19:17,220
four 3.

262
00:19:17,240 --> 00:19:18,340
I just changed it to three.

263
00:19:18,380 --> 00:19:19,530
And if you say 4.

264
00:19:19,550 --> 00:19:23,040
Well basically nothing is going to change there etc..

265
00:19:23,090 --> 00:19:25,910
And if you just want it to round to the nearest whole number you could do.

266
00:19:25,920 --> 00:19:29,730
You could say zero here and it's going to rounded to the nearest whole number.

267
00:19:29,750 --> 00:19:31,330
That's the way you can numbers.

268
00:19:31,460 --> 00:19:34,420
Again with this prince formatting mechanism.

269
00:19:34,780 --> 00:19:37,060
OK those are the basics of strings.

270
00:19:37,130 --> 00:19:39,530
We've already touched a little bit upon list.

271
00:19:39,680 --> 00:19:42,050
Let's go ahead and discuss them in your next lesson.

272
00:19:42,050 --> 00:19:42,860
I'll see you there recruit.

