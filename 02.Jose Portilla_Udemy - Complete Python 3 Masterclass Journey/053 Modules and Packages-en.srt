1
00:00:00,950 --> 00:00:01,820
Welcome back.

2
00:00:01,820 --> 00:00:09,380
Let's now discuss modules and packages a module is a file that can be imported under one single import

3
00:00:09,410 --> 00:00:13,980
command such as import space and then the name of the module.

4
00:00:14,120 --> 00:00:16,200
In this example we call that my module.

5
00:00:16,220 --> 00:00:21,940
So that's a single my module py file that's somewhere next to your script.

6
00:00:22,250 --> 00:00:27,650
A package is a collection of modules in directories that give a package hierarchy.

7
00:00:27,740 --> 00:00:28,790
So that would look something like.

8
00:00:28,790 --> 00:00:29,970
From my package.

9
00:00:30,110 --> 00:00:33,620
Some other file import some function from that file.

10
00:00:35,180 --> 00:00:41,210
To install publicly available modules or libraries you can use the pip install system at your command

11
00:00:41,210 --> 00:00:41,600
line.

12
00:00:41,750 --> 00:00:47,150
You can type Pipp install and then the name of the library you're trying to install and this will install

13
00:00:47,150 --> 00:00:51,440
the library requested as long as you have an internet connection and don't have a firewall blocking

14
00:00:51,440 --> 00:00:52,460
the connection.

15
00:00:52,460 --> 00:00:56,600
This is operated using the pie pie system or a p y p.

16
00:00:56,930 --> 00:01:02,750
So that Pipp install is basically going to connect to the Internet and download the package to your

17
00:01:02,750 --> 00:01:03,410
computer.

18
00:01:05,160 --> 00:01:09,350
We've already imported some built in modules and packages such as the random library.

19
00:01:09,420 --> 00:01:14,130
Let's now explore how we can format files to create our own modules to do this.

20
00:01:14,130 --> 00:01:19,440
We're going to switch over to using a text editor to create a postscript instead of using a notebook.

21
00:01:19,440 --> 00:01:20,330
Let's get started.

22
00:01:20,530 --> 00:01:27,120
All right here I've opened up the Sublime Text Editor and I've opened up to Untitled files.

23
00:01:27,120 --> 00:01:28,920
Let me save these files.

24
00:01:28,920 --> 00:01:37,840
The first one I'm going to save my module PI and make sure you have this all files extension selected.

25
00:01:38,010 --> 00:01:43,160
Otherwise you may accidentally save it as my module up high that text and then click save.

26
00:01:43,350 --> 00:01:48,690
So now this is a PI script meaning I should expect to see some syntax highlighting if I begin to say

27
00:01:48,860 --> 00:01:49,370
print.

28
00:01:49,380 --> 00:01:50,220
Hello.

29
00:01:50,220 --> 00:01:51,860
So that looks like it's working.

30
00:01:52,020 --> 00:01:55,580
And the next one I'm going to save as my program the PI.

31
00:01:55,620 --> 00:01:56,540
So let's do that as well.

32
00:01:56,540 --> 00:02:05,740
We will say Save As and we will say my program that pi and then enter to save that.

33
00:02:05,770 --> 00:02:10,930
So we're going to do is we're going to create a module which essentially just another dot PI script

34
00:02:10,930 --> 00:02:13,700
in the same directory as this my program that pi.

35
00:02:13,870 --> 00:02:17,950
And we're going to create a function in it and show you the different ways you could import it in your

36
00:02:17,950 --> 00:02:18,970
program.

37
00:02:18,970 --> 00:02:23,990
So first select my module that pi and let's create a function in it.

38
00:02:24,010 --> 00:02:33,010
Will say f and we'll say phunk in my module and it's just going to be a very simple function is going

39
00:02:33,010 --> 00:02:34,410
to do a print.

40
00:02:34,540 --> 00:02:39,200
I am a function inside of my module.

41
00:02:39,230 --> 00:02:47,390
PI make sure you save that now it's explore importing my module in this other file my program that pi

42
00:02:48,050 --> 00:02:55,970
and you can do this is we can say import my module and then we'll say my module dot and we should be

43
00:02:55,970 --> 00:02:57,560
able to call that function itself.

44
00:02:57,560 --> 00:03:05,000
I'll say my module that phunk And let's recall what it was describing as funk in my modules.

45
00:03:05,000 --> 00:03:06,330
So let's read that as well.

46
00:03:06,350 --> 00:03:11,670
Phunk in mind module open close parentheses.

47
00:03:11,750 --> 00:03:17,520
I'm going to now save this and let's run the script at the command line and see what the result is.

48
00:03:17,550 --> 00:03:23,720
I will now CD or change directory to ice where I save these files which was under my documents folder

49
00:03:23,780 --> 00:03:27,980
and then CD into a python scripts folder.

50
00:03:28,370 --> 00:03:36,740
And this is where I saved this file so now let's say Python and say My program that PI hit enter.

51
00:03:36,780 --> 00:03:39,900
And now I see I am a function inside my module that pi.

52
00:03:40,050 --> 00:03:46,770
So I know how from inside my program that pi I was able to successfully import my module and then run

53
00:03:46,770 --> 00:03:47,600
that function.

54
00:03:47,790 --> 00:03:51,110
So that's one way you can actually import a module.

55
00:03:51,360 --> 00:03:55,620
Now notice here we're importing the module and then calling specific functions off of it.

56
00:03:56,730 --> 00:04:02,820
If my module is a really long name what you can do is say import my module as and then have some sort

57
00:04:02,820 --> 00:04:07,640
of alias for it such as M M and you'll see this commonly used with other modules.

58
00:04:07,640 --> 00:04:12,390
They usually have some sort of convention as a shortened form that we don't need to write my module

59
00:04:12,390 --> 00:04:17,040
all the time and said we can just write m m dot and then the name of the function you want to call off

60
00:04:17,040 --> 00:04:17,500
of it.

61
00:04:17,760 --> 00:04:21,380
And if you say this and run it will bring back the exact same result.

62
00:04:21,420 --> 00:04:24,450
Again this is using an alias for this name.

63
00:04:24,450 --> 00:04:25,530
So it's a import.

64
00:04:25,620 --> 00:04:27,230
The name of the module as.

65
00:04:27,360 --> 00:04:29,930
And then the name you want imported US.

66
00:04:29,940 --> 00:04:34,900
Now let's imagine that you only actually want to use one function from this my module.

67
00:04:35,100 --> 00:04:40,140
So if this my module that PI script had hundreds of functions in it and we only really needed to use

68
00:04:40,140 --> 00:04:46,830
one of them instead of importing the entire library as something what we can do is the following syntax.

69
00:04:46,830 --> 00:04:55,140
We can say from my module import and then the specific name of the function you want to import that

70
00:04:55,150 --> 00:04:57,580
can say func in my module.

71
00:04:57,580 --> 00:05:01,180
And if you have multiple imports you can just separate them out by commas.

72
00:05:01,180 --> 00:05:07,360
So this could be another func and then you know function number three etc. but since we only have one

73
00:05:07,360 --> 00:05:11,290
function we'll just say from module import funkin module.

74
00:05:11,320 --> 00:05:16,450
And when you want to use it somewhere in your script all you do is call your function module as such.

75
00:05:16,450 --> 00:05:22,390
So this allows you to not even worry about having to write my module or M as an alias because you only

76
00:05:22,390 --> 00:05:26,740
imported the functions that you intend to use and you can see here it's telling you it's coming from

77
00:05:26,740 --> 00:05:27,840
my module.

78
00:05:27,920 --> 00:05:28,780
Py.

79
00:05:28,990 --> 00:05:31,340
That's it for the basics of modules of Python.

80
00:05:31,630 --> 00:05:36,550
As you get more interested in coding and your scripts get larger and larger you're going to be able

81
00:05:36,550 --> 00:05:42,280
to separate your code into multiple Paice scripts and that will help you compartmentalize the actual

82
00:05:42,280 --> 00:05:47,260
sections of code for different functionality as well as just keep clean organized sections that are

83
00:05:47,290 --> 00:05:48,260
easier to read.

84
00:05:48,400 --> 00:05:54,610
Instead of having one giant thousands of line files you can have several files that have those lines

85
00:05:54,640 --> 00:05:57,950
separated out excellent work so far.

86
00:05:57,950 --> 00:05:59,020
We'll see you at the next lesson.

