WEBVTT
1
00:00:00.140 --> 00:00:01.320
In this section,

2
00:00:01.320 --> 00:00:05.810
we're going to review how to use Spring Integration's HTTP outbound channel

3
00:00:05.810 --> 00:00:10.280
adapters and gateways to execute RESTful web service calls.

4
00:00:10.280 --> 00:00:14.890
We're fortunate because HTTP outbound channel adapters and

5
00:00:14.890 --> 00:00:18.240
outbound gateways are implemented by the same class.

6
00:00:18.240 --> 00:00:24.660
The HTTP outbound channel adaptor is implemented by the HttpRequestExecuting

7
00:00:24.660 --> 00:00:29.480
message handler with an expectReply value set to false,

8
00:00:29.480 --> 00:00:35.810
and the HTTP outbound gateway is implemented by the HttpRequestExecuting

9
00:00:35.810 --> 00:00:39.980
message handler with an expectReply value set to true.

10
00:00:39.980 --> 00:00:45.040
As we've seen with other outbound components, this is a message handler.

11
00:00:45.040 --> 00:00:49.510
So we'll be annotating our bean with a service activator that invokes

12
00:00:49.510 --> 00:00:52.840
it when a message arrives on a specified channel.

13
00:00:52.840 --> 00:00:56.270
Creating an outbound channel adapter is pretty straightforward.

14
00:00:56.270 --> 00:00:59.410
We create a message handler bean annotated with a

15
00:00:59.410 --> 00:01:02.700
ServiceActivator listening on a specified input channel.

16
00:01:02.700 --> 00:01:06.850
We create an HttpRequestExecuting MessageHandler,

17
00:01:06.850 --> 00:01:09.840
passing it the URL of a RESTful resource.

18
00:01:09.840 --> 00:01:16.340
Then we define the HTTP method or verb that we want to invoke on that service.

19
00:01:16.340 --> 00:01:20.550
And finally, we set the expectReply value to false.

20
00:01:20.550 --> 00:01:25.610
When this handler receives a message, it will extract the message's payload,

21
00:01:25.610 --> 00:01:28.550
serialize it to whatever value is defined in the

22
00:01:28.550 --> 00:01:34.140
message's content type message header, and post it to the specified URL.

23
00:01:34.140 --> 00:01:38.120
Creating an outbound gateway is a little more work primarily

24
00:01:38.120 --> 00:01:42.220
because we're using a dynamic URL with a variable that we'll

25
00:01:42.220 --> 00:01:44.200
need to populate from our message,

26
00:01:44.200 --> 00:01:47.840
and we need to handle the response from the web service.

27
00:01:47.840 --> 00:01:48.590
Again,

28
00:01:48.590 --> 00:01:52.060
we create a message handler bean annotated with a service

29
00:01:52.060 --> 00:01:55.440
activator that is listening on a specified channel.

30
00:01:55.440 --> 00:01:59.630
We create a new HttpRequestExecuting message handler,

31
00:01:59.630 --> 00:02:02.570
passing it the URL to the web service.

32
00:02:02.570 --> 00:02:09.090
In this case, we include a URI variable named id by enclosing it in braces.

33
00:02:09.090 --> 00:02:13.340
We specify the HTTP methods to use as the GET verb,

34
00:02:13.340 --> 00:02:18.050
and then we set its expectReply value to true and specify

35
00:02:18.050 --> 00:02:20.640
that the reply should be a reservation.

36
00:02:20.640 --> 00:02:21.360
Next,

37
00:02:21.360 --> 00:02:25.630
we create a Spring expression language parser and then map the id

38
00:02:25.630 --> 00:02:30.230
variable in the URL to the raw value of the message payload.

39
00:02:30.230 --> 00:02:32.970
When we later invoke the message handler,

40
00:02:32.970 --> 00:02:37.940
we'll do so with the integer ID of the reservation to retrieve.

41
00:02:37.940 --> 00:02:38.730
Finally,

42
00:02:38.730 --> 00:02:42.380
we set the name of the output channel to which the message handler

43
00:02:42.380 --> 00:02:45.260
should publish the response from the web service.

44
00:02:45.260 --> 00:02:49.230
We need something to test with, so rather than integrating with a

45
00:02:49.230 --> 00:02:52.100
message broker or some other message source,

46
00:02:52.100 --> 00:02:54.590
I decided to build a stub message source.

47
00:02:54.590 --> 00:02:58.780
We create a message source bean with an inbound channel adapter

48
00:02:58.780 --> 00:03:03.250
that publishes a list of reservations to the fromStubChannel when

49
00:03:03.250 --> 00:03:05.860
it's invoked by a 5‑second poller.

50
00:03:05.860 --> 00:03:07.690
Inside the bean definition,

51
00:03:07.690 --> 00:03:12.200
we implement the message source functional interface by creating a

52
00:03:12.200 --> 00:03:17.030
lambda expression that accepts no input and returns a message with a

53
00:03:17.030 --> 00:03:19.840
list of reservations as its payload.

54
00:03:19.840 --> 00:03:24.540
We'll talk more about building custom message sources in the next module,

55
00:03:24.540 --> 00:03:27.360
but this is a simple way to create a message source

56
00:03:27.360 --> 00:03:30.170
that returns a static set of values.

57
00:03:30.170 --> 00:03:33.800
Finally, because we're returning a list of reservations,

58
00:03:33.800 --> 00:03:38.020
we define a splitter that receives the list of reservations from

59
00:03:38.020 --> 00:03:42.160
the stub message source and publishes individual reservations to

60
00:03:42.160 --> 00:03:44.640
the reservation fromStubChannel.

61
00:03:44.640 --> 00:03:45.790
For our example,

62
00:03:45.790 --> 00:03:48.680
we're going to use our stub message source to publish

63
00:03:48.680 --> 00:03:51.240
reservations to the reservation listener.

64
00:03:51.240 --> 00:03:54.990
The reservation listener will first post the reservation to the

65
00:03:54.990 --> 00:04:00.790
reservation web service using an HttpRequestExecuting MessageHandler as

66
00:04:00.790 --> 00:04:05.260
an outbound channel adaptor and then query for the reservation using

67
00:04:05.260 --> 00:04:08.840
another HttpRequestExecuting MessageHandler,

68
00:04:08.840 --> 00:04:13.440
but this time executing a GET request and handling the response.

69
00:04:13.440 --> 00:04:19.430
The reservation web service is a simple Spring MVC RESTful web service using

70
00:04:19.430 --> 00:04:24.200
Spring data to persist reservations to an embedded H2 database.

71
00:04:24.200 --> 00:04:27.820
It's currently configured to listen for web requests on port

72
00:04:27.820 --> 00:04:32.130
7080 so that it won't conflict with any other services that

73
00:04:32.130 --> 00:04:34.340
you have running on port 8080.

74
00:04:34.340 --> 00:04:37.740
I have the source code for this course on GitHub at

75
00:04:37.740 --> 00:04:43.270
github.com/geekcap‑pluralsight/channeladapters.

76
00:04:43.270 --> 00:04:47.650
You can clone the repository if you'd like to follow along. So let's

77
00:04:47.650 --> 00:04:51.440
dive into the code and see this in action. We'll begin by building

78
00:04:51.440 --> 00:04:54.090
our application, our stub message source,

79
00:04:54.090 --> 00:04:56.600
which will publish reservations to the reservation

80
00:04:56.600 --> 00:04:59.330
listener, our outbound channel adapter,

81
00:04:59.330 --> 00:05:03.600
which will be used to post reservations to the reservation web service,

82
00:05:03.600 --> 00:05:05.250
our outbound gateway,

83
00:05:05.250 --> 00:05:08.240
which will be used to retrieve a reservation from the

84
00:05:08.240 --> 00:05:15.000
reservation web service, and the reservation listener. Then we'll run the application and validate the results.

