WEBVTT
1
1

00:00:01.480  -->  00:00:05.500
Hello everyone and welcome to the next
video in the SQL Appendix series.
2

2

00:00:05.500  -->  00:00:10.000
So in this lecture we're gonna be going
over SQL Select, Distinct, Where and
3

3

00:00:10.000  -->  00:00:12.655
in the And & Or operators in SQL.
4

4

00:00:12.655  -->  00:00:15.690
So we'll go ahead and start with
explaining the SQL Select Statement.
5

5

00:00:15.690  -->  00:00:19.460
And then we'll go over, just like
within the last video, the imports and
6

6

00:00:19.460  -->  00:00:22.830
we'll make a little function
to do SQL queries with pandas.
7

7

00:00:22.830  -->  00:00:26.710
So first you're starting off
with the syntax for SQL Select.
8

8

00:00:26.710  -->  00:00:30.840
So the select statement is used to select
data from a database and that result is
9

9

00:00:30.840  -->  00:00:34.190
then stored in a result table and
that's sometimes called the result set.
10

10

00:00:35.370  -->  00:00:39.470
So the syntax for
SQL Select, looks like this.
11

11

00:00:39.470  -->  00:00:43.480
You say, usually in all caps,
select, then the name of the column.
12

12

00:00:43.480  -->  00:00:48.840
In this case I just said column_name, and
then you say what table you want it from.
13

13

00:00:48.840  -->  00:00:51.350
And FROM is a command in all caps.
14

14

00:00:51.350  -->  00:00:55.910
Some SQL languages, or versions of SQL,
you don't need to do all caps, but
15

15

00:00:55.910  -->  00:00:59.800
mostly, it's very common to show
all caps for your commands.
16

16

00:00:59.800  -->  00:01:03.290
If you wanna select from multiple columns,
you can just say select
17

17

00:01:03.290  -->  00:01:07.440
column name comma and the second
column name and then from your table.
18

18

00:01:08.650  -->  00:01:12.150
If you wanna select everything in the
table, you can just say select either star
19

19

00:01:12.150  -->  00:01:15.950
or asterisk, whatever you wanna call
this symbol, from and the table.
20

20

00:01:17.280  -->  00:01:19.620
So to see how select and
21

21

00:01:19.620  -->  00:01:22.620
how multiple other queries work,
we'll connect to the database and
22

22

00:01:22.620  -->  00:01:26.420
make a function that automatically takes
in our query and returns a DataFrame.
23

23

00:01:27.860  -->  00:01:31.950
So just like we went over the last video,
I'm gonna import sqlite3,
24

24

00:01:31.950  -->  00:01:36.810
I'm gonna import pandas pd, and
then I'm gonna set my object con
25

25

00:01:36.810  -->  00:01:41.200
equal to sqlite3.connect, and
then I'm gonna connect to my database.
26

26

00:01:41.200  -->  00:01:44.280
If your database is in the same
folder as your IPython Notebook,
27

27

00:01:44.280  -->  00:01:46.920
you can just write the database name.db,
28

28

00:01:46.920  -->  00:01:49.840
or you can write the full path in
your computer to connect it to.
29

29

00:01:52.120  -->  00:01:57.570
Now we are also gonna set a function as
our SQL to pandas, so what I mean by that
30

30

00:01:57.570  -->  00:02:02.919
is I made a little function
here Called sql_to_df and
31

31

00:02:02.919  -->  00:02:07.658
it takes in a sql_query, and
then it sets that query using
32

32

00:02:07.658  -->  00:02:12.310
pd.read_sql and
I'll take in that query and
33

33

00:02:12.310  -->  00:02:15.610
also use that connection we made
to set that as a dataframe.
34

34

00:02:15.610  -->  00:02:17.710
So this is basically what
we did in the last video,
35

35

00:02:17.710  -->  00:02:20.670
except now I'm putting it within a
function so I can just call the function,
36

36

00:02:20.670  -->  00:02:23.410
and then it's gonna return
the resulting dataframe.
37

37

00:02:24.500  -->  00:02:29.155
So it just uses pandas to pass the SQL
query, using the connection from sqlite3.
38

38

00:02:29.155  -->  00:02:31.155
So let's go ahead and
39

39

00:02:31.155  -->  00:02:35.145
see an example of how we can do
a SQL query in Python using Pandas.
40

40

00:02:36.645  -->  00:02:39.315
So I can select multiple columns.
41

41

00:02:39.315  -->  00:02:41.890
And for this Multiple columns example.
42

42

00:02:41.890  -->  00:02:46.690
I make an object called query,
and then I pass my SQL syntax, so
43

43

00:02:46.690  -->  00:02:49.090
I'm gonna say select this case.
44

44

00:02:50.260  -->  00:02:53.500
I'm gonna be going through this
customer table right here and
45

45

00:02:53.500  -->  00:02:55.800
looking at the first name and
the last name.
46

46

00:02:55.800  -->  00:02:58.610
So these columns are called
first underscore name, and
47

47

00:02:58.610  -->  00:03:00.580
then the other column is
called last underscore name.
48

48

00:03:02.460  -->  00:03:05.340
So I'm gonna select
the first name comma and
49

49

00:03:05.340  -->  00:03:08.870
the last name from that customer table.
50

50

00:03:08.870  -->  00:03:12.690
And then I have semicolon
here to end that SQL query.
51

51

00:03:12.690  -->  00:03:16.940
Now if you notice this is in red and
that's because it's a comment block.
52

52

00:03:16.940  -->  00:03:22.552
So to make a comment block, you can
either use quotations or apostrophes And
53

53

00:03:22.552  -->  00:03:26.936
write three of them in a row and
end with three of them in row,
54

54

00:03:26.936  -->  00:03:30.463
anything between those
will just be a comment.
55

55

00:03:30.463  -->  00:03:34.890
So now that I have set my object as
that basically comment statement.
56

56

00:03:34.890  -->  00:03:37.870
I can pass that query
using our function and
57

57

00:03:37.870  -->  00:03:42.600
in this case I just have .head,
to see the first rows.
58

58

00:03:43.990  -->  00:03:48.270
And then the resulting data frame or
first name and
59

59

00:03:48.270  -->  00:03:50.680
the last name columns
are already indexed for us.
60

60

00:03:51.860  -->  00:03:56.085
If I want to select everything,
I can do the same thing just by saying,
61

61

00:03:56.085  -->  00:03:59.755
select then asterisk
from that customer table.
62

62

00:03:59.755  -->  00:04:04.305
Again, it's a comment block and
it has a semi-colon.
63

63

00:04:04.305  -->  00:04:08.250
Then, to grab it, just gonna use that
query, pass it through my function,
64

64

00:04:08.250  -->  00:04:13.740
and in this case again, I'm just asking
for if .head() the first five rows.
65

65

00:04:13.740  -->  00:04:18.200
And here we can see everything
from that entire customer table.
66

66

00:04:18.200  -->  00:04:21.670
So basically this data frame that we
made equals that customer table.s So
67

67

00:04:21.670  -->  00:04:25.010
we can see the column names, customer ID,
store ID, first name, last name,
68

68

00:04:25.010  -->  00:04:27.610
email, and
if you want to see an overview of this,
69

69

00:04:27.610  -->  00:04:32.280
you could come back to that diagram and
see the customers and their columns here.
70

70

00:04:33.740  -->  00:04:38.170
Great, so now let's hop in to the syntax
for the SQL DISTINCT Statement.
71

71

00:04:39.810  -->  00:04:43.370
In a table a column may
contain duplicate values.
72

72

00:04:43.370  -->  00:04:48.520
For instance, you could have duplicate
names or duplicate countries, duplicate
73

73

00:04:48.520  -->  00:04:53.290
cities, and sometimes you'll only want
to list the distinct or unique values.
74

74

00:04:53.290  -->  00:04:55.010
So this might sound familiar from pandas,
75

75

00:04:55.010  -->  00:05:00.060
cuz remember pandas has the unique method
on it, for a dataframe, or a series.
76

76

00:05:00.060  -->  00:05:04.020
And in this case in SQL, you use
the word distinct as a keyword, and
77

77

00:05:04.020  -->  00:05:07.710
it can be used to return only distinct or
unique values.
78

78

00:05:07.710  -->  00:05:13.040
So the syntax for
this would look like select Distinct and
79

79

00:05:13.040  -->  00:05:17.380
then you pass your column
name from your table.
80

80

00:05:17.380  -->  00:05:21.640
So, to show you what I mean by that,
I've made a query here.
81

81

00:05:21.640  -->  00:05:26.110
I'm selecting or select distinct, and
then in parentheses from distinct.
82

82

00:05:26.110  -->  00:05:27.380
I'm passing country_id.
83

83

00:05:27.380  -->  00:05:30.660
And then I'm doing this
from the city table.
84

84

00:05:31.920  -->  00:05:36.040
Then, I pass that query
through my data frame and
85

85

00:05:36.040  -->  00:05:41.800
I get the first five Country IDs,
and that's all there is to it.
86

86

00:05:41.800  -->  00:05:45.140
So you can go home and mess around
with doing this kind of function or
87

87

00:05:45.140  -->  00:05:49.040
query in other databases or other tables.
88

88

00:05:49.040  -->  00:05:52.355
So you might wanna say, go ahead and
get all the unique names for
89

89

00:05:52.355  -->  00:05:56.210
my customer tables or
get all the unique films in my inventory,
90

90

00:05:56.210  -->  00:06:00.375
etcetera, etcetera, and that's it.
91

91

00:06:00.375  -->  00:06:04.900
So the distinct allows you to grab unique
values from your column or your table.
92

92

00:06:06.860  -->  00:06:09.950
So now the syntax for
the SQL WHERE statement.
93

93

00:06:09.950  -->  00:06:14.020
The WHERE clause is used to filter
records, so the WHERE clause is used to
94

94

00:06:14.020  -->  00:06:18.330
extract only the records that fulfill
the specific parameter you provide.
95

95

00:06:18.330  -->  00:06:21.290
So the syntax for this goes SELECT.
96

96

00:06:21.290  -->  00:06:26.980
Your column name from your table
name where your column name and
97

97

00:06:26.980  -->  00:06:30.100
then some sort of math operator and
your desired value.
98

98

00:06:31.100  -->  00:06:36.330
So, for instance, I can select all,
let's try selecting all customer
99

99

00:06:36.330  -->  00:06:41.300
information from the first store,
so with store_id 1.
100

100

00:06:41.300  -->  00:06:47.970
So my query is select everything, so
the star, from the customer table where,
101

101

00:06:47.970  -->  00:06:53.100
and I have store_id,
my column name, equal to one.
102

102

00:06:53.100  -->  00:06:58.390
And then I run that through my function,
that query, and grabbed
103

103

00:06:58.390  -->  00:07:02.050
all the information from the customer
table where the store_id was equal to one.
104

104

00:07:02.050  -->  00:07:05.800
So there's a variety of these logical or
105

105

00:07:05.800  -->  00:07:08.380
arithmetic operators you can use for
a SQL request.
106

106

00:07:08.380  -->  00:07:12.108
I have a table of them here.
107

107

00:07:12.108  -->  00:07:13.940
And you can check that
out later if you want.
108

108

00:07:15.580  -->  00:07:20.910
So the SQL requires single quotes around
text values, while numeric fields are not
109

109

00:07:20.910  -->  00:07:25.510
enclosed in quotes, so for example, a text
value for the above where statement.
110

110

00:07:25.510  -->  00:07:33.560
If you wanted to select all the customer
info from Mary you can say select star,
111

111

00:07:33.560  -->  00:07:38.580
from customer table,
where column name, first name equals,
112

112

00:07:38.580  -->  00:07:42.550
and in this case, since it's text,
I have single quotes around the Mary.
113

113

00:07:44.420  -->  00:07:48.090
And there you go,
we've seen all the information for Mary.
114

114

00:07:49.710  -->  00:07:54.070
Now let's go ahead and see the syntax for
the and operator and sequel.
115

115

00:07:54.070  -->  00:07:58.670
So the and operator is used to filter
records based on more than one condition.
116

116

00:07:58.670  -->  00:08:01.940
So the and operator displays
a record if both the first and
117

117

00:08:01.940  -->  00:08:03.820
the second condition are true.
118

118

00:08:03.820  -->  00:08:06.500
Hopefully this should seem pretty
familiar just from knowing Python.
119

119

00:08:08.600  -->  00:08:13.310
So in this case I'm gonna select all
the films from 2006 and that are rated R.
120

120

00:08:14.370  -->  00:08:17.970
So my query is select
star everything from film
121

121

00:08:19.250  -->  00:08:25.440
where release year equals 2006 and
the rating is equal to R.
122

122

00:08:25.440  -->  00:08:28.530
Again, notice here that the letter
R only has single quotes around it
123

123

00:08:28.530  -->  00:08:30.000
because it's text.
124

124

00:08:30.000  -->  00:08:32.400
The number 2006 doesn't
need the single quotes.
125

125

00:08:33.430  -->  00:08:37.839
And I passed a query, and here we can
see all the release years of 2006.
126

126

00:08:38.990  -->  00:08:44.910
And I scroll over,
I'll see the ratings are all here.
127

127

00:08:44.910  -->  00:08:48.930
So now we have a data frame of all
the films from 2006 that are rated R.
128

128

00:08:51.190  -->  00:08:54.230
Moving on, the syntax for OR.
129

129

00:08:54.230  -->  00:08:57.290
The OR operator displays a record
of either the first condition or
130

130

00:08:57.290  -->  00:08:58.774
the second condition as true.
131

131

00:08:58.774  -->  00:09:02.110
So let's say I want to
select all films from
132

132

00:09:02.110  -->  00:09:07.470
the film database ,or the film table
excuse me, that are rated R or PG.
133

133

00:09:07.470  -->  00:09:12.442
So I can pass the query select star,
everything from film, my table,
134

134

00:09:12.442  -->  00:09:17.415
where rating is PG or equals PG or
where the rating equals R minus single
135

135

00:09:17.415  -->  00:09:22.892
quotes here, have that as a block comment,
pass that through my function and
136

136

00:09:22.892  -->  00:09:26.970
now I have my data frame with
all the PG and R rated movies.
137

137

00:09:29.200  -->  00:09:33.600
If we scroll over here, we can see that
we only see PG and R on the ratings.
138

138

00:09:33.600  -->  00:09:35.040
Great.
139

139

00:09:35.040  -->  00:09:36.760
So that's it for now.
140

140

00:09:36.760  -->  00:09:43.670
So we went over how to do SQL SELECT,
SQL DISTINCT, SQL WHERE, SQL AND and OR.
141

141

00:09:44.690  -->  00:09:45.909
Just very basic examples.
142

142

00:09:46.920  -->  00:09:50.860
And you can use those to
access your data base and
143

143

00:09:50.860  -->  00:09:54.130
set your query as a data frame in pandas.
144

144

00:09:54.130  -->  00:09:55.060
Great.
145

145

00:09:55.060  -->  00:09:56.660
Thanks and I'll see you at the next video.
