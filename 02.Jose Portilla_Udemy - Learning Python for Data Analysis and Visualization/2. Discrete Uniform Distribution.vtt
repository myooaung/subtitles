WEBVTT
1
1

00:00:01.230  -->  00:00:02.010
Hey everybody.
2

2

00:00:02.010  -->  00:00:05.450
Welcome to another
Statistics overview lecture.
3

3

00:00:05.450  -->  00:00:09.820
In this lecture I'll be going over
discrete uniform distributions.
4

4

00:00:09.820  -->  00:00:12.080
So, let's just go ahead and
start off with that definition.
5

5

00:00:13.360  -->  00:00:18.670
So the definition of a discrete uniform
distribution is a random variable x
6

6

00:00:18.670  -->  00:00:23.380
has a discrete uniform distribution
if each of the n values in its range.
7

7

00:00:23.380  -->  00:00:29.280
So like x1, x2, x3 all the way
to x7 has equal probability.
8

8

00:00:29.280  -->  00:00:34.186
So what that means is the probability of
one event happening is equal just to 1
9

9

00:00:34.186  -->  00:00:35.200
over n.
10

10

00:00:35.200  -->  00:00:37.760
The number of possible events.
11

11

00:00:37.760  -->  00:00:40.210
So for
example this could be like a dice roll.
12

12

00:00:42.030  -->  00:00:46.050
Every roll of the dice, one through six,
has equal odds if it's a fair die.
13

13

00:00:48.280  -->  00:00:51.220
And that's just the discrete
uniform distribution.
14

14

00:00:51.220  -->  00:00:54.080
So we can use Python to
show a simple example.
15

15

00:00:54.080  -->  00:00:58.440
So I have a bunch of imports here from the
data analysis and visualization course.
16

16

00:00:59.750  -->  00:01:05.450
Just numpy, numpy.random, pandas,
and then scipy which is a new one.
17

17

00:01:05.450  -->  00:01:08.080
So from scipy import stats and
18

18

00:01:08.080  -->  00:01:11.560
that'll allow you to upload
some statistical distributions.
19

19

00:01:11.560  -->  00:01:13.400
And we'll learn about that
later on in this lecture.
20

20

00:01:14.410  -->  00:01:15.420
And then matplotlib and
21

21

00:01:15.420  -->  00:01:18.720
seaborn and then from the _future_
I also imported division.
22

22

00:01:18.720  -->  00:01:21.860
So I wouldn't have to worry
about floating point numbers.
23

23

00:01:21.860  -->  00:01:22.840
Okay.
24

24

00:01:22.840  -->  00:01:24.480
So let's go ahead and
see just a quick example.
25

25

00:01:25.540  -->  00:01:27.320
We can set up a dice roll and
26

26

00:01:27.320  -->  00:01:32.160
plot the distribution using seaborn
before we go use matplotlib.
27

27

00:01:32.160  -->  00:01:34.150
So I'll roll the dice.
28

28

00:01:34.150  -->  00:01:36.190
We can check out its
probability mass function.
29

29

00:01:37.200  -->  00:01:41.100
So I'm just gonna make a list called
roll_options and it's one through six.
30

30

00:01:41.100  -->  00:01:42.800
Those are the different
options of the roll.
31

31

00:01:44.340  -->  00:01:46.700
The total probably space is just one.
32

32

00:01:46.700  -->  00:01:51.048
So if I summed up all the probabilities,
they should equal to one.
33

33

00:01:51.048  -->  00:01:54.776
And then since each roll has, oops.
34

34

00:01:54.776  -->  00:02:00.651
[SOUND] The same odds of appearing
on a fair dice or a fair die.
35

35

00:02:00.651  -->  00:02:05.394
I can just say the probability of a roll
is the same as the total probability
36

36

00:02:05.394  -->  00:02:09.700
divided by the length of the roll
options which happens to be six.
37

37

00:02:09.700  -->  00:02:15.110
So that means that each number has
a 1 over 6 chance of showing up.
38

38

00:02:15.110  -->  00:02:17.070
So how can I plot this?
39

39

00:02:17.070  -->  00:02:20.070
So I could plot using a seaborn rugplot.
40

40

00:02:20.070  -->  00:02:23.290
Now, this isn't exactly what
a rugplot should be used for,
41

41

00:02:23.290  -->  00:02:28.100
but it's just the way to get a quick
visual on this distribution.
42

42

00:02:28.100  -->  00:02:32.110
I'll show you how to do a more correct
version using a bar plot in a second.
43

43

00:02:32.110  -->  00:02:36.570
But if you wanna do this using seaborn,
you can make a rugplot.
44

44

00:02:36.570  -->  00:02:40.530
And we can just set the height equal
to the probability of that roll.
45

45

00:02:40.530  -->  00:02:44.240
So I'm gonna plot all my roll options,
one through six.
46

46

00:02:44.240  -->  00:02:47.910
And then set the height equal to that
probability of that roll, 1 over 6.
47

47

00:02:47.910  -->  00:02:49.250
And then just set the color, indianred.
48

48

00:02:49.250  -->  00:02:53.030
And if we look at that
probability mass function,
49

49

00:02:53.030  -->  00:02:56.991
then we see that each roll
outcome has the same odds.
50

50

00:02:56.991  -->  00:03:00.165
A little over 0.16,
which is just 1 over 6.
51

51

00:03:03.459  -->  00:03:05.394
So you can see that that f(x),
52

52

00:03:05.394  -->  00:03:10.064
that probability value is just equal
to 1 over the total possible outcomes.
53

53

00:03:11.225  -->  00:03:15.695
So what's the mean and variance of this
kind of distribution, a discreet uniform?
54

54

00:03:15.695  -->  00:03:17.405
Well the mean is just simply the max and
55

55

00:03:17.405  -->  00:03:20.945
the min divided by 2 just
like the mean of two numbers.
56

56

00:03:20.945  -->  00:03:23.148
And the variance is
defined by this equation.
57

57

00:03:23.148  -->  00:03:28.125
(b- a + 1) squared- 1 / 12.
58

58

00:03:28.125  -->  00:03:32.253
So b and a, b just stands for
that max value and a stands for
59

59

00:03:32.253  -->  00:03:34.066
that lower bound value.
60

60

00:03:36.366  -->  00:03:38.114
All right, so let's go ahead and
61

61

00:03:38.114  -->  00:03:41.685
see how we can use scipy to create
a discrete uniform distribution.
62

62

00:03:41.685  -->  00:03:48.086
So from scipy.stats I've
imported R-A-N-D-I-N-T.
63

63

00:03:48.086  -->  00:03:51.586
That's used for
discrete uniform distributions in scipy.
64

64

00:03:51.586  -->  00:03:56.110
I'm gonna set up a low and
high boundary for my dice roll.
65

65

00:03:56.110  -->  00:03:58.990
And notice I'm going up to seven
because my index starts at zero.
66

66

00:03:58.990  -->  00:04:01.250
So it's going to be, 7 minus 1 is 6.
67

67

00:04:01.250  -->  00:04:05.390
Let's get my mean and variance.
68

68

00:04:05.390  -->  00:04:09.980
So to do that,
I just call randint.stats and
69

69

00:04:11.010  -->  00:04:13.930
then specify the low and the high bound.
70

70

00:04:13.930  -->  00:04:16.956
So then I'm just gonna say, the mean is.
71

71

00:04:16.956  -->  00:04:19.636
And then I print off 3.5.
72

72

00:04:19.636  -->  00:04:21.856
So that makes sense.
73

73

00:04:21.856  -->  00:04:26.350
So I can also make a simple
bar plot just using plt.bar.
74

74

00:04:26.350  -->  00:04:29.160
This is using matplotlib.
75

75

00:04:29.160  -->  00:04:29.970
So how can I do that?
76

76

00:04:31.270  -->  00:04:34.190
Let's see, I just say plt.bar.
77

77

00:04:34.190  -->  00:04:36.300
I put in my roll options.
78

78

00:04:36.300  -->  00:04:39.240
Remember that's the list
of one through six.
79

79

00:04:39.240  -->  00:04:42.190
And then to get
the probability mass function.
80

80

00:04:42.190  -->  00:04:44.020
Last time we did it manually up here.
81

81

00:04:45.910  -->  00:04:50.700
But you can do it automatically
using scipy by just calling
82

82

00:04:50.700  -->  00:04:54.920
R-A-N-D-I-N-T and then .pmf method on it.
83

83

00:04:54.920  -->  00:04:58.177
And the pmf method takes two arguments,
actually three arguments in this case.
84

84

00:04:58.177  -->  00:05:00.719
The roll_options, so that one through six.
85

85

00:05:00.719  -->  00:05:04.080
And then the low and the high bound.
86

86

00:05:04.080  -->  00:05:07.590
And then we have a bar plot of
the probability mass function.
87

87

00:05:09.080  -->  00:05:10.910
So that's just a very quick overview.
88

88

00:05:10.910  -->  00:05:17.820
You can check out and go over this IPython
Notebook on a slower fashion yourself.
89

89

00:05:17.820  -->  00:05:19.900
This is just a quick intro for it.
90

90

00:05:19.900  -->  00:05:23.480
That's basically it for
discrete uniform distribution.
91

91

00:05:23.480  -->  00:05:24.660
If you're still interested,
92

92

00:05:24.660  -->  00:05:28.470
there's a really interesting problem
called the German Tank Problem.
93

93

00:05:28.470  -->  00:05:31.860
This is just a real case use of
discrete uniform distributions.
94

94

00:05:32.890  -->  00:05:35.600
There's some information here so
you can just scroll down and
95

95

00:05:35.600  -->  00:05:37.216
keep reading about it if you want.
96

96

00:05:37.216  -->  00:05:40.560
If you wanna know more about the German
Tank Problem you can go ahead and
97

97

00:05:40.560  -->  00:05:41.800
just click the link provided here.
98

98

00:05:41.800  -->  00:05:45.310
And it'll take you to
the Wikipedia page about it.
99

99

00:05:45.310  -->  00:05:50.140
It's basically just how the Allies used
discrete uniform distribution methods.
100

100

00:05:50.140  -->  00:05:52.744
To estimate the amount of tanks
the Germans were producing during
101

101

00:05:52.744  -->  00:05:53.750
World War II.
102

102

00:05:53.750  -->  00:05:56.063
So it's actually a pretty
interesting problem and
103

103

00:05:56.063  -->  00:05:59.570
you can follow along here either with
Wikipedia or the Python calculations.
104

104

00:06:00.590  -->  00:06:03.091
And that's about it for
the discrete uniform distribution.
105

105

00:06:03.091  -->  00:06:05.392
Go ahead and check out the notebook or
106

106

00:06:05.392  -->  00:06:09.411
the Wikipedia page if you're
further interested in the topic.
107

107

00:06:09.411  -->  00:06:11.049
All right, thanks guys.
