1
1

00:00:01,310  -->  00:00:02,560
Hey, guys.
2

2

00:00:02,560  -->  00:00:05,100
Welcome to lecture 17.
3

3

00:00:05,100  -->  00:00:09,520
This will be on reindexing.
4

4

00:00:10,950  -->  00:00:15,530
So, last lecture, we went a little
bit over indexes, how they work,
5

5

00:00:15,530  -->  00:00:18,540
how you can call certain index values.
6

6

00:00:18,540  -->  00:00:24,190
We're gonna learn how you can reindex and
7

7

00:00:24,190  -->  00:00:27,600
change the index if you wanted to.
8

8

00:00:27,600  -->  00:00:30,760
So we're gonna import
the usual NumPy as np.
9

9

00:00:32,320  -->  00:00:38,540
From pandas we're gonna import Series and
DataFrame.
10

10

00:00:41,420  -->  00:00:43,860
We're gonna import pandas as pd.
11

11

00:00:45,580  -->  00:00:48,830
And last thing we're gonna do which
is a little different from usual,
12

12

00:00:48,830  -->  00:00:55,470
is from numpy.randn,
we're gonna import the randn,
13

13

00:00:55,470  -->  00:00:59,550
which will grab numbers
with a normal distribution.
14

14

00:01:00,660  -->  00:01:04,668
So, we'll just use this later in this
lecture just to grab some random numbers.
15

15

00:01:04,668  -->  00:01:09,740
Let's go Alt+Enter,
import all the libraries we'll be using.
16

16

00:01:11,370  -->  00:01:16,542
Let's go ahead and create a new series,
17

17

00:01:16,542  -->  00:01:22,932
we'll call it ser1 and
we'll build the series,
18

18

00:01:22,932  -->  00:01:28,865
the usual method so
we'll call the self to be,
19

19

00:01:28,865  -->  00:01:33,123
just a list 1, 2, 3, 4, and
20

20

00:01:33,123  -->  00:01:38,480
then we'll set the index as A, B, C, D.
21

21

00:01:38,480  -->  00:01:42,199
And then we'll show what that looks like,
cool.
22

22

00:01:42,199  -->  00:01:46,760
So, now we have a series A, B, C,
D index and the values are 1, 2, 3, 4.
23

23

00:01:46,760  -->  00:01:50,820
So let's say you wanted
24

24

00:01:50,820  -->  00:01:55,398
to reindex to rearrange the data to
a new index, how would this work?
25

25

00:01:55,398  -->  00:02:02,080
To show you, let's go ahead and
start building a new series.
26

26

00:02:02,080  -->  00:02:07,760
We'll call it a ser2, and this new
series is gonna be built off series one,
27

27

00:02:07,760  -->  00:02:14,430
and now we're gonna call reindex on ser1,
our first series.
28

28

00:02:14,430  -->  00:02:18,300
And we'll pass a new reindexing list.
29

29

00:02:18,300  -->  00:02:22,960
So, we'll call it A, B, C, D, and we'll
30

30

00:02:24,880  -->  00:02:30,470
go all the way to F on this new index and
see what happens.
31

31

00:02:30,470  -->  00:02:37,020
Let's go ahead and show it, awesome.
32

32

00:02:37,020  -->  00:02:42,446
So pandas since it's very good at
dealing with missing value points,
33

33

00:02:42,446  -->  00:02:45,940
when you reindexed it,
34

34

00:02:45,940  -->  00:02:50,690
E and F didn't exist in your first series,
this ser1, so
35

35

00:02:50,690  -->  00:02:55,970
it automatically just gave it null
values for E and F which is really nice.
36

36

00:02:55,970  -->  00:03:02,400
So, you don't have to worry about doing
a perfect reindex or not having values for
37

37

00:03:02,400  -->  00:03:06,350
your reindex, pandas will automatically
give you null values there.
38

38

00:03:08,860  -->  00:03:13,329
We can also fill in values for new, and
39

39

00:03:13,329  -->  00:03:17,240
since we write, so for example,
40

40

00:03:17,240  -->  00:03:23,121
if we reindex our second
series that we just made.
41

41

00:03:26,541  -->  00:03:30,411
We'll go A, B, C, D, E, F, and
42

42

00:03:30,411  -->  00:03:34,563
now we'll bring you all the way to G.
43

43

00:03:38,243  -->  00:03:44,847
If we wanted to fill certain values,
we can pass the argument fill_value and
44

44

00:03:44,847  -->  00:03:51,110
set that equal to something,
in this case I'll set it equal to zero.
45

45

00:03:51,110  -->  00:03:55,797
So, that should do,
is instead of passing a null,
46

46

00:03:55,797  -->  00:04:00,383
it will pass a zero as
the new index values, cool.
47

47

00:04:00,383  -->  00:04:07,412
And that worked, so our original series
two was 1, 2, 3, 4, null, null with E, F.
48

48

00:04:07,412  -->  00:04:11,482
I reindexed it and
I added G to the index and
49

49

00:04:11,482  -->  00:04:17,280
I also passed the argument
fill_value equal zero.
50

50

00:04:17,280  -->  00:04:23,270
So since G was the new index, it will
be filled as a zero which we saw here.
51

51

00:04:23,270  -->  00:04:27,030
E and F stay null since those
existed in the previous index.
52

52

00:04:28,570  -->  00:04:29,300
All right, cool.
53

53

00:04:32,280  -->  00:04:38,000
You can use particular methods for
filling values.
54

54

00:04:38,000  -->  00:04:42,620
So, to demonstrate that,
let's go ahead and create a third series.
55

55

00:04:42,620  -->  00:04:43,510
We'll call it ser3.
56

56

00:04:46,790  -->  00:04:52,480
And in this case, let's go ahead and pass
just a list of countries as the series.
57

57

00:04:52,480  -->  00:04:56,042
USA, Mexico, and
58

58

00:04:56,042  -->  00:05:00,717
Canada, all right, and
59

59

00:05:00,717  -->  00:05:05,616
we'll have the index just
60

60

00:05:05,616  -->  00:05:10,292
be some list of numbers,
61

61

00:05:10,292  -->  00:05:15,202
let's go 0, 5, 10.
62

62

00:05:15,202  -->  00:05:18,060
All right, let's go ahead and show that.
63

63

00:05:19,880  -->  00:05:22,890
Cool, so we have our third series.
64

64

00:05:22,890  -->  00:05:27,360
The values are just USA, Mexico,
Canada and the index is 0, 5, 10.
65

65

00:05:30,360  -->  00:05:33,700
Let's say we wanted to reindex this
66

66

00:05:33,700  -->  00:05:38,400
all the way from 0 to 14,
how would we do that?
67

67

00:05:38,400  -->  00:05:42,610
And, what would we want to fill?
68

68

00:05:42,610  -->  00:05:49,980
So, we can all reindex,
and for the reindex self
69

69

00:05:49,980  -->  00:05:54,592
we'll just pass range 15 and
70

70

00:05:54,592  -->  00:06:00,700
to give you a better idea of the range
will do, I'll actually pass it separately.
71

71

00:06:01,730  -->  00:06:08,440
So, I'll make a new object called ranger,
and call this range 15.
72

72

00:06:08,440  -->  00:06:14,328
Now, let's take a look at ranger is.
73

73

00:06:14,328  -->  00:06:19,738
So range just makes a list of
15 points as we've seen before.
74

74

00:06:19,738  -->  00:06:26,950
And NumPy, and it goes from 0 to 14
since the index starts at 0 for a raise.
75

75

00:06:28,770  -->  00:06:32,480
So back to reindexing this
third series we made.
76

76

00:06:35,480  -->  00:06:41,080
I'll call ranger, which would be the same
as just typing range(15) in there.
77

77

00:06:41,080  -->  00:06:48,400
That's the argument and
I can pass the argument method.
78

78

00:06:49,840  -->  00:06:55,630
So what kind of method do we
wanna fill for interpolating
79

79

00:06:55,630  -->  00:07:00,760
values between the new index,
indexes that we're gonna put into it.
80

80

00:07:00,760  -->  00:07:06,230
So one argument we can pass is F fill.
81

81

00:07:06,230  -->  00:07:08,380
So this stands for forward fill.
82

82

00:07:08,380  -->  00:07:13,836
So what's gonna happen is,
right now our index on series three is 0,
83

83

00:07:13,836  -->  00:07:18,260
5, and 10, but we're gonna be
filling it with a bunch of values.
84

84

00:07:18,260  -->  00:07:20,100
So, 0 will have USA.
85

85

00:07:21,980  -->  00:07:29,120
1, 2, 3, 4 would be null if we
didn't have a method argument here.
86

86

00:07:29,120  -->  00:07:31,860
So what's gonna happen instead
when we say forward fill,
87

87

00:07:31,860  -->  00:07:37,140
it's gonna grab the previous value,
USA, and forward fill it for
88

88

00:07:37,140  -->  00:07:41,740
the next indexes until it hits
something that already had a value.
89

89

00:07:41,740  -->  00:07:43,970
So that will be 5 next go.
90

90

00:07:43,970  -->  00:07:45,815
And then for 6, 7, 8,
91

91

00:07:45,815  -->  00:07:49,980
9, it's gonna forward fill those with
the previous value, which was Mexico.
92

92

00:07:50,980  -->  00:07:55,190
And then once it hits 10,
that already has a value, Canada, and
93

93

00:07:55,190  -->  00:07:57,660
it'll forward fill
the rest of them Canada.
94

94

00:07:57,660  -->  00:07:59,620
So let's see if that works.
95

95

00:08:01,630  -->  00:08:02,370
And that's what we get.
96

96

00:08:03,420  -->  00:08:09,030
So it forward filled USA into
the next four indexes, index values.
97

97

00:08:10,040  -->  00:08:14,130
It forward filled Mexico into
the next four index values, and
98

98

00:08:14,130  -->  00:08:15,180
it forward filled Canada.
99

99

00:08:17,770  -->  00:08:20,260
There's different methods you can pass.
100

100

00:08:20,260  -->  00:08:24,390
You can check out the documentation for
the different methods.
101

101

00:08:24,390  -->  00:08:30,080
You can do a backwards fill,
which would be basically opposite,
102

102

00:08:30,080  -->  00:08:35,040
Mexico would then fill everything back,
and Canada would fill everything back.
103

103

00:08:35,040  -->  00:08:38,041
And then these guys would be null,
since there's nothing ahead of them.
104

104

00:08:42,102  -->  00:08:46,586
So, let's say you wanted to reindex rows,
or not just rows but
105

105

00:08:46,586  -->  00:08:49,840
columns, or even both of them.
106

106

00:08:49,840  -->  00:08:51,510
How would you do that?
107

107

00:08:51,510  -->  00:08:55,960
So, in order to see that effect,
we'll make a whole data frame.
108

108

00:08:58,030  -->  00:08:59,750
So we'll call this object D frame.
109

109

00:09:01,530  -->  00:09:02,540
We'll call DataFrame.
110

110

00:09:03,900  -->  00:09:08,740
And how should we build this DataFrame?
111

111

00:09:08,740  -->  00:09:11,440
Let's say,
112

112

00:09:11,440  -->  00:09:17,110
what do we want the self to be?
113

113

00:09:17,110  -->  00:09:20,733
We'll call 25 random numbers and
114

114

00:09:20,733  -->  00:09:26,550
then what we're gonna do is pass or
call reshape on this.
115

115

00:09:26,550  -->  00:09:32,110
So randn(25) will just get
you a list from 0 to 24,
116

116

00:09:32,110  -->  00:09:35,100
and then if we call reshape,
we can actually,
117

117

00:09:35,100  -->  00:09:39,900
instead of just having it be a straight
vector, we can indicate it to be a matrix.
118

118

00:09:39,900  -->  00:09:43,651
So this can be a 5 by 5 matrix.
119

119

00:09:45,592  -->  00:09:50,464
So those will be the values of the data
frame, should be random numbers, 5 by 5.
120

120

00:09:51,810  -->  00:09:55,050
Let's go ahead and give it an index, so
121

121

00:09:55,050  -->  00:09:59,200
the index for all the rows, again,
we'll just use letter index here.
122

122

00:10:02,740  -->  00:10:09,545
Let's skip C,
just to show you in effect later
123

123

00:10:09,545  -->  00:10:15,400
on and we'll go to F so we have five,
124

124

00:10:15,400  -->  00:10:20,410
one for each row of this 5 by 5 matrix.
125

125

00:10:20,410  -->  00:10:24,200
And then if we want to set the columns,
we just pass the columns arguments.
126

126

00:10:26,870  -->  00:10:30,090
And, we'll just label them col1, col2, and
127

127

00:10:34,110  -->  00:10:38,660
I'm running out of space here so
128

128

00:10:38,660  -->  00:10:43,650
I'm actually gonna start this on a new
line, remember to have the comma there.
129

129

00:10:43,650  -->  00:10:46,800
Col2, col3, col4, and there's
130

130

00:10:48,720  -->  00:10:54,210
gonna be five columns since this is a 5
by 5 matrix, so we'll stop with col5.
131

131

00:10:54,210  -->  00:10:57,410
So that will be our DataFrame.
132

132

00:10:57,410  -->  00:11:01,005
It's gonna be, we asked for
25 random numbers,
133

133

00:11:01,005  -->  00:11:03,880
we reshaped them into a 5 by 5 array.
134

134

00:11:03,880  -->  00:11:06,950
So that's the values of that data frame.
135

135

00:11:06,950  -->  00:11:12,790
Then we set the index of the rows just
to be A, B, D, E, F, we skipped C.
136

136

00:11:12,790  -->  00:11:15,280
And the columns will just be called col1,
2, 3, 4, 5,
137

137

00:11:15,280  -->  00:11:18,650
you can call the columns
whatever you want.
138

138

00:11:19,860  -->  00:11:25,950
And then we'll type dframe, just so
we can see what it looks like, cool.
139

139

00:11:26,980  -->  00:11:31,950
So like I said, A, B, D, E,
F is your index for your rows.
140

140

00:11:31,950  -->  00:11:33,730
And we have our column names, and
141

141

00:11:33,730  -->  00:11:37,140
you can see the random numbers
that are filled in the data frame.
142

142

00:11:39,370  -->  00:11:44,470
So since we forgot C,
let's reindex onto the data frame.
143

143

00:11:45,908  -->  00:11:50,920
So we'll call a new data frame dframe2 and
144

144

00:11:50,920  -->  00:11:57,092
we'll have that equal to the old data
frame with a reindex called on it.
145

145

00:11:57,092  -->  00:12:01,730
And, in this new index, we won't forget C.
146

146

00:12:01,730  -->  00:12:07,450
And then,
147

147

00:12:07,450  -->  00:12:10,310
we'll go all the way to F.
148

148

00:12:10,310  -->  00:12:12,822
So what's gonna happen when we do this?
149

149

00:12:15,582  -->  00:12:16,280
Let's find out.
150

150

00:12:17,440  -->  00:12:18,330
We'll call dframe2.
151

151

00:12:18,330  -->  00:12:23,592
Think about what you think is gonna happen
and how pandas deals with the reindex
152

152

00:12:23,592  -->  00:12:29,630
values, then if your intuition is right
then you should have guessed that it would
153

153

00:12:29,630  -->  00:12:36,110
add null values in for that entire C row
just as if we scroll up it did before
154

154

00:12:36,110  -->  00:12:40,490
for the values in the series
when it was reindexed.
155

155

00:12:40,490  -->  00:12:47,520
Cool, we can also
explicitly reindex columns.
156

156

00:12:47,520  -->  00:12:52,160
So, let's go ahead and
just make a list called new columns.
157

157

00:12:56,250  -->  00:13:00,578
Call it col1, col2, and
158

158

00:13:00,578  -->  00:13:07,543
let's go all the way
out to col6 this time,
159

159

00:13:07,543  -->  00:13:13,770
since we only went to 5, previously.
160

160

00:13:14,910  -->  00:13:17,946
So we make a list, new columns, and
161

161

00:13:17,946  -->  00:13:22,502
now we're gonna grab
the dframe2 that we just made,
162

162

00:13:22,502  -->  00:13:29,000
this one here above with that new zero,
and we're gonna call reindex on it.
163

163

00:13:31,150  -->  00:13:35,800
And the reindex for
a reindexing of the columns,
164

164

00:13:35,800  -->  00:13:37,765
you have to call columns specifically.
165

165

00:13:37,765  -->  00:13:42,650
And then you can say equals, and we could
either manually type in this list or
166

166

00:13:42,650  -->  00:13:47,790
just call it using its name, new columns.
167

167

00:13:49,180  -->  00:13:52,398
So think about what you expect
the data frame to look like now.
168

168

00:13:52,398  -->  00:13:56,610
Hopefully, you guessed right.
169

169

00:13:56,610  -->  00:13:59,780
Column 6, you added it in and
170

170

00:13:59,780  -->  00:14:05,938
panda's automatically put in null
values for that entire column, cool.
171

171

00:14:05,938  -->  00:14:10,422
You can reindex really
172

172

00:14:10,422  -->  00:14:15,640
quickly just using .ix.
173

173

00:14:15,640  -->  00:14:17,300
We'll see more of this in the future.
174

174

00:14:17,300  -->  00:14:21,865
We've seen a little bit of it in
the original indexing lecture, but
175

175

00:14:21,865  -->  00:14:24,465
we'll see much more in the future.
176

176

00:14:24,465  -->  00:14:27,565
Just to give you a little taste of it,
177

177

00:14:27,565  -->  00:14:34,941
let's see the original DataFrame, dframe.
178

178

00:14:38,290  -->  00:14:42,996
And we can call ix to reindex,
179

179

00:14:42,996  -->  00:14:49,210
the first argument takes is your rows,
180

180

00:14:49,210  -->  00:14:54,290
so we'll just call it A, B, C,
181

181

00:14:54,290  -->  00:14:59,802
D, oops E, F, and
182

182

00:14:59,802  -->  00:15:05,659
then the second argument
it'll take is the columns,
183

183

00:15:05,659  -->  00:15:09,340
so we'll just pass new columns.
184

184

00:15:09,340  -->  00:15:11,420
So, this is our original dframe.
185

185

00:15:11,420  -->  00:15:15,290
Remember, it's missing the C and
it doesn't have that column 6, and
186

186

00:15:15,290  -->  00:15:19,700
now using ix,
we're gonna really quickly reindex it.
187

187

00:15:20,750  -->  00:15:22,560
Just in one single, quick step.
188

188

00:15:23,840  -->  00:15:26,780
So, Alt+Enter to see that, and boom.
189

189

00:15:26,780  -->  00:15:31,580
Now, you have the same
dframe that was dframe2.
190

190

00:15:31,580  -->  00:15:35,680
So, instead of having to
reindex everything separately,
191

191

00:15:36,790  -->  00:15:38,640
the faster way to do it is using ix.
192

192

00:15:38,640  -->  00:15:42,325
And we'll see more of this in the future.
193

193

00:15:42,325  -->  00:15:45,730
All right, excellent, so
I'll see you in lecture 18, and
194

194

00:15:45,730  -->  00:15:51,450
we'll learn more about data frames and
how they work.
195

195

00:15:51,450  -->  00:15:53,240
All right, see you there.
