1
1

00:00:01,860  -->  00:00:05,762
Hey guys, welcome to lecture 13.
2

2

00:00:05,762  -->  00:00:11,910
This lecture will be just a quick
lecture on array input and output.
3

3

00:00:13,060  -->  00:00:19,190
So how to save arrays and how to open
them, beyond just an IPython notebook.
4

4

00:00:19,190  -->  00:00:23,867
So we'll start off by
importing numpy as np.
5

5

00:00:26,148  -->  00:00:27,090
Let's go ahead and do that.
6

6

00:00:27,090  -->  00:00:27,940
All right.
7

7

00:00:29,600  -->  00:00:31,951
Let's just create a quick array.
8

8

00:00:31,951  -->  00:00:37,306
We'll just say np.arange.
9

9

00:00:37,306  -->  00:00:37,895
Just make it five points.
10

10

00:00:37,895  -->  00:00:44,165
Take a look at what that looks like.
11

11

00:00:44,165  -->  00:00:46,290
So we have our array of zero through four.
12

12

00:00:46,290  -->  00:00:48,020
Five points.
13

13

00:00:48,020  -->  00:00:54,270
If we wanted to save this array,
all we gotta do is call np.save and
14

14

00:00:54,270  -->  00:01:01,200
we can save it as myarray and
then choose which array you wanna save.
15

15

00:01:01,200  -->  00:01:03,510
So the actual object was arr.
16

16

00:01:05,630  -->  00:01:06,910
And so now that's saved as an array.
17

17

00:01:08,170  -->  00:01:12,343
To show that it saved this actual array,
let's go ahead and
18

18

00:01:12,343  -->  00:01:15,107
make another array with the same name.
19

19

00:01:18,327  -->  00:01:21,790
And we'll have it be ten points long and
show you what that looks like.
20

20

00:01:24,000  -->  00:01:31,060
So now if I call arr,
it shows a ten-point array of 0 through 9.
21

21

00:01:31,060  -->  00:01:37,540
Let's make sure that we did actually save
my original array which was 0 through 4.
22

22

00:01:37,540  -->  00:01:44,725
And if we wanted to load that, we'd
just use np.load, and we call that file.
23

23

00:01:44,725  -->  00:01:50,753
Now, in order to get the actual file,
you have to use the numpy extension,
24

24

00:01:50,753  -->  00:01:55,341
which is .npy, so
this was the name of the file.
25

25

00:01:55,341  -->  00:01:59,230
And then if you want to actually load it,
you gotta call the extension as well.
26

26

00:01:59,230  -->  00:02:02,460
Let's see if that works, and it did.
27

27

00:02:02,460  -->  00:02:04,930
Here's our original
array that we had saved.
28

28

00:02:06,530  -->  00:02:11,330
You can also save multiple arrays, so
29

29

00:02:11,330  -->  00:02:15,680
for instance, let's say arr1 =
30

30

00:02:15,680  -->  00:02:20,631
np.load ('myarray.npy'), and
31

31

00:02:20,631  -->  00:02:25,440
then we'll see what that looks like.
32

32

00:02:27,580  -->  00:02:32,570
And then let's set arr2 = arr.
33

33

00:02:34,060  -->  00:02:35,550
Let's go ahead and
see what that looks like.
34

34

00:02:36,810  -->  00:02:38,760
So now I have two arrays.
35

35

00:02:38,760  -->  00:02:41,700
If I wanted to save both of them, I can.
36

36

00:02:41,700  -->  00:02:43,990
I can save them in a zip file.
37

37

00:02:43,990  -->  00:02:47,720
We're gonna use save again but
this time save with a z, savez.
38

38

00:02:47,720  -->  00:02:49,950
So this is gonna save as a zip file.
39

39

00:02:51,810  -->  00:02:53,690
You're gonna name that zip file.
40

40

00:02:53,690  -->  00:02:56,730
So we'll call this ziparray.
41

41

00:02:58,880  -->  00:03:02,055
And the file extension you're
gonna use here is npz.
42

42

00:03:03,830  -->  00:03:09,370
And then you're gonna choose
which arrays to save with it.
43

43

00:03:09,370  -->  00:03:10,870
So we can call our first one.
44

44

00:03:10,870  -->  00:03:14,450
We'll just say it's x and
45

45

00:03:14,450  -->  00:03:18,620
that will be the first array and
we'll have the second one called y.
46

46

00:03:20,390  -->  00:03:22,300
And that will be array two.
47

47

00:03:22,300  -->  00:03:23,680
So let's go ahead and see if that worked.
48

48

00:03:25,610  -->  00:03:26,830
Yep, it did.
49

49

00:03:26,830  -->  00:03:30,650
If I wanted to load multiple arrays, I
can just do that using the load function.
50

50

00:03:32,610  -->  00:03:38,160
So let's go ahead and
call it an archive of arrays.
51

51

00:03:41,660  -->  00:03:47,180
And then I'm going to load
that zip file I just saved.
52

52

00:03:47,180  -->  00:03:52,567
So it's gonna be ziparray.npz.
53

53

00:03:54,947  -->  00:03:57,450
And let's see if this works.
54

54

00:03:57,450  -->  00:03:58,710
So it did.
55

55

00:03:58,710  -->  00:04:03,740
So let's say I wanted to look at that
first array since I saved it as x,
56

56

00:04:03,740  -->  00:04:04,475
I can just call it.
57

57

00:04:04,475  -->  00:04:09,310
Archive_array.
58

58

00:04:09,310  -->  00:04:13,720
Just call x here, and
there's my first array.
59

59

00:04:13,720  -->  00:04:17,240
And then similarly I can
60

60

00:04:19,420  -->  00:04:23,060
call my y, and
I should get the second one, and I do.
61

61

00:04:23,060  -->  00:04:23,850
So that worked out well.
62

62

00:04:25,660  -->  00:04:28,030
And then, one last thing.
63

63

00:04:28,030  -->  00:04:29,340
You can also save and
64

64

00:04:29,340  -->  00:04:33,030
load text files in case you don't
want to save it as an array.
65

65

00:04:34,380  -->  00:04:36,450
So let's just make an array.
66

66

00:04:36,450  -->  00:04:37,850
Actually, let's make a matrix.
67

67

00:04:40,950  -->  00:04:42,190
Using the array function.
68

68

00:04:43,870  -->  00:04:47,820
So we'll just have it be a two by three.
69

69

00:04:49,060  -->  00:04:53,800
So we'll say 1, 2, 3, 4, 5, 6, and
70

70

00:04:53,800  -->  00:04:59,250
then let's just take a look
at what that looks like now.
71

71

00:04:59,250  -->  00:05:01,040
Cool, we have a two by three.
72

72

00:05:03,030  -->  00:05:09,860
And if we wanna save it as a .txt file,
a text file, we can say savetxt.
73

73

00:05:11,590  -->  00:05:15,370
And then we'll give it a name.
74

74

00:05:15,370  -->  00:05:23,840
We'll just say mytextarray.txt
since it's gonna be a text file.
75

75

00:05:26,380  -->  00:05:31,060
We'll choose the array or
the matrix we're gonna save it as.
76

76

00:05:31,060  -->  00:05:38,150
And then if we want to save it as a text
file, we can signify a delimiter.
77

77

00:05:38,150  -->  00:05:43,670
So what the delimiter is, it's just
basically what's separating each value.
78

78

00:05:43,670  -->  00:05:48,600
So in your text file, when you see it,
you're gonna see that it's just a bunch of
79

79

00:05:48,600  -->  00:05:55,920
numbers, and they're all
separated by a symbol, or yeah.
80

80

00:05:55,920  -->  00:05:56,760
Such as a comma.
81

81

00:05:58,140  -->  00:06:03,690
So in this case, we'll signify
that the delimiter is a comma.
82

82

00:06:03,690  -->  00:06:07,740
Just like a comma-separated variable file,
or a .csv.
83

83

00:06:07,740  -->  00:06:11,840
Let's go ahead and
do that, see if it works.
84

84

00:06:11,840  -->  00:06:12,610
Yep, cool.
85

85

00:06:13,610  -->  00:06:21,580
And now let's just take
a look at what we saved.
86

86

00:06:21,580  -->  00:06:28,360
So if we wanted to load a text file,
you can just say np.loadtext.
87

87

00:06:31,861  -->  00:06:37,166
And let's load mytextarray.txt and
88

88

00:06:37,166  -->  00:06:42,636
then I'll signify that my delimiter,
89

89

00:06:42,636  -->  00:06:47,610
the symbol that's separating each
90

90

00:06:47,610  -->  00:06:52,620
individual value was just a comma.
91

91

00:06:52,620  -->  00:06:55,090
And then, let's see what that looks like.
92

92

00:06:57,940  -->  00:07:05,293
So it says error,
numpy doesn't have a loadtxt.
93

93

00:07:05,293  -->  00:07:06,530
Oh, text.
94

94

00:07:06,530  -->  00:07:07,950
Sorry about that.
95

95

00:07:07,950  -->  00:07:10,400
So it's loadtxt, not loadtext.
96

96

00:07:10,400  -->  00:07:12,020
So let's try that again.
97

97

00:07:12,020  -->  00:07:12,600
So we have a TXT file.
98

98

00:07:12,600  -->  00:07:15,430
It should just be loadtxt.
99

99

00:07:15,430  -->  00:07:18,870
My apologies for that, and there we go.
100

100

00:07:18,870  -->  00:07:21,420
Now, it worked.
101

101

00:07:21,420  -->  00:07:23,019
And these periods here, these dots,
102

102

00:07:23,019  -->  00:07:27,340
it's just to signify that it's a floating
number, it's not a natural delimiter.
103

103

00:07:28,440  -->  00:07:29,960
All right, cool.
104

104

00:07:29,960  -->  00:07:33,270
So just a quick overview,
we learned how to load and
105

105

00:07:33,270  -->  00:07:38,160
save arrays either as special
NumPy file formats, .npy,
106

106

00:07:38,160  -->  00:07:41,730
or multiple arrays as .npz.
107

107

00:07:41,730  -->  00:07:48,740
Or we can also load and
save them as text files, .txts.
108

108

00:07:48,740  -->  00:07:51,545
And we'll learn more about loading and
109

109

00:07:51,545  -->  00:07:55,630
other formats in future lectures,
such as Excel files.
110

110

00:07:56,700  -->  00:07:58,270
I'll see you at the next lecture.
