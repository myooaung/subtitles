WEBVTT
1
1

00:00:00.790  -->  00:00:01.741
Hey guys, welcome to lecture 34.
2

2

00:00:01.741  -->  00:00:06.740
In this lecture we're gonna be going
over pivoting and pivot tables.
3

3

00:00:08.610  -->  00:00:11.770
So we're gonna import numpy as np,
pandas as pd, and
4

4

00:00:11.770  -->  00:00:14.197
then from pandas we're gonna
import series and data frames.
5

5

00:00:15.520  -->  00:00:20.530
So the important thing about pivot tables,
they can really depend on what information
6

6

00:00:20.530  -->  00:00:24.880
you're actually looking for, so if you're
not familiar with pivot tables in general,
7

7

00:00:24.880  -->  00:00:28.030
we can just come over here to
the pivot table Wikipedia page.
8

8

00:00:29.250  -->  00:00:32.770
So a lot of times for databases, for
9

9

00:00:32.770  -->  00:00:37.370
data entry and storage, you're
data's gonna appear in a flat table.
10

10

00:00:37.370  -->  00:00:42.860
So if we look at this first table example,
you have multiple regions,
11

11

00:00:42.860  -->  00:00:47.460
east and west, but then you have
multiple entries for each region.
12

12

00:00:48.850  -->  00:00:55.460
So, for instance, you have the boy and
girl subset of the east and west regions.
13

13

00:00:55.460  -->  00:00:59.020
And what you wanna first start off with
when you're creating a pivot table, is,
14

14

00:00:59.020  -->  00:01:00.720
what am I seeking?
15

15

00:01:00.720  -->  00:01:03.420
So what information do I wanna know.
16

16

00:01:03.420  -->  00:01:05.230
And that's going to be one of
the most important questions you
17

17

00:01:05.230  -->  00:01:09.440
can ask yourself when analyzing data,
or just data science in general,
18

18

00:01:09.440  -->  00:01:12.330
is what information do you
actually want to know?
19

19

00:01:13.340  -->  00:01:14.607
So in this example,
20

20

00:01:14.607  -->  00:01:19.609
they wanted to know how many units did we
sell in each region for every ship date.
21

21

00:01:19.609  -->  00:01:24.921
And so they created this pivot table,
and this pivot table will basically,
22

22

00:01:24.921  -->  00:01:29.821
sum up all the shipment units for
each date, depending on the region.
23

23

00:01:29.821  -->  00:01:35.360
So this kind of pivot table can really
depend on what information you want.
24

24

00:01:35.360  -->  00:01:38.035
So you could have also asked how
many units did you did you sell to
25

25

00:01:38.035  -->  00:01:40.675
boy versus girls on particular dates.
26

26

00:01:40.675  -->  00:01:44.463
What was the average price based on
the regions, etcetera, etcetera.
27

27

00:01:46.105  -->  00:01:51.040
So in order to kinda just see how
to do pivot tables in pandas,
28

28

00:01:51.040  -->  00:01:52.780
we're gonna create some data to play with.
29

29

00:01:54.740  -->  00:02:00.630
This data I'm gonna get from using
the panda's testing utility,
30

30

00:02:00.630  -->  00:02:03.410
and the way I'm gonna do that
is I'm just gonna copy and
31

31

00:02:03.410  -->  00:02:07.860
paste from one of the I Python
notebooks on the Github.
32

32

00:02:07.860  -->  00:02:11.879
So it's really outside the course to know,
33

33

00:02:11.879  -->  00:02:17.321
is framed to know how I made this
state of frame to work with.
34

34

00:02:17.321  -->  00:02:20.237
We're just using the panda's
testing utility, but
35

35

00:02:20.237  -->  00:02:24.459
it's outside the scope of the course to
need to know how I created this table.
36

36

00:02:24.459  -->  00:02:28.890
We're just basically creating
an un pivot function,
37

37

00:02:28.890  -->  00:02:34.095
which gives us a bit of a sloppy,
flat data table to work with.
38

38

00:02:34.095  -->  00:02:36.395
So let's go ahead and
look at what the D frame looks like.
39

39

00:02:38.325  -->  00:02:42.265
Cool, so I have multiple instances
of the variables, A, B and C.
40

40

00:02:43.340  -->  00:02:45.060
Different values for each one.
41

41

00:02:45.060  -->  00:02:48.560
And then, different dates for
each one as well.
42

42

00:02:48.560  -->  00:02:52.610
So again, don't worry about how
I made this data frame, it's
43

43

00:02:52.610  -->  00:02:56.765
just using the testing utility, but you
won't need to know that for this course.
44

44

00:02:56.765  -->  00:03:01.340
It's just a convenient way to make
data frames to test certain things.
45

45

00:03:01.340  -->  00:03:05.825
If you want, you can look in more on the
documentation about utility testing ,but
46

46

00:03:05.825  -->  00:03:09.400
this lecture's just to show you if
you had a certain data frame and
47

47

00:03:09.400  -->  00:03:13.630
you wanted to know a certain thing,
how could you make the pivot table for it?
48

48

00:03:14.700  -->  00:03:19.430
So, this data frame,
we can think about this as stacked.
49

49

00:03:19.430  -->  00:03:22.230
So note how there's multiple variables and
values for the dates.
50

50

00:03:23.250  -->  00:03:24.230
And let's pivot the data.
51

51

00:03:25.260  -->  00:03:29.210
So let's say we wanted to know
the variables, let's say A, B, and C, and
52

52

00:03:29.210  -->  00:03:31.340
D for particular dates.
53

53

00:03:32.610  -->  00:03:36.339
What were their values?
So we can go ahead and
54

54

00:03:36.339  -->  00:03:40.951
say D frame underscore PIV.
55

55

00:03:40.951  -->  00:03:44.906
So our pivoted data frame,
in order to pivot it,
56

56

00:03:44.906  -->  00:03:48.870
we just call the pivot
method on that data frame.
57

57

00:03:49.970  -->  00:03:53.620
And then what we pass is the row and
58

58

00:03:53.620  -->  00:03:56.650
column indexes, and then,
optionally, a fill value.
59

59

00:03:57.848  -->  00:04:03.620
So, I'm gonna want my rows to be the date,
so I'll pass that first.
60

60

00:04:03.620  -->  00:04:06.720
I'm gonna want my columns
to be the variable.
61

61

00:04:09.540  -->  00:04:15.220
And I'm gonna want my value,
my fill value, to just be the values.
62

62

00:04:15.220  -->  00:04:18.410
So that's how you do a pivot table,
you decide what you want for
63

63

00:04:18.410  -->  00:04:23.310
the rows, the columns, and
what you want the fill value to be.
64

64

00:04:23.310  -->  00:04:27.870
So I can take this stacked data frame and
basically unstack it and pivot it.
65

65

00:04:27.870  -->  00:04:28.390
So let's go ahead and do that.
66

66

00:04:32.290  -->  00:04:34.410
And then let's see what it looks like.
67

67

00:04:36.100  -->  00:04:37.300
Alt + Enter.
68

68

00:04:37.300  -->  00:04:37.990
All right, cool.
69

69

00:04:37.990  -->  00:04:43.190
So now I've pivoted this table, and
I can see some of the values for
70

70

00:04:43.190  -->  00:04:46.760
A, B, C, and D, depending on the date.
71

71

00:04:46.760  -->  00:04:50.240
So, this is just a general introduction
to pivoting and pivot tables.
72

72

00:04:50.240  -->  00:04:54.210
It's gonna really depend on what
specific information you wanna know and
73

73

00:04:54.210  -->  00:04:55.970
how you wanna present it.
74

74

00:04:55.970  -->  00:04:59.640
But it's good to know that you can easily
pivot data frames, just calling the pivot
75

75

00:04:59.640  -->  00:05:03.340
method and deciding what you want the row,
column, and values to be.
76

76

00:05:03.340  -->  00:05:08.060
It's pretty much that simple, and
it's really gonna depend on what your
77

77

00:05:08.060  -->  00:05:11.100
flat data table,
your stack data table looks like, and
78

78

00:05:11.100  -->  00:05:14.330
what information you want
to come out with them.
79

79

00:05:14.330  -->  00:05:17.800
Okay, so that's about it for
pivoting, again,
80

80

00:05:17.800  -->  00:05:20.420
you don't have to worry about
how I made that data frame.
81

81

00:05:20.420  -->  00:05:23.710
It's just using some testing utility
that we won't be using in the future.
82

82

00:05:24.960  -->  00:05:28.980
And next up we're gonna learn how to
find duplicates in data frames, so
83

83

00:05:28.980  -->  00:05:30.850
if you have duplicate values.
84

84

00:05:30.850  -->  00:05:31.350
Okay.
