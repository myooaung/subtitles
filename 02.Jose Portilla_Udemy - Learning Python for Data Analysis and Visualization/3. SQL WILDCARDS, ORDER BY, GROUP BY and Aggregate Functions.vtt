WEBVTT
1
1

00:00:02.260  -->  00:00:06.430
Hello everyone and welcome to
the next lecture in the SQL Appendix.
2

2

00:00:06.430  -->  00:00:11.390
So in this lecture we're going to be going
over wildcard, ORDER BY, GROUP BY, and
3

3

00:00:11.390  -->  00:00:13.070
then aggregate functions.
4

4

00:00:13.070  -->  00:00:14.339
All in SQL with Python and Pandas.
5

5

00:00:14.339  -->  00:00:20.208
So just like in the last video,
we're going to start by importing sqlite,
6

6

00:00:20.208  -->  00:00:26.182
importing pandas as pd, making our
connection using sqlite3.connect.
7

7

00:00:26.182  -->  00:00:29.751
And then either your pathway to your
database, or your database name,
8

8

00:00:29.751  -->  00:00:31.480
if it's saved in the same folder.
9

9

00:00:33.800  -->  00:00:38.000
Then you can set your
function as sql_to_df.
10

10

00:00:38.000  -->  00:00:42.960
Again, this function uses
pandas to pass a SQL query.
11

11

00:00:42.960  -->  00:00:46.900
Use the connection from SQLite 3 and
then returns the data frame.
12

12

00:00:48.060  -->  00:00:50.960
So before we begin with wildcards,
ORDER BY and
13

13

00:00:50.960  -->  00:00:53.800
GROUP BY we're gonna take a quick
look at aggregate functions.
14

14

00:00:53.800  -->  00:00:58.500
These should be super
familiar from pandas, but for
15

15

00:00:58.500  -->  00:01:01.450
SQL, you can just call any of
these aggregate functions,
16

16

00:01:01.450  -->  00:01:05.540
such as average, count, first,
last, max, min and sum.
17

17

00:01:05.540  -->  00:01:07.440
The descriptions are right
there in the bullet points.
18

18

00:01:07.440  -->  00:01:11.550
For instance, average as you would expect,
returns the average value, that AVG.
19

19

00:01:11.550  -->  00:01:15.660
And you can call any of these
aggregate functions on a column
20

20

00:01:15.660  -->  00:01:20.150
to get the resulting values back
basically like you would in pandas.
21

21

00:01:20.150  -->  00:01:26.690
So to count the number of customers
we'll send a query called SELECT COUNT,
22

22

00:01:26.690  -->  00:01:32.490
and then we'll count customer_id
from customer table,
23

23

00:01:32.490  -->  00:01:36.820
and then if we pass that down, it'll count
the total number of customers there.
24

24

00:01:38.260  -->  00:01:42.010
Great, so go ahead and experiment
with the other aggregate functions.
25

25

00:01:42.010  -->  00:01:45.738
The usual syntax is SELECT
column_name comma then your
26

26

00:01:45.738  -->  00:01:49.078
aggregate_function passed
on the column name.
27

27

00:01:49.078  -->  00:01:51.498
Then FROM table_name WHERE, and
28

28

00:01:51.498  -->  00:01:56.426
let's say your column name does something,
or whatever you decide.
29

29

00:01:56.426  -->  00:02:00.200
Or you can do it without a WHERE operator.
30

30

00:02:02.610  -->  00:02:06.830
Now moving on to SQL wildcards,
these are a little different.
31

31

00:02:06.830  -->  00:02:10.230
A wildcard character can be used to
substitute for any other characters in
32

32

00:02:10.230  -->  00:02:16.000
a string, so in SQL wildcard characters
are used with the SQL LIKE operator and
33

33

00:02:16.000  -->  00:02:19.310
there will be an exception to that,
which we'll go over later.
34

34

00:02:19.310  -->  00:02:22.000
The LIKE operator is used in
a WHERE clause to search for
35

35

00:02:22.000  -->  00:02:24.260
a specified pattern in a column.
36

36

00:02:24.260  -->  00:02:27.560
So there's several wildcard operators.
37

37

00:02:27.560  -->  00:02:31.030
On this table you can see the three
main wildcard operators here.
38

38

00:02:31.030  -->  00:02:34.780
There's the percentage sign and
that's used as a substitute for zero or
39

39

00:02:34.780  -->  00:02:36.260
more characters.
40

40

00:02:36.260  -->  00:02:40.610
There's the underscore which is used
as a substitute for a single character.
41

41

00:02:40.610  -->  00:02:42.800
And then you can make
a character list in brackets and
42

42

00:02:42.800  -->  00:02:45.230
that sets in ranges of
characters to match.
43

43

00:02:46.720  -->  00:02:47.760
So let's see them in action.
44

44

00:02:48.890  -->  00:02:51.035
First the percentage wildcard.
45

45

00:02:51.035  -->  00:02:55.395
In this case, I wanna select any
customers whose name starts with an M.
46

46

00:02:55.395  -->  00:02:57.511
To do that, my query looks like this.
47

47

00:02:57.511  -->  00:03:02.767
It says SELECT * FROM customer,
that table,
48

48

00:03:02.767  -->  00:03:07.407
WHERE, this is where the wildcard
statement happens, I'm gonna say,
49

49

00:03:07.407  -->  00:03:12.067
WHERE my column, first_name,
is LIKE and then,
50

50

00:03:12.067  -->  00:03:16.620
the statement will be a capital M and
then, a % sign.
51

51

00:03:16.620  -->  00:03:19.400
That percentage sign will
basically tell the query,
52

52

00:03:19.400  -->  00:03:24.060
look through the first name column
where any value starts with an M and
53

53

00:03:24.060  -->  00:03:28.020
the percentage sign is a wildcard for
any values after M.
54

54

00:03:28.020  -->  00:03:31.100
So here we grab it and
pass it through our function, and
55

55

00:03:31.100  -->  00:03:35.970
now I see all my customers that
have M starting their first names.
56

56

00:03:35.970  -->  00:03:39.750
So Mary, Maria, Margaret,
Michelle, Melissa, etc.
57

57

00:03:39.750  -->  00:03:40.670
Great.
58

58

00:03:40.670  -->  00:03:46.176
So now we'll see the underscore wildcard,
so let's say I wanna select
59

59

00:03:46.176  -->  00:03:51.520
any customers whose last name ends
with one letter and then I-N-G.
60

60

00:03:51.520  -->  00:03:56.336
To do that, I would say,
just like the last query,
61

61

00:03:56.336  -->  00:04:03.523
SELECT everything FROM customer WHERE
my last name_column is LIKE _ING.
62

62

00:04:03.523  -->  00:04:06.320
And in this case, there was one person,
63

63

00:04:06.320  -->  00:04:11.470
King, Melissa King, has one letter,
as a wildcard, ING.
64

64

00:04:11.470  -->  00:04:16.940
If I wanted to do a search for anyone
who had a last name ending on ING no
65

65

00:04:16.940  -->  00:04:23.370
matter how many letters came in front of
it, that's when I would pass the %ING.
66

66

00:04:23.370  -->  00:04:27.460
And notice all these wildcard statements
are enclosed in single quotes.
67

67

00:04:27.460  -->  00:04:30.970
So if I scroll up here,
this was also enclosed in single quotes.
68

68

00:04:33.960  -->  00:04:36.005
Now I'm gonna move on to
the character list wildcard.
69

69

00:04:37.110  -->  00:04:39.090
There's an important
thing to note with this.
70

70

00:04:39.090  -->  00:04:43.362
Sine we're using SQLite it's a little
different then other SQL formats such
71

71

00:04:43.362  -->  00:04:43.960
as MySQL.
72

72

00:04:43.960  -->  00:04:48.668
So in MySQL you would use something
around WHERE your value LIKE and then you
73

73

00:04:48.668  -->  00:04:53.688
would pass your character list and then
a percentage sign all in single quotes.
74

74

00:04:53.688  -->  00:04:59.269
and SQLite what you use is the WHERE
value and then instead of writing LIKE
75

75

00:04:59.269  -->  00:05:04.682
you write GLOB, and then charlist*
instead of the percentage sign.
76

76

00:05:04.682  -->  00:05:07.147
So, to show you what I mean by that,
77

77

00:05:07.147  -->  00:05:12.592
let's say I wanna select any customers
whose first name begins with an A or a B.
78

78

00:05:12.592  -->  00:05:18.811
I'll SELECT everything FROM the customer
table WHERE first_name column,
79

79

00:05:18.811  -->  00:05:24.850
and instead of LIKE now, I say GLOB
since we're using SQLite with Python.
80

80

00:05:25.880  -->  00:05:28.987
And then my character list, AB, so
81

81

00:05:28.987  -->  00:05:34.167
you just pass your characters
as a string all put together,
82

82

00:05:34.167  -->  00:05:40.090
AB, in brackets, and then an asterisk
enclosed by single quotes.
83

83

00:05:40.090  -->  00:05:47.855
And that's how you do a character list
in SQL with Python pandas and SQLite.
84

84

00:05:47.855  -->  00:05:49.052
Great.
85

85

00:05:51.097  -->  00:05:54.300
So now let's go ahead and
dive into SQL ORDER BY.
86

86

00:05:54.300  -->  00:05:59.470
So the ORDER BY keyword is used to sort
the result set by one or more columns.
87

87

00:05:59.470  -->  00:06:03.439
The ORDER BY keyword sorts the records
in ascending order by default, and
88

88

00:06:03.439  -->  00:06:07.728
if you wanna do it in descending order,
you can use the DESC keyword, stands for
89

89

00:06:07.728  -->  00:06:08.510
descending.
90

90

00:06:08.510  -->  00:06:10.518
The syntax for this looks like this.
91

91

00:06:10.518  -->  00:06:15.365
You SELECT the column FROM the table, and
then you say ORDER BY whatever column
92

92

00:06:15.365  -->  00:06:20.110
name you wanna order by, and then you
can specify ascending or descending.
93

93

00:06:20.110  -->  00:06:22.801
So let's say I want to
select all customers and
94

94

00:06:22.801  -->  00:06:24.670
order the results by last name.
95

95

00:06:24.670  -->  00:06:26.655
What does that query look like,
it looks a little like this.
96

96

00:06:26.655  -->  00:06:32.960
SELECT * FROM customer, and
then I ORDER BY the last_name.
97

97

00:06:34.450  -->  00:06:37.320
So now if we look at just what the head
of that data frame looks like after
98

98

00:06:37.320  -->  00:06:40.660
passing it through our function,
we can see here the last_name.
99

99

00:06:40.660  -->  00:06:42.710
They're all ordered in alphabetical order.
100

100

00:06:42.710  -->  00:06:46.435
Great, so it's basically almost
like a sort or order in pandas.
101

101

00:06:46.435  -->  00:06:48.983
If I wanted to select all customers and
102

102

00:06:48.983  -->  00:06:54.235
order the results by last_name descending,
I would do the exact same thing,
103

103

00:06:54.235  -->  00:06:59.183
but after ordering by the last_name,
I would pass DESC for descending.
104

104

00:06:59.183  -->  00:07:03.275
And now you can see the last_name goes
in reverse alphabetical order, or
105

105

00:07:03.275  -->  00:07:05.190
descending alphabetical order.
106

106

00:07:07.360  -->  00:07:09.330
Finally, let's look at GROUP BY.
107

107

00:07:09.330  -->  00:07:11.470
So, the GROUP BY statement is used,
usually,
108

108

00:07:11.470  -->  00:07:15.365
with an aggregate function to group
the results by one or more columns.
109

109

00:07:15.365  -->  00:07:17.460
Syntax usually looks like this.
110

110

00:07:17.460  -->  00:07:20.480
It says SELECT your column name.
111

111

00:07:20.480  -->  00:07:23.030
And then your aggregate
function on a column name.
112

112

00:07:24.170  -->  00:07:24.900
FROM your table.
113

113

00:07:25.930  -->  00:07:29.500
And then usually ask for a WHERE
statement, so WHERE your column name and
114

114

00:07:29.500  -->  00:07:32.080
then some sort of operator and
then your value.
115

115

00:07:32.080  -->  00:07:33.559
And then you GROUP BY that column name.
116

116

00:07:34.950  -->  00:07:38.150
So let's say I wanted to count
the number of customers per store.
117

117

00:07:39.320  -->  00:07:41.710
And I wanted to group
them by the store_id.
118

118

00:07:41.710  -->  00:07:42.300
How could I do that?
119

119

00:07:44.100  -->  00:07:49.306
If we see the query here,
I SELECT my column store_id,
120

120

00:07:49.306  -->  00:07:55.630
I want to count the number of customers or
customer_id column FROM the customer table
121

121

00:07:57.470  -->  00:08:01.550
and then I want to GROUP BY the store_id.
122

122

00:08:01.550  -->  00:08:04.650
And this should be really familiar
from the pandas GROUP BY statements.
123

123

00:08:04.650  -->  00:08:06.580
It's basically the same thing.
124

124

00:08:06.580  -->  00:08:10.994
And here now I've grabbed it using SQL,
grouped it by the store_id.
125

125

00:08:10.994  -->  00:08:13.210
So that's it for now.
126

126

00:08:13.210  -->  00:08:16.934
We learned about SQL wildcards,
ORDER BY, GROUP BY, and
127

127

00:08:16.934  -->  00:08:18.990
then the aggregate functions.
128

128

00:08:18.990  -->  00:08:19.999
And that's it for now.
129

129

00:08:19.999  -->  00:08:22.136
Great, okay, thanks guys.
