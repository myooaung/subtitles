WEBVTT
1
1

00:00:01.470  -->  00:00:02.680
Hey guys.
2

2

00:00:02.680  -->  00:00:06.240
Welcome to lecture 14 now.
3

3

00:00:06.240  -->  00:00:08.560
This lecture will be going over series.
4

4

00:00:08.560  -->  00:00:11.330
So this is going to be the first lecture
where we start to take a look at
5

5

00:00:11.330  -->  00:00:13.280
the Pandas Module.
6

6

00:00:13.280  -->  00:00:16.820
It's gonna be a really useful module for
analyzing data.
7

7

00:00:18.280  -->  00:00:20.110
So let's see how it works.
8

8

00:00:20.110  -->  00:00:24.030
First off let's go ahead and
import Numpy as np, and then
9

9

00:00:26.290  -->  00:00:32.200
we're gonna import pandas as pd.
10

10

00:00:32.200  -->  00:00:36.532
And from pandas we're gonna
11

11

00:00:36.532  -->  00:00:41.230
import Series and DataFrame.
12

12

00:00:42.710  -->  00:00:46.820
So, Series is what we're gonna be
working with mostly for this lecture.
13

13

00:00:46.820  -->  00:00:51.039
We're gonna be using it so often that we
don't wanna have to write PD.Series or
14

14

00:00:51.039  -->  00:00:55.190
PD.DataFrame all the time, so
we're just gonna import those separately.
15

15

00:00:55.190  -->  00:01:01.627
So let's go ahead and
click Alt+Enter, Wanna import.
16

16

00:01:01.627  -->  00:01:03.120
Cool.
17

17

00:01:03.120  -->  00:01:04.600
So let's create a series.
18

18

00:01:04.600  -->  00:01:11.210
A series is like an array in Numpi except
it has data labels so it's indexed.
19

19

00:01:12.320  -->  00:01:13.210
Show you what I mean.
20

20

00:01:13.210  -->  00:01:15.910
Let's go ahead and
just create an object here.
21

21

00:01:17.530  -->  00:01:22.605
And we'll call Series, kind of in
the same way we were calling np.array.
22

22

00:01:22.605  -->  00:01:28.720
And we'll put a little list or array at 3.
23

23

00:01:28.720  -->  00:01:31.190
Let's say 3, 6, 9, 12.
24

24

00:01:31.190  -->  00:01:33.560
Just multiples of 3.
25

25

00:01:33.560  -->  00:01:34.848
And then let's go ahead and show that.
26

26

00:01:34.848  -->  00:01:37.103
Alt+Ent.
27

27

00:01:37.103  -->  00:01:38.520
Cool.
28

28

00:01:38.520  -->  00:01:40.450
So let's take a look at
what's different here.
29

29

00:01:40.450  -->  00:01:44.540
You can see that each value is indexed so
30

30

00:01:44.540  -->  00:01:48.860
the zero index we'll call a 3.
31

31

00:01:48.860  -->  00:01:53.420
If we want to just see
the values of this series
32

32

00:01:53.420  -->  00:01:58.344
object we can say call values on it so
dot values.
33

33

00:02:00.305  -->  00:02:03.688
And I'll show us the values in an array.
34

34

00:02:03.688  -->  00:02:08.760
If we wanna see the index,
We can also say dot index.
35

35

00:02:10.550  -->  00:02:12.260
And that'll show the index values,
0, 1, 2, 3.
36

36

00:02:12.260  -->  00:02:18.450
So each of these index values
corresponds with these series values.
37

37

00:02:20.110  -->  00:02:23.950
So, since index is a big
part of series and
38

38

00:02:23.950  -->  00:02:25.870
later on we'll see data frames, as well,
39

39

00:02:34.550  -->  00:02:35.676
let's go ahead and create a series
with an index that we specify.
40

40

00:02:35.676  -->  00:02:36.180
So, let's go ahead and create a series.
41

41

00:02:36.180  -->  00:02:40.540
I'm gonna call this one ww2_cas, so
42

42

00:02:40.540  -->  00:02:44.240
we're gonna make a series for
World War II casualties.
43

43

00:02:44.240  -->  00:02:46.920
And I'm getting this
information off Wikipedia.
44

44

00:02:49.160  -->  00:02:55.600
So let's say,
the numbers I'm gonna use are 8.7 million.
45

45

00:02:55.600  -->  00:02:59.070
So 1, 2, 1, 2, 3.
46

46

00:03:00.300  -->  00:03:03.167
And you can really put in any values
you want here, but this is just for
47

47

00:03:03.167  -->  00:03:04.315
demonstration purposes.
48

48

00:03:04.315  -->  00:03:07.762
1, 2, 3, 4.3 million,
49

49

00:03:07.762  -->  00:03:13.015
and then 3 million on this guy, six zeros.
50

50

00:03:13.015  -->  00:03:16.495
2.1 million, three zeros, and
51

51

00:03:16.495  -->  00:03:21.140
then we'll go with 400,000, 2, 3.
52

52

00:03:21.140  -->  00:03:28.400
So, those are the values of the series and
53

53

00:03:28.400  -->  00:03:32.830
then we can say comma index equals and
54

54

00:03:32.830  -->  00:03:37.380
now we're gonna make an index for
each of these value numbers.
55

55

00:03:38.510  -->  00:03:41.090
So, if you know something
about World War II,
56

56

00:03:41.090  -->  00:03:46.920
you might guess that that 8.7 million
value belongs to the USSR's casualties.
57

57

00:03:48.870  -->  00:03:52.676
They suffered the most casualties in
that war, as far as any allied nation.
58

58

00:03:56.262  -->  00:03:58.934
Then second one's was Germany's.
59

59

00:04:01.890  -->  00:04:02.990
Third one was actually China.
60

60

00:04:04.120  -->  00:04:05.620
Suffered quite a bit of casualties.
61

61

00:04:08.240  -->  00:04:10.010
Next one was Japan's casualties.
62

62

00:04:11.660  -->  00:04:16.080
And then last one was
United States casualties.
63

63

00:04:16.080  -->  00:04:18.768
Then let's go ahead and
see what that series looks like.
64

64

00:04:22.685  -->  00:04:23.880
Cool.
65

65

00:04:23.880  -->  00:04:27.360
So now our index is
actually the country name.
66

66

00:04:28.360  -->  00:04:32.230
And then the value is
the number of casualties.
67

67

00:04:32.230  -->  00:04:36.250
So we can use index values
to select series values.
68

68

00:04:36.250  -->  00:04:40.570
So to show you what I mean by that,
we'll type in our series name.
69

69

00:04:42.155  -->  00:04:43.795
and then type in our index names.
70

70

00:04:43.795  -->  00:04:47.885
Let's say we wanted to know
the casualties in the United States,
71

71

00:04:49.625  -->  00:04:52.415
we could call that and
then we would get the 400,000 mark.
72

72

00:04:56.385  -->  00:05:02.160
A really interesting thing we can do with
series is check with array operations,
73

73

00:05:02.160  -->  00:05:06.193
so let's say I wanted to check
74

74

00:05:06.193  -->  00:05:11.820
which countries had
75

75

00:05:11.820  -->  00:05:16.960
casualties greater than 4 million.
76

76

00:05:19.980  -->  00:05:24.390
The way I can do that, sorry for
77

77

00:05:24.390  -->  00:05:28.360
the spelling and countries.
78

78

00:05:31.010  -->  00:05:33.290
So how can we do that using a series?
79

79

00:05:33.290  -->  00:05:37.720
Well we can, type out our series and
80

80

00:05:37.720  -->  00:05:40.890
then we can just put in
an array operation argument.
81

81

00:05:40.890  -->  00:05:45.940
So for instance, we'll put in our series
82

82

00:05:47.920  -->  00:05:53.080
greater than 4 million, or four,
one, two, three, one, two, three.
83

83

00:05:54.110  -->  00:06:01.990
So we're calling for the values that were
greater than 4 million in the series.
84

84

00:06:03.370  -->  00:06:05.770
Let's go ahead and see what happens.
85

85

00:06:05.770  -->  00:06:06.570
Cool.
86

86

00:06:06.570  -->  00:06:11.409
So you get that USSR and Germany are the
two countries that had casualties greater
87

87

00:06:11.409  -->  00:06:13.058
than that 4 million mark.
88

88

00:06:15.729  -->  00:06:21.480
We can also treat a series as
an ordered dictionary in Python.
89

89

00:06:21.480  -->  00:06:27.020
So for instance if we wanted to just check
if a index or value was in a series,
90

90

00:06:27.020  -->  00:06:33.269
we could say something like
91

91

00:06:33.269  -->  00:06:38.810
USSR in our series name, and
we'll either get a true or false.
92

92

00:06:38.810  -->  00:06:43.270
We should get a true in this case
since USSR is in our series, and
93

93

00:06:43.270  -->  00:06:46.680
we do get the true.
94

94

00:06:46.680  -->  00:06:49.740
Since it kind of behaves
a bit like a dictionary,
95

95

00:06:49.740  -->  00:06:53.410
we can actually convert
a series into a dictionary.
96

96

00:06:54.490  -->  00:06:59.900
So to do that,
I'll create a dictionary name,
97

97

00:06:59.900  -->  00:07:03.050
I'll call it WW2_dict.
98

98

00:07:03.050  -->  00:07:07.558
And the way to convert a series
into a dictionary, is just calling
99

99

00:07:07.558  -->  00:07:14.270
to_dict on it.
100

100

00:07:14.270  -->  00:07:17.290
And then I'll show what that looks like.
101

101

00:07:19.760  -->  00:07:23.160
Cool, so now our series is
actually turned into a dictionary.
102

102

00:07:25.080  -->  00:07:27.680
Let's say we wanted to convert
it back into a series,
103

103

00:07:29.420  -->  00:07:34.310
we can call it whatever we
want to name that series, and
104

104

00:07:34.310  -->  00:07:40.410
then we can just feed into the series
command, that dictionary name.
105

105

00:07:43.660  -->  00:07:47.390
You can actually feed
dictionaries into series.
106

106

00:07:48.700  -->  00:07:50.630
Let's just go ahead and
show what that looks like.
107

107

00:07:53.640  -->  00:07:55.587
And now we have a series again.
108

108

00:07:59.213  -->  00:08:07.780
So let's say you were gonna pass
a dictionary into the series.
109

109

00:08:07.780  -->  00:08:10.120
The index will have
the dictionary keys in order.
110

110

00:08:11.350  -->  00:08:16.570
So to show you what I mean
by that let's create a list.
111

111

00:08:16.570  -->  00:08:21.470
So how about we create another list
of countries, let's say China.
112

112

00:08:23.500  -->  00:08:25.440
These will all be strings, Germany.
113

113

00:08:27.760  -->  00:08:32.790
You don't have to do this many, but
this is just to follow along with.
114

114

00:08:32.790  -->  00:08:37.780
The iPython Notebook
that's on the GitHub link.
115

115

00:08:40.170  -->  00:08:43.060
And, lets just do Argentina for
another one.
116

116

00:08:44.650  -->  00:08:46.530
So we have our countries.
117

117

00:08:46.530  -->  00:08:49.310
So we have a list of countries, and
118

118

00:08:49.310  -->  00:08:54.215
we can redefine another series,
so we'll call it object 2.
119

119

00:08:58.700  -->  00:09:00.400
We'll have it be a Series.
120

120

00:09:01.790  -->  00:09:06.060
We'll pass that World War II
dictionary on it, and
121

121

00:09:07.210  -->  00:09:14.490
then we'll set the index to come
from our list of countries.
122

122

00:09:14.490  -->  00:09:15.910
And we'll see what that looks like.
123

123

00:09:20.290  -->  00:09:28.290
So if you notice here, Argentina was
not in our original dictionary list.
124

124

00:09:28.290  -->  00:09:35.550
So we scroll back up here and see ww2_dict
only had China, Germany, Japan, USA, USSR.
125

125

00:09:37.020  -->  00:09:42.440
So since Argentina wasn't in there pandas,
when you pass it through a series with
126

126

00:09:42.440  -->  00:09:47.850
a particular index that didn't have
that value, it'll just give a nan value.
127

127

00:09:47.850  -->  00:09:50.638
So it didn't find it,
just that null value.
128

128

00:09:50.638  -->  00:09:55.550
Pandas has built-in
methods to find null and
129

129

00:09:55.550  -->  00:09:57.310
replace them or
check through there or not.
130

130

00:09:58.350  -->  00:10:00.100
Those are is null and not null.
131

131

00:10:00.100  -->  00:10:04.780
So let's take a look at
what those look like, so
132

132

00:10:04.780  -->  00:10:10.174
we can call pd.isnull,
that object two we just made.
133

133

00:10:15.344  -->  00:10:22.610
And so it's gonna check every value and
see if it finds a null value there or not.
134

134

00:10:22.610  -->  00:10:27.520
So Argentina showed up true since
there was a null value there.
135

135

00:10:27.520  -->  00:10:29.380
Let's say you want to do
the opposite command,
136

136

00:10:29.380  -->  00:10:33.210
you wanted to find where
there were not nulls.
137

137

00:10:33.210  -->  00:10:38.100
So you can just call
notnull on the object.
138

138

00:10:38.100  -->  00:10:42.410
And then you'll get the opposite.
139

139

00:10:42.410  -->  00:10:44.190
So China, German,
140

140

00:10:44.190  -->  00:10:48.680
Japan, USA, USSR, were not nulls,
since they did have number values there.
141

141

00:10:48.680  -->  00:10:51.750
Argentina is false, it was a null.
142

142

00:10:51.750  -->  00:10:53.610
So it was not a not null.
143

143

00:10:56.450  -->  00:11:02.990
Let's go ahead and
check out that World War 2 series again.
144

144

00:11:04.800  -->  00:11:10.550
Cool.
So,
145

145

00:11:10.550  -->  00:11:13.140
another thing we can do in Pandas,
is we can add
146

146

00:11:18.040  -->  00:11:21.830
Series to Series, and it'll
automatically align the data by index.
147

147

00:11:23.100  -->  00:11:31.140
To show you what I mean by that,
let's see what object two looked like.
148

148

00:11:33.730  -->  00:11:38.320
So they're the exact same thing except
object two has a null value for Argentina.
149

149

00:11:39.320  -->  00:11:46.548
So if we add up our World War II series,
add it to object 2.
150

150

00:11:46.548  -->  00:11:53.420
What we should expect to see is in China,
have $6 million.
151

151

00:11:54.460  -->  00:12:00.874
In Germany, have $8.6 million etc.
152

152

00:12:00.874  -->  00:12:06.310
What we will expect is that
there's no value for Argentina.
153

153

00:12:06.310  -->  00:12:07.530
So let's just see what happens here.
154

154

00:12:09.180  -->  00:12:10.400
Cool.
155

155

00:12:10.400  -->  00:12:12.350
So it lines them up by index.
156

156

00:12:12.350  -->  00:12:14.340
You don't have specify.
157

157

00:12:14.340  -->  00:12:18.710
Even if they're in the wrong order it'll
still add up the correct values by index.
158

158

00:12:21.220  -->  00:12:25.780
You can give your series names.
159

159

00:12:25.780  -->  00:12:32.950
So for instance object 2,
we can name it to have a string name.
160

160

00:12:32.950  -->  00:12:39.270
So if you want to get more specific and
call it World War 2 Casualties
161

161

00:12:42.930  -->  00:12:45.190
and then let's show you what
happens when you do that.
162

162

00:12:46.850  -->  00:12:49.730
So I'll show you the series and
then I'll show you the name of the series,
163

163

00:12:49.730  -->  00:12:51.120
World War II Casualties there.
164

164

00:12:52.200  -->  00:12:56.800
So when you're dealing with Python, it's
still gonna have this object name, obj2,
165

165

00:12:56.800  -->  00:13:01.430
but the actual series itself has a name,
World War II Casualties.
166

166

00:13:03.690  -->  00:13:05.600
You can also name the index.
167

167

00:13:05.600  -->  00:13:09.360
Since our index is just
a bunch of countries,
168

168

00:13:09.360  -->  00:13:14.630
we can do that by calling index and
then calling name on the index.
169

169

00:13:15.840  -->  00:13:22.470
We can label that index as just countries.
170

170

00:13:24.550  -->  00:13:25.800
Now let's see what that looks like.
171

171

00:13:27.440  -->  00:13:30.990
Cool.
Now you've labeled this index countries.
172

172

00:13:30.990  -->  00:13:36.860
It's a bit like Excel, like you're
labeling this index column countries.
173

173

00:13:39.010  -->  00:13:41.430
So that's a little intro to series.
174

174

00:13:41.430  -->  00:13:43.900
Next we'll learn about data frames.
175

175

00:13:43.900  -->  00:13:46.890
We're gonna be working a lot with
series and a lot with data frames so
176

176

00:13:46.890  -->  00:13:49.440
you're gonna see all of this often.
177

177

00:13:49.440  -->  00:13:52.950
So don't worry if you didn't
quite get it this first time.
178

178

00:13:52.950  -->  00:13:56.300
You'll see it many,
many more times throughout this lecture.
179

179

00:13:56.300  -->  00:13:58.034
All right, I'll see you at Lecture 15.
