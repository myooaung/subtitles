1
1

00:00:00,760  -->  00:00:01,800
Array processing.
2

2

00:00:03,510  -->  00:00:11,150
In this lecture what we're gonna
do is mesh from those arrays so
3

3

00:00:11,150  -->  00:00:15,860
we can get a grid plot and
see what that looks like, and
4

4

00:00:15,860  -->  00:00:20,361
then we'll do some other
processing with arrays,
5

5

00:00:20,361  -->  00:00:23,502
some statistical processing, and
6

6

00:00:23,502  -->  00:00:28,650
then just messing around with
some bullion stuff as well.
7

7

00:00:30,820  -->  00:00:34,960
So this is gonna be a little bit
longer lecture than the last two, but
8

8

00:00:34,960  -->  00:00:35,910
Let's get to it.
9

9

00:00:37,680  -->  00:00:45,550
We'll start off by importing numpy as np,
and then we're gonna import matplotlib
10

10

00:00:53,490  -->  00:00:59,260
and we'll import the pyplot library
from it, and we'll import as plt.
11

11

00:00:59,260  -->  00:01:02,480
So we're going to do this
because we're going to be
12

12

00:01:03,540  -->  00:01:08,440
visualizing some of the grids and
meshes we'll be making.
13

13

00:01:09,700  -->  00:01:15,850
And then in order to see those
visualizations in IPython Notebook,
14

14

00:01:15,850  -->  00:01:22,040
we need to call matplotlib inline so
we can see it inline for everything.
15

15

00:01:23,675  -->  00:01:25,800
Alt+Enter, and it's imported it.
16

16

00:01:25,800  -->  00:01:26,300
Cool.
17

17

00:01:27,920  -->  00:01:32,580
And, don't worry too much about
the matplotlib in general.
18

18

00:01:32,580  -->  00:01:36,170
One of the last sections throughout
this course will go into much
19

19

00:01:36,170  -->  00:01:41,060
greater detail into visualizing data.
20

20

00:01:41,060  -->  00:01:43,590
So let's start with
the creation of a grid.
21

21

00:01:45,170  -->  00:01:50,190
We'll do that by setting one
side of the grid, points.
22

22

00:01:50,190  -->  00:01:52,260
So these'll be the points
along one side of the grid.
23

23

00:01:53,470  -->  00:01:59,090
We'll do that by calling them np.arrange.
24

24

00:01:59,090  -->  00:02:02,520
So we can do our start
stop in our step value.
25

25

00:02:02,520  -->  00:02:05,278
So we'll start at negative five,
26

26

00:02:05,278  -->  00:02:10,233
stop at positive five and
let's go in steps of point zero one.
27

27

00:02:12,695  -->  00:02:13,635
Alt+Enter.
28

28

00:02:13,635  -->  00:02:14,215
Cool.
29

29

00:02:14,215  -->  00:02:19,936
So we have our points and
then we'll create our grid,
30

30

00:02:19,936  -->  00:02:24,740
so our grid can be
a points by points grid.
31

31

00:02:24,740  -->  00:02:29,120
So to show you what I mean by that,
we'll call dx and
32

32

00:02:29,120  -->  00:02:34,460
dy, and from numpy we'll call meshgrid,
33

33

00:02:37,410  -->  00:02:44,380
and what this will do is return coordinate
matrices from the vectors we give it.
34

34

00:02:44,380  -->  00:02:46,967
So the vectors we're gonna give
it is just points by points.
35

35

00:02:50,968  -->  00:02:54,228
And see what that actually did,
let's go ahead and take a look at dx.
36

36

00:02:56,208  -->  00:02:59,921
Cool.
And you'll see that dx is basically
37

37

00:02:59,921  -->  00:03:05,017
a matrix where all the rows go
from negative 5 all the way
38

38

00:03:05,017  -->  00:03:09,690
to positive five, and
those zero point one steps.
39

39

00:03:09,690  -->  00:03:12,498
And you'll see that dy
40

40

00:03:15,788  -->  00:03:19,460
is the same thing, but now it just
goes along the columns instead.
41

41

00:03:20,550  -->  00:03:23,000
So this will help us make our grid.
42

42

00:03:25,880  -->  00:03:31,600
So how about we do an evaluating function.
43

43

00:03:32,970  -->  00:03:38,046
So we'll say that z is
44

44

00:03:38,046  -->  00:03:44,020
equal to np.sin of dx.
45

45

00:03:44,020  -->  00:03:47,610
So we'll take the sin
of all the dx values.
46

46

00:03:47,610  -->  00:03:50,460
If you remember from one of
the previous lectures this
47

47

00:03:50,460  -->  00:03:52,230
is just a universal function.
48

48

00:03:52,230  -->  00:03:58,111
Happens to be trigametric,
and we'll do np.sin,
49

49

00:03:58,111  -->  00:04:02,005
then have all the d,y values too.
50

50

00:04:02,005  -->  00:04:05,825
And then we'll see what
z actually looks like.
51

51

00:04:05,825  -->  00:04:08,115
So Alt+Enter, cool.
52

52

00:04:09,425  -->  00:04:15,453
So these are our
53

53

00:04:15,453  -->  00:04:21,960
z values and.
54

54

00:04:21,960  -->  00:04:23,310
We can plot this and
55

55

00:04:23,310  -->  00:04:28,580
in order to plot this, we'll call plt and
we'll do an image show.
56

56

00:04:28,580  -->  00:04:35,252
So that'll be imshow, which is a good
way to plot this kind of data,
57

57

00:04:35,252  -->  00:04:40,880
basically a matrix, so,
we'll call it z to it.
58

58

00:04:40,880  -->  00:04:44,340
See what that looks like.
59

59

00:04:44,340  -->  00:04:45,390
Awesome.
60

60

00:04:45,390  -->  00:04:50,670
So now you can see how this is basically
a sign along both the x and the y.
61

61

00:04:50,670  -->  00:04:54,620
You can see how it has peaks and valleys.
62

62

00:04:54,620  -->  00:05:00,250
If you wanna see what these colors
actually mean as far as values,
63

63

00:05:00,250  -->  00:05:04,050
we can plot it with the color bar.
64

64

00:05:07,510  -->  00:05:12,390
So let's call let's
65

65

00:05:12,390  -->  00:05:16,503
call the imshow again.
66

66

00:05:16,503  -->  00:05:19,080
Plot it with the color bar.
67

67

00:05:19,080  -->  00:05:22,570
Then the last thing we're going
to do is also give it a title.
68

68

00:05:24,210  -->  00:05:28,511
So we can do that by saying plt.title, and
69

69

00:05:28,511  -->  00:05:35,135
we'll say that's the plot for
basically, sin of x plus sin of y.
70

70

00:05:35,135  -->  00:05:40,699
Forgot to close that string there.
71

71

00:05:40,699  -->  00:05:45,464
Nice, so now we can get a much
72

72

00:05:45,464  -->  00:05:50,428
better idea of what this image
73

73

00:05:50,428  -->  00:05:55,160
is actually showing us.
74

74

00:05:55,160  -->  00:05:59,025
So we can see the peaks here in red and
the valleys.
75

75

00:05:59,025  -->  00:06:04,548
The best thing is learning
how to use numpy where,
76

76

00:06:04,548  -->  00:06:10,202
and in order to do that,
we'll create two arrays,
77

77

00:06:10,202  -->  00:06:15,199
so let's create an A array, np.array, and
78

78

00:06:15,199  -->  00:06:20,610
we'll make this just a simple 1, 2, 3, 4.
79

79

00:06:20,610  -->  00:06:28,004
And then let's also make,
scroll down a bit, also make a B array.
80

80

00:06:30,903  -->  00:06:33,930
And we'll say this is 100, 200, 300, 400.
81

81

00:06:33,930  -->  00:06:37,351
That way we can tell the form but
82

82

00:06:37,351  -->  00:06:43,410
also know which [INAUDIBLE]
values go with which array.
83

83

00:06:45,070  -->  00:06:50,610
So we'll input those arrays, and
84

84

00:06:51,730  -->  00:06:54,930
we'll create a Boolean array.
85

85

00:06:55,970  -->  00:07:02,000
So Boolean will allow us to input true and
false conditions into an array.
86

86

00:07:03,730  -->  00:07:04,903
So we'll call it condition.
87

87

00:07:08,523  -->  00:07:14,430
And in this boolean array, what we're
going to do is just input boolean values.
88

88

00:07:14,430  -->  00:07:21,627
So true, true And false false.
89

89

00:07:21,627  -->  00:07:27,423
So we have our bullion array now,
and we can use this for
90

90

00:07:27,423  -->  00:07:31,840
something called a list comprehension.
91

91

00:07:33,710  -->  00:07:40,780
So what that will allow us to do is
let's say we wanna make an array where
92

92

00:07:42,270  -->  00:07:46,370
we choose the A value if
the condition is true.
93

93

00:07:47,690  -->  00:07:49,890
Otherwise we choose the B value.
94

94

00:07:52,680  -->  00:07:56,230
So to show you what I mean by that,
we'll say
95

95

00:08:04,096  -->  00:08:10,661
A_val If
96

96

00:08:10,661  -->  00:08:18,790
condition is met else use the B_val.
97

97

00:08:18,790  -->  00:08:25,345
Since we haven't defined what A_val or
98

98

00:08:25,345  -->  00:08:31,706
cond or B_val is we'll say that's for
99

99

00:08:31,706  -->  00:08:37,100
every a value, B val and cond in,
100

100

00:08:37,100  -->  00:08:44,451
and we'll use zip to
input multiple arrays.
101

101

00:08:44,451  -->  00:08:48,191
A B, and condition.
102

102

00:08:52,650  -->  00:08:54,771
Oops.
103

103

00:08:54,771  -->  00:08:56,791
Have some invalid syntax here.
104

104

00:08:58,411  -->  00:09:03,530
4, let's get rid of that.
105

105

00:09:03,530  -->  00:09:07,864
That actually goes at the end since
the whole answer isn't right.
106

106

00:09:07,864  -->  00:09:10,387
So Alt+Enter.
107

107

00:09:10,387  -->  00:09:11,231
Cool.
108

108

00:09:11,231  -->  00:09:16,020
So, before I I show you the answer,
let's go ahead and
109

109

00:09:16,020  -->  00:09:17,800
think about it,
see what we should be seeing.
110

110

00:09:18,860  -->  00:09:24,820
So, answer is,
it's gonna say in this array,
111

111

00:09:25,830  -->  00:09:30,600
show me the A value if
the condition is met, otherwise,
112

112

00:09:30,600  -->  00:09:36,112
show me the B value, and
it defines A value, B value, and
113

113

00:09:36,112  -->  00:09:42,590
condition as each value and
AB and condition array.
114

114

00:09:42,590  -->  00:09:43,910
So we think about this,
115

115

00:09:43,910  -->  00:09:47,815
let's see what that first value
of this array should look like.
116

116

00:09:47,815  -->  00:09:54,000
A value if the condition, so,
it says choose the A value one
117

117

00:09:54,000  -->  00:09:59,800
if your condition is true,
otherwise, choose the B value.
118

118

00:09:59,800  -->  00:10:04,220
So you would expect, the first value of
this array to be one because that's true.
119

119

00:10:05,310  -->  00:10:11,920
And then again if you go along to
the second value of that array A value,
120

120

00:10:11,920  -->  00:10:16,600
2 if the condition is true.
121

121

00:10:16,600  -->  00:10:20,490
Otherwise choose B, so
it should be 1, 2 and
122

122

00:10:20,490  -->  00:10:25,520
then A value if condition, so
on the third one, the condition is false.
123

123

00:10:25,520  -->  00:10:28,460
So we would expect it to
choose the B value there.
124

124

00:10:28,460  -->  00:10:29,420
So we should see a 300.
125

125

00:10:29,420  -->  00:10:34,390
And then last, on the fourth one,
again it's false, so
126

126

00:10:34,390  -->  00:10:37,810
it's not gonna choose the A value,
it'll choose the B value.
127

127

00:10:37,810  -->  00:10:38,680
So let's see if we're right.
128

128

00:10:38,680  -->  00:10:41,690
We should see a 1, a 2, a 300, and a 400.
129

129

00:10:41,690  -->  00:10:47,330
400.
And that's exactly what we see.
130

130

00:10:47,330  -->  00:10:50,820
So just take a moment to really
understand what' s going on here.
131

131

00:10:51,870  -->  00:10:56,840
We're just using a list comprehension to
have a little bit of Boolean logic in this
132

132

00:10:56,840  -->  00:11:04,450
array for each of these values
in these three arrays here.
133

133

00:11:04,450  -->  00:11:04,950
Cool.
134

134

00:11:07,020  -->  00:11:09,850
So now we'll use NumPy where?
135

135

00:11:11,940  -->  00:11:16,700
So to show you what that looks like,
we'll have another array
136

136

00:11:16,700  -->  00:11:21,160
called answer2, np.where.
137

137

00:11:21,160  -->  00:11:27,520
We'll pass the condition and
then we'll say a b.
138

138

00:11:29,130  -->  00:11:34,101
So what this Numpy where does
is basically the short form
139

139

00:11:34,101  -->  00:11:37,710
of this long list comprehension array.
140

140

00:11:39,040  -->  00:11:43,640
So it's gonna say where my condition
is met, choose A, otherwise, choose B.
141

141

00:11:44,910  -->  00:11:50,920
So, were my condition true,
choose A1, otherwise choose B.
142

142

00:11:50,920  -->  00:11:55,430
So, we should expect doing this
command to see the exact same thing.
143

143

00:11:56,820  -->  00:11:59,120
And let's see if that is true.
144

144

00:11:59,120  -->  00:12:03,290
We'll do Alt+Enter, and
then we'll show answer2.
145

145

00:12:03,290  -->  00:12:06,360
Yep, and that's the same thing.
146

146

00:12:06,360  -->  00:12:08,110
So you can see using numpy,
147

147

00:12:08,110  -->  00:12:12,150
you can get that same kind of logic
in a much more convenient fashion.
148

148

00:12:13,500  -->  00:12:17,230
So take a moment to see if you
understand what just happened, and
149

149

00:12:17,230  -->  00:12:21,130
try inputting different conditions,
different array values.
150

150

00:12:21,130  -->  00:12:24,460
Play with it, see if you can
predict the right arrays that come
151

151

00:12:26,160  -->  00:12:28,626
up onto the arrays for manipulation.
152

152

00:12:28,626  -->  00:12:36,036
So from numpy.random,
153

153

00:12:36,036  -->  00:12:41,555
I'm going to import the normal
random distribution
154

154

00:12:41,555  -->  00:12:46,780
cuz we'll be using that in a bit and
now I'm gonna make an array.
155

155

00:12:46,780  -->  00:12:51,110
Now I can just call randn without calling
156

156

00:12:51,110  -->  00:12:54,040
np.random since I
imported it specifically.
157

157

00:12:55,270  -->  00:13:00,490
And we'll make a 5 by 5 and let's go ahead
and show what that matrix looks like.
158

158

00:13:00,490  -->  00:13:01,030
Cool.
159

159

00:13:01,030  -->  00:13:07,571
So this matrix came from a random
160

160

00:13:07,571  -->  00:13:12,427
normalized function.
161

161

00:13:12,427  -->  00:13:13,593
Cool.
162

162

00:13:13,593  -->  00:13:16,810
So, using this same kind
of where command and
163

163

00:13:16,810  -->  00:13:21,649
logic, I can say something like
164

164

00:13:21,649  -->  00:13:27,065
np.where.
165

165

00:13:27,065  -->  00:13:32,090
We'll have to feed a condition,
166

166

00:13:32,090  -->  00:13:39,120
so, we'll say where the array or
this matrix was less than 0,
167

167

00:13:39,120  -->  00:13:43,380
make it a 0, otherwise,
leave that array value.
168

168

00:13:45,110  -->  00:13:47,000
So, we have our condition.
169

169

00:13:47,000  -->  00:13:50,420
The first option to replace it,
otherwise do that.
170

170

00:13:51,910  -->  00:13:54,770
So, let's go ahead and see what happens.
171

171

00:13:54,770  -->  00:13:55,270
Cool.
172

172

00:13:56,420  -->  00:14:01,660
So if you look on the original array,
everything that was negative is now a 0.
173

173

00:14:01,660  -->  00:14:07,170
So this is a useful tool if you
ever wanna clean up your data.
174

174

00:14:07,170  -->  00:14:11,289
It's also used in Pandas, which is
a module we'll be learning about later.
175

175

00:14:12,610  -->  00:14:17,930
And it's just a useful thing to
keep in the back of your mind.
176

176

00:14:17,930  -->  00:14:20,660
Let's create another array to go deeper
177

177

00:14:20,660  -->  00:14:23,360
into some other statistical
processing stuff we can do.
178

178

00:14:26,090  -->  00:14:31,960
So we'll have np.array, and
179

179

00:14:31,960  -->  00:14:36,720
let's make it 1, 2, 3.
180

180

00:14:36,720  -->  00:14:42,930
Let's have it be a 3 by 3,
and then we'll say 4, 5, 6.
181

181

00:14:44,790  -->  00:14:51,010
And then that last row will be 7, 8, 9.
182

182

00:14:51,010  -->  00:14:54,480
And let's show it just to see
to make sure we did it right.
183

183

00:14:54,480  -->  00:14:57,810
Yep, so it's a 3 by 3, 1,
2, 3, 4, 5, 6, 7, 8, 9.
184

184

00:15:00,270  -->  00:15:06,180
And let's see what happens if
I call sum on that matrix.
185

185

00:15:07,530  -->  00:15:08,490
I get 45.
186

186

00:15:08,490  -->  00:15:11,510
so it summed up every
value in that matrix.
187

187

00:15:13,200  -->  00:15:17,170
I can also do it along a specific axis.
188

188

00:15:17,170  -->  00:15:23,420
So for instance, if I wanted to
sum up everything in the columns.
189

189

00:15:23,420  -->  00:15:26,110
So I wanted to sum up 147, 258, 369.
190

190

00:15:26,110  -->  00:15:34,790
I could say array sum and
specify that axis.
191

191

00:15:36,080  -->  00:15:40,570
So we'll say along the 0 and
see what happens.
192

192

00:15:41,790  -->  00:15:43,700
Yep.
And that's what we'd get.
193

193

00:15:43,700  -->  00:15:46,090
So 1 plus 4 is 5 plus 7 is 12.
194

194

00:15:46,090  -->  00:15:50,470
So this is just adding it up
along the columns itself.
195

195

00:15:52,100  -->  00:15:55,770
There are other things we
can call such as the mean.
196

196

00:15:55,770  -->  00:15:58,814
So this will give us some
statistical information.
197

197

00:15:58,814  -->  00:16:03,465
So the average of all that is 5.
198

198

00:16:03,465  -->  00:16:08,117
We can also call the standard
deviation using.
199

199

00:16:08,117  -->  00:16:13,790
STD we got our standard deviation.
200

200

00:16:13,790  -->  00:16:19,848
If you want you can also call
the variance using .var.
201

201

00:16:19,848  -->  00:16:24,594
Do this.
202

202

00:16:24,594  -->  00:16:29,681
So to show you how this works,
let's go ahead and
203

203

00:16:29,681  -->  00:16:35,266
make a Boolean array np.array and
we'll have it be,
204

204

00:16:35,266  -->  00:16:41,740
let's just say True, False,
True, so it alternates a bit.
205

205

00:16:46,902  -->  00:16:47,969
We'll call that Boolean array.
206

206

00:16:54,091  -->  00:16:58,870
And we'll call, any on this.
207

207

00:16:58,870  -->  00:17:02,670
So any is gonna do is it's gonna
return a Boolean, either true or
208

208

00:17:02,670  -->  00:17:07,580
false, if anything in that array was true.
209

209

00:17:07,580  -->  00:17:10,550
So since there are trues in there,
we'll expect it to return true.
210

210

00:17:10,550  -->  00:17:12,830
Let's see if that works.
211

211

00:17:12,830  -->  00:17:13,670
Yes it does.
212

212

00:17:14,670  -->  00:17:19,170
Similarly, we can call all.
213

213

00:17:19,170  -->  00:17:24,970
And this will return true only
if all the values are true.
214

214

00:17:24,970  -->  00:17:29,505
So we expect it to return false on
the Boolean array since there is a false
215

215

00:17:29,505  -->  00:17:30,640
there.
216

216

00:17:30,640  -->  00:17:31,550
And they're not all true.
217

217

00:17:33,000  -->  00:17:34,210
And that's what we got.
218

218

00:17:34,210  -->  00:17:34,710
Cool.
219

219

00:17:39,760  -->  00:17:42,190
Finally you can sort arrays so
220

220

00:17:42,190  -->  00:17:46,970
in order to see that,
I'm just going to put a little comma here.
221

221

00:17:46,970  -->  00:17:48,160
So we can know where we are at.
222

222

00:17:49,460  -->  00:17:56,080
We can say let's make
a array just a random 5.
223

223

00:17:56,080  -->  00:17:57,648
And then we'll se it.
224

224

00:17:57,648  -->  00:18:01,417
Alt+Enter.
225

225

00:18:01,417  -->  00:18:02,930
Cool.
226

226

00:18:02,930  -->  00:18:04,400
So you see it's not sorted right now.
227

227

00:18:07,710  -->  00:18:13,310
So, in order to sort it
we can call .sort and
228

228

00:18:13,310  -->  00:18:16,300
then we'll see what happens.
229

229

00:18:16,300  -->  00:18:18,927
So now it sorted it
from least to greatest.
230

230

00:18:23,449  -->  00:18:27,972
I know this is a lot already, but
we're almost done with this lecture.
231

231

00:18:27,972  -->  00:18:31,921
We can use unique, so,
232

232

00:18:31,921  -->  00:18:38,638
let's make an array called countries.
233

233

00:18:43,545  -->  00:18:48,738
And let's say we have France,
234

234

00:18:48,738  -->  00:18:56,942
Germany, let's get the US
of A in there as well.
235

235

00:18:56,942  -->  00:19:00,862
Russia, we'll put USA again and
236

236

00:19:00,862  -->  00:19:06,882
you'll see why in a second,
we'll put in Mexico,
237

237

00:19:06,882  -->  00:19:10,808
and then finally Germany again.
238

238

00:19:16,739  -->  00:19:18,400
Let's go ahead and input that.
239

239

00:19:18,400  -->  00:19:21,400
So now we have this basically
this array of countries.
240

240

00:19:23,150  -->  00:19:26,390
We inputed a list of countries and
transformed it into an array.
241

241

00:19:28,320  -->  00:19:35,675
If I wanted to find out which
countries were unique in this array,
242

242

00:19:35,675  -->  00:19:42,094
I could say I could call
a numpie.unique on countries and
243

243

00:19:42,094  -->  00:19:47,330
it'll tell me which ones
only appeared once.
244

244

00:19:50,360  -->  00:19:53,816
So, let's see what happens.
245

245

00:19:53,816  -->  00:19:58,850
[SOUND] I'm sorry, it will tell
me which unique values you have.
246

246

00:19:58,850  -->  00:20:03,927
You have 'France', 'Germany',
'Mexico', 'Russia', and 'USA'.
247

247

00:20:03,927  -->  00:20:07,298
So it will give you each of
the unique values in that.
248

248

00:20:14,423  -->  00:20:20,499
And last, we can also use an np.in1d.
249

249

00:20:20,499  -->  00:20:24,650
So this can test the values in one array.
250

250

00:20:27,320  -->  00:20:32,491
Show you how this works,
let's pass France,
251

251

00:20:32,491  -->  00:20:37,760
USA, let's call it, I don't know,
252

252

00:20:37,760  -->  00:20:45,460
Sweden, and countries.
253

253

00:20:46,840  -->  00:20:51,940
So what this command will do in 1D,
it's gonna check if France, USA, and
254

254

00:20:51,940  -->  00:20:58,840
Sweden are in this country's
one dimensional array.
255

255

00:20:58,840  -->  00:21:01,580
So, it's gonna say is France in countries?
256

256

00:21:01,580  -->  00:21:02,880
Is USA in countries?
257

257

00:21:02,880  -->  00:21:04,670
Is Sweden in countries?
258

258

00:21:04,670  -->  00:21:07,680
So, let's think about what it
should output before we see it.
259

259

00:21:07,680  -->  00:21:08,690
Is France in countries?
260

260

00:21:08,690  -->  00:21:11,680
Yes.
So it should output true there.
261

261

00:21:11,680  -->  00:21:13,120
Is USA in countries?
262

262

00:21:13,120  -->  00:21:13,640
Yes.
263

263

00:21:13,640  -->  00:21:15,250
It should output true.
264

264

00:21:15,250  -->  00:21:19,290
Sweden is not in the countries array,
so it should output false.
265

265

00:21:19,290  -->  00:21:22,375
So we should get an array that says true,
true, false.
266

266

00:21:22,375  -->  00:21:24,945
Let's see if it works.
267

267

00:21:24,945  -->  00:21:25,645
Yup.
268

268

00:21:25,645  -->  00:21:26,815
True, true, false.
269

269

00:21:27,875  -->  00:21:28,565
All right.
Awesome.
270

270

00:21:29,675  -->  00:21:32,295
So there was quite a bit in there.
271

271

00:21:32,295  -->  00:21:33,905
We just learned a lot.
272

272

00:21:33,905  -->  00:21:39,050
As always,
you can check out the link to the iPython
273

273

00:21:39,050  -->  00:21:44,250
notebooks on GitHub, and look at them and
play around with some more stuff.
274

274

00:21:44,250  -->  00:21:45,210
All right.
275

275

00:21:45,210  -->  00:21:46,770
I'll see you in the next lecture.
