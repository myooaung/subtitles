WEBVTT
1
1

00:00:01.090  -->  00:00:02.900
Okay, guys, welcome to lecture 30.
2

2

00:00:02.900  -->  00:00:07.990
In this lecture we'll be
learning how to merge on index.
3

3

00:00:07.990  -->  00:00:12.790
So a previous lecture we saw merging and
how we use columns to do that, and keys.
4

4

00:00:12.790  -->  00:00:16.550
Now we're gonna use indexes
to do that same thing.
5

5

00:00:16.550  -->  00:00:20.350
So, import the usual, pandas as pd.
6

6

00:00:21.760  -->  00:00:26.247
From pandas, import
7

7

00:00:26.247  -->  00:00:31.233
Series and DataFrame,
8

8

00:00:31.233  -->  00:00:36.225
and import numpy as np.
9

9

00:00:36.225  -->  00:00:39.508
Okay, so let's go ahead and
make two DataFrames.
10

10

00:00:39.508  -->  00:00:44.612
I'll make a DataFrame called df_left.
11

11

00:00:48.771  -->  00:00:51.550
And we'll construct it using a dictionary.
12

12

00:00:51.550  -->  00:00:53.290
So I'll set a column to be called key.
13

13

00:00:54.840  -->  00:00:59.523
And I'll pass a list, so
14

14

00:00:59.523  -->  00:01:03.760
let's just go with X,
15

15

00:01:03.760  -->  00:01:07.333
Y, Z, then X, Y.
16

16

00:01:07.333  -->  00:01:14.010
All right, and then,
next column we'll say it's, whoops.
17

17

00:01:17.337  -->  00:01:18.937
We'll call it data.
18

18

00:01:24.953  -->  00:01:26.307
Sorry, one of my keys was sticking.
19

19

00:01:26.307  -->  00:01:30.114
Okay, we'll call it data.
20

20

00:01:36.408  -->  00:01:38.720
And we'll pass a list there as well.
21

21

00:01:38.720  -->  00:01:41.880
Actually we won't,
we'll just call it a range.
22

22

00:01:41.880  -->  00:01:43.960
We'll say we want 5 points.
23

23

00:01:45.470  -->  00:01:47.672
That's DataFrame left.
24

24

00:01:47.672  -->  00:01:50.760
Let's go ahead and
take a look at what that looks like.
25

25

00:01:50.760  -->  00:01:55.249
All right, there we have a key column,
X Y Z X Y, our data column.
26

26

00:01:55.249  -->  00:02:01.126
And then let's make a DataFrame right,
df_right.
27

27

00:02:01.126  -->  00:02:05.221
Construct it in a similar manner.
28

28

00:02:05.221  -->  00:02:06.064
We'll say.
29

29

00:02:08.250  -->  00:02:09.455
We'll pass the dictionary.
30

30

00:02:09.455  -->  00:02:15.202
Let's call one column group_data,
31

31

00:02:15.202  -->  00:02:19.590
and it'll be a list, just 10 and
20 will be the values.
32

32

00:02:19.590  -->  00:02:24.621
And that's it actually,
and then we'll give
33

33

00:02:24.621  -->  00:02:29.140
it an index, and
the index will be X and Y.
34

34

00:02:31.910  -->  00:02:36.180
So notice how in this first part for
the DataFrame, I have my dictionary and
35

35

00:02:36.180  -->  00:02:38.472
then the second part I labeled my index.
36

36

00:02:38.472  -->  00:02:41.800
And then let's take a quick
look at what that looks like.
37

37

00:02:41.800  -->  00:02:47.400
So I have X and Y index, and then I have
my group_data, which is just 10 and 20.
38

38

00:02:47.400  -->  00:02:51.640
So, we'll merge, and we'll use the key for
39

39

00:02:51.640  -->  00:02:54.920
the left DataFrame, and
then the index for the right.
40

40

00:02:56.060  -->  00:02:57.535
So let me show you what I'm talking about.
41

41

00:02:57.535  -->  00:03:06.161
pd.merge, we'll put in the left DataFrame
we wanna merge with the right DataFrame.
42

42

00:03:06.161  -->  00:03:10.951
And now I can pass left_on,
43

43

00:03:10.951  -->  00:03:14.350
and we'll say key.
44

44

00:03:15.490  -->  00:03:22.135
So the left DataFrame will merge on the
key, and then I'll say right_index=True.
45

45

00:03:25.220  -->  00:03:27.300
So let's go ahead and
take a look at what happens there.
46

46

00:03:30.390  -->  00:03:34.110
So if you noticed, we were able to use
the index for the right and the key for
47

47

00:03:34.110  -->  00:03:35.200
the left DataFrame.
48

48

00:03:36.680  -->  00:03:39.990
So the key for left DataFrame,
X, Y, Z, X, Y.
49

49

00:03:41.360  -->  00:03:47.080
We use that in combination with
the data from this group data.
50

50

00:03:47.080  -->  00:03:49.870
So now every X in group data was a 10.
51

51

00:03:49.870  -->  00:03:54.149
So the keys from the left DataFrame,
X, Y, Z, X, Y,
52

52

00:03:54.149  -->  00:03:59.842
since there was two Xs and two Ys,
in the merging we have two Xs and two Ys.
53

53

00:03:59.842  -->  00:04:02.490
But we're using the group data,
10, 10, 20, 20.
54

54

00:04:02.490  -->  00:04:08.655
And then we also have the data
column from our left DataFrame.
55

55

00:04:09.810  -->  00:04:10.840
So if you want, you can go ahead and
56

56

00:04:10.840  -->  00:04:16.420
mess around with different left_ons and
with the right_index True and False.
57

57

00:04:16.420  -->  00:04:19.580
See if you can predict
the DataFrames that come out, and
58

58

00:04:19.580  -->  00:04:22.850
that way you'll know if
you understood it or not.
59

59

00:04:22.850  -->  00:04:25.970
Let's try a little something different.
60

60

00:04:25.970  -->  00:04:31.210
So, how about using
a hierarchy index with merging?
61

61

00:04:31.210  -->  00:04:32.776
So I'll make another DataFrame.
62

62

00:04:32.776  -->  00:04:38.987
I'll call it df_left_hr cuz it's
gonna have an index hierarchy.
63

63

00:04:41.046  -->  00:04:42.923
I'll construct it using DataFrame.
64

64

00:04:44.662  -->  00:04:48.210
And let's go ahead and
make a dictionary, we'll call this key1.
65

65

00:04:48.210  -->  00:04:53.486
And I'll use city values in this case,
or city initials I should say.
66

66

00:04:53.486  -->  00:04:59.117
SF, SF and
then we'll have the last two be LA, LA.
67

67

00:05:02.776  -->  00:05:05.160
And the next entry in that
dictionary will be key2.
68

68

00:05:05.160  -->  00:05:12.606
We'll leave values,
how about 10, 20, 20, 30?
69

69

00:05:18.484  -->  00:05:22.059
And we'll keep data_set and
70

70

00:05:22.059  -->  00:05:27.207
this column will just say np.arrange5,
71

71

00:05:27.207  -->  00:05:31.783
and I'm gonna add a point here to let it
72

72

00:05:31.783  -->  00:05:36.788
know that it's a floating point number.
73

73

00:05:36.788  -->  00:05:42.165
And looks like I forgot a comma here and
a comma there.
74

74

00:05:43.705  -->  00:05:45.035
All right, excellent.
75

75

00:05:45.035  -->  00:05:47.515
Let's make sure that it was
all inputted correctly.
76

76

00:05:48.755  -->  00:05:51.235
I accidentally put one extra r.
77

77

00:05:52.730  -->  00:05:54.755
And, whoops, what did I mess up?
78

78

00:05:54.755  -->  00:05:57.350
Arrays must be all the same length.
79

79

00:05:57.350  -->  00:05:59.064
Do I have them all the same length?
80

80

00:05:59.064  -->  00:06:05.400
Let's see, key1 was 5, key2,
I accidentally have it,
81

81

00:06:05.400  -->  00:06:10.030
so let me add another number there,
so now that should be 5 points.
82

82

00:06:10.030  -->  00:06:14.070
Okay, and
let's just take a look at what we got.
83

83

00:06:15.980  -->  00:06:16.980
Nice.
84

84

00:06:16.980  -->  00:06:21.640
So our data set is just 0 through 4,
so 5 points there.
85

85

00:06:21.640  -->  00:06:26.259
key1 are the cities we put in,
key2 are those numbers we put in 10,
86

86

00:06:26.259  -->  00:06:28.150
20, 30, 20, 30.
87

87

00:06:28.150  -->  00:06:35.156
Now let's make another DataFrame.
88

88

00:06:35.156  -->  00:06:39.391
We'll call it df_right_hr.
89

89

00:06:42.377  -->  00:06:49.310
This DataFrame,
I'm just gonna say, np.arange(10).
90

90

00:06:50.330  -->  00:06:54.600
I'm gonna reshape that into
a matrix as we've done in the past.
91

91

00:06:54.600  -->  00:06:56.570
I'll make it a 5 by 2.
92

92

00:06:56.570  -->  00:06:58.310
So those will be my data points.
93

93

00:06:59.550  -->  00:07:01.086
Then I'll set up my index.
94

94

00:07:04.423  -->  00:07:09.490
My index is gonna be, so
I'm gonna have an index hierarchy here.
95

95

00:07:09.490  -->  00:07:16.130
So that means I'm gonna pass
a list of lists, so, I'll have LA,
96

96

00:07:18.444  -->  00:07:24.130
Whoops, not Alabama,
97

97

00:07:24.130  -->  00:07:28.684
LA, SF, SF, SF.
98

98

00:07:28.684  -->  00:07:34.966
And then, since this is an index
hierarchy, we'll make another one,
99

99

00:07:34.966  -->  00:07:39.990
and we'll call it,
let's just have it be some numbers,
100

100

00:07:39.990  -->  00:07:43.147
20, 10, 10, 10, 20.
101

101

00:07:47.062  -->  00:07:51.871
And, since we have our index,
we need to make some columns.
102

102

00:07:55.968  -->  00:08:02.184
And we should have the columns equal to,
I'm just
103

103

00:08:02.184  -->  00:08:07.252
gonna call them col1, and then col2.
104

104

00:08:07.252  -->  00:08:13.226
And let me put an underscore so
it's a little more readable.
105

105

00:08:13.226  -->  00:08:17.730
Okay, let me just look over this to
make sure we wrote it all in right.
106

106

00:08:17.730  -->  00:08:23.429
Our data is np.arange(10).reshape(5,2).
107

107

00:08:25.370  -->  00:08:31.640
And then we have our index,
which is two lists, LA, LA, SF, SF, SF.
108

108

00:08:33.040  -->  00:08:37.142
And then we have 20, 10, 10, 10, 20.
109

109

00:08:37.142  -->  00:08:39.430
And then we have our columns.
110

110

00:08:39.430  -->  00:08:43.220
So, let's see if we got that right.
111

111

00:08:43.220  -->  00:08:48.961
Looks like I should have
had a apostrophe there.
112

112

00:08:48.961  -->  00:08:50.466
Okay, now let's try it out.
113

113

00:08:50.466  -->  00:08:53.531
Okay, cool.
114

114

00:08:55.909  -->  00:08:58.232
And let's check out the DataFrame.
115

115

00:08:58.232  -->  00:09:02.150
All right, so
we have a index hierarchy here.
116

116

00:09:02.150  -->  00:09:05.326
So we have the cities and
then their separate values.
117

117

00:09:05.326  -->  00:09:10.803
And then our two data sets of column 1,
column 2, with the arranged numbers 0, 1,
118

118

00:09:10.803  -->  00:09:16.450
2, 3, 4, 5, 6, 7, 8, 9,
from np.arange(10).reshape(5,2).
119

119

00:09:16.450  -->  00:09:21.176
Okie dokie.
120

120

00:09:21.176  -->  00:09:27.547
So, we can merge the left by using
keys and the right by its index again.
121

121

00:09:27.547  -->  00:09:33.640
So, let's go ahead and see what that looks
like when we do it with index hierarchy.
122

122

00:09:34.970  -->  00:09:37.663
So we have df_left_hr and
123

123

00:09:37.663  -->  00:09:42.941
then the DataFrame on the right
which call hr as well.
124

124

00:09:45.661  -->  00:09:53.063
I'll say merge to left_on key1, key2.
125

125

00:09:58.802  -->  00:10:03.339
And then the right_index we'll say True so
126

126

00:10:03.339  -->  00:10:06.779
it merges the right by its index.
127

127

00:10:06.779  -->  00:10:07.995
Let's go ahead and see what we got.
128

128

00:10:09.925  -->  00:10:15.100
Okay, so if we take a quick gander at that
129

129

00:10:15.100  -->  00:10:18.840
first left DataFrame,
we have our data set, and then key1, key2.
130

130

00:10:18.840  -->  00:10:23.512
And then on the right we had LA,
SF, its sub index,
131

131

00:10:23.512  -->  00:10:27.872
the 10s and 20s, and then the two columns.
132

132

00:10:30.827  -->  00:10:38.954
So, now when we merge them we have our
dataset values merged by the key1 and
133

133

00:10:38.954  -->  00:10:42.990
key2, and then the right_index.
134

134

00:10:42.990  -->  00:10:48.060
So it kept this SF,
LA and the 10s and 20s.
135

135

00:10:49.330  -->  00:10:50.650
Nice.
136

136

00:10:50.650  -->  00:10:53.403
So our data is now merged and formatted.
137

137

00:10:56.304  -->  00:11:01.324
If you don't want to put in so
many arguments, Pandas does have
138

138

00:11:01.324  -->  00:11:07.150
another method of joining stuff,
or merging stuff I should say.
139

139

00:11:07.150  -->  00:11:10.100
And you can just do that
by using the method, join.
140

140

00:11:12.660  -->  00:11:17.160
So join is what we are actually
gonna be using most of the time.
141

141

00:11:17.160  -->  00:11:24.110
So let's go ahead and take a look at those
original DataFrames, df_left and df_right.
142

142

00:11:25.390  -->  00:11:32.070
So df_left was 0, 1, 2, 3, 4, the key was
X, Y, Z, X, Y, df_right was X, Y, 10, 20.
143

143

00:11:32.070  -->  00:11:39.230
And when you said, left join it with the
right, you got the data and keys lined up.
144

144

00:11:39.230  -->  00:11:40.000
But group data,
145

145

00:11:40.000  -->  00:11:44.080
since it didn't line up with any of
the indexes, it left it as straight Nulls.
146

146

00:11:45.600  -->  00:11:48.580
And you can pass the same arguments
through join as we were doing through
147

147

00:11:48.580  -->  00:11:52.230
merge, to get specific columns or
indexes that you want.
148

148

00:11:53.450  -->  00:11:57.660
Okay, so we'll probably be
using join more than merge in
149

149

00:11:57.660  -->  00:12:00.330
most of the lectures in this course.
150

150

00:12:00.330  -->  00:12:05.730
But it's important to know how merge works
in order to understand how join works.
151

151

00:12:06.770  -->  00:12:12.416
So go ahead and mess around with
inputting different keys and indexes.
152

152

00:12:12.416  -->  00:12:17.400
Right index set to false or
choose different keys to merge on.
153

153

00:12:17.400  -->  00:12:20.620
Just to make sure you get
a good understanding of
154

154

00:12:20.620  -->  00:12:24.050
what exactly is being merged and
how it's being merged.
155

155

00:12:24.050  -->  00:12:25.520
So that's how you merge on index.
156

156

00:12:26.590  -->  00:12:31.840
Next up, we'll learn about
the concatenate function.
157

157

00:12:31.840  -->  00:12:34.460
So I'll go ahead and
end this lecture here,
158

158

00:12:34.460  -->  00:12:36.020
and I'll see you at the next lecture.
