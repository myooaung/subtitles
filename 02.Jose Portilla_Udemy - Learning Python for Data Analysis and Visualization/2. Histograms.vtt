WEBVTT
1
1

00:00:01.190  -->  00:00:01.720
Hey, everybody.
2

2

00:00:01.720  -->  00:00:04.810
Welcome to lecture 48, histograms.
3

3

00:00:04.810  -->  00:00:08.090
So in this lecture we'll
be learning about how to
4

4

00:00:08.090  -->  00:00:10.100
use data visualization
to create histograms.
5

5

00:00:11.360  -->  00:00:17.390
This is gonna be the first lecture
in the data visualization section,
6

6

00:00:17.390  -->  00:00:20.420
so we're gonna do quite
a few imports here.
7

7

00:00:20.420  -->  00:00:26.650
First we're gonna do our standard imports.
8

8

00:00:26.650  -->  00:00:29.065
So that's gonna include
import numpy as np.
9

9

00:00:29.065  -->  00:00:33.740
Then we're gonna import pandas as pd.
10

10

00:00:33.740  -->  00:00:38.067
And then we're also gonna need from
11

11

00:00:38.067  -->  00:00:45.980
numpy.random import randn.
12

12

00:00:45.980  -->  00:00:51.050
Okay, so we've got those imports,
then we always need some stats imports.
13

13

00:00:51.050  -->  00:00:55.430
So I'm gonna say from scipy import stats.
14

14

00:00:58.760  -->  00:01:02.770
And then we're also going to
need the plotting imports.
15

15

00:01:02.770  -->  00:01:08.370
So I'm gonna import matplotlib as mpl.
16

16

00:01:08.370  -->  00:01:13.713
We're gonna import
matplotlib.pyplot as plt.
17

17

00:01:13.713  -->  00:01:19.112
And then we're gonna
import seaborn as sns and
18

18

00:01:19.112  -->  00:01:23.550
that's the convention for seaborn.
19

19

00:01:25.590  -->  00:01:30.440
And then finally,
we're going to give a command, matplotlib,
20

20

00:01:30.440  -->  00:01:33.006
that we're going to pass inline.
21

21

00:01:33.006  -->  00:01:39.650
And this %matplotlib inline, that allows
us to see our plots in IP[y]: Notebook.
22

22

00:01:39.650  -->  00:01:42.250
And there we go.
23

23

00:01:42.250  -->  00:01:45.546
So you can go ahead and
see there's in the link for
24

24

00:01:45.546  -->  00:01:49.840
the IP[y]: Notebook viewer,
all these imports are in one cell.
25

25

00:01:49.840  -->  00:01:50.600
So you can go ahead and
26

26

00:01:50.600  -->  00:01:53.829
feel free to copy and paste that for
all the data visualization lectures.
27

27

00:01:55.360  -->  00:01:56.460
I'll be doing that in the future.
28

28

00:01:56.460  -->  00:02:01.480
All right, so first of all,
if you want source information for
29

29

00:02:01.480  -->  00:02:04.920
what a histogram actually is,
you can go ahead and
30

30

00:02:04.920  -->  00:02:09.959
just go to this link, URL,
it's the Wikipedia link for histogram.
31

31

00:02:11.870  -->  00:02:17.271
If you're a little fuzzy on your stats,
you can go ahead and just check it out.
32

32

00:02:20.339  -->  00:02:24.210
And this will give you all the information
you need to know about histograms.
33

33

00:02:25.800  -->  00:02:29.376
So I'll assume for the rest of this
lecture that if you felt unfamiliar with
34

34

00:02:29.376  -->  00:02:32.890
histograms that you can read
about it on the Wikipedia page.
35

35

00:02:32.890  -->  00:02:34.140
Otherwise, I will continue.
36

36

00:02:35.340  -->  00:02:38.080
They're pretty straightforward things,
so let's go ahead and
37

37

00:02:38.080  -->  00:02:41.770
create a random normal
distribution data set.
38

38

00:02:41.770  -->  00:02:48.737
So I'm gonna say dataset1 = randn.
39

39

00:02:48.737  -->  00:02:52.500
And we'll have 100 data points there.
40

40

00:02:54.870  -->  00:02:58.090
And now I'm gonna plot
a histogram of that data set.
41

41

00:02:58.090  -->  00:03:03.590
In order to do that,
all I gotta do is plt.hist so
42

42

00:03:03.590  -->  00:03:08.870
I'm using matplotlib.pyplot, and
I'm calling the hist method on it.
43

43

00:03:08.870  -->  00:03:12.970
And I'm going to input my data
set to get that histogram.
44

44

00:03:14.960  -->  00:03:17.110
Okay, and there we have it.
45

45

00:03:17.110  -->  00:03:21.610
So, if you notice, it has one,
two, three, four, five six,
46

46

00:03:21.610  -->  00:03:24.290
seven, eight, nine, ten bins.
47

47

00:03:24.290  -->  00:03:30.058
So ten bins is the default number
of bins that plt.hist will create.
48

48

00:03:30.058  -->  00:03:33.450
So it's gonna separate all your data,
49

49

00:03:33.450  -->  00:03:37.390
no matter how many points you have,
into ten equally spaced bins.
50

50

00:03:37.390  -->  00:03:38.730
All right, great.
51

51

00:03:38.730  -->  00:03:40.969
So let's go ahead and
make another data set.
52

52

00:03:42.310  -->  00:03:46.095
We'll call this dataset2.
53

53

00:03:46.095  -->  00:03:50.769
And we'll have this one only be 80 points,
and
54

54

00:03:50.769  -->  00:03:57.300
we'll also plot a histogram of it,
hist and we'll say dataset2.
55

55

00:03:57.300  -->  00:04:03.230
In this case,
I want the color to be red and
56

56

00:04:03.230  -->  00:04:07.420
I want it to be a particular shade of
red so I can pass the color argument.
57

57

00:04:07.420  -->  00:04:11.045
And there's a color called indianred,
and I will choose that.
58

58

00:04:11.045  -->  00:04:12.545
So let's go ahead and check that plot.
59

59

00:04:13.855  -->  00:04:16.215
Okay, so there's that histogram.
60

60

00:04:17.535  -->  00:04:19.335
And it's now the Indian red color.
61

61

00:04:21.045  -->  00:04:26.900
So what if I wanted to see both
these histograms on the same plot?
62

62

00:04:26.900  -->  00:04:28.760
I can totally do that.
63

63

00:04:28.760  -->  00:04:36.096
So what I can do for
that is say plt.hist dataset1.
64

64

00:04:36.096  -->  00:04:42.210
And since they both have different numbers
65

65

00:04:42.210  -->  00:04:47.480
of data points, so this is 80 data
points and dataset1 is 100 data points.
66

66

00:04:47.480  -->  00:04:49.890
I have to normalize my plots, so
67

67

00:04:49.890  -->  00:04:54.695
I can do that by saying passing
the argument normed=True.
68

68

00:04:57.320  -->  00:05:02.771
I'll set dataset1 to have
the color indianred this time.
69

69

00:05:06.276  -->  00:05:09.925
And since I'm going to be plotting
them right on top of each other,
70

70

00:05:09.925  -->  00:05:12.410
I'm going to want some transparency there.
71

71

00:05:13.600  -->  00:05:19.740
So to control transparency, the argument
is alpha so if I set my alpha=0.5,
72

72

00:05:19.740  -->  00:05:26.310
you can set your transparency from 0 to 1,
so 0.5 is that transparency level.
73

73

00:05:26.310  -->  00:05:29.290
So you'll be able to
see in a sense through
74

74

00:05:29.290  -->  00:05:31.460
the histograms even though
they're on the same plot.
75

75

00:05:31.460  -->  00:05:34.270
And you'll see what that
looks like in a second.
76

76

00:05:34.270  -->  00:05:35.940
And let's get some more bins.
77

77

00:05:35.940  -->  00:05:36.990
And I can get more bins.
78

78

00:05:36.990  -->  00:05:39.930
The default is ten, but
I'm just gonna double that.
79

79

00:05:39.930  -->  00:05:41.340
I'll set bins=20.
80

80

00:05:41.340  -->  00:05:43.160
So that's another argument we can do.
81

81

00:05:43.160  -->  00:05:48.730
And then in the same cell I'm gonna say
plt.hist, and I'm gonna plot dataset2, I'm
82

82

00:05:50.700  -->  00:05:56.360
gonna set the normalization equal to true,
so they're both normalized.
83

83

00:05:56.360  -->  00:05:57.250
I won't worry about the color,
84

84

00:05:57.250  -->  00:06:01.040
I'll just have it use its
default blue color for dataset2.
85

85

00:06:01.040  -->  00:06:05.420
But again, I will set it to have some
sort of transparency using alpha, and
86

86

00:06:05.420  -->  00:06:08.190
I will also make that second
data set have 20 bins.
87

87

00:06:10.240  -->  00:06:12.980
All right, so
let's go see what this looks like.
88

88

00:06:15.590  -->  00:06:16.550
And there you have it.
89

89

00:06:16.550  -->  00:06:22.230
So we have the two histograms now plotted,
and they're stacked on top of each other.
90

90

00:06:22.230  -->  00:06:25.770
And where they overlap,
since we set alpha=0.5,
91

91

00:06:25.770  -->  00:06:29.210
there's a little bit of transparency there
and you can see that it creates a purple
92

92

00:06:29.210  -->  00:06:34.210
color automatically where
the histograms go over each other.
93

93

00:06:34.210  -->  00:06:40.240
Great, so now let's learn how to do
something similar with Seaborn and
94

94

00:06:40.240  -->  00:06:42.030
try to get some more
information out of this.
95

95

00:06:43.210  -->  00:06:45.740
So I'm gonna make two more data sets.
96

96

00:06:45.740  -->  00:06:52.220
I'll say data1 = randn, and let's get
a ton of points, so let's say 1000 points,
97

97

00:06:52.220  -->  00:06:57.840
and we'll do the same for data2,
we'll have that equal 1000 points.
98

98

00:06:57.840  -->  00:07:01.950
Let's go ahead and do that.
99

99

00:07:01.950  -->  00:07:05.750
Great, so
now I have these two very large data sets.
100

100

00:07:05.750  -->  00:07:10.450
So I can represent this as a joint
distribution using joint plots.
101

101

00:07:10.450  -->  00:07:14.999
So the way we do this is we call Seaborn,
102

102

00:07:14.999  -->  00:07:18.350
sns., and
then we can call the method jointplot.
103

103

00:07:20.770  -->  00:07:24.620
And what I'm gonna do is I'm
gonna input my two data sets.
104

104

00:07:24.620  -->  00:07:27.848
I'm going to say data1, data2.
105

105

00:07:27.848  -->  00:07:30.670
And let's see what that looks like.
106

106

00:07:32.730  -->  00:07:36.790
Great, so now we actually have
a joint plot of both data sets.
107

107

00:07:38.420  -->  00:07:42.020
So you can see a distribution of dataset1
and the distribution of dataset2.
108

108

00:07:42.020  -->  00:07:43.750
It gives you your p value,
109

109

00:07:43.750  -->  00:07:48.950
and then it individually plots all
the data points and where they overlap.
110

110

00:07:50.350  -->  00:07:53.410
So we can also do this if you don't
want to see all these points,
111

111

00:07:53.410  -->  00:07:58.400
you can use hex bins for
a more concise picture.
112

112

00:07:59.440  -->  00:08:04.590
So let's go ahead and see how that works,
so sns.jointplot again.
113

113

00:08:04.590  -->  00:08:05.980
Again, we're gonna put both data sets.
114

114

00:08:05.980  -->  00:08:10.314
I'm gonna say data1, data2.
115

115

00:08:10.314  -->  00:08:14.222
And now I can pass the argument kind and
116

116

00:08:14.222  -->  00:08:20.828
set that equal to hex to get a hex
plot in the joint distribution.
117

117

00:08:23.297  -->  00:08:24.260
There we go.
118

118

00:08:24.260  -->  00:08:27.090
And so that will be a little
easier to read, and will
119

119

00:08:27.090  -->  00:08:31.010
give you a little more visual information
than just all these points themselves.
120

120

00:08:32.260  -->  00:08:32.860
All right, great.
121

121

00:08:34.320  -->  00:08:36.560
So that's the basics of histograms.
122

122

00:08:36.560  -->  00:08:39.190
If you just want to get
a run-of-the-mill histogram,
123

123

00:08:39.190  -->  00:08:43.810
all you gotta do is say plt.hist,
input your data set, and
124

124

00:08:43.810  -->  00:08:49.540
you can check the documentation for pyplot
if you wanna know more arguments to pass.
125

125

00:08:49.540  -->  00:08:51.040
There's colors.
126

126

00:08:51.040  -->  00:08:54.830
Remember to do normed
if you want different
127

127

00:08:54.830  -->  00:08:57.830
data sets with different number
of points on the same plot.
128

128

00:08:59.420  -->  00:09:04.987
And then you can do joint plots with
histograms on them using sns.jointplot and
129

129

00:09:04.987  -->  00:09:07.770
you just pass both your data sets there.
130

130

00:09:07.770  -->  00:09:14.070
And if you want hex bin on this jointplot
you just say the kind and pass hex.
131

131

00:09:14.070  -->  00:09:15.470
Okay, great.
132

132

00:09:15.470  -->  00:09:18.720
Next we'll learn how to use
kernel estimation plots.
133

133

00:09:18.720  -->  00:09:19.220
I'll see you
