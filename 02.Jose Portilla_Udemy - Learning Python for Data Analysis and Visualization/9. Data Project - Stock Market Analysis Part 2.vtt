WEBVTT
1
1

00:00:02.520  -->  00:00:03.070
Hey everybody.
2

2

00:00:03.070  -->  00:00:07.590
Welcome to part two of
the Stock Market Data Analysis Project.
3

3

00:00:07.590  -->  00:00:12.220
In the previous section we just
went over basically our imports and
4

4

00:00:12.220  -->  00:00:13.890
how we got the data frame set up.
5

5

00:00:14.990  -->  00:00:17.440
And then left on a note
that in this video we're
6

6

00:00:17.440  -->  00:00:19.339
going to be looking at
the moving averages.
7

7

00:00:20.610  -->  00:00:23.590
And also some daylight return analysis.
8

8

00:00:23.590  -->  00:00:27.030
So, once again you can
check out Investipedia for
9

9

00:00:27.030  -->  00:00:28.590
more information on moving averages.
10

10

00:00:28.590  -->  00:00:33.160
If you scroll down here they have a quick
like one minute video describing it.
11

11

00:00:33.160  -->  00:00:36.795
Basically you're just taking
the average prices over a certain, or
12

12

00:00:36.795  -->  00:00:39.445
all the prices over a certain
time period averaging them out.
13

13

00:00:40.775  -->  00:00:43.465
And that can give you some
insight to trends in the data.
14

14

00:00:44.655  -->  00:00:48.620
Okay, so let's go ahead and
do this for Apple stock.
15

15

00:00:49.850  -->  00:00:51.810
So we have our AAPL data frame.
16

16

00:00:53.110  -->  00:00:56.130
And actually before we do that,
we're gonna go ahead and
17

17

00:00:56.130  -->  00:00:58.330
calculate several moving averages.
18

18

00:00:59.570  -->  00:01:03.202
So I'm gonna say,
I'll make a list called ma_day.
19

19

00:01:03.202  -->  00:01:08.246
And I'm gonna calculate three moving
averages, a 10 day moving average,
20

20

00:01:08.246  -->  00:01:12.057
a 20 day moving average, and
a 50 day moving average.
21

21

00:01:15.354  -->  00:01:19.530
Okay, let's go ahead and make that list.
22

22

00:01:19.530  -->  00:01:20.750
All right?
23

23

00:01:20.750  -->  00:01:24.020
And then for ma in ma_day.
24

24

00:01:24.020  -->  00:01:25.360
Just gonna use the little for loop here.
25

25

00:01:25.360  -->  00:01:29.038
I'm gonna set my column name.
26

26

00:01:31.557  -->  00:01:37.299
Equal to MA for string days,
27

27

00:01:37.299  -->  00:01:42.085
and then call the string
28

28

00:01:42.085  -->  00:01:48.050
version of that number.
29

29

00:01:48.050  -->  00:01:49.720
And I'll break this down
in just a second for you.
30

30

00:01:51.870  -->  00:01:53.600
And then I'm gonna create a new column.
31

31

00:01:53.600  -->  00:01:58.028
Based in that column name, And
32

32

00:01:58.028  -->  00:02:04.145
I'm gonna use pandas rolling mean
to calculate the moving average.
33

33

00:02:07.209  -->  00:02:11.992
AAPL and we'll get that from
the adjusted closing price column.
34

34

00:02:15.533  -->  00:02:17.290
And we'll specify the number of days.
35

35

00:02:18.660  -->  00:02:19.540
So I've run that.
36

36

00:02:19.540  -->  00:02:21.030
Let me go ahead and
break it down what I just did.
37

37

00:02:22.550  -->  00:02:24.750
So I had a list of MA days.
38

38

00:02:24.750  -->  00:02:27.570
This just specifies the number of days for
that moving average.
39

39

00:02:27.570  -->  00:02:31.020
So I'm gonna average over 10 days,
20 days, and 50 days.
40

40

00:02:31.020  -->  00:02:36.423
Then in my for loop here what I'm doing is
I'm creating a column name, just a string,
41

41

00:02:36.423  -->  00:02:41.452
that we'll be using later, and I've
labeled it as the MA, or moving average,
42

42

00:02:41.452  -->  00:02:46.430
for, and then I'm calling the string of,
either 10, 20, or 50 days.
43

43

00:02:46.430  -->  00:02:49.758
So I'll have three columns,
MA for 10, 20, and 50 days.
44

44

00:02:49.758  -->  00:02:54.419
Then I'm creating a new column in
the Apple data frame based on that column
45

45

00:02:54.419  -->  00:02:56.610
name, that string.
46

46

00:02:56.610  -->  00:03:02.640
And I'm calling pandas so pd.rolling_mean
and that's gonna take two arguments.
47

47

00:03:02.640  -->  00:03:04.220
It's going to take your column name.
48

48

00:03:04.220  -->  00:03:07.130
In this case I'm using
the adjusted closing price column.
49

49

00:03:07.130  -->  00:03:09.990
So AAPL Adj Close.
50

50

00:03:09.990  -->  00:03:14.050
And it's also going to take the number of
days you want for that moving average.
51

51

00:03:14.050  -->  00:03:16.870
So I'm making an additional three
columns for the 10, 20, and
52

52

00:03:16.870  -->  00:03:19.140
50 moving day averages.
53

53

00:03:19.140  -->  00:03:24.569
Great, so let's go ahead and
plot all the additional moving averages.
54

54

00:03:25.920  -->  00:03:31.820
So what I'm going to do
here is call three columns.
55

55

00:03:31.820  -->  00:03:36.370
Actually, four columns,
since we'll do the adjusted close force.
56

56

00:03:36.370  -->  00:03:40.260
So I'll call the adjusted closing column.
57

57

00:03:40.260  -->  00:03:46.408
So I'm gonna pass a list of columns Names,
58

58

00:03:46.408  -->  00:03:50.070
and then, MA for, 10 days.
59

59

00:03:52.400  -->  00:03:56.850
Next column is MA for 20 days.
60

60

00:03:58.310  -->  00:04:01.170
Last column is MA for 50 days.
61

61

00:04:03.250  -->  00:04:03.750
Great.
62

62

00:04:05.140  -->  00:04:09.340
So I've passed a list of column
names into my data frame.
63

63

00:04:10.400  -->  00:04:12.463
And then I'm just gonna call
the plot method for them.
64

64

00:04:12.463  -->  00:04:18.540
I'll set subplots=false otherwise
it'll do a separate plot for
65

65

00:04:18.540  -->  00:04:23.200
each of those columns, and
I want them all on the same figure.
66

66

00:04:23.200  -->  00:04:29.770
And again I'll just set my figsize=(10,4).
67

67

00:04:29.770  -->  00:04:32.760
Whoops, sorry, this is getting
a little over the cell range, but
68

68

00:04:32.760  -->  00:04:34.440
hopefully you can see that.
69

69

00:04:34.440  -->  00:04:36.445
So let's break this down one more time.
70

70

00:04:36.445  -->  00:04:38.210
Passed a list of column names.
71

71

00:04:38.210  -->  00:04:40.890
And I'm gonna plot them all,
sets subplots=false, so
72

72

00:04:40.890  -->  00:04:42.740
I can get them all on one plot.
73

73

00:04:42.740  -->  00:04:46.280
Let's go ahead and run the cell,
and there we have it.
74

74

00:04:47.470  -->  00:04:51.730
So, we can see that the blue
is the adjusted closing price,
75

75

00:04:51.730  -->  00:04:56.420
so what we calculated earlier, and
then we have our moving averages.
76

76

00:04:56.420  -->  00:04:59.220
So you notice,
as you take your moving averages for
77

77

00:04:59.220  -->  00:05:03.380
more days at a time,
you're gonna get a smoother line.
78

78

00:05:03.380  -->  00:05:08.570
And it's not gonna be as reliant on the
daily fluctuations for its general trend.
79

79

00:05:10.040  -->  00:05:12.890
So that's how you can get
the moving averages using pandas.
80

80

00:05:12.890  -->  00:05:17.263
Again, there's tons of great information
on the actual financial information.
81

81

00:05:17.263  -->  00:05:21.993
So, there's things known as crossover and
support, which can help you kind of
82

82

00:05:21.993  -->  00:05:25.886
predict a future behavior or
understand the behavior of a stock.
83

83

00:05:28.207  -->  00:05:34.062
And then, there's another great Why Use
Moving Averages article on Invest-pedia.
84

84

00:05:34.062  -->  00:05:39.157
So you can get the moving average length,
you can look at trading strategies,
85

85

00:05:39.157  -->  00:05:43.364
those crossovers, and there's a bunch
of disadvantages to the moving average,
86

86

00:05:43.364  -->  00:05:48.500
it's not guaranteed to perfectly
predict the future, but it just
87

87

00:05:48.500  -->  00:05:53.700
simplifies your price data by smoothing
it out and creating one flowing line.
88

88

00:05:53.700  -->  00:05:57.650
So it can help make isolating
trends easier to see.
89

89

00:05:57.650  -->  00:06:00.700
Okay, so now that we've done that,
let's go ahead and
90

90

00:06:00.700  -->  00:06:03.870
take a quick look at daily returns.
91

91

00:06:03.870  -->  00:06:05.730
So we've done some baseline analysis.
92

92

00:06:05.730  -->  00:06:06.890
Lets go ahead and dive a little deeper.
93

93

00:06:08.030  -->  00:06:11.920
We're now gonna analyze daily returns and
the risk of the stock.
94

94

00:06:12.920  -->  00:06:15.940
So in order to do this we're gonna take
a closer look at the daily changes of
95

95

00:06:15.940  -->  00:06:17.840
the stock and
not just it's absolute value.
96

96

00:06:19.255  -->  00:06:22.615
Let's go ahead and use pandas to retrieve
the daily returns for the Apple stock.
97

97

00:06:24.295  -->  00:06:31.631
So, what I'm gonna do here
is call AAPL Daily Return.
98

98

00:06:32.880  -->  00:06:34.650
So that's my Daily Return column.
99

99

00:06:35.960  -->  00:06:38.360
So I'm making a new column
called daily return and
100

100

00:06:39.500  -->  00:06:42.990
I'm gonna set that equal to
the adjusted closing price column.
101

101

00:06:45.780  -->  00:06:49.335
And then I'm gonna call
the percent change method on it.
102

102

00:06:49.335  -->  00:06:50.605
Which is built into pandas.
103

103

00:06:53.275  -->  00:06:55.945
So I'm creating a new column
called Daily Return, and
104

104

00:06:55.945  -->  00:06:59.955
it's gonna be the percent change
of the adjusted closing column.
105

105

00:06:59.955  -->  00:07:03.480
So that's gonna find the percent
change for each day, and
106

106

00:07:03.480  -->  00:07:05.390
then I'm gonna plot it all.
107

107

00:07:05.390  -->  00:07:13.092
So I will, now that the column is created
I'll say Daily Return column .plot.
108

108

00:07:13.092  -->  00:07:18.160
I'll call my figsize,
again you don't have to do this.
109

109

00:07:20.210  -->  00:07:21.520
I'll set my legend equal to true.
110

110

00:07:25.242  -->  00:07:29.510
And I'm gonna set the line
style to be a hashed line.
111

111

00:07:29.510  -->  00:07:34.920
You don't have to do this, it's up to you,
however you wanna, visualization is
112

112

00:07:34.920  -->  00:07:39.860
up to you basically, and then I'll set
the marker equal to o, just a little dot.
113

113

00:07:39.860  -->  00:07:42.270
Okay, so let's go ahead and
see how that worked out.
114

114

00:07:44.450  -->  00:07:46.570
And there you go, so
now you have your daily returns.
115

115

00:07:46.570  -->  00:07:49.267
And so basically what this
means is on any given day,
116

116

00:07:49.267  -->  00:07:52.160
what was your percent
return on your money.
117

117

00:07:52.160  -->  00:07:57.800
So if you bought stock at the beginning of
that day, did you get for instance here on
118

118

00:07:57.800  -->  00:08:02.020
some date in May, did you get almost
an eight percent return on that stock?
119

119

00:08:02.020  -->  00:08:04.200
Or did you lose on that stock?
120

120

00:08:04.200  -->  00:08:05.270
I mean, we can use this.
121

121

00:08:05.270  -->  00:08:09.510
We'll use histograms and
some more statistical techniques to
122

122

00:08:09.510  -->  00:08:11.510
analyze risk on the stock
based on the behavior.
123

123

00:08:11.510  -->  00:08:14.930
But what we've done here is charted
the daily return on average.
124

124

00:08:14.930  -->  00:08:18.430
The daily return for each of the days
throughout the last year for
125

125

00:08:18.430  -->  00:08:19.070
the Apple stock.
126

126

00:08:20.898  -->  00:08:24.130
So if we want to look at the average
daily return, for the past year,
127

127

00:08:24.130  -->  00:08:26.880
we can do that using a histogram.
128

128

00:08:26.880  -->  00:08:29.560
And now we're gonna get into some
of seaborn's capabilities here.
129

129

00:08:31.240  -->  00:08:34.470
So what I'm gonna do is call seaborn sns.,
130

130

00:08:34.470  -->  00:08:40.060
and in this case I'm gonna use this plot.
131

131

00:08:40.060  -->  00:08:42.240
And what this plot allows
us to do if you remember,
132

132

00:08:42.240  -->  00:08:45.360
it allows us to place two
plots on top of each other.
133

133

00:08:45.360  -->  00:08:47.520
So I'm gonna a histogram and a KDE plot.
134

134

00:08:48.600  -->  00:08:51.820
Go ahead and check back on the data
visualization lectures if you're
135

135

00:08:51.820  -->  00:08:53.250
a little hazy on that subject.
136

136

00:08:54.900  -->  00:09:03.750
But continuing on, I'm going to call
the Daily Return column that we created.
137

137

00:09:05.130  -->  00:09:09.590
I'll drop some na values,
in case there are any, so
138

138

00:09:09.590  -->  00:09:12.650
it doesn't mess around with
seaborn's capabilities.
139

139

00:09:12.650  -->  00:09:14.570
So go ahead and
drop na values from that column.
140

140

00:09:14.570  -->  00:09:21.220
I'm gonna set my bins equal to 100,
since there's quite a few data points.
141

141

00:09:21.220  -->  00:09:25.050
And I'll set the color to purple,
you can set it to whatever you want.
142

142

00:09:25.050  -->  00:09:25.800
But I like the way that looks.
143

143

00:09:30.244  -->  00:09:31.210
And there you have it.
144

144

00:09:32.390  -->  00:09:36.590
So this is a histogram of your
daily returns for the past year.
145

145

00:09:36.590  -->  00:09:40.130
So you can see it looks like it's
skewed a little more positive.
146

146

00:09:40.130  -->  00:09:42.970
But we can do some more stat
analysis to check that out.
147

147

00:09:44.580  -->  00:09:51.252
Another way you could have done this
is by just calling Daily, oops,
148

148

00:09:51.252  -->  00:09:57.107
Daily Return|.hist.
149

149

00:09:57.107  -->  00:10:04.632
And you could have specified
number of bins=100.
150

150

00:10:04.632  -->  00:10:07.210
There you go.
151

151

00:10:07.210  -->  00:10:08.932
So the top one is using seaborn.
152

152

00:10:08.932  -->  00:10:12.837
And I like seaborn a little better,
you can also plot the KDE, and
153

153

00:10:12.837  -->  00:10:15.535
you can do more with it,
but another quick and
154

154

00:10:15.535  -->  00:10:20.010
easy way to do it is to just using pandas
built in histogram for that column.
155

155

00:10:21.140  -->  00:10:27.420
Great, so both methods work and
we're going to continue on.
156

156

00:10:27.420  -->  00:10:31.991
So now if we wanted to analyze the returns
of all the stocks on our list,
157

157

00:10:31.991  -->  00:10:33.400
how could we do that?
158

158

00:10:34.430  -->  00:10:38.280
We're going to go ahead and
build a new data frame with all of
159

159

00:10:38.280  -->  00:10:41.910
the adjusted close columns for
each of those stock's data frames.
160

160

00:10:43.960  -->  00:10:45.620
So I'm gonna create a data frame.
161

161

00:10:47.660  -->  00:10:53.554
I'm gonna call it
closing_df = DataReader and
162

162

00:10:53.554  -->  00:10:59.455
in this case I'm going to
pass my tech list here.
163

163

00:11:04.757  -->  00:11:08.737
And then call Yahoo.
164

164

00:11:08.737  -->  00:11:13.753
The start, the end, and
I'm just gonna have
165

165

00:11:13.753  -->  00:11:19.580
it set equal to The closing price.
166

166

00:11:19.580  -->  00:11:21.900
So, let's see if that works.
167

167

00:11:21.900  -->  00:11:24.450
Okay, so,
let's break down what I just did here.
168

168

00:11:24.450  -->  00:11:28.018
I created a new data
frame called closing_df.
169

169

00:11:28.018  -->  00:11:30.830
And I used data reader just
to reiterate how we can read
170

170

00:11:30.830  -->  00:11:33.190
stocks from the web using pandas.
171

171

00:11:33.190  -->  00:11:38.480
I passed my tech list,
used Yahoo Finance, my start, my end date.
172

172

00:11:38.480  -->  00:11:44.090
And I specified that I just wanted
the adjusted closing price columns.
173

173

00:11:44.090  -->  00:11:50.420
Let's go ahead and see what that gave us,
by taking a quick look at that data frame.
174

174

00:11:52.040  -->  00:11:55.250
So now we have our closing data frame.
175

175

00:11:55.250  -->  00:11:58.290
It's just a bunch of columns
of the adjusted closing price.
176

176

00:11:58.290  -->  00:12:02.850
You could have also built this off your
previous data frames that you made.
177

177

00:12:02.850  -->  00:12:06.760
But this is just a quicker
way of doing it.
178

178

00:12:06.760  -->  00:12:09.350
So now that we have all the closing
prices, let's go ahead and
179

179

00:12:09.350  -->  00:12:12.012
get the daily return for all the stocks,
like we did for the Apple stocks.
180

180

00:12:13.580  -->  00:12:20.130
So, I'll make a new data frame,
call tech_rets, rets standing for returns.
181

181

00:12:21.360  -->  00:12:25.543
And I'm going to say it's equal
to that closing_dataframe df,
182

182

00:12:25.543  -->  00:12:28.370
and pass the percent
change method on that.
183

183

00:12:32.742  -->  00:12:39.499
And now let's go ahead and look at the,
Oops, that data frame there.
184

184

00:12:39.499  -->  00:12:41.880
Cool.
185

185

00:12:41.880  -->  00:12:46.678
You have some NaN values at the first one,
which kind of makes sense,
186

186

00:12:46.678  -->  00:12:49.750
but the rest of them are filled out,
great.
187

187

00:12:51.200  -->  00:12:55.190
So we can compare the daily
return percentage for
188

188

00:12:55.190  -->  00:12:57.835
two stocks to see how they're correlated.
189

189

00:12:57.835  -->  00:13:00.575
So we have the daily percentage returns.
190

190

00:13:00.575  -->  00:13:05.635
So what we're gonna do is basically
what we did here with seaborn,
191

191

00:13:05.635  -->  00:13:08.335
except I'm gonna compare it for
two stocks.
192

192

00:13:08.335  -->  00:13:13.250
So to show you what I mean I'm
gonna compare Google to itself.
193

193

00:13:17.089  -->  00:13:19.380
So I'm going to use joint plot for this.
194

194

00:13:19.380  -->  00:13:20.100
Again, go ahead and
195

195

00:13:20.100  -->  00:13:23.860
check out the data visualization lectures
if you want to refresh on how to do this.
196

196

00:13:24.880  -->  00:13:32.977
But in this case I pass Both Google.
197

197

00:13:36.564  -->  00:13:38.781
So Goog is the name of the column here.
198

198

00:13:38.781  -->  00:13:42.020
From my tech return stock.
199

199

00:13:42.020  -->  00:13:45.800
So I'm passing the Google column and
the Google column twice.
200

200

00:13:45.800  -->  00:13:47.120
And I'll show you why
I do that in a second.
201

201

00:13:49.100  -->  00:13:53.230
I'm gonna set the kind for
this joint plot to be scatter.
202

202

00:13:54.610  -->  00:13:58.790
So remember, joint plots show two plots,
histograms, and whatever else you want,
203

203

00:13:58.790  -->  00:14:04.540
either hex, or scatter,
or other methods as well.
204

204

00:14:04.540  -->  00:14:09.678
And I'll set the color here to seagreen.
205

205

00:14:09.678  -->  00:14:11.718
All right, let's see how this worked.
206

206

00:14:11.718  -->  00:14:13.205
Whoops.
207

207

00:14:13.205  -->  00:14:17.520
Jointplot, excuse me, not joinplot.
208

208

00:14:18.820  -->  00:14:19.890
Great.
209

209

00:14:19.890  -->  00:14:22.130
So let's go ahead and
see what we have here.
210

210

00:14:22.130  -->  00:14:24.480
We have a perfectly linear relationship.
211

211

00:14:24.480  -->  00:14:28.220
And that makes sense because
you're comparing Google to Google.
212

212

00:14:28.220  -->  00:14:32.655
So your scatter plot should
have a Pearson r value of one.
213

213

00:14:32.655  -->  00:14:34.625
Cuz that makes perfect sense right?
214

214

00:14:34.625  -->  00:14:40.535
Any Google return on one day should equal
the Google return on that same day.
215

215

00:14:40.535  -->  00:14:43.025
So you have this perfectly
linear correlation.
216

216

00:14:44.035  -->  00:14:47.755
So we can see if two stocks are perfectly
and positively correlated with each other,
217

217

00:14:47.755  -->  00:14:51.500
you get this positive linear
relationship between its daily returns.
218

218

00:14:53.240  -->  00:14:56.880
Okay, so now what we're gonna do
is compare two different stocks.
219

219

00:14:58.940  -->  00:15:03.849
And this is were the interesting part
begins, cuz you're trying to see if there
220

220

00:15:03.849  -->  00:15:08.480
are any relationships between tech stocks,
which there may or may not be.
221

221

00:15:13.200  -->  00:15:14.930
So I'm basically repeating this.
222

222

00:15:16.230  -->  00:15:18.220
But now I'm gonna pass the Google and
223

223

00:15:18.220  -->  00:15:23.060
the Microsoft columns using
my tech_rets data frame.
224

224

00:15:23.060  -->  00:15:24.290
And again I'll call the kind scatter.
225

225

00:15:27.401  -->  00:15:29.780
And this time the color
was defaulted as blue.
226

226

00:15:31.510  -->  00:15:38.170
And now you kind of see a correlation, not
too sure if it's actually there or not.
227

227

00:15:38.170  -->  00:15:41.910
So your Pearson r value,
this number right here, 0.41, it's
228

228

00:15:43.870  -->  00:15:47.759
officially known as the Pearson
product-moment correlation coefficient.
229

229

00:15:48.860  -->  00:15:50.580
So, let's go ahead and
go back to the IPython notebook.
230

230

00:15:56.579  -->  00:15:59.760
And scrolling down here,
we've done all this already.
231

231

00:16:04.740  -->  00:16:06.147
But, so the Pearson r value,
232

232

00:16:06.147  -->  00:16:10.220
this is officially known as the Pearson
product-moment correlation coefficient.
233

233

00:16:10.220  -->  00:16:13.666
It can give you a sense of how
correlated daily percentage returns are,
234

234

00:16:13.666  -->  00:16:15.060
in this case.
235

235

00:16:15.060  -->  00:16:18.870
Or any two data sets, but in this case,
we're looking at daily percentage returns.
236

236

00:16:18.870  -->  00:16:23.360
So you can find more about it
at the Wikipedia page for it.
237

237

00:16:24.840  -->  00:16:28.902
But for
a quick intuitive sense you can check out,
238

238

00:16:28.902  -->  00:16:33.545
if you want to just check out
what it looks like visually,
239

239

00:16:33.545  -->  00:16:40.500
these are various Pearson product-moment
correlation coefficient values.
240

240

00:16:40.500  -->  00:16:44.990
But you can see here basically
a value of 1 means you're
241

241

00:16:44.990  -->  00:16:48.730
perfectly positively correlated,
as we saw with Google.
242

242

00:16:48.730  -->  00:16:51.210
And as you go down a little lower,
243

243

00:16:51.210  -->  00:16:55.420
you're less correlated so 0.4 range
kinda looks like this on a scatter plot.
244

244

00:16:55.420  -->  00:17:01.130
And you could see that as well
with the Microsoft and Google.
245

245

00:17:01.130  -->  00:17:02.524
So they're about 0.4.
246

246

00:17:02.524  -->  00:17:06.460
Kinda correlated, not super,
super strong though.
247

247

00:17:06.460  -->  00:17:11.100
Depends what environment you're in,
as far as what's a strong correlation or
248

248

00:17:11.100  -->  00:17:12.790
what's a poor correlation.
249

249

00:17:13.970  -->  00:17:18.010
But seaborn and pandas make it really
easy to repeat this comparison analysis,
250

250

00:17:19.050  -->  00:17:20.910
the one we did here with Google and
Microsoft.
251

251

00:17:22.340  -->  00:17:25.980
For every possible combination of stocks
in our technology stock ticker list.
252

252

00:17:25.980  -->  00:17:29.650
And we can use SNS.peerplot to
automatically create this plot.
253

253

00:17:29.650  -->  00:17:32.050
So what we're gonna do is
create this plot right here.
254

254

00:17:34.050  -->  00:17:34.700
Okay.
255

255

00:17:34.700  -->  00:17:39.260
So let's go ahead and
hop back and do that.
256

256

00:17:39.260  -->  00:17:44.010
So I'm actually gonna
cut this video here and
257

257

00:17:44.010  -->  00:17:47.260
in the next video we'll dive
deeper into the pair plots.
258

258

00:17:47.260  -->  00:17:52.790
I recommend before we dive into
the pair plots, go ahead and just read
259

259

00:17:52.790  -->  00:17:56.740
through the complete IPython notebook,
and check out the pair plots here.
260

260

00:17:58.950  -->  00:18:03.100
And then in the next video, we'll go
over how we actually construct those.
261

261

00:18:03.100  -->  00:18:05.060
Okay, thanks, and I'll see you there.
