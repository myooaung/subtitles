WEBVTT
1
1

00:00:00.370  -->  00:00:04.678
Hey guys, welcome to Lecture 42,
Groupby on DataFrames.
2

2

00:00:04.678  -->  00:00:11.178
So in this lecture, we'll be learning
how to use Groupby, on DataFrames.
3

3

00:00:11.178  -->  00:00:15.160
So, import the usual numpy as np,
pandas as pd.
4

4

00:00:15.160  -->  00:00:18.520
And then from pandas,import DataFrame and
Series.
5

5

00:00:19.530  -->  00:00:21.430
We're gonna start out
by making a data frame.
6

6

00:00:22.610  -->  00:00:27.370
So we'll say dframe = DataFrame.
7

7

00:00:27.370  -->  00:00:30.620
And I'm gonna construct this
DataFrame using a dictionary.
8

8

00:00:32.140  -->  00:00:34.000
So let's go ahead and
start off with the first column, k1.
9

9

00:00:34.000  -->  00:00:39.500
And then I'm just gonna have this
column be a list of letters.
10

10

00:00:39.500  -->  00:00:44.060
So we'll say x, x, y, y.
11

11

00:00:44.060  -->  00:00:49.647
And finally we'll have it be z.
12

12

00:00:53.887  -->  00:00:55.387
Okay.
13

13

00:00:55.387  -->  00:01:01.050
Next column will be K2, second key.
14

14

00:01:01.050  -->  00:01:03.540
And this one I'm just gonna have
it be a series of alpha and betas.
15

15

00:01:03.540  -->  00:01:11.572
So alpha 'Beta' 'alpha' 'beta' and
16

16

00:01:11.572  -->  00:01:18.230
then 'alpha' finally.
17

17

00:01:18.230  -->  00:01:21.000
And then we'll have two data sets
that will just be random numbers.
18

18

00:01:21.000  -->  00:01:23.224
So I'll say data 'dataset1}).
19

19

00:01:24.680  -->  00:01:28.950
I'll call this guy mp.random.randn.
20

20

00:01:28.950  -->  00:01:33.890
That would be five numbers.
21

21

00:01:33.890  -->  00:01:38.197
And then we'll have dataset2.
22

22

00:01:38.197  -->  00:01:43.205
And we'll just have this
be np.random.randn.
23

23

00:01:43.205  -->  00:01:45.710
In code would be five as well.
24

24

00:01:46.880  -->  00:01:50.150
Okay and then let's just take a quick
look at what that data frame looks like.
25

25

00:01:51.750  -->  00:01:56.400
So we have a series of five
by two random numbers.
26

26

00:01:56.400  -->  00:01:58.230
That matrix there.
27

27

00:01:58.230  -->  00:02:01.130
And we have our two datasets,
and essentially two keys for
28

28

00:02:01.130  -->  00:02:03.060
those datasets, the k1 and k2 column.
29

29

00:02:03.060  -->  00:02:03.560
Columns.
30

30

00:02:04.720  -->  00:02:06.160
So how can we use Groupby?
31

31

00:02:06.160  -->  00:02:11.390
Well, we can use Groupby to create
what's called a serious Groupby object.
32

32

00:02:12.860  -->  00:02:19.200
So I'm going to say, let me grab the data
set from the data set one column.
33

33

00:02:19.200  -->  00:02:20.460
And group it by the k1 key.
34

34

00:02:22.140  -->  00:02:28.374
So, I can say group1 equals
from the dataset column,
35

35

00:02:28.374  -->  00:02:31.270
the dataset 1 column.
36

36

00:02:31.270  -->  00:02:33.910
I'm going to say Groupby.
37

37

00:02:33.910  -->  00:02:37.279
And then we're gonna group
it by the k1 column.
38

38

00:02:42.160  -->  00:02:43.878
And then if we want to
see what this looks like.
39

39

00:02:43.878  -->  00:02:48.010
We're actually just going to
need to get a confirmation,
40

40

00:02:48.010  -->  00:02:50.210
its a serious group by object.
41

41

00:02:50.210  -->  00:02:51.600
We won't actually see what it is.
42

42

00:02:52.930  -->  00:02:54.779
So there's the kind of object it is.
43

43

00:02:56.060  -->  00:03:00.320
If we wanna see stuff, we can perform
operations on the particular group.
44

44

00:03:00.320  -->  00:03:03.250
So I can say group1, and
then check out the mean.
45

45

00:03:07.010  -->  00:03:11.100
And now I have k1, the key.
46

46

00:03:11.100  -->  00:03:17.060
And X, Y and Z, the means for
each of that data set one.
47

47

00:03:19.890  -->  00:03:25.123
So I can use group keys
that are series' as well.
48

48

00:03:25.123  -->  00:03:30.979
So to expand on this example, let's go
ahead and make some arrays to use as keys.
49

49

00:03:30.979  -->  00:03:39.370
So, I'm going to say cities = np.array.
50

50

00:03:39.370  -->  00:03:43.610
And now I'm going to put
in some city initials.
51

51

00:03:43.610  -->  00:03:44.510
So, lets say NY.
52

52

00:03:44.510  -->  00:03:51.300
Lets put in LA, put in LA again, and
then I'll have two more New York's, NY.
53

53

00:03:52.780  -->  00:03:55.590
Okay, those are my cities.
54

54

00:03:55.590  -->  00:03:59.860
And then I'm gonna have some
in a month array as well.
55

55

00:04:01.080  -->  00:04:07.925
So I'll call np.array, and then we're
gonna make a list of just months.
56

56

00:04:07.925  -->  00:04:13.365
So Jan, February, January.
57

57

00:04:13.365  -->  00:04:16.143
We'll just have it be alternating.
58

58

00:04:16.143  -->  00:04:17.306
January.
59

59

00:04:17.306  -->  00:04:18.186
Okay.
60

60

00:04:20.257  -->  00:04:21.697
So let's run that.
61

61

00:04:21.697  -->  00:04:25.380
And now using the data from data set one.
62

62

00:04:25.380  -->  00:04:27.780
I'm gonna group the means by city and
month.
63

63

00:04:28.840  -->  00:04:30.060
So I'll show you what I mean.
64

64

00:04:30.060  -->  00:04:31.950
Let's go ahead and try that out.
65

65

00:04:31.950  -->  00:04:38.812
So, let's grab dataset1
column Then we call Groupby.
66

66

00:04:40.292  -->  00:04:41.720
And what do I want to group by?
67

67

00:04:41.720  -->  00:04:48.630
I want to group by cities, and month.
68

68

00:04:48.630  -->  00:04:49.840
Those two arrays.
69

69

00:04:51.090  -->  00:04:52.732
And then I wanna grab the mean by that.
70

70

00:04:52.732  -->  00:04:55.764
So what does that look like?
71

71

00:04:58.764  -->  00:05:04.580
So, it's lined up the cities first,
and then the month.
72

72

00:05:04.580  -->  00:05:06.850
So it's grouped them in that fashion.
73

73

00:05:06.850  -->  00:05:11.240
And then it's averaged out, the dataset1.
74

74

00:05:11.240  -->  00:05:16.240
Based on those two arrays that I
assigned to it, onto dataset one.
75

75

00:05:17.430  -->  00:05:20.920
Let's see the original dataset again.
76

76

00:05:20.920  -->  00:05:26.500
So I'll call dframe.
77

77

00:05:26.500  -->  00:05:31.350
So here's the dframe, and
I can see the values that align up.
78

78

00:05:31.350  -->  00:05:33.190
So I have my 0.899.
79

79

00:05:33.190  -->  00:05:35.610
That was LA February.
80

80

00:05:36.740  -->  00:05:41.650
Point 533, that was January for that guy.
81

81

00:05:41.650  -->  00:05:46.290
And then the 252 was New York, February.
82

82

00:05:46.290  -->  00:05:47.420
Alright cool.
83

83

00:05:47.420  -->  00:05:50.140
So those values lined up.
84

84

00:05:50.140  -->  00:05:53.150
We can also pass column
names as group keys.
85

85

00:05:54.200  -->  00:05:55.450
So let's go ahead and try that out.
86

86

00:05:56.490  -->  00:06:02.698
So for instance I can say
dframe.groupby('k1') and
87

87

00:06:02.698  -->  00:06:06.251
then get the mean( ) from that.
88

88

00:06:09.691  -->  00:06:14.070
So now I've group my
dataframe by this k1 column.
89

89

00:06:14.070  -->  00:06:18.540
So I grouped up all the x's,
all the y's, and all the z's together.
90

90

00:06:18.540  -->  00:06:24.800
And then I grabbed the means of those
two data sets, based on their k1 key.
91

91

00:06:26.630  -->  00:06:32.440
So for instance,
if we look at dataset1, on the x row.
92

92

00:06:34.200  -->  00:06:42.085
That result is just
the average of -0.3 and 0.89.
93

93

00:06:42.085  -->  00:06:47.710
Since those two were assigned
the x on the k1 column.
94

94

00:06:49.600  -->  00:06:56.680
Okay, and then we can even say
something like, Groupby method.
95

95

00:06:56.680  -->  00:06:59.110
To get the group sizes.
96

96

00:06:59.110  -->  00:07:03.401
So I can say, Groupby.
97

97

00:07:03.401  -->  00:07:09.090
Well before we do that,
I can just show you real quick.
98

98

00:07:09.090  -->  00:07:10.820
That I can get the mean
on multiple columns.
99

99

00:07:10.820  -->  00:07:15.120
So I could say Groupby,
let's say we just did the mean on k1.
100

100

00:07:15.120  -->  00:07:21.370
If we wanted to do the mean on both keys,
I could just pass a list.
101

101

00:07:21.370  -->  00:07:22.072
And then ask for the mean.
102

102

00:07:25.813  -->  00:07:29.065
And now it's giving you
the average based on both keys.
103

103

00:07:29.065  -->  00:07:33.915
So the average for every term in
the dataset that has both X and alpha.
104

104

00:07:33.915  -->  00:07:34.635
Or X and beta.
105

105

00:07:34.635  -->  00:07:35.995
Or Y and alpha, and Y and beta.
106

106

00:07:35.995  -->  00:07:39.710
Or just Z in alpha out
of those two data sets.
107

107

00:07:39.710  -->  00:07:42.500
So hopefully these examples are starting
to get a little more concrete.
108

108

00:07:42.500  -->  00:07:44.770
As we call by certain keys and
get the means.
109

109

00:07:47.001  -->  00:07:51.504
And now back to getting sizes.
110

110

00:07:51.504  -->  00:07:55.885
I can say, dframe.groupby.
111

111

00:07:58.907  -->  00:08:04.190
I'll group it by the k1 key,
and then get the size.
112

112

00:08:06.620  -->  00:08:11.556
So this means,
I have two terms that have x in k1.
113

113

00:08:11.556  -->  00:08:14.320
Two terms that have y in k1.
114

114

00:08:14.320  -->  00:08:20.270
And then one term that has
z in k1 in that data frame.
115

115

00:08:20.270  -->  00:08:21.670
And if I look at that data frame.
116

116

00:08:23.080  -->  00:08:24.545
I can see that that was the case.
117

117

00:08:24.545  -->  00:08:25.383
Cool.
118

118

00:08:25.383  -->  00:08:31.750
So we can iterate over groups as well.
119

119

00:08:33.260  -->  00:08:39.464
So to show you an example of this.
120

120

00:08:39.464  -->  00:08:47.134
I'll say for name,group in dframe.groupby.
121

121

00:08:47.134  -->  00:08:52.083
We'll say it's K1 i'm going to
122

122

00:08:52.083  -->  00:08:57.216
print 'This is the group name'.
123

123

00:08:57.216  -->  00:09:04.290
So I'll say,
This is the %s to get that string.
124

124

00:09:04.290  -->  00:09:08.700
This is the group label it %name.
125

125

00:09:08.700  -->  00:09:11.793
And i'm going to print group.
126

126

00:09:11.793  -->  00:09:16.110
And then print a new line.
127

127

00:09:21.310  -->  00:09:26.700
So what this is gonna do is, it's gonna
check the name, and check the group.
128

128

00:09:26.700  -->  00:09:31.590
And it's gonna print out,
this is the blank group, from k1.
129

129

00:09:31.590  -->  00:09:33.660
So it should say, this is the.
130

130

00:09:34.680  -->  00:09:37.550
Since, k1 is X's, Y's and Z's.
131

131

00:09:37.550  -->  00:09:39.210
So it's gonna iterate
through all those names.
132

132

00:09:39.210  -->  00:09:42.450
So, it's gonna say at first,
this is the X group.
133

133

00:09:42.450  -->  00:09:46.210
And then it's gonna give
us this dataset here.
134

134

00:09:46.210  -->  00:09:47.290
Since that was the X group.
135

135

00:09:47.290  -->  00:09:49.660
Then it's gonna say, this is the Y group.
136

136

00:09:49.660  -->  00:09:51.410
And it should give us this dataset here.
137

137

00:09:51.410  -->  00:09:55.240
Since those both have Y as their k1 value.
138

138

00:09:55.240  -->  00:09:57.150
And then it's finally going
to give us the Z group.
139

139

00:09:57.150  -->  00:09:58.252
So let's go ahead and see if that worked.
140

140

00:10:00.092  -->  00:10:00.972
So that's what we get.
141

141

00:10:00.972  -->  00:10:02.740
We say this is the X group.
142

142

00:10:02.740  -->  00:10:06.870
And it gives us the data sets, and
the two columns for that group.
143

143

00:10:06.870  -->  00:10:08.540
And again for the Y and the Z group.
144

144

00:10:10.040  -->  00:10:13.710
So that was iterating by a single key.
145

145

00:10:13.710  -->  00:10:16.820
We can do the exact same thing for
multiple keys.
146

146

00:10:16.820  -->  00:10:22.092
So I can say for instance,
147

147

00:10:22.092  -->  00:10:26.884
for (k1, k2) group
148

148

00:10:26.884  -->  00:10:31.445
in dframe.groupby.
149

149

00:10:31.445  -->  00:10:36.842
And I'll say K1 K2.
150

150

00:10:41.362  -->  00:10:47.381
And I can print, I can say, key1 = string,
151

151

00:10:47.381  -->  00:10:51.355
which we'll see in a second.
152

152

00:10:51.355  -->  00:10:56.878
Key2 = the other string.
153

153

00:10:56.878  -->  00:10:57.898
Close that off.
154

154

00:10:57.898  -->  00:11:03.830
And then we'll call (k1,k2)
to fill out those keys.
155

155

00:11:06.490  -->  00:11:07.830
I'll say, print group.
156

156

00:11:09.960  -->  00:11:12.250
And then print a new line,
to get some separation.
157

157

00:11:14.340  -->  00:11:15.900
So let's think about
what this is gonna do.
158

158

00:11:15.900  -->  00:11:21.720
What this should do is,
it should print out both keys for you.
159

159

00:11:21.720  -->  00:11:26.980
So right now, our keys that we're
using are k1 key and k2 key.
160

160

00:11:26.980  -->  00:11:30.480
So Key 1 is gonna be your letters.
161

161

00:11:30.480  -->  00:11:33.060
So your x's, your y's, your z's.
162

162

00:11:33.060  -->  00:11:36.040
Key 2, since it's k2,
is gonna be your alpha or your beta.
163

163

00:11:37.330  -->  00:11:41.700
Then it's going to print the group
that belongs to both of those keys.
164

164

00:11:41.700  -->  00:11:46.130
So, for instance, the first thing that we
should see, and I'll print the dframe, so
165

165

00:11:46.130  -->  00:11:46.980
we have a reference.
166

166

00:11:48.940  -->  00:11:54.640
For the first iteration,
I should get the first key, which is K1.
167

167

00:11:54.640  -->  00:11:59.350
So it's gonna say Key1 is equal to X.
168

168

00:11:59.350  -->  00:12:03.480
And then it's gonna say Key2
from k2 is equal to alpha.
169

169

00:12:03.480  -->  00:12:06.940
And then it's gonna print
the data set where that's true.
170

170

00:12:06.940  -->  00:12:09.185
And for
this it just happens to be one row.
171

171

00:12:09.185  -->  00:12:12.155
So it should be printing out that dataset.
172

172

00:12:14.115  -->  00:12:16.575
And then it's gonna do that for
the rest of them.
173

173

00:12:16.575  -->  00:12:18.425
So, let's go ahead and see if that works.
174

174

00:12:20.605  -->  00:12:21.555
And there you have it.
175

175

00:12:21.555  -->  00:12:22.890
You have Key 1 = X.
176

176

00:12:22.890  -->  00:12:25.703
And then Key 2, I forgot to write equals.
177

177

00:12:27.743  -->  00:12:28.780
Let's run it again.
178

178

00:12:28.780  -->  00:12:30.450
Okay, now we've added an equals there.
179

179

00:12:30.450  -->  00:12:34.290
Equals alpha, and it's giving you
the dataset where those Keys matched up.
180

180

00:12:35.850  -->  00:12:37.600
All right.
Then it's done that,
181

181

00:12:37.600  -->  00:12:40.210
it's iterated that through
the entire dataframe.
182

182

00:12:40.210  -->  00:12:41.950
And you can see that data frame there.
183

183

00:12:43.080  -->  00:12:44.450
Great.
184

184

00:12:44.450  -->  00:12:47.070
So, what else can we do?
185

185

00:12:48.160  -->  00:12:54.280
So a possibly useful tactic for this is
creating a dictionary of the data pieces.
186

186

00:12:54.280  -->  00:12:55.590
So if we wanted to do that.
187

187

00:12:55.590  -->  00:13:00.600
I could say something like have a object,
group_dict.
188

188

00:13:00.600  -->  00:13:05.520
And I will create
a dictionary by using dict.
189

189

00:13:05.520  -->  00:13:10.480
And I will pass a list through it.
190

190

00:13:10.480  -->  00:13:16.080
And that list is going to
come from dframe.groupby.
191

191

00:13:16.080  -->  00:13:18.834
And I will group it by the first Key,
that k1.
192

192

00:13:20.934  -->  00:13:23.310
So let me run that.
193

193

00:13:23.310  -->  00:13:25.440
So now I have my group dictionary.
194

194

00:13:25.440  -->  00:13:28.300
And so now let's show the group with X.
195

195

00:13:28.300  -->  00:13:35.130
So I can say, group_dict,
and we'll pass it with X.
196

196

00:13:38.400  -->  00:13:43.930
And now it's shown us every row,
that had X as K1 value.
197

197

00:13:46.440  -->  00:13:51.284
We could've also chosen
to do this with axis = 1.
198

198

00:13:51.284  -->  00:13:55.160
So let's create a dictionary for
d types of objects.
199

199

00:13:57.120  -->  00:13:59.930
And that's d types, as in the letter d.
200

200

00:13:59.930  -->  00:14:06.100
So i'm gonna say make another object,
group_dict.
201

201

00:14:06.100  -->  00:14:09.770
And i'm gonna label it also access one.
202

202

00:14:11.090  -->  00:14:12.600
I'm going to do the exact same thing.
203

203

00:14:12.600  -->  00:14:13.970
Dictionary List.
204

204

00:14:15.200  -->  00:14:23.673
And I'm going to do this by creating
dframe.groupby, dframe.dtypes.
205

205

00:14:23.673  -->  00:14:29.743
And I'm going to do this on axis = 1.
206

206

00:14:29.743  -->  00:14:32.750
So let's run that.
207

207

00:14:32.750  -->  00:14:34.661
And then I'm gonna show
you what that looks like.
208

208

00:14:40.961  -->  00:14:43.260
So what did we end up getting?
209

209

00:14:43.260  -->  00:14:48.690
We ended up getting basically
a separation of your types.
210

210

00:14:48.690  -->  00:14:53.400
So here you have the d types,
which are just your floating numbers.
211

211

00:14:53.400  -->  00:14:58.670
And then you have your letter types,
which are the k1 and k2 columns.
212

212

00:14:58.670  -->  00:15:04.340
So, its actually separated
the dataframe by the types of data.
213

213

00:15:04.340  -->  00:15:09.070
And it did it along the axis = 1.
214

214

00:15:09.070  -->  00:15:09.880
Great.
215

215

00:15:09.880  -->  00:15:15.720
So we can use groupby to actually
separate data, by the actual data type.
216

216

00:15:15.720  -->  00:15:19.800
So, if you wanted to separate
numbers versus words.
217

217

00:15:19.800  -->  00:15:20.900
Or something of that manner.
218

218

00:15:23.750  -->  00:15:26.847
Next we can learn how to
use groupby with columns.
219

219

00:15:26.847  -->  00:15:27.347
So.
220

220

00:15:30.478  -->  00:15:36.118
Let's go ahead and
make an object called dataset2_group.
221

221

00:15:36.118  -->  00:15:41.578
And for this example,
lets say if we only wanted to
222

222

00:15:41.578  -->  00:15:47.048
group the dataset2 column
with both set of keys.
223

223

00:15:47.048  -->  00:15:50.028
I can say dframe.groupby.
224

224

00:15:50.028  -->  00:15:54.320
I'll pass a list of both keys to it.
225

225

00:15:54.320  -->  00:16:01.578
And then I'll say it's equal to dataset2.
226

226

00:16:01.578  -->  00:16:04.560
Right here, and
227

227

00:16:04.560  -->  00:16:10.315
then we can get the mean of this.
228

228

00:16:10.315  -->  00:16:15.603
So dataset2_group.mean,
229

229

00:16:15.603  -->  00:16:20.887
so this is gonna find the mean of
230

230

00:16:20.887  -->  00:16:26.185
dataset2, using both keys.
231

231

00:16:27.795  -->  00:16:31.370
So, it's gonna look at
all the dataset2 values.
232

232

00:16:31.370  -->  00:16:34.210
Then group it by both keys.
233

233

00:16:34.210  -->  00:16:38.260
Anything that has X's and alphas,
X's and betas, Y's and alphas, Y's and
234

234

00:16:38.260  -->  00:16:40.410
betas, Z's and alphas.
235

235

00:16:40.410  -->  00:16:43.427
And then it's going to average up
all the objects that share that.
236

236

00:16:45.727  -->  00:16:48.730
So if we look at that,
that's the result we get.
237

237

00:16:48.730  -->  00:16:51.500
And since there's only one of each object,
238

238

00:16:51.500  -->  00:16:54.820
the average is going to be
the same as that data itself.
239

239

00:16:54.820  -->  00:16:56.730
So it's a group that averaged it.
240

240

00:16:56.730  -->  00:17:01.200
But since they only had one entry for
both keys, it's the same as the value.
241

241

00:17:01.200  -->  00:17:03.683
So we have, for instance, -0.19.
242

242

00:17:03.683  -->  00:17:05.068
-0.19 here.
243

243

00:17:05.068  -->  00:17:07.680
And this x is an alpha.
244

244

00:17:07.680  -->  00:17:08.520
X is an alpha.
245

245

00:17:12.380  -->  00:17:14.860
So that's about it as far as groupby.
246

246

00:17:14.860  -->  00:17:19.030
We'll be using this tool
slightly in the future.
247

247

00:17:19.030  -->  00:17:21.038
So go ahead and look back at the examples.
248

248

00:17:21.038  -->  00:17:26.380
The main takeaway,
is that you can either group by columns,
249

249

00:17:26.380  -->  00:17:28.440
or group by your certain keys.
250

250

00:17:28.440  -->  00:17:32.170
And you can get certain
information off your dataframe.
251

251

00:17:32.170  -->  00:17:33.872
And leave other things behind.
252

252

00:17:33.872  -->  00:17:34.701
All right, so
253

253

00:17:34.701  -->  00:17:39.412
next we're gonna have a quick lesson on
grouping with dictionaries and series.
254

254

00:17:39.412  -->  00:17:40.610
I'll see you there.
