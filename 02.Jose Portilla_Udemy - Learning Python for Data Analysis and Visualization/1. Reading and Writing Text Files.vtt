WEBVTT
1
1

00:00:01.000  -->  00:00:05.695
Hey guys, this is Lecture 25,
Reading and Writing Text Files.
2

2

00:00:05.695  -->  00:00:08.750
,So throughout this section
we're gonna be inputting and
3

3

00:00:08.750  -->  00:00:13.100
outputting different file formats for
panda's data frame.
4

4

00:00:14.490  -->  00:00:18.746
In order to do that, I've just already
imported the regular numpy as mp,
5

5

00:00:18.746  -->  00:00:23.020
pandas as pd, and then from pandas
I've imported series and data frame.
6

6

00:00:24.320  -->  00:00:29.220
So first things first, we're gonna have to
get or make a CSV file, you can either get
7

7

00:00:29.220  -->  00:00:32.320
this from the additional material or
you can make your own.
8

8

00:00:32.320  -->  00:00:37.998
So, I've opened up Notepad, or
you can open up really any text editor.
9

9

00:00:37.998  -->  00:00:41.170
I've put in just some letters or
numbers, and
10

10

00:00:41.170  -->  00:00:44.930
then at the end a word,
all separated by commas.
11

11

00:00:46.380  -->  00:00:51.620
And so, I'm gonna say, File save this as,
I'm gonna go to where my IPython notebooks
12

12

00:00:51.620  -->  00:00:56.420
are saved, and these are actually
saved in IPython notebooks.
13

13

00:00:56.420  -->  00:00:59.180
And let me just check to make
sure that they're all there.
14

14

00:00:59.180  -->  00:01:01.120
So I select all files.
15

15

00:01:01.120  -->  00:01:03.290
So yeah,
all the lectures I've been doing are here.
16

16

00:01:03.290  -->  00:01:04.650
So our Lecture 25 is here.
17

17

00:01:05.720  -->  00:01:10.369
So, I'm gonna say .txt, actually,
Im gonna say all files, and
18

18

00:01:10.369  -->  00:01:13.460
then save this as a .csv file.
19

19

00:01:13.460  -->  00:01:14.510
So let's go ahead and save that.
20

20

00:01:15.860  -->  00:01:18.130
So now I have lec25 saved as a .csv.
21

21

00:01:18.130  -->  00:01:20.470
Let's see how we can open it.
22

22

00:01:21.750  -->  00:01:25.340
So, it's in the same
location as lecture 25.
23

23

00:01:25.340  -->  00:01:29.730
So I don't need to call
a specific file location.
24

24

00:01:31.220  -->  00:01:37.515
So, all I have to do is say read_csv,
and then the name of the file,
25

25

00:01:37.515  -->  00:01:43.360
lec25.csv.
26

26

00:01:43.360  -->  00:01:46.200
And it's read it, so lets go ahead and
see what that looks like as a data frame.
27

27

00:01:47.500  -->  00:01:48.480
Nice.
28

28

00:01:48.480  -->  00:01:53.370
So if you noticed something that happened
here is, it used the comma as a delimiter.
29

29

00:01:56.060  -->  00:02:01.610
And, it also set that first row
as the index of the columns,
30

30

00:02:01.610  -->  00:02:04.240
or as the column names I should say.
31

31

00:02:04.240  -->  00:02:08.840
So, what's another way we can do that?
32

32

00:02:08.840  -->  00:02:14.250
Well, if we didn't want that
first row to be the column names.
33

33

00:02:14.250  -->  00:02:20.862
I can say dframe = pd.read_csv.
34

34

00:02:20.862  -->  00:02:26.500
Again, I put in the name of my file,
lec25.csv, and
35

35

00:02:26.500  -->  00:02:33.080
in this case,
I'm gonna say my header = None.
36

36

00:02:34.230  -->  00:02:38.190
So there is no header, so
it's gonna just index it automatically.
37

37

00:02:38.190  -->  00:02:39.150
So let's see what happens.
38

38

00:02:42.250  -->  00:02:43.490
Now let's take a look at my dframe.
39

39

00:02:45.560  -->  00:02:46.300
Nice.
So,
40

40

00:02:46.300  -->  00:02:50.770
now you can see it's inputted
the whole thing as a four by
41

41

00:02:50.770  -->  00:02:54.910
five data frame, and
it's automatically indexed the rows and
42

42

00:02:54.910  -->  00:02:59.640
columns, just numerically, so
we didn't use that first row there.
43

43

00:03:02.790  -->  00:03:08.230
A different way to import
44

44

00:03:08.230  -->  00:03:12.062
CSV files is using the read_table method,
so
45

45

00:03:12.062  -->  00:03:17.544
the read_table method is just
a more generic version of read_csv,
46

46

00:03:17.544  -->  00:03:21.180
so I can say read_table.
47

47

00:03:21.180  -->  00:03:26.760
Again, I just import that
file name as an argument,
48

48

00:03:26.760  -->  00:03:30.700
and then I have to, since it's read_table,
it doesn't know it's a CSV file,
49

49

00:03:32.340  -->  00:03:35.810
I have to indicate what the delimiter,
or what that separator is.
50

50

00:03:37.380  -->  00:03:39.570
And then we're gonna say,
header=None, and let's see if
51

51

00:03:43.560  -->  00:03:47.440
we get the same thing here, dframe.
52

52

00:03:47.440  -->  00:03:48.930
And we do, we get the same thing.
53

53

00:03:48.930  -->  00:03:52.280
We just had to indicate that
the separator was a comma.
54

54

00:03:52.280  -->  00:03:57.844
So read_table can then read anything,
no matter what its delimiter is.
55

55

00:03:57.844  -->  00:04:00.690
A delimiter's just a thing
separating every variable.
56

56

00:04:04.060  -->  00:04:05.310
Yeah, so we can also do it that way.
57

57

00:04:07.510  -->  00:04:11.830
We can also indicate a particular
number of rows to be read.
58

58

00:04:11.830  -->  00:04:14.690
So, if we have a really big file and
we don't want to read all the rows
59

59

00:04:14.690  -->  00:04:20.200
as a data frame, we can indicate
the specific number of rows.
60

60

00:04:20.200  -->  00:04:24.690
The way to do that is we can just say,
pd.read_csv.
61

61

00:04:24.690  -->  00:04:26.640
I'm not gonna save it as a data frame.
62

62

00:04:26.640  -->  00:04:32.510
I just want to show you guys,
so I'll say, lec25.csv.
63

63

00:04:32.510  -->  00:04:37.710
Again, I'll state the header=None,
64

64

00:04:37.710  -->  00:04:42.920
and then I can pass the argument nrows,
and that's the number of rows to be read.
65

65

00:04:42.920  -->  00:04:45.935
So if I only wanted to read,
let's say the first two rows,
66

66

00:04:45.935  -->  00:04:51.860
I just pass nrows equals 2, and
it'll only read the first two rows.
67

67

00:04:53.120  -->  00:04:57.240
So let's see the whole data frame again,
the original one, dframe.
68

68

00:04:58.550  -->  00:04:59.050
Cool.
69

69

00:05:01.050  -->  00:05:06.180
So, what if I had a data frame but
I wanted to export it?
70

70

00:05:06.180  -->  00:05:08.150
So an output of the file.
71

71

00:05:08.150  -->  00:05:10.570
Well, that's also really easy.
72

72

00:05:10.570  -->  00:05:16.400
I can just say dframe In this case if I
wanna do a CSV file, I just say to_csv.
73

73

00:05:16.400  -->  00:05:22.260
And then the argument I have to
pass is what I wanna call the file.
74

74

00:05:22.260  -->  00:05:29.382
So in this case,
I'll just say mytextdata_ out.csv
75

75

00:05:33.902  -->  00:05:36.560
And now it's saved as a text file.
76

76

00:05:36.560  -->  00:05:39.220
So you'll see this file where
your IPython notebooks are saved.
77

77

00:05:40.370  -->  00:05:42.110
So go ahead and check your folder.
78

78

00:05:42.110  -->  00:05:45.010
See if you actually see this file there.
79

79

00:05:46.340  -->  00:05:51.990
I'll open up my folder, see if it's there,
so I'll go to My Documents,
80

80

00:05:53.740  -->  00:05:58.748
go to my IPython Notebooks,
81

81

00:05:58.748  -->  00:06:02.900
and let's sort it by date modified.
82

82

00:06:03.930  -->  00:06:08.790
And, here it is, mytextdata _out.
83

83

00:06:08.790  -->  00:06:10.250
Cool.
84

84

00:06:10.250  -->  00:06:12.780
So we've learned how
to export it as a CSV.
85

85

00:06:14.340  -->  00:06:17.120
We can also use other delimiters.
86

86

00:06:17.120  -->  00:06:20.270
So we can separate with other
things that are not just commas.
87

87

00:06:21.360  -->  00:06:27.230
I'm gonna import right now, sys, system.
88

88

00:06:27.230  -->  00:06:32.170
I'm doing that so I can see the output
directly, and not have to save it.
89

89

00:06:32.170  -->  00:06:33.330
You'll see what I mean in a second.
90

90

00:06:34.400  -->  00:06:39.291
So let's say I said dframe.to_csv.
91

91

00:06:39.291  -->  00:06:44.280
Instead of writing
92

92

00:06:44.280  -->  00:06:48.780
a file name,
I'm just gonna write sys.stdout.
93

93

00:06:48.780  -->  00:06:52.840
That's just to show you
guys what the output is.
94

94

00:06:57.140  -->  00:06:59.780
So I'm not actually saving this file,
I'm just showing you the output.
95

95

00:07:03.310  -->  00:07:08.102
And then, back to the idea of
using a different delimiter.
96

96

00:07:08.102  -->  00:07:11.040
I'm just gonna write stdout, and
97

97

00:07:11.040  -->  00:07:15.710
I can indicate my what's
separating every variable.
98

98

00:07:16.730  -->  00:07:19.650
So let's say I wanted to use
an underscore as a separator.
99

99

00:07:21.000  -->  00:07:21.550
I can do that too.
100

100

00:07:21.550  -->  00:07:24.560
And now instead of commas,
it'll do underscores.
101

101

00:07:25.750  -->  00:07:28.670
So, if you wanted to save this
file of a different separator,
102

102

00:07:28.670  -->  00:07:30.030
you can go ahead and do that.
103

103

00:07:31.070  -->  00:07:32.120
I'll show you another example,
104

104

00:07:32.120  -->  00:07:35.435
just to make sure you understand
the concept of the delimiter.
105

105

00:07:37.780  -->  00:07:44.800
Let's just say sys.stdout, and
I'll use a different separator.
106

106

00:07:44.800  -->  00:07:47.440
In this case, one that you
probably wouldn't want to use but,
107

107

00:07:47.440  -->  00:07:50.190
?, let's see what happens.
108

108

00:07:50.190  -->  00:07:51.970
Think about what you'd expect to happen.
109

109

00:07:53.080  -->  00:07:53.970
Check if you're right.
110

110

00:07:53.970  -->  00:07:57.975
So now every variable is separated by
a question mark, so that makes sense.
111

111

00:07:59.695  -->  00:08:04.445
We can also choose to write only
a specific subset of columns
112

112

00:08:04.445  -->  00:08:06.645
to the CSV file.
113

113

00:08:06.645  -->  00:08:11.405
If I wanted to do that,
I can just say to_csv.
114

114

00:08:13.050  -->  00:08:17.520
Again, I won't name the file,
I'll just use stdout to see the output.
115

115

00:08:19.130  -->  00:08:22.800
And let's say I only wanted
the first three columns.
116

116

00:08:22.800  -->  00:08:28.330
So I'll say columns=[0,1,2].
117

117

00:08:28.330  -->  00:08:31.228
And if we scroll back up and
look at our data frame,
118

118

00:08:31.228  -->  00:08:36.127
that would be these first three columns,
0,1,2, the q, r, s, 2, 3, 4,
119

119

00:08:36.127  -->  00:08:40.280
a, s, d, 5, 2, 5 columns,
let's go ahead and see what happens.
120

120

00:08:41.890  -->  00:08:45.250
And that's what I get out on the CSV,
0,1,2.
121

121

00:08:45.250  -->  00:08:51.840
q, r, s, 1, 2, 3, 4,
with the index still there.
122

122

00:08:51.840  -->  00:08:57.280
So that 0, 1, 2, 3 is the index, in
case you ever wanted to import it again.
123

123

00:08:57.280  -->  00:09:02.450
So there's tons of built-in
CSV reader methods for Python.
124

124

00:09:02.450  -->  00:09:06.830
And I'm gonna just put
the link as a string.
125

125

00:09:06.830  -->  00:09:08.800
So you can check out this URL.
126

126

00:09:08.800  -->  00:09:13.380
It's in the IPython Notebook
that goes with this lecture.
127

127

00:09:13.380  -->  00:09:16.901
It's just a docs python for CSV, for
128

128

00:09:16.901  -->  00:09:21.515
other built-in native methods in Python.
129

129

00:09:21.515  -->  00:09:27.050
Let's go ahead and
check out the link, so there's a nice
130

130

00:09:27.050  -->  00:09:31.520
common separated value reader format and
there's a bunch of stuff you can do.
131

131

00:09:31.520  -->  00:09:36.870
This stuff is integrated directly with
Python, not Pandas, so you can also
132

132

00:09:36.870  -->  00:09:40.940
mess around with that, in case you want to
do something outside of pandas with CSV.
133

133

00:09:40.940  -->  00:09:44.570
So I'll let you check
that out on your own,
134

134

00:09:44.570  -->  00:09:47.110
we won't really be using
it throughout this course,
135

135

00:09:47.110  -->  00:09:49.740
since pandas already has a really
nice built in CSV reader.
136

136

00:09:51.280  -->  00:09:56.830
Cool, so that's about it for
text files and CSV files.
137

137

00:09:56.830  -->  00:10:00.365
Next, we're gonna learn about reading and
writing JSON data.
138

138

00:10:00.365  -->  00:10:02.100
All right, I'll see you there.
