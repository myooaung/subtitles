WEBVTT
1
1

00:00:01.120  -->  00:00:07.900
Hey guys, welcome to lecture 23 and
this will be on missing data.
2

2

00:00:07.900  -->  00:00:12.450
So we've seen a lot of examples of
how Pandas deals with null values and
3

3

00:00:12.450  -->  00:00:15.640
missing values, so we're just gonna go and
dive a little deeper into that.
4

4

00:00:17.010  -->  00:00:23.470
So as always just copy and paste or
type out the usual imports numpy
5

5

00:00:24.930  -->  00:00:30.860
from pandas import Series,DataFrame and
6

6

00:00:30.860  -->  00:00:33.609
import pandas as pd.
7

7

00:00:33.609  -->  00:00:36.760
Right.
8

8

00:00:36.760  -->  00:00:38.520
So we're going to learn how
to deal with missing data.
9

9

00:00:39.580  -->  00:00:42.270
It's gonna be a really common task
when you're analyzing datasets.
10

10

00:00:42.270  -->  00:00:45.240
So let's go ahead and make a series.
11

11

00:00:45.240  -->  00:00:46.200
We'll just call it data.
12

12

00:00:48.420  -->  00:00:50.800
And we'll pass a list in it.
13

13

00:00:52.730  -->  00:00:56.030
We'll just say one, two,
14

14

00:00:56.030  -->  00:01:02.030
sorry, a missing value.
15

15

00:01:05.165  -->  00:01:05.856
And then four.
16

16

00:01:09.013  -->  00:01:10.585
Let's go ahead and
see what that looks like.
17

17

00:01:11.875  -->  00:01:13.425
Right.
So we have our series one,
18

18

00:01:13.425  -->  00:01:16.095
two null value, four.
19

19

00:01:16.095  -->  00:01:18.605
So how do we find these missing values?
20

20

00:01:18.605  -->  00:01:22.175
So Pandas makes it pretty easy.
21

21

00:01:22.175  -->  00:01:24.105
You can just pass the method is null.
22

22

00:01:26.680  -->  00:01:31.890
And it will tell you true
if there is a null there.
23

23

00:01:31.890  -->  00:01:35.310
So in our data index two
we have a null value.
24

24

00:01:35.310  -->  00:01:40.570
If we pass the method is null it'll
find it and relate it back to us true.
25

25

00:01:40.570  -->  00:01:46.270
We can also just simply drop and
remove all null values.
26

26

00:01:46.270  -->  00:01:50.780
And if we wanna do that,
we can just say dropna and
27

27

00:01:50.780  -->  00:01:54.100
pass that method on our data set.
28

28

00:01:55.880  -->  00:02:00.120
And so anything that had a null value
is now gone and it's been dropped.
29

29

00:02:00.120  -->  00:02:04.440
So that's how it works in series.
30

30

00:02:04.440  -->  00:02:06.510
Let's see how it works in and
a data frame.
31

31

00:02:07.840  -->  00:02:10.380
So let's make the D frame object.
32

32

00:02:12.920  -->  00:02:14.010
We'll call it data frame.
33

33

00:02:17.070  -->  00:02:18.038
And let's go ahead.
34

34

00:02:18.038  -->  00:02:19.488
Pet and.
35

35

00:02:20.821  -->  00:02:22.940
We'll make the first row
of this data frame 1, 2, 3.
36

36

00:02:22.940  -->  00:02:30.060
We'll make the second row
start off with a null value.
37

37

00:02:31.350  -->  00:02:31.850
Five, six.
38

38

00:02:31.850  -->  00:02:37.290
We'll make the next one,
39

39

00:02:39.880  -->  00:02:45.070
seven no value nine and
40

40

00:02:45.070  -->  00:02:51.706
then the last row,
I'm just gonna make this all null values.
41

41

00:02:51.706  -->  00:02:54.790
All right.
42

42

00:02:54.790  -->  00:02:57.280
And then let's go ahead and
see that data frame.
43

43

00:03:00.110  -->  00:03:00.640
Cool.
So
44

44

00:03:00.640  -->  00:03:03.800
now we have a data frame to four by three.
45

45

00:03:03.800  -->  00:03:08.510
And there's several null values there,
and now lets go ahead and
46

46

00:03:08.510  -->  00:03:14.170
make another data frame called
clean dframe clean_dframe,
47

47

00:03:14.170  -->  00:03:17.720
and see what happens,
we'll set that equal to drop na.
48

48

00:03:17.720  -->  00:03:23.710
So, what's going to happen is, if we
drop every null value from a data frame.
49

49

00:03:26.120  -->  00:03:28.550
Let's go ahead and see that result.
50

50

00:03:28.550  -->  00:03:33.130
So you end up only getting a 1, 2, 3.
51

51

00:03:33.130  -->  00:03:35.570
That first row at index 0.
52

52

00:03:35.570  -->  00:03:40.330
What pandas does if you just
drop NA with no additional
53

53

00:03:40.330  -->  00:03:44.910
arguments from a data frame, any row
that has any null, even if it's just 1,
54

54

00:03:44.910  -->  00:03:48.500
is gonna be dropped from
that data frame completely.
55

55

00:03:49.840  -->  00:03:54.481
So, we can also specify to only drop rows
that are completely missing all data.
56

56

00:03:59.100  -->  00:04:05.713
The way we can do that is dropna,
and we can specify the method how.
57

57

00:04:12.677  -->  00:04:17.675
And if we specify how all,
then that's gonna drop
58

58

00:04:17.675  -->  00:04:21.610
rows where all the data was null value.
59

59

00:04:21.610  -->  00:04:26.204
So you can see here now only the third row
was dropped since that was the only row
60

60

00:04:26.204  -->  00:04:27.769
that had all null values.
61

61

00:04:31.693  -->  00:04:35.814
We can also specify to drop
columns instead of rows, and
62

62

00:04:35.814  -->  00:04:39.420
the way to do that is by
just specifying the axis.
63

63

00:04:40.790  -->  00:04:47.020
So I'll say axis=1, and
we'd expect this to drop all of them.
64

64

00:04:47.020  -->  00:04:47.660
Why is that?
65

65

00:04:47.660  -->  00:04:51.530
Because if we look at our original data
frame, every single column had a null
66

66

00:04:51.530  -->  00:04:58.900
value in it, so every single column got
dropped if we just specified axis=1.
67

67

00:04:58.900  -->  00:05:00.290
With no additional arguments.
68

68

00:05:02.590  -->  00:05:03.410
Cool.
69

69

00:05:03.410  -->  00:05:06.110
So, we can threshold
the missing data as well.
70

70

00:05:07.130  -->  00:05:10.830
For example, if you only want rows
with at least three datapoints,
71

71

00:05:12.300  -->  00:05:15.240
to show you how that works,
let's go ahead and make another dataframe.
72

72

00:05:16.600  -->  00:05:18.079
We'll call it dframe2.
73

73

00:05:24.776  -->  00:05:29.450
And I'm just going to make this a,
I'll make it a four by four.
74

74

00:05:30.780  -->  00:05:33.230
And to make this go a little faster,
75

75

00:05:33.230  -->  00:05:38.680
what I'm gonna do before I
start this data frame is,
76

76

00:05:38.680  -->  00:05:43.654
I'm going to set npn = np.null,
77

77

00:05:43.654  -->  00:05:48.421
excuse me, np.nan.
78

78

00:05:48.421  -->  00:05:50.760
That way, I can just write npn.
79

79

00:05:52.060  -->  00:05:55.580
So let's start off with our first row.
80

80

00:05:55.580  -->  00:05:57.240
I'm going to say 1, 2, 3.
81

81

00:05:57.240  -->  00:06:00.260
And then last value npn.
82

82

00:06:00.260  -->  00:06:07.600
Second row, we'll do 2, npn, 5, 6.
83

83

00:06:07.600  -->  00:06:13.270
Next row the list we'll put in is npn 7,
npn 9 and
84

84

00:06:13.270  -->  00:06:18.420
then the last one will just be one with
85

85

00:06:19.510  -->  00:06:25.330
the remaining three values be npn, so
that should give us a four by four.
86

86

00:06:27.700  -->  00:06:29.430
And then let's go ahead and
see what that looks like.
87

87

00:06:31.190  -->  00:06:34.169
Cool, so now we've created our data
frame with a bunch of null values.
88

88

00:06:36.030  -->  00:06:40.090
So if you want a threshold by
number of actual data points,
89

89

00:06:40.090  -->  00:06:42.430
points that don't have a null,
you can do that.
90

90

00:06:43.940  -->  00:06:48.950
So you can say dropna, and
then pass the thresh argument.
91

91

00:06:48.950  -->  00:06:52.660
So, that's thresh, and
92

92

00:06:52.660  -->  00:06:56.800
let's say I only want rows that
have at least two data points.
93

93

00:06:56.800  -->  00:07:00.188
So I can pass the threshold two and
let's see what that comes up with.
94

94

00:07:00.188  -->  00:07:06.070
So now since the last row,
95

95

00:07:06.070  -->  00:07:11.430
one null null null, didn't have a minimum
of two data points it was dropped.
96

96

00:07:11.430  -->  00:07:15.860
The other rows, even though they have null
values have at least two value points.
97

97

00:07:17.010  -->  00:07:18.900
So they weren't dropped
when I put the threshold.
98

98

00:07:18.900  -->  00:07:23.810
Let's go ahead and
just make sure that we understand it, so
99

99

00:07:23.810  -->  00:07:29.490
I'm gonna drop NA with
a threshold of three.
100

100

00:07:29.490  -->  00:07:34.390
So just think about for a second which
rows you think are gonna be dropped.
101

101

00:07:34.390  -->  00:07:38.687
Remember threshold is gonna drop any
row without at least three data points.
102

102

00:07:41.183  -->  00:07:44.464
Cool, so the first two rows index 0 and 1,
103

103

00:07:44.464  -->  00:07:48.210
have at least 3 data points,
so they got to stay.
104

104

00:07:50.720  -->  00:07:54.760
Let's take a look at dframe 2 again,
the original.
105

105

00:07:55.830  -->  00:07:58.260
All right, so let's say you wanted to fill
106

106

00:08:00.290  -->  00:08:03.980
where you had null values
instead of just dropping them.
107

107

00:08:03.980  -->  00:08:07.640
You can do that with the fillna method.
108

108

00:08:07.640  -->  00:08:12.787
So if I wanted to fill all
the null values if one,
109

109

00:08:12.787  -->  00:08:17.293
I can pass the argument
one into fillna and
110

110

00:08:17.293  -->  00:08:22.185
now any values that had null,
for instance,
111

111

00:08:22.185  -->  00:08:26.590
this last row now have a one value there.
112

112

00:08:26.590  -->  00:08:30.460
Great.
113

113

00:08:30.460  -->  00:08:31.250
Let's go ahead and
114

114

00:08:31.250  -->  00:08:34.920
sorry I called the original D frame let's
check it on D frame two, there we go.
115

115

00:08:34.920  -->  00:08:36.550
Now that makes sense,
we have our four by four.
116

116

00:08:39.230  -->  00:08:39.730
Awesome.
117

117

00:08:41.300  -->  00:08:43.440
So, what else can we do.
118

118

00:08:43.440  -->  00:08:46.300
We can also fill in different values for
different columns.
119

119

00:08:47.460  -->  00:08:54.740
So, to show you how that works
we'll call it on our deframe two.
120

120

00:08:54.740  -->  00:08:56.260
Let's just see what that looks like.
121

121

00:08:56.260  -->  00:08:58.280
The original still has
all our null values.
122

122

00:08:59.430  -->  00:09:05.094
Remember since we're not setting
anything equal to these method calls,
123

123

00:09:05.094  -->  00:09:09.662
since I'm not saying dframe2
equals dframe2.fillna,
124

124

00:09:09.662  -->  00:09:14.243
we're not making actual
permanent changes to the dframe.
125

125

00:09:14.243  -->  00:09:22.360
So I can always call it and still have
those null values, so dframe2.fillna.
126

126

00:09:22.360  -->  00:09:24.059
If I want to fill in different values for
127

127

00:09:24.059  -->  00:09:26.590
different columns what I can
do is I can pass a dictionary.
128

128

00:09:28.320  -->  00:09:35.180
So, let's say the zero column,
I want any null values filled with zero.
129

129

00:09:36.500  -->  00:09:40.950
The one column,
I want any values filled with one.
130

130

00:09:40.950  -->  00:09:42.670
Null values that is.
131

131

00:09:42.670  -->  00:09:47.190
And then, we can do the same thing for
the other two columns.
132

132

00:09:49.960  -->  00:09:52.930
And take a minute, think about what this
is gonna look like before we see it.
133

133

00:09:52.930  -->  00:09:56.080
Let's see if we got it.
134

134

00:09:56.080  -->  00:09:56.790
All right, cool.
135

135

00:09:56.790  -->  00:09:59.860
Now anywhere there was a null
value in a particular column
136

136

00:09:59.860  -->  00:10:02.300
we replaced it with
the number of that column.
137

137

00:10:02.300  -->  00:10:07.060
If we look at column two, for instance,
the last two now have a value of two.
138

138

00:10:08.390  -->  00:10:08.890
Excellent.
139

139

00:10:10.110  -->  00:10:15.467
If we wanna modify the existing object,
there's two ways we can do that.
140

140

00:10:15.467  -->  00:10:20.461
We can either say
141

141

00:10:20.461  -->  00:10:24.029
dframe2 =
142

142

00:10:24.029  -->  00:10:32.245
dframe2.fillna, etc.
143

143

00:10:32.245  -->  00:10:35.760
That's a method of affecting
the dataframe permanently,
144

144

00:10:35.760  -->  00:10:40.410
but if you wanna modify it in place, and
not have to type in equals, like that.
145

145

00:10:41.615  -->  00:10:43.760
We can pass the argument in place.
146

146

00:10:43.760  -->  00:10:49.750
So, fillna, that would fill all
those null values with a zero.
147

147

00:10:51.780  -->  00:10:56.080
Notice that I called dframe two again,
those values go back to null.
148

148

00:10:57.780  -->  00:10:59.300
If I want to make the change permanent.
149

149

00:11:01.260  -->  00:11:07.960
Then I can say fillna 0, and
I'm gonna pass the argument inplace.
150

150

00:11:07.960  -->  00:11:11.690
If I set it as true, that means it's
gonna modify the existing object.
151

151

00:11:11.690  -->  00:11:16.990
So let's go ahead and
take a look at dframe 2 now, and
152

152

00:11:16.990  -->  00:11:21.230
you'll notice, just calling the dframe 2,
I no longer get null values.
153

153

00:11:21.230  -->  00:11:26.080
It's been permanently changed to have
zeros instead of that null value.
154

154

00:11:27.362  -->  00:11:31.160
All right, so now that we've learned
how to deal with missing data,
155

155

00:11:32.320  -->  00:11:36.020
next we'll learn about index hierarchy.
156

156

00:11:36.020  -->  00:11:36.560
I'll see you there.
