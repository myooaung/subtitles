1
1

00:00:00,870  -->  00:00:01,460
Hey, guys.
2

2

00:00:01,460  -->  00:00:03,170
Welcome to lecture 7.
3

3

00:00:03,170  -->  00:00:07,070
In this lecture,
we'll be learning how to create arrays.
4

4

00:00:07,070  -->  00:00:09,650
I'm going to call it Creating Arrays.
5

5

00:00:11,550  -->  00:00:16,591
A big part of data analysis,
as far as this course goes,
6

6

00:00:16,591  -->  00:00:19,850
will be array based and matrix based.
7

7

00:00:19,850  -->  00:00:20,734
So in order to do that,
8

8

00:00:20,734  -->  00:00:23,160
we're going to learn how to use
numpy to create these arrays.
9

9

00:00:23,160  -->  00:00:28,060
So the first thing we're gonna
do is import numpy as np.
10

10

00:00:28,060  -->  00:00:32,130
This will save us from having
to type numpy every single time.
11

11

00:00:32,130  -->  00:00:33,465
We can just write np instead.
12

12

00:00:33,465  -->  00:00:38,760
One way to make an array is
by converting from a list.
13

13

00:00:38,760  -->  00:00:43,487
So I will say make an object
called my_list1 and
14

14

00:00:43,487  -->  00:00:47,653
let's make a list of 1, 2, 3, and 4.
15

15

00:00:49,553  -->  00:00:53,780
Okay, so now that we have our
list we can make an array.
16

16

00:00:53,780  -->  00:00:55,500
So I will make an array called my_array1.
17

17

00:00:55,500  -->  00:00:59,495
And the way we can make
an array is by using
18

18

00:00:59,495  -->  00:01:05,710
np.array, and
then we can pass that list as an object.
19

19

00:01:05,710  -->  00:01:08,912
So we can my_list1.
20

20

00:01:08,912  -->  00:01:12,830
And let's go ahead and
see what that ended up being.
21

21

00:01:15,220  -->  00:01:18,880
Great, so now we have an array
that we made from the list.
22

22

00:01:18,880  -->  00:01:20,970
So that's one of the ways
we can make the array.
23

23

00:01:22,250  -->  00:01:24,810
So let's go ahead and make another list.
24

24

00:01:24,810  -->  00:01:26,423
We'll call it my_list2.
25

25

00:01:31,203  -->  00:01:38,623
And in this case,
we'll just have it be 11, 22, 33 and 44.
26

26

00:01:38,623  -->  00:01:43,423
And now we're gonna make a list
combining those two lists we just made.
27

27

00:01:43,423  -->  00:01:48,479
I will call it my_lists = my_list1,
28

28

00:01:48,479  -->  00:01:52,792
as the first object in that list and
29

29

00:01:52,792  -->  00:02:01,289
then I'm going to say my_list2 as
the second object in that list.
30

30

00:02:01,289  -->  00:02:05,410
And it looks like I forgot the underscore,
let me add that.
31

31

00:02:05,410  -->  00:02:07,430
And there we go, okay.
32

32

00:02:07,430  -->  00:02:11,430
So now we have a list of
the two lists we made.
33

33

00:02:11,430  -->  00:02:15,510
We can make a multi-dimensional array or
a matrix using this.
34

34

00:02:15,510  -->  00:02:21,090
So I can say my_array2 = np.array, and
35

35

00:02:21,090  -->  00:02:27,030
I'm gonna pass that
list of multiple lists.
36

36

00:02:27,030  -->  00:02:30,110
So I can say my_lists.
37

37

00:02:30,110  -->  00:02:30,620
There we go.
38

38

00:02:30,620  -->  00:02:33,620
And let's go ahead and
39

39

00:02:33,620  -->  00:02:38,000
see what that multidimensional array
look like, otherwise known as a matrix.
40

40

00:02:39,420  -->  00:02:40,620
Great.
41

41

00:02:40,620  -->  00:02:43,152
So you can see now we have
both lists in the array.
42

42

00:02:43,152  -->  00:02:47,452
It's 1, 2, 3, 4, 11, 22, 33, 44.
43

43

00:02:47,452  -->  00:02:50,130
And let's go ahead and
see what the shape of that array is.
44

44

00:02:52,330  -->  00:02:56,130
So since it's multidimensional, I can ask
45

45

00:02:57,250  -->  00:03:03,310
numpy what shape it is
by saying .shape method.
46

46

00:03:03,310  -->  00:03:06,293
And so it looks like it's a two by four,
which makes sense.
47

47

00:03:06,293  -->  00:03:13,190
So that means every list you passed in
that list of lists created a new row.
48

48

00:03:13,190  -->  00:03:15,950
So here was your first row and
then here is your second row.
49

49

00:03:15,950  -->  00:03:18,330
All right, great.
50

50

00:03:18,330  -->  00:03:23,620
So now we know how to make an array and
a multidimensional array from a list.
51

51

00:03:25,510  -->  00:03:30,870
So we can also find out
the data type of the array, and
52

52

00:03:30,870  -->  00:03:34,250
I can do that in the same way
I asked what the shape was.
53

53

00:03:34,250  -->  00:03:38,070
I can ask for
the dtype by passing the dtype method and
54

54

00:03:38,070  -->  00:03:42,640
it will tell me type of objects
that are in that array.
55

55

00:03:44,200  -->  00:03:48,100
There is also special case arrays,
so for instance,
56

56

00:03:48,100  -->  00:03:52,692
if you wanted an array of all zeros,
you could say np.zeros and
57

57

00:03:52,692  -->  00:03:56,990
then just indicate the shape
of the array you wanted.
58

58

00:03:56,990  -->  00:04:02,770
So if I wanted an array, just a one by
five of zeros, so just a straight vector.
59

59

00:04:04,930  -->  00:04:07,540
And there I have it, my five zeros.
60

60

00:04:07,540  -->  00:04:11,973
And if you notice,
there's a decimal point there, and
61

61

00:04:11,973  -->  00:04:15,472
that's because they're a floating type.
62

62

00:04:15,472  -->  00:04:22,169
So to show you what I mean by that,
I can say my_zeros_array = np.zeros[5].
63

63

00:04:22,169  -->  00:04:27,734
And then I can check the type,
so I can say my_zeroes_array,
64

64

00:04:27,734  -->  00:04:31,409
and we just learned how to check the type,
65

65

00:04:31,409  -->  00:04:36,032
so let's go ahead and
make sure they're floating.
66

66

00:04:36,032  -->  00:04:37,210
And they are.
67

67

00:04:37,210  -->  00:04:45,430
So they're floating numbers, which means
they have that decimal point there.
68

68

00:04:45,430  -->  00:04:45,930
Excellent.
69

69

00:04:47,330  -->  00:04:52,285
Another special case array is an array of
ones, and I can do that by saying np.ones.
70

70

00:04:54,520  -->  00:04:59,590
And I can pass the shape here too, so
I can say, for instance, a five by five.
71

71

00:04:59,590  -->  00:05:03,280
So I'll make a matrix of ones.
72

72

00:05:03,280  -->  00:05:06,680
And there you have it,
a five by five multidimensional array.
73

73

00:05:07,910  -->  00:05:09,380
I can also create an empty array.
74

74

00:05:10,420  -->  00:05:13,338
I can do that just by saying np.empty.
75

75

00:05:17,399  -->  00:05:20,740
And that'll be the same thing
as just asking for zeros there.
76

76

00:05:22,470  -->  00:05:23,180
Okay.
77

77

00:05:23,180  -->  00:05:28,700
And then last but not least, we can make
an identity matrix, or identity array.
78

78

00:05:28,700  -->  00:05:35,535
And it's almost always gonna be
a full matrix, multidimensional.
79

79

00:05:35,535  -->  00:05:41,425
And you can make the identity
matrix by using eye, E-Y-E.
80

80

00:05:41,425  -->  00:05:47,705
And since it's a matrix,
you'll have to input just a square matrix,
81

81

00:05:47,705  -->  00:05:51,140
so it's gonna be a five by five in this
case if I input just the number 5.
82

82

00:05:51,140  -->  00:05:52,700
So I can say Alt+Enter.
83

83

00:05:52,700  -->  00:05:57,573
And then here's my identity matrix,
which is just a diagonal of a 1 and
84

84

00:05:57,573  -->  00:06:00,430
then everything else filled in with 0s.
85

85

00:06:02,151  -->  00:06:06,662
And then one way we can
make an array that we'll be
86

86

00:06:06,662  -->  00:06:10,880
using a ton in this
course is by np.arrange.
87

87

00:06:10,880  -->  00:06:17,100
And what that does is you can input
a start and a stop and a step size,
88

88

00:06:17,100  -->  00:06:21,850
and it's going to return evenly spaced
values within that given interval.
89

89

00:06:21,850  -->  00:06:28,060
I can say just 5, and in this case
it's going to output 0, 1, 2, 3, 4.
90

90

00:06:30,350  -->  00:06:36,410
Excellent, and to get more specific, I
could say something like start at 5, stop
91

91

00:06:38,590  -->  00:06:43,060
at 50, and do it in steps of 2.
92

92

00:06:43,060  -->  00:06:45,180
Let's see if it can make evenly spaced.
93

93

00:06:46,340  -->  00:06:47,400
There we go.
94

94

00:06:47,400  -->  00:06:53,040
So, 5, 7, 9, etc., etc.,
all the way in spaces of 2.
95

95

00:06:53,040  -->  00:06:56,640
So we'll be using this arrange
method a lot throughout the course.
96

96

00:06:56,640  -->  00:06:58,570
Okay, so that's how you can create arrays.
97

97

00:06:58,570  -->  00:07:04,490
Just to do a quick overview, you can pass
a list using np.array and input the list.
98

98

00:07:04,490  -->  00:07:09,840
You can check the shape and the type of
objects for those matrices or arrays.
99

99

00:07:09,840  -->  00:07:14,564
And then your special case
arrays you can say zeros, ones,
100

100

00:07:14,564  -->  00:07:21,920
empty, eye, and then you can also
create an array by also using arrange.
101

101

00:07:21,920  -->  00:07:24,990
All right, that's it for creating arrays.
102

102

00:07:24,990  -->  00:07:26,040
I'll see you in the next lecture.
