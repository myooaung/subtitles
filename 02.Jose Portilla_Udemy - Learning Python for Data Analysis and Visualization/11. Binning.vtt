WEBVTT
1
1

00:00:00.210  -->  00:00:02.630
Hey guys.
Welcome to lecture 39.
2

2

00:00:02.630  -->  00:00:06.390
And in this lecture,
we'll learn about binning.
3

3

00:00:08.740  -->  00:00:11.028
As always, we'll import the usual.
4

4

00:00:14.377  -->  00:00:22.710
Pandas as pd and, from pandas
we'll import series and DataFrame.
5

5

00:00:23.990  -->  00:00:25.860
Okay, so
we'll learn about binning right now.
6

6

00:00:25.860  -->  00:00:28.680
To start off with,
let's go ahead and make a list.
7

7

00:00:28.680  -->  00:00:32.110
We'll just call it years and
I'm gonna just go 1990.
8

8

00:00:32.110  -->  00:00:34.960
Let's see, 1990, 1991, 1992.
9

9

00:00:34.960  -->  00:00:41.580
Let's skip ahead to 2008, 2012, 2015, and
10

10

00:00:43.030  -->  00:00:49.915
then we'll go back so it's not in order.
11

11

00:00:49.915  -->  00:00:56.538
1987, 1969, 2013, 2008, and 1999.
12

12

00:00:56.538  -->  00:01:01.444
All right, so
now I have the random list of years, and
13

13

00:01:01.444  -->  00:01:06.692
then I'm gonna make another
list called decade_bins.
14

14

00:01:06.692  -->  00:01:10.100
So I'm gonna be using this list to
separate these years by decade.
15

15

00:01:10.100  -->  00:01:15.803
And so for this list, it's gonna be pretty
simple, it's just gonna be 1960, 1970,
16

16

00:01:15.803  -->  00:01:21.750
use all of the decades, 1980, 1990,
2000, 2010, and then 2020 whoops.
17

17

00:01:21.750  -->  00:01:23.510
2020.
18

18

00:01:23.510  -->  00:01:28.282
Okay, and I forgot to put
brackets to make it into a list.
19

19

00:01:28.282  -->  00:01:29.330
So let me do that real quick.
20

20

00:01:30.440  -->  00:01:31.370
All right.
21

21

00:01:31.370  -->  00:01:34.320
Alt enter, perfect.
22

22

00:01:34.320  -->  00:01:39.750
So, now we'll use cut to design something
that's called a category object.
23

23

00:01:39.750  -->  00:01:43.800
So pandas has these category objects
that's gonna help us do this binning.
24

24

00:01:44.850  -->  00:01:50.640
So I'm going to make an object
called decade_cat for
25

25

00:01:50.640  -->  00:01:55.490
category, and
then I'm gonna call the cut method.
26

26

00:01:55.490  -->  00:01:59.980
So I'll say pd.cut, and for
27

27

00:01:59.980  -->  00:02:05.120
this method, I'm gonna pass in an X and
then my bins.
28

28

00:02:05.120  -->  00:02:11.620
So what that X is, is the object that I
wanna cut into a certain amount of bins.
29

29

00:02:11.620  -->  00:02:19.840
So, I want to cut my years
into different decade bins.
30

30

00:02:22.390  -->  00:02:22.890
All right.
31

31

00:02:24.240  -->  00:02:27.717
So now let's go ahead and
see what this decade_cat,
32

32

00:02:27.717  -->  00:02:30.430
this decade category object looks like.
33

33

00:02:32.740  -->  00:02:35.358
So if you notice here,
it counts off how many categories we have.
34

34

00:02:35.358  -->  00:02:40.030
So we have six, 1960,
1970, then to 1970 to 1980,
35

35

00:02:40.030  -->  00:02:43.294
1980 to 1990, 90 to 2000, etc.
36

36

00:02:43.294  -->  00:02:47.781
And it's been able to cut
my years into certain bins,
37

37

00:02:47.781  -->  00:02:52.380
depending on whether or
not that year is in the decade.
38

38

00:02:54.830  -->  00:03:00.097
So I can check my categories
using decade_cat,
39

39

00:03:00.097  -->  00:03:07.300
the category's name, and
I can call the method categories on it.
40

40

00:03:07.300  -->  00:03:11.410
That's gonna tell me the index of
the categories, so basically each decade.
41

41

00:03:11.410  -->  00:03:18.924
60 to 70, that's a decade, 70 to 80,
that's a decade, 80 to 90, etc.
42

42

00:03:18.924  -->  00:03:19.889
All right.
43

43

00:03:19.889  -->  00:03:25.200
So now the important part, I wanna check
the value counts in each category.
44

44

00:03:25.200  -->  00:03:30.352
So I can say,
pd.value_count which we've seen before,
45

45

00:03:30.352  -->  00:03:35.360
and i'm gonna pass that
category object into it.
46

46

00:03:35.360  -->  00:03:40.690
So this is gonna count how many
years I have in each category, or
47

47

00:03:40.690  -->  00:03:44.120
how many objects I have in each
category in a general case.
48

48

00:03:44.120  -->  00:03:47.010
So in this case,
I have three years between 2010 and 2020.
49

49

00:03:47.010  -->  00:03:50.210
I have one year between 1960 and 1970.
50

50

00:03:50.210  -->  00:03:54.720
And then, there were zero
years between 1970 and 1980.
51

51

00:03:54.720  -->  00:03:58.600
We can also pass data values to the cut.
52

52

00:03:59.770  -->  00:04:04.654
So for instance, if I just wanted to make
two bins evenly spaced based on the max
53

53

00:04:04.654  -->  00:04:06.431
and min year, I can do that.
54

54

00:04:06.431  -->  00:04:11.160
So, to show you an example,
I can say pd.cut.
55

55

00:04:11.160  -->  00:04:14.900
I just wanna say, go ahead and
56

56

00:04:14.900  -->  00:04:19.980
cut up that year's list, and
then just cut it up into two bins.
57

57

00:04:21.160  -->  00:04:25.110
And I'll state my precision to be
within plus or minus one year.
58

58

00:04:25.110  -->  00:04:28.420
So let's go ahead and see what happens.
59

59

00:04:30.240  -->  00:04:35.560
So now my years, there's only two bins,
they've been evenly cut.
60

60

00:04:35.560  -->  00:04:38.990
So now the bins are between 1969 and
61

61

00:04:38.990  -->  00:04:43.370
1992 or between 1992 all the way to 2015.
62

62

00:04:43.370  -->  00:04:48.360
So all those years have been
separated into two bins, so
63

63

00:04:48.360  -->  00:04:54.380
it's everything in the first bin
which is a time era of 69 to 92.
64

64

00:04:54.380  -->  00:04:59.410
And then, it cut up the years into
a second bin from 1992 to 2015.
65

65

00:04:59.410  -->  00:05:03.570
So that's about it for binning basics.
66

66

00:05:03.570  -->  00:05:08.190
Just a quick note,
as far as the values of the bin itself.
67

67

00:05:09.340  -->  00:05:11.790
The notation of, for instance right here,
68

68

00:05:11.790  -->  00:05:15.020
I'm highlighting a parenthesis
versus a bracket.
69

69

00:05:16.080  -->  00:05:20.210
So that notation is the exact
same thing as in math notation.
70

70

00:05:20.210  -->  00:05:24.960
A parenthesis means open while using
the square brackets means it's closed, so
71

71

00:05:24.960  -->  00:05:27.130
it in includes that number.
72

72

00:05:27.130  -->  00:05:31.710
So for instance, this 2015 bracket,
that means it's including 2015,
73

73

00:05:31.710  -->  00:05:35.770
and the parentheses means it's just open.
74

74

00:05:37.060  -->  00:05:40.610
So next up, we'll learn about outliers and
scribing data.
75

75

00:05:40.610  -->  00:05:42.855
Just an overview on binning,
what we learned.
76

76

00:05:42.855  -->  00:05:49.330
You can use cut to bin an object
either by declaring your bin list or
77

77

00:05:49.330  -->  00:05:54.300
by just saying how many
bins you wanna cut it into.
78

78

00:05:55.310  -->  00:05:58.310
And then,
that creates a category object and
79

79

00:05:58.310  -->  00:06:02.700
you can call categories, and
take value counts on that category.
80

80

00:06:03.790  -->  00:06:06.860
And that's it for binning, just
separating your data into different bins.
81

81

00:06:06.860  -->  00:06:10.730
They'll be useful for histograms in
the future and that sort of thing.
82

82

00:06:10.730  -->  00:06:14.450
And I'll see you at the next lecture for
outliers and scribing data.
83

83

00:06:14.450  -->  00:06:15.360
Okay.
I'll see you there.
