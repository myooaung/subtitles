1
1

00:00:00,990  -->  00:00:03,490
Hey everyone.
Welcome to Python Overview Part 2.
2

2

00:00:03,490  -->  00:00:07,420
If you saw the last
3

3

00:00:09,100  -->  00:00:13,950
lecture, we went lists,
ranges and other things.
4

4

00:00:13,950  -->  00:00:19,630
Again these Python overview videos
is just a rapid tutorial and
5

5

00:00:19,630  -->  00:00:23,090
basically a crash course in
the Python programming language.
6

6

00:00:23,090  -->  00:00:25,020
If this is your first
programming language or
7

7

00:00:25,020  -->  00:00:28,180
if you don't have let's say
an engineering, science or
8

8

00:00:28,180  -->  00:00:32,440
math background, I highly suggest
you check out the other resources.
9

9

00:00:32,440  -->  00:00:37,100
They'll go through Python
programming at a slower pace and
10

10

00:00:37,100  -->  00:00:42,330
you'll really be able to learn
the nitty gritty details of Python to
11

11

00:00:42,330  -->  00:00:47,710
the level that you need to to finish
the rest of the data analysis course.
12

12

00:00:47,710  -->  00:00:50,520
In the overviews,
I'm just giving you a quick crash course.
13

13

00:00:52,180  -->  00:00:53,880
So let's go ahead and
continue where we left off.
14

14

00:00:55,170  -->  00:00:57,510
So in this Python Overview Part 2,
15

15

00:00:57,510  -->  00:01:01,930
I'm gonna be going over iteration,
indentation and blocks.
16

16

00:01:01,930  -->  00:01:04,420
So, one of the most useful
things we can do with
17

17

00:01:04,420  -->  00:01:07,490
lists that we went over last
time is iterate through them.
18

18

00:01:07,490  -->  00:01:10,470
What that means is that we can just go
through each element one at a time.
19

19

00:01:11,750  -->  00:01:14,570
So, to show you an example of this,
let's go ahead and make a list.
20

20

00:01:14,570  -->  00:01:16,380
So, last time we made a cities list.
21

21

00:01:16,380  -->  00:01:17,709
Let's go ahead and remake that list.
22

22

00:01:19,690  -->  00:01:24,760
I'll say my cities are NY, LA, and SF.
23

23

00:01:24,760  -->  00:01:28,440
So I make that list with brackets.
24

24

00:01:29,970  -->  00:01:34,330
And let's say I wanted to print
every city in my cities list.
25

25

00:01:34,330  -->  00:01:37,830
So to do that, I can use a for
statement or a for loop.
26

26

00:01:37,830  -->  00:01:45,320
So I can say for
city in cities colon Enter.
27

27

00:01:45,320  -->  00:01:48,220
Notice how it indented for
me automatically.
28

28

00:01:48,220  -->  00:01:50,880
The indent and
that white space is important in Python.
29

29

00:01:50,880  -->  00:01:52,970
The code won't run unless
you have the right spacing.
30

30

00:01:52,970  -->  00:01:58,420
And then I say for city in cities
let's go ahead and print city.
31

31

00:01:58,420  -->  00:02:03,130
So we should expect it to print NY LA SF.
32

32

00:02:03,130  -->  00:02:03,800
Shift+Enter.
33

33

00:02:03,800  -->  00:02:05,180
And there we have it.
34

34

00:02:06,220  -->  00:02:10,180
You may be wondering why I chose city or
35

35

00:02:10,180  -->  00:02:16,030
how Python knew city for each element
in cities, so you can actually just,
36

36

00:02:16,030  -->  00:02:19,758
this is basically creating a variable,
so you can call this whatever you want.
37

37

00:02:19,758  -->  00:02:26,709
I can call it qwe, so for
qwe in cities, print qwe, Q-W-E,
38

38

00:02:26,709  -->  00:02:32,760
shift enter, and
it outputs the same thing.
39

39

00:02:32,760  -->  00:02:34,550
So you can just choose
variables in the for
40

40

00:02:34,550  -->  00:02:37,920
loops, the names that make sense to you.
41

41

00:02:37,920  -->  00:02:40,250
So for city in cities print city.
42

42

00:02:40,250  -->  00:02:40,900
That makes sense.
43

43

00:02:40,900  -->  00:02:41,760
So let's go ahead and do that.
44

44

00:02:41,760  -->  00:02:44,980
All right, so what else can we do?
45

45

00:02:46,540  -->  00:02:49,730
We can say for day, let's see.
46

46

00:02:49,730  -->  00:02:54,770
How about we make statements or
phrases with the for loops?
47

47

00:02:54,770  -->  00:02:58,529
So I can say for
48

48

00:02:58,529  -->  00:03:03,710
city in cities.
49

49

00:03:03,710  -->  00:03:05,890
Let's go ahead and make a phrase.
50

50

00:03:05,890  -->  00:03:11,390
And we'll have that phrase equal to I love
51

51

00:03:11,390  -->  00:03:16,590
space and then plus that city name.
52

52

00:03:16,590  -->  00:03:19,380
And then we'll go ahead and
print that phrase.
53

53

00:03:19,380  -->  00:03:22,740
So let's think about what it's gonna do,
it's gonna say for
54

54

00:03:22,740  -->  00:03:27,295
every element in that list create this
phrase and then print that phrase.
55

55

00:03:27,295  -->  00:03:30,130
Shift+ Enter, and there you have it.
56

56

00:03:30,130  -->  00:03:30,700
I love NY.
57

57

00:03:30,700  -->  00:03:31,280
I love LA.
58

58

00:03:31,280  -->  00:03:32,090
I love SF.
59

59

00:03:32,090  -->  00:03:37,350
In the last overview of part one we
learned about the range command.
60

60

00:03:37,350  -->  00:03:41,445
So the range command is really useful
if you want to execute loops for
61

61

00:03:41,445  -->  00:03:43,345
a specified length.
62

62

00:03:43,345  -->  00:03:47,565
So for instance, I can say for
63

63

00:03:47,565  -->  00:03:51,635
n in range 10.
64

64

00:03:51,635  -->  00:03:57,170
So remember this is a list of 10 elements,
0 through 9, colon.
65

65

00:03:57,170  -->  00:04:02,438
Let's go ahead and print, let's say we
want to print the inverse of every n.
66

66

00:04:02,438  -->  00:04:07,707
So I can say the inverse of quotation,
67

67

00:04:07,707  -->  00:04:12,151
let's put a space in there, and
68

68

00:04:12,151  -->  00:04:18,199
I'm gonna say The inverse of,
69

69

00:04:18,199  -->  00:04:23,101
and I can use commas here,
since I'm gonna be putting in
70

70

00:04:23,101  -->  00:04:27,918
a different, not a string object but
a number object.
71

71

00:04:27,918  -->  00:04:34,716
I can say the inverse of 'n,' is,
72

72

00:04:34,716  -->  00:04:39,023
and again a comma, and
73

73

00:04:39,023  -->  00:04:47,436
I'm gonna have this be 1.0 divided by m.
74

74

00:04:47,436  -->  00:04:48,656
Let's see if this works.
75

75

00:04:52,076  -->  00:04:53,756
I flip division by zero.
76

76

00:04:53,756  -->  00:04:58,950
So if you notice, the very first
number if we think about this,
77

77

00:04:58,950  -->  00:05:01,898
n in range ten, is going to be zero.
78

78

00:05:01,898  -->  00:05:04,018
So I can't start at zero.
79

79

00:05:04,018  -->  00:05:06,038
So I'm gonna specify
that it starts at one.
80

80

00:05:07,698  -->  00:05:11,560
We'll see what happens, and
now we have it working.
81

81

00:05:11,560  -->  00:05:14,020
So we say the inverse of 1 is 1.0.
82

82

00:05:14,020  -->  00:05:15,390
The inverse of 2 is 0.5.
83

83

00:05:15,390  -->  00:05:16,890
So, that makes sense.
84

84

00:05:16,890  -->  00:05:18,505
One over two is a half.
85

85

00:05:18,505  -->  00:05:23,540
0.5, and they will continue printing
the rest of those inverses.
86

86

00:05:23,540  -->  00:05:25,160
Great.
So that's how you can use range
87

87

00:05:25,160  -->  00:05:26,680
in a four loop.
88

88

00:05:26,680  -->  00:05:28,450
It's really useful in a lot of cases, and
89

89

00:05:28,450  -->  00:05:32,270
we'll be using it throughout the other
lectures in the data analysis course.
90

90

00:05:32,270  -->  00:05:35,610
So what else can we do?
91

91

00:05:35,610  -->  00:05:42,580
So lists and strings have something in
common, they can be treated as sequences.
92

92

00:05:42,580  -->  00:05:46,420
So you already know that you can
iterate through the elements of a list,
93

93

00:05:46,420  -->  00:05:49,350
such as a city,
each individual city and cities.
94

94

00:05:49,350  -->  00:05:51,400
You can do the same thing for
the letters in a string.
95

95

00:05:52,920  -->  00:05:59,650
So let's go ahead and say for letter in,
96

96

00:05:59,650  -->  00:06:03,010
and let's make a word here so
it will say hello.
97

97

00:06:07,140  -->  00:06:09,320
Print letter.
98

98

00:06:10,450  -->  00:06:11,360
So what is this gonna do?
99

99

00:06:11,360  -->  00:06:16,290
It's gonna say for every letter in hello,
this string, it's gonna print that letter.
100

100

00:06:16,290  -->  00:06:22,430
So just like in lists, we can iterate
through every letter in a string,
101

101

00:06:22,430  -->  00:06:24,420
and there you go,
it printed every individual letter.
102

102

00:06:25,850  -->  00:06:29,220
This is really only occasionally useful.
103

103

00:06:29,220  -->  00:06:31,740
What's a little more useful is slicing.
104

104

00:06:33,230  -->  00:06:37,892
The slicing option let's you grab or
105

105

00:06:37,892  -->  00:06:41,880
index elements from a list.
106

106

00:06:41,880  -->  00:06:48,340
So for instance I could say city 0 and
we went over this
107

107

00:06:51,900  -->  00:06:56,710
in part one, but this should call that
first city over, and there we have it NY.
108

108

00:07:01,340  -->  00:07:01,840
Great.
109

109

00:07:03,340  -->  00:07:05,880
So what else can we do with Python?
110

110

00:07:07,050  -->  00:07:10,410
We can use Booleans and truth testing.
111

111

00:07:10,410  -->  00:07:14,000
So we've learned a couple data types
already, integers, floating numbers,
112

112

00:07:14,000  -->  00:07:15,220
strings, and lists.
113

113

00:07:17,020  -->  00:07:21,709
Another data type we can use is a Boolean
variable, which is either a true or false.
114

114

00:07:23,710  -->  00:07:27,030
And the way to do that
is by creating them, so
115

115

00:07:27,030  -->  00:07:29,676
let's go ahead and
see what that works like.
116

116

00:07:29,676  -->  00:07:36,641
So let's say if city is equal to NY,
117

117

00:07:36,641  -->  00:07:41,287
and notice I used double
118

118

00:07:41,287  -->  00:07:46,860
equal signs there since I'm
119

119

00:07:46,860  -->  00:07:52,450
using bullion logic there.
120

120

00:07:52,450  -->  00:07:58,780
I can say print party.
121

121

00:08:03,410  -->  00:08:06,128
And then I'm going to
make an else statement.
122

122

00:08:06,128  -->  00:08:12,837
So otherwise so
if city equals NY, print party!,
123

123

00:08:12,837  -->  00:08:21,148
else print Work.
124

124

00:08:26,585  -->  00:08:28,845
So, what do we think is gonna happen here?
125

125

00:08:28,845  -->  00:08:30,405
Let's find out.
126

126

00:08:30,405  -->  00:08:32,528
Let's see if we've defined city.
127

127

00:08:33,969  -->  00:08:37,508
So since city didn't equal New York,
we printed work.
128

128

00:08:37,508  -->  00:08:39,120
Let's see what city actually is.
129

129

00:08:43,610  -->  00:08:45,270
So city is equal to SF currently.
130

130

00:08:46,330  -->  00:08:53,176
If we make city equal to NY, Shift+Enter.
131

131

00:08:53,176  -->  00:08:54,760
Go ahead and see what happens.
132

132

00:08:55,790  -->  00:08:56,670
And now we have a party.
133

133

00:08:57,730  -->  00:09:02,170
And notice that in IPython Notebook, the
cell order didn't matter as long as you
134

134

00:09:02,170  -->  00:09:06,340
clicked Shift+Enter the variable
has been changed for all the cells.
135

135

00:09:07,660  -->  00:09:08,160
Great.
136

136

00:09:10,460  -->  00:09:14,910
So let's go ahead and mess around a little
more in Boolean logic with these double
137

137

00:09:14,910  -->  00:09:23,270
equal signs, so we can ask Python is 1 to
equal to 2, and this should display false.
138

138

00:09:24,570  -->  00:09:25,070
Great.
139

139

00:09:26,680  -->  00:09:27,740
Let's make a true statement.
140

140

00:09:27,740  -->  00:09:32,830
So it's 2 double equal sign equal to 2.
141

141

00:09:32,830  -->  00:09:34,460
Shift+Enter.
142

142

00:09:34,460  -->  00:09:37,750
And you get true.
143

143

00:09:37,750  -->  00:09:40,970
Other Boolean logics we can
use is greater or less than.
144

144

00:09:40,970  -->  00:09:48,830
So we can ask is 3 greater than 4,
that's false.
145

145

00:09:50,320  -->  00:09:55,050
We can ask is 4 less then 5,
Shift+Enter and that's true.
146

146

00:09:56,300  -->  00:10:03,010
We can also do greater or less then or
greater equals to, so for instance,
147

147

00:10:03,010  -->  00:10:12,755
I can say is 1 greater then or equal to 2.
148

148

00:10:12,755  -->  00:10:14,500
Shift+Enter, we'll have be true.
149

149

00:10:15,620  -->  00:10:17,780
We can also do not equals,
150

150

00:10:17,780  -->  00:10:21,170
so we can say 1, the way to do not
equals is with an exclamation mark.
151

151

00:10:22,630  -->  00:10:26,690
Is 1 not equal to 2, that's true.
152

152

00:10:28,230  -->  00:10:32,120
And lastly we can say is 1 greater than or
153

153

00:10:32,120  -->  00:10:37,030
equal to 0 and that's true.
154

154

00:10:38,120  -->  00:10:41,438
So those are a bunch of Boolean operators.
155

155

00:10:41,438  -->  00:10:46,180
Hopefully they're pretty self
explanatory about greater or
156

156

00:10:46,180  -->  00:10:48,440
less than, greater than or
equal to, not equal to.
157

157

00:10:48,440  -->  00:10:50,990
If you're having trouble
understanding this,
158

158

00:10:50,990  -->  00:10:54,780
then I suggest you check out the other
resources such as the Code Academy.
159

159

00:10:54,780  -->  00:10:59,260
It will bring you up to speed
on this in a slower fashion, but
160

160

00:10:59,260  -->  00:11:05,500
if you're getting this so
far then you're good to go.
161

161

00:11:05,500  -->  00:11:07,640
So, what else can we do
with Boolean testing?
162

162

00:11:07,640  -->  00:11:10,630
We can do tests on lists.
163

163

00:11:10,630  -->  00:11:14,717
So, I can make a list say of 1,1,1, and
164

164

00:11:14,717  -->  00:11:19,701
ask python is it equal to
another list of 1,1,1.
165

165

00:11:19,701  -->  00:11:22,690
Shift+Enter, and that's true.
166

166

00:11:22,690  -->  00:11:27,500
If I change an item in that list,
let's see if it stays true, and
167

167

00:11:27,500  -->  00:11:33,340
it's false since the lists aren't equal.
168

168

00:11:33,340  -->  00:11:34,810
Great.
So that's about it for
169

169

00:11:34,810  -->  00:11:36,840
this Python overview, part two.
170

170

00:11:36,840  -->  00:11:40,930
We basically just learned how to use for
loops to iterate through lists,
171

171

00:11:42,740  -->  00:11:44,820
and use range in additional for for
172

172

00:11:44,820  -->  00:11:49,380
loop to also iterate through different
items, or different actions.
173

173

00:11:50,390  -->  00:11:57,100
Quick if L statements, and then
the Boolean operators, true and false.
174

174

00:11:57,100  -->  00:11:57,600
Okay.
175

175

00:11:58,810  -->  00:12:03,500
I'll see you in Part 3 for
another quick crash course tutorial.
176

176

00:12:03,500  -->  00:12:07,970
Again, if this is going too fast for
you, check out the Codecademy resources.
177

177

00:12:07,970  -->  00:12:10,030
They'll be more your speed.
178

178

00:12:10,030  -->  00:12:14,110
But if this is making sense to you and
you're going through it fine,
179

179

00:12:14,110  -->  00:12:16,130
then go ahead and
keep continuing checking out Part 3.
180

180

00:12:16,130  -->  00:12:16,880
All right.
181

181

00:12:16,880  -->  00:12:17,640
I'll see you there.
