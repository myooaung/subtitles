1
1

00:00:00,930  -->  00:00:04,980
Hello everybody, and welcome to Lecture 9.
2

2

00:00:04,980  -->  00:00:09,550
In this lecture we'll be
going over indexing arrays.
3

3

00:00:11,820  -->  00:00:15,080
So we're gonna import numpy as np.
4

4

00:00:17,705  -->  00:00:19,220
Alt+Enter to get a new cell and run it.
5

5

00:00:20,390  -->  00:00:22,510
Let's go ahead and create a sample array.
6

6

00:00:22,510  -->  00:00:26,570
So, in this case I'll just call it arr and
7

7

00:00:26,570  -->  00:00:30,862
I'm gonna set it equal to np.arrange, and
8

8

00:00:30,862  -->  00:00:35,040
let's go from 0 to 11, so in this case.
9

9

00:00:38,240  -->  00:00:39,920
And then let's go ahead and show it.
10

10

00:00:39,920  -->  00:00:43,562
Think about what you expect to see
here before you click Alt+Enter.
11

11

00:00:43,562  -->  00:00:44,770
And let's go ahead and see it.
12

12

00:00:46,290  -->  00:00:51,410
Okay, so hopefully you figured
out that the index starts at 0,
13

13

00:00:51,410  -->  00:00:56,640
so in this case calling it all
the way to 11 means I would get 10,
14

14

00:00:56,640  -->  00:00:58,860
here we go, 11 points.
15

15

00:00:58,860  -->  00:01:01,921
Excuse me.
0 through 10.
16

16

00:01:01,921  -->  00:01:06,357
And if I wanna get a value at an index,
17

17

00:01:06,357  -->  00:01:11,222
I can say call the value at 8, index 8,
18

18

00:01:11,222  -->  00:01:14,962
and that should be equal to 8.
19

19

00:01:14,962  -->  00:01:21,230
Which makes sense cuz if I go 0, 1, 2,
3, 4, 5, 6, 7, 8, I'll end up at 8.
20

20

00:01:21,230  -->  00:01:23,090
Great.
21

21

00:01:23,090  -->  00:01:25,570
So what if I wanna get the values
in a particular range?
22

22

00:01:27,330  -->  00:01:33,125
I can also do that by inputting
a range from 1 all the way to 5,
23

23

00:01:33,125  -->  00:01:37,696
and remember,
this should go to 1 before 5, so
24

24

00:01:37,696  -->  00:01:41,390
it should output 1, 2, 3, and 4.
25

25

00:01:41,390  -->  00:01:43,130
Let's go ahead and see if that's true.
26

26

00:01:44,750  -->  00:01:48,110
And it did, so it outputted 1,
2, 3, and 4 in your array.
27

27

00:01:48,110  -->  00:01:48,610
Perfect.
28

28

00:01:50,380  -->  00:01:53,990
And let's go ahead and
get the values in a range again.
29

29

00:01:53,990  -->  00:01:58,920
So how about 0 through 5?
30

30

00:02:00,879  -->  00:02:03,128
And that gets us 0, 1, 2, 3, 4.
31

31

00:02:03,128  -->  00:02:04,003
Okay.
32

32

00:02:04,003  -->  00:02:06,140
So that's how you can
get values in a range.
33

33

00:02:07,530  -->  00:02:10,500
You can also set a value
with an index range.
34

34

00:02:11,670  -->  00:02:19,230
So I can say from the range 0,
whoops, excuse me.
35

35

00:02:19,230  -->  00:02:26,820
0 to 5,
I can set all those values equal to 100.
36

36

00:02:26,820  -->  00:02:29,950
So before you click Enter,
think about what's gonna happen.
37

37

00:02:29,950  -->  00:02:35,147
I'm telling Python to say, hey,
all the values from 0 to 5,
38

38

00:02:35,147  -->  00:02:38,296
go ahead and set them equal to 100.
39

39

00:02:38,296  -->  00:02:44,336
But remember, you start at 0, so
it should be 0, 1, 2, 3, and 4.
40

40

00:02:44,336  -->  00:02:46,130
Those five numbers should be equal to 100.
41

41

00:02:46,130  -->  00:02:49,412
And then it will go 5, 6, 7, 8, 9, 10.
42

42

00:02:49,412  -->  00:02:55,628
So we should expect five instances of the
number 100, and then 5, 6, 7, 8, 9, 10.
43

43

00:02:57,670  -->  00:02:59,530
Let's go ahead and
see what our array looks like now.
44

44

00:02:59,530  -->  00:03:02,150
And we've got just that.
45

45

00:03:02,150  -->  00:03:03,879
So here we have the five 100s.
46

46

00:03:03,879  -->  00:03:06,337
So 0, 1, 2, 3, and 4.
47

47

00:03:06,337  -->  00:03:07,295
We're turning to 100.
48

48

00:03:07,295  -->  00:03:10,045
And then we have 5, 6, 7, 8, 9, 10.
49

49

00:03:10,045  -->  00:03:13,379
All right, perfect.
50

50

00:03:13,379  -->  00:03:16,420
Now let's go ahead and
just reset this array.
51

51

00:03:16,420  -->  00:03:22,940
So I'm gonna say np.arrange(0,11) again.
52

52

00:03:24,220  -->  00:03:28,200
Let's see what it looks like, so
I have my 0 through 10, the 11 points.
53

53

00:03:29,540  -->  00:03:32,210
And now we can do slices of an array.
54

54

00:03:33,480  -->  00:03:41,920
So I can set an object to be
equal to slice_of_arr and
55

55

00:03:41,920  -->  00:03:46,770
set that equal to the range from 0 to 6.
56

56

00:03:46,770  -->  00:03:51,779
So in this case I would expect
slice_of_arr to, or array,
57

57

00:03:51,779  -->  00:03:57,890
depending how you wanna say it,
to be equal to 0, 1, 2, 3, 4, 5.
58

58

00:03:57,890  -->  00:04:00,628
5.
So those are six values there.
59

59

00:04:00,628  -->  00:04:05,211
And then let's just type it out, so
we can see what that looks like.
60

60

00:04:06,878  -->  00:04:08,086
Okay, and there we have it.
61

61

00:04:08,086  -->  00:04:11,955
Here are the six values,
0, 1, 2, 3, 4, 5, and
62

62

00:04:11,955  -->  00:04:15,690
now we created a slice of
the array in the same fashion.
63

63

00:04:17,580  -->  00:04:19,310
We can go ahead and change the slice.
64

64

00:04:20,380  -->  00:04:24,760
So I can say slice_of_arr or array.
65

65

00:04:24,760  -->  00:04:28,380
I could say, using a colon,
66

66

00:04:29,560  -->  00:04:33,350
say all the elements in that
array are now equal to 99.
67

67

00:04:33,350  -->  00:04:40,768
And let's go ahead and check if that
is what happens and that's the case.
68

68

00:04:40,768  -->  00:04:44,650
So using that colon, you can select
all of the elements in your array.
69

69

00:04:47,080  -->  00:04:52,070
So now note that the changes also
occur in our original array.
70

70

00:04:53,730  -->  00:04:54,890
So what do I mean by that?
71

71

00:04:56,590  -->  00:04:58,620
I'm going to show you the original array.
72

72

00:04:58,620  -->  00:05:03,330
Now you might be thinking,
whoa, that's weird.
73

73

00:05:03,330  -->  00:05:08,360
I was only changing values in
slice_of_arr, not in my array itself.
74

74

00:05:09,360  -->  00:05:15,440
Well, in numpy, this data isn't copied,
it's just a view of the original array.
75

75

00:05:15,440  -->  00:05:17,080
So this avoids memory problems.
76

76

00:05:17,080  -->  00:05:20,700
That way you don't have several
copies of your array floating around.
77

77

00:05:20,700  -->  00:05:23,330
You only have one copy of your array.
78

78

00:05:23,330  -->  00:05:27,640
And if you grab slices of it,
and change stuff,
79

79

00:05:27,640  -->  00:05:31,090
change the elements,
it's going to affect your original array.
80

80

00:05:31,090  -->  00:05:35,279
So that's something to really keep in mind
when you're messing around with arrays.
81

81

00:05:36,850  -->  00:05:41,820
If you don't want that to happen and you
want to get a copy, you gotta be explicit.
82

82

00:05:41,820  -->  00:05:45,142
So if I say arr_copy = arr,
83

83

00:05:45,142  -->  00:05:50,530
that will still affect
your original array.
84

84

00:05:50,530  -->  00:05:52,340
It's not gonna actually make a copy.
85

85

00:05:52,340  -->  00:05:56,390
What I have to do is explicitly say copy.
86

86

00:05:56,390  -->  00:06:01,594
So .copy(), no extra arguments.
87

87

00:06:01,594  -->  00:06:05,200
And then I can look at this array and
now I have a copy of it.
88

88

00:06:05,200  -->  00:06:08,030
All right, great.
89

89

00:06:08,030  -->  00:06:10,930
So let's learn about
indexing in a 2D array.
90

90

00:06:12,660  -->  00:06:16,920
So let me make an object called arr_2d.
91

91

00:06:19,437  -->  00:06:22,170
And use np.arrary.
92

92

00:06:22,170  -->  00:06:25,380
And then as we've done in the past,
I'm gonna put in several lists.
93

93

00:06:25,380  -->  00:06:27,130
So I can say something like, let's see.
94

94

00:06:27,130  -->  00:06:31,850
Let's go ahead and
go in powers of or counts of five.
95

95

00:06:31,850  -->  00:06:34,503
So like 5, 10, 15.
96

96

00:06:34,503  -->  00:06:37,461
That'll be one list.
97

97

00:06:37,461  -->  00:06:41,670
Then 20, 25, 30.
98

98

00:06:41,670  -->  00:06:43,461
That's another list.
99

99

00:06:43,461  -->  00:06:49,961
And then my next one I can say 35, 40, 45.
100

100

00:06:49,961  -->  00:06:50,680
All right.
101

101

00:06:50,680  -->  00:06:52,794
And then let's go ahead and
show that by typing it out.
102

102

00:06:54,365  -->  00:06:56,015
All right, excellent.
103

103

00:06:56,015  -->  00:06:58,795
So now I have a three by three 2d array.
104

104

00:06:59,935  -->  00:07:01,345
Awesome.
105

105

00:07:01,345  -->  00:07:03,550
So how can I index this?
106

106

00:07:05,915  -->  00:07:10,940
I'll type out my arr_2d,
and if I want to see a row,
107

107

00:07:10,940  -->  00:07:14,200
I can type in the index of that row.
108

108

00:07:15,960  -->  00:07:19,950
So think about for a second before you
click Alt+Enter, what this should be,
109

109

00:07:19,950  -->  00:07:23,545
and remember in Python and
numpy, your index starts at 0.
110

110

00:07:24,630  -->  00:07:26,250
So what do we expect to see here?
111

111

00:07:27,420  -->  00:07:29,780
We see the row of 20, 25, and 30.
112

112

00:07:29,780  -->  00:07:33,020
So that makes sense because
your index starts at 0, and
113

113

00:07:33,020  -->  00:07:37,640
what I mean by that is if I called 0,
I would see the first row here.
114

114

00:07:37,640  -->  00:07:39,300
5, 10, 15.
115

115

00:07:39,300  -->  00:07:43,875
So here's your 0 index row,
here's your 1 index row, and
116

116

00:07:43,875  -->  00:07:45,135
then here's your 2 index row.
117

117

00:07:45,135  -->  00:07:46,785
All right, great.
118

118

00:07:49,025  -->  00:07:52,850
What if you want
an individual element value?
119

119

00:07:52,850  -->  00:07:54,040
Well, you can do that as well.
120

120

00:07:56,710  -->  00:08:02,240
You can just say the row you want and
then also ask for the column you want.
121

121

00:08:04,370  -->  00:08:06,630
Okay, so think about it for a second.
122

122

00:08:06,630  -->  00:08:07,750
What value should this get me?
123

123

00:08:07,750  -->  00:08:10,650
I'm asking for index 1 row.
124

124

00:08:10,650  -->  00:08:15,695
And index 0 column And
125

125

00:08:15,695  -->  00:08:19,050
hopefully you got that it was gonna be 20,
so that makes sense.
126

126

00:08:19,050  -->  00:08:25,395
Here's my index 1 row, and
then that was my index 0 column.
127

127

00:08:25,395  -->  00:08:25,895
Great.
128

128

00:08:27,285  -->  00:08:31,215
Okay, so we can also do 2d array slicing.
129

129

00:08:31,215  -->  00:08:32,575
So how does that work?
130

130

00:08:32,575  -->  00:08:35,075
Let's go ahead and
see that 2d array again.
131

131

00:08:37,080  -->  00:08:38,210
So there's my 2d array.
132

132

00:08:39,250  -->  00:08:45,700
Let's say I wanted a 2,
2 shape array from the top right corner.
133

133

00:08:45,700  -->  00:08:51,110
So I wanted the 10, 15 and the 25,
30 as its own 2 by 2 array.
134

134

00:08:51,110  -->  00:08:54,830
So I can just do that by taking a slice.
135

135

00:08:57,000  -->  00:09:03,285
And so what I'm gonna ask for
is everything up to 2 and
136

136

00:09:03,285  -->  00:09:08,580
then 1 and beyond as far as the columns.
137

137

00:09:08,580  -->  00:09:11,100
So let's see if that works.
138

138

00:09:12,860  -->  00:09:14,490
And it does, excellent.
139

139

00:09:14,490  -->  00:09:18,230
So if you look at, for instance,
the columns here, I asked for
140

140

00:09:19,240  -->  00:09:22,960
the one column index and
everything beyond that.
141

141

00:09:22,960  -->  00:09:25,410
So that would be these two last columns.
142

142

00:09:26,430  -->  00:09:30,210
And so that's what allowed it to
take the 10, 25 and the 15, 30.
143

143

00:09:30,210  -->  00:09:33,624
And then to cut off the 40 and
the 45, I ask for
144

144

00:09:33,624  -->  00:09:36,628
everything until the second indexed row.
145

145

00:09:36,628  -->  00:09:37,962
Okay, great.
146

146

00:09:40,878  -->  00:09:42,960
Now what else can we do?
147

147

00:09:42,960  -->  00:09:47,530
So we've been able to take
some 2d array slices.
148

148

00:09:47,530  -->  00:09:54,590
We can check out the bottom row if
we wanted to by saying 2 there.
149

149

00:09:54,590  -->  00:09:57,490
That would have been the bottom row.
150

150

00:09:57,490  -->  00:09:57,990
Perfect.
151

151

00:09:59,830  -->  00:10:03,870
And we can go on to something
called fancy indexing.
152

152

00:10:05,200  -->  00:10:09,110
So fancy indexing,
I'll show you what it means.
153

153

00:10:09,110  -->  00:10:15,090
So we can say something like, let's
just make this array another 2d array.
154

154

00:10:15,090  -->  00:10:18,252
I'll won't put the underscore
to differentiate it, and
155

155

00:10:18,252  -->  00:10:20,004
I'm gonna make a zeroes array.
156

156

00:10:20,004  -->  00:10:24,150
And if you remember from some
previous lectures, we can say zeros.
157

157

00:10:24,150  -->  00:10:30,140
Then let's go ahead and input the size,
so I'll make it a 10 by 10.
158

158

00:10:30,140  -->  00:10:31,711
Let's go ahead and
see what that looks like.
159

159

00:10:33,630  -->  00:10:37,710
Okay, here's my 10 by 10
2d array of all zeros.
160

160

00:10:37,710  -->  00:10:38,870
And looks like they're all floats.
161

161

00:10:38,870  -->  00:10:40,010
That's why there's a decimal there.
162

162

00:10:42,625  -->  00:10:45,135
And now I can get the length of the array.
163

163

00:10:46,675  -->  00:10:52,536
I can say, object arr_length,
164

164

00:10:52,536  -->  00:11:00,500
_length, = arr2d.shape of that first.
165

165

00:11:02,320  -->  00:11:04,754
And if I look at that I should get,
whoops.
166

166

00:11:07,628  -->  00:11:08,410
Equal to 10.
167

167

00:11:08,410  -->  00:11:10,100
So it has a length of 10.
168

168

00:11:10,100  -->  00:11:12,670
So that's how I could get the length.
169

169

00:11:12,670  -->  00:11:14,560
So now we can set up the array.
170

170

00:11:14,560  -->  00:11:20,003
So I'm gonna say for i in range.
171

171

00:11:24,336  -->  00:11:29,004
Length of the array, so for i in range
10 basically is what I'm saying.
172

172

00:11:34,837  -->  00:11:40,503
That array element value of i = i.
173

173

00:11:43,171  -->  00:11:45,871
Okay, so
now that we've done that operation,
174

174

00:11:45,871  -->  00:11:49,653
I'm gonna check out the multi-dimensional
array but go ahead and
175

175

00:11:49,653  -->  00:11:53,715
think about what we just did here,
as far as this function.
176

176

00:11:53,715  -->  00:11:59,655
So, we said for every i in the range,
arr_length and that arr_length was 10.
177

177

00:11:59,655  -->  00:12:05,990
Go ahead and
set that element there equal to 1.
178

178

00:12:05,990  -->  00:12:07,970
So what should that do?
179

179

00:12:09,035  -->  00:12:11,160
That should give you straight ones.
180

180

00:12:11,160  -->  00:12:13,212
All right, so that makes sense so far.
181

181

00:12:13,212  -->  00:12:18,795
What if I said equal to i?
182

182

00:12:18,795  -->  00:12:20,640
Now let's go ahead and
see what happened to our array.
183

183

00:12:21,750  -->  00:12:25,520
Go ahead and think about what this
should look like before you check it.
184

184

00:12:27,000  -->  00:12:32,580
Hopefully you thought about it right and
you got 0, 1, 2, 3, 4, 5 all the way to 9.
185

185

00:12:32,580  -->  00:12:35,670
And then everything across is yet
the same.
186

186

00:12:35,670  -->  00:12:40,100
So we only changed those
across the rows themselves.
187

187

00:12:40,100  -->  00:12:44,140
So every row, every value in that row,
equals that count number.
188

188

00:12:45,240  -->  00:12:51,000
Okay, so fancy indexing allows for
us to do the following.
189

189

00:12:51,000  -->  00:12:54,060
So we can say something like arr2d.
190

190

00:12:57,375  -->  00:13:04,003
And just index it by the values in
that row so we can say 2, 4, 6, 8.
191

191

00:13:06,505  -->  00:13:10,940
Great, and so that will give us
the second, the fourth, the sixth, and
192

192

00:13:10,940  -->  00:13:12,853
the eighth rows for indexing.
193

193

00:13:12,853  -->  00:13:17,170
And we can do this in any order,
which is why we get the term fancy.
194

194

00:13:17,170  -->  00:13:20,161
So it doesn't have to be in order,
195

195

00:13:20,161  -->  00:13:25,418
we can just do random rows here,
so I can say 6, 4, 2, and
196

196

00:13:25,418  -->  00:13:30,809
7, and that will return the 6,
4, 2, and 7 index rows.
197

197

00:13:32,040  -->  00:13:33,700
And that's fancy indexing.
198

198

00:13:34,790  -->  00:13:40,672
So main takeaways here are, again,
we reviewed how to create arrays,
199

199

00:13:40,672  -->  00:13:44,360
and the main takeaway is how to index.
200

200

00:13:44,360  -->  00:13:48,200
So remember, this is really important
if you wanna explicitly make a copy,
201

201

00:13:48,200  -->  00:13:50,180
you've gotta state that .copy.
202

202

00:13:50,180  -->  00:13:56,030
Otherwise, changes you make and slices of
the array will affect your original array.
203

203

00:13:57,260  -->  00:14:01,100
And then for indexing you can ask for
the row or you can get the row and
204

204

00:14:01,100  -->  00:14:05,490
the column and you can use
colons to get certain slices or
205

205

00:14:05,490  -->  00:14:08,037
chunks out of your
multi-dimensional arrays.
206

206

00:14:09,130  -->  00:14:15,200
And that's it for indexing arrays and
we've finished off with fancy indexing.
207

207

00:14:15,200  -->  00:14:18,100
Okay, next up we'll have Lecture 10.
208

208

00:14:18,100  -->  00:14:18,670
I'll see you there.
