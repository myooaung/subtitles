1
1

00:00:00,800  -->  00:00:01,560
Hey, guys.
2

2

00:00:01,560  -->  00:00:02,800
Welcome to lecture 45.
3

3

00:00:02,800  -->  00:00:07,530
This is gonna be on using splitting,
applying, and combining.
4

4

00:00:07,530  -->  00:00:13,886
So otherwise known as split,
apply, combine.
5

5

00:00:16,263  -->  00:00:18,101
So we'll do the usual imports.
6

6

00:00:18,101  -->  00:00:21,544
I'm just copying and pasting these from
7

7

00:00:21,544  -->  00:00:26,513
the IPython Notebook viewer
link that I have for you guys.
8

8

00:00:26,513  -->  00:00:28,010
All right.
9

9

00:00:28,010  -->  00:00:30,310
So what is split, apply, combine?
10

10

00:00:30,310  -->  00:00:34,445
The best way to look at this is just
through a visual demonstration.
11

11

00:00:34,445  -->  00:00:37,870
So for instance,
you can have a data frame, or
12

12

00:00:37,870  -->  00:00:41,840
just a data set,
split it up by a certain index.
13

13

00:00:41,840  -->  00:00:43,185
So in this example,
14

14

00:00:43,185  -->  00:00:48,970
this was split up by that letter in
the x column, so a's, b's, and c's.
15

15

00:00:48,970  -->  00:00:53,470
You can apply something to
it to get a new value, and
16

16

00:00:53,470  -->  00:00:54,930
then you can combine it back again.
17

17

00:00:56,850  -->  00:01:01,640
So in this instance it looks like
the y column was averaged out, and so
18

18

00:01:01,640  -->  00:01:07,070
you get the average of everything, and
you can do this by groupBy methods or
19

19

00:01:07,070  -->  00:01:08,810
other ways using pandas.
20

20

00:01:08,810  -->  00:01:13,590
So this is the general principle of split,
apply, combine, and
21

21

00:01:13,590  -->  00:01:16,330
we're gonna learn about it a little more.
22

22

00:01:16,330  -->  00:01:19,560
So let's go ahead and
get some data to work with.
23

23

00:01:19,560  -->  00:01:20,350
So let's go ahead and
24

24

00:01:20,350  -->  00:01:26,090
use the same data frame we used in
the last lecture, the wine data frame.
25

25

00:01:26,090  -->  00:01:31,267
And we'll open this up
by using pd.read_csv.
26

26

00:01:34,427  -->  00:01:38,558
And saying, winequality_red.csv, and
27

27

00:01:38,558  -->  00:01:44,590
remember the limiter/separator
was a semicolon in this case.
28

28

00:01:45,910  -->  00:01:49,520
And then to make sure we
actually got it correct,
29

29

00:01:49,520  -->  00:01:51,236
we'll just check out the first five rows.
30

30

00:01:51,236  -->  00:01:53,589
All right, great.
31

31

00:01:55,885  -->  00:02:04,320
Okay, so in the last lecture we kind of
explored alcohol content versus quality.
32

32

00:02:04,320  -->  00:02:09,450
So what if we wanted to know
the highest alcohol content wine for
33

33

00:02:09,450  -->  00:02:11,350
each quality range?
34

34

00:02:11,350  -->  00:02:15,840
We can use groupby mechanics to do
a split apply combine procedure.
35

35

00:02:17,060  -->  00:02:20,360
So, first what I'm gonna do is I'm gonna
create a function that assigns a rank to
36

36

00:02:20,360  -->  00:02:25,530
each wine based on alcohol content,
with 1 being the highest alcohol content.
37

37

00:02:26,540  -->  00:02:28,370
So what I'm gonna do is
I'll make a function.
38

38

00:02:28,370  -->  00:02:33,466
I'll call it ranker.
39

39

00:02:33,466  -->  00:02:37,995
It's gonna take a data frame and
40

40

00:02:37,995  -->  00:02:45,717
then from that data frame it
will set alc content rank.
41

41

00:02:49,049  -->  00:02:52,971
And let's go ahead and make this
one term so the underscore is here.
42

42

00:02:57,390  -->  00:03:04,625
So this is gonna create that column and
set it equal to arrange,
43

43

00:03:04,625  -->  00:03:11,750
let's group the numbers by
the length of the data frame + 1.
44

44

00:03:11,750  -->  00:03:15,980
And then it's gonna
return that data frame.
45

45

00:03:17,700  -->  00:03:20,880
Okay, so
we'll be using this function later on.
46

46

00:03:22,330  -->  00:03:26,684
Then let's go take a step back and
look at the dframe_wine.
47

47

00:03:26,684  -->  00:03:31,439
So let's sort the data frame
by alcohol in ascending order.
48

48

00:03:31,439  -->  00:03:37,870
So I'm gonna say dframe_wine.sorts.
49

49

00:03:39,330  -->  00:03:42,181
I'm gonna sort it by alcohol.
50

50

00:03:46,813  -->  00:03:51,696
Say ascending, pass that argument,
51

51

00:03:51,696  -->  00:03:56,885
put it to false and then inplace=True so
52

52

00:03:56,885  -->  00:04:00,405
it affects our data frame.
53

53

00:04:01,675  -->  00:04:04,010
Okay, so now we have a data frame sorted.
54

54

00:04:04,010  -->  00:04:08,340
Now we're gonna group by quality and
apply our ranking function.
55

55

00:04:08,340  -->  00:04:09,740
So this is how we're gonna do this.
56

56

00:04:09,740  -->  00:04:12,400
This is gonna be the split,
apply, combine technique.
57

57

00:04:12,400  -->  00:04:17,375
So I take my data frame wine,
and I'm gonna set it equal to
58

58

00:04:17,375  -->  00:04:25,450
dframe_wine.groupby, group it by quality.
59

59

00:04:25,450  -->  00:04:29,040
And this is where the apply comes in.
60

60

00:04:29,040  -->  00:04:32,022
I'm going to pass the method apply and
61

61

00:04:32,022  -->  00:04:38,580
I'm gonna apply that ranker
function that we just created.
62

62

00:04:38,580  -->  00:04:42,720
So again, this ranker function
assigns a rank to each wine based on
63

63

00:04:42,720  -->  00:04:46,610
alcohol content,
with 1 being the highest alcohol content.
64

64

00:04:47,810  -->  00:04:52,840
So I'm applying that ranking
function to the dataframe
65

65

00:04:52,840  -->  00:04:54,700
as it's been grouped by quality.
66

66

00:04:57,050  -->  00:04:57,610
Okay.
So
67

67

00:04:57,610  -->  00:05:01,610
take a moment, think about what
the ranker function's actually doing,
68

68

00:05:03,820  -->  00:05:09,430
why it's arranging by the length and
why it's adding that 1.
69

69

00:05:09,430  -->  00:05:11,480
And then once you
understand it go ahead and
70

70

00:05:11,480  -->  00:05:14,850
preview what your dataframe
is gonna look like.
71

71

00:05:14,850  -->  00:05:16,980
So let's go ahead and
check the head of that dataframe.
72

72

00:05:18,390  -->  00:05:19,210
Okay.
73

73

00:05:19,210  -->  00:05:22,210
So what do we got for a dataframe now?
74

74

00:05:22,210  -->  00:05:25,490
We can see that the index of
the rows has been jumbled up a bit.
75

75

00:05:25,490  -->  00:05:30,910
But if we come over here and
look at the alc_content_rank,
76

76

00:05:30,910  -->  00:05:34,970
it looks like your dataframe's been
sorted by the highest alcohol content.
77

77

00:05:34,970  -->  00:05:40,780
So this is the number 1 alcohol
content for the quality of 5.
78

78

00:05:40,780  -->  00:05:45,140
This is the number 1 alcohol content for
the quality of 8.
79

79

00:05:45,140  -->  00:05:50,376
And you can see, these are pretty high
alcohol content wines,14.9%, 14%.
80

80

00:05:50,376  -->  00:05:58,340
So we can now get closer to finding the
highest alcohol content for each ranking.
81

81

00:06:00,160  -->  00:06:01,960
So how do we finish this up?
82

82

00:06:03,760  -->  00:06:07,940
We can just call for the dataframe
where the alcohol content rank,
83

83

00:06:07,940  -->  00:06:10,940
this last row right here equals 1.
84

84

00:06:10,940  -->  00:06:16,138
So we can say, set an object
85

85

00:06:16,138  -->  00:06:20,885
called num_of_qual =
86

86

00:06:20,885  -->  00:06:27,922
dframe_wine Quality.
87

87

00:06:31,640  -->  00:06:34,504
Value_counts.
88

88

00:06:37,887  -->  00:06:39,645
And then let's go ahead and
see what that looks like.
89

89

00:06:44,846  -->  00:06:46,740
Okay, so what is this?
90

90

00:06:46,740  -->  00:06:50,940
This is just the number of
lines in each quality count.
91

91

00:06:50,940  -->  00:06:54,320
So at quality 5,
at quality 6, 7, 4, 8, and 3.
92

92

00:06:56,020  -->  00:07:00,820
And this is, there's 681 wines
that have a quality rating of 5.
93

93

00:07:00,820  -->  00:07:05,660
638 wines have a quality rating of 6,
etc., etc.
94

94

00:07:08,330  -->  00:07:12,790
So let's go ahead and
show the combined information for
95

95

00:07:12,790  -->  00:07:16,036
the wines that had the highest alcohol
content for their respective rank.
96

96

00:07:16,036  -->  00:07:18,248
All right.
97

97

00:07:18,248  -->  00:07:20,720
So, this is how we're gonna do that.
98

98

00:07:22,690  -->  00:07:27,771
We'll take our dataframe,
99

99

00:07:27,771  -->  00:07:33,275
and then say, dframe_wine,
100

100

00:07:33,275  -->  00:07:41,743
call that last column we
made using our ranker,
101

101

00:07:41,743  -->  00:07:47,420
content_rank and say = 1.
102

102

00:07:47,420  -->  00:07:54,850
So, dframe_wine where your
alc_content_rank = 1.
103

103

00:07:54,850  -->  00:07:59,800
So, where it's equal to 1, that means
it had the highest alcohol content
104

104

00:07:59,800  -->  00:08:02,220
of any wine in its quality class,
if you will.
105

105

00:08:03,870  -->  00:08:05,260
And then we'll just get the head of that.
106

106

00:08:06,390  -->  00:08:09,470
And how many dframes do we wanna see?
107

107

00:08:09,470  -->  00:08:12,770
Well, we just wanna see, or, I'm sorry,
how many rows do we wanna see?
108

108

00:08:12,770  -->  00:08:19,275
We just wanna see the same number of
rows as there are quality batches.
109

109

00:08:19,275  -->  00:08:27,510
So we'll say num_of_qual.
110

110

00:08:27,510  -->  00:08:31,187
And looks like I forgot an E.
111

111

00:08:31,187  -->  00:08:32,950
Okay, let's run it again.
112

112

00:08:32,950  -->  00:08:34,520
All right, there we go.
113

113

00:08:34,520  -->  00:08:40,755
So if you look at the alc_content_rank,
they're all equal to 1.
114

114

00:08:40,755  -->  00:08:46,302
So there were six quality rankings
in total, 3, 4, 5, 6, 7, 8.
115

115

00:08:46,302  -->  00:08:51,340
And these are the row indexes of
the wines that had the highest
116

116

00:08:52,420  -->  00:08:55,569
alcohol content for their quality class.
117

117

00:08:57,470  -->  00:09:01,520
So you can see these all have
pretty high alcohol contents.
118

118

00:09:01,520  -->  00:09:05,230
They're all the highest in the class, and
you can see how they relate to quality.
119

119

00:09:07,100  -->  00:09:12,350
And so something we might wanna ask
ourselves is are there any trends between
120

120

00:09:12,350  -->  00:09:16,580
the ranking of the wine and
the alcohol content?
121

121

00:09:16,580  -->  00:09:22,770
You might start to wonder, is there a
ranking between a higher quality ranking,
122

122

00:09:22,770  -->  00:09:25,720
and a higher alcohol percentage?
123

123

00:09:25,720  -->  00:09:29,550
That might be an interesting
thing to investigate.
124

124

00:09:30,970  -->  00:09:35,245
So the important thing about splitting,
applying,
125

125

00:09:35,245  -->  00:09:39,805
combining, is that we were
able to get from a dataframe,
126

126

00:09:39,805  -->  00:09:43,120
pass, and apply a function to it.
127

127

00:09:43,120  -->  00:09:47,610
So you're able to use groupby to
do the splitting and combining.
128

128

00:09:47,610  -->  00:09:52,270
And you're able to use .apply to
apply functions to your data frame.
129

129

00:09:53,680  -->  00:09:58,014
All right, so that's it for that.
130

130

00:09:58,014  -->  00:10:01,569
In lecture 46,
we're gonna learn about cross tabulation.
131

131

00:10:01,569  -->  00:10:02,069
Okay.
