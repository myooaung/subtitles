WEBVTT
1
1

00:00:01.150  -->  00:00:04.550
Hey everybody welcome to lecture 49, so
2

2

00:00:04.550  -->  00:00:08.940
in this lecture we're gonna be learning
about Kernel Destiny Estimation
3

3

00:00:08.940  -->  00:00:14.309
plots also know as KDE plots.
4

4

00:00:15.640  -->  00:00:20.810
So if you are a little fuzzy on your
statistics and can't quite remember how
5

5

00:00:20.810  -->  00:00:24.400
the exactly the Kernel Density Estimation
Plots work, you can go ahead and
6

6

00:00:24.400  -->  00:00:28.230
just check out the Wikipedia page
on Kernel Density Estimation Plots.
7

7

00:00:28.230  -->  00:00:31.430
They're basically just
ways to estimate the pdf,
8

8

00:00:31.430  -->  00:00:34.250
the probability density
function of random variables.
9

9

00:00:35.650  -->  00:00:39.170
And you can see here,
here's a histogram on the left.
10

10

00:00:39.170  -->  00:00:41.920
And on the right is
the Kernel density estimate.
11

11

00:00:41.920  -->  00:00:46.800
And these KDEs are constructed
from just galciun
12

12

00:00:46.800  -->  00:00:52.340
distribution plot on every data point,
and then you just sum them up.
13

13

00:00:52.340  -->  00:00:56.830
So, what we're going to do in this lecture
is manually create this plot by summing up
14

14

00:00:56.830  -->  00:00:58.750
those Gaussian curves, and
15

15

00:00:58.750  -->  00:01:03.105
then we're going to use C born to
do the short cut method on that.
16

16

00:01:03.105  -->  00:01:05.835
And we'll go over a little
bit of bandwidth selection.
17

17

00:01:05.835  -->  00:01:10.385
We'll be using the Gaussian
approximation for it.
18

18

00:01:11.455  -->  00:01:12.875
All right, so
let's go ahead and get started.
19

19

00:01:14.235  -->  00:01:17.075
We're gonna have to do a lot of
imports like we did last time.
20

20

00:01:17.075  -->  00:01:19.618
I highly suggest you just Edit > Copy,
21

21

00:01:19.618  -->  00:01:24.410
Edit > Paste like I'm doing right now
from the IPython Notebook viewer.
22

22

00:01:25.470  -->  00:01:27.220
So we just have our normal imports,
23

23

00:01:27.220  -->  00:01:31.610
the stats imports, the plotting
modules and the libraries we'll use.
24

24

00:01:34.740  -->  00:01:35.950
Let me fix that.
25

25

00:01:35.950  -->  00:01:36.450
Okay.
26

26

00:01:37.450  -->  00:01:41.100
And we have map plot inlines so
the plots appear.
27

27

00:01:41.100  -->  00:01:42.230
In the iPython notebook.
28

28

00:01:43.640  -->  00:01:47.460
So let's go ahead and
start off with making a KDE plot manually.
29

29

00:01:49.030  -->  00:01:51.730
Let's just start with a simple rug plot.
30

30

00:01:51.730  -->  00:01:54.310
Or some people also know
them as carpet plots.
31

31

00:01:54.310  -->  00:01:58.990
All a rug plot does is it just puts
a tick wherever a value occurred.
32

32

00:01:58.990  -->  00:02:01.450
So in order to plot something we need.
33

33

00:02:01.450  -->  00:02:03.220
Something to plot so
let's get our data set.
34

34

00:02:04.420  -->  00:02:08.760
And let's create that
from randn 25 points.
35

35

00:02:09.830  -->  00:02:13.119
So we have our data set there, and
36

36

00:02:13.119  -->  00:02:18.090
then we can use C born rugplot,
so sns.rugplot.
37

37

00:02:18.090  -->  00:02:19.380
And call it on that data set.
38

38

00:02:23.060  -->  00:02:30.260
And now we have our every tick is a spot
in that dataset, a value in that dataset.
39

39

00:02:30.260  -->  00:02:34.130
So to make it a little clearer, let's
go ahead and set some y limits on that.
40

40

00:02:34.130  -->  00:02:39.840
So I'm gonna say plt.ylim, and
then I can set the lower and
41

41

00:02:39.840  -->  00:02:42.780
the upper y limits, so
I'm gonna set it from zero to one.
42

42

00:02:42.780  -->  00:02:44.210
So I just get a bunch of little ticks.
43

43

00:02:45.680  -->  00:02:46.340
Okay great.
44

44

00:02:46.340  -->  00:02:51.400
So every tick is a point on that dataset,
excellent.
45

45

00:02:51.400  -->  00:02:53.619
So let's go ahead and
plot a histogram on top of that.
46

46

00:02:56.755  -->  00:03:02.090
So the way to plot a histogram
is you can say plt.hist, hist.
47

47

00:03:03.140  -->  00:03:04.490
Input the dataset you wanna plot.
48

48

00:03:04.490  -->  00:03:06.980
In this case it's just called dataset.
49

49

00:03:08.130  -->  00:03:13.150
And if you wanna make it transparent
you can do that by passing alpha.
50

50

00:03:13.150  -->  00:03:15.310
So you can put an alpha from zero to one.
51

51

00:03:15.310  -->  00:03:17.750
Zero being totally clear,
one being totally opaque.
52

52

00:03:17.750  -->  00:03:22.680
And in this case I'll just
use a value of .3 and
53

53

00:03:22.680  -->  00:03:26.450
since I also wanna have
the histogram on top of my rug plot.
54

54

00:03:26.450  -->  00:03:32.010
I will save my rug plot in
the same Ipython notebook cell and
55

55

00:03:32.010  -->  00:03:33.630
I will pass my dataset through it.
56

56

00:03:35.000  -->  00:03:36.760
Scroll down a bit.
57

57

00:03:36.760  -->  00:03:38.120
Okay great.
58

58

00:03:38.120  -->  00:03:43.190
So, it's actually pretty obvious now what
a histogram is doing that we saw last time
59

59

00:03:43.190  -->  00:03:47.900
basically for every bin its just counting
how many ticks are in each bin, so for
60

60

00:03:47.900  -->  00:03:53.790
instance the bin all the way on the left
has one tick in it so the bin is one high.
61

61

00:03:53.790  -->  00:03:58.680
If we move to the next bin, it has zero
ticks, so it's zero high, and etc., etc.
62

62

00:03:58.680  -->  00:04:01.510
It's just counting the number
of ticks in each bin and
63

63

00:04:01.510  -->  00:04:05.936
then making the bar that high.
64

64

00:04:05.936  -->  00:04:07.600
Okay.
65

65

00:04:07.600  -->  00:04:09.800
So the kernel density plot,
what it's gonna do,
66

66

00:04:09.800  -->  00:04:13.830
it's gonna represent each of these tick
marks with a Gaussian basis function.
67

67

00:04:14.830  -->  00:04:19.370
So we're gonna do this manually first
before we see C born's shortcut.
68

68

00:04:19.370  -->  00:04:22.250
So this is gonna be a big cell.
69

69

00:04:22.250  -->  00:04:24.955
So we're gonna say rugplot, sns.rugplot.
70

70

00:04:27.220  -->  00:04:27.960
Pass the data set.
71

71

00:04:29.930  -->  00:04:32.880
And then we're gonna set up the x axis for
the plot.
72

72

00:04:32.880  -->  00:04:34.630
So we need a min and a max.
73

73

00:04:35.710  -->  00:04:39.520
So I'm gonna set the x
minimum to be equal to
74

74

00:04:39.520  -->  00:04:43.930
the minimum value in that
dataset minus two for
75

75

00:04:43.930  -->  00:04:48.360
some range, and I'm going to do
a similar thing for the maximum.
76

76

00:04:49.490  -->  00:04:57.538
I'm gonna set the X max to dataset
the max value in there plus two.
77

77

00:04:57.538  -->  00:05:00.020
Okie doke.
78

78

00:05:00.020  -->  00:05:03.860
And in that same cell
I'm gonna set my X axis.
79

79

00:05:03.860  -->  00:05:09.980
I'm going to set my X axis to be a hundred
equally spaced points from X min to X max.
80

80

00:05:11.160  -->  00:05:16.640
An easy way of doing that is just by
using np.linspace, so linear spacing.
81

81

00:05:17.870  -->  00:05:21.700
And the inputs here I'm just going
to go from my start to my stop, and
82

82

00:05:21.700  -->  00:05:23.760
then the number of points I want.
83

83

00:05:23.760  -->  00:05:28.720
So I want it to start at x
min stop at x_max, whoops.
84

84

00:05:32.046  -->  00:05:34.650
And I want 100 equally spaced points.
85

85

00:05:37.296  -->  00:05:42.590
For setting up the bandwidth, I'm just
going to use the bandwidth estimation.
86

86

00:05:42.590  -->  00:05:46.150
Which if you're unfamiliar
with you can go down and
87

87

00:05:46.150  -->  00:05:50.040
see here again on the Wikipedia page
the practical estimation of bandwidth.
88

88

00:05:50.040  -->  00:05:51.800
Now we're just going to
be using this equation.
89

89

00:05:51.800  -->  00:05:55.960
So this equation is just
the bandwidth is equal to four times
90

90

00:05:55.960  -->  00:06:00.670
your standard deviation to
the power of five over 3 times n,
91

91

00:06:00.670  -->  00:06:03.830
which n is doing a number
of points in your data set.
92

92

00:06:03.830  -->  00:06:06.070
And all this to the power of 1 over 5,
or 0.2.
93

93

00:06:06.070  -->  00:06:13.291
Okay, so let's put that
estimation equation into Python.
94

94

00:06:15.979  -->  00:06:17.046
So I'm gonna call it the bandwidth.
95

95

00:06:20.331  -->  00:06:25.850
And first we have that four times
the standard deviation of our dataset.
96

96

00:06:25.850  -->  00:06:31.245
So four times and we can get standard
deviation just by calling std on
97

97

00:06:31.245  -->  00:06:37.460
that dataset and then all of that was,
well the standard deviation
98

98

00:06:37.460  -->  00:06:42.500
to the power of five, so we have that
part, and then the denominator of that
99

99

00:06:42.500  -->  00:06:47.690
estimation equation was three times
the number of points in the dataset.
100

100

00:06:47.690  -->  00:06:49.490
So to get the number of
points in the data set,
101

101

00:06:49.490  -->  00:06:52.440
I can merely just check
the length of the dataset.
102

102

00:06:52.440  -->  00:06:56.590
So I can use len on the dataset.
103

103

00:06:56.590  -->  00:07:00.920
And remember that whole thing was
through the power of one over five.
104

104

00:07:03.010  -->  00:07:06.964
Which is the same as to the power of 0.2.
105

105

00:07:06.964  -->  00:07:08.328
Great.
106

106

00:07:08.328  -->  00:07:12.570
So, next we're gonna create a list for
those kernels.
107

107

00:07:12.570  -->  00:07:15.480
Remember, we're gonna have
a kernel density estimation plot,
108

108

00:07:15.480  -->  00:07:18.430
so we're gonna set a little Gaussian
plot for each of those kernels.
109

109

00:07:19.970  -->  00:07:21.250
So I'm going to make a kernel list.
110

110

00:07:21.250  -->  00:07:25.720
And I'll set it as an empty list.
111

111

00:07:25.720  -->  00:07:30.740
And now I'm going to make a little for
loop to build up that list.
112

112

00:07:30.740  -->  00:07:36.710
For every data point in my dataset.
113

113

00:07:38.810  -->  00:07:40.820
I'm gonna do two main things.
114

114

00:07:40.820  -->  00:07:46.750
I'm gonna create a kernel for
each point and
115

115

00:07:46.750  -->  00:07:51.910
append it to the kernel_list.
116

116

00:07:51.910  -->  00:07:52.710
So how do I do that?
117

117

00:07:54.120  -->  00:07:56.954
Well, I'll create an object called kernel,
and
118

118

00:07:56.954  -->  00:07:59.723
I'm gonna use the SyPy
stats library to do that.
119

119

00:07:59.723  -->  00:08:05.654
So I'm gonna say stats.norm,
cuz it's gonna be normally distributed.
120

120

00:08:05.654  -->  00:08:10.453
I'm gonna take it on that data,
gonna make a normal continuous.
121

121

00:08:10.453  -->  00:08:12.640
Random variable distribution.
122

122

00:08:12.640  -->  00:08:17.648
So it's gonna take that data point,
so basically that singular tick,
123

123

00:08:17.648  -->  00:08:22.487
and it's gonna make a normal
distribution curve using the bandwidth
124

124

00:08:22.487  -->  00:08:25.172
estimation that we just figured out.
125

125

00:08:25.172  -->  00:08:30.396
And then the kernel will
be the probability density
126

126

00:08:30.396  -->  00:08:37.694
function method called off using
the x-axis that we created earlier.
127

127

00:08:37.694  -->  00:08:42.689
And then once we have that kernel,
let's go ahead and
128

128

00:08:42.689  -->  00:08:45.471
append it to the list we made.
129

129

00:08:49.161  -->  00:08:51.838
All right, so that's the first part.
130

130

00:08:51.838  -->  00:08:58.057
Create a kernel for each point and
then append it to the kernel list.
131

131

00:08:58.057  -->  00:09:01.961
And then let's go ahead and
set up a scale for plotting.
132

132

00:09:07.806  -->  00:09:10.109
So, I'm gonna set the scale.
133

133

00:09:10.109  -->  00:09:15.135
I'm gonna say every kernel,
basically every Gaussian basis plot on
134

134

00:09:15.135  -->  00:09:20.500
each of those kernels,
which we're labeling now as just kernel.
135

135

00:09:20.500  -->  00:09:25.890
I'm gonna set it to be
divided by the max of
136

136

00:09:25.890  -->  00:09:32.520
the kernel value, and
then I'm gonna re-size everything.
137

137

00:09:33.995  -->  00:09:38.008
By forty percent just so
it reaches a max of 0.4.
138

138

00:09:38.008  -->  00:09:39.512
And, then, we'll plot everything.
139

139

00:09:39.512  -->  00:09:46.754
We'll say plt.plot along the x-axis.
140

140

00:09:46.754  -->  00:09:49.015
Go ahead and plot that kernel.
141

141

00:09:49.015  -->  00:09:51.074
I'm gonna set the color equal to gray.
142

142

00:09:55.415  -->  00:09:59.820
And I'm gonna make it
a little transparent since
143

143

00:09:59.820  -->  00:10:03.265
remember we have that red plot on top.
144

144

00:10:03.265  -->  00:10:07.086
After all that,
I'm going to just set my y limit axis,
145

145

00:10:07.086  -->  00:10:12.090
like we did earlier,
I'm just gonna set it from zero to one.
146

146

00:10:12.090  -->  00:10:15.130
So before we click enter,
let's make sure we got everything right.
147

147

00:10:15.130  -->  00:10:19.820
We're gonna create a rugplot,
set our x minimum and maximum values.
148

148

00:10:19.820  -->  00:10:22.647
Then using linspace, create an x axis.
149

149

00:10:22.647  -->  00:10:25.370
Value is a 100 linearly spaced
points between the min and
150

150

00:10:25.370  -->  00:10:30.670
the max, using the practical
estimation of the bandwidth,
151

151

00:10:30.670  -->  00:10:36.440
a Gaussian approximation, or the normal
distribution approximation basically.
152

152

00:10:36.440  -->  00:10:40.440
We created our bandwidth,
created an empty kernel list, and then for
153

153

00:10:40.440  -->  00:10:46.490
every data point in the data set,
we created and plotted that kernel.
154

154

00:10:46.490  -->  00:10:48.270
All right, so
let's check if this worked out.
155

155

00:10:50.870  -->  00:10:51.980
And there you have it.
156

156

00:10:51.980  -->  00:10:56.570
So, you can see the ticks in color here,
and
157

157

00:10:56.570  -->  00:11:00.630
you can see the Gaussian basis
function plot for all of them.
158

158

00:11:00.630  -->  00:11:05.710
So that's pretty cool, and
you notice they all peak at 0.4.
159

159

00:11:05.710  -->  00:11:08.170
Since that's what we set it to be.
160

160

00:11:08.170  -->  00:11:13.403
So we normalized everything by the max and
then we set it to go to .4.
161

161

00:11:13.403  -->  00:11:16.180
All right, great.
162

162

00:11:16.180  -->  00:11:20.300
So now that we have that,
to get the kernel density estimation plot,
163

163

00:11:20.300  -->  00:11:22.020
we need to sum all those.
164

164

00:11:22.020  -->  00:11:29.100
So, how we do that,
we can say the sum of kde
165

165

00:11:30.660  -->  00:11:36.930
is equal to using num pi,
np.sum of that kernel list we made.
166

166

00:11:38.850  -->  00:11:42.400
And we'll do it along axis equal to zero.
167

167

00:11:44.980  -->  00:11:46.370
And now we can plot that.
168

168

00:11:46.370  -->  00:11:50.800
So I'm gonna say 'fig' for
'figure' is equal to 'plt.plot' and
169

169

00:11:54.410  -->  00:11:56.659
I'm gonna plot along the x axis.
170

170

00:11:59.400  -->  00:12:03.390
Gonna plot my sum of all
those kernel densities.
171

171

00:12:04.980  -->  00:12:11.710
And then I'll set the color to be equal to
Indian red, like we previously did before.
172

172

00:12:11.710  -->  00:12:16.945
And then I'm going to add a rugplot just
so we can good look at all the ticks.
173

173

00:12:16.945  -->  00:12:20.657
So I'll say rugplot data set.
174

174

00:12:26.601  -->  00:12:31.975
And then plt, let's go ahead and get rid
of the y ticks so there's no confusion,
175

175

00:12:31.975  -->  00:12:36.968
so this will get rid of all tick marks,
by just putting an empty list there.
176

176

00:12:36.968  -->  00:12:40.277
And then we can go ahead and
177

177

00:12:40.277  -->  00:12:44.797
title our plot by saying suptitle.
178

178

00:12:44.797  -->  00:12:51.047
And we'll label this as the sum
of the basis functions.
179

179

00:12:51.047  -->  00:12:56.039
So, we're going to sum up all
those Gaussian basis functions.
180

180

00:12:56.039  -->  00:12:58.482
Alt-enter and what do we get?
181

181

00:12:58.482  -->  00:12:59.410
All right, great.
182

182

00:12:59.410  -->  00:13:02.456
So now, we have the kernel
density estimation plot,
183

183

00:13:02.456  -->  00:13:07.300
by adding up all of these Gaussian
functions for each of the tick marks.
184

184

00:13:07.300  -->  00:13:07.800
Great.
185

185

00:13:08.850  -->  00:13:11.790
So, we did it the long way.
186

186

00:13:11.790  -->  00:13:15.110
We can do this one simple
step using C-Born.
187

187

00:13:15.110  -->  00:13:16.763
This is why C-Born is so awesome.
188

188

00:13:16.763  -->  00:13:21.189
We can use sns.kdeplot, and
189

189

00:13:21.189  -->  00:13:24.912
just input our data set.
190

190

00:13:27.623  -->  00:13:32.856
And there you have it So you can see that
191

191

00:13:32.856  -->  00:13:38.266
Seaborn can to a kernel density
estimation plot just in one simple go.
192

192

00:13:38.266  -->  00:13:45.599
And we can adjust the bandwidth of
the Seaborn KDE plot to make it more or
193

193

00:13:45.599  -->  00:13:50.340
less sensitive to high
frequency data sets.
194

194

00:13:51.510  -->  00:13:53.940
Okay.
So to show you what I'm talking about
195

195

00:13:53.940  -->  00:13:55.170
let's go ahead and make a rugplot.
196

196

00:13:56.400  -->  00:14:01.520
So I'll make another
rugplot using my data set,
197

197

00:14:01.520  -->  00:14:05.240
and this time, I'll set the color equal
to black, so it's really visible.
198

198

00:14:07.220  -->  00:14:09.270
Won't make it transparent, and
199

199

00:14:09.270  -->  00:14:14.770
then I'm gonna plot kernel density
estimation plots for various bandwidths.
200

200

00:14:15.880  -->  00:14:22.168
So I'm gonna say for bw or bandwidth,
201

201

00:14:22.168  -->  00:14:27.867
in the num pi range, np.arange,
202

202

00:14:27.867  -->  00:14:32.583
let's go from a bandwidth of
203

203

00:14:32.583  -->  00:14:37.930
0.5 to 2 in steps of .25.
204

204

00:14:37.930  -->  00:14:43.730
So for each of those bandwidths,
I'll make a kernel density estimation
205

205

00:14:43.730  -->  00:14:51.260
plot by passing sns.kdplot on my dataset.
206

206

00:14:51.260  -->  00:14:54.442
The bandwidth argument for
207

207

00:14:54.442  -->  00:14:59.320
that, we can just say it's bw equals bw.
208

208

00:14:59.320  -->  00:15:03.800
I'll set the lw value
to be equal to 1.8 and
209

209

00:15:06.070  -->  00:15:10.320
I'm gonna label each of those plots
210

210

00:15:11.370  -->  00:15:14.600
by their bandwidth value and you'll
see what that looks like in a second.
211

211

00:15:14.600  -->  00:15:17.530
So let's go ahead and plot all of those.
212

212

00:15:18.530  -->  00:15:22.520
So now you can see based on
your bandwidth choice value,
213

213

00:15:24.550  -->  00:15:28.290
what your kernel density
estimation plot would look like.
214

214

00:15:28.290  -->  00:15:31.900
If you specify particular bandwidth.
215

215

00:15:31.900  -->  00:15:34.310
And just running it with
no bandwidth specified
216

216

00:15:35.840  -->  00:15:38.920
Seaborn will automatically get
the bandwidth estimation for you.
217

217

00:15:40.210  -->  00:15:40.710
All right, great.
218

218

00:15:42.170  -->  00:15:46.507
And then we have all our ticks down
at the bottom of that red plot.
219

219

00:15:46.507  -->  00:15:50.709
We can choose different types of kernels.
220

220

00:15:50.709  -->  00:15:57.642
So, for that information you can
go ahead and check out this URL.
221

221

00:16:00.916  -->  00:16:05.159
So this is just a Wikipedia page for
what a kernel is in statistics.
222

222

00:16:05.159  -->  00:16:09.854
So if you're feeling a little fuzzy on
the statistics of what we just did,
223

223

00:16:09.854  -->  00:16:15.025
you can go ahead and check out that, so
let's go ahead and check it out right now.
224

224

00:16:15.025  -->  00:16:21.809
So we can check out, on the Wikipedia
page, the different kernel functions.
225

225

00:16:21.809  -->  00:16:23.174
Here.
226

226

00:16:26.086  -->  00:16:29.900
And so you can use these different
functions in C-Born if you want to.
227

227

00:16:29.900  -->  00:16:32.760
So let's go ahead and
228

228

00:16:34.260  -->  00:16:37.920
see how all these little different
functions work,so we can say.
229

229

00:16:39.660  -->  00:16:43.310
Let's go ahead and
create some kernel options.
230

230

00:16:43.310  -->  00:16:49.570
So I'll make a list
called kernel_options =.
231

231

00:16:49.570  -->  00:16:56.000
So you have a bunch of different
kernel options like cosine or
232

232

00:16:56.000  -->  00:16:59.980
EPA, let's make a Gaussian.
233

233

00:17:04.310  -->  00:17:05.430
Whoops.
234

234

00:17:05.430  -->  00:17:09.316
And you can check out the C-born
documentation or just the kernel Wikipedia
235

235

00:17:09.316  -->  00:17:13.505
page if you wanna know more about each
particular kernel option, but, if you're
236

236

00:17:13.505  -->  00:17:17.838
interested in this you're probably already
a pretty advanced user of statistics.
237

237

00:17:22.062  -->  00:17:30.001
And then for
kern in kernel option we will plot,
238

238

00:17:30.001  -->  00:17:34.172
whoops, SNS.KD plot.
239

239

00:17:36.580  -->  00:17:40.444
We'll plot that data set and
240

240

00:17:40.444  -->  00:17:45.130
I will set the kernel type to kern.
241

241

00:17:45.130  -->  00:17:46.720
So, for each kern and
all of these options,
242

242

00:17:46.720  -->  00:17:50.730
we're gonna do all of these and
then I will label it.
243

243

00:17:50.730  -->  00:17:55.055
The current type, so let's go ahead and
see what C-Born can do.
244

244

00:17:55.055  -->  00:18:00.450
And there you go, so you get a bunch of
245

245

00:18:00.450  -->  00:18:05.659
different kernel density estimation plots,
based on the kernel type you want to use.
246

246

00:18:06.720  -->  00:18:11.110
Now you can go ahead and read more about
it, either in the documentation or
247

247

00:18:11.110  -->  00:18:16.390
just in the Wikipedia page for
what kernel functions look like.
248

248

00:18:16.390  -->  00:18:22.060
All right, another quick thing we
could've done is do some shading.
249

249

00:18:23.530  -->  00:18:26.390
So if you wanted to shade all
these to see where they overlap,
250

250

00:18:26.390  -->  00:18:28.940
you could've et shade equal to true here.
251

251

00:18:28.940  -->  00:18:29.670
Let's do it again.
252

252

00:18:30.730  -->  00:18:33.219
And there you go,
you have shading on all of them.
253

253

00:18:33.219  -->  00:18:36.150
So that's something you can do.
254

254

00:18:36.150  -->  00:18:41.040
If for some reason you wanted
to plot on the vertical axis, so
255

255

00:18:41.040  -->  00:18:42.890
the y-axis, you can do that as well.
256

256

00:18:44.240  -->  00:18:46.050
I'll show you an example.
257

257

00:18:46.050  -->  00:18:50.100
You can say kd plot data set and
just set vertical
258

258

00:18:51.540  -->  00:18:56.300
equal to true and
you'll be plotting on the vertical axis.
259

259

00:18:56.300  -->  00:18:57.380
Okay, awesome.
260

260

00:18:58.520  -->  00:19:01.040
Finally, we can use a kd plot
261

261

00:19:01.040  -->  00:19:06.090
also to create a cumulative distribution
function or a CDF of the data.
262

262

00:19:06.090  -->  00:19:10.520
If you're feeling a little fuzzy on
that one as far as statistics goes,
263

263

00:19:10.520  -->  00:19:15.460
you can just check out this URL or check
out the link of the IPython notebook.
264

264

00:19:16.870  -->  00:19:22.835
And I'll go this link right now so
you can check out the CDF.
265

265

00:19:22.835  -->  00:19:26.592
So it just describes the probability that
266

266

00:19:26.592  -->  00:19:31.540
the variable X is gonna be
found in that distribution.
267

267

00:19:31.540  -->  00:19:34.398
So if you're familiar with statistics
you're probably familiar with CDF already.
268

268

00:19:38.494  -->  00:19:44.720
So I wanted to plot that,
I could just say sns.kdplot,
269

269

00:19:44.720  -->  00:19:49.620
plot your data set, and
if you want the CDF,
270

270

00:19:49.620  -->  00:19:56.388
you can just set the term,
the argument cumulative = true.
271

271

00:19:58.720  -->  00:20:00.742
And there you have your CDF.
272

272

00:20:00.742  -->  00:20:01.970
All right, great.
273

273

00:20:03.660  -->  00:20:06.920
You can also do kd plots for
274

274

00:20:06.920  -->  00:20:11.080
multidimensional data, so that would
be a multivariate density estimation.
275

275

00:20:11.080  -->  00:20:18.300
All right, so in order to check that out
we are going to create a new data set.
276

276

00:20:18.300  -->  00:20:21.900
So let's go ahead and make the mean or
the sensor of the data.
277

277

00:20:22.990  -->  00:20:26.221
So I"m gonna make
an object called mean and
278

278

00:20:26.221  -->  00:20:31.623
I'm gonna set the mean at 0, 0, so
the x and the y mean on the data set.
279

279

00:20:33.969  -->  00:20:37.041
I'll set the covariants as well.
280

280

00:20:40.369  -->  00:20:45.474
I'll just set two pairs, I'll go 1,
281

281

00:20:45.474  -->  00:20:50.908
0 and 0 to 100 as those covariances.
282

282

00:20:50.908  -->  00:20:53.510
And now, let's go ahead and
create a data set using NumPy.
283

283

00:20:56.667  -->  00:21:01.121
Let's go ahead and call it dataset2 and
284

284

00:21:01.121  -->  00:21:04.658
we're gonna say np.random and
285

285

00:21:04.658  -->  00:21:09.899
then we're gonna call
a multivariate normal,
286

286

00:21:09.899  -->  00:21:13.053
so multi-variate normal.
287

287

00:21:13.053  -->  00:21:18.620
And here we can pass the mean,
the co-variants and the size we want.
288

288

00:21:18.620  -->  00:21:22.699
So this is gonna draw random samples from
a multi-variate normal distribution.
289

289

00:21:24.580  -->  00:21:29.700
So, let's go ahead and pass our mean,
our covariance values and
290

290

00:21:29.700  -->  00:21:33.790
the number of points we want,
let's just make it 1000.
291

291

00:21:33.790  -->  00:21:37.580
And now, it's been awhile since
we've used pandas which we
292

292

00:21:37.580  -->  00:21:39.190
took a whole bunch of
sections to learn about.
293

293

00:21:39.190  -->  00:21:41.230
So, we can bring that back.
294

294

00:21:41.230  -->  00:21:44.850
Let's go ahead and
put that data into a data frame.
295

295

00:21:46.080  -->  00:21:52.340
So, we'll say pd.dataframe.
296

296

00:21:52.340  -->  00:21:57.090
I'm using pd because I don't think we
imported series and data frame separately.
297

297

00:21:59.130  -->  00:22:03.722
So, I'll say dataset 2,
298

298

00:22:03.722  -->  00:22:10.311
columns = x y, and I'm going ahead and
299

299

00:22:10.311  -->  00:22:14.715
plot this using kdeplot.
300

300

00:22:17.385  -->  00:22:20.906
And, so notice the really, really great
thing here before I click enter you're
301

301

00:22:20.906  -->  00:22:24.935
using C-Born in perfect sync
with a pandas DataFrame.
302

302

00:22:26.530  -->  00:22:31.430
Let's go ahead and see what happens,
and there you have your multi variance
303

303

00:22:31.430  -->  00:22:35.790
density estimation, using the kdeplot and
a straight up pandas DataFrame.
304

304

00:22:37.300  -->  00:22:41.640
If you wanted to, you could have
also passed two vectors separately.
305

305

00:22:41.640  -->  00:22:45.620
So you could have said sns.kdeplot and
306

306

00:22:47.830  -->  00:22:51.140
we could have just passed the X and
the Y vectors.
307

307

00:22:51.140  -->  00:22:56.617
So I could have said dframe.x, dframe.y.
308

308

00:22:56.617  -->  00:22:58.503
So instead of just passing
the whole data frame,
309

309

00:22:58.503  -->  00:23:00.031
pass through two vectors separately.
310

310

00:23:02.418  -->  00:23:04.970
Go ahead and see that and
you'll get the same thing.
311

311

00:23:06.000  -->  00:23:07.799
Another option you can
do is you can shade.
312

312

00:23:08.990  -->  00:23:12.460
You can do that just by passing the shade
argument, set it equal to true.
313

313

00:23:14.980  -->  00:23:19.320
And now you have it shaded instead
of those contour lines, and
314

314

00:23:19.320  -->  00:23:23.140
you can again specify bandwidths.
315

315

00:23:23.140  -->  00:23:27.770
So just like we did in the other
316

316

00:23:27.770  -->  00:23:32.410
plots up here, as far as specifying
the bandwidths, you can do the same thing.
317

317

00:23:33.430  -->  00:23:34.980
So scroll back down.
318

318

00:23:34.980  -->  00:23:38.460
You can say kdeplot, plot your dframe, and
319

319

00:23:38.460  -->  00:23:43.542
again set bandwidth, bw,
equal to whatever value you want, so
320

320

00:23:43.542  -->  00:23:49.588
I'll make it some ridiculous value once
just so we can see the heavy change.
321

321

00:23:49.588  -->  00:23:55.836
And there you can see the bandwidth
change on your multi-variable kdeplot or
322

322

00:23:55.836  -->  00:24:01.314
if you just wanna use the silverman
estimation that we used before,
323

323

00:24:01.314  -->  00:24:04.310
you can actually call it by a string.
324

324

00:24:05.350  -->  00:24:12.570
So you can say kdeplot,
call your DataFrame from pandas,
325

325

00:24:12.570  -->  00:24:18.450
and then set your bandwidth equal
to the string silverman and
326

326

00:24:18.450  -->  00:24:23.370
that will run your silverman
estimation bandwidth, or
327

327

00:24:23.370  -->  00:24:26.150
silverman's rule of
thumb it's also called.
328

328

00:24:26.150  -->  00:24:30.010
And there you have that bandwidth kay.
329

329

00:24:30.010  -->  00:24:33.690
And then lastly,
we can also create a KDE joint plot.
330

330

00:24:33.690  -->  00:24:39.400
So similar to the hex bin
plots we saw before I can
331

331

00:24:39.400  -->  00:24:44.590
say sns.jointplot and let's go ahead and
332

332

00:24:44.590  -->  00:24:49.660
we can label it X and Y for the axis.
333

333

00:24:50.766  -->  00:24:56.720
Pass your pandas DataFrame and then if you
want to a kernel density estimation plot,
334

334

00:24:56.720  -->  00:24:59.950
you can label it as
past jerryment kind and
335

335

00:24:59.950  -->  00:25:03.820
then pass kde as the kind
of joint plot you want.
336

336

00:25:03.820  -->  00:25:08.602
So this is the same as the joint plots we
did before except know we are specifying
337

337

00:25:08.602  -->  00:25:11.729
it, that it's a kernel
density estimation plot.
338

338

00:25:11.729  -->  00:25:13.818
Let's go ahead and do that.
339

339

00:25:13.818  -->  00:25:15.224
And there you have it,
340

340

00:25:15.224  -->  00:25:18.852
your two multivariate kernel
density estimation plots.
341

341

00:25:18.852  -->  00:25:23.510
All right, so
we just went over a ton of stuff.
342

342

00:25:23.510  -->  00:25:26.130
Go ahead and look back,
make sure you understood all of it.
343

343

00:25:28.290  -->  00:25:31.700
This particular lecture was really
dependent on your understanding of
344

344

00:25:31.700  -->  00:25:36.430
certain statistics, so
go back And look up on Wikipedia,
345

345

00:25:36.430  -->  00:25:39.610
those Wikipedia links,
if you're feeling a little fuzzy or
346

346

00:25:39.610  -->  00:25:42.880
don't remember all of those or
just need to learn them, in general.
347

347

00:25:42.880  -->  00:25:43.960
And then you can come back and
348

348

00:25:43.960  -->  00:25:47.120
then really understand the different
plotting techniques we just did.
349

349

00:25:48.120  -->  00:25:51.400
Okay, so
that was kernel density estimation plots.
350

350

00:25:51.400  -->  00:25:56.150
Up next, we're gonna learn about
combining plot styles, using this plot.
351

351

00:25:56.150  -->  00:25:57.380
Okay, I'll see you there.
