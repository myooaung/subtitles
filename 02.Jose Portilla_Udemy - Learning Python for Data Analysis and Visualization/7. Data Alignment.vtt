WEBVTT
1
1

00:00:01.720  -->  00:00:03.770
Hey, guys.
Welcome to lecture 20.
2

2

00:00:03.770  -->  00:00:08.713
So, what we're gonna learn
about here is data alignment.
3

3

00:00:13.292  -->  00:00:14.168
All right, so
4

4

00:00:14.168  -->  00:00:19.580
we're gonna learn about arithmetic between
data frames with different index values.
5

5

00:00:20.730  -->  00:00:22.640
Start off as always.
6

6

00:00:22.640  -->  00:00:23.460
Import numpy as np.
7

7

00:00:23.460  -->  00:00:27.728
Import pandas as pd.
8

8

00:00:27.728  -->  00:00:33.317
And then from pandas import
9

9

00:00:33.317  -->  00:00:38.183
Series and DataFrame.
10

10

00:00:38.183  -->  00:00:39.940
Okay.
11

11

00:00:39.940  -->  00:00:43.097
So let's go ahead and
start by making two series.
12

12

00:00:43.097  -->  00:00:49.217
First one will just pass a list, 0, 1, 2.
13

13

00:00:49.217  -->  00:00:53.357
And then we'll make the index.
14

14

00:00:53.357  -->  00:00:54.190
letters.
15

15

00:00:54.190  -->  00:00:55.169
Oops.
16

16

00:00:55.169  -->  00:00:57.748
We'll have to pass a list of letters for
brackets.
17

17

00:00:57.748  -->  00:00:59.048
There we go.
18

18

00:00:59.048  -->  00:01:02.128
A, B, C.
19

19

00:01:05.129  -->  00:01:08.429
And let's go ahead and show that.
20

20

00:01:08.429  -->  00:01:11.330
All right, so we have 0,
1, 2, index A, B, C.
21

21

00:01:11.330  -->  00:01:15.260
Let's go ahead and make the second one.
22

22

00:01:17.910  -->  00:01:22.960
We'll call series and
we'll call 3, 4, 5, 6.
23

23

00:01:22.960  -->  00:01:28.400
So it's going to be one longer than
that the first series we made,
24

24

00:01:29.570  -->  00:01:34.690
and the index, we'll pass A, B, C, D.
25

25

00:01:38.920  -->  00:01:43.021
Now let's go ahead and show that,
just to see what it looks like.
26

26

00:01:43.021  -->  00:01:45.790
All right 3, 4, 5, 6, A, B, C, D.
27

27

00:01:45.790  -->  00:01:46.290
Awesome.
28

28

00:01:47.970  -->  00:01:51.720
So what's going to happen
when we add these together?
29

29

00:01:51.720  -->  00:01:54.570
Let's go ahead and find out.
30

30

00:01:54.570  -->  00:01:56.718
So ser1 plus ser2.
31

31

00:01:59.998  -->  00:02:02.810
So let's take a look at what happened.
32

32

00:02:04.090  -->  00:02:07.921
Pandas added up the values
where the index matched.
33

33

00:02:07.921  -->  00:02:12.735
So A in the first series was 0,
A in the second series was 3.
34

34

00:02:12.735  -->  00:02:14.680
So 0 plus 3 is 3.
35

35

00:02:14.680  -->  00:02:17.890
What it wasn't able to do is add where
36

36

00:02:19.210  -->  00:02:22.700
series one didn't have
an index value matching.
37

37

00:02:22.700  -->  00:02:28.230
Series two had a value of 6 at D, but
since series one didn't have a D index,
38

38

00:02:28.230  -->  00:02:30.833
it's gonna replace it with a null.
39

39

00:02:33.413  -->  00:02:36.363
So the null values will be
added automatically if you
40

40

00:02:36.363  -->  00:02:38.920
don't have a matching
index in both series.
41

41

00:02:41.030  -->  00:02:44.910
So let's see what's going to happen with
data frames if we try something similar.
42

42

00:02:47.050  -->  00:02:49.798
So I'll make D frame one
my first data frame.
43

43

00:02:56.018  -->  00:02:59.550
And we'll pass np.arrange.
44

44

00:02:59.550  -->  00:03:02.275
We'll have it be four long and
45

45

00:03:02.275  -->  00:03:07.183
we're going to reshape this
into a two by two matrix.
46

46

00:03:12.343  -->  00:03:15.332
We'll make columns.
47

47

00:03:15.332  -->  00:03:20.650
An interesting way to do
this is we can call list,
48

48

00:03:20.650  -->  00:03:26.899
which is a python function and
we can put in AB as a string.
49

49

00:03:26.899  -->  00:03:31.225
And what list is gonna do is it's
gonna make a list out of A and B, so
50

50

00:03:31.225  -->  00:03:33.690
the columns are just gonna be A and B.
51

51

00:03:33.690  -->  00:03:40.530
This is just a little trick we can
use in the future to save some time.
52

52

00:03:41.880  -->  00:03:46.319
And then index,
I'll just use cities again.
53

53

00:03:50.360  -->  00:03:52.060
Oops, LA.
54

54

00:03:52.060  -->  00:03:53.781
All right.
55

55

00:03:53.781  -->  00:04:00.861
And then let's go ahead and take a look
at what that data frame looks like.
56

56

00:04:00.861  -->  00:04:01.570
Whoops.
57

57

00:04:01.570  -->  00:04:07.270
So I accidentally forgot a non-keyword
argument after a keyword,
58

58

00:04:07.270  -->  00:04:09.971
and that is the equal sign here.
59

59

00:04:09.971  -->  00:04:11.910
So we forgot to say index equals.
60

60

00:04:11.910  -->  00:04:14.650
Now let's see if it works, and it does.
61

61

00:04:14.650  -->  00:04:15.150
Awesome.
62

62

00:04:16.680  -->  00:04:19.550
So I have my data frame, 0, 1, 2, 3.
63

63

00:04:19.550  -->  00:04:22.580
This got reshaped to a two by two matrix.
64

64

00:04:24.175  -->  00:04:28.950
And the cities are the index and
the letters are the column values.
65

65

00:04:31.850  -->  00:04:34.710
Let's make a second data
frame in a similar fashion.
66

66

00:04:37.680  -->  00:04:43.770
In this case,
I'm going to make a nine point array,
67

67

00:04:43.770  -->  00:04:48.430
and reshape this into, you've probably
guessed it already, a three by three.
68

68

00:04:51.460  -->  00:04:52.530
We'll have the columns.
69

69

00:04:52.530  -->  00:04:54.690
We'll use our little list
function trick again.
70

70

00:04:55.960  -->  00:05:00.870
And in this case, we're going to need two,
so I'm going to say ADC.
71

71

00:05:00.870  -->  00:05:04.610
I'm skipping B on purpose so
we can see its effects later.
72

72

00:05:07.340  -->  00:05:13.235
And then index will equal NYC,
73

73

00:05:13.235  -->  00:05:22.080
SF, and LA,
since that was in the last one.
74

74

00:05:22.080  -->  00:05:24.390
And notice something I was
accidentally doing here.
75

75

00:05:24.390  -->  00:05:26.650
I accidentally dragged this parentheses.
76

76

00:05:26.650  -->  00:05:30.050
You can see the IPython will highlight
which one it's matched up to.
77

77

00:05:30.050  -->  00:05:35.655
So I'm going to delete it here and
bring it back down to reshape.
78

78

00:05:35.655  -->  00:05:37.015
Awesome.
79

79

00:05:37.015  -->  00:05:39.600
And then let's go ahead and
see what that looks like.
80

80

00:05:40.790  -->  00:05:45.370
Cool, so now we have our three by three A,
D, C column deep data frame.
81

81

00:05:46.640  -->  00:05:53.689
So what happens when you
add dframe1 To dframe2?
82

82

00:05:53.689  -->  00:05:56.539
Take a moment, pause the video.
83

83

00:05:56.539  -->  00:06:00.730
See if you can guess at
what's gonna happen.
84

84

00:06:00.730  -->  00:06:04.380
Look back and
see what happened to the series and
85

85

00:06:04.380  -->  00:06:06.880
try to think of what's gonna happen when
we add these two data frames together.
86

86

00:06:09.310  -->  00:06:10.170
All right, let's take a look.
87

87

00:06:11.480  -->  00:06:15.110
So the only two that I was
able to successfully add
88

88

00:06:15.110  -->  00:06:19.430
was the A column for
the values LA and NYC.
89

89

00:06:19.430  -->  00:06:24.700
That's because those were the only
two where the row index and
90

90

00:06:24.700  -->  00:06:27.820
the column matched up.
91

91

00:06:28.880  -->  00:06:30.940
The rest of them had null values.
92

92

00:06:30.940  -->  00:06:34.330
So, what if we wanted to
replace the null values?
93

93

00:06:34.330  -->  00:06:35.110
What could we do?
94

94

00:06:37.310  -->  00:06:44.219
Well, we can call our dframe1.
95

95

00:06:44.219  -->  00:06:46.510
Take a quick gander at what it looks like.
96

96

00:06:48.140  -->  00:06:55.310
And then say deframe1, we can use add.
97

97

00:06:55.310  -->  00:06:56.212
So this is a,
98

98

00:06:56.212  -->  00:07:01.230
we can call add to it instead of adding
to it directly with that plus sign.
99

99

00:07:02.440  -->  00:07:03.510
So we'll say add.
100

100

00:07:03.510  -->  00:07:08.800
First thing we're going to do is,
what are we going to add to this deframe?
101

101

00:07:08.800  -->  00:07:10.910
I'm sorry, deframe1.
102

102

00:07:10.910  -->  00:07:15.810
Well, we can add deframe2 to it.
103

103

00:07:16.980  -->  00:07:19.538
And then another argument that
we can pass are the fill values.
104

104

00:07:19.538  -->  00:07:22.621
So I'll put fill_value,
105

105

00:07:22.621  -->  00:07:27.720
you've seen this before in the past, as 0.
106

106

00:07:30.330  -->  00:07:34.080
So what's going to happen now
is something a little different.
107

107

00:07:34.080  -->  00:07:38.937
You can see we only have one null
value now and that was the B for SF.
108

108

00:07:41.930  -->  00:07:44.700
So, if we look at dframe2,
109

109

00:07:44.700  -->  00:07:51.460
I'll just type it out again.
110

110

00:07:51.460  -->  00:07:55.390
For instance, B of LA or
111

111

00:07:55.390  -->  00:08:00.530
LAB was a 3 value in dframe1.
112

112

00:08:00.530  -->  00:08:02.060
And there was not B column here.
113

113

00:08:03.380  -->  00:08:08.030
So previously that would have resulted in
a null, but since we had our fill value be
114

114

00:08:08.030  -->  00:08:15.125
0, it filled in zeros for the data frame,
the second data frames value.
115

115

00:08:15.125  -->  00:08:18.485
So then,
it kept the original dframe1 value.
116

116

00:08:18.485  -->  00:08:25.810
So, BLA was 3 and
now BLA is 3 in this added data frame.
117

117

00:08:25.810  -->  00:08:28.650
So this is going to be a really important
tool if you're gonna be adding different
118

118

00:08:28.650  -->  00:08:31.880
size data frames but don't want to
lose all your data to null values.
119

119

00:08:31.880  -->  00:08:35.290
You can just select fill
values to be zero, and
120

120

00:08:35.290  -->  00:08:40.360
it will use the original values of
the dframe1, unless there is a value.
121

121

00:08:42.990  -->  00:08:47.100
So what about operations between
a series and the data frame?
122

122

00:08:48.460  -->  00:08:51.930
So we see what the second
data frame there looks like.
123

123

00:08:51.930  -->  00:08:56.145
Let's go ahead and
create a new series we'll call it ser3.
124

124

00:08:59.090  -->  00:09:04.812
And we're just gonna make it
from the second dataframe's
125

125

00:09:04.812  -->  00:09:10.530
0th row, and I can do that
just by calling it like that.
126

126

00:09:12.600  -->  00:09:15.590
And let's take a look at
what it actually looks like.
127

127

00:09:15.590  -->  00:09:20.173
So here's dframe2.
128

128

00:09:20.173  -->  00:09:26.430
That was a zero throw so
the NYC row I made a series out of it,
129

129

00:09:26.430  -->  00:09:31.230
0, 1, 2, and
its index are the column names, A, D, C.
130

130

00:09:31.230  -->  00:09:36.550
So, we can use arithmetic on it,
just some operations.
131

131

00:09:36.550  -->  00:09:41.915
So we can say something like dframe2
132

132

00:09:41.915  -->  00:09:47.460
minus that third series we just made.
133

133

00:09:50.200  -->  00:09:55.140
And that will just work
perfectly since there's values
134

134

00:09:56.470  -->  00:09:58.080
for every column in that NYC row.
135

135

00:09:58.080  -->  00:10:02.968
So it's going to subtract
it completely from dframe2.
136

136

00:10:02.968  -->  00:10:06.239
Alright.
137

137

00:10:06.239  -->  00:10:11.980
So up next, we're gonna learn
about sorting and ranking.
138

138

00:10:13.710  -->  00:10:14.230
I'll see you there.
