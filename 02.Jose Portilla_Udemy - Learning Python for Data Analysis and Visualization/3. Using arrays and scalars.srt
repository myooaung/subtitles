1
1

00:00:00,850  -->  00:00:03,780
Hey everybody, welcome to lecture eight.
2

2

00:00:05,370  -->  00:00:13,680
So in this lecture we're gonna be
learning how to use arrays and scalars.
3

3

00:00:15,550  -->  00:00:16,390
Okay.
4

4

00:00:16,390  -->  00:00:21,500
So first off,
we're just gonna import numpy as np.
5

5

00:00:23,910  -->  00:00:30,680
And then something we can do is say,
let's check five divided by two.
6

6

00:00:30,680  -->  00:00:36,320
So in Python version two,
if you were to input this command, 5/2.
7

7

00:00:36,320  -->  00:00:40,680
Notice you just get a whole integer there.
8

8

00:00:40,680  -->  00:00:44,630
You're not going to get
2.5 as it should be.
9

9

00:00:44,630  -->  00:00:51,660
If you clarify it to be a floating point
by saying 5.0, and we run this again.
10

10

00:00:51,660  -->  00:00:54,730
ALT + ENTER then we do
get the true answer.
11

11

00:00:54,730  -->  00:00:56,060
It treats that as a floating point.
12

12

00:00:58,230  -->  00:01:01,560
In order to take care of that
we can import from the future,
13

13

00:01:01,560  -->  00:01:04,710
I know it sounds crazy,
but we can totally do it.
14

14

00:01:04,710  -->  00:01:13,250
So we can save from __future__
we can import division.
15

15

00:01:14,990  -->  00:01:21,660
So if you're running on Python 3.whatever
x, you won't have to worry about this.
16

16

00:01:21,660  -->  00:01:23,710
It's already gonna be standard.
17

17

00:01:23,710  -->  00:01:27,040
But, if you're running on Python 2,
you're gonna have to import
18

18

00:01:27,040  -->  00:01:30,190
in division from the future
to take care of that problem.
19

19

00:01:30,190  -->  00:01:34,900
So now let's go ahead and
see five divided by two and we get 2.5.
20

20

00:01:34,900  -->  00:01:35,980
Excellent.
21

21

00:01:35,980  -->  00:01:41,470
All right, so let's go ahead and create an
array like we've done in the last lecture.
22

22

00:01:41,470  -->  00:01:45,120
We can say we're gonna
call this array arr1 and
23

23

00:01:46,800  -->  00:01:52,510
I'm gonna say np.array.
24

24

00:01:52,510  -->  00:01:54,340
And like we learned in the last lecture,
25

25

00:01:54,340  -->  00:01:57,060
we can do it with a list
of multiple lists.
26

26

00:01:57,060  -->  00:01:58,610
So I'm gonna do just that.
27

27

00:01:58,610  -->  00:01:59,860
I'm gonna say 1, 2, 3, 4.
28

28

00:01:59,860  -->  00:02:04,680
That's be the first list that I input,
and then the second list that
29

29

00:02:05,890  -->  00:02:12,320
I input will be 8, 9, 10, 11.
30

30

00:02:12,320  -->  00:02:13,600
Okay.
31

31

00:02:13,600  -->  00:02:14,710
So now we got that.
32

32

00:02:14,710  -->  00:02:17,140
Let's go ahead and see what that
multi-dimensional array looks like.
33

33

00:02:18,260  -->  00:02:20,220
So we have a two by four here, excellent.
34

34

00:02:22,080  -->  00:02:24,390
So what can we do with that?
35

35

00:02:24,390  -->  00:02:26,640
We can try multiplying arrays.
36

36

00:02:27,700  -->  00:02:30,640
So in this case,
we can say array 1 times array, oh.
37

37

00:02:33,040  -->  00:02:34,480
Array 1 times array 1, excuse me.
38

38

00:02:36,700  -->  00:02:38,160
So what do we get here?
39

39

00:02:38,160  -->  00:02:43,984
So if you do this kind of command it's
going to multiply every value in the same
40

40

00:02:43,984  -->  00:02:48,210
spot of one array by the value of
the other one in the same spot.
41

41

00:02:48,210  -->  00:02:50,720
So for instance, one times one is one.
42

42

00:02:50,720  -->  00:02:52,040
Two times two is four.
43

43

00:02:52,040  -->  00:02:54,190
Nine times nine is 81,
et cetera, et cetera.
44

44

00:02:54,190  -->  00:02:58,830
So you can do some scalar
operations there in a sense.
45

45

00:03:00,050  -->  00:03:03,967
You can also do subtraction so
46

46

00:03:03,967  -->  00:03:08,250
we can say array 1 minus r1.
47

47

00:03:08,250  -->  00:03:08,870
There we go.
48

48

00:03:10,370  -->  00:03:16,751
And you'll get a zero, which makes sense
because it's 1-1, 2-2, etcetera, etcetera.
49

49

00:03:16,751  -->  00:03:22,090
And then you can do arithmetic
operations with scalers on the array.
50

50

00:03:22,090  -->  00:03:25,510
So, for instance, if I wanted to,
51

51

00:03:25,510  -->  00:03:30,920
say one divided by every
value in that array.
52

52

00:03:30,920  -->  00:03:35,330
This would be the same thing as saying
every value in the array to power of -1.
53

53

00:03:35,330  -->  00:03:37,530
So, creating it as
the reciprocal of a fraction.
54

54

00:03:37,530  -->  00:03:38,930
There we go.
55

55

00:03:38,930  -->  00:03:40,240
And, that's what we got.
56

56

00:03:41,330  -->  00:03:43,180
So, if we look at the original array.
57

57

00:03:44,680  -->  00:03:46,910
One divided by one should be one.
58

58

00:03:48,090  -->  00:03:50,880
And then we say one divided
by two should be 0.5.
59

59

00:03:50,880  -->  00:03:56,330
And if you look at some other values here,
one divided by ten should be 0.1.
60

60

00:03:56,330  -->  00:03:58,770
So that makes sense,
the same as one over ten.
61

61

00:03:59,950  -->  00:04:02,060
So you can do that as well.
62

62

00:04:02,060  -->  00:04:05,839
And then lastly you can also
do exponential operations.
63

63

00:04:06,890  -->  00:04:12,020
So you could say that array
to the power of three.
64

64

00:04:12,020  -->  00:04:16,510
So, every element in that array to the
power of three, and that's what you get.
65

65

00:04:16,510  -->  00:04:19,120
So, one to the power of three is just one,
66

66

00:04:19,120  -->  00:04:21,528
two to the power of three is,
et cetera, et cetera.
67

67

00:04:21,528  -->  00:04:26,710
So that's how you can do some
mathematical operations on arrays and
68

68

00:04:27,920  -->  00:04:31,310
also arithmetic operations using scalars.
69

69

00:04:31,310  -->  00:04:34,440
Okay, so we'll be using
these throughout the course.
70

70

00:04:34,440  -->  00:04:37,740
Go ahead and do an overview,
make sure you understand it.
71

71

00:04:37,740  -->  00:04:40,500
Otherwise I will see you in lecture nine.
72

72

00:04:40,500  -->  00:04:41,000
See you there.
