WEBVTT
1
1

00:00:00.960  -->  00:00:04.840
Hey guys, welcome to Lecture 40.
2

2

00:00:04.840  -->  00:00:07.756
And in this Lecture,
we'll be learning about outliers.
3

3

00:00:11.674  -->  00:00:15.500
Okay, so, as always,
we'll import the usual.
4

4

00:00:15.500  -->  00:00:18.640
I'm just gonna start copying and
pasting since we're doing this so often.
5

5

00:00:19.790  -->  00:00:20.900
Okay.
So you got numpy as np,
6

6

00:00:20.900  -->  00:00:23.200
panda as pd, Series and DataFrame.
7

7

00:00:24.220  -->  00:00:27.530
So we're gonna see how we can
find outliers in a data set.
8

8

00:00:27.530  -->  00:00:33.150
So in order to do that,
we're gonna use the NumPy generator.
9

9

00:00:33.150  -->  00:00:36.772
So let's just say np.random, and
10

10

00:00:36.772  -->  00:00:42.096
we'll use that seed, let's just say 12345.
11

11

00:00:46.574  -->  00:00:51.873
And so
we've seeded our random generator, and
12

12

00:00:51.873  -->  00:00:58.930
now let's actually use random,
DataFrame(np.random).
13

13

00:00:58.930  -->  00:01:02.510
And I'm just gonna use randn.
14

14

00:01:02.510  -->  00:01:07.870
And we'll say 1000 and 4 as your inputs.
15

15

00:01:09.850  -->  00:01:11.390
So now we have our dataframe.
16

16

00:01:11.390  -->  00:01:16.557
Let's go ahead and check a preview of it,
so we'll just see the first few rows.
17

17

00:01:19.199  -->  00:01:25.330
Okay, and then let's go ahead and
we can use tail to see the last few rows.
18

18

00:01:25.330  -->  00:01:30.179
All right, so we've got 1,000 rows and
then four columns,
19

19

00:01:30.179  -->  00:01:35.070
index 0 through 3 and
index 0 through 999 on the rows.
20

20

00:01:35.070  -->  00:01:35.570
Okay.
21

21

00:01:36.600  -->  00:01:37.930
So we got all our information.
22

22

00:01:37.930  -->  00:01:39.360
Let's go ahead and just describe the data.
23

23

00:01:40.450  -->  00:01:44.905
And if you remember from our
describe summary statistics lecture,
24

24

00:01:44.905  -->  00:01:49.063
all you gotta do is say .describe_method.
25

25

00:01:49.063  -->  00:01:52.925
And so then we have the mean, the standard
deviation, the min, the max values, and
26

26

00:01:52.925  -->  00:01:54.275
also the counts for each column.
27

27

00:01:56.560  -->  00:01:59.830
Let's just go ahead and
select that first column.
28

28

00:01:59.830  -->  00:02:04.100
So I'm gonna make an object called col,
C-O-L, and
29

29

00:02:04.100  -->  00:02:09.760
then I'll say it's dframe[0] and
30

30

00:02:09.760  -->  00:02:14.810
then let's go ahead and look at col.
31

31

00:02:15.850  -->  00:02:16.350
Okay.
32

32

00:02:17.890  -->  00:02:21.860
So now I have the first four values in
that column, five values, excuse me.
33

33

00:02:24.030  -->  00:02:27.140
So now we can check which values
in the column are greater than 3.
34

34

00:02:27.140  -->  00:02:30.830
So, for instance, I'll call column, and
35

35

00:02:30.830  -->  00:02:32.980
then as we've seen before,
we can ask logic.
36

36

00:02:32.980  -->  00:02:38.100
So I'm gonna say, np.abs, so
it's gonna be absolute value.
37

37

00:02:40.130  -->  00:02:45.440
(col)>3.
38

38

00:02:45.440  -->  00:02:49.370
Okay, so what I'm asking here is show me
39

39

00:02:49.370  -->  00:02:54.450
column where the absolute value of
the column is greater than three.
40

40

00:02:54.450  -->  00:02:55.500
So let's go ahead and check that.
41

41

00:02:57.460  -->  00:03:00.419
Okay, so it looks like I got two of those.
42

42

00:03:00.419  -->  00:03:06.779
So I have row 523 and row 900.
43

43

00:03:06.779  -->  00:03:11.617
So those are both rows where
the absolute value of the row in
44

44

00:03:11.617  -->  00:03:14.200
column 0 was greater than 3.
45

45

00:03:14.200  -->  00:03:15.240
So that makes sense.
46

46

00:03:17.040  -->  00:03:19.520
So we know now in column
0 the rows 523 and
47

47

00:03:19.520  -->  00:03:24.020
900 have values with
absolute greater than 3.
48

48

00:03:24.020  -->  00:03:26.020
What about all the columns?
49

49

00:03:26.020  -->  00:03:27.770
So how can I do that?
50

50

00:03:27.770  -->  00:03:32.550
So in a similar fashion I'll now
apply this to the whole dataframe.
51

51

00:03:32.550  -->  00:03:34.940
Whoops, should be square brackets there.
52

52

00:03:36.060  -->  00:03:40.243
And now I'm gonna say
mp.abs of the dframe,
53

53

00:03:40.243  -->  00:03:45.208
the entire dataframe,
where it's greater than 3.
54

54

00:03:48.150  -->  00:03:52.903
And then I'll say any, and
I'll pass the one as the argument, so
55

55

00:03:52.903  -->  00:03:56.550
I'm gonna use the any method
to do the same thing.
56

56

00:04:00.670  -->  00:04:05.673
So, now you see here,
it's returned every row in
57

57

00:04:05.673  -->  00:04:10.439
my data frame where any
value that had a column,
58

58

00:04:10.439  -->  00:04:16.190
that had an absolute value
greater than 3 was returned.
59

59

00:04:16.190  -->  00:04:21.750
So I told my data frame hey, look at the
data frame, and where you see an absolute
60

60

00:04:21.750  -->  00:04:28.390
value that's greater than 3 in any column,
return that row.
61

61

00:04:28.390  -->  00:04:30.280
And so these are the rows, and
we can look at any one of them.
62

62

00:04:30.280  -->  00:04:34.270
So for instance, 3 to 4, that one.
63

63

00:04:34.270  -->  00:04:39.100
Its value in column 2 was 3.26,
so that's greater than 3.
64

64

00:04:40.400  -->  00:04:41.720
Okay.
65

65

00:04:41.720  -->  00:04:45.276
So, we could possibly cap the data at 3.
66

66

00:04:45.276  -->  00:04:47.336
So how will we do that?
67

67

00:04:47.336  -->  00:04:52.978
We could say dframe[np.abs|dframe)],
68

68

00:04:52.978  -->  00:04:59.636
so the absolute value of
dframe again greater than 3.
69

69

00:05:01.856  -->  00:05:06.851
So I'll set all those values and
70

70

00:05:06.851  -->  00:05:13.540
I'm gonna say np.sign(dframe)*3.
71

71

00:05:13.540  -->  00:05:18.010
So what does that mean,
what is this gonna do?
72

72

00:05:18.010  -->  00:05:22.218
Cuz if we look at it again, let's see what
we're actually asking the dataframe to do.
73

73

00:05:22.218  -->  00:05:27.180
So we're saying, anywhere in
the dataframe where the absolute
74

74

00:05:27.180  -->  00:05:32.170
value at that point is greater then 3,
whoops.
75

75

00:05:32.170  -->  00:05:34.820
Where the absolute value at that point
is greater than 3, let's go ahead and
76

76

00:05:34.820  -->  00:05:40.660
set that equal to the sign of that value,
which will either be negative 1 or
77

77

00:05:40.660  -->  00:05:45.470
1, and
then set it equal to that sign times 3.
78

78

00:05:45.470  -->  00:05:52.400
So that means values such as
-3.18 here will turn into -3,
79

79

00:05:52.400  -->  00:05:57.680
and values such as 3.36
here will turn into +3.
80

80

00:05:57.680  -->  00:06:01.790
So we're gonna go ahead and
run that, okay.
81

81

00:06:01.790  -->  00:06:05.640
And now let's go ahead and
look at dframe and describe.
82

82

00:06:05.640  -->  00:06:07.270
Let's see what we get.
83

83

00:06:09.420  -->  00:06:14.340
So if we scroll down to the min and the
max values, you'll notice now every min
84

84

00:06:14.340  -->  00:06:19.750
has been capped at -3, and
every max has been capped at +3.
85

85

00:06:19.750  -->  00:06:23.110
Let's go scroll back up and
see what we got before.
86

86

00:06:24.210  -->  00:06:29.330
So you see we had minimums below -3 and
maximums above 3.
87

87

00:06:29.330  -->  00:06:33.349
So using this any method,
we've been able to cap outliers.
88

88

00:06:35.190  -->  00:06:41.150
So you can use the logic and
the .any in order to do that.
89

89

00:06:42.475  -->  00:06:46.820
Okay, so that's about it as far
as outliers and capping them.
90

90

00:06:46.820  -->  00:06:50.910
Now next we're gonna learn about
permutations, so I'll see you there.
