1
1

00:00:00,940  -->  00:00:02,710
Hey guys.
2

2

00:00:02,710  -->  00:00:04,370
Welcome to lecture 24.
3

3

00:00:04,370  -->  00:00:07,597
This is gonna be on Index Hierarchy.
4

4

00:00:11,056  -->  00:00:15,895
So in this lecture we're going to learn
about Hierarchies and index formation,
5

5

00:00:15,895  -->  00:00:19,950
so you're gonna be able to have
almost like an index of an index, and
6

6

00:00:19,950  -->  00:00:24,405
I'll show you what I mean about
that later in this lecture.
7

7

00:00:24,405  -->  00:00:26,535
So let's go ahead and
start off by just importing the usual.
8

8

00:00:27,990  -->  00:00:33,586
Import numpy as np, from pandas import
9

9

00:00:33,586  -->  00:00:37,810
Series, DataFrame.
10

10

00:00:37,810  -->  00:00:42,385
Import pandas as pd, and
11

11

00:00:42,385  -->  00:00:46,715
then since we're gonna be using random
numbers later as we've done in the past,
12

12

00:00:46,715  -->  00:00:54,620
we're gonna import from numpy.random,
gonna import randn, okay, cool.
13

13

00:00:54,620  -->  00:00:58,190
So, pandas allows you to have
multiple index levels, and
14

14

00:00:58,190  -->  00:01:00,640
I'm gonna show you with
a quick example on a series.
15

15

00:01:00,640  -->  00:01:04,705
So let's go ahead and
make a series called ser,
16

16

00:01:04,705  -->  00:01:09,191
we'll call it Series,
let's construct it using np
17

17

00:01:10,713  -->  00:01:15,739
Or we can construct it using randm Six,
18

18

00:01:15,739  -->  00:01:20,490
just make six random numbers.
19

19

00:01:20,490  -->  00:01:22,080
We'll create an index.
20

20

00:01:25,640  -->  00:01:30,230
And you'll notice that my
index is gonna be two lists.
21

21

00:01:30,230  -->  00:01:32,510
So I'm gonna past two lists in my index.
22

22

00:01:32,510  -->  00:01:37,160
First list I'm just gonna say 1,
1, 1, 2, 2, 2.
23

23

00:01:37,160  -->  00:01:43,103
And then my second list,
I'll have it be letters,
24

24

00:01:43,103  -->  00:01:46,708
so we'll say a, b, c, oops.
25

25

00:01:50,409  -->  00:01:55,910
And then we'll repeat it again, a, b, c.
26

26

00:01:55,910  -->  00:02:00,206
So usually we're only passing one index,
but now since we're gonna learn about
27

27

00:02:00,206  -->  00:02:03,129
index hierarchy,
we'll be doing multiple indexes.
28

28

00:02:03,129  -->  00:02:05,427
Let's go ahead and
see what that looked like.
29

29

00:02:05,427  -->  00:02:06,507
Cool.
30

30

00:02:06,507  -->  00:02:10,195
So what pandas did,
is it created a multiple index level so
31

31

00:02:10,195  -->  00:02:12,690
it matches up the two lists you gave it.
32

32

00:02:14,340  -->  00:02:17,480
And assign one index
level to the other one.
33

33

00:02:18,510  -->  00:02:23,730
So for instance since your first three
values of your first index list were 1s,
34

34

00:02:23,730  -->  00:02:28,610
then it assigns that one index to the
first three values of your second list.
35

35

00:02:28,610  -->  00:02:30,224
So those first three abcs,
36

36

00:02:30,224  -->  00:02:35,640
were all assigned on the one index and
then you have a sub index of abc and
37

37

00:02:35,640  -->  00:02:40,150
then similarly the three two's were
assigned to the second set of abc.
38

38

00:02:43,300  -->  00:02:46,660
So we can also check multiple levels.
39

39

00:02:46,660  -->  00:02:52,160
So if I for instance call
the index method on my series,
40

40

00:02:52,160  -->  00:02:56,480
it'll give me the number of levels and
their labels, as well.
41

41

00:02:58,210  -->  00:03:00,620
And let's say I wanted to
check a specific subset.
42

42

00:03:01,620  -->  00:03:06,430
So, if I wanted to check, for
instance, the first A, B, and C set.
43

43

00:03:06,430  -->  00:03:08,210
So, the 1 in index 1.
44

44

00:03:08,210  -->  00:03:12,890
I can call it, and
I'll get those first three values.
45

45

00:03:12,890  -->  00:03:18,741
And if I called the second index,
I will get the second ones.
46

46

00:03:18,741  -->  00:03:22,881
0.93, 0.157 and then 0.411.
47

47

00:03:22,881  -->  00:03:30,020
Let's say I wanted to call an index
from an internal index level.
48

48

00:03:30,020  -->  00:03:32,070
So let's say I wanted to know everything
49

49

00:03:33,750  -->  00:03:38,280
on the series that was
associated with an a.
50

50

00:03:38,280  -->  00:03:43,295
So I wanna know both this value 1 a -0.34,
and
51

51

00:03:43,295  -->  00:03:48,103
I also wanted to know the second a, 0.934.
52

52

00:03:48,103  -->  00:03:53,410
The way I can do that is by selecting
53

53

00:03:53,410  -->  00:03:57,690
everything using a colon in
the higher index level, and
54

54

00:03:57,690  -->  00:04:01,770
then specifying that I want all
a's in that lower index level.
55

55

00:04:03,610  -->  00:04:08,210
And there you go,
that gives you that outer index level, and
56

56

00:04:08,210  -->  00:04:13,240
the two values that were associated
with the inner index of a.
57

57

00:04:13,240  -->  00:04:14,910
So we can also create data frames.
58

58

00:04:14,910  -->  00:04:19,680
From a series of multiple levels and we
can do that using a method called unstack.
59

59

00:04:21,240  -->  00:04:25,250
So we can name our dataframe, dframe and
60

60

00:04:25,250  -->  00:04:30,050
then call the unstack
method on that data frame.
61

61

00:04:32,200  -->  00:04:35,770
And then let's go ahead and
take a look At what happened there.
62

62

00:04:37,050  -->  00:04:42,440
So since you have multiple index levels,
now you can create a dframe using unstack.
63

63

00:04:42,440  -->  00:04:46,330
And it'll create the lower
index levels as columns and
64

64

00:04:46,330  -->  00:04:49,660
your higher ones will be
now the index of the rows.
65

65

00:04:51,830  -->  00:04:54,740
And we can also apply
multiple level indexing
66

66

00:04:54,740  -->  00:04:57,150
to dataframes since the very beginning.
67

67

00:04:57,150  -->  00:05:00,700
So if you wanted to construct
the DataFrame with multiple index levels,
68

68

00:05:02,380  -->  00:05:03,370
we can do it like this.
69

69

00:05:03,370  -->  00:05:03,990
I'll show you an example.
70

70

00:05:08,468  -->  00:05:09,608
So you have your DataFrame.
71

71

00:05:12,960  -->  00:05:15,719
You have np.arrange.
72

72

00:05:15,719  -->  00:05:22,240
So we're gonna choose 16 points and
then let's reshape this into a matrix.
73

73

00:05:22,240  -->  00:05:24,400
We'll just have it be
a four by four matrix.
74

74

00:05:27,790  -->  00:05:33,108
And then were going to create
75

75

00:05:33,108  -->  00:05:38,426
an index and again were going
76

76

00:05:38,426  -->  00:05:44,195
to pass two lists in the index.
77

77

00:05:44,195  -->  00:05:51,415
The first list I'm going to have
it be two pairs of letters and
78

78

00:05:51,415  -->  00:05:57,230
the second list I'll have
it be a set of numbers.
79

79

00:05:59,110  -->  00:06:02,360
Then we can also do subsets of columns.
80

80

00:06:03,510  -->  00:06:04,840
So how can I do that?
81

81

00:06:04,840  -->  00:06:13,470
Well, we can specify that the columns
is also gonna be a set of lists.
82

82

00:06:13,470  -->  00:06:21,060
So let's have the first column be cities,
we'll call NY NY.
83

83

00:06:21,060  -->  00:06:27,900
Let's say LA and SF, and
then the next one we'll do
84

84

00:06:30,140  -->  00:06:35,700
cold, hot, hot, cold.
85

85

00:06:35,700  -->  00:06:41,540
All right, awesome.
86

86

00:06:44,540  -->  00:06:47,020
And then we'll have a dframe2 to show it.
87

87

00:06:48,310  -->  00:06:52,380
So let's just see what happened, and
then let's go over what we just did.
88

88

00:06:52,380  -->  00:06:54,160
So we created a data frame.
89

89

00:06:54,160  -->  00:06:57,190
We arranged our 16 point array.
90

90

00:06:58,190  -->  00:07:01,060
We reshaped it as a matrix, so if you look
on the inside we have zero through 15, so
91

91

00:07:01,060  -->  00:07:03,250
that makes sense, and it's a four by four.
92

92

00:07:04,350  -->  00:07:09,420
And then we passed two indexed lists,
a, a, b, b, 1, 2, 1, 2.
93

93

00:07:09,420  -->  00:07:12,750
So each of these gets matched up.
94

94

00:07:13,920  -->  00:07:17,740
Now these first 1, 2s are associated
with a on the outer index, and
95

95

00:07:17,740  -->  00:07:21,650
the second set of 1, 2s are associated
with b on the outer index.
96

96

00:07:21,650  -->  00:07:23,700
So that's what we've got going on.
97

97

00:07:23,700  -->  00:07:28,290
On those index of rows and then if we
wanted to make an index hierarchy for
98

98

00:07:28,290  -->  00:07:30,100
the columns we can do the same thing.
99

99

00:07:31,310  -->  00:07:36,040
We create an NY and YL, LA, SF,
that's gonna be your outer index.
100

100

00:07:36,040  -->  00:07:40,420
And then your sub index there we decided
would be cold, cold, hot, cold and
101

101

00:07:40,420  -->  00:07:41,345
that's what we got here.
102

102

00:07:41,345  -->  00:07:47,890
And they're associated with
the first value on your first list
103

103

00:07:47,890  -->  00:07:51,250
that's associated with the first value on
your second list that you pass, and so on.
104

104

00:07:51,250  -->  00:07:54,470
Second value, ny, associated
with the second value here, hot.
105

105

00:07:54,470  -->  00:07:56,960
So you get that going
on in your data frame.
106

106

00:08:00,400  -->  00:08:02,810
So if you wanna keep better
track of your index levels,
107

107

00:08:02,810  -->  00:08:04,660
you can name your index levels.
108

108

00:08:05,830  -->  00:08:06,780
Let's see how to do that.
109

109

00:08:08,550  -->  00:08:13,050
So let's go ahead and
name our index levels.
110

110

00:08:14,160  -->  00:08:18,030
And we can do that by
passing index.names method.
111

111

00:08:19,370  -->  00:08:24,940
And since we have multiple index levels
on the rows, we can just pass the list.
112

112

00:08:24,940  -->  00:08:31,821
So, we'll say index Index 1 for
that first row index.
113

113

00:08:34,741  -->  00:08:37,863
Index 2 for that second row index.
114

114

00:08:37,863  -->  00:08:39,703
And then we can also name the columns.
115

115

00:08:46,753  -->  00:08:49,272
And we can do it by just
passing the method columns and
116

116

00:08:49,272  -->  00:08:52,040
And then passing a names on top of that.
117

117

00:08:52,040  -->  00:08:54,120
And let's call our column names.
118

118

00:08:54,120  -->  00:08:58,750
So it looks like, so the first index
with the columns are cities so
119

119

00:08:58,750  -->  00:08:59,660
I'll call it Cities.
120

120

00:09:04,670  -->  00:09:10,570
And the second index is temperature,
well more or less hot and cold.
121

121

00:09:10,570  -->  00:09:11,490
So we'll call it temp.
122

122

00:09:12,630  -->  00:09:15,360
And after doing that, let's just
see what the data frame looks like.
123

123

00:09:17,920  -->  00:09:23,084
Cool, so
now we have the names of those indexes.
124

124

00:09:23,084  -->  00:09:28,168
So your first index, the AB, and
your second index the one-two, one-two.
125

125

00:09:28,168  -->  00:09:34,998
And then your column names: cities and
temperatures, cold-hot, hot-cold.
126

126

00:09:34,998  -->  00:09:40,430
Cool, let's say you wanted to interchange
the level orders for some reason.
127

127

00:09:41,770  -->  00:09:47,100
You can do that, so if I wanted
temperatures to be the outside index and
128

128

00:09:47,100  -->  00:09:50,200
cities to be the inner sub-index.
129

129

00:09:50,200  -->  00:09:51,960
How could I do that?
130

130

00:09:51,960  -->  00:09:57,910
So you grab your data frame, and
you pass a method on it called swaplevel.
131

131

00:09:59,510  -->  00:10:03,450
And then you give it the two
index levels you wanna swap.
132

132

00:10:03,450  -->  00:10:07,968
So, we wanna swap cities.
133

133

00:10:07,968  -->  00:10:08,768
And temp.
134

134

00:10:11,568  -->  00:10:16,780
And we're gonna set the axis equal to
one because we wanna swap the columns.
135

135

00:10:16,780  -->  00:10:22,140
If we don't put an axis it'll try
to swap the axis zero by default,
136

136

00:10:22,140  -->  00:10:24,050
and that would be the rows.
137

137

00:10:24,050  -->  00:10:25,860
So since we're swapping
columns we're gonna input one.
138

138

00:10:25,860  -->  00:10:27,820
Now let;s see what happens.
139

139

00:10:29,670  -->  00:10:32,760
Nice, so
now you can see we've swapped the levels.
140

140

00:10:32,760  -->  00:10:37,180
So now the temperature is on
the upper level cold hot cold and
141

141

00:10:37,180  -->  00:10:41,110
you have your cities that
are associated with those temperatures.
142

142

00:10:43,680  -->  00:10:45,309
You can also sort levels.
143

143

00:10:47,869  -->  00:10:52,830
So if you wanted to sort a level,
you just pass the the method's sortlevel.
144

144

00:10:55,310  -->  00:10:58,226
And let's go ahead and
pass that and see what happens.
145

145

00:10:58,226  -->  00:11:02,548
So now
146

146

00:11:02,548  -->  00:11:08,820
if we look at the row indexes,
they've been sorted.
147

147

00:11:08,820  -->  00:11:11,170
So one one two two.
148

148

00:11:12,730  -->  00:11:17,280
And what this,
the argument I passed here on sort level
149

149

00:11:18,530  -->  00:11:21,950
is for
which sub-level of the index to sort.
150

150

00:11:21,950  -->  00:11:24,170
So let's say I passed a zero instead.
151

151

00:11:26,380  -->  00:11:31,050
Well now it's gonna sort if
by the outer index As and Bs.
152

152

00:11:31,050  -->  00:11:33,210
So those are already sorted.
153

153

00:11:33,210  -->  00:11:36,660
If I wanted to sort it by the one index.
154

154

00:11:36,660  -->  00:11:41,015
So remember, INDEX_1,
that's your zero index here.
155

155

00:11:41,015  -->  00:11:42,890
INDEX_2, that's your one index.
156

156

00:11:45,050  -->  00:11:46,950
Since it starts at zero.
157

157

00:11:48,440  -->  00:11:51,069
And now we've sorted it by the second
index, a one, one, two, two.
158

158

00:11:54,049  -->  00:11:57,700
We can then perform operations
on particular levels.
159

159

00:11:57,700  -->  00:11:59,810
So this is where it gets interesting.
160

160

00:12:00,980  -->  00:12:03,810
We take our dframe, and
let's say we wanted to compute a sum.
161

161

00:12:05,160  -->  00:12:10,770
But if we only wanted to compute a sum
on a certain level, for example, we can
162

162

00:12:10,770  -->  00:12:15,460
pass the level argument and I only wanna
compute sums on the temperature level.
163

163

00:12:16,850  -->  00:12:21,990
And I wanna compute the sums on the
columns, so I'll pass access equal to one.
164

164

00:12:21,990  -->  00:12:23,710
Let's see what happens.
165

165

00:12:26,430  -->  00:12:31,030
So now I've kind of ignored the cities,
since I specifically say that the level
166

166

00:12:31,030  -->  00:12:36,450
to be temperature, and
I've added based on the temperature level.
167

167

00:12:36,450  -->  00:12:38,740
So let's look and see what happened there.
168

168

00:12:38,740  -->  00:12:40,850
If we look at our previous data frame.
169

169

00:12:40,850  -->  00:12:41,710
Index 1 is a.
170

170

00:12:41,710  -->  00:12:42,500
Index 2 is 1.
171

171

00:12:42,500  -->  00:12:46,400
What are all the cold values equal for
this index?
172

172

00:12:46,400  -->  00:12:50,310
Well, it was zero plus three, and
now you have three as your cold.
173

173

00:12:50,310  -->  00:12:54,950
And then the hots were one plus two,
so now you have three by your hots.
174

174

00:12:54,950  -->  00:12:59,060
And you can take that and expand it
to the rest of the rows and columns.
175

175

00:12:59,060  -->  00:12:59,700
And that's what you get.
176

176

00:13:01,210  -->  00:13:04,050
Cool.
So we'll be messing around more with
177

177

00:13:04,050  -->  00:13:05,400
index hierarchy in the future.
178

178

00:13:05,400  -->  00:13:07,240
It's gonna be a really useful tool.
179

179

00:13:08,800  -->  00:13:12,480
That's the end of this section,
next up we'll look at section five,
180

180

00:13:12,480  -->  00:13:15,400
it's gonna be working
with data the first part.
181

181

00:13:15,400  -->  00:13:19,220
You can go back on previous lectures,
182

182

00:13:19,220  -->  00:13:22,500
get a little more familiar with data
frames and series if you want to and we're
183

183

00:13:22,500  -->  00:13:27,460
going to be reviewing using those tools,
a lot through the rest of this course.
184

184

00:13:27,460  -->  00:13:31,000
So, I'll see you at the next section.
185

185

00:13:31,000  -->  00:13:31,610
Okay.
186

186

00:13:31,610  -->  00:13:32,110
See you there.
