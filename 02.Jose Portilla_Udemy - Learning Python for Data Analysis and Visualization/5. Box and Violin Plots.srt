1
1

00:00:01,150  -->  00:00:03,950
Hey guys, welcome to Lecture 51.
2

2

00:00:03,950  -->  00:00:07,990
This lecture will be on box and
violin plots.
3

3

00:00:07,990  -->  00:00:12,364
So, I've already imported on my first
cell all the imports we've been using for
4

4

00:00:12,364  -->  00:00:15,100
the data visualization section.
5

5

00:00:15,100  -->  00:00:17,685
And in case you're a little
fuzzy on box plots or
6

6

00:00:17,685  -->  00:00:21,350
violin plots, you can go ahead and
check out this link.
7

7

00:00:21,350  -->  00:00:24,700
It's just a link to the Wikipedia page for
box plots.
8

8

00:00:24,700  -->  00:00:27,230
So they're pretty straight forward.
9

9

00:00:27,230  -->  00:00:32,265
It's just another way of representing
a probability density function using
10

10

00:00:32,265  -->  00:00:37,330
quartiles so you can see here, this figure
kinda shows how the probability density
11

11

00:00:37,330  -->  00:00:43,111
function relates to the box plot so
just take a look at that.
12

12

00:00:43,111  -->  00:00:46,063
Okay, so let's find out how
to make these box plots.
13

13

00:00:49,507  -->  00:00:53,470
All right, so
let's just start off with two data sets.
14

14

00:00:53,470  -->  00:00:58,953
So, I'm gonna make data one
equal randn just a 100 points,
15

15

00:00:58,953  -->  00:01:04,848
and I'm gonna do the same thing for
a second data set randn a 100,
16

16

00:01:04,848  -->  00:01:08,800
and now let's go ahead and
create a box plot.
17

17

00:01:08,800  -->  00:01:16,510
So the way we can do that
using Seaborn is sns.boxplot.
18

18

00:01:17,830  -->  00:01:21,700
And let's go ahead and pass both data
sets and we can do that using a list.
19

19

00:01:22,750  -->  00:01:26,010
So, I'm gonna pass data1 and data2.
20

20

00:01:26,010  -->  00:01:29,060
Let's see the result.
21

21

00:01:29,060  -->  00:01:33,420
All right, and
there you have your box plot.
22

22

00:01:33,420  -->  00:01:38,170
So if you notice here,
on top of this blue box plot,
23

23

00:01:38,170  -->  00:01:42,590
you still have an extra outlier point, and
24

24

00:01:42,590  -->  00:01:46,530
if you wanna include those into
the range of the whiskers, you can.
25

25

00:01:47,680  -->  00:01:52,535
And you can do that by calling box plot.
26

26

00:01:52,535  -->  00:01:55,265
Again, both data sets, data1 and
27

27

00:01:55,265  -->  00:02:00,715
data2 and this will be passed as a list,
so put them in brackets.
28

28

00:02:02,650  -->  00:02:06,620
And then you can have
the whiskers include any outliers
29

29

00:02:07,900  -->  00:02:11,456
by setting it equal to np.inf, infinity.
30

30

00:02:11,456  -->  00:02:15,520
So np infinity, and there you go.
31

31

00:02:15,520  -->  00:02:19,095
So, you can see now the whiskers
on the blue box plot
32

32

00:02:19,095  -->  00:02:20,455
have jumped out to that outlier.
33

33

00:02:22,255  -->  00:02:24,475
And, so now your whiskers include
all your outliers as well.
34

34

00:02:25,955  -->  00:02:29,375
You can also set it
horizontally if you wished.
35

35

00:02:29,375  -->  00:02:34,090
So box plot, let's just do one data set.
36

36

00:02:34,090  -->  00:02:38,830
We'll just do data1, and
if we want to set it horizontally,
37

37

00:02:38,830  -->  00:02:43,630
we can just pass the argument vert for
vertical, equal to false.
38

38

00:02:44,920  -->  00:02:49,430
And now you have a horizontal box plot,
great.
39

39

00:02:49,430  -->  00:02:53,750
So, while box plots are really useful and
great, especially for
40

40

00:02:53,750  -->  00:02:59,870
things like financial data and
stocks, we can also use violin or
41

41

00:02:59,870  -->  00:03:04,990
some people call them viola plots and
that combines the simple format
42

42

00:03:04,990  -->  00:03:10,450
of a box plot with the information
of a kernel density estimation plot.
43

43

00:03:10,450  -->  00:03:14,500
So, let's see how we can make those,
first I'm going to
44

44

00:03:14,500  -->  00:03:18,970
show you an example where the box
plot won't give you the full picture.
45

45

00:03:20,550  -->  00:03:25,266
So in order to do that, I'm going to
first make a normal distribution,
46

46

00:03:25,266  -->  00:03:30,860
gonna rename data1,
47

47

00:03:30,860  -->  00:03:36,120
and I'm gonna use stats.norm
to make this distribution
48

48

00:03:37,910  -->  00:03:47,360
and so what we're gonna do is
call it from input 0, 5 and
49

49

00:03:47,360  -->  00:03:53,690
then I'll use .rvs to get 100
points from the distribution.
50

50

00:03:53,690  -->  00:04:00,190
And then, I'm gonna also make
two gamma distributions and
51

51

00:04:00,190  -->  00:04:05,135
then I'm gonna concatenate them together.
52

52

00:04:09,341  -->  00:04:13,416
So, I'm making some really specific data
sets to show you the example of when a box
53

53

00:04:13,416  -->  00:04:15,560
plot won't give you the whole picture.
54

54

00:04:15,560  -->  00:04:21,380
So don't worry too much if you don't get
how I make this second data set, it's
55

55

00:04:21,380  -->  00:04:25,070
not actually a big deal as far as learning
how to create a box and violin plot.
56

56

00:04:27,340  -->  00:04:31,590
So, I'm gonna use NumPy concatenate, we
actually learned how to use that before.
57

57

00:04:32,600  -->  00:04:38,000
And I can call the stats gamma,
to get a gamma distribution.
58

58

00:04:39,400  -->  00:04:44,100
And I'll just run it five,
five and I'm gonna get 50 points.
59

59

00:04:48,468  -->  00:04:49,840
And I wanna subtract one from that.
60

60

00:04:51,730  -->  00:04:53,810
And then, since I'm gonna use concatenate,
61

61

00:04:53,810  -->  00:04:57,499
I'm gonna make another gamma
distribution using stats.
62

62

00:04:59,720  -->  00:05:07,990
And again I will run it with five and
in this case, I will also call 50 points.
63

63

00:05:09,150  -->  00:05:13,111
But what I'm gonna do here on
the second gamma distribution,
64

64

00:05:13,111  -->  00:05:16,095
I'm just gonna multiply
it by a negative one.
65

65

00:05:19,092  -->  00:05:24,460
All right, and then I'm going to
66

66

00:05:24,460  -->  00:05:29,840
box plot both data1 and data2.
67

67

00:05:30,860  -->  00:05:36,730
So I can do that by saying sns.boxplot and
68

68

00:05:36,730  -->  00:05:39,950
then pass the list of both those guys,
data1 and data2.
69

69

00:05:41,030  -->  00:05:46,227
And let's set our whiskers to include any
outliers so have them go to infinity.
70

70

00:05:49,803  -->  00:05:57,038
And I spelled gamma wrong here,
there we go.
71

71

00:05:57,038  -->  00:06:00,720
Okay, so if you just quickly
look at these two box plots.
72

72

00:06:00,720  -->  00:06:05,000
You could say that both
distributions are pretty similar,
73

73

00:06:06,130  -->  00:06:07,940
just one's a little wider then the other.
74

74

00:06:09,450  -->  00:06:11,809
But if you wanna get the full picture,
75

75

00:06:11,809  -->  00:06:16,520
you might need to look at
the kernel density estimation plot.
76

76

00:06:16,520  -->  00:06:18,320
So, that's where
the violin plot's come in.
77

77

00:06:18,320  -->  00:06:22,520
They're gonna basically,
combine a KDE plot with the box plot.
78

78

00:06:24,310  -->  00:06:28,585
So in order to do that,
I am going to call violin plot, so
79

79

00:06:28,585  -->  00:06:34,110
sns.violinplot, and
then let's go ahead and
80

80

00:06:34,110  -->  00:06:39,599
call data1 and data2.
81

81

00:06:39,599  -->  00:06:45,000
And, now you can see the distributions
look actually, quite different.
82

82

00:06:45,000  -->  00:06:46,150
So this is pretty revealing.
83

83

00:06:46,150  -->  00:06:50,120
Here, it's clearly a normal distribution,
and then you can see
84

84

00:06:50,120  -->  00:06:54,130
here the set of the two gammas,
one positive and then one negative.
85

85

00:06:54,130  -->  00:06:56,920
So, the box plot definitely doesn't
show you that whole picture there.
86

86

00:06:57,920  -->  00:07:00,230
So violin plots can be pretty
revealing for your data.
87

87

00:07:01,560  -->  00:07:06,470
And just like we used for the KDE plots,
we can also change the bandwidth
88

88

00:07:06,470  -->  00:07:10,720
of the kernel used for
the density fit in the violin plot.
89

89

00:07:10,720  -->  00:07:17,850
And, you can do that just by passing your
data and then specifying the bandwidth.
90

90

00:07:17,850  -->  00:07:22,090
So if I specify some
ridiculously small bandwidth, so
91

91

00:07:22,090  -->  00:07:27,530
it's super sensitive to the frequency,
that can affect your violin plot.
92

92

00:07:27,530  -->  00:07:31,250
So, you can decide what bandwidths
you wanna do if you want to
93

93

00:07:31,250  -->  00:07:33,850
input specific bandwidths
into your violin plots.
94

94

00:07:33,850  -->  00:07:38,440
Just like we did for
kernel density estimation plots.
95

95

00:07:38,440  -->  00:07:43,750
Also, kinda similar to our rug plot,
you can include the individual points.
96

96

00:07:43,750  -->  00:07:50,555
So what I mean by that, to show you an
example, let's have our violin plot data1.
97

97

00:07:50,555  -->  00:07:56,020
So here's our violin plot data1 and
98

98

00:07:56,020  -->  00:08:00,500
let's say, I want to include, just like
a rug plot, all the individual points.
99

99

00:08:00,500  -->  00:08:04,860
Well, I can do that either with points or
sticks.
100

100

00:08:04,860  -->  00:08:09,102
So I can pass the argument enter
101

101

00:08:09,102  -->  00:08:14,190
equal to stick, and
now I should get a line,
102

102

00:08:15,710  -->  00:08:20,090
and all these lines are individual
data points along this distribution.
103

103

00:08:21,630  -->  00:08:26,080
So, it's almost, it's basically bringing
the idea of the rug plot to a violin plot.
104

104

00:08:27,290  -->  00:08:31,390
All right, and that's pretty much
it as for as box and violin plots.
105

105

00:08:31,390  -->  00:08:35,860
Just remember you can call them using
either violin plot and box plot.
106

106

00:08:35,860  -->  00:08:39,650
And, it's always good to keep in the back
of your mind about the kernel density
107

107

00:08:39,650  -->  00:08:43,920
estimation plot just to make sure you're
getting the whole picture of your data.
108

108

00:08:45,200  -->  00:08:47,120
Okay, and that's about it.
109

109

00:08:47,120  -->  00:08:51,540
In the next lecture, I will be going
over multiple regression plots.
110

110

00:08:51,540  -->  00:08:52,049
I'll see you then.
