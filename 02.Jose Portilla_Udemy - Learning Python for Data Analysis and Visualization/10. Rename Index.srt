1
1

00:00:00,430  -->  00:00:03,660
Hey guys, welcome to lecture 38.
2

2

00:00:03,660  -->  00:00:07,490
This lecture will be on renaming indexes.
3

3

00:00:07,490  -->  00:00:08,890
I'll call it rename index.
4

4

00:00:10,960  -->  00:00:12,820
So we're gonna import the usual.
5

5

00:00:12,820  -->  00:00:17,004
Gonna import numpy as np.
6

6

00:00:17,004  -->  00:00:20,443
Import pandas as PD.
7

7

00:00:20,443  -->  00:00:23,902
And then from pandas,
8

8

00:00:23,902  -->  00:00:29,560
we'll import Series, DataFrame.
9

9

00:00:29,560  -->  00:00:33,620
All right, so now that we've done that,
let's go ahead and make a DataFrame.
10

10

00:00:34,850  -->  00:00:38,590
We'll say dframe equals Dataframe.
11

11

00:00:38,590  -->  00:00:42,530
Let's go ahead and get some numbers.
12

12

00:00:42,530  -->  00:00:44,370
A number matrix to fill out some values.
13

13

00:00:44,370  -->  00:00:47,560
So we'll say np.arange.
14

14

00:00:47,560  -->  00:00:52,271
And then I'll reshape this array
into a three by four matrix.
15

15

00:00:55,620  -->  00:01:00,619
After that, I'll just set my index
16

16

00:01:00,619  -->  00:01:04,793
equal to some city initials.
17

17

00:01:10,936  -->  00:01:19,090
And then I'll set the columns,
equal to just some letter values.
18

18

00:01:19,090  -->  00:01:23,066
I'll say A, B, C, D.
19

19

00:01:23,066  -->  00:01:28,460
Okay.
20

20

00:01:28,460  -->  00:01:29,600
Now we have our data frame.
21

21

00:01:30,800  -->  00:01:34,680
Just like a series,
axis indexes can also map.
22

22

00:01:34,680  -->  00:01:40,090
So we can use map to lower case the city's
initials, so how can I do that?
23

23

00:01:40,090  -->  00:01:41,450
I'll show you.
24

24

00:01:41,450  -->  00:01:45,024
So for instance we can say dframe.index.
25

25

00:01:45,024  -->  00:01:48,980
And then I'll call a map on the index.
26

26

00:01:48,980  -->  00:01:54,940
And using that map i'll
input the command str.lower.
27

27

00:01:54,940  -->  00:01:58,640
So this will lower case that index.
28

28

00:01:58,640  -->  00:02:00,850
And so now my array is the lower case.
29

29

00:02:03,330  -->  00:02:06,470
Of each of those cities' names,
or initials, I should say.
30

30

00:02:06,470  -->  00:02:09,690
If I want to assign this
to the actual index.
31

31

00:02:09,690  -->  00:02:17,915
I can use dframe.index equal
to the value I wrote about.
32

32

00:02:17,915  -->  00:02:24,130
Index.map, and str.lower,
to lowercase everything in that index.
33

33

00:02:25,150  -->  00:02:28,320
And now if I look at my dframe
the effect will be permanent.
34

34

00:02:29,550  -->  00:02:30,050
Cool.
35

35

00:02:33,100  -->  00:02:36,620
I can also use rename if I wanna
create a transformed version,
36

36

00:02:36,620  -->  00:02:38,229
without modifying the original version.
37

37

00:02:39,940  -->  00:02:43,701
So, if I want to do that I
could say deframe.rename.
38

38

00:02:43,701  -->  00:02:47,560
And this is where we're going to
learn more about renaming indexes.
39

39

00:02:47,560  -->  00:02:51,872
And then I'll say index=str.title.
40

40

00:02:51,872  -->  00:02:56,079
That's the way to make it capitalized.
41

41

00:02:57,370  -->  00:03:02,920
And then I'll set my
columns equal to str.lower.
42

42

00:03:02,920  -->  00:03:06,230
So I'll lower case the column letters.
43

43

00:03:06,230  -->  00:03:07,320
Lets see if that works.
44

44

00:03:10,200  -->  00:03:11,610
And so now using title.
45

45

00:03:11,610  -->  00:03:17,310
Its capitalized the first
letter of the row index values.
46

46

00:03:17,310  -->  00:03:24,090
Ny, La, Sf, and
then it's lower case the column names.
47

47

00:03:25,680  -->  00:03:30,280
So I can use rename to create the
transformed version of that data frame.
48

48

00:03:30,280  -->  00:03:32,400
I can also use rename
to insert dictionaries.
49

49

00:03:32,400  -->  00:03:34,050
Providing new values.
50

50

00:03:34,050  -->  00:03:37,000
So I can say dframe.rename.
51

51

00:03:37,000  -->  00:03:42,590
And then I can pass an index
52

52

00:03:42,590  -->  00:03:45,630
equal to, let's say a dictionary, ny.
53

53

00:03:45,630  -->  00:03:51,300
And then I'll call it New York.
54

54

00:03:51,300  -->  00:03:52,090
Get the full name.
55

55

00:03:56,060  -->  00:04:03,550
Then I can also pass columns= A.
56

56

00:04:03,550  -->  00:04:05,180
And then I can rename that as Alpha.
57

57

00:04:06,820  -->  00:04:07,680
So what I'm doing here,
58

58

00:04:07,680  -->  00:04:13,010
is I'm passing dictionaries with
the arguments index and columns.
59

59

00:04:14,060  -->  00:04:16,170
Using the rename method.
60

60

00:04:16,170  -->  00:04:18,360
So it's going to rename my index,
and my column.
61

61

00:04:18,360  -->  00:04:21,489
So let's go ahead and see what happens.
62

62

00:04:21,489  -->  00:04:26,390
So as we expected now NY has
been renamed to New York.
63

63

00:04:26,390  -->  00:04:28,650
And that a has been renamed to alpha.
64

64

00:04:29,980  -->  00:04:31,260
Cool.
65

65

00:04:31,260  -->  00:04:36,350
So you can actually edit
the data set in place.
66

66

00:04:36,350  -->  00:04:39,520
The way to do that is I can say dframe.
67

67

00:04:39,520  -->  00:04:41,660
Well I'll show you what I mean first.
68

68

00:04:41,660  -->  00:04:43,730
Let's just take a look at
the original data frame.
69

69

00:04:43,730  -->  00:04:46,040
So those effects weren't permanent.
70

70

00:04:46,040  -->  00:04:51,520
If I want to make them permanent,
I can say dframe.rename.
71

71

00:04:51,520  -->  00:04:56,026
Input the original
72

72

00:04:56,026  -->  00:05:00,534
stuff we just did.
73

73

00:05:00,534  -->  00:05:04,757
NEW YORK finishes that dictionary.
74

74

00:05:04,757  -->  00:05:09,290
And then since I want to make
an edit to the data set in place.
75

75

00:05:09,290  -->  00:05:13,110
I can just set inplace argument = True.
76

76

00:05:16,010  -->  00:05:17,340
And I wanna call my dframe.
77

77

00:05:19,710  -->  00:05:20,780
Those effects are permanent.
78

78

00:05:20,780  -->  00:05:23,420
So it actually edited
the data frame in place.
79

79

00:05:25,340  -->  00:05:27,400
So that's about it for renaming indexes.
80

80

00:05:27,400  -->  00:05:35,510
So, just to go over it,
you can map things to an index to edit it.
81

81

00:05:35,510  -->  00:05:37,800
But you can also just use rename.
82

82

00:05:37,800  -->  00:05:40,500
And you rename in input arguments index.
83

83

00:05:40,500  -->  00:05:42,910
Either a dictionary for renaming, or
84

84

00:05:42,910  -->  00:05:48,290
you can pass arguments or
methods onto the index columns themselves.
85

85

00:05:48,290  -->  00:05:53,730
Such as lowering or upper casing
the column, or index values and names.
86

86

00:05:53,730  -->  00:05:54,400
All right.
87

87

00:05:54,400  -->  00:05:55,049
So up next we'll learn.
