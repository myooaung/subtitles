1
1

00:00:00,930  -->  00:00:03,010
Hey guys, welcome to lecture 31.
2

2

00:00:03,010  -->  00:00:05,310
This will be on Concatenate.
3

3

00:00:05,310  -->  00:00:09,060
So we're going to be able
to join data frames and
4

4

00:00:09,060  -->  00:00:12,350
matrices together,
almost like a sandwich if you will.
5

5

00:00:13,548  -->  00:00:18,910
So we're gonna import the usual
numpy is np, panda's is pd,
6

6

00:00:18,910  -->  00:00:21,800
and from panda's we'll import series and
data frame.
7

7

00:00:21,800  -->  00:00:27,669
So, first let's learn about Concatenate
and numpy, so I'll create a matrix,
8

8

00:00:27,669  -->  00:00:32,860
I'll just call it ARR1, and
I'll construct it using NP dot arrange.
9

9

00:00:34,060  -->  00:00:39,840
I'll get nine points, and then I'll
reshape it into a three by three matrix.
10

10

00:00:40,930  -->  00:00:43,000
And i'll type it so I can see it.
11

11

00:00:43,000  -->  00:00:45,030
Okay, perfect.
12

12

00:00:45,030  -->  00:00:47,960
So you have our three by
three of nine points.
13

13

00:00:47,960  -->  00:00:51,260
So we can concatenate along axis one.
14

14

00:00:51,260  -->  00:00:57,684
So to do that,
we just pass np dot concatenate,
15

15

00:00:57,684  -->  00:01:03,470
and then the list of matrices or
arrays you want to concatenate.
16

16

00:01:03,470  -->  00:01:11,250
So for instance, I can just get two copies
of that matrix and specify access one.
17

17

00:01:11,250  -->  00:01:12,250
Let's see what happens.
18

18

00:01:14,050  -->  00:01:15,430
So now they've been sandwiched together.
19

19

00:01:15,430  -->  00:01:18,900
So I have a three by six, and you can
kind of see how they were attached.
20

20

00:01:18,900  -->  00:01:22,360
So zero, one, two, three,
four, six, seven, eight, and
21

21

00:01:22,360  -->  00:01:23,810
then a repeat of the same matrix.
22

22

00:01:25,570  -->  00:01:29,490
If you wanna do it on a different axis,
you totally can.
23

23

00:01:29,490  -->  00:01:31,300
You just got to specify.
24

24

00:01:31,300  -->  00:01:33,300
So for instance,
let's say we wanted top to bottom.
25

25

00:01:34,810  -->  00:01:35,920
We could again, just get two copies.
26

26

00:01:39,678  -->  00:01:44,956
Of those arrays, and
then specify axis equals zero,
27

27

00:01:44,956  -->  00:01:50,250
and now you'll see we have
done it from top to bottom.
28

28

00:01:51,520  -->  00:01:52,020
Cool.
29

29

00:01:54,150  -->  00:01:57,110
So that's how to concatenate in numpy.
30

30

00:01:57,110  -->  00:01:59,990
So how about we try in pandas now?
31

31

00:01:59,990  -->  00:02:02,398
So we'll start off by making some series.
32

32

00:02:02,398  -->  00:02:06,113
So SER one, we'll just call it,
33

33

00:02:06,113  -->  00:02:11,289
we'll make a series with
a point zero one two,
34

34

00:02:11,289  -->  00:02:15,688
and we'll set its index to be T, U, V.
35

35

00:02:22,188  -->  00:02:26,660
And we'll make another index,
we'll say series, and
36

36

00:02:26,660  -->  00:02:31,226
this one we'll just give it two points,
two values, and
37

37

00:02:31,226  -->  00:02:35,810
then its index will only
be two values as well.
38

38

00:02:35,810  -->  00:02:37,440
We'll just choose some other letters.
39

39

00:02:37,440  -->  00:02:40,108
Let's say X and Y.
40

40

00:02:40,108  -->  00:02:47,900
And then we'll just see
how they ran correctly.
41

41

00:02:47,900  -->  00:02:50,180
Okay, cool,
let's see them buff real quick.
42

42

00:02:51,420  -->  00:02:52,810
So there's our first series.
43

43

00:02:52,810  -->  00:02:56,798
And there's our second one,
so zero, one, two, T, U, V.
44

44

00:02:56,798  -->  00:02:59,859
And the second one is 3, 4, X, Y, awesome.
45

45

00:02:59,859  -->  00:03:03,378
So how do we concatenate in pandas?
46

46

00:03:03,378  -->  00:03:09,370
We can do that by saying pd dot concat,
so that's the method you can call,
47

47

00:03:09,370  -->  00:03:14,495
and then similar to numpy,
you just give the two series you want
48

48

00:03:14,495  -->  00:03:19,258
to concatenate ,and it will
concatenate them together.
49

49

00:03:19,258  -->  00:03:20,296
So now we have zero, one,
two, three, and four, and
50

50

00:03:20,296  -->  00:03:20,958
the letter index for both of them.
51

51

00:03:20,958  -->  00:03:27,517
You can also specify which access.
52

52

00:03:30,058  -->  00:03:36,098
So, we can say concat, pd dot concat,
again we'll pass in those two series.
53

53

00:03:38,218  -->  00:03:42,419
And, we can specify,
for instance, axis one.
54

54

00:03:42,419  -->  00:03:44,850
And if I do this,
it will produce a data frame.
55

55

00:03:47,160  -->  00:03:51,280
So create index zero and
one for the column names, and
56

56

00:03:51,280  -->  00:03:56,180
then it will create a data frame
because you have some null information.
57

57

00:03:56,180  -->  00:03:58,844
So your second series didn't have T,
U, V information and
58

58

00:03:58,844  -->  00:04:01,700
your first series didn't have X,
Y information.
59

59

00:04:01,700  -->  00:04:04,260
So it fills those with a null value, but
60

60

00:04:04,260  -->  00:04:08,820
now you have a full data frame from
concatenate of those two series.
61

61

00:04:10,470  -->  00:04:11,920
Awesome.
62

62

00:04:11,920  -->  00:04:19,240
So let's say we wanted to add markers or
keys to the concat result.
63

63

00:04:19,240  -->  00:04:21,670
So we could do this by
using a index hierarchy,
64

64

00:04:21,670  -->  00:04:23,140
which we've learned about in the past.
65

65

00:04:24,270  -->  00:04:29,176
So I can call concat on the two series,
SER one, SER two.
66

66

00:04:33,494  -->  00:04:36,050
And I can set keys for them, so
I can call one let's say cat one, and
67

67

00:04:36,050  -->  00:04:37,294
I can call the other one cat two.
68

68

00:04:37,294  -->  00:04:41,081
Let me make sure those are strings,
69

69

00:04:41,081  -->  00:04:46,014
all right let's see what
happens if I do that.
70

70

00:04:46,014  -->  00:04:50,433
So now it was able to concatenate
both of the series, but
71

71

00:04:50,433  -->  00:04:54,664
it's labeled them through
a hierarchical index, so
72

72

00:04:54,664  -->  00:04:57,780
I can remember which series was which.
73

73

00:04:57,780  -->  00:05:00,138
So, cat one is my first series, and
74

74

00:05:00,138  -->  00:05:03,528
now cat two is the higher
index of my second series.
75

75

00:05:05,649  -->  00:05:06,843
And then lastly,
76

76

00:05:06,843  -->  00:05:13,250
everything that we've done works really
similarly in data frames, not just series.
77

77

00:05:13,250  -->  00:05:14,990
So let's go ahead and
make two data frames.
78

78

00:05:14,990  -->  00:05:16,230
We'll make D frame one.
79

79

00:05:18,220  -->  00:05:22,669
Call it Data Frame, and
we'll call np dot random,
80

80

00:05:22,669  -->  00:05:27,210
thought ran end since we didn't import it.
81

81

00:05:27,210  -->  00:05:33,833
Specifically, we'll make a four
by three ran the matrix,
82

82

00:05:33,833  -->  00:05:41,392
and then we'll set the columns equal to,
let's just say X, Y, Z.
83

83

00:05:47,091  -->  00:05:50,919
And then we'll make a D frame two,
84

84

00:05:50,919  -->  00:05:55,020
and we'll start it from Data Frame.
85

85

00:05:58,940  -->  00:06:02,890
Again we'll say rand N, and
86

86

00:06:02,890  -->  00:06:10,461
this case let's make a three
by three random matrix and
87

87

00:06:10,461  -->  00:06:15,740
set the columns equal to Y, Q, and X.
88

88

00:06:18,740  -->  00:06:21,070
So now that we've created those
data frames, let's go ahead and
89

89

00:06:21,070  -->  00:06:23,470
take a quick look at each one, so
we know what we're dealing with.
90

90

00:06:23,470  -->  00:06:27,458
That's what our data frame one looks like.
91

91

00:06:27,458  -->  00:06:29,470
That's what our data frame two looks like.
92

92

00:06:29,470  -->  00:06:32,010
So, they both have X and Y columns.
93

93

00:06:32,010  -->  00:06:34,390
One of them has a z, the other done
doesn't, the second one has a Q.
94

94

00:06:34,390  -->  00:06:36,148
The first one does not.
95

95

00:06:36,148  -->  00:06:41,022
So let's see what happens when
we run them through concat.
96

96

00:06:41,022  -->  00:06:45,601
So say,
pd dot concat to concatenate them, and
97

97

00:06:45,601  -->  00:06:51,232
we'll run them through a list,
D frame one, D frame two.
98

98

00:06:51,232  -->  00:06:53,470
See what the result is.
99

99

00:06:53,470  -->  00:06:57,970
So as you'd expect,
it binds them together, and
100

100

00:06:57,970  -->  00:07:02,510
you're gonna get null values for where
each data frame didn't have any values
101

101

00:07:02,510  -->  00:07:05,790
under the columns of the other data frame.
102

102

00:07:05,790  -->  00:07:08,500
So data frame 1 didnt have any Q values.
103

103

00:07:08,500  -->  00:07:10,650
Q values so leave them all as none.
104

104

00:07:10,650  -->  00:07:13,760
Data frame two didn't have any Z values,
so that puts a null there.
105

105

00:07:16,730  -->  00:07:21,181
If we don't care about the index
information we can get rid of it, so
106

106

00:07:21,181  -->  00:07:26,257
if we look at the concat result on
the index specifically, you'll see zero,
107

107

00:07:26,257  -->  00:07:30,420
one, two three, and then again,
the index zero, one, two.
108

108

00:07:30,420  -->  00:07:37,530
So it kept the index information when you
used concatenate on the two data frames.
109

109

00:07:37,530  -->  00:07:40,770
If you didn't care about that index
information, and just wanted it
110

110

00:07:40,770  -->  00:07:44,640
to keep going, for instance, zero,
one, two three, four, five, six.
111

111

00:07:44,640  -->  00:07:45,940
You can make that happen.
112

112

00:07:45,940  -->  00:07:48,340
You can just have it ignore the index.
113

113

00:07:48,340  -->  00:07:54,736
So in order to do that,
we can call concat again on D frame one,
114

114

00:07:54,736  -->  00:08:01,880
D frame two, and I can pass the argument,
ignore underscore index.
115

115

00:08:03,890  -->  00:08:08,080
Set it to true, and it should ignore that
index and give us a continuous index now.
116

116

00:08:09,220  -->  00:08:10,040
And that's what we've got.
117

117

00:08:10,040  -->  00:08:12,610
So now we have zero, one,
two, three, four, five, six.
118

118

00:08:14,780  -->  00:08:17,780
So that's about it as far
as using concatenate.
119

119

00:08:17,780  -->  00:08:21,320
If you want to get a little more specific,
there's always more information and
120

120

00:08:21,320  -->  00:08:26,320
documentation, so there's a link
in the I Python Notebook, and
121

121

00:08:26,320  -->  00:08:27,590
I'll also write it down here.
122

122

00:08:29,670  -->  00:08:34,610
I'll copy and paste it from the I Python
Notebooks that we have in the viewer, and
123

123

00:08:34,610  -->  00:08:36,280
I'll leave it there for you.
124

124

00:08:36,280  -->  00:08:41,370
So, to go, just a quick overview
using concatenate and numpy.
125

125

00:08:41,370  -->  00:08:46,258
It's np dot concatenate, and
then in pandas, it's pd dot concat.
126

126

00:08:46,258  -->  00:08:50,570
And it works on both series and
data frames.
127

127

00:08:50,570  -->  00:08:55,990
And data frames panda will
take care of index values and
128

128

00:08:55,990  -->  00:08:58,330
null values for you automatically.
129

129

00:08:58,330  -->  00:09:03,568
And you can ignore the index to get
a continuous index, if you wish to do so.
130

130

00:09:03,568  -->  00:09:07,514
All right, so you can check on
documentation if you want even more
131

131

00:09:07,514  -->  00:09:12,610
detailed information, but until then we'll
go ahead and head off to lecture 32,
132

132

00:09:12,610  -->  00:09:17,590
and we'll learn about combining data
frames with overlapping indexes.
133

133

00:09:17,590  -->  00:09:18,610
Okay, I'll see you there.
