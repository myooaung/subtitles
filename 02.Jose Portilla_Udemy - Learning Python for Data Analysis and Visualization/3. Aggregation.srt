1
1

00:00:01,220  -->  00:00:02,660
Hey guys welcome to lecture 44.
2

2

00:00:02,660  -->  00:00:06,320
This lecture's going to
be on data aggregation.
3

3

00:00:06,320  -->  00:00:10,100
I'm super excited for this lecture
because after the previous 43 lectures,
4

4

00:00:10,100  -->  00:00:13,560
we're finally gonna be able to
look at some real data sets and
5

5

00:00:13,560  -->  00:00:15,540
do a lot of analysis on them.
6

6

00:00:15,540  -->  00:00:16,570
So, lets go ahead and get started.
7

7

00:00:17,720  -->  00:00:21,910
You're going to import NumPy as np,
pandas as pd, and
8

8

00:00:21,910  -->  00:00:24,940
from pandas import Series and DataFrame.
9

9

00:00:24,940  -->  00:00:28,460
We do that for
most of the IPython notebooks we start, so
10

10

00:00:28,460  -->  00:00:30,640
we're definitely gonna do it now.
11

11

00:00:30,640  -->  00:00:35,220
So that aggregation consists of
operations that result in a scalar.
12

12

00:00:35,220  -->  00:00:36,480
For instance, the mean,
13

13

00:00:36,480  -->  00:00:40,550
the sum, the count, those operations
that we've done in the past.
14

14

00:00:40,550  -->  00:00:42,666
So let's go ahead and
get some data to play with.
15

15

00:00:47,147  -->  00:00:49,830
So here's the URL we're gonna use.
16

16

00:00:49,830  -->  00:00:56,120
We're going to look up the archives
of UC Irvine machine learning class.
17

17

00:00:57,700  -->  00:00:58,950
So this is the link.
18

18

00:00:58,950  -->  00:01:01,054
When you click this link, or
19

19

00:01:01,054  -->  00:01:07,260
you can copy it from the IPython notebook
viewer, you'll come to this page.
20

20

00:01:07,260  -->  00:01:10,960
And it's the machine learning database
wine quality and we're gonna go ahead and
21

21

00:01:10,960  -->  00:01:14,678
mess around with the red, so
the winequality-red.csv file.
22

22

00:01:14,678  -->  00:01:17,180
All right cool.
23

23

00:01:17,180  -->  00:01:22,080
Once you download it, go ahead and save
it where you're saving your notebooks.
24

24

00:01:22,080  -->  00:01:25,653
And if we open up that file real quick,
I'll open up in notepad,
25

25

00:01:25,653  -->  00:01:31,640
notice that it's separated by semicolons,
not commas.
26

26

00:01:31,640  -->  00:01:33,380
So, we're gonna use read_csv,
27

27

00:01:33,380  -->  00:01:36,800
like we learned in the past
to set up a data frame, but
28

28

00:01:36,800  -->  00:01:41,440
we're gonna have to set the delimiter
as a semicolon, not just a comma.
29

29

00:01:41,440  -->  00:01:42,260
So let's go ahead and do that.
30

30

00:01:43,340  -->  00:01:46,520
We've got dframe_wine,
that's what we'll call our data frame.
31

31

00:01:46,520  -->  00:01:51,910
And then we're gonna use pandas,
so pd.read_csv,
32

32

00:01:51,910  -->  00:01:56,829
and then go ahead and
input the name of the file, so
33

33

00:01:56,829  -->  00:02:00,011
this one is winequality.csv.
34

34

00:02:00,011  -->  00:02:06,494
Actually, it's winequality_red,
the way I called it.
35

35

00:02:06,494  -->  00:02:08,200
You can just call it whatever you want.
36

36

00:02:09,500  -->  00:02:14,650
And then remember the delimiter or
the separator, was a semicolon.
37

37

00:02:16,900  -->  00:02:18,490
Okay, so now we have our data frame.
38

38

00:02:18,490  -->  00:02:20,230
Let's go ahead and get a preview.
39

39

00:02:20,230  -->  00:02:23,745
Let's just see the first five rows.
40

40

00:02:23,745  -->  00:02:26,296
And we can do that again,
like we've done in the past,
41

41

00:02:26,296  -->  00:02:28,300
by calling just the head
of the data frame.
42

42

00:02:28,300  -->  00:02:30,103
All right, so what do we got here?
43

43

00:02:30,103  -->  00:02:35,962
We got our index, zero,
one, two, three, four, etc.
44

44

00:02:35,962  -->  00:02:38,590
Pandas has done that automatically for us.
45

45

00:02:38,590  -->  00:02:44,860
We have different acidity values, residual
sugar levels, the chlorides, the dioxides,
46

46

00:02:44,860  -->  00:02:49,210
the density of that wine, the pH level of
that wine, and then the interesting ones
47

47

00:02:49,210  -->  00:02:54,170
we're gonna play with for this lecture
is the alcohol content of that wine.
48

48

00:02:54,170  -->  00:02:58,530
So for instance,
this wine was 9.4% alcohol.
49

49

00:02:58,530  -->  00:03:00,970
And then the quality rating for that wine.
50

50

00:03:00,970  -->  00:03:02,800
So they rated it on quality.
51

51

00:03:04,740  -->  00:03:06,050
Okay, cool.
52

52

00:03:06,050  -->  00:03:10,330
So how about we find out the average
alcohol content for the wine.
53

53

00:03:10,330  -->  00:03:12,300
How can we do that?
54

54

00:03:12,300  -->  00:03:18,760
Well, just like we've done in previous
lessons, we're gonna say dframe_wine.
55

55

00:03:18,760  -->  00:03:23,770
We'll choose the alcohol column, and
56

56

00:03:23,770  -->  00:03:27,890
since we wanted the average alcohol
content, we're just gonna get the mean.
57

57

00:03:27,890  -->  00:03:30,631
So this is a data aggregation so
it's gonna produce a scalar.
58

58

00:03:33,171  -->  00:03:38,291
So the average alcohol content for
all these wines was 10.4%.
59

59

00:03:38,291  -->  00:03:44,530
All right great, so what else can we do?
60

60

00:03:44,530  -->  00:03:50,570
We can, if we want, just take a quick peek
at what the entire data frame looks like.
61

61

00:03:52,270  -->  00:03:57,298
So the entire data frame is
a whole lot of wine, it's 159.
62

62

00:03:57,298  -->  00:03:57,901
Oh, sorry.
63

63

00:03:57,901  -->  00:04:00,290
1,599 rows.
64

64

00:04:00,290  -->  00:04:03,300
So we've got tons of
information here to play with.
65

65

00:04:04,820  -->  00:04:09,310
We know that the average alcohol content
of the wine is 10.4%, what else can we do?
66

66

00:04:09,310  -->  00:04:11,080
So that's an example of data aggregation.
67

67

00:04:12,830  -->  00:04:15,180
Can we make our own data aggregation?
68

68

00:04:15,180  -->  00:04:19,450
So there's built in methods such as mean,
but can we make our own?
69

69

00:04:19,450  -->  00:04:21,090
And yes we can.
70

70

00:04:21,090  -->  00:04:23,150
So what we can do is we
can create a function.
71

71

00:04:23,150  -->  00:04:26,705
We'll use def to create that function, and
72

72

00:04:26,705  -->  00:04:31,132
we're gonna create a function
called max_to_min.
73

73

00:04:34,053  -->  00:04:40,120
So max_to_min, we'll have it
accept just arr as its input.
74

74

00:04:43,100  -->  00:04:48,460
And then we're going to return
the max value of that array.
75

75

00:04:48,460  -->  00:04:54,770
And then,
subtract the minimum value of that array.
76

76

00:04:54,770  -->  00:04:58,750
So we're gonna basically serve
this as a peak to peak function.
77

77

00:04:58,750  -->  00:05:00,630
So it's going to find the max and
subtract the minimum.
78

78

00:05:03,731  -->  00:05:05,595
So now we have our function max_to_min.
79

79

00:05:06,640  -->  00:05:12,030
So using that, let's go ahead and
keep that in the back of our minds.
80

80

00:05:12,030  -->  00:05:13,980
We've learned a lot about group by.
81

81

00:05:13,980  -->  00:05:16,810
So let's go ahead and
implement that on our data set.
82

82

00:05:16,810  -->  00:05:24,740
So let's make a data frame called wino,
or a group by object called wino, sorry.
83

83

00:05:27,390  -->  00:05:32,102
We'll take our data frame,
the frame wine, and we will group by,
84

84

00:05:32,102  -->  00:05:34,810
and we're gonna group it by quality.
85

85

00:05:34,810  -->  00:05:37,170
So this was the quality
rating of that wine.
86

86

00:05:38,650  -->  00:05:43,070
So we've done that, and let's go ahead and
see the statistics on that.
87

87

00:05:43,070  -->  00:05:45,192
So we'll use describe like
we've done in the past.
88

88

00:05:45,192  -->  00:05:48,160
All right.
89

89

00:05:48,160  -->  00:05:52,670
So now, we've grouped all
the wines by their quality rating.
90

90

00:05:52,670  -->  00:05:55,910
So the quality goes from
three all the way to eight.
91

91

00:05:58,390  -->  00:06:01,520
And we have stats on all the wines.
92

92

00:06:01,520  -->  00:06:07,541
So we have their alcohol content, their
densities, their acidities, sugar, etc.
93

93

00:06:07,541  -->  00:06:11,138
And we have their counts,
the mean values, the standard deviations.
94

94

00:06:11,138  -->  00:06:15,410
All right, awesome.
95

95

00:06:15,410  -->  00:06:19,540
So we're gonna be messing
around with that later.
96

96

00:06:19,540  -->  00:06:22,040
We can now apply our
own aggregate function.
97

97

00:06:22,040  -->  00:06:24,800
So this function takes the max
value of the column and
98

98

00:06:24,800  -->  00:06:27,400
subtracts the minimum value of the column.
99

99

00:06:27,400  -->  00:06:32,650
So, let's go ahead and take that group
by object we just made, wino, and
100

100

00:06:32,650  -->  00:06:37,021
the way we pass a general
aggregation method is .agg, and
101

101

00:06:37,021  -->  00:06:44,910
then you're gonna pass your function
max_to_min that we just made.
102

102

00:06:46,670  -->  00:06:48,530
Let's go ahead and run that.
103

103

00:06:48,530  -->  00:06:52,270
Okay, so now what this has done
is it's gone through wino,
104

104

00:06:52,270  -->  00:06:55,735
that group we just made,
that was sorted by quality, and
105

105

00:06:55,735  -->  00:06:59,245
it took the max of each column value and
subtracted the minimum.
106

106

00:07:01,685  -->  00:07:03,825
Okay, so that's what we got as the result.
107

107

00:07:06,550  -->  00:07:09,630
And we can also pass string
methods through aggregate.
108

108

00:07:10,910  -->  00:07:15,989
So to show you what I mean by that,
we call the method wino.agg.
109

109

00:07:15,989  -->  00:07:21,121
And we can actually pass mean as
a string instead of .mean method.
110

110

00:07:21,121  -->  00:07:24,770
We could actually just
do a more generic mean.
111

111

00:07:24,770  -->  00:07:27,270
It's gonna give you the same result, but
112

112

00:07:27,270  -->  00:07:29,330
it's just good to know you
can do it that way as well.
113

113

00:07:30,540  -->  00:07:34,550
So, there you have, for instance, the
average alcohol percentage for each one.
114

114

00:07:34,550  -->  00:07:36,660
All right, awesome.
115

115

00:07:38,460  -->  00:07:42,900
So, let's go back to the original
data frame, dframe_wine.
116

116

00:07:42,900  -->  00:07:46,290
Just see the head of it,
the first five rows, okay.
117

117

00:07:48,350  -->  00:07:48,850
Nice.
118

118

00:07:50,030  -->  00:07:53,510
Now, let's add a quality
to alcohol content ratio.
119

119

00:07:54,540  -->  00:07:58,680
So what I'm interested in,
I wanna see if that quality rating
120

120

00:07:58,680  -->  00:08:01,680
has a link to the alcohol
percentage of the wine.
121

121

00:08:03,270  -->  00:08:05,590
So I'm gonna do that by adding
a new column to this data frame.
122

122

00:08:05,590  -->  00:08:09,516
I'm gonna say dframe_wine,
123

123

00:08:09,516  -->  00:08:14,348
and then I'm gonna name this column,
124

124

00:08:14,348  -->  00:08:17,974
I'll say qual/alc ratio.
125

125

00:08:17,974  -->  00:08:23,074
This is the quality to
alcohol content ratio,
126

126

00:08:23,074  -->  00:08:31,800
and it will be equal
to the quality column.
127

127

00:08:31,800  -->  00:08:39,610
So this column right here,
quality, divided by dframe_wine.
128

128

00:08:40,860  -->  00:08:42,680
The alcohol content column,
this column right here.
129

129

00:08:45,482  -->  00:08:49,730
All right.
130

130

00:08:49,730  -->  00:08:51,050
So let's run that.
131

131

00:08:51,050  -->  00:08:57,540
So now we've created that new column,
let's go ahead and check out the head now.
132

132

00:08:59,270  -->  00:08:59,860
Okay.
And
133

133

00:08:59,860  -->  00:09:03,670
there's our column now,
the quality over alcohol ratio.
134

134

00:09:03,670  -->  00:09:04,190
Great.
135

135

00:09:04,190  -->  00:09:05,990
So we have a whole column.
136

136

00:09:05,990  -->  00:09:07,780
We got that going.
137

137

00:09:07,780  -->  00:09:12,630
So, just to go over some other
stuff we've learned in the past,
138

138

00:09:12,630  -->  00:09:15,010
let's go over pivot tables.
139

139

00:09:15,010  -->  00:09:18,320
So we could've used pivot
tables instead of group by.
140

140

00:09:18,320  -->  00:09:19,970
So how would we do that?
141

141

00:09:19,970  -->  00:09:24,663
We would say dframe_wine dot,
and instead of calling group by,
142

142

00:09:24,663  -->  00:09:29,799
we could have also have called pivot
table like we've done in the past.
143

143

00:09:29,799  -->  00:09:30,910
And this case,
144

144

00:09:30,910  -->  00:09:35,960
we could have specified that the index
be equal to the quality column.
145

145

00:09:37,160  -->  00:09:38,578
Whoops, let me spell that right.
146

146

00:09:38,578  -->  00:09:41,876
Quality column.
147

147

00:09:41,876  -->  00:09:44,460
Excellent.
148

148

00:09:44,460  -->  00:09:48,940
And now, let's take a look at that and
you get, pretty much the exact same thing,
149

149

00:09:48,940  -->  00:09:54,305
we got when we used the previous
methods of group by.
150

150

00:09:54,305  -->  00:09:55,758
Great.
151

151

00:09:55,758  -->  00:10:02,380
So, we're not quite yet
at the data visualization section,
152

152

00:10:02,380  -->  00:10:05,750
but I'll give you a little preview
taste of what that might look like.
153

153

00:10:06,760  -->  00:10:13,840
In order to show you the plots, I'm going
to need to call matplotlib and inline.
154

154

00:10:13,840  -->  00:10:16,610
That will allow us to see
the plots inline in the notebook.
155

155

00:10:18,570  -->  00:10:21,120
And then, what are we going to plot?
156

156

00:10:21,120  -->  00:10:22,770
How about we make a scatter plot.
157

157

00:10:23,920  -->  00:10:30,800
So we'll say dframe_wine, and I'm gonna
call a plot method on that data frame.
158

158

00:10:30,800  -->  00:10:32,040
So we've seen this once before,
159

159

00:10:32,040  -->  00:10:35,560
but we'll see it in much more
detail in future lectures.
160

160

00:10:36,680  -->  00:10:39,870
So the kind of plot I wanna make,
let's just make a scatter plot just for
161

161

00:10:39,870  -->  00:10:42,350
the heck of it.
162

162

00:10:42,350  -->  00:10:48,660
And on my x, I will make quality values.
163

163

00:10:48,660  -->  00:10:54,876
And I'm gonna plot those versus the y,
I'll say the alcohol.
164

164

00:11:00,297  -->  00:11:02,052
Okay, let's go ahead and do that.
165

165

00:11:02,052  -->  00:11:03,060
All right.
166

166

00:11:03,060  -->  00:11:07,409
So now I've made a scatter plot
of alcohol versus quality, and
167

167

00:11:07,409  -->  00:11:09,550
it's plotted all the points.
168

168

00:11:09,550  -->  00:11:14,080
So all the wines based on their quality,
rating, and
169

169

00:11:14,080  -->  00:11:16,880
their alcohol percentage content,
so that's pretty interesting.
170

170

00:11:18,240  -->  00:11:24,400
So we can see that the data is probably
better fit for a box plot of some sort.
171

171

00:11:24,400  -->  00:11:26,290
So we can get a more concise view and
172

172

00:11:26,290  -->  00:11:29,710
maybe add some standard deviation
lines and get averages.
173

173

00:11:31,080  -->  00:11:33,880
So we're going to learn about
box plots in the future.
174

174

00:11:33,880  -->  00:11:37,140
I'll leave it as a challenge to you
if you wanna figure out how to do
175

175

00:11:37,140  -->  00:11:39,010
box plots right now.
176

176

00:11:39,010  -->  00:11:42,180
But don't worry about it, we have
a whole section on data visualization,
177

177

00:11:42,180  -->  00:11:44,030
this is just a little taste of it.
178

178

00:11:44,030  -->  00:11:49,040
The most important thing to learn from
this lecture was data aggregation,
179

179

00:11:49,040  -->  00:11:50,900
so let's scroll back and
make sure we got that.
180

180

00:11:52,260  -->  00:11:57,200
So remember data aggregation
is basically just functions or
181

181

00:11:57,200  -->  00:12:02,110
methods you call that allow you to have
a scalar result afterwards such as mean,
182

182

00:12:02,110  -->  00:12:04,610
count, sum, etc.
183

183

00:12:04,610  -->  00:12:08,093
You can just call these by saying .mean,
.sum, .count.
184

184

00:12:08,093  -->  00:12:11,470
And you can also, the important part is,
make your own aggregations.
185

185

00:12:11,470  -->  00:12:12,780
So we did that.
186

186

00:12:12,780  -->  00:12:15,600
We made a function called max_to_min.
187

187

00:12:15,600  -->  00:12:19,471
And you can pass aggregation functions
on your data frame by using .agg.
188

188

00:12:19,471  -->  00:12:26,081
And then you can also pass string
aggregation methods by just saying .agg,
189

189

00:12:26,081  -->  00:12:30,120
and then the string name
of that aggregation.
190

190

00:12:31,370  -->  00:12:33,994
All right.
So we got a little taste of what it is to
191

191

00:12:33,994  -->  00:12:39,030
work with field data sets, and I'll see
you at the next lecture, lecture 45.
192

192

00:12:39,030  -->  00:12:41,211
Awesome.
193

193

00:12:41,211  -->  00:12:42,041
See you there.
