1
00:00:02,080 --> 00:00:02,950
In this demo,

2
00:00:02,950 --> 00:00:06,400
we will see how we can use parameter store parameters

3
00:00:06,400 --> 00:00:11,740
inside of run command executions.

4
00:00:11,740 --> 00:00:12,260
For this,

5
00:00:12,260 --> 00:00:15,130
we first browse to the parameter store to refresh our

6
00:00:15,130 --> 00:00:19,540
memories of which parameters we created.

7
00:00:19,540 --> 00:00:26,040
We have these two parameters, super‑admin‑name and super‑admin‑password here.

8
00:00:26,040 --> 00:00:32,210
Let's use them both in a run command. Over in Run Command,

9
00:00:32,210 --> 00:00:36,770
as we have done in previous modules, we execute a RunPowerShell

10
00:00:36,770 --> 00:00:43,140
document and plan on having it just output our value.

11
00:00:43,140 --> 00:00:48,920
We put this super simple PowerShell Write‑Output into the Commands text box

12
00:00:48,920 --> 00:00:55,340
here. We rerefer to an existing parameter store parameter.

13
00:00:55,340 --> 00:01:00,440
If it's not encrypted, it's by using this syntax here with the squiggly

14
00:01:00,440 --> 00:01:09,940
brackets and inside the ssm column, followed by the parameter key.

15
00:01:09,940 --> 00:01:12,940
It's important to understand what will happen next.

16
00:01:12,940 --> 00:01:17,380
The instance that we will run this command on will need to have

17
00:01:17,380 --> 00:01:23,480
permission to get parameters from the SSM service.

18
00:01:23,480 --> 00:01:27,760
This will be the case if you followed the earlier demos and used the default

19
00:01:27,760 --> 00:01:35,850
systems manager IAM profile on the EC2 instance. At runtime, the Systems Manager

20
00:01:35,850 --> 00:01:40,420
service or SSM agent, rather, on the EC2 instance,

21
00:01:40,420 --> 00:01:48,440
will look for this parameter and replace this reference with its value.

22
00:01:48,440 --> 00:01:52,180
We select one of our instances to run this on,

23
00:01:52,180 --> 00:01:59,440
disable the S3 logging, and execute the command.

24
00:01:59,440 --> 00:02:00,830
Just a few seconds later,

25
00:02:00,830 --> 00:02:05,550
we can check the output, and as expected and hoped, the

26
00:02:05,550 --> 00:02:10,040
parameter was replaced with the correct value.

27
00:02:10,040 --> 00:02:12,380
Okay, that was easy.

28
00:02:12,380 --> 00:02:15,680
Next step, what do we need to do and look out for

29
00:02:15,680 --> 00:02:20,840
when we need to get a secure string?

30
00:02:20,840 --> 00:02:23,770
We saw that for plain text parameters, there's no code

31
00:02:23,770 --> 00:02:27,430
required, but for encrypted values,

32
00:02:27,430 --> 00:02:34,040
we need to do a little bit more. As a template for other use cases at

33
00:02:34,040 --> 00:02:38,640
Globomantics, this short PowerShell script was developed.

34
00:02:38,640 --> 00:02:41,640
Let's go through it step by step.

35
00:02:41,640 --> 00:02:46,840
You will also find it in the exercise files.

36
00:02:46,840 --> 00:02:51,680
The first two lines depend on the environment we're in, specifically the

37
00:02:51,680 --> 00:02:55,980
region we will execute this run command in and secondly,

38
00:02:55,980 --> 00:03:00,350
the managed instance we want the run command to execute on. And the

39
00:03:00,350 --> 00:03:05,300
next step just sets the shell up to use the default AWS profile in

40
00:03:05,300 --> 00:03:12,760
our PowerShell AWS setup as referred to in the previous demo. In

41
00:03:12,760 --> 00:03:18,530
order to get the actual value from an encrypted parameter, we can use

42
00:03:18,530 --> 00:03:22,340
Get‑SSMParameterValue,

43
00:03:22,340 --> 00:03:28,700
but also have to pass the WithDecryption Boolean true parameter here to the

44
00:03:28,700 --> 00:03:35,650
cmdlet. The return object will have the plain text value then under Parameters

45
00:03:35,650 --> 00:03:42,840
and Value, and we will just store this value in the secretValue variable.

46
00:03:42,840 --> 00:03:51,550
Executing a run command is simply done using the Send‑SSMCommand cmdlet. Similar

47
00:03:51,550 --> 00:03:57,450
to when done in the console, we specify where to run the command on, which

48
00:03:57,450 --> 00:03:59,960
document to execute, in this case,

49
00:03:59,960 --> 00:04:04,410
the RunPowerShellScript document, and we pass in the

50
00:04:04,410 --> 00:04:07,440
required document parameters in the form of this hash

51
00:04:07,440 --> 00:04:12,160
table here. Just like in the console,

52
00:04:12,160 --> 00:04:15,500
we pass in the reference to the unencrypted parameter

53
00:04:15,500 --> 00:04:18,640
with the squiggly bracket syntax.

54
00:04:18,640 --> 00:04:25,840
But for the encrypted value, we have to use the value from the variabile.

55
00:04:25,840 --> 00:04:32,440
We store the output of the SendSSMCommand in the runPSCommand variable here,

56
00:04:32,440 --> 00:04:36,640
which will be the reference to this execution.

57
00:04:36,640 --> 00:04:40,580
We know this only takes a few seconds,

58
00:04:40,580 --> 00:04:48,350
so we can now go and use the Get‑SSMCommandInvocationDetail cmdlet with

59
00:04:48,350 --> 00:04:54,460
that reference under that instance we executed on to get the actual output

60
00:04:54,460 --> 00:04:59,640
just like what we did before in the console.

61
00:04:59,640 --> 00:05:03,730
Here in the output, we can see the standard output content

62
00:05:03,730 --> 00:05:08,040
with the output of our PowerShell document.

63
00:05:08,040 --> 00:05:12,540
So I guess we can already all see a small issue here.

64
00:05:12,540 --> 00:05:17,740
Our secret seems to have been locked in clear text.

65
00:05:17,740 --> 00:05:21,780
We can verify the same has happened in the console

66
00:05:21,780 --> 00:05:26,410
when inspecting that execution.

67
00:05:26,410 --> 00:05:32,740
That is obviously not great and definitely something we should be mindful of.

68
00:05:32,740 --> 00:05:35,370
Alternatively, for PowerShell scripts,

69
00:05:35,370 --> 00:05:39,020
we could look at passing secret parameters in as

70
00:05:39,020 --> 00:05:49,000
PowerShell secure string variables, making sure we never output any secrets or follow other similar patterns.

