WEBVTT
1
00:00:00.580 --> 00:00:02.850
Hello and welcome to the store.

2
00:00:03.040 --> 00:00:07.040
All right so now we are going to implement artificial intelligence from scratch.

3
00:00:07.040 --> 00:00:08.870
We're going to cut it line by line.

4
00:00:09.070 --> 00:00:12.550
And in this first good section we're going to import the libraries.

5
00:00:12.550 --> 00:00:17.880
But before we start with this first code section I would like to explain the connection between the

6
00:00:17.890 --> 00:00:20.140
AI and our map.

7
00:00:20.560 --> 00:00:24.000
That is why we're implementing this for them.

8
00:00:24.040 --> 00:00:27.880
What is the purpose of our AI and where will we be using it.

9
00:00:27.880 --> 00:00:30.160
So it's actually very simple.

10
00:00:30.170 --> 00:00:34.900
We're only making our AI to select the right action and each time.

11
00:00:35.140 --> 00:00:42.390
So OK we import the class from our file so we will be making this D2 in class in this file.

12
00:00:42.580 --> 00:00:51.220
But then we import it only to select the right action to play at each time and we select this action

13
00:00:51.490 --> 00:00:53.070
exactly at this line.

14
00:00:53.080 --> 00:01:00.580
Action equals brain update less reward less signal less signal will be the input of the neural network.

15
00:01:00.760 --> 00:01:05.950
You know it's composed of the three signals of the sensors Plus the orientation and minus orientation.

16
00:01:06.130 --> 00:01:09.890
So that's the inputs but then the output is the action to play.

17
00:01:10.030 --> 00:01:14.970
And that's only what we'll be taking from our AI I felt that we're about to make.

18
00:01:15.250 --> 00:01:16.310
So keep that in mind.

19
00:01:16.390 --> 00:01:17.590
It's very simple.

20
00:01:17.590 --> 00:01:25.900
We first import the decriminalise from the AI AI then we create the object brain from the human class

21
00:01:25.990 --> 00:01:32.110
which takes as inputs the encoded vectors for the states of five dimensions the three signals plus orientation

22
00:01:32.290 --> 00:01:33.970
plus minus orientation.

23
00:01:34.030 --> 00:01:36.910
Reactions go left go straight or go right.

24
00:01:37.030 --> 00:01:38.470
And then this gamma parameter.

25
00:01:38.560 --> 00:01:42.410
That's the only parameters of the class that we'll be making.

26
00:01:42.490 --> 00:01:50.140
And then once we create that object we select in the game class the action to play at each time.

27
00:01:50.140 --> 00:01:51.760
And that depends on the last word.

28
00:01:51.940 --> 00:01:58.450
And the Lusignan which is the input and that's all that's the only purpose of making this say that in

29
00:01:58.450 --> 00:02:03.620
order to have a real artificial intelligence playing the right actions then each time the right move

30
00:02:04.030 --> 00:02:08.480
instead of having random actions like we observed in the previous tutorial.

31
00:02:08.500 --> 00:02:12.620
All right so let's do this let's implement our artificial intelligence.

32
00:02:12.760 --> 00:02:18.430
And as we said we are going to start by importing all the libraries that we'll be using to implement.

33
00:02:18.460 --> 00:02:21.160
So that way we will have all the tools we need.

34
00:02:21.160 --> 00:02:22.790
All right so let's start with the first one.

35
00:02:22.810 --> 00:02:28.870
The first one is the inevitable the non-pay library the non-Thai library.

36
00:02:28.870 --> 00:02:35.270
I always recommend to import it it's the library which allows us to play and work with the Iraqis.

37
00:02:35.620 --> 00:02:40.180
And this here is just a shortcut more convenience when we want to use number.

38
00:02:40.590 --> 00:02:44.050
All right then second library is random.

39
00:02:44.050 --> 00:02:50.530
So this is just because we will be taking some random samples from different batches when implementing

40
00:02:50.530 --> 00:02:51.770
experience replay.

41
00:02:51.940 --> 00:02:54.650
So we have to import this random library as well.

42
00:02:54.880 --> 00:03:02.470
Then we will import os that will be just useful when we want to load the model because you know once

43
00:03:02.470 --> 00:03:08.710
the model is ready we will implement some code to save the model and then another code to load the model.

44
00:03:08.700 --> 00:03:14.140
That's when we want to you know save the brain and load the brain whenever you want to shut down your

45
00:03:14.140 --> 00:03:18.850
computer and we use the brain that was trained before for some new experiment.

46
00:03:19.060 --> 00:03:20.410
So that's important.

47
00:03:20.740 --> 00:03:27.230
Then we are going to import the torch library essential.

48
00:03:27.250 --> 00:03:32.170
That's because we will be implementing our neural network with my torch which I recommend much more

49
00:03:32.170 --> 00:03:36.670
than the other ones for artificial intelligence because it can handle dynamic graphs.

50
00:03:36.670 --> 00:03:46.150
So there we go with torche then from torche we are going to import torche start and end the end module

51
00:03:46.150 --> 00:03:51.730
is the most essential one that's the module that contains all the tools to implement some neural networks.

52
00:03:51.820 --> 00:03:57.370
And of course there will be a deep neural network that will take as inputs the three signals of the

53
00:03:57.370 --> 00:04:03.910
three sensors plus orientation and minus orientation and will return as output the action to play.

54
00:04:04.090 --> 00:04:09.220
Well actually to return the q values of the different actions and using a soft Max.

55
00:04:09.220 --> 00:04:15.970
We will return the action to play only one the most relevant one to accomplish the cards go to torture

56
00:04:16.000 --> 00:04:26.500
and in most essential one then we are going to give a short cut to the functional package.

57
00:04:26.550 --> 00:04:29.960
From here we go with the functional package from the end and Maggio.

58
00:04:29.970 --> 00:04:36.310
So this functional package contains the different functions that we use when implementing a neural network.

59
00:04:36.340 --> 00:04:42.240
So typically the last function we will be using the Google loss because that improves convergence and

60
00:04:42.240 --> 00:04:46.950
the loss is contained in this functional submodule from the end module.

61
00:04:47.190 --> 00:04:54.330
And since all this is pretty long we're going to give it a shortcut and we're going to call it f simply.

62
00:04:54.460 --> 00:04:57.260
Then only 3 modules to import left.

63
00:04:57.340 --> 00:05:05.710
So the next one is another central one which is up to him and we take it from still the torture library

64
00:05:06.220 --> 00:05:12.870
and then up there we go and let's just call it up to him instead of torture atom.

65
00:05:13.030 --> 00:05:15.250
That's of course for the optimizer.

66
00:05:15.340 --> 00:05:22.030
We will be importing some optimizers to perform C-grade in the sense so we will definitely need it and

67
00:05:22.030 --> 00:05:25.100
then we need to import autographs.

68
00:05:25.210 --> 00:05:28.670
And that's only to take the variable class from our regret.

69
00:05:29.170 --> 00:05:31.630
So the purpose of it is a little bit technical.

70
00:05:31.630 --> 00:05:39.010
Basically we need to import the variable class to make some conversion from tensors which are like more

71
00:05:39.010 --> 00:05:43.160
advanced arrays to avoid all that contains a gradient.

72
00:05:43.210 --> 00:05:46.640
So it's like we don't want to have only a tensor by itself.

73
00:05:46.660 --> 00:05:51.940
We want to put the tensor into a variable that will also contain a gradient and to do this we need to

74
00:05:51.940 --> 00:05:58.350
use the variable class to convert this tensor into a variable containing the tensor and the gradient.

75
00:05:58.520 --> 00:06:02.550
So that's a little bit technical but that's what we have to do when working with PI torch.

76
00:06:02.680 --> 00:06:04.830
And we do this thanks to the variable class.

77
00:06:04.840 --> 00:06:13.220
But before getting the variable class we need to import torche that grad and let's give a short cut

78
00:06:13.220 --> 00:06:26.430
as well undergrad and then from torch that undergrad we import Roybal There we go.

79
00:06:26.560 --> 00:06:31.390
And now we have all the libraries that we'll be using to implement our AI.

80
00:06:31.600 --> 00:06:34.050
So we won't bother importing any other library.

81
00:06:34.060 --> 00:06:35.670
We have all the tools we need.

82
00:06:35.830 --> 00:06:40.000
And now we are ready to create the architecture of the neural network.

83
00:06:40.030 --> 00:06:42.680
So that's exactly what we will do in the next tutorial.

84
00:06:42.760 --> 00:06:44.370
And until then enjoy AI.
