1
00:00:00,450 --> 00:00:03,170
Hello and welcome to this Python tutorial.

2
00:00:03,240 --> 00:00:09,180
So now that we are ready to train the network to minimize the squared distance between the outputs and

3
00:00:09,180 --> 00:00:13,820
the target thanks to what we did with eligibility trace in the previous section.

4
00:00:14,010 --> 00:00:19,560
Well basically we were ready to start the whole training by you know getting our input our target our

5
00:00:19,560 --> 00:00:24,600
predictions then computing the last error between the predictions and the target and then doing the

6
00:00:24,600 --> 00:00:28,420
backward propagation was to get a grid in the center of data weights.

7
00:00:28,470 --> 00:00:35,460
So we were ready to do all this but since we want to compute the moving average and 100 steps you know

8
00:00:35,460 --> 00:00:38,040
to keep track of the average during the training.

9
00:00:38,160 --> 00:00:45,060
Well just before we do this whole training we are going to make a class right now that we'll get this

10
00:00:45,060 --> 00:00:47,360
moving average of 100 steps.

11
00:00:47,550 --> 00:00:49,450
So no worries we will do it quickly.

12
00:00:49,500 --> 00:00:54,270
We'll make it class with three functions what we will do all this and the single tutorial so we'll do

13
00:00:54,270 --> 00:00:54,950
it quickly.

14
00:00:54,960 --> 00:00:55,890
We already did it.

15
00:00:55,890 --> 00:01:00,680
And besides we want to focus on the training right now because that's the most important.

16
00:01:00,840 --> 00:01:04,500
So let's make this class right now in this single tutorial.

17
00:01:04,500 --> 00:01:10,710
All right so we are going to introduce a new class which we're going to call and a for moving average

18
00:01:11,220 --> 00:01:13,290
and then here we go with our first function.

19
00:01:13,290 --> 00:01:20,490
So that of course the innate function that never changes in it and this and that function is going to

20
00:01:20,490 --> 00:01:22,140
take two arguments.

21
00:01:22,140 --> 00:01:30,450
The first one is self for the moving average future object and size which will correspond to the size

22
00:01:30,540 --> 00:01:34,620
of the list of the words of which we're going to compute the average.

23
00:01:34,620 --> 00:01:36,850
So this is going to be 100.

24
00:01:36,870 --> 00:01:39,800
All right so we have arguments for the function.

25
00:01:39,840 --> 00:01:42,120
Now let's go inside the function.

26
00:01:42,120 --> 00:01:47,460
Now you know what to do we have to initialize the variables specific to the object.

27
00:01:47,460 --> 00:01:48,250
And these are.

28
00:01:48,330 --> 00:01:56,820
Well first the first one is going to be a list of words that's going to be the list containing the 100

29
00:01:56,910 --> 00:01:59,310
words of which we're going to compute the average.

30
00:01:59,310 --> 00:02:05,450
So here right now we're just simply initializing this list with this empty list here.

31
00:02:05,850 --> 00:02:13,020
So list every word and then the second variable of our future object is going to be of course the size

32
00:02:13,500 --> 00:02:19,440
and the size is going to be equal to the arguments who will input when creating the future moving average

33
00:02:19,440 --> 00:02:20,250
objects.

34
00:02:20,580 --> 00:02:22,140
So sightseer.

35
00:02:22,400 --> 00:02:29,850
And already we are ready to move on to the next function which is going to be the add function and that

36
00:02:29,850 --> 00:02:32,210
will add the cumulative rewards.

37
00:02:32,220 --> 00:02:35,530
Be careful it's not the simple reward it's the cumulative reward.

38
00:02:35,610 --> 00:02:40,660
And that's because you know we are doing eligibility trace and therefore learn every 10 steps.

39
00:02:40,770 --> 00:02:44,480
And therefore learning with cumulative reward and not a simple reward.

40
00:02:44,700 --> 00:02:52,830
So this adds function that we're about to make will add the cumulative reward to that list of rewards.

41
00:02:52,830 --> 00:02:59,370
So Jeff we're going to call it ad of course and this function is going to take two arguments.

42
00:02:59,370 --> 00:03:05,070
The first one is self because we're going to use this list of words here because simply we are going

43
00:03:05,070 --> 00:03:08,350
to append the cumulative reward to this list of words.

44
00:03:08,490 --> 00:03:11,650
So we need the self to be able to get this to self.

45
00:03:11,670 --> 00:03:18,070
And the second one is going to be the rewards which will represent the cumulative reward.

46
00:03:18,570 --> 00:03:21,810
All right so there are two arguments of the function.

47
00:03:21,810 --> 00:03:25,370
Now let's go inside the function and let's define what it has to do.

48
00:03:25,710 --> 00:03:32,150
Ok so very simply the first thing has to do is whenever we get accumulative we want a new one.

49
00:03:32,190 --> 00:03:38,460
You know when we progress on tenue steps Well what do we have to do is add this cumulatively words to

50
00:03:38,460 --> 00:03:39,270
the list.

51
00:03:39,270 --> 00:03:43,650
And that's exactly what we're going to do we're going to write a line of code that will add this new

52
00:03:43,650 --> 00:03:49,240
cumulative reward that we're getting after progressing on ten steps to this list of words here.

53
00:03:49,320 --> 00:03:56,290
And to do this we have to separate two conditions because since he will be working with batches Well

54
00:03:56,340 --> 00:04:02,430
we want to be in some lists but in some other cases do we words can also be as a single element and

55
00:04:02,430 --> 00:04:09,840
the syntax to add an element to a list which is the list of words here is not the same whether you're

56
00:04:09,840 --> 00:04:13,330
adding a list or a single element.

57
00:04:13,350 --> 00:04:17,020
So we just have to make this a condition that will separate these two cases.

58
00:04:17,190 --> 00:04:22,800
And let's start with the first case which is the case when what we're adding to this list of words is

59
00:04:22,800 --> 00:04:30,240
a list and to do this we're going to add is instance in in parenthesis we put two arguments the first

60
00:04:30,240 --> 00:04:32,880
one is are we words that we're adding.

61
00:04:33,180 --> 00:04:34,510
So we weren't.

62
00:04:34,680 --> 00:04:37,470
And the second one is LIST.

63
00:04:37,620 --> 00:04:45,050
And so if instance words list means if the rewards are into a list.

64
00:04:45,060 --> 00:04:56,280
And so if the rewards are into a list what we do is very simply self that we take our list of reward

65
00:04:57,550 --> 00:05:05,110
and we are going to add this list because since this is a list what we can do is use a simple addition

66
00:05:05,110 --> 00:05:09,220
operation because we can some tulis to get the rewards.

67
00:05:09,220 --> 00:05:13,380
Here is a list because this will be called to true meaning for in this case.

68
00:05:13,380 --> 00:05:21,160
And so we can simply sum this list to our list of words and therefore we can simply have your list of

69
00:05:21,160 --> 00:05:24,300
rewards plus equals rewards.

70
00:05:24,880 --> 00:05:30,620
And by doing this we're just extending the list by some in these two lists together.

71
00:05:31,090 --> 00:05:31,560
All right.

72
00:05:31,600 --> 00:05:33,860
And then second condition.

73
00:05:33,860 --> 00:05:41,470
So we can simply add else so that if the rewards is not a list and therefore if it's a single element

74
00:05:42,130 --> 00:05:44,260
and so else what happens in that case.

75
00:05:44,470 --> 00:05:49,120
Well that's the same we want to add two words to our list of words.

76
00:05:49,420 --> 00:05:53,810
But we cannot use the syntax because we words will no longer be a list.

77
00:05:53,860 --> 00:05:55,320
It will be a single element.

78
00:05:55,540 --> 00:06:00,130
And so what we need to use is another syntax which is the append function.

79
00:06:00,130 --> 00:06:04,020
When you want to add a single element to a list you can add something to.

80
00:06:04,030 --> 00:06:05,890
You have to use the append function.

81
00:06:05,890 --> 00:06:07,860
And so this is exactly what we're going to do now.

82
00:06:07,890 --> 00:06:18,550
We are going to take our list of words of the object and paste that here and then add dot and then we

83
00:06:18,550 --> 00:06:20,080
go first one.

84
00:06:20,560 --> 00:06:24,560
And of course in parenthesis we put the elements we want to append.

85
00:06:24,790 --> 00:06:29,420
And this is of course b word but words in that case will not be a list.

86
00:06:29,500 --> 00:06:34,880
It will be a single element like a single cumulative word not into a list.

87
00:06:34,910 --> 00:06:39,490
All right and then we want to do this but now we have to add something more.

88
00:06:39,490 --> 00:06:45,310
It's what does happen when this list of words gets more than 100 elements.

89
00:06:45,580 --> 00:06:51,760
Well in that case what we have to do is delete the first element of this list every word to make sure

90
00:06:51,940 --> 00:06:56,440
that this list of words always contains no more than 100 elements.

91
00:06:56,440 --> 00:07:01,330
So exactly like what we did for the south driving car when making this go window and so to make sure

92
00:07:01,330 --> 00:07:11,170
of this we we're going to add a while condition specifying that whenever the length of our list of words

93
00:07:11,530 --> 00:07:19,060
that is number of elements in our list of words whenever this number is larger than self that size that

94
00:07:19,060 --> 00:07:23,900
is the size that we said here and which later will be equal to 100.

95
00:07:24,070 --> 00:07:25,390
When we create the object.

96
00:07:25,540 --> 00:07:30,250
Well as soon as the number of elements of this list of words is larger than 100.

97
00:07:30,370 --> 00:07:38,760
Well what we want to do is delete the first elements of our list of words which we can get by taking

98
00:07:38,860 --> 00:07:43,300
the index 0 that is the first index of our list of.

99
00:07:43,570 --> 00:07:51,400
This is the first element of our list of words and we want to delete it whenever our list of words contains

100
00:07:51,400 --> 00:07:53,590
more than 100 elements.

101
00:07:53,590 --> 00:08:00,100
So that with this with this conditional here we make sure that our list of words never contains more

102
00:08:00,100 --> 00:08:08,290
than 100 elements and therefore Now what we can do is make a new function to compute the average of

103
00:08:08,290 --> 00:08:12,490
our list of word which will contain on the run one hundred elements.

104
00:08:12,610 --> 00:08:17,400
And therefore we will compute the moving average of 100 steps each time.

105
00:08:18,090 --> 00:08:23,040
So let's make this the function it's going to be very easy because there is the main function in Python

106
00:08:23,220 --> 00:08:27,550
which is a function from non-pilot to compute the average of a list.

107
00:08:27,690 --> 00:08:32,820
And so let's introduce our last function here which we're going to call average and this function is

108
00:08:32,820 --> 00:08:38,430
going to take one argument which is going to be self because we're going to use of course still our

109
00:08:38,430 --> 00:08:44,360
list of words which is a variable of our object to self and coloring.

110
00:08:44,660 --> 00:08:51,450
And now let's compare the average and so directly we will return the average because we can get it with

111
00:08:51,780 --> 00:08:55,510
the mean function to which of course we're playing.

112
00:08:55,860 --> 00:09:01,840
Well what we want to compute the mean of that is our list of what I think I still copy that.

113
00:09:01,980 --> 00:09:03,000
Yes there we go.

114
00:09:03,210 --> 00:09:08,430
So we simply return the mean of our list of words and the mean.

115
00:09:08,520 --> 00:09:11,230
As I said is a function by non-Thai.

116
00:09:11,490 --> 00:09:16,770
So here and Anglish look at that mean self list of words.

117
00:09:16,770 --> 00:09:21,670
And then we go we have our average on 100 steps perfect.

118
00:09:21,720 --> 00:09:24,210
So we made that class very efficiently.

119
00:09:24,210 --> 00:09:29,060
Now we get the instructions on how to obtain a moving average of 100 steps.

120
00:09:29,280 --> 00:09:36,750
And since we're going to use one moving average object when doing the training well let's already create

121
00:09:36,750 --> 00:09:38,640
this moving average object.

122
00:09:38,730 --> 00:09:46,340
And so we're going to call it an A and simply and is going to be an object and a class.

123
00:09:46,560 --> 00:09:55,010
And as we said we want the size to be 100 because we want to compute the moving average on one 100 steps.

124
00:09:55,200 --> 00:09:56,100
So perfect.

125
00:09:56,100 --> 00:09:57,080
There we go.

126
00:09:57,120 --> 00:10:01,830
We are now ready to train our AI to finally be intelligent.

127
00:10:01,860 --> 00:10:06,120
It's about time it is from this point that our age will become smart.

128
00:10:06,210 --> 00:10:07,890
So I can't wait to train it.

129
00:10:07,920 --> 00:10:11,260
It's going to be quite easy because this is something we are dead.

130
00:10:11,400 --> 00:10:12,660
But this is going to be fun.

131
00:10:12,750 --> 00:10:18,090
And besides after that it will be time to have even more fun because basically our age I will be fully

132
00:10:18,090 --> 00:10:23,500
ready that is built and also intelligence and therefore we will execute the code.

133
00:10:23,700 --> 00:10:30,540
And then I will play Doom and eventually we'll watch the videos of our AI AI playing Doom and we will

134
00:10:30,540 --> 00:10:33,420
see if it manages to reach the vest.

135
00:10:33,510 --> 00:10:34,520
So I can't wait.

136
00:10:34,560 --> 00:10:35,810
Let's do that training.

137
00:10:35,820 --> 00:10:37,360
And until then I.
