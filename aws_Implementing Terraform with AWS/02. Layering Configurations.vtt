WEBVTT
1
00:00:01.140 --> 00:00:03.900
[Autogenerated] When I say layering configurations,

2
00:00:03.900 --> 00:00:10.010
I'm coming from the background of atomic deployments of configurations that

3
00:00:10.010 --> 00:00:12.550
are loosely coupled and that sounds like a lot of jargon.

4
00:00:12.550 --> 00:00:16.640
So let me sort of break this down with an example.

5
00:00:16.640 --> 00:00:22.940
You may have a region where you've deployed one or more VP CSS.

6
00:00:22.940 --> 00:00:24.690
That is your first layer.

7
00:00:24.690 --> 00:00:28.570
You've got your networking layer that is probably going to be a

8
00:00:28.570 --> 00:00:32.900
single atomic configuration that you deploy now.

9
00:00:32.900 --> 00:00:35.960
On top of that layer, you may deploy other things.

10
00:00:35.960 --> 00:00:39.640
Let's say there's a business logic app that needs to be deployed.

11
00:00:39.640 --> 00:00:42.100
It could be deployed in that vpc.

12
00:00:42.100 --> 00:00:44.480
So that's an additional layer.

13
00:00:44.480 --> 00:00:48.620
The business logic app needs of VPC to live in and you're providing one.

14
00:00:48.620 --> 00:00:50.950
But they're two separate configurations.

15
00:00:50.950 --> 00:00:51.790
This is important.

16
00:00:51.790 --> 00:00:54.450
And when I say loosely coupled when I use that term,

17
00:00:54.450 --> 00:00:57.780
what I mean is the business app needs a V p.

18
00:00:57.780 --> 00:00:57.970
C.

19
00:00:57.970 --> 00:00:59.950
But it doesn't need that vpc.

20
00:00:59.950 --> 00:01:03.330
So you can make changes to your existing VPC without

21
00:01:03.330 --> 00:01:05.940
breaking the business logic app,

22
00:01:05.940 --> 00:01:09.130
and you can make changes to your existing business logic app

23
00:01:09.130 --> 00:01:12.160
configuration without breaking the VPC.

24
00:01:12.160 --> 00:01:14.440
They're not super tightly coupled.

25
00:01:14.440 --> 00:01:17.920
Another example is you may have a Lambda function that

26
00:01:17.920 --> 00:01:20.140
talks to that business logic app.

27
00:01:20.140 --> 00:01:24.120
You may not deploy both of those in the same configuration because

28
00:01:24.120 --> 00:01:27.390
you might decide to swap that lambda function out with something

29
00:01:27.390 --> 00:01:29.540
running in Kubernetes as a service.

30
00:01:29.540 --> 00:01:31.620
Who knows what's going to come so you don't want to

31
00:01:31.620 --> 00:01:33.420
put them in the same configuration?

32
00:01:33.420 --> 00:01:36.740
Because now you have to alter that configuration lot instead of just

33
00:01:36.740 --> 00:01:39.680
building a new configuration with whatever you're replacing,

34
00:01:39.680 --> 00:01:41.040
land it with.

35
00:01:41.040 --> 00:01:44.130
Now Lambda may talk directly to a dynamo DB,

36
00:01:44.130 --> 00:01:46.000
and those two might be tightly coupled.

37
00:01:46.000 --> 00:01:47.210
And that might make sense.

38
00:01:47.210 --> 00:01:49.960
You don't have to keep everything in its own configuration

39
00:01:49.960 --> 00:01:52.040
because that could make it too complex.

40
00:01:52.040 --> 00:01:56.590
So if you're Lambda Function and your dynamo DB table are tightly coupled,

41
00:01:56.590 --> 00:01:59.840
their their partners, they're not going anywhere without each other.

42
00:01:59.840 --> 00:02:04.240
In that particular case, ID recommend putting them in the same configuration.

43
00:02:04.240 --> 00:02:07.570
Another example would be if you have a data warehouse in your

44
00:02:07.570 --> 00:02:10.950
application and that data warehouses pulling information from

45
00:02:10.950 --> 00:02:12.990
your business logic app again.

46
00:02:12.990 --> 00:02:14.180
That could be a tight coupling,

47
00:02:14.180 --> 00:02:17.650
but it's probably marvel loose coupling and that data warehouses

48
00:02:17.650 --> 00:02:20.660
probably pulling information from other apps as well,

49
00:02:20.660 --> 00:02:23.870
so that's probably gonna be a separate configuration that's also

50
00:02:23.870 --> 00:02:28.640
using that layer of the VPC as a place to be hosted.

51
00:02:28.640 --> 00:02:31.530
So that's what I'm talking about when I say layering configurations,

52
00:02:31.530 --> 00:02:35.040
it's making that determination from an architecture standpoint.

53
00:02:35.040 --> 00:02:37.920
Should these resources share a configuration,

54
00:02:37.920 --> 00:02:41.350
or do they just need to reference each other loosely for

55
00:02:41.350 --> 00:02:49.000
somewhere to be like the business logic, app and the VPC that gets us into the topic of data sources?

