1
00:00:01,140 --> 00:00:05,650
[Autogenerated] the first thing you're going to want to do is run the A W s

2
00:00:05,650 --> 00:00:11,400
CLI a W s configure command to set your access and secret keys for the

3
00:00:11,400 --> 00:00:15,040
account you'll be using for this demonstration.

4
00:00:15,040 --> 00:00:17,080
Now, I've already set that up.

5
00:00:17,080 --> 00:00:20,640
Let's go ahead and open up a command terminal.

6
00:00:20,640 --> 00:00:21,150
All right,

7
00:00:21,150 --> 00:00:26,440
We're in the command terminal and let's just go to the proper directory.

8
00:00:26,440 --> 00:00:27,200
There we do.

9
00:00:27,200 --> 00:00:33,820
If I run a W s configure with no arguments, it's gonna let me know.

10
00:00:33,820 --> 00:00:38,240
I've already set my access key and my secret access key,

11
00:00:38,240 --> 00:00:43,840
And I've set a default region of US East one and default output of none.

12
00:00:43,840 --> 00:00:48,280
And then all that information gets stored in my home directory in the dot A.

13
00:00:48,280 --> 00:00:50,840
W s subdirectory.

14
00:00:50,840 --> 00:00:56,030
Now that we have that set up, if I don't specify credentials for an AWS provider,

15
00:00:56,030 --> 00:00:58,950
it will use the default credentials that I just

16
00:00:58,950 --> 00:01:02,140
configured with the A W s configure command.

17
00:01:02,140 --> 00:01:05,730
All right, so now that we have our credentials ready to go,

18
00:01:05,730 --> 00:01:08,430
the next step is the standard terra form workflow.

19
00:01:08,430 --> 00:01:15,140
First, we'll run terra form in it.

20
00:01:15,140 --> 00:01:17,160
And just to refresh your memory,

21
00:01:17,160 --> 00:01:20,930
the terra form initialization processes what actually downloads

22
00:01:20,930 --> 00:01:23,560
the provider and any modules that you're using.

23
00:01:23,560 --> 00:01:28,440
And it initializer is the back end that is used to store state data.

24
00:01:28,440 --> 00:01:32,440
If we look over to the directory structure in the left we can expand

25
00:01:32,440 --> 00:01:37,190
the dot terra form folder and see it created a modules folder and a

26
00:01:37,190 --> 00:01:39,260
plug INS folder in the modules folder.

27
00:01:39,260 --> 00:01:42,640
We have the VPC module that we just downloaded.

28
00:01:42,640 --> 00:01:44,730
And if we expand plug ins we can see,

29
00:01:44,730 --> 00:01:48,620
there's the terra form provider A W s plug in.

30
00:01:48,620 --> 00:01:52,840
So it downloaded the executable that is used for the provider.

31
00:01:52,840 --> 00:01:55,460
All right, so we're all set on that page.

32
00:01:55,460 --> 00:01:59,300
Now it's time to plan our deployment using terra form plan,

33
00:01:59,300 --> 00:02:04,270
so we'll run terra form plan dash out vpc dot t f plan,

34
00:02:04,270 --> 00:02:10,440
and it will output an execution plan to vpc dot t f plan.

35
00:02:10,440 --> 00:02:13,940
Go ahead and copy that and paste it down here.

36
00:02:13,940 --> 00:02:14,400
All right,

37
00:02:14,400 --> 00:02:18,170
so now it's actually checking the state and going out to

38
00:02:18,170 --> 00:02:21,600
AWS and seeing what resources it needs to create to make

39
00:02:21,600 --> 00:02:24,840
our configuration a reality.

40
00:02:24,840 --> 00:02:26,810
And it had to create a few things,

41
00:02:26,810 --> 00:02:32,740
so it's gonna add 15 new resources based off of the execution plan.

42
00:02:32,740 --> 00:02:34,270
If that sounds good to us, we can,

43
00:02:34,270 --> 00:02:37,740
go ahead and run that execution plan by running terra form.

44
00:02:37,740 --> 00:02:41,340
Apply vpc dot t F plan.

45
00:02:41,340 --> 00:02:44,700
Let's go ahead and copy that and well,

46
00:02:44,700 --> 00:02:48,680
paced it down here and now it's going to go ahead and create

47
00:02:48,680 --> 00:02:55,440
exactly what it just showed us in the plan.

48
00:02:55,440 --> 00:02:56,250
Unfortunately,

49
00:02:56,250 --> 00:02:59,670
I'm not creating any Nat gateways or anything that takes a while to create.

50
00:02:59,670 --> 00:03:03,130
So this VPC creation process happens pretty quickly,

51
00:03:03,130 --> 00:03:05,590
and now you can see we have our outputs here.

52
00:03:05,590 --> 00:03:10,410
We've got our d be subject group, our public sub nets and our VPC IDE.

53
00:03:10,410 --> 00:03:15,740
Let's go over to the AWS console and see what's generated there.

54
00:03:15,740 --> 00:03:15,980
All right,

55
00:03:15,980 --> 00:03:20,120
here we are in the VPC management console and let's

56
00:03:20,120 --> 00:03:24,840
go ahead and click on Rvp CSS.

57
00:03:24,840 --> 00:03:29,630
And as you can see, there is now a VPC named Dev VPC,

58
00:03:29,630 --> 00:03:33,040
and it has the correct cider block.

59
00:03:33,040 --> 00:03:35,460
Let's scroll this up a little bit so we can get a

60
00:03:35,460 --> 00:03:37,940
better look at what's going on here.

61
00:03:37,940 --> 00:03:42,900
So if we look at cider blocks, looks good, 10 000 slash 16.

62
00:03:42,900 --> 00:03:44,300
And if we look at tags,

63
00:03:44,300 --> 00:03:49,260
we have our environment is Dev Name is Dev Dash Vpc and team is infra.

64
00:03:49,260 --> 00:03:52,840
So this was all successfully created.

65
00:03:52,840 --> 00:03:54,810
Big thumbs up for us.

66
00:03:54,810 --> 00:04:02,000
We have accomplished our goal of deploying a dead VPC for our developers to mess around in.

