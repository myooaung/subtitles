WEBVTT
1
00:00:01.140 --> 00:00:02.960
[Autogenerated] Terra form would not be much of an

2
00:00:02.960 --> 00:00:05.610
application without its providers.

3
00:00:05.610 --> 00:00:10.230
Providers are what Terra form uses to communicate with all the different cloud

4
00:00:10.230 --> 00:00:14.380
services and other pieces of software that are out there now.

5
00:00:14.380 --> 00:00:17.370
A few quick refreshers on terra form providers.

6
00:00:17.370 --> 00:00:18.980
They are versioning.

7
00:00:18.980 --> 00:00:21.830
So when new versions of a provider come out,

8
00:00:21.830 --> 00:00:24.880
you can wait on those versions by specifying the version

9
00:00:24.880 --> 00:00:26.750
you want to use in your configuration.

10
00:00:26.750 --> 00:00:30.470
And that can become really important when a major version comes out and

11
00:00:30.470 --> 00:00:34.040
it might break the way that the old provider work.

12
00:00:34.040 --> 00:00:37.980
There are two primary things that you'll find within providers.

13
00:00:37.980 --> 00:00:39.980
The first one is data sources.

14
00:00:39.980 --> 00:00:44.960
So if you want to get information out of a provider, let's say a ws.

15
00:00:44.960 --> 00:00:46.140
In our case,

16
00:00:46.140 --> 00:00:49.770
you would use data sources to do that so you could query for things like a V,

17
00:00:49.770 --> 00:00:55.440
P C or am I images or any number of other data sources that you would want to

18
00:00:55.440 --> 00:01:00.670
query for and then use those data sources to create resources.

19
00:01:00.670 --> 00:01:04.770
Resources are the main thing you'll be using in most providers,

20
00:01:04.770 --> 00:01:08.310
because we're here to create infrastructure and infrastructure is

21
00:01:08.310 --> 00:01:14.310
really just a collection of resources providers also have modules

22
00:01:14.310 --> 00:01:17.400
which are available on the Terra form registry,

23
00:01:17.400 --> 00:01:19.890
or you can create your own.

24
00:01:19.890 --> 00:01:22.420
Some of those modules are actually maintained,

25
00:01:22.420 --> 00:01:25.870
or at least verified by a W s and hash corpse.

26
00:01:25.870 --> 00:01:28.930
So you know that they're fit for use and we're going to be

27
00:01:28.930 --> 00:01:33.240
making use of modules heavily in this course.

28
00:01:33.240 --> 00:01:35.380
The last thing to know about terra form providers

29
00:01:35.380 --> 00:01:37.200
and especially the AWS provider,

30
00:01:37.200 --> 00:01:41.440
is they usually have some form of authentication built into them.

31
00:01:41.440 --> 00:01:47.140
How do you communicate and authenticate with the API endpoint of a provider?

32
00:01:47.140 --> 00:01:52.640
In the case of A W S, we are going to be authenticating against I am.

33
00:01:52.640 --> 00:01:57.440
Let's take a deeper look into how that is actually going to work

34
00:01:57.440 --> 00:01:59.860
when it comes to authentication with the A.

35
00:01:59.860 --> 00:02:00.820
W s provider.

36
00:02:00.820 --> 00:02:03.610
There are a number of different ways to do that.

37
00:02:03.610 --> 00:02:06.630
You could do it using static credentials.

38
00:02:06.630 --> 00:02:08.550
When I say static credentials,

39
00:02:08.550 --> 00:02:11.870
you could hard code your access key and secret key

40
00:02:11.870 --> 00:02:14.140
into the terra form configuration.

41
00:02:14.140 --> 00:02:19.740
Obviously, that is not recommended, but it is an option that you could do.

42
00:02:19.740 --> 00:02:23.340
A slightly better option would be to use environmental variables

43
00:02:23.340 --> 00:02:26.380
so you can set certain environmental variables,

44
00:02:26.380 --> 00:02:29.770
and the terra form provider will find those variables

45
00:02:29.770 --> 00:02:32.140
and use them for authentication.

46
00:02:32.140 --> 00:02:34.440
And we'll see that later.

47
00:02:34.440 --> 00:02:40.840
You can also use the AWS CLI to create a shared credentials file

48
00:02:40.840 --> 00:02:44.120
that shared credentials file typically lives in your user

49
00:02:44.120 --> 00:02:47.650
directory in a subdirectory called dot AWS,

50
00:02:47.650 --> 00:02:52.540
and you can have multiple profiles within that shared credentials file.

51
00:02:52.540 --> 00:02:54.610
That's an authentication method that we're going to

52
00:02:54.610 --> 00:02:56.940
be using a lot in the examples.

53
00:02:56.940 --> 00:03:01.920
And then, finally, the last authentication method is through an instance.

54
00:03:01.920 --> 00:03:01.980
Oh,

55
00:03:01.980 --> 00:03:08.670
file instantiate profiles are away for a resource in AWS to assume a

56
00:03:08.670 --> 00:03:13.450
role from I am and that gives it permissions to do certain things

57
00:03:13.450 --> 00:03:16.540
within the account or across accounts.

58
00:03:16.540 --> 00:03:20.290
Instantiate profiles are well understood by terra form,

59
00:03:20.290 --> 00:03:24.170
and they're typically used in automation situations where

60
00:03:24.170 --> 00:03:27.390
your ______ form commands will be running from an E C two

61
00:03:27.390 --> 00:03:31.040
instantiate container within AWS.

62
00:03:31.040 --> 00:03:37.000
Why don't we take a look at a few examples oven A. W s provider configuration

