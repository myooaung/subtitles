WEBVTT
1
00:00:01.040 --> 00:00:03.580
[Autogenerated] We're starting out simple with just a development environment.

2
00:00:03.580 --> 00:00:08.030
But let's say we're expanding out in a fairly common deployment patterns.

3
00:00:08.030 --> 00:00:11.580
At least I've seen in A W S environments a lot of time.

4
00:00:11.580 --> 00:00:16.440
You will have an admin account where your admin users live.

5
00:00:16.440 --> 00:00:18.570
And then for each environment,

6
00:00:18.570 --> 00:00:23.250
you might have a separate A W s account one for Q a one for staging,

7
00:00:23.250 --> 00:00:24.740
one for production.

8
00:00:24.740 --> 00:00:28.100
Now how can you manage your state effectively for all these

9
00:00:28.100 --> 00:00:31.040
different accounts without going a little bonkers?

10
00:00:31.040 --> 00:00:35.010
A pattern that's recommended by Hash Corp is to locate your

11
00:00:35.010 --> 00:00:39.840
bucket and dynamo DB table in the admin account.

12
00:00:39.840 --> 00:00:44.990
And all of your admin users are also going to be in that admin account,

13
00:00:44.990 --> 00:00:47.900
which means they'll have permissions to write and read

14
00:00:47.900 --> 00:00:50.820
data to that S3 bucket and that table.

15
00:00:50.820 --> 00:00:54.040
So they're all set as they need to manipulate state

16
00:00:54.040 --> 00:00:57.040
files for different accounts.

17
00:00:57.040 --> 00:01:01.180
They also will have a role that they can assume in each of these

18
00:01:01.180 --> 00:01:04.390
accounts to deploy the actual infrastructure.

19
00:01:04.390 --> 00:01:08.060
So when they want to run a terra form config,

20
00:01:08.060 --> 00:01:11.440
they're going to reference, say, the Q A account.

21
00:01:11.440 --> 00:01:14.810
They'll write their state data to the bucket that is in the

22
00:01:14.810 --> 00:01:18.410
admin account and then deploy the actual infrastructure by

23
00:01:18.410 --> 00:01:21.640
assuming that role in the Q A account.

24
00:01:21.640 --> 00:01:25.120
When they want to do the same thing for the staging account again,

25
00:01:25.120 --> 00:01:28.820
they'll write the data to a state file in the S3 bucket in the admin

26
00:01:28.820 --> 00:01:33.200
account and then provisioned the infrastructure and the staging account and

27
00:01:33.200 --> 00:01:35.780
then rinse and repeat for the production account.

28
00:01:35.780 --> 00:01:37.280
By following this pattern,

29
00:01:37.280 --> 00:01:41.970
your state data is safely stored away from all of these other accounts,

30
00:01:41.970 --> 00:01:46.140
and you've really locked down access to it to a certain degree.

31
00:01:46.140 --> 00:01:46.370
Now,

32
00:01:46.370 --> 00:01:50.680
if you're going to use the same S3 bucket and table for multiple environments,

33
00:01:50.680 --> 00:01:53.650
it is important to note that while you can have granular

34
00:01:53.650 --> 00:01:56.610
permissions on the objects in the S3 bucket,

35
00:01:56.610 --> 00:02:00.860
you can't assign granular permissions to the Dynamo DB table.

36
00:02:00.860 --> 00:02:06.050
So anybody that has access to that dynamodb table could potentially lock

37
00:02:06.050 --> 00:02:08.800
any of the states that are stored in that S3 bucket.

38
00:02:08.800 --> 00:02:11.880
So probably something just to be cognizant about.

39
00:02:11.880 --> 00:02:22.000
If you're planning on adopting this type of architecture, er now let's get into migrating your state into the S3 bucket

