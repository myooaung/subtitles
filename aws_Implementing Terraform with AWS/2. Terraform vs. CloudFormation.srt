1
00:00:01,040 --> 00:00:05,540
[Autogenerated] CloudFormation is the native tool within AWS to

2
00:00:05,540 --> 00:00:10,900
work with infrastructure as code CloudFormation supports JSON and

3
00:00:10,900 --> 00:00:13,840
UI XAML as its to language formats.

4
00:00:13,840 --> 00:00:18,010
The comparison is the Terra form uses Hash E Corp configuration language,

5
00:00:18,010 --> 00:00:21,300
which is actually a bit of an abstraction from JSON.

6
00:00:21,300 --> 00:00:24,420
You could technically, right, you're Tara Farm in raw JSON,

7
00:00:24,420 --> 00:00:27,020
but I wouldn't recommend it.

8
00:00:27,020 --> 00:00:31,990
So you will be writing things in HCL in CloudFormation when you want

9
00:00:31,990 --> 00:00:36,040
to give a CloudFormation template values to use.

10
00:00:36,040 --> 00:00:37,710
Those are called parameters.

11
00:00:37,710 --> 00:00:39,190
In the world of ______ form.

12
00:00:39,190 --> 00:00:42,970
Those very same things are called variables, which could be a little confusing.

13
00:00:42,970 --> 00:00:43,950
But just remember,

14
00:00:43,950 --> 00:00:49,440
variables are those things that are inputs into a ______ for module.

15
00:00:49,440 --> 00:00:51,480
Within that module.

16
00:00:51,480 --> 00:00:55,270
Terra Form has a concept of local variables when these are just

17
00:00:55,270 --> 00:00:59,190
local values that are computed by terra form is part of the

18
00:00:59,190 --> 00:01:02,650
configuration something that might be reusable throughout the

19
00:01:02,650 --> 00:01:04,860
code like a common set of tags.

20
00:01:04,860 --> 00:01:10,440
For all your resources, CloudFormation has a similar construct called mapping.

21
00:01:10,440 --> 00:01:14,040
If you want to process some kind of logic within your

22
00:01:14,040 --> 00:01:16,140
configuration with CloudFormation,

23
00:01:16,140 --> 00:01:19,080
you would do that with conditions in terra form.

24
00:01:19,080 --> 00:01:22,710
They simply have logical operators and comparison operators

25
00:01:22,710 --> 00:01:25,740
that you can use within your configuration.

26
00:01:25,740 --> 00:01:29,660
Now both CloudFormation and Terra form have resources as their core

27
00:01:29,660 --> 00:01:33,000
construct because you're creating resources in A W S.

28
00:01:33,000 --> 00:01:36,340
And fortunately, they call it the same thing.

29
00:01:36,340 --> 00:01:37,980
Also, within CloudFormation,

30
00:01:37,980 --> 00:01:41,650
there are some intrinsic functions you can use to either manipulate

31
00:01:41,650 --> 00:01:45,870
values or refer to other values within the configuration.

32
00:01:45,870 --> 00:01:48,660
Terra Form also has some built in functions,

33
00:01:48,660 --> 00:01:51,740
and to a certain degree there are actually more robust.

34
00:01:51,740 --> 00:01:54,130
Then what's available within CloudFormation.

35
00:01:54,130 --> 00:01:58,140
It's something that attracted me to terra form in the first place.

36
00:01:58,140 --> 00:02:02,910
If you want to use an existing stacked to augment the stack you're creating,

37
00:02:02,910 --> 00:02:07,500
you can use nested stacks so you might have a VPC stack that

38
00:02:07,500 --> 00:02:10,640
calls another stack to create some resources.

39
00:02:10,640 --> 00:02:14,310
In a similar vein, Terra Form has the concept of modules.

40
00:02:14,310 --> 00:02:17,980
You can invoke a module within a configuration to create

41
00:02:17,980 --> 00:02:22,040
a set of resources in CloudFormation.

42
00:02:22,040 --> 00:02:25,930
It has a concept of implicit dependency between resources.

43
00:02:25,930 --> 00:02:29,740
So if one resources refers to another one,

44
00:02:29,740 --> 00:02:33,550
CloudFormation understands I have to create that other resource first,

45
00:02:33,550 --> 00:02:36,840
before I can create this resource that is referring to it.

46
00:02:36,840 --> 00:02:39,040
Terra Form has the same concept.

47
00:02:39,040 --> 00:02:42,840
It creates a dependency craft when you're running a plan,

48
00:02:42,840 --> 00:02:46,100
and if it sees a dependency between resources,

49
00:02:46,100 --> 00:02:49,410
it will create the resource that the other one is dependent on.

50
00:02:49,410 --> 00:02:51,740
First makes sense, right?

51
00:02:51,740 --> 00:03:01,000
That's a comparison of CloudFormation and terra form. Now let's talk about our real world scenario with Globomantics.

