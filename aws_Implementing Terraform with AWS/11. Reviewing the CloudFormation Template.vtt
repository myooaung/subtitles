WEBVTT
1
00:00:01.140 --> 00:00:04.550
[Autogenerated] All right, we have the lambda dot template file open.

2
00:00:04.550 --> 00:00:08.660
This is these template that we're gonna use to deploy the stack If

3
00:00:08.660 --> 00:00:10.400
you've ever worked with CloudFormation before.

4
00:00:10.400 --> 00:00:14.320
You know, it's pretty verbose in particular because it's in JSON,

5
00:00:14.320 --> 00:00:16.150
which just tends to be very verbose.

6
00:00:16.150 --> 00:00:17.740
You can also use Yamil,

7
00:00:17.740 --> 00:00:22.650
but I prefer JSON because that's just what I like scrolling through here.

8
00:00:22.650 --> 00:00:27.640
First, we define our parameters for the Dynamo DB table that is deployed,

9
00:00:27.640 --> 00:00:32.190
so we have to define some attributes and keys so we'll scroll through those.

10
00:00:32.190 --> 00:00:34.640
Then we have to define the read and write capacity

11
00:00:34.640 --> 00:00:36.920
units for this dynamodb table.

12
00:00:36.920 --> 00:00:37.600
No big deal.

13
00:00:37.600 --> 00:00:39.150
Those all have default values.

14
00:00:39.150 --> 00:00:43.030
We don't have to submit a parameter for those scrolling down some more.

15
00:00:43.030 --> 00:00:45.870
We get into the parameters that we are specifying

16
00:00:45.870 --> 00:00:49.060
values for so the function bucket, the function key,

17
00:00:49.060 --> 00:00:52.080
the Lambda Security Group and the sub Net IDs.

18
00:00:52.080 --> 00:00:55.290
And you could see the type in there is comma delimited list.

19
00:00:55.290 --> 00:00:59.360
So it's actually looking for a string, not a list object type from terra form,

20
00:00:59.360 --> 00:01:01.740
which is why we had to do that conversion.

21
00:01:01.740 --> 00:01:04.960
Then we get into the resources and there's a few resources here.

22
00:01:04.960 --> 00:01:07.350
The first is the Dynamo DB table.

23
00:01:07.350 --> 00:01:10.140
We are naming that Globo orders,

24
00:01:10.140 --> 00:01:13.260
and we're setting up a stream specifications and a stream

25
00:01:13.260 --> 00:01:16.240
view type to work with the Lambda Function.

26
00:01:16.240 --> 00:01:19.820
Going into the attributes definitions, we've got two attributes here.

27
00:01:19.820 --> 00:01:22.820
One is username, which is set up in the parameters,

28
00:01:22.820 --> 00:01:24.740
and the second one is Time stamp.

29
00:01:24.740 --> 00:01:28.240
And then we have to set up a key schema for that as well.

30
00:01:28.240 --> 00:01:28.790
Below that,

31
00:01:28.790 --> 00:01:33.040
we get into our provisioned throughput for read and write capacity units.

32
00:01:33.040 --> 00:01:35.550
And that's everything for the Dynamo DB table.

33
00:01:35.550 --> 00:01:36.760
Pretty straightforward.

34
00:01:36.760 --> 00:01:39.140
The next thing is the role.

35
00:01:39.140 --> 00:01:42.620
This is the role that the land of function is going to assume,

36
00:01:42.620 --> 00:01:46.630
So we need to give it permissions first to assume the role so that

37
00:01:46.630 --> 00:01:51.140
assume role policy document allows it to do that.

38
00:01:51.140 --> 00:01:52.830
Then we have two sets, um, policies.

39
00:01:52.830 --> 00:01:56.080
What is this land of function able to do so we'll

40
00:01:56.080 --> 00:01:57.820
scroll down into policies here,

41
00:01:57.820 --> 00:02:00.770
and we see that we are allowing it to invoke itself,

42
00:02:00.770 --> 00:02:03.540
so that's probably pretty important.

43
00:02:03.540 --> 00:02:08.140
Then we're allowing it to interact with logs in a few different ways,

44
00:02:08.140 --> 00:02:09.460
scrolling down some more.

45
00:02:09.460 --> 00:02:12.180
We get into the Dynamo db permissions.

46
00:02:12.180 --> 00:02:16.030
So its able to get information from the Dynamo DB as well as

47
00:02:16.030 --> 00:02:19.690
described the streams that are available from that dynamo DB

48
00:02:19.690 --> 00:02:22.480
table scrolling down a little bit more.

49
00:02:22.480 --> 00:02:25.780
We give it the permissions to publish to SNS,

50
00:02:25.780 --> 00:02:28.990
which is part of what's in the function and then,

51
00:02:28.990 --> 00:02:29.590
lastly.

52
00:02:29.590 --> 00:02:30.950
And this is the really important one.

53
00:02:30.950 --> 00:02:34.450
We are giving it the ability to create a network interface,

54
00:02:34.450 --> 00:02:38.410
described network interfaces and delete network interfaces for E C two,

55
00:02:38.410 --> 00:02:43.030
which is what allows it to create those network interfaces in the VPC.

56
00:02:43.030 --> 00:02:46.510
So that's the I am role for the land of function scrolling down.

57
00:02:46.510 --> 00:02:48.640
Let's look at the function itself.

58
00:02:48.640 --> 00:02:51.740
So we're creating a function named publish orders.

59
00:02:51.740 --> 00:02:53.190
We're telling it where the code is.

60
00:02:53.190 --> 00:02:55.240
So the code is in Ann S3 bucket,

61
00:02:55.240 --> 00:02:58.050
and we refer back to the parameter of that bucket,

62
00:02:58.050 --> 00:03:03.900
and then we also refer to the S3 key where it is stored in that bucket.

63
00:03:03.900 --> 00:03:07.940
Then we assigned the role that we just created to this Lambda function.

64
00:03:07.940 --> 00:03:09.020
It's going down a little bit more.

65
00:03:09.020 --> 00:03:14.580
We set the handler and the runtime for Node.js and then in vpc config.

66
00:03:14.580 --> 00:03:19.160
It needs two pieces of information it needs that security group IDE to

67
00:03:19.160 --> 00:03:23.740
associate with the network interfaces it will create and then the sub net IDs

68
00:03:23.740 --> 00:03:26.240
where it's going to create those network interfaces.

69
00:03:26.240 --> 00:03:29.940
So we have supplied all of that information through parameters.

70
00:03:29.940 --> 00:03:32.620
Then we get into the last section, which is outputs.

71
00:03:32.620 --> 00:03:36.450
The outputs are the name of the Dynamo DB table and

72
00:03:36.450 --> 00:03:38.890
then the arm of the Lambda Function,

73
00:03:38.890 --> 00:03:44.340
and those are to fairly useful pieces of information in most configurations.

74
00:03:44.340 --> 00:03:46.540
All right, so that's everything in the template.

75
00:03:46.540 --> 00:03:48.970
We're not gonna go through what's in the Lambda function

76
00:03:48.970 --> 00:03:50.760
because it's not entirely functional.

77
00:03:50.760 --> 00:03:51.380
Anyway.

78
00:03:51.380 --> 00:03:53.990
It's really just important that we can deploy the Lambda

79
00:03:53.990 --> 00:04:02.000
function to prove out the concept. So let's go ahead and get this configuration deployed.

