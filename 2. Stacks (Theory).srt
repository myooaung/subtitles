1
1

00:00:00,416  -->  00:00:02,999
(upbeat music)
2

2

00:00:05,230  -->  00:00:06,063
<v Sarah>All right,</v>
3

3

00:00:06,063  -->  00:00:09,950
so let's get going on talking about stacks.
4

4

00:00:09,950  -->  00:00:12,290
Now, as I mentioned in the introduction,
5

5

00:00:12,290  -->  00:00:16,340
the stack is a conceptual or abstract data type.
6

6

00:00:16,340  -->  00:00:19,910
So what it does is it dictates the operations
7

7

00:00:19,910  -->  00:00:22,140
we can perform on a set of data,
8

8

00:00:22,140  -->  00:00:25,090
but it doesn't tell us how the data should be stored.
9

9

00:00:25,090  -->  00:00:28,270
A stack says I don't care how the data is organised
10

10

00:00:28,270  -->  00:00:31,830
but these are the operations you're allowed to do on a data.
11

11

00:00:31,830  -->  00:00:34,520
And so basically, a stack can be backed
12

12

00:00:34,520  -->  00:00:36,720
by any data structure.
13

13

00:00:36,720  -->  00:00:38,620
Now, it doesn't make sense for it
14

14

00:00:38,620  -->  00:00:40,640
to be backed by some data structures,
15

15

00:00:40,640  -->  00:00:42,490
but you could back a stack
16

16

00:00:42,490  -->  00:00:44,280
with any data structure you wanted.
17

17

00:00:44,280  -->  00:00:47,310
So let's talk about the operations we can do on a stack.
18

18

00:00:47,310  -->  00:00:52,020
Well, one feature of stacks is that the last object,
19

19

00:00:52,020  -->  00:00:55,500
the last item element that you add to a stack,
20

20

00:00:55,500  -->  00:00:59,510
is always the first item that you can remove from the stack,
21

21

00:00:59,510  -->  00:01:04,340
and so that's known as LIFO, last in, first out.
22

22

00:01:04,340  -->  00:01:07,530
So that means there is no random-access.
23

23

00:01:07,530  -->  00:01:10,220
We can't do what we can do with an array and just say,
24

24

00:01:10,220  -->  00:01:12,620
hey, give me the element at position five,
25

25

00:01:12,620  -->  00:01:16,720
because you're only ever allowed to remove the last item
26

26

00:01:16,720  -->  00:01:18,350
that you added to the stack,
27

27

00:01:18,350  -->  00:01:21,250
and because of that, as we'll see in the upcoming slides,
28

28

00:01:21,250  -->  00:01:24,000
the stack has the concept of a top,
29

29

00:01:24,000  -->  00:01:26,360
so we talk about the top of the stack.
30

30

00:01:26,360  -->  00:01:29,560
The item at the top of the stack is the only item
31

31

00:01:29,560  -->  00:01:30,900
that we are allowed to access.
32

32

00:01:30,900  -->  00:01:32,270
It's the only one that we are allowed to
33

33

00:01:32,270  -->  00:01:35,180
look at and it's the only one that we are allow to remove,
34

34

00:01:35,180  -->  00:01:38,960
and so imagine a deck of cards or a stack of papers.
35

35

00:01:38,960  -->  00:01:41,880
So if you have a stack of paper,
36

36

00:01:41,880  -->  00:01:44,070
if you want to get to the paper
37

37

00:01:44,070  -->  00:01:45,990
that's 10 pages down on the stack,
38

38

00:01:45,990  -->  00:01:48,010
you have to remove the nine pages
39

39

00:01:48,010  -->  00:01:51,460
that are on top of it first or if you have a deck of cards
40

40

00:01:51,460  -->  00:01:54,770
and you want to get down to the 10th card in the deck,
41

41

00:01:54,770  -->  00:01:57,380
you have to remove the first nine cards before
42

42

00:01:57,380  -->  00:01:59,380
that 10th card is going to be
43

43

00:01:59,380  -->  00:02:01,660
at the top of the stack of cards.
44

44

00:02:01,660  -->  00:02:04,240
So it's last in, first out.
45

45

00:02:04,240  -->  00:02:06,970
If we add a paper to the stack,
46

46

00:02:06,970  -->  00:02:09,840
the next time we need a paper we're gonna be taking
47

47

00:02:09,840  -->  00:02:12,150
the paper that we last added.
48

48

00:02:12,150  -->  00:02:14,430
Now, we've seen one use for a stack,
49

49

00:02:14,430  -->  00:02:15,580
and that's the call stack.
50

50

00:02:15,580  -->  00:02:16,840
When we looked at recursion,
51

51

00:02:16,840  -->  00:02:21,130
I talked about pushing method calls onto the call stack
52

52

00:02:21,130  -->  00:02:23,980
and removing them from the call stack and in that case,
53

53

00:02:23,980  -->  00:02:28,240
the last method that we called was always the first one
54

54

00:02:28,240  -->  00:02:30,150
that got taken off the call stack.
55

55

00:02:30,150  -->  00:02:33,270
I mean, if method foo called method bar,
56

56

00:02:33,270  -->  00:02:35,740
it wouldn't make sense for method foo
57

57

00:02:35,740  -->  00:02:37,980
to return before method bar does,
58

58

00:02:37,980  -->  00:02:42,050
because foo has to wait until bar finishes executing.
59

59

00:02:42,050  -->  00:02:44,300
So a stack is the perfect data structure
60

60

00:02:44,300  -->  00:02:47,100
to use for the call stack.
61

61

00:02:47,100  -->  00:02:50,090
Now, we can perform three operations on a stack.
62

62

00:02:50,090  -->  00:02:53,170
We can add an item to the top of the stack.
63

63

00:02:53,170  -->  00:02:55,840
That's known as a push operation.
64

64

00:02:55,840  -->  00:02:58,440
We can remove the top item on the stack,
65

65

00:02:58,440  -->  00:03:01,380
and that's known as the pop operation,
66

66

00:03:01,380  -->  00:03:03,100
and we are allowed to peek
67

67

00:03:03,100  -->  00:03:04,810
at what's at the top of the stack.
68

68

00:03:04,810  -->  00:03:06,460
Now, when we do a peek,
69

69

00:03:06,460  -->  00:03:08,510
we can get the first item on the stack
70

70

00:03:08,510  -->  00:03:10,750
but we don't actually remove it,
71

71

00:03:10,750  -->  00:03:14,890
and so a pop removes the item from the top of the stack,
72

72

00:03:14,890  -->  00:03:18,390
but a peek just allows us to access the item
73

73

00:03:18,390  -->  00:03:20,540
but we leave it on the stack.
74

74

00:03:20,540  -->  00:03:22,600
Now, I said that a stack can be backed
75

75

00:03:22,600  -->  00:03:24,390
by any data structure.
76

76

00:03:24,390  -->  00:03:26,380
It can be backed by an array,
77

77

00:03:26,380  -->  00:03:27,530
but if you think about it,
78

78

00:03:27,530  -->  00:03:30,760
a linked list is the perfect data structure for a stack,
79

79

00:03:30,760  -->  00:03:32,580
because in a linked list,
80

80

00:03:32,580  -->  00:03:35,520
we always want to be working with the item
81

81

00:03:35,520  -->  00:03:38,110
at the front of the list if it's a singly linked list,
82

82

00:03:38,110  -->  00:03:41,100
and so we add items to the front of the list
83

83

00:03:41,100  -->  00:03:43,100
and we remove items from the front of the list
84

84

00:03:43,100  -->  00:03:44,370
and by doing that, it means
85

85

00:03:44,370  -->  00:03:48,500
that the last item we added will always be the first item
86

86

00:03:48,500  -->  00:03:50,910
that we remove, and so a linked list
87

87

00:03:50,910  -->  00:03:55,310
is a perfect data structure to back the stack,
88

88

00:03:55,310  -->  00:03:58,850
and in that case, a push would be an add to front method,
89

89

00:03:58,850  -->  00:04:01,990
a pop would be a remove from front method,
90

90

00:04:01,990  -->  00:04:04,580
and a peek would just give us the head item
91

91

00:04:04,580  -->  00:04:06,630
without removing it from the list.
92

92

00:04:06,630  -->  00:04:09,020
So it's pretty common to have a stack
93

93

00:04:09,020  -->  00:04:10,440
that's backed by a linked list,
94

94

00:04:10,440  -->  00:04:12,090
but as I said, you could also back
95

95

00:04:12,090  -->  00:04:13,650
a stack with an array.
96

96

00:04:13,650  -->  00:04:16,920
So let's take a look at the stack, so here's an empty stack.
97

97

00:04:16,920  -->  00:04:18,180
There is nothing on it.
98

98

00:04:18,180  -->  00:04:19,980
So the top would be null
99

99

00:04:19,980  -->  00:04:22,130
if we were dealing with a linked list,
100

100

00:04:22,130  -->  00:04:24,090
and then let's say we push Jane.
101

101

00:04:24,090  -->  00:04:26,710
Well, Jane will now go into the stack
102

102

00:04:26,710  -->  00:04:28,770
and she is the top item on the stack,
103

103

00:04:28,770  -->  00:04:31,360
so we have a top pointer
104

104

00:04:31,360  -->  00:04:34,580
or a top variable that's pointing to Jane,
105

105

00:04:34,580  -->  00:04:36,170
and then we're gonna push John,
106

106

00:04:36,170  -->  00:04:38,600
so John is now at the top of the stack,
107

107

00:04:38,600  -->  00:04:40,140
and then we're gonna push Mary,
108

108

00:04:40,140  -->  00:04:42,690
so Mary's now at the top of the stack.
109

109

00:04:42,690  -->  00:04:44,750
Now, if we did a pop at this point,
110

110

00:04:44,750  -->  00:04:48,050
Mary would be the popped value because Mary's
111

111

00:04:48,050  -->  00:04:49,230
at the top of the stack,
112

112

00:04:49,230  -->  00:04:52,690
she was the last item to be added to the stack,
113

113

00:04:52,690  -->  00:04:56,330
and so if we do a pop, the popped value will be Mary
114

114

00:04:56,330  -->  00:04:59,050
and the new top of the stack will be John.
115

115

00:04:59,050  -->  00:05:02,510
Now, if we do a peek, the peeked value will be John,
116

116

00:05:02,510  -->  00:05:05,170
but you'll notice that John is still on the stack,
117

117

00:05:05,170  -->  00:05:08,160
so here's the state of our stack before doing the peek
118

118

00:05:08,160  -->  00:05:11,110
and after the peek, John is still on the stack
119

119

00:05:11,110  -->  00:05:13,240
but we've been able to access him.
120

120

00:05:13,240  -->  00:05:15,470
We've stored him off in some variable,
121

121

00:05:15,470  -->  00:05:18,260
so we can look at what the top item of the stack is.
122

122

00:05:18,260  -->  00:05:21,470
So those are the three operations that we can do on a stack,
123

123

00:05:21,470  -->  00:05:24,390
push, pop, and peek, and because of that,
124

124

00:05:24,390  -->  00:05:26,430
a stack has LIFO behaviour,
125

125

00:05:26,430  -->  00:05:30,060
the last item pushed onto the stack will always be the item
126

126

00:05:30,060  -->  00:05:31,800
that's popped from the stack.
127

127

00:05:31,800  -->  00:05:33,840
So let's talk about time complexity.
128

128

00:05:33,840  -->  00:05:35,560
Well, this is going to depend
129

129

00:05:35,560  -->  00:05:37,850
on how you're backing the stack,
130

130

00:05:37,850  -->  00:05:40,760
what data structure are you using to implement the stack.
131

131

00:05:40,760  -->  00:05:42,630
Now, if we are using a linked list,
132

132

00:05:42,630  -->  00:05:45,080
the push, pop, and peek operations are
133

133

00:05:45,080  -->  00:05:46,580
going to be constant time,
134

134

00:05:46,580  -->  00:05:48,600
because when we looked at linked lists,
135

135

00:05:48,600  -->  00:05:53,070
we discussed that because we're always operating in the case
136

136

00:05:53,070  -->  00:05:54,120
of a singly linked list,
137

137

00:05:54,120  -->  00:05:55,940
which is all you need for a stack,
138

138

00:05:55,940  -->  00:05:57,790
for the case of a singly linked list,
139

139

00:05:57,790  -->  00:06:01,510
to add an item to the front of the list is constant time.
140

140

00:06:01,510  -->  00:06:02,930
To remove an item from the front
141

141

00:06:02,930  -->  00:06:04,690
of the list is constant time,
142

142

00:06:04,690  -->  00:06:06,970
and if we wanted to get the head of the list,
143

143

00:06:06,970  -->  00:06:09,180
which would be a peek, that's constant time.
144

144

00:06:09,180  -->  00:06:11,380
Now, if we were to use an array,
145

145

00:06:11,380  -->  00:06:13,480
than push could be linear time
146

146

00:06:13,480  -->  00:06:16,230
because if the array is full,
147

147

00:06:16,230  -->  00:06:18,130
we'd have to resize the array,
148

148

00:06:18,130  -->  00:06:20,600
and we'd have to copy all the existing elements
149

149

00:06:20,600  -->  00:06:22,760
on the stack over to the new array.
150

150

00:06:22,760  -->  00:06:24,580
So I say said, the time complexity
151

151

00:06:24,580  -->  00:06:26,280
of the operations is going to depend
152

152

00:06:26,280  -->  00:06:28,210
on how you're implementing the stack,
153

153

00:06:28,210  -->  00:06:31,250
what data structure are you using to back the stack.
154

154

00:06:31,250  -->  00:06:33,820
Now, if you know the maximum number of items
155

155

00:06:33,820  -->  00:06:35,250
that will ever be on the stack,
156

156

00:06:35,250  -->  00:06:36,700
then an array could be a good choice
157

157

00:06:36,700  -->  00:06:38,180
because you could declare an array
158

158

00:06:38,180  -->  00:06:40,750
that's large enough to hold the maximum number
159

159

00:06:40,750  -->  00:06:43,520
of items and the array would never have to be resized.
160

160

00:06:43,520  -->  00:06:46,150
If memory is tight, an array might be a good choice
161

161

00:06:46,150  -->  00:06:49,410
because with an array, you don't have the overhead
162

162

00:06:49,410  -->  00:06:51,370
of having to have a next field.
163

163

00:06:51,370  -->  00:06:53,480
But if memory isn't tight
164

164

00:06:53,480  -->  00:06:55,770
and if you don't know what the maximum number
165

165

00:06:55,770  -->  00:06:57,280
of items is going to be,
166

166

00:06:57,280  -->  00:06:59,500
then linked list is ideal,
167

167

00:06:59,500  -->  00:07:02,210
and even if you, if memory is tight,
168

168

00:07:02,210  -->  00:07:04,340
a linked list would be ideal if you're not,
169

169

00:07:04,340  -->  00:07:07,200
if you don't expect to be adding a whole tonne of items.
170

170

00:07:07,200  -->  00:07:10,300
I mean, a linked list really does lend itself well
171

171

00:07:10,300  -->  00:07:13,890
to the behavioural restrictions that a stack has.
172

172

00:07:13,890  -->  00:07:16,590
So now that we understand what a stack is
173

173

00:07:16,590  -->  00:07:19,010
and we understand the operations we can do on a stack,
174

174

00:07:19,010  -->  00:07:21,110
let's implement a simple stack.
175

175

00:07:21,110  -->  00:07:22,660
I'll see you in the next video.
