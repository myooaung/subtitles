WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.850
So what is unit testing?

00:00:03.850 --> 00:00:04.640
Well,

00:00:04.640 --> 00:00:05.590
as its name suggests,

00:00:05.590 --> 00:00:06.970
it's the testing of units.

00:00:06.970 --> 00:00:08.000
So that's great.

00:00:08.000 --> 00:00:09.190
But what's a unit then?

00:00:09.190 --> 00:00:10.220
Well,

00:00:10.220 --> 00:00:14.410
what these units are can kind of depend upon who were talking to on which type of

00:00:14.410 --> 00:00:16.440
programming language on methodology were using.

00:00:16.440 --> 00:00:22.050
We can unit says two functions which accept some input on returns amount Put if we're in a

00:00:22.050 --> 00:00:24.050
functional programming world like scholar,

00:00:24.050 --> 00:00:28.610
our medical unit testing procedures if we're in the procedural programming world with

00:00:28.610 --> 00:00:30.220
languages like visual Basic and see.

00:00:30.220 --> 00:00:30.960
For example,

00:00:30.960 --> 00:00:32.270
however,

00:00:32.270 --> 00:00:34.930
where Java developers on DSO in our world,

00:00:34.930 --> 00:00:36.380
which is an object oriented one,

00:00:36.380 --> 00:00:38.660
we're really talking about the testing of classes.

00:00:38.660 --> 00:00:40.450
As Java developers,

00:00:40.450 --> 00:00:44.360
we write classes which in turn become the objects that communicate with and work with one

00:00:44.360 --> 00:00:44.760
another,

00:00:44.760 --> 00:00:46.390
joined the running of our application.

00:00:46.390 --> 00:00:47.320
After all,

00:00:47.320 --> 00:00:50.340
the Java problem is really just a big set of objects which work together to get the

00:00:50.340 --> 00:00:51.380
programs logic dumb.

00:00:51.380 --> 00:00:53.820
So since the class is the main thing,

00:00:53.820 --> 00:00:56.030
our applications are composed of in the job a world,

00:00:56.030 --> 00:00:58.550
it makes sense that these are the things we're testing.

00:00:58.550 --> 00:00:59.690
In fact,

00:00:59.690 --> 00:01:00.890
you'll find that in general,

00:01:00.890 --> 00:01:04.190
whenever a programming language considers a unit to be for testing purposes.

00:01:04.190 --> 00:01:08.190
It's typically the men building block that language uses to construct its applications out

00:01:08.190 --> 00:01:08.450
off.

00:01:08.450 --> 00:01:13.320
So unit testing to a Java developer means testing the classes that are object oriented.

00:01:13.320 --> 00:01:15.170
System is built out off on weaken.

00:01:15.170 --> 00:01:15.910
Do this.

00:01:15.910 --> 00:01:17.150
We perform this unit,

00:01:17.150 --> 00:01:21.360
testing one outclasses to ensure that those classes performers we expect them to do.

00:01:21.360 --> 00:01:22.740
By this,

00:01:22.740 --> 00:01:25.510
we mean that they're not throwing exceptions when they shouldn't do.

00:01:25.510 --> 00:01:30.110
They can handle different types of input nicely without forcing an application shut down or

00:01:30.110 --> 00:01:30.540
anything.

00:01:30.540 --> 00:01:31.410
In short,

00:01:31.410 --> 00:01:32.350
as Java developers,

00:01:32.350 --> 00:01:35.700
we write unit tests to allow us to get our production code That's occurred.

00:01:35.700 --> 00:01:38.070
Are applications built out off the real code,

00:01:38.070 --> 00:01:42.440
If you like up to a high standard so objects can interact together in a predictable,

00:01:42.440 --> 00:01:43.280
on robust way,

00:01:43.280 --> 00:01:44.620
that's really the key.

00:01:44.620 --> 00:01:46.560
We perform unit tests toe iron out.

00:01:46.560 --> 00:01:50.310
Any books we have leaving is with high grade quality code become rely on.

00:01:50.310 --> 00:01:54.860
No developer likes to be called up at 3 a.m. On a Saturday morning because your

00:01:54.860 --> 00:01:58.310
applications had some shore stopping error on your name is written all over the code

00:01:58.310 --> 00:01:59.980
because it's the feed you're working on.

00:01:59.980 --> 00:02:01.420
Similarly,

00:02:01.420 --> 00:02:03.450
imagine if we were using Amazon or Facebook,

00:02:03.450 --> 00:02:06.910
and suddenly the applications died hanging because of some glitch in the logic,

00:02:06.910 --> 00:02:08.780
when we receive some input we didn't expect,

00:02:08.780 --> 00:02:14.040
that's gonna be a poor user experience by writing and running unit tests.

00:02:14.040 --> 00:02:14.430
Also,

00:02:14.430 --> 00:02:17.030
Nana's performing unit testing on Through this,

00:02:17.030 --> 00:02:18.210
ensuring our classes.

00:02:18.210 --> 00:02:19.210
Workers expected.

00:02:19.210 --> 00:02:21.290
We minimize the chance of air is occurring.

00:02:21.290 --> 00:02:24.540
We can sleep peacefully at night once the curd is in production,

00:02:24.540 --> 00:02:28.240
because we've spent all the time during all those days before the release,

00:02:28.240 --> 00:02:31.750
writing unit tests for I code and ensuring that I could works as intended.

00:02:31.750 --> 00:02:36.140
Now there are other aspects do unit testing to but from a high level viewpoint,

00:02:36.140 --> 00:02:40.370
it's all about making our production coders book free and reliable and robust as we can do

00:02:40.370 --> 00:02:40.370
.

00:02:40.370 --> 00:02:44.950
This is why we do unit testing on this is why it's so important on a great skill to know

