WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.640
Let's take a look at what a basic unit test looks like so we can start to get familiar with

00:00:06.640 --> 00:00:07.750
how it feels in code.

00:00:07.750 --> 00:00:09.000
Now,

00:00:09.000 --> 00:00:11.690
this isn't going to be the most sophisticated unit test out there,

00:00:11.690 --> 00:00:15.580
and in fact we don't really want to start with something that's so complex we just don't

00:00:15.580 --> 00:00:16.050
get it.

00:00:16.050 --> 00:00:20.050
So we'll start with just a simple example we can understand together and work with.

00:00:20.050 --> 00:00:22.990
So all test start with something we need to test.

00:00:22.990 --> 00:00:24.400
Were writing unit test.

00:00:24.400 --> 00:00:26.090
So we need a unit to be tested.

00:00:26.090 --> 00:00:28.600
You recall this units in job is object oriented.

00:00:28.600 --> 00:00:29.790
World is a class.

00:00:29.790 --> 00:00:31.930
Here's a simple class we can work with.

00:00:31.930 --> 00:00:33.750
This is our unit will be testing.

00:00:33.750 --> 00:00:36.650
This represents some code in our production system.

00:00:36.650 --> 00:00:37.330
True,

00:00:37.330 --> 00:00:38.100
for this example,

00:00:38.100 --> 00:00:41.410
it's just a pretty much a hello world type functionality we're testing.

00:00:41.410 --> 00:00:43.750
But it will do to explain how units has work.

00:00:43.750 --> 00:00:48.540
Looking at this class is clear to see that the functionality is that we invoke the method

00:00:48.540 --> 00:00:49.960
passing in the name on.

00:00:49.960 --> 00:00:52.000
We get returned the message which greets the person.

00:00:52.000 --> 00:00:53.850
So if we passing Christopher,

00:00:53.850 --> 00:00:54.570
for example,

00:00:54.570 --> 00:00:56.330
would expect to get back the message.

00:00:56.330 --> 00:00:56.630
Hello,

00:00:56.630 --> 00:00:57.210
Christopher.

00:00:57.210 --> 00:01:00.740
Nice and simple to see the production class being used.

00:01:00.740 --> 00:01:04.150
We can imagine that this code snippet is somewhere else in the application.

00:01:04.150 --> 00:01:05.870
This is our production code,

00:01:05.870 --> 00:01:06.610
our unit,

00:01:06.610 --> 00:01:11.100
that we're testing being used in real life as it were now that we've seen the code we're

00:01:11.100 --> 00:01:12.880
testing and seeing how it shoes.

00:01:12.880 --> 00:01:14.700
Or they wouldn't have been difficult to imagine that,

00:01:14.700 --> 00:01:15.240
of course,

00:01:15.240 --> 00:01:16.480
but it's good to be explicit,

00:01:16.480 --> 00:01:16.770
though.

00:01:16.770 --> 00:01:19.410
Let's see how would write a simple unit test for this?

00:01:19.410 --> 00:01:20.950
Let's see what it might look like.

00:01:20.950 --> 00:01:21.990
Andi,

00:01:21.990 --> 00:01:22.590
Drumroll,

00:01:22.590 --> 00:01:23.060
please.

00:01:23.060 --> 00:01:25.550
This is what a simple unit test might look like.

00:01:25.550 --> 00:01:30.840
What we have here is another class for so called test class which houses all the methods

00:01:30.840 --> 00:01:33.000
which will test the unit under different conditions.

00:01:33.000 --> 00:01:34.650
These a called test methods.

00:01:34.650 --> 00:01:36.440
In this case,

00:01:36.440 --> 00:01:38.600
we have just one test method In this test class.

00:01:38.600 --> 00:01:41.050
The test method called test underscore greet.

00:01:41.050 --> 00:01:45.970
This method is annotated with an ad test annotation from J unit for Jay,

00:01:45.970 --> 00:01:48.410
and it provides a sanitation so we can mark on method.

00:01:48.410 --> 00:01:50.250
That's a test method to be executed,

00:01:50.250 --> 00:01:54.240
since we can have other methods in a test class to just like a regular class can,

00:01:54.240 --> 00:01:55.120
for example,

00:01:55.120 --> 00:01:59.210
methods to help out with the testing or the special annotating methods which hook into jail

00:01:59.210 --> 00:01:59.580
unit.

00:01:59.580 --> 00:02:01.750
Inside the test method,

00:02:01.750 --> 00:02:03.820
you'll say that invokes the method being tested.

00:02:03.820 --> 00:02:08.160
This is our greet method from the greeter class and then perform some checking afterwards

00:02:08.160 --> 00:02:10.780
to ensure that we got back what we expected from the coal.

00:02:10.780 --> 00:02:12.190
Given the input with specified,

00:02:12.190 --> 00:02:14.350
these air the methods on the assert class.

00:02:14.350 --> 00:02:17.280
This is another handy class from the jail unit framework,

00:02:17.280 --> 00:02:18.830
which provides a set of assertions.

00:02:18.830 --> 00:02:22.160
We can use assertions or statements we expect to be true.

00:02:22.160 --> 00:02:26.690
So here were saying that we expect at least we get back a non nor result that's the a

00:02:26.690 --> 00:02:29.940
certain on nor method call passing in the output from the tested method.

00:02:29.940 --> 00:02:32.050
And then we have another assertion afterwards,

00:02:32.050 --> 00:02:36.430
which is where we're saying we expect the results of the killer Christopher the key parts

00:02:36.430 --> 00:02:38.640
about assertions that if they're not true,

00:02:38.640 --> 00:02:41.030
the test will fail with an assertion error on.

00:02:41.030 --> 00:02:41.620
At this point,

00:02:41.620 --> 00:02:43.230
when we see one of those assertion errors,

00:02:43.230 --> 00:02:45.610
we can go back and look at our test code C,

00:02:45.610 --> 00:02:48.690
which assertion failed and start to investigate why that happened.

00:02:48.690 --> 00:02:49.950
We'll cover this later.

00:02:49.950 --> 00:02:54.360
But the main thing is that the assertion Air P oy off A by Jamie gives us a neat way to

00:02:54.360 --> 00:02:54.640
stay.

00:02:54.640 --> 00:02:57.600
What we expect to be true after our testers room on.

00:02:57.600 --> 00:02:58.720
If no air is the throne,

00:02:58.720 --> 00:03:00.950
the test passes on a code is good to go.

