WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.940
and you can do with the things as well with mosquito.

00:00:03.940 --> 00:00:04.840
Like for example,

00:00:04.840 --> 00:00:09.490
we could cause this find by using them method to throw an exception and find out how our

00:00:09.490 --> 00:00:11.250
production class reacts to that.

00:00:11.250 --> 00:00:12.060
Actually,

00:00:12.060 --> 00:00:12.680
let's do that quickly.

00:00:12.680 --> 00:00:12.850
Now,

00:00:12.850 --> 00:00:13.220
Sir,

00:00:13.220 --> 00:00:15.770
Authentication Service command shifty.

00:00:15.770 --> 00:00:16.750
Create new test.

00:00:16.750 --> 00:00:19.340
Okay,

00:00:19.340 --> 00:00:24.240
in here he said we have the thing we're testing,

00:00:24.240 --> 00:00:31.850
which is the which is the service that so system In the test we have,

00:00:31.850 --> 00:00:35.650
I will use a repository here,

00:00:35.650 --> 00:00:38.050
which is the mark.

00:00:38.050 --> 00:00:45.850
We're gonna set these up in a test fixture.

00:00:45.850 --> 00:01:00.150
This used repository Kita don't mock party use repository.

00:01:00.150 --> 00:01:17.050
This stops service equals syndication service passing that using repository here.

00:01:17.050 --> 00:01:23.340
I would just create construction authentication service which takes that use repository

00:01:23.340 --> 00:01:29.350
object just so that we can use it like that.

00:01:29.350 --> 00:01:37.650
Let's just rename this quickly to repository.

00:01:37.650 --> 00:01:42.100
It's kind of in the same style that's finally says of the test fixture.

00:01:42.100 --> 00:01:43.980
So I tested nothing.

00:01:43.980 --> 00:01:52.650
Now quickly just go back to the authentication service and it still thing to get method

00:01:52.650 --> 00:02:01.350
just authentic it gain arrange thanked.

00:02:01.350 --> 00:02:08.190
So in the arrange Kizito,

00:02:08.190 --> 00:02:11.710
when it's the repository,

00:02:11.710 --> 00:02:14.550
find by using them,

00:02:14.550 --> 00:02:21.470
you string then throw.

00:02:21.470 --> 00:02:29.580
Let's say an illegal argument exception.

00:02:29.580 --> 00:02:29.960
Now,

00:02:29.960 --> 00:02:30.890
because we're testing something.

00:02:30.890 --> 00:02:32.560
The data tear you got,

00:02:32.560 --> 00:02:33.360
you throw back a sequel.

00:02:33.360 --> 00:02:36.220
Exception are a hybrid exceptional whatever you wanted to do.

00:02:36.220 --> 00:02:37.340
But for the sake of the demo way,

00:02:37.340 --> 00:02:39.340
just gonna throw in a legal argument exception.

00:02:39.340 --> 00:02:40.650
Just keep things simple.

00:02:40.650 --> 00:02:42.010
Key point being,

00:02:42.010 --> 00:02:42.560
of course,

00:02:42.560 --> 00:02:46.270
the went and then invoke that method that an exceptional be thrown on.

00:02:46.270 --> 00:02:46.690
At this point,

00:02:46.690 --> 00:02:47.770
when I'm writing the test,

00:02:47.770 --> 00:02:50.450
this will probably make me reconsider my production code.

00:02:50.450 --> 00:02:51.570
Because clearly,

00:02:51.570 --> 00:02:53.990
when you look at authentication service,

00:02:53.990 --> 00:02:56.050
you look at this method here.

00:02:56.050 --> 00:03:00.930
I think we have not thought about what would happen if we get an exception thrown.

00:03:00.930 --> 00:03:01.550
At that point,

00:03:01.550 --> 00:03:03.350
I'm because we haven't addressed that.

00:03:03.350 --> 00:03:06.180
That would cause our applications a crash at runtime.

00:03:06.180 --> 00:03:14.980
I could see that happened right now if we go back to Authentication service test and we do

00:03:14.980 --> 00:03:15.140
this,

00:03:15.140 --> 00:03:18.930
start service authenticate passing in,

00:03:18.930 --> 00:03:19.490
Harry,

00:03:19.490 --> 00:03:26.450
hurry.

00:03:26.450 --> 00:03:33.410
12345 Then we wouldn't even get an opportunity to get to this certain section now because

00:03:33.410 --> 00:03:39.050
if I run that now was a 90 without test first.

00:03:39.050 --> 00:03:43.250
If I run this now,

00:03:43.250 --> 00:03:49.310
then you can see here that the test fails on it.

00:03:49.310 --> 00:03:50.910
We're going to stack trace to prove it.

00:03:50.910 --> 00:03:55.390
So when we did authenticate inside the authentication service,

00:03:55.390 --> 00:03:57.050
we got in a legal argument exception.

