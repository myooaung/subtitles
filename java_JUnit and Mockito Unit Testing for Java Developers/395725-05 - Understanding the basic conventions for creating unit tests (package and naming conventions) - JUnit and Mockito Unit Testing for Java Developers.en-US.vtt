WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.220
So in this video,

00:00:03.220 --> 00:00:04.320
now we create our project,

00:00:04.320 --> 00:00:06.830
we're gonna start cutting up a simple test itself.

00:00:06.830 --> 00:00:07.140
I mean,

00:00:07.140 --> 00:00:09.420
doing so get acquainted with a few coding conventions.

00:00:09.420 --> 00:00:10.640
We should stick to tell us.

00:00:10.640 --> 00:00:11.100
Jump in.

00:00:11.100 --> 00:00:16.730
So it's creates a production class that we contest.

00:00:16.730 --> 00:00:18.550
We're gonna create something super simple,

00:00:18.550 --> 00:00:22.750
and we just call these calculates him,

00:00:22.750 --> 00:00:27.450
and I shall Let's just put a package in here to make it a bit Tidier.

00:00:27.450 --> 00:00:30.350
It's always nice to have a package for classes that you create,

00:00:30.350 --> 00:00:39.230
so we'll just use that.

00:00:39.230 --> 00:00:47.310
We'll just move the calculator into that package so I can see here we have in Saltzman Java

00:00:47.310 --> 00:00:51.060
have this package and we have this class which is inside that package.

00:00:51.060 --> 00:00:53.670
So let's just put a method on here,

00:00:53.670 --> 00:01:10.380
which is does something trouble ecstatic and into a into B return May plus B that this is

00:01:10.380 --> 00:01:15.050
just a static method which is going to take two integers and be add them together and we

00:01:15.050 --> 00:01:15.640
turn the result.

00:01:15.640 --> 00:01:17.080
We won't bother with minors.

00:01:17.080 --> 00:01:17.630
Divide,

00:01:17.630 --> 00:01:21.700
multiply that kind of thing because we just want to demonstrate J on its functions for the

00:01:21.700 --> 00:01:22.730
purpose of this demo.

00:01:22.730 --> 00:01:24.440
So let's go to test for this.

00:01:24.440 --> 00:01:25.010
So,

00:01:25.010 --> 00:01:25.500
first of all,

00:01:25.500 --> 00:01:29.280
if we create a package of the same name in the test source directory,

00:01:29.280 --> 00:01:35.200
So foi do shift F six as if I was going to rename the package that enables me to grab the

00:01:35.200 --> 00:01:36.420
package name by doing command,

00:01:36.420 --> 00:01:38.950
see an escape off them,

00:01:38.950 --> 00:01:45.780
and then just do new packaging the test Jonah folder,

00:01:45.780 --> 00:01:50.790
command of the Impair something that's just a nice shortcut to be able to quit a package of

00:01:50.790 --> 00:01:51.550
the same name.

00:01:51.550 --> 00:01:53.050
Now,

00:01:53.050 --> 00:01:57.360
if I go into here and just do right click New Java Class,

00:01:57.360 --> 00:02:03.910
I'm gonna call this calculated test hit.

00:02:03.910 --> 00:02:09.080
Enter now the first thing to not regarding conventions for writing unit tests in June.

00:02:09.080 --> 00:02:13.320
It is the fact that the production class here,

00:02:13.320 --> 00:02:16.270
which is calculator which lives in this folder here,

00:02:16.270 --> 00:02:19.810
has a corresponding test which is the same name as the production class.

00:02:19.810 --> 00:02:20.760
So calculator.

00:02:20.760 --> 00:02:23.280
But it has the suffix of test after it.

00:02:23.280 --> 00:02:24.220
So in other words,

00:02:24.220 --> 00:02:26.800
calculator as a test score calculated test.

00:02:26.800 --> 00:02:27.510
Similarly,

00:02:27.510 --> 00:02:29.150
if we had a class cold data service,

00:02:29.150 --> 00:02:29.740
for example,

00:02:29.740 --> 00:02:33.550
would expect to find the corresponding unit test for it called Data service test.

00:02:33.550 --> 00:02:36.790
Did the thing to note as well Is that the package structure?

00:02:36.790 --> 00:02:39.390
Here he is a mirror image of the package structure here,

00:02:39.390 --> 00:02:40.720
in other words,

00:02:40.720 --> 00:02:42.010
the test class for the thing.

00:02:42.010 --> 00:02:44.080
We're testing the so called system on the test,

00:02:44.080 --> 00:02:47.250
which is calculator in this case that lives in the same package,

00:02:47.250 --> 00:02:52.340
and the reason for that is that kind of gives the test the same access rights as the class

00:02:52.340 --> 00:02:53.130
is being tested,

00:02:53.130 --> 00:02:53.640
say,

00:02:53.640 --> 00:02:55.780
kind of because it's not quite as clear cut as that.

00:02:55.780 --> 00:02:56.600
But if you think about it,

00:02:56.600 --> 00:02:58.870
if calculated test is in the same package,

00:02:58.870 --> 00:03:00.620
that it means that it can access calculator.

00:03:00.620 --> 00:03:01.810
So even if calculated,

00:03:01.810 --> 00:03:02.250
for example,

00:03:02.250 --> 00:03:03.290
wasn't public class,

00:03:03.290 --> 00:03:05.150
it could still access it on also,

00:03:05.150 --> 00:03:08.450
if calculators using any other classes in the package.

00:03:08.450 --> 00:03:09.400
So if you imagine,

00:03:09.400 --> 00:03:09.900
for example,

00:03:09.900 --> 00:03:11.550
there are more classes in this package here,

00:03:11.550 --> 00:03:16.310
which calculator used then calculated test would also be able to use them on.

00:03:16.310 --> 00:03:20.030
That will be useful when we're writing the set up on the calculator test class.

00:03:20.030 --> 00:03:20.660
So in other words,

00:03:20.660 --> 00:03:25.530
when we're establishing the objects that the test itself is going to need to stand yet to

00:03:25.530 --> 00:03:29.000
news and possibly pass to the calculator instance of its testing.

00:03:29.000 --> 00:03:31.110
It basically means if they're in the same package,

00:03:31.110 --> 00:03:32.650
that it has access to those classes.

00:03:32.650 --> 00:03:36.860
So two very important rules there use the same package and issues the same name as the

00:03:36.860 --> 00:03:37.500
production class.

00:03:37.500 --> 00:03:39.350
But just append the word test after it.

00:03:39.350 --> 00:03:39.640
Yes,

00:03:39.640 --> 00:03:42.340
a stick to those conventions whenever you're writing unit tests.

