WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.470
Now let's take a quick look at the conventions be used when writing unit tests.

00:00:06.470 --> 00:00:06.980
These air,

00:00:06.980 --> 00:00:08.970
the written and sometimes un return rules,

00:00:08.970 --> 00:00:11.080
which we expect unit test code to stick to,

00:00:11.080 --> 00:00:12.110
so stick to them.

00:00:12.110 --> 00:00:12.690
Otherwise,

00:00:12.690 --> 00:00:15.600
you might get some strange looks by more in white and developers on your team.

00:00:15.600 --> 00:00:16.810
First up,

00:00:16.810 --> 00:00:17.700
it's a simple thing,

00:00:17.700 --> 00:00:19.240
but what do we name a test class?

00:00:19.240 --> 00:00:19.680
Well,

00:00:19.680 --> 00:00:20.500
it's quite simple.

00:00:20.500 --> 00:00:23.910
The convention is to just name it exactly the same name as the production class you're

00:00:23.910 --> 00:00:24.460
testing.

00:00:24.460 --> 00:00:26.850
Just add a tests affixed to the name at the end.

00:00:26.850 --> 00:00:31.580
So for production class named Greta being tested would expect to find its corresponding

00:00:31.580 --> 00:00:32.080
test class.

00:00:32.080 --> 00:00:33.450
Name does agree to test.

00:00:33.450 --> 00:00:34.400
Also,

00:00:34.400 --> 00:00:36.190
the case should be exactly like it is here,

00:00:36.190 --> 00:00:39.090
with a capital T on the test to fix on knowing the score.

00:00:39.090 --> 00:00:41.880
So a passable case or capitalized camel case.

00:00:41.880 --> 00:00:44.250
If you prefer to call it that now,

00:00:44.250 --> 00:00:45.580
as far as visibility goes,

00:00:45.580 --> 00:00:46.330
you know the words.

00:00:46.330 --> 00:00:47.580
Let's briefly talk about access,

00:00:47.580 --> 00:00:48.960
modifiers attest.

00:00:48.960 --> 00:00:50.420
Classes just declared public.

00:00:50.420 --> 00:00:54.750
It isn't final or abstracts or anything like that or anything more off the wall,

00:00:54.750 --> 00:00:57.850
like being an in a class It's just a regular public class.

00:00:57.850 --> 00:00:59.000
Don't forget,

00:00:59.000 --> 00:01:00.210
it needs to be introspective.

00:01:00.210 --> 00:01:03.600
That's just a fancy word for looked inside by the jail unit test framework.

00:01:03.600 --> 00:01:04.600
So that's the reason.

00:01:04.600 --> 00:01:06.400
Plus ideas also have plug ins,

00:01:06.400 --> 00:01:07.770
which give you help with writing,

00:01:07.770 --> 00:01:08.920
manipulating test code.

00:01:08.920 --> 00:01:10.990
So that's another reason our classes a symbol.

00:01:10.990 --> 00:01:11.840
Public classes.

00:01:11.840 --> 00:01:13.430
So if you do anything weird,

00:01:13.430 --> 00:01:17.190
you risk your tests not even working or being fully usable in the I D.

00:01:17.190 --> 00:01:18.380
Let alone your production code.

00:01:18.380 --> 00:01:20.090
Not even being testable because of this.

00:01:20.090 --> 00:01:23.450
So the key point here don't do anything strange or clever.

00:01:23.450 --> 00:01:28.600
Another aspect connected to visibility but indirectly is which packaged a place to test

00:01:28.600 --> 00:01:29.070
cost him.

00:01:29.070 --> 00:01:33.080
The convention is to place it in the same package is a production code class.

00:01:33.080 --> 00:01:36.000
This means it will have the same package statement as a production class,

00:01:36.000 --> 00:01:39.990
although will be in the test source folder with all the tests source code as opposed to

00:01:39.990 --> 00:01:41.140
being in the production source.

00:01:41.140 --> 00:01:42.570
Fold with a production source.

00:01:42.570 --> 00:01:42.870
Good.

00:01:42.870 --> 00:01:44.140
So to be clear,

00:01:44.140 --> 00:01:46.630
the production class will be like this in the source.

00:01:46.630 --> 00:01:47.280
Mange Armagh,

00:01:47.280 --> 00:01:51.860
director tree on its corresponding test class would be like this in the source test

00:01:51.860 --> 00:01:52.480
geometry,

00:01:52.480 --> 00:01:55.780
not the birth classes have the same package them in the meaning.

00:01:55.780 --> 00:01:58.020
They're in the same package now.

00:01:58.020 --> 00:01:58.920
What's the point of that?

00:01:58.920 --> 00:01:59.790
I can hear you ask.

00:01:59.790 --> 00:02:01.490
Why put it in the same package?

00:02:01.490 --> 00:02:01.830
Well,

00:02:01.830 --> 00:02:04.460
it just means that the test class has the same access rights.

00:02:04.460 --> 00:02:05.820
If you want to think of it like that,

00:02:05.820 --> 00:02:07.670
as a production class has on,

00:02:07.670 --> 00:02:08.350
that seems fair,

00:02:08.350 --> 00:02:08.810
doesn't it?

00:02:08.810 --> 00:02:12.210
Since it will need to use our interact with or somehow reference of the classes,

00:02:12.210 --> 00:02:15.410
which the production class references in order to set up the tests in a way,

00:02:15.410 --> 00:02:16.260
which is appropriate.

00:02:16.260 --> 00:02:18.160
So in this video,

00:02:18.160 --> 00:02:21.000
we've seen the men conventions that we use for unit test classes.

00:02:21.000 --> 00:02:22.250
If you stick to these,

00:02:22.250 --> 00:02:23.450
good things will happen.

00:02:23.450 --> 00:02:24.290
Well,

00:02:24.290 --> 00:02:25.290
bad things won't happen.

00:02:25.290 --> 00:02:27.160
At least on when you're trying to test Kurt.

00:02:27.160 --> 00:02:28.400
The key is to keep it a simple.

00:02:28.400 --> 00:02:31.690
It's possible you can have complexity and production covered by all means,

00:02:31.690 --> 00:02:32.640
but my advice is,

00:02:32.640 --> 00:02:33.770
keep your test simple.

00:02:33.770 --> 00:02:36.890
Stick to the conventions and you'll find that you really can't go wrong.

00:02:36.890 --> 00:02:40.250
Writing on maintaining unit tests will be a lot easier going down that path,

00:02:40.250 --> 00:02:41.550
and that's never a bad thing.

