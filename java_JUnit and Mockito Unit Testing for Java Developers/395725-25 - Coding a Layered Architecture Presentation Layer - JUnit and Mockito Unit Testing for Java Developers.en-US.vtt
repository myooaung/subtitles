WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.110
in this video,

00:00:03.110 --> 00:00:05.840
we're going to start to think about how we concurred up a lead,

00:00:05.840 --> 00:00:09.600
Architecture said of the words and architecture which respects to three layers.

00:00:09.600 --> 00:00:13.660
You have been a Web application that's presentation layer service layer on a date or

00:00:13.660 --> 00:00:18.890
persistence lamb and we're going to do with this is it will enable us to describe basically

00:00:18.890 --> 00:00:18.890
,

00:00:18.890 --> 00:00:21.050
how we approach testing with mock objects.

00:00:21.050 --> 00:00:23.030
How we apply that to this late architecture.

00:00:23.030 --> 00:00:26.500
So the next few years might not seem so relevant to unit testing.

00:00:26.500 --> 00:00:30.340
But they are because it's important to understand how the lead architecture is coded

00:00:30.340 --> 00:00:32.990
because then we can explain how we apply Marquita to that.

00:00:32.990 --> 00:00:35.000
So just hang in there for the next few years,

00:00:35.000 --> 00:00:39.060
bear with us while we cut this up and they will pick up the mosquito testing aspect of it

00:00:39.060 --> 00:00:40.350
in a few videos time,

00:00:40.350 --> 00:00:41.500
it's less jump in.

00:00:41.500 --> 00:00:42.760
Now I look at the controller,

00:00:42.760 --> 00:00:44.230
so we've got our project set up.

00:00:44.230 --> 00:00:46.620
Now we can use Makita and we've got your gun installed.

00:00:46.620 --> 00:00:50.450
Let's just remove this Cote here because we don't really need this.

00:00:50.450 --> 00:00:51.660
That was just a test.

00:00:51.660 --> 00:00:52.530
We had everything set up.

00:00:52.530 --> 00:00:52.940
Okay,

00:00:52.940 --> 00:00:58.710
Tesco Now it's plucking a couple of buses which interact with each other that we can

00:00:58.710 --> 00:01:00.090
demonstrate mosquito with.

00:01:00.090 --> 00:01:03.530
So if I go into here in the production source folder,

00:01:03.530 --> 00:01:04.150
yeah,

00:01:04.150 --> 00:01:06.550
and we'll just create a logging controller.

00:01:06.550 --> 00:01:08.730
So let's,

00:01:08.730 --> 00:01:13.450
Suppose is looking Controller is responsible for serving Web requests in a Web application

00:01:13.450 --> 00:01:13.450
.

00:01:13.450 --> 00:01:15.210
So http request comes in,

00:01:15.210 --> 00:01:19.570
which persisted the user name and password did the uses entered into a actually more form

00:01:19.570 --> 00:01:20.220
on this.

00:01:20.220 --> 00:01:23.420
Glass is responsible for representing the user with a homepage.

00:01:23.420 --> 00:01:24.790
If he's being log in successfully.

00:01:24.790 --> 00:01:25.420
In other words,

00:01:25.420 --> 00:01:25.990
the passwords,

00:01:25.990 --> 00:01:27.850
What we expect and we got a valid user.

00:01:27.850 --> 00:01:29.410
Or if that isn't the case,

00:01:29.410 --> 00:01:33.080
it's gonna reject the user on redirect him to go back to the lock in screen.

00:01:33.080 --> 00:01:35.390
So that's roughly what the logging control is gonna do.

00:01:35.390 --> 00:01:36.850
It's let's write some code for that.

00:01:36.850 --> 00:01:41.910
Let's into the controller returns back a string,

00:01:41.910 --> 00:01:44.010
which is either gonna be a reference to the home page.

00:01:44.010 --> 00:01:45.150
Awesome kind of instructions.

00:01:45.150 --> 00:01:46.790
Redirect to the log in page.

00:01:46.790 --> 00:01:48.040
I just keep it simple.

00:01:48.040 --> 00:01:51.440
We'll just return one of two strings either slash home slash logging,

00:01:51.440 --> 00:01:56.020
depending on whether the user log in successfully or didn't Let's give it a service method

00:01:56.020 --> 00:01:56.020
,

00:01:56.020 --> 00:01:56.590
say,

00:01:56.590 --> 00:02:02.200
with string using in on a string password.

00:02:02.200 --> 00:02:02.850
Now,

00:02:02.850 --> 00:02:03.210
obviously,

00:02:03.210 --> 00:02:06.920
there are different types of framework out there to be able to call Web apps in Java.

00:02:06.920 --> 00:02:07.460
So that spring,

00:02:07.460 --> 00:02:08.040
NBC,

00:02:08.040 --> 00:02:08.740
for example,

00:02:08.740 --> 00:02:09.430
job a serval.

00:02:09.430 --> 00:02:11.390
It's Java server faces,

00:02:11.390 --> 00:02:11.610
okay?

00:02:11.610 --> 00:02:14.400
And we're back in time struts and those kinds of framework,

00:02:14.400 --> 00:02:16.800
and each one has its own different way of doing things.

00:02:16.800 --> 00:02:18.050
But don't worry about that now.

00:02:18.050 --> 00:02:20.420
Just focus on the fact that we're creating a locking controller,

00:02:20.420 --> 00:02:21.650
which is hypothetical,

00:02:21.650 --> 00:02:26.000
that that logging controller sits on the Web layer of the application and just purely deals

00:02:26.000 --> 00:02:29.450
with the logic of working out where to send the user gets in reality.

00:02:29.450 --> 00:02:33.520
This method is just gonna be dealing with http requests and hit your TV responses in that

00:02:33.520 --> 00:02:34.070
kind of thing.

00:02:34.070 --> 00:02:36.570
But we don't want to get bogged down without because the principles the same.

00:02:36.570 --> 00:02:37.050
Indeed,

00:02:37.050 --> 00:02:40.530
these two parameters using them and password could be annotated parameters,

00:02:40.530 --> 00:02:43.280
which is bound to the controller upon service in the Web requests.

00:02:43.280 --> 00:02:44.220
Don't worry about that.

00:02:44.220 --> 00:02:44.650
For now.

00:02:44.650 --> 00:02:47.320
Just focus on the fact that the logging controller has one purpose,

00:02:47.320 --> 00:02:51.070
and that one purpose the thing it's supposed to know about the thing it knows about that.

00:02:51.070 --> 00:02:51.680
It's an expert,

00:02:51.680 --> 00:02:52.250
and if you will,

00:02:52.250 --> 00:02:56.750
is to send the user to the home page.

00:02:56.750 --> 00:03:01.000
We'll send the user to the log in page.

00:03:01.000 --> 00:03:01.970
In other words,

00:03:01.970 --> 00:03:05.850
this class this method specifically just knows about the home and the log in pages.

00:03:05.850 --> 00:03:09.710
And that's as it should do because his controller classes in the presentation there.

00:03:09.710 --> 00:03:12.730
So it doesn't know anything about how to actually authenticate a user.

00:03:12.730 --> 00:03:14.070
And that's because to do so,

00:03:14.070 --> 00:03:16.770
we need to start thinking about the layer underneath.

00:03:16.770 --> 00:03:18.370
And that's the authentication service,

00:03:18.370 --> 00:03:21.820
because the controller needs an authentication service to do its work as we'll see in the

00:03:21.820 --> 00:03:22.380
next video.

00:03:22.380 --> 00:03:26.190
So let's start fleshing out the controller with the authentication service up next.

