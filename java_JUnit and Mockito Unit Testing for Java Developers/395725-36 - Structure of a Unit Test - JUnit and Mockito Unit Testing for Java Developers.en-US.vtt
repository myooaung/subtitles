WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.310
Let's take a look number what we expect to have in our unit test methods.

00:00:05.310 --> 00:00:07.730
This will give us a good template on how to curb them,

00:00:07.730 --> 00:00:09.790
which we can use as we're doing our unit testing.

00:00:09.790 --> 00:00:13.570
If you keep this mental template in your head when you're according a unit tests,

00:00:13.570 --> 00:00:14.550
you can't go far wrong.

00:00:14.550 --> 00:00:15.280
In my opinion,

00:00:15.280 --> 00:00:19.650
it keeps things nice and simple providers with the structure we can use consistently across

00:00:19.650 --> 00:00:20.350
all tests.

00:00:20.350 --> 00:00:25.470
So it's generally accepted that there are two men types of logical structure for your unit

00:00:25.470 --> 00:00:26.190
says methods.

00:00:25.470 --> 00:00:25.470
,

00:00:26.190 --> 00:00:28.150
I'll just say unit test now for this.

00:00:28.150 --> 00:00:31.400
But just know I'm referring to the methods which form a single unit test.

00:00:31.400 --> 00:00:35.810
I test a specific aspect of your system on the test for the production classroom testing.

00:00:35.810 --> 00:00:37.150
If you prefer to call it that,

00:00:37.150 --> 00:00:39.770
both of these approaches are pretty much the same.

00:00:39.770 --> 00:00:43.540
But just look at testing from a slightly different perspective on a better suited to

00:00:43.540 --> 00:00:46.220
different audiences will come to this in a second,

00:00:46.220 --> 00:00:50.580
but the two choices you have for the logical structure about unit tests are either arrange

00:00:50.580 --> 00:00:51.410
act assert,

00:00:51.410 --> 00:00:56.760
sometimes referred to as Triple A and given when then let's think for a second about high

00:00:56.760 --> 00:00:59.290
level things we need to have happen when we write a test.

00:00:59.290 --> 00:01:00.510
From a logical viewpoint,

00:01:00.510 --> 00:01:02.890
the method we're testing needs to be called.

00:01:02.890 --> 00:01:04.200
This is the thing we're testing,

00:01:04.200 --> 00:01:05.920
so we definitely need that to happen.

00:01:05.920 --> 00:01:06.720
Also,

00:01:06.720 --> 00:01:10.480
the point of calling the method is so we can check what the method did after the fact.

00:01:10.480 --> 00:01:15.460
So we need to have some code which allows us to observe what happened so we can evaluate

00:01:15.460 --> 00:01:17.000
with a test passed or failed.

00:01:17.000 --> 00:01:19.170
That only leaves the other aspect,

00:01:19.170 --> 00:01:23.210
which is to set up the context correctly for the test before we invoked the method.

00:01:23.210 --> 00:01:23.750
Now,

00:01:23.750 --> 00:01:27.190
if we rearrange these into their correct order which is set up,

00:01:27.190 --> 00:01:28.260
involved the method,

00:01:28.260 --> 00:01:29.260
then check the results.

00:01:29.260 --> 00:01:32.150
We have the Triple A formula for arrange act assert.

00:01:32.150 --> 00:01:33.780
In this scheme,

00:01:33.780 --> 00:01:35.720
we have an arranged phase.

00:01:35.720 --> 00:01:38.280
This is where we put code which will set up our test,

00:01:38.280 --> 00:01:39.140
for example,

00:01:39.140 --> 00:01:41.360
put the system on the test into a particular state.

00:01:41.360 --> 00:01:43.180
Prior to invoking the method being tested.

00:01:43.180 --> 00:01:47.220
This might be setting it up with references to mark collaborators that it will work with

00:01:47.220 --> 00:01:50.880
during the execution of the method on similarly setting up any state or behavior.

00:01:50.880 --> 00:01:54.040
We require those more collaborators to exhibit during the tests.

00:01:54.040 --> 00:01:58.430
Once we have that set up done arrange phase that we can actually invoke the method we're

00:01:58.430 --> 00:01:59.000
testing,

00:01:59.000 --> 00:02:00.250
this is the act phase.

00:02:00.250 --> 00:02:03.080
We really just want to have a single method being cold here.

00:02:03.080 --> 00:02:04.520
Don't call multiple methods.

00:02:04.520 --> 00:02:05.190
If you do,

00:02:05.190 --> 00:02:09.210
you're allowing the implementation detail of the production class being tested to leak into

00:02:09.210 --> 00:02:10.010
the test case.

00:02:10.010 --> 00:02:13.860
So the ex faces just one method invocation the one method that's being tested.

00:02:13.860 --> 00:02:14.900
Then,

00:02:14.900 --> 00:02:16.180
once we've invoked the method,

00:02:16.180 --> 00:02:18.410
we can do the checking part and shake the results.

00:02:18.410 --> 00:02:19.900
This is the assert phase,

00:02:19.900 --> 00:02:22.110
like its name suggests in this part.

00:02:22.110 --> 00:02:25.750
This is where you put assertions about the state of the world after the method is being

00:02:25.750 --> 00:02:26.310
invoked.

00:02:26.310 --> 00:02:29.920
But this can either be asserting something about the return parameter of the Method cult.

00:02:29.920 --> 00:02:33.730
If it returns some results or might be assertions around the state of the objects passed

00:02:33.730 --> 00:02:34.330
into the method,

00:02:34.330 --> 00:02:37.290
coal or possibly very fine the calls or data etcetera,

00:02:37.290 --> 00:02:41.350
which will pass to the mock collaborators Now there are two schools of thought on unit

00:02:41.350 --> 00:02:43.300
testing state based verification.

00:02:43.300 --> 00:02:46.240
You do these with assertions on behavior verification.

00:02:46.240 --> 00:02:48.490
You do these with checking the method calls on mocks.

00:02:48.490 --> 00:02:50.960
We won't get into this now as it's a bit advanced.

00:02:50.960 --> 00:02:52.610
But however you're checking the results,

00:02:52.610 --> 00:02:56.010
just understand that you put them in the a surface off the unit test.

00:02:56.010 --> 00:02:58.560
Now that we know what arrange act says,

00:02:58.560 --> 00:02:59.870
What about this given when,

00:02:59.870 --> 00:03:00.420
then former?

00:03:00.420 --> 00:03:01.120
Well,

00:03:01.120 --> 00:03:05.210
this is a still referred to as behaviour driven testing in behavioral driven testing.

00:03:05.210 --> 00:03:09.500
What you're doing is looking at the system from the behavior you want it to have breaking

00:03:09.500 --> 00:03:09.950
it down.

00:03:09.950 --> 00:03:11.960
We have the phases as first off,

00:03:11.960 --> 00:03:12.920
have a given face,

00:03:12.920 --> 00:03:16.830
which sets up the preconditions or the state of the system before we invoked the behavior

00:03:16.830 --> 00:03:17.570
being tested.

00:03:17.570 --> 00:03:18.530
Next,

00:03:18.530 --> 00:03:19.770
have a wen phase,

00:03:19.770 --> 00:03:22.690
which performs the behavior on Finally have a then face,

00:03:22.690 --> 00:03:25.500
which asserts a state of the union after the behavior is being done.

00:03:25.500 --> 00:03:26.100
In other words,

00:03:26.100 --> 00:03:27.550
looks at the post conditions.

00:03:27.550 --> 00:03:29.620
This notion of pre and post conditions,

00:03:29.620 --> 00:03:30.130
by the way,

00:03:30.130 --> 00:03:31.650
is a good way of looking at things,

00:03:31.650 --> 00:03:34.470
preconditions of what you want to be true before the test.

00:03:34.470 --> 00:03:37.430
Post conditions are what you're looking to be true after the test,

00:03:37.430 --> 00:03:38.170
you could have,

00:03:38.170 --> 00:03:38.700
for example,

00:03:38.700 --> 00:03:43.180
a test scenario like this given the user is logged in when the user logs out,

00:03:43.180 --> 00:03:44.810
then the user cannot make a purchase.

00:03:44.810 --> 00:03:47.410
Tests like these or more specifically,

00:03:47.410 --> 00:03:51.500
using given when then wording usually lend themselves to being at a higher level of

00:03:51.500 --> 00:03:52.110
abstraction.

00:03:52.110 --> 00:03:53.440
That a simple unit test,

00:03:53.440 --> 00:03:54.090
in fact,

00:03:54.090 --> 00:03:56.100
given unit testing more lower level anyway,

00:03:56.100 --> 00:03:59.510
focusing on a single class you tend to encounter Arrange actor,

00:03:59.510 --> 00:03:59.760
sir.

00:03:59.760 --> 00:04:00.370
A lot more.

00:04:00.370 --> 00:04:01.210
Nevertheless,

00:04:01.210 --> 00:04:03.110
it's a valid style of writing test cases.

00:04:03.110 --> 00:04:04.110
So it's worth mentioning,

00:04:04.110 --> 00:04:06.270
typically to find these Maurin tests,

00:04:06.270 --> 00:04:08.610
which are for business consumption by business analysts,

00:04:08.610 --> 00:04:10.100
testers and product owners.

00:04:10.100 --> 00:04:10.940
In other words,

00:04:10.940 --> 00:04:13.150
you find the more integration of exceptions tests,

00:04:13.150 --> 00:04:14.870
so it's less common in unit tests.

00:04:14.870 --> 00:04:16.650
So which one should you use?

00:04:16.650 --> 00:04:17.110
Well,

00:04:17.110 --> 00:04:18.620
it's of do really arrange.

00:04:18.620 --> 00:04:20.560
Actor Sir is popular with developers.

00:04:20.560 --> 00:04:23.390
It's a bit more technical oriented in its choice of wording.

00:04:23.390 --> 00:04:26.650
The focus is on what the unit test does by its implementation.

00:04:26.650 --> 00:04:27.760
Given when then,

00:04:27.760 --> 00:04:28.110
however,

00:04:28.110 --> 00:04:31.580
is popular with business analysts and testers because it focuses more looking at the

00:04:31.580 --> 00:04:35.260
behavioral aspects and it reads easier for those less technical audiences.

00:04:35.260 --> 00:04:37.910
Whichever one you use the the structure is the same.

00:04:37.910 --> 00:04:39.980
Just make sure you're consistent in using them.

00:04:39.980 --> 00:04:40.480
In other words,

00:04:40.480 --> 00:04:41.850
pick one style and stick to it.

00:04:41.850 --> 00:04:45.910
I usually do arrange actor certain have comments in the test code with those words,

00:04:45.910 --> 00:04:48.710
so it's very clear which bit of Kurt is doing which phase.

00:04:48.710 --> 00:04:50.330
It's a good practice to get into,

00:04:50.330 --> 00:04:53.970
and you can even set up a template in your I D to generate this automatically for you.

00:04:53.970 --> 00:04:57.850
So now we know how destructive test methods with other arrange,

00:04:57.850 --> 00:04:58.020
act,

00:04:58.020 --> 00:04:59.170
assert or given when,

00:04:59.170 --> 00:05:02.180
then they should put you in a good place to write your tests from here.

00:05:02.180 --> 00:05:04.060
Just remember the different phrases.

00:05:04.060 --> 00:05:06.160
Stick to them and you'll be writing very clean,

00:05:06.160 --> 00:05:07.710
very focused and easy to understand.

00:05:07.710 --> 00:05:08.250
Test could

