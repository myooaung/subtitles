WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.910
so we just saw the equal to match ER and the key point here is that it's actually using the

00:00:06.910 --> 00:00:08.240
Java equals method.

00:00:08.240 --> 00:00:09.110
And as we've said,

00:00:09.110 --> 00:00:14.960
the bad signs of this from a Tesco perspective is that we're actually using production code

00:00:14.960 --> 00:00:14.960
,

00:00:14.960 --> 00:00:17.460
which is this user dot create regular user method.

00:00:17.460 --> 00:00:22.310
We was in production code in our test method to create the objects that we're doing

00:00:22.310 --> 00:00:23.350
assertions against,

00:00:23.350 --> 00:00:25.170
which isn't really ideal.

00:00:25.170 --> 00:00:29.320
We really want to keep the code were invoking to the bat minimum,

00:00:29.320 --> 00:00:34.220
ideally just to the method invocation which were testing and not call any extra card.

00:00:34.220 --> 00:00:35.350
Because if we do that,

00:00:35.350 --> 00:00:37.780
it's difficult to isolate where problems might occur.

00:00:37.780 --> 00:00:38.790
In other words,

00:00:38.790 --> 00:00:40.980
this card could actually be buggy.

00:00:40.980 --> 00:00:41.620
So,

00:00:41.620 --> 00:00:42.170
for example,

00:00:42.170 --> 00:00:44.210
supposing there's some logic in here,

00:00:44.210 --> 00:00:47.580
which creates a user object which isn't quite set up as we'd like it,

00:00:47.580 --> 00:00:49.830
then that might somehow skew our tests,

00:00:49.830 --> 00:00:50.800
which we don't really want.

00:00:50.800 --> 00:00:55.840
So the moral of the story here is don't call production code in your test code just to

00:00:55.840 --> 00:00:57.480
create the objects you're asserting against,

00:00:57.480 --> 00:00:59.180
keep those production costs to a minimum,

00:00:59.180 --> 00:01:01.300
preferably just to the better that you're invoking,

00:01:01.300 --> 00:01:02.840
which is another being tested.

00:01:02.840 --> 00:01:04.240
So how do we get around this?

00:01:04.240 --> 00:01:08.820
Because obviously we want to have the ability to be able to compare elements of the

00:01:08.820 --> 00:01:09.460
collection.

00:01:09.460 --> 00:01:14.150
But we want to do it without having a cold to a factory method like this,

00:01:14.150 --> 00:01:17.620
or even a call to the constructor so we could do that a different way,

00:01:17.620 --> 00:01:19.050
which will show in the next video.

