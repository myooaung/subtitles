WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.060
in the world of unit tests and mocking everything starts with the so called of system under

00:00:04.060 --> 00:00:04.550
test.

00:00:04.550 --> 00:00:06.530
This is the class or unit,

00:00:06.530 --> 00:00:08.480
as it could also mean on that's being tested.

00:00:08.480 --> 00:00:12.270
It makes sense that everything starts from here from this system on the test,

00:00:12.270 --> 00:00:15.040
since that's the thing we're testing now.

00:00:15.040 --> 00:00:15.530
This class,

00:00:15.530 --> 00:00:19.160
which is being tested this system in the test doesn't exist on its own.

00:00:19.160 --> 00:00:22.990
Not unless it's a very simple command line application or trivial script or utility,

00:00:22.990 --> 00:00:25.890
maybe with just a handful of methods that were testing No,

00:00:25.890 --> 00:00:26.710
in general,

00:00:26.710 --> 00:00:28.200
in the object oriented world,

00:00:28.200 --> 00:00:30.470
applications are built out of many different objects,

00:00:30.470 --> 00:00:32.570
which communicate with each other to get the job done.

00:00:32.570 --> 00:00:37.460
So in general it follows that the classes we end of testing in a proper system interact

00:00:37.460 --> 00:00:39.310
with other objects to do what they need to do.

00:00:39.310 --> 00:00:45.140
So the next concept we haven't unit testing and mocking is the notion of collaborators in

00:00:45.140 --> 00:00:45.910
technical speak.

00:00:45.910 --> 00:00:51.140
The system under test interacts with its collaborators to do the stuff it needs to do so.

00:00:51.140 --> 00:00:55.060
The system under test interacts with its collaborators to do whatever it needs to do.

00:00:55.060 --> 00:00:58.230
This could involve receiving input or sending output or,

00:00:58.230 --> 00:00:58.710
more likely,

00:00:58.710 --> 00:01:02.220
will involve multiple messages being sent back and forth between the collaborators to get

00:01:02.220 --> 00:01:02.950
its job done.

00:01:02.950 --> 00:01:04.810
The complex It doesn't really matter.

00:01:04.810 --> 00:01:08.580
But the main point here is to establish in your mind the notion of roles,

00:01:08.580 --> 00:01:09.340
in other words,

00:01:09.340 --> 00:01:12.550
what each type of object does when where it sits within unit testing.

00:01:12.550 --> 00:01:15.040
When you're faced with the see of code in the real world,

00:01:15.040 --> 00:01:16.130
in a large project,

00:01:16.130 --> 00:01:19.280
it can seem daunting to be told to write a unit test for a particular class.

00:01:19.280 --> 00:01:23.870
But by analyzing the code and correctly being able to identify the system in the test on

00:01:23.870 --> 00:01:26.260
the object it's interact with has its collaborators,

00:01:26.260 --> 00:01:29.050
you'll be able to write effective unit tests much easier.

00:01:29.050 --> 00:01:32.510
So while these diagrams might seem a little abstract for now,

00:01:32.510 --> 00:01:34.970
stay with me on were related to code pretty soon,

00:01:34.970 --> 00:01:39.910
extending this idea of a large system in the real world we won't just have three objects in

00:01:39.910 --> 00:01:41.340
the system will be many more.

00:01:41.340 --> 00:01:41.970
In fact,

00:01:41.970 --> 00:01:44.750
the collaborators to also don't just exist on the room.

00:01:44.750 --> 00:01:47.260
They'll also have other objects they interact with.

00:01:47.260 --> 00:01:52.160
The connections might be one way we've just input or output or maybe both ways.

00:01:52.160 --> 00:01:52.810
Again.

00:01:52.810 --> 00:01:53.660
It's not so relevant.

00:01:53.660 --> 00:01:57.820
But the key point here in this diagram is and this is the big picture for the sake of

00:01:57.820 --> 00:02:00.610
writing a unit test for the system on the test in green,

00:02:00.610 --> 00:02:03.230
we do not care what these other more distant objects do.

00:02:03.230 --> 00:02:04.310
We couldn't care less.

00:02:04.310 --> 00:02:06.350
It's of no concern to our unit test.

00:02:06.350 --> 00:02:07.260
You see,

00:02:07.260 --> 00:02:11.610
the scope of our unit test is just around the system under test and its immediate

00:02:11.610 --> 00:02:12.510
collaborators.

00:02:12.510 --> 00:02:16.050
That's Collaborator one and collaborator to in this diagram.

00:02:16.050 --> 00:02:17.050
Now,

00:02:17.050 --> 00:02:20.830
our objective is to write test code which will put this class through its paces and

00:02:20.830 --> 00:02:21.970
exercise its functions.

00:02:21.970 --> 00:02:23.130
How do we do this,

00:02:23.130 --> 00:02:23.410
then?

00:02:23.410 --> 00:02:24.340
Well,

00:02:24.340 --> 00:02:25.260
looking at the diagram,

00:02:25.260 --> 00:02:28.880
we can see that the system in the test is clearly connected to its immediate collaborators

00:02:28.880 --> 00:02:28.880
.

00:02:28.880 --> 00:02:31.400
Does collaborators 12 We've seen the gray box.

00:02:31.400 --> 00:02:32.310
Therefore,

00:02:32.310 --> 00:02:35.230
we need a way of setting up our test code now a test environment,

00:02:35.230 --> 00:02:35.790
if you like,

00:02:35.790 --> 00:02:40.760
so that we can control those collaborators by manipulating what input and output the

00:02:40.760 --> 00:02:42.750
collaborators receive or supply to the system.

00:02:42.750 --> 00:02:46.360
And the test will be able to observe how the system on the test acts under different

00:02:46.360 --> 00:02:47.000
conditions.

00:02:47.000 --> 00:02:47.820
In other words,

00:02:47.820 --> 00:02:48.990
different test scenarios.

00:02:48.990 --> 00:02:53.970
So how do we control the collaborates is then the answer is huge.

00:02:53.970 --> 00:02:54.500
Drumroll here,

00:02:54.500 --> 00:02:54.860
please.

00:02:54.860 --> 00:02:56.650
We use mock objects,

00:02:56.650 --> 00:03:01.610
the stand in for the real collaborators on I was such programmable replacements.

00:03:01.610 --> 00:03:03.040
In other words,

00:03:03.040 --> 00:03:06.800
we don't let the system in the test interact with the real collaborators the actual objects

00:03:06.800 --> 00:03:07.540
themselves do,

00:03:07.540 --> 00:03:10.870
but instead supply the system on the test with our mock replacements,

00:03:10.870 --> 00:03:12.850
which we can program to act as we'd like them to.

00:03:12.850 --> 00:03:14.680
For the purpose of a given test scenario.

00:03:14.680 --> 00:03:19.190
By swapping in mock collaborators which will act with the rial system under test,

00:03:19.190 --> 00:03:22.570
we contest how the system on the test acts in different conditions.

00:03:22.570 --> 00:03:26.650
This could be anything from getting the collaborators to act in a happy path scenario to

00:03:26.650 --> 00:03:27.600
test the main success.

00:03:27.600 --> 00:03:28.480
Execution path.

00:03:28.480 --> 00:03:31.990
This is the sequence of code which is executed when the system is running as its

00:03:31.990 --> 00:03:33.210
anticipated on.

00:03:33.210 --> 00:03:35.180
This is hopefully 99% of the time,

00:03:35.180 --> 00:03:37.820
but we can also get the collaborators to do unusual,

00:03:37.820 --> 00:03:38.840
unanticipated,

00:03:38.840 --> 00:03:40.000
abnormal things too.

00:03:40.000 --> 00:03:41.180
For example,

00:03:41.180 --> 00:03:44.810
throw exceptions are return badly formed data to the system on the test.

00:03:44.810 --> 00:03:45.920
In this way,

00:03:45.920 --> 00:03:47.190
we contest the execution,

00:03:47.190 --> 00:03:48.920
perhaps in the code which are less traveled,

00:03:48.920 --> 00:03:53.260
and ensure that our way of handling such scenarios is done correctly and leaves a system in

00:03:53.260 --> 00:03:57.780
a consistent state on that application always operates in a healthy way and can handle such

00:03:57.780 --> 00:03:58.980
circumstances gracefully.

00:03:58.980 --> 00:04:00.670
I do want to emphasize,

00:04:00.670 --> 00:04:03.120
though as far as the scope of the unit test goes,

00:04:03.120 --> 00:04:07.720
we would only expect to see references to the system under test in the unit says Class on

00:04:07.720 --> 00:04:11.630
Marks for Collaborator one and collaborator to If in the unit test,

00:04:11.630 --> 00:04:15.680
we see some set up done with one of the top collaborators than we haven't set things up

00:04:15.680 --> 00:04:16.150
correctly,

00:04:16.150 --> 00:04:20.340
it would mean that the implementation details of the immediate collaborators have leaked

00:04:20.340 --> 00:04:21.240
into the test code.

00:04:21.240 --> 00:04:22.890
This will also make things brittle.

00:04:22.890 --> 00:04:27.080
Any change in implementation of such immediate collaborators who was implementations leaked

00:04:27.080 --> 00:04:29.110
into the test could break the unit test.

00:04:29.110 --> 00:04:30.010
And we don't want that.

00:04:30.010 --> 00:04:30.750
Remember,

00:04:30.750 --> 00:04:35.040
we need to keep things simple with were to win this unit test battle so simple,

00:04:35.040 --> 00:04:35.640
clear,

00:04:35.640 --> 00:04:37.500
clean code that's the name of the game,

00:04:37.500 --> 00:04:39.850
Then your test will be easy to write a mint tin.

00:04:39.850 --> 00:04:44.430
So we've seen now that controlling the collaborators using programmatic MOX is a powerful

00:04:44.430 --> 00:04:48.300
way of being able to ensure that occurred is tested thoroughly and comprehensively on the

00:04:48.300 --> 00:04:48.780
system,

00:04:48.780 --> 00:04:51.140
behaves robustly at all times under all conditions.

00:04:51.140 --> 00:04:55.280
And that's why mocking frameworks that Makita have gained so much popularity on our great

00:04:55.280 --> 00:04:56.370
skill to have a new belt.

