WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.380
to start using mosquito in projects,

00:00:04.380 --> 00:00:06.540
we need to add it as a library to amend projects.

00:00:06.540 --> 00:00:07.190
Class path.

00:00:07.190 --> 00:00:09.050
This means that the Java class loader,

00:00:09.050 --> 00:00:11.340
which is responsible for accessing and looking up classes,

00:00:11.340 --> 00:00:12.440
which the project uses,

00:00:12.440 --> 00:00:14.450
will be able to see the classes in that library.

00:00:14.450 --> 00:00:15.540
In other words,

00:00:15.540 --> 00:00:17.780
the classes you'll import when writing your mosquito.

00:00:17.780 --> 00:00:20.000
Best unit tests all basic stuff,

00:00:20.000 --> 00:00:22.850
but it's good to make sure we're all on the same page now.

00:00:22.850 --> 00:00:26.060
Unless you've been living in the wilderness with no Internet connection for many years,

00:00:26.060 --> 00:00:29.200
you'll probably be using one of to build tools to create your projects,

00:00:29.200 --> 00:00:30.950
namely Apache Maven or Gretel.

00:00:30.950 --> 00:00:34.430
So when working with projects which are built using these build tools,

00:00:34.430 --> 00:00:37.880
you have to configure my pizza was a dependency in your applications build file.

00:00:37.880 --> 00:00:40.360
Each build system has a separate bill file,

00:00:40.360 --> 00:00:41.240
which will need to edit.

00:00:41.240 --> 00:00:43.130
Melvin has the Ponder XML file,

00:00:43.130 --> 00:00:46.880
which stands for projects Object model on gravel has the builder Gretel found.

00:00:46.880 --> 00:00:51.540
Both of these files contain a section which allows us to define the dependencies libraries

00:00:51.540 --> 00:00:52.070
if you will,

00:00:52.070 --> 00:00:56.410
which we make available to our project to have the dependency toe amazing project.

00:00:56.410 --> 00:00:57.980
Look for the dependencies section,

00:00:57.980 --> 00:00:59.200
which includes your projects.

00:00:59.200 --> 00:01:02.120
Dependence is it will enclose the dependency configuration.

00:01:02.120 --> 00:01:04.310
Independence is XML block like this.

00:01:04.310 --> 00:01:07.710
Not that the colon is just our way of representing the fact that there will be other

00:01:07.710 --> 00:01:10.570
stuffing their We don't mean there's actually a colon in the file.

00:01:10.570 --> 00:01:11.840
Then you can other dependence.

00:01:11.840 --> 00:01:16.470
The declaration for the latest version of mosquito core inside adding Makita to a Gretel

00:01:16.470 --> 00:01:17.960
project is pretty much the same,

00:01:17.960 --> 00:01:19.300
just with different syntax.

00:01:19.300 --> 00:01:23.150
Since Gretel is groovy based on the XML based again looking at the dependence,

00:01:23.150 --> 00:01:26.950
this section which will look like this and have the mosquito call library dependence the

00:01:26.950 --> 00:01:28.320
declaration inside it,

00:01:28.320 --> 00:01:31.340
which will look like this now if you're in an I d.

00:01:31.340 --> 00:01:32.930
The dependency should then be refreshed,

00:01:32.930 --> 00:01:37.100
which means the jar file for Mosquito Corp on any of its associated dependence is will be

00:01:37.100 --> 00:01:40.770
downloaded from the central repository on will then be available to your project.

00:01:40.770 --> 00:01:41.540
At this point,

00:01:41.540 --> 00:01:44.960
you'll be able to import the various classes in the mosquito framework that we need to be

00:01:44.960 --> 00:01:47.200
able to write Mosquito Best Unit tests in Java.

00:01:47.200 --> 00:01:51.830
One last point before we go notice that the dependency of script is a test dependency.

00:01:51.830 --> 00:01:54.430
This means that it's available to use in our test card,

00:01:54.430 --> 00:01:56.450
which is under the source test Java folder.

00:01:56.450 --> 00:02:00.680
Now scoping it is a test dependency like this is nice and pretty much essential,

00:02:00.680 --> 00:02:04.350
since it keeps the test libraries and production libraries completely separated.

00:02:04.350 --> 00:02:05.350
In other words,

00:02:05.350 --> 00:02:06.000
by doing this,

00:02:06.000 --> 00:02:08.500
it also won't be available for use in our production code,

00:02:08.500 --> 00:02:10.580
Are you the real application we're testing on?

00:02:10.580 --> 00:02:12.200
This is exactly as we want things,

00:02:12.200 --> 00:02:15.790
since we never want to include any libraries or test code in our production deployment

00:02:15.790 --> 00:02:16.230
units.

00:02:16.230 --> 00:02:17.130
In other words,

00:02:17.130 --> 00:02:19.350
the jar War Korea fails will produce.

00:02:19.350 --> 00:02:20.340
For this reason,

00:02:20.340 --> 00:02:24.300
both may have an angry It'll give a separate class paths to manage this on keeping separate

00:02:24.300 --> 00:02:24.300
,

00:02:24.300 --> 00:02:26.950
which is represented by this concept of dependency scope.

00:02:26.950 --> 00:02:29.280
Having mosquito on any other test library,

00:02:29.280 --> 00:02:29.900
for that matter.

00:02:29.900 --> 00:02:30.470
For example,

00:02:30.470 --> 00:02:34.660
the jail unit or hand quest libraries as test compile scope means everything will be set up

00:02:34.660 --> 00:02:38.010
correctly on none of our test code will ever leak into our production releases,

00:02:38.010 --> 00:02:38.850
which is a good thing.

00:02:38.850 --> 00:02:40.510
So there it is.

00:02:40.510 --> 00:02:44.540
We're also have to start using mosquito and our Java projects now to be able to better

00:02:44.540 --> 00:02:45.510
right unit tests

