WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.940
in this video,

00:00:02.940 --> 00:00:07.190
we're going to explore how we can analyze the production code that we're testing and use

00:00:07.190 --> 00:00:10.610
that to drive how we set up the arrange block in our tests.

00:00:10.610 --> 00:00:15.940
So this gym back in now to writing the test back to the arrange act assert template we saw

00:00:15.940 --> 00:00:16.350
earlier.

00:00:16.350 --> 00:00:18.060
It's again go.

00:00:18.060 --> 00:00:20.450
Our range thanked.

00:00:20.450 --> 00:00:24.270
So always nice to get into those habits.

00:00:24.270 --> 00:00:27.930
Just copy it here as well.

00:00:27.930 --> 00:00:28.960
The admin uses one.

00:00:28.960 --> 00:00:31.800
Now we know where we're putting the card on what?

00:00:31.800 --> 00:00:33.200
The cause they're gonna be in those sections.

00:00:33.200 --> 00:00:34.400
So in a range,

00:00:34.400 --> 00:00:37.640
were really setting up the marks Two actors we want them to.

00:00:37.640 --> 00:00:40.970
So here it's gonna be we'll keep.

00:00:40.970 --> 00:00:50.150
So when make that a static import So when they use a repository,

00:00:50.150 --> 00:00:55.350
find all let's just look back a still why we're doing find all.

00:00:55.350 --> 00:00:57.790
So if we go back to the production class,

00:00:57.790 --> 00:00:58.870
we're gonna test this,

00:00:58.870 --> 00:01:00.200
get regular users method yet,

00:01:00.200 --> 00:01:04.950
and so get regular uses causing to this other method here,

00:01:04.950 --> 00:01:12.240
which was get users by user type and that method calls use a repository,

00:01:12.240 --> 00:01:13.120
don't find all.

00:01:13.120 --> 00:01:17.750
So that's why we're stepping that particular method and the purpose of the regular users

00:01:17.750 --> 00:01:21.870
test them is really to test this bit of card here.

00:01:21.870 --> 00:01:23.430
There's a few things we could do with this.

00:01:23.430 --> 00:01:23.680
We could,

00:01:23.680 --> 00:01:24.450
for example,

00:01:24.450 --> 00:01:28.150
say they said they used repository up to return no objects whatsoever.

00:01:28.150 --> 00:01:34.370
So like an empty leased or even a new list possibly to throw an exception,

00:01:34.370 --> 00:01:39.350
that something else it could do to return a list of users who are all live on regular users

00:01:39.350 --> 00:01:39.350
.

00:01:39.350 --> 00:01:45.010
A list of users who are a mix of life and making the users and vitamin users and that kind

00:01:45.010 --> 00:01:45.360
of thing,

00:01:45.360 --> 00:01:46.720
maybe even a list of,

00:01:46.720 --> 00:01:46.890
say,

00:01:46.890 --> 00:01:50.860
a few regular users and then a user which doesn't have a use name or doesn't have a

00:01:50.860 --> 00:01:51.360
password.

00:01:51.360 --> 00:01:56.260
So you can really get into setting up the test data on a really fine grained level to

00:01:56.260 --> 00:01:58.680
really test how robust this method really is.

00:01:58.680 --> 00:02:00.270
Certainly,

00:02:00.270 --> 00:02:02.550
at first sight it looks like a reasonable enough method,

00:02:02.550 --> 00:02:04.680
but the chances are you can always find issues with it.

00:02:04.680 --> 00:02:10.050
It just depends how deep you want to go and balancing that up the implementation cost of

00:02:10.050 --> 00:02:11.940
fixing up those kinds of issues.

00:02:11.940 --> 00:02:12.670
That is,

00:02:12.670 --> 00:02:17.380
with the likelihood off those issues actually manifesting themselves are occurring in

00:02:17.380 --> 00:02:17.950
production.

00:02:17.950 --> 00:02:18.960
But nevertheless,

00:02:18.960 --> 00:02:22.230
using unit testing is a nice way to get to all these kind of issues,

00:02:22.230 --> 00:02:23.250
and that's really what you want to do.

00:02:23.250 --> 00:02:28.220
You want to basically write unit tests so you know that your current can function in his

00:02:28.220 --> 00:02:29.540
robust aware as possible.

00:02:29.540 --> 00:02:30.850
That's really what it's all about.

00:02:30.850 --> 00:02:38.530
So I go back to use Look up service test So saying when we find all users and use

00:02:38.530 --> 00:02:39.250
Repository,

00:02:39.250 --> 00:02:47.720
then I'm gonna return in return use list and they just create useless.

00:02:47.720 --> 00:02:51.350
Now it's a list of user you list.

00:02:51.350 --> 00:02:53.240
It was new.

00:02:53.240 --> 00:02:59.950
Least import the user class,

00:02:59.950 --> 00:03:10.650
import the list class use the least don't on a We've got static factory with remember,

00:03:10.650 --> 00:03:21.070
create regular user on maybe seen 123 and that's creates a regular user.

00:03:21.070 --> 00:03:22.870
Regular user.

00:03:22.870 --> 00:03:39.380
Donald DVC 321 on may be and I've been user people.

00:03:39.380 --> 00:03:43.280
Interesting name for coming user PW.

00:03:43.280 --> 00:03:45.570
Did you when I need it now?

00:03:45.570 --> 00:03:46.000
This is good.

00:03:46.000 --> 00:03:48.050
We got to regular users which were in there.

00:03:48.050 --> 00:03:52.100
I am in user on the use repository market is set up to return.

00:03:52.100 --> 00:03:55.180
That data set returned a list of users when it's invoked,

00:03:55.180 --> 00:03:57.850
so that arrange section looks pretty good to me at this stage.

