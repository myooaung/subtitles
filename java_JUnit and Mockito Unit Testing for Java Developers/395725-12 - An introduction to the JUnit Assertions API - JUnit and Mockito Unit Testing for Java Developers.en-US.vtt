WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.810
in this video,

00:00:02.810 --> 00:00:04.380
we're going to look a J on its assertion.

00:00:04.380 --> 00:00:04.930
So p I,

00:00:04.930 --> 00:00:08.570
which it gives us to get a bit of a feel for the kinds of assertions which we can do in our

00:00:08.570 --> 00:00:08.930
code.

00:00:08.930 --> 00:00:12.590
So let's jump him so picking up from where we were in the last video.

00:00:12.590 --> 00:00:14.190
If we just get rid of that now,

00:00:14.190 --> 00:00:16.350
since we're talking about assertions,

00:00:16.350 --> 00:00:22.560
I should take into these a little bit further so J Unit has on assert class.

00:00:22.560 --> 00:00:24.560
If I type assert,

00:00:24.560 --> 00:00:29.270
then dot you can see here there are a ton of different methods which enable you to assert

00:00:29.270 --> 00:00:30.150
different things,

00:00:30.150 --> 00:00:32.070
courtesy of J and its assertions.

00:00:32.070 --> 00:00:32.580
FBI.

00:00:32.580 --> 00:00:33.270
So in general,

00:00:33.270 --> 00:00:36.150
you can assert things being also failed tests like we've seen before.

00:00:36.150 --> 00:00:38.130
But focusing on the assertion side,

00:00:38.130 --> 00:00:39.550
you can assert that things are not no,

00:00:39.550 --> 00:00:40.230
in other words,

00:00:40.230 --> 00:00:42.610
like an object reference is present in a variable,

00:00:42.610 --> 00:00:43.360
so it's useful.

00:00:43.360 --> 00:00:44.050
For example,

00:00:44.050 --> 00:00:46.760
if you call the method and you expect an object to be returned,

00:00:46.760 --> 00:00:47.560
you might want to check,

00:00:47.560 --> 00:00:51.180
but it's not know you can check that some Boolean condition is true.

00:00:51.180 --> 00:00:55.040
You can check the two arrays a recall because he here,

00:00:55.040 --> 00:00:56.660
they're overloaded for different types.

00:00:56.660 --> 00:01:01.280
When did the two objects recall?

00:01:01.280 --> 00:01:02.220
And again,

00:01:02.220 --> 00:01:03.180
they're overloaded methods,

00:01:03.180 --> 00:01:06.050
so you can feel free to check those out in your own time.

00:01:06.050 --> 00:01:08.030
But just not that in general,

00:01:08.030 --> 00:01:09.480
these methods tend to come in pairs.

00:01:09.480 --> 00:01:10.750
You can have a certain equals,

00:01:10.750 --> 00:01:13.490
and then we'll be in a certain no equals assert.

00:01:13.490 --> 00:01:13.810
True,

00:01:13.810 --> 00:01:18.430
then there's an assert false on broadly what these allow you to check for are basically

00:01:18.430 --> 00:01:19.880
nullity of object references,

00:01:19.880 --> 00:01:21.820
the quality of objects and values.

00:01:21.820 --> 00:01:22.440
Actually,

00:01:22.440 --> 00:01:23.760
speaking of equality as well,

00:01:23.760 --> 00:01:25.000
you'll know it's here that we have.

00:01:25.000 --> 00:01:29.490
The first argument is the expected thing that we expect on the second argument is the

00:01:29.490 --> 00:01:31.440
actual object that we get back,

00:01:31.440 --> 00:01:32.850
which we'll see in a second.

00:01:32.850 --> 00:01:37.430
We also have assertions off arrays being equal to and that kind of thing.

00:01:37.430 --> 00:01:40.240
So the best thing to do now is to look into your project,

00:01:40.240 --> 00:01:42.760
which you get set up in the previous section and just do what I did.

00:01:42.760 --> 00:01:46.720
Just do assert dog after you imported the organization and it don't assert class.

00:01:46.720 --> 00:01:48.680
I just go through those methods and really take them in.

00:01:48.680 --> 00:01:51.150
I have a bit of a play around and get a feel for how they work.

00:01:51.150 --> 00:01:51.450
I mean,

00:01:51.450 --> 00:01:53.850
this way you get to know them firsthand as you get to use them.

