WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.740
Now,

00:00:02.740 --> 00:00:05.340
when you start getting a little bit more advanced with your assertions,

00:00:05.340 --> 00:00:07.870
you start to see weaknesses in the June assertions.

00:00:07.870 --> 00:00:08.320
FBI.

00:00:08.320 --> 00:00:08.890
So,

00:00:08.890 --> 00:00:09.550
for example,

00:00:09.550 --> 00:00:11.580
it'd be nice as well there to be able to write extra things.

00:00:11.580 --> 00:00:11.680
So,

00:00:11.680 --> 00:00:12.570
for example to say,

00:00:12.570 --> 00:00:18.030
also assert that no users in this collection admin uses when you start to get those kind of

00:00:18.030 --> 00:00:18.470
things.

00:00:18.470 --> 00:00:21.340
We've got to want to write assertions like that when you do that,

00:00:21.340 --> 00:00:25.650
then you see that the Jamous Oceans ap I kind of let you down because it's pretty good.

00:00:25.650 --> 00:00:26.410
It's a good start.

00:00:26.410 --> 00:00:30.620
The problem is there that the methods of the offers are a little bit too low level.

00:00:30.620 --> 00:00:31.940
It's almost like you want constructs.

00:00:31.940 --> 00:00:34.650
That could be at a higher level that you can somehow kind of composed,

00:00:34.650 --> 00:00:35.260
for example,

00:00:35.260 --> 00:00:37.520
with ands and ors end conditions.

00:00:37.520 --> 00:00:38.030
Together,

00:00:38.030 --> 00:00:41.150
we can all them together if you have that kind of mechanism,

00:00:41.150 --> 00:00:43.680
combined with things like a certain equals,

00:00:43.680 --> 00:00:45.340
but maybe no exact equals.

00:00:45.340 --> 00:00:49.180
But maybe I'm kind of like checking things that kind of equal in a certain way,

00:00:49.180 --> 00:00:49.360
like,

00:00:49.360 --> 00:00:50.070
for example,

00:00:50.070 --> 00:00:50.850
on equals,

00:00:50.850 --> 00:00:55.400
ignore case or collections containing elements of this particular type of that kind of

00:00:55.400 --> 00:01:00.070
thing that have been much easier because then we wouldn't have to write a lot of code to be

00:01:00.070 --> 00:01:02.740
able to use these low level genius sessions.

00:01:02.740 --> 00:01:05.340
FBI constructs we don't have to write card then,

00:01:05.340 --> 00:01:06.790
which would be an imperative approach,

00:01:06.790 --> 00:01:10.240
were physically coding how we're testing things again.

00:01:10.240 --> 00:01:11.960
We all know that the more could've introduced,

00:01:11.960 --> 00:01:13.810
the more likely is we're gonna get bugs in there.

00:01:13.810 --> 00:01:16.500
That's why when I have a little code as possible in our unit tests,

00:01:16.500 --> 00:01:21.240
I want to keep them a simplest possible by just doing things as basic as creating a list.

00:01:21.240 --> 00:01:22.670
Individual answer for list.

00:01:22.670 --> 00:01:23.110
You know,

00:01:23.110 --> 00:01:24.410
individual assert statements,

00:01:24.410 --> 00:01:26.250
one call to invoke the test method,

00:01:26.250 --> 00:01:27.000
that kind of thing.

00:01:27.000 --> 00:01:29.760
If we had this kind of better assertions,

00:01:29.760 --> 00:01:32.220
mechanism or assertions library that we could use it on,

00:01:32.220 --> 00:01:33.250
that's exactly what happened.

00:01:33.250 --> 00:01:34.030
Crestor is for us,

00:01:34.030 --> 00:01:38.750
so let's have look now and see how we might rewrite this using the Ham Quest Assertions

00:01:38.750 --> 00:01:39.070
Library.

00:01:39.070 --> 00:01:43.750
Let's call this get regular uses on the school J unit.

00:01:43.750 --> 00:01:45.950
Let's copy this method.

00:01:45.950 --> 00:01:55.250
Call it get regular uses hem Crist.

00:01:55.250 --> 00:01:56.130
Great.

00:01:56.130 --> 00:01:59.500
So now we're all set up and we can start to explore and Christ in the next videos

