WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.750
Let's create a test for this now then so but shifting Manti create new test.

00:00:06.750 --> 00:00:12.410
It's the user Look up service test and we'll have to still methods here to correct these

00:00:12.410 --> 00:00:14.330
test methods to test regular users.

00:00:14.330 --> 00:00:15.100
Um,

00:00:15.100 --> 00:00:18.250
in users that get functionality of those Respective This Let's do OK,

00:00:18.250 --> 00:00:20.450
we're going to test ready to go.

00:00:20.450 --> 00:00:24.150
So if we run this now just to make sure everything set up Okay,

00:00:24.150 --> 00:00:26.490
you can see we've got two tests.

00:00:26.490 --> 00:00:31.100
He still says that passed to have to test for milliseconds.

00:00:31.100 --> 00:00:32.280
Everything's good.

00:00:32.280 --> 00:00:34.290
That's right.

00:00:34.290 --> 00:00:34.920
Test for this.

00:00:34.920 --> 00:00:35.360
Now,

00:00:35.360 --> 00:00:36.030
whatever you're writing,

00:00:36.030 --> 00:00:40.150
unit tests always reflect back and look at the actual production code that you're testing.

00:00:40.150 --> 00:00:40.830
You could do this,

00:00:40.830 --> 00:00:42.050
my shift committee,

00:00:42.050 --> 00:00:45.540
to go back to the corresponding production class.

00:00:45.540 --> 00:00:49.300
So command shifty will toggle between the production class you're testing on the actual

00:00:49.300 --> 00:00:49.850
class,

00:00:49.850 --> 00:00:51.250
which is the test last itself.

00:00:51.250 --> 00:00:52.810
So here we go.

00:00:52.810 --> 00:00:54.060
It's a direction card.

00:00:54.060 --> 00:00:57.250
He was Look up service again command you to even go back to the test.

00:00:57.250 --> 00:01:01.930
So let's go shift Monte back to the production code,

00:01:01.930 --> 00:01:03.060
use a look of service,

00:01:03.060 --> 00:01:05.950
and that was generated the test methods we could move on.

00:01:05.950 --> 00:01:09.510
But I wanted to show you that to show you just how easy it is to total between the

00:01:09.510 --> 00:01:11.330
production class on the test classes.

00:01:11.330 --> 00:01:15.410
Testing it because you'll find yourself frequently ongenda total between the two classes.

00:01:15.410 --> 00:01:17.340
Toe other curlicue test well,

00:01:17.340 --> 00:01:21.530
referencing the production code is testing or even fix bugs in the production code as the

00:01:21.530 --> 00:01:23.550
test you writing revealed defects in it.

00:01:23.550 --> 00:01:24.660
So yeah,

00:01:24.660 --> 00:01:26.300
a useful trick to have in your toolbox.

