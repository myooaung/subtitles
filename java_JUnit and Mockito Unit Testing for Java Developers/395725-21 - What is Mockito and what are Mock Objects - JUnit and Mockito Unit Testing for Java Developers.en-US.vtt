WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.260
So Makita was a library that you can include a news in the unit tests of your Java projects

00:00:06.260 --> 00:00:10.780
to enable you to create various types of so called testicles which your tests can use.

00:00:10.780 --> 00:00:15.590
Now they're different times of testicles and you'll hear words like dummy stub,

00:00:15.590 --> 00:00:17.200
mock spy and thick on.

00:00:17.200 --> 00:00:17.590
Don't worry,

00:00:17.590 --> 00:00:19.480
we'll cover what these are later in the course.

00:00:19.480 --> 00:00:20.330
But for now,

00:00:20.330 --> 00:00:24.320
we're just gonna refer to them as Mark objects in this little intro video to keep things

00:00:24.320 --> 00:00:25.350
nice and simple.

00:00:25.350 --> 00:00:27.530
So these mock objects,

00:00:27.530 --> 00:00:31.820
which Makita lets you create you can think of these air standings for real objects which

00:00:31.820 --> 00:00:34.910
you can use in your tests when you went test code.

00:00:34.910 --> 00:00:35.510
Specifically,

00:00:35.510 --> 00:00:36.790
when you write a unit test,

00:00:36.790 --> 00:00:38.920
you're really interested in testing the unit.

00:00:38.920 --> 00:00:41.300
That's the cluster testing on nothing else.

00:00:41.300 --> 00:00:45.950
That means that in your unit tests the only real production code which executes should be

00:00:45.950 --> 00:00:47.550
this class you're writing the test for,

00:00:47.550 --> 00:00:49.780
and that class will work with the standings,

00:00:49.780 --> 00:00:52.450
these mock objects as it would do in the real world.

00:00:52.450 --> 00:00:54.690
This is where Makita comes in.

00:00:54.690 --> 00:00:59.320
It lets us create these mark objects super easily on Let us set up how they're behaving.

00:00:59.320 --> 00:01:03.200
Our tests during this allow you to write really good unit tests,

00:01:03.200 --> 00:01:07.000
which contest your application much more comprehensively on quicker than before.

00:01:07.000 --> 00:01:09.690
Let's think about a Web up for a second.

00:01:09.690 --> 00:01:11.500
It might have a logging controller,

00:01:11.500 --> 00:01:14.980
which can take the user name and password entered by the user on a log in screen.

00:01:14.980 --> 00:01:15.600
On Return.

00:01:15.600 --> 00:01:20.030
A view of the home pitch for logged in user if the password is good or return the user back

00:01:20.030 --> 00:01:20.930
to the log in screen.

00:01:20.930 --> 00:01:22.180
If the passwords bad.

00:01:22.180 --> 00:01:24.840
So here's our logging controller,

00:01:24.840 --> 00:01:29.470
waiting for those using them and password combinations to come in now To do its job,

00:01:29.470 --> 00:01:31.910
you will probably need to delegate to some service.

00:01:31.910 --> 00:01:36.790
So let's say it has a reference to an authentication service in reality that probably be a

00:01:36.790 --> 00:01:38.890
repository to to access the database.

00:01:38.890 --> 00:01:40.530
But let's leave that aside for now.

00:01:40.530 --> 00:01:42.730
The point is that in production,

00:01:42.730 --> 00:01:44.440
when the APP is deployed on running for,

00:01:44.440 --> 00:01:48.600
these two classes work together to get the user logged in or kick him out with a logging

00:01:48.600 --> 00:01:49.060
controller,

00:01:49.060 --> 00:01:53.150
processing the Web requests but delegating to the authentication service to do the actual

00:01:53.150 --> 00:01:55.410
real work of very finely uses credentials.

00:01:55.410 --> 00:02:00.770
So thinking about the testing aspect when I want to test the loin controller when I want to

00:02:00.770 --> 00:02:01.690
write a test for it,

00:02:01.690 --> 00:02:02.750
a unit sets for it.

00:02:02.750 --> 00:02:05.730
What I wants have is the rial logging controller itself.

00:02:05.730 --> 00:02:06.860
It's what I'm testing,

00:02:06.860 --> 00:02:08.290
so it needs to be the real deal.

00:02:08.290 --> 00:02:12.350
But I want to have a mock authentication service that it works with.

00:02:12.350 --> 00:02:15.630
That's because the scope of my unit test is just the unit.

00:02:15.630 --> 00:02:16.960
It's just a thing I'm testing,

00:02:16.960 --> 00:02:18.680
which in this case is the logging controller.

00:02:18.680 --> 00:02:20.770
So I don't want anything else to be in that test.

00:02:20.770 --> 00:02:25.180
Israel on Lee the controller but my control it still needs a service to work with.

00:02:25.180 --> 00:02:29.150
So I quit and mark authentication service that is a standing for the real thing.

00:02:29.150 --> 00:02:33.390
Now having a mock object courtesy of Makita in place is awesome.

00:02:33.390 --> 00:02:35.950
It means I can put the real Kurt through its paces.

00:02:35.950 --> 00:02:36.720
In other words,

00:02:36.720 --> 00:02:39.690
test all sorts of scenarios to see how my production code will behave.

00:02:39.690 --> 00:02:41.330
Maybe in the first test,

00:02:41.330 --> 00:02:45.350
I set up the mock service to behave nicely on returned that the user's password is correct

00:02:45.350 --> 00:02:45.350
.

00:02:45.350 --> 00:02:47.040
Maybe in the second test.

00:02:47.040 --> 00:02:49.600
I set up the mock to misbehave and threw an exception.

00:02:49.600 --> 00:02:54.580
And in the third test I might return them to use of objects under other test to which I

00:02:54.580 --> 00:02:55.090
could right.

00:02:55.090 --> 00:02:59.180
The point is that I can see how my production code behaves through different scenarios in a

00:02:59.180 --> 00:03:00.300
way that's quick set up,

00:03:00.300 --> 00:03:02.220
developed and fun to use on here.

00:03:02.220 --> 00:03:04.640
I might even fix up the production code while I'm at it,

00:03:04.640 --> 00:03:08.210
as I learned more about my code than I initially thought about when I was writing it.

00:03:08.210 --> 00:03:09.990
And they'll have time to do this,

00:03:09.990 --> 00:03:12.650
since mosquito is quick to use and code with.

00:03:12.650 --> 00:03:14.970
So this is what mosquito is all about.

00:03:14.970 --> 00:03:18.860
It's about helping invite better unit tests through offering a nice and easy to use their

00:03:18.860 --> 00:03:19.990
ploy for creating,

00:03:19.990 --> 00:03:22.460
manipulating and even validating these mark objects.

00:03:22.460 --> 00:03:23.840
Specifically,

00:03:23.840 --> 00:03:28.400
it's easy to set up on Install Off is an easy way to create different types of testicles.

00:03:28.400 --> 00:03:32.920
Those mock objects we've just seen has an easy to use their PR for stubbing behavior that's

00:03:32.920 --> 00:03:35.550
programming the marks to do what you want them to do in your tests.

00:03:35.550 --> 00:03:38.500
It's also got an airplane for verifying interactions on monks,

00:03:38.500 --> 00:03:42.660
to which that you check that the collaborators of your production class received the right

00:03:42.660 --> 00:03:44.980
calls with the right parameters on return,

00:03:44.980 --> 00:03:47.060
the right responses on Finally,

00:03:47.060 --> 00:03:48.640
it's got a noninvasive FBI,

00:03:48.640 --> 00:03:50.930
so it's easy to apply to real world projects.

00:03:50.930 --> 00:03:52.370
So there it is.

00:03:52.370 --> 00:03:54.830
You now have a high level overview of Makita on.

00:03:54.830 --> 00:03:57.870
I'll see you in the next videos to show you exactly how we can use it.

