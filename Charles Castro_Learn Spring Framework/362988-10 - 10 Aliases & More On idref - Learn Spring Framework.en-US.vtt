WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.570
Hello there.

00:00:00.570 --> 00:00:02.750
And welcome back to this spring development course.

00:00:02.750 --> 00:00:09.100
So last time we went over the very basics of I d ref and how exactly that works.

00:00:09.100 --> 00:00:15.470
And they were going to be going over that in more detail as well as we're gonna be

00:00:15.470 --> 00:00:18.960
understanding a bit more about how a list is work as well.

00:00:18.960 --> 00:00:21.510
So without further ado,

00:00:21.510 --> 00:00:23.200
let's go in and take a look at how that works.

00:00:23.200 --> 00:00:24.240
All right,

00:00:24.240 --> 00:00:28.240
So they were going to be going over I d reference and Leases has already said so let's get

00:00:28.240 --> 00:00:29.070
right into this.

00:00:29.070 --> 00:00:30.470
The real All right.

00:00:30.470 --> 00:00:32.150
So I d refs I d ref.

00:00:32.150 --> 00:00:39.670
The idea ref element is simply an air proof way to pass the i d of another ella on being in

00:00:39.670 --> 00:00:41.590
the container to a constructor.

00:00:41.590 --> 00:00:42.040
Argh!

00:00:42.040 --> 00:00:44.060
Or property element.

00:00:44.060 --> 00:00:45.800
So you just an example?

00:00:45.800 --> 00:00:49.250
We have a bean i d The target being was just some class,

00:00:49.250 --> 00:00:55.140
and then we have a B 90 the client being just some other class and a property name,

00:00:55.140 --> 00:00:56.230
target name,

00:00:56.230 --> 00:01:01.700
and then the i d ref being equal the target mean so if there was no being with an i d.

00:01:01.700 --> 00:01:05.650
The target being it would throw on air if there isn't being with the i d.

00:01:05.650 --> 00:01:13.210
Target being that assigns the target name string attributes inside the client bean to the

00:01:13.210 --> 00:01:17.090
target being as a strength so it doesn't refer to the actual be 90.

00:01:17.090 --> 00:01:22.890
So the above the definition snippet is exactly equivalent at runtime to the following

00:01:22.890 --> 00:01:23.430
snippet.

00:01:23.430 --> 00:01:27.610
So this right here when he actually gets compiled or actually,

00:01:27.610 --> 00:01:27.800
no,

00:01:27.800 --> 00:01:28.430
I guess I guess,

00:01:28.430 --> 00:01:29.510
I guess run.

00:01:29.510 --> 00:01:32.790
It is the same thing as of this right here.

00:01:32.790 --> 00:01:36.070
So being ID equals client and property name equals target.

00:01:36.070 --> 00:01:37.680
Name value equals the target beat.

00:01:37.680 --> 00:01:41.700
So essentially the same exact thing at one time.

00:01:41.700 --> 00:01:43.120
Since we do have a bean,

00:01:43.120 --> 00:01:43.990
i d the target being.

00:01:43.990 --> 00:01:45.830
But if we didn't have this line here,

00:01:45.830 --> 00:01:47.950
then they would not be the same at all.

00:01:47.950 --> 00:01:49.370
All right,

00:01:49.370 --> 00:01:51.850
so let's take a look at how that works in the code.

00:01:51.850 --> 00:01:53.000
All right,

00:01:53.000 --> 00:01:57.750
so we already went over exactly how I d ref an example of I d ref in the previous lesson.

00:01:57.750 --> 00:02:00.750
But today we're gonna be going over in a little bit more detail.

00:02:00.750 --> 00:02:04.300
So essentially we have this being I d zebra here,

00:02:04.300 --> 00:02:04.560
right?

00:02:04.560 --> 00:02:06.560
And then a class calm example Package animal.

00:02:06.560 --> 00:02:08.070
Then we have a property name.

00:02:08.070 --> 00:02:10.420
Animals going go 22 Zebra to animal.

00:02:10.420 --> 00:02:12.180
So property name Private,

00:02:12.180 --> 00:02:12.590
animal,

00:02:12.590 --> 00:02:13.100
animal.

00:02:13.100 --> 00:02:13.930
So,

00:02:13.930 --> 00:02:16.030
um said animal.

00:02:16.030 --> 00:02:18.830
So we said it using an animal in this case,

00:02:18.830 --> 00:02:19.320
um,

00:02:19.320 --> 00:02:22.710
way we said it using a i D ref bean zebra one.

00:02:22.710 --> 00:02:24.090
So if we go and run this,

00:02:24.090 --> 00:02:28.950
we get an error.

00:02:28.950 --> 00:02:31.650
Since we're trying to set the I d.

00:02:31.650 --> 00:02:34.940
Ref being zebra 12 ah,

00:02:34.940 --> 00:02:37.520
an animal and it passes into strings.

00:02:37.520 --> 00:02:42.190
That's actually where a lot of people get really confused as they think that I d ref

00:02:42.190 --> 00:02:46.380
somehow actually refers to the raft tag.

00:02:46.380 --> 00:02:49.790
So the ref Italian I d ref tag there they're different.

00:02:49.790 --> 00:02:52.630
They're not really all that similar,

00:02:52.630 --> 00:02:54.270
and they accomplish very different things.

00:02:54.270 --> 00:02:55.090
So,

00:02:55.090 --> 00:02:55.750
um,

00:02:55.750 --> 00:02:57.080
again,

00:02:57.080 --> 00:02:57.910
So when we do,

00:02:57.910 --> 00:02:59.950
I d ref being equal Zebra one.

00:02:59.950 --> 00:03:06.490
All we do is just passing a string as zebra one that works on Lee.

00:03:06.490 --> 00:03:09.940
If we actually have a zebra one.

00:03:09.940 --> 00:03:10.290
Ah,

00:03:10.290 --> 00:03:11.890
being with an i d of zebra one.

00:03:11.890 --> 00:03:19.860
So here we get an error because we actually are trying to put zebra one into the property

00:03:19.860 --> 00:03:21.830
with the name animal which is of type,

00:03:21.830 --> 00:03:23.680
animal and not off type strength,

00:03:23.680 --> 00:03:25.890
as that's why it's actually giving us the error here.

00:03:25.890 --> 00:03:29.280
So if we change the property name,

00:03:29.280 --> 00:03:31.320
animal to string right here,

00:03:31.320 --> 00:03:32.050
validator,

00:03:32.050 --> 00:03:36.530
validator.

00:03:36.530 --> 00:03:38.740
And now if we run our applications,

00:03:38.740 --> 00:03:42.120
start there we go.

00:03:42.120 --> 00:03:42.700
As you can see,

00:03:42.700 --> 00:03:45.840
it actually gets the validator and we pass in the string.

00:03:45.840 --> 00:03:50.130
And not to the actually the actual being that it refers to now again,

00:03:50.130 --> 00:03:51.400
who went over this last time.

00:03:51.400 --> 00:03:54.950
But if we go ahead and now do this right here,

00:03:54.950 --> 00:03:57.590
just like that and now run this,

00:03:57.590 --> 00:03:59.850
it will give us an error.

00:03:59.850 --> 00:04:02.980
Since it's looking for this being a zebra one.

00:04:02.980 --> 00:04:05.420
It's looking for the zebra one here being here.

00:04:05.420 --> 00:04:07.550
And if you put this back whoops,

00:04:07.550 --> 00:04:09.860
It's always wearing XML comments.

00:04:09.860 --> 00:04:11.270
When you do control,

00:04:11.270 --> 00:04:15.850
command slash on a commented piece of code actually don't really work very well.

00:04:15.850 --> 00:04:17.440
I don't remove the comment.

00:04:17.440 --> 00:04:18.450
Just commented again.

00:04:18.450 --> 00:04:22.650
There we go so that we remove the comment now it actually works perfectly as expected.

00:04:22.650 --> 00:04:23.780
All right,

00:04:23.780 --> 00:04:26.340
Until that essentially just the very basics of I d ref.

00:04:26.340 --> 00:04:30.780
Now let's write our very own personal being validator using the I direct tag.

00:04:30.780 --> 00:04:31.370
All right,

00:04:31.370 --> 00:04:32.750
so we're gonna right there,

00:04:32.750 --> 00:04:32.910
ever,

00:04:32.910 --> 00:04:33.240
ever.

00:04:33.240 --> 00:04:34.770
Very basic being validator,

00:04:34.770 --> 00:04:35.470
being validators,

00:04:35.470 --> 00:04:39.360
or actually a whole separate topic in spring.

00:04:39.360 --> 00:04:42.090
Pretty much everything in spring is it's it's whole separate topic.

00:04:42.090 --> 00:04:46.420
But I tried a very basic being validator that will validate a zebra,

00:04:46.420 --> 00:04:46.640
be.

00:04:46.640 --> 00:04:55.090
So let's go to actually create a new being validator class are gonna do class being

00:04:55.090 --> 00:04:56.250
validator.

00:04:56.250 --> 00:04:59.290
There we go.

00:04:59.290 --> 00:05:00.220
All right,

00:05:00.220 --> 00:05:07.850
so this being a guard there class will have a private string animal one.

00:05:07.850 --> 00:05:13.750
There we go and have a private string animal to as well.

00:05:13.750 --> 00:05:17.460
There we go.

00:05:17.460 --> 00:05:18.360
All right,

00:05:18.360 --> 00:05:20.400
let's generate getters and centers Source.

00:05:20.400 --> 00:05:21.150
Generate,

00:05:21.150 --> 00:05:22.210
getting centers.

00:05:22.210 --> 00:05:22.850
There we go.

00:05:22.850 --> 00:05:24.510
Um,

00:05:24.510 --> 00:05:28.220
and I'm one animal to okay their video.

00:05:28.220 --> 00:05:28.570
All right,

00:05:28.570 --> 00:05:29.510
let's save it up.

00:05:29.510 --> 00:05:32.750
And now let's go back to our being dot xml file.

00:05:32.750 --> 00:05:36.830
I'm actually going to make this smaller since taking up quite a bit of space.

00:05:36.830 --> 00:05:37.350
There we go.

00:05:37.350 --> 00:05:38.480
Um,

00:05:38.480 --> 00:05:38.900
all right,

00:05:38.900 --> 00:05:40.080
so you know,

00:05:40.080 --> 00:05:43.130
being that XML file could have a new being bean.

00:05:43.130 --> 00:05:44.450
Oops.

00:05:44.450 --> 00:05:45.960
Bean.

00:05:45.960 --> 00:05:52.450
I d equals validator bean.

00:05:52.450 --> 00:05:55.050
Um,

00:05:55.050 --> 00:06:02.020
class equals com dot example dot p k g.

00:06:02.020 --> 00:06:06.950
Don't being alligator.

00:06:06.950 --> 00:06:10.280
There we go.

00:06:10.280 --> 00:06:10.760
All right.

00:06:10.760 --> 00:06:13.970
And then we're gonna dio property.

00:06:13.970 --> 00:06:15.970
Oops.

00:06:15.970 --> 00:06:20.150
Property name,

00:06:20.150 --> 00:06:22.200
Animal one.

00:06:22.200 --> 00:06:29.650
And then I d ref,

00:06:29.650 --> 00:06:36.850
I d raft being equals zebra one.

00:06:36.850 --> 00:06:38.380
It's going on.

00:06:38.380 --> 00:06:39.490
Delete this right here.

00:06:39.490 --> 00:06:46.330
And then we're gonna do the same thing for zebra and to all right,

00:06:46.330 --> 00:06:48.240
they're going us closes soft as well,

00:06:48.240 --> 00:06:50.790
Which is gonna be just like that?

00:06:50.790 --> 00:06:52.590
There we go.

00:06:52.590 --> 00:06:54.250
It's closed the soft as well.

00:06:54.250 --> 00:06:55.700
All right.

00:06:55.700 --> 00:06:56.200
And there we go.

00:06:56.200 --> 00:07:00.040
So now we have about being validator and a validator being.

00:07:00.040 --> 00:07:05.020
So if we have a being validated class than a validator beat being that now,

00:07:05.020 --> 00:07:05.500
we'll run.

00:07:05.500 --> 00:07:09.890
So it's gonna make sure that we have both zebra and zebra one beans.

00:07:09.890 --> 00:07:13.740
So it's going to run this application start,

00:07:13.740 --> 00:07:16.120
and now it should run without any problems.

00:07:16.120 --> 00:07:17.000
So does print.

00:07:17.000 --> 00:07:17.310
No.

00:07:17.310 --> 00:07:20.060
Since we don't actually assign anything into the zebra,

00:07:20.060 --> 00:07:21.010
don't get validator.

00:07:21.010 --> 00:07:26.130
It would actually remove that since we already have a separate being validator being so

00:07:26.130 --> 00:07:28.850
actually need a being validator inside.

00:07:28.850 --> 00:07:29.900
Ah,

00:07:29.900 --> 00:07:30.400
animal.

00:07:30.400 --> 00:07:36.150
So let's move that string of validator and the corresponding get instead are methods.

00:07:36.150 --> 00:07:38.150
There we go.

00:07:38.150 --> 00:07:38.750
All right.

00:07:38.750 --> 00:07:39.740
Um,

00:07:39.740 --> 00:07:42.250
let's save its and to rerun this again.

00:07:42.250 --> 00:07:45.070
All right.

00:07:45.070 --> 00:07:45.550
There we go.

00:07:45.550 --> 00:07:47.490
So what happens here?

00:07:47.490 --> 00:07:48.500
So what do we do?

00:07:48.500 --> 00:07:49.430
What's when we do?

00:07:49.430 --> 00:07:50.170
I d ref,

00:07:50.170 --> 00:07:51.720
being equal zebra one.

00:07:51.720 --> 00:07:53.920
And make sure that we have a being called zebra one,

00:07:53.920 --> 00:07:54.590
which we do.

00:07:54.590 --> 00:07:59.470
So in result it actually goes ahead and doesn't throw in air,

00:07:59.470 --> 00:08:01.550
then ejects if we ever being called zebra,

00:08:01.550 --> 00:08:02.610
we do.

00:08:02.610 --> 00:08:05.580
And then so that also essentially,

00:08:05.580 --> 00:08:06.750
um,

00:08:06.750 --> 00:08:08.970
that also done,

00:08:08.970 --> 00:08:09.770
throw any air.

00:08:09.770 --> 00:08:16.300
So what we can also do to make this sort of a little bit more useful is weaken generator to

00:08:16.300 --> 00:08:16.770
string here.

00:08:16.770 --> 00:08:23.050
So public at override public avoid no public string,

00:08:23.050 --> 00:08:25.150
two strings.

00:08:25.150 --> 00:08:28.840
All right,

00:08:28.840 --> 00:08:32.320
And then here we're just gonna right with the return return,

00:08:32.320 --> 00:08:34.650
um,

00:08:34.650 --> 00:08:38.580
beans,

00:08:38.580 --> 00:08:44.270
beans validated.

00:08:44.270 --> 00:08:47.840
And then we're gonna do,

00:08:47.840 --> 00:08:56.950
plus animal one plus amenable to.

00:08:56.950 --> 00:08:59.360
All right,

00:08:59.360 --> 00:08:59.820
there we go.

00:08:59.820 --> 00:09:02.540
So now if we in our application start class,

00:09:02.540 --> 00:09:03.350
we can now do,

00:09:03.350 --> 00:09:05.690
um uh,

00:09:05.690 --> 00:09:14.350
being validate wore vow equals application context.

00:09:14.350 --> 00:09:17.050
Don't get bean.

00:09:17.050 --> 00:09:22.780
And we're gonna pass in validator being i d,

00:09:22.780 --> 00:09:26.280
and it's gonna get it using develop later being I d.

00:09:26.280 --> 00:09:28.660
So let's add the cast of being validator.

00:09:28.660 --> 00:09:29.970
There we go.

00:09:29.970 --> 00:09:30.380
And look.

00:09:30.380 --> 00:09:32.400
Now let's run this application start.

00:09:32.400 --> 00:09:34.330
All right,

00:09:34.330 --> 00:09:41.650
I tell you about two printed and they were gonna some system dot out Dutch Rendell in.

00:09:41.650 --> 00:09:44.100
All right,

00:09:44.100 --> 00:09:44.550
there we going.

00:09:44.550 --> 00:09:45.860
So now when we run this,

00:09:45.860 --> 00:09:49.000
it should finally actually give us a legitimate there ago.

00:09:49.000 --> 00:09:49.940
So being validated.

00:09:49.940 --> 00:09:52.050
Zebra and zebra one and zebras.

00:09:52.050 --> 00:09:52.450
Well,

00:09:52.450 --> 00:09:55.910
so now if we actually remove zebra,

00:09:55.910 --> 00:09:56.750
for example,

00:09:56.750 --> 00:10:00.280
we now get an error.

00:10:00.280 --> 00:10:04.130
Since he can't find zebra and then Sam goes for zebra one.

00:10:04.130 --> 00:10:05.650
If we remove zebra one,

00:10:05.650 --> 00:10:08.240
it won't be able to find zebra.

00:10:08.240 --> 00:10:09.820
And so it will also give us in the air.

00:10:09.820 --> 00:10:11.350
Won't be able to find zebra one.

00:10:11.350 --> 00:10:12.650
Yeah,

00:10:12.650 --> 00:10:14.620
there we go.

00:10:14.620 --> 00:10:15.060
All right.

00:10:15.060 --> 00:10:17.720
But that everything back all right.

00:10:17.720 --> 00:10:20.380
Special stay validator being and how we use that.

00:10:20.380 --> 00:10:23.430
So now what's going to take a look at aliases?

00:10:23.430 --> 00:10:24.030
All right,

00:10:24.030 --> 00:10:25.390
so before we get to a leases,

00:10:25.390 --> 00:10:27.030
we go over this moron.

00:10:27.030 --> 00:10:27.360
I d.

00:10:27.360 --> 00:10:27.660
Ref.

00:10:27.660 --> 00:10:31.120
So remember here in the last slide how we went over the idea,

00:10:31.120 --> 00:10:35.750
ref and I we went over these two examples and how they're pretty much the same exact thing

00:10:35.750 --> 00:10:35.750
.

00:10:35.750 --> 00:10:36.380
Um,

00:10:36.380 --> 00:10:37.790
except here we use idea rafting.

00:10:37.790 --> 00:10:40.050
Here we use property name value that target being.

00:10:40.050 --> 00:10:45.240
So let's take a look at is exactly why this is a lot better than this one is going to take

00:10:45.240 --> 00:10:45.450
a look.

00:10:45.450 --> 00:10:49.850
So the main reason the first form is preferable to the second is that using the I.

00:10:49.850 --> 00:10:57.120
D raft tag allows the container to value date at deployment time that the referenced named

00:10:57.120 --> 00:10:59.000
being actually exists.

00:10:59.000 --> 00:11:03.560
Let me just and eso when we actually deploy our application,

00:11:03.560 --> 00:11:07.550
it will sort of tell us that the names been already exists.

00:11:07.550 --> 00:11:08.890
In the second variation,

00:11:08.890 --> 00:11:14.770
no validation is performed on the value that has passed to the target name property off the

00:11:14.770 --> 00:11:18.290
client being so right here in the target name property,

00:11:18.290 --> 00:11:20.570
the target being no validation is performed.

00:11:20.570 --> 00:11:22.160
So we have that mean we don't have that being,

00:11:22.160 --> 00:11:23.050
it doesn't care.

00:11:23.050 --> 00:11:26.850
It will still assign it to the property Target name.

00:11:26.850 --> 00:11:27.950
Um,

00:11:27.950 --> 00:11:34.230
any type of will only be discovered with most likely fatal results When the client being is

00:11:34.230 --> 00:11:35.100
actually in Stan,

00:11:35.100 --> 00:11:40.390
she hated so only when the client being isn't Stan Shih ated then it will actually cause

00:11:40.390 --> 00:11:41.240
cause,

00:11:41.240 --> 00:11:41.560
you know,

00:11:41.560 --> 00:11:44.720
problems more.

00:11:44.720 --> 00:11:45.900
Uh,

00:11:45.900 --> 00:11:50.650
if the client beam is a prototype being this typo and we'll go over prototypes being later

00:11:50.650 --> 00:11:51.600
on per site,

00:11:51.600 --> 00:11:56.370
being later on this typo and the resulting exception may only be discovered long after the

00:11:56.370 --> 00:11:57.780
container is actually deployed.

00:11:57.780 --> 00:11:58.990
Additionally,

00:11:58.990 --> 00:12:04.790
if the being being referred to is in the same XML unit and the B name is the Bean I d.

00:12:04.790 --> 00:12:10.350
The local attributes may be used which allow the XML Parsa itself to validate the being i d

00:12:10.350 --> 00:12:10.350
.

00:12:10.350 --> 00:12:12.740
Even earlier at XML document parts time,

00:12:12.740 --> 00:12:13.710
there's a lot of different.

00:12:13.710 --> 00:12:16.540
There's a lot of different things that we really didn't go over yet.

00:12:16.540 --> 00:12:21.120
It's just I just I just copied this from Ah that Springer commendation just asked a little

00:12:21.120 --> 00:12:23.300
bit more more information on I d ref,

00:12:23.300 --> 00:12:26.070
because I know I d ref can be very confusing,

00:12:26.070 --> 00:12:29.490
especially when you're just starting out because a lot of people don't understand why we

00:12:29.490 --> 00:12:29.710
need it.

00:12:29.710 --> 00:12:30.430
So what's the point?

00:12:30.430 --> 00:12:30.780
You know,

00:12:30.780 --> 00:12:31.990
it is actually the point,

00:12:31.990 --> 00:12:36.000
and we'll later on once you start getting into more complex applications,

00:12:36.000 --> 00:12:39.850
especially once you start understanding spring NBC,

00:12:39.850 --> 00:12:44.190
we're actually gonna learn about being validators and how they're built in and what they do

00:12:44.190 --> 00:12:49.210
and then you'll start to sort of maybe understand how I d ref works under the hood and how

00:12:49.210 --> 00:12:50.850
the being validators work themselves.

00:12:50.850 --> 00:12:51.800
Um,

00:12:51.800 --> 00:12:52.220
so yeah,

00:12:52.220 --> 00:12:53.380
so really quickly here,

00:12:53.380 --> 00:12:55.430
a property named Target name being with an i D.

00:12:55.430 --> 00:12:56.740
That target being must exist.

00:12:56.740 --> 00:12:59.860
Otherwise an exception will be thrown just being validation.

00:12:59.860 --> 00:13:00.850
All right,

00:13:00.850 --> 00:13:01.210
now,

00:13:01.210 --> 00:13:01.620
finally,

00:13:01.620 --> 00:13:03.660
let's get onto a leases there ago,

00:13:03.660 --> 00:13:04.060
All right?

00:13:04.060 --> 00:13:04.500
So,

00:13:04.500 --> 00:13:05.820
again,

00:13:05.820 --> 00:13:07.150
it seems like there's a lot of,

00:13:07.150 --> 00:13:08.040
um,

00:13:08.040 --> 00:13:08.620
text here,

00:13:08.620 --> 00:13:12.890
but it's really not Not not difficult text to understand.

00:13:12.890 --> 00:13:14.740
So in a being definition itself,

00:13:14.740 --> 00:13:16.710
you make supply more than one name for the bean.

00:13:16.710 --> 00:13:22.430
So by using a combination of up to one name specified to be at the idea tribute and another

00:13:22.430 --> 00:13:28.440
and any number of other names via the name attribute remember how we had the whole thing

00:13:28.440 --> 00:13:28.710
with,

00:13:28.710 --> 00:13:29.050
um,

00:13:29.050 --> 00:13:33.390
I d equals zebra and the name equals zebra one?

00:13:33.390 --> 00:13:34.120
I think so.

00:13:34.120 --> 00:13:36.620
We can refer to that being using zebra or zebra once,

00:13:36.620 --> 00:13:38.420
no matter what does it really matter?

00:13:38.420 --> 00:13:44.510
All these names can be considered equivalent aliases to the same being and are useful for

00:13:44.510 --> 00:13:47.310
some situations that just allowing each component,

00:13:47.310 --> 00:13:52.240
using an application to refer to a common dependency using a being named that is specific

00:13:52.240 --> 00:13:53.700
to that component itself.

00:13:53.700 --> 00:13:54.980
Which means that if we have,

00:13:54.980 --> 00:13:55.560
for example,

00:13:55.560 --> 00:13:56.130
a bean,

00:13:56.130 --> 00:13:57.510
that is you know,

00:13:57.510 --> 00:13:57.870
I don't know,

00:13:57.870 --> 00:13:58.350
maybe,

00:13:58.350 --> 00:13:59.050
um,

00:13:59.050 --> 00:14:03.930
we're creating a logging application and we need a bean for a student,

00:14:03.930 --> 00:14:04.400
right?

00:14:04.400 --> 00:14:05.790
And we need to have a base.

00:14:05.790 --> 00:14:09.730
Do so whenever recreated us new student going to have a base student.

00:14:09.730 --> 00:14:11.730
So we just assigned the value to base students.

00:14:11.730 --> 00:14:11.990
So,

00:14:11.990 --> 00:14:12.570
you know,

00:14:12.570 --> 00:14:14.150
it's the same thing as basted it,

00:14:14.150 --> 00:14:14.850
for example,

00:14:14.850 --> 00:14:18.970
and so we can have it for I d Base student and the name,

00:14:18.970 --> 00:14:19.280
you know,

00:14:19.280 --> 00:14:22.800
I don't know what you say starters do,

00:14:22.800 --> 00:14:26.680
so we can refer to it using either the idea or name doesn't matter anyway.

00:14:26.680 --> 00:14:31.180
Moving on having to specify all aliases when the bean is actually defined is not always

00:14:31.180 --> 00:14:31.610
adequate.

00:14:31.610 --> 00:14:32.130
However,

00:14:32.130 --> 00:14:36.750
it is sometimes a desirable to introduce an alias for a bean which is defined elsewhere.

00:14:36.750 --> 00:14:42.170
An XML based configuration metadata this maybe configuration metadata.

00:14:42.170 --> 00:14:44.880
This may be accomplished via the use of the alien element.

00:14:44.880 --> 00:14:49.660
So Alias element essentially just like another name for our being so alias name.

00:14:49.660 --> 00:14:53.820
So this is the from name to the being that we're gonna copy the being that we're gonna

00:14:53.820 --> 00:15:01.370
create the lease four and then the alias is the actual name that we're gonna give our being

00:15:01.370 --> 00:15:01.370
.

00:15:01.370 --> 00:15:06.910
So the new name that we're gonna give R B So in this case are being in the same container,

00:15:06.910 --> 00:15:11.060
which is named from name May also may also,

00:15:11.060 --> 00:15:13.320
after the use of this alien definition,

00:15:13.320 --> 00:15:15.770
be referred to as to name,

00:15:15.770 --> 00:15:19.350
so just it can be referred to either as from name or two names.

00:15:19.350 --> 00:15:22.110
We just create another name for being so pretty simple.

00:15:22.110 --> 00:15:24.230
All right,

00:15:24.230 --> 00:15:26.750
so now let's go ahead and take a look at how that works in the code.

00:15:26.750 --> 00:15:28.380
All right,

00:15:28.380 --> 00:15:31.060
here we are in our code.

00:15:31.060 --> 00:15:35.800
So right now we have a couple of beans of a validator being a zebra bean and a zebra one

00:15:35.800 --> 00:15:38.870
being that's going to remove our validator being would only need it anymore.

00:15:38.870 --> 00:15:39.530
Um,

00:15:39.530 --> 00:15:41.930
and now to go ahead and just remove our A C broke being as well.

00:15:41.930 --> 00:15:43.360
So we're gonna have a zebra one v.

00:15:43.360 --> 00:15:47.920
So now if we go back to our delete this well,

00:15:47.920 --> 00:15:49.450
just to make everything a little more readable,

00:15:49.450 --> 00:15:50.210
There we go.

00:15:50.210 --> 00:15:51.360
If you go back to our applications.

00:15:51.360 --> 00:15:51.640
Start.

00:15:51.640 --> 00:15:51.890
Let's go.

00:15:51.890 --> 00:15:52.600
To remove.

00:15:52.600 --> 00:15:54.280
This is well,

00:15:54.280 --> 00:16:03.960
And now we're gonna go ahead and do system dot out dot print allen zb dot Yet speaking it.

00:16:03.960 --> 00:16:04.490
All right?

00:16:04.490 --> 00:16:05.320
Not so.

00:16:05.320 --> 00:16:06.590
Let's actually do get weight.

00:16:06.590 --> 00:16:11.050
Don't get when I was to get size,

00:16:11.050 --> 00:16:16.040
Get size Berio Finally and then get weight from there.

00:16:16.040 --> 00:16:16.650
There we go.

00:16:16.650 --> 00:16:17.530
All right,

00:16:17.530 --> 00:16:17.750
now.

00:16:17.750 --> 00:16:18.020
Okay.

00:16:18.020 --> 00:16:19.470
So now that once we've done that,

00:16:19.470 --> 00:16:25.270
we can now run this and you'll see we get no give us a Mel Pointer exception.

00:16:25.270 --> 00:16:25.840
Actually,

00:16:25.840 --> 00:16:25.950
no.

00:16:25.950 --> 00:16:27.730
In this case against Yeah,

00:16:27.730 --> 00:16:28.670
no being,

00:16:28.670 --> 00:16:30.210
no being definition exception.

00:16:30.210 --> 00:16:32.250
No being named zebra available.

00:16:32.250 --> 00:16:33.280
So I'm going to fix this.

00:16:33.280 --> 00:16:33.660
Well,

00:16:33.660 --> 00:16:34.950
there's a couple of things we can do.

00:16:34.950 --> 00:16:38.610
So the most obvious solution is just to put a zebra here,

00:16:38.610 --> 00:16:44.590
right to remove the one we could also do is we can do name is equal to zebra,

00:16:44.590 --> 00:16:46.780
so this will essentially do the same thing.

00:16:46.780 --> 00:16:47.890
It will give it another name.

00:16:47.890 --> 00:16:49.800
And so now if we run this,

00:16:49.800 --> 00:16:52.210
you'll see that Now we get to 56.7,

00:16:52.210 --> 00:16:53.020
as expected.

00:16:53.020 --> 00:16:53.880
Ah,

00:16:53.880 --> 00:16:57.760
we could also use the alias tax so we can do right here.

00:16:57.760 --> 00:17:00.520
Alias,

00:17:00.520 --> 00:17:01.270
Uh,

00:17:01.270 --> 00:17:11.450
name equals zebra one alias equals zebra.

00:17:11.450 --> 00:17:14.250
There we go.

00:17:14.250 --> 00:17:14.790
All right.

00:17:14.790 --> 00:17:15.300
And now,

00:17:15.300 --> 00:17:17.140
if we run applications start.

00:17:17.140 --> 00:17:17.770
Remember,

00:17:17.770 --> 00:17:19.620
we only have I d zebra one no name,

00:17:19.620 --> 00:17:20.390
Hear anything.

00:17:20.390 --> 00:17:24.950
And now we get 56.7.

00:17:24.950 --> 00:17:26.160
Since we have an alias year.

00:17:26.160 --> 00:17:30.130
So when we refer an application start when you refer to zebra,

00:17:30.130 --> 00:17:32.720
it understands that we actually mean zebra one.

00:17:32.720 --> 00:17:34.080
Since we have an alias here.

00:17:34.080 --> 00:17:35.670
And if you know,

00:17:35.670 --> 00:17:39.960
if we have another alias with the same name than in that case,

00:17:39.960 --> 00:17:40.570
in this case,

00:17:40.570 --> 00:17:41.780
it won't actually us an error,

00:17:41.780 --> 00:17:44.110
but way have another being okay.

00:17:44.110 --> 00:17:44.850
Um,

00:17:44.850 --> 00:17:48.310
being I d equals it's gonna be zebra too.

00:17:48.310 --> 00:17:48.670
Okay,

00:17:48.670 --> 00:17:52.350
let me actually copies to save some time.

00:17:52.350 --> 00:17:53.560
Zebra too.

00:17:53.560 --> 00:17:54.050
Okay?

00:17:54.050 --> 00:17:58.380
And we're gonna It's gonna be an empty bean.

00:17:58.380 --> 00:18:01.600
We hear if zebra to Alex.

00:18:01.600 --> 00:18:02.260
Equal zebra.

00:18:02.260 --> 00:18:03.870
Let's see that.

00:18:03.870 --> 00:18:04.850
What happens here?

00:18:04.850 --> 00:18:09.710
Okay,

00:18:09.710 --> 00:18:10.180
so you see,

00:18:10.180 --> 00:18:11.870
we actually get a no pointer exception.

00:18:11.870 --> 00:18:12.030
Well,

00:18:12.030 --> 00:18:12.800
this is because,

00:18:12.800 --> 00:18:13.370
um,

00:18:13.370 --> 00:18:18.120
ever after the alias is sort of specified.

00:18:18.120 --> 00:18:20.420
It can then be overridden by the alias.

00:18:20.420 --> 00:18:20.720
So,

00:18:20.720 --> 00:18:23.320
essentially here we specify an alias.

00:18:23.320 --> 00:18:24.070
Zebra one,

00:18:24.070 --> 00:18:27.090
an alias zebra for zebra one.

00:18:27.090 --> 00:18:29.050
And then a new alias zebra.

00:18:29.050 --> 00:18:29.680
Well,

00:18:29.680 --> 00:18:38.270
now sort sort of override so that when we call Zebra Zebra inside our application start

00:18:38.270 --> 00:18:38.730
class,

00:18:38.730 --> 00:18:41.810
it will refer to zebra to and not zebra one.

00:18:41.810 --> 00:18:44.510
That's why we actually get the error.

00:18:44.510 --> 00:18:47.930
So if we actually do this before zebra one,

00:18:47.930 --> 00:18:49.580
then in this case,

00:18:49.580 --> 00:18:50.850
we whoops.

00:18:50.850 --> 00:18:51.170
Nope,

00:18:51.170 --> 00:18:51.480
nope.

00:18:51.480 --> 00:18:51.880
Nope,

00:18:51.880 --> 00:18:52.190
nope,

00:18:52.190 --> 00:18:52.440
nope.

00:18:52.440 --> 00:18:53.010
But I just do.

00:18:53.010 --> 00:18:54.850
No,

00:18:54.850 --> 00:18:55.510
actually,

00:18:55.510 --> 00:18:56.080
quickly.

00:18:56.080 --> 00:18:56.990
This one right there.

00:18:56.990 --> 00:18:57.260
Here.

00:18:57.260 --> 00:18:58.260
All right,

00:18:58.260 --> 00:18:59.450
there we go.

00:18:59.450 --> 00:19:00.710
Now we get fitted 6.7.

00:19:00.710 --> 00:19:01.670
So as experience.

00:19:01.670 --> 00:19:06.050
So we create a zebra to alias for a zebra.

00:19:06.050 --> 00:19:07.790
So zebra first to the uber to.

00:19:07.790 --> 00:19:12.650
And then we override that by saying that zebra in our 1st 2 zebra one so it overrides

00:19:12.650 --> 00:19:15.350
depending on the order of which you actually created.

00:19:15.350 --> 00:19:17.200
All right,

00:19:17.200 --> 00:19:20.170
so that is essentially aliases in spring.

00:19:20.170 --> 00:19:21.550
Now let's send homework.

00:19:21.550 --> 00:19:22.330
All right,

00:19:22.330 --> 00:19:23.470
so the homework is very simple.

00:19:23.470 --> 00:19:24.820
We essentially just did it.

00:19:24.820 --> 00:19:28.000
Take your zebra bean and create an alias for it.

00:19:28.000 --> 00:19:30.600
Using the alias tag to give it a name.

00:19:30.600 --> 00:19:31.120
Bobby.

00:19:31.120 --> 00:19:32.580
Just name or Zebra.

00:19:32.580 --> 00:19:33.000
Bobby.

00:19:33.000 --> 00:19:34.220
It's not gonna be named Bobby.

00:19:34.220 --> 00:19:34.710
Okay?

00:19:34.710 --> 00:19:35.750
Very simple.

00:19:35.750 --> 00:19:37.010
Just gonna do that.

00:19:37.010 --> 00:19:38.670
Shouldn't take you longer than I don't know.

00:19:38.670 --> 00:19:40.050
Maybe a minute or so.

00:19:40.050 --> 00:19:40.940
So,

00:19:40.940 --> 00:19:41.230
Yeah.

00:19:41.230 --> 00:19:41.780
Come on.

00:19:41.780 --> 00:19:42.060
It's won.

00:19:42.060 --> 00:19:42.790
Tak alias.

00:19:42.790 --> 00:19:43.180
That's it.

00:19:43.180 --> 00:19:43.950
It's very simple.

00:19:43.950 --> 00:19:44.970
All right.

00:19:44.970 --> 00:19:45.360
So anyway,

00:19:45.360 --> 00:19:46.360
I wish you luck with homework,

00:19:46.360 --> 00:19:48.210
and I don't think you need luck,

00:19:48.210 --> 00:19:49.760
But I wish you anyway.

00:19:49.760 --> 00:19:50.100
And,

00:19:50.100 --> 00:19:50.420
uh,

00:19:50.420 --> 00:19:51.460
i'll say enough time to assume.

