WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.990
Hello there.

00:00:00.990 --> 00:00:03.720
And welcome back to this spring development course.

00:00:03.720 --> 00:00:11.060
So last time we took a general overview of spring and build our very first spring

00:00:11.060 --> 00:00:11.750
application.

00:00:11.750 --> 00:00:13.650
We did that,

00:00:13.650 --> 00:00:14.090
of course,

00:00:14.090 --> 00:00:15.700
without really knowing what we're doing.

00:00:15.700 --> 00:00:19.540
So we understood what exactly we're doing,

00:00:19.540 --> 00:00:24.450
how we're creating the XML file the class and how it got it from the XML file.

00:00:24.450 --> 00:00:30.050
But we're doing that without really any knowledge of the theory of what goes on behind it.

00:00:30.050 --> 00:00:31.290
So naturally,

00:00:31.290 --> 00:00:34.250
we're gonna take a look at in this lesson.

00:00:34.250 --> 00:00:37.890
So we're gonna take a look at the concepts that spring is built on.

00:00:37.890 --> 00:00:40.280
Now there's gonna be ah,

00:00:40.280 --> 00:00:41.210
little bit of reading,

00:00:41.210 --> 00:00:47.800
so perhaps it's not going to be all diagrams and code samples and not all gonna make sense

00:00:47.800 --> 00:00:48.450
immediately.

00:00:48.450 --> 00:00:50.140
But later on,

00:00:50.140 --> 00:00:53.980
as you're gonna be going over code examples in later lessons,

00:00:53.980 --> 00:01:00.660
you're going to start to think about back to this lesson and think about how we actually

00:01:00.660 --> 00:01:04.110
did do something useful in this lesson.

00:01:04.110 --> 00:01:06.480
Sort of understand what was happening here,

00:01:06.480 --> 00:01:08.780
what we're talking about anyway,

00:01:08.780 --> 00:01:09.550
let's get started.

00:01:09.550 --> 00:01:15.350
So the first thing we need to understand is dependency injection.

00:01:15.350 --> 00:01:23.110
So the technology that spring is most identified with is the dependency injection D I

00:01:23.110 --> 00:01:28.460
flavor of inversion of control Thean version of control.

00:01:28.460 --> 00:01:33.190
IOC is general concept and it can be expressed in many different ways.

00:01:33.190 --> 00:01:39.010
Dependency injection is merely one concrete example of inversion off control.

00:01:39.010 --> 00:01:40.820
All right,

00:01:40.820 --> 00:01:44.650
so you we got quite a bit of understanding some here.

00:01:44.650 --> 00:01:48.450
We're not gonna be actually going over What dependency injection is in this slide,

00:01:48.450 --> 00:01:49.560
That's gonna be the next slide.

00:01:49.560 --> 00:01:54.960
But here we just understood that dependency injection is just one of the examples of

00:01:54.960 --> 00:01:56.350
inversion of control.

00:01:56.350 --> 00:01:58.720
So what is inversion of control?

00:01:58.720 --> 00:01:59.010
Well,

00:01:59.010 --> 00:02:04.520
when writing a complex job application application classes should be as independent as

00:02:04.520 --> 00:02:10.370
possible off other Java classes to increase the possibility to reuse these classes and to

00:02:10.370 --> 00:02:13.750
test them independently of other classes while unit testing.

00:02:13.750 --> 00:02:14.750
Remember,

00:02:14.750 --> 00:02:15.850
this is called abstraction.

00:02:15.850 --> 00:02:17.240
Dependency.

00:02:17.240 --> 00:02:21.560
Injection helps in going these classes together and at the same time keeping them

00:02:21.560 --> 00:02:22.350
independent.

00:02:22.350 --> 00:02:24.210
All right,

00:02:24.210 --> 00:02:24.990
so,

00:02:24.990 --> 00:02:25.740
no,

00:02:25.740 --> 00:02:28.550
I think Look at what is dependency injection.

00:02:28.550 --> 00:02:31.570
So what exactly a dependency injection?

00:02:31.570 --> 00:02:33.410
Let's look at these two words separately.

00:02:33.410 --> 00:02:34.530
Here,

00:02:34.530 --> 00:02:39.210
the dependency part translates into an association between two classes.

00:02:39.210 --> 00:02:42.090
So what does that mean,

00:02:42.090 --> 00:02:42.670
Well,

00:02:42.670 --> 00:02:43.440
we can.

00:02:43.440 --> 00:02:43.670
Ah,

00:02:43.670 --> 00:02:44.620
very simple example.

00:02:44.620 --> 00:02:47.720
Is that if we have in one class an instance of another class,

00:02:47.720 --> 00:02:48.050
So,

00:02:48.050 --> 00:02:48.580
for example,

00:02:48.580 --> 00:02:49.400
we can have Ah,

00:02:49.400 --> 00:02:50.500
class.

00:02:50.500 --> 00:02:51.480
Um,

00:02:51.480 --> 00:02:51.890
I don't know.

00:02:51.890 --> 00:02:54.200
Maybe class bear,

00:02:54.200 --> 00:02:56.650
which has a class size,

00:02:56.650 --> 00:02:59.350
and then the size class will have,

00:02:59.350 --> 00:03:03.760
um maybe in tight wait and ah length.

00:03:03.760 --> 00:03:08.780
And with so bear class bear will have a variable of type sides.

00:03:08.780 --> 00:03:10.150
That's just a very simple example.

00:03:10.150 --> 00:03:11.450
All right,

00:03:11.450 --> 00:03:12.070
let's move on.

00:03:12.070 --> 00:03:13.710
For example,

00:03:13.710 --> 00:03:16.390
Class A is dependent of class B.

00:03:16.390 --> 00:03:17.360
Now,

00:03:17.360 --> 00:03:19.400
let's look at the second part injection.

00:03:19.400 --> 00:03:25.850
All this means is Class B will get injected into Class A by the IOC.

00:03:25.850 --> 00:03:27.460
Remember,

00:03:27.460 --> 00:03:29.650
the IOC is the inversion of control.

00:03:29.650 --> 00:03:31.050
Okay,

00:03:31.050 --> 00:03:36.680
dependency injection can happen in the way of passing parameters to the constructor or by

00:03:36.680 --> 00:03:39.100
post construction using center meds.

00:03:39.100 --> 00:03:44.930
So we'll take a look at it shortly on a example of what I just read in the last sentence

00:03:44.930 --> 00:03:45.290
here.

00:03:45.290 --> 00:03:45.910
But for now,

00:03:45.910 --> 00:03:50.350
it's actually take a look at it at a spring specific dependency injection implementation.

00:03:50.350 --> 00:03:51.740
So first of all,

00:03:51.740 --> 00:03:52.630
when you take a look at a bean,

00:03:52.630 --> 00:03:55.330
I completely jump the gun there anyway,

00:03:55.330 --> 00:04:00.820
so what Is it being so A Java bean is a Java class that should follow following conventions

00:04:00.820 --> 00:04:00.820
.

00:04:00.820 --> 00:04:03.370
If you have a no Argh constructors,

00:04:03.370 --> 00:04:05.280
just a constructor with no arguments.

00:04:05.280 --> 00:04:07.440
It should be serialized herbal.

00:04:07.440 --> 00:04:13.070
So it just it should just implement Serial Izabal and it should provide methods to set and

00:04:13.070 --> 00:04:14.570
get the values of the properties.

00:04:14.570 --> 00:04:15.750
So get on center methods.

00:04:15.750 --> 00:04:17.460
So that's very simple.

00:04:17.460 --> 00:04:19.170
That's all that being in so personally.

00:04:19.170 --> 00:04:21.440
When I was first learning Java,

00:04:21.440 --> 00:04:24.350
it actually took me a while to understand what a bean was,

00:04:24.350 --> 00:04:24.990
Um,

00:04:24.990 --> 00:04:26.390
because I thought it was pretty,

00:04:26.390 --> 00:04:27.420
something pretty complex.

00:04:27.420 --> 00:04:31.380
But it turns out it was just a regular Java class that has gathered center methods,

00:04:31.380 --> 00:04:34.050
is serialize herbal and has a no art constructor.

00:04:34.050 --> 00:04:39.430
So and I thought that it was some completely separate thing.

00:04:39.430 --> 00:04:39.890
At that point,

00:04:39.890 --> 00:04:41.480
I had created many beans.

00:04:41.480 --> 00:04:42.810
I just didn't really,

00:04:42.810 --> 00:04:43.330
you know,

00:04:43.330 --> 00:04:45.520
understand that they that's what they were.

00:04:45.520 --> 00:04:50.360
So this is what a Penis means are important in spring because it's really what we use it.

00:04:50.360 --> 00:04:52.060
What's what it's based on is well,

00:04:52.060 --> 00:04:54.350
so let's take a look at exactly where we can use them.

00:04:54.350 --> 00:04:56.800
We can use them using the I O C.

00:04:56.800 --> 00:04:57.590
Container.

00:04:57.590 --> 00:04:58.230
All right,

00:04:58.230 --> 00:04:59.890
so we have more reading here.

00:04:59.890 --> 00:05:00.780
Don't worry.

00:05:00.780 --> 00:05:01.750
I'm gonna go over it together,

00:05:01.750 --> 00:05:02.800
and then after every,

00:05:02.800 --> 00:05:03.140
you know,

00:05:03.140 --> 00:05:05.020
point that I make sure I'm gonna explain it.

00:05:05.020 --> 00:05:05.340
And,

00:05:05.340 --> 00:05:05.760
you know,

00:05:05.760 --> 00:05:06.590
in other words,

00:05:06.590 --> 00:05:06.860
so that,

00:05:06.860 --> 00:05:08.580
you know you can understand it would be better.

00:05:08.580 --> 00:05:11.780
This is more of the what's written here in the Power point is more of the dictionary

00:05:11.780 --> 00:05:12.700
definition of something.

00:05:12.700 --> 00:05:13.820
And personally,

00:05:13.820 --> 00:05:17.120
I think dictionary definitions do a very bad job of explaining things.

00:05:17.120 --> 00:05:18.450
So we're gonna go over it,

00:05:18.450 --> 00:05:19.510
the dictionary definition,

00:05:19.510 --> 00:05:20.900
and then go over another definition.

00:05:20.900 --> 00:05:21.280
Together,

00:05:21.280 --> 00:05:23.100
I'm or human one sort off.

00:05:23.100 --> 00:05:23.830
Anyway,

00:05:23.830 --> 00:05:24.460
let's take a look.

00:05:24.460 --> 00:05:28.310
So the spring container is at the core of the spring framework.

00:05:28.310 --> 00:05:31.560
This container will create the objects,

00:05:31.560 --> 00:05:33.090
wire them together,

00:05:33.090 --> 00:05:38.580
configure them and imagined and manage their complete lifecycle from creation till

00:05:38.580 --> 00:05:39.270
destruction.

00:05:39.270 --> 00:05:43.180
And the life cycle of objects is also something that we're gonna go over,

00:05:43.180 --> 00:05:43.700
of course.

00:05:43.700 --> 00:05:46.850
And I believe in a the next or after the next lesson.

00:05:46.850 --> 00:05:53.050
The spring container uses d I to manage the components that components that make up an

00:05:53.050 --> 00:05:53.750
application.

00:05:53.750 --> 00:05:57.600
And remember that d I is just dependency injection,

00:05:57.600 --> 00:05:59.270
So d I stand for dependency injection.

00:05:59.270 --> 00:06:00.460
All right,

00:06:00.460 --> 00:06:02.580
so these objects are called spring beans,

00:06:02.580 --> 00:06:04.240
which we'll discuss in the next lesson.

00:06:04.240 --> 00:06:07.320
So spring beans are a little bit different from regular beans.

00:06:07.320 --> 00:06:10.380
We're gonna go over exactly what they do in the necklace,

00:06:10.380 --> 00:06:11.110
and it says here,

00:06:11.110 --> 00:06:11.510
so yeah.

00:06:11.510 --> 00:06:12.810
Okay,

00:06:12.810 --> 00:06:17.030
so then the container gets its instructions on what objects to Instead,

00:06:17.030 --> 00:06:17.330
she ate,

00:06:17.330 --> 00:06:22.430
configure and assembled by reading the configuration made meta data provided the

00:06:22.430 --> 00:06:25.810
configuration metadata can be represented either by XML.

00:06:25.810 --> 00:06:29.270
Remember how we used the XML file in the previous lesson?

00:06:29.270 --> 00:06:33.210
How we use that to read beans either by the XML,

00:06:33.210 --> 00:06:34.580
java annotations,

00:06:34.580 --> 00:06:35.750
or java code?

00:06:35.750 --> 00:06:41.890
The following diagram represents a high level overview high level view of how spring works

00:06:41.890 --> 00:06:41.890
.

00:06:41.890 --> 00:06:43.920
So we can see here the diagram,

00:06:43.920 --> 00:06:46.730
how we have the job of Poggio classes.

00:06:46.730 --> 00:06:49.550
So this essential just being classes Think about it that way.

00:06:49.550 --> 00:06:52.470
Then we have the made a data which will be the XML file.

00:06:52.470 --> 00:06:57.990
So then the spring container works to withstand She ate the metadata of the type of the

00:06:57.990 --> 00:06:59.050
Poggio classes.

00:06:59.050 --> 00:07:00.990
So in the previous lesson,

00:07:00.990 --> 00:07:03.020
I believe our metadata was the XML file,

00:07:03.020 --> 00:07:04.430
and it had to beans.

00:07:04.430 --> 00:07:06.750
It was a point being,

00:07:06.750 --> 00:07:07.800
Yeah,

00:07:07.800 --> 00:07:09.610
appointed being Yeah,

00:07:09.610 --> 00:07:10.990
I think that's correct.

00:07:10.990 --> 00:07:11.790
I hope that's correct.

00:07:11.790 --> 00:07:13.150
And then the Poggio class,

00:07:13.150 --> 00:07:13.920
it would be the pope,

00:07:13.920 --> 00:07:15.330
the point class,

00:07:15.330 --> 00:07:16.110
and so on result,

00:07:16.110 --> 00:07:19.970
it would create a new point B point object in Java,

00:07:19.970 --> 00:07:24.170
and then it would pass that to the actual application that we re wrote.

00:07:24.170 --> 00:07:25.060
All right,

00:07:25.060 --> 00:07:25.850
let's finish reading.

00:07:25.850 --> 00:07:27.830
Ah,

00:07:27.830 --> 00:07:33.280
the spring IOC container makes use of job a Poggio classes and configuration metadata to

00:07:33.280 --> 00:07:38.050
produce a fully configured and execute herbal system or application.

00:07:38.050 --> 00:07:39.210
There we go.

00:07:39.210 --> 00:07:39.730
So essentially,

00:07:39.730 --> 00:07:41.230
how how that works.

00:07:41.230 --> 00:07:42.200
All right,

00:07:42.200 --> 00:07:44.690
so I'll take a look at the final flight.

00:07:44.690 --> 00:07:45.650
I believe that we have.

00:07:45.650 --> 00:07:49.070
So here we have an example of an IOC container.

00:07:49.070 --> 00:07:50.590
Um,

00:07:50.590 --> 00:07:52.850
so it's sexually the code right here.

00:07:52.850 --> 00:07:53.650
You will see this,

00:07:53.650 --> 00:07:53.890
actually,

00:07:53.890 --> 00:07:55.900
a code that we worked on in the previous lesson.

00:07:55.900 --> 00:07:58.390
So this is actually I would have just screenshot it.

00:07:58.390 --> 00:07:58.910
Um,

00:07:58.910 --> 00:07:59.700
just to use this.

00:07:59.700 --> 00:08:01.080
So it's what we actually used.

00:08:01.080 --> 00:08:06.700
So spring provides the following two distinct type of country types of containers Spring

00:08:06.700 --> 00:08:10.550
bean factory container and spring application context container.

00:08:10.550 --> 00:08:13.450
Take a look at exactly what they do.

00:08:13.450 --> 00:08:17.870
So the application context container includes all functionality of the being factory

00:08:17.870 --> 00:08:18.500
container.

00:08:18.500 --> 00:08:21.400
So it is generally recommended over being factory.

00:08:21.400 --> 00:08:26.850
Being factory can still be used for lightweight applications like mobile devices or apple

00:08:26.850 --> 00:08:31.090
it based applications where data volume and speed is significant.

00:08:31.090 --> 00:08:32.030
So,

00:08:32.030 --> 00:08:32.270
yes,

00:08:32.270 --> 00:08:32.710
essentially,

00:08:32.710 --> 00:08:36.710
all we mean by this is that there are two basic types of containers.

00:08:36.710 --> 00:08:39.560
So that being factory container application context container,

00:08:39.560 --> 00:08:41.500
they do the same exact thing.

00:08:41.500 --> 00:08:42.600
So they just read,

00:08:42.600 --> 00:08:43.580
Ah,

00:08:43.580 --> 00:08:44.760
take metadata.

00:08:44.760 --> 00:08:46.110
So metadata.

00:08:46.110 --> 00:08:49.300
And then they converted into the Poggio classes,

00:08:49.300 --> 00:08:52.050
and each of them is a different spring container.

00:08:52.050 --> 00:08:56.770
So spring bean factory container and application context container just two different types

00:08:56.770 --> 00:08:58.350
of containers that do exactly the same thing.

00:08:58.350 --> 00:08:59.870
All right.

00:08:59.870 --> 00:09:04.230
And so we have actually already created an example application using the spring application

00:09:04.230 --> 00:09:07.970
context container as shown on the right.

00:09:07.970 --> 00:09:08.380
Um,

00:09:08.380 --> 00:09:10.260
I did not get that confused.

00:09:10.260 --> 00:09:16.810
I actually had this code to the left of the screen shot at first,

00:09:16.810 --> 00:09:17.870
but then it doesn't really fit.

00:09:17.870 --> 00:09:19.310
So I had to move it to the right.

00:09:19.310 --> 00:09:20.140
Um,

00:09:20.140 --> 00:09:23.050
and I forgot to change as shown on the right.

00:09:23.050 --> 00:09:25.330
So I didn't get that confused.

00:09:25.330 --> 00:09:26.210
It's actually supposed to be left.

00:09:26.210 --> 00:09:27.160
Let me change that right now.

00:09:27.160 --> 00:09:27.740
There we go.

00:09:27.740 --> 00:09:28.090
OK,

00:09:28.090 --> 00:09:29.780
so as you can see here,

00:09:29.780 --> 00:09:32.450
I have my application context container.

00:09:32.450 --> 00:09:32.650
Now,

00:09:32.650 --> 00:09:34.870
application context is actually just an interface,

00:09:34.870 --> 00:09:36.370
so we can't in Stan.

00:09:36.370 --> 00:09:36.690
She ate it.

00:09:36.690 --> 00:09:37.040
We have to.

00:09:37.040 --> 00:09:37.410
In Stan,

00:09:37.410 --> 00:09:41.570
she ate one of the built in classes that spring provides.

00:09:41.570 --> 00:09:42.310
And in this case,

00:09:42.310 --> 00:09:45.700
we used class path XML application context container.

00:09:45.700 --> 00:09:46.760
So I mean,

00:09:46.760 --> 00:09:48.470
the class name is just application contacts,

00:09:48.470 --> 00:09:50.400
but then is actually a container,

00:09:50.400 --> 00:09:53.160
and then we just put in the since it is so specific.

00:09:53.160 --> 00:09:56.590
So it gets the XML file from the class path,

00:09:56.590 --> 00:09:59.550
and then it's going to get an XML file and not something different.

00:09:59.550 --> 00:10:06.010
And so we just input beings dot xml a string of the name of our file and then that will

00:10:06.010 --> 00:10:08.020
actually be read at our,

00:10:08.020 --> 00:10:08.950
um,

00:10:08.950 --> 00:10:14.340
and our classes that we need will actually be created and are made of data.

00:10:14.340 --> 00:10:18.030
Metadata will be converted into the final result,

00:10:18.030 --> 00:10:22.450
the right into the application that classes that we sort of eat the objects.

00:10:22.450 --> 00:10:24.410
All right.

00:10:24.410 --> 00:10:24.940
And there we go.

00:10:24.940 --> 00:10:29.950
So that is essentially an high level overview of exactly what spring does again.

00:10:29.950 --> 00:10:30.570
At this point,

00:10:30.570 --> 00:10:36.400
I don't expect you to understand a whole lot of this stuff there a lot of sort of gaps here

00:10:36.400 --> 00:10:39.360
because there are really only so much they can cover in one lesson.

00:10:39.360 --> 00:10:44.430
So as we're going to be going over specific code examples,

00:10:44.430 --> 00:10:46.750
we're gonna be creating applications you're gonna think,

00:10:46.750 --> 00:10:47.710
Oh,

00:10:47.710 --> 00:10:48.780
would you look at that?

00:10:48.780 --> 00:10:49.000
So,

00:10:49.000 --> 00:10:49.520
you know,

00:10:49.520 --> 00:10:52.470
we're gonna be if we may be creating a website,

00:10:52.470 --> 00:10:53.540
and then we're gonna get an error,

00:10:53.540 --> 00:10:53.950
you know?

00:10:53.950 --> 00:10:54.350
Maybe,

00:10:54.350 --> 00:10:55.050
um,

00:10:55.050 --> 00:10:56.250
application,

00:10:56.250 --> 00:10:56.760
context,

00:10:56.760 --> 00:10:57.370
exception.

00:10:57.370 --> 00:10:58.190
And you're gonna think,

00:10:58.190 --> 00:10:58.550
Oh,

00:10:58.550 --> 00:11:00.220
so that's an application contact you.

00:11:00.220 --> 00:11:00.560
Look at that.

00:11:00.560 --> 00:11:01.280
So spring,

00:11:01.280 --> 00:11:03.300
even we were making a spring website.

00:11:03.300 --> 00:11:06.610
It's actually using application context or the court.

00:11:06.610 --> 00:11:08.280
It's using its using core spring.

00:11:08.280 --> 00:11:12.820
So and then you're gonna you're gonna start to understand exactly what that does and

00:11:12.820 --> 00:11:15.140
understand the spring framework as a whole.

00:11:15.140 --> 00:11:15.820
Yeah,

00:11:15.820 --> 00:11:21.300
but there's been a high level overview that you can then take with you to he further

00:11:21.300 --> 00:11:22.460
lessons.

00:11:22.460 --> 00:11:23.900
Okay,

00:11:23.900 --> 00:11:24.770
so for homework,

00:11:24.770 --> 00:11:25.640
your job just Ah,

00:11:25.640 --> 00:11:27.860
just read through this power point.

00:11:27.860 --> 00:11:29.510
Try to understand something,

00:11:29.510 --> 00:11:30.830
maybe,

00:11:30.830 --> 00:11:31.820
and really what?

00:11:31.820 --> 00:11:35.450
You should really try to do is understand where,

00:11:35.450 --> 00:11:39.070
and we're talking about an hour in this power point.

00:11:39.070 --> 00:11:41.410
So we're talking about IOC containers,

00:11:41.410 --> 00:11:42.060
for example,

00:11:42.060 --> 00:11:46.450
where it actually was in our application that we made previously.

00:11:46.450 --> 00:11:49.110
So really trying to understand what that was.

00:11:49.110 --> 00:11:52.930
And if you can link the power point to what we did in the previous lesson,

00:11:52.930 --> 00:11:54.870
then you can really get this end.

00:11:54.870 --> 00:11:55.240
That's no,

00:11:55.240 --> 00:11:56.070
but they will be very good.

00:11:56.070 --> 00:11:57.750
But if you aren't able to do that,

00:11:57.750 --> 00:11:59.040
really don't worry about it.

00:11:59.040 --> 00:11:59.400
Um,

00:11:59.400 --> 00:12:03.870
it will come naturally as you will be creating applications in the future lessons.

00:12:03.870 --> 00:12:05.750
All right,

00:12:05.750 --> 00:12:06.330
so anyway,

00:12:06.330 --> 00:12:06.830
um,

00:12:06.830 --> 00:12:08.720
thank you very much for turning it into this lesson.

00:12:08.720 --> 00:12:10.550
I will see you next time until soon.

