WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.850
Hello there.

00:00:00.850 --> 00:00:03.680
And welcome back to this sprain development course.

00:00:03.680 --> 00:00:10.390
So last time we went over collections and Germany be going over auto wiring beans in XML.

00:00:10.390 --> 00:00:16.710
Now we have two more lessons that we're gonna go over before we move on to spring M v c.

00:00:16.710 --> 00:00:18.160
We have our wiring,

00:00:18.160 --> 00:00:18.730
and then also,

00:00:18.730 --> 00:00:21.050
we're gonna go over being scopes as well.

00:00:21.050 --> 00:00:28.620
So the reason that I actually put to spring core into this course It's not often that

00:00:28.620 --> 00:00:30.120
people actually learn spring core.

00:00:30.120 --> 00:00:34.240
Usually they just start off with with spring NBC And I mean,

00:00:34.240 --> 00:00:35.430
you can do that.

00:00:35.430 --> 00:00:40.150
But when you're gonna be creating a bean or when you get a,

00:00:40.150 --> 00:00:40.580
uh,

00:00:40.580 --> 00:00:45.150
being creation exception and you have no idea what exactly all that means,

00:00:45.150 --> 00:00:51.540
it's if you're gonna wish you have learned spring core and you'd wish you understand

00:00:51.540 --> 00:00:52.530
exactly what's going on there.

00:00:52.530 --> 00:00:52.850
So,

00:00:52.850 --> 00:00:53.540
um,

00:00:53.540 --> 00:00:55.760
spring NBC is built on spring court,

00:00:55.760 --> 00:00:58.450
and if you can understand what spring core does,

00:00:58.450 --> 00:01:01.030
then you could understand what spring NBC does.

00:01:01.030 --> 00:01:04.050
That's making you that much of a better developer.

00:01:04.050 --> 00:01:05.520
So anyway,

00:01:05.520 --> 00:01:06.650
let's get into this a lesson.

00:01:06.650 --> 00:01:11.010
So we're gonna be going or over Arte wiring in XML And actually when?

00:01:11.010 --> 00:01:11.960
Ah,

00:01:11.960 --> 00:01:16.980
pretty important part of spring NBC in general is the auto wiring idea.

00:01:16.980 --> 00:01:21.040
So essentially we're not gonna be auto wiring XML so much.

00:01:21.040 --> 00:01:24.050
We're gonna just be our wiring annotations.

00:01:24.050 --> 00:01:28.280
But if pretty much it's pretty similar as to what exactly it's doing.

00:01:28.280 --> 00:01:30.310
So let's go ahead and actually,

00:01:30.310 --> 00:01:30.850
um,

00:01:30.850 --> 00:01:33.630
get into the lesson.

00:01:33.630 --> 00:01:34.540
So take a look.

00:01:34.540 --> 00:01:35.240
So auto wiring.

00:01:35.240 --> 00:01:36.800
So in spring framework,

00:01:36.800 --> 00:01:43.370
you can wire beans automatically with auto wiring feature or the art a water feature to

00:01:43.370 --> 00:01:48.740
enable it just defined the auto wire attributes in being So here we have a bead.

00:01:48.740 --> 00:01:50.760
I g equals customer.

00:01:50.760 --> 00:01:55.590
Right then just some class and then we have audio wire by name.

00:01:55.590 --> 00:01:58.380
So there's a couple of different options for auto wiring.

00:01:58.380 --> 00:01:59.800
There's by name by type,

00:01:59.800 --> 00:02:00.870
automatic and so on.

00:02:00.870 --> 00:02:03.860
We're gonna be taking a look at all of them in this lesson.

00:02:03.860 --> 00:02:05.330
But this is just an example.

00:02:05.330 --> 00:02:09.650
So we have the auto wire equals and then some Arte wiring option.

00:02:09.650 --> 00:02:10.580
So in spring,

00:02:10.580 --> 00:02:12.620
five are the wiring modes are supported?

00:02:12.620 --> 00:02:13.040
No.

00:02:13.040 --> 00:02:14.010
So this is it right here,

00:02:14.010 --> 00:02:14.740
so by name,

00:02:14.740 --> 00:02:16.050
these are the five months,

00:02:16.050 --> 00:02:18.400
so we have no which is default,

00:02:18.400 --> 00:02:19.750
which means no auto wiring.

00:02:19.750 --> 00:02:20.610
Um,

00:02:20.610 --> 00:02:23.080
we can set it manually via ref attributes.

00:02:23.080 --> 00:02:28.910
What this means is that if we have a bean ID equals customer without the are the wire tiger

00:02:28.910 --> 00:02:29.430
at all.

00:02:29.430 --> 00:02:32.450
It's automatically set to know which means that there's no auto wiring.

00:02:32.450 --> 00:02:34.020
Okay,

00:02:34.020 --> 00:02:35.010
then we have by name.

00:02:35.010 --> 00:02:37.200
So are the wiring by property names.

00:02:37.200 --> 00:02:41.660
So if the name of a bean is same as the name of other being property on a wire it so just

00:02:41.660 --> 00:02:42.210
like well,

00:02:42.210 --> 00:02:45.910
it will take a look at this in a second exactly in more detail on how it works and examples

00:02:45.910 --> 00:02:47.430
that we have by type.

00:02:47.430 --> 00:02:50.480
So auto wiring by property data type.

00:02:50.480 --> 00:02:55.570
If data type of a being is compatible with the data type of other being property are a wire

00:02:55.570 --> 00:02:58.250
it then we have our wearing by constructor,

00:02:58.250 --> 00:03:00.730
so by tight mode in constructor argument,

00:03:00.730 --> 00:03:04.690
and then we have auto detect if any false constructors found used underwear,

00:03:04.690 --> 00:03:07.950
but constructor otherwise use art a wire by type.

00:03:07.950 --> 00:03:09.860
All right,

00:03:09.860 --> 00:03:13.290
so let's go and actually take a look at an example of exactly how this works.

00:03:13.290 --> 00:03:18.310
So we're going to be using a being class customer with a private person person and then we

00:03:18.310 --> 00:03:19.460
have Ah,

00:03:19.460 --> 00:03:20.830
we have a constructor.

00:03:20.830 --> 00:03:21.910
So public customer,

00:03:21.910 --> 00:03:22.230
person,

00:03:22.230 --> 00:03:22.580
person,

00:03:22.580 --> 00:03:24.460
this person equals person Pretty simple.

00:03:24.460 --> 00:03:28.090
And then we'll have a set person class and then they get person Cuesta's well,

00:03:28.090 --> 00:03:30.250
and then we have a public class person with also some,

00:03:30.250 --> 00:03:30.730
you know,

00:03:30.730 --> 00:03:31.680
just some code in there.

00:03:31.680 --> 00:03:32.250
All right,

00:03:32.250 --> 00:03:35.530
so let's take a look at the first Arte wiring.

00:03:35.530 --> 00:03:37.210
So are the wiring equals No.

00:03:37.210 --> 00:03:38.850
So this is the default mode.

00:03:38.850 --> 00:03:42.450
You need to wire your being via ref attribute,

00:03:42.450 --> 00:03:44.860
so you'll see here.

00:03:44.860 --> 00:03:45.970
Since we have been idea goes,

00:03:45.970 --> 00:03:47.200
customer class equals,

00:03:47.200 --> 00:03:47.830
You know something?

00:03:47.830 --> 00:03:50.620
We don't have an auto wire tag here.

00:03:50.620 --> 00:03:55.300
And so that means that spring won't use the auto wiring.

00:03:55.300 --> 00:03:58.000
Spring won't use auto wiring.

00:03:58.000 --> 00:04:03.610
So here is even though I have a person in customer class,

00:04:03.610 --> 00:04:04.750
so by name person,

00:04:04.750 --> 00:04:06.370
it doesn't actually are a wire,

00:04:06.370 --> 00:04:06.820
anything.

00:04:06.820 --> 00:04:08.930
So it's result we have to specify it.

00:04:08.930 --> 00:04:09.470
Specifically,

00:04:09.470 --> 00:04:12.650
property name equals person ref equals person.

00:04:12.650 --> 00:04:14.250
All right,

00:04:14.250 --> 00:04:14.670
um,

00:04:14.670 --> 00:04:17.630
now let's take a look at another auto wearing type by name,

00:04:17.630 --> 00:04:17.960
right?

00:04:17.960 --> 00:04:20.640
So are y Rabin by property name.

00:04:20.640 --> 00:04:21.540
In this case,

00:04:21.540 --> 00:04:29.210
since the name of a person being is same with the name of the customer beans Property

00:04:29.210 --> 00:04:33.960
person Spring will on a wire via center method set,

00:04:33.960 --> 00:04:34.320
person,

00:04:34.320 --> 00:04:34.680
person,

00:04:34.680 --> 00:04:35.170
person.

00:04:35.170 --> 00:04:37.770
So here we have on a wire by name.

00:04:37.770 --> 00:04:41.840
And since being we have a being I d equals person,

00:04:41.840 --> 00:04:42.250
right?

00:04:42.250 --> 00:04:44.650
And inside our customer class,

00:04:44.650 --> 00:04:45.580
if you go back,

00:04:45.580 --> 00:04:47.670
we have a private person person,

00:04:47.670 --> 00:04:49.290
right with the name person.

00:04:49.290 --> 00:04:50.220
And so,

00:04:50.220 --> 00:04:50.850
in result,

00:04:50.850 --> 00:04:52.840
it will see that this beans ideas,

00:04:52.840 --> 00:04:56.280
person and this attributes ideas person.

00:04:56.280 --> 00:04:58.800
And so it'll put two and two together,

00:04:58.800 --> 00:05:05.300
and it'll a sign this being ID equals person to customers.

00:05:05.300 --> 00:05:07.050
Property person,

00:05:07.050 --> 00:05:08.130
you,

00:05:08.130 --> 00:05:08.510
Denise,

00:05:08.510 --> 00:05:09.250
that person method.

00:05:09.250 --> 00:05:10.810
All right,

00:05:10.810 --> 00:05:12.210
so it's gonna actually run this in our code,

00:05:12.210 --> 00:05:13.030
and let's see how that works.

00:05:13.030 --> 00:05:13.490
Exactly.

00:05:13.490 --> 00:05:14.510
All right,

00:05:14.510 --> 00:05:16.020
so here we honor code,

00:05:16.020 --> 00:05:21.330
and we have our animal class just to a pork refresher animal species name,

00:05:21.330 --> 00:05:21.970
color.

00:05:21.970 --> 00:05:26.550
And I am so another another on animal class insider animal.

00:05:26.550 --> 00:05:27.250
Then we have a map.

00:05:27.250 --> 00:05:28.140
Interesting names,

00:05:28.140 --> 00:05:31.300
but it's an important we're gonna be focusing on this Colorado tribute here.

00:05:31.300 --> 00:05:34.190
So we're gonna be trying to set this color attribute.

00:05:34.190 --> 00:05:35.000
All right,

00:05:35.000 --> 00:05:36.240
so in our application start class,

00:05:36.240 --> 00:05:37.010
we're gonna have ah,

00:05:37.010 --> 00:05:37.710
zebra one.

00:05:37.710 --> 00:05:41.930
And then we're gonna get color dot Get color name now in our beans,

00:05:41.930 --> 00:05:43.010
that xml file.

00:05:43.010 --> 00:05:45.700
Uh,

00:05:45.700 --> 00:05:46.150
that said,

00:05:46.150 --> 00:05:47.510
there we go.

00:05:47.510 --> 00:05:47.960
All right,

00:05:47.960 --> 00:05:53.560
so you're being an XML file we're gonna go to do is create a new being I d equals.

00:05:53.560 --> 00:05:53.890
Um,

00:05:53.890 --> 00:05:54.120
actually,

00:05:54.120 --> 00:05:54.850
Zebra one.

00:05:54.850 --> 00:05:55.450
Okay.

00:05:55.450 --> 00:05:58.980
Being ID equals zebra one class equals,

00:05:58.980 --> 00:05:59.210
we'll see.

00:05:59.210 --> 00:05:59.410
What?

00:05:59.410 --> 00:05:59.700
What is it?

00:05:59.700 --> 00:06:00.560
What is our class?

00:06:00.560 --> 00:06:01.860
Um,

00:06:01.860 --> 00:06:04.940
there we go.

00:06:04.940 --> 00:06:08.570
Class equals com.

00:06:08.570 --> 00:06:10.010
Example.

00:06:10.010 --> 00:06:11.150
P k g.

00:06:11.150 --> 00:06:12.460
Animal.

00:06:12.460 --> 00:06:13.090
There we go.

00:06:13.090 --> 00:06:14.860
All right.

00:06:14.860 --> 00:06:18.070
And as close off are being Ah,

00:06:18.070 --> 00:06:18.350
yeah,

00:06:18.350 --> 00:06:18.860
you know?

00:06:18.860 --> 00:06:19.650
Yeah.

00:06:19.650 --> 00:06:20.150
There we go.

00:06:20.150 --> 00:06:21.100
All right.

00:06:21.100 --> 00:06:23.000
And now we're gonna have a,

00:06:23.000 --> 00:06:23.550
um,

00:06:23.550 --> 00:06:32.650
being I d equals color class equals com.

00:06:32.650 --> 00:06:35.920
Example P k.

00:06:35.920 --> 00:06:36.350
G.

00:06:36.350 --> 00:06:37.750
Code.

00:06:37.750 --> 00:06:39.550
All right,

00:06:39.550 --> 00:06:40.950
There we go.

00:06:40.950 --> 00:06:42.420
Okay,

00:06:42.420 --> 00:06:42.680
Now,

00:06:42.680 --> 00:06:44.450
let's assign a property.

00:06:44.450 --> 00:06:55.530
Property name equals Ah,

00:06:55.530 --> 00:06:56.490
call her name.

00:06:56.490 --> 00:07:07.550
Value value equals black and white.

00:07:07.550 --> 00:07:08.720
All right,

00:07:08.720 --> 00:07:09.200
there we go.

00:07:09.200 --> 00:07:10.200
So now we have a color.

00:07:10.200 --> 00:07:13.010
I was gonna actually a sign color ideas.

00:07:13.010 --> 00:07:13.280
Well,

00:07:13.280 --> 00:07:15.570
just four.

00:07:15.570 --> 00:07:16.890
To complete it.

00:07:16.890 --> 00:07:20.480
Color I d and values gonna be too.

00:07:20.480 --> 00:07:21.660
All right,

00:07:21.660 --> 00:07:21.990
There we go.

00:07:21.990 --> 00:07:22.790
All right,

00:07:22.790 --> 00:07:23.940
So now let's run our application.

00:07:23.940 --> 00:07:24.530
Start class.

00:07:24.530 --> 00:07:26.700
We're gonna get being zebra one.

00:07:26.700 --> 00:07:27.240
Okay,

00:07:27.240 --> 00:07:29.230
We're gonna get the being zebra one,

00:07:29.230 --> 00:07:30.850
and it shouldn't have any colors.

00:07:30.850 --> 00:07:31.610
Then we're gonna print that.

00:07:31.610 --> 00:07:32.260
Get color,

00:07:32.260 --> 00:07:32.680
get color,

00:07:32.680 --> 00:07:32.860
Nate.

00:07:32.860 --> 00:07:37.570
So we should get is a no pointer exception since our zebra doesn't have any color.

00:07:37.570 --> 00:07:39.380
And since we're calling,

00:07:39.380 --> 00:07:40.470
get color name on.

00:07:40.470 --> 00:07:40.880
No,

00:07:40.880 --> 00:07:42.600
that'll throw a no point exception.

00:07:42.600 --> 00:07:43.360
So let's run this.

00:07:43.360 --> 00:07:46.550
And was I correct?

00:07:46.550 --> 00:07:47.820
Of course I was,

00:07:47.820 --> 00:07:51.010
um are actually no,

00:07:51.010 --> 00:07:58.440
I was not all right to eat.

00:07:58.440 --> 00:07:58.920
No default,

00:07:58.920 --> 00:07:59.520
constructor.

00:07:59.520 --> 00:07:59.940
I got it.

00:07:59.940 --> 00:08:00.350
I got it.

00:08:00.350 --> 00:08:01.170
Okay,

00:08:01.170 --> 00:08:03.670
that's that's created default construction for color.

00:08:03.670 --> 00:08:04.180
Really quickly.

00:08:04.180 --> 00:08:06.050
Um,

00:08:06.050 --> 00:08:08.050
public color.

00:08:08.050 --> 00:08:09.450
There we go.

00:08:09.450 --> 00:08:10.230
All right,

00:08:10.230 --> 00:08:13.860
Now it's running se earth.

00:08:13.860 --> 00:08:16.220
You all right?

00:08:16.220 --> 00:08:16.650
And there we go.

00:08:16.650 --> 00:08:18.200
So doubling no pointer exception.

00:08:18.200 --> 00:08:19.240
So we're trying to call,

00:08:19.240 --> 00:08:21.630
get color name on No,

00:08:21.630 --> 00:08:22.970
on zebra target color,

00:08:22.970 --> 00:08:23.430
which returns?

00:08:23.430 --> 00:08:23.860
No.

00:08:23.860 --> 00:08:26.240
And so we actually get the no pointer exception.

00:08:26.240 --> 00:08:27.430
So now in orbit,

00:08:27.430 --> 00:08:32.900
XML file its ad auto wire equals by name,

00:08:32.900 --> 00:08:35.200
and let's see what happens now.

00:08:35.200 --> 00:08:36.320
All right,

00:08:36.320 --> 00:08:41.690
So what should happen is spring will see that we have our wire by name here,

00:08:41.690 --> 00:08:47.120
and we have a private color color inside our animal class,

00:08:47.120 --> 00:08:50.920
and then it will see that we have a being I d equals color here,

00:08:50.920 --> 00:08:54.910
and it will put two and two together has already said,

00:08:54.910 --> 00:08:55.930
And then ah,

00:08:55.930 --> 00:08:57.370
sign this.

00:08:57.370 --> 00:09:01.670
Being ID equals color to this animal color attributes.

00:09:01.670 --> 00:09:02.800
So it's going actually run this,

00:09:02.800 --> 00:09:03.860
Uh,

00:09:03.860 --> 00:09:04.170
whoops.

00:09:04.170 --> 00:09:04.360
No,

00:09:04.360 --> 00:09:05.950
I don't want the palm that XML file.

00:09:05.950 --> 00:09:06.500
Nope.

00:09:06.500 --> 00:09:06.730
No,

00:09:06.730 --> 00:09:07.210
There we go.

00:09:07.210 --> 00:09:08.860
Let's run this and see what we get.

00:09:08.860 --> 00:09:11.270
There we go.

00:09:11.270 --> 00:09:12.950
We get black and white as expected.

00:09:12.950 --> 00:09:14.780
All right,

00:09:14.780 --> 00:09:16.810
so that's just Arte wearing by name.

00:09:16.810 --> 00:09:19.560
Now think a look at another Arte wiring option.

00:09:19.560 --> 00:09:20.780
All right,

00:09:20.780 --> 00:09:27.350
So auto wearing bite type is also a something that exists.

00:09:27.350 --> 00:09:28.190
So,

00:09:28.190 --> 00:09:31.050
Ottaway Rabin by property data type In this case,

00:09:31.050 --> 00:09:36.830
since the data type of person being is the same as a data type of the customer beans,

00:09:36.830 --> 00:09:37.520
property,

00:09:37.520 --> 00:09:38.190
person,

00:09:38.190 --> 00:09:38.750
object,

00:09:38.750 --> 00:09:42.990
spring will auto wire it via setter method.

00:09:42.990 --> 00:09:43.850
So set person,

00:09:43.850 --> 00:09:44.160
person,

00:09:44.160 --> 00:09:44.470
person.

00:09:44.470 --> 00:09:50.650
So he really baby an ID equals customer class equals some class at on a wire equals by type

00:09:50.650 --> 00:09:50.650
.

00:09:50.650 --> 00:09:55.660
Then here we have a bean ID equals person in the class will be a person class.

00:09:55.660 --> 00:09:57.680
So since the class,

00:09:57.680 --> 00:10:01.550
since the data type is person and other wire equals my type.

00:10:01.550 --> 00:10:02.460
It will take a look.

00:10:02.460 --> 00:10:04.500
And it will look for a,

00:10:04.500 --> 00:10:08.480
um hurt for a being with a person data type.

00:10:08.480 --> 00:10:09.120
So of class,

00:10:09.120 --> 00:10:09.700
person,

00:10:09.700 --> 00:10:14.870
and then assign that to our person inside our customer class.

00:10:14.870 --> 00:10:19.350
So what's going to take a look at how this works in the coat as well?

00:10:19.350 --> 00:10:21.020
All right,

00:10:21.020 --> 00:10:23.770
so let's rename this being I d won't be color.

00:10:23.770 --> 00:10:25.250
It would be black.

00:10:25.250 --> 00:10:27.420
And what?

00:10:27.420 --> 00:10:27.870
Okay,

00:10:27.870 --> 00:10:29.290
that there be an i d.

00:10:29.290 --> 00:10:31.300
And so now if we run this,

00:10:31.300 --> 00:10:35.260
you'll see we get no pointer Exception.

00:10:35.260 --> 00:10:35.740
Okay,

00:10:35.740 --> 00:10:39.060
since it can't find it doesn't have a color class.

00:10:39.060 --> 00:10:45.940
But if we change the auto wire to buy type But in this case,

00:10:45.940 --> 00:10:50.570
we'll get black and white as expected,

00:10:50.570 --> 00:10:52.080
so spring.

00:10:52.080 --> 00:10:56.450
Since it sees the auto wire equals by type tag,

00:10:56.450 --> 00:11:04.050
it will automatically understand that we are looking for a bean with type um,

00:11:04.050 --> 00:11:06.950
a being with type color.

00:11:06.950 --> 00:11:09.870
And so here finds a being with type color with the I.

00:11:09.870 --> 00:11:10.040
D.

00:11:10.040 --> 00:11:14.170
Black and white and assigns it to our color class.

00:11:14.170 --> 00:11:15.430
All right,

00:11:15.430 --> 00:11:16.050
now,

00:11:16.050 --> 00:11:17.520
if we actually add another i d.

00:11:17.520 --> 00:11:19.910
So being being,

00:11:19.910 --> 00:11:21.880
I d equals blue.

00:11:21.880 --> 00:11:25.080
And then same thing with a class.

00:11:25.080 --> 00:11:28.480
There's much copy is being just to save time.

00:11:28.480 --> 00:11:29.220
All right,

00:11:29.220 --> 00:11:31.260
this is gonna be called blue.

00:11:31.260 --> 00:11:31.900
Okay,

00:11:31.900 --> 00:11:34.390
class calm package example color.

00:11:34.390 --> 00:11:35.840
And this is gonna be blue.

00:11:35.840 --> 00:11:37.150
And this is gonna be three.

00:11:37.150 --> 00:11:37.550
All right,

00:11:37.550 --> 00:11:38.750
So what happens now?

00:11:38.750 --> 00:11:45.110
So you'll see we actually get an air.

00:11:45.110 --> 00:11:46.400
So air creating,

00:11:46.400 --> 00:11:46.970
being with names,

00:11:46.970 --> 00:11:48.110
uber one defining class,

00:11:48.110 --> 00:11:48.910
bath resource,

00:11:48.910 --> 00:11:52.060
unsatisfied dependency express to property.

00:11:52.060 --> 00:11:53.700
Lamex to make bigger secrecy.

00:11:53.700 --> 00:11:54.540
Um,

00:11:54.540 --> 00:11:58.900
so no unique being definitions or no qualifying being of type com exactly.

00:11:58.900 --> 00:12:00.110
Package color available.

00:12:00.110 --> 00:12:04.080
Expected single mashing being profound to black and white and blue.

00:12:04.080 --> 00:12:10.440
So that means is that since we have to beans here package of type color in this case,

00:12:10.440 --> 00:12:11.350
it'll actually,

00:12:11.350 --> 00:12:11.950
um,

00:12:11.950 --> 00:12:16.220
give us an air since it doesn't know which being to use.

00:12:16.220 --> 00:12:19.740
So that's one of the downsides of Fatah wiring by type.

00:12:19.740 --> 00:12:23.840
So you can't really understand entirely as to what,

00:12:23.840 --> 00:12:30.510
um as to what bean you referring to specifically.

00:12:30.510 --> 00:12:35.250
So you have to have one being of the type in order for by type toe work.

00:12:35.250 --> 00:12:37.750
There you go.

00:12:37.750 --> 00:12:38.870
All right,

00:12:38.870 --> 00:12:43.860
So now let's go ahead and take a look at on a further other that work?

00:12:43.860 --> 00:12:43.950
No,

00:12:43.950 --> 00:12:44.880
it's not another,

00:12:44.880 --> 00:12:46.750
um are the wiring option?

00:12:46.750 --> 00:12:47.780
Okay,

00:12:47.780 --> 00:12:52.260
So are wearing by constructor is essentially it works similarly.

00:12:52.260 --> 00:12:55.410
So Ottaway Rabin by property data type in construct argument.

00:12:55.410 --> 00:12:56.650
In this case,

00:12:56.650 --> 00:13:02.330
since the data type of person being is the same as the constructor argument data type in

00:13:02.330 --> 00:13:04.170
customer beans,

00:13:04.170 --> 00:13:04.760
property,

00:13:04.760 --> 00:13:09.760
person object spring will auto wire it via constructor methods.

00:13:09.760 --> 00:13:09.910
So,

00:13:09.910 --> 00:13:11.700
public customer person,

00:13:11.700 --> 00:13:12.220
person.

00:13:12.220 --> 00:13:15.970
So it it Since we have got a wire equals constructor,

00:13:15.970 --> 00:13:18.930
it will take a look at the constructor and see that we have,

00:13:18.930 --> 00:13:19.590
um,

00:13:19.590 --> 00:13:21.780
one input for the constructor.

00:13:21.780 --> 00:13:22.850
A person person.

00:13:22.850 --> 00:13:29.470
So then it will see that since we have a being ID equals person of data type person,

00:13:29.470 --> 00:13:31.350
so it's also a data type person.

00:13:31.350 --> 00:13:32.390
It'll go ahead,

00:13:32.390 --> 00:13:35.380
understand that we need to pass that into the constructor.

00:13:35.380 --> 00:13:37.640
So let's go ahead and actually,

00:13:37.640 --> 00:13:38.390
uh,

00:13:38.390 --> 00:13:39.980
take a look at how this works in the code as well.

00:13:39.980 --> 00:13:41.640
All right,

00:13:41.640 --> 00:13:42.610
So first of all is going,

00:13:42.610 --> 00:13:43.020
actually,

00:13:43.020 --> 00:13:43.280
um,

00:13:43.280 --> 00:13:45.090
I actually think we have a constructor.

00:13:45.090 --> 00:13:46.170
Um,

00:13:46.170 --> 00:13:46.820
public color.

00:13:46.820 --> 00:13:47.040
Yes.

00:13:47.040 --> 00:13:48.990
We already have a constructor inside our,

00:13:48.990 --> 00:13:49.950
um,

00:13:49.950 --> 00:13:53.800
inside our color class and We have a different structure.

00:13:53.800 --> 00:13:55.100
A string color name and an end.

00:13:55.100 --> 00:13:55.370
Cola.

00:13:55.370 --> 00:13:55.640
Ready.

00:13:55.640 --> 00:13:58.750
So that was actually change this to or actually,

00:13:58.750 --> 00:13:58.810
No.

00:13:58.810 --> 00:13:59.870
We're gonna be a friend to the animal.

00:13:59.870 --> 00:14:00.780
What am I talking about?

00:14:00.780 --> 00:14:02.310
Animal constructor.

00:14:02.310 --> 00:14:03.400
Public animal.

00:14:03.400 --> 00:14:05.960
And then we have another string species.

00:14:05.960 --> 00:14:06.230
Name,

00:14:06.230 --> 00:14:06.490
color,

00:14:06.490 --> 00:14:06.780
color,

00:14:06.780 --> 00:14:07.070
size,

00:14:07.070 --> 00:14:07.360
size.

00:14:07.360 --> 00:14:09.000
Let's remove the size,

00:14:09.000 --> 00:14:10.820
size and color color as well.

00:14:10.820 --> 00:14:13.650
And just keep name,

00:14:13.650 --> 00:14:14.300
okay?

00:14:14.300 --> 00:14:16.040
No,

00:14:16.040 --> 00:14:16.830
I just keep color.

00:14:16.830 --> 00:14:17.300
There we go.

00:14:17.300 --> 00:14:18.190
All right,

00:14:18.190 --> 00:14:18.620
So now,

00:14:18.620 --> 00:14:20.220
inside our being that XML file,

00:14:20.220 --> 00:14:22.300
what we're gonna do is we're gonna change outta water bite.

00:14:22.300 --> 00:14:23.780
Type two auto wire,

00:14:23.780 --> 00:14:29.330
constructor con structure.

00:14:29.330 --> 00:14:29.950
There we go.

00:14:29.950 --> 00:14:31.120
And now,

00:14:31.120 --> 00:14:32.250
in our constructive here,

00:14:32.250 --> 00:14:32.900
we're going to do,

00:14:32.900 --> 00:14:33.570
um,

00:14:33.570 --> 00:14:40.630
system dot outworked snow system dot out dot print.

00:14:40.630 --> 00:14:45.750
Ellen called constructing.

00:14:45.750 --> 00:14:50.080
There we go.

00:14:50.080 --> 00:14:50.910
All right,

00:14:50.910 --> 00:14:51.820
so now let's run this.

00:14:51.820 --> 00:14:52.720
We'll see what we get.

00:14:52.720 --> 00:14:57.180
I think your you know what we'll get as expected.

00:14:57.180 --> 00:14:58.350
So we call the constructor,

00:14:58.350 --> 00:15:00.890
and then we assigned it by a black and white.

00:15:00.890 --> 00:15:01.390
Now,

00:15:01.390 --> 00:15:06.350
if we change this insider visa XML file to something like by type,

00:15:06.350 --> 00:15:13.220
you'll see that now we don't actually call the constructor.

00:15:13.220 --> 00:15:16.090
We just said it using the getter and setter methods were no.

00:15:16.090 --> 00:15:16.460
In this case,

00:15:16.460 --> 00:15:17.460
Justice Center methods.

00:15:17.460 --> 00:15:18.630
OK,

00:15:18.630 --> 00:15:21.900
but if we put it to change it to constructor,

00:15:21.900 --> 00:15:22.710
on the other hand,

00:15:22.710 --> 00:15:24.950
it will actually call the constructor.

00:15:24.950 --> 00:15:28.230
There we go,

00:15:28.230 --> 00:15:28.750
as you can see.

00:15:28.750 --> 00:15:29.950
All right,

00:15:29.950 --> 00:15:35.950
So not take a look at the final data at the final option for auto wiring in spring XML.

00:15:35.950 --> 00:15:39.500
So auto wiring auto detects.

00:15:39.500 --> 00:15:46.850
So if a default constructors found it's uses constructor otherwise uses by type.

00:15:46.850 --> 00:15:48.020
In this case,

00:15:48.020 --> 00:15:50.740
since there is a default constructor and customer class,

00:15:50.740 --> 00:15:56.580
spring auto are the wires it via constructor method public customer person persons.

00:15:56.580 --> 00:15:57.070
In this case,

00:15:57.070 --> 00:15:59.700
it will first check to make sure there's a constructor.

00:15:59.700 --> 00:16:03.330
If there is a type that fits into our constructor,

00:16:03.330 --> 00:16:04.500
if there is,

00:16:04.500 --> 00:16:05.710
it goes in and it signs it.

00:16:05.710 --> 00:16:06.690
If not,

00:16:06.690 --> 00:16:11.250
then it will check by type just data types by type.

00:16:11.250 --> 00:16:13.060
And then if there is a dead it type,

00:16:13.060 --> 00:16:13.460
I type,

00:16:13.460 --> 00:16:15.380
it will assign it via etcetera methods.

00:16:15.380 --> 00:16:16.620
All right,

00:16:16.620 --> 00:16:20.030
so I'm sure you're wondering at this point as always,

00:16:20.030 --> 00:16:23.710
we're gonna go into our coat and we're gonna go ahead and see how it works.

00:16:23.710 --> 00:16:24.350
Well,

00:16:24.350 --> 00:16:25.030
we're not gonna do that.

00:16:25.030 --> 00:16:26.390
We'll see auto detect.

00:16:26.390 --> 00:16:27.510
It was actually deprecating,

00:16:27.510 --> 00:16:27.890
which is me,

00:16:27.890 --> 00:16:28.610
that it was dropped.

00:16:28.610 --> 00:16:29.390
He was removed.

00:16:29.390 --> 00:16:31.360
Why'd I go over then?

00:16:31.360 --> 00:16:36.020
We'll Because if you're working with pre spring three So right now,

00:16:36.020 --> 00:16:38.190
I'm pretty sure where they were Spring five.

00:16:38.190 --> 00:16:40.960
Or maybe 45 or four,

00:16:40.960 --> 00:16:42.060
depending on how you look at it.

00:16:42.060 --> 00:16:43.350
Five is already released,

00:16:43.350 --> 00:16:45.300
but not really while adopted here.

00:16:45.300 --> 00:16:45.750
Anyway,

00:16:45.750 --> 00:16:46.350
um,

00:16:46.350 --> 00:16:48.350
before spring three,

00:16:48.350 --> 00:16:50.120
it was actually,

00:16:50.120 --> 00:16:50.380
you know,

00:16:50.380 --> 00:16:50.990
implemented.

00:16:50.990 --> 00:16:52.510
And if you ever see it,

00:16:52.510 --> 00:16:54.250
now you know exactly what it does.

00:16:54.250 --> 00:16:56.470
But if we try to do it right now in our code,

00:16:56.470 --> 00:16:58.920
we actually get an air here.

00:16:58.920 --> 00:16:59.530
So you'll see.

00:16:59.530 --> 00:17:05.550
So sec attributes either via our auto detect or attribute hardwire on element being is not

00:17:05.550 --> 00:17:08.280
valid with respect to its type.

00:17:08.280 --> 00:17:08.660
No.

00:17:08.660 --> 00:17:11.050
So auto detect doesn't exist anymore.

00:17:11.050 --> 00:17:13.260
So we have to do by name or something like something like that.

00:17:13.260 --> 00:17:15.130
And then there is no error if we do it.

00:17:15.130 --> 00:17:15.490
My name?

00:17:15.490 --> 00:17:15.870
Yeah,

00:17:15.870 --> 00:17:17.890
auto detect was deprecating,

00:17:17.890 --> 00:17:19.280
so it's not in any more.

00:17:19.280 --> 00:17:20.780
You can't use it in spring anymore.

00:17:20.780 --> 00:17:23.890
But if you ever do see it in an older system,

00:17:23.890 --> 00:17:24.760
then yeah,

00:17:24.760 --> 00:17:25.450
that's what it does.

00:17:25.450 --> 00:17:27.170
All right.

00:17:27.170 --> 00:17:28.680
So that essentially auto wiring.

00:17:28.680 --> 00:17:28.940
Now,

00:17:28.940 --> 00:17:30.660
let's take a look at some homework.

00:17:30.660 --> 00:17:31.490
All right?

00:17:31.490 --> 00:17:33.650
So for one worker job is to create three beans,

00:17:33.650 --> 00:17:34.240
auto wire,

00:17:34.240 --> 00:17:35.240
one by type,

00:17:35.240 --> 00:17:36.110
one by name,

00:17:36.110 --> 00:17:38.190
one of my instructors even going to make them animal.

00:17:38.190 --> 00:17:38.770
Just make,

00:17:38.770 --> 00:17:38.930
like,

00:17:38.930 --> 00:17:39.830
zebra hippo.

00:17:39.830 --> 00:17:40.180
And,

00:17:40.180 --> 00:17:40.420
I don't know,

00:17:40.420 --> 00:17:42.850
maybe a lion and auto wire them.

00:17:42.850 --> 00:17:43.190
They're,

00:17:43.190 --> 00:17:43.420
you know,

00:17:43.420 --> 00:17:45.990
size and weight and or no way.

00:17:45.990 --> 00:17:50.200
I mean size and color for just for example And in order wire one by name,

00:17:50.200 --> 00:17:51.190
one by type,

00:17:51.190 --> 00:17:52.310
and then one by constructing.

00:17:52.310 --> 00:17:53.510
So yeah,

00:17:53.510 --> 00:17:57.290
so you don't necessarily have to create different,

00:17:57.290 --> 00:17:57.630
you know,

00:17:57.630 --> 00:18:01.110
size and color beans for every single.

00:18:01.110 --> 00:18:05.220
Be for every single animal being that you create.

00:18:05.220 --> 00:18:13.140
You have to go ahead and just create a You just go ahead and create different hoping to

00:18:13.140 --> 00:18:13.470
this,

00:18:13.470 --> 00:18:14.430
Um,

00:18:14.430 --> 00:18:15.510
this is the same exact means.

00:18:15.510 --> 00:18:17.470
So just use the same side and same,

00:18:17.470 --> 00:18:18.450
um,

00:18:18.450 --> 00:18:26.020
same side and say because same color being except just for animal means used one by name

00:18:26.020 --> 00:18:27.260
are aware one by name,

00:18:27.260 --> 00:18:28.790
the other by type,

00:18:28.790 --> 00:18:29.170
and any other.

00:18:29.170 --> 00:18:29.900
But constructor.

00:18:29.900 --> 00:18:30.370
Yeah,

00:18:30.370 --> 00:18:34.470
but they'll use referred to the same size and color beets.

00:18:34.470 --> 00:18:35.530
All right.

00:18:35.530 --> 00:18:35.670
Said,

00:18:35.670 --> 00:18:37.120
is your homework pretty simple?

00:18:37.120 --> 00:18:37.930
Nothing too difficult.

00:18:37.930 --> 00:18:39.450
Just that you could understand the concept.

00:18:39.450 --> 00:18:41.810
Next time we're gonna go over bead scopes,

00:18:41.810 --> 00:18:43.380
and then we're on to,

00:18:43.380 --> 00:18:44.280
um,

00:18:44.280 --> 00:18:45.910
Web development in spring.

00:18:45.910 --> 00:18:47.300
So back end server development.

00:18:47.300 --> 00:18:48.990
All right,

00:18:48.990 --> 00:18:50.840
so I was looking homework,

00:18:50.840 --> 00:18:51.210
and,

00:18:51.210 --> 00:18:51.430
uh,

00:18:51.430 --> 00:18:52.310
I'll see next time.

