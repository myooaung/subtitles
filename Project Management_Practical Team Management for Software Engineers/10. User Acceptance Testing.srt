1
00:00:00,959 --> 00:00:01,959
User acceptance testing.

2
00:00:01,959 --> 00:00:04,777
Now you've done your software development and construction and

3
00:00:04,777 --> 00:00:07,777
you've done unit testing and all sorts of testing scenarios and

4
00:00:07,777 --> 00:00:09,141
you think you're basically done,

5
00:00:09,141 --> 00:00:13,036
well you're not done done until the user accepts what you've

6
00:00:13,036 --> 00:00:16,459
provided and we call that user acceptance testing.

7
00:00:16,459 --> 00:00:20,959
Now let's talk about this for a few moments.

8
00:00:20,959 --> 00:00:25,459
Here's the basic definition of user acceptance testing or also known as UAT.

9
00:00:25,459 --> 00:00:29,959
It's the last phase of the software testing process.

10
00:00:29,959 --> 00:00:30,686
During UAT,

11
00:00:30,686 --> 00:00:34,376
actual software users test the software to make sure it

12
00:00:34,376 --> 00:00:38,126
can handle the required task in real world scenarios

13
00:00:38,126 --> 00:00:39,626
according to the specifications.

14
00:00:39,626 --> 00:00:43,245
Now programmer testing is much different than user acceptance testing,

15
00:00:43,245 --> 00:00:44,959
I think very different.

16
00:00:44,959 --> 00:00:46,626
So sometimes we code things,

17
00:00:46,626 --> 00:00:50,209
but not fully understand what it means or its value because we're

18
00:00:50,209 --> 00:00:53,414
just kind of building from the functional specs and sometimes we

19
00:00:53,414 --> 00:00:57,209
don't have that full appreciation of what value should really be on

20
00:00:57,209 --> 00:00:58,959
the screen at that point in time.

21
00:00:58,959 --> 00:01:02,159
And it's only experienced subject matter experts that

22
00:01:02,159 --> 00:01:06,959
can really see and discern that, especially on very large and complex systems.

23
00:01:06,959 --> 00:01:09,421
We really need to partner with the users,

24
00:01:09,421 --> 00:01:12,959
with our customers and doing a joint development and test activity.

25
00:01:12,959 --> 00:01:17,959
So I really need to partner with our team and with our

26
00:01:17,959 --> 00:01:21,959
customers and users to do user acceptance testing.

27
00:01:21,959 --> 00:01:25,530
So we must rely on our users for the final

28
00:01:25,530 --> 00:01:29,959
acceptance of any software we deliver.

29
00:01:29,959 --> 00:01:32,959
Now here's a simple UAT process.

30
00:01:32,959 --> 00:01:37,959
So first you want to develop a UAT test plan.

31
00:01:37,959 --> 00:01:39,547
So you need to write up a test plan,

32
00:01:39,547 --> 00:01:42,805
that is how are you going to approach the UAT testing activity,

33
00:01:42,805 --> 00:01:46,959
these will be the steps you'll want to perform.

34
00:01:46,959 --> 00:01:49,359
Now typically you'll identify acceptance criteria,

35
00:01:49,359 --> 00:01:53,209
which are those items that if they work correctly the customer will say,

36
00:01:53,209 --> 00:01:54,626
hey all done, looks great.

37
00:01:54,626 --> 00:01:58,882
Now an example of acceptance criteria, maybe that they can define an order,

38
00:01:58,882 --> 00:02:02,626
allocate the items in the order, and release the order for fulfillment,

39
00:02:02,626 --> 00:02:05,292
something like that, that's a very simple one,

40
00:02:05,292 --> 00:02:05,959
of course.

41
00:02:05,959 --> 00:02:08,816
You want to identify the key sign off user because,

42
00:02:08,816 --> 00:02:13,959
you know, not every user has the influence or position in the company to do this.

43
00:02:13,959 --> 00:02:17,102
So be sure you identify that key user, or maybe users,

44
00:02:17,102 --> 00:02:21,036
that'll do the sign offs and say, hey this looks good,

45
00:02:21,036 --> 00:02:22,959
let's move it to production.

46
00:02:22,959 --> 00:02:27,959
Next you want to develop the UAT test cases and identify those.

47
00:02:27,959 --> 00:02:31,232
Since you've already probably created use cases or user

48
00:02:31,232 --> 00:02:33,497
stories when you did the requirements,

49
00:02:33,497 --> 00:02:38,777
well these can be so easily repurposed to be the actual test cases themselves.

50
00:02:38,777 --> 00:02:43,626
If you were thoughtful in writing the user stories in the user's own words,

51
00:02:43,626 --> 00:02:47,344
then it's very easy for a user to read those,

52
00:02:47,344 --> 00:02:51,959
follow those, and then apply it to the UAT process.

53
00:02:51,959 --> 00:02:54,709
Also you want to define the UAT environment and the data

54
00:02:54,709 --> 00:02:57,959
appropriate for doing the testing, so it's really important.

55
00:02:57,959 --> 00:03:00,113
What you have to do, of course,

56
00:03:00,113 --> 00:03:03,777
is to simulate that future production environment and try to

57
00:03:03,777 --> 00:03:06,959
perform the most realistic environment for testing.

58
00:03:06,959 --> 00:03:10,426
Now sometimes I like to set up a UAT that in fact becomes

59
00:03:10,426 --> 00:03:12,388
the production environment at some point,

60
00:03:12,388 --> 00:03:17,626
then later I still need to build a new UAT since you will always

61
00:03:17,626 --> 00:03:20,959
need UAT testing prior to going to production.

62
00:03:20,959 --> 00:03:25,959
Next, document the requirements tied to this version or release.

63
00:03:25,959 --> 00:03:29,805
You may be making several releases or versions as you

64
00:03:29,805 --> 00:03:32,414
perform UAT testing and for each release,

65
00:03:32,414 --> 00:03:36,959
document and make clear what new features or bug fixes or other items

66
00:03:36,959 --> 00:03:42,232
are now in this release so that the users who are doing the testing

67
00:03:42,232 --> 00:03:44,959
clearly know what has been delivered.

68
00:03:44,959 --> 00:03:47,959
Lastly, you want to get that 'ok' to promote to production.

69
00:03:47,959 --> 00:03:51,530
So that key sign off user I just mentioned above,

70
00:03:51,530 --> 00:03:55,459
well he or she will be the one that'll say okay promote to production,

71
00:03:55,459 --> 00:03:55,959
not you,

72
00:03:55,959 --> 00:04:00,959
you don't have the authority or power and shouldn't to promote to production.

73
00:04:00,959 --> 00:04:04,805
Now that release may not be perfect, which is okay,

74
00:04:04,805 --> 00:04:08,959
but close enough so as to be viable and usable to get work done.

75
00:04:08,959 --> 00:04:14,959
Again, that's up to the sign off user to determine that and approve that.

76
00:04:14,959 --> 00:04:19,190
Now this seems to work more in an internally facing application,

77
00:04:19,190 --> 00:04:22,759
where it's in terms of the company and maybe the user can sign off and say,

78
00:04:22,759 --> 00:04:26,959
hey, that's good enough, I know there's a couple of tweaks we've got to make,

79
00:04:26,959 --> 00:04:27,959
I'll get those in the next release,

80
00:04:27,959 --> 00:04:30,777
but at least that can still be productive in this current release,

81
00:04:30,777 --> 00:04:34,959
again that's up to the identified key user for the UAT testing process.

82
00:04:34,959 --> 00:04:41,959
Okay, now let's look a little deeper at a UAT test plan.

83
00:04:41,959 --> 00:04:45,959
So here's a quick primer on a UAT test plan.

84
00:04:45,959 --> 00:04:48,816
And of course, the most important things is the goal,

85
00:04:48,816 --> 00:04:51,388
what is the goal of the test plan?

86
00:04:51,388 --> 00:04:56,497
Okay, so for example the goal for say project x may be the following,

87
00:04:56,497 --> 00:05:01,559
test all features of the system to ensure that the system functions as

88
00:05:01,559 --> 00:05:04,334
documented in the functional and technical specification.

89
00:05:04,334 --> 00:05:06,959
Okay sounds pretty straightforward and you probably

90
00:05:06,959 --> 00:05:08,595
wouldn't expect anything other than that.

91
00:05:08,595 --> 00:05:08,868
Okay,

92
00:05:08,868 --> 00:05:12,459
now what might be some of the references we want to

93
00:05:12,459 --> 00:05:14,959
have as part of the test plan?

94
00:05:14,959 --> 00:05:18,959
Okay the first would be, well what are the functional specifications,

95
00:05:18,959 --> 00:05:21,868
do we have usage summaries, use case specification,

96
00:05:21,868 --> 00:05:26,084
maybe a technical specification, maybe data model specifications,

97
00:05:26,084 --> 00:05:30,292
or other specifications, maybe even security and things like that.

98
00:05:30,292 --> 00:05:36,042
All these should be artifacts and referred to in the test plan.

99
00:05:36,042 --> 00:05:38,959
Okay, features to be tested.

100
00:05:38,959 --> 00:05:41,959
So let's use, as an example, a university enrollment system.

101
00:05:41,959 --> 00:05:45,102
When you list out the features to test, these can be,

102
00:05:45,102 --> 00:05:47,497
I think, very high level at first.

103
00:05:47,497 --> 00:05:52,292
They are basically describing what you want to test and not necessarily how.

104
00:05:52,292 --> 00:05:54,959
The how will come in the next slide.

105
00:05:54,959 --> 00:05:58,959
So for example, a high level feature would be pre-enrollment.

106
00:05:58,959 --> 00:06:02,959
Here you would list all the things like data that must be set up

107
00:06:02,959 --> 00:06:05,959
in order to perform an enrollment of a student.

108
00:06:05,959 --> 00:06:10,959
What must be available, in other words, pre-enrollment, for this to really work.

109
00:06:10,959 --> 00:06:15,959
So pre-enrollment setups actually can be quite lengthy and complex,

110
00:06:15,959 --> 00:06:17,834
so be aware of that.

111
00:06:17,834 --> 00:06:18,959
Next, enrollment itself.

112
00:06:18,959 --> 00:06:20,159
A student is going to enroll,

113
00:06:20,159 --> 00:06:22,848
so you may want to identify some of the enrollment steps,

114
00:06:22,848 --> 00:06:25,959
the things that need to be done.

115
00:06:25,959 --> 00:06:26,209
Post-enrollment,

116
00:06:26,209 --> 00:06:30,497
so these are all the features that you can do after a student is enrolled,

117
00:06:30,497 --> 00:06:33,959
such as maybe a student can drop a class.

118
00:06:33,959 --> 00:06:36,959
A student cannot drop a class in pre-enrollment or during enrollment,

119
00:06:36,959 --> 00:06:39,959
but only after being enrolled, things like that.

120
00:06:39,959 --> 00:06:43,292
So if you have written good quality requirements,

121
00:06:43,292 --> 00:06:48,959
then this step is really easy since you can repurpose the material for UAT.

122
00:06:48,959 --> 00:06:54,102
So I want to reemphasize what I said earlier in this course

123
00:06:54,102 --> 00:06:55,759
about producing quality specifications.

124
00:06:55,759 --> 00:06:59,709
It's great for reuse and you can refer to all these

125
00:06:59,709 --> 00:07:01,959
specs as part of the test plan as well.

126
00:07:01,959 --> 00:07:07,959
Okay, now let's look at a simple example.

127
00:07:07,959 --> 00:07:10,959
Now as part of our test plan, we're going to identify many test cases,

128
00:07:10,959 --> 00:07:13,759
so here's a simple test case example.

129
00:07:13,759 --> 00:07:20,459
So I'm going to give it a name, ENRL, short for enrollment, Test Case 2.

130
00:07:20,459 --> 00:07:20,959
14.

131
00:07:20,959 --> 00:07:25,673
So easy naming convention for the test cases so we can

132
00:07:25,673 --> 00:07:28,292
refer to them throughout the UAT process.

133
00:07:28,292 --> 00:07:29,959
And what is in that?

134
00:07:29,959 --> 00:07:34,959
I'll write something like user directs system to create a new fee waiver,

135
00:07:34,959 --> 00:07:38,070
for example, users enters the Program Department,

136
00:07:38,070 --> 00:07:40,882
Authorizing Identity, Expiration Date and Waiver Amount.

137
00:07:40,882 --> 00:07:44,665
So it's saying to the user what needs to be done.

138
00:07:44,665 --> 00:07:47,959
Next would be the screens that are going to be used to do that,

139
00:07:47,959 --> 00:07:51,959
that will guide the user in doing the UAT.

140
00:07:51,959 --> 00:07:54,728
We want you to use the Student Search screen,

141
00:07:54,728 --> 00:08:00,959
the Student Master screen, the Student Profile screen and the Fee Waivers screen.

142
00:08:00,959 --> 00:08:03,959
Next, document test steps and expected results.

143
00:08:03,959 --> 00:08:05,888
In other words, there are going to be pre-conditions,

144
00:08:05,888 --> 00:08:08,959
so these are the to-do's prior to testing that we mentioned earlier.

145
00:08:08,959 --> 00:08:10,888
And then we're going to have the post conditions,

146
00:08:10,888 --> 00:08:13,626
in other words, these are the expected results.

147
00:08:13,626 --> 00:08:17,777
So perform the pre-conditions, then follow the test case,

148
00:08:17,777 --> 00:08:19,959
go through, and then do the post conditions.

149
00:08:19,959 --> 00:08:25,959
So this is kind of a simple template of a particular instance of a test case.

150
00:08:25,959 --> 00:08:30,626
So your test plan will be a collection also of a variety of test

151
00:08:30,626 --> 00:08:35,959
cases that are part or a portion of your test plan.

152
00:08:35,959 --> 00:08:39,488
Now the point of this slide is not to make you an expert in any

153
00:08:39,488 --> 00:08:42,113
of these testing types I'm about to show you,

154
00:08:42,113 --> 00:08:45,834
but give you a general awareness that you can decide later if

155
00:08:45,834 --> 00:08:48,959
any of these may work for you in the future.

156
00:08:48,959 --> 00:08:52,959
So the following are the types of testing that you can may choose to perform.

157
00:08:52,959 --> 00:08:54,777
The first, requirements coverage,

158
00:08:54,777 --> 00:09:00,092
this will be the foundation for testing all aspects of the system and will be

159
00:09:00,092 --> 00:09:04,459
used to make sure that this system is performing as it should.

160
00:09:04,459 --> 00:09:09,050
Another type is called white box testing and this testing will

161
00:09:09,050 --> 00:09:10,959
be implemented at all levels of testing,

162
00:09:10,959 --> 00:09:13,359
unit testing, integration testing, system testing,

163
00:09:13,359 --> 00:09:17,141
to verify that all paths of the code are working

164
00:09:17,141 --> 00:09:18,959
correctly according to the requirements.

165
00:09:18,959 --> 00:09:25,959
Can you make it through all the appropriate paths and test everything out?

166
00:09:25,959 --> 00:09:26,882
Black box testing,

167
00:09:26,882 --> 00:09:31,113
now this concentrates on what data are entered and what data are emitted.

168
00:09:31,113 --> 00:09:34,959
Since black box testing is not based in an knowledge

169
00:09:34,959 --> 00:09:36,626
of any internal designer code,

170
00:09:36,626 --> 00:09:39,232
tests will be based on requirements and functionality.

171
00:09:39,232 --> 00:09:41,959
So there will be tests that call for reviewing database

172
00:09:41,959 --> 00:09:44,686
activity afterwards to ensure the inserts,

173
00:09:44,686 --> 00:09:46,959
update and deletes are performed.

174
00:09:46,959 --> 00:09:51,959
So in other words, given a certain set of data that might go into a system,

175
00:09:51,959 --> 00:09:55,626
what is the expected outcome that would be inside the database or outputted,

176
00:09:55,626 --> 00:10:00,209
for example, without the necessary knowledge of what goes on on the inside.

177
00:10:00,209 --> 00:10:02,292
Input and output domain coverage,

178
00:10:02,292 --> 00:10:06,232
and this testing ensures that when data is entered,

179
00:10:06,232 --> 00:10:10,777
it is validated, saved and transformed into the correct form,

180
00:10:10,777 --> 00:10:13,959
like invoices or credit memos, enrollment schedule,

181
00:10:13,959 --> 00:10:14,686
and things like that.

182
00:10:14,686 --> 00:10:17,497
Data outside of the specified input range should be tested to check

183
00:10:17,497 --> 00:10:21,209
the robustness of the program and boundary cases should be tested

184
00:10:21,209 --> 00:10:24,959
top and bottom of a specified range, for example,

185
00:10:24,959 --> 00:10:28,709
to make sure the highest and lowest allowable inputs produce the proper result.

186
00:10:28,709 --> 00:10:32,159
Now this type of testing will be done throughout the testing lifecycle,

187
00:10:32,159 --> 00:10:36,070
but will become increasingly important as the system is

188
00:10:36,070 --> 00:10:39,959
developed and greater sample data is available.

189
00:10:39,959 --> 00:10:43,728
Another one may be data flow coverage and this testing follows data as it

190
00:10:43,728 --> 00:10:47,959
flows through the system and to its designated form of output,

191
00:10:47,959 --> 00:10:51,959
maybe invoices or reports, payments, things like that.

192
00:10:51,959 --> 00:10:55,959
And this is also performed throughout the testing lifecycle.

193
00:10:55,959 --> 00:10:59,959
Another one is what I call ad hoc testing or I even call it monkey testing.

194
00:10:59,959 --> 00:11:02,497
The purpose of this testing is to try to create any

195
00:11:02,497 --> 00:11:04,626
unforeseen errors at any level of testing,

196
00:11:04,626 --> 00:11:08,102
from entering erroneous data to test scenarios that will

197
00:11:08,102 --> 00:11:10,959
be incompatible with the functionality.

198
00:11:10,959 --> 00:11:13,728
And this type of testing can flush out any weird or strange

199
00:11:13,728 --> 00:11:16,651
occurrences with data or logic validation.

200
00:11:16,651 --> 00:11:22,497
Smoke testing is kind of an initial testing effort to determine if

201
00:11:22,497 --> 00:11:26,403
a new software version is even performing well enough to be

202
00:11:26,403 --> 00:11:27,959
accepted for testing in the first place.

203
00:11:27,959 --> 00:11:31,102
Why waste the time and effort of your UAT team if

204
00:11:31,102 --> 00:11:33,209
the darn thing won't even load.

205
00:11:33,209 --> 00:11:37,759
So, for example, if the new software doesn't allow valid logins,

206
00:11:37,759 --> 00:11:42,959
or the menu items do not take the user to the correct pages,

207
00:11:42,959 --> 00:11:44,292
or maybe even you have some words misspelled,

208
00:11:44,292 --> 00:11:47,959
the software may not be in a condition to warrant

209
00:11:47,959 --> 00:11:50,959
further testing in its current state.

210
00:11:50,959 --> 00:11:54,574
So this is also performed throughout the entire testing lifecycle to ensure

211
00:11:54,574 --> 00:11:57,959
that each version of the software is not dead on arrival.

212
00:11:57,959 --> 00:12:02,959
Development testing includes the writing and exaction of unit tests.

213
00:12:02,959 --> 00:12:05,709
So this is testing that's just focused simply on the software

214
00:12:05,709 --> 00:12:10,959
engineers themselves and it helps them test in an automated way

215
00:12:10,959 --> 00:12:14,042
business logic and to ensure code coverage.

216
00:12:14,042 --> 00:12:14,876
Integration testing,

217
00:12:14,876 --> 00:12:19,504
usually one of the most complex of all the testing scenarios here,

218
00:12:19,504 --> 00:12:23,504
because it's testing all the combined parts of an application to

219
00:12:23,504 --> 00:12:25,574
determine if they function together correctly.

220
00:12:25,574 --> 00:12:27,728
But what if you have, you know,

221
00:12:27,728 --> 00:12:30,805
a half dozen APIs and 14 different databases and data

222
00:12:30,805 --> 00:12:32,959
flowing and all those kinds of things,

223
00:12:32,959 --> 00:12:35,141
it can make integration testing very challenging because

224
00:12:35,141 --> 00:12:39,959
you're going to also have pre-conditions in order to do the

225
00:12:39,959 --> 00:12:43,459
integration testing in the first place.

226
00:12:43,459 --> 00:12:45,959
And lastly, regression testing.

227
00:12:45,959 --> 00:12:49,959
So basically this is when you finish testing in an area of an application,

228
00:12:49,959 --> 00:12:54,403
you may then test other areas not expected to have been affected to

229
00:12:54,403 --> 00:12:57,959
ensure that no new errors have been introduced.

230
00:12:57,959 --> 00:12:59,323
Now this is pretty tough,

231
00:12:59,323 --> 00:13:02,626
regression testing is very time consuming and rarely performed,

232
00:13:02,626 --> 00:13:05,959
but should as much as possible.

233
00:13:05,959 --> 00:13:08,783
So you go over and fix an area, an area say A,

234
00:13:08,783 --> 00:13:11,209
and you go ahead and do the testing for A,

235
00:13:11,209 --> 00:13:14,959
but you realize you have B, C, and D, should you test those again?

236
00:13:14,959 --> 00:13:17,626
Most people say hey I don't have time,

237
00:13:17,626 --> 00:13:20,626
but regression testing would make it all the way through again,

238
00:13:20,626 --> 00:13:24,728
A, B, C, and D and make sure it all works.

239
00:13:24,728 --> 00:13:27,959
Very important, but time consuming and costly.

240
00:13:27,959 --> 00:13:30,816
So if the user acceptance testing is now a success

241
00:13:30,816 --> 00:13:32,673
and the identified user says okay,

242
00:13:32,673 --> 00:13:41,000
I'm going to give the okay to promote to production, let's go check out promote to production.

