WEBVTT
1
00:00:01.334 --> 00:00:04.128
We'll go now to our practical demonstration.

2
00:00:04.128 --> 00:00:07.617
We have started with some untested flight management application

3
00:00:07.617 --> 00:00:11.766
and we have understood its general functionality.

4
00:00:11.766 --> 00:00:15.663
We'll add tests first on the Passenger class using JUnit5 and

5
00:00:15.663 --> 00:00:19.615
looking for the verification of its current behavior.

6
00:00:19.615 --> 00:00:22.182
We'll include here the creation of a passenger,

7
00:00:22.182 --> 00:00:26.660
the restrictions that an identifier and the country code must fulfill,

8
00:00:26.660 --> 00:00:31.944
the behavior of individual methods.

9
00:00:31.944 --> 00:00:35.638
We go back to our flights management application having the intention to

10
00:00:35.638 --> 00:00:39.309
provide unit tests for the existing functionality.

11
00:00:39.309 --> 00:00:42.799
Remind that the application is composed of the following classes,

12
00:00:42.799 --> 00:00:46.369
passenger described by an identifier, a name,

13
00:00:46.369 --> 00:00:48.037
and a country code.

14
00:00:48.037 --> 00:00:51.792
The identifier kept inside the company is following the same

15
00:00:51.792 --> 00:00:54.306
format as the SSN in the United States.

16
00:00:54.306 --> 00:01:00.705
We have a constructor with all the three parameters, getters, and setters.

17
00:01:00.705 --> 00:01:03.812
Flight described by flightNumber, the number of places,

18
00:01:03.812 --> 00:01:07.471
the number of passengers, its origin and destination,

19
00:01:07.471 --> 00:01:11.174
and the flying state, and the Main class,

20
00:01:11.174 --> 00:01:12.996
just to show some action.

21
00:01:12.996 --> 00:01:15.824
We create the passenger and record it to the system.

22
00:01:15.824 --> 00:01:19.299
We create the flight, set its origin and destination,

23
00:01:19.299 --> 00:01:22.996
sell a ticket for it, make it take off and land.

24
00:01:22.996 --> 00:01:26.485
And we follow the behavior.

25
00:01:26.485 --> 00:01:30.253
It is time now to start the unit testing based on the

26
00:01:30.253 --> 00:01:33.601
business logic that we have understood.

27
00:01:33.601 --> 00:01:35.506
In order to be able to move to unit testing,

28
00:01:35.506 --> 00:01:42.683
the first thing to be done is to add the JUnit5 dependencies into the POM file.

29
00:01:42.683 --> 00:01:49.860
We have added these two dependencies and we're also importing the changes.

30
00:01:49.860 --> 00:01:55.476
Then we'll move to the test Java folder and create here the package,

31
00:01:55.476 --> 00:02:00.138
com.Pluralsight .test_pyramid_strategy .airport.

32
00:02:00.138 --> 00:02:04.636
We'll also create the new PassengerTest class.

33
00:02:04.636 --> 00:02:09.716
It is our first class for unit testing.

34
00:02:09.716 --> 00:02:12.636
We'll write our first simple test.

35
00:02:12.636 --> 00:02:19.821
We create the passenger object and we verify that it is not null.

36
00:02:19.821 --> 00:02:25.441
We run a test and see that it is green.

37
00:02:25.441 --> 00:02:30.063
We have created a passenger and checked the existence.

38
00:02:30.063 --> 00:02:34.057
Next, we would like to introduce the possibility to measure the code coverage.

39
00:02:34.057 --> 00:02:39.283
In order to do this, we'll insert the JaCoCo plugin to the Maven configuration.

40
00:02:39.283 --> 00:02:41.614
To effectively measure the code coverage,

41
00:02:41.614 --> 00:02:48.459
we run mvn test from the command prompt.

42
00:02:48.459 --> 00:02:53.990
This will generate an index.html file where we'll be able to take a

43
00:02:53.990 --> 00:02:57.945
look at the code coverage at the level of package,

44
00:02:57.945 --> 00:03:01.467
classes, and individual constructors and methods.

45
00:03:01.467 --> 00:03:07.766
For now, we see that the test covers only the constructor of passenger.

46
00:03:07.766 --> 00:03:11.033
We would like now to check the constraints that we have mentioned

47
00:03:11.033 --> 00:03:15.147
about remember the identifier kept inside a company is following the

48
00:03:15.147 --> 00:03:18.118
same format as the SSN in the United States.

49
00:03:18.118 --> 00:03:23.247
If the customer is a US citizen, we assign the SSN itself.

50
00:03:23.247 --> 00:03:25.345
If he or she is not a US citizen,

51
00:03:25.345 --> 00:03:29.420
we'll assign an identifier that is used only inside the company,

52
00:03:29.420 --> 00:03:32.454
but that follows the same rules.

53
00:03:32.454 --> 00:03:36.273
Social security numbers are nine-digit numbers in the format

54
00:03:36.273 --> 00:03:42.867
AAA-GG-SSSS with the following restrictions.

55
00:03:42.867 --> 00:03:51.900
The first three digits cannot be 000, 666, or between 900 and 999.

56
00:03:51.900 --> 00:03:58.521
Digits 4 and 5 are called the group number and range from 01 to 99.

57
00:03:58.521 --> 00:04:03.159
The last 4 digits are serial numbers from 0001 to 9999.

58
00:04:03.159 --> 00:04:11.846
To validate all of our three rows, we'll use a regular expression.

59
00:04:11.846 --> 00:04:14.165
We'll write a test that changes the declaration of a passenger

60
00:04:14.165 --> 00:04:17.572
with an invalid SSN will throw an exception.

61
00:04:17.572 --> 00:04:20.735
We have chosen an invalid SSN and we're explicitly

62
00:04:20.735 --> 00:04:23.743
saying that we're expecting an exception.

63
00:04:23.743 --> 00:04:30.832
If we run now the tests, this test invalid SSN will fail.

64
00:04:30.832 --> 00:04:35.204
This means that the SSN verification was not there.

65
00:04:35.204 --> 00:04:39.347
Even if the company has announced this policy for providing identifiers,

66
00:04:39.347 --> 00:04:43.254
even if we have run some small program to use the existing classes,

67
00:04:43.254 --> 00:04:45.263
the verification was not made.

68
00:04:45.263 --> 00:04:49.548
This has only been exposed when starting with the unit tests.

69
00:04:49.548 --> 00:04:52.927
One of the principles of TDD, test-driven development,

70
00:04:52.927 --> 00:04:56.515
states that when implementing a new functionality,

71
00:04:56.515 --> 00:04:58.784
you could first write the test to check it.

72
00:04:58.784 --> 00:05:00.487
The test is expected to fail.

73
00:05:00.487 --> 00:05:01.832
If the test succeeds,

74
00:05:01.832 --> 00:05:05.079
it means that either it is not a good one or that the

75
00:05:05.079 --> 00:05:08.818
functionality is already there, somehow hidden.

76
00:05:08.818 --> 00:05:09.168
Now,

77
00:05:09.168 --> 00:05:14.243
we have received an already implemented application not tested and we have

78
00:05:14.243 --> 00:05:18.263
uncovered some malfunction when starting to write unit tests.

79
00:05:18.263 --> 00:05:19.550
Let's fix this.

80
00:05:19.550 --> 00:05:25.031
This is the regular expression that we are going to use and this

81
00:05:25.031 --> 00:05:28.561
is the verification inside the constructor.

82
00:05:28.561 --> 00:05:32.641
Let's run the tests again.

83
00:05:32.641 --> 00:05:33.772
The tests run fine now.

84
00:05:33.772 --> 00:05:38.501
We have successfully implemented the SSN verification.

85
00:05:38.501 --> 00:05:47.598
To measure the code coverage, we run mvn test from the command prompt.

86
00:05:47.598 --> 00:05:49.131
Into the index.html file,

87
00:05:49.131 --> 00:05:55.002
we'll be able to take a look at the code coverage at the level of package,

88
00:05:55.002 --> 00:05:59.189
classes, and individual constructors and methods.

89
00:05:59.189 --> 00:06:02.046
We see that the tests still cover only the constructor of passenger,

90
00:06:02.046 --> 00:06:09.839
but we include the throwing of the runtime exception that we have just added.

91
00:06:09.839 --> 00:06:12.378
We would like to check more of the constraints that are

92
00:06:12.378 --> 00:06:14.789
imposed for the creation of a passenger.

93
00:06:14.789 --> 00:06:17.894
The country code must be among the existing countries as

94
00:06:17.894 --> 00:06:21.802
defined by ISO2 and the program should not allow the

95
00:06:21.802 --> 00:06:24.639
introduction of some wrong codes.

96
00:06:24.639 --> 00:06:27.210
We'll write a test that checks that the creation of a passenger with

97
00:06:27.210 --> 00:06:30.706
an invalid country code will throw an exception.

98
00:06:30.706 --> 00:06:34.562
GJ is an invalid country code according to ISO2 and

99
00:06:34.562 --> 00:06:36.976
we are expecting an exception.

100
00:06:36.976 --> 00:06:42.634
If we run the test now, it will be red.

101
00:06:42.634 --> 00:06:45.962
This means that the country code verification was not there.

102
00:06:45.962 --> 00:06:50.384
This has only been exposed when starting with the unit tests.

103
00:06:50.384 --> 00:06:51.270
Let's fix this.

104
00:06:51.270 --> 00:06:54.969
The list of the valid country codes is provided by calling

105
00:06:54.969 --> 00:06:59.943
Locale.getISOCountries and we're adding this restriction

106
00:06:59.943 --> 00:07:01.826
when creating a passenger.

107
00:07:01.826 --> 00:07:05.540
We run the tests again.

108
00:07:05.540 --> 00:07:06.648
The tests are green.

109
00:07:06.648 --> 00:07:11.582
This means that we have successfully introduced the country verification.

110
00:07:11.582 --> 00:07:16.132
We see that we have provided setters for the identifier and country code fields,

111
00:07:16.132 --> 00:07:19.076
so as long as it is possible to change these fields,

112
00:07:19.076 --> 00:07:21.353
we should check them to follow the same

113
00:07:21.353 --> 00:07:24.023
restrictions that we have presented above.

114
00:07:24.023 --> 00:07:26.598
We'll write a test that checks that setting an invalid SSN

115
00:07:26.598 --> 00:07:28.992
for a passenger will throw an exception.

116
00:07:28.992 --> 00:07:33.185
We are creating a passenger with a valid identifier and

117
00:07:33.185 --> 00:07:37.018
then we are changing it to an invalid one.

118
00:07:37.018 --> 00:07:41.925
We run all the tests and it is failing.

119
00:07:41.925 --> 00:07:48.165
This means that the SSN verification is not yet made into the setter.

120
00:07:48.165 --> 00:07:49.510
Let's add it here.

121
00:07:49.510 --> 00:07:54.506
It is the same condition like inside the constructor.

122
00:07:54.506 --> 00:08:00.842
We run the test again and it is succeeding.

123
00:08:00.842 --> 00:08:04.252
Let's insert the test that is also checking a valid SSN.

124
00:08:04.252 --> 00:08:09.362
We should check both valid and invalid input values.

125
00:08:09.362 --> 00:08:15.264
We'll re-run the test and it is succeeding.

126
00:08:15.264 --> 00:08:17.723
We'll also write the test that checks that setting an invalid

127
00:08:17.723 --> 00:08:22.563
country code for a passenger will throw an exception.

128
00:08:22.563 --> 00:08:25.516
We are creating a passenger with a valid country code and

129
00:08:25.516 --> 00:08:30.199
then we are changing it to an invalid one.

130
00:08:30.199 --> 00:08:34.690
We run the test and it is red.

131
00:08:34.690 --> 00:08:42.031
This means that the country code verification is not yet made into the setter.

132
00:08:42.031 --> 00:08:46.250
The condition is the same like in the case of a constructor.

133
00:08:46.250 --> 00:08:51.749
We re-run the test and it is green.

134
00:08:51.749 --> 00:08:57.225
Let's insert a test that is also setting a valid country code.

135
00:08:57.225 --> 00:09:03.497
As we were saying, we should check both valid and invalid input values.

136
00:09:03.497 --> 00:09:10.296
We re-run the tests and they are running fine.

137
00:09:10.296 --> 00:09:13.995
We would like to measure the code coverage again and we

138
00:09:13.995 --> 00:09:19.036
run mvn test from the command prompt.

139
00:09:19.036 --> 00:09:20.456
Into the index.html file,

140
00:09:20.456 --> 00:09:25.574
we'll be able to take a look at the code coverage at the level of the package,

141
00:09:25.574 --> 00:09:27.358
at the level of the classes,

142
00:09:27.358 --> 00:09:32.170
and at the level of individual constructors and methods.

143
00:09:32.170 --> 00:09:34.539
We see that there are a few methods left from the

144
00:09:34.539 --> 00:09:37.310
Passenger class that haven't been tested yet.

145
00:09:37.310 --> 00:09:42.924
We'll focus our next effort on this matter.

146
00:09:42.924 --> 00:09:46.227
Let's write a test that will also invoke the setName,

147
00:09:46.227 --> 00:09:52.038
getName, recordToSystem, and ToString methods and check some functionality.

148
00:09:52.038 --> 00:09:54.216
We'll call it testPassengerToString,

149
00:09:54.216 --> 00:09:58.855
but we'll make sure to pass through all remaining methods.

150
00:09:58.855 --> 00:10:00.642
In particular, for our convenience,

151
00:10:00.642 --> 00:10:04.976
we'll simply call the recordToSystem method just to cover it.

152
00:10:04.976 --> 00:10:08.556
We presume that we have a passenger that has been wrongly recorded

153
00:10:08.556 --> 00:10:12.017
as John Smith and his real name is John Brown.

154
00:10:12.017 --> 00:10:15.843
We use the setter in order to do this and they are set on

155
00:10:15.843 --> 00:10:18.882
the functionality of the ToString method.

156
00:10:18.882 --> 00:10:23.087
Let's run the tests.

157
00:10:23.087 --> 00:10:25.499
The tests are running fine.

158
00:10:25.499 --> 00:10:29.229
We would like to measure the code coverage again and we

159
00:10:29.229 --> 00:10:34.045
run mvn test from the command prompt.

160
00:10:34.045 --> 00:10:35.497
Into the index.html file,

161
00:10:35.497 --> 00:10:39.949
we'll be able to take a look at the code coverage and the level

162
00:10:39.949 --> 00:10:43.559
of the package and the level of the classes,

163
00:10:43.559 --> 00:10:46.808
and individual constructors and methods.

164
00:10:46.808 --> 00:10:54.000
We see that we have fully covered the Passenger class with this. We'll move to the next class to test it.

