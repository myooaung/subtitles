WEBVTT
1
00:00:00.000 --> 00:00:00.664
Hello.

2
00:00:00.664 --> 00:00:05.293
Welcome to this module about the system testing.

3
00:00:05.293 --> 00:00:07.949
After having introduced and discussed integration testing

4
00:00:07.949 --> 00:00:13.672
as combined units working together, it is time now to see everything as a whole.

5
00:00:13.672 --> 00:00:16.251
This is our objective for this module.

6
00:00:16.251 --> 00:00:20.419
Let's go for it.

7
00:00:20.419 --> 00:00:23.722
This module will focus on showing what system testing means,

8
00:00:23.722 --> 00:00:28.128
how to make the step from integration testing to system testing and

9
00:00:28.128 --> 00:00:31.018
which techniques are suitable for system testing.

10
00:00:31.018 --> 00:00:34.233
First, we'll define and modify the system testing.

11
00:00:34.233 --> 00:00:38.329
We understand what contract testing is and more exactly

12
00:00:38.329 --> 00:00:40.604
what consumer-driven contract means.

13
00:00:40.604 --> 00:00:42.365
We'll then move back to the flights management application

14
00:00:42.365 --> 00:00:45.323
to put in practice the concepts by extending the testing

15
00:00:45.323 --> 00:00:46.906
at the level of the system,

16
00:00:46.906 --> 00:00:51.460
by mocking the behavior of provider service as long as it is under construction

17
00:00:51.460 --> 00:00:55.185
following a contract so that we can use it for our consumer.

18
00:00:55.185 --> 00:00:56.608
On the consumer side,

19
00:00:56.608 --> 00:01:01.816
we'll gradually replace the mock provider with the real one.

20
00:01:01.816 --> 00:01:04.443
So what does it mean to perform system testing?

21
00:01:04.443 --> 00:01:08.709
System testing means to test the complete and integrated software.

22
00:01:08.709 --> 00:01:09.036
Why?

23
00:01:09.036 --> 00:01:13.419
In order to evaluate the system's compliance with the specified

24
00:01:13.419 --> 00:01:16.106
requirements having which objective to detect inconsistencies

25
00:01:16.106 --> 00:01:21.265
between units that are integrated together.

26
00:01:21.265 --> 00:01:24.368
Common cases of using a test double are when you are communicating

27
00:01:24.368 --> 00:01:27.073
with an external service or with an internal one,

28
00:01:27.073 --> 00:01:29.386
but which is not yet available.

29
00:01:29.386 --> 00:01:32.304
This kind of service may be maintained by the different team.

30
00:01:32.304 --> 00:01:35.862
They may be slow or difficult to access or it may take

31
00:01:35.862 --> 00:01:39.432
some time until becoming fully available.

32
00:01:39.432 --> 00:01:41.398
That's why test doubles are handy.

33
00:01:41.398 --> 00:01:45.183
They stop your own test from waiting for the availability of the service,

34
00:01:45.183 --> 00:01:48.679
but testing against a double always raises some problems.

35
00:01:48.679 --> 00:01:51.862
Are the doubles an accurate representation of the external service?

36
00:01:51.862 --> 00:01:55.820
What happens if the external service changes its contract?

37
00:01:55.820 --> 00:01:59.791
If we are in the situation to work with a slow or a difficult to access service,

38
00:01:59.791 --> 00:02:04.278
a good idea is to try to periodically run the tests against the real system.

39
00:02:04.278 --> 00:02:05.752
It may take some time,

40
00:02:05.752 --> 00:02:09.890
but probably it can be done at night or during less crowded periods,

41
00:02:09.890 --> 00:02:11.747
and in case a failure,

42
00:02:11.747 --> 00:02:15.334
it helps you understand that the test doubles need to be updated to

43
00:02:15.334 --> 00:02:19.874
return the appropriate results or maybe our code needs to take into

44
00:02:19.874 --> 00:02:21.672
account the service contract change,

45
00:02:21.672 --> 00:02:25.165
especially when the dependent component is built in parallel.

46
00:02:25.165 --> 00:02:28.608
In order to reduce the chances of unexpected breaks in contracts,

47
00:02:28.608 --> 00:02:31.837
it's useful to move to a consumer-driven contract approach.

48
00:02:31.837 --> 00:02:36.612
The provider may get copies of the contract tests so they can follow some API,

49
00:02:36.612 --> 00:02:43.388
some behavior, or even run them as part of their build pipeline.

50
00:02:43.388 --> 00:02:46.659
So we'll use some test double to test against until we

51
00:02:46.659 --> 00:02:51.328
can do this against the real service, but how exactly does this work?

52
00:02:51.328 --> 00:02:56.070
We may run isolated tests between the consumer and the mock provider

53
00:02:56.070 --> 00:02:59.777
and/or between the real provider and the mock consumer.

54
00:02:59.777 --> 00:03:03.896
A set of tests may be between the consumer and the provider mock.

55
00:03:03.896 --> 00:03:07.259
The consumer service is started up and triggered so that it

56
00:03:07.259 --> 00:03:09.518
sends some requests to a provider mock.

57
00:03:09.518 --> 00:03:13.116
The provider mock changed their requests and answered with some

58
00:03:13.116 --> 00:03:15.605
predefined responses according to the contract.

59
00:03:15.605 --> 00:03:19.675
Another set of tests may be between the provider and the consumer mock.

60
00:03:19.675 --> 00:03:22.771
The mock consumer is given the request according to the contract,

61
00:03:22.771 --> 00:03:26.091
and simply sends them against the provider service.

62
00:03:26.091 --> 00:03:29.514
The mock consumer then checks if the provider's responses follow

63
00:03:29.514 --> 00:03:33.157
the expectations as defined in the contract.

64
00:03:33.157 --> 00:03:35.944
We are going to place ourselves on the consumer side,

65
00:03:35.944 --> 00:03:44.000
the developers working on the application and that are receiving the implementation of the external service.

