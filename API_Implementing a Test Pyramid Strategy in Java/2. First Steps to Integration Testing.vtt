WEBVTT
1
00:00:01.946 --> 00:00:06.303
We are moving to our first demonstration concerning integration testing.

2
00:00:06.303 --> 00:00:10.827
Remember, we already have a unit tested application.

3
00:00:10.827 --> 00:00:13.592
It consists of two classes, flight and passenger,

4
00:00:13.592 --> 00:00:18.875
and we have made sure that each of them is working fine in isolation.

5
00:00:18.875 --> 00:00:23.522
What we are going to try now is to investigate how the two classes cooperate.

6
00:00:23.522 --> 00:00:24.837
In order to cooperate,

7
00:00:24.837 --> 00:00:29.423
they need to expose appropriate interfaces and we are going to expose some

8
00:00:29.423 --> 00:00:33.099
defects of these interfaces that prevent their interaction.

9
00:00:33.099 --> 00:00:39.815
Consequently, we'll follow our objective to move to integration testing.

10
00:00:39.815 --> 00:00:42.480
We come back to our application and we remind that it

11
00:00:42.480 --> 00:00:47.307
is composed of the two classes, Flight and Passenger,

12
00:00:47.307 --> 00:00:50.986
that have been individually tested.

13
00:00:50.986 --> 00:00:57.748
We are running again the tests and everything is green.

14
00:00:57.748 --> 00:01:03.095
We have prepared a CSV file containing the description of 50 passengers.

15
00:01:03.095 --> 00:01:05.625
A passenger may join a flight, of course,

16
00:01:05.625 --> 00:01:08.072
after buying a ticket,

17
00:01:08.072 --> 00:01:13.381
but our sellTicket method does not get a passenger as argument.

18
00:01:13.381 --> 00:01:16.973
It just sells the ticket to somebody unknown.

19
00:01:16.973 --> 00:01:20.658
This is not good and we have discovered a defect in the

20
00:01:20.658 --> 00:01:24.367
interface and in the interaction between components.

21
00:01:24.367 --> 00:01:28.211
In fact, there is no interaction so far between the two components.

22
00:01:28.211 --> 00:01:32.147
Each of them is working in splendid isolation while for sure a flight

23
00:01:32.147 --> 00:01:36.773
and its passengers must be somehow related together.

24
00:01:36.773 --> 00:01:38.448
We know the code for our units,

25
00:01:38.448 --> 00:01:42.818
but the tests have been conducted using the exposed interfaces.

26
00:01:42.818 --> 00:01:47.662
We are in the situation of grey box testing.

27
00:01:47.662 --> 00:01:50.977
So we are changing the interface so that the sellTicket

28
00:01:50.977 --> 00:01:54.546
receives a Passenger as argument.

29
00:01:54.546 --> 00:01:56.908
Now the other test will complain.

30
00:01:56.908 --> 00:02:01.873
The initial sellTicket method does not receive any arguments.

31
00:02:01.873 --> 00:02:05.423
We should sell 50 tickets, but to whom?

32
00:02:05.423 --> 00:02:12.083
Of course, to the 50 passengers that have been prepared in our CSV file.

33
00:02:12.083 --> 00:02:16.850
In order to parse it and to create the passengers,

34
00:02:16.850 --> 00:02:22.820
we introduce this new FlightBuilderUtil class and

35
00:02:22.820 --> 00:02:25.767
this buildFlightFromCsv method.

36
00:02:25.767 --> 00:02:28.349
We create a new flight from London to Bucharest that

37
00:02:28.349 --> 00:02:31.012
we want to return from this method.

38
00:02:31.012 --> 00:02:35.657
We are pressing the CSV file, readLine by line,

39
00:02:35.657 --> 00:02:40.682
and construct the passenger based on the read information.

40
00:02:40.682 --> 00:02:45.053
After constructing the passenger, we are selling a ticket to him.

41
00:02:45.053 --> 00:02:48.833
And we'll change the test in order to fit the modified interface.

42
00:02:48.833 --> 00:02:52.848
We are building the flight from the CSV and we are trying

43
00:02:52.848 --> 00:02:56.007
to sell a ticket to our new passenger.

44
00:02:56.007 --> 00:02:58.339
For the testSetInvalidPlaces method,

45
00:02:58.339 --> 00:03:02.543
we are building the flight from the CSV and we are

46
00:03:02.543 --> 00:03:05.567
trying to reduce the number of places.

47
00:03:05.567 --> 00:03:08.397
For the testSetValidPlaces method,

48
00:03:08.397 --> 00:03:11.739
we are again building the flight from the CSV and we

49
00:03:11.739 --> 00:03:15.127
are extending the number of places.

50
00:03:15.127 --> 00:03:15.999
Of course,

51
00:03:15.999 --> 00:03:21.375
all three modified tests will need to announce that the throw IOException

52
00:03:21.375 --> 00:03:25.293
as this one is thrown by buildFlightFromCsv method.

53
00:03:25.293 --> 00:03:29.992
We are running a test again and they are all green.

54
00:03:29.992 --> 00:03:33.591
So we have made a successful first step towards the

55
00:03:33.591 --> 00:03:37.981
integration of our two components.

56
00:03:37.981 --> 00:03:40.267
Moving forward to the analysis of the current interfaces,

57
00:03:40.267 --> 00:03:44.579
we find out that the passenger should be added to the

58
00:03:44.579 --> 00:03:46.399
flight after selling a ticket to him,

59
00:03:46.399 --> 00:03:50.189
but he can also be removed from that flight.

60
00:03:50.189 --> 00:03:52.761
So the modified interface should have an addPassenger

61
00:03:52.761 --> 00:03:55.514
method to call sellTicket inside it,

62
00:03:55.514 --> 00:03:59.003
but also a removePassenger method and a Flight class

63
00:03:59.003 --> 00:04:02.440
should be even more integrated with passenger and keep the

64
00:04:02.440 --> 00:04:05.361
set of the recorded passengers.

65
00:04:05.361 --> 00:04:11.315
So we'll introduce this set to be kept here and these two methods.

66
00:04:11.315 --> 00:04:15.931
We'll change this buildFlightFromCsv method to use

67
00:04:15.931 --> 00:04:19.432
addPassenger instead of sellTicket as sellTicket is called as

68
00:04:19.432 --> 00:04:23.528
we have noticed from inside addPassenger.

69
00:04:23.528 --> 00:04:25.891
We'll make another change into the interface.

70
00:04:25.891 --> 00:04:27.752
SellTicket can now be private.

71
00:04:27.752 --> 00:04:32.348
It is called only from inside addPassenger.

72
00:04:32.348 --> 00:04:35.816
We should also do some internal changes into the Flight class.

73
00:04:35.816 --> 00:04:39.310
The int passengers field is no longer necessary.

74
00:04:39.310 --> 00:04:43.632
The number of passengers can be obtained from the passenger set.

75
00:04:43.632 --> 00:04:46.071
To clarify the intent of the getPassengers method,

76
00:04:46.071 --> 00:04:51.010
we'll rename it as getPassengersNumber, otherwise,

77
00:04:51.010 --> 00:04:54.334
it may confuse the user as now we are keeping the

78
00:04:54.334 --> 00:04:56.499
whole passenger set inside the flight.

79
00:04:56.499 --> 00:05:00.695
We also need to change this test to replace sellTicket,

80
00:05:00.695 --> 00:05:04.286
which is now private, with addPassenger,

81
00:05:04.286 --> 00:05:08.999
and there is still one new method from the interface that needs to be tested.

82
00:05:08.999 --> 00:05:11.608
It is removePassenger.

83
00:05:11.608 --> 00:05:17.135
We are building a flight from a CSV, we are increasing the number of places,

84
00:05:17.135 --> 00:05:19.646
we are inserting an additional passenger,

85
00:05:19.646 --> 00:05:22.152
and then we are removing him.

86
00:05:22.152 --> 00:05:26.796
We check to have 50 passengers and 51 places.

87
00:05:26.796 --> 00:05:33.337
We run the tests again and they are green.

88
00:05:33.337 --> 00:05:36.370
We would like to measure the code coverage again.

89
00:05:36.370 --> 00:05:42.727
We run mvn test from the command prompt.

90
00:05:42.727 --> 00:05:44.191
Into the index.html file,

91
00:05:44.191 --> 00:05:50.156
we'll be able to take a look at the code coverage and it is 100%.

92
00:05:50.156 --> 00:05:54.214
So we have made a new successful step towards the integration of our

93
00:05:54.214 --> 00:06:05.000
two components by changing their interface so that they cooperate and we have also kept the code coverage at 100%.

