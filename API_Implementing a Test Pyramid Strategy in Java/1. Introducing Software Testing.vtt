WEBVTT
1
00:00:00.000 --> 00:00:00.783
Hello.

2
00:00:00.783 --> 00:00:03.131
I'm Catalin Tudose.

3
00:00:03.131 --> 00:00:07.530
Welcome to this Implementing a Test Pyramid Strategy in Java course.

4
00:00:07.530 --> 00:00:11.839
It targets Java developers who are already proficient in writing Java Core code

5
00:00:11.839 --> 00:00:16.394
and are interested in learning how to develop safe applications and how to test

6
00:00:16.394 --> 00:00:20.802
their software at different levels from a classroom method that are developed to

7
00:00:20.802 --> 00:00:25.556
the moment when the system is operated if it complies with the requirements and

8
00:00:25.556 --> 00:00:28.746
if it is ready for usage.

9
00:00:28.746 --> 00:00:31.847
So let's get started.

10
00:00:31.847 --> 00:00:35.225
This course will show you how to build a test pyramid strategy and how to

11
00:00:35.225 --> 00:00:39.667
apply it in working with a simple Java application implementing the business

12
00:00:39.667 --> 00:00:42.892
logic for the management of flights and passengers.

13
00:00:42.892 --> 00:00:46.248
The focus will be on clearly explaining the concepts of a

14
00:00:46.248 --> 00:00:50.118
particular testing level and to apply them in practice.

15
00:00:50.118 --> 00:00:53.214
This introductory module will first review the key concepts

16
00:00:53.214 --> 00:00:56.370
starting with software testing and its purpose.

17
00:00:56.370 --> 00:00:59.152
Then we'll look at the types of testing,

18
00:00:59.152 --> 00:01:02.716
at what high-level testing and low-level testing mean,

19
00:01:02.716 --> 00:01:06.104
and manual testing, and test automation.

20
00:01:06.104 --> 00:01:09.465
We'll try to answer an important question, what to test?

21
00:01:09.465 --> 00:01:13.865
We'll see what the test pyramid is and how it looks like.

22
00:01:13.865 --> 00:01:18.436
We'll look at the tools, frameworks, and environments that are used for testing,

23
00:01:18.436 --> 00:01:21.476
and we'll meet an initially non-tested application

24
00:01:21.476 --> 00:01:26.266
that we'll start with in our journey.

25
00:01:26.266 --> 00:01:28.979
To quickly provide a definition of what software testing is,

26
00:01:28.979 --> 00:01:32.502
we'll say that testing is the practice of making objective judgements

27
00:01:32.502 --> 00:01:37.358
regarding the extent to which the system or device meets,

28
00:01:37.358 --> 00:01:41.833
exceeds, or fails to meet its stated objectives.

29
00:01:41.833 --> 00:01:44.467
Software testing has a few purposes.

30
00:01:44.467 --> 00:01:48.776
First, verifying stated objectives and requirements.

31
00:01:48.776 --> 00:01:52.128
Second uncovering situations that could negatively

32
00:01:52.128 --> 00:01:55.578
impact the customer and maintainability.

33
00:01:55.578 --> 00:01:58.188
Then, the risk mitigation.

34
00:01:58.188 --> 00:01:58.644
Consequently,

35
00:01:58.644 --> 00:02:04.980
we may say that finding bugs is in effect the side effect of testing.

36
00:02:04.980 --> 00:02:08.595
To show why testing is important and why to use it would say

37
00:02:08.595 --> 00:02:11.530
that it helps you understand the software.

38
00:02:11.530 --> 00:02:13.917
The test will make you interact with the product with

39
00:02:13.917 --> 00:02:16.549
its components and with its use cases.

40
00:02:16.549 --> 00:02:20.414
It also improves the stability of the system and helps to

41
00:02:20.414 --> 00:02:23.228
deliver software that meets expectations.

42
00:02:23.228 --> 00:02:26.269
It protects against the extremely unpleasant regressions and

43
00:02:26.269 --> 00:02:30.353
serves as a metric of the quality of the code.

44
00:02:30.353 --> 00:02:30.883
Consequently,

45
00:02:30.883 --> 00:02:34.718
testing can establish only that the software does or does

46
00:02:34.718 --> 00:02:39.932
not work under specific conditions.

47
00:02:39.932 --> 00:02:43.048
Trying to start introducing the levels of testing will say

48
00:02:43.048 --> 00:02:47.236
that unit testing is a sorter testing method by which

49
00:02:47.236 --> 00:02:49.767
individual units of source code, methods,

50
00:02:49.767 --> 00:02:53.909
or classes, are tested to determine whether they are fit for use.

51
00:02:53.909 --> 00:02:57.739
Integration testing is the phasing software testing in which individual

52
00:02:57.739 --> 00:03:01.684
software components are combined and tested as a group.

53
00:03:01.684 --> 00:03:05.397
System testing of software is testing conducting on a

54
00:03:05.397 --> 00:03:08.279
complete integrated system to overrate the system

55
00:03:08.279 --> 00:03:11.149
compliance with its specified requirements.

56
00:03:11.149 --> 00:03:11.446
Finally,

57
00:03:11.446 --> 00:03:14.641
acceptance testing is the level in the sorter testing process

58
00:03:14.641 --> 00:03:20.094
where a product is given the green light or not.

59
00:03:20.094 --> 00:03:22.007
The high-level testing is more abstract,

60
00:03:22.007 --> 00:03:25.738
it describes overall goals and systemic features.

61
00:03:25.738 --> 00:03:29.648
It is typically more concerned with the interaction with the user through

62
00:03:29.648 --> 00:03:33.617
GUI with the system as a whole or larger components of it.

63
00:03:33.617 --> 00:03:36.598
A low-level testing describes individual components,

64
00:03:36.598 --> 00:03:39.160
it provides the test rather than overview,

65
00:03:39.160 --> 00:03:42.126
rudimentary functions rather than complex over ones,

66
00:03:42.126 --> 00:03:45.489
it is typically more concerned with individual components

67
00:03:45.489 --> 00:03:49.534
within the system and how they operate.

68
00:03:49.534 --> 00:03:53.064
Manual testing is the type of software testing where testers manually

69
00:03:53.064 --> 00:03:58.307
execute test cases without using any automation tools and verify that

70
00:03:58.307 --> 00:04:01.995
the given input brings to the correct output.

71
00:04:01.995 --> 00:04:05.731
Manual testing does not require the knowledge of any automation tool,

72
00:04:05.731 --> 00:04:08.140
but it requires a lot of skills.

73
00:04:08.140 --> 00:04:12.744
It also requires a lot of time and effort to manually execute the use

74
00:04:12.744 --> 00:04:16.551
cases step by step and to verify their results.

75
00:04:16.551 --> 00:04:23.817
As 100% automation is usually not possible, manual testing becomes a must.

76
00:04:23.817 --> 00:04:28.055
As previously stated, finding bugs is a side effect of testing.

77
00:04:28.055 --> 00:04:31.136
We have just explained that manual testing is a must,

78
00:04:31.136 --> 00:04:34.994
but automated test may play back lists of predefined actions,

79
00:04:34.994 --> 00:04:36.843
compare the result to the expected behavior,

80
00:04:36.843 --> 00:04:40.327
and report the success or failure of these tests.

81
00:04:40.327 --> 00:04:43.989
Automated tests may be created, parameterized,

82
00:04:43.989 --> 00:04:47.726
and repeatedly executed more frequently and with

83
00:04:47.726 --> 00:04:52.556
considerable less effort than the manual ones.

84
00:04:52.556 --> 00:04:55.003
If you ask yourself what should be tested,

85
00:04:55.003 --> 00:04:57.367
you should include here, the business logic,

86
00:04:57.367 --> 00:05:01.415
the part of the program that enclose the real-world business rules,

87
00:05:01.415 --> 00:05:02.291
the invariants,

88
00:05:02.291 --> 00:05:06.379
an expression whose value does not change during program execution.

89
00:05:06.379 --> 00:05:07.036
For example,

90
00:05:07.036 --> 00:05:09.721
the identifier of a person should not change during

91
00:05:09.721 --> 00:05:11.813
the execution of the program.

92
00:05:11.813 --> 00:05:13.383
The unexpected conditions,

93
00:05:13.383 --> 00:05:17.106
the conditions that are not part of the normal operation of a program.

94
00:05:17.106 --> 00:05:21.045
A flight cannot change its origin once it has taken off.

95
00:05:21.045 --> 00:05:23.524
The bad input values, for example,

96
00:05:23.524 --> 00:05:27.761
things that you cannot assign a negative number of places to a flight.

97
00:05:27.761 --> 00:05:32.659
The boundary conditions, use the extremes of the input domain eg.

98
00:05:32.659 --> 00:05:35.503
maximum, minimum, inside, outside boundaries.

99
00:05:35.503 --> 00:05:39.940
That's on flights having 0 passengers or the maximum allowed passengers.

100
00:05:39.940 --> 00:05:40.689
The regressions.

101
00:05:40.689 --> 00:05:44.653
Seek to uncover new software box on an existing system

102
00:05:44.653 --> 00:05:50.515
after changes as enhancements or patches.

103
00:05:50.515 --> 00:05:52.681
We have already introduced the different levels of tests.

104
00:05:52.681 --> 00:05:57.027
They may be regarded as a pyramid maybe somehow in the fog at the beginning,

105
00:05:57.027 --> 00:05:59.090
but that will try to reveal.

106
00:05:59.090 --> 00:06:01.753
And the ground areas, the unit testing.

107
00:06:01.753 --> 00:06:05.894
This will verify each part of the software by isolating it and then

108
00:06:05.894 --> 00:06:09.728
performing test to demonstrate that it is correct in terms of form

109
00:06:09.728 --> 00:06:12.779
fitting requirements and the desired functionality.

110
00:06:12.779 --> 00:06:17.816
Integration testing takes as its input modules that have been unit tested,

111
00:06:17.816 --> 00:06:19.617
grooms them in larger aggregates,

112
00:06:19.617 --> 00:06:24.322
and applies test define in our integration test plan to those aggregates.

113
00:06:24.322 --> 00:06:27.173
System testing fall within the scope of black box testing,

114
00:06:27.173 --> 00:06:28.274
and as such,

115
00:06:28.274 --> 00:06:33.256
should require no knowledge of the inner design of the code or logic.

116
00:06:33.256 --> 00:06:35.922
Acceptance testing uses a variety of methods,

117
00:06:35.922 --> 00:06:40.179
such as prewritten scenarios and test cases to test the software and

118
00:06:40.179 --> 00:06:44.833
use the results obtained from these tools to find if the product is

119
00:06:44.833 --> 00:06:47.362
really doing what it is expected to do.

120
00:06:47.362 --> 00:06:50.393
These levels of test should not be seen only as here

121
00:06:50.393 --> 00:06:52.431
extending itself from simple to complex,

122
00:06:52.431 --> 00:06:55.741
but also as a sequence that spans the how development

123
00:06:55.741 --> 00:07:00.630
process from the early to the later stages.

124
00:07:00.630 --> 00:07:03.834
To automate a test, we need to use appropriate tools,

125
00:07:03.834 --> 00:07:06.088
frameworks, and environments.

126
00:07:06.088 --> 00:07:10.092
Overall, you will need an integrated development environment to run the tests.

127
00:07:10.092 --> 00:07:12.471
IntelliJ and Eclipse are the most popular.

128
00:07:12.471 --> 00:07:16.034
Then as unit testing framework designed for the Java programming language,

129
00:07:16.034 --> 00:07:19.039
we have JUnit, currently arrived at version 5,

130
00:07:19.039 --> 00:07:21.894
and TestNG, now at version 6.

131
00:07:21.894 --> 00:07:25.180
To create and test double or mock objects in automated unit tests,

132
00:07:25.180 --> 00:07:29.000
Mockito and PowerMock are among the most popular frameworks.

133
00:07:29.000 --> 00:07:32.648
Arquillian is a testing tool for Java EE that allows developers to

134
00:07:32.648 --> 00:07:36.855
easily create automated integration and accept on tests.

135
00:07:36.855 --> 00:07:45.000
Cucumber and JBehave are software tools running automated acceptance tests returned in a behavior-driven development style.

