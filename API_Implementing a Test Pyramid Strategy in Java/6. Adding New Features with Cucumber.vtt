WEBVTT
1
00:00:01.237 --> 00:00:04.576
Our next demonstration will show the following.

2
00:00:04.576 --> 00:00:07.814
We plan to introduce a new feature, and consequently,

3
00:00:07.814 --> 00:00:11.802
the end user will define the acceptance test for it.

4
00:00:11.802 --> 00:00:16.132
Based on the acceptance test, the programmer will build the functionality.

5
00:00:16.132 --> 00:00:24.191
Finally, we'll measure the code coverage as one quality metric for our work.

6
00:00:24.191 --> 00:00:26.609
We'll effectively introduce now a new feature.

7
00:00:26.609 --> 00:00:31.742
We are going to work TDD BDD style, meaning that we'll do the following.

8
00:00:31.742 --> 00:00:33.998
First, write the acceptance test.

9
00:00:33.998 --> 00:00:36.168
Then write a Java test.

10
00:00:36.168 --> 00:00:38.608
Then write the code that will fix the test,

11
00:00:38.608 --> 00:00:41.913
and consequently, provide the feature implementation.

12
00:00:41.913 --> 00:00:44.061
We'll introduce two types of passengers,

13
00:00:44.061 --> 00:00:50.150
user ones and VIPs, depending on their type will define the company policy.

14
00:00:50.150 --> 00:00:53.274
So we are now into the Passenger class.

15
00:00:53.274 --> 00:00:58.116
We add this VIP field, and we generate the getter and the setter.

16
00:00:58.116 --> 00:00:59.991
This is what they look like.

17
00:00:59.991 --> 00:01:07.156
We'll create a new feature file and we'll call it passengers_policy.feature.

18
00:01:07.156 --> 00:01:11.242
So the company is following a policy of adding and removing

19
00:01:11.242 --> 00:01:14.265
passengers depending on the passenger type.

20
00:01:14.265 --> 00:01:19.128
The first scenario outline is about the flight with usual passengers.

21
00:01:19.128 --> 00:01:23.224
Given there is a flight having number flightNumber and places

22
00:01:23.224 --> 00:01:26.380
places with passengers defined into file,

23
00:01:26.380 --> 00:01:28.474
when we have usual passengers,

24
00:01:28.474 --> 00:01:34.197
then you can remove them from the flight and add them to another flight.

25
00:01:34.197 --> 00:01:38.344
Of course, we'll need this examples table having those columns,

26
00:01:38.344 --> 00:01:40.571
the flightNumber, the number of places,

27
00:01:40.571 --> 00:01:42.864
and the file with the passenger description,

28
00:01:42.864 --> 00:01:47.997
and there is a scenario outline for the flight with VIP passengers.

29
00:01:47.997 --> 00:01:50.524
Given there is a flight having number, flightNumber,

30
00:01:50.524 --> 00:01:54.648
and places, places with passengers defined into a given file,

31
00:01:54.648 --> 00:02:00.426
when we have VIP passengers, then you can't remove them from the flight,

32
00:02:00.426 --> 00:02:04.127
and we do have the same examples table.

33
00:02:04.127 --> 00:02:11.537
Here, we'll have to create the Java class defining the PassengersPolicy.

34
00:02:11.537 --> 00:02:17.838
We are going to run the feature file in order to get all steps created.

35
00:02:17.838 --> 00:02:20.341
Cucumber has created those steps for us.

36
00:02:20.341 --> 00:02:23.983
We have taken the steps created by Cucumber and are

37
00:02:23.983 --> 00:02:26.324
inserting them into PassengersPolicy.

38
00:02:26.324 --> 00:02:29.484
So for this test, we'll need our flight,

39
00:02:29.484 --> 00:02:31.966
we are going to need a list of usual passengers,

40
00:02:31.966 --> 00:02:38.291
a list of VIP passengers, and anotherFlight where to move the usualPassengers.

41
00:02:38.291 --> 00:02:41.954
But how do we keep the VIP information into the csv file?

42
00:02:41.954 --> 00:02:47.158
We have added a new field, Y from yes, at the end of the corresponding row.

43
00:02:47.158 --> 00:02:52.220
The same for the second flight and the same for the third flight.

44
00:02:52.220 --> 00:02:56.354
We do not have many VIP passengers, most of them are usual ones,

45
00:02:56.354 --> 00:02:58.998
but we have to treat this particular case.

46
00:02:58.998 --> 00:03:03.179
Into the buildFlightFromCsv method from the FlightBuilderUtil file,

47
00:03:03.179 --> 00:03:07.638
we'll need to parse this last field if it exists.

48
00:03:07.638 --> 00:03:10.516
So if the passengerString array has length 4,

49
00:03:10.516 --> 00:03:13.471
meaning there is also the Y parameter,

50
00:03:13.471 --> 00:03:17.886
we would have to take that passenger and set the VIP property to true.

51
00:03:17.886 --> 00:03:20.717
Otherwise, the logic of the method remains the same.

52
00:03:20.717 --> 00:03:24.723
We go back to the PassengersPolicy class and we insert

53
00:03:24.723 --> 00:03:27.308
the testing logic for each method.

54
00:03:27.308 --> 00:03:30.275
As previous done for our convenience and for clarity,

55
00:03:30.275 --> 00:03:32.894
we'll replace the names of the parameters.

56
00:03:32.894 --> 00:03:37.111
So given there is a flight having number flightNumber and places,

57
00:03:37.111 --> 00:03:40.967
places with passengers defined into some given file name.

58
00:03:40.967 --> 00:03:45.632
When we have usual passengers and here we are browsing the

59
00:03:45.632 --> 00:03:49.455
flight PassengersSet and we are adding only the usual ones

60
00:03:49.455 --> 00:03:50.962
to the corresponding list,

61
00:03:50.962 --> 00:03:55.102
then you can remove them from the flight and we are checking here that the

62
00:03:55.102 --> 00:04:00.840
flight.removePassenger method returns the true value and we can add them to

63
00:04:00.840 --> 00:04:04.467
another flight and are browsing the list of usual passengers and we are checking

64
00:04:04.467 --> 00:04:08.334
that we are able to add them to another flight.

65
00:04:08.334 --> 00:04:15.209
Let's run the Cucumber test now and it succeeds for the usual passengers.

66
00:04:15.209 --> 00:04:18.928
This means that our present business logic already covers the newly

67
00:04:18.928 --> 00:04:23.068
defined PassengersPolicy for usualPassengers.

68
00:04:23.068 --> 00:04:26.568
Let's generate the missing steps for the VIP passengers.

69
00:04:26.568 --> 00:04:31.134
Cucumber has generated for us the two missing steps and we

70
00:04:31.134 --> 00:04:34.133
add them here to the PassengersPolicy.

71
00:04:34.133 --> 00:04:36.909
We read them and they're implementing the testing logic.

72
00:04:36.909 --> 00:04:41.565
When we have VIP passengers and we are adding here to the VIP

73
00:04:41.565 --> 00:04:43.821
passenger list only the VIP passengers,

74
00:04:43.821 --> 00:04:47.942
then you cannot remove them from the flight and we are

75
00:04:47.942 --> 00:04:51.211
browsing the VIP passengers list and we are checking that we

76
00:04:51.211 --> 00:04:53.001
cannot remove them from the flight.

77
00:04:53.001 --> 00:04:56.959
Let's run Cucumber test.

78
00:04:56.959 --> 00:04:59.987
And this one is failing and exactly for this reason.

79
00:04:59.987 --> 00:05:02.714
We check that we cannot remove VIP passengers from

80
00:05:02.714 --> 00:05:04.744
the flight and this is not true.

81
00:05:04.744 --> 00:05:09.274
This means that our existing business logic is not yet covering this case.

82
00:05:09.274 --> 00:05:13.526
As we were saying, we are working TDD BDD style.

83
00:05:13.526 --> 00:05:17.421
We have written the acceptance tests, we have written the tests in Java,

84
00:05:17.421 --> 00:05:20.194
and then we have checked their functionality.

85
00:05:20.194 --> 00:05:23.650
Now that we have found out that one test is failing,

86
00:05:23.650 --> 00:05:29.102
we are going to write the smallest piece of code that will fix the test

87
00:05:29.102 --> 00:05:32.052
and this is to be found here into removePassenger.

88
00:05:32.052 --> 00:05:34.447
We need to check one more condition.

89
00:05:34.447 --> 00:05:39.054
If the passenger is VIP, removePassenger will return false.

90
00:05:39.054 --> 00:05:42.242
Let's run Cucumber test again.

91
00:05:42.242 --> 00:05:42.900
Great.

92
00:05:42.900 --> 00:05:44.216
It succeeds.

93
00:05:44.216 --> 00:05:48.592
So we have successfully introduced the new PassengersPolicy by working

94
00:05:48.592 --> 00:05:52.875
TDD BDD style with the help of acceptance tests.

95
00:05:52.875 --> 00:05:54.694
There is still one thing to do,

96
00:05:54.694 --> 00:05:59.700
check the code coverage to understand where we are.

97
00:05:59.700 --> 00:06:00.513
Great.

98
00:06:00.513 --> 00:06:06.326
Our code coverage remains at 100%.

99
00:06:06.326 --> 00:06:09.665
This module has focused on introducing acceptance testing

100
00:06:09.665 --> 00:06:12.532
and demonstrating it for our project.

101
00:06:12.532 --> 00:06:16.628
Acceptance testing is the last level of the pyramid before a

102
00:06:16.628 --> 00:06:20.865
product can be considered as ready for the delivery to the end

103
00:06:20.865 --> 00:06:23.777
user so it brings us right to the target.

104
00:06:23.777 --> 00:06:28.020
In order to do this, the focus has been on adding business value,

105
00:06:28.020 --> 00:06:32.704
and besides doing the things right, doing the right thing.

106
00:06:32.704 --> 00:06:35.917
We had an overview of the communication within a project

107
00:06:35.917 --> 00:06:39.268
demonstrating how things happen in real life and how

108
00:06:39.268 --> 00:06:41.940
important a common understanding is.

109
00:06:41.940 --> 00:06:45.357
We have introduced and demonstrated the functionality of Cucumber,

110
00:06:45.357 --> 00:06:47.079
an acceptance testing framework,

111
00:06:47.079 --> 00:06:51.497
and shown how to build the scenarios that check the real business needs.

112
00:06:51.497 --> 00:06:55.191
We have checked existing functionality from the acceptance point of view,

113
00:06:55.191 --> 00:06:59.241
we have refined the way acceptance tests are written understanding the

114
00:06:59.241 --> 00:07:02.964
Cucumber capabilities at the more detailed level,

115
00:07:02.964 --> 00:07:06.927
and introducing new functionality by starting from the acceptance

116
00:07:06.927 --> 00:07:10.373
test and then moving to the implementation.

117
00:07:10.373 --> 00:07:19.000
We may conclude that our demonstration is really following the way a real project is developed.

