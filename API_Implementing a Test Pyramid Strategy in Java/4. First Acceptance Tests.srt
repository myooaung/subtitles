1
00:00:02,074 --> 00:00:06,616
Our demonstration will focus on introducing Cucumber into our project.

2
00:00:06,616 --> 00:00:11,467
We show how to install and configure Cucumber in order to be used into the

3
00:00:11,467 --> 00:00:14,715
flights management application from the IntelliJ ID.

4
00:00:14,715 --> 00:00:18,753
We'll then write our first acceptance tests based on

5
00:00:18,753 --> 00:00:22,794
the already existing functionality.

6
00:00:22,794 --> 00:00:25,833
It is time now to effectively start using Cucumber in our

7
00:00:25,833 --> 00:00:28,188
project in order to automate the tests.

8
00:00:28,188 --> 00:00:32,389
We'll show how to introduce it through Maven and make it

9
00:00:32,389 --> 00:00:36,282
work integration with IntelliJ and JUnit5.

10
00:00:36,282 --> 00:00:39,935
Let's focus now on the installation and configuration.

11
00:00:39,935 --> 00:00:41,991
In order to start working with Cucumber,

12
00:00:41,991 --> 00:00:45,211
there are additional dependencies that are needed at

13
00:00:45,211 --> 00:00:48,261
the level of the Maven pom.xml.

14
00:00:48,261 --> 00:00:53,208
These ones are Cucumber-Java and Cucumber-JUnit.

15
00:00:53,208 --> 00:00:57,359
We'll ask IntelliJ to import the changes.

16
00:00:57,359 --> 00:01:04,501
We'll create a features folder where all our features will reside.

17
00:01:04,501 --> 00:01:09,413
They are to be found in the test resources features folder.

18
00:01:09,413 --> 00:01:17,679
We'll create our first feature here and we'll call it bonus_policy.feature.

19
00:01:17,679 --> 00:01:19,973
We'll follow the Gherkin syntax,

20
00:01:19,973 --> 00:01:23,643
and we'll introduce this feature named Bonus Policy together with

21
00:01:23,643 --> 00:01:27,677
a short description of what it intends to do.

22
00:01:27,677 --> 00:01:32,927
Then we follow the same Gherkin syntax and write the first scenario.

23
00:01:32,927 --> 00:01:38,249
We'll name this scenario Passenger bonus policy according to the business needs.

24
00:01:38,249 --> 00:01:43,041
Given we have three flights, these are the three flights that we know about.

25
00:01:43,041 --> 00:01:46,460
When the passengers travel according to the recorded data,

26
00:01:46,460 --> 00:01:51,764
then the bonus points are awarding according to the policy.

27
00:01:51,764 --> 00:01:58,921
We see the keywords feature scenario given, when, then that are highlighted.

28
00:01:58,921 --> 00:02:02,484
If we right-click on this feature file,

29
00:02:02,484 --> 00:02:05,844
we see that we have the possibility to run it directly.

30
00:02:05,844 --> 00:02:11,362
This is possible only if the appropriate plugins are activated.

31
00:02:11,362 --> 00:02:15,481
In order to do this, we go to File, Settings,

32
00:02:15,481 --> 00:02:22,566
Plugins, and we see here that Cucumber for Java and Gherkin are checked.

33
00:02:22,566 --> 00:02:24,642
So we have run the feature.

34
00:02:24,642 --> 00:02:27,593
The console shows a few important messages.

35
00:02:27,593 --> 00:02:30,046
Our steps are still undefined.

36
00:02:30,046 --> 00:02:34,264
We have one undefined scenario with three undefined steps.

37
00:02:34,264 --> 00:02:39,639
We are provided the Java methods _____ that can implement the missing steps.

38
00:02:39,639 --> 00:02:44,918
We'll ask IntelliJ to create the step definitions directly into some Java file.

39
00:02:44,918 --> 00:02:47,640
By pressing Alt+Enter into the file,

40
00:02:47,640 --> 00:02:53,689
IntelliJ has provided us this manual and it is helping us creating this file.

41
00:02:53,689 --> 00:02:57,109
We have added the first step definition.

42
00:02:57,109 --> 00:03:02,044
From the feature file, we can choose to Create all steps definition.

43
00:03:02,044 --> 00:03:06,733
Of course, we'll direct them into the already existing file.

44
00:03:06,733 --> 00:03:11,948
Now we have a skeleton of the scenario that may follow the given,

45
00:03:11,948 --> 00:03:13,801
when, then steps.

46
00:03:13,801 --> 00:03:18,467
In order to run our Cucumber test, we'll need a special class.

47
00:03:18,467 --> 00:03:22,937
Now, if we run this Cucumber test,

48
00:03:22,937 --> 00:03:27,553
we see that it is able to identify the features and try to run them.

49
00:03:27,553 --> 00:03:30,716
Let's have a closer look at the content of Cucumber test.

50
00:03:30,716 --> 00:03:35,448
It is the entry point for running the Cucumber test in JUnit.

51
00:03:35,448 --> 00:03:37,152
It must be empty.

52
00:03:37,152 --> 00:03:43,025
Step definitions should be in separate classes as this class has the RunWith

53
00:03:43,025 --> 00:03:48,467
Cucumber.class annotation executing it as any JUnit test class will run all

54
00:03:48,467 --> 00:03:52,082
features found on the classpaths in the same package.

55
00:03:52,082 --> 00:03:55,764
The name of the class could be anything.

56
00:03:55,764 --> 00:03:58,976
We have just chosen CucumberTest.

57
00:03:58,976 --> 00:04:01,445
We see that we have provided some pretty generic steps,

58
00:04:01,445 --> 00:04:03,502
given we have three flights,

59
00:04:03,502 --> 00:04:08,321
when the passengers travel according to the recorded data,

60
00:04:08,321 --> 00:04:12,489
then the bonus points are awarded according to the policy.

61
00:04:12,489 --> 00:04:14,926
It is our first acceptance test.

62
00:04:14,926 --> 00:04:18,007
We are discovering the Cucumber features and we may presume that

63
00:04:18,007 --> 00:04:22,370
the business analysts are not so experienced at the beginning to

64
00:04:22,370 --> 00:04:24,617
provide more than these generic steps,

65
00:04:24,617 --> 00:04:29,070
but based on our previous experience and our previously defined tests,

66
00:04:29,070 --> 00:04:31,935
we are able to translate them into code.

67
00:04:31,935 --> 00:04:35,546
We'll no longer use Arquillian because of its current

68
00:04:35,546 --> 00:04:38,212
limitations by report to JUnit5,

69
00:04:38,212 --> 00:04:41,627
but we'll be able to manage the objects ourselves.

70
00:04:41,627 --> 00:04:48,620
So we have as private variables, these three flights and the distancesManager.

71
00:04:48,620 --> 00:04:53,989
Given we have 3 flights and we initialize here flight1,

72
00:04:53,989 --> 00:04:59,797
flight2, and flight3 just the way we have done it into the previous tests.

73
00:04:59,797 --> 00:05:03,380
When the passengers travel according to the recorded data,

74
00:05:03,380 --> 00:05:06,269
we initialize here the distancesManager,

75
00:05:06,269 --> 00:05:09,840
we browse the passengers from each flight,

76
00:05:09,840 --> 00:05:13,379
and we add the distances to the distancesManager.

77
00:05:13,379 --> 00:05:16,626
Then we are calculating the given points.

78
00:05:16,626 --> 00:05:21,039
Then the bonus points are awarded according to the policy.

79
00:05:21,039 --> 00:05:25,890
The code for this method will simply check that the expected

80
00:05:25,890 --> 00:05:29,749
values are equal to the calculated ones.

81
00:05:29,749 --> 00:05:31,980
We are practically mapping the previously existing

82
00:05:31,980 --> 00:05:35,538
tests on an acceptance test structure.

83
00:05:35,538 --> 00:05:39,792
If we run the CucumberTest again,

84
00:05:39,792 --> 00:05:45,512
we may see that it is green and that we are following the already defined steps.

85
00:05:45,512 --> 00:05:49,609
Which test of this kind to keep the ones that are running the container with

86
00:05:49,609 --> 00:05:53,283
Arquillian or the acceptance test that we have just shown.

87
00:05:53,283 --> 00:05:56,188
The answer depends on which your target is.

88
00:05:56,188 --> 00:06:00,688
The previous version of JUnit version 4 had the good integration

89
00:06:00,688 --> 00:06:03,983
with Arquillian so one could write tests was JUnit,

90
00:06:03,983 --> 00:06:06,022
Arquillian, and Cucumber.

91
00:06:06,022 --> 00:06:10,466
We hope to have soon the integration between Arquillian and JUnit5,

92
00:06:10,466 --> 00:06:11,581
and until then,

93
00:06:11,581 --> 00:06:20,000
we'll not mind to keep both tests into our demonstration despite some overlapping.

