1
00:00:01,057 --> 00:00:03,272
We'll move to our next demonstration.

2
00:00:03,272 --> 00:00:07,208
At the time, the provider has offered some partial implementation.

3
00:00:07,208 --> 00:00:11,845
So we'll replace the previously mocked behavior with the real one and

4
00:00:11,845 --> 00:00:17,855
we'll continue to mock the not yet implemented behavior.

5
00:00:17,855 --> 00:00:20,742
Let's see now what we have from the side of the provider.

6
00:00:20,742 --> 00:00:23,974
We have received this DistancesManager class that

7
00:00:23,974 --> 00:00:27,600
provides not only the agreed interface, but also,

8
00:00:27,600 --> 00:00:29,371
some partial implementation.

9
00:00:29,371 --> 00:00:32,735
We see that we have three implemented methods,

10
00:00:32,735 --> 00:00:36,966
getPassengersDistancesMap, getPassengersPointsMap,

11
00:00:36,966 --> 00:00:39,358
and calculateGivenPoints.

12
00:00:39,358 --> 00:00:43,649
And there is still one unimplemented method, addDistance.

13
00:00:43,649 --> 00:00:47,653
Internally, we are maintaining these private fields,

14
00:00:47,653 --> 00:00:49,636
Distance_Factor, initialize with 10,

15
00:00:49,636 --> 00:00:53,311
passengersDistancesMap and passengersPointsMap both

16
00:00:53,311 --> 00:00:55,190
initialized as empty HashMaps.

17
00:00:55,190 --> 00:00:59,061
We see that that calculus of bonus points based on the

18
00:00:59,061 --> 00:01:02,055
covered distances is already done.

19
00:01:02,055 --> 00:01:03,086
You may ask,

20
00:01:03,086 --> 00:01:07,359
is this a realistic situation when you get a partially implemented class.

21
00:01:07,359 --> 00:01:10,950
I may say that you would rather get a partially implemented API.

22
00:01:10,950 --> 00:01:13,872
You'll receive some fully implemented packages or classes while

23
00:01:13,872 --> 00:01:16,192
some other part is still under construction,

24
00:01:16,192 --> 00:01:19,207
but it follows the agreed contract.

25
00:01:19,207 --> 00:01:20,383
For an easy understanding,

26
00:01:20,383 --> 00:01:24,742
I have reduced our situation here to a simple class with four methods

27
00:01:24,742 --> 00:01:28,153
from which only one does not have an implementation.

28
00:01:28,153 --> 00:01:31,396
What is really important is that the API contract is

29
00:01:31,396 --> 00:01:36,013
respected and that we do have an addDistance of Passenger

30
00:01:36,013 --> 00:01:38,668
passenger and int distance method,

31
00:01:38,668 --> 00:01:43,734
even a dummy one that works with the classes from the consumer side,

32
00:01:43,734 --> 00:01:46,239
passenger in our case.

33
00:01:46,239 --> 00:01:49,065
How will this change our tests on the consumer side?

34
00:01:49,065 --> 00:01:53,144
As we know how to get the bonus based on the distance,

35
00:01:53,144 --> 00:01:56,522
we'll no longer keep this passengerPointsMap,

36
00:01:56,522 --> 00:01:59,226
but a passengersDistancesMap.

37
00:01:59,226 --> 00:02:03,879
Here, we are keeping the distances that have been traveled by the passengers.

38
00:02:03,879 --> 00:02:08,243
The bonus points will be calculated based on these distances.

39
00:02:08,243 --> 00:02:11,138
Here into the testFlightsDistances method,

40
00:02:11,138 --> 00:02:13,986
we'll no longer mock the behavior of the getPassengersPointsMap,

41
00:02:13,986 --> 00:02:19,902
but mock the behavior of getPassengersDistancesMap method.

42
00:02:19,902 --> 00:02:24,337
And then we call distancesManager.calculateGivenPoints.

43
00:02:24,337 --> 00:02:27,851
We have seen that calculateGivenPoints is already implemented,

44
00:02:27,851 --> 00:02:32,491
so we'll provide only its input, passengersDistancesMap,

45
00:02:32,491 --> 00:02:35,850
based on which we are expecting to have a correct

46
00:02:35,850 --> 00:02:38,912
calculus of PassengerPointsMap.

47
00:02:38,912 --> 00:02:45,736
We run the test and the modified testFlightDistances is

48
00:02:45,736 --> 00:02:48,999
failing with a null pointer exception.

49
00:02:48,999 --> 00:02:49,533
Why?

50
00:02:49,533 --> 00:02:50,815
What may be wrong?

51
00:02:50,815 --> 00:02:56,406
The fact is that we are mocking the whole DistancesManager object.

52
00:02:56,406 --> 00:02:59,496
We have instructed Mockito only about the behavior of

53
00:02:59,496 --> 00:03:01,375
the getPassengersDistancesMap method.

54
00:03:01,375 --> 00:03:06,361
How to tell that we would like to keep the functionality of the other methods?

55
00:03:06,361 --> 00:03:07,339
This is simple.

56
00:03:07,339 --> 00:03:11,677
Replace the mock annotation with this Spy one.

57
00:03:11,677 --> 00:03:15,537
So when needed, you can create spies of real objects.

58
00:03:15,537 --> 00:03:17,136
When we use the spy,

59
00:03:17,136 --> 00:03:20,763
then the real methods are called unless a method was stopped.

60
00:03:20,763 --> 00:03:26,339
This is all to have done for the getPassengersDistancesMap method.

61
00:03:26,339 --> 00:03:35,196
Let's run the test again and now the test succeeds.

62
00:03:35,196 --> 00:03:38,199
Just understand that we have arrived.

63
00:03:38,199 --> 00:03:42,238
Let's run the whole suite with code coverage.

64
00:03:42,238 --> 00:03:45,459
The code coverage is 100% at the level of the classes,

65
00:03:45,459 --> 00:03:48,797
but only 94% at the level of the methods.

66
00:03:48,797 --> 00:03:50,946
If we have a look here,

67
00:03:50,946 --> 00:03:54,883
we see that this is mainly due to the DistancesManager class.

68
00:03:54,883 --> 00:03:57,402
As we have mocked the implementation of some method,

69
00:03:57,402 --> 00:04:08,000
only three of the four ones are really tested. We'll fix this when the full implementation of the provider will be available.

