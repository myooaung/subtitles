1
00:00:01,194 --> 00:00:06,121
We'll now go further to the additional business logic that is required.

2
00:00:06,121 --> 00:00:10,218
We'll work both at the level of the passenger and of the Flight class.

3
00:00:10,218 --> 00:00:10,875
For the passengers,

4
00:00:10,875 --> 00:00:15,711
we would like to change the identifier format for non-US passengers.

5
00:00:15,711 --> 00:00:18,756
For flights would like to better manage their statuses to

6
00:00:18,756 --> 00:00:25,971
reflect more than is flying or is not flying.

7
00:00:25,971 --> 00:00:28,794
The company has decided to separate the formats of

8
00:00:28,794 --> 00:00:32,114
identifiers for US and non-US passengers.

9
00:00:32,114 --> 00:00:35,489
The real SSN exists only for USA.

10
00:00:35,489 --> 00:00:39,780
We may use an internal similar identifier for non-US passengers and

11
00:00:39,780 --> 00:00:43,213
be sure that the country code will be different,

12
00:00:43,213 --> 00:00:47,228
but better to avoid any possibility of overlapping.

13
00:00:47,228 --> 00:00:54,575
So we may assign the not use interval between 900 and 999 for the first

14
00:00:54,575 --> 00:00:59,851
3 digits of the identifiers of non-US passengers.

15
00:00:59,851 --> 00:01:05,827
We write this new test and we create this non-US passenger with some identifiers

16
00:01:05,827 --> 00:01:11,161
starting with 900 and we extend this test invalid SSN test.

17
00:01:11,161 --> 00:01:14,518
We must make sure that identifier starting with 900 are

18
00:01:14,518 --> 00:01:17,271
still not allowed for US citizens.

19
00:01:17,271 --> 00:01:23,015
We run the test and they are failing as the

20
00:01:23,015 --> 00:01:26,727
business logic is not yet implemented.

21
00:01:26,727 --> 00:01:30,609
We are introducing this non-US identifier regex.

22
00:01:30,609 --> 00:01:34,407
The SSN for the US passengers remains the same and we are having

23
00:01:34,407 --> 00:01:40,477
the identifier allowing first digits between 900 and 999 for

24
00:01:40,477 --> 00:01:44,911
non-US passengers with regular construction of the pattern

25
00:01:44,911 --> 00:01:47,809
depending on the country code.

26
00:01:47,809 --> 00:01:53,052
We run the tests and they are green.

27
00:01:53,052 --> 00:01:57,420
So we have successfully implemented this new business logic.

28
00:01:57,420 --> 00:02:00,257
We would like to measure the code coverage again.

29
00:02:00,257 --> 00:02:08,273
We run mvn test from the command prompt.

30
00:02:08,273 --> 00:02:09,960
Into the index.html file,

31
00:02:09,960 --> 00:02:16,056
we'll be able to take a look at the code coverage at the level of the package,

32
00:02:16,056 --> 00:02:17,868
at the level of the classes,

33
00:02:17,868 --> 00:02:22,650
and at the level of individual constructors and methods.

34
00:02:22,650 --> 00:02:26,083
We see that there are still a few things not yet covered.

35
00:02:26,083 --> 00:02:31,102
We change this testing valid country code to use a non-US passenger

36
00:02:31,102 --> 00:02:36,478
identifier and we'll try to measure the code coverage again.

37
00:02:36,478 --> 00:02:42,130
We run mvn test from the command prompt.

38
00:02:42,130 --> 00:02:45,752
We go back to index.html, open it into a browser,

39
00:02:45,752 --> 00:02:49,824
and we see that the code coverage is now 100%.

40
00:02:49,824 --> 00:02:54,796
The company would like to better manage the status of a flight.

41
00:02:54,796 --> 00:02:58,950
Just saying flying may not be enough as the flight is not

42
00:02:58,950 --> 00:03:02,346
flying before taking off and after landing.

43
00:03:02,346 --> 00:03:08,020
So we introduced this new takenOff and landed statuses and they

44
00:03:08,020 --> 00:03:11,384
are initialized as false into the constructor.

45
00:03:11,384 --> 00:03:17,203
The setOrigin method will check now the takenOff flag instead of flying.

46
00:03:17,203 --> 00:03:21,820
We are also introducing some getters on the newly added fields.

47
00:03:21,820 --> 00:03:30,304
We are changing the testChangeOrigin and testLand tests so that they

48
00:03:30,304 --> 00:03:36,417
reflect the new takenOff and landed conditions.

49
00:03:36,417 --> 00:03:40,628
Let's run the tests again.

50
00:03:40,628 --> 00:03:45,095
The tests are failing as the business logic is not yet implemented.

51
00:03:45,095 --> 00:03:47,945
Let's add this business logic into the Flight class,

52
00:03:47,945 --> 00:03:51,672
into the methods, takeoff and landed.

53
00:03:51,672 --> 00:03:58,191
We run the test again and the tests are green.

54
00:03:58,191 --> 00:04:01,424
We would like to measure the code coverage again and

55
00:04:01,424 --> 00:04:07,421
run mvn test from the command prompt.

56
00:04:07,421 --> 00:04:08,896
Into the index.html file,

57
00:04:08,896 --> 00:04:14,906
we'll be able to take a look at the code coverage and now it is 100%.

58
00:04:14,906 --> 00:04:20,404
And one more thing to be added to the business logic,

59
00:04:20,404 --> 00:04:24,583
once landed, a flight cannot change its destination any longer.

60
00:04:24,583 --> 00:04:27,865
We write this testChangeDestination test.

61
00:04:27,865 --> 00:04:31,329
We have a flight from London to Bucharest,

62
00:04:31,329 --> 00:04:36,208
it takes off and it lands, and once landed,

63
00:04:36,208 --> 00:04:38,018
we try to change its destination.

64
00:04:38,018 --> 00:04:42,944
We should expect an exception as this thing is not permitted.

65
00:04:42,944 --> 00:04:48,784
We run the tests and they are failing as the

66
00:04:48,784 --> 00:04:52,197
business logic is not yet implemented.

67
00:04:52,197 --> 00:04:55,641
We have to do this into the setDestination method.

68
00:04:55,641 --> 00:04:58,987
If a flight has landed and we try to change its destination,

69
00:04:58,987 --> 00:05:01,773
an exception must be thrown.

70
00:05:01,773 --> 00:05:07,549
We run the tests again and they are green.

71
00:05:07,549 --> 00:05:11,413
We have successfully implemented this business logic.

72
00:05:11,413 --> 00:05:16,047
We would like to measure the code coverage again and we

73
00:05:16,047 --> 00:05:23,349
run mvn test from the command prompt.

74
00:05:23,349 --> 00:05:25,012
Into the index.html file,

75
00:05:25,012 --> 00:05:35,355
we'll be able to take a look at the code coverage and it is 100%.

76
00:05:35,355 --> 00:05:39,029
This module has started by reviewing the unit testing

77
00:05:39,029 --> 00:05:42,532
benefits included here writing safer code,

78
00:05:42,532 --> 00:05:46,318
finding bugs early, quickly isolating the incorrect code,

79
00:05:46,318 --> 00:05:50,300
introducing new functionality without affecting the existing one,

80
00:05:50,300 --> 00:05:52,373
documenting the application.

81
00:05:52,373 --> 00:05:56,377
We have discussed the code coverage as a metric of the quality of tests.

82
00:05:56,377 --> 00:06:01,483
Then we have started to move the application to unit testing with JUnit5.

83
00:06:01,483 --> 00:06:06,270
Included here, passengers, identifiers, and country code restrictions,

84
00:06:06,270 --> 00:06:09,609
flights numbers restrictions, bad input values,

85
00:06:09,609 --> 00:06:12,928
boundary conditions as when we have tried to sell one

86
00:06:12,928 --> 00:06:15,117
more ticket than the available places.

87
00:06:15,117 --> 00:06:18,910
We have added new features that were unit tested.

88
00:06:18,910 --> 00:06:23,040
We have separated the identifier pattern for US and non-US

89
00:06:23,040 --> 00:06:27,456
passengers and we have provided better management of the flights to

90
00:06:27,456 --> 00:06:31,235
follow here the taken off and landing statuses.

91
00:06:31,235 --> 00:06:35,674
Overall, we have followed the TTD approach by writing first the test,

92
00:06:35,674 --> 00:06:38,907
then the code that fixes the test.

93
00:06:38,907 --> 00:06:41,118
We must be satisfied by our unit testing work.

94
00:06:41,118 --> 00:06:45,947
We have enabled to fix a lot of missing things and to add and validate new

95
00:06:45,947 --> 00:06:49,134
functionality having as a result 100% code coverage.

96
00:06:49,134 --> 00:06:59,000
The next level of the pyramid, the integration testing is waiting for us, see you in the next module.

