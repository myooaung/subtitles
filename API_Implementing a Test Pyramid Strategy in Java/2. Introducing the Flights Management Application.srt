1
00:00:00,995 --> 00:00:03,705
We'll move now to the practical demonstration.

2
00:00:03,705 --> 00:00:08,464
We'll start with the flights management application having no tests at all.

3
00:00:08,464 --> 00:00:15,686
We understand its business logic and will present the classes that compose it.

4
00:00:15,686 --> 00:00:19,349
Let's have a look at the initial application as it looks like.

5
00:00:19,349 --> 00:00:23,139
It is composed of two classes, Passenger and Flight.

6
00:00:23,139 --> 00:00:27,689
A passenger is described by an identifier, a name, and a country code.

7
00:00:27,689 --> 00:00:31,621
The identifier kept inside the company is following the same

8
00:00:31,621 --> 00:00:34,709
format as the SSN in the United States.

9
00:00:34,709 --> 00:00:37,547
We have a constructor with all the three parameters,

10
00:00:37,547 --> 00:00:39,737
getters, and setters,

11
00:00:39,737 --> 00:00:42,879
plus ToString and the method simulating the recording of

12
00:00:42,879 --> 00:00:45,525
a passenger to the company system.

13
00:00:45,525 --> 00:00:47,562
A flight is described by a flight number,

14
00:00:47,562 --> 00:00:49,774
the number of places, the number of passengers,

15
00:00:49,774 --> 00:00:53,896
its origin and destination, and the flying state.

16
00:00:53,896 --> 00:00:56,153
The constructor is receiving only the flightNumber and

17
00:00:56,153 --> 00:01:00,052
the number of places initializing the passengers with 0

18
00:01:00,052 --> 00:01:01,684
and the flying state as false.

19
00:01:01,684 --> 00:01:05,354
Plus ToString and meta simulating the sell of a ticket,

20
00:01:05,354 --> 00:01:07,185
the takeOff, and the landing.

21
00:01:07,185 --> 00:01:09,008
In order to better understand the business logic,

22
00:01:09,008 --> 00:01:14,438
we'll use the API of our two classes through this newly introduced main class.

23
00:01:14,438 --> 00:01:17,988
We create the passenger and the record into the

24
00:01:17,988 --> 00:01:23,491
system and we follow the behavior.

25
00:01:23,491 --> 00:01:25,799
We create the flight, set its origin and destination,

26
00:01:25,799 --> 00:01:31,352
sell a ticket for it, make it takeoff and land,

27
00:01:31,352 --> 00:01:34,846
and we follow the behavior.

28
00:01:34,846 --> 00:01:37,487
I think that the simple class's structure and the business

29
00:01:37,487 --> 00:01:39,572
logic have been now clearly exposed.

30
00:01:39,572 --> 00:01:42,222
We'll make the step to the first level of our pyramid by

31
00:01:42,222 --> 00:01:45,638
introducing the unit test making our classes working in

32
00:01:45,638 --> 00:01:48,377
isolation and verifying their functionality.

33
00:01:48,377 --> 00:01:53,000
This is the topic of the next module. See you there.

