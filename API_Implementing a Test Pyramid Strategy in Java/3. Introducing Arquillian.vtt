WEBVTT
1
00:00:01.344 --> 00:00:04.499
This demonstration will introduce Arquillian,

2
00:00:04.499 --> 00:00:08.349
a testing framework for Java that leverages JUnit to execute

3
00:00:08.349 --> 00:00:12.131
the test cases against the Java container.

4
00:00:12.131 --> 00:00:15.769
The Arquillian framework is broken up into three major sections,

5
00:00:15.769 --> 00:00:20.132
test runners, JUnit in our case, containers,

6
00:00:20.132 --> 00:00:23.495
wield, open web base, Tomcat, GlassFish,

7
00:00:23.495 --> 00:00:26.504
and so on, and test enrichers,

8
00:00:26.504 --> 00:00:31.609
integration of your test case into the container that your code is running in.

9
00:00:31.609 --> 00:00:35.721
ShrinkWrap is an external dependency to be used with Arquillian.

10
00:00:35.721 --> 00:00:39.215
ShrinkWrap helps us define the deployments and the descriptors to be

11
00:00:39.215 --> 00:00:45.289
loaded to the Java container we are testing against.

12
00:00:45.289 --> 00:00:49.834
As testing framework that executes test cases against the java container,

13
00:00:49.834 --> 00:00:54.176
Arquillian usage requires some understanding of more advanced

14
00:00:54.176 --> 00:00:57.586
notions related to Java Enterprise edition.

15
00:00:57.586 --> 00:00:59.625
As it is widely spread for integration testing,

16
00:00:59.625 --> 00:01:03.794
we have decided to use it for our application and we'll try

17
00:01:03.794 --> 00:01:07.740
to explain the most important ideas so that you can quickly

18
00:01:07.740 --> 00:01:09.912
adopt it within your projects.

19
00:01:09.912 --> 00:01:13.363
Arquillian can be considered a standardized testing framework

20
00:01:13.363 --> 00:01:16.193
for Java Enterprise edition applications.

21
00:01:16.193 --> 00:01:19.838
It abstracts the container or application startup logic away

22
00:01:19.838 --> 00:01:23.806
from the unit tests and instead drives a deployment runtime

23
00:01:23.806 --> 00:01:26.147
paradigm with the application.

24
00:01:26.147 --> 00:01:30.874
It allows to deploy the program to a Java Enterprise edition application server.

25
00:01:30.874 --> 00:01:34.402
Arquillian allows to deploy the application to the

26
00:01:34.402 --> 00:01:37.043
targeted runtime to execute best cases.

27
00:01:37.043 --> 00:01:42.059
The targeted runtime can be an application server embedded or managed.

28
00:01:42.059 --> 00:01:44.195
Starting our journey to adopt Arquillian,

29
00:01:44.195 --> 00:01:49.249
we'll first add the Java Enterprise edition 7 API to the class path,

30
00:01:49.249 --> 00:01:54.679
and we're asking IntelliJ to import the changes.

31
00:01:54.679 --> 00:01:59.991
Then we insert into POM XML, the Arquillian API dependency,

32
00:01:59.991 --> 00:02:05.419
and we'll lead the ID to import the changes.

33
00:02:05.419 --> 00:02:07.872
We add the Arquillian JUnit integration dependency,

34
00:02:07.872 --> 00:02:11.730
and we import the changes,

35
00:02:11.730 --> 00:02:16.565
and we'll also need to add a container adapter to the list of

36
00:02:16.565 --> 00:02:18.566
dependencies and to import the changes.

37
00:02:18.566 --> 00:02:21.842
We have to mention that, at least for the moment,

38
00:02:21.842 --> 00:02:24.229
Arquillian has some limitation.

39
00:02:24.229 --> 00:02:29.926
As you are recording this course, it is not yet integrated with JUnit5.

40
00:02:29.926 --> 00:02:32.611
So we'll have to use the JUnit for dependencies and annotations

41
00:02:32.611 --> 00:02:36.922
to run our tests and to import the changes.

42
00:02:36.922 --> 00:02:41.091
We are now ready to write our first effective Arquillian test.

43
00:02:41.091 --> 00:02:48.613
An Arquillian test looks just like a unit test, but with some extra additions.

44
00:02:48.613 --> 00:02:52.391
We have named our test FlightWithPassengersTest in order to

45
00:02:52.391 --> 00:02:55.797
show the integration between the two classes.

46
00:02:55.797 --> 00:03:01.255
Now about the extra additions, an Arquillian test case must have three things,

47
00:03:01.255 --> 00:03:05.935
a runWith Arquillian.class annotation on the class,

48
00:03:05.935 --> 00:03:09.483
a public static method annotated with deployment

49
00:03:09.483 --> 00:03:15.971
that returns a ShrinkWrap archive, and at least one method annotated with test.

50
00:03:15.971 --> 00:03:20.007
Let's just add an empty method of this kind to fulfill the conditions,

51
00:03:20.007 --> 00:03:23.436
and we'll insert its code at a later time.

52
00:03:23.436 --> 00:03:26.936
Remember, as Arquillian is not integrated with JUnit5,

53
00:03:26.936 --> 00:03:30.266
this test annotation comes from JUnit4.

54
00:03:30.266 --> 00:03:35.951
The RunWith annotation tells JUnit to use Arquillian as the test controller.

55
00:03:35.951 --> 00:03:39.900
Arquillian then looks for a public static method annotated with the

56
00:03:39.900 --> 00:03:43.484
deployment annotation to retrieve the test archive.

57
00:03:43.484 --> 00:03:48.955
Then each test annotated method is running inside the container environment.

58
00:03:48.955 --> 00:03:53.232
The purpose of the test archive is to isolate the classes and resources which

59
00:03:53.232 --> 00:03:57.058
are needed by the test from the remainder of the class path.

60
00:03:57.058 --> 00:04:02.192
Unlike a normal unit test, Arquillian does not seem to tap the entire class path.

61
00:04:02.192 --> 00:04:05.555
Instead, you include only what the test needs,

62
00:04:05.555 --> 00:04:09.371
which maybe the entire class path if that's what you decide.

63
00:04:09.371 --> 00:04:11.997
The archive is defined using ShrinkWrap,

64
00:04:11.997 --> 00:04:17.122
which is a Java API for creating archives like jar,

65
00:04:17.122 --> 00:04:20.230
var, or EAR in Java.

66
00:04:20.230 --> 00:04:23.989
The micro deployment strategy lets you focus on

67
00:04:23.989 --> 00:04:26.537
precisely the classes you want to test.

68
00:04:26.537 --> 00:04:29.990
As a result, the test remains varying and manageable.

69
00:04:29.990 --> 00:04:35.395
For the moment, we have included only the passenger and the flight classes.

70
00:04:35.395 --> 00:04:38.643
Once the ShrinkWrap archive is deployed to the server,

71
00:04:38.643 --> 00:04:40.596
it becomes a real archive.

72
00:04:40.596 --> 00:04:44.072
The container deployer has no knowledge that the

73
00:04:44.072 --> 00:04:46.737
archive was packaged by ShrinkWrap.

74
00:04:46.737 --> 00:04:58.000
So we have provided the infrastructure for using Arquillian in our project. We'll move to fully introduce it and run our integration tests with its help.

