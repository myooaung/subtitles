WEBVTT
1
00:00:00.000 --> 00:00:00.670
Hello.

2
00:00:00.670 --> 00:00:05.147
Welcome to this module about the unit testing.

3
00:00:05.147 --> 00:00:08.351
After having been introduced to the main concepts that are used by

4
00:00:08.351 --> 00:00:10.058
testing and having introduced our application,

5
00:00:10.058 --> 00:00:14.360
we'll move now to discuss unit testing in more detail and to

6
00:00:14.360 --> 00:00:17.740
effectively test the individual units and components of our

7
00:00:17.740 --> 00:00:19.316
flights management application.

8
00:00:19.316 --> 00:00:22.980
We'll also add new features that will be individually tested.

9
00:00:22.980 --> 00:00:26.858
So let's move further.

10
00:00:26.858 --> 00:00:30.009
This module will focus on showing what unit testing means,

11
00:00:30.009 --> 00:00:31.593
which its main advantages are,

12
00:00:31.593 --> 00:00:36.302
and how to make the step to an application that is using unit testing.

13
00:00:36.302 --> 00:00:39.328
First, we'll review the unit testing benefits.

14
00:00:39.328 --> 00:00:43.930
It helps us writing safer code, it also helps to find bugs early.

15
00:00:43.930 --> 00:00:46.629
The programmer can quickly isolate the incorrect code.

16
00:00:46.629 --> 00:00:49.822
It facilitates the introduction of new functionality

17
00:00:49.822 --> 00:00:51.507
without affecting the existing one,

18
00:00:51.507 --> 00:00:55.197
and it is a piece of the application documentation.

19
00:00:55.197 --> 00:00:58.169
We'll discuss the concept of code coverage as one of the

20
00:00:58.169 --> 00:01:00.152
important metrics of successful testing.

21
00:01:00.152 --> 00:01:03.264
We'll see that it can ensure some of the quality of our programming,

22
00:01:03.264 --> 00:01:05.348
but it is also controversial metrics,

23
00:01:05.348 --> 00:01:08.661
and one good programmer should be able to see beyond the

24
00:01:08.661 --> 00:01:12.021
pure percentage obtained by running tests.

25
00:01:12.021 --> 00:01:14.255
We'll then start to move the existing flights management

26
00:01:14.255 --> 00:01:17.704
application to unit testing with JUnit5 looking for the

27
00:01:17.704 --> 00:01:19.882
verification of its correct behavior.

28
00:01:19.882 --> 00:01:27.233
Finally, we'll add new features and we'll make sure that they are unit tested.

29
00:01:27.233 --> 00:01:30.332
By using unit tests, you'll be able to write safer code.

30
00:01:30.332 --> 00:01:33.875
You will know that your methods and components are really

31
00:01:33.875 --> 00:01:36.005
doing what they are supposed to do.

32
00:01:36.005 --> 00:01:39.695
Having tests will make you think harder about the code and about if

33
00:01:39.695 --> 00:01:42.501
it is really doing what it is supposed to do.

34
00:01:42.501 --> 00:01:46.139
It identifies the issues that may exist before the code is

35
00:01:46.139 --> 00:01:50.119
sent further for integration testing and unit test will also

36
00:01:50.119 --> 00:01:52.746
help exposing the edge cases,

37
00:01:52.746 --> 00:01:56.660
the problems or situations that occur only at an extreme,

38
00:01:56.660 --> 00:02:01.618
maximum, or minimum operating parameter.

39
00:02:01.618 --> 00:02:04.923
With unit testing, bugs are found at an early stage.

40
00:02:04.923 --> 00:02:09.032
Issues can be found very early and can be quickly resolved

41
00:02:09.032 --> 00:02:12.262
without impacting the other pieces of the code.

42
00:02:12.262 --> 00:02:14.917
Since unit testing is carried out by developers who test

43
00:02:14.917 --> 00:02:17.566
individual code before integration.

44
00:02:17.566 --> 00:02:21.060
This includes both bugs in the programmer's implementation and flaws

45
00:02:21.060 --> 00:02:26.872
or missing parts of the specification for the unit.

46
00:02:26.872 --> 00:02:29.560
And even if the developer has discovered the bug,

47
00:02:29.560 --> 00:02:33.436
now he is facing another challenge, which is the piece of code that produces it,

48
00:02:33.436 --> 00:02:37.095
how to be able to isolate those lines that are generating it.

49
00:02:37.095 --> 00:02:40.843
How we can find that magic that will identify the incorrect code

50
00:02:40.843 --> 00:02:45.164
as tried as possible that will tell us that we are going the

51
00:02:45.164 --> 00:02:47.194
wrong way and not continue further,

52
00:02:47.194 --> 00:02:50.216
but to inspect a small portion of the application that

53
00:02:50.216 --> 00:02:52.807
is at the origin of the bad behavior.

54
00:02:52.807 --> 00:02:57.152
The well-written tests are the expected answer.

55
00:02:57.152 --> 00:02:58.865
Once the developer has received some specifications,

56
00:02:58.865 --> 00:03:02.751
he will have to first understand them before being able to put

57
00:03:02.751 --> 00:03:06.876
them into the code and a living application will receive requests

58
00:03:06.876 --> 00:03:09.082
for implementing new functionality.

59
00:03:09.082 --> 00:03:12.985
In order to be able to implement them, you have to answer the question,

60
00:03:12.985 --> 00:03:14.654
what behavior must I follow?

61
00:03:14.654 --> 00:03:19.198
What if I will first implement the test that will show me what I have to do,

62
00:03:19.198 --> 00:03:21.825
then I may think about how I have to do it.

63
00:03:21.825 --> 00:03:26.882
This is the fact one of the fundamental principles of test-driven development.

64
00:03:26.882 --> 00:03:30.217
Once you work on the new application, you will probably like.

65
00:03:30.217 --> 00:03:35.360
In order to easily jump into it, get your hands on some documentation.

66
00:03:35.360 --> 00:03:37.608
At least, you need to understand the fundamental idea,

67
00:03:37.608 --> 00:03:39.834
what is this software supposed to do,

68
00:03:39.834 --> 00:03:43.884
but if you need to check what some class or its methods intend to do,

69
00:03:43.884 --> 00:03:44.894
what do you prefer,

70
00:03:44.894 --> 00:03:48.558
to read some more documentation or to look for some

71
00:03:48.558 --> 00:03:50.950
sample code that already invokes it.

72
00:03:50.950 --> 00:03:52.838
And if you have to support your work,

73
00:03:52.838 --> 00:03:55.403
how much will you enjoy writing documentation?

74
00:03:55.403 --> 00:03:59.645
Most programmers prefer to work with the code and this is pretty natural.

75
00:03:59.645 --> 00:04:01.911
Well-written unit tests do exactly this,

76
00:04:01.911 --> 00:04:04.257
they invoke your code, and consequently,

77
00:04:04.257 --> 00:04:07.287
they provide the working specification of your functionality.

78
00:04:07.287 --> 00:04:08.286
As a result,

79
00:04:08.286 --> 00:04:10.691
unit tests effectively become a significant portion

80
00:04:10.691 --> 00:04:14.333
of the thing called documentation.

81
00:04:14.333 --> 00:04:17.500
Code coverage is a measure used to describe the degree to which the source code

82
00:04:17.500 --> 00:04:21.573
of a program is executed when a particular test suite runs.

83
00:04:21.573 --> 00:04:25.782
A program with high test coverage measured as a percentage has more

84
00:04:25.782 --> 00:04:29.962
of its source code executed during testing will suggest it has a

85
00:04:29.962 --> 00:04:34.444
lower chance of containing and detecting software bugs compared to a

86
00:04:34.444 --> 00:04:36.487
program with low test coverage.

87
00:04:36.487 --> 00:04:39.634
Many different metrics can be used to calculate this coverage.

88
00:04:39.634 --> 00:04:44.075
Some of the most basic are the percentage of program methods and the percentage

89
00:04:44.075 --> 00:04:47.640
of program lines called during execution of the test suite.

90
00:04:47.640 --> 00:04:51.548
The metric is built by a tool that runs the test suite and analyzes

91
00:04:51.548 --> 00:04:57.101
the code that is effectively executed as result.

92
00:04:57.101 --> 00:05:01.734
Among the most widely used code coverage tools, let's enumerate the few ones.

93
00:05:01.734 --> 00:05:06.023
JCov originally developed and used with Sun JDK and later

94
00:05:06.023 --> 00:05:09.880
Oracle JDK from the very beginning of Java.

95
00:05:09.880 --> 00:05:14.695
OpenClover as a free and open source successor of Atlassian Clover,

96
00:05:14.695 --> 00:05:17.684
which reached its end of life in 2017.

97
00:05:17.684 --> 00:05:22.046
EMMA as open source toolkit for measuring and reporting.

98
00:05:22.046 --> 00:05:25.251
It is no longer under active development as JaCoCo

99
00:05:25.251 --> 00:05:27.591
has been designed to replace it, however,

100
00:05:27.591 --> 00:05:31.286
it is still popular and pretty large in use.

101
00:05:31.286 --> 00:05:36.240
JaCoCo, an open source toolkit, initially developed as a plugin for Eclipse.

102
00:05:36.240 --> 00:05:38.867
At the time of the recording of this module,

103
00:05:38.867 --> 00:05:42.696
the last table release has come just three days earlier.

104
00:05:42.696 --> 00:05:45.281
Consequently, from the few existing alternatives,

105
00:05:45.281 --> 00:05:49.223
we'll use JaCoCo for our demos as having good integration

106
00:05:49.223 --> 00:05:54.744
with Maven and under continuous development.

107
00:05:54.744 --> 00:05:57.699
Speaking about the level of code coverage that is achievable,

108
00:05:57.699 --> 00:06:00.896
one legitimate question that can come to your mind may be

109
00:06:00.896 --> 00:06:04.915
what code coverage is really feasible, 80%,

110
00:06:04.915 --> 00:06:07.020
90%, or 100%.

111
00:06:07.020 --> 00:06:08.095
From my experience,

112
00:06:08.095 --> 00:06:13.234
80% is the minimum percentage that is required by most of the projects.

113
00:06:13.234 --> 00:06:16.989
Most customers and technical leads consider this as a minimum in

114
00:06:16.989 --> 00:06:20.104
order to accept that delivered code is reliable.

115
00:06:20.104 --> 00:06:23.214
It is usually included into the definition of done.

116
00:06:23.214 --> 00:06:25.678
Ninety percent is in most cases achievable,

117
00:06:25.678 --> 00:06:31.258
but it may require some extra efforts and artifices to be truly feasible.

118
00:06:31.258 --> 00:06:35.288
The last few percent may be in many cases the hardest ones

119
00:06:35.288 --> 00:06:40.355
and the difference between 85% and 90% may be much larger

120
00:06:40.355 --> 00:06:43.905
than the 1 between 80% and 85%.

121
00:06:43.905 --> 00:06:46.699
Finally, 100% should be our goal.

122
00:06:46.699 --> 00:06:51.429
It is not a rare situation that even if you achieve 90% of code coverage,

123
00:06:51.429 --> 00:06:56.042
the rest of 10% on tested code to hide critical box.

124
00:06:56.042 --> 00:06:57.753
It is not possible in all situations,

125
00:06:57.753 --> 00:07:02.893
but 100% should be the target to keep in mind and to

126
00:07:02.893 --> 00:07:07.395
try to get as close as possible.

127
00:07:07.395 --> 00:07:11.612
For our demo, we'll add the JaCoCo Maven plugin to build a configuration.

128
00:07:11.612 --> 00:07:15.228
Then a JaCoCo agent will run when the tests are run.

129
00:07:15.228 --> 00:07:19.358
It will be this agent that will collect the coverage information.

130
00:07:19.358 --> 00:07:22.166
Looking the way you can see at this slide,

131
00:07:22.166 --> 00:07:25.202
when we get information at the level of the class,

132
00:07:25.202 --> 00:07:29.209
or on this slide where we get the information at the level of methods and lines,

133
00:07:29.209 --> 00:07:30.152
or on this slide,

134
00:07:30.152 --> 00:07:33.181
where we get the most detailed information at the level of

135
00:07:33.181 --> 00:07:35.975
particular class or a particular method.

136
00:07:35.975 --> 00:07:39.645
One of our goals will be to keep an appropriate level of code coverage so

137
00:07:39.645 --> 00:07:45.227
that will provide us the desired safety about our code.

138
00:07:45.227 --> 00:07:49.018
And the bad news is that this may still not be enough.

139
00:07:49.018 --> 00:07:53.496
One hundred percent code coverage does not mean your code works perfectly.

140
00:07:53.496 --> 00:07:53.806
Surprising?

141
00:07:53.806 --> 00:07:56.882
It should not be because of at least to resist.

142
00:07:56.882 --> 00:08:00.160
The first reason is that your tests may not be good

143
00:08:00.160 --> 00:08:03.447
enough and the second reason is that, remember,

144
00:08:03.447 --> 00:08:06.011
we are still at the level of unit testing.

145
00:08:06.011 --> 00:08:10.955
It means that you are testing units meaning classes and their methods.

146
00:08:10.955 --> 00:08:14.070
You are testing neither the interaction between different classes nor

147
00:08:14.070 --> 00:08:17.003
the possible scenarios for using the application.

148
00:08:17.003 --> 00:08:27.000
These topics are one step forward of our discussion and they relate to the ideas of integration testing and behavior-driven development.

