1
00:00:01,605 --> 00:00:04,752
We'll go now for another practical demonstration.

2
00:00:04,752 --> 00:00:08,324
We'll add test on the Flight class using JUnit5 and looking for

3
00:00:08,324 --> 00:00:11,135
the verification of its correct behavior.

4
00:00:11,135 --> 00:00:13,657
We'll include here the creation of a flight,

5
00:00:13,657 --> 00:00:16,557
the restrictions on a flight number format,

6
00:00:16,557 --> 00:00:20,759
the business logic of a flight.

7
00:00:20,759 --> 00:00:25,655
Let's start a unit that's the Flight class.

8
00:00:25,655 --> 00:00:29,604
We are creating this FlightTest.

9
00:00:29,604 --> 00:00:32,678
We'll write our first simple test.

10
00:00:32,678 --> 00:00:37,050
We create a flight object and verify that it is not null.

11
00:00:37,050 --> 00:00:42,240
We run the test and see that it is green.

12
00:00:42,240 --> 00:00:46,207
We have created the flight and checked its existence.

13
00:00:46,207 --> 00:00:48,933
We would like to check the constraints of a flight number.

14
00:00:48,933 --> 00:00:53,327
This flight number is a code for an airline service consists of

15
00:00:53,327 --> 00:00:58,491
two-character align designator and of three to four-digit number.

16
00:00:58,491 --> 00:01:03,169
So we may describe this condition by a regular expression.

17
00:01:03,169 --> 00:01:05,913
We'll write a test that checks that the creation of a flight

18
00:01:05,913 --> 00:01:10,351
with an invalid number will throw an exception.

19
00:01:10,351 --> 00:01:12,537
We have chosen two flight numbers,

20
00:01:12,537 --> 00:01:15,157
one with two digits after the airline designator,

21
00:01:15,157 --> 00:01:19,899
the other one with five digits after the airline designator.

22
00:01:19,899 --> 00:01:25,928
If we run now the test, it will be red.

23
00:01:25,928 --> 00:01:29,537
This means that the flight number verification was not there.

24
00:01:29,537 --> 00:01:34,393
This has only been exposed when starting with the unit tests.

25
00:01:34,393 --> 00:01:35,280
Let's fix this.

26
00:01:35,280 --> 00:01:39,409
This is the regular expression that the flight number must match and this

27
00:01:39,409 --> 00:01:44,597
is the verification at the beginning of the constructor.

28
00:01:44,597 --> 00:01:49,053
Let's re-run the tests.

29
00:01:49,053 --> 00:01:51,427
The tests are green.

30
00:01:51,427 --> 00:01:55,100
Let's write the test to check a valid flight number.

31
00:01:55,100 --> 00:01:59,586
We have chosen two flights, one with three digits after the airline designator,

32
00:01:59,586 --> 00:02:01,828
another one with four digits.

33
00:02:01,828 --> 00:02:06,749
Let's run the tests.

34
00:02:06,749 --> 00:02:08,326
The tests are green.

35
00:02:08,326 --> 00:02:14,097
We have checked both the valid and invalid flight numbers.

36
00:02:14,097 --> 00:02:16,319
We would like to check that we cannot sell more

37
00:02:16,319 --> 00:02:19,444
tickets than the number of places.

38
00:02:19,444 --> 00:02:23,275
So for this, we'll write a test.

39
00:02:23,275 --> 00:02:28,252
We have a flight with 50 places from London to Bucharest.

40
00:02:28,252 --> 00:02:33,539
First, we sell exactly the number of available places.

41
00:02:33,539 --> 00:02:36,788
We check that the flight is now full.

42
00:02:36,788 --> 00:02:41,298
Then we try to sell one more ticket expecting an exception.

43
00:02:41,298 --> 00:02:48,127
We run the test and it fails.

44
00:02:48,127 --> 00:02:51,537
The logic that verifies that one cannot sell above the capacity

45
00:02:51,537 --> 00:02:55,740
of the flight hasn't been yet implemented.

46
00:02:55,740 --> 00:02:57,903
Let's add this logic.

47
00:02:57,903 --> 00:02:59,121
Into the sellTicket method,

48
00:02:59,121 --> 00:03:03,860
we check that the number of passengers is not above the number of places,

49
00:03:03,860 --> 00:03:07,068
otherwise, we throw an exception.

50
00:03:07,068 --> 00:03:14,621
Let's re-run the test and it is green now.

51
00:03:14,621 --> 00:03:17,776
We see that we have provided a setter for the number of places.

52
00:03:17,776 --> 00:03:20,594
So as long as it is possible to change this field,

53
00:03:20,594 --> 00:03:26,814
we should check it to follow the same restriction that we have presented above.

54
00:03:26,814 --> 00:03:29,619
We write a test that checks that setting an invalid

55
00:03:29,619 --> 00:03:33,678
number of places will throw an exception.

56
00:03:33,678 --> 00:03:37,144
We have this flight from London to Bucharest.

57
00:03:37,144 --> 00:03:39,573
We presume that we have already sold the 50 tickets,

58
00:03:39,573 --> 00:03:40,885
and after this,

59
00:03:40,885 --> 00:03:45,537
we would like to reduce the total number of places into the flight.

60
00:03:45,537 --> 00:03:48,667
We should prevent this and throw an exception.

61
00:03:48,667 --> 00:03:56,762
We run the test and it fails as the logic is not yet implemented.

62
00:03:56,762 --> 00:04:00,534
So we go to a setPlaces method and implement this restriction that

63
00:04:00,534 --> 00:04:04,570
will throw an exception in case that the number of places is

64
00:04:04,570 --> 00:04:08,507
reduced under the number of passengers.

65
00:04:08,507 --> 00:04:15,913
We run the test again and it succeeds.

66
00:04:15,913 --> 00:04:20,718
In order to fully check the setPlaces method, let's add another test.

67
00:04:20,718 --> 00:04:23,404
We have a flight from London to Bucharest,

68
00:04:23,404 --> 00:04:28,108
we sell all places, and then we try to increase the number of places.

69
00:04:28,108 --> 00:04:34,144
We run the test and it succeeds.

70
00:04:34,144 --> 00:04:36,952
We would like to measure the code coverage again.

71
00:04:36,952 --> 00:04:45,544
And we run mvn test from the command prompt.

72
00:04:45,544 --> 00:04:47,250
Into the index.html file,

73
00:04:47,250 --> 00:04:52,556
we'll be able to take a look at the code coverage at the level of the package,

74
00:04:52,556 --> 00:04:54,456
at the level of the classes,

75
00:04:54,456 --> 00:04:58,897
and at the level of individual constructors and methods.

76
00:04:58,897 --> 00:05:02,694
We see that we have covered some of the Flight class with tests.

77
00:05:02,694 --> 00:05:05,777
We'll take care of the remaining part by verifying

78
00:05:05,777 --> 00:05:09,817
some new business logic as well.

79
00:05:09,817 --> 00:05:12,577
The business logic says that once flying,

80
00:05:12,577 --> 00:05:15,317
a flight cannot change its origin any longer.

81
00:05:15,317 --> 00:05:17,987
Let's write a test to verify this.

82
00:05:17,987 --> 00:05:20,757
We have a flight from London to Bucharest,

83
00:05:20,757 --> 00:05:23,435
it is taking off so it should be flying,

84
00:05:23,435 --> 00:05:26,481
and then it tries to change its origin.

85
00:05:26,481 --> 00:05:31,492
This should be prevented and an exception must be thrown.

86
00:05:31,492 --> 00:05:37,684
Let's run the test, the test is failing.

87
00:05:37,684 --> 00:05:39,027
Let's fix this.

88
00:05:39,027 --> 00:05:43,545
If the flight is already flying and we try to change its origin,

89
00:05:43,545 --> 00:05:45,891
an exception must be thrown.

90
00:05:45,891 --> 00:05:52,287
We run the test again and it is succeeding.

91
00:05:52,287 --> 00:05:55,981
In order to verify that the flight is no longer flying after having landed,

92
00:05:55,981 --> 00:05:58,970
we'll also write a test to check this.

93
00:05:58,970 --> 00:06:01,671
We have a flight from London to Bucharest,

94
00:06:01,671 --> 00:06:04,616
first it is taking off, then it is landing,

95
00:06:04,616 --> 00:06:07,071
the flying state should be false.

96
00:06:07,071 --> 00:06:11,787
Let's run the tests.

97
00:06:11,787 --> 00:06:15,027
The tests are green so the condition is fulfilled.

98
00:06:15,027 --> 00:06:18,434
We would like to measure the code coverage again and

99
00:06:18,434 --> 00:06:25,004
run mvn test from the command prompt.

100
00:06:25,004 --> 00:06:30,610
Into the index.html file, we'll be able to take a look at the code coverage,

101
00:06:30,610 --> 00:06:34,524
add the level of the package, add the level of the classes,

102
00:06:34,524 --> 00:06:38,832
and add the level of individual constructors and methods.

103
00:06:38,832 --> 00:06:43,299
We have seen that we have fully covered the Flight class with tests.

104
00:06:43,299 --> 00:06:49,431
We'll get rid of the initial main class.

105
00:06:49,431 --> 00:07:00,000
It is no longer needed. And our next steps will focus on the new business logic that will be required.

