WEBVTT
1
00:00:00.681 --> 00:00:05.695
Our next demonstration will allow us to discover more of the

2
00:00:05.695 --> 00:00:08.190
Cucumber capabilities that will make the creation of

3
00:00:08.190 --> 00:00:11.706
acceptance test easier and more flexible.

4
00:00:11.706 --> 00:00:15.428
Based on the newly discovered capabilities where we refine our

5
00:00:15.428 --> 00:00:18.771
already existing acceptance tests by introducing scenario

6
00:00:18.771 --> 00:00:22.663
outlines with data examples table, and consequently,

7
00:00:22.663 --> 00:00:30.848
allowing the end user to have more control into defining the business needs.

8
00:00:30.848 --> 00:00:33.176
We were saying that we would like to introduce and

9
00:00:33.176 --> 00:00:35.152
discover more Cucumber capabilities.

10
00:00:35.152 --> 00:00:38.228
The acceptance test that we have previously presented are a

11
00:00:38.228 --> 00:00:40.688
first step towards verifying the business needs,

12
00:00:40.688 --> 00:00:44.160
but they are still awkward and too generic.

13
00:00:44.160 --> 00:00:46.866
It would be much simpler if we could parameterize

14
00:00:46.866 --> 00:00:49.787
our tests so that we do not have, for example,

15
00:00:49.787 --> 00:00:53.778
to write all particular verifications into the code.

16
00:00:53.778 --> 00:00:58.413
It would be more convenient for the end user to be able to define his own tests

17
00:00:58.413 --> 00:01:03.656
on particular datasets to write them directly into the feature file and not to

18
00:01:03.656 --> 00:01:07.281
need to extend the Java code and to recompile it.

19
00:01:07.281 --> 00:01:11.933
In order to do this, we'll introduce the scenario outline.

20
00:01:11.933 --> 00:01:15.311
This will allow us to parameterize the tests.

21
00:01:15.311 --> 00:01:17.522
So we'll remove this given, when,

22
00:01:17.522 --> 00:01:21.992
then scenario and we'll introduce a parameterized one.

23
00:01:21.992 --> 00:01:24.755
Given we have the flight defined into file1,

24
00:01:24.755 --> 00:01:31.262
and file2, and file3, these are the 3 files that are defining our flights.

25
00:01:31.262 --> 00:01:36.076
When the passengers travel according to the data recorded into these files,

26
00:01:36.076 --> 00:01:38.854
then passenger with identifier, identifier,

27
00:01:38.854 --> 00:01:42.517
and name, name, and countryCode, countryCode,

28
00:01:42.517 --> 00:01:45.547
has been awarded points, points.

29
00:01:45.547 --> 00:01:50.797
We still need to introduce the examples table and this is how it looks like.

30
00:01:50.797 --> 00:01:55.894
We recognize all the parameters of the previously defined scenario outline,

31
00:01:55.894 --> 00:02:01.570
file1, file2, file3, identifier, name, countryCode,

32
00:02:01.570 --> 00:02:03.423
and points.

33
00:02:03.423 --> 00:02:06.774
We are going to generate the new skeleton of the tests.

34
00:02:06.774 --> 00:02:09.997
We see that Cucumber has generated the declaration

35
00:02:09.997 --> 00:02:12.468
of the missing methods for us.

36
00:02:12.468 --> 00:02:18.420
We move to our old bonus_policy Java class and introduce the

37
00:02:18.420 --> 00:02:23.083
newly parameterized generated methods so that we can fill

38
00:02:23.083 --> 00:02:25.517
them in with our testing logic.

39
00:02:25.517 --> 00:02:28.365
Cucumber has generated an appropriate set of

40
00:02:28.365 --> 00:02:31.163
methods with the needed annotations.

41
00:02:31.163 --> 00:02:34.539
The method information that determines the association with the correct

42
00:02:34.539 --> 00:02:38.486
step as defined into the .feature file is the annotation,

43
00:02:38.486 --> 00:02:41.265
but for our convenience and for clarity,

44
00:02:41.265 --> 00:02:43.703
we'll replace the names of the parameters.

45
00:02:43.703 --> 00:02:47.644
Given we have the flights defined into fileName1,

46
00:02:47.644 --> 00:02:52.408
and fileName2, and fileName3, these are the new names of the parameters,

47
00:02:52.408 --> 00:02:56.518
and we are also inserting here the testing logic when the passengers

48
00:02:56.518 --> 00:03:00.485
travel according to the data recording into these files.

49
00:03:00.485 --> 00:03:03.989
Here, we are keeping the previously existing testing logic,

50
00:03:03.989 --> 00:03:07.283
then the passenger with identifier, identifier,

51
00:03:07.283 --> 00:03:12.307
name, name, countryCode, countryCode has been awarded points,

52
00:03:12.307 --> 00:03:12.763
points,

53
00:03:12.763 --> 00:03:16.845
and we are inserting here this line of code that is making the

54
00:03:16.845 --> 00:03:21.236
appropriate verification for each line of the examples table.

55
00:03:21.236 --> 00:03:25.846
We also have to remove the old testing methods.

56
00:03:25.846 --> 00:03:29.105
Let's run the tests.

57
00:03:29.105 --> 00:03:29.420
Great!

58
00:03:29.420 --> 00:03:34.759
It works fine and our tests are parameterized and easier to follow.

59
00:03:34.759 --> 00:03:38.080
When the business analyst would like to add new datasets to tests,

60
00:03:38.080 --> 00:03:39.951
he can simply add them here.

61
00:03:39.951 --> 00:03:47.000
There is no need to have a programmer and there is also no need to recompile the code.

