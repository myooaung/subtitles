WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.515
Hello friends.

00:00:01.515 --> 00:00:04.530
In previous lecture, we have seen how to set up mapping.

00:00:04.530 --> 00:00:07.230
In this lecture, I'm going to pull core,

00:00:07.230 --> 00:00:09.240
which we helped pushed into the GitHub.

00:00:09.240 --> 00:00:12.630
And we will start building on Linux system for that one,

00:00:12.630 --> 00:00:15.525
I'm just logging into my GitHub repository.

00:00:15.525 --> 00:00:17.460
This is my GitHub repository.

00:00:17.460 --> 00:00:20.310
I'm just going inserted repositories cluster

00:00:20.310 --> 00:00:24.105
demo project and get the link of this repository.

00:00:24.105 --> 00:00:26.730
And we need to go onto Linux system.

00:00:26.730 --> 00:00:30.225
First, let me check whether duties installed over here are not.

00:00:30.225 --> 00:00:33.880
If I execute a command called a kid, what happened?

00:00:33.880 --> 00:00:36.650
Let me open your duplicate session.

00:00:36.650 --> 00:00:39.740
Clear the screen and increase the font size.

00:00:39.740 --> 00:00:42.290
Yes, if we execute, kid. Okay.

00:00:42.290 --> 00:00:44.330
It is not installed yet.

00:00:44.330 --> 00:00:45.530
Installed.

00:00:45.530 --> 00:00:46.220
Good.

00:00:46.220 --> 00:00:46.820
Yes.

00:00:46.820 --> 00:00:47.855
To install.

00:00:47.855 --> 00:00:50.825
Git is installed. Let me clear the screen again.

00:00:50.825 --> 00:00:53.360
Now, git clone will need to do that.

00:00:53.360 --> 00:00:57.635
Git clone, the repository name which we would like to copy Alert.

00:00:57.635 --> 00:01:01.070
We have downloaded the repository onto our local system.

00:01:01.070 --> 00:01:05.930
Now let's go to our repository and it,

00:01:05.930 --> 00:01:08.840
unless you can see palm dot xml as such.

00:01:08.840 --> 00:01:12.065
See here we need to execute our Marion comments.

00:01:12.065 --> 00:01:13.730
So the first term madman command,

00:01:13.730 --> 00:01:17.105
what we are executing is the NBN under the golden M.

00:01:17.105 --> 00:01:18.800
What we would like to execute.

00:01:18.800 --> 00:01:23.735
Again, I'm going back to math and goals and we'll see what we can execute.

00:01:23.735 --> 00:01:25.460
This is Maren goal space.

00:01:25.460 --> 00:01:29.090
So here we can execute to validate, test,

00:01:29.090 --> 00:01:32.870
to compare test packages installed under the play.

00:01:32.870 --> 00:01:35.120
We cannot able to do because we should

00:01:35.120 --> 00:01:38.150
have proper authentication for the remote repository.

00:01:38.150 --> 00:01:41.060
So let's go and fast to execute the valued it.

00:01:41.060 --> 00:01:45.305
And you can see this build is successful or not if I do ls,

00:01:45.305 --> 00:01:49.385
okay, so far there is no target directory has been created.

00:01:49.385 --> 00:01:52.759
Usually whenever we were executing on Eclipse,

00:01:52.759 --> 00:01:55.595
we could see the targeted directory always appears.

00:01:55.595 --> 00:02:00.770
But here you can clearly see the variation until unless we execute at least compelled,

00:02:00.770 --> 00:02:03.035
we cannot able to see the targeted directory.

00:02:03.035 --> 00:02:04.850
Now let's execute the company.

00:02:04.850 --> 00:02:09.725
So ambien is the commander to execute the man command and Company.

00:02:09.725 --> 00:02:12.620
And we are compiling our code whenever we compare,

00:02:12.620 --> 00:02:15.620
it should create the JAR files and up Jell-O,

00:02:15.620 --> 00:02:18.800
this it is pulling all the required packages from

00:02:18.800 --> 00:02:22.460
the remote repository to our local repository.

00:02:22.460 --> 00:02:26.885
Okay, I meant to sit central repository to our local repository.

00:02:26.885 --> 00:02:30.410
It took almost 45 seconds to complete this one.

00:02:30.410 --> 00:02:34.100
And this is the first time we have executed this compile command.

00:02:34.100 --> 00:02:37.820
That's the reason it pulled a lot of packages which are necessary to

00:02:37.820 --> 00:02:42.680
build this application and it stores in the local repository.

00:02:42.680 --> 00:02:47.465
I will show you the local repository in near well, but building successful.

00:02:47.465 --> 00:02:49.010
Or if I do ls again,

00:02:49.010 --> 00:02:51.950
now you can see that target directory over here.

00:02:51.950 --> 00:02:57.020
Targeted directory gets created whenever we do at least yet compile command.

00:02:57.020 --> 00:03:02.225
So if I go in set 2 year target to directly and you can see the class files.

00:03:02.225 --> 00:03:05.660
So if you do remember we were discussing about

00:03:05.660 --> 00:03:09.035
this initial step is we need to compile the code.

00:03:09.035 --> 00:03:11.540
So whenever we come from the core Java file,

00:03:11.540 --> 00:03:13.580
get converted into the class file read.

00:03:13.580 --> 00:03:18.530
So that is what we are going to C plus two demo project, okay?

00:03:18.530 --> 00:03:20.270
And the app dot class,

00:03:20.270 --> 00:03:23.660
you can see this 100 and we haven't compiled

00:03:23.660 --> 00:03:25.970
the test cases here to that's the reason you

00:03:25.970 --> 00:03:28.790
cannot able to see the test cases information,

00:03:28.790 --> 00:03:32.390
okay, now I'm going to compile the test cases.

00:03:32.390 --> 00:03:34.130
So before going to that one,

00:03:34.130 --> 00:03:37.700
CD tilde and fast mapping project and make

00:03:37.700 --> 00:03:41.570
sure that you are exhibiting this bear you how the palm dot XML.

00:03:41.570 --> 00:03:45.020
So if you execute the command from other location,

00:03:45.020 --> 00:03:46.520
it doesn't work. Let's take that.

00:03:46.520 --> 00:03:49.610
If I go to SRC and the NBN compile,

00:03:49.610 --> 00:03:54.425
if I do it such bomb dot xml and they couldn't able to find it.

00:03:54.425 --> 00:03:56.030
You'd throw you the build failure.

00:03:56.030 --> 00:03:59.570
And you can see that the goal use whisper to record your project to,

00:03:59.570 --> 00:04:02.990
to execute, but there is no palm dot xml in the directory.

00:04:02.990 --> 00:04:07.910
Okay, so I'm going back to again where we have located our palm but XML.

00:04:07.910 --> 00:04:12.350
And this time I'm going to execute the Ambien test compound.

00:04:12.350 --> 00:04:15.920
Whenever we execute MEN test compile along with the source code,

00:04:15.920 --> 00:04:17.960
it also companies that test cases.

00:04:17.960 --> 00:04:20.165
We have one test case in SRC, right?

00:04:20.165 --> 00:04:23.075
Okay. So it is going to compel that as well.

00:04:23.075 --> 00:04:25.400
And this time it is not going to pull

00:04:25.400 --> 00:04:28.910
the latter packages because most of the packages are available.

00:04:28.910 --> 00:04:32.480
So our build also quite quicker way because it is

00:04:32.480 --> 00:04:36.215
going to pull the required packages from the local repository,

00:04:36.215 --> 00:04:38.600
not from the central repository.

00:04:38.600 --> 00:04:43.340
And we have done the test compel only the packages which are required to.

00:04:43.340 --> 00:04:48.290
Additionally, it is going to pull remaining on you to take from the local repository.

00:04:48.290 --> 00:04:51.590
Alright, now, again, if I go to my target,

00:04:51.590 --> 00:04:54.110
I could able to see the test cases.

00:04:54.110 --> 00:04:55.430
Yes, you can see here,

00:04:55.430 --> 00:04:57.410
if I do the three on this one,

00:04:57.410 --> 00:05:00.470
twin is a command which will displace the aisle,

00:05:00.470 --> 00:05:02.540
the content of that particular directory.

00:05:02.540 --> 00:05:03.785
Okay, let me try it.

00:05:03.785 --> 00:05:06.200
Okay, three is not in standard. Let me install.

00:05:06.200 --> 00:05:09.110
And if I do again, three test class,

00:05:09.110 --> 00:05:15.200
and you can see that Egypt test class com demo company under that AP test two dot class.

00:05:15.200 --> 00:05:17.825
This is the file has been created 100.

00:05:17.825 --> 00:05:21.590
Next thing is we have compelled our source code under test cases.

00:05:21.590 --> 00:05:23.945
Now it's time to execute the test cases.

00:05:23.945 --> 00:05:26.330
For that, we can use the map and goal.

00:05:26.330 --> 00:05:32.285
That is, I'm going back to our home directory of the remote repository.

00:05:32.285 --> 00:05:34.340
Now, young VM tests.

00:05:34.340 --> 00:05:38.390
Okay, so it is going to test the, our source code.

00:05:38.390 --> 00:05:40.865
And while doing a very new goal,

00:05:40.865 --> 00:05:43.655
you filter requests the additional packages.

00:05:43.655 --> 00:05:45.230
It is going to the,

00:05:45.230 --> 00:05:48.590
all the packages from the central repository.

00:05:48.590 --> 00:05:50.360
Okay, we have tested,

00:05:50.360 --> 00:05:51.830
we have only one test case.

00:05:51.830 --> 00:05:55.264
So the one test case has been run and it is successful.

00:05:55.264 --> 00:05:57.425
That's 37. Build also successful.

00:05:57.425 --> 00:06:01.190
And so far if you observe we haven't created it need

00:06:01.190 --> 00:06:05.840
JAR file because we are just doing only the compel under test.

00:06:05.840 --> 00:06:07.475
We have to do the packaging.

00:06:07.475 --> 00:06:12.305
So if I go to goals here we have compiled taste compared,

00:06:12.305 --> 00:06:13.985
even test. We have RAM.

00:06:13.985 --> 00:06:14.930
The packets.

00:06:14.930 --> 00:06:17.645
So now we are going to do the package command.

00:06:17.645 --> 00:06:20.179
So you haven't been package.

00:06:20.179 --> 00:06:22.820
And again, if it requires some packages,

00:06:22.820 --> 00:06:24.290
it is going to pull it.

00:06:24.290 --> 00:06:26.045
And it takes good the,

00:06:26.045 --> 00:06:29.930
all the phases, then it is going to make it as a package.

00:06:29.930 --> 00:06:31.700
By default, it is a JAR file.

00:06:31.700 --> 00:06:35.735
Now it has created a JAR file and it's stored in this location.

00:06:35.735 --> 00:06:39.260
Okay, So this is how we can package our work court.

00:06:39.260 --> 00:06:41.585
Our next goal is installed.

00:06:41.585 --> 00:06:43.250
So let's execute installed.

00:06:43.250 --> 00:06:44.600
Whenever we do install,

00:06:44.600 --> 00:06:47.045
it is going to store in our local repository

00:06:47.045 --> 00:06:49.985
before executing installed, let's look further.

00:06:49.985 --> 00:06:51.905
Where is our local repository?

00:06:51.905 --> 00:06:56.250
So I will go back over here and search for find.

00:06:56.250 --> 00:07:02.590
Slash en dot to dot m2 is the local repository directory.

00:07:02.590 --> 00:07:03.895
So let's search for,

00:07:03.895 --> 00:07:07.690
and you can see here slash root m2, underwrote a directory.

00:07:07.690 --> 00:07:11.035
There is a directory called IAM to why it's created under root,

00:07:11.035 --> 00:07:12.850
because I'm near root user.

00:07:12.850 --> 00:07:15.220
As a root user, I'm doing all this activity.

00:07:15.220 --> 00:07:18.160
Usually the TM2 directly gets created under

00:07:18.160 --> 00:07:21.460
the user who is executing on who is configured.

00:07:21.460 --> 00:07:26.575
It usually dot m2 director gets created under the user's home directory,

00:07:26.575 --> 00:07:28.615
currently logged in as the root user.

00:07:28.615 --> 00:07:31.270
That's the reason it is created under slash road.

00:07:31.270 --> 00:07:34.090
Okay, Anyway, I'm going back to my root directory.

00:07:34.090 --> 00:07:36.970
If I do PWD, you can see the root.

00:07:36.970 --> 00:07:39.785
And if I go to dotty him too,

00:07:39.785 --> 00:07:42.800
and if you want to see the hidden files,

00:07:42.800 --> 00:07:44.165
you're less mass here.

00:07:44.165 --> 00:07:50.165
And you can see that directory called data m2 is that if I go insert and if I do ls,

00:07:50.165 --> 00:07:52.670
so Repository, and if I do three,

00:07:52.670 --> 00:07:55.190
you can see lotta packages.

00:07:55.190 --> 00:07:57.380
You can see over here, okay.

00:07:57.380 --> 00:08:00.140
It has been displayed in the two-part map way

00:08:00.140 --> 00:08:03.350
because multiple directories are there in each directory,

00:08:03.350 --> 00:08:06.050
different, different files or libraries out there.

00:08:06.050 --> 00:08:08.255
Okay, It's too big output,

00:08:08.255 --> 00:08:09.860
but if I do ls,

00:08:09.860 --> 00:08:14.690
again repositories there, if I go insert repository and that there are multiple,

00:08:14.690 --> 00:08:16.505
again, we have different folders.

00:08:16.505 --> 00:08:18.605
We majorly concentrate on calm.

00:08:18.605 --> 00:08:20.090
If I go in and said, Come,

00:08:20.090 --> 00:08:22.610
you can see we don't have demo company yet.

00:08:22.610 --> 00:08:25.940
Why? Because we haven't executed install command.

00:08:25.940 --> 00:08:28.310
Okay, So now again,

00:08:28.310 --> 00:08:30.995
I'm switching back to my root directory.

00:08:30.995 --> 00:08:33.080
Okay, POW dam under root.

00:08:33.080 --> 00:08:35.420
Here we have the foster demo project.

00:08:35.420 --> 00:08:37.265
If I go Insert, again,

00:08:37.265 --> 00:08:40.640
I'm going to execute the MPN install, okay?

00:08:40.640 --> 00:08:42.800
Whenever we execute the MPN install,

00:08:42.800 --> 00:08:44.660
now packages should copy it into

00:08:44.660 --> 00:08:48.680
the column location and you can see a new company called the demo company.

00:08:48.680 --> 00:08:51.785
Let's execute the MME and install command.

00:08:51.785 --> 00:08:54.440
So we are using the install goal over here.

00:08:54.440 --> 00:08:55.985
I'll read builders successful.

00:08:55.985 --> 00:08:58.430
And you can see it took only nine seconds way

00:08:58.430 --> 00:09:01.655
because most of the required packages that are already there.

00:09:01.655 --> 00:09:04.880
And if I, from the starting of this build,

00:09:04.880 --> 00:09:07.970
you can see here the Ambien installed whenever a is good,

00:09:07.970 --> 00:09:10.190
it is building the project to the project name

00:09:10.190 --> 00:09:13.565
is come demo company under the cluster demo project.

00:09:13.565 --> 00:09:17.605
And it is pulling some of the required packages and fast.

00:09:17.605 --> 00:09:21.650
It is doing that default resources and a default compel,

00:09:21.650 --> 00:09:24.560
default attest to resources under default to test,

00:09:24.560 --> 00:09:27.230
compile under default to test it has done.

00:09:27.230 --> 00:09:28.430
Once test is done,

00:09:28.430 --> 00:09:30.590
default to packaging is done. At last.

00:09:30.590 --> 00:09:32.975
It is doing that default installed, okay,

00:09:32.975 --> 00:09:37.490
which means that it has calculated that packages into the data. I am too directory.

00:09:37.490 --> 00:09:40.445
If you see here installing this is the jar file.

00:09:40.445 --> 00:09:42.560
This jar file corporate into slash route.

00:09:42.560 --> 00:09:43.280
I am too.

00:09:43.280 --> 00:09:46.340
And again, if I go back to my router directly,

00:09:46.340 --> 00:09:49.685
unless Man assay and the goto dot m2.

00:09:49.685 --> 00:09:53.870
And if I look for repositories and come here,

00:09:53.870 --> 00:09:55.400
you can see them on company.

00:09:55.400 --> 00:09:56.855
At least it was not there.

00:09:56.855 --> 00:09:58.835
Once you do the installed,

00:09:58.835 --> 00:10:00.800
it gets copied into this location.

00:10:00.800 --> 00:10:02.930
This is how Marvin Goldsworthy.

00:10:02.930 --> 00:10:06.020
But in this case we are just to pull in the code under

00:10:06.020 --> 00:10:09.110
created are executed madman commands, I'll read.

00:10:09.110 --> 00:10:13.925
So this is how we can take the code up your dollar per and build it in the build server.

00:10:13.925 --> 00:10:15.140
That's all for this lecture.

00:10:15.140 --> 00:10:17.220
See you in the next one.
