WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.300
We are at to build our foster Maven project.

00:00:03.300 --> 00:00:05.460
For that, we need Mammon goals,

00:00:05.460 --> 00:00:07.785
but we don't know what and how goals are there.

00:00:07.785 --> 00:00:10.710
We can go and check it out What and I'll goals are there.

00:00:10.710 --> 00:00:15.720
But they usually mapping goals are defined in the build lifecycle FODMAP.

00:00:15.720 --> 00:00:19.325
If I go and search for marvin build lifecycle,

00:00:19.325 --> 00:00:23.795
you can see the first link is talking about the introduction to the bill relate cycle,

00:00:23.795 --> 00:00:27.125
map and goals upset in the build delight cycle format.

00:00:27.125 --> 00:00:31.040
So we need to choose the right goals to build our project.

00:00:31.040 --> 00:00:33.260
If you want to understand that, build a lifecycle,

00:00:33.260 --> 00:00:38.255
it's just like our goals are divided into the three different bill life-cycles.

00:00:38.255 --> 00:00:40.535
One nice default, another one is clean,

00:00:40.535 --> 00:00:42.005
and another one is site.

00:00:42.005 --> 00:00:44.839
So there are three built-in build lifecycles.

00:00:44.839 --> 00:00:46.985
The default, clean and cite.

00:00:46.985 --> 00:00:49.985
Some of the important goals are displayed over here.

00:00:49.985 --> 00:00:52.730
And if you want to see what are the goals are

00:00:52.730 --> 00:00:55.670
available in each builder lifecycle are each phase.

00:00:55.670 --> 00:00:57.950
You can click on this lifecycle reference.

00:00:57.950 --> 00:00:59.750
Let me open in a new window.

00:00:59.750 --> 00:01:03.169
And if you go here, you can see lifecycle references.

00:01:03.169 --> 00:01:05.405
This is the clean lifecycle.

00:01:05.405 --> 00:01:07.355
This is the default lifecycle.

00:01:07.355 --> 00:01:10.054
And another one is site lifecycle.

00:01:10.054 --> 00:01:13.190
Okay, I'm just going to discuss about some of the

00:01:13.190 --> 00:01:17.690
important are quite commonly used goals among these lifecycles.

00:01:17.690 --> 00:01:20.330
Let's go and have your Luke of those.

00:01:20.330 --> 00:01:26.420
So these are quite commonly are important goals which we use in math when there is clean,

00:01:26.420 --> 00:01:28.640
okay, this is the goal which helps us to

00:01:28.640 --> 00:01:31.700
remove all the files are generated by the previous build.

00:01:31.700 --> 00:01:35.510
Let's assume that we are building the same code again and again in case

00:01:35.510 --> 00:01:39.125
if we want to delete all the files which are generated by the previous build,

00:01:39.125 --> 00:01:41.060
then we need to use the clean goal.

00:01:41.060 --> 00:01:42.470
Next to validate.

00:01:42.470 --> 00:01:46.655
Validate the project is correct and unnecessary information is available.

00:01:46.655 --> 00:01:47.585
It's something like that.

00:01:47.585 --> 00:01:50.180
Before building up, before compiling it,

00:01:50.180 --> 00:01:52.415
whether it contains the other information or not,

00:01:52.415 --> 00:01:54.200
it is going to display over here.

00:01:54.200 --> 00:01:57.485
Next to compel, we are going to compile the source code.

00:01:57.485 --> 00:02:01.205
It is going to compel only source code, the test code.

00:02:01.205 --> 00:02:02.750
To compile the test code,

00:02:02.750 --> 00:02:04.235
we have that test compile.

00:02:04.235 --> 00:02:06.860
So in case if we want to compare that test code,

00:02:06.860 --> 00:02:10.010
we need to use this cool next test to test to

00:02:10.010 --> 00:02:14.105
the source code whatever test cases we have written for this application,

00:02:14.105 --> 00:02:17.270
those are tested in the test phase, are tested goal.

00:02:17.270 --> 00:02:20.510
Next one is pack is it takes the compiled code and

00:02:20.510 --> 00:02:24.215
package it into its distributor format such as job.

00:02:24.215 --> 00:02:28.325
So to take the code and it is going to package it next to verify,

00:02:28.325 --> 00:02:33.215
run any checks to verify the package is valued and amidst the quality criteria,

00:02:33.215 --> 00:02:35.525
whatever packets we generated over here,

00:02:35.525 --> 00:02:37.205
it is going to verify that one.

00:02:37.205 --> 00:02:40.880
Next to install, install the package into the local repository.

00:02:40.880 --> 00:02:45.185
We talk about local repository when we are working with Marvin on Linux system.

00:02:45.185 --> 00:02:49.820
But for now just to think that it is going to store this output, our JAR file,

00:02:49.820 --> 00:02:53.150
in some local repository and for use

00:02:53.150 --> 00:02:56.795
as a dependency in the other projects locally, in our local system.

00:02:56.795 --> 00:03:01.220
If we are creating any new project there you want to use the current project,

00:03:01.220 --> 00:03:04.610
then it will be useful next to deploy copies.

00:03:04.610 --> 00:03:07.070
The final package to the remote repository for

00:03:07.070 --> 00:03:09.935
sharing with the other projects are other dollar pots.

00:03:09.935 --> 00:03:12.470
Okay, so remote repository under

00:03:12.470 --> 00:03:15.380
local repository and it will be are going to discuss over there.

00:03:15.380 --> 00:03:18.680
It is nothing but a centralized repository where we can store

00:03:18.680 --> 00:03:23.240
our files so that other projects or other people want to use it, they can use it.

00:03:23.240 --> 00:03:25.925
Even we have taken this archetype red,

00:03:25.925 --> 00:03:27.875
that is from the central repository.

00:03:27.875 --> 00:03:29.495
So somebody has created,

00:03:29.495 --> 00:03:30.845
we are just using it.

00:03:30.845 --> 00:03:32.960
That's how Marvin goals helps us.

00:03:32.960 --> 00:03:36.800
Next thing is Mab and goals are executed in the sequential format,

00:03:36.800 --> 00:03:38.720
which means that in your lifecycle,

00:03:38.720 --> 00:03:40.280
if we have the multiple goals,

00:03:40.280 --> 00:03:43.595
if we are going with the higher level of golden,

00:03:43.595 --> 00:03:46.415
previous goals are automatically executor.

00:03:46.415 --> 00:03:49.175
Getting confused, let me go back to the page again.

00:03:49.175 --> 00:03:51.785
So here if you see clean lifecycle bit,

00:03:51.785 --> 00:03:53.615
if I use the clean option,

00:03:53.615 --> 00:03:54.890
then the previous goals,

00:03:54.890 --> 00:03:58.265
whatever is there in this phase get automatically executed,

00:03:58.265 --> 00:04:01.115
which means that pre-cleaning automatically executed,

00:04:01.115 --> 00:04:02.585
then it will go to the clean.

00:04:02.585 --> 00:04:05.255
If I want to execute the complete clean lifecycle,

00:04:05.255 --> 00:04:07.505
then I can use the post clean as well.

00:04:07.505 --> 00:04:10.325
Okay, similar with default lifecycle.

00:04:10.325 --> 00:04:12.620
In default lifecycle, if I execute this one,

00:04:12.620 --> 00:04:14.705
it is going to execute only validate.

00:04:14.705 --> 00:04:18.380
If I execute the compile all the previous goals, whatever is there,

00:04:18.380 --> 00:04:22.970
validate, initialize, undermining all the goals are executed till compel goal.

00:04:22.970 --> 00:04:26.495
And if I want to execute all the goals within this phase,

00:04:26.495 --> 00:04:27.785
that is default phase,

00:04:27.785 --> 00:04:32.390
then I can execute just here deployed in these CPUs, the clean.

00:04:32.390 --> 00:04:34.550
And in this, if I use the deploy,

00:04:34.550 --> 00:04:36.395
it means that I'm using the,

00:04:36.395 --> 00:04:39.425
these two goods as well as all these goals,

00:04:39.425 --> 00:04:40.910
okay, that is how it works.

00:04:40.910 --> 00:04:42.770
Next, the site lifecycle,

00:04:42.770 --> 00:04:44.330
usually we don't use this one.

00:04:44.330 --> 00:04:46.310
This is for the documentation purpose.

00:04:46.310 --> 00:04:49.430
In case if we want to create some documentation about our project,

00:04:49.430 --> 00:04:51.469
we use the site lifecycle.

00:04:51.469 --> 00:04:51.935
Okay?

00:04:51.935 --> 00:04:53.105
This is not widely used,

00:04:53.105 --> 00:04:54.230
so we just ignore it.

00:04:54.230 --> 00:04:56.435
We are going to deal with these two phases.

00:04:56.435 --> 00:04:58.820
Under these two phases in clean fails again,

00:04:58.820 --> 00:05:01.250
we're going to use the just to clean options.

00:05:01.250 --> 00:05:03.170
Then here we are going to use

00:05:03.170 --> 00:05:06.620
different ways like in case if we want to just compile the code,

00:05:06.620 --> 00:05:10.025
we can use the compiled in case if we want to test to the company,

00:05:10.025 --> 00:05:12.050
then all these goals are executed,

00:05:12.050 --> 00:05:16.640
nothing but compilation up the source code also get executor compilation of the disk,

00:05:16.640 --> 00:05:18.095
but also get executed.

00:05:18.095 --> 00:05:20.075
If I use the clean package,

00:05:20.075 --> 00:05:22.370
it compiles it and it creates the package.

00:05:22.370 --> 00:05:23.480
If I use install,

00:05:23.480 --> 00:05:25.370
it is going to compile it.

00:05:25.370 --> 00:05:28.415
It would do the testing and introduce the packaging,

00:05:28.415 --> 00:05:32.449
and it also install it in our local repository.

00:05:32.449 --> 00:05:33.665
That's how it works.

00:05:33.665 --> 00:05:38.390
Anyway, we are going to see these important goals by executing on our project.

00:05:38.390 --> 00:05:39.830
That's all for this lecture.

00:05:39.830 --> 00:05:42.240
And see you in the next lecture.
