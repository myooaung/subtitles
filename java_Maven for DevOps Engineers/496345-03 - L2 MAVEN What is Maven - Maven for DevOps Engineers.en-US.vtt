WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.050 --> 00:00:04.260
Hello folks, thanks for enrolling for my course faster.

00:00:04.260 --> 00:00:06.120
Let's start with what is mapping.

00:00:06.120 --> 00:00:09.225
Before giving you a generic definition about Marvin,

00:00:09.225 --> 00:00:12.239
let's see what is Mab an official definition?

00:00:12.239 --> 00:00:15.960
Mapping is a software project management and competence in

00:00:15.960 --> 00:00:21.000
tool based on the concept of Project Object Model, p wm.

00:00:21.000 --> 00:00:24.450
Our palm man can manage your project build

00:00:24.450 --> 00:00:28.915
reporting under documentation from your central piece of information.

00:00:28.915 --> 00:00:32.675
Overall, it is going to take a concept of POME,

00:00:32.675 --> 00:00:34.505
our Project Object Model,

00:00:34.505 --> 00:00:36.800
and it helps us to manage project,

00:00:36.800 --> 00:00:41.345
to build reporting under documentation from your central piece of definition.

00:00:41.345 --> 00:00:45.005
Before understanding more deeply about this definition,

00:00:45.005 --> 00:00:48.800
let's go on to understand what your dollar per does doing

00:00:48.800 --> 00:00:51.560
the regular basis so that we can comfort

00:00:51.560 --> 00:00:55.100
a conclusion that how Marvin helps to your dollar per,

00:00:55.100 --> 00:00:57.860
which eventually becomes our definition.

00:00:57.860 --> 00:01:02.195
Let's go and see what are the day-to-day activities of your typical developer.

00:01:02.195 --> 00:01:05.600
I help collector quite common day-to-day activities of your dollar,

00:01:05.600 --> 00:01:10.400
but that is usually they start writing the code in his favorite IDE,

00:01:10.400 --> 00:01:14.630
then compile the code locally, tested.

00:01:14.630 --> 00:01:16.085
Once it is textured,

00:01:16.085 --> 00:01:19.430
then he created a package and deploy it in

00:01:19.430 --> 00:01:24.230
your local applications or in case if he has a local application server,

00:01:24.230 --> 00:01:28.325
just to, to validate the code is working on his local system.

00:01:28.325 --> 00:01:33.125
Once that is done, you will be pushing the working code onto the source code repository,

00:01:33.125 --> 00:01:34.490
our source code management.

00:01:34.490 --> 00:01:36.605
This is the quite common activities.

00:01:36.605 --> 00:01:37.535
What he do.

00:01:37.535 --> 00:01:40.460
But the challenge over here is while writing

00:01:40.460 --> 00:01:43.760
his application code are while working on the project,

00:01:43.760 --> 00:01:49.475
it is quite common behavior that we use some third-party libraries or packages.

00:01:49.475 --> 00:01:51.500
So whenever we want to compile,

00:01:51.500 --> 00:01:53.360
test, and create a package,

00:01:53.360 --> 00:01:58.550
we need to make sure that all the relevant packages are available to build our code.

00:01:58.550 --> 00:02:00.470
Otherwise it doesn't work right?

00:02:00.470 --> 00:02:01.760
So as a dollar per,

00:02:01.760 --> 00:02:06.409
i need to manually download all the packages which are required to run my application.

00:02:06.409 --> 00:02:09.275
Let's assume that I have downloaded and I

00:02:09.275 --> 00:02:13.040
compiled it and it's working fine and I can able to deploy it.

00:02:13.040 --> 00:02:16.175
But the problem here is in the last step again,

00:02:16.175 --> 00:02:20.600
I cannot push the R packages into the source code repository,

00:02:20.600 --> 00:02:21.770
write the name itself.

00:02:21.770 --> 00:02:23.660
It is saying that source code management,

00:02:23.660 --> 00:02:25.400
like GitHub or Bitbucket,

00:02:25.400 --> 00:02:27.020
it maintains only source code.

00:02:27.020 --> 00:02:30.095
We don't push all the third party libraries, okay,

00:02:30.095 --> 00:02:34.550
now some other one to compile it and deploy it into some other systems.

00:02:34.550 --> 00:02:35.750
How does it possible?

00:02:35.750 --> 00:02:37.190
It is difficult, right?

00:02:37.190 --> 00:02:39.470
Let's assume that you have given the EU or

00:02:39.470 --> 00:02:42.650
packages as well as part of your source code, go okay,

00:02:42.650 --> 00:02:43.745
the other party are,

00:02:43.745 --> 00:02:46.625
other team members are even I can sit there watching it,

00:02:46.625 --> 00:02:49.115
could able to build it and he deployed it.

00:02:49.115 --> 00:02:50.450
After some period of time,

00:02:50.450 --> 00:02:55.130
you started developing few other features where you need to pull the, again,

00:02:55.130 --> 00:02:59.990
latest celebrities are third-party packages into your application.

00:02:59.990 --> 00:03:02.720
Again, it became a problem that you need to download

00:03:02.720 --> 00:03:06.440
the latest packages onto your local system while doing testing.

00:03:06.440 --> 00:03:10.070
Also, you need to provide the same packages to the pupil,

00:03:10.070 --> 00:03:11.600
whoever using these code,

00:03:11.600 --> 00:03:13.655
it is quite a difficult problem, right?

00:03:13.655 --> 00:03:16.160
Instead of that one, how it will be if I give you

00:03:16.160 --> 00:03:19.970
a single file which tells about that what is the packages are required, are,

00:03:19.970 --> 00:03:23.360
what are the libraries are required to run this application and at

00:03:23.360 --> 00:03:27.500
that file itself can able to identify under downloaded those packages.

00:03:27.500 --> 00:03:28.130
Yes.

00:03:28.130 --> 00:03:30.410
That is where man comes into the picture.

00:03:30.410 --> 00:03:32.705
So Marvin can able to download

00:03:32.705 --> 00:03:37.025
all the third-party libraries which are required for your application.

00:03:37.025 --> 00:03:42.065
And it also do the compilation taste and even deployment of the applications.

00:03:42.065 --> 00:03:44.990
Not only that one, if there is any updates in

00:03:44.990 --> 00:03:48.350
the third-party libraries are packages which you are using,

00:03:48.350 --> 00:03:50.855
then you just need to update that file.

00:03:50.855 --> 00:03:55.070
It automatically downloads whenever you are compiling or testing your code.

00:03:55.070 --> 00:03:56.315
It's good, right?

00:03:56.315 --> 00:03:59.450
So Mab and can help us that building

00:03:59.450 --> 00:04:03.905
our application with the all the required packages with minimal efforts.

00:04:03.905 --> 00:04:08.630
Sharing only source code for the community are people who ever want to use

00:04:08.630 --> 00:04:10.760
your application along with other file which

00:04:10.760 --> 00:04:13.265
mentions that what libraries does it required?

00:04:13.265 --> 00:04:15.950
That file we call Desert palm dot xml.

00:04:15.950 --> 00:04:20.720
Anyway, we are going to talk about palm dot xml more detail in the later sessions.

00:04:20.720 --> 00:04:21.425
For now.

00:04:21.425 --> 00:04:22.100
Yes, ma'am.

00:04:22.100 --> 00:04:24.995
And can help it dollar per to build,

00:04:24.995 --> 00:04:27.680
deploy, test his code efficiently.

00:04:27.680 --> 00:04:30.140
Now, you may ask that how does it work in

00:04:30.140 --> 00:04:34.040
the DevOps engineer level that we are going to discuss in the next lecture.

00:04:34.040 --> 00:04:36.930
Thanks for watching and see you there.
