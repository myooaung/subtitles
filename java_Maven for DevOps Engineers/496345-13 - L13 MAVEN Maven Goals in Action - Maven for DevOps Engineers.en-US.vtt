WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.970
We have discussed some of the important goals which

00:00:02.970 --> 00:00:06.030
needed to execute our Maven project right?

00:00:06.030 --> 00:00:08.415
Now, it's time to build our application.

00:00:08.415 --> 00:00:12.225
Let's go and see what goals we can execute as part of this.

00:00:12.225 --> 00:00:14.220
Okay, so clean lifecycle.

00:00:14.220 --> 00:00:16.230
So far we haven't run this application,

00:00:16.230 --> 00:00:18.615
so there is no pint of executing the clean,

00:00:18.615 --> 00:00:22.740
let it be next to thing is in default phase we can execute any of these goals.

00:00:22.740 --> 00:00:24.000
We can go with the the compel,

00:00:24.000 --> 00:00:28.065
nothing but we are compiling the court RLC even we can go with the Validate.

00:00:28.065 --> 00:00:31.130
Let's go with the validate and we'll see what does it do.

00:00:31.130 --> 00:00:34.145
So I'm just copying this goal to our, to the typo,

00:00:34.145 --> 00:00:37.310
valued it and run it whenever we are running, what does you to do?

00:00:37.310 --> 00:00:39.770
It is going to create the console file and you can see

00:00:39.770 --> 00:00:42.740
that it has been executed and building successful.

00:00:42.740 --> 00:00:45.140
It's just a scan and this is

00:00:45.140 --> 00:00:48.440
the project it is going to scan and it has the other information,

00:00:48.440 --> 00:00:52.595
nothing but this is the package name and we are going to create a jar out of it.

00:00:52.595 --> 00:00:54.140
Okay, How does it identify?

00:00:54.140 --> 00:00:57.740
We are going to talk about that in your work and there is some warning we can

00:00:57.740 --> 00:01:02.000
just ignore because it could be due to what shun are I have installed on my laptop.

00:01:02.000 --> 00:01:02.645
Okay.

00:01:02.645 --> 00:01:05.855
Which means that validate phases successfully completed.

00:01:05.855 --> 00:01:08.600
It's fine to execute our application.

00:01:08.600 --> 00:01:10.400
Now let's run this project again.

00:01:10.400 --> 00:01:12.365
This time we are going to compile it.

00:01:12.365 --> 00:01:16.235
So Run As and if I choose this option,

00:01:16.235 --> 00:01:19.550
again, it is going to execute the previous goal.

00:01:19.550 --> 00:01:21.995
I don't want to execute the same goal again,

00:01:21.995 --> 00:01:23.375
I want to change my goal.

00:01:23.375 --> 00:01:26.960
In that case, you can go with a map and build in three dots.

00:01:26.960 --> 00:01:29.195
Now let's execute the goal with the company.

00:01:29.195 --> 00:01:31.475
Before executing with the completion,

00:01:31.475 --> 00:01:34.280
Let's go to our directory where we have created

00:01:34.280 --> 00:01:37.970
this project and we'll see what changes we can observe over there.

00:01:37.970 --> 00:01:40.085
So I'm just going to open this,

00:01:40.085 --> 00:01:43.025
that these relax user.

00:01:43.025 --> 00:01:45.170
So this is the directory.

00:01:45.170 --> 00:01:46.835
I'm just going to minimize it.

00:01:46.835 --> 00:01:48.035
So you can see here,

00:01:48.035 --> 00:01:49.835
this is the customer demo project.

00:01:49.835 --> 00:01:51.095
And if I open here,

00:01:51.095 --> 00:01:52.355
this is the content.

00:01:52.355 --> 00:01:54.005
What is there over here?

00:01:54.005 --> 00:01:55.895
And there is a target directory.

00:01:55.895 --> 00:01:57.770
This is where all our class,

00:01:57.770 --> 00:01:59.585
our test cases compared one,

00:01:59.585 --> 00:02:03.425
nothing but what is the outcome of our app.js?

00:02:03.425 --> 00:02:05.990
App.js is stored over here,

00:02:05.990 --> 00:02:09.140
okay, enabled by default what happens in the eclipse?

00:02:09.140 --> 00:02:12.890
It is automatically compile the code and it stores the information.

00:02:12.890 --> 00:02:17.630
That is the reason you can see the AP test two dot class file is there already, okay,

00:02:17.630 --> 00:02:20.435
but usually it should not be there, okay,

00:02:20.435 --> 00:02:25.130
this target to directly get updated only once we compile the code.

00:02:25.130 --> 00:02:26.705
So now what I will do,

00:02:26.705 --> 00:02:29.435
I'm going to compile this code and we can see the,

00:02:29.435 --> 00:02:30.965
this dead get updated.

00:02:30.965 --> 00:02:35.570
Okay, let me open it again and let me show you the date and time.

00:02:35.570 --> 00:02:41.615
So it is showing you that 85 and it should get updated once we compile our code.

00:02:41.615 --> 00:02:43.970
So let's go back to our goals again.

00:02:43.970 --> 00:02:46.880
So the stem, I'm taking the campaign goal,

00:02:46.880 --> 00:02:49.174
go back to Eclipse.

00:02:49.174 --> 00:02:51.155
And q, the campaign goal.

00:02:51.155 --> 00:02:55.370
And that are made. And at this time the compilation should be successful.

00:02:55.370 --> 00:02:58.460
You can see here it's just successfully completed.

00:02:58.460 --> 00:03:00.425
And if I go to Target or directory,

00:03:00.425 --> 00:03:02.195
I could able to see the content.

00:03:02.195 --> 00:03:07.310
But any way I can go to the Explorer and you can see the stem target directory, how

00:03:07.310 --> 00:03:08.510
All the data, okay,

00:03:08.510 --> 00:03:10.370
These classes are updated.

00:03:10.370 --> 00:03:13.670
I hope I will go in to the class file.

00:03:13.670 --> 00:03:14.930
You can see 90 clock,

00:03:14.930 --> 00:03:17.195
it has been updated, that is the current datetime.

00:03:17.195 --> 00:03:21.050
And if I go back to again, my target directory,

00:03:21.050 --> 00:03:24.110
apart from this few other directories also got created,

00:03:24.110 --> 00:03:26.285
even test cases also got creator.

00:03:26.285 --> 00:03:28.760
This is how we can compel the content.

00:03:28.760 --> 00:03:33.950
Now, again, we are going to use the one more goal that these tests to compel.

00:03:33.950 --> 00:03:36.470
So now we are going to execute the test compile.

00:03:36.470 --> 00:03:37.790
So test compile is,

00:03:37.790 --> 00:03:43.205
I'm just copying this one and go back to our Eclipse and go to project,

00:03:43.205 --> 00:03:46.310
run on a map and goals under the stem,

00:03:46.310 --> 00:03:49.460
I'm going to do the test compelled whenever I do test,

00:03:49.460 --> 00:03:51.095
going to validate it,

00:03:51.095 --> 00:03:52.535
compile it, and test it.

00:03:52.535 --> 00:03:55.685
Nothing but previous, all goals should get executed.

00:03:55.685 --> 00:03:57.440
Okay, Let's run this one.

00:03:57.440 --> 00:03:59.600
And if you see this is building successful,

00:03:59.600 --> 00:04:02.075
you can see default to test companies then,

00:04:02.075 --> 00:04:03.305
and if I go up,

00:04:03.305 --> 00:04:05.855
I could able to see the dilation as well.

00:04:05.855 --> 00:04:08.270
Default resource, your default compiled.

00:04:08.270 --> 00:04:13.925
So it compiled our code as well as it is also compiled our test compile.

00:04:13.925 --> 00:04:15.455
Okay, Both has done.

00:04:15.455 --> 00:04:17.300
Now let's see the another goal.

00:04:17.300 --> 00:04:19.670
That is we are going to test our code.

00:04:19.670 --> 00:04:20.975
Whenever we do the test,

00:04:20.975 --> 00:04:24.410
you should compile the source code as well as the test cases.

00:04:24.410 --> 00:04:25.880
Then it will do that test.

00:04:25.880 --> 00:04:29.105
Now again, I'm going back to our Eclipse.

00:04:29.105 --> 00:04:33.050
Right-click on the project and Hello, Math and build.

00:04:33.050 --> 00:04:35.360
And I'm going to the test.

00:04:35.360 --> 00:04:37.130
Okay. I'm going to the test.

00:04:37.130 --> 00:04:40.280
So we are testing the court and the well testing it.

00:04:40.280 --> 00:04:42.410
You should do the compilation of

00:04:42.410 --> 00:04:46.010
the source code as well as the test cases didn't need to do the testing.

00:04:46.010 --> 00:04:49.025
So you can see here it is doing the testing.

00:04:49.025 --> 00:04:50.375
These are the test cases.

00:04:50.375 --> 00:04:53.075
We have only one test case under that is successful.

00:04:53.075 --> 00:04:57.035
That is the reason building successful and be pike scroll down.

00:04:57.035 --> 00:04:59.255
You can see that default to test compile,

00:04:59.255 --> 00:05:02.945
it compelled the test cases as well as the source code as well.

00:05:02.945 --> 00:05:05.105
Okay, So this is how we to do,

00:05:05.105 --> 00:05:08.300
and this is the building successful under total time,

00:05:08.300 --> 00:05:11.285
how much time it took and when you've got finished.

00:05:11.285 --> 00:05:14.105
All this information is displayed over here.

00:05:14.105 --> 00:05:17.675
Next, we are going to execute the packages goal.

00:05:17.675 --> 00:05:19.895
And this term, whenever we are doing,

00:05:19.895 --> 00:05:23.420
we are going to use the clean lifecycle as well. Why?

00:05:23.420 --> 00:05:26.630
Because we have the information which is stored in

00:05:26.630 --> 00:05:30.725
the previous builds and all this information keep on updating,

00:05:30.725 --> 00:05:34.610
but I don't want to do Sometimes what happens if we don't use the clean?

00:05:34.610 --> 00:05:38.750
It is not going to take the latest code way because it thinks that okay,

00:05:38.750 --> 00:05:42.080
How the same files existing and it start compiling it.

00:05:42.080 --> 00:05:46.835
So it's a best practice to use the clean then you were default goal.

00:05:46.835 --> 00:05:49.280
So I'm going to use the clean,

00:05:49.280 --> 00:05:54.305
the stamp along with our package around as Marvin build.

00:05:54.305 --> 00:05:57.620
Clean along with our PAC is cool.

00:05:57.620 --> 00:05:59.555
Okay, so now what happens?

00:05:59.555 --> 00:06:03.905
It is going to clean the previous build files and it creates the new fails.

00:06:03.905 --> 00:06:04.505
Okay?

00:06:04.505 --> 00:06:05.960
So if I go up,

00:06:05.960 --> 00:06:07.250
you can see the goals,

00:06:07.250 --> 00:06:09.035
whatever is executer earlier,

00:06:09.035 --> 00:06:11.585
there was no exclusion of DePaul to clean.

00:06:11.585 --> 00:06:14.194
But this time clean goal has been executed.

00:06:14.194 --> 00:06:17.960
Then compile, test to resources and the test compile.

00:06:17.960 --> 00:06:20.090
And test is successful then.

00:06:20.090 --> 00:06:21.635
So it is doing the packaging.

00:06:21.635 --> 00:06:23.900
And you can see here it created a building

00:06:23.900 --> 00:06:27.125
your JAR file and the job file is stored over here.

00:06:27.125 --> 00:06:30.005
In this location. The JAR file has been stored,

00:06:30.005 --> 00:06:32.600
but so far I couldn't able to create

00:06:32.600 --> 00:06:35.210
the JAR file because we haven't used the package. Cool.

00:06:35.210 --> 00:06:37.130
Now we have use of the packets goal.

00:06:37.130 --> 00:06:39.800
That is the reason it created the package autopilot.

00:06:39.800 --> 00:06:44.660
And you can see the package location that is target in the target directory, its creator.

00:06:44.660 --> 00:06:48.500
And if I go here and go to targets, and you can see here,

00:06:48.500 --> 00:06:53.195
it created that foster demo project hyphen washing off the package.

00:06:53.195 --> 00:06:55.160
And this is the artifact ID, right?

00:06:55.160 --> 00:06:59.525
So artifact ID is used to while creating the outcome of our build.

00:06:59.525 --> 00:07:04.460
Okay, So now packets we have executor a class we can execute the install under deploy.

00:07:04.460 --> 00:07:09.080
But now it doesn't make sense until we discuss about the local and remote repository.

00:07:09.080 --> 00:07:13.430
We are going to execute these on the Linux system or the time we can see.

00:07:13.430 --> 00:07:17.390
So that's how we can use the goals while building our map in court.

00:07:17.390 --> 00:07:18.590
That's all for this lecture.

00:07:18.590 --> 00:07:20.730
See you in the next lecture.
