WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.140 --> 00:00:04.185
Hello folks, In previous lecture we have created a,

00:00:04.185 --> 00:00:09.465
our second demo project by using the archetype and that this project or type is web app.

00:00:09.465 --> 00:00:11.685
Now I'm going insert to my project,

00:00:11.685 --> 00:00:14.460
that is second demo project.

00:00:14.460 --> 00:00:17.910
And if I go Insert over here you can see palm dot xml.

00:00:17.910 --> 00:00:21.195
And the assad sees that you can just execute the tree

00:00:21.195 --> 00:00:24.945
on this directory and it will list out what content is there.

00:00:24.945 --> 00:00:27.010
You can see palm dot xml is there.

00:00:27.010 --> 00:00:31.370
There is a SRC main web app and it doesn't have any test cases.

00:00:31.370 --> 00:00:34.265
It just how the only SO score.

00:00:34.265 --> 00:00:36.035
Nothing but application logic.

00:00:36.035 --> 00:00:37.775
If we need test cases,

00:00:37.775 --> 00:00:40.460
maybe dollar cost has to write the test cases.

00:00:40.460 --> 00:00:43.625
As a DevOps engineer, we don't write the test cases anyway.

00:00:43.625 --> 00:00:46.475
Now, I'm just trying to open and

00:00:46.475 --> 00:00:49.745
understand the what is the content inside of the palm dot XML.

00:00:49.745 --> 00:00:51.815
So if I open palm dot xml,

00:00:51.815 --> 00:00:53.645
it has some of the information.

00:00:53.645 --> 00:00:55.430
So we'll try to understand some of

00:00:55.430 --> 00:00:58.925
the important parameters in the palm dot xml once again quickly.

00:00:58.925 --> 00:01:03.155
So this is the palm dot xml version that is wore pants 0 dot-dot-dot.

00:01:03.155 --> 00:01:05.150
So model Watson.

00:01:05.150 --> 00:01:08.420
Next group ID. You can see what is the information we have

00:01:08.420 --> 00:01:12.550
provided artifact ID under what Shan id.

00:01:12.550 --> 00:01:17.230
And one extra entry you can see here packaging in our previous palm dot xml,

00:01:17.230 --> 00:01:18.865
there is no packaging.

00:01:18.865 --> 00:01:21.610
If we don't specify any packaging by default,

00:01:21.610 --> 00:01:23.020
it to treat it as a JAR file,

00:01:23.020 --> 00:01:25.960
but in this case, it comes with the packaging as aware,

00:01:25.960 --> 00:01:28.044
which means that it is a web application.

00:01:28.044 --> 00:01:31.540
So this packaging will tell us that what kind of output it is going

00:01:31.540 --> 00:01:35.125
to generate it next to the name of the project.

00:01:35.125 --> 00:01:39.580
This is the one. And if we scroll down properties, we are ignoring it.

00:01:39.580 --> 00:01:41.200
Not much important for us.

00:01:41.200 --> 00:01:44.245
Let's scroll down little bit here you can see dependencies.

00:01:44.245 --> 00:01:47.215
We still have the JUnit entry over here.

00:01:47.215 --> 00:01:49.510
It comes as a Maven dependency.

00:01:49.510 --> 00:01:51.615
Then if you see build,

00:01:51.615 --> 00:01:54.110
build, under Build, you can see the plugins.

00:01:54.110 --> 00:01:59.135
Plugins nothing but the goals indirectly reach goals it is going to execute.

00:01:59.135 --> 00:02:01.040
And whenever we execute the goals,

00:02:01.040 --> 00:02:03.530
what is the libraries are necessary to execute

00:02:03.530 --> 00:02:06.095
those goals are what is the packages are required.

00:02:06.095 --> 00:02:08.060
So we are executing clean red.

00:02:08.060 --> 00:02:09.620
So whenever we execute clean,

00:02:09.620 --> 00:02:11.135
this is the package, our goal,

00:02:11.135 --> 00:02:15.725
it is going to call internally and similar where resources compiler,

00:02:15.725 --> 00:02:17.780
and whenever we do test cases,

00:02:17.780 --> 00:02:21.035
please remember that it is going to use the sure-fire plug-in.

00:02:21.035 --> 00:02:25.925
Okay? This is the plug-in is useful for the test cases and it is generating the web.

00:02:25.925 --> 00:02:28.505
So this is the required Marvin,

00:02:28.505 --> 00:02:32.705
Marvin install plugin whenever we execute to install, map and apply.

00:02:32.705 --> 00:02:34.490
So all the important goals,

00:02:34.490 --> 00:02:36.890
what we specify those goals,

00:02:36.890 --> 00:02:38.840
the plugins are available in the backend.

00:02:38.840 --> 00:02:41.195
Those you can see under the Build option.

00:02:41.195 --> 00:02:44.225
Okay, now let's try to build this application.

00:02:44.225 --> 00:02:46.550
So first time we are building this application,

00:02:46.550 --> 00:02:51.635
That's the reason whatever packages it required school from the Maven central repository,

00:02:51.635 --> 00:02:56.105
of course it is going to take your time comparatively subsequent builds.

00:02:56.105 --> 00:02:58.565
Anyway, let me clean the screen,

00:02:58.565 --> 00:03:02.280
your list, and let's execute the Ambien clean.

00:03:02.280 --> 00:03:03.340
Installed.

00:03:03.340 --> 00:03:05.575
Okay, So we'll see,

00:03:05.575 --> 00:03:08.350
so let's wait for a while until it gets complete.

00:03:08.350 --> 00:03:11.245
Okay. Most of the files has been pulled.

00:03:11.245 --> 00:03:14.170
That's the reason many goals are completed quickly.

00:03:14.170 --> 00:03:18.385
And it took 12 seconds to complete because I'll the goals,

00:03:18.385 --> 00:03:22.479
it's how almost everything in that data M2 local repository.

00:03:22.479 --> 00:03:24.925
And if I execute again the same command,

00:03:24.925 --> 00:03:27.670
you can see not even take 12 seconds.

00:03:27.670 --> 00:03:28.570
This time.

00:03:28.570 --> 00:03:31.765
You can see this time it is completed within three seconds.

00:03:31.765 --> 00:03:32.215
Okay?

00:03:32.215 --> 00:03:35.215
Anyway, if we tried to understand the output, okay,

00:03:35.215 --> 00:03:38.560
it's done the cleaning the existing target file.

00:03:38.560 --> 00:03:41.185
And it's test compile tests.

00:03:41.185 --> 00:03:43.240
And you can see there is no tests.

00:03:43.240 --> 00:03:47.990
Clearly it is saying that no tests to run because we haven't written any test cases.

00:03:47.990 --> 00:03:50.600
And it is building your profile and it is deploying

00:03:50.600 --> 00:03:53.540
the Rehfeld's are not installing our Pelham,

00:03:53.540 --> 00:03:55.265
our dot m2 directory.

00:03:55.265 --> 00:03:56.810
Okay, That's how it works.

00:03:56.810 --> 00:04:01.400
Now, let me do a small change that if

00:04:01.400 --> 00:04:05.780
I open my palm dot xml and if I remove the dependencies,

00:04:05.780 --> 00:04:09.050
nothing but we are not running any test cases.

00:04:09.050 --> 00:04:11.600
So if I remove the plugin,

00:04:11.600 --> 00:04:13.565
will see what will happen.

00:04:13.565 --> 00:04:14.195
Okay?

00:04:14.195 --> 00:04:16.565
There is no dependencies for us. Okay?

00:04:16.565 --> 00:04:18.080
I how remote everything.

00:04:18.080 --> 00:04:21.695
And if I do cat home.html,

00:04:21.695 --> 00:04:24.350
you cannot able to see any dependencies.

00:04:24.350 --> 00:04:26.885
Let me try to run the same command.

00:04:26.885 --> 00:04:29.255
Again. That is Marvin clean install.

00:04:29.255 --> 00:04:31.430
We are trying to build it again.

00:04:31.430 --> 00:04:35.480
Okay, Now also build a successful way because there is no test cases,

00:04:35.480 --> 00:04:39.035
so there is no point of making it as a dependency.

00:04:39.035 --> 00:04:41.450
But whereas if I go to my previous project,

00:04:41.450 --> 00:04:43.400
nothing but in my first project,

00:04:43.400 --> 00:04:44.750
if I go here,

00:04:44.750 --> 00:04:46.385
if I do three,

00:04:46.385 --> 00:04:48.230
if I go to SRC,

00:04:48.230 --> 00:04:49.580
we have test cases.

00:04:49.580 --> 00:04:52.985
If I try to delete the same content over here,

00:04:52.985 --> 00:04:54.515
VA palm dot xml,

00:04:54.515 --> 00:04:56.045
this is on Project one.

00:04:56.045 --> 00:04:56.735
Okay?

00:04:56.735 --> 00:05:01.130
If we try to delete the dependencies and we'll see what will happen over here.

00:05:01.130 --> 00:05:03.800
Okay, This is a jar under here.

00:05:03.800 --> 00:05:05.795
If you see there is no packaging option.

00:05:05.795 --> 00:05:08.960
That's the reason it is going to take the default packaging.

00:05:08.960 --> 00:05:09.470
Okay?

00:05:09.470 --> 00:05:13.250
So default packaging is JAR packaging indices the 18 is

00:05:13.250 --> 00:05:17.015
taking even it is going to take all these back-end plugins,

00:05:17.015 --> 00:05:20.195
even though we thought these contents still we can execute, okay?

00:05:20.195 --> 00:05:24.650
But it is just too in case if you wish to change the Watson's, we can do that one.

00:05:24.650 --> 00:05:26.735
So let's try to save it.

00:05:26.735 --> 00:05:33.065
And I'm going to execute the Jacobian clean install, okay?

00:05:33.065 --> 00:05:37.190
This time, of course you're going to fail because we have test cases,

00:05:37.190 --> 00:05:41.105
but there is no appropriate plugin to run this test cases.

00:05:41.105 --> 00:05:44.810
You can see here build is failed and failed to execute the goal.

00:05:44.810 --> 00:05:46.070
And if you see the goal,

00:05:46.070 --> 00:05:48.530
Marvin compiler plug-in test completed

00:05:48.530 --> 00:05:51.635
so it could not have built a compile the code at all.

00:05:51.635 --> 00:05:56.135
That is the reason we need to add the proper dependencies to run our application.

00:05:56.135 --> 00:05:57.950
So to add it back, of course,

00:05:57.950 --> 00:06:01.010
I need to find out the dependency plugins so far

00:06:01.010 --> 00:06:04.310
that I'm going to search for J Unit 2 repo.

00:06:04.310 --> 00:06:05.420
You play do.

00:06:05.420 --> 00:06:08.840
You can see J unit under

00:06:08.840 --> 00:06:13.445
the latest version is for dot-dot-dot and actually we were using for 11, right?

00:06:13.445 --> 00:06:20.510
Okay, so let me take the latest torsion and let me add it as and the dependencies.

00:06:20.510 --> 00:06:23.420
So I'm just adding it.

00:06:23.420 --> 00:06:26.315
So home.html.

00:06:26.315 --> 00:06:29.300
And after properties here,

00:06:29.300 --> 00:06:33.305
I'm going to mention that these dependencies we want to do.

00:06:33.305 --> 00:06:36.875
Let's copy it, okay?

00:06:36.875 --> 00:06:40.920
But it should be instead the dependencies, okay?

00:06:42.640 --> 00:06:47.700
And again, it should be closed.

00:06:48.310 --> 00:06:51.815
Alright, so now what we are doing,

00:06:51.815 --> 00:06:55.205
we are using the latest version of JUnit plug-in.

00:06:55.205 --> 00:06:59.345
Let me save it, and let's execute the same command.

00:06:59.345 --> 00:07:01.295
This time it should be successful.

00:07:01.295 --> 00:07:06.425
There is no any syntax errors in our home.html file.

00:07:06.425 --> 00:07:10.250
Of course, this term that test is successful and build also successful.

00:07:10.250 --> 00:07:11.750
Here you can see as I said,

00:07:11.750 --> 00:07:14.915
that JUnit is going to use the shoot her plugin in the backend red,

00:07:14.915 --> 00:07:16.970
you can see here should put a plug-in,

00:07:16.970 --> 00:07:18.605
even though we call it as a goal.

00:07:18.605 --> 00:07:20.990
In the back-end, it is going to call the compiler.

00:07:20.990 --> 00:07:23.945
Okay, Let's do one last thing that is we are going to

00:07:23.945 --> 00:07:27.275
edit our palm dot xml and we'll delete this one.

00:07:27.275 --> 00:07:30.260
Okay, I'll these, what I can say, build plugins.

00:07:30.260 --> 00:07:31.340
These all are optionals.

00:07:31.340 --> 00:07:33.635
I said, so let me delete it,

00:07:33.635 --> 00:07:35.375
okay, I deleted it.

00:07:35.375 --> 00:07:37.190
And if I do palm dot xml,

00:07:37.190 --> 00:07:39.695
it contains only the information of

00:07:39.695 --> 00:07:43.565
our project as well as the properties under dependencies.

00:07:43.565 --> 00:07:45.725
There is no default plugins.

00:07:45.725 --> 00:07:48.290
Now let's execute the command that is clean install

00:07:48.290 --> 00:07:51.290
nothing but delete the previous build and create the new one.

00:07:51.290 --> 00:07:53.569
And this time also it should be successful.

00:07:53.569 --> 00:07:55.640
Okay, I have deleted all these plugins,

00:07:55.640 --> 00:07:58.610
so it might be going to the remote repository to

00:07:58.610 --> 00:08:01.700
pull the latest one because the palm dot xml,

00:08:01.700 --> 00:08:04.925
whatever information it contents could be the older wash hands.

00:08:04.925 --> 00:08:07.400
Alright, even though I have deleted our build,

00:08:07.400 --> 00:08:09.290
an imput, still the building successful,

00:08:09.290 --> 00:08:15.080
but this time it pulled a lot of repositories are libraries from the remote repository.

00:08:15.080 --> 00:08:16.970
Why? Because in our palm dot xml,

00:08:16.970 --> 00:08:20.270
the plugins which we might use could be the older version.

00:08:20.270 --> 00:08:22.445
This time, we didn't mention anything.

00:08:22.445 --> 00:08:27.065
That's the reason it went to the remote repository and pull the latest towards shunts.

00:08:27.065 --> 00:08:29.450
That is the reason it took little bit of time.

00:08:29.450 --> 00:08:30.545
And if I scroll down,

00:08:30.545 --> 00:08:31.955
you'll see the total time.

00:08:31.955 --> 00:08:33.620
It took 41 seconds.

00:08:33.620 --> 00:08:36.140
If I execute that same command, again, the stamp,

00:08:36.140 --> 00:08:39.170
it should not download any packages and it

00:08:39.170 --> 00:08:42.200
could be quite faster than it leaves only three seconds.

00:08:42.200 --> 00:08:46.070
Okay? And you can see here it is using the sharper plug enough

00:08:46.070 --> 00:08:50.150
to D2L and the compiler plug-in three dot 12 0.6s.

00:08:50.150 --> 00:08:51.980
Alright, that's all for this lecture,

00:08:51.980 --> 00:08:54.480
are to see you in the next lecture.
