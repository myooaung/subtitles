WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.940
In previous lecture, we were talking about mapping

00:00:02.940 --> 00:00:05.535
how it will be useful at the dollar per level.

00:00:05.535 --> 00:00:07.965
It helps him that compile the code,

00:00:07.965 --> 00:00:11.265
downloading all the dependencies and building the code,

00:00:11.265 --> 00:00:13.170
and even packaging the code.

00:00:13.170 --> 00:00:16.395
But how does it work at the DevOps engineer level?

00:00:16.395 --> 00:00:20.790
Now let's see that once dollar per is tested his code and if it is working

00:00:20.790 --> 00:00:25.200
when obviously you need to check in his quote into the source code management.

00:00:25.200 --> 00:00:29.385
In this example, just consider that a good piazza source code management.

00:00:29.385 --> 00:00:31.050
Once it is pushed.

00:00:31.050 --> 00:00:32.640
As a DevOps engineer, again,

00:00:32.640 --> 00:00:37.495
you need to take that code and we need to build the artifacts out of your trade.

00:00:37.495 --> 00:00:41.765
Artifacts, nothing but the outcome of the source code.

00:00:41.765 --> 00:00:43.880
So whenever you are doing that,

00:00:43.880 --> 00:00:47.660
even you need to know that what Amdahl dependencies does it required?

00:00:47.660 --> 00:00:50.075
Once you have taken those dependencies,

00:00:50.075 --> 00:00:51.665
you need to build it.

00:00:51.665 --> 00:00:55.130
Once you build it, you need to run unit test cases.

00:00:55.130 --> 00:00:56.375
Once that is done,

00:00:56.375 --> 00:00:58.835
you may use it as your deployment as well.

00:00:58.835 --> 00:01:00.785
Then who will do all the stuff?

00:01:00.785 --> 00:01:03.380
That is where Marvin comes into the picture.

00:01:03.380 --> 00:01:07.190
So mapping helps even at DevOps environment level,

00:01:07.190 --> 00:01:09.290
to download the dependencies,

00:01:09.290 --> 00:01:10.400
build the unit, test,

00:01:10.400 --> 00:01:12.110
and deploy the applications.

00:01:12.110 --> 00:01:15.470
So anyway, we are going to see how we are going to use

00:01:15.470 --> 00:01:19.595
Maren at the dollar per level and also DevOps engineer level.

00:01:19.595 --> 00:01:22.085
Whenever we are working at a developer level,

00:01:22.085 --> 00:01:24.905
I'm going to use Marvin with the eclipse.

00:01:24.905 --> 00:01:27.320
So we will be installing Eclipse in

00:01:27.320 --> 00:01:30.770
our local system in the sense I am going to install on my laptop.

00:01:30.770 --> 00:01:33.575
And we'll start writing some Java applications.

00:01:33.575 --> 00:01:36.875
Don't worry, I'm not going to read any complicated code.

00:01:36.875 --> 00:01:39.320
We can get the sum templates.

00:01:39.320 --> 00:01:43.370
I'm using those templates and we'll see how your developer is going to

00:01:43.370 --> 00:01:47.570
use the marvin then with the help of that one as a DevOps engineer,

00:01:47.570 --> 00:01:50.540
what we can do at the DevOps environment level.

00:01:50.540 --> 00:01:52.655
I'll read that cell for this lecture.

00:01:52.655 --> 00:01:55.850
In next lecture I'm going to talk about what resources do you

00:01:55.850 --> 00:01:59.390
need and where do you get help if you struck up some there.

00:01:59.390 --> 00:02:02.250
Thanks for watching and see you there.
