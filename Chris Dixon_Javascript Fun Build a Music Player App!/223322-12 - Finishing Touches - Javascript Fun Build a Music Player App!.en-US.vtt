WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.680 --> 00:00:05.160
Let's now finish off this project by adding some finishing touches.

00:00:05.160 --> 00:00:07.530
We're going to add some Google fonts.

00:00:07.530 --> 00:00:09.840
We're going to also add a small animation to

00:00:09.840 --> 00:00:13.980
our headphones each time a audio track has been selected.

00:00:13.980 --> 00:00:18.825
We're also going to fix a small issue too when selecting one of our songs.

00:00:18.825 --> 00:00:21.435
First of all, let's go over to Google Fonts.

00:00:21.435 --> 00:00:24.210
I'm going to grab a font for this project.

00:00:24.210 --> 00:00:26.490
The font which I'm going to select for

00:00:26.490 --> 00:00:29.130
this project is going to be called Permanent Marker.

00:00:29.130 --> 00:00:32.595
I'm looking at this just like in the earlier projects.

00:00:32.595 --> 00:00:35.580
All we need to do is to select our style,

00:00:35.580 --> 00:00:42.400
click on the "Embed", and then bring over our link to our Index page.

00:00:44.600 --> 00:00:47.805
After this, we also need our CSS rules,

00:00:47.805 --> 00:00:50.200
so copy this section,

00:00:50.390 --> 00:00:53.715
at the top of our style sheets,

00:00:53.715 --> 00:00:57.220
we can then paste this into our HTML,

00:00:57.470 --> 00:01:01.080
save this, and refresh the music player,

00:01:01.080 --> 00:01:03.930
and our font is now taking effect.

00:01:03.930 --> 00:01:08.205
By default, the letter spacing for this font is pretty squashed together.

00:01:08.205 --> 00:01:09.775
To give this some more spacing,

00:01:09.775 --> 00:01:12.665
I'm going to add a property called letter spacing,

00:01:12.665 --> 00:01:15.879
and then give this some spacing of four pixels.

00:01:15.879 --> 00:01:19.579
Next, I'm going to add a small pulse animation to our headphones,

00:01:19.579 --> 00:01:23.200
each time the user clicks on any of these songs.

00:01:23.200 --> 00:01:25.160
To do this over in our script,

00:01:25.160 --> 00:01:27.770
we're going to add a new class to our headphones image,

00:01:27.770 --> 00:01:31.720
and then we can set this animation over in our style sheet.

00:01:31.720 --> 00:01:33.420
To grab our headphone's image,

00:01:33.420 --> 00:01:35.715
we can add an ID to this element,

00:01:35.715 --> 00:01:38.590
so ID of headphones.

00:01:38.870 --> 00:01:41.880
Then we can go to our script,

00:01:41.880 --> 00:01:44.740
and add a new class name to these elements,

00:01:44.740 --> 00:01:47.755
each time a user clicks on any of these songs,

00:01:47.755 --> 00:01:50.475
right Right the end of this function.

00:01:50.475 --> 00:01:52.860
Let's select the documents,

00:01:52.860 --> 00:01:55.185
and then we can use getElementById,

00:01:55.185 --> 00:01:57.060
or also a querySelector,

00:01:57.060 --> 00:01:58.950
just like we used earlier.

00:01:58.950 --> 00:02:02.020
The ID was headphones,

00:02:03.050 --> 00:02:08.510
grab our classList, and then we can add a new property called pulse.

00:02:10.880 --> 00:02:14.155
This is grabbing our headphone's image.

00:02:14.155 --> 00:02:17.005
We then add in a new classList of pulse,

00:02:17.005 --> 00:02:20.195
which we can now use over in our style sheets.

00:02:20.195 --> 00:02:23.320
Down at the very bottom,

00:02:24.900 --> 00:02:28.165
the animation name, which is going to be called pulse;

00:02:28.165 --> 00:02:30.695
I'm going to create this in just a second.

00:02:30.695 --> 00:02:36.865
Then the duration of this animation is going to be over 0.4 seconds.

00:02:36.865 --> 00:02:39.790
For this to work, we also need to create our keyframes,

00:02:39.790 --> 00:02:42.110
that is pulse animation.

00:02:46.160 --> 00:02:48.360
We use the from section,

00:02:48.360 --> 00:02:51.330
and this is for the start of our animation.

00:02:51.330 --> 00:02:56.680
All we're going to do inside here here is to set the transform and the scale property,

00:02:56.680 --> 00:02:58.885
to be a value of one.

00:02:58.885 --> 00:03:04.310
To begin, this is going to be exactly the same size as originally was,

00:03:04.310 --> 00:03:08.145
halfway through, which is going to be 50 percent.

00:03:08.145 --> 00:03:14.585
We'll then set the transform to be a scale value of 0.9.

00:03:14.585 --> 00:03:16.600
To end our transition,

00:03:16.600 --> 00:03:18.685
we're going to set the to value,

00:03:18.685 --> 00:03:24.125
and this is going to transform our scale back to our original value of one.

00:03:24.125 --> 00:03:26.320
This is only a subtle change.

00:03:26.320 --> 00:03:29.595
We're going to go from the original size to 90 percent,

00:03:29.595 --> 00:03:31.805
and then back to the original size.

00:03:31.805 --> 00:03:35.950
This will happen over a duration of 0.4 seconds.

00:03:35.950 --> 00:03:39.540
Give this a save, and we can try this out over in the browser.

00:03:39.540 --> 00:03:43.710
Let's click our first song, and we see see pulse.

00:03:43.710 --> 00:03:46.130
But now if we click on any other song,

00:03:46.130 --> 00:03:48.895
we don't see the animation taking place.

00:03:48.895 --> 00:03:51.425
This is because back over in our script,

00:03:51.425 --> 00:03:52.805
we add in a class,

00:03:52.805 --> 00:03:55.070
but each time we select a new song,

00:03:55.070 --> 00:03:58.730
we also need to remove this classroom any of the elements.

00:03:58.730 --> 00:04:00.470
This is going to be very similar,

00:04:00.470 --> 00:04:03.310
so we can copy this very last line,

00:04:03.310 --> 00:04:06.120
paste this at the started function.

00:04:06.120 --> 00:04:10.630
But this time rather than adding our class, we're going to remove.

00:04:10.630 --> 00:04:14.130
Let's try this; click on any song,

00:04:14.130 --> 00:04:16.440
our pulse animation works.

00:04:16.440 --> 00:04:18.315
Let's try second one,

00:04:18.315 --> 00:04:22.135
and this works for each item which we click on.

00:04:22.135 --> 00:04:27.155
The very last thing we're going to do is to fix an issue when selecting our songs.

00:04:27.155 --> 00:04:30.855
This may, or may not be an issue which you've uncovered just yet.

00:04:30.855 --> 00:04:33.215
But if we click on any of our songs,

00:04:33.215 --> 00:04:36.290
this will then set the Now Playing text.

00:04:36.290 --> 00:04:39.350
However though, for certain parts of the section,

00:04:39.350 --> 00:04:42.955
if we click on just above our list item,

00:04:42.955 --> 00:04:45.755
we get the contents of all of our songs.

00:04:45.755 --> 00:04:48.349
This is because back over in our JavaScript,

00:04:48.349 --> 00:04:53.195
we are adding this click handler to our full song list section.

00:04:53.195 --> 00:04:55.325
The song list is our rapper,

00:04:55.325 --> 00:04:57.970
and this contains all of our list items.

00:04:57.970 --> 00:05:01.910
Everything works perfectly fine if we were to click on these list items.

00:05:01.910 --> 00:05:05.930
But if we were to click on just outside of the list items like we've just seen,

00:05:05.930 --> 00:05:09.920
this will select the full contents of our song list.

00:05:09.920 --> 00:05:13.100
To fix this, we're going to rearrange this function to only

00:05:13.100 --> 00:05:16.530
listen for any clicks on our list items.

00:05:16.530 --> 00:05:20.104
The way to do this is by selecting our full documents,

00:05:20.104 --> 00:05:26.715
and then we can use querySelectorAll plus in our 'li' elements.

00:05:26.715 --> 00:05:30.845
This is going to grab all of our list items on the page.

00:05:30.845 --> 00:05:35.050
We can install this inside of a constant called links,

00:05:35.050 --> 00:05:38.055
and set this equal to our value.

00:05:38.055 --> 00:05:41.210
This value of links will now be our six songs.

00:05:41.210 --> 00:05:44.810
We need to loop through all of these six values,

00:05:44.810 --> 00:05:48.845
and then add our event listener to each one of these list items.

00:05:48.845 --> 00:05:52.010
To do this, we're going to make use of a for of loop,

00:05:52.010 --> 00:05:54.080
and this looks just like this.

00:05:54.080 --> 00:06:01.560
So we say for, and then create a constant called link of links.

00:06:01.640 --> 00:06:05.660
This is going to loop through all of our six links,

00:06:05.660 --> 00:06:09.935
and then store the individual value inside of a constant called link.

00:06:09.935 --> 00:06:14.250
For each link, we are then going to add an event listener,

00:06:14.300 --> 00:06:18.315
and the event we want to listen out for is 'click',

00:06:18.315 --> 00:06:23.400
which is then going to trigger a function called setSong,

00:06:23.750 --> 00:06:28.415
which means now we no longer need to loop through our full song list,

00:06:28.415 --> 00:06:29.945
so we can remove this.

00:06:29.945 --> 00:06:33.580
Now we can turn our function into setSong.

00:06:33.580 --> 00:06:37.860
We can then move this down at next to our function.

00:06:38.570 --> 00:06:42.330
Give this a save, and now you can try this out in the browser.

00:06:42.330 --> 00:06:45.845
Click on a song, and it still plays fine.

00:06:45.845 --> 00:06:48.860
We can switch songs, and finally,

00:06:48.860 --> 00:06:52.100
if we click just outside of our list items,

00:06:52.100 --> 00:06:54.680
this function will now no longer run.

00:06:54.680 --> 00:06:56.270
With this issue now fixed,

00:06:56.270 --> 00:06:59.345
this is now the end of our music player application.

00:06:59.345 --> 00:07:02.520
Thank you for watching, and I hope you've enjoyed.
