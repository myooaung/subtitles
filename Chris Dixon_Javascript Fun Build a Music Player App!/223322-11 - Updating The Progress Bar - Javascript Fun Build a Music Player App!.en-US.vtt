WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.020 --> 00:00:04.110
We're now going to create a progress bar inside of our project,

00:00:04.110 --> 00:00:07.455
which is going to be updated as the song is played.

00:00:07.455 --> 00:00:12.435
So this progress bar will be right at the very beginning once the song has begun,

00:00:12.435 --> 00:00:16.080
and the duration will be updated as the song progresses.

00:00:16.080 --> 00:00:21.330
The first step is to go to our "Index Page" and we can create a progress element.

00:00:21.330 --> 00:00:23.190
But still this just after

00:00:23.190 --> 00:00:28.170
our audio section and we can take advantage of the HTML progress elements.

00:00:28.170 --> 00:00:30.885
We can update this, we're going to have an id,

00:00:30.885 --> 00:00:34.305
and this id is going to be equal to progress.

00:00:34.305 --> 00:00:40.125
The second attribute is going to be the value which we'll initially set to zero.

00:00:40.125 --> 00:00:43.385
This will set our progress bar to be right at the very beginning,

00:00:43.385 --> 00:00:45.995
and then we'll update this with JavaScript.

00:00:45.995 --> 00:00:48.170
Next, we can add a max,

00:00:48.170 --> 00:00:50.510
which is going to be equal to 100,

00:00:50.510 --> 00:00:54.620
so our progress bar value can be between zero and 100.

00:00:54.620 --> 00:00:58.190
The second step is to go up to our audio player,

00:00:58.190 --> 00:01:03.240
and then we're going to add a new attribute called ontimeupdate.

00:01:03.440 --> 00:01:09.365
Ontimeupdate is an event which runs when the position of the audio has changed.

00:01:09.365 --> 00:01:13.320
So i.e this is going to run as the audio is playing.

00:01:13.320 --> 00:01:15.650
What we need to do inside here is to pass

00:01:15.650 --> 00:01:18.830
any function which we want to run on each update.

00:01:18.830 --> 00:01:22.470
I'm going to call this function updateProgress,

00:01:23.090 --> 00:01:27.330
and then we can create this over in our script.

00:01:27.550 --> 00:01:29.840
So down at the very bottom,

00:01:29.840 --> 00:01:32.880
the function name was updateProgress.

00:01:36.530 --> 00:01:38.910
When we've created our progress bar,

00:01:38.910 --> 00:01:41.405
we give this an ID of progress.

00:01:41.405 --> 00:01:44.120
We can store this inside of a constant called the

00:01:44.120 --> 00:01:48.154
progressBar and set this equal to documents,

00:01:48.154 --> 00:01:53.040
getElementById and the ID was progress.

00:01:53.540 --> 00:01:55.550
Also in this progress bar,

00:01:55.550 --> 00:01:58.280
we set an initial value of zero,

00:01:58.280 --> 00:02:01.255
and we now need to update this with JavaScript.

00:02:01.255 --> 00:02:05.615
We can do this by selecting our progressBar constant and then

00:02:05.615 --> 00:02:10.720
set our value to be equal to a percentage between zero and 100.

00:02:10.720 --> 00:02:14.420
The way we're going to do this is by creating a calculation.

00:02:14.420 --> 00:02:18.260
This calculation is going to access both the current time and

00:02:18.260 --> 00:02:22.585
also the duration which is available on our player constant.

00:02:22.585 --> 00:02:26.675
To see this, we can comment this out and just do a console.log.

00:02:26.675 --> 00:02:31.580
First of all, if we console.log the value of player and then at

00:02:31.580 --> 00:02:36.605
the current time, let's duplicate this.

00:02:36.605 --> 00:02:40.220
We can also log the duration of the audio track.

00:02:40.220 --> 00:02:45.260
Current time is the actual amount of time which has elapsed as we're playing the song.

00:02:45.260 --> 00:02:52.600
The duration just below is the total length of the audio track or to the console.

00:02:53.660 --> 00:02:58.470
To see this, we can click on any of our songs to begin playback.

00:02:58.700 --> 00:03:03.085
The first value, which we'll see just here, let's pause this.

00:03:03.085 --> 00:03:05.430
This is the current duration of our track,

00:03:05.430 --> 00:03:09.870
and then we'll see our track length is a 176 seconds.

00:03:09.870 --> 00:03:13.795
This value will always be the same since the length does not change.

00:03:13.795 --> 00:03:19.445
We now need to use our two values to create a percentage between zero and 100.

00:03:19.445 --> 00:03:24.020
The way we can do this is by grabbing our currentTime at

00:03:24.020 --> 00:03:30.115
the scene and then we can divide this by the player.duration.

00:03:30.115 --> 00:03:32.290
To turn this into a percentage,

00:03:32.290 --> 00:03:35.050
we then multiply this by the value of 100.

00:03:35.050 --> 00:03:40.190
We can then remove our console logs and check this over in the browser.

00:03:40.280 --> 00:03:50.780
Select any song. This one I'll start playing and our progress bar is now being updated.

00:03:50.780 --> 00:03:53.110
Just to finish off this section,

00:03:53.110 --> 00:03:56.960
we're also going to add a little CSS style into our progress bar.

00:03:56.960 --> 00:03:59.595
Also, our style sheet,

00:03:59.595 --> 00:04:01.995
select our progress elements.

00:04:01.995 --> 00:04:07.150
I'm going to begin by setting the width to be 100 percent of the available space.

00:04:07.150 --> 00:04:10.790
The height of our progress bar to be three rems,

00:04:10.790 --> 00:04:13.220
and then some spacing on the bottom,

00:04:13.220 --> 00:04:15.510
which is a margin-bottom.

00:04:15.830 --> 00:04:20.825
So this file will now have some nice styling for our progress bar.

00:04:20.825 --> 00:04:25.280
On first glance, everything seems to work in completely fine, however,

00:04:25.280 --> 00:04:27.775
if we go inside of the developer tools,

00:04:27.775 --> 00:04:29.930
and then inside the console,

00:04:29.930 --> 00:04:32.190
select one of our songs.

00:04:32.190 --> 00:04:36.080
If we open this up, and if we expand this,

00:04:36.080 --> 00:04:41.240
we can see we have a message of "Failed to set the "value" property" on our progress bar.

00:04:41.240 --> 00:04:43.580
This may seem a little strange at first because

00:04:43.580 --> 00:04:47.075
our progress bar is fully updated inside the browser.

00:04:47.075 --> 00:04:52.025
However, though this error is caused as soon as our song has been played.

00:04:52.025 --> 00:04:56.725
This is right at the very beginning because of our player.duration.

00:04:56.725 --> 00:05:00.510
Let's go back to our updateProgress and we can do a

00:05:00.510 --> 00:05:05.920
console.log for the value of player.duration.

00:05:06.470 --> 00:05:11.020
Let's go back into the console, refresh.

00:05:11.630 --> 00:05:15.590
As soon as you do this, we see the value of not a number.

00:05:15.590 --> 00:05:20.750
So as soon as it loads, we don't have any duration data right at the very beginning.

00:05:20.750 --> 00:05:25.810
This is because we're calling our function before the duration has been set.

00:05:25.810 --> 00:05:31.780
To overcome this we're only going to call this function once the song has begun to play.

00:05:31.780 --> 00:05:37.715
Let's remove the console.log and also these two lines of code inside of our function.

00:05:37.715 --> 00:05:40.234
We can then create an if statement,

00:05:40.234 --> 00:05:42.440
which is going to check if the

00:05:42.440 --> 00:05:47.040
player.currentTime is greater than

00:05:47.040 --> 00:05:51.965
zero and this section will only run once the audio player has begun.

00:05:51.965 --> 00:05:54.890
Therefore, we can pass in our two lines of code which we just

00:05:54.890 --> 00:05:58.740
cut and we can try this out over in the browser.

00:05:58.760 --> 00:06:01.735
Open up the developer tools,

00:06:01.735 --> 00:06:04.620
select any bow our songs.

00:06:04.640 --> 00:06:07.395
This area now goes away.

00:06:07.395 --> 00:06:10.745
We're nearly finished with our project and in the next video,

00:06:10.745 --> 00:06:14.520
we're going to add some finishing touches to this project.
