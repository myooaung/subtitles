WEBVTT
1
00:00:02.140 --> 00:00:06.810
In this demonstration, we're going to be configuring organizational tag policies.

2
00:00:06.810 --> 00:00:09.750
We're going to configure tags to identify resources for software deployment,

3
00:00:09.750 --> 00:00:13.210
and we're going to work with tags to configure resource groups.

4
00:00:13.210 --> 00:00:16.880
Throughout this demonstration, we're going to be working with the AWS console.

5
00:00:16.880 --> 00:00:21.140
And to follow along with this demonstration, you'll need your own AWS account.

6
00:00:21.140 --> 00:00:24.340
Now we do encourage you to follow along with these demonstrations.

7
00:00:24.340 --> 00:00:28.340
But remember, anything you deploy to AWS can cost money.

8
00:00:28.340 --> 00:00:30.580
We're back in the AWS console to take a look at some

9
00:00:30.580 --> 00:00:32.540
of the other use cases for tags.

10
00:00:32.540 --> 00:00:34.430
So let's start off with tagging policies.

11
00:00:34.430 --> 00:00:37.030
So if I select the drop‑down next to my name and then

12
00:00:37.030 --> 00:00:41.430
select my organization and specifically the organization we

13
00:00:41.430 --> 00:00:42.780
want to go in the Policies tab.

14
00:00:42.780 --> 00:00:45.140
Through here, we can see tag policies.

15
00:00:45.140 --> 00:00:49.320
If I select Tag policies, we have one tag policy already created.

16
00:00:49.320 --> 00:00:52.440
To create a tag policy, select Create policy.

17
00:00:52.440 --> 00:00:54.520
And we'd follow this basic wizard through,

18
00:00:54.520 --> 00:00:57.240
providing a policy name and description.

19
00:00:57.240 --> 00:00:59.340
Then we can add some tags.

20
00:00:59.340 --> 00:01:02.630
So if I scroll down a little bit, we get this visual editor.

21
00:01:02.630 --> 00:01:04.740
So let's type in a name for our tag.

22
00:01:04.740 --> 00:01:07.950
We can specify whether we want to enforce capitalization for our tags.

23
00:01:07.950 --> 00:01:11.430
If we do that, then the tag environment will have to typed in lowercase.

24
00:01:11.430 --> 00:01:12.420
So let's select that.

25
00:01:12.420 --> 00:01:16.900
And then we can provide some values. So if I select Tag value compliance and

26
00:01:16.900 --> 00:01:21.340
then Specify values, and here we can add some allowed values.

27
00:01:21.340 --> 00:01:24.920
When you're happy with your allowed values, select Save changes.

28
00:01:24.920 --> 00:01:28.440
And here we can see the allowed values.

29
00:01:28.440 --> 00:01:30.660
The next tickbox enforces this tag.

30
00:01:30.660 --> 00:01:34.640
So we can prevent noncompliance for this tag.

31
00:01:34.640 --> 00:01:35.480
Let's select that tickbox,

32
00:01:35.480 --> 00:01:39.440
and then we'll be asked which resources we want to enforce.

33
00:01:39.440 --> 00:01:43.380
If I select Specify resource types, and we'll filter with EC2,

34
00:01:43.380 --> 00:01:47.560
and I'll select EC2 instance and then Save changes.

35
00:01:47.560 --> 00:01:50.660
So with this type of environment, we're enforcing capitalization,

36
00:01:50.660 --> 00:01:52.960
we're enforcing a list of allowed values,

37
00:01:52.960 --> 00:01:56.310
and we're saying it's a required tag for EC2 instances.

38
00:01:56.310 --> 00:02:01.640
Now I'm happy with this so I can say Create policy, and our policy gets created.

39
00:02:01.640 --> 00:02:05.340
So let's see this policy in action.

40
00:02:05.340 --> 00:02:08.740
I've logged into a second account in my organization.

41
00:02:08.740 --> 00:02:14.040
If I select Instances and then Launch Instances,

42
00:02:14.040 --> 00:02:17.740
and we'll run through this launch instance wizard to get to the tagging section.

43
00:02:17.740 --> 00:02:21.540
So I accepted all the defaults for this instance to get to the tagging section.

44
00:02:21.540 --> 00:02:25.730
If I say Add Tag, and let's add a tag called Environment,

45
00:02:25.730 --> 00:02:28.640
and we'll give a value of UK.

46
00:02:28.640 --> 00:02:30.840
So if we carry on through the view screen,

47
00:02:30.840 --> 00:02:34.560
we can review our selections and then say Launch.

48
00:02:34.560 --> 00:02:36.350
And here we've got our first error message.

49
00:02:36.350 --> 00:02:41.340
It says launch failed for environment because we used the wrong capitalization.

50
00:02:41.340 --> 00:02:45.840
So let's go back to the tags, and let's change the uppercase E a lowercase e.

51
00:02:45.840 --> 00:02:47.160
And let's try that again.

52
00:02:47.160 --> 00:02:50.040
If I complete the wizard and try and launch this virtual machine,

53
00:02:50.040 --> 00:02:54.080
this time a different error message saying I've not specified the correct value.

54
00:02:54.080 --> 00:02:55.970
So this is tagging policy in action.

55
00:02:55.970 --> 00:03:00.080
If I was to go back and change the tag to production development or testing,

56
00:03:00.080 --> 00:03:02.440
then this virtual machine would launch.

57
00:03:02.440 --> 00:03:06.140
Remember, tagging policies can be applied to any part of our hierarchy.

58
00:03:06.140 --> 00:03:08.540
So I've got multiple tag policies here.

59
00:03:08.540 --> 00:03:10.590
If I go to Organize accounts,

60
00:03:10.590 --> 00:03:15.340
we can see a root level here plus the list of organizational units.

61
00:03:15.340 --> 00:03:18.040
If I select Development, for example,

62
00:03:18.040 --> 00:03:21.240
and then from the policy section expand tags policies,

63
00:03:21.240 --> 00:03:26.040
we can see TagPolicyOne is attached, but the Globomantics tag policy isn't.

64
00:03:26.040 --> 00:03:29.140
To attach it, we just click on Attach.

65
00:03:29.140 --> 00:03:31.340
Let's look at another example of using tags.

66
00:03:31.340 --> 00:03:33.840
For this, I'm going to go to the Systems Manager dashboard.

67
00:03:33.840 --> 00:03:36.790
One of the things we can do in Systems Manager is create resource groups.

68
00:03:36.790 --> 00:03:42.640
So let's select Resource Groups and here say Create a resource group.

69
00:03:42.640 --> 00:03:44.600
We have the two options for creating resource groups,

70
00:03:44.600 --> 00:03:46.840
tag based or CloudFormation Stack.

71
00:03:46.840 --> 00:03:47.970
We'll leave tag based selected,

72
00:03:47.970 --> 00:03:51.920
and we'll configure a tag that is used then to identify all

73
00:03:51.920 --> 00:03:55.140
resources that should be part of this resource group.

74
00:03:55.140 --> 00:03:57.640
So here's my tag, ProjectOne.

75
00:03:57.640 --> 00:03:59.670
We can also choose which resource type should be part of this

76
00:03:59.670 --> 00:04:03.940
resource group as well by using the Resource types drop‑down list

77
00:04:03.940 --> 00:04:07.110
and choosing from all the different resources that are possible to

78
00:04:07.110 --> 00:04:08.570
be added to a resource group.

79
00:04:08.570 --> 00:04:11.940
I'm going to leave All supported resource types selected.

80
00:04:11.940 --> 00:04:14.380
If you click on Preview group resources,

81
00:04:14.380 --> 00:04:19.040
it should identify all the resources that were part of this resource group.

82
00:04:19.040 --> 00:04:23.490
In my example, four web servers and their associated EBS volumes.

83
00:04:23.490 --> 00:04:24.570
I'm happy with this.

84
00:04:24.570 --> 00:04:26.440
So if I scroll to the bottom the screen,

85
00:04:26.440 --> 00:04:29.540
we can provide a group name and optional description.

86
00:04:29.540 --> 00:04:32.940
Once we've chosen the group name, I can then click Create group.

87
00:04:32.940 --> 00:04:35.540
And it won't take long at all to create the resource group.

88
00:04:35.540 --> 00:04:37.420
So now we've got the resource group created, let's work with it.

89
00:04:37.420 --> 00:04:39.940
If I go back to Systems Manager,

90
00:04:39.940 --> 00:04:42.200
so here's a list of some of things System Manager can do,

91
00:04:42.200 --> 00:04:46.220
run commands, patch management, session management,

92
00:04:46.220 --> 00:04:48.270
inventory, and automation.

93
00:04:48.270 --> 00:04:50.390
All of these things can be targeted against individual

94
00:04:50.390 --> 00:04:52.660
instances or an entire resource group.

95
00:04:52.660 --> 00:04:55.490
If we scroll up a little bit and choose Resource Groups,

96
00:04:55.490 --> 00:04:57.300
we can see our ProjectOne resource group.

97
00:04:57.300 --> 00:04:58.740
So let's select that.

98
00:04:58.740 --> 00:05:01.330
And then I'll choose Execute automation.

99
00:05:01.330 --> 00:05:03.840
And here's a list of common automation tasks that we might want

100
00:05:03.840 --> 00:05:05.790
to run against the entire resource group.

101
00:05:05.790 --> 00:05:08.640
So let's select CreateSnapshot.

102
00:05:08.640 --> 00:05:10.660
Now we can provide lots of details for this automation.

103
00:05:10.660 --> 00:05:14.540
The one thing that I want to select is the parameter.

104
00:05:14.540 --> 00:05:18.040
So from the Select a parameter, I'm going to choose VolumeId.

105
00:05:18.040 --> 00:05:20.740
Other than that, I'm leaving everything in its defaults.

106
00:05:20.740 --> 00:05:23.550
If I scroll down, I can select Execute.

107
00:05:23.550 --> 00:05:26.610
And we can see here, execution is be initiated,

108
00:05:26.610 --> 00:05:29.390
and the overall status is in progress.

109
00:05:29.390 --> 00:05:32.040
If we take a look at the Executed steps section,

110
00:05:32.040 --> 00:05:34.240
it shows the progress of this automation.

111
00:05:34.240 --> 00:05:35.840
If we leave this running long enough,

112
00:05:35.840 --> 00:05:38.150
it will create snapshots of all four volumes that are

113
00:05:38.150 --> 00:05:39.570
members of this resource group.

114
00:05:39.570 --> 00:05:43.240
And we'll be able to see those snapshots through the EC2 console.

115
00:05:43.240 --> 00:05:44.870
So let's have a look at the EC2 console.

116
00:05:44.870 --> 00:05:47.220
And here in the snapshot section,

117
00:05:47.220 --> 00:05:49.780
you can see snapshots that have been created and ones that

118
00:05:49.780 --> 00:05:51.670
are in the process of being created.

119
00:05:51.670 --> 00:05:54.130
So we've used tags to group together sets of resources

120
00:05:54.130 --> 00:05:56.880
into a resource group and then executed an automation

121
00:05:56.880 --> 00:06:00.340
command across that entire group.

122
00:06:00.340 --> 00:06:01.930
Let's have a look at one other use case.

123
00:06:01.930 --> 00:06:04.320
Here I've got a set of deployed web servers.

124
00:06:04.320 --> 00:06:08.440
If I select one of those web servers, we see it's got a public IP address.

125
00:06:08.440 --> 00:06:12.140
If I connect to that public IP address, we see this website.

126
00:06:12.140 --> 00:06:15.240
Now this website is being deployed to my EC2 instances

127
00:06:15.240 --> 00:06:17.860
using CodeDeploy and CodePipeline.

128
00:06:17.860 --> 00:06:21.110
I've integrated CodePipeline with CloudWatch Events,

129
00:06:21.110 --> 00:06:23.050
so I'm going to have to change it in my application code.

130
00:06:23.050 --> 00:06:28.040
If we take a look at CodePipeline, this is my simple CodePipeline with two steps,

131
00:06:28.040 --> 00:06:32.510
a step that identifies a source for the code on a step that deploys the code.

132
00:06:32.510 --> 00:06:35.530
The step that identifies the source of the code is a step

133
00:06:35.530 --> 00:06:37.910
that's integrated with CloudWatch Events.

134
00:06:37.910 --> 00:06:39.510
So let's take a look at CloudWatch Events.

135
00:06:39.510 --> 00:06:43.040
In CloudWatch Events, I've got a whole series of rules.

136
00:06:43.040 --> 00:06:46.440
The rule I'm particularly interested in at the minute is this rule here,

137
00:06:46.440 --> 00:06:49.640
codepipeline mgbcode‑rule.

138
00:06:49.640 --> 00:06:52.910
If I select that, we can see the event pattern.

139
00:06:52.910 --> 00:06:57.490
So we can see the source is AWS S3, the detail reference is CloudTrail,

140
00:06:57.490 --> 00:07:03.740
and what we're looking for here is a particular S3 event seen in CloudTrail.

141
00:07:03.740 --> 00:07:05.640
If I scroll down a little bit,

142
00:07:05.640 --> 00:07:08.640
we can see the events that we're looking for are PutObject,

143
00:07:08.640 --> 00:07:11.640
CompleteMultipartUpload, and CopyObject.

144
00:07:11.640 --> 00:07:14.310
And we're specifically looking in the bucket called mgbcode

145
00:07:14.310 --> 00:07:18.540
and looking for a key called appone.zip.

146
00:07:18.540 --> 00:07:21.640
So when one of these events is registered in CloudTrail,

147
00:07:21.640 --> 00:07:25.250
this target is triggered, and the target is our CodePipeline. So all I

148
00:07:25.250 --> 00:07:30.250
need to do is change my application code, upload the zip file to S3, and

149
00:07:30.250 --> 00:07:33.930
CodePipeline should be triggered and update my application. So I'll do

150
00:07:33.930 --> 00:07:36.740
that and see if it triggers the pipeline.

151
00:07:36.740 --> 00:07:38.600
So I've updated my code, and you can see here that

152
00:07:38.600 --> 00:07:40.840
pipeline has already been triggered.

153
00:07:40.840 --> 00:07:42.840
The source step is executed.

154
00:07:42.840 --> 00:07:46.720
This, in turn, has triggered the deploy step, which currently is in progress.

155
00:07:46.720 --> 00:07:48.630
And then we can see the deploy step has succeeded.

156
00:07:48.630 --> 00:07:51.330
So let's take a look at our website again. So here you can

157
00:07:51.330 --> 00:07:53.830
see the background has changed. Not a spectacular change,

158
00:07:53.830 --> 00:07:55.220
but illustrates the point.

159
00:07:55.220 --> 00:07:57.610
So we've used a CloudWatch event for monitor change in the

160
00:07:57.610 --> 00:08:00.140
code and then to trigger CodePipeline.

161
00:08:00.140 --> 00:08:02.050
But what has that got to do with tags?

162
00:08:02.050 --> 00:08:02.730
Well,

163
00:08:02.730 --> 00:08:05.370
it's about identifying the types of instances. If we

164
00:08:05.370 --> 00:08:07.240
take a look at the EC2 instances,

165
00:08:07.240 --> 00:08:11.470
each of these instances has a tag called ApplicationOne. And if we take a look

166
00:08:11.470 --> 00:08:15.880
at CodeDeploy, we can see that CodeDeploy has got a single application called

167
00:08:15.880 --> 00:08:19.440
ApplicationOne and a single deployment group.

168
00:08:19.440 --> 00:08:22.240
If we take a look at that deployment group,

169
00:08:22.240 --> 00:08:27.240
this deployment group has identified a set of EC2 instances using tags,

170
00:08:27.240 --> 00:08:30.160
specifically the ApplicationOne tag.

171
00:08:30.160 --> 00:08:33.140
So in this demonstration, we've seen three use cases for tags.

172
00:08:33.140 --> 00:08:35.840
We've seen tag policies to enforce tags.

173
00:08:35.840 --> 00:08:39.040
We've seen how tags can be used by resource groups and

174
00:08:39.040 --> 00:08:41.640
then resource groups used for automation.

175
00:08:41.640 --> 00:08:45.800
And here we've seen how the code tools can identify sets of resources

176
00:08:45.800 --> 00:08:50.510
using tags that integrate with CloudWatch Events to identify changes to

177
00:08:50.510 --> 00:08:55.560
application code to trigger CodePipeline to deploy the new code to my EC2

178
00:08:55.560 --> 00:08:59.040
instances with this tag. In this module,

179
00:08:59.040 --> 00:09:02.860
you learned the importance of tags in AWS. And we discussed and

180
00:09:02.860 --> 00:09:06.340
demonstrated several use cases for tags in AWS.

181
00:09:06.340 --> 00:09:12.040
In our next module, we will introduce EC2 metadata and EC2 user data.

182
00:09:12.040 --> 00:09:20.000
So join me there, and we'll continue along our monitoring and event response on AWS for DevOps engineers journey.

