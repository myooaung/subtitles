1
00:00:02,240 --> 00:00:05,670
I think most of us will benefit from using cost allocation tags, but

2
00:00:05,670 --> 00:00:08,480
tags can be used for so much more. So in this section,

3
00:00:08,480 --> 00:00:13,040
let's have a look at working with tags for organization and security.

4
00:00:13,040 --> 00:00:16,400
The first use case I want to discuss is using tags in AWS

5
00:00:16,400 --> 00:00:19,440
Systems Manager to create resource groups.

6
00:00:19,440 --> 00:00:23,250
Resource groups are used to identify sets of resources that are part

7
00:00:23,250 --> 00:00:27,740
of the same project, that is being deployed by the same team, that

8
00:00:27,740 --> 00:00:31,290
have the same lifecycle and security. And by grouping resources into

9
00:00:31,290 --> 00:00:34,510
the same resource group, it makes it easier to manage and monitor

10
00:00:34,510 --> 00:00:35,650
those resources,

11
00:00:35,650 --> 00:00:39,480
as well as making it easier to run automation tasks against those resources,

12
00:00:39,480 --> 00:00:43,110
particularly at scale. There are two ways to identify resources

13
00:00:43,110 --> 00:00:45,830
that should belong to the same resource group. The first way is

14
00:00:45,830 --> 00:00:47,840
to integrate with CloudFormation.

15
00:00:47,840 --> 00:00:49,540
So when creating a resource group,

16
00:00:49,540 --> 00:00:53,480
we can identify a CloudFormation stack, and all resources deployed to

17
00:00:53,480 --> 00:00:57,140
that stack can be made part of the same resource group.

18
00:00:57,140 --> 00:01:00,200
The second way is used tags to identify the set of resources

19
00:01:00,200 --> 00:01:02,340
that should be part of the same resource group.

20
00:01:02,340 --> 00:01:05,550
This means we could group together resources that have been deployed in a

21
00:01:05,550 --> 00:01:09,670
myriad of different ways, and we don't have to rely on CloudFormation and

22
00:01:09,670 --> 00:01:14,360
CloudFormation stacks to identify the resources for our resource groups. Now

23
00:01:14,360 --> 00:01:17,580
that we have resource groups, we can work with them. We can collect inventory

24
00:01:17,580 --> 00:01:18,930
from those grouped resources.

25
00:01:18,930 --> 00:01:21,490
This will show us things like the operating systems deployed,

26
00:01:21,490 --> 00:01:24,210
applications that are installed, the top applications that are

27
00:01:24,210 --> 00:01:26,440
being used on those resources.

28
00:01:26,440 --> 00:01:30,530
We can use these resource groups to target a specific command against all

29
00:01:30,530 --> 00:01:34,440
resources in the resource group. We can define patch management and maintenance

30
00:01:34,440 --> 00:01:37,540
strategies for the resource in our resource groups.

31
00:01:37,540 --> 00:01:41,680
And we can identify common IT tasks that we need to run on a regular basis,

32
00:01:41,680 --> 00:01:46,070
such as monitoring, alerting, and deployments, and target

33
00:01:46,070 --> 00:01:48,020
that against the entire resource group.

34
00:01:48,020 --> 00:01:51,390
So resource groups are a pretty powerful feature in AWS. But having

35
00:01:51,390 --> 00:01:54,250
worked with lots of customers over the last few years, I also think

36
00:01:54,250 --> 00:01:56,920
it's one of the features that is used least, possibly because

37
00:01:56,920 --> 00:01:59,820
people don't understand the power that resource groups and Systems

38
00:01:59,820 --> 00:02:01,540
Manager give us.

39
00:02:01,540 --> 00:02:04,740
Another use case for tags is access control.

40
00:02:04,740 --> 00:02:08,140
We can use tags for both resource‑based access control

41
00:02:08,140 --> 00:02:10,640
and attribute‑based access control.

42
00:02:10,640 --> 00:02:14,380
With attribute‑based access control, permissions are based on tags.

43
00:02:14,380 --> 00:02:18,730
We attach tags to IAM principles, such as user and roles, and we

44
00:02:18,730 --> 00:02:21,740
attach the same tags to AWS resources.

45
00:02:21,740 --> 00:02:25,260
We then define policies that use the tag condition to grant

46
00:02:25,260 --> 00:02:27,940
permissions to principles based on tags.

47
00:02:27,940 --> 00:02:31,450
So if an IAM principle is given access to a tag called Project X,

48
00:02:31,450 --> 00:02:33,620
they then can be immediately granted access to all

49
00:02:33,620 --> 00:02:35,940
resources that have the Project X tag.

50
00:02:35,940 --> 00:02:39,340
This can simplify your administration. Because as new resources come

51
00:02:39,340 --> 00:02:42,060
online and they're given the appropriate tags,

52
00:02:42,060 --> 00:02:44,610
your principles will automatically have access, instead of you

53
00:02:44,610 --> 00:02:48,500
having to assign the access either during resource creation or

54
00:02:48,500 --> 00:02:50,440
after the resource has been created.

55
00:02:50,440 --> 00:02:53,820
We've got example of a policy here. We have the API

56
00:02:53,820 --> 00:02:56,440
version and then the Statement section.

57
00:02:56,440 --> 00:02:58,440
So here at the top of the Statement section,

58
00:02:58,440 --> 00:03:01,240
we have an "Effect": "Allow" and an "Action".

59
00:03:01,240 --> 00:03:05,020
So this first part of the statement, we're allowing access to the

60
00:03:05,020 --> 00:03:09,430
rds:DescribeDBInstances action for all resources.

61
00:03:09,430 --> 00:03:12,070
This should give the holder of this policy the ability to

62
00:03:12,070 --> 00:03:15,750
describe, so read, all RDS instances.

63
00:03:15,750 --> 00:03:17,680
The next part of the policy identifies additional

64
00:03:17,680 --> 00:03:21,540
actions, again, Allow, this time rds:Reboot,

65
00:03:21,540 --> 00:03:25,800
Start, and StopDBInstances. This also applies to all resources,

66
00:03:25,800 --> 00:03:28,040
but take a look at the Condition section here.

67
00:03:28,040 --> 00:03:29,970
This includes a tag condition.

68
00:03:29,970 --> 00:03:34,160
So this effectively says that holders of this policy can reboot,

69
00:03:34,160 --> 00:03:38,730
start, and stop DB instances as long as our DB instances are tagged with a

70
00:03:38,730 --> 00:03:43,410
CostCenter tag of 0735 and a Project tag of DataAnalytics.

71
00:03:43,410 --> 00:03:47,460
So we use the tags here to limit the list of RDS instances

72
00:03:47,460 --> 00:03:49,830
that the holder of this policy can reboot,

73
00:03:49,830 --> 00:03:52,430
start, and stop. Very clever stuff.

74
00:03:52,430 --> 00:03:55,540
One of things we want to achieve with our tagging is consistency.

75
00:03:55,540 --> 00:03:58,640
And one of the best ways we can do that is by implementing tag policies.

76
00:03:58,640 --> 00:04:03,140
Tag policies define a set of rules on how tags can be used in AWS.

77
00:04:03,140 --> 00:04:07,040
They allow us to standardize the use of tags in our AWS accounts.

78
00:04:07,040 --> 00:04:09,090
We do this by identifying tags that are allowed to

79
00:04:09,090 --> 00:04:11,190
be used in our AWS organizations,

80
00:04:11,190 --> 00:04:15,860
including the tag keys and the allowed values that each tag key can have.

81
00:04:15,860 --> 00:04:18,400
So instead of users free‑forming their tags,

82
00:04:18,400 --> 00:04:21,700
we can say that each EC2 instance that's deployed must have

83
00:04:21,700 --> 00:04:24,900
a tag of Department, and the department you choose must be

84
00:04:24,900 --> 00:04:26,810
from this list So in short,

85
00:04:26,810 --> 00:04:29,800
we can use tag policies to make sure that resources that are

86
00:04:29,800 --> 00:04:34,300
deployed to AWS are tagged with the right key‑value pairs. Tag

87
00:04:34,300 --> 00:04:37,780
policies are integrated with AWS organizations. So if you're not

88
00:04:37,780 --> 00:04:42,140
using AWS organizations, then tag policies won't be available to you.

89
00:04:42,140 --> 00:04:42,900
Once created,

90
00:04:42,900 --> 00:04:46,040
a tag policy can be applied to the entire organization,

91
00:04:46,040 --> 00:04:49,600
to a specific organizational unit in the organization, or

92
00:04:49,600 --> 00:04:51,510
to individual AWS accounts.

93
00:04:51,510 --> 00:04:54,310
This means that you can have different tagging policies for

94
00:04:54,310 --> 00:04:57,110
production AWS accounts as opposed to accounts that are used

95
00:04:57,110 --> 00:04:58,450
for development and testing.

96
00:04:58,450 --> 00:05:01,040
The enforcement part of tag policies is optional,

97
00:05:01,040 --> 00:05:03,540
but if you enable enforcement for a tag policy,

98
00:05:03,540 --> 00:05:05,380
it will prevent noncompliance.

99
00:05:05,380 --> 00:05:08,940
This includes preventing changes to tags, and also, it'll prevent deployment

100
00:05:08,940 --> 00:05:12,540
of resources that don't have the correct tag supplied.

101
00:05:12,540 --> 00:05:19,000
Now we've gone through a couple of use cases for tags, let's jump into the console and give it a go.

