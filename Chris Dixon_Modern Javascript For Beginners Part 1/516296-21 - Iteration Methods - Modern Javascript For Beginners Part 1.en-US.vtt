WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.780 --> 00:00:05.520
The final group of methods I'm going to

00:00:05.520 --> 00:00:07.590
show you in this video is methods

00:00:07.590 --> 00:00:09.870
which will loop over each one of

00:00:09.870 --> 00:00:14.235
these array items and then run a function for each one.

00:00:14.235 --> 00:00:16.590
Over in the starter files head

00:00:16.590 --> 00:00:18.465
into the iteration methods,

00:00:18.465 --> 00:00:21.705
which is in Section 2 and number 5,

00:00:21.705 --> 00:00:24.270
these iteration methods which run a function

00:00:24.270 --> 00:00:26.280
for each one is really useful when we

00:00:26.280 --> 00:00:28.365
have lots of array items and I

00:00:28.365 --> 00:00:31.065
want to repeat a process for each one.

00:00:31.065 --> 00:00:33.690
Inside of the starter files index page,

00:00:33.690 --> 00:00:34.950
you can see up at the top we have

00:00:34.950 --> 00:00:37.770
three user roles inside of the comments.

00:00:37.770 --> 00:00:40.530
If you use something like WordPress in the past,

00:00:40.530 --> 00:00:42.630
this will look very familiar.

00:00:42.630 --> 00:00:45.000
This is a common setup.

00:00:45.000 --> 00:00:47.370
You can see here we have all roles and

00:00:47.370 --> 00:00:50.060
an array and this will really common if we had

00:00:50.060 --> 00:00:52.640
multiple users on our site and we wanted to

00:00:52.640 --> 00:00:55.670
give the users different levels of access.

00:00:55.670 --> 00:00:58.250
For example, if we had a use object with

00:00:58.250 --> 00:01:01.265
the name and all the rest of the use information.

00:01:01.265 --> 00:01:04.250
We could also add an array just like this.

00:01:04.250 --> 00:01:06.050
We could inside place

00:01:06.050 --> 00:01:08.270
any roles and permissions which that user has.

00:01:08.270 --> 00:01:09.860
Then we could check against this

00:01:09.860 --> 00:01:12.430
before they do any actions on our site.

00:01:12.430 --> 00:01:15.440
Such as, if they're about to publish a blog post,

00:01:15.440 --> 00:01:18.680
we may want to loop through all of the roles inside of

00:01:18.680 --> 00:01:20.235
the array and check they have

00:01:20.235 --> 00:01:22.790
the correct permissions before doing so.

00:01:22.790 --> 00:01:24.980
Just like with WordPress about the top,

00:01:24.980 --> 00:01:26.195
we have the admin,

00:01:26.195 --> 00:01:28.430
which is the full-size access,

00:01:28.430 --> 00:01:29.825
and it has all the permissions,

00:01:29.825 --> 00:01:32.770
do pretty much anything on a single site.

00:01:32.770 --> 00:01:35.510
We have the author and the author

00:01:35.510 --> 00:01:38.150
can't publish things such as their own blog posts.

00:01:38.150 --> 00:01:39.860
They can also edit them.

00:01:39.860 --> 00:01:43.145
They are effectively in charge of their own content.

00:01:43.145 --> 00:01:45.770
Well, this will have a subscriber which is generally

00:01:45.770 --> 00:01:48.385
the default settings with a WordPress site.

00:01:48.385 --> 00:01:50.000
They can't manage our side,

00:01:50.000 --> 00:01:51.765
they can't edit any content.

00:01:51.765 --> 00:01:55.265
All they can do is basically manage their own profile.

00:01:55.265 --> 00:01:57.620
What we're going to do here is to simulate

00:01:57.620 --> 00:01:59.960
a blog post site where

00:01:59.960 --> 00:02:03.370
a user might be able to create their own blog posts.

00:02:03.370 --> 00:02:05.480
As soon as the user has logged in and

00:02:05.480 --> 00:02:07.100
created a blog post,

00:02:07.100 --> 00:02:09.500
when it then go ahead and click the Publish button,

00:02:09.500 --> 00:02:10.820
we first want to loop through

00:02:10.820 --> 00:02:12.410
the user's roles and check they

00:02:12.410 --> 00:02:14.515
have the correct permissions.

00:02:14.515 --> 00:02:16.640
In our case, we want to check if they are

00:02:16.640 --> 00:02:18.785
an admin or an author.

00:02:18.785 --> 00:02:21.485
If they are, they can then go ahead and publish.

00:02:21.485 --> 00:02:23.330
If not, they will need permission

00:02:23.330 --> 00:02:25.750
before this is live on our site,

00:02:25.750 --> 00:02:28.805
and to do this, we'll create a function.

00:02:28.805 --> 00:02:30.530
Because remember these iteration

00:02:30.530 --> 00:02:31.670
methods will run a function

00:02:31.670 --> 00:02:34.895
for each value inside of our array.

00:02:34.895 --> 00:02:36.590
This function will call

00:02:36.590 --> 00:02:39.020
this canPublish and this is

00:02:39.020 --> 00:02:41.960
going to return a true or a false value.

00:02:41.960 --> 00:02:44.180
For this, also check the roles we need to pass

00:02:44.180 --> 00:02:46.880
in a role to the function and

00:02:46.880 --> 00:02:49.040
then we want to check if the role is equal to

00:02:49.040 --> 00:02:52.360
the admin or equal to the author.

00:02:52.360 --> 00:02:56.810
We can use role, the triple equals to

00:02:56.810 --> 00:02:58.340
check if the row which is being passed

00:02:58.340 --> 00:03:01.210
in is first equal to the admin.

00:03:01.210 --> 00:03:02.990
All user needs [inaudible],

00:03:02.990 --> 00:03:04.280
which is the or operator

00:03:04.280 --> 00:03:05.780
which we've previously looked at.

00:03:05.780 --> 00:03:09.500
We can also test if the role is equal to the author.

00:03:09.500 --> 00:03:13.570
If is, we're going to return this value,

00:03:13.570 --> 00:03:16.590
which will be either true or false,

00:03:16.590 --> 00:03:18.830
and to see this return value,

00:03:18.830 --> 00:03:20.585
we'll create a console log,

00:03:20.585 --> 00:03:22.280
just blow and this console log

00:03:22.280 --> 00:03:24.550
is going to call this function.

00:03:24.550 --> 00:03:27.720
Passing it canPublish and

00:03:27.720 --> 00:03:30.240
we'll first begin by passing in the admin.

00:03:30.240 --> 00:03:32.240
This admin string is going to be

00:03:32.240 --> 00:03:34.790
converted to this role and we check this role is

00:03:34.790 --> 00:03:40.450
equal to the admin or to the author. Over to the console.

00:03:41.890 --> 00:03:45.890
Refresh this page, and this is of course true.

00:03:45.890 --> 00:03:48.620
Let's also try the author,

00:03:48.620 --> 00:03:50.840
which is the second condition just

00:03:50.840 --> 00:03:54.350
here and this should also be true as well.

00:03:54.350 --> 00:04:02.640
Finally, subscriber and this one is false.

00:04:03.260 --> 00:04:06.334
Our function is working correctly.

00:04:06.334 --> 00:04:08.825
But at the moment, it's very manual.

00:04:08.825 --> 00:04:11.090
We have to manually pass in each one of

00:04:11.090 --> 00:04:13.160
our strings and check inside of here,

00:04:13.160 --> 00:04:15.170
each one one at a time.

00:04:15.170 --> 00:04:18.095
This is fine when we only have three separate roles.

00:04:18.095 --> 00:04:20.660
But imagine if you had to repeat this for say,

00:04:20.660 --> 00:04:22.910
50 different roles on our site,

00:04:22.910 --> 00:04:26.030
this will become a long and tedious process.

00:04:26.030 --> 00:04:28.190
Well, to help with this, we're going back

00:04:28.190 --> 00:04:29.900
to the whole purpose of this video,

00:04:29.900 --> 00:04:32.495
which is to look at iteration methods.

00:04:32.495 --> 00:04:36.245
This will save a lot of all manual work by looping over

00:04:36.245 --> 00:04:37.880
each one of these roles and

00:04:37.880 --> 00:04:40.745
checking if it contains a particular value.

00:04:40.745 --> 00:04:43.580
The first iteration method I'm going to look at is

00:04:43.580 --> 00:04:46.010
some and just like other methods too,

00:04:46.010 --> 00:04:50.300
we'll begin by accessing the array by the variable name,

00:04:50.300 --> 00:04:53.380
and then we call the some method afterward

00:04:53.380 --> 00:04:55.370
and this is going to check if some of

00:04:55.370 --> 00:04:57.590
the array values are a much,

00:04:57.590 --> 00:04:59.475
but a much for what?

00:04:59.475 --> 00:05:01.340
Well, using this same example,

00:05:01.340 --> 00:05:04.225
we can move this function into the some method.

00:05:04.225 --> 00:05:06.700
Grab all of this code just here,

00:05:06.700 --> 00:05:11.110
put this out, and place this just inside of the brackets.

00:05:11.110 --> 00:05:13.310
We can't remove this function names

00:05:13.310 --> 00:05:15.200
since we don't need, role is manually.

00:05:15.200 --> 00:05:18.380
It will instead be called once for each value inside of

00:05:18.380 --> 00:05:20.240
this array and this is often

00:05:20.240 --> 00:05:22.780
referred to as a callback function.

00:05:22.780 --> 00:05:25.790
This function would now be called three times.

00:05:25.790 --> 00:05:28.670
The first time role would take on the admin string,

00:05:28.670 --> 00:05:29.930
it would then be author,

00:05:29.930 --> 00:05:31.220
and then the third time would be

00:05:31.220 --> 00:05:34.130
the subscriber and for each one of these roles,

00:05:34.130 --> 00:05:37.190
it would then run the code inside of the function.

00:05:37.190 --> 00:05:39.800
Just like with all this function is still returning

00:05:39.800 --> 00:05:41.780
a true or false value and we can

00:05:41.780 --> 00:05:45.690
capture this return value inside of a variable.

00:05:47.270 --> 00:05:49.280
Inside of the console log,

00:05:49.280 --> 00:05:51.315
we are still calling canPublish.

00:05:51.315 --> 00:05:53.780
But this time this is not a function so we can remove

00:05:53.780 --> 00:05:55.400
the parentheses and you

00:05:55.400 --> 00:05:58.415
simply log the value of this constant.

00:05:58.415 --> 00:06:01.785
Now gives us a save, refresh

00:06:01.785 --> 00:06:04.460
and this value is now equal to true.

00:06:04.460 --> 00:06:06.620
This is true because at least one of

00:06:06.620 --> 00:06:09.305
the roles inside of here is a match.

00:06:09.305 --> 00:06:11.465
If none of these was a match for admin or

00:06:11.465 --> 00:06:13.400
author, I just changed this,

00:06:13.400 --> 00:06:18.435
we can go for moderator and let's say guest,

00:06:18.435 --> 00:06:20.730
save this and refresh,

00:06:20.730 --> 00:06:23.500
and this is now the value of false.

00:06:23.500 --> 00:06:26.150
Looking at this slide, this is the same method

00:06:26.150 --> 00:06:27.515
we see up at the top.

00:06:27.515 --> 00:06:30.590
Just to recap, it will return true if one or more of

00:06:30.590 --> 00:06:34.105
the array values are much for the call-back function.

00:06:34.105 --> 00:06:36.260
But what about instead if we wanted to get

00:06:36.260 --> 00:06:40.610
a true value only if all of the array items are a match?

00:06:40.610 --> 00:06:43.445
Well, for this use case for how the every method,

00:06:43.445 --> 00:06:45.620
and we can see an example below.

00:06:45.620 --> 00:06:48.665
This is an array of this year's test scores.

00:06:48.665 --> 00:06:50.330
Then we run a callback function

00:06:50.330 --> 00:06:52.190
for each value in the array.

00:06:52.190 --> 00:06:54.170
For every two return true,

00:06:54.170 --> 00:06:57.395
all of the array items must be over 95.

00:06:57.395 --> 00:06:59.795
If a single one is under 95,

00:06:59.795 --> 00:07:03.040
it will cause it to fail and return a false value.

00:07:03.040 --> 00:07:05.465
We use these methods if we want to if return

00:07:05.465 --> 00:07:08.550
similar values or every value.

00:07:09.000 --> 00:07:11.110
Instead of just having a stand

00:07:11.110 --> 00:07:12.715
alone array just like this,

00:07:12.715 --> 00:07:16.060
it's more common to have this attached to a user object.

00:07:16.060 --> 00:07:18.820
Imagine we had a site with multiple users,

00:07:18.820 --> 00:07:21.565
and these were all stored inside of an array.

00:07:21.565 --> 00:07:23.650
Then inside each one of our users

00:07:23.650 --> 00:07:25.810
has its own user object.

00:07:25.810 --> 00:07:28.975
Open up the curly braces for an objects.

00:07:28.975 --> 00:07:30.970
First we'll just have a user ID of

00:07:30.970 --> 00:07:33.160
one, separated by a comma.

00:07:33.160 --> 00:07:37.630
The second property of role of admin.

00:07:37.630 --> 00:07:39.610
What I'm going to do is to add a comma at the end

00:07:39.610 --> 00:07:41.800
of this, and then copy.

00:07:41.800 --> 00:07:44.900
We'll paste this in a couple more times.

00:07:44.910 --> 00:07:51.580
User 2, this time a different role of author.

00:07:51.580 --> 00:07:56.080
User 3, this one can also be author two,

00:07:56.080 --> 00:07:59.690
and then finally, number four can be the subscriber.

00:08:01.800 --> 00:08:04.360
Using a iteration method

00:08:04.360 --> 00:08:06.070
means we can live through each one of

00:08:06.070 --> 00:08:10.000
these user objects and filter by a particular role.

00:08:10.000 --> 00:08:13.000
Let's imagine we wanted to grab at this particular user,

00:08:13.000 --> 00:08:15.159
which is the role of subscriber.

00:08:15.159 --> 00:08:17.140
Since this is an array to do this,

00:08:17.140 --> 00:08:18.190
we may also need to find

00:08:18.190 --> 00:08:21.505
the index number before we can grab this information.

00:08:21.505 --> 00:08:25.235
For this, we have something called find index.

00:08:25.235 --> 00:08:29.144
This example also has an array of user objects.

00:08:29.144 --> 00:08:31.755
We then call it find index method,

00:08:31.755 --> 00:08:34.785
and it will run a function for each one of these values.

00:08:34.785 --> 00:08:36.480
Each one of these values is stored in

00:08:36.480 --> 00:08:38.660
the functions user perimeter.

00:08:38.660 --> 00:08:41.350
In the return statements, we access the user,

00:08:41.350 --> 00:08:44.965
select the role, and check if it's equal to admin.

00:08:44.965 --> 00:08:47.665
It will then return the array's index position

00:08:47.665 --> 00:08:49.000
of the first match.

00:08:49.000 --> 00:08:50.470
For this example, it's

00:08:50.470 --> 00:08:53.690
the first value which is position zero.

00:08:54.450 --> 00:08:57.550
Let's give this one a try ourselves.

00:08:57.550 --> 00:08:59.260
Back to our index page, I'm just

00:08:59.260 --> 00:09:01.195
going to clear things up.

00:09:01.195 --> 00:09:03.625
Even just this user array.

00:09:03.625 --> 00:09:07.240
Then at the bottom we're going to access our users,

00:09:07.240 --> 00:09:09.070
we'll then call the method which we just

00:09:09.070 --> 00:09:11.545
looked at called find index.

00:09:11.545 --> 00:09:13.660
Like all of the rest of the methods,

00:09:13.660 --> 00:09:14.920
this is also going to take in

00:09:14.920 --> 00:09:18.590
a function and we also need to pass in the user.

00:09:20.100 --> 00:09:23.380
Just like before this function will be called once

00:09:23.380 --> 00:09:26.365
for each item inside of this array.

00:09:26.365 --> 00:09:28.900
The first time it loops through it will be user 1,

00:09:28.900 --> 00:09:30.760
user 2, and so on.

00:09:30.760 --> 00:09:33.460
Then what want to do is to access the user

00:09:33.460 --> 00:09:36.010
, I'll just move this over.

00:09:36.010 --> 00:09:39.530
Then we want to access the individual role.

00:09:40.710 --> 00:09:44.155
If we wanted to find this subscriber role,

00:09:44.155 --> 00:09:45.640
we could check if this is equal to

00:09:45.640 --> 00:09:48.170
the string of subscriber.

00:09:50.460 --> 00:09:54.685
Then return is value which is going to be true or false.

00:09:54.685 --> 00:09:58.940
Then store this returned value inside of a variable.

00:09:59.190 --> 00:10:03.110
Let's check this out by doing a console log.

00:10:04.230 --> 00:10:07.855
Means to log this variable of index,

00:10:07.855 --> 00:10:09.820
refresh the browser and we get back

00:10:09.820 --> 00:10:12.205
the index number three.

00:10:12.205 --> 00:10:14.560
This is index number 0,

00:10:14.560 --> 00:10:16.180
1, 2, and 3.

00:10:16.180 --> 00:10:18.790
We now know this is all working correctly.

00:10:18.790 --> 00:10:21.460
As we can see, this returns the index position.

00:10:21.460 --> 00:10:22.630
But what about if we wanted

00:10:22.630 --> 00:10:26.095
the actual value such as this full object?

00:10:26.095 --> 00:10:27.610
Well, for this we have a method

00:10:27.610 --> 00:10:29.680
available to us called find.

00:10:29.680 --> 00:10:33.310
Find will select the first match inside of our array.

00:10:33.310 --> 00:10:36.250
For example, if we had multiple subscribers,

00:10:36.250 --> 00:10:38.050
the find method would be useful

00:10:38.050 --> 00:10:39.835
for finding the very first one,

00:10:39.835 --> 00:10:41.575
which it comes across.

00:10:41.575 --> 00:10:45.175
This example also has an array of user objects.

00:10:45.175 --> 00:10:47.065
We then call the find method,

00:10:47.065 --> 00:10:50.080
and it will run a function for each one of the values.

00:10:50.080 --> 00:10:53.230
Here we check if the role is equal to author and

00:10:53.230 --> 00:10:56.170
then find will return the first object, which is a match.

00:10:56.170 --> 00:10:59.150
In our case, it's the user number two.

00:10:59.430 --> 00:11:03.400
In this case, we just change this to be find.

00:11:03.400 --> 00:11:05.875
This time we'll check if the user's role

00:11:05.875 --> 00:11:07.795
is equal to the author.

00:11:07.795 --> 00:11:11.650
Both we have two author roles inside of the array,

00:11:11.650 --> 00:11:15.340
and this find method will select the very first one.

00:11:15.340 --> 00:11:17.515
We'll rename this to be the author

00:11:17.515 --> 00:11:20.185
and also log this to the console.

00:11:20.185 --> 00:11:23.995
Save and refresh, open this up.

00:11:23.995 --> 00:11:26.365
This has selected user number two,

00:11:26.365 --> 00:11:29.740
which is the first of our two author roles.

00:11:29.740 --> 00:11:31.870
This is really useful for finding

00:11:31.870 --> 00:11:34.495
the first match inside of our array.

00:11:34.495 --> 00:11:36.550
But what about if we wanted to select

00:11:36.550 --> 00:11:39.025
both of these users which were a match?

00:11:39.025 --> 00:11:42.770
Well, for this we also have a method called filter.

00:11:42.770 --> 00:11:45.825
Using the same example as before,

00:11:45.825 --> 00:11:47.220
all we've done here is to change

00:11:47.220 --> 00:11:49.050
the find method to be filter,

00:11:49.050 --> 00:11:50.370
and this will return all of

00:11:50.370 --> 00:11:52.670
the matches instead of the first one.

00:11:52.670 --> 00:11:54.550
Meaning we get back a new array

00:11:54.550 --> 00:11:57.920
containing user 2 and also 3.

00:11:58.410 --> 00:12:01.615
All we do is change find to be filter,

00:12:01.615 --> 00:12:03.040
and instead we get in

00:12:03.040 --> 00:12:04.540
back multiple authors so we'll

00:12:04.540 --> 00:12:06.685
add an s onto each one of these.

00:12:06.685 --> 00:12:09.020
Save and Refresh.

00:12:09.020 --> 00:12:12.735
We're now see an array containing two separate objects.

00:12:12.735 --> 00:12:15.360
If we open this up, inside of here we can see we

00:12:15.360 --> 00:12:18.765
have user number two and also number three.

00:12:18.765 --> 00:12:20.895
It is all really useful methods for

00:12:20.895 --> 00:12:23.660
selecting values inside of an array.

00:12:23.660 --> 00:12:25.690
Also some things to be aware of as well

00:12:25.690 --> 00:12:27.790
is since ES 2015,

00:12:27.790 --> 00:12:29.470
we also have a different type of

00:12:29.470 --> 00:12:31.585
function syntax which we can use,

00:12:31.585 --> 00:12:33.970
and this is called a arrow function.

00:12:33.970 --> 00:12:36.820
Arrow functions have some behavior differences

00:12:36.820 --> 00:12:38.305
to this traditional function,

00:12:38.305 --> 00:12:41.545
which we'll look at in more detail in a later section.

00:12:41.545 --> 00:12:43.540
But for now, we can also use them to

00:12:43.540 --> 00:12:45.820
shorten our function code.

00:12:45.820 --> 00:12:49.660
The way to do this is to remove this function keyword,

00:12:49.660 --> 00:12:51.910
and then just after these brackets

00:12:51.910 --> 00:12:53.755
we then place in an arrow.

00:12:53.755 --> 00:12:56.470
An arrow consists of the equals and

00:12:56.470 --> 00:12:57.790
the right angle bracket to

00:12:57.790 --> 00:12:59.935
create this arrow function effects.

00:12:59.935 --> 00:13:02.560
As it stands, this code is completely valid.

00:13:02.560 --> 00:13:03.760
This is fine to use.

00:13:03.760 --> 00:13:05.905
If we were to save this and refresh,

00:13:05.905 --> 00:13:08.260
we still see the same two results,

00:13:08.260 --> 00:13:11.575
but we can also shorten this function even further.

00:13:11.575 --> 00:13:13.510
We can place all of this code onto

00:13:13.510 --> 00:13:16.885
one single line by removing these curly brackets.

00:13:16.885 --> 00:13:18.865
We'll move both of these

00:13:18.865 --> 00:13:22.520
and place this all onto a single line.

00:13:22.530 --> 00:13:25.285
Bring this up just like this.

00:13:25.285 --> 00:13:26.950
Then we write an arrow function

00:13:26.950 --> 00:13:28.495
just like this on its own line.

00:13:28.495 --> 00:13:30.580
We can also remove the return keyword to,

00:13:30.580 --> 00:13:33.505
since this will be automatically returned for us.

00:13:33.505 --> 00:13:35.170
Again, this is all perfectly

00:13:35.170 --> 00:13:37.000
valid and if we refresh the browser,

00:13:37.000 --> 00:13:39.685
we still see the same two results.

00:13:39.685 --> 00:13:41.440
Finally, if we only have

00:13:41.440 --> 00:13:43.840
one single parameter past this function,

00:13:43.840 --> 00:13:45.055
we can even remove the

00:13:45.055 --> 00:13:47.455
surrounding brackets just like this.

00:13:47.455 --> 00:13:50.410
But you be aware, if we do have multiple parameters,

00:13:50.410 --> 00:13:53.065
we had to pass in a second value inside here,

00:13:53.065 --> 00:13:55.990
we would still need to add the surrounding brackets.

00:13:55.990 --> 00:13:58.975
A syntax is often used to keep things like this,

00:13:58.975 --> 00:14:00.760
which are more simple and add all

00:14:00.760 --> 00:14:02.965
of our code onto one single line.

00:14:02.965 --> 00:14:04.330
It's up to you, which type you

00:14:04.330 --> 00:14:06.010
prefer to use in your own code.

00:14:06.010 --> 00:14:08.170
But it's useful to know both of these styles

00:14:08.170 --> 00:14:11.350
exist because you will see lots of examples online.

00:14:11.350 --> 00:14:13.420
These last few videos I've shown you some of

00:14:13.420 --> 00:14:15.490
the more popular array methods,

00:14:15.490 --> 00:14:17.560
and there is still a few more too,

00:14:17.560 --> 00:14:20.325
but they all generally work in a similar way.

00:14:20.325 --> 00:14:23.495
There's also more of these iteration methods too.

00:14:23.495 --> 00:14:27.420
Coming up, we'll take a look at these in more detail.
