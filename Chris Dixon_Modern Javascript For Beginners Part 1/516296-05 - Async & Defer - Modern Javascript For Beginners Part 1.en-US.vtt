WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.540 --> 00:00:04.770
Inside of our starter files,

00:00:04.770 --> 00:00:06.510
we're going to close down this file

00:00:06.510 --> 00:00:08.670
from the last video so there's no confusion.

00:00:08.670 --> 00:00:10.980
Then head into lesson 2,

00:00:10.980 --> 00:00:13.425
which is async and defer.

00:00:13.425 --> 00:00:16.620
Double click on the index page to open this up.

00:00:16.620 --> 00:00:18.720
Since we're now in a new file,

00:00:18.720 --> 00:00:21.510
we need to copy this or copy the path to

00:00:21.510 --> 00:00:25.560
this and then paste this inside of the browser.

00:00:25.560 --> 00:00:27.290
We see straight away that we still have

00:00:27.290 --> 00:00:29.555
the same error as the previous video.

00:00:29.555 --> 00:00:32.450
This is because this is pretty much the same file

00:00:32.450 --> 00:00:35.735
or the same ending code which we had in the last video.

00:00:35.735 --> 00:00:39.200
We have our script and then we also have our level

00:00:39.200 --> 00:00:40.460
1 heading and the same

00:00:40.460 --> 00:00:43.025
contents inside of the script file.

00:00:43.025 --> 00:00:45.950
You will need to do this for each video we go to.

00:00:45.950 --> 00:00:48.230
We need to open up the index page and

00:00:48.230 --> 00:00:51.370
also make sure that this is the right page title.

00:00:51.370 --> 00:00:54.170
In the last video, we discovered a problem when

00:00:54.170 --> 00:00:57.125
loading up our JavaScript files too early.

00:00:57.125 --> 00:00:59.220
This can cause two problems.

00:00:59.220 --> 00:01:00.570
First, we might need to access

00:01:00.570 --> 00:01:03.800
HTML element before it's even being created,

00:01:03.800 --> 00:01:06.320
just like we see here, and second of all,

00:01:06.320 --> 00:01:07.520
we may have a lot of

00:01:07.520 --> 00:01:10.435
JavaScript code located inside this file.

00:01:10.435 --> 00:01:12.020
This could really slow down

00:01:12.020 --> 00:01:14.380
the loading of the rest of our page.

00:01:14.380 --> 00:01:17.150
If the script 1 was a really huge file,

00:01:17.150 --> 00:01:20.000
the user wouldn't see any of the HTML loaded on

00:01:20.000 --> 00:01:23.135
the page until this script had finished executing.

00:01:23.135 --> 00:01:25.640
We're now going to look at two ways we can use to

00:01:25.640 --> 00:01:28.750
fix this whole async and defer.

00:01:28.750 --> 00:01:31.310
Async and defer are both attributes which

00:01:31.310 --> 00:01:34.390
we can add inside of the script elements.

00:01:34.390 --> 00:01:37.180
First, let's take a look at async

00:01:37.180 --> 00:01:40.025
and close down the sidebar for some more space.

00:01:40.025 --> 00:01:43.750
Make sure this file is saved and refresh the browser.

00:01:43.750 --> 00:01:47.100
Straightway, we see that the error has disappeared.

00:01:47.100 --> 00:01:49.995
The JavaScript has been applied to our element

00:01:49.995 --> 00:01:53.675
and we don't see any errors over inside the console.

00:01:53.675 --> 00:01:57.390
Let's try defer. Place this

00:01:57.390 --> 00:01:59.025
and refresh the browser

00:01:59.025 --> 00:02:01.055
and we have exactly the same result.

00:02:01.055 --> 00:02:03.700
Everything is working perfectly fine.

00:02:03.700 --> 00:02:05.340
With these both working,

00:02:05.340 --> 00:02:07.575
what exactly is the difference?

00:02:07.575 --> 00:02:09.720
Well, first we have async,

00:02:09.720 --> 00:02:13.155
and async is short for asynchronous.

00:02:13.155 --> 00:02:15.975
This is a term we'll come back to later on.

00:02:15.975 --> 00:02:18.205
But for this particular use-case,

00:02:18.205 --> 00:02:20.240
async will download this script

00:02:20.240 --> 00:02:23.405
alongside the rest of our HTML content.

00:02:23.405 --> 00:02:26.315
But to understand what async is actually doing,

00:02:26.315 --> 00:02:28.700
we need to look a little bit further ahead.

00:02:28.700 --> 00:02:31.550
Now imagine, rather than having our script in

00:02:31.550 --> 00:02:33.155
our index page inside

00:02:33.155 --> 00:02:35.285
of the text editor like we do here,

00:02:35.285 --> 00:02:37.945
imagine this was a live website.

00:02:37.945 --> 00:02:39.815
If this was a live website,

00:02:39.815 --> 00:02:41.900
our scripts and our index page

00:02:41.900 --> 00:02:44.065
will be stored on a web server.

00:02:44.065 --> 00:02:47.285
When the user visits our page for the first time,

00:02:47.285 --> 00:02:50.390
the contents of these files will need to be downloaded.

00:02:50.390 --> 00:02:53.375
When we mark this as an async script,

00:02:53.375 --> 00:02:55.265
this JavaScript code will be downloaded

00:02:55.265 --> 00:02:58.000
alongside our HTML content.

00:02:58.000 --> 00:03:00.695
This means rather than blocking our HTML code,

00:03:00.695 --> 00:03:02.599
the HTML is still downloaded

00:03:02.599 --> 00:03:04.640
and then rendered inside the browser,

00:03:04.640 --> 00:03:06.050
so it shouldn't cause much of

00:03:06.050 --> 00:03:08.110
a slowdown with our content.

00:03:08.110 --> 00:03:10.235
Then it will run the contents of our script

00:03:10.235 --> 00:03:12.545
as soon as it is all finished downloading.

00:03:12.545 --> 00:03:14.270
This has its advantages.

00:03:14.270 --> 00:03:16.490
It's really useful since it's not blocking

00:03:16.490 --> 00:03:19.865
the loading of our content but there's a drawback.

00:03:19.865 --> 00:03:21.720
You see this, I'm going to link

00:03:21.720 --> 00:03:24.015
to three separate scripts.

00:03:24.015 --> 00:03:28.315
Let's copy and paste this two more times.

00:03:28.315 --> 00:03:31.275
This can be script 2, and script 3,

00:03:31.275 --> 00:03:32.780
and of course we need to create

00:03:32.780 --> 00:03:36.785
two new files inside of our Async and defer folder.

00:03:36.785 --> 00:03:42.170
Second one, scripts2.js.

00:03:42.170 --> 00:03:48.075
Also script 3 into our script 1.

00:03:48.075 --> 00:03:51.475
For clarity here, we can change this to be number 1,

00:03:51.475 --> 00:03:53.020
and then save this file,

00:03:53.020 --> 00:03:57.350
and copy this line of code into our script 2.

00:03:57.350 --> 00:03:59.010
Paste this inside here and

00:03:59.010 --> 00:04:00.990
we can change this to number 2.

00:04:00.990 --> 00:04:04.785
Save this on the same for number 3.

00:04:04.785 --> 00:04:08.470
Now with our three scripts linked just here,

00:04:08.470 --> 00:04:11.365
in theory, what should we expect to happen?

00:04:11.365 --> 00:04:13.660
Well, probably we would expect this

00:04:13.660 --> 00:04:15.955
to be the number 3 inside of here,

00:04:15.955 --> 00:04:17.945
because we loaded script number 1,

00:04:17.945 --> 00:04:20.580
which will change the contents to be number 1.

00:04:20.580 --> 00:04:23.310
Then script 2 which we'll change this to be number 2,

00:04:23.310 --> 00:04:25.535
and then number 3 will override this to be

00:04:25.535 --> 00:04:28.065
number 3. Well, let's check this out.

00:04:28.065 --> 00:04:31.305
We can save this file and also the browser, refresh.

00:04:31.305 --> 00:04:33.955
We see number 3 as expected.

00:04:33.955 --> 00:04:37.100
Let's try refreshing a few more times.

00:04:37.100 --> 00:04:39.500
If we keep refreshing multiple times,

00:04:39.500 --> 00:04:42.005
we'll eventually see a different number.

00:04:42.005 --> 00:04:44.930
We eventually see this value of 2 because

00:04:44.930 --> 00:04:48.430
we are requesting all three of these scripts in order.

00:04:48.430 --> 00:04:49.940
But even though we are

00:04:49.940 --> 00:04:52.295
requesting these three scripts in order,

00:04:52.295 --> 00:04:54.290
it doesn't mean that you're always going to come

00:04:54.290 --> 00:04:56.870
back from the server in this particular order.

00:04:56.870 --> 00:04:58.340
But you may be thinking, why

00:04:58.340 --> 00:05:00.275
should I even care about this?

00:05:00.275 --> 00:05:04.040
In exactly the same way as script1.js

00:05:04.040 --> 00:05:07.820
relied on the contents of the HTML to be present,

00:05:07.820 --> 00:05:11.620
sometimes one script may rely on another script too.

00:05:11.620 --> 00:05:15.470
For example, our third JavaScript file may rely on

00:05:15.470 --> 00:05:17.240
some code from the first two files

00:05:17.240 --> 00:05:18.710
to be available first,

00:05:18.710 --> 00:05:21.455
and if this is downloaded first before the previous two,

00:05:21.455 --> 00:05:23.270
this will then cause an error.

00:05:23.270 --> 00:05:26.000
Certain JavaScript libraries of frameworks will

00:05:26.000 --> 00:05:28.955
also have multiple scripts which we need to download,

00:05:28.955 --> 00:05:31.495
and these will need to be downloaded in order.

00:05:31.495 --> 00:05:33.440
For example, in earlier versions

00:05:33.440 --> 00:05:34.970
of the Bootstrap framework,

00:05:34.970 --> 00:05:38.770
we used to always rely on the jQuery framework too.

00:05:38.770 --> 00:05:40.560
For the first script, we would need to

00:05:40.560 --> 00:05:42.555
download the jQuery library.

00:05:42.555 --> 00:05:44.780
Then only after this has finished loading,

00:05:44.780 --> 00:05:47.060
we would then download the Bootstrap library,

00:05:47.060 --> 00:05:50.485
which was then making use of the jQuery features.

00:05:50.485 --> 00:05:52.190
When we need our script files to

00:05:52.190 --> 00:05:53.765
run in a particular order,

00:05:53.765 --> 00:05:57.055
async may not always be the best option to go for.

00:05:57.055 --> 00:05:59.120
Defer, on the other hand, will run

00:05:59.120 --> 00:06:01.760
the scripts in the order which they appear and it will

00:06:01.760 --> 00:06:03.950
do this after all of the scripts on the page

00:06:03.950 --> 00:06:06.920
and also the page content has loaded.

00:06:06.920 --> 00:06:09.125
Let's change this to be defer

00:06:09.125 --> 00:06:11.725
in all three of our scripts.

00:06:11.725 --> 00:06:14.960
If we keep refreshing as many times as we want to,

00:06:14.960 --> 00:06:18.630
we should only ever see the last value of three.

00:06:18.860 --> 00:06:21.030
If you are new to JavaScript,

00:06:21.030 --> 00:06:23.200
I don't expect you to remember all of these,

00:06:23.200 --> 00:06:25.895
and you may not need them all that often.

00:06:25.895 --> 00:06:27.830
But you will also have this video and

00:06:27.830 --> 00:06:29.525
also the project code here

00:06:29.525 --> 00:06:32.215
if you need this as a reference in the future.

00:06:32.215 --> 00:06:34.190
Also remember more commonly too,

00:06:34.190 --> 00:06:36.455
we also have the option to place this script

00:06:36.455 --> 00:06:38.900
right at the end of the body section,

00:06:38.900 --> 00:06:40.460
so it doesn't lock up the loading

00:06:40.460 --> 00:06:43.075
of the rest of the HTML.

00:06:43.075 --> 00:06:45.590
Just as a recap before we move on,

00:06:45.590 --> 00:06:47.030
we have the async and

00:06:47.030 --> 00:06:48.770
the defer keywords which you can

00:06:48.770 --> 00:06:51.085
add as attributes to our scripts.

00:06:51.085 --> 00:06:53.300
When using async, this will download

00:06:53.300 --> 00:06:55.340
the scripts alongside the rest of

00:06:55.340 --> 00:06:58.220
the HTML content and the browser will attempt

00:06:58.220 --> 00:07:01.260
to render the page while downloading this.

00:07:01.260 --> 00:07:02.960
One of the advantages is it won't

00:07:02.960 --> 00:07:05.270
block the rest of the content from rendering,

00:07:05.270 --> 00:07:07.910
and as soon as the file has finished downloading,

00:07:07.910 --> 00:07:10.450
it will then run the script inside.

00:07:10.450 --> 00:07:12.470
We also need to remember if we're

00:07:12.470 --> 00:07:14.405
using multiple async scripts,

00:07:14.405 --> 00:07:16.310
there is no guarantee that they will run in

00:07:16.310 --> 00:07:18.580
the order which we expect them to.

00:07:18.580 --> 00:07:21.830
Async is still a good option if we have multiple scripts

00:07:21.830 --> 00:07:23.480
which do not depend on each other

00:07:23.480 --> 00:07:25.685
to load in a particular order.

00:07:25.685 --> 00:07:28.480
Defer, on the other hand, will load multiple scripts,

00:07:28.480 --> 00:07:31.690
and we know that the order is going to be preserved.

00:07:31.690 --> 00:07:33.680
If our scripts will run as soon as

00:07:33.680 --> 00:07:35.240
both the page contents such

00:07:35.240 --> 00:07:38.900
as the HTML and these scripts have finished downloading,

00:07:38.900 --> 00:07:41.180
then this all means that we should prefer to use

00:07:41.180 --> 00:07:42.920
a deferred scripts when we have

00:07:42.920 --> 00:07:45.670
multiple scripts that would need to run in order.

00:07:45.670 --> 00:07:49.490
This is the key takeaway that async could be used when we

00:07:49.490 --> 00:07:51.335
have multiple scripts that

00:07:51.335 --> 00:07:53.405
don't need to run in a particular order.

00:07:53.405 --> 00:07:55.310
We should use defer when we need

00:07:55.310 --> 00:07:58.295
these scripts to run in a particular order.

00:07:58.295 --> 00:07:59.870
Again, you may not need to use

00:07:59.870 --> 00:08:01.535
these two key words very often,

00:08:01.535 --> 00:08:02.960
but it's also really important to

00:08:02.960 --> 00:08:04.400
be aware of all of these parts of

00:08:04.400 --> 00:08:07.610
JavaScript in case you come across these in the future.

00:08:07.610 --> 00:08:10.010
Next, we're going to move away from the loading of

00:08:10.010 --> 00:08:11.510
JavaScript and take a look

00:08:11.510 --> 00:08:14.070
at how we can work with strings.
