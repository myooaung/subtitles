WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.270 --> 00:00:04.590
Inside of this JavaScript folder,

00:00:04.590 --> 00:00:06.405
we now onto Section 2,

00:00:06.405 --> 00:00:08.820
which is this array section just here,

00:00:08.820 --> 00:00:10.140
and then lesson Number 1,

00:00:10.140 --> 00:00:12.585
which is the array constructor.

00:00:12.585 --> 00:00:14.670
Let's select this, and open this

00:00:14.670 --> 00:00:17.170
up inside of the browser.

00:00:17.470 --> 00:00:20.850
We learned in last video that arrays fall into

00:00:20.850 --> 00:00:22.740
the object type group and

00:00:22.740 --> 00:00:24.960
that they are a special type of object,

00:00:24.960 --> 00:00:27.180
which is like a list, and we can access

00:00:27.180 --> 00:00:30.285
any of these values by the index position.

00:00:30.285 --> 00:00:32.450
Inside this script, we have previously

00:00:32.450 --> 00:00:34.100
created arrays just like this.

00:00:34.100 --> 00:00:35.900
As you can see by the comment,

00:00:35.900 --> 00:00:37.790
this is an array literal.

00:00:37.790 --> 00:00:39.500
We declare we want an array by

00:00:39.500 --> 00:00:40.985
using these square brackets,

00:00:40.985 --> 00:00:43.070
and then we can set any initial values

00:00:43.070 --> 00:00:45.055
which we want to place inside,

00:00:45.055 --> 00:00:47.840
we can also confirm that this pizza array is

00:00:47.840 --> 00:00:51.300
an object type by doing a console log.

00:00:51.760 --> 00:00:53.840
Inside of the console log,

00:00:53.840 --> 00:00:55.970
we can make use of the typeof property,

00:00:55.970 --> 00:00:57.380
which we looked at earlier,

00:00:57.380 --> 00:01:00.040
we can check the type of pizza,

00:01:00.040 --> 00:01:02.120
and then inside the console we see

00:01:02.120 --> 00:01:04.085
this is an object type.

00:01:04.085 --> 00:01:06.500
There's also another way to create an array,

00:01:06.500 --> 00:01:08.975
and this is by using the array constructor.

00:01:08.975 --> 00:01:11.060
The array constructor can be used to create

00:01:11.060 --> 00:01:13.625
an empty array which you want to add to later,

00:01:13.625 --> 00:01:15.740
an array with empty spaces,

00:01:15.740 --> 00:01:19.025
or we can also add some initial values to it too.

00:01:19.025 --> 00:01:22.525
To do this, let's first remove our console log,

00:01:22.525 --> 00:01:24.500
let's just also place in a comment,

00:01:24.500 --> 00:01:27.120
this is the array constructor.

00:01:28.180 --> 00:01:30.860
The way we can use the array constructor

00:01:30.860 --> 00:01:32.855
is by using the new keyword,

00:01:32.855 --> 00:01:35.965
followed by array, which has a capital A.

00:01:35.965 --> 00:01:38.610
We can access and work with this later.

00:01:38.610 --> 00:01:42.690
We can also store this new array inside of constant,

00:01:43.280 --> 00:01:46.930
then let's do a console log,

00:01:46.930 --> 00:01:49.070
passing in the value of

00:01:49.070 --> 00:01:51.790
our new array which is ingredients,

00:01:51.790 --> 00:01:53.660
then let's see what this returns

00:01:53.660 --> 00:01:55.655
back inside of the console.

00:01:55.655 --> 00:01:58.010
What we have here is these square brackets and

00:01:58.010 --> 00:02:00.260
we don't have any values inside,

00:02:00.260 --> 00:02:04.355
we can also see the length property has a value of zero.

00:02:04.355 --> 00:02:06.620
Alternatively, if we did want

00:02:06.620 --> 00:02:08.555
to initialize this with some values,

00:02:08.555 --> 00:02:09.950
we could also pass in the values

00:02:09.950 --> 00:02:11.900
inside of these brackets.

00:02:11.900 --> 00:02:16.960
Let's go for dough, a second value of cheese,

00:02:16.960 --> 00:02:19.130
then inside the console we now see

00:02:19.130 --> 00:02:21.335
these two values inside of the array,

00:02:21.335 --> 00:02:23.410
and the length is now two.

00:02:23.410 --> 00:02:25.160
This way is just exactly the

00:02:25.160 --> 00:02:27.155
same as the literal method above,

00:02:27.155 --> 00:02:29.240
and the result is exactly the same.

00:02:29.240 --> 00:02:33.110
If we wanted to we could also replace these two values,

00:02:33.110 --> 00:02:35.885
and setup the initial length of the array.

00:02:35.885 --> 00:02:38.780
Here, we could remove these and we could declare we want

00:02:38.780 --> 00:02:41.890
a new array with five empty spaces.

00:02:41.890 --> 00:02:43.830
We can also see these inside the console,

00:02:43.830 --> 00:02:45.890
we see the empty times 5.

00:02:45.890 --> 00:02:47.630
This is just an empty array,

00:02:47.630 --> 00:02:50.885
which is going to be initialized with five empty slots.

00:02:50.885 --> 00:02:53.840
For me though personally, I prefer the first approach,

00:02:53.840 --> 00:02:55.595
which is the literal version.

00:02:55.595 --> 00:02:57.020
For me, it just seems a little bit more

00:02:57.020 --> 00:02:58.460
clean and descriptive,

00:02:58.460 --> 00:03:01.820
but it's completely up to you which one you want to use.

00:03:01.820 --> 00:03:04.460
It's also worth noting here that even though we've

00:03:04.460 --> 00:03:06.755
set up an array with five empty slots,

00:03:06.755 --> 00:03:09.035
this is just the starting value,

00:03:09.035 --> 00:03:12.490
we can also add to it by using a push method.

00:03:12.490 --> 00:03:14.075
The way to do this is to

00:03:14.075 --> 00:03:17.060
first access our ingredients array,

00:03:17.060 --> 00:03:20.510
and then we can chain on the end a push method,

00:03:20.510 --> 00:03:22.130
which is going to push

00:03:22.130 --> 00:03:24.730
a new value to the end of this array.

00:03:24.730 --> 00:03:28.305
Let's go for peppers, save.

00:03:28.305 --> 00:03:31.760
We now see we have six values stored inside of the array.

00:03:31.760 --> 00:03:34.430
The first values are five empty slots,

00:03:34.430 --> 00:03:35.990
followed by the new value, which we just

00:03:35.990 --> 00:03:38.245
push to the end of this array.

00:03:38.245 --> 00:03:41.345
We don't always want to keep this slot as empty.

00:03:41.345 --> 00:03:43.340
What if we wanted to replace one of

00:03:43.340 --> 00:03:45.740
these empty slots with a new value?

00:03:45.740 --> 00:03:49.625
To do this, we can make use of a method called splice.

00:03:49.625 --> 00:03:51.770
Let's say we want to replace

00:03:51.770 --> 00:03:54.155
the third empty slots with a new value,

00:03:54.155 --> 00:03:57.175
what we can do is to call the splice method

00:03:57.175 --> 00:04:01.580
and splice takes in up to three values called parameters.

00:04:01.580 --> 00:04:04.595
The first one is the position which you want to go to.

00:04:04.595 --> 00:04:08.210
Remember, since arrays begin at index position 0,

00:04:08.210 --> 00:04:09.590
the number 2 will access

00:04:09.590 --> 00:04:12.270
the third slot, separated by comma.

00:04:12.270 --> 00:04:14.270
The second value we want to declare

00:04:14.270 --> 00:04:16.580
how many items we want to remove,

00:04:16.580 --> 00:04:18.920
and in our case, it's just one.

00:04:18.920 --> 00:04:22.220
This will remove one item at index number 2,

00:04:22.220 --> 00:04:24.190
which is our third item.

00:04:24.190 --> 00:04:27.195
Let's say this and refresh the browser.

00:04:27.195 --> 00:04:29.765
Now we see we've removed a single value,

00:04:29.765 --> 00:04:32.210
leaving us with four empty slots.

00:04:32.210 --> 00:04:34.760
But if we didn't want to just remove this value,

00:04:34.760 --> 00:04:37.670
if we wanted to actually replace it with a new value,

00:04:37.670 --> 00:04:39.680
we add a third parameter,

00:04:39.680 --> 00:04:41.945
so let's say onions.

00:04:41.945 --> 00:04:44.900
Refresh this, and there we go.

00:04:44.900 --> 00:04:46.450
We have our first two slots,

00:04:46.450 --> 00:04:47.665
which is still empty;

00:04:47.665 --> 00:04:49.450
we have our third slot which has been

00:04:49.450 --> 00:04:51.270
replaced with the onions value;

00:04:51.270 --> 00:04:55.005
and then slot number 4 and 5, still remains empty.

00:04:55.005 --> 00:04:56.695
In this video, we've looked at

00:04:56.695 --> 00:04:58.930
the push and also the splice method.

00:04:58.930 --> 00:05:00.340
Both of these are really

00:05:00.340 --> 00:05:02.480
useful when working with arrays,

00:05:02.480 --> 00:05:05.395
and we'll cover a lot more during this section.

00:05:05.395 --> 00:05:07.945
Just for clarity for the remainder of this course,

00:05:07.945 --> 00:05:09.520
I will be creating arrays using

00:05:09.520 --> 00:05:11.495
this literal approach just above.

00:05:11.495 --> 00:05:13.600
But it is also really important to

00:05:13.600 --> 00:05:16.030
understand that different approaches exist,

00:05:16.030 --> 00:05:17.710
especially if you come across them in

00:05:17.710 --> 00:05:20.960
other people's code or other guides.
