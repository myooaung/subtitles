WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.240 --> 00:00:05.040
We've created functions so far using

00:00:05.040 --> 00:00:08.060
a syntax called a function declaration.

00:00:08.060 --> 00:00:10.140
There's also a slightly modified way

00:00:10.140 --> 00:00:11.730
to write functions too,

00:00:11.730 --> 00:00:14.175
and these are called function expressions.

00:00:14.175 --> 00:00:17.220
Jump into the starter files for this lesson,

00:00:17.220 --> 00:00:20.025
which is inside of the function section,

00:00:20.025 --> 00:00:22.740
and then into lesson at number 2.

00:00:22.740 --> 00:00:24.510
You can see inside of here,

00:00:24.510 --> 00:00:25.950
if we go down to the script section,

00:00:25.950 --> 00:00:29.730
we have an example of a function declaration.

00:00:29.730 --> 00:00:32.670
This is the type of function we've looked at previously,

00:00:32.670 --> 00:00:34.530
and it looks just like this.

00:00:34.530 --> 00:00:36.200
We use the function keyword,

00:00:36.200 --> 00:00:37.450
we create a function name,

00:00:37.450 --> 00:00:41.375
we pass in any optional parameters inside of here,

00:00:41.375 --> 00:00:42.860
and then we'll write our code inside

00:00:42.860 --> 00:00:44.635
of the function body.

00:00:44.635 --> 00:00:46.400
The alternative, which is

00:00:46.400 --> 00:00:48.875
a function expression which we now are going to look at,

00:00:48.875 --> 00:00:50.800
also looks pretty similar.

00:00:50.800 --> 00:00:54.350
The first difference is the way we name the function.

00:00:54.350 --> 00:00:57.470
To transform this into a function expression,

00:00:57.470 --> 00:01:00.310
we can first remove the function name.

00:01:00.310 --> 00:01:01.880
I'm going to write this just below so

00:01:01.880 --> 00:01:03.515
we can see a comparison.

00:01:03.515 --> 00:01:05.900
We'll also use the function keyword,

00:01:05.900 --> 00:01:07.460
but this time we'll jump straight

00:01:07.460 --> 00:01:10.090
into the brackets or the parentheses.

00:01:10.090 --> 00:01:12.440
We'll compare this to the one above,

00:01:12.440 --> 00:01:17.080
we'll pass in the recipe and also the ingredients.

00:01:17.080 --> 00:01:19.145
Then immediately after we add

00:01:19.145 --> 00:01:22.555
our function body inside of the curly braces,

00:01:22.555 --> 00:01:24.830
let's just copy these two lines

00:01:24.830 --> 00:01:25.850
of code because they're going to

00:01:25.850 --> 00:01:29.240
be exactly the same as this example.

00:01:29.240 --> 00:01:32.660
Then since we don't have a name like we have just above,

00:01:32.660 --> 00:01:36.220
what we need to do is to assign this to a variable,

00:01:36.220 --> 00:01:38.730
create a constant or a variable,

00:01:38.730 --> 00:01:40.560
and then we can give this a name such as

00:01:40.560 --> 00:01:45.155
checkAllergies and set this equal to our function.

00:01:45.155 --> 00:01:49.070
Leave now. Our function name like this is again optional,

00:01:49.070 --> 00:01:50.945
but this is now an anonymous function

00:01:50.945 --> 00:01:53.290
because of the lack of name.

00:01:53.290 --> 00:01:56.240
What we want to do now just to avoid any confusion

00:01:56.240 --> 00:01:59.225
is to comment out this original function.

00:01:59.225 --> 00:02:02.755
We can also check if it's working by doing a console log.

00:02:02.755 --> 00:02:05.390
Just like earlier, we pass in the function name,

00:02:05.390 --> 00:02:07.415
but this time, this is the variable name.

00:02:07.415 --> 00:02:09.290
We can still use the brackets just

00:02:09.290 --> 00:02:11.885
afterwards to passing any optional arguments.

00:02:11.885 --> 00:02:15.440
The recipe, we can go for anything such as bread,

00:02:15.440 --> 00:02:18.470
pass in an ingredient check such as yeast,

00:02:18.470 --> 00:02:20.150
then over to the browser,

00:02:20.150 --> 00:02:23.830
open up the developer tools and head into the console.

00:02:23.830 --> 00:02:26.020
We see the value of true,

00:02:26.020 --> 00:02:27.980
changes to be incorrect.

00:02:27.980 --> 00:02:31.045
Now this function works completely fine.

00:02:31.045 --> 00:02:33.590
Storing this function name inside

00:02:33.590 --> 00:02:35.510
of the variable is an obvious difference

00:02:35.510 --> 00:02:37.070
between the function declaration

00:02:37.070 --> 00:02:39.890
above and this function expression.

00:02:39.890 --> 00:02:42.805
Another difference is something called hoisting.

00:02:42.805 --> 00:02:44.480
Hoisting is something which we'll

00:02:44.480 --> 00:02:46.385
cover later in more detail.

00:02:46.385 --> 00:02:48.740
But for now, you can think of this as we can

00:02:48.740 --> 00:02:51.545
call a function before we actually create it.

00:02:51.545 --> 00:02:53.750
It behaves like our function is declared at

00:02:53.750 --> 00:02:55.175
the very top of the file

00:02:55.175 --> 00:02:57.535
and it's always available to use.

00:02:57.535 --> 00:02:59.690
What we're going to do is to now cut out

00:02:59.690 --> 00:03:03.605
this console log and move this up to the top of the file,

00:03:03.605 --> 00:03:07.000
or just anywhere above the function is actually fine.

00:03:07.000 --> 00:03:09.170
What we're doing here is we're calling

00:03:09.170 --> 00:03:11.615
our function before we actually create it.

00:03:11.615 --> 00:03:14.855
JavaScript programs are read from the top to the bottom.

00:03:14.855 --> 00:03:16.910
We possibly call in a function,

00:03:16.910 --> 00:03:18.230
before we even knows

00:03:18.230 --> 00:03:21.775
the function exists. Do you think this will work?

00:03:21.775 --> 00:03:23.780
Well, let's say this and try this

00:03:23.780 --> 00:03:25.745
out inside the console.

00:03:25.745 --> 00:03:28.730
Refresh. We now see an error inside of here.

00:03:28.730 --> 00:03:30.065
We cannot access

00:03:30.065 --> 00:03:33.520
checkAllergies before its initialization.

00:03:33.520 --> 00:03:36.140
This means for a function expressions

00:03:36.140 --> 00:03:38.470
which is the new type which we've created here,

00:03:38.470 --> 00:03:40.220
we have to call them after they

00:03:40.220 --> 00:03:42.380
have been created inside the program.

00:03:42.380 --> 00:03:44.060
Effectively blow.

00:03:44.060 --> 00:03:47.500
But what about this original function declaration?

00:03:47.500 --> 00:03:48.780
Well, let's try this out.

00:03:48.780 --> 00:03:51.575
If we uncomment out the original one,

00:03:51.575 --> 00:03:54.410
comment out the expression.

00:03:54.410 --> 00:03:56.660
Now this is the same function name,

00:03:56.660 --> 00:03:59.225
so we're now calling this before it's being created.

00:03:59.225 --> 00:04:01.660
We can see what happens inside the browser.

00:04:01.660 --> 00:04:04.260
Refresh, we don't see any issues.

00:04:04.260 --> 00:04:07.275
Our function will now run perfectly fine.

00:04:07.275 --> 00:04:08.780
This is another difference

00:04:08.780 --> 00:04:10.855
between the two styles of function.

00:04:10.855 --> 00:04:13.850
This function declaration can be called anywhere

00:04:13.850 --> 00:04:15.005
inside of our program

00:04:15.005 --> 00:04:17.360
even before we've actually created it.

00:04:17.360 --> 00:04:19.819
The reason is original function declaration

00:04:19.819 --> 00:04:21.290
is available anywhere,

00:04:21.290 --> 00:04:23.780
is because it's on the global scope.

00:04:23.780 --> 00:04:25.710
Just like we looked at in the previous video,

00:04:25.710 --> 00:04:29.120
we can access this via the window. See this?

00:04:29.120 --> 00:04:30.650
What we're going to do is we want to make both of

00:04:30.650 --> 00:04:34.100
these functions now active. There's no confusion.

00:04:34.100 --> 00:04:36.670
We'll change this to be checkAllergies 2.

00:04:36.670 --> 00:04:39.035
We can comment out a console log.

00:04:39.035 --> 00:04:41.000
This doesn't run inside the browser.

00:04:41.000 --> 00:04:43.490
Now we'll have both of these functions now active.

00:04:43.490 --> 00:04:46.220
Let's head over to the console.

00:04:46.220 --> 00:04:48.110
What we're going to do inside of here,

00:04:48.110 --> 00:04:50.250
we'll refresh the cleanness and then

00:04:50.250 --> 00:04:52.665
we'll access the window objects.

00:04:52.665 --> 00:04:55.550
Remember, this will access all of the available window.

00:04:55.550 --> 00:04:58.670
But if we want to, we can also use the dot notation.

00:04:58.670 --> 00:05:02.625
Narrow this down to a particular property as well.

00:05:02.625 --> 00:05:05.800
We'll go for our first function which is checkAllergies.

00:05:05.800 --> 00:05:08.000
Hit "Enter", and here we see

00:05:08.000 --> 00:05:10.670
a reference to our checkAllergies function.

00:05:10.670 --> 00:05:12.755
However, if we do this again,

00:05:12.755 --> 00:05:14.570
access the window, and then

00:05:14.570 --> 00:05:16.295
this time we go for checkAllergies.

00:05:16.295 --> 00:05:19.165
Number 2, hit

00:05:19.165 --> 00:05:22.660
"Enter" and we now get back a result of undefined.

00:05:22.660 --> 00:05:24.240
This backs up just what we looked

00:05:24.240 --> 00:05:25.430
up before in the examples,

00:05:25.430 --> 00:05:27.830
the original function, which is check,

00:05:27.830 --> 00:05:30.365
is now available on the global object,

00:05:30.365 --> 00:05:34.145
meaning we can access this in any part of our code.

00:05:34.145 --> 00:05:35.930
However, though, checkAllergies 2,

00:05:35.930 --> 00:05:37.250
which was the second one,

00:05:37.250 --> 00:05:39.050
which is the function expression.

00:05:39.050 --> 00:05:41.620
This is not available on the global scope.

00:05:41.620 --> 00:05:43.250
This is why we have to call it

00:05:43.250 --> 00:05:45.580
after we've created the function.

00:05:45.580 --> 00:05:48.950
This can be an important consideration because we don't

00:05:48.950 --> 00:05:50.270
always want to produce

00:05:50.270 --> 00:05:52.855
a global scope, unless we need to.

00:05:52.855 --> 00:05:55.895
An example of this can be a callback function.

00:05:55.895 --> 00:05:57.710
A callback is a function plus two,

00:05:57.710 --> 00:05:59.360
another function, like we looked

00:05:59.360 --> 00:06:01.705
at earlier with our array methods.

00:06:01.705 --> 00:06:04.140
Let's take a look at another example.

00:06:04.140 --> 00:06:07.370
I'm going to comment out these two functions here.

00:06:07.370 --> 00:06:09.775
Then I'm going to create a new function.

00:06:09.775 --> 00:06:13.355
This function is just going to be called to toUpper.

00:06:13.355 --> 00:06:14.915
This is going to convert

00:06:14.915 --> 00:06:17.960
any string passed it to be uppercase.

00:06:17.960 --> 00:06:20.135
We need to pass in a string,

00:06:20.135 --> 00:06:21.740
and I'll call this value.

00:06:21.740 --> 00:06:24.790
Then this is going to return the new string.

00:06:24.790 --> 00:06:26.600
What we need to do inside of here,

00:06:26.600 --> 00:06:28.460
is to access the value.

00:06:28.460 --> 00:06:33.270
Then we can call a string method called toUpperCase.

00:06:33.560 --> 00:06:37.550
This will transform a lowercase string to be uppercase.

00:06:37.550 --> 00:06:40.460
This will be sent back from this function.

00:06:40.460 --> 00:06:44.890
Then, to check if it's working we'll do a console log,

00:06:44.890 --> 00:06:48.130
call our function, then we can pass

00:06:48.130 --> 00:06:51.385
in any string inside of here which we want to convert.

00:06:51.385 --> 00:06:54.670
Let's try this out with the string of flour.

00:06:54.670 --> 00:06:56.620
Refresh the browser and this is being

00:06:56.620 --> 00:06:59.075
transformed to be uppercase.

00:06:59.075 --> 00:07:00.820
Nothing we haven't seen before.

00:07:00.820 --> 00:07:03.430
We just created a function to transform the text.

00:07:03.430 --> 00:07:06.685
We can also see inside of the window object,

00:07:06.685 --> 00:07:10.490
that we can access our function inside of here.

00:07:10.520 --> 00:07:14.875
Since this is having access to our function, we know,

00:07:14.875 --> 00:07:16.585
just like we're seeing with this one here,

00:07:16.585 --> 00:07:18.160
that this style of function is

00:07:18.160 --> 00:07:20.435
available on the global object.

00:07:20.435 --> 00:07:22.870
This style may be perfectly fine if we wanted to

00:07:22.870 --> 00:07:25.330
use it in multiple parts of our application.

00:07:25.330 --> 00:07:27.220
We'll refer them back to something

00:07:27.220 --> 00:07:29.485
like the array methods which we mentioned before.

00:07:29.485 --> 00:07:30.860
We don't always need to make

00:07:30.860 --> 00:07:33.040
this function available globally.

00:07:33.040 --> 00:07:35.030
For example, if we call one of the arrays

00:07:35.030 --> 00:07:36.890
which we have at the top, such as breads,

00:07:36.890 --> 00:07:38.780
and then we can call

00:07:38.780 --> 00:07:41.090
map to loop through each one of these values.

00:07:41.090 --> 00:07:43.070
Then on each one of these values we

00:07:43.070 --> 00:07:45.900
can call the toUpper function.

00:07:45.950 --> 00:07:50.740
To see this, we'll pass this into our console log.

00:07:52.000 --> 00:07:55.370
Save this, and now if we refresh the browser,

00:07:55.370 --> 00:07:57.200
we see that each one of these values has

00:07:57.200 --> 00:07:59.950
been transformed to be uppercase.

00:07:59.950 --> 00:08:01.850
For an example like this one,

00:08:01.850 --> 00:08:04.160
we don't need this function to be global and we

00:08:04.160 --> 00:08:07.130
just simply want to pass it to a method such as map.

00:08:07.130 --> 00:08:09.350
This could now be a good use case to transform

00:08:09.350 --> 00:08:12.660
this function to be a function expression.

00:08:12.760 --> 00:08:15.680
To recap, a function declaration is

00:08:15.680 --> 00:08:17.945
constructed using the function keyword,

00:08:17.945 --> 00:08:20.120
a function name with optional parameters,

00:08:20.120 --> 00:08:23.140
and all of the code inside of the curly braces.

00:08:23.140 --> 00:08:25.400
The function expression which we have just looked

00:08:25.400 --> 00:08:27.695
at is stored into a variable.

00:08:27.695 --> 00:08:30.805
We can also have a optional function name too.

00:08:30.805 --> 00:08:32.390
This is the difference between these

00:08:32.390 --> 00:08:33.950
two types of functions.

00:08:33.950 --> 00:08:36.125
If this is all new to you don't worry.

00:08:36.125 --> 00:08:37.370
You don't need to remember all of

00:08:37.370 --> 00:08:38.825
these different names for now.

00:08:38.825 --> 00:08:40.700
I just want to make you aware that there is

00:08:40.700 --> 00:08:42.890
different styles of functions available,

00:08:42.890 --> 00:08:44.720
because you may need to use them one day,

00:08:44.720 --> 00:08:48.510
or you may also see them in other examples too.
