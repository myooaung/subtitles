WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:04.040 --> 00:00:06.270
Regular arrays, as we know,

00:00:06.270 --> 00:00:09.105
store values in order from left to right,

00:00:09.105 --> 00:00:11.970
starting at index position 0.

00:00:11.970 --> 00:00:14.370
But we can also use arrays in

00:00:14.370 --> 00:00:17.995
a two-dimensional way to create a grid like structure,

00:00:17.995 --> 00:00:19.280
just like you can see here in

00:00:19.280 --> 00:00:21.965
the slide. Seems complex, right?

00:00:21.965 --> 00:00:25.270
Well, this is not as complex as it may seem.

00:00:25.270 --> 00:00:27.120
Or we really do need to create in

00:00:27.120 --> 00:00:29.690
a new array for each one of these rows.

00:00:29.690 --> 00:00:31.295
The first row is an array,

00:00:31.295 --> 00:00:33.890
the second row is an array, and so on.

00:00:33.890 --> 00:00:37.580
Then we place all of these inside of a outer array,

00:00:37.580 --> 00:00:41.875
which is like a wrapper which creates an array of arrays.

00:00:41.875 --> 00:00:45.430
Accessing these values is also pretty simple too.

00:00:45.430 --> 00:00:47.675
We just need two index numbers.

00:00:47.675 --> 00:00:50.240
First of all, we select the row and then

00:00:50.240 --> 00:00:52.910
we select the value from that particular row.

00:00:52.910 --> 00:00:54.380
Using these two numbers,

00:00:54.380 --> 00:00:57.065
we can select any of these items which we need.

00:00:57.065 --> 00:00:58.715
Taking a look at this example

00:00:58.715 --> 00:01:00.215
just here over on the right,

00:01:00.215 --> 00:01:03.940
we can see this is at index position 0 and then 1.

00:01:03.940 --> 00:01:06.080
It begins with 0 which accesses

00:01:06.080 --> 00:01:08.240
the first row or the first array

00:01:08.240 --> 00:01:09.620
and then from left to right,

00:01:09.620 --> 00:01:12.950
index position 1 is the second value across.

00:01:12.950 --> 00:01:14.780
Using the second example again,

00:01:14.780 --> 00:01:15.890
we do exactly the same,

00:01:15.890 --> 00:01:18.560
but this time we'll go down to our fourth row,

00:01:18.560 --> 00:01:20.375
which is index number 3,

00:01:20.375 --> 00:01:23.015
and then across to our last item in that row,

00:01:23.015 --> 00:01:25.175
which is index number 4.

00:01:25.175 --> 00:01:27.020
Unfortunately, JavaScript doesn't have

00:01:27.020 --> 00:01:29.855
a built-in way of creating two-dimensional arrays.

00:01:29.855 --> 00:01:31.460
Instead, this is why we need to create

00:01:31.460 --> 00:01:33.775
them as nested arrays.

00:01:33.775 --> 00:01:36.995
Let's give this a try over in our editor,

00:01:36.995 --> 00:01:38.420
head into this file which is

00:01:38.420 --> 00:01:40.700
the two-dimensional arrays or

00:01:40.700 --> 00:01:43.250
I can get this to go down in the script.

00:01:43.250 --> 00:01:45.550
Open this up, and let's

00:01:45.550 --> 00:01:48.395
create our first array called grid.

00:01:48.395 --> 00:01:51.330
This one is going to be our wrapper.

00:01:51.330 --> 00:01:52.960
We can place these on two

00:01:52.960 --> 00:01:54.910
separate lines to make this more clear.

00:01:54.910 --> 00:01:57.490
Then inside we're going to add three rows.

00:01:57.490 --> 00:01:59.080
The first row, as we've just seen,

00:01:59.080 --> 00:02:00.980
is just a simple array.

00:02:00.980 --> 00:02:03.930
Let's add some numbers, 11, 12,

00:02:03.930 --> 00:02:07.240
13 and as with all array values,

00:02:07.240 --> 00:02:09.095
we separate them with a comma.

00:02:09.095 --> 00:02:14.310
Row 2 is a new array with 21, 22,

00:02:14.310 --> 00:02:18.070
23 and finally our third row

00:02:18.070 --> 00:02:22.265
is going to be 31, 32, and 33.

00:02:22.265 --> 00:02:26.450
Let's log this to the console and see what we get back.

00:02:26.860 --> 00:02:29.615
Place in a grid variable,

00:02:29.615 --> 00:02:32.330
refresh and we can see we have an outer array,

00:02:32.330 --> 00:02:34.025
which then in turn contains

00:02:34.025 --> 00:02:38.005
three separate arrays and each one contains three values.

00:02:38.005 --> 00:02:41.775
We can see this more clearly if we expand our first row,

00:02:41.775 --> 00:02:44.385
our second row, and our third row.

00:02:44.385 --> 00:02:46.170
We could also format this in

00:02:46.170 --> 00:02:49.485
a table with the console.table.

00:02:49.485 --> 00:02:51.300
This makes it a little bit clearer.

00:02:51.300 --> 00:02:52.775
Let's see what's going on.

00:02:52.775 --> 00:02:54.650
We can see we have the index number,

00:02:54.650 --> 00:02:56.600
first we select the row and then we

00:02:56.600 --> 00:02:59.380
select the index position of each row.

00:02:59.380 --> 00:03:01.680
This one would be index

00:03:01.680 --> 00:03:04.430
0 1,and just like we're seeing in the slides,

00:03:04.430 --> 00:03:07.720
we can access these with two square brackets.

00:03:07.720 --> 00:03:10.920
For this, we'll go back to a console log.

00:03:10.920 --> 00:03:13.300
I'll put the grid,

00:03:13.300 --> 00:03:15.230
open up the first set of

00:03:15.230 --> 00:03:17.315
square brackets, which is the row.

00:03:17.315 --> 00:03:19.340
For this one, let's go for our third row,

00:03:19.340 --> 00:03:21.085
which is index number 2

00:03:21.085 --> 00:03:24.120
and then just after our second square brackets,

00:03:24.120 --> 00:03:26.690
let's go for the middle one which is 32.

00:03:26.690 --> 00:03:28.910
This is index number 1.

00:03:28.910 --> 00:03:30.875
Save and refresh.

00:03:30.875 --> 00:03:32.690
next our value of 32,

00:03:32.690 --> 00:03:35.200
which is this one just here.

00:03:35.200 --> 00:03:37.790
Creating a two-dimensional arrays is

00:03:37.790 --> 00:03:40.730
not really much harder than creating a single array.

00:03:40.730 --> 00:03:42.590
Instead, all we need to do is to think about

00:03:42.590 --> 00:03:44.060
the coordinate position that

00:03:44.060 --> 00:03:47.340
access each one of the values in our grid.
