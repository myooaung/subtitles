WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.690 --> 00:00:04.200
Welcome back.

00:00:04.200 --> 00:00:06.240
I hope the last mini-challenge went well for

00:00:06.240 --> 00:00:09.825
you and you you to create a new section using JavaScript.

00:00:09.825 --> 00:00:13.050
When even creating a small amount of elements,

00:00:13.050 --> 00:00:15.255
things can get pretty repetitive.

00:00:15.255 --> 00:00:18.825
Imagine creating a list with even five or 10 items,

00:00:18.825 --> 00:00:21.270
creating all the list item elements,

00:00:21.270 --> 00:00:22.695
adding the content,

00:00:22.695 --> 00:00:24.180
and then adding these elements to

00:00:24.180 --> 00:00:27.180
the parents will be a lot of lines of code.

00:00:27.180 --> 00:00:29.310
Or if we wanted to add the same class names

00:00:29.310 --> 00:00:30.825
and lots of different elements,

00:00:30.825 --> 00:00:33.780
again, this is a lot of work and repetition.

00:00:33.780 --> 00:00:36.375
To help with this, we can use a loop,

00:00:36.375 --> 00:00:38.040
although we do have much more on

00:00:38.040 --> 00:00:39.555
loops in a later section.

00:00:39.555 --> 00:00:41.520
We've already looked at some examples of

00:00:41.520 --> 00:00:43.910
looping in the array section.

00:00:43.910 --> 00:00:47.300
We've used the array methods which was mapping for each,

00:00:47.300 --> 00:00:51.095
and these will run a function for each item in the array.

00:00:51.095 --> 00:00:54.710
This was a way of reducing our repetition and this can

00:00:54.710 --> 00:00:58.360
also be applied to anything such as our DOM elements.

00:00:58.360 --> 00:01:00.530
In this video, we'll jump into

00:01:00.530 --> 00:01:03.545
the correct file and open this up inside the browser,

00:01:03.545 --> 00:01:05.750
and then scroll down to

00:01:05.750 --> 00:01:08.630
our index page to the header section,

00:01:08.630 --> 00:01:11.170
and here we have an unordered list.

00:01:11.170 --> 00:01:14.405
Since this has multiple list item elements,

00:01:14.405 --> 00:01:17.635
I'm going to use this and create them with a loop.

00:01:17.635 --> 00:01:20.240
The loops can be used to create these items.

00:01:20.240 --> 00:01:21.820
We can grab all of these items,

00:01:21.820 --> 00:01:23.140
we can make changes,

00:01:23.140 --> 00:01:24.529
we can add classes,

00:01:24.529 --> 00:01:27.335
and also remove some content too.

00:01:27.335 --> 00:01:31.670
Let's go down to our section at the very bottom.

00:01:31.670 --> 00:01:33.860
Just below the looping section,

00:01:33.860 --> 00:01:36.850
we can start by grabbing all of our list items.

00:01:36.850 --> 00:01:38.630
Nothing we haven't seen before.

00:01:38.630 --> 00:01:40.760
We'll grab the document and then we can

00:01:40.760 --> 00:01:43.400
grab these with query selector all.

00:01:43.400 --> 00:01:45.380
Remember, we use query selector all

00:01:45.380 --> 00:01:47.995
since we have multiple list items,

00:01:47.995 --> 00:01:50.185
slide by the tag name,

00:01:50.185 --> 00:01:54.450
and store this inside of a variable called list items.

00:01:55.220 --> 00:01:58.350
Check this works. Inside the browser,

00:01:58.350 --> 00:02:02.460
we can open up the console and access this variable.

00:02:02.870 --> 00:02:06.560
Type in list items and we can see returned back to us is

00:02:06.560 --> 00:02:10.360
a node list containing our two list elements.

00:02:10.360 --> 00:02:12.780
Already our two list elements

00:02:12.780 --> 00:02:14.805
have the class of another item.

00:02:14.805 --> 00:02:17.405
If you had multiple list elements,

00:02:17.405 --> 00:02:19.700
adding in this cluster, each one when we create them,

00:02:19.700 --> 00:02:22.025
will be a really repetitive process.

00:02:22.025 --> 00:02:23.780
If we were to add these manually,

00:02:23.780 --> 00:02:27.020
what we would need to do is to access our list items.

00:02:27.020 --> 00:02:28.790
Since we have multiple items,

00:02:28.790 --> 00:02:31.190
we need to select them by the index number.

00:02:31.190 --> 00:02:33.470
We can then access the class list

00:02:33.470 --> 00:02:36.470
property, the add method.

00:02:36.470 --> 00:02:40.235
Then we can have a screen which is a new class name.

00:02:40.235 --> 00:02:42.470
Now save this and refresh and

00:02:42.470 --> 00:02:44.930
once again access in the list items.

00:02:44.930 --> 00:02:47.060
This would then add the inline class

00:02:47.060 --> 00:02:48.845
to our first element.

00:02:48.845 --> 00:02:50.870
As mentioned, doing this for lots of

00:02:50.870 --> 00:02:52.100
different list items would make

00:02:52.100 --> 00:02:53.705
things really repetitive,

00:02:53.705 --> 00:02:55.280
so we're going to take a look at how we can

00:02:55.280 --> 00:02:57.760
help with this by adding a loop.

00:02:57.760 --> 00:02:59.510
JavaScript has lots of

00:02:59.510 --> 00:03:01.415
different types of loops available.

00:03:01.415 --> 00:03:03.380
For a relatively simple one we can use for

00:03:03.380 --> 00:03:06.305
this case is a loop called for of.

00:03:06.305 --> 00:03:08.735
Let's comment this line out and just below,

00:03:08.735 --> 00:03:11.525
we start this off with the for keyword.

00:03:11.525 --> 00:03:13.310
Then inside of here, we're going to type in

00:03:13.310 --> 00:03:17.880
const item of list item.

00:03:18.470 --> 00:03:21.305
What we're doing here is we're selecting

00:03:21.305 --> 00:03:24.395
our list items which contains multiple elements,

00:03:24.395 --> 00:03:25.460
and then we're going to create

00:03:25.460 --> 00:03:27.110
a new constant called item.

00:03:27.110 --> 00:03:31.000
We can access this item variable on each loop.

00:03:31.000 --> 00:03:33.500
For the first loop, the item variable

00:03:33.500 --> 00:03:34.940
will be our first element.

00:03:34.940 --> 00:03:36.290
For the second loop,

00:03:36.290 --> 00:03:37.610
item would be equivalent to

00:03:37.610 --> 00:03:39.985
our second element, and so on.

00:03:39.985 --> 00:03:42.890
Open up the curly braces and inside of here,

00:03:42.890 --> 00:03:44.720
we can add the code which you want to

00:03:44.720 --> 00:03:47.290
repeat for each one of our elements.

00:03:47.290 --> 00:03:49.880
Using the same example as above,

00:03:49.880 --> 00:03:51.200
rather than adding this to our

00:03:51.200 --> 00:03:53.045
first item just like this,

00:03:53.045 --> 00:03:55.880
instead we can access our item

00:03:55.880 --> 00:04:00.155
variable and then do exactly the same just afterwards.

00:04:00.155 --> 00:04:03.170
Copy this section and paste this in.

00:04:03.170 --> 00:04:05.930
On the first loop, this will add the inline class to

00:04:05.930 --> 00:04:09.775
the first item and then repeat for the second item,

00:04:09.775 --> 00:04:13.240
this and over to the console.

00:04:13.560 --> 00:04:16.030
This item is not defined

00:04:16.030 --> 00:04:18.190
and this just needs to be a list items.

00:04:18.190 --> 00:04:20.695
This should make the errors go away.

00:04:20.695 --> 00:04:23.290
Now once again, we can access our list items.

00:04:23.290 --> 00:04:25.210
We can see that both of these elements

00:04:25.210 --> 00:04:27.765
now have the class of inline.

00:04:27.765 --> 00:04:31.705
We've not saved a lot of code for only having two items,

00:04:31.705 --> 00:04:33.310
but you can see how useful this would

00:04:33.310 --> 00:04:34.960
be if we had maybe five,

00:04:34.960 --> 00:04:38.755
or 10, or even more elements to apply this to.

00:04:38.755 --> 00:04:40.900
An alternative type of loop,

00:04:40.900 --> 00:04:43.600
instead of using this general for of loop

00:04:43.600 --> 00:04:47.165
is to access one of JavaScript's built-in methods.

00:04:47.165 --> 00:04:49.740
Remember earlier on when we mentioned that

00:04:49.740 --> 00:04:53.335
query selector all returns back a node list.

00:04:53.335 --> 00:04:55.205
With this node list, we also have

00:04:55.205 --> 00:04:57.185
access to some methods.

00:04:57.185 --> 00:04:59.180
We can see these if we go down to

00:04:59.180 --> 00:05:01.310
the prototype and open this up,

00:05:01.310 --> 00:05:04.940
we have access to various other methods such as for each.

00:05:04.940 --> 00:05:06.320
This is going to be the loop

00:05:06.320 --> 00:05:08.030
which we're now going to look at.

00:05:08.030 --> 00:05:11.665
You do this, let's comment out our for of loop.

00:05:11.665 --> 00:05:15.350
Just below we can access our list items.

00:05:15.350 --> 00:05:19.160
The built-in method which we just mentioned was for each.

00:05:19.160 --> 00:05:21.980
Inside of here, we then pass in a function

00:05:21.980 --> 00:05:25.175
which you want to run for each one of our values.

00:05:25.175 --> 00:05:27.050
Each one of our values will be stored

00:05:27.050 --> 00:05:29.180
inside of a variable called item.

00:05:29.180 --> 00:05:31.900
Then open up the curly braces,

00:05:31.900 --> 00:05:34.730
we'll do exactly the same as above.

00:05:34.730 --> 00:05:38.615
Rub our item and then add this class name, save this,

00:05:38.615 --> 00:05:40.310
and refresh the browser,

00:05:40.310 --> 00:05:42.065
access the list items.

00:05:42.065 --> 00:05:43.940
Our class name of inline is still being

00:05:43.940 --> 00:05:46.675
applied to both of these elements.

00:05:46.675 --> 00:05:48.710
This is how we can modify,

00:05:48.710 --> 00:05:51.755
but what about creating new elements such as

00:05:51.755 --> 00:05:55.220
a full list item? Well, let's give this a go.

00:05:55.220 --> 00:05:58.430
First is, before we do this, to avoid confusion,

00:05:58.430 --> 00:06:02.950
if we scroll back up to our list items in head section,

00:06:02.950 --> 00:06:05.805
comment out both of these elements.

00:06:05.805 --> 00:06:09.695
Then we can go ahead and recreate these using JavaScript.

00:06:09.695 --> 00:06:14.490
Back down to the bottom, comment out this example.

00:06:14.490 --> 00:06:15.740
Then just below this,

00:06:15.740 --> 00:06:19.160
we can start with a regular list item as usual.

00:06:19.160 --> 00:06:22.325
To do this, access the document.

00:06:22.325 --> 00:06:24.350
Then we create our list item

00:06:24.350 --> 00:06:26.850
with the create element method.

00:06:27.230 --> 00:06:30.400
Passing in the string of LI.

00:06:30.400 --> 00:06:32.540
Since we need to also modify this,

00:06:32.540 --> 00:06:34.280
we can then store this inside of

00:06:34.280 --> 00:06:37.410
a constant called list elements.

00:06:38.780 --> 00:06:41.300
Then we need to create our text node

00:06:41.300 --> 00:06:42.950
for our first element.

00:06:42.950 --> 00:06:44.480
Again, store this inside of a

00:06:44.480 --> 00:06:47.635
constant and we'll say list text.

00:06:47.635 --> 00:06:50.670
This equal to the documents,

00:06:50.670 --> 00:06:54.600
then we use the method called create text node.

00:06:55.090 --> 00:06:59.940
The text for our first list item was our burgers.

00:07:00.230 --> 00:07:03.480
Then we can merge these by first accessing the parents,

00:07:03.480 --> 00:07:05.710
which is list elements.

00:07:05.900 --> 00:07:10.650
Then we can add our text using the upended child method.

00:07:11.540 --> 00:07:14.060
As we already see, we also need to add

00:07:14.060 --> 00:07:16.775
a class to each one of these list items.

00:07:16.775 --> 00:07:19.385
Grab the list elements.

00:07:19.385 --> 00:07:27.750
Then classList.add and the name of nav-item.

00:07:27.750 --> 00:07:30.465
This is the full first list item created.

00:07:30.465 --> 00:07:31.910
Now all we need to do is to add

00:07:31.910 --> 00:07:34.115
this to the unordered list.

00:07:34.115 --> 00:07:38.040
Let's grab this with documents.querySelector.

00:07:39.400 --> 00:07:42.520
Need to select the unordered list.

00:07:42.520 --> 00:07:47.340
Then use appendChild to then add our list element.

00:07:48.710 --> 00:07:51.770
Now give this a save and refresh the browser,

00:07:51.770 --> 00:07:55.930
and reinstated is our very first link of our burgers.

00:07:55.930 --> 00:07:59.060
As you would expect, we do need to replicate all of

00:07:59.060 --> 00:08:02.360
these lines of code for each one of our list items.

00:08:02.360 --> 00:08:03.920
We only have two links,

00:08:03.920 --> 00:08:06.200
but this still repeats a lot of code.

00:08:06.200 --> 00:08:07.895
We're going to take advantage

00:08:07.895 --> 00:08:10.330
of a loop to help us with this.

00:08:10.330 --> 00:08:13.880
But first, we actually need something to loop over.

00:08:13.880 --> 00:08:17.765
For this, let's create a constant called links.

00:08:17.765 --> 00:08:19.910
Links is going to be an array containing

00:08:19.910 --> 00:08:23.230
the text values of each one of our list items.

00:08:23.230 --> 00:08:27.060
The first one is going to be our burgers,

00:08:28.850 --> 00:08:30.960
separated by a comma.

00:08:30.960 --> 00:08:34.185
The second link was for history.

00:08:34.185 --> 00:08:36.230
Let's use the for of loop to

00:08:36.230 --> 00:08:38.195
loop over all of these links.

00:08:38.195 --> 00:08:41.510
We'll say const link of

00:08:41.510 --> 00:08:45.320
links and includes all

00:08:45.320 --> 00:08:47.195
of these five lines of codes below.

00:08:47.195 --> 00:08:50.600
Move these up inside of our for of loop.

00:08:50.830 --> 00:08:54.050
If we initially save this and go over to the browser,

00:08:54.050 --> 00:08:56.090
this same code will be repeated

00:08:56.090 --> 00:08:58.835
for each one of the values in the array.

00:08:58.835 --> 00:09:01.850
We also need to change the text content

00:09:01.850 --> 00:09:03.365
of the second link.

00:09:03.365 --> 00:09:05.450
The way to do this is rather than having

00:09:05.450 --> 00:09:08.150
a hard-coded text inside of the text node,

00:09:08.150 --> 00:09:09.800
what we're going to do is to remove

00:09:09.800 --> 00:09:12.965
this and replace this with the value of link.

00:09:12.965 --> 00:09:14.540
Value of link is going to be

00:09:14.540 --> 00:09:16.060
our burgers on the first loop,

00:09:16.060 --> 00:09:19.625
and then the text of history on the second loop.

00:09:19.625 --> 00:09:23.910
Replace this, over to the browser and refresh.

00:09:23.910 --> 00:09:26.810
There's our two links now in place.

00:09:26.810 --> 00:09:29.440
Just like before, when we only have two links,

00:09:29.440 --> 00:09:31.750
we have not saved a huge amount of code.

00:09:31.750 --> 00:09:33.940
But the benefits would get a lot bigger if we had

00:09:33.940 --> 00:09:36.535
more than two list items to create.

00:09:36.535 --> 00:09:38.800
Alternatively, arrays also have

00:09:38.800 --> 00:09:40.885
access for each for each method.

00:09:40.885 --> 00:09:43.250
We could also use this too if we wanted.

00:09:43.250 --> 00:09:47.400
All we need to do is to remove this section just here,

00:09:47.400 --> 00:09:50.880
grab our array which is stored in the links variable.

00:09:50.880 --> 00:09:53.820
Then we can make use of each method.

00:09:53.820 --> 00:09:57.250
Remember for each we'll run a function for each value in

00:09:57.250 --> 00:10:00.955
the array and then store this value inside of a variable.

00:10:00.955 --> 00:10:04.390
Remember the curly braces goes inside of here.

00:10:04.390 --> 00:10:07.105
We need to modify our existing code,

00:10:07.105 --> 00:10:10.165
move these two curly braces from the outside.

00:10:10.165 --> 00:10:12.575
Grab these five lines of code.

00:10:12.575 --> 00:10:15.815
Move these up inside of our loop.

00:10:15.815 --> 00:10:19.310
Refresh, it will get exactly the same result.

00:10:19.310 --> 00:10:21.380
The loops are a great way to perform

00:10:21.380 --> 00:10:23.450
repetitive tasks in programming.

00:10:23.450 --> 00:10:25.340
We'll also look at some more types of

00:10:25.340 --> 00:10:28.200
loops later on in the course.
