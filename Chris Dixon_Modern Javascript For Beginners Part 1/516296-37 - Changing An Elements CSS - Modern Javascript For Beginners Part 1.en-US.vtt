WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.600 --> 00:00:05.100
We've covered how to change an element

00:00:05.100 --> 00:00:07.215
content such as the inner text,

00:00:07.215 --> 00:00:10.770
and also how to add, modify, and remove attributes.

00:00:10.770 --> 00:00:12.990
Something else we can also do is to modify

00:00:12.990 --> 00:00:16.125
the style of any one of these elements.

00:00:16.125 --> 00:00:18.180
In the starter project which is

00:00:18.180 --> 00:00:20.550
Changing An Elements CSS,

00:00:20.550 --> 00:00:22.650
we're going to open this up inside the browser and

00:00:22.650 --> 00:00:24.720
then jump into the console.

00:00:24.720 --> 00:00:27.495
A starter is the same simple example

00:00:27.495 --> 00:00:29.145
that we looked at in the last video.

00:00:29.145 --> 00:00:30.600
We have the heading and also

00:00:30.600 --> 00:00:33.585
the image with certainly text contents of the header,

00:00:33.585 --> 00:00:37.350
the green class, and also certainly image dynamically.

00:00:37.350 --> 00:00:39.840
To work with the styles, we can also access

00:00:39.840 --> 00:00:42.635
our elements which is this el variable.

00:00:42.635 --> 00:00:47.245
In Console, we can access el.style.

00:00:47.245 --> 00:00:49.430
You use this style property to read

00:00:49.430 --> 00:00:51.875
values as it gets a little bit confusing.

00:00:51.875 --> 00:00:53.900
We know we have this green color

00:00:53.900 --> 00:00:56.300
applied from here by adding the class,

00:00:56.300 --> 00:00:59.500
and this green class is certainly text color.

00:00:59.500 --> 00:01:03.680
We may expect this back if we select the color property,

00:01:03.680 --> 00:01:07.705
hit "Enter", and instead we get back an empty string.

00:01:07.705 --> 00:01:09.740
The reason why is because if we

00:01:09.740 --> 00:01:11.975
select the color property just like this,

00:01:11.975 --> 00:01:14.300
it only returns back any styles which

00:01:14.300 --> 00:01:17.060
we add inline in our HTML.

00:01:17.060 --> 00:01:20.570
If I hit "inline", I mean if we go to our elements,

00:01:20.570 --> 00:01:23.540
I'm going to set the inline styles just like this.

00:01:23.540 --> 00:01:27.445
For example, we can set the color to be red.

00:01:27.445 --> 00:01:30.285
Now, if we refresh this,

00:01:30.285 --> 00:01:32.445
we'll do the same by setting the color.

00:01:32.445 --> 00:01:35.235
This one returns back our red value.

00:01:35.235 --> 00:01:37.850
This will only read inline styles and will

00:01:37.850 --> 00:01:40.550
ignore any other sources such as any of

00:01:40.550 --> 00:01:42.830
the styles which are placed in the head section

00:01:42.830 --> 00:01:46.360
or any which are placed in an external style sheet too.

00:01:46.360 --> 00:01:49.745
If you did want to know the actual value from anywhere,

00:01:49.745 --> 00:01:51.200
there is a method available on

00:01:51.200 --> 00:01:55.420
the global window object called getComputedStyle.

00:01:55.420 --> 00:01:58.455
First we'll select the window object

00:01:58.455 --> 00:02:01.060
and then getComputedStyle.

00:02:01.060 --> 00:02:03.290
We want to know the style of a particular elements,

00:02:03.290 --> 00:02:06.470
so we can pass this variable in if we hit "Enter".

00:02:06.470 --> 00:02:09.020
This will give us back a returned object with all

00:02:09.020 --> 00:02:12.020
of the available styles which apply to these elements,

00:02:12.020 --> 00:02:14.510
or if we wanted to we could just get back

00:02:14.510 --> 00:02:17.545
a single value such as the color.

00:02:17.545 --> 00:02:20.780
This is not something which I personally use a lot,

00:02:20.780 --> 00:02:23.065
but it is available if needed.

00:02:23.065 --> 00:02:25.100
Back to our style property which we used

00:02:25.100 --> 00:02:27.335
before which is this one just here,

00:02:27.335 --> 00:02:30.560
we can also use this to set any styles too.

00:02:30.560 --> 00:02:32.360
As an example we'll convert

00:02:32.360 --> 00:02:33.590
some of the styles which you already

00:02:33.590 --> 00:02:37.210
have in the head section down inside of the script.

00:02:37.210 --> 00:02:39.750
Just below setAttribute select

00:02:39.750 --> 00:02:42.505
the element el.style property,

00:02:42.505 --> 00:02:45.820
and we can set the color to be equal to a new value.

00:02:45.820 --> 00:02:48.490
This will be a string, and I'm going

00:02:48.490 --> 00:02:51.575
to place in an RGB value of 40,

00:02:51.575 --> 00:02:55.785
141, 40. Close this off.

00:02:55.785 --> 00:02:57.600
We don't have any conflicts,

00:02:57.600 --> 00:03:02.340
we'll also comment out this green class, refresh.

00:03:02.340 --> 00:03:05.650
This changes to be a green color and just to confirm,

00:03:05.650 --> 00:03:08.395
we can see here we don't have the green class applied.

00:03:08.395 --> 00:03:11.110
We can also comment this out just to make sure that

00:03:11.110 --> 00:03:12.280
this is coming from the style

00:03:12.280 --> 00:03:14.630
property which we just added.

00:03:15.680 --> 00:03:17.760
Let's go a little bit further on.

00:03:17.760 --> 00:03:20.170
If we go back to our styles at the very top,

00:03:20.170 --> 00:03:21.580
we have this header section with

00:03:21.580 --> 00:03:24.055
four different CSS properties.

00:03:24.055 --> 00:03:25.750
We set in the display type and

00:03:25.750 --> 00:03:28.940
also some flex properties alongside the pattern.

00:03:28.940 --> 00:03:30.970
We can also comment this section out

00:03:30.970 --> 00:03:33.339
and replace this with JavaScript.

00:03:33.339 --> 00:03:36.100
To do this, we first need to store a reference to

00:03:36.100 --> 00:03:37.690
our header elements just like we

00:03:37.690 --> 00:03:40.030
did with this section just here.

00:03:40.030 --> 00:03:41.980
Let's add this down at the bottom

00:03:41.980 --> 00:03:45.275
and store this inside of a constant called header,

00:03:45.275 --> 00:03:48.075
and we can select this in any way which we want.

00:03:48.075 --> 00:03:50.700
I'm going to use the querySelector

00:03:50.700 --> 00:03:53.700
as any element name of header,

00:03:53.700 --> 00:03:55.990
and then the first property which we need to

00:03:55.990 --> 00:03:58.900
select is the display type of flex.

00:03:58.900 --> 00:04:01.000
We just basically replace in all of

00:04:01.000 --> 00:04:02.410
these four values by

00:04:02.410 --> 00:04:04.865
using the star property at the bottom.

00:04:04.865 --> 00:04:08.790
Access the header, the style.

00:04:08.790 --> 00:04:11.660
Set the display type to be equal to a string of

00:04:11.660 --> 00:04:15.765
flex. Refresh the browser.

00:04:15.765 --> 00:04:18.150
We can see the flex box has taken effect

00:04:18.150 --> 00:04:20.560
but we still have some alignment issues,

00:04:20.560 --> 00:04:22.160
and this can be fixed by adding

00:04:22.160 --> 00:04:24.695
the rest of the CSS properties.

00:04:24.695 --> 00:04:27.325
The second one is header.style,

00:04:27.325 --> 00:04:30.530
and this time we need to set justify-content.

00:04:30.530 --> 00:04:33.020
If we take a look at how we did this in

00:04:33.020 --> 00:04:35.530
our CSS we use the lowercase,

00:04:35.530 --> 00:04:37.870
and this was separated by a comma.

00:04:37.870 --> 00:04:40.080
However though one of the big Gotchas with

00:04:40.080 --> 00:04:42.135
JavaScript when setting the CSS,

00:04:42.135 --> 00:04:45.450
is we also need to convert this to be camelCase.

00:04:45.450 --> 00:04:49.025
We can't use justify-content.

00:04:49.025 --> 00:04:50.540
We see straight away that

00:04:50.540 --> 00:04:53.135
the text editor has highlighted an issue,

00:04:53.135 --> 00:04:55.880
and we need to convert this to be camelCase.

00:04:55.880 --> 00:04:58.745
This means content begins with a C,

00:04:58.745 --> 00:05:00.470
and then we can set this to our string

00:05:00.470 --> 00:05:02.820
which is space-between.

00:05:03.470 --> 00:05:07.980
Next path; align-items which just like justify-content,

00:05:07.980 --> 00:05:11.040
also needs to be converted to be camelCase.

00:05:11.040 --> 00:05:13.800
This was also set to be center,

00:05:13.800 --> 00:05:19.845
so set this up and the value for this is center.

00:05:19.845 --> 00:05:27.090
Finally, you have the padding. The padding value

00:05:27.090 --> 00:05:31.590
if we take a look this was zero and some pixels.

00:05:31.590 --> 00:05:34.665
Pass this in as a string

00:05:34.665 --> 00:05:37.230
and check this out in the browser.

00:05:37.230 --> 00:05:39.110
Refresh. We can see our padding around

00:05:39.110 --> 00:05:40.850
the outside of the text,

00:05:40.850 --> 00:05:42.440
and also the alignment has been

00:05:42.440 --> 00:05:44.575
fixed with these flex properties.

00:05:44.575 --> 00:05:48.410
This way of setting the CSS has lots of good use cases.

00:05:48.410 --> 00:05:50.900
As mentioned in the last video it can be useful for

00:05:50.900 --> 00:05:53.815
showing and hiding content for change in layout,

00:05:53.815 --> 00:05:56.280
and for also changing the theme of our website.

00:05:56.280 --> 00:05:57.890
For example, we may have

00:05:57.890 --> 00:06:00.140
a bottom which add some CSS properties,

00:06:00.140 --> 00:06:02.720
a switch between light and dark mode.

00:06:02.720 --> 00:06:04.860
We could add CSS animations.

00:06:04.860 --> 00:06:06.255
If the user clicks on some of them,

00:06:06.255 --> 00:06:08.195
we could toggle different color schemes

00:06:08.195 --> 00:06:10.565
and so many more possibilities.

00:06:10.565 --> 00:06:12.795
It's also worth knowing that adding styles

00:06:12.795 --> 00:06:14.750
like this with JavaScript carries

00:06:14.750 --> 00:06:19.450
the same priority in the cascade as an inline style does.

00:06:19.450 --> 00:06:21.245
This technique will override

00:06:21.245 --> 00:06:24.020
any existing external style sheets and

00:06:24.020 --> 00:06:27.500
also any styles which you have up in the Head section.

00:06:27.500 --> 00:06:30.985
To see this we can uncomment out the green section.

00:06:30.985 --> 00:06:33.380
We can then reapply this with

00:06:33.380 --> 00:06:37.505
our JavaScript by removing the setAttribute comment.

00:06:37.505 --> 00:06:40.145
Also if we change the color to be red;

00:06:40.145 --> 00:06:42.395
so I'll have in the RGB color,

00:06:42.395 --> 00:06:44.440
place in the red value.

00:06:44.440 --> 00:06:47.660
Now what we'll have is a class of green being

00:06:47.660 --> 00:06:50.500
applied using setAttributes which is in fact red,

00:06:50.500 --> 00:06:52.300
and then we set this green color just

00:06:52.300 --> 00:06:55.020
below. Save and refresh.

00:06:55.020 --> 00:06:57.750
We still see the green text over the top,

00:06:57.750 --> 00:07:00.200
and this happens because this has been created using

00:07:00.200 --> 00:07:02.285
a JavaScript style property which

00:07:02.285 --> 00:07:04.805
carries a high weight in adding a class.

00:07:04.805 --> 00:07:06.710
We can also confirm this if we move

00:07:06.710 --> 00:07:09.500
the star property to be just with this class setting.

00:07:09.500 --> 00:07:11.930
Make sure that it's nothing to do with the order.

00:07:11.930 --> 00:07:13.655
Save and refresh, and we can still

00:07:13.655 --> 00:07:16.090
see this green color has applied.

00:07:16.090 --> 00:07:18.185
If you're wondering how to add multiple

00:07:18.185 --> 00:07:19.985
CSS properties at once,

00:07:19.985 --> 00:07:22.625
we can also set this using an object.

00:07:22.625 --> 00:07:26.110
We'll look at this in more detail in the Object section,

00:07:26.110 --> 00:07:29.090
but for now this is how we can retrieve and also

00:07:29.090 --> 00:07:32.045
set CSS style in using JavaScript.

00:07:32.045 --> 00:07:33.980
We set our style properties just

00:07:33.980 --> 00:07:36.155
like we would do in a regular style sheet,

00:07:36.155 --> 00:07:40.070
but remember when a property is multiple words such as

00:07:40.070 --> 00:07:42.380
background color and justify-content

00:07:42.380 --> 00:07:45.810
we also need to convert this to be camelCase.
