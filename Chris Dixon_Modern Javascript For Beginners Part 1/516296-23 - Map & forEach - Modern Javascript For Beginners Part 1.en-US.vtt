WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.540 --> 00:00:05.790
I want to now show you two more array Methods.

00:00:05.790 --> 00:00:07.335
As you can see by the title,

00:00:07.335 --> 00:00:09.855
this is Map and forEach.

00:00:09.855 --> 00:00:11.535
These two methods are also

00:00:11.535 --> 00:00:14.085
iteration methods like we've looked at previously.

00:00:14.085 --> 00:00:16.530
They will loop over each array item

00:00:16.530 --> 00:00:18.960
and then it run a callback function.

00:00:18.960 --> 00:00:22.080
Lots of the array methods which we have code so far,

00:00:22.080 --> 00:00:23.565
and much more specific,

00:00:23.565 --> 00:00:25.650
such as sorting an array,

00:00:25.650 --> 00:00:28.920
we can do filtering, we can check if one value exists,

00:00:28.920 --> 00:00:30.150
but these two methods,

00:00:30.150 --> 00:00:33.045
which are MAP& ForEach, are much more general.

00:00:33.045 --> 00:00:36.470
The use for their purpose is only limited to the code,

00:00:36.470 --> 00:00:39.025
which we write inside of the function.

00:00:39.025 --> 00:00:41.985
Open up the Map and ForEach file.

00:00:41.985 --> 00:00:44.735
Then inside of this script will have two arrays.

00:00:44.735 --> 00:00:46.700
We'll have a simple numbers array

00:00:46.700 --> 00:00:48.890
and will have an array of blog posts,

00:00:48.890 --> 00:00:51.515
which we'll take a look at in just a moment.

00:00:51.515 --> 00:00:53.630
But now we're going to start by accessing

00:00:53.630 --> 00:00:56.120
the numbers and then as always,

00:00:56.120 --> 00:01:00.685
we call the method with dot or by the name of ForEach.

00:01:00.685 --> 00:01:03.350
We could write a function that just like we've

00:01:03.350 --> 00:01:06.095
looked at previously inside of here.

00:01:06.095 --> 00:01:09.305
Using the more traditional function syntax

00:01:09.305 --> 00:01:11.210
or also for the practice,

00:01:11.210 --> 00:01:14.935
I'm going to convert this into an arrow function.

00:01:14.935 --> 00:01:17.570
An arrow function, which we've looked at previously,

00:01:17.570 --> 00:01:20.075
begins with the brackets just like this.

00:01:20.075 --> 00:01:21.590
We then write an arrow with

00:01:21.590 --> 00:01:24.095
the equals and the greater than symbol.

00:01:24.095 --> 00:01:26.630
Then we have a couple of different options.

00:01:26.630 --> 00:01:28.730
If we wanted to, we could add

00:01:28.730 --> 00:01:31.955
multiple lines of code inside of the curly braces.

00:01:31.955 --> 00:01:34.220
We could write our code inside,

00:01:34.220 --> 00:01:35.900
and then we could use the return keyword

00:01:35.900 --> 00:01:37.085
to return a value

00:01:37.085 --> 00:01:40.400
back from this function or alternatively,

00:01:40.400 --> 00:01:41.825
like we've looked at previously,

00:01:41.825 --> 00:01:44.735
we could emit the return keyword

00:01:44.735 --> 00:01:47.395
and place this onto a single line.

00:01:47.395 --> 00:01:49.580
If we place in this onto a single line,

00:01:49.580 --> 00:01:51.785
we can also remove these curly braces,

00:01:51.785 --> 00:01:54.350
and this will directly return the code.

00:01:54.350 --> 00:01:56.820
Let's do a console log,

00:01:57.380 --> 00:01:59.685
as the return value.

00:01:59.685 --> 00:02:01.465
Remember that since we're looping over

00:02:01.465 --> 00:02:03.265
each value in the numbers array,

00:02:03.265 --> 00:02:06.725
this is also going to take in the number as a parameter.

00:02:06.725 --> 00:02:08.830
Now, we'll have the freedom to do anything we

00:02:08.830 --> 00:02:10.570
want with this parameter,

00:02:10.570 --> 00:02:12.450
such as a simple console log.

00:02:12.450 --> 00:02:16.160
We can now put the number, multiply by two.

00:02:16.160 --> 00:02:18.810
Check this out over in the console refresh so we

00:02:18.810 --> 00:02:21.120
see 144, 66.

00:02:21.120 --> 00:02:24.755
This is just all of these numbers multiplied by two.

00:02:24.755 --> 00:02:27.730
The index number is also available too,

00:02:27.730 --> 00:02:30.745
if we want to insert this as a parameter.

00:02:30.745 --> 00:02:34.720
Remember a comma and the index,

00:02:34.720 --> 00:02:37.540
then we can use this index in any place we want to

00:02:37.540 --> 00:02:40.395
in our function. Let's remove this.

00:02:40.395 --> 00:02:43.479
I want to add in the template string with the backticks,

00:02:43.479 --> 00:02:44.730
so we can insert a variable.

00:02:44.730 --> 00:02:47.590
We'll have the text of number available,

00:02:47.590 --> 00:02:48.655
which is a $ symbol,

00:02:48.655 --> 00:02:50.290
and the curly braces,

00:02:50.290 --> 00:02:53.610
pass in the index, then a colon,

00:02:53.610 --> 00:02:54.865
so what we're going to say here is

00:02:54.865 --> 00:02:56.875
number one and then a colon.

00:02:56.875 --> 00:02:59.470
Then also insert our number.

00:02:59.470 --> 00:03:01.000
If we want to, we can do something

00:03:01.000 --> 00:03:02.725
similar to the previous attempts,

00:03:02.725 --> 00:03:05.090
which is multiplied by two.

00:03:05.090 --> 00:03:08.710
Let's save this and over to the browser. There we go.

00:03:08.710 --> 00:03:10.705
We can access the number zero, number one,

00:03:10.705 --> 00:03:14.440
number two, and see each one of the individual values.

00:03:14.440 --> 00:03:17.485
Again, if we wanted to, we can also manipulate this.

00:03:17.485 --> 00:03:20.320
If we want this to begin at index number one,

00:03:20.320 --> 00:03:22.060
we could add the value of one.

00:03:22.060 --> 00:03:25.060
Then this time, rather than beginning at number zero,

00:03:25.060 --> 00:03:27.125
this will begin at number one.

00:03:27.125 --> 00:03:30.230
As mentioned before, we can write any code inside of

00:03:30.230 --> 00:03:34.145
this function and taking our post array from above.

00:03:34.145 --> 00:03:37.490
Let's take a look at an example with an array of objects.

00:03:37.490 --> 00:03:38.840
What we're going to do this time

00:03:38.840 --> 00:03:39.980
is to loop through all of

00:03:39.980 --> 00:03:41.540
our posts and then run

00:03:41.540 --> 00:03:43.895
a function for each one of these objects.

00:03:43.895 --> 00:03:46.400
We'll select the blog post title and

00:03:46.400 --> 00:03:49.615
then it transform the text to be uppercase.

00:03:49.615 --> 00:03:52.265
For practice, we'll start again,

00:03:52.265 --> 00:03:54.460
will access our posts,

00:03:54.460 --> 00:03:57.890
call for each, open up the brackets and then we

00:03:57.890 --> 00:04:01.370
can insert a function with any syntax which you want to.

00:04:01.370 --> 00:04:04.025
This video, I'll stick with the arrow function,

00:04:04.025 --> 00:04:05.675
which is just like this.

00:04:05.675 --> 00:04:08.560
Then again insert a console log.

00:04:08.560 --> 00:04:11.600
This time we're looping through all of the posts.

00:04:11.600 --> 00:04:14.980
This function will take in a parameter for each post.

00:04:14.980 --> 00:04:16.820
Also, if you remember, if we just have

00:04:16.820 --> 00:04:19.265
a single parameter just like this,

00:04:19.265 --> 00:04:22.415
we can also remove the surrounding brackets,

00:04:22.415 --> 00:04:24.520
make this a little bit shorter.

00:04:24.520 --> 00:04:27.290
Sometimes though, if you do save just like this,

00:04:27.290 --> 00:04:30.230
the text editor will reinsert these back-in,

00:04:30.230 --> 00:04:31.820
but that's completely fine.

00:04:31.820 --> 00:04:33.815
What we're going to do now is access

00:04:33.815 --> 00:04:36.725
these individual posts inside of our console log.

00:04:36.725 --> 00:04:38.630
Then since this is an object,

00:04:38.630 --> 00:04:40.445
we need to access one of the keys,

00:04:40.445 --> 00:04:43.105
such as the title or the body.

00:04:43.105 --> 00:04:45.420
I'm going to go for title.

00:04:45.420 --> 00:04:47.135
Then I'm also going to insert

00:04:47.135 --> 00:04:50.400
a method called toUppercase.

00:04:50.800 --> 00:04:53.375
So far in this section, we've been using

00:04:53.375 --> 00:04:55.765
lots of methods which we'll call on an array,

00:04:55.765 --> 00:04:58.810
but toUppercase is also a method too.

00:04:58.810 --> 00:05:02.065
But this one is used on a string of text.

00:05:02.065 --> 00:05:06.035
Let's try this out. Over to the browser and refresh.

00:05:06.035 --> 00:05:08.090
There's our three titles so

00:05:08.090 --> 00:05:09.980
we call the function three times

00:05:09.980 --> 00:05:11.300
and for each one we select

00:05:11.300 --> 00:05:14.920
the title and transform the text to be uppercase.

00:05:14.920 --> 00:05:16.980
This is the ForEach method,

00:05:16.980 --> 00:05:18.555
but what about Map?

00:05:18.555 --> 00:05:20.510
Let's go over to our editor and all we

00:05:20.510 --> 00:05:22.175
need to do is change ForEach,

00:05:22.175 --> 00:05:24.680
we Map, save and refresh,

00:05:24.680 --> 00:05:28.600
and we get back the exact same values inside the console.

00:05:28.600 --> 00:05:31.680
Between Map and ForEach, they look very similar.

00:05:31.680 --> 00:05:34.020
What exactly is the difference?

00:05:34.020 --> 00:05:36.335
There's a couple of reasons why they are different

00:05:36.335 --> 00:05:39.040
and one is the return value.

00:05:39.040 --> 00:05:40.520
To see this, we need to store

00:05:40.520 --> 00:05:44.945
this returned value inside of a constant or a variable.

00:05:44.945 --> 00:05:46.610
We'll say new posts

00:05:46.610 --> 00:05:50.930
and set this equal to our return value,

00:05:50.930 --> 00:05:54.000
changes back to be ForEach.

00:05:54.020 --> 00:05:56.690
Then instead of the console log will just

00:05:56.690 --> 00:06:00.275
return the value of this transformation.

00:06:00.275 --> 00:06:02.330
Remember we may have a single line

00:06:02.330 --> 00:06:03.740
with an arrow function like this.

00:06:03.740 --> 00:06:07.210
This will automatically return this value back for us.

00:06:07.210 --> 00:06:10.010
To see this place in a console log

00:06:10.010 --> 00:06:11.570
with the return value which is

00:06:11.570 --> 00:06:13.985
stored inside of new posts,

00:06:13.985 --> 00:06:16.700
save over to the developer tools and

00:06:16.700 --> 00:06:19.420
we see this new value of undefined.

00:06:19.420 --> 00:06:21.200
We get back undefined because

00:06:21.200 --> 00:06:23.570
nothing is returned back to us.

00:06:23.570 --> 00:06:25.565
ForEach, we'll run a function for

00:06:25.565 --> 00:06:28.100
each one of these array values and then

00:06:28.100 --> 00:06:30.530
directly modify this original array

00:06:30.530 --> 00:06:32.765
without returning anything back.

00:06:32.765 --> 00:06:36.245
Map, on the other hand, if we change this,

00:06:36.245 --> 00:06:39.185
save and refresh, we now get back

00:06:39.185 --> 00:06:42.775
a new array with free of the transform values.

00:06:42.775 --> 00:06:45.620
This is the key difference between Map and ForEach.

00:06:45.620 --> 00:06:48.605
ForEach, we'll modify the original array.

00:06:48.605 --> 00:06:51.680
When you use Map, this will leave the original array in

00:06:51.680 --> 00:06:53.360
tact and instead return

00:06:53.360 --> 00:06:55.945
a new array with the modified values,

00:06:55.945 --> 00:06:57.705
so this is one key difference.

00:06:57.705 --> 00:06:59.300
Another key difference between

00:06:59.300 --> 00:07:01.610
these two methods is when is a Map,

00:07:01.610 --> 00:07:04.495
we can also chain on multiple methods.

00:07:04.495 --> 00:07:07.040
To see this more clearly, I'm going to place this on

00:07:07.040 --> 00:07:10.745
multiple lines and the Map section onto its own line,

00:07:10.745 --> 00:07:13.100
remove the semicolon, and then

00:07:13.100 --> 00:07:16.090
we can chain onto the end a filter method.

00:07:16.090 --> 00:07:18.440
Keeping with the same style will add

00:07:18.440 --> 00:07:21.370
an arrow function which takes in the new value,

00:07:21.370 --> 00:07:23.840
sets up our arrow and then we can filter

00:07:23.840 --> 00:07:25.910
out any of the blog posts where

00:07:25.910 --> 00:07:28.070
the particular value or title is

00:07:28.070 --> 00:07:30.755
equal to be" How to be a ninja part two. "

00:07:30.755 --> 00:07:32.390
This also needs to be uppercase,

00:07:32.390 --> 00:07:33.590
since we've already transformed

00:07:33.590 --> 00:07:35.590
this with the Map just above.

00:07:35.590 --> 00:07:38.450
Now, as we already know, this title is included,

00:07:38.450 --> 00:07:41.330
so this will filter out our one single post.

00:07:41.330 --> 00:07:42.920
If we go over to the console,

00:07:42.920 --> 00:07:45.400
we can see this if we refresh.

00:07:45.400 --> 00:07:48.140
Now, we'll have a new array return back to us

00:07:48.140 --> 00:07:50.930
with this one single filtered value.

00:07:50.930 --> 00:07:53.150
Alternatively, if we didn't just want

00:07:53.150 --> 00:07:55.340
a new array with this one single value,

00:07:55.340 --> 00:07:58.235
we may want to just check if this title is included

00:07:58.235 --> 00:08:01.490
inside of our posts or we could do this,

00:08:01.490 --> 00:08:04.720
by changing filter with the some method.

00:08:04.720 --> 00:08:07.820
This will return back a true or false value,

00:08:07.820 --> 00:08:11.085
as we already know, its titled is already included.

00:08:11.085 --> 00:08:12.770
Now, if we refresh this,

00:08:12.770 --> 00:08:14.750
we get back the value of true.

00:08:14.750 --> 00:08:17.630
If we change this to be something which is not included,

00:08:17.630 --> 00:08:20.650
this will return the value of false.

00:08:20.650 --> 00:08:22.970
This is really useful for getting back

00:08:22.970 --> 00:08:25.135
the exact data which we need.

00:08:25.135 --> 00:08:27.425
We may also want to grab the index position

00:08:27.425 --> 00:08:28.925
of this array elements.

00:08:28.925 --> 00:08:30.920
We can do this by changing this back to one of

00:08:30.920 --> 00:08:33.095
the recognized titles or part two.

00:08:33.095 --> 00:08:35.120
Then instead of still making changes to be

00:08:35.120 --> 00:08:38.600
find index which we've used previously, save.

00:08:38.600 --> 00:08:43.530
This is going to be index number two and there we go.

00:08:43.760 --> 00:08:46.745
You can see with these examples that although

00:08:46.745 --> 00:08:49.295
all of these methods may look complex to begin,

00:08:49.295 --> 00:08:51.800
many of them are structured exactly the same,

00:08:51.800 --> 00:08:54.250
but just return different values.

00:08:54.250 --> 00:08:56.355
Back to this Map and this ForEach,

00:08:56.355 --> 00:08:58.610
none of this chaining or adding a new method onto

00:08:58.610 --> 00:09:01.625
the end is available when using ForEach.

00:09:01.625 --> 00:09:04.475
We can see this if we change this back over,

00:09:04.475 --> 00:09:08.260
refresh, and now we see an error inside of the console.

00:09:08.260 --> 00:09:10.400
This training is not possible when using

00:09:10.400 --> 00:09:11.930
ForEach because as we've

00:09:11.930 --> 00:09:13.705
seen before in one of our tests,

00:09:13.705 --> 00:09:15.290
before each method will return

00:09:15.290 --> 00:09:18.470
undefined rather than a new value.

00:09:18.470 --> 00:09:22.310
Just for a recap, we use ForEach if we want to modify

00:09:22.310 --> 00:09:25.900
the existing array and do not need a new one returned.

00:09:25.900 --> 00:09:27.650
We use Map if we want to leave

00:09:27.650 --> 00:09:29.630
the original array intact,

00:09:29.630 --> 00:09:31.835
and return a new array with the values.

00:09:31.835 --> 00:09:34.770
It's also good for chain too.
