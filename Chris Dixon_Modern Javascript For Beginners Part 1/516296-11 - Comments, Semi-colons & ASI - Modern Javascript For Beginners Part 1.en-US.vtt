WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:04.230 --> 00:00:07.180
If you've worked in JavaScript before,

00:00:07.180 --> 00:00:09.715
or if you're looking for code examples online,

00:00:09.715 --> 00:00:11.740
you may notice that semicolons are

00:00:11.740 --> 00:00:14.330
sometimes used and sometimes not.

00:00:14.330 --> 00:00:17.890
JavaScript programs are made up of multiple statements,

00:00:17.890 --> 00:00:21.005
which are read from the top to the bottom of the file.

00:00:21.005 --> 00:00:23.760
Statement is basically an instruction,

00:00:23.760 --> 00:00:26.395
such as creating a variable declaration

00:00:26.395 --> 00:00:29.660
of the code to run inside of an if statement.

00:00:29.660 --> 00:00:33.370
Although semicolons in JavaScript programs are required,

00:00:33.370 --> 00:00:35.920
if we choose not to manually write them,

00:00:35.920 --> 00:00:37.555
the JavaScript parser will

00:00:37.555 --> 00:00:39.550
add them in photos automatically,

00:00:39.550 --> 00:00:41.060
where they are required,

00:00:41.060 --> 00:00:44.560
the semicolons are added at the end of each statement,

00:00:44.560 --> 00:00:48.485
and the process is called automatic semicolon insertion.

00:00:48.485 --> 00:00:49.910
This doesn't mean we can simply

00:00:49.910 --> 00:00:52.010
forget about using them altogether.

00:00:52.010 --> 00:00:53.600
There are cases when we still

00:00:53.600 --> 00:00:55.280
need to add them in manually.

00:00:55.280 --> 00:00:57.050
For example, let's add some variables

00:00:57.050 --> 00:00:59.090
and check out the results.

00:00:59.090 --> 00:01:01.010
You'll notice that I'm in

00:01:01.010 --> 00:01:02.915
video number 80, which is comments,

00:01:02.915 --> 00:01:04.910
semicolons, and ASI,

00:01:04.910 --> 00:01:07.535
and also have this open inside the browser.

00:01:07.535 --> 00:01:09.410
Go down to the script section.

00:01:09.410 --> 00:01:12.620
What we're going to do is create two constants.

00:01:12.620 --> 00:01:15.380
The constants doesn't really matter at the moment.

00:01:15.380 --> 00:01:17.365
I'm just going to add a name,

00:01:17.365 --> 00:01:19.664
then a second constant,

00:01:19.664 --> 00:01:22.720
which can be learned in JavaScript.

00:01:23.300 --> 00:01:26.790
This is a Boolean value of true.

00:01:26.790 --> 00:01:28.940
Then inside of the console log we've

00:01:28.940 --> 00:01:31.600
outputted single variables in the past.

00:01:31.600 --> 00:01:34.220
But we can also add a comma

00:01:34.220 --> 00:01:37.550
and output the value of both of these variables.

00:01:37.550 --> 00:01:41.035
Save the file and head over to the console.

00:01:41.035 --> 00:01:45.330
Refresh and we see our two variable values.

00:01:45.330 --> 00:01:47.210
Nothing unexpected here,

00:01:47.210 --> 00:01:49.130
we get probably what we expected,

00:01:49.130 --> 00:01:50.870
which is our two variables.

00:01:50.870 --> 00:01:52.730
We'll log them to the console.

00:01:52.730 --> 00:01:55.100
But what about if we added these variables onto

00:01:55.100 --> 00:01:58.185
the same line? Let's try this.

00:01:58.185 --> 00:02:00.000
Place these on the same line, and make sure

00:02:00.000 --> 00:02:01.820
any semicolons are removed

00:02:01.820 --> 00:02:03.650
from the end of each statements.

00:02:03.650 --> 00:02:06.050
First of all, we can see that the text editor

00:02:06.050 --> 00:02:08.965
has highlighted an issue here as soon as you do this.

00:02:08.965 --> 00:02:12.620
If we were to save this and refresh the browser,

00:02:12.620 --> 00:02:15.620
we see a syntax error inside the console.

00:02:15.620 --> 00:02:18.245
We have an unexpected token of const,

00:02:18.245 --> 00:02:20.210
because the JavaScript parser

00:02:20.210 --> 00:02:22.775
doesn't expect to get to this stage here,

00:02:22.775 --> 00:02:25.820
and then see a new const declaration.

00:02:25.820 --> 00:02:27.530
If you have multiple statements

00:02:27.530 --> 00:02:29.060
on the same line like this,

00:02:29.060 --> 00:02:30.560
we need to declare that these are

00:02:30.560 --> 00:02:32.360
two separate statements,

00:02:32.360 --> 00:02:35.170
by separating these with a semicolon.

00:02:35.170 --> 00:02:37.575
Place the semicolon in-between.

00:02:37.575 --> 00:02:41.090
Now the text editor is not highlighting any issues.

00:02:41.090 --> 00:02:44.655
We can test this out. Save and refresh.

00:02:44.655 --> 00:02:46.685
This is now all working fine.

00:02:46.685 --> 00:02:48.965
You can also see that my text editor has

00:02:48.965 --> 00:02:51.290
automatically placed these on separate lines,

00:02:51.290 --> 00:02:53.800
since these are two separate statements.

00:02:53.800 --> 00:02:55.210
Along with the semicolon,

00:02:55.210 --> 00:02:57.050
some other gotchas are when

00:02:57.050 --> 00:02:58.970
we begin a new line with brackets,

00:02:58.970 --> 00:03:01.805
or often referred to as parentheses.

00:03:01.805 --> 00:03:03.900
Let's take look at an example just

00:03:03.900 --> 00:03:06.750
after these two constants.

00:03:06.750 --> 00:03:09.645
Create a new variable, would let's call score.

00:03:09.645 --> 00:03:14.085
You would say random numbers such as 97.34,

00:03:14.085 --> 00:03:18.045
a constant of damage,

00:03:18.045 --> 00:03:21.195
and again, a random number, 10.42.

00:03:21.195 --> 00:03:24.125
Just as a side note, I've created this as a let.

00:03:24.125 --> 00:03:27.170
Since a score can generally be updated,

00:03:27.170 --> 00:03:28.910
we can output the result of

00:03:28.910 --> 00:03:32.010
the score with the damage taken off.

00:03:33.170 --> 00:03:37.400
Now if we save this and refresh,

00:03:37.400 --> 00:03:39.950
this is the correct value inside the console.

00:03:39.950 --> 00:03:41.690
We know it can perform

00:03:41.690 --> 00:03:44.225
a calculation inside of these brackets,

00:03:44.225 --> 00:03:46.550
as we've just seen inside the console log.

00:03:46.550 --> 00:03:49.250
But what about if we took this console log

00:03:49.250 --> 00:03:52.700
away and did something else with this calculation?

00:03:52.700 --> 00:03:57.080
For example, instead of resulting in 86.92,

00:03:57.080 --> 00:04:01.415
what if instead we wanted to round this to say 86 or 87?

00:04:01.415 --> 00:04:03.350
Well, to do this, JavaScript has

00:04:03.350 --> 00:04:07.705
a inbuilt method which we can use called toPrecision.

00:04:07.705 --> 00:04:10.185
We can change this on the end with the dot,

00:04:10.185 --> 00:04:12.810
lowercase to, and this is camel case,

00:04:12.810 --> 00:04:16.530
so precision starts with a P. To use this within

00:04:16.530 --> 00:04:20.815
parsing the length value two to make it two digits long.

00:04:20.815 --> 00:04:23.630
Now let's see the effect of what would happen if we were

00:04:23.630 --> 00:04:26.255
to forget to put in any semicolons.

00:04:26.255 --> 00:04:27.980
Now Visual Studio Code will

00:04:27.980 --> 00:04:30.845
automatically insert these in follows when needed.

00:04:30.845 --> 00:04:32.450
But if we were to leave these out just

00:04:32.450 --> 00:04:34.190
like this and hit "Save",

00:04:34.190 --> 00:04:35.930
would instantly see what would happen when

00:04:35.930 --> 00:04:38.860
the JavaScript engine read through this code.

00:04:38.860 --> 00:04:41.540
We can see that this line has been

00:04:41.540 --> 00:04:44.795
inserted directly after the statement just here,

00:04:44.795 --> 00:04:48.350
because we don't have any semicolons to separate.

00:04:48.350 --> 00:04:50.985
Let's save this and refresh.

00:04:50.985 --> 00:04:53.030
We see an error, we cannot access

00:04:53.030 --> 00:04:55.700
damage before initialization,

00:04:55.700 --> 00:04:58.360
and this is because this line just

00:04:58.360 --> 00:05:01.310
here begins with these brackets.

00:05:01.310 --> 00:05:03.130
Now this may not mean much

00:05:03.130 --> 00:05:05.065
if you are completely new to JavaScript.

00:05:05.065 --> 00:05:06.340
But if you've done a little bit of

00:05:06.340 --> 00:05:07.645
JavaScript in the past,

00:05:07.645 --> 00:05:09.070
this is actually how we

00:05:09.070 --> 00:05:11.570
declare a certain type of function.

00:05:11.570 --> 00:05:13.900
Rather than interpreting this section of

00:05:13.900 --> 00:05:16.855
code and this section of code as two lines,

00:05:16.855 --> 00:05:18.910
it's actually reading from left to right and

00:05:18.910 --> 00:05:22.130
continuing this through as one full line of code.

00:05:22.130 --> 00:05:24.670
To fix this, as you may expect,

00:05:24.670 --> 00:05:27.055
we need to separate these with a semicolon.

00:05:27.055 --> 00:05:28.660
Then if we refresh,

00:05:28.660 --> 00:05:30.745
this will then now get rid of the error,

00:05:30.745 --> 00:05:33.065
and everything is clear in the console.

00:05:33.065 --> 00:05:35.440
We can also directly see the results of

00:05:35.440 --> 00:05:38.935
this calculation by cutting out this line of code.

00:05:38.935 --> 00:05:43.520
Create a console log and paste this back inside.

00:05:43.520 --> 00:05:46.855
Save this and refresh the browser and our value

00:05:46.855 --> 00:05:50.215
has now been rounded to two decimal places.

00:05:50.215 --> 00:05:51.370
There is also of

00:05:51.370 --> 00:05:53.050
a math functions which we'll look at later,

00:05:53.050 --> 00:05:54.145
which can round these values

00:05:54.145 --> 00:05:56.945
up and also round them down too.

00:05:56.945 --> 00:05:58.605
Just to recap, using

00:05:58.605 --> 00:06:01.120
semicolons in JavaScript is optional.

00:06:01.120 --> 00:06:03.650
It's completely down to you if you want to use them,

00:06:03.650 --> 00:06:06.865
or rely on them to be inserted automatically.

00:06:06.865 --> 00:06:09.040
But do be aware there are some cases

00:06:09.040 --> 00:06:10.930
when we start a new line of code with

00:06:10.930 --> 00:06:12.745
the brackets where we need to

00:06:12.745 --> 00:06:14.830
make sure we insert these manually,

00:06:14.830 --> 00:06:16.895
so it doesn't cause any errors.

00:06:16.895 --> 00:06:18.790
To round off this video, we're going to take

00:06:18.790 --> 00:06:21.265
a quick look at using comments.

00:06:21.265 --> 00:06:23.120
Comments are simply a way for us to

00:06:23.120 --> 00:06:25.070
make notes inside of our code,

00:06:25.070 --> 00:06:27.835
which won't be read as any JavaScript code.

00:06:27.835 --> 00:06:31.400
We can also use it to comment out our code too.

00:06:31.400 --> 00:06:33.170
This means that particular line of code

00:06:33.170 --> 00:06:35.240
is still there in our program,

00:06:35.240 --> 00:06:38.590
but it's not read when the script is executed.

00:06:38.590 --> 00:06:41.285
To insert a comment or a note,

00:06:41.285 --> 00:06:44.810
we begin in JavaScript with the two forward slashes.

00:06:44.810 --> 00:06:46.580
Then we could type a note such as,

00:06:46.580 --> 00:06:50.130
must have semicolon in above statements.

00:06:50.180 --> 00:06:53.090
If we save this and refresh the browser,

00:06:53.090 --> 00:06:56.600
we don't see any reference to the comment inside of here.

00:06:56.600 --> 00:06:58.910
But what if we had a longer comment

00:06:58.910 --> 00:07:00.920
which spread onto multiple lines?

00:07:00.920 --> 00:07:04.085
For example, if you had a comment just here

00:07:04.085 --> 00:07:05.675
and then said control the length

00:07:05.675 --> 00:07:08.760
of number using toPrecision.

00:07:11.000 --> 00:07:13.025
Well, like most of the time,

00:07:13.025 --> 00:07:14.450
the text editor will give us

00:07:14.450 --> 00:07:17.450
a clue to wherever we are doing something right or wrong.

00:07:17.450 --> 00:07:19.400
Immediately these changes color and we

00:07:19.400 --> 00:07:21.275
have this red underline below.

00:07:21.275 --> 00:07:22.910
We can see that this is not the way

00:07:22.910 --> 00:07:24.655
it's expected to be wrote.

00:07:24.655 --> 00:07:27.260
For this we can even begin each new line of

00:07:27.260 --> 00:07:29.870
code with the double forward slashes,

00:07:29.870 --> 00:07:32.000
or instead, we could convert this

00:07:32.000 --> 00:07:34.070
to be a multi-line comment,

00:07:34.070 --> 00:07:36.990
which is a forward slash, and then a star.

00:07:36.990 --> 00:07:39.950
We can then remove the second line comment

00:07:39.950 --> 00:07:42.620
and then go to the end of our comment just here,

00:07:42.620 --> 00:07:44.450
and we can end this with the opposite which is

00:07:44.450 --> 00:07:47.015
a star and a forward slash.

00:07:47.015 --> 00:07:49.115
As mentioned before, we can also

00:07:49.115 --> 00:07:51.410
comment out lines of code too.

00:07:51.410 --> 00:07:54.770
If want to leave a certain code in place for reference,

00:07:54.770 --> 00:07:57.455
or if we want to reinstate it later on,

00:07:57.455 --> 00:07:59.600
or when it's due is exactly the same.

00:07:59.600 --> 00:08:01.430
For example, if we wanted

00:08:01.430 --> 00:08:03.715
to remove this constant of Chris,

00:08:03.715 --> 00:08:06.675
we just add the two forward slashes in front,

00:08:06.675 --> 00:08:08.850
this line of code will then turn gray,

00:08:08.850 --> 00:08:10.430
and is no longer available to

00:08:10.430 --> 00:08:13.200
access inside of our program.
