WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.870 --> 00:00:05.490
In the previous video, we briefly looked

00:00:05.490 --> 00:00:07.695
at these HTML media elements.

00:00:07.695 --> 00:00:09.870
We discussed that it had some properties and

00:00:09.870 --> 00:00:11.790
methods which we can take advantage of.

00:00:11.790 --> 00:00:14.745
This is what we're now going to do in our JavaScript.

00:00:14.745 --> 00:00:17.130
Properties wise, if we scroll down,

00:00:17.130 --> 00:00:19.590
we have something called the current time,

00:00:19.590 --> 00:00:21.420
and this is something which we can use to grab

00:00:21.420 --> 00:00:24.135
the current playback time in seconds.

00:00:24.135 --> 00:00:25.860
Go down a little bit further.

00:00:25.860 --> 00:00:28.440
We also have something called the duration.

00:00:28.440 --> 00:00:30.765
This is the total length of the video.

00:00:30.765 --> 00:00:33.060
We'll also need this later on in this video.

00:00:33.060 --> 00:00:36.210
A little bit further down towards the bottom,

00:00:36.210 --> 00:00:38.040
we should also have some methods available.

00:00:38.040 --> 00:00:39.750
Here we can take advantage

00:00:39.750 --> 00:00:42.160
of methods such as play and pause.

00:00:42.160 --> 00:00:43.700
Of course, these are really going to be

00:00:43.700 --> 00:00:45.275
useful for our project.

00:00:45.275 --> 00:00:47.450
Let's go over to our script.js

00:00:47.450 --> 00:00:49.945
and implement these inside of here.

00:00:49.945 --> 00:00:53.010
The play and pause is pretty straightforward.

00:00:53.010 --> 00:00:54.485
All we need to do is to grab

00:00:54.485 --> 00:00:57.515
our particular elements and then add an event listener.

00:00:57.515 --> 00:01:00.845
Let's now free click, and then we can run these methods.

00:01:00.845 --> 00:01:04.910
Inside of our video player, inside of our HTML,

00:01:04.910 --> 00:01:08.165
we already have these buttons setup to play and pause,

00:01:08.165 --> 00:01:09.710
and in our script we already have

00:01:09.710 --> 00:01:12.240
a reference to both of these elements.

00:01:12.240 --> 00:01:14.135
We can begin by accessing

00:01:14.135 --> 00:01:17.360
the Play button and then at event listener.

00:01:17.360 --> 00:01:20.260
We'll listen out for the click event.

00:01:20.260 --> 00:01:22.820
You could either add an inline function

00:01:22.820 --> 00:01:24.950
inside of here or you could add this separately.

00:01:24.950 --> 00:01:27.095
I'm just going to add this inline;

00:01:27.095 --> 00:01:29.700
function name of play.

00:01:29.840 --> 00:01:33.230
Then what do you want to do inside this function?

00:01:33.230 --> 00:01:36.320
Well, what we need to do is to access our video,

00:01:36.320 --> 00:01:38.425
which is our video elements,

00:01:38.425 --> 00:01:41.330
and since this inherits all the properties and

00:01:41.330 --> 00:01:44.030
methods from the HTML media elements,

00:01:44.030 --> 00:01:46.940
we can then use these methods which we just looked at,

00:01:46.940 --> 00:01:49.510
and what we need is play.

00:01:49.510 --> 00:01:52.545
We can try this out. Let's test our video player,

00:01:52.545 --> 00:01:54.510
refresh, click on

00:01:54.510 --> 00:01:58.260
"Play" and it instantly updates the video.

00:01:58.260 --> 00:02:01.085
Of course, the pause button doesn't work just yet,

00:02:01.085 --> 00:02:04.250
but if we go back to our JavaScript,

00:02:04.250 --> 00:02:06.140
we can access this and do exactly the

00:02:06.140 --> 00:02:08.790
same by adding an event listener.

00:02:09.440 --> 00:02:11.645
For the click event,

00:02:11.645 --> 00:02:14.940
we will run a function called pause.

00:02:15.050 --> 00:02:17.310
Pause will look pretty much the same.

00:02:17.310 --> 00:02:21.445
We just need to access our video and the post method.

00:02:21.445 --> 00:02:24.665
Then we can also test this is working too.

00:02:24.665 --> 00:02:27.260
Play, this is fine.

00:02:27.260 --> 00:02:30.595
Then pause, and this will then pause our video.

00:02:30.595 --> 00:02:33.890
As well as these two buttons may also be nice to play and

00:02:33.890 --> 00:02:35.210
pause the video when we

00:02:35.210 --> 00:02:37.475
click on the actual video at the top.

00:02:37.475 --> 00:02:39.290
Also some players allow you

00:02:39.290 --> 00:02:41.380
to do this with the space bar.

00:02:41.380 --> 00:02:43.950
This will create a function which you're going to

00:02:43.950 --> 00:02:46.935
toggle between the play and the pause state.

00:02:46.935 --> 00:02:51.010
Step one, we'll crate our function to toggle play.

00:02:52.660 --> 00:02:55.400
The first part of this function is going to

00:02:55.400 --> 00:02:57.890
detect if the video is already paused.

00:02:57.890 --> 00:03:00.575
If it is, we'll then run the play function.

00:03:00.575 --> 00:03:02.845
If not, we'll go ahead and pause.

00:03:02.845 --> 00:03:05.675
We'll create an if statement inside of here,

00:03:05.675 --> 00:03:09.750
which is going to check if the video is paused.

00:03:10.160 --> 00:03:12.295
How to know this will work.

00:03:12.295 --> 00:03:13.610
Well, if we go back over to

00:03:13.610 --> 00:03:16.280
the documentation and scroll down to the properties,

00:03:16.280 --> 00:03:19.880
we have access to a read-only property called paused,

00:03:19.880 --> 00:03:22.685
which will then return a true or false value.

00:03:22.685 --> 00:03:24.590
In our case, if the video is paused,

00:03:24.590 --> 00:03:26.015
we would then want to do the opposite

00:03:26.015 --> 00:03:27.800
and run the play method.

00:03:27.800 --> 00:03:29.450
If this is true, we can also

00:03:29.450 --> 00:03:31.445
return out of this if statement.

00:03:31.445 --> 00:03:34.465
Then just below, if this is not true,

00:03:34.465 --> 00:03:36.525
meaning the video is not paused,

00:03:36.525 --> 00:03:39.160
we don't want to pause the video.

00:03:39.760 --> 00:03:43.295
For this to work, we need to access our video elements,

00:03:43.295 --> 00:03:45.980
which is stored inside of this video constant.

00:03:45.980 --> 00:03:52.260
Place is down at the bottom, video.addeventlistener.

00:03:52.520 --> 00:03:55.640
We're going to list now for a click event on this video

00:03:55.640 --> 00:03:59.340
and then run our function which is toggle play.

00:04:00.110 --> 00:04:03.970
Save this and over to the browser, reload this.

00:04:03.970 --> 00:04:06.510
Since this is currently in the paused state,

00:04:06.510 --> 00:04:08.660
which is true inside the if statements,

00:04:08.660 --> 00:04:10.295
we should now be able to click on this

00:04:10.295 --> 00:04:12.415
and then play the video.

00:04:12.415 --> 00:04:14.655
Click on this and this should work.

00:04:14.655 --> 00:04:16.490
We'll then click on this again.

00:04:16.490 --> 00:04:19.810
The second click will do the opposite and pause.

00:04:19.810 --> 00:04:21.615
Good. This all now works.

00:04:21.615 --> 00:04:23.330
The next thing, as mentioned before,

00:04:23.330 --> 00:04:25.670
is to also toggle between the play and pause

00:04:25.670 --> 00:04:28.235
state when the user hits the space bar.

00:04:28.235 --> 00:04:29.690
When pressing the space bar,

00:04:29.690 --> 00:04:32.525
this is not attached to any single element.

00:04:32.525 --> 00:04:35.085
What we can do to listen out for the space bar

00:04:35.085 --> 00:04:38.645
is to add an event listener to the actual document.

00:04:38.645 --> 00:04:42.780
Let's grab this, select add event listener.

00:04:42.780 --> 00:04:46.065
We want to list down for a key down event.

00:04:46.065 --> 00:04:48.785
This key down is when any button

00:04:48.785 --> 00:04:50.755
on the keyboard is pressed.

00:04:50.755 --> 00:04:54.040
This will then run a function.

00:04:54.230 --> 00:04:57.500
Here, before we run our toggle play function,

00:04:57.500 --> 00:04:58.895
remember we're listening for

00:04:58.895 --> 00:05:01.265
any key to be pressed on the board.

00:05:01.265 --> 00:05:03.830
What we do need to do is to first detect if

00:05:03.830 --> 00:05:07.465
the space bar is being pressed or any other key.

00:05:07.465 --> 00:05:11.059
We can do this by accessing the event information,

00:05:11.059 --> 00:05:12.950
passes into the function.

00:05:12.950 --> 00:05:16.460
Then we can take a look inside the event information.

00:05:16.460 --> 00:05:19.220
Save this, refresh,

00:05:19.220 --> 00:05:21.400
open up the developer tools,

00:05:21.400 --> 00:05:23.450
jump into the console.

00:05:23.450 --> 00:05:27.260
What we need to do now is press any key inside of here.

00:05:27.260 --> 00:05:29.660
This has unfired our keyboard events.

00:05:29.660 --> 00:05:30.590
If we open this up,

00:05:30.590 --> 00:05:32.870
this code property on this object will

00:05:32.870 --> 00:05:36.470
tell us exactly which keyboard button has been pressed.

00:05:36.470 --> 00:05:38.390
My case, I press the space bar,

00:05:38.390 --> 00:05:39.935
which is the code of space.

00:05:39.935 --> 00:05:43.220
We can now access this inside of our function.

00:05:43.220 --> 00:05:45.140
Rather than the console log,

00:05:45.140 --> 00:05:47.855
we'll check if the

00:05:47.855 --> 00:05:53.045
event.code is equal to the string of space,

00:05:53.045 --> 00:05:55.175
which matches this string just here.

00:05:55.175 --> 00:05:56.780
Then what we want to do is to

00:05:56.780 --> 00:05:59.610
run our toggle play function.

00:06:00.280 --> 00:06:04.490
That's the result, down and refresh.

00:06:04.490 --> 00:06:06.910
Now if we press the Space bar,

00:06:06.910 --> 00:06:09.105
this will run our function

00:06:09.105 --> 00:06:11.115
once again, and it will pause.

00:06:11.115 --> 00:06:14.425
Also you'll find if you press any other keyboard buttons,

00:06:14.425 --> 00:06:16.850
it will not toggle this function.

00:06:16.850 --> 00:06:18.865
Good. Moving down, the next thing we

00:06:18.865 --> 00:06:20.755
have is this volume slider.

00:06:20.755 --> 00:06:22.705
If we go into the index page,

00:06:22.705 --> 00:06:24.250
we can see this is being controlled by

00:06:24.250 --> 00:06:26.680
the input with the type of range.

00:06:26.680 --> 00:06:28.870
The range which we've set here is

00:06:28.870 --> 00:06:31.600
a minimum of zero and a maximum of one.

00:06:31.600 --> 00:06:33.580
So zero being silent and number

00:06:33.580 --> 00:06:35.815
one being the maximum volume.

00:06:35.815 --> 00:06:37.660
As you use the slides, it will go up or

00:06:37.660 --> 00:06:39.205
down in increments of

00:06:39.205 --> 00:06:42.735
0.1 of the script

00:06:42.735 --> 00:06:46.640
vertical reference to this with this volume constant.

00:06:46.640 --> 00:06:51.750
Select this. We'll then add an event listener.

00:06:51.750 --> 00:06:54.650
We want to listen out for an input event.

00:06:54.650 --> 00:06:57.860
This means that the user has moved the input.

00:06:57.860 --> 00:07:05.190
Again, this will trigger a function called change volume.

00:07:07.230 --> 00:07:10.150
Back over to the Mozilla documentation.

00:07:10.150 --> 00:07:11.545
We can see inside here.

00:07:11.545 --> 00:07:14.680
We also have access to a volume property.

00:07:14.680 --> 00:07:16.810
We need to make sure that the volume

00:07:16.810 --> 00:07:19.705
is exactly the same as our range slider.

00:07:19.705 --> 00:07:24.625
We can do this by accessing our video.volume,

00:07:24.625 --> 00:07:26.485
which is this property just here,

00:07:26.485 --> 00:07:30.100
and then we want to set this to be equal to a new value.

00:07:30.100 --> 00:07:33.655
This new value is the value of our volume range.

00:07:33.655 --> 00:07:36.640
Up at the top, we've got access to all volume,

00:07:36.640 --> 00:07:39.200
which is this input just here.

00:07:39.930 --> 00:07:43.495
This is just a reference to the actual element.

00:07:43.495 --> 00:07:46.480
If the value of the slider meet accesses with

00:07:46.480 --> 00:07:50.575
the dot value property. Let's try this out.

00:07:50.575 --> 00:07:55.040
Save and refresh. It can play.

00:07:56.280 --> 00:07:59.335
Now if you slide the volume up and down,

00:07:59.335 --> 00:08:00.970
if you built here a difference in

00:08:00.970 --> 00:08:03.160
the volume levels moving

00:08:03.160 --> 00:08:05.320
down the next thing we have is our four buttons,

00:08:05.320 --> 00:08:07.090
which is going to slow down and

00:08:07.090 --> 00:08:09.325
speed up the playback of the video.

00:08:09.325 --> 00:08:12.760
In our script we use query selector all to select all of

00:08:12.760 --> 00:08:16.495
these power buttons install these in the speed variable.

00:08:16.495 --> 00:08:18.250
This means that we have access

00:08:18.250 --> 00:08:20.035
to all four of these buttons.

00:08:20.035 --> 00:08:23.635
We'll also need a way to grab the particular values.

00:08:23.635 --> 00:08:28.700
This we can add a custom attribute called data speed.

00:08:29.850 --> 00:08:32.470
This is going to be equal to the value of

00:08:32.470 --> 00:08:35.965
0.5 and then we'll just copy this,

00:08:35.965 --> 00:08:38.350
paste this into our next button.

00:08:38.350 --> 00:08:40.750
This one is the value of one.

00:08:40.750 --> 00:08:44.155
The third one is 1.5

00:08:44.155 --> 00:08:45.910
and the last one is double the

00:08:45.910 --> 00:08:47.950
playback speed, which is two.

00:08:47.950 --> 00:08:50.770
This is just a custom attribute and we generally

00:08:50.770 --> 00:08:53.605
begin custom attributes with this data prefix.

00:08:53.605 --> 00:08:55.570
We know from previous videos that we can

00:08:55.570 --> 00:08:59.020
access the values of any one of these attributes.

00:08:59.020 --> 00:09:01.645
Now back over to the script and we can begin by

00:09:01.645 --> 00:09:05.180
adding an eventListener to any one of these buttons.

00:09:05.310 --> 00:09:08.155
The script down to the bottom,

00:09:08.155 --> 00:09:09.940
access all four buttons which you

00:09:09.940 --> 00:09:11.905
stored in the speed constant.

00:09:11.905 --> 00:09:13.690
Since we have multiple values,

00:09:13.690 --> 00:09:16.270
will loop over width forEach.

00:09:16.270 --> 00:09:18.400
Customer function which is going to run

00:09:18.400 --> 00:09:20.365
for each one of our buttons,

00:09:20.365 --> 00:09:22.285
I'm going to store a reference to each

00:09:22.285 --> 00:09:23.860
one of our buttons inside of

00:09:23.860 --> 00:09:28.255
a variable and then access all buttons.

00:09:28.255 --> 00:09:30.655
Add an EventListener.

00:09:30.655 --> 00:09:32.980
We will just now for a click event,

00:09:32.980 --> 00:09:37.040
and then run a function called setSelected.

00:09:37.560 --> 00:09:39.850
Also we haven't created this yet,

00:09:39.850 --> 00:09:42.260
so we'll just create this just above,

00:09:42.260 --> 00:09:48.955
setSelected as in the function body.

00:09:48.955 --> 00:09:52.405
This function is responsible for doing two things.

00:09:52.405 --> 00:09:55.570
First of all, if the video is not currently playing,

00:09:55.570 --> 00:09:57.100
we may click on any of these buttons,

00:09:57.100 --> 00:09:59.620
but we first want to begin the playback.

00:09:59.620 --> 00:10:03.085
We do this just as above with video.play,

00:10:03.085 --> 00:10:06.320
pass this into our function.

00:10:06.510 --> 00:10:09.760
Then the second thing we want to do is to

00:10:09.760 --> 00:10:12.640
select the particular playback speed.

00:10:12.640 --> 00:10:16.210
That is, we need access to our event information.

00:10:16.210 --> 00:10:17.965
Then as always, we use

00:10:17.965 --> 00:10:21.040
e.target to access the particular elements.

00:10:21.040 --> 00:10:22.840
We can then use getAttribute,

00:10:22.840 --> 00:10:24.595
which we've looked at in the past to grab

00:10:24.595 --> 00:10:27.830
our customer data-speed attribute.

00:10:30.240 --> 00:10:33.520
This should now give us access to our values which goes

00:10:33.520 --> 00:10:36.325
between 0.5 up to 2.

00:10:36.325 --> 00:10:40.195
We also need a way to set this value to our video.

00:10:40.195 --> 00:10:42.835
First of all, access our video

00:10:42.835 --> 00:10:45.295
and then inside the documentation,

00:10:45.295 --> 00:10:47.440
we have another property variable called

00:10:47.440 --> 00:10:51.200
PlaybackRate. So access this.

00:10:53.130 --> 00:10:56.650
This equal to the volume of our attribute.

00:10:56.650 --> 00:11:01.150
Let's try this out. Load the page.

00:11:01.150 --> 00:11:05.275
Then we'll try 0.5, which is really slow.

00:11:05.275 --> 00:11:11.750
Single speed, 1.5, and then double the speed.

00:11:13.230 --> 00:11:15.820
Good. As this video is playing,

00:11:15.820 --> 00:11:16.870
we also want to update

00:11:16.870 --> 00:11:18.880
the progress bar up at the very top.

00:11:18.880 --> 00:11:21.985
To do this, we can access some various events.

00:11:21.985 --> 00:11:24.250
We can do this by taking advantage of

00:11:24.250 --> 00:11:27.985
some properties called the duration and currentTime.

00:11:27.985 --> 00:11:32.890
Under the probability section, at the very top,

00:11:32.890 --> 00:11:36.190
we have the currentTime, which

00:11:36.190 --> 00:11:38.140
is the equivalent playback time in seconds,

00:11:38.140 --> 00:11:40.960
and also the duration of the video.

00:11:40.960 --> 00:11:44.830
We can use these two properties to calculate the value of

00:11:44.830 --> 00:11:47.020
the progress bar at any given point

00:11:47.020 --> 00:11:49.810
but we also need to do this on a regular basis.

00:11:49.810 --> 00:11:51.190
Unfortunately, there is

00:11:51.190 --> 00:11:52.480
some events which we can list now

00:11:52.480 --> 00:11:55.690
for if we scroll down to the events section.

00:11:55.690 --> 00:11:59.140
Down near the bottom under events,

00:11:59.140 --> 00:12:02.150
we have an event called timeupdate,

00:12:02.190 --> 00:12:04.630
which will fire each time

00:12:04.630 --> 00:12:07.330
the currentTime attribute has been updated.

00:12:07.330 --> 00:12:09.610
Meaning we can listen now for the current time to be

00:12:09.610 --> 00:12:13.630
updated and then recalculate the progress bar each time.

00:12:13.630 --> 00:12:15.490
Step 1, we'll create a new function

00:12:15.490 --> 00:12:16.600
which is going to actually

00:12:16.600 --> 00:12:18.070
update the progress bar and

00:12:18.070 --> 00:12:20.200
then we'll call this on each update.

00:12:20.200 --> 00:12:24.560
Great function called updateProgress.

00:12:26.070 --> 00:12:29.500
We could just immediately update the progress bar,

00:12:29.500 --> 00:12:32.350
but first we'll add a quick if statements inside,

00:12:32.350 --> 00:12:33.865
which is going to check if the

00:12:33.865 --> 00:12:41.125
video.currentTime is greater than the value of zero.

00:12:41.125 --> 00:12:43.060
This will only run if the video

00:12:43.060 --> 00:12:44.575
has started to play back,

00:12:44.575 --> 00:12:47.365
and then we can access our progress bar.

00:12:47.365 --> 00:12:52.045
This is stored in the progress constant. Set the value.

00:12:52.045 --> 00:12:54.580
This value can be calculated by dividing

00:12:54.580 --> 00:12:56.800
the currentTime by the duration.

00:12:56.800 --> 00:13:01.465
So video.currentTime

00:13:01.465 --> 00:13:04.150
easily properties which we just looked at,

00:13:04.150 --> 00:13:07.940
divide this by the video.duration.

00:13:07.980 --> 00:13:10.825
To run this function, we'll then need to add

00:13:10.825 --> 00:13:13.705
an event listener to a video player.

00:13:13.705 --> 00:13:16.000
Access the video, add

00:13:16.000 --> 00:13:17.560
EventListener and this time we're

00:13:17.560 --> 00:13:19.390
not actually list now for a click,

00:13:19.390 --> 00:13:22.360
we want to list now for one of the built-in methods.

00:13:22.360 --> 00:13:25.730
The built-in method is this timeupdate,

00:13:28.860 --> 00:13:33.350
which will then call our update progress function.

00:13:33.630 --> 00:13:37.390
Let's test this out into the browser.

00:13:37.390 --> 00:13:41.860
Click Play. As soon as this begins our playback,

00:13:41.860 --> 00:13:44.905
we'll then cause the update to our progress bar.

00:13:44.905 --> 00:13:47.990
Pause, and this will stop.

00:13:49.980 --> 00:13:51.130
Good.

00:13:51.130 --> 00:13:52.240
We'll also try to set the slow

00:13:52.240 --> 00:13:54.760
speed and it slows it down.

00:13:54.760 --> 00:13:58.460
Also the fastest speed will increase this too.

00:13:58.950 --> 00:14:01.180
We're almost there with our video

00:14:01.180 --> 00:14:02.260
player and the last thing to

00:14:02.260 --> 00:14:05.095
take care of is these back and forward buttons.

00:14:05.095 --> 00:14:07.600
The way to set these up is to also make use

00:14:07.600 --> 00:14:09.925
of the currentTime and then we'll deduct

00:14:09.925 --> 00:14:12.100
a number of seconds and also increase the number of

00:14:12.100 --> 00:14:15.345
seconds depending on which button has been clicked.

00:14:15.345 --> 00:14:17.570
We all have access to both of these buttons

00:14:17.570 --> 00:14:19.895
with the back and forward constants.

00:14:19.895 --> 00:14:22.010
It can be in with the back variable

00:14:22.010 --> 00:14:24.165
by adding an EventListener.

00:14:24.165 --> 00:14:27.340
Is now for a click, which

00:14:27.340 --> 00:14:29.815
is then going to run a function.

00:14:29.815 --> 00:14:33.040
We'll call this back and

00:14:33.040 --> 00:14:35.020
then access our video player answer

00:14:35.020 --> 00:14:38.030
the currentTime using

00:14:38.030 --> 00:14:40.700
the subtraction assignment operator.

00:14:40.700 --> 00:14:43.205
I set this equal to a value of five,

00:14:43.205 --> 00:14:45.245
and this will deduct five seconds,

00:14:45.245 --> 00:14:46.910
and then reset the currentTime

00:14:46.910 --> 00:14:49.085
to be equal to the new value.

00:14:49.085 --> 00:14:51.140
This is simply just a shortcut and

00:14:51.140 --> 00:14:53.495
it'd be exactly the same as doing

00:14:53.495 --> 00:14:57.610
video.currentTime is equal to

00:14:57.610 --> 00:15:01.795
video.currentTime take away five.

00:15:01.795 --> 00:15:04.495
So both of these are exactly the same.

00:15:04.495 --> 00:15:08.175
The opposite, we can just Copy and Paste this.

00:15:08.175 --> 00:15:11.985
This time we need to listen out for the forward button.

00:15:11.985 --> 00:15:15.260
Function can be called forward too.

00:15:16.470 --> 00:15:19.925
This time the only difference is we want to increase

00:15:19.925 --> 00:15:24.015
the time by five seconds. Let's try this out.

00:15:24.015 --> 00:15:26.305
Refresh, which I forward,

00:15:26.305 --> 00:15:28.120
and this will update the progress bar.

00:15:28.120 --> 00:15:30.140
Click back. This will end it

00:15:30.140 --> 00:15:33.120
up five seconds from our currentTime.
