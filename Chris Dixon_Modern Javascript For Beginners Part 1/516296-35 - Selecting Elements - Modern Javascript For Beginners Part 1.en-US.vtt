WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.330 --> 00:00:05.400
Hey, welcome back to this new section.

00:00:05.400 --> 00:00:07.950
For this section head into Section Number 4

00:00:07.950 --> 00:00:09.810
which is events and the DOM.

00:00:09.810 --> 00:00:11.520
This is the first video which is

00:00:11.520 --> 00:00:13.455
Number 1, Selecting Elements.

00:00:13.455 --> 00:00:15.690
I'll grab the path to this file and

00:00:15.690 --> 00:00:18.690
open this up inside of the browser.

00:00:18.690 --> 00:00:21.120
We can see inside the browser we already have

00:00:21.120 --> 00:00:23.940
some HTML code which is displaying a table,

00:00:23.940 --> 00:00:25.560
and this is going to give us a reference

00:00:25.560 --> 00:00:27.090
for some different ways we can

00:00:27.090 --> 00:00:30.990
use to select any one of our HTML elements.

00:00:30.990 --> 00:00:33.690
Obviously, when we need to manipulate

00:00:33.690 --> 00:00:36.165
any of these HTML using JavaScript,

00:00:36.165 --> 00:00:39.395
we have multiple ways we can use to select these.

00:00:39.395 --> 00:00:41.750
First of all, as we looked at in the past,

00:00:41.750 --> 00:00:44.690
we can select an element by the particular Id.

00:00:44.690 --> 00:00:46.790
This was an Id attribute,

00:00:46.790 --> 00:00:49.690
and we can select it by a particular name.

00:00:49.690 --> 00:00:51.660
We can select by

00:00:51.660 --> 00:00:54.510
a tag which is the element's name such as Id,

00:00:54.510 --> 00:00:56.895
a p element or the image,

00:00:56.895 --> 00:00:59.420
we can select by a class name and we can

00:00:59.420 --> 00:01:02.830
also select with a CSS selector too.

00:01:02.830 --> 00:01:05.120
There's two different ways we can use for this.

00:01:05.120 --> 00:01:08.180
We can select the very first matching selector

00:01:08.180 --> 00:01:11.935
or we can have return back to us all available matches.

00:01:11.935 --> 00:01:13.730
Over on the right, we have a set

00:01:13.730 --> 00:01:15.290
of methods which is going to allow us

00:01:15.290 --> 00:01:19.165
to select any of our elements with these methods.

00:01:19.165 --> 00:01:22.700
We've used getElementById briefly in the past.

00:01:22.700 --> 00:01:24.710
We can select our elements by

00:01:24.710 --> 00:01:28.120
tag name and also by the class name too.

00:01:28.120 --> 00:01:31.700
Notice that the s is highlighted in both of

00:01:31.700 --> 00:01:33.230
these two methods since it

00:01:33.230 --> 00:01:35.420
returns back multiple elements.

00:01:35.420 --> 00:01:37.280
We have querySelector which is

00:01:37.280 --> 00:01:39.365
going to select the very first match,

00:01:39.365 --> 00:01:43.090
and querySelectorAll which will return all matches.

00:01:43.090 --> 00:01:45.080
Both of these methods, just like this,

00:01:45.080 --> 00:01:48.470
works exactly the same as it does with our CSS.

00:01:48.470 --> 00:01:52.150
For example, we could select it by an element name,

00:01:52.150 --> 00:01:55.170
we could use the.select a class,

00:01:55.170 --> 00:01:57.590
or also a # too if we

00:01:57.590 --> 00:02:00.050
want to select an element by a particular

00:02:00.050 --> 00:02:03.430
Id with this group of methods which we're going

00:02:03.430 --> 00:02:04.960
to focus on in this video

00:02:04.960 --> 00:02:07.255
and in the upcoming section too.

00:02:07.255 --> 00:02:10.495
Remember that a method is just like a function,

00:02:10.495 --> 00:02:12.605
but it lives on an object.

00:02:12.605 --> 00:02:15.590
Also, the document is an objective too.

00:02:15.590 --> 00:02:18.490
Let's go over to our index.html,

00:02:18.490 --> 00:02:20.380
scroll down to the script section.

00:02:20.380 --> 00:02:22.850
We'll create a console.log

00:02:23.480 --> 00:02:25.810
and I'll put the contents of

00:02:25.810 --> 00:02:28.830
the document. This is an object.

00:02:28.830 --> 00:02:32.590
We're going to open up the developer tools into

00:02:32.590 --> 00:02:34.795
the console and refresh.

00:02:34.795 --> 00:02:36.490
Just make this a little bit bigger.

00:02:36.490 --> 00:02:38.470
If we open this up, and

00:02:38.470 --> 00:02:39.805
then inside the console we can see

00:02:39.805 --> 00:02:41.020
all of the content which you

00:02:41.020 --> 00:02:43.270
have inside of our index page.

00:02:43.270 --> 00:02:45.880
As covered in the last video,

00:02:45.880 --> 00:02:49.070
the document is the top-level of the DOM tree.

00:02:49.070 --> 00:02:52.590
It covers everything inside of this HTML page.

00:02:52.590 --> 00:02:54.940
These documents been an object also has lots

00:02:54.940 --> 00:02:57.805
of properties and methods available too.

00:02:57.805 --> 00:02:59.410
We can see this if we type in

00:02:59.410 --> 00:03:03.115
the document and then use dot to get the auto complete.

00:03:03.115 --> 00:03:05.185
This goes back to earlier when we looked at

00:03:05.185 --> 00:03:07.510
object types such as arrays

00:03:07.510 --> 00:03:09.220
and we noticed that they had a lot of

00:03:09.220 --> 00:03:12.755
built-in properties and methods which we could access.

00:03:12.755 --> 00:03:15.745
We can check if this document has any images.

00:03:15.745 --> 00:03:18.010
In our case, we don't have an so this returns

00:03:18.010 --> 00:03:20.665
back an empty HTML Collection.

00:03:20.665 --> 00:03:22.930
We could also check some different things

00:03:22.930 --> 00:03:24.925
such as the URL.

00:03:24.925 --> 00:03:28.160
Hit enter. This will return back to

00:03:28.160 --> 00:03:30.980
the file path for these particular document.

00:03:30.980 --> 00:03:33.740
We can see mine is on the desktop and inside

00:03:33.740 --> 00:03:38.190
the modern JavaScript starter files, as well as the URL.

00:03:38.190 --> 00:03:41.520
Let's type in the head and this returns the head section

00:03:41.520 --> 00:03:45.540
which is all the data inside of this head section.

00:03:45.640 --> 00:03:47.780
Also the same for

00:03:47.780 --> 00:03:50.870
our body and as

00:03:50.870 --> 00:03:54.050
our body elements with all of the contents inside.

00:03:54.050 --> 00:03:55.460
The reason we can access

00:03:55.460 --> 00:03:57.470
this document and all of the content

00:03:57.470 --> 00:04:01.505
is because it's available globally on the window object.

00:04:01.505 --> 00:04:05.390
We could also access this via the window object too.

00:04:05.390 --> 00:04:10.215
Down to our console log type in the window,

00:04:10.215 --> 00:04:11.990
refresh, and inside the console,

00:04:11.990 --> 00:04:14.270
if we open this up, this window object

00:04:14.270 --> 00:04:15.950
has the document property just

00:04:15.950 --> 00:04:17.600
here where we can access all of

00:04:17.600 --> 00:04:18.830
the same properties and

00:04:18.830 --> 00:04:21.020
methods which we've just looked at.

00:04:21.020 --> 00:04:22.730
Well, what we're interested in at

00:04:22.730 --> 00:04:24.950
the moment is the methods available to

00:04:24.950 --> 00:04:26.900
select the required elements

00:04:26.900 --> 00:04:29.050
which is these ones over on the right.

00:04:29.050 --> 00:04:30.860
First, to do this, we'll create

00:04:30.860 --> 00:04:32.750
a new element which you want to select.

00:04:32.750 --> 00:04:35.045
We can place this anywhere in our code.

00:04:35.045 --> 00:04:37.250
I'm going to add a p element just above

00:04:37.250 --> 00:04:42.235
the section and then grab this by the Id of text.

00:04:42.235 --> 00:04:44.420
Then inside of the script section just below,

00:04:44.420 --> 00:04:47.705
we can grab this by first selecting the documents,

00:04:47.705 --> 00:04:50.030
and then we can access the method available on

00:04:50.030 --> 00:04:53.840
the document which is getElementById.

00:04:53.840 --> 00:04:56.510
We know how to do this, we pass in as

00:04:56.510 --> 00:04:59.660
a string the Id which is text,

00:04:59.660 --> 00:05:04.200
store this inside of a variable let's call this text.

00:05:04.200 --> 00:05:07.500
Now we can log this to the console.

00:05:07.500 --> 00:05:10.550
Refresh. There we go and this is now

00:05:10.550 --> 00:05:13.850
selected our p element which we've just created.

00:05:13.850 --> 00:05:16.010
This is pretty simple. This is just how we

00:05:16.010 --> 00:05:17.780
select one particular element.

00:05:17.780 --> 00:05:21.100
But what if we had two p elements?

00:05:21.100 --> 00:05:23.570
Well, to be able to grab both of these p elements,

00:05:23.570 --> 00:05:25.385
we have two options.

00:05:25.385 --> 00:05:27.110
On the second row,

00:05:27.110 --> 00:05:29.135
we have access to the tag name.

00:05:29.135 --> 00:05:30.770
As you can see with the s this is

00:05:30.770 --> 00:05:32.960
capable of holding multiple elements.

00:05:32.960 --> 00:05:35.000
This will be fine to use.

00:05:35.000 --> 00:05:37.340
Also the same for the very last row,

00:05:37.340 --> 00:05:39.830
we could also use querySelectorAll where we

00:05:39.830 --> 00:05:42.920
could select multiple matches by the p element,

00:05:42.920 --> 00:05:44.525
and of course, if we had a class

00:05:44.525 --> 00:05:46.055
attached to both of these elements,

00:05:46.055 --> 00:05:49.130
we could also use getElementsByClassName too.

00:05:49.130 --> 00:05:50.285
But we don't have a class

00:05:50.285 --> 00:05:51.530
attached to these at the moment,

00:05:51.530 --> 00:05:53.705
so we're going to make use of the tag name.

00:05:53.705 --> 00:05:57.490
Let's go down and instead of getElementById,

00:05:57.490 --> 00:06:00.540
and just to be getElementsByTagName,

00:06:00.540 --> 00:06:02.930
and just like we would do with CSS,

00:06:02.930 --> 00:06:05.270
we can select these by the tag name of

00:06:05.270 --> 00:06:08.849
p. Save and refresh.

00:06:08.849 --> 00:06:10.560
We now get back return to as

00:06:10.560 --> 00:06:14.230
an HTML collection containing two different elements.

00:06:14.230 --> 00:06:16.295
A HTML collection is

00:06:16.295 --> 00:06:18.350
a generic array-like collection of

00:06:18.350 --> 00:06:19.805
elements and this is how

00:06:19.805 --> 00:06:22.175
our return p elements are stored.

00:06:22.175 --> 00:06:24.335
Like with arrays, we can also access

00:06:24.335 --> 00:06:27.130
specific values by the index position.

00:06:27.130 --> 00:06:29.525
If we were to add the square brackets

00:06:29.525 --> 00:06:31.730
and then select index number 1,

00:06:31.730 --> 00:06:34.460
this would select our second p element,

00:06:34.460 --> 00:06:36.245
which is this one just here.

00:06:36.245 --> 00:06:38.600
We could change this to be index zero,

00:06:38.600 --> 00:06:41.645
and this would select our very first one.

00:06:41.645 --> 00:06:43.400
But note since this is

00:06:43.400 --> 00:06:45.770
a HTMLCollection rather than an array,

00:06:45.770 --> 00:06:49.290
we don't have access to any of the array methods.

00:06:49.290 --> 00:06:51.220
Next, we can select elements by

00:06:51.220 --> 00:06:52.720
the class name and for this,

00:06:52.720 --> 00:06:55.600
we also need to add a class to our elements.

00:06:55.600 --> 00:06:57.835
Let's go for our second element,

00:06:57.835 --> 00:06:59.650
we can add a class.

00:06:59.650 --> 00:07:01.985
I want to go for text-small.

00:07:01.985 --> 00:07:04.420
You want to follow a table which you already have.

00:07:04.420 --> 00:07:06.355
This one should be pretty straightforward.

00:07:06.355 --> 00:07:07.960
If I want to select an element by

00:07:07.960 --> 00:07:12.145
the class name, we have getElementsByClassName.

00:07:12.145 --> 00:07:17.310
Change is over, passing

00:07:17.310 --> 00:07:19.990
the class name which was text-small.

00:07:21.900 --> 00:07:25.245
Remove the index number and refresh.

00:07:25.245 --> 00:07:27.160
Just like before, we also have returned

00:07:27.160 --> 00:07:29.125
back to was HTMLCollection

00:07:29.125 --> 00:07:30.805
because this could also contain

00:07:30.805 --> 00:07:34.175
multiple elements which all have the same class.

00:07:34.175 --> 00:07:35.930
The last thing which we are going to look at

00:07:35.930 --> 00:07:37.370
work in a similar way.

00:07:37.370 --> 00:07:41.240
All of these makes use of a CSS selector to either select

00:07:41.240 --> 00:07:43.160
the very first element which will come

00:07:43.160 --> 00:07:46.705
across or a collection of all of the matches.

00:07:46.705 --> 00:07:50.145
Let's start with our first match which is querySelector.

00:07:50.145 --> 00:07:54.130
Again, this is also available directly on the documents.

00:07:54.130 --> 00:07:56.540
What we could do, just like CSS,

00:07:56.540 --> 00:07:59.330
we could make use of the class name with the dot.

00:07:59.330 --> 00:08:02.615
This will return back the p elements we just selected.

00:08:02.615 --> 00:08:04.760
We could also grab an Id or

00:08:04.760 --> 00:08:07.300
also the tag name just like this.

00:08:07.300 --> 00:08:09.650
Remember that querySelector will select

00:08:09.650 --> 00:08:13.040
the very first occurrence or the very first match.

00:08:13.040 --> 00:08:16.775
Refresh and there's our very first element just there.

00:08:16.775 --> 00:08:20.045
But if we wanted to grab all of these available matches,

00:08:20.045 --> 00:08:22.970
we need changes to be querySelectorAll.

00:08:22.970 --> 00:08:25.595
Save and refresh. We're now getting back

00:08:25.595 --> 00:08:29.065
a node list containing now two p elements.

00:08:29.065 --> 00:08:31.130
Unlike before where we had to return

00:08:31.130 --> 00:08:32.915
back to the HTML Collection,

00:08:32.915 --> 00:08:35.900
this time we get back a node list and there is

00:08:35.900 --> 00:08:37.730
some differences between a node list

00:08:37.730 --> 00:08:39.275
and a HTML Collection.

00:08:39.275 --> 00:08:42.115
I'm going to take a look at these in a later video.

00:08:42.115 --> 00:08:44.270
Also, remember that here on its own,

00:08:44.270 --> 00:08:46.745
when writing our JavaScript inside of here,

00:08:46.745 --> 00:08:48.365
the JavaScript doesn't know

00:08:48.365 --> 00:08:50.720
anything about our HTML model.

00:08:50.720 --> 00:08:53.210
It's accessing the document and then all of

00:08:53.210 --> 00:08:56.599
the elements which we need through the DOM interface.

00:08:56.599 --> 00:09:00.320
As a recap, we can select an element in many ways,

00:09:00.320 --> 00:09:02.060
such as this p element,

00:09:02.060 --> 00:09:04.085
which we can access by the Id,

00:09:04.085 --> 00:09:06.755
the tag name which is the element's name of p,

00:09:06.755 --> 00:09:08.810
or even the class name which is text

00:09:08.810 --> 00:09:10.850
green and the last two are

00:09:10.850 --> 00:09:12.860
selected in an element in the same way as we would

00:09:12.860 --> 00:09:15.410
expect inside of a style sheet.

00:09:15.410 --> 00:09:18.380
The difference is if we want to grab the first match with

00:09:18.380 --> 00:09:23.180
querySelector or all matches using querySelectorAll.

00:09:23.180 --> 00:09:25.025
Now we know how to select

00:09:25.025 --> 00:09:27.200
any HTML element which you want.

00:09:27.200 --> 00:09:28.430
We're now going to move on to

00:09:28.430 --> 00:09:30.140
the next video where we'll discover

00:09:30.140 --> 00:09:34.140
how to make some changes to any existing elements.
