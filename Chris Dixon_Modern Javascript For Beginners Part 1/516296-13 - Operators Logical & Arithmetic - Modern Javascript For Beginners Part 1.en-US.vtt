WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.240 --> 00:00:03.750
Welcome back.

00:00:03.750 --> 00:00:05.040
Along with assignments

00:00:05.040 --> 00:00:06.989
and the comparison operators,

00:00:06.989 --> 00:00:10.095
there are also logical and arithmetic operators,

00:00:10.095 --> 00:00:12.975
which we can take advantage of in JavaScript.

00:00:12.975 --> 00:00:14.820
As ever, we've headed into

00:00:14.820 --> 00:00:16.890
this lesson's folder which is number 10,

00:00:16.890 --> 00:00:20.130
and also open this up inside of the browser.

00:00:20.130 --> 00:00:22.935
Just like the previous video, we have some comments,

00:00:22.935 --> 00:00:26.280
which has a list of all of the available operators.

00:00:26.280 --> 00:00:29.145
The first set is the arithmetic operators.

00:00:29.145 --> 00:00:32.595
We'll get onto the logical ones just afterwards.

00:00:32.595 --> 00:00:35.175
With the arithmetic operators,

00:00:35.175 --> 00:00:37.135
a lot of these are just common sense,

00:00:37.135 --> 00:00:39.440
such as the, addition and the, subtraction.

00:00:39.440 --> 00:00:41.630
A lot of these are also very similar to

00:00:41.630 --> 00:00:43.460
the previous video with just not

00:00:43.460 --> 00:00:45.820
combined with the equals operator.

00:00:45.820 --> 00:00:49.144
For example, this is one which we looked up previously.

00:00:49.144 --> 00:00:51.470
This plus equals, will then add up both of

00:00:51.470 --> 00:00:52.760
these numbers and then

00:00:52.760 --> 00:00:55.390
reassign the new value to be number 1.

00:00:55.390 --> 00:00:58.505
We know these are 15 and also five.

00:00:58.505 --> 00:01:02.290
These results of number 1 would then be equal to 20.

00:01:02.290 --> 00:01:04.210
However though, if we were to remove this,

00:01:04.210 --> 00:01:06.725
equals and just have the plus symbol on its own,

00:01:06.725 --> 00:01:08.570
as you may expect this will just simply

00:01:08.570 --> 00:01:10.985
add both of these values together,

00:01:10.985 --> 00:01:13.910
meaning we could directly output this into the console,

00:01:13.910 --> 00:01:15.860
or we could also store this inside of

00:01:15.860 --> 00:01:19.780
a variable to make use of in anywhere inside of our code.

00:01:19.780 --> 00:01:22.280
Just below [inaudible] this line of code

00:01:22.280 --> 00:01:24.230
where we grab this page title.

00:01:24.230 --> 00:01:28.540
Then we can set the inner text to be equal to our result.

00:01:28.540 --> 00:01:31.950
Let's try this out over in the browser. Reload this.

00:01:31.950 --> 00:01:33.210
We'll get the value of 20

00:01:33.210 --> 00:01:34.710
because we've added together both the,

00:01:34.710 --> 00:01:37.245
number 1 and the, number 2.

00:01:37.245 --> 00:01:38.805
This works for not just

00:01:38.805 --> 00:01:41.460
adding it to get the variables like this.

00:01:41.460 --> 00:01:44.090
For example, let's do a console log.

00:01:44.090 --> 00:01:47.165
We can add simple numbers just like this,

00:01:47.165 --> 00:01:49.620
so 5 plus 3.

00:01:49.940 --> 00:01:53.790
Open up the console and there is our value just here.

00:01:53.790 --> 00:01:57.070
We can also use it to add together strings too.

00:01:57.070 --> 00:02:01.185
Above we have a constant of forename and also surname.

00:02:01.185 --> 00:02:03.560
We can use this operator to add

00:02:03.560 --> 00:02:07.740
the forename to the surname.

00:02:07.740 --> 00:02:09.470
As we've looked at previously,

00:02:09.470 --> 00:02:12.680
we can also append as many strings as we want to.

00:02:12.680 --> 00:02:14.210
This will also add a space in

00:02:14.210 --> 00:02:16.615
between the forename on the surname.

00:02:16.615 --> 00:02:18.675
"Save" and "Refresh".

00:02:18.675 --> 00:02:21.190
It has the full name now displayed,

00:02:21.190 --> 00:02:23.105
just remove this console log

00:02:23.105 --> 00:02:24.320
and we're going to cut some more of

00:02:24.320 --> 00:02:27.860
these operators just above. As you may expect.

00:02:27.860 --> 00:02:30.740
We can replace this with subtract,

00:02:30.740 --> 00:02:33.535
this will give us the results of 10.

00:02:33.535 --> 00:02:37.440
We have the star which is the multiply symbol.

00:02:37.440 --> 00:02:40.980
This will now be 15 multiplied by 5,

00:02:40.980 --> 00:02:43.515
giving us the results of 75.

00:02:43.515 --> 00:02:45.965
We also have the remainder operator,

00:02:45.965 --> 00:02:48.620
which is this percent symbol just here.

00:02:48.620 --> 00:02:50.840
Remember from previous videos this will do

00:02:50.840 --> 00:02:54.610
a division and output any remaining numbers afterwards.

00:02:54.610 --> 00:02:57.320
This one five goes into 15 three times,

00:02:57.320 --> 00:03:00.725
leaving a nice round number and zero remainder.

00:03:00.725 --> 00:03:04.895
But if we were to change it to be four it would be 4,

00:03:04.895 --> 00:03:06.560
8,12, and then we would have

00:03:06.560 --> 00:03:09.535
a remainder of 3 to make up 15.

00:03:09.535 --> 00:03:11.480
These are very similar to

00:03:11.480 --> 00:03:13.820
the assignment operators we looked up previously.

00:03:13.820 --> 00:03:16.355
Because as you can see here at the end there is

00:03:16.355 --> 00:03:18.199
two other additional operators

00:03:18.199 --> 00:03:20.995
which look very different to the previous video.

00:03:20.995 --> 00:03:23.745
This is the increment and decrement.

00:03:23.745 --> 00:03:25.610
The first one, which is the double

00:03:25.610 --> 00:03:27.710
plus this is increment and this will

00:03:27.710 --> 00:03:32.150
increase the original value by 1 or the decrement,

00:03:32.150 --> 00:03:33.994
which is the double subtraction.

00:03:33.994 --> 00:03:36.680
This will decrease the value by 1 each time.

00:03:36.680 --> 00:03:38.915
To see this as an example,

00:03:38.915 --> 00:03:41.780
we need to change this to be let so we can update

00:03:41.780 --> 00:03:44.160
these results and change it to be

00:03:44.160 --> 00:03:47.680
a multiply so the result is going to be 60.

00:03:48.020 --> 00:03:51.920
So 60 is now stored inside of this result.

00:03:51.920 --> 00:03:53.930
If we go down to the next line,

00:03:53.930 --> 00:03:56.240
then we select this result

00:03:56.240 --> 00:03:58.250
and add the double plus afterward,

00:03:58.250 --> 00:04:00.510
which is the increments.

00:04:00.740 --> 00:04:05.445
Refresh. This is now being increased to be 61.

00:04:05.445 --> 00:04:09.160
We could also do this again by copying and pasting,

00:04:09.160 --> 00:04:11.080
and this would now be 62, so it

00:04:11.080 --> 00:04:13.705
increases by 1 for each attempt.

00:04:13.705 --> 00:04:16.765
This operator is useful for many situations.

00:04:16.765 --> 00:04:19.465
For example, in one of our upcoming projects,

00:04:19.465 --> 00:04:21.445
we'll use it multiple times,

00:04:21.445 --> 00:04:24.295
such as each time a new order is placed,

00:04:24.295 --> 00:04:27.440
we increase the order number by1 for each order.

00:04:27.440 --> 00:04:30.640
Also, we have the completed pizzas variable,

00:04:30.640 --> 00:04:32.410
which will increase by 1 each time

00:04:32.410 --> 00:04:34.900
the chef completes one of the pieces.

00:04:34.900 --> 00:04:36.820
We can install all of these numbers and

00:04:36.820 --> 00:04:39.040
display them at the end of the game.

00:04:39.040 --> 00:04:42.100
The opposite is to use two subtract symbols,

00:04:42.100 --> 00:04:44.320
which is going to decrement the number,

00:04:44.320 --> 00:04:45.610
which means it will decrease it by

00:04:45.610 --> 00:04:47.595
the value of 1 each time.

00:04:47.595 --> 00:04:50.250
Remember the original result was 60,

00:04:50.250 --> 00:04:52.845
then we'll reduce it by 2.

00:04:52.845 --> 00:04:56.250
Refresh, and this leaves 58 lowest.

00:04:56.250 --> 00:04:58.179
Below this, we also have the logical operators,

00:04:58.179 --> 00:04:59.620
and as you can see, there's

00:04:59.620 --> 00:05:01.880
only three of these on the screen.

00:05:01.880 --> 00:05:04.480
These logical operators often combined

00:05:04.480 --> 00:05:06.880
with if statements which we'll cover later.

00:05:06.880 --> 00:05:09.745
But they're also useful on their own too.

00:05:09.745 --> 00:05:13.135
If we wanted to check if multiple conditions were true,

00:05:13.135 --> 00:05:15.910
we could use the logical AND operator,

00:05:15.910 --> 00:05:18.010
which is this double ampersand.

00:05:18.010 --> 00:05:19.840
For example, if we wanted to know

00:05:19.840 --> 00:05:22.045
if number 1 was equal to 15,

00:05:22.045 --> 00:05:24.040
and also if number 2 was equal to

00:05:24.040 --> 00:05:26.815
4 before performing any code.

00:05:26.815 --> 00:05:30.865
We could do this by, let's remove this example.

00:05:30.865 --> 00:05:34.065
I'm just going to move this below as well.

00:05:34.065 --> 00:05:36.220
We'll recreate our results.

00:05:36.220 --> 00:05:39.875
Now we can use the logical operators to perform a check.

00:05:39.875 --> 00:05:42.695
We want to check if our number 1 variable

00:05:42.695 --> 00:05:45.400
is going to be equal to 15.

00:05:45.400 --> 00:05:49.220
The triple equals, this is equal type and value.

00:05:49.220 --> 00:05:51.770
Now, this will store a true or false value

00:05:51.770 --> 00:05:53.300
inside of result.

00:05:53.300 --> 00:05:56.015
Like I mentioned before, what if we also wanted to

00:05:56.015 --> 00:05:59.020
check if number 2 was equal to 4.

00:05:59.020 --> 00:06:02.209
Well, the way we could do this is with this AND operator

00:06:02.209 --> 00:06:05.300
we can also perform a second check.

00:06:05.300 --> 00:06:10.205
This time we check if number 2 is equal to 4.

00:06:10.205 --> 00:06:14.090
Let's say this and refresh the browser. This is true.

00:06:14.090 --> 00:06:16.010
Both of these checks,

00:06:16.010 --> 00:06:19.055
this one and also this one is both true.

00:06:19.055 --> 00:06:21.485
This is why we get the result of true.

00:06:21.485 --> 00:06:23.330
It would change any of these to be

00:06:23.330 --> 00:06:26.830
a different value such as number 2.

00:06:26.830 --> 00:06:29.135
Since one of these is now different,

00:06:29.135 --> 00:06:31.460
this would then result in false.

00:06:31.460 --> 00:06:33.650
That's great, but this of course relies on

00:06:33.650 --> 00:06:35.860
both of these conditions to be true.

00:06:35.860 --> 00:06:37.505
But what if I wanted to know if

00:06:37.505 --> 00:06:39.515
only one of these was true?

00:06:39.515 --> 00:06:41.645
For example, if number 1 was equal to

00:06:41.645 --> 00:06:45.335
15 or if number 2 was equal to 4,

00:06:45.335 --> 00:06:47.705
we may want to get a value of true back if

00:06:47.705 --> 00:06:50.870
either one of these is a result of true.

00:06:50.870 --> 00:06:53.210
Well for this we have the OR operator,

00:06:53.210 --> 00:06:55.390
which is these double pipes.

00:06:55.390 --> 00:06:59.465
Let's change the double ampersand for the double pipes.

00:06:59.465 --> 00:07:02.510
Now we know that only one of these values is true.

00:07:02.510 --> 00:07:05.210
We should now see true inside the browser.

00:07:05.210 --> 00:07:07.835
The same if we change this back to before.

00:07:07.835 --> 00:07:09.545
Now we know that both of these

00:07:09.545 --> 00:07:11.000
is going to be equal to true.

00:07:11.000 --> 00:07:12.875
This would also be true since remember,

00:07:12.875 --> 00:07:15.260
we only need one or more of these conditions to be

00:07:15.260 --> 00:07:18.380
true to get the results of true returned.

00:07:18.380 --> 00:07:20.930
Last but not least, we have the exclamation mark,

00:07:20.930 --> 00:07:23.044
which is the NOT operator.

00:07:23.044 --> 00:07:25.400
This basically does the opposite and will return

00:07:25.400 --> 00:07:28.730
a true value into false or vice versa.

00:07:28.730 --> 00:07:30.350
Remember that currently inside

00:07:30.350 --> 00:07:32.665
the browser we are seeing the value of true.

00:07:32.665 --> 00:07:34.905
If you wanted to check the opposite,

00:07:34.905 --> 00:07:36.230
all you need to do is to add

00:07:36.230 --> 00:07:39.710
this exclamation mark before the result and say this,

00:07:39.710 --> 00:07:43.555
this will give us the opposite result, which is false.

00:07:43.555 --> 00:07:45.110
Checking the opposite like this

00:07:45.110 --> 00:07:46.400
may seem a little bit strange,

00:07:46.400 --> 00:07:49.555
but it does have plenty of uses inside of JavaScript.

00:07:49.555 --> 00:07:51.920
For example, in one of our upcoming projects,

00:07:51.920 --> 00:07:54.335
we do have a variable called game started.

00:07:54.335 --> 00:07:56.675
This is a true or false Boolean.

00:07:56.675 --> 00:07:58.280
We can then check if the game has

00:07:58.280 --> 00:08:00.110
started or if the game has not

00:08:00.110 --> 00:08:02.285
started by using the exclamation mark

00:08:02.285 --> 00:08:04.535
before we run any particular code.

00:08:04.535 --> 00:08:07.370
It's also useful for plenty of situations

00:08:07.370 --> 00:08:10.370
too such as checking if no user exists,

00:08:10.370 --> 00:08:11.920
and so many more.

00:08:11.920 --> 00:08:14.540
But reference to all of these operators covered

00:08:14.540 --> 00:08:17.020
in this video and also the previous one too.

00:08:17.020 --> 00:08:19.040
There are slides available with this course.

00:08:19.040 --> 00:08:22.260
Check them out if you need a reference.
