WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.180 --> 00:00:04.350
Inside of these starter files,

00:00:04.350 --> 00:00:06.360
we now have this new functions section,

00:00:06.360 --> 00:00:09.180
which is number 3, and then head into the first lesson,

00:00:09.180 --> 00:00:11.100
which is the global object.

00:00:11.100 --> 00:00:12.600
Open up the Index page.

00:00:12.600 --> 00:00:16.065
Make sure this is also opened up inside of the browser.

00:00:16.065 --> 00:00:17.760
In between the script section,

00:00:17.760 --> 00:00:19.260
we have a similar example

00:00:19.260 --> 00:00:20.730
to what we've looked at in the past.

00:00:20.730 --> 00:00:22.080
We have two different arrays,

00:00:22.080 --> 00:00:24.780
we've got our bread ingredients and the brownies,

00:00:24.780 --> 00:00:26.565
and then this function just below.

00:00:26.565 --> 00:00:28.100
This function will take in

00:00:28.100 --> 00:00:30.470
the recipe and also the ingredients,

00:00:30.470 --> 00:00:32.930
and this will check if this particular ingredient

00:00:32.930 --> 00:00:35.420
is included in that recipe.

00:00:35.420 --> 00:00:38.060
It will then return a true or false value,

00:00:38.060 --> 00:00:41.185
depending on if the ingredient is included.

00:00:41.185 --> 00:00:43.890
As mentioned earlier, this is called a function

00:00:43.890 --> 00:00:47.160
declaration in a console log.

00:00:47.160 --> 00:00:51.330
Just below, we can then call this function by its name,

00:00:51.330 --> 00:00:53.625
which is checkAllergies,

00:00:53.625 --> 00:00:56.220
parse in the recipe, such as bread,

00:00:56.220 --> 00:00:58.350
and then we can check an ingredient,

00:00:58.350 --> 00:01:02.070
such as salt, save and refresh.

00:01:02.070 --> 00:01:04.295
We now get the value of true since

00:01:04.295 --> 00:01:08.120
this ingredient is included inside of this array.

00:01:08.120 --> 00:01:11.900
We know we can call this function by its name because,

00:01:11.900 --> 00:01:15.305
well, we've created it just above in the same file.

00:01:15.305 --> 00:01:17.420
Well, what about if we call this function

00:01:17.420 --> 00:01:19.220
from a different location,

00:01:19.220 --> 00:01:21.980
let's say a different JavaScript file?

00:01:21.980 --> 00:01:25.410
You think that would work? Well, let's take a look.

00:01:25.410 --> 00:01:28.070
We're going to now create a new JavaScript file

00:01:28.070 --> 00:01:30.755
inside of this lesson 1 folder.

00:01:30.755 --> 00:01:34.550
So click on this and then create a new file,

00:01:34.550 --> 00:01:38.370
and then this is going to be called the script with

00:01:38.370 --> 00:01:43.480
the.js extension to declare this is a JavaScript file.

00:01:43.480 --> 00:01:45.950
Make sure this is still inside of

00:01:45.950 --> 00:01:48.335
this folder alongside our Index page,

00:01:48.335 --> 00:01:49.850
and then close down

00:01:49.850 --> 00:01:51.635
the sidebar to give us some more space.

00:01:51.635 --> 00:01:54.335
Inside of our new script.js,

00:01:54.335 --> 00:01:56.725
we're, again, going to do a console log.

00:01:56.725 --> 00:01:58.230
We'll do exactly the same.

00:01:58.230 --> 00:01:59.280
We'll call our function,

00:01:59.280 --> 00:02:01.600
which was checkAllergies,

00:02:01.640 --> 00:02:04.790
and then parse in any two arguments.

00:02:04.790 --> 00:02:06.770
This time let's go for the brownies,

00:02:06.770 --> 00:02:10.220
and we can check if the brownies contains any sugar.

00:02:10.220 --> 00:02:12.380
As discussed earlier, we also

00:02:12.380 --> 00:02:13.910
need to link this script to

00:02:13.910 --> 00:02:17.455
our Index page since this is an external file.

00:02:17.455 --> 00:02:19.200
Therefore, we're creating

00:02:19.200 --> 00:02:21.360
our script inside of the Index page,

00:02:21.360 --> 00:02:23.535
so it's automatically recognized.

00:02:23.535 --> 00:02:25.600
But since we now have a new script file,

00:02:25.600 --> 00:02:28.295
we can create a new script tag,

00:02:28.295 --> 00:02:30.530
and then we need to place in the source,

00:02:30.530 --> 00:02:33.035
which is the location of our new file.

00:02:33.035 --> 00:02:36.140
Since this new file is alongside of our Index page,

00:02:36.140 --> 00:02:38.060
all we need to do is to add its name,

00:02:38.060 --> 00:02:40.495
which was script.js.

00:02:40.495 --> 00:02:43.750
So effectively, this is the same as just above.

00:02:43.750 --> 00:02:45.170
All we're doing here is pulling

00:02:45.170 --> 00:02:46.925
in the code from an external file,

00:02:46.925 --> 00:02:49.675
rather than adding it between these script tags.

00:02:49.675 --> 00:02:52.920
Now we have our console log still in place just here,

00:02:52.920 --> 00:02:54.770
and then we also have a console log

00:02:54.770 --> 00:02:57.215
called from this separate file.

00:02:57.215 --> 00:03:00.320
Let's go over to the browser and see which one will work.

00:03:00.320 --> 00:03:04.520
Refresh. We now see our two console logs.

00:03:04.520 --> 00:03:06.770
We see over on the right that one of them is from

00:03:06.770 --> 00:03:10.795
the Index page and one of them is from our script.js,

00:03:10.795 --> 00:03:12.775
so both of these are working,

00:03:12.775 --> 00:03:16.045
and they are both from two separate file locations.

00:03:16.045 --> 00:03:18.270
Well, this now leads us on to the question,

00:03:18.270 --> 00:03:19.860
if we go to our script file.

00:03:19.860 --> 00:03:21.465
Here we're doing a console log,

00:03:21.465 --> 00:03:24.250
and we are accessing a checkAllergies function,

00:03:24.250 --> 00:03:25.880
which doesn't exist inside of

00:03:25.880 --> 00:03:28.510
this file. Why does this work?

00:03:28.510 --> 00:03:30.450
Well, when we create a function,

00:03:30.450 --> 00:03:31.800
just like we've done here,

00:03:31.800 --> 00:03:35.510
it becomes part of what is called the global object.

00:03:35.510 --> 00:03:39.140
We've talked a lot about objects and object types,

00:03:39.140 --> 00:03:42.120
but the global object is the big one.

00:03:42.130 --> 00:03:45.470
The global object is the main object where

00:03:45.470 --> 00:03:47.300
globally available properties and

00:03:47.300 --> 00:03:49.915
functions are all accessible from.

00:03:49.915 --> 00:03:51.805
This may sound complex,

00:03:51.805 --> 00:03:53.045
but you can think of it as

00:03:53.045 --> 00:03:54.980
the main object which is created,

00:03:54.980 --> 00:03:56.480
and then we can access parts

00:03:56.480 --> 00:03:58.525
of it from anywhere in our code.

00:03:58.525 --> 00:04:01.150
JavaScript works inside the browser,

00:04:01.150 --> 00:04:04.760
and we can access this global object using the window.

00:04:04.760 --> 00:04:08.255
You may have also heard of something called Node.js,

00:04:08.255 --> 00:04:11.170
which is a way to run JavaScript on the server.

00:04:11.170 --> 00:04:13.590
Since Node.js is running on the server,

00:04:13.590 --> 00:04:15.055
rather than in the browser,

00:04:15.055 --> 00:04:17.705
it doesn't have access to this browser window.

00:04:17.705 --> 00:04:19.745
Instead, we access the global object

00:04:19.745 --> 00:04:21.980
using the global keyword instead.

00:04:21.980 --> 00:04:23.180
But you don't need to worry about

00:04:23.180 --> 00:04:24.380
this if you've not heard of

00:04:24.380 --> 00:04:27.180
Node.js. So you see this window.

00:04:27.180 --> 00:04:31.280
Let's head back over to the console into the browser.

00:04:31.280 --> 00:04:34.520
What we're going to do is to type the word window,

00:04:34.520 --> 00:04:36.710
hit ''Enter'', and

00:04:36.710 --> 00:04:38.450
then we can see all of this information,

00:04:38.450 --> 00:04:40.525
which returned back to us below.

00:04:40.525 --> 00:04:42.780
Since window is a global object,

00:04:42.780 --> 00:04:44.550
it contains all of these properties,

00:04:44.550 --> 00:04:45.870
which we can see here.

00:04:45.870 --> 00:04:47.745
Some are functions we can use.

00:04:47.745 --> 00:04:51.130
There is also properties on objects inside too.

00:04:51.130 --> 00:04:55.130
This is a list of things we have global access to.

00:04:55.130 --> 00:04:57.095
Some of these we've already seen.

00:04:57.095 --> 00:04:59.340
For example, I'm going to press "Command" and

00:04:59.340 --> 00:05:02.255
"F" to find a particular thing inside of here.

00:05:02.255 --> 00:05:03.920
If you're using Windows, this will be more than

00:05:03.920 --> 00:05:06.335
likely to be Control and F2.

00:05:06.335 --> 00:05:08.690
First of all, if we search for the console,

00:05:08.690 --> 00:05:10.735
we can see this highlighted inside of here.

00:05:10.735 --> 00:05:12.330
We can open this up.

00:05:12.330 --> 00:05:14.030
This is a console object,

00:05:14.030 --> 00:05:15.430
which we've already looked at.

00:05:15.430 --> 00:05:18.380
If we open this up and take a look just below this,

00:05:18.380 --> 00:05:19.940
we can see we have access to

00:05:19.940 --> 00:05:23.075
the log function and also the table function,

00:05:23.075 --> 00:05:25.075
which we've used in the past.

00:05:25.075 --> 00:05:26.915
This is why we have access to them

00:05:26.915 --> 00:05:28.360
in our multiple files,

00:05:28.360 --> 00:05:31.255
because these are placed on the global object.

00:05:31.255 --> 00:05:34.010
If we wanted to, we can also refer to

00:05:34.010 --> 00:05:37.085
the window object when calling these properties.

00:05:37.085 --> 00:05:40.055
For example, we could write window.console log,

00:05:40.055 --> 00:05:42.110
and this works exactly the same too

00:05:42.110 --> 00:05:44.865
, so window.console log.

00:05:44.865 --> 00:05:47.190
Save this and refresh.

00:05:47.190 --> 00:05:50.845
Our console logs will still work exactly the same.

00:05:50.845 --> 00:05:52.900
Let's remove this and, once again,

00:05:52.900 --> 00:05:56.990
we'll enter our window object inside of the console.

00:05:56.990 --> 00:05:59.460
If I expand this, we can also see

00:05:59.460 --> 00:06:03.135
our custom function here, which is checkAllergies.

00:06:03.135 --> 00:06:05.335
This is here because as soon as we created

00:06:05.335 --> 00:06:08.005
our checkAllergies function inside of our code,

00:06:08.005 --> 00:06:10.690
it was then added to this global object,

00:06:10.690 --> 00:06:12.220
and this is why we can access

00:06:12.220 --> 00:06:14.585
this inside of a different file.

00:06:14.585 --> 00:06:17.305
Also, any variables which we create using

00:06:17.305 --> 00:06:18.760
the var keyword are

00:06:18.760 --> 00:06:21.190
also placed on the global object too,

00:06:21.190 --> 00:06:23.110
but not any variables we create

00:06:23.110 --> 00:06:25.060
with the const or let keywords.

00:06:25.060 --> 00:06:26.975
But more on this one later.

00:06:26.975 --> 00:06:28.610
Of course, this is a function

00:06:28.610 --> 00:06:29.750
which we created ourselves,

00:06:29.750 --> 00:06:31.175
but JavaScript also has

00:06:31.175 --> 00:06:34.220
many functions which we first don't need to create.

00:06:34.220 --> 00:06:37.435
These are automatically built into the language.

00:06:37.435 --> 00:06:39.020
These can be referred to as

00:06:39.020 --> 00:06:41.810
built-in functions or global functions since

00:06:41.810 --> 00:06:43.640
they are available to call anywhere in

00:06:43.640 --> 00:06:46.655
our program from this global object.

00:06:46.655 --> 00:06:49.385
An example of this, if we go down to the search,

00:06:49.385 --> 00:06:52.120
is a function called parseInt.

00:06:52.120 --> 00:06:54.060
We can see this included here,

00:06:54.060 --> 00:06:55.180
and we can see by this f,

00:06:55.180 --> 00:06:57.110
that this is a function.

00:06:57.110 --> 00:06:59.695
We can use this, if we go over to the code.

00:06:59.695 --> 00:07:01.140
Just quickly before we do this,

00:07:01.140 --> 00:07:02.970
we'll remove this script.js,

00:07:02.970 --> 00:07:04.295
remove the script link,

00:07:04.295 --> 00:07:07.800
and we can also remove this file from here too.

00:07:09.590 --> 00:07:11.970
Now back to our Index page,

00:07:11.970 --> 00:07:14.190
we'll take a look at this parseInt function.

00:07:14.190 --> 00:07:16.430
The way this function works is it will take in

00:07:16.430 --> 00:07:19.280
a string and then it will convert this to be an integer,

00:07:19.280 --> 00:07:21.130
which is a whole number,

00:07:21.130 --> 00:07:23.540
so to see this go down to our console log,

00:07:23.540 --> 00:07:25.595
and we can call parseInt.

00:07:25.595 --> 00:07:26.990
This is also camel case,

00:07:26.990 --> 00:07:28.850
so this has a capital I.

00:07:28.850 --> 00:07:31.400
Open up the function brackets.

00:07:31.400 --> 00:07:34.840
Then as a string, we'll add in the number of 10.

00:07:34.840 --> 00:07:37.590
Save this, and over to the browser,

00:07:37.590 --> 00:07:40.875
refresh and we now see the number of 10.

00:07:40.875 --> 00:07:43.280
Rather than take my word for it that this

00:07:43.280 --> 00:07:45.425
is a number, rather than still a string,

00:07:45.425 --> 00:07:47.150
what we can do is we can cut this

00:07:47.150 --> 00:07:50.005
out with Command or Control-X,

00:07:50.005 --> 00:07:52.745
install this inside of a variable

00:07:52.745 --> 00:07:55.670
called Int, paste this in.

00:07:55.670 --> 00:07:58.040
Then this time we'll do a console log for

00:07:58.040 --> 00:08:01.260
the typeof our Int

00:08:01.260 --> 00:08:04.170
to see what type of data we are holding.

00:08:04.170 --> 00:08:07.070
Refresh, and we can now see that this has been

00:08:07.070 --> 00:08:10.860
converted from a string to a number.

00:08:11.000 --> 00:08:14.850
Since parseInt converts a string to be an integer,

00:08:14.850 --> 00:08:16.135
which is a whole number,

00:08:16.135 --> 00:08:19.880
it won't include any numbers after a decimal place.

00:08:19.880 --> 00:08:21.830
So if this was, say,

00:08:21.830 --> 00:08:26.430
10.09 and I remove the typeof,

00:08:26.430 --> 00:08:28.800
this will then be converted to a

00:08:28.800 --> 00:08:30.840
rounded or a whole number.

00:08:30.840 --> 00:08:32.600
We can also flip this and do

00:08:32.600 --> 00:08:34.985
the opposite with a string function,

00:08:34.985 --> 00:08:38.650
so this time we'll call this a number,

00:08:38.650 --> 00:08:42.215
and instead of having a string just like this,

00:08:42.215 --> 00:08:43.940
we'll place in a number,

00:08:43.940 --> 00:08:45.800
and we'll convert the number this time to be

00:08:45.800 --> 00:08:49.495
a string using the string function.

00:08:49.495 --> 00:08:54.240
We'll, again, log our variable of number.

00:08:54.240 --> 00:08:57.065
We'll see the value inside the console or five.

00:08:57.065 --> 00:08:58.460
But once again, we can do

00:08:58.460 --> 00:09:00.770
a typeof check to check that this has been

00:09:00.770 --> 00:09:05.115
converted to a string. There we go.

00:09:05.115 --> 00:09:08.055
As you can see, JavaScript is really flexible.

00:09:08.055 --> 00:09:10.250
We can either create our own functions

00:09:10.250 --> 00:09:12.350
or access some built-in mounts,

00:09:12.350 --> 00:09:14.495
which is provided with the language.

00:09:14.495 --> 00:09:16.745
We can then access these built-in mounts

00:09:16.745 --> 00:09:18.665
on the global object.

00:09:18.665 --> 00:09:19.530
As we've seen,

00:09:19.530 --> 00:09:21.510
when we accessed the window object before,

00:09:21.510 --> 00:09:24.295
there is lots more other functions available too.

00:09:24.295 --> 00:09:25.640
I'm not going to go through all of

00:09:25.640 --> 00:09:27.070
them since there is quite a lot

00:09:27.070 --> 00:09:29.780
and there are also some pretty specialist ones too.

00:09:29.780 --> 00:09:31.740
But we will use many more

00:09:31.740 --> 00:09:33.860
of these globally available functions,

00:09:33.860 --> 00:09:35.960
properties, and objects as we move

00:09:35.960 --> 00:09:39.090
through the rest of the upcoming sections.
