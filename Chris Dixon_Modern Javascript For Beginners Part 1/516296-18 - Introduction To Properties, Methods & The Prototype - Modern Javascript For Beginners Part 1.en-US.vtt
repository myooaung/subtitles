WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.670 --> 00:00:05.910
I've mentioned so far various words such as object type,

00:00:05.910 --> 00:00:07.770
properties, and methods.

00:00:07.770 --> 00:00:10.680
It's useful to have at least a basic understanding

00:00:10.680 --> 00:00:13.275
as to where all of these are coming from.

00:00:13.275 --> 00:00:15.825
Jumping to our starter files which is

00:00:15.825 --> 00:00:18.510
lesson number 2 of this section which is properties,

00:00:18.510 --> 00:00:20.820
methods, and the prototype.

00:00:20.820 --> 00:00:22.230
Inside of our script, you will

00:00:22.230 --> 00:00:24.315
see three separate arrays.

00:00:24.315 --> 00:00:25.770
I have the margherita,

00:00:25.770 --> 00:00:29.610
the vegetarian, and also the pepperoni pizza array.

00:00:29.610 --> 00:00:31.665
So far, we've briefly looked at

00:00:31.665 --> 00:00:34.025
some examples of what we can do with arrays.

00:00:34.025 --> 00:00:37.110
These are how we can access properties and methods.

00:00:37.110 --> 00:00:39.420
The properties or the only property we've

00:00:39.420 --> 00:00:42.240
actually looked at so far is the length.

00:00:42.240 --> 00:00:45.000
Properties, we've looked at things

00:00:45.000 --> 00:00:47.465
such as the length which will access the array,

00:00:47.465 --> 00:00:49.895
and then chain on the end about length.

00:00:49.895 --> 00:00:51.860
This will give us the length of the array,

00:00:51.860 --> 00:00:54.230
so here we'll have three different items.

00:00:54.230 --> 00:00:56.665
Also we've looked at methods too.

00:00:56.665 --> 00:00:58.850
The methods which we've looked at so far is

00:00:58.850 --> 00:01:02.510
the push method and also splice.

00:01:02.510 --> 00:01:05.600
Again, these are also chained onto the end of an array,

00:01:05.600 --> 00:01:09.215
so this will be margherita.push or margherita.splice,

00:01:09.215 --> 00:01:12.845
and then we pass in certain values into these brackets.

00:01:12.845 --> 00:01:14.390
We've at looked at methods and

00:01:14.390 --> 00:01:15.470
we've looked at properties,

00:01:15.470 --> 00:01:16.640
but what exactly is

00:01:16.640 --> 00:01:19.455
the difference and where do these both come from?

00:01:19.455 --> 00:01:20.960
First, we'll take a look at where

00:01:20.960 --> 00:01:22.570
these actually come from.

00:01:22.570 --> 00:01:24.575
If we think about this, we already have

00:01:24.575 --> 00:01:27.020
three arrays inside of our script here,

00:01:27.020 --> 00:01:28.235
but we could have hundreds or

00:01:28.235 --> 00:01:30.725
even thousands on a larger program.

00:01:30.725 --> 00:01:33.470
Each one of these arrays also has access to all of

00:01:33.470 --> 00:01:35.060
our methods and also

00:01:35.060 --> 00:01:37.585
all of the other methods available too.

00:01:37.585 --> 00:01:40.110
This array could use the push.

00:01:40.110 --> 00:01:41.645
This array could also use push,

00:01:41.645 --> 00:01:43.730
and so could this one too.

00:01:43.730 --> 00:01:45.770
What if each and every array which we

00:01:45.770 --> 00:01:49.250
created also carried around the weight of these methods,

00:01:49.250 --> 00:01:51.110
it's a lot of extra code or

00:01:51.110 --> 00:01:54.025
information to attach to each array.

00:01:54.025 --> 00:01:56.000
It would make sense to be able to create

00:01:56.000 --> 00:01:57.980
multiple arrays like we've just done here.

00:01:57.980 --> 00:01:59.960
We'll have all of these extra things

00:01:59.960 --> 00:02:01.730
such as the methods in

00:02:01.730 --> 00:02:04.040
one central location to access whenever we

00:02:04.040 --> 00:02:05.630
needed rather than having them

00:02:05.630 --> 00:02:07.835
attached to each one of these arrays.

00:02:07.835 --> 00:02:09.710
Well, this is actually what happens

00:02:09.710 --> 00:02:12.030
with object types in JavaScript.

00:02:12.030 --> 00:02:15.095
JavaScript has a concept called prototypes,

00:02:15.095 --> 00:02:17.300
and this is a way for each object to

00:02:17.300 --> 00:02:19.925
inherit the features from another one.

00:02:19.925 --> 00:02:21.470
Let's take a look at something in

00:02:21.470 --> 00:02:24.305
the console by doing a console log,

00:02:24.305 --> 00:02:27.695
and then pass in the value of array.

00:02:27.695 --> 00:02:30.350
This array with a capital A is just like

00:02:30.350 --> 00:02:33.170
the array constructor we looked at in the previous video.

00:02:33.170 --> 00:02:36.020
It's like a template for any other arrays which we

00:02:36.020 --> 00:02:38.880
create such as this pepperoni just here.

00:02:38.880 --> 00:02:42.865
This will inherit any of the methods which live on this.

00:02:42.865 --> 00:02:45.020
Do you see these? We can log to

00:02:45.020 --> 00:02:47.690
the console, the prototype,

00:02:47.690 --> 00:02:49.340
and let's head over to the console to see

00:02:49.340 --> 00:02:51.440
the value of this prototype,

00:02:51.440 --> 00:02:54.370
refresh and open this up.

00:02:54.370 --> 00:02:58.040
A lot of this may look unfamiliar at this stage,

00:02:58.040 --> 00:03:00.425
but two things to point out here is we can see

00:03:00.425 --> 00:03:03.510
push and we can also see splice.

00:03:03.510 --> 00:03:05.990
Remember these are two things which you've already seen

00:03:05.990 --> 00:03:08.675
before when we looked at previous methods.

00:03:08.675 --> 00:03:10.700
This is how our new arrays have

00:03:10.700 --> 00:03:12.880
access to all of this information,

00:03:12.880 --> 00:03:16.015
its prototype which we've just looked at the console,

00:03:16.015 --> 00:03:19.190
is a property which points to another object,

00:03:19.190 --> 00:03:21.530
in our case, the parent object,

00:03:21.530 --> 00:03:24.575
and therefore inheriting all of its methods.

00:03:24.575 --> 00:03:28.230
We can also see this with things like an object too.

00:03:28.230 --> 00:03:30.780
Object with capital O if we save and

00:03:30.780 --> 00:03:33.635
refresh, open this up,

00:03:33.635 --> 00:03:36.440
this time we head into the constructor and this

00:03:36.440 --> 00:03:38.000
contains a list of all the methods

00:03:38.000 --> 00:03:39.590
which is available for this object.

00:03:39.590 --> 00:03:43.135
We'll take a look at these in the object section later.

00:03:43.135 --> 00:03:44.510
Just to recap when we create

00:03:44.510 --> 00:03:47.570
a new object or a new array, which we have done here,

00:03:47.570 --> 00:03:49.670
these new arrays will automatically

00:03:49.670 --> 00:03:51.005
get the prototype property

00:03:51.005 --> 00:03:52.730
added which will allow us to

00:03:52.730 --> 00:03:55.115
access methods from another object.

00:03:55.115 --> 00:03:57.230
In our case, these are all inherited from

00:03:57.230 --> 00:04:00.050
the parent array constructor and this is why we

00:04:00.050 --> 00:04:02.330
couldn't use certain methods on each one of

00:04:02.330 --> 00:04:05.870
these new arrays such as the push and splice,

00:04:05.870 --> 00:04:07.685
and as well as these inherited

00:04:07.685 --> 00:04:09.110
methods which is available,

00:04:09.110 --> 00:04:12.280
we can also create our own customer wants too.

00:04:12.280 --> 00:04:14.360
Now if we log one of our own copies

00:04:14.360 --> 00:04:15.770
of this constructor, in our case,

00:04:15.770 --> 00:04:22.460
pepperoni, over to the console and refresh. Open this up.

00:04:22.460 --> 00:04:25.460
At the bottom we see this proto, and if we open this up,

00:04:25.460 --> 00:04:27.020
this isn't linked to all of

00:04:27.020 --> 00:04:29.575
the available methods for this array.

00:04:29.575 --> 00:04:33.110
This is how this copy of this array gives us access

00:04:33.110 --> 00:04:34.730
to things like push and

00:04:34.730 --> 00:04:36.905
splice, which we've just looked at.

00:04:36.905 --> 00:04:39.230
If we close down this proto section,

00:04:39.230 --> 00:04:42.235
we've see alongside we have this length property.

00:04:42.235 --> 00:04:45.880
This length is not included inside of the prototype.

00:04:45.880 --> 00:04:49.595
Here lies the difference between a method and a property.

00:04:49.595 --> 00:04:51.320
Since any of the methods can be

00:04:51.320 --> 00:04:53.165
used on any of our arrays,

00:04:53.165 --> 00:04:55.870
they can be shared via this prototype.

00:04:55.870 --> 00:04:57.890
This length property, however,

00:04:57.890 --> 00:05:00.755
is specific to this one single array

00:05:00.755 --> 00:05:03.340
since each array can have a different length.

00:05:03.340 --> 00:05:05.390
It makes sense to not share this on

00:05:05.390 --> 00:05:07.070
the prototype and just have this

00:05:07.070 --> 00:05:09.560
available on each individual array.

00:05:09.560 --> 00:05:12.920
We'll go deeper into this later on but at least for now,

00:05:12.920 --> 00:05:15.740
you have an idea of where these methods are coming from

00:05:15.740 --> 00:05:17.150
and we'll discover lots more of

00:05:17.150 --> 00:05:20.100
these methods in the upcoming videos.
