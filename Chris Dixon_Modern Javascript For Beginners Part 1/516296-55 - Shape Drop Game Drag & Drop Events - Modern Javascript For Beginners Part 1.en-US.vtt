WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.300 --> 00:00:05.175
As you would expect, just placing in

00:00:05.175 --> 00:00:07.815
regular HTML elements like we have here.

00:00:07.815 --> 00:00:09.450
When we try to click and drag

00:00:09.450 --> 00:00:11.845
any of those shapes, nothing happens.

00:00:11.845 --> 00:00:13.650
Make these shapes draggable,

00:00:13.650 --> 00:00:16.020
the first step is to add a attribute called

00:00:16.020 --> 00:00:19.000
draggable and set these to be equal to true.

00:00:19.000 --> 00:00:21.930
Because we all know the bottom sections be draggable,

00:00:21.930 --> 00:00:23.820
add into the drag section,

00:00:23.820 --> 00:00:26.685
and then jump into our first shape.

00:00:26.685 --> 00:00:30.630
Set draggable to be equal to a value true.

00:00:30.630 --> 00:00:32.850
Now if we try to refresh

00:00:32.850 --> 00:00:34.725
and click on any of these elements,

00:00:34.725 --> 00:00:37.245
we can now drag these around the page.

00:00:37.245 --> 00:00:39.140
We still need to setup things like

00:00:39.140 --> 00:00:41.615
the drop zone to allow these drop into place.

00:00:41.615 --> 00:00:44.960
But for now, this is our first step we need to take.

00:00:44.960 --> 00:00:46.670
Copy this and paste this into

00:00:46.670 --> 00:00:49.830
each one of our additional shapes.

00:00:54.650 --> 00:01:00.110
I'm to try this out. Good. We can now move them all,

00:01:00.110 --> 00:01:02.510
but we can't really do much with them just yet.

00:01:02.510 --> 00:01:04.850
This is because we need a setup exactly

00:01:04.850 --> 00:01:07.160
what we want to do at each stage.

00:01:07.160 --> 00:01:09.020
The drag and drop API has

00:01:09.020 --> 00:01:11.020
various events which we can listen out for.

00:01:11.020 --> 00:01:14.210
This is what we looked at initially in the first video.

00:01:14.210 --> 00:01:17.390
We can make use of these inside of our scripts,

00:01:17.390 --> 00:01:19.610
to jump into our scripts.js,

00:01:19.610 --> 00:01:21.575
which should be an empty file.

00:01:21.575 --> 00:01:23.620
Then at the very top, what

00:01:23.620 --> 00:01:24.955
we're going to do first is to crop

00:01:24.955 --> 00:01:28.165
all of our buttons with the class of drop.

00:01:28.165 --> 00:01:30.070
In the index page, all of

00:01:30.070 --> 00:01:32.690
the top sections have this class drop.

00:01:32.690 --> 00:01:34.710
We can use query select all

00:01:34.710 --> 00:01:36.435
to crop all of these elements,

00:01:36.435 --> 00:01:38.310
and then we can loop over these elements,

00:01:38.310 --> 00:01:39.850
and listen out for any element

00:01:39.850 --> 00:01:41.815
be dropped on the sections.

00:01:41.815 --> 00:01:48.600
Document.querySelectorAll as in the class of drop,

00:01:48.600 --> 00:01:50.110
and then we can store this inside of

00:01:50.110 --> 00:01:53.210
a constant called dropzones.

00:01:54.110 --> 00:01:57.730
Good, now we have access to all of these dropzones.

00:01:57.730 --> 00:01:58.930
We need to then loop over

00:01:58.930 --> 00:02:00.280
these and add an event listener,

00:02:00.280 --> 00:02:02.290
to listen out for a drop.

00:02:02.290 --> 00:02:05.545
Grab, all dropzones constant,

00:02:05.545 --> 00:02:08.035
loop over wait for each,

00:02:08.035 --> 00:02:10.610
is going to run function.

00:02:11.450 --> 00:02:14.995
Then each one of these shapes will pass to our function.

00:02:14.995 --> 00:02:19.170
Let's call these the element, drop the elements,

00:02:19.170 --> 00:02:21.270
so each individual 1,

00:02:21.270 --> 00:02:23.150
we can add an event listener,

00:02:23.150 --> 00:02:26.020
which it comes to this now, for the drop event.

00:02:26.020 --> 00:02:27.710
This drop events is

00:02:27.710 --> 00:02:29.870
enabled because of the drag and drop API.

00:02:29.870 --> 00:02:31.880
This is what we see here where an item is

00:02:31.880 --> 00:02:34.730
dropped on the valid drop target.

00:02:34.730 --> 00:02:36.740
Separated by a communist,

00:02:36.740 --> 00:02:40.320
is going to trigger a function called handleDrop.

00:02:41.990 --> 00:02:51.225
For each function just above, it will drop.

00:02:51.225 --> 00:02:52.540
Then all we do for now is

00:02:52.540 --> 00:02:54.250
placed in a simple console log,

00:02:54.250 --> 00:02:56.410
at least now this is working.

00:02:56.410 --> 00:02:58.895
The text of dropped, so

00:02:58.895 --> 00:03:00.970
this is the drop event now taken care of.

00:03:00.970 --> 00:03:02.710
The next thing we need to do is listen

00:03:02.710 --> 00:03:04.915
out for the drag event again.

00:03:04.915 --> 00:03:06.850
We can do this with an event called drag

00:03:06.850 --> 00:03:09.730
starts and back into the drag events section.

00:03:09.730 --> 00:03:12.035
This is one which we needed just here.

00:03:12.035 --> 00:03:14.670
This event is fired as soon as the user begins to

00:03:14.670 --> 00:03:17.800
drag in any one of our draggable items.

00:03:17.800 --> 00:03:19.975
What we're going to do is to access

00:03:19.975 --> 00:03:21.910
our full document and add

00:03:21.910 --> 00:03:23.290
an event listener to listen out for

00:03:23.290 --> 00:03:26.825
the drag start event on any one of our elements.

00:03:26.825 --> 00:03:29.300
Place in drag starts,

00:03:29.300 --> 00:03:31.180
which is then going to run

00:03:31.180 --> 00:03:34.490
a function called handleDragStart.

00:03:34.490 --> 00:03:42.540
To create this just above, handleDragStarts.

00:03:42.540 --> 00:03:45.250
For now we'll just place in a console log once again,

00:03:45.250 --> 00:03:47.125
check this is all working.

00:03:47.125 --> 00:03:50.345
Drag starts, and

00:03:50.345 --> 00:03:53.470
then we'll copy and paste this section we just created,

00:03:53.470 --> 00:03:55.405
and add this in just below.

00:03:55.405 --> 00:03:57.670
The only difference is going to replace

00:03:57.670 --> 00:04:00.500
drag start with drag end,

00:04:01.470 --> 00:04:04.240
the same for the console log and

00:04:04.240 --> 00:04:08.600
also the event name and function.

00:04:11.780 --> 00:04:14.830
This now in place, we can now test this out,

00:04:14.830 --> 00:04:15.955
make sure your file is saved

00:04:15.955 --> 00:04:17.470
and then it reload the browser,

00:04:17.470 --> 00:04:22.240
drop into the console, and now we can try this out.

00:04:22.240 --> 00:04:24.550
If we click on any of our draggable elements,

00:04:24.550 --> 00:04:25.750
we can move these and we see

00:04:25.750 --> 00:04:28.300
the drag start event has fired.

00:04:28.300 --> 00:04:31.120
Drop this over one of our elements.

00:04:31.120 --> 00:04:33.625
We see the end of the drag has also fired.

00:04:33.625 --> 00:04:35.110
But one thing we have missing is

00:04:35.110 --> 00:04:36.970
this console log or dropped.

00:04:36.970 --> 00:04:38.680
What we would expect these when we

00:04:38.680 --> 00:04:40.360
go over one of our drop zones,

00:04:40.360 --> 00:04:42.025
which is one of these top shapes,

00:04:42.025 --> 00:04:44.620
and we're dropping elements anywhere inside of these.

00:04:44.620 --> 00:04:47.435
We would expect this console log to be fired.

00:04:47.435 --> 00:04:49.180
The reason why we can not drop is

00:04:49.180 --> 00:04:51.100
because the default behavior is to

00:04:51.100 --> 00:04:52.660
not allow things to be dropped into

00:04:52.660 --> 00:04:54.820
any webpage by default.

00:04:54.820 --> 00:04:56.965
We need to prevent this default behavior

00:04:56.965 --> 00:04:58.495
on our dropzones.

00:04:58.495 --> 00:05:00.450
We can do this by listen out for

00:05:00.450 --> 00:05:02.255
an event called dragover,

00:05:02.255 --> 00:05:03.550
and this means we're dragging

00:05:03.550 --> 00:05:05.590
an element into a certain zone,

00:05:05.590 --> 00:05:07.225
where we want it to be dropped.

00:05:07.225 --> 00:05:10.180
At the very bottom, will again loop over

00:05:10.180 --> 00:05:12.505
all our dropzones and then do a for

00:05:12.505 --> 00:05:16.070
each loop to access our dropzones.

00:05:16.070 --> 00:05:18.430
For each, which is each one of

00:05:18.430 --> 00:05:21.980
our empty shapes. Run a function.

00:05:23.990 --> 00:05:26.260
This function will take a value

00:05:26.260 --> 00:05:28.670
for each one of our shapes.

00:05:29.150 --> 00:05:32.935
We can access value and then add an event listener.

00:05:32.935 --> 00:05:35.110
This event listener is going to list now for

00:05:35.110 --> 00:05:38.045
an event called dragover.

00:05:38.045 --> 00:05:40.515
This is the event just here,

00:05:40.515 --> 00:05:43.045
and it's called every time a dragged item

00:05:43.045 --> 00:05:45.950
is moved over a valid drop targets.

00:05:45.950 --> 00:05:49.315
Basically want to remove all items over this top section.

00:05:49.315 --> 00:05:53.480
It's going to fire this event called dragover,

00:05:53.690 --> 00:05:58.785
separated by comma Great function called allowDrop,

00:05:58.785 --> 00:06:02.050
which we can then create just above.

00:06:05.810 --> 00:06:09.115
Now when we click on any one of these elements,

00:06:09.115 --> 00:06:12.070
in our version and drag them over any one of

00:06:12.070 --> 00:06:13.780
these dropszones with anyone

00:06:13.780 --> 00:06:16.015
to access the event information,

00:06:16.015 --> 00:06:19.160
and then we can call prevent default.

00:06:20.340 --> 00:06:23.020
Remember the default behavior was

00:06:23.020 --> 00:06:25.000
to not allow this to be dropped.

00:06:25.000 --> 00:06:26.830
We're now overriding is to allow

00:06:26.830 --> 00:06:30.160
all function about the top to now be called.

00:06:30.160 --> 00:06:33.980
Let's give this a try, save and refresh.

00:06:33.980 --> 00:06:38.100
Drag any of these, and then drop them onto a target.

00:06:38.100 --> 00:06:40.085
We now see the text of dropped,

00:06:40.085 --> 00:06:42.985
and our function is now working correctly.

00:06:42.985 --> 00:06:45.625
Good. Now we know this function is working and

00:06:45.625 --> 00:06:48.220
all the rest of the ones are also firing too.

00:06:48.220 --> 00:06:49.480
We can now begin to make

00:06:49.480 --> 00:06:51.560
things happen inside of our game.

00:06:51.560 --> 00:06:53.860
What we want to do is to only allow

00:06:53.860 --> 00:06:57.685
a certain shape to be dropped onto a certain dropzone.

00:06:57.685 --> 00:07:00.520
For example, we only want the rectangle to be dropped on

00:07:00.520 --> 00:07:03.910
the rectangle and a circle to be dropped on the circle,

00:07:03.910 --> 00:07:06.385
inside of our index.html.

00:07:06.385 --> 00:07:07.660
One way of doing this is to

00:07:07.660 --> 00:07:09.610
match the particular classes,

00:07:09.610 --> 00:07:12.085
so if we drag the class of rectangle,

00:07:12.085 --> 00:07:13.630
we only want this to be dropped on

00:07:13.630 --> 00:07:16.400
the rectangle class in the dropzone.

00:07:16.400 --> 00:07:19.930
To make this happen over in our handle drop function,

00:07:19.930 --> 00:07:21.205
what we need to do is to have

00:07:21.205 --> 00:07:23.150
access to both of our elements.

00:07:23.150 --> 00:07:24.610
We need to have access to

00:07:24.610 --> 00:07:26.440
the element which has been dragged,

00:07:26.440 --> 00:07:28.975
and also the elements which we are dropping over.

00:07:28.975 --> 00:07:31.765
We can then compare the both of the classes are the same.

00:07:31.765 --> 00:07:33.515
Before we allow this drop,

00:07:33.515 --> 00:07:35.620
we can do this inside of our function by

00:07:35.620 --> 00:07:37.900
accessing the events information,

00:07:37.900 --> 00:07:39.340
and this will give us access to

00:07:39.340 --> 00:07:41.510
all elements with e.target.

00:07:41.730 --> 00:07:45.305
We can then access our class list.

00:07:45.305 --> 00:07:48.420
Let's check this out over in the browser.

00:07:48.420 --> 00:07:51.760
Refresh, drag the rectangle

00:07:51.760 --> 00:07:54.610
and drop this over any one of our elements.

00:07:54.610 --> 00:07:57.760
We've dropped this over the square in top-left,

00:07:57.760 --> 00:07:59.440
and we'll get back a class list which

00:07:59.440 --> 00:08:01.570
includes drop and also square.

00:08:01.570 --> 00:08:03.220
This is exactly the

00:08:03.220 --> 00:08:06.265
same as what we see inside of our HTML.

00:08:06.265 --> 00:08:09.760
Let's try one more. We tried the rectangle,

00:08:09.760 --> 00:08:12.385
and this one also works too.

00:08:12.385 --> 00:08:14.500
This is how we can access

00:08:14.500 --> 00:08:16.555
the classes for the dropped elements.

00:08:16.555 --> 00:08:18.340
Well, how do we go about accessing

00:08:18.340 --> 00:08:20.800
the classes for the dragged elements?

00:08:20.800 --> 00:08:23.110
Well, a nice way of doing this is by store

00:08:23.110 --> 00:08:26.530
this inside a variable at the top of our page.

00:08:26.530 --> 00:08:28.525
Just above our dropzones,

00:08:28.525 --> 00:08:32.240
we say let selected.

00:08:32.480 --> 00:08:35.140
We can update this value inside of

00:08:35.140 --> 00:08:37.485
the function called handle drag start.

00:08:37.485 --> 00:08:40.615
Remember, this is fired as soon as we begin to click on

00:08:40.615 --> 00:08:41.800
any one of our elements at

00:08:41.800 --> 00:08:44.415
the bottom to begin the drag process,

00:08:44.415 --> 00:08:48.070
and to do this, we need to access the event information.

00:08:48.070 --> 00:08:50.245
We can remove the console log,

00:08:50.245 --> 00:08:52.510
and then update our selective variable

00:08:52.510 --> 00:08:54.620
to be equal to e.target.

00:08:56.310 --> 00:08:58.480
This now means if we go back to

00:08:58.480 --> 00:09:00.490
a handle drop function near the top,

00:09:00.490 --> 00:09:03.055
we now have access to both of these elements.

00:09:03.055 --> 00:09:06.160
We have access to the class list of the drop elements,

00:09:06.160 --> 00:09:07.990
and also up at the top we have access to

00:09:07.990 --> 00:09:11.495
the dragged elements with this variable called selected.

00:09:11.495 --> 00:09:14.020
Now we can create an if statement to check if

00:09:14.020 --> 00:09:16.210
both of these elements contain the same classes.

00:09:16.210 --> 00:09:19.780
I can do this first by accessing our class list,

00:09:19.780 --> 00:09:23.690
f e.target.classList,

00:09:24.990 --> 00:09:29.660
then we have access to a method called contains.

00:09:30.130 --> 00:09:32.890
What we want to do here is we are checking

00:09:32.890 --> 00:09:35.305
if the particular element we have selected,

00:09:35.305 --> 00:09:36.820
which is this one just here,

00:09:36.820 --> 00:09:40.030
contains the same class as this one just here.

00:09:40.030 --> 00:09:45.525
We can pass it in selected.className.

00:09:45.525 --> 00:09:48.905
We can use the single class name for this one,

00:09:48.905 --> 00:09:50.470
because we know that any one of

00:09:50.470 --> 00:09:52.090
these drag elements is

00:09:52.090 --> 00:09:54.515
only going to contain a single class.

00:09:54.515 --> 00:09:57.900
If this is true, we'll open up the calibraces,

00:09:57.900 --> 00:10:00.430
pass in the console log,

00:10:00.860 --> 00:10:05.060
and we can change this to be the text of correct.

00:10:06.070 --> 00:10:08.240
We can then return out of

00:10:08.240 --> 00:10:09.995
this if statement, if this is true.

00:10:09.995 --> 00:10:11.990
If this is not true, will then run the code,

00:10:11.990 --> 00:10:13.340
just below, where we'll do

00:10:13.340 --> 00:10:16.440
a console log with the text of incorrect.

00:10:17.900 --> 00:10:21.030
Let's try this out, just refresh.

00:10:21.030 --> 00:10:22.260
First of all, we'll try the

00:10:22.260 --> 00:10:24.140
correct behavior, so a square,

00:10:24.140 --> 00:10:26.480
we'll drag this onto the correct square,

00:10:26.480 --> 00:10:28.970
which is this one, and we see correct.

00:10:28.970 --> 00:10:31.600
Let's drag this onto a incorrect item,

00:10:31.600 --> 00:10:33.815
we'll get the text of incorrect.

00:10:33.815 --> 00:10:36.395
You can see if we go to the final game just here,

00:10:36.395 --> 00:10:38.390
as soon as we get any one of these correct,

00:10:38.390 --> 00:10:41.330
by dragging these into the right or just above.

00:10:41.330 --> 00:10:44.660
This shape is now removed from the bottom section.

00:10:44.660 --> 00:10:47.630
The way we can do this, inside of our if statements,

00:10:47.630 --> 00:10:49.550
we can now remove the console log.

00:10:49.550 --> 00:10:52.505
We can grab the selected elements

00:10:52.505 --> 00:10:55.510
and they call the remove method.

00:10:55.510 --> 00:10:59.080
Let's test this out, refresh again,

00:10:59.080 --> 00:11:01.550
and drag a rectangle into a rectangle,

00:11:01.550 --> 00:11:02.870
and it's then removes

00:11:02.870 --> 00:11:05.365
the rectangle from the bottom section.

00:11:05.365 --> 00:11:07.670
Good. The next thing to do when we have one of

00:11:07.670 --> 00:11:09.500
our shapes in the correct hole,

00:11:09.500 --> 00:11:11.900
is to make sure that the background color is changed to

00:11:11.900 --> 00:11:13.130
the same color as the shape

00:11:13.130 --> 00:11:14.875
which has been dropped into place.

00:11:14.875 --> 00:11:16.740
If we drop this in, it's now

00:11:16.740 --> 00:11:18.565
inheriting red background color,

00:11:18.565 --> 00:11:19.850
gives the illusion that this is

00:11:19.850 --> 00:11:21.890
dropped into a particular shape.

00:11:21.890 --> 00:11:23.720
Now the way we can do this, if we take

00:11:23.720 --> 00:11:25.460
a look at our styles.css,

00:11:25.460 --> 00:11:28.265
the only difference between these two shapes,

00:11:28.265 --> 00:11:30.125
such as this one and this one,

00:11:30.125 --> 00:11:32.020
is this background of none.

00:11:32.020 --> 00:11:34.400
This is provided with the class of drop,

00:11:34.400 --> 00:11:37.490
which is on all of the top sections.

00:11:37.490 --> 00:11:39.620
All we need to do when the user drops

00:11:39.620 --> 00:11:41.675
the correct shape into the correct hole,

00:11:41.675 --> 00:11:45.805
is to remove this class of drop, and open our script.

00:11:45.805 --> 00:11:48.740
This is the correct section inside the if statement.

00:11:48.740 --> 00:11:51.020
What we're going to do is to grab

00:11:51.020 --> 00:11:54.930
our elements with e.target.classList.

00:11:55.340 --> 00:11:58.950
This class list has a method called remove,

00:11:58.950 --> 00:12:01.065
as in the class of drop,

00:12:01.065 --> 00:12:02.860
which would then remove

00:12:02.860 --> 00:12:04.855
this class including the background color,

00:12:04.855 --> 00:12:07.150
leaving the background color to be filled.

00:12:07.150 --> 00:12:10.060
Let's try this out. Drag one

00:12:10.060 --> 00:12:11.800
of these shapes into the correct hole.

00:12:11.800 --> 00:12:13.765
The shape is now removed from the bottom,

00:12:13.765 --> 00:12:15.535
and we now have the background color

00:12:15.535 --> 00:12:17.440
displaying inside the browser.

00:12:17.440 --> 00:12:20.810
Let's check if this is okay when we try an incorrect one.

00:12:20.810 --> 00:12:23.310
Good. This is now all working well,

00:12:23.310 --> 00:12:25.255
and if we take a look at the final version,

00:12:25.255 --> 00:12:27.460
the very last thing I want to do is to change

00:12:27.460 --> 00:12:30.155
the opacity when the shape has been dragged.

00:12:30.155 --> 00:12:32.560
For example, if we move this away,

00:12:32.560 --> 00:12:34.780
we can see the shape in the original place just

00:12:34.780 --> 00:12:37.195
here has now changed to be a lighter color.

00:12:37.195 --> 00:12:39.220
The same if we move red, we can see

00:12:39.220 --> 00:12:41.710
the lighter red shape has been left in place,

00:12:41.710 --> 00:12:43.360
and this lets the user know which shape

00:12:43.360 --> 00:12:44.850
they are currently dragging.

00:12:44.850 --> 00:12:46.340
We can do this by setting

00:12:46.340 --> 00:12:48.290
the opacity inside of our script,

00:12:48.290 --> 00:12:52.070
and we'll begin when we start to handle the drag start.

00:12:52.070 --> 00:12:53.390
First of all, select

00:12:53.390 --> 00:12:55.380
the element with e.targets.style.opacity.

00:12:58.190 --> 00:13:03.750
Well, we'll set the opacity to be equal to 0.5.

00:13:04.400 --> 00:13:07.580
Then we can copy this, and we'll set this

00:13:07.580 --> 00:13:10.330
back to one inside of handle drag end.

00:13:10.330 --> 00:13:12.780
We no longer need a console log,

00:13:12.780 --> 00:13:14.330
paste this in where we can set

00:13:14.330 --> 00:13:16.340
the value to be equal to one.

00:13:16.340 --> 00:13:19.159
Now since we're accessing the event information,

00:13:19.159 --> 00:13:21.940
we also need to pass this into our function.

00:13:21.940 --> 00:13:26.760
Save. Let's try this out and into our version.

00:13:26.760 --> 00:13:29.420
As soon as it begins to move one of our shapes,

00:13:29.420 --> 00:13:30.680
the shape which is now left in

00:13:30.680 --> 00:13:32.605
place is now a lot lighter.

00:13:32.605 --> 00:13:35.765
This is the drag and drop functionality now in place,

00:13:35.765 --> 00:13:37.610
and in the next one will improve

00:13:37.610 --> 00:13:39.605
this game by adding to the user score,

00:13:39.605 --> 00:13:41.300
handling the end of game,

00:13:41.300 --> 00:13:42.890
and also restarting the game

00:13:42.890 --> 00:13:45.750
2 with our Play Again button.
