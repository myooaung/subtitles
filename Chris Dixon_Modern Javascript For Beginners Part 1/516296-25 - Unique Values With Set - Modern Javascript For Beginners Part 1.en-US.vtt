WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:02.930 --> 00:00:05.250
Head into this lesson's folder,

00:00:05.250 --> 00:00:07.425
which is Unique values with set.

00:00:07.425 --> 00:00:08.850
Inside of the script section,

00:00:08.850 --> 00:00:12.480
we have a categories array with multiple values inside.

00:00:12.480 --> 00:00:14.880
If you look closely, we can see this value of

00:00:14.880 --> 00:00:18.585
bags has been duplicated at the beginning and the end.

00:00:18.585 --> 00:00:20.730
Arrays as you can see here will

00:00:20.730 --> 00:00:22.950
accept any values which you add to it,

00:00:22.950 --> 00:00:25.035
even if they are duplicates.

00:00:25.035 --> 00:00:27.330
But if we wanted to avoid this and just

00:00:27.330 --> 00:00:29.850
have unique values stored inside,

00:00:29.850 --> 00:00:32.925
we could instead use something called set.

00:00:32.925 --> 00:00:35.535
Even though set looks a little bit like an array,

00:00:35.535 --> 00:00:38.085
it's instead what is called a collection.

00:00:38.085 --> 00:00:39.630
Just like arrays, you can store

00:00:39.630 --> 00:00:42.040
both primitive and object types.

00:00:42.040 --> 00:00:43.940
We have two options, we could either

00:00:43.940 --> 00:00:46.145
create a new set from scratch,

00:00:46.145 --> 00:00:49.940
or if we wanted to convert this array to be a set.

00:00:49.940 --> 00:00:51.800
Just go, create

00:00:51.800 --> 00:00:53.690
a new variable and

00:00:53.690 --> 00:00:56.760
this one is going to be called unique categories.

00:00:57.140 --> 00:01:00.730
Set this equal to a new set.

00:01:00.730 --> 00:01:02.690
We've seen this new keyword in

00:01:02.690 --> 00:01:04.130
the past when creating things like

00:01:04.130 --> 00:01:07.580
new arrays and this is going to create a new empty set.

00:01:07.580 --> 00:01:09.395
We can pass in our categories,

00:01:09.395 --> 00:01:11.450
which is the array just above.

00:01:11.450 --> 00:01:14.680
Below this creates a console log.

00:01:14.680 --> 00:01:16.385
Log out the value of

00:01:16.385 --> 00:01:20.720
unique categories and also

00:01:20.720 --> 00:01:23.795
the browser will see what is output inside the console.

00:01:23.795 --> 00:01:25.715
Now I have a set with

00:01:25.715 --> 00:01:28.460
six entries and upon closer inspection,

00:01:28.460 --> 00:01:31.930
we can see the bags' value is only included once.

00:01:31.930 --> 00:01:35.420
It removed any duplicates since our original array had

00:01:35.420 --> 00:01:39.160
these bags' value in twice and seven different values.

00:01:39.160 --> 00:01:41.075
What we've done here is we've created

00:01:41.075 --> 00:01:42.920
a new set which is cloned

00:01:42.920 --> 00:01:44.540
the categories array and stripped

00:01:44.540 --> 00:01:46.715
of any duplicated values.

00:01:46.715 --> 00:01:49.070
Set also has some built-in methods which

00:01:49.070 --> 00:01:51.265
we can use to modify this collection.

00:01:51.265 --> 00:01:52.710
Then add new value.

00:01:52.710 --> 00:01:54.470
We have the add method which we can

00:01:54.470 --> 00:01:57.065
use directly on our variable.

00:01:57.065 --> 00:01:59.570
Access the unique categories,

00:01:59.570 --> 00:02:03.445
only add method and inside we can add a new value,

00:02:03.445 --> 00:02:07.575
let's go for jeans. Save and refresh.

00:02:07.575 --> 00:02:09.700
Now, our set now has seven values with

00:02:09.700 --> 00:02:12.730
the jeans pushed to the end of this collection.

00:02:12.730 --> 00:02:14.740
Duplicate categories will not be

00:02:14.740 --> 00:02:17.635
accepted even when using this method.

00:02:17.635 --> 00:02:19.240
If we go for hats,

00:02:19.240 --> 00:02:24.070
which you already have, refresh this,

00:02:24.070 --> 00:02:25.285
and we're back now to

00:02:25.285 --> 00:02:27.070
six different values because

00:02:27.070 --> 00:02:28.825
the hats has been duplicated.

00:02:28.825 --> 00:02:31.130
If we also want to remove a single value,

00:02:31.130 --> 00:02:33.595
we have access to the delete method.

00:02:33.595 --> 00:02:36.360
We change this over and

00:02:36.360 --> 00:02:38.935
then we can remove any one of our existing values.

00:02:38.935 --> 00:02:41.515
Let's go over hats, refresh.

00:02:41.515 --> 00:02:43.360
This is now reduced, our set down to be

00:02:43.360 --> 00:02:47.000
five values with the hats now been removed.

00:02:47.000 --> 00:02:49.990
This removes one single value but if we wanted

00:02:49.990 --> 00:02:52.570
to remove all of the values in our collection,

00:02:52.570 --> 00:02:55.195
we have access to the clear method.

00:02:55.195 --> 00:02:57.190
Since we are removing all the values,

00:02:57.190 --> 00:02:59.570
we don't need to pass anything inside.

00:02:59.570 --> 00:03:01.435
Refresh and this will wipe

00:03:01.435 --> 00:03:04.000
all of the contents of our set.

00:03:04.000 --> 00:03:06.610
We can also check if a particular value is

00:03:06.610 --> 00:03:09.730
included in a set by using the has method.

00:03:09.730 --> 00:03:11.695
Since this returns true or false,

00:03:11.695 --> 00:03:14.900
it also needs to be stored inside of a variable.

00:03:14.900 --> 00:03:17.265
Let's change this to be has,

00:03:17.265 --> 00:03:20.405
we can check if this has a value of shoes.

00:03:20.405 --> 00:03:22.755
If we were to just save this and refresh,

00:03:22.755 --> 00:03:24.755
we still get back the full set.

00:03:24.755 --> 00:03:27.080
But instead, if we access the return value,

00:03:27.080 --> 00:03:29.060
install this inside of a constant,

00:03:29.060 --> 00:03:31.470
let's say hasShoes,

00:03:32.300 --> 00:03:35.250
this equal to the return value

00:03:35.250 --> 00:03:38.500
and then we can log this to the console.

00:03:39.050 --> 00:03:43.820
This is true, let's change this to be something else.

00:03:43.820 --> 00:03:47.195
As expected, this is now returning false.

00:03:47.195 --> 00:03:48.710
Just like when we use arrays,

00:03:48.710 --> 00:03:50.970
we have access to a land property.

00:03:50.970 --> 00:03:52.280
Find out how many values are

00:03:52.280 --> 00:03:54.275
contained inside of the array.

00:03:54.275 --> 00:03:56.060
When using sets, we have access

00:03:56.060 --> 00:03:57.710
to something very similar,

00:03:57.710 --> 00:04:00.145
but this time it's called size.

00:04:00.145 --> 00:04:04.920
As you move this line and restore the uniqueCategories,

00:04:04.920 --> 00:04:08.810
access.size, save and refresh,

00:04:08.810 --> 00:04:11.260
and the returned value is six.

00:04:11.260 --> 00:04:13.775
Set is really useful if we don't want to have

00:04:13.775 --> 00:04:17.000
any duplicated values inside of an array.

00:04:17.000 --> 00:04:20.375
If we wanted to, we could also do this with an array

00:04:20.375 --> 00:04:22.250
and also chain on the filter method

00:04:22.250 --> 00:04:23.875
to remove any duplicates.

00:04:23.875 --> 00:04:25.700
But of course, it's much more simpler to

00:04:25.700 --> 00:04:27.800
use this set than writing all of

00:04:27.800 --> 00:04:29.645
the additional code which should be required

00:04:29.645 --> 00:04:33.030
if we were to store this inside of an array.
