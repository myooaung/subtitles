WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.110 --> 00:00:05.400
In any programming language, we

00:00:05.400 --> 00:00:07.560
have what is called data types.

00:00:07.560 --> 00:00:09.750
Data types, as they sound,

00:00:09.750 --> 00:00:12.915
refers to the type of data which we are dealing with.

00:00:12.915 --> 00:00:17.070
So far, we've mainly focused on the data type of string.

00:00:17.070 --> 00:00:19.540
But there are also others too,

00:00:19.540 --> 00:00:23.835
JavaScript is a loosely typed or a dynamic language,

00:00:23.835 --> 00:00:25.950
which basically means our variables

00:00:25.950 --> 00:00:28.845
don't care what type of data they contain,

00:00:28.845 --> 00:00:31.680
they can contain a string or as we'll

00:00:31.680 --> 00:00:34.095
look at during this video, something else,

00:00:34.095 --> 00:00:36.030
such as a number,

00:00:36.030 --> 00:00:39.060
and we can also change the data type of a variable

00:00:39.060 --> 00:00:42.220
to when we reassign a new value.

00:00:42.220 --> 00:00:45.160
This is unlike some other programming languages

00:00:45.160 --> 00:00:46.555
such as Java,

00:00:46.555 --> 00:00:48.730
where we need to specify what type of

00:00:48.730 --> 00:00:52.205
data our variable will contain first.

00:00:52.205 --> 00:00:55.800
Inside of this current lesson we have the data types,

00:00:55.800 --> 00:00:58.140
numbers, video, which is Number 6.

00:00:58.140 --> 00:01:01.640
Also make sure to open this up inside the browser too.

00:01:01.640 --> 00:01:04.990
When dealing with a language such as Java,

00:01:04.990 --> 00:01:08.105
we may need to declare a variable like this.

00:01:08.105 --> 00:01:11.335
We can give our variable a name called number,

00:01:11.335 --> 00:01:15.475
and set this equal to a string of five.

00:01:15.475 --> 00:01:17.905
When we write code just like this,

00:01:17.905 --> 00:01:19.285
this is Java code,

00:01:19.285 --> 00:01:22.780
this is what is called a strongly typed language,

00:01:22.780 --> 00:01:26.075
since this data type must be declared upfront.

00:01:26.075 --> 00:01:28.040
However, though we use in JavaScript,

00:01:28.040 --> 00:01:29.120
which doesn't care about

00:01:29.120 --> 00:01:32.410
what type of data this variable contains.

00:01:32.410 --> 00:01:34.250
Unlike Java, we don't declare

00:01:34.250 --> 00:01:36.500
what type of data we are going to contain,

00:01:36.500 --> 00:01:38.180
we just simply say what type

00:01:38.180 --> 00:01:40.195
of variable this is going to be.

00:01:40.195 --> 00:01:42.990
We say let number equals 5,

00:01:42.990 --> 00:01:44.960
and this of course is a string because it's

00:01:44.960 --> 00:01:47.740
surrounded inside of the quotations.

00:01:47.740 --> 00:01:50.615
But what about if we were to do this?

00:01:50.615 --> 00:01:52.460
Let's say on the next line,

00:01:52.460 --> 00:01:54.410
we then reassign this value of

00:01:54.410 --> 00:01:59.200
number to be equal to a real number such as five.

00:01:59.200 --> 00:02:01.590
This is how we set a number in JavaScript.

00:02:01.590 --> 00:02:04.100
We don't surround in any of the quotations.

00:02:04.100 --> 00:02:07.370
Now we can use this number inside of here.

00:02:07.370 --> 00:02:09.650
We can now put the number on the screen.

00:02:09.650 --> 00:02:12.205
Let's say this and see what happens.

00:02:12.205 --> 00:02:16.260
Refresh, and now the value of this is five.

00:02:16.260 --> 00:02:18.980
This number variable has changed even though we use

00:02:18.980 --> 00:02:21.575
in a completely different data type.

00:02:21.575 --> 00:02:23.390
This data type of number

00:02:23.390 --> 00:02:25.730
can be a whole number just like this,

00:02:25.730 --> 00:02:27.455
and we can write this with or without

00:02:27.455 --> 00:02:30.640
decimal places. We can output this.

00:02:30.640 --> 00:02:32.570
If you are coming from a

00:02:32.570 --> 00:02:34.280
different programming language where there may

00:02:34.280 --> 00:02:37.340
be multiple number types such as double float,

00:02:37.340 --> 00:02:40.010
or integer, this is not the case here.

00:02:40.010 --> 00:02:42.170
JavaScript numbers are always stored as

00:02:42.170 --> 00:02:45.475
a double precision floating point format.

00:02:45.475 --> 00:02:47.420
If you do want to find out more about

00:02:47.420 --> 00:02:49.460
the technical details behind this,

00:02:49.460 --> 00:02:51.620
you can find the link here on the page.

00:02:51.620 --> 00:02:52.970
When working with numbers,

00:02:52.970 --> 00:02:54.904
JavaScript can also calculate

00:02:54.904 --> 00:02:58.465
the value and store this inside a variable too.

00:02:58.465 --> 00:03:00.800
For example, if we were to assign

00:03:00.800 --> 00:03:03.815
this number the value of 5 plus 10,

00:03:03.815 --> 00:03:07.400
you should now output the value of 15.

00:03:07.400 --> 00:03:09.365
We will do the calculation first

00:03:09.365 --> 00:03:11.860
and then assign this to the variable.

00:03:11.860 --> 00:03:14.150
But what do you think will happen if we were to

00:03:14.150 --> 00:03:16.760
add together a number and a string?

00:03:16.760 --> 00:03:19.245
Well, let's find out. We'll say

00:03:19.245 --> 00:03:22.125
let Number 1 equal to be a string,

00:03:22.125 --> 00:03:24.525
and then let Number 2,

00:03:24.525 --> 00:03:27.805
this can assign the value of 15.

00:03:27.805 --> 00:03:30.425
Now instead of outputting the value of number,

00:03:30.425 --> 00:03:32.285
we'll output the value of Number 1,

00:03:32.285 --> 00:03:37.950
add it to the variable of Number 2, over to the browser.

00:03:37.950 --> 00:03:41.100
We see our two variables, we have the string of

00:03:41.100 --> 00:03:44.710
5 and then the number of 15.

00:03:44.710 --> 00:03:48.305
Is this a number or is this a string?

00:03:48.305 --> 00:03:51.335
Well, when I discover a number and a string,

00:03:51.335 --> 00:03:54.305
in JavaScript the result is a string.

00:03:54.305 --> 00:03:55.820
Even though we have a number here,

00:03:55.820 --> 00:03:58.190
this is classed as a complete string.

00:03:58.190 --> 00:04:01.480
We can prove this by using operator called typeof,

00:04:01.480 --> 00:04:03.645
put these out of place,

00:04:03.645 --> 00:04:05.730
and we use typeof.

00:04:05.730 --> 00:04:08.365
Then inside the brackets, paste these back in.

00:04:08.365 --> 00:04:10.330
We will see what type of data is

00:04:10.330 --> 00:04:13.475
returned from inside of these brackets.

00:04:13.475 --> 00:04:16.330
We can use this with any other data type 2 and it

00:04:16.330 --> 00:04:19.450
will let us know what type of data we're dealing with.

00:04:19.450 --> 00:04:21.460
Save and refresh and we see

00:04:21.460 --> 00:04:23.775
this is a data type of string.

00:04:23.775 --> 00:04:28.180
However, though, if we were to just output Number 2,

00:04:28.180 --> 00:04:31.580
the result is still a number.

00:04:31.620 --> 00:04:34.945
This typeof is a really useful tool if we are

00:04:34.945 --> 00:04:38.045
unsure what type of data we're working with.

00:04:38.045 --> 00:04:40.060
Also bear in mind even if we have

00:04:40.060 --> 00:04:42.815
a number stored inside of quotes like this,

00:04:42.815 --> 00:04:44.335
which has a Number 5,

00:04:44.335 --> 00:04:46.310
this will also be classed as a string 2.

00:04:46.310 --> 00:04:48.560
So anything in quotes is a string,

00:04:48.560 --> 00:04:50.795
any number which is not in quotes,

00:04:50.795 --> 00:04:52.750
is classed as a number.

00:04:52.750 --> 00:04:56.060
Both the data type of string and also number is

00:04:56.060 --> 00:04:57.380
considered to be what is called

00:04:57.380 --> 00:04:59.825
a JavaScript primitive type.

00:04:59.825 --> 00:05:01.700
Primitives are data types which are

00:05:01.700 --> 00:05:03.980
not classed as an object.

00:05:03.980 --> 00:05:06.530
They also don't have any methods which are

00:05:06.530 --> 00:05:09.235
actions that can be performed on an object.

00:05:09.235 --> 00:05:12.250
But don't worry about objects and methods just yet,

00:05:12.250 --> 00:05:13.970
we'll have plenty more detail

00:05:13.970 --> 00:05:16.025
on these throughout this course.

00:05:16.025 --> 00:05:17.450
The main thing to understand for

00:05:17.450 --> 00:05:19.130
now is that primitives are

00:05:19.130 --> 00:05:22.160
the most simple data types in comparison,

00:05:22.160 --> 00:05:23.570
and these include things like

00:05:23.570 --> 00:05:26.275
the string and also numbers.

00:05:26.275 --> 00:05:29.960
Just as a recap of what we've looked at in this video,

00:05:29.960 --> 00:05:31.550
we have data types which is

00:05:31.550 --> 00:05:34.040
the type of data which we were working with,

00:05:34.040 --> 00:05:35.420
and currently we've looked at

00:05:35.420 --> 00:05:38.525
the data type of string and also number.

00:05:38.525 --> 00:05:40.730
We also mentioned strongly type,

00:05:40.730 --> 00:05:42.740
which is a data type which we need

00:05:42.740 --> 00:05:45.730
to declare upfront when creating a variable.

00:05:45.730 --> 00:05:48.380
In other languages such as Java,

00:05:48.380 --> 00:05:51.500
we would need to declare that a variable is

00:05:51.500 --> 00:05:53.180
a certain type of data such as

00:05:53.180 --> 00:05:56.440
a string or a number when we create it.

00:05:56.440 --> 00:05:59.370
JavaScript on the other hand is loosely typed,

00:05:59.370 --> 00:06:01.020
so the variables don't care

00:06:01.020 --> 00:06:02.865
what type of data they contain,

00:06:02.865 --> 00:06:04.370
and we can also reassign

00:06:04.370 --> 00:06:07.165
this data with a different data type.

00:06:07.165 --> 00:06:08.750
For example, we could

00:06:08.750 --> 00:06:10.805
create a variable which is a string,

00:06:10.805 --> 00:06:12.590
and then change or reassign it

00:06:12.590 --> 00:06:15.355
later with a data type of number.

00:06:15.355 --> 00:06:18.080
Primitives, this is what we just looked at before,

00:06:18.080 --> 00:06:22.130
which is a data type which is not classed as an object.

00:06:22.130 --> 00:06:25.280
Primitives are generally a more simple data type,

00:06:25.280 --> 00:06:27.065
and we will discover the other type of

00:06:27.065 --> 00:06:29.695
object in some later videos.

00:06:29.695 --> 00:06:32.940
This is a basic introduction to JavaScript numbers,

00:06:32.940 --> 00:06:34.745
they are a real important

00:06:34.745 --> 00:06:38.160
and fundamental part of JavaScript.
