WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:04.010 --> 00:00:06.180
That's over for this video,

00:00:06.180 --> 00:00:08.010
headed into the next folder.

00:00:08.010 --> 00:00:09.825
We're going to look at number 4 which is

00:00:09.825 --> 00:00:11.925
storing data with variables.

00:00:11.925 --> 00:00:14.880
So let's open up this file and also copy the path for

00:00:14.880 --> 00:00:17.955
the browser too, paste this in.

00:00:17.955 --> 00:00:21.435
We'll see the title of variables put at the very top.

00:00:21.435 --> 00:00:23.430
Oops. Now in this course we've been

00:00:23.430 --> 00:00:25.155
setting or changing values,

00:00:25.155 --> 00:00:27.990
such as updating this title just here.

00:00:27.990 --> 00:00:30.465
In JavaScript the most other languages too,

00:00:30.465 --> 00:00:33.565
we regularly have the need to store our data.

00:00:33.565 --> 00:00:35.435
JavaScript provides us with

00:00:35.435 --> 00:00:37.565
three main ways of doing this.

00:00:37.565 --> 00:00:39.170
Let's begin by looking at

00:00:39.170 --> 00:00:41.989
the traditional way of storing data in JavaScript,

00:00:41.989 --> 00:00:44.030
which is the variable.

00:00:44.030 --> 00:00:47.615
We can create a variable by using the var keyword,

00:00:47.615 --> 00:00:51.515
just like this, followed by a name for this variable.

00:00:51.515 --> 00:00:54.035
So let's call mine new text.

00:00:54.035 --> 00:00:57.670
This is a way to reference this variable in the future.

00:00:57.670 --> 00:01:00.395
Adding a name like this is called

00:01:00.395 --> 00:01:04.165
a declaration since we are declaring a new variable.

00:01:04.165 --> 00:01:06.065
You can think of a variable as

00:01:06.065 --> 00:01:08.960
a storage container and this name we give to it,

00:01:08.960 --> 00:01:10.250
it's kind of like the label on

00:01:10.250 --> 00:01:13.190
the front so we can easily find it in the future.

00:01:13.190 --> 00:01:14.960
It also makes sense to be descriptive

00:01:14.960 --> 00:01:16.310
when naming variables.

00:01:16.310 --> 00:01:18.790
It should reflect the data which it contains.

00:01:18.790 --> 00:01:21.995
Also, this name cannot contain spaces like this.

00:01:21.995 --> 00:01:24.815
It must also begin with a letter,

00:01:24.815 --> 00:01:27.470
an underscore or a $ symbol.

00:01:27.470 --> 00:01:29.795
If we add something which is not allowed,

00:01:29.795 --> 00:01:31.925
such as a forward slash,

00:01:31.925 --> 00:01:34.280
usually a modern text editor like this will

00:01:34.280 --> 00:01:37.160
pick up on this and warn us of this error.

00:01:37.160 --> 00:01:39.860
We can then use this equals symbol to add

00:01:39.860 --> 00:01:43.340
a value which you want to store inside of this variable,

00:01:43.340 --> 00:01:46.065
such as our string of text.

00:01:46.065 --> 00:01:47.690
Since this is a string,

00:01:47.690 --> 00:01:48.950
we add this in the quotations,

00:01:48.950 --> 00:01:52.500
let's say new text from variable.

00:01:52.610 --> 00:01:55.130
So what we've done here is we've used

00:01:55.130 --> 00:01:56.840
this equals to assign

00:01:56.840 --> 00:01:58.760
this value over on the right for

00:01:58.760 --> 00:02:01.250
this variable name over on the left.

00:02:01.250 --> 00:02:03.530
Adding a value to our variable just like

00:02:03.530 --> 00:02:06.280
this is referred to as initialization.

00:02:06.280 --> 00:02:08.570
You don't need to remember these keywords,

00:02:08.570 --> 00:02:11.495
but I just want to make you aware that these exist.

00:02:11.495 --> 00:02:14.145
So this is initializing a variable and

00:02:14.145 --> 00:02:17.515
before we just had the variable declaration.

00:02:17.515 --> 00:02:19.895
Then to make use of this text,

00:02:19.895 --> 00:02:22.670
all we need to do is to pass in the variable name,

00:02:22.670 --> 00:02:27.675
just like this, you could say save and refresh.

00:02:27.675 --> 00:02:29.310
There's our new text which we

00:02:29.310 --> 00:02:31.725
stored inside of the variable.

00:02:31.725 --> 00:02:34.100
Well, what if we also wanted to

00:02:34.100 --> 00:02:36.970
change this value which is stored inside this variable.

00:02:36.970 --> 00:02:38.825
We can easily do this too.

00:02:38.825 --> 00:02:41.085
Since our variable is already created.

00:02:41.085 --> 00:02:43.625
What we need to do this time is to access

00:02:43.625 --> 00:02:46.945
the variable name without the var keyword.

00:02:46.945 --> 00:02:48.920
The program already knows this is

00:02:48.920 --> 00:02:51.170
a variable since we declared the above,

00:02:51.170 --> 00:02:53.465
so the var keyword is not required.

00:02:53.465 --> 00:02:54.770
Again, using the equals,

00:02:54.770 --> 00:02:57.400
we can update this with a new value.

00:02:57.400 --> 00:02:59.780
Let's say updated text.

00:02:59.780 --> 00:03:02.480
Give this a save and check this out in the browser.

00:03:02.480 --> 00:03:05.575
There's our updated text now showing.

00:03:05.575 --> 00:03:08.330
So the order here is important too,

00:03:08.330 --> 00:03:11.570
since the code is read from the top down to the bottom.

00:03:11.570 --> 00:03:13.040
So the first line, we create

00:03:13.040 --> 00:03:15.850
our variable line till we update it.

00:03:15.850 --> 00:03:19.690
Then the title is changed to our new updated text.

00:03:19.690 --> 00:03:22.700
If we were to do something like this and move

00:03:22.700 --> 00:03:26.210
the update to be above where we declared our variable.

00:03:26.210 --> 00:03:29.215
Let's see what happens when we save and refresh.

00:03:29.215 --> 00:03:33.065
We no longer see the updated version inside the browser.

00:03:33.065 --> 00:03:34.820
This is often why we will see

00:03:34.820 --> 00:03:38.255
variable declarations over the top of the script.

00:03:38.255 --> 00:03:40.460
So it won't cause any problems if we start to

00:03:40.460 --> 00:03:43.150
update this later on in our file.

00:03:43.150 --> 00:03:46.525
Variables can also hold other data types too,

00:03:46.525 --> 00:03:48.200
not just strings, and we will discover

00:03:48.200 --> 00:03:50.315
more data types very soon.

00:03:50.315 --> 00:03:53.089
But for now there is two more types of variables

00:03:53.089 --> 00:03:56.140
alongside this var keyword, which we're going to look at.

00:03:56.140 --> 00:03:59.690
Both of these were introduced with ES2015.

00:03:59.690 --> 00:04:03.065
The first one of these is the let keyword.

00:04:03.065 --> 00:04:06.670
On the surface, let work just like the same as var.

00:04:06.670 --> 00:04:08.720
It can contain a value and we

00:04:08.720 --> 00:04:11.225
can also update this value when required.

00:04:11.225 --> 00:04:16.830
So if we change var to be let, save and refresh.

00:04:16.830 --> 00:04:19.100
We now see the updated text,

00:04:19.100 --> 00:04:21.340
just like we did with the var keyword.

00:04:21.340 --> 00:04:22.750
There is a difference still

00:04:22.750 --> 00:04:24.850
between the let keyword and var.

00:04:24.850 --> 00:04:27.725
This all comes down to something called scope.

00:04:27.725 --> 00:04:29.570
Scope relates to how we can

00:04:29.570 --> 00:04:31.610
access these variables and you add

00:04:31.610 --> 00:04:33.380
some restrictions on how we can access

00:04:33.380 --> 00:04:35.615
the values stored inside.

00:04:35.615 --> 00:04:37.220
There is more information on

00:04:37.220 --> 00:04:38.855
scope later on in the course,

00:04:38.855 --> 00:04:41.420
where you'll learn all about this in more detail.

00:04:41.420 --> 00:04:42.740
But we do need to learn a little

00:04:42.740 --> 00:04:43.760
bit more about JavaScript

00:04:43.760 --> 00:04:46.340
first before these will become really clear.

00:04:46.340 --> 00:04:48.560
Next up, we have the const keyword,

00:04:48.560 --> 00:04:50.720
which is short for a constant.

00:04:50.720 --> 00:04:52.370
You can think of this as holding

00:04:52.370 --> 00:04:55.115
a constant value which won't change.

00:04:55.115 --> 00:04:58.025
If we save this and refresh the browser,

00:04:58.025 --> 00:05:00.560
we see this will throw an error inside the console.

00:05:00.560 --> 00:05:04.225
We see the message of assignment to constant variable.

00:05:04.225 --> 00:05:07.295
We get this because just like var and let,

00:05:07.295 --> 00:05:09.065
this can also store a value,

00:05:09.065 --> 00:05:11.720
but it's more of a read-only value.

00:05:11.720 --> 00:05:15.110
The contents inside is not intended to be updated,

00:05:15.110 --> 00:05:16.825
which we are doing just here.

00:05:16.825 --> 00:05:18.470
So if we were to remove

00:05:18.470 --> 00:05:21.920
this line just like this and then refresh the browser,

00:05:21.920 --> 00:05:23.720
this now gets rid of the error and we

00:05:23.720 --> 00:05:26.170
still see our variable contents.

00:05:26.170 --> 00:05:28.550
So the console error message before

00:05:28.550 --> 00:05:31.250
was assignment to a constant variable.

00:05:31.250 --> 00:05:33.650
So just before we try to update this,

00:05:33.650 --> 00:05:34.940
we've seen the message was

00:05:34.940 --> 00:05:37.360
assignment to constant variable.

00:05:37.360 --> 00:05:40.535
It is assignment keyword here, which is the key.

00:05:40.535 --> 00:05:42.920
Assignment is just a fancy word we get to

00:05:42.920 --> 00:05:46.270
a variable over pass it a value just like this.

00:05:46.270 --> 00:05:49.010
We'll have this era because we're trying to reassign

00:05:49.010 --> 00:05:51.380
it with this value just below and having

00:05:51.380 --> 00:05:52.970
this const now introduced into

00:05:52.970 --> 00:05:54.560
the JavaScript language is

00:05:54.560 --> 00:05:55.700
a really good thing because it

00:05:55.700 --> 00:05:57.410
means we can store our values,

00:05:57.410 --> 00:06:00.680
which we know we don't ever intend on changing.

00:06:00.680 --> 00:06:03.575
This can stop any errors or bugs in our code.

00:06:03.575 --> 00:06:05.495
If somebody accidentally changes

00:06:05.495 --> 00:06:08.020
a value later on in the code.

00:06:08.020 --> 00:06:10.160
But there is something which can

00:06:10.160 --> 00:06:11.990
be confusing for beginners and

00:06:11.990 --> 00:06:13.580
it surrounds creating something

00:06:13.580 --> 00:06:15.995
called an object using const.

00:06:15.995 --> 00:06:17.780
If we remove these two lines of code,

00:06:17.780 --> 00:06:21.040
we can create a new constant called a Person.

00:06:21.040 --> 00:06:23.510
We'll have more detail on objects very soon.

00:06:23.510 --> 00:06:24.740
But for now you can think of

00:06:24.740 --> 00:06:28.075
an object as a collection of pieces of data.

00:06:28.075 --> 00:06:29.600
So a person may have

00:06:29.600 --> 00:06:32.210
multiple pieces of data such as an age,

00:06:32.210 --> 00:06:33.830
a name, a height.

00:06:33.830 --> 00:06:37.465
These can all be stored inside of these curly braces.

00:06:37.465 --> 00:06:40.370
All of these pieces of data is stored inside of

00:06:40.370 --> 00:06:43.820
multiple properties called key value pairs.

00:06:43.820 --> 00:06:46.610
So the key is the name of the data,

00:06:46.610 --> 00:06:48.380
such as a person's name.

00:06:48.380 --> 00:06:51.310
The value is actual name.

00:06:51.310 --> 00:06:53.270
Separated by a comma we can add

00:06:53.270 --> 00:06:55.205
a second key called likes,

00:06:55.205 --> 00:06:58.145
and then a value of a favorite food.

00:06:58.145 --> 00:07:00.260
We can keep going with as many values

00:07:00.260 --> 00:07:02.480
inside here as we would like.

00:07:02.480 --> 00:07:04.640
We can then access any of

00:07:04.640 --> 00:07:06.710
these properties by first accessing

00:07:06.710 --> 00:07:10.010
the constant name and then using the dot to

00:07:10.010 --> 00:07:11.060
select any one of

00:07:11.060 --> 00:07:14.410
our properties such as the name or likes.

00:07:14.410 --> 00:07:18.530
Let's try this, refresh we see the name of Chris and

00:07:18.530 --> 00:07:20.960
then person at the likes is

00:07:20.960 --> 00:07:24.010
a way to access the second property of pizza.

00:07:24.010 --> 00:07:27.300
So although this object is a constant,

00:07:27.300 --> 00:07:29.674
it's not strictly immutable,

00:07:29.674 --> 00:07:31.940
meaning it will never change.

00:07:31.940 --> 00:07:35.390
We can actually update the property just like this.

00:07:35.390 --> 00:07:37.040
We can access the person

00:07:37.040 --> 00:07:40.490
constant and access the key called likes.

00:07:40.490 --> 00:07:43.870
I set this to anything such as bananas.

00:07:43.870 --> 00:07:46.550
Lets save this and we still have the person at

00:07:46.550 --> 00:07:50.135
dot likes rendering out to the browser, refresh.

00:07:50.135 --> 00:07:51.620
Now we can see we've updated

00:07:51.620 --> 00:07:54.140
our constants with a value of bananas.

00:07:54.140 --> 00:07:56.840
We could also add additional properties.

00:07:56.840 --> 00:07:58.760
So once which already don't exist,

00:07:58.760 --> 00:08:04.205
we can say person dot hair and set this to a color,

00:08:04.205 --> 00:08:07.170
then display this inside the browser.

00:08:07.570 --> 00:08:10.250
So we can see here that we can update

00:08:10.250 --> 00:08:12.635
the properties inside of an object.

00:08:12.635 --> 00:08:15.020
But what about if we tried to completely change

00:08:15.020 --> 00:08:17.585
the person to be a different datatype,

00:08:17.585 --> 00:08:19.420
such as a string.

00:08:19.420 --> 00:08:22.580
Let's just change this to be a name such

00:08:22.580 --> 00:08:26.600
as Chris. Refresh this.

00:08:26.600 --> 00:08:29.510
We now see the same error message which we had before,

00:08:29.510 --> 00:08:32.475
which is assignment to a constant.

00:08:32.475 --> 00:08:36.190
So as you can see, a constant holding an object like

00:08:36.190 --> 00:08:39.970
this can still have its values mutated inside.

00:08:39.970 --> 00:08:41.395
We just cannot reassign

00:08:41.395 --> 00:08:44.905
its original value to maybe a number or a string.

00:08:44.905 --> 00:08:47.380
For this reason, it is often advisable to

00:08:47.380 --> 00:08:49.450
avoid the confusion by only

00:08:49.450 --> 00:08:51.910
using const for simple values

00:08:51.910 --> 00:08:53.955
such as a string or a number.

00:08:53.955 --> 00:08:57.295
Then we know for sure that this value will never change.

00:08:57.295 --> 00:08:58.915
So just to recap with

00:08:58.915 --> 00:09:00.700
everything we've learned in this video,

00:09:00.700 --> 00:09:03.700
we have three different keyword called var, let,

00:09:03.700 --> 00:09:06.055
and const, which all allow us to declare

00:09:06.055 --> 00:09:07.965
a new variable which is kind like

00:09:07.965 --> 00:09:10.230
a storage container for our data.

00:09:10.230 --> 00:09:12.845
When using the var and the let keywords,

00:09:12.845 --> 00:09:16.445
we can optionally assign a value to these names.

00:09:16.445 --> 00:09:18.320
The values inside can also be

00:09:18.320 --> 00:09:21.005
updated or reassigned with a new value.

00:09:21.005 --> 00:09:23.420
There is also some scope and hosting

00:09:23.420 --> 00:09:25.610
considerations which we'll cover later

00:09:25.610 --> 00:09:26.630
on in the course when we have a

00:09:26.630 --> 00:09:28.400
little bit more understanding.

00:09:28.400 --> 00:09:30.425
When using the const keyword,

00:09:30.425 --> 00:09:32.450
this will also create a new variable

00:09:32.450 --> 00:09:33.919
or storage container,

00:09:33.919 --> 00:09:36.919
but the value cannot be reassigned.

00:09:36.919 --> 00:09:40.710
As a beginner, it can also be confusing when using const

00:09:40.710 --> 00:09:44.570
and an object because object properties can be updated,

00:09:44.570 --> 00:09:47.230
or we can also add new ones too.

00:09:47.230 --> 00:09:50.680
We've also mentioned some key words in this video too.

00:09:50.680 --> 00:09:53.785
You don't have to remember all of these at the moment.

00:09:53.785 --> 00:09:56.430
First of all, we had a declaration.

00:09:56.430 --> 00:09:58.595
This is when we create or declare

00:09:58.595 --> 00:10:01.720
a new variable without passing it a value.

00:10:01.720 --> 00:10:04.595
So for example, we could say var name.

00:10:04.595 --> 00:10:07.610
We then initialize this variable when we

00:10:07.610 --> 00:10:10.520
pass it a value such as equals Chris.

00:10:10.520 --> 00:10:13.025
Assignments. This is when we pass

00:10:13.025 --> 00:10:15.620
or assign a value to a variable,

00:10:15.620 --> 00:10:18.365
such as this example down at the bottom,

00:10:18.365 --> 00:10:22.745
where we assign the value of 37 to the age variable.

00:10:22.745 --> 00:10:24.440
So these variables are going to

00:10:24.440 --> 00:10:26.060
be something which we use a lot.

00:10:26.060 --> 00:10:27.320
So you will get lots of

00:10:27.320 --> 00:10:29.495
practice with these through this course.

00:10:29.495 --> 00:10:31.850
Next, we're going to stick with variables and

00:10:31.850 --> 00:10:35.250
take a look at how we can mix these with strings.
