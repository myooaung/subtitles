WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.450 --> 00:00:06.430
Let's now jump into Lesson 3 of

00:00:06.430 --> 00:00:09.085
this section which is Working With Strings.

00:00:09.085 --> 00:00:10.660
We should know what to do by now.

00:00:10.660 --> 00:00:12.905
We can open up the Index page.

00:00:12.905 --> 00:00:16.675
Then if we open this up inside of the browser,

00:00:16.675 --> 00:00:18.625
copy the path to this,

00:00:18.625 --> 00:00:21.850
and then replace the current one inside the browser.

00:00:21.850 --> 00:00:25.170
So far when we've been setting the inner text,

00:00:25.170 --> 00:00:26.830
and we'll take a look at this example here,

00:00:26.830 --> 00:00:29.260
which is just like the ones we've looked at in the past.

00:00:29.260 --> 00:00:31.555
We select this title, just above,

00:00:31.555 --> 00:00:33.685
set the innerText to be equal to

00:00:33.685 --> 00:00:36.380
something else which wasn't originally there.

00:00:36.380 --> 00:00:38.350
Here we started with working with

00:00:38.350 --> 00:00:41.215
strings and then we replaced this with something else,

00:00:41.215 --> 00:00:43.045
which we see inside the browser.

00:00:43.045 --> 00:00:45.475
So far we've been adding these in-between

00:00:45.475 --> 00:00:48.580
the single quotations and in JavaScript,

00:00:48.580 --> 00:00:51.055
this is what is known as a string.

00:00:51.055 --> 00:00:53.140
A string is basically some text,

00:00:53.140 --> 00:00:55.690
it can be a single character such

00:00:55.690 --> 00:00:58.525
as single letter like an A,

00:00:58.525 --> 00:01:00.100
it can be a single word,

00:01:00.100 --> 00:01:03.050
it can be a sentence or even a paragraph.

00:01:03.050 --> 00:01:05.050
We can also place this inside of

00:01:05.050 --> 00:01:06.910
the single or the double quotes,

00:01:06.910 --> 00:01:08.860
it doesn't matter, both of these will work

00:01:08.860 --> 00:01:11.725
perfectly fine for an example just like this.

00:01:11.725 --> 00:01:12.880
However, though there will be

00:01:12.880 --> 00:01:14.170
an issue if one of the words

00:01:14.170 --> 00:01:16.825
inside contains the same character,

00:01:16.825 --> 00:01:19.435
such as a single or double quotation.

00:01:19.435 --> 00:01:22.195
If we revert this back to single quotes,

00:01:22.195 --> 00:01:24.460
just like this, and then we can

00:01:24.460 --> 00:01:27.880
change this to be maybe, let's go.

00:01:27.880 --> 00:01:30.230
This also has an apostrophe which is

00:01:30.230 --> 00:01:33.215
the same symbol as the surrounding quotes,

00:01:33.215 --> 00:01:36.140
immediately we can see the text editor has highlighted

00:01:36.140 --> 00:01:37.820
this and changed the color to

00:01:37.820 --> 00:01:39.730
let us know there is a problem.

00:01:39.730 --> 00:01:42.680
What is effectively happening here is we're matching

00:01:42.680 --> 00:01:45.800
a string from the first two quotations.

00:01:45.800 --> 00:01:47.945
We can see this is the original color,

00:01:47.945 --> 00:01:50.135
and then afterwards we see an error.

00:01:50.135 --> 00:01:51.650
We can see this if we save

00:01:51.650 --> 00:01:53.720
this file and refresh the browser,

00:01:53.720 --> 00:01:55.040
we can see in the console we'll have

00:01:55.040 --> 00:01:56.930
an unexpected identifier,

00:01:56.930 --> 00:01:59.090
since it's expecting all of our string to be

00:01:59.090 --> 00:02:01.940
just contained in between these quotations.

00:02:01.940 --> 00:02:04.190
There is a couple of ways we can deal with this.

00:02:04.190 --> 00:02:05.630
First, we could change

00:02:05.630 --> 00:02:06.980
the outer quotations to be the

00:02:06.980 --> 00:02:09.430
opposite and make them double.

00:02:09.430 --> 00:02:11.330
So add the double at

00:02:11.330 --> 00:02:13.865
the end and also at the beginning too.

00:02:13.865 --> 00:02:15.920
Now, this string will be contained between

00:02:15.920 --> 00:02:17.400
the double quotations and

00:02:17.400 --> 00:02:19.975
the apostrophe will be completely valid.

00:02:19.975 --> 00:02:21.850
Save and refresh, and we'll now

00:02:21.850 --> 00:02:23.330
see the apostrophe inside

00:02:23.330 --> 00:02:26.645
the string and we see no errors inside the console.

00:02:26.645 --> 00:02:30.080
Alternatively, we can use what is called escaping.

00:02:30.080 --> 00:02:32.210
If we change these back to

00:02:32.210 --> 00:02:34.865
the single quotations which was causing an error,

00:02:34.865 --> 00:02:37.490
we can make use of a backslash just in

00:02:37.490 --> 00:02:39.350
front and this will then escape

00:02:39.350 --> 00:02:41.510
the character which you want to then display.

00:02:41.510 --> 00:02:43.280
This will tell the browser to then

00:02:43.280 --> 00:02:45.595
render this as part of the string.

00:02:45.595 --> 00:02:49.905
Let's try this. This works exactly the same too.

00:02:49.905 --> 00:02:51.890
Escaping like this also works for

00:02:51.890 --> 00:02:55.530
other characters too such as the double-quotes.

00:02:55.530 --> 00:02:58.345
If we escape it like this, we shouldn't see any problem.

00:02:58.345 --> 00:03:01.195
Let's say this, and that's completely fine.

00:03:01.195 --> 00:03:03.400
But what if we actually wanted to display

00:03:03.400 --> 00:03:06.155
this backslash as part of the string too.

00:03:06.155 --> 00:03:07.930
For this, we need to add a double

00:03:07.930 --> 00:03:09.400
backslash to escape this.

00:03:09.400 --> 00:03:12.880
The first one is rendered as part of the text,

00:03:12.880 --> 00:03:14.980
but the second backslash is used to

00:03:14.980 --> 00:03:17.319
escape this double quotation.

00:03:17.319 --> 00:03:19.330
If we have lots of text rather than

00:03:19.330 --> 00:03:21.130
just a couple of words like we have here,

00:03:21.130 --> 00:03:24.650
we sometimes want to break it up into multiple lines.

00:03:24.650 --> 00:03:26.200
To see an example of this,

00:03:26.200 --> 00:03:29.110
we can go outside of our script and we can generate

00:03:29.110 --> 00:03:32.675
some sample text inside our Visual Studio Code.

00:03:32.675 --> 00:03:35.580
To do this, type in the word Lorem,

00:03:35.580 --> 00:03:38.370
L-O-R-E-M, hit "Enter",

00:03:38.370 --> 00:03:41.140
and then this will give us some sample text to work with.

00:03:41.140 --> 00:03:43.250
Let's copy all of this,

00:03:43.250 --> 00:03:46.320
in fact, we cut this out of place and we'll paste

00:03:46.320 --> 00:03:49.125
this in between our quotations.

00:03:49.125 --> 00:03:52.240
Now if we save this and check this out in the browser,

00:03:52.240 --> 00:03:53.800
since we have lots of text here,

00:03:53.800 --> 00:03:56.260
the browser will automatically wrap this onto

00:03:56.260 --> 00:03:59.330
new lines depending on the width of the browser.

00:03:59.330 --> 00:04:00.820
However, though as a developer,

00:04:00.820 --> 00:04:03.730
if we did want to control exactly when this broke

00:04:03.730 --> 00:04:06.940
onto a new line such as this word just here,

00:04:06.940 --> 00:04:09.535
we may want this to start on a new line.

00:04:09.535 --> 00:04:12.190
To do this, we can use a backslash followed by the letter

00:04:12.190 --> 00:04:15.605
n as many times as we want inside of here.

00:04:15.605 --> 00:04:18.270
Let's find the word we were looking for

00:04:18.270 --> 00:04:21.260
which is this one just here and we can use

00:04:21.260 --> 00:04:22.910
the backslash followed by

00:04:22.910 --> 00:04:26.750
n. Give this a save and refresh the browser.

00:04:26.750 --> 00:04:29.605
This will then break this onto a new line,

00:04:29.605 --> 00:04:31.610
and you can use this inside of this string as

00:04:31.610 --> 00:04:33.485
many times as you would like to.

00:04:33.485 --> 00:04:35.090
Something note to be careful of is,

00:04:35.090 --> 00:04:38.780
we can't have a string over multiple lines.

00:04:38.780 --> 00:04:40.970
What I mean by this is rather than

00:04:40.970 --> 00:04:43.760
using this backslash and n,

00:04:43.760 --> 00:04:45.470
if were to just hit "Enter" and

00:04:45.470 --> 00:04:47.540
place this onto a new line.

00:04:47.540 --> 00:04:50.060
We can do this as many times as we would like to

00:04:50.060 --> 00:04:52.545
, just like this here.

00:04:52.545 --> 00:04:54.170
We can see that the text editor

00:04:54.170 --> 00:04:56.200
is warning us of an issue.

00:04:56.200 --> 00:04:58.990
For string of texts like this, we can't break this onto

00:04:58.990 --> 00:05:00.930
multiple lines and we can

00:05:00.930 --> 00:05:03.215
see this in the browser if we refresh this,

00:05:03.215 --> 00:05:06.310
we see an invalid or unexpected token.

00:05:06.310 --> 00:05:08.060
We do have a couple of different ways we

00:05:08.060 --> 00:05:10.100
can approach it to fix this.

00:05:10.100 --> 00:05:13.115
One of the longer ways to do this is to

00:05:13.115 --> 00:05:14.810
convert each one of our lines of

00:05:14.810 --> 00:05:16.990
text into its own string.

00:05:16.990 --> 00:05:19.650
We can do it like this and you can see this is

00:05:19.650 --> 00:05:22.515
a pretty long way way doing this.

00:05:22.515 --> 00:05:25.415
Then we would also need to use the plus symbol in between

00:05:25.415 --> 00:05:28.595
each line to join this onto the next one.

00:05:28.595 --> 00:05:31.940
For simplicity, we'll just make this as free lines,

00:05:31.940 --> 00:05:35.000
refresh and this all work just like before.

00:05:35.000 --> 00:05:37.370
Or there is a more modern way which

00:05:37.370 --> 00:05:39.770
is to use what is called a template string.

00:05:39.770 --> 00:05:42.905
This replaces the quotes with backticks.

00:05:42.905 --> 00:05:45.380
Let's just undo this

00:05:45.380 --> 00:05:48.755
and reinstate this back to the original error.

00:05:48.755 --> 00:05:50.270
What we can do rather than have

00:05:50.270 --> 00:05:52.700
any single quotes at the beginning and the end,

00:05:52.700 --> 00:05:55.900
we could replace these with what is called a backtick.

00:05:55.900 --> 00:05:57.950
The backtick is located on

00:05:57.950 --> 00:06:00.260
your keyboard and it's a symbol just here.

00:06:00.260 --> 00:06:02.180
In my particular keyboard, it's

00:06:02.180 --> 00:06:04.760
located next to the left Shift key.

00:06:04.760 --> 00:06:07.055
Immediately the text editor will now

00:06:07.055 --> 00:06:09.455
remove the errors and we can save this,

00:06:09.455 --> 00:06:10.820
and this should all work perfectly

00:06:10.820 --> 00:06:12.395
fine inside the browser.

00:06:12.395 --> 00:06:15.565
You can see you're also preserves the line breaks,

00:06:15.565 --> 00:06:18.555
so just after Lorem ipsum, we have a break,

00:06:18.555 --> 00:06:21.920
we then have our second line which is this one just here,

00:06:21.920 --> 00:06:25.045
and then have each line preserved just below this.

00:06:25.045 --> 00:06:27.500
These template literals were introduced to

00:06:27.500 --> 00:06:30.725
JavaScript in ES6 or ES2015,

00:06:30.725 --> 00:06:33.800
and allow us to write multiline strings

00:06:33.800 --> 00:06:35.240
along with some other benefits

00:06:35.240 --> 00:06:37.069
such as inserting variables,

00:06:37.069 --> 00:06:39.025
which we'll take a look at later.

00:06:39.025 --> 00:06:40.700
After this course, we'll take

00:06:40.700 --> 00:06:42.290
a deeper look into strings

00:06:42.290 --> 00:06:43.820
too and discover some of

00:06:43.820 --> 00:06:47.430
the available properties and methods which we can use.
