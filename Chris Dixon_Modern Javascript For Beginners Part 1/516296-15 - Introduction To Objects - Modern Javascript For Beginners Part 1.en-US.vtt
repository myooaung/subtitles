WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:03.090 --> 00:00:06.130
Another object type along with array.

00:00:06.130 --> 00:00:08.205
Well, it's an actual object,

00:00:08.205 --> 00:00:11.355
arrays which we just looked at contain multiple values.

00:00:11.355 --> 00:00:13.780
I'll reference a single value inside of

00:00:13.780 --> 00:00:16.645
the array by accessing the index number,

00:00:16.645 --> 00:00:19.550
which is the position beginning from zero.

00:00:19.550 --> 00:00:22.180
We briefly looked at objects earlier,

00:00:22.180 --> 00:00:24.715
and these are also a collection of values.

00:00:24.715 --> 00:00:28.210
However, an object value is referenced by a key.

00:00:28.210 --> 00:00:30.895
[inaudible] starts files and

00:00:30.895 --> 00:00:33.775
into the introduction to objects.

00:00:33.775 --> 00:00:36.655
We want to begin by creating an object.

00:00:36.655 --> 00:00:40.015
Let's say let user,

00:00:40.015 --> 00:00:43.185
and say this equals to our curly braces.

00:00:43.185 --> 00:00:46.550
Remember from earlier that we can add a series of

00:00:46.550 --> 00:00:49.975
properties which is a key and value pair.

00:00:49.975 --> 00:00:52.380
We have a key, and,

00:00:52.380 --> 00:00:54.855
for example, our user may have a First Name.

00:00:54.855 --> 00:00:57.345
I'm going to set this equal to a string,

00:00:57.345 --> 00:00:59.680
so we have the key and we'll have the value

00:00:59.680 --> 00:01:01.715
and it's this key which we use to access

00:01:01.715 --> 00:01:06.600
any of these values inside of here, separated by comma.

00:01:06.600 --> 00:01:09.975
Let's add a little bit more detail, the second name.

00:01:09.975 --> 00:01:12.620
We place in as many of these as we would like to,

00:01:12.620 --> 00:01:17.120
such as the occupation, web developer.

00:01:17.120 --> 00:01:20.150
For this example, we'll add a Boolean value

00:01:20.150 --> 00:01:22.925
of logged in, set this to be true.

00:01:22.925 --> 00:01:25.655
Finally, we can also add some fields inside of here,

00:01:25.655 --> 00:01:28.550
and this can also contain nested arrays too,

00:01:28.550 --> 00:01:30.980
just like a regular array we'll open up

00:01:30.980 --> 00:01:33.065
the square brackets and we can add

00:01:33.065 --> 00:01:36.840
inside of here as many values as we would like to.

00:01:38.960 --> 00:01:41.120
If we save this,

00:01:41.120 --> 00:01:43.835
and you'll notice here we have the level 1 heading.

00:01:43.835 --> 00:01:45.095
We access this heading,

00:01:45.095 --> 00:01:48.460
I'm going to set this is equal to our user object,

00:01:48.460 --> 00:01:53.865
so replace this string of text with the user variable.

00:01:53.865 --> 00:01:57.515
Save this file and refresh this inside the browser.

00:01:57.515 --> 00:02:01.445
As soon as we do this, we see the value of object Object.

00:02:01.445 --> 00:02:03.140
This is what happens when we try to

00:02:03.140 --> 00:02:04.490
display the full object

00:02:04.490 --> 00:02:08.185
inside the browser rather than an individual property.

00:02:08.185 --> 00:02:11.125
It converts all of this object into a string.

00:02:11.125 --> 00:02:12.730
An object, object is

00:02:12.730 --> 00:02:16.445
the default value which is displayed inside the browser.

00:02:16.445 --> 00:02:18.250
With arrays, we use

00:02:18.250 --> 00:02:21.490
the square brackets to access the values index number,

00:02:21.490 --> 00:02:24.070
but for objects, we instead use

00:02:24.070 --> 00:02:27.605
the square brackets to access each one of these keys.

00:02:27.605 --> 00:02:30.310
Instead of displaying the full user,

00:02:30.310 --> 00:02:32.235
open up the square brackets,

00:02:32.235 --> 00:02:34.480
and then inside, we access

00:02:34.480 --> 00:02:38.015
the property name inside of the string, just like this.

00:02:38.015 --> 00:02:40.980
This is going to reference our user's first name,

00:02:40.980 --> 00:02:43.255
and if we save this and refresh,

00:02:43.255 --> 00:02:46.000
this is now being replaced with the value.

00:02:46.000 --> 00:02:47.560
We can change this to be anything

00:02:47.560 --> 00:02:50.000
else such as the occupation,

00:02:52.430 --> 00:02:55.930
and this also works perfectly fine too.

00:02:55.930 --> 00:02:58.060
Another way we can do this to achieve

00:02:58.060 --> 00:03:02.270
exactly the same thing is to also use the dot notation.

00:03:02.270 --> 00:03:04.450
This is called the bracket notation

00:03:04.450 --> 00:03:06.340
because we are using the square brackets,

00:03:06.340 --> 00:03:08.650
but the dot notation is

00:03:08.650 --> 00:03:11.810
also a way to access any one of these properties too.

00:03:11.810 --> 00:03:14.640
We can say user dot first,

00:03:14.640 --> 00:03:17.385
this works perfectly fine too.

00:03:17.385 --> 00:03:20.170
During development, if we did also want to access

00:03:20.170 --> 00:03:22.135
the full object and see

00:03:22.135 --> 00:03:24.220
all of the available properties inside,

00:03:24.220 --> 00:03:26.915
we can make use of a console log,

00:03:26.915 --> 00:03:29.475
passing our user object and rather than displaying

00:03:29.475 --> 00:03:32.145
object object like we've seen inside the browse,

00:03:32.145 --> 00:03:35.440
if we were to go over to the browser and open up

00:03:35.440 --> 00:03:38.470
the developer tools inside of the console,

00:03:38.470 --> 00:03:40.645
we'll see the full value of this object.

00:03:40.645 --> 00:03:43.195
Once we click on this arrow just here,

00:03:43.195 --> 00:03:46.780
we can also expand any other object types inside,

00:03:46.780 --> 00:03:48.340
such as this array,

00:03:48.340 --> 00:03:51.800
and see all of the contents nested inside that too.

00:03:51.800 --> 00:03:55.390
These console logs can be useful for debugging and

00:03:55.390 --> 00:03:56.920
generally check-in what values are

00:03:56.920 --> 00:03:59.495
contained for any datatype.

00:03:59.495 --> 00:04:02.485
Also as well as this console log if we wanted to

00:04:02.485 --> 00:04:05.230
see the structured inside of a table format,

00:04:05.230 --> 00:04:08.680
we can change this to be a console dot table.

00:04:08.680 --> 00:04:11.020
Now we can save and refresh,

00:04:11.020 --> 00:04:12.820
and this will then display our object

00:04:12.820 --> 00:04:14.395
in a table-like fashion,

00:04:14.395 --> 00:04:16.570
which may be a little bit easier to understand all of

00:04:16.570 --> 00:04:19.355
the data which you have inside of an object.

00:04:19.355 --> 00:04:22.610
These console logs can be useful for debugging and

00:04:22.610 --> 00:04:24.290
generally checking what values are

00:04:24.290 --> 00:04:26.665
contained for any data type.

00:04:26.665 --> 00:04:28.805
If we had multiple objects,

00:04:28.805 --> 00:04:32.045
we can also place them inside of arrays too.

00:04:32.045 --> 00:04:33.815
This will be useful for storing

00:04:33.815 --> 00:04:36.260
lots of users or products.

00:04:36.260 --> 00:04:38.930
Instead of having this object here,

00:04:38.930 --> 00:04:41.660
we could change this into an array and

00:04:41.660 --> 00:04:44.770
then this would allow us to store multiple objects.

00:04:44.770 --> 00:04:48.080
Our first one, and since this is an array,

00:04:48.080 --> 00:04:50.330
we separate each value with a comma,

00:04:50.330 --> 00:04:52.490
and then each one of these objects we can add as

00:04:52.490 --> 00:04:55.315
many properties inside as we would like to.

00:04:55.315 --> 00:04:57.020
Sticking with the same thing we could

00:04:57.020 --> 00:04:59.100
add in the first name,

00:04:59.880 --> 00:05:04.010
and then separated by a comma, the last name.

00:05:04.010 --> 00:05:07.530
Let's just copy the details from this one,

00:05:07.530 --> 00:05:10.200
place this into our second object.

00:05:10.200 --> 00:05:12.615
I'm going to change the names,

00:05:12.615 --> 00:05:15.805
and of course, now we have multiple users.

00:05:15.805 --> 00:05:18.400
We could also change this to be users.

00:05:18.400 --> 00:05:21.940
If this was a real-life application and we were to make

00:05:21.940 --> 00:05:24.730
a database call for a list of all of our users,

00:05:24.730 --> 00:05:27.230
our data may come back like this,

00:05:27.230 --> 00:05:30.625
but now we'll have multiple objects inside of this array.

00:05:30.625 --> 00:05:34.910
Can you work out how to access both of these first names?

00:05:35.120 --> 00:05:39.084
Or remember that since arrays are indexed,

00:05:39.084 --> 00:05:40.990
we can access each object by

00:05:40.990 --> 00:05:43.090
the position inside of the array.

00:05:43.090 --> 00:05:46.360
This first one is index position 0,

00:05:46.360 --> 00:05:48.910
and the second one is index number one,

00:05:48.910 --> 00:05:52.440
so what we need to do is we can remove this.

00:05:52.440 --> 00:05:54.445
This is now called users.

00:05:54.445 --> 00:05:56.440
Open up the square brackets and we can access

00:05:56.440 --> 00:05:59.495
our first user with position zero.

00:05:59.495 --> 00:06:01.550
Remember from before when we were accessing

00:06:01.550 --> 00:06:03.600
the full object, just like this.

00:06:03.600 --> 00:06:07.085
It will display object object inside the browser.

00:06:07.085 --> 00:06:09.280
What we need to do is to access any one of

00:06:09.280 --> 00:06:12.745
these individual properties by the name of the key.

00:06:12.745 --> 00:06:15.970
We have the two keys of first and last.

00:06:15.970 --> 00:06:21.125
Let's go for the first, save this, and refresh.

00:06:21.125 --> 00:06:23.940
This has given us an error since the user is not defined.

00:06:23.940 --> 00:06:26.800
Let's take a look at the problem.

00:06:26.930 --> 00:06:29.520
I choose this console table here.

00:06:29.520 --> 00:06:30.970
We're trying to log out the user,

00:06:30.970 --> 00:06:33.235
but this has been changed to users,

00:06:33.235 --> 00:06:35.110
then reload the browser and we

00:06:35.110 --> 00:06:37.060
now accessing our first name.

00:06:37.060 --> 00:06:41.600
Let's go for the second object, so position one.

00:06:41.810 --> 00:06:45.310
This is how we access the values contained when we have

00:06:45.310 --> 00:06:48.355
multiple objects stored inside of an array.

00:06:48.355 --> 00:06:50.905
Along with users are also many,

00:06:50.905 --> 00:06:53.575
many other use cases for this kind of setup.

00:06:53.575 --> 00:06:56.590
For example, if you had an e-commerce store with

00:06:56.590 --> 00:06:58.800
all the collection of products and

00:06:58.800 --> 00:07:01.200
also the shopping basket could be an empty array,

00:07:01.200 --> 00:07:03.685
then each time the user adds a new product,

00:07:03.685 --> 00:07:06.620
the object will then pushed to this array.

00:07:06.620 --> 00:07:09.720
As you can see, there is many use cases for this and

00:07:09.720 --> 00:07:11.190
also so much more to discover

00:07:11.190 --> 00:07:13.305
with objects and arrays too.

00:07:13.305 --> 00:07:15.260
We'll go a lot deeper into

00:07:15.260 --> 00:07:18.060
these in the upcoming sections.
