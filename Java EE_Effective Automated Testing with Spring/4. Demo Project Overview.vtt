WEBVTT
1
00:00:02.042 --> 00:00:03.390
Throughout the rest of this course,

2
00:00:03.390 --> 00:00:06.084
we will be demonstrating automated testing principles by applying

3
00:00:06.084 --> 00:00:10.804
them to a simple hotel reservation application built following a

4
00:00:10.804 --> 00:00:12.579
microservices architectural pattern.

5
00:00:12.579 --> 00:00:14.950
If you're unfamiliar with the term microservices,

6
00:00:14.950 --> 00:00:18.434
it's an architectural pattern of building small,

7
00:00:18.434 --> 00:00:19.000
domain-bounded,

8
00:00:19.000 --> 00:00:23.641
and independently-deployable services that communicate over a lightweight API.

9
00:00:23.641 --> 00:00:26.551
A common practice is to have microservices

10
00:00:26.551 --> 00:00:29.277
communicating via JSON over a RESTful API.

11
00:00:29.277 --> 00:00:32.467
The goal of microservices is to allow businesses to

12
00:00:32.467 --> 00:00:36.347
more easily scale horizontally, as the unit of scale is smaller,

13
00:00:36.347 --> 00:00:38.897
if there's heavy demand, to look up say,

14
00:00:38.897 --> 00:00:39.215
bookings,

15
00:00:39.215 --> 00:00:43.154
it is easier and cheaper to spin up an additional booking service instance

16
00:00:43.154 --> 00:00:47.038
to meet demand than to have to spin up an additional instance of a

17
00:00:47.038 --> 00:00:49.993
monolithic application that performs all booking,

18
00:00:49.993 --> 00:00:52.138
customer, and room functionality.

19
00:00:52.138 --> 00:00:54.494
Microservices, being independently deployable,

20
00:00:54.494 --> 00:00:58.281
also allow for easier replacement of services as they

21
00:00:58.281 --> 00:00:59.998
become obsolete or out of date.

22
00:00:59.998 --> 00:01:02.652
The drawback to microservices is they require a

23
00:01:02.652 --> 00:01:05.684
more mature DevOps infrastructure, they have heavy network traffic,

24
00:01:05.684 --> 00:01:07.895
which could lead to latency issues,

25
00:01:07.895 --> 00:01:12.162
and the overall architecture might be more difficult to understand.

26
00:01:12.162 --> 00:01:15.862
I'm using a microservice application as a demonstration for automated testing,

27
00:01:15.862 --> 00:01:19.211
as it offers more interesting test case scenarios,

28
00:01:19.211 --> 00:01:23.319
also as microservices are an increasingly popular architectural pattern,

29
00:01:23.319 --> 00:01:27.171
this course can also double as an introduction to microservices.

30
00:01:27.171 --> 00:01:30.544
Let's take a brief overview of what this application will look like,

31
00:01:30.544 --> 00:01:34.784
and review some of the terminology to make sure we're on the same page.

32
00:01:34.784 --> 00:01:37.107
Looking at the diagram from left to right,

33
00:01:37.107 --> 00:01:39.899
first we have the SPA, or single-page application.

34
00:01:39.899 --> 00:01:44.869
The SPA comprises the UI through which users interact with the application.

35
00:01:44.869 --> 00:01:48.392
As this course is primarily focused on testing in Spring,

36
00:01:48.392 --> 00:01:52.075
we won't dive too deeply into the subject of SPAs.

37
00:01:52.075 --> 00:01:54.735
Next, we have the API gateway.

38
00:01:54.735 --> 00:01:58.287
The API gateway offers a point of abstraction between the client,

39
00:01:58.287 --> 00:02:02.072
in our case a SPA, and the back-end services.

40
00:02:02.072 --> 00:02:02.347
Fundamentally,

41
00:02:02.347 --> 00:02:06.499
the API gateway exists so the SPA doesn't become too aware of back-end details,

42
00:02:06.499 --> 00:02:09.884
which would prevent the back end from revolving and

43
00:02:09.884 --> 00:02:12.196
changing as business needs change.

44
00:02:12.196 --> 00:02:16.244
The gateway API can also offer other benefits like security,

45
00:02:16.244 --> 00:02:19.548
load balancing, and light orchestration.

46
00:02:19.548 --> 00:02:22.110
Light orchestration is the manipulation of models to be in a

47
00:02:22.110 --> 00:02:25.176
more convenient form for the client to handle.

48
00:02:25.176 --> 00:02:26.937
Next is a service registry.

49
00:02:26.937 --> 00:02:30.678
In a monolithic architecture in which there is a limited number

50
00:02:30.678 --> 00:02:33.281
of instances of an application in a region,

51
00:02:33.281 --> 00:02:35.548
and a limited number of applications overall,

52
00:02:35.548 --> 00:02:37.437
it can be practical, if cumbersome,

53
00:02:37.437 --> 00:02:40.104
to put the information needed to connect to these

54
00:02:40.104 --> 00:02:41.865
applications in a configuration file.

55
00:02:41.865 --> 00:02:44.779
In our demo, this would also be possible,

56
00:02:44.779 --> 00:02:49.081
but in a real-world microservices application in which there might be

57
00:02:49.081 --> 00:02:52.861
dozens of different services and multiple instances of a service

58
00:02:52.861 --> 00:02:56.232
possibly spinning up in response to client demand,

59
00:02:56.232 --> 00:03:00.620
it's no longer practical to keep such information in a property file.

60
00:03:00.620 --> 00:03:06.046
Registry services like Neflix's Eureka are designed to fill this gap.

61
00:03:06.046 --> 00:03:10.092
A registry service has two parts, a client and a server.

62
00:03:10.092 --> 00:03:11.603
The server portion is highlighted,

63
00:03:11.603 --> 00:03:15.166
but all the other boxes with dotted lines pointing to

64
00:03:15.166 --> 00:03:18.061
the service registry include a client.

65
00:03:18.061 --> 00:03:22.524
The client is designed at startup to self-register with a service registry.

66
00:03:22.524 --> 00:03:24.694
The instant a customer service is spun up,

67
00:03:24.694 --> 00:03:27.205
it will call to the service registry and say,

68
00:03:27.205 --> 00:03:30.441
I am a customer service and I reside at this address.

69
00:03:30.441 --> 00:03:33.580
The service registry will respond to the customer service by returning a

70
00:03:33.580 --> 00:03:37.106
list of types of services available and where they reside.

71
00:03:37.106 --> 00:03:40.429
This customer service, if it needs to call the booking service,

72
00:03:40.429 --> 00:03:44.065
will use this information to determine where to route the call to.

73
00:03:44.065 --> 00:03:45.824
Finally, we have the RESTful services.

74
00:03:45.824 --> 00:03:48.524
These are the actual domain-bounded contexts mentioned

75
00:03:48.524 --> 00:03:51.581
earlier in a definition of microservice.

76
00:03:51.581 --> 00:03:55.114
These services actually provide the business value of the application.

77
00:03:55.114 --> 00:03:55.680
Strictly speaking,

78
00:03:55.680 --> 00:03:58.860
a microservice does not have to use REST to communicate; however,

79
00:03:58.860 --> 00:04:02.407
REST is a common choice as the protocol has become very

80
00:04:02.407 --> 00:04:05.177
popular and significant tooling has been developed to

81
00:04:05.177 --> 00:04:06.657
support designing RESTful APIS.

82
00:04:06.657 --> 00:04:10.138
If you're interested in learning more about domain-bounded contexts,

83
00:04:10.138 --> 00:04:13.172
I would highly recommend Eric Evans' book,

84
00:04:13.172 --> 00:04:14.193
Domain-Driven Design.

85
00:04:14.193 --> 00:04:24.000
There is also a highly-reviewed domain-driven design course on Pluralsight by Julie Lerman and Steve Smith that covers the book.

