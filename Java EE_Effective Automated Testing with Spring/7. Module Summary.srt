1
00:00:02,124 --> 00:00:05,419
In this module, we covered the goals of system integration testing.

2
00:00:05,419 --> 00:00:09,924
Integration testing makes up a key aspect of testing an application,

3
00:00:09,924 --> 00:00:11,037
microservice or otherwise.

4
00:00:11,037 --> 00:00:15,238
While unit testing can cover a significant number of test cases and

5
00:00:15,238 --> 00:00:18,060
roughly makes up the majority of automated tests run,

6
00:00:18,060 --> 00:00:20,367
integration testing is key to ensuring that all

7
00:00:20,367 --> 00:00:22,598
parts of a system can work together.

8
00:00:22,598 --> 00:00:23,623
During this module,

9
00:00:23,623 --> 00:00:26,950
we also learned about some of the tools that have made the

10
00:00:26,950 --> 00:00:28,880
process of integration testing not only easier,

11
00:00:28,880 --> 00:00:29,829
but more reliable.

12
00:00:29,829 --> 00:00:32,736
Instead of having to depend upon deployed instances of

13
00:00:32,736 --> 00:00:35,090
a service being in a useful state,

14
00:00:35,090 --> 00:00:39,866
tools like test container allow instances of services to be spun up on demand,

15
00:00:39,866 --> 00:00:45,220
and tools like Spring Cloud Contract allow a simulation of services as well.

16
00:00:45,220 --> 00:00:49,408
And the use of contracts can validate that those services will

17
00:00:49,408 --> 00:00:52,448
actually communicate when deployed in an environment.

18
00:00:52,448 --> 00:00:55,964
These tools help make integration testing not only much faster to run,

19
00:00:55,964 --> 00:00:59,983
allowing them to be run more often, but also much more reliable,

20
00:00:59,983 --> 00:01:10,000
allowing test failures to be taken more seriously instead of being excused as a result of system instability or similar other such excuses.

