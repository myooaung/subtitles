1
00:00:02,487 --> 00:00:06,263
Spring Cloud Contract is one of the many tools developed by the Spring Pivotal

2
00:00:06,263 --> 00:00:09,644
team that helps with the development and testing of software.

3
00:00:09,644 --> 00:00:14,940
Spring Cloud Contract works on the concept of contract-first development.

4
00:00:14,940 --> 00:00:17,269
Rather than starting to write an application by building

5
00:00:17,269 --> 00:00:18,579
up just low-level implementations,

6
00:00:18,579 --> 00:00:22,175
such as database calls and building business logic out first,

7
00:00:22,175 --> 00:00:24,298
and eventually writing out the endpoints,

8
00:00:24,298 --> 00:00:27,879
contract-first development inverses behavior by starting

9
00:00:27,879 --> 00:00:30,916
with the contract and working from there.

10
00:00:30,916 --> 00:00:32,760
This better allows for parallel development,

11
00:00:32,760 --> 00:00:35,406
as well as hopefully pushing forward business decisions.

12
00:00:35,406 --> 00:00:39,480
Let's take a look at how Spring Cloud Contract accomplishes this goal,

13
00:00:39,480 --> 00:00:43,592
as well as some other problems it seeks to resolve.

14
00:00:43,592 --> 00:00:46,094
Imagine we're making some changes to Service A over

15
00:00:46,094 --> 00:00:48,040
in the top left of the screen.

16
00:00:48,040 --> 00:00:52,199
Service A talks to Service B, and Service B talks to the database.

17
00:00:52,199 --> 00:00:56,539
Service A also talks to Service C, and Service C talks to Service D,

18
00:00:56,539 --> 00:00:59,268
which subsequently talks to Service E.

19
00:00:59,268 --> 00:01:00,928
Running integration tests locally,

20
00:01:00,928 --> 00:01:04,187
in which Service A talks to real instances of Service B

21
00:01:04,187 --> 00:01:07,184
and C would be time consuming to set up,

22
00:01:07,184 --> 00:01:09,931
as well as taxing on a developer's machine.

23
00:01:09,931 --> 00:01:11,905
TestContainers, and containerization in general,

24
00:01:11,905 --> 00:01:14,494
as great and lightweight as they are,

25
00:01:14,494 --> 00:01:17,652
still wouldn't be an effective solution to this issue.

26
00:01:17,652 --> 00:01:20,033
Spring Cloud Contract attempts to address this

27
00:01:20,033 --> 00:01:22,890
problem by allowing you to call stubs.

28
00:01:22,890 --> 00:01:26,785
Calling stubs instead of live services allows tests to run faster,

29
00:01:26,785 --> 00:01:30,834
and removes all the difficult setup of recreating an environment.

30
00:01:30,834 --> 00:01:33,774
But how does Spring Cloud Contract ensure that the stubs we are

31
00:01:33,774 --> 00:01:36,850
calling are honest representations of the services our service

32
00:01:36,850 --> 00:01:38,981
will be calling in production?

33
00:01:38,981 --> 00:01:42,357
This is where contract-first development comes in.

34
00:01:42,357 --> 00:01:45,424
Spring Cloud Contract, using the Groovy language,

35
00:01:45,424 --> 00:01:50,034
has a domain-specific language, or DSL, for defining contracts.

36
00:01:50,034 --> 00:01:53,179
In that contract, you will define a request,

37
00:01:53,179 --> 00:01:55,523
the HTTP verb used, endpoint called,

38
00:01:55,523 --> 00:02:00,152
and optionally a body or headers that will be sent as well.

39
00:02:00,152 --> 00:02:03,841
You will also define the response that will be returned for that request.

40
00:02:03,841 --> 00:02:05,152
One final note on this.

41
00:02:05,152 --> 00:02:08,536
These contracts are being written by the consumer of a service.

42
00:02:08,536 --> 00:02:13,766
While it might be odd to have consumers telling a producer what to do,

43
00:02:13,766 --> 00:02:16,001
following a consumer-driven contract development cycle

44
00:02:16,001 --> 00:02:20,493
ensures that you're following the, you aren't going to need it,

45
00:02:20,493 --> 00:02:21,737
or YAGNI, principle.

46
00:02:21,737 --> 00:02:26,817
Instead of producers guessing what a consumer of their service might want,

47
00:02:26,817 --> 00:02:28,534
they are explicitly told,

48
00:02:28,534 --> 00:02:31,613
the producer is explicitly told what needs to be written,

49
00:02:31,613 --> 00:02:35,769
ensuring producers don't write a bunch of useless endpoints.

50
00:02:35,769 --> 00:02:36,354
Moving on,

51
00:02:36,354 --> 00:02:40,250
these contracts are then stored in the code base of the producer's service,

52
00:02:40,250 --> 00:02:44,016
as that's the service that ultimately has to implement the code,

53
00:02:44,016 --> 00:02:46,136
and thus the source of truth.

54
00:02:46,136 --> 00:02:48,519
Then, using the contract written,

55
00:02:48,519 --> 00:02:52,235
Spring Cloud Contract generates tests that verifies that the producing

56
00:02:52,235 --> 00:02:55,101
service is fulfilling the obligations of the tests.

57
00:02:55,101 --> 00:02:58,876
This code is the simplified example of what these

58
00:02:58,876 --> 00:03:01,054
generated tests would look like.

59
00:03:01,054 --> 00:03:03,259
While in a demo we'll be walking through shortly,

60
00:03:03,259 --> 00:03:05,402
we'll be doing all the development locally,

61
00:03:05,402 --> 00:03:07,661
in most real development workshop environments,

62
00:03:07,661 --> 00:03:11,700
the developer of the producer code will check their changes into a

63
00:03:11,700 --> 00:03:14,766
repository once they have finished implementing the contract.

64
00:03:14,766 --> 00:03:18,845
Once checked in, if good CICD practices are being followed,

65
00:03:18,845 --> 00:03:20,865
this will kick off a build.

66
00:03:20,865 --> 00:03:22,211
During the build process,

67
00:03:22,211 --> 00:03:26,109
Spring Cloud Contract will produce an artifact that simulates,

68
00:03:26,109 --> 00:03:29,600
or stubs out, an implementation of the producer service.

69
00:03:29,600 --> 00:03:33,554
These stubs will then be stored in an artifact repository,

70
00:03:33,554 --> 00:03:39,394
Nexus, Artifactory, etc., which can then be pulled down to a developer machine.

71
00:03:39,394 --> 00:03:42,236
The developer of a consuming service would then write a

72
00:03:42,236 --> 00:03:44,759
test that looks something like this.

73
00:03:44,759 --> 00:03:49,403
In the test class, the autoConfigureStubRunner would be added.

74
00:03:49,403 --> 00:03:52,999
The ID section would then have the Maven coordinates,

75
00:03:52,999 --> 00:03:54,198
group ID, colon,

76
00:03:54,198 --> 00:03:59,587
artifact ID of the producer's service of the stubs artifact that was built.

77
00:03:59,587 --> 00:04:04,015
The plus sign notes to always get the latest version of the stubs artifact.

78
00:04:04,015 --> 00:04:08,669
Finally, a port number the stubs will run on can be optionally specified.

79
00:04:08,669 --> 00:04:09,810
Within the test of course,

80
00:04:09,810 --> 00:04:13,164
you will call the code that will then make calls to the

81
00:04:13,164 --> 00:04:15,330
producer that verifies that contract.

82
00:04:15,330 --> 00:04:17,494
Because you're getting the latest instance of the

83
00:04:17,494 --> 00:04:19,081
stubs from your artifact repository,

84
00:04:19,081 --> 00:04:22,526
and because every time the producer service is built

85
00:04:22,526 --> 00:04:24,236
the stubs artifact is updated,

86
00:04:24,236 --> 00:04:27,900
and because the stubs artifact is only updated because the producer

87
00:04:27,900 --> 00:04:30,451
service has passed tests created off the contract,

88
00:04:30,451 --> 00:04:34,013
you can be confident that these tests are faithful reproductions of

89
00:04:34,013 --> 00:04:36,765
how this service would interact in production.

90
00:04:36,765 --> 00:04:41,036
Using Spring Cloud Contract greatly assists in integration testing,

91
00:04:41,036 --> 00:04:44,682
as you are no longer relying upon test data being present,

92
00:04:44,682 --> 00:04:49,637
or a test service being available in order to execute an integration test.

93
00:04:49,637 --> 00:04:52,253
This leads to tests that are easy to write and more

94
00:04:52,253 --> 00:04:53,920
reliable so that when tests fail,

95
00:04:53,920 --> 00:04:57,582
it's because either the consumer or producer is breaking the contract,

96
00:04:57,582 --> 00:05:01,600
not test data going stale or our service becoming unavailable.

97
00:05:01,600 --> 00:05:05,443
In the next section, I will give a demo on how Spring Cloud Contract works,

98
00:05:05,443 --> 00:05:12,000
and we'll go into more depth on some important points I glossed over in this section.

