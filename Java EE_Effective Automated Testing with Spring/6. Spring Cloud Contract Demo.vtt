WEBVTT
1
00:00:01.927 --> 00:00:02.589
During this demo,

2
00:00:02.589 --> 00:00:05.016
we're going to look at how we can use Spring Cloud

3
00:00:05.016 --> 00:00:07.921
Contract to set up a RESTful endpoint.

4
00:00:07.921 --> 00:00:10.788
In the booking service, I have added a contract.

5
00:00:10.788 --> 00:00:13.566
This contract specifies what a successful request for

6
00:00:13.566 --> 00:00:15.700
booking a room would look like.

7
00:00:15.700 --> 00:00:18.976
The HTTP method for this call is a POST.

8
00:00:18.976 --> 00:00:20.959
It is calling the bookings endpoints.

9
00:00:20.959 --> 00:00:25.007
For the body, we will send the fields customerId,

10
00:00:25.007 --> 00:00:28.477
roomNumber, checkIn, and checkOut.

11
00:00:28.477 --> 00:00:33.443
Rather than specifying specific values, instead I am using regexes.

12
00:00:33.443 --> 00:00:36.703
As mentioned during the section introducing integration testing,

13
00:00:36.703 --> 00:00:39.618
we generally want to avoid specific examples.

14
00:00:39.618 --> 00:00:42.509
While there isn't a concern regarding test data going stale,

15
00:00:42.509 --> 00:00:46.158
as we can simply mock out all that behavior,

16
00:00:46.158 --> 00:00:50.638
using regexes provides more information on what the data should look like.

17
00:00:50.638 --> 00:00:55.103
Using regexes also avoids any sort of bias in a data being set.

18
00:00:55.103 --> 00:00:57.884
The regexes I set up aren't quite perfect,

19
00:00:57.884 --> 00:01:01.512
namely for the dates, but they are good enough for this example.

20
00:01:01.512 --> 00:01:04.572
Finally for the request, we are specifying the headers.

21
00:01:04.572 --> 00:01:07.403
In this case, we are sending the data as JSON.

22
00:01:07.403 --> 00:01:12.313
For the response, we are specifying the response code 201,

23
00:01:12.313 --> 00:01:17.516
or created, and 201, by convention, returns a location header value,

24
00:01:17.516 --> 00:01:20.259
which should be the location of the newly created resource,

25
00:01:20.259 --> 00:01:22.651
which in this case would be bookings/1.

26
00:01:22.651 --> 00:01:28.783
So we have a contract, how do we take this and actually test with it?

27
00:01:28.783 --> 00:01:33.204
In the POM I added the Spring Cloud Contract plugin.

28
00:01:33.204 --> 00:01:37.390
This will read contracts and generate test classes from them.

29
00:01:37.390 --> 00:01:41.709
Additionally, I specify a base class that these tests will use.

30
00:01:41.709 --> 00:01:46.236
The base class is used for fulfilling test case requirements.

31
00:01:46.236 --> 00:01:48.847
Let's take a look at this base class.

32
00:01:48.847 --> 00:01:50.479
In the base class file,

33
00:01:50.479 --> 00:01:54.191
I am setting up my mod so that if any value is passed into the

34
00:01:54.191 --> 00:01:56.674
addBooking method in the BookingService,

35
00:01:56.674 --> 00:01:59.653
I'm returning 1 as the ID.

36
00:01:59.653 --> 00:02:01.155
Looking at the controller,

37
00:02:01.155 --> 00:02:04.988
it's currently set up as a passthrough of passing the

38
00:02:04.988 --> 00:02:07.893
booking request object directly to a service.

39
00:02:07.893 --> 00:02:10.595
Obviously this is a dramatically simplified example,

40
00:02:10.595 --> 00:02:14.383
but trying to resemble a more real-world example would only

41
00:02:14.383 --> 00:02:17.086
obfuscate what Spring Cloud Contract is doing.

42
00:02:17.086 --> 00:02:19.057
If we run Maven install,

43
00:02:19.057 --> 00:02:24.348
we can have Spring Cloud Contract generate and execute the test cases.

44
00:02:24.348 --> 00:02:25.957
So the build is successful.

45
00:02:25.957 --> 00:02:26.923
That is good.

46
00:02:26.923 --> 00:02:29.143
If we look through the Maven console output,

47
00:02:29.143 --> 00:02:34.742
near the top we can see the Cloud Contract plugin generating the test cases.

48
00:02:34.742 --> 00:02:39.015
We can see what these test cases look like under the target folder.

49
00:02:39.015 --> 00:02:41.007
So here in the ContractVerifier test,

50
00:02:41.007 --> 00:02:44.600
we can see what the actual test case looks like.

51
00:02:44.600 --> 00:02:49.120
While BookingService isn't doing anything with the data being passed in,

52
00:02:49.120 --> 00:02:51.848
if it changes anything about the contract,

53
00:02:51.848 --> 00:02:55.757
endpoint, fields, class, fields accepted,

54
00:02:55.757 --> 00:02:59.857
status code returned, these tests will fail,

55
00:02:59.857 --> 00:03:02.490
and that is Cloud Contract's goal.

56
00:03:02.490 --> 00:03:05.790
Additionally, Cloud Contract, when given regexes,

57
00:03:05.790 --> 00:03:10.462
will automatically generate test data that fits with the regex parameters.

58
00:03:10.462 --> 00:03:14.604
The date fields, as mentioned, don't really make sense.

59
00:03:14.604 --> 00:03:19.189
If we spent more time on the regexes, we could ensure only validates are sent,

60
00:03:19.189 --> 00:03:22.327
but that's a bit beyond the scope of this demo.

61
00:03:22.327 --> 00:03:26.342
I'm demoing Spring Cloud Contract, not Regexes.

62
00:03:26.342 --> 00:03:28.816
Additionally under the target folder,

63
00:03:28.816 --> 00:03:33.268
we can see the stubs JAR Cloud Contract creates.

64
00:03:33.268 --> 00:03:36.783
If we journey over to the consumer of the service,

65
00:03:36.783 --> 00:03:40.882
the room service, we can see the other side of Cloud Contract.

66
00:03:40.882 --> 00:03:41.963
With AutoConfigureStubRunner,

67
00:03:41.963 --> 00:03:47.370
I'm establishing the link between this test class and the

68
00:03:47.370 --> 00:03:50.074
contracts it'll be validating against.

69
00:03:50.074 --> 00:03:52.578
To do that, as mentioned in a previous section,

70
00:03:52.578 --> 00:03:55.575
I give the Maven coordinates, the group ID,

71
00:03:55.575 --> 00:04:00.877
and the artifact ID that contains the contract I want to verify.

72
00:04:00.877 --> 00:04:03.284
So in this case, the BookingService.

73
00:04:03.284 --> 00:04:06.336
The plus sign says to always get the latest JAR.

74
00:04:06.336 --> 00:04:12.841
The 801 tells Cloud Contract what port to run the wire mock server on.

75
00:04:12.841 --> 00:04:13.818
In the booking-service,

76
00:04:13.818 --> 00:04:16.425
it's making a hard-coded call to where the

77
00:04:16.425 --> 00:04:18.958
RoomService will be located in our test.

78
00:04:18.958 --> 00:04:21.867
Back in our test, if we run it, we see green.

79
00:04:21.867 --> 00:04:25.955
If I was to change this test up, say include a letter in the customer ID,

80
00:04:25.955 --> 00:04:29.116
as we can see, the test fails.

81
00:04:29.116 --> 00:04:32.278
If we look in the console output,

82
00:04:32.278 --> 00:04:35.123
Spring Cloud Contract provides us useful information on how

83
00:04:35.123 --> 00:04:38.111
our test is failing to fulfill the contract.

84
00:04:38.111 --> 00:04:39.681
With Spring Cloud Contract,

85
00:04:39.681 --> 00:04:42.329
we have the confidence that our service will play nice with one

86
00:04:42.329 --> 00:04:44.548
another when deployed out on shared environment,

87
00:04:44.548 --> 00:04:53.000
and we can verify all this without all the normal fuss of setting up a bunch of services to run on our local machine.

