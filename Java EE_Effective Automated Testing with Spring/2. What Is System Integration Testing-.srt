1
00:00:02,573 --> 00:00:04,115
Like other types of testing,

2
00:00:04,115 --> 00:00:08,831
system integration testing has its own unique set of goals and characteristics.

3
00:00:08,831 --> 00:00:12,552
It's important to understand what they are to help ensure that

4
00:00:12,552 --> 00:00:16,326
applications we develop have proper automated test coverage.

5
00:00:16,326 --> 00:00:16,966
In doing so,

6
00:00:16,966 --> 00:00:19,314
we are able to deliver on the goals of automated testing

7
00:00:19,314 --> 00:00:23,185
that verify the correctness of code, document how our system behaves,

8
00:00:23,185 --> 00:00:25,275
and detecting regressions.

9
00:00:25,275 --> 00:00:29,188
Earlier in this course, I introduced the testing pyramid.

10
00:00:29,188 --> 00:00:29,832
In this module,

11
00:00:29,832 --> 00:00:31,979
we are getting near the top of the pyramid in

12
00:00:31,979 --> 00:00:33,670
covering system integration testing.

13
00:00:33,670 --> 00:00:36,622
So what is system integration testing?

14
00:00:36,622 --> 00:00:38,158
Well as the name suggests,

15
00:00:38,158 --> 00:00:40,850
it is testing how applications and services communicate,

16
00:00:40,850 --> 00:00:43,555
or integrate, with one another.

17
00:00:43,555 --> 00:00:46,622
With that, there are two major goals of integration testing,

18
00:00:46,622 --> 00:00:50,905
validating contracts and testing specific failure scenarios.

19
00:00:50,905 --> 00:00:55,146
To get an idea of what I mean for the first goal, let's play through a scenario.

20
00:00:55,146 --> 00:00:58,572
So we have our customer service and order service.

21
00:00:58,572 --> 00:01:03,195
The customer service talks to the order service through a few endpoints,

22
00:01:03,195 --> 00:01:08,364
GET:/orders/id, POST:/orders, and GET:/orders/customer/id/history.

23
00:01:08,364 --> 00:01:14,058
These services are deployed to prod, or some environment,

24
00:01:14,058 --> 00:01:16,343
and generally communication is going fine.

25
00:01:16,343 --> 00:01:18,809
Calls to GET:/orders/id work.

26
00:01:18,809 --> 00:01:21,891
Calls to POST:/orders id work.

27
00:01:21,891 --> 00:01:26,714
However, when customer service calls orders/customer/id/history,

28
00:01:26,714 --> 00:01:28,048
we get a failure.

29
00:01:28,048 --> 00:01:29,049
This is odd.

30
00:01:29,049 --> 00:01:33,841
You go to the customer service code and look at where

31
00:01:33,841 --> 00:01:35,685
it's calling orders/customer/id/history.

32
00:01:35,685 --> 00:01:37,046
Well that looks fine.

33
00:01:37,046 --> 00:01:41,129
You go to your test, you run the test, and they pass.

34
00:01:41,129 --> 00:01:42,739
Okay, so customer service is fine.

35
00:01:42,739 --> 00:01:47,016
You go and look and the order service and how its endpoints are set up.

36
00:01:47,016 --> 00:01:48,324
Well, those look fine as well.

37
00:01:48,324 --> 00:01:51,989
Again then, we go to look at the unit test for order service.

38
00:01:51,989 --> 00:01:55,822
We run a test, and it too returns green.

39
00:01:55,822 --> 00:01:57,094
Well this is really weird.

40
00:01:57,094 --> 00:02:00,946
The code looks fine, the tests are passing, but our code is failing.

41
00:02:00,946 --> 00:02:03,362
This is a classic case of unit testing your code,

42
00:02:03,362 --> 00:02:04,973
but not integration testing your code.

43
00:02:04,973 --> 00:02:08,293
While it's important when unit testing, and even component integration testing,

44
00:02:08,293 --> 00:02:11,166
to keep chunks of code we are testing isolated,

45
00:02:11,166 --> 00:02:14,688
we mustn't forget that our code will eventually have to

46
00:02:14,688 --> 00:02:16,086
communicate with outside sources.

47
00:02:16,086 --> 00:02:21,042
So we need to write tests that actually simulate such behavior.

48
00:02:21,042 --> 00:02:22,042
If you are watching closely,

49
00:02:22,042 --> 00:02:25,367
you might have already noticed what the issue is in my example.

50
00:02:25,367 --> 00:02:28,345
While the customer service was calling orders/customer/id/history,

51
00:02:28,345 --> 00:02:32,873
order service actually named the endpoint order/customer/id/histories.

52
00:02:32,873 --> 00:02:39,573
So this is the first goal of integration testing, validate contracts.

53
00:02:39,573 --> 00:02:44,185
So what exactly do I mean when I say validate contracts?

54
00:02:44,185 --> 00:02:45,832
Well as in the given example,

55
00:02:45,832 --> 00:02:49,909
one part of that would be validating an endpoint and our addresses.

56
00:02:49,909 --> 00:02:54,452
This doesn't merely mean resting points or something over HTTP,

57
00:02:54,452 --> 00:02:58,756
but could also mean a database table name for example.

58
00:02:58,756 --> 00:03:02,683
A second element of validating contracts would be validating shapes.

59
00:03:02,683 --> 00:03:07,236
This would mean validating fields, field names, and the format of fields.

60
00:03:07,236 --> 00:03:11,492
Is a name of a field first name or FName, for example?

61
00:03:11,492 --> 00:03:15,233
Or, like from the JSON example in the Component Testing module,

62
00:03:15,233 --> 00:03:17,944
how a date field is being represented.

63
00:03:17,944 --> 00:03:22,465
Another element of validating contracts would be security requirements.

64
00:03:22,465 --> 00:03:23,715
When calling another service,

65
00:03:23,715 --> 00:03:26,492
is a consumer passing the correct security information,

66
00:03:26,492 --> 00:03:30,098
and is a producer properly checking for security?

67
00:03:30,098 --> 00:03:32,354
These are some of the major elements of contract validation,

68
00:03:32,354 --> 00:03:35,104
but is by no means all inclusive; however,

69
00:03:35,104 --> 00:03:38,861
remember, we are validating contracts, not specific scenarios.

70
00:03:38,861 --> 00:03:42,658
So when validating a field, say a phone number field,

71
00:03:42,658 --> 00:03:45,094
you'll want to test that the field is a string,

72
00:03:45,094 --> 00:03:48,723
all the characters are numeric, and there are exactly 10 characters,

73
00:03:48,723 --> 00:03:51,882
rather than looking for a specific phone number.

74
00:03:51,882 --> 00:03:56,287
Doing the former helps to keep tests more maintainable should test data change.

75
00:03:56,287 --> 00:04:00,122
It also better communicates the requirements of the field.

76
00:04:00,122 --> 00:04:02,111
While I just spent a lot of time talking about

77
00:04:02,111 --> 00:04:03,625
high-level testing with validating contracts,

78
00:04:03,625 --> 00:04:08,124
there's another element of integration testing that goes against that wisdom.

79
00:04:08,124 --> 00:04:12,514
At a previous client, I wrote a workhorse management service.

80
00:04:12,514 --> 00:04:16,925
This service of course worked great and had quite good unit test coverage.

81
00:04:16,925 --> 00:04:18,894
The service also talked with a database.

82
00:04:18,894 --> 00:04:20,301
And most of the time,

83
00:04:20,301 --> 00:04:24,908
this service happily communicated with the database sending SQL queries.

84
00:04:24,908 --> 00:04:28,108
Until, of course, it didn't, and it brought down my service.

85
00:04:28,108 --> 00:04:29,015
At a high level,

86
00:04:29,015 --> 00:04:32,586
the issue I was running into was the database my service was talking to

87
00:04:32,586 --> 00:04:35,363
would occasionally be brought down for maintenance; however,

88
00:04:35,363 --> 00:04:38,645
even after the database was brought back up,

89
00:04:38,645 --> 00:04:42,005
my service couldn't successfully call the database.

90
00:04:42,005 --> 00:04:42,750
The problem was,

91
00:04:42,750 --> 00:04:46,584
my data source wasn't dumping connections from the connection pool that failed.

92
00:04:46,584 --> 00:04:49,229
The fix was relatively simple; however,

93
00:04:49,229 --> 00:04:52,314
an integration test simulating this scenario would be necessary,

94
00:04:52,314 --> 00:04:55,654
as a unit test couldn't give the appropriate

95
00:04:55,654 --> 00:04:58,004
confidence that the issues remain fixed.

96
00:04:58,004 --> 00:05:01,130
So the two major goals of integration testing are to validate

97
00:05:01,130 --> 00:05:03,377
contracts and to test failure scenarios.

98
00:05:03,377 --> 00:05:07,212
But how can we be more effective at it?

99
00:05:07,212 --> 00:05:09,590
Well historically there have been two major difficulties

100
00:05:09,590 --> 00:05:11,580
when it comes to integration testing.

101
00:05:11,580 --> 00:05:16,046
One of them is it's time consuming to write and run integration tests.

102
00:05:16,046 --> 00:05:19,713
Even if you're being good when it comes to validating contracts,

103
00:05:19,713 --> 00:05:23,782
it can still be time consuming to find and/or create test data.

104
00:05:23,782 --> 00:05:27,807
It can be time consuming to run integration tests as well.

105
00:05:27,807 --> 00:05:30,571
It might mean rebuilding an entire database,

106
00:05:30,571 --> 00:05:32,487
scheduling time with a shared resource,

107
00:05:32,487 --> 00:05:35,691
or being forced to deploy code to an environment to run

108
00:05:35,691 --> 00:05:38,061
integration tests because it wouldn't be practical to

109
00:05:38,061 --> 00:05:40,944
recreate an environment on a local machine.

110
00:05:40,944 --> 00:05:45,426
Another common issue with integration testing is that they can be unreliable.

111
00:05:45,426 --> 00:05:49,647
A shared resource could go down, test data may no longer be valid,

112
00:05:49,647 --> 00:05:51,760
or someone might incidentally change test data,

113
00:05:51,760 --> 00:05:53,269
causing your test to break.

114
00:05:53,269 --> 00:05:56,293
These issues lead integration tests to not being written,

115
00:05:56,293 --> 00:05:57,975
or ignored when they failed.

116
00:05:57,975 --> 00:06:02,885
Either way, confidence is lost in the automated test process.

117
00:06:02,885 --> 00:06:04,254
The good news is,

118
00:06:04,254 --> 00:06:07,448
there have been some tools developed fairly recently that

119
00:06:07,448 --> 00:06:10,635
have made integration tests easier to write,

120
00:06:10,635 --> 00:06:14,086
more portable, more reliable, execute faster,

121
00:06:14,086 --> 00:06:15,991
and more flexible.

122
00:06:15,991 --> 00:06:16,888
And during this module,

123
00:06:16,888 --> 00:06:25,000
we will take a look at two of these tools which can be used to cover a wide variety of integration testing needs.

