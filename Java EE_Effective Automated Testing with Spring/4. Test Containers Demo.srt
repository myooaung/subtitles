1
00:00:02,611 --> 00:00:06,381
In the previous section, we learned about Docker and TestContainers.

2
00:00:06,381 --> 00:00:07,170
In this section,

3
00:00:07,170 --> 00:00:09,867
we will step through a demo of using TestContainers to

4
00:00:09,867 --> 00:00:11,837
do integration testing on a database.

5
00:00:11,837 --> 00:00:16,063
We will also review the plugins Maven uses for executing automated tests,

6
00:00:16,063 --> 00:00:19,939
and how we might leverage them so we can get feedback

7
00:00:19,939 --> 00:00:21,995
from our automated test suite faster.

8
00:00:21,995 --> 00:00:23,191
Here in ITCustomerRepo,

9
00:00:23,191 --> 00:00:29,084
I'm setting up a test to verify that my application can connect to a database.

10
00:00:29,084 --> 00:00:31,392
In this case, a Postgres database.

11
00:00:31,392 --> 00:00:32,729
At the top of the test,

12
00:00:32,729 --> 00:00:36,769
I am customizing how I'm setting up this Spring context for this

13
00:00:36,769 --> 00:00:39,591
test with a ContextConfiguration annotation.

14
00:00:39,591 --> 00:00:43,191
In the Initializer class, I'm setting up a data source.

15
00:00:43,191 --> 00:00:44,854
If you're not familiar,

16
00:00:44,854 --> 00:00:49,012
a big concept within Spring Boot is convention over configuration.

17
00:00:49,012 --> 00:00:51,189
Rather than having to go through the rigmarole of

18
00:00:51,189 --> 00:00:55,370
configuring a database connection, if you follow the naming standard of spring.

19
00:00:55,370 --> 00:01:00,509
datasource, Spring Boot will take the values and create a data source for you.

20
00:01:00,509 --> 00:01:04,375
So this is how I'm setting up a data source for this test.

21
00:01:04,375 --> 00:01:09,173
Within the URL of the data source connection, I have an initialization script.

22
00:01:09,173 --> 00:01:11,063
For the username and password,

23
00:01:11,063 --> 00:01:13,708
I am having TestContainers provide that information.

24
00:01:13,708 --> 00:01:17,492
In order to have the initialization script run when I connect to a database,

25
00:01:17,492 --> 00:01:23,210
I must use a special testcontainers ContainerDatabase connection driver.

26
00:01:23,210 --> 00:01:26,449
I do this for convenience and simplicity in this test; however,

27
00:01:26,449 --> 00:01:28,292
in a more real-world scenario,

28
00:01:28,292 --> 00:01:32,154
instead of using the default Postgres container TestContainers uses,

29
00:01:32,154 --> 00:01:34,976
or whatever database you're connecting to,

30
00:01:34,976 --> 00:01:38,986
instead you would use the Docker image of your database.

31
00:01:38,986 --> 00:01:42,385
This would be done by passing in the name of the Docker image into the

32
00:01:42,385 --> 00:01:45,939
constructor of the test container you are using.

33
00:01:45,939 --> 00:01:50,611
This Docker image would ideally have a preconfigured version of your database.

34
00:01:50,611 --> 00:01:53,601
This would give increased confidence that the integration test

35
00:01:53,601 --> 00:01:56,056
you're running is reflective of how the application would

36
00:01:56,056 --> 00:01:58,028
interact with the database in production.

37
00:01:58,028 --> 00:02:03,163
That sidebar aside, we have set up our Spring Container to run our test.

38
00:02:03,163 --> 00:02:03,484
Below,

39
00:02:03,484 --> 00:02:09,031
I am using a ClassRule to have TestContainers set up the Postgres container.

40
00:02:09,031 --> 00:02:09,317
Finally,

41
00:02:09,317 --> 00:02:14,173
I am verifying that I can successfully call and retrieve data from the database.

42
00:02:14,173 --> 00:02:17,585
Let's go to run this test.

43
00:02:17,585 --> 00:02:20,470
That took a little time to run, about 15 seconds,

44
00:02:20,470 --> 00:02:25,712
a little longer than the usual time of when I've run this of 12 to 13 seconds.

45
00:02:25,712 --> 00:02:27,268
Regardless, this has returned green.

46
00:02:27,268 --> 00:02:31,547
Let's look at how we can leverage Maven to help us

47
00:02:31,547 --> 00:02:33,476
with long-running integration tests.

48
00:02:33,476 --> 00:02:37,800
You likely noticed I named this class ITCustomerRepo.

49
00:02:37,800 --> 00:02:41,089
IT in this case stands for integration test.

50
00:02:41,089 --> 00:02:46,243
Within Maven, there are two commonly used plugins for executing automated tests.

51
00:02:46,243 --> 00:02:49,079
There is a surefire plugin for running unit tests,

52
00:02:49,079 --> 00:02:52,331
which would have covered all the tests we have written in the

53
00:02:52,331 --> 00:02:54,174
modules on Leveraging Dependency Injection,

54
00:02:54,174 --> 00:02:57,931
and component integration testing with Spring tools.

55
00:02:57,931 --> 00:03:01,407
And there is the failsafe plugin for running integration tests.

56
00:03:01,407 --> 00:03:04,797
So why are there two plugins for running automated tests?

57
00:03:04,797 --> 00:03:07,305
So unit tests are heavily isolated,

58
00:03:07,305 --> 00:03:12,861
which make them very liable and also overall they should execute quickly.

59
00:03:12,861 --> 00:03:15,900
While TestContainers helps to greatly increase the

60
00:03:15,900 --> 00:03:18,279
reliability of our integration tests, we won't,

61
00:03:18,279 --> 00:03:21,289
for example, have to worry about a development database being down,

62
00:03:21,289 --> 00:03:24,164
they still aren't executing all that fast.

63
00:03:24,164 --> 00:03:28,335
While the about 15 seconds it took to run that test might not seem so slow,

64
00:03:28,335 --> 00:03:30,337
it can add up in aggregates.

65
00:03:30,337 --> 00:03:36,986
If I run all 18 tests in this application, it takes about 16 seconds to run.

66
00:03:36,986 --> 00:03:40,972
So just the one integration test made up about 80% of the time

67
00:03:40,972 --> 00:03:44,993
spent executing this entire test suite if we're going by the more

68
00:03:44,993 --> 00:03:47,250
common 12 to 13 seconds it takes to run.

69
00:03:47,250 --> 00:03:50,631
If we were to add more integration tests to our test suite,

70
00:03:50,631 --> 00:03:53,014
such as for connecting to a cache,

71
00:03:53,014 --> 00:03:57,384
and perhaps an integration test that recreates a failure scenario,

72
00:03:57,384 --> 00:04:01,389
it won't be long before it takes several minutes to run our entire test suite,

73
00:04:01,389 --> 00:04:04,591
most of that time being running integration tests.

74
00:04:04,591 --> 00:04:06,054
That might not seem so bad,

75
00:04:06,054 --> 00:04:09,063
but it really starts to add up if you're wanting to

76
00:04:09,063 --> 00:04:11,101
run these tests very frequently.

77
00:04:11,101 --> 00:04:13,718
This is where the two plugins come in.

78
00:04:13,718 --> 00:04:14,372
Using Maven,

79
00:04:14,372 --> 00:04:18,354
we could just execute our fast-running unit test to get fast

80
00:04:18,354 --> 00:04:22,840
feedback on the changes we are making, while executing integration tests,

81
00:04:22,840 --> 00:04:25,929
perhaps only before we check our code in,

82
00:04:25,929 --> 00:04:28,464
or having the ability to execute them.

83
00:04:28,464 --> 00:04:28,865
Additionally,

84
00:04:28,865 --> 00:04:33,035
the failsafe plugin has the pre-integration and post-integration tests spaces.

85
00:04:33,035 --> 00:04:35,766
These spaces, as the name suggests,

86
00:04:35,766 --> 00:04:39,073
offers opportunities for setting up and tearing down

87
00:04:39,073 --> 00:04:40,726
an integration test environment.

88
00:04:40,726 --> 00:04:42,108
And by default,

89
00:04:42,108 --> 00:04:47,999
the reason why we named ITCustomerRepo that name is because the failsafe plugin,

90
00:04:47,999 --> 00:04:52,795
by default, looks for IT as a prefix for integration tests.

91
00:04:52,795 --> 00:04:57,349
If we run Maven install, we can see both of these plugins in action.

92
00:04:57,349 --> 00:05:00,683
After compiling the code, Maven executes the unit test.

93
00:05:00,683 --> 00:05:03,368
As can be seen, they execute quite quickly.

94
00:05:03,368 --> 00:05:14,000
If all the unit tests pass, Maven will then execute the integration test. With all the tests passing, the Maven build is successful.

