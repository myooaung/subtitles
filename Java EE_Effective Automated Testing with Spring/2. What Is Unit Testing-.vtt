WEBVTT
1
00:00:02.451 --> 00:00:04.865
It is somewhat interesting that despite unit testing

2
00:00:04.865 --> 00:00:10.053
being an extensively discussed topic, it is still very misunderstood,

3
00:00:10.053 --> 00:00:12.400
or at least it has been in my experience.

4
00:00:12.400 --> 00:00:15.328
I believe a major source of this misunderstanding

5
00:00:15.328 --> 00:00:17.524
relates back to the first module.

6
00:00:17.524 --> 00:00:21.122
Many applications that are written aren't easily testable.

7
00:00:21.122 --> 00:00:24.367
While that generally makes automated testing more difficult,

8
00:00:24.367 --> 00:00:28.372
it also means that the application isn't really unit testable.

9
00:00:28.372 --> 00:00:31.770
Let's look back again at the single responsibility

10
00:00:31.770 --> 00:00:33.894
example from the first module.

11
00:00:33.894 --> 00:00:38.141
The original createOrder method is making several calls to external services,

12
00:00:38.141 --> 00:00:43.043
customer service, payment service, and the database.

13
00:00:43.043 --> 00:00:47.333
A developer might write a test case that looks something like this.

14
00:00:47.333 --> 00:00:51.668
While the test might appear simple, this is not a unit test.

15
00:00:51.668 --> 00:00:54.960
This is not a unit test because the test depends upon external services,

16
00:00:54.960 --> 00:00:58.446
making it more akin to an integration test.

17
00:00:58.446 --> 00:01:01.505
So the first key characteristics of unit tests are,

18
00:01:01.505 --> 00:01:03.545
they must be run in isolation.

19
00:01:03.545 --> 00:01:07.229
Here we have an Order model with simple getter/setter methods.

20
00:01:07.229 --> 00:01:10.582
When initiatives to start writing unit tests come from higher up,

21
00:01:10.582 --> 00:01:14.085
often the first tests written look like this; however,

22
00:01:14.085 --> 00:01:16.009
this too is not a unit test.

23
00:01:16.009 --> 00:01:19.221
The purpose of unit tests is not to validate at Java functions,

24
00:01:19.221 --> 00:01:22.429
like in the case of assigning a value to a variable,

25
00:01:22.429 --> 00:01:25.894
but to verify the behavior of the application being written.

26
00:01:25.894 --> 00:01:28.044
It can be valid to test getters and setters,

27
00:01:28.044 --> 00:01:30.973
but only if they're actually performing some sort of business behavior,

28
00:01:30.973 --> 00:01:34.369
such as initializing a value before it is set or returned.

29
00:01:34.369 --> 00:01:37.598
So the second key characteristic of unit tests is

30
00:01:37.598 --> 00:01:39.635
that they verify business behavior.

31
00:01:39.635 --> 00:01:44.593
So going back to createOrder, it has been updated so that it can be unit tested.

32
00:01:44.593 --> 00:01:47.473
Calls to external services can be mocked out.

33
00:01:47.473 --> 00:01:49.847
A less common mistake I have seen is writing a test

34
00:01:49.847 --> 00:01:51.535
case that looks something like this.

35
00:01:51.535 --> 00:01:52.575
In this test,

36
00:01:52.575 --> 00:01:57.117
we are validating that an exception is thrown when a customer cannot be found,

37
00:01:57.117 --> 00:01:59.819
and then validating that an order is successfully created

38
00:01:59.819 --> 00:02:02.170
and returned if valid input is passed in.

39
00:02:02.170 --> 00:02:05.842
As you might have already guessed, this too is not a unit test.

40
00:02:05.842 --> 00:02:08.500
Unit tests, and really tests cases of all types,

41
00:02:08.500 --> 00:02:11.810
should only verify a single scenario or code path.

42
00:02:11.810 --> 00:02:15.015
Validating multiple scenarios within a single test case makes it

43
00:02:15.015 --> 00:02:17.984
difficult to give a descriptive name for the test.

44
00:02:17.984 --> 00:02:19.987
It will also make it difficult to understand,

45
00:02:19.987 --> 00:02:22.184
when running a suite of automated tests,

46
00:02:22.184 --> 00:02:24.075
what is actually failing.

47
00:02:24.075 --> 00:02:28.071
Finally, here we have a test that is passing in mock dependencies,

48
00:02:28.071 --> 00:02:32.179
testing a single scenario, and validating business behavior.

49
00:02:32.179 --> 00:02:34.501
So this is actually a unit test.

50
00:02:34.501 --> 00:02:37.132
Unit tests are not the only type of automated tests.

51
00:02:37.132 --> 00:02:39.896
They are but one part in a suite of automated tests.

52
00:02:39.896 --> 00:02:41.692
A common way of visualizing a test suite,

53
00:02:41.692 --> 00:02:44.795
as well as the relationship of a test between one another,

54
00:02:44.795 --> 00:02:46.055
is with a pyramid.

55
00:02:46.055 --> 00:02:47.186
At the bottom of the pyramid,

56
00:02:47.186 --> 00:02:49.548
we have the most numerous and stable of automated tests,

57
00:02:49.548 --> 00:02:50.401
unit tests.

58
00:02:50.401 --> 00:02:53.812
Above unit tests, we have component integration tests.

59
00:02:53.812 --> 00:02:57.276
Component integration testing is admittedly a fungible term,

60
00:02:57.276 --> 00:03:00.071
and might even be called by some, unit testing.

61
00:03:00.071 --> 00:03:01.222
But in this course,

62
00:03:01.222 --> 00:03:03.236
component integration testing are tests that cover

63
00:03:03.236 --> 00:03:04.852
cross-cutting concerns like security,

64
00:03:04.852 --> 00:03:09.682
and are how an application interacts with libraries it depends upon.

65
00:03:09.682 --> 00:03:12.455
We will take a closer look at component integration testing in the

66
00:03:12.455 --> 00:03:15.963
module on testing and using Spring Test utilities.

67
00:03:15.963 --> 00:03:19.649
Above component integration tests are system integration tests.

68
00:03:19.649 --> 00:03:22.312
System integration tests are concerned with verifying an

69
00:03:22.312 --> 00:03:24.689
application is able to communicate with remote systems

70
00:03:24.689 --> 00:03:29.763
and services it depends upon, and also handling certain failure scenarios.

71
00:03:29.763 --> 00:03:32.532
System integration testing will be covered in a module on how

72
00:03:32.532 --> 00:03:34.635
to use Spring to write integration tests.

73
00:03:34.635 --> 00:03:38.396
Finally, at the top of the pyramid are acceptance tests.

74
00:03:38.396 --> 00:03:41.745
Acceptance testing is about making sure the

75
00:03:41.745 --> 00:03:43.836
application fulfills business requirements.

76
00:03:43.836 --> 00:03:48.445
Acceptance testing has similarities to unit testing, but at a higher level.

77
00:03:48.445 --> 00:03:51.167
Acceptance testing will be covered in a module on how to

78
00:03:51.167 --> 00:03:53.738
use tests to document system behavior.

79
00:03:53.738 --> 00:03:56.950
So to review, the key characteristics of unit tests are,

80
00:03:56.950 --> 00:04:06.000
unit tests should be ran in isolation, should verify business behavior, and a single unit test should be verifying only a single scenario.

