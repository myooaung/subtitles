WEBVTT
1
00:00:02.635 --> 00:00:06.040
During the production of this course, JUnit 5 was released.

2
00:00:06.040 --> 00:00:08.428
I wanted to include a brief introduction to JUnit 5 at some

3
00:00:08.428 --> 00:00:11.238
point in this course as it's going to become increasingly

4
00:00:11.238 --> 00:00:12.745
popular in the near future.

5
00:00:12.745 --> 00:00:15.343
I felt this module on using tests as documentation would

6
00:00:15.343 --> 00:00:18.589
be the most appropriate location as, among other changes,

7
00:00:18.589 --> 00:00:22.891
there are several readability enhancements in JUnit 5.

8
00:00:22.891 --> 00:00:26.231
It was back in 2006 when JUnit 4 was released.

9
00:00:26.231 --> 00:00:28.432
Java 5 was the current release at the time.

10
00:00:28.432 --> 00:00:32.007
The biggest change to come with JUnit 4 was allowing the

11
00:00:32.007 --> 00:00:34.360
usage of annotations to mark tests,

12
00:00:34.360 --> 00:00:38.572
which was a big improvement over JUnit 3's way of subclassing test cases,

13
00:00:38.572 --> 00:00:41.963
and then starting every test method with test.

14
00:00:41.963 --> 00:00:42.708
Needless to say,

15
00:00:42.708 --> 00:00:46.935
much has changed in the Java language since the last major release of JUnit.

16
00:00:46.935 --> 00:00:52.968
JUnit 5 uses Java 8 as a baseline, which gives it native support for lambdas.

17
00:00:52.968 --> 00:00:53.285
Indeed,

18
00:00:53.285 --> 00:00:55.818
one of the component projects that eventually became

19
00:00:55.818 --> 00:00:57.831
JUnit 5 was called JUnit Lambda.

20
00:00:57.831 --> 00:01:01.370
There are several other goals in the JUnit 5 project

21
00:01:01.370 --> 00:01:04.838
including having JUnit 5 provide extension points rather

22
00:01:04.838 --> 00:01:06.279
than natively supporting features.

23
00:01:06.279 --> 00:01:09.823
This was to allow for faster evolvability of tested frameworks.

24
00:01:09.823 --> 00:01:13.421
JUnit 5 seeks to improve the ease of writing tests,

25
00:01:13.421 --> 00:01:15.882
as well as the readability, which as mentioned,

26
00:01:15.882 --> 00:01:20.226
is the reason why I'm including this introduction to JUnit 5 in this module.

27
00:01:20.226 --> 00:01:20.528
Finally,

28
00:01:20.528 --> 00:01:23.249
JUnit 5 has been broken into several modules instead

29
00:01:23.249 --> 00:01:25.688
of being packaged as a single JAR.

30
00:01:25.688 --> 00:01:29.194
The three major components of JUnit 5 are,

31
00:01:29.194 --> 00:01:32.107
JUnit Vintage, JUnit Platform, and JUnit Jupiter.

32
00:01:32.107 --> 00:01:36.537
JUnit Vintage is to help with the migration to JUnit 5.

33
00:01:36.537 --> 00:01:40.458
JUnit Vintage maintains many of the package structures and programming model

34
00:01:40.458 --> 00:01:44.599
that is familiar to those who have used JUnit 3 and JUnit 4.

35
00:01:44.599 --> 00:01:47.807
JUnit Platform is where the support for build tools,

36
00:01:47.807 --> 00:01:52.260
like the Maven Surefire plugin discussed in the module on integration testing,

37
00:01:52.260 --> 00:01:53.021
are located.

38
00:01:53.021 --> 00:01:53.402
Finally,

39
00:01:53.402 --> 00:01:57.587
JUnit Jupiter is where the new programming model for JUnit tests is located,

40
00:01:57.587 --> 00:02:04.000
and is what will be used in all the demos for this module, which we will get to shortly.

