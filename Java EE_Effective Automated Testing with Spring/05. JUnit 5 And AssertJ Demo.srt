1
00:00:02,394 --> 00:00:02,901
In this demo,

2
00:00:02,901 --> 00:00:06,318
we're going to see how we can use some of the new features in JUnit 5,

3
00:00:06,318 --> 00:00:10,914
AssertJ, and some other practices to write test cases that are more readable.

4
00:00:10,914 --> 00:00:14,921
There are 2 steps we must take to use JUnit 5.

5
00:00:14,921 --> 00:00:16,923
First, we need to update our IDE.

6
00:00:16,923 --> 00:00:21,524
If you are using the Spring Tool suite, you will need to update to 3.

7
00:00:21,524 --> 00:00:21,849
9.

8
00:00:21,849 --> 00:00:25,401
1 and make sure you're also using the 4.

9
00:00:25,401 --> 00:00:25,935
7.

10
00:00:25,935 --> 00:00:29,139
1A or later version of eclipse.

11
00:00:29,139 --> 00:00:30,360
Note that 3.

12
00:00:30,360 --> 00:00:30,768
9.

13
00:00:30,768 --> 00:00:34,839
1 of Spring Tool Suite also works with Eclipse 4.

14
00:00:34,839 --> 00:00:37,407
6, which does not offer JUnit 5 support.

15
00:00:37,407 --> 00:00:41,764
The second thing we need to do is to update the Maven POM

16
00:00:41,764 --> 00:00:44,693
file to include the new JUnit 5 libraries.

17
00:00:44,693 --> 00:00:46,609
As mentioned when introducing JUnit 5,

18
00:00:46,609 --> 00:00:50,050
JUnit 5 has been broken into several different modules instead

19
00:00:50,050 --> 00:00:53,099
of being shipped as a single monolithic JAR.

20
00:00:53,099 --> 00:00:56,191
For this demo, we will include these libraries.

21
00:00:56,191 --> 00:00:59,581
The first two libraries, jupiter-api and jupiter-engine,

22
00:00:59,581 --> 00:01:04,119
allow us to use JUnit 5's new programming model.

23
00:01:04,119 --> 00:01:08,664
The second two modules, platform-engine and platform-launcher,

24
00:01:08,664 --> 00:01:11,152
support Maven plugins.

25
00:01:11,152 --> 00:01:16,220
And finally, vintage-engine offers backward compatibility for existing tests.

26
00:01:16,220 --> 00:01:17,806
In our test class,

27
00:01:17,806 --> 00:01:21,999
marking a test remains superficially unchanged from JUnit 4; however,

28
00:01:21,999 --> 00:01:25,798
note that the @Test instead points to org.

29
00:01:25,798 --> 00:01:26,289
junit.

30
00:01:26,289 --> 00:01:26,780
jupiter.

31
00:01:26,780 --> 00:01:29,236
api test instead of org.

32
00:01:29,236 --> 00:01:30,218
junit test.

33
00:01:30,218 --> 00:01:32,969
This is only when you want to use JUnit 5.

34
00:01:32,969 --> 00:01:36,799
In the JUnit Vintage library, there is still the org.

35
00:01:36,799 --> 00:01:37,948
junit test class.

36
00:01:37,948 --> 00:01:41,009
In our test we will simply be verifying that a room can

37
00:01:41,009 --> 00:01:42,902
be returned from the room service.

38
00:01:42,902 --> 00:01:47,622
While this first test is fairly simple, it does have some heft to it,

39
00:01:47,622 --> 00:01:50,249
with about 15 lines of code being executed.

40
00:01:50,249 --> 00:01:53,928
By adding Given, When, Then comments to the test case,

41
00:01:53,928 --> 00:01:57,412
it can make it easier for other developers to understand

42
00:01:57,412 --> 00:02:00,095
what is going on in this test case.

43
00:02:00,095 --> 00:02:04,307
This can definitely be very helpful in more complex tests.

44
00:02:04,307 --> 00:02:09,783
In the Then section, we will use AssertJ to write out our assertions.

45
00:02:09,783 --> 00:02:15,012
Using AssertJ is much easier to read what exactly is going on in a test.

46
00:02:15,012 --> 00:02:19,192
One thing that can be annoying when having multiple assertions within a test is

47
00:02:19,192 --> 00:02:23,055
having to cycle back and forth each time an assertion fails.

48
00:02:23,055 --> 00:02:27,431
So even though two assertions fail, for and weekday price,

49
00:02:27,431 --> 00:02:30,285
it would be much nicer if we got informed of all assertion

50
00:02:30,285 --> 00:02:33,805
failures in a test instead of just one at a time.

51
00:02:33,805 --> 00:02:36,510
Luckily with JUnit 5, that is much easier.

52
00:02:36,510 --> 00:02:39,014
With the new assertAll assertion and lambdas,

53
00:02:39,014 --> 00:02:42,947
we can wrap all these assertions in a single call.

54
00:02:42,947 --> 00:02:45,520
Now when we rerun our test,

55
00:02:45,520 --> 00:02:49,280
we are shown both assertion failures instead of just the first one.

56
00:02:49,280 --> 00:02:52,254
While generally the default assertion errors provide enough information,

57
00:02:52,254 --> 00:02:56,922
sometimes it can be useful to provide a customized error message.

58
00:02:56,922 --> 00:03:00,038
Maybe the reason a test would fail would be because of a

59
00:03:00,038 --> 00:03:02,946
context issue or something that would require a bit more

60
00:03:02,946 --> 00:03:04,141
understanding of the system.

61
00:03:04,141 --> 00:03:07,889
AssertJ makes this a bit more straightforward than with normal JUnit assertions,

62
00:03:07,889 --> 00:03:10,269
which takes an extra string parameter.

63
00:03:10,269 --> 00:03:11,846
AssertJ uses withFailMessage.

64
00:03:11,846 --> 00:03:15,301
The failure message isn't super helpful here,

65
00:03:15,301 --> 00:03:18,617
but the idea of providing a custom error message is clear,

66
00:03:18,617 --> 00:03:23,136
and it can be seen that shows up instead of the usual message.

67
00:03:23,136 --> 00:03:26,067
Note the withFailMessage reference must be before

68
00:03:26,067 --> 00:03:28,160
what you are asserting against.

69
00:03:28,160 --> 00:03:32,780
Once the assertion failure is hit, AssertJ drops out of the method call stack.

70
00:03:32,780 --> 00:03:35,979
So if we put withFailMessage after our assertion,

71
00:03:35,979 --> 00:03:38,378
we'd just get the default message.

72
00:03:38,378 --> 00:03:39,743
Back to JUnit 5,

73
00:03:39,743 --> 00:03:42,984
typically using method names to give a descriptive name

74
00:03:42,984 --> 00:03:49,635
to a test isn't too hard; however, JUnit 5 added the DisplayName annotation.

75
00:03:49,635 --> 00:03:50,579
Within the DisplayName,

76
00:03:50,579 --> 00:03:55,421
we can write out a string to claim however we want to test the name to display.

77
00:03:55,421 --> 00:03:59,346
If we rerun that test, we can see that name is now displayed.

78
00:03:59,346 --> 00:04:01,729
This string is fully unit-code compatible,

79
00:04:01,729 --> 00:04:03,963
which means even emojis can be included.

80
00:04:03,963 --> 00:04:06,278
While it might sound silly at first,

81
00:04:06,278 --> 00:04:08,077
if you have internationalization requirements,

82
00:04:08,077 --> 00:04:12,068
you can use the flag of the country you are translating to,

83
00:04:12,068 --> 00:04:15,372
or perhaps an emergency light for really critical tests.

84
00:04:15,372 --> 00:04:17,154
For example, something involving money.

85
00:04:17,154 --> 00:04:20,652
Another area that can be quite frustrating to test,

86
00:04:20,652 --> 00:04:23,985
but AssertJ makes much easier testing, is a list.

87
00:04:23,985 --> 00:04:26,759
In this test, we are getting back a list of rooms,

88
00:04:26,759 --> 00:04:29,953
and we want to make sure all the rooms in the list are correct.

89
00:04:29,953 --> 00:04:34,582
We still start with assertThat, but then we use the extracting method.

90
00:04:34,582 --> 00:04:36,842
With extracting, we declare the field, or fields,

91
00:04:36,842 --> 00:04:39,174
we want to retrieve from the list.

92
00:04:39,174 --> 00:04:41,578
Let's first get the room types.

93
00:04:41,578 --> 00:04:45,479
AssertJ provides several different options for validating a list,

94
00:04:45,479 --> 00:04:48,820
from very strict asserts, like containsExactly,

95
00:04:48,820 --> 00:04:52,565
which verifies the actual list matches exactly what the

96
00:04:52,565 --> 00:04:55,038
expected list both in number of elements,

97
00:04:55,038 --> 00:04:58,631
values of elements, and the order they are in,

98
00:04:58,631 --> 00:05:00,041
to less strict like contains,

99
00:05:00,041 --> 00:05:03,844
which only makes sure the actual list has the expected items in it.

100
00:05:03,844 --> 00:05:05,673
The order doesn't have to match,

101
00:05:05,673 --> 00:05:09,083
and the actual list could contain additional items.

102
00:05:09,083 --> 00:05:10,340
So this works well.

103
00:05:10,340 --> 00:05:15,824
But what if we want to validate multiple values within each element in a list?

104
00:05:15,824 --> 00:05:18,922
Again, AssertJ makes this easy with tuples.

105
00:05:18,922 --> 00:05:21,388
Simply add the other field we want to extract,

106
00:05:21,388 --> 00:05:27,409
and in the contains we can call the tuple static method and pass in the values.

107
00:05:27,409 --> 00:05:33,925
So as you can see, AssertJ and JUnit 5 makes tests much easier to read and write.

108
00:05:33,925 --> 00:05:41,000
We will be looking at a few other features of these two libraries in the other demos in this module as well.

