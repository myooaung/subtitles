1
00:00:02,929 --> 00:00:06,598
A very hot topic in the tech industry, possibly over-hyped,

2
00:00:06,598 --> 00:00:10,101
is containerization, particularly using Docker.

3
00:00:10,101 --> 00:00:13,095
If you haven't heard about containerization or Docker,

4
00:00:13,095 --> 00:00:14,373
you're among the few; however,

5
00:00:14,373 --> 00:00:16,657
before I can cover how to use TestContainers to

6
00:00:16,657 --> 00:00:17,899
help in writing integration tests,

7
00:00:17,899 --> 00:00:20,724
I want to give a brief introduction to containers,

8
00:00:20,724 --> 00:00:23,893
and Docker as a means to level set.

9
00:00:23,893 --> 00:00:25,874
To get an idea of what containerization is,

10
00:00:25,874 --> 00:00:29,643
let's first figure out the problem it is attempting to address.

11
00:00:29,643 --> 00:00:33,327
Out on a server, we have our customer service deployed.

12
00:00:33,327 --> 00:00:35,589
Our customer service, being a Java application,

13
00:00:35,589 --> 00:00:40,249
of course depends upon Java being installed on the server as well,

14
00:00:40,249 --> 00:00:42,354
in this case, JDK 8.

15
00:00:42,354 --> 00:00:47,369
Eventually, the order service is also deployed out onto the server as well.

16
00:00:47,369 --> 00:00:51,823
Order service is a Java application as well, and it's compatible with Java 8.

17
00:00:51,823 --> 00:00:53,521
So everything works without issue.

18
00:00:53,521 --> 00:00:57,333
Sometime later, the order service starts making use of Java 9 features,

19
00:00:57,333 --> 00:01:01,000
and so needs the version of Java running on the server updated.

20
00:01:01,000 --> 00:01:04,522
Upgrading the version of Java running on the server could introduce bugs

21
00:01:04,522 --> 00:01:07,886
to any application that has not been tested with it,

22
00:01:07,886 --> 00:01:09,163
like customer service.

23
00:01:09,163 --> 00:01:12,294
This is doubly so with Java 9 as it introduces modularity and

24
00:01:12,294 --> 00:01:14,401
several other breaking changes to Java.

25
00:01:14,401 --> 00:01:17,642
Docker seeks to address this problem by encapsulating

26
00:01:17,642 --> 00:01:20,206
applications within their own containers.

27
00:01:20,206 --> 00:01:22,991
Now order service can safely upgrade to Java 9 without

28
00:01:22,991 --> 00:01:24,801
risk of breaking customer service,

29
00:01:24,801 --> 00:01:27,711
and customer service can continue using whatever

30
00:01:27,711 --> 00:01:30,544
version of Java that best suites it.

31
00:01:30,544 --> 00:01:34,151
Containerization isn't just limited to applications though.

32
00:01:34,151 --> 00:01:38,303
Even other services, like databases, can be containerized as well.

33
00:01:38,303 --> 00:01:43,086
If this all sounds pretty similar to virtual machines, the comparison is apt.

34
00:01:43,086 --> 00:01:46,633
What separates containerization tools like Docker from

35
00:01:46,633 --> 00:01:50,406
traditional VMs is that they have lower overhead both in

36
00:01:50,406 --> 00:01:52,131
terms of storage and performance.

37
00:01:52,131 --> 00:01:55,332
This makes containerizing individual applications much more

38
00:01:55,332 --> 00:01:57,758
practical than it might have been in the past.

39
00:01:57,758 --> 00:02:01,684
What has further fueled the growth and popularity of Docker and other

40
00:02:01,684 --> 00:02:05,340
containerization options is a tooling that has been built around them.

41
00:02:05,340 --> 00:02:06,610
A container can be created,

42
00:02:06,610 --> 00:02:10,441
and then easily shared by placing the image of the container in a repository,

43
00:02:10,441 --> 00:02:13,523
which in the case of Docker is called Docker Hub.

44
00:02:13,523 --> 00:02:17,559
Now other developers can pull down the Docker image and use the service

45
00:02:17,559 --> 00:02:21,009
without having to go through the possibly difficult and time-consuming task

46
00:02:21,009 --> 00:02:24,292
of configuring their machine to run the service.

47
00:02:24,292 --> 00:02:26,370
This is where TestContainers comes in.

48
00:02:26,370 --> 00:02:29,454
TestContainers is a library for easily using Docker

49
00:02:29,454 --> 00:02:32,001
containers directly in your JUnit test.

50
00:02:32,001 --> 00:02:35,477
TestContainers makes use of JUnit rules to wire up and

51
00:02:35,477 --> 00:02:38,096
incorporate Docker containers within JUnit tests.

52
00:02:38,096 --> 00:02:40,850
The TestContainers team has created some pre-built

53
00:02:40,850 --> 00:02:43,524
containers for common services, like in this example,

54
00:02:43,524 --> 00:02:45,954
connecting to a MySQL database.

55
00:02:45,954 --> 00:02:49,743
The MySQLContainer class has several convenient methods for

56
00:02:49,743 --> 00:02:53,048
performing common database operations like getting the username

57
00:02:53,048 --> 00:02:55,236
and password for creating a connection,

58
00:02:55,236 --> 00:02:57,669
as well as some other behaviors like special database

59
00:02:57,669 --> 00:03:00,906
drivers that can be set up to execute initialization scripts

60
00:03:00,906 --> 00:03:02,638
when connecting to the container.

61
00:03:02,638 --> 00:03:02,992
Of course,

62
00:03:02,992 --> 00:03:06,038
there might be cases in which the Docker image you want to use isn't

63
00:03:06,038 --> 00:03:09,254
one that the TestContainer team natively supports.

64
00:03:09,254 --> 00:03:10,074
In this situation,

65
00:03:10,074 --> 00:03:13,188
you can use a generic container class to wire in the

66
00:03:13,188 --> 00:03:21,000
Docker container into your JUnit test. In the next section, we will take a hands-on look at using TestContainers.

