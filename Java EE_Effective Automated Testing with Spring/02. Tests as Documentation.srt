1
00:00:01,842 --> 00:00:04,081
In the module on writing testable code,

2
00:00:04,081 --> 00:00:08,909
I mentioned how tests can be used as a means of documenting a system's behavior.

3
00:00:08,909 --> 00:00:09,640
In this module,

4
00:00:09,640 --> 00:00:13,263
we will explore in depth into how we can leverage automated tests into

5
00:00:13,263 --> 00:00:16,425
writing living documentation on a system we write.

6
00:00:16,425 --> 00:00:17,608
But before we do,

7
00:00:17,608 --> 00:00:19,973
let's once again understand the problems with the

8
00:00:19,973 --> 00:00:23,148
status quo way of documenting systems.

9
00:00:23,148 --> 00:00:24,979
So we have all been there.

10
00:00:24,979 --> 00:00:26,809
Long days, and possibly even nights,

11
00:00:26,809 --> 00:00:30,207
working to crank out a new application or feature.

12
00:00:30,207 --> 00:00:32,601
Finally, after a couple of failed deploys,

13
00:00:32,601 --> 00:00:36,135
an all-nighter or two, you have finally pushed code to production.

14
00:00:36,135 --> 00:00:38,596
After the first couple of inevitable bug releases,

15
00:00:38,596 --> 00:00:42,259
your manager asks you to write up documentation on how the new

16
00:00:42,259 --> 00:00:44,543
application or feature you have just written works.

17
00:00:44,543 --> 00:00:47,970
This is perhaps one of the least liked, most often over looked,

18
00:00:47,970 --> 00:00:51,364
and in some ways, most difficult step in a development cycle.

19
00:00:51,364 --> 00:00:54,465
How do you explain all the lessons learned from writing the application?

20
00:00:54,465 --> 00:00:55,725
How do you remember them?

21
00:00:55,725 --> 00:00:58,685
How can you explain what a successful transaction looks like?

22
00:00:58,685 --> 00:01:02,219
How about conditions under which a transaction should be declined?

23
00:01:02,219 --> 00:01:06,049
How can this be written in a concise enough manner so the next

24
00:01:06,049 --> 00:01:08,221
developer will be interested in reading it?

25
00:01:08,221 --> 00:01:12,053
Beyond that, how long will this documentation even remain valid?

26
00:01:12,053 --> 00:01:14,582
The documentation might be somewhat accurate right now,

27
00:01:14,582 --> 00:01:16,698
but what about a year from now?

28
00:01:16,698 --> 00:01:17,866
Two years from now?

29
00:01:17,866 --> 00:01:21,015
In my near decade of experience as a developer,

30
00:01:21,015 --> 00:01:24,275
documentation generally has been suspect at best.

31
00:01:24,275 --> 00:01:27,754
Perhaps a general summation of the goal of a system or feature is documented,

32
00:01:27,754 --> 00:01:31,081
but how to interact with the system is often left undocumented,

33
00:01:31,081 --> 00:01:33,348
or the examples are out of date.

34
00:01:33,348 --> 00:01:36,998
And if there are examples, it's typically only happy-path examples,

35
00:01:36,998 --> 00:01:38,686
and don't cover edge cases.

36
00:01:38,686 --> 00:01:41,387
This is where automated testing can come in.

37
00:01:41,387 --> 00:01:44,504
Automated testing can help with documenting a system in two ways.

38
00:01:44,504 --> 00:01:48,022
The first is writing tests so that other developers can easily read them,

39
00:01:48,022 --> 00:01:51,048
and from the test, learn how the system works.

40
00:01:51,048 --> 00:01:53,494
The first step is giving tests names that accurately

41
00:01:53,494 --> 00:01:55,430
describe the scenario being executed.

42
00:01:55,430 --> 00:01:59,491
This helps other developers understand the intent of the test.

43
00:01:59,491 --> 00:02:03,056
Within the test itself, particularly if the test is somewhat complex,

44
00:02:03,056 --> 00:02:07,756
it can be good to add comments within the test that make clear the

45
00:02:07,756 --> 00:02:10,571
distinction between setting up the preconditions of the scenario,

46
00:02:10,571 --> 00:02:12,238
the code that is being executed,

47
00:02:12,238 --> 00:02:16,263
and what is being checked after the test has been run,

48
00:02:16,263 --> 00:02:17,928
or given, when, then.

49
00:02:17,928 --> 00:02:21,596
What is also particularly helpful about using tests as documentation is,

50
00:02:21,596 --> 00:02:23,615
when a test fails,

51
00:02:23,615 --> 00:02:28,286
it gives clear indication that the "documentation" is out of date.

52
00:02:28,286 --> 00:02:31,163
This will tell the developer either the documentation,

53
00:02:31,163 --> 00:02:37,182
the test, needs to be updated, or some unintended change was added to the code.

54
00:02:37,182 --> 00:02:39,451
Either way, once the test is fixed,

55
00:02:39,451 --> 00:02:42,824
the documentation is again back in sync with the code.

56
00:02:42,824 --> 00:02:47,432
The second way automated tests can help with documentation is using tests to

57
00:02:47,432 --> 00:02:50,757
directly generate documentation in a more traditional format.

58
00:02:50,757 --> 00:02:54,272
While having descriptive test cases is helpful for developers,

59
00:02:54,272 --> 00:02:56,964
it doesn't cover all the documentation requirements.

60
00:02:56,964 --> 00:02:59,245
If you're developing a RESTful API,

61
00:02:59,245 --> 00:03:02,577
providing publicly accessible documentation on how to interact with

62
00:03:02,577 --> 00:03:05,866
the API can be very helpful for potential clients.

63
00:03:05,866 --> 00:03:08,653
We will also be looking at how to produce documentation

64
00:03:08,653 --> 00:03:11,852
from acceptance tests that can be helpful for ensuring

65
00:03:11,852 --> 00:03:13,576
business requirements are being met.

66
00:03:13,576 --> 00:03:16,128
Just like with directly reading tests though,

67
00:03:16,128 --> 00:03:20,236
when test fails, the documentation doesn't update either.

68
00:03:20,236 --> 00:03:23,039
This gives confidence that when tests are passing,

69
00:03:23,039 --> 00:03:27,326
your documentation is an accurate representation of the system being documented.

70
00:03:27,326 --> 00:03:30,408
While descriptive tests and producing documentation from your tests

71
00:03:30,408 --> 00:03:33,169
won't cover the entirety of documentation requirements,

72
00:03:33,169 --> 00:03:35,587
it will cover a significant portion.

73
00:03:35,587 --> 00:03:36,822
And as mentioned,

74
00:03:36,822 --> 00:03:40,750
the documentation provided will also be in sync with the system.

75
00:03:40,750 --> 00:03:43,709
Using tests as documentation is also a further way of

76
00:03:43,709 --> 00:03:45,589
increasing the value of tests being written.

77
00:03:45,589 --> 00:03:48,923
Instead of just verifying the system meets business

78
00:03:48,923 --> 00:03:52,257
requirements and detecting regressions, valuable in their own right,

79
00:03:52,257 --> 00:03:55,454
tests can now help future developers and coworkers

80
00:03:55,454 --> 00:03:57,579
understand a system you wrote.

81
00:03:57,579 --> 00:03:58,492
During this module,

82
00:03:58,492 --> 00:04:01,553
we'll look at tools and methodologies that will help make

83
00:04:01,553 --> 00:04:10,000
tests more descriptive and easier to read, and how to produce documentation directly from the tests we write.

