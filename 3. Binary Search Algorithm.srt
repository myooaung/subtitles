1
1

00:00:00,000  -->  00:00:02,554
(cheerful electronic music)
2

2

00:00:02,554  -->  00:00:05,217
(typing)
3

3

00:00:05,217  -->  00:00:06,845
<v Narrator>Alright, so in this video</v>
4

4

00:00:06,845  -->  00:00:09,830
we're gonna take a look at the Binary Search Algorithm.
5

5

00:00:09,830  -->  00:00:13,467
Binary Search is pretty much the standard search algorithm.
6

6

00:00:13,467  -->  00:00:17,624
But and there's a huge but, and this is really important,
7

7

00:00:17,624  -->  00:00:22,464
it requires that the data that it's searching be sorted.
8

8

00:00:22,464  -->  00:00:26,121
And so, you can only use the Binary Search Algorithm
9

9

00:00:26,121  -->  00:00:28,757
on data that has been sorted.
10

10

00:00:28,757  -->  00:00:31,590
And so, if you wanna use it to search an array
11

11

00:00:31,590  -->  00:00:33,404
and the array has not been sorted
12

12

00:00:33,404  -->  00:00:35,629
then you're gonna have to sort this, the array first
13

13

00:00:35,629  -->  00:00:37,817
then you can use any of the sort algorithms
14

14

00:00:37,817  -->  00:00:40,118
that we've looked at to sort the array.
15

15

00:00:40,118  -->  00:00:43,697
And then you run the Binary Search on the sorted array.
16

16

00:00:43,697  -->  00:00:45,570
And that goes for any data structure,
17

17

00:00:45,570  -->  00:00:48,341
I mean, if you wanna use Binary Search on a link list
18

18

00:00:48,341  -->  00:00:51,246
then you have to sort the values in that link list first.
19

19

00:00:51,246  -->  00:00:53,020
Now, if you know your application is going
20

20

00:00:53,020  -->  00:00:56,406
to be using Binary Search to do a lot of searches
21

21

00:00:56,406  -->  00:00:59,133
then what you might consider doing is
22

22

00:00:59,133  -->  00:01:03,499
inserting items into whatever data structure you're using,
23

23

00:01:03,499  -->  00:01:05,887
so that they're always in sorted order.
24

24

00:01:05,887  -->  00:01:10,308
So rather than sorting the array or whatever you're using
25

25

00:01:10,308  -->  00:01:12,929
every single time you wanna run a binary search,
26

26

00:01:12,929  -->  00:01:15,163
if you know you're going to be running a lot of searches
27

27

00:01:15,163  -->  00:01:17,958
then it might be better to just always make sure
28

28

00:01:17,958  -->  00:01:21,314
that the values in the data structure are always sorted,
29

29

00:01:21,314  -->  00:01:23,386
then you can do that when you insert values.
30

30

00:01:23,386  -->  00:01:25,448
Okay, so what is Binary Search?
31

31

00:01:25,448  -->  00:01:28,832
Well, the way it works and we'll use an array as an example
32

32

00:01:28,832  -->  00:01:31,737
is that it chooses the element in the middle of the array,
33

33

00:01:31,737  -->  00:01:33,974
and it compares it against the search value.
34

34

00:01:33,974  -->  00:01:36,420
Now, if the element in the middle of the array equals
35

35

00:01:36,420  -->  00:01:38,037
the search value we're done, right?
36

36

00:01:38,037  -->  00:01:40,385
Because we found the value we're looking for.
37

37

00:01:40,385  -->  00:01:44,326
Now, if it doesn't equal the search value then we have more
38

38

00:01:44,326  -->  00:01:45,177
work to do.
39

39

00:01:45,177  -->  00:01:47,940
So if the element is greater than the search value
40

40

00:01:47,940  -->  00:01:50,815
then we're gonna search the left half of the array,
41

41

00:01:50,815  -->  00:01:54,127
and the reason for that is that the values are sorted
42

42

00:01:54,127  -->  00:01:57,888
and so let's say the middle of the array is at index five.
43

43

00:01:57,888  -->  00:02:01,032
And so we compare the search value against the elemented
44

44

00:02:01,032  -->  00:02:02,059
index five,
45

45

00:02:02,059  -->  00:02:05,684
well if that element is greater than the search value
46

46

00:02:05,684  -->  00:02:10,684
then we know that the value we're searching for has to be in
47

47

00:02:10,784  -->  00:02:12,994
indexes zero to four.
48

48

00:02:12,994  -->  00:02:17,000
Because the data is sorted and so if the value at index five
49

49

00:02:17,000  -->  00:02:20,019
is greater than the value we're searching for that means
50

50

00:02:20,019  -->  00:02:24,297
that the values from indexes six up to the end of the array
51

51

00:02:24,297  -->  00:02:26,738
are gonna be greater than the one we're looking for.
52

52

00:02:26,738  -->  00:02:29,155
So, we need to search the left half of the array
53

53

00:02:29,155  -->  00:02:32,063
that's where all the values that are less than the middle
54

54

00:02:32,063  -->  00:02:33,909
element are located.
55

55

00:02:33,909  -->  00:02:35,869
On the other hand, if the middle element
56

56

00:02:35,869  -->  00:02:38,603
is less than the value that we're looking for
57

57

00:02:38,603  -->  00:02:40,975
then we wanna search the right half of the array
58

58

00:02:40,975  -->  00:02:44,323
because if the elemented array index five is less
59

59

00:02:44,323  -->  00:02:46,889
than the value we're looking for that means
60

60

00:02:46,889  -->  00:02:49,622
all the elements from position zero to four again,
61

61

00:02:49,622  -->  00:02:52,103
also gonna be less because the array is sorted
62

62

00:02:52,103  -->  00:02:53,295
and so we know that the value
63

63

00:02:53,295  -->  00:02:56,286
we're looking for has to be at in index six
64

64

00:02:56,286  -->  00:02:58,913
or later on in the array.
65

65

00:02:58,913  -->  00:03:01,951
And so, what we do is we compare the element against
66

66

00:03:01,951  -->  00:03:04,085
the middle value and then depending
67

67

00:03:04,085  -->  00:03:07,386
what we find if the values are equal, we're done,
68

68

00:03:07,386  -->  00:03:10,353
if they're not, we're then going to just focus on
69

69

00:03:10,353  -->  00:03:13,940
the left part of the array or the right part of the array.
70

70

00:03:13,940  -->  00:03:16,407
And then we rinse and repeat, we do the same thing.
71

71

00:03:16,407  -->  00:03:19,008
So, if we're gonna focus on the left part of the array,
72

72

00:03:19,008  -->  00:03:22,149
we take the middle element in that left part of the array,
73

73

00:03:22,149  -->  00:03:24,392
and we compare it against the search value
74

74

00:03:24,392  -->  00:03:28,223
if the element in the middle of the left array is greater
75

75

00:03:28,223  -->  00:03:30,973
then we're gonna look at the left part of the left array
76

76

00:03:30,973  -->  00:03:33,547
and if it's less than we're gonna look at the right part
77

77

00:03:33,547  -->  00:03:34,472
of the left array.
78

78

00:03:34,472  -->  00:03:37,537
And we keep doing this, dividing each partition up
79

79

00:03:37,537  -->  00:03:39,930
until we're gonna end up ultimately
80

80

00:03:39,930  -->  00:03:41,802
either hitting our search value
81

81

00:03:41,802  -->  00:03:44,551
or we'll end up in the end with getting down
82

82

00:03:44,551  -->  00:03:46,196
to a one element partition,
83

83

00:03:46,196  -->  00:03:48,576
and that partition is gonna equal our search value.
84

84

00:03:48,576  -->  00:03:52,284
So, with each step we're dividing the array in half.
85

85

00:03:52,284  -->  00:03:54,871
It's very similar to what we were doing with merge-sort.
86

86

00:03:54,871  -->  00:03:58,115
So at each set we're partitioning the array in half,
87

87

00:03:58,115  -->  00:04:00,969
until the middle element of the partition we're searching
88

88

00:04:00,969  -->  00:04:02,646
equals the value we were looking for.
89

89

00:04:02,646  -->  00:04:04,759
And so, because there's a rinse and repeat step,
90

90

00:04:04,759  -->  00:04:07,958
we can write Binary Search recursively.
91

91

00:04:07,958  -->  00:04:10,101
So let's look at our familiar array
92

92

00:04:10,101  -->  00:04:12,468
and it's sorted because remember,
93

93

00:04:12,468  -->  00:04:16,096
you can only use Binary Search on sorted data,
94

94

00:04:16,096  -->  00:04:17,618
so the array has been sorted.
95

95

00:04:17,618  -->  00:04:20,483
Maybe we used merge-sort, maybe we used quick-sort,
96

96

00:04:20,483  -->  00:04:22,984
maybe we used insertion-sort, doesn't matter,
97

97

00:04:22,984  -->  00:04:24,740
we've sorted the array.
98

98

00:04:24,740  -->  00:04:27,533
And let's say we wanna define the value one.
99

99

00:04:27,533  -->  00:04:29,616
So our start index will be zero
100

100

00:04:29,616  -->  00:04:32,899
and our end index will be seven for the entire array.
101

101

00:04:32,899  -->  00:04:35,438
The end index will always be one greater
102

102

00:04:35,438  -->  00:04:37,479
than the last valid index,
103

103

00:04:37,479  -->  00:04:41,656
and we get the midpoint by dividing start plus end by two,
104

104

00:04:41,656  -->  00:04:43,890
and so our midpoint, our middle element,
105

105

00:04:43,890  -->  00:04:46,805
is going to be located at position three.
106

106

00:04:46,805  -->  00:04:49,173
And then we compare one against seven,
107

107

00:04:49,173  -->  00:04:51,356
and seven is greater than one,
108

108

00:04:51,356  -->  00:04:54,943
and so we know that our search value must be located
109

109

00:04:54,943  -->  00:04:58,316
in this area because the array is sorted, right?
110

110

00:04:58,316  -->  00:05:02,423
So, if our search value is less than the value here,
111

111

00:05:02,423  -->  00:05:04,426
it's not gonna be located up here
112

112

00:05:04,426  -->  00:05:06,426
because this array is sorted and so we know
113

113

00:05:06,426  -->  00:05:09,555
that all of the values from four to the end of the array
114

114

00:05:09,555  -->  00:05:11,943
are equal to or greater than this guy.
115

115

00:05:11,943  -->  00:05:14,613
If we compare one against the value at three,
116

116

00:05:14,613  -->  00:05:18,323
and the value was greater we know that one must be located
117

117

00:05:18,323  -->  00:05:21,524
in front of the middle element.
118

118

00:05:21,524  -->  00:05:24,583
And so, we're now gonna look at the left half of the array.
119

119

00:05:24,583  -->  00:05:26,911
So our start will be zero and our end
120

120

00:05:26,911  -->  00:05:30,232
will equal the midpoint from here,
121

121

00:05:30,232  -->  00:05:31,869
and so our end will be three,
122

122

00:05:31,869  -->  00:05:34,173
rememeber the end is always one greater
123

123

00:05:34,173  -->  00:05:35,778
than the partition we wanna look at
124

124

00:05:35,778  -->  00:05:37,720
so we're basically saying we're now gonna search
125

125

00:05:37,720  -->  00:05:41,223
elements zero to two and we get the new midpoint
126

126

00:05:41,223  -->  00:05:44,657
by adding start to end and dividing by two,
127

127

00:05:44,657  -->  00:05:46,071
and so that's three over two,
128

128

00:05:46,071  -->  00:05:49,352
so our new midpoint is one,
129

129

00:05:49,352  -->  00:05:51,654
which is here, minus 15.
130

130

00:05:51,654  -->  00:05:55,142
And so we're gonna compare one against minus 15.
131

131

00:05:55,142  -->  00:05:58,158
Now minus 15 is less than one,
132

132

00:05:58,158  -->  00:06:01,966
and so we know now that the value we're looking for must
133

133

00:06:01,966  -->  00:06:05,515
be in this partition, not in the entire array
134

134

00:06:05,515  -->  00:06:08,023
but in this partition, the value we're looking for
135

135

00:06:08,023  -->  00:06:10,845
must be in the right half of this partition.
136

136

00:06:10,845  -->  00:06:12,899
And so, we're gonna search the right half
137

137

00:06:12,899  -->  00:06:17,724
and so, our start in this case is gonna be midpoint plus one
138

138

00:06:17,724  -->  00:06:21,635
so our midpoint before was one and so we're gonna add
139

139

00:06:21,635  -->  00:06:24,878
one to that so our start will be index two,
140

140

00:06:24,878  -->  00:06:27,350
our end remains at index three,
141

141

00:06:27,350  -->  00:06:30,451
and our midpoint is two plus three,
142

142

00:06:30,451  -->  00:06:33,490
which is five over two, which is two.
143

143

00:06:33,490  -->  00:06:36,384
Basically, because our start is two and our end is three,
144

144

00:06:36,384  -->  00:06:39,685
we have a partition at one, so it's not surprising
145

145

00:06:39,685  -->  00:06:43,089
that array two equals the value we're looking for.
146

146

00:06:43,089  -->  00:06:44,775
And we have found our value.
147

147

00:06:44,775  -->  00:06:47,745
Now in this example, we did as many steps as we would've
148

148

00:06:47,745  -->  00:06:51,348
done for Linear search but if we were looking for a value
149

149

00:06:51,348  -->  00:06:53,753
up here it would've been a lot quicker.
150

150

00:06:53,753  -->  00:06:56,874
Because we would've come in and we would've looked at here,
151

151

00:06:56,874  -->  00:06:58,752
and said oh we're looking for 35, okay,
152

152

00:06:58,752  -->  00:07:00,613
well we're just gonna look here now.
153

153

00:07:00,613  -->  00:07:02,613
And so we skip all of this traversing
154

154

00:07:02,613  -->  00:07:04,269
of the front part of the array.
155

155

00:07:04,269  -->  00:07:05,834
And so, that's binary search.
156

156

00:07:05,834  -->  00:07:08,748
It basically starts out by dividing the array
157

157

00:07:08,748  -->  00:07:10,260
down the middle and then it always
158

158

00:07:10,260  -->  00:07:11,954
looks at the middle element
159

159

00:07:11,954  -->  00:07:15,713
and then depending on what the comparison result is
160

160

00:07:15,713  -->  00:07:17,644
less than, greater than or equal to,
161

161

00:07:17,644  -->  00:07:20,712
we've either finished or we're then only gonna focus on
162

162

00:07:20,712  -->  00:07:23,020
the left side or the right side,
163

163

00:07:23,020  -->  00:07:24,341
and then we run some repeat.
164

164

00:07:24,341  -->  00:07:26,178
So middle element, and then only left side,
165

165

00:07:26,178  -->  00:07:27,636
right side, etcetera.
166

166

00:07:27,636  -->  00:07:29,698
So as I said at some point,
167

167

00:07:29,698  -->  00:07:33,166
if you don't find the search value early on,
168

168

00:07:33,166  -->  00:07:35,322
at some point, eventually you're gonna get down
169

169

00:07:35,322  -->  00:07:37,357
to just one element in the partition and in fact
170

170

00:07:37,357  -->  00:07:39,973
that's what happened in the example wwe just went through.
171

171

00:07:39,973  -->  00:07:43,264
We can implement this recursively and the time complexity
172

172

00:07:43,264  -->  00:07:47,310
is O(logn) because we just keep dividing the array in half,
173

173

00:07:47,310  -->  00:07:50,760
and remember that will be O to the log base two n.
174

174

00:07:50,760  -->  00:07:52,932
Okay, so that's how Binary Search works.
175

175

00:07:52,932  -->  00:07:54,677
Let's go ahead and implement it.
176

176

00:07:54,677  -->  00:07:57,260
I'll see you in the next video.
