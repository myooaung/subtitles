1
1

00:00:04,056  -->  00:00:06,380
In this video we are talking
about PlayerPrefs.
2

2

00:00:06,380  -->  00:00:07,440
What is PlayerPrefs?
3

3

00:00:07,440  -->  00:00:12,430
Well prefs is short for preferences and
it's a file saved to the player's
4

4

00:00:12,430  -->  00:00:17,070
system which stores and accesses
player preferences between sessions.
5

5

00:00:17,070  -->  00:00:19,540
It's a place you can save stuff,
basically.
6

6

00:00:19,540  -->  00:00:20,747
And Unity is great,
7

7

00:00:20,747  -->  00:00:25,020
it saves to the relevant location
depending upon the platform it used.
8

8

00:00:25,020  -->  00:00:28,648
So, it'll be a certain file on the PC,
a different place on the XBox,
9

9

00:00:28,648  -->  00:00:32,401
it's a different place on Android,
and Unity takes care of that for us,
10

10

00:00:32,401  -->  00:00:33,810
which is awesome.
11

11

00:00:33,810  -->  00:00:36,560
It isn't secure, so it's easily hacked.
12

12

00:00:36,560  -->  00:00:39,350
So you don't wanna put anything
important in there, in terms of, say,
13

13

00:00:39,350  -->  00:00:44,750
unlocking a really amazing feature of your
game if you don't want someone to go and
14

14

00:00:44,750  -->  00:00:46,120
be able to hack into it.
15

15

00:00:46,120  -->  00:00:49,050
So we use it for things like what's
the volume level that it doesn't matter
16

16

00:00:49,050  -->  00:00:52,110
if someone goes and
plays around with it and changes it.
17

17

00:00:52,110  -->  00:00:53,705
Let's talk a bit about using PlayerPrefs.
18

18

00:00:53,705  -->  00:00:59,100
We have this PlayerPrefs file, which
will be saved Onto the user's system,
19

19

00:00:59,100  -->  00:01:03,220
onto their computer or their console or
their phone, and we can do three things.
20

20

00:01:03,220  -->  00:01:07,900
We can set a float, set a string,
or set an int, in terms of setting.
21

21

00:01:07,900  -->  00:01:12,120
There are things we can set against a key,
and we'll get to that in a little bit.
22

22

00:01:12,120  -->  00:01:13,710
And we can also get those values.
23

23

00:01:13,710  -->  00:01:15,610
So Get Float, String, or Int.
24

24

00:01:15,610  -->  00:01:18,840
So we can set those things, and
we can get those things from in here.
25

25

00:01:18,840  -->  00:01:20,080
Let's have a look at an example.
26

26

00:01:20,080  -->  00:01:22,750
We might want to set the volume,
which is a float, or
27

27

00:01:22,750  -->  00:01:25,500
we would make it a float, at 0.4.
28

28

00:01:25,500  -->  00:01:29,855
And that will save into the playerprefs
file, something that we will name, for
29

29

00:01:29,855  -->  00:01:32,139
example we will name it volume, 0.4.
30

30

00:01:32,139  -->  00:01:36,906
And then we can have a method to
get that information to say, hey,
31

31

00:01:36,906  -->  00:01:39,432
what is the current volume level?
32

32

00:01:39,432  -->  00:01:40,992
It's 0.4.
33

33

00:01:40,992  -->  00:01:43,560
But it can get messy
setting the volume to 0.4.
34

34

00:01:43,560  -->  00:01:47,282
The way we would do that we would
write PlayerPrefs.SetFloat, and
35

35

00:01:47,282  -->  00:01:54,080
then in parentheses, "Volume" as a string
reference comma and then our value of 0.4.
36

36

00:01:54,080  -->  00:01:55,560
This is the part that gets messy.
37

37

00:01:55,560  -->  00:01:56,480
Why is that?
38

38

00:01:56,480  -->  00:01:58,785
Because it's a string reference and Boooo!
39

39

00:01:58,785  -->  00:02:00,550
We don't like string references.
40

40

00:02:00,550  -->  00:02:06,150
Because they can get really buried and
lost and hidden within our code.
41

41

00:02:07,270  -->  00:02:09,460
And the main reason it can get messy is,
42

42

00:02:09,460  -->  00:02:14,610
it's not easy to see all of our
stored keys in PlayerPrefs.
43

43

00:02:14,610  -->  00:02:18,540
So we can, from any script, any file,
any class, we can say, hey,
44

44

00:02:18,540  -->  00:02:21,960
save this as a PlayerPref,
save that as a PlayerPref, and then
45

45

00:02:21,960  -->  00:02:25,790
it can be a big mess to try to find those,
remember those, know where those are.
46

46

00:02:26,860  -->  00:02:30,870
So we're gonna create a PlayerPrefs
class to keep all of our keys,
47

47

00:02:30,870  -->  00:02:34,140
that is the things that we want
to have stored, such as volume,
48

48

00:02:34,140  -->  00:02:38,740
we might call it master volume, and that's
a key that have information against it, so
49

49

00:02:38,740  -->  00:02:42,040
we want to create all of that
in one place in PlayerPrefs.
50

50

00:02:42,040  -->  00:02:46,162
And we're going to use public setter
methods so that we can access these things
51

51

00:02:46,162  -->  00:02:50,040
from any other class, player setter
methods and player getter methods.
52

52

00:02:50,040  -->  00:02:54,547
So we can set the volume at such and
such and get the volume at such and such.
53

53

00:02:54,547  -->  00:02:57,991
So let's dive into Unity,
and from our Options screen,
54

54

00:02:57,991  -->  00:03:02,680
well, from anywhere actually, but
I'm on my Options screen at the moment.
55

55

00:03:02,680  -->  00:03:07,652
I'm gonna go in my Scripts folder,
right-click,
56

56

00:03:07,652  -->  00:03:13,641
create a C#script which I will
call PlayerPrefsController.
57

57

00:03:16,319  -->  00:03:17,610
I'm gonna go ahead and open that up.
58

58

00:03:19,760  -->  00:03:22,282
So let's get rid of Start and Update.
59

59

00:03:22,282  -->  00:03:23,280
Right up at the very top,
60

60

00:03:23,280  -->  00:03:29,000
I'm gonna start by defining a key
that we can use over and over.
61

61

00:03:29,000  -->  00:03:31,810
So the key needs to be
a string when we enter it.
62

62

00:03:31,810  -->  00:03:36,120
So if you remember just here,
PlayerPrefs.SetFloat, and
63

63

00:03:36,120  -->  00:03:38,330
then we need to have
a string that we used.
64

64

00:03:38,330  -->  00:03:40,710
So rather than having a string
written right within here,
65

65

00:03:40,710  -->  00:03:45,030
we're going to use something called
a const, which is a constant.
66

66

00:03:45,030  -->  00:03:47,940
This is not a variable,
variables can vary.
67

67

00:03:47,940  -->  00:03:50,300
Constant is constantly a particular thing.
68

68

00:03:50,300  -->  00:03:55,450
So typing const, and it's a string,
and we're gonna call it,
69

69

00:03:55,450  -->  00:04:01,034
in capitals, to indicate that
it is a constant, it is a const,
70

70

00:04:01,034  -->  00:04:05,416
MASTER_VOLUME_KEY.
71

71

00:04:05,416  -->  00:04:08,070
And that will be defined as, or
72

72

00:04:08,070  -->  00:04:12,150
assigned as,
master volume is what that's going to be.
73

73

00:04:12,150  -->  00:04:14,980
Master volume we'll do as a,
I think that's pretty good.
74

74

00:04:14,980  -->  00:04:18,270
Okay, so
we've kinda made ourselves a string but
75

75

00:04:18,270  -->  00:04:20,660
we've created it not as a a variable,
it's like a variable,
76

76

00:04:20,660  -->  00:04:24,250
it's a value that we can
use anywhere that we want.
77

77

00:04:24,250  -->  00:04:25,890
So it all makes sense as we go through.
78

78

00:04:25,890  -->  00:04:27,670
It's a little bit confusing at the moment,
don't worry.
79

79

00:04:27,670  -->  00:04:35,342
We also need to make a const string for
our DIFFICULTY_KEY, DIFFICULTY_KEY,
80

80

00:04:35,342  -->  00:04:39,400
which we'll get to in upcoming videos,
and we'll call this difficulty.
81

81

00:04:39,400  -->  00:04:44,869
So in our quotation marks,
that is our string.
82

82

00:04:47,292  -->  00:04:54,240
Now jump down a bit, create ourselves
a new public method, so public, static.
83

83

00:04:54,240  -->  00:04:55,100
Why is it static?
84

84

00:04:55,100  -->  00:04:59,020
Well, it's not gonna change based upon
what's going on in this instance.
85

85

00:04:59,020  -->  00:05:03,160
We want this to be consistent
throughout our entire game,
86

86

00:05:03,160  -->  00:05:04,880
throughout our entire project.
87

87

00:05:04,880  -->  00:05:08,150
So it's only set once if it's static,
and it can only be updated, and
88

88

00:05:08,150  -->  00:05:11,020
it will be the one value in all
of the places, as opposed to,
89

89

00:05:11,020  -->  00:05:13,120
say, hit points, which for enemy a,
90

90

00:05:13,120  -->  00:05:16,620
it might have hit points of 10, and
enemy b it might have hit points of 20.
91

91

00:05:16,620  -->  00:05:22,980
But public static is only gonna
have the one value at a time.
92

92

00:05:22,980  -->  00:05:25,135
Can be void,
we're not looking to return anything.
93

93

00:05:25,135  -->  00:05:31,330
SetMasterVolume, and
then we're going to look for a float.
94

94

00:05:31,330  -->  00:05:34,572
And we'll call that float volume,
that we need to return.
95

95

00:05:38,131  -->  00:05:43,515
And then within here,
when another class calls this,
96

96

00:05:43,515  -->  00:05:49,271
we are going to simply have
PlayerPrefs.SetFloat().
97

97

00:05:49,271  -->  00:05:52,390
And then what is the string reference?
98

98

00:05:52,390  -->  00:05:55,970
Normally, we could say volume, but
we don't wanna be baking that in here.
99

99

00:05:55,970  -->  00:05:59,723
We're going to instead
say Master_Volume_Key.
100

100

00:05:59,723  -->  00:06:03,454
And you see the autocomplete gives us some
clues which is great, helps us out here.
101

101

00:06:03,454  -->  00:06:07,700
Master_Volume_Key, and then, well,
102

102

00:06:07,700  -->  00:06:12,584
we want to be passing in volume, so
we will use the value of volume.
103

103

00:06:12,584  -->  00:06:14,884
Okay, so that's pretty simple,
104

104

00:06:14,884  -->  00:06:19,170
that's pretty light on,
in terms of setting up our master volume.
105

105

00:06:20,900  -->  00:06:24,190
I'm going to put in a little bit of
a check and balance here because if
106

106

00:06:24,190  -->  00:06:28,370
the volume is too high or too low, if from
some other class or some other place we
107

107

00:06:28,370  -->  00:06:32,430
are saying, make the volume 328, and it's
not allowed to do that, then we don't want
108

108

00:06:32,430  -->  00:06:36,440
that to break what's going on in here,
we don't want it to store a dodgy value.
109

109

00:06:36,440  -->  00:06:41,519
So I'm creating myself an if statement,
if (volume &gt;=,
110

110

00:06:41,519  -->  00:06:47,294
if I do it properly, &gt;=, and
I'll set these consts up in a moment,
111

111

00:06:47,294  -->  00:06:51,094
but we'll create, we'll stub them in now.
112

112

00:06:51,094  -->  00:06:56,492
MIN_VOLUME in capitals, cuz it's gonna be
113

113

00:06:56,492  -->  00:07:01,620
another const, &amp;&amp; volume is &lt;= what?
114

114

00:07:01,620  -->  00:07:07,680
Well, we'll say MAX_VOLUME,
Then what do we wanna do?
115

115

00:07:07,680  -->  00:07:09,810
Well, if that's the case
then it's all good,
116

116

00:07:09,810  -->  00:07:14,790
we can have our PlayerPrefs set
the volume level as intended.
117

117

00:07:14,790  -->  00:07:17,300
And then finish off our curly braces here.
118

118

00:07:17,300  -->  00:07:24,160
So if the volume is greater than or
equal to the minimum and less than or
119

119

00:07:24,160  -->  00:07:27,640
equal to the maximum then go ahead and
do this, otherwise what should we do?
120

120

00:07:27,640  -->  00:07:34,732
Otherwise, say else, not capitals,
else, curly braces Debug.LogError.
121

121

00:07:34,732  -->  00:07:38,110
We don't do this often, but
we want this to be an error.
122

122

00:07:38,110  -->  00:07:41,060
We wanna be a red exclamation
mark that says you know,
123

123

00:07:41,060  -->  00:07:43,890
warning Will Robinson danger danger.
124

124

00:07:43,890  -->  00:07:49,700
So a little one down the right hand
side here we want that to show up.
125

125

00:07:50,990  -->  00:07:57,770
So log error and
well say Master volume is out of range.
126

126

00:07:59,180  -->  00:08:02,370
Now we need to go up and
create our other two consts.
127

127

00:08:02,370  -->  00:08:06,310
I'll give a bit of a space to denote
that these are our master keys and
128

128

00:08:06,310  -->  00:08:10,618
these are other sorts of consts.
129

129

00:08:10,618  -->  00:08:16,620
So const float MIN_VOLUME, and
130

130

00:08:16,620  -->  00:08:22,620
we'll start that off at 0,
0 should be the lowest volume we can have.
131

131

00:08:24,300  -->  00:08:27,436
And then const float MAX_VOLUME, and
132

132

00:08:27,436  -->  00:08:32,957
I believe we're gonna have volume
go from 0 to 1 so this will be 1f.
133

133

00:08:32,957  -->  00:08:35,977
Okay that's just a little make sure
we don't get ourselves in trouble in
134

134

00:08:35,977  -->  00:08:36,890
the future.
135

135

00:08:36,890  -->  00:08:37,805
Why are they in capital?
136

136

00:08:37,805  -->  00:08:38,827
Because they're consts.
137

137

00:08:38,827  -->  00:08:39,621
Why are they consts?
138

138

00:08:39,621  -->  00:08:41,526
Because we don't want our program,
139

139

00:08:41,526  -->  00:08:45,343
ourselves anyone else to ever change
what maximum or minimum volume are.
140

140

00:08:45,343  -->  00:08:49,609
Its always gonna be from 0 to 1, they're
not variables, they don't need to change,
141

141

00:08:49,609  -->  00:08:52,910
it's just always 0 is saying,
what's the gravitational force?
142

142

00:08:52,910  -->  00:08:54,192
It's always consistent in the world.
143

143

00:08:54,192  -->  00:08:55,800
Or what's pie equal to?
144

144

00:08:55,800  -->  00:08:57,210
It's always consistent.
145

145

00:08:57,210  -->  00:09:01,140
Don't make me recite it, I know it starts
with 3 and there is a decimal place but
146

146

00:09:01,140  -->  00:09:02,402
that's about it.
147

147

00:09:02,402  -->  00:09:04,080
Okay, save that up.
148

148

00:09:04,080  -->  00:09:07,240
What I'm gonna do now is just test out if
this works before we go any further, and
149

149

00:09:07,240  -->  00:09:13,948
to do that I'll put a little
debug line in here Debug.Log,
150

150

00:09:13,948  -->  00:09:19,520
and then "Master volume set to",
151

151

00:09:19,520  -->  00:09:25,620
and then space +, sorry,
space after to and
152

152

00:09:25,620  -->  00:09:31,460
then space and then +, and then we wanna
put our a value in here of volume.
153

153

00:09:33,110  -->  00:09:34,600
Okay.
154

154

00:09:34,600  -->  00:09:36,280
We need a place to set this from.
155

155

00:09:36,280  -->  00:09:39,870
So back over into Unity, and let's
create a little throwaway thing here.
156

156

00:09:39,870  -->  00:09:43,880
So right-click,
right-click Create a Game Object.
157

157

00:09:43,880  -->  00:09:49,270
I'm gonna call this Test please delete,
158

158

00:09:49,270  -->  00:09:52,550
so it's very clear to future
Rick what's going on.
159

159

00:09:52,550  -->  00:09:53,550
We'll add a component.
160

160

00:09:53,550  -->  00:09:55,087
I'll call this script Test.
161

161

00:09:58,230  -->  00:09:58,953
Open up Test.
162

162

00:10:01,141  -->  00:10:03,980
And in our Start method,
start typing PlayerPrefs.
163

163

00:10:03,980  -->  00:10:07,140
And we've got the regular PlayerPrefs and
we've got PlayerPrefsController.
164

164

00:10:07,140  -->  00:10:11,180
PlayerPrefs is referring to, and
I've given you this link in the resources,
165

165

00:10:11,180  -->  00:10:13,660
the PlayerPrefs in Unity
that's already set up, and
166

166

00:10:13,660  -->  00:10:17,770
here are the things that we can access,
setting and getting particular things.
167

167

00:10:17,770  -->  00:10:25,960
However, if we type in our own
PlayerPrefs, PlayerPrefsController,
168

168

00:10:25,960  -->  00:10:33,420
now we can access .SetMasterVolume,
which is cool.
169

169

00:10:33,420  -->  00:10:37,977
In parentheses what I'm going to set
the volume as, it's looking for a float,
170

170

00:10:37,977  -->  00:10:41,570
we'll say 0.4 like in my
example in the slides before.
171

171

00:10:41,570  -->  00:10:42,890
Okay, we've set the master volume.
172

172

00:10:42,890  -->  00:10:46,180
Save that up over into Unity.
173

173

00:10:46,180  -->  00:10:47,555
Looking on the console,
174

174

00:10:47,555  -->  00:10:51,590
clear those old warnings that we haven't
really paid a lot of attention to.
175

175

00:10:51,590  -->  00:10:57,490
Click on Play,
Master volume set to 0.4, excellent.
176

176

00:10:57,490  -->  00:11:00,320
So that part of things is working,
It is being set and
177

177

00:11:00,320  -->  00:11:04,090
when we access our PlayerPrefsController,
and setting the master volume
178

178

00:11:04,090  -->  00:11:08,030
we know that it's being set because we
are saying over here that it's being set.
179

179

00:11:09,250  -->  00:11:11,590
And now the important part is for
180

180

00:11:11,590  -->  00:11:14,870
us to be able to get that
number from our PlayerPrefs.
181

181

00:11:14,870  -->  00:11:19,250
So here is where I have a challenge for
you is to Get Master Volume.
182

182

00:11:19,250  -->  00:11:24,790
Write a public getter method that returns,
remember to use the returns keyword,
183

183

00:11:24,790  -->  00:11:27,600
returns our master
volume from PlayerPrefs,
184

184

00:11:27,600  -->  00:11:30,110
write that in the PlayerPrefs controller.
185

185

00:11:30,110  -->  00:11:33,000
And then to create a Test Game Object,
which I've done already, and
186

186

00:11:33,000  -->  00:11:36,440
script to set the master volume,
we just did that.
187

187

00:11:36,440  -->  00:11:40,470
Then to get it and print the value
to the console with a witty message.
188

188

00:11:40,470  -->  00:11:42,920
So we were printing the setting of it.
189

189

00:11:42,920  -->  00:11:45,450
Now let's print the getting of it.
190

190

00:11:45,450  -->  00:11:47,570
So jump in, take that on now.
191

191

00:11:47,570  -->  00:11:50,080
Pretty simple,
it's not huge functionality but
192

192

00:11:50,080  -->  00:11:54,390
it's making sure that our PlayerPrefs
system is working already.
193

193

00:11:54,390  -->  00:11:55,660
So I'll see you back here
when you've done that.
194

194

00:11:57,640  -->  00:11:58,950
Okay, how'd you go with that?
195

195

00:11:58,950  -->  00:12:01,190
Good and awesome I hope.
196

196

00:12:01,190  -->  00:12:07,371
First of all,
we're gonna make our public static float,
197

197

00:12:07,371  -->  00:12:15,337
it's a float cuz we need to return
something when we are GetMasterVolume.
198

198

00:12:18,155  -->  00:12:23,266
And in here I'm going to
return PlayerPrefs.GetFloat,
199

199

00:12:23,266  -->  00:12:27,956
so I'm gonna be getting the float,
and what is it of,
200

200

00:12:27,956  -->  00:12:31,832
well, it's of the MASTER_VOLUME_KEY.
201

201

00:12:31,832  -->  00:12:33,197
Nice so it's getting that.
202

202

00:12:33,197  -->  00:12:39,462
Then over into my test and I'm going
to do this a little bit differently,
203

203

00:12:39,462  -->  00:12:44,290
I'm going to straight up print this,
so Debug.Log and
204

204

00:12:44,290  -->  00:12:49,430
then
PlayerPrefsController.GetMasterVolume();,
205

205

00:12:49,430  -->  00:12:54,256
so I could put something
a little bit more fancy in here,
206

206

00:12:54,256  -->  00:12:57,851
so maybe I'll say, in quotation marks,
207

207

00:12:57,851  -->  00:13:03,640
"Returned value of " and
then + leave a space after of.
208

208

00:13:03,640  -->  00:13:05,740
Save that up, we'll see what goes on here.
209

209

00:13:05,740  -->  00:13:11,207
Click on Play Okay,
210

210

00:13:11,207  -->  00:13:14,392
master volume set to 0.4,
returned value of 0.4.
211

211

00:13:14,392  -->  00:13:17,025
Excellent, so this is working,
we're saving to PlayerPrefs and
212

212

00:13:17,025  -->  00:13:20,176
we're getting information back from
PlayerPrefs, so that's a great spot for
213

213

00:13:20,176  -->  00:13:21,450
us to stop this video.
214

214

00:13:21,450  -->  00:13:23,770
Well done, and
I'll see you in the next lecture.
