WEBVTT
1
1

00:00:00.000  -->  00:00:04.359
[MUSIC]
2

2

00:00:04.359  -->  00:00:07.892
In this video we're giving our player
some damage so that it can be hit, and
3

3

00:00:07.892  -->  00:00:09.140
destroyed, and killed.
4

4

00:00:09.140  -->  00:00:09.740
Blump!
5

5

00:00:09.740  -->  00:00:13.173
And we also are going to introduce a whole
bunch of really weird bugs that we're
6

6

00:00:13.173  -->  00:00:14.799
going to defer until the next video.
7

7

00:00:14.799  -->  00:00:17.641
But for now, we're getting our
player with a health system and
8

8

00:00:17.641  -->  00:00:19.840
with the ability to be destroyed.
9

9

00:00:19.840  -->  00:00:21.940
Before we get stuck into the code,
there's one thing I wanna do.
10

10

00:00:21.940  -->  00:00:26.040
I'm really not happy with the darkness of
my enemy laser, I can't really see it as
11

11

00:00:26.040  -->  00:00:28.670
I'm playing the game, so
I'm gonna do something very quickly here.
12

12

00:00:28.670  -->  00:00:31.570
Go into my Assets folder, into PNGs,
13

13

00:00:31.570  -->  00:00:34.570
look for Lasers,
see what else we've got in there.
14

14

00:00:34.570  -->  00:00:39.290
And it looks like we've got a red with
white on the inside, so I'm gonna drag
15

15

00:00:39.290  -->  00:00:43.890
that into my Sprites folder to say, yep,
this is one of the sprites I am using.
16

16

00:00:43.890  -->  00:00:44.980
Now, back to my prefabs.
17

17

00:00:44.980  -->  00:00:50.320
Click on the enemy laser, and the enemy
laser I will change under Sprite Renderer,
18

18

00:00:50.320  -->  00:00:53.460
click on the selector next to my sprite,
and
19

19

00:00:53.460  -->  00:00:56.748
choose the laserRed04
that I had just selected.
20

20

00:00:56.748  -->  00:00:59.170
And then right-click out,
don't need to do a refresh,
21

21

00:00:59.170  -->  00:01:01.380
it refreshed itself or re-import.
22

22

00:01:01.380  -->  00:01:03.200
And then,
to give it a little bit more flair,
23

23

00:01:03.200  -->  00:01:06.570
I'm just going to create a little
bit of yellowy sort of color,
24

24

00:01:06.570  -->  00:01:10.170
maybe a little bit orangey,
just to have it not quite so white.
25

25

00:01:10.170  -->  00:01:13.190
Click on Play, just make sure that
stands out and pops a little bit better.
26

26

00:01:13.190  -->  00:01:17.620
Might want to make it a bit
larger as well, then not too bad.
27

27

00:01:17.620  -->  00:01:21.625
I think perhaps I will make it a bit
larger just by going into my sprite,
28

28

00:01:21.625  -->  00:01:25.520
finding the sprite here, and
then instead of pixels per unit 100
29

29

00:01:25.520  -->  00:01:29.940
I'm gonna say pixels per unit 50,
which should double it in size.
30

30

00:01:29.940  -->  00:01:34.600
Click on Apply, and
then click on Play, see how that goes.
31

31

00:01:34.600  -->  00:01:37.240
And it will fall from the sky
much bigger than it was.
32

32

00:01:37.240  -->  00:01:40.350
Okay, so
some nice big lasers that are menacing for
33

33

00:01:40.350  -->  00:01:43.760
us to avoid grom our enemies,
they're nearly bigger than the enemies.
34

34

00:01:43.760  -->  00:01:46.730
That's fine for now, I just wanted to
have that really, really clear, so
35

35

00:01:46.730  -->  00:01:50.960
that you can see it on your screen while
I'm going through this on my screen.
36

36

00:01:50.960  -->  00:01:54.265
Okay, now let's jump over
into our Player.cs script.
37

37

00:01:54.265  -->  00:01:56.608
I wanna show you something
briefly in here,
38

38

00:01:56.608  -->  00:02:00.483
as a way to organize our variables
that we have within our Player script.
39

39

00:02:00.483  -->  00:02:04.513
So if we clicked on Player in your
hierarchy, you can see that under Player
40

40

00:02:04.513  -->  00:02:08.804
script we've got the variable that
we've exposed using serialized fields,
41

41

00:02:08.804  -->  00:02:11.877
let's organize them a more
bit better by using Header.
42

42

00:02:11.877  -->  00:02:16.919
So the Header attribute,
if we give ourselves a new line of having
43

43

00:02:16.919  -->  00:02:22.694
our variables, open our square bracket,
type in Header with a capital H,
44

44

00:02:22.694  -->  00:02:27.095
open parentheses and
then quotations, and we will say,
45

45

00:02:27.095  -->  00:02:31.960
this is the Player Movement,
I believe is at the top here.
46

46

00:02:31.960  -->  00:02:33.780
Yep, moveSpeed and padding core.
47

47

00:02:33.780  -->  00:02:39.410
And then above laserPrefab I'm gonna
create a Header, again square brackets,
48

48

00:02:39.410  -->  00:02:44.650
Header, parenthesis, quotation marks,
we'll call this Projectile.
49

49

00:02:45.650  -->  00:02:46.690
Click on Save.
50

50

00:02:46.690  -->  00:02:50.080
Back over into Unity, and
you can see, once that compiles and
51

51

00:02:50.080  -->  00:02:53.680
does the magic that it needs to do, that
over here under our Player (Script) we'll
52

52

00:02:53.680  -->  00:02:56.660
have a header or heading,
which is Player Movement.
53

53

00:02:56.660  -->  00:02:59.555
It has the two variables, and
then Projectile and the variables there.
54

54

00:02:59.555  -->  00:03:02.055
So this is pretty handy when you
get a lot of things going on,
55

55

00:03:02.055  -->  00:03:04.515
you can organize them and
group them a bit better.
56

56

00:03:04.515  -->  00:03:08.494
So we will add one new thing under Player
Movement, and already Player Movement's
57

57

00:03:08.494  -->  00:03:11.695
not correct, cuz I'm about to add health,
so we'll just call it Player, so
58

58

00:03:11.695  -->  00:03:14.293
it's Player versus Projectile
is our distinction there.
59

59

00:03:14.293  -->  00:03:17.050
I will SerializedField,
60

60

00:03:17.050  -->  00:03:21.780
this will be our integer, and we'll call
this health, so the player has health.
61

61

00:03:21.780  -->  00:03:25.395
We'll start that off at 200, semicolon.
62

62

00:03:25.395  -->  00:03:29.505
Now what we need to do is have a way for
the player to collide with things, and
63

63

00:03:29.505  -->  00:03:33.110
a way for the player to take damage and
potentially be destroyed.
64

64

00:03:33.110  -->  00:03:36.729
And this is where I've got a challenge for
you, give the player life and death,
65

65

00:03:36.729  -->  00:03:38.363
use our enemy code as inspiration.
66

66

00:03:38.363  -->  00:03:41.697
In fact you can, okay just between you and
me, you can copy and
67

67

00:03:41.697  -->  00:03:45.417
paste the exact same code, but
if you wanted to type it out that is even
68

68

00:03:45.417  -->  00:03:47.881
cooler to show that you
remember how we do it.
69

69

00:03:47.881  -->  00:03:50.188
So check for collision, process the hit so
70

70

00:03:50.188  -->  00:03:52.632
that health is reduced
by the damage amount.
71

71

00:03:52.632  -->  00:03:55.562
Once health is below zero
destroy the Player, and
72

72

00:03:55.562  -->  00:03:59.540
when you're testing this don't
forget to add all the colliders and
73

73

00:03:59.540  -->  00:04:04.170
triggers In all of the places that you
need to add colliders and triggers.
74

74

00:04:04.170  -->  00:04:05.510
So there's your challenge, take that on,
75

75

00:04:05.510  -->  00:04:08.380
see if you can get to the point where
the player can be shot and destroyed.
76

76

00:04:10.950  -->  00:04:15.850
Okay, so over into my Enemy.cs script
I find my OnTriggerEnter2D and
77

77

00:04:15.850  -->  00:04:17.140
my ProcessHit.
78

78

00:04:17.140  -->  00:04:21.890
Highlight all of those, copy,
back over into Player, and
79

79

00:04:21.890  -->  00:04:26.190
underneath Update I'm gonna give myself
a little bit of space and paste those in.
80

80

00:04:26.190  -->  00:04:29.890
Now, this is gonna be exactly the same,
and part of your brain should be saying,
81

81

00:04:29.890  -->  00:04:33.370
hang on a minute, why are we just
pasting the same code twice?
82

82

00:04:33.370  -->  00:04:36.650
Shouldn't we create it once, and
then apply it as two components?
83

83

00:04:36.650  -->  00:04:40.854
We could do that, I'm not gonna do that at
the moment, cuz I'm not exactly sure how
84

84

00:04:40.854  -->  00:04:44.159
things are going to change for
the player vs the enemy when we do all
85

85

00:04:44.159  -->  00:04:48.245
the different things that need to happen
when the player gets to zero health, for
86

86

00:04:48.245  -->  00:04:51.468
example loading new scenes or
triggering different effects.
87

87

00:04:51.468  -->  00:04:55.588
But because these are the same, we could
have a health component that sits on both
88

88

00:04:55.588  -->  00:04:59.952
the enemy and the player, and then there's
just one block of code to maintain instead
89

89

00:04:59.952  -->  00:05:03.420
of having two very,
very similar blocks of code in two places.
90

90

00:05:03.420  -->  00:05:04.370
But for now, we'll do it this way.
91

91

00:05:04.370  -->  00:05:10.280
We've got our OnTriggerEnter2D with our
DamageDealer component and ProcessingHit.
92

92

00:05:10.280  -->  00:05:14.430
Health is gonna be minus the
damageDealer.GetDamage(), which is cool.
93

93

00:05:14.430  -->  00:05:17.770
And then if the health gets to 0,
then Destroy the gameObject.
94

94

00:05:17.770  -->  00:05:18.400
Let's save that.
95

95

00:05:18.400  -->  00:05:19.830
I'll go back over into Unity, and
96

96

00:05:19.830  -->  00:05:22.090
then do the other couple of
things that we haven't done yet.
97

97

00:05:22.090  -->  00:05:24.410
I'm gonna click on Player,
zoom in a little bit, so
98

98

00:05:24.410  -->  00:05:27.260
I can see it nice and big on my screen.
99

99

00:05:27.260  -->  00:05:32.780
And then Add Component, the component
I'll add is a Collider, let's see.
100

100

00:05:32.780  -->  00:05:35.470
I will add a Polygon Collider 2D.
101

101

00:05:35.470  -->  00:05:38.800
So we've been through that process, it's
a little bit messy when it goes on this.
102

102

00:05:38.800  -->  00:05:42.156
It's probably good enough to be honest,
but I'm gonna do a little bit of editing.
103

103

00:05:42.156  -->  00:05:45.201
Click on Edit Collider, grab the points,
104

104

00:05:45.201  -->  00:05:48.930
move them into the general
area where the player is.
105

105

00:05:48.930  -->  00:05:49.810
As I've said before,
106

106

00:05:49.810  -->  00:05:54.030
I like to do a little bit on the inside
rather than a little bit on the outside.
107

107

00:05:54.030  -->  00:05:57.580
I think players don't mind when they get
away with something, as opposed to when
108

108

00:05:57.580  -->  00:06:02.620
they feel a little bit cheated, so getting
away with a close contact is better.
109

109

00:06:02.620  -->  00:06:05.687
Just moving these points around,
this is just left mouse button,
110

110

00:06:05.687  -->  00:06:06.853
grabbing on the points.
111

111

00:06:06.853  -->  00:06:10.752
You can see it snaps when it gets
pretty close, moving the points around.
112

112

00:06:10.752  -->  00:06:15.014
It doesn’t need to be 1,000% precise,
but we get a pretty good,
113

113

00:06:15.014  -->  00:06:19.431
so that we know that the player is
reasonably, accurately represented.
114

114

00:06:19.431  -->  00:06:23.581
Okay, that’s pretty good, remember
to apply that back to the prefab so
115

115

00:06:23.581  -->  00:06:27.881
that it is on our prefab, and we can use
that in any other scene that we have.
116

116

00:06:27.881  -->  00:06:31.870
Now under Prefabs I'm
gonna find my enemy laser.
117

117

00:06:31.870  -->  00:06:34.654
The enemy laser also needs
some sort of collision, and
118

118

00:06:34.654  -->  00:06:38.948
this one I will use a Capture Collider 2D,
that worked pretty well when we were doing
119

119

00:06:38.948  -->  00:06:42.150
the play laser, so
I think that'll work well again.
120

120

00:06:42.150  -->  00:06:45.740
I'll just drop that into scene to check
that it's okay, yep, looks pretty good.
121

121

00:06:47.060  -->  00:06:51.305
Okay, and the last thing I'll do while
clicking on the enemy laser prefab under
122

122

00:06:51.305  -->  00:06:57.040
the capture collider is to say Is Trigger,
and to check that so we do have a trigger.
123

123

00:06:57.040  -->  00:06:58.283
Okay, let's save,
124

124

00:06:58.283  -->  00:07:02.297
see what we've got in terms of
bullets being able to hurt the player.
125

125

00:07:02.297  -->  00:07:03.485
I guess they're laser beams, aren't they?
126

126

00:07:03.485  -->  00:07:04.992
They're laser projectiles.
127

127

00:07:04.992  -->  00:07:08.322
So the player currently has,
I'll click on Player so
128

128

00:07:08.322  -->  00:07:13.540
we can see the player's health where
it's healthy, it's just there.
129

129

00:07:13.540  -->  00:07:17.910
And boink, there we go,
the player got seriously destroyed.
130

130

00:07:17.910  -->  00:07:21.750
Now, there's a couple of things, [LAUGH]
there's a whole lot of nonsense going on
131

131

00:07:21.750  -->  00:07:25.440
here at the moment, so that's gonna be
very excellent for upcoming videos.
132

132

00:07:25.440  -->  00:07:26.899
I just want to highlight to you,
133

133

00:07:26.899  -->  00:07:29.493
you can see that the enemies
are destroying themselves,
134

134

00:07:29.493  -->  00:07:33.290
the player got destroyed after just one
hit, there's a lot of crazy going on here.
135

135

00:07:33.290  -->  00:07:37.503
But as a first step, we've got our
player to the point where it can
136

136

00:07:37.503  -->  00:07:40.119
receive damage and it can be destroyed.
137

137

00:07:40.119  -->  00:07:43.947
So great work, well done, and I'll see
you in the next video where we'll tidy
138

138

00:07:43.947  -->  00:07:47.150
up [LAUGH] some of this weirdness
that's taking place in our game.
