1
1

00:00:00,000  -->  00:00:04,157
[MUSIC]
2

2

00:00:04,157  -->  00:00:07,533
In this video we're gonna create
enemies that run along our ledge.
3

3

00:00:07,533  -->  00:00:10,749
And when they get to the end they turn
around and come back the other way and
4

4

00:00:10,749  -->  00:00:12,720
I'll just jump over the enemy here.
5

5

00:00:12,720  -->  00:00:16,360
And knows when it has reached the end and
returns back the other way.
6

6

00:00:16,360  -->  00:00:21,010
Okay, the first step in the process is to
grab the enemy sprite that I've created.
7

7

00:00:21,010  -->  00:00:23,620
I just click on my Sprite folder here and
then drag in.
8

8

00:00:23,620  -->  00:00:27,960
So download and then drag in
the enemy sprite sheet that we have.
9

9

00:00:27,960  -->  00:00:31,570
Cool there he is down here,
a little blobby up and down kind of guy.
10

10

00:00:31,570  -->  00:00:32,880
Fantastic, what do we need to do?
11

11

00:00:32,880  -->  00:00:35,480
Well we need to slice up this
sprite sheet first of all.
12

12

00:00:35,480  -->  00:00:39,940
So I'm gonna click on Multiple and
then to make it 32 pixels per unit,
13

13

00:00:39,940  -->  00:00:45,080
clicks the Apply down there and
then jump into the Sprite Editor.
14

14

00:00:45,080  -->  00:00:49,093
Let's have a look here, I think I'll
splice this, slice this, sorry,
15

15

00:00:49,093  -->  00:00:50,277
by grid by cell size.
16

16

00:00:50,277  -->  00:00:54,550
We know it's gonna be 32 by 32,
Padding should be 6 and
17

17

00:00:54,550  -->  00:00:56,780
then I'm not sure the offset.
18

18

00:00:56,780  -->  00:00:59,331
Looks like we do need to have a little bit
of an offset to the right and to down.
19

19

00:00:59,331  -->  00:01:03,867
I'm just gonna have a guess and
say 6 and 1 in terms of the offset,
20

20

00:01:03,867  -->  00:01:08,020
6 to the right and 1 down,
I'll hold down Ctrl in here.
21

21

00:01:08,020  -->  00:01:12,780
Looks like we've got the y offset
accurate, but not the x offset, so
22

22

00:01:12,780  -->  00:01:17,120
I'll push the x offset a little bit more,
9 to slice that.
23

23

00:01:17,120  -->  00:01:20,570
I'm gonna have it pretty
much in the middle.
24

24

00:01:20,570  -->  00:01:24,630
It doesn't quite look in the middle and
push it one more, maybe two more here.
25

25

00:01:24,630  -->  00:01:29,360
So the offset to 11 and slice that, okay.
26

26

00:01:29,360  -->  00:01:32,180
It's looking pretty good
touching the ground and
27

27

00:01:32,180  -->  00:01:33,610
mostly in the middle, excellent.
28

28

00:01:33,610  -->  00:01:38,190
So we'll Apply that, we now have
a sprite sheet with individual sprites.
29

29

00:01:38,190  -->  00:01:41,790
We need to go and create ourselves
an actual enemy, to put into our scene.
30

30

00:01:41,790  -->  00:01:45,260
So let's go and click on the actual
enemy button [LAUGH] just joking.
31

31

00:01:45,260  -->  00:01:48,510
Click on Create Empty,
we will name this enemy.
32

32

00:01:50,240  -->  00:01:53,520
Reset the transform,
right-clicking there, Reset.
33

33

00:01:53,520  -->  00:01:55,450
And our enemy is sitting just there.
34

34

00:01:55,450  -->  00:01:57,310
Let's move enemy over to near the player.
35

35

00:01:57,310  -->  00:01:58,820
Hang on a minute, where's the enemy?
36

36

00:01:58,820  -->  00:02:01,970
Well, first of all, we need to
give the enemy a sprite renderer.
37

37

00:02:01,970  -->  00:02:03,570
So I'm gonna add the components now.
38

38

00:02:03,570  -->  00:02:05,739
If you want to go ahead and
add the components yourself,
39

39

00:02:05,739  -->  00:02:08,016
do a little micro challenge,
pause the video and do that.
40

40

00:02:08,016  -->  00:02:09,517
Otherwise you can follow along with me or
41

41

00:02:09,517  -->  00:02:11,390
we'll do it together or
maybe we'll have a race.
42

42

00:02:11,390  -->  00:02:13,320
Let's see who can add all
the components first.
43

43

00:02:13,320  -->  00:02:16,390
So gonna start with a sprite renderer,
sprite renderer, and
44

44

00:02:16,390  -->  00:02:19,293
we need to give ourselves
an indication of who this guy is.
45

45

00:02:19,293  -->  00:02:23,083
So just drag one of the sprites
we've sliced up already into here so
46

46

00:02:23,083  -->  00:02:24,334
we can see the enemy.
47

47

00:02:24,334  -->  00:02:28,500
Or actually we can't at the moment
because our sorting layer is incorrect.
48

48

00:02:28,500  -->  00:02:31,280
Let's go and create our cells and
use Sorting Layer.
49

49

00:02:31,280  -->  00:02:33,450
Not incorrect,
we just haven't set up a sort layer.
50

50

00:02:33,450  -->  00:02:35,350
Click the plus button here.
51

51

00:02:35,350  -->  00:02:41,974
Rename this to Enemy, and then
the Enemy should be before the Player.
52

52

00:02:41,974  -->  00:02:45,321
So I think the Player's always going to
be rendered over the top of the Enemy,
53

53

00:02:45,321  -->  00:02:46,850
that's the right way to do it.
54

54

00:02:46,850  -->  00:02:52,310
Click back on the Enemy game object and
change the sorting layer here to Enemy.
55

55

00:02:52,310  -->  00:02:54,060
Now we can see our Enemy, fantastic.
56

56

00:02:54,060  -->  00:02:56,510
Just put the Enemy down
on the ground just there.
57

57

00:02:56,510  -->  00:02:58,350
Okay, very cool, got our Enemy here.
58

58

00:02:58,350  -->  00:03:00,270
Next up, what do we need for components?
59

59

00:03:00,270  -->  00:03:02,880
Well, we need a way of
moving the Enemy around.
60

60

00:03:02,880  -->  00:03:06,870
We need a rigid body, so Rigidbody 2D.
61

61

00:03:06,870  -->  00:03:11,275
We're gonna make our enemy a kinematic
rigid body, so that means gravity and
62

62

00:03:11,275  -->  00:03:12,580
forces won't apply.
63

63

00:03:12,580  -->  00:03:16,812
We don't need the enemy to be jumping or
bouncing or falling off ledges.
64

64

00:03:16,812  -->  00:03:20,884
We actually want the opposite, we want the
enemy just to stay just along the ledge,
65

65

00:03:20,884  -->  00:03:23,336
just to do its thing,
to be a threat to the player.
66

66

00:03:23,336  -->  00:03:24,656
But not too much of a crazy,
67

67

00:03:24,656  -->  00:03:28,610
out of control, chasing the player up and
down ladders kind of threat.
68

68

00:03:28,610  -->  00:03:30,240
Okay, so we've got our RigidBody in there.
69

69

00:03:30,240  -->  00:03:32,420
Next up, we need to give
you some form of collision.
70

70

00:03:32,420  -->  00:03:38,030
So we'll say a collider, Capsule Collider,
similar to the way we did with the player.
71

71

00:03:39,190  -->  00:03:41,330
Capsule Collider,
let's do a little bit of editing on that,
72

72

00:03:41,330  -->  00:03:42,850
click on the Edit Collider button.
73

73

00:03:45,154  -->  00:03:48,800
Doesn't need to be perfect,
just somewhere in the middle.
74

74

00:03:48,800  -->  00:03:50,930
Now, good, okay so
we're got a collision on there.
75

75

00:03:50,930  -->  00:03:55,080
Next up we need a way to move and
drive the animation.
76

76

00:03:55,080  -->  00:03:56,450
Not move, we'll do that in script.
77

77

00:03:56,450  -->  00:03:58,690
But the animation,
we want the bouncing up and down.
78

78

00:03:58,690  -->  00:04:02,720
We need an animator, animator to do that.
79

79

00:04:02,720  -->  00:04:04,390
And what goes hand in
hand with the animator?
80

80

00:04:04,390  -->  00:04:05,863
Well, we need an animator controller.
81

81

00:04:05,863  -->  00:04:08,000
You can see the player
animator controller.
82

82

00:04:08,000  -->  00:04:09,280
That's not gonna do for the enemy.
83

83

00:04:09,280  -->  00:04:10,635
We need a specific enemy one.
84

84

00:04:10,635  -->  00:04:14,542
Click over into my Animations folder here,
right-click,
85

85

00:04:14,542  -->  00:04:18,540
Create &gt; Animator Controller,
and we'll name this Enemy.
86

86

00:04:19,920  -->  00:04:21,730
Okay, that's opened up by default, but
87

87

00:04:21,730  -->  00:04:24,330
make sure you clicked on your
Animator window to see that.
88

88

00:04:24,330  -->  00:04:28,290
And we need to create an animation for
the enemy.
89

89

00:04:28,290  -->  00:04:29,860
So back to my sprites.
90

90

00:04:29,860  -->  00:04:30,950
We've done this a few times, so
91

91

00:04:30,950  -->  00:04:33,390
this should be feeling
pretty intuitive for you.
92

92

00:04:33,390  -->  00:04:38,090
Right-click to Create Animation.
93

93

00:04:38,090  -->  00:04:41,830
We'll call this animation enemy bounce.
94

94

00:04:43,220  -->  00:04:45,400
Drag the enemy bounce,
actually, before I drag that,
95

95

00:04:45,400  -->  00:04:47,530
I'll click on Looping to
make sure this loops.
96

96

00:04:47,530  -->  00:04:49,600
Because you go bounce,
bounce, bounce on the spot.
97

97

00:04:49,600  -->  00:04:52,760
Drag that into our
Animate Controller here.
98

98

00:04:52,760  -->  00:04:54,140
We don't need to worry
about the transition.
99

99

00:04:54,140  -->  00:04:57,430
It's going immediately into these enemy
bounces, and it's not transitioning in and
100

100

00:04:57,430  -->  00:04:58,690
out anywhere.
101

101

00:04:58,690  -->  00:05:02,590
We click back on Enemy, the last step
here is to make sure that our animator
102

102

00:05:02,590  -->  00:05:05,300
controller is assigned to the animator.
103

103

00:05:05,300  -->  00:05:10,785
So I'm going to click on the selector here
and choose the Enemy Animator controller.
104

104

00:05:10,785  -->  00:05:14,690
And click Play just to make sure that
first stage of getting our enemy set up is
105

105

00:05:14,690  -->  00:05:15,660
working.
106

106

00:05:15,660  -->  00:05:17,590
Cool, so
then we're just bouncing on this spot.
107

107

00:05:17,590  -->  00:05:18,670
Bouncy, bounce, very good.
108

108

00:05:21,250  -->  00:05:22,840
Okay, and as is the player.
109

109

00:05:22,840  -->  00:05:24,320
So we've both got a bit of an idle.
110

110

00:05:24,320  -->  00:05:27,120
The enemy, we don't need to worry
about an idle state or a run state.
111

111

00:05:27,120  -->  00:05:30,140
It's just gonna be bouncing while moving,
that's pretty much it.
112

112

00:05:31,270  -->  00:05:32,260
Okay, what to do next?
113

113

00:05:32,260  -->  00:05:35,150
Well, we need to drive the actual
behavior of the enemy, so
114

114

00:05:35,150  -->  00:05:36,760
let's create ourselves a script.
115

115

00:05:36,760  -->  00:05:42,030
We'll call this EnemyMovement Create and
add that there.
116

116

00:05:42,030  -->  00:05:44,980
Open up that script, and
we have a blank canvas here.
117

117

00:05:44,980  -->  00:05:45,960
What do we want to do?
118

118

00:05:45,960  -->  00:05:50,536
Well, we need to get
the RigidBody 2D of the enemy so
119

119

00:05:50,536  -->  00:05:54,180
that we can move the enemy left and right.
120

120

00:05:54,180  -->  00:05:57,920
And we need to know which
way the enemy is facing, and
121

121

00:05:57,920  -->  00:06:02,170
we need a way of saying when you
get to the end to turn around.
122

122

00:06:02,170  -->  00:06:04,880
So let's start by getting the RigidBody.
123

123

00:06:04,880  -->  00:06:13,250
So as we've done before, RigidBody2D,
we will call this myRigidBody, okay.
124

124

00:06:13,250  -->  00:06:17,851
Okay, then we need to get that
RigidBody so now Start method here,
125

125

00:06:17,851  -->  00:06:20,830
we'll say myRigidBody = GetComponent.
126

126

00:06:20,830  -->  00:06:21,600
What type is that?
127

127

00:06:21,600  -->  00:06:26,920
Well, it is of type RigidBody,
2D, okay, so we've got that.
128

128

00:06:26,920  -->  00:06:32,043
We also need a way of saying how fast
the enemy is going to parametrize that.
129

129

00:06:32,043  -->  00:06:37,568
So we will create a serialized field
which will be of type float and
130

130

00:06:37,568  -->  00:06:40,110
we will call this moveSpeed.
131

131

00:06:40,110  -->  00:06:43,890
So we can change that in our Inspector or
actually we'll initialize that, I think,
132

132

00:06:43,890  -->  00:06:48,330
to 1f, just so
that we have a starting point of 1, okay.
133

133

00:06:48,330  -->  00:06:50,740
Now that we've got our rigidBody and
134

134

00:06:50,740  -->  00:06:54,440
we have a way of saying to
move it a certain speed.
135

135

00:06:54,440  -->  00:06:59,060
Let's in update, let's just move our enemy
across the screen just in one direction.
136

136

00:06:59,060  -->  00:07:02,170
So if you want a micro challenge,
pause the video now and go ahead and
137

137

00:07:02,170  -->  00:07:06,270
just move your enemy
just right by move speed.
138

138

00:07:06,270  -->  00:07:08,360
Just right across the right of the screen.
139

139

00:07:08,360  -->  00:07:10,020
So there's a little micro challenge for
you.
140

140

00:07:10,020  -->  00:07:11,360
If you wanna do this together with me,
141

141

00:07:11,360  -->  00:07:16,110
then I'm gonna say
myRigidBody.velocity dot.
142

142

00:07:17,110  -->  00:07:18,310
Sorry, not dot, equals.
143

143

00:07:18,310  -->  00:07:22,240
So myRigidBody velocity is going to equal,
has to be a new vector too.
144

144

00:07:24,370  -->  00:07:25,890
And then this will be out.
145

145

00:07:25,890  -->  00:07:28,790
x and y will be moveSpeed and 0.
146

146

00:07:28,790  -->  00:07:33,790
We don't need to change or do anything to
the y cuz it's not moving up and down.
147

147

00:07:33,790  -->  00:07:36,980
So let's save that and make sure that
we actually are moving our enemy
148

148

00:07:36,980  -->  00:07:40,130
a little bit across the screen,
there we go.
149

149

00:07:40,130  -->  00:07:43,770
Enemies moving, cool, looks good, and
cuz we've got a collision on there.
150

150

00:07:43,770  -->  00:07:46,350
This will be interesting to see what
happens when we get down to the end.
151

151

00:07:46,350  -->  00:07:49,960
It does push the player the whole
way through the wall, save me.
152

152

00:07:49,960  -->  00:07:51,110
Where have I gone?
153

153

00:07:51,110  -->  00:07:52,860
Okay, so collision's working.
154

154

00:07:52,860  -->  00:07:54,390
That's a good start.
155

155

00:07:54,390  -->  00:07:56,090
Not having any impact on the player yet.
156

156

00:07:56,090  -->  00:07:57,460
We'll do that in upcoming videos.
157

157

00:07:57,460  -->  00:07:59,370
We'll have the enemy hurt the player,
but for
158

158

00:07:59,370  -->  00:08:02,840
now we've got our enemy moving across
the screen, which is a good start.
159

159

00:08:02,840  -->  00:08:04,360
This is where I'm going
to give you a challenge,
160

160

00:08:04,360  -->  00:08:07,760
and it's gonna be a pretty meaty,
chunky challenge this time.
161

161

00:08:07,760  -->  00:08:09,379
To make your enemy turn.
162

162

00:08:10,480  -->  00:08:12,220
When the enemy reaches
the end of the platform,
163

163

00:08:12,220  -->  00:08:16,640
as we've talked about, or reaches a wall,
have them turn and go back the other way.
164

164

00:08:16,640  -->  00:08:18,790
That's the mission,
if you choose to accept it.
165

165

00:08:18,790  -->  00:08:20,710
I'm gonna give you some hints here.
166

166

00:08:20,710  -->  00:08:23,670
If that's enough for you to go on already,
then pause the video, jump in now, and
167

167

00:08:23,670  -->  00:08:24,420
give that a shot.
168

168

00:08:24,420  -->  00:08:27,790
Give it your best guess to
figure out how to do that.
169

169

00:08:27,790  -->  00:08:29,050
If you want the hints here we go.
170

170

00:08:29,050  -->  00:08:30,060
I'll give you some hints now.
171

171

00:08:30,060  -->  00:08:34,310
So we want to flip horizontal similar
to the way we did with the player.
172

172

00:08:34,310  -->  00:08:38,030
Flip the enemies horizontal so
that's pretty straightforward.
173

173

00:08:38,030  -->  00:08:42,110
To use collision to determine when to
flip, well that's pretty obvious as well.
174

174

00:08:42,110  -->  00:08:44,500
And to add a new box
collider to test collision,
175

175

00:08:44,500  -->  00:08:46,950
not just to rely on the capsule
collider we've got there.
176

176

00:08:46,950  -->  00:08:50,070
If you remember with the player
where we're using a different
177

177

00:08:50,070  -->  00:08:51,880
approach with the feet versus the body.
178

178

00:08:51,880  -->  00:08:55,040
So adding a second collider to test
out these things can be useful.
179

179

00:08:55,040  -->  00:08:59,111
Now I'm gonna give you the biggest hint
of all in terms of how to go about
180

180

00:08:59,111  -->  00:08:59,870
doing this.
181

181

00:08:59,870  -->  00:09:02,990
So if that's enough for you to go on,
pause the video, jump in now.
182

182

00:09:02,990  -->  00:09:05,660
If you still get a bit stuck,
you can come back to this hint.
183

183

00:09:05,660  -->  00:09:10,371
But the big hint is to use
OnTriggerExit2D() when you're looking at
184

184

00:09:10,371  -->  00:09:11,920
that collision test.
185

185

00:09:11,920  -->  00:09:15,860
At that trigger test to
see when the enemy has
186

186

00:09:15,860  -->  00:09:19,130
exited a trigger volume
as opposed to entered it.
187

187

00:09:19,130  -->  00:09:20,310
Entered it, is that a word?
188

188

00:09:20,310  -->  00:09:22,220
Entered a trigger volume.
189

189

00:09:22,220  -->  00:09:24,770
Okay, so this is the clues for now,
if that doesn't make any sense at all,
190

190

00:09:24,770  -->  00:09:28,320
no worries, follow along with me but
I'd love for you to give that a shot.
191

191

00:09:28,320  -->  00:09:30,470
And I'll see you back here when
you've given it your best try.
192

192

00:09:32,729  -->  00:09:36,740
Okay, so if you saw those hints just now,
let's talk about adding an extra collider.
193

193

00:09:36,740  -->  00:09:39,050
We want to do that at
the front of the enemy,
194

194

00:09:39,050  -->  00:09:43,680
a little reverse periscope where we
have the, well let me create it so
195

195

00:09:43,680  -->  00:09:46,340
you can see what I'm talking about,
rather than just talking about it.
196

196

00:09:46,340  -->  00:09:50,600
So we'll say a box collider 2D
that's going to be around the enemy.
197

197

00:09:50,600  -->  00:09:55,277
And I'm going to edit this so
that it is a little reverse periscope.
198

198

00:09:55,277  -->  00:09:59,730
Periscope's a thing that submarines look
at to see what's up above the water.
199

199

00:09:59,730  -->  00:10:02,270
This is going to be looking at whether or
200

200

00:10:02,270  -->  00:10:06,810
not the enemy is currently
touching the ground, like that.
201

201

00:10:06,810  -->  00:10:11,130
So we'll do a little bit more finessing
later on to make sure it's all good.
202

202

00:10:11,130  -->  00:10:12,240
But basically, this is saying,
203

203

00:10:12,240  -->  00:10:15,560
at the moment,
the enemy is colliding with the ground.
204

204

00:10:15,560  -->  00:10:19,550
You can see the enemy there is
touching the ground as they go along.
205

205

00:10:19,550  -->  00:10:23,890
And because we're talking about
colliding and this physics relationship,
206

206

00:10:23,890  -->  00:10:25,000
collision to collision.
207

207

00:10:25,000  -->  00:10:30,060
We need to make sure that the enemy has
the right physics collision layer set up.
208

208

00:10:30,060  -->  00:10:31,970
So all the way up to Layer here,
209

209

00:10:31,970  -->  00:10:36,785
click on the default button while we
are on the enemy, and click on Add Layer.
210

210

00:10:36,785  -->  00:10:40,980
We'll call this enemy
as a new layer in here.
211

211

00:10:40,980  -->  00:10:42,470
So that is one point.
212

212

00:10:42,470  -->  00:10:46,940
Back onto our enemy game object and
then assign this layer to be enemy.
213

213

00:10:46,940  -->  00:10:51,092
Now we need to go and
manage our physics relationships, so
214

214

00:10:51,092  -->  00:10:54,680
click on Edit &gt;
Project Settings &gt; Physics 2D.
215

215

00:10:54,680  -->  00:10:57,580
We can see our matrix down
the bottom we have enemy,
216

216

00:10:57,580  -->  00:10:58,990
that's been added in the enemy.
217

217

00:10:58,990  -->  00:11:03,030
A little bit hard to see if the enemy
is currently colliding with everything,
218

218

00:11:03,030  -->  00:11:03,650
we don't want that.
219

219

00:11:03,650  -->  00:11:06,940
We want the enemy to collide with default,
well yeah I guess.
220

220

00:11:06,940  -->  00:11:09,010
No, we'll turn off default.
221

221

00:11:09,010  -->  00:11:09,585
You know what,
222

222

00:11:09,585  -->  00:11:12,690
the only thing the enemy needs to collide
with is the ground and the player.
223

223

00:11:12,690  -->  00:11:15,450
So let's turn off everything else
except for ground and player, and
224

224

00:11:15,450  -->  00:11:17,440
we can turn them back on in
the future if we need to.
225

225

00:11:17,440  -->  00:11:20,988
But I don't think the enemy
needs to be colliding with UI.
226

226

00:11:20,988  -->  00:11:24,530
We'll turn off Climbing, we don't want
the enemy to be climbing this ladder.
227

227

00:11:24,530  -->  00:11:25,510
They run backwards and forwards.
228

228

00:11:25,510  -->  00:11:29,450
Player, yes, Background, no, certainly
don't want collision with the background.
229

229

00:11:29,450  -->  00:11:32,330
So the enemy and enemies and enemies,
now we'll turn that off as well.
230

230

00:11:32,330  -->  00:11:35,420
So if you've got two enemies they
just kind of fly past each other.
231

231

00:11:35,420  -->  00:11:38,680
You might wish to turn that back on if
we have two enemies on the one platform.
232

232

00:11:38,680  -->  00:11:40,590
But for now we'll leave that as is.
233

233

00:11:40,590  -->  00:11:44,440
So the enemy is now just colliding
with the player and the ground.
234

234

00:11:44,440  -->  00:11:46,790
I'm going to move my enemy a little
bit closer to the wall, so
235

235

00:11:46,790  -->  00:11:49,570
it can see it's a shorter
distance to bounce off the wall.
236

236

00:11:49,570  -->  00:11:53,770
One thing to make sure we don't forget is
that with our box collider is to turn on
237

237

00:11:53,770  -->  00:11:55,130
Is Trigger.
238

238

00:11:55,130  -->  00:11:59,200
If you find that your enemy is just flying
through the walls and it's not bouncing,
239

239

00:11:59,200  -->  00:12:01,270
or it's not stopping at the ledges.
240

240

00:12:01,270  -->  00:12:04,540
Then this is the number one thing
to check that it is a trigger.
241

241

00:12:04,540  -->  00:12:07,400
Because we're gonna be
using the On Trigger exit.
242

242

00:12:07,400  -->  00:12:09,064
So let's go have a look
at our coding here.
243

243

00:12:09,064  -->  00:12:10,930
What do we need to do first of all?
244

244

00:12:10,930  -->  00:12:13,990
Well we need to go and
do the mechanism of flipping.
245

245

00:12:13,990  -->  00:12:16,210
So let's go look at what we
had to do with the player.
246

246

00:12:16,210  -->  00:12:22,190
We're saying that the transform of
the scale is the sign of the velocity.
247

247

00:12:22,190  -->  00:12:27,170
However with the player, where the player
is giving input saying, run right,
248

248

00:12:27,170  -->  00:12:27,740
run left.
249

249

00:12:27,740  -->  00:12:31,050
So this is going to be dynamically
moved based upon the player.
250

250

00:12:31,050  -->  00:12:35,630
But for the enemy it's going to be
triggered by an event that happens, and
251

251

00:12:35,630  -->  00:12:37,830
that event is out OnTriggerExit.
252

252

00:12:37,830  -->  00:12:39,975
So let's use this for some inspiration.
253

253

00:12:39,975  -->  00:12:47,288
Gonna go back over into our enemy script
here and say void OnTriggerExit2D,
254

254

00:12:47,288  -->  00:12:52,024
that enters the Collider2D collision,
great.
255

255

00:12:52,024  -->  00:12:58,258
We want to say in here
that transform.localScale.
256

256

00:12:58,258  -->  00:13:03,857
If I do this correctly,
transform.localScale,
257

257

00:13:03,857  -->  00:13:06,990
there we go = new Vector2.
258

258

00:13:09,540  -->  00:13:12,006
Now we to need to say in this moment,
259

259

00:13:12,006  -->  00:13:17,050
we need to use this moment to change
the direction, to change the scale.
260

260

00:13:17,050  -->  00:13:19,770
So I'm gonna use a minus in here, for
261

261

00:13:19,770  -->  00:13:24,150
the x axis to say do the opposite
of what you were just doing, minus.
262

262

00:13:24,150  -->  00:13:32,441
And then we'll go and get as we did before
Mathf.Sign of the myRigidBody.velocity.x.
263

263

00:13:32,441  -->  00:13:38,520
I'll explain this in a bit
more detail in a moment.
264

264

00:13:38,520  -->  00:13:40,820
And then, 1f because we want
the y axis to stay as it is.
265

265

00:13:40,820  -->  00:13:45,608
So what I've done in here is said okay,
there's a velocity for the enemy,
266

266

00:13:45,608  -->  00:13:48,350
it's either moving right or moving left.
267

267

00:13:48,350  -->  00:13:49,980
And we know the sign of that.
268

268

00:13:49,980  -->  00:13:53,380
And if it's moving right it'll be plus 1,
and if it's moving left it'll be minus 1.
269

269

00:13:53,380  -->  00:13:56,400
But what we want to do is force
the flipping of that force,
270

270

00:13:56,400  -->  00:14:02,190
the flipping of the entire local
scale of the entire enemy itself.
271

271

00:14:02,190  -->  00:14:04,444
So that we turn it back the other way,
if this is a plus,
272

272

00:14:04,444  -->  00:14:06,661
then this will make it a minus,
we'll be going left.
273

273

00:14:06,661  -->  00:14:10,580
If this is a minus,
then adding two minuses together, so
274

274

00:14:10,580  -->  00:14:15,420
minus of minus 1 make it a plus, so
therefore makes it go to the right.
275

275

00:14:15,420  -->  00:14:18,270
And so when we do that triggering,
what do we want to have happen?
276

276

00:14:18,270  -->  00:14:20,760
Well one of the things,
I just want to point out while I'm here,
277

277

00:14:20,760  -->  00:14:24,510
while I remember, is one valid way to
go about this whole process is creating
278

278

00:14:24,510  -->  00:14:28,800
a variable which might be
isFacingRight for example.
279

279

00:14:28,800  -->  00:14:32,100
And then you can say whether
that's true or false, and
280

280

00:14:32,100  -->  00:14:36,540
store the information just here about
the direction the enemy is facing.
281

281

00:14:36,540  -->  00:14:37,790
That's a valid way of doing it.
282

282

00:14:37,790  -->  00:14:40,340
If you jump around the Internet,
that's a pretty common way
283

283

00:14:40,340  -->  00:14:43,150
of people solving this
challenge of flipping a sprite.
284

284

00:14:43,150  -->  00:14:46,960
However, storing it is not necessary
because we're calculating it.
285

285

00:14:46,960  -->  00:14:51,489
We know at this point here we know
that the scale has been flipped, so
286

286

00:14:51,489  -->  00:14:53,882
we don't need to go and store that.
287

287

00:14:53,882  -->  00:14:57,860
We just need to know which way it
is at the time of it happening.
288

288

00:14:57,860  -->  00:15:01,680
So I'm going to go into my update here,
we've got our moving to the right.
289

289

00:15:01,680  -->  00:15:03,650
We also need to have
our moving to the left.
290

290

00:15:03,650  -->  00:15:06,210
So I'm going to create
an if statement in here.
291

291

00:15:06,210  -->  00:15:11,970
Where we say if, is, it's going
to be a method, IsFacingRight and
292

292

00:15:11,970  -->  00:15:18,340
we'll do this in a moment,
we'll set up the method in a moment.
293

293

00:15:18,340  -->  00:15:22,097
If we're facing right,
if that's true then we want to
294

294

00:15:22,097  -->  00:15:26,522
say myRigidBody.velocity =
new Vector2(moveSpeed 0).
295

295

00:15:26,522  -->  00:15:31,266
So, basically move to the right,
else, we'll go and
296

296

00:15:31,266  -->  00:15:34,300
copy this, this statement here.
297

297

00:15:34,300  -->  00:15:38,330
Else, what do we need to do,
well else we need to move to the left and
298

298

00:15:38,330  -->  00:15:41,120
left is -moveSpeed.
299

299

00:15:41,120  -->  00:15:44,590
So moving a minus direction,
a negative direction.
300

300

00:15:44,590  -->  00:15:49,660
And then what is IsFacingRight, I'm gonna
copy this method, copy this name, sorry.
301

301

00:15:49,660  -->  00:15:51,010
And jump down here and
302

302

00:15:51,010  -->  00:15:54,880
create a new method,
which is gonna be returning a bool.
303

303

00:15:54,880  -->  00:15:59,010
So bool IsFacingRight,
and what will that return?
304

304

00:15:59,010  -->  00:16:01,800
Well, it's going to return true or
305

305

00:16:01,800  -->  00:16:07,290
false based upon if the
transform.localscale sorry, localscale.
306

306

00:16:09,320  -->  00:16:10,560
We're gonna do that again.
307

307

00:16:10,560  -->  00:16:19,821
So I get my autocorrect
transform.localScale.x is what?
308

308

00:16:19,821  -->  00:16:21,953
Is greater than 0.
309

309

00:16:21,953  -->  00:16:25,318
So if our transform.localScale
is positive,
310

310

00:16:25,318  -->  00:16:28,100
that means we're facing to the right.
311

311

00:16:28,100  -->  00:16:33,620
If it's negative, that's not true, then
it's false, it would return false up here.
312

312

00:16:33,620  -->  00:16:37,560
IsFacingRight would be false, and
therefore we would say, move to the left.
313

313

00:16:37,560  -->  00:16:42,020
So we're using this moment of trigger,
this exit trigger,
314

314

00:16:42,020  -->  00:16:45,900
to flip the local scale,
flip the entire sprite.
315

315

00:16:45,900  -->  00:16:48,150
And then we're saying up here,
has it been flipped or not?
316

316

00:16:48,150  -->  00:16:50,060
If you're facing to the right, go right.
317

317

00:16:50,060  -->  00:16:51,830
If you're facing left, go to the left.
318

318

00:16:51,830  -->  00:16:53,940
So that's a nice clean
way of setting this up.
319

319

00:16:53,940  -->  00:16:54,740
Let's save that and
320

320

00:16:54,740  -->  00:16:58,420
make sure it works before we pat
ourselves on the back too much.
321

321

00:16:58,420  -->  00:16:59,891
Hop into the game here, click on Play.
322

322

00:16:59,891  -->  00:17:03,659
And as our enemy gets to the end,
bounce and bounces off the wall and
323

323

00:17:03,659  -->  00:17:06,110
comes back towards the player, cool.
324

324

00:17:06,110  -->  00:17:11,405
So quick recap, we've added a box collider
here as a little underground periscope
325

325

00:17:11,405  -->  00:17:16,489
that says when this box collider exits
a trigger volume, exits the collision.
326

326

00:17:16,489  -->  00:17:20,820
Then we trigger the local scale,
flipping for the enemy.
327

327

00:17:20,820  -->  00:17:21,780
What does that mean?
328

328

00:17:21,780  -->  00:17:26,600
Well if we have a negative local scale,
then IsFacingRight returns false.
329

329

00:17:26,600  -->  00:17:30,750
If we have a positive local scale,
then IsFacingRight returns true.
330

330

00:17:30,750  -->  00:17:32,170
And we're using that here in our update.
331

331

00:17:32,170  -->  00:17:36,470
If we have a true facing right,
we move to the right, otherwise
332

332

00:17:36,470  -->  00:17:41,910
we have a not true facing right
then we move to the left.
333

333

00:17:41,910  -->  00:17:45,020
Okay, so great work, well done,
that's a big video, big lecture,
334

334

00:17:45,020  -->  00:17:46,350
lots of content we've got through.
335

335

00:17:46,350  -->  00:17:48,440
We now have our enemies moving around.
336

336

00:17:48,440  -->  00:17:50,000
Great work, and
I'll see you in the next video.
