WEBVTT
1
1

00:00:00.000  -->  00:00:03.902
[MUSIC]
2

2

00:00:03.902  -->  00:00:07.710
In this video, we're going to create
a life system, where our player dies,
3

3

00:00:07.710  -->  00:00:09.600
respawns, dies, respawns, dies.
4

4

00:00:09.600  -->  00:00:13.790
And then once they've died three times,
they go back to the main menu.
5

5

00:00:13.790  -->  00:00:18.375
So let's jump in and get a game
session managing our player lives.
6

6

00:00:18.375  -->  00:00:22.670
Okay, we have a goal, and our goal is that
our player has a certain number of lives.
7

7

00:00:22.670  -->  00:00:25.720
For example,
we have a player with three lives, and
8

8

00:00:25.720  -->  00:00:28.740
we restart the scene when the player dies.
9

9

00:00:28.740  -->  00:00:30.290
But when all lives are lost,
10

10

00:00:30.290  -->  00:00:33.190
it's game over, and
we have to restart the entire game.
11

11

00:00:33.190  -->  00:00:36.190
And restarting the entire game
resets the lives and the score.
12

12

00:00:36.190  -->  00:00:39.680
So pretty standard kind of
design in terms of player lives.
13

13

00:00:39.680  -->  00:00:45.630
But the problem we face is that after
the death and the reloading of the scene,
14

14

00:00:45.630  -->  00:00:49.150
that re-instantiates the player and
all other game objects.
15

15

00:00:49.150  -->  00:00:51.095
So it resets their status.
16

16

00:00:51.095  -->  00:00:55.435
And if we had the amount of lives
stored on the player, for example,
17

17

00:00:55.435  -->  00:00:58.670
the player knows it currently has
two lives and we reset the scene,
18

18

00:00:58.670  -->  00:01:04.015
then we restart wherever the starting
point of the lives of the player was.
19

19

00:01:04.015  -->  00:01:05.815
So, if we have our
starting lives at three,
20

20

00:01:05.815  -->  00:01:07.935
then it goes back to being three again.
21

21

00:01:07.935  -->  00:01:10.895
So, in other words any progress with
the player or the scene is lost.
22

22

00:01:10.895  -->  00:01:12.830
That is our current problem.
23

23

00:01:12.830  -->  00:01:16.070
And the solution to this problem
is using a game session.
24

24

00:01:16.070  -->  00:01:17.655
Some people would call it a game manager.
25

25

00:01:17.655  -->  00:01:20.910
There's a lot [LAUGH] of articles
out there saying don't use
26

26

00:01:20.910  -->  00:01:25.250
the word manager but this is,
if you see out there game manager,
27

27

00:01:25.250  -->  00:01:28.020
then it's a similar thing with that we
are doing, we're calling it game session.
28

28

00:01:28.020  -->  00:01:31.060
And so the game session is
an object that's responsible for
29

29

00:01:31.060  -->  00:01:32.260
all of these things.
30

30

00:01:32.260  -->  00:01:35.529
And we will have an object in our world,
it'll be called Game Session.
31

31

00:01:35.529  -->  00:01:37.800
This'll be a game object in our hierarchy.
32

32

00:01:37.800  -->  00:01:41.260
We'll have attached to that
the GameSession.cs script.
33

33

00:01:41.260  -->  00:01:45.250
And this Game Session will be
responsible for Lives and Dying, and for
34

34

00:01:45.250  -->  00:01:49.520
the Score, and for remembering
Level Progress, and Restarting the Game,
35

35

00:01:49.520  -->  00:01:54.010
and All Other Persistent Data to do
with our particular game session.
36

36

00:01:54.010  -->  00:01:57.470
That leaves on the game session
through the GameSession.cs.
37

37

00:01:57.470  -->  00:01:58.930
It doesn't live on the player.
38

38

00:01:58.930  -->  00:02:00.710
And it doesn't live under
any other elements, so
39

39

00:02:00.710  -->  00:02:03.750
that's what we're gonna be
setting up in this lecture.
40

40

00:02:03.750  -->  00:02:07.340
The first step for
that is to create a new game object.
41

41

00:02:07.340  -->  00:02:08.100
We'll create an empty.
42

42

00:02:08.100  -->  00:02:09.520
We'll call this GameSession.
43

43

00:02:10.540  -->  00:02:15.360
GameSession I've accidentally
put underneath the player there.
44

44

00:02:15.360  -->  00:02:18.520
We'll make sure it's on its own
level GameSession just here.
45

45

00:02:18.520  -->  00:02:23.110
And the game session I'm going to reset
46

46

00:02:23.110  -->  00:02:25.190
the transform on that starting point,
cool.
47

47

00:02:25.190  -->  00:02:29.840
So we need to create a script
calling the same thing Game Session
48

48

00:02:29.840  -->  00:02:31.030
that we do on here.
49

49

00:02:31.030  -->  00:02:36.530
Create that new script and
fire up Visual Studio.
50

50

00:02:36.530  -->  00:02:41.100
Now, the first thing we wanna tackle is
making our GameSession script a singleton.
51

51

00:02:41.100  -->  00:02:45.020
So that means that if there
already is one that exists,
52

52

00:02:45.020  -->  00:02:48.560
anytime a new one is instatiated,
it destroys itself.
53

53

00:02:48.560  -->  00:02:50.110
So let's start by doing that.
54

54

00:02:50.110  -->  00:02:52.460
Right at the top here,
we'll say void Awake.
55

55

00:02:52.460  -->  00:02:55.210
So Awake is the very first
thing that can happen,
56

56

00:02:55.210  -->  00:02:59.420
the very first time this script
wakes up or this class wakes up.
57

57

00:02:59.420  -->  00:03:00.500
It will do this.
58

58

00:03:00.500  -->  00:03:01.860
We want to create an integer,
59

59

00:03:01.860  -->  00:03:06.310
create a variable which is the number
of game sessions that currently exist.
60

60

00:03:06.310  -->  00:03:10.320
So we'll call this numGameSessions.
61

61

00:03:11.480  -->  00:03:15.140
And that will = FineObjectsofType.
62

62

00:03:15.140  -->  00:03:19.040
So be very careful to not
accidentally say ObjectOfType.
63

63

00:03:19.040  -->  00:03:21.015
Say ObjectsOfType in here,
64

64

00:03:21.015  -->  00:03:24.265
cuz we're looking within all
of the game's session objects.
65

65

00:03:24.265  -->  00:03:30.520
GamesSession&gt;().Length, cuz we wanna
know how many of them there are.
66

66

00:03:30.520  -->  00:03:34.070
So we're saying this integer here,
numGameSessions,
67

67

00:03:34.070  -->  00:03:37.480
it will be
FindObjectsOfType&lt;gamesessions&gt;().Length.
68

68

00:03:37.480  -->  00:03:40.320
And then we created an if statement,
saying
69

69

00:03:40.320  -->  00:03:44.120
basically if there is more than one,
then destroy this one we just created.
70

70

00:03:44.120  -->  00:03:49.234
So if (numGameSessions
&gt; 1) &lt;/gamesessions&gt; so
71

71

00:03:49.234  -->  00:03:54.129
there's more existing,
then we need to destroy this
72

72

00:03:54.129  -->  00:04:00.180
particular game object that's
trying to create itself.
73

73

00:04:00.180  -->  00:04:01.120
Don't allow it to do that.
74

74

00:04:02.320  -->  00:04:04.030
else, what do we do if else?
75

75

00:04:04.030  -->  00:04:08.172
Well if it's else,
then we say this is our singleton part,
76

76

00:04:08.172  -->  00:04:14.099
DontDestroyOnload[gameObject), cool.
77

77

00:04:14.099  -->  00:04:17.910
This is in here,
this is us using a singleton pattern.
78

78

00:04:17.910  -->  00:04:21.750
There's not one specific exact way
that you use a singleton pattern.
79

79

00:04:21.750  -->  00:04:23.710
This is one example of
using the singleton,
80

80

00:04:23.710  -->  00:04:27.560
which is basically saying we only want
one of these things to be in existence.
81

81

00:04:27.560  -->  00:04:29.820
Don't allow anything else to instantiate.
82

82

00:04:29.820  -->  00:04:32.700
Just got the one Destroy,
if another one comes along,
83

83

00:04:32.700  -->  00:04:35.810
otherwise, DontDestroyOnLoad,
this is the important part.
84

84

00:04:35.810  -->  00:04:38.540
So when we say, restart the scene,
85

85

00:04:38.540  -->  00:04:41.950
this particular instance
will continue to exist.
86

86

00:04:41.950  -->  00:04:45.888
It won't be destroyed with everything else
that gets destroyed naturally when we
87

87

00:04:45.888  -->  00:04:48.160
re-instantiate the scene.
88

88

00:04:48.160  -->  00:04:51.630
Okay, or that gets recreated,
I should say.
89

89

00:04:51.630  -->  00:04:52.700
Okay, so now what do we do?
90

90

00:04:52.700  -->  00:04:56.220
We need to say what happens
when the player dies.
91

91

00:04:56.220  -->  00:04:56.960
Well first of all,
92

92

00:04:56.960  -->  00:04:59.530
let's give the players a certain
number of lives to start off with.
93

93

00:04:59.530  -->  00:05:03.669
So we'll [SerializeField] here,
94

94

00:05:03.669  -->  00:05:12.350
[SerializeField] int playerlives =
3; at the start, playerlives = 3.
95

95

00:05:12.350  -->  00:05:15.140
Now, we need to say what happens
when a player loses a life.
96

96

00:05:15.140  -->  00:05:20.666
We are not gonna use the update method
in this class, I believe, in the script.
97

97

00:05:20.666  -->  00:05:25.830
And here we'll say, again,
we need to process the player death.
98

98

00:05:25.830  -->  00:05:31.390
And this needs to be public, so
that other classes can trigger this,
99

99

00:05:31.390  -->  00:05:34.570
can say, ProccessPlayerDeath().
100

100

00:05:34.570  -->  00:05:37.040
At certain points in time,
they can say, hey,
101

101

00:05:37.040  -->  00:05:40.040
the player just died,
can you please do what you need to do.
102

102

00:05:40.040  -->  00:05:42.340
And it's in the GameSession
that manages that and says,
103

103

00:05:42.340  -->  00:05:45.190
yep, I know exactly what we need
to do when the player dies.
104

104

00:05:45.190  -->  00:05:46.860
So I've got that under control.
105

105

00:05:46.860  -->  00:05:50.560
And here we need to say whether or
not the player has lives remaining, or
106

106

00:05:50.560  -->  00:05:51.990
we need to restart the game.
107

107

00:05:51.990  -->  00:05:58.164
So we'll say, if (playerLives &gt; 1), so
108

108

00:05:58.164  -->  00:06:06.290
if there's more than 1 life remaining,
then take a life.
109

109

00:06:07.860  -->  00:06:10.141
And we'll define what that is in a moment,
so TakeLife*().
110

110

00:06:14.474  -->  00:06:19.400
Otherwise, or if we write this correctly,
we'd say else.
111

111

00:06:19.400  -->  00:06:23.170
Wouldn't type otherwise,
we just say otherwise but we type else.
112

112

00:06:23.170  -->  00:06:26.610
We will do what we wanna reset
the overall game progress.
113

113

00:06:26.610  -->  00:06:29.020
So we want the player to go all
the way back to the main menu and
114

114

00:06:29.020  -->  00:06:29.800
reset the whole thing.
115

115

00:06:29.800  -->  00:06:33.150
So we'll say ResetGameProgress.
116

116

00:06:33.150  -->  00:06:37.150
Or reset game session is probably
a better, ResetGameSession,
117

117

00:06:37.150  -->  00:06:39.560
cuz this is a game session we're creating.
118

118

00:06:39.560  -->  00:06:42.030
Okay, I'm gonna create
the RecreateGameSession with you.
119

119

00:06:42.030  -->  00:06:45.500
And I'll set as a challenge for
you to create the TakeLife method.
120

120

00:06:45.500  -->  00:06:48.970
So, I'll factor this out down here.
121

121

00:06:50.330  -->  00:06:53.570
We've got our private ResetGameSession.
122

122

00:06:53.570  -->  00:06:54.910
This one is gonna be pretty simple.
123

123

00:06:54.910  -->  00:06:57.225
It will be SeeManager.
124

124

00:06:57.225  -->  00:07:01.501
And have we used, yes we are using,
no we're not using that yet.
125

125

00:07:01.501  -->  00:07:08.564
So using UnityEngine.scenemanagement.
126

126

00:07:08.564  -->  00:07:14.419
Okay, back down here scene manager,
SceneManager.LoadScene.
127

127

00:07:14.419  -->  00:07:17.870
And which scene is it that we need to
load if we wanna reset the whole thing?
128

128

00:07:17.870  -->  00:07:20.356
Well, we need to go back to the main menu,
and we know that is 0.
129

129

00:07:20.356  -->  00:07:25.230
So rest the whole thing back there, and at
the same time, we need to make sure that
130

130

00:07:25.230  -->  00:07:29.663
this particular instance is destroyed,
this particular game object.
131

131

00:07:29.663  -->  00:07:36.023
So we're gonna say Destroy(gameObject);.
132

132

00:07:36.023  -->  00:07:41.065
Okay, so let me just briefly recap what I
got here, then I'll set you the challenge.
133

133

00:07:41.065  -->  00:07:43.745
We've said for our game session,
134

134

00:07:43.745  -->  00:07:47.085
we need to know how many lives the player
starts with, which will be three.
135

135

00:07:47.085  -->  00:07:48.695
As soon as we Awake,
136

136

00:07:48.695  -->  00:07:53.015
we want to see how many of these
particular game sessions exist.
137

137

00:07:53.015  -->  00:07:54.695
If there's all ready one around,
138

138

00:07:54.695  -->  00:07:57.065
then destroy this new one
that's trying to create itself.
139

139

00:07:57.065  -->  00:08:02.310
Otherwise, don't destroy this particular
one each time we load, so that this one
140

140

00:08:02.310  -->  00:08:06.930
is going to continue to live, even if any
new ones that come along are destroyed.
141

141

00:08:06.930  -->  00:08:10.150
And then, we're saying what
happens if the player dies?
142

142

00:08:10.150  -->  00:08:12.840
Well, we need to process the player death.
143

143

00:08:12.840  -->  00:08:14.510
We haven't actually
used that anywhere yet.
144

144

00:08:14.510  -->  00:08:17.900
This is public and at some point,
very soon, we're gonna go in and
145

145

00:08:17.900  -->  00:08:20.890
say when the player bumps into
the enemy or bumps in a hazard,
146

146

00:08:20.890  -->  00:08:25.660
then we need to call this process player
death at that moment in our other script.
147

147

00:08:25.660  -->  00:08:27.960
So we'll do that soon, but
for now, we're setting it up.
148

148

00:08:27.960  -->  00:08:31.970
When that happens, well if the player
has more than one life, take a life and
149

149

00:08:31.970  -->  00:08:33.170
continue on.
150

150

00:08:33.170  -->  00:08:36.380
Otherwise, or else,
reset the whole game session.
151

151

00:08:36.380  -->  00:08:38.360
What does reset the whole game session do?
152

152

00:08:38.360  -->  00:08:44.740
Well, that means to load the main menu and
to destroy this particular game object.
153

153

00:08:44.740  -->  00:08:49.420
And so the challenge for you is to
factor this out as a method here.
154

154

00:08:50.920  -->  00:08:54.820
In the TakeLife, I'd like you to fill
in what needs to happen in here.
155

155

00:08:54.820  -->  00:08:56.517
What happens when we take a life?
156

156

00:08:56.517  -->  00:09:01.099
So to be clear, within this challenge
to process the player's death
157

157

00:09:01.099  -->  00:09:04.892
reduce the number of lives and
reload the current scene.
158

158

00:09:04.892  -->  00:09:08.425
So that should be reasonably straight
forward based upon what we've been doing
159

159

00:09:08.425  -->  00:09:09.360
recently.
160

160

00:09:09.360  -->  00:09:11.050
You have all the tools you need.
161

161

00:09:11.050  -->  00:09:13.920
Jump in, take that on now,
process the player death.
162

162

00:09:13.920  -->  00:09:16.089
And I'll see you back here
when you've given that a shot.
163

163

00:09:17.850  -->  00:09:18.590
Okay, welcome back.
164

164

00:09:18.590  -->  00:09:22.864
The first thing I'll do in here is I
will reduce the player's lives, so
165

165

00:09:22.864  -->  00:09:30.440
player| lives --; that will just say take
the current amount and minus by one.
166

166

00:09:30.440  -->  00:09:32.847
And then we need to load
the current scene, and
167

167

00:09:32.847  -->  00:09:34.841
we did this in the previous video too.
168

168

00:09:34.841  -->  00:09:40.366
We set up a variable which
we'll call the current
169

169

00:09:40.366  -->  00:09:44.545
scene index, CurrentSceneIndex =
170

170

00:09:44.545  -->  00:09:51.020
SceneManager.GetActiveScene().buildIndex;
so
171

171

00:09:51.020  -->  00:09:56.470
that we know what
the current build index is.
172

172

00:09:56.470  -->  00:10:01.814
And then, pretty simply,
we say scene manager,
173

173

00:10:01.814  -->  00:10:05.005
SceneManager.loadscene.
174

174

00:10:05.005  -->  00:10:08.650
And that will be the current scene index.
175

175

00:10:09.840  -->  00:10:11.050
Okay, so we've done that previously.
176

176

00:10:11.050  -->  00:10:12.320
I won't go into too much depth on that.
177

177

00:10:12.320  -->  00:10:14.280
But that's just basically saying
reload the current scene,
178

178

00:10:14.280  -->  00:10:16.990
and this is reduce the amount
of lives that we have.
179

179

00:10:16.990  -->  00:10:19.630
So let's see if this works
at a functional level.
180

180

00:10:19.630  -->  00:10:22.090
So the last step is to
make sure we're calling
181

181

00:10:22.090  -->  00:10:24.610
ProcessPlayerDeath at least somewhere.
182

182

00:10:24.610  -->  00:10:26.200
So let's go and
have a look where we can do that.
183

183

00:10:26.200  -->  00:10:27.160
I think that would be,
184

184

00:10:27.160  -->  00:10:30.430
I'm just gonna drag my script in here
while I'm running past my scripts.
185

185

00:10:30.430  -->  00:10:34.740
And it will be in the Player,
we will see that,
186

186

00:10:34.740  -->  00:10:38.270
and we have a spot in here
already set up for dying.
187

187

00:10:38.270  -->  00:10:41.450
So when the player is dying,
what do we want to do?
188

188

00:10:41.450  -->  00:10:44.160
Well pretty simply,
we add a new line down the end of this,
189

189

00:10:44.160  -->  00:10:47.530
which we first of all need
to get the GameSession.
190

190

00:10:47.530  -->  00:10:50.090
So the object of type,
we'll do that in here.
191

191

00:10:50.090  -->  00:10:52.960
We do the FindObjectOfType, so
we find, we're not getting,
192

192

00:10:52.960  -->  00:10:54.990
we're finding, FindObjectOfType.
193

193

00:10:54.990  -->  00:10:56.250
And this is GameSession.
194

194

00:10:59.190  -->  00:10:59.980
What will it be?
195

195

00:10:59.980  -->  00:11:04.660
Well, it would be the thing we just
created, which is .ProcessPlayerDeath.
196

196

00:11:04.660  -->  00:11:07.530
So now anytime the player touches
the enemy or the hazards,
197

197

00:11:07.530  -->  00:11:09.240
we should be processing player death.
198

198

00:11:09.240  -->  00:11:13.230
We'll save that, hop back into the game,
see if all these lines up, click play.
199

199

00:11:13.230  -->  00:11:16.911
Now, in theory,
if the player jumps down into the water,
200

200

00:11:16.911  -->  00:11:19.030
we should be triggering a death.
201

201

00:11:20.470  -->  00:11:23.130
And then boom, there's no delay at the
moment, we're not using a code routine,
202

202

00:11:23.130  -->  00:11:24.680
but it's immediately blonk back.
203

203

00:11:24.680  -->  00:11:26.400
We can see our DontDestroyOnload here,
204

204

00:11:26.400  -->  00:11:30.020
which has the game session contained
with it, and the player lives is too.
205

205

00:11:30.020  -->  00:11:32.150
If I jump back down again,
blink, it goes down to one.
206

206

00:11:32.150  -->  00:11:36.260
One more time, blink, goes back to
the start menu, the main menu back here.
207

207

00:11:36.260  -->  00:11:39.770
So success, we've set up our script,
208

208

00:11:39.770  -->  00:11:44.340
so that we have a singleton at the start,
back into game session here.
209

209

00:11:44.340  -->  00:11:47.950
We have a singleton at the start, so there
can only be one of these game sessions.
210

210

00:11:47.950  -->  00:11:52.370
But when we lose all of our lives,
we will start a new version,
211

211

00:11:52.370  -->  00:11:54.190
new instance of this game session.
212

212

00:11:54.190  -->  00:11:56.952
And we're decrementing the players lives,
and
213

213

00:11:56.952  -->  00:11:59.060
we are reloading the same
when the player dies, and
214

214

00:11:59.060  -->  00:12:02.640
reloading back to the main menu when
the player has lost all of their lives.
215

215

00:12:02.640  -->  00:12:04.365
So, great work on this, well done.
216

216

00:12:04.365  -->  00:12:05.440
Our game is coming together.
217

217

00:12:05.440  -->  00:12:07.190
I'll see you in the next video.
