WEBVTT
1
1

00:00:00.000  -->  00:00:04.824
[MUSIC]
2

2

00:00:04.824  -->  00:00:06.870
In this video,
we complete our little game engine.
3

3

00:00:06.870  -->  00:00:10.570
We can hook everything up so
that when the player pushes a key,
4

4

00:00:10.570  -->  00:00:14.450
we go to the next room, and then another
key takes us to another room, and so on.
5

5

00:00:14.450  -->  00:00:18.560
We can loop through all that, our game
states that we have at the moment, and
6

6

00:00:18.560  -->  00:00:21.890
give the player an adventure,
a choose your own adventure.
7

7

00:00:21.890  -->  00:00:25.355
So I'm pretty excited about where
we'll be at the end of this video,
8

8

00:00:25.355  -->  00:00:27.043
let's jump in and get cracking.
9

9

00:00:27.043  -->  00:00:31.285
I'm gonna create a little loop here, with
the states that we've got at the moment,
10

10

00:00:31.285  -->  00:00:34.530
starting state is leading to room one,
and to and from room one.
11

11

00:00:34.530  -->  00:00:40.010
I'm gonna say you can go to room two and
starting state,
12

12

00:00:40.010  -->  00:00:43.850
and from room two we'll see you
can room one and starting state.
13

13

00:00:43.850  -->  00:00:45.520
Just so we've got a little loop here.
14

14

00:00:45.520  -->  00:00:48.320
This is not how we would necessarily make
a game, although you know it might be
15

15

00:00:48.320  -->  00:00:51.430
fun to go round and round in circles,
confuse our player.
16

16

00:00:51.430  -->  00:00:56.800
Now, let's jump over into
adventure.game.cs our script in here.
17

17

00:00:56.800  -->  00:01:00.970
We're going to add a way to
manage our state, to have our
18

18

00:01:00.970  -->  00:01:05.300
state where the player can say, here is
the next state that I choose to go to.
19

19

00:01:05.300  -->  00:01:12.592
So within update, we're going to call
a method that we ill call Manage State.
20

20

00:01:15.393  -->  00:01:18.221
And you can see there's a red
squiggly line, because we haven't yet
21

21

00:01:18.221  -->  00:01:20.688
created our managed state method,
but we'll do that now.
22

22

00:01:20.688  -->  00:01:26.233
If you right-click and go to quick
actions and refactorings, this is on PC.
23

23

00:01:26.233  -->  00:01:29.790
We have an extra step where we
need to click generate method.
24

24

00:01:29.790  -->  00:01:32.070
On the Mac I believe there
isn't this extra step,
25

25

00:01:32.070  -->  00:01:36.550
you can just generate a method
straight away, if we click on that.
26

26

00:01:36.550  -->  00:01:39.480
When I say straight away, I mean without
having to do that extra step in there.
27

27

00:01:39.480  -->  00:01:43.645
So either way, if you're right-clicking,
look for refactoring or
28

28

00:01:43.645  -->  00:01:46.415
generate method, if you're on the Mac.
29

29

00:01:46.415  -->  00:01:49.685
And we now have,
it's been created for us down here,
30

30

00:01:49.685  -->  00:01:54.555
private void ManageState and
throw new, not implementing exception.
31

31

00:01:54.555  -->  00:01:56.247
This is a way of saying, hey I yeah,
32

32

00:01:56.247  -->  00:01:59.077
you haven't actually put
anything inside your method yet.
33

33

00:01:59.077  -->  00:02:00.947
But this gives us
the structure of the method.
34

34

00:02:00.947  -->  00:02:01.807
It's just a quicker way,
35

35

00:02:01.807  -->  00:02:04.477
instead of having to type out
all these other bits and pieces.
36

36

00:02:04.477  -->  00:02:07.607
And you can see that its added
automatically private, that's good for us.
37

37

00:02:07.607  -->  00:02:11.857
It's a reminder that we can only use this
method within this particular class,
38

38

00:02:11.857  -->  00:02:13.067
which is all that we need to do.
39

39

00:02:13.067  -->  00:02:16.497
Now, I'm gonna delete this first line,
we don't need this.
40

40

00:02:16.497  -->  00:02:20.500
And start off by declaring
a variable within this method.
41

41

00:02:20.500  -->  00:02:25.270
That we can use to keep track of
what the next states currently ask.
42

42

00:02:25.270  -->  00:02:29.736
I'm gonna type the keyword var and
43

43

00:02:29.736  -->  00:02:34.203
then nextStates as our variable =
44

44

00:02:34.203  -->  00:02:41.200
state.GetNextStates and
brackets, semicolon.
45

45

00:02:41.200  -->  00:02:43.090
Okay, so
let's explain what I've done here.
46

46

00:02:43.090  -->  00:02:48.160
As we did previously when we were calling,
where were we doing that?
47

47

00:02:48.160  -->  00:02:52.040
Up here,
we're calling state.getstatesstory.
48

48

00:02:52.040  -->  00:02:54.930
Here we're calling state.getnextstate.
49

49

00:02:54.930  -->  00:02:57.650
So we're looking in our state script, and
50

50

00:02:57.650  -->  00:03:00.250
get next state is going to
return what the next states are.
51

51

00:03:00.250  -->  00:03:03.080
And it'll return that as an array.
52

52

00:03:03.080  -->  00:03:04.890
Now you might be saying why use var,
53

53

00:03:04.890  -->  00:03:08.740
why aren't you using array
as our type in here?
54

54

00:03:08.740  -->  00:03:12.410
If you mouse over var,
you'll see that visual studio
55

55

00:03:12.410  -->  00:03:17.520
knows that this is of
type state as an array.
56

56

00:03:17.520  -->  00:03:21.500
We could've typed in here state,
and now square brackets and
57

57

00:03:21.500  -->  00:03:24.290
it will be just as happy
as exactly the same thing.
58

58

00:03:24.290  -->  00:03:28.868
We can use var as our keyword,
as a shortcut,
59

59

00:03:28.868  -->  00:03:34.653
as a quick way of typing it
when our variable is declared,
60

60

00:03:34.653  -->  00:03:37.210
and also initialized.
61

61

00:03:37.210  -->  00:03:42.750
If we were to go, what's another example,
if we got and we say text component.
62

62

00:03:42.750  -->  00:03:45.320
We know, we're telling it,
it's of type text.
63

63

00:03:45.320  -->  00:03:47.930
However, if I was to say var in here, and
64

64

00:03:47.930  -->  00:03:50.810
leave it at that,
then Visual Studio wouldn't be very happy.
65

65

00:03:50.810  -->  00:03:54.340
It's like, I don't know what var means,
do you mean this is a string?
66

66

00:03:54.340  -->  00:03:55.600
Do you mean this is a float?
67

67

00:03:55.600  -->  00:03:58.110
I've got no idea,
cuz you've given me no context.
68

68

00:03:58.110  -->  00:04:01.020
I'll undo that, and scroll back
down to our method down the bottom.
69

69

00:04:01.020  -->  00:04:01.860
Within our method,
70

70

00:04:01.860  -->  00:04:06.000
it's common practice to just say var,
rather than trying to stop and figure out,
71

71

00:04:06.000  -->  00:04:09.800
hang on a minute, what type of variable
is this, because Visual Studio knows.
72

72

00:04:09.800  -->  00:04:14.660
Okay, I know that you're an array
because this method is using an array,
73

73

00:04:14.660  -->  00:04:17.850
is returning an array, so
that's what nextStates is.
74

74

00:04:17.850  -->  00:04:20.380
So just wanted to explain why we're
using var as our keyword there.
75

75

00:04:20.380  -->  00:04:21.520
There's a different option too,
76

76

00:04:21.520  -->  00:04:25.490
and I'm sure as you're bouncing around the
Internet you'll see var used quite often,
77

77

00:04:25.490  -->  00:04:28.930
and just make sure you're using
it In a way that makes sense.
78

78

00:04:28.930  -->  00:04:31.310
Now we're gonna create an if statement if,
and
79

79

00:04:31.310  -->  00:04:33.270
we've done this before
in the previous section.
80

80

00:04:33.270  -->  00:04:35.500
If import, what is it?
81

81

00:04:35.500  -->  00:04:41.600
Get key down, get key down exactly
the same as we've done previously.
82

82

00:04:41.600  -->  00:04:44.040
And key code,
now what are we looking for here?
83

83

00:04:44.040  -->  00:04:50.760
We'll say type in key code dot hmm,
what are we looking at?
84

84

00:04:50.760  -->  00:04:53.070
Now you can see we've
got our options here.
85

85

00:04:53.070  -->  00:04:56.650
After we've typed dot,
it will in visual studio show us
86

86

00:04:56.650  -->  00:05:00.310
all of different key codes that
we could potentially select.
87

87

00:05:00.310  -->  00:05:04.350
I'm looking for button number one,
key number one on the keyboard, and
88

88

00:05:04.350  -->  00:05:05.980
I know that is alpha one.
89

89

00:05:05.980  -->  00:05:09.620
So I can double click on alpha 1 and
that will be our keycode,
90

90

00:05:09.620  -->  00:05:11.930
that will be the key
that needs to be pressed.
91

91

00:05:11.930  -->  00:05:17.430
So we've done this before input.keydown,
keycode alpha1.
92

92

00:05:17.430  -->  00:05:19.180
So if that, what do we want to do?
93

93

00:05:19.180  -->  00:05:24.360
Well we want to redefine or
94

94

00:05:24.360  -->  00:05:29.240
change what state is a sinus,
okoli state is starting state.
95

95

00:05:29.240  -->  00:05:33.495
If I push button number one, table
covering here from the starting state.
96

96

00:05:33.495  -->  00:05:35.930
If I push button number
one which is element zero.
97

97

00:05:35.930  -->  00:05:40.201
Now it's a little bit confusing, but
the player is not gonna see elements 0,
98

98

00:05:40.201  -->  00:05:43.565
element 1, they just gonna see
the option of hey, push 1 for
99

99

00:05:43.565  -->  00:05:45.007
this and push 2 for that.
100

100

00:05:45.007  -->  00:05:48.563
The players don't really understand
when we say, push 0 for this and
101

101

00:05:48.563  -->  00:05:49.474
push 1 for that.
102

102

00:05:49.474  -->  00:05:51.028
Cuz players aren't thinking,
103

103

00:05:51.028  -->  00:05:54.670
the way that us programmer brained
people are thinking at the moment.
104

104

00:05:54.670  -->  00:05:57.900
Okay, so
element is gonna be button number 1 and
105

105

00:05:57.900  -->  00:06:02.140
takes us to room 1, and
that's a new state.
106

106

00:06:02.140  -->  00:06:03.280
So, that's what we're doing in here.
107

107

00:06:03.280  -->  00:06:08.930
We're saying state, let me click in
here properly, we're saying state.
108

108

00:06:08.930  -->  00:06:10.952
Instead of state being startingState,
109

109

00:06:10.952  -->  00:06:15.422
which is what it was when we first started
our game, makes sense, it's startingState.
110

110

00:06:15.422  -->  00:06:20.445
Now, state needs to be next states and
we're looking for
111

111

00:06:20.445  -->  00:06:25.269
within our array,
we're looking for the element 0.
112

112

00:06:25.269  -->  00:06:27.587
And as we established here,
113

113

00:06:27.587  -->  00:06:32.520
element 0 is going to be our
first state and then semicolon.
114

114

00:06:35.000  -->  00:06:38.080
And now we need to create another couple
of conditions, so if the player pushes
115

115

00:06:38.080  -->  00:06:41.010
button number two, it takes them to
that state or button number three.
116

116

00:06:41.010  -->  00:06:42.520
So I had three states in total.
117

117

00:06:42.520  -->  00:06:46.310
We could have one state, or ten states,
or a hundred states it is up to us, but
118

118

00:06:46.310  -->  00:06:49.600
if we have too many, I think it will make
our game design a little too complex.
119

119

00:06:49.600  -->  00:06:53.694
At any point in time the player
can have up to three options.
120

120

00:06:53.694  -->  00:06:55.902
So that's the challenge, is to complete,
121

121

00:06:55.902  -->  00:06:58.957
they managed state method the way
in the middle of creating.
122

122

00:06:58.957  -->  00:07:01.791
Add 2 more conditions to
respond to the player,
123

123

00:07:01.791  -->  00:07:05.630
when they press either 2 or
3 we've created when they press 1.
124

124

00:07:05.630  -->  00:07:08.600
So, what you need to do
when they press 2 or 3, and
125

125

00:07:08.600  -->  00:07:11.840
remember the difference between if,
else if and else.
126

126

00:07:11.840  -->  00:07:15.260
When you are creating this,
we start off with an if, and
127

127

00:07:15.260  -->  00:07:18.620
just remember that there is a difference
between if, else if and else.
128

128

00:07:18.620  -->  00:07:22.101
Okay, so there's your challenge, pause
the video, jump in and take that on now.
129

129

00:07:25.179  -->  00:07:26.100
Welcome back.
130

130

00:07:26.100  -->  00:07:29.600
Pretty straightforward if you were paying
attention in the previous section.
131

131

00:07:29.600  -->  00:07:33.610
We need to have else if as our condition
cuz, we don't want the player to
132

132

00:07:33.610  -->  00:07:37.000
accidentally be pushing Button 1 and
Button 2, at the same time.
133

133

00:07:37.000  -->  00:07:39.670
So instead of just doing else,
we're doing else if.
134

134

00:07:39.670  -->  00:07:42.780
And then what is it?
135

135

00:07:42.780  -->  00:07:44.980
It's Input.GetKeyDown.
136

136

00:07:44.980  -->  00:07:49.970
The key code, whoops,
KeyCode, will be Alpha2.
137

137

00:07:49.970  -->  00:07:53.590
And then what happens in that instance?
138

138

00:07:53.590  -->  00:07:58.600
Well, state will equal nextStates, and
139

139

00:07:58.600  -->  00:08:03.670
it will be our element 1,
as the second option in there.
140

140

00:08:03.670  -->  00:08:09.268
And then one more else if, so we'll do
three of these, all up, GetKeyDown.
141

141

00:08:09.268  -->  00:08:15.520
Again, keyCode, keyCode.Alpha3.
142

142

00:08:17.050  -->  00:08:20.934
Yes and then out state =
143

143

00:08:20.934  -->  00:08:27.630
nextStates[2], element 2.
144

144

00:08:27.630  -->  00:08:31.720
Okay, now we have managed states,
there's one final step in here.
145

145

00:08:31.720  -->  00:08:34.300
This will be a mini mini
micro challenge for you,
146

146

00:08:35.500  -->  00:08:40.260
is what do we need to do so
that we can see this on our screen.
147

147

00:08:40.260  -->  00:08:42.250
If you look through the flow here,
148

148

00:08:42.250  -->  00:08:46.360
if we were to play this right now we'd
push a button, and nothing would happen.
149

149

00:08:46.360  -->  00:08:48.170
Nothing sensible would happen.
150

150

00:08:48.170  -->  00:08:53.120
We need a way of presenting to the player,
within our text field here,
151

151

00:08:53.120  -->  00:08:54.550
this is the new state.
152

152

00:08:55.930  -->  00:09:01.590
And the way we do that is to say
textComponent exactly the same
153

153

00:09:01.590  -->  00:09:06.921
as the line that we've got at
the top here, textComponent.text
154

154

00:09:06.921  -->  00:09:11.100
= state.GetStateStory.
155

155

00:09:11.100  -->  00:09:12.210
Why is it GetStateStory?
156

156

00:09:12.210  -->  00:09:16.840
Well, we need to be presenting what the
story will be to the player, and we need
157

157

00:09:16.840  -->  00:09:21.640
to be adding that into the text component,
the text field that we have in our game.
158

158

00:09:21.640  -->  00:09:26.000
So let's save, jump back over into unity,
press play, and
159

159

00:09:26.000  -->  00:09:28.800
all going to plan, we should have
ourselves a nice little game loop.
160

160

00:09:28.800  -->  00:09:30.630
Just open my window here a little bit.
161

161

00:09:30.630  -->  00:09:34.720
So from our starting state if I
hit keyboard one or keyboard two,
162

162

00:09:34.720  -->  00:09:35.870
it will take me to Room 1 or Room 2.
163

163

00:09:35.870  -->  00:09:38.330
So I hit one, okay,
it takes me to Room 1, great.
164

164

00:09:38.330  -->  00:09:42.990
From here if I was to click on, say,
one again, that should take me to Room 2,
165

165

00:09:42.990  -->  00:09:43.920
that does.
166

166

00:09:43.920  -->  00:09:48.520
And then if I'm on a room 2, if I click
on button number 2, key number 2,
167

167

00:09:48.520  -->  00:09:49.900
that should take me
back to starting state.
168

168

00:09:49.900  -->  00:09:50.520
Great!
169

169

00:09:50.520  -->  00:09:53.260
So I can bounce around through
my different states, excellent!
170

170

00:09:53.260  -->  00:09:56.860
We've got ourselves a little game engine,
an adventure game, a game engine,
171

171

00:09:56.860  -->  00:09:58.780
this is wonderful, very excellent.
172

172

00:09:58.780  -->  00:10:01.190
In the next video we are going to talk
a little more about the design, and
173

173

00:10:01.190  -->  00:10:04.230
the store, and the flow, and
how to visualize all of your content.
174

174

00:10:04.230  -->  00:10:08.750
So you can design it and then
incorporate it, and bring it into Unity.
175

175

00:10:08.750  -->  00:10:09.930
For now, well done,
176

176

00:10:09.930  -->  00:10:13.090
great work on working through some of
the trickier concepts in this section.
177

177

00:10:13.090  -->  00:10:15.180
You're doing absolutely amazingly.
178

178

00:10:15.180  -->  00:10:16.560
And I'll see you in the next video.
