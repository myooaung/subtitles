WEBVTT
1
1

00:00:00.000  -->  00:00:04.005
[MUSIC]
2

2

00:00:04.005  -->  00:00:06.013
Righty-o, let's make some magic.
3

3

00:00:06.013  -->  00:00:08.523
Our goal here is to move our paddle and
to do that,
4

4

00:00:08.523  -->  00:00:10.931
we need to have our paddle
linked to our mouse.
5

5

00:00:10.931  -->  00:00:13.739
And I'm going to outline for
you the problem, and the solution,
6

6

00:00:13.739  -->  00:00:16.711
I've talked about this a couple of times,
you need to break it down.
7

7

00:00:16.711  -->  00:00:20.451
What's our design problem, or our design
goal, and then how do we solve that?
8

8

00:00:20.451  -->  00:00:23.057
So our design goal here, in other words,
9

9

00:00:23.057  -->  00:00:27.909
our problem is to move the paddle on
the x-axis in line with our mouse cursor.
10

10

00:00:27.909  -->  00:00:31.534
That means that as I move my mouse left,
move my mouse right,
11

11

00:00:31.534  -->  00:00:34.462
the paddle is also moving left and
moving right.
12

12

00:00:34.462  -->  00:00:36.444
That's the challenge,
that's the problem, and
13

13

00:00:36.444  -->  00:00:38.018
our solution has a number of steps to it.
14

14

00:00:38.018  -->  00:00:41.441
First of all, we need to find
the position of the mouse as it moves.
15

15

00:00:41.441  -->  00:00:45.172
So we need to say, if the mouse is here,
what is the position on the screen,
16

16

00:00:45.172  -->  00:00:47.680
if it's there,
what is the position, and so on.
17

17

00:00:47.680  -->  00:00:52.040
We need to convert the mouse's
position into world units as
18

18

00:00:52.040  -->  00:00:54.926
a proportion of our total screen side.
19

19

00:00:54.926  -->  00:00:57.554
And then to have it in world units,
why in world units?
20

20

00:00:57.554  -->  00:00:59.283
Well, if we click on our paddle here.
21

21

00:00:59.283  -->  00:01:02.304
We click on our paddle,
we can see it currently has a position,
22

22

00:01:02.304  -->  00:01:04.760
it's exposition right
at the moment is 8.39.
23

23

00:01:04.760  -->  00:01:08.498
That would be based upon wherever it's
pivot point is, and the pivot point for
24

24

00:01:08.498  -->  00:01:10.154
our paddle is right in the middle.
25

25

00:01:10.154  -->  00:01:12.785
If we move it all the way over
to the left, do-do-do-do-do,
26

26

00:01:12.785  -->  00:01:16.026
you can see when it bumps to the edge of
the screen, it's still at position 1.
27

27

00:01:16.026  -->  00:01:20.120
That's because our paddle is 2 in width,
and our pivot is in the middle.
28

28

00:01:20.120  -->  00:01:22.676
If we have it at position 0,
that is where it would be, and
29

29

00:01:22.676  -->  00:01:24.520
that's a little bit half off the screen.
30

30

00:01:24.520  -->  00:01:25.900
So we don't want that,
31

31

00:01:25.900  -->  00:01:29.845
but that is just showing you that as
we move our paddle left to right.
32

32

00:01:29.845  -->  00:01:33.025
We need to know the number
in the world units,
33

33

00:01:33.025  -->  00:01:36.130
not in some other
arbitrary kind of number.
34

34

00:01:36.130  -->  00:01:39.802
And then final step is to update
the paddle's position to be whatever
35

35

00:01:39.802  -->  00:01:41.840
the mouse's position currently is.
36

36

00:01:41.840  -->  00:01:43.990
So if our mouse is at position just here,
37

37

00:01:43.990  -->  00:01:48.183
then our paddle needs to know, I need
to be in position just there as well.
38

38

00:01:48.183  -->  00:01:52.453
Okay, so that's our problem and
hopefully our solution.
39

39

00:01:52.453  -->  00:01:53.927
Let's click on paddle and
40

40

00:01:53.927  -->  00:01:57.689
we want to add a component that we
will call Paddle with a capital P.
41

41

00:01:57.689  -->  00:02:00.753
Paddle, New script,
Create and Add, wonderful,
42

42

00:02:00.753  -->  00:02:04.866
it's popped up in Visual Studio,
although I haven't opened it yet.
43

43

00:02:04.866  -->  00:02:08.228
But I'm just going to drag my
script into my script folder,
44

44

00:02:08.228  -->  00:02:12.347
as good organized folks do, and
Visual Studio is going to be crazy on me.
45

45

00:02:12.347  -->  00:02:14.870
It keeps wanting me to open up, it's like,
come on, Rick, hurry up and open me up.
46

46

00:02:14.870  -->  00:02:17.802
Okay, Visual Studio,
now's your big chance, here we go,
47

47

00:02:17.802  -->  00:02:20.794
your moment in the spotlight,
Visual Studio, okay, cool.
48

48

00:02:20.794  -->  00:02:24.396
What we'll do first of all,
is we want to, in our Update method, and
49

49

00:02:24.396  -->  00:02:25.653
why the Update method?
50

50

00:02:25.653  -->  00:02:29.941
Well, as we're moving around our paddle,
every single frame we want to know,
51

51

00:02:29.941  -->  00:02:32.514
where am I, where am I,
where am I, where am I?
52

52

00:02:32.514  -->  00:02:37.347
That's why we're using Update, so within
Update, let's start off just by finding
53

53

00:02:37.347  -->  00:02:40.245
the position in the x,y
coordinates of the mouse.
54

54

00:02:40.245  -->  00:02:43.226
Let's start by printing to
the console by typing Debug.Log,
55

55

00:02:43.226  -->  00:02:44.978
what are we printing in the console?
56

56

00:02:44.978  -->  00:02:50.110
Well, we're going to start by
printing Input.mousePosition.
57

57

00:02:50.110  -->  00:02:54.539
That is how we can see exactly where
the mouse is positioned within our x,y
58

58

00:02:54.539  -->  00:02:55.476
coordinates.
59

59

00:02:55.476  -->  00:02:58.014
Save that, back over into Unity,
60

60

00:02:58.014  -->  00:03:02.929
we can open up the console in this case,
so I just click on Console.
61

61

00:03:02.929  -->  00:03:06.543
Crocky and then click play,
I'll expand my game window a little bit so
62

62

00:03:06.543  -->  00:03:08.266
we can see what's going on here.
63

63

00:03:08.266  -->  00:03:10.130
Expand the game window, oops, and
64

64

00:03:10.130  -->  00:03:14.436
of course we're going to have Game Over as
soon as my mouse hits the lose collider.
65

65

00:03:14.436  -->  00:03:19.040
For now, I'm going to click on
Lose Collider and toggle it off.
66

66

00:03:19.040  -->  00:03:22.395
So once I click off,
that means that will no longer take place.
67

67

00:03:22.395  -->  00:03:25.925
The ball will just go flying past and
not actually touch the lose collider,
68

68

00:03:25.925  -->  00:03:28.404
because it's hidden for
all intents and purposes.
69

69

00:03:28.404  -->  00:03:29.654
Okay, click play agin.
70

70

00:03:29.654  -->  00:03:32.371
Now you can see updating
down here in my console,
71

71

00:03:32.371  -->  00:03:35.695
when I'm within my game screen here,
which is along here.
72

72

00:03:35.695  -->  00:03:40.329
Bottom left, we should be somewhere
around 0, we've got three numbers there,
73

73

00:03:40.329  -->  00:03:42.559
0 all the way over to the right, cool.
74

74

00:03:42.559  -->  00:03:47.425
So the first number is our x-coordinate,
the second number is our y-coordinate.
75

75

00:03:47.425  -->  00:03:49.539
And the third number
is the zed coordinate,
76

76

00:03:49.539  -->  00:03:52.926
which should be 0 because we're not
going into and out of the screen.
77

77

00:03:52.926  -->  00:03:56.821
So it's giving us some numbers,
as we move up, the x is moving up,
78

78

00:03:56.821  -->  00:04:00.242
as we move up vertically,
then the y is moving up and down.
79

79

00:04:00.242  -->  00:04:03.522
Cool, so we know where the mouse is on the
screen, very cool, what's the next step?
80

80

00:04:03.522  -->  00:04:08.953
The next step is for us to say, what is
the mouse position just on the x-axis?
81

81

00:04:08.953  -->  00:04:12.705
And the way we do that is by saying .x,
that's narrowing it down,
82

82

00:04:12.705  -->  00:04:14.791
we could say .x, or .y, or .zed.
83

83

00:04:14.791  -->  00:04:19.287
We're saying, in this instance,
we just want to know,
84

84

00:04:19.287  -->  00:04:23.704
in terms of input,
the mouse position for the x-axis.
85

85

00:04:23.704  -->  00:04:27.847
Save that, back over into Unity, now we
should be printing out just one value
86

86

00:04:27.847  -->  00:04:30.797
instead of these three and
that should be the x-axis.
87

87

00:04:30.797  -->  00:04:34.582
Click on play,
wait a moment while it's thinking, okay,
88

88

00:04:34.582  -->  00:04:36.634
we've just got the one number.
89

89

00:04:36.634  -->  00:04:39.422
And you can see as I go up and down,
if I can keep it very still on the x as I
90

90

00:04:39.422  -->  00:04:41.607
go up and down,
it's not really changing very much.
91

91

00:04:41.607  -->  00:04:46.042
It's staying in the very low 1,
our single digit point something,
92

92

00:04:46.042  -->  00:04:49.878
if I head over to the right,
then it goes up to about 700.
93

93

00:04:49.878  -->  00:04:52.924
Okay, that is very excellent.
94

94

00:04:52.924  -->  00:04:56.141
Now, what next in terms of
finding our mouse position?
95

95

00:04:56.141  -->  00:05:00.979
Well, we want to know if our screen
size was different resolution.
96

96

00:05:00.979  -->  00:05:05.943
We want to know where we are relative to
the overall screen size without having to
97

97

00:05:05.943  -->  00:05:08.326
know, this is a 1080 width.
98

98

00:05:08.326  -->  00:05:12.099
Or this is a 600 width, we don't want
to have to plug that into the system,
99

99

00:05:12.099  -->  00:05:13.154
we just want to know.
100

100

00:05:13.154  -->  00:05:18.008
So the way we do that is we take our
mouse position on x as a proportion of
101

101

00:05:18.008  -->  00:05:19.957
the overall screen width.
102

102

00:05:19.957  -->  00:05:24.251
And we have a mechanism to
understand that which is saying
103

103

00:05:24.251  -->  00:05:28.105
our Input.mousePosition.x/Screen.width.
104

104

00:05:28.105  -->  00:05:32.215
And that's how we access
the width of the screen.
105

105

00:05:32.215  -->  00:05:34.973
The width of the screen will be,
you can see here,
106

106

00:05:34.973  -->  00:05:38.532
current width of the screen window
in pixels, and we save this.
107

107

00:05:38.532  -->  00:05:43.138
Back over into Unity,
click on play, and as I move,
108

108

00:05:43.138  -->  00:05:47.138
it should be giving me
a value from 0 up to 1.
109

109

00:05:47.138  -->  00:05:50.510
Okay, so we now have this as a percentage,
if I'm right in the middle,
110

110

00:05:50.510  -->  00:05:53.397
it should be around about 0.5,
okay, a lot more useful.
111

111

00:05:53.397  -->  00:05:57.731
And the final step we want to do in
understanding where our mouse is,
112

112

00:05:57.731  -->  00:06:01.774
is to say, well,
we know that there are currently 16 units.
113

113

00:06:01.774  -->  00:06:04.262
This is the way we've set up our world, so
114

114

00:06:04.262  -->  00:06:07.190
that we have 16 Unity
units from left to right.
115

115

00:06:07.190  -->  00:06:09.210
That's why we setup our camera,
if you remember.
116

116

00:06:09.210  -->  00:06:13.596
Click on camera you can see a size of 6,
which is the vertical.
117

117

00:06:13.596  -->  00:06:18.151
That means that total vertical is 12,
we have a 4, 3 aspect ratio, so
118

118

00:06:18.151  -->  00:06:22.493
that means our width, given that
our camera is 6, our width is 16.
119

119

00:06:22.493  -->  00:06:26.346
Half of our width is going to be 8, okay,
we covered that in a previous lecture, so
120

120

00:06:26.346  -->  00:06:28.064
I'm not going to go too slow on that.
121

121

00:06:28.064  -->  00:06:32.684
Hopefully, it still all makes sense to
you, and the way that we say how's our
122

122

00:06:32.684  -->  00:06:35.896
position relate to our units
is to times this by 16.
123

123

00:06:35.896  -->  00:06:40.161
Because that's how many Unity
units we have from left to right.
124

124

00:06:40.161  -->  00:06:42.041
Now, alarm bells should be going off.
125

125

00:06:42.041  -->  00:06:44.603
We never want to put
a number unless it's a 0,
126

126

00:06:44.603  -->  00:06:48.625
a 1, or a 2, because they have
a specific meaning or a purpose to them.
127

127

00:06:48.625  -->  00:06:51.391
We never want to put a magic number like
this right in the middle of our code.
128

128

00:06:51.391  -->  00:06:54.133
So a mini challenge for you,
129

129

00:06:54.133  -->  00:07:00.203
I want you to serialize our screen
width in units as a variable.
130

130

00:07:00.203  -->  00:07:02.790
So that we can use that variable
instead of using the 16, so
131

131

00:07:02.790  -->  00:07:05.445
mini challenge for you,
pause the video and give that a shot.
132

132

00:07:07.759  -->  00:07:11.844
Okay, so at the top of our script here,
underneath class,
133

133

00:07:11.844  -->  00:07:15.783
we are going to type SerializeField,
SerializeField.
134

134

00:07:15.783  -->  00:07:19.147
We need to make this a float because we
have decimal points whenever we have dot
135

135

00:07:19.147  -->  00:07:20.871
something, something, something.
136

136

00:07:20.871  -->  00:07:23.221
We need, which are decimal places,
[LAUGH], in other words,
137

137

00:07:23.221  -->  00:07:25.133
just any small places,
we need to make it a float.
138

138

00:07:25.133  -->  00:07:28.243
And I'm going to call mine
screenWidthInUnits, so
139

139

00:07:28.243  -->  00:07:33.413
it's super duper clear exactly what's
going on, and I'll initialize that at 16.
140

140

00:07:33.413  -->  00:07:36.995
So, down in our print statement,
141

141

00:07:36.995  -->  00:07:41.820
down here we will say, screenWidthInUnits.
142

142

00:07:41.820  -->  00:07:46.428
Okay, and it knows screenWidthInUnits,
what's that?
143

143

00:07:46.428  -->  00:07:50.454
That is 16, and we save this,
jump back over into Unity,
144

144

00:07:50.454  -->  00:07:53.129
we can see that when we find our paddle.
145

145

00:07:53.129  -->  00:07:56.578
Which is currently where
our paddle script is.
146

146

00:07:56.578  -->  00:07:59.772
We can see Screen Unit in Width, 16,
and if we happen to change that,
147

147

00:07:59.772  -->  00:08:01.606
we can simply go in and change it in here.
148

148

00:08:01.606  -->  00:08:04.464
If we thought, our camera need
to be a little bit further out,
149

149

00:08:04.464  -->  00:08:06.056
then we can change it pretty easily.
150

150

00:08:06.056  -->  00:08:09.279
So let's just have a look at our
coordinates now to round out our section
151

151

00:08:09.279  -->  00:08:10.741
of talking about coordinates.
152

152

00:08:10.741  -->  00:08:13.879
From the left it should start off at 0,
as we move to the middle,
153

153

00:08:13.879  -->  00:08:15.347
it should be about 8 at ease.
154

154

00:08:15.347  -->  00:08:17.351
And then over to the right,
it should be 16.
155

155

00:08:17.351  -->  00:08:20.118
While I'm here, I'm going to
turn off my Next Level button,
156

156

00:08:20.118  -->  00:08:21.996
I don't think we're going to need that.
157

157

00:08:21.996  -->  00:08:23.677
Now that the ball hits the lose collider,
158

158

00:08:23.677  -->  00:08:25.417
we can get to the Next Level
pretty easily.
159

159

00:08:25.417  -->  00:08:28.719
So within Canvas,
it's still called Success button,
160

160

00:08:28.719  -->  00:08:33.366
naughty me, I'll just toggle that off for
now, just in case we need it later.
161

161

00:08:33.366  -->  00:08:35.992
Okay, click on Save, looking pretty good.
162

162

00:08:35.992  -->  00:08:40.738
The next part of what we want to do is to
actually move our paddle to a different
163

163

00:08:40.738  -->  00:08:42.307
position on the screen.
164

164

00:08:42.307  -->  00:08:44.080
First step we need to do in that,
165

165

00:08:44.080  -->  00:08:47.180
which is to just move the paddle
around somewhere else.
166

166

00:08:47.180  -->  00:08:52.347
Okay, currently the paddle is at the 6,
around about 6, and around about 0.3.
167

167

00:08:52.347  -->  00:08:57.800
I'm just going to get my y-axis here
to be exactly where I want it, 0.25.
168

168

00:08:57.800  -->  00:09:01.873
Okay, so it's sitting nice and flush on
the bottom of my world, that looks nice.
169

169

00:09:01.873  -->  00:09:06.978
The x-axis doesn't matter so much, but for
illustrative purposes, we'll put it at 5.
170

170

00:09:06.978  -->  00:09:11.294
So our position is 5 and
0.25 currently for the paddle,
171

171

00:09:11.294  -->  00:09:14.937
now back in our script,
let's have a look at this.
172

172

00:09:14.937  -->  00:09:20.455
We want to, under Update, we need to
move our paddle to a different spot,
173

173

00:09:20.455  -->  00:09:23.487
and the way we do that is with a Vector2.
174

174

00:09:23.487  -->  00:09:26.867
So what I mean there is Vector2,
what is a Vector2?
175

175

00:09:26.867  -->  00:09:32.041
I hear you ask, a Vector2 is a compact
way of storing x and y coordinates,
176

176

00:09:32.041  -->  00:09:36.227
that's how we'll be using it,
which x and y coordinates?
177

177

00:09:36.227  -->  00:09:40.103
Well, if you look at the position,
all game objects have a position,
178

178

00:09:40.103  -->  00:09:41.826
they have an x, a y, and a zed.
179

179

00:09:41.826  -->  00:09:45.864
Now, because we're doing a 2-D game, we
don't need to know zed, it should be 0 or
180

180

00:09:45.864  -->  00:09:46.943
should be unchanged.
181

181

00:09:46.943  -->  00:09:50.779
So instead of having a Vector3,
which would use x, y and zed.
182

182

00:09:50.779  -->  00:09:54.515
We just need a Vector2, which is going to
store the x position and the y position.
183

183

00:09:54.515  -->  00:09:57.213
X position sounds funny
if you say it very fast,
184

184

00:09:57.213  -->  00:10:01.130
it sounds like the paddle is running
around getting its clothes off.
185

185

00:10:01.130  -->  00:10:06.055
But not that sort of x position,
so we need a new type of Vector2,
186

186

00:10:06.055  -->  00:10:08.756
I'm going to call this paddlePos.
187

187

00:10:08.756  -->  00:10:11.404
We could call it
paddlePosition to be through,
188

188

00:10:11.404  -->  00:10:15.454
but I'm going to call it just paddlePos
because we know what that means.
189

189

00:10:15.454  -->  00:10:18.260
Save us a couple of letters
because it's still very clear,
190

190

00:10:18.260  -->  00:10:20.401
pos is the universal
way of saying position.
191

191

00:10:20.401  -->  00:10:26.382
Equals, we have to use the keyword new,
so it can construct a new Vector2.
192

192

00:10:26.382  -->  00:10:30.525
We need to start off by saying
paddlePos is a variable,
193

193

00:10:30.525  -->  00:10:36.030
it's typed Vector2, and what are we
going to say the x and y values are?
194

194

00:10:36.030  -->  00:10:43.346
Okay, so new Vector2 that is how we
construct this variable of type Vector2.
195

195

00:10:43.346  -->  00:10:46.451
Vector2 paddlePos = new Vector2, and
196

196

00:10:46.451  -->  00:10:51.166
then in brackets we're putting
in the x and the y coordinates.
197

197

00:10:51.166  -->  00:10:57.226
And we need to use floats, so for here I
will say, our value for x is, say, 10f.
198

198

00:10:57.226  -->  00:10:58.862
We put an f whenever we use a float,
199

199

00:10:58.862  -->  00:11:02.087
we have to put an f on the end,
I didn't mention that at the top here.
200

200

00:11:02.087  -->  00:11:05.764
But a float has to have an f after
the number, comma, and for our y,
201

201

00:11:05.764  -->  00:11:06.831
what should we do?
202

202

00:11:06.831  -->  00:11:11.937
Well, we'll say 4f, okay, so
here we have a new Vector2 that will
203

203

00:11:11.937  -->  00:11:16.708
be in this position, we're saying,
go to this position here.
204

204

00:11:16.708  -->  00:11:18.107
And how do we do the go to?
205

205

00:11:18.107  -->  00:11:23.164
Well, specifically we say
the transform.position
206

206

00:11:23.164  -->  00:11:26.094
= what do you think it equals?
207

207

00:11:26.094  -->  00:11:31.747
It's going to equal this variable
we just created which is paddlePos,
208

208

00:11:31.747  -->  00:11:34.679
now why is it transform.position?
209

209

00:11:34.679  -->  00:11:38.564
If you have a look on your game object,
you'll see that the game object here.
210

210

00:11:38.564  -->  00:11:44.198
The paddle game object which we
currently have our script component.
211

211

00:11:44.198  -->  00:11:49.825
So our script is talking about it, saying,
I am currently a component of this paddle,
212

212

00:11:49.825  -->  00:11:52.688
and this paddle has a transform component.
213

213

00:11:52.688  -->  00:11:56.510
See at the top here, transform,
and within transform,
214

214

00:11:56.510  -->  00:12:01.299
we have a position, so
we're referring to the transform.position.
215

215

00:12:01.299  -->  00:12:06.012
And when we're saying, what are the
current values of transform.position?
216

216

00:12:06.012  -->  00:12:09.188
We're defining them as paddlePos,
what is paddlePos?
217

217

00:12:09.188  -->  00:12:14.126
PaddlePos is currently a Vector2 of 10 and
4, so therefore
218

218

00:12:14.126  -->  00:12:19.450
we're saying the transform.position
will be 10 and will be 4.
219

219

00:12:19.450  -->  00:12:21.272
Okay, let's save our script, and
220

220

00:12:21.272  -->  00:12:24.444
make sure that that actually is
the case when we click on play.
221

221

00:12:24.444  -->  00:12:28.297
That our paddle should go blink,
up to 10 and 4 on our screen.
222

222

00:12:28.297  -->  00:12:31.321
And it does, you can see that it's
jumped up to a value of 10, and
223

223

00:12:31.321  -->  00:12:32.521
jumped up to a value of 4.
224

224

00:12:32.521  -->  00:12:37.461
So we're controlling our paddle's position
within the world from our script,
225

225

00:12:37.461  -->  00:12:39.867
excellente, now what do we need to do?
226

226

00:12:39.867  -->  00:12:44.199
Well, I'm going to show you one more
thing, which is how we can say,
227

227

00:12:44.199  -->  00:12:47.138
use the current position
that you're in now.
228

228

00:12:47.138  -->  00:12:52.335
Use where you are now, so when we say
our Vector2 paddlePos = new Vector2.
229

229

00:12:52.335  -->  00:12:55.325
And we've put in very
specific values in here,
230

230

00:12:55.325  -->  00:12:58.856
we would type in instead
the transform.position.x.
231

231

00:12:58.856  -->  00:13:04.020
Remember the first value here is an x and
the second value is y.
232

232

00:13:04.020  -->  00:13:09.713
Now, what this will say is wherever this
particular game object currently is for
233

233

00:13:09.713  -->  00:13:11.981
its transform.position.x.
234

234

00:13:11.981  -->  00:13:16.170
That's what I want you to make
the new Vector2 as, so in other words,
235

235

00:13:16.170  -->  00:13:19.091
stay where you are on x and
then move to 4 on the y.
236

236

00:13:19.091  -->  00:13:21.291
Save that, jump back in here,
click on play.
237

237

00:13:21.291  -->  00:13:24.814
It should just move up but stay on
the same horizontal axis, excellent,
238

238

00:13:24.814  -->  00:13:27.780
as it's done, and nicely,
it's juggling the ball there.
239

239

00:13:27.780  -->  00:13:31.009
Very cool, and so
there's one final step, and
240

240

00:13:31.009  -->  00:13:34.581
that is going to be your challenge for
this lecture.
241

241

00:13:34.581  -->  00:13:38.796
The challenge is to move the paddle,
set the paddle's Vector 2 so
242

242

00:13:38.796  -->  00:13:42.269
that it is on the x-axis
where the mouse currently is.
243

243

00:13:42.269  -->  00:13:45.497
And we've set that up as a variable,
and on the y-axis,
244

244

00:13:45.497  -->  00:13:47.190
where the paddle already is.
245

245

00:13:47.190  -->  00:13:48.593
Give it your best shot, and
246

246

00:13:48.593  -->  00:13:51.717
I'll see you back here when you
have given it your best shot.
247

247

00:13:51.717  -->  00:13:53.862
Previously, we were
just printing this out,
248

248

00:13:53.862  -->  00:13:56.233
we were printing out where
the mouse currently is.
249

249

00:13:56.233  -->  00:14:00.739
Let's make that into a variable, so
then we can use that variable for
250

250

00:14:00.739  -->  00:14:02.532
good rather than for evil.
251

251

00:14:02.532  -->  00:14:05.752
Let's call this variable,
it needs to be of type float.
252

252

00:14:05.752  -->  00:14:09.426
And we'll call it mousePosInUnits,
253

253

00:14:09.426  -->  00:14:15.180
just to be very clear that it's
to do with the screen units.
254

254

00:14:15.180  -->  00:14:18.100
Hence this last bit here,
it has to do with the mouse position.
255

255

00:14:18.100  -->  00:14:22.594
And then we need to remove our parentheses
that we had around our debug code
256

256

00:14:22.594  -->  00:14:23.328
just here.
257

257

00:14:23.328  -->  00:14:27.910
Save, we've got all of our framework in
place, what we need to do in our Vector 2,
258

258

00:14:27.910  -->  00:14:29.815
which is updating on every frame.
259

259

00:14:29.815  -->  00:14:37.740
On every frame, we want to say that the x
position should be our mousePosInUnits.
260

260

00:14:37.740  -->  00:14:41.953
So, we want it to be wherever the mouse
currently is, that should be x for
261

261

00:14:41.953  -->  00:14:43.968
the paddle, why is it the paddle?
262

262

00:14:43.968  -->  00:14:47.643
Well, this script, this class is
currently a component of the paddle,
263

263

00:14:47.643  -->  00:14:49.643
that's why we're moving the paddle.
264

264

00:14:49.643  -->  00:14:52.541
And we're moving it down here with
the transform.position of the paddle.
265

265

00:14:52.541  -->  00:14:59.706
And then the y value in here,
we want to have the transform.position.y,
266

266

00:14:59.706  -->  00:15:03.131
to say, stay where you are on the y.
267

267

00:15:03.131  -->  00:15:07.143
Let's save, back over into Unity,
click on play and then,
268

268

00:15:07.143  -->  00:15:12.034
move my game window and oops, I missed
the ball as it went flying through.
269

269

00:15:12.034  -->  00:15:14.618
But you can see that as we move our mouse,
270

270

00:15:14.618  -->  00:15:19.181
the paddle is lining up exactly with
where the mouse is, so, success.
271

271

00:15:19.181  -->  00:15:21.514
We've taken the import of the mouse and
272

272

00:15:21.514  -->  00:15:26.333
we've used that to move a game object
left and right on the x-axis, great work!
273

273

00:15:26.333  -->  00:15:30.373
In the next video, we're going to deal
with, how do we stop the paddle going,
274

274

00:15:30.373  -->  00:15:31.735
woo, way off the screen?
275

275

00:15:31.735  -->  00:15:33.550
Great work, and I'll see you very shortly.
