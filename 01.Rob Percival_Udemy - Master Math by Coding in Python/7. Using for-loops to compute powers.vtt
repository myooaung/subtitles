WEBVTT
0
1
00:00:02.530 --> 00:00:10.300
If you are unfamiliar with the concept of a for loop, then this is going to be a really exciting and
1

2
00:00:10.300 --> 00:00:13.060
really groundbreaking video for you.
2

3
00:00:13.330 --> 00:00:19.420
And if you are already familiar with the concept and the usage of for loops, then, well, I hope you also
3

4
00:00:19.420 --> 00:00:25.660
find this video exciting or at least pretty interesting. So I'm going to explain the concept of a for
4

5
00:00:25.660 --> 00:00:31.810
loop in the slides and then I'll switch to Python and show you how to implement for loops and then I'll
5

6
00:00:31.810 --> 00:00:38.380
give you the opportunity to get some more experience with using for loops and also using for loops to
6

7
00:00:38.380 --> 00:00:40.450
understand powers.
7

8
00:00:40.630 --> 00:00:42.690
So let's get started.
8

9
00:00:42.730 --> 00:00:45.170
Here is the basic idea of a for loop.
9

10
00:00:45.190 --> 00:00:52.510
The idea of a for loop is to write some code can be one line of code or several lines of code and that
10

11
00:00:52.510 --> 00:00:59.110
code gets repeated some number of times so in this case I'm just writing X to mean that it can be repeated
11

12
00:00:59.170 --> 00:01:01.040
any number of times.
12

13
00:01:01.270 --> 00:01:05.330
Now this is not the exact Python formatting for a for loop.
13

14
00:01:05.380 --> 00:01:11.650
I'll show you that on the next slide I just want to give you a general idea of how for loops work.
14

15
00:01:11.740 --> 00:01:18.640
So the idea is that this code gets run and this code gets run and then these two lines of code, or however
15

16
00:01:18.640 --> 00:01:25.180
many lines of code you have, get run X time so maybe that's twice or maybe it's 200 times or maybe it's
16

17
00:01:25.180 --> 00:01:27.130
two trillion times.
17

18
00:01:27.130 --> 00:01:30.670
So here is what the exact Python formatting looks like.
18

19
00:01:30.970 --> 00:01:37.750
So you have these reserved keywords for and in. Reserved keywords mean that it's not possible to
19

20
00:01:37.750 --> 00:01:47.350
create variables using the letters for or a variable in. so we say for X and this is a variable
20

21
00:01:47.740 --> 00:01:53.380
in and then you have some list or some set that you're going to loop over and then you have a colon
21

22
00:01:53.380 --> 00:01:54.640
here; that's pretty important.
22

23
00:01:54.670 --> 00:01:59.620
You're gonna get an error message if you don't include the colon here and then here you write your code
23

24
00:01:59.940 --> 00:02:07.490
and in Python all the lines of code that should be inside the for loop have exactly four spaces.
24

25
00:02:07.510 --> 00:02:13.050
It's easy to remember that you need four spaces because this is a "four" loop.
25

26
00:02:13.090 --> 00:02:18.380
I don't know if that's the reason why they have it be four spaces, but maybe there is a connection there.
26

27
00:02:19.180 --> 00:02:25.480
So you can write however many lines of code you want as long as the code is indented by four spaces.
27

28
00:02:25.510 --> 00:02:28.580
It's going to be run as part of this for loop.
28

29
00:02:28.690 --> 00:02:35.500
Now this variable x is going to take on each of these values at each different iteration.
29

30
00:02:35.500 --> 00:02:36.830
Inside this for loop.
30

31
00:02:36.970 --> 00:02:43.240
So the first time that this code is run X will equals zero and then whenever all the code inside this
31

32
00:02:43.240 --> 00:02:49.930
for loop is done we go back to the top of the for loop and then X equals 1 and then all the way through
32

33
00:02:49.930 --> 00:02:55.540
the code and then X will equal 2 through the code and then X will equal 3 and again run through all
33

34
00:02:55.540 --> 00:02:56.220
the code.
34

35
00:02:56.320 --> 00:03:02.830
And once you've gotten through all of these numbers and here are all these options all the items in
35

36
00:03:02.830 --> 00:03:09.190
this list, then the for loop is finished and python will continue with whatever code if there is any
36

37
00:03:09.190 --> 00:03:11.470
code after the for loop.
37

38
00:03:11.480 --> 00:03:17.980
Now when we switch to Python I'm also going to introduce you to another function called range the .function
38

39
00:03:18.040 --> 00:03:25.600
Range will generate a range of numbers that goes from the first number to 1 minus the second number.
39

40
00:03:25.600 --> 00:03:32.800
So in this case this will produce the numbers 0 1 2 so it doesn't produce the number 3.
40

41
00:03:32.890 --> 00:03:35.980
It goes up to 1 less than 3.
41

42
00:03:35.980 --> 00:03:41.520
This is a pretty convenient way of setting up a for loop as you will see in a moment.
42

43
00:03:42.910 --> 00:03:48.160
So let's get started with a simple example to show the basic idea of a for loop.
43

44
00:03:48.220 --> 00:03:54.490
So we have for I in 0 1 2 3.
44

45
00:03:54.490 --> 00:03:55.020
How about this.
45

46
00:03:55.030 --> 00:04:00.670
And now I'm actually going to omit the colon here just so you can see what happens.
46

47
00:04:00.670 --> 00:04:05.740
First of all when I pressed Enter you can see the cursor went all the way back to the beginning so all
47

48
00:04:05.740 --> 00:04:06.780
the way back to the left.
48

49
00:04:06.790 --> 00:04:09.990
But I said that there needs to be four spaces.
49

50
00:04:10.000 --> 00:04:15.080
I'm going to write one two three four and now I'm going to say print i.
50

51
00:04:15.660 --> 00:04:23.440
So what this for loop is going to do is print out the value of i for each iteration inside this for
51

52
00:04:23.440 --> 00:04:24.060
loop.
52

53
00:04:24.070 --> 00:04:32.350
Now I expect to see the numbers 0 1 2 3 because this for loop is going to go over the numbers in this set.
53

54
00:04:32.430 --> 00:04:34.320
0 1 2 3.
54

55
00:04:34.400 --> 00:04:40.450
Okay so now I tried to run this code and we get an error message and it says invalid syntax and you
55

56
00:04:40.450 --> 00:04:46.060
can see it's highlighting the line where the problem is and it shows a little caret symbol at the end
56

57
00:04:46.060 --> 00:04:46.770
of the line.
57

58
00:04:46.810 --> 00:04:51.070
So that's our cue that we are missing a colon like this.
58

59
00:04:52.040 --> 00:04:57.970
Okay so now I ran this cell we get no error message, and we just print out 0 1 2 3.
59

60
00:04:58.780 --> 00:05:04.680
So this variable I can also be used as a regular variable just like how you've used before.
60

61
00:05:04.980 --> 00:05:09.240
So for example we can say I times two.
61

62
00:05:09.330 --> 00:05:17.450
So now this is going to print out 0 times 2 and then 1 times 2 and 2 times 2 and so on.
62

63
00:05:17.490 --> 00:05:20.900
So that is the basic idea of a for loop.
63

64
00:05:20.910 --> 00:05:28.170
Now I'm going to show you the function range. I showed in the slides range 0 through 3 and now when
64

65
00:05:28.170 --> 00:05:34.890
I press control enter to run the code in this cell, Python actually just prints out range 0 3 so a
65

66
00:05:34.890 --> 00:05:39.350
range is its own type of object in Python.
66

67
00:05:39.810 --> 00:05:44.700
If you want to see what are the actual values you have to convert that into a list.
67

68
00:05:44.700 --> 00:05:52.320
And so to convert a range into a list you can use the function list. You can see that these are all reserved
68

69
00:05:52.320 --> 00:05:52.850
functions.
69

70
00:05:52.860 --> 00:06:01.110
So for and in and print and range and list -- they are printed in green text unlike the variable which
70

71
00:06:01.110 --> 00:06:03.470
is printed in black text.
71

72
00:06:03.900 --> 00:06:10.230
So whenever you see green text in Python or at least in Jupyter then you know that that is a special
72

73
00:06:10.230 --> 00:06:11.860
reserved keyword.
73

74
00:06:12.180 --> 00:06:14.790
In these cases they are functions.
74

75
00:06:14.850 --> 00:06:15.080
Okay.
75

76
00:06:15.120 --> 00:06:18.740
So now let's incorporate this idea of range into a for loop.
76

77
00:06:18.750 --> 00:06:24.520
So I'm going to say for... well used i up here and I used X in the slide.
77

78
00:06:24.540 --> 00:06:31.710
How about q? And actually I'll even use qwerty just to show you that these variables don't need to be single
78

79
00:06:31.710 --> 00:06:32.070
letters.
79

80
00:06:32.070 --> 00:06:40.320
So for qwerty in range 0 to 3 and now I'm going to put a colon here.
80

81
00:06:40.320 --> 00:06:46.160
Now remember when I didn't put a colon up here and I press the Enter key the new line key.
81

82
00:06:46.620 --> 00:06:52.770
The cursor went all the way here to the left but now I've set up this first line of the for loop correctly
82

83
00:06:53.580 --> 00:06:59.850
including with the colon and now when I press enter python will automatically put the cursor into the
83

84
00:06:59.880 --> 00:07:01.320
fourth position.
84

85
00:07:01.320 --> 00:07:02.430
So that's pretty convenient.
85

86
00:07:02.430 --> 00:07:05.400
I don't need to count out for spaces for this.
86

87
00:07:05.400 --> 00:07:07.260
For loop.
87

88
00:07:07.260 --> 00:07:09.750
So now inside this for loop I'm going to write
88

89
00:07:09.750 --> 00:07:10.390
print.
89

90
00:07:10.590 --> 00:07:18.460
This is the and then percent G T H iteration.
90

91
00:07:18.460 --> 00:07:19.630
Now here are going to say
91

92
00:07:19.640 --> 00:07:23.570
Percent qwerty.
92

93
00:07:23.790 --> 00:07:30.020
So this is going to print out on the first iteration it's going to say this is the 0th iteration.
93

94
00:07:30.150 --> 00:07:35.310
It looks a little bit strange having this percent G and then immediately with no space afterwards I
94

95
00:07:35.310 --> 00:07:37.350
just go right to the T H.
95

96
00:07:37.350 --> 00:07:44.490
However, Python knows that this special character percent indicates to print one character and that corresponds
96

97
00:07:44.490 --> 00:07:47.310
to a number for a G.
97

98
00:07:47.310 --> 00:07:47.580
Okay.
98

99
00:07:47.610 --> 00:07:54.600
So when I run this we get these slightly not totally grammatically correct result that this is the zeroeth
99

100
00:07:54.600 --> 00:07:59.570
iteration, that one is correct, but then we see this is the oneth iteration.
100

101
00:07:59.580 --> 00:08:06.360
This is the twoth iteration... if you would like to have special cases for this to say this is the first
101

102
00:08:06.510 --> 00:08:13.680
iteration and this is the second iteration that's going to require some additional knowledge about control
102

103
00:08:13.680 --> 00:08:20.430
structures in Python and you will learn about those kinds of structures such as if then statements in
103

104
00:08:20.490 --> 00:08:22.700
a later part of this course.
104

105
00:08:22.710 --> 00:08:26.350
So for now let's just forget about this, that it's slightly wrong.
105

106
00:08:26.490 --> 00:08:27.700
It's okay for now.
106

107
00:08:27.960 --> 00:08:34.530
I would like to show you one more example of using a for loop before we get to the exercise for this
107

108
00:08:34.530 --> 00:08:35.670
video.
108

109
00:08:35.670 --> 00:08:42.240
And the next example that I'm going to show you is essentially combining what I did up here with combining
109

110
00:08:42.270 --> 00:08:43.590
what I did up here.
110

111
00:08:43.680 --> 00:08:51.090
I'm going to use the looping variable here in a mathematical operation and then print out some information
111

112
00:08:51.090 --> 00:08:52.230
here.
112

113
00:08:52.590 --> 00:08:55.360
So I will say for... and what letters we use?
113

114
00:08:55.380 --> 00:08:56.580
How about T.
114

115
00:08:56.850 --> 00:09:00.510
So t in range 0 to
115

116
00:09:00.510 --> 00:09:02.610
Let's go to 5.
116

117
00:09:02.970 --> 00:09:09.780
So I'm going to say num equals T squared so t to the power of 2.
117

118
00:09:10.170 --> 00:09:13.890
Now actually I can run this immediately as it is.
118

119
00:09:13.890 --> 00:09:20.400
We got no error messages and no warnings but we also didn't print anything out so it's tough to know
119

120
00:09:20.430 --> 00:09:22.740
what actually was going on here.
120

121
00:09:22.890 --> 00:09:29.460
So therefore I'm going to add another line and that's going to say print num so pretty simple.
121

122
00:09:29.460 --> 00:09:33.390
And essentially what we've done is computed powers or squares.
122

123
00:09:33.600 --> 00:09:36.050
Now the numbers that go in this range,
123

124
00:09:36.050 --> 00:09:42.240
so remember that's going to start from zero and it's going to go up to 4, which is one less than the
124

125
00:09:42.240 --> 00:09:43.320
second number.
125

126
00:09:43.350 --> 00:09:53.580
So zero squared is zero one squared is one two squared three squared and four squared is 16. Here is the
126

127
00:09:53.670 --> 00:09:55.630
exercise for this video.
127

128
00:09:55.920 --> 00:09:59.790
The exercise for this video is to use a for loop to print out.
128

129
00:09:59.790 --> 00:10:01.490
Basically this text.
129

130
00:10:01.590 --> 00:10:09.390
So you want to write two to the power of zero is one, two to the power of one is two, and so on down to
130

131
00:10:09.450 --> 00:10:10.270
nine.
131

132
00:10:10.290 --> 00:10:12.000
So this has to go in a for loop.
132

133
00:10:12.000 --> 00:10:19.440
You can already guess that the for loop will go from zero to 9 and then yeah you just have to use some
133

134
00:10:19.500 --> 00:10:24.060
knowledge that you've already learned in the past several videos to produce this output.
134

135
00:10:24.060 --> 00:10:28.980
So now is your opportunity to pause the video, work through this problem,
135

136
00:10:29.100 --> 00:10:31.590
make sure you can produce this kind of a result.
136

137
00:10:31.800 --> 00:10:39.330
And when you have finished, you can come back to the video and then I'm going to solve the problem.
137

138
00:10:39.360 --> 00:10:41.910
I need a new cell here. Now,
138

139
00:10:41.910 --> 00:10:46.470
previously I've been creating new cells by pressing shift enter.
139

140
00:10:46.470 --> 00:10:52.860
You can also create a new cell underneath the current cell by typing alt enter, and you can also go up
140

141
00:10:52.860 --> 00:10:57.120
here to the menu and say insert cell below.
141

142
00:10:57.210 --> 00:11:02.940
The advantage of pressing insert cell below is that this doesn't actually run the current line.
142

143
00:11:02.940 --> 00:11:09.120
So if you don't actually want to run the cell then this is one way to get a new cell without running
143

144
00:11:09.120 --> 00:11:11.370
the code in this cell.
144

145
00:11:11.420 --> 00:11:19.230
Okay so we need a for loop, so let's say for i in range and our range is sometimes a bit tricky; it's easy
145

146
00:11:19.230 --> 00:11:27.240
to forget that the number that you want to go up to is one below the second input. So to go from numbers
146

147
00:11:27.300 --> 00:11:34.380
0 through 9 you actually have to write range zero comma 10 and then what we want to write in here we
147

148
00:11:34.380 --> 00:11:43.440
want to print out the statement two to the power of... percent G and that's going to be substituted
148

149
00:11:43.440 --> 00:11:47.200
with this variable i is.
149

150
00:11:47.250 --> 00:11:49.470
And now I don't know what that number is going to be.
150

151
00:11:49.500 --> 00:11:53.830
So I'm going to write percent G and we are going to compute it out here.
151

152
00:11:53.850 --> 00:11:55.250
So I'm going to say i.
152

153
00:11:55.460 --> 00:11:58.890
And then we need star star
153

154
00:11:58.950 --> 00:12:05.420
i. So let's have a look before we run this is going to say two to the power of and then this is going to
154

155
00:12:05.430 --> 00:12:06.900
be the first element here.
155

156
00:12:06.960 --> 00:12:07.580
So i.
156

157
00:12:07.580 --> 00:12:15.150
Two to the power of the looping index variable here is and then it's going to be whatever two to the
157

158
00:12:15.150 --> 00:12:18.180
i ends up being.
158

159
00:12:18.180 --> 00:12:19.950
So that looks pretty good.
159

160
00:12:20.010 --> 00:12:26.190
The last thing that I would like to do is make this code a little bit more flexible, because remember
160

161
00:12:26.550 --> 00:12:33.090
the goal of this course -- the big picture idea of this course -- is for you to learn how to use python as
161

162
00:12:33.090 --> 00:12:40.560
a tool to help you understand math. And to do that we need to make sure that you can code in Python flexibly
162

163
00:12:40.860 --> 00:12:44.940
to perform lots of different mathematical operations.
163

164
00:12:44.970 --> 00:12:48.050
So I'm going to make this more flexible here.
164

165
00:12:48.060 --> 00:12:50.010
This is hard coded to be two.
165

166
00:12:50.010 --> 00:12:54.980
So it's always two to the power of whatever this number ends up being.
166

167
00:12:55.110 --> 00:12:58.540
So two is hardcoded, so I'm going to create a new variable.
167

168
00:12:58.680 --> 00:13:03.600
Call it base. And let's start by making it two here.
168

169
00:13:03.600 --> 00:13:05.660
So this is going to say %G.
169

170
00:13:06.160 --> 00:13:15.240
And now I'm going to add base here as the first number that gets implemented here or replaced over here
170

171
00:13:15.600 --> 00:13:20.930
and then of course is not two to the power of I but instead it's base to the power of I.
171

172
00:13:20.940 --> 00:13:23.880
So now I'm going to run this code again and we shouldn't see any change.
172

173
00:13:23.880 --> 00:13:31.220
It's always good in programming to start changing your code by testing it against a known result.
173

174
00:13:31.230 --> 00:13:36.900
So I know that if I get a different result from what you see here than I've done something wrong.
174

175
00:13:37.820 --> 00:13:38.180
OK.
175

176
00:13:38.190 --> 00:13:40.010
So the result here is the same.
176

177
00:13:40.020 --> 00:13:45.830
And now that allows us to explore powers or exponents with different bases.
177

178
00:13:45.840 --> 00:13:53.130
So for example you can say base equals three and then you see three to the power of for example three
178

179
00:13:53.130 --> 00:13:57.620
to the power eight is six thousand five hundred and sixty one.
179

180
00:13:57.750 --> 00:14:02.950
And now just out of curiosity let's see what happens if I make this thirty two.
180

181
00:14:02.960 --> 00:14:04.900
It seems like a good number.
181

182
00:14:04.920 --> 00:14:08.470
OK so thirty two to the power of nine.
182

183
00:14:08.490 --> 00:14:15.800
That's a huge number that is 32 times 32 times 32 and so on up to nine times.
183

184
00:14:15.960 --> 00:14:19.910
Now this might look like a weird number it says three point five.
184

185
00:14:19.920 --> 00:14:26.520
Which kind of seems like a small number, but then at the end there is this E plus thirteen. This is something
185

186
00:14:26.520 --> 00:14:33.210
called scientific notation and if you are not familiar with scientific notation or maybe you are familiar
186

187
00:14:33.210 --> 00:14:40.310
with scientific notation but not in Python coding then don't worry I'm going to explain what this is
187

188
00:14:40.320 --> 00:14:43.500
I'm going to have a whole video about this later on in the course.
188

189
00:14:43.500 --> 00:14:51.790
For now suffice it to say that this number means basically a three followed by 13 other numbers.
189

190
00:14:51.840 --> 00:14:56.180
So these are some of the numbers but it's essentially a little bit more than three
190

191
00:14:56.340 --> 00:14:58.550
followed by 13 zeros.
191

192
00:14:58.550 --> 00:15:06.710
So this is a really really really large number. In this video you learned about for loops.
192

193
00:15:06.710 --> 00:15:10.880
What it means to have a for loop and how to create a for loop in Python.
193

194
00:15:10.940 --> 00:15:17.600
And you saw how to use for loops to help you understand powers in particular to help you understand
194

195
00:15:17.930 --> 00:15:21.500
increasing powers of base numbers.
195

196
00:15:21.500 --> 00:15:26.750
Now over the past several videos I've been mentioning this concept of order of operations.
196

197
00:15:26.750 --> 00:15:33.680
It's a really important concept in numerical math and in the next video you are finally going to get
197

198
00:15:33.680 --> 00:15:40.610
to learn all about order of operations and math and how that plays out in Python and how to override
198

199
00:15:40.610 --> 00:15:42.190
the order of operations.
199

200
00:15:42.200 --> 00:15:43.720
I will see you in the next video.
