0
1
00:00:02,430 --> 00:00:05,710
This is going to be a really exciting video.
1

2
00:00:05,730 --> 00:00:06,270
I know,
2

3
00:00:06,300 --> 00:00:11,160
I know, I say that about almost all the videos. But this one really is exciting.
3

4
00:00:11,160 --> 00:00:19,020
And that's because you are going to learn how to create your very own functions in Python. Creating functions
4

5
00:00:19,110 --> 00:00:24,120
is a really important skill for python and programming in general.
5

6
00:00:24,120 --> 00:00:30,060
And so without further ado let's jump straight to Python and I'm just going to start coding and you will
6

7
00:00:30,060 --> 00:00:37,990
see how easy it is to create your own functions. So to create a function all you have to do is type def
7

8
00:00:38,020 --> 00:00:38,800
def.
8

9
00:00:38,830 --> 00:00:40,050
That's for define.
9

10
00:00:40,330 --> 00:00:44,350
And then the name of the function, let's call it my function.
10

11
00:00:44,530 --> 00:00:48,440
And then we need parentheses and a colon.
11

12
00:00:48,460 --> 00:00:52,590
Now I'm going to explain more about what each of these things mean
12

13
00:00:52,840 --> 00:00:53,610
throughout the video.
13

14
00:00:53,620 --> 00:00:56,530
But I just want to dive right in and show you how easy it is.
14

15
00:00:56,530 --> 00:01:00,570
So let's say print... you know people always do "hello world."
15

16
00:01:00,580 --> 00:01:03,120
It's like a typical thing for programming.
16

17
00:01:03,570 --> 00:01:03,790
OK.
17

18
00:01:03,790 --> 00:01:09,300
So notice when I run this cell, nothing happens. We don't get any errors or any warning messages.
18

19
00:01:09,460 --> 00:01:11,820
Nothing particularly interesting happens.
19

20
00:01:11,920 --> 00:01:17,010
But now I can type myfunction and I actually use tab complete here.
20

21
00:01:17,030 --> 00:01:23,260
So I wrote myfun and then I pressed the tab key on the keyboard, and it auto completed because Python
21

22
00:01:23,350 --> 00:01:26,800
already recognizes this as a function.
22

23
00:01:27,130 --> 00:01:30,130
And then parentheses indicate that I'm calling a function.
23

24
00:01:30,170 --> 00:01:33,280
Now when I run this code it prints out hello world.
24

25
00:01:33,280 --> 00:01:38,280
So basically Python -- even though I'm not running this cell, when I ran this cell
25

26
00:01:38,280 --> 00:01:39,730
nothing happened.
26

27
00:01:39,730 --> 00:01:46,560
I'm running this cell here, but this cell is calling this function, which is defined in the python workspace.
27

28
00:01:46,720 --> 00:01:49,770
And what's inside that function is just this.
28

29
00:01:49,780 --> 00:01:51,490
So hello world.
29

30
00:01:51,490 --> 00:01:51,820
All right.
30

31
00:01:51,820 --> 00:01:56,320
Not a super useful function but it's a great place to start.
31

32
00:01:56,500 --> 00:02:00,550
Now functions can take inputs and that you've seen many times before.
32

33
00:02:00,550 --> 00:02:05,080
So for example you can say int and then three point two.
33

34
00:02:05,140 --> 00:02:12,670
So the input into the integer function, the int function, is three point two, and the output is the number
34

35
00:02:12,670 --> 00:02:16,390
three, it's the integer from the input.
35

36
00:02:16,520 --> 00:02:16,860
Okay.
36

37
00:02:16,870 --> 00:02:18,250
So here it works the same way.
37

38
00:02:18,250 --> 00:02:19,900
So I'm going to write.
38

39
00:02:20,020 --> 00:02:20,650
Let's write
39

40
00:02:20,650 --> 00:02:23,470
name. So I'm going to create a new variable in here.
40

41
00:02:23,470 --> 00:02:30,910
Call it name and then instead of saying hello world, this is going to say percent s and then.
41

42
00:02:30,910 --> 00:02:32,770
Percent name.
42

43
00:02:33,430 --> 00:02:40,690
So now this is interesting: I ran this cell again and I haven't actually defined any variable called
43

44
00:02:40,690 --> 00:02:41,150
name.
44

45
00:02:41,170 --> 00:02:43,930
And to show you how weird that is, that we didn't get any errors.
45

46
00:02:44,080 --> 00:02:48,870
if I just say name here, python is going to say Name name is not defined.
46

47
00:02:48,880 --> 00:02:51,060
Kind of funny but the variable
47

48
00:02:51,130 --> 00:02:54,340
that's what this means -- the variable name is not defined.
48

49
00:02:54,340 --> 00:02:58,230
However when I ran this code here nothing happened.
49

50
00:02:58,240 --> 00:03:00,200
Python didn't give me any errors.
50

51
00:03:00,340 --> 00:03:04,410
So the variable name is the input into this function.
51

52
00:03:04,810 --> 00:03:07,540
And this is how I'm using that input variable.
52

53
00:03:07,570 --> 00:03:13,590
So now I can run my function and let's put it in my name is Mike.
53

54
00:03:13,750 --> 00:03:15,600
And now this function is going to print.
54

55
00:03:15,610 --> 00:03:16,420
Hello Mike.
55

56
00:03:16,420 --> 00:03:21,300
And that's because the input into this function is here is called name.
56

57
00:03:21,310 --> 00:03:22,940
But here I call it Mike.
57

58
00:03:23,080 --> 00:03:26,340
And then that variable gets used over here.
58

59
00:03:26,340 --> 00:03:32,590
Now because this is a course about using python as a tool to learn mathematics, not using python as a
59

60
00:03:32,890 --> 00:03:37,450
tool to say hello to yourself, I'm going to change this function.
60

61
00:03:37,450 --> 00:03:40,170
Actually I'm even going to get rid of it and start from scratch.
61

62
00:03:40,180 --> 00:03:46,270
So essentially what I want to do is create a function that will print out the remainder, so the integer
62

63
00:03:46,270 --> 00:03:52,540
division and the remainder, just like what we did in a previous video, except there in the previous video
63

64
00:03:52,780 --> 00:03:53,940
we were writing everything out.
64

65
00:03:53,950 --> 00:04:02,830
And here I'm going to put it into a function. So let's call this function computeremainder. And this
65

66
00:04:02,830 --> 00:04:04,520
function needs two inputs.
66

67
00:04:04,550 --> 00:04:11,710
I'll call them X and Y and that's going to correspond to the numerator and the denominator or basically
67

68
00:04:11,710 --> 00:04:15,340
the thing that you are dividing and the thing that you're dividing into.
68

69
00:04:16,210 --> 00:04:18,760
So from that previous video I call these variables.
69

70
00:04:18,760 --> 00:04:27,250
I think I call it divis and that was the integer of X divided by Y and then we have the remainder and
70

71
00:04:27,250 --> 00:04:31,660
that was x percent Y.
71

72
00:04:31,660 --> 00:04:36,970
Now if you're not sure what this means here, this percent Y in the modulus operator, then you might want
72

73
00:04:36,970 --> 00:04:42,810
to go back and consult that previous video on the remainder and the modulo operator.
73

74
00:04:43,090 --> 00:04:49,990
OK so now I've done a little bit of math with these two inputs here, separated by commas and now I want
74

75
00:04:49,990 --> 00:04:52,960
to print out the results. I'm going to write print.
75

76
00:04:52,960 --> 00:05:02,440
Let's see it's going to be Y goes into x N times with a remainder of M.
76

77
00:05:02,920 --> 00:05:03,130
Okay.
77

78
00:05:03,140 --> 00:05:05,860
Now obviously we need to replace a lot of these letters here.
78

79
00:05:06,010 --> 00:05:07,990
And these are all going to be numbers.
79

80
00:05:07,990 --> 00:05:11,560
So these all get replaced with percent G.
80

81
00:05:11,560 --> 00:05:18,810
So percent G goes into percent G percent G times with a remainder of percent G.
81

82
00:05:18,910 --> 00:05:24,010
By the way you'll notice that there's also a bit of character overloading here. This term overloading
82

83
00:05:24,010 --> 00:05:30,640
in programming means when you use the same term or the same function or the same concept multiple times
83

84
00:05:30,850 --> 00:05:34,410
to indicate very different things in different context.
84

85
00:05:34,410 --> 00:05:38,980
So here the percent sign is used as a modulus the modulo operator.
85

86
00:05:39,150 --> 00:05:44,820
And here the percent sign is used to indicate a text replacement.
86

87
00:05:44,830 --> 00:05:50,620
So now we need yet another percent sign, these percent signs are all over the place here.
87

88
00:05:50,680 --> 00:06:00,670
So we say why goes into X divis times with a remainder of this variable remainder.
88

89
00:06:00,670 --> 00:06:01,030
All right.
89

90
00:06:01,030 --> 00:06:04,380
So now I'm going to run this cell again.
90

91
00:06:04,390 --> 00:06:11,080
I haven't defined X or Y, and yet when I run this cell we don't get any errors. We don't get any errors
91

92
00:06:11,110 --> 00:06:16,890
because we are just defining a function here and here I'm going to actually call that function and say
92

93
00:06:16,920 --> 00:06:20,190
compute remainder.
93

94
00:06:20,190 --> 00:06:26,370
Now notice what happens if I call the function without giving any inputs whatsoever.
94

95
00:06:26,430 --> 00:06:27,270
We get an error.
95

96
00:06:27,270 --> 00:06:31,770
It says it's missing two required positional arguments x and y.
96

97
00:06:31,770 --> 00:06:38,340
So basically python is trying to run this function but it says hey! we need a input x and we need an
97

98
00:06:38,400 --> 00:06:40,010
input y.
98

99
00:06:40,020 --> 00:06:40,290
Okay.
99

100
00:06:40,320 --> 00:06:42,270
So let's provide some inputs.
100

101
00:06:42,270 --> 00:06:47,100
So I'm going to use the same numbers that I did in the previous video.
101

102
00:06:48,210 --> 00:06:49,910
So three goes into.
102

103
00:06:49,950 --> 00:06:52,570
Three times with a remainder of one.
103

104
00:06:52,650 --> 00:06:53,460
That's really great.
104

105
00:06:53,460 --> 00:06:54,810
I know that that answer is correct.
105

106
00:06:54,810 --> 00:06:59,460
I wonder how many times do you think six goes into a hundred.
106

107
00:06:59,460 --> 00:07:02,930
The answer is 16 times with a remainder of four.
107

108
00:07:02,940 --> 00:07:03,390
All right.
108

109
00:07:03,390 --> 00:07:04,310
That's pretty neat.
109

110
00:07:04,800 --> 00:07:07,650
But we can get even better than that.
110

111
00:07:07,650 --> 00:07:14,370
Let's say I want to use this function to be able to type in some user input so I don't want to have
111

112
00:07:14,380 --> 00:07:16,530
to hard code these numbers here.
112

113
00:07:16,590 --> 00:07:20,760
I want Python to ask me what two numbers to use.
113

114
00:07:20,770 --> 00:07:23,010
So to do that we need a different function.
114

115
00:07:23,010 --> 00:07:28,380
So I'm going to copy and paste this here.
115

116
00:07:28,380 --> 00:07:29,630
Now I have two functions.
116

117
00:07:29,640 --> 00:07:35,810
I can run this code here and that's going to override this function here.
117

118
00:07:35,830 --> 00:07:41,610
So then I lose this function. However, that's generally confusing and not really great programming.
118

119
00:07:41,610 --> 00:07:50,980
So what I'm going to do instead is rename this function. Let's call it division with input.
119

120
00:07:51,360 --> 00:07:57,660
And now I'm not going to put any inputs directly into the function because instead I'm going to ask
120

121
00:07:57,750 --> 00:07:59,220
the user for input.
121

122
00:07:59,250 --> 00:08:04,860
So I'm going to write X equals... now I'm going to use this function called input.
122

123
00:08:04,860 --> 00:08:07,870
This might be a new python function for you.
123

124
00:08:08,100 --> 00:08:09,500
Maybe you haven't seen this before.
124

125
00:08:09,510 --> 00:08:14,120
It's actually really simple and actually maybe I'll take a moment to explain how this works.
125

126
00:08:14,120 --> 00:08:27,420
I'm going to add a new cell... insert cell below. And here I will say let's say a equals input input a number.
126

127
00:08:27,430 --> 00:08:33,810
Now I'm going to run this cell and you can see Python here says input a number -- that's exactly the text
127

128
00:08:33,810 --> 00:08:39,690
I wrote here -- and I'm going to write on it just some random number like this and now I'm going to say
128

129
00:08:39,720 --> 00:08:42,090
insert a new cell below.
129

130
00:08:42,090 --> 00:08:50,370
Now I can print out what A is, and A is this number here except a isn't actually that number; a is in fact
130

131
00:08:50,430 --> 00:08:51,050
a string.
131

132
00:08:51,060 --> 00:08:53,590
You can see it has these single quotes around it.
132

133
00:08:53,610 --> 00:08:59,930
In fact, if we write type A and you can see that a is a string.
133

134
00:09:00,000 --> 00:09:08,040
So if I want to actually use this as a number I would need to make this an integer so I can say int and
134

135
00:09:08,040 --> 00:09:10,100
then input a number.
135

136
00:09:10,140 --> 00:09:13,350
So now input... let's say sixty five.
136

137
00:09:13,400 --> 00:09:14,450
So notice what I'm doing.
137

138
00:09:14,460 --> 00:09:20,520
I'm using one function and I'm directly embedding that function into another function.
138

139
00:09:20,850 --> 00:09:27,120
So the output of this function "input" becomes the input to this function int.
139

140
00:09:27,150 --> 00:09:31,080
It's a little bit confusing with all the words but I hope you get the idea.
140

141
00:09:31,080 --> 00:09:35,460
Now we can see the type of a is an int; it's now an integer.
141

142
00:09:35,820 --> 00:09:38,510
So this is no longer the string sixty five.
142

143
00:09:38,520 --> 00:09:40,610
It's actually the number sixty five.
143

144
00:09:40,850 --> 00:09:44,460
And that's convenient because I can add, you know, three point two.
144

145
00:09:45,510 --> 00:09:45,780
OK.
145

146
00:09:45,800 --> 00:09:50,490
So with that out of the way what I'd like to do now is input the two numbers.
146

147
00:09:50,520 --> 00:09:57,480
I want to input x and we'll call that the the input the numerator
147

148
00:10:00,090 --> 00:10:03,940
and then I need a Y and that's going to be input.
148

149
00:10:04,020 --> 00:10:06,120
The denominator.
149

150
00:10:09,240 --> 00:10:09,450
all right.
150

151
00:10:09,480 --> 00:10:11,140
And then the rest of this is the same.
151

152
00:10:11,180 --> 00:10:15,150
Now I'm going to run cell, make sure we don't get any errors and we didn't.
152

153
00:10:15,180 --> 00:10:15,960
That's a good sign.
153

154
00:10:16,440 --> 00:10:24,630
So now we can run this division with input and let's see if this works.
154

155
00:10:24,720 --> 00:10:24,950
All right.
155

156
00:10:24,990 --> 00:10:27,620
So input the numerator. So far this is looking good.
156

157
00:10:27,630 --> 00:10:33,360
The numerator will be 10 the denominator or the division is going to be three... oops!
157

158
00:10:33,420 --> 00:10:41,180
And then we get an error. The error says it's a type error and basically unsupported operand type
158

159
00:10:41,180 --> 00:10:43,620
for a division string and string.
159

160
00:10:43,650 --> 00:10:50,370
So this is maybe not the most interpretable error but you can see it has something to do with a type
160

161
00:10:50,370 --> 00:10:54,750
of the variable something to do with division and something to do with the string.
161

162
00:10:55,410 --> 00:10:59,220
So let's go back to the code and see if we can figure out what the problem is.
162

163
00:11:00,180 --> 00:11:07,620
So the problem is related to what I explained up here: When I input these numbers I was typing in numbers
163

164
00:11:07,650 --> 00:11:10,550
on the keyboard and I'm thinking about these numbers.
164

165
00:11:10,740 --> 00:11:18,030
But in fact Python has interpreted these as strings and I'm trying to divide a string by a string which
165

166
00:11:18,030 --> 00:11:18,930
doesn't make sense.
166

167
00:11:18,960 --> 00:11:21,880
You might as well try to divide w by h.
167

168
00:11:21,900 --> 00:11:23,880
It's not a sensible operation.
168

169
00:11:24,150 --> 00:11:30,810
So the solution, which you might have already guessed, is to encase these inside the int function to convert
169

170
00:11:30,810 --> 00:11:33,520
these into integers.
170

171
00:11:34,270 --> 00:11:34,710
OK.
171

172
00:11:34,710 --> 00:11:37,060
And now let's try this again.
172

173
00:11:37,110 --> 00:11:39,210
Now we say input the the numerator.
173

174
00:11:39,240 --> 00:11:44,410
Let's make that 10, the denominator will be three, and then we get a nice result.
174

175
00:11:44,430 --> 00:11:45,720
Three goes into 10
175

176
00:11:45,720 --> 00:11:49,020
three times with a remainder of 1.
176

177
00:11:49,020 --> 00:11:52,630
Now this is not yet a perfect function.
177

178
00:11:52,660 --> 00:11:55,410
There's some other weird things that can happen with this function.
178

179
00:11:55,410 --> 00:12:02,220
One is that because I'm converting this into an integer, if you try this with a decimal. Let's say the
179

180
00:12:02,220 --> 00:12:07,680
numerator is ten point four and we already get an error.
180

181
00:12:07,680 --> 00:12:14,880
And that's because the int function doesn't know how to deal with a string that already includes a decimal
181

182
00:12:14,880 --> 00:12:15,270
point.
182

183
00:12:16,200 --> 00:12:22,290
So you can see here the importance of testing out your code with a range of different types of inputs.
183

184
00:12:22,290 --> 00:12:29,310
Now this is not a problem that I'm going to fix in this video because I want to focus more on the basics
184

185
00:12:29,430 --> 00:12:32,940
of defining functions and working with functions.
185

186
00:12:32,940 --> 00:12:37,710
You will see later on in the course how to deal with this kind of error and how to avoid this issue.
186

187
00:12:39,350 --> 00:12:42,240
I hope you enjoyed this video and found it useful.
187

188
00:12:42,260 --> 00:12:49,400
You learned the basics of creating functions in Python including how to get user input to make your
188

189
00:12:49,400 --> 00:12:51,080
code more interactive.
189

190
00:12:51,080 --> 00:12:56,230
I'm going to continue teaching you about working with functions over the next several videos.
190

191
00:12:56,240 --> 00:12:57,530
So please keep watching.
