WEBVTT
0
1
00:00:03.680 --> 00:00:09.720
In this video I'm going to tell you about a data type in Python called a dictionary.
1

2
00:00:09.980 --> 00:00:17.530
A dictionary is a way to store different kinds of information and be able to access it using keywords.
2

3
00:00:17.630 --> 00:00:23.690
If you are familiar with the MATLAB programming language, then a Python dictionary is a little bit like
3

4
00:00:23.780 --> 00:00:25.920
a matlab structure.
4

5
00:00:26.000 --> 00:00:26.310
All right.
5

6
00:00:26.330 --> 00:00:31.980
So let's switch to Python and we'll just immediately dive right in.
6

7
00:00:32.090 --> 00:00:36.430
There are a few different ways to create a dictionary in Python.
7

8
00:00:36.440 --> 00:00:43.400
I'm going to create one using the function dict. So to create a dictionary using the dict function you
8

9
00:00:43.400 --> 00:00:46.530
have to specify key value pairs.
9

10
00:00:46.550 --> 00:00:49.100
So a key is like the keyword that you're using.
10

11
00:00:49.100 --> 00:00:51.140
So for example let's say fruit.
11

12
00:00:51.560 --> 00:00:55.600
And then the value of the key fruit is... I'll make this a list.
12

13
00:00:55.610 --> 00:01:00.160
Let's say Banana and maybe Apple.
13

14
00:01:00.260 --> 00:01:02.930
Those sound like good fruit items.
14

15
00:01:02.930 --> 00:01:06.050
So this is one key value pair.
15

16
00:01:06.050 --> 00:01:10.790
Now I'm going to have another pair and let's call that numbers and I'll make this one a list as well
16

17
00:01:10.800 --> 00:01:16.450
as let's say 1 3 4 2 7.
17

18
00:01:16.490 --> 00:01:23.690
So now we have our dictionary and I can print out the dictionary D. You can see when the dictionary
18

19
00:01:23.690 --> 00:01:30.290
printed out it put everything into these curly brackets here and then you see the key and then a colon
19

20
00:01:30.440 --> 00:01:32.810
and then the items or the values.
20

21
00:01:32.830 --> 00:01:34.450
So key
21

22
00:01:34.490 --> 00:01:43.040
colon items. So you can list all of the keys by using the method keys, so let's say key d dot keys and now it prints
22

23
00:01:43.040 --> 00:01:47.740
out the two keys, so fruit and numbers.
23

24
00:01:47.740 --> 00:01:53.690
And now if you want to access the items from are the values from a particular key you can use square
24

25
00:01:53.690 --> 00:01:55.960
brackets after the dictionary name.
25

26
00:01:55.960 --> 00:02:01.890
So let's say D fruit is banana and apple.
26

27
00:02:01.910 --> 00:02:06.260
Now let's say you just wanted to access one of these, for example the first one banana.
27

28
00:02:06.260 --> 00:02:13.910
Then after accessing all the values of this key You put another square brackets and you would say zero.
28

29
00:02:14.210 --> 00:02:15.820
And that gives you banana.
29

30
00:02:15.830 --> 00:02:18.350
And of course you could also say one for Apple.
30

31
00:02:18.500 --> 00:02:24.620
You can try saying 10, but here we're going to get an error and it says list index out of range.
31

32
00:02:24.620 --> 00:02:29.790
That's because there are not so many fruits in this dictionary.
32

33
00:02:30.040 --> 00:02:35.320
Okay so the question is what is the size of this dictionary in python.
33

34
00:02:35.360 --> 00:02:43.250
Now in some sense there's like one two three four five six seven eight nine things inside this dictionary.
34

35
00:02:43.280 --> 00:02:51.050
However, if you ask for the length of the dictionary ,what Python is actually going to return is the number
35

36
00:02:51.140 --> 00:02:53.490
of keys -- that corresponds to two.
36

37
00:02:53.490 --> 00:02:57.350
There's one key for fruit one key for numbers.
37

38
00:02:57.350 --> 00:02:57.610
Okay.
38

39
00:02:57.620 --> 00:03:04.310
So I showed you how to access the items of a particular key this way and then I just want to show you
39

40
00:03:04.310 --> 00:03:10.200
that there is a second way to do this as well. You can type D, or the name of the dictionary, dot get
40

41
00:03:10.940 --> 00:03:17.360
and then in the parentheses, also the name of the key like this.
41

42
00:03:17.360 --> 00:03:21.980
And of course accessing a single element is the same as I showed before.
42

43
00:03:21.980 --> 00:03:22.220
Okay.
43

44
00:03:22.250 --> 00:03:29.450
So I want to show you how to loop through or how to interact with dictionaries inside a for loop.
44

45
00:03:29.450 --> 00:03:36.430
So I'm going to say for items in D, print the items.
45

46
00:03:36.500 --> 00:03:42.520
So now when I press control enter to run the code in this cell, this prints out two sets of things and
46

47
00:03:42.520 --> 00:03:49.250
that's because Python recognizes the length of this dictionary as two. When you have a for loop like this,
47

48
00:03:50.120 --> 00:03:57.410
where the collection item here after the the keyword in is the dictionary then python is going to loop
48

49
00:03:57.440 --> 00:04:00.710
over all of the keys inside that dictionary.
49

50
00:04:00.710 --> 00:04:07.760
So actually maybe I should have used keys like this instead of items... no matter, we get the same result.
50

51
00:04:09.050 --> 00:04:12.200
Now I want to get to the exercise for this video.
51

52
00:04:12.590 --> 00:04:17.770
So the exercise here is basically to implement these three equations using sympy.
52

53
00:04:17.780 --> 00:04:24.830
So X and Y are going to be symbolic variables, so you implement these three equations and then you want
53

54
00:04:24.830 --> 00:04:29.200
to group these into a dictionary where one key in the dictionary
54

55
00:04:29.210 --> 00:04:35.300
are the equations with an X terms -- that would be the first and third -- and the second key in the dictionary
55

56
00:04:35.330 --> 00:04:39.980
is for the equations with the y term, which is actually just this one equation here.
56

57
00:04:39.980 --> 00:04:46.790
And then what you should do is loop over the keys in the dictionary and basically print out a screen
57

58
00:04:46.790 --> 00:04:48.130
that looks like this.
58

59
00:04:48.230 --> 00:04:54.510
So looping through the keys, we get one equation for x and or one key for the equations with X.
59

60
00:04:54.530 --> 00:05:01.790
One key for the equations with Y and then within those keys, you need to set that equation equal
60

61
00:05:01.790 --> 00:05:09.110
to zero like this, and then solve for x or solve for y, and make a nice print out like this.
61

62
00:05:09.110 --> 00:05:10.360
Okay so good luck.
62

63
00:05:10.370 --> 00:05:15.860
This is a relatively challenging exercise compared to some of the previous videos.
63

64
00:05:15.860 --> 00:05:19.320
So take a deep breath, have some patience, and work your way through it.
64

65
00:05:19.430 --> 00:05:20.750
And now when you're ready.
65

66
00:05:20.810 --> 00:05:26.180
I am now going to switch to Python and show you how I solved this exercise.
66

67
00:05:27.420 --> 00:05:27.780
All right.
67

68
00:05:27.810 --> 00:05:30.570
So let me create a new cell down here.
68

69
00:05:30.570 --> 00:05:37.880
First of all, we need to import the sympy toolbox, so import sympy as sym.
69

70
00:05:37.890 --> 00:05:46.020
And then we want to create symbolic variables for x and y, so X comma Y equals sym dot symbols X and
70

71
00:05:46.140 --> 00:05:47.700
Y.
71

72
00:05:47.700 --> 00:05:49.850
And now I want to create a dictionary.
72

73
00:05:49.860 --> 00:05:53.190
I'll use the capital D as well here.
73

74
00:05:53.430 --> 00:06:02.850
So d equals dict and then I'm going to create the first key will be the equations with X and let's set
74

75
00:06:02.850 --> 00:06:08.440
that one equal to the first equation was four times x minus six.
75

76
00:06:08.640 --> 00:06:14.280
And then the second equation was x squared minus nine.
76

77
00:06:14.280 --> 00:06:15.940
So this is the first key.
77

78
00:06:15.990 --> 00:06:20.700
And the list containing the values associated with this key.
78

79
00:06:21.300 --> 00:06:25.120
And then we have the equations with Y.
79

80
00:06:25.320 --> 00:06:27.630
And that was just that one equation.
80

81
00:06:27.630 --> 00:06:31.710
So that was sympy dot sine of Y.
81

82
00:06:32.670 --> 00:06:32.910
All right.
82

83
00:06:32.940 --> 00:06:37.960
So now I'm going to run this cell just to make sure we don't get any errors and let's see.
83

84
00:06:37.980 --> 00:06:39.330
And I'm going to set up a for loop.
84

85
00:06:39.330 --> 00:06:41.940
I'll call this key-i in D.
85

86
00:06:42.940 --> 00:06:52.030
So the first thing I want to do is print out a message, let's say print solutions for equations involving
86

87
00:06:52.570 --> 00:06:58.690
and then this is going to have to be either X or Y depending on whether we're working with this key
87

88
00:06:58.750 --> 00:07:00.400
or this key.
88

89
00:07:00.400 --> 00:07:05.250
So it's a plus and then key i.
89

90
00:07:05.470 --> 00:07:08.830
And then maybe a semicolon in here.
90

91
00:07:09.220 --> 00:07:09.450
Okay.
91

92
00:07:09.460 --> 00:07:13.510
So I'm going to run this now and see how the output looks.
92

93
00:07:13.510 --> 00:07:15.340
Okay so this looks kind of okay.
93

94
00:07:15.340 --> 00:07:21.160
Solutions for equations involving equals with X. So that doesn't really look super nice.
94

95
00:07:21.160 --> 00:07:23.150
I think we can clean this up somehow.
95

96
00:07:23.410 --> 00:07:28.510
The way that I'm going to clean this up is by taking advantage of the fact that first of all this key
96

97
00:07:28.510 --> 00:07:29.980
is a string.
97

98
00:07:29.980 --> 00:07:34.570
And second of all, these keys end with the key variable that I want.
98

99
00:07:34.570 --> 00:07:43.090
So I want to access the last character inside this string and you'll remember from when I introduced
99

100
00:07:43.090 --> 00:07:49.510
you to slicing and indexing that you can get the last character by typing minus one.
100

101
00:07:49.510 --> 00:07:55.750
So now we have solution for equations involving X and those involving Y.
101

102
00:07:55.750 --> 00:07:56.160
Great.
102

103
00:07:56.170 --> 00:07:59.490
So we're doing pretty well, we're off to a good start.
103

104
00:07:59.620 --> 00:08:06.520
Now what I need to do is loop through all of the equations that are inside the values, inside each dictionary
104

105
00:08:06.520 --> 00:08:07.620
key.
105

106
00:08:08.050 --> 00:08:10.740
So that means I need another loop.
106

107
00:08:10.870 --> 00:08:20.650
So how about four and then let's say e q I for the I S equation in D, and then the key corresponding
107

108
00:08:20.650 --> 00:08:22.650
to key i.
108

109
00:08:22.810 --> 00:08:23.060
Okay.
109

110
00:08:23.080 --> 00:08:25.050
So we need to print out a bunch of stuff.
110

111
00:08:25.060 --> 00:08:29.020
I'm actually going to separate this into a few different things.
111

112
00:08:29.020 --> 00:08:35.560
So let's say I'm going to have the left part and actually now I'm going to switch back to the slides for
112

113
00:08:35.560 --> 00:08:42.400
a moment just so I can give you first an idea of how I'm going to go about solving this problem. So you
113

114
00:08:42.400 --> 00:08:46.680
can see that there are like three parts to what we want to print out here.
114

115
00:08:46.680 --> 00:08:52.230
There is the equation itself on the left, and then there's a big space and an arrow and a big space.
115

116
00:08:52.230 --> 00:08:54.520
So this is this I'll call this the left part.
116

117
00:08:54.550 --> 00:08:59.650
This I'll call the middle part, and then the right part, that's where I show the variable and the actual
117

118
00:08:59.650 --> 00:09:00.510
solution.
118

119
00:09:00.550 --> 00:09:00.790
Okay.
119

120
00:09:00.820 --> 00:09:03.760
So that's what I'm going to do now in Python.
120

121
00:09:05.110 --> 00:09:11.130
So we have the left part and that equals the equation which is eqi.
121

122
00:09:11.350 --> 00:09:18.520
And then I want to convert this into latex code, and then I want to add onto it equals zero, and that's
122

123
00:09:18.520 --> 00:09:23.620
because these equations on their own are just implicitly set to zero.
123

124
00:09:23.620 --> 00:09:29.060
They're not actually explicitly including the equals sign and the zero.
124

125
00:09:29.060 --> 00:09:29.330
Okay.
125

126
00:09:29.350 --> 00:09:35.020
So now before moving further, let's just start printing out and make sure that we can get at least 
126

127
00:09:35.020 --> 00:09:40.330
as left part here a signal display and then math and left part.
127

128
00:09:40.330 --> 00:09:44.560
Now I haven't yet imported the display and math function.
128

129
00:09:44.560 --> 00:09:50.940
So let's say from IPython dot display, import display comma.
129

130
00:09:51.010 --> 00:09:52.380
Math.
130

131
00:09:52.740 --> 00:09:58.330
Oh and I get an error here and that's because this should be math with a capital M.
131

132
00:09:58.600 --> 00:09:58.930
All right.
132

133
00:09:58.960 --> 00:10:01.120
So far things are looking good.
133

134
00:10:01.120 --> 00:10:06.340
We have the solution for equation involving X and it's these two equations and the solutions for the
134

135
00:10:06.340 --> 00:10:07.650
equations involving y.
135

136
00:10:07.660 --> 00:10:12.740
And it's this one equation. Looking nice, set to zero.
136

137
00:10:12.900 --> 00:10:13.140
Okay.
137

138
00:10:13.180 --> 00:10:25.990
So now I want the middle part, and that's going to be a space and then a right arrow, so right
138

139
00:10:26.350 --> 00:10:29.970
arrow and then another space.
139

140
00:10:30.100 --> 00:10:30.600
All right.
140

141
00:10:30.610 --> 00:10:36.990
And now I'm going to concatenate the left part by the middle part and see how this looks.
141

142
00:10:37.000 --> 00:10:37.810
All right, good.
142

143
00:10:37.810 --> 00:10:40.860
So we get the equation set to zero.
143

144
00:10:40.900 --> 00:10:46.510
We have the arrow in here and now we need to display the actual solution.
144

145
00:10:46.510 --> 00:10:51.250
So that's going to be the right part and the right part is the actual solution.
145

146
00:10:51.250 --> 00:10:54.700
So I'm going to say sym dot solve.
146

147
00:10:54.700 --> 00:10:56.730
And then a solution to eqi.
147

148
00:10:56.800 --> 00:11:02.140
And then I need to convert this to latex, so sym dot latex like this.
148

149
00:11:02.140 --> 00:11:05.970
And now let's see how this is looking.
149

150
00:11:05.980 --> 00:11:06.260
Okay.
150

151
00:11:06.280 --> 00:11:09.100
So it's getting better, we are getting somewhere.
151

152
00:11:09.130 --> 00:11:11.230
So we have the equations set to zero.
152

153
00:11:11.230 --> 00:11:12.970
We have the solutions.
153

154
00:11:12.970 --> 00:11:18.820
And now I want to write in here explicitly the variable and then the equals sign.
154

155
00:11:18.820 --> 00:11:20.920
So I'm going to put that in this middle part here.
155

156
00:11:20.920 --> 00:11:26.230
So let's say I will use the plus sign here for a string concatenation.
156

157
00:11:26.230 --> 00:11:32.010
I want to say X for these two and y for these two and I've already figured out how to do that here.
157

158
00:11:32.020 --> 00:11:34.320
So copy and paste.
158

159
00:11:35.470 --> 00:11:39.700
And then another string concatenation equals.
159

160
00:11:39.700 --> 00:11:41.190
And then this is all the middle part.
160

161
00:11:41.200 --> 00:11:45.250
And so then the right part is going to be this.
161

162
00:11:45.270 --> 00:11:47.890
And something doesn't look quite right here.
162

163
00:11:47.910 --> 00:11:55.170
So what's actually happening here is that there is no space after the quad and before the letter X or
163

164
00:11:55.170 --> 00:12:02.370
the letter Y and so latex is actually running into trouble because there is no latex keyword for
164

165
00:12:02.370 --> 00:12:03.590
quad X..
165

166
00:12:03.660 --> 00:12:07.080
So we just need an extra space in here.
166

167
00:12:07.900 --> 00:12:09.510
This is looking really good.
167

168
00:12:09.520 --> 00:12:15.350
The only difference compared to what I showed in the slides was that these were indented a little bit.
168

169
00:12:15.610 --> 00:12:19.620
So therefore let's say quad.
169

170
00:12:19.630 --> 00:12:22.830
And I think it was two quads like this.
170

171
00:12:23.110 --> 00:12:25.680
Plus this.
171

172
00:12:25.720 --> 00:12:26.450
All right.
172

173
00:12:26.590 --> 00:12:27.850
This looks really nice.
173

174
00:12:27.880 --> 00:12:30.120
We have the solutions printed out here.
174

175
00:12:30.220 --> 00:12:31.600
The actual solutions.
175

176
00:12:31.600 --> 00:12:33.170
And so on.
176

177
00:12:33.220 --> 00:12:40.510
So in this video you learned about Python dictionaries and you learned how to be patient and persistent
177

178
00:12:40.550 --> 00:12:42.980
when solving difficult code challenges.
178

179
00:12:43.030 --> 00:12:48.070
The key to solving this code challenge, or my approach to solving this code challenge, was to go through
179

180
00:12:48.070 --> 00:12:50.560
methodically and check my results
180

181
00:12:50.560 --> 00:12:56.080
each time I add one or two lines of code. I think that's generally a good way to go about writing
181

182
00:12:56.080 --> 00:12:56.800
code.
182

183
00:12:56.840 --> 00:13:01.450
You know, you just do a little bit at a time and you keep checking your results to make sure that you
183

184
00:13:01.450 --> 00:13:04.000
are slowly but steadily making progress.
