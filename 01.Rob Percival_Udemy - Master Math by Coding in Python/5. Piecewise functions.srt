1
00:00:03,940 --> 00:00:08,200
In this video I'm going to tell you about peace wise functions.

2
00:00:08,200 --> 00:00:14,980
We'll start by talking about what a peace wise function is how to create one inside pie and if you are

3
00:00:14,980 --> 00:00:22,670
not already familiar with X Casey D then I will introduce you to that phenomenon.

4
00:00:23,050 --> 00:00:28,930
So whenever I think of peace wise functions or anything in pieces I often think of this comic it's a

5
00:00:28,930 --> 00:00:34,330
pie chart with the label showing fraction of this image which is white and fraction of this image which

6
00:00:34,330 --> 00:00:35,470
is black.

7
00:00:35,650 --> 00:00:43,570
I think it's a pretty funny take on using visual graphics and statistics to simply point out the obvious.

8
00:00:43,570 --> 00:00:51,550
This comes from a Web site called X Casey D which is a great Web site for all sorts of interesting funny

9
00:00:51,550 --> 00:00:56,850
insightful comics and they'll have this kind of funny looking artistic style.

10
00:00:56,860 --> 00:01:02,540
So it's a little bit wobbly and the characters the text is also a little bit wobbly anyway.

11
00:01:02,590 --> 00:01:05,200
This is not a piece Y's function.

12
00:01:05,200 --> 00:01:08,440
This is a piece Y's function.

13
00:01:08,440 --> 00:01:15,220
A piece Y's function is a function that cannot be expressed using one single expression.

14
00:01:15,220 --> 00:01:20,200
Instead it must be expressed using multiple expressions with different ranges.

15
00:01:20,200 --> 00:01:26,850
So here you see a pretty simple example of a piece Y's function f of x equals zero.

16
00:01:26,860 --> 00:01:28,780
So the function equals zero.

17
00:01:28,780 --> 00:01:34,900
If x is less than or equal to zero and F of X equals minus two X.

18
00:01:34,930 --> 00:01:37,670
If x is greater than zero.

19
00:01:38,020 --> 00:01:46,040
So you can see that this function is not the same expression everywhere in the domain of x.

20
00:01:46,090 --> 00:01:51,400
We can also make a plot of this function a graph of this function and it would look like this.

21
00:01:51,400 --> 00:01:58,270
You can see the function is flat at zero before x equals zero and then after x equals zero the function

22
00:01:58,270 --> 00:02:07,850
goes down according to minus two times X so there's a few different ways of showing piece y as functions.

23
00:02:07,850 --> 00:02:14,570
This is one way sometimes it's also written for X is less than zero instead of if you can also see them

24
00:02:14,570 --> 00:02:15,860
written this way.

25
00:02:15,860 --> 00:02:24,230
So without any English words in here like f or 4 so this says f of x is 0 from minus infinity up to

26
00:02:24,230 --> 00:02:29,060
zero and it's minus 2 x from zero up to plus infinity.

27
00:02:29,090 --> 00:02:32,600
Now of course peace Y is functions are not limited to two pieces.

28
00:02:32,600 --> 00:02:34,610
You can have any number of pieces.

29
00:02:34,610 --> 00:02:42,110
Here's an example of a three piece function so it's similar to this function except the minus two expert

30
00:02:42,530 --> 00:02:51,200
extends only up to X is less than 10 and when x is greater than 10 then we have point 1 times X cubed.

31
00:02:51,200 --> 00:02:53,120
So what does this function look like.

32
00:02:53,120 --> 00:02:59,570
Well I don't have a graph here so therefore I suggest that we switch to Python and make our own graph

33
00:02:59,690 --> 00:03:04,630
of this piece Y's function in this video.

34
00:03:04,630 --> 00:03:12,130
We are going to use the simple simplify and num pi modules the display and math functions in the exercise.

35
00:03:12,130 --> 00:03:13,420
And of course the map.

36
00:03:13,430 --> 00:03:15,220
Plot lib function.

37
00:03:15,370 --> 00:03:19,440
All right let's start by importing a symbolic variable x.

38
00:03:19,510 --> 00:03:29,110
I'm going to write from simple dot ABC import X and now what I'm gonna do is first start by creating

39
00:03:29,110 --> 00:03:37,420
the three pieces so piece 1 with zero piece 2 was minus 2 times X and piece 3 loops that should be a

40
00:03:37,420 --> 00:03:47,540
two piece 3 was point 1 times X cubed which I'm actually going to write as X cubed divided by 10.

41
00:03:47,680 --> 00:03:54,820
Okay so now we need to put them together but we have to put them together in coordination with the conditions

42
00:03:54,850 --> 00:04:00,490
so that is we have to know we have to tell the function in simple there's gonna be a simple function

43
00:04:01,000 --> 00:04:07,480
simply needs to know not only what are the different pieces but also what are the conditions on X for

44
00:04:07,810 --> 00:04:10,150
each piece being valid.

45
00:04:10,150 --> 00:04:13,870
So that gets implemented using a function called piece y.

46
00:04:13,900 --> 00:04:22,060
So some dot piece wise is once with a capital P for some reason and the way that this piece Y's function

47
00:04:22,060 --> 00:04:31,030
works is you specify some number of inputs and each input that you specify has to contain the expression

48
00:04:31,270 --> 00:04:33,300
and the x axis limit.

49
00:04:33,310 --> 00:04:36,020
So let me show you an example for the first piece.

50
00:04:36,070 --> 00:04:41,070
So the first input into this piece Y's function is going to be as a tuple here.

51
00:04:41,080 --> 00:04:50,220
So with parentheses piece 1 comma X less than zero and now simplify and the piece Y's function will

52
00:04:50,230 --> 00:04:55,810
know that when x is less than zero then piece 1 gets evaluated.

53
00:04:55,810 --> 00:04:59,890
And so then we go to the next set and actually let me write the third one first because that one is

54
00:04:59,890 --> 00:05:01,030
a little bit easier.

55
00:05:01,060 --> 00:05:10,830
So piece 3 if x is greater than or equal to 10 okay so then what do we do for the second piece here.

56
00:05:10,840 --> 00:05:13,510
Because this one actually had two conditions.

57
00:05:13,510 --> 00:05:18,200
The first condition was that x is greater than or equal to zero.

58
00:05:18,220 --> 00:05:21,790
And the second condition was that X is less than 10.

59
00:05:22,030 --> 00:05:24,100
So that we do with an ampersand.

60
00:05:24,100 --> 00:05:27,460
So this is going to be expressed as.

61
00:05:27,550 --> 00:05:29,330
So first of all piece too.

62
00:05:29,440 --> 00:05:34,350
And then here we simply write X greater than or equal to zero.

63
00:05:34,480 --> 00:05:38,540
And x is less than 10.

64
00:05:39,010 --> 00:05:39,540
We get an error.

65
00:05:39,550 --> 00:05:45,680
I actually forgot this is supposed to be also in parentheses here.

66
00:05:45,760 --> 00:05:49,330
So each one of these individual pieces has to go in parentheses.

67
00:05:49,330 --> 00:05:56,410
Python needs that basically to know how to associate the end symbol that it's not the end symbol isn't

68
00:05:56,410 --> 00:06:03,080
connecting the zero and the X. It's connecting this expression and this conditional.

69
00:06:03,100 --> 00:06:03,310
Okay.

70
00:06:03,310 --> 00:06:06,150
So now I run that again and we didn't get any errors.

71
00:06:06,160 --> 00:06:07,570
Let's see what this thing looks like.

72
00:06:07,570 --> 00:06:14,010
So I'm just gonna write up F X so you can see that this is a piece Y's object.

73
00:06:14,110 --> 00:06:17,110
And here this is pretty much just what I wrote in here.

74
00:06:17,110 --> 00:06:18,510
This is true here.

75
00:06:18,610 --> 00:06:22,310
And that's because this basically covers the rest of the options.

76
00:06:22,330 --> 00:06:29,770
So if you don't have this option or this conditional I should say or this conditional then piece 3 gets

77
00:06:29,860 --> 00:06:31,260
implemented.

78
00:06:31,550 --> 00:06:38,200
And now to view this function to make a graph of this function I'm going to use him dot Lam defined

79
00:06:38,650 --> 00:06:46,600
to convert this python object into a function that we can evaluate for particular points of X..

80
00:06:46,720 --> 00:06:54,110
So we say lambda phi X comma F X and then let's set our X range to be.

81
00:06:54,320 --> 00:06:59,020
How about minus 3 2.

82
00:06:59,050 --> 00:07:02,170
Well it certainly has to be higher than 10 because of this conditional.

83
00:07:02,170 --> 00:07:03,970
Let's go to maybe 15.

84
00:07:04,120 --> 00:07:07,840
And how about one two three four steps.

85
00:07:07,840 --> 00:07:09,370
Why not.

86
00:07:09,370 --> 00:07:09,620
Okay.

87
00:07:09,640 --> 00:07:11,930
Now we can simply make a plot of this that we want.

88
00:07:12,040 --> 00:07:15,310
Plot X X comma f x x.

89
00:07:15,310 --> 00:07:21,820
And then again as I showed you in previous videos we cannot simply just plot this function.

90
00:07:21,820 --> 00:07:27,310
Instead we have to evaluate this function at these specific points that we are interested in.

91
00:07:27,340 --> 00:07:32,710
So that is X X like this.

92
00:07:33,160 --> 00:07:33,580
All right.

93
00:07:33,610 --> 00:07:36,080
So that looks pretty good although it's kind of hard to see.

94
00:07:36,160 --> 00:07:36,850
I guess you can see.

95
00:07:36,850 --> 00:07:42,940
So it's a straight line here and then it's a very gentle slope downwards and then it suddenly shoots

96
00:07:42,940 --> 00:07:43,390
up.

97
00:07:43,390 --> 00:07:46,260
Maybe this is gonna look a little bit more interpretable.

98
00:07:46,450 --> 00:07:52,570
If I set this boundary piece here to be three let's see how that looks okay.

99
00:07:52,580 --> 00:07:57,410
So that's looking better but I think you know all the interesting stuff is happening around here there's

100
00:07:57,410 --> 00:08:00,880
not too much interesting parts of the function happening around here.

101
00:08:00,910 --> 00:08:06,220
So maybe let's try setting this upper limit of x down to five.

102
00:08:06,260 --> 00:08:06,860
OK.

103
00:08:06,860 --> 00:08:08,340
This looks good.

104
00:08:08,360 --> 00:08:10,060
So here you see the first piece.

105
00:08:10,100 --> 00:08:13,540
The second piece and the third piece up here.

106
00:08:13,640 --> 00:08:20,120
Now there's a particular reason why I had wanted to do this and start with a boundary of ten and an

107
00:08:20,210 --> 00:08:23,520
X limit of 15 and then work my way down.

108
00:08:23,630 --> 00:08:29,450
And the point was to show you that it's often useful in mathematics in particular when graphing functions

109
00:08:29,450 --> 00:08:36,560
in calculus not to show the entire range of the function but instead to zoom in on the interesting bits

110
00:08:36,560 --> 00:08:40,430
where there are more changes happening in the function.

111
00:08:40,430 --> 00:08:46,550
So you know we could plot this from like minus three hundred to plus five hundred and then you don't

112
00:08:46,550 --> 00:08:52,940
really see much of anything it's kind of hard to get a visual sense of the important features of this

113
00:08:52,940 --> 00:08:54,140
function.

114
00:08:54,200 --> 00:08:58,970
So you see that a lot better by zooming into an appropriate range.

115
00:08:58,970 --> 00:09:01,310
So how do you know what an appropriate ranges.

116
00:09:01,340 --> 00:09:06,920
Well you know part of it comes from looking at the boundaries part of it comes from looking at the function

117
00:09:06,950 --> 00:09:16,060
and part of it comes from just a little bit of exploration the exercise for this video is to implement

118
00:09:16,150 --> 00:09:23,500
this piece what is function in Python or in simply print it out in nice latex formatting so actually

119
00:09:23,500 --> 00:09:30,190
it should look like this in your Jupiter eye Python notebook and then you want to make a graph but you

120
00:09:30,190 --> 00:09:33,040
want to make this graph in X case style.

121
00:09:33,130 --> 00:09:36,490
What does that mean to print it out in X KCET style.

122
00:09:36,490 --> 00:09:40,110
Well it means that your graph is actually going to look like this.

123
00:09:40,180 --> 00:09:47,470
It looks kind of funny it's a little wobbly here in there but this is an X KCET comic style of making

124
00:09:47,470 --> 00:09:49,390
graphs in python.

125
00:09:49,390 --> 00:09:56,260
Now I haven't told you how to make these kinds of graphs but it is an option that's built into matte

126
00:09:56,260 --> 00:09:56,860
plot lib.

127
00:09:56,860 --> 00:10:02,470
So with a little bit of ingenuity and a little bit of searching you should be able to figure out how

128
00:10:02,470 --> 00:10:04,990
to make your plot look like this.

129
00:10:04,990 --> 00:10:11,560
All right so pause the video write some code get your screen to show this and to show this.

130
00:10:11,560 --> 00:10:15,070
And now I'm going to switch to Python and show you my solution

131
00:10:17,780 --> 00:10:23,600
Well we certainly need a symbolic variable X but I've already imported one here so I don't need to do

132
00:10:23,600 --> 00:10:24,820
that again.

133
00:10:24,920 --> 00:10:35,930
So let's write f 1 this was piece one that was X cubed and then F two was the log of x.

134
00:10:35,930 --> 00:10:40,000
Now in the slides This was actually written as log base 2.

135
00:10:40,190 --> 00:10:46,770
And so to get log base anything in Python then use the base as a second input.

136
00:10:46,940 --> 00:10:50,780
And you can tell that by looking at the dock string or the help file.

137
00:10:50,780 --> 00:10:56,560
So simple dot log ARG which is the input into the function and then base equals none.

138
00:10:56,570 --> 00:11:02,680
So the default value is None which will actually give you the natural logarithm.

139
00:11:02,730 --> 00:11:05,490
Okay so let's see now we have our two pieces.

140
00:11:05,640 --> 00:11:15,090
And now I'm going to create my function using piece wise and the first piece is f for X is less than

141
00:11:15,090 --> 00:11:18,400
or equal equal to zero.

142
00:11:18,480 --> 00:11:21,830
And the second loops f that should be f 1.

143
00:11:22,050 --> 00:11:28,420
And the second piece which is the second input into the piece Y's function is f 2.

144
00:11:28,740 --> 00:11:37,570
And that is the case for x is greater than 0 and now excel just even run this code.

145
00:11:37,620 --> 00:11:38,030
Okay.

146
00:11:38,070 --> 00:11:40,230
I don't get any errors so that's good.

147
00:11:40,230 --> 00:11:47,640
Now I'm gonna print this out so display math and then printing out this piece Y's function in latex

148
00:11:47,670 --> 00:11:49,620
is actually pretty straightforward.

149
00:11:49,620 --> 00:11:52,290
I'm going to write f of x equals.

150
00:11:52,290 --> 00:11:58,530
And now you could use a substitution and say percent s in here but because we're only adding one additional

151
00:11:58,530 --> 00:12:05,360
object I'm just gonna use the plus sign say plus same dot latex f of x.

152
00:12:05,370 --> 00:12:06,350
All right.

153
00:12:06,450 --> 00:12:13,230
So that looks kind of interesting because in fact what we computed was log base 2.

154
00:12:13,440 --> 00:12:14,570
But what simplify.

155
00:12:14,580 --> 00:12:19,230
And Python printed out was log of x divided by log of 2.

156
00:12:19,250 --> 00:12:22,840
So the natural log of x divided by the natural log of 2.

157
00:12:22,920 --> 00:12:29,580
Now that may look a little bit weird but that actually is correct because log base 2 of something is

158
00:12:29,580 --> 00:12:36,030
equivalent to the natural log of that something divided by the natural log of the base.

159
00:12:36,030 --> 00:12:37,120
In this case too.

160
00:12:37,170 --> 00:12:38,740
So this actually is correct.

161
00:12:38,940 --> 00:12:44,510
And it's also interesting to see how latex and Python chose to format this function.

162
00:12:44,520 --> 00:12:50,270
So it wrote for X is less than or equal to zero and then it wrote otherwise here.

163
00:12:50,280 --> 00:12:51,640
And that's also consistent.

164
00:12:51,650 --> 00:12:58,770
This otherwise with this what we discovered here when we look at how simple is representing this object

165
00:12:58,770 --> 00:13:00,840
that it says true at the end.

166
00:13:00,870 --> 00:13:07,890
So essentially this value of true gets interpreted by late latex as the word otherwise.

167
00:13:08,640 --> 00:13:08,970
OK.

168
00:13:08,970 --> 00:13:10,670
So now we need to make a plus.

169
00:13:10,710 --> 00:13:12,000
So how do we do this.

170
00:13:12,030 --> 00:13:13,770
I'm first going to make a plot.

171
00:13:13,870 --> 00:13:17,850
J You know just like a normal plot just to make sure that we're on the right track.

172
00:13:17,850 --> 00:13:23,290
So this is now all code that you have seen before.

173
00:13:23,600 --> 00:13:25,420
P L T dot show.

174
00:13:25,430 --> 00:13:25,690
Okay.

175
00:13:25,710 --> 00:13:27,320
So here we get the plot.

176
00:13:27,340 --> 00:13:38,100
Whoops I haven't actually remade this function yet I need to do f x x equals sin Lem defy and x and

177
00:13:38,220 --> 00:13:40,200
f of x.

178
00:13:40,200 --> 00:13:41,760
Okay there you go.

179
00:13:41,760 --> 00:13:44,140
Now it's interesting to see that we get a warning here.

180
00:13:44,150 --> 00:13:51,330
There's a warning about complex numbers that says casting complex values to real discards the imaginary

181
00:13:51,330 --> 00:13:51,980
part.

182
00:13:51,990 --> 00:13:54,480
Now this is actually not a problem.

183
00:13:54,540 --> 00:14:01,110
What python is concerned about is that it sees that there is a log in the function and then we are requesting

184
00:14:01,170 --> 00:14:06,510
negative values of x that in theory could go into the log function.

185
00:14:06,510 --> 00:14:12,930
And of course the log of a negative number is is not defined on the real axis.

186
00:14:12,960 --> 00:14:18,240
So you need complex numbers however because this is a piece Y is function.

187
00:14:18,240 --> 00:14:25,580
We're not actually evaluating the log for any negative points or even any non positive points so this

188
00:14:25,580 --> 00:14:28,980
is a warning Python's giving you a warning but it's totally fine.

189
00:14:29,030 --> 00:14:31,390
It's nothing to be concerned about.

190
00:14:31,400 --> 00:14:35,390
All right so I want to make this part look a little bit nicer.

191
00:14:35,450 --> 00:14:45,650
So I say set the X limit to be from minus two to plus two and the Y limit to go from minus 10 to plus

192
00:14:45,710 --> 00:14:46,190
three.

193
00:14:46,190 --> 00:14:51,590
Again I'm just zooming in to the interesting part of the function where it's changing the most.

194
00:14:52,100 --> 00:14:52,360
OK.

195
00:14:52,370 --> 00:14:56,070
So this is definitely not an x k C.D. style plot.

196
00:14:56,090 --> 00:14:58,850
How do we make an x k C.D. style plot.

197
00:14:58,850 --> 00:15:06,160
The way to do that is to activate P L T dot x k C.D. And then parentheses like this.

198
00:15:06,150 --> 00:15:08,090
So you basically just run this function.

199
00:15:08,090 --> 00:15:14,900
However before running this function I have to warn you this is a little bit dangerous to run this function

200
00:15:14,990 --> 00:15:16,970
exactly just like this.

201
00:15:16,970 --> 00:15:23,090
And that's because once you've activated this X Casey D function is going to remain active and it's

202
00:15:23,090 --> 00:15:28,190
going to affect all of your future plots until it gets deactivated.

203
00:15:28,220 --> 00:15:37,790
So therefore a better approach to doing this in Python is to say with plot X case C D and then tab indent

204
00:15:38,600 --> 00:15:45,430
or have four spaces before only the command that you want to be associated with this function.

205
00:15:45,440 --> 00:15:51,770
So this is a python keyword you can see it's printed in bold face green font.

206
00:15:51,770 --> 00:15:59,450
So now I can run this and that means when I go back and run previous plots it's not going to be drawn

207
00:15:59,450 --> 00:16:01,670
using the x KCET style.

208
00:16:01,700 --> 00:16:02,020
All right.

209
00:16:02,030 --> 00:16:06,420
So that is pretty neat looking in this video.

210
00:16:06,430 --> 00:16:12,230
I talked about peace wise functions and implementing peace wise functions in side by.

211
00:16:12,340 --> 00:16:16,650
If you weren't already familiar with X KCET then congratulations.

212
00:16:16,660 --> 00:16:20,790
Now you are and you saw how to make pretty interesting.

213
00:16:20,840 --> 00:16:25,990
Billy looking plots in python using the x KCET map plot lib style.
