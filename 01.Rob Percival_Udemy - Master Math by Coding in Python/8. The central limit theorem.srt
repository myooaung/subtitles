1
00:00:03,670 --> 00:00:08,740
In this video you are going to learn about the central limit theorem.

2
00:00:08,740 --> 00:00:14,620
That's a pretty important theorem in statistics and machine learning and other aspects of data science

3
00:00:15,130 --> 00:00:18,010
and I will also give you a little bit of an introduction.

4
00:00:18,010 --> 00:00:22,860
So a pretty quick simple intro to the seaborne module.

5
00:00:23,020 --> 00:00:29,380
And that's basically something that people used to make really nice looking graphics in Python.

6
00:00:29,380 --> 00:00:35,230
So we'll do a little bit with Seabourn and in the next video then you'll see even more applications

7
00:00:35,230 --> 00:00:36,720
of seaborne.

8
00:00:36,790 --> 00:00:37,080
OK.

9
00:00:37,120 --> 00:00:44,260
So the central limit theorem basically says that random samples from independent variables will tend

10
00:00:44,260 --> 00:00:51,430
towards a normal distribution or a Gaussian distribution even if the variables themselves are not normally

11
00:00:51,430 --> 00:00:52,260
distributed.

12
00:00:52,300 --> 00:00:52,580
Okay.

13
00:00:52,600 --> 00:00:54,550
So that is quite a mouthful.

14
00:00:54,700 --> 00:00:59,030
Here you can see an example of the central limit theorem at work.

15
00:00:59,500 --> 00:01:04,580
So what you see on the top row is two sets of numbers.

16
00:01:04,570 --> 00:01:05,970
So this is a sine wave.

17
00:01:05,980 --> 00:01:09,490
And this is a uniformly distributed set of numbers.

18
00:01:09,520 --> 00:01:10,980
And here you can see the histogram.

19
00:01:10,990 --> 00:01:14,320
So this is what the histogram of a sine wave looks like.

20
00:01:14,320 --> 00:01:19,460
You can see it's kind of flat towards the middle and then it comes up at the lower edge.

21
00:01:19,480 --> 00:01:20,690
And at the upper edge.

22
00:01:20,860 --> 00:01:27,310
And basically this corresponds to the peak up here and the trough down here.

23
00:01:27,580 --> 00:01:33,760
And to interpret this you can actually think back to the video a couple videos ago where we had the

24
00:01:33,760 --> 00:01:40,720
exercise of showing the probability distribution of certain mathematical functions that was X and X

25
00:01:40,720 --> 00:01:42,660
squared and X cubed.

26
00:01:42,700 --> 00:01:48,220
So basically the sine wave gets a lot denser as it gets towards minus 1 and plus 1.

27
00:01:48,220 --> 00:01:51,850
And that's why you see these clusters in the histogram here.

28
00:01:52,120 --> 00:01:57,520
Anyway the point is that this is a strongly non Gaussian distribution.

29
00:01:57,520 --> 00:02:03,620
This is not even remotely a little bit kind of like a galaxy and is totally anti Gaussian.

30
00:02:03,640 --> 00:02:10,690
Here we have just some uniformly distributed numbers with a distribution that is essentially flat.

31
00:02:10,690 --> 00:02:11,860
In theory it's flat.

32
00:02:11,890 --> 00:02:14,770
But then of course we are just randomly sampling.

33
00:02:14,860 --> 00:02:18,310
So it looks like there's a bunch of roughage in here.

34
00:02:18,400 --> 00:02:18,810
Okay.

35
00:02:18,820 --> 00:02:23,400
And then what I do here is literally just combine these two signals.

36
00:02:23,410 --> 00:02:30,370
So I say the sine wave plus this uniform noise together makes this kind of like fuzzy looking sine wave

37
00:02:30,370 --> 00:02:31,180
like this.

38
00:02:31,330 --> 00:02:37,840
And now it turns out that the histogram the distribution of values of this combined signal which is

39
00:02:37,840 --> 00:02:44,140
literally the sine wave plus the uniform distributed numbers looks like it's not exactly formally a

40
00:02:44,140 --> 00:02:49,290
gaussian but it's tending towards a normal or Gaussian distribution.

41
00:02:49,810 --> 00:02:56,890
And that is pretty remarkable because neither of these distributions on their own looks anything like

42
00:02:56,950 --> 00:02:58,820
a normal distribution.

43
00:02:58,900 --> 00:03:03,660
And this is essentially the central limit theorem at work.

44
00:03:03,730 --> 00:03:05,500
Now there are some qualifications.

45
00:03:05,500 --> 00:03:13,510
So just by combining different distributions you don't necessarily get a normal distribution.

46
00:03:13,510 --> 00:03:16,780
It depends on the number of values that you're sampling.

47
00:03:16,780 --> 00:03:19,980
It also depends on suitable normalization.

48
00:03:19,990 --> 00:03:23,070
So the values have to be roughly in the same scale.

49
00:03:23,070 --> 00:03:27,090
There needs to be some appropriate normalization in order for this to work.

50
00:03:27,250 --> 00:03:34,180
But this is the idea of the central limit theorem that when you combine you randomly sample values from

51
00:03:34,210 --> 00:03:40,820
many different kinds of distributions there are some altogether is going to tend towards a Galilean

52
00:03:40,900 --> 00:03:42,210
distribution.

53
00:03:42,220 --> 00:03:43,780
Let's check this out in code.

54
00:03:43,780 --> 00:03:49,150
Essentially what we're going to do in Python is reproduce this graph and then we can manipulate some

55
00:03:49,150 --> 00:03:51,750
of these distributions a bit.

56
00:03:52,300 --> 00:03:59,920
We will use num pi and map plot lib and also as I mentioned seaborne but we'll get to that later.

57
00:04:00,010 --> 00:04:00,210
OK.

58
00:04:00,220 --> 00:04:06,430
So what I'm gonna do is specify that we are going to create two signals with two thousand points each

59
00:04:06,910 --> 00:04:16,520
signal one is going to be a sine wave and I'll set that to be linearly space numbers from 0 to six pi

60
00:04:16,530 --> 00:04:25,930
so six times num pi it up pi and we want any of these guys and then Sig 2 is going to be known pi dot

61
00:04:25,930 --> 00:04:33,490
random numbers and we want a uniform distribution end of them and then I'm going to scale this up by

62
00:04:33,490 --> 00:04:35,590
2 and subtract 1.

63
00:04:35,590 --> 00:04:43,360
So this is going to give us a uniform distribution of numbers that has an average of 0 and a range from

64
00:04:43,420 --> 00:04:46,110
minus one to plus 1.

65
00:04:46,130 --> 00:04:55,370
Now I'm going to generate some plot so let's see I will start by plotting the individual signals and

66
00:04:55,400 --> 00:04:58,180
their distributions.

67
00:04:58,580 --> 00:05:03,100
So let's see fig comma X equals pelted subplot.

68
00:05:03,130 --> 00:05:09,710
So we need this subplot geometry to be two by three because we want two rows the top row will correspond

69
00:05:09,710 --> 00:05:15,710
to the signals and the bottom row will correspond to the distributions or the histogram and then the

70
00:05:15,710 --> 00:05:24,020
columns will correspond to the three signals so these two signals and then the combined signals so two

71
00:05:24,050 --> 00:05:31,070
comma three and I will set the figure size to be equal to ten by four.

72
00:05:31,100 --> 00:05:36,680
Which is just some numbers that I played around with the bit before starting the recording and they

73
00:05:36,740 --> 00:05:38,380
generally look good.

74
00:05:38,480 --> 00:05:39,070
All right.

75
00:05:39,680 --> 00:05:49,760
So now in the first row and first column I'm going to plot the signal so call that Sig 1 and let's see.

76
00:05:49,760 --> 00:05:58,610
I will set the title to be so set title and this is a sine wave so I'm going to set the title to be

77
00:05:58,610 --> 00:05:59,890
sine wave.

78
00:05:59,900 --> 00:06:01,460
Now we want the histogram.

79
00:06:01,490 --> 00:06:10,900
That is going to be in the second row still in the first column and that's going to be hist of SIG 1.

80
00:06:11,060 --> 00:06:14,230
And let's try 100 bins.

81
00:06:14,300 --> 00:06:14,720
All right.

82
00:06:14,750 --> 00:06:16,610
So let's see.

83
00:06:16,610 --> 00:06:22,940
I'm going to run this code already just to make sure that I haven't made any mistakes so far it's looking

84
00:06:22,940 --> 00:06:23,260
good.

85
00:06:23,270 --> 00:06:27,890
Although it's a little bit crowded we're going to need to figure out a way to make to clean this plot

86
00:06:27,890 --> 00:06:29,150
up a little bit.

87
00:06:29,210 --> 00:06:29,440
OK.

88
00:06:29,450 --> 00:06:37,790
So now that was the first column for the sine wave and now I'm going to copy and paste this code for

89
00:06:37,790 --> 00:06:38,890
the second column.

90
00:06:38,920 --> 00:06:49,840
So all of these indices change to 1 and this changes to Sig 2 and let's call this uniform you need firm

91
00:06:50,410 --> 00:06:52,600
numbers.

92
00:06:53,000 --> 00:06:53,750
All right.

93
00:06:53,750 --> 00:06:56,120
This is also looking good.

94
00:06:56,630 --> 00:07:02,040
I think actually I'm gonna change this from a line plot into plotting.

95
00:07:02,270 --> 00:07:03,190
Let's try dots.

96
00:07:03,200 --> 00:07:04,940
Let's see how that looks.

97
00:07:04,940 --> 00:07:05,190
OK.

98
00:07:05,250 --> 00:07:06,530
So that's pretty good.

99
00:07:06,600 --> 00:07:13,280
And I think I'll even make it look a little bit nicer by setting the alpha to be maybe point three.

100
00:07:13,310 --> 00:07:17,050
So this is the transparency set to be 30 percent.

101
00:07:18,020 --> 00:07:18,250
OK.

102
00:07:18,290 --> 00:07:21,540
So these are for the two individual signals.

103
00:07:21,650 --> 00:07:26,410
And now we need another signal that is literally just the addition of these two.

104
00:07:26,440 --> 00:07:28,600
So maybe I'll call that comedy.

105
00:07:28,670 --> 00:07:32,600
So comedy equals Sig one plus Sig two.

106
00:07:32,600 --> 00:07:36,910
Now notice here that I'm not combining the histogram.

107
00:07:37,100 --> 00:07:44,150
I'm combining these signals and then later on I'm going to combine or create the histogram from the

108
00:07:44,180 --> 00:07:45,760
combined signal.

109
00:07:45,830 --> 00:07:51,410
So let's see I'll do a copy and paste again actually just paste I did the copying.

110
00:07:51,470 --> 00:08:00,290
So now this is the third column and this is now comedy and comedy and which we call this maybe I'll

111
00:08:00,290 --> 00:08:04,880
call this the combined signal.

112
00:08:04,880 --> 00:08:09,920
All right so there you see the combined signal in the.

113
00:08:10,040 --> 00:08:14,780
Maybe this is the time domain this maybe this is like at a time varying signal.

114
00:08:14,780 --> 00:08:21,640
And here you see its distribution and it is tending towards a normal or Gaussian distribution.

115
00:08:21,830 --> 00:08:28,570
So just to make this plot look a little bit nicer I would like to get rid of all of these X ticks and

116
00:08:28,600 --> 00:08:29,440
Y texts.

117
00:08:29,450 --> 00:08:30,830
So how can we do that.

118
00:08:31,190 --> 00:08:42,790
Well the direct way to do that is to say x 0 0 dots set X ticks and then I'm gonna set them to be empty

119
00:08:43,420 --> 00:08:50,050
so you can see that that gets rid of the X ticks on this plot and then we also have to repeat that for

120
00:08:50,050 --> 00:08:53,850
the Y ticks.

121
00:08:54,280 --> 00:08:57,940
So that deals with this panel over here.

122
00:08:57,940 --> 00:09:01,090
But now you know it's a bit tedious to have to deal with all six of these.

123
00:09:01,090 --> 00:09:05,590
I'm gonna need basically 12 lines of code to get rid of all of these ticks.

124
00:09:05,590 --> 00:09:07,420
So what is a better way to do this.

125
00:09:07,450 --> 00:09:09,790
Well we can put this in a loop.

126
00:09:09,790 --> 00:09:19,360
We can say like for i in range of 2 and then set this to be I

127
00:09:24,020 --> 00:09:29,420
but you can see at this also isn't really such a great way to solve this because now essentially we

128
00:09:29,420 --> 00:09:31,590
need to have a double loop in here.

129
00:09:31,640 --> 00:09:38,990
Wouldn't it be nicer if we could just loop through all of the elements in the variable x for axis.

130
00:09:39,050 --> 00:09:39,430
Let's see.

131
00:09:39,440 --> 00:09:47,240
So we can try doing something like this to say for AI in X and then set this just to be ice and now

132
00:09:47,240 --> 00:09:54,470
we're not looping over numbers we are looping over elements in X however we are getting an error here

133
00:09:55,010 --> 00:10:01,490
and this error essentially comes from the shape of the axis variable is variable x.

134
00:10:01,640 --> 00:10:05,180
So let me just give you a better sense of what this what I mean by this.

135
00:10:05,210 --> 00:10:09,650
So I'm gonna say print num pi dot shape of x.

136
00:10:09,650 --> 00:10:15,480
Now of course that's still going to give an error but here we see that this variable x is a matrix.

137
00:10:15,480 --> 00:10:17,280
It's not a vector.

138
00:10:17,390 --> 00:10:23,870
So what we want to do in fact is write code that looks something like this except that it has to loop

139
00:10:23,870 --> 00:10:27,020
through all the elements in the matrix.

140
00:10:27,020 --> 00:10:35,540
So all six of the elements in the matrix A X and so to do this I'm going to apply a procedure that's

141
00:10:35,600 --> 00:10:40,790
in mathematics and linear algebra is often called vector ization here in Python.

142
00:10:40,790 --> 00:10:42,260
It's called flatten.

143
00:10:42,290 --> 00:10:46,250
So I'm gonna write num pi dot matrix dot flatten.

144
00:10:48,110 --> 00:10:51,740
And actually you know I should show you what this will look like now.

145
00:10:51,750 --> 00:11:01,680
So I'm going to copy this and paste this in here so now you see the size of the flattened version of

146
00:11:01,680 --> 00:11:05,430
this variable x is now six elements.

147
00:11:05,430 --> 00:11:08,250
It's a vector with six elements.

148
00:11:08,250 --> 00:11:11,930
So that corresponds to one two three four five six.

149
00:11:12,030 --> 00:11:17,580
And then we can loop through all of these and just have two lines of code to get rid of the X sticks

150
00:11:17,640 --> 00:11:19,820
and the Y ticks.

151
00:11:20,040 --> 00:11:20,550
Very nice.

152
00:11:20,580 --> 00:11:25,770
So this is all pretty interesting you learned a little bit about code a little bit about generating

153
00:11:25,770 --> 00:11:30,150
plots modifying plots and of course a bit about the central limit theorem.

154
00:11:30,210 --> 00:11:36,420
What I want to do now is take a moment to show you that it's not necessarily trivial that this distribution

155
00:11:36,720 --> 00:11:41,660
will tend towards a gaussian just because we are summing up a bunch of numbers.

156
00:11:41,670 --> 00:11:49,290
So for example let's say let's imagine that the two signals had a different range.

157
00:11:49,350 --> 00:11:53,660
I'm going to just divide this signal two by 10.

158
00:11:53,730 --> 00:11:57,480
Now that doesn't change the shape of the uniform distribution.

159
00:11:57,480 --> 00:12:02,500
It doesn't change the shape of this distribution here but you can see the combined signal.

160
00:12:02,520 --> 00:12:08,310
Now looks a lot more like a sine wave and then distribution also looks a lot more like the distribution

161
00:12:08,310 --> 00:12:14,310
of a sine wave it doesn't really look like a galaxy and although you can see you know when you compare

162
00:12:14,940 --> 00:12:20,460
this distribution or the shape of this distribution to the shape of this distribution this one I don't

163
00:12:20,460 --> 00:12:20,660
know.

164
00:12:20,670 --> 00:12:26,300
Is it fair to say that this is tending towards a Gaussian distribution anyway.

165
00:12:26,310 --> 00:12:32,940
So there are some constraints there are some assumptions for the central limit theorem to work.

166
00:12:32,940 --> 00:12:39,660
And one of those assumptions is that the data are all suitably normalized or in the same scale.

167
00:12:39,660 --> 00:12:40,040
All right.

168
00:12:40,050 --> 00:12:46,470
The last thing that I would like to do here is to introduce you briefly to the Seabourn module.

169
00:12:46,650 --> 00:12:56,370
So the Seabourn module it's called sea born and it's often abbreviated as S and S so import seaborne

170
00:12:56,490 --> 00:12:58,020
as s and s.

171
00:12:58,080 --> 00:13:04,650
And essentially what people mostly use the Seabourn module for is to produce plots that are essentially

172
00:13:04,650 --> 00:13:10,880
showing this information but look a little bit different and they look a little bit nicer I think.

173
00:13:10,980 --> 00:13:20,880
So I'm going to activate the Seabourn set of default visualization schemes by typing S.A. dot set and

174
00:13:20,880 --> 00:13:23,780
then I'm going to type S.A. dot dist plot.

175
00:13:23,790 --> 00:13:31,390
So this stands for distribution plot and we want to make a distribution of the signal with one bin.

176
00:13:31,430 --> 00:13:37,770
So it's going to look a little bit like this except not quite exactly it's gonna look a little bit cooler

177
00:13:40,610 --> 00:13:41,480
and oh yeah.

178
00:13:41,480 --> 00:13:42,940
This wasn't called signal.

179
00:13:42,950 --> 00:13:45,820
It was called Camby of course.

180
00:13:45,890 --> 00:13:52,670
So you can see that the thin lines here these thin vertical lines are the same as the vertical lines

181
00:13:52,670 --> 00:13:52,910
here.

182
00:13:52,910 --> 00:13:54,750
So the same as the bars here.

183
00:13:54,960 --> 00:14:01,360
And what we also have from this distribution plot is an overlay of the lines and this is essentially

184
00:14:01,360 --> 00:14:05,070
a smooth version of this histogram.

185
00:14:05,150 --> 00:14:11,060
It's called a kernel density estimate her and I'm not going to talk much more about that in this video

186
00:14:11,540 --> 00:14:16,940
but you can also just see that a lot of the visual aesthetic aspects look a bit different although the

187
00:14:16,940 --> 00:14:22,690
information conveyed in this plot in this plot is fundamentally the same.

188
00:14:23,570 --> 00:14:30,470
In this video you learned an introduction to the central limit theorem and you saw an example of the

189
00:14:30,470 --> 00:14:32,990
central limit theorem in Python.

190
00:14:33,110 --> 00:14:40,220
There is of course an exercise associated with this video and the exercise involves producing a graph

191
00:14:40,250 --> 00:14:41,060
that looks like this.

192
00:14:41,060 --> 00:14:47,570
This will allow you to explore the central limit theorem in a little bit more detail but that is the

193
00:14:47,570 --> 00:14:49,990
main topic for the next video.

194
00:14:50,000 --> 00:14:51,530
So keep watching.
