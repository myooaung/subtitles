0
1
00:00:03,740 --> 00:00:10,310
In this video you are going to learn about matrices and about learning how to work with matrices in
1

2
00:00:10,310 --> 00:00:17,200
Python. Matrices are super important for mathematical programming and scientific programming.
2

3
00:00:17,210 --> 00:00:21,570
So this video is going to be a great introduction to matrices.
3

4
00:00:21,590 --> 00:00:24,440
Now let's start off with a little bit of terminology.
4

5
00:00:24,440 --> 00:00:32,450
When I say the matrix I'm not actually referring to this old movie from the 90s. The sequels were admittedly
5

6
00:00:32,450 --> 00:00:36,600
a little bit questionable, but the original movie was great. Anyway....
6

7
00:00:36,800 --> 00:00:42,170
This is not what I'm referring to when I talk about The Matrix or matrices.
7

8
00:00:42,290 --> 00:00:48,020
In fact what I'm referring to is something that's maybe a little bit less exciting, less entertaining,
8

9
00:00:48,050 --> 00:00:54,610
but much more important. A Matrix is simply an ordered set of numbers.
9

10
00:00:54,650 --> 00:00:57,630
Here you see two examples of matrices.
10

11
00:00:57,770 --> 00:01:02,570
You can see that there are rows and there are columns of numbers in this matrix.
11

12
00:01:02,610 --> 00:01:05,140
There's more columns and fewer rows.
12

13
00:01:05,150 --> 00:01:06,290
And, well, here as well.
13

14
00:01:06,770 --> 00:01:13,910
And sometimes you see matrices referred to more abstractly just by using these brackets here and having
14

15
00:01:13,910 --> 00:01:18,310
a little bit of discoloration inside. The word ordered
15

16
00:01:18,320 --> 00:01:19,370
here is important.
16

17
00:01:19,370 --> 00:01:23,660
So these two matrices are totally distinct from each other.
17

18
00:01:23,660 --> 00:01:25,190
These are not the same matrix.
18

19
00:01:25,190 --> 00:01:27,490
They do contain all the same numbers.
19

20
00:01:27,500 --> 00:01:30,650
So the set of numbers is the same in this matrix.
20

21
00:01:30,650 --> 00:01:34,600
and in this matrix, but I've swapped the one and the four here.
21

22
00:01:34,610 --> 00:01:38,030
So these two are not the same matrix.
22

23
00:01:38,030 --> 00:01:44,420
If you are studying matrices then you're probably studying linear algebra. Linear Algebra is one of my
23

24
00:01:44,420 --> 00:01:47,590
favorite topics in mathematics.
24

25
00:01:47,690 --> 00:01:49,010
It's beautiful.
25

26
00:01:49,040 --> 00:01:56,060
It links between algebra and geometry really nicely, and linear algebra is also really important for
26

27
00:01:56,120 --> 00:01:58,850
modern applications. Linear algebra
27

28
00:01:58,880 --> 00:02:05,660
really all starts from the study of matrices, Working with matrices, operations on matrices, storing data
28

29
00:02:05,690 --> 00:02:12,250
in matrices, and -- importantly -- extracting information that's embedded into a matrix.
29

30
00:02:12,440 --> 00:02:18,160
Linear Algebra is really important for Data Science and machine learning and artificial intelligence
30

31
00:02:18,170 --> 00:02:20,000
computer graphics and so on.
31

32
00:02:20,060 --> 00:02:27,260
Basically anything that's digital is built on linear algebra and linear algebra all starts from this
32

33
00:02:27,260 --> 00:02:36,110
very simple concept of putting numbers into rows and columns in a matrix. Matrices are typically referred
33

34
00:02:36,110 --> 00:02:38,680
to by uppercase letters.
34

35
00:02:38,690 --> 00:02:47,300
So you might see the letter A referring to this matrix. As I mentioned, matrices have rows and they have
35

36
00:02:47,300 --> 00:02:53,810
columns going up and down so the rows go left and right the columns go up and down. When referring to
36

37
00:02:53,810 --> 00:02:56,910
individual elements inside of a matrix,
37

38
00:02:57,020 --> 00:03:01,810
you always index the matrix by the row first and then the column.
38

39
00:03:01,820 --> 00:03:09,710
So for example, the element in Matrix a -- notice when referring to a whole matrix you typically use an
39

40
00:03:09,740 --> 00:03:15,440
uppercase letter and for an individual element of a matrix you would use a lowercase letter --
40

41
00:03:15,650 --> 00:03:20,640
so the element in the second row and the first column is 0.
41

42
00:03:20,690 --> 00:03:25,220
So the second row and first column is 0.
42

43
00:03:25,220 --> 00:03:31,520
Here's how you would say that: the element in the second row in the first column of matrix A. So it
43

44
00:03:31,550 --> 00:03:35,550
always gets indexed by row and then by column.
44

45
00:03:35,570 --> 00:03:41,420
Now this is something that creates a little bit of confusion initially in Python and that's because
45

46
00:03:41,420 --> 00:03:48,630
Python starts counting and starts indexing at 0. So here we are in Python.
46

47
00:03:48,630 --> 00:03:56,860
I have already imported the sympy and numpy modules, and the display and math functions from the
47

48
00:03:57,070 --> 00:03:59,090
python dot display module.
48

49
00:03:59,150 --> 00:04:08,080
OK so to create a matrix you specify the matrix each row at a time and the rows have to be encased inside
49

50
00:04:08,080 --> 00:04:09,070
square brackets.
50

51
00:04:09,100 --> 00:04:12,920
So for example I can say one comma two.
51

52
00:04:13,000 --> 00:04:19,840
So this will create the first row and if I want a second row then I use a comma and then I write three
52

53
00:04:20,110 --> 00:04:21,690
comma four.
53

54
00:04:21,760 --> 00:04:26,130
So this is the first row and this is the second row.
54

55
00:04:26,170 --> 00:04:29,590
Now this is not quite enough to create a matrix.
55

56
00:04:29,620 --> 00:04:34,860
And that's because Python doesn't yet know that these two things go together.
56

57
00:04:34,870 --> 00:04:42,730
So therefore we actually need another set of square brackets to go around each of these rows.
57

58
00:04:42,820 --> 00:04:49,180
So it may look a little confusing at first because of all of these square brackets lying around, but
58

59
00:04:49,180 --> 00:04:54,940
the outermost square bracket indicates that we are creating a matrix and then these inner brackets are
59

60
00:04:54,940 --> 00:04:57,600
for each individual row.
60

61
00:04:57,760 --> 00:05:03,100
So let's see what this looks like that looks like this.
61

62
00:05:03,100 --> 00:05:04,730
Now this turns out to be.
62

63
00:05:04,810 --> 00:05:07,030
I'll show you what class this is.
63

64
00:05:07,030 --> 00:05:08,690
This is actually a list.
64

65
00:05:08,710 --> 00:05:10,440
It's a list of numbers.
65

66
00:05:10,570 --> 00:05:15,130
But we want this to be represented as a matrix.
66

67
00:05:15,130 --> 00:05:24,670
And so to do that we actually need to use a function in numpy called np dot array. That's going
67

68
00:05:24,670 --> 00:05:29,500
to convert this list into a numpy array.
68

69
00:05:29,500 --> 00:05:32,410
It's an n d array for n dimensional array.
69

70
00:05:32,440 --> 00:05:36,710
So that's what a matrix is stored as.
70

71
00:05:36,740 --> 00:05:38,550
So now I can type.
71

72
00:05:38,550 --> 00:05:40,070
Print a.
72

73
00:05:40,130 --> 00:05:45,310
And now here you see the same numbers but they're arranged according to rows.
73

74
00:05:45,480 --> 00:05:50,490
And now what I'm going to do next is display this a little bit nicer using latex.
74

75
00:05:50,510 --> 00:05:53,840
So let's say display and then math.
75

76
00:05:53,840 --> 00:06:01,460
And now we convert this matrix into latex code using sym dot latex.
76

77
00:06:01,470 --> 00:06:01,930
All right.
77

78
00:06:01,950 --> 00:06:06,390
I forgot that we need to convert this from numpy into sympy.
78

79
00:06:06,870 --> 00:06:10,960
So to convert something into sympy we use sympify.
79

80
00:06:11,310 --> 00:06:16,050
And this is a function that I've introduced you to before.
80

81
00:06:16,050 --> 00:06:24,240
So we have our matrix A that's stored as a numpy array, and then we convert it into a sympy object
81

82
00:06:24,270 --> 00:06:31,050
using the sympify function and then we get latex code corresponding to that sympy object and
82

83
00:06:31,050 --> 00:06:32,940
then display that here.
83

84
00:06:32,970 --> 00:06:40,320
So now you see this nice looking matrix, where the first row is one two, the second row is three four.
84

85
00:06:40,320 --> 00:06:46,290
The next thing I want to show you is how to create an empty matrix, or a matrix of all zeros.
85

86
00:06:46,350 --> 00:06:54,120
So I'm going to use a function called n p, numpy dot zeros. And the way this function works is that
86

87
00:06:54,120 --> 00:06:57,440
you can input sizes of the matrix.
87

88
00:06:57,450 --> 00:07:04,030
So let's say we want a four by six matrix and it's going to be a four by six matrix of zeros.
88

89
00:07:04,060 --> 00:07:06,910
So there are four rows and six columns.
89

90
00:07:06,910 --> 00:07:13,200
So you see one two three four rows six columns and these are all zeros because they use the function
90

91
00:07:13,290 --> 00:07:14,470
zeros.
91

92
00:07:14,820 --> 00:07:17,510
So let's set this equal to a variable.
92

93
00:07:17,510 --> 00:07:21,420
So I will say mat equals numpy zeros.
93

94
00:07:21,600 --> 00:07:28,800
Then we can see what that looks like and now what we can do is assign different numbers to individual
94

95
00:07:28,800 --> 00:07:31,140
elements inside this matrix.
95

96
00:07:31,140 --> 00:07:37,630
So for example, let's say I want to set the element in row 0 and column 1.
96

97
00:07:37,670 --> 00:07:44,900
Now remember because of Python indexing this actually means the first row and the second column -- equals
97

98
00:07:44,910 --> 00:07:46,780
how about... let's make it the number two.
98

99
00:07:47,370 --> 00:07:49,910
So now let's see what mat looks like.
99

100
00:07:49,910 --> 00:07:56,220
So now you can see it's almost all zeros, it's almost a matrix full of zeros, except for this one element
100

101
00:07:56,220 --> 00:07:58,300
here, which is the number two.
101

102
00:07:58,380 --> 00:08:05,300
And now I can specify, let's say 2 and 4 and I'll set that to be... how about 7.
102

103
00:08:05,850 --> 00:08:11,940
So now what I've done is specify that the third row and the Fifth Column, which is this element over
103

104
00:08:11,940 --> 00:08:14,190
here, becomes number seven.
104

105
00:08:14,190 --> 00:08:21,030
Now in this case we lost the two that I previously specified, because this matrix got re initialized
105

106
00:08:21,060 --> 00:08:22,380
to zeros.
106

107
00:08:22,650 --> 00:08:32,280
So let's try adding adding this back in and say 0,1 equals 2.
107

108
00:08:32,440 --> 00:08:39,000
And now we see that we have this element equals two from this line and this element equals seven from
108

109
00:08:39,060 --> 00:08:39,780
this line.
109

110
00:08:40,620 --> 00:08:46,080
So that's about manually setting each individual item two particular values.
110

111
00:08:46,140 --> 00:08:50,550
Of course this wouldn't be very useful if we couldn't use variables.
111

112
00:08:50,550 --> 00:08:57,210
So I'd like to now quickly show you how to use variables to populate a matrix and in particular I'm
112

113
00:08:57,210 --> 00:08:59,420
going to do this using a for loop.
113

114
00:08:59,430 --> 00:09:04,500
So let's say num range equals range 0 to 2.
114

115
00:09:05,700 --> 00:09:12,540
And now basically what I'm going to do is setup a double for loop to loop over rows and over columns
115

116
00:09:13,140 --> 00:09:16,160
and basically fill in this matrix.
116

117
00:09:16,200 --> 00:09:25,610
So let's say for I in num range and for J in, actually I'll make these even a little bit more interpretable.
117

118
00:09:25,620 --> 00:09:34,530
So row I and let's call this column I also in num range and this should be, I know what I'm going to
118

119
00:09:34,530 --> 00:09:47,610
do is specify that the row I f element column I if element equals let's say minus 1 to the power of
119

120
00:09:48,090 --> 00:09:52,660
I row I plus call I.
120

121
00:09:52,680 --> 00:09:59,130
So this is a kind of weird looking expression -- minus 1 to the power of the i-th row and the i-th column, but
121

122
00:09:59,220 --> 00:10:02,940
you will see that it starts to produce an interesting looking pattern.
122

123
00:10:02,940 --> 00:10:05,590
So let's see what that looks like here.
123

124
00:10:05,610 --> 00:10:11,730
So this is all zeros out here and seven out here and then here we have a little box up here where we
124

125
00:10:11,730 --> 00:10:14,860
get one minus one minus one and one.
125

126
00:10:14,940 --> 00:10:21,060
Now we've only filled in this little part of the matrix because I've only actually looped through two
126

127
00:10:21,060 --> 00:10:24,930
elements zero and one so I can set this a little bit bigger.
127

128
00:10:24,930 --> 00:10:27,700
Let's set this up to four for example.
128

129
00:10:27,700 --> 00:10:31,470
And now you can see there's there's kind of an interesting pattern that's starting to emerge, where we
129

130
00:10:31,470 --> 00:10:38,760
get one minus one, one, minus one And then on the next row is minus one plus one minus one plus one.
130

131
00:10:38,760 --> 00:10:45,690
So in fact when you set up a double for loop like this and specify elements in the matrix to be minus
131

132
00:10:45,690 --> 00:10:52,620
1 to the power of the row plus the column index you get this alternating pattern of minus ones and plus
132

133
00:10:52,620 --> 00:10:53,220
ones.
133

134
00:10:53,310 --> 00:10:57,380
This is actually one way to make a checkerboard, which is pretty neat.
134

135
00:10:57,960 --> 00:11:05,650
The exercise for this video is to revisit this function that you have seen in a previous video.
135

136
00:11:05,870 --> 00:11:11,900
So you'll remember that from that previous video I gave you this function it's a function of two variables.
136

137
00:11:11,900 --> 00:11:20,270
And I said you should create a double for loop over X and Y where X and Y are in a set of 0 1 and 2
137

138
00:11:20,720 --> 00:11:26,390
and then you print out all the results for all the possible combinations of X being equal to 0 1 and
138

139
00:11:26,390 --> 00:11:29,370
2 and y be equal to 0 1 and 2.
139

140
00:11:29,420 --> 00:11:36,340
So what you're going to do in this video for this exercise is essentially repeat that formulation.
140

141
00:11:36,350 --> 00:11:43,370
But now all of the results are going to be organized into a matrix. So you can see by looking at this
141

142
00:11:43,370 --> 00:11:50,090
matrix that the rows correspond to different values of x and the columns correspond to different values
142

143
00:11:50,120 --> 00:11:51,380
of Y.
143

144
00:11:51,620 --> 00:11:52,990
And that's also sensible.
144

145
00:11:53,000 --> 00:11:56,120
For example, when you look at this third column it's all zeros.
145

146
00:11:56,120 --> 00:11:57,930
That is when y equals two.
146

147
00:11:58,070 --> 00:12:01,850
Then you get two minus two zero, so then you have zero times this term.
147

148
00:12:01,850 --> 00:12:05,720
So of course the output of the function is going to be zero.
148

149
00:12:05,930 --> 00:12:06,290
Right.
149

150
00:12:06,290 --> 00:12:09,500
So good luck, pause the video, and work your way through this.
150

151
00:12:09,560 --> 00:12:14,450
And now I'm going to switch to Python and show you how I solved this exercise.
151

152
00:12:15,940 --> 00:12:16,270
All right.
152

153
00:12:16,280 --> 00:12:19,810
So the first thing we need to do is to define this function.
153

154
00:12:19,820 --> 00:12:29,250
So I'm going to first create these symbolic variables for x and y and I think sometime previously I
154

155
00:12:29,250 --> 00:12:34,070
probably showed you this with a comma and this is just to show you that you can also have a space in
155

156
00:12:34,070 --> 00:12:37,110
between these symbolic variables here.
156

157
00:12:37,160 --> 00:12:39,040
Now we create our function.
157

158
00:12:39,230 --> 00:12:50,840
So that was four plus X times two minus Y then we need to have our range of numbers the set of numbers.
158

159
00:12:50,840 --> 00:13:02,890
Let's call this X Y set equals range zero comma 3, because it's 0 1 and 2 so we those are the numbers
159

160
00:13:02,890 --> 00:13:07,650
we want 0 1 and 2 so we can use range zero comma three.
160

161
00:13:07,750 --> 00:13:07,990
OK.
161

162
00:13:07,990 --> 00:13:11,070
So now we need to initialize this matrix.
162

163
00:13:11,080 --> 00:13:13,480
So let's call this outmat
163

164
00:13:13,480 --> 00:13:16,160
for output matrix.
164

165
00:13:16,170 --> 00:13:19,780
I'm going to specify that to be a zeros matrix.
165

166
00:13:19,780 --> 00:13:22,470
And now I know that this needs to be three by three.
166

167
00:13:22,480 --> 00:13:32,920
But in fact I'm going to use the len function for length and say length of X Y set comma length of X
167

168
00:13:32,920 --> 00:13:34,460
Y sets.
168

169
00:13:34,680 --> 00:13:34,940
Okay.
169

170
00:13:34,960 --> 00:13:40,810
So now before going forwards, I want to run this code and see if we get any errors.
170

171
00:13:40,840 --> 00:13:41,080
Okay.
171

172
00:13:41,080 --> 00:13:42,180
We don't get any errors.
172

173
00:13:42,200 --> 00:13:45,600
And now I want to check out what this output matrix looks like.
173

174
00:13:45,610 --> 00:13:46,390
And this looks good.
174

175
00:13:46,390 --> 00:13:52,840
It's three by three three rows corresponding to X and three columns that will correspond to the different
175

176
00:13:52,840 --> 00:13:54,780
values of Y.
176

177
00:13:54,850 --> 00:13:55,090
All right.
177

178
00:13:55,090 --> 00:14:04,060
So we are now ready to set up the for loops. Let's say for I in X Y set and also for j in X Y set.
178

179
00:14:04,060 --> 00:14:06,620
Here is where we evaluate the function.
179

180
00:14:06,850 --> 00:14:14,260
And if you got stuck a little bit here then you can consult that previous video that was about substitution.
180

181
00:14:14,260 --> 00:14:14,830
So let's see.
181

182
00:14:14,830 --> 00:14:19,360
This was f x y dot subs.
182

183
00:14:19,360 --> 00:14:22,500
And here we needed to input a dictionary.
183

184
00:14:22,510 --> 00:14:29,200
So X gets replaced with i and then Y gets replaced with J.
184

185
00:14:29,470 --> 00:14:40,000
And then the idea is the output of this function goes into the output matrix in row i and column J.
185

186
00:14:40,000 --> 00:14:40,210
All right.
186

187
00:14:40,240 --> 00:14:43,750
So I just ran this cell and I didn't get any error messages.
187

188
00:14:43,750 --> 00:14:45,370
So that's a good sign.
188

189
00:14:45,400 --> 00:14:51,690
And now let's see what this thing looks like. So first let's just print it out so outmat.
189

190
00:14:51,820 --> 00:14:53,320
Just to make sure it already looks good.
190

191
00:14:53,320 --> 00:14:56,740
So there's the eights and the fours and the zeros in this column.
191

192
00:14:56,740 --> 00:14:58,420
So this seems correct.
192

193
00:14:58,540 --> 00:15:01,530
And now I just want to make this look a little bit nicer.
193

194
00:15:01,540 --> 00:15:08,370
So display math and now I'm going to need to convert this into latex.
194

195
00:15:08,830 --> 00:15:16,940
But before I do that, I need to convert this from a numpy array into a sympy object. So simple dot
195

196
00:15:17,310 --> 00:15:19,100
sympify.
196

197
00:15:19,840 --> 00:15:24,270
And then we have a bunch of end parentheses here... and brilliant!
197

198
00:15:24,280 --> 00:15:26,530
This looks really nice.
198

199
00:15:26,590 --> 00:15:32,480
I hope you enjoyed this video, and I hope you found it interesting to learn a little bit about matrices.
199

200
00:15:32,560 --> 00:15:36,400
You will learn more about matrices as you go through this course.
200

201
00:15:36,460 --> 00:15:42,290
And as you start using Python more and more you will see that matrices are all over the place.
201

202
00:15:42,290 --> 00:15:44,500
They're really important for programming.
