1
00:00:04,320 --> 00:00:09,150
I have decided to call this thing a random exploding oiler.

2
00:00:09,210 --> 00:00:12,080
It looks like there's this sun or star.

3
00:00:12,080 --> 00:00:17,520
Do you know something in the middle is just exploding out these colorful laser beams shooting out of

4
00:00:17,520 --> 00:00:18,360
this thing.

5
00:00:18,540 --> 00:00:23,370
And the goal of the exercise in this video is to make this graphic.

6
00:00:23,550 --> 00:00:28,960
Well you won't make exactly this graphic but something that looks remarkably similar to this.

7
00:00:28,980 --> 00:00:30,960
So how did I create this.

8
00:00:30,960 --> 00:00:40,170
What I did was use Oilers formula m times e to the I K where M is a length it's the distance from the

9
00:00:40,170 --> 00:00:48,240
origin and k is the angle in radians and then I generated random MS and random ks to make each one of

10
00:00:48,240 --> 00:00:56,820
these individual vectors and then I specified that 40 percent of these should be pink lines 40 percent

11
00:00:56,820 --> 00:01:00,750
should be purple lines and 20 percent should be green lines.

12
00:01:00,840 --> 00:01:07,910
Now these probabilities are actually approximate because I used random numbers to generate the colors

13
00:01:07,950 --> 00:01:13,360
so random numbers to assign different probabilities to each specific vector.

14
00:01:13,380 --> 00:01:19,680
So with 40 percent probability this vector could be purple with 40 percent probability it could be pink

15
00:01:19,940 --> 00:01:23,380
and with 20 percent probability it could be green.

16
00:01:23,400 --> 00:01:30,300
Now there are several ways several correct ways to solve this exercise and make a plot that looks something

17
00:01:30,300 --> 00:01:30,880
like this.

18
00:01:30,900 --> 00:01:37,230
So positive video start coding in Python see if you can figure out a way to get an image that looks

19
00:01:37,230 --> 00:01:45,560
like this and now I'm going to switch to Python and show you how I solve this so I'm going to draw two

20
00:01:45,560 --> 00:01:49,390
hundred vectors I'll create a variable called and vectors.

21
00:01:49,450 --> 00:01:56,410
Let's make this plural and vex equals 200 and then I'm going to generate a bunch of random ends and

22
00:01:56,620 --> 00:02:07,450
KS So the ends are going to be random random uniformly distributed numbers and there's going to be n

23
00:02:07,480 --> 00:02:09,040
vex of them.

24
00:02:09,040 --> 00:02:14,590
Now the Ks are also going to be random so uniformly distributed numbers.

25
00:02:14,710 --> 00:02:19,120
But now these are not going to be numbers between 0 and 1.

26
00:02:19,120 --> 00:02:24,230
They should be numbers between 0 and 2 times pi.

27
00:02:24,240 --> 00:02:24,480
Okay.

28
00:02:24,520 --> 00:02:30,010
So what I'm going to do now is loop over all 200 of these vectors.

29
00:02:30,010 --> 00:02:38,980
So for i in range 0 2 and vex and now it turns out you actually don't need to worry about imaginary

30
00:02:39,010 --> 00:02:39,840
numbers in here.

31
00:02:39,850 --> 00:02:46,210
You don't need to write out the full Oilers formula because I'm going to use BLT that polar.

32
00:02:46,210 --> 00:02:53,200
So this polar function where you specify the angles that's going to be chaos and then it's the ice angle

33
00:02:53,740 --> 00:02:55,470
and the magnitude.

34
00:02:55,480 --> 00:02:58,960
So 0 2 ends.

35
00:02:59,020 --> 00:03:02,530
So this is going to create a line that goes from the origin.

36
00:03:02,650 --> 00:03:08,510
So zero angle zero magnitude to this magnitude.

37
00:03:08,650 --> 00:03:10,390
M with this angle.

38
00:03:10,390 --> 00:03:13,680
K okay and then let's just see how this looks.

39
00:03:13,680 --> 00:03:14,700
So peel.

40
00:03:14,710 --> 00:03:15,900
T that show.

41
00:03:17,440 --> 00:03:17,980
Whoops.

42
00:03:17,990 --> 00:03:21,500
That should be a multiplication there.

43
00:03:21,570 --> 00:03:26,430
Okay so we get a bunch of exploding lines coming out from the center here.

44
00:03:26,480 --> 00:03:33,810
Let me turn off this axis and say peel t the Axis off.

45
00:03:33,870 --> 00:03:35,960
Okay so this is already starting to look good.

46
00:03:35,960 --> 00:03:41,460
We have random or vectors with random lengths and random angles.

47
00:03:41,460 --> 00:03:44,580
And now what I need to do is get the color to work.

48
00:03:44,600 --> 00:03:48,820
So the way that I have implemented this is with random numbers.

49
00:03:48,830 --> 00:03:54,380
And that's because I want you to get a little bit more experience working with random numbers.

50
00:03:54,380 --> 00:03:56,090
So here's how I did it.

51
00:03:56,090 --> 00:04:03,440
So if actually not so first I want to create a random number let's just call this RSA NPD at random

52
00:04:03,490 --> 00:04:05,050
that Rand.

53
00:04:05,120 --> 00:04:10,580
So this is going to be some number between 0 and 1.

54
00:04:10,580 --> 00:04:18,770
Now the idea is that with this uniform distribution every number between 0 and 1 is equally likely to

55
00:04:18,770 --> 00:04:19,950
be selected.

56
00:04:20,000 --> 00:04:26,780
So therefore there is a 40 percent probability that this number will be drawn between zero and point

57
00:04:26,780 --> 00:04:27,200
four.

58
00:04:27,710 --> 00:04:29,500
So I'm going to write.

59
00:04:29,690 --> 00:04:38,450
If R is less than point four and there is a 40 percent chance that this statement is true then I'm gonna

60
00:04:38,450 --> 00:04:48,060
set the color to be pink which is 100 percent red 20 percent green and 70 percent blue.

61
00:04:48,080 --> 00:04:49,400
Okay so that's that color.

62
00:04:49,400 --> 00:04:52,490
And now I say color equals color.

63
00:04:52,490 --> 00:04:57,510
Now I have mentioned this before in a previous video and I'm going to say it again.

64
00:04:57,740 --> 00:05:00,680
This is legal but it's a little bit confusing.

65
00:05:00,680 --> 00:05:06,780
So here the word color is used as a keyword as an input into the polar function.

66
00:05:06,950 --> 00:05:15,240
And here the exact same set of characters is a variable that I defined to be this RG B code.

67
00:05:15,440 --> 00:05:22,310
So this can get confusing although it's legal so I'm going to change this to b c maybe I'll say S.L.

68
00:05:22,320 --> 00:05:29,810
R for color so S.L. are now what do you think is gonna happen if I run this code.

69
00:05:29,900 --> 00:05:30,260
Let's see.

70
00:05:30,290 --> 00:05:35,830
I'm going to run this code and then we get an error and it says name CLIA is not defined.

71
00:05:35,970 --> 00:05:38,240
And now let's try to run this again.

72
00:05:38,240 --> 00:05:41,570
Still get no plot and no plot.

73
00:05:41,570 --> 00:05:48,050
So what's happening here is that in the times that I've run it so far R has never been less than point

74
00:05:48,050 --> 00:05:48,770
four.

75
00:05:48,800 --> 00:05:51,780
So this variable was never defined.

76
00:05:51,830 --> 00:05:59,930
Okay so let's try another once I'll say l f now I'm going to say if r is between point four and point

77
00:05:59,960 --> 00:06:00,620
eight.

78
00:06:00,950 --> 00:06:07,010
And the reason why I want to say that is because there is also a 40 percent chance that this randomly

79
00:06:07,040 --> 00:06:13,250
drawn number from a uniform distribution has a value between point four and point eight.

80
00:06:13,250 --> 00:06:23,810
So l If so else if r is greater than point 4 and if r is less than point 8 and then I specify that the

81
00:06:23,810 --> 00:06:26,000
color should be this one is gonna be purple.

82
00:06:26,000 --> 00:06:31,140
So in fact I'm just gonna swap the red and the blue proportions here.

83
00:06:31,180 --> 00:06:37,970
There's gonna be 70 percent red 20 percent green and 100 percent blue.

84
00:06:37,970 --> 00:06:38,200
Okay.

85
00:06:38,210 --> 00:06:40,830
So let's try running this code again.

86
00:06:41,360 --> 00:06:45,130
And now we don't get any errors but we also don't see any green lines.

87
00:06:45,140 --> 00:06:50,820
Now it's no surprise that there is no green lines because I haven't specified any green lines in here.

88
00:06:50,900 --> 00:06:52,760
But why don't we see any errors.

89
00:06:52,760 --> 00:06:58,900
Doesn't it ever happen that R is greater than point 8 which means that this is not true.

90
00:06:59,060 --> 00:07:00,930
And this is also not true.

91
00:07:01,040 --> 00:07:06,180
And the answer is yes that will definitely happen that R is greater than point 8.

92
00:07:06,290 --> 00:07:13,100
And in that case when R is greater than point 8 then the color the value of color C LR is going to be

93
00:07:13,100 --> 00:07:16,580
the same as whatever it was in the previous iteration.

94
00:07:16,580 --> 00:07:23,570
So for the previous vector so that means that this variable C LR is actually not being updated on every

95
00:07:23,570 --> 00:07:29,840
single iteration of this loop approximately 20 percent of the time it's not getting updated.

96
00:07:29,840 --> 00:07:30,130
Okay.

97
00:07:30,130 --> 00:07:35,690
So then the last step is to say else and then we specify that the color.

98
00:07:35,690 --> 00:07:37,700
Color should be green.

99
00:07:37,730 --> 00:07:40,370
Which I will make just as pure green.

100
00:07:40,370 --> 00:07:41,840
Like this.

101
00:07:41,840 --> 00:07:42,170
Okay.

102
00:07:42,170 --> 00:07:48,640
And then we get this nice exploding Euler with lasers shooting out with different colors.

103
00:07:48,660 --> 00:07:49,410
Great.

104
00:07:49,410 --> 00:07:54,540
As I mentioned in the beginning of this video there are multiple correct ways to solve this problem

105
00:07:54,570 --> 00:07:56,530
and other problems like it.

106
00:07:56,580 --> 00:08:02,700
So if you have a different solution then that's totally fine as long as your solution also works.
