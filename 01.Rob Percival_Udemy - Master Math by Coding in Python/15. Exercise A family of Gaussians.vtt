WEBVTT
1
00:00:04.160 --> 00:00:10.940
This video is the exercise corresponding to the previous video about creating gal scenes and finding

2
00:00:10.940 --> 00:00:12.660
points on galleons.

3
00:00:12.680 --> 00:00:17.600
So if you haven't gone through the previous video make sure you go through that before trying to work

4
00:00:17.600 --> 00:00:19.170
through this exercise.

5
00:00:19.190 --> 00:00:24.710
So the goal of this exercise is basically just to produce an image that looks something like this.

6
00:00:25.040 --> 00:00:26.570
So what are we actually looking here.

7
00:00:27.080 --> 00:00:34.490
Well this is the time axis here this is the same access that you saw in these kinds of graphs here.

8
00:00:34.520 --> 00:00:36.160
So it's the same time axis.

9
00:00:36.260 --> 00:00:44.540
However in this graph we have the function value Y on the y axis but here the function value is actually

10
00:00:44.540 --> 00:00:45.520
the color.

11
00:00:45.560 --> 00:00:53.150
So if you pick one row here then this is all zeros for this blue color and then as we get two more yellowish

12
00:00:53.150 --> 00:00:59.260
colors the values get larger up to 1 and then they get smaller back down to zero again.

13
00:00:59.390 --> 00:01:01.460
Or at least you know very very close to zero.

14
00:01:01.520 --> 00:01:06.650
I did mention this in the previous video but in fact these value the function never actually touches

15
00:01:06.650 --> 00:01:07.380
zero.

16
00:01:07.430 --> 00:01:15.770
It just gets really really really close to zero always positive anyway so each row in this image corresponds

17
00:01:15.770 --> 00:01:21.980
to a galleon and the color corresponds to the height or the amplitude of the gaussian and then the y

18
00:01:21.980 --> 00:01:27.300
axis here actually shows this parameter that's full with the half maximum parameter.

19
00:01:27.350 --> 00:01:33.170
So what you see it looks like this kind of cone that's opening up and that's actually just a lot of

20
00:01:33.170 --> 00:01:34.220
different galleons.

21
00:01:34.220 --> 00:01:40.760
I think I used a hundred different galleons here and each galaxy and each row in this image has its

22
00:01:40.850 --> 00:01:42.880
own value of H.

23
00:01:42.890 --> 00:01:49.430
So I hope that makes sense and what you should do now is pause the video switch to Python and see if

24
00:01:49.430 --> 00:01:52.750
you can get an image that looks something like this.

25
00:01:52.810 --> 00:01:58.570
Don't worry about the color scaling but just worry about the general features of this image.

26
00:01:59.330 --> 00:02:04.430
And now it's my turn to switch to Python and show you my solution.

27
00:02:04.430 --> 00:02:10.820
So here we have the code from the previous video and I'm assuming that you have already run all of this

28
00:02:10.820 --> 00:02:14.840
code before working on this exercise.

29
00:02:14.840 --> 00:02:22.700
So let's see what we want to do is specify a matrix and the size of this matrix is going to be the number

30
00:02:22.700 --> 00:02:26.960
of time points by the number of H values.

31
00:02:27.140 --> 00:02:33.860
So let's see I'll specify n to be 100 so I'm going to use N hundred one hundred different values of

32
00:02:33.890 --> 00:02:37.020
H going from zero to 1.

33
00:02:37.040 --> 00:02:39.380
So now here is gonna be the output matrix.

34
00:02:39.380 --> 00:02:46.280
I call this matrix G so I'm going to initialize this to be zeros and it's going to be n by the length

35
00:02:46.460 --> 00:02:48.950
of T.

36
00:02:49.340 --> 00:02:49.600
Okay.

37
00:02:49.640 --> 00:02:54.560
So I ran that cell just to make sure I didn't you know sometimes I make little mistakes here when you

38
00:02:54.560 --> 00:02:57.860
have so many parentheses all in one line of code.

39
00:02:57.920 --> 00:03:03.370
Okay so now I'm going to loop over for i in range n.

40
00:03:03.680 --> 00:03:12.140
And what do we want to do we want to set each row so the AI comma all Rho to be equal to the Galaxy

41
00:03:12.140 --> 00:03:12.830
and formula.

42
00:03:12.850 --> 00:03:15.520
So E to the NUM spider.

43
00:03:15.550 --> 00:03:27.300
E XP e to the minus four times the natural log log of two times times time squared.

44
00:03:27.400 --> 00:03:30.260
And then that's divided by h squared.

45
00:03:30.870 --> 00:03:31.190
Okay.

46
00:03:31.220 --> 00:03:37.340
Now I can already tell you that this is not yet correct because this is just pulling h from the previous

47
00:03:37.340 --> 00:03:42.170
video and it's the same value for all of these Gaussian all the rows in this image.

48
00:03:42.410 --> 00:03:44.900
However I'm going to fix that in a moment.

49
00:03:44.900 --> 00:03:51.470
I want to make sure that I'm getting the right code so I'm going to draw this actually as a color mesh

50
00:03:51.470 --> 00:03:58.350
so p color mesh and let's just say like this and P L T dot show.

51
00:03:58.430 --> 00:04:01.400
Okay so we get an image we don't get any errors.

52
00:04:01.400 --> 00:04:05.560
And what you see here is every row is a galaxy in.

53
00:04:05.570 --> 00:04:11.770
And well this is just repeats it's 100 repeats of the identical Gaussian not super interesting.

54
00:04:11.870 --> 00:04:14.520
So there's a couple of things that we need to change here.

55
00:04:14.540 --> 00:04:16.620
Well we need to fix H.

56
00:04:16.730 --> 00:04:23.330
So I'm gonna specify that H equals and now there's many correct ways that you could have done this the

57
00:04:23.330 --> 00:04:32.380
way that I'm going to do this is by setting h to be the looping index here plus 1 divided by n.

58
00:04:32.510 --> 00:04:37.640
Now why am I setting this to be I plus 1 and why not just I.

59
00:04:37.640 --> 00:04:42.850
Let's see what happens if I set h to be equal to I divided by n.

60
00:04:43.190 --> 00:04:49.280
Well we get an error here it says divide by zero and let's think about what happens and the very first

61
00:04:49.340 --> 00:04:49.930
iteration.

62
00:04:49.940 --> 00:04:54.500
So at the first iteration of this loop I is equal to zero.

63
00:04:54.590 --> 00:04:59.460
And so then we have h is equal to while zero divided by n which is still zero.

64
00:04:59.570 --> 00:05:05.650
And then here we are actually dividing by we have this stuff which is fine dividing by zero squared.

65
00:05:05.680 --> 00:05:07.800
So we're not allowed to divide by zero.

66
00:05:07.840 --> 00:05:13.240
So that's why I'm specifying this to be I plus 1 divided by n.

67
00:05:13.270 --> 00:05:14.060
So there you go.

68
00:05:14.110 --> 00:05:21.400
That gives us our Gaussian which is getting wider with increases in this parameter here.

69
00:05:21.400 --> 00:05:22.540
So this part is good.

70
00:05:22.540 --> 00:05:23.740
I'm happy with this part.

71
00:05:23.740 --> 00:05:29.530
However when we look here at this graph we look at the axes and these are not correct.

72
00:05:29.560 --> 00:05:30.840
Well I mean they are correct.

73
00:05:30.850 --> 00:05:36.880
They go in indices but I would like this to be more meaningful and I would like this to be in the actual

74
00:05:36.880 --> 00:05:38.140
time vector here.

75
00:05:38.140 --> 00:05:40.610
So the y axis.

76
00:05:40.620 --> 00:05:44.040
Sorry I meant the x axis here values are going to be t.

77
00:05:44.320 --> 00:05:47.590
And then what should the x axis values be here.

78
00:05:47.590 --> 00:05:51.580
Well you know we can set it to B H but that's also not exactly right.

79
00:05:51.580 --> 00:05:54.600
And in fact python is giving us an error here.

80
00:05:55.270 --> 00:06:02.260
So in fact what I want to do is save the value of the full with that half maximum for every iteration

81
00:06:02.260 --> 00:06:02.890
in this loop.

82
00:06:02.890 --> 00:06:09.520
So I want to end up with a vector of H is not just a single H parameter.

83
00:06:09.520 --> 00:06:11.560
So that's the way that I'm going to solve this.

84
00:06:11.560 --> 00:06:17.380
There's other ways that you can also get this to work but I'm going to do this by creating a vector

85
00:06:17.460 --> 00:06:17.780
H.

86
00:06:17.810 --> 00:06:20.580
Let's say num pi zeros.

87
00:06:20.740 --> 00:06:29.080
And this is also going to be n elements long and then the idea is that I set the ISF element in H and

88
00:06:29.080 --> 00:06:32.320
then I also have the corrected here.

89
00:06:32.350 --> 00:06:34.020
Groups like this.

90
00:06:34.060 --> 00:06:36.760
So now the ISF element in H.

91
00:06:36.850 --> 00:06:41.940
So where h is a vector and not just a scalar not just a single number.

92
00:06:42.010 --> 00:06:45.880
And that is set to the full with the half maximum.

93
00:06:45.880 --> 00:06:47.410
And then we get this plot.

94
00:06:47.420 --> 00:06:51.180
Now this is correct and I'm going to add a few more niceties here.

95
00:06:51.190 --> 00:06:59.680
So the X label will set that to B T and then we'll set the Y label to B H.

96
00:06:59.680 --> 00:07:00.390
All right.

97
00:07:00.430 --> 00:07:01.930
I think this looks really nice.

98
00:07:01.930 --> 00:07:04.420
I'm very happy with this.

99
00:07:04.510 --> 00:07:11.630
So in the previous video and in this video you learned about the formula for computing a galaxy.

100
00:07:11.640 --> 00:07:17.290
And just as a quick reminder there are several different expressions of the gaussian but they all generally

101
00:07:17.290 --> 00:07:21.760
look like e to the minus something squared over something squared.

102
00:07:22.000 --> 00:07:29.370
And importantly you also learn how to find a particular point on a function using a little bit of algebra.

103
00:07:29.470 --> 00:07:35.590
And importantly the interesting and important property that the natural exponential and the natural

104
00:07:35.590 --> 00:07:38.530
logarithm are inverse is of each other.

105
00:07:38.650 --> 00:07:42.640
And yet you also saw how to do all this cool stuff in Python.
