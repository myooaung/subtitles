WEBVTT
0
1
00:00:04.480 --> 00:00:07.380
So this video is about a bug hunt.
1

2
00:00:07.660 --> 00:00:10.760
I'm sure you remember this from the last section of the course.
2

3
00:00:10.870 --> 00:00:11.790
It was really fun.
3

4
00:00:11.800 --> 00:00:13.460
I enjoyed it so much.
4

5
00:00:13.510 --> 00:00:18.460
Even though in the beginning of that video I think I said that I don't like to correct other people's
5

6
00:00:18.460 --> 00:00:23.680
code but I turned out to like it so much that I made another one and then I continued to make these
6

7
00:00:23.680 --> 00:00:26.100
for each section of the course.
7

8
00:00:26.110 --> 00:00:32.150
So what do you want to do is pause the video if you haven't already done this, go through all this code.
8

9
00:00:32.260 --> 00:00:38.860
There are mistakes in each of these cells, in all these cells there are mistakes. Sometimes there is
9

10
00:00:38.860 --> 00:00:39.800
a coding error.
10

11
00:00:39.890 --> 00:00:41.290
Sometimes there's a math error.
11

12
00:00:41.290 --> 00:00:48.670
Sometimes there are latex errors... and your job is to go through and fix all of the mistakes.
12

13
00:00:48.670 --> 00:00:49.020
All right.
13

14
00:00:49.030 --> 00:00:54.250
So I'm assuming that by now you've paused the video and gone through all of these and now you're curious
14

15
00:00:54.250 --> 00:00:56.620
to see what I come up with.
15

16
00:00:56.620 --> 00:01:02.800
All right so I'm just going to start by running this cell and immediately we get an error it says name
16

17
00:01:02.800 --> 00:01:04.590
sym is not defined.
17

18
00:01:04.600 --> 00:01:10.460
So in fact we haven't even yet imported the sympy module, so let's see.
18

19
00:01:10.480 --> 00:01:14.020
I'm going to say insert cell above.
19

20
00:01:14.320 --> 00:01:20.290
And that's because in general it's good programming style in Python to put all the module importing
20

21
00:01:20.380 --> 00:01:32.860
up at the very top of the script. So I'm going to write import sympy as sym, so run this cell and then
21

22
00:01:32.860 --> 00:01:35.920
I will run this cell... oops and then we get another error.
22

23
00:01:35.920 --> 00:01:37.180
Math is not defined.
23

24
00:01:37.210 --> 00:01:37.530
Okay.
24

25
00:01:37.540 --> 00:01:40.190
We also know how to fix this one.
25

26
00:01:40.210 --> 00:01:51.740
So from IPython dot display import math and also the display functions.
26

27
00:01:51.750 --> 00:01:52.160
Aha.
27

28
00:01:52.180 --> 00:01:53.860
Now we get a longer error.
28

29
00:01:53.860 --> 00:02:02.870
Let's see, the error message here says math expects text not to e to the new squared divided by Alpha.
29

30
00:02:03.010 --> 00:02:03.300
Okay.
30

31
00:02:03.310 --> 00:02:10.360
So here the problem is that we are inputting this sympy object directly into the math function.
31

32
00:02:10.360 --> 00:02:14.080
But the math function is actually expecting latex code.
32

33
00:02:14.140 --> 00:02:19.180
So we need to convert this from a sympy expression into latex code.
33

34
00:02:19.180 --> 00:02:22.460
And that we do with sym dot latex.
34

35
00:02:22.510 --> 00:02:24.910
So let's see if this works.
35

36
00:02:24.910 --> 00:02:25.390
All right.
36

37
00:02:25.390 --> 00:02:34.310
Finally we get a nice looking result: you can see two times e to the mu squared divided by Alpha and
37

38
00:02:34.310 --> 00:02:36.380
that's exactly what you see here too.
38

39
00:02:36.510 --> 00:02:38.660
e mu squared divided by Alpha.
39

40
00:02:39.140 --> 00:02:47.570
It's also interesting as a reminder that if you call your symbolic variables by Greek characters -- the
40

41
00:02:47.570 --> 00:02:49.050
names of Greek characters --
41

42
00:02:49.220 --> 00:02:56.420
then when you convert into latex, sympy will automatically convert that into the corresponding Greek
42

43
00:02:56.420 --> 00:02:56.900
character.
43

44
00:02:56.900 --> 00:03:02.760
So this is the Greek character mu even though here I wrote the letters m u.
44

45
00:03:02.910 --> 00:03:05.510
All right so let's see what's going on here.
45

46
00:03:05.520 --> 00:03:07.060
This kind of initially,
46

47
00:03:07.110 --> 00:03:12.120
you know if you just sort of blink your eyes and look at this fast this looks like correct latex code
47

48
00:03:12.300 --> 00:03:14.180
but we get some weird error.
48

49
00:03:14.220 --> 00:03:19.590
And this I've shown you before that when you're putting latex code into python, you actually need to
49

50
00:03:19.590 --> 00:03:27.780
use double slashes instead of single slashes. So double slash there double slash there double slash there.
50

51
00:03:27.930 --> 00:03:29.340
And let's see what this looks like now.
51

52
00:03:31.000 --> 00:03:31.310
Huh.
52

53
00:03:31.440 --> 00:03:34.020
This looks much much prettier.
53

54
00:03:34.020 --> 00:03:35.940
I'm sure you agree.
54

55
00:03:35.970 --> 00:03:36.450
All right.
55

56
00:03:36.450 --> 00:03:38.630
Here is the next one.
56

57
00:03:38.760 --> 00:03:42.210
We set variables A and B to be three and four.
57

58
00:03:42.210 --> 00:03:48.330
But notice that these are not the number three and the number four this is the string three because
58

59
00:03:48.330 --> 00:03:54.930
these are encased in single quotes. And then we have a comment that says the answer should be seven and
59

60
00:03:54.960 --> 00:04:01.320
you might remember there was kind of a similar problem like this in the arithmetic section of this course.
60

61
00:04:01.380 --> 00:04:09.520
So here because these are two strings, python is actually interpreting this plus sign to mean concatenation.
61

62
00:04:09.540 --> 00:04:15.950
So that means we're getting the string three four, not the number three plus the number four.
62

63
00:04:15.960 --> 00:04:22.800
So the easiest way to solve this is to get rid of these quotes here and then we get seven. I guess another
63

64
00:04:22.800 --> 00:04:28.560
way you could have done it is if you want these to be strings for you know maybe it's important to have
64

65
00:04:28.560 --> 00:04:34.710
these variables as strings for somehow later on in your code, then you could convert these into numbers
65

66
00:04:34.740 --> 00:04:42.000
you can convert them into integers using the int function, or you can convert them into floating point
66

67
00:04:42.000 --> 00:04:45.380
decimals using the float function.
67

68
00:04:45.390 --> 00:04:45.650
OK.
68

69
00:04:45.690 --> 00:04:47.370
So let's see what's going on here.
69

70
00:04:47.400 --> 00:04:53.690
I'm going to run this and the error says it's a syntax error; keyword can't be an expression.
70

71
00:04:53.700 --> 00:04:57.780
So here the problem comes with the single equals sign.
71

72
00:04:57.810 --> 00:05:04.170
Remember that in Python, a single equals sign means that you are assigning a value to a variable like
72

73
00:05:04.170 --> 00:05:05.710
what we're doing here.
73

74
00:05:05.940 --> 00:05:08.910
Probably what we're looking for is a double equals sign.
74

75
00:05:08.910 --> 00:05:12.530
But this is also the function eq or equals.
75

76
00:05:12.530 --> 00:05:18.450
And I've introduced this to you a few videos ago, and what you can do with equals with this eq function
76

77
00:05:19.050 --> 00:05:25.950
is provide two inputs. The first input is for the left hand side of the equation and the second input
77

78
00:05:25.980 --> 00:05:30.520
is for the right hand side of this equation.
78

79
00:05:30.570 --> 00:05:35.450
So now we get a different error, which is that the name X is not defined. So we never actually defined
79

80
00:05:35.870 --> 00:05:38.270
a variable called X. So let's do that.
80

81
00:05:38.300 --> 00:05:47.880
So say x equals symbols X OK so now we don't get any errors.
81

82
00:05:49.020 --> 00:05:53.530
And we just get it this is actually basically like just what I wrote here.
82

83
00:05:53.550 --> 00:05:59.790
Now what's going on here is that the eq function -- equals function -- is going to want to return true or
83

84
00:05:59.790 --> 00:06:01.280
false as a boolean.
84

85
00:06:01.440 --> 00:06:05.470
But in this case it doesn't have enough information.
85

86
00:06:05.470 --> 00:06:09.300
And that makes sense because we haven't told it what X is equal to.
86

87
00:06:09.300 --> 00:06:16.200
So it's impossible to say whether four times x equals two unless we tell it exactly what X is.
87

88
00:06:16.200 --> 00:06:24.880
So for example I could say I'm going to overwrite X now and say X equals one half and then we run it
88

89
00:06:24.880 --> 00:06:26.380
again and we get true.
89

90
00:06:26.560 --> 00:06:29.560
I will say x equals one third and we get false.
90

91
00:06:29.650 --> 00:06:35.420
But if I just leave x as X then that's the best we can do.
91

92
00:06:35.440 --> 00:06:35.670
Okay.
92

93
00:06:35.680 --> 00:06:38.680
So we know that it's going to crash for one equals sign.
93

94
00:06:38.680 --> 00:06:45.590
What's gonna happen if we put in two equals signs? Here we get false because here the eq function
94

95
00:06:45.620 --> 00:06:49.650
is actually testing for strict equality, so is four x
95

96
00:06:49.650 --> 00:06:50.960
The same thing is two?
96

97
00:06:51.050 --> 00:06:55.010
The answer is no: four X is the same thing as four X.
97

98
00:06:55.040 --> 00:06:55.280
All right.
98

99
00:06:55.280 --> 00:07:03.640
So the best way to set this up would be to write comma like this or to say minus two.
99

100
00:07:03.650 --> 00:07:05.920
Now we're only providing one input.
100

101
00:07:06.020 --> 00:07:10.100
We're moving two from the left from the right hand side of the equation to the right hand side of the
101

102
00:07:10.100 --> 00:07:15.320
equation and implicitly we're testing an equation that looks like this.
102

103
00:07:15.350 --> 00:07:20.790
So I moved two from the right hand side to the left hand side, but with a minus sign on it of course.
103

104
00:07:20.810 --> 00:07:24.620
And now we're testing against zero.
104

105
00:07:24.620 --> 00:07:24.860
All right.
105

106
00:07:24.890 --> 00:07:26.410
So let's go down to the next one.
106

107
00:07:27.200 --> 00:07:31.500
So let's first notice that this comment says part 1 of 2 and Part 2 of 2.
107

108
00:07:31.520 --> 00:07:35.960
So that probably means that these two are linked together.
108

109
00:07:35.960 --> 00:07:41.720
So let's run the first one. So it's not really clear that anything has gone wrong here.
109

110
00:07:41.750 --> 00:07:49.160
This is the caret symbol and this is the double asterisk, and this is the python format for indicating
110

111
00:07:49.190 --> 00:07:49.700
a power.
111

112
00:07:49.700 --> 00:07:57.010
So this is X squared, and this caret symbol is solving something called the XOR problem in Python.
112

113
00:07:57.010 --> 00:08:03.200
And you don't need to worry about that for now but you just need to keep in mind that this is the symbol
113

114
00:08:03.230 --> 00:08:06.510
used for exponentiation.
114

115
00:08:06.530 --> 00:08:06.750
All right.
115

116
00:08:06.770 --> 00:08:09.110
So this doesn't look really pretty.
116

117
00:08:09.110 --> 00:08:12.050
Now we could do two things to make this look nicer.
117

118
00:08:12.050 --> 00:08:18.770
One thing we could do is embed this into the math function, but you already know by now that that's not
118

119
00:08:18.770 --> 00:08:19.460
going to work.
119

120
00:08:19.490 --> 00:08:23.410
So instead we need to input latex codes.
120

121
00:08:23.420 --> 00:08:26.540
I'm going to write sym dot latex R.
121

122
00:08:26.730 --> 00:08:32.750
And now we get a nice looking X squared. But there is another way to get this nice looking X squared
122

123
00:08:33.710 --> 00:08:38.990
with only using the input directly into the display function.
123

124
00:08:38.990 --> 00:08:43.340
And that was by activating sym dot init
124

125
00:08:43.340 --> 00:08:47.180
printing.
125

126
00:08:47.180 --> 00:08:54.260
with parentheses because I'm calling a function here. And I'm going to run this cell again.
126

127
00:08:54.350 --> 00:08:58.270
And when this function gets run once -- it only needs to be run once.
127

128
00:08:58.400 --> 00:09:05.900
That's going to activate this nicer printing and it will again give us this nice looking math expression
128

129
00:09:05.900 --> 00:09:13.470
here. Now if you were only ever displaying relatively simple expressions like this, then it's probably
129

130
00:09:13.470 --> 00:09:21.110
easier just to go right for display and then the variable with init printing activated.
130

131
00:09:21.190 --> 00:09:27.550
The main advantage of using the math function and then latex code is if you want to have longer more
131

132
00:09:27.550 --> 00:09:30.380
embedded expressions.
132

133
00:09:30.420 --> 00:09:30.670
Okay.
133

134
00:09:30.700 --> 00:09:33.340
So I think this is now solved.
134

135
00:09:33.340 --> 00:09:35.890
In fact I don't even think there's anything particularly wrong with this.
135

136
00:09:35.890 --> 00:09:38.040
We're probably gonna have to do something here.
136

137
00:09:38.320 --> 00:09:39.670
So let's see what's going on here.
137

138
00:09:39.670 --> 00:09:49.090
So here I redefine q and r to be symbolic variables, but then I overwrite Q to be a sympified version
138

139
00:09:49.180 --> 00:09:51.550
of X carat two.
139

140
00:09:51.640 --> 00:09:58.200
And here R is going to be a simplified version of X Star Star 2 and then we display them.
140

141
00:09:58.210 --> 00:10:00.300
So let's see what happens here.
141

142
00:10:00.340 --> 00:10:08.500
Okay so this is actually pretty interesting. We saw up here that when I defined Q to be X squared or
142

143
00:10:08.560 --> 00:10:12.520
X caret two, the answer was something that doesn't look like X squared.
143

144
00:10:13.000 --> 00:10:20.740
But when I used the sympify function and then put X caret two in quotes, then actually Q got interpreted
144

145
00:10:20.740 --> 00:10:28.540
it got displayed as X squared, and then we can see that when I define x Star Star 2 then sym eq told
145

146
00:10:28.540 --> 00:10:33.790
me that Q and R are actually the same thing.
146

147
00:10:33.790 --> 00:10:38.190
So q equals R and that part is true.
147

148
00:10:38.350 --> 00:10:45.160
So what's happening here is that the caret symbol is used for exponentiation and super-scripting
148

149
00:10:45.250 --> 00:10:54.610
in latex and the star star is used to indicate powers in Python code and the function sympify is
149

150
00:10:54.610 --> 00:11:02.020
smart enough to recognize that this is latex code, because it's in quotes and this is Python code because
150

151
00:11:02.110 --> 00:11:03.700
it has the double asterisk.
151

152
00:11:04.170 --> 00:11:09.240
Okay, so I actually don't really see any errors in this code either although I think this part is unnecessary.
152

153
00:11:10.360 --> 00:11:12.660
Okay so let's continue on here.
153

154
00:11:12.700 --> 00:11:15.580
Here I define x to be a symbolic variable.
154

155
00:11:15.580 --> 00:11:19.780
I don't think I really need to redefine that because I have already defined it above.
155

156
00:11:19.810 --> 00:11:26.580
But anyway, and then I create some expression and I don't immediately see what's going wrong here.
156

157
00:11:26.680 --> 00:11:30.110
So let's just run this and see what happens.
157

158
00:11:30.550 --> 00:11:30.810
Okay.
158

159
00:11:30.840 --> 00:11:34.180
So we get this nice equation that displayed, that looks pretty good.
159

160
00:11:35.750 --> 00:11:40.620
And now we see module sympy has no attribute subs.
160

161
00:11:40.720 --> 00:11:41.800
So what is going on here?
161

162
00:11:41.800 --> 00:11:49.150
What's going on here is in this line here and here, what it looks like we're trying to do is run a substitution
162

163
00:11:49.570 --> 00:11:58.490
of this equation, and what we're substituting is three for X, so this seems like a pretty sensible line.
163

164
00:11:58.490 --> 00:12:01.690
However, this wasn't exactly the right syntax.
164

165
00:12:01.700 --> 00:12:08.270
So whoever wrote this line of code had the right idea, but the syntax wasn't exactly right. The proper
165

166
00:12:08.270 --> 00:12:14.500
syntax is to use subs as a method of the sympy equation.
166

167
00:12:14.500 --> 00:12:21.490
So this should actually be equation dot subs and then we want to substitute X for three.
167

168
00:12:22.640 --> 00:12:23.430
And now this works.
168

169
00:12:23.450 --> 00:12:27.370
So it turns out that for x squared minus five X plus 10.
169

170
00:12:27.380 --> 00:12:29.820
And then the square root of all of that.
170

171
00:12:29.990 --> 00:12:34.640
If you set X to be equal to 3 The answer is around five and a half.
171

172
00:12:34.720 --> 00:12:35.120
All right.
172

173
00:12:35.120 --> 00:12:40.640
And now we get to the final cell down here and let's see what's wrong with this.
173

174
00:12:40.640 --> 00:12:42.730
Name Y is not defined... huh...
174

175
00:12:42.770 --> 00:12:48.320
So initially that seems like it's an incorrect error, like the error is an error because we actually
175

176
00:12:48.320 --> 00:12:50.720
do define y over here.
176

177
00:12:50.720 --> 00:12:58.010
However, what you have to be mindful of, is that in Python like an all programming languages, the case
177

178
00:12:58.130 --> 00:12:59.330
actually matters.
178

179
00:12:59.600 --> 00:13:02.140
So this is in fact a capital Y.
179

180
00:13:02.270 --> 00:13:04.850
And here I'm defining a lower case Y.
180

181
00:13:05.000 --> 00:13:07.560
So notice this is a lower case Y.
181

182
00:13:07.580 --> 00:13:13.890
This is an upper case y so I'm gonna change this to lower case Y.
182

183
00:13:14.040 --> 00:13:18.040
Run it again and then we get the nice looking result.
183

184
00:13:18.500 --> 00:13:18.890
All right.
184

185
00:13:18.920 --> 00:13:20.610
So that was it for this bug hunt.
185

186
00:13:20.640 --> 00:13:21.920
I hope you enjoyed it.
186

187
00:13:21.960 --> 00:13:29.550
I hope you found it a good experience to improve your coding skills and that's the end of this section
187

188
00:13:29.610 --> 00:13:33.320
of the course on introduction to sympy and latex.
188

189
00:13:33.330 --> 00:13:39.510
Now there is a lot more to learn about using sympy and a lot more to learn about integrating latex
189

190
00:13:39.540 --> 00:13:45.330
into python. And throughout the rest of the course you will continue learning more about these two modules.
