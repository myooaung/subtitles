WEBVTT
1
00:00:04.310 --> 00:00:11.120
In this video I'm going to talk to you about matrix multiplication so multiplying two matrices together

2
00:00:11.630 --> 00:00:18.200
you will learn in this video about the mechanics of matrix multiplication so how to actually implement

3
00:00:18.230 --> 00:00:19.600
the multiplication.

4
00:00:19.640 --> 00:00:26.770
But before we get there you have to learn the rule for when matrix multiplication is even valid.

5
00:00:26.810 --> 00:00:31.250
It is not always valid to multiply two matrices.

6
00:00:31.310 --> 00:00:34.460
So I will explain what I call the inner outer rule.

7
00:00:35.120 --> 00:00:36.570
And it basically works like this.

8
00:00:36.580 --> 00:00:39.050
So imagine you have two matrices.

9
00:00:39.060 --> 00:00:42.100
Those are represented by these boxes here.

10
00:00:42.170 --> 00:00:48.230
So you have a matrix on the left and the matrix on the right and you want to multiply these two matrices.

11
00:00:48.230 --> 00:00:54.300
So the first question is is it even valid to multiply these two matrices.

12
00:00:54.320 --> 00:01:01.250
So the answer to that question whether this multiplication is valid comes from looking at the sizes

13
00:01:01.310 --> 00:01:02.900
of the matrices.

14
00:01:02.930 --> 00:01:08.450
So what you do is you line up the matrices like this and then you write down the sizes of the matrices

15
00:01:08.450 --> 00:01:18.090
of this matrix is m rows by n columns and this matrix is n rows and K columns.

16
00:01:18.110 --> 00:01:26.300
So now you see that when the sizes are lined up like this there's four numbers in a row M and and K

17
00:01:26.870 --> 00:01:30.790
and then the question is are these two dimensions the same.

18
00:01:30.800 --> 00:01:35.520
So n n n that's what I call the inner sizes.

19
00:01:35.510 --> 00:01:42.750
So inner here refers to just the you know the spatial location when you line up these four numbers here.

20
00:01:42.800 --> 00:01:47.290
So m rows and columns and rows and columns.

21
00:01:47.390 --> 00:01:51.570
So the inner dimensions in this case match end by n.

22
00:01:51.740 --> 00:02:00.560
And when these two match then the multiplication is valid and if these two inner dimensions match then

23
00:02:00.620 --> 00:02:06.470
the multiplication or the size of the product matrix is given by the outer sizes here.

24
00:02:06.470 --> 00:02:09.800
So m by K and that's what you see here.

25
00:02:09.830 --> 00:02:16.700
So if these two sizes are different these two numbers are different than the matrix multiplication is

26
00:02:16.700 --> 00:02:17.930
not valid.

27
00:02:17.960 --> 00:02:20.410
Now that might seem like a strange rule.

28
00:02:20.540 --> 00:02:27.500
This will make more sense in a few moments when I explain the mechanisms of matrix multiplication but

29
00:02:27.500 --> 00:02:34.340
for now I think it's important to try to remember this picture this image and this idea that the inner

30
00:02:34.340 --> 00:02:40.230
sizes must match and then the outer size is defined the size of the product matrix.

31
00:02:40.280 --> 00:02:43.090
So let's see a few examples.

32
00:02:43.550 --> 00:02:46.090
Here you see two matrices A and B.

33
00:02:46.250 --> 00:02:49.100
And let's say that a is a five by two matrix.

34
00:02:49.100 --> 00:02:51.940
So there are five rows and two columns.

35
00:02:52.130 --> 00:02:54.500
And B is a two by seven matrix.

36
00:02:54.500 --> 00:02:58.270
So there are two rows and seven columns.

37
00:02:58.370 --> 00:03:05.120
So these two matrices can be multiplied together because they the inner dimensions are two and that's

38
00:03:05.120 --> 00:03:05.540
the same.

39
00:03:05.930 --> 00:03:13.160
And then when you multiply a by B the size of the output matrix is going to be five by seven.

40
00:03:13.190 --> 00:03:13.460
All right.

41
00:03:13.460 --> 00:03:14.750
Here is another example.

42
00:03:14.750 --> 00:03:16.700
This is actually the same two matrices.

43
00:03:16.700 --> 00:03:24.170
You can see the sizes are the same but now it's not possible to multiply these two matrices so a times

44
00:03:24.200 --> 00:03:32.450
B is a valid operation but B times A is actually not a valid operation because these inner sizes here

45
00:03:32.600 --> 00:03:34.430
do not match.

46
00:03:34.430 --> 00:03:34.730
Okay.

47
00:03:34.730 --> 00:03:37.380
And then here's another example C by a.

48
00:03:37.490 --> 00:03:41.240
And here these two dimensions are not the same.

49
00:03:41.240 --> 00:03:45.240
So C times A is also not a valid operation.

50
00:03:45.290 --> 00:03:52.520
Let's check this out in Python so we are going to use the NUM pi module here.

51
00:03:52.650 --> 00:03:56.030
I'm going to start by finding a few matrices.

52
00:03:56.130 --> 00:04:00.740
These are gonna be random matrices or matrices containing random numbers.

53
00:04:00.810 --> 00:04:04.340
So let's say this is like 14 by 10.

54
00:04:04.530 --> 00:04:08.160
And how about B is copy and paste here.

55
00:04:08.220 --> 00:04:09.940
Let's a B to B.

56
00:04:09.950 --> 00:04:11.990
How about also 14 by 10.

57
00:04:12.030 --> 00:04:18.050
And then maybe I'll say matrix C is 10 by 14.

58
00:04:18.390 --> 00:04:26.310
So to implement matrix multiplication in python you use the at symbol in between two matrices.

59
00:04:26.310 --> 00:04:32.840
So if you want to multiply A times B then this is the formulation.

60
00:04:32.850 --> 00:04:35.030
This is how you set it up.

61
00:04:35.730 --> 00:04:37.280
And look at this we get an error.

62
00:04:37.280 --> 00:04:43.590
It says Matt moles so matrix multiplication mismatch in its core dimension.

63
00:04:43.710 --> 00:04:45.950
So let's think about why that is the case.

64
00:04:45.960 --> 00:04:54.420
So we are trying to multiply A times B and A is 14 by 10.

65
00:04:54.720 --> 00:04:58.340
And B is also 14 by 10.

66
00:04:58.350 --> 00:05:01.710
So now the inner dimensions here are not matching.

67
00:05:01.710 --> 00:05:07.420
So this multiplication is not valid but let's see what we actually could multiply here.

68
00:05:07.440 --> 00:05:18.000
Well we could multiply C by B for example so matrix C that's gonna be 10 by 14 and then matrix B is

69
00:05:18.000 --> 00:05:19.490
14 by 10.

70
00:05:19.500 --> 00:05:25.190
So the inner sizes match and the outer sizes are 10 and 10.

71
00:05:25.230 --> 00:05:30.390
So let's see first of all I want to make sure that this is going to run and this does run and now I

72
00:05:30.390 --> 00:05:31.440
want to check the size.

73
00:05:31.440 --> 00:05:39.300
So I'm going to use a num pi function called Shape to check the the size of the shape of this matrix

74
00:05:39.630 --> 00:05:42.090
and it is indeed 10 by 10.

75
00:05:42.090 --> 00:05:44.010
Let's see what else we could do here.

76
00:05:44.010 --> 00:05:50.250
Well we could also turn B and C around turn that multiplication around so we could multiply B times

77
00:05:50.250 --> 00:05:51.010
C..

78
00:05:51.120 --> 00:05:54.930
And that is valid because this would be 10 and 10.

79
00:05:54.960 --> 00:06:01.080
So then I expect the resulting matrix to be of size 14 by 14.

80
00:06:01.080 --> 00:06:03.310
So B and C..

81
00:06:03.870 --> 00:06:04.230
Okay.

82
00:06:04.230 --> 00:06:04.820
And there you go.

83
00:06:04.830 --> 00:06:12.750
The shape of this product matrix of the size of this product matrix is 14 by 14.

84
00:06:12.750 --> 00:06:19.440
Now that you know the rule for when multiplication is valid I want to tell you briefly about the mechanics

85
00:06:19.530 --> 00:06:21.710
of matrix multiplication.

86
00:06:21.810 --> 00:06:26.450
Essentially it all boils down to computing a bunch of dot products.

87
00:06:26.490 --> 00:06:33.480
This is yet another example of how the dot product is a fundamental computation in linear algebra.

88
00:06:34.350 --> 00:06:37.590
So here we have two matrices they're both two by two.

89
00:06:37.590 --> 00:06:43.410
So the inner sizes are gonna be two and two of course and the outer sizes are also gonna be two and

90
00:06:43.410 --> 00:06:44.060
two.

91
00:06:44.070 --> 00:06:52.000
So this is going to be the product matrix that will be a two by two matrix what I'm going to do is build

92
00:06:52.000 --> 00:06:56.380
up this matrix one element at a time.

93
00:06:56.380 --> 00:07:03.070
So the first element in this matrix which is the element in the first row in the first column is the

94
00:07:03.070 --> 00:07:09.790
result of computing the dot product between the first row of the Left matrix and the first column of

95
00:07:09.790 --> 00:07:10.990
the right matrix.

96
00:07:11.110 --> 00:07:15.540
So you see this is 0 times a plus 1 times C..

97
00:07:15.550 --> 00:07:18.220
So that is the definition of the dot product.

98
00:07:18.850 --> 00:07:19.230
And then.

99
00:07:19.240 --> 00:07:26.020
So this was the first row in the first column to compute the element in the first column and the second

100
00:07:26.020 --> 00:07:33.220
row you compute the dot product between the second row of the Left matrix and the first column of the

101
00:07:33.220 --> 00:07:37.390
right matrix I think you can see where this is going.

102
00:07:37.410 --> 00:07:39.980
This element up here this top right element.

103
00:07:40.050 --> 00:07:43.230
This comes from the first row and the second column.

104
00:07:43.290 --> 00:07:50.910
And of course this last element here comes from the dot product between the second row of the left matrix

105
00:07:50.970 --> 00:08:00.720
and the second row or the second column of the right matrix so more generally every element in the product

106
00:08:00.720 --> 00:08:07.290
matrix comes from the corresponding or the top product between the corresponding row in the left matrix

107
00:08:07.350 --> 00:08:10.430
and the column in the right matrix.

108
00:08:10.740 --> 00:08:15.630
And that description that mechanism leads to the exercise for this video.

109
00:08:15.630 --> 00:08:22.860
So what I want you to do in this exercise is write a python function that will take two matrices as

110
00:08:22.950 --> 00:08:31.010
input you have to first check whether the multiplication is even valid and if the multiplication is

111
00:08:31.010 --> 00:08:33.950
not valid then you just produce an error message.

112
00:08:33.950 --> 00:08:40.700
And if the multiplication is valid then you return the product of the multiplication between these two

113
00:08:40.700 --> 00:08:41.690
matrices.

114
00:08:41.750 --> 00:08:48.910
And now importantly I want you to implement matrix multiplication via dot products of rows and columns.

115
00:08:48.950 --> 00:08:55.520
So basically using the mechanism that I explained in the previous slide don't just fall back on using

116
00:08:55.520 --> 00:09:02.090
the at operator and the reason to do this is that writing out these algorithms and functions really

117
00:09:02.090 --> 00:09:06.610
helps you understand and internalize these mathematical operations.

118
00:09:06.740 --> 00:09:11.820
And of course that also helps you become a better python programmer anyway.

119
00:09:12.170 --> 00:09:12.740
Very good.

120
00:09:12.740 --> 00:09:14.620
So now pause the video.

121
00:09:14.630 --> 00:09:16.340
Write some functions write some code.

122
00:09:16.850 --> 00:09:24.990
And now I'm going to switch to Python and show you how I set up this problem so I'm going to call this

123
00:09:25.050 --> 00:09:26.180
function.

124
00:09:26.400 --> 00:09:34.620
Matrix multiplication and it's going to take two matrices as input a and b and the first thing we need

125
00:09:34.620 --> 00:09:42.330
to do is check the sizes so check sizes and give error.

126
00:09:42.330 --> 00:09:47.610
If multiplication multiplication is not valid.

127
00:09:48.390 --> 00:09:49.500
So what do we want to do.

128
00:09:49.500 --> 00:09:56.010
We want the inner sizes which corresponds to the number of columns in the first Matrix and the number

129
00:09:56.010 --> 00:09:58.640
of rows in the second matrix.

130
00:09:58.740 --> 00:10:05.190
And so to make this a little bit more convenient what I'm actually gonna do is get the matrix sizes

131
00:10:05.190 --> 00:10:10.530
here so I'm gonna say size of a equals num PI that shape up a.

132
00:10:10.560 --> 00:10:16.790
So using this same function that I introduced you to here and that's going to give me an output that's

133
00:10:16.800 --> 00:10:23.130
going to look like this is going to be a tuple it's going to have two elements and that's going to correspond

134
00:10:23.130 --> 00:10:30.090
to the number of rows and the number of columns in matrix A and then of course we need this as well

135
00:10:30.090 --> 00:10:32.630
for B.

136
00:10:33.000 --> 00:10:34.610
And now we can check these sizes.

137
00:10:34.620 --> 00:10:43.660
So we want to see that the inner sizes match so that corresponds to the number of columns in a row.

138
00:10:43.770 --> 00:10:52.560
And then I want to say if that is actually not equal to the number of rows in B then we can raise an

139
00:10:52.560 --> 00:10:53.330
error message.

140
00:10:53.390 --> 00:11:02.820
That's going to say array I use an array error and here I'm going to write the inner dimensions in Shin's

141
00:11:04.760 --> 00:11:11.420
don't match and then I'm going to use an escape and then single quote here to make sure that this quote

142
00:11:11.450 --> 00:11:12.290
is going to print.

143
00:11:13.050 --> 00:11:13.410
OK.

144
00:11:13.430 --> 00:11:19.180
So I would like to test just this part of the function so far before going any further.

145
00:11:19.190 --> 00:11:25.300
So what I'm gonna do is run this cell to get Python to read this function to build this function.

146
00:11:25.460 --> 00:11:28.790
And now I'm going to create two matrices.

147
00:11:28.790 --> 00:11:30.760
Again random matrices.

148
00:11:30.890 --> 00:11:35.470
Just because these are really easy to generate I don't have to worry about dealing with you know sort

149
00:11:35.470 --> 00:11:42.220
of coming up with numbers on my own I don't have to worry about all the formatting for creating matrices.

150
00:11:42.290 --> 00:11:47.150
So I'm going to set this first set of matrices to be valid.

151
00:11:47.150 --> 00:11:54.130
So the inner dimensions here so if I'm multiplying a times b then the inner dimensions are 6 and 6.

152
00:11:54.140 --> 00:11:55.330
So that should actually work.

153
00:11:55.340 --> 00:11:57.500
I shouldn't get any error message.

154
00:11:57.500 --> 00:12:01.240
In fact I really shouldn't get anything out of this function.

155
00:12:01.340 --> 00:12:05.420
This is going to be false and then it's not going to give an error.

156
00:12:05.900 --> 00:12:16.100
So let's see matrix multiplication I input a and b and I run that code and I don't get any errors.

157
00:12:16.110 --> 00:12:17.350
I don't get anything.

158
00:12:17.400 --> 00:12:19.770
Okay so now let's try changing it.

159
00:12:19.770 --> 00:12:27.630
So now say it's six and five over here and this actually does produce an error although actually the

160
00:12:27.690 --> 00:12:30.100
error was not what I was intending it to be.

161
00:12:30.150 --> 00:12:33.720
This should say value error is a typo.

162
00:12:33.720 --> 00:12:34.860
My apologies.

163
00:12:34.890 --> 00:12:36.730
So let's see now.

164
00:12:36.780 --> 00:12:40.350
This is the error is inner dimensions don't match.

165
00:12:40.350 --> 00:12:40.860
All right.

166
00:12:40.860 --> 00:12:44.590
And we do get the single quote here for the contraction.

167
00:12:44.670 --> 00:12:45.810
Okay so that's good.

168
00:12:45.810 --> 00:12:50.880
That's part of this function and that's the error checking part.

169
00:12:50.880 --> 00:12:54.210
Now we need to actually implement the multiplication.

170
00:12:54.210 --> 00:13:00.690
So I'm going to start by initializing the output matrix and I'll just call that C.

171
00:13:00.690 --> 00:13:07.050
So this is going to be a zeros matrix and it's going to correspond to the.

172
00:13:07.080 --> 00:13:14.150
Sighs Well the the outer dimensions so size of a zero and then size of B 1.

173
00:13:14.160 --> 00:13:17.070
Now it's time to compute the product.

174
00:13:17.100 --> 00:13:18.490
So compute.

175
00:13:18.570 --> 00:13:18.930
Let's see.

176
00:13:18.930 --> 00:13:26.620
So what we need to do now is loop over all of the rows in matrix A and the columns in matrix B.

177
00:13:26.620 --> 00:13:37.500
So I'm gonna say for I in range of now sometimes I write it like this size a zero.

178
00:13:37.640 --> 00:13:40.250
But there's actually a little bit of a simplification.

179
00:13:40.470 --> 00:13:46.120
You can simply input one number into the range function and it will by default start at zero.

180
00:13:46.170 --> 00:13:51.060
Sometimes I think it's a little less confusing to write it out explicitly with the zero.

181
00:13:51.090 --> 00:13:57.300
But you know it's good to have multiple options anyway so we are gonna loop over the rows and then loop

182
00:13:57.420 --> 00:14:00.870
over the columns in B.

183
00:14:01.020 --> 00:14:02.740
So that's going to look like this.

184
00:14:02.970 --> 00:14:05.670
And now we are building up this matrix element y.

185
00:14:05.690 --> 00:14:13.440
So the IIS throw I should say the elements in the Iron Throne and JF column in matrix C is going to

186
00:14:13.440 --> 00:14:24.940
be the dot product between each corresponding row of A and the corresponding column in B.

187
00:14:24.990 --> 00:14:27.270
All right so let's see.

188
00:14:28.050 --> 00:14:33.020
Change this back to 6 and we get an error.

189
00:14:33.030 --> 00:14:38.660
This says Uh okay so the error is on the line computing the dot product.

190
00:14:38.670 --> 00:14:40.340
And I see what the error is.

191
00:14:40.350 --> 00:14:47.010
I was mindlessly just writing J comma all when it actually should be all come a J because this is the

192
00:14:47.040 --> 00:14:51.420
J column not the j of the row from B all right.

193
00:14:51.450 --> 00:14:52.020
Let's see.

194
00:14:52.840 --> 00:14:53.380
OK.

195
00:14:53.400 --> 00:14:58.140
So again we don't get any errors but I didn't actually return anything.

196
00:14:58.140 --> 00:15:05.180
So this function computed C possibly correctly but it didn't actually return the matrix C.

197
00:15:05.210 --> 00:15:13.950
So we need to say return c so that's going to be the output and then I will write C here.

198
00:15:14.010 --> 00:15:14.450
All right.

199
00:15:14.460 --> 00:15:16.550
So here we get a results.

200
00:15:16.560 --> 00:15:18.960
But is this the correct result.

201
00:15:18.960 --> 00:15:23.910
It didn't produce any python errors but that doesn't necessarily mean that I've done the right thing

202
00:15:24.210 --> 00:15:25.860
in terms of math.

203
00:15:25.920 --> 00:15:34.080
So in order to check this what I'm going to do is compare this output against the output of Python's

204
00:15:34.080 --> 00:15:36.150
built in matrix multiplication.

205
00:15:36.150 --> 00:15:42.330
So here are going to use the app operator the at symbol for matrix multiplication.

206
00:15:42.330 --> 00:15:51.870
So now I compute C1 and C2 and then the idea is that if c 1 is equal to C2 which means that I have written

207
00:15:51.870 --> 00:15:59.150
the correct algorithm here then we should see that this result is going to be all zeros.

208
00:15:59.190 --> 00:16:03.970
And remarkably enough we get a full matrix of zeros.

209
00:16:04.140 --> 00:16:08.040
And I guess you know maybe it's nice to see that these really are different.

210
00:16:08.040 --> 00:16:12.510
So I will print out maybe it looks a little bit better if I do it this way.

211
00:16:12.510 --> 00:16:14.440
Print like this.

212
00:16:14.500 --> 00:16:14.790
Okay.

213
00:16:14.820 --> 00:16:21.780
So here you see that C1 gives us some result and then C1 minus C2 gives us all zeros which means that

214
00:16:21.780 --> 00:16:27.810
C2 is the same thing and C one which means that our algorithm is correct.

215
00:16:27.810 --> 00:16:34.650
Now needless to say as I've mentioned several times before in this course you really shouldn't be implementing

216
00:16:34.710 --> 00:16:37.020
matrix multiplication this way.

217
00:16:37.020 --> 00:16:44.880
You should always do it this way but it's nice to see the algorithm written out so that the mathematics

218
00:16:44.970 --> 00:16:48.870
is a lot less mysterious and complicated.

219
00:16:48.870 --> 00:16:55.800
In this video you learn the mechanics of matrix multiplication and you saw another application of the

220
00:16:55.800 --> 00:17:03.510
dot product and you also learn the inner or outer rule of when it's valid to multiply two matrices.
