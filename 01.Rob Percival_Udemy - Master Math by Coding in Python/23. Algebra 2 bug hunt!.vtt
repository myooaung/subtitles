WEBVTT
1
00:00:03.370 --> 00:00:06.280
Well it's the end of this section of the course.

2
00:00:06.370 --> 00:00:08.000
And you know what that means.

3
00:00:08.140 --> 00:00:09.250
Another bug hunt.

4
00:00:09.640 --> 00:00:15.760
So if you haven't already you should go through this script and basically what I recommend doing is

5
00:00:15.820 --> 00:00:21.070
running each cell and finding the errors and then fixing them.

6
00:00:21.400 --> 00:00:27.990
And then you have to keep in mind that some of the errors are coding errors and some errors in this

7
00:00:27.990 --> 00:00:31.400
script are actually not problems with the code.

8
00:00:31.480 --> 00:00:35.860
There are problems with math or with plotting or something else.

9
00:00:35.860 --> 00:00:36.530
All right.

10
00:00:36.550 --> 00:00:41.110
So now I'm going to start going through this script.

11
00:00:41.140 --> 00:00:43.150
Each cell at a time.

12
00:00:43.150 --> 00:00:43.350
All right.

13
00:00:43.360 --> 00:00:48.560
So here it looks like we are creating a list and then printing out the list.

14
00:00:48.970 --> 00:00:52.010
And we get an error that says invalid syntax.

15
00:00:52.060 --> 00:00:55.420
Now actually this one's fairly easy to debug.

16
00:00:55.570 --> 00:01:03.420
A list has to be separated by commas like this.

17
00:01:03.580 --> 00:01:04.050
All right.

18
00:01:04.060 --> 00:01:06.260
That was pretty straightforward.

19
00:01:06.280 --> 00:01:08.920
Let's see and add all the numbers together.

20
00:01:08.950 --> 00:01:15.190
So we have num PI that adds I know already this is going to crash because I haven't imported num pi

21
00:01:15.190 --> 00:01:15.940
yet.

22
00:01:15.940 --> 00:01:18.690
And I like to do that at the top of the script.

23
00:01:18.700 --> 00:01:29.060
So I'm going to click on the Insert menu option insert cell above and here import known pi as an P..

24
00:01:29.110 --> 00:01:29.440
All right.

25
00:01:29.440 --> 00:01:34.220
So now let's see hot invalid number of arguments.

26
00:01:34.270 --> 00:01:39.700
Well maybe the problem is with this add function because you might remember that typically we use the

27
00:01:39.700 --> 00:01:42.160
sum function but this is at.

28
00:01:42.160 --> 00:01:49.380
So let me get the help message for here and and see what this function is all about.

29
00:01:49.390 --> 00:01:51.490
So add x1 x2.

30
00:01:51.530 --> 00:01:54.820
So these are actually both required inputs.

31
00:01:54.820 --> 00:01:57.670
There's two required inputs x1 and x2.

32
00:01:57.760 --> 00:02:01.020
And this says add arguments element twice.

33
00:02:01.060 --> 00:02:07.750
So in fact num PI that ADD is what you would do if you have let's say two vectors or two matrices and

34
00:02:07.750 --> 00:02:14.850
you want to add them together element by element the function we want here is some and then we can actually

35
00:02:14.850 --> 00:02:16.020
do a quick confirmation.

36
00:02:16.020 --> 00:02:21.470
So four plus six is 10 plus one and one in three is five.

37
00:02:21.470 --> 00:02:23.340
So that makes 15.

38
00:02:23.370 --> 00:02:23.720
All right.

39
00:02:23.730 --> 00:02:29.160
So here we want to plot the cumulative sum of a list of numbers.

40
00:02:29.200 --> 00:02:30.890
Oh and there's plenty.

41
00:02:30.930 --> 00:02:43.260
So before even running that code I'm going to import import mat plot lib dot pie plot as P L T.

42
00:02:43.260 --> 00:02:43.580
All right.

43
00:02:43.590 --> 00:02:46.280
So now let's see what we get.

44
00:02:46.290 --> 00:02:46.560
Okay.

45
00:02:46.590 --> 00:02:52.980
So the goal here was to plot the cumulative sum of a list of numbers.

46
00:02:52.980 --> 00:03:00.300
So this is the list of numbers now accumulative sum should be as long as the list as the array of numbers

47
00:03:00.330 --> 00:03:03.410
but we're only just getting one number here.

48
00:03:03.570 --> 00:03:05.040
So let's see what's going on.

49
00:03:05.140 --> 00:03:09.540
This this is supposed to be the function QM sum for a cumulative sum.

50
00:03:10.140 --> 00:03:10.650
Mm hmm.

51
00:03:10.650 --> 00:03:12.710
So we still just get one number.

52
00:03:12.780 --> 00:03:14.590
What is going on here huh.

53
00:03:14.610 --> 00:03:16.740
Look at this this looks like a typo.

54
00:03:16.740 --> 00:03:23.040
The list is the letter L but here we have the number one.

55
00:03:23.070 --> 00:03:23.760
All right.

56
00:03:23.790 --> 00:03:25.390
Pretty tricky.

57
00:03:25.460 --> 00:03:25.760
OK.

58
00:03:25.770 --> 00:03:27.980
So this is the right answer.

59
00:03:28.020 --> 00:03:30.980
It's interesting that it curves down and then curves back up.

60
00:03:30.990 --> 00:03:36.930
And that's because we start with negative numbers as we sum together the first couple of numbers they

61
00:03:36.930 --> 00:03:43.540
get more and more negative and then we start getting up to positive numbers here.

62
00:03:43.560 --> 00:03:44.340
Oh right.

63
00:03:44.400 --> 00:03:47.130
So now let's see what we're gonna do here.

64
00:03:47.130 --> 00:03:49.790
So here we have an equation.

65
00:03:49.890 --> 00:03:52.320
Actually this isn't really an equation it's a polynomial.

66
00:03:52.320 --> 00:03:55.170
Let's make it an equation by setting it equal to zero.

67
00:03:55.590 --> 00:04:02.650
So for minus two x plus five times x cubed equals zero.

68
00:04:02.910 --> 00:04:04.790
And actually we don't really care about this.

69
00:04:04.800 --> 00:04:06.210
We just care about this.

70
00:04:06.210 --> 00:04:12.500
So here are the coefficients for four minus two minus two five and five.

71
00:04:12.510 --> 00:04:13.980
So that seems correct.

72
00:04:14.050 --> 00:04:18.720
And now we want to solve for the roots of this expression.

73
00:04:18.720 --> 00:04:24.900
So setting this polynomial equal to zero and then it looks like we're doing something with simple and

74
00:04:24.900 --> 00:04:25.890
display and math.

75
00:04:25.890 --> 00:04:27.840
So neither of these are imported yet.

76
00:04:27.860 --> 00:04:38.900
So let's go back here and say import simple pie as Sim and from I python.

77
00:04:39.010 --> 00:04:43.950
Display import display and math.

78
00:04:44.750 --> 00:04:45.610
Oh right.

79
00:04:45.620 --> 00:04:55.410
So now maybe this will run OK so looking at this polynomial which uses these coefficients and the symbolic

80
00:04:55.410 --> 00:04:58.700
variable X this doesn't actually map onto this.

81
00:04:58.710 --> 00:05:04.340
The numbers are the same but for a polynomial it's not that coefficients that's so important.

82
00:05:04.350 --> 00:05:06.040
It's the coefficients.

83
00:05:06.090 --> 00:05:08.560
And they're pairing with the variables.

84
00:05:08.580 --> 00:05:10.890
So this is totally totally wrong.

85
00:05:11.630 --> 00:05:11.910
Okay.

86
00:05:11.940 --> 00:05:13.410
So what is going on here.

87
00:05:13.410 --> 00:05:17.840
Well what's going on here first is that we have to list the coefficients the other way.

88
00:05:17.840 --> 00:05:21.040
So we have to put the largest order term first.

89
00:05:21.060 --> 00:05:26.310
So it should be five and then minus two and then four.

90
00:05:26.310 --> 00:05:29.160
However that is still not the right answer.

91
00:05:29.190 --> 00:05:30.960
So it's getting closer.

92
00:05:30.990 --> 00:05:34.770
So we have four on its own minus two X and minus two X..

93
00:05:34.770 --> 00:05:40.870
However here we have five x cubed and here is five X squared.

94
00:05:40.980 --> 00:05:47.880
So the problem here is that we need to account for all of the X terms.

95
00:05:47.880 --> 00:05:54.420
So really implicitly there is zero times X squared in here.

96
00:05:54.420 --> 00:05:56.020
So there is actually.

97
00:05:56.100 --> 00:06:02.790
So there there needs to be four terms in here x to the zero x to the one X to the power of to an X to

98
00:06:02.790 --> 00:06:04.850
the power of three.

99
00:06:04.980 --> 00:06:11.310
The real coefficients need or the sort of true vertical coefficients need to have an extra zero in the

100
00:06:11.310 --> 00:06:12.440
middle here.

101
00:06:12.660 --> 00:06:16.040
And then we got the correct polynomial.

102
00:06:16.200 --> 00:06:16.470
Okay.

103
00:06:16.470 --> 00:06:19.470
And so looks like nothing is done with this roots variable.

104
00:06:19.470 --> 00:06:21.930
I think that's just here to distract us.

105
00:06:21.930 --> 00:06:24.230
So I'm going to ignore that.

106
00:06:24.300 --> 00:06:25.130
All right.

107
00:06:25.170 --> 00:06:25.920
Let's see.

108
00:06:25.920 --> 00:06:28.920
So this is a function quad E.

109
00:06:28.920 --> 00:06:32.610
So I think this is a function that solves the quadratic formula.

110
00:06:32.610 --> 00:06:39.690
That's certainly what this looks like based on the three coefficients a b and c and then it returns

111
00:06:39.690 --> 00:06:40.550
some output.

112
00:06:40.560 --> 00:06:43.100
And then I guess here we are printing that output.

113
00:06:43.110 --> 00:06:43.410
All right.

114
00:06:43.740 --> 00:06:45.620
Let's see what happens here.

115
00:06:45.850 --> 00:06:46.440
Mm hmm.

116
00:06:46.440 --> 00:06:46.780
Okay.

117
00:06:46.800 --> 00:06:49.380
So name SDP is not defined.

118
00:06:49.470 --> 00:06:52.210
So first of all SMP was for PSI Pi.

119
00:06:52.410 --> 00:07:01.440
And we're using that here to get a complex result from a square root of a negative number.

120
00:07:01.510 --> 00:07:01.810
OK.

121
00:07:01.820 --> 00:07:05.650
So let us import the CI pi module here.

122
00:07:05.660 --> 00:07:11.230
So I will say import CI pi as S P.

123
00:07:11.330 --> 00:07:13.550
And now let's go back down.

124
00:07:13.550 --> 00:07:14.640
Here we are.

125
00:07:15.030 --> 00:07:15.340
Okay.

126
00:07:15.350 --> 00:07:16.810
So we still get an error.

127
00:07:16.820 --> 00:07:19.230
It's not related to SMP anymore.

128
00:07:19.250 --> 00:07:22.520
Now it says name out not defined.

129
00:07:22.520 --> 00:07:27.200
And the issue here is that we use this variable out without defining.

130
00:07:27.230 --> 00:07:32.630
So we're indexing into out without defining that variable first.

131
00:07:32.660 --> 00:07:34.310
So there's two ways to solve this.

132
00:07:34.310 --> 00:07:40.520
One is you could initialize the variable and I already showed you how to do that in a previous video.

133
00:07:40.520 --> 00:07:46.550
So in fact I'm going to show you a different solution here an equally good solution in this case.

134
00:07:46.550 --> 00:07:50.740
And that is to set these two to be separate output variables.

135
00:07:50.750 --> 00:08:00.290
This was for the two roots of this polynomial and now what I'm going to return is a list of out 0 and

136
00:08:00.380 --> 00:08:01.880
alt 1.

137
00:08:01.990 --> 00:08:02.290
Okay.

138
00:08:02.300 --> 00:08:05.330
And then we get our two results here.

139
00:08:05.390 --> 00:08:09.850
Now I want to show you that using PSI Pi is not the only solution.

140
00:08:09.860 --> 00:08:13.680
So we technically could solve this problem a different way.

141
00:08:13.850 --> 00:08:21.290
Keeping with the known pi module and you will remember that the problem with using num pi dot square

142
00:08:21.290 --> 00:08:25.720
root is that it doesn't allow for complex valued solutions.

143
00:08:25.760 --> 00:08:30.020
So let's see for example what happens if I make C a bit higher.

144
00:08:30.040 --> 00:08:30.270
Okay.

145
00:08:30.290 --> 00:08:37.540
So then we get n n n n when really these two have valid solutions they're just complex valued.

146
00:08:37.580 --> 00:08:45.170
Now we can get around this by saying these types of data type equals complex and then I will repeat

147
00:08:45.170 --> 00:08:45.700
that here.

148
00:08:45.710 --> 00:08:51.350
Data Type equals complex.

149
00:08:51.350 --> 00:08:56.030
And now if I run this again we get complex results so that's fine.

150
00:08:56.030 --> 00:09:03.150
However if I go back to setting this b to now you can see we're actually still getting complex value

151
00:09:03.150 --> 00:09:11.670
results so this input is forcing the output to be complex even if the imaginary part is zero.

152
00:09:11.690 --> 00:09:14.440
So on the one hand there's nothing really wrong with that.

153
00:09:14.450 --> 00:09:24.500
However I kind of prefer the simplest solution where in this case the output is real valued.

154
00:09:24.500 --> 00:09:28.960
And here it becomes complex valued when it needs to be all right.

155
00:09:29.000 --> 00:09:30.110
Enough about that.

156
00:09:30.500 --> 00:09:31.870
Let's move on to the next one.

157
00:09:31.940 --> 00:09:35.990
Speaking of complex numbers now we get to work with complex numbers.

158
00:09:35.990 --> 00:09:36.440
Let's see.

159
00:09:36.440 --> 00:09:42.310
So create a complex number and then it looks like we are plotting that complex number.

160
00:09:42.340 --> 00:09:42.620
OK.

161
00:09:42.620 --> 00:09:44.690
So first of all we get a warning.

162
00:09:44.870 --> 00:09:50.720
This says passing one of these values as a boolean is depreciated.

163
00:09:50.730 --> 00:09:54.480
So this concerns this must concern plot grid.

164
00:09:54.650 --> 00:10:02.580
And essentially saying plot that grid on or true was correct syntax in older versions of python.

165
00:10:02.630 --> 00:10:05.540
However it is now depreciated.

166
00:10:05.540 --> 00:10:09.080
And so this isn't really an error percentage but it is a warning.

167
00:10:09.140 --> 00:10:13.990
And when you get a warning message that says something is depreciated then it's a good idea to fix it

168
00:10:14.000 --> 00:10:18.130
because it means that this sort of thing actually could produce an error.

169
00:10:18.140 --> 00:10:22.280
It could cause Python to crash at some point in the future.

170
00:10:22.640 --> 00:10:22.900
OK.

171
00:10:22.910 --> 00:10:24.350
So now we don't get any errors.

172
00:10:24.350 --> 00:10:25.130
Let's see.

173
00:10:25.130 --> 00:10:28.820
So the real part is for the imaginary part is minus six.

174
00:10:28.820 --> 00:10:31.560
So Hunt the real part is for you.

175
00:10:31.700 --> 00:10:35.910
So actually this dot should be around here somewhere.

176
00:10:35.930 --> 00:10:39.380
So why is the real why is the dot over here.

177
00:10:39.380 --> 00:10:46.670
Well if we look at this actually we are inputting the imaginary part and then the real part into num

178
00:10:46.670 --> 00:10:48.830
pi dot complex.

179
00:10:48.890 --> 00:10:49.700
So let's see.

180
00:10:49.700 --> 00:10:54.880
We need to put the real part in first and then the imaginary part.

181
00:10:55.010 --> 00:11:00.430
It can get confusing to remember all of the orders of inputs in every function.

182
00:11:00.560 --> 00:11:05.450
And in general I really don't recommend trying to memorize all sorts of things.

183
00:11:05.510 --> 00:11:11.060
Now in this case I think the order of inputs is fairly easy to remember because when you're writing

184
00:11:11.060 --> 00:11:13.480
out a complex number you always write it out.

185
00:11:13.480 --> 00:11:16.980
The real part and then plus or minus the imaginary part.

186
00:11:17.030 --> 00:11:22.760
But there's also nothing wrong with checking the health Doc and this tells you that you check that you

187
00:11:22.760 --> 00:11:27.100
input the real part first and then the imaginary part.

188
00:11:27.110 --> 00:11:27.560
All right.

189
00:11:27.560 --> 00:11:29.540
So now let's see.

190
00:11:29.570 --> 00:11:29.840
OK.

191
00:11:29.870 --> 00:11:30.560
This looks good.

192
00:11:30.560 --> 00:11:33.970
The real part is for the imaginary part is minus six.

193
00:11:33.980 --> 00:11:34.880
So here's four.

194
00:11:34.880 --> 00:11:37.750
And here is minus six.

195
00:11:37.760 --> 00:11:39.220
All right.

196
00:11:39.350 --> 00:11:44.210
So here it looks like we're trying to create a symbolic complex number.

197
00:11:44.250 --> 00:11:48.490
Now I've already imported this simple module so that should be good.

198
00:11:48.490 --> 00:11:49.370
And let's see.

199
00:11:49.630 --> 00:11:50.350
All right.

200
00:11:50.360 --> 00:11:55.060
So the imaginary operator in simple is not dot 1 J.

201
00:11:55.070 --> 00:11:58.010
It is dot I like this.

202
00:11:58.010 --> 00:11:58.470
All right.

203
00:11:58.490 --> 00:12:03.330
Now let's see OK so here we get it sort of funny looking out but let's see.

204
00:12:03.350 --> 00:12:04.700
So this is Z.

205
00:12:04.700 --> 00:12:12.740
This complex no z times it's conjugate equals so a whole bunch of stuff and you might remember from

206
00:12:13.040 --> 00:12:20.240
the video on complex multiplication and the conjugate that the conjugate can be indicated either using

207
00:12:20.240 --> 00:12:25.100
an asterisk or using a line a bar over the complex number.

208
00:12:25.610 --> 00:12:28.570
But this doesn't really look like what I expect.

209
00:12:28.580 --> 00:12:32.030
I expect this to say a squared plus B squared.

210
00:12:32.330 --> 00:12:37.330
And actually what's happening is that what we need to do is force a and b to be real numbers.

211
00:12:37.340 --> 00:12:39.450
But someone wrote really equals true.

212
00:12:39.790 --> 00:12:39.990
OK.

213
00:12:40.010 --> 00:12:46.440
So I don't know if that's supposed to be a joke or if that was a honest typo but it should be real.

214
00:12:46.460 --> 00:12:47.240
Equals true.

215
00:12:47.250 --> 00:12:47.630
Aha.

216
00:12:47.660 --> 00:12:54.770
And now we get this nice feature of complex multiplication that a complex number of times it's conjugate

217
00:12:54.860 --> 00:12:59.190
equals the real part squared plus the imaginary part squared.

218
00:12:59.210 --> 00:13:00.770
All right very good.

219
00:13:01.370 --> 00:13:03.960
Let's see what we're trying to do here.

220
00:13:04.360 --> 00:13:10.180
So it's something about phase angles and then generating a plot and a vector from the origin.

221
00:13:10.190 --> 00:13:13.670
Let's just try to run this code and see what happens.

222
00:13:13.970 --> 00:13:20.430
Well there aren't any explicit errors so there's nothing really wrong with the code per say.

223
00:13:20.480 --> 00:13:23.790
Let's see if maybe there's something wrong with the vector.

224
00:13:24.140 --> 00:13:24.890
So let's see.

225
00:13:24.890 --> 00:13:33.010
This should be a phase angle of pi over four which is exactly what this looks like.

226
00:13:33.020 --> 00:13:36.230
So this would be an angle of Pi sticking over this way.

227
00:13:36.230 --> 00:13:37.820
This would be pi over to.

228
00:13:37.820 --> 00:13:40.700
So this is pi over four and let's see.

229
00:13:40.730 --> 00:13:41.820
This should be the coast.

230
00:13:41.840 --> 00:13:42.520
Huh.

231
00:13:42.660 --> 00:13:42.940
Okay.

232
00:13:42.950 --> 00:13:45.530
So actually this is the cosine axis.

233
00:13:45.530 --> 00:13:47.750
And this is the sine axis.

234
00:13:47.750 --> 00:13:50.210
And you can see that as well when you're looking at this plot.

235
00:13:50.210 --> 00:13:58.820
So we're always plotting cosine and then sine cosine sine cosine sine and so therefore the labels are

236
00:13:58.820 --> 00:14:00.260
actually incorrect.

237
00:14:00.260 --> 00:14:00.990
This is the.

238
00:14:01.250 --> 00:14:06.980
So the X axis is for cosine the y axis is for sine.

239
00:14:06.980 --> 00:14:07.220
All right.

240
00:14:07.220 --> 00:14:09.570
That one was a little tricky.

241
00:14:09.600 --> 00:14:11.620
Let's see what's going on here.

242
00:14:11.640 --> 00:14:18.870
It looks like we are generating log space and linearly space numbers between two and a hundred and there

243
00:14:18.870 --> 00:14:20.420
should be three of them.

244
00:14:20.420 --> 00:14:24.510
And and then they get plotted okay.

245
00:14:24.520 --> 00:14:29.140
So immediately looking at the plot I see that the legends are wrong.

246
00:14:29.200 --> 00:14:30.400
This is not linear.

247
00:14:30.400 --> 00:14:34.070
And this is not log this part is correct.

248
00:14:34.070 --> 00:14:41.300
So we have log and log linear linear but here in the legend function.

249
00:14:41.300 --> 00:14:48.130
Then I write linear and log and this order is going to override these orders here.

250
00:14:48.200 --> 00:14:50.240
So I'm just going to delete that here.

251
00:14:50.240 --> 00:14:57.140
Okay so this looks better but you know this says N equals three number of steps.

252
00:14:57.140 --> 00:14:59.750
There's clearly not three steps.

253
00:14:59.750 --> 00:15:02.240
There's a lot more than three here.

254
00:15:02.240 --> 00:15:04.170
So let's see what's going on.

255
00:15:04.200 --> 00:15:10.220
Okay so what's going on here is that normally I've been showing you to use the functions Lynn space

256
00:15:10.220 --> 00:15:13.110
and log space with three inputs.

257
00:15:13.370 --> 00:15:18.510
So the the lower bound the upper bound and the number of steps between the two bounds.

258
00:15:18.620 --> 00:15:22.240
But here I haven't inputted any third input.

259
00:15:22.790 --> 00:15:28.730
So now I'm gonna look at the help desk for this and this says num equals 50.

260
00:15:28.760 --> 00:15:29.040
Okay.

261
00:15:29.060 --> 00:15:35.270
So the default value if you don't provide a third input is 50 steps.

262
00:15:35.270 --> 00:15:35.600
All right.

263
00:15:35.600 --> 00:15:41.820
So this has to be comma and and also comma n here.

264
00:15:41.840 --> 00:15:42.790
All right.

265
00:15:42.830 --> 00:15:46.050
Looking better let's see.

266
00:15:46.050 --> 00:15:52.590
So the goal is to plot the point on the function closest to f of x equals point five.

267
00:15:52.620 --> 00:15:55.560
That's a pretty interesting objective.

268
00:15:55.740 --> 00:15:57.820
And it's also a pretty neat function to look at.

269
00:15:57.820 --> 00:16:01.900
This is called a sigmoid by the way let me write this down I'll make a title.

270
00:16:02.160 --> 00:16:08.580
So this is called a peel t the title sigmoid function.

271
00:16:08.580 --> 00:16:11.930
In fact this is a reverse sigmoid function.

272
00:16:12.120 --> 00:16:18.170
The normal sigmoid function starts at zero and then it goes up smoothly and then it goes to 1.

273
00:16:18.330 --> 00:16:24.540
So you can see looking at the Y axis that there is some value of this sigmoid function that is really

274
00:16:24.540 --> 00:16:26.260
close to point 5.

275
00:16:26.370 --> 00:16:32.700
And it seems like this red dot is on point five but it's certainly not on the function itself.

276
00:16:32.700 --> 00:16:34.920
So let's first see how I solve this.

277
00:16:34.920 --> 00:16:42.590
So it looks like we're typing ARG min and then the function minus point five which is the value that

278
00:16:42.590 --> 00:16:43.640
we're looking for.

279
00:16:43.790 --> 00:16:46.180
And then a B.S. of that.

280
00:16:46.310 --> 00:16:51.710
So actually before figuring out what is wrong with this plot I just want to show you very quickly why

281
00:16:51.770 --> 00:16:53.610
this gives the right result.

282
00:16:53.720 --> 00:17:00.050
So I'm going to start by plotting the function f of x and then I'm going to plot the function f of x

283
00:17:00.170 --> 00:17:01.900
minus point five.

284
00:17:02.750 --> 00:17:08.240
So you can see that that really just shifted this function and kept the function the same it just shifted

285
00:17:08.240 --> 00:17:10.130
it down on the y axis.

286
00:17:10.280 --> 00:17:12.320
And that actually changed what our objective is.

287
00:17:12.350 --> 00:17:20.160
So now what we are looking for is the value and f of x that is as close as possible to zero.

288
00:17:20.180 --> 00:17:20.410
Okay.

289
00:17:20.440 --> 00:17:24.250
But that's not going to be the minimum the minimum is still gonna be down here.

290
00:17:24.260 --> 00:17:26.610
So then we take the a B.S. of this.

291
00:17:26.610 --> 00:17:37.280
So the absolute value and that function now looks like like a V because all of the negative parts have

292
00:17:37.280 --> 00:17:38.270
been flipped up.

293
00:17:38.660 --> 00:17:44.510
So now in fact what we are looking for is the minimum of this function and that's what argument is going

294
00:17:44.510 --> 00:17:45.770
to return.

295
00:17:45.800 --> 00:17:46.090
Okay.

296
00:17:46.130 --> 00:17:52.010
So with that as a brief explanation let's see.

297
00:17:52.010 --> 00:17:53.830
So I already see the problem here.

298
00:17:53.840 --> 00:18:01.760
The problem is that we are just plotting the x axis location of f Max Ida X which is the index into

299
00:18:01.850 --> 00:18:05.120
this expression where the minimum is found.

300
00:18:05.120 --> 00:18:13.000
So we actually want X and then the index into X where the minimum is found.

301
00:18:13.010 --> 00:18:13.310
All right.

302
00:18:13.340 --> 00:18:14.650
So that's pretty interesting.

303
00:18:14.660 --> 00:18:20.000
Now you've already learned something new which is how to identify not just the minimum of a function

304
00:18:20.300 --> 00:18:25.180
but the point of a function that's closest to some particular value.

305
00:18:25.190 --> 00:18:25.820
All right.

306
00:18:25.820 --> 00:18:26.420
Here we go.

307
00:18:26.420 --> 00:18:28.170
This is the last one.

308
00:18:28.220 --> 00:18:35.850
The goal is to find local minima by adding 1 character and by character.

309
00:18:35.850 --> 00:18:39.570
I don't mean a cartoon character like bugs bunny or anything else.

310
00:18:39.660 --> 00:18:43.780
I mean just adding one keystroke with the keyboard.

311
00:18:43.770 --> 00:18:51.580
Okay so here we see the local maxima identified but in fact what we want is the local minima.

312
00:18:51.720 --> 00:18:58.200
So the secret here is actually just to flip the function and so I'm going to add a minus sign right

313
00:18:58.200 --> 00:19:02.430
here and that's going to turn this function upside down.

314
00:19:02.430 --> 00:19:06.900
And now all of the minima are identified.

315
00:19:07.110 --> 00:19:14.250
Well actually not all of them you can see that this method isn't perfect because this was is not actually

316
00:19:14.250 --> 00:19:20.610
identified as a minimum even though it is not only a local minimum it is in fact the global minimum

317
00:19:20.610 --> 00:19:24.930
of this entire function in this domain.

318
00:19:24.930 --> 00:19:27.680
So let me just quickly show you why this works.

319
00:19:27.750 --> 00:19:35.750
So here I'm plotting F of X and now I'm gonna plot minus F of X and I mean turn this off actually.

320
00:19:35.940 --> 00:19:39.750
Well now I'll leave that on all said this to B minus as well.

321
00:19:39.810 --> 00:19:40.070
Okay.

322
00:19:40.080 --> 00:19:48.860
So by flipping F of X around on the y axis then we are still looking for all of the Maxima but the Maxima

323
00:19:48.890 --> 00:19:52.890
of a negative function are the minima of the positive function.

324
00:19:52.890 --> 00:19:59.210
So now when we do the plotting that's with the original function but when we do the peak finding that's

325
00:19:59.220 --> 00:20:02.650
with the negative of the function.

326
00:20:02.730 --> 00:20:03.300
All right.

327
00:20:03.300 --> 00:20:05.730
And so that completes this bug hunt.

328
00:20:06.090 --> 00:20:07.190
I hope you enjoyed it.

329
00:20:07.200 --> 00:20:15.420
I hope you found it fruitful and instructive and I hope you are really excited to get to the next section

330
00:20:15.420 --> 00:20:16.490
of the course.

331
00:20:16.500 --> 00:20:19.370
I'm also pretty excited to start recording it.
