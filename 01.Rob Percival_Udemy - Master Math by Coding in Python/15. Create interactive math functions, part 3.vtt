WEBVTT
0
1
00:00:03.930 --> 00:00:13.050
This video is a continuation of our discovery of functions in Python and how to write interactive math
1

2
00:00:13.050 --> 00:00:20.910
functions in python. In particular, in this video the project that you are going to solve is a guessing
2

3
00:00:20.910 --> 00:00:21.240
game.
3

4
00:00:21.240 --> 00:00:24.210
It's really fun and I'm sure you will enjoy it.
4

5
00:00:24.240 --> 00:00:28.770
So the idea is that you want to write a function and that's up here I didn't paste that in so you don't
5

6
00:00:28.770 --> 00:00:34.950
see it but I called this function guess the number and the way that this function works is that Python
6

7
00:00:34.980 --> 00:00:36.440
is going to pick a number.
7

8
00:00:36.440 --> 00:00:44.580
So Python randomly generates an integer between 1 and 100 and then the user of this function --
8

9
00:00:44.580 --> 00:00:50.550
you when you finish programming it -- has to pick the number that Python is thinking of.
9

10
00:00:50.580 --> 00:00:53.000
Now I don't know if python actually thinks about things.
10

11
00:00:53.010 --> 00:00:57.720
But anyway, so Python said guess a number between 1 and 100.
11

12
00:00:57.750 --> 00:01:00.230
And it's an integer to be more specific.
12

13
00:01:00.420 --> 00:01:02.310
I guessed forty two to start off with.
13

14
00:01:02.310 --> 00:01:08.100
Now it turned out that the number that Python had guessed was higher than forty two.
14

15
00:01:08.130 --> 00:01:12.350
So it gave me this result it said gets higher and then it said Guess again.
15

16
00:01:12.390 --> 00:01:13.850
And then I put in 60.
16

17
00:01:14.070 --> 00:01:15.460
But that was also too low.
17

18
00:01:15.480 --> 00:01:16.430
So I had to guess higher.
18

19
00:01:16.440 --> 00:01:19.770
And then I guess 80 it turned out that 80 was too high.
19

20
00:01:19.770 --> 00:01:22.350
So then I guess 75 and so on.
20

21
00:01:22.350 --> 00:01:25.280
Eventually I got to the right answer of 78.
21

22
00:01:25.320 --> 00:01:29.250
And then I got this nice friendly message that said the right number was 78.
22

23
00:01:29.250 --> 00:01:33.640
That was the number that Python picked randomly between 1 and 100.
23

24
00:01:33.690 --> 00:01:36.750
And eventually I was able to correctly guess it.
24

25
00:01:37.380 --> 00:01:37.770
All right.
25

26
00:01:37.830 --> 00:01:43.890
So the goal of the project here is to basically create this function: guess the number.
26

27
00:01:43.890 --> 00:01:48.380
Now I'm going to go to the next slide in a moment and give you a couple of hints.
27

28
00:01:48.540 --> 00:01:54.030
If you don't want these hints, if you just want to get started right away, now is your opportunity to
28

29
00:01:54.030 --> 00:01:56.430
pause the video and switch to Python.
29

30
00:01:56.430 --> 00:01:58.220
Before I go to the next slide.
30

31
00:01:59.070 --> 00:02:01.480
Ok so here are a few tips.
31

32
00:02:01.500 --> 00:02:08.730
First of all to generate a random integer in Python you can use the function rando,m which is in the
32

33
00:02:08.790 --> 00:02:14.460
numpy module, so you can type something like From numpy import random.
33

34
00:02:14.460 --> 00:02:17.820
And then if you type random dot Rand int.
34

35
00:02:17.910 --> 00:02:22.970
That will allow you to generate a random integer and you can specify two inputs here.
35

36
00:02:22.980 --> 00:02:25.530
The first input will be the lower bound.
36

37
00:02:25.560 --> 00:02:28.590
And the second input will be the upper bound.
37

38
00:02:28.650 --> 00:02:28.910
Okay.
38

39
00:02:28.940 --> 00:02:35.320
So that's one hint. Another hint is that the way you want to solve this is with a while function.
39

40
00:02:35.460 --> 00:02:39.300
So not a for loop but a while loop.
40

41
00:02:39.300 --> 00:02:44.180
And the third hint is that you might want to use this funny looking construction.
41

42
00:02:44.220 --> 00:02:47.610
Exclamation point equals, which actually means not equals.
42

43
00:02:47.610 --> 00:02:50.860
So this is the opposite of equals equals.
43

44
00:02:51.000 --> 00:02:51.270
All right.
44

45
00:02:51.290 --> 00:02:52.590
So these are a couple of hints.
45

46
00:02:52.590 --> 00:02:58.650
I hope that's enough to get you started and allow you to successfully complete this project.
46

47
00:02:58.680 --> 00:03:03.980
So now I will switch to Python and I'm going to solve it for you.
47

48
00:03:03.980 --> 00:03:09.750
So I'm going to start with the hint that I gave you, so I'm going to type from numpy
48

49
00:03:10.040 --> 00:03:11.320
Import random.
49

50
00:03:11.330 --> 00:03:16.330
Now notice this is slightly different format from how I've been importing modules before.
50

51
00:03:16.880 --> 00:03:22.140
So previously in the course I've showed you things like importing numpy as np.
51

52
00:03:22.400 --> 00:03:29.840
But when you type the module importing syntax like this, then this function random is actually just going
52

53
00:03:29.840 --> 00:03:38.450
to go directly into the default Python workspace, so now I can run this code and then I can type random
53

54
00:03:38.690 --> 00:03:40.600
dot Rand.
54

55
00:03:40.700 --> 00:03:43.640
Now notice I don't need the numpy here.
55

56
00:03:43.640 --> 00:03:52.640
That would be the case if I wrote import numpy as np, and then I would need this np dot in the beginning.
56

57
00:03:52.640 --> 00:03:52.850
Okay.
57

58
00:03:52.880 --> 00:03:59.030
So actually normally I recommend setting things up this way, but I think it's also useful to know a little
58

59
00:03:59.030 --> 00:04:04.250
bit more about how to use module syntax and importing from modules.
59

60
00:04:04.360 --> 00:04:04.630
Okay.
60

61
00:04:04.640 --> 00:04:06.710
So random rand int.
61

62
00:04:06.790 --> 00:04:12.080
And now I didn't really tell you exactly how to use this function, so I'm going to press on the keyboard
62

63
00:04:12.440 --> 00:04:18.500
shift and then tab while the cursor is inside the parentheses here.
63

64
00:04:18.500 --> 00:04:23.390
Now notice that that opens up this little window I'm going to press this plus sign over here and that
64

65
00:04:23.390 --> 00:04:27.690
gives me some more information about using this function.
65

66
00:04:27.710 --> 00:04:35.870
So this says rand int and low comma and then high equals none, which means the default is no input, no upper
66

67
00:04:35.870 --> 00:04:36.730
bound.
67

68
00:04:36.740 --> 00:04:36.980
Okay.
68

69
00:04:37.010 --> 00:04:42.810
So I want to say let's start just for you know making sure we understand how this function works.
69

70
00:04:42.810 --> 00:04:49.310
I'm going to say one comma five and then press control enter and that returned a result of two and now
70

71
00:04:49.310 --> 00:04:50.600
I'm going to press it again.
71

72
00:04:50.600 --> 00:04:52.670
And now I got four two three.
72

73
00:04:52.700 --> 00:04:52.920
OK.
73

74
00:04:52.940 --> 00:05:00.120
So you can see these are randomly generated integers between 1 and actually 4.
74

75
00:05:00.230 --> 00:05:06.470
I wrote five here but it's going to be one less than the upper number, because that's how indexing in
75

76
00:05:06.470 --> 00:05:08.180
Python works.
76

77
00:05:08.210 --> 00:05:08.500
All right.
77

78
00:05:08.530 --> 00:05:16.010
So this is a big project, or... medium-sized project; we need to figure out how to organize our code writing
78

79
00:05:16.040 --> 00:05:16.640
experience.
79

80
00:05:16.640 --> 00:05:21.740
So what I'm going to do is before I really start writing code I'm actually just gonna write a bunch
80

81
00:05:21.740 --> 00:05:22.650
of comments.
81

82
00:05:22.760 --> 00:05:28.150
It's going to say function definition.
82

83
00:05:28.200 --> 00:05:34.010
Now we can already think about what kinds of inputs we are going to need into the function. And in fact
83

84
00:05:34.010 --> 00:05:38.300
we don't need any inputs, no inputs necessary.
84

85
00:05:38.300 --> 00:05:44.990
That's because all of the necessary inputs and processes are going to happen inside the function.
85

86
00:05:45.450 --> 00:05:45.790
Okay.
86

87
00:05:45.830 --> 00:05:55.730
After we define the function, then we need to generate a random integer and then after that we need to
87

88
00:05:55.820 --> 00:06:00.100
ask the user for a guess.
88

89
00:06:00.140 --> 00:06:00.400
Okay.
89

90
00:06:00.440 --> 00:06:09.910
So the user is going to input some number as a initial guess, and then we need to check whether the number
90

91
00:06:10.180 --> 00:06:18.550
is a match, so whether the number that the user inputted here is the same as the number that was generated
91

92
00:06:18.550 --> 00:06:19.290
here.
92

93
00:06:19.630 --> 00:06:21.530
And then if it's not a match,
93

94
00:06:21.530 --> 00:06:32.070
so let's see, if too low print a message and ask for another input -- I should say another guess.
94

95
00:06:32.680 --> 00:06:40.180
And if too high then we also want it to print a message and ask for another guess.
95

96
00:06:41.140 --> 00:06:41.440
Okay.
96

97
00:06:41.440 --> 00:06:45.160
And then if the guess is correct,
97

98
00:06:47.430 --> 00:06:48.960
congratulate.
98

99
00:06:48.960 --> 00:06:49.600
Congrats.
99

100
00:06:49.600 --> 00:06:53.070
the user.
100

101
00:06:53.070 --> 00:06:53.620
All right.
101

102
00:06:53.700 --> 00:06:54.750
So this is our outline.
102

103
00:06:54.750 --> 00:06:56.850
Notice I haven't actually written any code yet.
103

104
00:06:56.880 --> 00:07:03.410
All I'm doing here is thinking about the high level structure of what the code should look like.
104

105
00:07:03.450 --> 00:07:03.670
All right.
105

106
00:07:03.690 --> 00:07:04.990
So now we can get started.
106

107
00:07:05.000 --> 00:07:14.200
So now I'm going to say def guess the number like this, with the colon at the end.
107

108
00:07:14.280 --> 00:07:22.440
And now we need to generate a random integer, so I will  say... let's call this num to guess.
108

109
00:07:22.440 --> 00:07:26.010
That seems like a good variable name and that's going to equal to.
109

110
00:07:26.010 --> 00:07:30.770
I'm just going to move this text down here random dot round.
110

111
00:07:30.780 --> 00:07:37.470
And now we want a random integer between 1 and 100, which actually means that the second input has to
111

112
00:07:37.470 --> 00:07:42.740
be one hundred and one, one higher than the upper bound.
112

113
00:07:42.750 --> 00:07:43.020
All right.
113

114
00:07:43.040 --> 00:07:44.370
So far so good.
114

115
00:07:44.370 --> 00:07:50.670
Now we ask the user for a guess. Let's say user guess I'm going to call this variable user guess and
115

116
00:07:50.670 --> 00:07:57.610
then is going to be input guests a number between 1 and 100.
116

117
00:07:58.740 --> 00:07:59.020
Okay.
117

118
00:07:59.040 --> 00:08:05.400
And remember from previous videos that the output of this function, this input function, is going to be
118

119
00:08:05.400 --> 00:08:06.340
a string.
119

120
00:08:06.510 --> 00:08:08.420
But we actually want this to be a number.
120

121
00:08:08.420 --> 00:08:12.450
So I'm going to convert this to an integer.
121

122
00:08:12.960 --> 00:08:18.480
So now that you are starting to get some experience with programming functions, you might already see,
122

123
00:08:18.780 --> 00:08:23.510
you might already know, that this code is going to crash on this line.
123

124
00:08:23.610 --> 00:08:29.190
If the user inputs a number that is not an integer so a number with a decimal point.
124

125
00:08:29.220 --> 00:08:30.920
So for our purposes here.
125

126
00:08:30.950 --> 00:08:31.830
That's fine.
126

127
00:08:31.830 --> 00:08:38.880
I'm not going to be too concerned about testing that, but you should know that if you are starting to
127

128
00:08:39.120 --> 00:08:45.270
use more production-level functions and code that you want other people to interact with, it would be
128

129
00:08:45.270 --> 00:08:51.780
a good idea to break this line up into multiple lines of code to test whether the input is actually
129

130
00:08:51.780 --> 00:08:52.400
an integer.
130

131
00:08:52.410 --> 00:08:56.960
And then you can make a decision about what you would want to do with a non integer guess.
131

132
00:08:57.000 --> 00:09:02.490
Maybe you could ask for another guess or maybe you could just round it to the nearest integer. Anyway,
132

133
00:09:03.390 --> 00:09:04.680
for now, for this video,
133

134
00:09:04.680 --> 00:09:10.240
we are going to be assuming that only integer numbers will be entered.
134

135
00:09:10.260 --> 00:09:14.730
So now we need to check whether the number is a match.
135

136
00:09:14.730 --> 00:09:20.820
So here is where we use both the while loop and the not equals operator.
136

137
00:09:20.880 --> 00:09:30.750
So I have to say while the user guess is not equal to numb to guess, which is python's number.
137

138
00:09:30.850 --> 00:09:33.670
And now here we're going to enter into this while loop.
138

139
00:09:33.680 --> 00:09:40.750
So the idea of a while loop is that you stay inside this loop basically forever until, you know, the computer
139

140
00:09:40.750 --> 00:09:47.240
powers down, or the Sun blows up, or whatever is in this conditional ends up being true.
140

141
00:09:47.320 --> 00:09:55.210
So as long as the users guess is not equal to the num to guess variable, so that's the number that Python
141

142
00:09:55.300 --> 00:09:57.040
randomly generated,
142

143
00:09:57.040 --> 00:10:02.950
then we're going to stay inside this while loop. And as soon as this statement becomes true[false], which actually
143

144
00:10:02.950 --> 00:10:09.190
means that the user guess equals the number that Python generated, then we can break out of this while
144

145
00:10:09.190 --> 00:10:09.670
loop.
145

146
00:10:10.590 --> 00:10:14.470
Okay so let's see. What do we want to do inside this while loop?
146

147
00:10:14.470 --> 00:10:19.480
So we want to compare the user's guess to the to Python's guess.
147

148
00:10:19.540 --> 00:10:22.100
That's gonna be this one.
148

149
00:10:22.100 --> 00:10:33.930
So let's say if the user guess is smaller than num to guess, then we went to print a message. So we can
149

150
00:10:33.930 --> 00:10:37.340
say guess higher.
150

151
00:10:37.640 --> 00:10:39.270
So the number was too small.
151

152
00:10:39.330 --> 00:10:40.690
So we need to guess higher.
152

153
00:10:40.710 --> 00:10:43.910
So we need to give a little bit of informative feedback here.
153

154
00:10:43.980 --> 00:10:49.660
Here I'm going to say l If user guess is greater than num to guess.
154

155
00:10:50.040 --> 00:10:54.440
Then we went to print guess lower.
155

156
00:10:54.570 --> 00:10:54.820
Okay.
156

157
00:10:54.850 --> 00:10:55.510
Now that 
157

158
00:10:55.530 --> 00:10:56.860
also takes care of this one.
158

159
00:10:56.880 --> 00:11:03.370
Let's see... I'm going to delete this comment and then I will make this comment a little bit more informative.
159

160
00:11:03.360 --> 00:11:09.620
It's good to have informative comments. Print informative message and ask for another guess.
160

161
00:11:09.630 --> 00:11:12.270
Okay, so far we haven't actually gotten another guess.
161

162
00:11:12.270 --> 00:11:17.290
We've just told the user whether they guessed too high or too low.
162

163
00:11:17.320 --> 00:11:19.020
Ah well here they guess too low.
163

164
00:11:19.020 --> 00:11:21.840
So the feedback is that they need to get higher.
164

165
00:11:21.840 --> 00:11:22.080
All right.
165

166
00:11:22.080 --> 00:11:30.990
So after printing out these messages, we need to get another guess. I'm going to copy this line and paste
166

167
00:11:30.990 --> 00:11:35.070
it here, except here this is going to say Guess again.
167

168
00:11:35.120 --> 00:11:37.630
Okay so let's think about what happens here.
168

169
00:11:37.770 --> 00:11:45.090
The user gives a first guess over here, and if the guess is not correct then we either get informative
169

170
00:11:45.090 --> 00:11:49.920
feedback saying we need to guess higher, or we get we need to guess lower and then we get the opportunity
170

171
00:11:49.920 --> 00:11:51.280
to guess again.
171

172
00:11:51.330 --> 00:11:58.560
Now if the user guess is still not the same thing as the number that Python guessed, then we are still
172

173
00:11:58.620 --> 00:12:02.510
inside this while loop and we go through this whole bit all over again.
173

174
00:12:02.670 --> 00:12:09.330
We go through this over and over and over again, and eventually the user guess is the same thing as this
174

175
00:12:09.330 --> 00:12:11.050
variable num to guess.
175

176
00:12:11.070 --> 00:12:18.090
So this statement actually becomes false and we break out of the while loop, and that's when we can congratulate
176

177
00:12:18.210 --> 00:12:21.940
our user and say print.
177

178
00:12:22.290 --> 00:12:27.430
Yes you guessed correctly.
178

179
00:12:28.290 --> 00:12:34.460
So you can see this is actually not such a long difficult involved function to create.
179

180
00:12:34.680 --> 00:12:41.400
And the key to solving this function correctly and efficiently was starting with comments. So first I
180

181
00:12:41.400 --> 00:12:45.730
wrote comments and then when I was sure that the comments all made sense,
181

182
00:12:45.840 --> 00:12:47.920
then I started to write code.
182

183
00:12:48.000 --> 00:12:51.310
All right so now I'm going to run this.
183

184
00:12:51.390 --> 00:12:52.970
We don't get any errors, so that's good.
184

185
00:12:52.980 --> 00:13:02.670
And now I'm going to write guess the number and then we get the statement guess a number between one
185

186
00:13:02.670 --> 00:13:03.060
and a hundred.
186

187
00:13:03.060 --> 00:13:06.660
I'm gonna guess 42 again because that's a really great number.
187

188
00:13:06.660 --> 00:13:08.230
It's a good thing to guess again.
188

189
00:13:08.350 --> 00:13:10.030
Okay so guess lower.
189

190
00:13:10.140 --> 00:13:12.540
Let's try for 20.
190

191
00:13:12.630 --> 00:13:13.830
It wasn't as low as 20.
191

192
00:13:13.850 --> 00:13:15.030
So we need to get higher.
192

193
00:13:15.030 --> 00:13:16.820
How about 30.
193

194
00:13:16.830 --> 00:13:20.450
Higher 35, lower than 35.
194

195
00:13:20.460 --> 00:13:22.510
This is getting pretty exciting we are getting close!
195

196
00:13:22.530 --> 00:13:23.940
All right! I got it!  :D
196

197
00:13:23.940 --> 00:13:24.740
Thirty two.
197

198
00:13:24.750 --> 00:13:26.080
The number is 32.
198

199
00:13:27.410 --> 00:13:32.400
Okay maybe I got a little bit too excited about guessing the number there, but it feels good to write
199

200
00:13:32.400 --> 00:13:33.450
a good piece of code.
200

201
00:13:34.110 --> 00:13:34.380
All right.
201

202
00:13:34.380 --> 00:13:41.880
So in these past several videos, you have learned how to make interactive math functions using functions
202

203
00:13:41.970 --> 00:13:43.180
in Python.
203

204
00:13:43.200 --> 00:13:48.960
Some of these functions take input, some functions give outputs, other functions don't require inputs
204

205
00:13:48.990 --> 00:13:56.280
or outputs. Creating your own functions in Python is a really important skill in programming and I hope
205

206
00:13:56.280 --> 00:14:01.320
you now feel like you have a pretty strong footing to continue improving your coding skills.
