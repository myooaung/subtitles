WEBVTT
0
1
00:00:04.260 --> 00:00:10.610
The goal of this video is to produce a multiplication table that's going to look like this.
1

2
00:00:10.620 --> 00:00:11.900
In fact this is a matrix.
2

3
00:00:11.910 --> 00:00:19.650
But you can imagine that this is a table of products, a table of multiplications between numbers in this
3

4
00:00:19.650 --> 00:00:21.470
column and the numbers in this row.
4

5
00:00:21.480 --> 00:00:27.200
So for example forty eight equals eight times six.
5

6
00:00:27.330 --> 00:00:32.790
And let's see nine times seven is sixty three.
6

7
00:00:32.790 --> 00:00:39.870
So this is the main goal, your main goal, for this video is to pause the video and produce a table or a matrix
7

8
00:00:39.870 --> 00:00:42.020
that looks exactly like this.
8

9
00:00:42.030 --> 00:00:43.620
So good luck working through this.
9

10
00:00:43.620 --> 00:00:49.800
It's actually... there's a couple of tricky parts in here that's not quite as simple as you might initially
10

11
00:00:49.800 --> 00:00:50.670
think it is.
11

12
00:00:50.700 --> 00:00:52.290
So good luck working through this.
12

13
00:00:52.310 --> 00:00:56.360
And now I am going to switch to Python and show you my solution.
13

14
00:00:58.320 --> 00:01:05.850
So my solution to this problem is to consider that if we have a matrix called let's call it matmult
14

15
00:01:05.970 --> 00:01:14.700
for matrix multiplication, then essentially the i-th row or the element in the i-th row and the J-th column
15

16
00:01:15.030 --> 00:01:20.610
should be equal to column I times... sorry row i Times column J.
16

17
00:01:20.610 --> 00:01:23.480
So this is generally the approach that I'm going to take.
17

18
00:01:23.520 --> 00:01:30.030
Now this needs to be embedded inside a couple of for loops and in fact I think I will change these
18

19
00:01:30.030 --> 00:01:30.490
to
19

20
00:01:30.510 --> 00:01:36.060
rowi and coli, just to make it a little bit more readable.
20

21
00:01:36.060 --> 00:01:38.020
So row I and col i.
21

22
00:01:38.400 --> 00:01:46.520
So now of course we're going need to loop over rows and what do we loop over rows in?
22

23
00:01:46.650 --> 00:01:56.850
Well, we could specify this to be a range that goes from one to 10, but then here we also have to have
23

24
00:01:56.910 --> 00:02:00.300
a range, the same exact range.
24

25
00:02:00.300 --> 00:02:09.890
So in fact what I'm going to do is create this as a variable, so let's say numbers equals range num to
25

26
00:02:10.280 --> 00:02:10.550
10.
26

27
00:02:10.560 --> 00:02:12.750
And actually this should be it should go up to 10.
27

28
00:02:12.750 --> 00:02:21.990
So I have to print eleven here type eleven here to now I say for row I in numbers and then also for
28

29
00:02:21.990 --> 00:02:24.900
col i in numbers.
29

30
00:02:25.150 --> 00:02:25.480
Okay.
30

31
00:02:25.500 --> 00:02:31.370
So I'm going to just run the code how it is here and see if we get any progress.
31

32
00:02:31.650 --> 00:02:31.970
Aha.
32

33
00:02:32.030 --> 00:02:32.280
Okay.
33

34
00:02:32.300 --> 00:02:38.670
So this says name matmult is not defined. So we need to define this matrix before we start using it.
34

35
00:02:39.360 --> 00:02:48.120
So to do this I'm going to say matmult equals, now what I'd like to do is initialize this with zeroes
35

36
00:02:48.450 --> 00:02:57.250
using the numpy matrix so the size is going to have to be basically 10 by 10 or however long nums
36

37
00:02:57.250 --> 00:02:57.660
is.
37

38
00:02:57.810 --> 00:03:03.960
Now I could write 10 by 10 but this would be an example of hard coding. If we wanted to make a bigger
38

39
00:03:04.020 --> 00:03:10.230
matrix multiplication table let's say you know up to 14 then this is no longer valid.
39

40
00:03:10.260 --> 00:03:18.810
So what I'm going to do is write len for length this function for length nums and then again Len nums.
40

41
00:03:18.810 --> 00:03:19.080
Okay.
41

42
00:03:19.080 --> 00:03:21.570
And then set that back to 11.
42

43
00:03:21.570 --> 00:03:21.830
Okay.
43

44
00:03:21.840 --> 00:03:29.700
So now I'm going to run this code again and... oops it says name np not defined.
44

45
00:03:29.700 --> 00:03:36.480
So that means I need to import the numpy module and to do that I actually prefer to put that in its
45

46
00:03:36.570 --> 00:03:38.730
own cell on top of here.
46

47
00:03:38.730 --> 00:03:42.910
So I'm going to press insert, insert cell above.
47

48
00:03:42.990 --> 00:03:49.230
Now I can write import numpy as np. Run that cell.
48

49
00:03:49.260 --> 00:03:50.990
Run this cell.
49

50
00:03:51.050 --> 00:03:51.590
Okay.
50

51
00:03:51.660 --> 00:03:53.690
This is a actually a stupid mistake.
51

52
00:03:53.790 --> 00:03:59.750
Sometimes I make mistakes in here on purpose so I can show you what the error messages look like.
52

53
00:03:59.760 --> 00:04:02.700
This was actually really just a typo.
53

54
00:04:02.910 --> 00:04:03.260
Huh.
54

55
00:04:03.300 --> 00:04:08.760
Okay so index ten is out of bounds for axis one with size 10.
55

56
00:04:08.850 --> 00:04:10.490
So what is the problem here?
56

57
00:04:10.500 --> 00:04:12.960
The problem is happening on this line here.
57

58
00:04:12.960 --> 00:04:13.890
Line 7.
58

59
00:04:13.950 --> 00:04:18.620
So this line and now how do we go about figuring out an error like this.
59

60
00:04:18.650 --> 00:04:22.180
So there is an indexing problem somewhere in here.
60

61
00:04:22.230 --> 00:04:28.340
What I'm going to do is say print rowi comma coli.
61

62
00:04:28.370 --> 00:04:35.070
I now what this is going to do is print out the row column index each time it's running through this
62

63
00:04:35.070 --> 00:04:40.470
loop. And that's going to help me decode this problem; it's gonna help me figure out what is going wrong
63

64
00:04:40.470 --> 00:04:40.770
here.
64

65
00:04:41.750 --> 00:04:42.090
Okay.
65

66
00:04:42.090 --> 00:04:45.160
And I think we can already see what the problem is.
66

67
00:04:45.270 --> 00:04:51.810
And the problem is that I start this range at 1 and that makes sense because I want the multiplication
67

68
00:04:51.810 --> 00:04:54.470
table to start at 1.
68

69
00:04:54.480 --> 00:04:58.000
However Python starts indexing at 0.
69

70
00:04:58.020 --> 00:05:04.690
So here we are already trying to access the second element with index of 1 so therefore what I'm going to
70

71
00:05:04.700 --> 00:05:06.870
do is write minus one.
71

72
00:05:06.880 --> 00:05:10.300
So row I minus one coli minus one.
72

73
00:05:10.450 --> 00:05:11.300
that makes sense.
73

74
00:05:11.300 --> 00:05:15.410
Now let's think about what happens at the first iteration of this loop.
74

75
00:05:15.410 --> 00:05:24.650
So row I equals one, coli equals 1 but because this is actually the first element in the Matrix, the
75

76
00:05:24.650 --> 00:05:30.740
first row in the first column we need to specify this to be zero and zero.
76

77
00:05:31.440 --> 00:05:32.220
Okay so let's see.
77

78
00:05:32.240 --> 00:05:34.300
I believe that this is going to work now.
78

79
00:05:34.330 --> 00:05:34.580
Okay.
79

80
00:05:34.590 --> 00:05:38.550
So we get a lot of numbers which is fine.
80

81
00:05:38.900 --> 00:05:41.750
And now let's see what this table looks like.
81

82
00:05:41.750 --> 00:05:44.610
So matmult.
82

83
00:05:44.720 --> 00:05:47.800
So these this is starting to look good.
83

84
00:05:47.810 --> 00:05:49.040
This is getting somewhere.
84

85
00:05:49.880 --> 00:05:57.200
We can look through a few of these elements individually, so for example six times six equals thirty
85

86
00:05:57.200 --> 00:05:58.160
six.
86

87
00:05:58.170 --> 00:06:03.830
And about three times nine equals twenty seven, so you know just picking out a couple of these numbers
87

88
00:06:03.830 --> 00:06:08.270
here just to make sure that we've implemented this piece of code correctly.
88

89
00:06:08.300 --> 00:06:11.270
So nine times two is 18.
89

90
00:06:11.300 --> 00:06:12.070
Okay.
90

91
00:06:12.290 --> 00:06:15.610
Now there's a few things that we need to fix here.
91

92
00:06:15.620 --> 00:06:20.330
One is that we need this to be printed out in nice looking latex code.
92

93
00:06:20.350 --> 00:06:34.340
So therefore I'm going to write from IPython dot display import display and math 
93

94
00:06:34.810 --> 00:06:36.640
Man, I'm making a bunch of typos tonight :(
94

95
00:06:37.530 --> 00:06:37.860
Okay.
95

96
00:06:37.890 --> 00:06:48.800
And now that I've imported these two functions I'm going to type display and then math.
96

97
00:06:48.800 --> 00:06:51.170
And now we wanted to do.
97

98
00:06:51.200 --> 00:06:53.620
Oh we need to convert this into latex.
98

99
00:06:53.710 --> 00:06:53.980
Okay.
99

100
00:06:54.030 --> 00:07:03.700
So that means that we're also going to need to import the sympy module, so import sympy as sym.
100

101
00:07:04.310 --> 00:07:04.730
All right.
101

102
00:07:04.760 --> 00:07:07.010
So now let's try this.
102

103
00:07:07.010 --> 00:07:07.430
Mm hmm.
103

104
00:07:07.710 --> 00:07:08.030
Okay.
104

105
00:07:08.030 --> 00:07:11.090
So this doesn't really look very readable.
105

106
00:07:11.090 --> 00:07:13.130
And what is the problem here?
106

107
00:07:13.190 --> 00:07:21.320
The problem is that matmut, this variable this matrix here, this is actually a numpy array, but we
107

108
00:07:21.320 --> 00:07:24.530
need to convert this into a sympy object.
108

109
00:07:24.560 --> 00:07:35.540
So I'm going to write sym dot sympify, and this function, sympify, will convert this
109

110
00:07:35.540 --> 00:07:42.800
from a numpy array into a sympy object, and then we can convert that into latex code and then that goes
110

111
00:07:42.800 --> 00:07:47.110
into the math function which goes into the display function.
111

112
00:07:47.120 --> 00:07:47.720
All right.
112

113
00:07:47.750 --> 00:07:49.670
So this is starting to look good.
113

114
00:07:49.670 --> 00:07:51.170
We're almost there.
114

115
00:07:51.170 --> 00:07:56.420
The main difference now from how we showed in the slide is that this is all these all decimal points
115

116
00:07:56.440 --> 00:08:00.600
here but the decimal points are all zeros because we're just multiplying integers.
116

117
00:08:00.600 --> 00:08:06.050
There's no need for any floating point numeric precision.
117

118
00:08:07.160 --> 00:08:11.090
So how can we get rid of all of these zeros here?
118

119
00:08:11.090 --> 00:08:18.050
Well you might think about converting this into an integer using the int function like this.
119

120
00:08:18.050 --> 00:08:20.840
However it turns out that that is not going to work.
120

121
00:08:20.840 --> 00:08:25.890
So the int function works on scalars but not on full matrices.
121

122
00:08:25.970 --> 00:08:31.400
So there's probably more than one solution here but the solution that I'm going to come up with is to
122

123
00:08:31.400 --> 00:08:40.880
specify that this matrix when I create this matrix here this matrix should be only available for integers.
123

124
00:08:40.880 --> 00:08:44.690
So let's look at the help file in numpy dot zeros.
124

125
00:08:45.560 --> 00:08:45.850
OK.
125

126
00:08:45.860 --> 00:08:52.520
So in fact already this is telling us that the second optional input after the shape, which is what I
126

127
00:08:52.520 --> 00:08:55.470
have here so 10 by 10.
127

128
00:08:55.730 --> 00:08:59.540
The second optional input is dtype equals float.
128

129
00:08:59.750 --> 00:09:01.940
So let's see what dtype means.
129

130
00:09:02.690 --> 00:09:02.950
OK.
130

131
00:09:02.960 --> 00:09:09.560
So dtype is data type and it's an optional input and we know that it's an optional input as well because
131

132
00:09:09.560 --> 00:09:10.970
it says equals.
132

133
00:09:10.970 --> 00:09:20.990
And then this will be the default value. What I'm going to do is specify that the data type so dtype
133

134
00:09:21.440 --> 00:09:25.270
equals int for integers.
134

135
00:09:25.580 --> 00:09:26.150
All right.
135

136
00:09:26.180 --> 00:09:29.000
And that means that matrix multiplication,
136

137
00:09:29.000 --> 00:09:35.990
So this variable here, this matrix, is limited to integers. It's only going to be storing integers not
137

138
00:09:35.990 --> 00:09:37.040
floats.
138

139
00:09:37.070 --> 00:09:37.320
Okay.
139

140
00:09:37.340 --> 00:09:39.850
So that's basically the end of the assignment here.
140

141
00:09:39.860 --> 00:09:41.590
That's the end of the exercise.
141

142
00:09:41.630 --> 00:09:47.210
There's one more thing that I would like to mention, which is about this display function.
142

143
00:09:47.210 --> 00:09:51.330
So I always embed the math function inside the display function.
143

144
00:09:51.350 --> 00:09:57.380
But if you were taking the opportunity to play around with this code, which of course I strongly recommend
144

145
00:09:57.410 --> 00:10:04.940
doing, then you might have accidentally discovered that if you remove this display function then you
145

146
00:10:04.940 --> 00:10:06.740
get essentially the same results.
146

147
00:10:06.770 --> 00:10:10.340
So why do we need this display function in the first place?
147

148
00:10:10.370 --> 00:10:17.390
And the answer for that is basically that whether you need that display function depends on where this
148

149
00:10:17.390 --> 00:10:20.720
line of code is relative to the cell.
149

150
00:10:20.720 --> 00:10:28.630
So for example let's say I want to create a variable called X and I set X to be three.
150

151
00:10:28.880 --> 00:10:29.240
Huh...
151

152
00:10:29.250 --> 00:10:31.050
So now I run the code again.
152

153
00:10:31.070 --> 00:10:36.970
You don't get any errors, but we also don't see this beautiful latex formatted matrix.
153

154
00:10:37.280 --> 00:10:45.680
And now let's see what happens if I put the display function back here and now I still get the Matrix
154

155
00:10:45.800 --> 00:10:48.870
and I can also have more code after.
155

156
00:10:48.920 --> 00:10:54.380
So in case you discovered that and you are curious about it, now you know the answer: essentially you
156

157
00:10:54.380 --> 00:10:56.540
only need this display function
157

158
00:10:56.540 --> 00:11:03.680
if the math function is not at the very end of these cell. So therefore just as a general matter of good
158

159
00:11:03.680 --> 00:11:09.500
practice, I will always have the display function even if it happens to be at the end of the cell like
159

160
00:11:09.500 --> 00:11:09.860
this.
