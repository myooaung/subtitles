WEBVTT
0
1
00:00:03.190 --> 00:00:11.680
The goal of this video is to discuss prime factorization and implementing that in Python.
1

2
00:00:11.680 --> 00:00:18.880
This is a great opportunity to utilize your newfound knowledge on Python dictionaries that you acquired
2

3
00:00:18.970 --> 00:00:20.980
in a previous video.
3

4
00:00:21.040 --> 00:00:27.070
So before talking about prime factorization I'd like to start by giving you a reminder of what it means
4

5
00:00:27.070 --> 00:00:35.900
to be a prime number. A prime number is an integer that is divisible only by itself and by one.
5

6
00:00:36.370 --> 00:00:38.080
So here you see a few examples.
6

7
00:00:38.170 --> 00:00:43.520
Two is not divisible by any number other than itself and 1.
7

8
00:00:43.540 --> 00:00:49.510
Same thing for 3 and 5 and 7 and hot is 8 a prime number.
8

9
00:00:49.510 --> 00:00:54.490
Well you can probably guess that is not a prime number because otherwise I wouldn't have colored it
9

10
00:00:54.550 --> 00:00:56.940
in red instead of blue.
10

11
00:00:57.130 --> 00:01:02.230
But of course it is not a prime number: eight is divisible by itself and by 1.
11

12
00:01:02.350 --> 00:01:08.110
However 8 is also divisible by other numbers like 2 and 4.
12

13
00:01:08.130 --> 00:01:15.670
So with that in mind, the idea of prime factorization is to break down a number, or factorize it, to
13

14
00:01:15.670 --> 00:01:23.770
represent that number as the multiplication of the product of other numbers that are all prime numbers.
14

15
00:01:23.770 --> 00:01:27.900
So each of those individual numbers are called multiplicands.
15

16
00:01:28.120 --> 00:01:34.360
For example, the number 8 can be represented as the product of two times two times two.
16

17
00:01:34.360 --> 00:01:41.100
Of course two times two is four times two is eight and each of these numbers is a prime number.
17

18
00:01:41.110 --> 00:01:47.330
Likewise, twenty five can be expressed as five times five, and five is a prime number.
18

19
00:01:47.380 --> 00:01:50.970
48, we're starting to get to even more prime numbers here.
19

20
00:01:51.010 --> 00:01:55.790
So 48 can be expressed as two times two times two times two times three.
20

21
00:01:55.900 --> 00:02:02.560
And I encourage you not to trust me and to pause the video and work through the arithmetic yourself.
21

22
00:02:02.560 --> 00:02:10.650
OK so let's switch to Python and see how prime factorization works and how these numbers are represented.
22

23
00:02:12.730 --> 00:02:16.640
So we are going to need these sympy module here.
23

24
00:02:16.720 --> 00:02:19.800
So I start by importing that module.
24

25
00:02:20.170 --> 00:02:24.340
So let's pick a number let's say number equals about forty eight.
25

26
00:02:24.340 --> 00:02:27.550
That was the example I showed in the slides.
26

27
00:02:27.550 --> 00:02:36.540
So I'm going to compute the prime factorization using sym dot factor int.
27

28
00:02:36.700 --> 00:02:41.470
So this is the function for computing the prime factorization.
28

29
00:02:41.470 --> 00:02:44.500
So you want the prime factorization of the number.
29

30
00:02:44.590 --> 00:02:48.400
And notice that the output here looks an awful lot like a dictionary.
30

31
00:02:48.400 --> 00:02:57.370
In fact, it is a dictionary! So let's call this fact or dict equals this and then just to show you that
31

32
00:02:57.370 --> 00:03:04.210
this really is a dictionary, let's say the type of this variable and it is of course a dictionary.
32

33
00:03:04.210 --> 00:03:04.450
All right.
33

34
00:03:04.480 --> 00:03:06.160
And I'm going to print this out.
34

35
00:03:06.160 --> 00:03:07.240
So what do we see here?
35

36
00:03:07.240 --> 00:03:09.310
How can we decode this dictionary?
36

37
00:03:09.310 --> 00:03:13.800
So remember that a dictionary contains key value pairs.
37

38
00:03:13.810 --> 00:03:19.330
So the key and then the values are after the colon.
38

39
00:03:19.330 --> 00:03:27.250
So we have the keys are two and three and the values are four and 1.
39

40
00:03:27.280 --> 00:03:34.210
Now thinking back to the slide, remember that the number 48 can be represented using the product of prime
40

41
00:03:34.210 --> 00:03:38.440
numbers as two times two times two times two times three.
41

42
00:03:38.440 --> 00:03:43.090
So we get four times the number two and one times the number three.
42

43
00:03:43.090 --> 00:03:43.350
Okay.
43

44
00:03:43.380 --> 00:03:50.530
So let's try again for example with five and now we see that this dictionary only has one key, which
44

45
00:03:50.530 --> 00:03:55.900
is five, and that number five only appears once. Not that surprising.
45

46
00:03:55.900 --> 00:03:56.100
All right.
46

47
00:03:56.110 --> 00:03:58.200
So let me go back to how about eight.
47

48
00:03:58.210 --> 00:04:01.500
We can see eight is three twos.
48

49
00:04:01.570 --> 00:04:03.640
So two times two times two.
49

50
00:04:03.640 --> 00:04:04.090
Actually, you know,
50

51
00:04:04.120 --> 00:04:08.150
let's go back to 48 because I want there to be multiple keys here.
51

52
00:04:08.200 --> 00:04:15.310
So if I just want to know what are the prime numbers that are in this number 48 regardless of how many
52

53
00:04:15.310 --> 00:04:16.720
times they appear.
53

54
00:04:16.720 --> 00:04:24.030
All I need to do is extract the keys from this dictionary and I can do that by typing dot keys.
54

55
00:04:24.060 --> 00:04:31.480
I use this method in the object in this in this dictionary to extract the keys and that tells me that
55

56
00:04:31.480 --> 00:04:35.750
there is the number two and the number three those are the two keys.
56

57
00:04:35.770 --> 00:04:39.170
So this is the variable type, here's the dictionary keys.
57

58
00:04:39.310 --> 00:04:46.000
If I want just the actual numbers I can convert this into a list and now I get a list of numbers that
58

59
00:04:46.000 --> 00:04:51.370
correspond to the keys, which correspond to the prime factors of this number.
59

60
00:04:51.440 --> 00:04:51.720
Okay.
60

61
00:04:51.730 --> 00:04:56.800
So let me go back and just show this one more time. I'm going to talk a little bit more about this output
61

62
00:04:56.800 --> 00:04:58.210
here and how to interpret it.
62

63
00:04:58.810 --> 00:05:02.220
So remember this number is not a prime number.
63

64
00:05:02.230 --> 00:05:08.140
And the way that we can tell that it's not a prime number from looking at the prime factorization is
64

65
00:05:08.140 --> 00:05:11.670
to see that it has more than one key.
65

66
00:05:11.700 --> 00:05:11.940
OK.
66

67
00:05:11.970 --> 00:05:18.670
But that's not entirely satisfactory, because we also saw that the number eight, which is not a prime
67

68
00:05:18.670 --> 00:05:21.580
number has only one key.
68

69
00:05:21.580 --> 00:05:28.030
However, the number eight has one key but it is a key that repeats three times; it has a value of greater
69

70
00:05:28.030 --> 00:05:29.010
than one.
70

71
00:05:29.020 --> 00:05:36.450
In contrast, the number seven, which is a prime number, has only one key and the number one appears as
71

72
00:05:36.580 --> 00:05:46.030
as the value of that key. And so with that hint in mind, the exercise for this video is to loop through
72

73
00:05:46.030 --> 00:05:54.970
the integers from two through 50 and determine whether each of these integers from two to 50 is a prime
73

74
00:05:54.970 --> 00:05:56.830
number or a composite number.
74

75
00:05:56.830 --> 00:06:00.850
So a composite number is basically just an integer that is not a prime number.
75

76
00:06:01.870 --> 00:06:08.110
So here you see two and three are prime numbers, four is not a prime number it's a composite number and
76

77
00:06:08.110 --> 00:06:13.110
the prime factors are in this case there is just one of them and it's two.
77

78
00:06:13.120 --> 00:06:17.710
So this is the screen that you want to print out. So you're certainly going to need a for loop to loop
78

79
00:06:17.710 --> 00:06:23.770
through all of these integers and the way that I solved it is using the following function.
79

80
00:06:23.770 --> 00:06:25.530
So factorint of course you need.
80

81
00:06:26.110 --> 00:06:33.010
I also used list and Len for length, if else, and print. Maybe you will come up with some other solutions
81

82
00:06:33.010 --> 00:06:37.480
that don't rely on these functions... the way that you solve it doesn't matter.
82

83
00:06:37.480 --> 00:06:41.320
But the goal of the exercise is basically to print out this.
83

84
00:06:41.380 --> 00:06:42.690
This is obviously not all of it.
84

85
00:06:42.700 --> 00:06:44.940
This goes all the way down to 50.
85

86
00:06:44.950 --> 00:06:45.240
OK.
86

87
00:06:45.250 --> 00:06:47.160
So good luck, pause the video.
87

88
00:06:47.290 --> 00:06:54.260
And now I'm going to switch to Python and show you how I would go about solving this problem.
88

89
00:06:54.280 --> 00:06:58.080
So let us begin by generating the integers.
89

90
00:06:58.090 --> 00:07:04.790
There's going to be a range from two through... I write fifty one here because in fact I want the numbers
90

91
00:07:04.790 --> 00:07:06.600
to go up to 50.
91

92
00:07:06.950 --> 00:07:13.700
So let's say for num i in num, maybe I'll call this number because this is plural; there's a bunch of
92

93
00:07:13.700 --> 00:07:14.150
them.
93

94
00:07:14.300 --> 00:07:18.260
So num I for the i-th number in this range.
94

95
00:07:18.260 --> 00:07:19.230
Numbers.
95

96
00:07:19.250 --> 00:07:26.360
So the first thing I'm going to do is run a prime factorization so I'll call that di for dictionary
96

97
00:07:26.850 --> 00:07:30.290
and that's going to be sym dot factorinit.
97

98
00:07:30.460 --> 00:07:31.760
And then I.
98

99
00:07:31.760 --> 00:07:34.790
So far nothing particularly new or exciting.
99

100
00:07:34.790 --> 00:07:41.330
That's exactly what I did up here and now what I want to do is extract the keys from this dictionary.
100

101
00:07:41.360 --> 00:07:42.970
So list D I
101

102
00:07:43.220 --> 00:07:49.500
keys and maybe I'll even just stop right here and print out the keys.
102

103
00:07:49.550 --> 00:07:55.810
So what this is going to do is do the prime factorization and extract the keys and print them out... oops.
103

104
00:07:55.910 --> 00:07:57.130
This should be num i
104

105
00:07:57.230 --> 00:07:57.670
.
105

106
00:07:59.030 --> 00:07:59.250
Okay.
106

107
00:07:59.300 --> 00:08:07.340
So here are all of the prime numbers that multiplied to create the numbers to go through and three and
107

108
00:08:07.340 --> 00:08:10.530
four all the way down to 50.
108

109
00:08:10.580 --> 00:08:10.780
Okay.
109

110
00:08:10.790 --> 00:08:14.940
Now this doesn't tell us whether each of these things is a prime number.
110

111
00:08:14.960 --> 00:08:19.400
I just wanted to run this first to make sure that I haven't already made any errors, which of course
111

112
00:08:19.400 --> 00:08:22.330
I already did here, I wrote I instead of number I.
112

113
00:08:22.920 --> 00:08:24.530
OK so how do we go about doing this.
113

114
00:08:24.530 --> 00:08:31.100
We need to test two things at the same time: we need to test whether the length of the dictionary is
114

115
00:08:31.100 --> 00:08:39.890
1 and if the length is 1 then we need to test whether the value at that first element in the dictionary
115

116
00:08:39.890 --> 00:08:42.890
with it with the first key is of length 1.
116

117
00:08:43.730 --> 00:08:43.930
OK.
117

118
00:08:43.940 --> 00:08:47.530
So let me write this out and then I will explain it again to make sure it's clear.
118

119
00:08:47.900 --> 00:08:56.550
So we say if the length of the dictionary is 1 and if the dictionary.
119

120
00:08:56.550 --> 00:09:02.720
And now I want to access the first element in the dictionary using the first key so that's going to
120

121
00:09:02.720 --> 00:09:09.240
be keys 0 corresponding to the first key in the dictionary.
121

122
00:09:09.410 --> 00:09:18.530
And if that value associated with the first key is 1 then that means that there is 1 prime number and
122

123
00:09:18.530 --> 00:09:20.840
that prime number appears exactly once.
123

124
00:09:20.840 --> 00:09:23.720
And that means we're working with a prime number.
124

125
00:09:23.750 --> 00:09:29.930
So then if that's the case then we can say print and then it's going to be this number.
125

126
00:09:29.930 --> 00:09:35.300
So percent G is a prime number.
126

127
00:09:35.660 --> 00:09:40.000
And then that present G gets replaced with numi.
127

128
00:09:40.130 --> 00:09:44.670
So I want to run this code first and make sure that all of this works.
128

129
00:09:44.900 --> 00:09:48.490
So we get to is a prime number three five seven.
129

130
00:09:48.500 --> 00:09:48.860
Okay.
130

131
00:09:48.860 --> 00:09:50.560
This all looks great.
131

132
00:09:50.960 --> 00:09:57.140
Now I don't have memorized in my head all of the prime numbers, although it is pretty easy to check because
132

133
00:09:57.140 --> 00:10:00.750
the only prime number that is an even number is two.
133

134
00:10:00.800 --> 00:10:05.270
All the other prime numbers in our universe are odd numbers.
134

135
00:10:05.790 --> 00:10:06.070
Okay.
135

136
00:10:06.080 --> 00:10:06.350
Good.
136

137
00:10:06.350 --> 00:10:09.200
So the code is still working so far.
137

138
00:10:09.200 --> 00:10:17.090
Now if this is not the case of either one of these is not true then we are not working with a prime
138

139
00:10:17.090 --> 00:10:17.450
number.
139

140
00:10:17.450 --> 00:10:20.570
So then we want to say that this number.
140

141
00:10:20.570 --> 00:10:34.860
Percent g is a composite number with prime factors and then I'm going to say again percent
141

142
00:10:34.970 --> 00:10:39.840
S and now I want to list out the actual keys...
142

143
00:10:39.840 --> 00:10:46.690
First we need to replace this percent g with the numbers that's numi.
143

144
00:10:46.840 --> 00:10:50.170
And then we want the keys from the dictionary.
144

145
00:10:50.170 --> 00:10:51.060
And that is di.
145

146
00:10:51.090 --> 00:10:53.950
So that's D I dot keys.
146

147
00:10:53.950 --> 00:10:54.460
All right.
147

148
00:10:54.460 --> 00:10:58.540
And now... a bit of a drumroll... I think this is going to be good.
148

149
00:10:58.630 --> 00:10:59.190
All right.
149

150
00:10:59.260 --> 00:11:01.840
This looks kind of good.
150

151
00:11:01.870 --> 00:11:06.830
This is not totally satisfactory but actually let's check that it's working well first.
151

152
00:11:06.850 --> 00:11:12.640
So first of all we can see all of the numbers are present from two all the way down to 50 and then we
152

153
00:11:12.640 --> 00:11:17.510
can see for these composite numbers we have the prime factors two and five.
153

154
00:11:17.560 --> 00:11:19.140
This one is just seven.
154

155
00:11:19.160 --> 00:11:25.780
That makes sense because forty nine is seven times seven and seven is a prime number which you can see
155

156
00:11:25.780 --> 00:11:26.710
here.
156

157
00:11:26.770 --> 00:11:27.060
All right.
157

158
00:11:27.070 --> 00:11:28.120
So this is getting better.
158

159
00:11:28.120 --> 00:11:33.990
The thing that I don't like is how this is printed out dictionary keys or dict keys here.
159

160
00:11:34.060 --> 00:11:40.510
So you might remember that I showed you that you can make a list of these keys, so let's do that. So I'm
160

161
00:11:40.510 --> 00:11:46.180
going to encase this in the list function and....
161

162
00:11:46.180 --> 00:11:48.100
now this is starting to look good.
162

163
00:11:48.100 --> 00:11:49.630
In fact this looks great.
163

164
00:11:49.630 --> 00:11:53.830
I would say this is the end of the assignment.
164

165
00:11:53.840 --> 00:11:56.330
So I hope you enjoyed this video.
165

166
00:11:56.330 --> 00:11:58.290
I certainly enjoyed creating it.
166

167
00:11:58.310 --> 00:12:02.540
You learned how to factor a number into primes.
167

168
00:12:02.540 --> 00:12:09.080
So prime factorization and you also learned how to write an algorithm that determines whether a number
168

169
00:12:09.140 --> 00:12:11.030
is prime or composite.
