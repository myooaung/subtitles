1
00:00:03,360 --> 00:00:10,080
This video is a follow up to the previous video which introduced you to the idea of making an image

2
00:00:10,200 --> 00:00:12,170
out of a matrix.

3
00:00:12,180 --> 00:00:16,730
So this video is for the exercise coming from that video.

4
00:00:16,740 --> 00:00:21,330
The goal is essentially to make a checkerboard map which looks something like this.

5
00:00:21,330 --> 00:00:28,870
So how do you make a checkerboard in Python the way you do that is by implementing this algorithm here.

6
00:00:28,890 --> 00:00:30,320
This formula here.

7
00:00:30,390 --> 00:00:31,870
So we have each element.

8
00:00:31,870 --> 00:00:35,310
So the AIA throw in the JF column of matrix.

9
00:00:35,310 --> 00:00:43,410
I'll call it C for checkerboard equals minus one to the power of I Plus J where i is the row index and

10
00:00:43,410 --> 00:00:45,350
J is the column index.

11
00:00:45,420 --> 00:00:48,360
So that will produce this plot.

12
00:00:48,360 --> 00:00:53,760
And once you successfully get this whole matrix to work you can see if you can figure out how to get

13
00:00:53,760 --> 00:00:57,050
these tick marks to be present without any labels.

14
00:00:57,060 --> 00:01:04,920
So here you see the tick marks are present but there are no text labels associated with them I encourage

15
00:01:04,920 --> 00:01:09,680
you now to pause the video switch to Python and basically get this to work.

16
00:01:10,080 --> 00:01:16,500
And now I'm going to switch to Python and show you how I will go about solving this.

17
00:01:16,530 --> 00:01:22,200
Now I didn't actually tell you the size of this matrix but you can guess that it's going to be a square

18
00:01:22,200 --> 00:01:26,640
matrix and let's just start with making it a 10 by 10.

19
00:01:26,640 --> 00:01:33,530
So I'm initializing this matrix called C to be a 10 by 10 matrix of zeros.

20
00:01:33,660 --> 00:01:37,890
And now I'm going to need to implement that formula that I showed in the slides.

21
00:01:37,890 --> 00:01:40,290
So this is actually I think even parameters this.

22
00:01:40,280 --> 00:01:45,730
So let's pick a new variable called N and set n to be equal to 10.

23
00:01:45,990 --> 00:01:51,930
And this is really great because now we can change the size of this matrix just by changing this one

24
00:01:51,930 --> 00:01:54,340
parameter that's called soft coding.

25
00:01:54,510 --> 00:02:00,900
This is called soft coding is generally preferred whenever possible.

26
00:02:00,900 --> 00:02:01,190
OK.

27
00:02:01,200 --> 00:02:03,410
So let's set up a double for loop.

28
00:02:03,420 --> 00:02:12,120
So for i in range 0 to n this is gonna loop over the rows and then we loop over the columns.

29
00:02:12,300 --> 00:02:21,670
And that's also going from 4 J in range 0 to N because this is a square matrix so it's end by n.

30
00:02:21,960 --> 00:02:30,840
Now we need to specify that each element so the I throw in a J if column is equal to minus 1 to the

31
00:02:30,840 --> 00:02:34,390
power of I Plus J.

32
00:02:34,530 --> 00:02:40,620
And now the question is whether this is really the right implementation of this formula.

33
00:02:41,190 --> 00:02:42,870
And the answer is No.

34
00:02:42,870 --> 00:02:50,190
And that's because if you remember pen does the order of operations exponential nation takes precedence

35
00:02:50,190 --> 00:02:52,090
before addition.

36
00:02:52,140 --> 00:02:59,990
So in fact python will associate the AI with the power and not with the J.

37
00:03:00,020 --> 00:03:07,110
Okay so we need to override this order of operations so that can be done by using parentheses and of

38
00:03:07,110 --> 00:03:10,620
course parentheses trumps everything else.

39
00:03:10,620 --> 00:03:10,940
All right.

40
00:03:10,950 --> 00:03:12,930
So maybe this is good.

41
00:03:12,930 --> 00:03:14,670
Maybe this works.

42
00:03:14,670 --> 00:03:17,040
Let's see what this looks like.

43
00:03:17,250 --> 00:03:20,160
Plot I am show and then matrix C

44
00:03:23,010 --> 00:03:24,120
and.

45
00:03:24,270 --> 00:03:27,320
That is a rather disappointing image.

46
00:03:27,360 --> 00:03:31,750
It doesn't really look anything like a checkerboard.

47
00:03:32,010 --> 00:03:37,200
So what is going on here now in this case it's kind of hard to tell just from looking at this image.

48
00:03:37,200 --> 00:03:43,670
So what I'd like to do is print out this matrix C and see what that looks like.

49
00:03:43,680 --> 00:03:43,910
All right.

50
00:03:43,940 --> 00:03:48,990
So this matrix C is all minus ones everywhere it's minus one.

51
00:03:48,990 --> 00:03:53,590
So clearly something went wrong and let's see if we can figure it out.

52
00:03:53,850 --> 00:03:57,750
And actually the problem is also with this order of operations.

53
00:03:57,810 --> 00:04:00,780
So this looks like minus one into your eyes.

54
00:04:00,780 --> 00:04:03,440
This looks like it's a single object.

55
00:04:03,450 --> 00:04:05,440
You know just the number minus one.

56
00:04:05,490 --> 00:04:13,110
However what's really going on under the surface is that there is a minus one times one to the power

57
00:04:13,200 --> 00:04:21,360
of I Plus J and then this exponent is taking precedence over the multiplication.

58
00:04:21,450 --> 00:04:28,500
So really it's just implementing so python is implementing one to this power and then multiplying everything

59
00:04:28,770 --> 00:04:30,550
by minus one.

60
00:04:30,570 --> 00:04:34,620
So the solution is yet again to use parentheses.

61
00:04:34,830 --> 00:04:38,940
That often happens it's often a solution in mathematics and in Python.

62
00:04:39,060 --> 00:04:41,680
When in doubt start using parentheses.

63
00:04:41,700 --> 00:04:41,920
All right.

64
00:04:41,940 --> 00:04:44,270
So let's see what this looks like now.

65
00:04:44,310 --> 00:04:44,610
All right.

66
00:04:44,610 --> 00:04:50,090
So this is now pretty curious because the actual Matrix itself looks great.

67
00:04:50,100 --> 00:04:52,860
This is exactly what we want for a checkerboard.

68
00:04:52,920 --> 00:04:57,240
It's an alternating pattern of minus ones and plus ones.

69
00:04:57,300 --> 00:05:02,240
However the Matrix the image of the matrix still doesn't look very good.

70
00:05:02,250 --> 00:05:05,240
Now maybe this is an issue of the color map.

71
00:05:05,250 --> 00:05:11,280
So I'm going to change the color map to be black and white or in particular.

72
00:05:11,280 --> 00:05:12,510
It's actually called grayscale.

73
00:05:12,510 --> 00:05:15,230
So let's set this to be gray.

74
00:05:15,660 --> 00:05:18,120
And now the image looks really great.

75
00:05:18,120 --> 00:05:21,300
This looks like a game of checkers that we could play.

76
00:05:22,270 --> 00:05:22,550
Okay.

77
00:05:22,560 --> 00:05:28,470
And now it's also pretty interesting and easy to change n to see how that affects this plot.

78
00:05:28,470 --> 00:05:36,150
So let's try 20 and wonder what it's going to look like if I do two hundreds Okay so this is pretty

79
00:05:36,150 --> 00:05:41,540
interesting there's a lot of tiny tiny little squares here that are actually getting a little bit alias.

80
00:05:41,540 --> 00:05:45,290
That's why you see this kind of larger repeating pattern in here.

81
00:05:45,360 --> 00:05:49,210
Anyway let's set it back to be 10.

82
00:05:49,340 --> 00:05:49,670
Okay.

83
00:05:49,680 --> 00:05:55,770
And then the other thing that we want to do is get rid of the tick labels without getting rid of the

84
00:05:55,830 --> 00:05:57,790
tick marks themselves.

85
00:05:57,810 --> 00:06:00,390
So I hope you were able to figure out how to do that.

86
00:06:00,390 --> 00:06:08,770
Maybe you had to look it up on the internet but the solution is to use the method tick parameters for

87
00:06:08,770 --> 00:06:15,920
a tick parameters and then I'm going to specify that the label for the left side.

88
00:06:15,930 --> 00:06:20,610
So here is set to false.

89
00:06:20,820 --> 00:06:25,800
And then when I rerun it again you can see that there are no tick labels so the tick marks are still

90
00:06:25,800 --> 00:06:29,130
there but the labels are not there.

91
00:06:29,220 --> 00:06:29,490
So.

92
00:06:29,490 --> 00:06:37,150
And then to get rid of these guys down here that is label bottom and also set that to be false.

93
00:06:37,170 --> 00:06:37,720
All right.

94
00:06:37,740 --> 00:06:39,080
This looks very nice.

95
00:06:39,210 --> 00:06:48,000
And suddenly I feel like playing checkers in this video and the previous video I showed you how to visualize

96
00:06:48,000 --> 00:06:56,280
matrices using Python and in particular the function I am show being able to visualize matrices is super

97
00:06:56,280 --> 00:07:03,240
duper important for making progress as a coder who wants to understand mathematics better.
