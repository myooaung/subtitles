0
1
00:00:04,480 --> 00:00:11,890
In the previous video I introduced you to lists in Python and I introduced you to the concept of indexing
1

2
00:00:11,980 --> 00:00:19,330
a single item in a list and also indexing multiple items at the list which is also called slicing. Indexing
2

3
00:00:19,420 --> 00:00:25,900
and slicing is a pretty important concept in Python and programming in general and so I thought I'd
3

4
00:00:25,900 --> 00:00:32,410
spend just a few more minutes going through the concept of indexing and slicing again just to drive
4

5
00:00:32,440 --> 00:00:37,070
the point home a little bit further and give you a bit more experience with it.
5

6
00:00:37,150 --> 00:00:39,780
So let's start by creating a vector.
6

7
00:00:39,970 --> 00:00:46,990
Now in this case, I'm going to create this vector as a range and let's say we want this range of numbers
7

8
00:00:46,990 --> 00:00:49,420
to go from 10 to 20.
8

9
00:00:49,420 --> 00:00:54,890
So that means in the range function we actually type 10 comma 21.
9

10
00:00:55,040 --> 00:01:00,070
And now if I just look at what this variable vec, it is simply a range.
10

11
00:01:00,080 --> 00:01:02,400
So this is basically just what I typed in.
11

12
00:01:02,710 --> 00:01:05,990
And in fact if I would type the type.
12

13
00:01:06,100 --> 00:01:08,860
Now this is not the verb to type,
13

14
00:01:08,860 --> 00:01:13,720
this is the function type which returns the class of this variable.
14

15
00:01:13,720 --> 00:01:15,550
And it is a class range.
15

16
00:01:15,550 --> 00:01:21,970
And if I want to convert this into a list, which I showed you in the previous video then you can use
16

17
00:01:21,970 --> 00:01:24,810
the function list and the input will be a range.
17

18
00:01:24,970 --> 00:01:32,410
And essentially that's going to convert the variable from the range 10 to 20 to the list of numbers
18

19
00:01:32,470 --> 00:01:34,540
from 10 to 20.
19

20
00:01:34,540 --> 00:01:41,530
So now you can see that this variable is now of type list, and if we just look to see what that list
20

21
00:01:41,530 --> 00:01:49,680
contains, it is the integers 10 through 20 separated by commas and surrounded by square brackets.
21

22
00:01:49,690 --> 00:01:52,450
So that's how you know that it's a list.
22

23
00:01:52,450 --> 00:01:52,750
All right.
23

24
00:01:52,750 --> 00:02:00,790
So now if we want to access an individual item within this vector, this variable Vec, this list, you also
24

25
00:02:00,790 --> 00:02:03,670
do that with square brackets just like this.
25

26
00:02:03,670 --> 00:02:10,240
So for example if I want to access the first element keeping in mind that Python starts counting at
26

27
00:02:10,240 --> 00:02:18,130
zero, then you type Vec 0 and then you get the answer of 10 and that's the correct result because 10
27

28
00:02:18,250 --> 00:02:22,960
is the first element or the element number is 0 in this list.
28

29
00:02:22,960 --> 00:02:32,640
So if you wanted to access the number 13, which number would you have to put here? So to access 13 it's
29

30
00:02:32,640 --> 00:02:39,540
actually the fourth element in this list, which means the index would be 0 1 2 3.
30

31
00:02:39,540 --> 00:02:46,810
So this turns out to be the third, or index element number three, and that gives us the number 13.
31

32
00:02:46,840 --> 00:02:53,120
Now if I wanted to access 12 13 and 14 how would we do that?
32

33
00:02:53,130 --> 00:02:56,940
So there we use the colon operator.
33

34
00:02:57,210 --> 00:03:04,320
And essentially what you want to do is specify the first element here and then one plus the last element
34

35
00:03:04,440 --> 00:03:08,550
after the colon. So to access 12 13 and 14.
35

36
00:03:08,550 --> 00:03:17,010
The first element that would go to the left of this colon here is the 0 1 2 element 2 or index 2 and
36

37
00:03:17,010 --> 00:03:23,760
then to get to 14, it's 2 3 4 and then you have to go one more to 5.
37

38
00:03:23,790 --> 00:03:27,050
So this returns 12 13 and 14.
38

39
00:03:27,210 --> 00:03:34,260
And this procedure here, this is called slicing, because we are taking a slice out of this list.
39

40
00:03:34,320 --> 00:03:34,550
Okay.
40

41
00:03:34,590 --> 00:03:40,350
So a couple of other things you can do if you wanted to get from let's say element 5.
41

42
00:03:40,380 --> 00:03:42,230
Up until the end.
42

43
00:03:42,360 --> 00:03:46,500
So now I'm not writing anything after the colon I just leave the colon as it is.
43

44
00:03:47,190 --> 00:03:51,230
And that's going to return 0 1 2 3 4 5.
44

45
00:03:51,240 --> 00:03:52,970
So element 5.
45

46
00:03:53,160 --> 00:03:58,140
And again you have to be a bit careful here because this is the way you know the way that like normal
46

47
00:03:58,140 --> 00:03:59,100
humans would count.
47

48
00:03:59,100 --> 00:04:05,160
This is the first second third fourth fifth sixth element but Python starts counting at 0.
48

49
00:04:05,250 --> 00:04:07,410
So that's index number five.
49

50
00:04:07,590 --> 00:04:11,270
And it goes all the way up to the end and that's what this notation means.
50

51
00:04:11,280 --> 00:04:18,570
So based on this syntax, I'm sure you can guess how the syntax would look like if we wanted to go from
51

52
00:04:18,630 --> 00:04:22,730
the beginning up to and including the number 15.
52

53
00:04:22,730 --> 00:04:24,720
So how would you do that?
53

54
00:04:24,810 --> 00:04:31,020
So keeping in mind that when you specify the top index you always do one plus the number that you want.
54

55
00:04:31,020 --> 00:04:36,350
So this will be index 0 1 2 3 4 5 6.
55

56
00:04:36,360 --> 00:04:38,760
So here we would write nothing.
56

57
00:04:38,790 --> 00:04:40,830
And then colon six.
57

58
00:04:41,120 --> 00:04:43,950
And that gives us the numbers 10 through 15.
58

59
00:04:43,950 --> 00:04:46,670
So up to this element here.
59

60
00:04:46,710 --> 00:04:46,980
All right.
60

61
00:04:46,980 --> 00:04:51,840
The next thing I'm going to show you is how to count backwards or how to index backwards from the end
61

62
00:04:51,870 --> 00:04:53,340
towards the beginning.
62

63
00:04:53,400 --> 00:05:00,120
So I already showed you how to access the first element, so that would be zero or if you want the second
63

64
00:05:00,120 --> 00:05:02,530
element then its index number one.
64

65
00:05:02,610 --> 00:05:07,550
What would you do if you wanted the last index in this array, in this vector?
65

66
00:05:07,590 --> 00:05:14,760
Now you could figure out what is the size of this list and say it's element number 0 1 2 3 4 and so on
66

67
00:05:15,300 --> 00:05:18,420
but that's not always such a scalable method.
67

68
00:05:19,020 --> 00:05:25,380
So the way to automatically get to the very end of a list is to use minus one.
68

69
00:05:25,380 --> 00:05:31,200
So you say minus one and the way to think about this is that it's like you're starting here at zero
69

70
00:05:31,470 --> 00:05:35,850
and imagine that when you go to negative indices you're wrapping around to the end.
70

71
00:05:35,850 --> 00:05:43,650
So this is the index number two index number one index number zero and then index minus 1 is wrapping
71

72
00:05:43,650 --> 00:05:45,930
all the way around and we get to the end.
72

73
00:05:45,990 --> 00:05:49,720
So index minus 1 corresponds to 20.
73

74
00:05:50,070 --> 00:05:54,880
And that also means that index minus 2 is going to be 19.
74

75
00:05:55,080 --> 00:05:56,520
So that's actually pretty handy.
75

76
00:05:56,520 --> 00:06:03,360
We can access the second to last element, which is also called the penultimate element, by using minus
76

77
00:06:03,360 --> 00:06:04,200
two.
77

78
00:06:04,290 --> 00:06:09,840
And this is handy because we don't need to know exactly how many elements there are in this list for
78

79
00:06:09,840 --> 00:06:11,690
this procedure to work.
79

80
00:06:11,790 --> 00:06:17,560
Now if you wanted to flip this list around and count backwards from the end to the beginning there's
80

81
00:06:17,610 --> 00:06:19,430
a little bit of a funny notation here.
81

82
00:06:19,430 --> 00:06:20,720
Essentially you go
82

83
00:06:20,730 --> 00:06:23,770
colon colon and then minus one.
83

84
00:06:23,790 --> 00:06:25,740
So why is this the right thing to do?
84

85
00:06:25,740 --> 00:06:28,710
Why does this make sense? To explain this,
85

86
00:06:28,710 --> 00:06:32,070
I'm going to introduce you to something called skipping.
86

87
00:06:32,070 --> 00:06:38,670
So let's say we wanted to go from the first element of this list to... I don't know how about the number
87

88
00:06:38,670 --> 00:06:39,150
14.
88

89
00:06:39,160 --> 00:06:42,330
So let's say we want to count from 10 to 14.
89

90
00:06:42,450 --> 00:06:43,650
So that's no problem.
90

91
00:06:43,650 --> 00:06:45,090
You already know how to do that.
91

92
00:06:45,090 --> 00:06:53,060
You can say 0 2 and then it's the element or index 0 1 2 3 4.
92

93
00:06:53,510 --> 00:06:53,750
OK.
93

94
00:06:53,760 --> 00:06:58,650
So that gives... oops, you can see this confusing I already just made a mistake :P
94

95
00:06:58,710 --> 00:07:06,270
So this gives us the indices 0 through 4 which corresponds to the numbers 10 through 14.
95

96
00:07:06,270 --> 00:07:12,360
Now let's say that I only wanted to skip every other number, so I don't want the eleven and I don't want
96

97
00:07:12,360 --> 00:07:13,050
the 13.
97

98
00:07:13,050 --> 00:07:17,390
I want to go from 10 to 14 but skipping in steps of two.
98

99
00:07:17,790 --> 00:07:24,930
So the way to do that is you add another semicolon here and you tell Python here after the second semicolon
99

100
00:07:25,380 --> 00:07:27,210
how much you want to skip by.
100

101
00:07:27,210 --> 00:07:35,440
So this is saying we skip by two. So now this returns 10 12 14 and this is not just about counting even
101

102
00:07:35,440 --> 00:07:37,830
numbers; you could say three.
102

103
00:07:37,900 --> 00:07:40,260
And now you're counting in steps of three.
103

104
00:07:40,270 --> 00:07:45,750
So it goes from index zero and then one two three.
104

105
00:07:45,760 --> 00:07:51,880
And then well then we go up to this number but there's no more steps of three that go after this so
105

106
00:07:51,880 --> 00:07:53,920
it stops at 13.
106

107
00:07:53,920 --> 00:07:55,320
So now let's try
107

108
00:07:55,320 --> 00:08:00,460
for example if I would type colon colon three.
108

109
00:08:00,460 --> 00:08:07,210
Now this is going to return the first element or basically it returns all the elements skipping in three.
109

110
00:08:07,240 --> 00:08:08,430
So we get this.
110

111
00:08:08,470 --> 00:08:13,720
And then one two three one two three one two three.
111

112
00:08:13,720 --> 00:08:15,210
And then it gets to the end.
112

113
00:08:15,250 --> 00:08:19,280
So the colon Colon is actually just a shorthand for writing zero.
113

114
00:08:19,300 --> 00:08:22,580
And then to the end in steps of three.
114

115
00:08:23,120 --> 00:08:23,380
OK.
115

116
00:08:23,410 --> 00:08:31,690
So with that in mind, we can also count from the beginning to the end of the sequence in steps of two.
116

117
00:08:31,870 --> 00:08:37,370
We can go from the beginning to the end of the sequence in steps of 1 and now in this case.
117

118
00:08:37,720 --> 00:08:41,020
You know this is extra text but just to show you that that works.
118

119
00:08:41,560 --> 00:08:47,170
So now when I write minus one what I'm actually doing is going from the beginning to the end but I'm
119

120
00:08:47,410 --> 00:08:50,300
skipping in steps of minus one.
120

121
00:08:50,320 --> 00:08:53,930
And that's how you get the list flipped backwards.
121

122
00:08:54,010 --> 00:09:01,210
So I hope this makes sense, and I hope you see that indexing and slicing and Python is not really so
122

123
00:09:01,210 --> 00:09:03,100
fundamentally difficult.
123

124
00:09:03,100 --> 00:09:08,590
There are a few little tricks and shortcuts that you have to remember, but don't stress yourself out
124

125
00:09:08,590 --> 00:09:13,540
about trying to memorize these. As you go throughout your programming,
125

126
00:09:13,540 --> 00:09:18,950
you will naturally become more and more familiar with this and eventually it will become second nature.
126

127
00:09:18,970 --> 00:09:25,560
The main thing that you have to be mindful of is the fact that Python starts indexing at 0.
127

128
00:09:25,570 --> 00:09:29,470
So that can sometimes cause a little bit of confusion and you have to be careful with that.
