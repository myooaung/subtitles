0
1
00:00:03,210 --> 00:00:11,190
Let us continue our journey on learning how to use Python and sympy as tools for understanding
1

2
00:00:11,250 --> 00:00:12,360
mathematics.
2

3
00:00:12,420 --> 00:00:17,650
What we are going to do in this video is focus on expanding terms.
3

4
00:00:17,700 --> 00:00:24,060
And I'll also show you a little bit more about how to work with the sympy toolbox, and how to see what
4

5
00:00:24,060 --> 00:00:29,680
variables and functions and modules are already loaded into python.
5

6
00:00:30,030 --> 00:00:37,440
So expanding terms means something like this: if we say eight times the quantity b plus c then you
6

7
00:00:37,440 --> 00:00:41,370
can apply eight each of these terms individually.
7

8
00:00:41,490 --> 00:00:43,800
That's called the distributive property.
8

9
00:00:43,800 --> 00:00:52,220
So this can be expanded into this expression: a times b plus a times c.
9

10
00:00:52,230 --> 00:00:55,100
Another example of expanding terms looks like this.
10

11
00:00:55,110 --> 00:01:03,600
So if we say the quantity A plus B times the quantity C plus D, then this whole thing can be expanded
11

12
00:01:03,660 --> 00:01:11,380
into eight times C plus eight times D plus B times C plus B times D.
12

13
00:01:11,430 --> 00:01:18,270
And of course these parentheses are necessary because they're grouping together for the multiplication.
13

14
00:01:18,270 --> 00:01:20,460
These parentheses are not necessary.
14

15
00:01:20,460 --> 00:01:27,090
I just put them in here for visual aesthetics basically, so you can drop the parentheses and expand these
15

16
00:01:27,090 --> 00:01:29,680
terms into these terms.
16

17
00:01:29,860 --> 00:01:30,120
Okay.
17

18
00:01:30,150 --> 00:01:36,570
So when you have a really simple case like this, then you don't need a computer, you don't need Python
18

19
00:01:36,840 --> 00:01:45,660
to tell you how to expand these terms. But as you move more into more sophisticated areas of mathematics
19

20
00:01:46,020 --> 00:01:51,390
then knowing how to expand terms can become really useful.
20

21
00:01:51,390 --> 00:01:52,610
So let's get started.
21

22
00:01:52,680 --> 00:01:58,890
I've already written the code here to import sympy and the display and math functions because we
22

23
00:01:58,890 --> 00:02:01,170
are definitely going to need them here.
23

24
00:02:01,230 --> 00:02:04,020
So I'm going to start by writing two terms.
24

25
00:02:04,050 --> 00:02:14,280
Let's call this term one equals four times x plus five, and then let's say term two equals x and then
25

26
00:02:14,340 --> 00:02:19,330
basically what I want to do is print out a term one times term 2.
26

27
00:02:19,350 --> 00:02:24,390
Now you can probably already guess that this code is going to create an error.
27

28
00:02:24,510 --> 00:02:29,260
It is not going to run and that's because we haven't yet defined X.
28

29
00:02:29,370 --> 00:02:36,150
So I want X to be a symbolic variable. Now, so far in this course, the way that I've taught you how to
29

30
00:02:36,180 --> 00:02:44,840
create symbolic variables is by typing X equals sym dot symbols and then in single quotes x.
30

31
00:02:44,910 --> 00:02:50,400
So this is fine of course there's nothing wrong with this syntax, but I want to introduce you to another
31

32
00:02:50,400 --> 00:02:54,840
way of importing or creating symbolic variables.
32

33
00:02:54,840 --> 00:03:02,310
So here I'm going to write from sym dot ABC ABC.
33

34
00:03:02,400 --> 00:03:08,280
This has to be sympy from sympy dot ABC import x.
34

35
00:03:09,090 --> 00:03:11,490
So this is a pretty neat syntax here.
35

36
00:03:11,520 --> 00:03:19,410
Essentially we're importing from the method ABC in the sympy module the object X and now when I run
36

37
00:03:19,410 --> 00:03:21,120
this code, this is going to work.
37

38
00:03:21,510 --> 00:03:24,530
Now just be mindful that this only works for a single letter.
38

39
00:03:24,540 --> 00:03:29,560
So if I were to type X and how about qwerty.
39

40
00:03:29,910 --> 00:03:31,850
Now this is not going to work.
40

41
00:03:31,860 --> 00:03:35,910
It says cannot import name qwerty from sympy dot ABC.
41

42
00:03:35,910 --> 00:03:40,860
So if you want any arbitrary variable name, then you're going to have to use the method that I showed you
42

43
00:03:40,860 --> 00:03:41,600
before.
43

44
00:03:41,610 --> 00:03:45,260
So asdf... I think I had this qwerty didn't I?
44

45
00:03:45,290 --> 00:03:50,970
So qwerty equals sym dot symbols qwerty.
45

46
00:03:51,600 --> 00:03:52,260
So there you go.
46

47
00:03:53,450 --> 00:03:57,370
Now I'm going to delete this because I'm not actually going to use that variable qwerty.
47

48
00:03:57,560 --> 00:03:57,830
OK.
48

49
00:03:57,840 --> 00:03:58,980
So now I printed out.
49

50
00:03:58,980 --> 00:04:02,270
Term one times term two and not literally just print it out.
50

51
00:04:02,280 --> 00:04:04,230
What I wrote here.
51

52
00:04:04,260 --> 00:04:07,900
So we didn't get any expansion of terms.
52

53
00:04:08,310 --> 00:04:10,430
So let's try print.
53

54
00:04:10,510 --> 00:04:17,370
Now I'm going to use the function sym dot expand, and then the input will be the same thing.
54

55
00:04:17,360 --> 00:04:25,440
So term one times term two and now we get four X squared plus five X, and that makes sense because the
55

56
00:04:25,440 --> 00:04:26,680
four goes here.
56

57
00:04:26,680 --> 00:04:30,140
Times... sorry the X goes in here and makes us X squared.
57

58
00:04:30,150 --> 00:04:36,990
And then we get five X and now you know by this point in the course that I am not a big fan of this
58

59
00:04:36,990 --> 00:04:40,100
kind of printing. I don't think it really looks nice.
59

60
00:04:40,110 --> 00:04:47,010
The thing is if you are looking at this line of code you can read it and if you give this code or if
60

61
00:04:47,010 --> 00:04:53,430
you give this output to someone else who is really familiar with Python coding and sympy coding, then
61

62
00:04:53,490 --> 00:04:55,670
they will also be able to interpret it.
62

63
00:04:56,100 --> 00:05:02,430
But if you would show this to someone who is not really familiar with Python, then they might not know
63

64
00:05:02,870 --> 00:05:05,000
for example that this means squared.
64

65
00:05:05,300 --> 00:05:11,210
Furthermore, once you get into math notation, the asterisk is often used to indicate a procedure called
65

66
00:05:11,210 --> 00:05:15,260
convolution, which is not the same thing as multiplication.
66

67
00:05:15,290 --> 00:05:15,530
All right.
67

68
00:05:15,530 --> 00:05:20,920
So for all of those reasons, it's nice to use nicer looking formatting.
68

69
00:05:20,930 --> 00:05:26,060
So let's say print and then we want the math function.
69

70
00:05:26,060 --> 00:05:29,900
Math function and then sym dot latex.
70

71
00:05:29,940 --> 00:05:35,370
Now this is basically all review except when I run this.
71

72
00:05:35,420 --> 00:05:38,660
Now it no longer shows me this nice looking equation.
72

73
00:05:38,660 --> 00:05:41,810
Instead it says that this is some kind of object.
73

74
00:05:41,930 --> 00:05:44,980
It's a display dot math object.
74

75
00:05:45,050 --> 00:05:46,970
So what is going on here?
75

76
00:05:46,970 --> 00:05:53,210
Well, what's going on here is just that I use the print function instead of the display function and
76

77
00:05:53,240 --> 00:06:00,410
the main reason why I showed you that is because if you ever carelessly -- it's you really easy mistake
77

78
00:06:00,410 --> 00:06:07,550
to make -- but if you ever by accident use print instead of display then you'll get this message here, which
78

79
00:06:07,550 --> 00:06:09,960
is just printing out what this thing is.
79

80
00:06:10,280 --> 00:06:13,270
So this is a math object.
80

81
00:06:13,580 --> 00:06:19,400
So if you see an message like this then you know what you've done wrong, or you haven't really done anything
81

82
00:06:19,400 --> 00:06:24,680
wrong here, but probably not what you hoped you would be doing.
82

83
00:06:24,740 --> 00:06:25,120
All right.
83

84
00:06:25,130 --> 00:06:31,860
Now I'm going to add another term. Let's call this term three and this is going to be X minus seven.
84

85
00:06:31,910 --> 00:06:38,300
So now I want to show you the difference between multiplying the terms and expanding the multiplied
85

86
00:06:38,360 --> 00:06:39,980
terms.
86

87
00:06:40,130 --> 00:06:50,700
So I am going to write out display and then math and then sym dot latex term one times term three.
87

88
00:06:50,900 --> 00:06:55,820
And so that is essentially similar to what we printed out here.
88

89
00:06:55,820 --> 00:06:59,420
So you can see that Python didn't actually expand the multiplication.
89

90
00:06:59,450 --> 00:07:05,950
It just printed out the two terms in nicer looking mathematical notation.
90

91
00:07:05,950 --> 00:07:06,230
All right.
91

92
00:07:06,230 --> 00:07:16,250
And now what I'm going to do is copy and paste, except now I'm going to add sym dot expand inside the
92

93
00:07:16,310 --> 00:07:18,040
latex code.
93

94
00:07:18,110 --> 00:07:18,400
All right.
94

95
00:07:18,410 --> 00:07:26,210
And now here with sym dot expand, so I've multiply these two terms, put that into the sym dot expand
95

96
00:07:26,210 --> 00:07:32,730
function, and then I've put that into latex and I put that into math and I put that into display. Fwooof!
96

97
00:07:32,780 --> 00:07:35,750
That is really a lot of embedded functions.
97

98
00:07:35,750 --> 00:07:40,910
If you're ever looking at code and you see a lot of embedded functions like this and you're having a
98

99
00:07:40,910 --> 00:07:47,960
hard time figuring out what's going on, then the normal way, the way that your brain probably wants you
99

100
00:07:47,960 --> 00:07:53,570
to try and figure out what's happening in this line of code, is to start from here and say huh, display
100

101
00:07:53,660 --> 00:07:59,330
and then math... but this is the wrong way to do it. The better way to decode a line of code that has a
101

102
00:07:59,330 --> 00:08:06,250
lot of embedded features like this, is to start from the most deeply embedded piece of code.
102

103
00:08:06,260 --> 00:08:12,260
So you want to start by looking for what's in the most number of parentheses. And then you start working
103

104
00:08:12,260 --> 00:08:13,490
your way outwards from there.
104

105
00:08:13,490 --> 00:08:20,240
So first we have the multiplication in these two terms and then we expand then we convert to latex code
105

106
00:08:20,330 --> 00:08:23,420
and then we input that into math and so on.
106

107
00:08:23,420 --> 00:08:28,150
All right. But the point is I wanted to show you that you need this expand function.
107

108
00:08:28,190 --> 00:08:33,600
Otherwise the printout is going to be the same as the literal input.
108

109
00:08:34,550 --> 00:08:35,020
OK.
109

110
00:08:35,030 --> 00:08:41,030
The next thing I want to show you is expanding with two variables.
110

111
00:08:41,030 --> 00:08:44,900
So we already have variable X so let's create variable Y.
111

112
00:08:44,900 --> 00:08:52,760
So I'll say from sympy dot abc import y.
112

113
00:08:52,760 --> 00:09:08,480
So let's say our expression is X times two times Y squared minus five to the power of x divided by x.
113

114
00:09:08,780 --> 00:09:14,440
So who knows what this equation means, but it's something that looks kind of interesting.
114

115
00:09:14,600 --> 00:09:24,590
So let's display this using nice looking math notations, so sym dot latex expr. Here is what
115

116
00:09:24,590 --> 00:09:26,180
this equation looks like.
116

117
00:09:26,180 --> 00:09:32,030
And now I'm going to run this again, expanding this, so sym dot expand.
117

118
00:09:34,690 --> 00:09:41,140
And I guess the main idea that I want to show you here is that the expand function will work also with
118

119
00:09:41,140 --> 00:09:45,660
multiple variables. So it's not just with expressions that have only one variable.
119

120
00:09:45,670 --> 00:09:53,080
You can also use multiple variables in this case x and y and that's really no problem.
120

121
00:09:53,110 --> 00:09:57,840
So we've created quite a lot of variables here.
121

122
00:09:57,850 --> 00:10:01,870
Well OK maybe not a lot but we've created several variables here.
122

123
00:10:01,870 --> 00:10:08,380
The question is what are all the variables and the functions and the modules that we have imported into
123

124
00:10:08,410 --> 00:10:09,710
python?
124

125
00:10:09,880 --> 00:10:11,370
You can type percent
125

126
00:10:11,480 --> 00:10:17,890
whos. And then basically just run this in its own cell and you will see a really nice, really useful
126

127
00:10:17,920 --> 00:10:24,790
printout of all the objects and variables and things that have been imported into python.
127

128
00:10:24,880 --> 00:10:28,320
So you see some of these are variables like X and Y.
128

129
00:10:28,330 --> 00:10:31,060
We created these as symbolic variables.
129

130
00:10:31,060 --> 00:10:35,690
Some of these are variables that we created like term one term, term 2 and term three.
130

131
00:10:35,710 --> 00:10:42,750
And remember I also imported qwerty here, and then here is the entire module of sym that I imported.
131

132
00:10:42,970 --> 00:10:44,620
And then we have math and display.
132

133
00:10:44,890 --> 00:10:45,460
So anyway.
133

134
00:10:45,460 --> 00:10:52,360
Percent whos is a really useful tool to show you what are all the things that you have in the python
134

135
00:10:52,360 --> 00:10:53,250
workspace.
135

136
00:10:53,320 --> 00:10:56,860
And it gives you some information about them including their class.
136

137
00:10:56,860 --> 00:11:01,510
Here is the exercise for this video.
137

138
00:11:01,540 --> 00:11:05,110
So what you want to do is create this function.
138

139
00:11:05,140 --> 00:11:13,510
It's a function of two variables, x and y. Four plus X times -- so the quantity four plus x times the quantity
139

140
00:11:13,510 --> 00:11:17,220
two minus Y. It's a pretty straightforward function.
140

141
00:11:17,230 --> 00:11:26,860
Now what you want to do is loop through different values of x and y, in particular X and Y being 0 1
141

142
00:11:26,890 --> 00:11:30,840
or 2 and then basically substitute for this function.
142

143
00:11:30,940 --> 00:11:36,880
Each of these values, all of these values for x and all these values for y, and then print out a table
143

144
00:11:36,880 --> 00:11:42,820
that looks something like this. So you can say when x equals zero and Y equals zero and then you keep
144

145
00:11:42,820 --> 00:11:43,420
looping through.
145

146
00:11:43,420 --> 00:11:50,070
So here are the three different possibilities for X and all the different possibilities for Y.
146

147
00:11:50,800 --> 00:11:53,990
So now is your opportunity to pause the video.
147

148
00:11:54,160 --> 00:11:55,000
Write some code.
148

149
00:11:55,000 --> 00:12:00,340
Make sure you can get an output that looks like this and now I'm going to switch to Python and show
149

150
00:12:00,340 --> 00:12:04,120
you my solution for this exercise.
150

151
00:12:04,390 --> 00:12:04,720
All right.
151

152
00:12:04,740 --> 00:12:08,530
So let's get started by writing out this function.
152

153
00:12:08,530 --> 00:12:10,480
So let's say F X Y.
153

154
00:12:10,480 --> 00:12:12,100
That's gonna be the variable.
154

155
00:12:12,520 --> 00:12:20,260
And this is going to be that function was for plus X times two minus Y.
155

156
00:12:20,260 --> 00:12:24,510
And of course I've already created X and Y to be symbolic variables.
156

157
00:12:24,520 --> 00:12:28,990
So if you hadn't done that you would need to first run a line that looks something like this.
157

158
00:12:28,990 --> 00:12:34,120
You could import X and Y at the same time but that is already done.
158

159
00:12:34,120 --> 00:12:40,400
So now we have our function, and then let's just make sure we can get this to work for one variable.
159

160
00:12:40,420 --> 00:12:49,240
So you have to remember that x y dot subs is the method for doing substitution and then the formatting
160

161
00:12:49,240 --> 00:12:50,550
which is called a dictionary.
161

162
00:12:50,580 --> 00:12:54,600
I'm going to talk more about what dictionaries look like and how they work later in the course.
162

163
00:12:54,610 --> 00:13:00,450
But for now the only thing you have to remember is the variable name.
163

164
00:13:00,460 --> 00:13:02,270
And then colon and the value.
164

165
00:13:02,380 --> 00:13:08,200
So let's just start with one, and then a comma and then the next variable name and a colon and
165

166
00:13:08,200 --> 00:13:15,650
then the value to substitute for that variable and let's do this about zero.
166

167
00:13:15,720 --> 00:13:16,000
All right.
167

168
00:13:16,030 --> 00:13:18,730
So we run this and we get the answer of 10.
168

169
00:13:18,790 --> 00:13:23,800
Now it's probably worth going through the math quickly in our heads just to make sure that we get the
169

170
00:13:23,800 --> 00:13:24,640
right answer.
170

171
00:13:24,640 --> 00:13:27,760
Also it's a good exercise doing arithmetic in your head.
171

172
00:13:27,760 --> 00:13:32,260
So we set X to be equal to 1 and that gives us five over here.
172

173
00:13:32,260 --> 00:13:37,500
Times 2 minus 0 which is just used five times two equals 10.
173

174
00:13:37,510 --> 00:13:40,020
All right, so that is pretty good.
174

175
00:13:40,030 --> 00:13:48,820
So now we have our function. And the way that I'm going to set this up is to say num range equals range
175

176
00:13:48,910 --> 00:13:51,190
of zero to three.
176

177
00:13:51,190 --> 00:13:55,960
And that's because we want to create a set of numbers that goes from 0 to 2.
177

178
00:13:56,020 --> 00:13:58,300
Remember it was 0 1 and 2.
178

179
00:13:58,630 --> 00:14:03,190
So the range has to go from 0 to 1 greater than the top number.
179

180
00:14:03,190 --> 00:14:06,060
So this has to be three here.
180

181
00:14:06,060 --> 00:14:06,310
All right.
181

182
00:14:06,340 --> 00:14:08,130
So now we need a double for loop.
182

183
00:14:08,140 --> 00:14:14,170
We need to loop over values for x and we need to loop over values for Y.
183

184
00:14:14,170 --> 00:14:25,020
So for let's call this X Y and num range and for y in num range.
184

185
00:14:25,580 --> 00:14:29,010
And then what do we want to do inside this double for that.
185

186
00:14:29,630 --> 00:14:32,090
So what we want to do is print out this message.
186

187
00:14:32,090 --> 00:14:39,080
So let's see, that was when x equals zero and then I'm going to get back to replacing this in a moment.
187

188
00:14:39,080 --> 00:14:48,470
When x equals zero and Y equals zero then F of X comma Y equals and then whatever it equals here let's
188

189
00:14:48,470 --> 00:14:50,050
call that zero.
189

190
00:14:50,090 --> 00:14:50,310
Okay.
190

191
00:14:50,330 --> 00:14:55,460
So now that I have all this code written out I'm going to start doing some replacement.
191

192
00:14:55,460 --> 00:15:00,560
So this is going to be %G, we're replacing with a number replacing with the number.
192

193
00:15:00,560 --> 00:15:03,710
And then again replacing with a number.
193

194
00:15:03,740 --> 00:15:07,300
So we have three number replacements.
194

195
00:15:07,580 --> 00:15:08,480
So we need three numbers.
195

196
00:15:08,480 --> 00:15:17,110
So when x equals xi, and Y equals yi, then the function f of x and y equals.
196

197
00:15:17,120 --> 00:15:22,340
And then that's going to be almost this code not exactly this code.
197

198
00:15:22,340 --> 00:15:31,630
So I'm cutting and pasting and now X we replace with x y and Y we replace with yi.
198

199
00:15:31,660 --> 00:15:33,300
So this looks pretty good.
199

200
00:15:33,430 --> 00:15:39,430
And now it's interesting to pick a couple of these at random and go through the math and make sure we
200

201
00:15:39,430 --> 00:15:40,540
get the right answer.
201

202
00:15:40,670 --> 00:15:44,650
And I think in the interest of time I will just pick one of these to go through.
202

203
00:15:44,650 --> 00:15:45,220
So let's see.
203

204
00:15:45,250 --> 00:15:47,920
So when x equals 1 and Y equals 2.
204

205
00:15:48,070 --> 00:15:51,520
So when x equals one then we get five over here.
205

206
00:15:51,520 --> 00:15:55,270
And then when y equals two we get two minus two is zero.
206

207
00:15:55,270 --> 00:15:57,040
So then that ends up being zero.
207

208
00:15:57,100 --> 00:16:02,390
And in fact every time Y equals two this second term equals zero.
208

209
00:16:02,410 --> 00:16:07,210
So we should get a zero here which indeed we do.
209

210
00:16:07,300 --> 00:16:12,220
So in this video I covered expanding terms using sympy.
210

211
00:16:12,880 --> 00:16:18,280
And I showed you a few new tricks in the sympy module and python in general.
