1
00:00:01,420 --> 00:00:08,410
This video is a follow up to the previous video on AI Gandhi composition and in particular what you

2
00:00:08,410 --> 00:00:12,650
want to do in this video is two exercises.

3
00:00:12,670 --> 00:00:15,270
So let me first discuss exercise one.

4
00:00:15,310 --> 00:00:18,040
So you want to implement this matrix.

5
00:00:18,040 --> 00:00:28,420
1 2 to 1 in Python and then use eye candy composition to extract its icon vectors and eigenvalues.

6
00:00:28,420 --> 00:00:35,710
And then once you get those you want to make a plot a line plot of the vector lambda V and the vector

7
00:00:35,980 --> 00:00:37,360
M V.

8
00:00:37,420 --> 00:00:44,140
Now of course you're going to get two icon vectors and two associated eigenvalues from this matrix because

9
00:00:44,140 --> 00:00:50,650
it's a two by two matrix so you can plot either one of them you know the first icon vector or the second

10
00:00:50,650 --> 00:00:56,500
I can vector as long as you plot one of them and you can explore a little bit on your own okay.

11
00:00:56,530 --> 00:01:05,170
Then the second exercise is to create a six by six matrix of random numbers but you need to make sure

12
00:01:05,200 --> 00:01:07,750
that it's a symmetric matrix.

13
00:01:07,750 --> 00:01:15,640
Now I have told you in a previous video in this section how to create a symmetric matrix of random numbers

14
00:01:16,390 --> 00:01:23,890
and then from that 6 by 6 symmetric random numbers matrix you want to extract the ion vectors and eigenvalues

15
00:01:24,190 --> 00:01:29,710
although actually in this exact exercise we don't really care about the eigenvalues just the ion vectors

16
00:01:30,280 --> 00:01:36,910
and then what you want to do is generate a new matrix which will also be 6 by 6 and that matrix is going

17
00:01:36,910 --> 00:01:46,060
to contain all of the dot products between all possible pairs of ion vectors so this will be a six by

18
00:01:46,060 --> 00:01:52,750
six matrix where each element in that matrix contains the value of the dot product or the result of

19
00:01:52,750 --> 00:01:58,810
this our product between for example I can vector I and I in vector J.

20
00:01:58,810 --> 00:01:59,190
All right.

21
00:01:59,200 --> 00:02:06,190
So now is your chance to switch to Python positive video do some coding and when you're ready come back

22
00:02:06,190 --> 00:02:11,270
to the video and I'm going to show you my solutions to both of these exercises.

23
00:02:12,570 --> 00:02:21,480
Let's start by creating this matrix so m equals num pi dot array and then to create a matrix you remember

24
00:02:21,480 --> 00:02:25,250
we need to set double sets of square brackets.

25
00:02:25,260 --> 00:02:30,860
So one common two that's the first row and then the second row is to come up one.

26
00:02:30,870 --> 00:02:36,240
Now I'm going to perform the I can do composition and we are going to get out to output.

27
00:02:36,270 --> 00:02:39,560
So it's going to be a vector of eigenvalues.

28
00:02:39,570 --> 00:02:46,180
I'll call those D and a matrix of I can vectors and I will call that capital V.

29
00:02:46,290 --> 00:02:54,070
So that is known PI that Lynn algae that I beg and then m okay.

30
00:02:54,270 --> 00:02:59,460
And I'm actually gonna print these out because you know sometimes it's really easy to get the order

31
00:02:59,460 --> 00:03:07,050
swapped you know so you might accidentally say v come a d It's a really easy mistake to make but you

32
00:03:07,050 --> 00:03:14,400
would see that by printing out V and printing out d that in fact this is a matrix so this has to be

33
00:03:14,700 --> 00:03:24,680
v and the first output of the IDE function is going to be a vector that contains the two eigenvalues.

34
00:03:24,750 --> 00:03:25,080
All right.

35
00:03:25,110 --> 00:03:37,160
So let's see now what I want to do is compute LV and that's going to be D 0 not 9 0 times the icon vector.

36
00:03:37,170 --> 00:03:44,280
So the first I vector and then M V and that's going to be equal to m times.

37
00:03:44,430 --> 00:03:49,110
That same I can vector so like this.

38
00:03:49,110 --> 00:03:55,610
And now let's make a plot of this so it's gonna be P.L. T dot plot and these are going to be vectors

39
00:03:55,620 --> 00:03:57,350
drawn from the origin.

40
00:03:57,420 --> 00:04:05,460
So the X coordinates will be L and then l the the first component and then the y component of this line

41
00:04:05,490 --> 00:04:09,770
is going to be 0 and then l the 1.

42
00:04:09,870 --> 00:04:10,130
All right.

43
00:04:10,140 --> 00:04:12,410
And let's make this a blue line.

44
00:04:12,420 --> 00:04:15,750
I'll give it a label of let's see.

45
00:04:15,740 --> 00:04:22,350
I'm gonna use a little bit of latex coding to get lambda and V okay.

46
00:04:22,360 --> 00:04:24,180
And make this a nice thick line.

47
00:04:24,190 --> 00:04:26,980
So line with equals four.

48
00:04:27,580 --> 00:04:28,020
All right.

49
00:04:28,030 --> 00:04:31,630
And then do a little bit of copy paste here.

50
00:04:31,630 --> 00:04:35,840
This is going to be M V but most of the code is the same.

51
00:04:35,830 --> 00:04:39,040
So this needs to be MVA instead of LV.

52
00:04:39,040 --> 00:04:43,530
Let's make this red and I'll make this a dash line maybe a dotted line is better.

53
00:04:43,630 --> 00:04:49,410
And now this is going to be M V and it can also be lined with four.

54
00:04:49,450 --> 00:04:49,790
All right.

55
00:04:49,810 --> 00:04:50,400
So let's see.

56
00:04:50,430 --> 00:04:51,960
Then I'm going to.

57
00:04:52,180 --> 00:04:54,540
What we need to activate the legend of course.

58
00:04:54,550 --> 00:05:01,210
It would be nice to have a grid on here and let's already have a look at this thing.

59
00:05:01,460 --> 00:05:01,870
Okay.

60
00:05:01,900 --> 00:05:02,830
Here we go.

61
00:05:02,830 --> 00:05:04,020
So this looks good.

62
00:05:04,040 --> 00:05:07,470
You see that the two lines are the same they overlap.

63
00:05:07,480 --> 00:05:10,120
So lambda V equals envy.

64
00:05:10,120 --> 00:05:12,130
That's exactly what we said.

65
00:05:12,130 --> 00:05:17,960
What is the eigenvalues equation that I showed in the previous video.

66
00:05:18,040 --> 00:05:24,300
I just don't really like that this plot has the origin of the graph all the way at the lower left corner.

67
00:05:24,430 --> 00:05:35,590
So therefore I'm going to say axis square and axis minus three two plus three on the X and minus three

68
00:05:35,590 --> 00:05:37,360
two plus three on Y.

69
00:05:37,360 --> 00:05:39,420
Now this looks much better here.

70
00:05:39,600 --> 00:05:39,890
Okay.

71
00:05:39,890 --> 00:05:45,150
And now what I would like to do is just also show you what this looks like for the other I can vector

72
00:05:46,210 --> 00:05:52,030
so I change all these from zeros to ones that gets us from the first I can vector value pair to the

73
00:05:52,030 --> 00:05:57,470
second I can vector value pair and then one happens to be plotted over like this.

74
00:05:57,580 --> 00:06:04,930
And now I also just want to show you that if you would say you know the first I can value and times

75
00:06:04,990 --> 00:06:12,850
the second I can vector then we're actually going to violate the icon value equation.

76
00:06:12,850 --> 00:06:16,210
So now lambda V does not equal envy.

77
00:06:16,210 --> 00:06:18,920
These two lines are not the same as each other.

78
00:06:19,030 --> 00:06:26,590
So it actually is really important to pair the correct eigenvalues with the with its associated I can

79
00:06:26,590 --> 00:06:29,500
vector they're not really interchangeable.

80
00:06:29,500 --> 00:06:32,590
So that is the first exercise.

81
00:06:32,590 --> 00:06:35,140
Let's get to the second exercise.

82
00:06:35,140 --> 00:06:41,360
So now we need to create a random numbers matrix that is six by six.

83
00:06:41,410 --> 00:06:46,100
And I think I'm going to soft code this and you'll see why in a moment.

84
00:06:46,100 --> 00:06:51,840
So I'm going to create a variable that says m equals six and then maybe I'll call this a.

85
00:06:51,850 --> 00:06:54,460
Now actually you know it's nice to use different letters.

86
00:06:54,460 --> 00:06:58,810
How about the letter Q So let's call this matrix.

87
00:06:58,810 --> 00:07:07,030
Q So this is going to be known PI that random that Rand N and we start off by making this a random numbers

88
00:07:07,030 --> 00:07:07,900
matrix.

89
00:07:07,900 --> 00:07:12,160
Now I said that we should create this to be a symmetric matrix.

90
00:07:12,160 --> 00:07:15,210
Well it's kind of hard to see here.

91
00:07:15,210 --> 00:07:18,490
Here you see this is definitely not a symmetric matrix.

92
00:07:18,490 --> 00:07:21,280
This element here does not equal this element.

93
00:07:21,280 --> 00:07:28,310
So how can we make this be a symmetric matrix while still being filled with random numbers.

94
00:07:28,540 --> 00:07:31,270
You guessed it I hope I assume you guessed it.

95
00:07:31,390 --> 00:07:36,950
We need to replace que with que times que transpose.

96
00:07:37,030 --> 00:07:42,820
So you'll remember that a matrix times as transpose is always a symmetric matrix.

97
00:07:42,820 --> 00:07:44,840
I discuss that in an earlier video.

98
00:07:45,370 --> 00:07:51,700
And now you can also see you know this element is the same as this element and this element is the same

99
00:07:51,760 --> 00:07:53,980
as this element and so on.

100
00:07:54,010 --> 00:07:58,000
So all the elements are mirrored across the diagonal.

101
00:07:58,030 --> 00:07:58,410
All right.

102
00:07:58,960 --> 00:08:04,930
So now we have our six by six symmetric matrix of random numbers.

103
00:08:04,990 --> 00:08:06,250
It's time to do.

104
00:08:06,420 --> 00:08:08,430
I can do compositions and piled up.

105
00:08:08,450 --> 00:08:12,470
Lynn Alcott II of the matrix.

106
00:08:12,470 --> 00:08:14,180
Q All right.

107
00:08:14,200 --> 00:08:19,210
And then what we need to do is so actually let me let's just print out V and have a look at it.

108
00:08:19,510 --> 00:08:23,680
So this is the matrix where the ion vectors are in the columns.

109
00:08:23,860 --> 00:08:29,470
And so what we want to do is compute the dot product between each pair of columns so the dot product

110
00:08:29,470 --> 00:08:34,900
between this column and itself the dot product between this column in this column and this column in

111
00:08:34,900 --> 00:08:38,110
this column this column and so on and so on.

112
00:08:38,110 --> 00:08:44,380
Now there's actually ways to implement this using matrix multiplication and if you solved this problem

113
00:08:44,800 --> 00:08:47,280
using matrix multiplication then great.

114
00:08:47,320 --> 00:08:53,680
Good for you in the interest of clarity here I am going to solve this problem by using a double for

115
00:08:53,680 --> 00:08:53,970
loop.

116
00:08:54,640 --> 00:09:00,880
So I'm gonna say for I in range M and for J.

117
00:09:00,910 --> 00:09:02,370
In range.

118
00:09:02,380 --> 00:09:05,560
Remember this is equal to zero comma m.

119
00:09:05,800 --> 00:09:09,790
So these two ranges here are equal.

120
00:09:09,820 --> 00:09:11,170
I think I often prefer this.

121
00:09:11,170 --> 00:09:13,440
I think it's just looks a little bit clear.

122
00:09:13,680 --> 00:09:23,850
But anyway now what we want to do is compute the dot product between the IMF column in V and the I.S.

123
00:09:24,070 --> 00:09:27,530
column in J So that's going to look like this.

124
00:09:27,610 --> 00:09:31,300
But of course we need to store these in a matrix.

125
00:09:31,300 --> 00:09:34,660
So let's call that matrix DPW for dot products.

126
00:09:34,690 --> 00:09:43,780
So then we have the highest row and the J column equals the top product between these two ion vectors.

127
00:09:43,780 --> 00:09:45,880
And of course sometimes these are gonna be the same.

128
00:09:45,910 --> 00:09:46,150
Right.

129
00:09:46,150 --> 00:09:51,970
So for example in the beginning of this loop this I is going to be 0 and J is going to be 0.

130
00:09:51,970 --> 00:09:58,840
So then we're computing the dot product between the icon vector and itself which is totally fine.

131
00:09:58,840 --> 00:09:59,140
Okay.

132
00:09:59,140 --> 00:10:02,030
Now we just need to initialize this variable.

133
00:10:02,140 --> 00:10:06,660
Otherwise if we try to run it Python's going to complain that this.

134
00:10:06,730 --> 00:10:15,580
So this variable name DP s is not defined so I'm going to write DP s equals zeros I will initialize

135
00:10:15,580 --> 00:10:20,120
this as a zeros matrix of m by m.

136
00:10:20,350 --> 00:10:27,290
So you can see how often I'm using little m here and that's why it's a good idea to soft code this appear

137
00:10:27,700 --> 00:10:31,680
rather than writing six in all of these places here.

138
00:10:31,720 --> 00:10:33,570
All right so let's see.

139
00:10:33,580 --> 00:10:35,190
So I'm just gonna run this cell.

140
00:10:35,200 --> 00:10:38,200
See if we get any coding errors which we haven't.

141
00:10:38,200 --> 00:10:42,950
So and then let's see of print out DP s Let's see what this looks like.

142
00:10:42,980 --> 00:10:43,720
Mm hmm.

143
00:10:43,730 --> 00:10:45,160
It's a little hard to interpret.

144
00:10:45,190 --> 00:10:50,770
There's a lot of stuff going on here but you can see looking at these elements that there's an awful

145
00:10:50,770 --> 00:10:53,950
lot of elements that are like e minus 16.

146
00:10:53,950 --> 00:10:56,650
So remember this from scientific notation.

147
00:10:56,650 --> 00:10:58,560
This is for example this element.

148
00:10:58,570 --> 00:11:02,380
This is minus two times tend to the minus 16.

149
00:11:02,410 --> 00:11:05,120
So this is a tiny tiny tiny number.

150
00:11:05,140 --> 00:11:07,480
This is basically computer rounding error.

151
00:11:07,480 --> 00:11:12,160
And then we have some other numbers here that seem to be exactly one.

152
00:11:12,160 --> 00:11:14,240
This is E zero zero.

153
00:11:14,240 --> 00:11:20,440
So this is one times ten to the power of zero which is actually just one.

154
00:11:20,440 --> 00:11:25,630
So there's a couple of ways we can get around this are to make this plot are this set of numbers a little

155
00:11:25,630 --> 00:11:26,950
more visible.

156
00:11:26,980 --> 00:11:34,390
So one thing we can do is round and then I will round to let's say you know two significant digits.

157
00:11:34,390 --> 00:11:35,920
How about that.

158
00:11:35,950 --> 00:11:36,240
OK.

159
00:11:36,250 --> 00:11:38,220
So now this is looking pretty interesting.

160
00:11:38,230 --> 00:11:43,800
So I'm just rounding it to two significant digits and I don't see anything past the decimal point.

161
00:11:43,840 --> 00:11:45,950
Wonder what would even happen if I go to five.

162
00:11:46,400 --> 00:11:46,670
Yeah.

163
00:11:46,690 --> 00:11:49,180
Still nothing past the decimal point.

164
00:11:49,180 --> 00:11:52,150
And remarkably this is the identity matrix.

165
00:11:52,180 --> 00:11:59,410
So we have a matrix that's all zeros on the off diagonal elements and all ones on the diagonal elements

166
00:12:01,860 --> 00:12:07,170
in this video and the previous video you learned about eigenvalues and ion vectors.

167
00:12:07,260 --> 00:12:14,910
You got a brief introduction to the algebraic and geometric interpretations of ion vectors and you saw

168
00:12:15,030 --> 00:12:18,990
a couple of interesting properties of agony composition.

169
00:12:18,990 --> 00:12:25,240
Now I can be composition is a really big topic as I mentioned in the beginning of the previous video.

170
00:12:25,350 --> 00:12:32,460
Nonetheless I hope you found this a pretty interesting taste of what I can do composition means and

171
00:12:32,490 --> 00:12:38,040
in the next couple of videos you're also going to learn about these singular value decomposition which

172
00:12:38,040 --> 00:12:40,860
is closely related to eye candy composition.
