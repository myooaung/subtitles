WEBVTT
1
00:00:03.760 --> 00:00:09.130
This video is all about an operation called the dot product.

2
00:00:09.130 --> 00:00:16.930
It is perhaps the most important operation in all of linear algebra and because Linear Algebra is so

3
00:00:16.930 --> 00:00:17.800
important.

4
00:00:17.860 --> 00:00:23.890
Then the dot product is therefore also one of the most important operations in statistics.

5
00:00:23.980 --> 00:00:31.630
Machine learning A.I. deep learning all sorts of applications signal processing the 48 transform filtering

6
00:00:32.140 --> 00:00:38.770
image analysis you name it if it's digital if it has computers involved or algorithms involved you are

7
00:00:38.860 --> 00:00:41.770
almost guaranteed to see the dot product.

8
00:00:41.770 --> 00:00:43.540
So what is the dot product.

9
00:00:43.990 --> 00:00:50.350
Well it's an operation that's defined between two vectors the vectors have to be the same length or

10
00:00:50.350 --> 00:00:55.690
the same dimensionality so the same number of elements in the two vectors.

11
00:00:56.080 --> 00:00:59.070
And there's a couple of different notations for the dot product.

12
00:00:59.500 --> 00:01:04.690
If A and B are vectors then you might see a dot B like this.

13
00:01:04.690 --> 00:01:08.930
You might see a comma B in angle brackets like this.

14
00:01:09.190 --> 00:01:14.290
You might see a with a T in the superscript and then B like this.

15
00:01:14.290 --> 00:01:21.280
This is actually the most common form of showing the dot product in linear algebra.

16
00:01:21.280 --> 00:01:28.480
This T and the superscript here is for the transpose operation and I'm going to explain in a few videos

17
00:01:28.480 --> 00:01:33.610
what the transpose operation is and why that is important for the dot product.

18
00:01:33.910 --> 00:01:40.900
But for now you can just recognize this form a transpose B is the dot product between vector A and vector

19
00:01:40.900 --> 00:01:41.890
B.

20
00:01:41.890 --> 00:01:47.910
The dot product is always a single number so therefore I'm indicating here using a scalar.

21
00:01:47.910 --> 00:01:50.890
In this case alpha so you have two vectors.

22
00:01:50.890 --> 00:01:57.430
They're the same length and the results the outcome of the dot product is a single number.

23
00:01:57.430 --> 00:02:01.600
So the operation of the dot product is really simple.

24
00:02:01.600 --> 00:02:03.260
Here is the algorithm.

25
00:02:03.430 --> 00:02:10.960
All you do is multiply the individual elements of the corresponding elements from the vector and then

26
00:02:10.960 --> 00:02:15.070
you sum up all of those individual multiplications.

27
00:02:15.070 --> 00:02:21.970
So you will recognize this operator I introduced it as the summation operator in I think it was the

28
00:02:21.970 --> 00:02:25.660
beginning of Algebra 2 section but it might have been Algebra 1 anyway.

29
00:02:25.750 --> 00:02:28.330
It was certainly earlier in this course.

30
00:02:28.420 --> 00:02:37.690
So you loop through all of the elements in vector A and vector B and then you multiply the first element

31
00:02:37.690 --> 00:02:44.410
in vector A by the first element in vector B plus the second element in vector a plus this time the

32
00:02:44.410 --> 00:02:47.080
second element in vector B and so on.

33
00:02:47.080 --> 00:02:48.910
Up until n elements.

34
00:02:49.600 --> 00:02:51.010
So let's switch to Python.

35
00:02:51.010 --> 00:02:55.640
I will show you a few different ways of computing the dot product.

36
00:02:55.850 --> 00:03:03.140
I'm going to use num Pi of course because we always use num pi with linear algebra in Python and actually

37
00:03:03.140 --> 00:03:04.880
in the exercise not right now.

38
00:03:04.880 --> 00:03:11.360
I'm going to use a little bit of late tech display coding all right so let's come up with some vectors.

39
00:03:11.360 --> 00:03:15.980
Let's say this is going to be num pi dot a range.

40
00:03:15.980 --> 00:03:23.720
So an array range let's go from 10 to 20.

41
00:03:23.720 --> 00:03:25.310
And how about steps of three.

42
00:03:25.340 --> 00:03:31.840
So just as a reminder because I think I haven't discussed this function a range in quite a while.

43
00:03:32.000 --> 00:03:35.710
So you can give three inputs two or three inputs.

44
00:03:35.720 --> 00:03:42.650
If you provide three inputs the way I do here then the output which is gonna be vector V will go from

45
00:03:42.680 --> 00:03:44.000
10 to 20.

46
00:03:44.000 --> 00:03:49.860
So from the first input to the second input in steps corresponding to the third input.

47
00:03:49.880 --> 00:03:52.170
So let's see what this looks like.

48
00:03:52.280 --> 00:03:56.230
So we get an array it's 10 13 16 19.

49
00:03:56.270 --> 00:03:57.940
Now we couldn't get all the way up to 20.

50
00:03:57.950 --> 00:04:02.130
Counting and steps of three because of you know how we started at 10.

51
00:04:02.240 --> 00:04:09.130
So I guess if you'd like you could set this to be 19 but then that's going to be an exclusive counting

52
00:04:09.140 --> 00:04:20.330
so it's interesting to note that 20 and 21 and twenty two will all produce exactly the same output.

53
00:04:20.880 --> 00:04:21.160
Okay.

54
00:04:21.190 --> 00:04:23.540
So this is four numbers long let's say.

55
00:04:23.540 --> 00:04:25.370
Now I want another vector.

56
00:04:25.430 --> 00:04:26.680
I'll call that W.

57
00:04:26.870 --> 00:04:33.430
So let's say and P that a range and maybe I'll make this go from about five to 14.

58
00:04:33.620 --> 00:04:39.830
Also in steps of three so there's a few ways to compute the dot product.

59
00:04:39.830 --> 00:04:46.490
The first way that I'm going to show you is literally implementing the algorithm that I showed in the

60
00:04:46.490 --> 00:04:46.970
slides.

61
00:04:47.300 --> 00:04:54.800
So let's call this DP DP for dot product and then one because I'm gonna show a few different outcomes

62
00:04:55.860 --> 00:04:59.400
or a few different functions for computing the dot product.

63
00:04:59.400 --> 00:05:08.440
So I'll initialize this to be zero then I say for i in range 0 to the length of vector V.

64
00:05:08.670 --> 00:05:15.900
I know what we need to do is loop through multiply all the corresponding elements in V and W.

65
00:05:15.900 --> 00:05:27.240
So that is v the I's element in V times the highest element in W and then we set dp 1 to be equal to

66
00:05:27.240 --> 00:05:31.700
itself plus this element y's multiplication.

67
00:05:31.860 --> 00:05:32.130
All right.

68
00:05:32.130 --> 00:05:33.900
Seems pretty straightforward.

69
00:05:33.900 --> 00:05:39.370
This is just an implementation of the algorithm for computing the dot product.

70
00:05:39.410 --> 00:05:44.440
Oh but we get an error it says index 3 is out of bounds for axis.

71
00:05:44.470 --> 00:05:44.730
Okay.

72
00:05:44.790 --> 00:05:47.220
So let's figure out what's going on here.

73
00:05:47.220 --> 00:05:50.700
Well we already saw what vector V is.

74
00:05:50.700 --> 00:05:53.970
Let's see what vector W is.

75
00:05:53.970 --> 00:05:54.370
Huh.

76
00:05:54.390 --> 00:06:01.060
So vector w only has three elements in it whereas vector V has four elements in it.

77
00:06:01.260 --> 00:06:07.800
And you'll remember that I said in this light it's that the dot product is valid is defined only between

78
00:06:07.800 --> 00:06:10.350
two vectors that have the same length.

79
00:06:10.470 --> 00:06:15.020
Now vector V is four elements and vector W has three elements.

80
00:06:15.030 --> 00:06:17.160
So that is not good.

81
00:06:17.160 --> 00:06:23.730
So maybe I can change this to five and now you see a couple of things have happened first of all now

82
00:06:23.790 --> 00:06:26.430
both vectors have four elements so that's good.

83
00:06:26.490 --> 00:06:29.780
I think I'll get rid of that and the error message disappear.

84
00:06:29.780 --> 00:06:31.510
There is no more error message.

85
00:06:31.660 --> 00:06:33.690
All right so this is one mechanism.

86
00:06:33.690 --> 00:06:36.100
I'm now going to show you another one.

87
00:06:36.120 --> 00:06:46.190
So let's say num piled up some and then I will write num pi dot mole to line v comma W.

88
00:06:46.290 --> 00:06:52.980
So this is going to implement element y's multiplication between the two inputs and then we sum them

89
00:06:52.980 --> 00:06:54.240
together.

90
00:06:54.240 --> 00:06:57.080
And then finally I'm going to do dot product 3.

91
00:06:57.090 --> 00:07:01.850
That's going to be num dot dot for the dot product.

92
00:07:01.880 --> 00:07:02.240
Okay.

93
00:07:02.280 --> 00:07:03.390
No error messages.

94
00:07:03.390 --> 00:07:10.800
And now I'm gonna print out all of these results so print dp 1 DP 2 and DP 3 whoops.

95
00:07:10.870 --> 00:07:14.400
Prints we only want one print.

96
00:07:14.820 --> 00:07:19.380
And the answer is five hundred and ninety six in all three cases.

97
00:07:19.440 --> 00:07:28.230
Now needless to say in practice it's best to use this sometimes it's also sensible to use this formulation

98
00:07:29.070 --> 00:07:33.730
but mostly for computing the dot product you would use the n p dot dot function.

99
00:07:34.350 --> 00:07:42.510
However I think like I mentioned in previous videos it's useful at least once to see the actual algorithm

100
00:07:43.140 --> 00:07:51.950
written out in code the exercise for this video is to write a python function that will take input as

101
00:07:51.950 --> 00:07:57.860
to vectors so you specify two vectors tests whether the dot product is valid.

102
00:07:57.860 --> 00:08:01.980
Between those two vectors and then returns the dot product.

103
00:08:02.000 --> 00:08:08.220
If the DOT PRODUCT IS valid between the two input vectors or it gives an error message.

104
00:08:08.240 --> 00:08:10.810
OK so positive video write some code.

105
00:08:10.820 --> 00:08:13.350
Create your own python function.

106
00:08:13.490 --> 00:08:21.210
And now I'm going to switch to Python and show you how I solved this I'm going to call this function.

107
00:08:21.420 --> 00:08:30.240
My dot product it's going to take two inputs two vectors V and W and let's start by writing some comments.

108
00:08:30.250 --> 00:08:43.410
So we need to test whether the dot product is defined and then we need to compute and display the dot

109
00:08:43.410 --> 00:08:46.050
product.

110
00:08:46.350 --> 00:08:48.610
Okay so the dot product is defined.

111
00:08:48.630 --> 00:08:54.900
If the two vectors have the same length so the way that I'm going to set this up is by giving an error

112
00:08:54.900 --> 00:08:55.890
message.

113
00:08:55.920 --> 00:08:59.020
If the lengths are not equal to each other.

114
00:08:59.220 --> 00:09:04.740
Otherwise we can just continue with the computation and the display.

115
00:09:04.740 --> 00:09:12.680
So I will write if the length of V is not equal to the length of W..

116
00:09:13.620 --> 00:09:20.640
So this exclamation point and then equals sine is the way to illustrate that you are testing for a lack

117
00:09:20.640 --> 00:09:21.570
of equality.

118
00:09:22.410 --> 00:09:27.750
So it's a test for equality of course would be double equal sign and the test if these two things are

119
00:09:27.750 --> 00:09:33.300
not equal to each other then you use the exclamation point equals okay.

120
00:09:33.330 --> 00:09:40.110
And then if the length of V is not equal to the length of W then we want to raise an error and the error

121
00:09:40.110 --> 00:09:46.230
is going to be a value error because there's something wrong with the values of the inputs and I'm going

122
00:09:46.230 --> 00:09:52.800
to specify the error message to be vectors must have the same length.

123
00:09:53.520 --> 00:09:56.380
Okay so that's gonna be the error message.

124
00:09:56.700 --> 00:10:03.450
And now the way that this code is going to be set up is that if this conditional is true then this error

125
00:10:03.450 --> 00:10:08.860
message is going to be evaluated and then the function will immediately just stop right there.

126
00:10:08.910 --> 00:10:17.100
But if this is not true and this conditional is false when the length of V equals the length of W then

127
00:10:17.190 --> 00:10:18.960
this code never gets run.

128
00:10:18.960 --> 00:10:26.020
So then we can proceed to compute and display the dot product and I'm going to do this all on one line.

129
00:10:26.070 --> 00:10:36.480
I'm gonna say v transpose w this should be a lowercase V equals percent s and then here we replace this

130
00:10:36.480 --> 00:10:43.060
with NUM pi dot dot of V and W maybe I'll make this present G.

131
00:10:43.080 --> 00:10:47.180
So it's formatting this as a number instead of as a string.

132
00:10:47.300 --> 00:10:48.010
All right.

133
00:10:48.790 --> 00:10:50.500
So there is our function.

134
00:10:50.510 --> 00:10:55.600
And now let's do a little bit of testing so I'm going to start by testing this with small variables

135
00:10:55.630 --> 00:10:59.810
where I know exactly what the results should be.

136
00:10:59.810 --> 00:11:08.980
So known pi dot array let's say how about zero comma 1 and v2 is going to be known pi dot array.

137
00:11:09.010 --> 00:11:11.210
How about 1 comma zero.

138
00:11:11.230 --> 00:11:16.990
Now this is a pretty useful set of vectors for testing because I know that the dot product between these

139
00:11:16.990 --> 00:11:19.030
two is going to be exactly zero.

140
00:11:19.030 --> 00:11:21.390
You can see that just by looking at the numbers.

141
00:11:21.400 --> 00:11:27.450
So the DOT PRODUCT IS this time is this which is zero plus this time is this which is also zero.

142
00:11:27.490 --> 00:11:28.060
So let's see.

143
00:11:28.090 --> 00:11:32.290
My dot product V1 comma V2.

144
00:11:32.500 --> 00:11:37.400
And we see that the dot product between these two vectors is zero.

145
00:11:37.540 --> 00:11:39.490
And now you know maybe I'll change this.

146
00:11:39.490 --> 00:11:48.670
So it ends up being one and now I'm going to add another element here and we get a value error vectors

147
00:11:48.670 --> 00:11:50.070
must have the same length.

148
00:11:50.080 --> 00:11:50.430
Okay.

149
00:11:50.470 --> 00:11:52.240
So that works so far.

150
00:11:52.240 --> 00:11:54.940
Now I want to test something else here.

151
00:11:55.000 --> 00:11:57.310
I'm going to generate some random numbers.

152
00:11:57.310 --> 00:12:07.420
Let's see N.P. that random that Rand and and now I'm going to make this be a 1 by 10 sized matrix.

153
00:12:07.420 --> 00:12:10.040
So this is going to be a row vector.

154
00:12:10.330 --> 00:12:16.100
And then over here I'm gonna say random that Rand and actually let me start with the same thing.

155
00:12:16.090 --> 00:12:19.660
So let's generate two row vectors of random numbers.

156
00:12:19.660 --> 00:12:27.370
Now I don't know a prairie what the resulting dot product is going to be but I can test and see that

157
00:12:27.370 --> 00:12:29.700
this in fact gave me an error.

158
00:12:29.710 --> 00:12:33.040
Now this is not the error that I tested for.

159
00:12:33.040 --> 00:12:36.590
This is an error on the line that computes the dot product.

160
00:12:36.730 --> 00:12:42.970
So to gain some insight into what is happening with this error let's check out the dark string for NPR

161
00:12:42.970 --> 00:12:46.910
dot dot and see if this is at all informative.

162
00:12:46.990 --> 00:12:54.280
So this tells us that for inputs A and B if a and b are one dimensional arrays it computes the inner

163
00:12:54.280 --> 00:12:57.940
products of the inner product is another term for the dot product.

164
00:12:57.970 --> 00:12:59.710
So that's what we want.

165
00:12:59.710 --> 00:13:08.920
But if a and b are 2d arrays it is actually implementing matrix multiplication and then the help file

166
00:13:08.920 --> 00:13:16.750
says we should use the at symbol or map Mol for it instead of the dot product.

167
00:13:16.780 --> 00:13:22.810
Now I'm going to talk more about matrix multiplication in a later video but essentially this is where

168
00:13:22.810 --> 00:13:24.410
things are going wrong.

169
00:13:24.520 --> 00:13:31.680
We are inputting what we consider to be vectors but what Python is considering to be 2d arrays.

170
00:13:31.780 --> 00:13:35.000
And that's because you have these two dimensions here.

171
00:13:35.080 --> 00:13:36.490
So what can we do about this.

172
00:13:36.490 --> 00:13:41.680
Well one thing that I'm going to do is introduce you to a function called squeeze.

173
00:13:41.710 --> 00:13:47.470
So for starters let's say print num Pi the shape of V1.

174
00:13:47.500 --> 00:13:50.870
So we see the shape of v 1 is 1 by 10.

175
00:13:51.250 --> 00:13:55.160
And then we can also just print out this vector just to look at it.

176
00:13:55.270 --> 00:13:57.570
So you can clearly see that it's a row vector.

177
00:13:57.580 --> 00:14:04.040
So this is all one row but it's being printed out on the second line just because of space reasons.

178
00:14:04.210 --> 00:14:11.440
But internally this is being represented as a two dimensional matrix instead of as a one dimensional

179
00:14:11.470 --> 00:14:12.460
vector.

180
00:14:12.460 --> 00:14:21.370
So what I'm going to do is use a function called squeeze let's call V 1 equals and P does squeeze v

181
00:14:21.500 --> 00:14:22.390
1.

182
00:14:22.390 --> 00:14:29.160
Now the idea of this function squeeze is to remove any dimensions that aren't really sort of useful.

183
00:14:29.170 --> 00:14:30.930
These are called Singleton dimensions.

184
00:14:30.940 --> 00:14:34.310
There are dimensions that have a size of 1.

185
00:14:34.330 --> 00:14:36.200
So now I'm going to run this code again.

186
00:14:36.400 --> 00:14:42.820
And now you can see that this turned back into a vector we have squeezed out the other dimension and

187
00:14:42.820 --> 00:14:45.250
converted that into a vector.

188
00:14:45.250 --> 00:14:53.350
Now notice that if I set v 1 to be for example a 5 by 10 matrix then squeeze doesn't actually do anything.

189
00:14:53.380 --> 00:14:56.650
Now I'll comment this out and run it again.

190
00:14:56.650 --> 00:14:59.590
There are no Singleton dimensions in this matrix.

191
00:14:59.590 --> 00:15:02.870
So squeeze didn't actually change anything.

192
00:15:02.890 --> 00:15:03.150
OK.

193
00:15:03.160 --> 00:15:06.790
So with that in mind I'm going to add a little bit to this function.

194
00:15:06.790 --> 00:15:10.120
I'm going to say V equals num piled up.

195
00:15:10.120 --> 00:15:14.740
Squeeze V and W equals num paid out squeeze W.

196
00:15:15.160 --> 00:15:23.260
So that is taking care of these possibilities where you have what you know the user probably is considering

197
00:15:23.260 --> 00:15:28.780
to be a vector but is actually internally represented as a matrix.

198
00:15:28.780 --> 00:15:29.010
OK.

199
00:15:29.080 --> 00:15:31.500
So let's try this again.

200
00:15:31.530 --> 00:15:31.930
All right.

201
00:15:31.930 --> 00:15:35.310
Of course it's still giving an Arab because I haven't rerun this code yet.

202
00:15:35.340 --> 00:15:42.280
So let me rerun this cell and now it works again in this video.

203
00:15:42.290 --> 00:15:47.750
You have learned about the dot product and you learned a little bit more about working with vectors

204
00:15:47.780 --> 00:15:51.610
and matrices in num pi and in Python.

205
00:15:51.620 --> 00:15:53.110
Stay tuned for the next video.

206
00:15:53.120 --> 00:15:58.190
You're going to get to see an application of the dot product in statistics.
