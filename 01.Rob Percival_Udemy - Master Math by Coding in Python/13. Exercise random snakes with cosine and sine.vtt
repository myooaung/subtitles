WEBVTT
1
00:00:04.600 --> 00:00:10.780
In this video you're going to get to make really cool looking curvy lines snake things and not really

2
00:00:10.780 --> 00:00:16.060
sure what exactly to call this based on trigonometric functions that you already know.

3
00:00:16.060 --> 00:00:22.930
So what you do is implement two trig functions X EQUALS COSINE of theta.

4
00:00:22.930 --> 00:00:26.170
Times are 1 and Y equals sign of theta.

5
00:00:26.170 --> 00:00:34.540
Times are two where our 1 and our 2 are random numbers that are drawn from a uniform distribution between

6
00:00:34.570 --> 00:00:36.760
0 and 1.

7
00:00:36.760 --> 00:00:44.170
Now essentially what this is doing what these R's are doing is changing the speed of the cosine so they

8
00:00:44.170 --> 00:00:47.740
will make the cosine or the sine go faster or slower.

9
00:00:47.800 --> 00:00:52.360
And when you plot x by y you're going to get these interesting looking functions.

10
00:00:52.390 --> 00:00:58.330
Now every time you run it it's going to be different because these two values will be different from

11
00:00:58.330 --> 00:01:01.120
each other and randomly selected.

12
00:01:01.120 --> 00:01:04.450
Okay so then there's a couple of additional points that you want to do.

13
00:01:04.450 --> 00:01:11.770
So first of all you can see that I am displaying r1 and r2 only to two significant digits so point 3

14
00:01:11.770 --> 00:01:13.660
6 and point 6 8.

15
00:01:13.660 --> 00:01:20.290
Now as I mentioned your numbers will differ but you want to see if you can get this to display with

16
00:01:20.380 --> 00:01:24.100
only two numbers after the decimal point.

17
00:01:24.100 --> 00:01:31.810
Secondly a bit of an extra coding challenge is to figure out how to plot this line so that the beginning

18
00:01:31.900 --> 00:01:35.620
and end points are actually drawn to each other.

19
00:01:35.650 --> 00:01:41.560
So you want to add another point to these functions to make sure that there is a line that goes from

20
00:01:41.560 --> 00:01:44.350
here to here.

21
00:01:44.380 --> 00:01:49.900
Now I left it out in this blob because honestly I'm not really sure that the picture looks better with

22
00:01:49.900 --> 00:01:50.920
that connecting line.

23
00:01:50.920 --> 00:01:57.190
I think it looks a little bit nicer without the connecting line but it's a nice challenge in Python

24
00:01:57.190 --> 00:01:59.860
programming to get this line to connect to this line.

25
00:01:59.920 --> 00:02:04.460
So the start and end of these functions to connect to each other.

26
00:02:04.660 --> 00:02:10.330
As I frequently do with the more challenging aspects of these coding exercises I'm about to give you

27
00:02:10.330 --> 00:02:15.880
a hint it's the hint is the method or the function that you use to get this to work.

28
00:02:16.060 --> 00:02:21.700
So if you don't want a hint if you want to figure out how to make this line yourself now is your opportunity

29
00:02:21.700 --> 00:02:23.080
to pause the video.

30
00:02:23.380 --> 00:02:28.840
Otherwise here is the hint you want to use something called N.P. dot append.

31
00:02:28.840 --> 00:02:34.450
So it's a function in the NUM pi module called append and I'm not going to tell you exactly how to use

32
00:02:34.450 --> 00:02:37.590
it but at least that's the hint to get you started.

33
00:02:37.690 --> 00:02:37.990
All right.

34
00:02:37.990 --> 00:02:43.750
So now I will switch to Python and show you how I solved this exercise.

35
00:02:43.750 --> 00:02:45.220
So let's see.

36
00:02:46.120 --> 00:02:49.570
Let's start by creating the angles so let's call this.

37
00:02:49.570 --> 00:02:52.370
I'll call this a T for theta.

38
00:02:52.630 --> 00:02:58.330
So that's going to be linearly spaced numbers and I didn't actually tell you what range you should use

39
00:02:58.660 --> 00:03:08.140
but I'm going to use 8 pi so eight times pi and let's go for a thousand numbers in between 0 and 8 pi

40
00:03:08.190 --> 00:03:10.090
to give us a nice resolution.

41
00:03:10.180 --> 00:03:10.450
All right.

42
00:03:10.480 --> 00:03:21.820
So then we need are 1 equals none pi not random that Rand and then are 2 also equals known pi to random

43
00:03:21.880 --> 00:03:23.420
that Rand.

44
00:03:23.730 --> 00:03:26.360
Now you could have also done this in a slightly different way.

45
00:03:26.360 --> 00:03:36.190
You could set R equals none pi not random Rand 2 and then later on you would use r 0 0 and r 1.

46
00:03:36.190 --> 00:03:39.250
So either way you want to do it is fine.

47
00:03:39.250 --> 00:03:41.400
Now we define x and y.

48
00:03:41.410 --> 00:03:53.950
So X was cosine of our 1 times the variable t and then Y equals and Peter cosine of our two times T.

49
00:03:54.030 --> 00:03:59.140
Now before I get started with the actual plotting I want to show you what this is going to look like.

50
00:03:59.140 --> 00:04:08.740
So t come X and T comma Y and then peel T dot show so you can see that the sine and cosine have different

51
00:04:08.740 --> 00:04:12.890
speeds and that comes from these different values of our 1 and R2.

52
00:04:12.910 --> 00:04:17.060
So when I run this multiple times you see sometimes the speed is almost match.

53
00:04:17.080 --> 00:04:23.920
This is a pretty interesting one where the blue line is actually slightly slightly faster than the orange

54
00:04:23.920 --> 00:04:25.530
line and actually looking at this plot.

55
00:04:25.540 --> 00:04:27.570
Now I see that this is a typo.

56
00:04:27.580 --> 00:04:29.680
This should be sine.

57
00:04:30.810 --> 00:04:31.200
Okay.

58
00:04:31.210 --> 00:04:33.610
Now you see in fact they may get aligned here.

59
00:04:33.610 --> 00:04:35.410
It just happens by chance.

60
00:04:35.440 --> 00:04:42.890
Okay so that looks interesting but in fact the goal is to plot x by y like this.

61
00:04:43.060 --> 00:04:47.320
And now we're starting to get a really interesting looking curve.

62
00:04:47.320 --> 00:04:48.080
So let's see.

63
00:04:48.100 --> 00:04:52.650
Let me do a few more things I'm going to make this axis square.

64
00:04:52.780 --> 00:05:01.090
I'm going to force the limits to go from let's say minus one point one to one point one on the X domain

65
00:05:01.150 --> 00:05:08.000
and for the Y it's gonna be one point one also to or minus one point one two plus one point one.

66
00:05:08.160 --> 00:05:08.530
Okay.

67
00:05:08.550 --> 00:05:17.880
And then let's see I want this to be a black line and then I want the Axis off so appeal to the Axis.

68
00:05:18.060 --> 00:05:18.880
All right.

69
00:05:18.900 --> 00:05:20.910
This is looking pretty cool.

70
00:05:20.910 --> 00:05:23.010
I think this looks really neat huh.

71
00:05:23.040 --> 00:05:24.650
That's a funny one.

72
00:05:24.780 --> 00:05:26.940
So to understand these a little bit better.

73
00:05:26.940 --> 00:05:30.810
This one also looks pretty neat to interpret these functions a little bit better.

74
00:05:30.810 --> 00:05:40.950
It's useful to have the title on here so P.L. to the title and I'm going to say are 1 equals percent

75
00:05:40.980 --> 00:05:46.640
s and then R comma 2 equals percent s.

76
00:05:47.190 --> 00:05:52.710
So then we replace these with R 1 and R two.

77
00:05:53.680 --> 00:05:53.930
Okay.

78
00:05:53.940 --> 00:05:57.230
So now there's two things that I need to change first of all.

79
00:05:57.230 --> 00:05:59.380
Look how many decimal points this goes out to.

80
00:05:59.400 --> 00:06:06.960
So we need to show only the first two numbers after the decimal point and the way that I'm going to

81
00:06:07.020 --> 00:06:10.380
implement that is by using the round function.

82
00:06:10.380 --> 00:06:15.780
Now if you just round like this if you just round these numbers this is actually not going to give you

83
00:06:15.780 --> 00:06:19.080
a very interesting result because all of these numbers.

84
00:06:19.110 --> 00:06:23.780
So every possible number is basically just gone around 2 0 or 1.

85
00:06:24.060 --> 00:06:30.180
So but you can give the round function an optional second input which tells you the precision of the

86
00:06:30.180 --> 00:06:30.660
rounding.

87
00:06:30.660 --> 00:06:35.010
So it tells you how many numbers after the decimal point to round two.

88
00:06:35.010 --> 00:06:38.620
So this is how I solved that part of the problem.

89
00:06:39.060 --> 00:06:46.770
And then I want to get the one to be in a subscript so the one to be in appearing below the R.

90
00:06:46.770 --> 00:06:51.990
Now the way to do that is by using LaTeX coding but it turns out you don't actually need to make the

91
00:06:51.990 --> 00:06:54.410
entire title in latex.

92
00:06:54.420 --> 00:06:57.140
We only need this here to be latex.

93
00:06:57.150 --> 00:07:02.620
So the underscore to indicate a subscript and then the number after the subscript.

94
00:07:02.760 --> 00:07:11.190
So we just embed these two characters here the underscore and the number inside dollar signs and that

95
00:07:11.190 --> 00:07:17.350
tells Python to interpret these two characters as latex code.

96
00:07:18.360 --> 00:07:18.720
Okay.

97
00:07:18.720 --> 00:07:19.380
Very nice.

98
00:07:19.380 --> 00:07:22.920
So let's keep running this until we get something that's pretty interesting.

99
00:07:22.920 --> 00:07:25.200
So remember that if you just take out.

100
00:07:25.230 --> 00:07:26.030
So let me see.

101
00:07:26.040 --> 00:07:30.340
I'm gonna force both our 1 and our 2 to be 1.

102
00:07:30.540 --> 00:07:33.020
And now we just get the unit circle.

103
00:07:33.060 --> 00:07:38.880
So that means that when both of these numbers when both of these are coefficients are close to each

104
00:07:38.880 --> 00:07:45.610
other we're going to get a a line that looks more like a circle.

105
00:07:45.660 --> 00:07:46.530
Let me see.

106
00:07:47.720 --> 00:07:53.790
I am just looking for some time when it randomly shows these two numbers to be pretty similar to each

107
00:07:53.790 --> 00:07:54.030
other.

108
00:07:54.060 --> 00:07:58.740
Okay so here you go these two numbers are fairly similar to each other and you can kind of see that

109
00:07:58.740 --> 00:08:01.170
there is a circle that's wanting to happen.

110
00:08:01.170 --> 00:08:03.420
And anyway there's lots of other things you can play with.

111
00:08:03.450 --> 00:08:04.500
Let's make this.

112
00:08:04.500 --> 00:08:05.760
How about 18 pi.

113
00:08:05.760 --> 00:08:07.000
So it goes out for longer.

114
00:08:07.410 --> 00:08:09.340
Oh here's a pretty interesting case.

115
00:08:09.450 --> 00:08:12.480
Here we see that the sign part is really large.

116
00:08:12.480 --> 00:08:17.310
Has a close to full frequency and the cosine part has a very low frequency.

117
00:08:17.610 --> 00:08:22.190
So then you see that this function looks an awful lot like a sine wave.

118
00:08:22.500 --> 00:08:22.870
Mm hmm.

119
00:08:22.870 --> 00:08:26.580
Now this is starting to look really really pretty.

120
00:08:26.580 --> 00:08:33.450
This looks like a pattern you could weave into a quilt or something and now the very last thing that

121
00:08:33.450 --> 00:08:38.460
I want to do here is show you how to connect the start line to the end line.

122
00:08:38.460 --> 00:08:44.180
So we want a line that will go from the starting point to the ending point.

123
00:08:44.220 --> 00:08:51.690
Now the trick to getting this to work is to add a new data point to the very end of vector x and the

124
00:08:51.690 --> 00:08:53.460
very end vector Y.

125
00:08:53.640 --> 00:08:58.100
And we want that new data point to be the same as the first data point.

126
00:08:58.110 --> 00:09:03.840
So that means we're going to get basically a full circle it's going to go from the last data point to

127
00:09:03.840 --> 00:09:05.310
the first data point.

128
00:09:05.310 --> 00:09:10.460
And so the way that we can do this is by specifying x equals.

129
00:09:10.460 --> 00:09:15.630
Now what you want to do is something like say the last element plus one.

130
00:09:15.630 --> 00:09:19.680
But this is not really legal code in Python.

131
00:09:19.680 --> 00:09:30.060
So instead what we do is we append so we replace vector x with append and then we want to append vector

132
00:09:30.060 --> 00:09:33.570
x with the first element in vector X..

133
00:09:33.660 --> 00:09:39.750
So now vector X is going to be one element longer than it previously was.

134
00:09:39.750 --> 00:09:44.180
And then obviously we do the same thing with vector Y.

135
00:09:44.400 --> 00:09:49.800
And actually you know even just to give you a sense of the lengths here I'm going to comment this out

136
00:09:49.800 --> 00:09:58.150
so I'm going to replace x with the appended version of X and not change y and let's see what happens.

137
00:09:58.200 --> 00:10:05.870
So we get an error and let's see what the error says X and Y must have the same first mention but their

138
00:10:05.870 --> 00:10:07.460
shapes differ.

139
00:10:07.460 --> 00:10:13.990
So X is 1001 points long and Y is only 1000 points long.

140
00:10:14.130 --> 00:10:20.960
Okay so uncommon that line and now I guess here you don't really notice it so much let's try another

141
00:10:20.960 --> 00:10:23.010
time point.

142
00:10:23.060 --> 00:10:25.440
Now it happens to be that these cases that I'm doing.

143
00:10:25.460 --> 00:10:25.760
Okay.

144
00:10:25.760 --> 00:10:26.990
Here you go now.

145
00:10:27.470 --> 00:10:33.290
So here you see what I'm talking about that I don't actually think it improves the graphic.

146
00:10:33.290 --> 00:10:39.110
I don't think it makes this thing look nicer to have the line the straight line going from the end point

147
00:10:39.110 --> 00:10:40.450
to the beginning point.

148
00:10:40.490 --> 00:10:45.920
However you know I wanted to include this just to give you a sense of how to do that and introduce you

149
00:10:45.920 --> 00:10:50.150
to this append function in the NUM pi module.

150
00:10:50.240 --> 00:10:57.440
Anyway there is a lot more that you could do to continue playing with this kind of code and in general

151
00:10:57.440 --> 00:11:04.340
exploring the connection between math in particular here trigonometry and art or at least kind of you

152
00:11:04.340 --> 00:11:06.410
know interesting looking things.
