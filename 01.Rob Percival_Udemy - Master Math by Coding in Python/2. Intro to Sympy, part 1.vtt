WEBVTT
0
1
00:00:03.790 --> 00:00:11.980
The goal of this section of the course is to learn a Python module called sympy. Sympy is a really
1

2
00:00:11.980 --> 00:00:19.810
powerful module in Python for learning mathematics because it's going to allow you to represent variables
2

3
00:00:19.960 --> 00:00:27.060
as symbols, which is very different from how computers normally represent variables and numbers.
3

4
00:00:27.100 --> 00:00:33.310
So I'm going to first explain the difference between the symbolic numbers and numeric or analytic numbers
4

5
00:00:33.670 --> 00:00:39.280
and then I'll show you how to create and work with these variables in python, and a little bit about
5

6
00:00:39.550 --> 00:00:40.360
printing.
6

7
00:00:40.360 --> 00:00:42.520
So let's begin.
7

8
00:00:42.640 --> 00:00:48.280
If you were asked to write down on a piece of paper the square root of two you would probably write
8

9
00:00:48.280 --> 00:00:50.680
down something that looks like this.
9

10
00:00:50.710 --> 00:00:57.640
This we call symbolic math because you're not actually evaluating the entire square root of two. In fact,
10

11
00:00:57.640 --> 00:00:59.170
this is an irrational number.
11

12
00:00:59.170 --> 00:01:03.570
So for all we know it basically goes on to infinity with no end.
12

13
00:01:03.580 --> 00:01:07.500
So this is a symbolic representation of the square root of two.
13

14
00:01:07.630 --> 00:01:09.000
But if you would type
14

15
00:01:09.010 --> 00:01:15.910
square root of two into a calculator or Python or matlab or any other numerical processing software,
15

16
00:01:16.300 --> 00:01:18.130
you might get something that looks like this.
16

17
00:01:18.130 --> 00:01:21.150
This is does not look like the square root of 2.
17

18
00:01:21.160 --> 00:01:28.060
This is the square root of 2 evaluated to, you know, 15 decimal points or however many numbers this is
18

19
00:01:28.060 --> 00:01:28.330
here.
19

20
00:01:29.080 --> 00:01:35.320
So this is sometimes called numerical or analytical or variable precision notation.
20

21
00:01:35.320 --> 00:01:37.870
And this is symbolic notation.
21

22
00:01:37.870 --> 00:01:39.580
So here we have a few other examples.
22

23
00:01:39.580 --> 00:01:41.010
This is pi.
23

24
00:01:41.110 --> 00:01:43.250
So this is the symbol for Pi.
24

25
00:01:43.270 --> 00:01:44.520
This is not pi.
25

26
00:01:44.530 --> 00:01:50.300
This is the estimate of Pi rounded off to, whatever it is, 15 decimal points.
26

27
00:01:50.320 --> 00:01:51.490
Actually now I'm curious how many.
27

28
00:01:51.490 --> 00:01:55.090
This is...
28

29
00:01:55.930 --> 00:02:01.210
There are in fact 15 decimal points here, which I promise I didn't know beforehand I was just guessing
29

30
00:02:01.210 --> 00:02:01.780
15.
30

31
00:02:01.780 --> 00:02:03.590
It turned out to be a lucky guess.
31

32
00:02:03.610 --> 00:02:03.910
OK.
32

33
00:02:03.910 --> 00:02:06.790
The point is: this is the symbol for Pi.
33

34
00:02:06.820 --> 00:02:08.170
This is not pi.
34

35
00:02:08.170 --> 00:02:17.010
This is just pi evaluated out to 15 decimal points and then you can get some weird things in computers
35

36
00:02:17.010 --> 00:02:19.290
that are called Computer rounding errors.
36

37
00:02:19.320 --> 00:02:26.220
So if you were to evaluate the cosine of pi over two, your math teacher and your math textbook will tell
37

38
00:02:26.220 --> 00:02:30.090
you that the cosine of pi over 2 is 0.
38

39
00:02:30.090 --> 00:02:37.620
However, if you would actually type in cosine of pi over two into Python or any other numerical processing
39

40
00:02:37.620 --> 00:02:40.550
software, you would probably not get zero.
40

41
00:02:40.560 --> 00:02:45.630
You would get something that looks like this: six point something something something and then at the
41

42
00:02:45.630 --> 00:02:48.590
end here you see e to the minus 17.
42

43
00:02:48.780 --> 00:02:51.020
This is called scientific notation.
43

44
00:02:51.030 --> 00:02:57.300
I'm going to have an entire lecture just about scientific notation in the next section of this course
44

45
00:02:57.300 --> 00:02:58.830
in the algebra section.
45

46
00:02:58.830 --> 00:03:03.060
However, for now suffice it to say this is a really tiny number.
46

47
00:03:03.060 --> 00:03:11.570
What this actually means is move this decimal point to the left 17 numbers, so 17 places off to the left.
47

48
00:03:11.580 --> 00:03:17.460
So this is a tiny tiny number; it's ten to the minus 17. But it's not zero.
48

49
00:03:18.070 --> 00:03:18.420
OK.
49

50
00:03:18.420 --> 00:03:25.080
And the reason why this is not zero is that computers have a very difficult time with representing exact
50

51
00:03:25.080 --> 00:03:32.250
zero and computing exact zero, in part because this symbol pi is really represented in the computer not
51

52
00:03:32.280 --> 00:03:38.460
as what we think of as pi but as this number or a number that looks something like this.
52

53
00:03:38.490 --> 00:03:38.760
OK.
53

54
00:03:38.790 --> 00:03:46.020
So I hope you now see the difference between symbolic numbers and analytical or variable precision numbers.
54

55
00:03:46.080 --> 00:03:53.370
The goal of the sympy module in Python is to allow you to work with symbolic numbers like this, to work
55

56
00:03:53.370 --> 00:03:59.430
with symbols for the square root of two instead of you know this whole business here and this is going
56

57
00:03:59.430 --> 00:04:05.550
to really unlock the power of python as a tool for learning mathematics.
57

58
00:04:05.550 --> 00:04:05.820
All right.
58

59
00:04:05.820 --> 00:04:13.690
So what we're going to do now is switch to Python and I will introduce you to sympy. Sympy is not
59

60
00:04:13.780 --> 00:04:16.110
in the basic Python package.
60

61
00:04:16.120 --> 00:04:22.630
So we need to import it so I can type import Sympy as sym.
61

62
00:04:22.630 --> 00:04:28.060
So that means that if we want to access functions and objects that are in the sympy module, you would
62

63
00:04:28.060 --> 00:04:31.480
have to type sym dot.
63

64
00:04:31.480 --> 00:04:37.030
And now I'm going to press tab and this is going to show me a list of all of the functions in the sympy
64

65
00:04:37.060 --> 00:04:38.000
toolbox.
65

66
00:04:38.020 --> 00:04:43.720
Now don't worry, you don't need to memorize this list, you're not going to use every single function in
66

67
00:04:43.720 --> 00:04:45.690
the sympy toolbox.
67

68
00:04:45.700 --> 00:04:54.000
So let me get rid of this. So the first thing we're going to do is create some symbolic variables in sympy.
68

69
00:04:54.040 --> 00:05:03.850
So I'm going to say X equals sym dot symbols so we can create a symbol for the variable x and set that
69

70
00:05:03.880 --> 00:05:11.470
equal to x. And now when I run this I can type X. And now what is x? x is just... X. I haven't assigned it
70

71
00:05:11.770 --> 00:05:15.630
a number or a string I haven't said X equals anything.
71

72
00:05:15.640 --> 00:05:19.290
So X is just X. It's just a symbol x.
72

73
00:05:19.460 --> 00:05:26.150
So that's for one variable. You can create multiple variables at the same time using commas like this.
73

74
00:05:26.170 --> 00:05:32.700
I say X comma Y equals symbol symbols X comma y. In single quotes here.
74

75
00:05:33.050 --> 00:05:33.280
Okay.
75

76
00:05:33.310 --> 00:05:37.360
Now notice that this is not just a variable like any other variable.
76

77
00:05:37.360 --> 00:05:43.710
If I were to say Z Python gives me an error it says name Z is not defined.
77

78
00:05:43.720 --> 00:05:49.000
I haven't defined any variable called Z but I have defined a variable called Y.
78

79
00:05:49.120 --> 00:05:52.270
I created it up here, and I created it to be a symbol.
79

80
00:05:52.270 --> 00:05:54.630
So it just is Y.
80

81
00:05:54.730 --> 00:06:01.200
So that means I can write x plus 4 for example, or sorry, y plus 4.
81

82
00:06:01.470 --> 00:06:08.880
And when I run this code the output is... well it's just y plus four. So four is a number, y is a symbol.
82

83
00:06:08.890 --> 00:06:14.890
I haven't defined any other number or anything else for y to be so it's just y.
83

84
00:06:14.890 --> 00:06:16.700
It just is what it is.
84

85
00:06:17.140 --> 00:06:24.010
Now in sympy, we can make symbolic numbers or symbolic variables be printed in a slightly nicer way
85

86
00:06:24.040 --> 00:06:25.740
than the python default.
86

87
00:06:26.050 --> 00:06:28.140
And to do that I'm going to use.
87

88
00:06:28.330 --> 00:06:37.510
I'm going to activate sym dot init printing. so sym dot init printing, with parentheses because
88

89
00:06:37.510 --> 00:06:41.950
it's a function. And you really only need to run a line of code like this once.
89

90
00:06:41.950 --> 00:06:49.900
I'm going to run this cell again and notice the difference between how y plus 4 looks now and how
90

91
00:06:49.900 --> 00:06:50.910
it looks now.
91

92
00:06:50.920 --> 00:06:56.020
So it's basically the same of course, it's still y plus 4, but the font is a little bit nicer and you'll
92

93
00:06:56.020 --> 00:06:59.990
see pretty soon that we get some nicer looking formatting.
93

94
00:07:00.430 --> 00:07:00.720
Okay.
94

95
00:07:00.770 --> 00:07:07.330
Now I also want to show you using the function display and I've introduced you to this function previously
95

96
00:07:07.330 --> 00:07:14.970
in this course and you'll remember that that needs to come in from the IPython module, so IPython dot
96

97
00:07:15.130 --> 00:07:19.220
display and then import display.
97

98
00:07:20.330 --> 00:07:22.840
Okay so I'm going to run all this code again.
98

99
00:07:23.320 --> 00:07:28.930
And now let's see what we can do with display. Actually, first I want to say just print x let's say x
99

100
00:07:28.930 --> 00:07:31.040
to the power of y.
100

101
00:07:31.090 --> 00:07:34.990
So this just gives me x asterisk asterisk y.
101

102
00:07:35.150 --> 00:07:42.880
But now if I write display and I run the same input, so x to the power of y into the display function,
102

103
00:07:43.630 --> 00:07:48.640
then that's going to print this out in a nicer looking, more kind of mathematical way.
103

104
00:07:48.640 --> 00:07:51.990
So it says X and then in these superscript we get the Y.
104

105
00:07:52.510 --> 00:08:03.310
Similarly, I can write display x divided by y and now I get a nice looking fraction: x divided by Y.
105

106
00:08:03.310 --> 00:08:03.600
Okay.
106

107
00:08:03.600 --> 00:08:11.140
And what I'd like to do now is show you or highlight the difference between symbolic math and analytic
107

108
00:08:11.260 --> 00:08:12.000
math.
108

109
00:08:12.340 --> 00:08:18.820
So to do that I'm going to compare the square root of two between sympy and numpy.
109

110
00:08:18.820 --> 00:08:22.780
And this is essentially what I showed in the slides a few moments ago.
110

111
00:08:22.780 --> 00:08:32.380
So we need to import numpy as np, and then... actually, you know, it's generally good Python programming
111

112
00:08:32.500 --> 00:08:40.210
etiquette to put all of the importing at the at the top in one cell in the beginning.
112

113
00:08:40.300 --> 00:08:40.530
Okay.
113

114
00:08:40.540 --> 00:08:44.470
So now this is pretty interesting because I can say display.
114

115
00:08:44.470 --> 00:08:45.430
Let's start with numpy.
115

116
00:08:45.430 --> 00:08:52.480
So if I say numpy the square root of 2, that's going to display the square root of two.
116

117
00:08:52.480 --> 00:08:56.850
And now to be clear, this is not actually the square root of 2.
117

118
00:08:56.950 --> 00:09:01.890
This is the estimate of the square root of 2, or the computation of the square root of 2,
118

119
00:09:02.050 --> 00:09:05.650
up to 15 decimal places.
119

120
00:09:05.650 --> 00:09:12.310
But if we were to repeat the same procedures I would say copy and paste but now instead of numpy I
120

121
00:09:12.310 --> 00:09:13.420
want to call sympy.
121

122
00:09:13.450 --> 00:09:18.780
So sym dot square root of 2 and notice that this is just the square root of 2.
122

123
00:09:18.790 --> 00:09:23.990
So this is a symbol for the square root of 2.
123

124
00:09:24.040 --> 00:09:27.700
So here are the three exercises for this video.
124

125
00:09:28.120 --> 00:09:35.860
Essentially, what you want to do is just print out these expressions using the display function and sympy,
125

126
00:09:36.490 --> 00:09:43.940
and see if you can get these expressions to print out exactly like this and you'll see what happens.
126

127
00:09:44.020 --> 00:09:44.260
All right.
127

128
00:09:44.290 --> 00:09:51.240
So now I'm going to solve these exercises on my own. Now, notice if you're starting from a clean slate,
128

129
00:09:51.270 --> 00:09:57.180
if you're starting from a fresh IPython workbook, you will need to run this line of code, so you need
129

130
00:09:57.180 --> 00:10:00.510
to import sympy and you'll need to import display.
130

131
00:10:00.720 --> 00:10:01.770
But I already have those.
131

132
00:10:01.800 --> 00:10:05.900
Oh and you will also need to create X and Y to be symbolic variables.
132

133
00:10:05.910 --> 00:10:11.670
But of course I've already done those. So I'm just going to proceed with coding immediately.
133

134
00:10:11.670 --> 00:10:12.210
So let's see.
134

135
00:10:12.240 --> 00:10:18.680
So the first exercise was to print out y times X squared.
135

136
00:10:18.690 --> 00:10:25.070
So let's say Y times X asterisk asterisk 2.
136

137
00:10:25.140 --> 00:10:30.720
Okay so this is kind of correct, in the sense that this is really y times X squared.
137

138
00:10:30.720 --> 00:10:34.520
However what I showed in the slides was y
138

139
00:10:34.530 --> 00:10:38.450
and then there was a multiplication symbol and then X squared.
139

140
00:10:38.490 --> 00:10:45.150
So what the display function did with these symbolic variables is two things: First of all, it reordered
140

141
00:10:45.150 --> 00:10:51.660
the variables, so it put the squared term first, which of course is the same: x squared times Y is the
141

142
00:10:51.660 --> 00:10:53.860
same thing as Y times X squared.
142

143
00:10:54.030 --> 00:10:59.190
But the order reversed and it didn't put in a multiplication sign; it just put these variables next to
143

144
00:10:59.190 --> 00:10:59.960
each other.
144

145
00:10:59.970 --> 00:11:06.270
So this answer isn't wrong, however, it's not really what I showed in the slides.
145

146
00:11:06.510 --> 00:11:09.610
So let's move on to the next one.
146

147
00:11:09.750 --> 00:11:15.140
This one was display and then I wanted to show the square root of 4.
147

148
00:11:15.150 --> 00:11:19.760
So the square root of 4 times X... huh.
148

149
00:11:19.770 --> 00:11:21.770
Now that's also interesting.
149

150
00:11:21.810 --> 00:11:29.610
This is definitely not what I typed so I typed the square root of 4 and actually python just evaluated
150

151
00:11:29.610 --> 00:11:33.200
this and told me that the square root of 4 is 2 times x.
151

152
00:11:33.210 --> 00:11:36.520
So again this isn't really the wrong answer per se.
152

153
00:11:36.530 --> 00:11:41.230
However, it's not exactly printing out the way that I had wanted it to.
153

154
00:11:41.250 --> 00:11:43.870
So you can probably see where this is going.
154

155
00:11:43.890 --> 00:11:53.490
I'm going to try the third exercise. That was to display sym square root of X times sym dot square
155

156
00:11:53.490 --> 00:11:57.590
root of square root of x.
156

157
00:11:57.630 --> 00:11:59.550
So here we just get an x.
157

158
00:11:59.550 --> 00:12:06.620
Now of course this makes sense, because the square root of x times the square root of X gives us x.
158

159
00:12:06.780 --> 00:12:13.520
So the moral of this story here -- what you see here from these exercises -- is that using the sympy toolbox
159

160
00:12:13.530 --> 00:12:19.080
is actually really powerful, but for displaying the variables the way that you want with maximal control,
160

161
00:12:19.560 --> 00:12:26.580
it's not sufficient just to have the display function and then put your variables inside the display
161

162
00:12:26.580 --> 00:12:27.450
function.
162

163
00:12:27.450 --> 00:12:32.180
Instead, you're going to need to learn a little bit more, and that is LaTeX.
163

164
00:12:32.220 --> 00:12:38.400
Now I've already introduced latex coding a little bit in previous videos in this course, but the difference
164

165
00:12:38.400 --> 00:12:44.840
between this and this is why we need to learn LaTeX.
165

166
00:12:45.150 --> 00:12:53.670
So in this video I introduced you to symbolic variables and the sympy module in Python. I showed
166

167
00:12:53.670 --> 00:13:00.330
you how to print out some nice looking expressions, mathematical expressions, using the display function
167

168
00:13:00.480 --> 00:13:06.960
and the sympy toolbox. In the next video, I'm going to show you how to take this one step further
168

169
00:13:07.320 --> 00:13:08.550
using LaTeX.
