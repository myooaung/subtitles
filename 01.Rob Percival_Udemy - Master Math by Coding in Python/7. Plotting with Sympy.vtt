WEBVTT
1
00:00:03.980 --> 00:00:10.850
So far in this section of the course we've been using the map plot lib module and in particular pi plot

2
00:00:11.300 --> 00:00:13.720
in order to make graphics.

3
00:00:13.760 --> 00:00:21.710
However it's also possible to make visualizations of symbolic functions directly using these simple

4
00:00:22.460 --> 00:00:25.370
module and that is the main point of this video.

5
00:00:25.370 --> 00:00:33.590
I'm going to introduce you to plotting using simply you'll see that some aspects are similar to using

6
00:00:33.590 --> 00:00:37.210
map plot lib and some aspects are a little bit different.

7
00:00:37.220 --> 00:00:41.660
All right so let's immediately switch to Python and start working.

8
00:00:42.110 --> 00:00:49.730
So obviously we are going to need these simple module so import simple by as sin.

9
00:00:50.690 --> 00:00:58.820
So I'm going to start by defining a fairly simple function and that function will be Y equals X squared.

10
00:00:58.820 --> 00:01:05.030
Okay so now here I'm defining y but I haven't yet defined X so I'm going to import this.

11
00:01:05.030 --> 00:01:11.900
I'm going to say from simple dot ABC import variable x.

12
00:01:11.910 --> 00:01:13.990
Okay so I can run that cell.

13
00:01:14.000 --> 00:01:18.300
Don't get any errors don't get me messages or anything so that's a good sign.

14
00:01:18.350 --> 00:01:27.560
Now the way that plotting works in simple is you use the function Sim dot plotting dot plot and then

15
00:01:27.560 --> 00:01:29.960
you just input the function that you want to plot.

16
00:01:29.960 --> 00:01:30.980
So in this case y.

17
00:01:31.670 --> 00:01:40.300
And remember that y here so the input into these simple plotting plot function is not just a variable.

18
00:01:40.340 --> 00:01:42.500
This is not just a vector of some numbers.

19
00:01:42.500 --> 00:01:44.960
This is actually a simple high object.

20
00:01:46.100 --> 00:01:46.360
Okay.

21
00:01:46.400 --> 00:01:49.670
So if you try to run this you actually don't get the plot.

22
00:01:49.670 --> 00:01:51.800
You get the plot object.

23
00:01:51.800 --> 00:01:54.020
So here is this object it's a figure.

24
00:01:54.050 --> 00:01:56.660
So what you need to do is request an output.

25
00:01:56.660 --> 00:02:03.680
So you say P equals or BLT or whatever variable name and then you get this nice output.

26
00:02:03.680 --> 00:02:08.480
So this is of course the function Y equals X squared.

27
00:02:08.480 --> 00:02:14.030
So already there's one thing to notice about this graph here and that is that I didn't actually input

28
00:02:14.120 --> 00:02:15.540
any x values.

29
00:02:15.560 --> 00:02:22.400
So python just picked some x values that it thought would be a decent range for this function.

30
00:02:22.400 --> 00:02:25.730
And I also didn't specify what the x axis should be.

31
00:02:25.730 --> 00:02:31.130
Now in this case it was obvious because there is only one variable This is a function of one variable

32
00:02:31.160 --> 00:02:32.670
and that is x.

33
00:02:32.780 --> 00:02:38.660
So if you were using matte plot lib then you would probably do something like this where you input x

34
00:02:38.660 --> 00:02:44.470
comma Y to show the X axis variable and the y axis variable.

35
00:02:44.480 --> 00:02:50.990
However if you run this in simple plot you actually get two lines and it looks a little weird these

36
00:02:50.990 --> 00:02:56.380
two lines but actually this first line is the function Y equals X.

37
00:02:56.450 --> 00:03:02.150
Now it might not look like the function Y equals X because you're used to seeing that as like a 45 degree

38
00:03:02.150 --> 00:03:02.860
angle.

39
00:03:02.870 --> 00:03:06.100
However notice that the axis limits are different.

40
00:03:06.100 --> 00:03:07.250
So this goes up to 10.

41
00:03:07.250 --> 00:03:08.710
This goes up to 100.

42
00:03:08.810 --> 00:03:17.090
So in fact what we did here was input two separate functions into the simple plotting function.

43
00:03:17.090 --> 00:03:21.950
So Y equals X and Y equals X squared.

44
00:03:21.950 --> 00:03:22.210
All right.

45
00:03:22.250 --> 00:03:26.770
So let's say you want to change the x axis limits.

46
00:03:26.780 --> 00:03:31.670
Maybe you don't want to show the negative numbers you just want to show the positive numbers and you

47
00:03:31.670 --> 00:03:33.660
want to show them a little bit higher.

48
00:03:33.800 --> 00:03:39.820
So let's start by just printing out this P variable and see what this is okay.

49
00:03:39.820 --> 00:03:44.720
So this says it's a plot object that contains zeros.

50
00:03:44.740 --> 00:03:47.460
This is the first element a Cartesian line.

51
00:03:47.500 --> 00:03:55.700
So there's a Cartesian plot x squared over X or for X goes from minus 10 to plus 10.

52
00:03:55.720 --> 00:03:57.500
Okay so that's pretty interesting.

53
00:03:57.500 --> 00:04:03.440
This is actually already a little bit of a preview into something I'm going to do in a few minutes which

54
00:04:03.440 --> 00:04:10.610
is generate multiple functions inside the same plot and you'll see that each one each for each function.

55
00:04:10.610 --> 00:04:13.750
Each line is going to have its own separate line here.

56
00:04:13.750 --> 00:04:15.970
In fact I think I'll even show you that now.

57
00:04:15.980 --> 00:04:18.060
So let's say x come away.

58
00:04:18.130 --> 00:04:26.240
Now you can see that this plot object contains two elements the first elements element zero is the line

59
00:04:26.330 --> 00:04:31.940
X and the second element which has index 1 is the line X squared.

60
00:04:31.940 --> 00:04:41.630
All right so let's try doing something like when we say p dot y Lim equals zero to 50.

61
00:04:41.630 --> 00:04:49.100
So what I hope this is going to do is change the y axis limits to go from 0 to 50 instead of minus 10

62
00:04:49.190 --> 00:04:51.620
plus 10 huh.

63
00:04:51.670 --> 00:04:55.420
And it looks like it actually did nothing at all.

64
00:04:55.420 --> 00:05:00.790
And so this feature is actually a little bit similar to matte plot lib in the sense that once the plot

65
00:05:00.880 --> 00:05:07.660
is already shown on the graph once the plot is generated once this picture is image is produced it's

66
00:05:07.660 --> 00:05:12.920
not possible to modify any of the access parameters.

67
00:05:12.910 --> 00:05:20.530
So then the way to do this is you have to tell simply explicitly not to plot this image not to create

68
00:05:20.530 --> 00:05:26.340
this graph yet until you're finished generating all the parameters and then you show the graph.

69
00:05:26.590 --> 00:05:30.520
So that part's also a bit similar to using matte plot lib.

70
00:05:30.550 --> 00:05:34.290
So for example we say show dot false.

71
00:05:34.300 --> 00:05:37.420
So this is a boolean false.

72
00:05:37.420 --> 00:05:39.340
And here I'm turning show off.

73
00:05:39.340 --> 00:05:42.070
So now when I run this again we don't see any plot.

74
00:05:42.100 --> 00:05:48.130
And that's because the visualization of the plot is deactivated and then basically down here whenever

75
00:05:48.130 --> 00:05:56.790
you're finished modifying all the parameters and the visualizations then you type p dot show and oh

76
00:05:56.800 --> 00:05:57.040
right.

77
00:05:57.040 --> 00:05:57.570
Oh I see.

78
00:05:57.580 --> 00:05:59.040
I said the why limit.

79
00:05:59.080 --> 00:06:00.630
So in fact this did work.

80
00:06:00.760 --> 00:06:04.300
Now the y axis limit goes from 0 to 50.

81
00:06:04.330 --> 00:06:08.100
Remember before it was 100 but I actually was talking about the x axis limit.

82
00:06:08.130 --> 00:06:10.070
It's just a little type of there.

83
00:06:10.130 --> 00:06:15.460
Okay so now we've changed the x axis limit to go from 0 to 50.

84
00:06:15.910 --> 00:06:23.800
And there are other things that you can change as well we can say P that line color equals.

85
00:06:23.980 --> 00:06:25.630
How about M for Mike.

86
00:06:25.630 --> 00:06:26.230
No I'm just kidding.

87
00:06:26.230 --> 00:06:29.100
M is for magenta huh.

88
00:06:29.230 --> 00:06:32.290
Now in that case this one didn't do anything.

89
00:06:32.290 --> 00:06:34.270
The line here is still blue.

90
00:06:34.270 --> 00:06:36.490
The line color is still blue.

91
00:06:36.700 --> 00:06:43.570
Now the difference between this line and this line is here you are actually changing a property of the

92
00:06:43.570 --> 00:06:46.400
entire graph the entire axis.

93
00:06:46.450 --> 00:06:49.220
But here we are only changing the line color.

94
00:06:49.230 --> 00:06:53.760
Not for all the lines look at all the lines in this entire plot.

95
00:06:53.860 --> 00:07:00.250
We only want to change the line color for this line which corresponds to the first element of this plot

96
00:07:00.310 --> 00:07:07.060
object so therefore we need to access only that one element.

97
00:07:07.060 --> 00:07:11.050
And now that changed the line color just for this line.

98
00:07:12.070 --> 00:07:12.380
Okay.

99
00:07:12.400 --> 00:07:20.140
So already you can see that when adjusting the visual the aesthetic properties of this graph you have

100
00:07:20.140 --> 00:07:26.500
to be mindful of whether you are changing a feature of the entire plot or a feature of an individual

101
00:07:26.500 --> 00:07:29.560
line or an individual piece inside that plot.

102
00:07:29.560 --> 00:07:37.670
So for example let's say we wanted to change the title so we say title equals.

103
00:07:37.880 --> 00:07:40.360
This is a nice plot.

104
00:07:40.370 --> 00:07:41.240
Now is the time.

105
00:07:41.240 --> 00:07:45.880
So first of all this is not going to work here because Python doesn't know what we are trying to do

106
00:07:45.890 --> 00:07:49.960
in fact Python is just going to interpret this as a regular variable.

107
00:07:49.970 --> 00:07:55.930
The question is should I write p dot title or p zero dot title right.

108
00:07:55.940 --> 00:07:57.590
I'm sure you guessed it correctly.

109
00:07:57.740 --> 00:08:02.780
The answer is p dot because we are changing a property of the entire axis.

110
00:08:02.780 --> 00:08:08.250
This entire graph not just this one line very nice.

111
00:08:08.250 --> 00:08:16.320
So what I'd like to do now is show you how to generate multiple lines on top of each other and how to

112
00:08:16.320 --> 00:08:20.950
integrate simplify a little bit better with these simple plotting.

113
00:08:21.030 --> 00:08:21.240
Okay.

114
00:08:21.270 --> 00:08:25.080
Now first of all writing this out I find to be a little bit long.

115
00:08:25.090 --> 00:08:26.920
Some plotting dot plot.

116
00:08:26.940 --> 00:08:32.790
So what I'm going to do is shorten this a little bit and I'm going to write up here.

117
00:08:33.070 --> 00:08:41.130
Import Sim pi dot plotting dot plot as simpler.

118
00:08:41.610 --> 00:08:49.890
So now once I run this code now instead of writing some dot plotting that plot I can simply type Sim

119
00:08:49.920 --> 00:08:50.260
plot.

120
00:08:50.280 --> 00:08:51.510
So that's a little bit shorter.

121
00:08:51.810 --> 00:08:54.770
And this will get you the same thing as this.

122
00:08:54.770 --> 00:09:01.230
So this will access all the same objects and methods and so on as writing this whole thing out as you

123
00:09:01.230 --> 00:09:02.460
can see here.

124
00:09:02.610 --> 00:09:02.820
All right.

125
00:09:02.820 --> 00:09:04.850
So that already makes it a little bit easier.

126
00:09:04.860 --> 00:09:13.110
So what I'd like to do now is import another variable and that's going to be a sim that symbols X comma

127
00:09:13.200 --> 00:09:13.660
a.

128
00:09:13.680 --> 00:09:18.960
So now you might be thinking that I don't really need to import will X again here because I've already

129
00:09:18.960 --> 00:09:20.580
imported it up here.

130
00:09:20.580 --> 00:09:26.670
Now technically that's true but in this case I'm doing something different with the variable here compared

131
00:09:26.670 --> 00:09:29.220
to what I was doing with the variable here.

132
00:09:29.220 --> 00:09:35.220
And so therefore I often find it personally helpful it helps me read the code to import the variables

133
00:09:35.220 --> 00:09:38.100
again even if it's not strictly necessary.

134
00:09:38.550 --> 00:09:41.930
Okay so I'm going to come up with a really simple function.

135
00:09:41.940 --> 00:09:51.220
Let's call this expression a divided by X and now basically what I want to do is make a plot of a divided

136
00:09:51.220 --> 00:09:54.700
by X for two different values of a.

137
00:09:54.700 --> 00:10:00.150
So I want to substitute this expression for a couple of different numbers.

138
00:10:00.220 --> 00:10:03.750
All right so let's start by writing p equals Sim.

139
00:10:03.750 --> 00:10:08.180
Plot expression and let's see what happens.

140
00:10:08.230 --> 00:10:15.760
Oh we get an error and the error is that the same variables should be used in all unit various expressions

141
00:10:15.760 --> 00:10:16.300
being plotted.

142
00:10:16.320 --> 00:10:16.550
OK.

143
00:10:16.560 --> 00:10:22.360
So that's quite a mouthful of an error but essentially the problem here is that we have two variables.

144
00:10:22.360 --> 00:10:26.570
And the plot is just going to show we're supposed to show only one line.

145
00:10:26.590 --> 00:10:33.600
So basically we haven't given Python enough information for simplified to be able to generate this plot.

146
00:10:33.670 --> 00:10:37.870
So in fact what we want to do is substitute a value for a.

147
00:10:37.870 --> 00:10:41.420
So I want to say that sub's a comma.

148
00:10:41.440 --> 00:10:42.390
Let's go for one.

149
00:10:42.400 --> 00:10:49.720
So now this is going to turn into the expression one over X and that is certainly something that is

150
00:10:49.720 --> 00:10:50.290
plausible.

151
00:10:50.870 --> 00:10:51.150
Okay.

152
00:10:51.160 --> 00:10:56.320
So maybe you don't actually see the blue line or maybe you can kind of see it on your own screen but

153
00:10:56.320 --> 00:11:02.530
in fact there is a blue line here it just this function goes up to infinity and down to minus infinity

154
00:11:02.530 --> 00:11:03.260
here.

155
00:11:03.280 --> 00:11:05.380
So let's start specifying some of the ranges.

156
00:11:05.410 --> 00:11:11.230
So up here I showed you how to specify the x axis limit like this.

157
00:11:11.230 --> 00:11:17.680
And I'm going to show you another way and that is by importing your preferred axis limits directly into

158
00:11:17.680 --> 00:11:18.150
the plot.

159
00:11:18.160 --> 00:11:23.900
So with parentheses you write X comma minus five comma plus five.

160
00:11:23.920 --> 00:11:30.040
So this is the variable that we want to express the limits of the lower limit and the upper limit.

161
00:11:30.040 --> 00:11:32.700
So let's see what this looks like now.

162
00:11:32.770 --> 00:11:33.010
All right.

163
00:11:33.010 --> 00:11:36.270
So now we go from minus five to plus five.

164
00:11:36.280 --> 00:11:40.960
And it's not really any more visual easily visualize well than it was before.

165
00:11:40.960 --> 00:11:42.040
So let's write.

166
00:11:42.430 --> 00:11:44.000
Show equals false.

167
00:11:44.020 --> 00:11:47.860
And then here I'm gonna specify that P the why.

168
00:11:47.980 --> 00:11:50.940
LIM should also be minus.

169
00:11:51.220 --> 00:11:53.530
Minus five to plus five.

170
00:11:53.530 --> 00:11:56.810
And then I can show this plus p dot show.

171
00:11:57.520 --> 00:11:58.140
All right.

172
00:11:58.150 --> 00:12:01.170
This is starting to look a bit more interesting.

173
00:12:01.270 --> 00:12:03.900
So this is the plot of the function.

174
00:12:03.940 --> 00:12:07.030
1 over X I'm substituting one for a.

175
00:12:07.030 --> 00:12:09.970
And then we're plotting one over X here.

176
00:12:09.970 --> 00:12:10.200
Okay.

177
00:12:10.230 --> 00:12:12.820
So let's put a label in here.

178
00:12:12.970 --> 00:12:17.250
So p zero dot label equals.

179
00:12:17.260 --> 00:12:18.370
And then this is.

180
00:12:18.460 --> 00:12:21.600
So y equals one over x.

181
00:12:21.750 --> 00:12:22.110
Huh.

182
00:12:22.120 --> 00:12:25.370
And we still don't see the legend inside this plot.

183
00:12:25.430 --> 00:12:28.700
Maybe that legend also needs to be activated.

184
00:12:28.840 --> 00:12:32.940
So we write P that legend equals true.

185
00:12:32.950 --> 00:12:38.130
And this is going to tell a simple guy that we want the legend to be shown.

186
00:12:39.380 --> 00:12:39.640
Okay.

187
00:12:39.670 --> 00:12:41.910
So here you see this label.

188
00:12:41.920 --> 00:12:43.590
Now there's two issues here.

189
00:12:43.600 --> 00:12:46.660
One issue is that this is hardcoded to be one.

190
00:12:46.660 --> 00:12:49.870
And that's kind of OK because I also hardcoded that here.

191
00:12:49.870 --> 00:12:55.810
But in general in the future it's good to know how to make this be more dynamic how to make this soft

192
00:12:55.810 --> 00:12:56.150
code.

193
00:12:56.170 --> 00:12:57.990
So I'm going to write here.

194
00:12:58.090 --> 00:12:58.780
Percent.

195
00:12:58.800 --> 00:13:01.990
S and you can probably already guess where this is going.

196
00:13:02.020 --> 00:13:07.540
I'm going to actually just copy and paste this in here.

197
00:13:08.290 --> 00:13:16.450
So this is particularly useful if you're saying something like an equals one and then I'm substituting

198
00:13:16.570 --> 00:13:18.970
n in here like this.

199
00:13:20.820 --> 00:13:21.060
Okay.

200
00:13:21.090 --> 00:13:24.180
So that is one that solves one problem.

201
00:13:24.190 --> 00:13:29.110
Another thing I'd like to change which isn't actually a problem but I would like this to be an actual

202
00:13:29.110 --> 00:13:29.670
fraction.

203
00:13:29.680 --> 00:13:34.870
I would like this to look a little bit more like a fraction rather than one slash X..

204
00:13:34.960 --> 00:13:39.890
And so to do that I want to in case some of this stuff in latex code.

205
00:13:39.970 --> 00:13:47.380
So we want latex code in the label so you might think of doing something simple like simple latex but

206
00:13:47.380 --> 00:13:50.500
then it's actually just showing the latex code.

207
00:13:50.680 --> 00:13:54.750
So this is probably even worse than the previous legend.

208
00:13:54.760 --> 00:13:59.560
So what we need to do is actually get this entire expression to be in latex.

209
00:13:59.560 --> 00:14:03.870
Now the way to do that is not by writing display and math functions.

210
00:14:03.880 --> 00:14:10.840
Instead the way to do that is to in case this expression in dollar signs like this and the dollar signs

211
00:14:10.840 --> 00:14:18.460
like this is the way to illustrate that inside this string we are going to be using LaTeX code or this

212
00:14:18.760 --> 00:14:22.290
text should be interpreted as latex code.

213
00:14:22.300 --> 00:14:27.430
So there you go a little bit small maybe but you can probably read it on your own screen that says Y

214
00:14:27.460 --> 00:14:30.340
equals one divided by x.

215
00:14:30.340 --> 00:14:33.040
Okay so that is for plotting one line.

216
00:14:33.040 --> 00:14:36.470
Now what do I do if I want to plot two lines.

217
00:14:36.590 --> 00:14:43.270
So I want another function maybe I want to set a to be equal to two and to see how one over X compares

218
00:14:43.270 --> 00:14:45.150
with two over x.

219
00:14:45.250 --> 00:14:52.980
So the way that you have to do that is by using a method associated with a plot object called extend.

220
00:14:52.980 --> 00:14:59.830
So we say extend and basically what we want to do is extend this plot object by one more element.

221
00:14:59.970 --> 00:15:06.120
And what is that other element that we want to put in there so that other element is actually exactly

222
00:15:06.120 --> 00:15:07.360
this.

223
00:15:07.380 --> 00:15:14.190
So one way you could do this or accomplish this goal is by saying let's call this P2 and then I say

224
00:15:14.190 --> 00:15:15.500
extend P2.

225
00:15:15.530 --> 00:15:20.960
So this is going to be extend by or so a equals 2.

226
00:15:21.780 --> 00:15:28.710
And now just out of curiosity to see what happens I'm going to remove the X limit parameter inside this

227
00:15:28.710 --> 00:15:31.070
function.

228
00:15:31.220 --> 00:15:31.590
All right.

229
00:15:31.620 --> 00:15:34.470
So this is looking kind of good it's it's getting there.

230
00:15:34.470 --> 00:15:35.750
You can see there are two lines.

231
00:15:35.760 --> 00:15:38.310
Now the problem is both of these lines are blue.

232
00:15:38.310 --> 00:15:42.080
So it's kind of hard to say which line is which function.

233
00:15:42.360 --> 00:15:48.230
You can kind of tell because we know that this line was set to go from minus five to plus five.

234
00:15:48.240 --> 00:15:53.970
And this line here corresponds to or has bounds at minus five and plus find five.

235
00:15:53.970 --> 00:15:56.470
So that means that this one is actually.

236
00:15:56.520 --> 00:16:04.620
So the the inner line here is actually y equals one over X and the outer one is Y equals 2 divided by

237
00:16:04.690 --> 00:16:12.480
X but I think the bigger problem here is that the two lines have the same color but you know how to

238
00:16:12.480 --> 00:16:18.150
solve that problem we simply type P and then you can pick which line you want so let's say the first

239
00:16:18.150 --> 00:16:27.510
line dot line color equals loops part should have been all right.

240
00:16:27.530 --> 00:16:29.140
So that is looking pretty good.

241
00:16:29.180 --> 00:16:34.190
And then I'm also going to specify the label for this second line.

242
00:16:34.190 --> 00:16:36.770
So now this is no longer p zero.

243
00:16:36.770 --> 00:16:37.790
This was p 0.

244
00:16:37.790 --> 00:16:38.840
This is p 1.

245
00:16:39.080 --> 00:16:44.340
So then this has to be a 2 All right.

246
00:16:44.340 --> 00:16:46.980
This is starting to look pretty good I think.

247
00:16:47.160 --> 00:16:55.080
The very last thing that I want to show you is that if the inputs into the extend method here are actually

248
00:16:55.650 --> 00:16:59.440
I should say the inputs into Simplot are not so big like this.

249
00:16:59.450 --> 00:17:08.370
Then you can actually shorten this code by a line and just directly call the Simplot function embedded

250
00:17:08.460 --> 00:17:11.280
into the extend function.

251
00:17:11.460 --> 00:17:19.530
So just like that in this video I introduced you to using these simple module for plotting.

252
00:17:19.590 --> 00:17:25.830
You can see that some features of using simple for plotting are this are similar to map plot lib and

253
00:17:25.830 --> 00:17:28.050
some features are a bit different.

254
00:17:28.050 --> 00:17:35.040
I guess I would say that my personal preference is in general to stick to map plot lib instead of using

255
00:17:35.040 --> 00:17:41.550
simple plotting and I say that mainly because I think it's useful to try to be consistent and compact

256
00:17:41.610 --> 00:17:44.270
in your code to help minimize confusion.

257
00:17:44.310 --> 00:17:49.950
But anyway it's still important to know how to generate plots using simple methods.

258
00:17:49.980 --> 00:17:51.720
Stay tuned for the next video.

259
00:17:51.750 --> 00:17:58.170
The next video is going to be an exercise where you will get to produce actually this graph right here.

260
00:17:58.170 --> 00:17:59.640
So see you in the next video.
