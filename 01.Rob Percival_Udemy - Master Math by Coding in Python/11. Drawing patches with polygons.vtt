WEBVTT
1
00:00:04.330 --> 00:00:11.050
In this video I'm going to show you how to use polygons to create patches and python.

2
00:00:11.050 --> 00:00:12.450
So quite a lot of peas.

3
00:00:12.460 --> 00:00:15.560
Quite a bit of alliteration with peas in this lecture.

4
00:00:15.580 --> 00:00:17.050
So what is the goal here.

5
00:00:17.050 --> 00:00:18.230
What's the big idea.

6
00:00:18.340 --> 00:00:23.170
The big idea the big picture is to draw some object on the graph.

7
00:00:23.170 --> 00:00:28.930
That's not necessarily a line and the way that we do that is by generating a polygon.

8
00:00:28.930 --> 00:00:34.980
So let's say for example you want to draw a triangle on this graph here.

9
00:00:35.020 --> 00:00:41.800
So the way that that works in Python is you specify some points and for a triangle we need a minimum

10
00:00:41.860 --> 00:00:47.950
of three points and then basically you input these three points into a function called polygon which

11
00:00:47.950 --> 00:00:51.400
then gets input into a method called Ad patch.

12
00:00:51.400 --> 00:00:58.210
I will show you all the details in a moment but the idea is that you generate these three points and

13
00:00:58.240 --> 00:01:03.360
python will draw a patch that goes across all of these points.

14
00:01:03.370 --> 00:01:07.120
And in this case of course that is a triangle.

15
00:01:07.120 --> 00:01:10.330
So three points will create a triangle.

16
00:01:10.360 --> 00:01:17.050
Four points can create a rectangle or a square and you can have any arbitrary number of points to create

17
00:01:17.080 --> 00:01:19.660
any kind of Polygon you want.

18
00:01:19.690 --> 00:01:21.970
So just to make this a little bit more concrete.

19
00:01:22.030 --> 00:01:27.550
The points that are specified here come in x y axis pairs.

20
00:01:27.550 --> 00:01:32.930
So this point here would be 1 1 this point here would be 1 4.

21
00:01:32.940 --> 00:01:34.100
That's this point here.

22
00:01:34.270 --> 00:01:38.090
And then this point here is for 1 4 comma 1.

23
00:01:38.200 --> 00:01:38.530
Okay.

24
00:01:38.530 --> 00:01:40.390
And with that as an introduction.

25
00:01:40.390 --> 00:01:45.870
Let me now switch to Python and show you how this gets implemented mechanistic CLI.

26
00:01:46.420 --> 00:01:50.050
We are going to need the map plot lib.

27
00:01:50.050 --> 00:01:50.800
So Matt.

28
00:01:50.830 --> 00:01:58.090
Plot lib dot pie plot and I'll import that as BLT because that's what everyone else does.

29
00:01:58.090 --> 00:02:05.740
We are going to use the NUM pi module so import that as N P also because that's how everyone else refers

30
00:02:05.740 --> 00:02:07.520
to the NUM pi module.

31
00:02:07.570 --> 00:02:14.140
And finally we are going to need a special function called polygon and that's going to be in the matte

32
00:02:14.470 --> 00:02:23.210
plot lib dot patches module import Paul the gun.

33
00:02:23.290 --> 00:02:30.380
So we don't actually need the entire Matlab lib dot patches module we only need the function polygon.

34
00:02:30.430 --> 00:02:34.390
So I'm just importing that actually this was safe from.

35
00:02:34.390 --> 00:02:43.810
So from this module we import just the function polygon there is a very specific way that the points

36
00:02:43.810 --> 00:02:48.610
have to be specified for creating or for specifying the polygon.

37
00:02:48.610 --> 00:02:57.880
So we are going to use num pi dot array and then inside the array there is going to be square brackets

38
00:02:57.880 --> 00:03:04.710
like this and then inside the square brackets there's going to be another set of square brackets.

39
00:03:04.780 --> 00:03:10.930
And the idea is that in the innermost square brackets these are going to be used for each individual

40
00:03:10.990 --> 00:03:15.940
X Y coordinate and so in this case we're going to specify three to get a triangle.

41
00:03:16.480 --> 00:03:21.330
So this looks a little bit initially confusing because there's a lot of square brackets going on.

42
00:03:21.430 --> 00:03:29.200
We have this in p dot array function that's basically necessary to get the set of points into the format

43
00:03:29.440 --> 00:03:31.600
that the function polygon expects.

44
00:03:31.600 --> 00:03:35.920
And I'm going to walk you through this over the next minute or so.

45
00:03:35.980 --> 00:03:38.010
So let's see I'm going to create a triangle.

46
00:03:38.020 --> 00:03:47.810
I'll specify the points to be 1 1 and then 2 3 and then the other point is going to be 3 comma 1.

47
00:03:47.860 --> 00:03:50.820
So let me show you what this variable Y looks like.

48
00:03:51.460 --> 00:03:54.110
So this turns out to be a matrix.

49
00:03:54.130 --> 00:04:02.380
It's a three by two matrix and this is the format that we always need to use for the function polygon

50
00:04:02.410 --> 00:04:04.390
which I'm going to show you in a moment.

51
00:04:04.390 --> 00:04:11.380
So the input into the polygon function always needs to be some number of points so each row is a point

52
00:04:11.470 --> 00:04:17.080
and then the columns correspond to the X locations and the y locations.

53
00:04:17.080 --> 00:04:17.390
All right.

54
00:04:17.410 --> 00:04:26.410
So then I'm going to generate an object called P and it's going to be a poly gun and then we just input

55
00:04:26.500 --> 00:04:29.410
the matrix of points that we generated here.

56
00:04:29.440 --> 00:04:37.460
So polygon y and now to add this to a figure it's not quite as simple as saying you know appeal to you

57
00:04:37.480 --> 00:04:43.150
dot plot P It would be you know pretty convenient if it could be that simple but it's slightly different

58
00:04:43.150 --> 00:04:45.780
where you're going to use a slightly different formulation here.

59
00:04:45.790 --> 00:04:54.280
So I'm going to write P L T dot subplots and then request to outputs from this subplots function the

60
00:04:54.280 --> 00:04:59.110
figure which we're not actually going to use and the Axis within the figure.

61
00:04:59.530 --> 00:05:01.490
And this is actually what we are going to use.

62
00:05:01.490 --> 00:05:10.620
So we write X dot add underscore patch and then the patch object or the polygon object which is p in

63
00:05:10.620 --> 00:05:11.290
this case.

64
00:05:11.910 --> 00:05:12.480
Oh right.

65
00:05:12.510 --> 00:05:18.840
And then I write P L to you that show and here is our Oh I was hoping there would be a beautiful triangle

66
00:05:18.840 --> 00:05:19.590
here.

67
00:05:19.740 --> 00:05:21.240
What is going on.

68
00:05:21.330 --> 00:05:23.550
We don't see any python errors.

69
00:05:23.550 --> 00:05:25.320
There's no error messages here.

70
00:05:25.320 --> 00:05:31.480
But if you look at this plot closely you can see that the boundaries of this plot go from 0 to 1.

71
00:05:31.500 --> 00:05:33.680
And on the y axis 0 to 1.

72
00:05:33.690 --> 00:05:39.300
But all of these points that I've specified here are actually larger or one or larger.

73
00:05:39.330 --> 00:05:46.260
So in fact this polygon is kind of off the screen it's being plotted over here outside of this axis.

74
00:05:46.260 --> 00:05:52.200
So we need to explicitly tell Python to adjust the x and y axes.

75
00:05:52.220 --> 00:06:04.860
So I will write X dot set y limb to go from 0 to 4 and then X starts at X limb to go also from 0 to

76
00:06:04.860 --> 00:06:06.930
4 and great.

77
00:06:06.930 --> 00:06:11.510
Now we see our happy little triangle and you can also see these three points here.

78
00:06:11.520 --> 00:06:12.430
So this is the point.

79
00:06:12.430 --> 00:06:16.580
1 1 this point appear is 2 3.

80
00:06:16.590 --> 00:06:17.830
That's this middle point here.

81
00:06:18.010 --> 00:06:23.010
And then appear we have 3 1 so that's 3 and then 1 over here.

82
00:06:23.010 --> 00:06:26.550
So this triangle is blue.

83
00:06:26.910 --> 00:06:33.480
I'm going to change the color of the triangle by adding another input to the polygon function and it's

84
00:06:33.480 --> 00:06:34.660
going to be face.

85
00:06:34.660 --> 00:06:38.280
Color equals How about M for magenta.

86
00:06:38.950 --> 00:06:39.240
Okay.

87
00:06:39.270 --> 00:06:41.810
But this is this is like a little bit intense.

88
00:06:41.810 --> 00:06:49.200
It's a little bit bright but I'm going to do is make this partially transparent by using the alpha keyword.

89
00:06:49.200 --> 00:06:57.810
So Alpha refers to the transparency of this object and it varies between 0 and 1 where one is totally

90
00:06:57.810 --> 00:07:02.720
opaque which in this case actually means nothing zero means totally transparent.

91
00:07:02.730 --> 00:07:05.210
And now it looks like the triangle disappeared.

92
00:07:05.400 --> 00:07:11.970
In fact the triangle is there technically but it is set to be 100 percent transparent.

93
00:07:12.090 --> 00:07:14.810
So maybe we tried something like point three.

94
00:07:14.820 --> 00:07:18.370
So now this is 30 percent transparent.

95
00:07:18.690 --> 00:07:21.300
I should say 30 percent opaque.

96
00:07:21.300 --> 00:07:21.560
All right.

97
00:07:21.570 --> 00:07:28.190
So that is one polygon if you want to add another polygon you do basically the same thing.

98
00:07:28.530 --> 00:07:33.990
You just create another polygon object and add that additional patch as well.

99
00:07:34.020 --> 00:07:36.380
So for example let's see.

100
00:07:36.390 --> 00:07:44.130
I will copy and paste and in the interests of not overriding anything I'm going to make this Y 1 and

101
00:07:44.190 --> 00:07:47.460
P1 and then change this to y one as well.

102
00:07:47.480 --> 00:07:47.720
Okay.

103
00:07:47.750 --> 00:07:48.360
So let's see.

104
00:07:48.360 --> 00:07:52.910
I want to create another triangle on top of this triangle.

105
00:07:53.810 --> 00:08:02.850
So I'm going to make that start at 2 2 and it's going to go 2.5 and then 4 and then the last point is

106
00:08:02.850 --> 00:08:09.330
going to be three point five comma one and let's make this a black triangle.

107
00:08:09.330 --> 00:08:13.620
It's still gonna be a bit transparent.

108
00:08:13.660 --> 00:08:14.000
Right.

109
00:08:14.010 --> 00:08:18.090
Of course nothing happened because I didn't actually draw this polygon.

110
00:08:18.090 --> 00:08:23.300
So let's see I will copy and paste and now I will add patch p. 1.

111
00:08:23.460 --> 00:08:24.060
All right.

112
00:08:24.060 --> 00:08:25.180
There you go.

113
00:08:25.320 --> 00:08:27.090
But maybe black doesn't look so good.

114
00:08:27.120 --> 00:08:30.310
What if we change it to about blue.

115
00:08:30.440 --> 00:08:30.950
Okay.

116
00:08:30.960 --> 00:08:31.940
That looks pretty nice.

117
00:08:31.950 --> 00:08:38.890
That's actually even a little bit purplish now there's many many options that you can add inside here

118
00:08:38.920 --> 00:08:46.060
I'm going to show you another one which is the property called Edge color so the edge color is this

119
00:08:46.420 --> 00:08:48.340
border around here.

120
00:08:48.760 --> 00:08:52.670
So I specify this to be k which stands for black.

121
00:08:52.690 --> 00:08:55.140
And notice that there is a border around here.

122
00:08:55.150 --> 00:08:57.880
Now you might think that this border isn't really black.

123
00:08:57.880 --> 00:09:00.230
It's more like a grayish color.

124
00:09:00.400 --> 00:09:03.760
And that's because of the Alpha transparency here.

125
00:09:03.760 --> 00:09:08.970
So this actually is a black edge but it's 30 percent opaque.

126
00:09:08.980 --> 00:09:13.150
So if I get rid of this alpha then you'll see that it really is black.

127
00:09:13.150 --> 00:09:16.290
Maybe I'll even set the face color to be white.

128
00:09:16.300 --> 00:09:21.040
So it's a little bit even clear that it's a really a black border

129
00:09:24.580 --> 00:09:31.520
the exercise for this video is to create this object to make a figure that looks like this.

130
00:09:31.570 --> 00:09:33.630
I call this the hobbits house.

131
00:09:33.760 --> 00:09:38.320
If you think that this doesn't really look like a hobbits house because there should be plants and maybe

132
00:09:38.320 --> 00:09:43.910
a big round door that's open sideways and you know just have some imagination here.

133
00:09:43.930 --> 00:09:46.520
I'm going to think of this as a hobbit house.

134
00:09:46.570 --> 00:09:54.820
So what you want to do is implement this function so F of X equals minus X squared and you can see that

135
00:09:54.820 --> 00:09:56.340
that's this function here.

136
00:09:56.340 --> 00:09:58.720
This is like a parabola here.

137
00:09:58.750 --> 00:10:03.540
So this line here corresponds to minus X squared.

138
00:10:03.640 --> 00:10:07.390
And that defines the boundary for this patch.

139
00:10:07.390 --> 00:10:13.510
So rather than specifying all of these points individually manually by writing them in you can specify

140
00:10:13.510 --> 00:10:20.590
the points on this patch to be the output of the function minus X squared between minus two and plus

141
00:10:20.590 --> 00:10:21.490
two.

142
00:10:21.490 --> 00:10:28.620
So this is one patch object and then this door here is a second patch object.

143
00:10:28.620 --> 00:10:28.900
All right.

144
00:10:28.930 --> 00:10:34.930
So this looks like a pretty simple geometric figure but it's actually a little bit tricky to get it

145
00:10:34.930 --> 00:10:37.900
to work with patches and polygons.

146
00:10:37.930 --> 00:10:39.750
Now I'm about to give you a hint.

147
00:10:39.880 --> 00:10:40.690
If you're stuck.

148
00:10:40.720 --> 00:10:43.690
So if you don't want a hint if you just want to get started.

149
00:10:43.690 --> 00:10:50.650
Now is your last opportunity to pause the video switch to Python and see if you can reproduce this figure.

150
00:10:50.980 --> 00:10:58.840
And if you want a hint The hint is this you use this num pi function called end p v stack that stands

151
00:10:58.840 --> 00:11:04.670
for vertical stack and the DOT T is for an operation called the transpose.

152
00:11:04.690 --> 00:11:09.600
I'm going to talk more about transposing later in the course in the section on linear algebra.

153
00:11:09.880 --> 00:11:15.700
But this is a function that you can use that will help you get this polygon object to work.

154
00:11:16.270 --> 00:11:16.630
All right.

155
00:11:16.630 --> 00:11:22.990
So now switch to Python and now I am going to switch to Python and show you how I came up with this

156
00:11:22.990 --> 00:11:28.210
graph so let's start with a fresh sell down here.

157
00:11:28.210 --> 00:11:36.440
So I'm going to say X equals linearly spaced numbers between minus two and plus two.

158
00:11:36.670 --> 00:11:40.330
And let's go for one hundred and one elements in between these two.

159
00:11:40.960 --> 00:11:45.650
So then I define the function that's minus X squared.

160
00:11:45.730 --> 00:11:53.130
And now here is I think probably the hardest part of this exercise is getting the the points to two

161
00:11:53.140 --> 00:11:53.470
works.

162
00:11:53.470 --> 00:11:55.130
I'm going to call this PNC.

163
00:11:55.150 --> 00:12:00.760
These are all the points and actually you don't maybe before I do this I'm going to draw what this function

164
00:12:00.760 --> 00:12:01.210
looks like.

165
00:12:01.210 --> 00:12:07.610
So people teed up blot X comma F. and then plot that show.

166
00:12:07.630 --> 00:12:07.860
Okay.

167
00:12:07.870 --> 00:12:09.730
So here you see what this function looks like.

168
00:12:09.730 --> 00:12:18.640
So my strategy here is going to be to specify all of these points for the y axis locations and then

169
00:12:18.760 --> 00:12:20.980
these are the x axis locations.

170
00:12:21.010 --> 00:12:26.010
So this is going to be X and this is going to be y for the plots.

171
00:12:26.110 --> 00:12:33.460
And now the trick is figuring out how to get x and f into a one hundred and one by two matrix.

172
00:12:33.460 --> 00:12:37.830
So this has to be one hundred and one rows and two columns.

173
00:12:37.930 --> 00:12:45.400
So the way that I'm going to do that is by saying num pi v stack that's for vertical stacking.

174
00:12:45.550 --> 00:12:49.880
And then we stack x and f and then we need to.

175
00:12:49.900 --> 00:12:53.170
Well let me actually show you what this looks like.

176
00:12:53.170 --> 00:13:01.600
So print P.A. Yes so you can see this is one long row and then this is another long row that starts

177
00:13:01.600 --> 00:13:02.170
here.

178
00:13:02.170 --> 00:13:09.160
Now I can use a function there's a there's a function called num pie shape which tells you the size

179
00:13:09.280 --> 00:13:11.490
of a variable.

180
00:13:11.500 --> 00:13:13.390
So this is to buy 101.

181
00:13:13.390 --> 00:13:19.750
But remember that the polygon function once the number of rows to correspond to the number of points

182
00:13:19.870 --> 00:13:23.550
and then the number of columns to correspond to the x and y values.

183
00:13:23.560 --> 00:13:25.690
So in fact this is just backwards.

184
00:13:25.690 --> 00:13:32.200
We just need to transpose this or flip the rows into columns and that's what this dot t does.

185
00:13:32.200 --> 00:13:35.350
It basically gives us a total matrix.

186
00:13:35.350 --> 00:13:43.630
So now we have that and now I can create the polygon poly gone object and that's going to be with points.

187
00:13:43.630 --> 00:13:51.820
And this is going to be green and let's make the edge color be black.

188
00:13:52.340 --> 00:13:52.660
Okay.

189
00:13:52.670 --> 00:13:57.150
And now I just need to add this polygon as a patch to the axis.

190
00:13:57.160 --> 00:14:04.130
So following the code that I showed you previously would be fig comma X equals BLT.

191
00:14:04.220 --> 00:14:13.510
So plots and then X equals or start at X dot add patch P.

192
00:14:14.350 --> 00:14:16.660
Okay let's see how this is looking.

193
00:14:16.660 --> 00:14:17.410
All right.

194
00:14:17.410 --> 00:14:18.970
This is not just g.

195
00:14:18.970 --> 00:14:22.870
This has to say face color equals G.

196
00:14:22.930 --> 00:14:23.240
All right.

197
00:14:23.260 --> 00:14:25.570
So this is a little too intensely green.

198
00:14:25.570 --> 00:14:31.630
I want this to be a little bit of a lighter green color so I'm going to say alpha equals point two.

199
00:14:31.630 --> 00:14:35.610
That was the value that I used in the graph that I showed in the slides.

200
00:14:35.680 --> 00:14:35.980
Okay.

201
00:14:36.010 --> 00:14:42.670
This is looking better and now that the issue with this edge color here is I want there to be a thick

202
00:14:42.670 --> 00:14:46.450
black line that goes all the way around this hobbits house.

203
00:14:46.450 --> 00:14:49.930
But you can see that the edge color here I specify it to be black.

204
00:14:50.200 --> 00:14:52.540
But here it's very very light gray.

205
00:14:52.570 --> 00:14:54.470
And that's because of this alpha.

206
00:14:54.580 --> 00:14:58.690
So in fact I'm just going to leave out the edge on the patch.

207
00:14:58.690 --> 00:15:02.970
So this patch is not going to have any edge color at all.

208
00:15:03.070 --> 00:15:07.700
And instead the plot of the function is going to be black.

209
00:15:07.750 --> 00:15:09.880
And I think this does a nicer job.

210
00:15:09.880 --> 00:15:11.330
This makes it look nicer.

211
00:15:11.510 --> 00:15:13.930
And now we need another line that goes here.

212
00:15:13.960 --> 00:15:16.510
So that's just a normal line.

213
00:15:16.540 --> 00:15:24.430
So that's going to be the x values are gonna go from minus two to plus two so minus two to plus two.

214
00:15:24.430 --> 00:15:29.570
And it's actually we don't need this X here just minus two to plus two is good.

215
00:15:29.620 --> 00:15:33.250
And then on the y axis it always stays at minus four.

216
00:15:33.280 --> 00:15:36.650
So this goes minus four two plus four.

217
00:15:36.670 --> 00:15:39.730
And of course this is also going to be a black line.

218
00:15:39.730 --> 00:15:40.910
And what did I do wrong.

219
00:15:41.560 --> 00:15:42.040
Oh right.

220
00:15:42.040 --> 00:15:44.810
This should be minus 40 minus four.

221
00:15:44.860 --> 00:15:46.720
My apologies.

222
00:15:46.720 --> 00:15:47.010
OK.

223
00:15:47.020 --> 00:15:48.030
So this is the house.

224
00:15:48.040 --> 00:15:52.570
But now our friendly little hobbit is trapped inside of the house he can't get out.

225
00:15:52.900 --> 00:15:54.840
So we need to create another patch.

226
00:15:54.880 --> 00:15:57.330
And that's going to be the door.

227
00:15:57.430 --> 00:16:00.500
So let's see I'll say this is why.

228
00:16:00.550 --> 00:16:01.890
What maybe I'll just call his wife.

229
00:16:01.910 --> 00:16:10.090
I have a variable Wyatt so num pi dot array and now this is going to be specifying just some number

230
00:16:10.090 --> 00:16:17.840
of points and to create a rectangle here we need to specify four points so let's see one two three four.

231
00:16:17.890 --> 00:16:24.010
Now the order here is not so important although you know if you specify this point and then this point

232
00:16:24.210 --> 00:16:29.180
then this point in this point then you're actually creating an X instead of a box.

233
00:16:29.210 --> 00:16:32.870
So I'm going to start by specifying this point here.

234
00:16:32.870 --> 00:16:35.090
So this is minus point five.

235
00:16:35.090 --> 00:16:35.950
Come on four.

236
00:16:35.960 --> 00:16:38.450
So that's the first point here.

237
00:16:38.450 --> 00:16:42.440
Minus point five comma minus four.

238
00:16:42.440 --> 00:16:48.170
And then the next point is gonna be somewhere up here and let's say I think I did 2.5 in the original

239
00:16:48.170 --> 00:16:57.520
one so the x coordinate is minus point five and the y coordinate is minus 2.5.

240
00:16:57.560 --> 00:16:59.560
So minus 2.5.

241
00:16:59.770 --> 00:17:03.250
And then we need this point over here which is point five.

242
00:17:03.280 --> 00:17:09.340
So X equals plus point five and Y equals minus 2.5.

243
00:17:09.350 --> 00:17:14.460
And finally we get down to this point which is the bottom right corner of the door.

244
00:17:14.600 --> 00:17:21.470
And that is plus point five on the x axis and minus four on the y axis.

245
00:17:21.500 --> 00:17:22.060
All right.

246
00:17:22.070 --> 00:17:25.150
And then add this patch.

247
00:17:25.190 --> 00:17:28.360
So that's going to be patch P1 right.

248
00:17:28.370 --> 00:17:34.220
I have to make this polygon object so let's see P1 and then.

249
00:17:34.220 --> 00:17:40.700
Now I call this variable Y and the face color here is going to be black with an alpha of the default

250
00:17:40.700 --> 00:17:48.170
value which is one woops that's well I'll run this anyway that's gonna make a yellow door a little typo

251
00:17:48.170 --> 00:17:49.560
here.

252
00:17:49.590 --> 00:17:51.550
Okay so here we get a yellow door.

253
00:17:51.740 --> 00:17:54.670
I want this door to be black.

254
00:17:54.680 --> 00:17:55.700
There you go.

255
00:17:55.700 --> 00:17:59.650
Actually there's one more thing I'm going to do which is to turn off the axis.

256
00:17:59.660 --> 00:18:05.320
I wanted the access to be on in the picture in the slides so you can see what the coordinates are.

257
00:18:05.360 --> 00:18:11.210
But I think it's gonna look a little bit more natural it looks a little more realistic if we turn the

258
00:18:11.210 --> 00:18:13.580
Axis off.

259
00:18:14.150 --> 00:18:14.990
There you go.

260
00:18:14.990 --> 00:18:21.620
Here's our friendly little hobbit house so this video was a lot of fun for me to make.

261
00:18:21.620 --> 00:18:24.740
I hope you enjoyed learning from it as well.

262
00:18:24.740 --> 00:18:31.340
There's many many many things you can do with patches drawing patches on plots but I hope you feel confident

263
00:18:31.370 --> 00:18:38.600
now with making basic patches and particular basic polygons and filling in objects based on function

264
00:18:38.600 --> 00:18:39.200
values.
