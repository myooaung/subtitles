WEBVTT
0
1
00:00:03.280 --> 00:00:09.730
This video is a follow up to the previous video where I'm going to go through two exercises for the
1

2
00:00:09.730 --> 00:00:11.620
greatest common denominator.
2

3
00:00:11.800 --> 00:00:17.680
So if you haven't watched the previous video, then you might want to go back and consult that one before
3

4
00:00:17.920 --> 00:00:19.310
going through the exercise
4

5
00:00:19.330 --> 00:00:20.720
in this video.
5

6
00:00:20.770 --> 00:00:21.010
All right.
6

7
00:00:21.010 --> 00:00:28.620
So here is your first exercise. What you want to do is use symbolic variables so that means the sympy
7

8
00:00:28.640 --> 00:00:35.960
module, to illustrate this property of the greatest common denominator. So the property is that C
8

9
00:00:35.980 --> 00:00:44.800
times or the greatest common denominator between C times A and C times B is the same thing as c times
9

10
00:00:44.800 --> 00:00:53.110
the greatest common denominator between A and B. So C A and B are all integers but in this case you want
10

11
00:00:53.110 --> 00:00:55.820
to show illustrate this in the general case.
11

12
00:00:55.840 --> 00:01:03.070
That means using symbolic variables and that means that you should use the G C D function not in the
12

13
00:01:03.370 --> 00:01:07.250
math module but in the sympy module.
13

14
00:01:07.290 --> 00:01:07.530
Okay.
14

15
00:01:07.540 --> 00:01:14.230
Once you've shown this for these letters, these symbolic variables, then you can go back and pick some
15

16
00:01:14.230 --> 00:01:21.400
numbers -- three integers -- and show an example with those numbers that you get the same result for this
16

17
00:01:21.550 --> 00:01:23.110
versus this.
17

18
00:01:23.110 --> 00:01:25.540
So that is exercise 1.
18

19
00:01:25.990 --> 00:01:34.360
Exercise 2 is to create a matrix and in particular you want to create a matrix that contains 10 rows
19

20
00:01:34.450 --> 00:01:36.880
and 15 columns.
20

21
00:01:36.880 --> 00:01:43.270
And initially you want to set every element in that 10 by 15 matrix to be ninety nine.
21

22
00:01:43.270 --> 00:01:49.200
So every element in the matrix will be ninety nine. And then you want to populate the matrix.
22

23
00:01:49.210 --> 00:01:56.110
So you have to do this in a double for loop such that the element in the i-th row and the j-th column
23

24
00:01:56.170 --> 00:02:03.420
of The Matrix corresponds to the greatest common denominator between i plus 1 and j plus 1.
24

25
00:02:03.430 --> 00:02:08.940
So the row index plus 1 and the column index plus 1.
25

26
00:02:08.950 --> 00:02:10.930
All right so pause the video.
26

27
00:02:10.930 --> 00:02:13.720
Have a go at both of these two exercises.
27

28
00:02:13.720 --> 00:02:20.230
And when you're ready to watch me solve these exercises, then come back to the video.
28

29
00:02:20.380 --> 00:02:20.740
All right.
29

30
00:02:20.770 --> 00:02:29.020
So I already mentioned that we are going to need the sympy toolbox. So let's import sympy as sym
30

31
00:02:29.050 --> 00:02:34.390
and I run this cell again and then... let's see, I think I'll actually just delete all of this stuff
31

32
00:02:35.620 --> 00:02:38.340
so we can start from a fresh screen like this.
32

33
00:02:39.100 --> 00:02:48.910
So I'm going to begin by creating three symbolic variables A B and C so A B and C equals Sim dot symbols
33

34
00:02:50.350 --> 00:02:52.690
and then A space B space
34

35
00:02:52.730 --> 00:03:04.240
C. Okay so now we want to say sym dot greatest common denominator of A times C and B times C and let's
35

36
00:03:04.240 --> 00:03:05.260
see what that gives us.
36

37
00:03:05.650 --> 00:03:06.810
So that gives us c.
37

38
00:03:06.820 --> 00:03:11.240
So the thing is we don't already know at this point what a b and c are.
38

39
00:03:11.320 --> 00:03:18.030
However sympy is seeing that it is pretty clear that C is multiplying both a and b.
39

40
00:03:18.070 --> 00:03:22.870
So that's the greatest common denominator that we can come up with given that we don't have any particular
40

41
00:03:22.870 --> 00:03:26.000
values for a and b.
41

42
00:03:26.020 --> 00:03:26.270
Okay.
42

43
00:03:26.300 --> 00:03:32.770
Now I'm actually going to encase this in a print function. And now what we want to do is write print
43

44
00:03:33.040 --> 00:03:39.560
and then sym dot G C D just with A and B.
44

45
00:03:39.790 --> 00:03:41.830
And now here the answer is 1.
45

46
00:03:41.830 --> 00:03:49.000
And again that's because we haven't given sympy enough information and so sympy doesn't have any
46

47
00:03:49.000 --> 00:03:52.280
specific values defined for A and B.
47

48
00:03:52.480 --> 00:04:00.210
So therefore you can already guess that when we multiply this by C the answer is going to be C.
48

49
00:04:00.670 --> 00:04:00.880
All right.
49

50
00:04:00.910 --> 00:04:05.250
So this was for the general case using symbolic variables.
50

51
00:04:05.620 --> 00:04:07.980
And now I want to repeat this with real numbers.
51

52
00:04:08.030 --> 00:04:16.810
Let's say A equals, how about 5. And then I'll make B six and C equals seven. I meant to make this six like
52

53
00:04:16.810 --> 00:04:18.290
that.
53

54
00:04:18.360 --> 00:04:18.710
Okay.
54

55
00:04:18.710 --> 00:04:26.920
And now this is going to be almost the same thing as what I have here except now because these are real
55

56
00:04:26.920 --> 00:04:27.400
numbers.
56

57
00:04:27.400 --> 00:04:35.200
These are not symbolic variables. I'm going to use the math module instead of the symbolic module.
57

58
00:04:35.200 --> 00:04:35.460
Okay.
58

59
00:04:35.470 --> 00:04:38.470
And here in both cases we get seven.
59

60
00:04:38.620 --> 00:04:44.470
Now maybe you think that's a little trivial because there actually are no common multiples of five and
60

61
00:04:44.470 --> 00:04:46.920
six other than one.
61

62
00:04:46.960 --> 00:04:53.780
So let's make this 15 and six that was like one of the examples that I used in the previous video.
62

63
00:04:53.800 --> 00:04:55.290
So here we get one.
63

64
00:04:55.420 --> 00:04:57.250
Maybe we can change this to two.
64

65
00:04:57.280 --> 00:05:00.150
The answer is six and maybe three.
65

66
00:05:00.160 --> 00:05:01.540
And here the answer is nine.
66

67
00:05:01.540 --> 00:05:07.870
In both cases so whatever I do with these numbers we seem to get the same answer for both of these and
67

68
00:05:07.870 --> 00:05:14.320
this confirms the property of the greatest common denominator that I showed in the slides.
68

69
00:05:14.350 --> 00:05:14.870
All right.
69

70
00:05:14.920 --> 00:05:16.120
Very good.
70

71
00:05:16.120 --> 00:05:18.270
Now for the second exercise.
71

72
00:05:18.280 --> 00:05:21.280
Now here we need to create a matrix.
72

73
00:05:21.410 --> 00:05:25.150
And so to do that I'm going to actually use the numpy module.
73

74
00:05:25.150 --> 00:05:29.250
So let's say import numpyi as np.
74

75
00:05:29.320 --> 00:05:31.630
Run this cell again.
75

76
00:05:31.630 --> 00:05:33.120
And let's see.
76

77
00:05:33.120 --> 00:05:36.820
So the first step is to create the matrix.
77

78
00:05:36.820 --> 00:05:43.270
I'm going to specify the sizes: it was 10 rows and 15 columns.
78

79
00:05:43.310 --> 00:05:45.960
Now we need to create a matrix.
79

80
00:05:45.970 --> 00:05:52.060
Let's call this G C D mat for greatest common denominator matrix.
80

81
00:05:52.060 --> 00:05:58.070
So I'm going to set this equal to numpy dot zeroes in here.
81

82
00:05:58.090 --> 00:06:01.940
I want this matrix to be an n by M matrix.
82

83
00:06:01.960 --> 00:06:05.580
And so let's see what this thing looks like.
83

84
00:06:05.740 --> 00:06:06.050
All right.
84

85
00:06:06.070 --> 00:06:07.600
So this is a matrix.
85

86
00:06:07.630 --> 00:06:10.750
It looks plausibly like it's 10 by 15.
86

87
00:06:11.500 --> 00:06:13.260
However these are all zeros.
87

88
00:06:13.270 --> 00:06:18.670
That's no surprise because I used the function zeros, but the instructions pretty clearly said that
88

89
00:06:18.760 --> 00:06:22.480
every element should be equal to ninety nine.
89

90
00:06:22.510 --> 00:06:31.090
Now there is no function numpy dot ninety nine, nor is there a function nine nine like this.
90

91
00:06:31.660 --> 00:06:34.600
Nor for that matter is there a German function
91

92
00:06:34.600 --> 00:06:35.840
nein nein ;)
92

93
00:06:35.950 --> 00:06:36.210
Okay.
93

94
00:06:36.220 --> 00:06:38.290
So we have numpy dot zeros.
94

95
00:06:38.290 --> 00:06:45.860
So basically what I'm gonna do is just say plus ninety nine. And now we get a matrix full of ninety nines.
95

96
00:06:46.690 --> 00:06:47.020
All right.
96

97
00:06:47.050 --> 00:06:49.810
So that completes that part.
97

98
00:06:49.810 --> 00:06:57.310
And now what we need to do is write a double for loop and populate each element or define each element
98

99
00:06:57.340 --> 00:07:04.450
of this matrix to be the greatest common denominator between the row index and the column index.
99

100
00:07:04.510 --> 00:07:17.650
So let's say for i in range 0 to n and for j in range 0 to M. And actually, I'm going to change this.
100

101
00:07:17.650 --> 00:07:22.960
This is going to be the row index and this is going to be the column index.
101

102
00:07:23.970 --> 00:07:24.650
Okay.
102

103
00:07:24.790 --> 00:07:28.440
These variable names are a little bit better than i and j,
103

104
00:07:28.440 --> 00:07:32.320
Because they tell us about what we are using these variables for.
104

105
00:07:32.320 --> 00:07:34.060
So they're a little bit more informative.
105

106
00:07:34.870 --> 00:07:46.000
So G C D mat and then we want the row i and the col i-th column equals math dot greatest common
106

107
00:07:46.060 --> 00:07:56.190
denominator between row i plus one and col i plus 1.
107

108
00:07:56.230 --> 00:07:58.120
All right so let's see.
108

109
00:07:58.180 --> 00:07:58.440
Okay.
109

110
00:07:58.450 --> 00:08:03.850
So I ran this cell and we got no errors but also nothing printed out. It'd be nice to have a look
110

111
00:08:03.850 --> 00:08:04.610
at this.
111

112
00:08:04.780 --> 00:08:11.910
Now you saw that this didn't really look so good.
112

113
00:08:11.980 --> 00:08:19.390
Actually, now it looks better that we don't have ninety nines in it. But still, I'm going to use the display math
113

114
00:08:19.450 --> 00:08:22.270
functions to make this look a little bit nicer.
114

115
00:08:22.330 --> 00:08:32.740
So we need to convert this into latex. sym dot latex is expecting a sympy object as an input. So therefore
115

116
00:08:32.740 --> 00:08:44.670
we need to use sympify to convert this matrix from a numpy array into a sympy object.
116

117
00:08:44.710 --> 00:08:46.620
This is starting to look good.
117

118
00:08:47.020 --> 00:08:50.220
Now all the ninety nines went away of course, but that's no big deal.
118

119
00:08:50.290 --> 00:08:56.500
In fact the only reason why I made this part of the assignment is just to illustrate to you how to initialize
119

120
00:08:56.500 --> 00:09:02.890
a matrix that is not only zeros or only ones, because there's a corresponding function called ones.
120

121
00:09:03.010 --> 00:09:07.750
So it's kind of an interesting function. If you look down this diagonal here you'll see it goes zero
121

122
00:09:07.780 --> 00:09:10.750
and then two three four five six seven eight nine ten.
122

123
00:09:10.960 --> 00:09:16.040
And then there's a lot of ones around here and there's some other numbers like twos and threes and fours.
123

124
00:09:16.060 --> 00:09:24.640
In fact if you make an image of this matrix then it has a pretty interesting visual appearance.
124

125
00:09:24.670 --> 00:09:30.850
Now I haven't yet told you how to make images out of matrices but don't worry that's coming up in the
125

126
00:09:30.850 --> 00:09:38.260
later part of the course; you will be able to convert a matrix like this into a picture.
126

127
00:09:38.290 --> 00:09:38.640
All right.
127

128
00:09:38.650 --> 00:09:44.620
So in this and the previous videos you gained some more experience with the greatest common denominator
128

129
00:09:44.920 --> 00:09:52.450
as well as working with matrices and populating matrices with the results of mathematical formulas.
