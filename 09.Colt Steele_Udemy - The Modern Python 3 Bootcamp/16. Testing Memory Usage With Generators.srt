1
00:00:00,280 --> 00:00:05,070
OK next I'm just going to do a quick demonstration of where a generator excels.

2
00:00:05,430 --> 00:00:08,670
So a classic example is working with Fibonacci numbers.

3
00:00:08,820 --> 00:00:13,230
If you're not familiar with the Fibonacci sequence you can write out the first few.

4
00:00:13,350 --> 00:00:18,760
What do we have here 2 3 5 8 13.

5
00:00:18,780 --> 00:00:19,200
OK.

6
00:00:19,290 --> 00:00:23,090
So know it always starts with one and one I believe.

7
00:00:23,370 --> 00:00:27,750
And you basically to get the next number in the sequence you add together the previous two.

8
00:00:27,900 --> 00:00:35,070
So one and one gives us 2 to 1 gives us 3 3 and 2 5 5 and 3 8 in 5 13.

9
00:00:35,070 --> 00:00:39,700
Keep going these numbers grow pretty quickly and to keep calculating them.

10
00:00:39,780 --> 00:00:42,560
We could use a regular old function.

11
00:00:42,570 --> 00:00:48,220
Let's say I want to generate the first one million with the example or actually what I have down here.

12
00:00:48,570 --> 00:00:49,750
What does this count right here.

13
00:00:49,800 --> 00:00:50,810
Yeah this is a million.

14
00:00:51,000 --> 00:00:56,310
I want to get the first one million without using a generator or any iterator.

15
00:00:56,450 --> 00:00:57,560
It doesn't have to be a generator.

16
00:00:57,570 --> 00:01:02,890
But without using anything just using a regular function I would need to put them in a list here or

17
00:01:02,900 --> 00:01:04,440
I have a list called Nom's.

18
00:01:04,500 --> 00:01:07,100
I have two variables a zero B is one.

19
00:01:07,470 --> 00:01:10,490
And then I guess the first number is zero in the sequence.

20
00:01:10,630 --> 00:01:11,650
Oh well.

21
00:01:12,000 --> 00:01:15,770
And then while the length of that list is less than the max.

22
00:01:15,780 --> 00:01:22,240
So while there are less than 1 million numbers in in the list we're going to append B.

23
00:01:22,280 --> 00:01:28,180
It will start by adding 1 and then we're going to swap the numbers so a is now equal to be.

24
00:01:28,290 --> 00:01:32,950
So is now 1 and then B is equal to A plus B which is a plus 1 which is 1.

25
00:01:33,060 --> 00:01:40,480
But next time around it now you know ads and B together to get to and then keeps going and keeps going.

26
00:01:40,630 --> 00:01:42,150
So hopefully you can see how this works.

27
00:01:42,150 --> 00:01:47,920
If not it's not necessarily the focus of this video anyway but just to show you that it does work.

28
00:01:48,000 --> 00:01:55,740
We could do something like print fib list of 10 and this will give us 10 numbers.

29
00:01:55,740 --> 00:02:00,800
So it's not up to 10 like you know the highest Fibonacci number below 10.

30
00:02:00,840 --> 00:02:04,510
It is a 10 number in the sequence and if we run it.

31
00:02:04,730 --> 00:02:05,000
OK.

32
00:02:05,010 --> 00:02:05,740
So there we go.

33
00:02:05,760 --> 00:02:06,790
We're getting the data back.

34
00:02:06,790 --> 00:02:07,870
It's in a list.

35
00:02:07,950 --> 00:02:12,810
We don't really have any other option if we're using a regular old function because we have to keep

36
00:02:12,810 --> 00:02:17,310
track of what came before and to get to the millionth Fibonacci number.

37
00:02:17,310 --> 00:02:20,060
We have to have every number before that one.

38
00:02:20,130 --> 00:02:23,110
So the list starts to grow really really long.

39
00:02:23,370 --> 00:02:28,800
And if I were to do something like $1 million we don't even have to print it let's just say I want to

40
00:02:29,190 --> 00:02:31,240
generate it.

41
00:02:31,780 --> 00:02:32,850
How many zeros again.

42
00:02:32,880 --> 00:02:34,540
All right here's one million.

43
00:02:34,680 --> 00:02:37,300
So this will give me the first one million Fibonacci numbers.

44
00:02:37,350 --> 00:02:42,660
I'm going to run it and then I'm going to cut over to my computer's activity monitor on my Mac and we'll

45
00:02:42,660 --> 00:02:46,200
take a look at how much memory is being used.

46
00:02:47,010 --> 00:02:48,660
OK you started it.

47
00:02:48,660 --> 00:02:52,000
Now I did a search for Python over here and my activity monitor.

48
00:02:52,050 --> 00:02:55,440
If we open it up we can see what it's saying.

49
00:02:55,440 --> 00:02:59,030
Real memory size 503 megabytes.

50
00:02:59,570 --> 00:03:00,310
OK.

51
00:03:00,600 --> 00:03:05,310
And I think I'm going to stop this process because my computer is not very happy when I'm recording

52
00:03:05,310 --> 00:03:08,890
a video and running a script like this.

53
00:03:09,020 --> 00:03:09,740
So I'm going to stop it.

54
00:03:09,750 --> 00:03:13,040
But 490 megabytes a big number.

55
00:03:13,080 --> 00:03:13,960
You can see.

56
00:03:14,250 --> 00:03:16,370
And that's just the real memory size.

57
00:03:16,520 --> 00:03:17,970
But let's just focus on that.

58
00:03:18,210 --> 00:03:19,140
OK.

59
00:03:19,140 --> 00:03:26,310
Now down here I have a generator that does the same thing and that it generates the Fibonacci sequence.

60
00:03:26,340 --> 00:03:27,500
But all that it does.

61
00:03:27,510 --> 00:03:32,850
So we have X and Y and sort of a and b started 0 and 1 and then I have a count instead of using the

62
00:03:32,850 --> 00:03:34,070
length of the list.

63
00:03:34,080 --> 00:03:35,920
There is no list with the generator.

64
00:03:35,970 --> 00:03:36,920
So it's just a counter.

65
00:03:37,020 --> 00:03:39,730
Starts at zero while the counter is less than the max.

66
00:03:39,750 --> 00:03:44,970
While it's less than a million each time we add one to count and then all we do is the exact same thing

67
00:03:44,970 --> 00:03:52,620
where we have X and Y and we assign the value of Y to X and then we update Y to be exposed Y and then

68
00:03:52,620 --> 00:03:53,960
we yield x.

69
00:03:54,090 --> 00:04:07,250
And so if we did something simple like 4 and 5 Jan for 10 if we print and we get 1 2 3 4 5 6 7 8 9 10

70
00:04:07,260 --> 00:04:08,770
first 10 Fibonacci numbers.

71
00:04:08,970 --> 00:04:09,690
OK.

72
00:04:09,930 --> 00:04:12,080
So the difference of course just like our last video.

73
00:04:12,090 --> 00:04:13,340
They're not in the list.

74
00:04:13,380 --> 00:04:18,900
We're just getting one at a time and it's not storing however many analysts at the same time from trying

75
00:04:18,900 --> 00:04:20,650
to get the millionth Fibonacci number.

76
00:04:20,670 --> 00:04:25,950
It's not storing all nine hundred ninety nine thousand nine hundred ninety nine numbers before before

77
00:04:25,950 --> 00:04:26,090
it.

78
00:04:26,100 --> 00:04:28,070
And we're just getting the current one.

79
00:04:28,620 --> 00:04:30,740
So if I do this instead.

80
00:04:30,880 --> 00:04:33,210
See I think I need another zero.

81
00:04:33,900 --> 00:04:34,560
There we go.

82
00:04:34,650 --> 00:04:39,370
1 million using the Fibonacci generator instead of the list.

83
00:04:39,740 --> 00:04:43,370
I run it cut to my activity monitor.

84
00:04:43,670 --> 00:04:46,740
Take a look 6.7 megabytes.

85
00:04:47,070 --> 00:04:56,670
Serious very drastic difference 6.7 compared to how many hundred megabytes it was for the last version.

86
00:04:56,750 --> 00:04:59,460
And I'm actually printing it here as well.

87
00:04:59,510 --> 00:05:05,120
So in the other example I wasn't although that shouldn't have a massive difference on memory should

88
00:05:05,150 --> 00:05:06,140
more be about time.

89
00:05:06,140 --> 00:05:10,250
But anyway that's kind of a cool example.

90
00:05:10,250 --> 00:05:12,930
This looks cool but I'm worried about having a seizure.

91
00:05:14,330 --> 00:05:16,670
Hopefully my point here is clear.

92
00:05:16,880 --> 00:05:17,220
So I'm not.

93
00:05:17,330 --> 00:05:22,910
The point is not that lists are slower because oftentimes using a generator actually will be slower

94
00:05:23,150 --> 00:05:30,350
than the alternative but instead a generator is easier on memory especially if you're dealing with really

95
00:05:30,350 --> 00:05:35,550
large sequences are things that if you stored in a list the list would grow massive.

96
00:05:35,630 --> 00:05:40,100
And when I say big I'm not talking about a thousand or a couple thousand results I'm talking hundreds

97
00:05:40,100 --> 00:05:42,370
or thousands or millions of data points.

98
00:05:42,410 --> 00:05:45,010
Things grow really really large when you use bursts.

99
00:05:45,080 --> 00:05:48,750
But if you instead use a generator the difference can be significant.

100
00:05:48,830 --> 00:05:52,810
Again not in time necessarily but in memory.

101
00:05:53,120 --> 00:05:54,230
That wraps this up.

102
00:05:54,230 --> 00:05:57,680
The last thing about generators will show you is called generator expressions.

103
00:05:57,710 --> 00:05:58,560
Quick and easy.

104
00:05:58,610 --> 00:05:59,180
See you then.
