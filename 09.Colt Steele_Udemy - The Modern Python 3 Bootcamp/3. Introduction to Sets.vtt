WEBVTT
1
00:00:00.180 --> 00:00:01.280
Hey welcome back.

2
00:00:01.320 --> 00:00:02.100
It's me again.

3
00:00:02.130 --> 00:00:04.170
And we're moving on from tuples.

4
00:00:04.500 --> 00:00:05.940
It's nice and easy hopefully.

5
00:00:06.000 --> 00:00:11.550
Now we're talking about sex and I want to be clear that these are not you know a pair that are commonly

6
00:00:11.550 --> 00:00:12.530
used together.

7
00:00:12.540 --> 00:00:16.680
They don't really have much to do with one another other than the fact that they are collections of

8
00:00:16.680 --> 00:00:21.320
data and they're lighter weight than a dictionary or than a list.

9
00:00:21.450 --> 00:00:21.720
OK.

10
00:00:21.750 --> 00:00:24.860
So let's begin what is a set in Python.

11
00:00:25.290 --> 00:00:27.550
Sets are like formal mathematical sets.

12
00:00:27.720 --> 00:00:33.000
So that might mean something to you depending on how far you've gotten math or like me how much you

13
00:00:33.000 --> 00:00:33.760
remember.

14
00:00:33.840 --> 00:00:38.910
There was a time I was working with sets and set notation but I kind of don't remember most of it but

15
00:00:38.910 --> 00:00:44.610
that's OK if you don't have that experience or you don't remember it sets are a collection of data that

16
00:00:44.610 --> 00:00:47.070
do not have duplicate values.

17
00:00:47.070 --> 00:00:47.780
OK.

18
00:00:48.120 --> 00:00:49.840
And there is no order.

19
00:00:49.860 --> 00:00:55.470
So think of it as just a group of items or a group of whatever numbers or strings or whatever that data

20
00:00:55.470 --> 00:00:55.950
type is.

21
00:00:55.950 --> 00:00:58.650
It's just a group of them and it's unique.

22
00:00:58.650 --> 00:01:01.520
Every item in there is unique and there is no order.

23
00:01:01.530 --> 00:01:07.090
Another thing to know you cannot access items in a set by the index because there is no order.

24
00:01:07.110 --> 00:01:13.350
So unlike a list or a tuple you can't use an index they're just floating around in their free form.

25
00:01:13.350 --> 00:01:18.660
So it's sort of in a way it's like a combination between a dictionary and a list because they're not

26
00:01:18.660 --> 00:01:19.890
key value pairs.

27
00:01:20.070 --> 00:01:24.340
So that's more like a list but there's no order which is more like a dictionary.

28
00:01:24.420 --> 00:01:25.670
So sets are useful.

29
00:01:25.680 --> 00:01:30.480
They can be useful if you need to keep track of a collection of elements but you don't care about ordering

30
00:01:30.660 --> 00:01:36.130
keys or values and you don't care about duplicates or if you do care that there aren't duplicates.

31
00:01:36.180 --> 00:01:37.580
It's a better way of putting it.

32
00:01:37.590 --> 00:01:40.860
So let's just look at how you write one first.

33
00:01:41.070 --> 00:01:44.480
So we use the curly braces that we use for dictionaries.

34
00:01:44.850 --> 00:01:48.250
And here let me show you here's a simple example right here.

35
00:01:48.330 --> 00:01:51.840
S equals the set 1 4 5.

36
00:01:52.230 --> 00:01:55.630
So we use curly braces and put in whatever numbers we want.

37
00:01:55.650 --> 00:02:01.110
We don't use the colon syntax to assign key and values like we would with a dictionary.

38
00:02:01.500 --> 00:02:02.570
And that's how Python knows.

39
00:02:02.580 --> 00:02:04.170
It's just a set.

40
00:02:04.200 --> 00:02:10.750
We can also use the set function that Python gives us just like there's a dict that we could use or

41
00:02:10.750 --> 00:02:14.960
a list and so on we pass in whatever we want to be in the set.

42
00:02:15.420 --> 00:02:20.250
And notice that if we pass in a set with duplicates here there are three fives.

43
00:02:20.280 --> 00:02:23.510
What we actually get back only contains 1 5.

44
00:02:23.700 --> 00:02:27.760
So remember there is no order there's an order you know that we write them in here.

45
00:02:27.810 --> 00:02:34.230
But as far as Python is concerned there isn't a rigid order and so we can't access things using an index.

46
00:02:34.230 --> 00:02:35.580
So if we tried to do.

47
00:02:35.640 --> 00:02:36.750
Well first let me just show you.

48
00:02:36.750 --> 00:02:43.020
If we add in another four and another five and I hit enter and then look at s it just contains 1 4 and

49
00:02:43.020 --> 00:02:43.440
5.

50
00:02:43.440 --> 00:02:50.640
So they have to be unique but then also if I tried to do something like s of 0 I get an error set object

51
00:02:50.640 --> 00:02:52.260
does not support indexing.

52
00:02:52.620 --> 00:02:54.050
So that's not a thing.

53
00:02:54.330 --> 00:02:58.800
But what we can do is test if a given element is in a set.

54
00:02:58.830 --> 00:03:06.730
So I can say is for in S which is true is the letter H in S.

55
00:03:06.840 --> 00:03:07.650
That's false.

56
00:03:07.650 --> 00:03:12.850
Also I should point out we're not limited just to uniform collections of sets of numbers.

57
00:03:12.930 --> 00:03:14.600
I could put some letters in there.

58
00:03:14.820 --> 00:03:15.930
Let's put it in a float.

59
00:03:15.930 --> 00:03:18.650
Twenty three point three three three four just like that.

60
00:03:18.720 --> 00:03:23.040
And if we look at s now it contains all of these because they are unique.

61
00:03:23.190 --> 00:03:26.780
And also notice right away actually the order has changed.

62
00:03:26.970 --> 00:03:29.240
So it went to 1 a 4:5 B.

63
00:03:29.330 --> 00:03:31.400
Twenty three point three three three four.

64
00:03:31.620 --> 00:03:37.860
And I actually don't know what is governing that how this order is decided because I assume if we look

65
00:03:37.980 --> 00:03:42.540
every time we look at s that order will be the same even though it's not guaranteed to be the same.

66
00:03:42.540 --> 00:03:44.230
So again don't count on the order.

67
00:03:44.250 --> 00:03:48.780
There is no order and actually there is no way of even if there wasn't order there is no way of referencing

68
00:03:48.780 --> 00:03:50.270
items using an order.

69
00:03:50.280 --> 00:03:56.880
So all of us say it's totally an ordered gelatinous blob of data in their unique data.

70
00:03:56.880 --> 00:04:03.330
So we could tell if an individual item is in a set using in and we can access all the values in a set

71
00:04:03.540 --> 00:04:05.110
using a good old for loop.

72
00:04:05.170 --> 00:04:08.890
So just looks like this exactly what we've seen before.

73
00:04:08.940 --> 00:04:16.320
Just like with a list of four or whatever you know variable name in a set do something for each item.

74
00:04:16.620 --> 00:04:17.770
So we could do this here.

75
00:04:17.790 --> 00:04:26.500
We have X so we could do a 4 thing in S and we could just do print s or.

76
00:04:26.520 --> 00:04:28.370
Well not s print thing.

77
00:04:28.380 --> 00:04:34.320
There we go and ever go we get 1 A for B for 5 B twenty three point three three three four.

78
00:04:34.650 --> 00:04:34.950
OK.

79
00:04:34.950 --> 00:04:40.260
Changing gears for just a moment I want to show a common use case for sets.

80
00:04:40.260 --> 00:04:43.700
So imagine we have a list that has some duplicate data in it.

81
00:04:43.740 --> 00:04:50.130
So maybe this list called Cities represents all of the cities where maybe let's say we're holding a

82
00:04:50.130 --> 00:04:54.350
conference conference on Python and people register from all over the world.

83
00:04:54.360 --> 00:05:00.730
And I want to be able to say hey we have you know people coming from different cities or 10 different

84
00:05:00.730 --> 00:05:02.250
cities or whatever it is.

85
00:05:02.260 --> 00:05:08.170
So I have a list full of the cities generated from you know our sign up form when people register they

86
00:05:08.170 --> 00:05:12.520
specify their city and I want to distill it down to uniques.

87
00:05:12.580 --> 00:05:15.980
So we have you know Los Angeles is a couple times.

88
00:05:16.040 --> 00:05:19.580
Same thing with what else Tokyo is in here more than once.

89
00:05:19.780 --> 00:05:21.890
And boulders in here a couple of times.

90
00:05:21.910 --> 00:05:26.830
So we just want to get a feel for exactly how many unique items there are in this list.

91
00:05:26.830 --> 00:05:33.880
So if we just convert it to a set by doing you know set of cities and let's just start by printing that

92
00:05:33.880 --> 00:05:41.640
out and if we go to my terminal and run this file you can see what we get is a unique set.

93
00:05:41.650 --> 00:05:46.930
So Los Angeles foreigns Boulder Oslo Tokyo Santiago Kioto San Francisco Shanghai.

94
00:05:47.020 --> 00:05:50.780
And there are no duplicates anymore but we're still working with a set.

95
00:05:50.800 --> 00:05:52.080
And we want a list.

96
00:05:52.150 --> 00:05:59.340
So then we can just turn it back into a list just like this and to have it see I think I'm missing a

97
00:05:59.350 --> 00:05:59.740
person.

98
00:05:59.740 --> 00:06:02.160
There we go and let's try running it.

99
00:06:02.460 --> 00:06:08.350
And this time we saw the same number of cities the same cities are here but we're able to distill it

100
00:06:08.350 --> 00:06:11.230
down to a list full of unique cities only.

101
00:06:11.410 --> 00:06:18.550
Or if I just wanted to know how many unique cities there were I could just do print Lenn cities as a

102
00:06:18.550 --> 00:06:23.930
set like this that Rico.

103
00:06:24.430 --> 00:06:27.650
So we're just turning into a set and then printing the length of that.

104
00:06:27.670 --> 00:06:30.830
And if we run that there are nine unique cities.

105
00:06:31.030 --> 00:06:37.480
So that's just a common use case for sets is to take a list and just return a version or a set of that

106
00:06:37.480 --> 00:06:43.020
list containing uniques and then we can convert that back to a list again if we want a list version.

107
00:06:43.190 --> 00:06:45.030
OK we'll leave the video with that for now.

108
00:06:45.040 --> 00:06:48.610
There are a couple of methods we'll talk about with sets in the next video.

109
00:06:48.610 --> 00:06:49.340
See you then.
