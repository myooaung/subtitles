WEBVTT
1
00:00:00.190 --> 00:00:00.520
Pay.

2
00:00:00.540 --> 00:00:01.470
Welcome back.

3
00:00:01.470 --> 00:00:06.090
So we're picking up where we left off by talking about cursors and more importantly we're going to see

4
00:00:06.090 --> 00:00:07.990
how we can move the cursor around.

5
00:00:08.160 --> 00:00:11.450
So we hit the end of the file last time and we tried to read again.

6
00:00:11.490 --> 00:00:12.270
We couldn't move.

7
00:00:12.270 --> 00:00:13.140
We couldn't get anything.

8
00:00:13.170 --> 00:00:17.910
At the end of the file so we can show you how to move the cursor to the beginning or the middle or wherever

9
00:00:17.910 --> 00:00:23.730
you want and I'm going to show you a couple of other additional probably more helpful methods for the

10
00:00:23.730 --> 00:00:29.790
first thing I'll show is a method called seek so seek is how we can manipulate the position of the cursor

11
00:00:29.880 --> 00:00:34.130
how we can reset it to the beginning or the tenth character whatever we want.

12
00:00:34.410 --> 00:00:38.520
So we'll do the same file equals open and we call it file instead of f..

13
00:00:38.660 --> 00:00:40.470
So a little bit better story.

14
00:00:42.440 --> 00:00:43.590
I haven't changed the story.

15
00:00:43.620 --> 00:00:47.030
So file that read We get the same thing I read again.

16
00:00:47.100 --> 00:00:49.190
We're at the end so I don't get anything.

17
00:00:49.830 --> 00:00:53.280
But I'm now going to update the file one second.

18
00:00:53.340 --> 00:00:54.230
There we go.

19
00:00:54.360 --> 00:00:55.940
This short story is really short.

20
00:00:55.950 --> 00:01:00.200
Now it's a little longer the end let me delete this line at the end.

21
00:01:00.350 --> 00:01:00.850
OK.

22
00:01:00.960 --> 00:01:06.260
Now if I save this file I'm using this as an opportunity to show you the behavior here.

23
00:01:06.450 --> 00:01:14.220
File itself doesn't really look like anything changed but this is interesting and somewhat counterintuitive

24
00:01:14.220 --> 00:01:20.070
to how a lot of people think that files work and how when you read in a file a lot of people think that

25
00:01:20.070 --> 00:01:21.200
it's a one time thing.

26
00:01:21.330 --> 00:01:25.200
You don't actually have to open the file again to get the new changes.

27
00:01:25.210 --> 00:01:30.480
There is a connection open between Python and the story that text file.

28
00:01:30.540 --> 00:01:31.610
Like a little tube.

29
00:01:31.860 --> 00:01:34.380
And so a change just occurred.

30
00:01:34.380 --> 00:01:36.460
The cursor is at the same spot.

31
00:01:36.660 --> 00:01:42.720
So I said the cursor was at the end of the file which is true or it was true for let's say wherever

32
00:01:42.720 --> 00:01:43.930
that was.

33
00:01:44.370 --> 00:01:45.060
Right.

34
00:01:45.060 --> 00:01:45.630
Where was it.

35
00:01:45.720 --> 00:01:46.960
We were like right here.

36
00:01:47.010 --> 00:01:48.700
That was the end of the file.

37
00:01:49.020 --> 00:01:52.720
But now we added these other lines and the cursor is still here in Python.

38
00:01:53.010 --> 00:01:54.740
So it's not like a sublime thing.

39
00:01:54.840 --> 00:01:58.480
The Python cursor is here and we just added this text and saved.

40
00:01:58.650 --> 00:02:04.200
So now if I read again it's just going to read from there forward down to here.

41
00:02:04.680 --> 00:02:08.810
So if I do that file that read we get.

42
00:02:08.890 --> 00:02:14.670
Now it's a little longer and I think what did I do I think the cursor was here.

43
00:02:14.670 --> 00:02:16.280
There was a newline character.

44
00:02:16.590 --> 00:02:19.350
But the point here is that I made the file I opened it.

45
00:02:19.350 --> 00:02:22.040
Then I made a change and I didn't have to reopen it.

46
00:02:22.140 --> 00:02:27.840
I just read it again and you can see there's this pipeline between us between the file and Python.

47
00:02:28.050 --> 00:02:28.290
OK.

48
00:02:28.320 --> 00:02:34.050
So seek allows me to do things like right now I'm at the very end of the file if I did file but read

49
00:02:34.050 --> 00:02:44.270
again or five you'll read if I call seek and seek zero will move the cursor to the beginning.

50
00:02:44.700 --> 00:02:53.090
So now if I do file that read I get the entire story if I do so file but read again cursors at the end

51
00:02:53.430 --> 00:03:02.640
so I can do seek and I can pass in a number like one which will take me to the first the first index

52
00:03:02.700 --> 00:03:10.570
first character and if I do a file that read We should get his short story just like that.

53
00:03:11.000 --> 00:03:12.660
And now we're at the very end again.

54
00:03:12.770 --> 00:03:16.170
So file that read once again is empty.

55
00:03:16.280 --> 00:03:21.700
So I could speak to the fiftieth character and do a file read.

56
00:03:22.450 --> 00:03:23.840
And this is all that was left.

57
00:03:24.110 --> 00:03:25.500
OK so that seek.

58
00:03:25.510 --> 00:03:27.480
Next I'm going to show you another method.

59
00:03:27.550 --> 00:03:29.230
This one is called read mine.

60
00:03:29.290 --> 00:03:33.020
So I'm going to reset this file to go back to the beginning.

61
00:03:33.430 --> 00:03:33.890
OK.

62
00:03:34.030 --> 00:03:38.420
So my cursor is at the beginning and if I did a file by read it gives me the entire file.

63
00:03:38.720 --> 00:03:44.400
But oftentimes I would say we're working with I don't know $100000 might be a bit much.

64
00:03:44.500 --> 00:03:48.310
Twenty thousand lines in a file we could read it all at once.

65
00:03:48.340 --> 00:03:52.670
But other times you want things in chunks or maybe just a single line at a time.

66
00:03:52.870 --> 00:03:59.650
So we can do that with the file read line like this and this will basically read the first line it stops

67
00:03:59.650 --> 00:04:03.980
when it hits the new line character right here.

68
00:04:04.000 --> 00:04:05.990
And so that's what we get the first line.

69
00:04:06.230 --> 00:04:12.680
And now if I did a file that read my cursor has been moved to the second line in the beginning of the

70
00:04:12.680 --> 00:04:13.630
second line.

71
00:04:13.700 --> 00:04:21.050
So we get those second two lines and I could reset it do find that read line and I can read another

72
00:04:21.050 --> 00:04:21.620
line.

73
00:04:21.620 --> 00:04:23.950
Now my cursor is at the beginning of the third line.

74
00:04:24.260 --> 00:04:30.260
So I read another line and we get the last line and I do file the read line one more time and we're

75
00:04:30.260 --> 00:04:30.720
done.

76
00:04:31.690 --> 00:04:34.790
And the last method I'll show you is called read lines.

77
00:04:34.790 --> 00:04:41.210
And if we just look at file access to help file and I'll scroll through a fast forward through this

78
00:04:41.690 --> 00:04:45.460
area or read lines it returns a list of lines.

79
00:04:45.620 --> 00:04:51.460
So unlike read which just gives you everything and read vine which goes gives you one line to time read

80
00:04:51.550 --> 00:04:52.880
and gives you all the lines.

81
00:04:53.060 --> 00:04:58.750
But it preserves them as separate lines instead of one giant string and it puts them in a list.

82
00:04:59.090 --> 00:04:59.600
OK.

83
00:05:00.020 --> 00:05:08.910
So if we try that if we do a file that seek back to the beginning and now I do file that read lines

84
00:05:10.360 --> 00:05:12.950
I get this list and it preserves those lines.

85
00:05:12.950 --> 00:05:19.440
So each one of these would be like running file read line and you guessed it my cursor.

86
00:05:19.730 --> 00:05:20.740
So at the very end.

87
00:05:21.010 --> 00:05:23.130
So it moves us all the way through.

88
00:05:23.200 --> 00:05:26.140
It just happens to put them all instead of a list.

89
00:05:26.140 --> 00:05:26.560
OK.

90
00:05:26.680 --> 00:05:32.100
So at this point we've seen how to read individual lines read all lines and move the cursor around.

91
00:05:32.170 --> 00:05:37.480
And we've also seen that until I manually closed the file any changes they make in here.

92
00:05:37.480 --> 00:05:43.380
Whatever I'd do if I save and I do a file but read again those changes are in there.

93
00:05:43.630 --> 00:05:45.020
So this connection is open.

94
00:05:45.070 --> 00:05:47.870
So it's important for us to actually close files.

95
00:05:48.100 --> 00:05:51.840
So it seems like you know anything else in Python would make a variable or a list.

96
00:05:51.910 --> 00:05:56.130
If we're done using it we don't have to close it or do anything to it.

97
00:05:56.200 --> 00:05:57.540
Python just takes care of it.

98
00:05:57.640 --> 00:06:03.190
But with these files it's actually important that we manually close them basically just so we don't

99
00:06:03.190 --> 00:06:04.700
use up system resources.

100
00:06:04.780 --> 00:06:08.450
So the way we do it is using the file close method.

101
00:06:08.620 --> 00:06:14.720
So we just code close and you can also check if a file is closed or not using the closed attribute.

102
00:06:14.980 --> 00:06:20.290
And I should mention once you do close the file it can't be read again until you reopen it.

103
00:06:20.350 --> 00:06:22.870
Basically start the whole process over.

104
00:06:22.920 --> 00:06:27.070
So let's go back here and we're at the end it doesn't really matter.

105
00:06:27.340 --> 00:06:32.610
But let's say I'm done you know I've imported the contents of the file and now I'm ready to do something

106
00:06:32.610 --> 00:06:35.220
with them and I'm not going to write to the file.

107
00:06:35.220 --> 00:06:40.170
And we should do a file that close and before that I mean just run a file but closed.

108
00:06:40.400 --> 00:06:42.720
You can see the property is false.

109
00:06:43.140 --> 00:06:51.450
But now if I file that close method if I look at file that closed now it is true.

110
00:06:51.450 --> 00:06:57.300
So if I try and do a read we get this error value error IO operation on close file.

111
00:06:57.300 --> 00:07:02.260
You can do that same thing if I try and seek or any of the other things I've shown you so far.

112
00:07:02.460 --> 00:07:08.340
So we want to close the file and if we needed the data back we messed up and I need that story that

113
00:07:08.380 --> 00:07:08.820
text.

114
00:07:08.850 --> 00:07:10.210
I just reopen it.

115
00:07:10.420 --> 00:07:10.690
OK.

116
00:07:10.710 --> 00:07:11.560
So to recap.

117
00:07:11.600 --> 00:07:17.220
Had to open a file we saw how to read it talked about cursors we saw do you seek to move the cursor

118
00:07:17.640 --> 00:07:19.110
usually back to the beginning.

119
00:07:19.100 --> 00:07:25.170
So how to use read line to get an individual line and read lines to get all lines in a list and then

120
00:07:25.170 --> 00:07:27.320
also we saw how to close a file.

121
00:07:27.360 --> 00:07:28.470
And that's important.

122
00:07:28.470 --> 00:07:31.170
You need to always close those files whenever you're done.

123
00:07:31.170 --> 00:07:32.000
Close it.

124
00:07:32.220 --> 00:07:32.750
OK.

125
00:07:33.030 --> 00:07:38.400
Moving on we're now going to talk about in the next video an alternate syntax that most people prefer

126
00:07:38.490 --> 00:07:39.550
for working with files.
