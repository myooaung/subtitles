1
00:00:00,390 --> 00:00:00,990
All right.

2
00:00:00,990 --> 00:00:03,270
Time for another exercise here.

3
00:00:03,300 --> 00:00:05,850
This is just a note to myself Here we go.

4
00:00:05,940 --> 00:00:11,730
This exercise is going to combine for loops and ranges along with a little bit of conditional logic

5
00:00:11,910 --> 00:00:14,130
so it's more complex than what we just did.

6
00:00:14,130 --> 00:00:16,220
So the idea is that you're going to loop through.

7
00:00:16,410 --> 00:00:17,470
Why do I do this.

8
00:00:17,670 --> 00:00:20,430
I don't know why I put that on the separate that might be an accident.

9
00:00:20,490 --> 00:00:25,750
Anyway you're going to loop through the numbers one through 20 and for each I should mention it's inclusive.

10
00:00:25,920 --> 00:00:32,100
So it includes 20 and 1 and you get to loop through them and you're going to go through each and if

11
00:00:32,100 --> 00:00:37,740
the number is four or the number is 13 you're going to print X is unlucky.

12
00:00:38,190 --> 00:00:44,660
So 13 at least in the U.S. is considered unlucky and an 0 4 is unlucky in Chinese culture.

13
00:00:44,700 --> 00:00:50,920
So if there's another number in your culture between 1 and 20 percent x is unlucky for it.

14
00:00:51,210 --> 00:00:57,870
And if the numbers even print X even if numbers odd print X is odd So the results would look like this

15
00:00:58,230 --> 00:01:04,250
one is odd to is even three is odd for as I'm lucky you don't have to do all caps five is odd six and

16
00:01:04,260 --> 00:01:11,110
even so on 13 is unlucky down to 20 is even and we only do one thing for each number.

17
00:01:11,130 --> 00:01:18,800
So you know four is both unlucky and even but we only printout out unlucky we don't pronounce even part.

18
00:01:19,140 --> 00:01:22,700
OK so give it a shot the numbers 1 through 20 including 20.

19
00:01:22,770 --> 00:01:24,530
I'll do another pause video.

20
00:01:24,630 --> 00:01:25,560
Where's that thing.

21
00:01:25,580 --> 00:01:27,860
Twan pause a video out there we go.

22
00:01:27,960 --> 00:01:30,750
And in like three seconds I'll be back.

23
00:01:33,050 --> 00:01:33,730
And surprise.

24
00:01:33,750 --> 00:01:34,310
I'm back.

25
00:01:34,400 --> 00:01:39,450
So let's go ahead and make a new file this one I'll just call.

26
00:01:39,530 --> 00:01:41,050
I don't know numbers.

27
00:01:41,190 --> 00:01:41,840
Why.

28
00:01:42,080 --> 00:01:43,790
Maybe you can come up with something better.

29
00:01:44,060 --> 00:01:47,240
And we're going to start but just printing the numbers 1 through 20.

30
00:01:47,840 --> 00:01:55,350
So we're going to do for them in a range and the range that we want is from 1 to 20.

31
00:01:55,400 --> 00:01:57,520
But remember that Xclusive.

32
00:01:57,530 --> 00:01:59,300
So it doesn't include 20.

33
00:01:59,300 --> 00:02:07,690
So if we just printed numb just like this and do Python 3 numbers up why it goes from 1 to 19.

34
00:02:07,820 --> 00:02:10,750
So we need to add one here and go to 21

35
00:02:13,620 --> 00:02:16,610
and make sure that works 1 through 20.

36
00:02:16,920 --> 00:02:23,640
OK so now we're going to need to do is add a bit of conditional logic so we can start off with even

37
00:02:23,700 --> 00:02:24,380
and odd.

38
00:02:24,560 --> 00:02:31,410
And if you don't remember how to figure out if something is even in python we need to use modulo the

39
00:02:31,410 --> 00:02:32,700
percent sign.

40
00:02:32,940 --> 00:02:35,130
So that's also the remainder operator.

41
00:02:35,160 --> 00:02:38,250
So any even number like 4 or 6.

42
00:02:38,370 --> 00:02:46,670
When we mide to when we divide by 2 there should be no remainder meaning for mod 2 0.

43
00:02:46,830 --> 00:02:54,020
So whatever the number is if it's divisible by 2 that number percent 2 is going to be zero.

44
00:02:54,030 --> 00:02:55,760
So we can add a conditional.

45
00:02:55,800 --> 00:03:00,600
So if the number divided are the number divided by two has no remainder.

46
00:03:00,960 --> 00:03:02,350
That means it's even.

47
00:03:02,490 --> 00:03:16,660
So we can start with this and we'll just do print and let's do an F string numb it even and let's just

48
00:03:16,660 --> 00:03:17,590
start there.

49
00:03:17,920 --> 00:03:19,170
Make sure that that's working.

50
00:03:21,110 --> 00:03:21,420
OK.

51
00:03:21,430 --> 00:03:26,620
So we get two four six eight 10 all the way down to 20 is even none of the odds are printing out.

52
00:03:27,550 --> 00:03:34,930
So we could just add a simple else and I'll just copy this line here and replace it with odd because

53
00:03:34,960 --> 00:03:35,880
there's only one choice.

54
00:03:35,890 --> 00:03:37,670
If you're not even you're going to be odd.

55
00:03:38,100 --> 00:03:44,200
And if I do this now we get one it's odd to is even all the way down to the last thing we have to add

56
00:03:44,500 --> 00:03:49,260
is making sure that 4 and 13 are printed out as unlucky.

57
00:03:49,900 --> 00:03:56,050
And what we want to do there is basically just check is the number equal of four or is it equal to 13

58
00:03:57,340 --> 00:04:02,520
and we could we could add an elf like this and or we could do a separate statement.

59
00:04:02,650 --> 00:04:03,810
Maybe we'll start with that.

60
00:04:04,030 --> 00:04:14,110
Let's do a separate if and we'll just say if number is equal equal to 4 or is equal to what was the

61
00:04:14,110 --> 00:04:19,100
other 13 then we'll print and just copy this again.

62
00:04:19,250 --> 00:04:22,680
Numb is on life.

63
00:04:23,630 --> 00:04:26,860
And if we ran this now what do you think we'll see.

64
00:04:27,430 --> 00:04:35,620
Well what we actually get is for is even and for is unlucky or we get 13 as odd and 13 is unlucky we

65
00:04:35,620 --> 00:04:36,550
don't want that.

66
00:04:36,790 --> 00:04:42,160
So we can't have this be a separate statement and we can't put it as an elf because if we didn't.

67
00:04:42,350 --> 00:04:45,100
Elif Well we'll see what happens.

68
00:04:45,100 --> 00:04:50,070
Now let me just modify that and just pasted in.

69
00:04:50,200 --> 00:04:52,930
You can probably imagine what's going to happen.

70
00:04:52,930 --> 00:04:56,080
It will work one time but it won't work the other.

71
00:04:56,380 --> 00:04:57,870
So you can see that for four.

72
00:04:57,910 --> 00:05:01,230
We get fours even but we don't get four is unlucky.

73
00:05:01,270 --> 00:05:04,820
But for 13 we get 13 is unlucky.

74
00:05:04,930 --> 00:05:06,850
What's happening is that it's going in order.

75
00:05:06,850 --> 00:05:09,160
So the first thing it checks is the number even.

76
00:05:09,250 --> 00:05:12,760
So in the case of 4 it is even so Prince this one.

77
00:05:12,790 --> 00:05:18,290
And because these are lips and else's they don't run unless the first one is false.

78
00:05:18,520 --> 00:05:23,470
So in the case of 13 which is not even this is false then this is true.

79
00:05:23,830 --> 00:05:29,020
So what we want to do is just move this check up top and do this first.

80
00:05:29,050 --> 00:05:34,660
That's this special case that we're going to check first and then we'll check if it's even and we could

81
00:05:34,660 --> 00:05:38,470
have gone the other way around and checked for the first where.

82
00:05:38,500 --> 00:05:40,700
Now I'm mad to need to be equal to one.

83
00:05:40,750 --> 00:05:45,870
The remainder mud modding by two on an odd number is always one.

84
00:05:46,610 --> 00:05:48,500
OK let's see.

85
00:05:49,270 --> 00:05:53,000
Now we get one is odd twos even three is odd four is unlucky.

86
00:05:53,290 --> 00:05:56,620
All the way down to 13 is unlucky down to 20 is even.

87
00:05:56,620 --> 00:05:57,760
Everything looks good.

88
00:05:57,900 --> 00:05:58,200
OK.

89
00:05:58,210 --> 00:05:59,340
So we're looping through numbers.

90
00:05:59,350 --> 00:06:03,090
We had to adjust this to be 21 because it's Xclusive.

91
00:06:03,280 --> 00:06:05,330
So that's how we get one to 20.

92
00:06:05,390 --> 00:06:10,690
Also we needed to be very careful about the order we put these statements in or at least the first one

93
00:06:11,020 --> 00:06:17,070
because something like four is both unlucky and even or 13 is both unlucky and odd.

94
00:06:17,170 --> 00:06:20,140
We only want the unlucky to print out if you got this far.

95
00:06:20,140 --> 00:06:20,750
Great.

96
00:06:20,800 --> 00:06:21,610
That's a solution.

97
00:06:21,820 --> 00:06:25,950
But there's a there's a change we could make and it's really a matter of opinion.

98
00:06:25,990 --> 00:06:31,870
If you think that this is better or not but I'm going to just comment that out and duplicate this and

99
00:06:31,870 --> 00:06:36,910
the change that the thing that some people might take issue with is how we have three different print

100
00:06:36,910 --> 00:06:40,090
statements and they're basically doing the exact same thing.

101
00:06:40,180 --> 00:06:46,730
They're printing out some is and then some status or some you know state for nothing.

102
00:06:46,900 --> 00:06:48,600
So it follows the same pattern.

103
00:06:48,820 --> 00:06:56,290
So what we could do instead is just have one print statement at the end and make a variable like state

104
00:06:56,650 --> 00:06:58,400
or status or type.

105
00:06:58,790 --> 00:07:01,070
And we don't even need to declare it first.

106
00:07:01,150 --> 00:07:03,560
We could just do this.

107
00:07:03,920 --> 00:07:08,470
If numbers for numbers 13 will say state equals unlucky

108
00:07:12,170 --> 00:07:14,100
if it's even here.

109
00:07:14,120 --> 00:07:18,790
Number two is zero will say state is even.

110
00:07:18,890 --> 00:07:23,100
And then finally we'll say state is equal to odd.

111
00:07:23,370 --> 00:07:32,950
Then we'll dent the print statement and we'll edit it so that it prints that print.

112
00:07:32,950 --> 00:07:34,790
Numb is state.

113
00:07:35,090 --> 00:07:40,070
So it assigns a state variable to be either unlucky even or odd.

114
00:07:40,280 --> 00:07:47,120
And then at the end outside of the conditional still in the loop we're going to print the number three

115
00:07:47,360 --> 00:07:50,750
is state which would be odd in that case.

116
00:07:50,750 --> 00:07:55,300
And if we run this one we get the exact same result.

117
00:07:55,520 --> 00:07:57,910
So it's really a matter of opinion.

118
00:07:57,950 --> 00:08:00,820
Some people might gauge their code by how short it is.

119
00:08:00,950 --> 00:08:03,190
So in this case you know this is an extra line.

120
00:08:03,320 --> 00:08:08,370
But if you look at our print statements there so much less duplication.

121
00:08:08,390 --> 00:08:14,240
This one is kind of following a cookie cutter pattern and anytime you see that that's often a place

122
00:08:14,240 --> 00:08:17,000
where you can refactor your code make it a little bit better.

123
00:08:17,000 --> 00:08:22,310
So this is my personal preference but that doesn't mean that it's necessarily better.

124
00:08:22,310 --> 00:08:23,600
It is really a matter of opinion.

125
00:08:23,600 --> 00:08:27,440
They both work and neither of them is clumsy or hideous.

126
00:08:27,440 --> 00:08:32,910
Aside from the fact that they don't do anything useful and it's really silly exercise.

127
00:08:32,930 --> 00:08:33,500
OK.
