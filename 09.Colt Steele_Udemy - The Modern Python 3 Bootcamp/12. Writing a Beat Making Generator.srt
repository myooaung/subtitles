1
00:00:00,210 --> 00:00:00,550
Hey.

2
00:00:00,570 --> 00:00:01,370
Welcome back.

3
00:00:01,610 --> 00:00:02,030
OK.

4
00:00:02,100 --> 00:00:06,300
So in this video we're going to talk about generators and in particular I'm going to show you how to

5
00:00:06,300 --> 00:00:12,030
make an infinite generator which maybe isn't that common but I want to show it to you because it's something

6
00:00:12,030 --> 00:00:14,600
that we can only really do with iterators.

7
00:00:14,760 --> 00:00:20,610
So for example I kind of thought for a long time about an example that would that would potentially

8
00:00:20,610 --> 00:00:21,450
make sense.

9
00:00:21,450 --> 00:00:28,230
Let's say that I'm making a music application like I'm a deejay and I want some sort of software written

10
00:00:28,230 --> 00:00:30,630
in Python that helps me create.

11
00:00:31,050 --> 00:00:34,760
I don't know if sound and play sound on certain beats.

12
00:00:34,920 --> 00:00:41,100
And for example we're going to work in four four time which you're not a musician basically just four

13
00:00:41,100 --> 00:00:42,140
beats to a measure.

14
00:00:42,170 --> 00:00:47,700
It's a classic rock n roll counting you know one two three four one two three four.

15
00:00:47,890 --> 00:00:54,700
Anyway what we're going to do is create a function and let's say I want a function called Current beat

16
00:00:54,990 --> 00:01:02,010
and it always gives me the current beat either one two three or four and then it starts at 1 and 2 and

17
00:01:02,010 --> 00:01:08,730
3 then for the next time it goes back to 1 and it just helps me figure out where I am in the music what

18
00:01:08,730 --> 00:01:10,160
beat in a measure.

19
00:01:10,350 --> 00:01:14,640
And if none of that makes sense let's just say I want a function that just returns 1 2 3 4 and then

20
00:01:14,640 --> 00:01:16,320
cycles back to 1 2 3 4.

21
00:01:16,470 --> 00:01:17,660
But I don't want them all at once.

22
00:01:17,660 --> 00:01:20,760
I want the current beat each time I want one.

23
00:01:20,850 --> 00:01:21,750
I want to.

24
00:01:21,960 --> 00:01:25,010
For example I can have a function called Play kick drum.

25
00:01:25,020 --> 00:01:30,810
Let's say I'm trying to mimic Queen's We Will Rock You and it's a classic drum pattern where the kick

26
00:01:30,810 --> 00:01:35,190
drum plays on the first and second piece and then not on the third and fourth.

27
00:01:35,250 --> 00:01:42,360
So then we get one two three four and I only want that sound to play.

28
00:01:42,360 --> 00:01:49,020
I don't know if current beat is equal to 1 calling current beat.

29
00:01:49,350 --> 00:01:51,390
Then we'll play sound or something.

30
00:01:51,390 --> 00:01:57,330
Of course this code won't work we don't have any audio set up but if this is what we had current beat

31
00:01:57,330 --> 00:02:02,670
needs to reliably return one to three or four and then repeat OK all of us just set up.

32
00:02:02,790 --> 00:02:03,600
I'm trying to show you.

33
00:02:03,810 --> 00:02:09,100
If we defined a function call the current beat How could we have it return a single number.

34
00:02:09,180 --> 00:02:15,270
But every time return a different number and then start repeating we don't have a way of doing that.

35
00:02:15,270 --> 00:02:18,070
We can return one thing from a function.

36
00:02:18,420 --> 00:02:24,960
So of course we could create a class we could instantiate this class like we saw earlier when we created

37
00:02:24,960 --> 00:02:26,990
a counter class make it an iterator.

38
00:02:27,030 --> 00:02:32,700
But the point is with just a regular function we can't what we could do is I don't know returned a list

39
00:02:32,790 --> 00:02:37,950
that we could generate and that's less than ideal of course because it's way less than ideal.

40
00:02:37,950 --> 00:02:43,860
I want one thing at a time but we could have a list or a tuple of numbers that say one two three four

41
00:02:44,110 --> 00:02:46,970
we'd have an index set to zero.

42
00:02:47,250 --> 00:02:54,230
We could do something like set a max equal to 1 equal to 100 while.

43
00:02:54,780 --> 00:02:59,320
And we need one more thing result list or a tuple whatever.

44
00:02:59,350 --> 00:03:05,280
Wow length of result is less than max.

45
00:03:05,730 --> 00:03:13,830
Inside of there well we're going to do is they could take Gnome's of eye starting at zero will add one

46
00:03:13,830 --> 00:03:22,040
to I plus two equals one and we'll append that to result result that append number I I post equals one

47
00:03:22,050 --> 00:03:26,890
but we will run into a problem when I get past the length of the list.

48
00:03:26,940 --> 00:03:36,780
So I need to add and if so if it's greater than or equal to the length of numbers so that in this case

49
00:03:36,780 --> 00:03:41,430
as soon as it gets to the length 0 1 2 3 then we reset it to zero.

50
00:03:41,430 --> 00:03:43,960
So then I go back to zero.

51
00:03:44,310 --> 00:03:47,840
And then finally we can return results.

52
00:03:47,870 --> 00:03:51,440
All of this is a long way to show you something that I don't want.

53
00:03:51,450 --> 00:03:57,630
And the limitation of function in print and current beat and try running it.

54
00:03:57,810 --> 00:04:02,050
There we go one two three four one two three for over and over and over repeating a cycle.

55
00:04:02,190 --> 00:04:03,960
But that is not what I want.

56
00:04:04,140 --> 00:04:10,470
I want one thing at a time and let's say that I had ten thousand measures or a million measures of music

57
00:04:10,470 --> 00:04:13,950
going for this to even begin to work.

58
00:04:13,980 --> 00:04:19,480
I guess I could generate this first and then I could loop through it one item at a time.

59
00:04:19,620 --> 00:04:25,500
But for that to begin to work my list would have to hold what four million to one million measures and

60
00:04:25,500 --> 00:04:27,800
there's four beats in the measure.

61
00:04:27,960 --> 00:04:30,890
That means four million things that it's holding at once.

62
00:04:30,960 --> 00:04:32,360
Before we even begin.

63
00:04:32,360 --> 00:04:38,670
And that's bad because lists as they grow take up a lot of memory and I only need one thing at a time.

64
00:04:39,030 --> 00:04:39,520
OK.

65
00:04:39,630 --> 00:04:41,450
So all of this is to show you.

66
00:04:41,570 --> 00:04:48,180
Instead let's go this route with a generator current beat

67
00:04:50,830 --> 00:04:52,650
and we'll have the same thing.

68
00:04:52,650 --> 00:04:55,540
Nom's Wow that was I really butchered it there.

69
00:04:55,540 --> 00:04:57,190
One two three four.

70
00:04:57,640 --> 00:04:59,480
Well haven't I set to zero.

71
00:05:00,070 --> 00:05:03,100
And then we'll just wild true show forever.

72
00:05:04,030 --> 00:05:09,500
We're going to we could start by just yielding numbers of I.

73
00:05:10,600 --> 00:05:11,940
And so that should give us zero.

74
00:05:11,950 --> 00:05:16,660
And then adding one to I plus equals 1 just like before.

75
00:05:16,800 --> 00:05:21,510
But we solved that problem where if we get to the end so we'll just do.

76
00:05:21,520 --> 00:05:29,320
If I is greater than or equal to length of numbers I equals zero.

77
00:05:29,320 --> 00:05:30,780
Reset it back to zero.

78
00:05:31,420 --> 00:05:32,450
And this will keep going.

79
00:05:32,500 --> 00:05:37,350
Every time we call next on that and just proof.

80
00:05:37,920 --> 00:05:41,460
And also double check for any errors here looks good.

81
00:05:41,460 --> 00:05:50,730
So if I just make this thing called an counter equals current beat and I do next on counter you get

82
00:05:50,730 --> 00:05:53,370
one and two three four.

83
00:05:53,370 --> 00:05:56,310
One two three and it keeps going forever.

84
00:05:56,340 --> 00:06:02,220
So anytime my code whatever it is needs next beat it can call next on counter and it will keep going

85
00:06:02,340 --> 00:06:03,150
forever.

86
00:06:03,630 --> 00:06:06,430
But it still only gives one beat at a time.

87
00:06:06,540 --> 00:06:08,350
So I don't have this giant list.

88
00:06:08,490 --> 00:06:15,000
If I had a million measures it doesn't matter how many measures I have because all that I'm really dealing

89
00:06:15,000 --> 00:06:16,950
with is one number at a time.

90
00:06:17,070 --> 00:06:22,590
I think I just added a letter here as to how I am dealing with one number at a time rather than four

91
00:06:22,590 --> 00:06:24,590
million stored in the list.

92
00:06:25,260 --> 00:06:27,170
So hopefully that distinction is clear.

93
00:06:27,270 --> 00:06:30,280
This is not really something you have to do all that often.

94
00:06:30,540 --> 00:06:34,730
It's not just the music part but any sort of infinite generator.

95
00:06:34,830 --> 00:06:40,140
But it is really cool to know that you can do this and this I think it shows a big difference compared

96
00:06:40,140 --> 00:06:41,580
to a typical function.

97
00:06:41,790 --> 00:06:47,400
OK so next one I'm going to show you is how we can actually see the difference in memory usage between

98
00:06:47,400 --> 00:06:51,160
a generator and using a function with a list or something.

99
00:06:51,450 --> 00:06:54,020
When we start working with like millions of results.
