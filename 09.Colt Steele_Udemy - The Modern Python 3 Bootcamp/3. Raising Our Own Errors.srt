1
00:00:00,260 --> 00:00:03,780
Already we've seen a lot of the common errors and exceptions.

2
00:00:03,780 --> 00:00:06,180
Next I'm going to show you how to raise your own.

3
00:00:06,420 --> 00:00:09,660
So this isn't about handling errors or preventing them.

4
00:00:09,660 --> 00:00:11,820
This is about when you're writing code.

5
00:00:12,060 --> 00:00:15,090
Let's say that someone else might use your code down the line.

6
00:00:15,180 --> 00:00:20,520
This is how you could give them custom error messages or you don't have to customize them but how you

7
00:00:20,520 --> 00:00:27,200
could throw your own type error or value error or something like that and it's super simple.

8
00:00:27,360 --> 00:00:35,250
All you do is use this keyword res and then an error and then an optional argument string that can explain

9
00:00:35,250 --> 00:00:36,420
something about it.

10
00:00:36,870 --> 00:00:44,640
So just by calling this actually if I just copy this as is I go over to Python you can see I get that

11
00:00:44,640 --> 00:00:49,430
error value error which is what I called invalid value.

12
00:00:49,470 --> 00:00:56,220
I can also call it just as raise value error like that and it just gives me the new error.

13
00:00:56,460 --> 00:00:57,520
I could do.

14
00:00:57,600 --> 00:01:04,300
I don't know Ray's name error and blah blah blah in here doesn't matter.

15
00:01:04,380 --> 00:01:05,520
I get name error.

16
00:01:05,520 --> 00:01:06,660
Colon block.

17
00:01:06,790 --> 00:01:10,500
Now of course you want to be helpful with these.

18
00:01:10,530 --> 00:01:13,480
And you also want to throw these errors throw.

19
00:01:13,500 --> 00:01:15,990
By the way is not officially a python.

20
00:01:15,990 --> 00:01:19,970
That's actually the way that you cause error messages in other languages.

21
00:01:20,040 --> 00:01:22,500
So I mean to say raise not throw.

22
00:01:22,500 --> 00:01:28,110
Anyway we can raise errors willy nilly all over the place but we want to be deliberate in how we use

23
00:01:28,110 --> 00:01:34,080
them and we want to make sure that we're using a name error when something is a name error.

24
00:01:34,080 --> 00:01:39,540
Technically there's no rule that says it's up to us to raise things when we want.

25
00:01:39,540 --> 00:01:45,720
So I could raise a divide by zero error whenever I wanted in some random function that has nothing to

26
00:01:45,720 --> 00:01:46,670
do with division.

27
00:01:46,890 --> 00:01:50,710
It's just that that isn't very friendly to anyone else who's going to use that code.

28
00:01:50,790 --> 00:01:56,430
So let me share an example of a silly example but an example on the Nonetheless that shows a potential

29
00:01:56,550 --> 00:01:58,360
good use of race.

30
00:01:58,510 --> 00:02:01,390
OK I made a new file called raised up why.

31
00:02:01,620 --> 00:02:08,710
Let's suppose that I'm creating a module here that allows people to actually colorize text.

32
00:02:08,820 --> 00:02:11,640
We'll see this when we actually get to the modules section.

33
00:02:11,640 --> 00:02:16,380
There are existing packages that do this so that I could print something to the command line instead

34
00:02:16,380 --> 00:02:17,330
of just doing print.

35
00:02:17,410 --> 00:02:21,140
Hi I instead can do something like colorize.

36
00:02:21,380 --> 00:02:22,120
Hi.

37
00:02:22,500 --> 00:02:27,060
And it will then printed as read or something like this.

38
00:02:27,060 --> 00:02:33,540
If I passed and read and there are packages that do that and say that I was a developer of one of those

39
00:02:33,630 --> 00:02:40,200
and I want to make this usable and friendly for other developers people who are going to use my module.

40
00:02:40,470 --> 00:02:41,840
So we're going to start really simple.

41
00:02:41,910 --> 00:02:46,950
Let's just say there's a function called colorize and all that it does is it takes.

42
00:02:46,950 --> 00:02:51,660
I don't know some text and then a color and someone would call it like this.

43
00:02:51,660 --> 00:02:56,930
Colorize text would be hello and then a color would be something like red.

44
00:02:57,570 --> 00:03:00,960
But imagine that we all have a set list of colors which is true.

45
00:03:00,960 --> 00:03:03,100
Let's say we have the colors of the rainbow.

46
00:03:03,270 --> 00:03:08,910
If someone tries to pass in a color that doesn't exist or something like chicken which isn't a color

47
00:03:09,390 --> 00:03:10,630
we could raise an error.

48
00:03:10,740 --> 00:03:16,020
In that case we could raise a value error and if they tried to pass in something that isn't a string

49
00:03:16,020 --> 00:03:21,510
in the first place for either of these we could raise a type error and say hey you are supposed to pass

50
00:03:21,570 --> 00:03:24,320
strings and so let's actually do that now.

51
00:03:24,330 --> 00:03:26,740
So the ideal usage should be something like this.

52
00:03:26,760 --> 00:03:32,520
Hello read and we're not actually going to get the text to print out in a color that's significantly

53
00:03:32,520 --> 00:03:33,570
more complicated.

54
00:03:33,570 --> 00:03:44,640
Let's just say the end result of ours is printed text in color just like that so it should say printed

55
00:03:44,640 --> 00:03:45,600
hello in red.

56
00:03:45,690 --> 00:03:50,310
That's the end result of what we want to do is check if we should raise any errors.

57
00:03:50,490 --> 00:03:51,910
So the first thing we could do.

58
00:03:52,140 --> 00:03:54,510
Let's work on the type.

59
00:03:54,660 --> 00:04:04,350
So if text is not a string or if color is not a string it could do this if and let's start with Hello.

60
00:04:04,740 --> 00:04:05,650
Which is text.

61
00:04:05,730 --> 00:04:13,120
So will say if type of text is not string just like that.

62
00:04:13,230 --> 00:04:16,800
Then we can raise what kind of error do we want.

63
00:04:16,800 --> 00:04:18,210
We could raise anything.

64
00:04:18,210 --> 00:04:21,690
Like I said the divide by zero is fair game just doesn't make sense.

65
00:04:21,720 --> 00:04:23,320
It's up to us to be responsible.

66
00:04:23,340 --> 00:04:28,300
What makes sense in this case would be a type error.

67
00:04:28,910 --> 00:04:31,100
And then let's just do something like text.

68
00:04:31,320 --> 00:04:42,180
Must much text must be a string or instance of string or something like that to be more official sounding.

69
00:04:42,590 --> 00:04:47,410
OK so now if I try and call this where text is not a string.

70
00:04:47,640 --> 00:04:53,450
Well let's let's call it twice one where it is in another time where it's a number.

71
00:04:53,720 --> 00:04:57,330
And if I execute it now can see we get the first time it worked.

72
00:04:57,350 --> 00:04:59,010
We get printed hello and read.

73
00:04:59,160 --> 00:05:03,240
Then afterward I get type error text must be instance of string.

74
00:05:03,410 --> 00:05:08,000
So we have successfully raised our own error in a context that actually makes sense.

75
00:05:08,000 --> 00:05:14,450
So if a developer was using this if someone was using this function colorize they would now know that

76
00:05:14,450 --> 00:05:17,180
they made a mistake and it explains how they should use it.

77
00:05:17,780 --> 00:05:21,120
And next up let's worry about the colors.

78
00:05:21,230 --> 00:05:27,970
So let's define a list of colors that are valid and make a tuple or not using it for anything.

79
00:05:27,990 --> 00:05:30,050
It just just needs to hold values.

80
00:05:30,050 --> 00:05:31,590
So I'll fast forward through this.

81
00:05:31,830 --> 00:05:37,670
OK let's say this is the tuple of valid colors that we can print to the command line.

82
00:05:38,190 --> 00:05:44,900
Cyan yellow blue green and magenta so that they know purple and what we want to do is just check if

83
00:05:44,900 --> 00:05:51,160
they're trying to call colorize with a color that is not in colors and will throw a value error.

84
00:05:51,950 --> 00:05:58,130
So we'll just do if and will just check color not in colors.

85
00:05:59,210 --> 00:06:06,410
Raise and then we want to be explicit about the problem so we could just raise an exception just a generic

86
00:06:06,410 --> 00:06:08,250
exception like this.

87
00:06:08,940 --> 00:06:10,840
Well I guess I'm not causing the problem yet.

88
00:06:10,970 --> 00:06:11,940
Let's do.

89
00:06:12,050 --> 00:06:12,930
Hello.

90
00:06:13,130 --> 00:06:16,040
Well read will cause it actually because read is not in colors.

91
00:06:16,280 --> 00:06:17,940
So let's try that now.

92
00:06:18,320 --> 00:06:21,680
We just raised this generic exception that's not a very good idea.

93
00:06:22,040 --> 00:06:25,100
Like I said we can do whatever we want but we want to be explicit.

94
00:06:25,140 --> 00:06:35,000
So this should be a value error and we'll just say color is invalid color which is kind of clunky and

95
00:06:35,000 --> 00:06:38,370
how it's worded but it's short and simple for now.

96
00:06:38,420 --> 00:06:42,220
So if I call it now we get color is invalid color.

97
00:06:42,470 --> 00:06:44,630
So that's basically it to raise.

98
00:06:44,840 --> 00:06:51,800
You know we call race and then an error and then we can absolutely pass in some information about it.

99
00:06:51,800 --> 00:06:54,220
One thing I would mention though is a good practice.

100
00:06:54,230 --> 00:07:00,230
This is a matter of opinion but let's say right now we're not checking if red or if color is a string

101
00:07:00,610 --> 00:07:03,980
because we are just directly checking if it's in here.

102
00:07:04,490 --> 00:07:10,370
But if I did want to check is color a string and I wanted to raise a type error.

103
00:07:10,490 --> 00:07:17,090
It would be better to have individual type errors if that makes sense or we have one for this copy this

104
00:07:18,320 --> 00:07:19,330
type.

105
00:07:19,640 --> 00:07:24,370
Color is not string to something like this.

106
00:07:24,470 --> 00:07:27,130
Rather than combining them into one.

107
00:07:27,170 --> 00:07:33,690
So if type of text is not string or type colors not string raise an error that just says must be end

108
00:07:33,860 --> 00:07:40,130
of string because it's unclear what the culprit was what's the problem text was the problem color.

109
00:07:40,580 --> 00:07:43,660
So this way we get it's clearer what's going on.

110
00:07:43,670 --> 00:07:46,660
But anyway we're kind of already taking care of it down here.

111
00:07:46,660 --> 00:07:54,660
And so now if I try and run this with Hello 10 we get color must be instance of string.

112
00:07:54,860 --> 00:08:03,730
And if I tried to run it with list comma 10 we get color must be instance of string.

113
00:08:04,100 --> 00:08:07,850
And of course we only get one of these errors at a time.

114
00:08:07,850 --> 00:08:15,100
So then if we fix that make this I don't know let's go to scien.

115
00:08:15,140 --> 00:08:17,970
Now we get text must be instance of string.

116
00:08:18,470 --> 00:08:18,970
OK.

117
00:08:19,160 --> 00:08:25,810
So hopefully this example even though it doesn't actually do anything it marks just prints you know

118
00:08:26,180 --> 00:08:27,560
a little string at the end.

119
00:08:27,710 --> 00:08:32,010
But imagine that this was an actual thing that we made to share with other developers.

120
00:08:32,030 --> 00:08:34,100
These errors would be very helpful.

121
00:08:34,100 --> 00:08:39,890
The only thing that would be more helpful is to have good documentation to help prevent developers from

122
00:08:39,890 --> 00:08:42,820
trying to you know pass in red or a number.

123
00:08:42,920 --> 00:08:49,490
If we had documentation that explained text must be a string color must be a string and color can only

124
00:08:49,490 --> 00:08:51,790
be cyan yellow blue and so on.

125
00:08:51,800 --> 00:08:54,900
That way a developer wouldn't you know have to just guess and check.

126
00:08:55,190 --> 00:08:55,650
OK.

127
00:08:55,730 --> 00:08:56,660
So that's raise.
