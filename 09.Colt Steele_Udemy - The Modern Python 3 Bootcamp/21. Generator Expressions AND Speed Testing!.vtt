WEBVTT
1
00:00:00.240 --> 00:00:01.350
Hey welcome back.

2
00:00:01.350 --> 00:00:06.060
This is our last video on generators for now and we're going to talk about a topic called generator

3
00:00:06.060 --> 00:00:07.100
expressions.

4
00:00:07.320 --> 00:00:11.380
So these are basically what list comprehensions are two lists.

5
00:00:11.550 --> 00:00:19.260
But for generators the goal is just a nice simple or easy syntax to create generators on a single line.

6
00:00:19.260 --> 00:00:24.170
Just like with list comprehensions there's nothing that you can only do with this comp.

7
00:00:24.180 --> 00:00:27.830
It's just a nice way of writing something else that might take a couple of lines.

8
00:00:28.020 --> 00:00:32.270
So we can create generators from generator expressions that look like list comprehensions.

9
00:00:32.340 --> 00:00:38.070
And most importantly how they so far we use parens instead of list brackets.

10
00:00:38.070 --> 00:00:42.200
Suppose I had a really simple generator like let's call it Nom's.

11
00:00:42.420 --> 00:00:48.240
And all of that it does is for in range.

12
00:00:48.240 --> 00:00:51.090
Let's go one to 10.

13
00:00:51.090 --> 00:00:52.860
It's just going to yield.

14
00:00:52.860 --> 00:00:55.860
No I'll copy it over to my shell here.

15
00:00:55.950 --> 00:01:00.000
Then I could just do g equals numbers like that.

16
00:01:00.240 --> 00:01:03.570
And then we call next on G and so on.

17
00:01:03.690 --> 00:01:04.980
And that should all be review.

18
00:01:05.130 --> 00:01:05.590
OK.

19
00:01:05.940 --> 00:01:08.690
So there's a shortcut if you want to do it on a single line.

20
00:01:08.700 --> 00:01:10.070
You can just do this.

21
00:01:10.080 --> 00:01:13.170
G equals Perrins.

22
00:01:13.290 --> 00:01:14.680
And then we're just too numb.

23
00:01:14.760 --> 00:01:17.200
For now I'm in range.

24
00:01:17.310 --> 00:01:19.560
Comma 10.

25
00:01:20.090 --> 00:01:26.440
And if you look at what she is it's a generator object which is the same thing as this old version of

26
00:01:26.440 --> 00:01:28.300
G I should have shown that to you first.

27
00:01:28.690 --> 00:01:32.630
If I remake it though I you look at G.

28
00:01:32.680 --> 00:01:34.240
It's a generator object.

29
00:01:34.240 --> 00:01:36.940
But here it tells us it came from a generator expression.

30
00:01:37.030 --> 00:01:41.680
Here it tells us how it was defined with the generator function names.

31
00:01:41.950 --> 00:01:42.540
All right.

32
00:01:42.910 --> 00:01:44.980
So otherwise they're identical if I call.

33
00:01:44.980 --> 00:01:48.570
Next on this one we get the same thing.

34
00:01:48.700 --> 00:01:50.480
I really shouldn't have gone with G.

35
00:01:51.040 --> 00:01:52.560
So let's change this too.

36
00:01:52.690 --> 00:01:53.140
I don't know.

37
00:01:53.140 --> 00:01:55.870
G-2 these are terrible names.

38
00:01:55.870 --> 00:01:59.080
If I do next on to keep going.

39
00:01:59.080 --> 00:02:00.340
It's the same thing.

40
00:02:00.400 --> 00:02:00.930
All right.

41
00:02:00.970 --> 00:02:03.840
And then eventually at the end and we get the stop iteration error.

42
00:02:04.030 --> 00:02:05.190
Cool.

43
00:02:05.200 --> 00:02:07.800
So that is our first generator expression.

44
00:02:08.170 --> 00:02:16.210
If we had replaced it with list brackets if I had done I don't know let's just do all equals and then

45
00:02:16.290 --> 00:02:17.070
no.

46
00:02:17.260 --> 00:02:20.390
For now I'm in range 1 common 10.

47
00:02:20.890 --> 00:02:24.080
But now we get all the data in one list all at once.

48
00:02:24.280 --> 00:02:25.860
So that shouldn't be news either.

49
00:02:25.870 --> 00:02:27.380
That's how this comprehension works.

50
00:02:27.670 --> 00:02:30.440
But when we use a generator we get one thing at a time.

51
00:02:30.520 --> 00:02:35.260
It gives us a generator object and then we iterate over it by calling next whether we're using a loop

52
00:02:35.290 --> 00:02:37.910
or we're calling next manually on our own.

53
00:02:37.930 --> 00:02:43.520
We get one item at a time but we can take advantage of this for things like that.

54
00:02:43.540 --> 00:02:49.230
I showed you when we had some phone some all of these numbers together.

55
00:02:49.450 --> 00:02:53.010
There's no reason that I necessarily have to put them in a list.

56
00:02:53.170 --> 00:03:03.140
So if I copy this I could do that and I get 45 or I could do this.

57
00:03:03.340 --> 00:03:05.170
And I also should get 45.

58
00:03:05.590 --> 00:03:09.450
But in this case I'm using a generator expression and passing that.

59
00:03:09.450 --> 00:03:16.360
And in this case I'm using a list comprehension which is giving me a big list that's on the 10 things

60
00:03:16.360 --> 00:03:16.590
on.

61
00:03:16.600 --> 00:03:18.390
But it's giving me a list and passing it.

62
00:03:18.640 --> 00:03:20.060
So there is a difference.

63
00:03:20.290 --> 00:03:20.800
OK.

64
00:03:20.950 --> 00:03:27.640
So let me show you the actual difference on calling some with a generator expression versus a list comprehension.

65
00:03:27.820 --> 00:03:35.220
And with let's say we're summing the first million or 10 million numbers together in order to time things

66
00:03:35.240 --> 00:03:36.280
I'm going to import time.

67
00:03:36.280 --> 00:03:38.530
This is not a very precise way of timing.

68
00:03:38.530 --> 00:03:44.620
By the way there are things you can download modules out there that actually are more precise for benchmarking

69
00:03:44.830 --> 00:03:48.970
but this will give us a good enough guess an approximation.

70
00:03:48.970 --> 00:03:54.960
So I'm going to have a variable called Gen start time for generator equals Time.com times they'll be

71
00:03:55.250 --> 00:03:56.020
typed basically.

72
00:03:56.070 --> 00:04:03.130
Now whenever I run the script and then I'm going to try doing print let's do some.

73
00:04:03.340 --> 00:04:06.250
And we're not using a list comprehension so it's just going to be.

74
00:04:06.340 --> 00:04:09.560
And for an in range.

75
00:04:10.080 --> 00:04:11.580
And what is this year.

76
00:04:11.950 --> 00:04:12.820
That's a million.

77
00:04:12.820 --> 00:04:19.900
Let's do 10 million like that had on my last parentheses there and then let's do a variable down here

78
00:04:19.900 --> 00:04:24.320
called Jeon stop equals time time.

79
00:04:24.320 --> 00:04:28.060
So that's now minus gen start time.

80
00:04:28.090 --> 00:04:32.530
So it makes sense we're capturing the start time we're doing the thing and then afterwards we're taking

81
00:04:32.650 --> 00:04:35.220
the current time subtracting the start time.

82
00:04:35.580 --> 00:04:42.640
OK then we're going to do the exact same thing except I'm going to call all of these variables.

83
00:04:42.650 --> 00:04:49.550
List start time lists stop and we'll add in a list comprehension there.

84
00:04:50.590 --> 00:04:54.730
So now we're turning it into a list first and then summing all those things together.

85
00:04:54.960 --> 00:04:55.710
OK.

86
00:04:56.140 --> 00:05:04.050
Lastly let's do a print f string and do we want to put this whole thing in there.

87
00:05:04.060 --> 00:05:04.440
Sure.

88
00:05:04.480 --> 00:05:10.860
Let's take this took colon and then we'll do.

89
00:05:11.130 --> 00:05:17.160
Jan stop taking good stop is not the right word for that.

90
00:05:17.260 --> 00:05:20.950
That's just Jugend time and this time.

91
00:05:20.950 --> 00:05:27.730
Duplicate this except this time the list brackets there took list.

92
00:05:27.940 --> 00:05:28.700
Stop.

93
00:05:29.020 --> 00:05:29.620
OK.

94
00:05:29.860 --> 00:05:34.780
So we're running the exact same code except one repassing and I was comped the other one is a generator

95
00:05:34.780 --> 00:05:37.480
expression and then retiming both of them.

96
00:05:37.480 --> 00:05:42.990
And then at the end printing and I did change this to be GEND time.

97
00:05:43.000 --> 00:05:47.270
And then this time instead of stop ok let's make sure I don't have any errors.

98
00:05:47.410 --> 00:05:48.260
Try running it.

99
00:05:49.140 --> 00:05:50.160
Fingers crossed.

100
00:05:50.160 --> 00:05:50.420
OK.

101
00:05:50.430 --> 00:05:54.270
So it prints both of them out and then we can see the difference over here.

102
00:05:54.480 --> 00:06:00.880
It looks pretty small when we're doing 10 million but you can see that generator was faster although

103
00:06:01.330 --> 00:06:08.850
we're not necessarily comfortable with that margin because time is somewhat imprecise but do an extra

104
00:06:08.930 --> 00:06:11.450
S.R.O.

105
00:06:11.650 --> 00:06:12.630
How about now.

106
00:06:13.410 --> 00:06:16.240
Might take a moment and might fast forward.

107
00:06:16.290 --> 00:06:17.700
I can't fill this time.

108
00:06:17.710 --> 00:06:23.660
Am I supposed to talk about boy crippling fear here.

109
00:06:24.060 --> 00:06:25.940
I don't know what to talk about.

110
00:06:27.450 --> 00:06:29.570
Well it's raining here.

111
00:06:29.640 --> 00:06:30.210
All right.

112
00:06:30.210 --> 00:06:31.080
There you go.

113
00:06:31.080 --> 00:06:32.310
That is a big difference.

114
00:06:32.310 --> 00:06:40.310
Look at that six point seventy five seconds using a generator expression 10 seconds using a list comprehension.

115
00:06:40.560 --> 00:06:42.000
Massive difference.

116
00:06:42.000 --> 00:06:47.720
And of course the reason for that is that here when we're using some it makes the entire list first

117
00:06:47.970 --> 00:06:51.270
and then it has to go over the entire list and add everything together.

118
00:06:51.420 --> 00:06:55.950
So it makes it first and then that's it and it has what is this 10 million 100 million.

119
00:06:56.140 --> 00:06:57.780
Yeah 10 million digits.

120
00:06:57.780 --> 00:06:59.000
That's a very long list.

121
00:06:59.100 --> 00:07:00.280
Versus here.

122
00:07:00.510 --> 00:07:01.980
We're not creating the entire list.

123
00:07:02.010 --> 00:07:04.390
We're just taking one thing at a time and adding it to a sum.

124
00:07:04.410 --> 00:07:10.060
And we just go one ad one ad until we hit the end of the generator and then we have the total.

125
00:07:10.320 --> 00:07:15.090
So very very different approach and a significant reduction in time as you can see.

126
00:07:15.090 --> 00:07:19.470
All right so that's generator expressions if you can use them they often can save some time.
