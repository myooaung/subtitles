1
00:00:00,350 --> 00:00:01,700
Hey I'll come back.

2
00:00:01,710 --> 00:00:08,190
So one question I get a lot through all my courses has to do with style whether it's C S S or javascript

3
00:00:08,190 --> 00:00:09,370
or Python.

4
00:00:09,420 --> 00:00:12,510
People want to know how should I be styling my code.

5
00:00:12,510 --> 00:00:15,160
You know what where should I have extra whitespace.

6
00:00:15,300 --> 00:00:18,060
Do I need this whitespace and they break this up into two lines.

7
00:00:18,120 --> 00:00:19,580
How should I named my variables.

8
00:00:19,590 --> 00:00:24,700
We've already talked about some elements of style but there's a lot more to discuss.

9
00:00:24,720 --> 00:00:28,880
Most languages out there have at least one popular style guide.

10
00:00:28,890 --> 00:00:35,300
Python is a bit different in that there's really just one exact standard that everybody tries to follow.

11
00:00:35,460 --> 00:00:40,920
If you are going to be sharing your code going to be putting it up online somewhere making a open source

12
00:00:40,920 --> 00:00:46,620
repository then you should follow the PEP 8 style guide so I've included the link if you want to take

13
00:00:46,620 --> 00:00:47,430
a look.

14
00:00:47,460 --> 00:00:48,370
It's quite long.

15
00:00:48,400 --> 00:00:50,010
There's a lot to talk about.

16
00:00:50,100 --> 00:00:55,790
There's things like code out you know how much you should indent four spaces per indention level.

17
00:00:56,040 --> 00:01:01,260
There's things like what else how long your string should be or your comments and when you should break

18
00:01:01,260 --> 00:01:02,610
them as separate lines.

19
00:01:02,670 --> 00:01:04,760
How many blank lines you should include.

20
00:01:05,010 --> 00:01:07,350
So there are rules about you know you should.

21
00:01:07,350 --> 00:01:10,690
After you defined you haven't talked about functions but want you to find a function.

22
00:01:10,860 --> 00:01:16,400
You should have to find surrounding it at the top or import statements.

23
00:01:16,410 --> 00:01:17,520
How this should work.

24
00:01:17,520 --> 00:01:22,940
Basically my point is there is a lot and I am not going to ask you to learn all of this.

25
00:01:22,950 --> 00:01:27,740
Frankly I can't remember half of this because I use a tool to help me.

26
00:01:27,810 --> 00:01:34,240
I write my code with an eye for trying to make it look nice and not have these giant lines.

27
00:01:34,260 --> 00:01:40,590
And that's sort of a side effect of me being onscreen and having to show the code I can't have something

28
00:01:40,590 --> 00:01:42,140
that looks like a crazy tangled mess.

29
00:01:42,180 --> 00:01:43,650
I just try and make it look ok.

30
00:01:43,810 --> 00:01:46,780
But what I actually do before I upload code.

31
00:01:46,800 --> 00:01:51,390
Let's say I have some massive crazy thing like this which is going to contain a lot of stuff we haven't

32
00:01:51,390 --> 00:01:52,570
seen.

33
00:01:52,590 --> 00:01:55,780
I don't go through this line by line and format it manually.

34
00:01:55,800 --> 00:02:01,650
I use a tool I actually introduce this later in the course but I'm adding this video in because I know

35
00:02:01,650 --> 00:02:04,800
a lot of people will be antsy to learn about this.

36
00:02:04,800 --> 00:02:06,780
The video is in the modules section.

37
00:02:06,780 --> 00:02:13,740
It's on a tool called auto PEP 8 and what I can do is I can take a file like this that has valid Python

38
00:02:13,740 --> 00:02:13,950
code.

39
00:02:13,950 --> 00:02:15,500
This works just fine.

40
00:02:15,510 --> 00:02:25,410
It is ugly and I run this auto PEP 8 and then I do dash dash in place and then a name of the file and

41
00:02:25,410 --> 00:02:27,280
that file is called ugly code.

42
00:02:27,440 --> 00:02:35,440
Why and if I run that and go back up re reload and you can see that this is what it looks like now.

43
00:02:35,630 --> 00:02:39,200
The exact same code has been formatted really nicely for me.

44
00:02:39,440 --> 00:02:44,300
So going forward in my videos you're not going to see me spending a lot of time.

45
00:02:44,330 --> 00:02:49,400
I mean just getting this indentation right manually takes forever and most developers I know who use

46
00:02:49,400 --> 00:02:52,030
Python use auto PEP 8 to take care of it.

47
00:02:52,100 --> 00:02:55,940
So my note to you is don't freak out about style at this point.

48
00:02:56,030 --> 00:03:00,140
Make sure you're just being syntactically correct that your code works.

49
00:03:00,230 --> 00:03:04,970
Then you can use a tool like auto PEP 8 and if you want you could skip ahead and learn how to install

50
00:03:04,970 --> 00:03:05,390
it.

51
00:03:05,450 --> 00:03:10,700
But I think it's probably better just to wait until you get to that section naturally because by then

52
00:03:10,700 --> 00:03:12,190
we'll have covered a lot of this.

53
00:03:12,200 --> 00:03:15,480
You know a lot of the craziness that you see here and it will make sense.

54
00:03:15,500 --> 00:03:18,370
It will make more sense why you would use a tool like auto PEP 8.

55
00:03:18,410 --> 00:03:22,760
You'll know how to install external packages by then and there's a whole bunch of other things you need

56
00:03:22,760 --> 00:03:28,160
to discuss before then anyway as you go through the course and introduce new topics like functions or

57
00:03:28,160 --> 00:03:31,070
classes or generators or decorators.

58
00:03:31,400 --> 00:03:36,470
There's a lot of style that is tied to them where it won't break the functionality things will work

59
00:03:36,470 --> 00:03:42,170
just fine but if you want to be up to date you want to follow the best possible style guide you can

60
00:03:42,170 --> 00:03:44,170
come to PEP 8 and you can read it yourself.

61
00:03:44,180 --> 00:03:49,900
If you have questions or by then will have installed auto PEP 8 and we can just use that.

62
00:03:49,940 --> 00:03:50,480
All right.

63
00:03:50,540 --> 00:03:52,250
I think that's all I wanted to say.

64
00:03:52,250 --> 00:03:58,340
PEP 8 is a style guide that the Python community follows pretty rigidly but most people use a tool like

65
00:03:58,340 --> 00:04:00,410
auto PEP 8 to take care of it for them.

66
00:04:00,410 --> 00:04:04,970
You should just know that it exists and don't panic about style at this point.

67
00:04:04,970 --> 00:04:06,380
Keep it in the back of your mind.

68
00:04:06,380 --> 00:04:10,790
Once you start writing longer code and learn more topics in Python then you can start to worry about

69
00:04:10,790 --> 00:04:11,090
it.
