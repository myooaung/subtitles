1
00:00:00,360 --> 00:00:00,800
All right.

2
00:00:00,840 --> 00:00:04,070
So we've seen stars with a single star.

3
00:00:04,170 --> 00:00:09,820
Now we see another operator with two stars stars star and kw args.

4
00:00:09,830 --> 00:00:14,860
It stands for keyword args and the idea is that it's another special operator.

5
00:00:14,910 --> 00:00:20,580
We can have as a parameter to functions but rather than just collecting any additional arguments.

6
00:00:20,640 --> 00:00:26,780
What this will do is gather remaining keyword arguments and rather then storing them in a tuple it stores

7
00:00:26,790 --> 00:00:29,040
them in a dictionary.

8
00:00:29,040 --> 00:00:30,880
So again it's just another parameter.

9
00:00:30,900 --> 00:00:32,550
You can call this what you want.

10
00:00:32,700 --> 00:00:37,100
Star Star extra stuff Stars star KW ARG args.

11
00:00:37,230 --> 00:00:37,830
It doesn't matter.

12
00:00:37,890 --> 00:00:39,150
Totally up to you.

13
00:00:39,190 --> 00:00:45,660
The standard is KW args though keyword args so let's start with an example and I want to define a function

14
00:00:45,660 --> 00:00:53,730
called fav colors and I want to be able to pass in with keyword arguments something like.

15
00:00:53,730 --> 00:00:56,510
I don't know Colts equals purple.

16
00:00:56,820 --> 00:00:58,980
And then we can have my sister Ruby.

17
00:00:58,980 --> 00:01:06,290
Her favorite is red and Ethel likes teal right now with what we know we could do.

18
00:01:06,360 --> 00:01:13,910
Def can't forget that fav colors and then we could add in Colt Ruby and Ethel and so on.

19
00:01:13,980 --> 00:01:18,120
Or we can use star star and then KW args.

20
00:01:18,120 --> 00:01:22,270
And again this can be whatever people stuff.

21
00:01:22,500 --> 00:01:26,930
But I'll do KW argued arts args.

22
00:01:26,940 --> 00:01:31,710
There we go and let's just start by printing.

23
00:01:31,710 --> 00:01:36,590
KW args just like with Star args we don't actually reference the double star.

24
00:01:36,630 --> 00:01:38,100
It's just the name of the parameter.

25
00:01:38,100 --> 00:01:41,720
After that you start to remember it comes in as a dictionary.

26
00:01:41,720 --> 00:01:47,150
It gathers all the remaining keyword arguments which are these Once again or we have a keyword equals

27
00:01:47,340 --> 00:01:50,470
and then some value a key and a value.

28
00:01:50,850 --> 00:01:52,700
Let's test it out and just see what we get.

29
00:01:52,920 --> 00:02:00,510
So that's going to be Python 3 colors and you can see we get a dictionary and you can trust I won't

30
00:02:00,510 --> 00:02:02,910
make you watch this but if I add something else here.

31
00:02:02,940 --> 00:02:06,390
Well we only had one or we had 100 different key value pairs.

32
00:02:06,390 --> 00:02:09,280
They would all be in KW args.

33
00:02:09,540 --> 00:02:15,360
So suppose I want the output to basically be Colts favorite color is purple Rubeus favorite color is

34
00:02:15,360 --> 00:02:15,660
red.

35
00:02:15,660 --> 00:02:17,310
Ethel's favorite color is teal.

36
00:02:17,490 --> 00:02:25,760
I want to print a line and the print needs to be something like Do an F string and I'll start by saying

37
00:02:26,340 --> 00:02:33,350
person's favorite color is and then color.

38
00:02:33,810 --> 00:02:38,880
But in order for this to work of course we need to have variable's person and color and to do that we

39
00:02:38,880 --> 00:02:42,500
need to loop through KW args But remember it's a dictionary.

40
00:02:42,690 --> 00:02:50,880
And if we need the key and the value of a dictionary we need to use KW args dot items and loop through

41
00:02:50,910 --> 00:02:51,610
that.

42
00:02:51,940 --> 00:02:58,550
So we'll will do for person comma color in KW Armstead item extent.

43
00:02:58,560 --> 00:03:04,230
You know normally we'd have key comma value or K comma V but because this is a special case I know that

44
00:03:04,560 --> 00:03:06,810
these are supposed to be people in their favorite colors.

45
00:03:06,810 --> 00:03:14,060
I'm going to do person common color and then just indent this print person's favorite color is color.

46
00:03:14,310 --> 00:03:15,630
Let's see if it works.

47
00:03:17,060 --> 00:03:18,800
Cool culture colors purple.

48
00:03:18,800 --> 00:03:19,720
Very true.

49
00:03:19,940 --> 00:03:26,660
Ruby's favorite colors red Ethel's favorite color is teal and this works no matter how many we pass

50
00:03:26,660 --> 00:03:27,010
in.

51
00:03:27,140 --> 00:03:35,390
So I can have Ted likes blue or I could have one that only has called a favorite color as let's put

52
00:03:35,390 --> 00:03:45,460
this as royal deep amazing purple Now I run it and we get the first batch right here.

53
00:03:45,800 --> 00:03:51,750
And then there's the next time we called it with four and then the last time with only one keyword argument.

54
00:03:52,130 --> 00:03:58,060
So you can see how this makes our functions really flexible and I have one more example in this case.

55
00:03:58,200 --> 00:04:02,790
There's a function called special greeting and there's only one parameter.

56
00:04:02,840 --> 00:04:08,030
KW args star Starcade w args and they will collect in a dictionary all the keyword arguments.

57
00:04:08,030 --> 00:04:12,460
Or at least the remaining keyword arguments and you can see the way I'm calling it.

58
00:04:12,530 --> 00:04:17,820
In this case is actually just with one key value pair David equals.

59
00:04:17,840 --> 00:04:19,010
Hello Bob.

60
00:04:19,040 --> 00:04:20,930
Hello David equal special.

61
00:04:20,930 --> 00:04:27,440
This is just a stupid little function that will do a greeting depending on the person and their corresponding

62
00:04:27,440 --> 00:04:28,460
type of greeting.

63
00:04:28,820 --> 00:04:36,230
So it checks if inside of key w args there is David so that checks in the Keys and then it checks if

64
00:04:36,230 --> 00:04:39,690
the value of David is equal to special.

65
00:04:40,130 --> 00:04:42,310
So that's checking for this right here.

66
00:04:42,650 --> 00:04:46,210
And if that's the case then we return you get a special greeting David.

67
00:04:46,250 --> 00:04:53,630
Otherwise if David is in KW args but it's not set to special like here then we just return whatever

68
00:04:53,630 --> 00:04:56,810
the value was GW args David.

69
00:04:56,870 --> 00:05:02,540
So in this case Hello David and then else once again we don't need to explicitly say.

70
00:05:02,540 --> 00:05:04,580
Else it's just going to return.

71
00:05:04,580 --> 00:05:05,820
Not sure who this is.

72
00:05:05,930 --> 00:05:10,590
So this is a bit different than the colors example where we're looping through the KW args.

73
00:05:10,730 --> 00:05:16,860
In this case all that we're doing is checking to see if KW args contains David and if it doesn't then

74
00:05:16,890 --> 00:05:22,940
we'll do something and if it does and it also contains a corresponding value special we print special

75
00:05:23,020 --> 00:05:25,900
anyway so let's just test it out and run this and we get.

76
00:05:25,910 --> 00:05:27,380
Hello David then.

77
00:05:27,410 --> 00:05:32,110
Not sure who this is and then you get a special greeting David and that's what we expect.

78
00:05:32,540 --> 00:05:41,900
And just to show if I did comment these all out and do one on its own at the bottom this one can be

79
00:05:41,960 --> 00:05:55,040
print special greeting and will do other equals special comma David equals special and actually rather

80
00:05:55,040 --> 00:05:59,460
than hether equal specialists do hether equals Hello.

81
00:06:00,200 --> 00:06:05,950
So in this case two things are being passed in and both will be stored in the dictionary KW args.

82
00:06:06,350 --> 00:06:10,520
But it doesn't matter because our code isn't doing anything with Heather.

83
00:06:10,790 --> 00:06:12,510
It's only looking for David.

84
00:06:12,530 --> 00:06:16,570
So what do we expect this one to return.

85
00:06:16,640 --> 00:06:23,150
You get a special greeting David because all that matters is that David is in P.W. args right here and

86
00:06:23,510 --> 00:06:24,800
that KW args.

87
00:06:24,860 --> 00:06:27,660
David meaning the corresponding value is special.

88
00:06:27,740 --> 00:06:29,360
So this is true this line.

89
00:06:29,360 --> 00:06:30,210
So we return.

90
00:06:30,210 --> 00:06:31,730
You get a special greeting.

91
00:06:31,730 --> 00:06:35,060
So that's it for star star or keyword args.

92
00:06:35,450 --> 00:06:40,700
I actually can feel weird talking about it because I don't hear many people say it outloud like you

93
00:06:40,700 --> 00:06:42,250
see it online all the time.

94
00:06:42,290 --> 00:06:45,740
I don't know what the actual pronunciation is for this.

95
00:06:45,770 --> 00:06:49,870
I know people say Star args like in this case star.

96
00:06:50,030 --> 00:06:54,480
Well that's our own but Star arge is standard here I'm not sure what people call it.

97
00:06:54,590 --> 00:07:00,440
But more important than the pronunciation is the fact that it just collects all of the keyword arguments.

98
00:07:00,440 --> 00:07:06,220
Unless you know we could have something like if we did Heather here.

99
00:07:06,320 --> 00:07:14,450
KW args is not going to contain this key value pair so it just is kind of sweeping up the remaining

100
00:07:14,480 --> 00:07:16,740
keyword arguments just like this.

101
00:07:16,760 --> 00:07:19,280
Swept up the remaining regular arguments.

102
00:07:19,280 --> 00:07:20,750
Cool so we're done with it.
