WEBVTT
1
00:00:00.180 --> 00:00:04.050
So in this video we're going to start talking about making decisions.

2
00:00:04.410 --> 00:00:08.420
And the first thing we're going to discuss are conditional statements.

3
00:00:08.700 --> 00:00:12.420
So what I'm going to show you right now is not real code.

4
00:00:12.480 --> 00:00:15.280
It's pseudo code if you haven't heard that term.

5
00:00:15.320 --> 00:00:18.640
It's it's like a combination between English and programming.

6
00:00:18.840 --> 00:00:24.330
So this is going to be pseudo code for an IF statement also called conditional statements which are

7
00:00:24.330 --> 00:00:31.200
the way of implementing the different paths the forking paths in our programs based off of comparisons.

8
00:00:31.200 --> 00:00:34.020
So here's what the pseudo code looks like.

9
00:00:34.080 --> 00:00:36.530
The key words have highlighted in purple.

10
00:00:36.690 --> 00:00:38.290
Excellent color choice.

11
00:00:38.340 --> 00:00:47.930
If elif which I hate this about Python more than anything other languages use LCF but Elif it's just

12
00:00:48.170 --> 00:00:49.390
it's just so bizarre.

13
00:00:49.390 --> 00:00:50.510
And then else.

14
00:00:50.860 --> 00:00:52.610
So we'll go through this and a lot more detail.

15
00:00:52.690 --> 00:00:55.220
But let's just focus on this first line.

16
00:00:55.480 --> 00:00:55.910
So we have.

17
00:00:55.960 --> 00:01:01.600
If and then this is the pseudo code the English portion some condition is true.

18
00:01:01.630 --> 00:01:06.530
So that is not going to fly in Python because it's going to think there's a variable named some and

19
00:01:06.560 --> 00:01:10.550
another one called condition and it doesn't know what we're doing and it's going to freak out.

20
00:01:10.930 --> 00:01:20.110
But we would have something appear like if game equals not over or if winner equals one or if high score

21
00:01:20.110 --> 00:01:29.560
is greater than 99 whatever our comparison would go here it needs to evaluate to true in order for this

22
00:01:29.560 --> 00:01:33.990
code represented by do something also not valid Python.

23
00:01:34.210 --> 00:01:37.830
But this code will only run if this bit is true.

24
00:01:39.330 --> 00:01:43.650
And so if this is false Python moves onto the next line.

25
00:01:43.650 --> 00:01:46.070
Else if if so it's like an otherwise.

26
00:01:46.080 --> 00:01:49.860
If so if the first thing wasn't true then try this one.

27
00:01:50.040 --> 00:01:52.180
So some other different condition.

28
00:01:52.320 --> 00:01:55.130
If that's true do this.

29
00:01:55.140 --> 00:01:56.820
Notice the indentation by the way.

30
00:01:56.970 --> 00:02:01.940
We'll spend more time talking about that but Python is very whitespace sensitive.

31
00:02:02.010 --> 00:02:09.120
That's how it knows what pertains to which part of the F or l l f or the else.

32
00:02:09.120 --> 00:02:12.810
So finally there's else and else is like a catch all otherwise.

33
00:02:12.840 --> 00:02:18.300
So if this first one didn't happen this one wasn't true then this is every other condition or every

34
00:02:18.300 --> 00:02:19.990
other possible situation.

35
00:02:20.130 --> 00:02:21.100
Do this.

36
00:02:21.300 --> 00:02:28.860
I want to mention you do not have to have an Aliff or even an else and you can have more than one if

37
00:02:28.860 --> 00:02:29.630
you want.

38
00:02:29.890 --> 00:02:34.440
So what actually goes in this some condition is true.

39
00:02:34.440 --> 00:02:35.780
Part of the pseudo code.

40
00:02:35.910 --> 00:02:37.160
It can vary a lot.

41
00:02:37.200 --> 00:02:39.700
And we're going to spend a couple of videos talking about it.

42
00:02:39.750 --> 00:02:44.090
We're going to see a really simple example next right after this slide.

43
00:02:44.430 --> 00:02:49.920
In this video where we basically compare a single string to check if it equals another string.

44
00:02:49.920 --> 00:02:54.750
So we'll be able to see if color equals purple if City equals Tokyo.

45
00:02:54.750 --> 00:02:55.750
That sort of thing.

46
00:02:56.040 --> 00:03:01.380
But then there's a lot of other comparisons Well we'll get into as we progress through the next couple

47
00:03:01.380 --> 00:03:02.120
of videos.

48
00:03:02.310 --> 00:03:06.320
But again this first simple example looks something like this.

49
00:03:06.360 --> 00:03:14.700
So another little game of thrones example where we have a variable called name and we're checking if

50
00:03:14.790 --> 00:03:19.310
name is equal to Arya Stark by the way this double equal sign.

51
00:03:19.320 --> 00:03:20.220
We're jumping ahead.

52
00:03:20.220 --> 00:03:22.650
We'll talk more about it in a couple of videos from now.

53
00:03:22.680 --> 00:03:28.850
But it's how you check for equality a single equal sign remember is to assign a variable.

54
00:03:28.860 --> 00:03:34.090
So if we had a single equal sign it would try and save Arrius start into the variable name.

55
00:03:34.140 --> 00:03:35.800
Double means compare them.

56
00:03:35.880 --> 00:03:38.310
So if name is equal to Arya Stark.

57
00:03:38.340 --> 00:03:40.950
So this is the do something if true.

58
00:03:40.950 --> 00:03:44.740
So if this is true do this.

59
00:03:44.930 --> 00:03:48.800
If it's not true try this one is name you called John Snow.

60
00:03:48.800 --> 00:03:51.150
If it is print you know nothing.

61
00:03:51.470 --> 00:03:54.950
If it's not OK then otherwise just print.

62
00:03:54.950 --> 00:03:57.300
Carry on.

63
00:03:57.310 --> 00:04:04.600
So we have three possible outcomes in this single program depending on what name is defined as.

64
00:04:04.660 --> 00:04:06.020
So we have name.

65
00:04:06.200 --> 00:04:11.610
If it's John Snow we get you know nothing printed out if name is Arya Stark.

66
00:04:11.650 --> 00:04:13.900
We get Valer Margulis.

67
00:04:13.930 --> 00:04:19.060
It's like it's a little like catch phrase thing you think it means all men must die.

68
00:04:20.060 --> 00:04:25.420
Otherwise which I'm representing by a star just to mean anything else we get carry on.

69
00:04:25.880 --> 00:04:26.380
OK.

70
00:04:26.450 --> 00:04:32.630
So you can take my word for it or let's go over here to a file I've created called called first example

71
00:04:33.050 --> 00:04:38.550
why I included it if you want to just copy the code and it has the exact same thing.

72
00:04:38.570 --> 00:04:41.670
All that's missing of course is a definition for name.

73
00:04:41.780 --> 00:04:47.010
So we could do name equals input like this or we can hard coded.

74
00:04:47.030 --> 00:04:54.390
So I'm just going to type to start name is John Snow and his safe and I do want to point out.

75
00:04:54.500 --> 00:04:58.020
We will talk more about comparisons but when you compare strings.

76
00:04:58.130 --> 00:04:59.120
Everything matters.

77
00:04:59.120 --> 00:05:07.040
So spacing capitalization at all matters so if I had lowercase J uppercase s it's not going to equal

78
00:05:07.230 --> 00:05:09.100
John Snow with capital J.

79
00:05:09.680 --> 00:05:11.060
But that's for another day.

80
00:05:11.210 --> 00:05:14.070
Well actually for today but later video.

81
00:05:14.150 --> 00:05:15.540
So we'll leave it at John Snow.

82
00:05:15.680 --> 00:05:20.080
And I'm going to go run this Python 3 first example that p y.

83
00:05:21.130 --> 00:05:24.290
So we get you know nothing as you can see here.

84
00:05:24.400 --> 00:05:25.840
Put in Jon Snow.

85
00:05:25.840 --> 00:05:28.310
We get you know nothing.

86
00:05:28.360 --> 00:05:29.600
All right let's change that.

87
00:05:29.670 --> 00:05:32.400
Jay has I mentioned to a lowercase J.

88
00:05:32.410 --> 00:05:33.790
Now what do you think will happen.

89
00:05:33.850 --> 00:05:34.930
What will be printed out.

90
00:05:36.350 --> 00:05:43.150
Let's try it and we get carry on because it's not equal to Arya Stark it's not equal to John Snow any

91
00:05:43.150 --> 00:05:43.450
more.

92
00:05:43.640 --> 00:05:51.710
So we get the otherwise carry on as I did want to show that we don't have to have all these other components.

93
00:05:51.890 --> 00:05:55.130
We could just have a simple IF statement a one off thing.

94
00:05:55.190 --> 00:06:00.000
Maybe there's a single thing we're checking for and there isn't an otherwise we just want to check his

95
00:06:00.050 --> 00:06:01.630
name Arya Stark.

96
00:06:01.760 --> 00:06:03.200
That's totally valid.

97
00:06:04.250 --> 00:06:05.440
Nothing prints out.

98
00:06:05.570 --> 00:06:07.580
But if we do change it to Arya Stark

99
00:06:10.380 --> 00:06:12.450
now we get valid regardless.

100
00:06:12.450 --> 00:06:15.730
The other thing I'll show you is that the indentation does matter.

101
00:06:16.020 --> 00:06:18.500
So if I did this what do you think will happen.

102
00:06:19.690 --> 00:06:21.870
Let's try it.

103
00:06:22.120 --> 00:06:28.810
I get an error because Python tells me hang on wait a minute there was an F line before I was expecting

104
00:06:28.810 --> 00:06:32.890
an indented block afterwards I didn't get one.

105
00:06:32.890 --> 00:06:40.200
So it kind of treats this as if it was just a regular print but it's expecting an indented line.

106
00:06:40.210 --> 00:06:41.200
It doesn't have to be a print.

107
00:06:41.230 --> 00:06:43.270
I should i should be very upfront about that.

108
00:06:43.270 --> 00:06:48.760
We could do a lot of different things in here and we will in fact most the time we won't just be printing

109
00:06:48.760 --> 00:06:49.260
things out.

110
00:06:49.270 --> 00:06:53.030
We just have only learned how to print recently so we're doing that.

111
00:06:53.050 --> 00:06:59.250
The other thing I'll point out indentation the standard is for spaces and sublime.

112
00:06:59.410 --> 00:07:03.930
If you just hit tab in a python file I believe by default it's four.

113
00:07:04.330 --> 00:07:10.160
But you could also just do one two three four or you can set your tab size to be four as well down here.

114
00:07:10.710 --> 00:07:11.260
OK.

115
00:07:11.530 --> 00:07:13.800
So I will uncomment all up.

116
00:07:13.840 --> 00:07:19.900
The last thing I realized I didn't touch on is that we need these colons So these colons are really

117
00:07:19.900 --> 00:07:22.000
really important to Python.

118
00:07:22.120 --> 00:07:29.110
It's kind of like an indicator of there's going to be an indented block below and without them we'll

119
00:07:29.110 --> 00:07:32.170
get a syntax error if you try running this now.

120
00:07:32.950 --> 00:07:34.480
Says invalid syntax.

121
00:07:34.510 --> 00:07:37.080
You can't have an if statement without that colon there.

122
00:07:37.390 --> 00:07:40.760
So I just want to wrap it up by just mentioning the syntax matters.

123
00:07:40.750 --> 00:07:41.930
The indentation matters.

124
00:07:42.130 --> 00:07:47.710
But really this video is more about introducing the concept of these conditional statements.

125
00:07:47.710 --> 00:07:49.970
Getting you used to seeing if an elephant.

126
00:07:49.980 --> 00:07:55.420
Else and this idea of having branching paths because for the next couple of videos we're going to be

127
00:07:55.420 --> 00:08:01.650
focusing a lot on what we can put here or here to make different decisions.

128
00:08:01.750 --> 00:08:04.980
But they all at the end of the day evaluate to TRUE or FALSE.

129
00:08:05.170 --> 00:08:06.010
OK.
