WEBVTT
1
00:00:00.300 --> 00:00:01.080
Welcome back.

2
00:00:01.100 --> 00:00:05.760
In this video I'm just going to walk through some of the common types of assertions we get with unit

3
00:00:05.760 --> 00:00:11.020
test Virdi seen assert equal but there's also assert not equal.

4
00:00:11.280 --> 00:00:17.490
So sometimes you want to make sure you know that a value is not returned any value is OK except for

5
00:00:17.490 --> 00:00:18.370
this one.

6
00:00:18.510 --> 00:00:21.300
So you can use assert not equal.

7
00:00:21.360 --> 00:00:24.670
You also have assert true and assert false.

8
00:00:24.750 --> 00:00:30.200
If you wanted to take a look let's define a new function and just have it be empty.

9
00:00:30.210 --> 00:00:32.540
Let's call it what we call it.

10
00:00:32.550 --> 00:00:33.140
Let's go with.

11
00:00:33.140 --> 00:00:41.840
Def is funny and then it takes in a person a person's name and let's just have it pass.

12
00:00:41.880 --> 00:00:42.310
All right.

13
00:00:42.390 --> 00:00:48.310
So we can go over to our test file and just define a test def test.

14
00:00:48.360 --> 00:00:56.070
Let's go with is funny and we'll pass in Tim for example and let's say Tim is not supposed to be funny.

15
00:00:56.100 --> 00:01:02.930
So I told you self-taught assert and I could do self-taught assert equal and then I would call.

16
00:01:03.030 --> 00:01:10.580
I need to import it first is funny and I could use self-audit assert equal is funny.

17
00:01:10.890 --> 00:01:22.830
When I pass in Tim like this should be false or I can do self assert false is funny.

18
00:01:22.830 --> 00:01:25.250
Tim I like that.

19
00:01:25.260 --> 00:01:27.450
So this is checking that these two things are equal.

20
00:01:27.480 --> 00:01:28.410
This is checking.

21
00:01:28.420 --> 00:01:30.640
This is false which is the same thing.

22
00:01:30.660 --> 00:01:35.020
So I'll come at the top one out was just two self-edit assert false is funny.

23
00:01:35.040 --> 00:01:40.470
The other thing I didn't show in the last video you can include an optional message here like Tim should

24
00:01:40.590 --> 00:01:42.930
not be funny.

25
00:01:43.610 --> 00:01:44.150
OK.

26
00:01:44.490 --> 00:01:47.680
And let's fast forward and add another test.

27
00:01:47.820 --> 00:01:48.230
OK.

28
00:01:48.390 --> 00:01:50.740
I added in test is funny.

29
00:01:50.820 --> 00:01:56.490
Anyone else and I put 3 assertions in here and that's OK because they're all kind of testing the same

30
00:01:56.490 --> 00:01:57.090
thing.

31
00:01:57.330 --> 00:02:02.240
I want to test that when I call is funny with blue or Tamie or spin.

32
00:02:02.370 --> 00:02:03.620
All of them should be true.

33
00:02:03.630 --> 00:02:07.890
So I used to assert true rather than assert false.

34
00:02:07.890 --> 00:02:11.880
So it's not that you can't have more than one assertion in any test function.

35
00:02:11.880 --> 00:02:15.430
It's just that you want to make sure they are testing similar things.

36
00:02:15.600 --> 00:02:16.660
And these are different.

37
00:02:16.660 --> 00:02:17.940
Right I'm singling Tim out.

38
00:02:17.940 --> 00:02:18.820
Sorry Tim.

39
00:02:18.840 --> 00:02:20.570
So you get your own test function.

40
00:02:20.670 --> 00:02:23.840
If I run it now we get one failure only.

41
00:02:23.910 --> 00:02:30.780
And actually the reason that's happening this is important is that instead of getting two failures you

42
00:02:30.780 --> 00:02:32.600
can see that none is not true.

43
00:02:32.610 --> 00:02:40.120
So the blue line is failing here but this actually worked because assert false is actually a cert falsie.

44
00:02:40.260 --> 00:02:43.620
So it's going to check if what was returned.

45
00:02:43.620 --> 00:02:44.420
Nothing right now.

46
00:02:44.430 --> 00:02:45.470
So it's none.

47
00:02:45.480 --> 00:02:49.440
So at the end of the day it's doing is none falsie And that's true.

48
00:02:49.440 --> 00:02:57.190
So actually it might have been better to code this one to double check that Tim is absolutely false.

49
00:02:57.450 --> 00:02:59.450
None is different.

50
00:02:59.490 --> 00:03:02.090
So if I try it now we get two failures.

51
00:03:02.460 --> 00:03:03.060
OK.

52
00:03:03.340 --> 00:03:06.840
Now let's go implement our code to appear.

53
00:03:07.110 --> 00:03:19.270
Well just to let's say if person equals Tim is Tim return False else he'll just return true.

54
00:03:19.280 --> 00:03:20.550
And we don't need an else.

55
00:03:20.550 --> 00:03:24.770
Now if we run our tests as we go everything is working.

56
00:03:24.780 --> 00:03:28.100
One thing I didn't point out when Blue was failing here.

57
00:03:28.500 --> 00:03:32.880
You see we get this message none not true blue should be funny.

58
00:03:32.880 --> 00:03:35.630
So that was what I had added after.

59
00:03:35.640 --> 00:03:36.600
Where's that.

60
00:03:36.630 --> 00:03:38.450
Here we go.

61
00:03:38.610 --> 00:03:45.290
So we put out a message up here with our docstring something like I'm missing a quote area.

62
00:03:45.730 --> 00:03:50.830
You know anyone else but tim should be funny.

63
00:03:51.150 --> 00:03:57.880
And that's like the goal for this entire test function this is for each individual assertion.

64
00:03:58.170 --> 00:03:59.950
So we can see where it's failing.

65
00:04:00.270 --> 00:04:06.430
So if I uncomment this return true we can see exactly what we get.

66
00:04:06.430 --> 00:04:08.530
So it tells us anyone else but tim should be funny.

67
00:04:08.530 --> 00:04:13.190
So that's the test function where things went wrong and the assertion itself was blue.

68
00:04:13.210 --> 00:04:14.250
Should be funny.

69
00:04:14.620 --> 00:04:14.950
OK.

70
00:04:14.980 --> 00:04:21.470
Uncomment that other types of assertions there is a Surt is none and assert is not None.

71
00:04:21.550 --> 00:04:25.210
So if you want to make sure the value you get back is not None.

72
00:04:25.360 --> 00:04:27.780
I've used that one quite quite often.

73
00:04:28.090 --> 00:04:34.840
There's also a search in and assert not in so that we could use that to test if a value is in a range

74
00:04:34.840 --> 00:04:36.990
of values or in a list of values.

75
00:04:37.030 --> 00:04:41.620
And there's also more you can look in the documentation to see those but these are some of the more

76
00:04:41.620 --> 00:04:43.090
commonly used ones.

77
00:04:43.390 --> 00:04:51.910
Let's say I have a function called laugh and life just returns a laughing noise like haha.

78
00:04:51.980 --> 00:04:53.650
Well Tee hee hee.

79
00:04:53.950 --> 00:04:54.630
OK.

80
00:04:54.850 --> 00:04:57.040
So I could write tests for that.

81
00:04:57.040 --> 00:05:02.680
But the problem is you going to randomly pick something in return it to me and testing for randomness

82
00:05:02.860 --> 00:05:03.570
is hard.

83
00:05:03.760 --> 00:05:06.060
But in our case there's only a couple of options.

84
00:05:06.200 --> 00:05:14.470
So we could write def test laugh and we'll just write a self-taught assert in and we'll just call laugh

85
00:05:14.500 --> 00:05:23.350
which I'll need to import up top and the value in math should be in a tuple of ELO well.

86
00:05:23.530 --> 00:05:24.900
Ha ha.

87
00:05:25.340 --> 00:05:28.610
And tee with Tee hee hee hee.

88
00:05:29.110 --> 00:05:29.760
OK.

89
00:05:30.160 --> 00:05:36.490
So this is just going to check if the result a laugh is in this tuple rather than checking if it's exactly

90
00:05:36.490 --> 00:05:38.400
EHLO well or exactly haha.

91
00:05:38.710 --> 00:05:43.510
So every time I run the tests we might get something different from my so we could use this instead

92
00:05:44.440 --> 00:05:52.270
and I'll need to import laugh appear and if I run it right now we get a failure none not found in that

93
00:05:52.270 --> 00:05:54.940
values are not found in that tuple of values.

94
00:05:55.330 --> 00:05:55.810
OK.

95
00:05:55.910 --> 00:06:01.350
So then we just go over here and don't need to import random.

96
00:06:01.340 --> 00:06:10.990
So let's do from random import choice and then we'll just return choice of that tuple and it works OK.

97
00:06:11.000 --> 00:06:12.870
So that's just showing you another assertion.

98
00:06:12.890 --> 00:06:14.440
I'm not going to go through all of them.

99
00:06:14.460 --> 00:06:16.010
They're pretty self-explanatory.

100
00:06:16.250 --> 00:06:21.720
One thing I will single out however is testing for errors so we can use self-doubt.

101
00:06:21.740 --> 00:06:27.200
Assert raises to make sure that we get an error in a certain situation and not only that but we can

102
00:06:27.200 --> 00:06:29.480
also guarantee the type of that error.

103
00:06:29.980 --> 00:06:31.440
So here's an example.

104
00:06:31.640 --> 00:06:39.510
Self-taught assert raises and then we pass an index error and then a slightly different syntax colon.

105
00:06:39.950 --> 00:06:44.410
And then the code that we want that should generate an index error.

106
00:06:44.630 --> 00:06:50.090
In this case l equals the list 123 accessing L bracket 100.

107
00:06:50.120 --> 00:06:51.990
Should give us an index error.

108
00:06:52.010 --> 00:06:53.230
So back to our tests.

109
00:06:53.330 --> 00:06:59.350
Let's say that I want to write a test to make sure that our eat function when you pass in is healthy

110
00:06:59.960 --> 00:07:01.750
if it's healthy is not a boolean.

111
00:07:01.820 --> 00:07:04.880
Then we want a value error to be raised.

112
00:07:05.360 --> 00:07:13.100
So we can to find another test so def test eat and let's go with Eat healthy Bhuiyan we just at our

113
00:07:13.100 --> 00:07:21.440
with statements so with self that assert raises and the type of assertion or the type of exception we

114
00:07:21.440 --> 00:07:23.550
want is a value error.

115
00:07:25.150 --> 00:07:26.760
Ok so it should raise that.

116
00:07:26.950 --> 00:07:31.030
And when should that happen if we ran eat with it doesn't matter.

117
00:07:31.030 --> 00:07:32.030
The first argument.

118
00:07:32.110 --> 00:07:32.760
Pizza.

119
00:07:32.950 --> 00:07:36.030
But then I said is healthy to a string like.

120
00:07:36.250 --> 00:07:38.500
Who cares.

121
00:07:38.500 --> 00:07:39.970
This should give us a value error.

122
00:07:39.970 --> 00:07:42.080
So that's how we write that test.

123
00:07:42.190 --> 00:07:47.760
And let's just add a little documentation appear that just says that C is healthy.

124
00:07:47.810 --> 00:07:49.510
Must be a boolean.

125
00:07:49.540 --> 00:07:51.840
Let's just go with Boole right now.

126
00:07:51.850 --> 00:07:56.430
If I run it we get a failure value error was not raised.

127
00:07:56.470 --> 00:07:59.820
So it tells us I was expecting that and it didn't happen.

128
00:08:00.220 --> 00:08:03.540
So let's now implement that over here and eat.

129
00:08:03.550 --> 00:08:10.030
We're just going to add a check if it's healthy it's not an instance of Boullion then we'll raise value

130
00:08:10.030 --> 00:08:10.860
ever.

131
00:08:10.990 --> 00:08:14.290
So down here let's just do that at the very beginning actually.

132
00:08:14.290 --> 00:08:25.000
So if is healthy and how do we check if it's an instance we do is instance is healthy come a Boole but

133
00:08:25.000 --> 00:08:27.350
we want to check if it's not.

134
00:08:27.370 --> 00:08:37.270
So if this is false if that's the case we will raise a value error and let's have a message that just

135
00:08:37.270 --> 00:08:42.910
says is healthy must be a boolean.

136
00:08:42.910 --> 00:08:48.160
Now if we run our tests it passes and you can see all of these messages I'm using for both.

137
00:08:48.160 --> 00:08:49.150
We take them off.

138
00:08:49.150 --> 00:08:50.250
Everything passes.

139
00:08:50.490 --> 00:08:51.690
It's pretty cool.

140
00:08:51.700 --> 00:08:53.950
So that is unit tests in a nutshell.

141
00:08:53.950 --> 00:08:59.620
Next I'm going to show you some nice features that you can test comes with that allows us to add code

142
00:08:59.620 --> 00:09:02.640
before and after our tests so we can reduce duplication.

143
00:09:02.650 --> 00:09:08.140
This is the base recipe for testing with the unit test to find your class and must inherit from unit

144
00:09:08.140 --> 00:09:10.320
test that test case at the end.

145
00:09:10.390 --> 00:09:14.940
You call you know test I main and then here you to find your test functions.

146
00:09:15.070 --> 00:09:20.730
Each test case has at least one assertion inside of it and there's a bunch of these assert helpers.

147
00:09:21.030 --> 00:09:21.640
All righty.
