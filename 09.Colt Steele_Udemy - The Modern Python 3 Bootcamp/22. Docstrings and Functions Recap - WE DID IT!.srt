1
00:00:00,270 --> 00:00:04,240
Welcome to the last video and this section on functions it's been a whirlwind.

2
00:00:04,270 --> 00:00:07,090
Learned a lot hopefully did a couple of exercises.

3
00:00:07,110 --> 00:00:13,360
If not we have a ton coming up the next section is all exercises bunch of practice hopefully.

4
00:00:13,620 --> 00:00:18,900
But the last thing we're going to talk about here before we do a recap is how we document our functions

5
00:00:19,140 --> 00:00:26,040
and Python comes the very special way of adding documentation of adding little messages to each function

6
00:00:26,040 --> 00:00:27,550
that explain what they do.

7
00:00:27,840 --> 00:00:28,720
And it looks like this.

8
00:00:28,740 --> 00:00:35,340
We use triple double quotes so three double quotes and then a message and then three double quotes and

9
00:00:35,340 --> 00:00:41,180
it's always the first line of function and you don't have to do it for every single function ever.

10
00:00:41,180 --> 00:00:46,590
You know we won't do it for most things but if we do any complex projects well when we do complex projects

11
00:00:46,950 --> 00:00:49,580
it will be nice to be able to document what each function does.

12
00:00:49,770 --> 00:00:53,270
So first line of the function triple double quotes.

13
00:00:53,550 --> 00:00:59,130
This one we say a simple function that returns a string hello and this is not just a little comment

14
00:00:59,130 --> 00:01:06,300
feature but you can actually access it by referring to the function and then using the dot double underscore

15
00:01:06,330 --> 00:01:11,810
doc double underscore and that will it's a property generated automatically by this.

16
00:01:11,880 --> 00:01:16,020
That will then retrieve whatever we put inside those triple double quotes.

17
00:01:16,020 --> 00:01:19,170
So for example print we've been using print all the time.

18
00:01:19,170 --> 00:01:26,370
If we do print out double underscore doc double underscore we get a little message that says print the

19
00:01:26,370 --> 00:01:28,110
values to a stream.

20
00:01:28,240 --> 00:01:29,480
There's a bunch of stuff here.

21
00:01:29,820 --> 00:01:32,630
You know add to add a new line at the end that sort of thing.

22
00:01:32,790 --> 00:01:36,870
Or let's look at random dot Rand int which you have to import.

23
00:01:36,930 --> 00:01:38,830
So let's import random.

24
00:01:38,830 --> 00:01:46,530
And if we do dot doc return random and integer in range including both end points.

25
00:01:46,590 --> 00:01:56,410
And lastly let's just make a list dot pop dot Doc and it says removes and return items and index defaults

26
00:01:56,440 --> 00:01:58,680
to last raises index error.

27
00:01:58,690 --> 00:02:03,760
If a list is empty or index is out of range so this all just goes to show that all the built in functions

28
00:02:03,760 --> 00:02:04,570
have this.

29
00:02:04,570 --> 00:02:07,360
And we can define our own when we define the function.

30
00:02:07,360 --> 00:02:14,080
So in our xponent function triple double quotes just like this first line of the function.

31
00:02:14,080 --> 00:02:15,870
So we could just say something like this.

32
00:02:16,020 --> 00:02:21,850
Exponent power raises no to specified power power defaults to.

33
00:02:21,970 --> 00:02:24,650
Just like a little note that explains how this works.

34
00:02:24,850 --> 00:02:31,720
And by default nothing will happen but maybe at the end we'll do a print xponent dot double underscore

35
00:02:31,930 --> 00:02:34,750
and we want doc double underscore.

36
00:02:34,750 --> 00:02:40,810
And now if I try running Python 3 xponent we get the same values but then at the end it just prints

37
00:02:40,810 --> 00:02:42,160
to me that docstring.

38
00:02:42,430 --> 00:02:42,760
OK.

39
00:02:42,780 --> 00:02:44,200
So that's all there is to that.

40
00:02:44,200 --> 00:02:46,990
It doesn't have any other functionality that's it.

41
00:02:46,990 --> 00:02:49,960
So lastly let's recap all the ground we've covered.

42
00:02:50,080 --> 00:02:55,480
There's a lot we've learned so we've seen that functions are just procedures for executing code to a

43
00:02:55,480 --> 00:03:00,490
couple of lines or more maybe 100 more lines although that's not a good idea to have them that long

44
00:03:00,820 --> 00:03:06,550
but once you code with a name sometimes to take inputs and often they have outputs they spit something

45
00:03:06,550 --> 00:03:10,630
out at the end using the return keyword to create inputs.

46
00:03:10,660 --> 00:03:16,690
We make parameters which can have default values we call those default parameters we assign those with

47
00:03:16,690 --> 00:03:17,530
an equal sign.

48
00:03:17,560 --> 00:03:21,150
Variables defined inside of functions are scoped to that function.

49
00:03:21,250 --> 00:03:27,100
So remember that scope is a thing that is kind of a painful video probably but we talked about how when

50
00:03:27,100 --> 00:03:32,620
you have a function if you define a variable inside it it exists only inside that function and not afterwards

51
00:03:32,650 --> 00:03:33,730
not beforehand.

52
00:03:33,730 --> 00:03:40,510
Only in that function when invoking a function we can pass in keyword arguments in any order where we

53
00:03:40,510 --> 00:03:41,860
use the equal sign.

54
00:03:41,860 --> 00:03:47,170
It's different than default parameters because it's inside of the function invocation set of thing in

55
00:03:47,170 --> 00:03:48,100
vocation.

56
00:03:48,100 --> 00:03:52,990
When we execute the function we'll see this a lot more later when we talked about dictionaries and unpacking

57
00:03:52,990 --> 00:03:53,720
them.

58
00:03:54,130 --> 00:03:59,920
Finally be careful not to return too early in your conditional logic and refactor when you can to remove

59
00:03:59,950 --> 00:04:01,780
unnecessary conditional logic.

60
00:04:01,990 --> 00:04:03,840
Make sure you don't return in a loop as well.

61
00:04:03,860 --> 00:04:08,510
So remember in that video I showed two common mistakes that were made when using return statements.

62
00:04:08,590 --> 00:04:09,340
Oh boy.

63
00:04:09,420 --> 00:04:14,860
Yeah there's a lot we learned a lot in this section and hopefully you enjoyed some of the smaller exercises

64
00:04:14,860 --> 00:04:21,220
I sprinkled in throughout the last section but after this immediately following this video is a section

65
00:04:21,250 --> 00:04:25,540
of 10 or more maybe more like 15 exercises.

66
00:04:25,540 --> 00:04:31,540
All in the browser with a bunch of tests written that all will challenge your skills at writing functions

67
00:04:31,630 --> 00:04:36,510
and they should be arranged in difficulty from easiest to hardest but that is slightly subjective.

68
00:04:36,640 --> 00:04:38,200
So I'd start at the beginning.

69
00:04:38,200 --> 00:04:42,130
You don't have to do all of them you don't have to do any of them but I recommend you attempt to do

70
00:04:42,130 --> 00:04:45,260
them because it's good practice and it took a long time to make them.

71
00:04:45,490 --> 00:04:46,730
So enjoy that hopefully.

72
00:04:46,780 --> 00:04:49,660
And then afterwards we're going to talk more about functions.

73
00:04:49,660 --> 00:04:52,690
Some of the more advanced topics around them see and a bit.
