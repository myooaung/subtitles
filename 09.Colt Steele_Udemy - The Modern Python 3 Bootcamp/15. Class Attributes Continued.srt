1
00:00:07,420 --> 00:00:10,210
OK so that's one use case for a class attribute.

2
00:00:10,280 --> 00:00:16,750
Keeping track of things sort of like analytics if you will about the individual instances of the classes.

3
00:00:16,820 --> 00:00:18,670
How many have been made.

4
00:00:18,680 --> 00:00:21,540
The average of something across all of them.

5
00:00:21,560 --> 00:00:25,970
Now another common use case would be to actually create validations.

6
00:00:25,970 --> 00:00:27,040
So let me show you what I mean.

7
00:00:27,110 --> 00:00:27,520
OK.

8
00:00:27,560 --> 00:00:29,580
So I made a new file called Pet.

9
00:00:29,730 --> 00:00:30,330
Why.

10
00:00:30,550 --> 00:00:36,910
And the idea here going to make a pick class that each pet has a name and a species instance attribute

11
00:00:37,160 --> 00:00:38,520
so name could be fluffy.

12
00:00:38,540 --> 00:00:42,680
Species could be dog but we're not going to stop there.

13
00:00:42,710 --> 00:00:46,850
We're actually going to create a list of permitted species for pets.

14
00:00:46,970 --> 00:00:53,780
So we're not going to allow someone to have you know a three headed dog as a pet or a crocodile or a

15
00:00:54,230 --> 00:00:55,430
lion or something.

16
00:00:55,460 --> 00:01:02,160
So we're just going to create a class attribute that's going to store the list of permitted species.

17
00:01:02,160 --> 00:01:04,950
So let's start by just doing class pet.

18
00:01:05,340 --> 00:01:13,660
Well define our simple knit self first then let's go with name and species just like this.

19
00:01:13,970 --> 00:01:22,520
And let's just do self-taught name equals name self-taught species equal species kind of boilerplate

20
00:01:22,520 --> 00:01:27,940
ish in our initialize method and we can just begin by doing.

21
00:01:28,040 --> 00:01:33,930
I don't know cat equals pet and name will be blue.

22
00:01:34,130 --> 00:01:39,860
Species will be cat and then we'll do one more and it will be a dog.

23
00:01:40,190 --> 00:01:45,110
Dog will be called Why it and species is dog.

24
00:01:45,260 --> 00:01:45,500
All right.

25
00:01:45,500 --> 00:01:47,170
So this is all review.

26
00:01:47,180 --> 00:01:50,100
Now the thing is I don't want to allow someone to do pet.

27
00:01:50,290 --> 00:01:53,750
Fluffy is a tiger for example.

28
00:01:53,930 --> 00:02:01,610
And to prevent that I'll create a class attribute called Let's go with a loud and in here we'll just

29
00:02:01,610 --> 00:02:07,610
put in things like cat dog fish and let's do that as well.

30
00:02:07,610 --> 00:02:12,270
I apologize if your favorite pet is not here just for the sake of keeping this brief.

31
00:02:12,320 --> 00:02:15,060
I'm not going to add in every possible pet.

32
00:02:15,400 --> 00:02:15,850
OK.

33
00:02:15,890 --> 00:02:20,230
So these are the allowed pets and this could be a class attribute.

34
00:02:20,450 --> 00:02:25,850
Well it will be in our example but it actually doesn't have to be all I'll talk about when you would

35
00:02:25,850 --> 00:02:29,750
make something a class attribute versus when you would just move it into a net.

36
00:02:29,780 --> 00:02:33,360
But for now let's just keep it as a class attribute called allowed.

37
00:02:33,710 --> 00:02:42,180
And all we're doing here is add a little check if species not in a.

38
00:02:42,590 --> 00:02:50,840
And it can't just reference allowed and need to reference pet dot allowed or alternatively This is something

39
00:02:50,840 --> 00:02:51,430
we haven't seen.

40
00:02:51,440 --> 00:02:57,280
I can actually use self allowed which is the syntax we use for an instance attribute.

41
00:02:57,350 --> 00:03:00,590
I will come back to that but let's leave it at pet allowed.

42
00:03:00,620 --> 00:03:07,280
So if species is not in pet allowed Let's raise a value error and just have an F string in there that

43
00:03:07,280 --> 00:03:14,120
says something like You can't have a and then to add the species in pet.

44
00:03:14,120 --> 00:03:15,630
All right you can have a crocodile pet.

45
00:03:15,650 --> 00:03:18,420
You can't have a grizzly bear pet.

46
00:03:18,630 --> 00:03:19,340
OK.

47
00:03:19,430 --> 00:03:24,050
Otherwise we'll just add name and species as instance attributes.

48
00:03:24,050 --> 00:03:26,680
So at this point I'll copy this over.

49
00:03:26,710 --> 00:03:31,270
Move toward terminal open a Python 3 and it make a new pet.

50
00:03:31,370 --> 00:03:37,410
Let's go with Tony and Tony is a tiger that's not in a loud.

51
00:03:37,490 --> 00:03:38,780
So I get value error.

52
00:03:38,780 --> 00:03:40,270
You can't have a tiger pet.

53
00:03:40,670 --> 00:03:51,920
But if I just do pet let's do a variable C equals PED's and it will be blue again which is a cat C works

54
00:03:51,920 --> 00:03:52,830
just fine.

55
00:03:53,030 --> 00:03:53,420
OK.

56
00:03:53,540 --> 00:03:55,770
So we have a class attribute allowed.

57
00:03:55,790 --> 00:04:01,480
Now the question you might have is a perfectly valid question is why does that need to be a class attribute.

58
00:04:01,610 --> 00:04:04,430
We're only using it inside of this init method.

59
00:04:04,460 --> 00:04:10,380
We could just move it in here into the method and just change this to be in a cloud.

60
00:04:10,400 --> 00:04:11,740
This is not a class attribute.

61
00:04:11,750 --> 00:04:14,610
This is not an instance attribute either.

62
00:04:14,630 --> 00:04:16,900
This is just part of the init method.

63
00:04:16,970 --> 00:04:18,510
It exists in that scope.

64
00:04:18,530 --> 00:04:24,950
If I just copy it over and paste everything I look at cat or let's try doing pet allowed.

65
00:04:25,220 --> 00:04:31,280
It's no longer defined because we don't it's not a class attribute but I also can't do cat not allowed

66
00:04:31,790 --> 00:04:34,410
either or dog got allowed.

67
00:04:34,700 --> 00:04:40,940
It only exists in this method and if possible you want that to happen if you don't need access to this

68
00:04:40,940 --> 00:04:43,980
in any other method you're only using it in a net.

69
00:04:44,000 --> 00:04:44,940
Put it here.

70
00:04:45,070 --> 00:04:53,660
However let's say that I wanted to also prevent a user from changing dog species manually because right

71
00:04:53,660 --> 00:05:00,170
now there's nothing stopping someone from doing dog that species equals Tiger and just overwriting the

72
00:05:00,170 --> 00:05:03,080
species property after we initialize.

73
00:05:03,290 --> 00:05:05,590
As you can see here I have dog.

74
00:05:05,810 --> 00:05:09,920
I could do d'Agde out species equals whatever I want Tiger.

75
00:05:10,490 --> 00:05:11,330
No problem.

76
00:05:11,360 --> 00:05:17,210
And technically we don't really have a way to officially prevent that but what we could do is create

77
00:05:17,240 --> 00:05:26,000
a method and that method could be def change or the standard would be to call it set species and then

78
00:05:26,000 --> 00:05:28,550
it should take in species.

79
00:05:28,550 --> 00:05:30,860
And also we need self.

80
00:05:31,160 --> 00:05:39,800
And then all that we would do here is set self species equal species but we want to do the exact same

81
00:05:39,800 --> 00:05:42,550
thing where we check if it's allowed.

82
00:05:42,590 --> 00:05:47,980
So rather than copying a loud over here again where now we're defining allowed twice.

83
00:05:48,080 --> 00:05:54,440
Not to mention the fact that what if we change allowed we we add a species in there or we remove a species

84
00:05:54,740 --> 00:06:00,620
we don't want to have two copies so we can make a single copy the class attribute go back to that and

85
00:06:00,620 --> 00:06:04,520
then changes to be pet that allowed.

86
00:06:04,550 --> 00:06:11,120
And then here we don't need to redefine it and we just do our if and I'll just copy this exact same

87
00:06:11,120 --> 00:06:13,140
thing.

88
00:06:13,750 --> 00:06:21,440
I missed the beginning but now we have our same check if species not in pet allowed raise the same error

89
00:06:21,980 --> 00:06:26,930
and then otherwise set species to be the new species Paiste everything.

90
00:06:26,930 --> 00:06:35,780
Now if I look at cat that species cat that I could change it using cat set species and the new species

91
00:06:36,020 --> 00:06:44,030
I try and set it to Tiger I get an error but if I try and change it to a rodent or would we have rat

92
00:06:44,690 --> 00:06:45,560
that works.

93
00:06:45,590 --> 00:06:49,340
And now if I look at cat species it's rat.

94
00:06:49,520 --> 00:06:53,870
And so then we have pet allowed is still cat dog fish and RAT.

95
00:06:53,870 --> 00:06:55,390
Now here's the cool thing.

96
00:06:55,460 --> 00:06:56,650
I mean Cool's an overstatement.

97
00:06:56,660 --> 00:07:02,200
But here's the thing that I can do if I add something to a loud pet dog allowed.

98
00:07:02,300 --> 00:07:07,070
And I do not append what would be a new species said it's allowed.

99
00:07:07,070 --> 00:07:11,240
How about hamster.

100
00:07:11,390 --> 00:07:12,690
OK pig pig.

101
00:07:12,920 --> 00:07:13,940
There we go.

102
00:07:13,940 --> 00:07:21,770
So now if I look at pet dog allowed it contains pig and I don't have to update anything in order for

103
00:07:21,770 --> 00:07:22,670
my cat.

104
00:07:22,700 --> 00:07:30,860
That said species to work I can now set it to pig because we said aloud as a class attribute when I

105
00:07:30,860 --> 00:07:31,750
updated it.

106
00:07:31,880 --> 00:07:39,050
All of our pet instances the individual objects know that pet dog allowed is now one thing longer it

107
00:07:39,050 --> 00:07:40,400
contains pig.

108
00:07:40,890 --> 00:07:47,810
So now I can set cat species to be pig which makes absolutely no sense but cat is now a pig.

109
00:07:48,020 --> 00:07:49,790
So here's a little diagram I threw together.

110
00:07:49,820 --> 00:07:52,340
It's kind of messy but it shows what's happening.

111
00:07:52,460 --> 00:07:56,590
So we have the pet class with a single class attribute called aloud.

112
00:07:56,870 --> 00:08:01,200
In this case just to make it fit in this block I only added dog and cat.

113
00:08:01,430 --> 00:08:03,710
Then we have each pet instance.

114
00:08:03,710 --> 00:08:09,200
This first one has a name an instance attribute called name set to Fluffy instance that should be called

115
00:08:09,200 --> 00:08:16,250
Species said to dog and then it has this thing called allowed but it's actually pointing to the pet

116
00:08:16,250 --> 00:08:19,810
class attribute allowed the same thing over here.

117
00:08:19,820 --> 00:08:26,180
So when I say that it has an attribute called allowed on the instance that's technically true but it's

118
00:08:26,270 --> 00:08:29,750
only referring to the same pet class attribute.

119
00:08:29,790 --> 00:08:32,330
It's very kind difficult thing to talk about.

120
00:08:32,390 --> 00:08:38,930
But let me show you with concrete memory address proof that they are pointing to the same pet class

121
00:08:38,990 --> 00:08:39,570
allowed.

122
00:08:39,700 --> 00:08:39,940
OK.

123
00:08:39,950 --> 00:08:45,640
So we have two pets we have cat and cat has a name which is blue and then we have dog.

124
00:08:45,650 --> 00:08:51,600
Another instance of pet and dog has a name which is why it so they have your own individual copies of

125
00:08:51,600 --> 00:08:58,370
name they are instance attributes and then we saw pet dot aloud which is a class attribute.

126
00:08:58,560 --> 00:09:05,430
But the thing is that cat actually has its own attribute called aloud and dog has an attribute called

127
00:09:05,430 --> 00:09:06,680
aloud as well.

128
00:09:07,500 --> 00:09:14,070
And they are not unique individual copies and to prove to you and I'm talking about there's this function

129
00:09:14,070 --> 00:09:15,100
called ID.

130
00:09:15,180 --> 00:09:22,230
We haven't really seen before but if I run cat that allowed this is going to give me the unique ID that

131
00:09:22,230 --> 00:09:24,060
Python assigns things.

132
00:09:24,600 --> 00:09:26,380
So look at this number here.

133
00:09:26,550 --> 00:09:31,420
Don't memorize it or anything but I'm going to do the same thing with dog allowed.

134
00:09:31,920 --> 00:09:32,470
OK.

135
00:09:33,600 --> 00:09:35,290
And they are identical.

136
00:09:35,310 --> 00:09:39,230
And one more thing for a change to pet that allowed.

137
00:09:39,240 --> 00:09:40,500
They are all the same.

138
00:09:40,500 --> 00:09:46,800
So what this shows this is that cat that allowed dog that allowed pet dog allowed all point they all

139
00:09:46,800 --> 00:09:50,490
refer to the exact same pet class attribute.

140
00:09:50,490 --> 00:09:55,170
There's only one allowed attribute even though it's kind of weird.

141
00:09:55,260 --> 00:09:59,490
And this is something that's somewhat unique to Python at least compared to some of the other languages

142
00:09:59,520 --> 00:10:04,800
I've worked with personally where the actual instances still can access allowed.

143
00:10:04,860 --> 00:10:07,350
You don't have to go through Kapilow pet.

144
00:10:07,440 --> 00:10:13,470
You can go through the instance but this is just a reference to pet dog allowed hence the little arrow

145
00:10:13,470 --> 00:10:20,910
here and that does mean that inside of our class I could create the class attribute allowed and refer

146
00:10:20,910 --> 00:10:25,950
to it using self that allowed like this instead of pet that allowed.

147
00:10:25,950 --> 00:10:28,220
I prefer to do that allowed.

148
00:10:28,230 --> 00:10:30,570
It makes it very clear that this is a class attribute.

149
00:10:30,720 --> 00:10:37,830
But self would work here as long as we're not updating or assigning value to self-taught allowed.

150
00:10:37,890 --> 00:10:39,270
We're just accessing it.

151
00:10:39,270 --> 00:10:41,100
It's going to access pet allowed.

152
00:10:41,160 --> 00:10:46,740
But the moment I do something like this so we have pet that allowed already this list and we have cat

153
00:10:46,770 --> 00:10:57,300
that allowed if I change to cat allowed to now be a list that just contains Tiger and bear like this.

154
00:10:58,450 --> 00:11:01,830
And I look at Cat aloud it's now Tiger Mbare.

155
00:11:02,080 --> 00:11:07,140
And if I look at pet that allowed there they're not the same thing anymore.

156
00:11:07,210 --> 00:11:13,950
So what I've done is actually made an instance attribute called aloud and set it to this only on cat.

157
00:11:14,230 --> 00:11:18,570
So dog allowed is still referring to the class attribute.

158
00:11:18,960 --> 00:11:25,150
Oh I am worried about this explanation it's kind of a lot I'm saying aloud a lot.

159
00:11:25,150 --> 00:11:28,040
It really doesn't seem like a real word to me anymore.

160
00:11:28,240 --> 00:11:35,260
Repeated it too much but hopefully this right here helps illustrate my point that the individual instances

161
00:11:35,260 --> 00:11:42,340
are referring to the pet attribute on the pet class and that when we set cat up allowed to Tiger and

162
00:11:42,340 --> 00:11:48,650
bear we overrode this arrow we kind of severed this connection and we gave cat its own version of allowed

163
00:11:48,940 --> 00:11:51,120
but dog is still pointing to the pet class.

164
00:11:51,160 --> 00:11:55,990
To summarize everything we've seen in this video has and a lot of class attributes exist on the class

165
00:11:56,080 --> 00:12:01,750
you can use them for things like keeping track of analytics or you know a count of how many instances

166
00:12:01,750 --> 00:12:03,100
have been created.

167
00:12:03,100 --> 00:12:06,640
You can use them for things like validations as we've seen here.

168
00:12:06,640 --> 00:12:11,860
However if we were only using this once when you know a new pet was initialized it would be better to

169
00:12:11,860 --> 00:12:17,200
not make it a class attribute just put it in this method and it goes away after the method is done just

170
00:12:17,200 --> 00:12:19,360
like any other method or function we've defined.

171
00:12:19,690 --> 00:12:23,330
But because we wanted to use it more than once we use it down here as well.

172
00:12:23,440 --> 00:12:28,450
And on top of that we don't need a unique version of this and every single instance of pet We made it

173
00:12:28,480 --> 00:12:31,020
a class variable that exists once.

174
00:12:31,130 --> 00:12:31,610
OK.

175
00:12:31,910 --> 00:12:33,200
This is kind of long.

176
00:12:33,250 --> 00:12:34,510
I apologize for that.

177
00:12:34,510 --> 00:12:36,190
There's a lot to talk about here.

178
00:12:36,190 --> 00:12:42,490
Next up if you get more practice to finding your own another class and another class with a class attribute.
