1
00:00:00,150 --> 00:00:00,700
OK.

2
00:00:00,810 --> 00:00:02,450
So there are two types of loops.

3
00:00:02,460 --> 00:00:06,630
We're going to focus on in this section the for loop and the While loop.

4
00:00:06,630 --> 00:00:07,690
And that's pretty much it.

5
00:00:07,710 --> 00:00:09,770
Just two new pieces of syntax.

6
00:00:09,870 --> 00:00:12,840
They can just both be used in a bunch of different ways.

7
00:00:12,930 --> 00:00:17,160
So you can probably tell we're starting off with the for loop for this video and the next couple of

8
00:00:17,160 --> 00:00:19,890
videos will dive into things like the syntax.

9
00:00:19,980 --> 00:00:25,560
Some of the quirks of using for loops as well as a bunch of examples and use cases and the first thing

10
00:00:25,560 --> 00:00:29,040
we should talk about is what how the for loop actually works.

11
00:00:29,040 --> 00:00:31,520
What's the conceptual idea behind it.

12
00:00:31,590 --> 00:00:37,200
So the idea is that we have a collection of data something that we can iterate over something we can

13
00:00:37,200 --> 00:00:38,550
loop through.

14
00:00:38,550 --> 00:00:45,150
So examples might include a list of numbers which we haven't really talked about lists yet or it might

15
00:00:45,150 --> 00:00:52,910
be something like a string hello or any string and we could loop over for every character.

16
00:00:52,950 --> 00:00:54,760
So that's where the word for comes from.

17
00:00:54,840 --> 00:01:00,900
It's referring to the idea that we want to do something for every item in this list for every character

18
00:01:00,900 --> 00:01:04,340
in this string or for every number in this range.

19
00:01:04,470 --> 00:01:08,640
And we haven't talked about ranges either so don't panic if that's unfamiliar.

20
00:01:08,640 --> 00:01:12,810
We will see them in this video and we'll focus a lot and the next video on ranges.

21
00:01:12,820 --> 00:01:17,210
But these are three potential things we could loop over using a for loop.

22
00:01:17,820 --> 00:01:19,210
So here's the syntax.

23
00:01:19,500 --> 00:01:26,820
The first thing I'll point out for and in the words in green do not change they are Python syntax just

24
00:01:26,820 --> 00:01:32,880
like if and Elif and else you don't control those you put them there if you want Python to make this

25
00:01:32,880 --> 00:01:37,310
a loop but item and iterable object are up to you.

26
00:01:37,440 --> 00:01:40,650
So we'll start with iterable object iterable object.

27
00:01:40,680 --> 00:01:47,340
Besides being a bit difficult to say three times fast is referring to the collection of data that that's

28
00:01:47,360 --> 00:01:49,510
basically what I was showing you here.

29
00:01:49,590 --> 00:01:52,300
These are all potential things to iterate over.

30
00:01:52,320 --> 00:01:59,640
So these would be the iterable object and then item is really up to you entirely what you want to call

31
00:01:59,640 --> 00:01:59,970
it.

32
00:02:00,120 --> 00:02:07,020
It's just going to be a temporary variable and it references the current position of an iterator within

33
00:02:07,230 --> 00:02:08,120
the iterable.

34
00:02:08,250 --> 00:02:14,450
Yes I know it's a lot of jargon there but it represents wherever we are in the loop currently.

35
00:02:14,520 --> 00:02:19,390
So it will iterate over and run through every item in this collection.

36
00:02:19,890 --> 00:02:26,760
And then after the loop finishes item we'll just go away each time through its value changes.

37
00:02:26,760 --> 00:02:28,330
So let me make that a bit clearer.

38
00:02:28,350 --> 00:02:30,010
Let's say we're working with a string.

39
00:02:30,450 --> 00:02:32,710
So we could have four.

40
00:02:33,120 --> 00:02:37,160
And let's just call this char in Hello.

41
00:02:38,520 --> 00:02:43,860
Each time through char is going to represent a single character in the string.

42
00:02:43,860 --> 00:02:46,970
So it would start off the first time through the loop as H.

43
00:02:47,340 --> 00:02:53,940
And if we could do something like print char and then the loop finishes and it starts over and it goes

44
00:02:53,940 --> 00:02:54,590
to e.

45
00:02:54,660 --> 00:02:56,940
So char is then e n l and out.

46
00:02:56,970 --> 00:03:01,170
And until we hit the end of the string and then char just disappears.

47
00:03:01,620 --> 00:03:05,550
Same thing for a list up here or a range.

48
00:03:05,550 --> 00:03:11,160
We'll talk about ranges again in much more detail but the idea is that whatever this variable is called

49
00:03:11,580 --> 00:03:18,060
represents a single part of the iterable collection and it's constantly updating each time through the

50
00:03:18,060 --> 00:03:20,900
loop until it hits the end.

51
00:03:20,910 --> 00:03:25,180
So here's an example we haven't discussed ranges yet so you'll have to bear with me.

52
00:03:25,290 --> 00:03:32,550
But the idea is that a range is a way of quickly generating numbers in a specific range.

53
00:03:32,550 --> 00:03:37,630
So an example like this is going to generate the numbers 1 through 7.

54
00:03:37,950 --> 00:03:44,390
So if we write range 1 come at 8 it actually generates numbers 1 all the way up to 7.

55
00:03:44,390 --> 00:03:49,860
So with this syntax here for number in range one comment at.

56
00:03:50,030 --> 00:03:53,230
You could kind of replace range with this number line here.

57
00:03:53,550 --> 00:03:59,180
And each time through the loop we need that colon and everything indented underneath that just like

58
00:03:59,180 --> 00:04:02,960
a conditional is going to run every time through the loop.

59
00:04:02,960 --> 00:04:04,920
So in this case it starts off.

60
00:04:04,940 --> 00:04:06,890
And number is set equal to 1.

61
00:04:06,890 --> 00:04:08,440
The first part of the range.

62
00:04:08,600 --> 00:04:12,660
So we print a number which is 1 then the loop starts over.

63
00:04:12,860 --> 00:04:14,410
And number is set to 2.

64
00:04:14,450 --> 00:04:15,770
The next part of the range.

65
00:04:15,850 --> 00:04:18,850
We print 2 and I'll step through this quicker.

66
00:04:19,020 --> 00:04:21,990
If we keep going all the way to the end of the range and then we're done.

67
00:04:22,160 --> 00:04:24,140
OK let's just try it out on our own.

68
00:04:24,230 --> 00:04:27,990
So I'll make a new file and I'll just call it for p y.

69
00:04:28,610 --> 00:04:34,700
And the first thing we'll do is the exact same for loop that we just had so for and this time I'll just

70
00:04:34,700 --> 00:04:39,900
call it X in the range of 1 and this time.

71
00:04:39,980 --> 00:04:41,040
Let's go to 10.

72
00:04:41,420 --> 00:04:45,290
So it's actually 1 through 9 and we need our colon.

73
00:04:45,620 --> 00:04:48,210
And we can start by just printing x.

74
00:04:48,440 --> 00:04:55,450
Save the file and we'll run Python 3 for that P Y and you can see it prints out 1 through 9.

75
00:04:55,730 --> 00:04:59,340
And just like conditionals we can have as many lines as we want inside of here.

76
00:04:59,420 --> 00:05:04,910
So I could also do print x times X let's square it.

77
00:05:04,910 --> 00:05:10,350
So this time run it again and we get 1 1 2 4 3 9.

78
00:05:10,430 --> 00:05:12,900
So we get the number and then it's square.

79
00:05:13,700 --> 00:05:18,990
OK so I'll come with this one out and let's do instead of arr..

80
00:05:19,100 --> 00:05:22,670
Let's work with another iterable collection this time a string.

81
00:05:22,850 --> 00:05:24,740
Let's use a string coffee.

82
00:05:25,150 --> 00:05:25,660
OK.

83
00:05:25,850 --> 00:05:35,360
So we'll do 4 and we could name this char or C or X or letter whatever we want as long as it's a valid

84
00:05:35,360 --> 00:05:37,100
variable name in Python.

85
00:05:37,100 --> 00:05:47,060
I'll go with it kind of like a letter in coffee and we can start simple by just printing Lutter go back

86
00:05:47,060 --> 00:05:51,460
here rerun it and it just prints out each line individually.

87
00:05:52,130 --> 00:05:56,190
Or we could do something silly like the letter times 10.

88
00:05:56,720 --> 00:05:58,950
And now we get.

89
00:05:59,540 --> 00:06:00,850
And I'll stop there for now.

90
00:06:00,860 --> 00:06:05,960
So the two things to take away from this in the syntax at least we have an iterable collection.

91
00:06:05,990 --> 00:06:06,950
We saw string.

92
00:06:07,100 --> 00:06:13,190
We saw a range which we'll revisit in the next video and then a variable that we make up it refers to

93
00:06:13,310 --> 00:06:19,850
the individual character the individual number whatever the item is or the piece of data in the iterable

94
00:06:19,850 --> 00:06:20,970
collection.

95
00:06:20,990 --> 00:06:22,360
Each time we go through the loop.

96
00:06:22,530 --> 00:06:22,990
OK.

97
00:06:23,120 --> 00:06:28,240
Yeah it's kind of it's a lot to talk about upfront but I think examples helped make it clearer.

98
00:06:28,400 --> 00:06:30,560
So again next step we're talking about Granges.
