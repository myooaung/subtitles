1
00:00:00,330 --> 00:00:04,200
A Welcome Back in this video we're continuing with unit test.

2
00:00:04,260 --> 00:00:06,440
We're not talking about particular assertions.

3
00:00:06,540 --> 00:00:11,460
Instead I'm going to show you some functionality some features that we get with unit tests that are

4
00:00:11,460 --> 00:00:14,450
really really useful when you're testing larger applications.

5
00:00:14,700 --> 00:00:21,120
Oftentimes you have code that you need to run before tests or after all your tests whether that's having

6
00:00:21,120 --> 00:00:25,470
to do with the database you know adding data to a database or creating fake data that you want to use

7
00:00:25,470 --> 00:00:30,690
and all of your tests create a fake user account and you want to instead of recreating it in every single

8
00:00:30,690 --> 00:00:33,660
test function you want it to be available everywhere.

9
00:00:33,690 --> 00:00:36,660
We can define two methods called set up and tear down.

10
00:00:36,660 --> 00:00:38,620
They do have to be named in a particular way.

11
00:00:38,790 --> 00:00:43,530
And like you said in a larger application you might want some similar code to run before every test

12
00:00:43,860 --> 00:00:48,420
so you put that code in setup and it runs before every test method.

13
00:00:48,420 --> 00:00:53,300
Similarly if you have code you want to run after all your tests which if you're not using a database

14
00:00:53,310 --> 00:00:54,940
is probably not that common.

15
00:00:54,980 --> 00:00:57,670
And in our situation we're just going to focus on setup.

16
00:00:57,750 --> 00:01:02,250
But imagine you are testing something with the database and you add a bunch of data into the database

17
00:01:02,250 --> 00:01:03,140
for your tests.

18
00:01:03,150 --> 00:01:05,790
You don't want to just keep it there if you call tear down.

19
00:01:05,790 --> 00:01:08,070
It will remove it after every test.

20
00:01:08,550 --> 00:01:10,560
So that's what they're done does.

21
00:01:10,560 --> 00:01:15,900
So it's common use cases like I said removing or adding data from a test database or creating instances

22
00:01:15,900 --> 00:01:20,550
of a class that you're going to reuse creating some data whether it's not whether it's in a database

23
00:01:20,550 --> 00:01:23,160
or not just data that you want to use in your tests.

24
00:01:23,160 --> 00:01:24,750
So here's an example.

25
00:01:24,780 --> 00:01:25,370
None of these.

26
00:01:25,450 --> 00:01:30,230
This doesn't do anything but we have these two tests tests first and test second.

27
00:01:30,420 --> 00:01:33,390
But then we have set up and tear down.

28
00:01:33,390 --> 00:01:38,100
And if they're named correctly inside of this test you know in a class that inherits from test case

29
00:01:38,830 --> 00:01:44,050
whatever we put in here it's going to run before the code and test first and before the code and test

30
00:01:44,050 --> 00:01:49,900
second and whatevers and tear down it we'll run after test first and after test second.

31
00:01:49,950 --> 00:01:55,180
So to help explain this I have a class called Robot and I've already typed it up.

32
00:01:55,470 --> 00:01:58,580
Doesn't really matter too much the details don't matter.

33
00:01:58,590 --> 00:01:59,970
But it's a class called Robot.

34
00:01:59,970 --> 00:02:04,910
Every robot has a name a battery level which is a number and a list of skills.

35
00:02:04,950 --> 00:02:10,770
There's a method called charge where we just set self-taught battery to be 100 fully charged the battery

36
00:02:11,450 --> 00:02:16,830
and then we have two methods that have different results different outcome depending on the charge of

37
00:02:16,830 --> 00:02:17,690
the battery.

38
00:02:18,000 --> 00:02:25,700
So to say when we say name if self battery is positive we're going to return beep boop boop.

39
00:02:25,710 --> 00:02:32,230
I am self-taught name uppercase and subtract one decrement self-doubt battery.

40
00:02:32,250 --> 00:02:38,760
It takes one battery to say name and if battery is negative we return low power police charge and try

41
00:02:38,760 --> 00:02:39,800
again.

42
00:02:39,840 --> 00:02:46,770
Similarly I might add some space with learned skill you pass in a skill to learn and it cost to learn

43
00:02:46,770 --> 00:02:52,090
it and then recheck is cost to learn a lesson or it's battery greater than or equal to the cost to learn

44
00:02:52,380 --> 00:02:53,100
if it is.

45
00:02:53,280 --> 00:02:58,900
Then we subtract the cost to the end for the battery and we append skills to Penda new skilled skills.

46
00:02:58,980 --> 00:03:00,420
Then we return.

47
00:03:00,500 --> 00:03:05,010
So I now know whatever the skill is how to make a sandwich.

48
00:03:05,070 --> 00:03:08,400
Otherwise we return insufficient battery please charge and try again.

49
00:03:08,640 --> 00:03:11,280
Ok so very basic robot class.

50
00:03:11,280 --> 00:03:12,930
Now that's right a few tests.

51
00:03:13,110 --> 00:03:19,380
So I have a file called Robot tests why I'm importing robot from the robot file.

52
00:03:19,470 --> 00:03:20,450
I just named them both.

53
00:03:20,460 --> 00:03:21,800
The file is robot up.

54
00:03:21,850 --> 00:03:28,120
Classes robot import unit test to find my class inherits from test case.

55
00:03:28,440 --> 00:03:31,030
And let's start by testing the charge method.

56
00:03:31,080 --> 00:03:37,800
So we do def test charge and to test that we're going to need to make a new robot.

57
00:03:37,800 --> 00:03:39,250
So let's go with I don't know.

58
00:03:39,290 --> 00:03:41,650
Megaman equals robot.

59
00:03:41,940 --> 00:03:43,770
Oh and I do need to capitalize this.

60
00:03:43,950 --> 00:03:45,860
That's the name of the class.

61
00:03:46,210 --> 00:03:46,510
OK.

62
00:03:46,530 --> 00:03:49,730
So well just passen name is Megaman.

63
00:03:49,890 --> 00:03:53,890
And let's say battery is set to 50 at the beginning.

64
00:03:54,690 --> 00:04:02,340
So what I want to do is call mega-event charge and then test that charge that charge is now 100.

65
00:04:02,340 --> 00:04:14,010
So I would just do self-taught assert equal megaman dot and I'd check for battery Khama 100 and this

66
00:04:14,010 --> 00:04:14,880
should work right.

67
00:04:14,880 --> 00:04:16,170
That's how the method is set up right now.

68
00:04:16,170 --> 00:04:17,160
Let's test it.

69
00:04:20,840 --> 00:04:21,320
Yes.

70
00:04:21,410 --> 00:04:23,450
Passing that's all good knowledge.

71
00:04:23,450 --> 00:04:25,580
Add one to test say name.

72
00:04:25,610 --> 00:04:28,130
I should mention we're not doing this TDD style.

73
00:04:28,220 --> 00:04:30,850
I already wrote all the code that just to save time.

74
00:04:31,130 --> 00:04:31,430
OK.

75
00:04:31,490 --> 00:04:32,900
We want to test this.

76
00:04:32,930 --> 00:04:36,000
Let's go back here and do the same thing again.

77
00:04:36,020 --> 00:04:39,770
A def test say name.

78
00:04:40,350 --> 00:04:45,530
And then here we're going to do the same thing make a new robot because we have to have a robot to test

79
00:04:45,740 --> 00:04:49,830
because this is a function of whatever code is in here is scope's to this.

80
00:04:49,890 --> 00:04:50,860
So we don't have access to it.

81
00:04:50,860 --> 00:04:52,610
We have to redefine it down here.

82
00:04:52,870 --> 00:04:53,170
OK.

83
00:04:53,210 --> 00:04:59,930
So I make that again and then I'm just going to do a self-taught assert equal when I call Mega Man say

84
00:04:59,930 --> 00:05:02,050
name.

85
00:05:02,290 --> 00:05:04,180
I'm just going to copy the string here.

86
00:05:04,180 --> 00:05:06,390
We should get it to be poop.

87
00:05:06,580 --> 00:05:10,720
I am mega man in all caps pasted in.

88
00:05:10,930 --> 00:05:14,490
But this on new lines people pee poop.

89
00:05:14,500 --> 00:05:19,870
I am and then we replace this with Mega Man like that.

90
00:05:20,590 --> 00:05:21,230
OK.

91
00:05:21,400 --> 00:05:24,730
And on top of that we also want to check that the battery has gone down.

92
00:05:24,970 --> 00:05:31,900
So that should be megaman dot battery should now equal 49.

93
00:05:31,990 --> 00:05:33,110
Let's see if it works.

94
00:05:35,070 --> 00:05:36,960
A robot has no X right now.

95
00:05:36,990 --> 00:05:39,460
Tests say name that should be say name

96
00:05:42,410 --> 00:05:44,910
and we need to run say name as well.

97
00:05:44,930 --> 00:05:45,280
All right.

98
00:05:45,380 --> 00:05:47,180
So this is how this should work.

99
00:05:47,270 --> 00:05:51,420
Make new make a man make new robot we call say name it should equal this.

100
00:05:51,500 --> 00:05:55,430
And after that happened the battery should have gone down.

101
00:05:56,680 --> 00:06:01,610
And it works so I won't make you sit through watching me test all the other functions.

102
00:06:01,850 --> 00:06:06,450
But if I wanted to test learn skill I would have to write well I would test another say name I would

103
00:06:06,450 --> 00:06:11,240
test if battery was too low so would be another function then I would test learn skill.

104
00:06:11,310 --> 00:06:15,860
If battery was too low to learn this skill or if there was enough battery to learn the skill.

105
00:06:15,900 --> 00:06:20,880
So that's three different times three different functions at a bare minimum that I would be defining

106
00:06:21,090 --> 00:06:23,020
and I'd make megaman again.

107
00:06:23,580 --> 00:06:27,700
Instead however we can use setup to help us out.

108
00:06:28,050 --> 00:06:34,920
And you might be thinking couldn't I just you know do this megaman appear and all of them had access

109
00:06:34,920 --> 00:06:35,790
Megaman.

110
00:06:35,850 --> 00:06:36,570
That is true.

111
00:06:36,570 --> 00:06:37,470
That works.

112
00:06:37,470 --> 00:06:43,590
But there's a difference because whatever side effects that happen this code would alter megaman and

113
00:06:43,620 --> 00:06:49,380
every other test function we have would be using the exact same copy of this robot.

114
00:06:49,380 --> 00:06:55,050
So if we set the battery to zero then I write another function to test that the battery should be full.

115
00:06:55,290 --> 00:06:59,850
If it was already set to zero in the previous test function it's still going to be zero.

116
00:06:59,850 --> 00:07:06,000
So with set up it really runs the code every time it doesn't run it want to rerun it before every function.

117
00:07:06,000 --> 00:07:06,740
So I just write.

118
00:07:06,740 --> 00:07:17,290
Def set up like this camel case itself and then we'll just use self-taught megaman equals and just copy

119
00:07:17,300 --> 00:07:21,470
this just like that.

120
00:07:21,470 --> 00:07:28,270
Now what we can do is reference self-taught megaman in all of these instances so I mean just copying

121
00:07:28,270 --> 00:07:34,790
my cursor a couple times so it doesn't need to be self-doubt megaman but this code now has will run

122
00:07:34,790 --> 00:07:38,480
before every single function and I can now get rid of this.

123
00:07:39,110 --> 00:07:43,430
And this is well where I'm defining megaman Let's see if it works.

124
00:07:43,460 --> 00:07:44,180
Awesome.

125
00:07:44,450 --> 00:07:44,710
OK.

126
00:07:44,720 --> 00:07:49,770
So you can imagine hopefully you know if we actually wrote tests for all the other functions and we

127
00:07:49,850 --> 00:07:55,010
let's say we had you know 10 functions in that class we could be rerunning the same code a lot.

128
00:07:55,010 --> 00:08:00,620
So set up is really really useful and tear down it's exactly the same except it runs after each one

129
00:08:00,620 --> 00:08:01,920
of our test functions.

130
00:08:01,970 --> 00:08:04,420
That's pretty much all there is to it set up.

131
00:08:04,520 --> 00:08:05,610
You don't find it that way.

132
00:08:05,630 --> 00:08:09,830
It must be called set up tear down must be called tear down unit test.

133
00:08:09,840 --> 00:08:15,050
Looks for them automatically and it runs them you know before and after each test case respectively.
