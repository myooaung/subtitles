1
00:00:00,240 --> 00:00:01,250
Hey welcome back.

2
00:00:01,260 --> 00:00:04,050
So this video will be another kind of fun one.

3
00:00:04,050 --> 00:00:08,200
I'm just going to show how to use special methods along with inheritance.

4
00:00:08,220 --> 00:00:14,580
So what we're going to do is create something I'm calling a grumpy dict with a T or B dict where we're

5
00:00:14,580 --> 00:00:18,950
inheriting from the Dictionary class or type technically.

6
00:00:19,490 --> 00:00:25,860
And what we're going to do is basically keep the same functionality but then add in some grumpiness.

7
00:00:25,860 --> 00:00:35,100
So for example I make a new grumpy dict and if I just print D which is the dictionary tells me none

8
00:00:35,100 --> 00:00:38,120
of your business and then it gives me the data.

9
00:00:38,640 --> 00:00:39,540
Nothing crazy.

10
00:00:39,780 --> 00:00:45,150
And then let's say that I want to change something or add something or in this case I'm changing city

11
00:00:45,150 --> 00:00:52,200
to be Assef and if I just do that it's just a normal dictionary nothing should happen.

12
00:00:52,770 --> 00:00:54,570
But I may print the after.

13
00:00:54,570 --> 00:00:56,120
So you can see what happens.

14
00:00:57,390 --> 00:01:00,590
When I run it says it why do you always have to change things.

15
00:01:00,640 --> 00:01:02,400
Fine setting city TSF.

16
00:01:02,660 --> 00:01:08,840
And then we can see it actually did set city to SFO so we're not just printing things out we're printing

17
00:01:08,840 --> 00:01:13,850
things out and being kind of jokey but then continuing on with the regular behavior because afterwards

18
00:01:13,910 --> 00:01:17,630
when I run print once again it tells me none of your business.

19
00:01:17,690 --> 00:01:25,570
But then we see city has been changed to S.F. Or here's another bit of functionality called D which

20
00:01:25,570 --> 00:01:30,540
is the name of the grumpy dictionary and I try and look for something that's not in there.

21
00:01:30,950 --> 00:01:36,570
Instead of getting an error I wrote something that says the thing you want isn't in here.

22
00:01:36,860 --> 00:01:41,280
So sort of grumpy dictionary but see how we actually implement it.

23
00:01:41,830 --> 00:01:44,450
So I'm going to make a file called grumped beat up.

24
00:01:45,410 --> 00:01:47,270
And we're going to define our class.

25
00:01:47,480 --> 00:01:53,020
I'll just call it Grumpy dict and then inherits from DECT.

26
00:01:53,270 --> 00:01:59,920
And the simplest place to start would just be by setting up our representation method.

27
00:01:59,910 --> 00:02:05,000
Our E.P. our self we've already seen this but there's going to be a bit of a twist here.

28
00:02:05,300 --> 00:02:14,150
If I just try and do you know printed Grumpy's string like none of your business like this we can just

29
00:02:14,150 --> 00:02:15,060
leave it at that.

30
00:02:15,170 --> 00:02:23,190
And actually we do want to return to print because we're going to then print down here print.

31
00:02:23,240 --> 00:02:24,590
Let's make a new grumpy dict.

32
00:02:24,620 --> 00:02:31,520
So let's just call it data equals Grampy dict pass in a dictionary.

33
00:02:31,520 --> 00:02:33,840
Notice we didn't have to define in a nit.

34
00:02:34,220 --> 00:02:35,080
And why is that.

35
00:02:35,150 --> 00:02:36,410
Well we inherit from dictionary.

36
00:02:36,410 --> 00:02:43,450
We're not doing anything else special or fancy with the data not no instance properties or attributes.

37
00:02:43,490 --> 00:02:45,650
We're only concerned with adding some methods.

38
00:02:45,770 --> 00:02:51,970
So the init in dict will run instead because of that MRO thing we saw a couple of videos ago.

39
00:02:52,120 --> 00:02:53,540
So I said some data in here.

40
00:02:53,600 --> 00:02:59,560
Let's just go first is Tom and animal is cat.

41
00:02:59,780 --> 00:03:00,540
It doesn't matter.

42
00:03:00,770 --> 00:03:01,130
OK.

43
00:03:01,160 --> 00:03:06,880
And if I print data right now all that we'll see is none of your business.

44
00:03:07,040 --> 00:03:08,720
And that's where we get none of your business.

45
00:03:08,720 --> 00:03:09,680
That's it.

46
00:03:09,680 --> 00:03:15,830
So what if I want to actually then call the dictionary representation.

47
00:03:15,830 --> 00:03:16,680
It's really easy.

48
00:03:16,790 --> 00:03:24,020
So instead of returning none of your business what we can do is print your business first and then return

49
00:03:24,280 --> 00:03:24,950
super.

50
00:03:24,980 --> 00:03:32,660
Which is dict dot double underscore our EPR which is going to call the dictionary's version which is

51
00:03:32,660 --> 00:03:34,710
the one that we print out.

52
00:03:34,790 --> 00:03:37,620
You know the format that looks like this.

53
00:03:37,640 --> 00:03:43,230
Now if I do it we get in your business followed by first time animal cat.

54
00:03:43,760 --> 00:03:44,440
OK.

55
00:03:45,050 --> 00:03:50,540
So another one that we can set up is called Missing double underscore missing and this is what will

56
00:03:50,540 --> 00:03:53,740
be called if the key is not in a dictionary.

57
00:03:53,930 --> 00:03:58,160
So it's already implemented on DECT but we can override it self.

58
00:03:58,160 --> 00:04:02,330
And then the key that it's looking for that the user is looking for.

59
00:04:02,450 --> 00:04:04,250
And then we can just return.

60
00:04:04,350 --> 00:04:07,070
Let's just do a print and even return.

61
00:04:07,190 --> 00:04:17,730
And let's just do the thing you want actually instead of the thing you want and then put in key.

62
00:04:18,530 --> 00:04:22,810
Well it ain't here when you didn't have string.

63
00:04:23,120 --> 00:04:29,630
So this will run whenever we look for something in data so if I just tried to do data of I don't know

64
00:04:29,720 --> 00:04:35,320
city there is no city key instead of grumpy Dichter Instead of data.

65
00:04:35,320 --> 00:04:40,490
And so missing will automatically be called in usually on a dictionary that throws an error.

66
00:04:41,840 --> 00:04:43,680
It now we get you on City.

67
00:04:43,710 --> 00:04:45,000
Well it ain't here.

68
00:04:45,180 --> 00:04:46,960
So grumpy.

69
00:04:47,070 --> 00:04:47,310
All right.

70
00:04:47,310 --> 00:04:48,630
So that's missing.

71
00:04:48,660 --> 00:04:54,180
Now let's add in our final little thing which is when we actually update the data so what if I said

72
00:04:54,180 --> 00:04:58,520
data city equals S.F. or Tokyo.

73
00:04:58,920 --> 00:05:02,190
If you want to find all of this out you can look in the documentation.

74
00:05:02,300 --> 00:05:07,870
It's the same page I was on in the previous video where we saw things like Lenn special magic methods

75
00:05:07,870 --> 00:05:08,910
here here's missing.

76
00:05:08,910 --> 00:05:10,610
Here we go set item.

77
00:05:10,800 --> 00:05:16,050
So this will be called to implement assignment to self bracket key.

78
00:05:16,050 --> 00:05:22,740
So basically whenever something is being added in or set so it's not only added but updated as well

79
00:05:22,770 --> 00:05:25,550
in a dictionary or in a list.

80
00:05:25,710 --> 00:05:28,140
But in our case we're working with a dictionary.

81
00:05:28,230 --> 00:05:30,160
This will be called so we can override it.

82
00:05:30,170 --> 00:05:33,120
But notice key and value are parameters.

83
00:05:33,180 --> 00:05:34,400
So let's do that now.

84
00:05:34,440 --> 00:05:42,070
Def set item self key and value just like this.

85
00:05:42,270 --> 00:05:43,860
And then what do you want to print.

86
00:05:43,860 --> 00:05:54,790
Let's say you want to change the dictionary and then let's do another print.

87
00:05:55,390 --> 00:05:57,160
OK fine.

88
00:05:57,810 --> 00:06:07,560
And then lastly what we need to do is call super dot set item because if we didn't do this you need

89
00:06:07,560 --> 00:06:09,840
to pass in key and value as well.

90
00:06:09,990 --> 00:06:16,500
If we didn't do that and I just left it like this if I said data city Tokyo and then I printed data

91
00:06:16,500 --> 00:06:20,880
again it wouldn't ever update because said item stop right here.

92
00:06:20,880 --> 00:06:22,760
This is all it does.

93
00:06:22,840 --> 00:06:26,640
And you can see that here we only have first an animal.

94
00:06:27,160 --> 00:06:34,830
But if I call super said item it will print my grumpiness first and then still go ahead and call that

95
00:06:34,840 --> 00:06:37,600
item in the dictionary.

96
00:06:37,640 --> 00:06:40,130
So now we get city Tokyo.

97
00:06:40,750 --> 00:06:42,510
So now we have a very grumpy dictionary.

98
00:06:42,510 --> 00:06:47,440
Anytime time we make changes any time I print it out tells me you know your business but it still printed

99
00:06:47,440 --> 00:06:49,670
out if something's missing.

100
00:06:49,810 --> 00:06:50,550
Nothing happens.

101
00:06:50,560 --> 00:06:57,310
You just get a little message and if we said something we get a grumpy message and then it actually

102
00:06:57,310 --> 00:06:58,600
is set in the dictionary.

103
00:06:58,750 --> 00:07:01,360
So the whole point of showing this to you was to show you two things.

104
00:07:01,360 --> 00:07:07,970
One get more practice with these Dunder magic special whatever methods that Python uses behind the scenes.

105
00:07:07,990 --> 00:07:14,320
And two I wanted to show you that if you do inherit from any class especially in a preexisting type

106
00:07:14,440 --> 00:07:19,630
like dictionary we can still call the parent class methods even if they are these Dunder methods like

107
00:07:19,630 --> 00:07:24,640
we have here and we can extend them even if all we're doing here is grumpiness.

108
00:07:24,670 --> 00:07:31,120
It's just a silly example but replace this code with any other add on that you want any additional functionality

109
00:07:31,150 --> 00:07:36,340
and you can still rely on the base functionality so you can extend upon a list or a dictionary or some

110
00:07:36,340 --> 00:07:38,130
other class that someone else wrote.

111
00:07:38,230 --> 00:07:40,350
Kind of fun stuff and I won't keep going.

112
00:07:40,420 --> 00:07:47,440
But we could alter how the entire method works which is how to basically how it should iterate over

113
00:07:47,440 --> 00:07:52,080
a dictionary in our case or a grumpy dictionary and how things should work how the reversed version

114
00:07:52,080 --> 00:07:56,020
should work how it works to delete an item how contains work.

115
00:07:56,020 --> 00:08:01,600
So this is to check if something is in a dictionary so we could really quickly add that one in which

116
00:08:01,600 --> 00:08:04,440
is just def contained self item.

117
00:08:04,450 --> 00:08:07,500
I know I said we're done but I could just have it return.

118
00:08:07,720 --> 00:08:11,210
No it ain't in here.

119
00:08:11,530 --> 00:08:13,280
Supposed to return true or false.

120
00:08:13,420 --> 00:08:15,760
So maybe I'll just have a print.

121
00:08:15,790 --> 00:08:20,040
No it ain't in here and then have it return false no matter what.

122
00:08:20,140 --> 00:08:21,140
Even if it's in there.

123
00:08:21,280 --> 00:08:27,810
So now if I tried to do city in data I get.

124
00:08:27,880 --> 00:08:32,510
No it ain't in here and it returns false even though it is just grumpy.

125
00:08:32,680 --> 00:08:33,680
We don't want to deal with it.

126
00:08:33,850 --> 00:08:35,330
Ok now I'm actually done.

127
00:08:35,380 --> 00:08:38,750
But it's fun you keep adding these in but I'll stop I promise.

128
00:08:38,790 --> 00:08:39,130
OK.
