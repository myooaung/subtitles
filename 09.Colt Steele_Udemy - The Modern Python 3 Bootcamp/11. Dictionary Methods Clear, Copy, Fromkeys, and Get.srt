1
00:00:00,450 --> 00:00:01,460
Hey welcome back.

2
00:00:01,620 --> 00:00:04,180
So this video is all about dictionary methods.

3
00:00:04,440 --> 00:00:09,870
Just like with lists as we saw in the previous section there are a bunch of built and methods we get

4
00:00:09,870 --> 00:00:12,300
for free that we can use on any dictionary.

5
00:00:12,570 --> 00:00:15,770
Fortunately there are fewer that we need to know about.

6
00:00:15,770 --> 00:00:20,850
There was kind of a lot in the last section but I still decided to split this up into two videos just

7
00:00:20,850 --> 00:00:23,450
to keep it more manageable and shorter.

8
00:00:23,640 --> 00:00:28,920
And I should just warn you there's no logical grouping to which methods made it into this video in which

9
00:00:28,920 --> 00:00:30,510
he has made it into the next video.

10
00:00:30,510 --> 00:00:35,220
Unlike with lists where we saw you know three ways of adding to a list or three ways of deleting from

11
00:00:35,220 --> 00:00:37,670
less I just decided to split them in half.

12
00:00:37,680 --> 00:00:39,810
So let's get started with the first four.

13
00:00:40,380 --> 00:00:41,930
Oh I forgot about this note.

14
00:00:42,270 --> 00:00:43,890
Working with dictionaries is very common.

15
00:00:43,890 --> 00:00:45,680
There are quite a few things we can do.

16
00:00:45,900 --> 00:00:48,130
Thank you very good to add to that.

17
00:00:48,150 --> 00:00:52,410
So the first one I see is clear and clear is pretty straightforward.

18
00:00:52,410 --> 00:00:57,640
It will just empty out a dictionary leaving you with a hollow shell of what was there before.

19
00:00:58,110 --> 00:00:59,380
So we can have a dictionary.

20
00:00:59,510 --> 00:01:07,560
We create it using the dict syntax and we run clear which is what we save the dictionary into and it

21
00:01:07,560 --> 00:01:10,830
just empties it and there's nothing left.

22
00:01:10,830 --> 00:01:14,710
So over here I think I have instructors Still if I did.

23
00:01:14,700 --> 00:01:16,520
Instructor not clear.

24
00:01:17,190 --> 00:01:20,450
And we look at instructor again empty.

25
00:01:20,670 --> 00:01:21,870
All that hard work gone.

26
00:01:22,120 --> 00:01:22,600
OK.

27
00:01:22,740 --> 00:01:23,700
That's that.

28
00:01:23,700 --> 00:01:28,470
Next up his copy so copy will make a copy of a dictionary.

29
00:01:28,470 --> 00:01:34,130
So here is that same simple dictionary or we have a because one B is 2 and C is three.

30
00:01:34,350 --> 00:01:41,130
We save it to a variable called D and if we run out copy and we save it to another variable you'll see

31
00:01:41,130 --> 00:01:45,530
it makes a copy a clone that looks exactly the same it contains the same data.

32
00:01:45,690 --> 00:01:51,700
But just like with lists when we were copying lists they look the same and double equals.

33
00:01:51,690 --> 00:01:52,320
That's true.

34
00:01:52,410 --> 00:01:58,140
But if we use is they are unique objects in memory they're not stored in the same place.

35
00:01:58,440 --> 00:02:02,300
So let's do this example here just to show that.

36
00:02:02,310 --> 00:02:03,620
So here we have D.

37
00:02:03,870 --> 00:02:08,680
And I could do C I'll just call it clone instead of C equals D.

38
00:02:08,730 --> 00:02:09,650
Copy.

39
00:02:09,930 --> 00:02:13,800
And if we look at clone and we look at d they look identical.

40
00:02:13,920 --> 00:02:17,350
And if I do clone equals equals D That's true.

41
00:02:17,610 --> 00:02:20,780
But then if I do a clone is d that's false.

42
00:02:20,880 --> 00:02:25,630
If you don't remember when I covered double equals versus Is there is a video all about it.

43
00:02:25,680 --> 00:02:26,780
Pretty early on in the course.

44
00:02:26,790 --> 00:02:30,280
I don't remember exactly where I think it was in the section about strings.

45
00:02:30,330 --> 00:02:35,500
Essentially the difference is this test for equality of values and this test for equality in memory.

46
00:02:35,580 --> 00:02:40,450
If there actually references to the exact same place in memory which these are not.

47
00:02:40,470 --> 00:02:45,200
Next up is from Keys which let me just warn you it's kind of odd.

48
00:02:45,330 --> 00:02:50,760
It works a little bit different than the other methods that we've seen and that we usually call it just

49
00:02:50,760 --> 00:02:58,770
on an empty dictionary or on d i c t n dict and why we do that will make sense once we talk about actually

50
00:02:58,770 --> 00:03:01,080
creating our own methods and classes and objects.

51
00:03:01,080 --> 00:03:07,460
So for now just take it as fact that we'll call it on an empty dictionary and we call that from Keys.

52
00:03:07,650 --> 00:03:14,000
What we do is we pass in take a look at this second example First we pass in an iterable collection.

53
00:03:14,010 --> 00:03:18,140
So here's a list with a string email and then a value.

54
00:03:18,300 --> 00:03:24,450
And in this example the value is unknown a string and it will go through this iterable collection and

55
00:03:24,450 --> 00:03:29,670
assign each one of these each item to a key with the value unknown.

56
00:03:29,730 --> 00:03:33,410
So you end up with email unknown in a new dictionary.

57
00:03:33,420 --> 00:03:38,890
Same thing here if you just have the string a as a first thing we pass in and then it lists one two

58
00:03:38,890 --> 00:03:39,910
three four or five.

59
00:03:40,050 --> 00:03:43,070
It will make a new dictionary with a set to one two three four or five.

60
00:03:43,230 --> 00:03:47,210
So a logical question is why would I ever want to do this.

61
00:03:47,220 --> 00:03:52,400
That seems really like more syntax to generate this compared to just writing this myself.

62
00:03:52,740 --> 00:04:00,170
But if we have a bunch of keys that were trying to set to a default value for example let's say I want

63
00:04:00,210 --> 00:04:03,100
to make a new user variable.

64
00:04:03,120 --> 00:04:09,840
So any time and I don't know an empty user or we could have a player object in a game or a player dictionary

65
00:04:09,840 --> 00:04:11,130
in a game or something.

66
00:04:11,130 --> 00:04:17,070
And I don't want to go through and set every property to none or to zero or to whatever we want to set

67
00:04:17,070 --> 00:04:18,240
it to.

68
00:04:18,240 --> 00:04:30,070
I could use dict which I can also type act like this dot from keys and I'll pass in a list.

69
00:04:30,190 --> 00:04:32,000
I haven't are too early man.

70
00:04:32,230 --> 00:04:43,450
Let me go back to our personal list and let's just do things like name do score let's do e-mail and

71
00:04:43,450 --> 00:04:46,590
have a profile bio.

72
00:04:46,600 --> 00:04:47,520
Or something like that.

73
00:04:47,660 --> 00:04:48,310
OK.

74
00:04:48,610 --> 00:04:54,150
And then we can set them all to something like we could do not initially but I'll send it to a string

75
00:04:54,160 --> 00:04:59,270
just called unknown and I can hit enter.

76
00:04:59,620 --> 00:05:04,640
And if we look at new user now you'll see that we have name unknown score unknown email unknown profile

77
00:05:05,070 --> 00:05:05,830
unknown.

78
00:05:05,890 --> 00:05:08,870
So it's a way to programmatically create it.

79
00:05:09,070 --> 00:05:15,700
Usually it's used to create default dictionaries to assign values initial starting values to properties

80
00:05:16,110 --> 00:05:21,610
and just to show you if I did have an existing dictionary which will I have new user if I wanted to

81
00:05:21,610 --> 00:05:29,810
do new user dots from Keys and do the same thing let's add a single value of phone.

82
00:05:30,100 --> 00:05:36,610
And then also set that to an unknown and then need to close totally messed that up.

83
00:05:36,610 --> 00:05:37,740
Here we go.

84
00:05:37,990 --> 00:05:39,030
Close that there.

85
00:05:39,100 --> 00:05:47,070
OK if I do this you'll see that all we get is this new dictionary new user is unchanged.

86
00:05:47,280 --> 00:05:49,460
It doesn't contain phone anywhere.

87
00:05:49,690 --> 00:05:51,750
And what was generated was just a new dictionary.

88
00:05:51,760 --> 00:05:57,160
So you can use it works if you try and use it on an existing dictionary.

89
00:05:57,190 --> 00:06:04,600
It just does the exact same thing as if you use it on dict or an empty dictionary.

90
00:06:04,850 --> 00:06:05,100
OK.

91
00:06:05,110 --> 00:06:06,880
That's all I'll say about keys for now.

92
00:06:06,880 --> 00:06:09,470
It's usually used to generate default values.

93
00:06:09,940 --> 00:06:10,960
Actually that's a complete lie.

94
00:06:10,970 --> 00:06:13,150
What I just said there's one more thing that I'll mention.

95
00:06:13,270 --> 00:06:20,860
If you don't pass in a list or some of the other iterable collections we'll see for example if I do

96
00:06:20,860 --> 00:06:22,330
the same thing here.

97
00:06:22,750 --> 00:06:28,620
But instead of a phone and a list I do phone like this it's going to try and iterate over the string

98
00:06:29,860 --> 00:06:34,350
and it's a string as an iterable collection and it will do earn iterable object.

99
00:06:34,560 --> 00:06:37,360
I get p h o and E.

100
00:06:37,510 --> 00:06:42,820
So just worth knowing that if you are trying to do a single value even though this won't throw an error

101
00:06:43,270 --> 00:06:45,310
it's best to put this in a list.

102
00:06:45,340 --> 00:06:46,950
We could do the same thing also.

103
00:06:46,990 --> 00:06:49,970
I mean just print this out with a range.

104
00:06:50,460 --> 00:06:54,280
Let's go from 1 to 10 just like that.

105
00:06:54,400 --> 00:06:57,330
And now I get all the key is from 1 up until 9.

106
00:06:57,490 --> 00:07:04,090
So strings lists ranges as well as some of the other iterable collections you'll see in the next section

107
00:07:04,390 --> 00:07:05,360
are all valid here.

108
00:07:05,410 --> 00:07:07,370
OK enough of from Keys.

109
00:07:07,390 --> 00:07:13,690
Next we have get now out of all of these I think personally I think get the most useful.

110
00:07:13,690 --> 00:07:21,180
What it will do is if a key is in a dictionary like in this case a is we run Didcot get a.

111
00:07:21,250 --> 00:07:23,320
It will give us the value which is one.

112
00:07:23,680 --> 00:07:29,620
But if it's not in there Machir don't get no key which doesn't exist.

113
00:07:29,620 --> 00:07:31,120
It gives us none.

114
00:07:31,150 --> 00:07:32,590
Rather than throwing an error.

115
00:07:32,590 --> 00:07:37,930
So this is what I was alluding to in the last video when I said you could use in to test for the existence

116
00:07:37,930 --> 00:07:44,860
of a value or for a key but get is a nice method that is easier more simple to use.

117
00:07:44,860 --> 00:07:46,530
So let me show you a quick demo.

118
00:07:46,750 --> 00:07:48,650
We still have instructor over here.

119
00:07:49,090 --> 00:07:50,180
I emptied it out.

120
00:07:50,340 --> 00:07:55,960
OK well I just pasted it in and now I have an instructor and I could do something like instr. don't

121
00:07:55,960 --> 00:08:02,290
get and then pass in a value like name and it will give me the name code but if I try and do something

122
00:08:02,350 --> 00:08:07,690
that doesn't exist like e-mail it gives me none which we can actually see here.

123
00:08:07,750 --> 00:08:14,050
But if I try and run the same thing and save the results into a variable called result and I look at

124
00:08:14,080 --> 00:08:16,060
result nothing changes but I can do.

125
00:08:16,060 --> 00:08:17,850
Result is none.

126
00:08:18,040 --> 00:08:22,080
And that is true and that's it for this video at least.

127
00:08:22,090 --> 00:08:26,560
So we saw for your review here clear to delete the entire thing.

128
00:08:26,650 --> 00:08:33,550
Copy to make a clone from Keys which is commonly used to create default values and get.

129
00:08:33,640 --> 00:08:36,310
Which is probably the most common that you said of all of these.

130
00:08:36,330 --> 00:08:42,030
It takes a given key and returns the corresponding value or if it doesn't exist it gives you none.

131
00:08:42,040 --> 00:08:43,230
Instead of throwing an error.

132
00:08:43,420 --> 00:08:43,800
OK.

133
00:08:43,900 --> 00:08:44,470
Next up.

134
00:08:44,470 --> 00:08:46,630
Just a couple more dictionary methods.
