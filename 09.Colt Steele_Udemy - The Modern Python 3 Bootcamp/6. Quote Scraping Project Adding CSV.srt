0
1
00:00:00,090 --> 00:00:00,640
All right.
1

2
00:00:00,720 --> 00:00:05,730
And this video we are going to refactor our quotes game so that we're not scraping every time at the
2

3
00:00:05,730 --> 00:00:11,460
beginning what we're going to do is save the file or save the scrapes data to a CACP file so that we
3

4
00:00:11,460 --> 00:00:14,270
can recall it from that file whenever we want.
4

5
00:00:14,400 --> 00:00:19,200
But I am going to move this functionality to a separate file because we also don't want to be saving
5

6
00:00:19,260 --> 00:00:21,150
this ESV file every time.
6

7
00:00:21,150 --> 00:00:28,500
And I'll start by copying all the scraping functionality over everything from here up and I have a file
7

8
00:00:28,620 --> 00:00:38,340
called cxxviii scraper Doppie y and in here we're going to basically run scrape quotes save it to a
8

9
00:00:38,340 --> 00:00:49,190
variable called quotes and then afterwards save for those who write quotes to a file to see a file.
9

10
00:00:49,190 --> 00:00:55,470
So we have a choice which format or what are we going to use to write to the CSP file a regular writer
10

11
00:00:55,770 --> 00:00:57,930
or addict writer.
11

12
00:00:57,930 --> 00:01:00,650
Because our data is a dict like this.
12

13
00:01:00,660 --> 00:01:04,530
It'll probably be easiest to use a dict writer to do that.
13

14
00:01:04,560 --> 00:01:15,820
We just come up here from we import dipt writer and we start by opening a file that doesn't exist yet
14

15
00:01:15,960 --> 00:01:24,780
but let's call it quote out CXXVI in write mode as file and we'll do C S V dot or C Espey writer equals
15

16
00:01:25,380 --> 00:01:33,490
dict writer and then we need to pass in first the file and then second we need field names.
16

17
00:01:33,990 --> 00:01:39,360
And our field names are going to be just make a list called headers.
17

18
00:01:39,870 --> 00:01:51,060
They are text needs to be a list like this author and then bio link.
18

19
00:01:51,320 --> 00:02:01,100
OK so we passed that in and then we'll start by writing the headers so that C S V writer dot write header
19

20
00:02:01,130 --> 00:02:06,800
and I kind of remember if it's singular we'll see something this simple where I know it's either right
20

21
00:02:06,970 --> 00:02:11,250
or right header's rather than consulting the docs just faster to test it.
21

22
00:02:11,300 --> 00:02:14,750
So let's see what happens if we just save the headers to the file.
22

23
00:02:14,750 --> 00:02:17,550
So we're going to scrape and actually we could just.
23

24
00:02:17,560 --> 00:02:20,730
We're not even using quotes and no reason to do all the scraping.
24

25
00:02:20,970 --> 00:02:23,090
Let's just see if we're writing correctly.
25

26
00:02:23,180 --> 00:02:25,930
If I remembered how to correctly you write to a file
26

27
00:02:28,700 --> 00:02:33,190
and we have a quote CXXVI let's look at it.
27

28
00:02:33,510 --> 00:02:33,910
OK.
28

29
00:02:33,920 --> 00:02:37,110
It has our headers so that is indeed working.
29

30
00:02:37,130 --> 00:02:41,880
Now we can uncomment the rest and actually write our rows.
30

31
00:02:42,140 --> 00:02:47,480
So we're going to loop through for quote in quotes.
31

32
00:02:47,890 --> 00:02:52,210
We're going to then do a cxxviii writer dot right.
32

33
00:02:52,260 --> 00:03:00,370
Row quote the quote is a dictionary so it should work right off the bat right out of the off the bat
33

34
00:03:00,460 --> 00:03:03,990
out of the out of the gate area.
34

35
00:03:04,070 --> 00:03:04,980
Let's test it.
35

36
00:03:06,100 --> 00:03:09,800
Moment of Truth takes a little bit to do the scraping.
36

37
00:03:09,990 --> 00:03:16,720
See that's the file have you has a lot of quotes in here as you can see.
37

38
00:03:16,750 --> 00:03:20,560
I've got about 100 quotes and they're all in the correct format.
38

39
00:03:20,560 --> 00:03:23,110
Hopefully text author bio link.
39

40
00:03:23,110 --> 00:03:24,590
Here is the text.
40

41
00:03:25,040 --> 00:03:27,400
Here's the author.
41

42
00:03:27,520 --> 00:03:29,360
And then here's the bio link.
42

43
00:03:29,380 --> 00:03:33,580
So now every time we run this code we're going to go get new data.
43

44
00:03:33,580 --> 00:03:38,710
So if they updated this site frequently or more often than not you know you're not be working with this
44

45
00:03:38,710 --> 00:03:39,330
Web site.
45

46
00:03:39,430 --> 00:03:44,160
Whatever site you're working with it will be updated pretty frequently whether you're trying to get
46

47
00:03:44,230 --> 00:03:51,190
apartment data or camp site data or ticket data the data changes and you want to run your code and get
47

48
00:03:51,310 --> 00:03:53,750
the latest data and you can do this.
48

49
00:03:53,800 --> 00:03:55,720
But we're no longer being held up.
49

50
00:03:55,840 --> 00:03:58,480
Well actually we are because we haven't refactored yet.
50

51
00:03:58,510 --> 00:04:00,880
We're still scraping in here every time.
51

52
00:04:00,880 --> 00:04:02,940
But in a moment we're going to change that.
52

53
00:04:02,980 --> 00:04:10,210
And before we change it we could just make a new file called you know write quotes like this and then
53

54
00:04:10,210 --> 00:04:20,200
it just takes in a list of quotes and we indent all of this and get rid of that down here we just get
54

55
00:04:20,520 --> 00:04:26,020
that data and then we call write quotes and we pass in quotes.
55

56
00:04:26,500 --> 00:04:29,170
So I've just made this into a function doesn't really make a difference.
56

57
00:04:29,170 --> 00:04:32,170
It's a simple file but I'll do it here.
57

58
00:04:32,190 --> 00:04:32,980
Celso best.
58

59
00:04:32,980 --> 00:04:38,260
Now add in our sleep for a second or two because we're only running this every once.
59

60
00:04:38,260 --> 00:04:38,660
I don't know.
60

61
00:04:38,740 --> 00:04:44,030
Once a week or something we don't care how long it takes versus when we're actually playing the game.
61

62
00:04:44,050 --> 00:04:47,870
We definitely don't want to wait a second in between every request.
62

63
00:04:48,310 --> 00:04:49,330
Let's just make sure it works.
63

64
00:04:49,330 --> 00:04:56,290
I will fast forward through this it successfully completed and if we look we have the same quotes I
64

65
00:04:56,290 --> 00:04:59,830
think should be in the same order and we think they randomly change the order.
65

66
00:05:00,080 --> 00:05:00,480
OK.
66

67
00:05:00,520 --> 00:05:02,100
So that's working great.
67

68
00:05:02,110 --> 00:05:04,630
We can leave this file alone for now.
68

69
00:05:04,990 --> 00:05:09,760
And now what I'm going to do I'm going to leave my original and then make another version of where we
69

70
00:05:09,760 --> 00:05:11,060
read from the file.
70

71
00:05:11,080 --> 00:05:13,080
I'll call this one CSP game.
71

72
00:05:13,120 --> 00:05:18,860
Let's go with a quote game that p y paste all this code in here.
72

73
00:05:19,240 --> 00:05:21,310
But get rid of scrape quotes.
73

74
00:05:21,340 --> 00:05:24,610
We're no longer going to scrape quotes at the beginning.
74

75
00:05:24,610 --> 00:05:34,480
Instead we're going to read using the V module so from CSP import dicts reader and then let's make a
75

76
00:05:34,480 --> 00:05:44,560
function and let's call this one read quotes and what it's going to do is open the file and if you want
76

77
00:05:44,560 --> 00:05:53,810
to be fancy this should be file name here and then we'll open the file name comma and then as an R for
77

78
00:05:53,860 --> 00:06:04,060
read as file and then we'll start with R C S V reader equals dict reader and then we need to pass in
78

79
00:06:04,120 --> 00:06:05,130
the file.
79

80
00:06:05,530 --> 00:06:10,950
And then what that gives us back if we I'm just going to not run the game.
80

81
00:06:10,970 --> 00:06:20,740
And instead I'm just going to print CSFB reader or we can iterate over for thing in CAC reader print
81

82
00:06:20,740 --> 00:06:28,050
thing and we just need to make sure recalling read quotes at the end of the day with the correct file
82

83
00:06:28,050 --> 00:06:30,600
name which was quote step C S V.
83

84
00:06:30,640 --> 00:06:34,190
So hopefully we see a bunch of stuff printed out.
84

85
00:06:34,270 --> 00:06:36,690
This was called CSP quote game.
85

86
00:06:37,300 --> 00:06:40,860
Yes we're getting these ordered dict in the list.
86

87
00:06:40,930 --> 00:06:43,810
All that will do is convert them to be a list.
87

88
00:06:43,810 --> 00:06:45,670
Right now it's not actually a list.
88

89
00:06:45,670 --> 00:06:50,210
Remember we can iterate over it but it's not a list which is what we need.
89

90
00:06:50,290 --> 00:06:58,200
So we'll just call quotes equals the list of CXXVI reader and then we can return quotes.
90

91
00:06:58,450 --> 00:07:00,820
And honestly if we can just return this.
91

92
00:07:00,820 --> 00:07:09,310
There's no reason to do it on a separate line so no when we call read quotes the moment of truth is
92

93
00:07:09,310 --> 00:07:15,670
going to be down here we're going to set quote's equals.
93

94
00:07:15,890 --> 00:07:25,340
Read quotes as in the file quotes that CSP and then we're going to start game with those quotes.
94

95
00:07:25,490 --> 00:07:27,600
So there's no scraping happening anymore.
95

96
00:07:27,620 --> 00:07:32,430
When we run this file it's using the data saved right here.
96

97
00:07:33,050 --> 00:07:35,450
Let's see if the game still works.
97

98
00:07:35,450 --> 00:07:36,570
I'm nervous.
98

99
00:07:40,160 --> 00:07:46,870
Yea so far it works there's no reason it shouldn't continue to work but let's test it so it does have
99

100
00:07:46,870 --> 00:07:49,760
to scrape here this is the only time we're making a request now.
100

101
00:07:50,780 --> 00:07:53,280
And type Jane Austen correctly.
101

102
00:07:53,330 --> 00:07:54,000
Got it right.
102

103
00:07:54,020 --> 00:07:55,340
Play one more time.
103

104
00:07:55,580 --> 00:08:00,020
This time I'll get it wrong wrong wrong wrong and we're done.
104

105
00:08:00,470 --> 00:08:04,250
No sweet that is working.
105

106
00:08:04,260 --> 00:08:10,700
So we successfully refactor this now we're no longer having good scrape for 10 or 20 seconds before
106

107
00:08:10,760 --> 00:08:15,770
anyone can play a small change you can make it that we're not using time here.
107

108
00:08:15,770 --> 00:08:18,130
That was in the scraping portion we're not doing that anymore.
108

109
00:08:18,140 --> 00:08:20,860
So we can get rid of that if we wanted to.
109

110
00:08:20,870 --> 00:08:24,000
We could also refactor this here.
110

111
00:08:24,560 --> 00:08:26,450
It's not going to make a massive difference.
111

112
00:08:26,450 --> 00:08:31,600
It's purely about making this shorter which some people would argue that it's better to keep the you
112

113
00:08:31,600 --> 00:08:34,360
know the same functionality things that have to do with one another.
113

114
00:08:34,360 --> 00:08:40,760
Together we could move this two separate function Kolb's print hint or something like this and we just
114

115
00:08:40,760 --> 00:08:51,230
pass in remaining guesses like that and then down here I'll just define def print and it takes in remaining
115

116
00:08:51,230 --> 00:08:56,740
guesses and it just has our conditional out didn't correct.
116

117
00:08:56,830 --> 00:09:02,810
The only thing about using this approach is that we also need to have access to that quote which right
117

118
00:09:02,810 --> 00:09:03,980
now we don't.
118

119
00:09:03,980 --> 00:09:08,390
So we can also pass that in like this quote comma remaining guesses.
119

120
00:09:08,960 --> 00:09:16,090
And then here we call it with quote It cleans things up a little bit modestly.
120

121
00:09:16,090 --> 00:09:18,560
Not positive if I prefer it this way.
121

122
00:09:18,680 --> 00:09:19,770
You can decide.
122

123
00:09:19,850 --> 00:09:21,790
Just make sure it still works.
123

124
00:09:21,810 --> 00:09:22,660
All right.
124

125
00:09:22,670 --> 00:09:28,190
It's printing a quote Yes or printing a hint looks like it's working.
125

126
00:09:28,530 --> 00:09:31,360
And that's pretty much it for changes that we need to make.
126

127
00:09:31,430 --> 00:09:36,890
If you want to get really fancy possibly over complicate things because our data is pretty simple you
127

128
00:09:36,890 --> 00:09:40,570
could make a class or to make a quote class.
128

129
00:09:40,640 --> 00:09:45,590
And honestly I don't know if it makes sense to do that because it's only three pieces of data it is
129

130
00:09:45,610 --> 00:09:50,420
the represented with a dictionary but you could also make a game class so you could instantiate a new
130

131
00:09:50,420 --> 00:09:52,990
game but that might be overkill.
131

132
00:09:53,060 --> 00:09:57,690
Not a bad idea if you want more practice but I leave mine as just a couple of functions.
132

133
00:09:57,690 --> 00:09:58,100
Call.
