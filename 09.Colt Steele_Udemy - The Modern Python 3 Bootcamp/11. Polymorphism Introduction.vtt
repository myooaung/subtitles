WEBVTT
1
00:00:00.210 --> 00:00:00.630
Hello.

2
00:00:00.660 --> 00:00:01.680
Welcome back.

3
00:00:01.680 --> 00:00:08.700
So this video is on a topic that can be one of the most confusing topics in all of O.P. and also has

4
00:00:08.700 --> 00:00:13.530
an intimidating name polymorphism but it's really not as bad as it sounds.

5
00:00:13.550 --> 00:00:19.680
The academic definition can be a bit difficult but we're just going to focus on practical uses practical

6
00:00:19.680 --> 00:00:21.780
applications of polymorphism.

7
00:00:22.140 --> 00:00:23.210
So what's it mean.

8
00:00:23.340 --> 00:00:30.300
Well if we dissect the name polymorphism poly meaning many Morfe meaning shapes or forms it just comes

9
00:00:30.300 --> 00:00:34.890
down to the idea that an object can take on many forms.

10
00:00:34.890 --> 00:00:39.770
So I said we're going to focus on how to use it rather than freaking out about the definition.

11
00:00:39.780 --> 00:00:43.830
So here are the two most important practical applications of polymorphism.

12
00:00:43.830 --> 00:00:49.120
The first is a single method working in a similar way for different classes.

13
00:00:49.200 --> 00:00:51.710
So it might look like this speak method.

14
00:00:51.810 --> 00:00:57.380
So it's defined on multiple different classes and each of these objects has its own Speak method that

15
00:00:57.390 --> 00:00:59.460
does a different thing.

16
00:00:59.460 --> 00:01:04.870
So it's the same method name but it's behaving in different ways depending on where it's defined.

17
00:01:04.890 --> 00:01:09.190
And we've already seen examples of this like when we redefined the Dondre method.

18
00:01:09.270 --> 00:01:15.000
Wrapper can never say the representation method earlier in andrÃ©e turned to programming to define how

19
00:01:15.230 --> 00:01:20.970
a card or a deck should be printed out or just in the last video with MRO.

20
00:01:21.060 --> 00:01:26.880
We had that one method defined I think it was called do something in four different places and then

21
00:01:26.880 --> 00:01:32.970
the second type of polymorphism is where the same operation with the same method works for different

22
00:01:32.970 --> 00:01:34.360
kinds of objects.

23
00:01:34.440 --> 00:01:38.000
So it's able to handle more than one type of object.

24
00:01:38.130 --> 00:01:39.340
So something like this.

25
00:01:39.420 --> 00:01:47.940
Len the built in function is able to work with a list tuple a string and it's able to give us a link

26
00:01:48.150 --> 00:01:51.590
and work consistently with multiple types of things.

27
00:01:51.600 --> 00:01:51.840
Right.

28
00:01:51.840 --> 00:01:53.310
It's not just one class.

29
00:01:53.310 --> 00:01:58.650
Always different types although technically there's a distinction between these built in types and our

30
00:01:58.650 --> 00:02:01.600
own classes but for this example it doesn't matter.

31
00:02:01.770 --> 00:02:04.410
So let's begin by looking at the first example.

32
00:02:04.410 --> 00:02:10.300
Polymorphism and inheritance we have a method that works in the same way for different classes.

33
00:02:10.680 --> 00:02:12.890
And I should point out it's just a class method here.

34
00:02:12.900 --> 00:02:20.070
This is not to say class method a single word you know decorator for compared to an instance method.

35
00:02:20.190 --> 00:02:26.570
I just mean a method in a class which maybe at this side is a bit confusing now anyway.

36
00:02:26.930 --> 00:02:32.400
A common implementation of this is to have a method in a base or parent class that is overridden by

37
00:02:32.400 --> 00:02:33.590
a subclass.

38
00:02:33.600 --> 00:02:35.050
So we've already seen this.

39
00:02:35.310 --> 00:02:37.470
We just haven't been using that term overwriting.

40
00:02:37.500 --> 00:02:39.000
But here's an example.

41
00:02:39.000 --> 00:02:42.160
So there's an Animal class that has a speak method.

42
00:02:42.220 --> 00:02:49.110
There is a dog class and cat class both inherit from animal but they have their own Speak method.

43
00:02:49.110 --> 00:02:54.140
And if you look at with the Animal Speak method says or does it's just an error.

44
00:02:54.390 --> 00:02:57.100
It raises an error that says not implemented error.

45
00:02:57.270 --> 00:03:02.730
So this is actually a built in error that we can use that we get that use for exactly this type of situation

46
00:03:03.000 --> 00:03:09.900
when we want to define a class and basically enforce that whatever the name of the method is speak should

47
00:03:09.900 --> 00:03:12.580
be implemented on anything that inherits from animal.

48
00:03:12.720 --> 00:03:16.720
So if we make an instance of dog we call speak it's going to return Wolf.

49
00:03:16.890 --> 00:03:21.960
You mean like an instance of cat turn speak or we call speak it should return meow but if we made a

50
00:03:21.960 --> 00:03:27.830
new class and we didn't return speak it inherited from animal we would get an error.

51
00:03:28.080 --> 00:03:29.890
So I have this example here.

52
00:03:30.480 --> 00:03:37.290
So if I did something like Class A fish inherits from animal I don't know why I have an extra see if

53
00:03:37.290 --> 00:03:42.710
there and if I just put a pass in here otherwise I'll get an error if I try and do.

54
00:03:42.750 --> 00:03:47.790
Well first of all do dog d dot speak.

55
00:03:48.110 --> 00:03:49.050
They print that

56
00:03:51.740 --> 00:03:56.680
OK and then let's do f equals a new fish.

57
00:03:57.080 --> 00:03:59.190
And then they call f does speak.

58
00:03:59.190 --> 00:04:02.850
So there is no speak defined on fish but there is one to find an animal.

59
00:04:02.850 --> 00:04:03.710
So let's run this

60
00:04:07.240 --> 00:04:13.270
we get Wolf which is first and then we get this not implemented their subclass needs to implement this

61
00:04:13.270 --> 00:04:13.890
method.

62
00:04:14.140 --> 00:04:21.280
So this is an example of polymorphism where this one method speak is implemented both on a child and

63
00:04:21.280 --> 00:04:22.300
a parent class.

64
00:04:22.300 --> 00:04:24.110
It just happens that the way it's set up period.

65
00:04:24.170 --> 00:04:25.300
This is a common pattern.

66
00:04:25.300 --> 00:04:31.150
Like I said where suppose we're working with a team or we're working you're building a class that other

67
00:04:31.150 --> 00:04:35.350
people are going to then write their own sub or child classes with.

68
00:04:35.410 --> 00:04:37.610
It's not uncommon that you would do something like this.

69
00:04:37.690 --> 00:04:42.990
Basically as a direction to tell people hate you need to define your own version of this method.

70
00:04:43.090 --> 00:04:46.000
In any child class but don't get too caught up in that.

71
00:04:46.000 --> 00:04:51.520
The point is that we're using the same method name to do different things depending on which class called

72
00:04:52.090 --> 00:04:53.230
Say method name.

73
00:04:53.230 --> 00:04:56.620
All three places just depends on who's calling in.

74
00:04:56.620 --> 00:04:58.710
All right so that's one example of polymorphism.

75
00:04:58.720 --> 00:05:05.670
The second type of polymorphism is having the same operation work with different types of objects.

76
00:05:05.710 --> 00:05:11.320
So we've been working with this since the very first I don't know first section of this course adding

77
00:05:11.350 --> 00:05:12.530
two numbers together.

78
00:05:12.940 --> 00:05:16.120
We have an int and int and we get 10.

79
00:05:16.300 --> 00:05:20.700
If we had a string in a string and there's a plus sign it works totally different.

80
00:05:20.720 --> 00:05:24.190
Right we get 80 to concatenation.

81
00:05:24.210 --> 00:05:28.470
If I had an int and a float we also get a different result than just two events.

82
00:05:28.470 --> 00:05:35.670
So one method behaves differently depending on the objects that is behaving on or with and the way it

83
00:05:35.670 --> 00:05:41.910
does this by the way is with special methods Dondre methods we've actually seen some of them in practice

84
00:05:42.270 --> 00:05:44.460
and in the next video I'm going to dive into.

85
00:05:44.460 --> 00:05:49.490
It's going to be pretty fun to think of I'm not selling it too much but it should be fun.

86
00:05:49.530 --> 00:05:54.840
And we'll define our own class and put a bunch of these special magic methods in that give instructions

87
00:05:54.840 --> 00:06:00.330
to Python for how to deal with our objects so that we can define things like the length or the string

88
00:06:00.330 --> 00:06:01.230
representation.

89
00:06:01.320 --> 00:06:06.810
But also we can define how an object or class should be multiplied or added and we'll create our own

90
00:06:06.810 --> 00:06:07.470
plus sign.

91
00:06:07.480 --> 00:06:09.520
But for a human class for example.

92
00:06:09.630 --> 00:06:10.880
So that's in the next video.

93
00:06:10.920 --> 00:06:13.410
For now let's just wrap up polymorphism.

94
00:06:13.530 --> 00:06:19.090
So we saw that it really just means a single object taking on multiple forms.

95
00:06:19.200 --> 00:06:25.380
And what that really means are two different definitions are to use cases having one method work multiple

96
00:06:25.380 --> 00:06:28.460
ways depending on the class that it's written in.

97
00:06:28.890 --> 00:06:34.500
And then having the same method work in different ways depending on that kind of objects that it's working

98
00:06:34.500 --> 00:06:35.180
with.

99
00:06:35.380 --> 00:06:35.910
Get.

100
00:06:36.000 --> 00:06:41.050
Next up we are going to implement our own version of this second example should be fun.
