WEBVTT
1
00:00:00.360 --> 00:00:01.160
Welcome back.

2
00:00:01.320 --> 00:00:04.230
Hopefully we survive the lambdas lecture.

3
00:00:04.500 --> 00:00:06.260
I know it's a lot in this video.

4
00:00:06.270 --> 00:00:11.190
I'm going to show you a built in function called Map which you can use lambdas with and it's pretty

5
00:00:11.190 --> 00:00:12.720
common use case for them.

6
00:00:13.110 --> 00:00:18.460
OK so a map is a standard function that accepts at least two arguments a function to call.

7
00:00:18.480 --> 00:00:25.920
So we pass in a function to map and an iterable something we can iterate over lists strings dictionaries

8
00:00:25.980 --> 00:00:29.530
tuples and sets and what it will do.

9
00:00:29.630 --> 00:00:33.410
Whatever function we pass in which is usually a lambda.

10
00:00:33.710 --> 00:00:40.130
It will run that lambda for each value in the list or the string or whatever the iterable is and then

11
00:00:40.160 --> 00:00:42.250
it returns a collection at the end.

12
00:00:42.250 --> 00:00:43.250
It's called a map object.

13
00:00:43.250 --> 00:00:48.580
We'll get into that later that contains kind of the new version of everything.

14
00:00:48.590 --> 00:00:49.550
So here's an example.

15
00:00:49.790 --> 00:00:54.200
I have a list called names and let's say I want to double every number in that list.

16
00:00:54.200 --> 00:00:55.760
Very simple.

17
00:00:55.760 --> 00:00:58.910
All you need to do is use map just like this.

18
00:00:59.000 --> 00:01:03.270
And I'm going to make new variable I'm going to call it doubles so I'll save the result and I'll run

19
00:01:03.270 --> 00:01:04.140
a map.

20
00:01:04.310 --> 00:01:06.060
And then there's two arguments.

21
00:01:06.070 --> 00:01:09.900
So the second one we want to be Nom's So we'll start there.

22
00:01:10.190 --> 00:01:12.770
But then the first one is a function.

23
00:01:12.860 --> 00:01:19.010
And so we could write a function called double and have it take a single argument and then return two

24
00:01:19.030 --> 00:01:20.390
times the argument.

25
00:01:20.390 --> 00:01:28.790
Or we could use a lambda like this and I'll just call this I don't know X and then we'll just do two

26
00:01:29.390 --> 00:01:31.610
or X times two it doesn't matter.

27
00:01:31.610 --> 00:01:33.970
Just like that.

28
00:01:33.990 --> 00:01:37.460
So what this is saying map takes this function.

29
00:01:37.470 --> 00:01:44.020
This lambda and this numbs the list and it's going to call this on every single item in Nomes.

30
00:01:44.040 --> 00:01:49.800
So it's going to start taking two and passing it in and returning to times to show for it and then it's

31
00:01:49.800 --> 00:01:51.660
going to put that in a new list.

32
00:01:51.660 --> 00:01:52.800
Technically it's not a list.

33
00:01:52.800 --> 00:01:56.460
We'll get there and it's going to do that for every item in numbs.

34
00:01:56.910 --> 00:02:02.850
And if we did look at doubles what we get is this map object which is something we can iterate over.

35
00:02:02.910 --> 00:02:13.920
So if we wanted to we could just do a you know for Nahm in doubles print numb and in parentheses and

36
00:02:13.920 --> 00:02:22.290
we get 4 8 12 16 20 or if we run it again I could just convert doubles to an actual list and that's

37
00:02:22.290 --> 00:02:23.190
what we get here.

38
00:02:23.190 --> 00:02:27.930
One thing that's interesting is that these map objects can only be iterated once.

39
00:02:27.960 --> 00:02:33.990
So if I look at doubles now and I tried to do list doubles again

40
00:02:36.780 --> 00:02:43.500
it's empty and I need to recreate it but that's not really that doesn't matter because typically what

41
00:02:43.500 --> 00:02:45.710
you would do is just turn it into a list like this.

42
00:02:46.600 --> 00:02:52.780
List map Lamda X such a nightmare of syntax and just look at here.

43
00:02:53.020 --> 00:02:56.110
But if you look at doubles now we get 4 8 12 16 20.

44
00:02:56.110 --> 00:02:57.650
So let me show you another example.

45
00:02:57.820 --> 00:03:03.070
This time I have a list of people and I want to make a new list where we just have you know upper case

46
00:03:03.130 --> 00:03:09.700
for the entire name so uppercase Darcy Krystina and so on I could do that pretty easily with math and

47
00:03:09.760 --> 00:03:13.090
you might be thinking you could use a list comprehension and that is true.

48
00:03:13.090 --> 00:03:19.850
I'll talk about that in a moment but let's start by making a variable just called peep's equals.

49
00:03:20.080 --> 00:03:22.300
And then we'll do math.

50
00:03:25.180 --> 00:03:33.190
And the first thing we do is a Lamda and we'll take a name and then the expression will just be named

51
00:03:33.190 --> 00:03:43.310
dot upper comma and then we pass in people and then we need to turn it into a list.

52
00:03:43.720 --> 00:03:45.290
And if you look at what we get.

53
00:03:45.530 --> 00:03:51.360
It's a list where every person every item in that list is now uppercase.

54
00:03:51.640 --> 00:03:54.930
So in the slides I have the same example of just doubling.

55
00:03:55.120 --> 00:03:56.980
But then here's something new.

56
00:03:57.070 --> 00:04:03.040
We have a list called names but it's each item in the list is a dictionary first and last are the two

57
00:04:03.040 --> 00:04:03.790
keys.

58
00:04:04.090 --> 00:04:11.550
If I wanted to get an end result of just the first names in a list I could use map and the lambda all

59
00:04:11.560 --> 00:04:18.140
that it does for parameter x so for each one here the expression is just X first.

60
00:04:18.160 --> 00:04:22.530
So the first key give us the value which is Rustie cold and blue.

61
00:04:23.230 --> 00:04:24.400
And we're doing it on names.

62
00:04:24.400 --> 00:04:31.310
So it runs this for every item and names resulting with this list after we convert it to a list.

63
00:04:31.510 --> 00:04:31.910
OK.

64
00:04:31.960 --> 00:04:35.110
So as I did mention this is a common use case for lambdas.

65
00:04:35.110 --> 00:04:36.910
You don't have to use the lambda.

66
00:04:36.910 --> 00:04:42.340
We could make a function let's call it def and we could do double to go back to what we had earlier

67
00:04:42.700 --> 00:04:47.650
and double takes an X and it returns X times to

68
00:04:50.630 --> 00:04:55.600
and then you know we can call double on three and we get six perfect.

69
00:04:55.610 --> 00:04:58.460
So if I recall my numbers from way back

70
00:05:01.230 --> 00:05:07.510
we could just do this map and then we pass in double.

71
00:05:07.530 --> 00:05:14.400
So this is nice and clean looking but you have to define an individual function every time to do that.

72
00:05:14.700 --> 00:05:21.720
And now if I look at list doubles I get the same results but at the end of the day we could have just

73
00:05:21.720 --> 00:05:27.470
done this and done it all in a single line with a lambda because they do the exact same thing.

74
00:05:27.520 --> 00:05:32.730
Taken Single number return x times that are x times to double the number.

75
00:05:32.730 --> 00:05:33.450
Same thing here.

76
00:05:33.450 --> 00:05:34.370
There's just no name.

77
00:05:34.410 --> 00:05:36.830
No no intermediate step involved.

78
00:05:37.440 --> 00:05:38.710
And we get the same result.

79
00:05:39.080 --> 00:05:39.450
OK.

80
00:05:39.510 --> 00:05:40.810
I know it's kind of overwhelming.

81
00:05:41.100 --> 00:05:46.080
And we have kind of been skirting around the fact that we can use a list comprehension to do the exact

82
00:05:46.080 --> 00:05:47.050
same thing.

83
00:05:47.370 --> 00:05:50.310
I'm going to talk about that but not until the next video.

84
00:05:50.370 --> 00:05:56.160
So if you have had that thought hang on to it it's a rational thing to think because this is a lot of

85
00:05:56.160 --> 00:06:00.790
syntax for something we could achieve without this syntax without Alamdar without map.

86
00:06:00.960 --> 00:06:03.060
And we just use a list comprehension but we'll get there.

87
00:06:03.150 --> 00:06:08.940
So next up I'm going to show you something called philtre which is very very similar in the sense that

88
00:06:08.940 --> 00:06:12.070
we can use a lambda but it does something different.

89
00:06:12.110 --> 00:06:14.610
That's the worst explanation of ever given.

90
00:06:14.610 --> 00:06:16.470
Anyway I'll do a better job with the next video.
