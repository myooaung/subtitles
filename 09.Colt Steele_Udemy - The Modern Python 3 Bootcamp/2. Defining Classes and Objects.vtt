WEBVTT
1
00:00:00.270 --> 00:00:01.470
Hey welcome back.

2
00:00:01.470 --> 00:00:04.410
So in this video I have two key questions I want to answer.

3
00:00:04.410 --> 00:00:07.300
The first is what is object oriented programming.

4
00:00:07.300 --> 00:00:08.250
What's it mean.

5
00:00:08.250 --> 00:00:14.730
And then the second is to define two key terms that we'll hear throughout this entire section class

6
00:00:14.970 --> 00:00:16.170
and object.

7
00:00:16.170 --> 00:00:19.960
So we'll see what they mean and how they relate to object oriented programming.

8
00:00:19.980 --> 00:00:20.690
OK.

9
00:00:20.850 --> 00:00:26.010
One of the first things I want to be clear about is that OTOP is not unique to Python.

10
00:00:26.280 --> 00:00:32.430
Not every single programming language is object oriented but most of the popular ones out there are

11
00:00:32.430 --> 00:00:33.630
object oriented.

12
00:00:33.730 --> 00:00:38.970
So you know the exact syntax in Python just like the syntax to create a variable in Python is different

13
00:00:38.970 --> 00:00:41.720
than the syntax you create a variable in Javascript.

14
00:00:41.790 --> 00:00:43.140
But they both have variables.

15
00:00:43.140 --> 00:00:46.290
So O.P. is not Python specific topic.

16
00:00:46.330 --> 00:00:49.040
OK so next up what is it.

17
00:00:49.080 --> 00:00:50.760
What does it actually mean.

18
00:00:50.760 --> 00:00:58.170
So in my definition I break it into two main components the first and most important idea is that O.P.

19
00:00:58.230 --> 00:01:04.950
is just about using code to represent or recreate things that exist in the world things that aren't

20
00:01:05.040 --> 00:01:06.690
in our programming language.

21
00:01:06.690 --> 00:01:15.600
So whether that's a car use or a poker hand a playing card a deck of cards a casino really anything

22
00:01:15.600 --> 00:01:19.020
out there and we're not just limited to physical objects.

23
00:01:19.020 --> 00:01:21.910
It could be more intangible things that processor.

24
00:01:22.110 --> 00:01:28.890
I don't know a song or a schedule a calendar all sorts of different things but they don't exist built

25
00:01:28.890 --> 00:01:29.970
into Python.

26
00:01:29.970 --> 00:01:34.860
So we want to create our own representation of that using Python and the way we do it.

27
00:01:34.920 --> 00:01:39.720
And this is the second part of the definition is using classes and objects.

28
00:01:39.720 --> 00:01:40.840
So there's two things.

29
00:01:40.890 --> 00:01:46.620
The first O.P. is just about representing things that exist in the world using code.

30
00:01:46.620 --> 00:01:51.100
And the second is the way we do that is by writing classes in objects.

31
00:01:51.260 --> 00:01:53.280
OK so that's a high level definition.

32
00:01:53.490 --> 00:01:57.020
Let's talk about classes and objects now to bolded words.

33
00:01:57.150 --> 00:01:59.350
Very important to this entire section.

34
00:01:59.550 --> 00:02:04.080
So the next logical question might be what exactly is a class.

35
00:02:04.080 --> 00:02:08.910
Classes are like blueprints or recipes or specifications.

36
00:02:08.910 --> 00:02:13.620
They define what every single instance of that class should contain.

37
00:02:13.850 --> 00:02:15.660
So that's kind of a confusing definition.

38
00:02:15.690 --> 00:02:18.280
Let's say that we are modeling users.

39
00:02:18.450 --> 00:02:24.630
So we would define a User class and it is a blueprint for every individual user we create.

40
00:02:24.750 --> 00:02:32.040
So we set out to define Let's say every user has a couple of pieces of information which we call attributes.

41
00:02:32.040 --> 00:02:40.140
Every user has a username password and email and a profile picture but then we also include functionality

42
00:02:40.230 --> 00:02:47.130
or methods inside the user class that says every user has a log out method.

43
00:02:47.490 --> 00:02:51.660
It also has a change profile picture method a checkout method.

44
00:02:51.660 --> 00:02:52.690
Those sort of things.

45
00:02:52.710 --> 00:02:59.240
So it's about taking functionality and pieces of data attributes and putting them together into a specification.

46
00:02:59.310 --> 00:03:06.880
So every user has this or every playing card has a suit and a number and colors it red or black.

47
00:03:07.110 --> 00:03:08.840
And maybe that's about it.

48
00:03:08.880 --> 00:03:12.510
But every playing card follows that pattern it's like a little cookie cutter.

49
00:03:12.510 --> 00:03:18.280
And then we can use that cookie cutter to create individual instances of that class.

50
00:03:18.300 --> 00:03:21.340
So we find the blueprint that says every user looks like this.

51
00:03:21.540 --> 00:03:28.170
And then when we use that term object or instance it is an instance of a class when we create a user

52
00:03:28.170 --> 00:03:30.930
object it is based off of the User class.

53
00:03:31.020 --> 00:03:37.660
When we create a list object or a dictionary object it's based off of the Dictionary class.

54
00:03:37.860 --> 00:03:43.260
So yes even though we don't know how to define our own classes yet we've been working with classes nonstop

55
00:03:43.260 --> 00:03:51.360
in this course so I have Python open in the terminal and we've been using things like ants or lists

56
00:03:51.540 --> 00:03:53.200
pretty much nonstop.

57
00:03:53.220 --> 00:03:59.650
So if I type help if you can see the video on help it's just a way for us to retrieve documentation

58
00:03:59.670 --> 00:04:04.630
information about classes or functions or other things in Python.

59
00:04:04.650 --> 00:04:07.160
But let me just do help on it.

60
00:04:07.860 --> 00:04:11.950
Notice the first thing it tells me help on class it.

61
00:04:12.000 --> 00:04:14.290
And then we have this class ant right here.

62
00:04:14.490 --> 00:04:16.950
So don't worry about the syntax yet.

63
00:04:16.950 --> 00:04:21.550
But what this shows us right here is the specification for every int.

64
00:04:21.720 --> 00:04:24.600
So every int has all these methods.

65
00:04:24.600 --> 00:04:29.650
Most of these we don't actually work with but every int has that see a floor method.

66
00:04:29.820 --> 00:04:30.970
It has a.

67
00:04:31.290 --> 00:04:31.710
What else.

68
00:04:31.740 --> 00:04:36.070
Invert Moel or Rand.

69
00:04:36.090 --> 00:04:37.360
All these different things every.

70
00:04:37.400 --> 00:04:42.780
It comes from or comes with or let's do help on list.

71
00:04:42.780 --> 00:04:45.340
So here's the list class.

72
00:04:45.540 --> 00:04:52.140
So this is the blueprint the specification that says OK every list comes with all of these pieces of

73
00:04:52.140 --> 00:04:53.020
functionality.

74
00:04:53.220 --> 00:04:58.930
And just as a side note these double underscore once we've talked about are not really for us to use.

75
00:04:58.980 --> 00:05:05.740
They are kind of journal pieces here all these list methods we've been working with pen to clear copy

76
00:05:05.740 --> 00:05:08.680
count extend what else is there.

77
00:05:08.680 --> 00:05:13.060
Insert pop or remove sort all these things you spend a lot of time covering.

78
00:05:13.060 --> 00:05:16.170
Those are defined in the list class.

79
00:05:16.300 --> 00:05:21.210
Then when I do something like this numbs equals one to three.

80
00:05:21.400 --> 00:05:24.840
I am creating an instance of the list class.

81
00:05:24.880 --> 00:05:29.510
So when I do type Nom's write I get class list.

82
00:05:29.680 --> 00:05:32.430
So hopefully that helps illustrate the idea of a class.

83
00:05:32.440 --> 00:05:33.310
It's a blueprint.

84
00:05:33.460 --> 00:05:37.150
And then we create instances of that class.

85
00:05:37.150 --> 00:05:43.270
I should mention this is a special little syntax the classes will be creating will create instances

86
00:05:43.270 --> 00:05:45.340
by using their name that we create.

87
00:05:45.340 --> 00:05:53.230
So we might do something like I don't know card equals card or we might use something like Alyx equals

88
00:05:53.560 --> 00:05:54.600
user.

89
00:05:54.850 --> 00:06:00.190
And then we pass an I don't know him Alex and then something else and some other information.

90
00:06:00.280 --> 00:06:05.510
But just to be clear this is a special case it's a builtin and class type in Python.

91
00:06:05.530 --> 00:06:08.420
We'll be learning to define our own classes to add in.

92
00:06:08.430 --> 00:06:12.070
So I'm actually going to end the video here but I just really want to hit this point home.

93
00:06:12.130 --> 00:06:13.150
Classes and objects.

94
00:06:13.150 --> 00:06:15.110
It all boils down to that with O.P..

95
00:06:15.250 --> 00:06:22.240
Classes are the schematics objects are the instances of that class created using the recipe creating

96
00:06:22.240 --> 00:06:24.070
using the schematic.

97
00:06:24.070 --> 00:06:28.510
So from here on out we're going to learn how to create our own classes and work.

98
00:06:28.570 --> 00:06:32.600
The reason we do that is to help model things that exist in the real world.

99
00:06:32.750 --> 00:06:33.970
So that's coming up next.

100
00:06:33.970 --> 00:06:34.460
OK.

101
00:06:34.750 --> 00:06:35.890
Let's move on.
