WEBVTT
1
00:00:00.300 --> 00:00:01.340
Hey welcome back.

2
00:00:01.470 --> 00:00:07.110
So we saw multiple inheritance we saw the trivial example of aquatic and ambulatory and Penguin classes

3
00:00:07.620 --> 00:00:12.670
where the penguin class inherited both from aquatic and ambulatory to different classes.

4
00:00:12.690 --> 00:00:18.630
They both had a greet method and the question was Why does the code one greet versus the other and how

5
00:00:18.630 --> 00:00:20.260
is that order stablished.

6
00:00:20.280 --> 00:00:26.220
So I said that you know if we put aquatic first then we get the aquatic greet we put ambulatory first

7
00:00:26.360 --> 00:00:29.700
and we get the ambulatory greet but it's not always that simple.

8
00:00:29.700 --> 00:00:35.010
You might have multiple classes and then aquatic might inherit from two other classes and they might

9
00:00:35.200 --> 00:00:39.980
you know also have greet and ambulatory might inherit from another class that has great.

10
00:00:40.140 --> 00:00:42.430
And the diagram might be crazy complex.

11
00:00:42.510 --> 00:00:46.220
So in that in a case like that how do you know what the order will be that things will be run.

12
00:00:46.290 --> 00:00:50.880
And the answer has to do with something called method resolution order or m r.

13
00:00:50.880 --> 00:00:57.870
So whenever you create a class Python automatically sets a method resolution order or MRO for the class

14
00:00:58.200 --> 00:01:04.140
which is basically just the order in which Python is going to look for methods on instances of that

15
00:01:04.140 --> 00:01:04.880
class.

16
00:01:04.890 --> 00:01:06.190
So it's like a hierarchy.

17
00:01:06.270 --> 00:01:10.860
I'm going to look here first on Penguin and then I'm going to look on aquatic and then I'm going to

18
00:01:10.860 --> 00:01:13.560
look on what was the other one ambulatory.

19
00:01:13.560 --> 00:01:16.600
And then I'll look on the base object class.

20
00:01:16.620 --> 00:01:21.120
So that would be the example or one potential example from last video.

21
00:01:21.300 --> 00:01:27.060
And the way that Python actually establishes the order the algorithm behind it it has changed over the

22
00:01:27.060 --> 00:01:29.550
years I believe it changed from Python 2 to 3.

23
00:01:29.550 --> 00:01:30.510
There is a shift.

24
00:01:30.690 --> 00:01:37.380
And on top of that it is pretty complex and there's entire blog posts that are very long devoted to

25
00:01:37.650 --> 00:01:39.470
dissecting the algorithm.

26
00:01:39.480 --> 00:01:42.060
This here is the documentation for 2.3.

27
00:01:42.060 --> 00:01:47.250
So not exactly what we want but I just want to show you if we scroll down you can see it starts to get

28
00:01:47.250 --> 00:01:51.860
into a decent amount of math and also some ASCII art here.

29
00:01:51.930 --> 00:01:54.480
But it talks about you know the algorithm and how it works.

30
00:01:54.540 --> 00:01:57.890
We are not going to get into the nitty gritty details of this.

31
00:01:57.930 --> 00:02:05.070
Instead I'm going to show you three different ways just to access and see the MRO for a given class

32
00:02:05.270 --> 00:02:10.200
so that if you're working with your own class or a class at someone else to find an external module

33
00:02:10.350 --> 00:02:15.360
or even a built in thing and you just want to know what the MRO is you have three different things that

34
00:02:15.360 --> 00:02:17.600
you can use three different ways to find out.

35
00:02:18.120 --> 00:02:25.170
So there is a dunder MRO attribute that is built into classes so you can call that on any class you

36
00:02:25.190 --> 00:02:28.390
define or any other class you come across.

37
00:02:28.410 --> 00:02:34.950
There's an MRO method that you just pass the class into and then there's the built in help function.

38
00:02:34.950 --> 00:02:40.010
We've already seen you pass an int class name and this is the most ideal.

39
00:02:40.230 --> 00:02:42.510
I don't know it's one I like the best.

40
00:02:42.510 --> 00:02:46.500
It just gives you the most readable human format to see what's happening.

41
00:02:46.500 --> 00:02:53.490
So for example using the penguin class with donder MRO we get this little tuple back.

42
00:02:53.780 --> 00:03:00.240
If you do the MRO method of belief you get a list and then if we do help it opens up this more readable

43
00:03:00.240 --> 00:03:02.630
thing that's better for us humans to look at.

44
00:03:02.670 --> 00:03:05.100
I assume that you are human watching this.

45
00:03:05.100 --> 00:03:06.630
It's easier for us to read.

46
00:03:06.720 --> 00:03:08.040
Ok example time.

47
00:03:08.040 --> 00:03:13.620
And before I dive into the details of this I just want to say this is another thing that most Python

48
00:03:13.620 --> 00:03:19.170
courses I've seen Actually I haven't seen any course new to me that covers this but this is not something

49
00:03:19.170 --> 00:03:20.010
you have to panic about.

50
00:03:20.040 --> 00:03:23.270
If it does confuse you but it's just kind of cool to know how it works.

51
00:03:23.280 --> 00:03:31.440
So I have a simple example with what is this four different classes and there is the base a class there's

52
00:03:31.470 --> 00:03:34.040
a B class that inherits from a.

53
00:03:34.410 --> 00:03:37.070
There's a C class that also inherits from a.

54
00:03:37.290 --> 00:03:44.670
So we sort of have this sort of this shape going on we have an A and then we have B inheriting and C

55
00:03:44.670 --> 00:03:51.230
inheriting as well and then we have D which inherits from both B and C..

56
00:03:51.630 --> 00:03:53.290
So this diagram is hideous me.

57
00:03:53.310 --> 00:03:55.020
Let me clean it up OK.

58
00:03:55.260 --> 00:03:56.100
Did my best.

59
00:03:56.120 --> 00:03:57.590
It looks something like this.

60
00:03:57.600 --> 00:04:05.320
So if the base class A which then B and C both inherit from and then d inherits from B and C as well.

61
00:04:05.370 --> 00:04:11.190
So it's not as simple as you know just a linear thing where we have a B and then d that inherits from

62
00:04:11.190 --> 00:04:13.940
B instead there's some ambiguity.

63
00:04:14.190 --> 00:04:15.670
And on top of that.

64
00:04:15.790 --> 00:04:21.060
So there's a method called do something that's defined in all four classes and all that it does is print

65
00:04:21.450 --> 00:04:25.500
method defined in and then the class that has been defined.

66
00:04:25.920 --> 00:04:31.770
So if I print well first and make a new instance of d then I print thing do something.

67
00:04:31.770 --> 00:04:36.090
What do we expect to see just based off of our previous experience.

68
00:04:36.090 --> 00:04:42.600
It should call do something that is defined in the class which is this one here should say method defined

69
00:04:42.600 --> 00:04:43.010
in D.

70
00:04:43.020 --> 00:04:44.730
So let's check that.

71
00:04:44.730 --> 00:04:49.100
Run the file and we get where we expected method defined in D.

72
00:04:49.530 --> 00:04:49.980
OK.

73
00:04:50.160 --> 00:04:55.950
So now the trickier thing I'm going to comment this one out and if I just leave it like this will actually

74
00:04:55.950 --> 00:04:58.160
get an error because I thought I was going to.

75
00:04:58.260 --> 00:05:02.910
I mean the class is empty and it's going to tell us it expects indented block so we can just add a pass

76
00:05:03.060 --> 00:05:04.650
for this empty class.

77
00:05:04.650 --> 00:05:07.840
So now which version of Do something is called.

78
00:05:07.950 --> 00:05:17.610
Because both B and C both of them have to do something to find which one is called and to find out definitively

79
00:05:17.850 --> 00:05:20.450
what we can do is use common.

80
00:05:20.550 --> 00:05:28.800
Both of these out what we can do is use MRO so we can do a print d dot underscore double underscore

81
00:05:28.800 --> 00:05:30.890
MRO like this.

82
00:05:30.930 --> 00:05:37.020
That was the first method and that will tell us protection not a method but by method I mean first way

83
00:05:37.110 --> 00:05:38.140
of finding it out.

84
00:05:38.220 --> 00:05:47.010
So we get this and you can see here goes from D then to B then to C then to a and then to the base object

85
00:05:47.010 --> 00:05:48.980
class.

86
00:05:49.030 --> 00:05:56.390
Our next option is to do d dot MRO method there.

87
00:05:57.950 --> 00:05:59.450
And this just gives us a list.

88
00:05:59.510 --> 00:06:00.290
Same order.

89
00:06:00.290 --> 00:06:02.320
So all of them should give us the same order.

90
00:06:02.320 --> 00:06:05.060
Otherwise there would be a big problem.

91
00:06:05.060 --> 00:06:13.270
And then finally the one that I prefer is help the and you've seen this before it it opens up this little

92
00:06:13.420 --> 00:06:15.000
menue thing.

93
00:06:15.280 --> 00:06:20.140
And up here you can see method resolution order and it's just printed out in a nicer way for us to read

94
00:06:20.140 --> 00:06:27.470
when we don't have to see like a tuple that says class and all those brackets we just C D B C A built

95
00:06:27.540 --> 00:06:28.940
and thought object.

96
00:06:29.180 --> 00:06:31.970
OK so this explains it best.

97
00:06:31.980 --> 00:06:40.350
DBC a cue to get out of there let's go back Alief those three commented out and if we go here again.

98
00:06:40.570 --> 00:06:48.870
So we decided it was we didn't decide but we saw it was D B C A object comment that out.

99
00:06:48.880 --> 00:06:49.870
So we have that.

100
00:06:49.900 --> 00:06:51.690
If you're looking at the notes.

101
00:06:51.760 --> 00:06:59.680
So now if I run this we get method defined and B which makes sense B was next after D which would come

102
00:06:59.850 --> 00:07:00.340
up.

103
00:07:00.670 --> 00:07:01.040
OK.

104
00:07:01.060 --> 00:07:11.100
So we could come and topee at a pass in there and we should expect it to go where to see next and we

105
00:07:11.100 --> 00:07:20.240
get method defined in C and then one more time pass we get method defined in a.

106
00:07:20.440 --> 00:07:21.480
Which is this one.

107
00:07:21.930 --> 00:07:22.510
OK.

108
00:07:22.720 --> 00:07:27.370
And if we did come at this out and get a pass here what would we expect to find.

109
00:07:27.480 --> 00:07:28.650
Well we'd get an error.

110
00:07:28.810 --> 00:07:29.910
It's going to look on D.

111
00:07:29.920 --> 00:07:33.930
There's something called do something in C and B and so on and a and we'll look.

112
00:07:33.940 --> 00:07:36.110
I believe I'll look on the base object as well.

113
00:07:36.160 --> 00:07:38.100
And there's definitely nothing called Do something.

114
00:07:38.140 --> 00:07:43.060
So will throw an error saying D has nothing called do something I don't know what you want and if you

115
00:07:43.060 --> 00:07:45.630
do run it there we go.

116
00:07:45.640 --> 00:07:47.880
The object has no attribute do something.

117
00:07:47.980 --> 00:07:55.330
So lastly what this means is that when we call super let's say in D instead of this method I referred

118
00:07:55.330 --> 00:07:56.360
to super.

119
00:07:56.410 --> 00:07:59.960
It's going to refer to whatever is next in line and that MRO.

120
00:08:00.040 --> 00:08:03.150
So be super on its own will get that far.

121
00:08:03.160 --> 00:08:05.840
But if you do super dot do something.

122
00:08:05.920 --> 00:08:11.940
And we tried running this now we should see d and then B which is exactly what we get.

123
00:08:12.070 --> 00:08:17.140
So back in the previous video with the multiple inheritance example with Penguin an ambulatory and aquatic

124
00:08:17.560 --> 00:08:19.000
when we were calling super.

125
00:08:19.060 --> 00:08:24.400
It was using the first thing while it was Penguin and then I can't remember which order I had it in.

126
00:08:24.400 --> 00:08:26.890
But then ambulatory and then aquatic.

127
00:08:26.890 --> 00:08:30.660
So super instead of penguin was referring to the next thing in line.

128
00:08:30.670 --> 00:08:31.470
Same thing here.

129
00:08:31.630 --> 00:08:35.290
So I won't do the entire thing but we could keep going up the chain here.

130
00:08:35.290 --> 00:08:39.820
Superdad do something to stop after this.

131
00:08:39.820 --> 00:08:42.910
Now we get Dibiase and if we kept going.

132
00:08:42.910 --> 00:08:44.420
Next up would be.

133
00:08:44.800 --> 00:08:45.270
All righty.

134
00:08:45.280 --> 00:08:51.580
I'll leave it at that MRO is very complex and how it's actually calculated how Python sets it up and

135
00:08:51.580 --> 00:08:55.070
figures out the order things should be resolved.

136
00:08:55.210 --> 00:09:00.970
But for us there are these three different ways that we can find out the calculated MRO for a given

137
00:09:00.970 --> 00:09:03.070
class and I prefer.

138
00:09:03.370 --> 00:09:03.880
OK.

139
00:09:04.150 --> 00:09:04.690
Moving on.
