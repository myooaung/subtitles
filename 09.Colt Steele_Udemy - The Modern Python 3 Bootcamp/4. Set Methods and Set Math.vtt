WEBVTT
1
00:00:00.310 --> 00:00:01.640
Hey welcome back.

2
00:00:01.650 --> 00:00:03.390
This is the last video on set.

3
00:00:03.390 --> 00:00:07.500
I know it's been such a brutal long section of Tuhoe videos.

4
00:00:07.600 --> 00:00:13.320
It's probably the shortest topic we'll cover but there are some built and set methods we need to discuss

5
00:00:13.950 --> 00:00:17.880
unlike tuples which only had what two methods we talked about.

6
00:00:17.880 --> 00:00:22.800
There are a couple more to talk about with sets but it's still pretty straightforward.

7
00:00:22.800 --> 00:00:23.960
So let's get going.

8
00:00:24.150 --> 00:00:26.490
And the first one we'll look at is called add.

9
00:00:26.640 --> 00:00:31.340
So if we have a set we need a way to add data in as we go.

10
00:00:31.380 --> 00:00:34.220
And plus we have it all at the beginning when we initialize the set.

11
00:00:34.410 --> 00:00:37.200
But a lot of times you want to be able to add items.

12
00:00:37.260 --> 00:00:45.390
So all we do is call s whatever our set is it's a set method so the name of a set dot ad and then we

13
00:00:45.390 --> 00:00:48.780
pass in a piece of data a number a string or so on.

14
00:00:48.780 --> 00:00:54.120
And if the number or string of the piece of data is already in there like we try an ad for the first

15
00:00:54.120 --> 00:00:55.230
time it works.

16
00:00:55.230 --> 00:01:00.170
And if we try and add it again it doesn't throw an error or anything it just doesn't add it.

17
00:01:00.330 --> 00:01:09.570
So if I have this series set from last video and I tried to add Vancouver and we look at cities that

18
00:01:09.570 --> 00:01:12.450
works just fine you can see Vancouver right there.

19
00:01:12.540 --> 00:01:17.770
And if I tried to add Kioto again or something like that no error.

20
00:01:17.790 --> 00:01:19.550
But it doesn't show up twice.

21
00:01:20.210 --> 00:01:22.120
See there it is only one time.

22
00:01:22.360 --> 00:01:28.220
OK so that's add next is remove so remove will remove a value from a set.

23
00:01:28.440 --> 00:01:29.600
It looks like this.

24
00:01:29.800 --> 00:01:30.760
Here's our set.

25
00:01:30.760 --> 00:01:32.400
It has 1 2 3 4 5 6.

26
00:01:32.530 --> 00:01:34.300
If I want to remove 3.

27
00:01:34.660 --> 00:01:37.660
Well if it's in there it will be removed.

28
00:01:37.660 --> 00:01:39.920
So let's try that again.

29
00:01:40.000 --> 00:01:49.670
Here we have cities and let's do cities remove let's remove Oslo and if we look at cities now I can

30
00:01:49.670 --> 00:01:53.000
spell you can see it's gone.

31
00:01:53.000 --> 00:01:57.270
Now if I tried to remove something that isn't in this why do I keep spelling cities like that.

32
00:01:57.290 --> 00:01:58.620
Oh my gosh.

33
00:01:58.670 --> 00:02:04.510
I try and remove something that isn't in there like Moscow I get an error.

34
00:02:04.850 --> 00:02:10.050
So it will throw an error if the item is not in the set that you're trying to remove.

35
00:02:10.340 --> 00:02:10.850
OK.

36
00:02:10.850 --> 00:02:13.380
So that add and remove the two ways.

37
00:02:13.520 --> 00:02:19.250
Really the only ways of adding and removing items if we do need to avoid those key errors we can use

38
00:02:19.250 --> 00:02:26.990
another method called discard so I'll briefly show that if I did the same thing as cities that discard

39
00:02:27.740 --> 00:02:28.450
Moscow

40
00:02:31.690 --> 00:02:35.050
and we look at cities we don't get an error.

41
00:02:35.080 --> 00:02:36.240
Moscow was never there.

42
00:02:36.280 --> 00:02:37.240
So nothing happened.

43
00:02:37.360 --> 00:02:47.580
But if I use discard again and remove something like Santiago and we look at cities it's also been removed.

44
00:02:47.590 --> 00:02:53.080
So if you don't want to worry about those errors then you can use discard instead.

45
00:02:53.080 --> 00:02:55.850
Next up is copy copy is very straightforward.

46
00:02:55.870 --> 00:02:58.300
It just makes a copy of the set.

47
00:02:58.300 --> 00:03:03.760
Remember that just like when we used copy with lists or with dictionaries it will make a duplicate of

48
00:03:03.760 --> 00:03:07.430
the data and things look the same but they are not identical.

49
00:03:07.450 --> 00:03:14.620
If you use is so in this case we have as is our first set and we make another s as a copy.

50
00:03:14.620 --> 00:03:16.390
If we look at another s it looks the same.

51
00:03:16.390 --> 00:03:21.940
Double equals would be true but if we compared it using is it's false because they are not the exact

52
00:03:21.940 --> 00:03:22.590
same thing.

53
00:03:22.600 --> 00:03:24.560
In memory they are copies.

54
00:03:24.750 --> 00:03:27.460
OK next is clear.

55
00:03:27.460 --> 00:03:33.610
Also a very straightforward one which removes the entire contents of the set and starts over it deletes

56
00:03:33.610 --> 00:03:34.200
everything.

57
00:03:34.240 --> 00:03:35.500
So I won't do it.

58
00:03:35.560 --> 00:03:37.500
I don't want to sacrifice our cities.

59
00:03:37.630 --> 00:03:41.680
But if I did if I did City start clear it would just show up empty.

60
00:03:41.680 --> 00:03:45.280
Next I'm going to show something that's a little different so set.

61
00:03:45.280 --> 00:03:51.990
Math is a subset of math in the real world not just in Python where we work with sets.

62
00:03:52.000 --> 00:03:58.270
You may have seen set notation before and often we do things like find the intersection of sets or the

63
00:03:58.270 --> 00:04:00.340
union or the symmetric difference.

64
00:04:00.340 --> 00:04:02.130
If you're not familiar with what these are.

65
00:04:02.140 --> 00:04:06.170
Don't worry I'm going to show just a couple of examples very very quickly.

66
00:04:06.340 --> 00:04:09.520
So let's go to sublime here.

67
00:04:09.520 --> 00:04:11.950
I have a file focus on these two lines.

68
00:04:12.040 --> 00:04:17.860
Suppose that I'm a teacher in a high school or college or something and I have two courses a math course

69
00:04:17.890 --> 00:04:23.090
in a biology course and they have student names as a set for each one.

70
00:04:23.110 --> 00:04:26.830
This does assume by the way that you know the students have unique first names.

71
00:04:26.830 --> 00:04:29.680
There could be two Mathew's or two Jain's or something.

72
00:04:29.710 --> 00:04:31.210
We're not going to worry about that for now.

73
00:04:31.390 --> 00:04:33.390
So these are all my students.

74
00:04:33.400 --> 00:04:38.850
Let's say that I'm sending out report cards or some something that I need to do for each student at

75
00:04:38.850 --> 00:04:45.790
one time and I want to basically generate a set of all of my students without any duplicates.

76
00:04:45.790 --> 00:04:48.430
What I want there is called the Union.

77
00:04:48.430 --> 00:04:53.770
I want to take all of the names that are on this list plus all the names on this list but I don't want

78
00:04:53.770 --> 00:04:55.810
to have duplicates like I don't want.

79
00:04:55.810 --> 00:05:01.570
James twice or Matthew twice for example to do that.

80
00:05:01.570 --> 00:05:02.730
It's very simple.

81
00:05:02.800 --> 00:05:11.170
Let me just bring this over pasted in so we have two sets and I use the civil pipe which is on my keyboard

82
00:05:11.290 --> 00:05:12.300
above the return key.

83
00:05:12.310 --> 00:05:20.170
Have to hit shift to get it and I'll do pipe biology students which this is a way of saying Union set

84
00:05:20.170 --> 00:05:21.060
union.

85
00:05:21.370 --> 00:05:29.150
And if I look at the result I get how many items are in there 1 2 3 4 5 6 7 8 9 and there is no duplicate.

86
00:05:29.170 --> 00:05:36.550
So this is a list of a set of all of my students once but I can also do set intersections which in this

87
00:05:36.550 --> 00:05:41.510
case would tell me the set of students who are in both of my courses.

88
00:05:41.650 --> 00:05:49.480
So to do that it's the same syntax except instead of the or we use N and like an ampersand above the

89
00:05:49.480 --> 00:05:56.470
seven key and it tells me OK James and Matthew are your two students that you have and both courses.

90
00:05:56.500 --> 00:06:02.110
So in the rest of this python course we probably won't be doing much set math but it's just worth knowing

91
00:06:02.140 --> 00:06:08.380
that these are things that you can do with sets because sets are these unique collections of data and

92
00:06:08.380 --> 00:06:12.220
if you have multiple sets you often want to find things like where do they intersect.

93
00:06:12.220 --> 00:06:13.300
Where are they different.

94
00:06:13.300 --> 00:06:17.110
What's the total unique entries between three different sets.

95
00:06:17.110 --> 00:06:20.460
That sort of thing you can do that using set math.

96
00:06:20.650 --> 00:06:24.070
That's all that I'll say about that for now and I'll add it in here.

97
00:06:24.070 --> 00:06:25.780
I'll type a little note up just a moment.

98
00:06:25.780 --> 00:06:26.440
There we go.

99
00:06:26.590 --> 00:06:29.030
So I encourage you to play around with this.

100
00:06:29.050 --> 00:06:33.030
Try doing it with three or four different sets and it'll end this video here.

101
00:06:33.280 --> 00:06:36.790
All that we have left to talk about with the sets is set comprehension.

102
00:06:36.820 --> 00:06:37.430
That's next.

103
00:06:37.450 --> 00:06:40.810
And then we're done and then we move on to my favorite topic functions.
