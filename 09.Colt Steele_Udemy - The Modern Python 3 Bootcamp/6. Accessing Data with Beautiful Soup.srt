1
00:00:00,360 --> 00:00:01,040
Already.

2
00:00:01,140 --> 00:00:07,170
So now that we've seen how to actually parse the HMO and select certain elements based off of their

3
00:00:07,170 --> 00:00:14,380
tag name or attributes or CCS style selectors we're now going to talk about how we extract data out.

4
00:00:14,400 --> 00:00:16,970
So we have these objects we've just been printing them.

5
00:00:16,980 --> 00:00:19,530
So we see you know the string representation.

6
00:00:19,540 --> 00:00:25,560
Well let's say I wanted to go to I don't know the weather some weather site dotcom and grab the temperatures

7
00:00:25,920 --> 00:00:27,370
and the temperatures are always stored.

8
00:00:27,390 --> 00:00:29,790
And does that have a class of temp.

9
00:00:30,060 --> 00:00:31,290
But I don't just want the divs.

10
00:00:31,290 --> 00:00:32,510
I want the text inside.

11
00:00:32,520 --> 00:00:33,390
I want to know the number.

12
00:00:33,390 --> 00:00:40,440
How many degrees we could use get text and this video will discover a couple of methods and attributes.

13
00:00:40,530 --> 00:00:42,000
Get text this one.

14
00:00:42,150 --> 00:00:47,120
Another is name that will retrieve the tag name of a given element.

15
00:00:47,250 --> 00:00:54,240
Adder's is a dictionary of attributes that we can access and we can also access attributes using brackets.

16
00:00:54,240 --> 00:00:56,240
So we'll talk about all four of these things.

17
00:00:56,250 --> 00:00:56,840
All right.

18
00:00:56,850 --> 00:00:58,510
So I'm here in my text editor.

19
00:00:58,560 --> 00:01:02,300
I have a new file I just copied everything over from the previous one.

20
00:01:02,340 --> 00:01:08,360
Same import statement the same multi-line each time string in a variable called HMO.

21
00:01:08,400 --> 00:01:09,730
Same variables soup.

22
00:01:09,730 --> 00:01:16,470
And I've started by selecting all items using select that have the class special and that gives us a

23
00:01:16,470 --> 00:01:17,050
list.

24
00:01:17,190 --> 00:01:23,810
So let's just narrow it down to the first one and I'm going to save this to a variable called El for

25
00:01:23,820 --> 00:01:24,800
element.

26
00:01:25,410 --> 00:01:29,360
So if we just print l we'll just see a string that looks like this.

27
00:01:29,450 --> 00:01:34,460
If I want the inner text for example I can call get text.

28
00:01:34,560 --> 00:01:42,360
So I'll do print l dot get underscore a text it's a method and when I run it you can see we get this

29
00:01:42,360 --> 00:01:44,360
list item is special.

30
00:01:44,430 --> 00:01:45,300
So get text.

31
00:01:45,300 --> 00:01:49,220
Is it going to retrieve the text from that object.

32
00:01:49,250 --> 00:01:53,340
And if I just print l it gives this representation.

33
00:01:53,340 --> 00:01:56,510
Remember though it's an instance of an element class.

34
00:01:56,760 --> 00:02:01,080
So there's a method to just retrieve this and that's useful because a lot of the time what we're going

35
00:02:01,080 --> 00:02:08,010
to do with my weather example we'll go through and just extract certain bits of data usually inner text.

36
00:02:08,010 --> 00:02:17,670
We can also do something like for L in souped up select special print l dot get text and then this should

37
00:02:17,670 --> 00:02:20,970
give us however many items we have to get to in this case.

38
00:02:20,970 --> 00:02:25,230
Give us the inner text and there we go.

39
00:02:25,260 --> 00:02:31,710
Also let's see what happens if I move this on to an element that doesn't have inner text like.

40
00:02:31,730 --> 00:02:33,430
What do we have this right here.

41
00:02:33,750 --> 00:02:38,820
This meta tag you wouldn't really do this with a class at special but let's see what happens it doesn't

42
00:02:38,820 --> 00:02:39,970
have any text.

43
00:02:40,190 --> 00:02:42,660
And I call it and we just get nothing.

44
00:02:42,780 --> 00:02:45,930
And that's the way that get text behaves instead of throwing an error.

45
00:02:45,960 --> 00:02:48,940
In this case there is no inner text it just returns nothing.

46
00:02:49,350 --> 00:02:51,540
Otherwise it will return the inner text.

47
00:02:51,540 --> 00:02:56,170
Next let's continue to work with Special everything that has a cost special.

48
00:02:56,320 --> 00:02:58,470
But I'm going to show you another thing we can access.

49
00:02:58,470 --> 00:03:03,820
So instead of just the text there's also something called Dot name and it's not a method.

50
00:03:03,840 --> 00:03:07,590
So a name should refer to the name of the tag like lie.

51
00:03:07,890 --> 00:03:11,580
So for everything that has class name special we're going to print the name.

52
00:03:11,790 --> 00:03:12,950
And there's three things.

53
00:03:13,050 --> 00:03:14,620
It's and two allies.

54
00:03:14,730 --> 00:03:17,050
Let's test it.

55
00:03:17,170 --> 00:03:18,050
And that's what we get.

56
00:03:18,080 --> 00:03:20,450
Metta ally ally.

57
00:03:20,920 --> 00:03:24,090
Hopefully by now you can see how these these start to work together.

58
00:03:24,190 --> 00:03:26,080
We select things we want on a page.

59
00:03:26,140 --> 00:03:29,500
Then often you'll iterate over them and do something for each one.

60
00:03:29,530 --> 00:03:34,180
Extract the name although more often than not you're extracting the data inside.

61
00:03:34,180 --> 00:03:36,700
I'd say get text is really commonly used.

62
00:03:36,730 --> 00:03:39,290
The next thing I'll show other than name.

63
00:03:39,350 --> 00:03:47,170
Let's also print l dot adder's AT&amp;T r s and this is a dictionary containing key value pairs for the

64
00:03:47,170 --> 00:03:49,300
attributes on each item.

65
00:03:49,360 --> 00:03:57,100
So let's just run it and you can see that our meta tag had char set 88 in a class set to special.

66
00:03:57,100 --> 00:04:00,700
This is a list because elements can have more than one class.

67
00:04:00,700 --> 00:04:06,060
I'll show you that and actually let's give this second item a class of special and also.

68
00:04:06,670 --> 00:04:07,180
I don't know.

69
00:04:07,180 --> 00:04:11,940
Super special you separate them by a space.

70
00:04:12,100 --> 00:04:13,310
If I'd run it again.

71
00:04:14,210 --> 00:04:14,750
Beautiful soup.

72
00:04:14,780 --> 00:04:19,350
Automatically parses that and gives us a list of two classes.

73
00:04:19,640 --> 00:04:24,410
So this is using adder's to access the attributes and so you could do something like.

74
00:04:24,470 --> 00:04:27,990
Print l adder's and then access.

75
00:04:28,030 --> 00:04:34,010
Know class for example which this is redundant because we're only selecting things with class of special

76
00:04:35,660 --> 00:04:38,090
you can see here we get special special.

77
00:04:38,180 --> 00:04:39,400
Actually it's not quite redundant.

78
00:04:39,410 --> 00:04:42,350
This one also had super special and then special.

79
00:04:42,350 --> 00:04:46,200
And speaking of redundant we technically don't need to do this.

80
00:04:46,260 --> 00:04:50,230
Dot dot ATRs if we're trying to access an attribute we can just do this.

81
00:04:50,230 --> 00:04:54,770
Let me actually comment this out and do another example with a single item.

82
00:04:54,950 --> 00:05:03,300
Let's say I want to select this H-3 So that would be soup and we could do it find H-3.

83
00:05:03,770 --> 00:05:09,260
And that way we don't have to do zero or anything because we're only getting one item using find and

84
00:05:09,260 --> 00:05:16,010
then I could do dot adder's if I wanted to access data example like this and type it all out.

85
00:05:16,310 --> 00:05:23,900
Or I can use the square brackets directly on it just do do to dash example and save that to a variable.

86
00:05:23,960 --> 00:05:32,590
Well just call it at her and then print HGT ETR and using that syntax you see if we get.

87
00:05:32,590 --> 00:05:39,220
Yes this is just an arbitrary silly data example or attribute that's called data example we could do

88
00:05:39,220 --> 00:05:40,760
the same thing with a div.

89
00:05:40,840 --> 00:05:47,140
So if I select the first div and then I want to know the ID of that div

90
00:05:50,230 --> 00:05:53,560
is called First which indeed it is.

91
00:05:53,560 --> 00:05:59,620
So we have this syntax this nice shortcut that we can use to directly access attributes to get their

92
00:05:59,620 --> 00:06:00,090
values.

93
00:06:00,100 --> 00:06:05,620
If we have the key but you can also just called Dom adder's to get a dictionary containing all key value

94
00:06:05,620 --> 00:06:06,500
attributes.

95
00:06:06,770 --> 00:06:11,380
OK so we're almost there where we're actually going to start scraping and downloading edged him out.

96
00:06:11,530 --> 00:06:15,850
And you know doing something in a more programmatic way and in the next video we're going to talk a

97
00:06:15,850 --> 00:06:20,880
bit more about navigating between him elements relative to one another.

98
00:06:21,040 --> 00:06:26,800
So not just the tag names not just selecting But once I have an element I might want to select the parent

99
00:06:27,100 --> 00:06:29,010
or a sibling or something like that.

100
00:06:29,110 --> 00:06:30,300
So we'll see how to do that.

101
00:06:30,340 --> 00:06:35,740
To summarize what we saw in this video we saw get text access inner text we saw named to access the

102
00:06:35,740 --> 00:06:40,530
name of a tag the element type and we saw two different ways of accessing attributes.

103
00:06:40,600 --> 00:06:44,980
The adder's dictionary or using square brackets and the name of an attribute.
