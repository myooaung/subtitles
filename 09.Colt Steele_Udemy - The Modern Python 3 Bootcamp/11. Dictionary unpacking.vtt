WEBVTT
1
00:00:00.190 --> 00:00:00.480
OK.

2
00:00:00.510 --> 00:00:02.040
One more topic in this section.

3
00:00:02.070 --> 00:00:05.000
So we saw how to use star as an argument.

4
00:00:05.010 --> 00:00:11.430
Now we're going to see how to use star star as an argument and rather than unpacking lists or tuples

5
00:00:11.500 --> 00:00:17.800
which is what a single started using two stars will help us unpack dictionaries into keyword arguments.

6
00:00:17.820 --> 00:00:20.380
So as always it helps to take a look at some code.

7
00:00:20.490 --> 00:00:22.500
So here's a silly little example.

8
00:00:22.550 --> 00:00:26.250
We have a function called display names with two parameters.

9
00:00:26.250 --> 00:00:32.730
First and Second and all it does is I'm actually going to print instead of for turn just to make this

10
00:00:33.030 --> 00:00:37.500
faster and it will print an F string.

11
00:00:37.500 --> 00:00:43.410
First it says hello to second so we could call it right doing something like display names and then

12
00:00:43.590 --> 00:00:50.300
directly say first equals Chartley seconds equals sue.

13
00:00:50.570 --> 00:00:50.850
Right.

14
00:00:50.850 --> 00:00:55.100
And then I can execute it and then get Charlie says hello to sue.

15
00:00:55.590 --> 00:00:56.370
So that's great.

16
00:00:56.490 --> 00:01:02.400
But just like the previous example with unpacking Sometimes you'll have data that in the burst or in

17
00:01:02.400 --> 00:01:08.820
this case you'll have data that's in a dictionary already like we have here first is called second is

18
00:01:08.820 --> 00:01:09.410
rusty.

19
00:01:09.510 --> 00:01:13.410
It's already set up to look like you know the name of these parameters.

20
00:01:13.530 --> 00:01:15.420
It should fit in Nice and easy.

21
00:01:15.600 --> 00:01:20.820
But if I just pass this in directly you can see I have a comment that says nope I just passed names

22
00:01:20.820 --> 00:01:22.700
in let's see what we get.

23
00:01:24.830 --> 00:01:28.770
We got a problem saying missing one required positional argument second.

24
00:01:29.090 --> 00:01:35.280
So what happens here is that first is assigned to names or names is assigned to first.

25
00:01:35.330 --> 00:01:39.620
So first is the entire dictionary and then second is non-existent.

26
00:01:39.620 --> 00:01:43.470
There's nothing that's been passed in and that's why we get that error message.

27
00:01:43.490 --> 00:01:51.770
So what we do is just leave this here commented out we just add those two stars right in front and it

28
00:01:51.770 --> 00:01:56.730
will essentially unpack this dictionary into separate keyword arguments.

29
00:01:56.840 --> 00:02:05.690
So we'll end up with first equals Colt's comma seconds equals resti as arguments.

30
00:02:06.170 --> 00:02:08.080
And what is it called display names.

31
00:02:08.100 --> 00:02:10.690
So who do the exact same thing.

32
00:02:11.150 --> 00:02:17.600
Let's try it called says hello to Rusty so hopefully you can see how this is useful.

33
00:02:17.620 --> 00:02:18.820
It works with dictionaries.

34
00:02:18.820 --> 00:02:26.800
So a single star will unpack tuples or lists to stars unpack dictionaries into keyword arguments.

35
00:02:26.800 --> 00:02:28.680
Lastly I have one more example.

36
00:02:28.690 --> 00:02:34.480
This one is called add and multiply numbers takes three parameters and it just returns.

37
00:02:34.510 --> 00:02:37.620
And then again I'm going to change that to a print that's going to print.

38
00:02:37.640 --> 00:02:40.520
A-plus B times c.

39
00:02:40.570 --> 00:02:46.180
So if we had a dictionary like this a one be is to see is three as we've already seen.

40
00:02:46.180 --> 00:02:52.950
I can't directly pass that in but if I unpack it we should get 7 because a is one be asked to see is

41
00:02:52.970 --> 00:02:59.090
three multiplication happens first three times to six plus a which is 1 gives us 7.

42
00:02:59.320 --> 00:03:02.640
Let's just verify that we get 7.

43
00:03:03.010 --> 00:03:03.420
OK.

44
00:03:03.610 --> 00:03:08.170
So this is using the dictionary unpacking using two stars.

45
00:03:08.170 --> 00:03:13.920
Now let me just show it in conjunction with KW args and let's just down here.

46
00:03:13.920 --> 00:03:23.840
Print other stuff and we'll just print KW args without the stars remember.

47
00:03:24.000 --> 00:03:28.530
And if we just run this right now nothing should change except we should see other stuff.

48
00:03:28.710 --> 00:03:34.290
And KW args it's an empty dictionary but if this dictionary that we unpacked had multiple things in

49
00:03:34.290 --> 00:03:43.730
it like I don't know d equals 55 comma a name equals Tony.

50
00:03:43.830 --> 00:03:49.710
Just like that you now see that we still get seven ABC works.

51
00:03:49.800 --> 00:03:56.390
But then in KW args we now have two key value pairs that have been unpacked and one last thing.

52
00:03:56.460 --> 00:04:03.300
If I passed in after this let's do cat equals blue.

53
00:04:03.370 --> 00:04:04.570
Now I run it.

54
00:04:04.890 --> 00:04:11.930
We end up with the exact same thing but now we also have cat is blue inside of our KW arcs.

55
00:04:11.940 --> 00:04:17.640
So what I'm trying to show you here is that you can't you can do things other than unpacking a dictionary.

56
00:04:17.640 --> 00:04:21.680
It's not like this is the only thing that you can pass to a function if you're going to use it.

57
00:04:21.720 --> 00:04:23.850
You can pass other arguments afterwards.

58
00:04:23.990 --> 00:04:27.020
OK so that is dictionary unpacking.

59
00:04:27.030 --> 00:04:31.070
So in this section we saw a lot of things that had to do with parameters and arguments.

60
00:04:31.170 --> 00:04:39.450
We saw how to use star args we saw KW args or star star args and then we saw how to use star for unpacking

61
00:04:39.510 --> 00:04:43.290
of lists and tuples and then double star for unpacking of dictionaries.

62
00:04:43.300 --> 00:04:44.880
This is what we just saw.

63
00:04:44.940 --> 00:04:45.540
Cool.

64
00:04:45.630 --> 00:04:46.960
So we are done.
