WEBVTT
1
00:00:00.210 --> 00:00:01.130
Welcome back.

2
00:00:01.170 --> 00:00:04.010
So in this video we're going to revisit a built in function.

3
00:00:04.050 --> 00:00:08.130
We've been using a bunch called Lenn or length.

4
00:00:08.130 --> 00:00:13.620
As you may have heard now it's a pet peeve of mine that it's empty and it's not that much longer to

5
00:00:13.620 --> 00:00:15.340
say lying anyway.

6
00:00:15.680 --> 00:00:18.260
But we're not just going to see what we've already learned.

7
00:00:18.280 --> 00:00:23.760
You know that it returns the length of an object you can pass in a sequence like a string a tuple list

8
00:00:23.760 --> 00:00:28.740
or a range or a collection like a dictionary or a set and it will give you the length number of items

9
00:00:28.740 --> 00:00:30.230
in there as an integer.

10
00:00:30.570 --> 00:00:36.150
So you know we don't have to review all of this but there's examples in the slides of passing in a string

11
00:00:36.150 --> 00:00:39.240
a tuple of lists to arrange a set in a dictionary.

12
00:00:39.240 --> 00:00:46.200
So we've seen we can present a string get a length get passed in a dictionary and we get a blank.

13
00:00:46.290 --> 00:00:51.630
And the way that that dictionary length is calculated is based off of the number of key value pairs

14
00:00:51.630 --> 00:00:53.090
in there.

15
00:00:53.340 --> 00:00:57.950
So we could have another one and the length this is two.

16
00:00:58.380 --> 00:00:58.800
OK.

17
00:00:58.920 --> 00:01:01.950
Now what I really want to get into is how this works.

18
00:01:01.950 --> 00:01:09.210
So then on whatever object we call behind the scenes all of these have a not really secret but a built

19
00:01:09.210 --> 00:01:14.510
in method a dunder double underscore method called Lenn like this.

20
00:01:16.810 --> 00:01:22.060
So if we called it on a string like hello dot double underscore a line.

21
00:01:22.180 --> 00:01:26.170
If you watch the module section we talked about double or Dondre name.

22
00:01:26.440 --> 00:01:27.520
So two underscores.

23
00:01:27.520 --> 00:01:34.900
Name two underscores there's a method called Blen that exists on all of these things anything we can

24
00:01:34.900 --> 00:01:38.700
pass into the function then the built in function.

25
00:01:38.770 --> 00:01:47.410
This string has a double underscore Len method or a list like this has its own double underscore Len.

26
00:01:47.530 --> 00:01:51.790
And the reason this matters you would probably never call this yourself.

27
00:01:52.150 --> 00:01:56.560
But the way that Lenn the built in function is implemented like this.

28
00:01:56.560 --> 00:02:05.290
When I do line of high behind the scenes it's actually calling the double underscore Len method and

29
00:02:05.290 --> 00:02:06.340
getting a result.

30
00:02:06.340 --> 00:02:12.670
So this is sort of like an adapter that will call the specific double underscore LAN method on whatever

31
00:02:13.000 --> 00:02:14.620
object is passed in.

32
00:02:15.070 --> 00:02:18.980
So that's one thing I just want to show you is that there is this built in method double underscore

33
00:02:19.060 --> 00:02:22.760
line getting tired of saying that that is called Behind the scenes.

34
00:02:22.840 --> 00:02:28.480
But what's also interesting and this is going to be a jump to the future but I think it's kind of interesting

35
00:02:28.900 --> 00:02:33.910
we haven't talked about Object-Oriented Programming in defining our own classes and objects but once

36
00:02:33.910 --> 00:02:39.430
we get there and I'm going to show you a preview right now we can define our own double underscore learn

37
00:02:39.490 --> 00:02:42.180
methods on classes we define.

38
00:02:42.430 --> 00:02:49.240
So we might you know create our own class called deck of cards and we want to be able to call Lenn on

39
00:02:49.360 --> 00:02:54.820
deck deck 1 which would be a variable and it's not going to know by default.

40
00:02:54.820 --> 00:02:57.120
How do you calculate the length of something like that.

41
00:02:57.160 --> 00:03:01.160
Or maybe we pass in a song class.

42
00:03:01.210 --> 00:03:02.650
How do you calculate the length of a song.

43
00:03:02.650 --> 00:03:04.180
Is it the number of words.

44
00:03:04.180 --> 00:03:06.990
Is it that the duration is totally up to us.

45
00:03:07.030 --> 00:03:12.700
So what we would do is when we define the song class and again bear with me if you're not familiar with

46
00:03:12.700 --> 00:03:17.790
Object-Oriented Programming but we'll be able to define our own types essentially.

47
00:03:18.150 --> 00:03:25.600
And if we defined a song class we could add a double underscore Lenn inside of it and tell it exactly

48
00:03:25.600 --> 00:03:26.950
what we want the length to be.

49
00:03:27.010 --> 00:03:28.440
Is it going to be the duration.

50
00:03:28.450 --> 00:03:31.150
Is it going to be 25 every song.

51
00:03:31.150 --> 00:03:33.610
Is it going to be the number of lines and so on.

52
00:03:33.880 --> 00:03:38.120
So I actually have an example of this and it looks like this.

53
00:03:38.260 --> 00:03:40.270
And this is all new stuff.

54
00:03:40.360 --> 00:03:42.800
Every line here pretty much is something we haven't seen.

55
00:03:43.060 --> 00:03:48.280
And I don't want to overwhelm you kind of wanted to put on blinders like if you're a horse and just

56
00:03:48.280 --> 00:03:49.470
focus right here.

57
00:03:49.690 --> 00:03:54.340
But what I'm doing is I'm making a class that I'm calling special list.

58
00:03:54.970 --> 00:04:02.950
So you know how we can do things like list one two three and that makes us a new list or I can do a

59
00:04:03.190 --> 00:04:11.080
tuple or a set or we've seen as TR And you can pass in you know like a number and turn it into a string.

60
00:04:11.080 --> 00:04:16.930
Those are all built in functions that generate a new object a new list or whatever.

61
00:04:17.080 --> 00:04:18.850
We can do our own custom one here.

62
00:04:18.850 --> 00:04:25.820
I have one I've called special list so here I'm actually defining my own class just like a list or string.

63
00:04:25.930 --> 00:04:31.410
Except this one doesn't do anything except I have a Lenn method implemented.

64
00:04:31.900 --> 00:04:34.020
And this line method returns 50.

65
00:04:34.030 --> 00:04:34.870
No matter what.

66
00:04:34.870 --> 00:04:39.670
So there could be 100 items there could be one item though one is always going to be 50.

67
00:04:39.970 --> 00:04:48.130
And the cool thing is that I'm able to use the built in len function in pass in my special list an instance

68
00:04:48.130 --> 00:04:55.300
of specialist I saved to variable and it's going to behind the scenes say OK we'll just L-1 have a double

69
00:04:55.300 --> 00:04:56.640
underscore Len.

70
00:04:57.100 --> 00:05:03.580
If it does let's call that and whatever it gives us just send it back and it happens to be 50 because

71
00:05:03.580 --> 00:05:04.870
that's the only option.

72
00:05:04.900 --> 00:05:10.340
The way I've written it just like if I had called Len on hello it's going to see.

73
00:05:10.360 --> 00:05:14.080
All right does this halo thing have a double underscore Len.

74
00:05:14.170 --> 00:05:18.310
If it does call that it's the same exact idea.

75
00:05:18.460 --> 00:05:20.640
So here don't worry about the syntax.

76
00:05:20.650 --> 00:05:22.920
But I've implemented my own land.

77
00:05:23.040 --> 00:05:24.470
That always returns 50.

78
00:05:24.490 --> 00:05:25.890
So let's just verify that.

79
00:05:26.050 --> 00:05:31.670
I'm going to make two lists L1 and L2 and this one is going to be empty.

80
00:05:32.380 --> 00:05:38.130
And then I'm going to do that and I'll print Lenn of L. 2.

81
00:05:38.620 --> 00:05:39.730
Let's test it.

82
00:05:39.850 --> 00:05:42.140
And I called this list up here.

83
00:05:42.390 --> 00:05:43.590
And we get 50.

84
00:05:43.690 --> 00:05:45.180
Every single time.

85
00:05:45.190 --> 00:05:49.540
So again don't worry about the self thing the classic keyword innit.

86
00:05:49.540 --> 00:05:51.580
All of this stuff doesn't really matter.

87
00:05:51.760 --> 00:05:57.190
But I just want to show you we can overwrite or define our own custom Lenn double underscore line which

88
00:05:57.190 --> 00:06:01.580
then the built in function one that we've been using will automatically call.

89
00:06:01.900 --> 00:06:03.360
And here's one more version.

90
00:06:03.370 --> 00:06:09.300
It's a little fancier but all that this does is it returns half of the actual length.

91
00:06:09.520 --> 00:06:16.840
So for self-taught data that's the data that is in this list and I'm running the double underscore one

92
00:06:17.080 --> 00:06:19.860
and then integer dividing it by two.

93
00:06:19.870 --> 00:06:25.320
So let's add a couple more items to this guy and then this one I'll have.

94
00:06:25.410 --> 00:06:26.910
There we go.

95
00:06:26.920 --> 00:06:33.980
So when I run print Len L. 1 now it's going to give me the length divided by two as an integer.

96
00:06:34.160 --> 00:06:35.100
Let's see.

97
00:06:35.590 --> 00:06:38.420
And I get four and two and I think that's about right.

98
00:06:38.420 --> 00:06:42.440
One two three four five six seven eight nine remember it's integer division.

99
00:06:42.440 --> 00:06:45.470
So he gives us four instead of instead of four point five.

100
00:06:45.710 --> 00:06:48.440
And then two is half of four anyway.

101
00:06:48.650 --> 00:06:53.950
So we can kind of screw with things in this sense you probably wouldn't want a list or any sort of specialist

102
00:06:53.990 --> 00:06:56.510
that returns half the actual length.

103
00:06:56.780 --> 00:07:01.210
But I just want to show you behind the scenes the magic is here.

104
00:07:01.520 --> 00:07:06.180
This property this method is called by Lenn by default.

105
00:07:06.500 --> 00:07:11.390
OK hopefully getting confused too much but sometimes you know I think you could be more exciting to

106
00:07:11.390 --> 00:07:15.410
incorporate little previews of more advanced topics.

107
00:07:15.410 --> 00:07:18.290
So we've seen line are probably bored by it by now.

108
00:07:18.320 --> 00:07:20.480
I didn't want to spend the whole video just showing you.

109
00:07:20.480 --> 00:07:22.090
You can do it on a string you can do.

110
00:07:22.110 --> 00:07:22.790
I don't know.

111
00:07:22.890 --> 00:07:28.340
I want to show you we can do learn on some magical thing we invent and we can mess it up and have it

112
00:07:28.410 --> 00:07:29.780
returned to something crazy.

113
00:07:29.920 --> 00:07:30.450
OK.

114
00:07:30.680 --> 00:07:31.200
All done.
