1
00:00:00,240 --> 00:00:01,020
Welcome back.

2
00:00:01,050 --> 00:00:05,530
So the next big question is why aren't you programming and along with.

3
00:00:05,640 --> 00:00:11,880
This video shows some of the first code that has to do with O.P. and also introduced two topics.

4
00:00:11,880 --> 00:00:13,260
Two big ideas.

5
00:00:13,260 --> 00:00:16,130
Encapsulation and abstraction.

6
00:00:16,200 --> 00:00:19,690
But let's start by talking about why object oriented programming.

7
00:00:19,860 --> 00:00:26,580
It's important to mention that O.P. doesn't allow us to do anything we couldn't do without opii it doesn't

8
00:00:26,770 --> 00:00:30,870
unlike any doors or functionality that we didn't have before.

9
00:00:30,900 --> 00:00:37,560
Remember plenty of programming languages out there don't even support O.P. period so they're capable

10
00:00:37,560 --> 00:00:42,880
of doing the same thing at the end of the day can make a poker game and each language or each type o

11
00:00:42,930 --> 00:00:48,180
p is just about how we structure things and organize things and it's really a human way of thinking

12
00:00:48,390 --> 00:00:52,730
of creating these specifications and classifying things.

13
00:00:52,770 --> 00:00:56,460
For example you know we have animals in this world right.

14
00:00:56,470 --> 00:01:01,050
However many I don't know hundreds or thousands or millions probably millions of species but I don't

15
00:01:01,050 --> 00:01:01,870
actually know.

16
00:01:02,040 --> 00:01:06,630
We have all these species and they're all animals but we classify them into smaller groups.

17
00:01:06,660 --> 00:01:08,150
We organize them.

18
00:01:08,190 --> 00:01:10,070
That's a very human thing to do.

19
00:01:10,230 --> 00:01:12,870
Well with O.P. we can do the exact same thing.

20
00:01:13,110 --> 00:01:17,540
And this analogy isn't just limited to the idea of classifying things.

21
00:01:17,540 --> 00:01:24,020
Actually if we take an example like this Redfox species is Vulpes VOLP as well.

22
00:01:24,060 --> 00:01:30,600
Not only does it belong to species but it also at the same time is part of the full PPIs genus and the

23
00:01:30,840 --> 00:01:36,900
mammalia class which in itself it's called the classicists same idea classifying things and it's in

24
00:01:36,900 --> 00:01:38,660
the domain you Kerria.

25
00:01:38,910 --> 00:01:44,460
So what this shows us is a topic we'll learn later on called inheritance where we can actually have

26
00:01:44,670 --> 00:01:47,230
classes that are related to other classes.

27
00:01:47,250 --> 00:01:55,440
So this one fox at the same time is a species it's also a mammal and you carry out an anyways or leave

28
00:01:55,440 --> 00:01:56,160
it off there.

29
00:01:56,340 --> 00:02:00,600
But I just wanted to show this analogy doesn't just end the idea of organizing things.

30
00:02:00,660 --> 00:02:03,910
When we talk about inheritance this will actually show up again.

31
00:02:04,080 --> 00:02:07,980
So O.P. is really just a nice thing we can do in our code.

32
00:02:08,000 --> 00:02:09,440
That's what it comes down to.

33
00:02:09,660 --> 00:02:12,600
So why is that it's easier for humans.

34
00:02:12,600 --> 00:02:15,700
It's how we think it's easy to organize things.

35
00:02:15,780 --> 00:02:22,260
It's nice and pretty and we put bows on things but it is not a fundamental thing you have to do to make

36
00:02:22,260 --> 00:02:23,150
things work.

37
00:02:23,220 --> 00:02:28,890
It's just to prevent yourself from going crazy and getting headaches and creating really long files.

38
00:02:28,890 --> 00:02:33,470
It's just a way of breaking things up and or breaking them down and classifying them.

39
00:02:33,660 --> 00:02:36,840
Earlier I mentioned the term encapsulation.

40
00:02:36,940 --> 00:02:38,860
Here's for the first time it's going to show up.

41
00:02:38,910 --> 00:02:45,590
The goal with O.P. is to encapsulate our code into a logical hierarchical groupings using classes.

42
00:02:45,600 --> 00:02:51,510
So once we learn to define our own classes we'll be able to take giant application of that program whatever

43
00:02:51,510 --> 00:02:56,440
it is and break it down and encapsulated into these individual classes.

44
00:02:56,610 --> 00:02:58,850
Suppose we're making a poker game.

45
00:02:59,280 --> 00:03:02,240
So we want to model Poker using Python.

46
00:03:02,550 --> 00:03:05,600
We don't have to make any classes we don't have to do anything.

47
00:03:05,620 --> 00:03:09,180
We don't even have to make functions if we wanted to you could do everything.

48
00:03:09,210 --> 00:03:10,540
One line after another.

49
00:03:10,590 --> 00:03:12,270
It would be very repetitious.

50
00:03:12,270 --> 00:03:18,360
A lot of people would call it spaghetti code because the logic for poker is actually quite long to do

51
00:03:18,360 --> 00:03:21,350
some of the comparisons to figure out what hand beats what.

52
00:03:21,480 --> 00:03:26,850
But let's just not even get into that detail for now let's just say we are going the object oriented

53
00:03:26,850 --> 00:03:30,030
route and we want to organize things into classes.

54
00:03:30,030 --> 00:03:33,650
Here are some of the distinct entities we might come up with.

55
00:03:34,090 --> 00:03:38,810
Oh that's a picture so he can have a game class.

56
00:03:38,810 --> 00:03:45,950
So every time a new game started all the functionality and data superseded with a game is in a game

57
00:03:45,950 --> 00:03:49,070
class then a game can have multiple players.

58
00:03:49,220 --> 00:03:55,880
So each player has information like you know their name and their bank balance or their chips balance

59
00:03:56,210 --> 00:04:02,520
and then we have things like a deck and a deck would have you know information about the cards.

60
00:04:02,540 --> 00:04:07,040
So there would be a class for each card potentially a card would have a class.

61
00:04:07,040 --> 00:04:10,950
I mean it suits a color red or maybe just suit.

62
00:04:11,150 --> 00:04:17,750
And then a value is it a king or seven or an ace and then a deck would consist of or at one point would

63
00:04:17,750 --> 00:04:19,370
have 52 cards in it.

64
00:04:19,370 --> 00:04:22,740
Or more depending on how many decks were playing with.

65
00:04:22,850 --> 00:04:30,070
And then you know a poker hand would consist of multiple cards and chips potentially bets.

66
00:04:30,080 --> 00:04:31,700
There's so many things we could do.

67
00:04:31,730 --> 00:04:34,970
Maybe we're playing on teams so we could create a team class.

68
00:04:34,970 --> 00:04:37,090
It's really totally up to us.

69
00:04:37,280 --> 00:04:44,900
And that's where the bulk of the challenge with O.P. comes in is that it's about figuring out what needs

70
00:04:44,900 --> 00:04:46,310
to be its own class.

71
00:04:46,310 --> 00:04:51,260
So it's not always about making every single possible thing in class because if there's going to be

72
00:04:51,260 --> 00:04:57,200
just one property in there one attribute and no functions then maybe it doesn't need to be a class.

73
00:04:57,200 --> 00:05:00,820
So it's really that's kind of the skill of it and we'll talk a lot more about that.

74
00:05:01,070 --> 00:05:03,330
But I don't want to just show you a slide here.

75
00:05:03,350 --> 00:05:05,690
I want to actually show you a quick example.

76
00:05:05,730 --> 00:05:14,780
So here in this file called Poker duppy why I have a half baked representation not using O.P. just using

77
00:05:15,110 --> 00:05:22,260
functions and that's it to model decks of cards so we have cards and a deck of cards.

78
00:05:22,280 --> 00:05:28,520
So the first thing I'll show you there's a function called Reset deck and all it does is it returns

79
00:05:28,730 --> 00:05:30,950
a big list of cards.

80
00:05:30,950 --> 00:05:34,260
And I didn't even go with 52 I just did 24 cards.

81
00:05:34,310 --> 00:05:38,030
You can see each card has a value like Ace in a suit hearts.

82
00:05:38,120 --> 00:05:40,430
And then the ace of diamonds three of hearts.

83
00:05:40,430 --> 00:05:41,090
And so on.

84
00:05:41,360 --> 00:05:46,410
And then we're just putting them all together into a giant list and returning that at the end.

85
00:05:46,820 --> 00:05:53,360
So then to start a new game or to make a deck I would call poker deck equals reset deck.

86
00:05:53,360 --> 00:05:55,990
And that gives me this right here.

87
00:05:56,020 --> 00:05:59,610
OK then let's say I want to shuffle the deck.

88
00:05:59,840 --> 00:06:02,830
Well we have a shuffle method from random.

89
00:06:02,900 --> 00:06:08,530
So then I can just call random dot shuffle and I pass in the deck.

90
00:06:08,780 --> 00:06:15,800
So we're passing deck in poker deck itself is simply a list its class is a list.

91
00:06:15,980 --> 00:06:23,000
So no O.P. yet then I have a function called Deal hand and it's up here and what it does is it takes

92
00:06:23,000 --> 00:06:27,110
in a list of cards and then a number of cards to deal.

93
00:06:27,110 --> 00:06:32,650
And so it will take let's say I pass in my poker deck and then I tell it to five cards are playing to

94
00:06:32,750 --> 00:06:34,460
I don't know five card draws.

95
00:06:34,510 --> 00:06:35,280
It is called.

96
00:06:35,300 --> 00:06:37,710
I don't play that much poker anymore.

97
00:06:37,730 --> 00:06:42,010
So we want to deal five cards off the deck and it returns two things.

98
00:06:42,140 --> 00:06:46,090
The deck which has been altered it has five fewer cards.

99
00:06:46,280 --> 00:06:53,930
And then the hand the five cards that came off and we could return those as a tuple and then down here

100
00:06:54,200 --> 00:07:00,290
when I call deal hand I can assign poker deck to be the the actual deck that comes back and then hand

101
00:07:00,290 --> 00:07:02,500
one to me the hand that we get back.

102
00:07:02,510 --> 00:07:05,100
So this is kind of a lot of work.

103
00:07:05,150 --> 00:07:09,930
If we look at what's happening here we're basically passing poker deck into everything.

104
00:07:09,920 --> 00:07:15,050
Anytime we want to use the deck the associated functionality with the deck shuffling a deck creating

105
00:07:15,050 --> 00:07:24,910
a new deck dealing hands from a deck we pass a list all over the place and contrast that with the OTOP

106
00:07:24,950 --> 00:07:25,660
approach.

107
00:07:25,760 --> 00:07:26,210
OK.

108
00:07:26,270 --> 00:07:28,480
So here's an example using AOP.

109
00:07:28,490 --> 00:07:31,430
Now this is not all the code in this file.

110
00:07:31,430 --> 00:07:37,490
I've actually defined all the classes and this this one does more than the previous example but what

111
00:07:37,490 --> 00:07:42,060
I just want to show you is how your code is organized and what it looks like now.

112
00:07:42,410 --> 00:07:43,880
So I have a deck class.

113
00:07:43,940 --> 00:07:49,310
So to make a new deck I just call deck and we'll talk a lot more about I would create classes in the

114
00:07:49,310 --> 00:07:50,060
next video.

115
00:07:50,300 --> 00:07:53,370
But notice the functionality deck shuffle.

116
00:07:53,510 --> 00:07:56,930
So I don't pass in a list anywhere that represents the deck.

117
00:07:57,140 --> 00:08:00,410
All of the associated code is inside of this deck.

118
00:08:00,410 --> 00:08:02,000
It goes along with the deck.

119
00:08:02,000 --> 00:08:03,660
Same thing with doing a hand.

120
00:08:03,770 --> 00:08:04,840
All I have to tell.

121
00:08:04,850 --> 00:08:07,010
Deal hand is how many cards to deal.

122
00:08:07,400 --> 00:08:11,900
And then you know it automatically knows which deck we're talking about what the information is.

123
00:08:11,900 --> 00:08:15,720
It's all encapsulated inside of this deck.

124
00:08:15,770 --> 00:08:22,910
So if I actually really quickly showed you here here's a definition for the deck class and you can see

125
00:08:22,910 --> 00:08:29,740
there's methods like count or deal shuffle deal a single card deal an entire hand.

126
00:08:29,840 --> 00:08:36,130
All of this functionality is inside of deck so that the whole point of that was just to show two ways

127
00:08:36,130 --> 00:08:42,690
of accomplishing the same thing one the O P version actually involves more code at the end of the day.

128
00:08:42,790 --> 00:08:48,880
But it also results in it easier to understand and to think about organization for our program.

129
00:08:49,120 --> 00:08:49,880
All right.

130
00:08:49,930 --> 00:08:52,090
Next I want to talk about encapsulation.

131
00:08:52,330 --> 00:08:58,120
So when we talked about modeling a deck of cards let's just focus on deck leave all those other entities

132
00:08:58,120 --> 00:08:58,710
alone.

133
00:08:59,020 --> 00:09:03,030
What are the possible things a deck would need to have pieces of information.

134
00:09:03,220 --> 00:09:06,580
And what are the things that should be able to do the methods.

135
00:09:06,940 --> 00:09:09,020
Here are some examples or some ideas.

136
00:09:09,040 --> 00:09:14,460
We have a deck class and it would have a cards list.

137
00:09:14,500 --> 00:09:16,700
We'll talk about private in public in just a moment.

138
00:09:16,780 --> 00:09:21,270
A card list that would store you know the actual cards in that deck.

139
00:09:21,370 --> 00:09:25,060
Then we could have a max card's attribute potentially.

140
00:09:25,210 --> 00:09:30,040
So when you're playing with a single deck or if you go to a casino in Las Vegas a lot of times they

141
00:09:30,040 --> 00:09:31,830
play with two or four.

142
00:09:31,900 --> 00:09:34,600
I don't know if that's actually right but I know it's more than one deck.

143
00:09:34,600 --> 00:09:37,040
A lot of the times in a shoe of cards.

144
00:09:37,270 --> 00:09:39,060
So we can store that information.

145
00:09:39,340 --> 00:09:46,330
There might be a shuffle method to mix the cards up a deal card method that will just take one card

146
00:09:46,330 --> 00:09:54,250
off the top and then a deal and method that might call a deal card and deal hand will take two or three

147
00:09:54,250 --> 00:10:00,700
or five cards and return them and then count how many cards are left in that deck.

148
00:10:00,700 --> 00:10:06,350
So these are this is just some examples of the functionality and the attributes for one deck.

149
00:10:06,440 --> 00:10:11,200
But now I want to talk about this idea of private and public what these underscores mean.

150
00:10:11,230 --> 00:10:13,210
We'll talk a lot more about it as we progress.

151
00:10:13,360 --> 00:10:20,530
But the idea is that some things don't actually need to be exposed to the outside world or to the programming

152
00:10:20,530 --> 00:10:24,390
outside world where it can just stay inside of an individual deck.

153
00:10:24,520 --> 00:10:31,220
For example the list of cards the list of cards is not something that we need access to directly.

154
00:10:31,360 --> 00:10:35,090
We can access them through deal card or deal hand.

155
00:10:35,140 --> 00:10:42,470
Same thing with Max card that can stay inside the deck versus something like shuffle or count deal cards

156
00:10:42,480 --> 00:10:45,070
deal hand those need to be exposed.

157
00:10:45,070 --> 00:10:50,920
And before we go any further I should just be clear Python does not actually support true private or

158
00:10:50,920 --> 00:10:53,710
public variables or attributes or methods.

159
00:10:53,710 --> 00:10:55,400
There is no distinction.

160
00:10:55,420 --> 00:10:59,740
So the way that we make something private and I'm doing air quotes right now even though you can't see

161
00:10:59,740 --> 00:11:05,620
me putting an underscore in front of it then that's just a way of giving it a name that makes it clear

162
00:11:05,620 --> 00:11:07,060
to other developers.

163
00:11:07,060 --> 00:11:10,630
This is only to be used inside of a given class not outside.

164
00:11:10,690 --> 00:11:15,600
It's not supposed to be public even though there's nothing stopping from someone accessing it.

165
00:11:15,700 --> 00:11:18,880
It's just a convention and that's all that Python supports.

166
00:11:18,880 --> 00:11:25,420
So there's no way of actually preventing a piece of data or a method from only being available inside

167
00:11:25,420 --> 00:11:27,870
a class like you could in something like Java.

168
00:11:28,000 --> 00:11:33,670
So the entire point of this slide is to show you you can take an entity like a deck and break it down

169
00:11:33,670 --> 00:11:39,100
into the pieces of information attributes needs and methods and not all of them need to be available

170
00:11:39,160 --> 00:11:41,760
outside of that individual class.

171
00:11:42,010 --> 00:11:44,970
And this leads us to the term encapsulation.

172
00:11:45,070 --> 00:11:51,370
So encapsulation is really referring to the grouping of public and private attributes and methods into

173
00:11:51,370 --> 00:11:54,530
a class making abstraction possible.

174
00:11:54,640 --> 00:11:55,130
OK.

175
00:11:55,300 --> 00:11:57,340
So we haven't talked about abstraction yet.

176
00:11:57,340 --> 00:11:58,770
That's next slide.

177
00:11:58,790 --> 00:12:02,940
It really comes down to kind of what we already talked about when we make a class.

178
00:12:03,010 --> 00:12:09,580
We only want to expose the bare minimum the things that we might need to use from another class or outside

179
00:12:09,580 --> 00:12:11,880
of the class and everything else.

180
00:12:11,950 --> 00:12:14,250
We just keep it inside encapsulated.

181
00:12:14,260 --> 00:12:15,940
I like to think of it as a little bubble.

182
00:12:15,970 --> 00:12:20,100
We want the fewest entries and exits in and out of that bubble.

183
00:12:20,110 --> 00:12:25,570
So for example we we decided that the cards list instead of a deck is private.

184
00:12:25,600 --> 00:12:28,840
We're never going to direct the access cards.

185
00:12:28,890 --> 00:12:36,370
Instead we'll deal a hand or shuffle the deck which will in turn each of those methods internally will

186
00:12:36,370 --> 00:12:41,800
work with cards but we might want something like the length of the cards how many cards are left in

187
00:12:41,800 --> 00:12:43,730
the deck to be accessible.

188
00:12:43,930 --> 00:12:49,990
But if we're going to make cards private then instead we could make our own public method called Count

189
00:12:50,080 --> 00:12:54,640
or remaining cards and inside are for mating cards or count.

190
00:12:54,640 --> 00:13:00,000
It could run at length or line of cards and return that.

191
00:13:00,340 --> 00:13:06,660
So we'll spend a lot of time talking about you know how you decide what to expose to the outside world.

192
00:13:06,700 --> 00:13:09,300
And again there is no real distinction in Python.

193
00:13:09,310 --> 00:13:10,820
Everything is public.

194
00:13:10,930 --> 00:13:16,420
But if we are a good developer we follow conventions and we leave things alone that are designated private

195
00:13:16,510 --> 00:13:18,370
even if they're not officially private.

196
00:13:18,370 --> 00:13:20,940
So this leads us to abstraction.

197
00:13:20,950 --> 00:13:27,830
Abstraction is just the idea of exposing only the relevant data or the bare minimum of things.

198
00:13:27,860 --> 00:13:33,610
To create an interface to something more complex so we hide the inner workings away we abstract that

199
00:13:33,610 --> 00:13:36,980
away and we provide an face into that.

200
00:13:36,980 --> 00:13:44,810
So if the deck example we hide the cards all of the cards and we just create these interfaces in to

201
00:13:44,810 --> 00:13:51,290
shuffle them or to deal a hand or deal a card I think of a more real world example like if you're driving

202
00:13:51,290 --> 00:13:53,770
a school bus or any car would work.

203
00:13:53,990 --> 00:13:55,160
We have a steering wheel.

204
00:13:55,160 --> 00:13:59,900
We don't have to know about all the inner workings of you know how the steering wheel works and power

205
00:13:59,900 --> 00:14:02,240
steering and everything that's happening behind the scenes.

206
00:14:02,450 --> 00:14:03,560
We just turn the wheel.

207
00:14:03,580 --> 00:14:04,620
That's our interface.

208
00:14:04,760 --> 00:14:09,790
And it does everything else behind the dashboard or behind the scenes and underneath the car.

209
00:14:09,800 --> 00:14:11,870
It's kind of a dumb analogy but same idea here.

210
00:14:12,050 --> 00:14:14,940
We hide the inner workings and we just expose what's needed.
