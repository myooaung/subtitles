1
00:00:00,150 --> 00:00:05,940
Get now onto this thing that I've been hinting at and which is we don't actually have to use the re

2
00:00:05,940 --> 00:00:08,660
comprehend or the list comprehension brackets.

3
00:00:08,670 --> 00:00:11,420
Let me just prove that I'll do the same thing.

4
00:00:11,420 --> 00:00:18,030
Let's go back to my name's if I get rid of them.

5
00:00:18,930 --> 00:00:21,030
And I had better.

6
00:00:21,110 --> 00:00:21,770
It still works.

7
00:00:21,770 --> 00:00:28,710
It tells me false because not all names begin with C and people if I just tried to copy this on its

8
00:00:28,770 --> 00:00:31,080
own and run it.

9
00:00:31,080 --> 00:00:36,050
We haven't seen this yet but this is called a generator expression.

10
00:00:36,090 --> 00:00:39,620
We have a section on generators later so I'm not going to go into detail right now.

11
00:00:39,870 --> 00:00:43,150
So this is like a lighter weight version of a list.

12
00:00:43,350 --> 00:00:44,640
So it isn't a list.

13
00:00:44,640 --> 00:00:45,030
It doesn't.

14
00:00:45,030 --> 00:00:47,230
We can do things like dots.

15
00:00:47,340 --> 00:00:48,830
I don't know a pen or something.

16
00:00:48,930 --> 00:00:55,050
None of those lists methods exist but if we're using this as an intermediate we don't actually want

17
00:00:55,350 --> 00:00:57,150
a list at the end of what we're doing.

18
00:00:57,150 --> 00:01:03,750
For example right here with all or if we go back to this one I don't want a list back.

19
00:01:03,750 --> 00:01:05,300
I'm getting true or false.

20
00:01:05,310 --> 00:01:07,440
I'm never saving it to a variable.

21
00:01:07,440 --> 00:01:09,600
There's no reason to generate a list.

22
00:01:09,660 --> 00:01:13,650
And in fact these generator expressions are much lighter weight.

23
00:01:13,830 --> 00:01:16,590
So it's a lot of new concepts and weird stuff going on.

24
00:01:16,620 --> 00:01:21,240
You can read about it online but it boils down to this to save space.

25
00:01:21,240 --> 00:01:27,420
Space meaning memory and to make things less intensive you don't have to add those list comprehension

26
00:01:27,450 --> 00:01:32,410
brackets unless you want a list and you need a list at the end of it.

27
00:01:32,520 --> 00:01:37,440
But if you're just passing it in to something like any or all or some of the other things that we'll

28
00:01:37,440 --> 00:01:39,690
see you don't have to add those.

29
00:01:39,780 --> 00:01:44,730
There's a good stack overflow post on this generator expressions versus list comprehension all included

30
00:01:44,730 --> 00:01:46,130
as a resource.

31
00:01:46,160 --> 00:01:52,410
This person is asking you know why would you use this versus this same exact code except list brackets

32
00:01:52,410 --> 00:01:53,620
versus Prendes.

33
00:01:54,000 --> 00:01:55,900
And there's a lot of good answers.

34
00:01:55,980 --> 00:01:58,230
Some of it gets into very nitty gritty details.

35
00:01:58,350 --> 00:02:05,610
Some of it even goes into like particular parts of the Python specification things that you can read

36
00:02:05,940 --> 00:02:07,970
that explain exactly how it works.

37
00:02:08,010 --> 00:02:11,100
But I like this guy's response basically use a generator expression.

38
00:02:11,100 --> 00:02:16,230
If all you're doing is iterating once if you want to store and use the generated results you're probably

39
00:02:16,230 --> 00:02:17,830
better off with less comprehension.

40
00:02:18,060 --> 00:02:21,580
Well in our case we're just passing it into another function.

41
00:02:21,660 --> 00:02:24,140
We're not storing it we're never seeing it again.

42
00:02:24,330 --> 00:02:28,040
So there's no reason to add those to the list brackets even if we can.

43
00:02:28,320 --> 00:02:29,850
It just takes up more space.

44
00:02:29,960 --> 00:02:37,410
OK last thing I made a little demo here to illustrate and to prove that a list comprehension and a generator

45
00:02:37,410 --> 00:02:43,540
expression take up very different amounts of memory of bytes in system memory.

46
00:02:43,560 --> 00:02:49,430
So I have the same exact expression X times 10 for x in range 1000.

47
00:02:49,620 --> 00:02:54,420
So basically between 0 and 1000 we're going to multiply each number by 10 and stick it in a list.

48
00:02:54,420 --> 00:02:57,850
In this case and done here I'm using a generator expression.

49
00:02:58,020 --> 00:03:03,600
So in this example like we're not using either these ever again we're just passing them into cist don't

50
00:03:03,600 --> 00:03:10,290
get size of and this will just prove to you that using list comprehension takes up a lot more space

51
00:03:10,290 --> 00:03:13,890
to make that list compared to a generator expression.

52
00:03:13,890 --> 00:03:18,240
Remember if you want to save it to a variable or do something with it other than just passing along

53
00:03:18,240 --> 00:03:22,460
or iterate over it then you definitely want a list comprehension.

54
00:03:22,470 --> 00:03:27,210
But if you're passing into a function like all or any or you're just iterating over it you could use

55
00:03:27,210 --> 00:03:28,400
a generator expression.

56
00:03:28,560 --> 00:03:29,690
But honestly the end of the day.

57
00:03:29,710 --> 00:03:33,330
There's a reason very few people really talk about this.

58
00:03:33,420 --> 00:03:35,840
Most courses don't go into this at all.

59
00:03:35,830 --> 00:03:37,290
It's kind of a niche topic.

60
00:03:37,440 --> 00:03:44,300
So it's not a big deal because the memory difference even though it is an order of magnitude difference

61
00:03:44,310 --> 00:03:49,190
in this example it's still on any computer not going to make a difference at all.

62
00:03:49,260 --> 00:03:53,430
As far as what we can perceive but on with the main event here let's take a look.

63
00:03:53,610 --> 00:03:59,730
So I'm using something called since I'm importing it this module has a set size of method that will

64
00:03:59,730 --> 00:04:05,820
just take you know an argument and will actually tell me the size in bytes in memory that it takes up

65
00:04:05,880 --> 00:04:08,960
a number and then I'm just printing the two out.

66
00:04:08,970 --> 00:04:10,220
So let's see what happens.

67
00:04:11,780 --> 00:04:12,260
Here we go.

68
00:04:12,260 --> 00:04:14,440
Drum roll.

69
00:04:14,510 --> 00:04:20,420
And when you look at that list comprehension to do the same thing nine thousand twenty four bytes generator

70
00:04:20,420 --> 00:04:22,700
expression is only 88 bytes.

71
00:04:22,700 --> 00:04:24,170
Pretty incredible difference.

72
00:04:24,170 --> 00:04:26,890
So just kind of a fun little fact here.

73
00:04:26,930 --> 00:04:28,550
It's not a deal breaker.

74
00:04:28,550 --> 00:04:31,770
You can use a list comprehension with all or any.

75
00:04:31,880 --> 00:04:34,430
But if you're just passing it directly into any or all.

76
00:04:34,490 --> 00:04:35,540
I wouldn't bother.

77
00:04:35,570 --> 00:04:36,770
Don't add those brackets.

78
00:04:36,800 --> 00:04:38,400
Just use a generator expression.

79
00:04:38,510 --> 00:04:43,360
And if none of that makes sense and you're totally lost let's just ignore this video.

80
00:04:43,400 --> 00:04:49,730
Move on to the next one because in all likelihood you might not need to use any or all all that much.
