1
00:00:00,160 --> 00:00:00,620
OK.

2
00:00:00,720 --> 00:00:06,390
So we've learned a lot about parameters and arguments and some of the cool features that Python gives

3
00:00:06,390 --> 00:00:11,110
us but we have to be very careful about how we order them in a function.

4
00:00:11,460 --> 00:00:15,330
So there is an order we have to follow or else things could break.

5
00:00:15,330 --> 00:00:17,130
And more often than not they will break.

6
00:00:17,130 --> 00:00:19,920
So this is the order in our function declarations.

7
00:00:19,920 --> 00:00:21,590
We put parameters first.

8
00:00:21,600 --> 00:00:32,050
So specifically named parameters then start args then default parameters then start our keyword args.

9
00:00:32,220 --> 00:00:36,300
And this only applies if you need a function that has all four of these.

10
00:00:36,300 --> 00:00:39,690
You might just have parameters and start args.

11
00:00:39,750 --> 00:00:45,060
You might just have default parameters and keyword args but they have to be in this order so whatever

12
00:00:45,060 --> 00:00:48,130
subset of these they need to be in this order.

13
00:00:48,150 --> 00:00:52,190
So let me show you an example I think will make it clearer why you need an order.

14
00:00:52,320 --> 00:00:53,480
So surprise surprise.

15
00:00:53,520 --> 00:01:00,360
I have a file with a trivial example that is useless except to explain why the order matters.

16
00:01:00,360 --> 00:01:06,600
So it's a function called display info and it takes in a bunch of different parameters but they are

17
00:01:06,600 --> 00:01:11,350
all in the correct order so we have named parameters like a and b.

18
00:01:11,550 --> 00:01:16,380
Then we have Star args which will capture any additional arguments.

19
00:01:16,380 --> 00:01:21,030
Then we have a default parameter so instructor is equal to Colt.

20
00:01:21,540 --> 00:01:24,340
And then we have keyword args.

21
00:01:24,840 --> 00:01:30,540
OK so there's a lot going on here and all this function does is return a list that contains A and then

22
00:01:30,540 --> 00:01:34,370
B and then args and then instructor and then keyword args.

23
00:01:34,380 --> 00:01:40,440
So basically it just shows the value of everything that was passed in or in the case of a default value

24
00:01:40,560 --> 00:01:42,070
not passed it.

25
00:01:42,270 --> 00:01:48,960
So when we print display info and we pass in one to three last name Michael Steele job equals instructor.

26
00:01:49,290 --> 00:01:50,250
What do we expect.

27
00:01:50,370 --> 00:01:52,600
So let's just kind of type along here.

28
00:01:52,710 --> 00:01:54,590
So first things first.

29
00:01:54,670 --> 00:02:03,960
A is going to be one right so will have a is one then B is going to be too bright.

30
00:02:04,540 --> 00:02:08,730
And then we have arcs and ARGs will actually contain.

31
00:02:08,920 --> 00:02:12,620
It will be a tuple because remember it will collect anything here.

32
00:02:13,000 --> 00:02:19,010
That remaining and it will be only containing 3 because afterwards we have all these keyword args.

33
00:02:19,090 --> 00:02:22,630
But first we have instructor with a default value.

34
00:02:22,840 --> 00:02:30,520
So instructor is going to be set to colza because nothing was passed in and then we have our remaining

35
00:02:30,520 --> 00:02:32,840
star STARKIE w args key.

36
00:02:32,910 --> 00:02:39,910
I keep saying that KW args and that will be a dictionary right where we have last name is set to steal

37
00:02:40,690 --> 00:02:45,770
and we have job is set to instructor.

38
00:02:45,780 --> 00:02:51,690
Technically this is quote turned into this whole thing is key.

39
00:02:51,690 --> 00:02:52,430
W.

40
00:02:52,710 --> 00:02:53,720
Keep doing that.

41
00:02:53,760 --> 00:02:55,860
KW args.

42
00:02:55,860 --> 00:03:01,370
So hopefully you can see why this order is important for things like args and star star.

43
00:03:01,390 --> 00:03:05,740
KW args which are like the cleanup crews they grab everything else that's remaining.

44
00:03:05,880 --> 00:03:12,180
We have to have the named parameters first the specific parameters definitely and then keyword arguments

45
00:03:12,180 --> 00:03:13,920
always come afterwards.

46
00:03:13,920 --> 00:03:14,910
So let's verify.

47
00:03:14,940 --> 00:03:21,870
See if we're right and just print this out and this is what we get solidest copy this over so we can

48
00:03:21,870 --> 00:03:22,780
take a look.

49
00:03:24,610 --> 00:03:26,350
And we get what we expect.

50
00:03:26,350 --> 00:03:31,150
So we have a is 1 B is 2 args.

51
00:03:31,150 --> 00:03:32,690
Is this tuple 3.

52
00:03:32,890 --> 00:03:35,080
You might be wondering why there is a comma in there.

53
00:03:35,080 --> 00:03:40,560
If we actually just let's just do a print args so I'm not even going to return any more.

54
00:03:40,630 --> 00:03:43,220
Let's just print args.

55
00:03:43,390 --> 00:03:44,040
That's what we get.

56
00:03:44,050 --> 00:03:52,360
This three comma and then lets even go further and do print type of args and we can see if I can get

57
00:03:52,360 --> 00:03:52,870
this to work.

58
00:03:52,870 --> 00:03:53,460
There you go.

59
00:03:53,470 --> 00:03:55,300
It definitely is a tuple.

60
00:03:55,300 --> 00:04:01,750
It's just bizarre because it's a single item tuple and by default Python will add that comma in there

61
00:04:02,050 --> 00:04:08,530
to distinguish it from parentheses because we can put parentheses around any number or around a mathematical

62
00:04:08,530 --> 00:04:09,790
operation or something.

63
00:04:09,790 --> 00:04:11,990
This isn't a tuple.

64
00:04:12,040 --> 00:04:13,140
This isn't a tuple.

65
00:04:13,300 --> 00:04:18,080
But that is so it's just what Python does for single item tuples.

66
00:04:18,480 --> 00:04:18,980
OK.

67
00:04:19,330 --> 00:04:26,470
And then we have called which the value of instructor by default is set to code and then we have last

68
00:04:26,470 --> 00:04:29,050
name which is steel and job instructor.

69
00:04:29,050 --> 00:04:31,550
Both were picked up by star star.

70
00:04:31,600 --> 00:04:36,180
KW ARGs in the event that this video made absolutely no sense to you.

71
00:04:36,460 --> 00:04:41,380
All that you need to remember is that there is a specific order we want to follow when using parameters

72
00:04:41,380 --> 00:04:44,920
or when defining functions parameters first that have specific names.

73
00:04:44,920 --> 00:04:51,050
Then start args then default parameters and then start star KW args follow this order.
