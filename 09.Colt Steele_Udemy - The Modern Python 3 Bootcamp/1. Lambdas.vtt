WEBVTT
1
00:00:00.420 --> 00:00:01.160
Welcome back.

2
00:00:01.260 --> 00:00:04.380
So the bulk of this section is on built in functions.

3
00:00:04.500 --> 00:00:07.550
So there are a bunch of functions that Python gives us.

4
00:00:07.560 --> 00:00:08.990
We have yet to talk about.

5
00:00:09.210 --> 00:00:10.470
And they're pretty helpful.

6
00:00:10.470 --> 00:00:12.720
So we're going to kind of go through them one by one.

7
00:00:12.750 --> 00:00:17.220
Towards the end of the section but the first thing we're going to talk about is kind of a weird topic

8
00:00:17.340 --> 00:00:23.760
it's called lambdas and I'll just warn you upfront it might seem a little weird might be startling once

9
00:00:23.760 --> 00:00:28.920
we learn what it is and the syntax and it's kind of a special case of a function.

10
00:00:28.920 --> 00:00:31.040
So with that said let's just dive into it.

11
00:00:31.040 --> 00:00:31.890
In this video.

12
00:00:32.030 --> 00:00:32.350
OK.

13
00:00:32.390 --> 00:00:37.050
So I'm going to show you an example and you're going to think that it's bizarre but then I'm going to

14
00:00:37.050 --> 00:00:43.360
show you a potential use case and hopefully it will explain why why you would even want to use a lambda.

15
00:00:43.360 --> 00:00:48.900
Well let's start with the syntax and the first thing I'll do is just define a regular old plane function

16
00:00:49.290 --> 00:00:52.770
like this that we've seen before and it just returned.

17
00:00:52.830 --> 00:00:56.700
It's called Square takes a single parameter and returns times.

18
00:00:57.270 --> 00:00:57.630
Right.

19
00:00:57.630 --> 00:00:58.550
Very simple.

20
00:00:58.740 --> 00:01:05.460
And we could do something like print square of nine and if I execute it we get 81.

21
00:01:05.820 --> 00:01:07.360
OK that's totally review.

22
00:01:07.380 --> 00:01:11.390
This is a function called Square and it's pretty short.

23
00:01:11.430 --> 00:01:16.450
We could just put it on a single line like this and it should work exactly the same.

24
00:01:16.560 --> 00:01:17.530
And it does.

25
00:01:18.090 --> 00:01:22.730
But now I'm going to show you a lambda and I'm just going to write the syntax before I explain it.

26
00:01:23.680 --> 00:01:24.920
It looks like this.

27
00:01:24.930 --> 00:01:28.080
So this is the lambda that does the exact same thing.

28
00:01:28.350 --> 00:01:32.240
You can think of this as a function that has no name.

29
00:01:32.400 --> 00:01:34.560
It just exists right here.

30
00:01:34.560 --> 00:01:37.560
We could save it to a variable like this square.

31
00:01:38.100 --> 00:01:39.840
Let's do square 2.

32
00:01:39.840 --> 00:01:44.930
So square 2 is a variable that contains a lambda which is different.

33
00:01:44.940 --> 00:01:47.920
This is an actual function that has a name.

34
00:01:47.970 --> 00:01:51.570
This square to that function has no name.

35
00:01:51.570 --> 00:01:55.590
Some people call them anonymous functions in other languages like javascript.

36
00:01:55.590 --> 00:01:59.540
These are very similar to anonymous functions if you're familiar with them.

37
00:01:59.580 --> 00:02:06.150
The idea is that it's a procedure we can run and then a short one line only so lambda can only be one

38
00:02:06.150 --> 00:02:08.310
line and the syntax looks like this.

39
00:02:08.310 --> 00:02:14.430
Lambda always lambda and then our parameter and we can have multiple But if we're just copying what

40
00:02:14.430 --> 00:02:20.450
we have here just numb or X or whatever colon and then a single expression.

41
00:02:20.460 --> 00:02:22.140
So we're only allowed a single expression.

42
00:02:22.180 --> 00:02:23.950
You wouldn't have multiple lines.

43
00:02:24.210 --> 00:02:26.570
And this expression is automatically returned.

44
00:02:26.610 --> 00:02:30.160
So we don't use the return statement and we just do numb times.

45
00:02:30.160 --> 00:02:33.230
Now in this case and now will automatically be returned.

46
00:02:33.240 --> 00:02:37.600
The result of that and to call this it looks exactly the same.

47
00:02:37.700 --> 00:02:41.830
It just runs square 2 and then a past number let's do 7.

48
00:02:41.970 --> 00:02:45.070
I should say though this is not how you would typically use a lambda.

49
00:02:45.090 --> 00:02:46.730
You won't store it in a variable.

50
00:02:46.830 --> 00:02:49.510
I'm just doing this to show you how it works.

51
00:02:50.690 --> 00:02:53.360
So if we run this now we get 49.

52
00:02:54.120 --> 00:02:54.570
OK.

53
00:02:54.860 --> 00:02:57.670
So we have two functions that do the same thing.

54
00:02:57.680 --> 00:03:02.050
This is a named function and this is a lambda stored in a variable.

55
00:03:02.060 --> 00:03:07.640
We can also define another Lambda Lambda called ADD and do lambda.

56
00:03:07.700 --> 00:03:13.090
Let's do a comma B and then we just return a plus b.

57
00:03:13.100 --> 00:03:19.420
So this takes in two parameters A and B and then it returns a statement a plus b.

58
00:03:19.430 --> 00:03:25.840
So then we could print ad of 3 and 10.

59
00:03:26.270 --> 00:03:29.710
Just make sure that works and we get 13.

60
00:03:29.770 --> 00:03:37.250
And just to prove to you that our lambdas have no names if we do square dot remember this name property

61
00:03:37.730 --> 00:03:44.330
where if you haven't seen it before there's a name property and we can print it to underscores and either

62
00:03:44.390 --> 00:03:48.580
side of name if we print it for square we get square.

63
00:03:48.830 --> 00:03:49.390
OK.

64
00:03:49.760 --> 00:03:56.030
But now let's duplicate this two times in one time for our first Lamda square two and another time for

65
00:03:56.030 --> 00:03:57.910
AD.

66
00:03:58.150 --> 00:03:59.740
And what do we see.

67
00:03:59.740 --> 00:04:00.620
They don't have a name.

68
00:04:00.670 --> 00:04:04.800
They're just lambdas they're in a variable called Square 2 or.

69
00:04:04.960 --> 00:04:06.520
But that is very different.

70
00:04:06.700 --> 00:04:13.000
OK so now this all begs the question we've seen a lambda is like a function has no name on a single

71
00:04:13.000 --> 00:04:13.780
line.

72
00:04:13.780 --> 00:04:15.140
Why would you use this.

73
00:04:15.260 --> 00:04:20.200
And the most common use case is when you have some code that actually you need to pass the function

74
00:04:20.290 --> 00:04:25.770
into another function as a parameter and that function will never be used again.

75
00:04:25.780 --> 00:04:30.280
So just saying it out loud like that sounds kind of ludicrous to to imagine a scenario.

76
00:04:30.350 --> 00:04:34.450
But I'm going to do is put it in a little time machine and take you forward.

77
00:04:34.450 --> 00:04:37.940
Show you some code that we haven't seen yet and that we won't.

78
00:04:38.020 --> 00:04:41.990
Well we may understand it but you shouldn't understand it by default.

79
00:04:42.040 --> 00:04:47.370
So this uses a library called contar Centra Teekay interface.

80
00:04:47.400 --> 00:04:50.530
I think actually most people say Teekay enter.

81
00:04:50.650 --> 00:04:55.070
And it helps us make goolies graphical user interfaces using Python.

82
00:04:55.330 --> 00:04:59.010
So I have these comments that say don't worry about this don't worry about any of this code.

83
00:04:59.140 --> 00:05:04.990
So I don't want to focus on any of this but let me just fire this up first to show you what it does.

84
00:05:05.170 --> 00:05:08.530
It's kind of fun and it's called buttoned up.

85
00:05:08.530 --> 00:05:13.990
I said I'm going to run that and I get this little window over here it's kind of hard to see.

86
00:05:14.010 --> 00:05:16.490
I don't think I can make it bigger right now.

87
00:05:16.590 --> 00:05:21.220
There's a button that says Click me every time I click that button I get the text.

88
00:05:21.450 --> 00:05:22.210
Hello.

89
00:05:22.530 --> 00:05:23.100
OK.

90
00:05:23.370 --> 00:05:24.330
That's it.

91
00:05:24.330 --> 00:05:26.050
Click the X and it quits out.

92
00:05:26.610 --> 00:05:33.810
So all of this code is responsible for importing t concerti Kantar creating a frame creating a button

93
00:05:34.860 --> 00:05:40.460
giving the foreground color the text on the button and then starting the button up starting everything.

94
00:05:40.620 --> 00:05:42.830
But notice this code right here.

95
00:05:42.870 --> 00:05:44.320
So this is how we make a button.

96
00:05:44.370 --> 00:05:51.020
Again not the focus of this section so far but it's cool to see and we pass in a couple of arguments

97
00:05:51.030 --> 00:05:56.630
the first one is where we want the button to be the frame it's going to go on then the text of the button

98
00:05:56.640 --> 00:05:59.910
so we could change that the foreground color.

99
00:05:59.910 --> 00:06:05.070
And then this is the part I want to focus on a command and command is going to be a function that will

100
00:06:05.070 --> 00:06:07.570
be called whenever that button is clicked.

101
00:06:07.770 --> 00:06:13.070
So right now I have a say hi function over here and it's just a single line that print Hello.

102
00:06:13.140 --> 00:06:17.540
So still very simple but this function is not used anywhere else.

103
00:06:17.910 --> 00:06:20.600
It's only used in this one line of code.

104
00:06:20.630 --> 00:06:26.370
Imagine that if I had you know 20 buttons and rather than saying hi or printing something let's say

105
00:06:26.370 --> 00:06:31.650
that we're building a little calculator tool with 20 buttons for each number or to add things together

106
00:06:32.250 --> 00:06:32.940
whatever that is.

107
00:06:32.940 --> 00:06:34.180
We have 20 buttons.

108
00:06:34.260 --> 00:06:38.490
We don't want to define an individual one line function for each button.

109
00:06:38.490 --> 00:06:41.670
So what we can do instead is use a lambda.

110
00:06:42.180 --> 00:06:45.510
You might think could we just do this right here.

111
00:06:46.610 --> 00:06:48.320
Comments say hi out.

112
00:06:48.320 --> 00:06:54.040
This is what happens if we tried that hello is run immediately.

113
00:06:54.060 --> 00:06:55.250
I haven't even clicked yet.

114
00:06:55.290 --> 00:07:01.740
And now when I click and nothing happens remember when we have these parentheses like this we're executing

115
00:07:01.740 --> 00:07:02.500
a function.

116
00:07:02.550 --> 00:07:08.500
So when this code is read this print is run as if it was just down here.

117
00:07:08.520 --> 00:07:10.500
So that's also not what we want.

118
00:07:10.500 --> 00:07:17.580
So what we want is a one line short syntax to just tell it to print hello without actually executing

119
00:07:17.580 --> 00:07:18.040
it.

120
00:07:18.390 --> 00:07:23.330
And rather than defining an individual function like say hi we can use a lambda.

121
00:07:23.460 --> 00:07:28.130
So we just write lambda and we don't even need a parameter for this lambda.

122
00:07:28.170 --> 00:07:34.190
So we'll just do Colan print hello.

123
00:07:34.420 --> 00:07:37.880
You know we could put this in a separate variable but that defeats the purpose.

124
00:07:37.960 --> 00:07:42.850
The point of the lambda is that it's inline and we don't have to make another function or anything.

125
00:07:42.850 --> 00:07:47.830
This is a nameless function that just allows us to say OK when the button is clicked.

126
00:07:48.010 --> 00:07:49.210
Run print hello.

127
00:07:49.210 --> 00:07:54.910
Run this function or run this lambda and all that does is this single expression.

128
00:07:55.060 --> 00:07:56.980
So let's verify that it works.

129
00:07:56.980 --> 00:08:00.100
Now I click and I get hello I didn't capitalize it.

130
00:08:00.100 --> 00:08:02.950
Sorry about that but otherwise it's identical.

131
00:08:02.950 --> 00:08:10.310
So imagine again we have two buttons and this is button two and this one we can easily just print goodbye

132
00:08:10.960 --> 00:08:17.800
but if we had instead of using a lambda we had to do say by that means defining a whole other function

133
00:08:17.800 --> 00:08:22.230
appear just to use one time.

134
00:08:22.330 --> 00:08:26.200
So hopefully you can see you know a bit of the utility here.

135
00:08:26.200 --> 00:08:27.900
It's just a temporary thing.

136
00:08:27.940 --> 00:08:32.790
We pass in the lambda instead as an argument to this button.

137
00:08:33.000 --> 00:08:36.880
And don't worry about the button magic and Teekay and all that stuff.

138
00:08:37.000 --> 00:08:38.110
Just focus on this.

139
00:08:38.110 --> 00:08:42.640
We replaced a named function with this anonymous lambda.

140
00:08:42.700 --> 00:08:48.090
So it's hard for me to gauge how this went because I'm just sitting here alone recording this.

141
00:08:48.190 --> 00:08:54.400
I don't have student faces in front of me showing me looks of shock and confusion or vague understanding

142
00:08:54.400 --> 00:08:55.500
I can't gauge it.

143
00:08:55.630 --> 00:08:59.680
So if this just made zero sense and you're totally freaked out.

144
00:08:59.710 --> 00:09:03.240
The good news is that lambdas are not that commonly used.

145
00:09:03.250 --> 00:09:05.140
This is kind of a special situation.

146
00:09:05.160 --> 00:09:10.760
There is actually Vasa blog posts on line of people at one point arguing that they should be removed

147
00:09:10.760 --> 00:09:15.300
that they shouldn't be in Python 3 that there should be another solution.

148
00:09:15.310 --> 00:09:16.340
But they're still here.

149
00:09:16.480 --> 00:09:18.220
And so I just want you to see them.

150
00:09:18.220 --> 00:09:23.140
It's something that if I didn't include I knew I would get some comments about and somebody would would

151
00:09:23.140 --> 00:09:27.190
need one at some point and I would want to know what the heck they are because they are weird but just

152
00:09:27.190 --> 00:09:32.200
to reiterate it's just a single line function that has no name.

153
00:09:32.200 --> 00:09:35.970
You can store in a variable but that's not something you typically do.

154
00:09:36.040 --> 00:09:41.370
In my slides there's a couple of more examples we even add we've multiply if you want to take a look.

155
00:09:41.470 --> 00:09:46.750
And in the next video I'm actually going to show you another common use case for lambdas that's a little

156
00:09:46.750 --> 00:09:52.690
less exciting than creating buttons and a graphical interface but it's also a common use case for them

157
00:09:52.830 --> 00:09:55.110
where we pass them in to another function.
