1
00:00:00,240 --> 00:00:00,960
Welcome back.

2
00:00:00,960 --> 00:00:06,870
In this video I just want to address something that I think is a common question which is what do underscores

3
00:00:06,900 --> 00:00:07,660
actually do.

4
00:00:07,670 --> 00:00:10,860
What's the significance of underscores in names.

5
00:00:10,890 --> 00:00:14,110
So there's a couple of options we have something like this.

6
00:00:14,250 --> 00:00:18,810
We have another thing we have to underscore is in front of something and then finally we have these

7
00:00:18,810 --> 00:00:23,940
Dunder method names that have 200 scores on either side of a name.

8
00:00:24,000 --> 00:00:27,630
So what's the difference between any of these What's the significance.

9
00:00:27,630 --> 00:00:30,380
So really quickly let's start with this first one.

10
00:00:30,420 --> 00:00:34,530
Let's say we have a class I'm going to define a class for all of these that we use just called person

11
00:00:35,040 --> 00:00:39,930
and instead of person we have our net which is one of those donder methods.

12
00:00:39,930 --> 00:00:44,810
So maybe that's a good place to start these Dundrum methods we could define our own.

13
00:00:45,060 --> 00:00:47,550
I could define a method called Hello.

14
00:00:47,850 --> 00:00:53,130
There's nothing wrong with that technically and Python but conventionally this is a bad idea.

15
00:00:53,130 --> 00:00:58,980
The whole goal is that we only define these when we're actually referencing or overwriting something

16
00:00:58,980 --> 00:01:02,060
that exists in Python a special Dondre method like init.

17
00:01:02,100 --> 00:01:06,520
So you don't go around to defining your own method willy nilly that are done for methods.

18
00:01:06,630 --> 00:01:09,770
These are special things that Python looks for for example.

19
00:01:09,840 --> 00:01:15,300
It always looks for the Dunder init method in a class when it tries to instantiate a new instance of

20
00:01:15,300 --> 00:01:16,120
that class.

21
00:01:16,530 --> 00:01:18,430
So you don't want to go defining those.

22
00:01:18,450 --> 00:01:19,380
That's the simplest one.

23
00:01:19,380 --> 00:01:21,150
Those are just magic methods.

24
00:01:21,150 --> 00:01:25,260
We talk a lot more about them later in the course but just don't venture out and make your own Dunder

25
00:01:25,310 --> 00:01:26,290
methods.

26
00:01:26,760 --> 00:01:27,150
All right.

27
00:01:27,180 --> 00:01:28,140
So we have this.

28
00:01:28,380 --> 00:01:32,470
And let's say just set a property called a single underscore.

29
00:01:32,730 --> 00:01:33,780
I don't know.

30
00:01:34,020 --> 00:01:37,740
Secret equals high.

31
00:01:38,090 --> 00:01:40,140
Self-taught underscore secret equals high.

32
00:01:40,170 --> 00:01:46,460
And then another property that doesn't have that underscore self-taught name equals Tony.

33
00:01:46,650 --> 00:01:57,210
And then I initialized a person P equals a person like this and then I just print P dot name print P

34
00:01:57,300 --> 00:01:59,160
dot underscore.

35
00:01:59,190 --> 00:02:05,050
Secrets do we expect anything different to happen based off of what we've talked about so far.

36
00:02:05,100 --> 00:02:08,620
If we run this you can see both of them are printed out just fine.

37
00:02:09,090 --> 00:02:12,130
This single underscore is simply a convention.

38
00:02:12,180 --> 00:02:14,620
It's a way of telling developers please.

39
00:02:14,700 --> 00:02:18,590
This is supposed to be a private variable or private property or method.

40
00:02:18,600 --> 00:02:22,590
There's no such thing as a private attribute or a private method in Python.

41
00:02:22,620 --> 00:02:24,570
That's just how python is.

42
00:02:24,570 --> 00:02:26,210
It's how it's how it was created.

43
00:02:26,280 --> 00:02:31,650
Other languages support private methods private properties or attributes where you could not access

44
00:02:31,650 --> 00:02:34,070
them from outside of the class.

45
00:02:34,080 --> 00:02:36,380
Usually though it's not based off of the name.

46
00:02:36,390 --> 00:02:41,560
Usually you would define something like private self-doubt secret equals high.

47
00:02:41,670 --> 00:02:46,470
And then if I tried to access this from outside I would not be able to.

48
00:02:46,830 --> 00:02:48,500
And then this would be public by default.

49
00:02:48,570 --> 00:02:49,990
Python does not have it.

50
00:02:50,130 --> 00:02:55,720
So this is the way that we specify something is not intended to be used outside of the class.

51
00:02:55,860 --> 00:02:58,070
The secret is only supposed to be used.

52
00:02:58,080 --> 00:03:01,950
Maybe we have a method here called doorman and Dohrmann asked the secret.

53
00:03:01,980 --> 00:03:05,890
Let's say like a speakeasy where you have to have you have to know the secret.

54
00:03:06,030 --> 00:03:14,930
So we could just say if gas equals that underscore secret then let them in.

55
00:03:15,060 --> 00:03:20,190
Or something like that where we're using underscores secret internally but it's not intended to be used

56
00:03:20,370 --> 00:03:22,000
outside like it is here.

57
00:03:22,020 --> 00:03:24,510
But again there's nothing preventing someone from doing that.

58
00:03:24,630 --> 00:03:27,140
It's just about respecting conventions.

59
00:03:27,210 --> 00:03:30,800
You don't get in trouble if you access something that starts with an underscore.

60
00:03:30,930 --> 00:03:37,860
It's just a way of developers saying this is intended for internal use vs no name you can access freely

61
00:03:37,920 --> 00:03:38,850
or change at will.

62
00:03:39,000 --> 00:03:45,390
And the final example where we have two underscores before the name of an attribute or method and nothing

63
00:03:45,390 --> 00:03:45,890
afterward.

64
00:03:45,910 --> 00:03:50,130
Just to before this is actually not purely conventional.

65
00:03:50,130 --> 00:03:55,350
This actually does something behind the scenes and to illustrate that let's get the comments out this

66
00:03:55,350 --> 00:03:57,130
code that won't work.

67
00:03:57,330 --> 00:03:59,120
Let's make something in here called self-doubt.

68
00:03:59,340 --> 00:04:00,970
Two underscores.

69
00:04:01,320 --> 00:04:06,080
I don't know message because I like turtles like this.

70
00:04:06,220 --> 00:04:16,130
OK and if I try and print that double underscore message we actually won't be able to let's try it.

71
00:04:16,320 --> 00:04:17,500
I mean get attribute error.

72
00:04:17,560 --> 00:04:20,200
Person has no object or person object has no attribute.

73
00:04:20,200 --> 00:04:22,260
Double underscore message.

74
00:04:22,330 --> 00:04:26,160
What's happening here is something known as name mangling.

75
00:04:26,260 --> 00:04:32,050
So when you put two underscores before the name of a method or an attribute Python will behind the scenes

76
00:04:32,500 --> 00:04:37,060
mangle the name change the name of that attribute and to see what it actually looks like.

77
00:04:37,060 --> 00:04:45,180
Let's just do d r of P and we'll print that and run it.

78
00:04:45,690 --> 00:04:46,220
OK.

79
00:04:46,590 --> 00:04:48,440
So you can see what we have going on here.

80
00:04:48,600 --> 00:04:54,840
We have name we have underscore secret but there's no double underscore message all the way up here

81
00:04:54,840 --> 00:04:59,740
though we have underscore person double underscore message.

82
00:04:59,760 --> 00:05:05,160
It's always in this pattern where it's single underscore the class name and then the double underscore

83
00:05:05,250 --> 00:05:10,680
whatever we call it message or get name or whatever the attribute or method was called.

84
00:05:10,680 --> 00:05:12,140
So if we did one more here.

85
00:05:12,320 --> 00:05:16,370
Self-taught Hellawell equals ha ha ha ha ha.

86
00:05:16,680 --> 00:05:23,190
And I rerun the code you'll see we now have to underscore person double underscore ELO well underscore

87
00:05:23,190 --> 00:05:31,050
person double underscore MSDE so we can access them if we wanted to we could just do print peacoat underscore

88
00:05:31,470 --> 00:05:35,480
person double underscore and S-G or the same thing.

89
00:05:35,490 --> 00:05:39,240
But for EHLO well and if I do those we get.

90
00:05:39,240 --> 00:05:39,810
I like turtles.

91
00:05:39,810 --> 00:05:40,670
Ha ha ha.

92
00:05:40,860 --> 00:05:42,440
Along with those first two examples.

93
00:05:42,450 --> 00:05:48,090
So when we say name mangling you might think that that means like totally changing and obfuscating the

94
00:05:48,090 --> 00:05:53,470
name making it impossible to know the kind of you know making it secure or something.

95
00:05:53,550 --> 00:05:54,970
But that's not at all what it does.

96
00:05:54,990 --> 00:06:01,770
Its sole purpose is to make this method or this attribute particular to this person class so that once

97
00:06:01,770 --> 00:06:09,150
we talk about inheritance we might have another class called sales person or teacher that inherits from

98
00:06:09,150 --> 00:06:15,310
person and they have their own double underscore message and we don't want them to conflict.

99
00:06:15,480 --> 00:06:16,920
We want them to be unique.

100
00:06:17,130 --> 00:06:22,560
Well if we use double underscore message then Python mangles the name and basically put the class name

101
00:06:22,590 --> 00:06:28,580
in there so that you know self-direct person message is different than self-taught teacher.

102
00:06:28,740 --> 00:06:30,280
Double underscore message.

103
00:06:30,280 --> 00:06:33,130
Anyway that's not really for this video.

104
00:06:33,130 --> 00:06:37,790
It will make more sense when we talk about inheritance and overwriting and name conflicts and all that.

105
00:06:37,800 --> 00:06:40,290
I just wanted to run through all three examples.

106
00:06:40,290 --> 00:06:45,570
This first example single underscore is to signify that something is supposed to be for internal use

107
00:06:45,570 --> 00:06:46,410
in a class.

108
00:06:46,410 --> 00:06:47,450
Pure convention.

109
00:06:47,670 --> 00:06:51,490
This second example what we just saw two underscores at the beginning.

110
00:06:51,690 --> 00:06:56,340
Python will actually do something and see only one where Python does something based off of the name

111
00:06:56,340 --> 00:06:57,960
and it's not a convention thing.

112
00:06:58,160 --> 00:07:02,340
What it actually does is that it changes the name it's called name mangling and it puts the class name

113
00:07:02,340 --> 00:07:06,060
first but it's not hiding it or anything it's predictable and how it behaves.

114
00:07:06,090 --> 00:07:09,630
And then finally Dondre methods to underscores on either side.

115
00:07:09,690 --> 00:07:12,170
It's a convention that you should respect.

116
00:07:12,180 --> 00:07:14,020
You can define your own but you shouldn't.

117
00:07:14,040 --> 00:07:19,500
They're used for Python specific methods like init that we will then define on our own and we'll see

118
00:07:19,500 --> 00:07:22,670
a bunch more things like Len.

119
00:07:22,740 --> 00:07:25,190
What else are DPR there.

120
00:07:25,210 --> 00:07:28,140
They're all over the place and will define our own.

121
00:07:28,170 --> 00:07:30,710
Spend a lot of time later in the course talking about them.

122
00:07:30,810 --> 00:07:34,340
So don't go to finding your own methods with two underscores before and after.

123
00:07:34,340 --> 00:07:39,290
In most you know what you're doing and it's a particular thing in Python that you're trying to override.

124
00:07:39,480 --> 00:07:41,400
I'll get done with underscores.
