1
00:00:00,210 --> 00:00:02,460
All right you've seen the basics of inheritance.

2
00:00:02,580 --> 00:00:04,170
Now let's dive a bit deeper.

3
00:00:04,380 --> 00:00:08,220
So we have our Animal class in our cat class that inherits from animal.

4
00:00:08,250 --> 00:00:10,630
But right now they don't really do anything.

5
00:00:10,770 --> 00:00:15,780
Well cat has zero functionality has nothing different than animal.

6
00:00:15,780 --> 00:00:18,560
So let's let's make things let's switch it up a bit.

7
00:00:18,600 --> 00:00:19,900
Here's what I'd like to do.

8
00:00:19,920 --> 00:00:23,010
So we have animal and we have a cat.

9
00:00:23,010 --> 00:00:24,610
Each animal has.

10
00:00:24,690 --> 00:00:27,360
I don't know a species and a name.

11
00:00:27,570 --> 00:00:36,640
So Tony the Tiger or Jim the Sloth a cat also has a species which is cat.

12
00:00:36,750 --> 00:00:41,580
It has a name like blue and maybe it has a breed as well.

13
00:00:41,970 --> 00:00:46,030
And a favorite toy or something like that.

14
00:00:46,080 --> 00:00:49,500
So let's start by setting up animal correctly.

15
00:00:49,920 --> 00:00:57,630
So I'm going to get rid of this class variable or class attribute for now and let's just do a it self

16
00:00:58,140 --> 00:00:59,960
and every animal has a species.

17
00:01:00,060 --> 00:01:07,310
Let's go with name first and then species and then we'll just set self-taught name equals name self

18
00:01:07,320 --> 00:01:09,840
that species equals species.

19
00:01:10,210 --> 00:01:11,130
OK.

20
00:01:12,210 --> 00:01:14,550
And otherwise we'll leave animal alone.

21
00:01:14,910 --> 00:01:22,530
Now when we define cat we need to add our net of course and it needs to start with self and every cat

22
00:01:22,550 --> 00:01:27,270
is going to have a name and a species of breed.

23
00:01:27,300 --> 00:01:28,940
And let's just call it toy.

24
00:01:29,400 --> 00:01:36,640
And I could just manually define them self-taught name equals name self but species equals species.

25
00:01:36,810 --> 00:01:42,040
Self-taught breed equals breed self-taught toy equals toy.

26
00:01:42,080 --> 00:01:42,890
I could do that.

27
00:01:42,930 --> 00:01:44,410
And that works just fine.

28
00:01:44,460 --> 00:01:52,490
When I make a new cat I just need to specify this is blue the cat and she is a cat.

29
00:01:53,200 --> 00:02:00,390
She's a she Scottish Fold and a favorite toy is string OK.

30
00:02:00,820 --> 00:02:09,340
And I need to comment this invalid code out and why don't we just define a nice def art EPR represent

31
00:02:09,490 --> 00:02:10,510
method.

32
00:02:10,600 --> 00:02:13,650
I honestly don't know how people pronounce that.

33
00:02:13,930 --> 00:02:19,240
And let's just return a simple string that just has the name.

34
00:02:19,360 --> 00:02:26,610
So this self-taught name is a self-taught species.

35
00:02:27,400 --> 00:02:30,670
And actually we could just put this up in animal

36
00:02:33,460 --> 00:02:37,040
here because every animal has a name and a species.

37
00:02:37,110 --> 00:02:45,920
OK so if we do this right now and I just print blue get blue is it cat blue.

38
00:02:45,960 --> 00:02:51,000
The cat is inheriting this method from animal and it's able to call it what print is calling it we're

39
00:02:51,000 --> 00:02:52,340
not explicitly calling it.

40
00:02:52,390 --> 00:02:55,250
But anyway let's now focus on this here.

41
00:02:55,290 --> 00:03:00,930
This is duplication and this is kind of the whole point of inheritance is to avoid this sort of scenario

42
00:03:01,290 --> 00:03:06,750
where you know the idea is that an animal contains all the base functionality that every animal has

43
00:03:07,050 --> 00:03:11,140
and a cat will only have the additional things like breed and toy.

44
00:03:11,340 --> 00:03:18,480
So what we can do is say when a new cat is created we're actually going to use the niche in animal first

45
00:03:19,230 --> 00:03:25,380
and set up a name and a species and then afterwards we'll set up breed and toy in the first way we can

46
00:03:25,380 --> 00:03:31,620
do that then the uncommon way you probably won't see is to manually call animal dot underscore in it

47
00:03:32,490 --> 00:03:33,450
like this.

48
00:03:34,050 --> 00:03:38,390
And then we actually have to pass in self referring to the cat instance.

49
00:03:38,670 --> 00:03:46,450
And then after that we'll do name and species which is this name and this species so we can do this.

50
00:03:46,590 --> 00:03:50,020
And if we actually test this out it should work just fine.

51
00:03:50,040 --> 00:03:52,530
Hopefully there we go.

52
00:03:52,530 --> 00:03:56,450
We still get blue is a cat and we can still print.

53
00:03:56,640 --> 00:04:07,320
Let's do Plude that species and then let's also do blue dot breed and toy so you can see some attributes

54
00:04:07,320 --> 00:04:14,370
are being defined appear in animal and some are defined down here in cat and all of them print out correctly.

55
00:04:14,370 --> 00:04:21,580
So this works totally fine to do class name dot net and then pass in self as the first argument.

56
00:04:21,750 --> 00:04:26,970
But Python has a little bit of a shorter way of doing it using something called super.

57
00:04:27,000 --> 00:04:33,780
So if you type superbe with parentheses it's going to refer to the base class or the parent class of

58
00:04:33,900 --> 00:04:36,190
whatever the current class is.

59
00:04:36,210 --> 00:04:39,310
So it changes given or just depending on context.

60
00:04:39,330 --> 00:04:48,030
So super instead of the class cat refers to animal and then I can call DOT net.

61
00:04:48,240 --> 00:04:53,250
And the nice thing about super is I actually don't have to specify self anymore.

62
00:04:53,460 --> 00:05:01,940
It will automatically be passed in so I can change this to just be name Comus species like this.

63
00:05:02,190 --> 00:05:05,220
And let's verify that it works.

64
00:05:05,220 --> 00:05:06,090
There we go.

65
00:05:06,090 --> 00:05:13,980
So I can replace animal that init self with super which will return animal and run animal data in it

66
00:05:14,100 --> 00:05:16,980
and pass in self as the first argument.

67
00:05:16,980 --> 00:05:23,170
The other small change you could make here is species for a cat is always going to be a cat.

68
00:05:23,280 --> 00:05:25,060
So I might just do this.

69
00:05:25,200 --> 00:05:26,840
Species equals cat.

70
00:05:26,850 --> 00:05:31,100
Remove that from the net and a cat.

71
00:05:31,110 --> 00:05:36,150
We don't have to specify when we're making a new cat that it is a cat and now we'll just have breed

72
00:05:36,180 --> 00:05:38,560
and toy just like that.

73
00:05:38,670 --> 00:05:47,040
And just to show you let's define a method on here called play and it should just let's have it print

74
00:05:47,050 --> 00:05:51,350
instead of turn which is kind of uncommon but it makes it easier to demo.

75
00:05:51,540 --> 00:05:58,910
Let's just have a print self-taught name plays with self-taught toy.

76
00:05:59,980 --> 00:06:00,880
OK.

77
00:06:00,880 --> 00:06:09,480
And then I should be able to call blue dot play which is an instance method on cat and we get blue place

78
00:06:09,480 --> 00:06:10,540
with string.

79
00:06:10,980 --> 00:06:13,700
And that pretty much wraps up this simple example.

80
00:06:13,980 --> 00:06:17,650
So just to recap we have two classes animal and Cat.

81
00:06:17,820 --> 00:06:21,420
Cat inherits from animal because of this little line here.

82
00:06:21,690 --> 00:06:24,690
And we don't have to involve super.

83
00:06:24,720 --> 00:06:28,280
We don't have to involve the init method from the parent class.

84
00:06:28,290 --> 00:06:34,920
We don't want to we still would have access to things like make sound or any other instance methods

85
00:06:35,130 --> 00:06:41,100
or class variables across attributes class methods defined on animal but to reduce duplication we didn't

86
00:06:41,100 --> 00:06:45,830
want to redefine self-taught name itself that species down here in the cat in it.

87
00:06:45,840 --> 00:06:53,270
So instead we can just call Animal Planet and the shortcut is super and super refers to animal and it

88
00:06:53,280 --> 00:06:55,300
looks for the init method an animal.

89
00:06:55,470 --> 00:06:56,880
And that's pretty much it.

90
00:06:56,880 --> 00:07:01,180
So that's the basics of inheritance at least the simplest form of inheritance.

91
00:07:01,290 --> 00:07:05,970
I'm going to show one more example in the next video with users and moderators and we'll see how it

92
00:07:05,970 --> 00:07:07,730
works with class attributes.

93
00:07:07,770 --> 00:07:12,810
You can watch that if you want another example or move on and learn about multiple inheritance which

94
00:07:12,810 --> 00:07:16,260
is where Super really becomes super useful.

95
00:07:16,290 --> 00:07:18,050
It really does become more useful though.

96
00:07:18,210 --> 00:07:19,410
So see you in a bit.
