1
00:00:00,240 --> 00:00:06,360
Hello welcome back in this video will dive into the details of why testing matters why you should test

2
00:00:06,720 --> 00:00:09,380
or why you should at least consider testing.

3
00:00:09,420 --> 00:00:11,800
It's not necessarily something you need to do all the time.

4
00:00:11,820 --> 00:00:13,820
But we'll talk about when and why you should do it.

5
00:00:13,860 --> 00:00:19,750
And we'll also go into one philosophy around testing called TDD test driven development.

6
00:00:19,770 --> 00:00:24,750
OK first off why test my wife with this in the slide to be honest.

7
00:00:24,960 --> 00:00:25,720
Thank you.

8
00:00:25,750 --> 00:00:27,560
I think I thought it was funny at the time.

9
00:00:27,840 --> 00:00:30,940
I make almost like that ahead of time and then I come back and record.

10
00:00:31,050 --> 00:00:33,350
I regret that I apologize.

11
00:00:33,630 --> 00:00:33,870
OK.

12
00:00:33,870 --> 00:00:35,520
So really why test.

13
00:00:35,520 --> 00:00:41,160
So the whole idea of tests is that we're going to write code to monitor our own code to test our code

14
00:00:41,730 --> 00:00:47,040
so we write these tests to ensure that you know there aren't bugs or at least to reduce the bugs and

15
00:00:47,040 --> 00:00:48,530
errors in our existing code.

16
00:00:48,720 --> 00:00:54,390
We write these tests that basically say OK this class should behave this way when I call this function

17
00:00:54,780 --> 00:01:00,380
Let's say I add a called the add function with one and three I should get four back.

18
00:01:00,390 --> 00:01:01,520
Very simple test.

19
00:01:01,620 --> 00:01:07,710
But now imagine that you're testing a huge production application that has I don't know what 100 files

20
00:01:07,710 --> 00:01:11,280
of code maybe ten thousand plus lines of Python code.

21
00:01:11,280 --> 00:01:13,490
There's a lot of places where things could go wrong.

22
00:01:13,490 --> 00:01:15,020
A lot of bugs that pop up.

23
00:01:15,060 --> 00:01:19,560
So what you do is you write these tests and depending on what you're working on you could have a ton

24
00:01:19,560 --> 00:01:25,160
of tests and you could have 10000 lines of tests or more just for 10000 lines of code.

25
00:01:25,230 --> 00:01:31,230
So you run these tests on your own code and they'll tell you everything past or everything passed except

26
00:01:31,230 --> 00:01:35,020
this one thing failed and then you hone in on OK what failed.

27
00:01:35,040 --> 00:01:36,080
Why did it fail.

28
00:01:36,220 --> 00:01:40,920
And it highlights problems in your code but it's not just existing bugs or problems.

29
00:01:40,920 --> 00:01:44,030
Testing can also ensure that your bugs stay fixed.

30
00:01:44,040 --> 00:01:50,370
Imagine a scenario where you're a developer at a company a big production app and we have I don't know

31
00:01:50,670 --> 00:01:57,500
50 developers and everybody's working on their own features kind of on their own little pockets of code.

32
00:01:57,840 --> 00:02:02,970
And what you do is you push your code up when you think that it's done and someone reviews it typically

33
00:02:03,040 --> 00:02:06,400
or maybe two people review it and then it's merged into the codebase.

34
00:02:06,750 --> 00:02:10,650
But maybe you change a line here or there that you don't think it's important to anyone else and it's

35
00:02:10,650 --> 00:02:16,110
just a change that you need to make for your code or you're adding in you could inadvertently introduce

36
00:02:16,110 --> 00:02:20,740
a new bug and you wouldn't be able to catch that or you might catch it later.

37
00:02:20,850 --> 00:02:25,980
But having tests in there would help you catch that that bug earlier when you have a lot of people writing

38
00:02:25,980 --> 00:02:26,640
code.

39
00:02:26,650 --> 00:02:30,750
Anytime you're ready to deploy changes to your site or your app or whatever.

40
00:02:30,750 --> 00:02:35,340
You run your tests and you'll see a bunch of green things or you'll see some red errors that tell you

41
00:02:35,580 --> 00:02:39,810
hey this used to work doesn't work anymore and then that allows you to hone in on the problems.

42
00:02:39,840 --> 00:02:44,100
So that ties into ensuring that new features don't break old ones.

43
00:02:44,100 --> 00:02:49,050
For me that's one of the most important parts of testing especially in a big complicated app things

44
00:02:49,050 --> 00:02:54,030
that you know you make something work once and then you forget about it six months later you're adding

45
00:02:54,030 --> 00:02:57,290
to the code base and you inadvertently change something.

46
00:02:57,630 --> 00:03:01,400
You change the data structure that you didn't think there was something else depended on.

47
00:03:01,410 --> 00:03:06,570
You have a variable naming issue or whatever it is you overwrite a function accidentally tests.

48
00:03:06,690 --> 00:03:11,450
Well Lerche you to that definitely faster than you as a human just finding them.

49
00:03:11,550 --> 00:03:16,950
It also ensures that refactoring and cleaning things up doesn't introduce new bugs or break existing

50
00:03:17,070 --> 00:03:18,120
functionality.

51
00:03:18,120 --> 00:03:21,150
And some people think it makes development more fun.

52
00:03:21,480 --> 00:03:25,550
I believe it makes it more satisfying especially when your tests do pass.

53
00:03:25,770 --> 00:03:26,250
But we can.

54
00:03:26,250 --> 00:03:30,990
This is as good a time as any to talk about why some people don't like it and it just comes down to

55
00:03:30,990 --> 00:03:34,160
speed writing tests can slow you down a lot.

56
00:03:34,200 --> 00:03:36,160
Sometimes your test files can be massive.

57
00:03:36,210 --> 00:03:39,350
It's a lot of code to write and it really depends on the project.

58
00:03:39,440 --> 00:03:41,310
The end product that you're working on.

59
00:03:41,430 --> 00:03:44,940
If this is something for your own personal use it to one person dev team.

60
00:03:45,120 --> 00:03:49,650
Yeah maybe you don't need a ton of tests but if this is on a large scale you have multiple developers.

61
00:03:49,660 --> 00:03:52,000
Or this is something that people depend on.

62
00:03:52,020 --> 00:03:58,110
It's not a hobby project but you have clients or customers or whatever shareholders you do not want

63
00:03:58,110 --> 00:03:59,670
your code to break in.

64
00:03:59,690 --> 00:04:00,980
You know what you never want your code to break.

65
00:04:00,990 --> 00:04:04,740
But in those situations especially tests are absolutely worth it.

66
00:04:04,740 --> 00:04:10,260
In my opinion so I'm not trying to proselytize and say that you need to write tests for every line of

67
00:04:10,260 --> 00:04:13,750
code you ever write but at the same time it's never a bad idea if.

68
00:04:13,800 --> 00:04:14,830
If you want to do it.

69
00:04:14,940 --> 00:04:16,440
Some people think it's fun.

70
00:04:16,830 --> 00:04:17,700
Crazy's.

71
00:04:18,130 --> 00:04:20,730
OK so now that brings us to test driven development.

72
00:04:20,730 --> 00:04:22,470
So testing is a separate idea.

73
00:04:22,470 --> 00:04:28,350
Testing is the idea of writing tests writing code that tests your other code and you can write those

74
00:04:28,350 --> 00:04:32,750
tests at any point you can write them after you introduce a new function.

75
00:04:32,760 --> 00:04:35,670
You can write a test and guarantee that that function works.

76
00:04:35,670 --> 00:04:39,990
You could write your entire application and then afterwards write a bunch of tests and see if those

77
00:04:39,990 --> 00:04:40,590
work.

78
00:04:40,950 --> 00:04:43,300
Or you could go with test driven development.

79
00:04:43,370 --> 00:04:47,280
The idea behind TDD again is that you write your test first.

80
00:04:47,280 --> 00:04:53,460
Once your tests are written you write the code to make them pass and then once those tests pass your

81
00:04:53,460 --> 00:04:57,070
feature the thing that you're working on is considered complete.

82
00:04:57,120 --> 00:05:04,200
So this is a philosophy that not developer shop not every company abides by the ones that I have experience

83
00:05:04,200 --> 00:05:11,020
with or that I've had my students go on to I'd say that the minority but it's still very popular ideology

84
00:05:11,250 --> 00:05:12,960
that might be too strong for word.

85
00:05:13,140 --> 00:05:14,720
It is sort of like a cult.

86
00:05:14,730 --> 00:05:19,730
Some of these people who get really into it because they feel that people feel very strongly about it.

87
00:05:19,790 --> 00:05:25,860
Put it that way people who diligently follow TDD tend to be very devoted because it is kind of a radical

88
00:05:25,860 --> 00:05:28,830
way of changing your development process.

89
00:05:28,830 --> 00:05:33,330
Most people's approach is just to start writing code that don't want to step away from their code and

90
00:05:33,330 --> 00:05:34,880
then maybe write some tests at the end.

91
00:05:34,950 --> 00:05:36,690
But I've had some very good experiences with it.

92
00:05:36,720 --> 00:05:38,870
So I'm not trying to say it's a bad idea.

93
00:05:39,000 --> 00:05:42,150
I just want to throw it out there it's not something you have to do by any means.

94
00:05:42,150 --> 00:05:45,720
I don't want to be seen as somebody who is trying to push it on all my students.

95
00:05:45,720 --> 00:05:47,010
It's sort of like religion.

96
00:05:47,190 --> 00:05:49,440
I'm not going to tell you to think one thing or another.

97
00:05:49,530 --> 00:05:51,610
You get to make your own decision.

98
00:05:51,660 --> 00:05:52,690
You're all adults.

99
00:05:52,920 --> 00:05:53,200
OK.

100
00:05:53,250 --> 00:05:56,790
The last thing I'll talk about is something called red green refactor.

101
00:05:56,790 --> 00:05:59,870
This is like the mantra of test driven development.

102
00:06:00,060 --> 00:06:05,280
It refers to you know the colors of your test passing and failing and it's sort of a workflow that you

103
00:06:05,280 --> 00:06:07,220
practice with TDD.

104
00:06:07,610 --> 00:06:08,520
So you start with the read.

105
00:06:08,640 --> 00:06:09,900
You write a test that fails.

106
00:06:09,930 --> 00:06:15,870
I make a brand new application the very first thing I would do if I was following TDD is write tests

107
00:06:15,960 --> 00:06:18,100
that fail I know they're are going to fail.

108
00:06:18,360 --> 00:06:24,690
So I say you know the log in function when somebody tries to log in with the incorrect username and

109
00:06:24,690 --> 00:06:29,940
password they should see this message when somebody tries to log in with the correct password and email.

110
00:06:30,060 --> 00:06:32,410
They should be redirected to this page.

111
00:06:32,460 --> 00:06:33,410
Nothing is going to work.

112
00:06:33,420 --> 00:06:39,780
So I get to fails then I write the minimal amount of code necessary to make the test pass.

113
00:06:39,780 --> 00:06:40,490
So that's important.

114
00:06:40,500 --> 00:06:42,660
It's not just about making the tests pass.

115
00:06:42,720 --> 00:06:44,760
You don't just keep writing and writing and writing.

116
00:06:44,910 --> 00:06:45,650
You write.

117
00:06:45,750 --> 00:06:49,910
The very least amount of code possible so that your tests are covering.

118
00:06:50,070 --> 00:06:55,650
So you have as much parity between the tests and the code and then as soon as they start passing you

119
00:06:55,650 --> 00:06:57,330
can also focus on refactoring.

120
00:06:57,510 --> 00:07:02,850
A lot of times what happens with TDD is that you write tests and they all fail and then you do bare

121
00:07:02,850 --> 00:07:04,300
minimum to make them pass.

122
00:07:04,320 --> 00:07:08,870
Then you write some more tests and they fail and then you update your functions in your application

123
00:07:08,870 --> 00:07:10,620
to that those new tests pass.

124
00:07:10,890 --> 00:07:18,210
But then by writing the bare minimum to make those tests pass you may have foregone some nicer cleaner

125
00:07:18,210 --> 00:07:19,170
ways of writing things.

126
00:07:19,200 --> 00:07:20,940
So you then you go back and clean up your code.

127
00:07:20,940 --> 00:07:26,220
You refactor things if you have duplication if you can move things into one function or extract things

128
00:07:26,220 --> 00:07:27,560
out into another function.

129
00:07:27,750 --> 00:07:29,120
Then you've refactor.

130
00:07:29,130 --> 00:07:33,900
So I actually show an example later in the section of the TDD process of red green.

131
00:07:33,900 --> 00:07:34,800
Refactor.

132
00:07:34,800 --> 00:07:40,000
So it's just a little mantra like I said that that people follow when they are doing test driven development.

133
00:07:40,020 --> 00:07:46,470
Anyway I feel like shit like this it's like the birds and bees conversation it's uncomfortable no matter

134
00:07:46,470 --> 00:07:47,600
how you feel about TDD.

135
00:07:47,610 --> 00:07:49,510
Testing is a good idea.

136
00:07:49,530 --> 00:07:53,120
It can really really save you a lot of time in the end.

137
00:07:53,120 --> 00:07:58,200
You know to catch even just one bug if you write 100 Tests and they all pass and you never have to worry

138
00:07:58,200 --> 00:07:59,010
about them again.

139
00:07:59,020 --> 00:08:03,090
But one of them catches a bug that you wouldn't have known about otherwise or that you would have found

140
00:08:03,090 --> 00:08:06,960
out about a month later when a user reported it it's worth it.

141
00:08:07,070 --> 00:08:11,970
TDD on the other hand is totally up to you if you want to write your test first and then write your

142
00:08:11,970 --> 00:08:14,190
code and then keep that cycle going.

143
00:08:14,190 --> 00:08:18,690
Fine by me I like I said I think that it's a good idea but I also don't think that it's the right tool

144
00:08:18,690 --> 00:08:19,960
for every situation.

145
00:08:20,130 --> 00:08:24,420
OK so that's a high level overview of testing and TDD and all that fun stuff.

146
00:08:24,420 --> 00:08:28,730
Now after this video at least we're going to dive into writing some code see how we can write tests.
