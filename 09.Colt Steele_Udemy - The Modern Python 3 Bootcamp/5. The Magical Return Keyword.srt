1
00:00:00,300 --> 00:00:01,030
Welcome back.

2
00:00:01,080 --> 00:00:06,150
So the next thing we have to discuss around functions now that we've seen the basic syntax to define

3
00:00:06,150 --> 00:00:09,720
one is how do we return values from functions.

4
00:00:09,840 --> 00:00:12,760
And before we actually see how we do that to see the syntax.

5
00:00:12,900 --> 00:00:15,340
Let's just talk about what it means to return a value.

6
00:00:15,510 --> 00:00:18,480
So here I have a simple while simple.

7
00:00:18,630 --> 00:00:19,680
It's an empty file.

8
00:00:19,680 --> 00:00:20,470
Very simple.

9
00:00:20,730 --> 00:00:24,230
And I'm calling it returned IPY can call it whatever you want.

10
00:00:24,510 --> 00:00:27,990
Let's define a simple function called print.

11
00:00:28,500 --> 00:00:33,040
Square of 2 the square of 7.

12
00:00:33,060 --> 00:00:33,540
Never again.

13
00:00:33,780 --> 00:00:41,400
So very trivial and silly but if we wanted to do this we could just print seven times seven or we could

14
00:00:41,400 --> 00:00:43,390
do seven squared.

15
00:00:43,440 --> 00:00:47,130
Either way let's do it like this just because it's a bit different.

16
00:00:47,190 --> 00:00:48,930
And then of course I could execute.

17
00:00:48,930 --> 00:00:51,250
Print square of 7 with parentheses.

18
00:00:51,390 --> 00:00:53,080
And what do we expect to see.

19
00:00:53,610 --> 00:00:54,420
Let's run it.

20
00:00:54,540 --> 00:00:58,860
So that's Python 3 or turned up y and it prints 49.

21
00:00:59,080 --> 00:00:59,330
OK.

22
00:00:59,340 --> 00:01:00,260
So that's all great.

23
00:01:00,260 --> 00:01:01,740
That should be review.

24
00:01:01,870 --> 00:01:03,390
But what if we have something like this.

25
00:01:03,390 --> 00:01:04,700
We've seen this all the time.

26
00:01:04,830 --> 00:01:08,830
So we have a list of numbers and we do something like this.

27
00:01:08,940 --> 00:01:17,430
Lanc equals Lenn of names like that where we're actually setting a variable equal to the result of running

28
00:01:17,430 --> 00:01:18,700
a function Letten.

29
00:01:18,900 --> 00:01:20,490
And if we look at link.

30
00:01:21,450 --> 00:01:23,620
It's storing the number four.

31
00:01:23,640 --> 00:01:25,910
So what's happening here is that this function runs.

32
00:01:25,920 --> 00:01:31,360
It doesn't print anything but it's actually returning a value that we're capturing in this variable.

33
00:01:31,380 --> 00:01:36,900
So we see this all the time or you know we do something like pop something off of here so we could do.

34
00:01:37,050 --> 00:01:43,260
Last item equals number pop.

35
00:01:43,320 --> 00:01:44,990
Once again we don't see anything.

36
00:01:45,180 --> 00:01:46,840
And Gnome's is shorter now.

37
00:01:47,010 --> 00:01:51,450
But last item stores the value of four which is what we popped off.

38
00:01:51,480 --> 00:01:53,800
So how do we achieve this with our code.

39
00:01:53,850 --> 00:02:03,760
Let's define another function and we'll just call this one square of seven and you might think oh we

40
00:02:03,760 --> 00:02:11,650
have to do this instead of printing something we're just going to run 7 squared Let's try it and we'll

41
00:02:11,650 --> 00:02:20,440
do a variable called results equals square of seven Whatever comes back when we executed.

42
00:02:20,440 --> 00:02:25,420
And then let's do a print result and all comments out or other print come.

43
00:02:25,420 --> 00:02:26,600
Both of these out.

44
00:02:26,830 --> 00:02:32,700
What happens now if I execute it or I get none.

45
00:02:32,710 --> 00:02:33,870
So what's happening here.

46
00:02:34,150 --> 00:02:38,300
Well the answer is Nothing is being returned still by default.

47
00:02:38,300 --> 00:02:43,570
Just you know running some code doing math whatever we do to finding a string in here that doesn't return

48
00:02:43,600 --> 00:02:45,010
any value out.

49
00:02:45,250 --> 00:02:49,470
And we have to be very explicit when we want them to be returned.

50
00:02:49,480 --> 00:02:54,340
There's a magic keyword which surprise surprise is just return.

51
00:02:54,460 --> 00:02:59,510
So we write a return and then whatever we want to send out of this function.

52
00:02:59,620 --> 00:03:01,100
So we haven't talked about inputs yet.

53
00:03:01,120 --> 00:03:02,120
That's coming up next.

54
00:03:02,200 --> 00:03:04,480
But this is the output side of things.

55
00:03:04,480 --> 00:03:07,120
So this function always returns a square of 7.

56
00:03:07,120 --> 00:03:08,420
Every single time.

57
00:03:08,860 --> 00:03:11,580
And if we wanted to capture it now it should work.

58
00:03:11,590 --> 00:03:14,610
Our result variable will capture whatever has been returned.

59
00:03:14,890 --> 00:03:16,160
Let's see.

60
00:03:16,180 --> 00:03:17,380
Run it again.

61
00:03:17,380 --> 00:03:18,360
There we go.

62
00:03:18,370 --> 00:03:23,680
We've now returned seven times seven and captured in the result variable.

63
00:03:23,800 --> 00:03:30,070
So here's a slide that demonstrates that by returning high string high if we save the result of say

64
00:03:30,070 --> 00:03:36,520
hi the function name the result of executing it in a variable greeting greeting is equal to high.

65
00:03:36,550 --> 00:03:39,800
So a couple of things to know about the keyword return.

66
00:03:39,910 --> 00:03:42,040
It exits the function.

67
00:03:42,040 --> 00:03:48,880
So let me demonstrate that now if I go back here and I do some I'll do a print afterwards that just

68
00:03:48,880 --> 00:03:54,370
says I am after the return just like this.

69
00:03:54,520 --> 00:04:01,700
And we run it you'll see we don't get that print statement even though it's part of the function.

70
00:04:01,750 --> 00:04:03,230
As soon as our code runs.

71
00:04:03,280 --> 00:04:09,520
So the first thing that happens is square of 7 is executed and the first line is returned forty nine.

72
00:04:09,760 --> 00:04:11,830
And that end that ends the entire function.

73
00:04:11,830 --> 00:04:15,170
It's done at short circuits that we never move on to here.

74
00:04:15,640 --> 00:04:24,310
But if we swap them or instead we do another one up here that just says I am before like this and I

75
00:04:24,310 --> 00:04:29,470
run it now we get in before the return then the return call.

76
00:04:29,560 --> 00:04:36,970
Next is the fact that whatever we we place after the return key word is what is returned and we're not

77
00:04:36,970 --> 00:04:38,820
limited to returning a single item.

78
00:04:38,830 --> 00:04:40,090
That's all we'll do for now.

79
00:04:40,180 --> 00:04:45,730
But you can use a tuple to return more than one piece of information from a function.

80
00:04:45,790 --> 00:04:49,350
And finally it pops the function off the calls to cost.

81
00:04:49,360 --> 00:04:51,010
So we haven't talked about the call stack.

82
00:04:51,010 --> 00:04:56,470
We're not going to really in much detail right now but the main idea is that the call stack is sort

83
00:04:56,470 --> 00:05:03,260
of like a To Do list for all the things all the tasks that Python has to do in executing your code.

84
00:05:03,460 --> 00:05:07,660
And every time there's a new function call it gets added to this stack.

85
00:05:07,720 --> 00:05:10,230
It's you know do this and this and this and this.

86
00:05:10,390 --> 00:05:13,310
And by popping it off it moves onto the next thing.

87
00:05:13,510 --> 00:05:16,330
So that's a very very simplistic explanation.

88
00:05:16,330 --> 00:05:20,560
I don't want to get too bogged down in it but you can learn a lot more better at this you Arel or by

89
00:05:20,560 --> 00:05:21,290
Googling it.

90
00:05:21,370 --> 00:05:24,540
But I also recommend that you don't panic about it yet or ever.

91
00:05:24,550 --> 00:05:26,200
It's not really something you need to know.

92
00:05:26,200 --> 00:05:28,780
It's just a good thing to know that happens behind the scenes.

93
00:05:28,780 --> 00:05:30,470
But it's all hidden from view.

94
00:05:30,700 --> 00:05:31,340
OK.

95
00:05:31,360 --> 00:05:32,660
So just to wrap that up.

96
00:05:32,800 --> 00:05:38,620
The return key word is how we actually export or get a value out of a function so we can capture it

97
00:05:38,650 --> 00:05:42,670
in a variable later or we could pass it into another function.

98
00:05:42,670 --> 00:05:47,290
We could do something like print which is itself an other function.

99
00:05:47,290 --> 00:05:48,940
So this runs first.

100
00:05:48,940 --> 00:05:54,880
It returns a value 49 and it's basically the same thing it's just printing 49 which is itself a function

101
00:05:55,280 --> 00:05:55,750
call.

102
00:05:55,750 --> 00:05:57,840
So we'll leave it off here in the next video.

103
00:05:57,910 --> 00:06:02,350
We're going to define a very short function that will help us with coin tosses.

104
00:06:02,410 --> 00:06:04,160
I know not the sexiest thing ever.
