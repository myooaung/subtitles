1
00:00:00,270 --> 00:00:00,990
All right.

2
00:00:00,990 --> 00:00:02,730
So we've been working with numbers.

3
00:00:02,760 --> 00:00:03,590
It's kind of boring.

4
00:00:03,590 --> 00:00:06,990
I know we've been working with one in 99 and 73.

5
00:00:06,990 --> 00:00:12,200
All very great numbers especially 73 that's a great number but very limited.

6
00:00:12,390 --> 00:00:18,360
So we might use numbers to do things like I don't know store the price of something that's a really

7
00:00:18,360 --> 00:00:24,300
common use case or the quantity we have in stock like we or Amazon we're selling peanut butter.

8
00:00:24,300 --> 00:00:27,400
We want to say this peanut butter is three dollars forty nine cents.

9
00:00:27,660 --> 00:00:32,260
So price is 349 and quantity is 900.

10
00:00:32,370 --> 00:00:33,120
That's great.

11
00:00:33,120 --> 00:00:33,960
That's useful.

12
00:00:33,960 --> 00:00:38,040
But of course there's a lot of other things that we care about that aren't numbers.

13
00:00:38,040 --> 00:00:40,200
What about the name of the peanut butter.

14
00:00:40,230 --> 00:00:42,810
What about the date it was made.

15
00:00:42,810 --> 00:00:44,220
We could use a number for a date.

16
00:00:44,340 --> 00:00:45,790
But is there a better way.

17
00:00:45,900 --> 00:00:47,360
What about a description.

18
00:00:47,460 --> 00:00:48,850
What about images.

19
00:00:49,050 --> 00:00:50,970
There's all these other things that we need to care about.

20
00:00:51,090 --> 00:00:56,570
But at the end of the day everything we do in a variable it has to be a valid data type in Python.

21
00:00:56,700 --> 00:00:58,470
So we can't just make something up.

22
00:00:58,530 --> 00:00:59,800
We have to follow the rules.

23
00:00:59,910 --> 00:01:02,080
It's kind of a thing in programming.

24
00:01:02,280 --> 00:01:09,710
So with python there are a bunch of data types that we get out of the box things that Python says OK

25
00:01:09,720 --> 00:01:11,280
here what you know you have integers.

26
00:01:11,280 --> 00:01:12,200
We've already seen those.

27
00:01:12,360 --> 00:01:17,710
You have floats which are like numbers or integers but there's a decimal point but there are other things

28
00:01:17,820 --> 00:01:20,630
and so some of them are here on this table.

29
00:01:20,820 --> 00:01:23,500
But I want to be clear this is not comprehensive.

30
00:01:23,520 --> 00:01:24,400
These are probably.

31
00:01:24,510 --> 00:01:26,560
Well definitely the most commonly used ones.

32
00:01:26,580 --> 00:01:28,130
But we'll learn more as we go.

33
00:01:28,170 --> 00:01:32,080
So I just wanna make sure you don't walk away thinking there are only five types.

34
00:01:32,310 --> 00:01:38,980
For example floats which we've been working with are not listed here but that's a data type.

35
00:01:39,000 --> 00:01:42,420
So in this video I'm going to just walk through some of these very quickly.

36
00:01:42,420 --> 00:01:48,420
So I don't feel like you have to hang on to every word because things like lists and dicts dictionaries

37
00:01:48,840 --> 00:01:52,250
are going to have their entire their own sections devoted to them.

38
00:01:52,260 --> 00:01:52,560
All right.

39
00:01:52,560 --> 00:01:55,170
So let's kick things off by talking about booleans.

40
00:01:55,380 --> 00:01:59,760
It's kind of a weird word weird sounding thing if you haven't heard of them before but they are just

41
00:01:59,790 --> 00:02:00,790
yes or no.

42
00:02:00,810 --> 00:02:03,800
True or false values on or off.

43
00:02:04,080 --> 00:02:06,900
So think of binary 0 and 1.

44
00:02:07,080 --> 00:02:10,110
That's what our computers are built on top of this little circuits.

45
00:02:10,110 --> 00:02:13,060
Bits of light that are flashing on or are not flashing.

46
00:02:13,140 --> 00:02:14,180
Yes or no.

47
00:02:14,190 --> 00:02:17,830
So you could use a number to store a yes or no value.

48
00:02:17,970 --> 00:02:20,970
We could say OK if it's number one it means it's on.

49
00:02:20,970 --> 00:02:23,350
And if it's number two it means it's off for that.

50
00:02:23,370 --> 00:02:24,360
True or false.

51
00:02:24,390 --> 00:02:30,240
But if all we want is true or false there's no reason to allocate the entire space for an integer because

52
00:02:30,240 --> 00:02:36,020
remember integers could be really really long and that an amount of space has to be allocated in memory.

53
00:02:36,030 --> 00:02:40,560
But if we're saying this is a yes or no value that it's only going to make a little bit of space to

54
00:02:40,560 --> 00:02:41,970
store true or false.

55
00:02:42,090 --> 00:02:43,980
That's not the only reason that it's useful.

56
00:02:43,980 --> 00:02:47,380
We're going to have a whole section on Boolean logic later on.

57
00:02:47,550 --> 00:02:49,270
But let me just show you an example.

58
00:02:49,320 --> 00:02:56,370
So here I am in my terminal in Python 3 so I can just type the word true like this has to have a capital

59
00:02:56,370 --> 00:02:59,490
T by the way or a capital F for false.

60
00:02:59,490 --> 00:03:01,980
That's how Python knows it's a boolean.

61
00:03:01,980 --> 00:03:08,340
I could just type it like I could type 981 and get the return value back but I could save it to a variable

62
00:03:08,340 --> 00:03:08,920
as well.

63
00:03:08,970 --> 00:03:11,700
So I could do something like is active

64
00:03:14,370 --> 00:03:23,280
and set it equal to true and I look at is active and I get true or I could have a variable called Game

65
00:03:23,310 --> 00:03:27,630
Over and I could have game over start out as false.

66
00:03:27,630 --> 00:03:34,050
So this is actually a really standard way of writing games like tic tac toe or any game where the game

67
00:03:34,050 --> 00:03:37,980
keeps going until you lose or until you die or until someone wins.

68
00:03:37,980 --> 00:03:39,970
We could have game over set to be false.

69
00:03:40,290 --> 00:03:44,630
And then at the end of the game we said it to be true and the game is over.

70
00:03:44,640 --> 00:03:49,340
Now obviously there's a lot of logic that goes in between those two things.

71
00:03:49,350 --> 00:03:57,160
The thing I need to point out though is that we can't do this lower case t because it's no longer boolean.

72
00:03:57,270 --> 00:04:00,540
So Python recognizes it based off of that capital.

73
00:04:00,570 --> 00:04:05,250
It's a special thing a special idea reserved for false and for true.

74
00:04:05,360 --> 00:04:08,210
So if I do this it tells me Hey true is not defined.

75
00:04:08,220 --> 00:04:09,790
I don't know what you're talking about.

76
00:04:10,140 --> 00:04:11,610
So uppercase really important.

77
00:04:11,670 --> 00:04:13,620
So I know it seems silly at this point.

78
00:04:13,620 --> 00:04:20,610
Boolean values but they are very useful and it's not just a shorter way or a more compact way in memory

79
00:04:20,700 --> 00:04:22,550
to store yes or no values.

80
00:04:22,680 --> 00:04:27,180
There's actually a lot of operations that we get that work with booleans that we'll see later on.

81
00:04:27,330 --> 00:04:31,480
OK so next up we're going to talk about strings strings.

82
00:04:31,500 --> 00:04:33,510
We're going to devote the rest of this section too.

83
00:04:33,570 --> 00:04:39,300
But the idea is that they're just characters could be numbers but a lot of times it's words and letters

84
00:04:39,300 --> 00:04:40,190
and symbols.

85
00:04:40,260 --> 00:04:42,310
Basically any Unicode character.

86
00:04:42,630 --> 00:04:48,440
So they're in-between quotes single or double which we'll talk about later but they're inside of quotes

87
00:04:48,450 --> 00:04:55,230
so could be my name colt or some Chinese characters or it could be just the number two inside of quotes

88
00:04:55,650 --> 00:04:58,590
that makes it a string not a number.

89
00:04:58,590 --> 00:05:01,880
So here's an example let's just call it some string.

90
00:05:02,130 --> 00:05:05,900
I could set it be set it equal to the number 8.

91
00:05:06,180 --> 00:05:12,900
And if I look at some string remember that we have this thing type let's do type of some string and

92
00:05:12,900 --> 00:05:20,860
it tells me hey a string as TR versus doing type of eight itself isn't it.

93
00:05:20,910 --> 00:05:26,120
So I can also do some string equals and instead of quotes I'll do hello.

94
00:05:26,730 --> 00:05:33,870
I am a string and I'll put an exclamation point just to show you it's not just numbers and letters it's

95
00:05:33,870 --> 00:05:35,960
any valid Unicode character.

96
00:05:36,060 --> 00:05:39,110
And now I look at some string and we get that back.

97
00:05:39,510 --> 00:05:43,740
OK so string's not going to waste too much time in this video on because we will spend a lot of time

98
00:05:43,740 --> 00:05:45,010
with them in this section.

99
00:05:45,030 --> 00:05:46,160
They're very very useful.

100
00:05:46,170 --> 00:05:51,570
So this is how you would probably store things like the name of an item on your store something like

101
00:05:51,600 --> 00:05:53,340
jar of crunchy peanut butter.

102
00:05:53,550 --> 00:05:56,310
Even those smooth creamy is inarguably better.

103
00:05:56,370 --> 00:05:58,950
We could store that with a string.

104
00:05:58,950 --> 00:05:59,530
All right.

105
00:05:59,670 --> 00:06:00,920
So then the last tube.

106
00:06:01,110 --> 00:06:05,620
I'm going to go through at lightning speed because like I said they each get their own section.

107
00:06:05,700 --> 00:06:12,000
But these are more advanced data types sort of like they evolved through a level up in that they actually

108
00:06:12,090 --> 00:06:14,540
store other types of data inside of them.

109
00:06:14,550 --> 00:06:16,890
They're what's known as data structures.

110
00:06:17,280 --> 00:06:22,080
So the first one is called a list and it's an ordered sequence of values.

111
00:06:22,110 --> 00:06:23,460
So here's an example.

112
00:06:23,640 --> 00:06:24,750
One two and three.

113
00:06:24,780 --> 00:06:25,990
Or the strings.

114
00:06:25,990 --> 00:06:28,400
AB in-seat stupid examples.

115
00:06:28,440 --> 00:06:31,620
But the idea Well it needed to be short to fit in this table.

116
00:06:31,620 --> 00:06:35,940
But the idea is that you can store data inside of them in a list and there's an order.

117
00:06:35,940 --> 00:06:40,050
So maybe we have a waitlist on my shop I'm sold out of my peanut butter.

118
00:06:40,050 --> 00:06:44,670
It's delicious homemade peanut butter and make up my roof I guess with those peanuts.

119
00:06:44,670 --> 00:06:46,190
They don't grow.

120
00:06:46,470 --> 00:06:48,770
I have a list of people who are interested.

121
00:06:48,840 --> 00:06:50,150
I need an order to it.

122
00:06:50,310 --> 00:06:55,140
Right I don't just want to have a variable for each person I need them to be grouped together and somebody

123
00:06:55,140 --> 00:06:56,310
is first.

124
00:06:56,310 --> 00:06:57,990
So whatever's first in the list.

125
00:06:58,310 --> 00:06:58,800
OK.

126
00:06:58,950 --> 00:07:02,560
Then we have dictionaries and dictionaries are a bit different.

127
00:07:02,760 --> 00:07:03,490
They work.

128
00:07:03,530 --> 00:07:04,110
There's no order.

129
00:07:04,110 --> 00:07:04,830
First of all.

130
00:07:05,040 --> 00:07:09,940
But more important than that we have pairs of corresponding values stored together.

131
00:07:10,200 --> 00:07:16,880
So here's an example where we have first name is set to Colt and then last name is set to steal.

132
00:07:17,130 --> 00:07:23,040
So rather than having two separate variables we can put them together by using a dictionary which is

133
00:07:23,040 --> 00:07:27,420
what these braces signify just as these brackets here signify a list.

134
00:07:27,420 --> 00:07:30,760
So if that makes no sense to you I wouldn't I wouldn't sweat it.

135
00:07:30,810 --> 00:07:33,680
We're going to spend a lot of time working with these are really common.

136
00:07:33,870 --> 00:07:39,700
But the main difference again is that these are more basic data types booleans integers float strings.

137
00:07:39,930 --> 00:07:45,480
And then we have these data structures lists and dictionaries that actually store other bits of data.

138
00:07:45,600 --> 00:07:46,040
OK.

139
00:07:46,170 --> 00:07:47,500
So that's it for now.

140
00:07:47,610 --> 00:07:48,700
There's a lot of data types.

141
00:07:48,720 --> 00:07:53,970
This is not comprehensive but really we're going to focus on strings for the next couple of videos.
