WEBVTT
1
00:00:00.330 --> 00:00:01.090
Oh right.

2
00:00:01.110 --> 00:00:02.890
So one more video on decorator's.

3
00:00:02.930 --> 00:00:07.920
This will be a quick one and I believe it will be the last one unless I come back in the future and

4
00:00:07.920 --> 00:00:08.760
add something else.

5
00:00:08.760 --> 00:00:12.930
But for now it is the last one and I'm actually not going to type code.

6
00:00:12.930 --> 00:00:17.850
This is actually code that I found online on stack overflow and I thought it was a really good example

7
00:00:17.880 --> 00:00:20.760
to demonstrate the power of decorators.

8
00:00:20.760 --> 00:00:28.610
So what this does is it enforces types on you know whatever function we defined so it looks like this

9
00:00:28.610 --> 00:00:33.480
is called in force and I can pass in you know the string in an INT.

10
00:00:33.600 --> 00:00:39.360
And this basically guarantees that this needs to be a string and this needs to be an int but not only

11
00:00:39.360 --> 00:00:43.390
that it's also going to try to change this into a string if it's not.

12
00:00:43.530 --> 00:00:45.260
And change this into an int.

13
00:00:45.540 --> 00:00:51.750
So that's some more pythonic way of doing things is trying to kind of convert types and avoid problems

14
00:00:51.750 --> 00:00:55.250
if possible if you can convert a float to an int and have it work.

15
00:00:55.260 --> 00:01:01.500
That's great rather than freaking out that hey this float isn't the goal here for this decorator is

16
00:01:01.500 --> 00:01:02.510
to do just that.

17
00:01:02.640 --> 00:01:04.420
We specify whatever pattern we want.

18
00:01:04.420 --> 00:01:05.980
String and string.

19
00:01:06.090 --> 00:01:11.730
And then it's going to make sure that this is a string and whatever we pass in if it's not will be converted.

20
00:01:12.000 --> 00:01:12.830
If it can.

21
00:01:13.020 --> 00:01:15.450
This needs to be an int in this case it's not.

22
00:01:15.490 --> 00:01:20.170
But it will be converted to an int and then this will be a string whatever the next thing is.

23
00:01:20.430 --> 00:01:23.770
OK so here's how it works up here.

24
00:01:23.770 --> 00:01:26.490
So we have in force and it takes an argument.

25
00:01:26.490 --> 00:01:31.460
So this is where we have to use the kind of nested functions multiple nested functions.

26
00:01:31.530 --> 00:01:37.170
So we have the decorator this is what's actually being returned on this line this entire function.

27
00:01:37.170 --> 00:01:41.070
And inside we have this function called new phunk.

28
00:01:41.250 --> 00:01:44.660
There's a note here just mentioned said args is not mutable.

29
00:01:44.760 --> 00:01:47.560
If you don't remember that it's not it's a tuple.

30
00:01:47.580 --> 00:01:50.970
So we're going to just make something called new ARGs that a for now.

31
00:01:51.210 --> 00:01:56.910
And this is not necessarily the most efficient or the best implementation of this but I think it's pretty

32
00:01:56.910 --> 00:01:57.780
nice and simple.

33
00:01:57.870 --> 00:02:02.120
Then all we do is zip together args and types.

34
00:02:02.280 --> 00:02:03.450
So that would look something like this.

35
00:02:03.450 --> 00:02:04.860
With this example.

36
00:02:04.860 --> 00:02:10.650
This is types right here is what we pass in to the decorator.

37
00:02:10.650 --> 00:02:15.130
And this here is arx we pass in to the decorated function.

38
00:02:15.180 --> 00:02:22.660
So when we sit them together it would be something like Hello comma string.

39
00:02:23.000 --> 00:02:25.350
And then the next one would be.

40
00:02:25.460 --> 00:02:26.580
What else was there.

41
00:02:26.750 --> 00:02:29.180
String three comment.

42
00:02:29.530 --> 00:02:29.860
OK.

43
00:02:29.870 --> 00:02:32.510
So are zipping these two things together.

44
00:02:32.510 --> 00:02:33.560
However many are in there.

45
00:02:33.650 --> 00:02:41.450
And then for each pair in that result what we're going to do is append to new args so new args is an

46
00:02:41.450 --> 00:02:42.690
empty list.

47
00:02:42.800 --> 00:02:43.770
We're going to call.

48
00:02:43.790 --> 00:02:48.270
We're going to try and cast each argument with the type.

49
00:02:48.290 --> 00:02:53.340
So that means trying to cast hello as a string which works and we get hello.

50
00:02:53.630 --> 00:03:00.230
Then the next one we try and cast three the string as an int which also works and gives us the integer

51
00:03:00.350 --> 00:03:00.990
string.

52
00:03:01.850 --> 00:03:04.640
So that makes sense what's happening to preparing them up.

53
00:03:04.760 --> 00:03:06.640
They suffer the types that are specified here.

54
00:03:06.770 --> 00:03:11.450
And then the actual arguments that were passed in repairing them up and then we're just casting each

55
00:03:11.450 --> 00:03:16.410
one no matter what we could add a check in there to see hey is Hello already string.

56
00:03:16.410 --> 00:03:18.100
And don't try and make it a string.

57
00:03:18.500 --> 00:03:22.460
But instead this is just the simple version for demo purposes.

58
00:03:22.690 --> 00:03:31.380
OK then we just return F which is you know whatever function we passed in but instead we're calling

59
00:03:31.380 --> 00:03:34.140
it with new args which is this.

60
00:03:34.460 --> 00:03:39.240
So we passed this in whereas the input was this.

61
00:03:39.240 --> 00:03:41.600
So we went from this to that.

62
00:03:41.730 --> 00:03:43.520
With this in force.

63
00:03:44.180 --> 00:03:44.650
OK.

64
00:03:44.820 --> 00:03:49.350
And if we tested out my little demo function here repeat message.

65
00:03:49.470 --> 00:03:56.310
All it does is loop through a number of times you specify and then print a message that many times.

66
00:03:56.310 --> 00:04:00.360
So I could do print Hello five times.

67
00:04:01.020 --> 00:04:03.730
And if we run it we get hello five times.

68
00:04:03.780 --> 00:04:05.040
That's nothing special.

69
00:04:05.160 --> 00:04:14.430
But if this is a string now and we try it it still works even though without this in force we would

70
00:04:14.430 --> 00:04:21.100
have a big problem because it tries to loop five string times which is a problem in the range the range

71
00:04:21.100 --> 00:04:22.870
is not like a string.

72
00:04:23.280 --> 00:04:23.660
OK.

73
00:04:23.700 --> 00:04:24.840
And another quick demo.

74
00:04:24.860 --> 00:04:25.870
We can do something like.

75
00:04:25.980 --> 00:04:37.750
Divide and it just takes two numbers a and b and all that does is return a divided by B and all that

76
00:04:37.770 --> 00:04:40.590
we want to check if we do it in force.

77
00:04:40.800 --> 00:04:44.660
Is that both are we could just say float.

78
00:04:44.660 --> 00:04:45.140
All right.

79
00:04:45.300 --> 00:04:48.750
Because if we have an ant we can convert that to a float without losing data.

80
00:04:48.780 --> 00:04:50.850
We could have said it on both of them.

81
00:04:50.940 --> 00:04:56.520
But then if we pass in a float we would lose some data on it because it just chops off the end.

82
00:04:56.580 --> 00:04:59.990
So instead let's call both floats they both have to be a float.

83
00:05:00.270 --> 00:05:10.820
And now if I tried to call divide I guess let me print it out to be so it's clearer like this.

84
00:05:11.220 --> 00:05:18.650
You could divide and if just test it out one and two should work and it does it now.

85
00:05:18.680 --> 00:05:21.970
And those are both ends either way and we're forcing them to be folks.

86
00:05:22.200 --> 00:05:30.100
And that works fine but if I do one comma for both strings it still works.

87
00:05:30.120 --> 00:05:31.140
We get a float.

88
00:05:31.320 --> 00:05:32.780
So convert some to flips.

89
00:05:33.050 --> 00:05:33.430
OK.

90
00:05:33.450 --> 00:05:35.160
So hopefully you think that's kind of cool.

91
00:05:35.250 --> 00:05:36.280
If not.

92
00:05:36.840 --> 00:05:42.000
Well I guess it does not that cool if you have any questions on how it works how they recommend you

93
00:05:42.000 --> 00:05:44.100
just post a question and discussion board.

94
00:05:44.100 --> 00:05:50.520
This kind of stuff gets very difficult to walk through on your own sometimes and you start to question

95
00:05:50.520 --> 00:05:54.690
how things work when you have all these nested functions and three returns and I get it.

96
00:05:54.690 --> 00:05:55.540
It gets crazy.

97
00:05:55.650 --> 00:05:59.730
So if you have questions Postum and otherwise we're done at decorator's for now.
