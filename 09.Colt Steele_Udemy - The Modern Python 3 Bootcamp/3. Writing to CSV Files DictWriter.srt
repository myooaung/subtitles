0
1
00:00:00,360 --> 00:00:05,770
Next when a show another way of writing data this will be much quicker using dict writer.
1

2
00:00:06,000 --> 00:00:11,610
So just like we had adicts reader we have adicts writer and it allows us to write with dictionaries.
2

3
00:00:11,790 --> 00:00:14,380
And when I said it would be quicker I just meant the video was quicker.
3

4
00:00:14,400 --> 00:00:20,430
It not necessarily that this is faster than using a regular writer but it is easier to understand what's
4

5
00:00:20,430 --> 00:00:21,500
going on.
5

6
00:00:21,540 --> 00:00:24,520
So it really is a personal preference which when you use.
6

7
00:00:24,780 --> 00:00:27,220
So dict writer is a little more complicated.
7

8
00:00:27,270 --> 00:00:32,160
You have to specify the field names and set them equal to whatever we want the headers to be.
8

9
00:00:32,160 --> 00:00:39,720
And then we call right Hetter to actually write a line of headers and then we call write row to write
9

10
00:00:39,750 --> 00:00:41,740
a row based off of a dictionary.
10

11
00:00:41,760 --> 00:00:43,890
So let's just look at an example here.
11

12
00:00:43,980 --> 00:00:45,310
We're opening a file.
12

13
00:00:45,440 --> 00:00:49,220
We have to import dict writer first opened a file in write mode.
13

14
00:00:49,590 --> 00:00:55,470
We create a list of headers and then when we call dict writer we pass in the file and we set field
14

15
00:00:55,470 --> 00:01:03,450
names to be these headers and then we call right Hetter and it's going to use these field names and
15

16
00:01:03,450 --> 00:01:05,400
actually write that row for us.
16

17
00:01:05,550 --> 00:01:09,290
And then every time we called right row we pass in a dictionary like this.
17

18
00:01:09,450 --> 00:01:11,050
Let's just take a look at some code.
18

19
00:01:11,070 --> 00:01:13,110
This is the old version using writers.
19

20
00:01:13,130 --> 00:01:20,530
I'm going to comment that out and I'm going to import dict writer as well like this.
20

21
00:01:20,850 --> 00:01:21,410
OK.
21

22
00:01:21,600 --> 00:01:24,580
And then down here we'll do our Same with Open.
22

23
00:01:24,720 --> 00:01:31,240
We'll just work with catch up CXXVI and we'll do w which will overwrite but that's OK for now.
23

24
00:01:31,530 --> 00:01:36,090
So let's do this gets the SBW as file.
24

25
00:01:37,200 --> 00:01:40,640
And then the first thing we want to define are the headers that we're going to write in.
25

26
00:01:40,830 --> 00:01:42,010
So we could do.
26

27
00:01:42,210 --> 00:01:42,680
I don't know.
27

28
00:01:42,720 --> 00:01:46,560
Headers equals we had name and age.
28

29
00:01:46,560 --> 00:01:52,840
Let's go with name breed and age this time.
29

30
00:01:53,250 --> 00:01:55,510
So we're going to overwrite what's currently in there.
30

31
00:01:55,720 --> 00:01:57,370
Just completely erase it.
31

32
00:01:57,390 --> 00:01:57,970
All right.
32

33
00:01:58,140 --> 00:02:04,630
So then we need to make our CACP writer whatever you want to call this equals dict writer.
33

34
00:02:05,030 --> 00:02:09,740
And then we pass in the file comma and then we need field names.
34

35
00:02:09,740 --> 00:02:12,420
This is important and we set it equal to some lists.
35

36
00:02:12,420 --> 00:02:13,950
You could just put this in line.
36

37
00:02:14,190 --> 00:02:18,520
But if you have a lot of them just do a variable like that.
37

38
00:02:18,600 --> 00:02:26,850
Now we're going to call C S rewriter right hatter and it's going to take these letters she passed in
38

39
00:02:26,880 --> 00:02:32,370
under field names and write them to the File for us and if we just do this now that should be enough
39

40
00:02:32,370 --> 00:02:35,550
for us to see something every year on the code.
40

41
00:02:35,630 --> 00:02:41,090
Now we go look at this cat step CACP it overwrote everything because we open the file with right mode
41

42
00:02:41,540 --> 00:02:42,810
which overwrites everything.
42

43
00:02:42,950 --> 00:02:45,760
But you can see it wrote those letters for us.
43

44
00:02:46,190 --> 00:02:46,820
OK.
44

45
00:02:47,030 --> 00:02:51,460
So that's I mean you do that once right and what's more important is actually writing the row.
45

46
00:02:51,560 --> 00:02:58,760
So it's See it's rewriter dot right row and it takes a dictionary and we can specify I'm going to do
46

47
00:02:58,760 --> 00:03:00,020
it on separate lines.
47

48
00:03:00,170 --> 00:03:06,920
We specify name and we don't have to go in order because we're using unlike with a list where the first
48

49
00:03:06,920 --> 00:03:08,260
thing had to be name.
49

50
00:03:08,270 --> 00:03:11,510
Second thing had to be age and they all had to line up here.
50

51
00:03:11,600 --> 00:03:15,860
I could specify name is and then what do I want name to be.
51

52
00:03:16,010 --> 00:03:20,770
Let's go with Garfield and then Vrede.
52

53
00:03:21,260 --> 00:03:26,080
I don't know what he is just short of let's just say orange tabby and age.
53

54
00:03:26,510 --> 00:03:31,380
I have no idea how old Garfield is to go with 10.
54

55
00:03:31,460 --> 00:03:32,790
I mean the characters were WAY older.
55

56
00:03:32,800 --> 00:03:34,220
But let's just say 10.
56

57
00:03:34,250 --> 00:03:34,980
OK.
57

58
00:03:35,300 --> 00:03:40,180
Now for on this code and we look at what we get.
58

59
00:03:40,180 --> 00:03:40,910
There we go.
59

60
00:03:41,060 --> 00:03:42,080
Name breed age.
60

61
00:03:42,080 --> 00:03:44,040
Garfield orange tabby and tan.
61

62
00:03:44,330 --> 00:03:50,720
So this shows us that we can use a dictionary to write all that I would say is that yes this is more
62

63
00:03:50,780 --> 00:03:56,000
verbose than writing a single row like this where you don't have to specify what we're writing.
63

64
00:03:56,000 --> 00:03:58,080
This can be nicer if your data.
64

65
00:03:58,160 --> 00:04:02,120
Obviously if your data is already in a dictionary which a lot of the time you might be working with
65

66
00:04:02,120 --> 00:04:05,460
dictionaries This is very easy to write data.
66

67
00:04:05,510 --> 00:04:12,150
It really just comes down to personal preference using writer use of the means less code using dict
67

68
00:04:12,200 --> 00:04:18,590
writer usually means being more explicit in your code the easier to understand just a preference.
68

69
00:04:18,590 --> 00:04:24,140
So one more example of using dict reader and dict writer together let's say I want to take my fighter's
69

70
00:04:24,140 --> 00:04:29,720
data and want to convert the centimeters height to inches or feet.
70

71
00:04:29,770 --> 00:04:31,370
Would I go with inches for now.
71

72
00:04:31,660 --> 00:04:32,070
OK.
72

73
00:04:32,150 --> 00:04:35,070
So to do that the math is easy.
73

74
00:04:35,090 --> 00:04:36,050
We're just going to multiply.
74

75
00:04:36,050 --> 00:04:36,970
I have a little function.
75

76
00:04:37,010 --> 00:04:39,550
CM to inch that takes centimeters.
76

77
00:04:39,560 --> 00:04:41,330
And this is according to Google.
77

78
00:04:41,330 --> 00:04:47,330
What we need to multiply by so all I want to do is read in all the data from this file and then I'm
78

79
00:04:47,330 --> 00:04:52,760
going to write it to a new file and we're just going to take this number in pass it in to that CME to
79

80
00:04:53,000 --> 00:04:58,010
function and then write that value down and we'll keep these all the same.
80

81
00:04:58,010 --> 00:04:58,580
All right.
81

82
00:04:58,760 --> 00:05:05,990
So the first thing we'll do let's do it down here is just with open and the file is fighters Scott cxxviii
82

83
00:05:08,120 --> 00:05:11,090
as fighter or what am I saying as file.
83

84
00:05:11,420 --> 00:05:14,060
And then in here we're going to use dict reader.
84

85
00:05:14,060 --> 00:05:18,860
So we'll do CXXVI reader equals dict reader.
85

86
00:05:18,870 --> 00:05:20,890
We don't have to use dict reader.
86

87
00:05:21,140 --> 00:05:25,940
It's just if we're going to use dicts writer it's much easier to keep them in the same format when dictionary
87

88
00:05:26,300 --> 00:05:30,590
and we can read it in its dictionary write it out as a dictionary instead of having to convert from
88

89
00:05:30,590 --> 00:05:33,320
a list to a dictionary but it's not impossible.
89

90
00:05:33,560 --> 00:05:34,010
OK.
90

91
00:05:34,340 --> 00:05:40,690
And then we just need to pass and file and can just make sure it's working for row and see Reader.
91

92
00:05:40,790 --> 00:05:46,020
Let's just do even simple print the list version of CSFB reader.
92

93
00:05:46,760 --> 00:05:47,780
We test it out.
93

94
00:05:47,810 --> 00:05:50,930
There we go getting a bunch of ordered dicts.
94

95
00:05:51,020 --> 00:05:51,940
Cool.
95

96
00:05:52,040 --> 00:05:57,260
So now we have that same question which is do we want to just do a nested solution where we have another
96

97
00:05:57,380 --> 00:06:04,610
we open up the file we write to inside of this with or do we want to save this data to a variable.
97

98
00:06:04,670 --> 00:06:10,820
Since we did it nested last time let's do it on separate with statements so a save is too variable.
98

99
00:06:10,970 --> 00:06:15,440
I'll just call this a fighter's equals list.
99

100
00:06:15,590 --> 00:06:22,520
C is free read C S V reader and then down here we'll do another with open and ours will be called inches
100

101
00:06:22,580 --> 00:06:23,970
fighters.
101

102
00:06:24,230 --> 00:06:25,060
P Y.
102

103
00:06:25,250 --> 00:06:36,290
And we need that W as a file and then we'll do our C S V writer equals dict writer and we pass and file
103

104
00:06:36,290 --> 00:06:39,020
but we also need the headers.
104

105
00:06:39,080 --> 00:06:39,480
OK.
105

106
00:06:39,740 --> 00:06:41,230
So it's up to us.
106

107
00:06:41,420 --> 00:06:45,100
But the thing is right now our headers are like this.
107

108
00:06:45,260 --> 00:06:52,190
So we can just keep that except I'd like to change this to be Heights in inches instead.
108

109
00:06:52,580 --> 00:06:55,720
Maybe let's just make it right instead.
109

110
00:06:55,730 --> 00:06:58,790
All right so we need quotes around these.
110

111
00:06:58,910 --> 00:07:00,540
Maybe there's a better way of doing this.
111

112
00:07:00,800 --> 00:07:07,710
And then we need to turn it into a list or a tuple and then we'll just do adder's equals that.
112

113
00:07:07,970 --> 00:07:11,460
And then here we need to do field names equals headers.
113

114
00:07:11,770 --> 00:07:12,280
OK.
114

115
00:07:12,280 --> 00:07:14,410
And then we'll do our cxxviii writer.
115

116
00:07:14,690 --> 00:07:15,650
Right.
116

117
00:07:15,860 --> 00:07:17,420
And let's run this now.
117

118
00:07:19,990 --> 00:07:27,820
It looks good and the file that we made of is it called inches fighters let's look for that somewhere
118

119
00:07:27,820 --> 00:07:29,100
over here.
119

120
00:07:29,100 --> 00:07:29,650
There we go.
120

121
00:07:29,650 --> 00:07:31,390
All right we've got the hitters in there.
121

122
00:07:31,390 --> 00:07:37,810
So now all that we have left is to loop through fighters and we're going to call cxxviii writer.
122

123
00:07:37,960 --> 00:07:38,660
Right.
123

124
00:07:38,740 --> 00:07:45,410
ROWE So for fighter and fighters let's just call it let's keep it shorter.
124

125
00:07:46,880 --> 00:07:51,470
We're going to call cxxviii writer dot right.
125

126
00:07:51,570 --> 00:07:54,020
Ro.
126

127
00:07:54,330 --> 00:07:55,410
But this takes a dictionary.
127

128
00:07:55,410 --> 00:07:57,090
We'll do it on a couple of lines.
128

129
00:07:57,390 --> 00:07:59,000
And we need to match these headers.
129

130
00:07:59,130 --> 00:08:03,520
If I guess he didn't show this earlier but if we'd you know messed them up we don't spell them correctly
130

131
00:08:03,520 --> 00:08:04,410
we would use something else.
131

132
00:08:04,520 --> 00:08:05,540
Well I'll show you what happens.
132

133
00:08:05,550 --> 00:08:11,040
We have these ordered dicts right now in fact he just kept them as is and just passed in f right row
133

134
00:08:11,100 --> 00:08:13,680
f and we run it.
134

135
00:08:13,680 --> 00:08:19,380
You can see it gives me this problem because the field that they have right now is called height in
135

136
00:08:19,500 --> 00:08:20,550
centimeters.
136

137
00:08:20,820 --> 00:08:24,850
And what I wrote down was hights because I want to get rid of that.
137

138
00:08:24,960 --> 00:08:27,390
So that gives us a slight problem.
138

139
00:08:27,390 --> 00:08:30,010
We could do is basically loop through each one.
139

140
00:08:30,130 --> 00:08:36,180
Leave this untouched leaf that untouched and then remove this entirely and add in a new key value pair
140

141
00:08:36,180 --> 00:08:39,750
for height and set it equal to the inches version.
141

142
00:08:39,750 --> 00:08:44,610
Or we could just do this instead of trying to write the road directly.
142

143
00:08:44,610 --> 00:08:51,060
We could write name and set that equal to f of name.
143

144
00:08:51,360 --> 00:08:55,830
And this is kind of verbose to have to do this but it works.
144

145
00:08:55,830 --> 00:09:00,770
Country we set to f of countries so those are the same.
145

146
00:09:00,930 --> 00:09:04,810
And then here we get to height and we set height too.
146

147
00:09:05,040 --> 00:09:06,960
And then this is the tonic to start.
147

148
00:09:06,960 --> 00:09:08,140
We could just do f.
148

149
00:09:08,160 --> 00:09:14,190
What was that Hetter just copy it from here it had the height in CMEs like that.
149

150
00:09:14,190 --> 00:09:15,820
So that's how they're stored.
150

151
00:09:15,960 --> 00:09:19,910
If we did this and rerun it and we look at our result.
151

152
00:09:20,330 --> 00:09:23,350
Oh well I just realized I made this a python file.
152

153
00:09:23,380 --> 00:09:25,830
That's not what we want really.
153

154
00:09:25,990 --> 00:09:27,330
Why we're getting that highlighting.
154

155
00:09:27,440 --> 00:09:28,830
But the syntax is all the same.
155

156
00:09:28,830 --> 00:09:29,820
What's being written.
156

157
00:09:30,030 --> 00:09:33,880
But the main problem is that this is still centimeters I want inches.
157

158
00:09:33,920 --> 00:09:38,200
So before I forget let's make this dot CSFB.
158

159
00:09:38,630 --> 00:09:39,330
OK.
159

160
00:09:39,660 --> 00:09:43,230
And down here we're not going to set height to this.
160

161
00:09:43,290 --> 00:09:47,010
We want to pass this into S.M. 2 inches.
161

162
00:09:47,310 --> 00:09:55,060
CM 2 inches but there's still another problem which is this is going to be a string and this expects
162

163
00:09:55,060 --> 00:09:57,470
it to be an int or a number.
163

164
00:09:57,510 --> 00:10:04,610
So if we get this conversion problem so we could just kind of this isn't necessarily the best way of
164

165
00:10:04,610 --> 00:10:10,580
doing it because this is called centimeters to inches you would think a function name that would just
165

166
00:10:10,580 --> 00:10:12,230
take a number.
166

167
00:10:12,230 --> 00:10:14,890
It shouldn't take a string and automatically turn it to an end.
167

168
00:10:14,890 --> 00:10:21,770
This is ok we'll just assume whatever we get will turn it into an ant and then multiply it or actually
168

169
00:10:21,770 --> 00:10:24,470
better yet would be a float in case somebody passing a float.
169

170
00:10:24,470 --> 00:10:26,370
We won't lose data accuracy.
170

171
00:10:26,370 --> 00:10:27,470
OK let's test it.
171

172
00:10:28,380 --> 00:10:34,200
Now let's actually look at the correct file which was inches fighters C S V.
172

173
00:10:34,350 --> 00:10:37,810
We might want to round but you can see that we're getting data now.
173

174
00:10:37,840 --> 00:10:39,230
We have named country and height.
174

175
00:10:39,300 --> 00:10:40,260
We have this new file.
175

176
00:10:40,270 --> 00:10:46,600
We transfer data from here in centimeters for height over here 2 inches for height.
176

177
00:10:46,650 --> 00:10:48,260
Everything else is identical.
177

178
00:10:48,600 --> 00:10:48,890
OK.
178

179
00:10:48,900 --> 00:10:54,330
So hopefully that makes it clear how we can use dict writer along with dict reader or getting data
179

180
00:10:54,330 --> 00:10:55,770
into a dictionary.
180

181
00:10:55,770 --> 00:10:58,230
Usually this would actually be a lot shorter.
181

182
00:10:58,380 --> 00:11:05,070
But the thing is that I wanted to rename height in cm to now be called height which caused a problem.
182

183
00:11:05,070 --> 00:11:07,860
If I had left it this height in CM It would have been a lot easier.
183

184
00:11:07,860 --> 00:11:11,040
Except it would have been a lie because we're working with inches now.
184

185
00:11:11,040 --> 00:11:16,860
So because of that we have to update this field on every dictionary before we insert it so we can't
185

186
00:11:16,860 --> 00:11:20,700
just take fighters and loop through each fighter and just add f.
186

187
00:11:20,700 --> 00:11:26,250
Like I showed you at the beginning that would work for all the other pieces of data like name and country
187

188
00:11:26,790 --> 00:11:32,010
but it wouldn't work for height because it's not stored underwrite it's stored under height and s.m.
188

189
00:11:32,330 --> 00:11:32,900
OK.
189

190
00:11:33,150 --> 00:11:36,170
So you can see there's a lot of choices when you're working with CSB.
190

191
00:11:36,330 --> 00:11:41,890
Two different ways of reading in and two different ways of writing out to a file at the end of the day.
191

192
00:11:41,940 --> 00:11:42,500
They all work.
192

193
00:11:42,510 --> 00:11:46,220
It just really depends on your personal situation what you prefer.
193

194
00:11:46,410 --> 00:11:50,580
And if you like to be shorter but harder to you know less exposed to it.
194

195
00:11:50,580 --> 00:11:55,470
Or if you like to be a little longer more verbose but clear and explicit about what code does.
