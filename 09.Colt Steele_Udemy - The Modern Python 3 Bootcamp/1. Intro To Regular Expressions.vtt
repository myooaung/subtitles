WEBVTT
1
00:00:00.240 --> 00:00:00.610
Hey there.

2
00:00:00.630 --> 00:00:01.460
Welcome back.

3
00:00:01.650 --> 00:00:07.220
So before I even introduce this topic let me just add that I'm sorry if my voice sounds a bit off.

4
00:00:07.440 --> 00:00:12.960
I'm sick of been sick kind of a long time now and I've been waiting to record this section putting it

5
00:00:12.960 --> 00:00:16.930
off until I feel better and my voice goes back to normal but it's just not happening.

6
00:00:17.040 --> 00:00:18.880
So I hope it's not too distracting.

7
00:00:18.940 --> 00:00:19.770
Maybe you'll like it.

8
00:00:19.770 --> 00:00:25.380
And then the rest of my content is disappointing because my voice doesn't sound so deep anyway.

9
00:00:25.710 --> 00:00:26.880
So this is a topic.

10
00:00:26.880 --> 00:00:28.890
Regular expressions are rejects.

11
00:00:28.940 --> 00:00:33.990
That's something a lot of students have been requesting a meeting in after the course has been published.

12
00:00:33.990 --> 00:00:34.660
I had something.

13
00:00:34.680 --> 00:00:38.230
People have been talking about on the discussion boards and it's a good addition.

14
00:00:38.250 --> 00:00:43.440
A lot of times students leave requests for topics that are very specific to their own life or their

15
00:00:43.440 --> 00:00:48.410
own situation kind of the things that would help them and sometimes add those in.

16
00:00:48.480 --> 00:00:53.580
But often I try and look for things that actually make sense for the majority of students things that

17
00:00:53.760 --> 00:00:57.450
anyone would find useful and rejects is one of those topics.

18
00:00:57.450 --> 00:00:57.900
OK.

19
00:00:58.020 --> 00:01:01.860
So without further ado let's talk about regular expressions.

20
00:01:01.860 --> 00:01:02.680
What are they.

21
00:01:02.910 --> 00:01:06.020
So if you're not familiar with the term rejects a regular expressions.

22
00:01:06.120 --> 00:01:09.480
I'll start by saying that it's not a Python specific topic.

23
00:01:09.480 --> 00:01:12.750
This is something like HGP requests for example.

24
00:01:12.890 --> 00:01:18.510
But those exist in pretty much any programming language or you can make requests using a programming

25
00:01:18.510 --> 00:01:19.170
language.

26
00:01:19.180 --> 00:01:20.820
It's the same idea with regular expressions.

27
00:01:20.820 --> 00:01:27.510
It's a concept that is separate from Python but Python has an implementation where we can write and

28
00:01:27.510 --> 00:01:29.720
use regular expressions in our code.

29
00:01:29.730 --> 00:01:30.800
So what do they do.

30
00:01:30.990 --> 00:01:36.050
Well there are a way of describing patterns within text or strings.

31
00:01:36.060 --> 00:01:41.970
It's basically a fancy set of syntax of special characters that we can string together to make these

32
00:01:41.970 --> 00:01:44.930
patterns these templates that we want to match.

33
00:01:44.940 --> 00:01:47.870
I think it will help just to take a look at an example.

34
00:01:47.870 --> 00:01:52.920
So let's say we're working with email addresses we ask a user to enter an e-mail and we could write

35
00:01:52.920 --> 00:01:57.350
Python code to just check if it follows the correct format of an email.

36
00:01:57.600 --> 00:02:03.710
So before we I don't know maybe we'll will send a request and we'll send an email to that email address.

37
00:02:03.810 --> 00:02:08.080
But before we do that we want to make sure that it's even in the valid format.

38
00:02:08.130 --> 00:02:14.700
Why try and send an e-mail to an address that is clearly wrong it doesn't contain a dot or an at symbol

39
00:02:15.030 --> 00:02:16.580
or it's just a bunch of numbers.

40
00:02:16.650 --> 00:02:18.030
It's a phone number instead.

41
00:02:18.030 --> 00:02:21.610
Why waste time and resources sending an email to that.

42
00:02:21.780 --> 00:02:24.260
What we going to do is write Python code to check.

43
00:02:24.270 --> 00:02:26.170
Does this match the format of an email.

44
00:02:26.310 --> 00:02:27.920
So what is the format of an email.

45
00:02:28.170 --> 00:02:34.980
Well I mean we've seen things like this write some letters at need that sign and then a domain like

46
00:02:35.010 --> 00:02:36.630
gmail dot com.

47
00:02:36.900 --> 00:02:43.260
And if we wanted every email too if you want to be very basic and just write Python code to check if

48
00:02:43.260 --> 00:02:49.200
there's an at symbol somewhere in the input string from a user that's easy.

49
00:02:49.200 --> 00:02:54.800
We know how to do that we can just do you know is if at symbol in email address.

50
00:02:54.900 --> 00:03:00.980
True or false if it's false then you throw an error or something but it's more complicated than that.

51
00:03:01.170 --> 00:03:04.120
Even just the symbol there only is allowed to be one.

52
00:03:04.140 --> 00:03:05.460
We can't have two of them.

53
00:03:05.460 --> 00:03:10.020
So already That's an that's an extra line of logic we have to add in and it can't be at the beginning

54
00:03:10.140 --> 00:03:12.160
and it can't be at the very end.

55
00:03:12.240 --> 00:03:20.880
Not only can it not be at the end it can't be called gmail dot c o at sign M It has to be before the

56
00:03:20.880 --> 00:03:23.340
dot and the domain.

57
00:03:23.940 --> 00:03:29.010
So just that logic on its own is a lot to implement from scratch to a bunch of if statements.

58
00:03:29.010 --> 00:03:35.010
A lot of things we're checking for but it's more complicated than that because we have things like dots

59
00:03:35.010 --> 00:03:38.580
that we can have in multiple places in the email.

60
00:03:38.640 --> 00:03:41.230
So you have gmail dot com or yahoo dot com.

61
00:03:41.370 --> 00:03:43.910
But then we also have Carly Simon.

62
00:03:43.950 --> 00:03:51.800
That's a valid email address so we have letters and Dot we can also have dashes and numbers or hyphens

63
00:03:51.830 --> 00:03:55.270
and I don't remember which is which or if they're actually the same thing.

64
00:03:55.400 --> 00:03:58.970
But I'm going to call it a dash and numbers letters.

65
00:03:59.020 --> 00:04:08.350
We have dots we can also have plus signs and underscores but only in this first part before the at sign.

66
00:04:08.390 --> 00:04:12.690
Then we have a single sign then we have some letters.

67
00:04:12.710 --> 00:04:13.540
What else can we have.

68
00:04:13.560 --> 00:04:21.290
I think letters and dashes and numbers potentially then a single dot only one and then some more letters

69
00:04:21.860 --> 00:04:23.520
and then nothing else afterwards.

70
00:04:23.780 --> 00:04:28.150
So to write Python code to do that would actually be a lot of logic using what we know right now.

71
00:04:28.310 --> 00:04:35.180
We could iterate over each character and check if we're before the sign this character can be a letter

72
00:04:35.180 --> 00:04:39.320
or a number or a dot or a plus and so on and then check the next character in the next one then we hit

73
00:04:39.320 --> 00:04:44.130
the at sign and then our rules change and then we hit the dot and then the rules change again.

74
00:04:44.280 --> 00:04:48.950
And it's a lot of work but basically the formula boils down to this.

75
00:04:49.040 --> 00:04:56.470
This is a rough pattern that there are more precise things we can do but this is a pretty standard overview.

76
00:04:56.570 --> 00:05:04.940
So an email address starts with one or more letters a number plus sign an underscore a dash or a period

77
00:05:04.940 --> 00:05:05.820
a dot.

78
00:05:06.230 --> 00:05:17.350
So that would be this part here or this then a single sign then one or more letter number or a hyphen

79
00:05:17.440 --> 00:05:18.630
slash dash.

80
00:05:19.000 --> 00:05:25.330
So we can't use things like a plus sign here or what else we can't have a dot here.

81
00:05:25.480 --> 00:05:28.510
We only have one dot and that comes afterwards.

82
00:05:28.660 --> 00:05:32.160
So the domain itself Hotmail meals Yahoo.

83
00:05:32.170 --> 00:05:36.390
Hello Gmail has to be letters numbers or hyphens.

84
00:05:36.610 --> 00:05:45.130
Then a single dot and then after that single dot it has to end with one or more letters numbered dash

85
00:05:45.220 --> 00:05:46.300
or dot.

86
00:05:46.540 --> 00:05:49.750
So those are the rules and to implement this on our own.

87
00:05:49.750 --> 00:05:51.370
Like I said it's a lot of logic.

88
00:05:51.370 --> 00:05:54.550
So instead we can take advantage of regular expressions.

89
00:05:54.580 --> 00:05:57.940
If you've never seen rejects this is going to look like a bunch of jibberish.

90
00:05:57.940 --> 00:05:59.540
It still looks like gibberish to me.

91
00:05:59.630 --> 00:06:05.020
Anytime I write regular expressions the tradeoff is that they're very useful but they're just hideous

92
00:06:05.260 --> 00:06:07.200
and very difficult to understand.

93
00:06:07.210 --> 00:06:09.410
You have to step through one thing at a time.

94
00:06:09.430 --> 00:06:11.500
They're kind of an pythonic in that way.

95
00:06:11.500 --> 00:06:18.430
Python is all about being clear you know having things be very semantic obvious what something does.

96
00:06:18.430 --> 00:06:20.920
Regular expressions are the complete opposite.

97
00:06:20.920 --> 00:06:23.940
But they're still very very useful not trying to say you shouldn't use them.

98
00:06:24.060 --> 00:06:24.370
OK.

99
00:06:24.400 --> 00:06:26.030
So this is what we get.

100
00:06:26.050 --> 00:06:30.690
This is a potential regular expression that would match emails.

101
00:06:30.790 --> 00:06:33.490
I want to be clear this is not a Python specific thing.

102
00:06:33.520 --> 00:06:35.200
If you just tried to run this code right now.

103
00:06:35.200 --> 00:06:35.790
Copy and paste.

104
00:06:35.800 --> 00:06:36.950
It's not going to work.

105
00:06:36.970 --> 00:06:40.440
This is the regular expression the pattern that we've defined.

106
00:06:40.450 --> 00:06:44.540
Then we have to work with Python or javascript or whatever language we want.

107
00:06:44.620 --> 00:06:51.250
We worked with the regular expression library or module that is kind of an adapter to allow us to use

108
00:06:51.610 --> 00:06:52.770
this syntax.

109
00:06:53.170 --> 00:06:54.730
So I'll show you that in just a bit.

110
00:06:54.730 --> 00:06:59.380
But we're going to start this section off by talking about regular expressions on their own outside

111
00:06:59.380 --> 00:07:00.160
of Python.

112
00:07:00.160 --> 00:07:05.090
Outside of any programming language we're just going to work with them in the browser do some live editing

113
00:07:05.620 --> 00:07:06.910
but let's step through this.

114
00:07:06.910 --> 00:07:07.930
I color coded it.

115
00:07:07.990 --> 00:07:09.610
Hopefully this is showing up OK.

116
00:07:09.940 --> 00:07:16.870
So this first bit all of this craziness here corresponds to starts with one or more letter number plus

117
00:07:17.020 --> 00:07:19.160
underscore dash period.

118
00:07:19.210 --> 00:07:20.770
You can actually see that in here.

119
00:07:21.010 --> 00:07:26.710
If we look at between these brackets I'm saying OK we can have a lowercase A to Z.

120
00:07:26.800 --> 00:07:35.170
So any lower case letter or an upper case A to Z the numbers digits 0 through 9 and underscore period

121
00:07:35.350 --> 00:07:37.260
plus sign or a dash.

122
00:07:37.660 --> 00:07:40.330
And we have one or more of those sets that this plus sign means.

123
00:07:40.360 --> 00:07:42.690
Afterwards we'll learn about these symbols as we go.

124
00:07:42.700 --> 00:07:44.990
So this is not the only time I'm going to explain this.

125
00:07:45.460 --> 00:07:50.730
And then this little bit indicates that it has to start with this so it can't just start off with you

126
00:07:50.730 --> 00:07:54.970
know some other random character has to start off with one of these characters repeated one or more

127
00:07:54.970 --> 00:07:58.690
times then a single outside so easy.

128
00:07:58.720 --> 00:08:00.820
Just put nets on there then.

129
00:08:00.850 --> 00:08:03.840
Similarly one or more letter number or dash.

130
00:08:04.060 --> 00:08:05.130
So that's what we have here.

131
00:08:05.230 --> 00:08:13.270
Letters numbers or dash no plus sign no period no underscore but one or more of those than a single

132
00:08:13.270 --> 00:08:13.950
dot.

133
00:08:14.260 --> 00:08:19.820
And that's what this means we have to escape the don't means something special in regular expressions.

134
00:08:19.900 --> 00:08:25.970
So to just actually say we want a period we need to do what is said backslash forwards.

135
00:08:26.280 --> 00:08:27.390
That's backslash right.

136
00:08:27.520 --> 00:08:29.210
Yeah backslash dot.

137
00:08:29.710 --> 00:08:35.530
And then finally one or more letter number dash or period just what this has here.

138
00:08:35.650 --> 00:08:40.130
And then this dollar sign means it must end with that nothing else comes afterwards.

139
00:08:40.390 --> 00:08:41.950
So this is kind of a mess.

140
00:08:42.070 --> 00:08:43.870
If you've never seen these before it's crazy.

141
00:08:43.870 --> 00:08:45.160
I totally get that.

142
00:08:45.160 --> 00:08:48.820
Don't worry though in this section we're going to step through some of the basics.

143
00:08:48.970 --> 00:08:52.300
You know this is not a comprehensive regular expressions course.

144
00:08:52.510 --> 00:08:57.180
I could easily make a course on it because it's pretty complex there's a lot of stuff we can get into

145
00:08:57.220 --> 00:09:03.490
there's I don't know 30 40 50 maybe more symbols and special characters and they all have different

146
00:09:03.490 --> 00:09:09.100
meanings and there's some logic involved it's not just it's not all straightforward I put it that way.

147
00:09:09.340 --> 00:09:13.840
So I'm going to just survey some of the important things show some common use cases and some of the

148
00:09:13.840 --> 00:09:19.150
things that you might do like check emails or phone numbers credit cards that sort of thing rather than

149
00:09:19.210 --> 00:09:22.840
super weird out there challenging regular expressions.

150
00:09:22.840 --> 00:09:28.630
So before I leave this slide the whole goal of rejects is that it allows us to define patterns and then

151
00:09:28.630 --> 00:09:36.340
in python we can take a pattern that we define and test inputs say you know hey pythoness this string

152
00:09:36.400 --> 00:09:43.510
match the pattern I defined or how many times does this string contain matches and do things based off

153
00:09:43.510 --> 00:09:43.890
of that.

154
00:09:43.960 --> 00:09:51.160
So we could take two or three lines to validate an email rather than I don't know 50 60 lines to do

155
00:09:51.160 --> 00:09:52.480
it without a regular expression.

156
00:09:52.540 --> 00:09:59.050
So a bunch of if statements and loops and checks manually trying to see if that if the sign is in there

157
00:09:59.530 --> 00:10:04.390
if it's followed by you know one or more letters so I won't go through all of it.

158
00:10:04.420 --> 00:10:08.370
Just trust me if you tried to implement this on your own it would be a lot of work.

159
00:10:08.380 --> 00:10:15.570
So the tradeoff is that we have to deal with the syntax OK so quickly a couple of other use cases already

160
00:10:15.570 --> 00:10:18.050
mentioned them credit card number validating.

161
00:10:18.140 --> 00:10:20.780
There's a particular format that credit card numbers follow.

162
00:10:21.030 --> 00:10:23.810
And I think it's been a while since I've done this.

163
00:10:23.940 --> 00:10:29.480
You can also use packages out there I think depending on the credit card company it changes.

164
00:10:29.490 --> 00:10:32.940
But there's always a dependable format phone number validating.

165
00:10:33.000 --> 00:10:36.580
You know you have different numbers spaced out for different parts of the world.

166
00:10:36.630 --> 00:10:39.990
Some might start with an area code some might have a country code.

167
00:10:40.000 --> 00:10:44.560
Well I guess every place has a country code but sometimes people won't enter it.

168
00:10:44.700 --> 00:10:47.210
You need to put a plus at the beginning for international numbers.

169
00:10:47.220 --> 00:10:49.190
But sometimes people might not put that there.

170
00:10:49.230 --> 00:10:52.950
They might put parentheses around parts of it that might put a hyphen in there that might fit spaces

171
00:10:53.550 --> 00:10:59.540
we can account for all of that using a regular expression and define a couple of acceptable formats.

172
00:10:59.850 --> 00:11:06.040
But other things you can do aside from validating information you can do really advanced find and replace.

173
00:11:06.330 --> 00:11:13.110
So if you have a bunch of text and you want to find repeated words that's a classic example you have

174
00:11:13.110 --> 00:11:20.260
a book somehow certain words are repeated one after another like once upon a time time.

175
00:11:20.550 --> 00:11:22.950
Alice was a girl in Wonderland wonderland.

176
00:11:23.090 --> 00:11:28.950
Not how the book begins but if we wanted to reduce those duplicates or remove them without regular expressions

177
00:11:29.060 --> 00:11:30.840
you would have to iterate over.

178
00:11:30.900 --> 00:11:35.110
I don't even know iterate over every character or split things on spaces.

179
00:11:35.120 --> 00:11:36.850
Maybe it'd be easiest but on spaces.

180
00:11:36.870 --> 00:11:42.120
And then iterate through the list that you get and check when one thing is you know equal to the one

181
00:11:42.120 --> 00:11:43.620
behind it or ahead of it.

182
00:11:43.620 --> 00:11:48.200
And then if that's the case you remove it or you replace it with an empty string with the regular expression.

183
00:11:48.200 --> 00:11:54.660
We can do it with a single line also formatting text and output so we can use it to help if we have

184
00:11:54.660 --> 00:11:55.310
an input string.

185
00:11:55.310 --> 00:11:56.500
It's not just for searching.

186
00:11:56.610 --> 00:12:02.020
We can also format things basically replace information based off of a pattern.

187
00:12:02.280 --> 00:12:07.920
So if we had a phone number and we wanted to make all of them match the same format with spaces and

188
00:12:07.920 --> 00:12:12.270
then a hyphen between the last little bit and parentheses and a plus sign at the beginning we could

189
00:12:12.270 --> 00:12:14.040
do that with a regular expression.

190
00:12:14.130 --> 00:12:19.900
And one final example that I thought about as I was making these slides has to do with syntax highlighting.

191
00:12:20.160 --> 00:12:24.360
So this is the actual syntax highlighting in slide dot com.

192
00:12:24.570 --> 00:12:27.400
I didn't have to make these colors myself.

193
00:12:27.600 --> 00:12:29.050
It knew it automatically.

194
00:12:29.070 --> 00:12:35.660
I told it's Python and it took care of the rest according to rules and it presumably uses regular expressions.

195
00:12:35.660 --> 00:12:39.860
I don't have a way of knowing that for sure but that's how most syntax highlighting is done.

196
00:12:40.050 --> 00:12:44.680
There's rules you know if anything is between two quotes make it one color.

197
00:12:44.850 --> 00:12:48.970
If anything is a keyword like Def or if I make it another color.

198
00:12:49.180 --> 00:12:55.020
Any user defined names like variables or methods or function names make them another color.

199
00:12:55.020 --> 00:12:56.940
So they could easily be done with regular x.

200
00:12:56.970 --> 00:13:01.860
Well easily it's a stretch but it could be done with regular expressions and it's much easier than it

201
00:13:01.860 --> 00:13:02.820
could be without them.

202
00:13:02.850 --> 00:13:08.940
Let's put it that way anyway so that's not so brief intro to regular expressions or rejects.

203
00:13:08.940 --> 00:13:10.710
We're going to dive into actually typing them.

204
00:13:10.740 --> 00:13:15.870
Learning a lot of the rules and then learning how to use them in Python and the next couple of videos

205
00:13:15.870 --> 00:13:22.050
in this section but to start we're going to just talk about regular expressions outside of python and

206
00:13:22.050 --> 00:13:23.840
that will start in the next video.

207
00:13:24.110 --> 00:13:24.480
OK.

208
00:13:24.510 --> 00:13:27.340
Thanks for bearing with me in my sick voice.

209
00:13:27.350 --> 00:13:28.170
See in the next video.
