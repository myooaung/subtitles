WEBVTT
1
00:00:00.270 --> 00:00:00.990
All right.

2
00:00:00.990 --> 00:00:03.040
So that's it for strings in this section.

3
00:00:03.060 --> 00:00:07.260
We still have a lot to talk about with strings but we'll get to that later in the course.

4
00:00:07.260 --> 00:00:12.950
There's one last video here has to do with converting data types until we move on to our little project

5
00:00:12.960 --> 00:00:14.070
at the end of the section.

6
00:00:14.220 --> 00:00:19.770
So it's not going to be anything amazing or particularly impressive but these projects will grow in

7
00:00:19.860 --> 00:00:25.270
scale complexity and hopefully impressiveness coolness out and I don't know.

8
00:00:25.320 --> 00:00:27.510
Hopefully they get a little more exciting as we go.

9
00:00:27.600 --> 00:00:31.260
But right now we just don't have enough tools to actually build anything.

10
00:00:31.320 --> 00:00:32.600
We really just have variables.

11
00:00:32.640 --> 00:00:37.720
And then I'm going to show you in the next video how to get user input how to ask or prompt for or data.

12
00:00:37.890 --> 00:00:40.700
But for now we need to talk about converting data types.

13
00:00:40.770 --> 00:00:41.870
So this will be quick.

14
00:00:41.970 --> 00:00:46.660
The idea you know we've talked about different data types integers and floats.

15
00:00:46.860 --> 00:00:51.740
Take an integer and turn it into a float How do take a float and turn it into an integer.

16
00:00:51.900 --> 00:00:56.450
Or let's say you have a string of the number 8 inside double quotes.

17
00:00:56.460 --> 00:01:00.330
What if I want to turn that into the number 8 or vice versa.

18
00:01:00.480 --> 00:01:05.490
Fortunately it's pretty straightforward and we've actually seen data type conversion already happen

19
00:01:05.820 --> 00:01:11.960
when we talked about interpellation with strings or formatting where we had a number like that guess

20
00:01:11.970 --> 00:01:16.110
example which I think was also the number 8 which was an int.

21
00:01:16.320 --> 00:01:22.000
But when we put it inside the string it was converted into the string version of 8.

22
00:01:22.380 --> 00:01:27.150
So we've already seen it happen kind of behind the scenes but we can do it explicitly by saying hey

23
00:01:27.180 --> 00:01:31.460
make this thing a string or make this a float and it looks like this.

24
00:01:31.500 --> 00:01:37.230
You use the name of the builtin type as a function which you know this is sort of some language that

25
00:01:37.950 --> 00:01:40.250
needs to be here because it needs to be accurate.

26
00:01:40.560 --> 00:01:45.250
But also we haven't talked about things like functions yet but it looks like this.

27
00:01:45.420 --> 00:01:51.330
Here's an example of a decimal twelve point five six blah blah blah save to a variable called decimal.

28
00:01:51.330 --> 00:01:55.170
Now we can use this int function and in parentheses.

29
00:01:55.230 --> 00:01:59.060
So with functions we use parentheses just like we've done with print.

30
00:01:59.160 --> 00:02:00.670
We pass in a variable.

31
00:02:00.720 --> 00:02:06.410
In this case this decimal and then it converts that to an int and the way that it does that is just

32
00:02:06.410 --> 00:02:12.210
by chopping off everything after the decimal just giving us 12 so it doesn't round to be clear.

33
00:02:12.380 --> 00:02:13.370
That can be confusing.

34
00:02:13.370 --> 00:02:17.630
It just chops off a decimal and if we look at integer it would be equal to 12.

35
00:02:18.440 --> 00:02:22.770
So we can also do things like this even though we haven't talked about lists yet.

36
00:02:22.910 --> 00:02:24.360
I just wanted to put this here.

37
00:02:24.440 --> 00:02:28.080
Do you have a list of three numbers one two three.

38
00:02:28.100 --> 00:02:36.440
Turn it into a string using s t r the function and it puts the whole thing in quotes and it is a string

39
00:02:36.440 --> 00:02:37.830
at that point.

40
00:02:37.850 --> 00:02:40.240
OK so let's go to my terminal.

41
00:02:40.370 --> 00:02:47.370
Say I have a number and we'll just call it Nahm and set it equal to 12.

42
00:02:47.550 --> 00:02:48.570
Now let's do.

43
00:02:48.570 --> 00:02:51.650
Type of Naam which should be.

44
00:02:51.870 --> 00:03:00.290
And let's now say Gnome equals float of no.

45
00:03:00.750 --> 00:03:05.720
So let's look at what type Gnome is after that.

46
00:03:05.730 --> 00:03:07.820
And you can see it's now been turned into a float.

47
00:03:07.830 --> 00:03:11.760
And in fact if we look at Gnome itself it now has point zero.

48
00:03:12.480 --> 00:03:18.540
So I don't think you would ever really need to do this but as an example when we do things like one

49
00:03:18.600 --> 00:03:21.270
divided by three these are both integers.

50
00:03:21.270 --> 00:03:26.140
They are turned into floats for the division to happen and that happens implicitly.

51
00:03:26.210 --> 00:03:31.530
But really all that matters here is that we see this float which is a function.

52
00:03:31.530 --> 00:03:37.470
In this case with the parentheses we also could do the same thing like let's do it of ninety nine point

53
00:03:37.470 --> 00:03:43.350
four four four four or five or three and cuts off everything afterwards.

54
00:03:43.350 --> 00:03:47.890
And just to prove to you that ninety nine point nine nine it just gives us 99.

55
00:03:47.890 --> 00:03:49.280
So it does not round.

56
00:03:49.650 --> 00:03:53.380
So the last thing I'll show you is string which is as TR.

57
00:03:53.670 --> 00:03:59.200
However I discovered this just a couple of minutes ago as a first try to record the video.

58
00:03:59.610 --> 00:04:02.300
I don't know if you recall it much earlier.

59
00:04:02.520 --> 00:04:08.460
I was using a variable called TR which is actually not a good idea on my part.

60
00:04:08.460 --> 00:04:10.370
Here we go as TR.

61
00:04:10.530 --> 00:04:12.160
It works just fine.

62
00:04:12.270 --> 00:04:19.020
But this is actually a reserved thing in Python because I should be able to do string of eight and get

63
00:04:20.190 --> 00:04:21.720
eight like this.

64
00:04:21.720 --> 00:04:28.600
But what I actually did is I overwrote the built in string as TR function in Python.

65
00:04:28.830 --> 00:04:30.380
Up here I already lost it.

66
00:04:30.390 --> 00:04:35.140
But you saw it hopefully as TR where I had defined as TR equals something.

67
00:04:35.160 --> 00:04:39.470
So it basically overwrote it and erased the initial SDR.

68
00:04:39.510 --> 00:04:41.650
So it's something I've never done before.

69
00:04:41.820 --> 00:04:45.450
So we can just close out and run Python 3 again.

70
00:04:45.660 --> 00:04:51.810
And now I should be able to do as tr of 8 and I get 8 in quote.

71
00:04:51.810 --> 00:04:58.970
Anyway just another teachable moment I guess it is just a pretty way to say a mistake.

72
00:04:59.190 --> 00:05:00.960
But I do think there is some value in it.

73
00:05:00.990 --> 00:05:13.050
So if you tried to you could do something like this you know it equals I am a number like this.

74
00:05:13.290 --> 00:05:15.670
And now it is just a variable.

75
00:05:15.690 --> 00:05:21.520
So if I try and do end of nine point four I get an error.

76
00:05:21.570 --> 00:05:23.790
So I do the same thing with as TR earlier.

77
00:05:24.000 --> 00:05:32.400
So moral of the story lesson here is don't make variables named as TR or ints or prints or anything

78
00:05:32.550 --> 00:05:37.150
that is a thing in Python which you'll learn more about what those are as we go on.

79
00:05:37.170 --> 00:05:40.560
Anyway that's all there is to explicitly converting things.

80
00:05:40.560 --> 00:05:46.350
Remember that when we use f strings things are implicitly under the behind the scenes converted to strings

81
00:05:46.680 --> 00:05:48.680
or if we can do it explicitly ourselves.
