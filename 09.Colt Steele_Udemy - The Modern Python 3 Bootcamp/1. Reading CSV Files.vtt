WEBVTT
0
1
00:00:00.270 --> 00:00:06.000
A welcome back the next few videos are about CXXVI which is a popular data format.
1

2
00:00:06.030 --> 00:00:08.880
It stands for comma separated values.
2

3
00:00:08.880 --> 00:00:15.000
It's just a way of taking data usually tabular data and just sticking it in a file and storing it so
3

4
00:00:15.000 --> 00:00:17.230
that we can then do something with it later.
4

5
00:00:17.250 --> 00:00:23.070
A lot of the data sets that you might work with whether in Python or another language are probably are
5

6
00:00:23.070 --> 00:00:25.020
often CXXVI datasets.
6

7
00:00:25.110 --> 00:00:26.980
So things like crime records.
7

8
00:00:27.020 --> 00:00:31.740
I'm going to show you one of those in just a moment from county governments or state governments things
8

9
00:00:31.740 --> 00:00:37.580
like environmental data credit card transactions from your bank you can often download in cxxviii files.
9

10
00:00:37.590 --> 00:00:39.770
So it's a common format that we can work with.
10

11
00:00:39.780 --> 00:00:42.170
So we're going to talk about how we do that in Python.
11

12
00:00:42.450 --> 00:00:44.900
First let's just talk about CSB itself.
12

13
00:00:45.240 --> 00:00:48.350
Like I said the common file format for tabular data.
13

14
00:00:48.470 --> 00:00:55.430
So CSP does not really suit all sorts of data that needs to be homogenous data that follows a pattern.
14

15
00:00:55.590 --> 00:00:57.510
So let me show you an example file.
15

16
00:00:57.510 --> 00:01:02.200
Here is a really simple CSP file called fighters CXVII.
16

17
00:01:02.400 --> 00:01:09.480
It contains information about fighters from the streetfighter games and the first row in any CSP file
17

18
00:01:09.600 --> 00:01:11.080
contains the headers.
18

19
00:01:11.330 --> 00:01:14.350
The headers basically set up what the data is.
19

20
00:01:14.430 --> 00:01:19.440
So you can see first of all we've got a bunch of commas separating values but the first row has a name
20

21
00:01:20.050 --> 00:01:22.000
comma so that tells us all right.
21

22
00:01:22.020 --> 00:01:25.560
The first thing before every comma on each row is a name.
22

23
00:01:25.770 --> 00:01:31.770
So Ken or Blanca then the next thing is country Japan or USA.
23

24
00:01:31.770 --> 00:01:35.940
And then lastly we have height and centimeters like 165 or 2:14.
24

25
00:01:35.940 --> 00:01:37.760
So a very simple data set.
25

26
00:01:37.980 --> 00:01:40.530
But take a look at something like this.
26

27
00:01:40.560 --> 00:01:42.900
This is from the Sacramento.
27

28
00:01:43.050 --> 00:01:49.770
I don't know if it's the state or the county of Sacramento or the city of Sacramento but some government
28

29
00:01:49.950 --> 00:01:50.810
in Sacramento.
29

30
00:01:50.910 --> 00:01:54.130
This is their crime records for the year 2006.
30

31
00:01:54.300 --> 00:02:01.380
I downloaded it off their Web site and we can see basically it contains a ton of crime records and it's
31

32
00:02:01.440 --> 00:02:05.220
I don't know how many thousands of lines it would take me forever to scroll.
32

33
00:02:05.790 --> 00:02:06.100
OK.
33

34
00:02:06.120 --> 00:02:06.550
Yeah.
34

35
00:02:06.720 --> 00:02:10.440
Almost 8000 mind each line contains things.
35

36
00:02:10.440 --> 00:02:11.690
Here are the headers up top.
36

37
00:02:11.790 --> 00:02:19.080
Like the crime date time the address that beat the District Crime description so you can actually see
37

38
00:02:19.110 --> 00:02:28.010
on basically New Year's Eve as soon as it hit midnight there is 1 2 3 4 5 6 7.
38

39
00:02:28.170 --> 00:02:29.030
Wow.
39

40
00:02:29.460 --> 00:02:31.710
Geez I didn't actually take the time to go through this.
40

41
00:02:31.710 --> 00:02:36.780
That was a lot of crimes on midnight on New Year's Eve.
41

42
00:02:37.270 --> 00:02:38.490
Oh OK.
42

43
00:02:38.520 --> 00:02:45.360
Well we can see things like the time but we can also see you know what is there fictitious trying to
43

44
00:02:45.360 --> 00:02:50.700
pass a fictitious check or burglary of a vehicle.
44

45
00:02:50.910 --> 00:02:52.800
So you could do things with these datasets of course.
45

46
00:02:52.800 --> 00:02:55.010
That's kind of the point of making them public.
46

47
00:02:55.290 --> 00:02:59.790
And the first step of doing anything with the data set in Python is importing it in.
47

48
00:02:59.850 --> 00:03:05.910
So this video was going to focus on reading files like this in and we can just read a CACP file like
48

49
00:03:06.030 --> 00:03:09.470
any other file except it's not really a good idea.
49

50
00:03:09.810 --> 00:03:16.320
There's actually a built in CAC module that helps us read C S V files in particular a lot easier.
50

51
00:03:16.320 --> 00:03:22.890
But you could do something like this with open fighters step C S V as file.
51

52
00:03:23.040 --> 00:03:24.450
Anything that we've done already.
52

53
00:03:24.590 --> 00:03:28.100
If I had over three I just paste that in.
53

54
00:03:28.200 --> 00:03:31.020
I have the fighters that every file in the same directory.
54

55
00:03:31.990 --> 00:03:35.390
If you see what we get here it gives just one giant string.
55

56
00:03:35.750 --> 00:03:38.000
So it's up to us to actually parse it.
56

57
00:03:38.270 --> 00:03:40.140
And what would we want it to look like.
57

58
00:03:40.170 --> 00:03:46.880
Do we want each row to be a list and then put the entire thing in a giant list.
58

59
00:03:46.910 --> 00:03:48.350
We want dictionaries.
59

60
00:03:48.350 --> 00:03:52.750
So it's actually a good exercise to go through and try and parse this what would you do.
60

61
00:03:52.940 --> 00:03:54.800
You would probably hear what I would do.
61

62
00:03:54.920 --> 00:03:57.260
I would split on the newline characters.
62

63
00:03:57.590 --> 00:04:03.590
Each one of those gives us a list of give us a list of a bunch of rows and then within each row we split
63

64
00:04:03.590 --> 00:04:07.000
on the common characters and that would get us most of the way there.
64

65
00:04:07.250 --> 00:04:12.620
But anyway we don't have to worry about that because we can use the built in cxxviii module which will
65

66
00:04:12.620 --> 00:04:18.060
handle this and parse it all for us assuming our data conforms to the CSP standards.
66

67
00:04:18.200 --> 00:04:20.410
So you don't don't do it that way.
67

68
00:04:20.600 --> 00:04:23.390
What you want to use instead is the CSP module.
68

69
00:04:23.510 --> 00:04:28.970
And there's actually two different ways of reading in CXXVI and the first thing I'll show you is called
69

70
00:04:29.060 --> 00:04:29.740
reader.
70

71
00:04:29.930 --> 00:04:35.870
So when you use the conventional reader it will basically give you each row as a list.
71

72
00:04:35.870 --> 00:04:39.200
So that allows you to iterate over rows of the C S V.
72

73
00:04:39.350 --> 00:04:41.890
Each row is a separate list.
73

74
00:04:42.020 --> 00:04:49.040
Then there's dict reader and it's kind of like Reader reads in the data except instead of each row being
74

75
00:04:49.100 --> 00:04:55.220
a list the rows are what's known as ordered dicts. Dict with a T there.
75

76
00:04:55.580 --> 00:04:56.850
I don't know if that's very clear.
76

77
00:04:56.900 --> 00:04:58.940
We'll go into detail into what that actually is.
77

78
00:04:58.950 --> 00:05:02.880
And once we get there just a bit but it's just different in that almost.
78

79
00:05:02.990 --> 00:05:07.660
Think of it as a dictionary with order so that it remembers what order things were in.
79

80
00:05:07.880 --> 00:05:09.560
Unlike a regular dictionary.
80

81
00:05:09.650 --> 00:05:10.740
So two different ways.
81

82
00:05:10.810 --> 00:05:12.350
I want to show you both.
82

83
00:05:12.350 --> 00:05:15.420
Let's start by focusing on the reader example.
83

84
00:05:15.530 --> 00:05:21.980
So I'm just going to copy this actually and I have a file I've already made called Read P Y and I have
84

85
00:05:21.980 --> 00:05:27.730
this example which I said was the bad way of doing it just the traditional file got read.
85

86
00:05:27.740 --> 00:05:31.680
Now I'm going to paste in using reader.
86

87
00:05:32.170 --> 00:05:37.500
OK so if we look at what we have to do we have to import and see a C module and just import the part
87

88
00:05:37.500 --> 00:05:40.710
we need which is Reader this part's all the same.
88

89
00:05:41.060 --> 00:05:47.360
Open the file with open as file then this is the part where we actually call reader and we pass in the
89

90
00:05:47.360 --> 00:05:51.060
file that we've opened and what it gives back to us.
90

91
00:05:51.230 --> 00:05:52.320
If we look at it.
91

92
00:05:52.460 --> 00:05:58.760
If I just print CXXVI reader and we look at what it gives us back it's quite out of here and run Python
92

93
00:05:59.140 --> 00:06:00.000
read.
93

94
00:06:00.370 --> 00:06:04.660
It's this C S V reader object when we iterate over the object.
94

95
00:06:04.670 --> 00:06:12.710
However it gives us a nice iterator and each row in the CSP file is represented as a list.
95

96
00:06:12.710 --> 00:06:17.910
So if I print each row now by iterating over every reader save the file.
96

97
00:06:18.060 --> 00:06:26.640
But if we get there we go one row one must it's important to note the first row of the headers is still
97

98
00:06:26.640 --> 00:06:27.480
included.
98

99
00:06:27.720 --> 00:06:31.430
So it doesn't actually you know parse the headers or do anything with them.
99

100
00:06:31.530 --> 00:06:36.420
It just puts them as the first row just like any other roads it splits on the commas and then puts them
100

101
00:06:36.420 --> 00:06:40.870
all in a row so we can work with this data in this form.
101

102
00:06:40.920 --> 00:06:47.580
For example let's say I wanted to print out something really simple like you know Ken is from USA so
102

103
00:06:47.580 --> 00:06:50.490
fighter name is from fighter country.
103

104
00:06:50.640 --> 00:06:58.140
So we could do instead of row we could say for fighter and CSC reader and then the thing when you're
104

105
00:06:58.140 --> 00:07:03.930
working with a traditional reader is that you have to you have to access data based off of an index.
105

106
00:07:04.020 --> 00:07:12.050
So the name is going to be index 0 in country is index 1 that is a bit of a downside is that you have
106

107
00:07:12.050 --> 00:07:19.310
to use numbers like this fighter zero instead of being able to say fighter name fighters zero is from
107

108
00:07:20.720 --> 00:07:24.070
fighter 1 like that.
108

109
00:07:24.200 --> 00:07:28.120
And if we run that we don't need to print the row and we execute it.
109

110
00:07:28.130 --> 00:07:33.660
This is what we get looks looks good except we still get this name ESROM country.
110

111
00:07:33.950 --> 00:07:36.710
We don't want that most likely you don't want those headers.
111

112
00:07:36.740 --> 00:07:43.130
So just a quick note what this actually is here CAC reader it's an iterator just like in the generator
112

113
00:07:43.130 --> 00:07:43.720
section.
113

114
00:07:43.740 --> 00:07:45.140
And we talked about it.
114

115
00:07:45.160 --> 00:07:47.890
You go over an iterator once you kind of exhaust it.
115

116
00:07:47.900 --> 00:07:53.780
So if I went over it once here if I tried to do another like if I just did the exact same thing again
116

117
00:07:54.320 --> 00:07:59.840
here for fighter and CSFB reader we can do the exact same thing.
117

118
00:07:59.990 --> 00:08:06.760
If I try and do that we actually only get one copy because we've exhausted the iterator we're at the
118

119
00:08:06.760 --> 00:08:07.310
end.
119

120
00:08:07.390 --> 00:08:13.420
There are no there is no data in the iterator to keep moving forward on it can't call next anymore.
120

121
00:08:14.050 --> 00:08:17.190
But we can take advantage of that if we don't want the headers.
121

122
00:08:17.370 --> 00:08:28.090
You can just call not vext next CSFB reader that moves us forward once and then it starts from the row
122

123
00:08:28.150 --> 00:08:29.170
after the headers.
123

124
00:08:29.170 --> 00:08:33.680
So if I save and now I run this we don't get the headers at the beginning.
124

125
00:08:33.850 --> 00:08:38.380
But if you did want the headers and you wanted to work with data and you don't want to just print it
125

126
00:08:38.380 --> 00:08:43.420
out or you go through at one time you could turn it into a list very easily.
126

127
00:08:43.420 --> 00:08:47.530
So let me just duplicate this.
127

128
00:08:47.530 --> 00:08:49.210
Keep that example.
128

129
00:08:49.210 --> 00:08:56.930
You could easily just do let's do list see every reader let's call it data equals list see every reader.
129

130
00:08:57.010 --> 00:09:01.720
And now we could print data and now it's in a list that you could work with.
130

131
00:09:01.720 --> 00:09:04.400
It really depends on what you want to do with the data.
131

132
00:09:04.420 --> 00:09:05.260
And here we go.
132

133
00:09:05.290 --> 00:09:07.380
So we have a list of lists.
133

134
00:09:07.590 --> 00:09:11.490
So just remember this does not give you a list by default.
134

135
00:09:11.500 --> 00:09:14.400
It's an iterator so we can iterate over it.
135

136
00:09:14.470 --> 00:09:16.580
We can loop over it and do something with the data.
136

137
00:09:16.690 --> 00:09:21.770
But if you want to have access to the data after that you want to save it stored all in memory at once.
137

138
00:09:21.880 --> 00:09:23.570
Then you can turn it into a list.
138

139
00:09:23.800 --> 00:09:25.190
So just depends on what you want to do.
139

140
00:09:25.330 --> 00:09:29.850
But this video is really more about showing you the two ways of importing and reading the data.
140

141
00:09:29.950 --> 00:09:32.370
So that's one using reader.
141

142
00:09:32.470 --> 00:09:37.920
The next I'll show you is using dict reader so it is going to copy this code over.
142

143
00:09:37.960 --> 00:09:43.240
Remember the difference aside from the syntax of importing dict reader and calling dict reader instead
143

144
00:09:43.240 --> 00:09:46.110
of reader everything else looks the same.
144

145
00:09:46.150 --> 00:09:53.230
The difference is in how each row is represented here a row was a list over here a row is an ordered
145

146
00:09:53.290 --> 00:09:57.130
dict and ordered dict is a dictionary that has an order to it.
146

147
00:09:57.130 --> 00:09:59.650
So it's a special collection in Python.
147

148
00:09:59.650 --> 00:10:01.030
Let me just show you what it looks like.
148

149
00:10:01.030 --> 00:10:02.810
Copy this.
149

150
00:10:02.810 --> 00:10:04.630
Paste it in here.
150

151
00:10:04.620 --> 00:10:07.980
Everything's the same except for importing dict reader from.
151

152
00:10:08.200 --> 00:10:10.670
And we can just print each row now.
152

153
00:10:11.110 --> 00:10:13.000
It returns with an iterator again.
153

154
00:10:13.000 --> 00:10:15.130
Let me clear so we can make space.
154

155
00:10:15.250 --> 00:10:18.880
If we run it again here's what we get.
155

156
00:10:18.880 --> 00:10:21.930
Each row is an ordered dict object.
156

157
00:10:22.210 --> 00:10:24.360
And like I said it's just like a dictionary.
157

158
00:10:24.460 --> 00:10:30.430
Or you can access data using a key and the magical part is that the keys are set up automatically to
158

159
00:10:30.430 --> 00:10:32.020
be the headers.
159

160
00:10:32.020 --> 00:10:34.480
So we could use name and get canned.
160

161
00:10:34.570 --> 00:10:37.120
We could use country and get India.
161

162
00:10:37.120 --> 00:10:38.510
So let me show you that here.
162

163
00:10:38.590 --> 00:10:43.050
Let's go back and this is an iterator again so we can only go over it once.
163

164
00:10:43.220 --> 00:10:48.870
And thus we cast it to a list or some other format in memory and actually have it all in memory at once.
164

165
00:10:49.060 --> 00:10:54.920
But for now let's just instead of printing row let's just print row name.
165

166
00:10:55.060 --> 00:10:57.000
I think it was capitalized was it.
166

167
00:10:57.190 --> 00:10:57.510
Yes.
167

168
00:10:57.520 --> 00:11:01.000
Capital and name if I do this.
168

169
00:11:01.000 --> 00:11:02.010
There we go.
169

170
00:11:02.050 --> 00:11:07.000
So we don't have to worry about the headers being the first row anymore because each row has the headers
170

171
00:11:07.090 --> 00:11:14.170
interspersed as the keys and we can tell it's an ordered dictate because name is always coming first
171

172
00:11:14.170 --> 00:11:17.180
before country before height they're in the same order.
172

173
00:11:17.500 --> 00:11:18.370
OK.
173

174
00:11:18.940 --> 00:11:22.300
So again both examples here using a reader.
174

175
00:11:22.570 --> 00:11:27.330
This is going to give you an iterator and each row is going to be a list.
175

176
00:11:27.400 --> 00:11:33.340
This dict reader gives you an iterator and when we iterate over it or through it each row is an ordered
176

177
00:11:33.370 --> 00:11:35.760
dict which is a special Python collection.
177

178
00:11:35.770 --> 00:11:39.330
We haven't really seen before but you can treat it as just a dictionary.
178

179
00:11:39.330 --> 00:11:41.520
You access data using keys.
179

180
00:11:41.530 --> 00:11:47.080
There's one other thing I forgot to mention which is we can actually use USV files that aren't technically
180

181
00:11:47.080 --> 00:11:52.870
separated by commas as long as they're separated by the same character that character is known as the
181

182
00:11:52.870 --> 00:11:55.430
delimiter and it's supposed to be a comma.
182

183
00:11:55.450 --> 00:11:59.580
But you may have a file that's delimited using a pipe like this.
183

184
00:11:59.650 --> 00:12:05.380
And if that's the case all you have to do is specify using a keyword argument just like this.
184

185
00:12:05.380 --> 00:12:06.850
So if I copy it over here.
185

186
00:12:06.900 --> 00:12:14.950
I actually already have fighters to CSP that I've made and if I just select all of these and replace
186

187
00:12:14.950 --> 00:12:21.070
it with a pipe instead or anything as a star character and you do want to be careful because if you
187

188
00:12:21.070 --> 00:12:26.780
use something like you know a number that exists then you're going to run into problems.
188

189
00:12:26.920 --> 00:12:31.230
If your number exists anywhere else in your data you want to use something that is unique.
189

190
00:12:31.330 --> 00:12:34.930
But if I do this now then I have this other file delimiter.
190

191
00:12:34.930 --> 00:12:38.760
We can either do as a reader or as a direct reader it doesn't matter.
191

192
00:12:38.860 --> 00:12:40.450
But if I just print the rows now.
192

193
00:12:40.630 --> 00:12:45.830
Oh and I make sure I change this to the right file name fighters to CSB.
193

194
00:12:45.970 --> 00:12:47.080
This file here.
194

195
00:12:47.200 --> 00:12:49.820
Run it now.
195

196
00:12:49.830 --> 00:12:50.510
There we go.
196

197
00:12:50.650 --> 00:12:52.410
Successfully parses all the data.
197

198
00:12:52.870 --> 00:12:56.790
And you know just to show you we could do a dollar sign if we wanted to.
198

199
00:12:57.040 --> 00:13:02.520
Not exactly the best idea but if we replaced all of these with a dollar sign instead in front of the
199

200
00:13:02.520 --> 00:13:04.950
code it still works OK.
200

201
00:13:05.010 --> 00:13:08.060
So that's that you can work with 0 delimiters if you have to.
