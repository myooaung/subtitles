1
00:00:00,180 --> 00:00:01,350
Hey welcome back.

2
00:00:01,380 --> 00:00:05,470
In this video I'm going to introduce something called compilation flags.

3
00:00:05,640 --> 00:00:11,610
These are little preferences that we can set when we're compiling a regular expression that impact how

4
00:00:11,610 --> 00:00:12,450
it works.

5
00:00:12,810 --> 00:00:13,770
And there's a couple of them.

6
00:00:13,770 --> 00:00:19,530
The docs if you scroll down to the compilation flags section you can read more about them.

7
00:00:19,530 --> 00:00:23,530
They let you modify some aspects of how regular expressions work.

8
00:00:23,610 --> 00:00:28,400
They all have different names and the ones that I'm going to show you there are two in particular.

9
00:00:28,400 --> 00:00:33,170
I'm going to focus on the Ignore case and verbose.

10
00:00:33,240 --> 00:00:38,270
So these are two flags you can add in that will change how things work.

11
00:00:38,310 --> 00:00:40,860
Ignore case I think is most self-explanatory.

12
00:00:40,890 --> 00:00:45,190
It will tell a regular expression to ignore the case of letters.

13
00:00:45,300 --> 00:00:51,810
So instead of having to say match upper case a to uppercase Z and the lower case a lower case the we

14
00:00:51,810 --> 00:00:54,650
can just specify it is the ignore case.

15
00:00:54,690 --> 00:01:00,290
Often if we're working with user input we don't really care about capitalisation so that's pretty commonly

16
00:01:00,300 --> 00:01:00,880
used.

17
00:01:00,960 --> 00:01:02,830
And the second one is called verbose.

18
00:01:03,120 --> 00:01:06,220
And let me just start by illustrating how that works.

19
00:01:06,240 --> 00:01:10,070
I have a regular expression here that this is for emails.

20
00:01:10,260 --> 00:01:12,320
It's slightly different from the one we've seen.

21
00:01:12,540 --> 00:01:14,000
I found this online.

22
00:01:14,010 --> 00:01:19,710
Somebody suggested that this is slightly better or more accurate so we can work through it really quickly

23
00:01:20,170 --> 00:01:21,930
as to start with.

24
00:01:21,960 --> 00:01:23,900
It is the spirit of mine.

25
00:01:23,940 --> 00:01:31,980
So a digit a letter underscore a slash a dot and a dash more than one of them as a plus sign.

26
00:01:31,980 --> 00:01:37,580
That's the first capture group then a single sign and then ANY digit.

27
00:01:37,690 --> 00:01:40,240
I'm sure why this one is done that way.

28
00:01:40,390 --> 00:01:42,600
I think it could also just do zero to nine.

29
00:01:42,600 --> 00:01:51,450
It's easier for me to read that 8 as the dash plus So more than one of those or one or more and then

30
00:01:51,510 --> 00:01:53,000
a period dot.

31
00:01:53,310 --> 00:01:59,680
And then this is the top like camarade org from 2 to 6 letters and it has to end with that.

32
00:01:59,700 --> 00:02:01,890
OK so that's not too bad.

33
00:02:01,890 --> 00:02:04,320
Hopefully we've seen similar things.

34
00:02:04,470 --> 00:02:06,510
The parents are in here just for capturer groups.

35
00:02:06,510 --> 00:02:08,620
We don't really need them.

36
00:02:08,970 --> 00:02:15,720
But what I want to focus on first of all is that this is kind of a long line and it can be intimidating

37
00:02:15,720 --> 00:02:19,020
or difficult to understand what's happening especially if you didn't write this.

38
00:02:19,020 --> 00:02:22,810
If you're working in a code base and there some large regular expressions.

39
00:02:22,890 --> 00:02:24,360
This is actually pretty short.

40
00:02:24,360 --> 00:02:29,460
You know there are some very large ones that I've seen in different applications and if you're not the

41
00:02:29,460 --> 00:02:32,270
person who wrote it or worked on it it can be very intimidating.

42
00:02:32,370 --> 00:02:38,580
What we can do to help out a bit is use the verbose flag which allows us to put this on multiple lines

43
00:02:38,610 --> 00:02:42,940
and add comments so it doesn't impact how it actually works how it matches things.

44
00:02:42,960 --> 00:02:47,540
It's exactly the same but it allows us to expand things onto different lines.

45
00:02:47,610 --> 00:02:51,480
And if we look at the documentation I think there's an example here we go.

46
00:02:51,750 --> 00:03:00,060
So this is using for Boese the verbose flag you pass it in at the end and it allows us to break our

47
00:03:00,060 --> 00:03:06,280
code or reject pattern up and comment on it and it will ignore the comments.

48
00:03:06,410 --> 00:03:11,520
C's explain a little bit whitespace within the regular expression string is ignored except from the

49
00:03:11,520 --> 00:03:17,520
White space in a character class or preceded by an undiscovered backslash so it will ignore whitespace.

50
00:03:17,730 --> 00:03:24,470
But if you if you need a space or you need that whitespace as part of the pattern you can use a backslash.

51
00:03:24,760 --> 00:03:30,570
OK so I'm going to convert this one and I'll just leave it up here and do it.

52
00:03:30,600 --> 00:03:31,380
Another duplicate.

53
00:03:31,380 --> 00:03:39,390
I'll call this one pattern equals precompile and I'm going to start off we need our raw string but we're

54
00:03:39,390 --> 00:03:45,530
going to do a triple double quote so we can do it on multiple lines comma.

55
00:03:45,580 --> 00:03:47,480
We need to pass in the flag.

56
00:03:47,660 --> 00:03:48,090
Verbose.

57
00:03:48,090 --> 00:03:50,800
If I don't have that on there it's not going to work.

58
00:03:51,030 --> 00:03:56,730
So you can think of it as you know it's one line but we're just breaking it up and then in here we add

59
00:03:56,730 --> 00:03:58,590
in the different components.

60
00:03:58,590 --> 00:04:00,320
So what I like to just break it up.

61
00:04:00,420 --> 00:04:04,460
So take the first little bit and add a comment.

62
00:04:04,910 --> 00:04:06,670
But let's just put all the pieces in first.

63
00:04:06,670 --> 00:04:11,540
Actually then we have the at sign.

64
00:04:11,620 --> 00:04:15,590
It's kind of up to you how you want to break it up but I'll do it this way.

65
00:04:15,670 --> 00:04:20,360
Each little piece and then we end up with this.

66
00:04:21,400 --> 00:04:24,980
OK so same thing just copy and pasted.

67
00:04:25,030 --> 00:04:31,030
But now you can go in and add a little comment here that says what do you call that at the beginning

68
00:04:31,030 --> 00:04:38,600
of an email like the kitty at gmail dot com the user name the name.

69
00:04:38,740 --> 00:04:39,490
I don't know what to call that.

70
00:04:39,490 --> 00:04:40,560
I'm just going to write.

71
00:04:40,580 --> 00:04:42,680
First part of email.

72
00:04:43,450 --> 00:04:49,150
Then we have a single sign.

73
00:04:49,660 --> 00:04:52,100
Then after that what do we have here.

74
00:04:52,120 --> 00:04:56,230
This is the domain or the email provider.

75
00:04:57,190 --> 00:05:03,420
Then a single dot and then finally we have com or net.

76
00:05:03,520 --> 00:05:09,520
I'll just put that for the top level domain so we're just adding little comments that explain what is

77
00:05:09,520 --> 00:05:11,490
what and when to comment this out.

78
00:05:11,500 --> 00:05:12,950
Get rid of this one.

79
00:05:13,000 --> 00:05:14,640
Let's make sure it works.

80
00:05:14,690 --> 00:05:24,540
So I'm here to do a pattern that lets you search and pass in Thomas.

81
00:05:24,730 --> 00:05:28,590
One two three at yahoo dot com.

82
00:05:28,890 --> 00:05:32,320
Pattern of search of safe that is just call it and match.

83
00:05:32,380 --> 00:05:35,780
Then let's do a print matched up groups.

84
00:05:38,150 --> 00:05:40,490
And let's also do group singular.

85
00:05:40,950 --> 00:05:42,390
Let's see if it works.

86
00:05:42,400 --> 00:05:43,330
Who are you.

87
00:05:43,350 --> 00:05:47,320
It's the same thing I had this problem in the last video I'm sorry.

88
00:05:47,370 --> 00:05:49,020
Hopefully you saw that before me.

89
00:05:49,140 --> 00:05:50,500
I didn't import Ari.

90
00:05:50,870 --> 00:05:51,430
OK.

91
00:05:51,540 --> 00:05:58,080
So it's working it's matching this entire e-mail and then we have three groups which we maybe don't

92
00:05:58,080 --> 00:06:03,270
need to separate Yahoo and come out maybe we just want this first thing but it doesn't really matter.

93
00:06:03,270 --> 00:06:04,440
We're not doing anything with it.

94
00:06:04,440 --> 00:06:06,160
This is more about the flags.

95
00:06:06,690 --> 00:06:12,250
So if we don't have her boss in there and I just do this there's a problem.

96
00:06:12,250 --> 00:06:13,140
It doesn't work.

97
00:06:13,240 --> 00:06:19,270
It's not actually matching anymore because it's as part of the pattern expecting a new line character

98
00:06:19,360 --> 00:06:22,800
and white space and newline characters and it just doesn't work.

99
00:06:22,990 --> 00:06:31,360
But if we add for bosomed there which is our e for most it works also we can do instead of read out

100
00:06:31,360 --> 00:06:35,250
for Bowse where said the letter X instead r e.

101
00:06:35,380 --> 00:06:42,100
X it's kind of annoying that it's not R E V but X stands for extended I think.

102
00:06:42,140 --> 00:06:45,210
So we can do X and it should still work.

103
00:06:45,400 --> 00:06:46,370
And it does.

104
00:06:46,700 --> 00:06:47,030
Okay.

105
00:06:47,050 --> 00:06:51,150
So lastly let's talk about Ignore case ignore case.

106
00:06:51,350 --> 00:06:54,170
It's nice and useful right now with what we have.

107
00:06:54,220 --> 00:07:01,590
If I did Thomas with capital T and capital S or Yahoo with capital Y and I tried running it.

108
00:07:01,930 --> 00:07:02,740
It doesn't work.

109
00:07:02,770 --> 00:07:07,340
It doesn't match anything anymore because we're only specifying a lower case here.

110
00:07:07,480 --> 00:07:15,460
So I could go in in all these cases and do upper case a to lowercase to uppercase Z or I could tell

111
00:07:15,460 --> 00:07:20,390
it to ignore case and unfortunately I can't just do comma.

112
00:07:20,410 --> 00:07:23,720
Ari does it ignore case which is the name of the flag.

113
00:07:23,830 --> 00:07:27,850
It only wants one argument with the flags.

114
00:07:28,240 --> 00:07:33,160
And so you might think oh we could put them in a tuple together or something it doesn't like that.

115
00:07:33,250 --> 00:07:35,660
If you go to the docs it explains here.

116
00:07:35,720 --> 00:07:41,910
We have to do multiple files can be specified by bitwise OR ing them like this are e.

117
00:07:41,980 --> 00:07:46,470
I type the or symbol R M.

118
00:07:46,810 --> 00:07:52,430
It's kind of bizarre in my opinion but if you come in here let's go back to verbose.

119
00:07:52,450 --> 00:08:01,090
Just to be more verbose and clearer are not verbose or already done ignore case it's not saying one

120
00:08:01,090 --> 00:08:03,990
or the other it's just saying use both these flags.

121
00:08:04,000 --> 00:08:06,120
And that's the syntax we have to use.

122
00:08:06,340 --> 00:08:14,140
Now if we run our exact same code it matches even though we didn't specify uppercase A's and Z is we

123
00:08:14,140 --> 00:08:14,940
only have lower case.

124
00:08:14,950 --> 00:08:24,830
It still works and we can further shorten this by going to R E dot X which is again for extended r e.

125
00:08:24,880 --> 00:08:27,940
I makes more sense for Ignore case.

126
00:08:27,940 --> 00:08:28,800
Tested again.

127
00:08:29,450 --> 00:08:30,550
It still works.

128
00:08:30,830 --> 00:08:31,730
Cool.

129
00:08:31,760 --> 00:08:33,290
So that's pretty much it to flags.

130
00:08:33,290 --> 00:08:38,940
There are other flags but those are the ones that I use that most people use all the time.

131
00:08:38,960 --> 00:08:44,180
You can explore some of the other ones that docs go into detail but ignore case and verbose are the

132
00:08:44,180 --> 00:08:45,020
two most popular.
