WEBVTT
1
00:00:00.270 --> 00:00:00.810
All right.

2
00:00:00.810 --> 00:00:02.940
So we've seen the basics of decorators.

3
00:00:03.030 --> 00:00:08.340
I promised I would show you some examples that would actually be useful rather than just greeting or

4
00:00:08.520 --> 00:00:09.950
upper casing things.

5
00:00:09.960 --> 00:00:15.780
So the first example I'll show you has to do with benchmarking or speed testing or code back in the

6
00:00:15.780 --> 00:00:17.190
generator section.

7
00:00:17.220 --> 00:00:19.440
I don't know if you made it through that section.

8
00:00:19.440 --> 00:00:20.520
First of all.

9
00:00:20.850 --> 00:00:26.280
But if you remember we saw the difference between doing something with a list comprehension like x for

10
00:00:26.280 --> 00:00:34.410
x in range 100 versus doing it with a generator expression where no list is actually created here the

11
00:00:34.410 --> 00:00:36.930
entire list is created and then summed.

12
00:00:36.990 --> 00:00:40.680
Anyway if you have questions about the differences and what a generator expression is.

13
00:00:40.680 --> 00:00:45.120
Go back and watch the generator expression or the entire generator section.

14
00:00:45.270 --> 00:00:52.620
But remember the code that I used I basically imported time and then I was doing something like start

15
00:00:52.620 --> 00:01:00.900
time equals Time.com time and then time that Tim and then I would do the code and then afterwards I

16
00:01:00.900 --> 00:01:01.610
would do.

17
00:01:01.950 --> 00:01:03.040
I don't know.

18
00:01:03.210 --> 00:01:09.240
Total time equals Time.com time minus start time.

19
00:01:09.730 --> 00:01:10.380
OK.

20
00:01:10.740 --> 00:01:16.230
And I did this for every well in this case for two things to compare them and I had to write that code

21
00:01:16.230 --> 00:01:17.220
out twice.

22
00:01:17.220 --> 00:01:21.120
I just run these variables each time it cluttered up my code a lot.

23
00:01:21.150 --> 00:01:24.700
Not to mention the print where I was doing a print statement that said something like.

24
00:01:24.810 --> 00:01:27.730
It took four point two seconds or whatever.

25
00:01:27.810 --> 00:01:34.080
Whatever the print said this is a great use case for a decorator because all I wanted to do is basically

26
00:01:34.080 --> 00:01:41.480
wrap my function call with the speed test code so we could get rid of all of this coming this out or

27
00:01:41.490 --> 00:01:42.690
to beat that to start.

28
00:01:42.690 --> 00:01:46.660
Let's do as the common says define a speed test decorator.

29
00:01:46.920 --> 00:01:54.360
So the first thing we could do is just define speed test and the whole idea is that I should be able

30
00:01:54.360 --> 00:02:02.340
to do something like I don't know def some Nom's And then there put some code but in front of it I should

31
00:02:02.340 --> 00:02:06.000
be able to say I want to speed test on this and then down here I could have another one.

32
00:02:06.000 --> 00:02:08.690
I want a speed test on that for that to work.

33
00:02:08.780 --> 00:02:18.210
I need to define speed test F-in and first thing we should do is define wrapper and the default should

34
00:02:18.210 --> 00:02:24.320
be ARBs and then quires as we saw at the last video two videos ago.

35
00:02:24.840 --> 00:02:27.040
And then we should get time in here.

36
00:02:27.070 --> 00:02:32.760
So we need time but the thing is we only really need this time method on the time module.

37
00:02:32.880 --> 00:02:37.350
So let's do from time import time.

38
00:02:37.760 --> 00:02:45.290
So now I can do something like t one equals time instead of time got time then we're going to run the

39
00:02:45.290 --> 00:02:46.060
code.

40
00:02:46.400 --> 00:02:47.850
So that would be 10 dead.

41
00:02:47.850 --> 00:02:57.270
This would be something like result equals call F-in with with args and choirs.

42
00:02:57.320 --> 00:02:59.920
So we're capturing the start time then we're running the code.

43
00:02:59.930 --> 00:03:01.210
Whatever the function is.

44
00:03:01.520 --> 00:03:10.900
And then after that we're going to capture the time actually prefer start time with those longer and

45
00:03:10.900 --> 00:03:11.510
time.

46
00:03:11.850 --> 00:03:12.640
OK.

47
00:03:13.000 --> 00:03:16.290
And then we'll want to do something like print.

48
00:03:17.260 --> 00:03:24.580
And what we want to print is do an F string and let's just say time elapsed and the calculation is simply

49
00:03:24.610 --> 00:03:28.630
end time minus start time.

50
00:03:28.630 --> 00:03:35.010
And then of course we do need to return the results if you want to do something with it.

51
00:03:35.530 --> 00:03:42.710
And then we return wrapper and we should just add in wraps.

52
00:03:42.720 --> 00:03:49.570
So from phunk tools import wraps if you're not clear on what this is.

53
00:03:49.570 --> 00:03:51.380
Go back and watch the video.

54
00:03:51.430 --> 00:03:55.330
It's kind of boilerplate at this point for any decorator function that we define.

55
00:03:55.570 --> 00:03:56.270
OK.

56
00:03:56.410 --> 00:03:58.360
So looks good.

57
00:03:58.360 --> 00:04:00.440
Let's test it out and am I missing anything.

58
00:04:00.470 --> 00:04:02.950
In all likelihood yes somewhere.

59
00:04:03.040 --> 00:04:10.660
Let's do some numbers and I should just be a really simple function that returns.

60
00:04:11.350 --> 00:04:16.240
Let's do some and use a generator expression.

61
00:04:16.240 --> 00:04:20.890
We don't need anything in there to do x for x in range.

62
00:04:20.950 --> 00:04:25.350
Well some of the first how many however many numbers that is OK.

63
00:04:26.010 --> 00:04:31.600
And this should work except we need to call it print some numbers.

64
00:04:31.600 --> 00:04:33.170
Let's give it a shot.

65
00:04:33.190 --> 00:04:35.780
No what's the problem here.

66
00:04:35.950 --> 00:04:37.420
I wasn't missing a colon.

67
00:04:37.570 --> 00:04:38.740
Typical.

68
00:04:39.010 --> 00:04:41.290
Try that again.

69
00:04:41.290 --> 00:04:42.170
There we go.

70
00:04:42.380 --> 00:04:46.240
So now we get time elapsed Zero Point 1 0 4 blah blah blah.

71
00:04:46.240 --> 00:04:51.910
We could have this round and you know not have such a long string here of numbers and then here's the

72
00:04:51.910 --> 00:04:52.700
return value.

73
00:04:52.720 --> 00:04:55.760
The first was it million digits some together.

74
00:04:55.850 --> 00:04:56.220
Awesome.

75
00:04:56.230 --> 00:05:02.360
So we've created this pretty simple decorator that is really easy for us to use and just throw onto

76
00:05:02.440 --> 00:05:07.930
any Fulker put in front of any function and have that function speed tested.

77
00:05:07.930 --> 00:05:13.510
It's not the most accurate or precise way of benchmarking and we're not you know checking things like

78
00:05:13.600 --> 00:05:14.540
memory usage.

79
00:05:14.560 --> 00:05:20.960
It's purely about time but it's close enough for what I want to show you and to test it out again.

80
00:05:20.980 --> 00:05:26.440
Let's do the same thing except let's do one with a gen in one with a list.

81
00:05:26.950 --> 00:05:29.420
And so in the gentleman will leave it alone.

82
00:05:29.620 --> 00:05:34.720
The last one however we use a list comprehension right here.

83
00:05:34.720 --> 00:05:35.940
Turn it into a list first.

84
00:05:35.950 --> 00:05:45.280
This should be a lot slower and instead of what one million let's do 50 million like that and then let's

85
00:05:45.280 --> 00:05:50.380
print some Nom's Jen and then list afterwards.

86
00:05:50.800 --> 00:05:56.320
The only thing that would be nice right now when we run it it will just say time elapsed time elapsed

87
00:05:56.590 --> 00:05:58.220
and it won't be clear which is which.

88
00:05:58.240 --> 00:06:03.370
I mean we know that order that they're called in but if I do it it takes a moment to because we're doing

89
00:06:03.370 --> 00:06:05.220
50 million digits now.

90
00:06:05.350 --> 00:06:05.720
OK.

91
00:06:05.760 --> 00:06:11.440
That's the first one I believe generator was first and then this was the second one using a list.

92
00:06:11.500 --> 00:06:16.050
You can see it was definitely slower but it would be nice if it told us which was which.

93
00:06:16.090 --> 00:06:17.540
And that's not hard to do.

94
00:06:17.560 --> 00:06:22.610
All we need to do is do it here print an F string.

95
00:06:22.900 --> 00:06:25.410
Let's just say executing.

96
00:06:25.780 --> 00:06:30.150
And then the name of the function is just F-in dot Tunder name.

97
00:06:30.310 --> 00:06:32.480
And then let's increase the stakes here.

98
00:06:32.500 --> 00:06:34.310
Let's do nine.

99
00:06:34.600 --> 00:06:35.820
$90 million.

100
00:06:35.910 --> 00:06:36.960
How about that.

101
00:06:37.050 --> 00:06:39.180
And the difference should be clearer now.

102
00:06:39.790 --> 00:06:40.250
Okay.

103
00:06:40.270 --> 00:06:41.420
So it might take a moment.

104
00:06:41.450 --> 00:06:44.410
Couple seconds for each chip to do.

105
00:06:44.440 --> 00:06:45.600
What do I talk about.

106
00:06:45.690 --> 00:06:46.060
OK.

107
00:06:46.060 --> 00:06:55.890
Five point nine seconds for one to use the generator and come on you can do it eight point six seconds.

108
00:06:55.900 --> 00:07:01.630
When you use a list comprehension to get the exact same result at the end you can see the numbers are

109
00:07:01.630 --> 00:07:03.360
identical that we get back.

110
00:07:03.400 --> 00:07:04.990
This one took eight eight point six.

111
00:07:04.990 --> 00:07:06.210
This one took 5.9.

112
00:07:06.220 --> 00:07:07.710
Big big difference.

113
00:07:07.720 --> 00:07:08.230
OK.

114
00:07:08.290 --> 00:07:13.060
The point the video was to show you that we could benefit from making a generator in a situation like

115
00:07:13.060 --> 00:07:18.110
this where we're taking code putting out on one side of a function and then calling it after and we're

116
00:07:18.190 --> 00:07:19.710
doing that a couple of times.

117
00:07:19.780 --> 00:07:23.140
Why not make it into a generator or code looks so much cleaner now.

118
00:07:23.200 --> 00:07:24.660
And this is nice and easy.

119
00:07:24.670 --> 00:07:26.980
We just put speed tests in front of whatever we want.

120
00:07:27.010 --> 00:07:31.680
It's beautiful absolutely majestic compared to some other programming languages.

121
00:07:31.690 --> 00:07:32.740
So cool stuff.
