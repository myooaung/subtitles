WEBVTT
1
00:00:00.240 --> 00:00:01.270
They will come back.

2
00:00:01.410 --> 00:00:06.510
So this whole section has been about iterators and it's still about iterators but more specifically

3
00:00:06.570 --> 00:00:09.000
we're talking about generators.

4
00:00:09.000 --> 00:00:10.650
Generators are iterators.

5
00:00:10.650 --> 00:00:12.440
They're a subset of iterators.

6
00:00:12.480 --> 00:00:16.360
Every generator is an iterator but not every iterator is a generator.

7
00:00:16.710 --> 00:00:17.620
So what are they.

8
00:00:17.700 --> 00:00:25.800
Well they're basically a quick and easy short way of creating iterators and they can be created in two

9
00:00:25.800 --> 00:00:26.070
ways.

10
00:00:26.070 --> 00:00:31.660
The first is with the generator functions which use the yield keyword will come back to that.

11
00:00:31.740 --> 00:00:38.340
And the second is by using generator expressions which you may recall we talked about very briefly in

12
00:00:38.340 --> 00:00:44.070
the built in function section of this course but let's start by talking about generator functions.

13
00:00:44.480 --> 00:00:44.900
OK.

14
00:00:45.210 --> 00:00:51.730
So generator functions are just a regular old function except instead of using the return word keyword.

15
00:00:51.780 --> 00:00:59.920
We're using the yield keyword and instead of returning once a generator function can return more than

16
00:00:59.920 --> 00:01:02.540
once or yield more than once.

17
00:01:02.650 --> 00:01:08.260
And then finally when we call a regular function returns a return value when we call a generator function

18
00:01:08.620 --> 00:01:10.570
it returns a generator.

19
00:01:10.660 --> 00:01:17.300
So a generator function is just like it's a way of creating a generator which is an iterator.

20
00:01:17.350 --> 00:01:21.200
It's very complicated confusing when you're explaining it when I'm explaining it like this.

21
00:01:21.370 --> 00:01:23.660
Let's look at an example.

22
00:01:23.670 --> 00:01:29.120
So here is our first generator generator function which returns a generator.

23
00:01:29.140 --> 00:01:34.250
So I'm just going to copy this and actually go to a terminal open it up and paste it in.

24
00:01:34.750 --> 00:01:35.230
OK.

25
00:01:35.410 --> 00:01:40.140
So it's called count up to def count up to max.

26
00:01:40.270 --> 00:01:42.980
And notice this is just a regular function syntax.

27
00:01:43.060 --> 00:01:44.880
We start with count equal to 1.

28
00:01:45.070 --> 00:01:48.980
Basically every time through we check is count less than or equal to max.

29
00:01:49.090 --> 00:01:51.840
If it is yields count.

30
00:01:52.060 --> 00:01:59.110
So what yields we'll do is it will return the value of count and then pause and it will stay that way

31
00:01:59.620 --> 00:02:03.520
until next is called On count up to.

32
00:02:03.790 --> 00:02:10.190
So it's an iterator so every time we call next when it hits yield it returns the value of count and

33
00:02:10.290 --> 00:02:13.220
it stops right here doesn't even go to this line it stops right here.

34
00:02:13.250 --> 00:02:18.230
But then next time it resumes then it adds one to account then it goes back around.

35
00:02:18.460 --> 00:02:24.770
Does a while loop again yields count and then next time through adds 1 and so on.

36
00:02:25.160 --> 00:02:32.040
So to use it if we just call count up to 5 for example there we go.

37
00:02:32.270 --> 00:02:35.540
It's going to return to me a generator object.

38
00:02:35.540 --> 00:02:37.490
So that's the special magic in Python.

39
00:02:37.550 --> 00:02:43.370
If you write a function and you put yield in it anywhere instead of return it's going to give you a

40
00:02:43.370 --> 00:02:44.580
generator object.

41
00:02:44.580 --> 00:02:47.290
So this itself is not a generator.

42
00:02:47.330 --> 00:02:49.620
This is a generator generator.

43
00:02:49.730 --> 00:02:51.470
It's a generator function.

44
00:02:51.530 --> 00:02:54.590
It creates a generator for us when we execute it.

45
00:02:55.010 --> 00:02:55.430
OK.

46
00:02:55.640 --> 00:03:00.290
So now if I save it to a variable let's just call it Gen.

47
00:03:00.480 --> 00:03:07.100
It was called counter equals count up to five.

48
00:03:07.110 --> 00:03:11.190
Once again I reference counter I can't execute it like this.

49
00:03:11.280 --> 00:03:12.490
It's not callable.

50
00:03:12.510 --> 00:03:26.350
What I do is I call next next on counter and it gives me one first time through next to and then three.

51
00:03:26.420 --> 00:03:30.740
What's happening here is that it is keeping track of its state.

52
00:03:30.740 --> 00:03:35.110
So unlike a regular function you run it once and you run it again the same thing happens.

53
00:03:35.110 --> 00:03:37.080
It doesn't remember what happened last time.

54
00:03:37.100 --> 00:03:40.310
This is different each time through and recall next.

55
00:03:40.520 --> 00:03:46.540
It doesn't store everything in the past so it's not that it never has all of the data in memory at once.

56
00:03:46.550 --> 00:03:49.100
One two three four five six or whatever the numbers are here.

57
00:03:49.340 --> 00:03:55.550
But it keeps the most recent one it yields and stops and the next time through it discards that and

58
00:03:55.550 --> 00:03:58.780
adds one and then it keeps that next time through.

59
00:03:58.820 --> 00:04:00.310
It had Twan and keeps that.

60
00:04:00.470 --> 00:04:06.030
So it's only really it only knows one thing at a time knows but it's storing one thing at a time.

61
00:04:06.110 --> 00:04:07.090
Every time we call next.

62
00:04:07.100 --> 00:04:15.150
It just gives us the next thing intel we keep going and we get that stop iteration so we could easily

63
00:04:15.150 --> 00:04:18.050
write our own iterator which we've already done.

64
00:04:18.050 --> 00:04:26.520
Actually the counter iterator in two videos we go where we had the class counter where you hear this

65
00:04:26.520 --> 00:04:31.490
does basically the same thing except we can specify a low and a high.

66
00:04:31.590 --> 00:04:35.250
In my example here we're specifying a high and that's it.

67
00:04:35.250 --> 00:04:40.710
But instead of creating a class instead of setting up a Niton all of that we can do the same thing with

68
00:04:40.710 --> 00:04:47.560
a generator function which returns a generator object generator object automatically has Next added

69
00:04:47.790 --> 00:04:48.060
to it.

70
00:04:48.060 --> 00:04:57.950
So if we looked at counter Actually let's just do help counter you can see it has next Dondre next and

71
00:04:57.950 --> 00:05:00.700
under it are already set up.

72
00:05:01.040 --> 00:05:02.780
So we don't have to do that.

73
00:05:02.810 --> 00:05:05.880
So this is a really easy way of creating an iterator.

74
00:05:06.320 --> 00:05:11.110
But remember we don't have all of the data at once we get it one thing at a time.

75
00:05:11.180 --> 00:05:12.170
We can loop through it.

76
00:05:12.170 --> 00:05:21.890
So let me make a new counter count up to 10 and we can loop through it for Nahm and counter

77
00:05:24.520 --> 00:05:25.520
print.

78
00:05:26.140 --> 00:05:28.140
And we get 1 through 10.

79
00:05:28.240 --> 00:05:29.450
Fred did the same thing.

80
00:05:30.990 --> 00:05:40.100
But I called Next on counter once and then I do my for loop we get to through 10.

81
00:05:40.460 --> 00:05:46.080
When we create the generator we start off count or whatever it was was a variable called I forgot yes

82
00:05:46.150 --> 00:05:51.070
count set to 1 and that's the only thing that it yields to us next time through it yields 2.

83
00:05:51.350 --> 00:05:54.830
So there's no going back once we called Next the first time here.

84
00:05:55.160 --> 00:05:59.610
Counter is set to 1 and so next time through it goes to 2.

85
00:05:59.900 --> 00:06:06.350
So we don't we can't go back to the beginning and we can re-initialize a new instance of that generator

86
00:06:06.740 --> 00:06:08.620
but otherwise we've gone through it.

87
00:06:08.690 --> 00:06:10.450
And so it just goes to the end.

88
00:06:10.670 --> 00:06:14.350
So every time Nexxus called it moves forward one space.

89
00:06:14.420 --> 00:06:19.540
And of course as we've already seen in a for loop it automatically calls next.

90
00:06:19.550 --> 00:06:22.790
So it's going to call next on counter over and over and over.

91
00:06:22.850 --> 00:06:28.400
And then it's going to handle that error because remember if we call next on counter once it's exhausted

92
00:06:28.580 --> 00:06:30.610
we get stopped the Stop the duration error.

93
00:06:30.830 --> 00:06:37.720
But the for loop automatically catches that and just breaks the loop instead of giving us this.

94
00:06:37.940 --> 00:06:38.440
OK.

95
00:06:38.690 --> 00:06:46.070
So just to reiterate all of this reiterate very funny called what we have a generator is returned from

96
00:06:46.070 --> 00:06:47.640
a generator function.

97
00:06:47.960 --> 00:06:51.080
So it's just a way of making an iterator quickly.

98
00:06:51.110 --> 00:06:53.830
We never have to determine what happens when we call next.

99
00:06:53.990 --> 00:06:54.650
We don't have to.

100
00:06:54.650 --> 00:06:55.820
What we don't want to find next.

101
00:06:55.820 --> 00:07:00.880
We don't define it or we never are raising the stop iteration error.

102
00:07:00.890 --> 00:07:04.110
We don't have to do any of that like we did over here.

103
00:07:04.700 --> 00:07:08.010
Instead we just to find a function call it whatever you want.

104
00:07:08.330 --> 00:07:13.330
And in our case we're just doing a counter but we could do squares we could do prime numbers.

105
00:07:13.730 --> 00:07:15.700
We're not limited just to working with numbers by the way.

106
00:07:15.710 --> 00:07:22.610
But we could do any sort of sequence or series of numbers or data as long as we could call next over

107
00:07:22.610 --> 00:07:24.570
and over in a logical pattern.

108
00:07:24.950 --> 00:07:26.280
So we don't have to do any of that though.

109
00:07:26.300 --> 00:07:33.230
All we define is some code that should run and yield and wherever that yield is it's going to stop immediately

110
00:07:33.320 --> 00:07:35.430
return the value that we specify.

111
00:07:35.600 --> 00:07:37.700
Stop execution and just wait.

112
00:07:37.700 --> 00:07:42.200
So there running in place just while running is the wrong term because it's not actually doing anything

113
00:07:42.200 --> 00:07:47.930
it's just sitting there and it takes up way way way less memory than if we if we did the entire thing

114
00:07:47.930 --> 00:07:52.670
as a list which we absolutely could do counter-IED goes up to 10.

115
00:07:52.760 --> 00:07:58.310
If I did list of counter it goes through every item and add it to a list and gives it to us.

116
00:07:58.310 --> 00:08:01.120
So if we need all the values at once we have access to them.

117
00:08:01.250 --> 00:08:06.240
But if we're only using each value one at a time to do something we don't have to turn into a list.

118
00:08:06.350 --> 00:08:10.540
And that's where this kind of ties into generator expressions which you haven't talked about yet.

119
00:08:10.670 --> 00:08:12.320
We will and two videos from now.

120
00:08:12.380 --> 00:08:18.440
But if you remember back when we talked about some the built in functions some I mentioned you don't

121
00:08:18.440 --> 00:08:24.260
always have to pass in a list of data if you don't need that list anywhere else you can pass in a generator

122
00:08:24.260 --> 00:08:28.250
expression and it's just easier takes up less memory.

123
00:08:28.250 --> 00:08:28.990
It's faster.

124
00:08:29.270 --> 00:08:29.560
OK.

125
00:08:29.570 --> 00:08:30.700
So we'll get there.

126
00:08:30.780 --> 00:08:37.130
Can jump in Ahead their generator function returns a generator generator is an iterator is safe quick

127
00:08:37.130 --> 00:08:37.900
and easy way.

128
00:08:38.090 --> 00:08:43.170
I hope that made sense is kind of something I'm scared about in this video.

129
00:08:43.250 --> 00:08:45.230
It's just difficult.

130
00:08:45.350 --> 00:08:46.740
Kind of weird stuff.

131
00:08:46.820 --> 00:08:49.730
I'll get some feedback and comments if you have questions.

132
00:08:49.730 --> 00:08:51.100
See you in the next video.

133
00:08:51.200 --> 00:08:54.930
We're going to define another type of generator that is an infinite generator.
