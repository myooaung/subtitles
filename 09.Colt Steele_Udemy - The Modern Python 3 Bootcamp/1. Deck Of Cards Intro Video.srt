1
00:00:00,360 --> 00:00:01,590
Hey welcome back.

2
00:00:01,590 --> 00:00:03,350
So I've covered a lot in this section.

3
00:00:03,420 --> 00:00:09,170
It's time to put it to use so we have an exercise here that's a bit larger than what we've done so far.

4
00:00:09,180 --> 00:00:15,180
It asks you to define two separate classes card and deck these two classes can form the backbone of

5
00:00:15,180 --> 00:00:21,180
any card race game you want or to code up poker blackjack or any of the other card games you would need

6
00:00:21,180 --> 00:00:24,440
a card and deck class or it would at least help.

7
00:00:24,750 --> 00:00:26,930
So the specifications are laid out here.

8
00:00:27,000 --> 00:00:28,560
I want to go over some of them.

9
00:00:28,650 --> 00:00:32,520
So if you just want to dive into this you can read this lecture.

10
00:00:32,670 --> 00:00:35,610
I think by the time I publish these numbers will be different.

11
00:00:35,610 --> 00:00:40,470
But if you just look after this video there should there's an exercise you can read the instructions

12
00:00:40,470 --> 00:00:40,840
there.

13
00:00:40,890 --> 00:00:41,780
Keep that open.

14
00:00:41,820 --> 00:00:43,070
Try it on your own.

15
00:00:43,080 --> 00:00:49,740
I recommend doing it on your computer in a sublime file or text editor file and then using the tests

16
00:00:49,740 --> 00:00:56,130
that I've written to check your work rather than writing everything in you to me browser tools because

17
00:00:56,190 --> 00:00:59,380
it actually won't show you results it only shows you the test results.

18
00:00:59,430 --> 00:01:04,980
So I recommend doing it on your own on your computer until you feel like you've got it and it's working

19
00:01:04,980 --> 00:01:06,300
and you've tested everything.

20
00:01:06,330 --> 00:01:09,760
Copy and paste it into the browser then check if you got it right.

21
00:01:10,080 --> 00:01:10,610
OK.

22
00:01:10,860 --> 00:01:13,470
Also I'm going to have a complete walkthrough after this.

23
00:01:13,470 --> 00:01:16,380
So if you do just want to build it with me that's another option.

24
00:01:16,650 --> 00:01:18,950
So the rules are the specifications.

25
00:01:18,960 --> 00:01:23,080
There was a card class and each card only has two attributes.

26
00:01:23,250 --> 00:01:30,150
A suit which is only going to be hearts diamonds clubs or spades and then a value ace two three and

27
00:01:30,150 --> 00:01:32,500
they're all single string characters.

28
00:01:32,550 --> 00:01:35,720
So Ace isn't a king is a K and so on.

29
00:01:35,790 --> 00:01:38,830
And then all the numbers are numbers but strings.

30
00:01:39,180 --> 00:01:46,800
And then the repr method should just return a of clubs or J of diamonds or seven of hearts.

31
00:01:46,800 --> 00:01:49,690
So just the value of suits.

32
00:01:49,950 --> 00:01:50,250
OK.

33
00:01:50,280 --> 00:01:51,790
And that's it for card.

34
00:01:51,810 --> 00:01:53,960
So there's really no functionality on it.

35
00:01:54,000 --> 00:01:57,130
Just hold some data and has a nice representation.

36
00:01:57,390 --> 00:01:59,120
And of course you need to define it.

37
00:01:59,280 --> 00:02:00,930
And that sort of thing.

38
00:02:00,930 --> 00:02:03,310
Deck is where most of the work comes in.

39
00:02:03,330 --> 00:02:04,750
So a deck class.

40
00:02:04,770 --> 00:02:12,240
Each instance of the deck class will have a Cards attribute that automatically is set to all 52 possible

41
00:02:12,390 --> 00:02:21,720
instances of card so cards is going to be a list that contains 52 cards each an actual card instance.

42
00:02:21,720 --> 00:02:27,240
So when a new deck is initialized in that init you should automatically set the cards attribute to be

43
00:02:27,240 --> 00:02:31,980
a list containing all of these all instances all possible combinations.

44
00:02:31,980 --> 00:02:37,680
I wouldn't manually code it just take these values in the list take these values in a list using nested

45
00:02:37,680 --> 00:02:43,560
loop or a nested list comprehension to create a bunch of cards and save each instance to the card list

46
00:02:43,770 --> 00:02:44,850
attribute.

47
00:02:45,420 --> 00:02:49,590
There should be an instance method called Account which just returns a count of how many cards are left

48
00:02:49,590 --> 00:02:50,430
in the deck.

49
00:02:50,460 --> 00:03:00,040
The repr method the representation should just return a string like this deck of 52 cards or 12 cards.

50
00:03:00,200 --> 00:03:02,830
The number of remaining cards in a sentence.

51
00:03:02,830 --> 00:03:07,620
And if you want to pass the tests that I've written just make sure it matches this format.

52
00:03:07,620 --> 00:03:13,770
So don't do something like there are five cards left say deck of five cards and that's just to get the

53
00:03:13,770 --> 00:03:15,600
test to work if you care about that.

54
00:03:15,930 --> 00:03:16,540
OK.

55
00:03:16,740 --> 00:03:20,480
Then there should be a method called deal with an underscore deal.

56
00:03:20,550 --> 00:03:28,070
Again that's to signify that a user or no external code shouldn't be calling deal directly.

57
00:03:28,280 --> 00:03:29,890
It's for internal use.

58
00:03:29,970 --> 00:03:37,140
It's just a convention and it should accept a number like two and it should remove that many cards from

59
00:03:37,140 --> 00:03:41,210
the deck from the end or remove two decks or two cards from the end.

60
00:03:41,280 --> 00:03:46,320
It may need to remove fewer though because you only have one card left in the deck.

61
00:03:46,320 --> 00:03:48,390
You don't want to try and remove too.

62
00:03:48,510 --> 00:03:51,800
You want to remove one and if there are no cards left.

63
00:03:51,930 --> 00:03:59,120
Just return a value error that says all cards have been dealt deck should have another instance method

64
00:03:59,120 --> 00:04:02,860
called shuffle and shuffle can actually just call.

65
00:04:02,900 --> 00:04:07,790
You could either try and write your own shuffle that can be a pain or use a random import random and

66
00:04:07,800 --> 00:04:09,140
use the built in shuffle.

67
00:04:09,290 --> 00:04:13,940
But the idea is that there's going to be an instance method on deck called shuffle.

68
00:04:14,000 --> 00:04:19,970
So it's fine if all that it does is use random shuffle but you should actually make an instance method

69
00:04:19,970 --> 00:04:21,910
called shuffle in an important note.

70
00:04:21,920 --> 00:04:26,630
You said if there are cards missing from the deck it's not a full deck then you should return a value

71
00:04:26,630 --> 00:04:29,200
error that says only full decks can be shuffled.

72
00:04:29,210 --> 00:04:32,230
So there have to be 52 cards in the cards list.

73
00:04:32,360 --> 00:04:38,990
Then there are two methods deal card Cingular which uses the builtin underscore deal method to deal

74
00:04:38,990 --> 00:04:40,270
a single card from the deck.

75
00:04:40,280 --> 00:04:47,840
So just call deal 1 and then deal hand which accepts a number like five or 10.

76
00:04:47,840 --> 00:04:50,270
I don't know any games where you get 10 cards but five.

77
00:04:50,310 --> 00:04:56,920
This is an example and it should call underscore a deal and that should return a list of cards.

78
00:04:56,990 --> 00:05:00,410
So this should return a single card from the deck when it's called.

79
00:05:00,590 --> 00:05:03,650
And this should return a list of cards from the deck.

80
00:05:03,920 --> 00:05:06,490
Here's a quick example of how it should work.

81
00:05:06,530 --> 00:05:10,450
So I could create a new deck doesn't need any information when I make a new deck.

82
00:05:10,460 --> 00:05:17,540
It's always 52 cards I call it my deck and if I print it and just look at what is printed out we get

83
00:05:17,630 --> 00:05:19,810
a deck of 52 cards.

84
00:05:19,880 --> 00:05:26,360
Then I called shuffle on it and then I use the deal card an instance method saved the result a single

85
00:05:26,360 --> 00:05:32,360
card to a variable called card and I print that single card and you can see a of hearts.

86
00:05:32,360 --> 00:05:37,760
So it is a card object an instance of the card class but because the representation has been set all

87
00:05:37,760 --> 00:05:39,830
I see is this nice little string.

88
00:05:39,950 --> 00:05:43,800
Then I called Deal hand which returns a list of cards.

89
00:05:43,820 --> 00:05:49,220
In this case five as you can see here I have five cards in a list that I'm printing.

90
00:05:49,250 --> 00:05:51,870
And then finally I tried to print or I didn't try.

91
00:05:51,870 --> 00:05:59,060
I printed my deck at the end and now it tells me it's a deck of 46 cards because I've dealt six total

92
00:05:59,060 --> 00:06:01,190
cards five here and one here.

93
00:06:01,190 --> 00:06:02,540
We started to 52.

94
00:06:02,540 --> 00:06:03,820
Now we're down to 46.

95
00:06:03,980 --> 00:06:04,520
OK.

96
00:06:04,610 --> 00:06:06,320
So if you're interested in doing this on your own.

97
00:06:06,350 --> 00:06:07,310
Give it a shot.

98
00:06:07,310 --> 00:06:12,080
I recommend doing it locally on your computer running it in your terminal making sure things work.

99
00:06:12,110 --> 00:06:18,650
So you can debug then copy and paste it once you feel ready and see if the tests work with your version.

100
00:06:18,650 --> 00:06:23,190
Otherwise stick around and I'll build this from scratch in the next video or two.

101
00:06:23,210 --> 00:06:23,830
See you then.
