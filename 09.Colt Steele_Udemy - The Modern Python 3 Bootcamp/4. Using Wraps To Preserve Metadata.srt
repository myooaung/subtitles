1
00:00:00,330 --> 00:00:00,880
Already.

2
00:00:00,900 --> 00:00:03,100
So we're talking to decorator's still.

3
00:00:03,120 --> 00:00:06,960
Here's another example that's going to present a problem to us.

4
00:00:06,960 --> 00:00:08,460
So let's just dive into the code.

5
00:00:08,730 --> 00:00:09,980
I have it right here.

6
00:00:10,410 --> 00:00:13,020
What we have is a simple decorated function.

7
00:00:13,020 --> 00:00:19,290
It's called ADD and the decorator is called log function data all that it does is it prints things like

8
00:00:19,320 --> 00:00:22,550
you're about to call and then the functions name.

9
00:00:22,620 --> 00:00:28,440
And then here's the documentation in it call it printed docstring which is defined down here and everything

10
00:00:28,440 --> 00:00:29,130
looks good.

11
00:00:29,130 --> 00:00:34,790
If I call this if we do add 10 comma 30 printed.

12
00:00:35,580 --> 00:00:38,390
Oh and by the way the wrapper finally calls a function at the end.

13
00:00:38,400 --> 00:00:40,710
It basically logs what we're about to do.

14
00:00:40,800 --> 00:00:43,170
The documentation for the function that's about to be called.

15
00:00:43,350 --> 00:00:45,110
And then it calls the function.

16
00:00:45,450 --> 00:00:45,960
OK.

17
00:00:46,320 --> 00:00:52,110
So you'd expect to see something like you're about to call and it's unable to function.

18
00:00:52,230 --> 00:00:53,460
Here's the documentation.

19
00:00:53,460 --> 00:00:59,230
Add two numbers together and then finally Prince 40 I can do my math correctly.

20
00:00:59,280 --> 00:01:00,950
Let's see if that's what we get.

21
00:01:01,230 --> 00:01:03,470
And it is indeed we get you're about to call.

22
00:01:03,480 --> 00:01:04,890
And here's the documentation.

23
00:01:04,890 --> 00:01:07,280
Add two numbers together and 40.

24
00:01:07,380 --> 00:01:08,380
That's great.

25
00:01:08,580 --> 00:01:13,330
But the problem that I'm presenting has to do with ADH itself.

26
00:01:13,410 --> 00:01:22,450
The wrapper that is returned which is now being called add if I try and print ad dot let's do Doc to

27
00:01:22,470 --> 00:01:27,750
stars or let's do both why not do name as well.

28
00:01:27,750 --> 00:01:32,730
All right so if I try and refer to this after the fact I'm trying to debug something maybe this is a

29
00:01:32,730 --> 00:01:37,740
library I've written that somebody else is using and they're trying to understand something and they

30
00:01:37,740 --> 00:01:43,920
want to get the doctoring or even tried to do help on add just like we did with term color when we downloaded

31
00:01:43,920 --> 00:01:44,140
it.

32
00:01:44,160 --> 00:01:49,380
We wanted to immediately run help on term color to see how it worked well with the way our decorator

33
00:01:49,380 --> 00:01:50,760
set up.

34
00:01:50,760 --> 00:01:52,440
This is what we get right now.

35
00:01:52,560 --> 00:01:55,790
Hope is giving us the wrapper function help.

36
00:01:55,950 --> 00:02:00,460
It's not giving us the ADD help that we set up with the ad docstring.

37
00:02:00,660 --> 00:02:06,260
So instead docstring as I am wrapper function and name is wrapper.

38
00:02:06,810 --> 00:02:13,800
So it's not giving us this it's like giving us this name this docstring it is inside when we print it

39
00:02:13,800 --> 00:02:14,250
out.

40
00:02:14,520 --> 00:02:16,670
But externally it's not.

41
00:02:17,070 --> 00:02:21,470
So I hope you can see that distinction when I'm referring to add by name here.

42
00:02:21,540 --> 00:02:23,630
Doc dot name.

43
00:02:23,910 --> 00:02:26,760
Help add all that stuff it's not working.

44
00:02:26,760 --> 00:02:29,380
It's referring to wrapper and we're getting this docstring.

45
00:02:29,640 --> 00:02:33,960
So this could be problematic especially if other people are working with our code.

46
00:02:33,960 --> 00:02:38,340
Like I said if we created a library that has decorator's you don't want this to happen.

47
00:02:38,490 --> 00:02:44,110
But fortunately for us Python to the rescue there's a simple way of preserving metadata.

48
00:02:44,130 --> 00:02:49,890
There's a module called phunk tools and from it there is something called wraps and wraps.

49
00:02:49,900 --> 00:02:55,830
It is simply a function that we use as a wrapper function around our wrapper function and it makes sure

50
00:02:55,830 --> 00:03:00,810
that all the attributes in the function that were decorated aren't lost by decorator.

51
00:03:01,110 --> 00:03:05,480
So by importing wraps from phunk tools and then calling it right here.

52
00:03:05,490 --> 00:03:07,630
So we're decorating the wrapper.

53
00:03:07,680 --> 00:03:11,730
It ensures that the function that being passed in the function that's being decorated.

54
00:03:11,730 --> 00:03:15,200
In our case add it's metadata won't be lost.

55
00:03:15,210 --> 00:03:26,340
So up here we can just do from phunk tools import wraps and then right here we add that line wraps and

56
00:03:26,340 --> 00:03:30,880
then it needs to match whatever we're calling the function that's being passed in.

57
00:03:30,930 --> 00:03:33,000
But this is a very standard thing to do.

58
00:03:33,060 --> 00:03:34,710
It's just friendly.

59
00:03:34,740 --> 00:03:36,840
Good developer behavior to do this.

60
00:03:36,930 --> 00:03:41,950
If you are releasing code to the public especially so let's test this now.

61
00:03:42,010 --> 00:03:48,990
Now when I print to add doc or add name it shouldn't reflect I am wrapper function and wrapper it should

62
00:03:48,990 --> 00:03:54,340
reflect adds two numbers together and add let's test it.

63
00:03:54,590 --> 00:03:58,450
Indentation airier killin me this.

64
00:03:58,490 --> 00:03:59,800
Where are you.

65
00:04:00,260 --> 00:04:03,430
How dare I use a tab and so spaces there.

66
00:04:03,830 --> 00:04:07,660
Also phunk tools with the single T.

67
00:04:07,690 --> 00:04:09,020
Now if we run it.

68
00:04:09,380 --> 00:04:14,930
Well first we're getting the correct help I forgot we had that in there giving us help for ADD and we

69
00:04:14,930 --> 00:04:17,800
get the correct docstring and the correct name now.

70
00:04:18,020 --> 00:04:18,880
All right.

71
00:04:18,980 --> 00:04:20,540
So just a quick video here.

72
00:04:20,540 --> 00:04:26,180
I just wanted to show you one of the problems that arises with decorator's and decorated functions not

73
00:04:26,180 --> 00:04:28,100
maintaining their metadata.

74
00:04:28,100 --> 00:04:33,800
Python gives this to us for free gives us wraps because this is a common problem when we write our own

75
00:04:33,800 --> 00:04:34,770
wrapper functions.

76
00:04:34,850 --> 00:04:41,000
Just put this at wraps call it with whatever the function that you're trying to decorate is and it will

77
00:04:41,000 --> 00:04:44,760
preserve that function metadata already moving on.
