WEBVTT
1
00:00:00.210 --> 00:00:00.630
All right.

2
00:00:00.660 --> 00:00:03.560
So this video will focus primarily on creating lists.

3
00:00:03.570 --> 00:00:06.460
There's a couple of different options and how to make a new list.

4
00:00:06.480 --> 00:00:10.960
So we've established that lists are just a collection of other bits of data.

5
00:00:11.520 --> 00:00:13.150
And we talked a bit about why they're useful.

6
00:00:13.200 --> 00:00:15.660
But here's a quick example again in the slides.

7
00:00:15.660 --> 00:00:21.390
So imagine that we have three strings of to do three things we need to do install Python.

8
00:00:21.450 --> 00:00:23.130
Learn Python and take a break.

9
00:00:23.220 --> 00:00:29.400
This is similar to the shopping cart example in that we could approximate a list using variables but

10
00:00:29.460 --> 00:00:30.620
there's no ordering here.

11
00:00:30.690 --> 00:00:33.710
It's problematic and they're not associated in any way.

12
00:00:33.740 --> 00:00:38.630
They're totally separate variables even though we want them to be associated.

13
00:00:38.630 --> 00:00:41.690
We want an order they're all part of our dues.

14
00:00:42.240 --> 00:00:45.440
So a list looks like this.

15
00:00:45.510 --> 00:00:51.570
The key syntax that will see all the time with lists are the square brackets usually on the right side

16
00:00:51.570 --> 00:00:54.040
of the keyboard above the return key.

17
00:00:54.070 --> 00:00:56.770
Roughly don't hold me to it.

18
00:00:56.810 --> 00:01:01.620
So these Those are the key bits of information that tell Python This is a list.

19
00:01:01.970 --> 00:01:05.390
So tasks equals just a regular variable declaration.

20
00:01:05.710 --> 00:01:07.430
But on the right side these two brackets.

21
00:01:07.430 --> 00:01:13.960
And then inside we separate the values by commas and it happens that these three values are strings.

22
00:01:14.060 --> 00:01:15.830
They do not have to be the same.

23
00:01:15.860 --> 00:01:20.000
We could have a string a number of boolean another string and so on.

24
00:01:20.350 --> 00:01:20.910
OK.

25
00:01:21.200 --> 00:01:27.110
So when we hit enter here the tasks variable will store these three bit of information in the order

26
00:01:27.200 --> 00:01:28.520
that we add them in.

27
00:01:28.520 --> 00:01:32.190
So we have install Python followed by learn Python followed by take a break.

28
00:01:32.270 --> 00:01:38.540
Also if we had them stored in variables as first task second and third task we could also just create

29
00:01:38.570 --> 00:01:40.510
a new list using those variables.

30
00:01:40.670 --> 00:01:43.270
So we don't have to put strings in directly.

31
00:01:43.430 --> 00:01:46.510
We could use a variable that references a string and add that in.

32
00:01:46.670 --> 00:01:52.550
So let's quickly make a new list here and I'm just going to call this demo list and I'll just show you

33
00:01:52.670 --> 00:01:58.740
we can put whatever we want to the string a one 45 true afloat.

34
00:01:58.760 --> 00:02:01.580
Six point seven seven seven point seven.

35
00:02:01.580 --> 00:02:02.130
There we go.

36
00:02:02.320 --> 00:02:04.460
And they'll hit enter.

37
00:02:04.620 --> 00:02:12.120
And if we look at Demo lists now you can see those square brackets made it a list and inside of it we

38
00:02:12.120 --> 00:02:15.890
have these comma separated values of all different data types.

39
00:02:15.950 --> 00:02:19.680
Often you want the same data type in there because of the data you're working with.

40
00:02:19.690 --> 00:02:21.740
If it's in a list it's usually pretty homogenous.

41
00:02:21.750 --> 00:02:27.320
It's a list of names a list of items list of numbers but you don't have to abide by that.

42
00:02:27.480 --> 00:02:32.170
So the next thing that I'll show you we've seen how to create a list or one way to create it.

43
00:02:32.370 --> 00:02:36.350
What if we wanted to know how many items are in there how many elements are in the list.

44
00:02:36.360 --> 00:02:41.820
So the first built in function will see for lists is called LCN stands for length.

45
00:02:42.210 --> 00:02:48.610
And we just pass in a list and it will return to us the number of items in the list.

46
00:02:48.630 --> 00:02:57.380
So if I did learn on demo list what do we expect to see 5 1 2 3 4 5.

47
00:02:57.570 --> 00:03:02.550
So that one's pretty straightforward but it's actually quite useful when you have a list and you don't

48
00:03:02.550 --> 00:03:03.760
know how many items are in it.

49
00:03:03.840 --> 00:03:07.020
Let's say you were trying to loop through it which we haven't talked about.

50
00:03:07.020 --> 00:03:09.140
Well how many times does a loop need to repeat.

51
00:03:09.270 --> 00:03:13.830
You need to know how many items are in the list and might have one or might have 100 like in the case

52
00:03:13.830 --> 00:03:16.420
of our shopping list.

53
00:03:16.430 --> 00:03:22.660
So another way to make a list is to use the list builtin function which we actually have seen already.

54
00:03:22.790 --> 00:03:24.380
When I talked about ranges.

55
00:03:24.470 --> 00:03:32.820
So remember that if we just ran something like this to make a variable called R R is range from 1 to

56
00:03:32.820 --> 00:03:33.780
10.

57
00:03:34.220 --> 00:03:38.210
And remember when we looked at our all we got back was the range itself.

58
00:03:38.210 --> 00:03:42.170
So yes this does represent the numbers 1 through 10 in a sequence.

59
00:03:42.170 --> 00:03:43.530
It's not a list.

60
00:03:43.610 --> 00:03:48.670
And to make it visible to us I showed you that you could turn it into a list.

61
00:03:48.770 --> 00:03:53.000
I didn't explicitly say we were turning it into a list but that's what's happening.

62
00:03:53.000 --> 00:04:00.080
This is the same as doing as TR on the integer 3 where it gives us the string of three when we do lists

63
00:04:00.440 --> 00:04:02.150
on a range.

64
00:04:02.180 --> 00:04:05.290
It gives us the list version of a range.

65
00:04:05.420 --> 00:04:11.270
So this is another way if you need a list of numbers so you're not just using a range to loop through

66
00:04:11.270 --> 00:04:13.780
things but you actually need the numbers in the list.

67
00:04:13.790 --> 00:04:17.060
You can convert a range to a list.

68
00:04:17.290 --> 00:04:22.480
And as you can see here converting this range to this gives us 1 2 3.

69
00:04:22.510 --> 00:04:25.240
So this is something we'll see later on so I'll stop the video.

70
00:04:25.240 --> 00:04:27.910
Here we have our data analyst but it's trapped.

71
00:04:27.910 --> 00:04:31.750
So in the next video we'll see a couple of ways of getting it out of accessing our data.
