1
00:00:00,480 --> 00:00:03,480
OK so we've seen how to define the simplest class.

2
00:00:03,510 --> 00:00:05,970
Some might say dumbest class in Python.

3
00:00:05,970 --> 00:00:10,930
Now let's talk about how would we actually give this User class some attributes.

4
00:00:10,980 --> 00:00:16,200
So every user should have a first name and a last name and an e-mail.

5
00:00:16,200 --> 00:00:17,370
Let's start there.

6
00:00:17,370 --> 00:00:19,340
So how do I actually define that.

7
00:00:19,650 --> 00:00:23,660
Well the first thing we have to talk about is the init method.

8
00:00:23,740 --> 00:00:29,730
Anytime we make a new instance of a class Python will automatically look for the special double underscore

9
00:00:29,760 --> 00:00:31,320
init method.

10
00:00:31,530 --> 00:00:33,070
So it's you know look for it automatically.

11
00:00:33,090 --> 00:00:39,810
You don't ever recall it explicitly and it will call itself whenever we make a new vehicle in this case.

12
00:00:39,840 --> 00:00:40,960
This code will run.

13
00:00:41,310 --> 00:00:45,580
So when we make a new user the user class init method will run.

14
00:00:45,720 --> 00:00:50,050
So to prove that to you me define this init method.

15
00:00:50,220 --> 00:00:56,370
So every time we make a new class we should have an init method and one thing I do need to mention we

16
00:00:56,370 --> 00:00:57,500
need to put self here.

17
00:00:57,590 --> 00:01:02,000
We'll come back to this self keyword in a moment but for now just trust me it needs to go there and

18
00:01:02,070 --> 00:01:09,760
let's just start by printing a new user has been made like that which I guess that's a passive voice

19
00:01:09,780 --> 00:01:10,830
but whatever.

20
00:01:11,190 --> 00:01:14,690
And now let's make a couple of users.

21
00:01:14,860 --> 00:01:16,840
User one user or two user three.

22
00:01:16,870 --> 00:01:20,580
I am never calling and net Pythonesque going to do it for me.

23
00:01:20,580 --> 00:01:25,220
When I say make a new user it immediately automatically calls init.

24
00:01:25,230 --> 00:01:29,490
Let's prove that not good that a new user has been made.

25
00:01:29,490 --> 00:01:34,350
It was printed three times even though I never actually called init myself.

26
00:01:34,350 --> 00:01:39,690
OK so that was all just to show you know that this code runs when a new user is created.

27
00:01:39,690 --> 00:01:45,120
You pretty much would never put a print statement in a net where you would actually do is initialized

28
00:01:45,150 --> 00:01:50,920
the data that each user has and to do that we need to talk about the word self.

29
00:01:50,940 --> 00:01:58,080
The self keyword refers to the specific instance of the User class or whatever class we're working with.

30
00:01:58,080 --> 00:02:06,630
So when I refer to self Let's do something like self that name equals and I could start by setting them

31
00:02:06,720 --> 00:02:09,980
all to have the name Perry for example.

32
00:02:10,260 --> 00:02:12,390
But the problem with this there's no real problem.

33
00:02:12,390 --> 00:02:19,560
But it won't actually allow me to illustrate how self works because all three of these will have a name

34
00:02:19,560 --> 00:02:20,470
called Perry.

35
00:02:20,490 --> 00:02:29,190
So instead let's pass in a name here let's go with first and then I'm going to go with self dot name

36
00:02:29,580 --> 00:02:31,790
equals first.

37
00:02:32,190 --> 00:02:36,890
And now we have to do is provide a name here when we initialize the user.

38
00:02:37,080 --> 00:02:39,020
So let's go with either one.

39
00:02:39,150 --> 00:02:48,350
Let me just do two users this time so the user one will be Joe and user 2 will be along like this.

40
00:02:48,360 --> 00:02:55,260
So what I'm saying is when a new user is created provide Joe to a net so self always has to be that

41
00:02:55,260 --> 00:02:56,220
first parameter.

42
00:02:56,220 --> 00:03:00,320
We never actually explicitly pass anything in as self.

43
00:03:00,330 --> 00:03:01,330
Python takes care of it.

44
00:03:01,350 --> 00:03:03,300
Sort of behind the scenes magic.

45
00:03:03,300 --> 00:03:10,170
So Joe is going to be assigned to the first parameter and then the word self is going to refer to this

46
00:03:10,290 --> 00:03:17,800
exact user or hear the specific instance and then when this user is created self refers to this user.

47
00:03:18,180 --> 00:03:22,080
So it's a way to refer to the individual instances the current user.

48
00:03:22,080 --> 00:03:23,300
In this case.

49
00:03:23,370 --> 00:03:29,610
So then when I set self name I'm setting the name attribute on this user to be Joe.

50
00:03:29,880 --> 00:03:34,460
If that's what we pass in and on this user it will be Polonca and if I just execute it.

51
00:03:34,460 --> 00:03:37,700
Now we don't actually see anything at the end of the day.

52
00:03:38,010 --> 00:03:47,490
But if I did a print user one dot name can see user 1 now has the name Joe.

53
00:03:47,530 --> 00:03:51,380
So let's expand it a bit and rather than just doing first.

54
00:03:51,460 --> 00:04:00,370
Let's also do a last name and rather than calling it name Let's do first equals first we'll do self-caused

55
00:04:01,210 --> 00:04:11,850
last equals last and we'll do age so self age equals age so these do not have to be the same names.

56
00:04:11,860 --> 00:04:14,220
This is just the name of a parameter appear.

57
00:04:14,620 --> 00:04:17,280
And this is what we'll be using to refer to it.

58
00:04:17,290 --> 00:04:21,900
You know user one name or in this case that won't work and needs to be done first.

59
00:04:21,940 --> 00:04:23,800
Now to match this.

60
00:04:24,040 --> 00:04:26,730
So this is a name of the attribute like a variable.

61
00:04:26,730 --> 00:04:28,720
Basically or a key in a dictionary.

62
00:04:28,900 --> 00:04:30,210
And this is the value.

63
00:04:30,250 --> 00:04:34,220
Typically you would name them the same thing but you don't have to.

64
00:04:34,210 --> 00:04:40,840
OK so now when I actually initialize a user I need to pass in other pieces of information or I'd get

65
00:04:40,840 --> 00:04:42,200
an error just.

66
00:04:42,280 --> 00:04:43,970
I mean this is like any other function.

67
00:04:44,050 --> 00:04:49,330
If I don't give the specified number of arguments and there's no defaults then it's going to cause a

68
00:04:49,330 --> 00:04:50,010
problem.

69
00:04:50,320 --> 00:04:52,350
So let's go with Joe first.

70
00:04:52,420 --> 00:04:56,430
Let's go with Smith is last and age will be.

71
00:04:56,430 --> 00:05:04,730
I don't know 68 then Blanca and her last name is Lopez and she is forty one.

72
00:05:05,180 --> 00:05:08,210
OK so now we have two separate users.

73
00:05:08,620 --> 00:05:12,550
Two instances of the user class they all follow the same blueprint.

74
00:05:12,550 --> 00:05:18,580
Each one has a first name a last name and age but they have different pieces of data in each individual

75
00:05:18,580 --> 00:05:19,780
instance.

76
00:05:19,780 --> 00:05:24,780
So let's now do print user 1 and print user to do it first.

77
00:05:24,790 --> 00:05:32,400
If I just actually if I just try and print user one on it's own you'll see all that we see for the representation

78
00:05:32,500 --> 00:05:34,620
it's this stuff very helpful.

79
00:05:34,650 --> 00:05:42,660
So for now we're going to access individual properties like first OK and I'll do one last as well and

80
00:05:42,660 --> 00:05:44,750
then I'll do the same thing for you or two.

81
00:05:45,210 --> 00:05:47,930
And let's just see what we get.

82
00:05:48,000 --> 00:05:48,440
There we go.

83
00:05:48,450 --> 00:05:55,830
Joe Smith Blanca Lopez if two instances of user that user class they follow the same pattern but they

84
00:05:55,830 --> 00:05:58,390
have different actual pieces of information.

85
00:05:58,410 --> 00:06:05,610
So to wrap that up we have the init method and we pass in self as the first parameter always we don't

86
00:06:05,610 --> 00:06:11,370
ever pass it as an argument or anything it's automatically called whenever a new vehicle in this case

87
00:06:11,700 --> 00:06:18,840
is instantiated and the way we instantiate a class is by referencing the name of the class conventionally

88
00:06:18,910 --> 00:06:25,440
capitalized and then parentheses and then in those parentheses we pass in any data the arguments that

89
00:06:25,440 --> 00:06:29,180
correspond to the net parameters.

90
00:06:29,190 --> 00:06:35,520
So in this case V becomes a new vehicle an instance of the vehicle class with the following pieces of

91
00:06:35,520 --> 00:06:41,300
information make Honda model a Civic and the year is 2017.

92
00:06:41,910 --> 00:06:48,510
And then finally the self keyword self refers to the current instance of the class.

93
00:06:48,510 --> 00:06:55,340
So it doesn't refer to the class in general the entire blueprint it refers to each individual instance.

94
00:06:55,350 --> 00:07:01,650
Every time we instantiate a new class so we use self a lot inside of it where we usually take the parameters

95
00:07:01,680 --> 00:07:07,980
and then assign them to properties called attributes on self and to the next video you'll see that self

96
00:07:07,980 --> 00:07:13,490
pops up again because it always is the first parameter not only to a net but to any methods.

97
00:07:13,500 --> 00:07:17,280
We go ahead and define on our own class instances.

98
00:07:17,430 --> 00:07:20,240
But before we even get there it's time for an exercise.

99
00:07:20,250 --> 00:07:21,970
You're going to find your own class.

100
00:07:22,140 --> 00:07:27,110
And then after the exercise will come back and we'll learn to add methods to our classes.

101
00:07:27,350 --> 00:07:27,630
OK.

102
00:07:27,680 --> 00:07:28,170
See you then.
