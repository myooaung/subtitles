1
00:00:00,200 --> 00:00:00,710
OK.

2
00:00:00,750 --> 00:00:03,290
So we've been working with decorators for a little while now.

3
00:00:03,360 --> 00:00:07,920
The next step to take is to create decorators that actually take an argument.

4
00:00:08,190 --> 00:00:11,430
So everything we've done so far has been you know speed test.

5
00:00:11,440 --> 00:00:12,720
It's always speed tests.

6
00:00:12,780 --> 00:00:14,400
It does the same thing every time.

7
00:00:14,430 --> 00:00:16,730
But what if we want to do something like this.

8
00:00:17,010 --> 00:00:23,360
So I don't have to decorator written just yet but I want to insure first arc is and I pass in burrito

9
00:00:23,810 --> 00:00:29,370
and that will enforce on fave foods that the first argument needs to be burrito in order for the code

10
00:00:29,370 --> 00:00:30,130
to run.

11
00:00:30,330 --> 00:00:36,570
Otherwise you'll get an error or a return an early return that will break out of the function or something.

12
00:00:36,570 --> 00:00:37,500
Same thing done here.

13
00:00:37,500 --> 00:00:43,990
And sure first arg is if I pass in the Number 10 I want to make sure that add to 10 whenever its executed

14
00:00:44,190 --> 00:00:45,930
number one is always 10.

15
00:00:45,990 --> 00:00:47,190
So this should work.

16
00:00:47,220 --> 00:00:48,660
This should not work.

17
00:00:48,690 --> 00:00:53,850
Lets start by implementing ensure first arg is and theres an extra step.

18
00:00:53,850 --> 00:00:56,160
We actually have to take to make this work.

19
00:00:56,520 --> 00:00:58,920
So I have a little fragment here.

20
00:00:58,920 --> 00:01:05,250
This isnt exactly working code but its more just an illustration of something when we write this pattern

21
00:01:05,280 --> 00:01:08,610
at decorator and then define a function afterwards.

22
00:01:08,880 --> 00:01:10,540
We're really doing this right.

23
00:01:10,710 --> 00:01:16,980
Phunk re-assigning phunk and then be the result of running decorator when we pass in func and whatever

24
00:01:16,980 --> 00:01:19,890
is returned from that function is assigned to func.

25
00:01:19,900 --> 00:01:27,330
However if we then want to also add an argument when we call the decorator there's an extra step we

26
00:01:27,330 --> 00:01:34,170
have to take because we now need to call something like this decorator with args and then we pass in

27
00:01:34,170 --> 00:01:39,870
the ARG first and then that should actually make the decorator function return decorator function that

28
00:01:39,870 --> 00:01:44,000
we pass phunk in to be decorated with.

29
00:01:44,010 --> 00:01:49,590
So essentially we need an extra layer of function because the argument that we're trying to pass in

30
00:01:49,590 --> 00:01:52,050
or in this case burrito.

31
00:01:52,050 --> 00:01:56,230
You then need to return a function that is going to ensure that first Argosy burrito.

32
00:01:56,250 --> 00:02:00,110
But first we have to make that function if that makes any sense.

33
00:02:00,210 --> 00:02:02,280
It's kind of a multilayer process.

34
00:02:02,310 --> 00:02:06,530
So let me just demo it first before we get too sidetracked.

35
00:02:06,540 --> 00:02:13,990
First things first we need to define sure first arg is.

36
00:02:14,370 --> 00:02:19,800
That takes a function in and instead of calling this F and because it's not going to be a function that

37
00:02:19,800 --> 00:02:23,480
we're passing in it's a value or an ARG.

38
00:02:23,610 --> 00:02:26,130
Our biggest problem with this idea let's go with Val.

39
00:02:26,160 --> 00:02:29,970
So this represents burrito or 10.

40
00:02:30,030 --> 00:02:35,160
Then inside of here we're going to define another function we can call it inner.

41
00:02:35,190 --> 00:02:36,530
It really doesn't matter.

42
00:02:36,630 --> 00:02:40,790
And inside of that we're going to define our wrapper function.

43
00:02:40,830 --> 00:02:41,580
So there's a lot.

44
00:02:41,610 --> 00:02:48,430
So enter is what will actually take the function and we can add in our ADD wraps.

45
00:02:48,510 --> 00:02:49,960
Fehn right there.

46
00:02:50,060 --> 00:02:53,330
Then we have the wrapper function and don't treat these colons.

47
00:02:53,570 --> 00:03:02,480
When you close this when that open up and wrapper should just have ARGs in or just regular decorator

48
00:03:02,540 --> 00:03:07,970
function that we've seen and didn't hear will do an if statement and we want to check first of all if

49
00:03:07,970 --> 00:03:17,070
there are any args and then check if args 0 is not equal to thou.

50
00:03:17,270 --> 00:03:18,970
So burrito or something.

51
00:03:19,250 --> 00:03:20,530
If we just did this.

52
00:03:20,720 --> 00:03:25,400
If R.G. are not equal Divell we'd run into an error if there were no args.

53
00:03:25,430 --> 00:03:30,620
So instead we'll check to arge exist and is the first one not equal to Val.

54
00:03:30,680 --> 00:03:35,350
If that's the case we can start by just returning.

55
00:03:35,450 --> 00:03:43,790
You know first arg needs to be let's make an F string needs to be vowel.

56
00:03:44,390 --> 00:03:51,780
Otherwise we're going to return F and start args quires

57
00:03:54,520 --> 00:03:57,160
and then we return the wrapper.

58
00:03:57,430 --> 00:04:00,820
And then finally we're going to return inner.

59
00:04:01,360 --> 00:04:07,690
There's an extra intermediate layer now the whole idea is that when we pass in burrito we are then constructing

60
00:04:07,690 --> 00:04:10,400
a decorator using that value.

61
00:04:10,750 --> 00:04:13,290
So this is the decorator that's being returned.

62
00:04:13,340 --> 00:04:17,290
Inner right here inner is what actually accepts the function arguments.

63
00:04:17,410 --> 00:04:24,060
And we just check if the argument the first one matches whatever value is and blah blah blah.

64
00:04:24,080 --> 00:04:26,200
You know we return this little error message.

65
00:04:26,200 --> 00:04:31,060
Otherwise we return the result of calling function and so on.

66
00:04:31,180 --> 00:04:36,400
It does get a little bit messy but hopefully you can step through how this is actually working.

67
00:04:36,400 --> 00:04:39,900
Now let's test it out and miss any colons and everything.

68
00:04:39,900 --> 00:04:41,850
OK here let's see what happens.

69
00:04:41,920 --> 00:04:44,940
So I'm printing the result if we execute it.

70
00:04:44,960 --> 00:04:45,710
It looks good.

71
00:04:45,810 --> 00:04:53,470
So first of all it worked when we called this first one in reinsured first argues Greedo we got it worked.

72
00:04:53,470 --> 00:04:54,440
We didn't get an error.

73
00:04:54,700 --> 00:05:01,480
Then when we tried it again and we passed an ice cream first we got first our needs to be a burrito.

74
00:05:01,570 --> 00:05:08,320
After that we had inchers ensure first August 10 and we call it with 10 first and then with one first

75
00:05:08,710 --> 00:05:12,670
and we get the successful one and then we get the return value.

76
00:05:12,730 --> 00:05:14,430
First our needs to be 10.

77
00:05:14,740 --> 00:05:15,310
OK.

78
00:05:15,760 --> 00:05:16,980
So there's a lot here.

79
00:05:17,020 --> 00:05:18,980
I will upload both these files.

80
00:05:19,000 --> 00:05:23,830
I think this illustration here can help you understand what's happening why we need that extra layer

81
00:05:23,830 --> 00:05:28,080
of a function because there is now two things that are actually being passed in.

82
00:05:28,090 --> 00:05:33,430
It just looks like one because the decorator magic behind the scenes in the same way that this looks

83
00:05:33,430 --> 00:05:38,200
like a function is not necessarily being called what it actually is behind the scenes it's just the

84
00:05:38,200 --> 00:05:39,850
nice syntactic sugar.

85
00:05:39,850 --> 00:05:43,650
All right so now we've seen how to create a decorator that accepts an argument.
