WEBVTT
0
1
00:00:00.210 --> 00:00:05.010
So next I'm going to show an example of something that is a bit more realistic of why you would use
1

2
00:00:05.010 --> 00:00:11.280
a class method so commonly class methods will be used when you're actually creating a new instance of
2

3
00:00:11.280 --> 00:00:12.170
a class.
3

4
00:00:12.230 --> 00:00:13.770
Let comments comments all this out.
4

5
00:00:13.800 --> 00:00:20.820
Let's say I have I don't know I'm working with CSB files comma separated values and a lot of my data.
5

6
00:00:20.820 --> 00:00:28.860
Each row looks like this or we have Tom comma Jones as a last name and then age like 89 and then another
6

7
00:00:28.860 --> 00:00:32.120
row might be I don't know Sue comma.
7

8
00:00:32.440 --> 00:00:33.990
Oh gosh this is the hardest part.
8

9
00:00:33.990 --> 00:00:35.100
Coming up with names.
9

10
00:00:35.160 --> 00:00:37.850
How about Pritchet.
10

11
00:00:38.010 --> 00:00:39.990
I don't even know if that's how you spell it.
11

12
00:00:40.050 --> 00:00:43.760
Who is 12 very old name for a 12 year old.
12

13
00:00:44.040 --> 00:00:44.530
OK.
13

14
00:00:44.760 --> 00:00:53.430
So if we have this data coming in obviously we cannot pass that in to use user as is like up here where
14

15
00:00:53.440 --> 00:00:55.430
we're repassing in these three arguments.
15

16
00:00:55.530 --> 00:01:00.300
But if we wanted to add a method to our class that would handle this for us because if this is a really
16

17
00:01:00.300 --> 00:01:05.160
common use case this isn't a one time thing but the way our app is set up we have data coming in as
17

18
00:01:05.160 --> 00:01:05.960
a string.
18

19
00:01:06.120 --> 00:01:11.460
And I'm not just saying only as strings but if you have data coming in one way and you need to turn
19

20
00:01:11.460 --> 00:01:14.030
it into another format before and it is called.
20

21
00:01:14.070 --> 00:01:15.150
Sorry to interrupt here.
21

22
00:01:15.180 --> 00:01:20.670
This is called from the future I thought of a good example for this is something we've already used
22

23
00:01:20.970 --> 00:01:26.340
but I already recorded the video some inserting this somewhat awkwardly but this is the example of something
23

24
00:01:26.340 --> 00:01:31.450
we've already seen as a class method that actually goes on and creates a new instance for us.
24

25
00:01:31.700 --> 00:01:39.030
If you remember dict from Keys we had to call it with dict rather than the other dictionary methods
25

26
00:01:39.360 --> 00:01:44.240
where we actually called them on an instance of a dictionary we called dict which is a class.
26

27
00:01:44.250 --> 00:01:49.320
It's not capitalized because it's built in but conventionally if we created our own classic user it
27

28
00:01:49.320 --> 00:01:57.150
should be capitalized and it was from kids does give it some sort of collection like let's go with name
28

29
00:01:58.020 --> 00:02:04.620
and age and city and then the second argument is the value that it should be initialized to.
29

30
00:02:04.620 --> 00:02:11.120
So these are all going to be keys and a corresponding value like unknown or none are zero.
30

31
00:02:11.640 --> 00:02:18.450
And what this does is when we called dict dot from keys a class method it actually goes and then calls
31

32
00:02:19.150 --> 00:02:21.450
dict like this.
32

33
00:02:21.450 --> 00:02:23.490
And it basically passes in our data.
33

34
00:02:23.490 --> 00:02:29.160
For us it turns it into this format which is going to return to us a new dictionary which is what we
34

35
00:02:29.160 --> 00:02:30.870
see right here.
35

36
00:02:30.870 --> 00:02:34.900
So this is like the preliminary step we call from Keys.
36

37
00:02:34.980 --> 00:02:41.090
It's a class method that generates a new instance for us by calling the dictate class.
37

38
00:02:41.190 --> 00:02:46.560
If that makes sense we're going to do the same thing with user but making a method that takes in a string
38

39
00:02:46.560 --> 00:02:47.960
we'll call it from string.
39

40
00:02:48.180 --> 00:02:51.140
And it returns a new user instance.
40

41
00:02:51.330 --> 00:02:53.980
OK back to our regularly scheduled program.
41

42
00:02:54.120 --> 00:03:01.660
What we can do is instead of doing user superjet passing that string in we can define a class method.
42

43
00:03:01.920 --> 00:03:10.720
So another one and let's just call this one from string and it's going to be a class method so we need
43

44
00:03:10.800 --> 00:03:17.730
C-L us and then let's call the second parameter like data string or something like this.
44

45
00:03:17.850 --> 00:03:22.010
So this will be what is actually being passed in now to execute it.
45

46
00:03:22.060 --> 00:03:23.620
We would not run like this.
46

47
00:03:23.620 --> 00:03:24.580
It's not going to work.
47

48
00:03:24.580 --> 00:03:25.820
First of all I should mention that.
48

49
00:03:25.960 --> 00:03:33.460
But the idea is that we would call user data from string and pass this entire string in and it should
49

50
00:03:33.460 --> 00:03:38.390
return to us a user that has first name Tom last name Jones age 89.
50

51
00:03:38.410 --> 00:03:41.020
So it should take care of all of that for us.
51

52
00:03:41.020 --> 00:03:46.420
So it needs to be a class method because we're actually going to call Class remember the variable class
52

53
00:03:46.720 --> 00:03:48.630
is user itself.
53

54
00:03:48.670 --> 00:03:52.160
So when we saw the string user it's the actual class user.
54

55
00:03:52.180 --> 00:04:04.850
So what we could do if we called Class CFS and then I passed in John Stones comma sixty four sixty three.
55

56
00:04:04.860 --> 00:04:10.490
This is going to make a new user because user is passed in his class because it's a class method.
56

57
00:04:10.500 --> 00:04:15.930
So this is then going to call user Johnstone's so we can take advantage of that.
57

58
00:04:15.960 --> 00:04:22.120
We have our string of data and need to indent everything and we're just going to split it on the.
58

59
00:04:24.200 --> 00:04:34.160
So we can do a data as TR dot split on comma like that and then we'll sign three different variables
59

60
00:04:34.160 --> 00:04:36.940
so I have first come a last comment.
60

61
00:04:36.950 --> 00:04:40.300
Age equals the string dot split on the comma.
61

62
00:04:40.310 --> 00:04:48.050
That gives us three variables and then we can just pass in first last and age.
62

63
00:04:48.170 --> 00:04:50.710
Technically this will be a string so we can handle that.
63

64
00:04:50.720 --> 00:04:53.870
And second and then we can just return this.
64

65
00:04:54.050 --> 00:04:59.930
So this class method we call it we have to manually call it with from string but it's going to then
65

66
00:05:00.110 --> 00:05:05.750
taken that data string split it up and then take the three pieces of data it split up and then create
66

67
00:05:05.810 --> 00:05:08.610
a new user with it using less.
67

68
00:05:08.630 --> 00:05:14.330
So instead of user there we'll call it CLX which is user is passed in automatically because it's a class
68

69
00:05:14.330 --> 00:05:22.640
method of missing an s just realized and then that itself will then run a net just like this right here
69

70
00:05:22.700 --> 00:05:25.850
where we call user Joe Smith 68.
70

71
00:05:25.910 --> 00:05:26.740
Same thing here.
71

72
00:05:26.750 --> 00:05:30.800
So we're going to return a new instance of user.
72

73
00:05:30.800 --> 00:05:32.910
All right let's give it a shot.
73

74
00:05:33.080 --> 00:05:41.390
So down here every user from string let's save it to a variable called Tom and then we'll do like print.
74

75
00:05:41.810 --> 00:05:44.900
Tom dot first.
75

76
00:05:46.170 --> 00:05:51.420
And let's try one of the methods like would we have full name.
76

77
00:05:51.780 --> 00:05:53.300
Let's try executing it.
77

78
00:05:53.610 --> 00:05:54.920
And I'm missing and colon.
78

79
00:05:54.990 --> 00:05:58.330
It's been a while since and Mr. Colon hopefully you caught that before me.
79

80
00:05:58.350 --> 00:05:59.510
Now let's try again.
80

81
00:05:59.910 --> 00:06:00.590
All right.
81

82
00:06:00.750 --> 00:06:06.540
So now we we can tell we've actually created a new user instance of the user class with first name is
82

83
00:06:06.540 --> 00:06:11.130
Tom and we can see last name works because full name is printing out the last little thing we could
83

84
00:06:11.130 --> 00:06:21.300
change is to make it an age so we could we could honestly just do this here and like that and we'll
84

85
00:06:21.300 --> 00:06:24.950
just do print Tom birthday and we get happy 90th.
85

86
00:06:24.950 --> 00:06:32.580
Tom so you went from being 69 to aging one to 90 69 other missing men from 89 to 90.
86

87
00:06:32.580 --> 00:06:34.030
All right so let's wrap this up.
87

88
00:06:34.050 --> 00:06:36.330
We saw class methods in this video.
88

89
00:06:36.330 --> 00:06:42.090
They are methods where first we write the decorator class method to signify the following method is
89

90
00:06:42.090 --> 00:06:48.180
a class method automatically when we call the method the class itself user is passed in.
90

91
00:06:48.180 --> 00:06:52.720
So we want to name this parameter something that makes sense or CLSA is the standard.
91

92
00:06:52.920 --> 00:06:58.350
And you only write these methods if you do not need access to any data about the instances or a particular
92

93
00:06:58.350 --> 00:07:05.040
instance and you're doing something on the entire class level like we're doing here where we're actually
93

94
00:07:05.040 --> 00:07:08.370
going on to create a new instance of the class.
94

95
00:07:08.370 --> 00:07:13.700
So this is a common pattern if you have data that's coming in one way where you need to validate data.
95

96
00:07:13.830 --> 00:07:20.730
You need to do something before a user is created or whatever the classes you could use a class method
96

97
00:07:20.730 --> 00:07:21.310
to do it.
97

98
00:07:21.380 --> 00:07:21.820
OK.
98

99
00:07:21.910 --> 00:07:23.400
That's a lot I know.
99

100
00:07:23.400 --> 00:07:25.030
Next more exercises.
