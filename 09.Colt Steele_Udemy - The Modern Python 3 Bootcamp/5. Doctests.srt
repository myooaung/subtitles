1
00:00:00,210 --> 00:00:04,590
A Welcome Back in this video we're talking about something called dark tests.

2
00:00:04,890 --> 00:00:09,990
So if you remember the docstring that we talked about a couple of times in this course you can add documentation

3
00:00:09,990 --> 00:00:14,240
to your functions to your modules using those triple double quotes.

4
00:00:14,340 --> 00:00:16,690
We can actually write test code in there as well.

5
00:00:16,710 --> 00:00:21,430
And Python has a way of automatically running parsing and running those tests for us.

6
00:00:21,540 --> 00:00:25,710
But the catch is that we have to use a pretty out there syntax.

7
00:00:25,710 --> 00:00:28,120
In my opinion it is charming in a way.

8
00:00:28,140 --> 00:00:31,170
I like writing tests but we'll talk.

9
00:00:31,230 --> 00:00:33,090
We'll talk about the limitations as well.

10
00:00:33,090 --> 00:00:38,320
I'm not presenting this to you as the best way of testing everything but it is good to know about.

11
00:00:38,750 --> 00:00:43,230
So drug tests allowed to write tests or functions inside the docstring.

12
00:00:43,710 --> 00:00:48,630
But the catch that I mentioned is that we have to write our code in a very very particular way so that

13
00:00:48,660 --> 00:00:51,450
it looks like we're writing in a REPL.

14
00:00:51,600 --> 00:00:52,920
What do I mean by that.

15
00:00:53,220 --> 00:00:54,980
Well here's an example.

16
00:00:55,620 --> 00:01:01,020
So we have these triple double quotes inside of here's an add function triple double quotes and then

17
00:01:01,140 --> 00:01:02,880
this is the part I'm talking about.

18
00:01:03,360 --> 00:01:05,700
This right here will turn into a test.

19
00:01:05,970 --> 00:01:11,850
So by me writing this the greater and greater then greater then the prompt and then running add one

20
00:01:11,850 --> 00:01:19,320
comment to I'm basically saying OK we should expect to add one comment to two results in three but we

21
00:01:19,320 --> 00:01:23,590
have to follow this very particular syntax I expect.

22
00:01:23,610 --> 00:01:28,560
Add eight comma high two results in a type error.

23
00:01:29,040 --> 00:01:30,270
And it has to look like this.

24
00:01:30,270 --> 00:01:32,610
It has to match what you would see in the REPL.

25
00:01:32,640 --> 00:01:38,370
What's cool about dog tests is that if you create a module or library or package someone uses you write

26
00:01:38,400 --> 00:01:39,830
a docstring automatically.

27
00:01:39,840 --> 00:01:43,980
I mean you should have a docstring in there for anything that someone is going to use you put in this

28
00:01:43,980 --> 00:01:47,820
code as a demonstration for how it should work to a user.

29
00:01:47,820 --> 00:01:51,270
This is a human readable thing that I can look at.

30
00:01:51,270 --> 00:01:56,490
Like when we saw the colorize example or any of the things we've worked with there's a docstring in

31
00:01:56,490 --> 00:02:03,210
there that has a usage example that is both good for developers to look at but also Python can run it

32
00:02:03,210 --> 00:02:07,900
to make sure that the code still works out as opposed to something might have changed.

33
00:02:07,950 --> 00:02:14,040
And if you just write your test this way then it works as both documentation and as tests for we talk

34
00:02:14,040 --> 00:02:15,100
about limitations.

35
00:02:15,300 --> 00:02:17,230
Let's look at a good old example.

36
00:02:17,330 --> 00:02:20,140
Ok here I have a similar set of tests.

37
00:02:20,160 --> 00:02:26,310
It's shorter where I have a function called the ADD A and B and then we have our good old docstring

38
00:02:26,310 --> 00:02:26,830
there.

39
00:02:26,970 --> 00:02:30,150
Double triple quotes no triple double quotes.

40
00:02:30,450 --> 00:02:32,730
And I've written two tests.

41
00:02:32,730 --> 00:02:33,960
These are the syntax right.

42
00:02:33,960 --> 00:02:36,110
So we use this little prompts.

43
00:02:36,390 --> 00:02:40,060
And then I say when you run Add come three it should return five.

44
00:02:40,160 --> 00:02:43,650
A new run at 100 for 200 You should get 300.

45
00:02:43,950 --> 00:02:46,810
But right now I'm returning a times b.

46
00:02:46,980 --> 00:02:48,000
So that's incorrect.

47
00:02:48,010 --> 00:02:48,870
It's not going to work.

48
00:02:48,960 --> 00:02:52,890
And if I run it I don't even have to actually execute add or anything.

49
00:02:52,890 --> 00:02:55,500
There's a special command I can ask Python to run.

50
00:02:55,500 --> 00:03:01,080
That will grab it will parse the doc strings and find all the tests run and then run them.

51
00:03:01,150 --> 00:03:07,680
It looks like this python 3 dash em doc test dash V and then the name of the file.

52
00:03:07,740 --> 00:03:08,700
Mine is called Doc.

53
00:03:08,700 --> 00:03:10,880
Test demo up why.

54
00:03:10,940 --> 00:03:13,340
So those two tests that I wrote are not going to work.

55
00:03:14,150 --> 00:03:17,120
And I get this nice little verbose output.

56
00:03:17,120 --> 00:03:21,390
So it starts off and says trying ad to come three expecting five.

57
00:03:21,770 --> 00:03:29,090
And then it freaks out because it got six and it moves on to the next one trying ad 100 200 expecting

58
00:03:29,270 --> 00:03:30,050
300.

59
00:03:30,200 --> 00:03:34,290
And it tells me failed example expected 300 got 20000.

60
00:03:34,610 --> 00:03:42,750
One item had failures two of two in duck test demo and zero past two failed total tests failed two failures.

61
00:03:42,770 --> 00:03:43,310
All right.

62
00:03:43,310 --> 00:03:46,360
So it's pretty cool in my opinion that it's able to do that.

63
00:03:46,370 --> 00:03:51,540
It's built in you know parses all the code from here figures out what's a test.

64
00:03:51,560 --> 00:03:52,220
It knows that.

65
00:03:52,220 --> 00:03:55,200
OK the code that comes after this we need to actually run.

66
00:03:55,310 --> 00:03:57,200
And then we should expect it to equal this.

67
00:03:57,200 --> 00:04:01,190
If not it's counted as a failed test and we'll print it out to the user.

68
00:04:01,460 --> 00:04:10,420
So if we just fix this for the plus side and now go back and run it call trying it expected 5 and I

69
00:04:10,430 --> 00:04:16,150
was OK trying expected 300 OK to pass two past and zero failed.

70
00:04:16,220 --> 00:04:17,660
All tests passed.

71
00:04:17,830 --> 00:04:18,380
Cool.

72
00:04:18,380 --> 00:04:21,500
Now let's add another test new function and another test.

73
00:04:21,500 --> 00:04:22,430
Now let's go about it.

74
00:04:22,460 --> 00:04:23,780
The TDD way.

75
00:04:23,930 --> 00:04:26,710
So we're going to go with red green Reflektor.

76
00:04:26,930 --> 00:04:35,150
Let's write a function called double and we'll start off with just double takes in an argument called

77
00:04:35,150 --> 00:04:35,850
values.

78
00:04:35,870 --> 00:04:37,810
And for now we'll just assume that at least.

79
00:04:37,850 --> 00:04:42,710
But before we do anything we're going to practice TDD and we're going to write our tests.

80
00:04:42,770 --> 00:04:44,380
So we need that docstring.

81
00:04:44,990 --> 00:04:49,840
And in here just read the docstring double the values in a list.

82
00:04:49,850 --> 00:04:51,290
That's our goal.

83
00:04:51,740 --> 00:04:57,940
And then we write our first test and we do this one to three greater than signs double.

84
00:04:57,980 --> 00:05:03,520
When we call it on I call it with 1 2 3 4.

85
00:05:03,680 --> 00:05:04,720
That's one test we get right.

86
00:05:04,730 --> 00:05:06,090
And what should we get back.

87
00:05:06,110 --> 00:05:14,920
We should expect a list with 2 4 6 and 8 and then we can write another test case test case if we called

88
00:05:14,920 --> 00:05:20,960
double with an empty list which we expect to get back an empty list and another one with a string this

89
00:05:20,960 --> 00:05:21,230
time.

90
00:05:21,230 --> 00:05:29,600
So if we call double and then we pass in let's say the list a b c we should expect this list the string

91
00:05:30,060 --> 00:05:32,310
the string B-B the string CC.

92
00:05:32,390 --> 00:05:37,420
And finally we're going to write one where we try something that shouldn't work.

93
00:05:37,470 --> 00:05:45,940
If I called double with a list inside of it that I don't know I had that say true and then none.

94
00:05:45,950 --> 00:05:47,560
We can't double those.

95
00:05:47,990 --> 00:05:52,400
And if we wanted to test to make sure that we get an error this is the worst part.

96
00:05:52,400 --> 00:05:53,320
I'm going to fast forward.

97
00:05:53,350 --> 00:05:55,630
You see what I have to type look at that.

98
00:05:55,760 --> 00:05:56,730
This is what I have to write.

99
00:05:56,740 --> 00:06:00,270
I have to mimic exactly what we would see in the Python REPL.

100
00:06:00,380 --> 00:06:06,710
So that is kind of a pain to write but let's practice TDD so I write my test and make sure we're in

101
00:06:06,710 --> 00:06:07,140
the red.

102
00:06:07,190 --> 00:06:08,590
Let's run the code.

103
00:06:08,690 --> 00:06:12,390
Here we go and we get two pass and four failed.

104
00:06:12,400 --> 00:06:15,540
Oh because it's running the first two I could comment this out.

105
00:06:15,560 --> 00:06:16,620
It's running these.

106
00:06:16,870 --> 00:06:19,520
So let's try one more time.

107
00:06:19,580 --> 00:06:21,030
We're getting zero pass for fails.

108
00:06:21,040 --> 00:06:22,890
We're completely in the red.

109
00:06:23,240 --> 00:06:23,800
All right.

110
00:06:24,000 --> 00:06:28,280
So now it's our job to make them pass red and then green.

111
00:06:28,340 --> 00:06:35,180
So to make some of these passed we could get away with something really small like returning an empty

112
00:06:35,180 --> 00:06:38,130
list that's going to make this work.

113
00:06:38,630 --> 00:06:39,710
So let's run it now.

114
00:06:42,190 --> 00:06:47,380
All right three of four one past three failed.

115
00:06:47,420 --> 00:06:52,790
Ok now we go back and we continue to make other tests pass.

116
00:06:52,990 --> 00:06:56,150
So let's just fix this and I'll just do two times.

117
00:06:56,320 --> 00:07:04,120
Let's call it element for element in most put a missing list in values.

118
00:07:04,120 --> 00:07:05,500
There you go.

119
00:07:05,530 --> 00:07:06,650
That's coming in.

120
00:07:06,650 --> 00:07:08,910
So we could do this also without a list comprehension.

121
00:07:08,930 --> 00:07:10,030
We could use map.

122
00:07:10,030 --> 00:07:13,760
You can do it manually by looping through and multiplying and appending to a list.

123
00:07:13,810 --> 00:07:14,560
Up to you.

124
00:07:14,740 --> 00:07:16,600
Now let's see if it works.

125
00:07:16,600 --> 00:07:17,840
Moment of Truth here.

126
00:07:18,860 --> 00:07:20,420
Three passed and one failed.

127
00:07:20,420 --> 00:07:20,720
OK.

128
00:07:20,750 --> 00:07:22,710
The one that's failing.

129
00:07:22,870 --> 00:07:26,280
See here's the one that failed.

130
00:07:26,450 --> 00:07:29,610
I think it is just the spaces in there.

131
00:07:30,500 --> 00:07:38,410
That problem two four six eight let's see is that really what the problem was let's try again.

132
00:07:40,150 --> 00:07:40,670
Yeah.

133
00:07:41,030 --> 00:07:42,100
So finicky.

134
00:07:42,200 --> 00:07:44,640
So that's my next point about Doc tests.

135
00:07:44,690 --> 00:07:51,380
I think it's cool but I've spent a lot of time already in this video finagling the syntax.

136
00:07:51,500 --> 00:07:57,410
This is a very specific syntax and it's unlike anything you type in Python otherwise and you have to

137
00:07:57,410 --> 00:07:58,880
be very very careful.

138
00:07:59,090 --> 00:07:59,370
OK.

139
00:07:59,390 --> 00:08:04,550
Now I have a couple of examples to show what bothers me some of the problems you might run into here

140
00:08:04,550 --> 00:08:10,370
is a perfectly good looking duck test in my opinion very simple function called Say hi that just returned

141
00:08:10,550 --> 00:08:14,630
the string high and I just test that when I call say hi.

142
00:08:14,660 --> 00:08:16,270
If you give me this string high.

143
00:08:16,730 --> 00:08:18,960
But alas when I run it.

144
00:08:19,080 --> 00:08:22,530
But if we get failed expected high.

145
00:08:22,550 --> 00:08:24,770
And it got single string high.

146
00:08:24,770 --> 00:08:26,040
Not double string.

147
00:08:26,420 --> 00:08:31,010
So Duck tests expects all strings to have single quotes not double quotes.

148
00:08:31,010 --> 00:08:32,540
So if you're comparing.

149
00:08:32,810 --> 00:08:38,510
We have to put single quotes there because it's automatically going to try and compare two single quotes.

150
00:08:38,510 --> 00:08:39,630
So frustrating.

151
00:08:39,980 --> 00:08:40,380
OK.

152
00:08:40,520 --> 00:08:45,020
So I mean I'll leave that one is a failure just so you can see as an example that it doesn't work.

153
00:08:45,020 --> 00:08:46,490
I've added another one.

154
00:08:46,490 --> 00:08:48,040
This one gets me all the time.

155
00:08:48,230 --> 00:08:49,200
Looks perfectly good.

156
00:08:49,260 --> 00:08:52,120
Just a function called True that and all it does is return true.

157
00:08:52,120 --> 00:08:58,230
In our case it's not really the significant significant point when we called true that we expect true.

158
00:08:58,700 --> 00:09:00,320
And that's what you should get.

159
00:09:00,590 --> 00:09:05,950
But if we look when I run it it fails expected true Got true.

160
00:09:06,020 --> 00:09:09,120
How do we know the difference and what's actually happening.

161
00:09:09,470 --> 00:09:16,200
Well there's a little white space right there trailing whitespace and that's throwing everything off.

162
00:09:16,250 --> 00:09:20,010
So we have to delete that and now I try and run it.

163
00:09:20,280 --> 00:09:24,130
And now passes as you can see here trying to do that expected true.

164
00:09:24,200 --> 00:09:25,240
OK.

165
00:09:25,820 --> 00:09:27,620
And one last example.

166
00:09:27,620 --> 00:09:29,090
This is called Make dict.

167
00:09:29,420 --> 00:09:36,890
And when we call it with a list of two items say a and b I expected a misspelled true I expected to

168
00:09:36,890 --> 00:09:41,420
return a verdict where both items are just set to true in a dictionary.

169
00:09:41,420 --> 00:09:45,160
So the key is a and b are both the keys and they're true.

170
00:09:45,410 --> 00:09:46,700
So I have that down here.

171
00:09:46,700 --> 00:09:48,670
True for key in keys.

172
00:09:49,100 --> 00:09:53,570
And if I run it it should work but nope it doesn't.

173
00:09:53,570 --> 00:10:00,680
You can see here the problem is expected B to be first and then A and he got a first and then B which

174
00:10:00,680 --> 00:10:01,880
normally is not a problem.

175
00:10:01,880 --> 00:10:08,080
These are dictionaries that isn't posed to be an order that matters but in tests the order of keys and

176
00:10:08,080 --> 00:10:09,540
a dictionary does matter.

177
00:10:09,590 --> 00:10:14,990
So yeah it's a tenth of a minefield when you're writing these tests you get to be really careful.

178
00:10:15,200 --> 00:10:18,890
You really have to mind your whitespace and your quotation marks.

179
00:10:18,980 --> 00:10:20,410
It kind of drives me insane.

180
00:10:20,750 --> 00:10:25,270
The issues it's index's is bizarre to begin with the syntax is weird.

181
00:10:25,340 --> 00:10:30,890
It also clutters up our function so you can see things get really long for a single a single line function

182
00:10:30,890 --> 00:10:33,490
that just returns a plus b.

183
00:10:33,560 --> 00:10:38,420
I mean you probably wouldn't need to write test for that anyways but in our case it's like 10 times

184
00:10:38,420 --> 00:10:39,020
as long.

185
00:10:39,350 --> 00:10:46,370
And on top of all that Doc tests actually like a lot of the important features capabilities of things

186
00:10:46,370 --> 00:10:48,600
like unit test which we'll see in the next video.

187
00:10:48,740 --> 00:10:54,140
For example if we're working with it we're testing I don't know 10 functions and they all use the same

188
00:10:54,140 --> 00:10:56,660
data and we want to test them with one object.

189
00:10:56,900 --> 00:11:01,880
Want to run code before every test or after every test we would have to duplicate that and every docstring

190
00:11:02,570 --> 00:11:04,190
using something like unit test.

191
00:11:04,250 --> 00:11:10,120
We are able to say run this code before every test run this code after every test and it reduces duplication

192
00:11:10,460 --> 00:11:15,810
and thusly the tests are just kind of brittle finicky grouchy.

193
00:11:15,930 --> 00:11:22,130
What ever you want to call them they are not my first choice for adding tests plus if I am writing documentation

194
00:11:22,130 --> 00:11:25,420
for something I want it to be thorough then I will write doc tests.

195
00:11:25,430 --> 00:11:27,290
But I still don't really enjoy it.

196
00:11:27,460 --> 00:11:30,960
In the next video however I'm going to show you how to write unit tests.
