1
00:00:00,240 --> 00:00:00,960
Welcome back.

2
00:00:01,110 --> 00:00:04,450
In this video we're going to do a slightly more complex example.

3
00:00:04,620 --> 00:00:09,340
And I'm also going to show you how groups work in Python when we're working with rejects.

4
00:00:09,530 --> 00:00:12,230
So the rejects we're going to use I've already written it out.

5
00:00:12,300 --> 00:00:14,500
It's based off of some things that I found on mine.

6
00:00:14,550 --> 00:00:18,850
It has to do with you or else so let me zoom in a bit.

7
00:00:19,010 --> 00:00:19,680
OK.

8
00:00:20,210 --> 00:00:26,510
What it states is that every you know needs to start with HTP and then an optional s because some will

9
00:00:26,510 --> 00:00:29,830
be HTP as others won't they'll just be HGP.

10
00:00:29,930 --> 00:00:35,140
Then we have colon slash slash BW And then the dot which we have to escape.

11
00:00:35,180 --> 00:00:37,380
So it's the backslash dot.

12
00:00:37,400 --> 00:00:42,950
Then there I found this out between 2 and 256 characters for the D.

13
00:00:43,040 --> 00:00:49,060
What would you call it the domain name Google Gmail whatever the domain name is you to me.

14
00:00:49,310 --> 00:00:55,540
And it's upper case lower case letters and dashes to to 256 followed by another dot.

15
00:00:55,550 --> 00:00:59,380
So this is going to be you know HTP colon slash slash WW.

16
00:00:59,450 --> 00:01:05,720
Google dot and then for the com for the top level domain it's two to six letters that are lowercase.

17
00:01:06,110 --> 00:01:07,220
And then afterwards.

18
00:01:07,220 --> 00:01:12,890
So let me just type something that matches that should be a match.

19
00:01:13,210 --> 00:01:19,630
But then this entire large chunk at the end notice there's a star at the end which means zero or more

20
00:01:20,500 --> 00:01:21,630
optional.

21
00:01:21,730 --> 00:01:27,830
And these are any additional characters that could come afterwards like Slash search slash.

22
00:01:27,990 --> 00:01:28,630
I don't know.

23
00:01:28,630 --> 00:01:37,120
Q Do you have a question mark for the query string question mark Q equals taco's or something.

24
00:01:37,120 --> 00:01:42,500
This all matches this is after the column.

25
00:01:42,640 --> 00:01:47,940
So these are the allowed characters there we can have ampersands have question marks.

26
00:01:47,940 --> 00:01:49,740
Yeah I didn't write this all from scratch.

27
00:01:49,740 --> 00:01:54,640
I found somebody who knew more about it than I do about what characters are allowed.

28
00:01:54,640 --> 00:01:59,310
So this is our rejects and it will match things ranging from that to simpler.

29
00:01:59,680 --> 00:02:02,420
Yes you know cat.

30
00:02:02,540 --> 00:02:04,940
I know that is also a match.

31
00:02:05,200 --> 00:02:07,450
OK so I'm going to copy it over here to Python.

32
00:02:07,510 --> 00:02:13,150
Me wrap the whole thing in quotes make it our raw string.

33
00:02:13,150 --> 00:02:14,740
Notice how it changed.

34
00:02:14,740 --> 00:02:19,090
There were some problems here and that are oh I just broke it.

35
00:02:19,090 --> 00:02:19,720
There you go.

36
00:02:19,990 --> 00:02:21,780
And yeah it looks good.

37
00:02:21,880 --> 00:02:22,500
OK.

38
00:02:22,860 --> 00:02:26,200
What we're going to do is to compile

39
00:02:28,670 --> 00:02:37,110
that string a giant regular expression save that let's just call this you Arel rejects equals.

40
00:02:37,550 --> 00:02:38,060
OK.

41
00:02:38,180 --> 00:02:42,310
So now what I want to focus on is that there's a lot of components to this you know.

42
00:02:42,470 --> 00:02:48,130
And we can start by just you know doing what we've already seen matching a string which is just your

43
00:02:48,140 --> 00:02:56,370
average x dot search and then let's just see if we do HTP colon slash slash BW dot.

44
00:02:56,860 --> 00:03:06,100
Oh was that YouTube dot com slash videos or something like that but save that variable.

45
00:03:06,140 --> 00:03:13,890
And then let's print match dot group and just make sure that it works and when I run my file I call

46
00:03:13,890 --> 00:03:17,530
that you are elde up Hawai and it works fine to the match.

47
00:03:17,860 --> 00:03:18,430
OK.

48
00:03:18,800 --> 00:03:24,680
What I really want to focus on however is if I was just showing you you know how to do a slightly more

49
00:03:24,680 --> 00:03:28,250
advanced regular expression this is kind of just review of what we've seen so far.

50
00:03:28,370 --> 00:03:32,660
But I want to show you what happens when we add parentheses in here to add groups.

51
00:03:32,720 --> 00:03:37,940
Imagine that we have a bunch of you are Elves but say we're building some sort of application where

52
00:03:38,180 --> 00:03:39,590
users submit you URLs.

53
00:03:39,710 --> 00:03:45,320
And I wanted to take some sort of I want to do some analytics on I want to keep track of how many links

54
00:03:45,320 --> 00:03:46,490
are coming from YouTube.

55
00:03:46,490 --> 00:03:49,340
How many sites are HTP versus HEG.

56
00:03:49,350 --> 00:03:50,500
Yes.

57
00:03:50,660 --> 00:03:52,190
I want to just break things up.

58
00:03:52,220 --> 00:03:58,530
So I want to know that this is a valid you Arel which right now it is matching the entire thing.

59
00:03:58,760 --> 00:04:03,170
But what if I also wanted to know in particular what was the base domain.

60
00:04:03,200 --> 00:04:09,620
So ignoring everything after this dot com ignoring whatever random stuff comes afterwards I just want

61
00:04:09,620 --> 00:04:12,690
to know what the base domain was.

62
00:04:12,730 --> 00:04:15,300
I think it's called based on me and I'm going to call it that.

63
00:04:15,630 --> 00:04:21,410
And I want to keep track of that for the district's purposes or because I want to go you know go get

64
00:04:21,410 --> 00:04:26,120
an icon for YouTube to match this you are well let's just let's just go with it and say that's what

65
00:04:26,120 --> 00:04:26,780
I want to do.

66
00:04:26,990 --> 00:04:29,040
Well it's not too difficult.

67
00:04:29,240 --> 00:04:36,050
All we do is put parentheses around anything that we want to group and you little piece of data that

68
00:04:36,050 --> 00:04:37,560
we want to extract separately.

69
00:04:37,730 --> 00:04:45,110
And we saw that if we go back all the way back here if I put parens around a start after the dot to

70
00:04:45,620 --> 00:04:55,290
do including the w w w w w and then after the dot com or dot org or whatever the top level domain is.

71
00:04:55,420 --> 00:04:59,640
And now I add in you are el HTP colon to slash slash.

72
00:04:59,860 --> 00:05:05,370
Google dot com slash blaw takes a moment it matches the whole thing.

73
00:05:05,500 --> 00:05:10,000
But then also I'm getting this google.com as it separate.

74
00:05:10,000 --> 00:05:12,780
Match capture.

75
00:05:13,000 --> 00:05:14,500
So I could add another one in.

76
00:05:14,590 --> 00:05:18,880
Let's say I want to know if it's HTP or HTP S P S.

77
00:05:18,880 --> 00:05:20,340
There we go.

78
00:05:20,440 --> 00:05:25,730
Now it's telling me all right the first thing that you put Prendes around it matched HGP.

79
00:05:25,750 --> 00:05:29,370
And the second one you put Prince around matched GWW Google dot com.

80
00:05:30,390 --> 00:05:30,870
OK.

81
00:05:31,210 --> 00:05:33,650
Let's go back to Python now and do the same thing.

82
00:05:33,850 --> 00:05:39,580
So we'll have our first group just to know you know the protocol if it's HTP or age.

83
00:05:39,610 --> 00:05:44,800
Let's say we're just trying to keep track of that for some reason just just go with me with this example.

84
00:05:44,980 --> 00:05:53,380
And then here we'll wrap it around WMW all the way to here which is the top level domain dot com dot

85
00:05:53,380 --> 00:06:00,640
net dot us and let's do one at the end as well just so you can see this movie anything after the dot

86
00:06:00,640 --> 00:06:06,980
com or whatever the top level domain is the query string an additional path other information in the

87
00:06:07,100 --> 00:06:08,050
URL.

88
00:06:08,110 --> 00:06:11,480
And now if I still if I print matched out group nothing should change.

89
00:06:11,500 --> 00:06:14,130
It still gives me the entire match.

90
00:06:14,290 --> 00:06:20,680
So I'm not saying you know I'm not altering the behavior of that but if I instead do matched up groups

91
00:06:20,920 --> 00:06:22,070
with an s.

92
00:06:22,150 --> 00:06:27,360
So actually let me do both I'll do group first and then groups first.

93
00:06:27,420 --> 00:06:28,760
It gives me the whole match.

94
00:06:28,770 --> 00:06:34,510
But now it's giving me this tuple that has my first group which was the protocol.

95
00:06:34,530 --> 00:06:41,710
The second one which was you know the whatever we're calling this the base you r l b w w d u tube Delcam

96
00:06:41,730 --> 00:06:44,750
and the third one was the additional information.

97
00:06:45,300 --> 00:06:49,350
So I've extracted those separately now you can imagine you could do the same thing with the phone number

98
00:06:49,350 --> 00:06:54,960
if you want to grab the area code separate so that you could try and figure out you know most your users

99
00:06:54,960 --> 00:06:56,700
where are they coming from what area codes.

100
00:06:56,730 --> 00:07:03,150
And you know assemble them or do some sort of analysis on that or email addresses you want to extract

101
00:07:03,810 --> 00:07:07,520
you know what provider people are using the most is that Gmail is at Yahoo.

102
00:07:07,680 --> 00:07:10,500
I assume it's Gmail but you could still find that out.

103
00:07:10,740 --> 00:07:13,080
Also I'm going to comment this one out.

104
00:07:13,200 --> 00:07:20,160
If we pass in a number to match that group like one and I refresh or redo my code you'll see that it's

105
00:07:20,160 --> 00:07:21,540
giving me the first group.

106
00:07:21,750 --> 00:07:23,830
The behavior is slightly weird here.

107
00:07:23,970 --> 00:07:31,430
I'm going to just copy this a couple times in a Doomadgee group at 0 1 2 and 3 to lead you to print

108
00:07:31,440 --> 00:07:31,970
here.

109
00:07:32,060 --> 00:07:34,990
So a matched group of 0 is going to give me the entire match.

110
00:07:34,980 --> 00:07:38,770
It's the same as just doing Match.com group like this.

111
00:07:39,210 --> 00:07:44,310
But if I pass in a one that's going to give me the first item I kind of don't like that it's set up

112
00:07:44,310 --> 00:07:48,160
like this personally because everything else in Python starts counting at zero.

113
00:07:48,210 --> 00:07:49,600
But this is how it is.

114
00:07:49,860 --> 00:07:50,770
Let's look at it.

115
00:07:51,090 --> 00:07:51,540
OK.

116
00:07:51,690 --> 00:07:54,890
So zero gave us the entire string that matched.

117
00:07:54,960 --> 00:08:02,630
Then we had the first item which was the protocol then the domain and then everything else.

118
00:08:02,750 --> 00:08:06,870
So if we wanted to we could do something I'll just fast forward through this just a sec.

119
00:08:07,150 --> 00:08:08,160
Ok I'm back.

120
00:08:08,210 --> 00:08:10,080
I mean delete this one.

121
00:08:10,160 --> 00:08:16,610
All that I did was just add some strings just to print out nicely the protocol and then the domain and

122
00:08:16,610 --> 00:08:18,580
then everything else separated.

123
00:08:18,890 --> 00:08:22,230
And if I run it there we go.

124
00:08:22,270 --> 00:08:24,080
It's pulling those pieces separately.

125
00:08:24,200 --> 00:08:30,930
Let's just test it with a different string Now now let's do HGP s GWW dot.

126
00:08:31,070 --> 00:08:31,890
I don't know.

127
00:08:31,890 --> 00:08:33,120
I keep doing Google.

128
00:08:33,130 --> 00:08:35,420
How about my web site.

129
00:08:35,560 --> 00:08:39,750
Com that's put a dash in there because that's allowed.

130
00:08:39,980 --> 00:08:49,070
And let's add a query string and so slash by no question mark data equals law.

131
00:08:49,170 --> 00:08:50,970
And I don't know.

132
00:08:51,040 --> 00:08:51,750
Equals.

133
00:08:51,980 --> 00:08:56,090
Yes but stewed dog been doing too much cat stuff recently.

134
00:08:56,100 --> 00:08:58,620
OK let's test it out.

135
00:08:58,640 --> 00:08:59,880
There we go.

136
00:08:59,940 --> 00:09:01,710
Protocols HTP s.

137
00:09:01,820 --> 00:09:03,040
Here's the domain.

138
00:09:03,140 --> 00:09:05,010
And then here's everything else.

139
00:09:05,290 --> 00:09:05,720
OK.

140
00:09:05,930 --> 00:09:09,550
So that all has to do with adding parentheses around.

141
00:09:09,770 --> 00:09:14,010
Pieces of our rejects pattern so that we can access them later individually.

142
00:09:14,030 --> 00:09:19,130
Now remember this gives us everything just some that up.

143
00:09:19,130 --> 00:09:21,410
It gives us oh well actually that's groups.

144
00:09:21,440 --> 00:09:24,210
Sorry about that if I do group.

145
00:09:24,230 --> 00:09:26,740
This gives us everything in a tuple using groups.

146
00:09:26,750 --> 00:09:31,580
But if I do group or group 0 it gives us the entire match and that's pretty much it.
