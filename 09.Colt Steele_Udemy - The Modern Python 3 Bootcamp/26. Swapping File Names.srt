1
00:00:00,180 --> 00:00:01,280
Hey welcome back.

2
00:00:01,350 --> 00:00:07,110
And this video we're going to use sub with a substitution method to find it in place but rather than

3
00:00:07,110 --> 00:00:11,630
replacing with some new text we're going to swap items within a given string.

4
00:00:11,640 --> 00:00:14,580
So here I have a list of book titles.

5
00:00:14,580 --> 00:00:21,620
Imagine that I had this on my computer and rather than what is this nine books in this series it's this

6
00:00:21,630 --> 00:00:24,150
series called The Tales of the city.

7
00:00:24,150 --> 00:00:25,700
One two three four five six yeah.

8
00:00:25,930 --> 00:00:26,370
Okay.

9
00:00:26,430 --> 00:00:33,240
Rather than just these imagine that I had an entire library of ten thousand books or movies or songs

10
00:00:33,600 --> 00:00:35,840
any type of media with a file name.

11
00:00:36,060 --> 00:00:42,870
And they all followed the format where there was the name of the file and then a space and then a date

12
00:00:42,870 --> 00:00:46,260
for numbers a date in parentheses.

13
00:00:46,260 --> 00:00:52,650
And this is great but let's say that like in a series like this there's a particular order to them and

14
00:00:52,650 --> 00:00:53,350
I need to.

15
00:00:53,490 --> 00:00:54,120
I'm starting out.

16
00:00:54,150 --> 00:00:57,550
I want to know what order to read if I try and sort them right now.

17
00:00:57,570 --> 00:01:02,040
I mean this is kind of silly because I can just manually it's not that hard to look at the dates here

18
00:01:02,070 --> 00:01:06,280
but if there was 10000 of them here I wanted to know what order they're in.

19
00:01:06,360 --> 00:01:12,970
If I try and sort them right now or do titles does sorts and then print titles.

20
00:01:13,650 --> 00:01:14,600
You know what to expect.

21
00:01:14,610 --> 00:01:21,630
It will sort alphabetically based off the first character and I end up with baby cakes first and then

22
00:01:21,750 --> 00:01:24,500
all the way down to the days of a madrigal.

23
00:01:24,630 --> 00:01:26,220
That's not the correct order.

24
00:01:26,400 --> 00:01:33,930
So let's say that I want to swap things around and change the format so that we get let's say 1978 space

25
00:01:34,620 --> 00:01:36,900
tales of the city like that.

26
00:01:36,990 --> 00:01:39,840
This is it with the new order I want I don't want the per end either.

27
00:01:39,990 --> 00:01:40,890
I want just the date.

28
00:01:40,890 --> 00:01:41,700
How about a dash.

29
00:01:41,700 --> 00:01:43,500
Let's do that like that.

30
00:01:43,560 --> 00:01:46,120
That's what I'm looking for for all of these books.

31
00:01:46,420 --> 00:01:47,050
OK.

32
00:01:47,550 --> 00:01:51,930
So what we're going to do is start off by defining our pattern.

33
00:01:51,930 --> 00:01:53,740
We need to match two different pieces.

34
00:01:53,760 --> 00:01:54,710
The title here.

35
00:01:54,870 --> 00:01:56,500
And then the date.

36
00:01:56,580 --> 00:01:59,700
So let's start by defining our pattern.

37
00:01:59,730 --> 00:02:03,280
And before I forget import are we not making that mistake.

38
00:02:03,360 --> 00:02:04,420
The third time.

39
00:02:04,740 --> 00:02:14,150
And then down here we'll do pattern equals precompile do rostering and we'll say it needs to start off.

40
00:02:14,190 --> 00:02:22,890
So we'll use the carrot and start off with a word character any number of word characters and that will

41
00:02:22,890 --> 00:02:25,740
work but it will only get us to here.

42
00:02:26,070 --> 00:02:31,440
We want it to keep going and include all everything until we get to the data at least.

43
00:02:31,440 --> 00:02:33,520
So I'll just add the spacing.

44
00:02:33,780 --> 00:02:34,120
OK.

45
00:02:34,140 --> 00:02:41,660
So that will get us all of this and I'm going to add an extra space here and I'll explain why in a moment.

46
00:02:41,790 --> 00:02:44,680
But let's come back to it and focus on the date.

47
00:02:44,850 --> 00:02:49,160
So to match the Prendes we need to do backslash parentheses.

48
00:02:49,530 --> 00:02:52,270
So that would give us the open that would give us a close.

49
00:02:52,470 --> 00:02:56,700
And then in before in between we want four numbers.

50
00:02:56,700 --> 00:02:59,530
So I'm just going to do digit 4.

51
00:03:00,310 --> 00:03:00,600
OK.

52
00:03:00,600 --> 00:03:05,720
So that should match opening parentheses for numbers closing parentheses.

53
00:03:06,050 --> 00:03:09,450
UPS which gives us this whole thing here.

54
00:03:09,450 --> 00:03:15,390
Now the reason I added the space if I didn't add a space here this regular expression that's first part

55
00:03:16,080 --> 00:03:21,700
would match all of this including that space and that's OK.

56
00:03:21,720 --> 00:03:22,510
That's correct.

57
00:03:22,510 --> 00:03:27,820
Because I'm telling it to match all weird characters and spaces until we hit this parentheses.

58
00:03:28,170 --> 00:03:29,470
So that's what it's going to do.

59
00:03:29,490 --> 00:03:34,810
But then when I swap the two I will end up with a space at the end of my file name.

60
00:03:34,920 --> 00:03:40,320
Because if I just select this and I leave that space there I move this to the front.

61
00:03:40,650 --> 00:03:44,870
Even if I add a space here or a dash I still have that space at the end.

62
00:03:44,880 --> 00:03:48,030
So instead when I group these things I'm going to do that now.

63
00:03:48,300 --> 00:03:55,660
My first grouping is going to include any number of word characters and spaces except the last one.

64
00:03:55,800 --> 00:04:01,870
So any number of word characters and spaces until we get to this one that comes right before the parentheses

65
00:04:01,890 --> 00:04:02,690
and the date.

66
00:04:02,970 --> 00:04:04,640
So it's just a way of getting around that.

67
00:04:04,770 --> 00:04:09,330
And then I could put parens around the entire date like this.

68
00:04:09,900 --> 00:04:15,660
And I can start with that but you'll see the problem it's going to select the parentheses and I'm trying

69
00:04:15,660 --> 00:04:19,370
to change the format to just be the date dash.

70
00:04:19,440 --> 00:04:23,990
So I don't want the prince but substitute things to so that's going to be patterned.

71
00:04:24,060 --> 00:04:29,090
Sub save it to a variable just called results patterned out sub.

72
00:04:29,400 --> 00:04:33,180
And I'll just put a string in there for now and pass in.

73
00:04:33,210 --> 00:04:34,890
Let's just do it on a single title.

74
00:04:34,900 --> 00:04:37,930
Titles 0 to start this first one.

75
00:04:38,760 --> 00:04:40,060
And what do we want to solve.

76
00:04:40,110 --> 00:04:45,990
This is where we need to use our backslash G for group and then a number.

77
00:04:46,180 --> 00:04:53,010
The group that comes second this one here group two is what I want first now and then I want a dash

78
00:04:54,300 --> 00:05:01,970
and then backslash G group 1 which is going to be all of this.

79
00:05:02,870 --> 00:05:04,640
Let's see what it looks like.

80
00:05:08,430 --> 00:05:09,370
There we go.

81
00:05:09,450 --> 00:05:10,130
1984.

82
00:05:10,140 --> 00:05:13,280
You can ignore this part that's coming from here.

83
00:05:13,330 --> 00:05:17,580
Get rid of that 1984 dash baby cakes.

84
00:05:17,730 --> 00:05:21,790
But I do have those parents around that date to get rid of those.

85
00:05:22,200 --> 00:05:24,500
I just won't add them into the group.

86
00:05:24,600 --> 00:05:30,690
I'll change this so that the parents are only around the four digits.

87
00:05:31,080 --> 00:05:32,190
So it's kind of crazy.

88
00:05:32,190 --> 00:05:37,410
It's very compact and gross to look at but we're selecting we're looking for parents.

89
00:05:37,410 --> 00:05:42,750
This is the actual print the see character opening and closing and in between those four digits I'm

90
00:05:42,750 --> 00:05:45,860
putting in a captured group which will be Group Two.

91
00:05:46,230 --> 00:05:52,720
So now when I run this there we go 1984 dash baby cakes.

92
00:05:52,840 --> 00:05:57,040
So now I'm just going to run through every title and run this code.

93
00:05:57,400 --> 00:06:01,900
So it's going to be for book titles.

94
00:06:02,140 --> 00:06:03,270
We make a new list.

95
00:06:03,430 --> 00:06:09,260
I'll just call this fixed books or fixed titles.

96
00:06:09,570 --> 00:06:15,520
It's an empty list and then I saw it again OK.

97
00:06:15,790 --> 00:06:21,880
Then I'm going to come down here and for book and titles I'm going to just make a very I'll just call

98
00:06:21,880 --> 00:06:28,450
it result still instead of title zero though I'm going to use book for each book and titles or place

99
00:06:28,870 --> 00:06:31,550
and then all appendant to fixed titles.

100
00:06:34,600 --> 00:06:39,940
I could do it on one line but it would be pretty long and then I'm going to sort.

101
00:06:39,940 --> 00:06:46,970
Fixed titles at the end because now all the dates will be first and then let's print fixed titles.

102
00:06:47,650 --> 00:06:49,770
OK let's see if it works.

103
00:06:51,420 --> 00:06:52,150
Awesome.

104
00:06:52,200 --> 00:06:57,610
So we get from 1978 1980 1982 all the way up to 2014.

105
00:06:57,660 --> 00:06:58,800
So it's working.

106
00:06:58,810 --> 00:07:05,550
We've successfully swapped not just directly swap to the data we also you know ignored this space at

107
00:07:05,550 --> 00:07:11,070
the end we ignored the parentheses but we took the date itself put it at the beginning add a dash and

108
00:07:11,070 --> 00:07:16,920
then kept the title pretty cool and difficult to do without projects like pretty much anything in the

109
00:07:16,920 --> 00:07:18,660
section that I showed.

110
00:07:18,660 --> 00:07:23,160
So hopefully you can see some utility in something like this whether you know this is kind of a contrived

111
00:07:23,160 --> 00:07:28,530
example like a lot of the things they have to show you but still imagine this on a much larger scale

112
00:07:28,620 --> 00:07:34,830
an entire collection of files or an entire directory of you know something you downloaded that has a

113
00:07:34,830 --> 00:07:38,460
million not a million 100 or 200 or 300 files.

114
00:07:38,910 --> 00:07:43,920
It's it can be useful to use a regular expression to do something like this to swap your data around.

115
00:07:43,920 --> 00:07:48,900
So just to wrap up if you're still uncomfortable with this syntax I know it's kind of weird but this

116
00:07:48,900 --> 00:07:50,580
just references groups.

117
00:07:50,580 --> 00:07:53,410
We could also give these a name instead.

118
00:07:53,430 --> 00:07:59,030
So I can do question mark P and giving it a name like what's this title.

119
00:07:59,120 --> 00:08:01,780
And then here do the same thing.

120
00:08:02,100 --> 00:08:08,020
I covered this earlier on in the section if you skipped through that this might be kind of odd to date.

121
00:08:08,040 --> 00:08:10,680
And then here I can replace this.

122
00:08:10,800 --> 00:08:12,260
I'll keep both lines.

123
00:08:12,610 --> 00:08:13,940
Comment that one out.

124
00:08:14,610 --> 00:08:17,830
But I will replace it with G date.

125
00:08:17,960 --> 00:08:20,200
Dash title.

126
00:08:20,700 --> 00:08:25,570
And instead of using the group numbers 1 and 2 I'm using the names that I gave them.

127
00:08:26,010 --> 00:08:27,740
And does it still work.

128
00:08:28,230 --> 00:08:30,070
Yes there we go.

129
00:08:30,390 --> 00:08:35,790
So if you prefer that it's a little longer but it's also easier down here to refer to things based off

130
00:08:35,790 --> 00:08:36,570
of what they are.

131
00:08:36,580 --> 00:08:38,820
The name is rather than a random number.

132
00:08:38,820 --> 00:08:40,690
Well it's not random but rather than a number.

133
00:08:40,820 --> 00:08:41,280
OK.

134
00:08:41,340 --> 00:08:47,430
So we covered a ton of regular expressions outside of Python as well as a lot of the module methods

135
00:08:47,640 --> 00:08:51,330
we don't cover everything but we covered the most important things.

136
00:08:51,360 --> 00:08:54,450
Searching matching working with groups.

137
00:08:54,450 --> 00:09:00,870
And now the last couple of videos using the sub method to replace things or swap things around a lot

138
00:09:00,870 --> 00:09:01,940
of useful stuff.
