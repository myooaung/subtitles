1
00:00:00,210 --> 00:00:01,590
All right welcome back.

2
00:00:01,620 --> 00:00:08,310
So we have one small topic to talk about around importing our own custom modules and it has to do with

3
00:00:08,310 --> 00:00:12,900
this special underscore or Dondre double underscore name variable.

4
00:00:12,900 --> 00:00:15,900
So double underscore name double underscore.

5
00:00:15,980 --> 00:00:20,870
So remember that those are sort of special properties that you're not supposed to do anything with.

6
00:00:20,890 --> 00:00:23,110
It's supposed to touch them but they exist.

7
00:00:23,160 --> 00:00:29,690
And the way that name works every file every module has its own name variable.

8
00:00:29,730 --> 00:00:37,980
So Python gives it the name variable and by default the value of double underscore name in the main

9
00:00:37,980 --> 00:00:43,730
file that is being run is equal to double underscore main double underscore main.

10
00:00:43,740 --> 00:00:45,750
So let me just show you to make this a bit clearer.

11
00:00:45,750 --> 00:00:51,420
It's a very weird thing to talk about with slides only so sublime I have two different files one is

12
00:00:51,420 --> 00:00:53,110
called Say hi.

13
00:00:53,310 --> 00:00:59,910
And one is called say stop like if you've never heard that before it's a slang term for what's up.

14
00:01:00,390 --> 00:01:05,820
I don't know if people still say it but say hi and say sup and all I'm going to do is to find a single

15
00:01:05,820 --> 00:01:15,510
function called Say hi no parameters and it's just going to print high and then afterwards my name is

16
00:01:15,720 --> 00:01:24,420
and I'll send it to my double underscore name is and then all interpolates and F string double underscore

17
00:01:24,510 --> 00:01:25,960
name OK.

18
00:01:26,340 --> 00:01:30,080
And then let's execute say hi once at the bottom just like this.

19
00:01:30,300 --> 00:01:37,490
So now when I run this Python 3 say hi we get Hi my name is Main.

20
00:01:37,620 --> 00:01:42,340
So I'm going to copy this and twitch it to say sup S U P.

21
00:01:42,510 --> 00:01:47,970
And the only difference I'll have here is my name is and I'll keep that the same but I'll just have

22
00:01:47,970 --> 00:01:56,320
it say sup and then we'll call say sup very silly I know but if I execute this and I call a supped up

23
00:01:56,540 --> 00:01:57,790
I get the same thing.

24
00:01:57,870 --> 00:01:58,540
Sup.

25
00:01:58,560 --> 00:02:00,700
My name is Main.

26
00:02:01,020 --> 00:02:07,950
So all of this shows us is that this name variable is set equal to Main in the main file when we execute

27
00:02:07,950 --> 00:02:08,470
the file.

28
00:02:08,520 --> 00:02:11,300
So I'm directly executing say sup.

29
00:02:11,340 --> 00:02:12,580
So in that case.

30
00:02:12,660 --> 00:02:15,480
Inside of that file name is set to main.

31
00:02:15,570 --> 00:02:18,420
But now let's require one inside the other.

32
00:02:18,600 --> 00:02:28,510
So at the top of say Hi I'm now going to import and I'll do from sets up import the say sub function.

33
00:02:28,650 --> 00:02:32,800
So from this file import this function just like this.

34
00:02:32,820 --> 00:02:37,890
And then after say hi let's call say sup.

35
00:02:38,000 --> 00:02:38,480
Right.

36
00:02:38,570 --> 00:02:40,160
So it's going to run.

37
00:02:40,160 --> 00:02:42,020
Say hi first and we should see.

38
00:02:42,020 --> 00:02:45,440
Hi my name is and whatever name is inside of say hi.

39
00:02:45,530 --> 00:02:50,240
And then we'll run say up and we should see what name is instead of say sup.

40
00:02:50,270 --> 00:02:51,380
So let's see what happens.

41
00:02:51,380 --> 00:03:00,870
Clear this out and I run say hi that's the file hit enter and when you look at that it's kind of weird

42
00:03:00,960 --> 00:03:01,960
right.

43
00:03:01,980 --> 00:03:04,060
We have three things showing up.

44
00:03:04,140 --> 00:03:10,050
So even though we only executed two functions three things are showing up and not only that but the

45
00:03:10,050 --> 00:03:12,350
very first thing to run is Suppe.

46
00:03:12,360 --> 00:03:15,160
My name is say sup then.

47
00:03:15,180 --> 00:03:17,140
Hi my name is Maine.

48
00:03:17,250 --> 00:03:18,440
And then Suppe.

49
00:03:18,450 --> 00:03:19,640
My name is say South.

50
00:03:19,650 --> 00:03:22,610
Ok I'm tired of saying stuff but what's happening here.

51
00:03:22,620 --> 00:03:25,060
Well explain it in detail in just a moment.

52
00:03:25,200 --> 00:03:28,610
But the file itself that we're running is called Say hi.

53
00:03:28,620 --> 00:03:29,950
That's the main file.

54
00:03:30,030 --> 00:03:36,530
So the value of name instead of say high will be main If it's the main file we're running.

55
00:03:36,660 --> 00:03:39,500
Say Suppe is not the main file we're running.

56
00:03:39,510 --> 00:03:41,960
It's being imported.

57
00:03:41,960 --> 00:03:47,910
And so the value of it is the name of that file which in this case is say sup.

58
00:03:47,910 --> 00:03:54,540
So name is just a variable that refers to the name of the module unless it is the main file that you're

59
00:03:54,540 --> 00:03:55,190
executing.

60
00:03:55,200 --> 00:03:57,750
But then why are we seeing such.

61
00:03:57,810 --> 00:03:59,550
My name is say sup first.

62
00:03:59,640 --> 00:04:00,790
Why is that happening.

63
00:04:00,840 --> 00:04:05,700
And to understand that we go back to the slides just to recap in every file if it's the main file being

64
00:04:05,700 --> 00:04:08,770
executed the value of name is mine.

65
00:04:08,850 --> 00:04:14,430
Otherwise if it's being imported It's the value of name is the file name.

66
00:04:14,930 --> 00:04:18,880
OK so here's what happens when we actually import something.

67
00:04:19,260 --> 00:04:21,160
Python tries to find the module.

68
00:04:21,360 --> 00:04:24,020
So it's looking for a file called say subtype p y.

69
00:04:24,260 --> 00:04:29,640
If it doesn't find it throws an error but if it does find it which is what happened in our example it

70
00:04:29,640 --> 00:04:33,080
runs the code inside of the module that's being imported.

71
00:04:33,330 --> 00:04:37,920
So inside of say sup remember I'm calling say sup.

72
00:04:37,980 --> 00:04:44,190
So even though I'm only calling it once in this file which is this is the only file I'm trying to run

73
00:04:44,760 --> 00:04:50,550
because it's running in this file or because I am calling it in this file the first thing that happens

74
00:04:50,550 --> 00:04:52,640
is Python says OK I'm looking for say sup.

75
00:04:52,650 --> 00:04:53,520
Oh I found it.

76
00:04:53,580 --> 00:04:54,600
I get to execute it.

77
00:04:54,690 --> 00:04:58,090
So it runs that file and then it sees 0.

78
00:04:58,110 --> 00:05:01,320
He also wants me to do say hi and now say sup again.

79
00:05:01,320 --> 00:05:07,950
So to prevent code from being run if it's not in the main file which are execute there's a little trick

80
00:05:07,950 --> 00:05:08,620
we can do.

81
00:05:08,910 --> 00:05:09,890
It's pretty simple.

82
00:05:09,900 --> 00:05:16,800
We're just going to check if name is equal to men then we'll run that code and that way it will only

83
00:05:16,800 --> 00:05:19,240
run if it's in the main file that's being executed.

84
00:05:19,290 --> 00:05:26,220
So we could fix our problem where say is is being executed before say hi or just coming over here to

85
00:05:26,220 --> 00:05:36,030
say sup and AB adding an if statement that says if double underscore name is equal to Main then we'll

86
00:05:36,030 --> 00:05:37,470
run say sup.

87
00:05:37,920 --> 00:05:42,810
So this will only run if I'm actually executing say Septem why.

88
00:05:42,930 --> 00:05:47,180
Otherwise it's just going to be imported and it won't be executed.

89
00:05:47,310 --> 00:05:48,370
So let's test it.

90
00:05:48,570 --> 00:05:50,250
If I run say hi again.

91
00:05:50,250 --> 00:05:59,540
Now we only get high and then Suppe which is what's supposed to happen and if ii executes say sup directly.

92
00:05:59,910 --> 00:06:00,850
Now I get something.

93
00:06:00,870 --> 00:06:04,190
My name is man because I'm directly executing this file.

94
00:06:04,230 --> 00:06:05,920
So name is equal to mine.

95
00:06:06,150 --> 00:06:09,710
So it's kind of a weird concept but really the main takeaway.

96
00:06:09,990 --> 00:06:14,490
Every module has a name variable double underscore name double underscore.

97
00:06:14,490 --> 00:06:22,290
If you are directly running that file by calling it Python 3 whatever Python 3 file Doppie why that

98
00:06:22,290 --> 00:06:27,840
file the code in that module will have names set to mean like this.

99
00:06:27,840 --> 00:06:34,490
Otherwise it will be set to the name of the file which is what we see here where name is say stuff.

100
00:06:34,800 --> 00:06:37,110
So hopefully that explanation made sense.

101
00:06:37,110 --> 00:06:39,180
I know its kind of weird but this is the work around.

102
00:06:39,180 --> 00:06:40,390
You'll see it pretty commonly.

103
00:06:40,410 --> 00:06:43,050
It's how we can ignore code when we import a module.
