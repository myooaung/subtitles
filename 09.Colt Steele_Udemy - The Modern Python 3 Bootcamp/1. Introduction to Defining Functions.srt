1
00:00:00,210 --> 00:00:00,820
We did it.

2
00:00:00,840 --> 00:00:05,310
We made it to the function section or at least part one of functions.

3
00:00:05,340 --> 00:00:10,210
This is really the last of the great topics that we have left to cover with Python.

4
00:00:10,240 --> 00:00:15,420
There's a lot of material left to cover but it's a lot more kind of nuanced pieces or more advanced

5
00:00:15,420 --> 00:00:21,660
things to talk about but functions are pretty much the last important essential building block to Python

6
00:00:21,960 --> 00:00:23,650
that we have yet to discuss.

7
00:00:23,670 --> 00:00:25,830
We have we've kind of seen them in the periphery.

8
00:00:25,830 --> 00:00:27,590
We talked a little bit about them.

9
00:00:27,600 --> 00:00:33,170
We've been using tons of built in functions things like print and Lenn and counted all those things

10
00:00:33,600 --> 00:00:36,050
but now we're going to see how we define our own.

11
00:00:36,120 --> 00:00:42,000
And I'm personally really excited for this section in the next couple because we have a bunch of pre-written

12
00:00:42,000 --> 00:00:48,450
tests interactive code exercises in the browser that have you write functions so you'll be writing almost

13
00:00:48,450 --> 00:00:51,710
3000 functions if you do all of the exercises.

14
00:00:51,750 --> 00:00:56,800
You'll almost write 30 functions in a matter of one or two sections so you'll get tons of practice.

15
00:00:56,870 --> 00:01:00,260
Spend a lot of time on those tests because functions are so important.

16
00:01:00,300 --> 00:01:01,170
It's worth it.

17
00:01:01,170 --> 00:01:02,480
So let's get started.

18
00:01:02,520 --> 00:01:06,470
And the first thing we talked about are the key objectives for the section.

19
00:01:06,480 --> 00:01:11,880
So first we want to describe what the function is and how they're useful be able to talk about the utility

20
00:01:11,880 --> 00:01:12,850
they provide.

21
00:01:13,200 --> 00:01:18,870
Then we want to discuss what the return key does be able to write a function using it and also talk

22
00:01:18,870 --> 00:01:22,320
about how side effects relate to the return keyword.

23
00:01:22,530 --> 00:01:29,280
Then we'll learn to add parameters to functions so we can accept input and then spit out output different

24
00:01:29,280 --> 00:01:31,010
output depending on the input.

25
00:01:31,050 --> 00:01:37,710
After that I want to talk about how to define and diagram scope what is scope and then how does it work

26
00:01:37,750 --> 00:01:40,530
and how does it relate to functions.

27
00:01:40,560 --> 00:01:44,660
Lastly we'll learn to add keyword arguments to functions.

28
00:01:44,940 --> 00:01:49,150
But before we get there we need to answer the simplest most important question.

29
00:01:49,350 --> 00:01:50,630
What is a function.

30
00:01:50,790 --> 00:01:53,530
Well we've been working with functions a whole bunch.

31
00:01:53,580 --> 00:01:59,580
Like I already mentioned things like print or land for the length but also all the built in list methods

32
00:01:59,580 --> 00:02:01,110
or dictionary methods.

33
00:02:01,110 --> 00:02:05,490
Technically they are called methods but if you didn't watch a video where we talked about the distinction

34
00:02:05,850 --> 00:02:08,300
methods are a special type of functions.

35
00:02:08,340 --> 00:02:10,740
So there are all functions that are all built in functions.

36
00:02:10,770 --> 00:02:12,420
So what do they have in common.

37
00:02:12,420 --> 00:02:19,530
Well officially a function is a process for executing a task which I kind of think that's a bit stuffy.

38
00:02:19,530 --> 00:02:25,290
I just like to think of them as a bunch of lines of code wrapped up into a nice little package that

39
00:02:25,290 --> 00:02:26,990
we can recall at any point.

40
00:02:27,090 --> 00:02:30,380
It's like shrinking down a bunch of lines of code and making it reusable.

41
00:02:30,480 --> 00:02:35,190
But what's important is that we don't always get the exact same result every time we call a function.

42
00:02:35,310 --> 00:02:40,080
It depends on the input we provide which can alter the output we get back.

43
00:02:40,230 --> 00:02:44,930
So it's like a little box and not every function accepts an input.

44
00:02:45,360 --> 00:02:46,490
But some of them do.

45
00:02:46,530 --> 00:02:49,280
And when we provide an input we get something out.

46
00:02:49,280 --> 00:02:50,420
Something happens.

47
00:02:50,610 --> 00:02:55,740
So another way of thinking about them is they're just a useful way for executing similar procedures

48
00:02:55,750 --> 00:02:56,740
over and over.

49
00:02:56,760 --> 00:02:58,440
So it's not always identical.

50
00:02:58,500 --> 00:03:01,910
You can write functions that do the exact same thing every time no matter what.

51
00:03:01,950 --> 00:03:06,960
But most of them that we'll be writing will do similar things like add two numbers together.

52
00:03:07,080 --> 00:03:09,790
But the result depends on the numbers that we provide.

53
00:03:09,930 --> 00:03:16,110
So here I have a simple list called colors and you know we've seen so many different built in functions

54
00:03:16,410 --> 00:03:19,290
something like print that's a built in function.

55
00:03:19,410 --> 00:03:26,150
I pass in colors and it prints out colors or I pass in a string and it prints something.

56
00:03:26,250 --> 00:03:28,320
But this time we get a different result.

57
00:03:28,320 --> 00:03:35,340
Likewise we could do color dot append which is another function and I pass in Violet.

58
00:03:36,060 --> 00:03:39,840
It takes that input and add it to the end of colors.

59
00:03:39,840 --> 00:03:42,690
So it does a process and it's repeatable.

60
00:03:42,690 --> 00:03:47,610
But there's also functions like clear that we've seen which don't require any input.

61
00:03:47,610 --> 00:03:49,920
They do the exact same thing every time.

62
00:03:50,070 --> 00:03:54,100
And if we look at colors it's totally empty so clear will always do that.

63
00:03:54,120 --> 00:03:56,400
It doesn't matter if we provide an input or not.

64
00:03:56,460 --> 00:04:01,380
And this section will see how to write both types of function ones that accept input and ones that don't.

65
00:04:01,380 --> 00:04:03,080
So why do we care about function.

66
00:04:03,090 --> 00:04:04,210
Why use them.

67
00:04:04,350 --> 00:04:09,960
The first reason is that it helps our code stay dry which is an acronym that a lot of teachers like

68
00:04:09,960 --> 00:04:13,600
myself rely a bit too heavily on when teaching functions.

69
00:04:13,650 --> 00:04:16,950
But it's easy to remember dry stands for don't repeat yourself.

70
00:04:17,130 --> 00:04:21,960
So it's a way of keeping our code clean and not repeating ourselves.

71
00:04:21,960 --> 00:04:25,970
The opposite is wet write everything twice WTT.

72
00:04:26,130 --> 00:04:31,020
So we want to keep our code dry and functions help us do that cause let's say we had a task that took

73
00:04:31,020 --> 00:04:36,660
10 lines of code to do if we wanted to accomplish that three times we would have to write 30 lines of

74
00:04:36,660 --> 00:04:39,860
code just repeat each ten lines three times.

75
00:04:39,930 --> 00:04:45,170
But if we had a function to do it then each time we want to repeat the task it's only a single line.

76
00:04:45,360 --> 00:04:48,440
So it helps clean up our code and prevent code duplication.

77
00:04:49,020 --> 00:04:56,100
And it also is useful for abstracting away code and what that really means is a lot of times there's

78
00:04:56,100 --> 00:04:58,240
things that we don't want to do.

79
00:04:58,290 --> 00:05:01,930
We don't care about other members don't want to have to worry about.

80
00:05:02,030 --> 00:05:06,650
And it's better if they're pre-defined or someone else you know abstracts the code away.

81
00:05:06,650 --> 00:05:12,350
So for example something like print if you had to write the print function every single time you wanted

82
00:05:12,350 --> 00:05:17,390
to and every program that would be a lot of work you would have to figure out how to connect Python

83
00:05:17,810 --> 00:05:21,710
to the standard output how to actually print something to that to the terminal.

84
00:05:21,710 --> 00:05:25,620
It's not that hard but it's not something that you usually need to worry about.

85
00:05:25,620 --> 00:05:27,270
It's been abstract away.

86
00:05:27,290 --> 00:05:32,800
Similarly things like generating a random number while we could write our own code to do that.

87
00:05:32,840 --> 00:05:35,920
It just makes sense for that to have been done by someone else.

88
00:05:35,930 --> 00:05:40,700
It's kind of abstracted away we don't have to worry about it and we could do the same thing if we were

89
00:05:40,700 --> 00:05:45,250
building our own tools or own framework for other Python developers to use.

90
00:05:45,260 --> 00:05:50,130
There might be a function or two that we give other developers for free that they are able to use and

91
00:05:50,150 --> 00:05:51,640
that we've abstracted away.

92
00:05:51,890 --> 00:05:58,400
And lastly another reason I think that's worth discussing is that functions can help you not only reduce

93
00:05:58,400 --> 00:06:05,090
duplications in your code but organize it logically make it clear what is happening where.

94
00:06:05,090 --> 00:06:10,010
So here is the rock paper scissors game that every factory using a couple of functions.

95
00:06:10,010 --> 00:06:15,620
If you didn't see the rock paper scissors sections don't worry about it and it shouldn't make that much

96
00:06:15,620 --> 00:06:16,310
of a difference.

97
00:06:16,310 --> 00:06:21,790
But before it was just a jumble of code what people would call spaghetti code all over the place.

98
00:06:22,190 --> 00:06:26,640
But with functions now things are separated into discrete tasks.

99
00:06:26,690 --> 00:06:28,610
So we have some code that displays a header.

100
00:06:28,760 --> 00:06:31,550
We have some other code that picks a computer move.

101
00:06:31,550 --> 00:06:33,440
We have code that calculates winner.

102
00:06:33,470 --> 00:06:38,540
We have code that starts a game that displays the winner and it's clear you know what each bit of code

103
00:06:38,540 --> 00:06:42,130
does rather than just having it be all willy nilly all over the place.

104
00:06:42,240 --> 00:06:44,030
Functions allow us to organize things.
