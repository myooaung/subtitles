1
00:00:00,160 --> 00:00:06,440
You'll get next up to more built in functions this time a pair max and min.

2
00:00:06,810 --> 00:00:11,090
So they work very similarly except they do the opposite thing.

3
00:00:11,310 --> 00:00:14,370
So Max will tell you there's a couple ways of using it.

4
00:00:14,370 --> 00:00:21,270
You can pass it two or more individual arguments and it will tell you the max you know and Max numeric

5
00:00:21,270 --> 00:00:25,850
value or the max alphanumeric value if it's string characters.

6
00:00:25,980 --> 00:00:32,830
So I can show an example of that we could do something like max of three sixty seven and ninety nine

7
00:00:33,750 --> 00:00:35,560
and it tells us Max is 99.

8
00:00:35,920 --> 00:00:36,410
OK.

9
00:00:36,450 --> 00:00:38,430
So that's the simplest way to use it.

10
00:00:38,640 --> 00:00:43,470
Or we could do you know individual strings like C D.

11
00:00:43,470 --> 00:00:47,270
And how about a.

12
00:00:47,530 --> 00:00:49,710
And it tells us d is the max.

13
00:00:49,710 --> 00:00:52,520
And that's because of the way that strings are weighted.

14
00:00:52,560 --> 00:00:52,730
Right.

15
00:00:52,770 --> 00:00:54,090
It goes from A to Z.

16
00:00:54,300 --> 00:01:01,800
We can also pass in and iterable like a list or a string or a dictionary or a tuple and it will it will

17
00:01:01,800 --> 00:01:04,560
tell us the maximum item and that iterable.

18
00:01:04,740 --> 00:01:10,200
And this still seems maybe not that useful but we could have a list of numbers and these numbers can

19
00:01:10,200 --> 00:01:14,700
be totally random right like this.

20
00:01:14,700 --> 00:01:16,980
And then I could just ask for the max of.

21
00:01:18,260 --> 00:01:23,900
And while I'm here you know I'll show you mine does the same thing except opposite.

22
00:01:23,900 --> 00:01:26,550
So it tells me that the minimum number there is five.

23
00:01:26,660 --> 00:01:27,390
OK.

24
00:01:27,560 --> 00:01:34,630
We could also just to show you to Max Peston a string like hello world like this.

25
00:01:34,760 --> 00:01:36,740
And it tells me the max is w.

26
00:01:36,780 --> 00:01:40,810
If I did man instead the men I think is going to be e.

27
00:01:40,960 --> 00:01:41,730
Oh no.

28
00:01:41,750 --> 00:01:44,430
The space comes to 40 anyway.

29
00:01:44,660 --> 00:01:47,400
So this is an iterable thing remember to string.

30
00:01:47,420 --> 00:01:49,130
So this counts.

31
00:01:49,310 --> 00:01:51,570
I can also do max on a tuple.

32
00:01:51,830 --> 00:01:59,110
That's the last thing I'll show before a show a more exciting example I have a tuple here that gives

33
00:01:59,120 --> 00:02:00,800
me 65 is the max.

34
00:02:00,800 --> 00:02:01,220
OK.

35
00:02:01,400 --> 00:02:06,330
So that's OK enough but let's say we have this list of names.

36
00:02:06,360 --> 00:02:07,860
So I'll just paste it in.

37
00:02:08,410 --> 00:02:08,910
OK.

38
00:02:09,050 --> 00:02:10,240
Aryeh Sampson Dora.

39
00:02:10,260 --> 00:02:11,790
Tim and all of.

40
00:02:12,360 --> 00:02:16,360
And I want to know the minimum or the maximum length.

41
00:02:16,380 --> 00:02:22,890
So if I just did man of names it's going to give me Aryeh because alphabetically I think is how it's

42
00:02:22,890 --> 00:02:23,810
doing it.

43
00:02:23,820 --> 00:02:25,770
Or is it based off of the index.

44
00:02:25,770 --> 00:02:28,060
I don't know by default.

45
00:02:28,170 --> 00:02:31,820
No it's doing it alphabetically which is not what we want.

46
00:02:31,860 --> 00:02:37,290
Suppose I want to know the shortest name in here who has the shortest name or the longest would be the

47
00:02:37,290 --> 00:02:38,460
same logic.

48
00:02:38,850 --> 00:02:40,790
OK so there's a couple of options.

49
00:02:40,800 --> 00:02:46,260
The first thing we could do if I just wanted to know the length itself of the shortest number I could

50
00:02:46,260 --> 00:02:55,180
do men and then length Lenn for name for name and names.

51
00:02:55,410 --> 00:02:58,360
So this is just like what we did with all.

52
00:02:58,680 --> 00:03:02,730
And with any this is a generator expression too we don't have to do.

53
00:03:03,180 --> 00:03:06,170
Well first of all it tells me the shortest length is three.

54
00:03:06,240 --> 00:03:08,180
So if we just copy this remember.

55
00:03:08,370 --> 00:03:12,750
If you watch that video I get a generator object generator expression.

56
00:03:12,930 --> 00:03:18,350
And we don't have to actually put in those lists brackets.

57
00:03:18,600 --> 00:03:26,580
But if I did put in the list brackets to do I would get the likes 4 6 4 3 10 and then I find the men

58
00:03:26,610 --> 00:03:27,270
on that.

59
00:03:27,480 --> 00:03:31,070
But because I'm not using this list for anything I don't need those brackets.

60
00:03:31,080 --> 00:03:34,440
If you didn't watch the video on any and all that goes into more detail than that.

61
00:03:34,560 --> 00:03:39,090
But the problem here this is just giving us the shortest the actual length itself.

62
00:03:39,360 --> 00:03:46,380
What if I want the name Tim or if I did Max instead I would want it to give me all Cavender instead

63
00:03:46,380 --> 00:03:49,000
of whatever this is eight or nine characters.

64
00:03:49,110 --> 00:03:51,980
Maybe it's more anyway to do that.

65
00:03:52,320 --> 00:03:53,600
It's a little bit more complex.

66
00:03:53,600 --> 00:03:58,070
You need to use a lambda first and he's going to copy this over here so we have a record of it.

67
00:03:58,080 --> 00:03:59,370
If you're looking at this.

68
00:03:59,750 --> 00:04:00,720
OK.

69
00:04:01,060 --> 00:04:03,330
So let's do Max this time.

70
00:04:03,390 --> 00:04:10,200
I want to find the longest name so the longest in names comma and just like with sort I can pass in

71
00:04:10,200 --> 00:04:12,840
a key in key.

72
00:04:12,870 --> 00:04:17,490
Going I set to a lambda again and I'll call the perimeter.

73
00:04:17,490 --> 00:04:23,550
And so this is how we specify the way things should be sorted to figure out the men or the max.

74
00:04:23,550 --> 00:04:25,070
So what's the property.

75
00:04:25,200 --> 00:04:30,850
And we want length of and that makes sense.

76
00:04:30,850 --> 00:04:37,030
So Lamda if you totally awesome lambastes don't stress it too much but go back and watch solemnised

77
00:04:37,030 --> 00:04:37,910
video.

78
00:04:38,320 --> 00:04:44,050
But what we have here is this little anonymous thing a function essentially where we have a parameter

79
00:04:44,050 --> 00:04:46,620
and inch for each one of these.

80
00:04:46,690 --> 00:04:51,260
We're going to call this take the end and do length and.

81
00:04:51,530 --> 00:04:56,910
And that's the expression that's returned so that will be a number like two or three or five or seven.

82
00:04:57,040 --> 00:05:01,510
And then we're going to use that to judge the max and that's how Max works.

83
00:05:01,510 --> 00:05:03,240
If you pass in key.

84
00:05:03,280 --> 00:05:05,290
So let's see what we get.

85
00:05:06,190 --> 00:05:07,030
All of it.

86
00:05:07,260 --> 00:05:11,020
And if we did the same thing but change it to men we get Tim.

87
00:05:11,050 --> 00:05:16,550
So what we saw here was giving us the actual shortest length itself.

88
00:05:16,810 --> 00:05:22,310
Here is using that length to find the shortest name and give us the name.

89
00:05:22,330 --> 00:05:25,900
One more example are same songs list we've been using.

90
00:05:26,110 --> 00:05:34,480
Let's say I want to find the minimum let's say I want the song that has the least number of place.

91
00:05:34,690 --> 00:05:39,010
So that would be men and then I'll use a again.

92
00:05:39,040 --> 00:05:42,400
So first I need to tell it to sort songs or to use songs.

93
00:05:42,640 --> 00:05:49,520
And then the key is going to be Lamda and we'll go with the song.

94
00:05:49,720 --> 00:05:51,060
I like to keep this short just.

95
00:05:51,070 --> 00:05:53,540
S stands for song though.

96
00:05:53,950 --> 00:05:57,420
And what's the property play count.

97
00:05:59,040 --> 00:06:01,220
Like that and mutts.

98
00:06:01,240 --> 00:06:08,080
Well first we need to tell Python over here about songs and now I'll paste this one in but if we get

99
00:06:09,420 --> 00:06:10,340
there we go.

100
00:06:10,350 --> 00:06:14,760
Happy birthday has the least number of place and if I did Max

101
00:06:18,790 --> 00:06:24,470
I guess YMCA and would say I only wanted the title right.

102
00:06:24,520 --> 00:06:27,380
I want to find the title of the song is played the most.

103
00:06:27,520 --> 00:06:34,550
I could just tack on title and they get YMCA because this is returning to me a dictionary.

104
00:06:34,930 --> 00:06:40,110
And then if I just add title there that will give me the title of the most played song.

105
00:06:40,470 --> 00:06:41,030
OK.

106
00:06:41,530 --> 00:06:45,870
So copy that over as well so you can see a pattern here.

107
00:06:45,910 --> 00:06:48,780
A lot of these built in functions I'm showing you on.

108
00:06:48,820 --> 00:06:49,900
They work on one level.

109
00:06:49,900 --> 00:06:56,970
They're simple but then you can specify kind of an additional argument or parameter where you pass in

110
00:06:56,980 --> 00:07:01,990
the lambda that makes it a more flexible syntactically more confusing.

111
00:07:02,050 --> 00:07:06,370
But if you're able to wrap your head around lambdas and what's actually happening here this is a really

112
00:07:06,370 --> 00:07:12,200
nice way if you need to do something like minimax although it's not that hard to do it yourself.

113
00:07:12,310 --> 00:07:19,630
If we wanted to recreate this right here we would just loop through for song in songs we'd have a variable

114
00:07:19,630 --> 00:07:27,790
called Max right and we could set it equal to the first song or something song.

115
00:07:27,800 --> 00:07:30,350
Zero doesn't matter equal to zero.

116
00:07:30,880 --> 00:07:42,800
And then all we do is we loop through here and we check ok if song play count is greater than max then

117
00:07:42,800 --> 00:07:44,920
we'll just set max equals.

118
00:07:44,960 --> 00:07:49,240
Song play count and it's going to loop through each time.

119
00:07:49,550 --> 00:07:55,490
And if it finds a new max it updates the max variable and then at the end we could print Max but this

120
00:07:55,490 --> 00:07:56,750
is easier.

121
00:07:56,780 --> 00:07:57,500
All right.

122
00:07:57,500 --> 00:08:02,060
So I'll comment this up and then this will be in the resources if you want to download it.
