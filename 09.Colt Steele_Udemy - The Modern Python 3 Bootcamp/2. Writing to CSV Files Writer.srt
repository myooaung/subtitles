1
00:00:00,300 --> 00:00:00,530
All right.

2
00:00:00,540 --> 00:00:01,290
Welcome back.

3
00:00:01,290 --> 00:00:03,900
Now we're going to talk about writing to CXXVI files.

4
00:00:04,050 --> 00:00:06,190
And there's actually two different ways of doing it.

5
00:00:06,240 --> 00:00:09,680
We can write using lists or write using dictionaries.

6
00:00:09,750 --> 00:00:13,200
And in this video we're going to quickly show how to use lists.

7
00:00:13,620 --> 00:00:16,340
So the function we want our writer.

8
00:00:16,410 --> 00:00:19,550
So this will actually create the writer just like we saw reader.

9
00:00:19,680 --> 00:00:22,670
This is sort of the corresponding version reader and writer.

10
00:00:22,670 --> 00:00:27,630
And then we have a dict reader which we've already seen and adicts writer which you'll see in the next

11
00:00:27,630 --> 00:00:28,170
video.

12
00:00:28,390 --> 00:00:28,650
OK.

13
00:00:28,650 --> 00:00:34,410
So writer and then the method that we'll use most the time is called right Roe.

14
00:00:35,160 --> 00:00:36,660
So here's an example.

15
00:00:36,660 --> 00:00:43,920
We open a file we have to import writer from CSFB we open a file that is important because we are writing.

16
00:00:44,070 --> 00:00:50,610
And then we call writer pass and the file save that to a variable call it whatever you want a writer

17
00:00:50,940 --> 00:00:56,320
writer or something something I don't know then we just call Dattner right Roe.

18
00:00:56,400 --> 00:00:57,700
And we passed it almost.

19
00:00:57,810 --> 00:01:03,690
So each time we passed the list it had arow to a file for us and that's pretty much it.

20
00:01:03,690 --> 00:01:11,030
So if I actually just copy this version over and I do a quick demo pasted in we can open fighters dustiest

21
00:01:11,040 --> 00:01:11,610
V.

22
00:01:11,760 --> 00:01:18,050
Well let's actually just do some random file like testing that yes let's do cats.

23
00:01:18,060 --> 00:01:21,210
How about that cat s t w.

24
00:01:21,390 --> 00:01:23,440
And then I can leave this the same.

25
00:01:23,460 --> 00:01:26,680
It's important to note that to get the headers just another row.

26
00:01:26,820 --> 00:01:30,480
So we pass that in let's do something like name come up.

27
00:01:30,620 --> 00:01:31,670
I don't know age.

28
00:01:31,710 --> 00:01:32,980
It'll be my cats.

29
00:01:33,000 --> 00:01:38,310
And then we can write a row that is blue comma and we need two strings.

30
00:01:38,320 --> 00:01:40,870
You're either way back down here blue.

31
00:01:41,100 --> 00:01:43,140
And she is.

32
00:01:43,140 --> 00:01:45,480
I don't even know she for three.

33
00:01:45,780 --> 00:01:52,440
And then we'll do one more line which will be my unnamed kitty who is less than one.

34
00:01:52,650 --> 00:01:53,650
We'll leave it at that.

35
00:01:53,910 --> 00:01:54,260
OK.

36
00:01:54,300 --> 00:01:55,450
So let's run this now.

37
00:01:55,500 --> 00:01:58,710
There isn't a file catch up yet but it still should work.

38
00:01:58,890 --> 00:02:00,170
If I run the file.

39
00:02:00,530 --> 00:02:02,460
OK let's see what we get.

40
00:02:02,480 --> 00:02:04,530
Is there a new file called Cats.

41
00:02:04,530 --> 00:02:05,470
Let's open it.

42
00:02:05,670 --> 00:02:07,220
So do several cats.

43
00:02:07,260 --> 00:02:08,320
That's three.

44
00:02:08,400 --> 00:02:09,750
And here's our data.

45
00:02:09,760 --> 00:02:13,670
We've successfully written data using writer.

46
00:02:13,910 --> 00:02:14,220
OK.

47
00:02:14,280 --> 00:02:17,820
So one more example I'm going to show I'll make another new file.

48
00:02:17,910 --> 00:02:22,640
And what we're going to do is actually read in from one file and then change some data.

49
00:02:22,980 --> 00:02:27,190
We'll just uppercase everything in our example and then write it to a new file.

50
00:02:27,270 --> 00:02:32,750
So we'll read in from this file fighters that cxxviii then we'll capitalize everything and then print

51
00:02:32,750 --> 00:02:33,560
it out.

52
00:02:33,690 --> 00:02:38,470
So to do that let's make a new file let's call it scream.

53
00:02:38,670 --> 00:02:45,990
Why and we just want to start by from C we.

54
00:02:46,170 --> 00:02:48,190
Just going to use reader and writer.

55
00:02:48,460 --> 00:02:55,900
So we'll just import reader and writer and then we'll do our with open and to our file that we're going

56
00:02:55,900 --> 00:03:00,950
to read from is fighters dot CXXVI as.

57
00:03:01,030 --> 00:03:11,380
And we'll just call it file then we'll do CACP reader equals reader file and we can just double check

58
00:03:11,380 --> 00:03:12,330
everything is working.

59
00:03:12,400 --> 00:03:20,840
Right doing I don't know for row in CAC reader as we've already seen print to row with purines of course.

60
00:03:20,920 --> 00:03:22,190
And let's make sure it works OK.

61
00:03:22,210 --> 00:03:23,300
We're getting the data.

62
00:03:23,300 --> 00:03:29,140
So now what we're going to do is take this data and uppercase all of it and write it into a new file

63
00:03:29,440 --> 00:03:32,760
that we'll call scream touchiest free.

64
00:03:33,020 --> 00:03:39,460
OK so if we did we could just do a separate and open what we do need to do a separate open for the file

65
00:03:39,460 --> 00:03:41,850
that we're going to write to which we could call.

66
00:03:42,040 --> 00:03:47,060
I don't know scream ing fighters at CSB.

67
00:03:47,440 --> 00:03:51,420
We need that W because we're writing to it as.

68
00:03:51,460 --> 00:03:59,300
And we'll just call it file again and then we'll do cxxviii writer equals writer file.

69
00:03:59,550 --> 00:04:05,550
And now the trick is basically what we want to do is take this data that's coming back which is a list

70
00:04:05,550 --> 00:04:06,610
of lists.

71
00:04:06,720 --> 00:04:10,750
While it's not quite a list of lists it's an iterator that's returning a bunch of lists.

72
00:04:10,890 --> 00:04:13,310
But if we convert it to a list it will be a list of lists.

73
00:04:13,470 --> 00:04:18,630
And the simplest way to go through and just capitalize everything in there not necessarily the most

74
00:04:18,630 --> 00:04:24,080
efficient but the simplest for now is just going to be to use a list comprehension a nested one.

75
00:04:24,080 --> 00:04:31,200
So let's just make a variable called fighters and it can be a list comprehension where we use CSP reader

76
00:04:32,220 --> 00:04:37,380
and will do something like it's going to need to be nested because we're turning it into a list and

77
00:04:37,410 --> 00:04:39,600
each row is Sonesta is a list itself.

78
00:04:39,630 --> 00:04:51,510
So we might have let's go with s dot upper for s in row like this and then we'll put our nested brackets

79
00:04:52,050 --> 00:04:55,690
for row in CAC reader.

80
00:04:55,710 --> 00:05:00,660
All right so for each one of these We're going to go through each row and for each row we'll call each

81
00:05:00,810 --> 00:05:03,740
item s and we're going to uppercase it.

82
00:05:04,350 --> 00:05:05,430
Let's see if that works.

83
00:05:05,460 --> 00:05:13,710
So we'll even comment the writing part out and now will do for row in fighters print row.

84
00:05:14,160 --> 00:05:17,760
If we executed OK everything's in all caps looks good.

85
00:05:17,790 --> 00:05:22,880
Now all we have to do is take this fighter's data and write it to the file.

86
00:05:23,400 --> 00:05:37,010
So down here we'll just do four fighter in fighters we want to be writer dots right row fighter.

87
00:05:37,620 --> 00:05:40,630
And this includes the headers because the letters are inside of this.

88
00:05:40,640 --> 00:05:42,170
Even those called fighters.

89
00:05:42,240 --> 00:05:45,270
It includes the first row of headers as well.

90
00:05:45,270 --> 00:05:46,490
We uppercase everything.

91
00:05:46,530 --> 00:05:49,990
Like I said this is not necessarily the best way of doing this.

92
00:05:50,010 --> 00:05:51,580
It's just a simple way of doing it.

93
00:05:51,600 --> 00:05:55,340
Or we're just upper casing everything inside those nested lists.

94
00:05:55,440 --> 00:05:56,850
Then we don't need to print.

95
00:05:56,940 --> 00:05:58,540
And now this should work.

96
00:05:58,560 --> 00:06:03,000
Let's test it out and just a new file called Screaming out.

97
00:06:05,600 --> 00:06:07,650
Screaming fighters up see here we go.

98
00:06:07,850 --> 00:06:13,440
So we took this file and turned it into this using both reading and then writing it back.

99
00:06:13,610 --> 00:06:16,140
But before we wrote it we uppercase everything.

100
00:06:16,580 --> 00:06:17,010
OK.

101
00:06:17,060 --> 00:06:23,030
So very last thing we can talk about if we wanted to we don't necessarily have to do it this way we

102
00:06:23,030 --> 00:06:24,900
could nest things together.

103
00:06:25,040 --> 00:06:35,400
So instead of doing this fighter's line we could do this right here and then to all of that this and

104
00:06:35,430 --> 00:06:43,870
instead of here I can access for fighter in CAC reader.

105
00:06:44,040 --> 00:06:46,310
But the thing is that each one of these has a list.

106
00:06:46,320 --> 00:06:49,040
So we want to write what we want right row.

107
00:06:49,260 --> 00:07:00,780
And then here we want to do something like as Dot hopper for s in fighter and let's see what happens

108
00:07:01,950 --> 00:07:03,040
if we do it now.

109
00:07:03,450 --> 00:07:07,300
And with his screaming fighters works perfectly.

110
00:07:07,560 --> 00:07:12,940
But it's important to note that if I were to do it this way and I didn't want to nest these things I

111
00:07:13,020 --> 00:07:18,220
want to go like this I remember that this code closes the file.

112
00:07:18,570 --> 00:07:22,530
This file here fighters at CACP after the width is done.

113
00:07:22,530 --> 00:07:24,080
After all that code runs.

114
00:07:24,210 --> 00:07:34,330
So if I do it this way we have a problem because it's telling me on line 8 IO operation on closed file.

115
00:07:34,500 --> 00:07:35,710
What's happening on line 8.

116
00:07:35,760 --> 00:07:42,240
I'm accessing cac reader and it's not a problem that you know I made some random variable in here that

117
00:07:42,460 --> 00:07:43,390
equals one.

118
00:07:43,530 --> 00:07:45,930
I could access number right here.

119
00:07:45,990 --> 00:07:47,660
So it's not a scope issue.

120
00:07:48,030 --> 00:07:50,960
As you can see here we get one printed out.

121
00:07:51,150 --> 00:07:54,990
It's a problem that arises because cac reader is connected.

122
00:07:54,990 --> 00:07:57,490
It depends on this file being open.

123
00:07:57,510 --> 00:08:01,770
And so if I ask to sit down here that files not open so we have a problem.

124
00:08:01,830 --> 00:08:07,890
So the solution which I just showed in just a couple of seconds ago was indenting these inside one another

125
00:08:08,610 --> 00:08:13,680
because we're only really writing data while we're working with data from one file.

126
00:08:13,710 --> 00:08:18,720
So as far as efficiency it's not a good idea overall just to keep a bunch of these files open all the

127
00:08:18,720 --> 00:08:19,420
time.

128
00:08:19,530 --> 00:08:24,280
But if what we're doing is just transferring data from one to another and slightly altering it.

129
00:08:24,390 --> 00:08:26,210
I think this approach works fine.

130
00:08:26,580 --> 00:08:32,430
Otherwise we would need to make a new variable and save it equal to the list like we did in the last

131
00:08:32,430 --> 00:08:35,800
example I have it here still like this.

132
00:08:35,910 --> 00:08:40,780
So I will put both of these as potential examples and you can choose which one works best for you or

133
00:08:40,830 --> 00:08:42,360
I'll add some comments just a second.

134
00:08:42,500 --> 00:08:42,810
OK.

135
00:08:42,840 --> 00:08:46,380
So there's the comment two different methods two approaches that work.

136
00:08:46,380 --> 00:08:52,230
One involves taking the data from CACP reader iterating over it turning into a list saving it to a variable

137
00:08:52,290 --> 00:08:53,560
that we can access later.

138
00:08:53,610 --> 00:08:58,680
And the other one involves using nested with statements and keeping that file open so that we can access

139
00:08:58,680 --> 00:09:02,230
directly from cac reader without transforming the data first.

140
00:09:02,420 --> 00:09:02,950
OK.

141
00:09:03,120 --> 00:09:03,820
Moving on.

142
00:09:03,880 --> 00:09:07,330
To show you one other way of writing data to see SFE file.
