WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.025
So now we're back to the top level. Let's carry on.

00:00:02.025 --> 00:00:06.360
So, so far, we've notified some listeners to say the application starting and mixed it.

00:00:06.360 --> 00:00:08.895
We've got this prepare environment.

00:00:08.895 --> 00:00:12.030
So prepare environment gives us basically

00:00:12.030 --> 00:00:14.430
the environment which we have access to in the spinning what application.

00:00:14.430 --> 00:00:16.740
So that's the collection of all the application properties

00:00:16.740 --> 00:00:19.185
along with profile information, that kind of thing.

00:00:19.185 --> 00:00:22.290
Okay? And then we get down to Create application context.

00:00:22.290 --> 00:00:24.810
So if we step inside this,

00:00:24.810 --> 00:00:27.210
what happens here did determines

00:00:27.210 --> 00:00:30.730
the fully qualified class name of the application context to create.

00:00:30.730 --> 00:00:32.555
So all spring applications,

00:00:32.555 --> 00:00:36.860
we will start by instantiating an application context and the usual ones we're used

00:00:36.860 --> 00:00:41.465
to in plain vanilla Spring applications are the file-based XML application context,

00:00:41.465 --> 00:00:43.745
classpath XML application context,

00:00:43.745 --> 00:00:47.630
which both read XML configuration for configuring the Spring container from a file,

00:00:47.630 --> 00:00:49.490
often the classpath, or alternatively from

00:00:49.490 --> 00:00:52.550
the annotation configuration application context.

00:00:52.550 --> 00:00:55.220
And that's the application concepts we use if we

00:00:55.220 --> 00:00:57.710
are going to be doing the annotation base configuration.

00:00:57.710 --> 00:00:58.970
So not using an XML file,

00:00:58.970 --> 00:01:00.980
but using annotations on our Java classes,

00:01:00.980 --> 00:01:03.590
those annotations links them from AC components or

00:01:03.590 --> 00:01:05.765
the configuration annotation for

00:01:05.765 --> 00:01:08.735
Java configurations with the API mechanism, that kind of thing.

00:01:08.735 --> 00:01:10.865
In this case, however, it's a web application,

00:01:10.865 --> 00:01:14.210
so it's detected it as an addition conflicts server,

00:01:14.210 --> 00:01:16.055
web server application context,

00:01:16.055 --> 00:01:18.395
which adds some extra stuff in there.

00:01:18.395 --> 00:01:21.755
And then it's basically instantiate that through reflection,

00:01:21.755 --> 00:01:24.590
which is not this bin utils to instantiate clusters.

00:01:24.590 --> 00:01:31.310
So at this point, what we have returned here in context is an actual application context.

00:01:31.310 --> 00:01:33.590
So if we look inside that context,

00:01:33.590 --> 00:01:35.330
we can see here it's in blue because it's

00:01:35.330 --> 00:01:38.240
the last variable is being touched and initialized.

00:01:38.240 --> 00:01:42.720
We can see here we've got our bean factory.

00:01:43.150 --> 00:01:45.605
And inside our bean factory,

00:01:45.605 --> 00:01:47.720
we haven't been definition map.

00:01:47.720 --> 00:01:50.960
And so far these are the Spring framework classes which had

00:01:50.960 --> 00:01:54.800
been instantiated and been placed as part of that being definition map.

00:01:54.800 --> 00:01:56.675
Okay.

00:01:56.675 --> 00:01:58.985
And if we look down,

00:01:58.985 --> 00:02:03.240
we'll see there are now being post processes currently.

00:02:15.610 --> 00:02:19.805
And also if you look for C, there are no bean factory post-process as either.

00:02:19.805 --> 00:02:22.860
But that's about to change very shortly, as we'll see.
