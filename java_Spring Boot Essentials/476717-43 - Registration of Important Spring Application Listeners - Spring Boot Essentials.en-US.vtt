WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.830
So if we took out of here and we just create a breakpoint here,

00:00:05.830 --> 00:00:09.220
and right-click and do debug.

00:00:09.220 --> 00:00:11.260
So nothing terribly interesting at the minute we're at

00:00:11.260 --> 00:00:13.705
the main first line in our application.

00:00:13.705 --> 00:00:18.550
But if we step into this run method of the spring application with F7,

00:00:18.550 --> 00:00:22.150
now we're actually inside the Spring Boot code itself.

00:00:22.150 --> 00:00:23.560
And it's telling you as well, by the way,

00:00:23.560 --> 00:00:25.900
this spring application class here,

00:00:25.900 --> 00:00:29.635
I've also chosen to download the Java sources as well, which you can do.

00:00:29.635 --> 00:00:32.620
But you can actually see from which dependency.

00:00:32.620 --> 00:00:37.705
Discuss CMS systems from offspring framework built as a group ID.

00:00:37.705 --> 00:00:41.425
Spring Boot as the artifact ID.

00:00:41.425 --> 00:00:43.495
And 2.3.1 releases diversion.

00:00:43.495 --> 00:00:47.995
And that comes from this dependency here,

00:00:47.995 --> 00:00:51.385
which is brought in by the main Spring Boot starter dependency,

00:00:51.385 --> 00:00:55.315
which all spring with applications will import either explicitly or more commonly,

00:00:55.315 --> 00:00:57.115
implicitly because they'll bring in

00:00:57.115 --> 00:01:00.520
a different starting dependency to pull in a particular technology.

00:01:00.520 --> 00:01:03.670
And here we can see that it's the Spring Boot starts a web started

00:01:03.670 --> 00:01:07.690
dependency that brings in the men one peer.

00:01:07.690 --> 00:01:09.130
So which close it off.

00:01:09.130 --> 00:01:13.600
Now if we step in here with F7 into the run method,

00:01:13.600 --> 00:01:17.695
and if we step in again until the constructor and again,

00:01:17.695 --> 00:01:22.720
okay, so now what's going to set up some fields which it needs.

00:01:22.720 --> 00:01:24.055
It's not too interesting for now.

00:01:24.055 --> 00:01:26.110
We're getting a resource loader.

00:01:26.110 --> 00:01:30.670
A few of the bits and pieces is determining the web application type, which is useful.

00:01:30.670 --> 00:01:33.685
So it notices now that we are actually running on a server.

00:01:33.685 --> 00:01:36.070
And it does that by inspecting wasn't the classpath.

00:01:36.070 --> 00:01:37.810
Then it's setting up some initializers and

00:01:37.810 --> 00:01:41.725
some listeners and finding out what the main application classes.

00:01:41.725 --> 00:01:45.355
So these are gonna be used if we now step into the run method itself.

00:01:45.355 --> 00:01:47.755
Now we've constructed the spring application object.

00:01:47.755 --> 00:01:49.450
Just get some more space here.

00:01:49.450 --> 00:01:54.370
These event listeners are gonna be used to emit events to other components so they can

00:01:54.370 --> 00:01:56.140
respond and do any kind

00:01:56.140 --> 00:01:59.860
of extra work they need to do or postprocessing there might need to do.

00:01:59.860 --> 00:02:02.180
And we'll see that in a second.

00:02:03.750 --> 00:02:05.920
And you can see the serum fact.

00:02:05.920 --> 00:02:08.860
So there's actually a spring application run listener.

00:02:08.860 --> 00:02:12.970
So spring application run listener here,

00:02:12.970 --> 00:02:14.935
event publishing one listener.

00:02:14.935 --> 00:02:17.260
And when we jump into there,

00:02:17.260 --> 00:02:21.445
that's going to receive this listen end up starting callback,

00:02:21.445 --> 00:02:24.820
which is using this initial multicasting object here

00:02:24.820 --> 00:02:28.810
to throw out this application starting event and initial multicast itself.

00:02:28.810 --> 00:02:31.765
If we get into that and look inside the default retriever,

00:02:31.765 --> 00:02:34.600
we can see that we've actually got these application listeners here,

00:02:34.600 --> 00:02:37.690
which are registered to listen to application events.

00:02:37.690 --> 00:02:40.390
So here we can see these listeners,

00:02:40.390 --> 00:02:41.740
and here we can see these instances.

00:02:41.740 --> 00:02:45.820
These beans are going to listen to these application events.

00:02:45.820 --> 00:02:49.510
And some of them might just be normal straight up event listeners,

00:02:49.510 --> 00:02:52.130
which just have a listen method and do some extra stuff.

00:02:52.130 --> 00:02:54.215
Other ones might actually be post processes.

00:02:54.215 --> 00:02:55.760
So in other words, they might take

00:02:55.760 --> 00:02:58.445
some aspect of a spring component and do some post processing on it,

00:02:58.445 --> 00:02:59.810
which we'll see as well anyway.

00:02:59.810 --> 00:03:03.485
So all these application listeners will get a chance to

00:03:03.485 --> 00:03:05.510
describe two different application events

00:03:05.510 --> 00:03:07.370
and they receive the events that they subscribe to.

00:03:07.370 --> 00:03:09.950
So for example, if we go into multicast event,

00:03:09.950 --> 00:03:12.080
create the event first.

00:03:12.080 --> 00:03:14.165
Go into multicast event.

00:03:14.165 --> 00:03:17.945
Again, resolve the type.

00:03:17.945 --> 00:03:20.645
And now you'll see there's this resolvable type,

00:03:20.645 --> 00:03:22.760
which is an application starting event.

00:03:22.760 --> 00:03:28.320
So from the event instance that's passed in is getting the actual type.

00:03:28.360 --> 00:03:32.330
And then what it's gonna do is it's gonna go through all of

00:03:32.330 --> 00:03:34.630
the listeners and basically filter out

00:03:34.630 --> 00:03:38.800
the ones which have raised an interest in that specific type.

00:03:38.800 --> 00:03:40.735
And then you can see here,

00:03:40.735 --> 00:03:43.735
if we step into it's gonna actually invoke the listener.

00:03:43.735 --> 00:03:48.250
Do invoke listener by actually emitting the core vacuum itself.

00:03:48.250 --> 00:03:50.230
So listener that on application event.

00:03:50.230 --> 00:03:53.905
And again that comes from the application listener interface here.

00:03:53.905 --> 00:03:57.310
So application listener is a callback interface which can allow

00:03:57.310 --> 00:04:01.060
interested parties to receive any extensions of application event.

00:04:01.060 --> 00:04:02.905
So we do control hitch here.

00:04:02.905 --> 00:04:06.730
We can see these are all the listeners which are available anymore.

00:04:06.730 --> 00:04:10.135
If we expand, these are all the listeners which are available currently.

00:04:10.135 --> 00:04:11.455
And so the classpath.

00:04:11.455 --> 00:04:15.700
And similarly, if we click on into application events,

00:04:15.700 --> 00:04:18.145
also do control hedge.

00:04:18.145 --> 00:04:20.170
Expand all we can see that these are

00:04:20.170 --> 00:04:23.755
all the event types which are available in the classpath as well.

00:04:23.755 --> 00:04:26.140
And these are typically event types that will be passed around

00:04:26.140 --> 00:04:28.975
dilemma spring will infrastructure up to orchestrates tasks.

00:04:28.975 --> 00:04:31.450
So here we see we've got events extending from

00:04:31.450 --> 00:04:35.320
spring application event about when the application context is initialized,

00:04:35.320 --> 00:04:37.960
about when it started, if there's a failure.

00:04:37.960 --> 00:04:41.410
And that kinda thing that's useful to know suddenly.

00:04:41.410 --> 00:04:45.040
So if we backtrack out from there, simply close that,

00:04:45.040 --> 00:04:51.310
close that and shift if I go back up.

00:04:51.310 --> 00:04:54.805
So now we're going to back up the call stack with shift F8.

00:04:54.805 --> 00:04:58.730
And now we're back into the main spring application here.
