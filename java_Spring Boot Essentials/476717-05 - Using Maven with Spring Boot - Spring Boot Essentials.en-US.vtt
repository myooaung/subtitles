WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.445
In this video, we're going to see how we can use the Maven wrapper,

00:00:02.445 --> 00:00:05.145
which is supplied by default in a spring Boot application,

00:00:05.145 --> 00:00:07.800
which has been generated by the spring initializer website.

00:00:07.800 --> 00:00:09.435
So let's jump in and have a look at this now.

00:00:09.435 --> 00:00:11.775
So if I get terminal up,

00:00:11.775 --> 00:00:22.705
and if I cd into my downloads folder And the demo project which has been generated,

00:00:22.705 --> 00:00:25.380
Let's just make this a little bit larger.

00:00:26.890 --> 00:00:29.225
Expand that and clear.

00:00:29.225 --> 00:00:31.325
So let's just double check. We have the project in here,

00:00:31.325 --> 00:00:32.525
and yet there's our project.

00:00:32.525 --> 00:00:35.540
And we can see we have two files which are of interest,

00:00:35.540 --> 00:00:38.335
which are these two files here,

00:00:38.335 --> 00:00:40.565
w and w dot cmd.

00:00:40.565 --> 00:00:42.950
And we also have a hidden directory.

00:00:42.950 --> 00:00:47.630
Hidden directory is start with a dot in Mac and Unix and Linux systems,

00:00:47.630 --> 00:00:50.570
and that's the dot m V1 directory.

00:00:50.570 --> 00:00:54.080
So if we look at what's inside the ambient directory,

00:00:54.080 --> 00:00:55.580
we'll see that there's a rapper folder.

00:00:55.580 --> 00:00:57.455
So if I go into this wrapper folder here,

00:00:57.455 --> 00:00:59.135
we can see we've got three files here.

00:00:59.135 --> 00:01:00.710
We have maven rapid dot jar,

00:01:00.710 --> 00:01:02.509
Maven rapid up properties.

00:01:02.509 --> 00:01:06.800
And you can't quite see it but Maven rapid downloaded dot java.

00:01:06.800 --> 00:01:11.030
So these three files together form the Maven wrapper and inertia.

00:01:11.030 --> 00:01:13.670
What happens is the scripts which are here.

00:01:13.670 --> 00:01:16.235
So this Maven W or maven W dot CMD,

00:01:16.235 --> 00:01:20.315
depending upon whether using a Windows system or a Linux based system,

00:01:20.315 --> 00:01:22.100
awesome derivative there ofs or for example,

00:01:22.100 --> 00:01:24.800
MAC, that depends which of these files are going to use.

00:01:24.800 --> 00:01:27.320
So maven W dot cmd is the one for Windows,

00:01:27.320 --> 00:01:30.485
Nevin W is the one for Linux based systems and Mac.

00:01:30.485 --> 00:01:32.960
And these files are basically aware of

00:01:32.960 --> 00:01:36.710
this directory and the execute this Maven rapid downloaded that Java,

00:01:36.710 --> 00:01:39.740
which looks inside the Maven rapid dot properties.

00:01:39.740 --> 00:01:41.940
And it will look inside that.

00:01:46.750 --> 00:01:48.815
And we'll see what's there.

00:01:48.815 --> 00:01:51.905
And what this file does that downloaded that we've just seen,

00:01:51.905 --> 00:01:55.880
uses the properties in here to download this specific version of m7.

00:01:55.880 --> 00:01:59.180
So you can see Apache Maven 3-6 X3 is the version of maven.

00:01:59.180 --> 00:02:02.480
Then it's going to download and install locally within our project.

00:02:02.480 --> 00:02:06.530
And it's retrieving that from you can see here the Maven central repository.

00:02:06.530 --> 00:02:09.995
So we've got an HTTPS repo Maven apache.org,

00:02:09.995 --> 00:02:14.900
Maven to what that means is that when you run them MW command for the first time,

00:02:14.900 --> 00:02:19.475
it's going to download and install that version of m7 into local project.

00:02:19.475 --> 00:02:21.380
And then as long as you keep invoking,

00:02:21.380 --> 00:02:22.685
moving through that command,

00:02:22.685 --> 00:02:26.330
it will continue to use the downloaded version that is placed in your project.

00:02:26.330 --> 00:02:27.905
So let's see that in action now.

00:02:27.905 --> 00:02:29.600
Say if I commend kay,

00:02:29.600 --> 00:02:31.550
to clear that, so I'm on Mac,

00:02:31.550 --> 00:02:33.095
so I need to use m, v, and w.

00:02:33.095 --> 00:02:34.790
If you're on Windows, you'll have to use M,

00:02:34.790 --> 00:02:37.880
V and W dot Cmd from a command prompt or a DOS prompt,

00:02:37.880 --> 00:02:41.435
which you can access going to the start menu and just typing cmd,

00:02:41.435 --> 00:02:42.545
which I'm sure you'll be aware of.

00:02:42.545 --> 00:02:43.850
So if I do dot m,

00:02:43.850 --> 00:02:45.080
v, and w, By the way,

00:02:45.080 --> 00:02:47.390
I'm prefixing it with a dot slash because I haven't

00:02:47.390 --> 00:02:50.180
included the current directory on my system path.

00:02:50.180 --> 00:02:51.935
So if I just typed in m, v, and w,

00:02:51.935 --> 00:02:54.620
because the current directory isn't defined in the system path,

00:02:54.620 --> 00:02:57.860
it wouldn't know that I was referring to the Maven wrapper which I want to execute.

00:02:57.860 --> 00:02:59.180
So I'll just put dot slash m, v,

00:02:59.180 --> 00:03:00.920
and w. Now for example,

00:03:00.920 --> 00:03:04.250
we could just type Spring Boot column.

00:03:04.250 --> 00:03:07.685
And so as part of the Pando XML file and started dependency,

00:03:07.685 --> 00:03:10.220
we also have a plugin that's been added to our project object model.

00:03:10.220 --> 00:03:14.930
Or you can't see explicitly Plug-in exists in the spring dashboards as its prefix.

00:03:14.930 --> 00:03:19.640
So you can see we're specifying a plug-in of spring dash Boot and the goal of R1.

00:03:19.640 --> 00:03:21.575
So if we press Enter there,

00:03:21.575 --> 00:03:24.410
what's going to happen now is the memory map is going to

00:03:24.410 --> 00:03:28.145
download the version of maven that requires an ac to kick off the build.

00:03:28.145 --> 00:03:30.335
And finally is going to start the application for us.

00:03:30.335 --> 00:03:32.330
And you can see here, it's done just that.

00:03:32.330 --> 00:03:35.900
It's, it's not a demo application in No.5 for four seconds,

00:03:35.900 --> 00:03:38.060
of course, because it was nothing for it to actually do

00:03:38.060 --> 00:03:40.460
because we didn't specify any extra dependencies in there.

00:03:40.460 --> 00:03:43.640
For example, to make it into a web application or anything like that.

00:03:43.640 --> 00:03:45.500
It just basically starts and then ends

00:03:45.500 --> 00:03:47.855
because that's how we get set up with the Melbourne Wrapper.

00:03:47.855 --> 00:03:52.205
If we clear this off with command K and then re-execute the command,

00:03:52.205 --> 00:03:55.580
we'll see that this time it won't download a whole heap of stuff.

00:03:55.580 --> 00:03:58.250
The reason is that now it's cached the dependencies which it

00:03:58.250 --> 00:04:01.925
requires inside the dot IMG slash repository folder.

00:04:01.925 --> 00:04:04.250
So on my system, for example,

00:04:04.250 --> 00:04:06.800
inside the home directory,

00:04:06.800 --> 00:04:10.970
there'll be MDM2 subdirectory and their repository sub directory.

00:04:10.970 --> 00:04:14.210
If I open that up, we can see here that these are all of

00:04:14.210 --> 00:04:17.705
the dependencies which are available in my local Maven repository.

00:04:17.705 --> 00:04:23.495
And in fact, if we look under org Spring framework,

00:04:23.495 --> 00:04:26.840
boot, which is a group ID for the spring with dependencies.

00:04:26.840 --> 00:04:29.150
So all of that spring framework dot boot,

00:04:29.150 --> 00:04:35.990
we can see here we've got a whole heap of dependencies which had been added.

00:04:35.990 --> 00:04:37.850
See if I extend that out.

00:04:37.850 --> 00:04:41.375
We can see here we've got Spring Boot and the version of sprinkler that we're using,

00:04:41.375 --> 00:04:43.595
we can just see here is version 231.

00:04:43.595 --> 00:04:47.135
So we can see here we've got the 2.3.1 release, which corresponds to that.

00:04:47.135 --> 00:04:50.225
And I haven't used Spring Boot 2.3.1 on this machine before.

00:04:50.225 --> 00:04:51.815
So you nitrified. If I click this,

00:04:51.815 --> 00:04:54.950
we should see that it's been downloaded just now.

00:04:54.950 --> 00:04:57.005
So today at three o'clock and I'm recording this.

00:04:57.005 --> 00:04:59.210
You can see here it's just being downloaded Now.

00:04:59.210 --> 00:05:04.280
See, that's why those dependencies and L safely cashed in our local repository.

00:05:04.280 --> 00:05:07.580
And once you have this setup command cages to clear that,

00:05:07.580 --> 00:05:09.620
once you have this setup, we can now execute

00:05:09.620 --> 00:05:11.780
any Maven commands which we're familiar with.

00:05:11.780 --> 00:05:13.040
So for example, M,

00:05:13.040 --> 00:05:15.395
V and W, clean,

00:05:15.395 --> 00:05:16.790
which will clean the project.

00:05:16.790 --> 00:05:18.425
So you can see here it's deleted.

00:05:18.425 --> 00:05:19.910
The target directory which

00:05:19.910 --> 00:05:23.195
the Maven build process would compile source artifacts into today,

00:05:23.195 --> 00:05:25.505
bill versions S other class files, for example.

00:05:25.505 --> 00:05:29.550
Or I could choose to compile the source code.

00:05:29.680 --> 00:05:33.275
Okay, so now we can see compiling one source file

00:05:33.275 --> 00:05:37.505
again to the target directory and so on.

00:05:37.505 --> 00:05:39.350
So anyway, if that's a good overview of how we get

00:05:39.350 --> 00:05:41.480
started with the Maven wrapper and how to

00:05:41.480 --> 00:05:46.680
use Maven with a Spring Boot project generated from the spring initializer website.
