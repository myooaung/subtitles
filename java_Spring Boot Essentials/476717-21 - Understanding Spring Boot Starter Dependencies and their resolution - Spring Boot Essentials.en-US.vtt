WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.330
In this video, we're going to look at how the starter dependencies work.

00:00:03.330 --> 00:00:06.900
So spring boots based on started dependencies is concepts of having

00:00:06.900 --> 00:00:10.515
dependencies which can bootstrap and pulling certain technology facets.

00:00:10.515 --> 00:00:12.630
And it works pretty much by exploiting

00:00:12.630 --> 00:00:15.705
the dependency resolution mechanism and transitive dependencies,

00:00:15.705 --> 00:00:18.960
which is common in the two main Bill frameworks today, which is Apache,

00:00:18.960 --> 00:00:21.765
Maven and Gradle, and also IV as well,

00:00:21.765 --> 00:00:23.835
which is another dependency management system.

00:00:23.835 --> 00:00:28.215
Although it's much less used, that's actually used internal inside greatly itself.

00:00:28.215 --> 00:00:29.595
So to understand what happens,

00:00:29.595 --> 00:00:33.375
let's jump into Chrome and let's go to start that spring ion.

00:00:33.375 --> 00:00:36.255
This is the spring initializer website that we've seen before.

00:00:36.255 --> 00:00:37.890
And what we're gonna do is if we just go,

00:00:37.890 --> 00:00:39.765
we're not going to Adelaide dependencies for now.

00:00:39.765 --> 00:00:42.280
We can add extra dependencies if you want to.

00:00:42.280 --> 00:00:45.260
And what I'm gonna do that for now suffice escape there.

00:00:45.260 --> 00:00:47.780
We're just gonna explore the existing project.

00:00:47.780 --> 00:00:49.820
And this is a Maven project we'll see.

00:00:49.820 --> 00:00:52.640
So we're going to explain the Started dependencies in terms of Maven.

00:00:52.640 --> 00:00:54.890
So if we just hit explore,

00:00:54.890 --> 00:00:58.775
then we'll see that the first file it takes us to is the Pando XML file.

00:00:58.775 --> 00:01:00.860
And this is the build file for maven,

00:01:00.860 --> 00:01:03.665
the standard Bill file, which defines the project object model.

00:01:03.665 --> 00:01:06.455
That's basically a representation of the project,

00:01:06.455 --> 00:01:09.455
which details how the project should be built in terms of dependencies,

00:01:09.455 --> 00:01:11.150
which needs to be pulled in, plug-ins,

00:01:11.150 --> 00:01:12.455
which needs to be executed,

00:01:12.455 --> 00:01:14.570
properties to Bill might use that kind of thing.

00:01:14.570 --> 00:01:15.830
Ci in the roots of the project,

00:01:15.830 --> 00:01:17.240
we have this pond XML file.

00:01:17.240 --> 00:01:18.740
So if we look inside here,

00:01:18.740 --> 00:01:21.305
if we look into the dependencies section,

00:01:21.305 --> 00:01:23.240
we can see that out of the box.

00:01:23.240 --> 00:01:25.175
If we exclude the test scopes, dependencies,

00:01:25.175 --> 00:01:26.630
and just look at the production ones,

00:01:26.630 --> 00:01:28.340
which are ones which don't have a scope.

00:01:28.340 --> 00:01:30.095
With a default scope is going to be compiled,

00:01:30.095 --> 00:01:32.585
which means independent civil independent production application.

00:01:32.585 --> 00:01:35.120
And both the compile class path and the run-time class path.

00:01:35.120 --> 00:01:38.705
And therefore bundled limit JAR file or in the more file in the women's lib directory.

00:01:38.705 --> 00:01:41.720
If we just focus our attention on this particular dependency here,

00:01:41.720 --> 00:01:46.010
we can see we've got the group ID of org dot Spring framework dot boot,

00:01:46.010 --> 00:01:49.115
and an artifact ID of Spring Boot starter.

00:01:49.115 --> 00:01:50.405
So armed with that knowledge,

00:01:50.405 --> 00:01:52.295
if we take this group ID,

00:01:52.295 --> 00:01:55.280
just take that and do command c to copy it.

00:01:55.280 --> 00:02:01.550
And then we're gonna leap over to search dot moveon.org.

00:02:01.550 --> 00:02:03.590
But we can get more information about

00:02:03.590 --> 00:02:06.155
the dependencies available in the Maven central repository,

00:02:06.155 --> 00:02:07.940
which is where all dependencies are pulled from,

00:02:07.940 --> 00:02:10.085
regardless of whether the projects are built with Maven,

00:02:10.085 --> 00:02:11.480
Gradle or IV or whatever,

00:02:11.480 --> 00:02:13.985
they're always pulled from the Maven central repository.

00:02:13.985 --> 00:02:15.725
So if we just put into the search bar here,

00:02:15.725 --> 00:02:18.455
org dot Spring framework dot boot and then colon.

00:02:18.455 --> 00:02:20.540
And then we go back to spring initializer.

00:02:20.540 --> 00:02:23.990
And we're just gonna take this artifact ID here.

00:02:23.990 --> 00:02:26.660
Again, command C to copy,

00:02:26.660 --> 00:02:30.590
go back into here, and just after the colon command V to paste.

00:02:30.590 --> 00:02:35.525
So now we can see we have this particular Spring Boot module mock dependency,

00:02:35.525 --> 00:02:36.875
if you like, piloted.

00:02:36.875 --> 00:02:40.940
And what we're looking at here is the men dependency in any Spring Boot project.

00:02:40.940 --> 00:02:42.110
So any spring wheat projects,

00:02:42.110 --> 00:02:44.930
regardless of whether it's a web app using

00:02:44.930 --> 00:02:48.350
spring NBC or if it's a command-line application,

00:02:48.350 --> 00:02:50.300
maybe doing some courts scheduling.

00:02:50.300 --> 00:02:52.430
Or if it's some kind of connector which have developed,

00:02:52.430 --> 00:02:55.460
which is again probably run from the command line or from a batch job,

00:02:55.460 --> 00:02:57.860
which is like doing some kind of publishing a messages

00:02:57.860 --> 00:03:01.160
or consuming from a queue whatever it might be.

00:03:01.160 --> 00:03:03.200
Regardless of the actual technology types which are

00:03:03.200 --> 00:03:05.615
used in the spring Boot application itself,

00:03:05.615 --> 00:03:08.420
this dependency will always be present.

00:03:08.420 --> 00:03:12.410
And this is an absolutely critical without exception number independence in

00:03:12.410 --> 00:03:14.270
the offspring boot projects need and

00:03:14.270 --> 00:03:16.355
without in fact you don't have a Spring Boot project.

00:03:16.355 --> 00:03:17.540
So very important.

00:03:17.540 --> 00:03:18.665
So let's take a look at it now.

00:03:18.665 --> 00:03:22.250
So we can see here we have the latest version of two dot three dot one that release.

00:03:22.250 --> 00:03:24.290
So we click on here.

00:03:24.290 --> 00:03:28.265
And this then takes us to the palm file for this dependency itself.

00:03:28.265 --> 00:03:31.085
So whereas before we saw the palm file for

00:03:31.085 --> 00:03:35.210
the sample project or the project that's gonna be generated from this spring,

00:03:35.210 --> 00:03:36.665
initialize a website here.

00:03:36.665 --> 00:03:39.230
In other words, our sprinkle application that we're about to

00:03:39.230 --> 00:03:41.840
develop or that we would be about to develop rather.

00:03:41.840 --> 00:03:44.300
Instead of thinking about something that dependency,

00:03:44.300 --> 00:03:51.500
what we're seeing here is actually the project object model of this dependency here.

00:03:51.500 --> 00:03:54.290
So however, works when we include this dependency,

00:03:54.290 --> 00:03:58.175
it doesn't just bring in one jar file called Spring Boot starter.

00:03:58.175 --> 00:04:03.770
Instead, it downloads the palm file for this Spring Boot starter.

00:04:03.770 --> 00:04:07.220
So I downloaded this file here effectively.

00:04:07.220 --> 00:04:10.020
And then it goes through

00:04:10.230 --> 00:04:14.740
and it grabs all of the dependencies which are declared in this file tube.

00:04:14.740 --> 00:04:17.950
So it's going to grab this Spring Boot starter.

00:04:17.950 --> 00:04:21.910
You can see here, he's gonna grab Spring Boot test.

00:04:21.910 --> 00:04:27.415
It's going to be grabbing Spring Boot test auto configure and all these other ones.

00:04:27.415 --> 00:04:29.695
And similarly as well, we could keep going.

00:04:29.695 --> 00:04:36.470
So if we copy this into another tab,

00:04:37.560 --> 00:04:41.995
and if we copy this to here.

00:04:41.995 --> 00:04:43.450
So now we're looking at the first dependency,

00:04:43.450 --> 00:04:48.190
which Spring bu itself or other which the Spring Boot started dependency will bring in.

00:04:48.190 --> 00:04:52.070
Goingto here, oops, I missed out on Esther.

00:04:56.040 --> 00:05:03.595
Then you see that V2 also has a palm file and it also brings in some dependencies.

00:05:03.595 --> 00:05:08.510
So this one's bringing in Ogden spring from the boot. Spring boots.

00:05:08.640 --> 00:05:12.820
And spring boots also configure Spring Boot starts a logging.

00:05:12.820 --> 00:05:14.980
Now it may well be that there's some overlap

00:05:14.980 --> 00:05:18.100
between what different dependencies bringing and that's okay.

00:05:18.100 --> 00:05:19.480
There won't be brought in twice.

00:05:19.480 --> 00:05:22.765
What happens is Maven or greater will make a unified,

00:05:22.765 --> 00:05:25.150
consolidated view of the full graph of

00:05:25.150 --> 00:05:28.660
dependencies and pull them all in separate jar files.

00:05:28.660 --> 00:05:31.870
And it does that by effectively recursing through, in other words,

00:05:31.870 --> 00:05:36.150
visiting each dependency, pulling its palm file, getting its dependencies.

00:05:36.150 --> 00:05:39.245
For each dependency there, pulling its palm file, getting its dependencies,

00:05:39.245 --> 00:05:41.780
and so on until the number of dependencies to be resolved,

00:05:41.780 --> 00:05:43.790
it works out that full dependency set.

00:05:43.790 --> 00:05:45.890
And then the complete set of jar files,

00:05:45.890 --> 00:05:48.770
which that corresponds to it'll download those into your

00:05:48.770 --> 00:05:51.830
or the local Melbourne repo cash or your local Gradle cash.

00:05:51.830 --> 00:05:54.860
And include those Jar files in the class path of the project.

00:05:54.860 --> 00:05:56.495
And then you'll see those in your IDE.

00:05:56.495 --> 00:05:59.075
You will see them included in your more file.

00:05:59.075 --> 00:06:01.685
If you're building a web app and you building a more file,

00:06:01.685 --> 00:06:03.350
you'll see them in the command launched.

00:06:03.350 --> 00:06:07.085
Use the JVM If you're willing the spring but application from,

00:06:07.085 --> 00:06:09.400
for example, inside intelligent idea.

00:06:09.400 --> 00:06:13.110
Those are the places where you'll see these particular classpath.
