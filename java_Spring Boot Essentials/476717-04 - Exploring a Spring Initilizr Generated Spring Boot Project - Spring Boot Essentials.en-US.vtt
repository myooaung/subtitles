WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.115
In this video, we're going to see how we can use Maven.

00:00:02.115 --> 00:00:03.779
We are spring goods application.

00:00:03.779 --> 00:00:07.485
So if I get a Finder window up and look into Downloads folder,

00:00:07.485 --> 00:00:09.570
and here's a spring routes application I just created

00:00:09.570 --> 00:00:11.910
from the spring initializer website.

00:00:11.910 --> 00:00:14.445
And from there I could download the demo dot zip.

00:00:14.445 --> 00:00:17.400
So I downloaded that to my machine and then unzip it.

00:00:17.400 --> 00:00:19.125
And that gave me this directory structure here.

00:00:19.125 --> 00:00:20.820
So let's just lose a demo dot zip pronounce.

00:00:20.820 --> 00:00:22.305
We don't need it anymore.

00:00:22.305 --> 00:00:25.245
And let's just quickly talk about what we actually have in here.

00:00:25.245 --> 00:00:29.880
So this project inside the demo folder will run completely out of the box.

00:00:29.880 --> 00:00:32.850
So it's a fully functioning spring Boot application already.

00:00:32.850 --> 00:00:35.055
So this particular one is built on Maven.

00:00:35.055 --> 00:00:37.695
And we know this because we've got a pond XML file here,

00:00:37.695 --> 00:00:39.810
which is a standard build file you'll find in Melbourne

00:00:39.810 --> 00:00:42.755
based projects and infer project object model.

00:00:42.755 --> 00:00:44.795
And inside that Pando XML file,

00:00:44.795 --> 00:00:49.160
you'll see a description of what's required to make the project run and compile.

00:00:49.160 --> 00:00:51.665
So for example, if we open this that we've Sublime Text,

00:00:51.665 --> 00:00:53.765
you can see here we've got the usual suspects.

00:00:53.765 --> 00:00:55.985
We've got Group ID, artifact ID version,

00:00:55.985 --> 00:00:58.925
which are the so-called gulf coordinates under which this project

00:00:58.925 --> 00:01:02.000
will live in any Maven repository in the ecosystem.

00:01:02.000 --> 00:01:04.595
And we also see we've got some dependencies here as well,

00:01:04.595 --> 00:01:05.750
which we'll speak about later.

00:01:05.750 --> 00:01:07.055
But these basically bringing in

00:01:07.055 --> 00:01:10.340
the Spring Boot runtime infrastructure to make all the Spring Boot magic happen,

00:01:10.340 --> 00:01:14.870
which is also this parents section here specifying the parent palm, palm, the XML file.

00:01:14.870 --> 00:01:16.460
In addition, at the roots of the projects,

00:01:16.460 --> 00:01:18.290
we've also got these two files here,

00:01:18.290 --> 00:01:20.645
m, v and w, and v n w dot CMD.

00:01:20.645 --> 00:01:22.610
And these are basically the Maven rappers.

00:01:22.610 --> 00:01:23.870
So a rapper basically is

00:01:23.870 --> 00:01:27.605
a small distribution of a bill technology such as Maven or Gretel,

00:01:27.605 --> 00:01:30.395
which just enabled you to bootstrap downward

00:01:30.395 --> 00:01:33.320
and use the proper version or the full version if you like,

00:01:33.320 --> 00:01:35.510
the full distribution of that build tool.

00:01:35.510 --> 00:01:37.520
And this is available in both Maven and Gradle

00:01:37.520 --> 00:01:39.665
projects generated with spring initializer.

00:01:39.665 --> 00:01:41.540
But here we can see the Maven replicas we chose

00:01:41.540 --> 00:01:43.820
me as the built-in audio for this project.

00:01:43.820 --> 00:01:47.195
There's also a help dot AMD markdown file which will give you

00:01:47.195 --> 00:01:50.720
helpful links to Maven to understand how to build the project.

00:01:50.720 --> 00:01:52.880
To the Spring Boot Maven plugin Guide to

00:01:52.880 --> 00:01:55.250
understand how to use the specific integrations we have

00:01:55.250 --> 00:01:57.080
Spring Boot that the spring but Maven plugin

00:01:57.080 --> 00:02:00.185
provides and also about creating an OCR image.

00:02:00.185 --> 00:02:02.435
If you want to do that as well.

00:02:02.435 --> 00:02:05.210
So if we open up the source folder next,

00:02:05.210 --> 00:02:07.250
so if weight down old and then click,

00:02:07.250 --> 00:02:10.100
it'll expand the whole tree recursively silicon,

00:02:10.100 --> 00:02:11.630
see everything in one go.

00:02:11.630 --> 00:02:15.515
So if we just open this out a little bit,

00:02:15.515 --> 00:02:19.175
so we can see here we have three files which are into discrete,

00:02:19.175 --> 00:02:21.050
in separate source trees.

00:02:21.050 --> 00:02:24.710
So in this section here, in this source trees or source main Java,

00:02:24.710 --> 00:02:28.055
this one here, this is basically the production source Good.

00:02:28.055 --> 00:02:29.165
So in source main Java,

00:02:29.165 --> 00:02:30.740
this is the production application here,

00:02:30.740 --> 00:02:32.360
which is demo application dot Java,

00:02:32.360 --> 00:02:33.920
which is generated for us.

00:02:33.920 --> 00:02:37.339
And also on the source men per Salzman resources.

00:02:37.339 --> 00:02:39.560
These are the production application properties.

00:02:39.560 --> 00:02:42.410
So in other words, these are the properties which are gonna be supplied and available

00:02:42.410 --> 00:02:45.620
to the demo application when the application starts up.

00:02:45.620 --> 00:02:47.750
So we can have access to those boys, for example,

00:02:47.750 --> 00:02:50.870
doing property injection, which we'll see later down the line in the course.

00:02:50.870 --> 00:02:52.535
So everything on the source main,

00:02:52.535 --> 00:02:55.144
that's all to do with the production application

00:02:55.144 --> 00:02:56.480
than otherwise, there's nothing about tests.

00:02:56.480 --> 00:02:59.690
There are any throw-away code or any helper code that we might

00:02:59.690 --> 00:03:03.470
need just to check things out or test that things are working in that kind of thing.

00:03:03.470 --> 00:03:05.900
Everything that's under source men is gonna

00:03:05.900 --> 00:03:09.365
comprise the actual application that we deployed to production.

00:03:09.365 --> 00:03:11.255
So in other words, if you generate a WAR file,

00:03:11.255 --> 00:03:13.790
you'd expect to see demo application dot class and

00:03:13.790 --> 00:03:16.805
application that properties in the webinar classes directory.

00:03:16.805 --> 00:03:19.460
And similarly, we would expect to see those artifacts in

00:03:19.460 --> 00:03:24.440
a self-executing JAR file as well as a sibling to source men though, sibling to this one.

00:03:24.440 --> 00:03:26.720
In other words, it's on the same level.

00:03:26.720 --> 00:03:33.140
We can see we have a source test directory tree and specific and resource test Java.

00:03:33.140 --> 00:03:36.560
These are the test Java sources.

00:03:36.560 --> 00:03:39.560
So he can see a demo application tests or Java,

00:03:39.560 --> 00:03:42.065
which is basically an empty Spring Boot test,

00:03:42.065 --> 00:03:44.285
which you can then plug integration tests into.

00:03:44.285 --> 00:03:45.680
And just like we go source

00:03:45.680 --> 00:03:48.890
main resources with any properties that are production code needs.

00:03:48.890 --> 00:03:50.270
We could also have other,

00:03:50.270 --> 00:03:52.760
we'd have to create it ourselves a source test Resources

00:03:52.760 --> 00:03:55.535
folder with any properties that our test classes might need.

00:03:55.535 --> 00:04:00.140
But the main part about this is that this whole application here,

00:04:00.140 --> 00:04:08.405
comprising of just 1234567 files.

00:04:08.405 --> 00:04:11.165
The soil application just comprising those seven files,

00:04:11.165 --> 00:04:14.420
is a complete spring goods application with tests,

00:04:14.420 --> 00:04:15.950
Rawlings, one with the build tool,

00:04:15.950 --> 00:04:18.155
Rogan too as well, all ready to go.

00:04:18.155 --> 00:04:21.335
So everything under here now is runnable and buildable.

00:04:21.335 --> 00:04:24.680
And we can do that using the Maven wrapper, which we've just spoken about.

00:04:24.680 --> 00:04:27.780
And we'll see how to do that in the next videos.
