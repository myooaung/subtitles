WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.300
In this video, we're going to look at common properties that you can configure

00:00:03.300 --> 00:00:06.360
in spring boots applications and when we can find those properties.

00:00:06.360 --> 00:00:14.990
So first off, let's jump into Chrome and go to spring the IR up

00:00:14.990 --> 00:00:18.650
to projects into Spring Boot lingo to

00:00:18.650 --> 00:00:24.185
learn and jump into Reference doc for the version that you're using.

00:00:24.185 --> 00:00:26.240
And if we just scroll up,

00:00:26.240 --> 00:00:30.425
we'll see here that we have this application Properties section.

00:00:30.425 --> 00:00:32.585
So if we just click into here,

00:00:32.585 --> 00:00:35.330
then what we're looking at now is basically the complete set of

00:00:35.330 --> 00:00:38.015
properties available in the 2.3.1 of Spring Boot,

00:00:38.015 --> 00:00:40.985
which we can configure in our application to properties files.

00:00:40.985 --> 00:00:43.730
So these are split up into core properties.

00:00:43.730 --> 00:00:47.390
These are properties that are common across any spring

00:00:47.390 --> 00:00:51.170
Boot application regardless of which technology facets you bring in.

00:00:51.170 --> 00:00:55.130
So here we can see we've got properties relating to how we can configure

00:00:55.130 --> 00:01:02.870
logging application Nim auto configuration classes we might want to exclude.

00:01:02.870 --> 00:01:07.235
This is useful if you want to specifically not have Spring Boot bringing certain classes.

00:01:07.235 --> 00:01:11.105
So for example, supposing you want to use your own platform transaction manager,

00:01:11.105 --> 00:01:13.235
and you could exclude it there.

00:01:13.235 --> 00:01:19.790
And spring that profiles to active is another good one.

00:01:19.790 --> 00:01:21.740
Visa basically spring profiles that you want to

00:01:21.740 --> 00:01:23.735
apply when you're running the application.

00:01:23.735 --> 00:01:26.060
So for example, you might have a spring profile for

00:01:26.060 --> 00:01:28.730
production and a spring profile for development.

00:01:28.730 --> 00:01:30.335
And so when you're running in production,

00:01:30.335 --> 00:01:34.310
you'd pass this property springing up refers to active equals production.

00:01:34.310 --> 00:01:37.205
So that's the spring dot profiles to antsy property,

00:01:37.205 --> 00:01:39.800
which enables you to pass a set of profiles that are

00:01:39.800 --> 00:01:42.590
active for the running spring boots application also as well.

00:01:42.590 --> 00:01:46.115
Not just the all of these are actually arranged alphabetically as well.

00:01:46.115 --> 00:01:48.080
So whenever you go through any of these sections,

00:01:48.080 --> 00:01:50.014
all the properties are always alphabetical.

00:01:50.014 --> 00:01:52.490
But since they all start with a given prefix,

00:01:52.490 --> 00:01:55.130
depending on the modules of Spring.me for example,

00:01:55.130 --> 00:01:56.465
or spring the output.

00:01:56.465 --> 00:01:58.970
Or in the case of core, a prefix which denotes

00:01:58.970 --> 00:02:01.430
a particular area of the core framework has been configured.

00:02:01.430 --> 00:02:03.230
Because of that, it means that our properties in

00:02:03.230 --> 00:02:05.600
the same area are grouped together, which is useful.

00:02:05.600 --> 00:02:09.900
So let's scroll down a little bit more.

00:02:10.090 --> 00:02:13.115
And that's pretty much it for the core properties.

00:02:13.115 --> 00:02:14.915
We'll gloss over cash,

00:02:14.915 --> 00:02:17.825
male and Jason because they are less used.

00:02:17.825 --> 00:02:20.600
Benjamin strains or data properties now.

00:02:20.600 --> 00:02:23.810
So that's Properties which is where you're configuring things like

00:02:23.810 --> 00:02:27.005
database connections with the JDBC URL in that kind of thing.

00:02:27.005 --> 00:02:29.790
So the main properties in here,

00:02:30.670 --> 00:02:34.940
you'll see we all start with Spring dot data and then the particular

00:02:34.940 --> 00:02:38.930
database thing or just so spring outdated or Cassandra spring that data,

00:02:38.930 --> 00:02:43.115
that couch base, which is a no SQL store elastic search we can see.

00:02:43.115 --> 00:02:45.994
And then we've got spring dot data dot JDBC,

00:02:45.994 --> 00:02:50.734
Silver Spring dot data when you want it to connect to databases through JDBC.

00:02:50.734 --> 00:02:53.270
There are four main properties which are used for this.

00:02:53.270 --> 00:02:54.830
But because they're in alphabetical order,

00:02:54.830 --> 00:02:58.070
the four men properties aren't grouped together, but I'll just go through them now.

00:02:58.070 --> 00:03:00.840
So just scrolling up.

00:03:00.880 --> 00:03:03.635
We're gonna pass TBC P2,

00:03:03.635 --> 00:03:05.075
which is the connection pulling stuff.

00:03:05.075 --> 00:03:07.625
We can see we've got spring not datasource,

00:03:07.625 --> 00:03:09.530
don't drive a dashed class_name.

00:03:09.530 --> 00:03:13.820
So here you'd put the fully qualified name of the JDBC driver that you using.

00:03:13.820 --> 00:03:15.770
So in the case of MySQL, for example,

00:03:15.770 --> 00:03:18.875
they'll become dot MySQL dot JDBC driver.

00:03:18.875 --> 00:03:20.705
In the case of H2,

00:03:20.705 --> 00:03:22.040
there'll be org dot TH2,

00:03:22.040 --> 00:03:24.300
that driver and so on.

00:03:24.610 --> 00:03:30.930
And actually it's probably easier if I just type in spring datasource.

00:03:31.480 --> 00:03:36.545
Use an m, which is gonna be the username of the database.

00:03:36.545 --> 00:03:38.750
We've also got password,

00:03:38.750 --> 00:03:41.450
which is the password we use to log into the database.

00:03:41.450 --> 00:03:46.430
And finally, we've got the JDBC URL itself,

00:03:46.430 --> 00:03:48.215
which is effectively the connection string,

00:03:48.215 --> 00:03:51.215
which data source is going to use to be able to connect to the database.

00:03:51.215 --> 00:03:56.510
So those are the four main properties in each user working with databases in Spring Boot.

00:03:56.510 --> 00:03:59.495
And when developing web applications.

00:03:59.495 --> 00:04:02.225
Going down to serve a properties.

00:04:02.225 --> 00:04:07.475
The main properties here are going to be served at port,

00:04:07.475 --> 00:04:09.260
which is the ports that spring boots.

00:04:09.260 --> 00:04:12.410
It's gonna listen on the HTTP connections and requests.

00:04:12.410 --> 00:04:15.155
And just underneath this, the other one,

00:04:15.155 --> 00:04:17.300
which is the context path.

00:04:17.300 --> 00:04:19.820
So server.js and the context path.

00:04:19.820 --> 00:04:24.600
This is the context path under which the web application is going to be available.

00:04:27.370 --> 00:04:29.525
And finally one more.

00:04:29.525 --> 00:04:31.490
And they can still logging, which is also useful.

00:04:31.490 --> 00:04:33.950
We can enable debug lungs with debug.

00:04:33.950 --> 00:04:38.315
And we can also pass in a specific logging framework configuration file as well.

00:04:38.315 --> 00:04:42.515
That's if you want to configure logging in more advanced way after the default.

00:04:42.515 --> 00:04:44.360
So for example, if you wanted to create

00:04:44.360 --> 00:04:47.750
different dependence with different pattern layoffs, that kind of thing.

00:04:47.750 --> 00:04:52.520
In terms of setting natural log levels themselves for individual packages though,

00:04:52.520 --> 00:04:54.800
you can just use this property here.

00:04:54.800 --> 00:04:56.555
Also properties of this.

00:04:56.555 --> 00:05:00.470
So you do logging the level dot and then you basically put in either the package name or

00:05:00.470 --> 00:05:03.050
the fully qualified name of the class that you want

00:05:03.050 --> 00:05:06.635
to have logging emitted from a controller logging off.

00:05:06.635 --> 00:05:08.450
And you can do it. You see that here, for example.

00:05:08.450 --> 00:05:11.255
So login dot level to all the Spring framework equals debug.

00:05:11.255 --> 00:05:13.220
So that would set everything in

00:05:13.220 --> 00:05:15.590
the Spring framework package or

00:05:15.590 --> 00:05:18.995
classes under that and also packages under that contained in those classes.

00:05:18.995 --> 00:05:21.065
Debbie said to be in the debug level.

00:05:21.065 --> 00:05:25.040
And you can also change the logging pattern

00:05:25.040 --> 00:05:28.170
as well if you'd want from within the configuration itself.

00:05:29.080 --> 00:05:31.745
So those are the main properties that you can set.

00:05:31.745 --> 00:05:33.800
And you can set them in either an application dot.properties

00:05:33.800 --> 00:05:36.350
file or internal application dot yaml file,

00:05:36.350 --> 00:05:37.595
whichever you prefer to do.

00:05:37.595 --> 00:05:40.130
Sometimes application dot yaml nicer because you can see

00:05:40.130 --> 00:05:43.265
the nesting of individual properties, which can be nice.

00:05:43.265 --> 00:05:45.740
Application dot properties files are also nice as well.

00:05:45.740 --> 00:05:49.040
If you have a large set of properties and sometimes you want a grip them,

00:05:49.040 --> 00:05:51.710
or to be able to do some search for specific keys.

00:05:51.710 --> 00:05:54.140
It's easy to do that in an application that.properties file because

00:05:54.140 --> 00:05:56.990
all the property keys have flattened out and the non-nested structure,

00:05:56.990 --> 00:05:59.555
which you'd have any YAML file, but that's entirely up to you.

00:05:59.555 --> 00:06:01.865
And also you can set them through command line switches as well.

00:06:01.865 --> 00:06:03.395
When you actually start the JVM,

00:06:03.395 --> 00:06:05.690
you can pass it a minus D switch with any of

00:06:05.690 --> 00:06:09.050
these properties to effectively override the existing property,

00:06:09.050 --> 00:06:11.075
which is an application that.properties file

00:06:11.075 --> 00:06:14.255
obligation YAML file bundled with the application.

00:06:14.255 --> 00:06:17.315
So yeah, those are the main properties which you'll want to get started with.

00:06:17.315 --> 00:06:19.970
And what I do is add a bookmark to this particular page.

00:06:19.970 --> 00:06:26.720
If we go back out, we can see we had that from the main Spring Boot homepage.

00:06:26.720 --> 00:06:28.385
We went into the Reference doc.

00:06:28.385 --> 00:06:30.815
And then at the bottom we have this application properties.

00:06:30.815 --> 00:06:34.310
So just set that as a link in your bookmarks and you'll

00:06:34.310 --> 00:06:36.050
always have it available and you can always just basically

00:06:36.050 --> 00:06:37.940
look through to find specific properties.

00:06:37.940 --> 00:06:40.790
So for example, if I wanted to find out about connection timeouts,

00:06:40.790 --> 00:06:42.290
because all of this is in boxes.

00:06:42.290 --> 00:06:43.805
All of these properties are in one page.

00:06:43.805 --> 00:06:48.630
I could just do Command F and then search for timeout.

00:06:51.040 --> 00:06:58.200
And keep looking until I saw the specific timeout.

00:06:58.570 --> 00:07:01.590
There was of interest to me.

00:07:03.040 --> 00:07:07.760
So for example, here, if I was using the Hickory connection pool,

00:07:07.760 --> 00:07:13.340
which is the one that comes as default inside spring boom. I can see that here.

00:07:13.340 --> 00:07:15.080
This is the property that I'd set.

00:07:15.080 --> 00:07:19.145
So a spring DO datasource to Hickory connection time out.

00:07:19.145 --> 00:07:22.700
But yeah, but my webpage always have it by your side.

00:07:22.700 --> 00:07:27.090
And those are the most common properties to get started with any Spring Boot project.
