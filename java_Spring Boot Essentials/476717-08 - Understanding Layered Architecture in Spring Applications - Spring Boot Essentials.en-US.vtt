WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.980
In this video, we're going to talk about how we can

00:00:01.980 --> 00:00:04.500
structure an application in today's modern Java world of

00:00:04.500 --> 00:00:07.320
Enterprise Application Architecture by looking at

00:00:07.320 --> 00:00:09.330
the different layers which we typically have in

00:00:09.330 --> 00:00:12.255
an application and just talking through what we'd expect to see.

00:00:12.255 --> 00:00:15.790
So if we first off goods your idea.

00:00:16.880 --> 00:00:21.090
And here we have a demo projects that we just opened up this project.

00:00:21.090 --> 00:00:25.365
So source, main Java package and demo application.

00:00:25.365 --> 00:00:27.015
So we don't have any code in here now,

00:00:27.015 --> 00:00:29.310
we're just going to create a few skeleton classes just to

00:00:29.310 --> 00:00:31.785
see what learning looks like in a real world application.

00:00:31.785 --> 00:00:34.995
So typically what you have in an application is you have different layers.

00:00:34.995 --> 00:00:40.225
So each layer is responsible for a different technical aspects of the application.

00:00:40.225 --> 00:00:43.310
And so I'll just put packages in now to demonstrate this layering.

00:00:43.310 --> 00:00:46.940
But for example, you might have layers such as packages,

00:00:46.940 --> 00:00:49.020
such as web,

00:00:50.950 --> 00:00:57.605
business data, for example.

00:00:57.605 --> 00:01:00.200
Now the actual names of these packages might change.

00:01:00.200 --> 00:01:02.899
Sometimes business might be called service or services.

00:01:02.899 --> 00:01:06.755
Sometimes data may be called persistence or database or db,

00:01:06.755 --> 00:01:08.360
what might be called web,

00:01:08.360 --> 00:01:11.540
or controllers, or presentation or something like that.

00:01:11.540 --> 00:01:13.640
But the key parts are that typically in

00:01:13.640 --> 00:01:17.525
a web-based application which is splits into lead architecture, you have a controller.

00:01:17.525 --> 00:01:23.520
So here we'll just see we got a controller.

00:01:24.550 --> 00:01:28.910
And the controller will be marked with the app controller annotation.

00:01:28.910 --> 00:01:31.205
And inside this controller,

00:01:31.205 --> 00:01:34.790
it'll basically need to access the layer underneath,

00:01:34.790 --> 00:01:37.440
which is the service layer on the business layer,

00:01:37.900 --> 00:01:41.180
to execute the actual business logic that we'll ever

00:01:41.180 --> 00:01:44.435
fulfills the needs of whatever web request that comes in.

00:01:44.435 --> 00:01:47.570
So for example, here, you'll see we've got

00:01:47.570 --> 00:01:51.350
a service and we don't have a service and the millets delicious create that for example.

00:01:51.350 --> 00:01:53.150
So credit class my service.

00:01:53.150 --> 00:01:55.970
And this isn't going to exist in the presentation layer.

00:01:55.970 --> 00:02:01.190
Instead, this is going to exist in the layer underneath, which is the business layer.

00:02:01.190 --> 00:02:06.600
Now the service will be annotated with announced service sanitation.

00:02:06.850 --> 00:02:12.620
And we'll encapsulate the business logic of whatever needs to be done.

00:02:12.620 --> 00:02:14.690
And in order to execute our business logic,

00:02:14.690 --> 00:02:19.205
and it's gonna delegate out itself to a repository.

00:02:19.205 --> 00:02:23.614
So for example, here we can see with a repository,

00:02:23.614 --> 00:02:27.030
and again, that's going to be also a wired in.

00:02:28.390 --> 00:02:31.040
And that's not gonna exist in the business layer.

00:02:31.040 --> 00:02:32.960
It's gonna exist a separate layer,

00:02:32.960 --> 00:02:35.435
which is in the data layer.

00:02:35.435 --> 00:02:38.330
And this is going to be of type repository,

00:02:38.330 --> 00:02:42.120
so it's gonna be annotated with Repository notation.

00:02:42.850 --> 00:02:47.630
So going from the top we have a controller which

00:02:47.630 --> 00:02:54.605
has also widen through dependency injection access to a service in the layer beneath.

00:02:54.605 --> 00:02:57.785
And then in turn that service,

00:02:57.785 --> 00:03:00.560
which is in the business layer, as we can see here,

00:03:00.560 --> 00:03:04.170
has dependency injected into a repository.

00:03:07.810 --> 00:03:14.090
And that repository in turn lives in the data layer.

00:03:14.090 --> 00:03:18.365
And that's gonna be responsible for doing the actual database access logic.

00:03:18.365 --> 00:03:20.690
So what we're really seeing here is the fact that

00:03:20.690 --> 00:03:24.680
the controller only knows how to deal with things at the

00:03:24.680 --> 00:03:25.970
Presentation level.

00:03:25.970 --> 00:03:29.705
So only knows how to interpret HTTP server requests,

00:03:29.705 --> 00:03:32.150
how to produce HTTP cellular responses

00:03:32.150 --> 00:03:33.995
or whatever abstraction the framework you're using,

00:03:33.995 --> 00:03:35.435
like spring and vc, for example,

00:03:35.435 --> 00:03:37.940
might use to represent those concepts.

00:03:37.940 --> 00:03:40.370
And there is no business logic in here whatsoever.

00:03:40.370 --> 00:03:42.815
That business logic is contained inside

00:03:42.815 --> 00:03:47.240
this business or service layer in separate services,

00:03:47.240 --> 00:03:49.550
which can be injected into this controller.

00:03:49.550 --> 00:03:50.930
But it doesn't have to have just one service.

00:03:50.930 --> 00:03:53.300
It could be many different services injected into our controller.

00:03:53.300 --> 00:03:55.565
And also there can be many different controllers as well,

00:03:55.565 --> 00:03:59.075
serving different types of use case for end users.

00:03:59.075 --> 00:04:02.615
So you might have a controller for placing orders, like an order controller,

00:04:02.615 --> 00:04:06.425
my over controller for looking at the product catalog,

00:04:06.425 --> 00:04:08.825
some kind of product controller, that kind of thing.

00:04:08.825 --> 00:04:12.080
But ultimately the business logic you have for being

00:04:12.080 --> 00:04:15.470
able to return product catalog views to the user,

00:04:15.470 --> 00:04:16.895
to be rendered in the browser,

00:04:16.895 --> 00:04:20.555
or to place an order for a product, those kind of things.

00:04:20.555 --> 00:04:24.455
The logic for that will be done in the service layer in individual services.

00:04:24.455 --> 00:04:27.965
But similarly, that service layer will just contain business logic.

00:04:27.965 --> 00:04:31.550
And it doesn't know at all how to communicate with the database.

00:04:31.550 --> 00:04:33.860
Doesn't know anything about the actual structure of

00:04:33.860 --> 00:04:37.340
the database tables or anything like that whereby the entity relationship model,

00:04:37.340 --> 00:04:41.780
that's the responsibility of the data or persistence layer.

00:04:41.780 --> 00:04:45.080
And that's gonna be coded in individual repositories.

00:04:45.080 --> 00:04:47.015
So in the repository,

00:04:47.015 --> 00:04:48.515
you'd expect to see methods in here,

00:04:48.515 --> 00:04:51.940
like find all products or find products by ID,

00:04:51.940 --> 00:04:53.120
find products by name,

00:04:53.120 --> 00:04:57.365
that kind of thing, or save order and things like that.

00:04:57.365 --> 00:05:01.580
The advantage of lead architecture as well is that because you don't end up

00:05:01.580 --> 00:05:05.540
polluting an individual layer with any concerns of the layer beneath.

00:05:05.540 --> 00:05:07.640
In other words, because we don't have any business logic

00:05:07.640 --> 00:05:10.055
which is leaking into the controller.

00:05:10.055 --> 00:05:12.620
Or we don't have any data access logic which is leaking into

00:05:12.620 --> 00:05:15.545
services because we have a very clear separation of concerns.

00:05:15.545 --> 00:05:20.615
And we partition things off into very discreet and very well-defined layers.

00:05:20.615 --> 00:05:22.865
Because of this, it means that we can actually

00:05:22.865 --> 00:05:25.325
swap out layers if he wants it at a later date.

00:05:25.325 --> 00:05:27.980
So for example, women that you might be using

00:05:27.980 --> 00:05:30.710
a relational database store for a particular repository,

00:05:30.710 --> 00:05:32.300
for example, the product catalog.

00:05:32.300 --> 00:05:34.820
And then supposing your product catalog really grows,

00:05:34.820 --> 00:05:36.980
really balloons up and this becomes huge.

00:05:36.980 --> 00:05:38.870
Then it might make sense to move away from

00:05:38.870 --> 00:05:41.480
a relational database model because the database you're using,

00:05:41.480 --> 00:05:42.860
maybe it's creaking under its own weight,

00:05:42.860 --> 00:05:44.405
maybe using SQL Server.

00:05:44.405 --> 00:05:46.400
And there's just too much information in there.

00:05:46.400 --> 00:05:47.525
It's not really working.

00:05:47.525 --> 00:05:49.910
And you might decide you wanna go to a no SQL store,

00:05:49.910 --> 00:05:53.420
or you might want to go to like a big datatype in that aspect,

00:05:53.420 --> 00:05:55.010
offer the service you might,

00:05:55.010 --> 00:05:58.910
instead of just making plane villa calls out to repositories,

00:05:58.910 --> 00:06:02.705
you might decide that you need to have some kind of big data batch repository instead.

00:06:02.705 --> 00:06:04.850
And layering gives you the flexibility of being able to

00:06:04.850 --> 00:06:07.250
swap one layer out and replace it with another layer,

00:06:07.250 --> 00:06:09.725
providing you stick to the same interface.

00:06:09.725 --> 00:06:11.120
And that brings us to the other thing as well.

00:06:11.120 --> 00:06:13.430
We can also put interfaces around these objects.

00:06:13.430 --> 00:06:16.790
So typically you'd have an interface for each service,

00:06:16.790 --> 00:06:18.110
interface for each repository,

00:06:18.110 --> 00:06:19.385
interface for each controller.

00:06:19.385 --> 00:06:23.360
So they can have that facility to be able to just Programs at the interface and that

00:06:23.360 --> 00:06:27.665
allegedly swap out for different implementation as an integral application develops.

00:06:27.665 --> 00:06:31.970
Anyway, that's a very quick overview of how learning works in enterprise applications.

00:06:31.970 --> 00:06:33.590
And now you're in a good position to be able to

00:06:33.590 --> 00:06:37.500
understand and start developing your own enterprise apps.
