WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.660
In this video, we're going to explore how Spring Boot auto detects

00:00:03.660 --> 00:00:05.925
different technology facets that you include

00:00:05.925 --> 00:00:08.565
into your spring of applications. So let's jump him.

00:00:08.565 --> 00:00:11.380
So first off, we're going to idea.

00:00:18.380 --> 00:00:21.990
And here you can see we've got a demo project.

00:00:21.990 --> 00:00:25.815
And inside the source main Java,

00:00:25.815 --> 00:00:28.140
we've got our demo application,

00:00:28.140 --> 00:00:30.360
which is just a bare-bones spring application,

00:00:30.360 --> 00:00:34.300
which has this Spring Boot application annotation them.

00:00:34.340 --> 00:00:37.050
And inside the Resources folder we've got

00:00:37.050 --> 00:00:39.300
an application dot properties with

00:00:39.300 --> 00:00:42.820
just some basic configuration to establish data source.

00:00:42.820 --> 00:00:45.155
So close that down.

00:00:45.155 --> 00:00:47.690
So I offspring boots auto detection mechanism

00:00:47.690 --> 00:00:50.915
works is that when we run this spring application,

00:00:50.915 --> 00:00:57.390
this effectively, if we jumping through the methods,

00:00:58.180 --> 00:01:00.440
kinda scroll this up a little bit.

00:01:00.440 --> 00:01:02.360
This is the mainspring application here.

00:01:02.360 --> 00:01:04.610
This is actually now in the Spring Boot framework code.

00:01:04.610 --> 00:01:07.295
And in a nutshell, it creates an application context.

00:01:07.295 --> 00:01:09.860
So regular spring application context,

00:01:09.860 --> 00:01:12.080
a configurable application context in this case.

00:01:12.080 --> 00:01:18.305
And then it does a refresh context and refresh context ultimately delegates down.

00:01:18.305 --> 00:01:22.895
If we go through to the actual application context itself,

00:01:22.895 --> 00:01:24.690
to its refresh method.

00:01:24.690 --> 00:01:26.335
So we jump into here.

00:01:26.335 --> 00:01:30.385
We can see this is an interface method on configurable application context.

00:01:30.385 --> 00:01:31.960
But it's implemented by,

00:01:31.960 --> 00:01:33.910
if we just get our command age type hierarchy

00:01:33.910 --> 00:01:36.640
up is implemented by concrete implementations.

00:01:36.640 --> 00:01:38.260
So if we expand all of these,

00:01:38.260 --> 00:01:40.480
it will be implemented in, for example,

00:01:40.480 --> 00:01:42.700
an annotation config web application

00:01:42.700 --> 00:01:45.970
context if you happen to be developing a web application.

00:01:45.970 --> 00:01:51.235
So at any rate, whichever one of these,

00:01:51.235 --> 00:01:53.635
which is the one which is selected by Spring Boot to instantiate.

00:01:53.635 --> 00:01:57.920
So whichever application context it decides it's going to create.

00:01:58.380 --> 00:02:00.490
Jumping back up to the top,

00:02:00.490 --> 00:02:02.170
which it does in this method call here.

00:02:02.170 --> 00:02:05.530
It's going to call the refresh method on the application context.

00:02:05.530 --> 00:02:09.420
And that's gonna basically build the spring consider itself.
