WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.830
In this video, we're going to see how we can create

00:00:01.830 --> 00:00:06.119
a springboard application completely from scratch using spring initializer.

00:00:06.119 --> 00:00:08.880
So first off, let's go to the spring initialized a website.

00:00:08.880 --> 00:00:17.355
So if we go into Chrome and so I've been start spring the IR.

00:00:17.355 --> 00:00:20.175
You can see it's daring my history already.

00:00:20.175 --> 00:00:23.535
And so here we are at the spring initializer website.

00:00:23.535 --> 00:00:27.780
So what this allows us to do is basically create a Spring Boot web app completely from

00:00:27.780 --> 00:00:32.055
scratch using whichever technologies you choose from the dependencies section.

00:00:32.055 --> 00:00:34.830
So let's just talk through some of these options. First of all.

00:00:34.830 --> 00:00:36.930
So first off, you can see we can choose

00:00:36.930 --> 00:00:40.070
the actual build technology of the projects we're going to use.

00:00:40.070 --> 00:00:41.300
And you've got two choices here.

00:00:41.300 --> 00:00:43.475
You can either use Maven or Gradle.

00:00:43.475 --> 00:00:46.610
If it use a Maven best project than that will come with a palm.

00:00:46.610 --> 00:00:48.350
The XML file in the root of the project,

00:00:48.350 --> 00:00:51.860
which describes the project object model which is coming in Maven projects.

00:00:51.860 --> 00:00:53.780
And if you choose a Gradle project,

00:00:53.780 --> 00:00:57.260
then the project will be generated with a build doc Gradle file,

00:00:57.260 --> 00:00:59.885
which again is the convention in Gradle based projects.

00:00:59.885 --> 00:01:01.160
In either of those cases,

00:01:01.160 --> 00:01:04.370
you end up with a build file which enables you to specify the group ID,

00:01:04.370 --> 00:01:07.460
artifact ID, and version of the application you are developing.

00:01:07.460 --> 00:01:09.290
In addition to an area where you'd specify

00:01:09.290 --> 00:01:11.495
the dependencies which are including into the project.

00:01:11.495 --> 00:01:14.974
So the project knows how to go out and grab those dependencies.

00:01:14.974 --> 00:01:16.760
There's libraries and frameworks from

00:01:16.760 --> 00:01:19.940
the Maven central repository or any other repositories you choose to add.

00:01:19.940 --> 00:01:21.590
And also what's nice is that both of

00:01:21.590 --> 00:01:25.505
these bill technology types come with a wrapper for the built-in logging question.

00:01:25.505 --> 00:01:28.595
This is basically a small starter version for the build technology,

00:01:28.595 --> 00:01:32.180
which effectively enabled you to bootstrap and installation of the build tools.

00:01:32.180 --> 00:01:35.075
And they'd be Maven Gradle locally within the project itself,

00:01:35.075 --> 00:01:37.835
such that you can then use that to build your project,

00:01:37.835 --> 00:01:40.190
which saves you from any up front work of actually having

00:01:40.190 --> 00:01:42.770
to install Maven or Gradle onto your local system.

00:01:42.770 --> 00:01:45.800
First, of course, if you do have Maven or Gradle installed,

00:01:45.800 --> 00:01:47.420
that's also fine. You can use that.

00:01:47.420 --> 00:01:49.790
But it's nice to have a rapper because then it means that everything

00:01:49.790 --> 00:01:52.445
self-contained and available in that one project.

00:01:52.445 --> 00:01:54.230
So that's the bill Technology section.

00:01:54.230 --> 00:01:56.195
We also have a choice of languages as well.

00:01:56.195 --> 00:01:57.860
So there are three languages supported with

00:01:57.860 --> 00:02:00.275
spring boots applications, and those are Java,

00:02:00.275 --> 00:02:01.775
which is obviously the most popular one,

00:02:01.775 --> 00:02:02.855
which the Spring framework,

00:02:02.855 --> 00:02:06.545
which Spring boot is built on top of what's coded in and designed for from the outset.

00:02:06.545 --> 00:02:08.195
We also have two other options,

00:02:08.195 --> 00:02:09.770
which are other JVM languages,

00:02:09.770 --> 00:02:11.000
those languages which provide

00:02:11.000 --> 00:02:14.150
a different programming syntax than standard Java that we're used to,

00:02:14.150 --> 00:02:15.890
but can still become pile down to

00:02:15.890 --> 00:02:19.145
the same target byte code that runs in the Java virtual machine.

00:02:19.145 --> 00:02:21.260
And there's a whole host of other JVM languages

00:02:21.260 --> 00:02:22.955
which are out there in the Java ecosystem,

00:02:22.955 --> 00:02:25.340
the scholar enclosure as well to name another to

00:02:25.340 --> 00:02:28.040
put spring initializer currently gives us these two options,

00:02:28.040 --> 00:02:32.750
which are the main ones we'd like to use anyway in terms of primary alternatives to Java.

00:02:32.750 --> 00:02:34.875
And yet those are Katlyn and groovy.

00:02:34.875 --> 00:02:37.735
So Collins, the programming language from JetBrains,

00:02:37.735 --> 00:02:41.305
which is a company that and behind the ID IntelliJ idea.

00:02:41.305 --> 00:02:43.630
And Groovy is more of a released,

00:02:43.630 --> 00:02:45.715
it's viewed as more of a scripting language

00:02:45.715 --> 00:02:48.100
because it's used in so many scripting context.

00:02:48.100 --> 00:02:50.140
For example, in Jenkins pipelines,

00:02:50.140 --> 00:02:53.020
putting continuous builds off or build scripts in itself.

00:02:53.020 --> 00:02:54.265
In Gradle for example,

00:02:54.265 --> 00:02:56.470
Imelda groovy is a much bigger language

00:02:56.470 --> 00:02:58.555
and it's personally the language that I favor most,

00:02:58.555 --> 00:03:00.010
but it's viewed as a scripting language.

00:03:00.010 --> 00:03:02.170
Nevertheless, it's been around for quite a while,

00:03:02.170 --> 00:03:03.370
much longer than cotton has,

00:03:03.370 --> 00:03:05.020
and it's from the Apache Foundation.

00:03:05.020 --> 00:03:06.760
Both Katlyn and groovy gives you

00:03:06.760 --> 00:03:10.900
a more lighter touch way of being able to develop applications than Java does.

00:03:10.900 --> 00:03:13.840
So those are definitely some alternative you might want to look up later down

00:03:13.840 --> 00:03:17.310
the line as you expand your knowledge of Java and programming in general.

00:03:17.310 --> 00:03:19.040
But yeah, it's certainly possible to design

00:03:19.040 --> 00:03:22.310
spring goods applications with Katlyn or groovy, with Java, of course,

00:03:22.310 --> 00:03:24.065
being the primary choice than most people,

00:03:24.065 --> 00:03:25.940
just because of Java's pervasiveness in

00:03:25.940 --> 00:03:28.505
the Spring framework and the development community around that.

00:03:28.505 --> 00:03:30.290
Underneath here you can see we've got

00:03:30.290 --> 00:03:32.840
the different versions of Spring Boot which we can use.

00:03:32.840 --> 00:03:34.835
There was an older version of Spring Boot before,

00:03:34.835 --> 00:03:36.860
which was the 1.2x branch of Spring Boot,

00:03:36.860 --> 00:03:39.650
but that's now been superseded by the two branch.

00:03:39.650 --> 00:03:41.240
So for New Spring Boot projects,

00:03:41.240 --> 00:03:43.790
you always want to use Spring Boot tool and above.

00:03:43.790 --> 00:03:45.710
And the latest stable production version you can see

00:03:45.710 --> 00:03:48.695
here is version two dot three dot one.

00:03:48.695 --> 00:03:53.075
Underneath here you will see the section where you can add the project metadata.

00:03:53.075 --> 00:03:55.325
So this is where you basically set up their group ID,

00:03:55.325 --> 00:03:57.320
artifact ID of the project.

00:03:57.320 --> 00:04:00.590
This means that in your local bill repositories the built artifacts.

00:04:00.590 --> 00:04:03.470
So JAR file, a WAR file or whatever you might be building,

00:04:03.470 --> 00:04:05.855
will appear in a directory which reflects that.

00:04:05.855 --> 00:04:07.870
So for example, if you're using Maven,

00:04:07.870 --> 00:04:09.665
it'll be in the home directory.

00:04:09.665 --> 00:04:11.270
Then a dot M2 directory,

00:04:11.270 --> 00:04:13.355
then endo M2 sub-directory underneath there,

00:04:13.355 --> 00:04:14.930
then repository sub directory,

00:04:14.930 --> 00:04:18.560
and the directory structure which is calm slash example slash demo.

00:04:18.560 --> 00:04:20.780
You can also specify the name of the project,

00:04:20.780 --> 00:04:23.405
a brief description, and also the package as well.

00:04:23.405 --> 00:04:25.040
So when the projects generated,

00:04:25.040 --> 00:04:26.540
you'll get started class which starts

00:04:26.540 --> 00:04:29.225
the application and bootstraps the springboard runtime,

00:04:29.225 --> 00:04:31.370
and that will then be placed under that package.

00:04:31.370 --> 00:04:34.805
You can also underneath choose the packaging of the project.

00:04:34.805 --> 00:04:36.200
So it was Spring Boot applications.

00:04:36.200 --> 00:04:38.555
You can either run them as a standalone JAR file.

00:04:38.555 --> 00:04:40.940
And how that works is that standalone JAR file is

00:04:40.940 --> 00:04:44.195
executable and he has an embedded version of Tomcat in there.

00:04:44.195 --> 00:04:47.090
The web container which your sprint with application runs in y can

00:04:47.090 --> 00:04:50.285
go for more traditional approach and packaged application as a WAR file,

00:04:50.285 --> 00:04:53.120
which can then be deployed into an external web container.

00:04:53.120 --> 00:04:56.120
Again, such as Tomcat or some of the more enterprise level ones

00:04:56.120 --> 00:04:59.330
like with logic server, webs, FieldGlass fish.

00:04:59.330 --> 00:05:01.940
For Java versions, you've got three options.

00:05:01.940 --> 00:05:04.550
Java eight, Job 11, or Java 14.

00:05:04.550 --> 00:05:08.195
So if you want to use the latest and greatest version of Java and all that entails,

00:05:08.195 --> 00:05:10.670
you can use version 14 if you just want to

00:05:10.670 --> 00:05:13.370
use and take advantage of Java as modularity system,

00:05:13.370 --> 00:05:15.215
modular system, you can use Java 11,

00:05:15.215 --> 00:05:17.315
since that was introduced in Java nine plus.

00:05:17.315 --> 00:05:19.580
But most folks are gonna be using Java eight.

00:05:19.580 --> 00:05:22.130
Also note as well as the minimum version required for

00:05:22.130 --> 00:05:25.070
spring bruce applications and actually for spring itself after

00:05:25.070 --> 00:05:27.650
spring version four and Java eight as a language version

00:05:27.650 --> 00:05:30.560
which supports the newly introduced functional programming stuff.

00:05:30.560 --> 00:05:32.855
So for example, lambda expressions,

00:05:32.855 --> 00:05:35.825
pipelines and streams, method references, that kinda thing.

00:05:35.825 --> 00:05:37.055
Now underneath this panel,

00:05:37.055 --> 00:05:40.085
you'll see the panel of buttons here.

00:05:40.085 --> 00:05:41.765
And there are three main options for this,

00:05:41.765 --> 00:05:43.475
depending upon what you actually want to do.

00:05:43.475 --> 00:05:45.875
So once you've filled in all these details.

00:05:45.875 --> 00:05:48.335
But we will talk about the dependencies section a second,

00:05:48.335 --> 00:05:50.150
since that's probably the most interesting part,

00:05:50.150 --> 00:05:52.940
because it gives us access to all the different technologies that we can possibly use.

00:05:52.940 --> 00:05:54.500
An a Spring Boot application,

00:05:54.500 --> 00:05:56.315
where there were three options here.

00:05:56.315 --> 00:05:58.685
So the first option is share.

00:05:58.685 --> 00:06:00.695
So if you click this link here,

00:06:00.695 --> 00:06:03.830
then what this will do is we'll take all of the settings that you put in

00:06:03.830 --> 00:06:07.520
here and just compacted into a single link that you can then email off to somebody.

00:06:07.520 --> 00:06:09.275
So for example, supposing you have somebody,

00:06:09.275 --> 00:06:11.555
you're working within your team, your tech lead,

00:06:11.555 --> 00:06:14.345
and you want them to NACA quick application to implement, say,

00:06:14.345 --> 00:06:17.930
a simple Java app that runs a schedule job every hour, for example.

00:06:17.930 --> 00:06:20.360
Then you could just basically fill up all these fields at

00:06:20.360 --> 00:06:23.450
the dependencies that you want to add and then just send them this link.

00:06:23.450 --> 00:06:27.065
And then what they can do is they can visit that link by clicking on it all,

00:06:27.065 --> 00:06:29.795
putting into the address bar in the browser and hitting Enter.

00:06:29.795 --> 00:06:33.440
And then they'll see that spring initialize a website with all the settings set,

00:06:33.440 --> 00:06:35.390
but you had before you send them the link.

00:06:35.390 --> 00:06:37.670
And that can be nice because it can save you having to send

00:06:37.670 --> 00:06:39.740
around zip files, maybe if they're not allowed.

00:06:39.740 --> 00:06:42.560
For example, if you count sends it files in a corporate environment.

00:06:42.560 --> 00:06:45.065
Because of firewall configuration or things like that.

00:06:45.065 --> 00:06:46.400
So it's just nice to be able to do that.

00:06:46.400 --> 00:06:50.495
So that's a nice feature for sharing initial spring initializer configuration.

00:06:50.495 --> 00:06:52.835
So you can close that by hitting escape.

00:06:52.835 --> 00:06:54.275
The other option is explore.

00:06:54.275 --> 00:06:55.655
So if you hit explore,

00:06:55.655 --> 00:06:59.180
then you basically gets a browsable view of the projects that

00:06:59.180 --> 00:07:02.825
he's going to put into a demo dot zip or acronym dot zip file for you.

00:07:02.825 --> 00:07:05.645
And you can choose, for example, to look at different artifacts. You can see here.

00:07:05.645 --> 00:07:09.740
Here we can see the pond XML file and the dependence is that it's added.

00:07:09.740 --> 00:07:15.575
You can see we've got the group ID and artifacts or any name and description,

00:07:15.575 --> 00:07:19.160
those kinds of things that the Java version that we selected before.

00:07:19.160 --> 00:07:20.960
You can go into and have a look at

00:07:20.960 --> 00:07:24.545
the source files that it generated will speak about those later.

00:07:24.545 --> 00:07:28.205
And basically have a look around and see what it's going to generate for you.

00:07:28.205 --> 00:07:29.930
The files onto editable by the way,

00:07:29.930 --> 00:07:32.330
but it's nice to be able to browse them and is also good as well.

00:07:32.330 --> 00:07:35.120
So for example, when you add an extra dependency or if you want to

00:07:35.120 --> 00:07:38.630
add a new facet to Spring Boot to bring in a different technology type.

00:07:38.630 --> 00:07:40.910
You can select it from the dependency section,

00:07:40.910 --> 00:07:42.095
which we'll see in a second.

00:07:42.095 --> 00:07:45.110
Go back into here, browse the pond XML file and then just grab

00:07:45.110 --> 00:07:48.395
the dependency and put it in your own projects has always nice to do as well.

00:07:48.395 --> 00:07:50.420
So we can close that off by paying escape,

00:07:50.420 --> 00:07:52.205
or you can just hit the button.

00:07:52.205 --> 00:07:56.240
Before doing that though, we have a choice to just download the whole project.

00:07:56.240 --> 00:07:59.015
Or alternatively, we can just download the individual file.

00:07:59.015 --> 00:08:01.265
So if I wanted to just download this pond XML file,

00:08:01.265 --> 00:08:05.165
I can hit download here only to copy the XML file to my clipboard.

00:08:05.165 --> 00:08:06.320
I can hit that as well.

00:08:06.320 --> 00:08:08.940
So just escape out of this.

00:08:09.310 --> 00:08:11.720
And finally we come to generate.

00:08:11.720 --> 00:08:14.960
Generate is basically what it's going to allow you to download the whole zip file.

00:08:14.960 --> 00:08:18.140
So the whole project in a zip file that you can then unzip and

00:08:18.140 --> 00:08:19.730
get started with straight away without

00:08:19.730 --> 00:08:21.905
having to set up an extra tooling, which we'll see.

00:08:21.905 --> 00:08:24.170
Now let's have a look at the dependency section.

00:08:24.170 --> 00:08:26.600
So this for me is the most interesting parts of

00:08:26.600 --> 00:08:28.850
the spring initializer application because it gives us

00:08:28.850 --> 00:08:31.685
access to all of the different technologies we've got in Spring boot,

00:08:31.685 --> 00:08:34.085
which pretty much is not just Spring Boot itself.

00:08:34.085 --> 00:08:37.355
It's pretty much the whole technology stack available throughout the spring ecosystem.

00:08:37.355 --> 00:08:40.115
So everything's in there that you could possibly want to look at,

00:08:40.115 --> 00:08:41.975
possibly want to include in your projects.

00:08:41.975 --> 00:08:42.890
So I just have a look here.

00:08:42.890 --> 00:08:44.855
So we're going to add dependencies.

00:08:44.855 --> 00:08:46.520
As you add a dependency, by the way,

00:08:46.520 --> 00:08:49.190
each time you'll see the dependencies added underneath.

00:08:49.190 --> 00:08:51.080
So we hit add dependencies.

00:08:51.080 --> 00:08:54.080
And now at the top you can see you can start typing

00:08:54.080 --> 00:08:57.125
to search for the facets that you want to bring into your project.

00:08:57.125 --> 00:08:59.030
So for example, if I know I'm gonna connect to

00:08:59.030 --> 00:09:01.745
a database and a relational database management system.

00:09:01.745 --> 00:09:03.170
I could hit GPA.

00:09:03.170 --> 00:09:04.940
And here it filters out to show us

00:09:04.940 --> 00:09:09.065
the spring data GPA dependency that we can bring in the so-called started dependency.

00:09:09.065 --> 00:09:11.810
That's not a dependency, is a dependency which brings in

00:09:11.810 --> 00:09:15.350
the whole set of dependencies required for a given facet of technology.

00:09:15.350 --> 00:09:19.130
So when I say facet, I mean kind of like broadly a specific area of technology.

00:09:19.130 --> 00:09:21.020
So a facet might be, for example,

00:09:21.020 --> 00:09:25.145
dealing with databases or dealing with a messaging system,

00:09:25.145 --> 00:09:28.520
killing very broad technology area choices, those kinds of things.

00:09:28.520 --> 00:09:31.070
So anyway, so underneath a we can see it's highlighted

00:09:31.070 --> 00:09:33.950
the one option now based on upstream that we've searched for which your GPA,

00:09:33.950 --> 00:09:35.975
it's pulled back spring data GPA.

00:09:35.975 --> 00:09:38.180
And there's a brief description here. So it says persist data in

00:09:38.180 --> 00:09:41.735
SQL stores where Java persistence API using Spring and Hibernate.

00:09:41.735 --> 00:09:44.315
So if you want that, just press Enter.

00:09:44.315 --> 00:09:46.715
And if you press Enter, it'll take you back out.

00:09:46.715 --> 00:09:48.560
But if you want to add multiple things,

00:09:48.560 --> 00:09:53.045
multiple dependencies, you'd just click add dependencies is if just hitting Enter.

00:09:53.045 --> 00:09:55.805
We can also do as well is when you're filtering these.

00:09:55.805 --> 00:09:58.940
So for example, let's supposing I filter on a tag this time.

00:09:58.940 --> 00:10:04.265
So SQL. And you can see here we've got a whole set of dependencies that we could add,

00:10:04.265 --> 00:10:05.615
which has to do with SQL.

00:10:05.615 --> 00:10:07.700
What I can do as well is I can press and hold

00:10:07.700 --> 00:10:09.950
down command at the same time and then click.

00:10:09.950 --> 00:10:12.485
So for example, let's assume that I want to have

00:10:12.485 --> 00:10:16.445
liquid based migration that could just go down here and I'm holding down command.

00:10:16.445 --> 00:10:19.655
And then when I click, notice what happens in the background.

00:10:19.655 --> 00:10:21.980
You can just about see it there, the y her,

00:10:21.980 --> 00:10:25.220
I'll pick one which is bit longer.

00:10:25.220 --> 00:10:28.550
Probably this'll MySQL, for example, Microsoft SQL server.

00:10:28.550 --> 00:10:31.730
So now if I hit command and press on the dependency,

00:10:31.730 --> 00:10:34.715
you can see here it's added, so we just escape out of this.

00:10:34.715 --> 00:10:38.510
You'll see that it's also allowing you to add multiple dependencies in Mongo.

00:10:38.510 --> 00:10:42.260
And you can delete dependencies and remove them from the configuration is by

00:10:42.260 --> 00:10:45.784
pressing these whiteness is each time you invite to Aunt dependencies,

00:10:45.784 --> 00:10:47.750
you can also hit Command B to do that.

00:10:47.750 --> 00:10:49.610
And looking at these different technologies,

00:10:49.610 --> 00:10:52.250
you can see that we have different categories available.

00:10:52.250 --> 00:10:54.320
So you can see developer tools.

00:10:54.320 --> 00:10:57.260
We've got web scrolling up,

00:10:57.260 --> 00:11:02.870
we've got template engines, security, SQL.

00:11:02.870 --> 00:11:05.720
So really, now it's really phenomenal that we're in a world

00:11:05.720 --> 00:11:08.000
where we can just like plug and play different technologies

00:11:08.000 --> 00:11:11.630
that we want to include an application and all the stopping you creating an app with

00:11:11.630 --> 00:11:14.090
these technologies is just really understanding how they work

00:11:14.090 --> 00:11:17.105
together and understanding the various APIs and paradigms behind them.

00:11:17.105 --> 00:11:21.275
So it's a really powerful place where we're in now with spring boots in the Java world,

00:11:21.275 --> 00:11:23.420
you know the fact that I can just create an application completely from

00:11:23.420 --> 00:11:26.795
scratch and it just runs out of the box, which we'll see shortly.

00:11:26.795 --> 00:11:28.070
Also minor things as well.

00:11:28.070 --> 00:11:31.685
But if you want to have a dark mode which is kind of nicer as you can choose this,

00:11:31.685 --> 00:11:35.285
for example, if you're working late at night humanoids to do that anyway.

00:11:35.285 --> 00:11:37.310
Okay, back out to,

00:11:37.310 --> 00:11:39.365
we'll have to add any independencies and we'd still get

00:11:39.365 --> 00:11:41.780
a Spring Boot application which works completely from scratch.

00:11:41.780 --> 00:11:45.060
So we'll just teach in a rate now to download them.

00:11:47.020 --> 00:11:49.325
Because it's downloading now.

00:11:49.325 --> 00:11:52.700
And at this point, we click into this.

00:11:52.700 --> 00:11:54.710
And I've been at the project.

00:11:54.710 --> 00:12:00.260
You can see here that all of this

00:12:00.260 --> 00:12:05.570
here is our Spring Boot application generated by spring initializer.

00:12:05.570 --> 00:12:07.685
And it's all ready to go out of the box.

00:12:07.685 --> 00:12:12.420
And they run and develops with and we'll see how to do that in later videos.
