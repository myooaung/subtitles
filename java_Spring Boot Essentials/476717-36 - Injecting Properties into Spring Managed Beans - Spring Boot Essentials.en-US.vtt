WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.055
In this video, we're going to take a look at

00:00:02.055 --> 00:00:05.385
configuring an accessing properties in spring two applications.

00:00:05.385 --> 00:00:06.660
So let's get started.

00:00:06.660 --> 00:00:14.070
Let's go into idea. So here we can see we've got a simple application.

00:00:14.070 --> 00:00:16.905
So we're going to source main,

00:00:16.905 --> 00:00:19.500
Java are production source code folder.

00:00:19.500 --> 00:00:21.820
We've got a demo application here.

00:00:25.270 --> 00:00:30.530
And we'll just set up a beam.

00:00:30.530 --> 00:00:33.350
Then we can use spin manage being just so we can demonstrate

00:00:33.350 --> 00:00:36.200
how that being connected as a property inside the screen runtime.

00:00:36.200 --> 00:00:43.980
So let's imagine we've got just an application info class for example.

00:00:44.800 --> 00:00:50.795
And I just going to be a component which is picked up three components scanning.

00:00:50.795 --> 00:00:56.510
I want to set a property which is releasing them,

00:00:56.510 --> 00:01:01.310
for example, is very arbitrary contrived example,

00:01:01.310 --> 00:01:03.290
but just bear with me for a second.

00:01:03.290 --> 00:01:05.825
Spring will actually does give you the ability to manage

00:01:05.825 --> 00:01:08.435
dual properties and so on, versioning and everything.

00:01:08.435 --> 00:01:11.030
But we just want to have a spin managed beam in which we

00:01:11.030 --> 00:01:14.015
inject a property from the environment into IP so we can use it.

00:01:14.015 --> 00:01:17.600
Ok, so all applications will have an application

00:01:17.600 --> 00:01:21.215
that.properties file which lives inside the source main resources folder.

00:01:21.215 --> 00:01:23.780
So application dot properties.

00:01:23.780 --> 00:01:26.480
And so again, that's Application Info.

00:01:26.480 --> 00:01:30.620
We have a release name. So maybe we've got a property which is called

00:01:30.620 --> 00:01:35.645
myapp dot release name equals

00:01:35.645 --> 00:01:40.850
and then an int for the release codename on something other than a Golden Eagle.

00:01:40.850 --> 00:01:43.115
The level have a released called Golden Eagle book,

00:01:43.115 --> 00:01:44.900
whatever, some kind of property we're passing him.

00:01:44.900 --> 00:01:46.115
Now notice in this property,

00:01:46.115 --> 00:01:47.960
we have a space that's perfectly fine.

00:01:47.960 --> 00:01:50.345
Notice as well that we've named the property.

00:01:50.345 --> 00:01:53.839
We have a prefix and the prefix is the name of our application.

00:01:53.839 --> 00:01:55.760
So that's a best practice to do that.

00:01:55.760 --> 00:02:00.365
And also we've got this hyphenated style of having separate budget keys,

00:02:00.365 --> 00:02:03.590
which are kinda composed of two different words or two or more different words.

00:02:03.590 --> 00:02:05.660
So release dash M, and that's because that's in

00:02:05.660 --> 00:02:08.180
the same style as the Spring Boot for EMOC does it.

00:02:08.180 --> 00:02:11.210
So image will stick to the same style since the same convention.

00:02:11.210 --> 00:02:13.355
Okay, so we've got this myapp dot release name.

00:02:13.355 --> 00:02:15.170
If we wanted to get this into the application,

00:02:15.170 --> 00:02:17.885
then you want to get into this application info object.

00:02:17.885 --> 00:02:20.580
Or we need to do is to use an add value.

00:02:20.580 --> 00:02:23.410
So if we use our value from this package a or

00:02:23.410 --> 00:02:25.914
the Spring framework beans the factory annotation.

00:02:25.914 --> 00:02:28.585
We can specify an expression in here,

00:02:28.585 --> 00:02:33.235
which enables us to access the property and de reference its actual value.

00:02:33.235 --> 00:02:35.710
So here we can see we'd have, for example,

00:02:35.710 --> 00:02:42.910
myapp dot release national m. So now we can show that we get this.

00:02:42.910 --> 00:02:44.110
Maybe we have, for example,

00:02:44.110 --> 00:02:46.105
we could either implement initializing being

00:02:46.105 --> 00:02:48.445
to get a callback when the beans being initialized.

00:02:48.445 --> 00:02:51.670
And we could have a method which is annotated with post construct

00:02:51.670 --> 00:02:55.300
sprints at that property will probably

00:02:55.300 --> 00:03:04.135
just listened to an application started event.

00:03:04.135 --> 00:03:08.860
So application started, implement the method

00:03:08.860 --> 00:03:16.480
that I just put

00:03:16.480 --> 00:03:20.395
release name and the value is injected m.

00:03:20.395 --> 00:03:22.570
So now if we run this when the application context

00:03:22.570 --> 00:03:24.640
is created and the application started,

00:03:24.640 --> 00:03:25.870
so everything's fully loaded,

00:03:25.870 --> 00:03:27.925
initialized all the properties have been injected in.

00:03:27.925 --> 00:03:31.450
We should be able to see the value which has been assigned to this field,

00:03:31.450 --> 00:03:36.100
which comes from my appetite released dash m as part of the application property set.

00:03:36.100 --> 00:03:38.110
And that's been defined in here.

00:03:38.110 --> 00:03:42.140
So let's just run our application now.

00:03:43.290 --> 00:03:47.120
And here we can see we have Golden Eagle, muslim,

00:03:47.120 --> 00:03:51.090
they're actually for the previous video.

00:03:51.460 --> 00:03:54.200
I included this debug flag will just remove

00:03:54.200 --> 00:04:04.440
this similar just run demo application domain.

00:04:05.260 --> 00:04:09.245
We can see here we have released them, golden eagle.

00:04:09.245 --> 00:04:17.430
Now if you don't set this and we run it,

00:04:20.110 --> 00:04:24.720
then we can see we just have an empty value and that's okay.
