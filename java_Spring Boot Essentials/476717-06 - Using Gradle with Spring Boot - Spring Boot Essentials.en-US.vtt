WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.570
In this video, we're going to look at how we can work with the Gradle wrapper,

00:00:03.570 --> 00:00:06.360
which is provided with a default spring Boot application

00:00:06.360 --> 00:00:08.760
created with the spring initializer website providing,

00:00:08.760 --> 00:00:12.270
of course, you've chosen Gradle as they build technology you want to use.

00:00:12.270 --> 00:00:14.980
So let's go into terminal.

00:00:15.530 --> 00:00:21.840
I ever just increase that size and maximize it.

00:00:21.840 --> 00:00:24.670
If I go into my Downloads directory,

00:00:26.150 --> 00:00:29.040
then we can see here a demo projects which have

00:00:29.040 --> 00:00:31.650
just created with the spring initialize a website.

00:00:31.650 --> 00:00:34.255
It's on the project's doesn't have any dependencies in it.

00:00:34.255 --> 00:00:38.345
And it's just got all the default settings to the spring initializer website provides

00:00:38.345 --> 00:00:40.250
deliverance being absorptive from using Maven

00:00:40.250 --> 00:00:42.755
as-built technology to using Gradle instead.

00:00:42.755 --> 00:00:45.590
So if I just see the into here,

00:00:45.590 --> 00:00:49.340
here we can see the contents of the generated project.

00:00:49.340 --> 00:00:53.390
So we can see we have a build.gradle file in the root of the project.

00:00:53.390 --> 00:00:56.045
So let's open that up in sublime text and just have a quick look.

00:00:56.045 --> 00:00:59.945
So this defines the usual things will expect to see or expect to see.

00:00:59.945 --> 00:01:02.675
So the group ID and version

00:01:02.675 --> 00:01:06.835
that Java source compatible in which here is 1.8 repository that's gonna

00:01:06.835 --> 00:01:10.280
use to resolve dependencies which are standard is

00:01:10.280 --> 00:01:14.435
the Maven central repository located at Repo one dot moveon.org.

00:01:14.435 --> 00:01:19.040
You can see some plug-ins we should project also uses to provide integration.

00:01:19.040 --> 00:01:20.255
We have Spring Boot itself,

00:01:20.255 --> 00:01:23.420
which we'll see in a second test section,

00:01:23.420 --> 00:01:24.815
which has this using JUnit.

00:01:24.815 --> 00:01:29.420
And finally a dependency section where the Spring Boot started dependency and

00:01:29.420 --> 00:01:31.970
also test dependency just so that it can access

00:01:31.970 --> 00:01:35.900
a Spring Boot test framework to enable us to do testing as well, out-of-the-box.

00:01:35.900 --> 00:01:39.215
So if we close that and go back out to terminal.

00:01:39.215 --> 00:01:41.810
So let's discuss what we have here as pertaining to Gradle.

00:01:41.810 --> 00:01:46.445
So we can see we've got a settings doc Gradle file which defines global properties.

00:01:46.445 --> 00:01:48.740
If we have a multi-modal project,

00:01:48.740 --> 00:01:51.515
which is project isn't, it's a single level, top level project.

00:01:51.515 --> 00:01:54.560
But nonetheless, most Gradle projects have a settings not Gradle there anyway,

00:01:54.560 --> 00:01:58.385
just to facilitate the move into multimodal projects if the project evolves in that way,

00:01:58.385 --> 00:02:00.815
we also have the build-up Gradle file, which we've just seen,

00:02:00.815 --> 00:02:04.220
which defines the actual configuration to do the build itself with Gradle,

00:02:04.220 --> 00:02:06.725
to build a project and be able to run it and that kind of thing.

00:02:06.725 --> 00:02:12.080
We see two scripts which are Gradle w and Gradle w dot Pat.

00:02:12.080 --> 00:02:15.815
And these are basically Scripts which we'll use to invoke the Gradle wrapper,

00:02:15.815 --> 00:02:17.600
which enables that wrapper to download

00:02:17.600 --> 00:02:20.645
the actual real griddle installation locally into our system,

00:02:20.645 --> 00:02:22.670
such that subsequently whenever we invoke riddle

00:02:22.670 --> 00:02:25.565
commands through these scripts or through either script which you're using.

00:02:25.565 --> 00:02:27.905
It will use the downloaded Gretel distribution,

00:02:27.905 --> 00:02:29.285
which will wrap a setup for us.

00:02:29.285 --> 00:02:31.130
By the way, as far as these two scripts go,

00:02:31.130 --> 00:02:34.415
we have two scripts for the two different operating system flavors.

00:02:34.415 --> 00:02:37.820
So if you're running a Windows machine developing with Windows,

00:02:37.820 --> 00:02:41.420
you'd use Gradle w dot bat from a DOS prompt, command prompt.

00:02:41.420 --> 00:02:44.870
And if you're in the Linux world on Mac or Unix,

00:02:44.870 --> 00:02:46.445
you'd use Gradle w.

00:02:46.445 --> 00:02:48.680
So yeah, those are the two scripts there in general,

00:02:48.680 --> 00:02:52.595
you'll be using to do the Gradle builds to build your Spring Boot project with.

00:02:52.595 --> 00:02:55.445
This leaves us with just one more artifact to talk about now,

00:02:55.445 --> 00:02:57.950
and that's the Gradle repository which is here.

00:02:57.950 --> 00:02:59.735
So let's just have a quick look inside there.

00:02:59.735 --> 00:03:04.025
So if we open up our Gradle directory,

00:03:04.025 --> 00:03:07.970
we can see here that we have a rapper subdirectory.

00:03:07.970 --> 00:03:10.640
So if we click on wrapper to get into that directory,

00:03:10.640 --> 00:03:11.960
we can see that we have two files.

00:03:11.960 --> 00:03:15.440
We have Gradle, wrapper, dot, jar and grid or rapid properties.

00:03:15.440 --> 00:03:19.170
So if we just have a look at Gradle rapid at properties.

00:03:23.040 --> 00:03:28.700
And look at this alongside the contents of the folder.

00:03:29.280 --> 00:03:33.040
So what's going to happen is, and how the Gradle wrapper works is that

00:03:33.040 --> 00:03:36.910
the first time you invoke Gradle command through one of these scripts.

00:03:36.910 --> 00:03:39.220
So Gradle w or Gradle w dot bat.

00:03:39.220 --> 00:03:42.490
It's gonna check and see if you have the Gradle version it specifies in

00:03:42.490 --> 00:03:45.970
this.properties file here is going to check if you have Gretel 64,

00:03:45.970 --> 00:03:47.125
one bin dot zip.

00:03:47.125 --> 00:03:49.750
And if you don't have it, it's gonna use the code inside here,

00:03:49.750 --> 00:03:51.355
acquittal rapid or jar,

00:03:51.355 --> 00:03:54.880
to basically download this distribution which is here.

00:03:54.880 --> 00:04:01.080
You can see that services Gradle.org distributions and then this distribution filename.

00:04:01.080 --> 00:04:03.725
And it's going to unzip that then into griddle user Home,

00:04:03.725 --> 00:04:07.115
which is a doc Gradle folder under your user home directory.

00:04:07.115 --> 00:04:10.655
So on Mac that's tilda Slashdot Gradle, and on windows in my B,

00:04:10.655 --> 00:04:15.800
C colon backslash uses and then your username in the latest versions of Windows.

00:04:15.800 --> 00:04:17.690
And it's going to unzip that insulin wrapper disks

00:04:17.690 --> 00:04:19.550
folder under a subdirectory of the same name.

00:04:19.550 --> 00:04:21.470
So Gradle six dot 4.1a.

00:04:21.470 --> 00:04:23.795
So this wrapper mechanism is nice because it means that

00:04:23.795 --> 00:04:26.255
you don't have to set up the bill to yourself when your system,

00:04:26.255 --> 00:04:29.420
this rapid mechanism is gonna take care of downloading the version which

00:04:29.420 --> 00:04:32.705
the project requires and installing onto your local system for you.

00:04:32.705 --> 00:04:34.865
And it's always going to use that same version.

00:04:34.865 --> 00:04:36.665
That's nice because particularly with Gradle,

00:04:36.665 --> 00:04:40.820
sometimes you can run into issues where because of differences in the Gradle DSL,

00:04:40.820 --> 00:04:43.565
the syntax you use to create Gradle files

00:04:43.565 --> 00:04:46.460
because of differences in syntax between different versions.

00:04:46.460 --> 00:04:49.250
Sometimes you can get some very obscure errors in Gradle,

00:04:49.250 --> 00:04:51.020
and it means things just weren't built the way you

00:04:51.020 --> 00:04:53.270
expect in the best-case and worst-case,

00:04:53.270 --> 00:04:54.590
they've just won't build at all.

00:04:54.590 --> 00:04:57.980
So it's nice to always have a consistent version when you're building your projects.

00:04:57.980 --> 00:05:00.335
And this rapid mechanism gives you that facility.

00:05:00.335 --> 00:05:02.735
So let's clear that now. Now we've command k.

00:05:02.735 --> 00:05:08.420
You can also type clear and hit Enter or CLS on Dawson Windows Control L in Unix.

00:05:08.420 --> 00:05:12.245
And now we're going to use the Gradle wrapper to run the Spring Boot project.

00:05:12.245 --> 00:05:15.320
So it's Gradle w because I'm on Mac,

00:05:15.320 --> 00:05:17.690
that's the version that I need and I'm prefixing it here.

00:05:17.690 --> 00:05:19.790
You can see we have a dot slash and that's because I don't

00:05:19.790 --> 00:05:22.925
have the current directory which is represented by dots.

00:05:22.925 --> 00:05:25.100
I don't have that in my current path.

00:05:25.100 --> 00:05:27.005
So by prefixing it with dot slash,

00:05:27.005 --> 00:05:28.640
I'm telling the system to look for

00:05:28.640 --> 00:05:31.535
that file in the current directory, which is where it is.

00:05:31.535 --> 00:05:33.875
And then the command, we're going to use his boots and run.

00:05:33.875 --> 00:05:35.900
And notice it's camelcase here as well.

00:05:35.900 --> 00:05:38.450
So Boot R1 is basically the task which is

00:05:38.450 --> 00:05:41.345
made available to us from the Gradle Spring Boot plug-in.

00:05:41.345 --> 00:05:44.045
And it allows us to run a Spring Boot application.

00:05:44.045 --> 00:05:46.230
So if I hit Enter now,

00:05:47.020 --> 00:05:50.900
you can see I didn't have this specific version of Gradle,

00:05:50.900 --> 00:05:53.540
so Gretel 64 when I didn't have it on my system.

00:05:53.540 --> 00:05:58.595
Now it's downloading them from services.net or.org in that location there.

00:05:58.595 --> 00:06:01.080
That'll take a few moments.

00:06:02.290 --> 00:06:05.375
And now you can see it's building the project.

00:06:05.375 --> 00:06:07.640
So behind the scenes it's actually downloading all of

00:06:07.640 --> 00:06:10.250
the dependencies which the project itself needs,

00:06:10.250 --> 00:06:14.330
which are the Spring Boot started dependencies included in the project.

00:06:14.330 --> 00:06:17.180
Although it's not as obviously is doing that as it will be with a Maven build.

00:06:17.180 --> 00:06:21.080
For example, Nevin tends to be very verbose with its output.

00:06:21.080 --> 00:06:23.390
Whereas the newer versions of gradle output,

00:06:23.390 --> 00:06:25.130
the progress messages on the same line,

00:06:25.130 --> 00:06:27.350
pretty much, which keeps things tidy up.

00:06:27.350 --> 00:06:28.535
And yeah, it's finished.

00:06:28.535 --> 00:06:32.150
So now you can see we're using Version two dot three dot one of Spring boot,

00:06:32.150 --> 00:06:34.130
and it started a demo application.

00:06:34.130 --> 00:06:37.535
He is the Started demo application in zero-point for five seconds.

00:06:37.535 --> 00:06:39.170
And in this particular demo application,

00:06:39.170 --> 00:06:40.955
I didn't include any other dependencies.

00:06:40.955 --> 00:06:43.430
So Because I didn't include any dependencies which

00:06:43.430 --> 00:06:45.905
would have caused the application to keep running.

00:06:45.905 --> 00:06:49.340
So for example, if you're developing a web app and include Spring Web

00:06:49.340 --> 00:06:53.060
for the spring web MVC stuff in your application that when you do a boot run,

00:06:53.060 --> 00:06:56.405
then it would keep the application going because it's a web container.

00:06:56.405 --> 00:06:58.910
So it keeps him willing to actively listen and report,

00:06:58.910 --> 00:07:02.720
which by default is 8080 to listen to web requests or HTTP requests.

00:07:02.720 --> 00:07:05.525
Because I didn't include anything like that in my dependencies.

00:07:05.525 --> 00:07:08.195
The application just starts up and then it finishes,

00:07:08.195 --> 00:07:10.100
which is fine. And it's what we expect.

00:07:10.100 --> 00:07:13.805
Now if I commend k and if I do that command again,

00:07:13.805 --> 00:07:16.130
we'll see this time it'll be much quicker.

00:07:16.130 --> 00:07:18.635
And you see it's just a few seconds,

00:07:18.635 --> 00:07:20.435
actually 1 second new fact.

00:07:20.435 --> 00:07:23.570
And the reason being is because it's already downloaded that Gradle wrapper.

00:07:23.570 --> 00:07:25.640
So that distribution we saw downloading before.

00:07:25.640 --> 00:07:27.725
It's already downloaded that it's already using it.

00:07:27.725 --> 00:07:30.020
And furthermore, it's already got the dependencies

00:07:30.020 --> 00:07:32.345
which it requires in its local cradle cache.

00:07:32.345 --> 00:07:33.965
So if we command K again,

00:07:33.965 --> 00:07:36.170
let's just see where it is installed.

00:07:36.170 --> 00:07:40.460
Gradle distribution seems if I look inside the doc Gradle folder in my home directory,

00:07:40.460 --> 00:07:42.350
you'll see here we've got a wrapper.

00:07:42.350 --> 00:07:50.120
If I open that up, which is probably a better way of looking at things,

00:07:50.120 --> 00:07:52.790
then you will see or have a rapper,

00:07:52.790 --> 00:07:56.630
some directory here and a distal subdirectory.

00:07:56.630 --> 00:07:59.255
And if I just open this up now,

00:07:59.255 --> 00:08:06.755
you should see the inhere this specific directory.

00:08:06.755 --> 00:08:10.520
Then this is the actual grill distribution.

00:08:10.520 --> 00:08:13.745
Nice downloaded. See if I go back out.

00:08:13.745 --> 00:08:18.545
I if I just right-click and it gets info.

00:08:18.545 --> 00:08:24.815
You can see here it's open for the July 344,

00:08:24.815 --> 00:08:27.635
which is if you look here just a few minutes ago.

00:08:27.635 --> 00:08:32.525
And it's done that because I didn't have that specific version of Gradle on my system.

00:08:32.525 --> 00:08:34.735
I did have other versions. As you can see,

00:08:34.735 --> 00:08:36.605
I didn't have that specific version.

00:08:36.605 --> 00:08:38.480
It's nice because it means that through

00:08:38.480 --> 00:08:41.135
this mechanism you're always gonna get the exact version that you need.

00:08:41.135 --> 00:08:43.310
And also it's gonna reuse and make available.

00:08:43.310 --> 00:08:45.710
These are the versions for other Gradle projects.

00:08:45.710 --> 00:08:49.325
And the reason for that is because it's not stored inside the project itself.

00:08:49.325 --> 00:08:53.750
Instead, it stored it inside the doc Gradle folder in your home directory.

00:08:53.750 --> 00:09:00.125
If I go back out and then jump up to caches and go into modules two,

00:09:00.125 --> 00:09:02.675
and then files to one.

00:09:02.675 --> 00:09:06.695
So it was a bit strange and Gretel with these strange-sounding folders,

00:09:06.695 --> 00:09:08.090
mavens much more straightforward,

00:09:08.090 --> 00:09:10.250
this dot M2 slash repository folder.

00:09:10.250 --> 00:09:11.855
However, if we go inside caches,

00:09:11.855 --> 00:09:15.020
modules tomb files to one will see that these are all of

00:09:15.020 --> 00:09:18.989
the dependencies which exist in my griddle repository.

00:09:18.989 --> 00:09:21.970
So if I maximize that, and for example,

00:09:21.970 --> 00:09:24.190
now if I look for 4G,

00:09:24.190 --> 00:09:29.710
see OLG Spring framework.

00:09:29.710 --> 00:09:32.365
Yet all spring from o dot boot.

00:09:32.365 --> 00:09:34.990
That's where all the Spring Boot dependencies live.

00:09:34.990 --> 00:09:40.150
And we can see here Spring Boot and we can see 2.3.1 release.

00:09:40.150 --> 00:09:45.310
And if I go back out and re-run the app again quickly,

00:09:45.310 --> 00:09:48.490
you will see that here we're using 231 release.

00:09:48.490 --> 00:09:51.445
Here it's downloaded 2.3.1 release.

00:09:51.445 --> 00:09:56.290
And also for it get the info and then you can see here

00:09:56.290 --> 00:10:01.915
that it downloaded shortly after we downloaded the Gradle wrapper as well as 345.

00:10:01.915 --> 00:10:03.760
So now at this stage,

00:10:03.760 --> 00:10:05.905
the rapper has downloaded the Gretel distribution

00:10:05.905 --> 00:10:08.275
that was specified in the project is cashed out.

00:10:08.275 --> 00:10:10.210
It's available for future invocations of

00:10:10.210 --> 00:10:13.840
Gradle and the Spring Boot dependencies are downloaded to.

00:10:13.840 --> 00:10:19.030
Say if I close down and close down the command key here,

00:10:19.030 --> 00:10:20.560
I can now just execute

00:10:20.560 --> 00:10:23.770
gradle commands like you could do in any regular Gradle based projects.

00:10:23.770 --> 00:10:26.245
So for example, I could choose to clean the project.

00:10:26.245 --> 00:10:29.740
When, if I look now, you will see that there's no build folder.

00:10:29.740 --> 00:10:31.120
So normally with Gradle projects,

00:10:31.120 --> 00:10:33.805
you have a build folder where all the built artifacts are placed.

00:10:33.805 --> 00:10:37.810
So for example, class files and resources generated artifacts, that kind of thing.

00:10:37.810 --> 00:10:40.960
I can again Command K and I could choose to, for example,

00:10:40.960 --> 00:10:44.685
compile Java, which would compile to production Java source code.

00:10:44.685 --> 00:10:47.015
So that's done that.

00:10:47.015 --> 00:10:50.540
And now if I look, we can see we've got that built folder here.

00:10:50.540 --> 00:10:53.970
And we can see if we look inside the Build folder.

00:10:53.980 --> 00:10:58.295
Meso class file of the Spring Boot production Java application.

00:10:58.295 --> 00:11:01.730
Say yeah, that's a nice introduction to how you can get up and running using

00:11:01.730 --> 00:11:03.470
the Gradle wrapper and the Gradle build tool

00:11:03.470 --> 00:11:07.020
itself to work with your Spring Boot application projects.
