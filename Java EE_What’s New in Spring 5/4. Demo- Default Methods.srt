1
00:00:01,937 --> 00:00:03,843
To demonstrate the default method functionality,

2
00:00:03,843 --> 00:00:07,409
I've gone ahead and created a simple little project

3
00:00:07,409 --> 00:00:10,623
here that is defined using four files.

4
00:00:10,623 --> 00:00:14,000
And in the first file, our AppConfig,

5
00:00:14,000 --> 00:00:19,109
we have an interface that defines the configuration for our application.

6
00:00:19,109 --> 00:00:23,864
We have a bean as designated on line 6 using the @Bean

7
00:00:23,864 --> 00:00:27,093
annotation that implements the MessageBean interface.

8
00:00:27,093 --> 00:00:33,044
The MessageBean interface is the code that actually defines

9
00:00:33,044 --> 00:00:37,713
our PostConstruct default method that, just as a simple System.

10
00:00:37,713 --> 00:00:37,943
out.

11
00:00:37,943 --> 00:00:40,334
println for us here, we could do more with it,

12
00:00:40,334 --> 00:00:44,128
but this works for the example that we're trying to illustrate here.

13
00:00:44,128 --> 00:00:48,037
And we have a bean that actually implements this interface,

14
00:00:48,037 --> 00:00:53,986
the ShowMessageBean that has the method for showing our message.

15
00:00:53,986 --> 00:00:56,186
Finally we have an Applicate.

16
00:00:56,186 --> 00:01:00,710
java file that just spins up an instance of the

17
00:01:00,710 --> 00:01:05,231
application context and grabs that instance of the bean

18
00:01:05,231 --> 00:01:07,341
and then calls our ShowMessage method.

19
00:01:07,341 --> 00:01:12,739
So what we're expecting to see here is this test message being printed out,

20
00:01:12,739 --> 00:01:14,998
as well as the System.

21
00:01:14,998 --> 00:01:15,522
out.

22
00:01:15,522 --> 00:01:19,720
println for post construct from that init method.

23
00:01:19,720 --> 00:01:23,594
Let's run this application now and see what gets printed out to the screen.

24
00:01:23,594 --> 00:01:28,294
So we're just going to right-click and say Run As, Java Application.

25
00:01:28,294 --> 00:01:30,902
And you'll see that once it gets created,

26
00:01:30,902 --> 00:01:34,699
it has the post construct message of ShowMessageBean and

27
00:01:34,699 --> 00:01:38,491
then our Test message from calling the.

28
00:01:38,491 --> 00:01:39,574
showMessage method.

29
00:01:39,574 --> 00:01:40,799
So it works very easily,

30
00:01:40,799 --> 00:01:45,005
but you can see that there's a lot of power in being able

31
00:01:45,005 --> 00:01:49,686
to spread this default implementation across any beans

32
00:01:49,686 --> 00:01:51,135
that implement that interface.

33
00:01:51,135 --> 00:01:54,630
So we get that shared functionality without having to go

34
00:01:54,630 --> 00:01:56,614
through and create an abstract class.

35
00:01:56,614 --> 00:02:00,111
You'll notice that our ShowMessageBean just implements this interface,

36
00:02:00,111 --> 00:02:03,478
and it could implement multiple interfaces where we'd get that

37
00:02:03,478 --> 00:02:05,849
same functionality across multiple interfaces.

38
00:02:05,849 --> 00:02:11,847
So very similar to the multiple inheritance that we had back in the C++ days,

39
00:02:11,847 --> 00:02:15,945
this will allow us to have that functionality and have those

40
00:02:15,945 --> 00:02:18,242
default methods in our Spring application.

41
00:02:18,242 --> 00:02:19,666
Works very well.

42
00:02:19,666 --> 00:02:23,938
Spring 5 built upon this by making that selectable,

43
00:02:23,938 --> 00:02:25,404
but for our example,

44
00:02:25,404 --> 00:02:36,000
this works great just to show you how that functionality will be displayed through our application's creation phase.

