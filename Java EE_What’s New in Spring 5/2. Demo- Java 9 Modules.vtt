WEBVTT
1
00:00:01.796 --> 00:00:06.314
To demonstrate the new module functionality inside of Java 9,

2
00:00:06.314 --> 00:00:08.911
I'm going to create a simple project to illustrate

3
00:00:08.911 --> 00:00:10.572
this just printing out a Hello World,

4
00:00:10.572 --> 00:00:14.566
and I want to do this to show you how modules work because it will change how

5
00:00:14.566 --> 00:00:18.512
you work with Spring 5's code and how you import libraries in.

6
00:00:18.512 --> 00:00:22.458
I'm going to start out by right-clicking and creating a New,

7
00:00:22.458 --> 00:00:27.473
Java Project, and I'm going to call this the HelloWorldModule project,

8
00:00:27.473 --> 00:00:29.072
click Next.

9
00:00:29.072 --> 00:00:38.240
And inside of here, I'm going to create a new source folder and call this com.

10
00:00:38.240 --> 00:00:39.862
hello, and we'll click Finish.

11
00:00:39.862 --> 00:00:43.816
And then I'm going to right-click on that src folder and remove

12
00:00:43.816 --> 00:00:48.568
that from the build path just to keep those clean,

13
00:00:48.568 --> 00:00:50.162
and I'll click Finish.

14
00:00:50.162 --> 00:00:55.041
Inside of here, I'm going to right-click and create a new file.

15
00:00:55.041 --> 00:00:59.690
And notice how I specifically chose file and not a class.

16
00:00:59.690 --> 00:01:04.096
And I'm doing this just because the IDEs aren't quite caught up with the

17
00:01:04.096 --> 00:01:06.162
new module packaging and how that all comes together,

18
00:01:06.162 --> 00:01:09.340
so they get a little bit confused when you call this a Java file.

19
00:01:09.340 --> 00:01:12.090
I'm going to call this module-info.

20
00:01:12.090 --> 00:01:15.885
java, and make sure you have the com.

21
00:01:15.885 --> 00:01:22.924
hello folder selected like I do up above, and we'll click Finish.

22
00:01:22.924 --> 00:01:23.804
And then inside of here,

23
00:01:23.804 --> 00:01:28.438
you're going to use a new key word that you maybe haven't used before of module.

24
00:01:28.438 --> 00:01:30.832
I'm going to type com.

25
00:01:30.832 --> 00:01:33.330
hello and give it an open/close curly brace.

26
00:01:33.330 --> 00:01:36.635
I'm going to leave it like this for now because we're going to go add

27
00:01:36.635 --> 00:01:39.448
the code that this exports here in just a second.

28
00:01:39.448 --> 00:01:41.970
So let's right-click on our com.

29
00:01:41.970 --> 00:01:46.134
hello source folder again and say New, Package,

30
00:01:46.134 --> 00:01:50.199
and we'll create a package called com.

31
00:01:50.199 --> 00:01:50.780
hello.

32
00:01:50.780 --> 00:01:52.647
Those don't have to be named the same.

33
00:01:52.647 --> 00:01:54.748
I just did for the sake of this example.

34
00:01:54.748 --> 00:01:59.022
And then I want to right-click on that package and create a new class.

35
00:01:59.022 --> 00:02:04.035
And the class is going to be HelloWorld, and we'll click Finish.

36
00:02:04.035 --> 00:02:06.067
And inside of here, really simple,

37
00:02:06.067 --> 00:02:11.202
we're just going to add a method that returns a string,

38
00:02:11.202 --> 00:02:15.349
so we'll say public String sayHelloWorld.

39
00:02:15.349 --> 00:02:23.549
And this is just going to simply return that string of Hello World.

40
00:02:23.549 --> 00:02:25.220
And we'll close that off and save it.

41
00:02:25.220 --> 00:02:31.989
Now we want to go back to our module info and say that this exports com.

42
00:02:31.989 --> 00:02:36.450
hello, that package that we just created.

43
00:02:36.450 --> 00:02:38.538
Now we have our module created.

44
00:02:38.538 --> 00:02:41.640
Let's go create a client project that will utilize this.

45
00:02:41.640 --> 00:02:45.125
So I'm going to come back over here and right- click and say New,

46
00:02:45.125 --> 00:02:46.075
Java Project again.

47
00:02:46.075 --> 00:02:52.468
And this one, I'm going to do the HelloWorldClient and click Finish.

48
00:02:52.468 --> 00:02:59.133
And inside of our client, I want to do very similar things.

49
00:02:59.133 --> 00:03:03.024
I want to start off and right-click and say New,

50
00:03:03.024 --> 00:03:03.959
Source Folder,

51
00:03:03.959 --> 00:03:09.861
and I could've done this at the time of creating the project or afterwards.

52
00:03:09.861 --> 00:03:13.546
The source folder, we're going to say, is com.

53
00:03:13.546 --> 00:03:14.097
hello.

54
00:03:14.097 --> 00:03:14.649
client.

55
00:03:14.649 --> 00:03:19.060
The other one we just did as com.

56
00:03:19.060 --> 00:03:19.611
hello.

57
00:03:19.611 --> 00:03:21.399
And we'll click Finish.

58
00:03:21.399 --> 00:03:27.644
And then we want to create another file in here as well,

59
00:03:27.644 --> 00:03:34.315
so we'll say New, File, and we'll do module-info.

60
00:03:34.315 --> 00:03:35.056
java.

61
00:03:35.056 --> 00:03:38.491
I'm going to leave this empty for now on purpose to show you

62
00:03:38.491 --> 00:03:41.505
something that we are going to utilize here in a minute.

63
00:03:41.505 --> 00:03:44.659
So let's right-click on that source folder that we just

64
00:03:44.659 --> 00:03:46.506
created and create a new package,

65
00:03:46.506 --> 00:03:50.462
and I do agree this is probably an overly complex example for what

66
00:03:50.462 --> 00:03:52.598
we're trying to illustrate with a HelloWorld,

67
00:03:52.598 --> 00:03:54.745
but it shows you how the modules work together.

68
00:03:54.745 --> 00:04:01.518
In the package, we're going to just say it's com.

69
00:04:01.518 --> 00:04:02.196
hello.

70
00:04:02.196 --> 00:04:04.717
client, and we'll say Finish.

71
00:04:04.717 --> 00:04:08.867
Right-click on our new package and say New, Class.

72
00:04:08.867 --> 00:04:14.511
And I'm going to select the public static void main create method down there.

73
00:04:14.511 --> 00:04:22.732
And we're going to call this class the HellowWorldClient, and we'll say Finish.

74
00:04:22.732 --> 00:04:25.872
Now it's got our main method generated for us.

75
00:04:25.872 --> 00:04:29.080
Let's replace the auto generated comment that's in there.

76
00:04:29.080 --> 00:04:33.550
And we're going to try to import our HelloWorld application.

77
00:04:33.550 --> 00:04:41.935
So I can say HelloWorld helloWorld = new HelloWorld.

78
00:04:41.935 --> 00:04:43.865
And you're going to notice that we already have

79
00:04:43.865 --> 00:04:46.319
compilation errors because it cannot find that.

80
00:04:46.319 --> 00:04:48.749
This is how we fix that.

81
00:04:48.749 --> 00:04:52.400
I'm going to right-click on our project and say Build Path,

82
00:04:52.400 --> 00:04:53.795
Configure Build Path.

83
00:04:53.795 --> 00:04:58.906
And you'll notice underneath our project section, there is a Modulepath.

84
00:04:58.906 --> 00:05:05.284
I'm going to select Modulepath and click Add and add the HellowWorldModule.

85
00:05:05.284 --> 00:05:09.476
And click OK and Apply and Close.

86
00:05:09.476 --> 00:05:10.545
Now we're not done yet.

87
00:05:10.545 --> 00:05:13.806
The other thing that we need to do is go into that module-info.

88
00:05:13.806 --> 00:05:20.440
java file that we created in our client and add module com.

89
00:05:20.440 --> 00:05:21.483
hello.

90
00:05:21.483 --> 00:05:28.781
client and say that it requires com.

91
00:05:28.781 --> 00:05:32.952
hello and save that.

92
00:05:32.952 --> 00:05:39.867
Now we can come over here into our Java code and import our

93
00:05:39.867 --> 00:05:46.451
HelloWorld class and do a simple System.

94
00:05:46.451 --> 00:05:47.460
out.

95
00:05:47.460 --> 00:05:53.512
println that will utilized that helloWorld.

96
00:05:53.512 --> 00:05:55.529
sayHello method.

97
00:05:55.529 --> 00:06:01.629
Now when we run this, I can just right-click and say Run As, Java Application.

98
00:06:01.629 --> 00:06:05.589
You'll see that it prints out the Hello World down below.

99
00:06:05.589 --> 00:06:07.184
So what did this buy us?

100
00:06:07.184 --> 00:06:08.514
Well a couple of things.

101
00:06:08.514 --> 00:06:13.427
We can have differing modules inside of an application

102
00:06:13.427 --> 00:06:18.571
and just share those specific pieces, so simple little bundles.

103
00:06:18.571 --> 00:06:22.077
Rather than trying to break things up logically by jars,

104
00:06:22.077 --> 00:06:27.536
we can modularize it and have things span those particular jars.

105
00:06:27.536 --> 00:06:28.445
And to do so,

106
00:06:28.445 --> 00:06:31.668
really what we did is we creating two separate projects with our

107
00:06:31.668 --> 00:06:34.042
HelloWorld class and our HelloWorldClient,

108
00:06:34.042 --> 00:06:37.710
and we created a module-info per project.

109
00:06:37.710 --> 00:06:43.716
We had our module-info in our HelloWorld module that exports com.

110
00:06:43.716 --> 00:06:48.879
hello and our module info in our client that requires com.

111
00:06:48.879 --> 00:06:49.348
hello.

112
00:06:49.348 --> 00:06:50.557
And then that was it.

113
00:06:50.557 --> 00:06:54.023
We wrote our simple client that utilized that code and dumped it out.

114
00:06:54.023 --> 00:06:56.166
Now why is this important to you?

115
00:06:56.166 --> 00:06:58.437
Because inside of Spring 5,

116
00:06:58.437 --> 00:07:02.210
everything's been modularized and how and what you might

117
00:07:02.210 --> 00:07:04.655
want to import will now be smaller,

118
00:07:04.655 --> 00:07:16.000
and you can utilize the module info rather than importing this gigantic jar that may or may not have the pieces that you need in there.

