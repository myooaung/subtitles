WEBVTT
1
00:00:01.096 --> 00:00:03.925
Let's go through our files in the order that we

2
00:00:03.925 --> 00:00:06.262
created them starting with the build.

3
00:00:06.262 --> 00:00:08.246
gradle and the pom.

4
00:00:08.246 --> 00:00:09.238
xml file.

5
00:00:09.238 --> 00:00:14.037
I have the XML and Java files on the left and the

6
00:00:14.037 --> 00:00:16.768
Gradle and Kotlin files on the right.

7
00:00:16.768 --> 00:00:17.534
The pom.

8
00:00:17.534 --> 00:00:21.361
xml, you can see here, is a little bit lengthier.

9
00:00:21.361 --> 00:00:23.091
It has more information.

10
00:00:23.091 --> 00:00:26.946
In fact, it's 55 lines long versus the build.

11
00:00:26.946 --> 00:00:30.114
gradle file, which is only 31 lines long.

12
00:00:30.114 --> 00:00:35.903
This isn't necessarily a Kotlin thing as much as it is

13
00:00:35.903 --> 00:00:38.534
a Gradle versus XML configuration.

14
00:00:38.534 --> 00:00:42.355
If we had added all of the Kotlin configuration to

15
00:00:42.355 --> 00:00:47.466
compile that in XML using Maven, it would actually be even longer than that,

16
00:00:47.466 --> 00:00:50.874
54 or 55 lines long, so the build.

17
00:00:50.874 --> 00:00:53.207
gradle file is significantly less.

18
00:00:53.207 --> 00:00:56.105
I'll leave it up to you to decipher whether or not you think it's more readable,

19
00:00:56.105 --> 00:00:58.370
but you can see a lot of the same things.

20
00:00:58.370 --> 00:01:02.204
We have the jar definition, packaging type.

21
00:01:02.204 --> 00:01:05.661
We have the different dependencies that we have inside of here

22
00:01:05.661 --> 00:01:07.814
and the dependencies for our build script,

23
00:01:07.814 --> 00:01:10.636
as well as our overall dependencies for the project.

24
00:01:10.636 --> 00:01:13.280
And they're a little bit reversed in order.

25
00:01:13.280 --> 00:01:14.528
The build section and the pom.

26
00:01:14.528 --> 00:01:16.810
xml is at the bottom where the build section for

27
00:01:16.810 --> 00:01:20.522
the Gradle file is up at the top, and that's just stylistic.

28
00:01:20.522 --> 00:01:26.546
That's how you usually set up a Gradle file versus a Maven POM file.

29
00:01:26.546 --> 00:01:29.446
Let's now switch over to our Application.

30
00:01:29.446 --> 00:01:33.458
java file and compare and contrast the differences there.

31
00:01:33.458 --> 00:01:35.882
These files are almost identical.

32
00:01:35.882 --> 00:01:38.053
In fact, you'll see that we have the same package name,

33
00:01:38.053 --> 00:01:41.549
the same imports, the same annotations.

34
00:01:41.549 --> 00:01:44.462
Very stylistically almost the same.

35
00:01:44.462 --> 00:01:49.930
The only major change is on line 9 where we define our public static void

36
00:01:49.930 --> 00:01:56.490
main method versus the Kotlin fun main args Array method.

37
00:01:56.490 --> 00:02:02.378
Other than that, they're almost identical in signatures and imports in our files.

38
00:02:02.378 --> 00:02:04.662
You can see that we have our Application.

39
00:02:04.662 --> 00:02:06.594
class where we have our Application::class.

40
00:02:06.594 --> 00:02:13.173
java that we are required to pass in to our SpringApplication to run it,

41
00:02:13.173 --> 00:02:16.630
but other than that these file are the same.

42
00:02:16.630 --> 00:02:19.641
One of the big differences is in the greetings.

43
00:02:19.641 --> 00:02:20.644
java and greetings.

44
00:02:20.644 --> 00:02:21.313
kotlin file.

45
00:02:21.313 --> 00:02:22.741
Let's compare those two now.

46
00:02:22.741 --> 00:02:24.741
And right out of the gate here,

47
00:02:24.741 --> 00:02:28.047
you can see all of that boilerplate code that we're used

48
00:02:28.047 --> 00:02:31.193
to seeing with Java and simple POJOs.

49
00:02:31.193 --> 00:02:35.266
We have declared our member variables as private.

50
00:02:35.266 --> 00:02:37.618
We have our constructor defined.

51
00:02:37.618 --> 00:02:40.441
We have our getters and setters,

52
00:02:40.441 --> 00:02:44.443
as well as all of the curly braces and semicolons that

53
00:02:44.443 --> 00:02:49.321
go with it versus our Kotlin file, which is two lines,

54
00:02:49.321 --> 00:02:54.019
the package definition and the declaration of it being a data class,

55
00:02:54.019 --> 00:02:58.849
and so we have our getters and setters generated for us and the

56
00:02:58.849 --> 00:03:03.650
constructor based off of line 3 as well of a Greeting object

57
00:03:03.650 --> 00:03:08.542
with a variable id that's a Long and a variable content that's

58
00:03:08.542 --> 00:03:10.538
a Spring passed into it.

59
00:03:10.538 --> 00:03:14.930
Significant difference and elimination of a lot of that boilerplate code here.

60
00:03:14.930 --> 00:03:18.051
Let's now look at the GreetingsController,

61
00:03:18.051 --> 00:03:22.669
and they're fairly similar, but a few stylistic changes there.

62
00:03:22.669 --> 00:03:27.665
Like the application file, the package and imports are identical.

63
00:03:27.665 --> 00:03:32.669
The use of the private atomic counter is different in that we

64
00:03:32.669 --> 00:03:34.748
don't have to declare that it's private,

65
00:03:34.748 --> 00:03:36.275
what type it is.

66
00:03:36.275 --> 00:03:40.474
We can just assign it to a variable and utilize it.

67
00:03:40.474 --> 00:03:45.260
And then the way that we pass in arguments is a little bit different.

68
00:03:45.260 --> 00:03:48.343
Using the @RequestParam inside the Java file,

69
00:03:48.343 --> 00:03:52.762
we have to either concatenate that string or use a message formatter,

70
00:03:52.762 --> 00:03:55.973
where we can use the variable replacement that's a

71
00:03:55.973 --> 00:03:57.856
nice feature inside of Kotlin.

72
00:03:57.856 --> 00:04:01.752
So I have that $name that I can just utilize from

73
00:04:01.752 --> 00:04:03.832
our request parameter up above.

74
00:04:03.832 --> 00:04:05.203
That's a nice,

75
00:04:05.203 --> 00:04:11.185
little feature that I can use to manipulate strings and pass in through Kotlin.

76
00:04:11.185 --> 00:04:13.144
And as far as that,

77
00:04:13.144 --> 00:04:17.737
these two features are pretty well not enough to differentiate that

78
00:04:17.737 --> 00:04:22.541
Kotlin's easier to use or significantly less in code.

79
00:04:22.541 --> 00:04:26.292
We have our obviously our lot lighter POJOs and then some

80
00:04:26.292 --> 00:04:30.168
of these syntactically niceties that we get with not being

81
00:04:30.168 --> 00:04:31.765
so strict with semicolons.

82
00:04:31.765 --> 00:04:34.735
If I use a semicolon, it will still work inside of our application,

83
00:04:34.735 --> 00:04:36.751
but it doesn't force us to.

84
00:04:36.751 --> 00:04:40.515
I'll let you decide which is easier or more appealing to you.

85
00:04:40.515 --> 00:04:41.322
Like I said,

86
00:04:41.322 --> 00:04:44.608
if you were using Android and using Kotlin on your mobile development,

87
00:04:44.608 --> 00:04:49.239
you wanted to be a full stack developer and keep the language the same,

88
00:04:49.239 --> 00:04:51.581
Kotlin's probably a good idea for you.

89
00:04:51.581 --> 00:04:55.015
If you're just doing Java development and you want to change it up,

90
00:04:55.015 --> 00:04:57.222
it may not be worth the change to you.

91
00:04:57.222 --> 00:05:04.000
It may though. It's truly up to you, and it's a stylistic issue.

