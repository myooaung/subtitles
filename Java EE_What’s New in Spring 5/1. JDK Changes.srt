1
00:00:00,000 --> 00:00:00,898
In this module,

2
00:00:00,898 --> 00:00:06,490
we're going to be talking about the JDK support and enhancements that

3
00:00:06,490 --> 00:00:11,137
Spring has made around the most recent versions of Java.

4
00:00:11,137 --> 00:00:15,076
Until now, the Spring framework has supported deprecated Java releases,

5
00:00:15,076 --> 00:00:19,618
but Spring 5 has been liberated from that legacy baggage.

6
00:00:19,618 --> 00:00:23,541
The code base has been revamped to take advantage of Java 8 features,

7
00:00:23,541 --> 00:00:27,962
and the framework requires Java 8 as the minimum JDK version now.

8
00:00:27,962 --> 00:00:32,604
The entire code base is based and it's also compatible with Java 9,

9
00:00:32,604 --> 00:00:35,834
but Oracle had delayed the release of Java 9.

10
00:00:35,834 --> 00:00:40,649
So although it's compatible with it, 8 is now the minimum requirement.

11
00:00:40,649 --> 00:00:44,998
Key features being using in the Spring code base now are lambdas,

12
00:00:44,998 --> 00:00:48,166
method references, and default methods in interfaces,

13
00:00:48,166 --> 00:00:53,076
and Spring has exposed the use of the Java util optional class to better

14
00:00:53,076 --> 00:00:58,704
handle the creation of objects and deal with non-null classes.

15
00:00:58,704 --> 00:01:02,892
Spring 5 has also upgraded to Java EE 7.

16
00:01:02,892 --> 00:01:06,144
This bumps our servlet specification to 3.

17
00:01:06,144 --> 00:01:11,242
1, and it also sets the messaging API to JMS 2.

18
00:01:11,242 --> 00:01:14,238
0 and the JPA version to 2.

19
00:01:14,238 --> 00:01:14,660
1.

20
00:01:14,660 --> 00:01:19,031
Much of this may seem somewhat insignificant as you have already been

21
00:01:19,031 --> 00:01:21,627
using these versions before the official 5 release,

22
00:01:21,627 --> 00:01:25,525
but this version helps to push us out to that standard.

23
00:01:25,525 --> 00:01:26,586
The Servlet 3.

24
00:01:26,586 --> 00:01:31,490
1 specification is notable if you're on an older version of the Servlet API,

25
00:01:31,490 --> 00:01:32,517
such as 2.

26
00:01:32,517 --> 00:01:33,544
4 or 2.

27
00:01:33,544 --> 00:01:37,391
5, because by default now you don't have a web.

28
00:01:37,391 --> 00:01:41,875
xml and are now dealing with more straight Java configuration.

29
00:01:41,875 --> 00:01:44,382
That's not to say that you can't use a web.

30
00:01:44,382 --> 00:01:46,645
xml, but they are not the default by now.

31
00:01:46,645 --> 00:01:50,590
This is a welcome change if you're one of the people that doesn't

32
00:01:50,590 --> 00:01:54,092
care for the XML-based configuration approach.

33
00:01:54,092 --> 00:01:56,510
Spring 5 included support for Java 9,

34
00:01:56,510 --> 00:02:02,674
but it was not the minimum support because Java 9 hadn't been released yet.

35
00:02:02,674 --> 00:02:05,271
One of the more significant features of Java 9 that

36
00:02:05,271 --> 00:02:07,590
Spring supports is the notion of modules.

37
00:02:07,590 --> 00:02:11,120
With Spring and the supporting jars that it utilizes,

38
00:02:11,120 --> 00:02:15,612
the scope of various libraries can be confusing at best.

39
00:02:15,612 --> 00:02:23,000
Let's run through a small example showcasing modules and how they isolate dependencies.

