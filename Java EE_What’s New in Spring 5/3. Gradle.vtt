WEBVTT
1
00:00:01.869 --> 00:00:06.830
Kotlin has embraced Gradle as their first choice for a build tool.

2
00:00:06.830 --> 00:00:10.088
If you have been using Maven for years like I have,

3
00:00:10.088 --> 00:00:13.395
this may provide a little bit of a pain point for you.

4
00:00:13.395 --> 00:00:16.561
If you've never used Gradle before, it doesn't have a long,

5
00:00:16.561 --> 00:00:19.634
steep learning curve, but it is different than Maven.

6
00:00:19.634 --> 00:00:24.309
Gradle is essentially a hybrid of Ant and Maven using Groovy syntax.

7
00:00:24.309 --> 00:00:28.659
It was one of the tools that came out of the push to

8
00:00:28.659 --> 00:00:31.535
eliminate everything XML in a project.

9
00:00:31.535 --> 00:00:35.867
Candidly, it doesn't offer us up anything more than other tools do,

10
00:00:35.867 --> 00:00:39.567
but some people find its syntax easier than XML.

11
00:00:39.567 --> 00:00:43.297
If you prefer to use Maven over Gradle for Kotlin development,

12
00:00:43.297 --> 00:00:43.910
you can,

13
00:00:43.910 --> 00:00:46.668
but just realize that features usually are tested first

14
00:00:46.668 --> 00:00:48.817
with Gradle and second with Maven.

15
00:00:48.817 --> 00:00:54.899
Let's start a build file for our project with Gradle now.

16
00:00:54.899 --> 00:00:59.292
To keep this demo focused on Kotlin and less about the

17
00:00:59.292 --> 00:01:01.863
tools that you use to develop it with,

18
00:01:01.863 --> 00:01:05.895
I've gone ahead and created a simple project structure inside my file system.

19
00:01:05.895 --> 00:01:08.875
You can see here we have a build.

20
00:01:08.875 --> 00:01:14.203
gradle file, my demo notes, and then a folder structure with a src,

21
00:01:14.203 --> 00:01:18.238
main, kotlin path and then our package structure below that.

22
00:01:18.238 --> 00:01:21.418
And I have three files created inside of there,

23
00:01:21.418 --> 00:01:26.240
an Application, a Greeting, and a GreetingController Kotlin file.

24
00:01:26.240 --> 00:01:27.842
Let's open up our build.

25
00:01:27.842 --> 00:01:31.688
gradle file, and as you can see it's blank to begin with.

26
00:01:31.688 --> 00:01:35.727
I'm going to go ahead and paste in some code that I've written that

27
00:01:35.727 --> 00:01:40.793
represents what we're trying to do with our build file here.

28
00:01:40.793 --> 00:01:43.207
I'm going to walk through these pieces.

29
00:01:43.207 --> 00:01:47.811
The build script just says that this is how I want to build my application.

30
00:01:47.811 --> 00:01:50.800
I'm going to use kotlin_version 1.

31
00:01:50.800 --> 00:01:51.298
1.

32
00:01:51.298 --> 00:01:52.793
3, spring_boot_version 1.

33
00:01:52.793 --> 00:01:53.291
5.

34
00:01:53.291 --> 00:01:56.332
4, which repository I would like it to use,

35
00:01:56.332 --> 00:01:59.253
and then the dependencies I need for the build.

36
00:01:59.253 --> 00:02:03.914
Then we can see which plugins we're applying to this to build our application.

37
00:02:03.914 --> 00:02:07.911
We have a kotlin plugin, kotlin-spring, and a spring boot plugin,

38
00:02:07.911 --> 00:02:12.851
and we tell it what we want for the final packaging of the application,

39
00:02:12.851 --> 00:02:17.288
which is a jar with a base name and a version,

40
00:02:17.288 --> 00:02:21.169
the repositories to pull the dependencies from,

41
00:02:21.169 --> 00:02:23.044
and then, down at the bottom,

42
00:02:23.044 --> 00:02:26.236
lastly the dependencies that we need to build our application,

43
00:02:26.236 --> 00:02:29.581
and they're very similar to the dependencies we have above.

44
00:02:29.581 --> 00:02:31.314
We have these compile dependencies,

45
00:02:31.314 --> 00:02:35.837
which tell it how to compile our application and then a test compile,

46
00:02:35.837 --> 00:02:40.768
which is if we're going to utilize any tests inside of our application,

47
00:02:40.768 --> 00:02:44.933
what we want to do to run those tests,

48
00:02:44.933 --> 00:02:49.586
and it's utilizing the spring-boot-starter-test package there.

49
00:02:49.586 --> 00:02:52.518
Now I'm going to switch over to my command line and run a

50
00:02:52.518 --> 00:02:54.389
Gradle command to execute this build.

51
00:02:54.389 --> 00:02:58.116
Okay, now that I'm at the root of my project,

52
00:02:58.116 --> 00:03:04.228
I'm going to execute a Gradle wrapper command.

53
00:03:04.228 --> 00:03:09.107
And what this does is it goes through and builds the wrapper off of

54
00:03:09.107 --> 00:03:11.062
the build file that we just created in there.

55
00:03:11.062 --> 00:03:13.389
And if this is the first time you've ran this,

56
00:03:13.389 --> 00:03:17.074
you may see a lot of commands rolling off the page just like we do

57
00:03:17.074 --> 00:03:19.534
when we're utilizing Maven to build an application.

58
00:03:19.534 --> 00:03:24.509
It's got to go download all of those dependencies and cache them locally first.

59
00:03:24.509 --> 00:03:27.578
Since I've ran it before, it's already downloaded those.

60
00:03:27.578 --> 00:03:29.375
It's really not going to be any different when you do it.

61
00:03:29.375 --> 00:03:33.835
It's just going to take it a minute longer to download those dependencies.

62
00:03:33.835 --> 00:03:39.240
Now if I print out my directory, you'll see I have a build.

63
00:03:39.240 --> 00:03:43.678
gradle that we had created before, but I also have a gradle,

64
00:03:43.678 --> 00:03:45.545
a gradlew, and a gradlew.

65
00:03:45.545 --> 00:03:46.691
bat file created.

66
00:03:46.691 --> 00:03:51.561
These are the files that define the settings that we have for

67
00:03:51.561 --> 00:03:54.612
our application based off of that build.

68
00:03:54.612 --> 00:03:56.686
gradle file that we'd created.

69
00:03:56.686 --> 00:03:59.589
And in a few demos from now,

70
00:03:59.589 --> 00:04:08.000
we're going to be executing our application using that gradlew command that we just created.

