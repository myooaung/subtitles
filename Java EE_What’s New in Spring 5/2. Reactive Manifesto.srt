1
00:00:01,913 --> 00:00:05,413
Reactive programming is centered around the Reactive

2
00:00:05,413 --> 00:00:07,413
Manifesto for application development.

3
00:00:07,413 --> 00:00:10,470
The Reactive Manifesto is basically a statement that apps will

4
00:00:10,470 --> 00:00:13,452
try to adhere to all of these properties.

5
00:00:13,452 --> 00:00:18,093
They are responsive, meaning that they respond in as timely a manner as possible.

6
00:00:18,093 --> 00:00:22,911
They are resilient in that they stay responsive in the face of failure.

7
00:00:22,911 --> 00:00:24,482
They are elastic.

8
00:00:24,482 --> 00:00:27,625
They stay responsive under varying workloads.

9
00:00:27,625 --> 00:00:30,177
And they are message driven in nature.

10
00:00:30,177 --> 00:00:33,819
Personally, this is where it gets interesting to me.

11
00:00:33,819 --> 00:00:36,092
They are asynchronous by design,

12
00:00:36,092 --> 00:00:38,970
which means that they are loosely coupled and isolated

13
00:00:38,970 --> 00:00:40,826
from other components in the system.

14
00:00:40,826 --> 00:00:44,081
At this point, you may be already writing off reactive programming,

15
00:00:44,081 --> 00:00:47,757
thinking that it's only to be used with extremely large systems.

16
00:00:47,757 --> 00:00:50,224
And this is not true.

17
00:00:50,224 --> 00:00:53,711
Large systems are comprised of smaller systems.

18
00:00:53,711 --> 00:00:57,254
These properties of the manifesto need to be applied to all scales of

19
00:00:57,254 --> 00:01:00,367
systems that could be comprised of other systems.

20
00:01:00,367 --> 00:01:11,000
Let's talk about how Spring 5 helps us by developing applications that are reactive using WebFlux.

