WEBVTT
1
00:00:01.880 --> 00:00:03.932
Assumptions were available in JUnit 4,

2
00:00:03.932 --> 00:00:08.915
but a new method was added to assume that something was going to happen.

3
00:00:08.915 --> 00:00:11.590
I wouldn't have spent the time to just cover assumptions,

4
00:00:11.590 --> 00:00:19.093
but the assumingThat method adds a unique twist to code to continue

5
00:00:19.093 --> 00:00:23.526
on with a test based off of a certain condition.

6
00:00:23.526 --> 00:00:29.099
In this test here, we've taken advantage of the new Assumptions.

7
00:00:29.099 --> 00:00:30.112
assumingThat method.

8
00:00:30.112 --> 00:00:32.778
And you can see inside of this code on line 11,

9
00:00:32.778 --> 00:00:37.668
we set a property saying that the environment that this is running in is prod,

10
00:00:37.668 --> 00:00:41.750
which is not an uncommon practice to do inside of your application

11
00:00:41.750 --> 00:00:44.769
to see environment properties based off of dev,

12
00:00:44.769 --> 00:00:47.407
test, staging, or production that you're working in.

13
00:00:47.407 --> 00:00:48.656
And on line 12,

14
00:00:48.656 --> 00:00:54.683
we have an assumption saying that assuming that our environment is dev,

15
00:00:54.683 --> 00:00:58.984
go ahead and execute this code that follows.

16
00:00:58.984 --> 00:01:05.723
So our assertion would fail on line 13 if we were in a dev environment.

17
00:01:05.723 --> 00:01:07.411
Let's run this test.

18
00:01:07.411 --> 00:01:09.100
And inside of here,

19
00:01:09.100 --> 00:01:15.769
we're going to get a green test because our environment is set to prod.

20
00:01:15.769 --> 00:01:20.819
If we change this to dev and save this and rerun it,

21
00:01:20.819 --> 00:01:28.172
you'll see that we get that red error back because the test could not continue

22
00:01:28.172 --> 00:01:40.000
and threw the exception based off of the lambda that's there. So the test would've preceded as it did before when we were in prod.

