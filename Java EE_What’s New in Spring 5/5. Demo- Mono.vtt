WEBVTT
1
00:00:01.794 --> 00:00:03.681
Let's add our controller to our application now,

2
00:00:03.681 --> 00:00:08.363
and I'm going to do that by exiting our full-screen mode on

3
00:00:08.363 --> 00:00:11.366
our console and stop our application.

4
00:00:11.366 --> 00:00:17.127
And then I want to come over to our package and create a New,

5
00:00:17.127 --> 00:00:22.628
Class, and the package is going to add controller onto the end of that.

6
00:00:22.628 --> 00:00:28.990
And I'm going to call this the PersonController, and we'll click Finish.

7
00:00:28.990 --> 00:00:30.540
And inside of here,

8
00:00:30.540 --> 00:00:34.787
I have purposely typed this in rather than pasting it in

9
00:00:34.787 --> 00:00:39.350
so that you can see that it is no different than creating

10
00:00:39.350 --> 00:00:41.383
a standard Spring controller.

11
00:00:41.383 --> 00:00:45.885
I'm going to annotate it as a RestController,

12
00:00:45.885 --> 00:00:55.350
and I'm going to add a RequestMapping for all of the requests to a /person.

13
00:00:55.350 --> 00:00:58.898
So just in a RESTful URL,

14
00:00:58.898 --> 00:01:03.405
we want all requests for Person to go to this controller.

15
00:01:03.405 --> 00:01:07.656
And then I'm going to add our JPA repository in here.

16
00:01:07.656 --> 00:01:10.819
So I'm going to say @Autowired,

17
00:01:10.819 --> 00:01:17.866
and we want the PersonRepository to be imported and

18
00:01:17.866 --> 00:01:23.331
give it a name of repository.

19
00:01:23.331 --> 00:01:25.146
We'll save this.

20
00:01:25.146 --> 00:01:31.800
Now let's add our method to request a person by ID,

21
00:01:31.800 --> 00:01:34.815
and we'll return that response as a stream.

22
00:01:34.815 --> 00:01:36.269
I've already written this code,

23
00:01:36.269 --> 00:01:40.943
so I'm going to paste this in here and import all of

24
00:01:40.943 --> 00:01:45.056
the classes that it's looking for.

25
00:01:45.056 --> 00:01:49.100
And you can see by this method, it responds to a GetMapping of id,

26
00:01:49.100 --> 00:01:52.794
so the URL would be /person/id.

27
00:01:52.794 --> 00:01:59.080
The ResponseBody is our Mono object so our stream that we're going to return.

28
00:01:59.080 --> 00:02:01.673
And we're going to find by an ID.

29
00:02:01.673 --> 00:02:07.081
This is going to go out to our repository, find a single record, return it.

30
00:02:07.081 --> 00:02:13.925
It is using the new Java Optional object to wrap a Person object,

31
00:02:13.925 --> 00:02:17.715
and then we can use the Mono.

32
00:02:17.715 --> 00:02:22.589
just method to build that response as a stream.

33
00:02:22.589 --> 00:02:32.055
So let's save this and start our server back up.

34
00:02:32.055 --> 00:02:38.096
Now that this has loaded, I'm going to switch over to my browser.

35
00:02:38.096 --> 00:02:44.204
And now that we're in the browser, you can see the URL of /person/1.

36
00:02:44.204 --> 00:02:49.704
If we hit Enter on this, it will return that object that we created,

37
00:02:49.704 --> 00:02:55.588
the id of 1, the name of bryan, and the mail of bryan@test.

38
00:02:55.588 --> 00:02:56.041
com.

39
00:02:56.041 --> 00:03:03.161
Alright, so it acts just like a standard web request does for any get.

40
00:03:03.161 --> 00:03:06.712
That's true except for this is using streams.

41
00:03:06.712 --> 00:03:09.193
And so if that query, for whatever reason,

42
00:03:09.193 --> 00:03:10.744
took 10 seconds to return,

43
00:03:10.744 --> 00:03:15.929
we wouldn't sit here with a blank page just spinning and waiting and waiting.

44
00:03:15.929 --> 00:03:19.259
It would respond back when it finally built that object.

45
00:03:19.259 --> 00:03:21.614
Let's look at that code again.

46
00:03:21.614 --> 00:03:28.458
All we had to do was wrap that in a Mono object and use the

47
00:03:28.458 --> 00:03:32.545
just method saying just return this object.

48
00:03:32.545 --> 00:03:34.532
There are other options inside of here.

49
00:03:34.532 --> 00:03:38.478
We could set delays or timeouts or what happens if there's an error,

50
00:03:38.478 --> 00:03:42.256
but this shows you how simple it is to begin using

51
00:03:42.256 --> 00:03:44.087
streams inside of your application.

52
00:03:44.087 --> 00:03:48.309
As we mentioned in the previous demo when we were talking about Java,

53
00:03:48.309 --> 00:03:52.985
also keep in mind the use of the Optional object from

54
00:03:52.985 --> 00:03:54.887
the repository that we created.

55
00:03:54.887 --> 00:03:59.115
This has nothing to do with streams and everything to do with

56
00:03:59.115 --> 00:04:03.048
the now use of optionals in there because this query could

57
00:04:03.048 --> 00:04:09.594
return an empty or null result, and that's wrapped in the Optional object.

58
00:04:09.594 --> 00:04:13.567
So on line 28 when we say person.

59
00:04:13.567 --> 00:04:14.064
orElse(person.

60
00:04:14.064 --> 00:04:17.899
empty), that is saying return the Person object,

61
00:04:17.899 --> 00:04:22.520
or if that's empty, give us a Other object back.

62
00:04:22.520 --> 00:04:27.801
Now inside of our Person class, we created an empty method earlier.

63
00:04:27.801 --> 00:04:28.954
In case you missed that,

64
00:04:28.954 --> 00:04:32.321
you can see on line 11 here where we have the empty instance,

65
00:04:32.321 --> 00:04:37.118
and I've created that down below where we just returned that empty instance.

66
00:04:37.118 --> 00:04:42.119
It's a way for us to handle nulls the way that we want them to without a null

67
00:04:42.119 --> 00:04:45.399
pointer exception being thrown inside of our application.

68
00:04:45.399 --> 00:04:50.541
So really easy to return an object using a stream

69
00:04:50.541 --> 00:04:52.413
inside of our controllers here.

70
00:04:52.413 --> 00:05:01.000
Let's look at what it takes to do that when we want to return a collection of objects.

