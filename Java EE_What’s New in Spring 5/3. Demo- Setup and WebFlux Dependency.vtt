WEBVTT
1
00:00:01.712 --> 00:00:05.204
Spring introduced WebFlux as a project to help with

2
00:00:05.204 --> 00:00:06.890
integrating streams into your application.

3
00:00:06.890 --> 00:00:10.253
There are a lot of things that happen when you

4
00:00:10.253 --> 00:00:15.489
include WebFlux into your POM file, but mainly it integrates the reactor project,

5
00:00:15.489 --> 00:00:16.891
the Netty server,

6
00:00:16.891 --> 00:00:21.519
and includes the libraries that you need to begin developing with it.

7
00:00:21.519 --> 00:00:26.061
Let's create a project now using the Spring Boot starter for WebFlux

8
00:00:26.061 --> 00:00:30.492
as described in this code snippet from the pom.

9
00:00:30.492 --> 00:00:31.080
xml.

10
00:00:31.080 --> 00:00:35.356
Creating a WebFlux project is actually quite easy.

11
00:00:35.356 --> 00:00:39.147
So easy that this demo would be about 30 minutes.

12
00:00:39.147 --> 00:00:43.347
I'm going to actually add some of the other configuration we need to

13
00:00:43.347 --> 00:00:47.916
create a full-fledged project as part of this module.

14
00:00:47.916 --> 00:00:53.362
So I'm going to go ahead and right-click and say New, Spring Starter Project.

15
00:00:53.362 --> 00:00:55.578
And I have actually ran this before,

16
00:00:55.578 --> 00:01:00.011
so it has some of the defaults already filled out for me.

17
00:01:00.011 --> 00:01:03.558
So my project name's going to be Reactive.

18
00:01:03.558 --> 00:01:06.080
I'm using Java 9.

19
00:01:06.080 --> 00:01:09.232
My group ID is com.

20
00:01:09.232 --> 00:01:09.863
Pluralsight.

21
00:01:09.863 --> 00:01:10.493
web.

22
00:01:10.493 --> 00:01:11.124
reactive.

23
00:01:11.124 --> 00:01:16.445
Artifact ID is Reactive, and the Package is com.

24
00:01:16.445 --> 00:01:17.036
Pluralsight.

25
00:01:17.036 --> 00:01:17.628
web.

26
00:01:17.628 --> 00:01:18.219
reactive.

27
00:01:18.219 --> 00:01:22.906
The next thing I'm going to do is click Next and choose the

28
00:01:22.906 --> 00:01:25.297
starter dependencies that I want inside of here.

29
00:01:25.297 --> 00:01:27.376
Now I've used some of these before,

30
00:01:27.376 --> 00:01:31.096
so I had them available in my Frequently Used section box.

31
00:01:31.096 --> 00:01:33.596
You won't if you haven't used them recently.

32
00:01:33.596 --> 00:01:38.464
So I'm going to use the Typeahead box and say Reactive Web,

33
00:01:38.464 --> 00:01:44.866
choose that one, and then I'm going to also type in here jpa.

34
00:01:44.866 --> 00:01:50.301
I'm going to add JPA inside of here to create a full-fledged project.

35
00:01:50.301 --> 00:01:52.690
Click Next and then Finish.

36
00:01:52.690 --> 00:01:58.259
Once we're inside of here, we can open up our POM file,

37
00:01:58.259 --> 00:02:01.640
go to our source tab for our POM,

38
00:02:01.640 --> 00:02:10.020
and we can see that we have our webflux dependency and our jpa dependency.

39
00:02:10.020 --> 00:02:10.392
Honestly,

40
00:02:10.392 --> 00:02:14.859
this is all I need to do to have a WebFlux project

41
00:02:14.859 --> 00:02:17.049
created and now start developing in it,

42
00:02:17.049 --> 00:02:20.865
and that would be all you need to do to convert your project

43
00:02:20.865 --> 00:02:23.042
from a web project to a WebFlux project.

44
00:02:23.042 --> 00:02:27.850
WebFlux contains all of the web MVC libraries that you

45
00:02:27.850 --> 00:02:31.341
would normally use if you just had a

46
00:02:31.341 --> 00:02:33.450
spring-boot-starter-web dependency inside of here.

47
00:02:33.450 --> 00:02:37.602
So our controllers, component scanners, our dispatcher servlet,

48
00:02:37.602 --> 00:02:40.551
all of those things you're used to using inside of web

49
00:02:40.551 --> 00:02:42.189
are contained inside of WebFlux.

50
00:02:42.189 --> 00:02:47.541
It's actually a transit of dependency of WebFlux if you're used to Maven lingo.

51
00:02:47.541 --> 00:02:50.356
That's how it's importing those libraries in.

52
00:02:50.356 --> 00:02:54.051
Now I'm going to go ahead and add two other dependencies inside of here,

53
00:02:54.051 --> 00:03:01.069
an H2 dependency for an embedded database and a javax.

54
00:03:01.069 --> 00:03:01.771
xml.

55
00:03:01.771 --> 00:03:04.239
bind dependency on the jaxb-api.

56
00:03:04.239 --> 00:03:08.469
The first one, as I mentioned, was for our embedded database.

57
00:03:08.469 --> 00:03:13.751
The second one is because this is not included in the Java 9 runtime any longer,

58
00:03:13.751 --> 00:03:19.790
so I have to have that XML dependency in there for configuration purposes.

59
00:03:19.790 --> 00:03:28.878
We save this, and now I'm going to open up our src/main/java,

60
00:03:28.878 --> 00:03:35.661
ReactiveApplication, and this is how we would run our Spring Boot application.

61
00:03:35.661 --> 00:03:36.854
Nothing new here.

62
00:03:36.854 --> 00:03:42.427
If you've used this before, this is not a new concept inside of Spring Boot.

63
00:03:42.427 --> 00:03:45.302
This is just how we fire up our application.

64
00:03:45.302 --> 00:03:48.233
I'm going to go ahead and copy in our database configuration so

65
00:03:48.233 --> 00:03:52.885
that we have an embedded database available for our app to use

66
00:03:52.885 --> 00:03:55.527
and paste that below our main method.

67
00:03:55.527 --> 00:04:00.613
And we have to import our dependencies here, and save that.

68
00:04:00.613 --> 00:04:08.341
And now we have a database that is available for our app to use.

69
00:04:08.341 --> 00:04:13.568
One really neat thing about Spring Boot if you haven't used this before,

70
00:04:13.568 --> 00:04:16.011
for testing and development purposes,

71
00:04:16.011 --> 00:04:19.689
you can copy files in your src/main/resources directory

72
00:04:19.689 --> 00:04:22.946
that by convention will pick up and run.

73
00:04:22.946 --> 00:04:26.453
I'm going to copy in two database configuration files.

74
00:04:26.453 --> 00:04:31.234
And I'm going to place them underneath my src/main/resources directory.

75
00:04:31.234 --> 00:04:34.367
You'll see two files here, a schema.

76
00:04:34.367 --> 00:04:42.530
sql, and that just builds a basic schema inside of our application, and a data.

77
00:04:42.530 --> 00:04:49.860
sql, and that just populates some default data inside there for our app to use.

78
00:04:49.860 --> 00:04:52.649
I also want to tell Spring that this is an H2 database,

79
00:04:52.649 --> 00:04:56.119
and the way I do that is by opening up our application.

80
00:04:56.119 --> 00:04:56.437
properties,

81
00:04:56.437 --> 00:05:02.768
and I'm going to paste in here that I do not want hibernate to generate our

82
00:05:02.768 --> 00:05:08.658
ddl and that I want to use the jpa database type of H2.

83
00:05:08.658 --> 00:05:10.263
We save this.

84
00:05:10.263 --> 00:05:15.078
Now to make this an even more full-fledged application,

85
00:05:15.078 --> 00:05:22.431
I'm going to right-click on our src/main/Java source folder and say New,

86
00:05:22.431 --> 00:05:27.655
Class, and I'm going to change the package to com.

87
00:05:27.655 --> 00:05:28.077
Pluralsight.

88
00:05:28.077 --> 00:05:28.499
web.

89
00:05:28.499 --> 00:05:28.921
reactive.

90
00:05:28.921 --> 00:05:35.884
model, just append a model on the end there, and give it a name of Person.

91
00:05:35.884 --> 00:05:39.024
And this is just a basic POJO.

92
00:05:39.024 --> 00:05:40.083
And inside of here,

93
00:05:40.083 --> 00:05:43.968
I'm going to just copy in this code that defines it as an entity.

94
00:05:43.968 --> 00:05:45.515
There is an empty instance,

95
00:05:45.515 --> 00:05:50.165
and I'll show you why we use that here in another demo,

96
00:05:50.165 --> 00:05:54.355
and then defines its ID, just basic JPA properties.

97
00:05:54.355 --> 00:05:56.748
If you've used JPA before, nothing new here.

98
00:05:56.748 --> 00:06:01.036
I've got the Id, GeneratedValue, and then a couple of fields,

99
00:06:01.036 --> 00:06:04.130
name and email, and then some getters and setters,

100
00:06:04.130 --> 00:06:05.505
just a normal project.

101
00:06:05.505 --> 00:06:07.912
If we were using a tool like Lombok,

102
00:06:07.912 --> 00:06:12.697
we wouldn't even need to copy in the name and email getters and setters.

103
00:06:12.697 --> 00:06:17.400
So let's save this, and then I'm going to do the same thing.

104
00:06:17.400 --> 00:06:20.220
I'm going to create a JPA repository interface.

105
00:06:20.220 --> 00:06:25.573
I'm going to right-click on our package again and say New, Interface.

106
00:06:25.573 --> 00:06:32.571
I'm going to change the package of that to com.

107
00:06:32.571 --> 00:06:33.271
Pluralsight.

108
00:06:33.271 --> 00:06:33.970
web.

109
00:06:33.970 --> 00:06:34.670
reactive.

110
00:06:34.670 --> 00:06:35.370
repository.

111
00:06:35.370 --> 00:06:39.656
Add an extended interface for JpaRepository,

112
00:06:39.656 --> 00:06:46.773
and the name is the PersonRespository, and we'll finish that.

113
00:06:46.773 --> 00:06:53.076
It's going to ask us to change the type,

114
00:06:53.076 --> 00:07:02.643
which is Person, and the Id is a Long, and we can save that.

115
00:07:02.643 --> 00:07:05.672
Now we've added our database, our repository,

116
00:07:05.672 --> 00:07:10.435
and our model object for us to have a full-fledged database-driven

117
00:07:10.435 --> 00:07:14.760
application and two files to help us create that schema and populate it

118
00:07:14.760 --> 00:07:16.570
with some sample information for our demos.

119
00:07:16.570 --> 00:07:20.552
Now let's run this to make sure that everything is working right,

120
00:07:20.552 --> 00:07:24.515
and we can start making our application reactive.

121
00:07:24.515 --> 00:07:27.106
To run this, I'm going to open up the ReactiveApplication,

122
00:07:27.106 --> 00:07:35.995
right-click, and say Run As, Java Application.

123
00:07:35.995 --> 00:07:38.147
And everything started up correctly.

124
00:07:38.147 --> 00:07:43.912
One thing I want to note as of Spring 5 and this version of the

125
00:07:43.912 --> 00:07:46.569
milestone is you'll see a warning inside of here,

126
00:07:46.569 --> 00:07:48.792
and you can see that on my screen right now.

127
00:07:48.792 --> 00:07:54.187
It's a great big red warning saying that there's this illegal access operation.

128
00:07:54.187 --> 00:07:56.709
This is a known bug.

129
00:07:56.709 --> 00:07:57.718
It's documented.

130
00:07:57.718 --> 00:08:00.240
Your application's actually running correctly.

131
00:08:00.240 --> 00:08:04.202
It happens on the Netty server and the version of CG

132
00:08:04.202 --> 00:08:06.191
Live that's included in the project.

133
00:08:06.191 --> 00:08:10.444
They're correcting it, and it will be fixed with the final release.

134
00:08:10.444 --> 00:08:13.019
Our application is completely built now,

135
00:08:13.019 --> 00:08:22.000
and we're ready to start adding reactive streams to our web tier. Let's look at what that means for us now.

