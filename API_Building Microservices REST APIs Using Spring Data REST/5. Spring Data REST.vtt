WEBVTT
1
00:00:00.124 --> 00:00:04.415
So now, I will provide a tour of the TrackZilla web application,

2
00:00:04.415 --> 00:00:09.955
which will include an introduction to the TrackZilla Spring Boot application,

3
00:00:09.955 --> 00:00:15.240
the TrackZilla domain model, the associated Spring Data repositories,

4
00:00:15.240 --> 00:00:18.349
and the in memory H2 database.

5
00:00:18.349 --> 00:00:21.806
Let's review the TrackZilla architecture diagram.

6
00:00:21.806 --> 00:00:25.699
We use the Postman Client to access our APIs.

7
00:00:25.699 --> 00:00:29.639
The TrackZilla application layer has a controller,

8
00:00:29.639 --> 00:00:35.605
a service layer, and we utilize the JpaRepository.

9
00:00:35.605 --> 00:00:42.144
There's an H2 in-memory database, and there will be REST APIs.

10
00:00:42.144 --> 00:00:47.137
The code can be cloned using the gitlab link.

11
00:00:47.137 --> 00:00:49.313
I recommend that you follow along and clone the

12
00:00:49.313 --> 00:00:51.299
project to your machine at this point.

13
00:00:51.299 --> 00:00:54.412
You will need Git installed before you do this,

14
00:00:54.412 --> 00:00:58.541
and let's walk through the final project.

15
00:00:58.541 --> 00:01:04.086
TrackZilla has an application domain that has an id,

16
00:01:04.086 --> 00:01:05.204
name, description,

17
00:01:05.204 --> 00:01:10.722
and owner; and all of the associated getter and setter methods.

18
00:01:10.722 --> 00:01:16.133
That application domain has an ApplicationRepository that extends JpaRepository,

19
00:01:16.133 --> 00:01:22.488
there is a ticket domain that has an id,

20
00:01:22.488 --> 00:01:28.822
title, description, appId, and associated getters and setters.

21
00:01:28.822 --> 00:01:34.569
That ticket also has a TicketRepository that extends JpaRepository,

22
00:01:34.569 --> 00:01:40.108
and has the findByAppId overloaded method.

23
00:01:40.108 --> 00:01:44.369
So now, let's run our web server.

24
00:01:44.369 --> 00:01:57.970
(Running web server) Tomcat started on port 8080.

25
00:01:57.970 --> 00:02:01.778
So that means our application is up and running,

26
00:02:01.778 --> 00:02:05.646
and Spring Data REST has worked its magic.

27
00:02:05.646 --> 00:02:15.779
So, let's go to Postman to test one of our Spring Data REST APIs.

28
00:02:15.779 --> 00:02:19.525
Let's test getting a list of applications.

29
00:02:19.525 --> 00:02:25.180
So we're using the GET HTTP verb.

30
00:02:25.180 --> 00:02:31.353
We're using localhost:8080/applications to get a list of applications,

31
00:02:31.353 --> 00:02:33.919
so let's click Send.

32
00:02:33.919 --> 00:02:41.820
The response is loaded in the window here, and we have a list of applications.

33
00:02:41.820 --> 00:02:46.921
So in this case, an application named Bug Tracker,

34
00:02:46.921 --> 00:02:53.221
with a description and owner; an application called Project Tracker,

35
00:02:53.221 --> 00:02:56.002
with a description and owner.

36
00:02:56.002 --> 00:03:01.084
So now let's look at the H2 embedded in-memory database

37
00:03:01.084 --> 00:03:03.625
used by the TrackZilla application.

38
00:03:03.625 --> 00:03:08.427
So this is the console for the H2 in-memory database,

39
00:03:08.427 --> 00:03:13.443
we click Connect, and notice we have two entities,

40
00:03:13.443 --> 00:03:19.910
application and ticket, and here we see both database tables for those entities.

41
00:03:19.910 --> 00:03:34.000
So here in this console window, you can write simple SQL, and execute; and here we have a list of applications.

