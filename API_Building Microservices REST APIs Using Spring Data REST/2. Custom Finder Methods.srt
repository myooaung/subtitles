1
00:00:05,474 --> 00:00:08,109
Standard CRUD functionality repositories usually have

2
00:00:08,109 --> 00:00:10,422
queries on the underlying data source.

3
00:00:10,422 --> 00:00:14,627
But with Spring Data, declaring those query methods become a multistep process.

4
00:00:14,627 --> 00:00:18,117
Since we've already declared an interface extend in JpaRepository,

5
00:00:18,117 --> 00:00:22,703
the next step would be to declare query methods on the interface.

6
00:00:22,703 --> 00:00:25,449
I've added three methods to our ticket repository,

7
00:00:25,449 --> 00:00:27,616
which I'll show you in a moment.

8
00:00:27,616 --> 00:00:30,494
The next step would be to set up Spring to create

9
00:00:30,494 --> 00:00:32,106
proxy instances for those interfaces,

10
00:00:32,106 --> 00:00:35,792
which I've already done using the repository configuration file,

11
00:00:35,792 --> 00:00:38,959
which we will also look at; and lastly,

12
00:00:38,959 --> 00:00:43,048
the query is created behind the scenes using the method name by

13
00:00:43,048 --> 00:00:45,364
essentially using everything after findBy,

14
00:00:45,364 --> 00:00:47,681
so let's look at that.

15
00:00:47,681 --> 00:00:51,526
There are three custom finder methods that I've added to our ticket repository.

16
00:00:51,526 --> 00:00:53,675
The first is findByDescriptionIgnoreCaseContaining,

17
00:00:53,675 --> 00:00:57,764
which is a finder method to search by description.

18
00:00:57,764 --> 00:00:59,943
The second method is findByApplicationId,

19
00:00:59,943 --> 00:01:05,411
which searches by the application ID, and then lastly,

20
00:01:05,411 --> 00:01:10,218
findByTitleIgnoreCaseContaining, which is a finder method to search by the title.

21
00:01:10,218 --> 00:01:17,000
The RepositoryConfiguration. java file configures Spring to create proxy instances for those methods.

