WEBVTT
1
00:00:03.512 --> 00:00:06.967
MSA is a more agile framework that fits well with the

2
00:00:06.967 --> 00:00:10.707
cloud-based world and lends itself well to web application

3
00:00:10.707 --> 00:00:12.849
development and web service development.

4
00:00:12.849 --> 00:00:17.217
MSA is very flexible because it supports any language that can communicate

5
00:00:17.217 --> 00:00:22.682
via a RESTful endpoint since it leverages REST over HTTP,

6
00:00:22.682 --> 00:00:27.399
and is a far simpler means for delivering web services than let's say SOAP,

7
00:00:27.399 --> 00:00:31.034
which has been long criticized for complexity.

8
00:00:31.034 --> 00:00:35.958
MSA offers agility and systems that are easier to write,

9
00:00:35.958 --> 00:00:37.927
test, deploy, and share.

10
00:00:37.927 --> 00:00:43.166
MSA provides systems that can better scale to load and demand.

11
00:00:43.166 --> 00:00:47.188
MSA provides systems that are resilient because failures are

12
00:00:47.188 --> 00:00:50.164
isolated and don't cascade through the infrastructure.

13
00:00:50.164 --> 00:00:53.893
Typically, once an application reaches a certain level of scale,

14
00:00:53.893 --> 00:00:55.066
it transitions to MSA.

15
00:00:55.066 --> 00:01:00.341
We will see this with some of the real world use cases I'll share with you.

16
00:01:00.341 --> 00:01:04.421
There are several characteristics of the microservices architecture.

17
00:01:04.421 --> 00:01:09.173
Now the phrase Micro in microservices isn't related to the lines of code,

18
00:01:09.173 --> 00:01:12.059
but is based on the scope of the interface.

19
00:01:12.059 --> 00:01:14.865
Each microservice is single purpose.

20
00:01:14.865 --> 00:01:19.529
Each microservice has a simple well defined interface.

21
00:01:19.529 --> 00:01:23.246
Each microservice is modular and independent,

22
00:01:23.246 --> 00:01:28.803
and has isolated persistence, which means the microservice doesn't share data,

23
00:01:28.803 --> 00:01:33.424
and it serves as the single system of record for data.

24
00:01:33.424 --> 00:01:37.768
MSA also breaks up the big monolithic database so each

25
00:01:37.768 --> 00:01:44.000
service has its own private database. The shared database is no more.

