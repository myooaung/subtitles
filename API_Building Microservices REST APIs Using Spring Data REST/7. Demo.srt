1
00:00:02,791 --> 00:00:06,673
The domains in the TrackZilla application would be application catalog,

2
00:00:06,673 --> 00:00:09,864
ticket management, and user management.

3
00:00:09,864 --> 00:00:13,766
The corresponding microservices architecture would have services

4
00:00:13,766 --> 00:00:16,833
corresponding to each of these subdomains.

5
00:00:16,833 --> 00:00:21,408
So, application management service, TicketManagement service,

6
00:00:21,408 --> 00:00:23,695
and UserManagement service.

7
00:00:23,695 --> 00:00:24,607
For this demo,

8
00:00:24,607 --> 00:00:27,649
we will break up the TrackZilla monolith and create a

9
00:00:27,649 --> 00:00:30,713
ticket management service that allows us to retrieve a

10
00:00:30,713 --> 00:00:32,644
list of tickets for an application.

11
00:00:32,644 --> 00:00:38,483
So looking at this code, this is what we saw at the end of module one,

12
00:00:38,483 --> 00:00:41,851
the TrackZilla monolith with the controller layer,

13
00:00:41,851 --> 00:00:44,398
the service layer, and the data layer.

14
00:00:44,398 --> 00:00:46,273
So let's break it into microservices,

15
00:00:46,273 --> 00:00:57,000
and get it ready to become a Spring Data REST project. So the goal of this demo is to create our ticket management service.

