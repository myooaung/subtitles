1
1

00:00:00,269  -->  00:00:02,069
(tinkling music)
2

2

00:00:02,069  -->  00:00:05,280
(keyboard clicking)
3

3

00:00:05,280  -->  00:00:07,910
<v ->Alright, let's implement the binary search algorithm</v>
4

4

00:00:07,910  -->  00:00:10,430
and I'm going to do it iteratively first,
5

5

00:00:10,430  -->  00:00:12,410
and then we'll do it recursively.
6

6

00:00:12,410  -->  00:00:16,940
So, I'm going to create a method, public static int,
7

7

00:00:16,940  -->  00:00:21,130
and I'll call it iterative binary search.
8

8

00:00:21,130  -->  00:00:24,379
And, as usual, we need the array we're searching
9

9

00:00:24,379  -->  00:00:27,573
and the value that we wanna find.
10

10

00:00:28,640  -->  00:00:31,270
Now, notice that our int-array is sorted
11

11

00:00:31,270  -->  00:00:34,360
and so it's okay for us to use binary search.
12

12

00:00:34,360  -->  00:00:37,340
So we're gonna start by setting up our start and end values,
13

13

00:00:37,340  -->  00:00:39,400
so we'll say int start equals zero
14

14

00:00:39,400  -->  00:00:42,603
and int end equals input dot length.
15

15

00:00:43,870  -->  00:00:46,560
Remember that end will always be one greater
16

16

00:00:46,560  -->  00:00:48,220
than the partition we're looking at,
17

17

00:00:48,220  -->  00:00:50,480
and just to remind you in case you didn't realise
18

18

00:00:50,480  -->  00:00:52,970
from the slides, we're doing logical partitioning,
19

19

00:00:52,970  -->  00:00:55,250
so we're not actually creating a new array
20

20

00:00:55,250  -->  00:00:57,580
or every time we partition.
21

21

00:00:57,580  -->  00:01:01,623
Alright, so we're gonna say while start is less than end,
22

22

00:01:02,750  -->  00:01:05,030
because when start equals end,
23

23

00:01:05,030  -->  00:01:07,570
we've searched the entire array and we haven't found
24

24

00:01:07,570  -->  00:01:08,760
what we're looking for.
25

25

00:01:08,760  -->  00:01:13,760
We'll say int midpoint equals start plus end over two.
26

26

00:01:16,750  -->  00:01:21,750
And then we'll say, if input midpoint equals
27

27

00:01:22,560  -->  00:01:26,810
the value that we're looking for, then we're done, right?
28

28

00:01:26,810  -->  00:01:30,500
We have found the index of the item we're looking for,
29

29

00:01:30,500  -->  00:01:32,910
so we'll just return midpoint.
30

30

00:01:32,910  -->  00:01:35,410
Now, if that's not the case, then we wanna see
31

31

00:01:35,410  -->  00:01:39,160
if the value at input midpoint is less
32

32

00:01:39,160  -->  00:01:40,420
than the value we're looking for.
33

33

00:01:40,420  -->  00:01:44,673
So we'll say else if input midpoint is less
34

34

00:01:44,673  -->  00:01:48,870
than the value, well if that's the case then we want
35

35

00:01:48,870  -->  00:01:51,800
to search the right part of the array.
36

36

00:01:51,800  -->  00:01:55,700
Because, for example, if we're looking for the value 20
37

37

00:01:55,700  -->  00:01:59,650
and the value at input midpoint is 10,
38

38

00:01:59,650  -->  00:02:02,780
then because the array is sorted we know that the value 20
39

39

00:02:02,780  -->  00:02:05,970
has to be at a larger index than midpoint.
40

40

00:02:05,970  -->  00:02:09,310
And so we want to now search the right part of the array.
41

41

00:02:09,310  -->  00:02:12,493
And so all we're gonna do here is change the start value,
42

42

00:02:13,920  -->  00:02:15,373
to midpoint plus one.
43

43

00:02:18,930  -->  00:02:23,380
So, if our midpoint was, let's say, index five
44

44

00:02:23,380  -->  00:02:26,410
and we've checked index five and we now wanna search
45

45

00:02:26,410  -->  00:02:29,100
the right part of the array, while the start value
46

46

00:02:29,100  -->  00:02:32,160
is going to be five plus one which is six.
47

47

00:02:32,160  -->  00:02:35,050
Our end would still be the end of the array.
48

48

00:02:35,050  -->  00:02:39,075
Now, if the element at midpoint is not equal to the value
49

49

00:02:39,075  -->  00:02:40,940
and it's not less than the value,
50

50

00:02:40,940  -->  00:02:42,880
then it must be greater than the value.
51

51

00:02:42,880  -->  00:02:45,960
So in that case, we wanna search the left part of the array.
52

52

00:02:45,960  -->  00:02:48,570
So, our start value is gonna stay the same,
53

53

00:02:48,570  -->  00:02:52,420
and our end value will become midpoint,
54

54

00:02:52,420  -->  00:02:55,640
because midpoint is always one greater than the end
55

55

00:02:55,640  -->  00:02:58,220
of the partition, and we've already looked at midpoint.
56

56

00:02:58,220  -->  00:03:01,020
And so we want our partition to run from start
57

57

00:03:01,020  -->  00:03:03,140
to midpoint minus one.
58

58

00:03:03,140  -->  00:03:04,950
And so the end will be midpoint.
59

59

00:03:04,950  -->  00:03:05,850
And that's it.
60

60

00:03:05,850  -->  00:03:07,580
There's only one thing we have to do.
61

61

00:03:07,580  -->  00:03:11,830
If we come out of here and we have not found the value,
62

62

00:03:11,830  -->  00:03:15,160
then we're gonna return minus one.
63

63

00:03:15,160  -->  00:03:17,230
And so we're gonna keep looping
64

64

00:03:17,230  -->  00:03:19,810
until our start equals our end,
65

65

00:03:19,810  -->  00:03:22,660
because that would mean that what happened was we got down
66

66

00:03:22,660  -->  00:03:24,350
to a partition of one element,
67

67

00:03:24,350  -->  00:03:27,150
and that element did not equal the value.
68

68

00:03:27,150  -->  00:03:29,550
And so we're gonna adjust our start and end,
69

69

00:03:29,550  -->  00:03:31,750
and it's gonna make start equal to end,
70

70

00:03:31,750  -->  00:03:33,520
and that's when we're gonna drop out,
71

71

00:03:33,520  -->  00:03:35,690
'cause we've basically gone down to a partition
72

72

00:03:35,690  -->  00:03:37,480
of zero elements, and so we know
73

73

00:03:37,480  -->  00:03:40,380
that the value we're looking for isn't in the array.
74

74

00:03:40,380  -->  00:03:43,520
And so we start out by getting the middle element
75

75

00:03:43,520  -->  00:03:46,300
and then we compare it against the value we're looking for,
76

76

00:03:46,300  -->  00:03:49,766
and at some point when we're doing all our partitions,
77

77

00:03:49,766  -->  00:03:52,590
the middle element will equal the value.
78

78

00:03:52,590  -->  00:03:55,240
If that doesn't happen, the value's not in the array
79

79

00:03:55,240  -->  00:03:56,760
and we return minus one.
80

80

00:03:56,760  -->  00:03:58,417
So, let's go ahead and try this out,
81

81

00:03:58,417  -->  00:04:02,173
and let's say, system dot out dot printline,
82

82

00:04:03,720  -->  00:04:06,010
iterative binary search with input,
83

83

00:04:06,010  -->  00:04:11,010
and let's search for minus 15, that should be int array.
84

84

00:04:13,890  -->  00:04:16,113
And let me copy this a few more times.
85

85

00:04:20,930  -->  00:04:24,643
And let's look for 35,
86

86

00:04:26,640  -->  00:04:28,630
let's look for eight eight eight eight again,
87

87

00:04:28,630  -->  00:04:31,790
and let's look for the value one,
88

88

00:04:31,790  -->  00:04:33,310
the example that we did on the slide.
89

89

00:04:33,310  -->  00:04:34,333
So let's run.
90

90

00:04:38,880  -->  00:04:41,480
And we'll see that minus 15 is at index one,
91

91

00:04:41,480  -->  00:04:42,510
that's correct.
92

92

00:04:42,510  -->  00:04:45,010
35 is at index five, that's correct,
93

93

00:04:45,010  -->  00:04:47,090
we didn't find eight eight eight eight.
94

94

00:04:47,090  -->  00:04:50,060
And one is at index two.
95

95

00:04:50,060  -->  00:04:51,190
So that's all good.
96

96

00:04:51,190  -->  00:04:55,220
And let's add a line in here to print out the midpoint
97

97

00:04:55,220  -->  00:04:57,640
on each iteration, so I'm gonna put a line in here
98

98

00:04:57,640  -->  00:05:00,404
that says, system dot out dot printline,
99

99

00:05:00,404  -->  00:05:05,404
midpoint equals plus midpoint, midpoint.
100

100

00:05:06,860  -->  00:05:08,583
Let's go ahead and run this.
101

101

00:05:13,300  -->  00:05:16,583
And we'll see that the first midpoint was three,
102

102

00:05:17,490  -->  00:05:20,420
for minus 15, let me bring that back,
103

103

00:05:20,420  -->  00:05:21,610
I closed it down too quickly.
104

104

00:05:21,610  -->  00:05:25,000
So for minus 15, the first midpoint was three,
105

105

00:05:25,000  -->  00:05:27,220
and that's always gonna be the first midpoint right?
106

106

00:05:27,220  -->  00:05:29,940
Because we start out with the same start and end value.
107

107

00:05:29,940  -->  00:05:32,530
So, zero, one, two, three, our middle element
108

108

00:05:32,530  -->  00:05:35,330
that we first compare against is always seven.
109

109

00:05:35,330  -->  00:05:38,920
And then what happened was the midpoint seven
110

110

00:05:38,920  -->  00:05:41,340
was greater than minus 15,
111

111

00:05:41,340  -->  00:05:45,260
and so we changed end to the midpoint,
112

112

00:05:45,260  -->  00:05:47,380
which would have made end three,
113

113

00:05:47,380  -->  00:05:49,000
and then when we came around again,
114

114

00:05:49,000  -->  00:05:52,630
we would get zero plus three over two which is one.
115

115

00:05:52,630  -->  00:05:55,210
And one is where minus 15 is located.
116

116

00:05:55,210  -->  00:05:56,563
So, boom, we found it.
117

117

00:05:58,290  -->  00:06:00,380
Now, for the case we looked at in the slides,
118

118

00:06:00,380  -->  00:06:03,510
which is the last one, our first midpoint was three,
119

119

00:06:03,510  -->  00:06:07,910
as we saw in the slide, so we compare one against seven.
120

120

00:06:07,910  -->  00:06:12,910
One is less than seven, and so we're going to again,
121

121

00:06:13,280  -->  00:06:16,320
adjust the end, 'cause now we wanna search the left part
122

122

00:06:16,320  -->  00:06:18,800
of the array, and the new end would be three.
123

123

00:06:18,800  -->  00:06:20,610
Zero plus three is three over two,
124

124

00:06:20,610  -->  00:06:22,240
so our second midpoint is one.
125

125

00:06:22,240  -->  00:06:24,022
And these are always, on each side the midpoints
126

126

00:06:24,022  -->  00:06:26,660
are always gonna be calculated the same,
127

127

00:06:26,660  -->  00:06:29,500
because obviously the length of our array isn't changing.
128

128

00:06:29,500  -->  00:06:33,120
So on the second iteration, the midpoint is one,
129

129

00:06:33,120  -->  00:06:36,140
and we compare one against minus 15.
130

130

00:06:36,140  -->  00:06:38,140
One is greater than minus 15,
131

131

00:06:38,140  -->  00:06:41,550
and so this time we're gonna adjust our start,
132

132

00:06:41,550  -->  00:06:43,590
and our start becomes two.
133

133

00:06:43,590  -->  00:06:46,130
Our midpoint was one, and so we add one
134

134

00:06:46,130  -->  00:06:48,310
to get a start value of two.
135

135

00:06:48,310  -->  00:06:51,130
Our end remains three, so we get two plus three
136

136

00:06:51,130  -->  00:06:53,462
is five over two, which is two,
137

137

00:06:53,462  -->  00:06:56,110
and that's our new midpoint down here,
138

138

00:06:56,110  -->  00:06:59,210
and then we check, input two, and boom,
139

139

00:06:59,210  -->  00:07:00,950
we found the value we're looking for.
140

140

00:07:00,950  -->  00:07:03,120
And so that's iterative binary search.
141

141

00:07:03,120  -->  00:07:05,120
It's not very complicated.
142

142

00:07:05,120  -->  00:07:08,110
So now let's write the recursive version.
143

143

00:07:08,110  -->  00:07:11,000
I'm gonna come down here and I'm gonna say,
144

144

00:07:11,000  -->  00:07:16,000
public static int recursive binary search.
145

145

00:07:17,850  -->  00:07:22,740
And we're gonna need the same initial parameters,
146

146

00:07:22,740  -->  00:07:24,883
so int, input and int value.
147

147

00:07:27,210  -->  00:07:29,910
But for the recursive version, we're gonna need two methods,
148

148

00:07:29,910  -->  00:07:32,380
we're gonna need the one that accepts the entire array,
149

149

00:07:32,380  -->  00:07:34,710
and then of course we're gonna need a recursive method
150

150

00:07:34,710  -->  00:07:37,290
that takes a start and end point,
151

151

00:07:37,290  -->  00:07:39,030
because those are what's changing.
152

152

00:07:39,030  -->  00:07:44,030
So, we're going to say, return, recursive binary search,
153

153

00:07:44,110  -->  00:07:45,960
and we're gonna say, input,
154

154

00:07:45,960  -->  00:07:49,620
and our start value will be zero,
155

155

00:07:49,620  -->  00:07:52,053
our end value will be input dot length,
156

156

00:07:53,710  -->  00:07:55,750
and the value we're looking for.
157

157

00:07:55,750  -->  00:07:57,870
So let's go ahead and write this version
158

158

00:07:57,870  -->  00:07:59,810
of the recursive binary search.
159

159

00:07:59,810  -->  00:08:04,810
So we'll say, public static int recursive binary search,
160

160

00:08:06,550  -->  00:08:08,440
and this will take an input array,
161

161

00:08:08,440  -->  00:08:11,440
it'll take the start value, the end value,
162

162

00:08:11,440  -->  00:08:14,290
and the value we're looking for.
163

163

00:08:14,290  -->  00:08:16,620
And so this is the method that's actually going
164

164

00:08:16,620  -->  00:08:17,700
to be recursive.
165

165

00:08:17,700  -->  00:08:19,590
I didn't have to break it into two methods,
166

166

00:08:19,590  -->  00:08:20,760
up here in the main method,
167

167

00:08:20,760  -->  00:08:22,810
I could just call this method directly,
168

168

00:08:22,810  -->  00:08:25,530
but normally what you'd have is a method that takes
169

169

00:08:25,530  -->  00:08:28,660
the entire thing and then you'd call the recursive method.
170

170

00:08:28,660  -->  00:08:29,930
This is a recursive method,
171

171

00:08:29,930  -->  00:08:31,630
and so we need a breaking condition,
172

172

00:08:31,630  -->  00:08:33,280
and our breaking condition is going to be,
173

173

00:08:33,280  -->  00:08:38,280
if start is greater than or equal to end,
174

174

00:08:38,670  -->  00:08:40,373
we're gonna return minus one.
175

175

00:08:41,210  -->  00:08:43,700
And this is basically the same condition as this one.
176

176

00:08:43,700  -->  00:08:46,720
Here we're saying as long as start is less than end,
177

177

00:08:46,720  -->  00:08:47,660
keep going.
178

178

00:08:47,660  -->  00:08:50,361
And here we're saying if start isn't less than end,
179

179

00:08:50,361  -->  00:08:53,410
then stop, which is essentially what we're saying here.
180

180

00:08:53,410  -->  00:08:55,970
If start is not less than end,
181

181

00:08:55,970  -->  00:08:57,600
we're gonna drop out of the loop.
182

182

00:08:57,600  -->  00:09:00,090
And so it's the same condition, because that means
183

183

00:09:00,090  -->  00:09:02,950
that we're down to a partition of zero elements,
184

184

00:09:02,950  -->  00:09:06,510
and that means we didn't find what we were looking for.
185

185

00:09:06,510  -->  00:09:08,230
Okay, so assuming that's not true,
186

186

00:09:08,230  -->  00:09:11,150
basically the recursion is gonna do what this loop is doing.
187

187

00:09:11,150  -->  00:09:13,150
And so we're gonna start out the same way,
188

188

00:09:13,150  -->  00:09:17,773
int midpoint equals start plus end over two,
189

189

00:09:20,230  -->  00:09:22,623
and I'll print out what the midpoint is.
190

190

00:09:23,630  -->  00:09:27,533
Midpoint equals plus midpoint.
191

191

00:09:28,780  -->  00:09:31,470
And so since the recursion is replacing this,
192

192

00:09:31,470  -->  00:09:33,850
we don't have a loop, we just basically have to do
193

193

00:09:33,850  -->  00:09:37,460
what we're doing in here as part of the recursion,
194

194

00:09:37,460  -->  00:09:40,530
because each call of this recursive method
195

195

00:09:40,530  -->  00:09:45,530
is pretty much equivalent to a iteration of this while-loop.
196

196

00:09:45,690  -->  00:09:50,690
And so we're gonna say, if input midpoint equals the value
197

197

00:09:53,501  -->  00:09:54,850
then we're done right?
198

198

00:09:54,850  -->  00:09:56,523
So we're gonna return midpoint.
199

199

00:09:58,750  -->  00:10:03,750
If that's not true, than else, if input midpoint
200

200

00:10:05,620  -->  00:10:07,313
is less than the value,
201

201

00:10:08,180  -->  00:10:12,033
we're gonna return recursive binary search,
202

202

00:10:15,750  -->  00:10:17,690
we're gonna pass the input array,
203

203

00:10:17,690  -->  00:10:20,200
we're gonna add one to the start point,
204

204

00:10:20,200  -->  00:10:22,350
midpoint plus one, 'cause we're gonna wanna look
205

205

00:10:22,350  -->  00:10:24,143
at the right half.
206

206

00:10:24,990  -->  00:10:27,160
The end will stay the same,
207

207

00:10:27,160  -->  00:10:29,473
and we're looking for the same value.
208

208

00:10:31,010  -->  00:10:35,330
Otherwise, we know that the value at input midpoint
209

209

00:10:35,330  -->  00:10:37,640
is greater than the value we're looking for,
210

210

00:10:37,640  -->  00:10:39,900
so we wanna look at the left part of the array,
211

211

00:10:39,900  -->  00:10:44,900
so we'll say, return recursive binary search,
212

212

00:10:45,720  -->  00:10:47,330
we're gonna pass input.
213

213

00:10:47,330  -->  00:10:49,780
This time our start will remain the same,
214

214

00:10:49,780  -->  00:10:52,810
our end will be the midpoint and the value.
215

215

00:10:52,810  -->  00:10:53,643
And that's it.
216

216

00:10:53,643  -->  00:10:55,520
Now, if you compare these two things,
217

217

00:10:55,520  -->  00:10:57,110
you'll see that this here,
218

218

00:10:57,110  -->  00:11:01,703
or actually this whole thing here is pretty much this.
219

219

00:11:03,130  -->  00:11:06,350
But, instead of just adjusting the start and end points
220

220

00:11:06,350  -->  00:11:09,142
and looping around, we're adjusting the start and end points
221

221

00:11:09,142  -->  00:11:10,920
and then calling the method.
222

222

00:11:10,920  -->  00:11:13,612
So, as I said, each call of the method is basically
223

223

00:11:13,612  -->  00:11:15,170
an iteration of this loop.
224

224

00:11:15,170  -->  00:11:16,840
And that's often how recursion works,
225

225

00:11:16,840  -->  00:11:20,162
if you write the method recursively and iteratively,
226

226

00:11:20,162  -->  00:11:24,940
you're basically taking a loop and you're changing it
227

227

00:11:24,940  -->  00:11:27,380
to a recursive method.
228

228

00:11:27,380  -->  00:11:29,490
So let's do the same searches,
229

229

00:11:29,490  -->  00:11:32,403
and I'll copy these first actually.
230

230

00:11:36,745  -->  00:11:38,790
And then I'll comment out the iterative search,
231

231

00:11:38,790  -->  00:11:40,680
so that we're not gonna see everything twice,
232

232

00:11:40,680  -->  00:11:42,833
and I'll just change these to recursive.
233

233

00:11:45,440  -->  00:11:46,993
Recursive.
234

234

00:11:59,070  -->  00:12:00,163
And let's run.
235

235

00:12:04,240  -->  00:12:07,040
Okay, and we'll see that for the first one,
236

236

00:12:07,040  -->  00:12:09,640
for minus 15, we find it at one.
237

237

00:12:09,640  -->  00:12:12,210
We find 35 at position five.
238

238

00:12:12,210  -->  00:12:14,460
We don't find eight eight eight eight,
239

239

00:12:14,460  -->  00:12:19,060
and we find one at position two.
240

240

00:12:19,060  -->  00:12:21,670
And you'll see that we have the same midpoints
241

241

00:12:21,670  -->  00:12:25,233
that we had when we called the iterative version.
242

242

00:12:27,320  -->  00:12:29,530
And that's it, that's binary search,
243

243

00:12:29,530  -->  00:12:31,030
not too complex.
244

244

00:12:31,030  -->  00:12:33,800
In this case, I think the iterative version
245

245

00:12:33,800  -->  00:12:36,760
is really clear so I would use the iterative version,
246

246

00:12:36,760  -->  00:12:39,740
because as we discussed when we went over recursion,
247

247

00:12:39,740  -->  00:12:42,365
the recursive form is usually more expensive
248

248

00:12:42,365  -->  00:12:46,890
because there's overhead involved with method calls.
249

249

00:12:46,890  -->  00:12:50,190
And so this one doesn't use any method calls at all,
250

250

00:12:50,190  -->  00:12:53,580
so on the same hardware, same array everything else,
251

251

00:12:53,580  -->  00:12:57,136
we'd expect the iterative method to perform a little better
252

252

00:12:57,136  -->  00:12:59,080
than the recursive method.
253

253

00:12:59,080  -->  00:13:01,750
Okay, so search algorithms,
254

254

00:13:01,750  -->  00:13:05,270
not as complex as sort algorithms,
255

255

00:13:05,270  -->  00:13:08,440
well, not as complex as some of the sort algorithms anyway.
256

256

00:13:08,440  -->  00:13:10,950
And that's it for search algorithms.
257

257

00:13:10,950  -->  00:13:12,500
I'll see you in the next video.
