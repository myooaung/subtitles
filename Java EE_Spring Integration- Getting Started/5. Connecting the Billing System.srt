1
00:00:01,040 --> 00:00:02,680
[Autogenerated] Besides sending an email,

2
00:00:02,680 --> 00:00:05,920
we also need to let the Globomantics billing system No

3
00:00:05,920 --> 00:00:08,640
to send an invoice for the ticket.

4
00:00:08,640 --> 00:00:11,810
Let's imagine that the billing system as a web service that we need to

5
00:00:11,810 --> 00:00:15,710
call for this we're going to add another listener to to published

6
00:00:15,710 --> 00:00:18,970
subscribed channel that will call the billing system web services when

7
00:00:18,970 --> 00:00:21,540
a registration event happens.

8
00:00:21,540 --> 00:00:23,960
First of all, to simulate the billing system,

9
00:00:23,960 --> 00:00:27,540
I've added another module to the demo application.

10
00:00:27,540 --> 00:00:30,700
This contains a very simple spring boot application with the

11
00:00:30,700 --> 00:00:33,580
class building controller with just one method,

12
00:00:33,580 --> 00:00:33,810
which,

13
00:00:33,810 --> 00:00:39,120
except HTTP Post requests It doesn't really do anything besides

14
00:00:39,120 --> 00:00:42,820
writing a lock message when it's called The building application

15
00:00:42,820 --> 00:00:46,440
is configured tradition on Port 80 83.

16
00:00:46,440 --> 00:00:49,220
Let's see what we need to do in the service module to

17
00:00:49,220 --> 00:00:51,440
call the building web services.

18
00:00:51,440 --> 00:00:56,140
We're going to use an HTTP outbound channel adapter to do this,

19
00:00:56,140 --> 00:00:57,470
just like with a M.

20
00:00:57,470 --> 00:00:57,700
Q.

21
00:00:57,700 --> 00:00:58,740
P and male.

22
00:00:58,740 --> 00:01:04,540
These HTTP outbound channel adaptor is in its own spring integration library.

23
00:01:04,540 --> 00:01:07,310
We have to add a dependency on spring integration.

24
00:01:07,310 --> 00:01:12,480
HTTP to be able to use it also just like the other libraries.

25
00:01:12,480 --> 00:01:14,770
It has its own XML name space.

26
00:01:14,770 --> 00:01:17,770
So we have to add the name space declaration to the header

27
00:01:17,770 --> 00:01:21,040
or spring integration configuration file.

28
00:01:21,040 --> 00:01:25,240
Now let's at the HTTP album Channel adapter,

29
00:01:25,240 --> 00:01:30,040
Just like in the previous clip, I'm going to put it inside the chain.

30
00:01:30,040 --> 00:01:33,960
So let's first define a chain with IDE building chain that listens to

31
00:01:33,960 --> 00:01:37,590
the registration event channel inside the chain.

32
00:01:37,590 --> 00:01:42,960
I'll at an inn, HTTP outbound channel and after element to configure it,

33
00:01:42,960 --> 00:01:47,120
we have to set these URL attribute to HTTP local host 80

34
00:01:47,120 --> 00:01:53,030
83 HTTP method to post Just like with the outbound channel

35
00:01:53,030 --> 00:01:56,320
adapter for sending email, we have to do some processing.

36
00:01:56,320 --> 00:02:00,740
Before we passed the registration event message to the Channel adapter.

37
00:02:00,740 --> 00:02:05,290
We'll need to add Header and Richer, which shuts the content type to application.

38
00:02:05,290 --> 00:02:09,160
JSON note that we're using the common header and

39
00:02:09,160 --> 00:02:11,500
richer from the inter name space here,

40
00:02:11,500 --> 00:02:13,950
not one that's specific to spring integration.

41
00:02:13,950 --> 00:02:17,840
HTTP, that's all we need to do.

42
00:02:17,840 --> 00:02:22,390
The HDP outbound channel adaptor will pick up the content iPad er on

43
00:02:22,390 --> 00:02:26,340
automatically understand that it has to convert the registration event,

44
00:02:26,340 --> 00:02:29,390
object to JSON and send it to the billing system.

45
00:02:29,390 --> 00:02:32,240
Using an HTTP Post request.

46
00:02:32,240 --> 00:02:34,060
To run the complete example,

47
00:02:34,060 --> 00:02:37,440
we'll have to make sure that all the parts are running.

48
00:02:37,440 --> 00:02:42,710
First, make sure that Ravid, MQ and Green Mill are running in docker containers.

49
00:02:42,710 --> 00:02:45,670
Then start up the building service and the front end and back end

50
00:02:45,670 --> 00:02:49,540
over demo at When you now enter a registration,

51
00:02:49,540 --> 00:02:52,390
you'll see that the front and sends a message to the back

52
00:02:52,390 --> 00:02:54,950
and fear rapid mq and then in the back.

53
00:02:54,950 --> 00:02:57,470
And the registration is saved in the database,

54
00:02:57,470 --> 00:03:01,940
and the registration event is sent to the published subscribed channel.

55
00:03:01,940 --> 00:03:02,710
From there,

56
00:03:02,710 --> 00:03:07,180
it's received by the confirmation email chain as well as the building chain,

57
00:03:07,180 --> 00:03:10,940
which will send an email and call the building web services.

58
00:03:10,940 --> 00:03:14,210
You can find a complete code for what we've built so far.

59
00:03:14,210 --> 00:03:16,540
In example, Project eight.

60
00:03:16,540 --> 00:03:22,000
Take a look at the code yourself and play with it and make sure that you understand how it works.

