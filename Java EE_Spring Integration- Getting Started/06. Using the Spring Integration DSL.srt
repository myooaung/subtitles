1
00:00:01,040 --> 00:00:03,300
[Autogenerated] The third way to configure spring integration

2
00:00:03,300 --> 00:00:07,440
components is by using the domain specific language.

3
00:00:07,440 --> 00:00:09,920
We won't cover this in detail in this course,

4
00:00:09,920 --> 00:00:12,460
but I do want to make you aware of this and give you a

5
00:00:12,460 --> 00:00:15,940
starting point to discover more by yourself.

6
00:00:15,940 --> 00:00:19,200
The domain specific language gives you a set of builders

7
00:00:19,200 --> 00:00:23,340
with the fluent API to configure spring integration flows

8
00:00:23,340 --> 00:00:26,140
in a concise and readable way.

9
00:00:26,140 --> 00:00:30,140
Let's take a look at the next example to see what it's like.

10
00:00:30,140 --> 00:00:33,480
The registration controller and service in this example

11
00:00:33,480 --> 00:00:35,890
are the same as in the previous example,

12
00:00:35,890 --> 00:00:39,770
except that we've removed the service activator annotation from the

13
00:00:39,770 --> 00:00:42,940
register method in the registration services.

14
00:00:42,940 --> 00:00:44,920
Instead of using an annotation,

15
00:00:44,920 --> 00:00:47,710
we're going to use these DSL to set up the service

16
00:00:47,710 --> 00:00:50,240
activator and the message General,

17
00:00:50,240 --> 00:00:55,640
Let's take a look at the configuration class Globomantics integration conflict.

18
00:00:55,640 --> 00:00:58,740
This is where we're going to use the DSL.

19
00:00:58,740 --> 00:01:02,040
First, we need to create the message channel.

20
00:01:02,040 --> 00:01:04,050
Just like in the previous example,

21
00:01:04,050 --> 00:01:08,190
we'll add a method named Registration Request with the being annotation,

22
00:01:08,190 --> 00:01:11,340
which returns a message general object.

23
00:01:11,340 --> 00:01:15,190
But instead of instantiate ing and direct channel here directly,

24
00:01:15,190 --> 00:01:18,140
let's use a method from the DSL.

25
00:01:18,140 --> 00:01:22,240
The class message channels provides a number of methods to

26
00:01:22,240 --> 00:01:27,170
build message generals to create a directional will use one

27
00:01:27,170 --> 00:01:29,620
off the methods named Direct here,

28
00:01:29,620 --> 00:01:33,000
and we'll posit the idea of the message channel.

29
00:01:33,000 --> 00:01:37,840
Then we call, get to let the builder created channel and return it to us.

30
00:01:37,840 --> 00:01:42,240
The second thing we want to do is define an integration flow.

31
00:01:42,240 --> 00:01:47,050
An integration flow is really a special spring bean that initializer is a

32
00:01:47,050 --> 00:01:50,050
set offspring integration components on Dwyer's them.

33
00:01:50,050 --> 00:01:55,440
Together, we'll add a method that returns an integration flow.

34
00:01:55,440 --> 00:01:59,550
This method should also have Urbina notation inside.

35
00:01:59,550 --> 00:02:03,030
The method will use the DSL to define a flow containing a

36
00:02:03,030 --> 00:02:06,370
service activator that receives messages from the general

37
00:02:06,370 --> 00:02:13,140
we've just defined to use the DSL, we'll start with class integration flows.

38
00:02:13,140 --> 00:02:16,650
This class has a long list of methods named from to

39
00:02:16,650 --> 00:02:19,740
start our flow from a starting point.

40
00:02:19,740 --> 00:02:24,440
In this case, the starting point is the Registration Requests channel.

41
00:02:24,440 --> 00:02:29,040
We can use the from method that takes the name off the generalized a string.

42
00:02:29,040 --> 00:02:33,940
This method returns a builder that we can use to further built a flow.

43
00:02:33,940 --> 00:02:37,250
This building has many methods that we can use at this point

44
00:02:37,250 --> 00:02:41,040
to connect many different types of components to the channel

45
00:02:41,040 --> 00:02:46,140
to connect the service activator, we will use one off the handle methods.

46
00:02:46,140 --> 00:02:47,490
We passed this method,

47
00:02:47,490 --> 00:02:50,410
the registration service and the name off the method we

48
00:02:50,410 --> 00:02:54,340
want to service activated to call, which is registered.

49
00:02:54,340 --> 00:02:54,980
Finally,

50
00:02:54,980 --> 00:02:57,810
we could all get on the builder that she turned by the handle

51
00:02:57,810 --> 00:03:01,640
method to get the finished integration flow object.

52
00:03:01,640 --> 00:03:04,650
This is a simple example that shows only a small

53
00:03:04,650 --> 00:03:07,330
fraction off what you can do with the DSL,

54
00:03:07,330 --> 00:03:12,850
but I hope it gives you an idea of how this is useful by chaining method calls.

55
00:03:12,850 --> 00:03:17,040
You can in this way defined integration flows that clearly show how

56
00:03:17,040 --> 00:03:20,840
components are connected to each other with message channels.

57
00:03:20,840 --> 00:03:23,120
That's all I'll show you off the DSL.

58
00:03:23,120 --> 00:03:24,640
For the moment,

59
00:03:24,640 --> 00:03:33,000
the spring integration reference documentation explains to the usual in much more detail, so you can look it up to learn more

