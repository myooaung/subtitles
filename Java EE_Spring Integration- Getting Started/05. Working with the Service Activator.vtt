WEBVTT
1
00:00:01.040 --> 00:00:03.400
[Autogenerated] it's worth it to spend a few minutes to take

2
00:00:03.400 --> 00:00:06.240
a closer look at the service activator.

3
00:00:06.240 --> 00:00:09.950
The registration page in the demo application shows you that

4
00:00:09.950 --> 00:00:13.340
you can get a ticket for a early bird price.

5
00:00:13.340 --> 00:00:16.830
This is hard coated in the HTML to keep it simple,

6
00:00:16.830 --> 00:00:20.220
but the registration service actually determines if you get your

7
00:00:20.220 --> 00:00:24.680
ticket for the early bird regular or last minute price by looking at

8
00:00:24.680 --> 00:00:27.440
the pricing categories in the database.

9
00:00:27.440 --> 00:00:31.180
Which pricing category applies depends on when the service

10
00:00:31.180 --> 00:00:34.270
processes the registration they get.

11
00:00:34.270 --> 00:00:38.940
Ticket price method looks up the pricing category using the current date.

12
00:00:38.940 --> 00:00:41.740
It would be more fair if the pricing category would be

13
00:00:41.740 --> 00:00:43.470
determined by the date and time,

14
00:00:43.470 --> 00:00:46.630
and you submitted your registration instead of when the

15
00:00:46.630 --> 00:00:49.640
service processes your registration.

16
00:00:49.640 --> 00:00:52.000
It didn't matter in the demo until now,

17
00:00:52.000 --> 00:00:55.270
but in principle the message that the web player sends to the

18
00:00:55.270 --> 00:00:59.450
service layer might be stored on a message queue and stay there

19
00:00:59.450 --> 00:01:03.220
for some time before it's picked up by the service activator and

20
00:01:03.220 --> 00:01:05.440
processed by the services.

21
00:01:05.440 --> 00:01:09.020
Let's make it so that we passed the date and time off submitting the

22
00:01:09.020 --> 00:01:13.340
registration in a message header and see how we can work with this.

23
00:01:13.340 --> 00:01:17.150
Using the service activator first in the controller,

24
00:01:17.150 --> 00:01:19.740
we will set a header in the message with the current

25
00:01:19.740 --> 00:01:22.440
date and time in the submit method.

26
00:01:22.440 --> 00:01:26.040
Now look again at the registration service.

27
00:01:26.040 --> 00:01:30.140
How can we get at the daytime matter in the register method?

28
00:01:30.140 --> 00:01:30.810
Normally,

29
00:01:30.810 --> 00:01:34.050
the service activated component that calls the register method

30
00:01:34.050 --> 00:01:37.930
automatically unpacks the bailout from the message and passes

31
00:01:37.930 --> 00:01:40.440
it as an argument to the method.

32
00:01:40.440 --> 00:01:44.840
In this case, the payload is not under the registration object.

33
00:01:44.840 --> 00:01:48.590
I'm now going to show you two ways to get at the head of value.

34
00:01:48.590 --> 00:01:52.640
But we were that the first way is not how you should do it.

35
00:01:52.640 --> 00:01:55.760
I'm only showing you the wrong way to make you aware,

36
00:01:55.760 --> 00:01:59.840
often important principle off the service activated pattern.

37
00:01:59.840 --> 00:02:03.040
The second way is much better as you'll see.

38
00:02:03.040 --> 00:02:06.890
Okay, the first way you can do this is by changing the argument,

39
00:02:06.890 --> 00:02:09.340
type off the register method,

40
00:02:09.340 --> 00:02:12.530
we can make the method take the message itself as an

41
00:02:12.530 --> 00:02:15.840
argument instead of the type of the payload.

42
00:02:15.840 --> 00:02:19.320
The service activator component is smart enough to understand that

43
00:02:19.320 --> 00:02:21.860
in that case it should not unpack the message,

44
00:02:21.860 --> 00:02:26.600
but pass it to the method untouched in the method we can now extract

45
00:02:26.600 --> 00:02:29.740
ahead of value and the payload from the message.

46
00:02:29.740 --> 00:02:33.380
Let's pass the daytime header to the get ticket price method

47
00:02:33.380 --> 00:02:36.350
so that we can determine the pricing category based on the

48
00:02:36.350 --> 00:02:38.840
time stamp value from the header.

49
00:02:38.840 --> 00:02:42.440
So why is this the wrong way of doing this?

50
00:02:42.440 --> 00:02:46.450
One of the main principles off the service activator pattern is that it's a

51
00:02:46.450 --> 00:02:50.830
way to connect a message general to business logic without requiring the

52
00:02:50.830 --> 00:02:54.440
business logic to be aware off the messaging system.

53
00:02:54.440 --> 00:02:56.760
But by making the register method of our

54
00:02:56.760 --> 00:02:59.600
registration service take a message object,

55
00:02:59.600 --> 00:03:02.940
we did make it aware of the messaging system.

56
00:03:02.940 --> 00:03:03.680
Also,

57
00:03:03.680 --> 00:03:06.940
other code that might want to call the registration service would now

58
00:03:06.940 --> 00:03:10.840
need to pass a message object to the register method.

59
00:03:10.840 --> 00:03:13.720
So even though spring integration allows this,

60
00:03:13.720 --> 00:03:17.440
this way of solving this problem really violates a core

61
00:03:17.440 --> 00:03:20.440
principle off the service activator pattern.

62
00:03:20.440 --> 00:03:23.540
Fortunately, there is a better way to do this.

63
00:03:23.540 --> 00:03:26.750
We can make the register method take two arguments,

64
00:03:26.750 --> 00:03:30.240
one for the head of value and one for the payload.

65
00:03:30.240 --> 00:03:33.950
Then we add annotations to let spring integration know how

66
00:03:33.950 --> 00:03:36.050
to map the head of value and payload.

67
00:03:36.050 --> 00:03:37.940
To these arguments,

68
00:03:37.940 --> 00:03:41.340
we add a header annotation to the first argument and

69
00:03:41.340 --> 00:03:44.040
the payload annotation to the second.

70
00:03:44.040 --> 00:03:46.910
Now we don't need to deal with getting the values from the

71
00:03:46.910 --> 00:03:50.340
message explicitly giving us cleaner code.

72
00:03:50.340 --> 00:03:51.020
Also,

73
00:03:51.020 --> 00:03:53.540
other code that might want to call the registration

74
00:03:53.540 --> 00:04:00.000
service can just pass values directly and doesn't need to know about the messaging system.

