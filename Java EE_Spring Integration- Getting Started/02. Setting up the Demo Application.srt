1
00:00:01,040 --> 00:00:03,270
[Autogenerated] to get started with spring integration.

2
00:00:03,270 --> 00:00:08,800
We need a simple spring application, so I've prepared a simple web application.

3
00:00:08,800 --> 00:00:11,640
Let's take a look at this starting point.

4
00:00:11,640 --> 00:00:15,390
The demo application has a page where people can register for

5
00:00:15,390 --> 00:00:18,050
the tech conference off a fictional company,

6
00:00:18,050 --> 00:00:19,940
Globomantics.

7
00:00:19,940 --> 00:00:23,500
You can choose a ticket type and then enter your name,

8
00:00:23,500 --> 00:00:27,540
email address, etcetera and click the register button.

9
00:00:27,540 --> 00:00:30,270
All it does now is safe your registration in a

10
00:00:30,270 --> 00:00:32,340
database and show you will thank you.

11
00:00:32,340 --> 00:00:33,640
Page.

12
00:00:33,640 --> 00:00:37,140
You can take a look at the source code of the application.

13
00:00:37,140 --> 00:00:38,900
It's a spring boot application,

14
00:00:38,900 --> 00:00:44,190
which has a spring web MVC controller and a bunch of JPA entities and Spring

15
00:00:44,190 --> 00:00:48,040
data JPA error repositories to work with the database.

16
00:00:48,040 --> 00:00:50,280
It has a typical layered architecture.

17
00:00:50,280 --> 00:00:51,140
Er.

18
00:00:51,140 --> 00:00:54,290
There is a web player that contains two controller,

19
00:00:54,290 --> 00:00:58,290
then a service layer that contains the registration service and,

20
00:00:58,290 --> 00:01:03,440
at the bottom, the database layer containing the entities and repositories.

21
00:01:03,440 --> 00:01:06,730
When you fill in the form and click on the register button,

22
00:01:06,730 --> 00:01:09,580
then the submit method in the controller will be called,

23
00:01:09,580 --> 00:01:12,640
which calls the registration service.

24
00:01:12,640 --> 00:01:16,520
The registration service creates the necessary entities and calls

25
00:01:16,520 --> 00:01:19,840
the database layer to save them in the database.

26
00:01:19,840 --> 00:01:24,940
To keep it simple, the database is an in memory age to database.

27
00:01:24,940 --> 00:01:29,450
You can build and run the application yourself using your IDE or from the

28
00:01:29,450 --> 00:01:34,040
command line using the command Mavin Spring Boot rum.

29
00:01:34,040 --> 00:01:39,240
When it has started, point your browser to local host Port 80 80.

30
00:01:39,240 --> 00:01:41,300
When you've entered the registration,

31
00:01:41,300 --> 00:01:45,940
you can use these E H to console to look at the content of the database.

32
00:01:45,940 --> 00:01:51,870
Navigate to local host sport 80 80 slash H two dash console used.

33
00:01:51,870 --> 00:01:58,850
The J D B C URL J D B C H two men Globomantics username s A

34
00:01:58,850 --> 00:02:02,140
and no password to connect to the database.

35
00:02:02,140 --> 00:02:06,070
After entering a registration, you'll see that our records in the tables,

36
00:02:06,070 --> 00:02:16,000
attendees and at and tickets that's our starting point. Let's now start working with spring integration.

