WEBVTT
1
00:00:01.040 --> 00:00:03.800
[Autogenerated] before we get into how we can handle errors,

2
00:00:03.800 --> 00:00:08.130
let's investigate some things that might go wrong and see how the demo

3
00:00:08.130 --> 00:00:12.440
application we have so far reacts in these situations.

4
00:00:12.440 --> 00:00:15.690
The first scenario is about what happens when an error

5
00:00:15.690 --> 00:00:19.340
occurs when we ensure data into the database.

6
00:00:19.340 --> 00:00:22.490
The database has a unique constraint on the email address

7
00:00:22.490 --> 00:00:26.090
off the yet and so that when the same email addresses used

8
00:00:26.090 --> 00:00:31.540
twice to make a registration, an exception occurs in the registration services.

9
00:00:31.540 --> 00:00:34.440
Let's try this to see what happens.

10
00:00:34.440 --> 00:00:38.540
I've started rabid MQ and Green Mill in Docker and the Front

11
00:00:38.540 --> 00:00:42.040
and Back and and Billing Service in IntelliJ.

12
00:00:42.040 --> 00:00:45.240
I enter a registration on the web-page.

13
00:00:45.240 --> 00:00:46.300
Everything is fine,

14
00:00:46.300 --> 00:00:49.580
and I can see in the H two console that the information about the

15
00:00:49.580 --> 00:00:52.740
at and and ticket is safety in the database.

16
00:00:52.740 --> 00:00:57.240
Then I enter another registration with the same email address.

17
00:00:57.240 --> 00:01:01.740
Watch the logging off the back end after I click to register button.

18
00:01:01.740 --> 00:01:04.350
It starts bringing out error message continually,

19
00:01:04.350 --> 00:01:08.240
so it looks like the bacon is not handling this in a good way.

20
00:01:08.240 --> 00:01:11.440
Let's stop it and think about what's happening.

21
00:01:11.440 --> 00:01:14.800
Let's walk through the integration flow starting from the A m.

22
00:01:14.800 --> 00:01:15.020
Q.

23
00:01:15.020 --> 00:01:16.710
P inbound channel the latter.

24
00:01:16.710 --> 00:01:22.040
And think about what happens when the registration service throws an exception.

25
00:01:22.040 --> 00:01:24.930
The AM Cube and bound channel adaptor is right.

26
00:01:24.930 --> 00:01:27.180
The flow starts behind.

27
00:01:27.180 --> 00:01:30.700
This general adapter is a message listener that receives

28
00:01:30.700 --> 00:01:34.540
messages from the rabid em que que that we've configured

29
00:01:34.540 --> 00:01:38.550
whenever it receives a message, it puts it on the Spring Integration Channel,

30
00:01:38.550 --> 00:01:40.540
named from Rabbit.

31
00:01:40.540 --> 00:01:44.860
Then it goes through a transformer to another channel and then to the

32
00:01:44.860 --> 00:01:48.940
servers activator that calls the registration service.

33
00:01:48.940 --> 00:01:52.720
The registration service tries to insert records in the database,

34
00:01:52.720 --> 00:01:56.470
and then an exception occurs because it cannot in certain at

35
00:01:56.470 --> 00:01:59.540
and with the same email address twice.

36
00:01:59.540 --> 00:02:02.240
Where does this exception go?

37
00:02:02.240 --> 00:02:03.500
To understand this,

38
00:02:03.500 --> 00:02:06.190
you have to look at how threats are used here by spring

39
00:02:06.190 --> 00:02:09.740
integration to call the message Chandler's in our flow.

40
00:02:09.740 --> 00:02:13.140
Why do we have to consider how threats error used?

41
00:02:13.140 --> 00:02:17.640
As you know, when a Java method throws an exception, it will go up the call.

42
00:02:17.640 --> 00:02:21.660
Stack off the current threat to the first color in the hierarchy

43
00:02:21.660 --> 00:02:25.340
that has a catch block to handle the exception in the

44
00:02:25.340 --> 00:02:27.970
integration flow off the demo application.

45
00:02:27.970 --> 00:02:32.940
We are using direct channels and also a published subscribed channel.

46
00:02:32.940 --> 00:02:38.940
Both these types of channels called receivers in the same threat as the center.

47
00:02:38.940 --> 00:02:42.440
Think back to when you learned about Direct Channel.

48
00:02:42.440 --> 00:02:45.640
When the center calls sent on a direct channel,

49
00:02:45.640 --> 00:02:49.880
it immediately calls received on the message Chandler that subscribe to the

50
00:02:49.880 --> 00:02:55.540
channel so the receiver runs on the same threat as the center.

51
00:02:55.540 --> 00:02:58.660
The same thing happens with published subscribed channel.

52
00:02:58.660 --> 00:03:00.350
It also runs the handlers.

53
00:03:00.350 --> 00:03:03.740
That error subscribe to it on the centre's threat.

54
00:03:03.740 --> 00:03:08.340
Now we can explain what happens if the receiver throws an exception.

55
00:03:08.340 --> 00:03:11.470
Since it's running on, the same threat is the center.

56
00:03:11.470 --> 00:03:14.640
The exception goes back to the center.

57
00:03:14.640 --> 00:03:15.530
In other words,

58
00:03:15.530 --> 00:03:19.230
the send method that the center called to send a message to the channel

59
00:03:19.230 --> 00:03:22.640
will throw the exception that the receiver through.

60
00:03:22.640 --> 00:03:27.140
Let's look at our integration flow again to see what this means here.

61
00:03:27.140 --> 00:03:31.370
The register method off the registration service throws an exception,

62
00:03:31.370 --> 00:03:35.780
which goes back to the JSON to object transformer and then goes

63
00:03:35.780 --> 00:03:39.240
back to the A m Q P inbound channel adapter,

64
00:03:39.240 --> 00:03:43.210
the way the AM code ping inbound channel adapter by default handles.

65
00:03:43.210 --> 00:03:48.740
These exception is by sending a negative acknowledgement back to rapid mq

66
00:03:48.740 --> 00:03:52.840
rather than queue will then put the message back on the Cube.

67
00:03:52.840 --> 00:03:56.050
Then the application will try to get the next message from the queue,

68
00:03:56.050 --> 00:04:01.340
which is the message that was just put back and try to process it again.

69
00:04:01.340 --> 00:04:03.570
But of course, then the same error occurs,

70
00:04:03.570 --> 00:04:06.940
and the back and service starts spinning because it continually tries

71
00:04:06.940 --> 00:04:10.440
to process the same message that causes an error.

72
00:04:10.440 --> 00:04:13.940
Let's now consider another error scenario.

73
00:04:13.940 --> 00:04:17.440
What happens if the billing system is unavailable?

74
00:04:17.440 --> 00:04:20.670
Let's perch the rabid um que que to get rid of the message

75
00:04:20.670 --> 00:04:24.030
that can't be processed and then restart the back end and

76
00:04:24.030 --> 00:04:26.140
stop the building services.

77
00:04:26.140 --> 00:04:29.340
Now we'll enter a registration again.

78
00:04:29.340 --> 00:04:31.260
Watch the logging off the back and again.

79
00:04:31.260 --> 00:04:37.140
When I click register button, it will start spinning with error messages again.

80
00:04:37.140 --> 00:04:41.460
This time it goes wrong in almost the same way as in the first scenario.

81
00:04:41.460 --> 00:04:46.340
But the exception just happens a bit further down the integration flow.

82
00:04:46.340 --> 00:04:49.430
Note that the registration was saved in the database and

83
00:04:49.430 --> 00:04:51.780
a confirmation email has been sent.

84
00:04:51.780 --> 00:04:54.570
But then the outbound channel adaptor to talk to the

85
00:04:54.570 --> 00:04:56.660
building services through an exception,

86
00:04:56.660 --> 00:05:01.240
which went all the way back up to the AM kubectl adapter.

87
00:05:01.240 --> 00:05:05.330
From there it goes wrong in the same way as in the first scenario,

88
00:05:05.330 --> 00:05:07.780
the messages negatively acknowledged,

89
00:05:07.780 --> 00:05:11.740
put back onto the rapid M Q Q and then retried.

90
00:05:11.740 --> 00:05:15.060
Then it goes wrong in the same way as in the first scenario,

91
00:05:15.060 --> 00:05:18.430
because the second time around there is already a record in the

92
00:05:18.430 --> 00:05:21.740
database for the attendees email address.

93
00:05:21.740 --> 00:05:25.520
When the mail server is down, a very similar problem occurs.

94
00:05:25.520 --> 00:05:30.240
But then it's the male outbound channel adapter that throws these exception.

95
00:05:30.240 --> 00:05:38.000
Now that you understand how things can go wrong, let's see how we can make the application deal with these problems.

