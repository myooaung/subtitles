WEBVTT
1
00:00:01.040 --> 00:00:03.050
[Autogenerated] before we look deeper into spring

2
00:00:03.050 --> 00:00:05.350
integration message channels and endpoints,

3
00:00:05.350 --> 00:00:09.350
I want to show you more ways to configure spring integration components.

4
00:00:09.350 --> 00:00:11.540
Besides XML.

5
00:00:11.540 --> 00:00:14.880
As I explained in the introduction module of the course,

6
00:00:14.880 --> 00:00:18.540
there are several ways to configure components,

7
00:00:18.540 --> 00:00:20.400
just like in regular spring.

8
00:00:20.400 --> 00:00:25.940
Besides XML configuration, you can also use Java annotations.

9
00:00:25.940 --> 00:00:28.800
Spring integration AD DS a number off a notation

10
00:00:28.800 --> 00:00:32.520
specifically for spring integration components to the usual

11
00:00:32.520 --> 00:00:35.840
spring Jaffa configuration annotations.

12
00:00:35.840 --> 00:00:38.780
A third way is to use the spring integration domain

13
00:00:38.780 --> 00:00:42.540
specific language to set up integration flows.

14
00:00:42.540 --> 00:00:46.440
Let's look at Java configuration in more detail.

15
00:00:46.440 --> 00:00:50.440
We'll start with the code that we finished within the last clip.

16
00:00:50.440 --> 00:00:53.940
Let's get rid of the XML configuration.

17
00:00:53.940 --> 00:00:57.860
Remove the XML configuration file and the import resources

18
00:00:57.860 --> 00:01:01.340
annotation on the spring boot application class.

19
00:01:01.340 --> 00:01:05.250
Now let's add a class named Globomantics integration conflict

20
00:01:05.250 --> 00:01:08.340
and put a configuration and notation on it.

21
00:01:08.340 --> 00:01:11.330
Spring will automatically find this glass and use it to

22
00:01:11.330 --> 00:01:14.240
initialize the application context.

23
00:01:14.240 --> 00:01:20.040
To create a message channel, add a method to this class with bean annotation.

24
00:01:20.040 --> 00:01:24.710
The method will return a message general object well name the method

25
00:01:24.710 --> 00:01:28.310
registration request so that spring will create a message.

26
00:01:28.310 --> 00:01:32.060
General Spring Green named registration request just like

27
00:01:32.060 --> 00:01:35.240
we had in the previous example with XML.

28
00:01:35.240 --> 00:01:38.540
Now, what should we put in the body of search method?

29
00:01:38.540 --> 00:01:40.840
We will have to create the right kind of message

30
00:01:40.840 --> 00:01:43.340
general object here and return it.

31
00:01:43.340 --> 00:01:46.010
Note that message journalist itself and interface.

32
00:01:46.010 --> 00:01:48.260
So we can't simply use new message.

33
00:01:48.260 --> 00:01:49.440
General,

34
00:01:49.440 --> 00:01:52.780
we'll have to create an instance off one offspring integrations

35
00:01:52.780 --> 00:01:56.040
message general implementation classes here.

36
00:01:56.040 --> 00:02:00.040
We didn't have to do this in the last example with XML.

37
00:02:00.040 --> 00:02:03.590
When you use XML configurations bring integration chooses a

38
00:02:03.590 --> 00:02:05.720
message General implementation itself.

39
00:02:05.720 --> 00:02:10.540
If you don't explicitly specify what type off message general you want,

40
00:02:10.540 --> 00:02:13.600
the default implementation is direct channel.

41
00:02:13.600 --> 00:02:16.440
So let's use that Here is well,

42
00:02:16.440 --> 00:02:21.540
don't worry too much at this point about what exactly a direct channel is.

43
00:02:21.540 --> 00:02:24.430
We are first focusing on how to configure spring

44
00:02:24.430 --> 00:02:27.340
integration with Jaffa configuration.

45
00:02:27.340 --> 00:02:28.490
Later in this module,

46
00:02:28.490 --> 00:02:30.510
we will look at the different message colonel

47
00:02:30.510 --> 00:02:33.820
implementations that spring integration provides and you'll

48
00:02:33.820 --> 00:02:36.840
learn what exactly a direct channel is.

49
00:02:36.840 --> 00:02:42.040
The second thing we had in our XML configuration was the service activator.

50
00:02:42.040 --> 00:02:43.070
In this example,

51
00:02:43.070 --> 00:02:47.280
we're going to define the service activator by putting a service activator

52
00:02:47.280 --> 00:02:52.340
annotation on the register method off class registration service.

53
00:02:52.340 --> 00:02:55.010
We have to tell it what channel relation to by

54
00:02:55.010 --> 00:02:57.840
setting the input channel attribute.

55
00:02:57.840 --> 00:03:01.290
That's all we have to do for our first taste of configuring

56
00:03:01.290 --> 00:03:04.840
spring integration with Java configuration.

57
00:03:04.840 --> 00:03:08.840
You can run the application again and see that it still works.

58
00:03:08.840 --> 00:03:11.840
As you can see, this is really simple.

59
00:03:11.840 --> 00:03:16.140
I have intentionally kept the example simple so that you understand the basics.

60
00:03:16.140 --> 00:03:22.140
First, we will soon get to more complex and more interesting examples.

61
00:03:22.140 --> 00:03:30.000
In fact, before we move on to looking at the domain specific language, let's look at some more features off the service activator.

