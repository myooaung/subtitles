WEBVTT
1
00:00:01.040 --> 00:00:04.140
[Autogenerated] Let's continue with the demo application.

2
00:00:04.140 --> 00:00:07.070
We're going to have the registration service return on

3
00:00:07.070 --> 00:00:09.660
object that represents a registration event,

4
00:00:09.660 --> 00:00:12.250
and we'll add a published subscribed channel where the

5
00:00:12.250 --> 00:00:15.140
registration events will be sent to.

6
00:00:15.140 --> 00:00:18.640
I'm starting with the goat from example five.

7
00:00:18.640 --> 00:00:23.040
First, let's add a class that represents a registration event.

8
00:00:23.040 --> 00:00:25.700
We'll add it to the model next to class at and

9
00:00:25.700 --> 00:00:28.860
registration the registration event.

10
00:00:28.860 --> 00:00:31.230
Plass is just a simple Java object,

11
00:00:31.230 --> 00:00:34.260
with some fields with gathers and centers containing

12
00:00:34.260 --> 00:00:37.440
information on the registration that has been made.

13
00:00:37.440 --> 00:00:41.670
It contains the ticket type, which is premium standard or community,

14
00:00:41.670 --> 00:00:42.800
the ticket price,

15
00:00:42.800 --> 00:00:47.740
the unique code for the ticket and the name and email address off the attorney.

16
00:00:47.740 --> 00:00:52.640
Next, we'll modify the register method in class registration services.

17
00:00:52.640 --> 00:00:56.860
Right now it returns fight, but we'll make it return a registration event.

18
00:00:56.860 --> 00:00:58.540
Object instead.

19
00:00:58.540 --> 00:01:02.610
At the end of the method, we will have to create a registration event object,

20
00:01:02.610 --> 00:01:05.420
fill it with data from the registration that was saved in

21
00:01:05.420 --> 00:01:08.540
the database and return the object.

22
00:01:08.540 --> 00:01:12.020
The register method is called by the service activator that we have

23
00:01:12.020 --> 00:01:16.440
configured in the Spring Integration XML configuration file.

24
00:01:16.440 --> 00:01:19.510
There will have to specify what happens with the event

25
00:01:19.510 --> 00:01:22.040
object that the service returns.

26
00:01:22.040 --> 00:01:25.010
We can add an output channel attributes to the service

27
00:01:25.010 --> 00:01:27.690
activator with the name off the channel that we want the

28
00:01:27.690 --> 00:01:30.650
event object to be sent to now.

29
00:01:30.650 --> 00:01:31.360
We, of course,

30
00:01:31.360 --> 00:01:34.900
have to define that channel to define a published

31
00:01:34.900 --> 00:01:38.060
subscribed channel will add an INT published,

32
00:01:38.060 --> 00:01:41.440
subscribed channel element to the configuration.

33
00:01:41.440 --> 00:01:43.960
Let's give it a name registration event,

34
00:01:43.960 --> 00:01:47.940
and now we can make the service activator point to this channel.

35
00:01:47.940 --> 00:01:50.540
That was all for the first step.

36
00:01:50.540 --> 00:01:58.000
Now we, of course, want to register receivers on this channel. That's what we're going to do next.

