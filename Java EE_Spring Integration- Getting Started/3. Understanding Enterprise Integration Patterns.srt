1
00:00:01,040 --> 00:00:03,160
[Autogenerated] since bring integration is based on

2
00:00:03,160 --> 00:00:05,140
the enterprise integration patterns,

3
00:00:05,140 --> 00:00:09,150
you will have to understand the basic concepts off the enterprise integration

4
00:00:09,150 --> 00:00:13,740
patterns in order to understand and use spring integration.

5
00:00:13,740 --> 00:00:17,840
Let's take a look at the most important concepts and patterns.

6
00:00:17,840 --> 00:00:22,110
The enterprise integration patterns are all about a synchronous messaging,

7
00:00:22,110 --> 00:00:27,040
so the first thing to understand is what exactly a message is.

8
00:00:27,040 --> 00:00:30,990
A message is a unit of data that is transmitted from a center to

9
00:00:30,990 --> 00:00:34,940
one or more receivers via a messaging system.

10
00:00:34,940 --> 00:00:37,510
In the view off enterprise integration patterns,

11
00:00:37,510 --> 00:00:40,160
a message consists off two parts.

12
00:00:40,160 --> 00:00:42,440
The payload and headers.

13
00:00:42,440 --> 00:00:46,240
The payload is these actual content off the message?

14
00:00:46,240 --> 00:00:48,180
This can be any kind of data,

15
00:00:48,180 --> 00:00:52,040
and the meaning of the payload is application specific.

16
00:00:52,040 --> 00:00:52,890
The hand is off.

17
00:00:52,890 --> 00:00:54,820
A message contained metadata,

18
00:00:54,820 --> 00:00:58,090
which can be anything that the messaging system needs

19
00:00:58,090 --> 00:01:00,420
to deliver the message to receiver.

20
00:01:00,420 --> 00:01:06,740
For example, a unique IDE timestamp correlation IDE and return address.

21
00:01:06,740 --> 00:01:12,540
If you know how HTTP works, then this model of a message will look familiar.

22
00:01:12,540 --> 00:01:17,760
And HTTP request a response also consists off headers with metadata

23
00:01:17,760 --> 00:01:23,050
and optionally a body that contains application specific data to get

24
00:01:23,050 --> 00:01:25,570
messages from a center to receiver.

25
00:01:25,570 --> 00:01:29,240
They are transported over a message channel.

26
00:01:29,240 --> 00:01:31,170
A message general is the pipe,

27
00:01:31,170 --> 00:01:35,840
so to speak that gets the message from the center to the receiver.

28
00:01:35,840 --> 00:01:39,170
Note that the enterprise integration patterns are abstract

29
00:01:39,170 --> 00:01:43,080
ideas and not prescriptions about specific implementations

30
00:01:43,080 --> 00:01:45,440
off these ideas in software.

31
00:01:45,440 --> 00:01:48,930
A Message general is these abstract idea off something that

32
00:01:48,930 --> 00:01:52,540
carries messages from a center to receiver.

33
00:01:52,540 --> 00:01:56,740
There are many different ways to implement message generals.

34
00:01:56,740 --> 00:02:01,740
Queues are an example, but a message general is not always a cube.

35
00:02:01,740 --> 00:02:05,290
There are two main types of message channels which are point to

36
00:02:05,290 --> 00:02:08,740
point channels and published subscribe channels.

37
00:02:08,740 --> 00:02:11,990
A point to Point Channel is a message channel that connects

38
00:02:11,990 --> 00:02:15,940
exactly one center with exactly one receiver.

39
00:02:15,940 --> 00:02:21,030
One possible implementation off point to point channels accused Remember

40
00:02:21,030 --> 00:02:25,180
the online shop example that I mentioned earlier there?

41
00:02:25,180 --> 00:02:28,900
A point to Point general in the form of a message queue was

42
00:02:28,900 --> 00:02:32,580
used to have the website send messages to the warehouse to

43
00:02:32,580 --> 00:02:35,240
process orders from customers.

44
00:02:35,240 --> 00:02:36,310
In the next module,

45
00:02:36,310 --> 00:02:39,680
we will get started working with spring integration by first

46
00:02:39,680 --> 00:02:42,640
using point to point message channels.

47
00:02:42,640 --> 00:02:45,550
The other main type of message, General is to publish.

48
00:02:45,550 --> 00:02:49,020
Subscribe General, a published subscribed channel,

49
00:02:49,020 --> 00:02:54,540
is used to broadcast messages from one center to multiple receivers.

50
00:02:54,540 --> 00:02:58,290
One common scenario where you would want to use a published subscribed

51
00:02:58,290 --> 00:03:03,160
channel is to broadcast event notifications to parts off your software

52
00:03:03,160 --> 00:03:06,740
that are interested in particular types of events.

53
00:03:06,740 --> 00:03:09,330
After we've looked at point to point messaging,

54
00:03:09,330 --> 00:03:12,360
we will look at how we can use published subscribe messaging

55
00:03:12,360 --> 00:03:15,340
in our demo application for this course.

56
00:03:15,340 --> 00:03:17,270
When you work with the messaging system,

57
00:03:17,270 --> 00:03:21,110
senders and receivers of messages need to connect to it in some

58
00:03:21,110 --> 00:03:24,840
way to be able to send and receive messages.

59
00:03:24,840 --> 00:03:28,560
A message endpoint is the part of the code off a sender and a

60
00:03:28,560 --> 00:03:32,340
receiver that connects to the messaging system.

61
00:03:32,340 --> 00:03:34,390
This is a very general idea,

62
00:03:34,390 --> 00:03:38,020
and there are more patents that described more specific types off

63
00:03:38,020 --> 00:03:41,130
message endpoints such as general adapters,

64
00:03:41,130 --> 00:03:44,140
gateways and service activators.

65
00:03:44,140 --> 00:03:48,840
I realized that this might sound a bit vague if you're completely new to this,

66
00:03:48,840 --> 00:03:49,850
but don't worry.

67
00:03:49,850 --> 00:03:52,760
It will all become more clear once we start working with

68
00:03:52,760 --> 00:03:54,780
message and points during this course,

69
00:03:54,780 --> 00:03:58,140
and we encounter different kinds of endpoints.

70
00:03:58,140 --> 00:04:02,190
The important thing to remember for now is that the term message

71
00:04:02,190 --> 00:04:06,570
endpoint refers to some piece of code that connects to the messaging

72
00:04:06,570 --> 00:04:10,040
system for sending or receiving messages.

73
00:04:10,040 --> 00:04:11,090
As we will see,

74
00:04:11,090 --> 00:04:14,340
spring integration provides you with many different message and

75
00:04:14,340 --> 00:04:18,190
points in the form off channel adapters and gateways to connect

76
00:04:18,190 --> 00:04:20,370
to many different types of systems.

77
00:04:20,370 --> 00:04:26,440
From message brokers to database is email services, web services and much more.

78
00:04:26,440 --> 00:04:32,240
Another main enterprise integration patterns concept is message transformation.

79
00:04:32,240 --> 00:04:37,540
Different systems often produce and consume data in different formats.

80
00:04:37,540 --> 00:04:41,520
For example, a center might produce messages and JSON format.

81
00:04:41,520 --> 00:04:44,840
While the receiver expects XML,

82
00:04:44,840 --> 00:04:47,500
you'll need a message translator between them to

83
00:04:47,500 --> 00:04:50,940
convert messages from JSON to XML.

84
00:04:50,940 --> 00:04:54,070
Other kinds of message transformers work on the headers

85
00:04:54,070 --> 00:04:56,010
rather than the payload of a message,

86
00:04:56,010 --> 00:05:00,550
or enriched the content of a message with data comment from another source,

87
00:05:00,550 --> 00:05:02,540
such as a database.

88
00:05:02,540 --> 00:05:05,650
The Enterprise Integration Patterns book describes several

89
00:05:05,650 --> 00:05:09,340
specific types off message transformation patterns.

90
00:05:09,340 --> 00:05:13,840
The final concept, I'll mention here is message routing.

91
00:05:13,840 --> 00:05:17,700
There might be situations where the receiver off a message that got

92
00:05:17,700 --> 00:05:21,140
sent to a message colonel is not always fixed.

93
00:05:21,140 --> 00:05:23,520
You might want to decide, for example,

94
00:05:23,520 --> 00:05:26,450
based on a specific header value in the message.

95
00:05:26,450 --> 00:05:29,740
Which receivers should process the message?

96
00:05:29,740 --> 00:05:30,500
A message.

97
00:05:30,500 --> 00:05:35,440
Router is a component in the messaging system that makes such decisions.

98
00:05:35,440 --> 00:05:38,780
The messaging system might even decide to drop a message

99
00:05:38,780 --> 00:05:42,540
altogether on not delivered to any receiver.

100
00:05:42,540 --> 00:05:46,940
A component that makes such decisions is a message filter.

101
00:05:46,940 --> 00:05:47,980
Just like message.

102
00:05:47,980 --> 00:05:52,050
Transformation is really a category off more specific patterns.

103
00:05:52,050 --> 00:05:56,240
There are also more specific message routing patterns.

104
00:05:56,240 --> 00:06:00,040
These are the basics of enterprise integration patterns.

105
00:06:00,040 --> 00:06:03,960
I've introduced you to the main concepts and categories of patterns,

106
00:06:03,960 --> 00:06:09,420
messages, channels, endpoints, transformation and routing off course.

107
00:06:09,420 --> 00:06:12,940
There's a lot more to enterprise integration veterans.

108
00:06:12,940 --> 00:06:16,180
The book has more than 700 pages far too much

109
00:06:16,180 --> 00:06:19,240
information to summarize in a few minutes,

110
00:06:19,240 --> 00:06:26,000
but you now know what it's about, and you'll learn more as we encounter new concepts during this course.

