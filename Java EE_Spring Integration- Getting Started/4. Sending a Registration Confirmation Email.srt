1
00:00:01,040 --> 00:00:04,570
[Autogenerated] when someone registers for the Globomantics that conference.

2
00:00:04,570 --> 00:00:07,300
We want them to receive a confirmation email when

3
00:00:07,300 --> 00:00:09,840
their registration has been saved.

4
00:00:09,840 --> 00:00:12,610
So let's add a listener to the registration event

5
00:00:12,610 --> 00:00:15,540
channel that sends a confirmation email.

6
00:00:15,540 --> 00:00:19,610
You will learn a few new things here, creating a chain off message.

7
00:00:19,610 --> 00:00:22,960
Chandler's using a header and richer and using an

8
00:00:22,960 --> 00:00:26,240
outbound general adapter for sending email.

9
00:00:26,240 --> 00:00:29,540
Let's continue with the code where we left off.

10
00:00:29,540 --> 00:00:33,980
To be able to use the spring integration Outbound channel adapter for email

11
00:00:33,980 --> 00:00:37,840
will first have to add some dependencies to our project.

12
00:00:37,840 --> 00:00:41,120
Support for integrating with different types of systems is

13
00:00:41,120 --> 00:00:44,250
organized in separate libraries in spring integration,

14
00:00:44,250 --> 00:00:47,680
so that you can choose to include exactly those libraries

15
00:00:47,680 --> 00:00:50,340
that you need for your application.

16
00:00:50,340 --> 00:00:54,580
We had already included Spring Integration Am code ping to connect to Rev.

17
00:00:54,580 --> 00:00:54,800
Enum.

18
00:00:54,800 --> 00:00:55,220
Q.

19
00:00:55,220 --> 00:01:00,440
And now we'll add spring integration Male to connect to a mail server.

20
00:01:00,440 --> 00:01:04,470
The Spring Integration Male library also expects us to include

21
00:01:04,470 --> 00:01:06,870
an implementation off the Java male API.

22
00:01:06,870 --> 00:01:12,640
In our project, let's use Jakarta adult male version OneDrive 64-bit,

23
00:01:12,640 --> 00:01:15,710
which is the current version off the reference implementation of

24
00:01:15,710 --> 00:01:19,640
Java mill under Eclipses Jakarta e project,

25
00:01:19,640 --> 00:01:23,340
which is a successor to Oracle's Java E.

26
00:01:23,340 --> 00:01:26,200
Now let's get back to the Spring Integration XML

27
00:01:26,200 --> 00:01:30,240
configuration file and add the necessary components.

28
00:01:30,240 --> 00:01:30,800
First,

29
00:01:30,800 --> 00:01:33,890
we'll add the name Space Declaration for spring Integration

30
00:01:33,890 --> 00:01:37,270
male so that we can use the components that is library

31
00:01:37,270 --> 00:01:40,140
provides in our configuration file.

32
00:01:40,140 --> 00:01:44,060
Our goal is to add an outbound channel adapter that listens to the

33
00:01:44,060 --> 00:01:48,920
registration event channel and that takes a registration event message and

34
00:01:48,920 --> 00:01:52,540
turns it into an email that's sent to the attorney.

35
00:01:52,540 --> 00:01:56,650
Spring integration Male has an outbound channel adapter that we can use

36
00:01:56,650 --> 00:02:00,570
by adding an inter email outbound channel adaptor element to the

37
00:02:00,570 --> 00:02:04,210
configuration on this outbound channel adapter.

38
00:02:04,210 --> 00:02:08,950
You can set a number of attributes we can set the channel attribute

39
00:02:08,950 --> 00:02:12,140
to connected to the registration even general.

40
00:02:12,140 --> 00:02:17,440
There are also attributes to tell it which mail server to send email to.

41
00:02:17,440 --> 00:02:23,100
For now, let's set these attributes to local host Port 30 25 username,

42
00:02:23,100 --> 00:02:26,740
Globomantics and password Globomantics URL.

43
00:02:26,740 --> 00:02:29,640
We'll come back to these shootings later,

44
00:02:29,640 --> 00:02:34,140
just adding the outbound channel that after like this is not enough.

45
00:02:34,140 --> 00:02:37,450
It's going to receive registration event objects from

46
00:02:37,450 --> 00:02:39,320
the registration event channel,

47
00:02:39,320 --> 00:02:42,770
but the general adapter doesn't know by itself how to create an

48
00:02:42,770 --> 00:02:46,040
email out over registration event object.

49
00:02:46,040 --> 00:02:48,930
So we'll have to add some components between the channel

50
00:02:48,930 --> 00:02:52,160
and the outbound channel adapter to transform registration

51
00:02:52,160 --> 00:02:54,840
event messages into emails.

52
00:02:54,840 --> 00:02:59,030
Let's add a transformer that listens to the registration event Cannell and

53
00:02:59,030 --> 00:03:03,240
that transforms registration event objects into emails.

54
00:03:03,240 --> 00:03:08,040
We'll pass the output off the transformer to the album channel adapter,

55
00:03:08,040 --> 00:03:09,920
just like the service activator.

56
00:03:09,920 --> 00:03:11,670
That transformer has a ref,

57
00:03:11,670 --> 00:03:14,970
and method attributes that point to a method in the spring

58
00:03:14,970 --> 00:03:18,440
Bean that dusty actual transformation.

59
00:03:18,440 --> 00:03:21,710
I've added a class confirmation mail transformer

60
00:03:21,710 --> 00:03:24,300
with a method named to mail text,

61
00:03:24,300 --> 00:03:28,890
which takes a registration event object and returns a string containing

62
00:03:28,890 --> 00:03:33,340
the body of the email that we want to send before we continue with

63
00:03:33,340 --> 00:03:36,680
connecting the output off the transformer to the outbound channel that

64
00:03:36,680 --> 00:03:42,570
after let's talk about message handler, change with what you've learned so far.

65
00:03:42,570 --> 00:03:45,450
What you would probably do to connect the transformer to the

66
00:03:45,450 --> 00:03:48,950
outbound channel adaptor is defined another channel.

67
00:03:48,950 --> 00:03:51,780
That's the output for the transformer and the input for

68
00:03:51,780 --> 00:03:54,520
the channel adapter that would work.

69
00:03:54,520 --> 00:03:57,210
But you can imagine that if you have a more complicated

70
00:03:57,210 --> 00:03:59,480
application with lots of components.

71
00:03:59,480 --> 00:04:04,540
You would also have to define lots of channels to connect all these components.

72
00:04:04,540 --> 00:04:07,360
To avoid having to define so many channels.

73
00:04:07,360 --> 00:04:11,520
You can define a chain a chain groups message Chandler's

74
00:04:11,520 --> 00:04:14,420
together that will be called in sequence just as.

75
00:04:14,420 --> 00:04:17,200
If you would have defined direct channels between the message

76
00:04:17,200 --> 00:04:21,540
Chandler's Let's Put the Transformer and the outbound channel

77
00:04:21,540 --> 00:04:27,240
adaptor together in a chain, we'll add an inch chain element.

78
00:04:27,240 --> 00:04:31,240
Let's give it an ID Confirmation email chain.

79
00:04:31,240 --> 00:04:35,740
We'll move the transformer and the channel adapter into the chain.

80
00:04:35,740 --> 00:04:39,770
Instead of having the handlers in the chain listen to a channel directly.

81
00:04:39,770 --> 00:04:43,940
We'll make the chain listen to the Registration event channel.

82
00:04:43,940 --> 00:04:47,370
We can remove the input channel and channel attributes from

83
00:04:47,370 --> 00:04:50,240
the transformer and the channel adapter.

84
00:04:50,240 --> 00:04:54,580
The chain will pass messages it receives to the first handler and pass the

85
00:04:54,580 --> 00:04:58,240
output off each handler automatically to the next one.

86
00:04:58,240 --> 00:04:59,460
So in this case,

87
00:04:59,460 --> 00:05:03,580
it will send registration event messages to the transformer and the

88
00:05:03,580 --> 00:05:06,840
output off the transformer to the channel adapter.

89
00:05:06,840 --> 00:05:10,810
Using a chain is useful if you have a sequence off message Chandler's that

90
00:05:10,810 --> 00:05:14,840
are related and always have to run in the same order.

91
00:05:14,840 --> 00:05:18,240
It helps you to organize your configuration file and not have to

92
00:05:18,240 --> 00:05:22,140
explicitly defined channels to connect up all the handlers.

93
00:05:22,140 --> 00:05:25,140
There's one thing that's still missing here.

94
00:05:25,140 --> 00:05:29,820
The transformer creates the body off the email from a registration event object.

95
00:05:29,820 --> 00:05:33,420
But we also have to tell the channel adaptor the email address to send

96
00:05:33,420 --> 00:05:37,040
the email to and the subject line off the email.

97
00:05:37,040 --> 00:05:40,330
The outbound channel adapter can get this information from the

98
00:05:40,330 --> 00:05:43,240
headers off the messages that it receives.

99
00:05:43,240 --> 00:05:45,440
We'll add another component to the chain,

100
00:05:45,440 --> 00:05:48,610
a header and richer spring integration.

101
00:05:48,610 --> 00:05:53,170
Male has a header and richer component that we can use to set message

102
00:05:53,170 --> 00:05:56,740
handers that these outbound channel adaptor understands.

103
00:05:56,740 --> 00:05:59,440
Real set three message headers.

104
00:05:59,440 --> 00:06:04,240
First the from header with the email address of the center of the email,

105
00:06:04,240 --> 00:06:06,440
then the to header.

106
00:06:06,440 --> 00:06:11,340
We want to get the value for this header from the registration event object.

107
00:06:11,340 --> 00:06:16,080
We'll use the expression attribute to get this in this expression.

108
00:06:16,080 --> 00:06:20,150
The keyword payload refers to the payload off the message we're working with,

109
00:06:20,150 --> 00:06:23,940
which is in this case, a registration event object.

110
00:06:23,940 --> 00:06:28,290
So payload to .NET and email gets S3 email address off the

111
00:06:28,290 --> 00:06:31,240
attendee that we want to send the email to.

112
00:06:31,240 --> 00:06:35,640
Finally, the subject header sets the subject line for the email.

113
00:06:35,640 --> 00:06:37,440
Now we're ready.

114
00:06:37,440 --> 00:06:41,730
We have a published subscribed channel with so far a single receiver,

115
00:06:41,730 --> 00:06:44,840
which is the confirmation email chain.

116
00:06:44,840 --> 00:06:49,610
The chain contains three message handlers that set the hands of the message,

117
00:06:49,610 --> 00:06:54,460
transformed the payload into text and send the email to run this,

118
00:06:54,460 --> 00:06:56,840
you'll need to have a mail server.

119
00:06:56,840 --> 00:06:59,320
If you have a meal server that you can use,

120
00:06:59,320 --> 00:07:01,520
then you can, of course, at the host port.

121
00:07:01,520 --> 00:07:06,640
Username and password on the outbound channel adapter to use that meal server.

122
00:07:06,640 --> 00:07:08,350
If you don't have a meal server,

123
00:07:08,350 --> 00:07:12,140
then you can run green meal in a docker container.

124
00:07:12,140 --> 00:07:15,200
Greenmail is a very small and simple mail server

125
00:07:15,200 --> 00:07:18,250
that's meant for testing purposes, which is perfect for us.

126
00:07:18,250 --> 00:07:19,440
Here.

127
00:07:19,440 --> 00:07:22,440
You can start it with a command like this.

128
00:07:22,440 --> 00:07:25,920
It will you support 30 25 for outgoing mail using

129
00:07:25,920 --> 00:07:30,740
SMTP and Port 31 43 for I'm app.

130
00:07:30,740 --> 00:07:32,180
With greenmail running,

131
00:07:32,180 --> 00:07:35,400
you can now run the front and then the back end off the demo application

132
00:07:35,400 --> 00:07:40,080
and under a registration after the registration is saved.

133
00:07:40,080 --> 00:07:43,780
A registration event message is sent to the registration event

134
00:07:43,780 --> 00:07:47,440
channel on a confirmation email will be sent.

135
00:07:47,440 --> 00:07:48,100
If you want.

136
00:07:48,100 --> 00:07:52,250
You can configure an email client to receive the email from greenmail

137
00:07:52,250 --> 00:07:57,440
by pointing it to local host Port 31 43 using IMAP.

138
00:07:57,440 --> 00:08:00,080
Another way to read the email that's being delivered in

139
00:08:00,080 --> 00:08:03,340
Green Mail is by using the curl command.

140
00:08:03,340 --> 00:08:04,630
With the following command,

141
00:08:04,630 --> 00:08:08,540
we can check how many messages there are in the in box.

142
00:08:08,540 --> 00:08:13,540
The output also tells you the IDE off the 1st 100 email.

143
00:08:13,540 --> 00:08:16,170
You can read an email with the following command,

144
00:08:16,170 --> 00:08:19,890
where the number after UI IDE is the idea of the email

145
00:08:19,890 --> 00:08:22,250
that you want to read off course.

146
00:08:22,250 --> 00:08:25,860
The point off published subscribe messaging is that multiple receivers

147
00:08:25,860 --> 00:08:33,000
received the messages sent to about the subscribed channel. Let's add another listener to the channel.

