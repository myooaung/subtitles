WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.200 --> 00:00:04.695
Hey guys, everything okay, in today's lesson,

00:00:04.695 --> 00:00:08.985
we began the first step towards internationalization over thing.

00:00:08.985 --> 00:00:11.775
Let's learn a bit about the getText functions

00:00:11.775 --> 00:00:15.210
and translate all the terms we find in our thing.

00:00:15.210 --> 00:00:17.160
Well, first things first,

00:00:17.160 --> 00:00:21.795
we have to start by adding a kind of translation support in our thing.

00:00:21.795 --> 00:00:25.165
To do this has opened up the functions file.

00:00:25.165 --> 00:00:30.590
And within the function we created at the beginning of the course in which we are typing

00:00:30.590 --> 00:00:33.080
out the functions and commands related to

00:00:33.080 --> 00:00:36.665
the theme configuration as add a few more lines,

00:00:36.665 --> 00:00:41.135
we want to create a variable and call it text domain.

00:00:41.135 --> 00:00:47.160
And it will get as a value the name of her theme in lowercase.

00:00:47.470 --> 00:00:53.240
Now, let's include a function called load thing taxed domain.

00:00:53.240 --> 00:00:59.060
This function is used to ensure that future translation files created by translators,

00:00:59.060 --> 00:01:04.700
by our thin collaborators or by the site's owner are uploaded in the correct way.

00:01:04.700 --> 00:01:07.160
It requires two parameters.

00:01:07.160 --> 00:01:09.125
The first is tax domain,

00:01:09.125 --> 00:01:12.680
which in our case would be this variable we just created.

00:01:12.680 --> 00:01:18.455
And the second parameter is the directory path where this translation files will stay.

00:01:18.455 --> 00:01:21.660
So let's call the function here.

00:01:22.630 --> 00:01:26.190
We pass the first parameter.

00:01:27.760 --> 00:01:30.350
And for the second parameter,

00:01:30.350 --> 00:01:34.700
we're going to use the template directory function concatenated with

00:01:34.700 --> 00:01:39.440
the string for slash languages, both slash this.

00:01:39.440 --> 00:01:42.200
You'll get the pair for a folder called Languages,

00:01:42.200 --> 00:01:45.155
which of course we have not yet created.

00:01:45.155 --> 00:01:47.940
So let's create this folder now.

00:01:49.350 --> 00:01:53.680
Okay, this ensures that whenever there is a translation file,

00:01:53.680 --> 00:01:59.350
WordPress will try to look for it inside this directory that we just created.

00:01:59.350 --> 00:02:05.395
Another thing we need to do is add a couple more items to our style.css file.

00:02:05.395 --> 00:02:09.580
Remember, this is our main CSS file and

00:02:09.580 --> 00:02:13.885
is used also to identify the theme within the WordPress Dashboard.

00:02:13.885 --> 00:02:18.620
Let's add another line here called Tax domain.

00:02:19.320 --> 00:02:23.245
Unless type are taxed domain here.

00:02:23.245 --> 00:02:26.605
And as we're editing this file,

00:02:26.605 --> 00:02:31.010
let's take this opportunity to add another important tags,

00:02:31.960 --> 00:02:35.795
license and license URI.

00:02:35.795 --> 00:02:39.140
And we can be sure we have all the requires the eggs.

00:02:39.140 --> 00:02:45.680
If one day we decided to upload this thing to the WordPress repository. Ok, excellent.

00:02:45.680 --> 00:02:51.755
Now what we have for now is an environment that is almost ready for future translations.

00:02:51.755 --> 00:02:56.330
We defined the text domain for our thing and also created

00:02:56.330 --> 00:03:01.985
the directories where in the future the translation files will be placed very well.

00:03:01.985 --> 00:03:06.680
So now we can finally talk about the translation functions that we mentioned,

00:03:06.680 --> 00:03:08.585
the rarity in the last lesson.

00:03:08.585 --> 00:03:11.930
These functions are all over the WordPress code.

00:03:11.930 --> 00:03:15.195
For example, let's open the 2016 theme.

00:03:15.195 --> 00:03:17.785
Let's choose any file, for example,

00:03:17.785 --> 00:03:20.860
this one before all fathers PHP.

00:03:20.860 --> 00:03:27.025
Notice, for example, that we have here Jew areas with messages in English,

00:03:27.025 --> 00:03:30.025
here and here too.

00:03:30.025 --> 00:03:34.615
But it's surrounded by a function that goes almost unnoticed called

00:03:34.615 --> 00:03:39.460
underscore e. Some people don't even realize it's the function.

00:03:39.460 --> 00:03:43.375
We have another example inside this thing function file.

00:03:43.375 --> 00:03:48.460
For example, here in the function that registered the menus.

00:03:48.460 --> 00:03:53.485
Notice that we have here two English texts on menu names.

00:03:53.485 --> 00:03:59.570
And this shrinks our wrapped by an even more discrete function called double underscores.

00:03:59.570 --> 00:04:02.495
That's right, this is the function.

00:04:02.495 --> 00:04:06.184
And from now on we'll be addressing these two functions,

00:04:06.184 --> 00:04:09.830
the underscore e and the double underscores.

00:04:09.830 --> 00:04:11.450
If you look carefully,

00:04:11.450 --> 00:04:14.315
the two functions have a very similar syntax.

00:04:14.315 --> 00:04:17.090
They basically require one,

00:04:17.090 --> 00:04:21.560
the string to be translated and to the theme tax domain.

00:04:21.560 --> 00:04:25.220
The fundamental difference between the two is that the first

00:04:25.220 --> 00:04:29.270
one and the score is used to wrap some HTML code.

00:04:29.270 --> 00:04:33.260
As you see here in the forefathers PHP file.

00:04:33.260 --> 00:04:37.355
Here for example, the string is inside an H1 heading tag.

00:04:37.355 --> 00:04:39.890
And here within a paragraph.

00:04:39.890 --> 00:04:44.180
We're on the scores are used to wrap pure PHP code.

00:04:44.180 --> 00:04:46.580
In the example of the functions file,

00:04:46.580 --> 00:04:49.205
these strings are arguments you an array.

00:04:49.205 --> 00:04:53.240
So plain PHP code, know HTML.

00:04:53.240 --> 00:04:56.360
There are several other functions like this shoe,

00:04:56.360 --> 00:04:58.895
and they are used by WordPress as well.

00:04:58.895 --> 00:05:04.175
But unfortunately, it will not be possible to approach all of them here in the course.

00:05:04.175 --> 00:05:07.580
This shoe, you're radically useful for most cases,

00:05:07.580 --> 00:05:09.710
at least here in our thing.

00:05:09.710 --> 00:05:14.840
Well, you understand the Long Tasks that is ahead of us than yes,

00:05:14.840 --> 00:05:18.980
you have to look for strings that can be translated into another language.

00:05:18.980 --> 00:05:20.615
I'll overall thing.

00:05:20.615 --> 00:05:23.240
Let's write all over our fin.

00:05:23.240 --> 00:05:27.470
Fortunately, despite the amount of files we already have in our thing,

00:05:27.470 --> 00:05:29.435
these files are not that big.

00:05:29.435 --> 00:05:33.650
So you can easily find these snippets of code that we should change.

00:05:33.650 --> 00:05:38.150
I'm going to start just by these two files for all fathers

00:05:38.150 --> 00:05:43.595
PHP and functions dot PHP to files that we also have in our thing.

00:05:43.595 --> 00:05:46.760
I'll show you in detail the first changes I

00:05:46.760 --> 00:05:49.895
made to this two files and the rest of the files,

00:05:49.895 --> 00:05:53.030
you see me changing well at faster speed, ok.

00:05:53.030 --> 00:05:56.150
The idea is to show you the process itself.

00:05:56.150 --> 00:05:58.970
As it is a very repetitive process,

00:05:58.970 --> 00:06:03.230
it is not worth it to spend the whole lesson explaining the same thing.

00:06:03.230 --> 00:06:07.370
So let's start off with the four forwarders PHP file.

00:06:07.370 --> 00:06:10.250
The first string that we can wrap into

00:06:10.250 --> 00:06:14.990
a translation function is this one that is inside the H1 heading tag.

00:06:14.990 --> 00:06:19.350
To do this, I'm going to cut this text here.

00:06:20.680 --> 00:06:24.035
Open the PHP tag here.

00:06:24.035 --> 00:06:27.800
And I'm going to use the underscore if function.

00:06:27.800 --> 00:06:32.060
The first parameter repairs is the translatable string.

00:06:32.060 --> 00:06:35.735
So let's put back the texts that we just cut.

00:06:35.735 --> 00:06:39.485
And the second parameter is are things stacks domain,

00:06:39.485 --> 00:06:42.305
we should always be learned WP.

00:06:42.305 --> 00:06:47.570
So this string here is now ready to be translated into any language in the future.

00:06:47.570 --> 00:06:52.040
Ok, let's do the same thing now for the paragraph just below.

00:06:52.040 --> 00:06:54.380
Well before a very important tip.

00:06:54.380 --> 00:06:57.855
Never include HTML tags inside the string.

00:06:57.855 --> 00:07:02.555
Ok. The translator doesn't always know what these tags mean.

00:07:02.555 --> 00:07:06.050
If you'll live HTML code inside the string Iran,

00:07:06.050 --> 00:07:09.815
the risk of having these HTML tags are removed, are ignored,

00:07:09.815 --> 00:07:15.210
or even worse, they can be modified by the translator, which is not good.

00:07:26.040 --> 00:07:30.980
Let's go on and we have another text here.

00:07:40.620 --> 00:07:44.650
And this last text is no longer HTML,

00:07:44.650 --> 00:07:47.500
but something that is inside the PHP code.

00:07:47.500 --> 00:07:50.815
In this case, we will not use the underscore e function,

00:07:50.815 --> 00:07:53.210
but this time the w.

00:07:54.120 --> 00:08:03.590
So this way, okay,

00:08:03.590 --> 00:08:06.455
we don't have anything else here in this file.

00:08:06.455 --> 00:08:10.550
Let's save it and it's ready at translatable file.

00:08:10.550 --> 00:08:15.125
Let's do the same thing now for the functions file and for the other files,

00:08:15.125 --> 00:08:19.220
I'll speed up the video k. I believe that you will not have any problems to

00:08:19.220 --> 00:08:23.555
understand since you see the same thing being repeated many times.

00:08:23.555 --> 00:08:28.625
It's the very same process we've just seen on the forefathers PHP file.

00:08:28.625 --> 00:08:32.760
So without further ado, let's get started.

00:08:38.590 --> 00:08:43.560
And finally my last question.

00:08:50.050 --> 00:08:52.440
No

00:09:02.880 --> 00:09:05.330
question.

00:09:20.800 --> 00:09:23.160
Okay.

00:10:03.070 --> 00:10:05.400
Okay.

00:10:45.280 --> 00:10:55.140
And what it says.

00:11:36.910 --> 00:11:40.700
And finally, we get to the Less file.

00:11:40.700 --> 00:11:42.410
It was a bit hard work,

00:11:42.410 --> 00:11:45.635
but our whole thing is now fully translatable.

00:11:45.635 --> 00:11:48.530
One tip I can give you is the following.

00:11:48.530 --> 00:11:51.605
Try to make your fin translatable since the beginning of

00:11:51.605 --> 00:11:56.000
K. Tried to translate all the shrinks little by little,

00:11:56.000 --> 00:11:59.420
the width slowly as you create each file,

00:11:59.420 --> 00:12:03.545
I mean, never leaves translations to the end as it did here.

00:12:03.545 --> 00:12:07.265
I just left everything to the end for learning purposes.

00:12:07.265 --> 00:12:09.560
But you don't have to do it like I did.

00:12:09.560 --> 00:12:12.605
Okay, so what's the next step now?

00:12:12.605 --> 00:12:15.215
Well, now that our thing is translatable,

00:12:15.215 --> 00:12:18.320
let's create our translation template file that will

00:12:18.320 --> 00:12:21.605
serve as a basis for other people to translate your theme.

00:12:21.605 --> 00:12:23.705
For that will be for the next lesson.

00:12:23.705 --> 00:12:25.970
Until then piece.

00:12:25.970 --> 00:12:28.100
Well, not so fast summers.

00:12:28.100 --> 00:12:30.335
Hello, sorry guys, put,

00:12:30.335 --> 00:12:33.755
simply forgot to show you the modifications in some of the files,

00:12:33.755 --> 00:12:37.775
namely the customizer dot PHP file and the content files.

00:12:37.775 --> 00:12:40.145
But they are not so different.

00:12:40.145 --> 00:12:42.800
As you see, most of the modifications follow

00:12:42.800 --> 00:12:46.220
the very same pattern you saw in the other files.

00:12:46.220 --> 00:12:48.740
For example, let's take the customizer file.

00:12:48.740 --> 00:12:53.570
Here. We only needed to use the double underscores getText function.

00:12:53.570 --> 00:12:55.355
So it's all the same,

00:12:55.355 --> 00:12:59.880
all the time string to be translated and the text domain.

00:12:59.980 --> 00:13:03.605
The only exception is this string here.

00:13:03.605 --> 00:13:05.360
So let's do it together.

00:13:05.360 --> 00:13:09.185
Notice here that we have HTML code inside the string.

00:13:09.185 --> 00:13:14.135
So in this case, we specifically have a URL inside an anchor tag.

00:13:14.135 --> 00:13:16.925
We can leave this HTML code inside a string,

00:13:16.925 --> 00:13:19.520
but for the translation to work properly,

00:13:19.520 --> 00:13:22.655
we have to use a slightly different formatting.

00:13:22.655 --> 00:13:26.195
First, we drop all this here into a function called

00:13:26.195 --> 00:13:30.725
Sprint F. This is a native PHP function arrived.

00:13:30.725 --> 00:13:32.870
It is used to convert strings.

00:13:32.870 --> 00:13:39.750
So then we place the whole string into the double underscores getText function.

00:13:40.690 --> 00:13:44.660
That forget the text domain, of course.

00:13:44.660 --> 00:13:49.189
Okay, now this print f function accepts two parameters.

00:13:49.189 --> 00:13:52.115
The first one will be this translatable string.

00:13:52.115 --> 00:13:53.975
And for the second parameter,

00:13:53.975 --> 00:13:57.380
we remove the URL because it will have to be passed as

00:13:57.380 --> 00:14:03.365
the second parameter to this sprint f. We add a comma for the second parameter,

00:14:03.365 --> 00:14:08.525
and it is just the URL we removed as a string.

00:14:08.525 --> 00:14:11.134
Now since really moved URL,

00:14:11.134 --> 00:14:14.285
we need to put a kind of wildcard in it's place.

00:14:14.285 --> 00:14:18.395
In PHP, this is called a conversion is specification.

00:14:18.395 --> 00:14:23.435
Since the URL is a string and put a percentage sign and the letter S,

00:14:23.435 --> 00:14:25.265
which means a string.

00:14:25.265 --> 00:14:28.775
So actually, we are doing a sort of conversion here.

00:14:28.775 --> 00:14:30.230
It's a bit complicated,

00:14:30.230 --> 00:14:33.515
but I think now with code spread in more lines,

00:14:33.515 --> 00:14:35.900
it's easier to understand what's going on here.

00:14:35.900 --> 00:14:37.460
Now for the content files,

00:14:37.460 --> 00:14:40.040
the modifications are also very straight-forward.

00:14:40.040 --> 00:14:43.730
Most of them are using the underscore e function.

00:14:43.730 --> 00:14:49.565
So the only case wishes some more difficult is this one here of the tags.

00:14:49.565 --> 00:14:52.220
This is how you're going to wrap this string here.

00:14:52.220 --> 00:14:54.530
Tags. All the files have

00:14:54.530 --> 00:14:59.780
the same format except for the content featured and secondary files.

00:14:59.780 --> 00:15:04.550
Here we had a span along with this string tags.

00:15:04.550 --> 00:15:07.160
So this is how you're gonna formatted.

00:15:07.160 --> 00:15:08.660
So let's set guys,

00:15:08.660 --> 00:15:11.345
sorry once again for the mistake I made.

00:15:11.345 --> 00:15:13.745
But one good thing is that the material

00:15:13.745 --> 00:15:16.340
available for download hetero EDI being corrected.

00:15:16.340 --> 00:15:19.890
Okay, so see you in the next lesson.
