1
00:00:07,970 --> 00:00:10,320
Hello this is Carol from frigs example dot com.

2
00:00:10,340 --> 00:00:15,440
And welcome to The Twenty-Seventh tutorial on ODC rhythmic training for beginners and this tutorial

3
00:00:15,440 --> 00:00:21,890
we're going to continue programming our very first algorithmic trading system in the last tutorial we

4
00:00:22,760 --> 00:00:31,640
got to a stage where we had already implemented all the time checks and actually created the module

5
00:00:31,640 --> 00:00:36,840
that is responsible for sending orders and both buy and sell.

6
00:00:36,860 --> 00:00:45,020
So here in front of you you can see the results of testing our system with the strategy tests over a

7
00:00:45,020 --> 00:00:45,880
couple of days.

8
00:00:45,890 --> 00:00:52,040
And as you can see all of the orders are being opened at 9:00 which is correct.

9
00:00:52,250 --> 00:01:00,080
And we see both buy and sell orders but what you can also see is that sometimes there are to buy orders

10
00:01:00,080 --> 00:01:02,880
at the same time or to sell orders at the same time.

11
00:01:02,890 --> 00:01:07,520
So and that is something that's not prescribed by a training strategy.

12
00:01:07,550 --> 00:01:09,680
Let's quickly jump back to the Paul point.

13
00:01:09,690 --> 00:01:14,220
And so this is the change strategy.

14
00:01:14,270 --> 00:01:16,160
This is a high level overview.

15
00:01:16,220 --> 00:01:21,080
We've done the blue part when we checked the time condition and we've done the green part.

16
00:01:21,080 --> 00:01:25,420
Most of the green parks have for the filters but we haven't done the red part yet.

17
00:01:25,490 --> 00:01:28,800
So go into the detailed.

18
00:01:29,420 --> 00:01:36,680
We have completed this completed this green part except for the Amay filters but we haven't done the

19
00:01:36,680 --> 00:01:42,400
red part which is actually responsible for checking if there are any orders existing orders.

20
00:01:42,410 --> 00:01:50,630
And then first closing them and then only proceeding for further to the green part where the more orders

21
00:01:50,630 --> 00:01:51,480
are opened.

22
00:01:51,740 --> 00:01:59,330
So today we're going to focus on this rarebit and we're going to see if any orders are opened and then

23
00:01:59,330 --> 00:02:03,580
closed them first before we allow algorithm to open more.

24
00:02:03,580 --> 00:02:07,980
So we will not see these situations at the end of this tutorial.

25
00:02:08,270 --> 00:02:19,070
So let's go to kill four and this is our code which we will be building upon if we go back to the diagram

26
00:02:19,130 --> 00:02:24,870
we can see that the bread bit comes into play right after we have changed the flag to false.

27
00:02:25,160 --> 00:02:29,480
And so we will be coding over here software and deflect falls.

28
00:02:29,480 --> 00:02:31,170
We will be adding a bit.

29
00:02:31,260 --> 00:02:35,990
So the first part of the red bit is we need to select to order using or to select So we're going to

30
00:02:36,380 --> 00:02:38,100
type that in.

31
00:02:38,120 --> 00:02:40,390
We do have the ticket number already.

32
00:02:40,470 --> 00:02:48,890
So it is going to is that we had we saved it over here and we're going to select by ticket as we did

33
00:02:48,890 --> 00:02:52,410
in the associated tutorial.

34
00:02:52,970 --> 00:02:57,540
Then we're going to need to check if the selection was successful.

35
00:02:57,560 --> 00:03:05,570
For that we need a boolean variable result and we're going to assign a result the return value of order

36
00:03:05,600 --> 00:03:10,620
select and then we're going to check if result is true.

37
00:03:11,090 --> 00:03:19,430
If result is true if result is not true then we need not do you think and we don't even need an else

38
00:03:19,440 --> 00:03:30,260
in this case because because all of the red segments of all this red segment leads into this one diamond

39
00:03:30,290 --> 00:03:36,320
or all of them go this way we don't have to put an else because we can if this is not correct and we

40
00:03:36,320 --> 00:03:44,320
just don't execute this bid and we let the program play out and continue working further down the code.

41
00:03:44,330 --> 00:03:46,920
So we don't need an else in this case.

42
00:03:46,970 --> 00:03:52,690
So if the result is true what do we do we need to check if the order close time is zero.

43
00:03:52,850 --> 00:03:59,540
And if you recall from a couple of tutorials back when we talked about or to select men I mentioned

44
00:03:59,540 --> 00:04:07,220
that checking the order close time is the key to finding out if an order has been closed or not kill

45
00:04:07,310 --> 00:04:07,860
for.

46
00:04:08,030 --> 00:04:18,380
And so if an order Clow if an orders close time is not zero then the order has been closed and we go

47
00:04:18,380 --> 00:04:19,010
this way.

48
00:04:19,010 --> 00:04:25,100
That means that the trader for terminal has assigned a time a close time to that order and that means

49
00:04:25,100 --> 00:04:27,800
it's already closed and we don't need to do this part.

50
00:04:27,800 --> 00:04:33,680
However if the order close time is actually equal to zero then we do need to close the order because

51
00:04:33,680 --> 00:04:35,840
it's still open.

52
00:04:36,050 --> 00:04:41,120
So we're going to go back to the code and here we're going to implement another check and the check

53
00:04:41,120 --> 00:04:45,630
will be first of course we have to.

54
00:04:45,770 --> 00:04:46,370
That's right.

55
00:04:46,370 --> 00:04:52,310
We've already selected the order and now we're going to check we're going to check if order closed time

56
00:04:53,540 --> 00:04:55,000
is equal to zero.

57
00:04:55,010 --> 00:05:00,510
So if we're to close time is not equal to zero we don't need an else because we will.

58
00:05:00,590 --> 00:05:06,060
That means that this part will not be executed on the program we'll just continue naturally through

59
00:05:06,060 --> 00:05:11,470
to the green bit where it will send the buy and sell orders if conditions are met.

60
00:05:11,700 --> 00:05:17,100
However if we're close time is equal to zero that means the order has not been closed yet and we want

61
00:05:17,100 --> 00:05:17,720
to close it.

62
00:05:17,760 --> 00:05:23,540
And the way we do that is we use the order close function and the ticket.

63
00:05:23,550 --> 00:05:25,820
We have the ticket number lots.

64
00:05:25,830 --> 00:05:27,640
So how many slots do we want to close.

65
00:05:27,660 --> 00:05:32,880
Well we want to close the same amount of loss that we opened we want to close or complete and we see

66
00:05:32,880 --> 00:05:37,470
here that we used the last variable to open any order.

67
00:05:37,470 --> 00:05:40,490
So we're going to use the service to close that as well.

68
00:05:40,530 --> 00:05:48,090
The price for a buy order it would be the bid price and for sell order it would be the ask price.

69
00:05:48,100 --> 00:05:57,690
However we also know that the order is a sneaky way of finding the price really quickly by using the

70
00:05:57,690 --> 00:06:06,180
order close price function and we discussed this in the tutorial about water select and force the fish

71
00:06:06,190 --> 00:06:08,450
we're going to use 10.

72
00:06:08,520 --> 00:06:14,790
So that's how we close our order are we going to need to implement a failsafe check which is described

73
00:06:14,790 --> 00:06:19,860
here and we've done this so many times already so we just should be pretty straightforward.

74
00:06:19,860 --> 00:06:26,130
Now we're going to add a new boolean variable which is result to rest two and recoiling trips to because

75
00:06:26,130 --> 00:06:31,230
we already have a variable and we don't want to repeat the names of variables.

76
00:06:31,280 --> 00:06:36,560
So risk 2 is equal to or to close the return value.

77
00:06:36,570 --> 00:06:47,640
And then if razz two equals falls then we want to tell the trader that something is wrong and we had

78
00:06:47,700 --> 00:06:57,810
we encountered an error closing order number and then we'll give him the order number at the end of

79
00:06:57,810 --> 00:06:58,870
the alert.

80
00:06:59,340 --> 00:07:02,610
So there we go that that should do it.

81
00:07:02,860 --> 00:07:09,670
If we look back we've we have done that that that that and that we've done all of the red bit and it

82
00:07:09,670 --> 00:07:16,320
was pretty pretty straightforward because we had that diagram compile no errors or warnings was to go

83
00:07:16,320 --> 00:07:19,030
back to the terminal.

84
00:07:19,230 --> 00:07:23,930
So we will stop this from executing.

85
00:07:23,940 --> 00:07:28,340
And I'm just going to compile that again just in case.

86
00:07:28,440 --> 00:07:35,520
And now we're going to execute it again but this time we should not see these scenarios.

87
00:07:35,610 --> 00:07:39,810
We should always see one order at maximum.

88
00:07:39,810 --> 00:07:47,130
So we're going to start play I'm going to change the properties not to show the grid but to show that

89
00:07:47,130 --> 00:07:51,660
light period separators as you can see one order has already been opened.

90
00:07:51,660 --> 00:07:57,150
It's a buy order and see how this plays out.

91
00:07:57,540 --> 00:08:01,600
I might just switch to the line graphs it's easier to understand.

92
00:08:01,830 --> 00:08:08,130
So now another order should be open because we're nearing 9:00 and as you can see the previous order

93
00:08:08,130 --> 00:08:11,540
was closed then and the order was opened which is good.

94
00:08:12,060 --> 00:08:16,100
And the new order is actually already closed because it reaches take profit.

95
00:08:16,170 --> 00:08:19,800
So now we're going to we're going into a new day.

96
00:08:19,800 --> 00:08:22,690
Let's see what happens here.

97
00:08:22,770 --> 00:08:23,730
OK.

98
00:08:23,850 --> 00:08:31,800
Now that order has been opened it's a sell order and now we're moving on to the end of the day that

99
00:08:31,800 --> 00:08:39,950
order still hasn't been closed and we're nearing 9:00 so let's see what happens as you can see the order

100
00:08:39,950 --> 00:08:46,230
was closed then and your order was opened and now the order has closed as well.

101
00:08:46,280 --> 00:08:56,360
So what what we've done here is we have successfully implemented the red block which makes sure make

102
00:08:56,360 --> 00:09:01,800
sure that there is only one order at any given point in time.

103
00:09:02,060 --> 00:09:09,050
Let's just out of interest of course our training strategy is not completely implemented yet but because

104
00:09:09,170 --> 00:09:17,570
we still have to work on this part with the MF filter but let's see what happens if we let this test

105
00:09:17,570 --> 00:09:21,300
go through to the end and see what results we will get.

106
00:09:21,860 --> 00:09:26,260
So as you can see there was a lot of orders.

107
00:09:26,270 --> 00:09:35,010
It's been the test ran from January 2014 until mid July 2014 and there have been buy and sell orders.

108
00:09:35,030 --> 00:09:43,360
And I'll just zoom in maybe a little bit and every single time the strategy has closed orders.

109
00:09:43,370 --> 00:09:45,730
If you had to be open.

110
00:09:46,040 --> 00:09:51,960
So that set the result was to have a look at the results so if we go into Graaff sort we can see.

111
00:09:51,980 --> 00:10:01,100
So first when there's a bit of a drawdown but then it went substantially went up and then it just held

112
00:10:01,100 --> 00:10:09,140
at that level so not not a bad result from $10000 that went up to somewhere around 11 and a half thousand

113
00:10:09,140 --> 00:10:12,140
dollars and half a year which is pretty good.

114
00:10:12,140 --> 00:10:18,880
However please bear in mind that our strategy is not completely implemented yet and we still have to

115
00:10:18,940 --> 00:10:26,170
add moving averages checks and that's that's when that's when we'll be finished.

116
00:10:26,300 --> 00:10:33,950
However in the next tutorial we will talk a bit more in detail about testing our strategy and in particular

117
00:10:34,280 --> 00:10:35,110
we'll have.

118
00:10:35,390 --> 00:10:43,250
And a short overview of how to use the strategy tester and how to quickly understand what the optimal

119
00:10:43,250 --> 00:10:50,070
parameters may be and we'll be talking about that and off to that tutorial.

120
00:10:50,090 --> 00:10:57,600
We will finalize our strategy by adding the moving average indicators and it we'll see how that can

121
00:10:57,600 --> 00:11:01,490
actually improve the results.

122
00:11:01,500 --> 00:11:03,000
So there we go.

123
00:11:03,000 --> 00:11:05,480
We're nearly nearly there.

124
00:11:05,490 --> 00:11:07,550
I hope you're enjoying the process.

125
00:11:07,680 --> 00:11:10,270
And until next I'm happy coding.
