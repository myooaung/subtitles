WEBVTT
1
00:00:07.830 --> 00:00:10.460
Hello this is Carol from Fargo dot com.

2
00:00:10.470 --> 00:00:19.260
And this is tutorial number six in our series of M Cuil for tutorials for beginners.

3
00:00:19.380 --> 00:00:21.320
Today's going to be a short one.

4
00:00:21.340 --> 00:00:25.830
And we're just going to talk quickly about multiline comments.

5
00:00:25.950 --> 00:00:31.680
Sorry if we're already familiar with single line comments it's basically a double slash at the start

6
00:00:31.680 --> 00:00:32.530
of a line.

7
00:00:32.700 --> 00:00:41.520
And here I have a simple example where this one line is coming out and what the script does in this

8
00:00:43.650 --> 00:00:54.180
version is it multiplies two values 15 and 10 and puts the result into this output variable and prints

9
00:00:54.230 --> 00:00:54.540
it out.

10
00:00:54.540 --> 00:00:56.880
So let's have a look at how that works.

11
00:00:56.910 --> 00:01:02.480
Paul and I'll just start it again.

12
00:01:03.150 --> 00:01:03.730
All right.

13
00:01:03.870 --> 00:01:07.760
So tutorial 6 150.

14
00:01:08.060 --> 00:01:09.540
Exactly right.

15
00:01:09.540 --> 00:01:11.400
And now go back.

16
00:01:11.860 --> 00:01:22.010
Now if we uncover this line it will actually override the result of this line.

17
00:01:22.010 --> 00:01:25.120
So here output will be equal to 150.

18
00:01:25.370 --> 00:01:37.070
But then this line will add up value wanting to get twenty five and place that value into output overwriting

19
00:01:37.070 --> 00:01:38.090
the previous value.

20
00:01:38.090 --> 00:01:42.060
So now output will be only will be equal to 25.

21
00:01:42.260 --> 00:01:51.390
And that is regardless of whether we comment this line or not the result will always be the same.

22
00:01:52.100 --> 00:01:58.100
So let's compile go to the terminal around 25 and

23
00:02:00.740 --> 00:02:06.560
the only difference is that coming in this line on make is actually just the program will perform one

24
00:02:06.560 --> 00:02:11.200
operation last but otherwise the result will be the same.

25
00:02:11.330 --> 00:02:15.990
So say for example we want to comment on all of these lines this actually this whole block.

26
00:02:16.010 --> 00:02:26.540
And instead of doing the performing these populations we want to just say Hello there.

27
00:02:26.540 --> 00:02:32.150
One option to achieve that would be to comment out each line individually.

28
00:02:32.330 --> 00:02:39.740
But that would take some time and wouldn't be as effective as a monthly income.

29
00:02:39.900 --> 00:02:49.890
So I'm cool for it to comment on Whole blocks of code very quickly and to do that you need to use a

30
00:02:49.890 --> 00:02:51.240
slash in the stock.

31
00:02:51.480 --> 00:02:58.860
So that begins the multi-line comment and then a star in a flash and Lamott one comment.

32
00:02:58.950 --> 00:03:04.310
So basically this whole block is not commented commented.

33
00:03:04.350 --> 00:03:13.690
And that's why it's great and all the program will do is it will just print Hello there on the screen.

34
00:03:13.770 --> 00:03:15.420
So let's have a look at that.

35
00:03:15.800 --> 00:03:20.070
Let's compile termino.

36
00:03:20.240 --> 00:03:25.520
So there is these messages left over from the previous runs of the script.

37
00:03:25.520 --> 00:03:29.880
And this is the new one just saying hello there.

38
00:03:30.250 --> 00:03:39.120
And that's how you use multi-line comments and then kill for that brings us to the end of today's tutorial.

39
00:03:39.450 --> 00:03:45.450
More information and tutorials are available on for exposure dot com.

40
00:03:45.450 --> 00:03:51.090
I really hope you can join me for the future tutorials on the web.

41
00:03:51.370 --> 00:03:52.380
Always happy.
