WEBVTT
1
00:00:07.640 --> 00:00:14.390
Hello this is Carol from frogs dot com and welcome to tutorial number nine in our series of em kill

2
00:00:14.390 --> 00:00:17.510
for tutorials for beginners.

3
00:00:17.510 --> 00:00:23.180
And today we're going to be expanding on the topic by which we talked last time which was the if statement

4
00:00:23.960 --> 00:00:28.180
today we're going to introduce the else statement in front of me.

5
00:00:28.180 --> 00:00:36.830
I have the code that we used in the previous Tauriel and I'm going to delete the first bit because it's

6
00:00:36.830 --> 00:00:44.720
no longer relevant and I'll just leave this piece of code that we finished off with and let's compile

7
00:00:44.760 --> 00:00:45.380
that.

8
00:00:45.470 --> 00:00:54.510
And what as we as we can recall what it does is first it prints out the current bid price so the bid

9
00:00:54.530 --> 00:01:02.720
price of the charge to which I touch the script and then it checks if this bid price is less than one

10
00:01:02.720 --> 00:01:05.290
point thirty seven nine hundred.

11
00:01:05.540 --> 00:01:10.980
And if that is the case then it prints out an alert saying the price is below 1.

12
00:01:10.990 --> 00:01:13.780
That is one point three thousand nine hundred.

13
00:01:14.690 --> 00:01:18.270
So let's give that a go see how it works.

14
00:01:18.410 --> 00:01:28.710
Scripps Channel 9 there's a price 1 3 7 5 1 over there and the price is below one point thirty seven

15
00:01:28.710 --> 00:01:30.930
nine hundred which is correct.

16
00:01:30.930 --> 00:01:34.260
It is below this red line.

17
00:01:34.400 --> 00:01:40.860
Now we we're going to go back to the code and the first thing we'll do is in order to give ourselves

18
00:01:40.860 --> 00:01:46.050
a bit more control room for control we'll add another variable called Double

19
00:01:49.050 --> 00:01:50.160
double level

20
00:01:52.980 --> 00:01:57.690
and we'll give it the value of one point thirty seven nine hundred.

21
00:01:57.690 --> 00:02:07.710
So now instead of specifying the level in our code as a number we can always change the level here and

22
00:02:07.710 --> 00:02:11.270
then use this variable going forward.

23
00:02:11.720 --> 00:02:14.450
So that that's that's really pretty straightforward.

24
00:02:14.970 --> 00:02:21.150
Basically it's the same check but now is comparing to the variable instead of comparing to the actual

25
00:02:21.150 --> 00:02:21.820
number.

26
00:02:21.980 --> 00:02:29.250
But the result should be the same as long as this we use this number here in our Lord.

27
00:02:29.250 --> 00:02:35.710
We're also going to replace this with a string which consists of two parts.

28
00:02:35.900 --> 00:02:39.060
The price is below plus level.

29
00:02:39.390 --> 00:02:47.860
And as we remember when you type unstring here to convert to explicitly convert it to strict.

30
00:02:47.870 --> 00:02:48.320
All right.

31
00:02:48.320 --> 00:02:59.280
So now we can compound that now works and the result should be the same the same.

32
00:02:59.380 --> 00:03:01.770
The down differences that the zeros got cut off.

33
00:03:01.780 --> 00:03:10.150
And that's because that is how our doubles get converted to strings explicitly there where there are

34
00:03:10.150 --> 00:03:14.670
ways around that but it's not important at this stage.

35
00:03:14.980 --> 00:03:26.080
So what we want to do next is we want to find out what if our strategy doesn't only do something when

36
00:03:26.080 --> 00:03:28.900
the price is below this level.

37
00:03:29.020 --> 00:03:34.570
But what if our strategy also does something when the price of a box when the price goes back over here

38
00:03:35.070 --> 00:03:42.280
in case like say something happens and the price shifts back back to level what do we do if we want

39
00:03:42.460 --> 00:03:49.670
the program to perform a certain set of actions above this level.

40
00:03:49.690 --> 00:03:56.650
So let's go back to the code here if we can.

41
00:03:56.650 --> 00:04:06.070
The simple answer would be to just copy this if block and basically just change this check and check

42
00:04:06.070 --> 00:04:07.360
if the opposite is true.

43
00:04:07.360 --> 00:04:14.190
So if bid is above level then here we would try something like above this level.

44
00:04:15.960 --> 00:04:29.260
However that is not the best way to do it and kill for has a very good tool which allows you to perform

45
00:04:30.700 --> 00:04:41.320
this check much much more efficiently and keep your code really well structured.

46
00:04:41.330 --> 00:04:48.580
So that tool is called else what we can do is instead of performing the second check

47
00:04:52.810 --> 00:04:56.280
here after the first if we can type in us.

48
00:04:56.410 --> 00:04:57.420
No Brian No no.

49
00:04:57.420 --> 00:04:57.830
All right.

50
00:04:57.850 --> 00:05:06.790
Just of brackets and inside this else we will write the code that we want to do if the opposite is correct.

51
00:05:06.790 --> 00:05:15.330
So basically what this means is that if this statement if this expression is true then this code will

52
00:05:15.340 --> 00:05:16.230
be executed.

53
00:05:16.410 --> 00:05:20.310
If this expression is false then this code will be executed.

54
00:05:20.520 --> 00:05:25.390
So basically it's kill for is allowing you to branch out your code.

55
00:05:25.410 --> 00:05:33.960
And based on this expression only perform one of the actions this one or this one it it'll be better

56
00:05:33.960 --> 00:05:47.430
to illustrate if we replace this text with prices below street level and then we'll have the text saying

57
00:05:50.680 --> 00:05:51.040
so

58
00:05:54.340 --> 00:06:04.350
dash sell and I will say opposite So if the price is off or not below they really want to buy it just

59
00:06:04.350 --> 00:06:06.080
to change it.

60
00:06:08.690 --> 00:06:09.020
All right.

61
00:06:09.020 --> 00:06:10.820
So let's see how that works.

62
00:06:13.200 --> 00:06:19.770
Dr. Alon so you can see that that's a bit pricey over there.

63
00:06:19.780 --> 00:06:28.990
One point thirty seven point five and the price is below our resistance level so that and the program

64
00:06:28.990 --> 00:06:34.960
is telling us to sell or the program can be actually selling on our behalf.

65
00:06:34.980 --> 00:06:38.570
But we'll learn how to do that later.

66
00:06:38.920 --> 00:06:45.220
And as you can see the other part of the code this part was not executed so there is no message telling

67
00:06:45.220 --> 00:06:48.470
us to buy it go back to the program.

68
00:06:48.490 --> 00:06:55.490
And now what if we change this level from a from one point thirty seven nine hundred to something over

69
00:06:55.510 --> 00:07:03.350
here one point thirty six nine hundred for example.

70
00:07:03.610 --> 00:07:11.770
So that is it does look like a support level because the price that balance off here and then bounced

71
00:07:11.770 --> 00:07:14.170
off bounced off that here as well.

72
00:07:14.200 --> 00:07:18.970
So it is it does look at that level.

73
00:07:19.180 --> 00:07:28.430
Let's go back to our program and change this to one point thirty six hundred compile that and see how

74
00:07:28.430 --> 00:07:29.070
that works.

75
00:07:29.080 --> 00:07:37.460
So in this case the price is above this level so this would be false.

76
00:07:37.490 --> 00:07:43.700
This shouldn't get executed but this should get exited and we should see a message saying process above

77
00:07:44.040 --> 00:07:45.250
that we should buy.

78
00:07:45.650 --> 00:07:49.960
So let's go back and launched it online.

79
00:07:50.080 --> 00:07:57.890
There we go so that's a big price over there and here is saying here you get a message saying that the

80
00:07:57.890 --> 00:08:03.010
price is above one point three six nine and so you shouldn't buy.

81
00:08:03.080 --> 00:08:06.420
So that means that prices here.

82
00:08:06.870 --> 00:08:08.150
So that's basically it.

83
00:08:08.180 --> 00:08:17.960
That's how our em kill for allows you to branch out your programs and perform different to different

84
00:08:18.590 --> 00:08:20.960
blocks of code.

85
00:08:21.170 --> 00:08:31.250
In cases where in two cases whether the condition is true or false and that is also very useful especially

86
00:08:31.550 --> 00:08:41.060
on the foreign exchange market where usually either buy or sell and those are most of the time to actual

87
00:08:41.330 --> 00:08:45.290
actions required opposite conditions.

88
00:08:45.590 --> 00:08:53.720
Hope you found this turtle useful and the source code and more information are available on for X-posts

89
00:08:53.750 --> 00:08:54.890
dot com.

90
00:08:55.220 --> 00:08:58.720
And I hope you can join me for the next tutorial to them.

91
00:08:58.920 --> 00:08:59.240
Including.
