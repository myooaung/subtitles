WEBVTT
1
00:00:07.830 --> 00:00:15.930
Hello this is curial from Fricks boat dot com and this is our fifth tutorial in the series of em kill

2
00:00:15.930 --> 00:00:18.530
for tutorials for complete beginners.

3
00:00:18.930 --> 00:00:26.490
Last time we talked about logical expressions and boolean variables and that information is going to

4
00:00:26.490 --> 00:00:31.660
be very handy to us today because we're going to be talking about the While loop.

5
00:00:32.010 --> 00:00:36.530
So what is the while loop and what is it consistent.

6
00:00:36.800 --> 00:00:42.540
Well loop consists of four three parts.

7
00:00:42.540 --> 00:00:52.350
So it's the word while then followed by normal brackets within which is a logical expression which we'll

8
00:00:52.350 --> 00:00:53.920
call ABC or now.

9
00:00:54.150 --> 00:01:03.160
And then there are curly brackets within which is the actual body of the While loop.

10
00:01:03.360 --> 00:01:17.160
The way this structure works is when the program moving from the top of the code gets to this line it

11
00:01:17.160 --> 00:01:20.240
will check if this expression is actually true.

12
00:01:20.370 --> 00:01:31.830
So check if the expression is true then the program will execute the code which is located in the curly

13
00:01:31.830 --> 00:01:38.100
brackets and after executing the body of the while loop the program will move back to the start of the

14
00:01:38.100 --> 00:01:45.810
while loop and it will once again check if this expression is true.

15
00:01:46.450 --> 00:01:53.050
If it is true then the program will execute the body one more time after which it will go back to the

16
00:01:53.050 --> 00:01:55.850
start of the loop and it will check the expression again.

17
00:01:56.230 --> 00:02:02.070
And so every time the expression is true the body of the loop will be executed.

18
00:02:02.080 --> 00:02:09.430
This will continue happening until the expression is found to be false as soon as the expression is

19
00:02:09.430 --> 00:02:11.190
false.

20
00:02:11.500 --> 00:02:17.880
The program will ignore the body of the while loop and will move on to exit.

21
00:02:17.890 --> 00:02:21.510
Getting any code that follows.

22
00:02:21.700 --> 00:02:24.620
So that's basically how the world works.

23
00:02:24.820 --> 00:02:28.840
Let's look at a simple example.

24
00:02:28.960 --> 00:02:33.450
We're going to we're going to type in and alert.

25
00:02:33.490 --> 00:02:43.300
We're going to say hello and here we're going to just put in a false statement.

26
00:02:44.000 --> 00:02:55.620
And above just for controlling purposes we'll put in another alert and say start all

27
00:02:59.100 --> 00:03:02.360
of these empty lines.

28
00:03:02.590 --> 00:03:02.860
All right.

29
00:03:02.860 --> 00:03:13.740
So we can compile that go to the mayor for platform and we'll see what we get tore far by as you can

30
00:03:13.740 --> 00:03:19.790
see we only get one message which says start up script we do not see a message saying hello.

31
00:03:19.930 --> 00:03:21.900
And why is that.

32
00:03:22.020 --> 00:03:23.560
Well that's simple.

33
00:03:23.660 --> 00:03:33.240
It's because after executing this alert program gets to the While loop checks the expression expression

34
00:03:33.240 --> 00:03:33.980
is false.

35
00:03:34.020 --> 00:03:43.150
So it doesn't execute the body completely ignores it and moves on to the rest of the program which in

36
00:03:43.150 --> 00:03:44.300
our case it's nothing.

37
00:03:44.310 --> 00:03:48.450
And it just basically completes the script.

38
00:03:48.720 --> 00:03:54.120
So what what else we can do is we can replace a false with true.

39
00:03:54.180 --> 00:04:01.810
And in this case because this expression will always be true the program will get stuck.

40
00:04:01.830 --> 00:04:05.070
Executing the body of the loop on and on

41
00:04:07.800 --> 00:04:13.380
forever basically and we'll get what is called an infinite loop.

42
00:04:13.380 --> 00:04:20.450
That means that program will get stuck here and that will cause meto try to hang on.

43
00:04:20.610 --> 00:04:21.830
So we don't want that.

44
00:04:21.840 --> 00:04:26.040
And that's why we're not going to compile an execute description.

45
00:04:26.700 --> 00:04:31.470
But what we will do is we'll look at a more practical option.

46
00:04:31.960 --> 00:04:34.710
It's just a variable called Collender.

47
00:04:34.750 --> 00:04:41.390
I will set it to one initially and then here we'll check if counter is less than three.

48
00:04:41.850 --> 00:04:44.710
And inside the lurk and say hello.

49
00:04:44.730 --> 00:04:47.940
We'll just print out the value of color.

50
00:04:48.370 --> 00:04:55.580
And after that we will have a statement that increases color by 1.

51
00:04:55.620 --> 00:05:02.790
So this statement basically takes the old value of color adds one and assigns that to common meaning

52
00:05:03.590 --> 00:05:07.670
and base a simple increment of counter.

53
00:05:07.710 --> 00:05:16.530
So what will happen in this version of the program is of course we'll get a message saying start script

54
00:05:17.340 --> 00:05:26.240
then the program will create a variable called Color and assign the value of 1 to that variable.

55
00:05:26.250 --> 00:05:32.050
Then the probe will get here will check if one is less than three That's true.

56
00:05:32.130 --> 00:05:41.370
It will print out one then said color equal to one plus one sales increment about the value of quarter

57
00:05:41.400 --> 00:05:43.650
and can all be equal to 2.

58
00:05:43.680 --> 00:05:49.080
Then after executing the body of the while loop the trigger will go back to the start of the while loop

59
00:05:49.350 --> 00:05:52.200
it will check if two this time is less than three.

60
00:05:52.200 --> 00:05:53.240
That's true.

61
00:05:53.610 --> 00:06:00.030
I will print out two and then it will increase color by one more making it three.

62
00:06:00.050 --> 00:06:04.710
We'll go back to the start of the while loop it will check if three is less than three.

63
00:06:04.860 --> 00:06:10.710
That is false and therefore the program will ignore the body of the loop and we'll move on to executing

64
00:06:10.710 --> 00:06:15.290
any code that follows which is going to add some control code here as well.

65
00:06:15.300 --> 00:06:24.670
We'll say Luke has finished and let's compiled that.

66
00:06:24.730 --> 00:06:33.010
No mistakes errors and that's what we get in trade for so start off script 1.

67
00:06:33.020 --> 00:06:38.850
So that's the first iteration of the loop to second iteration of the loop and then that's it.

68
00:06:38.870 --> 00:06:42.980
Loop has finished so soon as the variable becomes 3.

69
00:06:43.420 --> 00:06:48.730
The body of the look at second and program moves on to executing this last line.

70
00:06:48.830 --> 00:06:52.490
So that brings us to the end of this tutorial.

71
00:06:52.520 --> 00:06:53.750
I hope you found

72
00:06:56.780 --> 00:07:05.810
this information useful and hopefully you can work a little bit with this wild loop and make some versions

73
00:07:05.810 --> 00:07:13.460
of your own more information and tutorials are available on for export dot com.

74
00:07:13.610 --> 00:07:18.320
And I hope you will join me again for the next tutorial.

75
00:07:18.320 --> 00:07:19.640
And until then happy coding.
