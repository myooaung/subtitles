1
1

00:00:00,670  -->  00:00:01,700
<v Instructor>Hello and welcome to this</v>
2

2

00:00:01,700  -->  00:00:03,070
Python tutorial.
3

3

00:00:03,070  -->  00:00:05,030
Alright so now, time for the exciting steps.
4

4

00:00:05,030  -->  00:00:06,860
We are going to create the architecture of
5

5

00:00:06,860  -->  00:00:09,873
the newel network, that is the architecture of the RBM.
6

6

00:00:10,763  -->  00:00:11,880
So we will choose the number of hidden notes,
7

7

00:00:11,880  -->  00:00:14,790
and mostly, we will build the newel network
8

8

00:00:14,790  -->  00:00:16,730
just like how it works, that is,
9

9

00:00:16,730  -->  00:00:20,390
we're gonna make this probability graphical model.
10

10

00:00:20,390  -->  00:00:23,250
Because, let's remember, a restricted Boltzmann machine
11

11

00:00:23,250  -->  00:00:25,873
is a probability graphical model.
12

12

00:00:25,873  -->  00:00:29,550
Alright, and to build this probability graphical model,
13

13

00:00:29,550  -->  00:00:31,730
we will do it through a class.
14

14

00:00:31,730  -->  00:00:34,540
Classes are the most practical way to build,
15

15

00:00:34,540  -->  00:00:36,730
to create anything in Python.
16

16

00:00:36,730  -->  00:00:39,290
If you want to create a house or a self-driving car
17

17

00:00:39,290  -->  00:00:41,500
you would use a class because basically,
18

18

00:00:41,500  -->  00:00:42,470
what is a class?
19

19

00:00:42,470  -->  00:00:45,220
A class is an ensemble of instructions.
20

20

00:00:45,220  -->  00:00:47,360
It's the model of something we want to build.
21

21

00:00:47,360  -->  00:00:49,553
So, for example: if we want to build a house,
22

22

00:00:49,553  -->  00:00:51,390
well, we need a model home;
23

23

00:00:51,390  -->  00:00:54,200
we need some instructions on how to build a house
24

24

00:00:54,200  -->  00:00:56,080
and that's what the class will contain.
25

25

00:00:56,080  -->  00:00:59,560
So, the guy that will make the class will be the architect.
26

26

00:00:59,560  -->  00:01:02,600
Because it will define how the house should be built.
27

27

00:01:02,600  -->  00:01:03,980
And then once the class is made
28

28

00:01:03,980  -->  00:01:06,560
we can create some objects of this class.
29

29

00:01:06,560  -->  00:01:09,400
And the objects are nothing else than the houses.
30

30

00:01:09,400  -->  00:01:12,320
And now that's exactly the same for RBM model.
31

31

00:01:12,320  -->  00:01:15,080
We are gonna be the architect of this model.
32

32

00:01:15,080  -->  00:01:16,850
We need to make a class that will define
33

33

00:01:16,850  -->  00:01:19,240
how the RBM should be built.
34

34

00:01:19,240  -->  00:01:21,860
And so, in this class, we're gonna give all the info
35

35

00:01:21,860  -->  00:01:24,090
that we need to build an RBM.
36

36

00:01:24,090  -->  00:01:25,750
And so, what are these infos?
37

37

00:01:25,750  -->  00:01:28,000
Well, first that's the number of hidden notes,
38

38

00:01:28,000  -->  00:01:29,450
then that's the weights.
39

39

00:01:29,450  -->  00:01:32,280
The weights for the probability of the visible note,
40

40

00:01:32,280  -->  00:01:33,900
given the hidden note.
41

41

00:01:33,900  -->  00:01:36,002
Then the bias for the same probability
42

42

00:01:36,002  -->  00:01:38,056
and also, the bias for the probability
43

43

00:01:38,056  -->  00:01:40,780
of the visible note given the hidden note.
44

44

00:01:40,780  -->  00:01:43,410
So these are first parameters that we need
45

45

00:01:43,410  -->  00:01:45,030
to initialize the RBM.
46

46

00:01:45,030  -->  00:01:47,190
And so, we will put all this in the first function
47

47

00:01:47,190  -->  00:01:49,410
called "_init_", but then in a class
48

48

00:01:49,410  -->  00:01:51,620
we can add more things besides
49

49

00:01:51,620  -->  00:01:53,550
the parameters that define the model.
50

50

00:01:53,550  -->  00:01:56,640
We can also add some functions just as an architect
51

51

00:01:56,640  -->  00:01:59,470
can add tools when making the model of a house.
52

52

00:01:59,470  -->  00:02:01,890
Or if you wanna have a more intuitive example,
53

53

00:02:01,890  -->  00:02:04,030
well, if we want to make a self-driving car,
54

54

00:02:04,030  -->  00:02:07,200
well, the self-driving car will need a lot of functions.
55

55

00:02:07,200  -->  00:02:09,834
Some functions to recognize objects on the street.
56

56

00:02:09,834  -->  00:02:12,460
Then some functions to turn right, to turn left,
57

57

00:02:12,460  -->  00:02:14,230
to move forward, to move backward,
58

58

00:02:14,230  -->  00:02:17,030
or to stop when there is an obstacle on the street.
59

59

00:02:17,030  -->  00:02:18,980
Well, we would need functions for all this
60

60

00:02:18,980  -->  00:02:22,071
and these functions are all defined in the class.
61

61

00:02:22,071  -->  00:02:25,920
And here again, that's the same for our RBM class.
62

62

00:02:25,920  -->  00:02:27,670
We're gonna define some functions
63

63

00:02:27,670  -->  00:02:30,847
beside the _init_ function that will do all the actions
64

64

00:02:30,847  -->  00:02:33,510
that take place in an RBM model.
65

65

00:02:33,510  -->  00:02:35,550
And these actions are to sample
66

66

00:02:35,550  -->  00:02:37,720
the hidden notes and the visible notes.
67

67

00:02:37,720  -->  00:02:40,670
So, to summarize, we're gonna make 3 functions.
68

68

00:02:40,670  -->  00:02:43,057
1 function to initialize the RBM
69

69

00:02:43,057  -->  00:02:45,670
of jig that will be created afterwords.
70

70

00:02:45,670  -->  00:02:48,080
Then the second function will be sample H,
71

71

00:02:48,080  -->  00:02:50,550
that will sample the probabilities of the hidden notes
72

72

00:02:50,550  -->  00:02:52,040
given the visible notes.
73

73

00:02:52,040  -->  00:02:54,270
And eventually we'll make a third function.
74

74

00:02:54,270  -->  00:02:55,660
Which will be sample V.
75

75

00:02:55,660  -->  00:02:58,680
And that will sample the probabilities of the visible notes
76

76

00:02:58,680  -->  00:03:00,360
given the hidden notes.
77

77

00:03:00,360  -->  00:03:02,780
So, 1 class, 3 functions to make.
78

78

00:03:02,780  -->  00:03:04,751
Let's make the first one in this tutorial.
79

79

00:03:04,751  -->  00:03:07,980
Alright, so first, we need to define the class
80

80

00:03:07,980  -->  00:03:10,090
and to define a class in Python we need to
81

81

00:03:10,090  -->  00:03:14,110
start with class then we give a name to this class.
82

82

00:03:14,110  -->  00:03:16,800
And the name of the class should be in capitols.
83

83

00:03:16,800  -->  00:03:18,920
Well, the first letter should be a capitol letter,
84

84

00:03:18,920  -->  00:03:22,330
but we can also put only capitol letters, like this,
85

85

00:03:22,330  -->  00:03:24,737
RBM; so that's the name of our class.
86

86

00:03:24,737  -->  00:03:28,006
And then some parenthesis and then colon.
87

87

00:03:28,006  -->  00:03:31,046
Alright, and inside this class is going to be
88

88

00:03:31,046  -->  00:03:34,300
everything that will define what we want to create,
89

89

00:03:34,300  -->  00:03:35,883
that is, our RBM model.
90

90

00:03:36,960  -->  00:03:38,680
Alright so, we said that the first function
91

91

00:03:38,680  -->  00:03:40,960
we need to make is the _init_ function
92

92

00:03:40,960  -->  00:03:43,280
and that actually happens in every class.
93

93

00:03:43,280  -->  00:03:45,870
You always have to start with the _init_ function
94

94

00:03:45,870  -->  00:03:49,080
because this _init_ function is to define the parameters
95

95

00:03:49,080  -->  00:03:52,430
of the object that will be created once the class is made.
96

96

00:03:52,430  -->  00:03:55,316
So this one is a default compulsory function
97

97

00:03:55,316  -->  00:03:58,952
and we define it this way, with a double underscore,
98

98

00:03:58,952  -->  00:04:01,890
init, and another double underscore.
99

99

00:04:01,890  -->  00:04:03,590
Then some parenthesis.
100

100

00:04:03,590  -->  00:04:05,880
And now I'm going to input 3 arguments.
101

101

00:04:05,880  -->  00:04:08,150
The first argument is a default argument
102

102

00:04:08,150  -->  00:04:10,987
that is here all the time and that is self.
103

103

00:04:10,987  -->  00:04:13,500
And self, there is no mystery about it,
104

104

00:04:13,500  -->  00:04:15,440
self corresponds to the object
105

105

00:04:15,440  -->  00:04:17,610
that will be created afterwords.
106

106

00:04:17,610  -->  00:04:19,220
And we need this argument because
107

107

00:04:19,220  -->  00:04:21,620
we're gonna define some variables and we will need to
108

108

00:04:21,620  -->  00:04:24,768
specify that these variables are the variables of the object
109

109

00:04:24,768  -->  00:04:26,900
that will be created afterwords
110

110

00:04:26,900  -->  00:04:28,570
and not some global variables.
111

111

00:04:28,570  -->  00:04:30,931
All the variables that are attached to the object
112

112

00:04:30,931  -->  00:04:34,890
will be created by putting a self before the variable.
113

113

00:04:34,890  -->  00:04:36,380
You will see that very quickly.
114

114

00:04:36,380  -->  00:04:37,830
So that's the first argument.
115

115

00:04:37,830  -->  00:04:40,570
And now we're gonna input two other arguments.
116

116

00:04:40,570  -->  00:04:42,910
The first argument is NV,
117

117

00:04:42,910  -->  00:04:44,920
and that's the number of visible notes.
118

118

00:04:44,920  -->  00:04:48,570
And then, a third argument, which is going to be NH.
119

119

00:04:48,570  -->  00:04:51,230
And that is, of course, the number of hidden notes.
120

120

00:04:51,230  -->  00:04:53,900
So these are just the parameters of the _init_ function,
121

121

00:04:53,900  -->  00:04:56,710
but then we need to define what's going to initialize.
122

122

00:04:56,710  -->  00:04:59,420
We need to initialize the weight and the bias.
123

123

00:04:59,420  -->  00:05:03,220
So, now to define how the initialization is going to work,
124

124

00:05:03,220  -->  00:05:05,650
we need to add a column here and then
125

125

00:05:05,650  -->  00:05:07,913
go inside the function by pressing enter.
126

126

00:05:08,950  -->  00:05:11,271
And so, now, what we are going to do inside this function
127

127

00:05:11,271  -->  00:05:15,770
is initialize the parameters of our future object.
128

128

00:05:15,770  -->  00:05:18,560
The object that we will create from this class.
129

129

00:05:18,560  -->  00:05:21,520
So, basically, what we will initialize inside this _init_
130

130

00:05:21,520  -->  00:05:24,900
function are going to be all the parameters that we will
131

131

00:05:24,900  -->  00:05:27,710
optimize during the training of the RBM.
132

132

00:05:27,710  -->  00:05:29,900
That is, the weights and the bias.
133

133

00:05:29,900  -->  00:05:33,930
And since these parameters are specific to the RBM model,
134

134

00:05:33,930  -->  00:05:36,770
that is, to our future objects that we're going to create
135

135

00:05:36,770  -->  00:05:39,600
from the RBM class, well, that's what I just told you.
136

136

00:05:39,600  -->  00:05:42,410
We need to specify that these variables are the variables
137

137

00:05:42,410  -->  00:05:44,810
of the object and, therefore, to initialize these
138

138

00:05:44,810  -->  00:05:49,560
variables, we need to start with self then dot and then
139

139

00:05:49,560  -->  00:05:51,520
the name of the variable.
140

140

00:05:51,520  -->  00:05:53,110
So, let's start with the weights.
141

141

00:05:53,110  -->  00:05:54,750
We need to initialize the weights and
142

142

00:05:54,750  -->  00:05:56,700
we're gonna call them W.
143

143

00:05:56,700  -->  00:05:57,890
Why capitol W?
144

144

00:05:57,890  -->  00:06:00,360
Because all the weights are going to be initialized
145

145

00:06:00,360  -->  00:06:02,010
in a torched tensor.
146

146

00:06:02,010  -->  00:06:04,560
And so, these weights are all the parameters of
147

147

00:06:04,560  -->  00:06:06,960
the probabilities of the visible notes
148

148

00:06:06,960  -->  00:06:08,460
given the hidden notes.
149

149

00:06:08,460  -->  00:06:11,320
And so, according to the theory, they are initialized
150

150

00:06:11,320  -->  00:06:14,765
in a matrix of size and H, number of hidden notes,
151

151

00:06:14,765  -->  00:06:17,670
and NV, the number of visible notes.
152

152

00:06:17,670  -->  00:06:19,960
And since we're working with PyTorch, well,
153

153

00:06:19,960  -->  00:06:23,590
this matrix is going to be a torched tensor, remember?
154

154

00:06:23,590  -->  00:06:26,570
It's tensor is a matrix of one single type.
155

155

00:06:26,570  -->  00:06:28,660
Alright, so now that we know what we have to do,
156

156

00:06:28,660  -->  00:06:32,240
we need to use torch, the torch library.
157

157

00:06:32,240  -->  00:06:33,660
And now we're gonna use a function
158

158

00:06:33,660  -->  00:06:35,910
that will initialize all these weights.
159

159

00:06:35,910  -->  00:06:37,679
And so, you know since these weights have to be
160

160

00:06:37,679  -->  00:06:41,030
initialized randomly according to a normal distribution,
161

161

00:06:41,030  -->  00:06:45,510
well, we need to use this rendn function because
162

162

00:06:45,510  -->  00:06:48,220
it will initialize all the weights in our tensor.
163

163

00:06:48,220  -->  00:06:49,980
And as we just said, this tensor
164

164

00:06:49,980  -->  00:06:53,610
should be of size and H and NV.
165

165

00:06:53,610  -->  00:06:58,110
Alright, so to sum up this torch dot rendn NH and NV
166

166

00:06:58,110  -->  00:07:02,330
initializes a tensor of size NH NV.
167

167

00:07:02,330  -->  00:07:04,310
According to a normal distribution,
168

168

00:07:04,310  -->  00:07:06,550
and besides this normal distribution has a
169

169

00:07:06,550  -->  00:07:08,523
mean of 0 and a variance of 1.
170

170

00:07:08,523  -->  00:07:11,860
Okay good, so that initializes all the weights
171

171

00:07:11,860  -->  00:07:13,500
for the probabilities.
172

172

00:07:13,500  -->  00:07:16,770
P of the visible notes according to the hidden notes.
173

173

00:07:16,770  -->  00:07:19,350
Alright now, let's initialize the bias.
174

174

00:07:19,350  -->  00:07:21,180
We also need to initialize the bias.
175

175

00:07:21,180  -->  00:07:24,400
And remember there is some bias for the probability
176

176

00:07:24,400  -->  00:07:26,950
of the hidden note given the visible note
177

177

00:07:26,950  -->  00:07:29,670
and some bias for the probability of the visible note
178

178

00:07:29,670  -->  00:07:30,933
given the hidden note.
179

179

00:07:31,870  -->  00:07:36,210
So lets start with the bias for the probabilities of
180

180

00:07:36,210  -->  00:07:38,140
the hidden notes given the visible notes.
181

181

00:07:38,140  -->  00:07:39,944
PH given V.
182

182

00:07:39,944  -->  00:07:42,920
So that's the same, we have to give a name to these bias.
183

183

00:07:42,920  -->  00:07:45,900
And so for these first bias, we're gonna give the name A.
184

184

00:07:45,900  -->  00:07:48,640
And I took my self object because
185

185

00:07:48,640  -->  00:07:50,960
A is a parameter of the object.
186

186

00:07:50,960  -->  00:07:54,270
So self does A and then equals and then again we take
187

187

00:07:54,270  -->  00:07:58,440
our torch library then dot and then again we're gonna take
188

188

00:07:58,440  -->  00:08:01,890
our rendn function to initialize the weights
189

189

00:08:01,890  -->  00:08:04,560
according to normal distribution of mean 0
190

190

00:08:04,560  -->  00:08:05,890
and variance 1.
191

191

00:08:05,890  -->  00:08:09,400
And so now, since there is one bias for each hidden note
192

192

00:08:09,400  -->  00:08:12,304
and we have NH hidden note,
193

193

00:08:12,304  -->  00:08:15,630
well, we need to create a vector of an H element.
194

194

00:08:15,630  -->  00:08:18,791
That is, we're gonna have a vector of NH element
195

195

00:08:18,791  -->  00:08:21,590
all initialized to some numbers that follow
196

196

00:08:21,590  -->  00:08:23,220
a normal distribution.
197

197

00:08:23,220  -->  00:08:25,150
But we need to create an additional dimension
198

198

00:08:25,150  -->  00:08:27,093
corresponding to the batch, and therefore,
199

199

00:08:27,093  -->  00:08:29,790
this vector shouldn't have 1 dimension,
200

200

00:08:29,790  -->  00:08:33,620
like a single input vector, it should have 2 dimensions.
201

201

00:08:33,620  -->  00:08:35,522
The first dimension corresponding to the batch
202

202

00:08:35,522  -->  00:08:38,560
and the second dimension corresponding to the bias.
203

203

00:08:38,560  -->  00:08:39,910
And so, why do we need to create this
204

204

00:08:39,910  -->  00:08:41,370
fake dimension for the batch?
205

205

00:08:41,370  -->  00:08:43,100
Well, that's always for the same reason.
206

206

00:08:43,100  -->  00:08:45,140
It's because the functions that we're gonna use
207

207

00:08:45,140  -->  00:08:49,040
then in PyTorch cannot accept a single input vector
208

208

00:08:49,040  -->  00:08:52,250
of one dimension as argument, but a two dimensional
209

209

00:08:52,250  -->  00:08:54,957
tensor with the first dimension corresponding to the batch
210

210

00:08:54,957  -->  00:08:58,430
and the second dimension corresponding to the bias.
211

211

00:08:58,430  -->  00:09:02,350
So that's why here, we cannot put directly NH, like this,
212

212

00:09:02,350  -->  00:09:04,870
but we need to add a 1 first.
213

213

00:09:04,870  -->  00:09:08,440
So that creates a 2-D tensor with this one here
214

214

00:09:08,440  -->  00:09:10,960
corresponding to the first dimension that is the batch.
215

215

00:09:10,960  -->  00:09:14,907
And this NH element here corresponding to the bias.
216

216

00:09:14,907  -->  00:09:16,040
Alright?
217

217

00:09:16,040  -->  00:09:19,120
And now we have a third parameter to define
218

218

00:09:19,120  -->  00:09:21,880
that is still specific to the object that will be created,
219

219

00:09:21,880  -->  00:09:25,860
that is our RBM model, and that is the bias for,
220

220

00:09:25,860  -->  00:09:29,140
this time, the visible notes.
221

221

00:09:29,140  -->  00:09:32,610
And so that's the same, we need to take our torch
222

222

00:09:32,610  -->  00:09:37,610
dot rendn function, but this time we have not NH,
223

223

00:09:38,260  -->  00:09:42,630
but NV, visible note, while we initialize the tensor
224

224

00:09:42,630  -->  00:09:45,240
of NV element with one additional dimension
225

225

00:09:45,240  -->  00:09:46,770
corresponding to the batch.
226

226

00:09:46,770  -->  00:09:49,720
So that makes a 2-D tensor and this tensor has
227

227

00:09:49,720  -->  00:09:52,590
NV element in this second dimension.
228

228

00:09:52,590  -->  00:09:54,934
Alright, and that's all we need to initialize
229

229

00:09:54,934  -->  00:09:57,930
our future objects of the RBM class.
230

230

00:09:57,930  -->  00:09:58,990
So that's perfect.
231

231

00:09:58,990  -->  00:10:00,930
We can now move on to the second step
232

232

00:10:00,930  -->  00:10:03,580
of the creation of the architecture of the newel network.
233

233

00:10:03,580  -->  00:10:06,940
And this second step consists of making the function
234

234

00:10:06,940  -->  00:10:08,880
that will sample the hidden note.
235

235

00:10:08,880  -->  00:10:11,020
So we will explain and do all this in the next
236

236

00:10:11,020  -->  00:10:13,523
tutorial and until then, enjoy deep learning!
