WEBVTT
1
1

00:00:00.150  -->  00:00:02.506
<v Instructor>Hello and welcome to this Python tutorial.</v>
2

2

00:00:02.506  -->  00:00:04.130
So, in the previous tutorials
3

3

00:00:04.130  -->  00:00:05.800
we pre-processed our data,
4

4

00:00:05.800  -->  00:00:09.850
we fitted Logistic Regression into the Training set,
5

5

00:00:09.850  -->  00:00:11.740
then we predicted the Test set results
6

6

00:00:11.740  -->  00:00:14.480
and today we're going to evaluate
7

7

00:00:14.480  -->  00:00:17.140
if our logistic regression model learns
8

8

00:00:17.140  -->  00:00:19.060
and understood correctly the correlations
9

9

00:00:19.060  -->  00:00:22.370
in a training set to see if it can make powerful predictions
10

10

00:00:22.370  -->  00:00:24.770
on a new set, especially the Test set,
11

11

00:00:24.770  -->  00:00:26.980
so this confusion matrix is going to contain
12

12

00:00:26.980  -->  00:00:29.600
the correction predictions that our model made
13

13

00:00:29.600  -->  00:00:32.741
on the test set as well as the incorrect predictions.
14

14

00:00:32.741  -->  00:00:35.810
So, let's create this confusion matrix,
15

15

00:00:35.810  -->  00:00:37.640
once again it's gonna be very fast
16

16

00:00:37.640  -->  00:00:40.380
and as usual, we are going to import a tool
17

17

00:00:40.380  -->  00:00:42.284
that is going to help us compute
18

18

00:00:42.284  -->  00:00:44.810
this confusion matrix faster,
19

19

00:00:44.810  -->  00:00:46.540
only this time it's not gonna be a class,
20

20

00:00:46.540  -->  00:00:48.150
it's gonna be a function
21

21

00:00:48.150  -->  00:00:53.150
which we will import from the sklearn.matrix library.
22

22

00:00:53.290  -->  00:00:58.290
So, let's do it, let's type from sklearn.matrix
23

23

00:01:01.700  -->  00:01:05.750
import and then we import our function,
24

24

00:01:05.750  -->  00:01:07.883
so our function is confusion matrix,
25

25

00:01:10.666  -->  00:01:13.440
confusion_matrix,
26

26

00:01:13.440  -->  00:01:14.740
so now we're gonna use this function
27

27

00:01:14.740  -->  00:01:18.290
to compute the confusion_matrix in just one line,
28

28

00:01:18.290  -->  00:01:19.700
so we're gonna call our confusion_matrix cm
29

29

00:01:21.490  -->  00:01:24.070
which is a new variable but it's the confusion_matrix
30

30

00:01:25.030  -->  00:01:28.453
and then we're gonna use our function confusion_matrix
31

31

00:01:28.453  -->  00:01:30.303
that we just imported,
32

32

00:01:31.460  -->  00:01:32.400
here we go
33

33

00:01:33.600  -->  00:01:36.050
and then we're gonna input the parameters.
34

34

00:01:36.050  -->  00:01:38.790
So, let's inspect the confusion_matrix.
35

35

00:01:38.790  -->  00:01:42.560
We press Command + I to have a look at the info.
36

36

00:01:42.560  -->  00:01:44.540
Here we go, so that's our parameters,
37

37

00:01:44.540  -->  00:01:46.720
let's see what parameters we have to input.
38

38

00:01:46.720  -->  00:01:49.140
So, the first parameter is y_true,
39

39

00:01:49.140  -->  00:01:51.130
so that's the correct values,
40

40

00:01:51.130  -->  00:01:53.300
that's the real values, that's the values
41

41

00:01:53.300  -->  00:01:54.540
of your dataset,
42

42

00:01:54.540  -->  00:01:57.190
that's actually what happened in real life
43

43

00:01:57.190  -->  00:01:59.200
and a cool name to designate it,
44

44

00:01:59.200  -->  00:02:01.610
I like this name, it's Ground truth.
45

45

00:02:01.610  -->  00:02:03.720
Ground truth means the real values
46

46

00:02:03.720  -->  00:02:06.137
that happened in reality.
47

47

00:02:06.137  -->  00:02:08.170
So, our first parameter is then y_test
48

48

00:02:09.680  -->  00:02:13.330
because this is the vector of the real values
49

49

00:02:13.330  -->  00:02:16.670
which are telling if yes or no the user really bought
50

50

00:02:16.670  -->  00:02:18.230
the SUV car
51

51

00:02:18.230  -->  00:02:20.110
and then what is the second parameter?
52

52

00:02:20.110  -->  00:02:22.510
The second parameter is y_pred,
53

53

00:02:22.510  -->  00:02:25.260
so this time it's the vector of predictions,
54

54

00:02:25.260  -->  00:02:26.320
the vector of predictions
55

55

00:02:26.320  -->  00:02:29.920
that our logistic regression model predicted,
56

56

00:02:29.920  -->  00:02:31.610
so do you guess what this is?
57

57

00:02:31.610  -->  00:02:35.140
It's actually y_pred
58

58

00:02:36.090  -->  00:02:37.930
and that's it, that's all we need to know.
59

59

00:02:37.930  -->  00:02:40.320
I know there's several more parameters,
60

60

00:02:40.320  -->  00:02:42.840
oh actually, there is just one parameter, it's labels
61

61

00:02:42.840  -->  00:02:44.200
but it's fine, we're not gonna use it,
62

62

00:02:44.200  -->  00:02:45.930
we have everything we need here.
63

63

00:02:45.930  -->  00:02:50.003
So, let's select these two lines and execute.
64

64

00:02:51.600  -->  00:02:53.740
The confusion_matrix is created.
65

65

00:02:53.740  -->  00:02:55.080
Now let's have a look.
66

66

00:02:55.080  -->  00:02:57.770
To have a look at it, we can go to the console here
67

67

00:02:57.770  -->  00:03:01.783
and type cm and then press Enter to have a look at it.
68

68

00:03:02.670  -->  00:03:04.160
So, here's the matrix.
69

69

00:03:04.160  -->  00:03:07.020
The two numbers here, 65 and 24
70

70

00:03:07.020  -->  00:03:08.770
are the correct predictions
71

71

00:03:08.770  -->  00:03:10.950
and those two numbers here, eight and three
72

72

00:03:10.950  -->  00:03:12.760
are the incorrect predictions.
73

73

00:03:12.760  -->  00:03:14.260
So, we can see that we have quite a lot
74

74

00:03:14.260  -->  00:03:15.590
of correct predictions, that's good,
75

75

00:03:15.590  -->  00:03:20.350
we have 65 plus 24 equals 89 correct predictions
76

76

00:03:21.240  -->  00:03:22.750
and we have eight plus three
77

77

00:03:22.750  -->  00:03:26.010
equals 11 incorrect predictions.
78

78

00:03:26.010  -->  00:03:28.290
So, that's good, that's a first step
79

79

00:03:28.290  -->  00:03:30.580
into evaluating a model performance
80

80

00:03:30.580  -->  00:03:32.300
but really the most interesting way
81

81

00:03:32.300  -->  00:03:34.720
to do that, to evaluate a model performance
82

82

00:03:34.720  -->  00:03:36.750
is what we're going to do in the next tutorial
83

83

00:03:36.750  -->  00:03:40.010
because we're gonna have a graphic visualization
84

84

00:03:40.010  -->  00:03:41.330
of our results
85

85

00:03:41.330  -->  00:03:44.550
and we will clearly see how our classifier separates
86

86

00:03:44.550  -->  00:03:45.470
the two categories.
87

87

00:03:45.470  -->  00:03:48.440
That means that we will see the decision boundary
88

88

00:03:48.440  -->  00:03:51.785
of the classifier and therefore the decision regions.
89

89

00:03:51.785  -->  00:03:54.220
That means that we're gonna clearly see the region
90

90

00:03:54.220  -->  00:03:56.450
where the classifier predicts that the user
91

91

00:03:56.450  -->  00:03:58.040
is going to buy the product
92

92

00:03:58.040  -->  00:04:00.260
and the other region where the classifier predicts
93

93

00:04:00.260  -->  00:04:02.560
that the user is not going to buy the products.
94

94

00:04:02.560  -->  00:04:04.040
You'll see it's gonna be very fun,
95

95

00:04:04.040  -->  00:04:06.910
it's gonna be exciting visual graphic results.
96

96

00:04:06.910  -->  00:04:08.407
I can't wait to show you this.
97

97

00:04:08.407  -->  00:04:11.440
So, I look forward to seeing you in the next tutorial
98

98

00:04:11.440  -->  00:04:13.390
and until then, enjoy machine learning.
