WEBVTT
1
00:00:01.265 --> 00:00:06.124
The prototype design pattern guarantees a unique instance per request,

2
00:00:06.124 --> 00:00:11.667
and, thus, the scope inside of a Spring container mimics that design pattern.

3
00:00:11.667 --> 00:00:14.363
Each time you request a bean from the container,

4
00:00:14.363 --> 00:00:16.785
you're guaranteed a unique instance.

5
00:00:16.785 --> 00:00:20.496
It is essentially the opposite of a singleton.

6
00:00:20.496 --> 00:00:24.542
The configuration of a prototype is nearly identical to a singleton,

7
00:00:24.542 --> 00:00:27.672
so let's look at a small code snippet of how that's

8
00:00:27.672 --> 00:00:31.298
configured and then integrate that into our code.

9
00:00:31.298 --> 00:00:35.490
The configuration is very simple.

10
00:00:35.490 --> 00:00:39.901
You just set that to a string of type prototype.

11
00:00:39.901 --> 00:00:44.195
We'll go ahead and use the bean definition just like we did for the singleton,

12
00:00:44.195 --> 00:00:46.929
and everything's already configured in our application to

13
00:00:46.929 --> 00:00:49.125
show us that this sample is going to work.

14
00:00:49.125 --> 00:00:51.526
Let's take a look at that code now.

15
00:00:51.526 --> 00:00:56.314
I've opened up the AppConfig back where we had it before

16
00:00:56.314 --> 00:00:57.923
with the BeanDefinition.SCOPE_SINGLETON,

17
00:00:57.923 --> 00:01:06.166
and I want to replace that with SCOPE_PROTOTYPE.

18
00:01:06.166 --> 00:01:11.430
We've already configured our Application.java to show the object

19
00:01:11.430 --> 00:01:15.072
address to see that it's unique per request.

20
00:01:15.072 --> 00:01:24.700
So let's now run this and see if our object address has changed per request.

21
00:01:24.700 --> 00:01:26.322
When we run this,

22
00:01:26.322 --> 00:01:30.318
you'll notice now there is a unique instance every time we

23
00:01:30.318 --> 00:01:33.212
ask for that bean from the container.

24
00:01:33.212 --> 00:01:39.192
So our object address before was 73700b80.

25
00:01:39.192 --> 00:01:40.739
Yours will be different because of your instance,

26
00:01:40.739 --> 00:01:49.538
printed out the name, and then it has the new object address of 10d307f1.

27
00:01:49.538 --> 00:01:50.749
Again, yours will be different,

28
00:01:50.749 --> 00:01:54.874
but now you can see that since changing that to a prototype instance,

29
00:01:54.874 --> 00:02:01.034
it is now giving us a unique bean per request,

30
00:02:01.034 --> 00:02:04.897
now, per request of the bean from the context.

31
00:02:04.897 --> 00:02:08.767
If you hang onto that bean and do stuff with it for the next 10 minutes,

32
00:02:08.767 --> 00:02:10.809
it will still be the same bean,

33
00:02:10.809 --> 00:02:13.046
but every time we ask for a new one for the container,

34
00:02:13.046 --> 00:02:15.330
it's going to give us a unique one back.

35
00:02:15.330 --> 00:02:17.835
Just so we don't mess up any future demos,

36
00:02:17.835 --> 00:02:21.218
let's go ahead and change that back to SINGLETON.

37
00:02:21.218 --> 00:02:24.768
I'm going to select SCOPE_SINGLETON, save that,

38
00:02:24.768 --> 00:02:30.196
switch back to our application, run it again and make sure that it's ran,

39
00:02:30.196 --> 00:02:36.000
and everything look correct. We've got the same object address as before and after.

