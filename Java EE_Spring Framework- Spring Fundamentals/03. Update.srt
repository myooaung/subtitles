1
00:00:01,228 --> 00:00:03,159
So, again, what is Spring?

2
00:00:03,159 --> 00:00:03,408
Well,

3
00:00:03,408 --> 00:00:06,484
it is a framework built around reducing the complexities

4
00:00:06,484 --> 00:00:10,593
around enterprise Java development and later also providing

5
00:00:10,593 --> 00:00:13,991
enterprise development without EJBs.

6
00:00:13,991 --> 00:00:17,240
Spring can essentially be used with or without Enterprise

7
00:00:17,240 --> 00:00:20,597
JavaBeans and primarily now is used without them.

8
00:00:20,597 --> 00:00:24,623
This is an important point because Spring enabled us to do enterprise

9
00:00:24,623 --> 00:00:28,064
development without using an application server.

10
00:00:28,064 --> 00:00:32,353
A lot of people don't realize that Tomcat really isn't an application server,

11
00:00:32,353 --> 00:00:34,076
and it's just a web server.

12
00:00:34,076 --> 00:00:37,283
This is one of the reasons that Tomcat has taken over for

13
00:00:37,283 --> 00:00:39,424
Java developments as a standard container.

14
00:00:39,424 --> 00:00:42,402
It's very easy to use, it's lightweight,

15
00:00:42,402 --> 00:00:43,871
and until Spring,

16
00:00:43,871 --> 00:00:48,071
you either weren't using enterprise features or you had to use a more complex,

17
00:00:48,071 --> 00:00:51,013
harder-to-use application server.

18
00:00:51,013 --> 00:00:53,870
I should also mention that it is completely POJO based.

19
00:00:53,870 --> 00:00:59,571
Any code you write in Spring can be written without using Spring at all.

20
00:00:59,571 --> 00:01:04,899
POJO, as you may or may not remember, stands for a plain old Java object.

21
00:01:04,899 --> 00:01:08,950
The Spring Framework really isn't doing any magical thing behind the scene.

22
00:01:08,950 --> 00:01:11,357
It's just helping us write better,

23
00:01:11,357 --> 00:01:16,161
cleaner code and doing things POJO based and interface driven.

24
00:01:16,161 --> 00:01:17,618
So we've already talked about it being lightweight,

25
00:01:17,618 --> 00:01:20,839
but we should also point out that Spring was built

26
00:01:20,839 --> 00:01:26,359
out of the frustrations of JEE, so it's very unobtrusive.

27
00:01:26,359 --> 00:01:28,879
It shouldn't be getting in your way.

28
00:01:28,879 --> 00:01:30,959
If it is, you're using it wrong.

29
00:01:30,959 --> 00:01:36,352
Spring also uses AOP and proxies to apply things like transactions to your code

30
00:01:36,352 --> 00:01:39,702
to get those cross cutting concerns out of your application,

31
00:01:39,702 --> 00:01:44,855
so your code should actually be smaller and more lightweight from using Spring.

32
00:01:44,855 --> 00:01:48,157
One of the most appealing parts of Spring to me is that

33
00:01:48,157 --> 00:01:51,350
it's built around best practices.

34
00:01:51,350 --> 00:01:54,181
We end up having design patterns in our code without us

35
00:01:54,181 --> 00:01:58,094
even realizing that we're using them, things like singletons,

36
00:01:58,094 --> 00:02:00,833
factories, abstract factories.

37
00:02:00,833 --> 00:02:03,735
All of those best practices are built into our code.

38
00:02:03,735 --> 00:02:08,121
Some people may argue that I should know those to get into it.

39
00:02:08,121 --> 00:02:08,845
That's true.

40
00:02:08,845 --> 00:02:12,024
Having that knowledge of patterns will only help increase

41
00:02:12,024 --> 00:02:14,706
your understanding of what Spring is doing,

42
00:02:14,706 --> 00:02:17,511
but it can help make new developers or less experienced

43
00:02:17,511 --> 00:02:21,045
developers come up to speed and use these patterns more

44
00:02:21,045 --> 00:02:24,250
effectively without having that knowledge firsthand.

45
00:02:24,250 --> 00:02:26,788
There's patterns like a singleton in there,

46
00:02:26,788 --> 00:02:30,074
a factory, an abstract factory, the template method.

47
00:02:30,074 --> 00:02:32,648
Spring actually uses template method a lot,

48
00:02:32,648 --> 00:02:34,566
and although it's really not a pattern,

49
00:02:34,566 --> 00:02:37,403
it's a design methodology or a best practice,

50
00:02:37,403 --> 00:02:40,230
there's annotation-based configuration.

51
00:02:40,230 --> 00:02:41,922
If all of this doesn't make much sense to you,

52
00:02:41,922 --> 00:02:48,000
don't be concerned because you can still learn Spring without understanding many of those details.

