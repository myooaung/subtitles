1
00:00:01,295 --> 00:00:04,504
Setter injection using the Java configuration approach

2
00:00:04,504 --> 00:00:07,881
is really as simple as a method call.

3
00:00:07,881 --> 00:00:12,275
A lot of the mystery of injection just goes away.

4
00:00:12,275 --> 00:00:15,937
A lot of developers I talk to are concerned with the black box fill

5
00:00:15,937 --> 00:00:18,848
of dependency injection or inversion of control.

6
00:00:18,848 --> 00:00:20,921
And with the Java configuration approach,

7
00:00:20,921 --> 00:00:23,714
it's more visible as to what's actually going on.

8
00:00:23,714 --> 00:00:28,796
With XML, there's a lot of wondering what's wired up and what's calling in,

9
00:00:28,796 --> 00:00:31,531
who and how this autowiring is all taking place,

10
00:00:31,531 --> 00:00:35,642
and that just kind of goes away with the Java configuration.

11
00:00:35,642 --> 00:00:41,106
Setter injection is simply a matter of calling a setter on a bean.

12
00:00:41,106 --> 00:00:43,528
We're going to define a bean using the bean annotation

13
00:00:43,528 --> 00:00:45,099
like we did in the previous demo,

14
00:00:45,099 --> 00:00:48,447
and you can see here that we've got our getCustomerService

15
00:00:48,447 --> 00:00:52,890
method that returns a bean of type customerService or a

16
00:00:52,890 --> 00:00:56,278
bean named customerService, and notice, though,

17
00:00:56,278 --> 00:00:58,496
that we have a setter injection in here.

18
00:00:58,496 --> 00:00:59,947
As we're building our beans,

19
00:00:59,947 --> 00:01:03,416
we're going to call this setCustomerRepository method

20
00:01:03,416 --> 00:01:07,200
on our customerService instance.

21
00:01:07,200 --> 00:01:08,017
To do that,

22
00:01:08,017 --> 00:01:12,534
we need to have a method called getCustomerRepository in our

23
00:01:12,534 --> 00:01:17,236
configuration that returns the customerRepository bean.

24
00:01:17,236 --> 00:01:23,053
This is going to wire the CustomerRepository inside of our CustomerService.

25
00:01:23,053 --> 00:01:24,499
Let me say that again.

26
00:01:24,499 --> 00:01:27,666
We're not just going to call an instance we create.

27
00:01:27,666 --> 00:01:31,441
We're going to call and get an instance of the bean

28
00:01:31,441 --> 00:01:34,771
from the Spring configuration file.

29
00:01:34,771 --> 00:01:38,402
So when we define a bean such as our CustomerRepository here

30
00:01:38,402 --> 00:01:41,532
that returns an instance of CustomerRepository,

31
00:01:41,532 --> 00:01:45,824
you can see that those methods now line up.

32
00:01:45,824 --> 00:01:50,415
I'm going to call getCustomerRepository that's registered as a Spring bean,

33
00:01:50,415 --> 00:01:53,269
and that's going to return an instance for our

34
00:01:53,269 --> 00:01:57,719
setCustomerRepository instance on our service instance.

35
00:01:57,719 --> 00:01:59,622
Take note,

36
00:01:59,622 --> 00:02:03,653
Spring is still doing a lot of magic behind the scenes when a

37
00:02:03,653 --> 00:02:06,781
bean is registered such as these beans are all,

38
00:02:06,781 --> 00:02:07,493
by default,

39
00:02:07,493 --> 00:02:12,834
a singleton and will only execute the method the first time it's called.

40
00:02:12,834 --> 00:02:16,734
That's very key point because if I didn't have this set up this way,

41
00:02:16,734 --> 00:02:19,841
it would create a new bean every time we called this.

42
00:02:19,841 --> 00:02:20,498
Since it is in Spring,

43
00:02:20,498 --> 00:02:28,000
it's going to register this as a singleton and only return one instance. Let's implement this in our code now.

