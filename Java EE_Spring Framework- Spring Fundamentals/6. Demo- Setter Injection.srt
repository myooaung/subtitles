1
00:00:01,365 --> 00:00:03,943
To add setter injection to our project,

2
00:00:03,943 --> 00:00:07,118
we actually have to change a couple of things that we have

3
00:00:07,118 --> 00:00:09,096
hard coded inside of our previous demo.

4
00:00:09,096 --> 00:00:11,830
That's the whole reason we're actually using Spring,

5
00:00:11,830 --> 00:00:17,424
so let's go ahead and open up our service,

6
00:00:17,424 --> 00:00:20,515
and specifically our SpeakerServiceImpl,

7
00:00:20,515 --> 00:00:25,926
and see how we have this new HibernateRepositoryImpl in here?

8
00:00:25,926 --> 00:00:29,693
Let's go ahead and get rid of that hard- coded instance,

9
00:00:29,693 --> 00:00:35,610
and we want to create a setter in here where we

10
00:00:35,610 --> 00:00:37,169
actually wire up this configuration.

11
00:00:37,169 --> 00:00:40,751
So we're going to right-click and say Generate,

12
00:00:40,751 --> 00:00:47,327
and we want to do Setter, and specifically the SpeakerRepository,

13
00:00:47,327 --> 00:00:49,663
and click OK.

14
00:00:49,663 --> 00:00:55,372
And now we've converted our SpeakerServiceImpl to be injected rather

15
00:00:55,372 --> 00:00:59,130
than have hard-coded configured instances in here.

16
00:00:59,130 --> 00:01:01,026
We can save this.

17
00:01:01,026 --> 00:01:04,163
Then we want to go back to our AppConfig.

18
00:01:04,163 --> 00:01:07,326
Now inside of our AppConfig, we can do a couple things here.

19
00:01:07,326 --> 00:01:13,378
We want to start off by creating a new bean for our SpeakerRepository,

20
00:01:13,378 --> 00:01:15,866
so we want to say Bean.

21
00:01:15,866 --> 00:01:22,716
I want to give this a name = speakerRepository.

22
00:01:22,716 --> 00:01:27,713
And if you are wondering why I am kind of fanatic about the names of

23
00:01:27,713 --> 00:01:30,957
our beans is because when we go to do autowiring,

24
00:01:30,957 --> 00:01:33,305
which is coming up here very quickly,

25
00:01:33,305 --> 00:01:38,592
we're going to use it to autowire by name to our variable name,

26
00:01:38,592 --> 00:01:42,933
so these match up and it automatically happens for us.

27
00:01:42,933 --> 00:01:45,866
Let's go ahead and finish out our method signature here,

28
00:01:45,866 --> 00:01:51,565
so we'll say SpeakerRepository, and we'll do getSpeakerRepository.

29
00:01:51,565 --> 00:02:03,241
[00:14: 37.473 ] 
 Take any no arguments method parameter as well here.

30
00:02:03,241 --> 00:02:14,833
And inside of here, we want to return our new HibernateRepositoryImpl.

31
00:02:14,833 --> 00:02:18,125
And now I want to go back up to our SpeakerService that we

32
00:02:18,125 --> 00:02:21,200
created earlier and reconfigure this a little bit.

33
00:02:21,200 --> 00:02:28,934
So I'm going to just delete this line, and we want to do SpeakerServiceImpl,

34
00:02:28,934 --> 00:02:29,680
not the interface.

35
00:02:29,680 --> 00:02:32,917
We want to do the actual implementation.

36
00:02:32,917 --> 00:02:44,342
We call this service = new SpeakerServiceImpl.

37
00:02:44,342 --> 00:02:45,914
And inside of here,

38
00:02:45,914 --> 00:02:51,941
we want to actually call that getSpeakerRepository bean that we just created,

39
00:02:51,941 --> 00:02:53,723
so we'll say service.setRepository,

40
00:02:53,723 --> 00:03:03,182
and we can call the getter inside of here where we do the getSpeakerRepository.

41
00:03:03,182 --> 00:03:07,413
And we've now configured our service with that repository,

42
00:03:07,413 --> 00:03:14,698
and now we can return our service that we just created.

43
00:03:14,698 --> 00:03:20,431
So now we changed our repository to be injected through

44
00:03:20,431 --> 00:03:24,630
setter injection into our SpeakerServiceImpl.

45
00:03:24,630 --> 00:03:27,589
Now a couple of questions before we proceed just to clear anything up

46
00:03:27,589 --> 00:03:30,453
that you may be a little bit confused on right now.

47
00:03:30,453 --> 00:03:34,312
Why didn't we just create a new instance of the

48
00:03:34,312 --> 00:03:40,522
HibernateSpeakerRepositoryImpl like we did on line 20 on line 14?

49
00:03:40,522 --> 00:03:43,434
Why did we call this getSpeakerRepository?

50
00:03:43,434 --> 00:03:46,418
Because SpeakerRepository is now created as a bean,

51
00:03:46,418 --> 00:03:48,556
and I mentioned this in the previous slides,

52
00:03:48,556 --> 00:03:54,251
but to kind of reiterate that pointer, make it really stick,

53
00:03:54,251 --> 00:03:56,324
the bean is a singleton.

54
00:03:56,324 --> 00:03:57,869
Only 1 of them will get created.

55
00:03:57,869 --> 00:04:01,854
We can call this getSpeakerService method 50 times now,

56
00:04:01,854 --> 00:04:07,574
and only 1 of the SpeakerRepositoryImpls will get created.

57
00:04:07,574 --> 00:04:10,640
So it's implemented as a singleton, and that's a good thing.

58
00:04:10,640 --> 00:04:13,435
That sometimes confuses or concerns people to start with.

59
00:04:13,435 --> 00:04:15,389
This is actually a good thing for us.

60
00:04:15,389 --> 00:04:17,806
So now we've got this configured to use beans.

61
00:04:17,806 --> 00:04:18,556
They're singletons.

62
00:04:18,556 --> 00:04:20,058
It's all wired up.

63
00:04:20,058 --> 00:04:21,723
It's using setter injection.

64
00:04:21,723 --> 00:04:28,379
Let's go to our application now and switch our application to use Spring

65
00:04:28,379 --> 00:04:32,443
because right now we have all this configuration stuff going on,

66
00:04:32,443 --> 00:04:35,150
but we aren't actually doing anything with it yet.

67
00:04:35,150 --> 00:04:43,932
So let's go inside of our main method, and we want to say ApplicationContext,

68
00:04:43,932 --> 00:04:53,867
and we'll call this instance appContext = new

69
00:04:53,867 --> 00:04:56,712
AnnotationConfigApplicationContext.

70
00:04:56,712 --> 00:04:59,034
Let me make this fullscreen so you can see a little

71
00:04:59,034 --> 00:05:00,764
bit more of what's going on here.

72
00:05:00,764 --> 00:05:07,192
And inside of here, we want to pass in the AppConfig.class.

73
00:05:07,192 --> 00:05:10,487
Now this is our AppConfig that we just created,

74
00:05:10,487 --> 00:05:14,551
this file up here where we configured our beans and it's

75
00:05:14,551 --> 00:05:17,458
annotated with configuration on line 8.

76
00:05:17,458 --> 00:05:23,965
This file is what we're passing into our AnnotationConfigApplicationContext.

77
00:05:23,965 --> 00:05:27,596
What this is is this is loading Spring and it's loading the configuration

78
00:05:27,596 --> 00:05:31,652
files that we have out there into our ApplicationContext.

79
00:05:31,652 --> 00:05:33,084
So when line 9 is ran,

80
00:05:33,084 --> 00:05:38,595
it's going to go out and create a basic registry with 2 beans in it,

81
00:05:38,595 --> 00:05:43,421
the speakerService bean and the speakerRepository bean.

82
00:05:43,421 --> 00:05:46,366
As we just changed on line 13 and 14,

83
00:05:46,366 --> 00:05:52,774
it now injects the speakerRepository bean into the speakerService bean,

84
00:05:52,774 --> 00:05:56,448
and then we'll return that back to our application when we call it.

85
00:05:56,448 --> 00:05:59,903
Now to change that, I'm going to change one more line here,

86
00:05:59,903 --> 00:06:03,682
and I wanted to comment out that old one so that you can

87
00:06:03,682 --> 00:06:05,491
see it and kind of compare the two,

88
00:06:05,491 --> 00:06:18,411
so we'll call this SpeakerService service = appContext.getBean.

89
00:06:18,411 --> 00:06:20,918
And we want to use the version that does type casting,

90
00:06:20,918 --> 00:06:23,313
so we want to go in here and, first of all,

91
00:06:23,313 --> 00:06:29,352
we're going to call it by name and say that we want the speakerService

92
00:06:29,352 --> 00:06:41,617
and pass in the class instance of SpeakerService.class.

93
00:06:41,617 --> 00:06:46,964
And save that instance, and we're ready to run our application.

94
00:06:46,964 --> 00:06:49,250
We have Spring enabled it.

95
00:06:49,250 --> 00:06:53,489
We have gone ahead and done the setter injection of our

96
00:06:53,489 --> 00:06:55,501
speakerRepository and our speakerService.

97
00:06:55,501 --> 00:06:57,620
Let's run this now.

98
00:06:57,620 --> 00:07:01,574
When we fire this up, it'll go ahead and compile it,

99
00:07:01,574 --> 00:07:05,616
and you'll see that it actually returns our instance just like we had before.

100
00:07:05,616 --> 00:07:08,033
I've commented out line 11 so you can see what we

101
00:07:08,033 --> 00:07:09,515
had before that was hard coded.

102
00:07:09,515 --> 00:07:12,941
Now nothing inside of our application is actually hard coded.

103
00:07:12,941 --> 00:07:16,505
It's done through our configuration instances.

104
00:07:16,505 --> 00:07:17,714
Just to recap that,

105
00:07:17,714 --> 00:07:25,326
we added the configuration inside of our AppConfig that now signified

106
00:07:25,326 --> 00:07:28,164
a speakerRepository bean that wasn't there before,

107
00:07:28,164 --> 00:07:31,773
and it is setter injected into our SpeakerService.

108
00:07:31,773 --> 00:07:32,194
Our SpeakerService,

109
00:07:32,194 --> 00:07:35,020
we got rid of the hard- coded configuration inside of

110
00:07:35,020 --> 00:07:37,488
here and just added a setter for it,

111
00:07:37,488 --> 00:07:41,820
and then we converted our application to use Spring.

112
00:07:41,820 --> 00:07:43,366
And from this point forward,

113
00:07:43,366 --> 00:07:47,276
we can now inject all sorts of beans and pieces in our application

114
00:07:47,276 --> 00:07:56,000
wherever we would like to do that and not have it hard coded. Let's look at what this would look like using constructor injection now.

