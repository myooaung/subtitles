WEBVTT
1
00:00:01.262 --> 00:00:04.317
Constructor injection is just like setter injection.

2
00:00:04.317 --> 00:00:08.131
We go through and create our bean instance just like we had before.

3
00:00:08.131 --> 00:00:12.451
Instead of calling the setter, we call the defined constructor.

4
00:00:12.451 --> 00:00:16.028
Our bean that we had written before where we would call

5
00:00:16.028 --> 00:00:18.733
the getCustomerRepository instance would now be used in

6
00:00:18.733 --> 00:00:20.641
the constructor of that bean.

7
00:00:20.641 --> 00:00:21.311
Very simple.

8
00:00:21.311 --> 00:00:22.822
And, again, like setter injection,

9
00:00:22.822 --> 00:00:26.698
some of the mystery of what Spring is doing behind the scenes is removed

10
00:00:26.698 --> 00:00:30.622
using the Java configuration because it looks just like the Java code that

11
00:00:30.622 --> 00:00:33.499
you would do normally inside of an application.

12
00:00:33.499 --> 00:00:37.089
The one difference being that now we have this stored in the container,

13
00:00:37.089 --> 00:00:39.041
and we're not passing objects around.

14
00:00:39.041 --> 00:00:42.079
We can pull them from the framework using the bean,

15
00:00:42.079 --> 00:00:46.982
the get bean aliases, with these bean names that we have defined in our objects.

16
00:00:46.982 --> 00:00:49.049
Moving back to our IDE,

17
00:00:49.049 --> 00:00:53.858
it's really easy to now switch this over to using constructor injection.

18
00:00:53.858 --> 00:00:57.384
I'm going to open up our SpeakerServiceImpl and add

19
00:00:57.384 --> 00:00:59.330
a constructor inside of here.

20
00:00:59.330 --> 00:01:08.782
So I'm going to go ahead and say public SpeakerServiceImpl and pass in a

21
00:01:08.782 --> 00:01:15.408
constructor that takes an instance of a SpeakerRepository and give that the

22
00:01:15.408 --> 00:01:20.602
camel case naming convention of that instance.

23
00:01:20.602 --> 00:01:33.078
And I'm going to assign this to repository = speakerRepository, and save this.

24
00:01:33.078 --> 00:01:37.814
Now we have our instance stored inside of here that is going

25
00:01:37.814 --> 00:01:39.717
to be injected using setter injection.

26
00:01:39.717 --> 00:01:45.295
We can go over to our AppConfig, and you'll notice that on line 13,

27
00:01:45.295 --> 00:01:48.161
we broke our configuration down.

28
00:01:48.161 --> 00:01:50.192
That's fine because we're going to go ahead and fix

29
00:01:50.192 --> 00:01:52.073
that to use that correct injection.

30
00:01:52.073 --> 00:01:54.645
I'm going to comment out line 14, and I'm going to comment it out,

31
00:01:54.645 --> 00:01:57.606
not delete it so that you can see it for a reference compared

32
00:01:57.606 --> 00:02:00.829
to what we did with the setter injection.

33
00:02:00.829 --> 00:02:08.630
I want to just go ahead and call getSpeakerRepository right here and save it.

34
00:02:08.630 --> 00:02:10.642
So now as we create this bean,

35
00:02:10.642 --> 00:02:16.462
we're going to call the getSpeakerRepository bean and inject that in

36
00:02:16.462 --> 00:02:19.641
through constructor injection into our SpeakerServiceImpl.

37
00:02:19.641 --> 00:02:21.733
Let's go ahead and run our application again.

38
00:02:21.733 --> 00:02:27.724
I'm going to switch over to Application and right-click on our main and say Run.

39
00:02:27.724 --> 00:02:32.309
And you should see it now export out Bryan, which it does.

40
00:02:32.309 --> 00:02:35.305
You may be thinking this is magic and it didn't run.

41
00:02:35.305 --> 00:02:37.611
You're more than welcome to go ahead and add some

42
00:02:37.611 --> 00:02:40.493
system.outprintlns or debug and step through it,

43
00:02:40.493 --> 00:02:44.628
but it's going through and using this constructor injection.

44
00:02:44.628 --> 00:02:50.386
One of the biggest mistakes I see people make is in this code for our injection,

45
00:02:50.386 --> 00:02:54.676
they start trying to do crafty things and go ahead and create

46
00:02:54.676 --> 00:02:57.788
some variables and hang onto some stuff here.

47
00:02:57.788 --> 00:03:00.341
That's what Spring does for you.

48
00:03:00.341 --> 00:03:02.214
Whenever I see new people doing stuff with Spring,

49
00:03:02.214 --> 00:03:05.728
they try to be smarter than the framework and create some

50
00:03:05.728 --> 00:03:07.406
instances here and pass some stuff in.

51
00:03:07.406 --> 00:03:11.900
One of the guys I recently taught about Spring was trying to create his own

52
00:03:11.900 --> 00:03:15.546
singleton when Spring did these singleton services for you.

53
00:03:15.546 --> 00:03:17.319
Don't do anything magical.

54
00:03:17.319 --> 00:03:22.000
Just wire up the beans how you would use them and let the framework do that for you.

