WEBVTT
1
00:00:01.352 --> 00:00:04.024
The bean lifecycle is a more advanced topic,

2
00:00:04.024 --> 00:00:08.436
but it is worth showing to you even in a fundamentals course.

3
00:00:08.436 --> 00:00:15.131
It starts off with instantiation and then it moves onto populate properties.

4
00:00:15.131 --> 00:00:17.923
These are read from either a properties file or

5
00:00:17.923 --> 00:00:20.439
injected in from other resources.

6
00:00:20.439 --> 00:00:27.426
Then the framework sets the bean name and makes it aware to other resources.

7
00:00:27.426 --> 00:00:33.406
We can then set that as a BeanFactoryAware context.

8
00:00:33.406 --> 00:00:39.680
Next, we do pre initialization utilizing BeanPostProcessors.

9
00:00:39.680 --> 00:00:45.514
From here, we can initialize the bean utilizing properties that were just set.

10
00:00:45.514 --> 00:00:48.610
Now we can call an init method,

11
00:00:48.610 --> 00:00:52.321
and this is actually the piece that we're going to demonstrate

12
00:00:52.321 --> 00:00:55.371
that's very useful even in this fundamentals course,

13
00:00:55.371 --> 00:00:59.334
and then you wrap up that entire initialization process

14
00:00:59.334 --> 00:01:04.286
with another set of BeanPostProcessors.

15
00:01:04.286 --> 00:01:06.980
We're going to look at a more common use and that is the

16
00:01:06.980 --> 00:01:09.205
configuration of an init method on a bean,

17
00:01:09.205 --> 00:01:11.483
and let's do that demo now.

18
00:01:11.483 --> 00:01:15.421
Adding an init method is actually quite easy to do in our application.

19
00:01:15.421 --> 00:01:19.659
I've gone ahead and opened up our conference-java app.

20
00:01:19.659 --> 00:01:22.124
I'm going to navigate to our pom.xml.

21
00:01:22.124 --> 00:01:28.536
We need to add a dependency inside of here because Java EE has now

22
00:01:28.536 --> 00:01:34.325
assumed an annotation for post construct API calls.

23
00:01:34.325 --> 00:01:42.119
So I've added this javax.annotation javax.annotation -api version 1.3 .2.

24
00:01:42.119 --> 00:01:45.416
That was the most current version at the time of recording this course,

25
00:01:45.416 --> 00:01:49.812
dependency inside the dependency section of our pom.xml.

26
00:01:49.812 --> 00:01:52.139
I'm going to save this.

27
00:01:52.139 --> 00:01:53.110
When I do,

28
00:01:53.110 --> 00:01:58.388
it will automatically import those dependencies inside of our application.

29
00:01:58.388 --> 00:02:00.430
You can check that by looking in your external libraries

30
00:02:00.430 --> 00:02:02.774
and see if it's pulled that in there,

31
00:02:02.774 --> 00:02:05.946
and you can see we have our javax.annotation library that

32
00:02:05.946 --> 00:02:09.020
it's pulled in as a dependency there.

33
00:02:09.020 --> 00:02:13.153
I'm going to navigate down to my service and

34
00:02:13.153 --> 00:02:15.132
specifically the SpeakerServiceImpl.

35
00:02:15.132 --> 00:02:19.899
And you can do this in any bean that is configured by Spring.

36
00:02:19.899 --> 00:02:25.431
I want to navigate below the constructors that we have implemented in here.

37
00:02:25.431 --> 00:02:28.054
We have a no arguments constructor and a constructor

38
00:02:28.054 --> 00:02:30.379
that took a SpeakerRepository in.

39
00:02:30.379 --> 00:02:34.018
The beauty of this is it doesn't matter which constructor we're calling.

40
00:02:34.018 --> 00:02:39.009
It's still going to be called after those have ran.

41
00:02:39.009 --> 00:02:42.927
So I want to add in a private void method.

42
00:02:42.927 --> 00:02:49.689
I'm going to call mine initialize and no arguments in there.

43
00:02:49.689 --> 00:02:52.439
I'm going to add a System.out .println in here that I'm

44
00:02:52.439 --> 00:02:58.241
just going to dump out a statement that says that were

45
00:02:58.241 --> 00:03:01.453
called after the constructors.

46
00:03:01.453 --> 00:03:09.181
Put a semicolon on the end, and now the last thing that makes the magic happen.

47
00:03:09.181 --> 00:03:17.441
We're going to put in a @PostConstruct annotation, and that's it.

48
00:03:17.441 --> 00:03:21.483
So created a private void method, no arguments,

49
00:03:21.483 --> 00:03:26.587
tagged that with a @PostConstruct annotation,

50
00:03:26.587 --> 00:03:30.056
added that library inside of our dependencies,

51
00:03:30.056 --> 00:03:34.612
and now I can run our application.

52
00:03:34.612 --> 00:03:35.752
When this runs,

53
00:03:35.752 --> 00:03:41.109
you'll see that it called the SpeakerServiceImpl no args constructor,

54
00:03:41.109 --> 00:03:45.314
and then it's called that method where we're called after the

55
00:03:45.314 --> 00:03:47.794
constructors and before anything else is ran.

56
00:03:47.794 --> 00:03:51.060
So if you remember from our application,

57
00:03:51.060 --> 00:03:55.651
we have this debug statement that's dumping out for each one of these

58
00:03:55.651 --> 00:03:58.376
services just showing that they were singletons from the previous

59
00:03:58.376 --> 00:04:00.963
example and then the name that we're calling.

60
00:04:00.963 --> 00:04:03.356
You can see how we can hook that in there.

61
00:04:03.356 --> 00:04:07.151
And the nice thing about this is we can have just a simple post

62
00:04:07.151 --> 00:04:11.880
construct method that gets called for any type of logging or

63
00:04:11.880 --> 00:04:14.042
configuration things that you want to put in there.

64
00:04:14.042 --> 00:04:20.304
Now one thing I would caution here is I personally would not put things

65
00:04:20.304 --> 00:04:23.401
like obtaining connections to a database in here.

66
00:04:23.401 --> 00:04:28.221
I see people want to go through and add things inside of

67
00:04:28.221 --> 00:04:30.774
here that I don't believe fit here.

68
00:04:30.774 --> 00:04:32.505
Closing and opening connections,

69
00:04:32.505 --> 00:04:36.390
they should be handled by Spring not by you programmatically in

70
00:04:36.390 --> 00:04:39.895
this post construct or a pre-destroy annotation.

71
00:04:39.895 --> 00:04:41.903
That's another one that's available.

72
00:04:41.903 --> 00:04:46.852
You get the idea of these being aware annotations in your code.

73
00:04:46.852 --> 00:04:51.352
They should be used for configuration things that you just

74
00:04:51.352 --> 00:04:54.904
want to run after all of your constructors.

75
00:04:54.904 --> 00:04:59.000
Don't be opening and closing connections. Just a word of caution.

