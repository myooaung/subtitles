WEBVTT
1
00:00:01.400 --> 00:00:04.928
FactoryBean configuration is very similar to the init

2
00:00:04.928 --> 00:00:07.054
method configuration we just did.

3
00:00:07.054 --> 00:00:10.479
It actually builds on the factory method design pattern,

4
00:00:10.479 --> 00:00:15.012
and at least its functionality is built to work the same way.

5
00:00:15.012 --> 00:00:17.705
It's actually one of the strengths of doing this with Spring.

6
00:00:17.705 --> 00:00:21.584
The code doesn't actually have to be written as a factory

7
00:00:21.584 --> 00:00:24.932
to be utilized in Spring as a factory.

8
00:00:24.932 --> 00:00:29.205
It's also a great way to integrate legacy code into your application.

9
00:00:29.205 --> 00:00:33.260
You can actually enforce a contract in how your code is configured

10
00:00:33.260 --> 00:00:36.671
without creating a specific constructor for it.

11
00:00:36.671 --> 00:00:40.601
Typically, creational contracts are implemented in a constructor,

12
00:00:40.601 --> 00:00:42.691
but with legacy code,

13
00:00:42.691 --> 00:00:49.442
we often don't have the ability to modify it due to existing commitments.

14
00:00:49.442 --> 00:00:52.593
Using this pattern enables us to establish a

15
00:00:52.593 --> 00:00:55.660
contract without modifying that code.

16
00:00:55.660 --> 00:01:00.456
Lastly, it's how you can also work with static methods inside of a class.

17
00:01:00.456 --> 00:01:03.250
Let's look at implementing a simple demo of a

18
00:01:03.250 --> 00:01:06.287
FactoryBean inside of our code now.

19
00:01:06.287 --> 00:01:09.129
For our demo, I've opened up our conference-java project,

20
00:01:09.129 --> 00:01:12.634
and I'm going to navigate down to my source,

21
00:01:12.634 --> 00:01:16.817
main, java directory and specifically my com.pluralsight package,

22
00:01:16.817 --> 00:01:21.288
and right-click, and say New, Java Class.

23
00:01:21.288 --> 00:01:28.734
And in here, I want to type util.CalendarFactory.

24
00:01:28.734 --> 00:01:29.874
And for our demo,

25
00:01:29.874 --> 00:01:35.005
we're actually going to wrap a calendar instance in a factory so that we can

26
00:01:35.005 --> 00:01:38.199
manipulate some things and show you some examples with it.

27
00:01:38.199 --> 00:01:44.236
So now that we have this in here, we want to type implements FactoryBean,

28
00:01:44.236 --> 00:01:45.383
and FactoryBean is typed,

29
00:01:45.383 --> 00:01:54.769
so we want to pass in or type it with a Calendar object.

30
00:01:54.769 --> 00:01:58.281
And you'll have a red squiggly line underneath the code,

31
00:01:58.281 --> 00:02:01.548
and it's because we need to implement the methods that the FactoryBean

32
00:02:01.548 --> 00:02:04.944
interface is telling us we need inside of our application.

33
00:02:04.944 --> 00:02:08.249
So if I hover over that and choose Implement methods,

34
00:02:08.249 --> 00:02:11.940
and I want getObject and getObjectType, click OK,

35
00:02:11.940 --> 00:02:17.001
it'll out those default implementations in there for me.

36
00:02:17.001 --> 00:02:19.802
Now before we get into editing those,

37
00:02:19.802 --> 00:02:31.562
let's start off by saying private Calendar instance = Calendar.getInstance.

38
00:02:31.562 --> 00:02:37.102
And then in our getObject, we want to return that instance,

39
00:02:37.102 --> 00:02:45.311
and for our getObjectType, we want to do Calendar.class.

40
00:02:45.311 --> 00:02:48.350
Now we have the contract for our factory setup.

41
00:02:48.350 --> 00:02:54.151
The next thing that we want to do is add some value to our factory wrapped bean,

42
00:02:54.151 --> 00:02:58.428
so we're going to add a public void addDays method inside of here,

43
00:02:58.428 --> 00:03:03.092
and this is just a simple example to show that we can take this

44
00:03:03.092 --> 00:03:07.812
static instance and add some functionality around it that we can then

45
00:03:07.812 --> 00:03:10.763
utilize inside the rest of our application.

46
00:03:10.763 --> 00:03:19.542
So we're going to take and say instance.add ( Calendar.DAY_OF_YEAR, num).

47
00:03:19.542 --> 00:03:22.057
So what this will do is just take and add the number of days to

48
00:03:22.057 --> 00:03:24.699
our instance that we pass into this method.

49
00:03:24.699 --> 00:03:26.978
So we'll save this, and it's a little bit of a contrived example,

50
00:03:26.978 --> 00:03:29.107
but it gets the point across.

51
00:03:29.107 --> 00:03:34.363
Now we have our FactoryBean implemented, and yours should look similar to mine.

52
00:03:34.363 --> 00:03:39.179
We have our imports and package structure all the same at the top.

53
00:03:39.179 --> 00:03:42.043
We have our factory that implements the FactoryBean

54
00:03:42.043 --> 00:03:44.726
and it's typed with Calendar.

55
00:03:44.726 --> 00:03:46.959
We have our instance.

56
00:03:46.959 --> 00:03:51.306
We get our object back, our contract with our Calendar.class,

57
00:03:51.306 --> 00:03:54.445
and our method to add some days to that instance.

58
00:03:54.445 --> 00:03:56.441
So now we can go ahead and configure this,

59
00:03:56.441 --> 00:03:58.547
and we're going to do this a little bit different than you might expect.

60
00:03:58.547 --> 00:04:00.959
We're going to open our AppConfig that we had before,

61
00:04:00.959 --> 00:04:03.950
and we want to create two beans inside of here.

62
00:04:03.950 --> 00:04:08.336
We're going to create one for our actual bean instance and one for our factory.

63
00:04:08.336 --> 00:04:10.571
We're going to start off with the first one,

64
00:04:10.571 --> 00:04:17.838
and this is an @Bean, and we're going to give this a name = cal,

65
00:04:17.838 --> 00:04:22.137
and then we want to create a method that is public CalendarFactory,

66
00:04:22.137 --> 00:04:26.939
and we'll call this the calFactory.

67
00:04:26.939 --> 00:04:35.725
And it will have an instance of our CalendarFactory

68
00:04:35.725 --> 00:04:39.703
factory = new CalendarFactory.

69
00:04:39.703 --> 00:04:48.812
And this is where we can say factory.addDays.

70
00:04:48.812 --> 00:04:56.444
We're going to pass in just the number 2 here and return our factory instance.

71
00:04:56.444 --> 00:04:59.063
So there's our first bean.

72
00:04:59.063 --> 00:05:04.139
The second bean we're going to do as @Bean,

73
00:05:04.139 --> 00:05:11.751
and we'll do public Calendar, and this will be our actual calendar instance,

74
00:05:11.751 --> 00:05:19.988
cal, and this throws Exception.

75
00:05:19.988 --> 00:05:29.218
And inside of here, we'll return calFactory.getObject.

76
00:05:29.218 --> 00:05:34.180
So this is where we're actually getting the instance from our factory itself.

77
00:05:34.180 --> 00:05:38.176
Now, we need to add all of our imports, save this,

78
00:05:38.176 --> 00:05:40.330
and our bean's configured to use.

79
00:05:40.330 --> 00:05:42.428
Now you're wondering, what did we just configure?

80
00:05:42.428 --> 00:05:46.284
Well, let's implement this into our code and actually see how it's used now.

81
00:05:46.284 --> 00:05:48.210
You actually don't need to worry about line 12,

82
00:05:48.210 --> 00:05:51.947
that method for the calFactory because we're just setting that up to use.

83
00:05:51.947 --> 00:05:54.603
We're actually going to look like we're using it from

84
00:05:54.603 --> 00:05:56.640
inside of our code as an autowired bean.

85
00:05:56.640 --> 00:06:02.450
I'm going to open up my HibernateSpeakerRepository.

86
00:06:02.450 --> 00:06:14.616
And inside of here, now I can just say @Autowired and do private Calendar cal.

87
00:06:14.616 --> 00:06:19.031
And inside of my code, to make this a full- fledged example,

88
00:06:19.031 --> 00:06:23.450
I'd go ahead and add a date or something like that to my speaker object.

89
00:06:23.450 --> 00:06:28.523
I'll just put a System.out .println here where you can

90
00:06:28.523 --> 00:06:32.351
see what this instance actually is.

91
00:06:32.351 --> 00:06:41.819
And we'll say cal, and we'll do cal.getTime,

92
00:06:41.819 --> 00:06:47.128
and save this, and now we can run our application.

93
00:06:47.128 --> 00:06:50.951
So all I did was autowire this bean in, and as you can maybe guess,

94
00:06:50.951 --> 00:06:55.963
it's going to have been called from the FactoryBean of our calendar object.

95
00:06:55.963 --> 00:06:59.398
We have our static code that was called from that calendar object,

96
00:06:59.398 --> 00:07:02.546
added days to it, worked with it, manipulated things,

97
00:07:02.546 --> 00:07:04.541
and now we can reference it inside of our code.

98
00:07:04.541 --> 00:07:04.814
Before this,

99
00:07:04.814 --> 00:07:06.825
there was not a way for us to really reference a

100
00:07:06.825 --> 00:07:09.129
calendar object and pass it in this way.

101
00:07:09.129 --> 00:07:18.238
Let me run our application, right-click on our main method, and say Run.

102
00:07:18.238 --> 00:07:25.034
And you'll see when this runs down below that we have our no args constructor,

103
00:07:25.034 --> 00:07:27.718
we have our post construct still in there from our previous example,

104
00:07:27.718 --> 00:07:28.305
our service instance,

105
00:07:28.305 --> 00:07:32.480
but you can see I have a calendar object and it's added 2 days to

106
00:07:32.480 --> 00:07:35.588
my object and printed that out to the screen.

107
00:07:35.588 --> 00:07:39.269
Then I have our name and that other object address.

108
00:07:39.269 --> 00:07:43.413
So you can see right here that we have our cal: Fri Nov.

109
00:07:43.413 --> 00:07:46.541
That came from our SpeakerRepository instance,

110
00:07:46.541 --> 00:07:49.111
and that's hinged on the day that I ran this where

111
00:07:49.111 --> 00:07:51.384
it's printing this out to the screen.

112
00:07:51.384 --> 00:07:54.170
So I have my calendar that's dumped out,

113
00:07:54.170 --> 00:07:57.063
and it's going to head through that CalendarFactory,

114
00:07:57.063 --> 00:08:00.811
added those days to our years from our configuration.

115
00:08:00.811 --> 00:08:02.327
So we added two days to it.

116
00:08:02.327 --> 00:08:05.748
This is a great way if you had to pass in a bunch of dates,

117
00:08:05.748 --> 00:08:06.260
or times,

118
00:08:06.260 --> 00:08:10.742
or objects of that nature into your application for you to utilize a

119
00:08:10.742 --> 00:08:14.388
static instance like this and be able to manipulate that and then

120
00:08:14.388 --> 00:08:16.391
inject that wherever you want in your code.

121
00:08:16.391 --> 00:08:19.237
Maybe you have audit columns on your database tables.

122
00:08:19.237 --> 00:08:25.000
There's other ways to do that, but just shows you a good example of how you can utilize this.

