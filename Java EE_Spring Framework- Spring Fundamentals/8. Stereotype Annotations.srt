1
00:00:01,217 --> 00:00:04,427
To fully autowire our applications and not just do a

2
00:00:04,427 --> 00:00:06,195
hybrid like we did in the previous demo,

3
00:00:06,195 --> 00:00:09,772
we need to talk about stereotype annotations.

4
00:00:09,772 --> 00:00:12,928
Our last example we had beans still configured in the

5
00:00:12,928 --> 00:00:16,298
AppConfig file and then had some things autowired.

6
00:00:16,298 --> 00:00:19,675
To remove the need for those bean definitions in the AppConfig,

7
00:00:19,675 --> 00:00:22,018
let's discuss the stereotypes.

8
00:00:22,018 --> 00:00:25,009
The first one is @Component.

9
00:00:25,009 --> 00:00:27,610
It is actually the same thing as @Bean.

10
00:00:27,610 --> 00:00:31,865
I referenced component here just so that if you saw it in another example,

11
00:00:31,865 --> 00:00:34,493
you wouldn't wonder what it was and why we hadn't covered it.

12
00:00:34,493 --> 00:00:38,858
We'd already used @Bean, and they are basically the same thing.

13
00:00:38,858 --> 00:00:42,620
The next one is @Repository, and as you might guess,

14
00:00:42,620 --> 00:00:47,336
it's used to denote a class that's being used as a repository object.

15
00:00:47,336 --> 00:00:48,688
Nothing else changes with these.

16
00:00:48,688 --> 00:00:52,473
[00:17: 27.398 ] 
 They're just nice to label beans as such.

17
00:00:52,473 --> 00:00:56,244
You could technically just label everything as a bean or a component,

18
00:00:56,244 --> 00:01:00,377
but you could use a filter to look for specific types of annotations.

19
00:01:00,377 --> 00:01:03,879
That's beyond the scope of what we're going to talk about here.

20
00:01:03,879 --> 00:01:06,626
The last one is @Service.

21
00:01:06,626 --> 00:01:10,758
This is often confusing to people because a service does

22
00:01:10,758 --> 00:01:13,263
not mean a web service or a microservice.

23
00:01:13,263 --> 00:01:16,283
It rather means where you would put your business logic.

24
00:01:16,283 --> 00:01:19,946
There is actually a fourth annotation that we will cover in the

25
00:01:19,946 --> 00:01:23,130
Spring MVC intro course named controller.

26
00:01:23,130 --> 00:01:25,158
It's out of the scope of what we're covering here,

27
00:01:25,158 --> 00:01:27,576
so I didn't use any real estate to show it,

28
00:01:27,576 --> 00:01:32,705
but this is where you would create web or microservices for your application.

29
00:01:32,705 --> 00:01:34,138
Now that we've seen our stereotype annotations,

30
00:01:34,138 --> 00:01:38,670
let's go ahead and finish wiring up our application the whole way.

31
00:01:38,670 --> 00:01:42,076
In our AppConfig, we want to add our component scanner.

32
00:01:42,076 --> 00:01:46,678
So we're going to import @ComponentScan.

33
00:01:46,678 --> 00:01:47,372
Inside of here,

34
00:01:47,372 --> 00:01:54,380
we want to give it the string syntax for an array of the

35
00:01:54,380 --> 00:01:56,142
package structures that we want to scan,

36
00:01:56,142 --> 00:02:00,264
so we want to do com.pluralsight inside of here.

37
00:02:00,264 --> 00:02:03,781
And this just tells it that this is where we want you to

38
00:02:03,781 --> 00:02:06,482
start scanning for beans to autowire.

39
00:02:06,482 --> 00:02:08,201
Now the other thing we have inside of here is we

40
00:02:08,201 --> 00:02:09,306
still have this hybrid approach.

41
00:02:09,306 --> 00:02:11,936
On line 15, we have a bean defined.

42
00:02:11,936 --> 00:02:14,474
On line 24, we have bean defined.

43
00:02:14,474 --> 00:02:17,597
To fully autowire our application,

44
00:02:17,597 --> 00:02:20,679
we can get rid of these bean definitions inside of here.

45
00:02:20,679 --> 00:02:23,505
Now one thing I didn't mention to you when discussing the

46
00:02:23,505 --> 00:02:27,636
stereotype annotations is that the bean annotation is only

47
00:02:27,636 --> 00:02:30,484
applicable at a method level.

48
00:02:30,484 --> 00:02:34,818
So we've got a method defined on line 17 and a method defined on line 25.

49
00:02:34,818 --> 00:02:37,962
I can use the @Bean annotation here.

50
00:02:37,962 --> 00:02:41,935
I cannot use the bean annotation at a class level.

51
00:02:41,935 --> 00:02:45,592
So to demonstrate this, I'm going to open up our SpeakerService,

52
00:02:45,592 --> 00:02:51,677
and if I come out here and type @Bean, you'll see that I get an error,

53
00:02:51,677 --> 00:02:53,307
and if you hover over the error,

54
00:02:53,307 --> 00:02:57,202
it'll actually tell you that that is not available for that specified type,

55
00:02:57,202 --> 00:03:01,535
where I can come in here and say that we want a component,

56
00:03:01,535 --> 00:03:04,569
and that will work.

57
00:03:04,569 --> 00:03:06,836
That is applicable, but since we're in a service,

58
00:03:06,836 --> 00:03:10,921
I'm going to use the service stereotype annotation,

59
00:03:10,921 --> 00:03:17,212
and I'm going to go ahead and name this here.

60
00:03:17,212 --> 00:03:24,985
So we'll give us our speakerService name that we had before, and save this.

61
00:03:24,985 --> 00:03:28,589
Now the other thing I want to do is I want to autowire this bean,

62
00:03:28,589 --> 00:03:31,781
and right now it's set up for setter injection.

63
00:03:31,781 --> 00:03:33,687
Let's go ahead and leave it that way.

64
00:03:33,687 --> 00:03:36,513
I am going to go back to my AppConfig,

65
00:03:36,513 --> 00:03:42,243
and now I can actually comment out all of this code

66
00:03:42,243 --> 00:03:45,788
for this speakerService bean.

67
00:03:45,788 --> 00:03:47,798
We're actually going to do the same thing for that

68
00:03:47,798 --> 00:03:49,782
speakerRepository here in just a second,

69
00:03:49,782 --> 00:03:53,094
but let's not get ahead of ourselves just yet.

70
00:03:53,094 --> 00:03:56,350
I'll open up my HibernateSpeakerRepository,

71
00:03:56,350 --> 00:04:02,220
and I will note that we are doing this on the implementation,

72
00:04:02,220 --> 00:04:04,092
not on the interface.

73
00:04:04,092 --> 00:04:05,930
Don't make that mistake and open up the interface and try

74
00:04:05,930 --> 00:04:08,745
to do it on there because it won't work.

75
00:04:08,745 --> 00:04:14,563
At the top of our HibernateSpeakerRepositoryImpl,

76
00:04:14,563 --> 00:04:21,583
let's do @Repository, and we'll give this a name as well,

77
00:04:21,583 --> 00:04:30,923
and this will be our speakerRepository, and save that.

78
00:04:30,923 --> 00:04:35,978
So now this bean is set up as a repository using the

79
00:04:35,978 --> 00:04:37,706
repository stereotype annotation.

80
00:04:37,706 --> 00:04:42,409
Our speakerService is set up as a service with the name speakerService,

81
00:04:42,409 --> 00:04:49,106
and then our AppConfig, we can go ahead and finish commenting out all of this.

82
00:04:49,106 --> 00:04:50,638
And right now,

83
00:04:50,638 --> 00:04:54,716
speakerService is set up with that setter injection

84
00:04:54,716 --> 00:04:58,150
for the repository to go into it.

85
00:04:58,150 --> 00:05:00,006
Let's make sure we've done everything right here and go

86
00:05:00,006 --> 00:05:02,173
ahead and try and run our application.

87
00:05:02,173 --> 00:05:07,689
I want to open up our application, right-click on main,

88
00:05:07,689 --> 00:05:13,542
say Run, and you'll see that it called the no arguments constructor.

89
00:05:13,542 --> 00:05:19,240
The setter ran through our code that showed that we had those objects,

90
00:05:19,240 --> 00:05:21,920
printed out the name, and we had the same address.

91
00:05:21,920 --> 00:05:24,747
So we've actually kept that scope the same.

92
00:05:24,747 --> 00:05:27,835
Now, let's not move too fast here.

93
00:05:27,835 --> 00:05:30,691
Let's show you a couple things inside of here really quick.

94
00:05:30,691 --> 00:05:35,156
We just got rid of this bean definition that we had

95
00:05:35,156 --> 00:05:39,699
to go type all that code out for, wire up the whole thing.

96
00:05:39,699 --> 00:05:42,375
This @Scope, if we still want that scope,

97
00:05:42,375 --> 00:05:48,365
I can go back to anywhere we define a bean at the top of the code and say,

98
00:05:48,365 --> 00:05:50,282
well, let's throw Scope in here.

99
00:05:50,282 --> 00:05:53,819
So I can go in my app and still define Scope here if I want.

100
00:05:53,819 --> 00:05:56,681
By default, it's singleton, so there's no reason for me to do that,

101
00:05:56,681 --> 00:05:59,659
but I can define that at the class level.

102
00:05:59,659 --> 00:06:03,854
And we have our autowired setter injection taking place.

103
00:06:03,854 --> 00:06:06,825
If we want to change this to constructor injection,

104
00:06:06,825 --> 00:06:15,337
we can go ahead and move that up to the constructor and autowire it that way,

105
00:06:15,337 --> 00:06:20,584
and let's run our application again and see what it does.

106
00:06:20,584 --> 00:06:23,261
We go inside of our app here, go ahead and click Run,

107
00:06:23,261 --> 00:06:27,881
you'll see that we have now switched over in our log statement to

108
00:06:27,881 --> 00:06:31,275
using the repository constructor injection,

109
00:06:31,275 --> 00:06:33,548
and it's still autowired up.

110
00:06:33,548 --> 00:06:38,105
So I've effectively removed all of this configuration code

111
00:06:38,105 --> 00:06:42,540
inside of AppConfig by just having the component scanner and

112
00:06:42,540 --> 00:06:44,860
defining our beans the right way.

113
00:06:44,860 --> 00:06:49,426
This may not seem like a big thing to you except for I've worked in

114
00:06:49,426 --> 00:06:52,114
applications that have had hundreds of beans,

115
00:06:52,114 --> 00:06:53,801
2, 3, 400 beans.

116
00:06:53,801 --> 00:06:58,258
If I have to go through and define 8 lines of code to

117
00:06:58,258 --> 00:07:01,558
define each bean and then troubleshoot that,

118
00:07:01,558 --> 00:07:04,261
you're talking with 300 beans,

119
00:07:04,261 --> 00:07:09,792
a couple hundred lines of code to get that set up for that application,

120
00:07:09,792 --> 00:07:12,020
and trying to stay on top of that and maintain that,

121
00:07:12,020 --> 00:07:15,469
this really saves you a lot of time and effort,

122
00:07:15,469 --> 00:07:20,667
and it's really actually quite nice in how it wires those things up.

123
00:07:20,667 --> 00:07:22,550
So it's really simple.

124
00:07:22,550 --> 00:07:24,350
You just define the stereotype.

125
00:07:24,350 --> 00:07:26,276
You can still define the scope if you want,

126
00:07:26,276 --> 00:07:35,000
and you can move around the autowiring from constructor to setter if you want to do it based off of which contract you want to enforce.

