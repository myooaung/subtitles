1
00:00:01,252 --> 00:00:04,284
To set our application up for setter injection,

2
00:00:04,284 --> 00:00:06,914
we're going to have to define another bean inside of here

3
00:00:06,914 --> 00:00:09,336
just like we did for the SpeakerRepository,

4
00:00:09,336 --> 00:00:13,633
but before we do that, I want to open up our SpeakerServiceImpl.

5
00:00:13,633 --> 00:00:15,464
And inside of our SpeakerServiceImpl,

6
00:00:15,464 --> 00:00:19,137
we're going to get rid of this hard-coded HibernateSpeakerRepository

7
00:00:19,137 --> 00:00:24,407
reference just like we did for our Java configuration.

8
00:00:24,407 --> 00:00:27,072
Then I'm going to go down and give myself a little

9
00:00:27,072 --> 00:00:34,138
extra space and click Generate, Setter, choose SpeakerRepository,

10
00:00:34,138 --> 00:00:37,156
and click OK.

11
00:00:37,156 --> 00:00:37,982
Before I move on though,

12
00:00:37,982 --> 00:00:44,542
I do want to change the name of this from setRepository to setSpeakerRepository.

13
00:00:44,542 --> 00:00:45,816
The name isn't essential,

14
00:00:45,816 --> 00:00:49,439
but it does make it easier especially for autowiring by name,

15
00:00:49,439 --> 00:00:53,281
which we're going to show a demonstration of that later in this course.

16
00:00:53,281 --> 00:00:55,634
I'm going to click save.

17
00:00:55,634 --> 00:00:57,443
And I do like to clean up my imports.

18
00:00:57,443 --> 00:01:00,019
You can see up here on line 4 that we have an unused import.

19
00:01:00,019 --> 00:01:02,253
That's why it's highlighted in gray.

20
00:01:02,253 --> 00:01:06,598
I'm going to do Ctrl+Shift+O on my Mac and remove that import.

21
00:01:06,598 --> 00:01:12,598
You can also do Ctrl+Shift+O on a Windows machine rather than _____ Ctrl option,

22
00:01:12,598 --> 00:01:15,550
and it should clean up those imports for you.

23
00:01:15,550 --> 00:01:17,733
You can also just delete it manually.

24
00:01:17,733 --> 00:01:20,218
I'm going to save this and go back to my applicationContext,

25
00:01:20,218 --> 00:01:24,040
and let's create another bean inside of here.

26
00:01:24,040 --> 00:01:25,948
As I mentioned before, to do this,

27
00:01:25,948 --> 00:01:30,028
we just want to create a bean just like we did for the SpeakerRepository.

28
00:01:30,028 --> 00:01:32,396
So I'm going to give myself a little extra space there.

29
00:01:32,396 --> 00:01:34,970
Make sure you stay inside that closing bean element that

30
00:01:34,970 --> 00:01:38,146
I have on line 12 of my application.

31
00:01:38,146 --> 00:01:44,431
And we'll say bean and give it a name of speakerService.

32
00:01:44,431 --> 00:01:48,564
And notice I'm doing this as variable names exactly like

33
00:01:48,564 --> 00:01:51,476
we would do in the Java configuration.

34
00:01:51,476 --> 00:01:52,500
And I want to define a class,

35
00:01:52,500 --> 00:02:01,202
and the class is going to be com.pluralsight .service .SpeakerServiceImpl.

36
00:02:01,202 --> 00:02:04,465
And instead of doing the forward slash and closing element,

37
00:02:04,465 --> 00:02:08,038
I just want to do a right angle bracket,

38
00:02:08,038 --> 00:02:11,834
and it'll give me that closing bean element separate.

39
00:02:11,834 --> 00:02:13,818
And the reason we want to do this is because we're going to

40
00:02:13,818 --> 00:02:16,034
create a property inside of here now.

41
00:02:16,034 --> 00:02:25,151
And the property name is going to be speakerRepository,

42
00:02:25,151 --> 00:02:29,682
and there's two options inside of here of reference or value.

43
00:02:29,682 --> 00:02:34,345
Since we're referring to another bean, we want to do reference.

44
00:02:34,345 --> 00:02:36,126
If we were just putting a value in there,

45
00:02:36,126 --> 00:02:38,539
say some string or some numerical value,

46
00:02:38,539 --> 00:02:39,169
we would use value.

47
00:02:39,169 --> 00:02:40,467
So we want to do a reference,

48
00:02:40,467 --> 00:02:49,566
and that reference is going to be to the speakerRepository bean.

49
00:02:49,566 --> 00:02:52,628
And then we can close that off with a forward slash,

50
00:02:52,628 --> 00:02:54,853
right angle bracket, and save this.

51
00:02:54,853 --> 00:02:57,157
Now our beans have been defined,

52
00:02:57,157 --> 00:03:02,267
and we can see that we have our SpeakerServiceImpl created with a

53
00:03:02,267 --> 00:03:07,333
property that we're setting from the reference to the bean

54
00:03:07,333 --> 00:03:09,500
speakerRepository that we've defined on line 7.

55
00:03:09,500 --> 00:03:12,705
So we're going to take that bean and inject it in there,

56
00:03:12,705 --> 00:03:15,027
and it's calling the setter on our SpeakerServiceImpl

57
00:03:15,027 --> 00:03:17,625
that we created inside of here.

58
00:03:17,625 --> 00:03:20,611
That's why I wanted to name it setSpeakerRepository.

59
00:03:20,611 --> 00:03:22,710
If we had left it as setRepository,

60
00:03:22,710 --> 00:03:26,266
then our property name would just be lowercase repository,

61
00:03:26,266 --> 00:03:28,940
so it uses the bean naming convention.

62
00:03:28,940 --> 00:03:34,195
Now let's make the changes we need to to our Application.java to load this.

63
00:03:34,195 --> 00:03:35,828
Switching to our Application.java,

64
00:03:35,828 --> 00:03:40,642
we have to do the same thing that we had done

65
00:03:40,642 --> 00:03:43,193
before with our Java configuration,

66
00:03:43,193 --> 00:03:46,565
and that is to create an instance of the

67
00:03:46,565 --> 00:03:48,900
ApplicationContext to Bootstrap our application.

68
00:03:48,900 --> 00:04:00,354
So we'll say ApplicationContext appContext = new ClassPathXmlApplicationContext.

69
00:04:00,354 --> 00:04:06,445
Inside of here, we will give it the name applicationContext.xml,

70
00:04:06,445 --> 00:04:14,579
and then save that.

71
00:04:14,579 --> 00:04:15,138
Now from here,

72
00:04:15,138 --> 00:04:17,943
I'm going to comment this out just so you can see that it was hard coded

73
00:04:17,943 --> 00:04:22,851
before and we've switched it over to our newer style.

74
00:04:22,851 --> 00:04:31,866
We'll say SpeakerService service = appContext.getBean,

75
00:04:31,866 --> 00:04:43,599
and we want to pass in here the name of speakerService,

76
00:04:43,599 --> 00:04:47,570
and we'll pass in the class type so that it can do this without casting.

77
00:04:47,570 --> 00:04:53,624
So we'll say SpeakerService.class, and save this.

78
00:04:53,624 --> 00:04:55,891
And now our application is set up to run.

79
00:04:55,891 --> 00:05:00,248
I'm going to exit fullscreen so I that I can see the build console.

80
00:05:00,248 --> 00:05:06,516
And right-click on main, say Run Application.main.

81
00:05:06,516 --> 00:05:08,811
And you can see that our application loaded.

82
00:05:08,811 --> 00:05:12,189
So let's walk through what just happened here.

83
00:05:12,189 --> 00:05:16,726
In our Application.java, we Bootstrapped our application on line 9,

84
00:05:16,726 --> 00:05:21,771
as you can see here, by loading that applicationContext.xml that we created.

85
00:05:21,771 --> 00:05:28,087
Our applicationContext here is created inside of our source,

86
00:05:28,087 --> 00:05:31,542
main, resources folder, and so that means that Maven,

87
00:05:31,542 --> 00:05:36,703
when compiling, will actually compile it out to our classes directory,

88
00:05:36,703 --> 00:05:41,286
so under target classes, you can see our applicationContext.

89
00:05:41,286 --> 00:05:42,646
So when it goes to run our application,

90
00:05:42,646 --> 00:05:45,907
it's actually copied that down to our target classes directory,

91
00:05:45,907 --> 00:05:49,570
and that's just where our classpath launches from.

92
00:05:49,570 --> 00:05:51,937
And then we created beans inside of here.

93
00:05:51,937 --> 00:05:54,344
We started off with a speakerRepository,

94
00:05:54,344 --> 00:06:00,370
and then we created the speakerService and did a reference to that

95
00:06:00,370 --> 00:06:03,475
speakerRepository into our speakerService that did setter injection,

96
00:06:03,475 --> 00:06:09,087
then we changed our speakerService to accept that setter injection.

97
00:06:09,087 --> 00:06:13,949
And remember, on line 16, we changed that name to setSpeakerRepository,

98
00:06:13,949 --> 00:06:18,480
and that referenced back to our applicationContext where on line 11,

99
00:06:18,480 --> 00:06:21,796
we said that the property name was speakerRepository.

100
00:06:21,796 --> 00:06:23,978
If we hadn't changed that and just left that as repository,

101
00:06:23,978 --> 00:06:27,499
it would've just been property name repository,

102
00:06:27,499 --> 00:06:28,360
lowercase.

103
00:06:28,360 --> 00:06:31,011
And our application is actually all configured now.

104
00:06:31,011 --> 00:06:35,011
The only thing we really had to any different was create this

105
00:06:35,011 --> 00:06:37,699
applicationContext where we had a namespace in here.

106
00:06:37,699 --> 00:06:39,242
We start defining our beans,

107
00:06:39,242 --> 00:06:42,065
and our beans actually look quite similar to what we

108
00:06:42,065 --> 00:06:43,603
did in the Java configuration.

109
00:06:43,603 --> 00:06:46,461
It just may seem a little bit more second nature to do

110
00:06:46,461 --> 00:06:47,839
you to do it in the Java configuration,

111
00:06:47,839 --> 00:06:57,000
but you can see how we are now wiring up our application the same way. We have that same setter injection inside of our application now.

