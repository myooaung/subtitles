WEBVTT
1
00:00:00.270 --> 00:00:02.730
Hi guys and welcome back to the tutorial.

2
00:00:02.730 --> 00:00:04.090
Finally this is the big moment.

3
00:00:04.110 --> 00:00:06.720
We will start to build all on translator.

4
00:00:06.720 --> 00:00:08.820
We have all the data that is ready to be used.

5
00:00:08.820 --> 00:00:10.510
So let's get into it right now.

6
00:00:10.530 --> 00:00:17.490
Keep in mind of the architecture of the transformer we have here this whole blob that is called the

7
00:00:17.490 --> 00:00:18.150
encoder.

8
00:00:18.420 --> 00:00:20.410
And here what is called the decoder.

9
00:00:20.430 --> 00:00:24.150
Each one will use this multi had attentional civil layer.

10
00:00:24.270 --> 00:00:26.150
We will have to build this one later.

11
00:00:26.370 --> 00:00:32.700
But first we will focus on the very first parts of the model which is the embedding step and the positional

12
00:00:32.700 --> 00:00:33.750
encoding.

13
00:00:33.840 --> 00:00:40.500
Of course we will not write our own embedding because it already existing intense flow but we will create

14
00:00:40.530 --> 00:00:48.360
a custom layer in order to process this positional encoding that they explained in the paper as a quick

15
00:00:48.360 --> 00:00:49.990
reminder.

16
00:00:50.020 --> 00:00:55.210
Here is where they explain how the positional encoding works.

17
00:00:55.240 --> 00:01:01.570
Basically we use the sinus and the cosine is for each different position and each different dimension

18
00:01:01.570 --> 00:01:02.870
of the embedding.

19
00:01:02.980 --> 00:01:07.090
The position being the position of the words in the sentence.

20
00:01:07.090 --> 00:01:13.510
So I wrote those two little formulas right here in our notebook and so I guess we are ready to start

21
00:01:13.510 --> 00:01:20.110
calling this positional encoding layer so as we are creating a layer this will be a class that we will

22
00:01:20.110 --> 00:01:28.540
call positional encoding and this will inherit from the layers

23
00:01:31.110 --> 00:01:31.920
layer class

24
00:01:34.850 --> 00:01:42.800
first thing we always have to do when we are creating a layer is to define the in its method which is

25
00:01:42.800 --> 00:01:43.090
called.

26
00:01:43.100 --> 00:01:49.190
Each time you create an object from this class and it will take as arguments self just like any other

27
00:01:49.190 --> 00:01:53.650
method this is the layer that will only make mathematical computations.

28
00:01:53.660 --> 00:01:59.570
So we will probably not need anything more as Parramatta because there will be no trainable weights

29
00:01:59.900 --> 00:02:04.050
no sub players or anything of this kind in in the positional encoding phase.

30
00:02:04.160 --> 00:02:09.470
So this init method will only call super positional

31
00:02:12.060 --> 00:02:21.900
encoding self that's in its so what this line does is is that it calls the function of of the class

32
00:02:21.900 --> 00:02:28.230
layer which has been perfectly well called the right here so that the object can be builds correctly

33
00:02:28.290 --> 00:02:30.720
with all the features that any layer should have.

34
00:02:30.780 --> 00:02:37.280
Now we will create another method that will perform those operations right here.

35
00:02:37.440 --> 00:02:45.900
What are what is inside the sine ascending the cosine is functions so we will define let's say get angles

36
00:02:47.340 --> 00:02:58.320
and the tendrils which again takes self pause I and the model as parameters and will want supposed to

37
00:02:58.320 --> 00:03:01.440
be an array and same thing for I here.

38
00:03:01.460 --> 00:03:05.060
Pause will be the array of all the positions of the inputs.

39
00:03:05.070 --> 00:03:12.480
So in all case actually each will be all the intake goes from 0 to 19 and I will be another array of

40
00:03:12.510 --> 00:03:15.210
all the possible dimensions of the embedding.

41
00:03:15.210 --> 00:03:27.460
So let's just write the math we will say that angles are equal to 1 over and P that power ten thousand

42
00:03:29.170 --> 00:03:33.600
dots because we wanted to be afloat and not in Antigua.

43
00:03:34.090 --> 00:03:41.480
And the power he is two times I divided by two.

44
00:03:41.580 --> 00:03:48.480
The reason why we do this is that the way this is written here is that we apply sign to all the even

45
00:03:48.480 --> 00:03:52.460
numbers and cosine to all the odd numbers.

46
00:03:52.470 --> 00:03:56.440
So in this formulae I doesn't represents the actual dimension.

47
00:03:56.460 --> 00:04:01.930
This is two times I or two times I plus one that really represents the dimension.

48
00:04:01.950 --> 00:04:07.280
This is just a convenient way to split the dimensions between the odd and even numbers.

49
00:04:07.410 --> 00:04:11.740
Let's say we want to come from the angle for dimension 10 for instance.

50
00:04:11.790 --> 00:04:14.180
This mean we want to refer to this line.

51
00:04:14.520 --> 00:04:16.580
And that I hear will be equal to 5.

52
00:04:16.590 --> 00:04:19.320
And so this is why here we will have two times 5.

53
00:04:19.470 --> 00:04:22.770
So in all codes for the dimension 10 we get right.

54
00:04:22.780 --> 00:04:29.490
He the number five by dividing 10 by two and for the dimension eleven as it is an odd number.

55
00:04:29.490 --> 00:04:35.040
We have to refer to the second line right here and say that again is equal to 5.

56
00:04:35.130 --> 00:04:38.210
And we get the exact same number as 10.

57
00:04:38.220 --> 00:04:40.010
Because I will be equal to 5.

58
00:04:40.080 --> 00:04:45.900
And here this is what happens because this is a division that gives us an integer at the end.

59
00:04:45.900 --> 00:04:54.090
So all angles viable he will have each results twice one will be used to apply the sine function and

60
00:04:54.090 --> 00:04:59.490
the other one will be used to apply the cosine function so that we get the positional encoding for all

61
00:04:59.490 --> 00:05:02.160
the even and all the numbers.

62
00:05:02.190 --> 00:05:07.430
So this was the reason why we divide AI by 2 keeping the integral parts of it.

63
00:05:07.440 --> 00:05:16.770
Now that this is done we just have to divide this number by and Pete that floats 32 G model because

64
00:05:16.770 --> 00:05:20.720
we want to consider this number as it floats and not an integer.

65
00:05:20.730 --> 00:05:23.850
Otherwise the division might misbehave.

66
00:05:23.850 --> 00:05:33.810
And finally we just return those times angle times angles while we want here is to have a matrix of

67
00:05:33.810 --> 00:05:39.140
shape SEC length the model.

68
00:05:39.490 --> 00:05:44.880
So this way we get exactly what we just want to add to our inputs in order to have a positional encoding

69
00:05:45.530 --> 00:05:58.590
so that is why we are asking to get the position as a matrix of size seq length 1 and I as a matrix

70
00:05:58.590 --> 00:06:02.060
of size 1 the model.

71
00:06:02.220 --> 00:06:07.830
In that case the multiplication right here is a valid matrix multiplication will give us a matrix of

72
00:06:07.830 --> 00:06:13.680
the right's shapes that we are looking for right here and now that we have this get angles method that

73
00:06:13.680 --> 00:06:18.070
is ready we can create the call method which is the method that is used.

74
00:06:18.120 --> 00:06:25.270
Each time you call the layer so as usual we need to add cell Frankie and of course the inputs of the

75
00:06:25.270 --> 00:06:31.000
layer which will be used to compute the positional anchoring and we will of course return the inputs

76
00:06:31.150 --> 00:06:40.060
plus the positional encoding so we will need to create the pose and the AI valuables and in order to

77
00:06:40.060 --> 00:06:45.460
do that we will need to get the length of the sequences as well as the dimension of the embedding.

78
00:06:45.460 --> 00:06:56.830
The way we will do this is just by calling seq length equals inputs that shape dots as least because

79
00:06:56.860 --> 00:07:01.960
if you just type in the shape you will get a t f the shape tensor.

80
00:07:01.970 --> 00:07:10.560
I think objects and you just can't have access to the dimensions as you can do with the lists are array.

81
00:07:10.780 --> 00:07:12.870
Same thing for the dimension here.

82
00:07:13.060 --> 00:07:18.730
So the model equals inputs that shape that as lists.

83
00:07:19.420 --> 00:07:26.310
And this time is the last dimension and now we have all we need to build our pose and I parameters for

84
00:07:26.350 --> 00:07:27.550
get angles.

85
00:07:27.550 --> 00:07:38.800
So let's go get angles with the right parameters so angles equals stuff that gets angles and b that

86
00:07:38.800 --> 00:07:43.640
range which is the best way to get all the numbers from zero to a given integer.

87
00:07:43.850 --> 00:07:53.630
Here it's sic length and as we said before we wants this parameter to have those dimensions we don't

88
00:07:53.630 --> 00:07:58.960
want it to just be a simple array we want to add a dimension which of course will be empty.

89
00:07:59.000 --> 00:08:06.200
So the way we do that is that we call this array keeping everything with this column and we add a new

90
00:08:06.200 --> 00:08:10.390
axis with NDP that new access.

91
00:08:10.460 --> 00:08:17.300
It just creates another dimension which is empty but it's necessary if you want to multiply two mattresses

92
00:08:17.300 --> 00:08:20.050
like we do at the end of the get angles method.

93
00:08:20.110 --> 00:08:23.370
Now we can just do the same thing with the model.

94
00:08:23.720 --> 00:08:32.840
So NDP does arrange the model but as we mentioned we don't want this to have its second dimension as

95
00:08:32.840 --> 00:08:33.350
empty.

96
00:08:33.350 --> 00:08:39.410
We wanted to add the first dimension as empty so that the multiplication works well at the end so this

97
00:08:39.410 --> 00:08:44.810
is along the firsts axis that we want to add something and then we keep all the numbers.

98
00:08:44.840 --> 00:08:52.050
And finally the last parameter that's I'll get angles function needs is the model.

99
00:08:52.070 --> 00:08:56.650
Here we are we have everything we we need before completing the sine and the cosine functions.

100
00:08:56.660 --> 00:09:06.550
So let's do it right now and let's say that angles for the even dimensions of the embedding.

101
00:09:06.560 --> 00:09:08.960
So this is the best way to do that.

102
00:09:08.960 --> 00:09:15.620
This means that we want to access all of the indices starting from zero to the end and the steps will

103
00:09:15.620 --> 00:09:17.060
be two instead of one.

104
00:09:17.090 --> 00:09:21.730
So this will get us the indices 0 2 4 and so on.

105
00:09:22.040 --> 00:09:23.750
So only that even ones.

106
00:09:23.810 --> 00:09:38.530
And so those ones let's apply the same function so end p that sine and goes to basically the same indices.

107
00:09:38.550 --> 00:09:45.300
So here we just applied the same function to the angles corresponds to an even dimension as we see in

108
00:09:45.300 --> 00:09:46.190
the formula.

109
00:09:46.530 --> 00:09:54.570
And we just have to do the same thing with the cosine function for the other dimensions so angles this

110
00:09:54.570 --> 00:09:56.210
time we start at 1.

111
00:09:56.220 --> 00:10:03.900
But once again we wanted to make steps of size 2 in order to have access to all the to all the odd numbers

112
00:10:05.450 --> 00:10:06.990
and B that costs.

113
00:10:07.020 --> 00:10:10.540
And here it's the same thing and goes everything.

114
00:10:10.760 --> 00:10:14.090
Start with 1 strides of 2.

115
00:10:14.410 --> 00:10:17.560
Finally we have one more thing to do as intensive flow.

116
00:10:17.560 --> 00:10:19.240
Everything works with batch.

117
00:10:19.240 --> 00:10:23.560
We know that we will have one more dimension in our inputs which is the first one.

118
00:10:23.620 --> 00:10:35.520
So we have to create an additional empty dimension by seeing that pose encoding equals angles that we

119
00:10:35.520 --> 00:10:37.660
add this new axis.

120
00:10:37.720 --> 00:10:41.280
And B the new axis and we keep everything else.

121
00:10:41.370 --> 00:10:43.380
Sorry with three points.

122
00:10:43.380 --> 00:10:45.420
This is the way to say that we keep everything.

123
00:10:45.480 --> 00:10:51.300
And finally as this was a layer we receive the inputs and while we want to return all those inputs plus

124
00:10:51.300 --> 00:10:56.600
the positional encoding So let's return inputs.

125
00:10:56.620 --> 00:11:00.940
Plus as we can see all positional encoding on MP arrays.

126
00:11:00.990 --> 00:11:06.600
We made all our operations with an MP so last thing we have to do is just to make them tenses that we

127
00:11:06.600 --> 00:11:17.030
can add them to the inputs so inputs plus t edit costs those encoding and we'll make them floats with

128
00:11:17.030 --> 00:11:21.610
t after float 32 and that's it s.

129
00:11:21.620 --> 00:11:22.070
Here we are.

130
00:11:22.100 --> 00:11:25.140
We have all positional encoding layer that is ready to be used.

131
00:11:25.160 --> 00:11:29.860
Now get ready to work on the most important parts of the model which is the attention and mechanism

132
00:11:29.990 --> 00:11:30.520
and see you soon.
