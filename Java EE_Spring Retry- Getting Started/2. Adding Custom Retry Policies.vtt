WEBVTT
1
00:00:00.983 --> 00:00:03.266
We've seen how to use the execute method on RetryTemplate.

2
00:00:03.266 --> 00:00:03.648
Now,

3
00:00:03.648 --> 00:00:07.213
let's look at the two setter methods on RetryTemplate that

4
00:00:07.213 --> 00:00:10.804
enable us to tune its behavior via policies.

5
00:00:10.804 --> 00:00:13.593
The first is setRetryPolicy.

6
00:00:13.593 --> 00:00:17.934
This setter accepts an implementation of the RetryPolicy interface.

7
00:00:17.934 --> 00:00:22.086
The RetryPolicy interface is implemented by a few different policy classes,

8
00:00:22.086 --> 00:00:25.703
but the one we'll be using is SimpleRetryPolicy.

9
00:00:25.703 --> 00:00:29.228
SimpleRetryPolicy's constructor allows us to specify the maximum number

10
00:00:29.228 --> 00:00:33.655
of times to attempt an operation via an integer value.

11
00:00:33.655 --> 00:00:38.121
The second RetryTemplate policy setter method is setBackOffPolicy.

12
00:00:38.121 --> 00:00:42.526
This setter accepts an implementation of the BackOffPolicy interface.

13
00:00:42.526 --> 00:00:45.606
The BackOffPolicy interface is also implemented by

14
00:00:45.606 --> 00:00:48.015
a few different policy classes.

15
00:00:48.015 --> 00:00:51.109
We'll start with FixedBackOffPolicy,

16
00:00:51.109 --> 00:00:56.303
but we'll also be using ExponentialBackOffPolicy later in this module.

17
00:00:56.303 --> 00:00:59.297
FixedBackOffPolicy has a setBackOffPeriod method,

18
00:00:59.297 --> 00:01:02.714
which accepts a backOffPeriod of type long.

19
00:01:02.714 --> 00:01:05.816
This is the time RetryTemplate will wait between attempts,

20
00:01:05.816 --> 00:01:10.010
and in this case it's a fixed period.

21
00:01:10.010 --> 00:01:13.136
We referenced Spring Retry's default back off and max attempts,

22
00:01:13.136 --> 00:01:16.994
and now we can see how we're able to customize these parameters for

23
00:01:16.994 --> 00:01:22.412
ourselves using FixedBackOffPolicy or ExponentialBackOffPolicy for back

24
00:01:22.412 --> 00:01:26.028
off and SimpleRetryPolicy for max attempts.

25
00:01:26.028 --> 00:01:29.558
To configure custom retry policies in our SaaS Bass sample application,

26
00:01:29.558 --> 00:01:33.800
we first need to specify a SimpleRetryPolicy with maxAttempts

27
00:01:33.800 --> 00:01:36.228
that we'll read from our properties files.

28
00:01:36.228 --> 00:01:40.417
Then we need to specify a FixedBackOffPolicy with a

29
00:01:40.417 --> 00:01:42.942
backoffPeriod from our properties file.

30
00:01:42.942 --> 00:01:46.313
Lastly, we'll set both policies on our RetryTemplate.

31
00:01:46.313 --> 00:01:47.213
All right, enough talk.

32
00:01:47.213 --> 00:01:48.584
Let's code.

33
00:01:48.584 --> 00:01:51.815
To follow along with this demo, for the Bass Tracker Service,

34
00:01:51.815 --> 00:01:54.787
check out either the initial branch if you want to code along,

35
00:01:54.787 --> 00:01:57.614
or the final branch if you want to follow along.

36
00:01:57.614 --> 00:02:00.898
For the Lake Profile Service, we're not making any changes in this module,

37
00:02:00.898 --> 00:02:04.413
so check out the branch with the module name.

38
00:02:04.413 --> 00:02:06.475
Here in our BassTrackerServiceApplication file,

39
00:02:06.475 --> 00:02:08.952
we want to start by adding a SimpleRetryPolicy.

40
00:02:08.952 --> 00:02:13.516
We will add that in our RetryTemplate bean.

41
00:02:13.516 --> 00:02:19.456
We need to specify a maxAttempts parameter in the SimpleRetryPolicy constructor.

42
00:02:19.456 --> 00:02:22.293
So let's add a property to our properties file.

43
00:02:22.293 --> 00:02:26.926
We will name it retry.maxAttempts, and we will set it to 4.

44
00:02:26.926 --> 00:02:29.740
Then we will go back to our RetryTemplate bean and add an

45
00:02:29.740 --> 00:02:32.309
integer parameter that we can use for maxAttempts,

46
00:02:32.309 --> 00:02:35.633
and pass it into the policy constructor.

47
00:02:35.633 --> 00:02:39.038
Now we will set the setRetryPolicy setter on

48
00:02:39.038 --> 00:02:42.004
RetryTemplate with our new retryPolicy.

49
00:02:42.004 --> 00:02:45.743
After setting the retryPolicy, we can set the back off policy.

50
00:02:45.743 --> 00:02:49.504
Let's start in the properties file by specifying a property named

51
00:02:49.504 --> 00:02:54.367
retry.fixed .backoffPeriod and set it to 1000 ms,

52
00:02:54.367 --> 00:02:56.204
or 1 second.

53
00:02:56.204 --> 00:02:58.279
Then, let's go back to our RetryTemplate bean,

54
00:02:58.279 --> 00:03:01.470
pass in the parameter, create a new FixedBackOffPolicy,

55
00:03:01.470 --> 00:03:06.694
and pass the BackoffPeriod to its setBackOffPeriod setter method.

56
00:03:06.694 --> 00:03:12.034
Then we can pass it to RetryTemplate's setBackOffPolicy method.

57
00:03:12.034 --> 00:03:14.969
Now before we run it to see what it does,

58
00:03:14.969 --> 00:03:19.577
let's add a log to the LakeProfileClient so we can see what the back off

59
00:03:19.577 --> 00:03:24.810
duration is each time Spring Retry attempts a GET request.

60
00:03:24.810 --> 00:03:28.303
Let's also switch over to lake-profile- services GET endpoint and

61
00:03:28.303 --> 00:03:32.466
throw a socket exception for every GET request.

62
00:03:32.466 --> 00:03:35.708
We're doing this so that the operating system's TCP stack

63
00:03:35.708 --> 00:03:39.571
connection timeout doesn't interfere with our timing.

64
00:03:39.571 --> 00:03:42.846
Okay, let's start up the lake-profile-service,

65
00:03:42.846 --> 00:03:47.794
then let's switch over to the bass-tracker- service and start it.

66
00:03:47.794 --> 00:03:51.919
We see that our back off duration was very close to 1000 ms.

67
00:03:51.919 --> 00:03:55.424
A fixed back off policy is a good start,

68
00:03:55.424 --> 00:03:59.339
and I'd recommend starting with a fixed back off policy if your microservice

69
00:03:59.339 --> 00:04:03.494
architecture is relatively simple with minimal concurrency.

70
00:04:03.494 --> 00:04:06.537
However, for large, highly concurrent microservice environments,

71
00:04:06.537 --> 00:04:16.000
a fixed back off policy could be problematic. We will examine why this is and look at implementing a better solution next.

