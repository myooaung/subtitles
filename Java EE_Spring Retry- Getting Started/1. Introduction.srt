1
00:00:00,000 --> 00:00:03,145
As our sample application sits right now,

2
00:00:03,145 --> 00:00:06,110
we're able to customize max attempts and back off,

3
00:00:06,110 --> 00:00:09,840
which is great, but we're still retrying every type of failure.

4
00:00:09,840 --> 00:00:11,002
Think about it.

5
00:00:11,002 --> 00:00:14,987
Every HTTP 400 bad request error will be dutifully retried.

6
00:00:14,987 --> 00:00:18,659
Typically, we want an HTTP 400 to fail immediately.

7
00:00:18,659 --> 00:00:20,368
Can Spring Retry do that?

8
00:00:20,368 --> 00:00:20,867
Absolutely.

9
00:00:20,867 --> 00:00:24,892
Welcome back to Spring Retry: Getting Started, from Pluralsight.

10
00:00:24,892 --> 00:00:26,009
My name is Tyler Griffiths,

11
00:00:26,009 --> 00:00:28,726
and in this module we're going to add custom exception

12
00:00:28,726 --> 00:00:32,203
handling to our Spring Retry implementation.

13
00:00:32,203 --> 00:00:33,024
In the last module,

14
00:00:33,024 --> 00:00:36,363
we saw that RetryTemplate allows us to set a retry

15
00:00:36,363 --> 00:00:39,949
policy using the RetryPolicy interface.

16
00:00:39,949 --> 00:00:44,109
The RetryPolicy interface is implemented by simple RetryPolicy.

17
00:00:44,109 --> 00:00:48,967
We used one of simple RetryPolicy's constructors to specify max attempts.

18
00:00:48,967 --> 00:00:51,617
But simple RetryPolicy has another constructor that allows

19
00:00:51,617 --> 00:00:55,580
us to specify a map of exception classes that extend the

20
00:00:55,580 --> 00:00:58,965
Throwable class as the key, and a Boolean as the value.

21
00:00:58,965 --> 00:01:02,036
The Boolean indicates if the exception is retriable,

22
00:01:02,036 --> 00:01:06,756
i.e., a true means retry this type of exception.

23
00:01:06,756 --> 00:01:10,979
In this module, we will add custom retry exceptions to our RetryTemplate.

24
00:01:10,979 --> 00:01:14,517
We will then look at different types of server errors and how they can be

25
00:01:14,517 --> 00:01:18,570
handled individually with custom retriable exceptions.

26
00:01:18,570 --> 00:01:19,772
By the end of this course module,

27
00:01:19,772 --> 00:01:23,413
we'll have added custom retry exceptions to our SaaS Bass sample

28
00:01:23,413 --> 00:01:28,000
application and completed SaaS Bass's wish list. Hurray!

