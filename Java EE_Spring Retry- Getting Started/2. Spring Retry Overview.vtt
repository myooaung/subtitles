WEBVTT
1
00:00:01.049 --> 00:00:03.408
So what does Spring Retry do?

2
00:00:03.408 --> 00:00:06.575
At a high level, we have a client and a server.

3
00:00:06.575 --> 00:00:09.450
Let's assume this client has implemented Spring Retry and

4
00:00:09.450 --> 00:00:12.725
let's say the server is down temporarily.

5
00:00:12.725 --> 00:00:16.931
The client attempts a RESTful request, but the request fails,

6
00:00:16.931 --> 00:00:18.305
causing an I/O error,

7
00:00:18.305 --> 00:00:22.760
which triggers Spring Retry to attempt the same request again.

8
00:00:22.760 --> 00:00:27.924
The server is still down, causing an error, so Spring Retry tries again.

9
00:00:27.924 --> 00:00:32.591
The server is still down, so it retries again, and on and on.

10
00:00:32.591 --> 00:00:37.188
The client with Spring Retry will retry as many times as we specify,

11
00:00:37.188 --> 00:00:38.692
or in this example,

12
00:00:38.692 --> 00:00:43.895
until the server comes back up and returns a successful response.

13
00:00:43.895 --> 00:00:48.680
Spring Retry is made possible thanks to the RetryOperations interface.

14
00:00:48.680 --> 00:00:54.049
One implementation of RetryOperations provided by Spring is RetryTemplate,

15
00:00:54.049 --> 00:00:56.964
which is what we'll be using in the SaaS Bass sample

16
00:00:56.964 --> 00:00:59.515
application to implement retry.

17
00:00:59.515 --> 00:01:02.091
The execute function allows us to specify an

18
00:01:02.091 --> 00:01:05.013
operation in a callback to be retried.

19
00:01:05.013 --> 00:01:09.094
RetryTemplate has parameters that can be customized so we can standardize

20
00:01:09.094 --> 00:01:14.890
and tune our retry for our application's specific needs.

21
00:01:14.890 --> 00:01:18.029
So what benefits does Spring Retry provide?

22
00:01:18.029 --> 00:01:18.732
For starters,

23
00:01:18.732 --> 00:01:22.790
Spring Retry is a top-level Spring project at the same level as

24
00:01:22.790 --> 00:01:26.270
the likes of Spring Framework and Spring Boot.

25
00:01:26.270 --> 00:01:28.212
That should give SaaS Bass and others confidence knowing

26
00:01:28.212 --> 00:01:31.584
that it's well implemented and supported.

27
00:01:31.584 --> 00:01:34.507
Spring Retry provides a standardized platform for retry

28
00:01:34.507 --> 00:01:37.120
that is also highly configurable.

29
00:01:37.120 --> 00:01:39.901
Spring Retry wraps existing microservice clients so there's no

30
00:01:39.901 --> 00:01:42.841
need to start from scratch to implement retry.

31
00:01:42.841 --> 00:01:43.327
Lastly,

32
00:01:43.327 --> 00:01:47.285
Spring Retry follows familiar Spring and Java integration and configuration

33
00:01:47.285 --> 00:01:56.000
patterns using bean dependency injection with properties files, so adding it should feel familiar to most Java developers.

