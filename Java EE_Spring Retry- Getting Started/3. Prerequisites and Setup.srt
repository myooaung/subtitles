1
00:00:00,974 --> 00:00:02,433
This is a beginner level course,

2
00:00:02,433 --> 00:00:04,934
so we're going to keep the prerequisites to a minimum.

3
00:00:04,934 --> 00:00:11,333
For our environment setup, we'll need to install JDK 8, IntelliJ IDEA, and Git.

4
00:00:11,333 --> 00:00:14,093
I won't be demonstrating installing those items,

5
00:00:14,093 --> 00:00:19,014
but I've included the download link for their respective installers.

6
00:00:19,014 --> 00:00:19,964
In terms of knowledge,

7
00:00:19,964 --> 00:00:23,190
I'm assuming you have some familiarity with Java or other

8
00:00:23,190 --> 00:00:28,043
object-oriented language such as C# or C++.

9
00:00:28,043 --> 00:00:30,979
If not, Java Fundamentals: The Java Language,

10
00:00:30,979 --> 00:00:34,063
by Jim Wilson, would be a good place to start.

11
00:00:34,063 --> 00:00:37,321
I'm also assuming you have some familiarity with Git,

12
00:00:37,321 --> 00:00:40,927
specifically cloning a repository and checking out branches.

13
00:00:40,927 --> 00:00:41,872
If not, don't worry,

14
00:00:41,872 --> 00:00:44,606
I'll be demoing how to clone and check out the needed

15
00:00:44,606 --> 00:00:47,060
branches for each of the modules.

16
00:00:47,060 --> 00:00:47,439
Lastly,

17
00:00:47,439 --> 00:00:50,114
since our sample application operates in the context

18
00:00:50,114 --> 00:00:51,313
of a microservice environment,

19
00:00:51,313 --> 00:00:55,350
it wouldn't hurt to know something about microservices.

20
00:00:55,350 --> 00:00:57,909
Microservices: The Big Picture, by Antonio Goncalves,

21
00:00:57,909 --> 00:01:02,814
is a good reference, though not required.

22
00:01:02,814 --> 00:01:07,473
The SaaS Bass sample application consists of two self-contained microservices,

23
00:01:07,473 --> 00:01:10,176
the Bass Tracker Service and the Lake Profile Service.

24
00:01:10,176 --> 00:01:12,553
We'll talk more about these services shortly,

25
00:01:12,553 --> 00:01:16,781
but suffice it to say for now that each service has its own repository

26
00:01:16,781 --> 00:01:21,111
that you'll need to clone into a local directory.

27
00:01:21,111 --> 00:01:24,909
I've created two public GitHub repositories for the two

28
00:01:24,909 --> 00:01:27,203
microservices in the sample application.

29
00:01:27,203 --> 00:01:30,492
You can access the Bass Tracker Service using this URL,

30
00:01:30,492 --> 00:01:35,293
and the Lake Profile Service using this URL.

31
00:01:35,293 --> 00:01:38,912
To clone the repositories, you can click on the Clone or download button,

32
00:01:38,912 --> 00:01:42,584
which will display a URL.

33
00:01:42,584 --> 00:01:46,833
I've organized these repositories by module using Git branches.

34
00:01:46,833 --> 00:01:48,268
If we look at the branches for the bass-tracker-service,

35
00:01:48,268 --> 00:01:53,253
we can see that I've prefixed the branch names with the module name,

36
00:01:53,253 --> 00:01:58,484
followed by either initial, final or the pain point name we're simulating.

37
00:01:58,484 --> 00:02:02,462
This makes it simple to check out a branch and push play to see what it does.

38
00:02:02,462 --> 00:02:05,239
I'll highlight which branch to check out for each

39
00:02:05,239 --> 00:02:08,252
service as we simulate pain points.

40
00:02:08,252 --> 00:02:11,719
Assuming you have all the prerequisites installed for the environment,

41
00:02:11,719 --> 00:02:17,287
let's clone the repositories and get our services set up to run in IntelliJ.

42
00:02:17,287 --> 00:02:21,597
The first thing we need to do is clone the bass-tracker-service and

43
00:02:21,597 --> 00:02:25,964
lake-profile-service repositories into a local directory.

44
00:02:25,964 --> 00:02:28,081
There are many ways to clone a repository,

45
00:02:28,081 --> 00:02:33,009
but for this demo we'll use IntelliJ's Check out from Version Control feature.

46
00:02:33,009 --> 00:02:35,865
We will copy the URL we got from the Clone or download

47
00:02:35,865 --> 00:02:40,240
button in GitHub and paste it in as the URL.

48
00:02:40,240 --> 00:02:42,754
Now we click Clone.

49
00:02:42,754 --> 00:02:44,853
It may ask if you want to open it.

50
00:02:44,853 --> 00:02:50,293
We'll be importing the repository manually, so we won't open it at this time.

51
00:02:50,293 --> 00:02:53,239
We'll do the same for the lake-profile-service.

52
00:02:53,239 --> 00:02:55,950
After cloning both services into a local directory,

53
00:02:55,950 --> 00:02:59,303
we're ready to import them into IntelliJ.

54
00:02:59,303 --> 00:03:02,403
To do that, we'll use IntelliJ's Import Project feature.

55
00:03:02,403 --> 00:03:07,692
Starting with the lake-profile-service, select Maven as the import model,

56
00:03:07,692 --> 00:03:11,996
Next, leave all the defaults and click Next,

57
00:03:11,996 --> 00:03:13,234
and Next.

58
00:03:13,234 --> 00:03:18,943
Make sure JDK 1.8 is selected, and then Finish.

59
00:03:18,943 --> 00:03:22,904
It will take a moment to index the module.

60
00:03:22,904 --> 00:03:30,954
Once it's indexed, let's import the bass-tracker-service.

61
00:03:30,954 --> 00:03:35,044
Select Maven as the import model, leave all defaults,

62
00:03:35,044 --> 00:03:42,392
and make sure JDK 1.8 is selected, and Finish.

63
00:03:42,392 --> 00:03:43,123
To start,

64
00:03:43,123 --> 00:03:47,954
I'm going to show a high-level overview of how these services work together,

65
00:03:47,954 --> 00:03:54,293
and then we'll dive into the gory details of how they are built.

66
00:03:54,293 --> 00:03:56,991
Let's start with the lake-profile-service.

67
00:03:56,991 --> 00:04:01,951
First, we need to make sure we're on the correct branch for the module,

68
00:04:01,951 --> 00:04:06,384
so let's check out the correct branch.

69
00:04:06,384 --> 00:04:12,413
Next, we'll create a run configuration for the lake-profile-service.

70
00:04:12,413 --> 00:04:15,436
Make sure to select the class with the main method and leave

71
00:04:15,436 --> 00:04:18,020
everything else at the preset defaults.

72
00:04:18,020 --> 00:04:19,828
At this point,

73
00:04:19,828 --> 00:04:25,359
we can run the lake-profile-service and verify that we see the web

74
00:04:25,359 --> 00:04:28,974
service has started and is running on port 8080.

75
00:04:28,974 --> 00:04:31,608
After lake-profile-service is up and running,

76
00:04:31,608 --> 00:04:36,229
we can switch over to the bass-tracker-service.

77
00:04:36,229 --> 00:04:38,478
We will check out the correct branch for the module,

78
00:04:38,478 --> 00:04:46,593
then we'll create a run configuration for the bass-tracker-service.

79
00:04:46,593 --> 00:04:50,622
All right, now we're ready to run the bass-tracker-service and see what happens.

80
00:04:50,622 --> 00:04:57,250
Basically, the bass-tracker-service posts a request to the lake-profile-service,

81
00:04:57,250 --> 00:05:08,000
and then it gets the lake profile it just created. We can see the returned Lake Profile object in the logs.

