WEBVTT
1
00:00:00.726 --> 00:00:04.828
Last but not least, let's simulate a resource race condition.

2
00:00:04.828 --> 00:00:07.795
To follow along with this demo, for the Base Tracker Service,

3
00:00:07.795 --> 00:00:12.436
check out the adding-custom-retry-policies-resource-race-condition branch.

4
00:00:12.436 --> 00:00:13.650
For the Lake Profile Service,

5
00:00:13.650 --> 00:00:18.587
also check out the adding-custom-retry-policies-resource- race-condition branch.

6
00:00:18.587 --> 00:00:20.276
Starting with the lake-profile-service,

7
00:00:20.276 --> 00:00:23.078
you can see that we haven't made any changes from the

8
00:00:23.078 --> 00:00:27.214
module branch for this simulation, so let's run it.

9
00:00:27.214 --> 00:00:29.116
Switching over to the bass-tracker-service,

10
00:00:29.116 --> 00:00:30.130
we've made one simple change,

11
00:00:30.130 --> 00:00:32.740
and that is to bypass the sleep between creating and

12
00:00:32.740 --> 00:00:35.102
getting the lake profile resource.

13
00:00:35.102 --> 00:00:37.996
Let's run that and see what happens.

14
00:00:37.996 --> 00:00:38.418
Success.

15
00:00:38.418 --> 00:00:48.000
We've solved the resource race condition issue SaaS Bass is having. This was obviously made possible by adding a custom back off policy.

