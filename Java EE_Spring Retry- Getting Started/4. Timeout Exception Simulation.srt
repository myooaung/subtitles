1
00:00:00,892 --> 00:00:05,015
We've seen how adding basic retry has helped SaaS Bass

2
00:00:05,015 --> 00:00:07,570
with temporary socket exceptions.

3
00:00:07,570 --> 00:00:11,561
Now, let's see what it can do for timeout exceptions.

4
00:00:11,561 --> 00:00:16,456
In the SaaS Bass's case, timeout exceptions are caused by temporary I/O latency.

5
00:00:16,456 --> 00:00:17,973
As a reminder,

6
00:00:17,973 --> 00:00:22,018
we've configured the LakeProfileClient to throw a

7
00:00:22,018 --> 00:00:24,285
timeout exception after 3 seconds.

8
00:00:24,285 --> 00:00:29,868
Let's see if adding basic retry has alleviated this pain point for SaaS Bass.

9
00:00:29,868 --> 00:00:33,278
To follow along with this demo, for the Bass Tracker Service,

10
00:00:33,278 --> 00:00:37,326
check out the adding-retry-to-rest-template-timeout- exception branch.

11
00:00:37,326 --> 00:00:39,432
For the Lake Profile Service,

12
00:00:39,432 --> 00:00:44,901
also check out the adding-retry- to-rest-template-timeout-exception branch.

13
00:00:44,901 --> 00:00:46,398
In the lake-profile-service,

14
00:00:46,398 --> 00:00:50,619
we're simulating a socket timeout exception by sleeping for 4

15
00:00:50,619 --> 00:00:52,886
seconds for the first two GET requests.

16
00:00:52,886 --> 00:00:54,124
As a reminder,

17
00:00:54,124 --> 00:01:00,069
we've set our socket re-timeout threshold in Bass Tracker Service to 3 seconds.

18
00:01:00,069 --> 00:01:01,473
By sleeping for 4 seconds,

19
00:01:01,473 --> 00:01:05,423
we will trigger a timeout exception to be thrown in LakeProfileClient.

20
00:01:05,423 --> 00:01:10,598
You can imagine that this could be simulating a database or other microservice,

21
00:01:10,598 --> 00:01:14,542
causing I/O latency for the Lake Profile Service.

22
00:01:14,542 --> 00:01:16,669
Let's run the lake-profile-service,

23
00:01:16,669 --> 00:01:19,757
and then switch over to the bass-tracker-service.

24
00:01:19,757 --> 00:01:22,935
The bass-tracker-service remains unchanged from the

25
00:01:22,935 --> 00:01:25,236
module branch for this simulation.

26
00:01:25,236 --> 00:01:29,257
The CommandLineRunner will create the LakeProfile in a separate thread,

27
00:01:29,257 --> 00:01:33,398
wait for 3 seconds, and then try to get the newly created profile.

28
00:01:33,398 --> 00:01:36,191
Let's run it and see what happens.

29
00:01:36,191 --> 00:01:37,521
As we would expect,

30
00:01:37,521 --> 00:01:45,000
even basic Spring Retry has given SaaS Bass respectable safeguards against timeout exceptions.

