1
00:00:00,861 --> 00:00:02,358
Now that we've implemented custom exceptions,

2
00:00:02,358 --> 00:00:05,182
let's talk about socket exceptions.

3
00:00:05,182 --> 00:00:09,195
We've been using a socket exception to indicate a generic server error.

4
00:00:09,195 --> 00:00:12,722
But in reality, there are multiple types of server errors.

5
00:00:12,722 --> 00:00:15,308
The two server errors that we're concerned with are

6
00:00:15,308 --> 00:00:19,052
HTTP 500 errors and HTTP 503 errors.

7
00:00:19,052 --> 00:00:23,505
An HTTP 503 error should be retried due to its temporary nature,

8
00:00:23,505 --> 00:00:27,838
whereas typically an HTTP 500 error should not.

9
00:00:27,838 --> 00:00:31,349
Let's get more specific about server errors and see if our retry

10
00:00:31,349 --> 00:00:34,341
configuration does what it should for them.

11
00:00:34,341 --> 00:00:35,631
To follow along with this demo,

12
00:00:35,631 --> 00:00:37,072
for the Bass Tracker Service check out the

13
00:00:37,072 --> 00:00:40,661
adding-custom-retry-exceptions-server-error branch.

14
00:00:40,661 --> 00:00:41,980
For the Lake Profile Service,

15
00:00:41,980 --> 00:00:46,524
also check out the adding-custom-retry-exceptions-server-error branch.

16
00:00:46,524 --> 00:00:48,529
We have our lake-profile-service set up as usual,

17
00:00:48,529 --> 00:00:51,792
but for this demo, instead of throwing a socket exception,

18
00:00:51,792 --> 00:00:55,935
we're going to return an HTTP 500 code on the GET endpoint

19
00:00:55,935 --> 00:00:59,401
and an HTTP 503 code on the POST endpoint.

20
00:00:59,401 --> 00:01:03,959
With this setup, we should except that the createLakeProfile call should retry,

21
00:01:03,959 --> 00:01:07,449
and the getLakeProfile call should not retry.

22
00:01:07,449 --> 00:01:10,812
Let's switch over to the bass-tracker- service and run it.

23
00:01:10,812 --> 00:01:21,000
We see that indeed the createLakeProfile call retried and the getLakeProfile call did not and returned an HTTP 500 error as expected.

