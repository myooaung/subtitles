WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.985
This video will be just a hands-on video.

00:00:02.985 --> 00:00:04.815
Are no slides for this one,

00:00:04.815 --> 00:00:06.720
I'm just going to be showing you how to install

00:00:06.720 --> 00:00:12.135
just some common software onto your Linux instance, your EC2 instance.

00:00:12.135 --> 00:00:15.270
And I just picked the top three,

00:00:15.270 --> 00:00:19.740
probably the most common piece of software that people who would

00:00:19.740 --> 00:00:24.720
use AWS EC2 instances would be installing on their servers.

00:00:24.720 --> 00:00:28.995
And these are actually not Apache, but getting darker,

00:00:28.995 --> 00:00:30.915
or probably for me,

00:00:30.915 --> 00:00:35.360
the single most install piece of software on EC2 instances.

00:00:35.360 --> 00:00:40.010
Because, you know, obviously I pull in my application code from

00:00:40.010 --> 00:00:45.110
get uniform private repository from GitHub using Git Hub.

00:00:45.110 --> 00:00:47.630
And then I always use darker just to

00:00:47.630 --> 00:00:50.750
standardize my work environment and dependencies, that kinda stuff.

00:00:50.750 --> 00:00:54.440
So, you know, whenever I initiate an instance,

00:00:54.440 --> 00:00:57.410
first thing I do is install Git and darker.

00:00:57.410 --> 00:01:02.120
And in the next video you'll see how you can actually use something called user data to

00:01:02.120 --> 00:01:07.820
have a diverse actually run these commands for you directly when you initiate instance.

00:01:07.820 --> 00:01:09.905
So you never have to run them again manually.

00:01:09.905 --> 00:01:11.915
And then still further on.

00:01:11.915 --> 00:01:14.195
I'll show you how to create AMIs,

00:01:14.195 --> 00:01:16.835
where you can actually create images of

00:01:16.835 --> 00:01:19.895
your instance with these pieces of software installed.

00:01:19.895 --> 00:01:22.760
And all you have to do is create a new instance from

00:01:22.760 --> 00:01:26.435
an existing image and you don't have to install anything again.

00:01:26.435 --> 00:01:29.165
But for the sake of this video,

00:01:29.165 --> 00:01:32.915
we want to get our handy little bit 30 using Linux

00:01:32.915 --> 00:01:37.520
and actually installing from stuff and seeing how that works.

00:01:37.520 --> 00:01:41.780
So again, I just picked these randomly just

00:01:41.780 --> 00:01:47.120
so we can have some experience in selling stuff on, on the instance.

00:01:47.120 --> 00:01:48.575
And just so we know,

00:01:48.575 --> 00:01:52.220
we have a list of commands that we can use to later in our database.

00:01:52.220 --> 00:01:54.110
This process using user data.

00:01:54.110 --> 00:01:55.775
So with that said,

00:01:55.775 --> 00:01:58.985
let's jump right back into our AWS console.

00:01:58.985 --> 00:02:00.965
And here we are.

00:02:00.965 --> 00:02:04.355
And here we are. We have our instance that's running.

00:02:04.355 --> 00:02:09.770
So obviously the first thing we wanna do is we want to make sure that our ports are open,

00:02:09.770 --> 00:02:14.465
yes, and our status checks have been passed.

00:02:14.465 --> 00:02:21.455
And then we can just select our instance like so and connect.

00:02:21.455 --> 00:02:23.585
We have the proper user,

00:02:23.585 --> 00:02:29.195
ec2 user, and we connect.

00:02:29.195 --> 00:02:33.020
So probably the easiest example,

00:02:33.020 --> 00:02:36.380
the simplest thing to install, Git.

00:02:36.380 --> 00:02:40.130
But before we install anything,

00:02:40.130 --> 00:02:45.020
we just want to make sure we update our instance because there might have a new software.

00:02:45.020 --> 00:02:49.130
Updates are some security patches or anything I might

00:02:49.130 --> 00:02:53.435
have come out since we first initiated this instance.

00:02:53.435 --> 00:02:57.365
So we can use sudo, sudo, yum.

00:02:57.365 --> 00:03:03.080
Those of you who are familiar with a boon to or DBN based distributions.

00:03:03.080 --> 00:03:06.095
Uip used to APT dash.

00:03:06.095 --> 00:03:11.690
But for Linux, for Dataverse Linux to instance,

00:03:11.690 --> 00:03:16.985
we're going to be using yum to install stuff and update.

00:03:16.985 --> 00:03:19.790
And we can do dash y, which just lets,

00:03:19.790 --> 00:03:22.490
you know if if it if it asks for any confirmation,

00:03:22.490 --> 00:03:27.380
we just give it a yes and no packages marked for update.

00:03:27.380 --> 00:03:31.055
And that's probably because I'm recording this all in one day.

00:03:31.055 --> 00:03:32.945
And so I've, I've already,

00:03:32.945 --> 00:03:36.935
I've just created this instance maybe a few hours ago.

00:03:36.935 --> 00:03:39.725
So obviously there haven't been any updates since then.

00:03:39.725 --> 00:03:41.780
So that's not a problem.

00:03:41.780 --> 00:03:46.445
We can just go right into installing Git.

00:03:46.445 --> 00:03:49.985
So again for that we're going to use sudo.

00:03:49.985 --> 00:03:52.820
Again for those of you who are not familiar with Linux,

00:03:52.820 --> 00:03:57.305
I do advise that you do go and watch a couple very quick introduction,

00:03:57.305 --> 00:03:59.540
introductory videos on Linux and how to use

00:03:59.540 --> 00:04:03.440
the command line interface or like the terminal.

00:04:03.440 --> 00:04:06.215
For a Linux operating system,

00:04:06.215 --> 00:04:12.110
a pseudo basically gives us root privileges for that particular command.

00:04:12.110 --> 00:04:14.600
So if we were to write, just write sue for example,

00:04:14.600 --> 00:04:18.440
select sudo su or some variation of soup.

00:04:18.440 --> 00:04:19.865
Depending on the solution,

00:04:19.865 --> 00:04:24.290
it would actually change our user to the root user.

00:04:24.290 --> 00:04:25.640
But that's not advised,

00:04:25.640 --> 00:04:30.575
just like we would advise you to log into AWS using a root user credentials.

00:04:30.575 --> 00:04:34.145
That actually comes from Linux administration.

00:04:34.145 --> 00:04:36.350
Where, you know it's an advisor,

00:04:36.350 --> 00:04:40.925
you use your root user for daily tasks.

00:04:40.925 --> 00:04:42.995
So instead we use sudo,

00:04:42.995 --> 00:04:46.730
which gives root privileges to that command.

00:04:46.730 --> 00:04:48.245
And that's it.

00:04:48.245 --> 00:04:52.055
And so that it keeps stuff pretty safe.

00:04:52.055 --> 00:04:56.510
And when you don't use it, you don't have privileges and when you do use it,

00:04:56.510 --> 00:04:58.040
you do have it just for that instance.

00:04:58.040 --> 00:05:01.580
So now we're installing Git first just because it's a little

00:05:01.580 --> 00:05:06.349
bit easier to install Docker or Apache.

00:05:06.349 --> 00:05:09.485
So let's use yellow again,

00:05:09.485 --> 00:05:13.740
install Git dash y.

00:05:14.020 --> 00:05:17.975
And there we go, it's installing.

00:05:17.975 --> 00:05:22.040
Let that install and we're done.

00:05:22.040 --> 00:05:23.120
Now.

00:05:23.120 --> 00:05:26.705
We can just use git clone,

00:05:26.705 --> 00:05:31.625
just put in address of any repo and in Git repository.

00:05:31.625 --> 00:05:35.375
And you can just clone that repository right on into here.

00:05:35.375 --> 00:05:37.385
So that's pretty cool.

00:05:37.385 --> 00:05:41.420
Let's now install Docker.

00:05:41.420 --> 00:05:45.605
So since we're using an Amazon Linux 2 instance,

00:05:45.605 --> 00:05:49.620
Amazon actually makes it easy for us to install Docker.

00:05:50.440 --> 00:06:00.245
Amazon Linux extras install Docker.

00:06:00.245 --> 00:06:03.650
So this is kind of the benefit of using

00:06:03.650 --> 00:06:11.839
a AWS backed instance because they have put in some useful.

00:06:11.839 --> 00:06:15.560
Software and that kinda stuff for us to easily access and install.

00:06:15.560 --> 00:06:17.600
Otherwise it might be a little bit more difficult and

00:06:17.600 --> 00:06:20.180
require a little bit more knowledge than x.

00:06:20.180 --> 00:06:23.840
So if we run this, there we go.

00:06:23.840 --> 00:06:26.945
Docker is being installed.

00:06:26.945 --> 00:06:33.755
And it's asking us if we're okay with 270 megabytes being

00:06:33.755 --> 00:06:41.705
downloaded and we are or 65 megabytes we downloaded and 7270 and being installed.

00:06:41.705 --> 00:06:48.365
We are because our innocence has enough juice to manage that.

00:06:48.365 --> 00:06:51.365
Otherwise it would be pretty useless.

00:06:51.365 --> 00:06:55.110
So let's just let that install.

00:06:56.130 --> 00:06:59.860
And there we go.

00:06:59.860 --> 00:07:03.624
Docker is now installed.

00:07:03.624 --> 00:07:11.960
And we can start the Docker service or the Docker daemon. Like so.

00:07:12.150 --> 00:07:15.355
And we can create,

00:07:15.355 --> 00:07:19.150
or we can add an ec2 user to the darker group.

00:07:19.150 --> 00:07:21.970
Or we can add, I mean, our,

00:07:21.970 --> 00:07:25.164
our EC2 dash user,

00:07:25.164 --> 00:07:27.190
user to the darker group.

00:07:27.190 --> 00:07:30.715
So you can execute docker commands without using sudo.

00:07:30.715 --> 00:07:34.450
And we can do that like so again,

00:07:34.450 --> 00:07:35.920
for any of these commands, if,

00:07:35.920 --> 00:07:39.580
if you're confused, you can just easily look them up.

00:07:39.580 --> 00:07:43.315
Your own links has been around for so long that,

00:07:43.315 --> 00:07:46.750
you know every question has prejudgment asked and explained.

00:07:46.750 --> 00:07:52.840
For example, you can pull up the man pages for how

00:07:52.840 --> 00:07:59.815
user mode and user mode and modify a user account.

00:07:59.815 --> 00:08:03.850
And we basically use the a option which is add the user to

00:08:03.850 --> 00:08:09.775
the supplementary groups used only with the dash capital G option.

00:08:09.775 --> 00:08:12.400
And what is a cat and dash capital G option?

00:08:12.400 --> 00:08:15.325
Dash capital G is a group,

00:08:15.325 --> 00:08:18.595
so a list of supplementary groups which the user is also a member of.

00:08:18.595 --> 00:08:20.750
Each group is separated, etc.

00:08:20.750 --> 00:08:23.180
So if the user is currently a member of a group which is not listed,

00:08:23.180 --> 00:08:24.680
the easier it will be removed from the group.

00:08:24.680 --> 00:08:27.470
This behavior can be changed via the dash I option,

00:08:27.470 --> 00:08:30.290
which appends the user to the current supplementary group list.

00:08:30.290 --> 00:08:34.865
So basically here, if we pull up our previous command using the up arrow,

00:08:34.865 --> 00:08:36.890
we can see that, you know,

00:08:36.890 --> 00:08:40.820
we're, we're adding to the group Docker,

00:08:40.820 --> 00:08:44.675
the user, EC2, dash user.

00:08:44.675 --> 00:08:47.480
So with that being done,

00:08:47.480 --> 00:08:52.895
we can now log out and log back in again

00:08:52.895 --> 00:08:58.685
to pick up the new Docker group permissions so that those can be start functioning.

00:08:58.685 --> 00:09:03.990
And then so that's do that.

00:09:04.180 --> 00:09:07.680
And then we'll just log back in.

00:09:09.610 --> 00:09:13.354
And then we can see if it's actually working.

00:09:13.354 --> 00:09:15.830
Docker info and there we go. Darker is up and running.

00:09:15.830 --> 00:09:18.080
Do we have any containers up? No.

00:09:18.080 --> 00:09:20.240
Do we have any images?

00:09:20.240 --> 00:09:21.125
No.

00:09:21.125 --> 00:09:23.090
But doctors there, it's up and running.

00:09:23.090 --> 00:09:26.450
So that's pretty cool right now.

00:09:26.450 --> 00:09:31.670
Calling it an image or Docker file in your application.

00:09:31.670 --> 00:09:33.320
Now you can get it running on here with,

00:09:33.320 --> 00:09:36.155
without having to worry about any other dependencies because

00:09:36.155 --> 00:09:39.500
you have taken care of those in your Docker file.

00:09:39.500 --> 00:09:44.255
Now, lastly, let's look.

00:09:44.255 --> 00:09:47.810
How we can install an Apache server.

00:09:47.810 --> 00:09:53.960
Now, I personally don't use too often because I'm not a web developer.

00:09:53.960 --> 00:10:00.260
But it is a very common thing and obviously is Engine X as well and other options.

00:10:00.260 --> 00:10:05.240
But let's go ahead and just try for Apache.

00:10:05.240 --> 00:10:11.645
And so let's first clear our screen Control L.

00:10:11.645 --> 00:10:21.155
So let's install the Apache web server using sudo.

00:10:21.155 --> 00:10:31.835
Yum install HTTPD X A6 underscore 64.

00:10:31.835 --> 00:10:34.040
Let's go ahead and install it.

00:10:34.040 --> 00:10:37.010
And that was quick.

00:10:37.010 --> 00:10:39.995
So I've cleared the page again.

00:10:39.995 --> 00:10:48.570
So we can start the web server using system control.

00:10:48.820 --> 00:10:54.185
Start HTTPD dot service.

00:10:54.185 --> 00:11:00.230
And then we want this to persist throughout our sessions.

00:11:00.230 --> 00:11:04.490
We don't want it to stop every time we exit or log out, right?

00:11:04.490 --> 00:11:08.940
So we have to enable it, sudo,

00:11:09.160 --> 00:11:18.839
system control, enable HTTP D dot service.

00:11:19.780 --> 00:11:25.670
And now we can test to see if the web server is actually up and running.

00:11:25.670 --> 00:11:27.590
If it is right,

00:11:27.590 --> 00:11:35.480
it should be returning something on the port 80 because this is a web server.

00:11:35.480 --> 00:11:43.205
And there we go, we get a very simple static web page,

00:11:43.205 --> 00:11:45.845
just an HTML file, our page.

00:11:45.845 --> 00:11:48.425
So this means that on the local machine,

00:11:48.425 --> 00:11:49.490
so this is not exposed.

00:11:49.490 --> 00:11:54.005
Remember we do not have port 80 exposed to the public,

00:11:54.005 --> 00:11:58.250
exposed to external traffic,

00:11:58.250 --> 00:12:00.815
but internally within our network.

00:12:00.815 --> 00:12:05.285
On port 80, we now have a webpage that is showing.

00:12:05.285 --> 00:12:09.635
And that's because the Apache web servers up and functioning.

00:12:09.635 --> 00:12:18.769
So curl, just basically that's to fetch or access a new URL.

00:12:18.769 --> 00:12:20.600
So by default, right,

00:12:20.600 --> 00:12:23.570
it's just pulling in the page or whatever

00:12:23.570 --> 00:12:26.840
is existing in the URL that we supplied it in our cases,

00:12:26.840 --> 00:12:29.840
localhost, Localhost colon 80.

00:12:29.840 --> 00:12:37.920
So now let's, because this is a kind of an ugly webpage here,

00:12:38.050 --> 00:12:40.310
we can actually change it.

00:12:40.310 --> 00:12:50.075
So this, we see this ugly yet simple static HTML page that is presented to us,

00:12:50.075 --> 00:12:54.755
showing us that the Apache web server is running on port

00:12:54.755 --> 00:13:00.140
80 and is successfully serving pages, web pages.

00:13:00.140 --> 00:13:04.490
Now, because this is a very ugly page,

00:13:04.490 --> 00:13:11.075
let's replace it with just a simple Hello World or some like that.

00:13:11.075 --> 00:13:13.580
Just so we don't have to deal with this.

00:13:13.580 --> 00:13:17.120
And so we can actually, what we can do.

00:13:17.120 --> 00:13:22.340
So echo is a function within Linux command,

00:13:22.340 --> 00:13:27.905
if you will, that basically to display a line of text, that's all it does.

00:13:27.905 --> 00:13:32.570
So if you write echo hello world,

00:13:32.570 --> 00:13:35.120
it just prints Hello World.

00:13:35.120 --> 00:13:39.000
And if we pipe this instead into

00:13:39.700 --> 00:13:47.060
a file in var slash www slash HTML slash index.html.

00:13:47.060 --> 00:13:53.840
Now we basically written helloworld into this file and we can view that using Nano.

00:13:53.840 --> 00:14:00.785
It's very simple text editor within Linux.

00:14:00.785 --> 00:14:04.790
And we see that we've written Hello World into this file.

00:14:04.790 --> 00:14:13.505
Okay, so now when we do curl localhost 8080,

00:14:13.505 --> 00:14:19.835
we were presented with a very simple webpage that just contains the text Hello World.

00:14:19.835 --> 00:14:22.265
So that's pretty cool, right?

00:14:22.265 --> 00:14:27.360
And in fact, what we can do is you can get your host name.

00:14:28.660 --> 00:14:30.335
Like so.

00:14:30.335 --> 00:14:31.580
So this is our host name.

00:14:31.580 --> 00:14:37.025
We can see our local IP address and then compute that internal.

00:14:37.025 --> 00:14:46.115
And we can serve a webpage that gives the user the one who access the web page,

00:14:46.115 --> 00:14:50.720
the host name of our instance, right?

00:14:50.720 --> 00:14:55.640
That would be pretty cool. So we can do hello world.

00:14:55.640 --> 00:15:03.125
Hello world, let's say from host name.

00:15:03.125 --> 00:15:06.290
And I'll just run that command and gives the output.

00:15:06.290 --> 00:15:11.195
So like see Hello World from, and that's the host name.

00:15:11.195 --> 00:15:13.400
And dollar sign and the parenthesis,

00:15:13.400 --> 00:15:15.830
it will just run that command and it will give you

00:15:15.830 --> 00:15:19.010
the result of it within, within your text.

00:15:19.010 --> 00:15:29.270
And so we can pipe that into far WWW slash HTML slash index.html.

00:15:29.270 --> 00:15:35.160
And then now if we do a curl localhost,

00:15:37.120 --> 00:15:39.770
we get this page.

00:15:39.770 --> 00:15:42.680
So this is actually a web page in a couple of sexism.

00:15:42.680 --> 00:15:46.100
I show you how to set the security group so you can view this patron browser.

00:15:46.100 --> 00:15:49.940
You'll see that we will be presented with a web page that contains this text.

00:15:49.940 --> 00:15:51.440
So that's pretty cool, right?

00:15:51.440 --> 00:15:56.300
So we're basically giving the host name of our instance to

00:15:56.300 --> 00:16:01.520
anybody who accesses our instance through the port 80,

00:16:01.520 --> 00:16:04.850
which is the HTTP port.

00:16:04.850 --> 00:16:07.370
So that's, so, that's very cool.

00:16:07.370 --> 00:16:12.035
And this means that we have are functioning and working Apache web server up and running.

00:16:12.035 --> 00:16:15.320
So again, you might not be interested in Apache web server.

00:16:15.320 --> 00:16:18.005
It might not be what you need for your line of work,

00:16:18.005 --> 00:16:19.640
but it is very common.

00:16:19.640 --> 00:16:23.075
So I wanted to give you some more technical hands-on

00:16:23.075 --> 00:16:27.140
experience just in selling something that's more fair.

00:16:27.140 --> 00:16:28.895
We can, we can play around with.

00:16:28.895 --> 00:16:32.435
And hopefully I gave you some good exposure to Linux as well.

00:16:32.435 --> 00:16:36.305
Again, this is another Linux course on lack going to be going into any further depth.

00:16:36.305 --> 00:16:40.040
But you are advised to learn as much as

00:16:40.040 --> 00:16:44.825
possible when it comes to Linux if you do intend to be a high-quality DevOps engineer.

00:16:44.825 --> 00:16:46.490
So in the next video,

00:16:46.490 --> 00:16:50.930
I'm actually going to show you how we can put all these commands into

00:16:50.930 --> 00:16:57.515
a single file and supply it to AWS as something called user data.

00:16:57.515 --> 00:17:02.930
So that it can actually run these commands for us while initiating the instance.

00:17:02.930 --> 00:17:06.365
And therefore, we won't have to log in and do all of that on our own.

00:17:06.365 --> 00:17:09.560
And we can have good Docker Apache or

00:17:09.560 --> 00:17:15.350
any other software program installed on our instance while it's being initiated.

00:17:15.350 --> 00:17:17.000
So I will see you in the next video.

00:17:17.000 --> 00:17:18.360
Bye.
