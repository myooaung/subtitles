WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.050 --> 00:00:02.250
Hello and welcome back.

00:00:02.250 --> 00:00:05.370
In this video, we are going to be going over a very quick topic

00:00:05.370 --> 00:00:09.495
discussing the lifecycle of the instances you're launching.

00:00:09.495 --> 00:00:13.740
We've had some exposure to different states, right?

00:00:13.740 --> 00:00:21.430
We've terminated an instance before and we've seen what instances are running and,

00:00:21.430 --> 00:00:22.470
and that kinda stuff.

00:00:22.470 --> 00:00:25.545
So we have some familiarity with instances.

00:00:25.545 --> 00:00:30.240
This video is just intended to be a very comprehensive like just for you to see

00:00:30.240 --> 00:00:32.850
all the different possible states that

00:00:32.850 --> 00:00:35.895
an instance can be in so you know what your options are.

00:00:35.895 --> 00:00:36.660
Now.

00:00:36.660 --> 00:00:39.045
So before we get into details,

00:00:39.045 --> 00:00:42.265
let me give you a bigger picture of what's going on.

00:00:42.265 --> 00:00:48.320
It's very nice diagram that AWS prepared in its EC2 documentation.

00:00:48.320 --> 00:00:52.730
Now if you're not familiar by now about the EC2 Docs,

00:00:52.730 --> 00:00:56.810
go ahead and search on Google for EC2 documentation or just,

00:00:56.810 --> 00:01:01.190
just type docs are AWS dot amazon.com into,

00:01:01.190 --> 00:01:03.590
into your browser URL.

00:01:03.590 --> 00:01:07.490
And from there, just navigate to Amazon Elastic Compute Cloud.

00:01:07.490 --> 00:01:13.520
And you'll see a very comprehensive set of documentation EC2 there.

00:01:13.520 --> 00:01:20.015
So everything that I'm covering in these slides are in accordance with AWS documentation.

00:01:20.015 --> 00:01:23.420
And just so you're getting the up-to-date information and

00:01:23.420 --> 00:01:28.280
the information that AWS themselves considers to be important for you.

00:01:28.280 --> 00:01:32.750
So you can find more in depth details and explanations and

00:01:32.750 --> 00:01:37.340
information on everything I'm covering in this course, in the documentation.

00:01:37.340 --> 00:01:41.720
And it's highly advisable for you at the end of every video to just go and search.

00:01:41.720 --> 00:01:44.450
Like here, for example, we have EC2 instance lifecycle.

00:01:44.450 --> 00:01:47.000
So just, just write EC2 instance lifecycle,

00:01:47.000 --> 00:01:51.560
Amazon Docs or something into Google and you'll find the page,

00:01:51.560 --> 00:01:56.690
for instance, lifecycle that Amazon themselves have prepared.

00:01:56.690 --> 00:02:00.260
So they prepared this very nice diagram here,

00:02:00.260 --> 00:02:03.590
or this illustration which shows

00:02:03.590 --> 00:02:08.705
you the transitions between the different states that your instance can be in.

00:02:08.705 --> 00:02:11.870
So we're going to see in a little bit in

00:02:11.870 --> 00:02:16.985
the AWS console how we can switch to different states.

00:02:16.985 --> 00:02:18.770
But there's also, you know,

00:02:18.770 --> 00:02:20.990
transitions that happened between the states.

00:02:20.990 --> 00:02:22.565
So, you know, you can,

00:02:22.565 --> 00:02:26.720
you can pause the video and take your time understanding this illustration.

00:02:26.720 --> 00:02:32.630
But essentially we, initially we will launch an instance and we do that from an AMI.

00:02:32.630 --> 00:02:35.060
And we haven't, we're going to be covering AMIs and

00:02:35.060 --> 00:02:37.745
how to make custom AMIs in the next video.

00:02:37.745 --> 00:02:46.535
But for now, we're just using already pre prepared AMIs from AWS.

00:02:46.535 --> 00:02:50.240
And the one we're using in particular is Linux to machine, right?

00:02:50.240 --> 00:02:54.080
And so we'll launch it and immediately goes into a pending state.

00:02:54.080 --> 00:03:01.940
But this state results from us taking this action of launching this instance.

00:03:01.940 --> 00:03:03.365
So because we launch it,

00:03:03.365 --> 00:03:06.605
it goes into a pending state.

00:03:06.605 --> 00:03:09.695
Now, from pending, right,

00:03:09.695 --> 00:03:13.490
it can go into running because that's the whole point.

00:03:13.490 --> 00:03:17.240
We're launching an image or launching an instance so that we can run it.

00:03:17.240 --> 00:03:19.385
And so it will go into running.

00:03:19.385 --> 00:03:23.105
And from here you can either reboot your instance.

00:03:23.105 --> 00:03:25.820
So it'll go into rebooting and then I go

00:03:25.820 --> 00:03:28.370
back into running and thus the definition of reboot.

00:03:28.370 --> 00:03:31.310
And then, or you can also terminate it and when to terminate

00:03:31.310 --> 00:03:34.009
it goes into shutting down and then indeterminate.

00:03:34.009 --> 00:03:35.780
And remember when he terminated, That's it.

00:03:35.780 --> 00:03:37.100
You're instance is gone.

00:03:37.100 --> 00:03:39.410
It no longer exists. You can never.

00:03:39.410 --> 00:03:41.600
Retrieve it again, It's gone.

00:03:41.600 --> 00:03:43.085
You just killed your instance.

00:03:43.085 --> 00:03:45.950
If you don't want to do that, if you do see yourself

00:03:45.950 --> 00:03:50.540
possibly restarting your instance and you just want to temporarily stop it.

00:03:50.540 --> 00:03:53.600
You have two options. You can either stop or you can stop, hibernate.

00:03:53.600 --> 00:03:56.330
And I'm going to be going into more detail onStop hibernate,

00:03:56.330 --> 00:04:00.319
which is a relatively newer addition to EC2.

00:04:00.319 --> 00:04:02.405
And in that case it goes into stopping.

00:04:02.405 --> 00:04:05.570
And then when it's successfully stopped,

00:04:05.570 --> 00:04:07.250
it goes into stopped.

00:04:07.250 --> 00:04:10.205
And then you can from there you can terminate it if you want,

00:04:10.205 --> 00:04:11.690
or you can start it back up.

00:04:11.690 --> 00:04:13.880
And so it ends up and pending in running.

00:04:13.880 --> 00:04:17.255
So this illustration basically demonstrates

00:04:17.255 --> 00:04:21.525
all the different states and transitions your instance can take.

00:04:21.525 --> 00:04:24.730
Now, when it comes to different states,

00:04:24.730 --> 00:04:26.829
they might have different billing statuses.

00:04:26.829 --> 00:04:30.055
So some states might be built while others are not built.

00:04:30.055 --> 00:04:33.220
And that might be important to know in your case.

00:04:33.220 --> 00:04:35.710
And it might also be asked on the exam.

00:04:35.710 --> 00:04:39.280
So here's a quick table you can refer

00:04:39.280 --> 00:04:44.245
to to check for whether or not a particular instance is being built or not.

00:04:44.245 --> 00:04:47.395
And so you can see that most of them are not being built.

00:04:47.395 --> 00:04:52.765
So if an instance is shutting down or it's terminated or stopped, right?

00:04:52.765 --> 00:04:55.600
You're not being built, which is expected.

00:04:55.600 --> 00:04:56.830
And if it's pending,

00:04:56.830 --> 00:04:58.150
you're also not being built.

00:04:58.150 --> 00:05:01.750
But if it's running, that means it's up and ready for use.

00:05:01.750 --> 00:05:04.500
So obviously we are being built and if it's stopping,

00:05:04.500 --> 00:05:09.440
it depends on whether or not you stopped or stop hibernated your instance.

00:05:09.440 --> 00:05:12.260
So when you stop hibernate your instance,

00:05:12.260 --> 00:05:14.825
you will be and it's stopping state.

00:05:14.825 --> 00:05:16.775
Because of that you will be billed.

00:05:16.775 --> 00:05:22.235
I just because of how stop Hibernate is different from being just being stopped.

00:05:22.235 --> 00:05:25.730
When, when you stop an instance, it's completely stopped.

00:05:25.730 --> 00:05:27.095
But when you stop hibernate,

00:05:27.095 --> 00:05:28.820
it's not exactly completely stopped.

00:05:28.820 --> 00:05:29.945
It's recoverable.

00:05:29.945 --> 00:05:34.055
So I'm going to be going into detail on that shortly.

00:05:34.055 --> 00:05:38.660
But just this is just a quick reference you can referred to.

00:05:38.660 --> 00:05:41.375
And now keep in mind pending.

00:05:41.375 --> 00:05:43.820
You can end up in the pending state because of two reasons.

00:05:43.820 --> 00:05:46.490
You can end up in a pending state because you're just launching

00:05:46.490 --> 00:05:51.800
your instance or because you've stopped it and you're starting it backup.

00:05:51.800 --> 00:05:54.785
So those are the two reasons you might be in pending.

00:05:54.785 --> 00:05:56.855
In in both cases you'll end up in pending.

00:05:56.855 --> 00:06:01.700
So yeah, just pause the video, refer to this.

00:06:01.700 --> 00:06:06.635
Again. A lot of this stuff might seem too technical and to unnecessary.

00:06:06.635 --> 00:06:09.935
And it's stuff you can easily look up when you need to.

00:06:09.935 --> 00:06:14.015
And that's correct, but you do need to know some of the stuff for the exam.

00:06:14.015 --> 00:06:15.530
And, you know, again,

00:06:15.530 --> 00:06:17.975
it doesn't hurt to know that these exist and

00:06:17.975 --> 00:06:21.565
you can you can easily look them up when you need to.

00:06:21.565 --> 00:06:23.950
But if you never knew that these existed,

00:06:23.950 --> 00:06:25.390
you wouldn't know what to lockup, right?

00:06:25.390 --> 00:06:28.420
So my job here is to give you exposure to as much as

00:06:28.420 --> 00:06:33.385
possible so that you have a solid foundation that you can build on on your own.

00:06:33.385 --> 00:06:36.475
Hopefully 11 thing I should mention is that

00:06:36.475 --> 00:06:40.645
this will not necessarily hold for all instance types.

00:06:40.645 --> 00:06:42.790
And we haven't covered instance types yet,

00:06:42.790 --> 00:06:46.120
but there are, for example, instance types.

00:06:46.120 --> 00:06:49.675
Instance types called Reserved Instances,

00:06:49.675 --> 00:06:53.440
which basically you pay for beforehand,

00:06:53.440 --> 00:06:55.255
the reserved for you.

00:06:55.255 --> 00:06:56.815
And because of that,

00:06:56.815 --> 00:06:59.425
even if you do stop your instance,

00:06:59.425 --> 00:07:01.860
you will have to continue.

00:07:01.860 --> 00:07:06.080
Paying for it until the end of the instances term.

00:07:06.080 --> 00:07:08.840
So that'll depend on your payment option.

00:07:08.840 --> 00:07:10.310
So keep in mind,

00:07:10.310 --> 00:07:14.150
these are all general just general piece of information,

00:07:14.150 --> 00:07:16.160
but depending on your situation,

00:07:16.160 --> 00:07:19.579
depending on your particular features that you've selected,

00:07:19.579 --> 00:07:23.720
the tear your in your payment types or instant types,

00:07:23.720 --> 00:07:26.555
other services that you have integrated,

00:07:26.555 --> 00:07:30.215
you know, obviously you have to consider all of those as well, right?

00:07:30.215 --> 00:07:32.810
You know, if you have S3

00:07:32.810 --> 00:07:35.720
bucket that's connected to an instance and when you stop your instance,

00:07:35.720 --> 00:07:37.850
the S3 bucket continuous

00:07:37.850 --> 00:07:40.520
exists or you will continue to pay for that S3 bucket, for example, right?

00:07:40.520 --> 00:07:44.075
So don't take this as gospel.

00:07:44.075 --> 00:07:45.770
Always be aware that there are

00:07:45.770 --> 00:07:49.460
other possibilities and other options such as reserved instances.

00:07:49.460 --> 00:07:52.640
And before we jump into AWS,

00:07:52.640 --> 00:07:57.815
I will like to spend some time on the hibernate state.

00:07:57.815 --> 00:08:04.610
And the reason for that is because this is a relatively newer state in the EC2 service,

00:08:04.610 --> 00:08:07.895
so it doesn't hurt its own slide.

00:08:07.895 --> 00:08:13.820
Essentially what ec2 or what hibernate does is it saves

00:08:13.820 --> 00:08:19.745
the contents from the instance memory or the RAM to your Amazon EBS root volume.

00:08:19.745 --> 00:08:26.510
And Amazon EBS we will be covering in the EC2 storage section of this course on,

00:08:26.510 --> 00:08:29.810
but essentially that is a volume that is assigned to

00:08:29.810 --> 00:08:33.560
your instance and so it saves the RAM into there.

00:08:33.560 --> 00:08:37.460
So the instances amazon EBS root volume and

00:08:37.460 --> 00:08:41.525
any other attached amazon EBS data volumes are persisted.

00:08:41.525 --> 00:08:45.215
So as opposed to stopping or instance where everything is lost,

00:08:45.215 --> 00:08:47.810
in this case, there is persistence.

00:08:47.810 --> 00:08:51.420
And when the instance is restarted,

00:08:51.420 --> 00:08:55.720
the EBS volume is restored to its previous state.

00:08:55.720 --> 00:09:00.910
Processes that were previously running on the instance are resumed.

00:09:00.910 --> 00:09:05.785
Previously attach data volumes are reattached and the instance retains

00:09:05.785 --> 00:09:09.790
its instance ID as opposed to being what

00:09:09.790 --> 00:09:13.630
happens when the instance is stopped and everything is

00:09:13.630 --> 00:09:17.920
lost and everything is really associated from a new and it started.

00:09:17.920 --> 00:09:20.340
So usage is charged one,

00:09:20.340 --> 00:09:22.405
the storming stage as we mentioned.

00:09:22.405 --> 00:09:27.115
And but it is not you do not get a charge

00:09:27.115 --> 00:09:33.010
for keeping an instance in the stop state if you've hibernated it.

00:09:33.010 --> 00:09:38.450
So again, this does have come with its fine print.

00:09:38.450 --> 00:09:43.595
For example, your instance state and everything will be stored within an S3 bucket.

00:09:43.595 --> 00:09:45.560
So you will have to pay for that S3 bucket,

00:09:45.560 --> 00:09:47.930
but you're not paying for the instance itself.

00:09:47.930 --> 00:09:54.425
Okay, so that's something to keep in mind and not charged for usage fees,

00:09:54.425 --> 00:09:57.965
but charged for surge of an EBS volumes including search for RAM data.

00:09:57.965 --> 00:10:00.260
So yeah, you will be charged for storage,

00:10:00.260 --> 00:10:03.455
but not for having an instance.

00:10:03.455 --> 00:10:08.170
And you can hybrid and instance only if it's enabled for hibernation.

00:10:08.170 --> 00:10:12.005
And there's, there are hibernation prerequisites

00:10:12.005 --> 00:10:16.130
that an instance needs to meet in order to be.

00:10:16.130 --> 00:10:17.585
Hibernate level.

00:10:17.585 --> 00:10:22.040
And you can find a list of prerequisites in us to detail for me to evolve,

00:10:22.040 --> 00:10:23.555
to include in these slides.

00:10:23.555 --> 00:10:27.395
It's not worth making everything too detailed.

00:10:27.395 --> 00:10:30.470
But if you just search for like hibernation,

00:10:30.470 --> 00:10:33.500
prerequisite EC2, AWS Docs or something on Google.

00:10:33.500 --> 00:10:35.660
You will find a list. And you know,

00:10:35.660 --> 00:10:37.400
some of, you know,

00:10:37.400 --> 00:10:39.484
it does matter on like the instance,

00:10:39.484 --> 00:10:41.510
image and essence type for example,

00:10:41.510 --> 00:10:46.925
it doesn't need to be in a boon to image or like a Linux to image or something like that.

00:10:46.925 --> 00:10:52.865
You can't just have any image hibernate at this as of recording this video.

00:10:52.865 --> 00:10:55.550
You know, that might change in the future.

00:10:55.550 --> 00:11:00.515
The instance a RAM size must be less than 150 gigabytes.

00:11:00.515 --> 00:11:02.795
The root volume must be EBS,

00:11:02.795 --> 00:11:06.410
and it must be encrypted and it must be large.

00:11:06.410 --> 00:11:11.405
And it's only available for on-demand and reserved instances and so on, so forth.

00:11:11.405 --> 00:11:13.625
So there are some prerequisites.

00:11:13.625 --> 00:11:15.770
If you are not able to hibernate,

00:11:15.770 --> 00:11:18.500
for instance, just make sure, you know,

00:11:18.500 --> 00:11:23.480
the reason might be because of not meeting those prerequisites.

00:11:23.480 --> 00:11:29.825
So just make sure that if you are relying on hibernation for your specific task,

00:11:29.825 --> 00:11:31.790
then make sure that you are selecting

00:11:31.790 --> 00:11:35.240
the right image and the right instance to allow for that.

00:11:35.240 --> 00:11:40.980
And the instance retains its private IPv4 address.

00:11:41.050 --> 00:11:43.340
Some uses of hibernate,

00:11:43.340 --> 00:11:46.595
you might be wondering what the benefit of Hibernate is.

00:11:46.595 --> 00:11:50.840
So imagine a situation in which an instance or

00:11:50.840 --> 00:11:52.970
an application takes a long time to

00:11:52.970 --> 00:11:57.125
bootstrap and build a memory footprint to become fully productive.

00:11:57.125 --> 00:12:00.365
You can use hibernation to pre-warming the instance.

00:12:00.365 --> 00:12:04.940
So essentially, what you do is you would launch your,

00:12:04.940 --> 00:12:07.685
your instance with hibernation enabled.

00:12:07.685 --> 00:12:11.390
And then you would bring it to a desired state.

00:12:11.390 --> 00:12:13.715
And then you could,

00:12:13.715 --> 00:12:16.880
you would be able to hibernated and ensure that it's

00:12:16.880 --> 00:12:20.660
ready to be resumed to the same state as needed.

00:12:20.660 --> 00:12:22.910
Since you're not charged, for instance,

00:12:22.910 --> 00:12:26.405
usage for a hybrid and since when it is in the start state,

00:12:26.405 --> 00:12:31.715
you are charged only for your instance usage when the instance is in the stopping stage.

00:12:31.715 --> 00:12:38.015
So on this would potentially save you both in terms of

00:12:38.015 --> 00:12:41.240
getting our instance started up and in terms of cost

00:12:41.240 --> 00:12:45.515
because in the past maybe you would have to have,

00:12:45.515 --> 00:12:49.850
maybe you would have had to keep your instance running just so

00:12:49.850 --> 00:12:53.975
it's ready to be fully productive or it's already fully productive when,

00:12:53.975 --> 00:12:55.475
when it's needed, when it's called.

00:12:55.475 --> 00:12:58.550
But now you can just started up from a hibernated state.

00:12:58.550 --> 00:13:02.225
So I'm sure there are a lot of very useful applications for it.

00:13:02.225 --> 00:13:05.945
But it depends on your particular domain and usage.

00:13:05.945 --> 00:13:10.280
And it's going to be up to you as the architect or

00:13:10.280 --> 00:13:14.615
the AWS experts to decide in which situation,

00:13:14.615 --> 00:13:18.495
which features of AWS would be most useful.

00:13:18.495 --> 00:13:23.185
So let's go and do some hands-on with the instance lifecycle and see how,

00:13:23.185 --> 00:13:24.925
how it all works.

00:13:24.925 --> 00:13:31.000
So here we are in our EC2 dashboard or not in the EC2 dashboard,

00:13:31.000 --> 00:13:32.980
but in the instances dashboard.

00:13:32.980 --> 00:13:38.350
And we're immediately presented with a very familiar screen before us.

00:13:38.350 --> 00:13:41.635
Let's close the manager calls.

00:13:41.635 --> 00:13:45.190
And so we have our one instance that's running.

00:13:45.190 --> 00:13:47.920
My second instance and yes,

00:13:47.920 --> 00:13:50.170
I am keeping this running because remember we're using

00:13:50.170 --> 00:13:53.110
the free tier and you're not being charged for running

00:13:53.110 --> 00:13:58.570
one instance because you have up to 750 hours of

00:13:58.570 --> 00:14:05.960
free EC2 usage a month as long as you're using the T2 micro instance type.

00:14:05.960 --> 00:14:10.190
And so there's no way to exceed that unless you have more than one instance running.

00:14:10.190 --> 00:14:13.640
Because if you multiply like 31 by 24,

00:14:13.640 --> 00:14:16.670
that's like 744 hours.

00:14:16.670 --> 00:14:19.325
So assuming that the longest month,

00:14:19.325 --> 00:14:22.010
assuming that you're in a month that has 31 days,

00:14:22.010 --> 00:14:25.100
which would be the longest possible monitoring and have you

00:14:25.100 --> 00:14:28.280
will not be able to exceed it with 11 instance,

00:14:28.280 --> 00:14:30.245
so does no harm and keeping it running.

00:14:30.245 --> 00:14:33.290
Now, if we click the drop-down here,

00:14:33.290 --> 00:14:35.420
we see the different instance States.

00:14:35.420 --> 00:14:37.250
So we can stop an instance,

00:14:37.250 --> 00:14:38.390
we can start an instance,

00:14:38.390 --> 00:14:39.815
we can reboot and instance,

00:14:39.815 --> 00:14:43.130
we can hibernate and instance and we can terminate an instance.

00:14:43.130 --> 00:14:45.140
Now, in order to do any of that,

00:14:45.140 --> 00:14:48.080
we're going to have to click on the instance we want to perform these actions

00:14:48.080 --> 00:14:51.305
on and on. We click on this.

00:14:51.305 --> 00:14:53.630
We're presented with stop instance,

00:14:53.630 --> 00:14:57.095
reboot instance, and terminate instance.

00:14:57.095 --> 00:14:59.735
Now, there are two instances.

00:14:59.735 --> 00:15:01.850
There are two states that are not accessible.

00:15:01.850 --> 00:15:03.200
One is the start instance,

00:15:03.200 --> 00:15:06.500
and that's because our instances are already running.

00:15:06.500 --> 00:15:10.505
So we would be able to access is if the instance had been stopped.

00:15:10.505 --> 00:15:16.070
But the hybrid, hybrid instance is not accessible because it hasn't been enabled while,

00:15:16.070 --> 00:15:17.720
while launching the instance.

00:15:17.720 --> 00:15:22.790
So you have to make sure that you're enabling the instance to be hybrid navel.

00:15:22.790 --> 00:15:26.365
And also you'd have to make sure that you're launching an instance

00:15:26.365 --> 00:15:30.395
that is hibernated in the first place that that option exists.

00:15:30.395 --> 00:15:35.195
So let's stop this instance.

00:15:35.195 --> 00:15:38.160
Okay, let's stop our instance for now.

00:15:38.440 --> 00:15:41.120
And we stop it.

00:15:41.120 --> 00:15:42.785
And it's stopping.

00:15:42.785 --> 00:15:44.375
And right now it's not being built.

00:15:44.375 --> 00:15:50.495
It it stopped being built because it's not we're not stop hibernating it.

00:15:50.495 --> 00:15:52.055
We're just stopping it.

00:15:52.055 --> 00:15:55.010
And so we're not getting billed for it.

00:15:55.010 --> 00:15:57.570
And if we refresh,

00:15:57.730 --> 00:16:02.765
we will see that our instance is still stopping.

00:16:02.765 --> 00:16:05.205
It might take some time to stop.

00:16:05.205 --> 00:16:07.570
So it's still stopping.

00:16:07.570 --> 00:16:10.960
And there we go. It has been stopped officially.

00:16:10.960 --> 00:16:13.300
And when we come into here,

00:16:13.300 --> 00:16:16.900
we can now start the instance backup or we can terminate the instance,

00:16:16.900 --> 00:16:19.060
but currently it's not terminated,

00:16:19.060 --> 00:16:20.650
so we can still start it back up.

00:16:20.650 --> 00:16:22.885
We still have access to if you want to.

00:16:22.885 --> 00:16:26.455
But it's not being built for right now.

00:16:26.455 --> 00:16:29.859
Now, in order to create an instance that we can hibernate,

00:16:29.859 --> 00:16:35.155
instead of stopping, Let's launch a new instance.

00:16:35.155 --> 00:16:44.200
And we'll launch the same Amazon The next to the t2 micro configure instance details.

00:16:44.200 --> 00:16:47.850
And in this page here, and

00:16:47.850 --> 00:16:49.640
And in this step,

00:16:49.640 --> 00:16:58.145
we can go down into here and you see an option here called stop hibernate behavior.

00:16:58.145 --> 00:17:01.640
So hibernation stops your instance

00:17:01.640 --> 00:17:04.970
and saves the contents of the instances RAM to the root volume.

00:17:04.970 --> 00:17:08.120
You cannot enable hibernation after launch.

00:17:08.120 --> 00:17:09.995
And that's the problem that we faced.

00:17:09.995 --> 00:17:13.775
We had not enabled this when we launched our second instance.

00:17:13.775 --> 00:17:16.820
And now we're not able to hibernate it.

00:17:16.820 --> 00:17:19.175
So this is something you have to think about beforehand,

00:17:19.175 --> 00:17:23.630
whether or not you want this option to exist in your instance or not.

00:17:23.630 --> 00:17:27.950
So enable hibernation has an additional step behavior, correct?

00:17:27.950 --> 00:17:30.380
Yes, we want that.

00:17:30.380 --> 00:17:33.530
And inverse gives us a little note to enable

00:17:33.530 --> 00:17:37.775
hibernation spaces allocated on the root volume to store the instance RAM memory.

00:17:37.775 --> 00:17:41.060
Or the RAM makes sure the root volume is

00:17:41.060 --> 00:17:45.170
large enough to store the RAM contents and accommodator expected usage.

00:17:45.170 --> 00:17:50.135
So we've gotta make sure that we have a sufficient storage and the root volume.

00:17:50.135 --> 00:17:55.130
And volume must be an encrypted EBS volume.

00:17:55.130 --> 00:17:57.080
Okay, so that's important.

00:17:57.080 --> 00:17:59.585
So let's go into Add Storage.

00:17:59.585 --> 00:18:03.845
And here, AWS gives us a warning.

00:18:03.845 --> 00:18:06.560
It tells us to use hibernation,

00:18:06.560 --> 00:18:07.970
encrypt the root volume.

00:18:07.970 --> 00:18:09.500
So we do that from here.

00:18:09.500 --> 00:18:13.744
Under encryption, we can just pick the default encryption.

00:18:13.744 --> 00:18:17.600
And just to make sure we have sufficient, sufficient storage.

00:18:17.600 --> 00:18:21.049
We can increase this like 30 gigabytes.

00:18:21.049 --> 00:18:24.785
And let's go ahead and,

00:18:24.785 --> 00:18:27.275
and let's add a tag.

00:18:27.275 --> 00:18:36.275
So we can just add a tag name EC2 with Hibernate.

00:18:36.275 --> 00:18:37.565
Okay?

00:18:37.565 --> 00:18:41.280
And configure security group.

00:18:41.740 --> 00:18:44.460
This is fine.

00:18:44.920 --> 00:18:47.810
Now we, since we create a security group,

00:18:47.810 --> 00:18:50.795
we can just pick the SSH access one.

00:18:50.795 --> 00:18:54.530
And we do not want to give HTTP access at the moment, but if we want to,

00:18:54.530 --> 00:18:56.755
it's going to be very easy for us now that we've had,

00:18:56.755 --> 00:18:58.610
we have configured security groups,

00:18:58.610 --> 00:19:00.755
then that's really on launch.

00:19:00.755 --> 00:19:02.900
When we go to instance details,

00:19:02.900 --> 00:19:05.675
stop hygienic behavior has been enabled.

00:19:05.675 --> 00:19:10.775
And we launch, we pick our existing security key,

00:19:10.775 --> 00:19:17.360
the key value pair, and we just go ahead and launch the instance.

00:19:17.360 --> 00:19:22.430
You instances. Okay, now it's in the pending state.

00:19:22.430 --> 00:19:27.125
It's being launched, it's transitioning from not existing to running.

00:19:27.125 --> 00:19:30.180
And so it's gone through pending.

00:19:30.190 --> 00:19:32.915
So this is a transition, right?

00:19:32.915 --> 00:19:37.400
Stopped as an as a state.

00:19:37.400 --> 00:19:43.740
Now, let's wait for this to start running.

00:19:46.150 --> 00:19:48.200
And keep in mind,

00:19:48.200 --> 00:19:50.390
if you are following along with me,

00:19:50.390 --> 00:19:53.240
you might be charged very slightly,

00:19:53.240 --> 00:19:56.990
just because we gave it a bigger storage,

00:19:56.990 --> 00:19:59.165
but it should be fine.

00:19:59.165 --> 00:20:01.640
So now we're in the running state.

00:20:01.640 --> 00:20:04.490
Now when we click on this, first of all,

00:20:04.490 --> 00:20:10.145
let's go ahead and start my instance by my second instance that start this.

00:20:10.145 --> 00:20:12.020
So let's start.

00:20:12.020 --> 00:20:14.180
Click instance date and start.

00:20:14.180 --> 00:20:19.205
You can also right-click and then go into wherever you want from here.

00:20:19.205 --> 00:20:24.080
But now this is starting or it's pending, right?

00:20:24.080 --> 00:20:26.825
So it's in the pending state.

00:20:26.825 --> 00:20:29.990
This state here still hasn't initialized,

00:20:29.990 --> 00:20:31.640
it hasn't passed its status checks.

00:20:31.640 --> 00:20:34.520
But when we right-click or when we just click

00:20:34.520 --> 00:20:37.880
on EC2 with hibernate and go to instance state.

00:20:37.880 --> 00:20:41.235
Now we have hibernate instance enabled,

00:20:41.235 --> 00:20:44.380
whereas with the second instance,

00:20:44.380 --> 00:20:47.005
we do not have it enabled.

00:20:47.005 --> 00:20:49.195
It, it's still not running.

00:20:49.195 --> 00:20:52.405
We have to wait for it to run. There we go.

00:20:52.405 --> 00:20:55.555
My second instance, when we click on it,

00:20:55.555 --> 00:20:57.595
it doesn't have hibernate enabled.

00:20:57.595 --> 00:21:04.510
So what is the difference practically between stopping and hybrid and eager instance?

00:21:04.510 --> 00:21:07.720
To see that, let's go into,

00:21:07.720 --> 00:21:11.035
so let's go into my second instance.

00:21:11.035 --> 00:21:17.060
And let's connect.

00:21:24.430 --> 00:21:27.035
We do not have SSH enabled.

00:21:27.035 --> 00:21:33.605
If you remember, we had this table that that's very easy to deal with now we just go into

00:21:33.605 --> 00:21:42.635
security chain security groups and we can go ahead and add a security group.

00:21:42.635 --> 00:21:46.985
Let's add SSH one and save it.

00:21:46.985 --> 00:21:49.730
And now only go into instances.

00:21:49.730 --> 00:21:51.470
Let me just check, okay,

00:21:51.470 --> 00:21:54.050
they have passed a status check.

00:21:54.050 --> 00:21:59.195
So now when we go into our instance,

00:21:59.195 --> 00:22:02.015
it just started right?

00:22:02.015 --> 00:22:06.239
So if we check for uptime,

00:22:06.239 --> 00:22:10.120
It's been up for two minutes, okay?

00:22:10.120 --> 00:22:12.370
Right now it's been upper two minutes.

00:22:12.370 --> 00:22:17.110
Let's exit this SQL instances.

00:22:17.110 --> 00:22:22.390
Let's stop my second instance.

00:22:22.390 --> 00:22:25.460
While that's stopping.

00:22:25.680 --> 00:22:31.735
Let's go into EC2 with Hibernate. Let's connect.

00:22:31.735 --> 00:22:36.760
Remember, my second instance has been out for two minutes, but then I stopped it.

00:22:36.760 --> 00:22:39.280
Now we will look into this.

00:22:39.280 --> 00:22:40.795
This is about performance.

00:22:40.795 --> 00:22:46.855
Again. Let's hibernate this now.

00:22:46.855 --> 00:22:50.585
Hibernate instance. Hibernate.

00:22:50.585 --> 00:22:52.745
Now that both stopping,

00:22:52.745 --> 00:22:56.750
this one is still being charged because the reason is

00:22:56.750 --> 00:23:00.770
in stopping is because it's been hibernated and not because it stopped.

00:23:00.770 --> 00:23:02.720
This one's not being charged.

00:23:02.720 --> 00:23:06.755
This one had had an uptime of two minutes and so I had uptime or four minutes.

00:23:06.755 --> 00:23:10.470
Okay. But they're both stopping right now.

00:23:10.840 --> 00:23:15.605
So now they're both stopped.

00:23:15.605 --> 00:23:21.380
And let us start them

00:23:21.380 --> 00:23:28.949
both backup for both pending.

00:23:29.440 --> 00:23:36.140
Essentially, what we want to check is let's go back into this one.

00:23:36.140 --> 00:23:37.400
This is running now.

00:23:37.400 --> 00:23:39.450
Let's connect.

00:23:41.110 --> 00:23:47.135
And the checked uptime. Remember it was four minutes when we started our rehydrated it.

00:23:47.135 --> 00:23:49.790
And now it's five minutes.

00:23:49.790 --> 00:23:57.469
This means that the RAM or the state of the instance has been completely preserved.

00:23:57.469 --> 00:23:59.495
That's the benefit of hibernating.

00:23:59.495 --> 00:24:03.455
It started back up from where it was when it stopped.

00:24:03.455 --> 00:24:05.330
It was at four minutes right.

00:24:05.330 --> 00:24:08.360
Uptime and then start it back up in a minute has passed.

00:24:08.360 --> 00:24:11.990
Now it's five minutes, it's not 0 or it's not one that's available.

00:24:11.990 --> 00:24:15.590
Hydrating everything you had going on is preserved,

00:24:15.590 --> 00:24:17.135
the RAM is stored.

00:24:17.135 --> 00:24:18.425
So when you start it back up,

00:24:18.425 --> 00:24:21.620
you start right back up from where you left off.

00:24:21.620 --> 00:24:32.015
Whereas if we now go into my second instance, it's still pending.

00:24:32.015 --> 00:24:34.800
Okay, there we go.

00:24:36.630 --> 00:24:39.790
Uptime. It's one minute.

00:24:39.790 --> 00:24:41.455
Remember it was two minutes when we stop that.

00:24:41.455 --> 00:24:43.195
But the ram was not stored.

00:24:43.195 --> 00:24:47.020
It was stopped, everything was removed and erase straight,

00:24:47.020 --> 00:24:49.930
and when it started backup, it's started afresh.

00:24:49.930 --> 00:24:52.330
So that's why it's at one minute.

00:24:52.330 --> 00:24:57.355
And that's effectively the difference between hibernating and stopping an instance.

00:24:57.355 --> 00:25:01.630
So we have experienced terminating out.

00:25:01.630 --> 00:25:04.975
Let's go ahead and terminate because we want to continue getting charged.

00:25:04.975 --> 00:25:07.480
Let's terminate this one.

00:25:07.480 --> 00:25:11.935
And you can experiment with reboot and, and all of that.

00:25:11.935 --> 00:25:17.460
So that's basically everything you really need to know about the instance lifecycle.

00:25:17.460 --> 00:25:21.605
So now it's shutting down because we terminated it.

00:25:21.605 --> 00:25:24.470
And you can also terminate after stopping.

00:25:24.470 --> 00:25:27.620
And I'll also go ahead and stop this one.

00:25:27.620 --> 00:25:32.780
Because I don't want to get charged for

00:25:32.780 --> 00:25:38.660
I've already used up some extra time by having both of them running.

00:25:38.660 --> 00:25:42.900
So I will see you in the next video. Thanks.
