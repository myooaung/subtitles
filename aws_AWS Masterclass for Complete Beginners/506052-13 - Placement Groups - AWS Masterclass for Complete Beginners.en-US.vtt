WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.530
Hello and welcome.

00:00:01.530 --> 00:00:05.820
In this video we're going to be briefly discussing placement groups,

00:00:05.820 --> 00:00:11.475
which are MOOC is an important concept when you're dealing with EC2.

00:00:11.475 --> 00:00:16.995
In AWS, especially when you're creating applications that require multiple instances.

00:00:16.995 --> 00:00:19.710
And these instances, instances might be

00:00:19.710 --> 00:00:22.530
communicating with each other or they might be communicating

00:00:22.530 --> 00:00:29.550
with other networks or other applications outside of your VPC.

00:00:29.550 --> 00:00:31.035
But whatever the case,

00:00:31.035 --> 00:00:34.170
you're going to want to have a strategy based

00:00:34.170 --> 00:00:37.440
on how you want your multiple instances to be organized

00:00:37.440 --> 00:00:44.615
within an availability zone or within a region to maximize certain aspects.

00:00:44.615 --> 00:00:47.690
That could be speed, latency,

00:00:47.690 --> 00:00:50.990
it could be resilience against failure and that kind of stuff.

00:00:50.990 --> 00:00:56.435
So placement groups are what will allow you to do that.

00:00:56.435 --> 00:00:59.000
Are there logical groupings or clusters,

00:00:59.000 --> 00:01:03.210
if you will, of instances in a selected AWS region.

00:01:03.700 --> 00:01:08.840
You can create a placement group using one of three strategies.

00:01:08.840 --> 00:01:13.205
So there are three different types of placement groups you can create.

00:01:13.205 --> 00:01:16.670
The first one is called a cluster.

00:01:16.670 --> 00:01:22.130
And this essentially the pacs instances close together inside a single availability zone.

00:01:22.130 --> 00:01:23.540
And for each of these strategies,

00:01:23.540 --> 00:01:26.990
I'm going to be elaborating and expanding on,

00:01:26.990 --> 00:01:29.840
on, on each of them in the following slides.

00:01:29.840 --> 00:01:30.935
So don't worry.

00:01:30.935 --> 00:01:33.965
And then the second one is called a partition,

00:01:33.965 --> 00:01:37.455
or the second type of placement group you can have is called the partition.

00:01:37.455 --> 00:01:43.090
And this essentially spread your instances across logical partitions in a way

00:01:43.090 --> 00:01:46.120
that groups have instances in one partition do not

00:01:46.120 --> 00:01:49.270
share the underlying hardware with groups of instances in different partitions.

00:01:49.270 --> 00:01:56.335
So this helps protect against failures and creates resilience within your applications.

00:01:56.335 --> 00:01:59.860
And then there's one that's even

00:01:59.860 --> 00:02:04.705
more focused on keeping everything separate and that's called spread.

00:02:04.705 --> 00:02:08.575
And this strictly pleases a small group of instances across

00:02:08.575 --> 00:02:12.925
distinct underlying hardware to reduce correlated failures, okay?

00:02:12.925 --> 00:02:16.705
And there is no charge for creating a placement group,

00:02:16.705 --> 00:02:20.975
much like many of the other services like I am.

00:02:20.975 --> 00:02:24.800
And, you know, all those kind of stuff that

00:02:24.800 --> 00:02:29.165
just come as extra settings racks or features.

00:02:29.165 --> 00:02:32.240
With an existing service like EC2.

00:02:32.240 --> 00:02:35.090
There is no charge associated with it.

00:02:35.090 --> 00:02:38.675
Obviously, there will be a charge based on, you know,

00:02:38.675 --> 00:02:42.680
if you're going to be creating multiple instances just so you can have a placement group.

00:02:42.680 --> 00:02:44.930
You'll be paying for those instances obviously,

00:02:44.930 --> 00:02:48.290
but just changing between cluster and

00:02:48.290 --> 00:02:52.820
spread will not change the amount you're paying per instance.

00:02:52.820 --> 00:02:55.550
So let's start the first one,

00:02:55.550 --> 00:02:57.215
the cluster placement group.

00:02:57.215 --> 00:03:02.015
And this is meant to illustrate how it looks.

00:03:02.015 --> 00:03:05.210
And this is from the AWS documentation.

00:03:05.210 --> 00:03:08.390
Again, I'm going to keep reminding you throughout the course

00:03:08.390 --> 00:03:11.765
to refer to data and documentation as much as possible.

00:03:11.765 --> 00:03:16.040
It's absolutely crucial, especially with the fact that in AWS is constantly

00:03:16.040 --> 00:03:20.690
changing its settings and features and all of that.

00:03:20.690 --> 00:03:24.650
So you've got to stay up to date on that.

00:03:24.650 --> 00:03:28.100
So clusters, placement groups are essentially

00:03:28.100 --> 00:03:33.750
a logical grouping of instances within a single availability zone, as you can see here.

00:03:34.030 --> 00:03:37.340
And even if they're within a single availability zone,

00:03:37.340 --> 00:03:41.015
they can span peer VPCs in the same region.

00:03:41.015 --> 00:03:42.380
Okay?

00:03:42.380 --> 00:03:45.845
And these are recommended for avocations or benefit from

00:03:45.845 --> 00:03:49.220
lower network latency and high network throughput or both.

00:03:49.220 --> 00:03:51.695
Um, so, you know,

00:03:51.695 --> 00:03:54.740
especially if you're having instances that

00:03:54.740 --> 00:03:57.680
are constantly communicating with each other, right?

00:03:57.680 --> 00:04:00.680
You want very low latency,

00:04:00.680 --> 00:04:03.139
high speed of communication between those instances.

00:04:03.139 --> 00:04:06.365
So you want to keep them as close together as possible.

00:04:06.365 --> 00:04:10.340
And that's where you you'd benefit from a cluster placement group.

00:04:10.340 --> 00:04:16.340
And if you're not worried at all about your application going down,

00:04:16.340 --> 00:04:18.260
when would you not be worried about that?

00:04:18.260 --> 00:04:19.805
Like if you're not really worried,

00:04:19.805 --> 00:04:23.720
if you're not serving a customer or if you're not serving a user,

00:04:23.720 --> 00:04:26.300
like let's say you're doing some heavy data analytics

00:04:26.300 --> 00:04:28.580
or something like that or some big data work.

00:04:28.580 --> 00:04:34.460
So you're just using the different instances to four twos to spread the workload of

00:04:34.460 --> 00:04:37.370
your data processing across multiple instances because he knows too

00:04:37.370 --> 00:04:40.370
much for one single computer, something like that.

00:04:40.370 --> 00:04:42.829
So you want low latency,

00:04:42.829 --> 00:04:46.520
you want speed between instances because it performing data analytics.

00:04:46.520 --> 00:04:48.680
But if it does go down, right,

00:04:48.680 --> 00:04:52.864
There's nothing on the line really in all have those restructure analysis.

00:04:52.864 --> 00:04:55.460
It's only you that's going to be affected, right?

00:04:55.460 --> 00:04:57.890
It's not like you have users that are trying

00:04:57.890 --> 00:05:00.680
to access your application and you're letting them down.

00:05:00.680 --> 00:05:02.720
So that would be a very good use case for

00:05:02.720 --> 00:05:06.990
a cluster placement group for that kind of big data work.

00:05:07.630 --> 00:05:10.745
And it's also recommended

00:05:10.745 --> 00:05:14.300
when the majority of the network traffic is between instance groups.

00:05:14.300 --> 00:05:16.325
So that's exactly what I was saying.

00:05:16.325 --> 00:05:19.820
You know, when the sole purpose or like

00:05:19.820 --> 00:05:24.200
the main goal of your application is inter server communication,

00:05:24.200 --> 00:05:25.550
like just communication between

00:05:25.550 --> 00:05:30.455
your instances and you're not serving anybody specifically.

00:05:30.455 --> 00:05:35.195
And so the reason they're very prone to failure is,

00:05:35.195 --> 00:05:37.370
or they have less resilience,

00:05:37.370 --> 00:05:41.210
I would say is that they share the same rack and availability zone.

00:05:41.210 --> 00:05:43.310
So if, if the rack fails,

00:05:43.310 --> 00:05:46.970
all the instances will fail at the same time as opposed to one of

00:05:46.970 --> 00:05:49.490
the other placement group strategies

00:05:49.490 --> 00:05:53.105
where you have your instances spread across different racks.

00:05:53.105 --> 00:05:55.160
So even if one rack fails,

00:05:55.160 --> 00:05:58.860
you still have your other instances on your other acts.

00:05:58.990 --> 00:06:03.545
Now the partition placement groups are a little bit different.

00:06:03.545 --> 00:06:07.894
They help reduce the likelihood of correlated a hardware failures for an application.

00:06:07.894 --> 00:06:10.670
And that's because they are not all sharing

00:06:10.670 --> 00:06:13.730
the same hardware and they're not all on the same rack.

00:06:13.730 --> 00:06:17.195
Each group is divided into logical segments called partitioned,

00:06:17.195 --> 00:06:19.850
hence the name partition placement groups.

00:06:19.850 --> 00:06:25.010
And each partition within a placement group has its own set of rocks.

00:06:25.010 --> 00:06:27.920
Okay, So there will still be some instances that to

00:06:27.920 --> 00:06:30.830
share that might associate some racks.

00:06:30.830 --> 00:06:33.950
Within one partition, but you will have multiple partitions.

00:06:33.950 --> 00:06:37.460
So you could set it up in a way where

00:06:37.460 --> 00:06:43.040
the critical instances are spread across multiple partitions.

00:06:43.040 --> 00:06:45.710
So even if one partition fails and along with it

00:06:45.710 --> 00:06:49.670
all the other instances on those rocks and partition,

00:06:49.670 --> 00:06:53.585
you still have the other partitions to work with.

00:06:53.585 --> 00:06:57.875
Each rack has its own network and power source.

00:06:57.875 --> 00:07:01.370
And that adds to the resilience.

00:07:01.370 --> 00:07:08.045
And no two partitions within a placement group share the same racks,

00:07:08.045 --> 00:07:12.620
allowing you to either isolate the impact of hardware failure within your application.

00:07:12.620 --> 00:07:14.480
These are all logically.

00:07:14.480 --> 00:07:17.465
Each partition is logically separated from the next,

00:07:17.465 --> 00:07:22.460
and they do not share the same racks across partitions.

00:07:22.460 --> 00:07:25.280
Now, in most cases,

00:07:25.280 --> 00:07:29.570
this will be what you'll want to use.

00:07:29.570 --> 00:07:33.020
Again, this will change on your use case,

00:07:33.020 --> 00:07:37.895
but as we mentioned, cluster placement groups have a very specific use case.

00:07:37.895 --> 00:07:41.285
You know, when you're not really serving somebody.

00:07:41.285 --> 00:07:46.865
So if you're, if you're planning on making actual in application to serve users,

00:07:46.865 --> 00:07:50.750
cluster groups will not be that useful for you.

00:07:50.750 --> 00:07:54.920
You could have part of your advocation be placed within,

00:07:54.920 --> 00:07:56.855
you know, a cluster of placement group.

00:07:56.855 --> 00:08:02.090
But the front end or the part that's going to be serving the front end user,

00:08:02.090 --> 00:08:05.900
I mean, would not benefit from cluster placement group,

00:08:05.900 --> 00:08:09.155
but rather would benefit from a partition placement group.

00:08:09.155 --> 00:08:12.500
And then we also have spread placement groups.

00:08:12.500 --> 00:08:19.295
And these are essentially when each instance is placed on a distinct Iraq.

00:08:19.295 --> 00:08:22.340
And each rank has its own network and power source.

00:08:22.340 --> 00:08:24.485
So this is even more spread out.

00:08:24.485 --> 00:08:28.685
Hence the name spread placement groups from the partition placement group.

00:08:28.685 --> 00:08:31.580
And it's recommended for applications with a small number

00:08:31.580 --> 00:08:34.565
of critical incidences that should be kept separate from each other.

00:08:34.565 --> 00:08:40.580
And the reason we see smallest because you're limited to actually seven.

00:08:40.580 --> 00:08:43.340
And so it reduces the risk of

00:08:43.340 --> 00:08:47.015
simultaneous failures that might occur when instances share the same racks.

00:08:47.015 --> 00:08:50.750
So remember even in the participants when groups within a single partition,

00:08:50.750 --> 00:08:52.475
you might be sharing the same rack.

00:08:52.475 --> 00:08:57.305
So there is some possibility of problems happening there.

00:08:57.305 --> 00:09:00.530
But if you really need to isolate each one of

00:09:00.530 --> 00:09:04.265
the instances and you have a small number of instances and they're all critical,

00:09:04.265 --> 00:09:07.190
then spread placement group is the way to go.

00:09:07.190 --> 00:09:09.620
And you can have

00:09:09.620 --> 00:09:15.080
your spread placement groups span multiple availability zones in the same region.

00:09:15.080 --> 00:09:17.040
And that just add even more,

00:09:17.040 --> 00:09:19.029
um, to its resilience.

00:09:19.029 --> 00:09:21.220
But you can only have a maximum of

00:09:21.220 --> 00:09:25.840
seven running instances per availability zone per group.

00:09:25.840 --> 00:09:27.070
Um, so keep that in mind.

00:09:27.070 --> 00:09:30.130
Now let's go on over to the AWS console

00:09:30.130 --> 00:09:34.705
and learn how to actually create placement groups and you use them.

00:09:34.705 --> 00:09:39.085
So here we are in our EC2 dashboard.

00:09:39.085 --> 00:09:44.410
And let's very quickly just review the things we've gone over in the sidebar.

00:09:44.410 --> 00:09:46.510
So we learned about instance.

00:09:46.510 --> 00:09:49.270
This is what we've been using instances primarily,

00:09:49.270 --> 00:09:51.850
and we've learned about AMIs,

00:09:51.850 --> 00:09:54.115
and we've learned about security groups.

00:09:54.115 --> 00:09:59.685
So we've gone into instances, images, and network.

00:09:59.685 --> 00:10:01.039
And security.

00:10:01.039 --> 00:10:03.260
Now for placement groups,

00:10:03.260 --> 00:10:05.030
we are going to be continuing with network and

00:10:05.030 --> 00:10:08.405
security in and go into placement groups here.

00:10:08.405 --> 00:10:09.125
Okay.

00:10:09.125 --> 00:10:11.555
So go ahead and click on placement groups.

00:10:11.555 --> 00:10:16.115
And we do not have any placement groups in this region at the moment.

00:10:16.115 --> 00:10:18.875
We're going to go ahead and create a policeman group.

00:10:18.875 --> 00:10:27.500
And we can name this placement group like let's call it like big data analysis, right?

00:10:27.500 --> 00:10:30.935
And so we want, we want to cluster for that.

00:10:30.935 --> 00:10:36.365
We want to cluster group or let's stick with the AWS naming conventions,

00:10:36.365 --> 00:10:39.920
big data analysis, okay?

00:10:39.920 --> 00:10:43.745
And we want a cluster placement strategy for that, right?

00:10:43.745 --> 00:10:46.280
Because we want low latency and high speed communication.

00:10:46.280 --> 00:10:49.520
We don't care about failures might affect

00:10:49.520 --> 00:10:51.290
the whole application because we can just restart

00:10:51.290 --> 00:10:53.420
our analysis or pick up where we left off.

00:10:53.420 --> 00:10:57.710
And we're not trying to please any end-users or any customers.

00:10:57.710 --> 00:11:00.035
So let's go ahead and create this group.

00:11:00.035 --> 00:11:06.185
Now we have a placement group cannot be mixed up with other groups that we've got over.

00:11:06.185 --> 00:11:08.855
Like groups in I am.

00:11:08.855 --> 00:11:14.960
So it's called big data analysis and IT strategy is of type cluster,

00:11:14.960 --> 00:11:17.630
so it's a cluster strategy placement group.

00:11:17.630 --> 00:11:19.595
And it's currently available.

00:11:19.595 --> 00:11:21.830
And it's going to create another one.

00:11:21.830 --> 00:11:26.255
Let's just create my application.

00:11:26.255 --> 00:11:27.635
And we want, we don't,

00:11:27.635 --> 00:11:30.200
we don't require the incredibly high,

00:11:30.200 --> 00:11:32.600
low latency of a cluster group.

00:11:32.600 --> 00:11:37.880
And we don't have many instances that will communicate with each other frequently,

00:11:37.880 --> 00:11:41.705
but rather we have a large application and then we're serving the public.

00:11:41.705 --> 00:11:45.844
So we're going to just use a spread placement strategy.

00:11:45.844 --> 00:11:50.585
By the way, my job here is to give you information on the different, you know,

00:11:50.585 --> 00:11:54.350
I'm I'm introducing you to the fact that there is something called placement

00:11:54.350 --> 00:11:59.070
groups and they had different strategies and so on, so forth.

00:11:59.070 --> 00:12:04.885
The use cases of ALS and and its various services are endless.

00:12:04.885 --> 00:12:08.800
So I'm not here to give you

00:12:08.800 --> 00:12:12.940
very specific examples on all the different ways you could possibly

00:12:12.940 --> 00:12:17.005
use the different features within a diverse services.

00:12:17.005 --> 00:12:20.200
That's going to be up to you in your domain, in your work.

00:12:20.200 --> 00:12:24.490
To gain experience, to work with a senior innovate,

00:12:24.490 --> 00:12:27.295
we go find a book or something like that.

00:12:27.295 --> 00:12:30.400
That just goes to like real-world applications and that kind of stuff.

00:12:30.400 --> 00:12:32.290
So keep that in mind.

00:12:32.290 --> 00:12:36.115
I'm just giving you from my experience of using AWS where,

00:12:36.115 --> 00:12:37.570
you know, how I would use these,

00:12:37.570 --> 00:12:39.310
but depending on your domain,

00:12:39.310 --> 00:12:40.929
depending on your company structures,

00:12:40.929 --> 00:12:42.800
so on and so forth, you might have, you know,

00:12:42.800 --> 00:12:45.440
there might be completely different use cases for all of these.

00:12:45.440 --> 00:12:50.765
And it's up to you to learn about that and to further develop yourself.

00:12:50.765 --> 00:12:52.700
Um, in that regard.

00:12:52.700 --> 00:12:56.330
My bad, we're gonna, we're gonna select partition.

00:12:56.330 --> 00:13:00.380
So don't get mixed up by the order in the slides.

00:13:00.380 --> 00:13:05.780
We went through this in the order of cluster partition spread,

00:13:05.780 --> 00:13:07.790
but here it's cluster split partition.

00:13:07.790 --> 00:13:09.350
So don't, don't let that confuse you.

00:13:09.350 --> 00:13:13.520
Remember, spread is the one where everything is completely

00:13:13.520 --> 00:13:18.665
spread out and nothing is sharing anything in common.

00:13:18.665 --> 00:13:23.795
And that's for very highly critical applications where here we just want my application.

00:13:23.795 --> 00:13:25.504
Just a normal application.

00:13:25.504 --> 00:13:30.050
Um, so we're gonna use partition and we can specify the number of partitions we want.

00:13:30.050 --> 00:13:33.305
We can specify up to seven different partitions.

00:13:33.305 --> 00:13:35.540
Just go with three.

00:13:35.540 --> 00:13:37.775
And let's create our group.

00:13:37.775 --> 00:13:39.770
So we have my application,

00:13:39.770 --> 00:13:44.690
we have big data analysis in my application is a partition strategy placement group.

00:13:44.690 --> 00:13:46.790
And let's create one more.

00:13:46.790 --> 00:13:50.960
And this will be called critical.

00:13:50.960 --> 00:13:53.735
Okay, it's highly critical.

00:13:53.735 --> 00:13:59.630
So we require a spread strategy and we can go ahead and create that.

00:13:59.630 --> 00:14:01.220
So now we have three placement groups.

00:14:01.220 --> 00:14:04.520
Now. You can create as many different placement groups as you want and you

00:14:04.520 --> 00:14:06.680
don't I don't The only reason I

00:14:06.680 --> 00:14:08.900
created three and each of them having different strategies.

00:14:08.900 --> 00:14:10.355
So I can show you right.

00:14:10.355 --> 00:14:14.285
But you probably only need to use one or two.

00:14:14.285 --> 00:14:18.260
No reason for it to go in and create three different strategies.

00:14:18.260 --> 00:14:21.800
But you can write it as a potential endless.

00:14:21.800 --> 00:14:26.300
So how do we actually use these, right?

00:14:26.300 --> 00:14:29.660
How do we actually launch instances in a particular placement?

00:14:29.660 --> 00:14:39.090
For that, let's go into instances and let's launch and iterate this.

00:14:39.520 --> 00:14:44.180
No need to keep it running.

00:14:44.180 --> 00:14:47.790
We can terminate this one as well.

00:14:49.270 --> 00:14:53.750
So let's go ahead and launch a new instance.

00:14:53.750 --> 00:14:55.970
We're gonna go with what we know,

00:14:55.970 --> 00:15:00.875
Amazon Linux 2, t2 micro.

00:15:00.875 --> 00:15:04.685
And we're going to go into configure instance details.

00:15:04.685 --> 00:15:07.610
We're quite familiar with this page right now, right?

00:15:07.610 --> 00:15:09.275
We can add multiple,

00:15:09.275 --> 00:15:10.970
we can create multiple instances at once.

00:15:10.970 --> 00:15:13.700
We can put in user data.

00:15:13.700 --> 00:15:16.820
But now, and also we can remember,

00:15:16.820 --> 00:15:20.870
we can turn on or enable hibernation.

00:15:20.870 --> 00:15:25.235
But for this video we're concerned about this section here.

00:15:25.235 --> 00:15:26.855
You can see placement group.

00:15:26.855 --> 00:15:29.015
And we can again use this very informative.

00:15:29.015 --> 00:15:32.420
I launch an instance in a placement group to

00:15:32.420 --> 00:15:36.875
benefit from great greater redundancy or higher network throughput.

00:15:36.875 --> 00:15:40.610
Select an existing group or create a new one.

00:15:40.610 --> 00:15:47.990
So if we want to launch this instance in a particular placement group,

00:15:47.990 --> 00:15:52.475
we were going to have to check the sparks AD instance to placement group.

00:15:52.475 --> 00:15:55.535
And we can create a new placement group from here.

00:15:55.535 --> 00:15:59.855
So we can create a cluster placement group and we can name it.

00:15:59.855 --> 00:16:03.650
Or since we've already created our placement groups,

00:16:03.650 --> 00:16:07.265
we can just add to an existing placement group.

00:16:07.265 --> 00:16:10.925
And here, when we click here,

00:16:10.925 --> 00:16:14.270
we can see all the different placement groups that we

00:16:14.270 --> 00:16:18.545
have created or that we have available within this region.

00:16:18.545 --> 00:16:22.100
So essentially, let's say we wanted to

00:16:22.100 --> 00:16:29.225
create 10 instances and we're going to be using this for some sort of distributed,

00:16:29.225 --> 00:16:33.185
you know, big data work, right?

00:16:33.185 --> 00:16:36.290
So we're going to be 10 instances and we can add them

00:16:36.290 --> 00:16:42.755
to our big data analysis cluster strategy placement group.

00:16:42.755 --> 00:16:45.380
And so now if we review and launch,

00:16:45.380 --> 00:16:47.915
which I'm not going to do because I don't want to launch.

00:16:47.915 --> 00:16:51.200
Instances, but essentially we are going to be launching

00:16:51.200 --> 00:16:55.265
these 10 instances within the big data analysis cluster.

00:16:55.265 --> 00:17:00.010
Now, maybe we want to create another cluster and we're not going to be doing,

00:17:00.010 --> 00:17:01.880
we're going to be doing something else.

00:17:01.880 --> 00:17:08.105
Then you can go ahead and just create my second cluster.

00:17:08.105 --> 00:17:09.710
And then in a cluster,

00:17:09.710 --> 00:17:12.545
and then you just created and this cluster,

00:17:12.545 --> 00:17:18.740
this cluster strategy placement group will now show up in under your placement groups,

00:17:18.740 --> 00:17:23.960
where we initially created other three and also these 10 will be added to that group.

00:17:23.960 --> 00:17:29.555
So likewise, if we were just going to be launching, you know,

00:17:29.555 --> 00:17:36.175
just three instances and each of them would be part of our application.

00:17:36.175 --> 00:17:40.090
We can just add it to my application or we're

00:17:40.090 --> 00:17:43.870
doing something critical and we require them all to be separate from one another,

00:17:43.870 --> 00:17:48.550
completely separate, then we can just use our spread placement group.

00:17:48.550 --> 00:17:53.380
Now, you'll see a note here that says you can only large up to seven more instances into

00:17:53.380 --> 00:17:55.960
the space from group because it's spread placement group

00:17:55.960 --> 00:17:58.600
can have up to seven running instances per availability zone.

00:17:58.600 --> 00:18:01.180
So this is not seven more on top of this three,

00:18:01.180 --> 00:18:05.200
this is seven more on top of what's currently within our group, which is 0.

00:18:05.200 --> 00:18:13.110
So for example, like I can't launch ten under a single spread placement group.

00:18:13.110 --> 00:18:14.780
And we can even try.

00:18:14.780 --> 00:18:17.120
And second, Let us as purposeful groups supports

00:18:17.120 --> 00:18:20.105
a maximum of seven running instances per availability zone.

00:18:20.105 --> 00:18:27.570
So that's basically all you need to know about security groups.

00:18:28.480 --> 00:18:31.160
And oh, by the way,

00:18:31.160 --> 00:18:36.455
when you do want to launch within a partition strategy security group,

00:18:36.455 --> 00:18:39.050
you can select whether or not you want AWS,

00:18:39.050 --> 00:18:42.080
determine how it's distributed across, across a partitioned.

00:18:42.080 --> 00:18:44.225
Remember we created three partitions.

00:18:44.225 --> 00:18:47.600
So select the partition in which to launch the instances.

00:18:47.600 --> 00:18:49.625
If you select Arrow Distribution,

00:18:49.625 --> 00:18:55.130
Amazon EC2 tries to distribute instances evenly across the number of partitions.

00:18:55.130 --> 00:18:59.270
Was an EC2 doesn't guarantee an even distribution of instances across all partitions.

00:18:59.270 --> 00:19:01.715
So they just say that we are on the safe side.

00:19:01.715 --> 00:19:06.380
But depending on the architecture of your application,

00:19:06.380 --> 00:19:10.910
you can individually decide on

00:19:10.910 --> 00:19:16.340
which partitions the different instances will be launched on in if you have some sort of

00:19:16.340 --> 00:19:19.370
strategy or architecture that you've mapped out on

00:19:19.370 --> 00:19:27.425
paper to maximize security or resilience or whatever it may be.

00:19:27.425 --> 00:19:28.850
And you can go ahead and do that.

00:19:28.850 --> 00:19:30.095
But in most cases,

00:19:30.095 --> 00:19:32.225
out of the solution will be enough for you.

00:19:32.225 --> 00:19:36.380
And so yeah, that's pretty much all you need to know for instances again,

00:19:36.380 --> 00:19:38.300
if you want particular use cases and

00:19:38.300 --> 00:19:41.540
actual examples of different in a real-world applications

00:19:41.540 --> 00:19:43.940
running on different strategies and

00:19:43.940 --> 00:19:48.185
why certain companies pick the strategy over another and so on and so forth.

00:19:48.185 --> 00:19:50.420
You can go ahead and search for examples,

00:19:50.420 --> 00:19:52.580
read through data-based documentation.

00:19:52.580 --> 00:19:54.710
And I will see you in the next video.

00:19:54.710 --> 00:19:56.160
Bye bye.
