WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.060
This video will be just a hands-on video.

00:00:03.060 --> 00:00:04.755
No slides for this one,

00:00:04.755 --> 00:00:06.660
I'm just going to be showing you how to install

00:00:06.660 --> 00:00:12.075
just some common software onto your Linux instance, your EC2 instance.

00:00:12.075 --> 00:00:15.210
And I just picked the top three,

00:00:15.210 --> 00:00:19.680
probably the most common piece of software that people who would

00:00:19.680 --> 00:00:24.660
use AWS EC2 instances would be installing on their servers.

00:00:24.660 --> 00:00:27.390
And these are actually not Apache,

00:00:27.390 --> 00:00:30.855
but get and darker or probably for me,

00:00:30.855 --> 00:00:35.300
the single most installed piece of software on EC2 instances.

00:00:35.300 --> 00:00:39.950
Because, you know, obviously I pull in my application codes from

00:00:39.950 --> 00:00:45.050
get uniform private repository from GitHub using Git Hub.

00:00:45.050 --> 00:00:46.925
And then I always use darker,

00:00:46.925 --> 00:00:50.690
just a standardized my work environment and main dependency, that kinda stuff.

00:00:50.690 --> 00:00:54.380
So, you know, whenever I initiate an instance,

00:00:54.380 --> 00:00:57.350
first thing I do is install Git and darker.

00:00:57.350 --> 00:00:59.720
And in the next video you'll see how you

00:00:59.720 --> 00:01:02.060
can get actually use something called user data to

00:01:02.060 --> 00:01:07.760
have a diverse actually run these commands for you directly when you initiate instance.

00:01:07.760 --> 00:01:09.845
So you never have to run them again manually.

00:01:09.845 --> 00:01:11.900
And then still further on,

00:01:11.900 --> 00:01:14.135
I'll show you how to create AMIs,

00:01:14.135 --> 00:01:16.775
where you can actually create images of

00:01:16.775 --> 00:01:19.835
your instance with this piece of software installed.

00:01:19.835 --> 00:01:22.700
And all you have to do is create a new instance from

00:01:22.700 --> 00:01:26.375
an existing image and you don't have to install anything again.

00:01:26.375 --> 00:01:29.105
But for the sake of this video,

00:01:29.105 --> 00:01:32.855
we want to get our handy little bit 30 using Linux

00:01:32.855 --> 00:01:37.460
and actually installing from stuff and seeing how that works.

00:01:37.460 --> 00:01:41.720
So again, I just picked these randomly just

00:01:41.720 --> 00:01:47.060
so we can have some experience in selling stuff on, on the instance.

00:01:47.060 --> 00:01:48.515
And just so we know,

00:01:48.515 --> 00:01:51.260
we have a list of commands that we can use to later

00:01:51.260 --> 00:01:54.050
in automate this process using user data.

00:01:54.050 --> 00:01:55.715
So with that said,

00:01:55.715 --> 00:01:58.925
let's jump right back into our AWS console.

00:01:58.925 --> 00:02:00.905
And here we are.

00:02:00.905 --> 00:02:04.295
And here we are. We have our instance that's running.

00:02:04.295 --> 00:02:09.710
So obviously the first thing we wanna do is we want to make sure that our ports are open,

00:02:09.710 --> 00:02:14.405
yes, and our status checks have been passed.

00:02:14.405 --> 00:02:21.394
And then we can just select our instance like so and connect.

00:02:21.394 --> 00:02:23.525
We have the proper user,

00:02:23.525 --> 00:02:29.135
ec2 user, and we connect.

00:02:29.135 --> 00:02:32.960
So probably the easiest example,

00:02:32.960 --> 00:02:36.320
the simplest thing to install, Git.

00:02:36.320 --> 00:02:40.070
But before we install anything,

00:02:40.070 --> 00:02:44.960
we just want to make sure we update our instance because there might have a new software.

00:02:44.960 --> 00:02:49.070
Updates are some security patches or anything that might

00:02:49.070 --> 00:02:53.375
have come out since we first initiated this instance.

00:02:53.375 --> 00:02:57.305
So we can use sudo, sudo, yum.

00:02:57.305 --> 00:03:03.020
Those of you who are familiar with a boon to or DBN basics distributions,

00:03:03.020 --> 00:03:06.035
ULP used to APT dash.

00:03:06.035 --> 00:03:11.630
But for Linux, for Dataverse Linux to instance,

00:03:11.630 --> 00:03:16.940
we're going to be using yum to install stuff and update.

00:03:16.940 --> 00:03:19.730
And we can do dash y, which just lets,

00:03:19.730 --> 00:03:22.430
you know if if it if it asks for any confirmation,

00:03:22.430 --> 00:03:27.320
we just give it a yes and no packages marked for update.

00:03:27.320 --> 00:03:30.995
And that's probably because I'm recording this all in one day.

00:03:30.995 --> 00:03:32.885
And so I've, I've already,

00:03:32.885 --> 00:03:36.875
I've just created this instance maybe a few hours ago.

00:03:36.875 --> 00:03:39.665
So obviously there haven't been any updates since then.

00:03:39.665 --> 00:03:41.720
So that's not a problem.

00:03:41.720 --> 00:03:46.385
We can just go right into installing Git.

00:03:46.385 --> 00:03:49.910
So again for that we're going to use sudo.

00:03:49.910 --> 00:03:52.760
Again for those of you who are not familiar with Linux,

00:03:52.760 --> 00:03:57.245
I do advise that you do go and watch a couple very quick introduction,

00:03:57.245 --> 00:03:59.480
introductory videos on Linux and how to use

00:03:59.480 --> 00:04:03.380
the command line interface or like the terminal.

00:04:03.380 --> 00:04:06.155
For a Linux operating system,

00:04:06.155 --> 00:04:12.050
a pseudo basically gives us root privileges for that particular command.

00:04:12.050 --> 00:04:14.540
So if we were to write, just write sue for example,

00:04:14.540 --> 00:04:18.380
select sudo su or some variation of soup.

00:04:18.380 --> 00:04:19.805
Depending on the solution,

00:04:19.805 --> 00:04:24.230
it would actually change our user to the root user.

00:04:24.230 --> 00:04:25.580
But that's not advised,

00:04:25.580 --> 00:04:30.515
just like we will advise you to log into AWS using a root user credentials.

00:04:30.515 --> 00:04:34.085
That actually comes from Linux administration.

00:04:34.085 --> 00:04:36.290
Where, you know it's an advisor,

00:04:36.290 --> 00:04:40.865
you use your root user for daily tasks.

00:04:40.865 --> 00:04:42.935
So instead we use sudo,

00:04:42.935 --> 00:04:46.670
which gives root privileges to that command.

00:04:46.670 --> 00:04:48.185
And that's it.

00:04:48.185 --> 00:04:51.995
And so that it keeps stuff pretty safe.

00:04:51.995 --> 00:04:56.450
And when you don't use it, you don't have privileges and when you do use it,

00:04:56.450 --> 00:04:57.980
you do have it just for that instance.

00:04:57.980 --> 00:05:01.520
So now we're installing Git first just because it's a little

00:05:01.520 --> 00:05:06.289
bit easier to install Docker or Apache.

00:05:06.289 --> 00:05:09.425
So let's use yellow again,

00:05:09.425 --> 00:05:13.680
install Git dash y.

00:05:13.960 --> 00:05:17.915
And there we go, it's installing.

00:05:17.915 --> 00:05:21.980
Let that install and we're done.

00:05:21.980 --> 00:05:23.060
Now.

00:05:23.060 --> 00:05:31.565
We can just use git clone and just put in address of any repo and in Git repository.

00:05:31.565 --> 00:05:35.315
And you can just clone that repository right on into here.

00:05:35.315 --> 00:05:37.325
So that's pretty cool.

00:05:37.325 --> 00:05:41.360
Let's now install Docker.

00:05:41.360 --> 00:05:45.545
So since we're using an Amazon Linux 2 instance,

00:05:45.545 --> 00:05:49.560
Amazon actually makes it easy for us to install Docker.

00:05:50.380 --> 00:06:00.185
Amazon Linux extras install Docker.

00:06:00.185 --> 00:06:03.590
So this is kind of the benefit of using

00:06:03.590 --> 00:06:11.779
a AWS backed instance because they have put in some useful.

00:06:11.779 --> 00:06:15.500
Software and that kinda stuff for us to easily access and install.

00:06:15.500 --> 00:06:17.540
Otherwise it might be a little bit more difficult and

00:06:17.540 --> 00:06:20.120
required a little bit more knowledge than x.

00:06:20.120 --> 00:06:22.610
So if we run this,

00:06:22.610 --> 00:06:26.885
there we go, darker is being installed.

00:06:26.885 --> 00:06:33.695
And it's asking us if we're okay with 270 megabytes being

00:06:33.695 --> 00:06:41.645
downloaded and we are or 65 megabytes we downloaded and 7270 and being installed.

00:06:41.645 --> 00:06:48.305
We are because our innocence has enough juice to manage that.

00:06:48.305 --> 00:06:51.305
Otherwise it would be pretty useless.

00:06:51.305 --> 00:06:55.050
So let's just let that install.

00:06:56.070 --> 00:06:59.800
And there we go.

00:06:59.800 --> 00:07:03.564
Docker is now installed.

00:07:03.564 --> 00:07:08.600
And we can start the Docker service or the Docker daemon.

00:07:08.970 --> 00:07:11.900
Like so.

00:07:12.090 --> 00:07:19.090
And we can create or we can add an ec2 user to the Docker group.

00:07:19.090 --> 00:07:21.910
Or we can add, I mean, our,

00:07:21.910 --> 00:07:25.104
our EC2 dash user,

00:07:25.104 --> 00:07:27.130
user to the Docker group.

00:07:27.130 --> 00:07:30.655
So you can execute docker commands without using sudo.

00:07:30.655 --> 00:07:34.390
And we can do that like so again,

00:07:34.390 --> 00:07:35.855
for any of these commands, if,

00:07:35.855 --> 00:07:39.520
if you're confused, you can just easily look them up.

00:07:39.520 --> 00:07:43.240
Your own links has been around for so long that,

00:07:43.240 --> 00:07:46.690
you know every question has prejudgment asked and explained.

00:07:46.690 --> 00:07:52.780
For example, you can pull up the man pages for how

00:07:52.780 --> 00:07:59.755
user mode and user mode and modify a user account.

00:07:59.755 --> 00:08:03.790
And we basically use the a option which is add the user to

00:08:03.790 --> 00:08:09.715
the supplementary groups used only with the dash capital G option.

00:08:09.715 --> 00:08:12.340
And what is a cat and dash capital G option?

00:08:12.340 --> 00:08:15.265
Dash capital G is a group,

00:08:15.265 --> 00:08:18.535
so a list of supplementary groups which the user is also a member of.

00:08:18.535 --> 00:08:20.690
Each group is separated, etc.

00:08:20.690 --> 00:08:23.120
So if the user is currently a member of a group which is not listed,

00:08:23.120 --> 00:08:24.620
the easier it will be removed from the group.

00:08:24.620 --> 00:08:27.410
This behavior can be changed via the dash I option,

00:08:27.410 --> 00:08:30.230
which appends the user to the current supplementary group list.

00:08:30.230 --> 00:08:34.805
So basically here, if we pull up our previous command using the up arrow,

00:08:34.805 --> 00:08:36.830
we can see that, you know,

00:08:36.830 --> 00:08:40.760
we're, we're adding to the group darker,

00:08:40.760 --> 00:08:44.615
the user, EC2, dash user.

00:08:44.615 --> 00:08:47.420
So with that being done,

00:08:47.420 --> 00:08:52.835
we can now log out and log back in again

00:08:52.835 --> 00:08:58.625
to pick up the new Docker group permissions so that those can be start functioning.

00:08:58.625 --> 00:09:03.930
And then so that's do that.

00:09:04.120 --> 00:09:07.620
And then we'll just log back in.

00:09:09.550 --> 00:09:13.294
And then we can see if it's actually working.

00:09:13.294 --> 00:09:15.770
Docker info and there we go. Darker is up and running.

00:09:15.770 --> 00:09:18.020
Do we have any containers up? No.

00:09:18.020 --> 00:09:20.180
Do we have any images?

00:09:20.180 --> 00:09:22.295
No. But doctors there,

00:09:22.295 --> 00:09:26.390
it's up and running, so that's pretty cool. Right Now.

00:09:26.390 --> 00:09:31.610
Hauling needs an image or Docker file in your application.

00:09:31.610 --> 00:09:33.260
Now you can get it running on here with,

00:09:33.260 --> 00:09:36.095
without having to worry about any other dependencies because

00:09:36.095 --> 00:09:39.440
you have taken care of those in your Docker file.

00:09:39.440 --> 00:09:44.195
Now, lastly, let's look.

00:09:44.195 --> 00:09:47.750
How we can install an Apache server.

00:09:47.750 --> 00:09:53.900
Now, I personally don't use too often because I'm not a web developer.

00:09:53.900 --> 00:10:00.200
But it is a very common thing and obviously is Engine X as well and other options.

00:10:00.200 --> 00:10:05.180
But let's go ahead and just try for Apache.

00:10:05.180 --> 00:10:11.585
And so let's first clear our screen Control L.

00:10:11.585 --> 00:10:21.095
So let's install the Apache web server using sudo.

00:10:21.095 --> 00:10:31.775
Yum install HTTPD X A6 underscore 64.

00:10:31.775 --> 00:10:33.980
Let's go ahead and install it.

00:10:33.980 --> 00:10:36.950
And that was quick.

00:10:36.950 --> 00:10:39.935
So I've cleared the page again.

00:10:39.935 --> 00:10:48.510
So we can start the web server using system control.

00:10:48.760 --> 00:10:54.125
Start HTTPD dot service.

00:10:54.125 --> 00:11:00.170
And then we want this to persist throughout our sessions.

00:11:00.170 --> 00:11:04.430
We don't want it to stop every time we exit or log out, right?

00:11:04.430 --> 00:11:08.880
So we have to enable it, sudo,

00:11:09.100 --> 00:11:18.779
system control, enable HTTP D dot service.

00:11:19.720 --> 00:11:25.610
And now we can test to see if the web server is actually up and running.

00:11:25.610 --> 00:11:27.530
If it is right,

00:11:27.530 --> 00:11:35.420
it should be returning something on the port 80 because this is a web server.

00:11:35.420 --> 00:11:43.145
And there we go, we get a very simple static web page,

00:11:43.145 --> 00:11:45.785
just an HTML file, our page.

00:11:45.785 --> 00:11:48.365
So this means that on the local machine,

00:11:48.365 --> 00:11:49.430
so this is not exposed.

00:11:49.430 --> 00:11:53.945
Remember we do not have port 80 exposed to the public,

00:11:53.945 --> 00:11:58.190
exposed to external traffic,

00:11:58.190 --> 00:12:00.755
but internally within our network.

00:12:00.755 --> 00:12:05.225
On port 80, we now have a webpage that is showing.

00:12:05.225 --> 00:12:09.575
And that's because the Apache web servers up and functioning.

00:12:09.575 --> 00:12:18.709
So curl, just basically that's to fetch or access a new URL.

00:12:18.709 --> 00:12:20.540
So by default, right,

00:12:20.540 --> 00:12:23.510
it's just pulling in the page or whatever

00:12:23.510 --> 00:12:26.780
is existing in the URL that we supplied it in our cases,

00:12:26.780 --> 00:12:29.780
localhost, Localhost colon 80.

00:12:29.780 --> 00:12:37.860
So now let's, because this is a kind of an ugly webpage here,

00:12:37.990 --> 00:12:40.250
we can actually change it.

00:12:40.250 --> 00:12:50.015
So this, we see this ugly yet simple static HTML page that is presented to us,

00:12:50.015 --> 00:12:54.725
showing us that the Apache web server is running on port

00:12:54.725 --> 00:13:00.080
80 and is successfully serving pages, web pages.

00:13:00.080 --> 00:13:04.430
Now, because this is a very ugly page,

00:13:04.430 --> 00:13:11.015
let's replace it with just a simple Hello World or some like that.

00:13:11.015 --> 00:13:13.520
Just so we don't have to deal with this.

00:13:13.520 --> 00:13:17.060
And so we can actually, what we can do.

00:13:17.060 --> 00:13:22.280
So echo is a function within Linux command,

00:13:22.280 --> 00:13:27.845
if you will, that basically to display a line of text, that's all it does.

00:13:27.845 --> 00:13:32.510
So if you write echo hello world,

00:13:32.510 --> 00:13:35.060
it just prints Hello World.

00:13:35.060 --> 00:13:38.940
And if we pipe this instead into

00:13:39.640 --> 00:13:47.000
a file in var slash www slash HTML slash index.html.

00:13:47.000 --> 00:13:53.780
Now we basically written helloworld into this file and we can view that using Nano.

00:13:53.780 --> 00:14:00.725
It's very simple text editor within Linux.

00:14:00.725 --> 00:14:04.730
And we see that we've written Hello World into this file.

00:14:04.730 --> 00:14:13.445
Okay, so now when we do curl localhost 8080,

00:14:13.445 --> 00:14:19.775
we were presented with a very simple webpage that just contains the text Hello World.

00:14:19.775 --> 00:14:22.205
So that's pretty cool, right?

00:14:22.205 --> 00:14:27.300
And in fact, what we can do is you can get your host name.

00:14:28.600 --> 00:14:30.275
Like so.

00:14:30.275 --> 00:14:31.520
So this is our host name.

00:14:31.520 --> 00:14:36.965
We can see our local IP address and then compute that internal.

00:14:36.965 --> 00:14:46.055
And we can serve a webpage that gives the user the one who access the web page,

00:14:46.055 --> 00:14:50.660
the host name of our instance, right?

00:14:50.660 --> 00:14:55.580
That would be pretty cool. So we can do hello world.

00:14:55.580 --> 00:15:03.065
Hello world, let's say from host name.

00:15:03.065 --> 00:15:06.230
And I'll just run that command and gives the output.

00:15:06.230 --> 00:15:11.135
So like see Hello World from, and that's the host name.

00:15:11.135 --> 00:15:13.340
And dollar sign and the parenthesis,

00:15:13.340 --> 00:15:15.770
it will just run that command and it will give you

00:15:15.770 --> 00:15:18.950
the result of it within, within your text.

00:15:18.950 --> 00:15:29.210
And so we can pipe that into far WWW slash HTML slash index.html.

00:15:29.210 --> 00:15:35.100
And then now if we do a curl localhost,

00:15:37.060 --> 00:15:39.710
we get this page.

00:15:39.710 --> 00:15:42.620
So this is actually a web page in a couple of sexism.

00:15:42.620 --> 00:15:46.040
I show you how to set the security group so you can view this patron browser.

00:15:46.040 --> 00:15:49.880
You'll see that we will be presented with a web page that contains this text.

00:15:49.880 --> 00:15:51.380
So that's pretty cool, right?

00:15:51.380 --> 00:15:56.240
So we're basically giving the host name of our instance to

00:15:56.240 --> 00:16:01.460
anybody who accesses our instance through the port 80,

00:16:01.460 --> 00:16:04.790
which is the HTTP port.

00:16:04.790 --> 00:16:07.310
So that's, so, that's very cool.

00:16:07.310 --> 00:16:11.975
And this means that we have are functioning and working Apache web server up and running.

00:16:11.975 --> 00:16:15.260
So again, you might not be interested in Apache web server.

00:16:15.260 --> 00:16:17.960
It might not be what you need for your line of work,

00:16:17.960 --> 00:16:19.580
but it is very common.

00:16:19.580 --> 00:16:23.015
So I wanted to give you some more technical hands-on

00:16:23.015 --> 00:16:27.080
experience just in selling something that's more fair.

00:16:27.080 --> 00:16:28.835
We can, we can play around with.

00:16:28.835 --> 00:16:32.375
And hopefully I gave you some good exposure to Linux as well.

00:16:32.375 --> 00:16:33.855
Again, this is another Linux course.

00:16:33.855 --> 00:16:36.245
I'm not going to be going into any further depth,

00:16:36.245 --> 00:16:39.980
but you are advised to learn as much as

00:16:39.980 --> 00:16:44.765
possible when it comes to Linux if you do intend to be a high-quality DevOps engineer.

00:16:44.765 --> 00:16:46.430
So in the next video,

00:16:46.430 --> 00:16:50.870
I'm actually going to show you how we can put all these commands into

00:16:50.870 --> 00:16:57.455
a single file and supply it to AWS as something called user data.

00:16:57.455 --> 00:17:02.870
So that it can actually run these commands for us while initiating the instance.

00:17:02.870 --> 00:17:06.305
And therefore, we won't have to log in and do all of that on our own.

00:17:06.305 --> 00:17:09.500
And we can have good Docker Apache or

00:17:09.500 --> 00:17:15.290
any other software program installed on our instance while it's being initiated.

00:17:15.290 --> 00:17:16.940
So I will see you in the next video.

00:17:16.940 --> 00:17:18.300
Bye.
