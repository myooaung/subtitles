WEBVTT
1
00:00:04.660 --> 00:00:09.990
Hello and welcome to the final tutorial of this module one building a block chain.

2
00:00:10.030 --> 00:00:11.950
Now it is time for the demo.

3
00:00:12.190 --> 00:00:15.970
You can hear by the sound of my voice and I'm super excited to show you this.

4
00:00:16.000 --> 00:00:22.000
We're basically going to run the app as you can see by the less code section of our implementation.

5
00:00:22.000 --> 00:00:27.970
We're going to run the app from our flask app and then we will jump into Boseman to make our requests

6
00:00:28.330 --> 00:00:30.720
and we will test our two requests.

7
00:00:30.790 --> 00:00:36.340
The mind block request to mine a block and to get chain request and we will actually start with this

8
00:00:36.340 --> 00:00:43.870
get 10 request to make sure that when we run the whole code Well the Genesis block is well created with

9
00:00:43.930 --> 00:00:47.590
I remind a proof of one and a previous hash of 0.

10
00:00:47.590 --> 00:00:54.220
So we'll check that first and then we will mine some blocks we can mine as many blocks as you want and

11
00:00:54.220 --> 00:00:59.530
from time to time we can get the chain to see the actual state of the chain.

12
00:00:59.770 --> 00:01:00.990
So let's do all this.

13
00:01:01.030 --> 00:01:08.740
Now we just need to make a single line of code to run this app and to do this we take our app object

14
00:01:09.010 --> 00:01:13.510
which remains an instance of the flask class our app object.

15
00:01:13.510 --> 00:01:20.770
And from this app object we are going to call the run method into which we have to input two arguments

16
00:01:21.190 --> 00:01:23.060
the host and the port.

17
00:01:23.170 --> 00:01:27.510
So to know exactly what we have to input for these two arguments.

18
00:01:27.640 --> 00:01:29.510
Well let's go back to the flask.

19
00:01:29.600 --> 00:01:32.740
Quickstart Guide so I'm going to go back to Google.

20
00:01:32.740 --> 00:01:34.190
Here is the Quickstart Guide.

21
00:01:34.330 --> 00:01:40.440
And as you can see our flask web application is running on this euro.

22
00:01:40.660 --> 00:01:48.220
So we will put this u r l in postman but so far remember that we have to put in the run method from

23
00:01:48.220 --> 00:01:51.750
our app object the host and the port.

24
00:01:51.940 --> 00:01:59.620
So if we scroll down a little bit we can see a few words on the host and more specifically we can see

25
00:01:59.620 --> 00:02:06.370
that if we trust the users on our network we can make the server publicly available simply by adding

26
00:02:06.370 --> 00:02:09.500
hostie calls opens you up on 0.0.

27
00:02:09.670 --> 00:02:16.850
And since we will all be interacting with our blood chain but in Mudgal too because that's only module

28
00:02:16.850 --> 00:02:19.250
2 that we will de-centralized block chain.

29
00:02:19.300 --> 00:02:25.240
Well we are already going into this hostie call zero point zero point zero point zero to make the server

30
00:02:25.240 --> 00:02:26.620
publicly available.

31
00:02:26.620 --> 00:02:28.940
That's our first argument.

32
00:02:29.140 --> 00:02:33.070
Let's go back to Python to improve this.

33
00:02:33.070 --> 00:02:38.600
So let's just base that inside sequel's zero point zero point zero.

34
00:02:38.740 --> 00:02:39.510
But just be careful.

35
00:02:39.510 --> 00:02:43.790
We need to put the four zeros in quotes just like that.

36
00:02:43.900 --> 00:02:48.180
And now second argument the second argument is the port.

37
00:02:48.370 --> 00:02:53.830
And again if we go back to the flask Quickstart Guide we can see the port.

38
00:02:53.860 --> 00:02:56.270
It is the port 5000.

39
00:02:56.350 --> 00:02:56.680
All right.

40
00:02:56.680 --> 00:03:01.290
So let's just give you this let's go back to Python.

41
00:03:01.360 --> 00:03:07.990
Here we go and let's put the second argument which is the port that is equal to 5000.

42
00:03:08.090 --> 00:03:08.710
All right.

43
00:03:08.740 --> 00:03:10.940
And now we ready to run the app.

44
00:03:11.110 --> 00:03:16.930
So to run the app we not only need to run a single line of code but of course we need to run the whole

45
00:03:16.930 --> 00:03:17.610
code.

46
00:03:17.650 --> 00:03:26.020
So I just selected the whole code and just before we execute this what I recommend is to be in the right

47
00:03:26.020 --> 00:03:27.690
folder and file explorer.

48
00:03:27.700 --> 00:03:32.950
So I'm just going to go to my desktop and then my blocking it is a folder and then module one create

49
00:03:32.950 --> 00:03:39.020
a block chain because in general it's recommended to execute the code in your working directory folder.

50
00:03:39.190 --> 00:03:40.670
So here we go.

51
00:03:40.690 --> 00:03:42.920
Let's run the whole code.

52
00:03:42.940 --> 00:03:43.900
Are you ready.

53
00:03:43.900 --> 00:03:45.250
Here we go.

54
00:03:45.250 --> 00:03:45.820
All right.

55
00:03:45.820 --> 00:03:51.160
Running on HTP open 0.0 0.0 Karlen 5000.

56
00:03:51.340 --> 00:03:53.390
Everything seems to be all good.

57
00:03:53.590 --> 00:03:56.360
So now we are ready to jump to.

58
00:03:56.740 --> 00:03:59.440
So the server is up and running.

59
00:03:59.590 --> 00:04:01.720
We have nothing left to do in Python.

60
00:04:01.720 --> 00:04:09.100
We can now go to our list of programs or our list of applications for Mac users and find postman.

61
00:04:09.100 --> 00:04:15.340
So remember I downloaded postman which was in my download folder but then I put it in my applications

62
00:04:15.640 --> 00:04:16.420
folder.

63
00:04:16.420 --> 00:04:23.140
So here it is let's double click on it and it should be opening in any second.

64
00:04:23.140 --> 00:04:24.050
There it is.

65
00:04:24.370 --> 00:04:26.260
And here is postman.

66
00:04:26.260 --> 00:04:26.530
All right.

67
00:04:26.540 --> 00:04:28.210
So welcome back to postman.

68
00:04:28.450 --> 00:04:33.860
And now we're directly going to make our request and to make a request.

69
00:04:33.970 --> 00:04:36.630
Well we simply need to answer the request.

70
00:04:36.640 --> 00:04:38.470
You are all right here.

71
00:04:38.470 --> 00:04:45.060
We first need to select the type of request as you can see have all the types of requests here including

72
00:04:45.070 --> 00:04:46.910
GET and POST for.

73
00:04:46.930 --> 00:04:50.310
And right now we will only be sending some get requests.

74
00:04:50.470 --> 00:04:51.460
So let's play this.

75
00:04:51.460 --> 00:04:56.610
It was our elected anyway and now we just need to enter the request.

76
00:04:56.740 --> 00:04:58.390
So what is this request you are L..

77
00:04:58.540 --> 00:05:04.320
Well that's exactly that you are RL I showed you in the Quickstart Guide.

78
00:05:04.480 --> 00:05:07.250
But then after the last slash this you are l.

79
00:05:07.360 --> 00:05:13.330
Well we need to add the name of the request we put in our decorator.

80
00:05:13.390 --> 00:05:15.570
So first let's get the flask.

81
00:05:15.610 --> 00:05:21.770
Or else I'm just going to go back to the flask Quickstart Guide To get the flexural.

82
00:05:21.790 --> 00:05:24.380
So that's exactly what we need this year.

83
00:05:24.410 --> 00:05:25.370
All right here.

84
00:05:25.500 --> 00:05:26.670
So let's copy this.

85
00:05:26.800 --> 00:05:34.240
Let's go back to postman and let's just play that here and now here we go we were ready to add any of

86
00:05:34.240 --> 00:05:35.590
the two requests we made.

87
00:05:35.590 --> 00:05:39.900
So as a reminder that in Python We made two requests.

88
00:05:40.000 --> 00:05:45.700
The mind blank request to mine a block and the get change request to get the whole chain displayed in

89
00:05:45.700 --> 00:05:46.560
Postman.

90
00:05:46.600 --> 00:05:48.310
So we're going to start with this one.

91
00:05:48.340 --> 00:05:53.860
We will see the whole chain which will just contain one block which will be the genesis Blug and then

92
00:05:53.860 --> 00:06:00.000
we'll mind some blocks will mine like 10 to 20 blocks and from time to time we will display the blocks

93
00:06:00.030 --> 00:06:04.600
and again to see if we have our blocks correctly added to the blotching.

94
00:06:04.870 --> 00:06:08.850
So let's do this let's go back to postman.

95
00:06:08.920 --> 00:06:09.200
All right.

96
00:06:09.220 --> 00:06:14.240
As we said we're going to start with to get chain request.

97
00:06:14.260 --> 00:06:16.990
So you just need to add ketchin here as I just did.

98
00:06:17.110 --> 00:06:23.150
And then you have two choices either you click on send here or you can just press enter.

99
00:06:23.260 --> 00:06:24.030
So as you want.

100
00:06:24.070 --> 00:06:25.510
I'm going to press enter.

101
00:06:25.510 --> 00:06:26.460
There you go.

102
00:06:26.770 --> 00:06:27.780
And here you go.

103
00:06:27.790 --> 00:06:29.690
Welcome to our blog.

104
00:06:29.860 --> 00:06:32.190
Here is our block chain with only one plug.

105
00:06:32.260 --> 00:06:36.410
The Genesis plug and we can confirm that the previous hash is zero.

106
00:06:36.520 --> 00:06:39.940
And the proof is one and this block was created.

107
00:06:39.940 --> 00:06:48.700
The fourth of February in 2018 at precisely midnight and 23 minutes you can now have a good idea of

108
00:06:48.700 --> 00:06:51.020
what I am doing on a Saturday night.

109
00:06:51.130 --> 00:06:53.120
So I get in request.

110
00:06:53.140 --> 00:06:54.460
Works very well.

111
00:06:54.460 --> 00:06:56.650
We have our Genesis block created.

112
00:06:56.740 --> 00:06:58.710
We have the first block of our block chain.

113
00:06:58.720 --> 00:07:02.350
Now let's mine some new blocks so to mine some new looks.

114
00:07:02.380 --> 00:07:12.060
Well here we simply need to replace get chain by nine block and then same just press enter.

115
00:07:12.280 --> 00:07:13.220
And here we go.

116
00:07:13.300 --> 00:07:17.280
Index to as you can see this is the second block that is mind.

117
00:07:17.470 --> 00:07:18.600
And we have our message.

118
00:07:18.610 --> 00:07:19.740
Congratulations.

119
00:07:19.810 --> 00:07:21.630
You just mind a block.

120
00:07:21.640 --> 00:07:27.340
We have the previous hash which is the hash of the previous block which we could check by applying the

121
00:07:27.340 --> 00:07:30.670
hash function that we made on the Genesis block.

122
00:07:30.670 --> 00:07:31.830
Then we have the proof.

123
00:07:31.840 --> 00:07:38.590
So the solution to our problem to get a cryptographic hash of the square of the new proof minus the

124
00:07:38.590 --> 00:07:41.510
square of 1 starting with folding zeroes.

125
00:07:41.620 --> 00:07:49.190
Well the solution to that was 533 meaning that the cryptographic hash of the encoded string of the square

126
00:07:49.190 --> 00:07:51.910
of 533 9 of the square of 1.

127
00:07:51.910 --> 00:07:54.880
That is one starts with four leading zeroes.

128
00:07:54.880 --> 00:07:56.990
You can check that in the console.

129
00:07:57.010 --> 00:07:58.710
By then if you want.

130
00:07:58.720 --> 00:08:03.730
And again we have the time stamp our block was mind still on a Saturday night.

131
00:08:03.760 --> 00:08:10.990
I haven't moved anywhere on the 4th of February at midnight and 34 minutes.

132
00:08:10.990 --> 00:08:11.740
All right perfect.

133
00:08:11.740 --> 00:08:18.790
So now let's just get our chain back that is let's just display again and it's very easy now and you

134
00:08:18.790 --> 00:08:22.990
just need to replace mine like mega-chain and get trained by man Blug.

135
00:08:23.050 --> 00:08:24.790
We're going to do that several times.

136
00:08:24.790 --> 00:08:27.350
We're going to mine 20 or 30 blocks just for fun.

137
00:08:27.370 --> 00:08:31.510
So let's press enter here and now here we go we have two blocks.

138
00:08:31.630 --> 00:08:33.520
The Genesis block here of the next one.

139
00:08:33.580 --> 00:08:42.580
And our first mind block of index 2 and we have also the length of the chain which indeed contains two

140
00:08:42.580 --> 00:08:43.510
blocks.

141
00:08:43.510 --> 00:08:43.840
All right.

142
00:08:43.840 --> 00:08:50.020
Now let's play with this so I'm going to mine several blocks at a time.

143
00:08:50.200 --> 00:08:53.380
So there we go mining a second block.

144
00:08:53.590 --> 00:08:59.890
So here we go we have our new block of index three Congratulations you just mind to block and the proof

145
00:08:59.890 --> 00:09:05.570
is now forty five thousand two hundred ninety three and it was mind at midnight 37 minutes.

146
00:09:05.650 --> 00:09:06.520
Great.

147
00:09:06.520 --> 00:09:09.860
Now let's make another Blug So the request is are you ready.

148
00:09:09.970 --> 00:09:11.420
Let's press enter.

149
00:09:11.440 --> 00:09:12.040
Here we go.

150
00:09:12.040 --> 00:09:13.880
A new block of next four.

151
00:09:13.890 --> 00:09:16.070
Enter again and you plug in the next five.

152
00:09:16.270 --> 00:09:18.240
Enter enter enter.

153
00:09:18.310 --> 00:09:22.170
I have tons of new mind blocks and I'm happy.

154
00:09:22.360 --> 00:09:27.370
And so as you can see it's very easy to mount some blocks if you want to increase the complexity of

155
00:09:27.370 --> 00:09:27.880
the problem.

156
00:09:27.880 --> 00:09:35.350
You just need to make the operation more complex or an easier solution is to increase the number of

157
00:09:35.350 --> 00:09:36.210
leading zeros.

158
00:09:36.370 --> 00:09:40.530
I told you that it's a great way of increasing the complexity.

159
00:09:40.570 --> 00:09:46.670
So here we go let's mine some new blocks again 16 17 18 19 20.

160
00:09:46.690 --> 00:09:48.100
Now we have 20 blocks.

161
00:09:48.130 --> 00:09:53.970
Let's check the state of our chain with the Get change request.

162
00:09:53.980 --> 00:09:54.890
There we go.

163
00:09:55.090 --> 00:10:02.770
And here is our chain now containing 20 blocks as we can see very clearly not only with the length here

164
00:10:03.130 --> 00:10:04.050
say 20.

165
00:10:04.160 --> 00:10:10.020
But with all our blogs with their indexes 16 17 18 19 20.

166
00:10:10.040 --> 00:10:11.450
All right so perfect.

167
00:10:11.450 --> 00:10:13.910
Our blood chain is functioning very well.

168
00:10:13.910 --> 00:10:17.880
And so that means that we now have a general blood chain.

169
00:10:17.960 --> 00:10:24.190
So much of what is done now we're going to move on to the next level which will be Mudgal 2 and Mudgal

170
00:10:24.210 --> 00:10:31.520
2 will create a cryptocurrency the had coin and to create it we will start from this ruction we will

171
00:10:31.520 --> 00:10:32.350
develop it.

172
00:10:32.510 --> 00:10:33.820
We will decentralize it.

173
00:10:33.860 --> 00:10:39.890
So we will create a decentralized network of several nodes and each of you by the way will be able to

174
00:10:39.890 --> 00:10:45.920
get on some node to mine some blocks in the block chain to get the crypto currencies and you'll see

175
00:10:45.920 --> 00:10:52.400
to develop this we will need to make some other requests which will not only be get requests but mostly

176
00:10:52.670 --> 00:10:58.850
post requests because in this election we are going to add some data which will be the transactions

177
00:10:58.940 --> 00:11:05.300
of the coins and to create these transactions we will need to make a post request creating adjacent

178
00:11:05.330 --> 00:11:13.220
file containing the secured informations of the transactions with the sender the receiver and the amount

179
00:11:13.340 --> 00:11:15.040
of coins exchanged.

180
00:11:15.050 --> 00:11:16.810
I can't wait to build that coins.

181
00:11:16.880 --> 00:11:18.550
And until then good luck checks.
