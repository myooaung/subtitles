WEBVTT
1
00:00:05.350 --> 00:00:11.980
Hello welcome to this new tutorial and this one we're going to check if at any time during the ICU an

2
00:00:12.040 --> 00:00:14.160
investor can buy some at coins.

3
00:00:14.380 --> 00:00:21.980
And so we're going to check this through a modifier which is a solidity tool that Wilko can buy at.

4
00:00:22.150 --> 00:00:25.300
You'll see and that will simply check that.

5
00:00:25.300 --> 00:00:31.180
For example if an investor wants to invest a certain amount of money well we will check in this multifaith

6
00:00:31.210 --> 00:00:35.310
that his money invested plus the total at coins.

7
00:00:35.320 --> 00:00:41.470
But by all the other investors so far is less than the total number of coins.

8
00:00:41.470 --> 00:00:46.370
That is the original maximum number of at Cone's that was for sale.

9
00:00:46.390 --> 00:00:47.590
So we're going to check this.

10
00:00:47.770 --> 00:00:53.360
And then if that condition is verified Well the investor will have to go to buy some at coins.

11
00:00:53.680 --> 00:00:58.120
OK so let's make this modifier to make emulsifier insularity.

12
00:00:58.240 --> 00:01:04.990
You start obviously with nullifier modifier and then you need to give a name to this nullifier which

13
00:01:04.990 --> 00:01:13.020
will go as we said can buy at coin's then some parenthesis because it's like a function.

14
00:01:13.100 --> 00:01:20.170
This will take an argument which will be the amount of U.S. dollars the investor wants to invest to

15
00:01:20.170 --> 00:01:22.100
buy a certain amount of coins.

16
00:01:22.270 --> 00:01:23.900
So you know it's not the whole money.

17
00:01:23.980 --> 00:01:27.880
The investor wants to invest but it's a certain amount of dollars.

18
00:01:27.880 --> 00:01:34.360
The investor wants to invest at a certain time during the CEO to buy whatever amount of coins he or

19
00:01:34.360 --> 00:01:35.760
she wants.

20
00:01:35.950 --> 00:01:42.010
And therefore this variable will have to tide you into again it's going to be an integer and we will

21
00:01:42.010 --> 00:01:48.580
call this horrible USD invested but we need to start with the type and the type is as we just said you

22
00:01:48.710 --> 00:01:49.320
didn't.

23
00:01:49.630 --> 00:01:57.760
And then the name of the variable you as the invested are right and now be careful it's not like in

24
00:01:57.760 --> 00:01:58.390
Python.

25
00:01:58.400 --> 00:02:01.810
I always make sure to remember that I'm not in Python.

26
00:02:01.960 --> 00:02:04.540
We need to add some brackets here.

27
00:02:04.540 --> 00:02:09.680
And if I press Enter There we go the closing bracket is automatically added.

28
00:02:09.690 --> 00:02:11.040
So that's a bracket.

29
00:02:11.120 --> 00:02:16.440
And you can buy at coin's modifier and that's the bracket of the whole contract.

30
00:02:16.450 --> 00:02:18.460
OK so modifier.

31
00:02:18.460 --> 00:02:23.800
Now we are going to enter the condition that we want to check to make sure the investor can buy the

32
00:02:23.800 --> 00:02:27.460
at coins with the money he wants to invest at a certain point.

33
00:02:27.550 --> 00:02:35.110
But we have to put this condition in something called require which is again like a function that will

34
00:02:35.380 --> 00:02:38.390
check if this condition is true and if it is true.

35
00:02:38.530 --> 00:02:44.140
Well the function that will be linked to the modifier will be able to run which you will see will be

36
00:02:44.440 --> 00:02:46.260
the buy at coin's function.

37
00:02:46.580 --> 00:02:46.910
OK.

38
00:02:46.910 --> 00:02:54.220
So and this required here let's input the condition which we said Well very simply we must check that

39
00:02:54.340 --> 00:03:00.670
with the money that the investor invests in us the well we must simply check that there is still enough

40
00:03:00.920 --> 00:03:03.560
coins for this amount of money.

41
00:03:03.640 --> 00:03:07.040
And so let's convert everything in coins.

42
00:03:07.480 --> 00:03:16.960
We must check that the U.S. dollars invested by the investor multiplied by the conversion rate from

43
00:03:17.050 --> 00:03:19.440
us to at Cone's which is 1000.

44
00:03:19.450 --> 00:03:26.210
But let's use the variable here in case you want to do some other IFCO with some other tokens so you

45
00:03:26.210 --> 00:03:27.950
as d to add coins.

46
00:03:28.180 --> 00:03:38.050
So this amount here gives us the amount of coins that the investor wants to buy with his USD invested

47
00:03:38.440 --> 00:03:40.370
at a certain point of the year.

48
00:03:40.640 --> 00:03:50.830
And so if this amount in at coin's plus the total amount of coins already but which is given by this

49
00:03:50.830 --> 00:03:56.660
variable here total actions but so I'm copying this and pasted it here.

50
00:03:56.830 --> 00:04:03.670
So if basically the amount of coins that the investor wants to buy plus the total number of at coins

51
00:04:03.670 --> 00:04:12.460
already but well we must check that this is less than the total number of coins existing which is 1

52
00:04:12.460 --> 00:04:13.080
million.

53
00:04:13.120 --> 00:04:17.040
That is the maximum number of coins originally available for sale.

54
00:04:17.320 --> 00:04:19.350
So let's add here.

55
00:04:19.600 --> 00:04:20.940
Lower then.

56
00:04:21.010 --> 00:04:21.780
All right.

57
00:04:21.790 --> 00:04:28.830
And we must check that this amount here is lower than the maximum number of at Queens Max at.

58
00:04:29.290 --> 00:04:36.550
That's the condition we must check to make sure an investor can buy some at coins with a certain amount

59
00:04:36.670 --> 00:04:37.910
of U.S. dollars.

60
00:04:38.260 --> 00:04:38.550
OK.

61
00:04:38.560 --> 00:04:47.440
So now to conclude with this money fire we must not forget the semicolon and then just add here no underscore

62
00:04:47.620 --> 00:04:51.480
with a semicolon again and there we go our modifier is around.

63
00:04:51.670 --> 00:04:57.640
So the underscore here is just to say that the functions to which we will link the modifier will only

64
00:04:57.640 --> 00:05:00.080
be applied if the condition is verified.

65
00:05:00.160 --> 00:05:04.220
That is if this condition it's true.

66
00:05:04.620 --> 00:05:05.130
All right.

67
00:05:05.130 --> 00:05:07.890
And that's exactly the purpose of a modified.
