1
00:00:04,870 --> 00:00:06,860
Well welcome back to the course on blockade.

2
00:00:07,090 --> 00:00:13,570
And today we have an extra tutorial that I originally wanted to include in the mining difficulties of.

3
00:00:13,570 --> 00:00:22,060
But then it became just too long and I didn't see it quite necessary So this is like a kind of bonus

4
00:00:22,060 --> 00:00:30,310
topic if you will about how you can derive the current target how it's actually stored in the blocks

5
00:00:30,520 --> 00:00:31,900
so you don't have to take this to trial.

6
00:00:31,900 --> 00:00:33,940
There will be some calculations.

7
00:00:34,240 --> 00:00:39,420
Not complex math but some tedious calculations and you might find interesting.

8
00:00:39,490 --> 00:00:43,400
On the other hand you might find it not useful so feel free to skip this to trial.

9
00:00:43,480 --> 00:00:49,590
But nevertheless I personally found this concept interesting and that's why I decided to record this.

10
00:00:49,600 --> 00:00:51,800
All right so let's have a look.

11
00:00:51,820 --> 00:00:58,350
We talked about this in the difficulty tutorial how difficult is related to Target to do that.

12
00:00:58,360 --> 00:01:02,020
Is the current target divided by the max target.

13
00:01:02,110 --> 00:01:08,130
And so here we can see oops we can see that the current target is.

14
00:01:08,290 --> 00:01:12,150
Has that been adding zeros and or has that number over there.

15
00:01:12,310 --> 00:01:15,160
And then the next target has that number there.

16
00:01:15,190 --> 00:01:17,570
And that building is.

17
00:01:17,980 --> 00:01:23,570
And so interestingly enough we're going to find out as well today why there's so many leadings or why

18
00:01:23,590 --> 00:01:28,270
something like a proper number why that there's only like six digits here or you know four digits here

19
00:01:28,280 --> 00:01:30,450
it's actually six zeros.

20
00:01:30,550 --> 00:01:32,430
But yeah.

21
00:01:32,440 --> 00:01:36,000
So why is there a proper number why is it like a truncated type of number.

22
00:01:36,220 --> 00:01:43,160
So maybe it would be kind of like an extra piece of knowledge that we get from the.

23
00:01:43,390 --> 00:01:45,460
It's going to be like a side conclusion.

24
00:01:45,490 --> 00:01:50,980
The main thing that we're after the main thing we're after is where where is this target stored right

25
00:01:52,360 --> 00:01:58,300
where is that store remember last time how we did it we just went through the blockade and examples

26
00:01:58,300 --> 00:02:00,050
of the blocks to find the car.

27
00:02:00,050 --> 00:02:03,550
So we just looked at the number of zeros in the blocks and we decided OK.

28
00:02:03,550 --> 00:02:04,550
So it's 18 zeros.

29
00:02:04,600 --> 00:02:07,140
But how do you get the exact value of the target.

30
00:02:07,300 --> 00:02:08,740
So that's what we have today.

31
00:02:08,740 --> 00:02:11,000
So whereas the current target is stored.

32
00:02:11,170 --> 00:02:20,170
Well if we look at an example of a block you will see here it has a field called B it's it's called

33
00:02:20,440 --> 00:02:23,610
that's all that's part of the information that store in the block.

34
00:02:23,800 --> 00:02:28,290
And so there is no field called Target.

35
00:02:28,330 --> 00:02:35,290
There's no actual hash target here but they do have this field called bits and that's nauts.

36
00:02:35,410 --> 00:02:40,980
It's not the size or anything like megabits or kilobits is just it's just that is it's a code.

37
00:02:41,050 --> 00:02:45,940
It's a code that store here and today we're going to learn how to read that code and how to from this

38
00:02:45,940 --> 00:02:48,480
code get this number.

39
00:02:48,540 --> 00:02:54,640
It's all legal to look completely different Yeah but at the same time that's exactly where it's stored.

40
00:02:54,640 --> 00:02:56,640
So let's have a look how we're going to do this.

41
00:02:56,650 --> 00:02:56,950
All right.

42
00:02:56,950 --> 00:03:05,950
The first step is to take this value bits and turn it into a hexadecimal number.

43
00:03:05,980 --> 00:03:13,880
So I was going to have to remember what it is here so is 3:9 to double 0 9 6 9 2.

44
00:03:13,900 --> 00:03:28,570
All right so we're going to go to a hex calculator and we're going to go 3 9 2 0 6 9 2 3 9 2 0 9 6 9

45
00:03:28,570 --> 00:03:31,820
2 0 9 6 9 to convert.

46
00:03:31,810 --> 00:03:33,280
There is a hex number.

47
00:03:33,700 --> 00:03:34,310
OK.

48
00:03:34,330 --> 00:03:35,610
Copy it.

49
00:03:35,930 --> 00:03:39,380
And well we don't really need to because this is a slide.

50
00:03:39,610 --> 00:03:44,280
So there there's bits and there is are there there's a hex number.

51
00:03:44,290 --> 00:03:47,440
So you can see exactly the same number as I got here.

52
00:03:47,440 --> 00:03:52,690
So this is basically our bids and number in decimals in the decimal system.

53
00:03:52,690 --> 00:03:54,060
This is in hex.

54
00:03:54,220 --> 00:03:59,080
All right so you can see we're already getting close so you see the suspiciously similar thing here

55
00:03:59,080 --> 00:04:06,220
5 9 9 7 9 0 5 D 9 7 DC 5 d and DC.

56
00:04:06,340 --> 00:04:09,420
So we can already see that that's that's a component.

57
00:04:09,520 --> 00:04:10,750
What about this first thing.

58
00:04:10,750 --> 00:04:11,760
What do we do with that.

59
00:04:11,770 --> 00:04:14,670
And that's all we have to find out here.

60
00:04:15,040 --> 00:04:20,980
I saw this YouTube video on somebody explaining how to do this and it was so complex I got scared at

61
00:04:20,980 --> 00:04:22,880
the start but it's actually not that hard.

62
00:04:23,080 --> 00:04:30,410
So here we've got 17 what we need to do is that's in hexadecimal now we need to convert that those first

63
00:04:30,410 --> 00:04:38,290
two teachers back to the desert is the answer because it's funny because we just got this number from

64
00:04:38,290 --> 00:04:40,740
the decimal system we can read to the hexadecimal.

65
00:04:40,750 --> 00:04:44,190
Now we need to convert this back into the decimal system.

66
00:04:44,200 --> 00:04:45,170
All right so you do that.

67
00:04:45,190 --> 00:04:45,730
How do you do that.

68
00:04:45,730 --> 00:04:48,690
Well there are seven states the as a seven right.

69
00:04:48,700 --> 00:04:49,470
Or.

70
00:04:49,660 --> 00:04:56,050
Well basically it's you know if it was like an A or A B or C or so you just need to convert to what.

71
00:04:56,070 --> 00:04:57,310
What that means.

72
00:04:57,330 --> 00:05:05,190
Like in like a like a would be like it 10 B would be 11 and so on.

73
00:05:05,500 --> 00:05:11,010
And and then and then here you gotta multiply whatever you see here by 16.

74
00:05:11,250 --> 00:05:11,530
Right.

75
00:05:11,530 --> 00:05:18,450
So again that's that's just the way this system works.

76
00:05:18,450 --> 00:05:26,790
You is a hexadecimal system so that's a conversion conversion rate if you will into back into the normal

77
00:05:26,790 --> 00:05:27,690
system.

78
00:05:27,690 --> 00:05:28,530
That's what we get.

79
00:05:28,620 --> 00:05:32,650
Sixteen times the number here plus just the number here itself.

80
00:05:32,740 --> 00:05:39,630
But don't forget to convert them into decimals if they're like letters and so you get 23 so 17 or you

81
00:05:39,630 --> 00:05:46,140
could just use another calculator 17 in the hexadecimal system is equal to 23 in the decimal system

82
00:05:46,680 --> 00:05:47,640
and that makes sense right.

83
00:05:47,640 --> 00:05:56,610
If you think about it like 10 in the hexadecimal is actually 16 in the decimal because that means this

84
00:05:56,610 --> 00:06:01,330
digit was like 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15.

85
00:06:01,440 --> 00:06:07,340
Then it went over to a 1 here which means it's got to 16 and then 0 1 2 0 0 7.

86
00:06:07,630 --> 00:06:13,370
And so that means 16 that's 16 plus the 7 23.

87
00:06:13,530 --> 00:06:19,020
And so then what that means is that will this number.

88
00:06:19,020 --> 00:06:19,790
This is a code.

89
00:06:19,800 --> 00:06:21,500
This is basically not just a number it's a code.

90
00:06:21,500 --> 00:06:32,100
The first two digits represent the length of the resulting in the resulting number that we want in and

91
00:06:32,100 --> 00:06:35,240
what is it in invites.

92
00:06:35,250 --> 00:06:42,780
So that means our final number here that we're after is actually 20.

93
00:06:43,120 --> 00:06:50,560
Or that means like that means our final number that we're going to be building is 23 bytes long.

94
00:06:50,610 --> 00:06:50,820
Right.

95
00:06:50,820 --> 00:06:57,250
So what we're going to do now is we're going to draw it 23 times to poor and to multiply by two.

96
00:06:57,360 --> 00:07:00,290
So 46 hex digits.

97
00:07:00,900 --> 00:07:04,500
Why are we drawing forty six so that's the length of our numbers.

98
00:07:04,500 --> 00:07:08,300
So 23 bytes is actually 46 stitches.

99
00:07:08,400 --> 00:07:19,110
Was that is because if we look at it like it and Hegge X hexadecimal digit takes up four takes of four

100
00:07:19,110 --> 00:07:25,460
bits always because you know it's two to the power or power for 60.

101
00:07:25,470 --> 00:07:32,100
So here you have two options times two times two times to two times two is four times two is eight times

102
00:07:32,100 --> 00:07:33,200
to 16.

103
00:07:33,210 --> 00:07:37,470
So a hexadecimal number takes up four bits.

104
00:07:37,590 --> 00:07:44,790
And then if you take 23 bytes there's actually 23 times by 8 bits because a byte is 8 bits and that

105
00:07:44,790 --> 00:07:47,090
means 23 times two times four bits.

106
00:07:47,160 --> 00:07:53,090
And that is twenty three times two times a hex digit So four bits is a heggs digit.

107
00:07:53,190 --> 00:07:56,970
So that means 23 times to 46 heggs dishes.

108
00:07:57,150 --> 00:08:05,690
I know this is crazy amount of like annoying bits and bytes calculations but that's what it is that's

109
00:08:05,710 --> 00:08:11,790
the justification while we're about multiplying by 2 to take this you convert from Hex to decimal multiply

110
00:08:11,790 --> 00:08:12,470
by 2.

111
00:08:12,540 --> 00:08:14,310
That's how long your number is going to be.

112
00:08:14,370 --> 00:08:17,110
And then this is the most significant component of the number.

113
00:08:17,250 --> 00:08:23,890
Meaning that this part needs to be put in there VAM put it in there that's it.

114
00:08:23,900 --> 00:08:26,840
And so that's the number you can see that's exactly our number.

115
00:08:27,060 --> 00:08:34,230
And what else we do is is going to add these leading zeros to make it to make it look like a 64 digit

116
00:08:34,230 --> 00:08:41,880
hex number to make it look like a proper sixty four to five six hash boom add missing zeros which they

117
00:08:41,880 --> 00:08:50,430
are 64 minus 46 of why 46 because we know that this is 46 long so 64 minus four to six 18 put the leading

118
00:08:50,430 --> 00:08:51,570
zeros in.

119
00:08:51,660 --> 00:08:53,870
Voila there we go that's our current target.

120
00:08:54,860 --> 00:09:03,530
So again not compulsory this knowledge or to but if ever you need to derive the target or if you want

121
00:09:03,530 --> 00:09:09,920
to do like some development work with blocks Shanes and develop applications and so on then you'll need

122
00:09:09,920 --> 00:09:13,890
to like dig in and find out how the target store.

123
00:09:13,910 --> 00:09:17,510
Like with Bitcoin you'll need to somehow get that number.

124
00:09:17,510 --> 00:09:22,340
This will hopefully save you some time because the explanations I found on line there was just only

125
00:09:22,490 --> 00:09:26,770
a few that got to the point quickly and yet.

126
00:09:26,810 --> 00:09:28,370
So hopefully this makes sense.

127
00:09:28,420 --> 00:09:35,810
And don't don't get don't get worried if this is like too much to handle these bits and bytes and so

128
00:09:35,810 --> 00:09:36,870
on.

129
00:09:37,040 --> 00:09:45,900
Just remember that the target is actually stored inside every single block but it's stored as this value

130
00:09:45,900 --> 00:09:51,320
of this field called bits and it's actually stored like that because it's a code.

131
00:09:51,320 --> 00:09:52,760
It saves space.

132
00:09:52,760 --> 00:09:59,660
So instead of storing this whole number like that where you know every digit is actually four bits.

133
00:09:59,660 --> 00:10:08,150
So as you can imagine that's you know that's quite a big number to store where as in you can just store

134
00:10:08,150 --> 00:10:08,750
it as a code.

135
00:10:08,750 --> 00:10:13,280
You can encode the length of the number of the first two digits and then you can call just the most

136
00:10:13,280 --> 00:10:15,580
significant digits like that.

137
00:10:15,620 --> 00:10:21,060
So the length of the number is encoded in bytes and everything else is derived from it.

138
00:10:21,320 --> 00:10:21,890
OK.

139
00:10:21,950 --> 00:10:22,750
So there we go.

140
00:10:22,760 --> 00:10:24,040
Hope you enjoyed this Tauriel.

141
00:10:24,050 --> 00:10:26,350
I look forward to seeing you back here on the next one.

142
00:10:26,350 --> 00:10:28,400
And until then inject Lachance.
