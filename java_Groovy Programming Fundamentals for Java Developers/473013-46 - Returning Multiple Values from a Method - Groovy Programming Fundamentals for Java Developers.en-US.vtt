WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.525
So in this video, we're going to have a look at another really cool feature of Groovy.

00:00:03.525 --> 00:00:07.785
And that's the ability to return back multiple values from a single method.

00:00:07.785 --> 00:00:12.750
Now, not liberal, wanna return values from a method or multiple values from a method.

00:00:12.750 --> 00:00:15.870
Rather, we end up in java having to create a class for them.

00:00:15.870 --> 00:00:19.335
In other words, a class which aggregates those values that we want to return back.

00:00:19.335 --> 00:00:21.435
And we create a quick class which does that,

00:00:21.435 --> 00:00:24.210
and then return an instance of that class back from the method.

00:00:24.210 --> 00:00:26.610
But Groovy allows you to do something much better.

00:00:26.610 --> 00:00:28.915
So let's just see this mechanism now.

00:00:28.915 --> 00:00:32.190
So let's first of all have a method which returns back,

00:00:32.190 --> 00:00:33.840
save the dimensions of the box.

00:00:33.840 --> 00:00:38.410
So, so it usually in Java for example,

00:00:39.040 --> 00:00:42.815
we might have a class on a box dimensions.

00:00:42.815 --> 00:00:46.340
And then there would have INT X,

00:00:46.340 --> 00:00:48.440
Y, and Z. For example.

00:00:48.440 --> 00:00:50.645
If we just check on this,

00:00:50.645 --> 00:00:53.210
don't worry about that because that's just because we don't have a main method,

00:00:53.210 --> 00:00:55.805
but that's fine because I'm just showing the AST.

00:00:55.805 --> 00:00:59.225
Here we can see we've got the three data members, x, y, and z.

00:00:59.225 --> 00:01:02.705
And each have the getters and setters which we've seen.

00:01:02.705 --> 00:01:05.480
So this would be enough to basically allow us to

00:01:05.480 --> 00:01:08.285
return back to inbox dimensions from a method.

00:01:08.285 --> 00:01:10.145
So let's create a method now.

00:01:10.145 --> 00:01:13.100
And we're doing this in the Java where first of all,

00:01:13.100 --> 00:01:17.165
just to show you how we can adapt it to a more groovy ish going away.

00:01:17.165 --> 00:01:21.665
So books dimensions, I should say, calculate.

00:01:21.665 --> 00:01:23.990
And we don't need to give a pretty descriptive name

00:01:23.990 --> 00:01:26.735
because it's not conceptually just a very contrived example.

00:01:26.735 --> 00:01:30.635
So here, if we want to do something,

00:01:30.635 --> 00:01:38.990
do some calculation and return the dimensions to do whatever calculation we wanna do.

00:01:38.990 --> 00:01:41.120
And then afterwards we'll return back,

00:01:41.120 --> 00:01:45.755
return new box dimensions.

00:01:45.755 --> 00:01:53.420
And we can use group is named constructor syntax to say x is ten,

00:01:53.420 --> 00:01:59.420
y is 12, and zed is 30, for example.

00:01:59.420 --> 00:02:01.550
And we can also omit the return statement off

00:02:01.550 --> 00:02:05.000
again because this is the last statement in that method.

00:02:05.000 --> 00:02:09.080
And now this just means we're gonna return this box damages. So that's good.

00:02:09.080 --> 00:02:12.725
Now let's quickly create a main method to test him.

00:02:12.725 --> 00:02:15.080
And this is going to be a static method because we're not going to have

00:02:15.080 --> 00:02:17.480
an instance of a class or just too that there as well.

00:02:17.480 --> 00:02:20.210
Of course, if you're doing things like this and you're doing calculations which

00:02:20.210 --> 00:02:23.000
involve those data members in the proper program.

00:02:23.000 --> 00:02:25.550
You might want to kinda take this method and push it

00:02:25.550 --> 00:02:28.340
into the box dimensions clastic a bit more of

00:02:28.340 --> 00:02:31.370
a behavioral kind of aspects of the class where you

00:02:31.370 --> 00:02:35.210
basically put the behavior in the simplest way to data's defined.

00:02:35.210 --> 00:02:37.730
But for this simple contrived example, we don't care about that.

00:02:37.730 --> 00:02:41.825
We just demonstrating this multiple values returning syntax and groovy.

00:02:41.825 --> 00:02:49.465
So if I create the usual method here,

00:02:49.465 --> 00:02:53.125
and then I should just be able to call Calculate.

00:02:53.125 --> 00:02:55.780
And then we'd see some books dimensions being returned.

00:02:55.780 --> 00:02:58.480
Simply run that here we can see books dimensions.

00:02:58.480 --> 00:03:00.220
Now to make it clearer,

00:03:00.220 --> 00:03:07.870
we could just put the two string annotation

00:03:07.870 --> 00:03:11.410
on here just so that we can actually see what the box dimensions are.

00:03:11.410 --> 00:03:15.460
Actually included names true.

00:03:15.460 --> 00:03:17.740
So we can see which data members for responsive.

00:03:17.740 --> 00:03:20.245
So you can see X ten, Y 12 and said 13.

00:03:20.245 --> 00:03:21.220
All good.

00:03:21.220 --> 00:03:27.535
Now, the reason we've created this is because we actually want to return back 101230.

00:03:27.535 --> 00:03:30.940
So presumably we've done that because we want

00:03:30.940 --> 00:03:35.110
to access those individual data members in this method itself.

00:03:35.110 --> 00:03:38.720
So here we can use strong typing here.

00:03:39.270 --> 00:03:41.815
Dimensions equals.

00:03:41.815 --> 00:03:43.915
So now we have a reference to dimensions.

00:03:43.915 --> 00:03:52.030
We could do dimensions dot x times dimensions dot y.

00:03:52.030 --> 00:03:55.570
And this would be the area for example.

00:03:55.570 --> 00:04:01.525
So if we run this, we can see here the area's a 120 because it's ten times 12.

00:04:01.525 --> 00:04:06.265
So that's maybe one calculation we want to do.

00:04:06.265 --> 00:04:11.150
Maybe we also have some of the calculations as well.

00:04:11.150 --> 00:04:15.300
Completion to three.

00:04:15.310 --> 00:04:18.080
Whatever we have some of the calculations.

00:04:18.080 --> 00:04:20.930
The main point is that in this method here,

00:04:20.930 --> 00:04:26.015
we wanted to call this method calculate and get back multiple values,

00:04:26.015 --> 00:04:28.205
which we could do something within this method.

00:04:28.205 --> 00:04:31.580
In other words, we want the x, we want the y, and we want the zed.

00:04:31.580 --> 00:04:34.355
And in order to do that in Java,

00:04:34.355 --> 00:04:37.865
we have to do something like this where we have to create a class which effectively

00:04:37.865 --> 00:04:42.155
allows us to package up those three values, which ones are passed back.

00:04:42.155 --> 00:04:44.615
And we have to go through all the ceremony of doing that

00:04:44.615 --> 00:04:47.675
just to be able to pass back these multiple values.

00:04:47.675 --> 00:04:50.450
But Ruby gives us a different syntax for that, which I'll get to now.

00:04:50.450 --> 00:04:54.590
But we can basically lose them. So we don't need that.

00:04:54.590 --> 00:04:56.330
So we have this box dimensions,

00:04:56.330 --> 00:04:59.900
which currently this method returns Swiss ever returning books I mentioned.

00:04:59.900 --> 00:05:01.910
Instead, we can just put def,

00:05:01.910 --> 00:05:04.565
which just basically means that it's going to return something.

00:05:04.565 --> 00:05:09.230
And then instead of creating this object here with its name constructor,

00:05:09.230 --> 00:05:12.995
which we did before, we can simply just return a list.

00:05:12.995 --> 00:05:18.600
So now we don't need to pass in more the data members are.

00:05:18.640 --> 00:05:21.005
So we just do it like this.

00:05:21.005 --> 00:05:25.385
So you just create a normal lists which we've seen before with the square bracket syntax.

00:05:25.385 --> 00:05:27.935
And now when we do this, we're saying that it doesn't return a list

00:05:27.935 --> 00:05:31.070
of 101230, a normal list.

00:05:31.070 --> 00:05:35.045
The method itself, we're just using weak typing.

00:05:35.045 --> 00:05:36.920
We can in fact use, say, it's list as well.

00:05:36.920 --> 00:05:39.110
We can say it's a list of integer quantity.

00:05:39.110 --> 00:05:41.540
And, but we don't have to do that and don't forget here,

00:05:41.540 --> 00:05:44.060
we're trying to get the simplest possible syntax

00:05:44.060 --> 00:05:46.295
just to communicate the essence of what we want to do.

00:05:46.295 --> 00:05:48.080
So groovy lets us do the minimum amount of

00:05:48.080 --> 00:05:51.140
code just to be able to achieve a task, and that's what we're doing here.

00:05:51.140 --> 00:05:54.485
So you were passing by this list, 101213, the elements.

00:05:54.485 --> 00:05:58.290
And then here, obviously we don't have books dimensions anymore.

00:05:58.360 --> 00:06:02.480
But instead we can do is write def.

00:06:02.480 --> 00:06:05.375
And then in parentheses,

00:06:05.375 --> 00:06:07.985
y x, y, zed.

00:06:07.985 --> 00:06:12.230
And so when we comes to the area x should be available to us.

00:06:12.230 --> 00:06:14.060
Why should be available to us if we run this?

00:06:14.060 --> 00:06:17.780
Now, we can see here we still have this a 120.

00:06:17.780 --> 00:06:20.540
So what's happened here, just to take a quick note about this,

00:06:20.540 --> 00:06:23.360
is the fact that we've managed to lose the class definition.

00:06:23.360 --> 00:06:25.370
We don't have to have a class now which packages up

00:06:25.370 --> 00:06:27.935
those values that we want to return, which is great.

00:06:27.935 --> 00:06:30.560
We're just relying on group is weak typing and

00:06:30.560 --> 00:06:33.185
the fact that we're passing back a list, which is also good.

00:06:33.185 --> 00:06:37.265
The only downside I would say is the fact that there's always a cost by the way,

00:06:37.265 --> 00:06:40.670
to having a syntax is like where is this massive over

00:06:40.670 --> 00:06:43.070
the actual semantics of the values that we're actually

00:06:43.070 --> 00:06:45.650
passing Dracula was the names of those values, those.

00:06:45.650 --> 00:06:47.240
And therefore outside of this method,

00:06:47.240 --> 00:06:49.340
there's nothing in this method which says that its x,

00:06:49.340 --> 00:06:50.510
y, and z will returning.

00:06:50.510 --> 00:06:54.200
And those then are pushed to the actual caller of the method itself here.

00:06:54.200 --> 00:06:56.630
So in calculate, we can see we've got deaf and

00:06:56.630 --> 00:06:59.465
the special syntax for multiple values, x, y, and z.

00:06:59.465 --> 00:07:01.205
So that's the only really downsides to it.

00:07:01.205 --> 00:07:04.610
But as you can see, groove and makes passing back multiple values for method,

00:07:04.610 --> 00:07:06.800
simple, quick, and effective.

00:07:06.800 --> 00:07:11.490
And I'm sure you gonna start using those in geography programs, sometimes in.
