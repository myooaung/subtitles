WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.530
So next up, how do we process

00:00:01.530 --> 00:00:04.140
maps as the next logical thing you're gonna want to look at.

00:00:04.140 --> 00:00:05.910
So let's just take this down.

00:00:05.910 --> 00:00:10.155
If we have a map. So our map syntax,

00:00:10.155 --> 00:00:12.240
remember is in square brackets,

00:00:12.240 --> 00:00:15.870
just like the list and sets are the difference being that each elements of

00:00:15.870 --> 00:00:20.610
the map is an engineer and the engineer might be key,

00:00:20.610 --> 00:00:23.145
followed by colon, followed by value.

00:00:23.145 --> 00:00:27.510
Let's just say here the value is a list of things that you do on a specific day.

00:00:27.510 --> 00:00:33.090
So on Monday, we call it courses.

00:00:33.090 --> 00:00:40.570
Do exercise, maybe name we've got friday.

00:00:41.850 --> 00:00:48.830
Relax, spends on with family,

00:00:49.470 --> 00:00:52.375
walk, dog, whatever it might be.

00:00:52.375 --> 00:00:57.220
So now we have and we have a rocket in that, we don't need that.

00:00:57.220 --> 00:00:58.990
And now we have a map.

00:00:58.990 --> 00:01:00.775
So that's actually why as well.

00:01:00.775 --> 00:01:04.450
So always good to split things out with whitespace because you can easily

00:01:04.450 --> 00:01:10.480
get confused with all the different square brackets instead ofs.

00:01:10.480 --> 00:01:13.660
If you put it like that, you can very clearly see that you got the right syntax.

00:01:13.660 --> 00:01:16.900
So just repeat that. Say we've got a map.

00:01:16.900 --> 00:01:21.370
There's a week and a list of tasks that you do on a day, a week, for example.

00:01:21.370 --> 00:01:24.745
So we can iterate over that map by using,

00:01:24.745 --> 00:01:28.420
again the each method m dot h and passing in a closure.

00:01:28.420 --> 00:01:33.040
But this time we use k and v column wherever you like,

00:01:33.040 --> 00:01:38.185
really could use key and value to access the key and the value of each entry.

00:01:38.185 --> 00:01:40.135
Here you can see for example,

00:01:40.135 --> 00:01:45.505
Turkey equals dollar v. So now if we run this,

00:01:45.505 --> 00:01:47.545
we can see here Monday,

00:01:47.545 --> 00:01:49.480
recall causes director Science Friday.

00:01:49.480 --> 00:01:51.685
We're like spend time with family, walked OK.

00:01:51.685 --> 00:01:55.570
So that's a way of being able to access individual entries in a map.

00:01:55.570 --> 00:01:59.215
Again, group is using the linked data structure behind the scenes.

00:01:59.215 --> 00:02:02.980
So notice that we get back the entries in the same order that we inserted them.

00:02:02.980 --> 00:02:07.245
And that's because an app by default in Groovy is backed by a linked HashMap,

00:02:07.245 --> 00:02:09.935
which means that when you add entries into the map,

00:02:09.935 --> 00:02:11.615
driven so elements into the map,

00:02:11.615 --> 00:02:16.460
it mentions links between those entries as being inserted the nose and can

00:02:16.460 --> 00:02:18.260
maintain the insertion order to give you

00:02:18.260 --> 00:02:21.650
a reliable and ordered iterator when you come to loop through later on.

00:02:21.650 --> 00:02:24.380
You can also use for in as well, by the way, for a map.

00:02:24.380 --> 00:02:32.810
So for example, if you just do for entry in m and then print

00:02:32.810 --> 00:02:38.390
line and shadow

00:02:38.390 --> 00:02:45.590
key value or value.

00:02:45.590 --> 00:02:49.550
So if we run now, you can see a key Monday,

00:02:49.550 --> 00:02:51.635
friday value, this value that.

00:02:51.635 --> 00:02:53.765
So there's also another way of doing it as well.

00:02:53.765 --> 00:02:56.600
Notice as well when we've done this for in loop,

00:02:56.600 --> 00:02:59.480
notice how concise and compact that is normally in Java,

00:02:59.480 --> 00:03:03.845
we'd have to access the interclass which represents an entry in a map.

00:03:03.845 --> 00:03:05.435
We'd have to use generics.

00:03:05.435 --> 00:03:06.755
It get quite clunky.

00:03:06.755 --> 00:03:08.960
But here you can see the incense very clear.

00:03:08.960 --> 00:03:11.585
And the actual code we have to use is very minimal.

00:03:11.585 --> 00:03:12.815
So again, that's groovy.

00:03:12.815 --> 00:03:13.895
Doing its best buyers,

00:03:13.895 --> 00:03:17.210
whereby the language is never getting in the way of what you actually want to do.

00:03:17.210 --> 00:03:19.430
Yeah, that's I can loop through lists, sets,

00:03:19.430 --> 00:03:24.210
and maps using the each collection of methods to access the individual elements.
