WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.280
In this video, we're going to get started with Groovy.

00:00:02.280 --> 00:00:04.290
We're gonna jump into the ID for this course.

00:00:04.290 --> 00:00:06.270
We'll be using intelligent idea and we're going

00:00:06.270 --> 00:00:08.355
to demonstrate how you can create a group project

00:00:08.355 --> 00:00:10.440
completely from scratch without even having to install

00:00:10.440 --> 00:00:13.305
groovy onto your system itself because it comes with idea,

00:00:13.305 --> 00:00:15.150
had to cut something quickly and then how to

00:00:15.150 --> 00:00:17.535
debug it so we can step through and see what's going on.

00:00:17.535 --> 00:00:18.555
So let's jump in.

00:00:18.555 --> 00:00:20.820
So I'm gonna go into idea.

00:00:20.820 --> 00:00:24.345
I'm using intelligent idea Community Edition, which is the F31.

00:00:24.345 --> 00:00:25.935
There's also the Ultimate Edition as well,

00:00:25.935 --> 00:00:27.525
which you might be using if you're

00:00:27.525 --> 00:00:29.655
working in a large organization who has a license for it.

00:00:29.655 --> 00:00:31.380
But intelligent idea community edition,

00:00:31.380 --> 00:00:33.855
you can just download for free from the JetBrains website.

00:00:33.855 --> 00:00:35.190
Actually, just before we begin,

00:00:35.190 --> 00:00:40.030
let's just show you where you can download IntelliJ idea from.

00:00:41.020 --> 00:00:43.640
I'll search for intelligent idea.

00:00:43.640 --> 00:00:46.940
You can see here we've got the JetBrains.com website idea.

00:00:46.940 --> 00:00:50.330
And if you just click on that, this

00:00:50.330 --> 00:00:53.585
takes you to the homepage of intelligence and you can just click on Download.

00:00:53.585 --> 00:00:55.550
And from here, you just go to the Download,

00:00:55.550 --> 00:00:57.770
the community edition and zippy on GIS system,

00:00:57.770 --> 00:01:00.350
and then just double-click the executable and then you get to go.

00:01:00.350 --> 00:01:02.630
And let's just close that. We don't need that anymore.

00:01:02.630 --> 00:01:04.970
And we'll start by creating a new project.

00:01:04.970 --> 00:01:06.620
So lets click Create New Project.

00:01:06.620 --> 00:01:08.450
And you can see here on the left-hand side,

00:01:08.450 --> 00:01:10.940
we have different types of projects that we can create an idea.

00:01:10.940 --> 00:01:13.625
And you'll notice that Groovy actually comes as a default.

00:01:13.625 --> 00:01:16.745
So we're going to choose Groovy and then just click next.

00:01:16.745 --> 00:01:18.635
And we'll just call it my app.

00:01:18.635 --> 00:01:20.760
I'll put it on the desktop.

00:01:21.310 --> 00:01:25.205
So here we have the default project that intelligence created for us.

00:01:25.205 --> 00:01:26.690
Double-click into here.

00:01:26.690 --> 00:01:30.395
And you can see we have a source folder and assaults folder is colored in blue,

00:01:30.395 --> 00:01:32.660
which means it's already made available to intelligent ideas.

00:01:32.660 --> 00:01:35.240
Build path at anything inside here is going to be compiled,

00:01:35.240 --> 00:01:38.795
and it's gonna be compiled by the Groovy compiler down into Java bytecode,

00:01:38.795 --> 00:01:40.310
which can then run on the JVM.

00:01:40.310 --> 00:01:42.725
So that's a key point about groovy as worth understanding,

00:01:42.725 --> 00:01:44.135
groovy is a JVM language,

00:01:44.135 --> 00:01:46.550
which means it runs on the Java Virtual Machine,

00:01:46.550 --> 00:01:49.955
or specifically the bytecode that's produced from the Groovy compiler,

00:01:49.955 --> 00:01:51.320
which takes Ruby source code,

00:01:51.320 --> 00:01:54.350
that's just regular byte code which can run on the Java virtual machine.

00:01:54.350 --> 00:01:56.120
So the set of instructions that it generates and

00:01:56.120 --> 00:01:58.640
the Groovy compiler generates that is completely compatible

00:01:58.640 --> 00:02:00.470
with the Java Virtual Machine and are equivalent to

00:02:00.470 --> 00:02:03.065
pica that would be generated if you're compiling a Java program.

00:02:03.065 --> 00:02:06.560
The difference being that the gravy compiler puts in some extra stuff in there.

00:02:06.560 --> 00:02:08.780
Some transformations effectively just ditch in

00:02:08.780 --> 00:02:11.945
some extra stuff to give Groovy the magic and power that he has, which we'll see.

00:02:11.945 --> 00:02:14.060
But yeah, Groovy and Java are completely

00:02:14.060 --> 00:02:17.645
interoperable in terms of actual compiled by code that gets run on the JVM.

00:02:17.645 --> 00:02:21.245
Now you probably expecting that you can just add a Groovy class eNO.

00:02:21.245 --> 00:02:24.365
So for example, if I right-click here on the source folder and the new,

00:02:24.365 --> 00:02:27.965
you'll notice I don't have any option to create grieving class only have Java class.

00:02:27.965 --> 00:02:31.235
And the reason for this is because we need to add framework support for groovy.

00:02:31.235 --> 00:02:32.105
So let's do this now.

00:02:32.105 --> 00:02:36.140
Let's right-click here on the project and then just go to add framework support.

00:02:36.140 --> 00:02:37.790
And then here you can see groovy save.

00:02:37.790 --> 00:02:39.725
You just click on groovy.

00:02:39.725 --> 00:02:41.735
And he says there's no Library selected.

00:02:41.735 --> 00:02:42.650
And that's true.

00:02:42.650 --> 00:02:44.990
We don't have a library here which we've set up.

00:02:44.990 --> 00:02:46.565
So we can create that.

00:02:46.565 --> 00:02:50.615
And we can just point that to agree with installation which we have on our local system.

00:02:50.615 --> 00:02:52.565
So if I do command shift g,

00:02:52.565 --> 00:02:57.440
then I can go to a folder called the SDK.

00:02:57.440 --> 00:03:00.590
And inside candidates, I have

00:03:00.590 --> 00:03:02.510
all the different Java frameworks that have installed on

00:03:02.510 --> 00:03:04.940
this particular system through this tool called SD Kammen.

00:03:04.940 --> 00:03:07.850
So if I just go into Groovy and here you can see I've got

00:03:07.850 --> 00:03:11.345
one installation here which is 2413, hand underneath here.

00:03:11.345 --> 00:03:13.610
This is a regular installation groovy with

00:03:13.610 --> 00:03:16.070
the bin folder where the binary executables live.

00:03:16.070 --> 00:03:18.530
Con folder for configuration docs, that kind of thing.

00:03:18.530 --> 00:03:21.140
So I just select that here, do open,

00:03:21.140 --> 00:03:23.870
and then do OK. And now at this point is

00:03:23.870 --> 00:03:26.900
recognized that it's a group project because we've added for EMOC support for that.

00:03:26.900 --> 00:03:28.190
So I can now go up to here,

00:03:28.190 --> 00:03:30.275
down into the source folder.

00:03:30.275 --> 00:03:33.335
And then you can see here for this new option now which is Groovy class.

00:03:33.335 --> 00:03:35.780
So let's just create Groovy class now just to make sure it setup.

00:03:35.780 --> 00:03:42.035
Okay, so just click there and I'll just do the ubiquitous helloworld.

00:03:42.035 --> 00:03:42.875
Ok.

00:03:42.875 --> 00:03:44.435
So this has created our group BY class here.

00:03:44.435 --> 00:03:46.265
If we click this button here,

00:03:46.265 --> 00:03:47.615
which is scroll from source,

00:03:47.615 --> 00:03:50.975
then what it'll do is it'll open this tree up here to show us exactly where it is.

00:03:50.975 --> 00:03:52.595
Just here you can see Hello World.

00:03:52.595 --> 00:03:55.685
And it's always nice to put a package for things.

00:03:55.685 --> 00:04:05.510
So we'll just create a quick package, Java easily demos.

00:04:05.510 --> 00:04:10.835
And then we'll just refactor that to push that helloworld class into that package.

00:04:10.835 --> 00:04:13.190
Always make sure that you have packages for your classes.

00:04:13.190 --> 00:04:14.990
Because sometimes you can run into trouble if you're using

00:04:14.990 --> 00:04:18.110
the default package because some frameworks don't like that.

00:04:18.110 --> 00:04:21.230
So here you can see we've got our helloworld class.

00:04:21.230 --> 00:04:23.000
So just pop over here.

00:04:23.000 --> 00:04:26.465
And we can deliver public static, void main method.

00:04:26.465 --> 00:04:29.640
And we'll just do a print line.

00:04:29.680 --> 00:04:31.490
Hello world.

00:04:31.490 --> 00:04:33.680
Now this is a valid groovy program as it is.

00:04:33.680 --> 00:04:35.420
A few things you can probably see from

00:04:35.420 --> 00:04:38.705
the outset the fact that we don't need to use system.out.print line.

00:04:38.705 --> 00:04:40.115
Instead, we can just use print line.

00:04:40.115 --> 00:04:41.870
You'll also notice as well that we don't have

00:04:41.870 --> 00:04:45.230
any parentheses around the call to print line when we're invoking print line.

00:04:45.230 --> 00:04:47.000
And that's because in Groovy, they're optional.

00:04:47.000 --> 00:04:49.805
And also you'll note we have single quotes as opposed to double-quotes.

00:04:49.805 --> 00:04:52.145
And that's how you can define a regular string in groovy.

00:04:52.145 --> 00:04:53.660
In fact, if you use double quotes,

00:04:53.660 --> 00:04:56.930
that's actually a special type of string which has a thing known as string interpolation,

00:04:56.930 --> 00:04:59.540
which means you can actually put variables inside the string and then

00:04:59.540 --> 00:05:02.885
those variables will resolve to print the actual values as we'll see later on.

00:05:02.885 --> 00:05:05.495
And finally, you will see that we don't have a semicolon,

00:05:05.495 --> 00:05:08.000
so semi-colons and groovy are optional and

00:05:08.000 --> 00:05:10.924
it's idiomatic Groovy to actually not include semicolons.

00:05:10.924 --> 00:05:13.565
So now if we just right-click here,

00:05:13.565 --> 00:05:18.150
we have this auctioneer run HelloWorld men, click that.

00:05:18.400 --> 00:05:21.425
And you can see here we've got HelloWorld printed out.

00:05:21.425 --> 00:05:26.300
Now if only to debug this same as you would usually debug is set a breakpoint there,

00:05:26.300 --> 00:05:31.100
and then right-click on main, debug HelloWorld, amen.

00:05:31.100 --> 00:05:34.865
And now you can see here we're actually in the debugger.

00:05:34.865 --> 00:05:37.910
And you'll see some funny kind of stuff here.

00:05:37.910 --> 00:05:40.010
Under static members of Hello World,

00:05:40.010 --> 00:05:42.020
you can ignore that for all intents and purposes.

00:05:42.020 --> 00:05:44.030
You don't need to know about that. But if you didn't have

00:05:44.030 --> 00:05:46.895
any extra variables set within the scope of this method,

00:05:46.895 --> 00:05:48.890
you'd see them here as usual as you'd expect.

00:05:48.890 --> 00:05:51.290
And that's how you create a project from scratch

00:05:51.290 --> 00:05:54.840
and setting up a debugging in intelligent idea.
