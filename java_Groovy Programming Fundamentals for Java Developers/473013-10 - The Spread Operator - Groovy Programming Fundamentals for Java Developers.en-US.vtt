WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.655
In this video, we're going to take a look at the spread operator.

00:00:02.655 --> 00:00:05.970
Now the spin operator is really quite cool because what enables you

00:00:05.970 --> 00:00:09.195
to do is something that I hadn't seen in other programming languages,

00:00:09.195 --> 00:00:11.700
at least another JVM based programming languages.

00:00:11.700 --> 00:00:14.535
And it's the ability basically to take a collection.

00:00:14.535 --> 00:00:17.430
And two explored the collection out into

00:00:17.430 --> 00:00:21.510
its consistent elements such that they become insurmountable in some ways,

00:00:21.510 --> 00:00:23.730
are possible in some way. So we'll see what this means.

00:00:23.730 --> 00:00:25.050
Let, let's kick off with an example.

00:00:25.050 --> 00:00:27.390
So if I have here,

00:00:27.390 --> 00:00:30.705
if l equals, so this is just a list,

00:00:30.705 --> 00:00:37.845
apples, oranges as loops.

00:00:37.845 --> 00:00:39.645
Yep, so I have a list now.

00:00:39.645 --> 00:00:42.440
So we can see here we have a list of apples, oranges, pears.

00:00:42.440 --> 00:00:44.545
And let's suppose I want to compose a list,

00:00:44.545 --> 00:00:46.015
let's call it a shopping list.

00:00:46.015 --> 00:00:48.220
And inside the shopping list,

00:00:48.220 --> 00:00:50.530
I'm going to have the items I'm going to buy from the supermarket.

00:00:50.530 --> 00:00:53.755
So maybe, for example, milk, cereal,

00:00:53.755 --> 00:00:55.120
and then actually maybe find,

00:00:55.120 --> 00:00:58.390
rename this to fruits.

00:00:58.390 --> 00:01:01.330
Then if I want to include all of these on and CSR,

00:01:01.330 --> 00:01:02.545
apples, oranges, and pears.

00:01:02.545 --> 00:01:05.005
In other words, all elements of the Fruits list.

00:01:05.005 --> 00:01:10.794
What I can do is use the spread operator to do Star fruits.

00:01:10.794 --> 00:01:13.435
And then if I clear and then run,

00:01:13.435 --> 00:01:15.505
you can see here we don't just have milk and cereal.

00:01:15.505 --> 00:01:18.280
We also have the elements of that list as well,

00:01:18.280 --> 00:01:19.555
apples, oranges, and pears.

00:01:19.555 --> 00:01:23.665
Because what's happened is it's basically taken this list and it's exploded each

00:01:23.665 --> 00:01:28.460
elements out and inserted day in place of the star fruits expression.

00:01:28.460 --> 00:01:30.860
And so it's a very nice operator to do those kind of things.

00:01:30.860 --> 00:01:32.285
But it doesn't just end there either.

00:01:32.285 --> 00:01:35.120
You can actually use this when calling method as well.

00:01:35.120 --> 00:01:38.030
So let's suppose we have just clear this window,

00:01:38.030 --> 00:01:40.460
I guess let's suppose we have a method,

00:01:40.460 --> 00:01:42.320
just say static void,

00:01:42.320 --> 00:01:49.250
which for the sake of argument takes same three strings. Capitalize.

00:01:49.250 --> 00:01:50.615
Three strings.

00:01:50.615 --> 00:01:53.045
Very contrived. It wouldn't normally have this of course.

00:01:53.045 --> 00:01:58.010
But it's just to show you the spin operator in action.

00:01:58.010 --> 00:02:02.330
So these individual arguments to this method, string a,

00:02:02.330 --> 00:02:10.950
string B and string c equals plus a.

00:02:18.190 --> 00:02:21.140
Like so. Then we could call

00:02:21.140 --> 00:02:29.210
this method by exploiting

00:02:29.210 --> 00:02:32.130
that Fruits list out using the spin operator.

00:02:32.130 --> 00:02:34.315
And effectively what this would do,

00:02:34.315 --> 00:02:41.780
it's the equivalent of fruits 0,

00:02:43.350 --> 00:02:48.400
Fruits one and fruits to.

00:02:48.400 --> 00:02:50.530
So if we run that,

00:02:50.530 --> 00:02:52.990
you can see here we have apples, oranges, and pears.

00:02:52.990 --> 00:02:55.480
Also if you had more elements as well.

00:02:55.480 --> 00:02:57.475
So that supposing we had say,

00:02:57.475 --> 00:03:00.250
bananas in here as well and rerun the,

00:03:00.250 --> 00:03:01.720
you'll notice that we can't do that.

00:03:01.720 --> 00:03:06.700
And we can't do that because if we tried to call capitalize three strings,

00:03:06.700 --> 00:03:08.605
which takes three arguments,

00:03:08.605 --> 00:03:09.745
but past four arguments,

00:03:09.745 --> 00:03:11.335
we will never be able to do that anyway.

00:03:11.335 --> 00:03:12.790
So that's an engineering mind.

00:03:12.790 --> 00:03:16.400
If we have less elements or just say we have two.

00:03:16.400 --> 00:03:18.335
So clear and then rerun,

00:03:18.335 --> 00:03:20.075
you can see that that's also not good either.

00:03:20.075 --> 00:03:22.190
So you have to take care to use the exact number of

00:03:22.190 --> 00:03:24.380
elements when we exploiting things like this.

00:03:24.380 --> 00:03:26.375
If this was a varargs R,

00:03:26.375 --> 00:03:31.380
So for example here, args.

00:03:32.020 --> 00:03:39.540
And then we could just do each on each element.

00:03:42.040 --> 00:03:47.780
It then you'll see that this will work like so.

00:03:47.780 --> 00:03:54.860
And similarly in the case when we put back the pears and oranges.

00:03:54.860 --> 00:03:56.810
Again, that works too.

00:03:56.810 --> 00:04:00.020
So I can get around that having to match the exact number of arguments

00:04:00.020 --> 00:04:04.250
up with results of the spin operator by taking advantage of varargs.

00:04:04.250 --> 00:04:06.350
The last thing I'll show you, which is also useful,

00:04:06.350 --> 00:04:09.110
is you can also use this indirect method invocation.

00:04:09.110 --> 00:04:11.540
Say for example, I have this Fruits list.

00:04:11.540 --> 00:04:16.070
I can also do star dot and then actually execute a method on each of these.

00:04:16.070 --> 00:04:19.414
So for example, I could execute two uppercase.

00:04:19.414 --> 00:04:21.920
And this means this method call would be

00:04:21.920 --> 00:04:25.475
executed against apples and then against oranges,

00:04:25.475 --> 00:04:28.550
that against pairs that against the oranges again,

00:04:28.550 --> 00:04:30.545
problem it up bananas, I guess.

00:04:30.545 --> 00:04:35.420
So. Fruits of 0 to uppercase fruits and one to uppercase,

00:04:35.420 --> 00:04:38.735
to lowercase and uppercase.

00:04:38.735 --> 00:04:40.655
So then if I run that,

00:04:40.655 --> 00:04:42.650
you'll see here we have

00:04:42.650 --> 00:04:46.070
a new collection which effectively has uppercase to each of the elements.

00:04:46.070 --> 00:04:49.055
So as you can see, the spread operator very effective.

00:04:49.055 --> 00:04:52.355
Again, very concise in common with pretty much everything Groovy.

00:04:52.355 --> 00:04:54.320
And I'm sure you'll find ways to be able to use that in

00:04:54.320 --> 00:04:58.260
your Groovy code to being much more concise and elegant programs.
