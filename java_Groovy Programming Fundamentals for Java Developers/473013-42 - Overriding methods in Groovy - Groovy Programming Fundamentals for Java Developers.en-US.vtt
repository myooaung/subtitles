WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.865
Finally, we can also do overriding two.

00:00:02.865 --> 00:00:04.545
So here you can see,

00:00:04.545 --> 00:00:06.090
just move this down a second.

00:00:06.090 --> 00:00:10.620
So you can see we've got this greet method in

00:00:10.620 --> 00:00:15.450
the superclass in person and in the employee silk class which extends Person.

00:00:15.450 --> 00:00:18.000
We don't have that method, but we could choose

00:00:18.000 --> 00:00:20.790
to just override that method

00:00:20.790 --> 00:00:24.490
with a different implementation here too, just like we can in Java.

00:00:27.040 --> 00:00:32.760
So we could do this solo, I'm Nim iron.

00:00:33.400 --> 00:00:36.140
And then the salary for example.

00:00:36.140 --> 00:00:39.215
And if we do that, then we should give a value for the salary.

00:00:39.215 --> 00:00:44.240
And we can evaluate, thereby providing a custom constructor for the subclass level.

00:00:44.240 --> 00:00:46.655
So here we just have in salary.

00:00:46.655 --> 00:00:48.665
So when we're constructing an employee,

00:00:48.665 --> 00:00:50.855
we give not just a name but also the salary

00:00:50.855 --> 00:00:53.825
within call the super constructor to set that Nim.

00:00:53.825 --> 00:01:00.030
And then finally, we can just set the salary to like so.

00:01:00.030 --> 00:01:05.285
So this means now we've got this extra constraints are which takes a name and a salary.

00:01:05.285 --> 00:01:06.710
And here we're just passing a name,

00:01:06.710 --> 00:01:09.150
so we pass in a salary as well.

00:01:11.350 --> 00:01:14.375
And now if we rerun,

00:01:14.375 --> 00:01:16.880
you can see that we've gone overwritten version here.

00:01:16.880 --> 00:01:19.310
So haloing map by and 25 thousand.

00:01:19.310 --> 00:01:22.055
And it still prints the reporting for that message as well.

00:01:22.055 --> 00:01:23.860
So this should feel very natural to you.

00:01:23.860 --> 00:01:26.420
You know, ultimately we've grew v. We can write

00:01:26.420 --> 00:01:29.390
pretty much standard Java with a few exceptions, but in general,

00:01:29.390 --> 00:01:32.705
you can write standard Java and then you can solve a transition to

00:01:32.705 --> 00:01:36.350
a more groovy ish or groovy idiomatic way if you'd like.

00:01:36.350 --> 00:01:38.270
As you get more comfortable with the language

00:01:38.270 --> 00:01:40.340
and take more advantage of its different features.

00:01:40.340 --> 00:01:44.690
But nonetheless, you can see that it's a very natural and easy to grasp syntax.

00:01:44.690 --> 00:01:46.535
And pretty much we've grouped. You can always do what,

00:01:46.535 --> 00:01:48.200
what it feels like you can do without

00:01:48.200 --> 00:01:51.030
the language ever getting in the way, which is nice.
