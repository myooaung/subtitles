WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.570
In this video, we're going to explore ranges which basically enable you to

00:00:03.570 --> 00:00:07.215
construct a list which has a range of elements across a set of values.

00:00:07.215 --> 00:00:09.660
So we'll see what this means by jumping in.

00:00:09.660 --> 00:00:11.970
So first off, let's see what arranges.

00:00:11.970 --> 00:00:15.465
There's a range operator which is basically two dots, one after the other.

00:00:15.465 --> 00:00:18.375
So if I want to make a range of the numbers one to five,

00:00:18.375 --> 00:00:20.520
I just do one No.5.

00:00:20.520 --> 00:00:23.070
And what this means, this or this is gonna give me

00:00:23.070 --> 00:00:26.640
a range which consists of the elements 12345.

00:00:26.640 --> 00:00:28.440
So if I execute this,

00:00:28.440 --> 00:00:31.125
you can see here we've got representation.

00:00:31.125 --> 00:00:32.895
But if we actually look at what the classes,

00:00:32.895 --> 00:00:35.130
which we can do by putting some parenthesis around that.

00:00:35.130 --> 00:00:39.930
And then doing get class will see that this is an int range.

00:00:39.930 --> 00:00:42.380
So groovy Lang inch range.

00:00:42.380 --> 00:00:45.970
So if we just jump into Chrome and quickly look at

00:00:45.970 --> 00:00:51.970
the GDK documentation for groovy dotted-line dot range.

00:00:51.970 --> 00:00:54.205
You can see it is here.

00:00:54.205 --> 00:00:59.620
We can see the arrange is nothing more really than an extension of a list.

00:00:59.620 --> 00:01:01.690
Such jumping back to here.

00:01:01.690 --> 00:01:03.430
But we actually get back here is int range,

00:01:03.430 --> 00:01:04.885
but it's actually a list as well.

00:01:04.885 --> 00:01:06.535
So this means, for example,

00:01:06.535 --> 00:01:08.140
we can do list type things with it.

00:01:08.140 --> 00:01:10.735
So he can, for example, get the second element.

00:01:10.735 --> 00:01:13.075
You can see we get the number two.

00:01:13.075 --> 00:01:15.010
Or we could call the natural method.

00:01:15.010 --> 00:01:16.630
We can get the last element.

00:01:16.630 --> 00:01:20.110
Here we see we get the number five and that kinda thing.

00:01:20.110 --> 00:01:22.360
So range is just basically a list.

00:01:22.360 --> 00:01:24.840
So going back to our range,

00:01:24.840 --> 00:01:27.530
once a five, now this is an inclusive range.

00:01:27.530 --> 00:01:30.065
And what this means is it's going to contain all the elements,

00:01:30.065 --> 00:01:32.495
including the number five, which is the N1.

00:01:32.495 --> 00:01:33.890
If we don't want to contain five,

00:01:33.890 --> 00:01:37.490
we can make an exclusive range just by putting this symbol here.

00:01:37.490 --> 00:01:40.385
So pulling a less than symbol before the five to exclude that.

00:01:40.385 --> 00:01:42.140
So for example, now,

00:01:42.140 --> 00:01:47.735
if we take that list and supposing we print each element,

00:01:47.735 --> 00:01:51.380
we'd only expect to get the numbers 1234 printed,

00:01:51.380 --> 00:01:53.510
which really we can see here 1234.

00:01:53.510 --> 00:01:57.035
So it hasn't included five because we've got an exclusive range here.

00:01:57.035 --> 00:01:57.905
That's why.

00:01:57.905 --> 00:02:00.140
Now another cool thing we can do with ranges,

00:02:00.140 --> 00:02:03.290
just clear this out is they actually work with enums as well.

00:02:03.290 --> 00:02:06.080
So if we have an enum enumeration,

00:02:06.080 --> 00:02:08.450
let's call it, for example, weekdays.

00:02:08.450 --> 00:02:12.335
And let's say this enum contains Monday,

00:02:12.335 --> 00:02:17.300
Tuesday, Wednesday, Thursday, and Friday.

00:02:17.300 --> 00:02:18.785
We'll just do these for now.

00:02:18.785 --> 00:02:24.140
So now I can actually create a range based on the enumerated members, a weekdays.

00:02:24.140 --> 00:02:26.870
So for example, I could do weekdays.

00:02:26.870 --> 00:02:34.865
Thought Tuesday to weekdays dot Thursday, for example.

00:02:34.865 --> 00:02:36.845
And don't forget that's a list.

00:02:36.845 --> 00:02:41.885
And so because there's also a list, print those out as well.

00:02:41.885 --> 00:02:44.795
Just like this, to print the members.

00:02:44.795 --> 00:02:48.065
And you can see we've just got Tuesday, Wednesday, and Thursday.

00:02:48.065 --> 00:02:50.900
And also because they'll have exclusive ranges as well.

00:02:50.900 --> 00:02:53.060
So this is just Tuesday and Wednesday.

00:02:53.060 --> 00:02:56.165
So it's nice that this works with enumerations two.

00:02:56.165 --> 00:03:00.120
And the last thing to point out is the actual type of this.

00:03:00.340 --> 00:03:05.900
If we go to here, he's not an int range.

00:03:05.900 --> 00:03:08.555
But this is actually an object range.

00:03:08.555 --> 00:03:11.180
But again, jumping back out.

00:03:11.180 --> 00:03:16.625
And if we just substitute here in the URL to get object range,

00:03:16.625 --> 00:03:18.200
we can see it's doing the same thing.

00:03:18.200 --> 00:03:19.760
It's extending a list.

00:03:19.760 --> 00:03:22.790
And in doing so, it's giving us all of the operations you'd

00:03:22.790 --> 00:03:26.480
expect to find on a list and of collection and OB iterable.

00:03:26.480 --> 00:03:28.910
And also these extra methods here,

00:03:28.910 --> 00:03:30.575
which to be honest, you won't really use,

00:03:30.575 --> 00:03:32.030
but it's useful to know about them.

00:03:32.030 --> 00:03:35.750
But what is interesting is we have these other classes which also implement range.

00:03:35.750 --> 00:03:38.030
So we don't just have int range and object range,

00:03:38.030 --> 00:03:41.480
like we've seen for ranges of integers and ranges of enums.

00:03:41.480 --> 00:03:43.385
We also have number range and empty range.

00:03:43.385 --> 00:03:45.005
So we've got a number range.

00:03:45.005 --> 00:03:47.930
This is basically used for when we're defining big decimals.

00:03:47.930 --> 00:03:49.550
C, recall that we have,

00:03:49.550 --> 00:03:51.215
if we just clear this down,

00:03:51.215 --> 00:03:57.020
whenever we have a number like 1.2x three in actual fact,

00:03:57.020 --> 00:03:58.250
which is a decimal number.

00:03:58.250 --> 00:03:59.780
In actual fact, the class of this,

00:03:59.780 --> 00:04:01.550
which is representing it in groovy,

00:04:01.550 --> 00:04:04.715
is a big decimal from the package Java dot math.

00:04:04.715 --> 00:04:09.410
And so the number range enables you to work with ranges which are big decimals to.

00:04:09.410 --> 00:04:14.765
So for example, here we could do 1 naught dot, dot 5 naught.

00:04:14.765 --> 00:04:17.105
That gives us a range.

00:04:17.105 --> 00:04:20.550
But if we look at the actual type of this range now,

00:04:21.280 --> 00:04:24.125
so that's how you can work with ranges.

00:04:24.125 --> 00:04:27.720
Using the range type, which is actually a list in groovy.
