WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.050 --> 00:00:04.095
In this video, we're just going to quickly talk about default imports,

00:00:04.095 --> 00:00:05.790
which has a facility of Groovy is.

00:00:05.790 --> 00:00:09.390
So if I go into Google Chrome and if I just go into Groovy

00:00:09.390 --> 00:00:16.350
lang.org and click the documentation tab and just click over here.

00:00:16.350 --> 00:00:18.300
And this difference is with Java section.

00:00:18.300 --> 00:00:21.375
And you can see here we've got the section default imports.

00:00:21.375 --> 00:00:22.920
So this is quite simple.

00:00:22.920 --> 00:00:24.240
Whereas normally with Java,

00:00:24.240 --> 00:00:29.800
you're required to explicitly import any classes that you want to use in your Java code,

00:00:29.800 --> 00:00:32.015
with the exception of java.lang classes.

00:00:32.015 --> 00:00:34.400
So for example, I don't have to import java.lang dot

00:00:34.400 --> 00:00:37.415
string or java.lang.Object for example.

00:00:37.415 --> 00:00:40.400
And that's because Java makes sure that java.lang is

00:00:40.400 --> 00:00:43.700
a default impulse which is already there for you group it goes up it further.

00:00:43.700 --> 00:00:45.935
I also includes these extra ones as well.

00:00:45.935 --> 00:00:47.840
So you can see here we've got java.io,

00:00:47.840 --> 00:00:50.315
which is the input output API from Java.

00:00:50.315 --> 00:00:52.745
We've also got to very important classes here,

00:00:52.745 --> 00:00:55.715
java dot MAFFT of BigDecimal in Java at Moscow big integer.

00:00:55.715 --> 00:00:57.245
In fact, behind the scenes,

00:00:57.245 --> 00:01:01.115
all numbers are actually represented as either BigDecimal or big integer,

00:01:01.115 --> 00:01:02.900
which means the Groovy isn't subject to

00:01:02.900 --> 00:01:05.360
the rounding issues or rounding errors you might have seen,

00:01:05.360 --> 00:01:07.655
which you can get in Java when it's down to you,

00:01:07.655 --> 00:01:10.775
the developer, to decide exactly which type you can use.

00:01:10.775 --> 00:01:12.320
Actually, just to show that quickly,

00:01:12.320 --> 00:01:14.239
if we jump outs, agree, Wii console,

00:01:14.239 --> 00:01:15.995
and if we create a decimal,

00:01:15.995 --> 00:01:18.665
and then just evaluate that we've Command Enter.

00:01:18.665 --> 00:01:21.575
You'll see it says 1.23.

00:01:21.575 --> 00:01:26.569
But if we make an assignment such as a number equals 123,

00:01:26.569 --> 00:01:29.210
and then if we actually prints out

00:01:29.210 --> 00:01:33.980
the actual class of what's in that variable command W2 clear command.

00:01:33.980 --> 00:01:37.295
Again, we see that it's a Java dot maps dot big decimal.

00:01:37.295 --> 00:01:38.345
So this is what I mean.

00:01:38.345 --> 00:01:43.280
Decimal types in Groovy are always represented under the hood as big decimals.

00:01:43.280 --> 00:01:45.170
So you never get any of those rounding errors for

00:01:45.170 --> 00:01:47.855
overflow errors you can have like you can in Java.

00:01:47.855 --> 00:01:57.930
However, if we take a number which is an integer and then prints out the class,

00:01:58.570 --> 00:02:02.640
we won't automatically get a big integer.

00:02:02.860 --> 00:02:05.360
We just get a regular integer.

00:02:05.360 --> 00:02:09.425
And that's because in most circumstances we're not dealing with absolutely huge numbers.

00:02:09.425 --> 00:02:11.435
And so therefore grew BY takes the opinion.

00:02:11.435 --> 00:02:14.210
There's no point in arbitrarily making everything a big

00:02:14.210 --> 00:02:18.550
integer because there's no real value for 95% of the time.

00:02:18.550 --> 00:02:20.320
In the case of the BigDecimal dot,

00:02:20.320 --> 00:02:22.720
that's different now because you can get rounding errors and you

00:02:22.720 --> 00:02:25.360
can get up flyers and things when strange things happening.

00:02:25.360 --> 00:02:28.720
So it makes sense that in that case, for the decimals,

00:02:28.720 --> 00:02:30.940
floating-point precision numbers, that kind of thing,

00:02:30.940 --> 00:02:34.105
that they do go to pick decimal, make sense in that case.

00:02:34.105 --> 00:02:35.830
This means, of course, if you want, you want to make

00:02:35.830 --> 00:02:37.915
a big integer instead of a normal integer,

00:02:37.915 --> 00:02:39.985
you can do that and really makes it very easy.

00:02:39.985 --> 00:02:42.130
You just basically add Either a lowercase or

00:02:42.130 --> 00:02:45.700
a capital G afterwards. So you can do once you 3G.

00:02:45.700 --> 00:02:48.740
And now if we run them,

00:02:49.500 --> 00:02:52.660
you see We gotta Java mouth big integer,

00:02:52.660 --> 00:02:54.115
such as the quick aside there.

00:02:54.115 --> 00:02:56.625
Let's go back to this default imposer.

00:02:56.625 --> 00:02:58.835
Java.net dot star.

00:02:58.835 --> 00:03:00.650
That's the Java networking API,

00:03:00.650 --> 00:03:02.840
is doing great things like URLs, for example,

00:03:02.840 --> 00:03:04.640
without having to import them first,

00:03:04.640 --> 00:03:07.745
java.util, which is where the Collections API lives.

00:03:07.745 --> 00:03:10.250
So we can also create sets, lists,

00:03:10.250 --> 00:03:13.760
maps, trees, all those good things without having to import them as well.

00:03:13.760 --> 00:03:15.890
And then at the end you can see we've got two extra ones.

00:03:15.890 --> 00:03:19.295
We have groovy dot lang, dot star and agree with dot util dot star.

00:03:19.295 --> 00:03:21.860
And these basically provide more advanced features

00:03:21.860 --> 00:03:24.605
allowing you to hook in more to the gravy runtime itself.

00:03:24.605 --> 00:03:27.230
So default imports are useful thing to have.

00:03:27.230 --> 00:03:31.980
And it means that you've got a range of standard and enhanced classes, very fingertips.
