WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.680
We saw in the last video how we could use

00:00:01.680 --> 00:00:04.605
Ruby console to run snippets of code and we create a class.

00:00:04.605 --> 00:00:06.945
And then we looked at what the actual resulting class

00:00:06.945 --> 00:00:09.450
was transformed to at the end of its transformations.

00:00:09.450 --> 00:00:11.310
Which will show you something very quickly,

00:00:11.310 --> 00:00:13.920
which is also very useful when you're developing Ruby classes.

00:00:13.920 --> 00:00:17.550
And these are some built-in transformations that you can use on your own classes.

00:00:17.550 --> 00:00:22.835
So let's just get rid of them and jump back to the Person class that which we had before.

00:00:22.835 --> 00:00:25.775
Now usually when you define a project like this,

00:00:25.775 --> 00:00:29.630
you define the private data members are private String name for example,

00:00:29.630 --> 00:00:32.194
the public accessors and mutators.

00:00:32.194 --> 00:00:33.980
So the get and set methods, in other words,

00:00:33.980 --> 00:00:37.145
which enable you to access and to change the state of departure.

00:00:37.145 --> 00:00:38.555
But typically as well,

00:00:38.555 --> 00:00:40.925
you also certainly as a best practice you should be doing.

00:00:40.925 --> 00:00:44.375
It should be adding equals hashCode and toString methods.

00:00:44.375 --> 00:00:45.875
So whenever I define a POJO,

00:00:45.875 --> 00:00:47.810
One of the first things I do is I create

00:00:47.810 --> 00:00:51.800
an equals acqui-hire hashCode and I create a toString method because it just makes

00:00:51.800 --> 00:00:54.830
the project much nicer to work with because the toString means you can

00:00:54.830 --> 00:00:58.085
just pass it to a system out print line in your Java programs,

00:00:58.085 --> 00:01:01.475
and then you can see the exact set of values that the Polio has.

00:01:01.475 --> 00:01:04.235
State which is very useful as opposed to having to print out

00:01:04.235 --> 00:01:06.935
each individual field which gets tedious after a while.

00:01:06.935 --> 00:01:11.030
Even they can also generate those kind of code snippets in ID is nowadays

00:01:11.030 --> 00:01:13.370
it's just much nitrogen has policies out print

00:01:13.370 --> 00:01:16.025
line passing the instance whose state you want to have logged.

00:01:16.025 --> 00:01:18.830
So as the toString method, the equals method,

00:01:18.830 --> 00:01:20.690
you're pretty much going to need it if ever you're gonna do

00:01:20.690 --> 00:01:23.750
comparisons to compare if two objects are equal or not.

00:01:23.750 --> 00:01:26.450
Otherwise, you'd never be able to decide if two instances recall.

00:01:26.450 --> 00:01:28.565
So you pretty much always put an equals method on there.

00:01:28.565 --> 00:01:30.185
And also you'll have hashCode as well.

00:01:30.185 --> 00:01:33.170
Because in addition to just wanting to see what the state of an object is and to

00:01:33.170 --> 00:01:36.275
compare two arbitrary instances together to see if they're equal.

00:01:36.275 --> 00:01:40.655
In addition to that, you've also probably going to put them into hash-based collections.

00:01:40.655 --> 00:01:43.190
In other words, if you use HashSets are hashmap,

00:01:43.190 --> 00:01:44.810
which are two of the three most common

00:01:44.810 --> 00:01:46.565
collection data structures that you're going to use.

00:01:46.565 --> 00:01:48.545
If have you gonna put them in these hash-based collections.

00:01:48.545 --> 00:01:50.795
And therefore, you need to implement hashCode as well.

00:01:50.795 --> 00:01:52.670
And also, we're told in books such as

00:01:52.670 --> 00:01:54.980
Effective Java for example, and the Java doc itself.

00:01:54.980 --> 00:01:58.955
In fact, that whenever you override equals or without right hashCode as well,

00:01:58.955 --> 00:02:01.040
otherwise, strange things can start to happen when you put

00:02:01.040 --> 00:02:03.740
your pages into hash-based collection classes.

00:02:03.740 --> 00:02:06.200
So that's the need for these three methods.

00:02:06.200 --> 00:02:08.450
Punish against the habit of you write a procedure and

00:02:08.450 --> 00:02:11.075
then you immediately write an equals hashCode and a two-string.

00:02:11.075 --> 00:02:13.475
However, in Java that's kind of tedious.

00:02:13.475 --> 00:02:14.900
You can also generate them, of course,

00:02:14.900 --> 00:02:17.660
in IDEs, but it's still tedious because then if you add fields,

00:02:17.660 --> 00:02:19.130
if you change field names and everything,

00:02:19.130 --> 00:02:22.835
you don't have to update the equals and hash code and toString methods as well.

00:02:22.835 --> 00:02:24.350
And it would be good, in fact,

00:02:24.350 --> 00:02:26.090
if you could use annotations to do that.

00:02:26.090 --> 00:02:27.425
And you actually can in Java,

00:02:27.425 --> 00:02:30.200
you can use frameworks such as Lomborg for example, to do that for you.

00:02:30.200 --> 00:02:31.820
But as a third party library which you've got to

00:02:31.820 --> 00:02:33.575
include in your project and that kind of thing.

00:02:33.575 --> 00:02:36.860
With Groovy, there exists transformations that you can use which hook into

00:02:36.860 --> 00:02:38.690
that grid transformation process around

00:02:38.690 --> 00:02:41.075
the abstract syntax trees that you mentioned in the last video.

00:02:41.075 --> 00:02:42.560
And it will do all of that for you.

00:02:42.560 --> 00:02:45.170
And it's so easy to use and want to show you right here,

00:02:45.170 --> 00:02:46.805
right now in one of the first videos.

00:02:46.805 --> 00:02:48.275
Just because it's gonna make your life much

00:02:48.275 --> 00:02:49.955
easier when you're writing your Ruby programs.

00:02:49.955 --> 00:02:51.635
Because you'd be able to see exactly what's going on

00:02:51.635 --> 00:02:53.615
by having the toString method is generated for you.

00:02:53.615 --> 00:02:56.840
And also, you're less likely to have weird things happen by

00:02:56.840 --> 00:03:00.335
failing to implement equals and hash code or keeping those methods up-to-date.

00:03:00.335 --> 00:03:02.525
So it start with the easiest one, the toString.

00:03:02.525 --> 00:03:04.310
I want to put a toString on here.

00:03:04.310 --> 00:03:09.710
All I have to do is to add toString and it's as simple as that.

00:03:09.710 --> 00:03:12.935
And then Groovy will automatically create a toString method for you.

00:03:12.935 --> 00:03:14.570
Now we do have to import it.

00:03:14.570 --> 00:03:17.420
So we could either choose to important here,

00:03:17.420 --> 00:03:23.960
groovy, transform, toString for example.

00:03:23.960 --> 00:03:28.055
So if I now Command W to clear that command entity, run it.

00:03:28.055 --> 00:03:31.100
We can see now that we've got a two-string version.

00:03:31.100 --> 00:03:33.350
So whereas before we saw just the alias name of

00:03:33.350 --> 00:03:36.305
the class and the hash of where it was assigned on the heap.

00:03:36.305 --> 00:03:37.460
So that was the at symbol and

00:03:37.460 --> 00:03:40.280
then that hex number here it's printing out the actual feels he can see,

00:03:40.280 --> 00:03:43.115
you can see it's printing the actual state of the instance that we've created,

00:03:43.115 --> 00:03:44.960
which in this case doesn't happen to have any state

00:03:44.960 --> 00:03:47.060
because we've just called the default constructor.

00:03:47.060 --> 00:03:48.965
We haven't assigned anything to name or age,

00:03:48.965 --> 00:03:51.485
but you get the idea, at least it's printing out toString.

00:03:51.485 --> 00:03:53.870
Of course ID would generate that for you

00:03:53.870 --> 00:03:56.195
so you wouldn't have to manually code the imports daimon.

00:03:56.195 --> 00:03:57.620
We're just saying that here because we used in

00:03:57.620 --> 00:04:00.170
the Groovy console and it doesn't have those kind of features.

00:04:00.170 --> 00:04:02.480
But if you were doing this in an IDE such as intelligence,

00:04:02.480 --> 00:04:04.235
you just type app toString,

00:04:04.235 --> 00:04:06.785
hit enter, and it will automatically put the import inferior.

00:04:06.785 --> 00:04:08.525
You don't necessarily have to have an import By the way,

00:04:08.525 --> 00:04:13.790
you could just delete them and just use the fully qualified form there as well.

00:04:13.790 --> 00:04:16.475
So we do Command W to clear that Command Enter again.

00:04:16.475 --> 00:04:19.085
We get the same effect and you get the idea.

00:04:19.085 --> 00:04:27.710
Now if I go back to the import formula and if I import equals and hashCode,

00:04:27.710 --> 00:04:31.460
it means I can also put just copy from here.

00:04:31.460 --> 00:04:37.895
It's probably easier. It means I can also put an equals and hash code on here as well.

00:04:37.895 --> 00:04:41.735
So again, Command W, Command Enter to make sure it still works.

00:04:41.735 --> 00:04:42.770
It does still work.

00:04:42.770 --> 00:04:44.030
We haven't seen an effect of that though,

00:04:44.030 --> 00:04:47.735
because we haven't done anything which will cause the equals and hash code to be invoked.

00:04:47.735 --> 00:04:51.755
However, if we look inside the script section, again, inspect AST.

00:04:51.755 --> 00:04:54.930
You can use Command T as well for sure if you want to.

00:04:55.420 --> 00:04:58.415
And then if we look at the generated class now,

00:04:58.415 --> 00:05:05.220
you'll see that it's also generated the toString method,

00:05:05.230 --> 00:05:10.715
the.hashCode method, and also the equals method as well.

00:05:10.715 --> 00:05:14.585
So all that boilerplate code that you used to have to do when you are coding in Java.

00:05:14.585 --> 00:05:18.005
Now, all that's taken care of for you behind the scenes by groovy,

00:05:18.005 --> 00:05:20.300
thanks to these groovy transformations.

00:05:20.300 --> 00:05:24.005
So I just wanted to show you that upfront so they can get the benefit as you go through

00:05:24.005 --> 00:05:28.620
and start playing around with progressively more advanced code during agree, we journey.
