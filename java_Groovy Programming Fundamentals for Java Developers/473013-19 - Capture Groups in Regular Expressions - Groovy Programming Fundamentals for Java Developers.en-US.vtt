WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.305
Close this. Now another thing I want to mention is the notion of capture groups,

00:00:04.305 --> 00:00:05.520
which I think is very useful.

00:00:05.520 --> 00:00:07.545
And I find myself using these quite frequently.

00:00:07.545 --> 00:00:09.285
So let's just explore these now as well.

00:00:09.285 --> 00:00:14.680
Let's supposing we have a string which says,

00:00:14.780 --> 00:00:21.555
Friday is my favorite day.

00:00:21.555 --> 00:00:24.180
Now when we look at this string,

00:00:24.180 --> 00:00:27.360
we see that the first word is

00:00:27.360 --> 00:00:31.080
the day of the week and the rest is this string is my favorite day.

00:00:31.080 --> 00:00:36.660
So if we wanted to pull out just the first word and stored in a variable,

00:00:36.660 --> 00:00:38.370
for example, day or week or whatever.

00:00:38.370 --> 00:00:40.260
We can also do that quite simply.

00:00:40.260 --> 00:00:42.355
And we can do that using Capture groups.

00:00:42.355 --> 00:00:44.555
So we can take that string.

00:00:44.555 --> 00:00:47.930
We can use the find operator that we've seen before.

00:00:47.930 --> 00:00:53.405
And inside here, we can use parenthesis dot star.

00:00:53.405 --> 00:00:58.370
And then just put the rest of the string in there so we could do this for example.

00:00:58.370 --> 00:01:01.070
So we just make sure we have parentheses around

00:01:01.070 --> 00:01:03.875
the first word and the rest of the string here.

00:01:03.875 --> 00:01:08.330
And if we get all of that in parentheses,

00:01:08.330 --> 00:01:10.625
then this means this returns the matcher.

00:01:10.625 --> 00:01:12.080
And then from the matcher,

00:01:12.080 --> 00:01:13.970
we can access capture groups,

00:01:13.970 --> 00:01:17.285
which involves a multidimensional array.

00:01:17.285 --> 00:01:22.850
But if I execute this to get the first element of that capture,

00:01:22.850 --> 00:01:26.360
you'll see we have two elements here in this list.

00:01:26.360 --> 00:01:29.435
We have Friday is my favorite day, which is the whole string.

00:01:29.435 --> 00:01:31.550
And then we have just Friday.

00:01:31.550 --> 00:01:34.535
So this is basically the first capture group.

00:01:34.535 --> 00:01:37.610
So therefore I want to get the second element of that.

00:01:37.610 --> 00:01:44.465
And if I now refresh in so you can see we get the day of the week.

00:01:44.465 --> 00:01:52.050
So we can store this in a variable day of week

00:01:54.010 --> 00:01:57.275
and then just print them out.

00:01:57.275 --> 00:01:59.165
Like so.

00:01:59.165 --> 00:02:01.610
They are weak, it's Friday. So this means that of course,

00:02:01.610 --> 00:02:04.700
if we change this to Monday,

00:02:04.700 --> 00:02:07.715
then we get day a week equals Monday.

00:02:07.715 --> 00:02:10.430
We could also capture this as well.

00:02:10.430 --> 00:02:13.670
So for example, again,

00:02:13.670 --> 00:02:16.950
if we create another country group here, dot star.

00:02:17.020 --> 00:02:19.655
And now to capture both of these,

00:02:19.655 --> 00:02:21.155
we can't do this in one line anymore.

00:02:21.155 --> 00:02:31.499
So we want to do is want to take this out to just make our captures.

00:02:32.260 --> 00:02:37.580
And then we can do captures a one which is day a week.

00:02:37.580 --> 00:02:38.690
So if we execute that,

00:02:38.690 --> 00:02:41.280
we can see we've been stuck on Monday.

00:02:42.040 --> 00:02:50.340
And then if one whose data is we can use to,

00:02:51.280 --> 00:02:58.940
then we can say in

00:02:58.940 --> 00:03:05.645
this day and then run that.

00:03:05.645 --> 00:03:07.505
And we can see day week is Monday,

00:03:07.505 --> 00:03:11.980
whose days my so when we want to change

00:03:11.980 --> 00:03:19.435
this to say Mondays, Matt's favorite day.

00:03:19.435 --> 00:03:21.580
Now you'll notice now we've got this different coloring here.

00:03:21.580 --> 00:03:24.430
And the reason is because it thinks with ended this string here,

00:03:24.430 --> 00:03:26.065
because we've used another single quote.

00:03:26.065 --> 00:03:30.220
So when get around that by just using slashes instead.

00:03:30.220 --> 00:03:34.795
So basically in Ruby you can delimit strings however you like to use forward slashes.

00:03:34.795 --> 00:03:37.150
You could use dollar as well,

00:03:37.150 --> 00:03:38.935
which is also possible.

00:03:38.935 --> 00:03:42.010
And you'd use this if you wanted to use dollar in the expressions,

00:03:42.010 --> 00:03:44.860
you didn't have to escape them with backslashes and that kind of thing.

00:03:44.860 --> 00:03:47.350
But we're gonna go about two forward slashes.

00:03:47.350 --> 00:03:49.825
Monday is Matt's favorite day.

00:03:49.825 --> 00:03:59.890
And then maybe we change this to say dollar.

00:03:59.890 --> 00:04:06.200
Whose day? That's gonna say mats with the I was gonna say mass.

00:04:06.390 --> 00:04:14.170
Less day of the week is day of week.

00:04:14.170 --> 00:04:15.775
And now if we run this,

00:04:15.775 --> 00:04:18.460
we'll see we didn't include the E.

00:04:18.460 --> 00:04:19.585
Run this.

00:04:19.585 --> 00:04:23.065
And we can see it matches best day of the week is Monday.

00:04:23.065 --> 00:04:27.770
And this will now work for the strings as well.

00:04:29.130 --> 00:04:36.315
So Sunday is Dave's favorite day.

00:04:36.315 --> 00:04:38.525
There's best able to week is sunday.

00:04:38.525 --> 00:04:41.075
So that's just a quick example of how you can use

00:04:41.075 --> 00:04:43.010
capture groups in your group and

00:04:43.010 --> 00:04:46.070
regular expressions to be able to pull out different bits of data.

00:04:46.070 --> 00:04:49.025
Again, combine this kind of thing.

00:04:49.025 --> 00:04:53.030
Combine that with the regular expression syntax you've seen in the Java doc,

00:04:53.030 --> 00:04:54.725
which we showed a moment ago.

00:04:54.725 --> 00:04:57.590
And you'll be able to come up with some pretty sophisticated ways

00:04:57.590 --> 00:04:59.270
of being able to slice and dice

00:04:59.270 --> 00:05:01.640
strings to pull out exactly what you need or

00:05:01.640 --> 00:05:04.880
analyze them in whichever way you want to have them analyzed in your code.

00:05:04.880 --> 00:05:06.860
So yeah, groovy regular expressions,

00:05:06.860 --> 00:05:08.785
very easy to work with and grew.

00:05:08.785 --> 00:05:11.030
It gives you first-class support for doing redox

00:05:11.030 --> 00:05:14.940
is based on the pattern find and match operators.
