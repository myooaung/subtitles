WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.620
In this video, we're going to take out

00:00:01.620 --> 00:00:04.290
an interesting feature of Ruby called operator overloading.

00:00:04.290 --> 00:00:08.085
Now this is basically where you use operators in an expression.

00:00:08.085 --> 00:00:10.890
But what actually happens behind the scenes is that those operators

00:00:10.890 --> 00:00:14.340
corresponds to actual methods being invoked in your Groovy code.

00:00:14.340 --> 00:00:16.200
So example, make this clear.

00:00:16.200 --> 00:00:20.070
If we take a quick look and you will crumb,

00:00:20.070 --> 00:00:24.750
and we just look for groovy operator overloading.

00:00:24.750 --> 00:00:27.895
And we'll look in the operator section here.

00:00:27.895 --> 00:00:29.855
We scroll down right to the bottom,

00:00:29.855 --> 00:00:31.520
you'll see this section operator overloading.

00:00:31.520 --> 00:00:34.040
So you just click that. Then if you go down here,

00:00:34.040 --> 00:00:36.410
you see it was a chart or a table rather.

00:00:36.410 --> 00:00:38.735
Now what this is is basically describing the,

00:00:38.735 --> 00:00:42.530
if you use a plus operator in an expression that can be overloaded,

00:00:42.530 --> 00:00:45.050
boy, you defining a plus method.

00:00:45.050 --> 00:00:50.405
Similarly, a minus operator can be avoided by using our defining minus method.

00:00:50.405 --> 00:00:51.830
So let's take an example,

00:00:51.830 --> 00:00:53.675
the plus a for example,

00:00:53.675 --> 00:00:57.080
let's do a bit of operator overloading for this. So plus a.

00:00:57.080 --> 00:01:00.720
So let's supposing we have a string,

00:01:01.660 --> 00:01:05.585
which is just a greeting string, S equals hello.

00:01:05.585 --> 00:01:08.690
And let's do plus S, zippity plus vest.

00:01:08.690 --> 00:01:11.720
Now, obviously, we get a missing method exception.

00:01:11.720 --> 00:01:15.350
And you can see here that it's actually trying to invoke this method positive,

00:01:15.350 --> 00:01:17.795
which corresponds to that chart that we saw earlier.

00:01:17.795 --> 00:01:21.650
And it's trying to evoke positive on the java.lang dot string class.

00:01:21.650 --> 00:01:25.070
Now with Groovy, you can actually dynamically put methods onto

00:01:25.070 --> 00:01:27.020
existing classes without you having to

00:01:27.020 --> 00:01:29.555
redefine the class or do anything strange like that.

00:01:29.555 --> 00:01:32.180
So you can actually overload positive on the string class itself,

00:01:32.180 --> 00:01:33.380
but that might get a bit confusing.

00:01:33.380 --> 00:01:36.590
So instead of doing that will just basically make a wrapper class,

00:01:36.590 --> 00:01:39.030
which is called greeting.

00:01:43.900 --> 00:01:48.890
And this will have the actual message.

00:01:48.890 --> 00:01:50.480
And so instead of doing this,

00:01:50.480 --> 00:01:57.110
we'll just basically say greeting G equals new tweeting.

00:01:57.110 --> 00:01:59.270
And to save of integral constructor,

00:01:59.270 --> 00:02:04.175
we'll just do message like this using the named constructed facility.

00:02:04.175 --> 00:02:08.660
And if we do plus G, you'll see it's still trying to do this operator overloading.

00:02:08.660 --> 00:02:10.445
Silicones invoked this positive method,

00:02:10.445 --> 00:02:12.725
but this time it's invoking against the greeting class.

00:02:12.725 --> 00:02:14.495
So if we just add this method in,

00:02:14.495 --> 00:02:22.070
and what it's gonna do is gonna return the same cyclical return greeting. Just like this.

00:02:22.070 --> 00:02:28.129
And what we're gonna do is we're gonna return a new greeting.

00:02:28.129 --> 00:02:34.530
Oops. Where the message is equal to the existing message.

00:02:35.590 --> 00:02:37.820
But we're going to uppercase it.

00:02:37.820 --> 00:02:39.665
And so now when we execute,

00:02:39.665 --> 00:02:42.080
we can see that we do get back a greeting.

00:02:42.080 --> 00:02:44.945
So it has invoked this positive method here.

00:02:44.945 --> 00:02:47.480
So in other words, this expression now is evaluating correctly.

00:02:47.480 --> 00:02:53.210
And if we put a quick review transform toString on that,

00:02:53.210 --> 00:02:57.155
we'll see that indeed it's converted it to uppercase.

00:02:57.155 --> 00:03:01.400
So that's just a quick example of how you can use operator overloading in Groovy,

00:03:01.400 --> 00:03:02.885
or more common case though, would be to,

00:03:02.885 --> 00:03:05.285
for example, overload the plus operator.

00:03:05.285 --> 00:03:06.890
So you can imagine, for example,

00:03:06.890 --> 00:03:08.120
having some kind of

00:03:08.120 --> 00:03:11.615
ingredient class and maybe you can add different ingredients together.

00:03:11.615 --> 00:03:13.280
So you could have ingredient class for cheese and

00:03:13.280 --> 00:03:16.295
ingredient class for eggs and reading class, but onions.

00:03:16.295 --> 00:03:18.800
And then you can add cheese plus x plus onions.

00:03:18.800 --> 00:03:20.720
And that will get you back a compound class which

00:03:20.720 --> 00:03:22.835
incorporates all those elements, something like that.

00:03:22.835 --> 00:03:25.310
So the main point is with this facility is it gives you

00:03:25.310 --> 00:03:29.375
a very nice way of being able to cut down on boilerplate code,

00:03:29.375 --> 00:03:31.730
couldn't on those method invocations which you normally have.

00:03:31.730 --> 00:03:33.590
And instead may code much more concise and

00:03:33.590 --> 00:03:36.770
succinct by using operators to reference those methods.

00:03:36.770 --> 00:03:39.860
Instead of having to have like a big chain of methods for a chunk of code,

00:03:39.860 --> 00:03:41.705
like tons of those methods being invoked,

00:03:41.705 --> 00:03:46.110
jump operator overloading in Groovy or useful facility to have.
