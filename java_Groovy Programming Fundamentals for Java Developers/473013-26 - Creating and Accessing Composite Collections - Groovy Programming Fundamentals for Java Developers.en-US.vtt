WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.280
Looking at maps, let's build up a map again.

00:00:26.960 --> 00:00:30.135
Let's say we have a map like this.

00:00:30.135 --> 00:00:34.170
And by the way, sometimes if you have maps like this one I like to do is actually make it

00:00:34.170 --> 00:00:37.440
a bit more explicit. Structures laid out.

00:00:37.440 --> 00:00:42.280
So for example, here, we could do something like this.

00:00:42.280 --> 00:00:45.545
So we can very clearly see now with just a bit of extra white-space,

00:00:45.545 --> 00:00:46.925
the structure of what we're dealing with,

00:00:46.925 --> 00:00:49.235
we can clearly see here we've got a map.

00:00:49.235 --> 00:00:53.015
We have two entries. One which is keyed by boys,

00:00:53.015 --> 00:00:56.240
which contains a list Heroin Bill when which is keyed by goals,

00:00:56.240 --> 00:00:58.595
which contains a list Wendy and severe.

00:00:58.595 --> 00:01:00.500
We still get the map back.

00:01:00.500 --> 00:01:02.330
So it's winds weekly that whitespace,

00:01:02.330 --> 00:01:04.100
but it just makes a little bit more readable, I think.

00:01:04.100 --> 00:01:07.715
So we can reference and pullback elements. We could use.

00:01:07.715 --> 00:01:09.830
This notation is passing in the key,

00:01:09.830 --> 00:01:11.870
so access the entry in the map based on the key.

00:01:11.870 --> 00:01:20.270
So M goals here returns a list Wendy and severe envoys returns by carrying Bill.

00:01:20.270 --> 00:01:21.680
And not only that as well,

00:01:21.680 --> 00:01:25.250
you can also then still use this syntax on result that comes back.

00:01:25.250 --> 00:01:27.830
So for example, m starts off as a map,

00:01:27.830 --> 00:01:29.780
as we've seen, em,

00:01:29.780 --> 00:01:32.735
boys, like this, returns back a list.

00:01:32.735 --> 00:01:35.630
And then if we wanted to get the second element of the list and Bill,

00:01:35.630 --> 00:01:38.090
we can then just add this syntax here.

00:01:38.090 --> 00:01:40.565
And now we can see we get by that one element,

00:01:40.565 --> 00:01:42.005
which in this case now as a string.

00:01:42.005 --> 00:01:48.455
Similarly, we can do and goals and get the first element and pull back Wendy.

00:01:48.455 --> 00:01:51.800
So as you can see, agreeably gives us a really nice mechanism and syntax,

00:01:51.800 --> 00:01:53.494
but being able to deal with collections,

00:01:53.494 --> 00:01:55.070
and once you get used to working in this way,

00:01:55.070 --> 00:01:57.365
you won't want to go back to the way Java does things.

00:01:57.365 --> 00:02:02.040
So groovy again wins for its nice concise, elegant syntax.
