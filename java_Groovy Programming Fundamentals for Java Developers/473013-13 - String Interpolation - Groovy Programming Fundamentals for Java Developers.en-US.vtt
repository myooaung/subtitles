WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.890
In this video, we're going to continue looking at

00:00:01.890 --> 00:00:04.980
Ruby syntax and look at how Groovy handles strings.

00:00:04.980 --> 00:00:06.840
So let's kick off with some examples.

00:00:06.840 --> 00:00:08.850
So there are essentially two forms of stringing.

00:00:08.850 --> 00:00:12.225
Groovy knows a regular strings and interpolated strings.

00:00:12.225 --> 00:00:14.445
So regular strings are just string literals like this.

00:00:14.445 --> 00:00:16.750
So for example, if I say,

00:00:16.910 --> 00:00:19.125
how are you, For example,

00:00:19.125 --> 00:00:21.710
this is a perfectly legal expression to command and

00:00:21.710 --> 00:00:24.470
enter and evaluates to the string, how're you?

00:00:24.470 --> 00:00:29.330
It might make you feel more comfortable if I actually assign that to a variable.

00:00:29.330 --> 00:00:32.660
So now, let's do the same thing.

00:00:32.660 --> 00:00:36.965
How are you going on now is actually assigned to this variable s.

00:00:36.965 --> 00:00:42.080
Now if we look at the type of this string by calling getClass on the result,

00:00:42.080 --> 00:00:46.595
we'll see that it's just a regular java.lang dot string which is returned.

00:00:46.595 --> 00:00:48.470
So that's for the case of a string literal.

00:00:48.470 --> 00:00:50.870
And it's true as well if you concatenate strings,

00:00:50.870 --> 00:00:53.210
which you can also do this by adding a plus.

00:00:53.210 --> 00:00:55.310
By this, for example.

00:00:55.310 --> 00:00:57.530
Then you'll see we still get back a string.

00:00:57.530 --> 00:01:00.785
Now there's another form of string which is interpolated strings.

00:01:00.785 --> 00:01:03.095
And that's basically just get rid of this.

00:01:03.095 --> 00:01:05.585
Instead of using single quotes,

00:01:05.585 --> 00:01:07.760
we can use double-quotes.

00:01:07.760 --> 00:01:10.430
And whenever you see double-quotes in Groovy,

00:01:10.430 --> 00:01:12.995
it means the living string interpolation.

00:01:12.995 --> 00:01:16.999
Almost specifically, it means that you have the capability of doing string interpolation.

00:01:16.999 --> 00:01:19.309
That basically just means resolving placeholders

00:01:19.309 --> 00:01:21.950
within the string with the actual values that represent.

00:01:21.950 --> 00:01:22.985
So you don't have to do that.

00:01:22.985 --> 00:01:24.440
This is still a valid string,

00:01:24.440 --> 00:01:25.550
which is the string literal.

00:01:25.550 --> 00:01:27.350
Say if I re-execute that,

00:01:27.350 --> 00:01:29.810
you can see it's still just the java.lang dot string.

00:01:29.810 --> 00:01:36.620
But the difference with Java strings is that if I have another variable here for example.

00:01:36.620 --> 00:01:39.320
So here we're just defining somebody's name.

00:01:39.320 --> 00:01:43.730
Then I can reference it like this with a dollar in front of it.

00:01:43.730 --> 00:01:44.810
So this expression here,

00:01:44.810 --> 00:01:46.925
we have dollar and then the variable name,

00:01:46.925 --> 00:01:50.645
this is going to be replaced dynamically in the string itself.

00:01:50.645 --> 00:01:52.745
So if we print the string,

00:01:52.745 --> 00:01:54.350
so we get the actual value of the string,

00:01:54.350 --> 00:01:58.010
and we also get the value of the class.

00:01:58.010 --> 00:02:00.890
And run this, we'll see two interesting things.

00:02:00.890 --> 00:02:05.615
When we see that the actual string has evaluated to the interpolated form.

00:02:05.615 --> 00:02:08.555
So we have the string, but also the variable, this variable here,

00:02:08.555 --> 00:02:11.060
dollar name has been resolved to mat,

00:02:11.060 --> 00:02:13.490
which is referred to in here, this variable name.

00:02:13.490 --> 00:02:15.170
And you can have as many placeholders as you

00:02:15.170 --> 00:02:17.120
like for this and you could even repeats it as well.

00:02:17.120 --> 00:02:18.665
So I could put dollar name, dollar name.

00:02:18.665 --> 00:02:20.375
I could also have another variable here.

00:02:20.375 --> 00:02:23.195
And at this in, so it's very flexible in that respect.

00:02:23.195 --> 00:02:25.115
You can also, if it makes things more clear,

00:02:25.115 --> 00:02:27.965
you can use curly braces around as well,

00:02:27.965 --> 00:02:29.870
make it more readable in some cases,

00:02:29.870 --> 00:02:31.940
again, if we re-execute this, it's fine.

00:02:31.940 --> 00:02:33.350
Evaluates the same thing,

00:02:33.350 --> 00:02:36.260
but usually people just put this form without the curly braces.

00:02:36.260 --> 00:02:39.440
But you'll also notice as well that we don't have a java.lang of string that's returned

00:02:39.440 --> 00:02:43.100
now instead we have a G string and that sends for groovy string.

00:02:43.100 --> 00:02:44.870
And it just basically means a string that has

00:02:44.870 --> 00:02:48.660
this extra capacity to do things like string interpolation.
