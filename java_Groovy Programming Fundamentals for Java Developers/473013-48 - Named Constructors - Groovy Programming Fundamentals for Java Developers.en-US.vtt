WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.475
So here we are in this video back in the console,

00:00:02.475 --> 00:00:05.025
we've got a very basic Poggio with a name and an age.

00:00:05.025 --> 00:00:08.085
And Ruby's generating the toString equals and hash code methods for us,

00:00:08.085 --> 00:00:10.440
which we've seen would just don't now very briefly

00:00:10.440 --> 00:00:13.680
about a facility in Ruby called, named constructed.

00:00:13.680 --> 00:00:15.750
So here you can see in the main method,

00:00:15.750 --> 00:00:18.630
I'm just creating an instance of this person class

00:00:18.630 --> 00:00:21.960
and I'm not passing any parameters to the constructor.

00:00:21.960 --> 00:00:23.835
So it's calling the default constructor.

00:00:23.835 --> 00:00:26.355
And Ruby still gives us a default constructor by the way.

00:00:26.355 --> 00:00:29.955
So effectively, the compiler still

00:00:29.955 --> 00:00:33.665
puts code like this inference and it's exactly the same mechanism as in Java.

00:00:33.665 --> 00:00:35.630
As long as you don't supply constructor,

00:00:35.630 --> 00:00:37.605
the compiler will always put a default constructor.

00:00:37.605 --> 00:00:38.690
And default, by the way,

00:00:38.690 --> 00:00:40.175
just means that it's in the default form.

00:00:40.175 --> 00:00:43.505
In other words, it doesn't have any arguments in its constructor call.

00:00:43.505 --> 00:00:46.025
Of course, the minute you actually create your own constructor.

00:00:46.025 --> 00:00:49.730
So for example here, string name, age,

00:00:49.730 --> 00:00:56.585
this.name equals name, this dot h equals h.

00:00:56.585 --> 00:00:58.685
The minute you do supply your own constructor,

00:00:58.685 --> 00:01:00.215
then again, income more Java,

00:01:00.215 --> 00:01:02.240
the compiler one per default constructions,

00:01:02.240 --> 00:01:04.340
which means this call now would fail because there's no

00:01:04.340 --> 00:01:07.280
longer a default constructor placed in by the compiler.

00:01:07.280 --> 00:01:11.285
So it's impossible now to create this person objects without also supplying arguments.

00:01:11.285 --> 00:01:13.565
So Command W to CLIA, Command Enter.

00:01:13.565 --> 00:01:18.170
You can see we get, yeah, the area here could not find matching of suites of a person.

00:01:18.170 --> 00:01:20.615
And it tells you couldn't find the default when here.

00:01:20.615 --> 00:01:22.625
So again, very similar to Java.

00:01:22.625 --> 00:01:27.980
Now what's different to Java is that if I delete this, so again,

00:01:27.980 --> 00:01:30.575
going back to the most minimal lightweight version,

00:01:30.575 --> 00:01:32.525
which is the very simple Poggio,

00:01:32.525 --> 00:01:36.170
then what I can actually do is I can use a facility called, named constructors.

00:01:36.170 --> 00:01:39.440
And what that is, it's where groovy gives you the ability to not just

00:01:39.440 --> 00:01:43.085
place the values of the arguments in to the constructor Cole.

00:01:43.085 --> 00:01:46.415
So for example, daisy,

00:01:46.415 --> 00:01:51.665
five days is my dog who's five years old, and she's not a person.

00:01:51.665 --> 00:01:52.910
That's fine for now.

00:01:52.910 --> 00:01:55.670
And so that's the Java way of doing things.

00:01:55.670 --> 00:01:58.895
But Groovy also enables you to name these values as well.

00:01:58.895 --> 00:02:00.320
So like we said before,

00:02:00.320 --> 00:02:03.830
this coal won't work because we don't have a constructs when here,

00:02:03.830 --> 00:02:06.515
which takes a string first and then afterwards,

00:02:06.515 --> 00:02:08.135
we'd have to write a constructor for them.

00:02:08.135 --> 00:02:10.175
However, if we didn't want to write a constructor,

00:02:10.175 --> 00:02:12.365
we can actually just name the values instead.

00:02:12.365 --> 00:02:16.955
So we could put here Nim and age.

00:02:16.955 --> 00:02:20.900
Now this call will succeed because what Ruby does behind the scenes is it

00:02:20.900 --> 00:02:24.710
basically takes the value of this and assigns it into the name field here.

00:02:24.710 --> 00:02:28.220
And it takes the value of this and assigns it to the H field here.

00:02:28.220 --> 00:02:31.250
So now if we commend W2 clear and Command Enter,

00:02:31.250 --> 00:02:34.400
we can see here we do have a person, daisy five.

00:02:34.400 --> 00:02:37.745
So that's the facility in Groovy known as named constructors.

00:02:37.745 --> 00:02:40.355
And that can be noise because if we're coding things are very quickly,

00:02:40.355 --> 00:02:42.695
we can just still creates an instance of the object,

00:02:42.695 --> 00:02:46.040
but without having to go through the hassle of having to buy a formal constructs for it.

00:02:46.040 --> 00:02:47.630
Now beware with this though, however,

00:02:47.630 --> 00:02:49.340
because it can be dangerous.

00:02:49.340 --> 00:02:51.545
And the reason being is that when I design classes

00:02:51.545 --> 00:02:54.260
alike to design them in such a way that you can only

00:02:54.260 --> 00:02:56.750
create an instance of the class by passing

00:02:56.750 --> 00:03:00.185
the full state that you want that instance to be credited with.

00:03:00.185 --> 00:03:01.400
Through the constructor.

00:03:01.400 --> 00:03:04.145
In other words, if you've got five fields on the class,

00:03:04.145 --> 00:03:05.960
you're going to have five fields in the constructor.

00:03:05.960 --> 00:03:08.915
For all of those fields which exist in the class would exist in the constructor,

00:03:08.915 --> 00:03:12.680
which means that you can only have a creates the object in a complete state.

00:03:12.680 --> 00:03:15.710
And that's a really good design principle to always adhere to,

00:03:15.710 --> 00:03:18.095
because it can get very tricky if you don't do that.

00:03:18.095 --> 00:03:20.810
And if you end up setting calling setter methods here,

00:03:20.810 --> 00:03:22.520
there and everywhere, maybe you've got a class,

00:03:22.520 --> 00:03:24.320
for example, which has six fields.

00:03:24.320 --> 00:03:27.020
And you call a constructor which initializes only three of those.

00:03:27.020 --> 00:03:29.690
And then you call maybe to setter methods for the other two.

00:03:29.690 --> 00:03:33.410
And then maybe the last one is null or its assigned with a field assignment or something,

00:03:33.410 --> 00:03:35.270
that kind of thing get really confusing.

00:03:35.270 --> 00:03:38.044
And you typically find that kind of code in immature codebases.

00:03:38.044 --> 00:03:39.605
But on mature codebases,

00:03:39.605 --> 00:03:42.410
well-engineered codebases which are written responsibly.

00:03:42.410 --> 00:03:45.230
Typically you'll find that you have cost of the constructor which fully

00:03:45.230 --> 00:03:48.950
establish the instances states across all of the data members that it's got.

00:03:48.950 --> 00:03:50.660
An even if you have, for example,

00:03:50.660 --> 00:03:54.515
an object which has some maybe like 20 or 25 different data members that it can have.

00:03:54.515 --> 00:03:56.525
You can still achieve that by using builders,

00:03:56.525 --> 00:03:59.840
because they can just call builders as an intermediate representation of the object

00:03:59.840 --> 00:04:03.350
up until the point when you pray to actually construct it was all a bit step there.

00:04:03.350 --> 00:04:05.270
And then in the duck-billed method,

00:04:05.270 --> 00:04:07.550
which invoke at the end of that construction.

00:04:07.550 --> 00:04:12.740
When again, the objects is fully constructed with all of its state that it needs is good

00:04:12.740 --> 00:04:15.230
from the point of view of immutability and from

00:04:15.230 --> 00:04:18.020
the point of view of thread safety and a lot of other reasons.

00:04:18.020 --> 00:04:20.165
And it's also easier to rationalize the bow as well.

00:04:20.165 --> 00:04:22.940
If you can only have a constructs an object in one state than

00:04:22.940 --> 00:04:25.940
your mind doesn't start going down these kind of what if scenarios.

00:04:25.940 --> 00:04:27.230
What if that's not Sam?

00:04:27.230 --> 00:04:29.270
What if these two fields onset or what if

00:04:29.270 --> 00:04:32.015
this field is set before this field and that kind of thing?

00:04:32.015 --> 00:04:35.630
Of course, the point I'm making here is that if you're using named constructors,

00:04:35.630 --> 00:04:37.025
you don't have that luxury.

00:04:37.025 --> 00:04:39.875
Or more specifically, you have to take care to be responsible.

00:04:39.875 --> 00:04:42.845
In other words, you have to realize that there are two fields here.

00:04:42.845 --> 00:04:47.585
And so we need to pass in the complete state set mama creating the object.

00:04:47.585 --> 00:04:50.030
If you stick to that, everything will be fine.

00:04:50.030 --> 00:04:52.820
This is actually one of the good things about groovy,

00:04:52.820 --> 00:04:54.980
but it's also one of the things that you have to watch.

00:04:54.980 --> 00:04:57.185
And that's the Groovy is a language,

00:04:57.185 --> 00:04:59.600
assumes that you're a responsible developer,

00:04:59.600 --> 00:05:01.715
assumes that you know what you're doing,

00:05:01.715 --> 00:05:03.695
but it won't force anything on to you.

00:05:03.695 --> 00:05:06.455
So for example, exceptions groovy in fact,

00:05:06.455 --> 00:05:09.380
doesn't force you to catch any checked exceptions.

00:05:09.380 --> 00:05:13.070
And the reason being is because behind the scenes and actually wraps checked exceptions

00:05:13.070 --> 00:05:17.180
and throws them as runtime exceptions so you don't have to put all of the try-catch.

00:05:17.180 --> 00:05:20.510
Can have syntax machinery around that specific coal.

00:05:20.510 --> 00:05:22.400
So this can kind of little humans were forced into

00:05:22.400 --> 00:05:24.800
security because you can be developing code.

00:05:24.800 --> 00:05:27.035
And if the compiler doesn't flag to you,

00:05:27.035 --> 00:05:29.135
or he might wanna catch this checked exception.

00:05:29.135 --> 00:05:30.965
You might think everything's okay.

00:05:30.965 --> 00:05:33.065
Groovy doesn't come from that angle,

00:05:33.065 --> 00:05:35.375
really comes from the angle that you should know what you're doing.

00:05:35.375 --> 00:05:38.945
You should appreciate the exceptions that can be thrown out of something.

00:05:38.945 --> 00:05:39.845
But pay.

00:05:39.845 --> 00:05:42.545
I won't stop you and put the compiler in your way.

00:05:42.545 --> 00:05:44.405
If you want to just make a quick method call

00:05:44.405 --> 00:05:46.790
without catching exceptions, that's all fine too.

00:05:46.790 --> 00:05:49.085
So just be aware of those kind of things in Groovy.

00:05:49.085 --> 00:05:50.750
And whenever you seek Ruby syntax,

00:05:50.750 --> 00:05:53.240
always think back to good design principles

00:05:53.240 --> 00:05:56.225
and make sure you still keeps a good design principles when you're using groovy.

00:05:56.225 --> 00:05:59.075
But as long as you have a good working knowledge of what's happening behind the scenes,

00:05:59.075 --> 00:06:00.425
which we cover in this course.

00:06:00.425 --> 00:06:02.840
And you go responsibly, then you'll find that everything will be good,

00:06:02.840 --> 00:06:04.340
group, it will be a pleasure to work with.

00:06:04.340 --> 00:06:07.400
And you can develop things about five times quicker than you can in Java.

00:06:07.400 --> 00:06:12.870
Anyway, that's named constructors and some general design advice about constructor calls.
