WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.690
In this video, we're going to look at the null safety reference operator in Groovy,

00:00:03.690 --> 00:00:05.910
which basically makes it very easy to

00:00:05.910 --> 00:00:08.790
de-reference properties in an object graph as we'll see,

00:00:08.790 --> 00:00:10.230
or even just have a single object.

00:00:10.230 --> 00:00:12.660
By that we mean access the value of that object

00:00:12.660 --> 00:00:15.345
without having to code all of the usual boilerplate stuff,

00:00:15.345 --> 00:00:19.740
which we have to do in java without having to do any of that overly ceremonies code.

00:00:19.740 --> 00:00:21.900
So an example that will help us out here.

00:00:21.900 --> 00:00:28.625
So let's first of all create a variable S and just give it a string. So here we are.

00:00:28.625 --> 00:00:31.310
S is a string which is equal to hello.

00:00:31.310 --> 00:00:36.065
And I can print out s dot to uppercase.

00:00:36.065 --> 00:00:40.445
And the obviously gives me the uppercase version of what's held in a string.

00:00:40.445 --> 00:00:42.950
But of course, if this happens to be null,

00:00:42.950 --> 00:00:47.000
and then I run it that I'm gonna get a NullPointerException and will no stranger to this,

00:00:47.000 --> 00:00:48.995
because this is exactly how Java works.

00:00:48.995 --> 00:00:53.060
If basically the reference to which S points to is null,

00:00:53.060 --> 00:00:56.165
then disco will fail with a NullPointerException.

00:00:56.165 --> 00:00:57.950
So we know about that already, however,

00:00:57.950 --> 00:01:00.905
then also F dereference operator, which looks like this.

00:01:00.905 --> 00:01:03.245
So instead of dot to access the property,

00:01:03.245 --> 00:01:06.395
you use this question mark dot to access the property.

00:01:06.395 --> 00:01:10.115
In using this, what actually happens is that we won't get a no pointer exception.

00:01:10.115 --> 00:01:11.915
Instead, as we'll see,

00:01:11.915 --> 00:01:13.340
we just get back null.

00:01:13.340 --> 00:01:15.140
So whereas before in Java,

00:01:15.140 --> 00:01:21.920
we probably end up doing something like if S is not null,

00:01:21.920 --> 00:01:23.720
then nu s dot toUpperCase.

00:01:23.720 --> 00:01:27.740
Otherwise return null, which is the shortest way we can express it in Java.

00:01:27.740 --> 00:01:32.450
Or worse still, you'd normally find if S naught equal to

00:01:32.450 --> 00:01:33.870
no,

00:01:41.050 --> 00:01:43.445
do this kind of thing.

00:01:43.445 --> 00:01:47.480
So having this guard to make sure that we can never access s When it's null.

00:01:47.480 --> 00:01:55.745
Instead of doing that, we can just nice to use this no safety reference operator instead.

00:01:55.745 --> 00:01:57.920
So you might think, okay, well that's fair enough.

00:01:57.920 --> 00:01:59.735
Saves me a little bit of typing,

00:01:59.735 --> 00:02:01.895
but actually saves you a lot more typing as we'll see.

00:02:01.895 --> 00:02:03.020
So imagine, for example,

00:02:03.020 --> 00:02:06.450
that we've got an actual class here.

00:02:07.390 --> 00:02:14.795
Let's see, we've got our department class rather.

00:02:14.795 --> 00:02:19.445
And before this we've got person.

00:02:19.445 --> 00:02:27.455
So person I just bought a nymph E1_l department department name.

00:02:27.455 --> 00:02:32.550
And let's say we've also got one of the class may be representing a person's job.

00:02:33.790 --> 00:02:41.270
Spring, roll man, int salary for example.

00:02:41.270 --> 00:02:44.645
And let's assume the person has a job as well.

00:02:44.645 --> 00:02:46.595
So now we've got three poles here.

00:02:46.595 --> 00:02:49.325
We've got a person who has a name and he has a job.

00:02:49.325 --> 00:02:50.900
And inside the job,

00:02:50.900 --> 00:02:53.255
we have the role_name and a salary.

00:02:53.255 --> 00:02:54.740
And we'll also be department.

00:02:54.740 --> 00:02:57.140
And the department of course,

00:02:57.140 --> 00:03:01.865
contains a set of people, the staff.

00:03:01.865 --> 00:03:04.355
And we'll just initialize these two.

00:03:04.355 --> 00:03:06.990
Say a new person

00:03:09.850 --> 00:03:17.610
named Matt takes a new job.

00:03:17.670 --> 00:03:24.174
Role_name, say developer, salary,

00:03:24.174 --> 00:03:27.120
let's say Mother, 32 for example,

00:03:27.120 --> 00:03:31.790
hundreds grant more than one person as a couple of people.

00:03:34.650 --> 00:03:37.670
Say manager.

00:03:38.910 --> 00:03:41.260
Baffin, For example.

00:03:41.260 --> 00:03:43.360
Let's say the department name.

00:03:43.360 --> 00:03:46.090
We'll just make it a constant for now.

00:03:46.090 --> 00:03:49.630
I don't know. Platform Engineering.

00:03:49.630 --> 00:03:55.660
Let's create a department then and just prints it out.

00:03:55.660 --> 00:03:59.655
And we also need to be using them constructor,

00:03:59.655 --> 00:04:05.990
also supply in there to say we can see we've got our department here.

00:04:05.990 --> 00:04:11.460
Let's just quickly make use of the Groovy transforms.

00:04:11.470 --> 00:04:14.480
Just a toString for now.

00:04:14.480 --> 00:04:17.045
Just so we can see what's going on.

00:04:17.045 --> 00:04:20.345
And look at the department now.

00:04:20.345 --> 00:04:22.850
And by the way, this is obviously very

00:04:22.850 --> 00:04:25.715
apparent as to how quick it is to rapidly prototype stuff.

00:04:25.715 --> 00:04:29.824
Now we can see exactly what we've got in it was the states of the department,

00:04:29.824 --> 00:04:32.960
the person objects within the department and the jobs that they have.

00:04:32.960 --> 00:04:34.700
And we got all this for free pretty much we'd like

00:04:34.700 --> 00:04:37.460
these groovy transform to strings, which is really nice.

00:04:37.460 --> 00:04:40.475
But anyway, we can see here that we've got a well-formed department.

00:04:40.475 --> 00:04:42.485
So now we've got this kind of like graph.

00:04:42.485 --> 00:04:45.470
So top-level with the department that references a set which

00:04:45.470 --> 00:04:48.710
has two items in that same both of those are instances,

00:04:48.710 --> 00:04:51.380
the person and each person has a job as well.

00:04:51.380 --> 00:04:53.360
So we have kind of like a graph of objects, if you will,

00:04:53.360 --> 00:04:55.535
with department at the top, the staff,

00:04:55.535 --> 00:04:58.340
and then each member in there having a name and a job as well,

00:04:58.340 --> 00:05:00.170
which also has some extra data as well.

00:05:00.170 --> 00:05:01.760
So we can print, for example,

00:05:01.760 --> 00:05:02.870
we're using double-quotes here,

00:05:02.870 --> 00:05:08.690
so we can use some string interpolation that can print manager salary for example.

00:05:08.690 --> 00:05:10.040
So a manager salary here.

00:05:10.040 --> 00:05:13.175
Now because we're going to put an expression to get this salary here,

00:05:13.175 --> 00:05:16.760
which is at a deep pi in the object graph because that's going to have a dot in it,

00:05:16.760 --> 00:05:21.950
a period, we need to enclose the variable placeholder in curly braces as well.

00:05:21.950 --> 00:05:25.460
So we could say she, first of all,

00:05:25.460 --> 00:05:29.820
if we assign this depth equals,

00:05:30.640 --> 00:05:35.375
we can say depth for the department dot.

00:05:35.375 --> 00:05:37.925
And then at this point we can access the staff.

00:05:37.925 --> 00:05:40.385
And let's say we get the second staff member,

00:05:40.385 --> 00:05:44.240
so staff one dot and then we want to get his job.

00:05:44.240 --> 00:05:47.360
So we go to Job. And then finally we want to get the salary.

00:05:47.360 --> 00:05:48.845
So dot salary.

00:05:48.845 --> 00:05:53.060
So if I enter that now you can see here we have 38 thousand.

00:05:53.060 --> 00:05:55.175
Now if we didn't give a salary,

00:05:55.175 --> 00:05:57.080
so we're using them, construct a sphere.

00:05:57.080 --> 00:06:00.650
So that means that when the obliged to give all of the state of that job instance.

00:06:00.650 --> 00:06:02.465
So supposing we don't have a salary,

00:06:02.465 --> 00:06:05.735
if we refresh and we run now,

00:06:05.735 --> 00:06:08.750
we can see we have a 0, which is the default.

00:06:08.750 --> 00:06:11.525
However, if we didn't even have a job.

00:06:11.525 --> 00:06:13.640
And this is the key part here.

00:06:13.640 --> 00:06:16.535
So now we don't even have a job who just have a person.

00:06:16.535 --> 00:06:18.290
And then we re-run.

00:06:18.290 --> 00:06:23.180
You'll notice that we get a NullPointerException because you can't get salary.

00:06:23.180 --> 00:06:28.220
We can't go, we can't access the salary field off of job because Job is null.

00:06:28.220 --> 00:06:29.600
That's because we didn't set you up here.

00:06:29.600 --> 00:06:31.280
So because we don't have this job,

00:06:31.280 --> 00:06:32.840
assigning a here on

00:06:32.840 --> 00:06:36.140
the second element is the second element because we don't have that here.

00:06:36.140 --> 00:06:38.870
It means that job ultimately is null.

00:06:38.870 --> 00:06:40.520
We get a NullPointerException.

00:06:40.520 --> 00:06:44.225
However, the null set dereference operator can come to the rescue.

00:06:44.225 --> 00:06:48.320
So we can avoid that by basically instead of dereferencing it by a dot,

00:06:48.320 --> 00:06:50.195
we can just use question mark doc.

00:06:50.195 --> 00:06:52.530
And now if we Riemann,

00:06:55.120 --> 00:06:59.330
we can get around this by using question mark dome.

00:06:59.330 --> 00:07:02.495
And now if we rerun,

00:07:02.495 --> 00:07:05.825
we can seen seven NullPointerException, we just get back null.

00:07:05.825 --> 00:07:08.030
And we could also do this any point.

00:07:08.030 --> 00:07:10.940
So a pattern you'll usually see when you're traversing

00:07:10.940 --> 00:07:14.885
a series of references in an object graph like this is you'll usually see,

00:07:14.885 --> 00:07:17.915
instead of having each level prefix for the dog,

00:07:17.915 --> 00:07:19.850
it'll be prefix and the question mark dot.

00:07:19.850 --> 00:07:21.260
And this is very safe.

00:07:21.260 --> 00:07:26.360
This basically means no matter which of these will Department the first staff member,

00:07:26.360 --> 00:07:29.570
second staff member either because it's 0 indexed, the job,

00:07:29.570 --> 00:07:31.640
regardless of which one of these might be null,

00:07:31.640 --> 00:07:33.815
you'll never get a NullPointerException.

00:07:33.815 --> 00:07:38.910
So we can run that game. We still get no simply put back in a job.

00:07:39.160 --> 00:07:44.460
Job here. That's a thousand.

00:07:44.650 --> 00:07:49.590
Maybe this time we don't have the role name, for example.

00:07:50.980 --> 00:07:57.500
Then we get 13 thousand back because we're getting the salary, so we expect that.

00:07:57.500 --> 00:08:00.050
But if we then try and get the roll them

00:08:00.050 --> 00:08:04.880
here and clear and re-run, we just get back null.

00:08:04.880 --> 00:08:07.430
We could even try and do an operation on role_name.

00:08:07.430 --> 00:08:12.020
So dots to uppercase again,

00:08:12.020 --> 00:08:15.005
clear and rerun, and yet we still get null.

00:08:15.005 --> 00:08:19.925
And it doesn't matter. Role_name is null in the second element case.

00:08:19.925 --> 00:08:21.665
So step one is Bevin.

00:08:21.665 --> 00:08:23.645
He has a job, that's fine.

00:08:23.645 --> 00:08:25.070
But there's only a salary here.

00:08:25.070 --> 00:08:27.905
There's no role_name here. So role_name is no.

00:08:27.905 --> 00:08:29.900
And we didn't get a NullPointerException because we are

00:08:29.900 --> 00:08:32.075
using this NOR safety reference operator.

00:08:32.075 --> 00:08:34.530
Of course, if we take these out,

00:08:37.900 --> 00:08:39.980
then we're going to find, we're going to get

00:08:39.980 --> 00:08:42.350
a null pointer exceptions all over the place.

00:08:42.350 --> 00:08:44.765
And the behavior then is back to as it was with Java.

00:08:44.765 --> 00:08:50.495
But putting them back in. You can see that we can write

00:08:50.495 --> 00:08:53.660
much more concise and safer code without having to resort

00:08:53.660 --> 00:08:56.870
to null checks before we try and access an element in the graph.

00:08:56.870 --> 00:09:00.920
Because normally in Java you'd say if department is not equal null and,

00:09:00.920 --> 00:09:04.055
and department dot staff is not equal to null.

00:09:04.055 --> 00:09:06.080
And Department of step one,

00:09:06.080 --> 00:09:08.840
top job is not equal to null and that kind of thing.

00:09:08.840 --> 00:09:11.480
And with this mechanism here, you don't have to do that.

00:09:11.480 --> 00:09:14.960
So that's the groovy no safety reference operator.

00:09:14.960 --> 00:09:16.700
Three of no pointer exceptions.

00:09:16.700 --> 00:09:18.245
Of course, there's a cost to this,

00:09:18.245 --> 00:09:19.565
and that's the same time.

00:09:19.565 --> 00:09:22.249
Of course there's the cost of this. Use it judiciously.

00:09:22.249 --> 00:09:25.070
Because if you have a very large graph

00:09:25.070 --> 00:09:27.425
of objects and suddenly you're getting a null value.

00:09:27.425 --> 00:09:29.030
It's not clear exactly at

00:09:29.030 --> 00:09:32.735
which point dereferencing is not clear which one caused the null value.

00:09:32.735 --> 00:09:34.310
So for example, going back to here,

00:09:34.310 --> 00:09:35.750
if we run this again,

00:09:35.750 --> 00:09:38.675
this overall expression here is when we're trying to get the department,

00:09:38.675 --> 00:09:40.100
the first staff member,

00:09:40.100 --> 00:09:41.825
the second staff member,

00:09:41.825 --> 00:09:45.530
the job than the roll and we get back null.

00:09:45.530 --> 00:09:50.165
It's not clear if we go back null because role_name just wasn't setting,

00:09:50.165 --> 00:09:51.335
which happens to be the case here.

00:09:51.335 --> 00:09:53.105
Role_name wasn't sets. That is the reason.

00:09:53.105 --> 00:09:55.430
But we don't know that's the reason just by looking at the output

00:09:55.430 --> 00:09:57.950
here because he may have been, the job wasn't set.

00:09:57.950 --> 00:10:00.365
So for example, if we didn't even have a job,

00:10:00.365 --> 00:10:02.150
and then we run, we get the same thing.

00:10:02.150 --> 00:10:03.185
We also get a null.

00:10:03.185 --> 00:10:05.910
So that's just something to bear in mind as well.
