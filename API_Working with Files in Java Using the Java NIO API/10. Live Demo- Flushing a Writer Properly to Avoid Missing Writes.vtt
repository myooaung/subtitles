WEBVTT
1
00:00:02.240 --> 00:00:06.510
Let us go one step further with this flushing and closing of our writers.

2
00:00:06.510 --> 00:00:11.810
Here I created a second BufferedWriter, writer2, by decorating writer1.

3
00:00:11.810 --> 00:00:15.580
And this is very common practice in the Java IO API.

4
00:00:15.580 --> 00:00:18.840
And I'm going to create another one, a PrintWriter,

5
00:00:18.840 --> 00:00:23.030
by decorating the second writer, just like this.

6
00:00:23.030 --> 00:00:26.070
This PrintWriter is a very handy writer.

7
00:00:26.070 --> 00:00:29.380
It has a printf method, a print format,

8
00:00:29.380 --> 00:00:32.400
following the same kind of pattern as the C language,

9
00:00:32.400 --> 00:00:35.040
the print format of the C language.

10
00:00:35.040 --> 00:00:39.590
I'm just going to write something like that and pass 12 as a second parameter.

11
00:00:39.590 --> 00:00:45.620
And if I run this code and check the content of this debug.log file,

12
00:00:45.620 --> 00:00:49.050
you can see that the first part has been properly returned.

13
00:00:49.050 --> 00:00:53.340
But the part written through this PrintWriter has not.

14
00:00:53.340 --> 00:00:58.090
And the reason is that the flush method of neither this writer2

15
00:00:58.090 --> 00:01:00.620
neither this PrintWriter has been called.

16
00:01:00.620 --> 00:01:03.740
See if I close this writer by hand,

17
00:01:03.740 --> 00:01:07.870
which is going to call this flush method and run that code again,

18
00:01:07.870 --> 00:01:14.700
now i = 12 is written on the file. Let me add a carriage

19
00:01:14.700 --> 00:01:17.540
return here. So the good practice, in fact,

20
00:01:17.540 --> 00:01:19.640
is not to write the code like this,

21
00:01:19.640 --> 00:01:24.370
but to add the opening of all the resources you need as

22
00:01:24.370 --> 00:01:28.480
parameters to this try with resources pattern.

23
00:01:28.480 --> 00:01:32.970
Now I don't need to call the close method from this PrintWriter because all the

24
00:01:32.970 --> 00:01:38.730
close method and the flush method of all those writers are going to be properly

25
00:01:38.730 --> 00:01:41.940
called as part of the try with resources pattern.

26
00:01:41.940 --> 00:01:46.480
So if I run this code, now you can see that in my debug.log file,

27
00:01:46.480 --> 00:01:48.710
everything has been returned properly.

28
00:01:48.710 --> 00:01:52.770
So the conclusion of that is the following. All the resources you

29
00:01:52.770 --> 00:01:58.630
need to use in a tryâ€‘catch block needs to be opened as part as the

30
00:01:58.630 --> 00:02:07.000
try with resources pattern. And the try with resources pattern supports that, so you need to use it.

