1
00:00:02,340 --> 00:00:06,380
First we are going to see how this WalkFileTreePattern is working.

2
00:00:06,380 --> 00:00:09,140
So, just for the sake of this example,

3
00:00:09,140 --> 00:00:13,840
I created under this files folder are all the hierarchy of

4
00:00:13,840 --> 00:00:17,280
folders and subfolders where the files are.

5
00:00:17,280 --> 00:00:20,040
There are audio files, images, and videos.

6
00:00:20,040 --> 00:00:21,760
They are all empty.

7
00:00:21,760 --> 00:00:24,720
There is absolutely no content in those files.

8
00:00:24,720 --> 00:00:27,700
They are just here so that we can see how this

9
00:00:27,700 --> 00:00:30,290
WalkFileTreePattern is going to work.

10
00:00:30,290 --> 00:00:33,740
So, we are going to explore this file hierarchy.

11
00:00:33,740 --> 00:00:38,350
And for that, we have this factory method from the Files class,

12
00:00:38,350 --> 00:00:41,340
which is called walkFileTree.

13
00:00:41,340 --> 00:00:46,520
It takes the path that has to be visited as a parameter.

14
00:00:46,520 --> 00:00:49,080
Hopefully this path is a directory.

15
00:00:49,080 --> 00:00:51,240
And by the way, we could check that,

16
00:00:51,240 --> 00:00:57,500
Files.isDirectory and pass this path as a parameter.

17
00:00:57,500 --> 00:01:00,110
Print out the result.

18
00:01:00,110 --> 00:01:05,330
Let me put this in a variable like this.

19
00:01:05,330 --> 00:01:06,070
Print the result.

20
00:01:06,070 --> 00:01:09,190
Indeed, this is a directory, so we can carry on.

21
00:01:09,190 --> 00:01:12,900
So, walkFileTree takes a FileVisitor as a parameter.

22
00:01:12,900 --> 00:01:16,040
So, we are going to create this FileVisitor.

23
00:01:16,040 --> 00:01:18,660
It's a FileVisitor of Path.

24
00:01:18,660 --> 00:01:21,680
And this walkFileTree throws an exception.

25
00:01:21,680 --> 00:01:25,440
So let me just throw this exception from the main method.

26
00:01:25,440 --> 00:01:28,900
This is really something you should never do, but here it's just

27
00:01:28,900 --> 00:01:32,740
an example so there's nothing wrong with it.

28
00:01:32,740 --> 00:01:36,620
And we are going to implement this FileVisitor.

29
00:01:36,620 --> 00:01:40,540
This FileVisitor is an interface, so we need to implement it.

30
00:01:40,540 --> 00:01:43,670
And you can see that there is a bunch of methods we implement.

31
00:01:43,670 --> 00:01:48,240
Let me reformat stuff so that you can see everything.

32
00:01:48,240 --> 00:01:51,650
We are not going to implement all of them because not all of them

33
00:01:51,650 --> 00:01:54,800
are necessarily needed in all the applications.

34
00:01:54,800 --> 00:01:55,430
For instance,

35
00:01:55,430 --> 00:01:59,670
preVisitDirectory is just something that is called before

36
00:01:59,670 --> 00:02:03,760
entering a directory and giving you the possibility to

37
00:02:03,760 --> 00:02:05,560
visit that directory or not.

38
00:02:05,560 --> 00:02:10,720
Since we want to visit everything we are going to return this constant,

39
00:02:10,720 --> 00:02:15,690
CONTINUE, meaning that indeed this directory is going to be visited.

40
00:02:15,690 --> 00:02:20,100
And we are going to do the same for the postVisitDirectory,

41
00:02:20,100 --> 00:02:24,920
which is there, which is a callback that is called once you exit a directory.

42
00:02:24,920 --> 00:02:27,000
This visitFileFailed,

43
00:02:27,000 --> 00:02:31,100
we do not expect this method to fail so we are not

44
00:02:31,100 --> 00:02:32,450
going to take it into account.

45
00:02:32,450 --> 00:02:38,380
And FileVisitResult is going to be called every time we are visiting a file.

46
00:02:38,380 --> 00:02:43,760
Let us, for instance, create a count inside this FileVisitor,

47
00:02:43,760 --> 00:02:50,120
private long count = 0L, return FileVisitResult.CONTINUE.

48
00:02:50,120 --> 00:02:52,670
So now our visitor is going to be called.

49
00:02:52,670 --> 00:02:56,910
And once it is done visiting our hierarchy,

50
00:02:56,910 --> 00:03:02,240
I would just like to display this visitor.count.

51
00:03:02,240 --> 00:03:05,380
And this is not going to work because the FileVisitor interface,

52
00:03:05,380 --> 00:03:08,150
of course, does not define this variable.

53
00:03:08,150 --> 00:03:12,090
But if I say that this visitor is in fact a var,

54
00:03:12,090 --> 00:03:15,880
tell the compiler that this is a FileVisitor of Path,

55
00:03:15,880 --> 00:03:19,870
it is going to infer the type of this visitor and get

56
00:03:19,870 --> 00:03:22,540
the visibility on this count variable.

57
00:03:22,540 --> 00:03:24,320
So if I run this code,

58
00:03:24,320 --> 00:03:29,280
indeed it will tell me that I have 16 files in my directory.

59
00:03:29,280 --> 00:03:38,710
I could do something more because this count here is a count of the files, but I

60
00:03:38,710 --> 00:03:48,060
could also add a count of the directories. And in the preVisitDirectory, just

61
00:03:48,060 --> 00:03:55,650
increment that, Count files and this is the files, this is the directories. And

62
00:03:55,650 --> 00:03:57,750
this is going to count the directories.

63
00:03:57,750 --> 00:04:03,510
I have 12 directories under files. So, this is basically in a

64
00:04:03,510 --> 00:04:07,530
nutshell how this FileVisitor is working,

65
00:04:07,530 --> 00:04:12,230
which is at the core of this walkFileTree pattern.

66
00:04:12,230 --> 00:04:16,960
All you have to do is implement your own visitor, pass it as an

67
00:04:16,960 --> 00:04:20,720
argument to this walkFileTree, and this walkFileTree will go

68
00:04:20,720 --> 00:04:25,630
through all the directories under a given directory and do whatever

69
00:04:25,630 --> 00:04:28,140
you want using the visitor pattern.

70
00:04:28,140 --> 00:04:36,000
We have a second pattern which is much simpler than this one and that we are going to see now.

