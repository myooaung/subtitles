1
00:00:02,540 --> 00:00:03,440
And at last,

2
00:00:03,440 --> 00:00:09,140
how can you get information on a file or directory using this path object?

3
00:00:09,140 --> 00:00:09,590
Well,

4
00:00:09,590 --> 00:00:14,530
you have this Files factory class that has all the methods that takes the

5
00:00:14,530 --> 00:00:17,840
path as a parameter to give you the information you need.

6
00:00:17,840 --> 00:00:22,090
You can check if this path exists or not, if the file or

7
00:00:22,090 --> 00:00:25,850
directory you're looking for does exist or not. You can

8
00:00:25,850 --> 00:00:28,440
check if this file is a hidden file.

9
00:00:28,440 --> 00:00:33,500
You can see if it's a directory or a regular file. And at last, you

10
00:00:33,500 --> 00:00:39,110
can check if it is readable, writeable, or if you can execute it. Let

11
00:00:39,110 --> 00:00:42,440
us quickly see the patterns we may use.

12
00:00:42,440 --> 00:00:47,290
All those functionalities are implemented using corresponding methods.

13
00:00:47,290 --> 00:00:52,440
For instance, we have an exists method that takes a path as a parameter.

14
00:00:52,440 --> 00:00:56,570
And by the way, this method can also take a further argument,

15
00:00:56,570 --> 00:01:00,470
which is a constant called NOFOLLOW_LINKS.

16
00:01:00,470 --> 00:01:03,900
That is going to tell the API whether you want to follow

17
00:01:03,900 --> 00:01:06,550
symbolic links or not on the file system.

18
00:01:06,550 --> 00:01:10,800
And at last, you have a method, isSameFile, that is going to

19
00:01:10,800 --> 00:01:14,620
take two paths as parameters. Those two paths may be very

20
00:01:14,620 --> 00:01:17,480
different in the structure, but, in fact,

21
00:01:17,480 --> 00:01:25,000
pointing to the same element on the disk. And this is what this method is going to tell you.

