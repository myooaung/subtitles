WEBVTT
1
00:00:00.940 --> 00:00:03.720
[Autogenerated] we want to connect to our database to create and

2
00:00:03.720 --> 00:00:08.490
to query pizzas connecting to an RDS database instance doesn't

3
00:00:08.490 --> 00:00:12.610
actually require the use of the AWS SDK.

4
00:00:12.610 --> 00:00:15.420
Since you choose the flavor of database installed,

5
00:00:15.420 --> 00:00:19.670
you'll actually use a normal method of connecting to that database instance.

6
00:00:19.670 --> 00:00:22.420
A typical solution is to use an object relational

7
00:00:22.420 --> 00:00:25.540
mapping library also called O R M.

8
00:00:25.540 --> 00:00:30.290
This transforms SQL queries and responses into basic function calls and

9
00:00:30.290 --> 00:00:34.100
objects that makes database is much easier to work with.

10
00:00:34.100 --> 00:00:36.210
An added bonus is security.

11
00:00:36.210 --> 00:00:39.380
Since you won't be writing SQL queries and worrying about

12
00:00:39.380 --> 00:00:42.810
injection vulnerabilities for our application,

13
00:00:42.810 --> 00:00:48.320
we will use a popular node O R M library called SQL Eyes which

14
00:00:48.320 --> 00:00:52.340
supports post grass but also my SQL and more.

15
00:00:52.340 --> 00:00:56.440
I've already written most of the code since it doesn't involve interacting

16
00:00:56.440 --> 00:01:01.600
with the AWS SDK so we just need to uncommenting the code,

17
00:01:01.600 --> 00:01:07.640
add the host ID for our RDS instance and then run the code to test it.

18
00:01:07.640 --> 00:01:13.740
The data slash pizzas dot Js file is where all of our pizza operations happen,

19
00:01:13.740 --> 00:01:19.400
such as creating pizza's getting pizza's getting a user's pizzas

20
00:01:19.400 --> 00:01:23.040
and getting recent pizzas for the index page,

21
00:01:23.040 --> 00:01:28.170
You can see around line 15 where we are creating a pizza object and then adding

22
00:01:28.170 --> 00:01:34.140
it to a global pizzas hash This is a simple way of creating a mini pizza

23
00:01:34.140 --> 00:01:38.800
database there are a couple issues with this approach though that our database

24
00:01:38.800 --> 00:01:44.970
implementation will solve first is persistence because this Pizza's variable is

25
00:01:44.970 --> 00:01:50.240
just in memory once our app restarts, all the data will be lost.

26
00:01:50.240 --> 00:01:53.730
Second is scalability as pizzas are added,

27
00:01:53.730 --> 00:01:57.240
memory usage will increase with no constraints.

28
00:01:57.240 --> 00:02:00.680
If the apps saw any rise and registered pizzas the

29
00:02:00.680 --> 00:02:03.240
memory would balloon out of control.

30
00:02:03.240 --> 00:02:07.560
So for these reasons we want to store our pizzas in a database now.

31
00:02:07.560 --> 00:02:10.670
Open the file data slash pizza store.

32
00:02:10.670 --> 00:02:15.580
Js This file uses SQL is to create a Pizzas table and our

33
00:02:15.580 --> 00:02:18.640
database and synchronize the columns.

34
00:02:18.640 --> 00:02:22.680
It also provides some simple functions for us to interact with

35
00:02:22.680 --> 00:02:28.150
the database in code this file is complete except for the host

36
00:02:28.150 --> 00:02:32.440
ID online for so let's update that.

37
00:02:32.440 --> 00:02:37.480
Go to your web console and the RDS instances detail

38
00:02:37.480 --> 00:02:40.510
page that we created and copy that.

39
00:02:40.510 --> 00:02:42.440
endpoint again,

40
00:02:42.440 --> 00:02:49.230
then paste it online for inside the quotes now save this file and it's ready to

41
00:02:49.230 --> 00:02:56.490
go switch back to the data slash pizzas dot Js file in this file we're going to

42
00:02:56.490 --> 00:03:03.370
be uncommenting lines of code and commenting others so that our app will use RDS

43
00:03:03.370 --> 00:03:08.150
through Pizza store instead of the end memory data structure it's using right

44
00:03:08.150 --> 00:03:11.140
now we'll start with line five.

45
00:03:11.140 --> 00:03:16.770
uncommenting the import for pizza store, Then online, 10.

46
00:03:16.770 --> 00:03:20.940
Uncommenting the pizza store initialize function call,

47
00:03:20.940 --> 00:03:25.940
this is what will create the pizzas table in our database Now one

48
00:03:25.940 --> 00:03:31.640
Comment Line 18 to create Pizzas And then comment,

49
00:03:31.640 --> 00:03:38.550
lines 16 and 17 scroll down and uncommenting line 25 4 batch,

50
00:03:38.550 --> 00:03:46.560
Pizza creation and then comment line 24 In the get for user function will need

51
00:03:46.560 --> 00:03:55.940
to comment lines 29-32 And then uncommon lines 33 through 38.

52
00:03:55.940 --> 00:04:01.460
Now in the get recent function comment lines 42 and 43 and then

53
00:04:01.460 --> 00:04:06.850
uncommenting lines 44-48 And then finally in the get function,

54
00:04:06.850 --> 00:04:14.930
comment lines 52 and 53 and uncommon lines 54-59 and that completes the

55
00:04:14.930 --> 00:04:20.540
changes to connect to our database in code Now let's try it out,

56
00:04:20.540 --> 00:04:25.680
go to your command prompt and run NPM start whereas

57
00:04:25.680 --> 00:04:29.030
before you had very simple start output.

58
00:04:29.030 --> 00:04:32.350
Now he'll get a barrage of text.

59
00:04:32.350 --> 00:04:33.790
This is the O R.

60
00:04:33.790 --> 00:04:38.940
M output as it creates the pizzas table and inserts the pizzas.

61
00:04:38.940 --> 00:04:43.240
Now let's take a look at what it did in pg admin,

62
00:04:43.240 --> 00:04:48.960
expand the schemas option under pizza lovers and then

63
00:04:48.960 --> 00:04:52.870
expand public and then expand tables.

64
00:04:52.870 --> 00:04:55.350
You should see a pizzas table here,

65
00:04:55.350 --> 00:05:00.890
right click it and select view data and then all rows.

66
00:05:00.890 --> 00:05:05.330
This will open a query panel which shows you the data in the table,

67
00:05:05.330 --> 00:05:09.010
all the data and you should see all of our initial

68
00:05:09.010 --> 00:05:12.160
pizzas in the database which are hosted.

69
00:05:12.160 --> 00:05:17.880
An RDS just a quick note if you stop the app and started again the

70
00:05:17.880 --> 00:05:23.480
current code will drop the pizzas table and recreate it at the end

71
00:05:23.480 --> 00:05:30.000
of this module we're going to remove the code that does this every time you start your app

