1
00:00:00,940 --> 00:00:03,860
[Autogenerated] Dynamodb is amazon's other solution for

2
00:00:03,860 --> 00:00:07,410
storing data in AWS as you saw with RDS.

3
00:00:07,410 --> 00:00:10,400
There are many options for relational type databases,

4
00:00:10,400 --> 00:00:13,980
but what if you want to use a data storage type that is not

5
00:00:13,980 --> 00:00:18,250
relational dynamodb is your best choice for this in AWS.

6
00:00:18,250 --> 00:00:20,690
What do I mean by not relational?

7
00:00:20,690 --> 00:00:23,220
Well, in relational databases,

8
00:00:23,220 --> 00:00:26,900
they're built in ways to relate different tables in the database.

9
00:00:26,900 --> 00:00:28,940
Usually by using keys.

10
00:00:28,940 --> 00:00:34,170
This makes querying and storing data very structured and in some ways modular.

11
00:00:34,170 --> 00:00:34,840
In addition,

12
00:00:34,840 --> 00:00:39,770
each table has a strict schema that must be followed for each row of data.

13
00:00:39,770 --> 00:00:42,770
No SQL or non relational databases,

14
00:00:42,770 --> 00:00:45,940
throw all that out the window and just store data in

15
00:00:45,940 --> 00:00:48,340
tables without much configuration.

16
00:00:48,340 --> 00:00:49,700
There is no set schema.

17
00:00:49,700 --> 00:00:53,240
So you can change what data you're storing at any time.

18
00:00:53,240 --> 00:00:56,220
The main structure and dynamo dB is a table.

19
00:00:56,220 --> 00:01:01,350
A table contains many rows of data called items that have whatever schema

20
00:01:01,350 --> 00:01:04,240
you give them at the time of putting them in the table.

21
00:01:04,240 --> 00:01:08,060
The one set aspect of your items is that they do need

22
00:01:08,060 --> 00:01:10,840
to include the same primary key.

23
00:01:10,840 --> 00:01:13,660
This is used to index the data and make it efficient

24
00:01:13,660 --> 00:01:16,340
to query items based on that key.

25
00:01:16,340 --> 00:01:18,870
You've only got a few different types to choose from.

26
00:01:18,870 --> 00:01:23,640
For this primary key string number or binary.

27
00:01:23,640 --> 00:01:25,130
Besides the key options,

28
00:01:25,130 --> 00:01:28,850
the only other really configurable property of a table is

29
00:01:28,850 --> 00:01:31,340
the provision through put capacity.

30
00:01:31,340 --> 00:01:36,600
This defines how many read or write operations can happen in a given second and

31
00:01:36,600 --> 00:01:40,490
tells a W S how much hardware to provision for your table.

32
00:01:40,490 --> 00:01:44,820
Since there's no instance option for a dynamodb table provisioned

33
00:01:44,820 --> 00:01:48,640
throughput is how you prepare your table to take load.

34
00:01:48,640 --> 00:01:52,410
The number represented on the read write throughput capacity is based

35
00:01:52,410 --> 00:01:57,040
on a read or write unit which is four kB in size.

36
00:01:57,040 --> 00:02:00,540
If the item you're reading or writing is larger than that,

37
00:02:00,540 --> 00:02:02,840
it will consume more units.

38
00:02:02,840 --> 00:02:07,280
If you're read, write throughput exceeds the provision amount, A W.

39
00:02:07,280 --> 00:02:12,040
S may throttle the requests to read, write or even deny them.

40
00:02:12,040 --> 00:02:15,720
It's important to right size the provisioned throughput capacity

41
00:02:15,720 --> 00:02:19,110
for your table and since it's a configuration factor that you

42
00:02:19,110 --> 00:02:21,360
can modify on your table as needed,

43
00:02:21,360 --> 00:02:25,600
a Ws makes it easy to get it right over the past few years.

44
00:02:25,600 --> 00:02:31,140
AWS has continued to add features to dynamodb to make it even more usable.

45
00:02:31,140 --> 00:02:34,370
two main features have been added in relation to the

46
00:02:34,370 --> 00:02:37,330
throughput capacity for your tables.

47
00:02:37,330 --> 00:02:41,460
The first is on demand capacity mode which is a set it and

48
00:02:41,460 --> 00:02:45,770
forget it capacity mode and the second is auto scaling for

49
00:02:45,770 --> 00:02:47,640
the provisioned capacity mode,

50
00:02:47,640 --> 00:02:52,760
which will increase or decrease the provision capacity numbers based on demand.

51
00:02:52,760 --> 00:02:55,840
Let's take a look at both of these by setting your table

52
00:02:55,840 --> 00:02:57,740
or index to the on demand capacity,

53
00:02:57,740 --> 00:03:02,300
mode AWS will provide whatever capacity is needed for your table.

54
00:03:02,300 --> 00:03:06,110
There are few limits to how much capacity can be provided.

55
00:03:06,110 --> 00:03:10,530
So this is a good option if you aren't really sure what your capacity needs.

56
00:03:10,530 --> 00:03:15,100
Maybe the pricing models different with this mode as you'll pay per

57
00:03:15,100 --> 00:03:19,590
request instead of based on a configuration setting for your table

58
00:03:19,590 --> 00:03:22,060
but the flexibility of this capacity.

59
00:03:22,060 --> 00:03:25,710
mode makes it way more expensive as you can imagine.

60
00:03:25,710 --> 00:03:31,040
So I really recommend only using it for analysis purposes.

61
00:03:31,040 --> 00:03:35,240
Then there's the auto scaling feature for provision capacity.

62
00:03:35,240 --> 00:03:39,710
Remember provision capacity is where you explicitly configure how many

63
00:03:39,710 --> 00:03:44,300
capacity units you'll need for reading and writing Auto scaling enables you

64
00:03:44,300 --> 00:03:49,570
to add additional rules that increase or decrease that configured number if

65
00:03:49,570 --> 00:03:54,450
demand increases or decreases just like an auto scaling group for ec two

66
00:03:54,450 --> 00:03:59,130
instances this is much more appropriate for production workloads as it

67
00:03:59,130 --> 00:04:03,760
maintains the lower cost of the provisioned capacity mode but it gives you

68
00:04:03,760 --> 00:04:05,060
more flexibility.

69
00:04:05,060 --> 00:04:09,900
Azure demand needs change my recommendation when you're working with the new

70
00:04:09,900 --> 00:04:13,970
application is to just set it to on demand capacity mode.

71
00:04:13,970 --> 00:04:18,580
In the very beginning this helps you understand the real world needs of

72
00:04:18,580 --> 00:04:23,570
your project but then after you've been gathering data for a few weeks then

73
00:04:23,570 --> 00:04:26,130
change your tables to provision capacity mode.

74
00:04:26,130 --> 00:04:30,660
Configure appropriate auto scaling rules based on the information

75
00:04:30,660 --> 00:04:39,000
that you've gathered that will set you up for the most cost effective and performance usage of dynamodb

