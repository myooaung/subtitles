WEBVTT
1
00:00:00.940 --> 00:00:03.570
[Autogenerated] one of the biggest challenges for websites and web

2
00:00:03.570 --> 00:00:08.210
applications is latency latency is the time it takes for a user's

3
00:00:08.210 --> 00:00:10.540
request to reach your web server.

4
00:00:10.540 --> 00:00:14.400
This affects nearly anything a user will do on a website or web

5
00:00:14.400 --> 00:00:18.830
application because most interaction involves a new web request.

6
00:00:18.830 --> 00:00:22.600
Each request can be plagued by latency causing the user

7
00:00:22.600 --> 00:00:26.140
experience on your application to appear slow.

8
00:00:26.140 --> 00:00:30.300
Latency is such a big challenge because in many ways it is out of

9
00:00:30.300 --> 00:00:33.230
the hands of the web application being requested,

10
00:00:33.230 --> 00:00:37.480
improving your application performance using a larger instance.

11
00:00:37.480 --> 00:00:39.940
None of these will solve latency.

12
00:00:39.940 --> 00:00:43.000
There's only one solution for latency and that's moving your

13
00:00:43.000 --> 00:00:46.090
users and web servers closer together.

14
00:00:46.090 --> 00:00:51.100
You probably don't have the budget to fly your users closer to your web servers.

15
00:00:51.100 --> 00:00:56.940
So the solution then will be to situate web servers closer to your users.

16
00:00:56.940 --> 00:01:00.300
We've looked at a few different ways to geo locate your resources

17
00:01:00.300 --> 00:01:03.930
such as S three buckets and Ec two instances.

18
00:01:03.930 --> 00:01:07.200
But those services aren't intended to solve latency,

19
00:01:07.200 --> 00:01:11.160
that's why AWS has created cloudfront a global content

20
00:01:11.160 --> 00:01:14.430
delivery network that is specifically designed to combat

21
00:01:14.430 --> 00:01:17.240
latency between your content and users.

22
00:01:17.240 --> 00:01:21.740
Cloudfront works by edging content to locations around the world that are

23
00:01:21.740 --> 00:01:26.270
closer to your users request to your application will automatically route to

24
00:01:26.270 --> 00:01:29.780
the cloudfront edge location nearest to the requester,

25
00:01:29.780 --> 00:01:33.140
ensuring lightning fast delivery of your content.

26
00:01:33.140 --> 00:01:36.930
Cloudfront integrates seamlessly with other services on AWS

27
00:01:36.930 --> 00:01:40.500
such as S3 Ec two and load balancers.

28
00:01:40.500 --> 00:01:44.900
Cloudfront can edge content called objects from these sources,

29
00:01:44.900 --> 00:01:49.270
meaning the requests are resolved by cloudfront instead of requesting

30
00:01:49.270 --> 00:01:53.040
the content from your S three bucket or application,

31
00:01:53.040 --> 00:01:57.360
Cloudfront can also act as a go between for dynamic content from your ec.

32
00:01:57.360 --> 00:01:58.640
Two instance,

33
00:01:58.640 --> 00:02:03.390
reducing the latency from the user to the cloudfront edge location and then

34
00:02:03.390 --> 00:02:06.840
passing on the request to your application via an optimized,

35
00:02:06.840 --> 00:02:08.690
constantly monitored connection.

36
00:02:08.690 --> 00:02:09.910
A set of content.

37
00:02:09.910 --> 00:02:12.840
Edge with cloudfront is called a distribution.

38
00:02:12.840 --> 00:02:17.640
A cloudfront distribution is given its own URL on the cloudfront dot net domain,

39
00:02:17.640 --> 00:02:21.440
which you can use in DNS rules with your own domain.

40
00:02:21.440 --> 00:02:25.060
Each distribution provides content from one or more

41
00:02:25.060 --> 00:02:30.640
origins like S three buckets, ec two instances or load balancers.

42
00:02:30.640 --> 00:02:34.560
A distribution has different behaviors dictating how it will.

43
00:02:34.560 --> 00:02:35.850
Edge content.

44
00:02:35.850 --> 00:02:40.040
You can specify a URL path to create different behaviors for

45
00:02:40.040 --> 00:02:43.040
different directories or types of content.

46
00:02:43.040 --> 00:02:43.730
For instance,

47
00:02:43.730 --> 00:02:46.530
you could edge an image folder with images that will

48
00:02:46.530 --> 00:02:48.860
likely not change for a long time,

49
00:02:48.860 --> 00:02:53.410
very aggressively setting a high minimum time to live by

50
00:02:53.410 --> 00:02:56.090
tweaking time to live and the different behaviors.

51
00:02:56.090 --> 00:03:02.000
You can find distribution settings that reduce latency and improve the user experience

