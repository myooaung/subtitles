WEBVTT
1
00:00:01.040 --> 00:00:02.890
[Autogenerated] in the last clip we moved a bunch of

2
00:00:02.890 --> 00:00:07.320
files up to S3 let's modify our code to use these files

3
00:00:07.320 --> 00:00:09.740
instead of those served locally.

4
00:00:09.740 --> 00:00:13.840
The first step is to get the root path that these files should share

5
00:00:13.840 --> 00:00:18.360
since the path and file names won't change in S3 we really just care

6
00:00:18.360 --> 00:00:23.090
about the route that the new assets will have open the S3 console and

7
00:00:23.090 --> 00:00:24.940
navigate to your pizza bucket,

8
00:00:24.940 --> 00:00:30.120
select one of the PNG files and then look for the object URL

9
00:00:30.120 --> 00:00:35.390
field copy that entire value will remove the key at the end when

10
00:00:35.390 --> 00:00:39.840
we end up using it but the root of the URL will be the new route

11
00:00:39.840 --> 00:00:42.330
path for all of our assets.

12
00:00:42.330 --> 00:00:48.550
Now open the Pizza Lovers demo application in your text editor will first

13
00:00:48.550 --> 00:00:54.140
change where the static assets like javascript files and CSS are coming from

14
00:00:54.140 --> 00:00:57.860
Previously the app was sending them but will change it.

15
00:00:57.860 --> 00:00:59.260
So the client side,

16
00:00:59.260 --> 00:01:03.300
HTML and Javascript files have passed to the files

17
00:01:03.300 --> 00:01:05.300
that are in the S- three bucket.

18
00:01:05.300 --> 00:01:10.600
Instead much more convenient expand the templates folder

19
00:01:10.600 --> 00:01:13.540
and opened the layout dot HBs file.

20
00:01:13.540 --> 00:01:19.490
Now this is a handlebars template file that generates the HTML markup for

21
00:01:19.490 --> 00:01:25.640
application Online five is a reference to the CSS style sheet,

22
00:01:25.640 --> 00:01:30.090
remove these slash assets part of the path and

23
00:01:30.090 --> 00:01:33.130
paste the URL that you copied from.

24
00:01:33.130 --> 00:01:39.320
S3 now in that you are removed the file name at the end of the URL and

25
00:01:39.320 --> 00:01:46.250
make sure that there's only a single slash before CSS then go to the

26
00:01:46.250 --> 00:01:52.110
beginning of that URL and remove the https at the beginning so it just

27
00:01:52.110 --> 00:01:56.410
begins with a double slash this will keep us from running into conflict

28
00:01:56.410 --> 00:02:02.310
ng security protocol browser errors in the future copy the URL route now

29
00:02:02.310 --> 00:02:06.320
so that you can use that for all the other modifications we need to make,

30
00:02:06.320 --> 00:02:10.120
it's going to be the same in all of them such as in the next

31
00:02:10.120 --> 00:02:14.320
line where you can paste over the slash assets part uh with

32
00:02:14.320 --> 00:02:16.840
the URL that you have copied.

33
00:02:16.840 --> 00:02:25.600
Now save that file and next we're gonna open pizza dot make dot H B S online 17

34
00:02:25.600 --> 00:02:32.790
we preview the toppings images replace slash assets with the S3 URL that you

35
00:02:32.790 --> 00:02:40.500
have copied then online 26 we're including a javascript file again replace slash

36
00:02:40.500 --> 00:02:47.900
assets with the S3 URL now say that file we're done with it and open index dot h

37
00:02:47.900 --> 00:02:55.050
B s online five fix the URL for the logo then save the file and we're done with

38
00:02:55.050 --> 00:03:00.150
that one and now we're going to go to the partials directory and the header dot

39
00:03:00.150 --> 00:03:01.400
h B S file.

40
00:03:01.400 --> 00:03:07.050
There are two image URL s on lines two and three fix both of those URL S so

41
00:03:07.050 --> 00:03:12.700
they're referencing the files That are in our S three bucket and now the last

42
00:03:12.700 --> 00:03:16.440
change will be in our client side javascript file,

43
00:03:16.440 --> 00:03:24.000
navigate to asset slash Js slash make dot Js Online 17 We are

44
00:03:24.000 --> 00:03:27.240
loading in the toppings images into memory,

45
00:03:27.240 --> 00:03:31.420
replace slash assets so it will pull from our s three bucket,

46
00:03:31.420 --> 00:03:32.480
save the file.

47
00:03:32.480 --> 00:03:36.230
And since we just modify the javascript which is now being

48
00:03:36.230 --> 00:03:41.610
hosted in S3 we do need to re upload it to S3 feel free to

49
00:03:41.610 --> 00:03:43.240
do this whichever way you want,

50
00:03:43.240 --> 00:03:46.450
but I'll do it with the cli since I've already got this

51
00:03:46.450 --> 00:03:49.940
Js copy command in my shell history.

52
00:03:49.940 --> 00:03:55.330
And the last optional step is to change the location of pizza images

53
00:03:55.330 --> 00:03:59.240
for the mocks that hydrate the app when it starts,

54
00:03:59.240 --> 00:04:03.480
you can find them in the data slash mock pizzas folder and you

55
00:04:03.480 --> 00:04:06.240
just want to fix the u r l s as you did before,

56
00:04:06.240 --> 00:04:10.260
but you don't need to do this now with all those files updated,

57
00:04:10.260 --> 00:04:14.570
we can move on to the saving of pizza images In the lib folder

58
00:04:14.570 --> 00:04:17.940
there are two files that start with image store.

59
00:04:17.940 --> 00:04:21.690
Both of these files are used to save a pizza image

60
00:04:21.690 --> 00:04:23.740
that was created in the browser.

61
00:04:23.740 --> 00:04:28.270
The image store dot Js file provides an API for our code to use.

62
00:04:28.270 --> 00:04:33.150
And image store file dot Js is basically the local file

63
00:04:33.150 --> 00:04:36.990
implementation will create an S3 implementation.

64
00:04:36.990 --> 00:04:44.540
So in this folder, go ahead and create a file called Image store S3 dot Js.

65
00:04:44.540 --> 00:04:49.430
Now let's look at image store dot Js this file will expect a save

66
00:04:49.430 --> 00:04:54.030
function on our S3 store implementation that takes a name for the

67
00:04:54.030 --> 00:04:58.060
image and the base 64 encoded image data,

68
00:04:58.060 --> 00:05:01.180
let's implement this function signature in our file,

69
00:05:01.180 --> 00:05:02.830
open image store,

70
00:05:02.830 --> 00:05:08.710
S3 dot Js first we're going to define our save function and export it so

71
00:05:08.710 --> 00:05:12.840
that image store Js can import the function from it.

72
00:05:12.840 --> 00:05:23.170
Type module dot exports dot save equals async open parentheses name comma data,

73
00:05:23.170 --> 00:05:28.550
close parentheses, fat arrow, which is a equals and a greater than sign.

74
00:05:28.550 --> 00:05:29.210
Open.

75
00:05:29.210 --> 00:05:31.140
Close curly brace.

76
00:05:31.140 --> 00:05:33.550
Now this is our function signature.

77
00:05:33.550 --> 00:05:37.370
It's going to match what image store dot Js needs.

78
00:05:37.370 --> 00:05:39.610
So now that that's done,

79
00:05:39.610 --> 00:05:43.890
let's complete the rest of the implementation of this file and dysfunction.

80
00:05:43.890 --> 00:05:47.410
We'll start by importing the S3 client.

81
00:05:47.410 --> 00:05:51.080
We're going to be using version three of the AWS javascript.

82
00:05:51.080 --> 00:05:55.980
SdK This version is a little bit different than version two.

83
00:05:55.980 --> 00:05:59.530
It's much more modular and as a result it's more

84
00:05:59.530 --> 00:06:03.640
performant than the previous versions two or 1.

85
00:06:03.640 --> 00:06:07.050
So at the top of the file we're gonna start with a const

86
00:06:07.050 --> 00:06:10.780
declaration and then add curly braces.

87
00:06:10.780 --> 00:06:15.440
Since we're going to be d structuring some objects from our imports.

88
00:06:15.440 --> 00:06:18.780
The first object is going to be put object command.

89
00:06:18.780 --> 00:06:23.020
This is all paschal cased where each word is upper.

90
00:06:23.020 --> 00:06:24.840
Upper case in the beginning.

91
00:06:24.840 --> 00:06:30.550
You'll notice that most aWS sDK property names don't really follow the

92
00:06:30.550 --> 00:06:34.640
typical JavaScript convention which is usually camel cased.

93
00:06:34.640 --> 00:06:36.470
Usually they're all paschal case.

94
00:06:36.470 --> 00:06:40.930
So just you'll notice that so just keep that in mind um after the

95
00:06:40.930 --> 00:06:45.940
comma also add another object which is S3 client.

96
00:06:45.940 --> 00:06:46.290
Now,

97
00:06:46.290 --> 00:06:50.850
after the curly braces at an equal sign and then call the require

98
00:06:50.850 --> 00:07:00.340
function passing in the string of AT aWS dash sDK slash client dash S3

99
00:07:00.340 --> 00:07:06.300
this is how we will pull in only the S3 client code that we need that

100
00:07:06.300 --> 00:07:10.970
will be using and since we're even going further and de structuring the

101
00:07:10.970 --> 00:07:14.540
objects from that import,

102
00:07:14.540 --> 00:07:19.330
we're also only importing the specific code that we're gonna be using so

103
00:07:19.330 --> 00:07:23.200
everything is going to be much more performance now inside the safe

104
00:07:23.200 --> 00:07:28.520
function will start by declaring a programs const variable this will be

105
00:07:28.520 --> 00:07:32.600
an object and this object is going to contain the specifics of how we

106
00:07:32.600 --> 00:07:37.740
want the put command to work the first property in the object is bucket

107
00:07:37.740 --> 00:07:38.620
as a reminder,

108
00:07:38.620 --> 00:07:41.800
all the properties in this object are going to be paschal case so

109
00:07:41.800 --> 00:07:46.430
it's an uppercase b The value for bucket will be a string with the

110
00:07:46.430 --> 00:07:49.490
name of the s three bucket that you created.

111
00:07:49.490 --> 00:07:53.240
Just the bucket, name, not the URL that we've been using.

112
00:07:53.240 --> 00:07:56.310
The next property is key for the value for this,

113
00:07:56.310 --> 00:08:00.970
enter back ticks so that we can create a string dynamically,

114
00:08:00.970 --> 00:08:05.040
then you'll enter pizzas slash dollar sign,

115
00:08:05.040 --> 00:08:12.040
open curly brace name, close curly brace dot PNG and then close the back ticks.

116
00:08:12.040 --> 00:08:15.640
Um This is going to create the object key based on the name,

117
00:08:15.640 --> 00:08:18.760
parameter that's passed into the same function.

118
00:08:18.760 --> 00:08:22.380
The next property is body and then the value for this is a

119
00:08:22.380 --> 00:08:26.420
call to the buffer dot from function.

120
00:08:26.420 --> 00:08:29.130
The first argument and that function is data and the

121
00:08:29.130 --> 00:08:33.840
second is a string With the value base 64.

122
00:08:33.840 --> 00:08:36.520
This is going to convert the file data for the image into a

123
00:08:36.520 --> 00:08:40.140
buffer and then encode it as base 64.

124
00:08:40.140 --> 00:08:45.390
The next property is content encoding with the value of the string.

125
00:08:45.390 --> 00:08:47.340
Base 64.

126
00:08:47.340 --> 00:08:51.710
And finally abby content type property with the value of the string,

127
00:08:51.710 --> 00:08:54.280
image slash PNG.

128
00:08:54.280 --> 00:08:59.410
And that's all we have to do for our programs object Next we will

129
00:08:59.410 --> 00:09:03.570
instantiate a client and a command and then send the command.

130
00:09:03.570 --> 00:09:06.100
This pattern, instantiate client,

131
00:09:06.100 --> 00:09:10.770
command and send the command is one that you'll use regularly with the version

132
00:09:10.770 --> 00:09:14.890
three javascript sdK it's kind of the way that things work.

133
00:09:14.890 --> 00:09:18.840
So first create a new concept variable with the name client.

134
00:09:18.840 --> 00:09:25.020
Then after an equal sign add new and a call to the S3 client constructor.

135
00:09:25.020 --> 00:09:28.780
The one that we imported above the constructor function call

136
00:09:28.780 --> 00:09:33.650
will take options so inside the parentheses create an object

137
00:09:33.650 --> 00:09:36.240
and add one property which is region.

138
00:09:36.240 --> 00:09:40.560
This one is actually lower cased our region for whatever reason.

139
00:09:40.560 --> 00:09:43.550
Uh for the value enter a string with the region I.

140
00:09:43.550 --> 00:09:43.830
D.

141
00:09:43.830 --> 00:09:46.560
For whichever one that you're working with on the next line,

142
00:09:46.560 --> 00:09:50.600
declare a new const and we'll call this one command and we're

143
00:09:50.600 --> 00:09:54.800
going to assign to it a new constructor call for the put object

144
00:09:54.800 --> 00:09:57.860
command function that we imported above.

145
00:09:57.860 --> 00:10:00.530
Then we'll pass the parameters variable that we

146
00:10:00.530 --> 00:10:02.910
created into that constructor call.

147
00:10:02.910 --> 00:10:05.370
So now we have a client and we have a command and the

148
00:10:05.370 --> 00:10:06.840
next line we're going to send it.

149
00:10:06.840 --> 00:10:10.410
The sin function call is async so add the await

150
00:10:10.410 --> 00:10:16.530
keyword and then call client dot send, passing in the command variable.

151
00:10:16.530 --> 00:10:19.150
There is a response to dysfunction,

152
00:10:19.150 --> 00:10:22.550
there is something that's returned but we're not going to use it.

153
00:10:22.550 --> 00:10:26.140
So I'll just call the function without assigning the

154
00:10:26.140 --> 00:10:28.420
result to a variable or anything.

155
00:10:28.420 --> 00:10:31.030
You may also notice that I'm not adding any error

156
00:10:31.030 --> 00:10:33.540
handling here for the async function.

157
00:10:33.540 --> 00:10:38.380
No try and catch a few steps down and the call stack I do have

158
00:10:38.380 --> 00:10:42.840
kind of a catch all try and catch so any errors will be caught at

159
00:10:42.840 --> 00:10:45.840
that level and they'll be handled.

160
00:10:45.840 --> 00:10:48.690
The last step is the return value for the safe function.

161
00:10:48.690 --> 00:10:52.360
I want to return the full URL for the image so it can be

162
00:10:52.360 --> 00:10:55.120
saved in the JSON data for the image,

163
00:10:55.120 --> 00:10:58.370
type the return keyword and then we're going to use back ticks

164
00:10:58.370 --> 00:11:02.770
again and well paced the S3 URL that we've been using in those

165
00:11:02.770 --> 00:11:06.530
other files so we get to use it again then at a slash at the

166
00:11:06.530 --> 00:11:09.780
end and then dollar sign, open curly brace.

167
00:11:09.780 --> 00:11:15.940
programs dot ke uppercase k close curly brace and then close

168
00:11:15.940 --> 00:11:19.650
your back ticks this will ensure that the image URL that we're

169
00:11:19.650 --> 00:11:21.760
returning is going to be the same.

170
00:11:21.760 --> 00:11:27.660
That was used to save the file to S3 Great R S three storage implementation is

171
00:11:27.660 --> 00:11:31.280
complete now we just need to replace how it's being used.

172
00:11:31.280 --> 00:11:36.260
An image store dot Js so open that file and then online one,

173
00:11:36.260 --> 00:11:38.800
you can see that we're importing our file store

174
00:11:38.800 --> 00:11:42.640
implementation now you can either replace this or you can

175
00:11:42.640 --> 00:11:45.840
just add a new line to import the S3 Store.

176
00:11:45.840 --> 00:11:50.960
Either way create a variable called S3 Store and import the Image store.

177
00:11:50.960 --> 00:11:53.240
S3 file that we were just working on.

178
00:11:53.240 --> 00:11:59.080
Then online six, you'll want to replace file store with S3 Store,

179
00:11:59.080 --> 00:12:00.640
just a variable name.

180
00:12:00.640 --> 00:12:03.530
The function call and function identify.

181
00:12:03.530 --> 00:12:05.440
IRS are the exact same.

182
00:12:05.440 --> 00:12:09.860
Now we are saving our pizza images to S3 instead of saving them locally,

183
00:12:09.860 --> 00:12:16.000
we have just one more thing to do before we're ready to try all this out in the cloud

