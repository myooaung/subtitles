WEBVTT

00:02.560 --> 00:05.880
So with mongoose installed, let's use it. On

00:05.930 --> 00:10.130
nodejs, so on our backend, we'll add the schema for that.

00:10.180 --> 00:16.230
Now first of all, let's go to our post model on the frontend in the angular code

00:16.240 --> 00:24.370
and this shows us how a post looks like right now. A post in our application mainly has a title and

00:24.370 --> 00:25.990
a content.

00:25.990 --> 00:31.030
It also has an ID but this ID will be created automatically by mongoose for us,

00:31.030 --> 00:33.200
so that's another convenience option,

00:33.370 --> 00:35.110
we get that out of the box,

00:35.110 --> 00:43.340
we don't have to create such a unique ID on our own. So we can instead focus on creating these schemas

00:43.360 --> 00:49.800
on the backend and for that, I'll create a new folder there and I'll name it models too. Model, schema, we'll basically

00:49.800 --> 00:55.270
be use that interchangeably here though actually, mongoose will differentiate between these two terms and

00:55.270 --> 00:57.140
you'll see how in a second.

00:57.460 --> 01:02.600
So in the models folder, in the backend folder, I'll add a new file and I'll name it

01:02.600 --> 01:09.880
post.js because here I want to create my post model using mongoose. For that I'll first of all import

01:09.910 --> 01:16.600
mongoose, const mongoose by using that require syntax where I require the mongoose package

01:16.600 --> 01:21.380
of course. Now with that imported, we create a so-called schema,

01:21.390 --> 01:23.110
that is how mongoose works,

01:23.110 --> 01:27.970
you first of all create a blueprint for how your data should look like.

01:28.200 --> 01:30.480
So I'll create a new constant and name it

01:30.510 --> 01:31.920
post schema,

01:31.970 --> 01:37.590
the name is up to you though, you could name this constant however you want and then I'll use the imported

01:37.590 --> 01:38.940
mongoose package

01:39.150 --> 01:46.030
and there we actually have a schema method we can call with a capital s, that's important.

01:46.380 --> 01:49.800
So I will call schema here and to schema,

01:49.830 --> 01:51.750
we pass a javascript object,

01:51.750 --> 01:55.260
this object will hold our custom configuration.

01:55.260 --> 01:59.120
Now how does such schema configuration look like?

01:59.430 --> 02:07.650
Well we define the fields and the types of data we want to store in these fields, our posts in this case

02:07.920 --> 02:09.000
should have.

02:09.360 --> 02:16.380
So we simply add a property here, title and that is named title because I want it to be named title because

02:16.380 --> 02:18.480
we also named it title on the frontend,

02:18.600 --> 02:25.020
you could of course name this however you want, title and then the type. In its easiest form, you can just

02:25.050 --> 02:26.470
add string as a type

02:26.480 --> 02:30.150
here, just one important note, here in nodejs,

02:30.180 --> 02:36.460
it's a string with a capital s, on the frontend in typescript, it's with a lowercase s.

02:36.480 --> 02:40.430
Now don't confuse these two, typescript lowercase s,

02:40.470 --> 02:44.520
nodejs and javascript in general, uppercase s.

02:45.060 --> 02:49.980
So this is the simplest form of defining the title but mongoose actually gives you more power than that,

02:50.220 --> 02:56.640
you can pass more details than just the type by passing a javascript object as a value for this title

02:56.640 --> 02:57.240
prop

02:57.660 --> 03:01.570
and there you can now define the type which again is string

03:02.070 --> 03:09.450
but then you can also add some extra metadata, like for example you could say required true.

03:09.880 --> 03:12.250
Now you can learn more about that in the mongoose docs, if

03:12.300 --> 03:18.790
you click on read the docs, then you actually see a nice introduction to that whole schema thing and

03:19.000 --> 03:25.990
in general how mongoose works and you can learn more about schemas and what you can add there, then you

03:25.990 --> 03:34.220
can click on schema type here or on the left, schema types and then if you scroll down a bit, you see

03:34.220 --> 03:37.210
that here, one schema type is required.

03:37.340 --> 03:38.800
Another one would be default

03:38.800 --> 03:42.510
for example, you could provide a default value here.

03:42.680 --> 03:45.790
That of course does not really make sense if you have required set to true

03:45.860 --> 03:50.110
but if it's not required, then you could provide a default value like hello.

03:50.360 --> 03:55.580
Of course this does not make sense here, instead I want the user to enter the title but I do require

03:55.580 --> 04:02.600
this and therefore we will actually get an error if we try to create this without having a title

04:02.610 --> 04:07.950
property set, more on creating database on that schema later.

04:08.000 --> 04:13.670
So title is one thing, the content is another field and it's a bit boring but it looks exactly the same,

04:13.670 --> 04:15.640
it's also required true

04:15.800 --> 04:22.580
and of course feel free to leave out required and instead set a default value for one of these fields

04:22.670 --> 04:25.410
but for now this is the schema I want to work with,

04:25.430 --> 04:29.240
we'll later revisit this and work on it a bit more.

04:29.240 --> 04:34.340
Now with that schema defined, mongoose needs a so-called model to work with it.

04:34.340 --> 04:39.860
The schema is really just the blueprint, not the thing we work with in our code,

04:39.860 --> 04:49.130
just the blueprint. In order to actually create data or create models objects based on that definition

04:49.130 --> 04:49.620
here,

04:49.790 --> 04:53.020
we need to turn that definition into a model

04:53.270 --> 05:00.530
and we do that by using the mongoose model function. There we passed two arguments, the first one is

05:00.530 --> 05:06.110
the name of the model and here this should be post in our case, the name is up to you but it should start

05:06.110 --> 05:11.080
with an upprcase character and it should of course make sense for the kind of data you are storing,

05:11.090 --> 05:15.320
so here I'll name it post and the second argument is the schema you want to use,

05:15.320 --> 05:17.820
so in my case the post schema.

05:18.050 --> 05:22.620
Now it's important that I of course also want to use this outside of this file,

05:22.640 --> 05:28.270
so it's this model which I'll export with the help of the module.exports syntax.

05:28.280 --> 05:34.460
Now this mongoose model can be used outside of this model file.

05:34.520 --> 05:39.850
So with this setup, let's use it in the app.js file

05:39.890 --> 05:43.100
when we do send a post request to API posts.
