WEBVTT

00:02.260 --> 00:06.450
We get that working chain where we add new post and output it here,

00:06.640 --> 00:09.820
now it's time to make our first little optimisation.

00:10.180 --> 00:14.540
As you might have seen, we are using posts in different places,

00:14.560 --> 00:19.520
we got our list of stored posts here in the app component, we're outputting posts

00:19.540 --> 00:23.410
obviously in the post-list.component and we're creating posts here now.

00:23.440 --> 00:28.960
We ensure that they always have the same structure, title content, we do this when we create them and

00:28.960 --> 00:32.020
we rely on this structure when outputting them,

00:32.110 --> 00:36.990
we're referring to post title, post content, so mistaking the creation would not be that good.

00:37.300 --> 00:42.250
Additionally here in the app component, we actually just say we have an array,

00:42.250 --> 00:43.690
we could store anything in here,

00:43.720 --> 00:47.670
we could store numbers in here and of course we are writing our application,

00:47.680 --> 00:53.470
we probably don't mess up on purpose but if we're working in a team or if we're coming back to that

00:53.470 --> 00:59.140
application after some weeks or months, we might have a hard time figuring out immediately which kind of

00:59.140 --> 01:00.230
data we stored there,

01:00.310 --> 01:07.710
was it post.content or post.description, so it makes sense to create some models,

01:07.720 --> 01:15.700
so basically blueprints, contracts which define how a post looks like in our angular application. And

01:15.700 --> 01:17.470
I'll do that in my posts folder,

01:17.470 --> 01:24.670
I'll add a new file in there, not a folder, just a file and I'll name this post.model.ts, so the typescript

01:24.670 --> 01:26.020
file and in there

01:26.020 --> 01:29.740
I'll use another typescript feature, a so-called interface.

01:29.760 --> 01:37.030
An interface is like a class that defines how an object looks like but it can't be instantiated,

01:37.030 --> 01:38.820
it's more like a contract,

01:38.920 --> 01:44.620
we can use it to create our own type, to force a certain object to look like this even though we can't

01:44.620 --> 01:49.830
directly create it based on the interface and here I'll name this post.

01:49.990 --> 01:56.850
Now we create it like that and in there what we can do is we can now define the fields and methods

01:56.860 --> 02:04.670
this should have. And I want to have a field title which should be of type string assigned with a colon

02:05.360 --> 02:08.620
and I want to have another field content which also be a string

02:08.810 --> 02:13.040
and this ensures that we got a clear definition of how a post looks like

02:13.040 --> 02:19.880
in our application. Now of course an interface in this file isn't that useful, so I add export to make it available

02:19.970 --> 02:25.710
outside of this file too and now we can import this in all the files where we're using this,

02:25.820 --> 02:36.110
so in the app component for example, we can now add an import, import post from and then simply go to posts and import it

02:36.110 --> 02:42.410
from the post model file without the extension as always and now we can say that stored posts is an

02:42.410 --> 02:48.000
array of posts by adding a colon here and then post square brackets.

02:48.020 --> 02:53.840
This is typescript syntax for saying we got an array of posts in there and now if we would try to add

02:53.890 --> 02:58.980
a three, we actually get an error that a three is not a post.

02:59.090 --> 03:00.970
So this is pretty cool, we get a warning here,

03:00.980 --> 03:04.400
we would also get a warning if we try to save this and compile this,

03:04.610 --> 03:08.210
of course we get other places where we use the post too, in the post

03:08.260 --> 03:12.680
list here, we got another list of posts, so here it's the same thing,

03:12.860 --> 03:21.200
we import posts from go up one level, post model and then assign a type here and say we got a list of

03:21.200 --> 03:22.780
posts.

03:23.030 --> 03:27.320
And finally in the post create component, there too

03:27.440 --> 03:35.740
I want to import my posts type so to say from post model,

03:35.770 --> 03:39.600
whoops, post model like this

03:39.600 --> 03:46.660
and then whenever we create a new post, this will actually be of type post.

03:46.700 --> 03:52.910
We can be very clear about this and we can even be clear about the data we're going to emit,

03:52.910 --> 04:00.200
event emitter is a so-called generic type which simply means we can pass additional information about

04:00.530 --> 04:01.850
which type of data

04:01.850 --> 04:09.170
it works with and the event emitter works with data in the sense of it emits data and that data will be

04:09.170 --> 04:12.530
a post, so we can add lower than, greater than signs,

04:12.530 --> 04:16.820
that is how you define such a generic type, post.

04:16.820 --> 04:24.850
Now we're saying data we emit will be a post and now we're pretty safe because now if we ever try to emits

04:24.860 --> 04:30.800
different data or do something else, we would get an error and therefore now we can come back to

04:30.800 --> 04:33.550
that code and quickly see how a post looks like.
