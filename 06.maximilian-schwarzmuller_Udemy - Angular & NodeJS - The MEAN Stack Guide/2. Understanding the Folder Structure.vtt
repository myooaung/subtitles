WEBVTT

00:02.380 --> 00:09.100
I'm back in that first angular app we created in the first course module, there we haven't changed that

00:09.100 --> 00:12.140
much, just added this line in the app component

00:12.340 --> 00:17.120
and now I will build up on that project and use it for our min project.

00:17.170 --> 00:24.220
Now first of all let's understand this folder structure a bit better and let's understand how an angular

00:24.220 --> 00:27.070
application actually starts.

00:27.070 --> 00:28.490
For that, I need to start it

00:28.540 --> 00:35.620
so I'll bring up my terminal, integrate it into my IDE here and run ngServe to start that build process

00:35.650 --> 00:41.120
which we should keep on running and which also starts this development server where we can preview

00:41.130 --> 00:43.070
our angular application.

00:43.070 --> 00:45.160
Here it is, not that spectacular

00:45.160 --> 00:45.960
to be honest

00:46.090 --> 00:49.710
but we'll add a lot more to it very soon.

00:49.760 --> 00:56.260
Now to understand how it starts, let's have a look at its source code actually and if we inspect that

00:56.260 --> 01:01.000
source code, what we can see is that we don't see a lot, do we?

01:01.060 --> 01:04.200
We've got a basic html5 skeleton

01:04.510 --> 01:11.110
and then we got a bunch of script imports at the bottom, that clearly is important but that's roughly

01:11.110 --> 01:11.310
it,

01:11.310 --> 01:13.370
there is no content on this page

01:13.420 --> 01:16.480
and yes our page doesn't have that much content on it,

01:16.540 --> 01:23.170
it's only our first app but at least this text should be visible right, but we don't see that text here.

01:23.440 --> 01:28.560
Instead we just have app route here and this is an important thing,

01:28.580 --> 01:32.840
this is not a default html tag or element,

01:33.070 --> 01:40.080
this clearly has to be related to our angular application, as do all these scripts imports down there

01:40.450 --> 01:42.760
and that's exactly what's happening.

01:42.910 --> 01:47.680
If we go back to our application, we can clearly see that what we see on the page is the content of

01:47.680 --> 01:49.970
the app component html file 

01:50.230 --> 01:56.350
and that really is important because angular thinks in components and what we do here is we build our

01:56.350 --> 01:57.520
own components

01:57.610 --> 02:06.260
or you could say our own html elements. What we loaded, the page we loaded actually was this index.html

02:06.320 --> 02:09.280
file and there we see that app root right,

02:09.280 --> 02:10.980
we covered that before.

02:11.020 --> 02:14.050
Now the script imports are missing here because they're injected

02:14.170 --> 02:17.040
but it's this app root element that is loaded

02:17.090 --> 02:19.700
and as you already learned, this is our own component,

02:19.750 --> 02:25.010
here is the selector, our own html tag we assign so to say.

02:25.330 --> 02:31.390
So this is how this is roughly connect that and the cli in this build process which we have up and running

02:31.690 --> 02:38.050
takes our code, bundles it up, adds all the angular logic from the angular framework to it and therefore

02:38.050 --> 02:42.970
creates a bunch of script files which we don't see here because it's loaded in memory for development

02:43.480 --> 02:47.560
and injects these script file imports into the index.html file

02:47.700 --> 02:52.750
and what's happening there in the end is that this actually then detects this app root element and

02:52.750 --> 02:59.650
swaps it with the content of our component and content is not just the visual part, the html part,

02:59.680 --> 03:06.080
it would also be any logic we have here and we will add a lot of logic throughout this course of course. So

03:06.070 --> 03:08.200
that is how we connect these two things

03:08.200 --> 03:16.390
but where is this swapping logic defined, where do we tell the browser that this is our own tag so to

03:16.390 --> 03:22.860
say? Well we get two other important files for that, the app module is one important file,

03:22.900 --> 03:26.580
this essentially is a file which is important for angular,

03:26.680 --> 03:34.870
it defines the features our angular application has because angular thinks in applications and applications

03:34.930 --> 03:41.730
are split up in modules or in this case in one module and that module defines the building blocks of

03:41.730 --> 03:48.370
our application and components are not the only but probably the most important building block of an angular

03:48.460 --> 03:49.780
application.

03:49.780 --> 03:56.590
And what we're doing here in this app module is we're declaring the app component, this is registering it with

03:56.680 --> 03:57.300
angular,

03:57.310 --> 03:59.860
so now angular is aware of the app component

04:00.250 --> 04:07.270
but this alone would only allow us to use that component selector in other angular components, not in

04:07.270 --> 04:07.920
the index.html

04:08.010 --> 04:08.910
file.

04:09.280 --> 04:12.800
This is allowed by adding it to the bootstrap array too

04:13.030 --> 04:18.910
and we typically only have one component in there because we only have one root component in a typical

04:18.910 --> 04:25.580
angular application and all other components would be somehow nested in that root component

04:25.630 --> 04:29.700
and this is also how we will build our application in this course.

04:29.920 --> 04:36.640
So we get that bootstrap array which essentially tells angular that it should search the index.html

04:36.700 --> 04:44.440
file which is loaded or in general the page in which the angular app is loaded for the app component identified

04:44.590 --> 04:46.970
by its selector.

04:46.990 --> 04:51.720
Now the only remaining thing is what actually starts the angular application

04:52.000 --> 04:54.380
and that is the content of the main.ts file,

04:54.460 --> 04:57.820
this is executed first and that is simply how it's defined,

04:57.820 --> 05:04.680
you don't define that, this is what angular does or how the cli packages up our files in the end. The code

05:04.680 --> 05:06.210
in here will execute first

05:06.360 --> 05:10.320
and what we're doing here mainly is executing this line.

05:10.440 --> 05:15.000
We import a bunch of stuff because for typescript to use a certain feature in a file, we need to import

05:15.030 --> 05:15.340
it

05:15.450 --> 05:23.160
so the typescript knows where the code for that feature is located and then we have this line here which

05:23.160 --> 05:28.500
uses an angular feature, platform browser dynamic, that's a function, we execute that,

05:28.560 --> 05:33.990
it essentially starts the angular application in the browser and angular is a browser side framework

05:33.990 --> 05:35.810
so that seems to be important

05:35.970 --> 05:39.410
and then we call another function on an object

05:39.450 --> 05:43.720
this first function seems to return and that's the bootstrap module function

05:43.890 --> 05:46.430
and there we pass a link to our own module,

05:46.590 --> 05:51.600
the app module which is located in the app module file. We pass this as an argument

05:51.750 --> 05:58.050
and this essentially tells angular start your angular application and start it with this module in

05:58.050 --> 05:58.650
mind,

05:58.800 --> 06:05.520
so now angular parses this modules so to say, registers these components which are declared, imports some

06:05.520 --> 06:11.400
other modules because there are some modules angular ships with like the browser modules which contain

06:11.400 --> 06:14.140
some core features of the angular framework

06:14.430 --> 06:20.790
and last but not least, it detects a bootstrap array and then looks on the page it's running on for the

06:20.790 --> 06:27.270
selector of this component. And this is how the angular application starts, how it detects the building

06:27.270 --> 06:33.900
blocks that make up that application and how we in the end see our first app on the screen because we

06:33.900 --> 06:38.120
use our own component which is understood and used by the angular framework.
