WEBVTT

00:02.230 --> 00:07.100
We're able to update the post, I will no longer console log that on the server

00:07.270 --> 00:12.850
but what I want to do is we are returning the message that we were successful right

00:12.910 --> 00:19.000
and on the frontend in the post service where we send that http request, there, we got all the data

00:19.000 --> 00:22.450
we need to update the post on the frontend too.

00:22.660 --> 00:29.510
Now as I said, this is kind of redundant here because the only place where we use the posts is the messages,

00:30.010 --> 00:36.340
well the root page and there we always fetch a new copy anyways but I still want to show you how you

00:36.340 --> 00:38.550
can locally update the post

00:38.680 --> 00:46.600
once you've got that success response here. Now we could do this by taking the post we got there anyways

00:46.930 --> 00:54.310
and then simply replacing the current version of that post in our posts array with that version. For that

00:54.340 --> 01:00.580
I'll first of all clone our post array and store it in an updated posts constant,

01:00.580 --> 01:02.620
there I'll store this posts,

01:03.480 --> 01:08.690
then I'll search for that old post version by its ID,

01:09.000 --> 01:22.150
so I'll search for the index, old post index will be updated posts find index, find index takes a function

01:22.170 --> 01:26.200
that will return or should return true if we found the posts we're looking for,

01:26.200 --> 01:31.000
so here I'm checking whether the posts or the ID of the post I'm looking at in that array,

01:31.120 --> 01:38.290
if that is equal to the post ID, so of the ID of the post we updated. If it's equal then I found

01:38.320 --> 01:40.910
the index of the post I want to replace,

01:40.930 --> 01:45.240
so then I can say updated posts for that old post index,

01:45.250 --> 01:47.960
replace that with my new post

01:47.960 --> 01:49.700
here, so with this post,

01:50.140 --> 01:58.090
once all of that is done I can say this posts equals updated posts and now we get an immutable way of

01:58.150 --> 02:00.040
updating the old posts.

02:00.040 --> 02:05.260
Now I just need to tell my app about it by sending this,

02:05.290 --> 02:12.080
well this event through the subject again and here I send a copy of my updated posts with it.

02:12.190 --> 02:18.520
So now we're doing this locally, even though again it's not that important in our current setup but I

02:18.520 --> 02:21.280
still want to do it like that,

02:21.450 --> 02:30.360
now as a next step, I also want to make sure that if we are on the edit page and we reload, we don't have

02:30.360 --> 02:36.960
that blank form again because we failed to fetch the post and we do fail because if we reload, all our

02:36.960 --> 02:43.650
state is lost, the app restarts and therefore our posts array in the service will be empty because we only

02:43.650 --> 02:49.530
fetch posts from the server with get posts which is only called in the post list component

02:49.680 --> 02:55.500
but if we reload on this page, we will not have visited this component yet. So therefore we also need to

02:55.500 --> 03:00.270
get that single post data from the server on this page and

03:00.300 --> 03:03.810
we can do this by well adding a new method,

03:03.810 --> 03:11.100
we actually have a method already, get post and we can recycle that to not get the posts from our local

03:12.510 --> 03:17.120
array of posts but instead, to get it from the server.

03:17.370 --> 03:23.660
So let's go back to our app.js file or our server side code and let's actually add a new route

03:23.660 --> 03:32.050
there, app and then it's, it will be a get request so let's use the get method and it'll be a get request to API

03:32.100 --> 03:34.630
posts for a given ID,

03:34.710 --> 03:42.360
so again a dynamic parameter to fetch a post with that ID, then we have the method we already know and

03:42.360 --> 03:44.050
love

03:44.270 --> 03:50.900
and in here I want to reach out to my database and find a post with that ID and it's actually super

03:50.900 --> 03:54.950
easy to find that, we can use the post model for that

03:55.130 --> 04:01.980
and there we have a find by id method and as the name suggests, we simply pass an ID as an argument here

04:02.240 --> 04:08.000
and mongoose will have a look at our database and find an element with that ID in there.

04:08.240 --> 04:17.780
So we just pass request params ID here to refer to that encoded ID from our url and then we add the then block

04:18.170 --> 04:24.740
where we will get an argument, our post which we fetched and in here, we first of all should check if

04:24.740 --> 04:26.570
post exists,

04:27.450 --> 04:36.510
if it does not exist then I want to return a response with a status code of 404 and a json document

04:36.510 --> 04:43.380
where we might have a message like post not found because we failed to find a post for that ID

04:43.800 --> 04:50.440
but otherwise I will return a response with a 200 code where we actually also return json

04:50.460 --> 04:57.870
data and that json data could simply be our post or another object with a property post where you then

04:57.870 --> 04:59.410
store this.

04:59.460 --> 05:02.580
So now we're returning the post here from the database,

05:02.640 --> 05:07.220
we just need to call that from our client now and we do that here.

05:07.260 --> 05:09.690
Now we will have one problem though, right now

05:09.690 --> 05:12.000
get post returns a post,

05:12.090 --> 05:18.450
well it will not be able to do that anymore because if we make a http call here, that'll be an asynchronous

05:18.450 --> 05:22.380
code and you can't return inside of a subscription,

05:22.410 --> 05:24.300
you need to return synchronously,

05:24.420 --> 05:29.290
so that means you can't return in a place which will run sometime in the future.

05:29.370 --> 05:31.330
So what I'll do here instead is

05:31.350 --> 05:37.920
I will still return something but I will return the observable we're getting from the angular http

05:37.920 --> 05:44.140
client so that we can subscribe in the component where we are interested in that data.

05:44.520 --> 05:45.190
So here,

05:45.390 --> 05:56.620
I will then return this http get and send a get request to that same url we used here for

05:56.620 --> 06:01.340
updating the post with that ID which we're getting as an argument here too,

06:01.820 --> 06:08.310
so send that get request there and return the result of this get request which is our observable.

06:08.410 --> 06:10.230
Now we won't subscribe here,

06:10.390 --> 06:15.760
instead we'll now subscribe in the post create component. There

06:15.760 --> 06:24.040
we won't assign this post like this but instead here, we can now set up a subscription which we also don't

06:24.040 --> 06:29.650
need to unsubscribe from because it's added by the angular http client therefore angular takes care

06:29.650 --> 06:30.380
about it

06:30.730 --> 06:35.500
and here we know that eventually we'll get our post data

06:37.960 --> 06:42.250
and therefore here we can set this post equal to

06:42.550 --> 06:50.230
and now that's important to a new javascript object where we set the ID equal to post data_id

06:50.230 --> 06:56.380
because remember this is data coming from the database and there it's stored in an _id

06:56.380 --> 07:05.780
thing and then also the title equal to post data title and the content equal to post data content.

07:06.010 --> 07:11.380
And now I get all these red squiggly lines because I forgot one thing in the post service, we can be

07:11.380 --> 07:17.980
explicit about the type of data we get back, here get is a generic method and we can let typescript know

07:18.250 --> 07:26.560
that we get back an object which will have an ID property that is a string or which will have a title

07:26.560 --> 07:32.570
which is a string or that will have a content which is a string like this.

07:35.420 --> 07:37.690
Now this will work in post create too,

07:37.730 --> 07:40.170
now we initialize the posts like this.

07:40.400 --> 07:41.330
Let's give this a try,

07:41.330 --> 07:47.990
let's save that, back on the page if I reload,

07:48.010 --> 07:54.400
it seems to work but we also get an error that we can't read property title of undefined. The reason for

07:54.400 --> 07:55.120
this is

07:55.120 --> 07:59.380
eventually we will have the post data but not right from the start

07:59.380 --> 08:03.280
because this http request takes some time to be executed.

08:03.310 --> 08:09.740
However post initially is undefined and we try to read a value from it here with ngModel

08:09.790 --> 08:16.280
right from the start, this can be fixed by using the so-called elvis operator. In the template,

08:16.280 --> 08:23.380
add a questionmark after post and this will force angular to check whether post exists before it

08:23.380 --> 08:27.880
tries to read the title and it will populate this field with nothing

08:27.910 --> 08:34.660
if the post does not exist and the same down there for the content. With this if you save that, the page

08:34.660 --> 08:37.280
will reload and we don't see an error

08:37.540 --> 08:44.840
and now if I add a lot of exclamation marks here and I hit save and I go back, we see this is our post here.

08:44.920 --> 08:46.540
So now this is working,

08:46.540 --> 08:53.590
one important note though, our updating mechanism here in update post in the posts service where we

08:53.590 --> 08:55.590
replace the old post with that ID,

08:55.750 --> 09:01.600
well that will actually not work, it will just do nothing here because of course if we never visited

09:01.600 --> 09:07.460
our post list page, well then we won't have any posts in that array so there is nothing to update.

09:07.630 --> 09:09.320
So it will not fail but

09:09.340 --> 09:12.760
we load the updated list anyways when we visit that page,

09:12.760 --> 09:15.020
it's just something for you to keep in mind.

09:15.840 --> 09:18.880
So with that, we're now able to edit posts too. 
