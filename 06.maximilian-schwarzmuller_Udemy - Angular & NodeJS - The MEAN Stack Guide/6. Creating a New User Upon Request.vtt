WEBVTT

00:02.310 --> 00:08.800
So with the user model created, let's create a new user whenever we get a new request reaching this route

00:08.850 --> 00:18.840
here. For that I will import my user model, so I will create a new constant and require, well my user model

00:18.840 --> 00:21.420
in the models folder.

00:21.480 --> 00:26.790
Now here in the sign-up method, I expect to get e-mail and password as part of my request.

00:27.060 --> 00:33.510
So what we can do is we can create a new user with new user using our model, passing a javascript object

00:33.540 --> 00:38.880
to it to configure it and there I will set an e-mail property because my user model has an e-mail

00:38.880 --> 00:39.730
property

00:39.840 --> 00:42.540
and then also the password property as a next step.

00:42.720 --> 00:49.140
So setting the e-mail property to request body e-mail and I simply expect to have that property on

00:49.140 --> 00:50.970
the request body.

00:50.970 --> 00:58.910
Now for the password, we can do request body password and this now would be super bad,

00:58.920 --> 01:05.100
do you know why? Well we would store the password unencrypted,

01:05.100 --> 01:14.280
so in raw form. If anyone ever has access to our database, he can read all the user passwords in raw form

01:14.340 --> 01:17.890
and we for example as the creator of this app could do so

01:17.890 --> 01:21.950
too. Well that's not great because a lot of users reuse passwords,

01:22.050 --> 01:25.940
so we probably can then even access their e-mail accounts or anything like that,

01:25.980 --> 01:32.240
leave alone the accounts on this page. So definitely don't store the password as this,

01:32.280 --> 01:36.970
instead you want to hash it, you want to encrypt it in a way that can't be decrypted,

01:37.050 --> 01:38.780
so that can't be reversed,

01:38.820 --> 01:42.670
I will still show you how you can then confirm it for login.

01:42.900 --> 01:49.500
So to do that, I'll again quit my Node server and install another package with npm install --save

01:49.500 --> 01:50.810
.

01:51.020 --> 01:54.450
The package I want to install is called bcrypt,

01:54.680 --> 02:02.100
that is a package that offers encryption functionalities which we can use in NodeJS. Once it is installed,

02:02.240 --> 02:04.720
we have to import it in our user route,

02:04.760 --> 02:11.840
so there I add a new import, const bcrypt or any name you like and we simply require bcrypt, like

02:11.840 --> 02:15.920
this. Now we can use it here in the user sign-up

02:16.060 --> 02:22.390
and of course I want to use it to simply, well create a new user with that. To do that,

02:22.390 --> 02:24.090
I'll use my bcrypt package

02:24.190 --> 02:26.650
and there we have a hash method.

02:27.010 --> 02:32.760
This hash method takes an input and that is the value we want to hash, so we want to encrypt

02:32.770 --> 02:36.750
basically, that would be the request body password.

02:36.820 --> 02:39.960
We then pass the salting rounds

02:39.970 --> 02:46.060
and that simply means the higher the number here, the longer it will take but the safer it will be because

02:46.060 --> 02:53.690
it uses mathematics basically to generate a random number and to generate a hash which is secure.

02:53.800 --> 03:00.040
Now for that, I'll use 10 which is a value high enough to yield a secure hash and not take infinitely

03:00.040 --> 03:01.520
which you also don't want

03:01.840 --> 03:05.480
and then we got a callback which will fire whenever it is done.

03:05.620 --> 03:13.930
Alternatively we chain a promise, so we use a then here, then will simply yield us the hash once it's

03:13.930 --> 03:14.440
done.

03:16.000 --> 03:17.940
So it's inside this then block that

03:17.950 --> 03:23.740
we then want to create a new user and for the password, we will not store the raw password but the generated

03:23.740 --> 03:25.360
hash.

03:25.390 --> 03:29.500
Now with that, we got a user object which has the password encrypted

03:29.800 --> 03:35.800
and now we can you simply call user save to save the user to the database and then be informed when

03:35.800 --> 03:37.070
this succeeded,

03:37.180 --> 03:39.480
so here in this callback, here in the then block,

03:39.580 --> 03:44.960
we know the user will be saved and then we can send or create a response where we set the status code

03:44.960 --> 03:54.400
to 201 because we created a new user and where we send back some JSON data. For example, we can send

03:54.400 --> 04:02.150
back a message, user created and maybe the result data so that we can see what's inside there.

04:02.170 --> 04:09.210
I also will add a catch block here because whilst I won't add all the error handling logic yet,

04:09.430 --> 04:14.470
I want to show you what happens if we try to add a user which actually has an e-mail address

04:14.470 --> 04:16.420
we already got stored in the database.

04:16.600 --> 04:26.260
So here I will send back a status of 500 and a JSON message where I have my error which holds the error

04:26.440 --> 04:29.320
I'm getting.

04:29.330 --> 04:34.440
So this is now my set up where I hash the password and then I save the user

04:34.670 --> 04:39.850
and with that, we should be able to create new users and store them in our database,

04:40.010 --> 04:43.340
well at least as soon as we connected Angular.

04:43.340 --> 04:50.300
So let's restart our Node server and in the next lecture, we will connect Angular to our back-end. Now

04:50.390 --> 04:52.520
actually before I switch,

04:52.520 --> 04:54.070
I'm getting an error here,

04:54.200 --> 05:01.760
I'm getting an error which tells me that a cyclic dependency was detected, it turns out this seems to

05:01.760 --> 05:02.990
be a bug with Mongoose.

05:02.990 --> 05:05.720
Now if you're not getting this error, everything's fine,

05:05.720 --> 05:14.660
you can ignore this. A fix is to go to app.js and on that MongoDB link here to your back-end database,

05:14.960 --> 05:21.690
remove retry rewrites true, remove that query params, it's not required

05:21.800 --> 05:24.100
and with that, it should restart without the error.

05:24.110 --> 05:26.130
Now with that, back to Angular,

05:26.180 --> 05:27.550
let's continue working there.
