WEBVTT

00:02.750 --> 00:09.790
In the last lectures, we deployed our app by deploying it as two separated apps, back-end and Angular app,

00:10.280 --> 00:14.140
we can also deploy it as one app though. For that,

00:14.150 --> 00:20.110
let's first of all make sure that we build our Angular app as a folder into our back-end folder, so that

00:20.120 --> 00:25.900
we just deploy the entire content of the back-end folder as one single app. For that we can go to the

00:25.920 --> 00:30.330
angular.json file which is used by the CLI to configure our project

00:30.620 --> 00:36.950
and there, we can change the output path for when we are building our application,

00:36.950 --> 00:39.480
we can do that here under output path.

00:39.500 --> 00:43.240
Let's change this to back-end Angular,

00:43.280 --> 00:45.980
you can name this whatever you want.

00:45.980 --> 00:53.690
Now with that, if you run ng build --prod, it should build that Angular app into a sub-folder

00:53.780 --> 00:59.040
of your back-end folder, so into that Angular sub-folder that should be created there.

00:59.120 --> 01:01.910
Of course make sure to choose a folder which doesn't exist yet,

01:01.910 --> 01:07.560
so using controllers would not be ideal because you would delete your existing code.

01:07.730 --> 01:15.000
Now once it's done, you have that new Angular folder here which contains the compiled application

01:15.410 --> 01:22.040
and now we just need to adjust our code here to serve that application successfully.

01:22.040 --> 01:25.090
It would be an idea to serve our Angular app

01:25.130 --> 01:29.940
if we're getting a request which is just targeting slash nothing.

01:30.290 --> 01:35.960
So if we have requests targeting API posts or users, we forward them to these routes,

01:36.110 --> 01:43.490
if we have a request targeting anything else actually, then I want to handle that with Angular

01:43.490 --> 01:49.670
let's say, that setting is especially important by the way because you want to ensure that the Angular

01:49.670 --> 01:56.510
router can take over and if you only forward requests targeting slash to the Angular app, then you

01:56.510 --> 02:01.630
would not be able to handle the cases where the user directly enters /auth/

02:01.640 --> 02:07.490
for example and you don't want to manually set up all these paths here to map them to a Angular

02:07.490 --> 02:08.070
page,

02:08.270 --> 02:12.370
instead you always want to return that Angular index.html file,

02:12.380 --> 02:18.220
so this file, you always want to return that if it is a route you are not recognizing otherwise,

02:18.230 --> 02:21.200
so if it's not one of your API routes basically.

02:21.350 --> 02:28.490
That also means that you must not use a path you have defined here in your Angular app with the Angular

02:28.580 --> 02:34.010
router because it will never reach the Angular router because it would be handled by the back-end first,

02:34.280 --> 02:40.280
that's important to keep in mind. All other requests should be handled though and therefore, we simply

02:40.280 --> 02:42.170
don't need a filter here.

02:42.270 --> 02:48.500
Instead whenever we reach this part here which we don't if we make it into one of these routes, then

02:48.560 --> 02:50.500
I want to return the Angular app.

02:50.510 --> 02:55.090
So here I defined my well-known function with request, response,

02:55.270 --> 02:58.480
next, here I want to send back a file,

02:58.490 --> 03:00.230
the index.html file.

03:00.260 --> 03:07.620
So here I can call send file and here, I just want to select that index.html file

03:07.690 --> 03:13.780
and here we have to define an absolute path which I'll do with the help of the path package here.

03:14.140 --> 03:21.250
So I will create a path by using path join here and I'll join the Angular folder with the index.html

03:21.250 --> 03:23.940
file there, 

03:24.010 --> 03:30.490
this should forward that file for any request not targeting any of our API routes and we can test this

03:30.500 --> 03:35.720
locally by running npm start, npm run start server.

03:35.770 --> 03:42.270
This will spin up the Node server and we can test it by opening a new tab and visiting http://www.localhost:3000

03:42.460 --> 03:47.560
because that is our local testing domain of the Node express app and now that we're serving everything

03:47.560 --> 03:49.780
from one server,

03:49.780 --> 03:51.240
this is the way to test it

03:51.610 --> 03:58.900
and here it's not working because I forgot something, we need to start with dirname which is the absolute

03:58.900 --> 04:04.660
path to this folder which is important to have a valid path in the first place.

04:04.690 --> 04:09.030
So add this and then let it reload and now reload that page and

04:09.080 --> 04:13.270
we now got an empty page here and the reason for that is that

04:13.270 --> 04:20.190
we do get back our Angular application, as you can tell if you reload with the network tab opened.

04:20.560 --> 04:26.440
You do get that index.html file with the app root element but all the scripts are not loaded

04:26.440 --> 04:29.050
correctly because we need to do one other thing,

04:29.200 --> 04:34.990
we need to allow static access to the Angular folder, just as we did it for images earlier in the course.

04:35.630 --> 04:38.870
So we can copy that line for accessing images

04:39.010 --> 04:40.180
but here important,

04:40.480 --> 04:43.690
we actually want to forward requests going to just slash

04:43.690 --> 04:50.830
nothing because we're going to serve Angular for any other route. So we don't want to make any assumptions

04:50.830 --> 04:55.990
about the route, it should fake as if it were serving that from the root folder

04:56.170 --> 04:59.890
but then it should be reaching out to the Angular folder.

04:59.890 --> 05:04.240
Additionally we have to join dirname and Angular and

05:04.270 --> 05:07.400
we should also do that on images by the way. Here for Angular,

05:07.410 --> 05:09.420
this is absolutely required though,

05:09.550 --> 05:16.000
otherwise this request here can't reach or the requests sent by the index.html file I should say

05:16.190 --> 05:19.270
can't reach the Javascript files and so on it needs.

05:19.450 --> 05:22.790
So now if you save that with that updated static route here,

05:23.140 --> 05:27.090
if you reload the page, now you see the Angular app here too,

05:27.220 --> 05:30.040
so now this seems to work.

05:30.060 --> 05:33.320
So now this is the solution which we can deploy. Here

05:33.330 --> 05:37.800
we can also quickly test if we can login and so on,

05:37.800 --> 05:39.770
let's test that all locally.

05:40.060 --> 05:41.360
Let's create a new post

05:44.790 --> 05:45.510
with an image and

05:48.740 --> 05:53.420
that is working and let's delete the post so that we don't have it in the database.

05:53.420 --> 05:57.920
Now we can deploy that solution, so let's quit our local testing server

05:58.940 --> 06:01.940
and let's instead again package that all up.

06:01.940 --> 06:05.350
Now keep in mind this contains our Angular app and that's important,

06:05.420 --> 06:09.720
you always need to rebuild the app before shipping a new version to the server

06:10.130 --> 06:18.740
and then we can go back to our Elastic Beanstalk application and upload the new version, includes Angular.

06:19.630 --> 06:28.150
Choose that file from the back-end folder, that archive.zip file and deploy that version which now does

06:28.150 --> 06:36.350
include Angular and these updated settings regarding our routing or how we load Angular. This also means

06:36.370 --> 06:40.890
that we will be able to shut down S3 and not use it anymore.

06:40.930 --> 06:43.490
So let's wait for this to redeploy

06:44.220 --> 06:50.630
and now that it's done, let's click that link and here, it does load the Angular app as it should.

06:50.880 --> 06:52.530
And now let's test it here too,

06:52.540 --> 06:58.370
let's login, let's create a new post, testing this,

06:58.380 --> 06:59.640
let's pick an image

07:04.320 --> 07:06.610
and add some content

07:06.630 --> 07:11.340
and now if I save this, this also works as before,

07:11.340 --> 07:19.650
also if we edit it without editing it or edit it with editing it or if we logout and login with a

07:19.650 --> 07:24.810
different user, then we also still see this but we can't edit it

07:24.870 --> 07:29.720
but now we can add our new content here of course. Just as we could do it locally

07:29.790 --> 07:36.440
but now again on the server but now in one combined application and we can also still delete this of course.

07:36.450 --> 07:41.550
So now everything is working as it was working throughout the course but now we deployed it and it's up to

07:41.550 --> 07:46.150
you whether you choose that combined solution or the split up one.

07:46.170 --> 07:48.410
Now you typically take the one with two apps

07:48.540 --> 07:55.590
if you also plan to use your API with other client-side applications, like let's say a mobile application and

07:55.590 --> 08:02.480
you might lean towards the integrated approach with one app only if you have, well only that one app,

08:02.490 --> 08:08.280
if you've got no other clients connecting to it and if you therefore want to have everything run on one server.

08:08.280 --> 08:13.300
Keep in mind, you can now also remove these headers here.

08:13.470 --> 08:19.030
If I comment them out in the app.js file and I redeploy this,

08:19.160 --> 08:26.300
so let's compress that all again and let's again go back to our console here,

08:27.560 --> 08:33.940
to the Elastic Beanstalk console and let's choose that new archive.zip file,

08:34.010 --> 08:39.980
if I now deploy this, you will see the Angular app will still continue to work and this is only the

08:39.980 --> 08:45.030
case if you have that integrated approach because now everything is running on the same server,

08:45.260 --> 08:50.570
it would not work if you had different servers. This of course also means no one else can access your

08:50.570 --> 08:51.140
API

08:51.200 --> 08:56.180
and if that's important for you and you only got one client app that should connect to it, that would

08:56.180 --> 09:03.650
be another argument for using that integrated one app only approach. Both is absolutely fine,

09:03.650 --> 09:08.730
you see both in action and that is why it was important to me to show you both.

09:08.750 --> 09:10.750
So let's just wait for this to finish,

09:11.030 --> 09:14.780
let's reload that

09:14.970 --> 09:18.420
and there you can see if I do login again,

09:20.900 --> 09:28.410
this still works as before, we got no cors errors, the image was just missing because I redeployed the

09:28.410 --> 09:31.340
entire folder which contains the image folder

09:31.650 --> 09:34.400
and now again, we got a working application.
