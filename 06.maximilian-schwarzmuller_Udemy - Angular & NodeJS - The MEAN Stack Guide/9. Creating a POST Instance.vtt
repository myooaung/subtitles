WEBVTT

00:02.420 --> 00:09.470
So with our post schema and model created, we can use that to actually create javascript objects based

00:09.470 --> 00:14.020
on that model which ultimately allow us to do one magic trick.

00:14.030 --> 00:18.030
So first of all without the magic, let's create a post object.

00:18.410 --> 00:26.150
Thus far in our app post route here, so API posts where we handle that post request, we only extract the

00:26.150 --> 00:28.980
post data and we console log it to,

00:29.150 --> 00:30.530
well the console.

00:31.010 --> 00:35.060
Yeah that's nice but not really all we want to do right,

00:35.060 --> 00:40.520
instead it would be better if we could store it to the database and we'll use our post model for that

00:40.690 --> 00:46.710
because the post model created with mongoose will actually be the bridge from our nodejs

00:46.730 --> 00:55.340
express app and its code to the mongodb database without us writing any mongo code or anything

00:55.340 --> 00:56.350
like that.

00:56.780 --> 01:03.770
So first of all what I'll do here is I'll import something, I'll import my post model and you can name

01:03.790 --> 01:09.750
this however you want but the convention is to also use a capital starting character here to indicate that

01:09.750 --> 01:17.870
this allows you to define a new object based on, well some blueprint and that blueprint is our schema

01:17.900 --> 01:20.270
combined with the model of course.

01:20.270 --> 01:27.770
So now we can require that and we require it from that file in the models folder, so from the posts file

01:27.860 --> 01:31.060
without an extension in the models folder.

01:31.160 --> 01:33.340
So now we got that post constant here,

01:33.470 --> 01:39.860
now we can use that constant in our posts route to create a new post based on our body data.

01:39.980 --> 01:45.310
So what I'll do here is I'll actually create a new post like that, 

01:45.380 --> 01:50.600
that's pretty cool, we can instantiate this because it turns out what the model method gives us

01:50.600 --> 01:58.310
here is simply a constructor function which allows us to construct a new javascript object and to that

01:58.610 --> 02:07.330
post model here, we pass in a javascript object where we, well pass the data we need for our schema,

02:07.440 --> 02:12.930
so we pass in a javascript object which has a title and a content.

02:13.020 --> 02:19.790
So let's do that, let's pass the title here, title will be request body title because that is what we

02:19.800 --> 02:26.360
get sent to this endpoint and the content should be request body content

02:26.700 --> 02:33.720
and now we have a post object that's actually managed by mongoose and that's pretty close to being

02:33.870 --> 02:35.770
connectable to the database.

02:36.120 --> 02:43.440
So let's comment out this password which we'll need soon and let's save everything and let's restart

02:43.590 --> 02:45.110
all our servers.

02:45.330 --> 02:51.060
So remember, we bring up our nodejs server by running start server,

02:51.060 --> 02:56.550
so let's copy that, npm run start server

02:56.700 --> 03:03.760
and in a separate terminal window, we start our local angular server with ngServe.

03:04.170 --> 03:05.130
With that up and running,

03:05.170 --> 03:13.450
let's give this a try and let's add a new post here with some awesome content

03:13.460 --> 03:15.890
and let's hit that save post button

03:16.350 --> 03:19.410
and now let's go to our server side log

03:19.630 --> 03:25.500
and here, we indeed see this object is getting logged and you can already see one cool thing,

03:25.630 --> 03:32.650
it has that ID. Remember I mentioned that this would be generated automatically by mongoose,

03:32.680 --> 03:34.510
so we have that ID already,

03:34.630 --> 03:39.370
besides that it looks like a normal javascript object but actually it isn't,

03:39.370 --> 03:42.130
we can do way more with it,

03:42.130 --> 03:47.790
we can use that object to directly save it to our mongo database.

03:47.810 --> 03:49.990
There's just one thing missing,

03:50.320 --> 03:57.970
we need to have a mongo database connected to our node app and whilst we have a mongo database up and

03:57.970 --> 04:03.730
running, by now at least it should be running, this one, we haven't connected our app yet.

04:03.730 --> 04:05.980
So time to do that in the next lecture.
