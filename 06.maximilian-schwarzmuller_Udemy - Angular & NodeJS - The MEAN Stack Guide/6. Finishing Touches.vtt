WEBVTT

00:02.550 --> 00:05.020
So let's start by fixing these errors.

00:05.130 --> 00:11.880
We get these errors because we get other parts in our posts service where we actually try to pass this

00:11.970 --> 00:15.930
updated array of posts back to our components.

00:15.930 --> 00:17.860
Now we don't really need to do this here

00:17.880 --> 00:24.750
and I mentioned this earlier. Since we navigate to our post list component from another component, we

00:24.750 --> 00:28.180
are guaranteed to reload that post list component,

00:28.410 --> 00:33.210
therefore ngOnInit will execute and will fetch new posts anyways.

00:34.290 --> 00:40.290
So now we can go to posts service and simply remove everything but that navigation action in the addPost

00:40.320 --> 00:43.980
method and the same in the updatePost method.

00:43.980 --> 00:50.010
It was nice to learn how this works but it's now not required anymore because again, we go to a page

00:50.160 --> 00:51.900
where we fetch the latest version

00:51.900 --> 00:55.420
anyways. For deleting, it's a bit different,

00:55.440 --> 01:00.720
we do that from the list of posts and therefore, we actually will delete a post which we just were

01:00.720 --> 01:01.980
able to see,

01:02.040 --> 01:05.130
hence we definitely need to re-fetch data here

01:05.130 --> 01:12.300
and the most elegant way of doing this is to entirely remove the subscribe method here and simply

01:12.390 --> 01:20.350
return this HTTP call or this configured HTTP call and then subscribe in the post list component,

01:20.560 --> 01:22.210
here in onDelete.

01:22.450 --> 01:26.880
There we now get that observable and we can therefore subscribe to it

01:27.160 --> 01:34.530
and here we will actually get back or we'll be able to react to the response which is executed whenever

01:34.540 --> 01:36.170
the post was deleted

01:36.510 --> 01:41.660
and here, I simply want to execute this post service

01:41.850 --> 01:45.900
getPosts to re-fetch my posts.

01:45.900 --> 01:52.410
This of course means here I again need to pass my current page size, so post per page and my current

01:52.410 --> 01:52.950
page

01:53.040 --> 01:56.340
but that's all data we have in this component.

01:56.490 --> 01:58.220
So now we're fetching new posts

01:58.290 --> 02:03.080
once we successfully deleted a post and this is a great step forward.

02:03.390 --> 02:04.030
I of course now

02:04.050 --> 02:08.850
also want to show loading spinner once we start this deletion process.

02:09.610 --> 02:16.750
Now we're not done yet though, we get an error up here where we do subscribe to our subject and here,

02:16.810 --> 02:20.910
we're still waiting for data which is an array of posts

02:21.310 --> 02:27.160
but since we just updated our subject, we're actually getting back a Javascript object now, an object

02:27.160 --> 02:31.070
with a post property and a post count property.

02:31.150 --> 02:37.120
Therefore in the post list component, I will rename the argument to post data because this now seems

02:37.120 --> 02:38.380
to be more appropriate,

02:38.380 --> 02:46.750
it's more than just the posts and the type will be a Javascript object which has a post property which

02:46.750 --> 02:53.370
is of type post array and which also has a post count property, as defined here,

02:53.380 --> 02:55.930
post count has to be the same name.

02:55.930 --> 03:02.590
So here we get the post count property which will be a number

03:02.920 --> 03:05.740
and this means down there where we store the posts,

03:05.800 --> 03:14.030
I will store post data posts. And with that in place, we get the errors removed,

03:14.030 --> 03:16.040
now let's also use the post count

03:16.040 --> 03:22.440
then. We get our total post property here already and I will set this to zero initially

03:22.440 --> 03:30.780
now and here, I will then set this total posts equal to post count because we now really got that information,

03:30.840 --> 03:33.770
excuse me, to post data post count

03:33.890 --> 03:42.190
because we now really got that information from our back-end. And now with that added, let's go back, let's

03:42.200 --> 03:47.360
reload our application and it's again failing on the back-end,

03:47.360 --> 03:51.050
let's see what's wrong, document is not defined.

03:51.150 --> 03:54.400
So this seems to be just a typo in the posts.js

03:54.410 --> 03:55.620
file,

03:55.730 --> 04:02.770
yes in my first then query, I'm trying to store document in fetch posts but it's documents,

04:02.980 --> 04:10.260
so let's add an s there, restart the server, reload the Angular app, now this looks better.

04:10.330 --> 04:15.330
Now you see we're displaying one and two, so one to two posts of three.

04:15.440 --> 04:19.050
Now if I go to the last page, we're displaying three of three.

04:19.200 --> 04:22.180
If I go to five, then we're displaying on all three,

04:22.180 --> 04:30.050
now we only got one and if I let's say take two, for the first page and I delete one of them, then

04:30.060 --> 04:33.450
it correctly updates and now we only got two total posts,

04:33.460 --> 04:39.330
I can't switch between pages and it's showing these two posts. So this all seems to work now

04:39.540 --> 04:45.810
and with that, we get pagination implemented with the help of Angular and Mongoose Express.
