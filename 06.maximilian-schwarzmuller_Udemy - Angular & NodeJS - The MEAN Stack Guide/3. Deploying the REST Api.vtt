WEBVTT

00:02.220 --> 00:07.950
So in our project, we have the two apps and with that, I really mean the back-end and the front-end and

00:07.980 --> 00:14.110
I just squeezed that back-end into the Angular CLI project, not because we could manage it

00:14.170 --> 00:20.970
through the CLI but because that made switching between files much easier and hopefully helped you understand

00:20.970 --> 00:26.970
where I'm working in. For deployment, this can be a bit confusing though because we are not going to deploy

00:26.970 --> 00:28.260
the entire folder,

00:28.440 --> 00:34.590
instead we're going to build the Angular app and this will give us a new folder actually which we will

00:34.590 --> 00:41.310
deploy and we will deploy the server.js file and the files in the back-end folder

00:41.310 --> 00:47.770
and for that to make that less confusing, I will now actually split this up, at least a little bit.

00:48.060 --> 00:54.180
I will keep the back-end folder but I will move my server.js file into that back-end folder because

00:54.210 --> 01:00.140
now all the back-end related things are in one place. Now that will break our package.json file here

01:00.310 --> 01:02.790
where we started Nodemon with server.js,

01:03.060 --> 01:08.310
we would now have to point at ./back-end/server.js

01:08.330 --> 01:09.250
.

01:09.290 --> 01:13.600
Now if I quit both processes and I rerun npm run start server, 

01:13.970 --> 01:19.190
now this still kind of works but now it's not able to access its dependencies

01:19.400 --> 01:22.210
because now we, well move the entire file,

01:22.250 --> 01:24.500
so all the imports here are wrong.

01:24.600 --> 01:27.610
There, it's now looking for app in the wrong folder,

01:27.620 --> 01:33.260
it should look in the same folder as itself because now the app.js file is in the same folder,

01:33.260 --> 01:37.970
so let's look for ./app. With that added if I restart this,

01:38.060 --> 01:39.390
now it's working again.

01:39.890 --> 01:41.930
And now I need to add one thing here,

01:42.170 --> 01:49.310
I want to move or I want to copy, not move, copy the package.json file into the back-end folder because

01:49.310 --> 01:54.250
my back-end will need certain dependencies and Angular will also need dependencies.

01:54.620 --> 01:59.510
Let's now edit that file though. The package.json file in the back-end folder,

01:59.570 --> 02:02.480
I don't need all the Angular related scripts,

02:03.410 --> 02:08.230
I can even remove this one because for development, I'll still use the other package.json

02:08.280 --> 02:09.200
file,

02:09.290 --> 02:11.550
I'm just caring about the dependencies now

02:11.720 --> 02:18.470
because if we deploy our back-end folder later, this dependency is or these dependencies here will be

02:18.470 --> 02:24.510
used by the hosting provider which hosts our NodeJS app because pretty much all hosting providers

02:24.510 --> 02:30.530
scan that file and install these dependencies before they start your Node app because obviously,

02:30.560 --> 02:32.320
your Node app needs them.

02:32.450 --> 02:38.540
It doesn't need the Angular ones though, so we can strip these out in the back-end folder, that's important.

02:38.690 --> 02:41.740
We need bcrypt, body parser, NodeJS,

02:41.810 --> 02:46.920
that's an Angular one, we can remove that. We need Express, we need JSON Web Token, we need Mongoose

02:47.000 --> 02:48.770
and Mongoose unique validator,

02:48.770 --> 02:51.590
we need multer, we don't need these two though,

02:51.740 --> 02:57.260
these are all the Angular dependencies and we need none of the development dependencies because these are

02:57.290 --> 03:00.950
all just required by the Angular CLI,

03:00.950 --> 03:07.280
so now this is our stripped down package.json file for the back-end. I will leave all the dependencies

03:07.280 --> 03:08.540
in the front-end file

03:08.840 --> 03:15.060
but now for deployment, this file in the back-end folder will be the important one. So with that, the back-end

03:15.140 --> 03:16.340
is prepared

03:16.520 --> 03:23.360
and before we care about Angular, the front-end, let's actually deploy the back-end, so this rest API because

03:23.420 --> 03:24.940
that should work stand-alone,

03:24.950 --> 03:30.570
that's the idea behind these two separated apps and we could actually connect any front-end app, be that

03:30.590 --> 03:35.790
a mobile app or another web app to that API then. Now for deployment,

03:35.810 --> 03:37.480
we got a lot of options.

03:37.550 --> 03:40.560
You can use your favorite hosting provider,

03:40.580 --> 03:43.850
I will go with AWS since I really like AWS,

03:43.850 --> 03:49.730
I work with a lot but again, the steps in general are the same. It's this preparation which is important

03:49.880 --> 03:54.610
and it's important to simply understand that you work with,

03:55.040 --> 04:00.920
well basically with that folder structure that you need that package.json file. We can clear

04:00.920 --> 04:02.630
all the images by the way of course,

04:02.630 --> 04:07.630
we don't need these and now with that, we are prepared.

04:07.700 --> 04:13.790
So let's now go back to AWS and there, the service for deploying a Node app would be Elastic Beanstalk.

04:15.280 --> 04:20.700
This is simply a service which will automatically set up a Node server and makes it easy for us to push our

04:20.700 --> 04:22.120
code to it.

04:22.170 --> 04:24.790
Here we can click create new application,

04:24.810 --> 04:27.450
you need an AWS account for that of course,

04:27.480 --> 04:28.530
enter any name you want

04:28.530 --> 04:29.350
like Node

04:29.400 --> 04:30.480
Angular,

04:30.600 --> 04:32.970
any description you want, MEAN

04:33.120 --> 04:35.640
app and hit create,

04:35.640 --> 04:39.990
this creates the application and now you create a so-called environment there.

04:40.060 --> 04:42.830
There you define what you want to build,

04:42.960 --> 04:45.850
I want to build a web server for a website.
 
04:46.140 --> 04:47.230
You can give it a name,

04:47.250 --> 04:50.230
I'll leave the default, add a domain,

04:50.280 --> 04:55.090
I'll leave the default, add a description if you want

04:55.170 --> 05:01.530
and now for the platform, you can choose one of these pre-configured ones, like of course NodeJS

05:01.580 --> 05:03.100
in our case here

05:03.620 --> 05:11.120
and I don't want to start with a sample application but I want to start with my own code which we now

05:11.120 --> 05:12.320
have to upload.

05:12.440 --> 05:15.240
Now regarding what to upload here,

05:15.350 --> 05:18.020
this is easy to mess up so let's do it together.

05:18.380 --> 05:23.020
We go into the back-end folder and there, we select all files and that's important,

05:23.060 --> 05:25.400
go into that folder and select the files,

05:25.430 --> 05:33.430
don't select the top level folder and then simply compress them, so zip them and you can of course do

05:33.430 --> 05:34.990
that on both Windows and Mac.

05:34.990 --> 05:40.780
This will give you a zip file and it's this zip file which you now select, here you can choose a local

05:40.780 --> 05:47.500
file in the back-end folder, choose that zip file and click open and then click upload and this will

05:47.500 --> 05:54.810
now upload this zip file to your Elastic Beanstalk project or to be precise, it will do so

05:54.810 --> 06:00.050
once you click create environment. First of all, let's configure more options though.

06:02.380 --> 06:09.010
Here make sure that low cost is chosen to use the AWS free tier if you still have that available. Now

06:09.040 --> 06:13.480
you can also check what you'll get or what will be created for you,

06:13.480 --> 06:18.640
now let's modify the software and let's actually pick the latest NodeJS version which is available

06:18.640 --> 06:23.630
here to ensure that our cutting edge Javascript code is working correctly.

06:23.710 --> 06:26.270
You can leave all the other default settings, though

06:26.320 --> 06:30.600
I want to set these environment properties which are passed into the application.

06:30.730 --> 06:36.360
You remember I said this would be handled by most hosts or by pretty much all hosting providers.

06:36.550 --> 06:46.780
So here I will use my Mongo Atlas password as a key and that value here as well a value and here, my JWT

06:47.080 --> 06:50.070
key which is also holding a value,

06:50.140 --> 06:53.540
I need to do this because we're now of course not using Nodemon.

06:53.590 --> 06:59.100
So save this, now the software is configured, the other settings should be

06:59.110 --> 07:02.600
all right. So with that, let's click create environment

07:02.620 --> 07:02.890
now,

07:05.850 --> 07:08.440
we'll still use MongoDB Atlas as a cloud

07:08.460 --> 07:09.900
database by the way.

07:10.020 --> 07:16.050
If you were using a local one, you will now need to switch to some cloud solution or deploy your local

07:16.050 --> 07:22.050
one which is a topic for a separate course because database deployment, that is definitely something

07:22.050 --> 07:23.760
more advanced.

07:23.820 --> 07:30.270
So now this will take a few minutes and I will be back once this stack as it is called,

07:30.270 --> 07:39.090
so once this app has been deployed. So the setup finished but with an error as you can see. Now if we

07:39.090 --> 07:44.460
have a look, you'll see that it failed to run npm install and that we should see the snapshot logs for

07:44.460 --> 07:45.590
more details.

07:45.720 --> 07:49.210
We can find them here under health, there

07:49.340 --> 07:56.480
we can have a detailed output of what went wrong and it failed to install the bcrypt script here.

07:56.630 --> 08:02.750
The reason for that is that the bcrypt package we're using here is actually a package which needs to

08:02.750 --> 08:07.940
be compiled in the place where you're using it and that can fail.

08:08.090 --> 08:10.720
Now a fix is to use a different package instead,

08:10.850 --> 08:16.130
you install it in your project folder with npm install --save bcrypt.js,

08:16.250 --> 08:20.570
that is a special implementation of that which is pre-compiled.

08:20.870 --> 08:27.040
So now if you run that, you'll see that a new entry was added to your package.json file,

08:27.040 --> 08:28.080
bcrypt.js,

08:28.230 --> 08:32.370
also copy that to your package.json file which you want to deploy.

08:32.590 --> 08:34.120
You can replace bcrypt with it

08:34.120 --> 08:35.370
there, you have to replace it

08:35.370 --> 08:36.410
to be precise

08:36.490 --> 08:42.910
and now you just have to adjust your code in the places where you use bcrypt, like in user.js or

08:43.030 --> 08:47.590
not like but in user.js, there you import bcrypt from bcrypt.js

08:47.650 --> 08:52.450
and that's all. The methods it exposes are the same,

08:52.450 --> 08:56.740
so this should be all you need to do. With that set up,

08:56.740 --> 08:58.680
now you can redeploy this,

08:58.750 --> 09:00.760
so let's make sure to create a new zip file,

09:00.790 --> 09:05.830
let's delete the old one and zip all the back-end files one more time.

09:05.950 --> 09:11.830
And with that, we can replace our current deployment with that by going back to the dashboard and choosing

09:11.920 --> 09:13.620
upload and deploy,

09:13.750 --> 09:15.910
give it a new version label like two

09:18.710 --> 09:22.940
and choose your archive again and hit deploy

09:23.090 --> 09:29.930
and now this will upload this new package and try to put that into production here on this back-end.

09:29.930 --> 09:32.220
Again this will take a couple of minutes,

09:32.240 --> 09:33.960
so let's wait for this to finish.

09:35.090 --> 09:35.900
Now this looks good

09:35.900 --> 09:41.120
but if you click that link here at the top, you will probably get a bad gateway error which means it's

09:41.120 --> 09:42.730
still not working correctly.

09:43.680 --> 09:45.850
Let's go back to our setup there

09:45.990 --> 09:50.310
and the reason is that our app is probably not running correctly.

09:50.410 --> 09:54.640
Let's go back to configuration and modify the software

09:54.640 --> 09:59.260
and here, you can enter the Node command which should be run to start your application.

09:59.350 --> 10:03.610
Here it actually tells you what it tries to do to start your app,

10:03.610 --> 10:08.950
it looks for app.js if you don't enter anything there and tries to start that file.

10:08.990 --> 10:10.000
And that's the problem,

10:10.000 --> 10:11.590
we don't want to start with app.js,

10:11.700 --> 10:13.910
we want to start with server.js,

10:13.930 --> 10:16.500
that however is only its second option.

10:16.870 --> 10:24.580
So what you can do here is you can enter a new command here, Node server.js to tell it that it should

10:24.580 --> 10:34.710
run the server.js file. Let's click apply then and now we will again put that into production and update

10:34.740 --> 10:36.370
your environment accordingly

10:37.260 --> 10:43.770
and now once it is done, click refresh if you are not sure if you're seeing the latest status, if you now click

10:43.770 --> 10:44.550
this link,

10:45.980 --> 10:49.850
it should take a while and then give you another error.

10:50.570 --> 10:58.560
Now do you have an idea where this error is coming from? Well our URL, just like that is simply not

10:58.560 --> 10:59.770
correct.

10:59.790 --> 11:04.370
We don't support that path but we do support /apiposts,

11:04.440 --> 11:11.350
so let's try that. And here it then just loads and loads and eventually it will timeout.

11:12.380 --> 11:14.540
Do you know which problem we face here?

11:14.810 --> 11:17.400
It can be hard to spot this,

11:17.460 --> 11:22.320
it's not actually an error with our code but on our MongoDB hosting service,

11:22.320 --> 11:29.220
so let me quickly login there. In MongoDB Atlas here as it is called, we of course have that security

11:29.220 --> 11:29.810
tab

11:30.150 --> 11:36.870
and there we define the user but we also if you remember, define the IP whitelist and this is our local

11:36.930 --> 11:42.980
IP address. So only our local machine is able to access this database.

11:43.000 --> 11:48.810
Now theoretically, it would be best to create a new cluster for production anyways so that we don't mess

11:48.810 --> 11:51.100
with production data while developing

11:51.180 --> 11:55.790
but since this would cost money, we'll stick to this one project, for a real project,

11:55.830 --> 11:58.930
we would create and connect a separate cluster. Here

11:58.950 --> 12:02.880
I will do something which you don't want to do for your real production database,

12:02.880 --> 12:09.570
I will add another IP address to the whitelist and this will be the IP address of my Node server,

12:09.570 --> 12:14.140
so of that server here. How do we find out which address this

12:14.150 --> 12:20.610
has? You can go to your dashboard and click on show all to get a full log of the events that happened

12:21.120 --> 12:27.210
and there, you should somewhere see this created IP thing and that should be IP of your instance. If you copy

12:27.210 --> 12:32.540
it and put it into your browser, you should get that same error you got when you clicked on that domain.

12:33.030 --> 12:37.530
So that is the IP we want to add here to the whitelist, like this.

12:37.710 --> 12:40.260
Confirm this and now this is pending

12:40.260 --> 12:48.530
and once it is done, we should be able to access this MongoDB from our Node server on Elastic Beanstalk

12:48.570 --> 12:49.040
too.

12:49.140 --> 12:51.010
So let's wait for this to finish

12:51.390 --> 12:55.520
and now with that added, you need to restart your server actually.

12:55.560 --> 13:04.250
So let's go back to our dashboard, go to actions and click restart app servers.

13:04.290 --> 13:06.820
Now I want to do this because I have to restart my NodeJS

13:06.840 --> 13:08.540
server of course

13:08.540 --> 13:15.110
because if we don't do that, it doesn't try to reconnect to our MongoDB and it needs to try that because

13:15.110 --> 13:16.640
now it will be allowed.

13:16.640 --> 13:21.490
So now if we go back and reload that API posts route, we should see our posts here.

13:21.770 --> 13:24.500
So our restful API is up and running,

13:24.500 --> 13:26.090
this is looking good,

13:26.090 --> 13:32.470
now let's upload our Angular application and see if everything about this is working.
