WEBVTT

00:02.290 --> 00:04.860
We get the error dialog in place,

00:05.010 --> 00:13.110
it's showing the standard error message for our sign-up error because for the user route here where we

00:13.500 --> 00:21.000
create a new user here on the back-end, we actually have that Mongoose unique validator and if that

00:21.000 --> 00:26.170
detects an error, it will automatically send back or actually reach that part here

00:26.280 --> 00:29.470
and we then just send back the normal error response.

00:29.820 --> 00:37.350
Well what we could do here is we could send back an error with our own error object where we do add

00:37.440 --> 00:45.830
a message and there, we could say invalid authentication credentials.

00:45.830 --> 00:50.570
Now that's at least a bit more helpful than the standard error message.

00:50.570 --> 00:55.970
Now for our front-end to work correctly though, I need to remove that extra level of nesting here,

00:56.000 --> 01:02.390
that extra error property, let's just send back a response which has this message property. With this

01:02.390 --> 01:07.970
changed, we should already see an improvement if we save this. If we go back and we again try to create

01:07.970 --> 01:09.950
a user for a taken e-mail address,

01:10.070 --> 01:13.280
we see the invalid authentication credentials message here

01:13.490 --> 01:19.760
and that's really useful now because now we got a great way of displaying our own error messages.

01:19.790 --> 01:25.340
So let's go through the server side and ensure that we are sending correct error messages in all cases.

01:25.940 --> 01:26.850
For logging in,

01:26.870 --> 01:30.690
we're also catching errors and we're sending back auth failed.

01:30.740 --> 01:35.510
Now maybe we also want to say invalid authentication credentials

01:35.510 --> 01:43.180
here too. If we go to check auth, there we also send back a response with auth failed

01:43.380 --> 01:50.070
if we identify that the user doesn't have a valid token. So maybe here, we want to update the message to say

01:50.580 --> 01:53.870
you are not authenticated.

01:55.360 --> 02:00.630
If we go to our posts routes, let's go through it from top to bottom.

02:00.670 --> 02:07.790
We got our multer thing going on but we're not sending back errors here so we can ignore this for now.

02:09.720 --> 02:15.700
In the post method here where we create a new post though, we're not handling error cases. 

02:16.170 --> 02:23.280
What I want to do here is I want to add a catch block after this then block and this should execute

02:23.430 --> 02:25.730
whenever something does fail.

02:25.740 --> 02:30.410
So here I will set a response with a status code of 500

02:30.530 --> 02:37.650
for something went wrong on the server and add some JSON data where I can set up a message where

02:37.650 --> 02:40.860
I say creating a post failed.

02:40.860 --> 02:44.520
Now that's not super meaningful but it is at least something,

02:44.650 --> 02:51.670
so now we're also catching errors here. If we move on to that update path here

02:51.970 --> 03:01.180
or route here, there we are updating our posts and we are already sending back a response if we don't have

03:01.180 --> 03:07.780
a technical error which would go into a catch block but if we simply don't find a post to update, then

03:07.780 --> 03:10.370
we are sending back not authorized.

03:10.690 --> 03:16.470
I also want to catch technical errors like if the database connection is lost or anything like that

03:16.780 --> 03:22.990
and therefore here, I will also return a custom response with a status code of 500 where

03:23.120 --> 03:31.740
I send back my JSON code or my JSON data and there I will set a message of couldn't update post

03:32.230 --> 03:33.570
and that's important to understand

03:33.580 --> 03:37.170
by the way. Catch will only be reached if something goes wrong

03:37.180 --> 03:43.000
technically here, if we just don't find a valid post, we still go into the then block here

03:43.150 --> 03:46.360
but we will have a result where nothing is modified.

03:46.360 --> 03:50.900
This is why we're handling it like this here, with that else condition.

03:51.030 --> 03:55.000
Now let's move on to getting posts, if we want to get posts here,

03:55.020 --> 04:02.160
we are returning our posts and we're getting the count of posts and I also want to catch technical

04:02.160 --> 04:03.300
issues here.

04:03.810 --> 04:10.470
So here if we got an error, I want to return a response with a status code of 500

04:10.610 --> 04:18.370
where I add my JSON object with a message of fetching posts failed.

04:18.450 --> 04:19.750
Now we got that in place,

04:19.770 --> 04:27.390
let me copy that catch block and also add it to that method here where we try to find a single post

04:27.720 --> 04:30.840
here at the end, fetching posts

04:30.870 --> 04:32.630
failed is the correct message here

04:32.880 --> 04:38.610
and we also handle the case that we did not have a technical issue but that we just did not find a post

04:38.850 --> 04:40.500
and there we have a post not found

04:40.500 --> 04:44.170
message too. Now for deleting posts,

04:44.170 --> 04:49.700
we also handled the case that we just were not authorized or anything like that and I will

04:49.720 --> 04:54.670
also my technical error handler here with that catch block.

04:54.670 --> 04:57.200
Now with that, I updated all the error messages

04:57.220 --> 05:01.560
and if we save that, we can actually have a look at that on the front-end.

05:01.630 --> 05:07.960
For that let's go to the post list component and let's temporarily remove that check which hides the

05:07.960 --> 05:09.550
edit and delete buttons.

05:09.790 --> 05:15.470
If we remove that, we will be able to trigger these requests without being authorized.

05:15.790 --> 05:18.560
So if we go back and please have a look,

05:18.580 --> 05:20.030
I'm not logged in,

05:20.050 --> 05:22.150
I see these buttons again. If I click delete

05:22.150 --> 05:24.920
now, I get you are not authenticated.

05:25.330 --> 05:31.270
Now we also see that the spinner doesn't go away in that case and it should go away of course and

05:31.270 --> 05:37.100
the problem we have is that in the post list component where we are setting isLoading to true whenever

05:37.240 --> 05:41.970
we start loading, when we trigger onDelete,

05:42.350 --> 05:49.610
well we never set it back to false if we fail. Now here it's super easy to do so though, we are subscribing

05:49.610 --> 05:56.000
to the response and we can simply add a second method to subscribe here to also be informed about

05:56.090 --> 06:00.140
errors and then set isLoading back to false.

06:00.410 --> 06:07.240
By adding this here in the onDelete method in the post list component, we should be able to click delete,

06:07.520 --> 06:11.570
see the error message and then still interact with our app.

06:11.570 --> 06:16.730
Now if I click edit, we actually are redirected to the login page anyways because I still have that

06:16.730 --> 06:18.530
mechanism in place.

06:18.530 --> 06:25.190
If I now do login but with a user who didn't create that post, I now also see the buttons because we

06:25.190 --> 06:26.840
removed that check,

06:26.870 --> 06:33.050
now I also get not authorized and if I try to edit this, well then I get it loaded here

06:33.070 --> 06:39.770
but if I try to update this, I also get not authorized and keep in mind, these are cases which are

06:39.770 --> 06:45.770
a bit fishy anyways because we are reaching parts of the app where we shouldn't be able to get in a legit

06:45.770 --> 06:52.250
way. So we don't need to provide the best user experience here but having some fallback is certainly

06:52.250 --> 06:54.230
not a bad idea.

06:54.240 --> 07:01.610
Now I will go back to my post list component template and re-add this ngIf check to my buttons here

07:01.760 --> 07:03.990
so that we don't see them if we shouldn't see them

07:04.070 --> 07:07.660
but it was nice seeing our error handler in action here.
