WEBVTT

00:02.660 --> 00:10.070
We're managing some Angular information globally in Angular, for the back-end I want to do the same.

00:10.100 --> 00:16.610
Now here, we can't use that environment file because that is really just for the Angular project, the back-end

00:16.610 --> 00:20.750
has no access to this because the CLI doesn't manage this back-end code,

00:20.900 --> 00:24.780
I just put it into one project so that we can easily switch files,

00:24.810 --> 00:32.780
they're not connected but we can implement something comparable for the back-end. During development, we

00:32.780 --> 00:36.990
can use a feature called Node environment variables.

00:37.040 --> 00:45.290
NodeJS has this feature built-in and pretty much all hosting providers for NodeJS applications offer

00:45.380 --> 00:51.510
a feature which allows us to inject global variables into our running Node program.

00:51.620 --> 00:58.580
Now here for the local development, we can also fake this by reconfiguring Nodemon, the tools we're using

00:58.580 --> 01:07.520
to start the Node server here. For that we add a new file, nodemon.json to set up some global

01:07.520 --> 01:14.780
configuration and there, we add a javascript object with a key named env which has to be enclosed in

01:15.020 --> 01:22.010
quotation marks because it's JSON notation and that key now can hold some global environment variables

01:22.280 --> 01:26.370
that will be injected into our running Node app

01:26.420 --> 01:32.350
and again, we will set that on the server through the hosting provider which hosts our app, here for development,

01:32.360 --> 01:33.860
we're doing it with Nodemon

01:33.950 --> 01:36.890
since this kind of is our hosting provider here.

01:37.250 --> 01:40.850
So now we have that env key here,

01:40.850 --> 01:47.850
it holds an object and in there, you can set up your global environment variables for your Node express app.

01:48.080 --> 01:52.060
And here I want to have my Mongo Atlas password,

01:52.100 --> 01:59.890
so for that hosted Mongo database and that should be the password you use in the app.js file, this

01:59.900 --> 02:00.520
one.

02:00.740 --> 02:05.060
Let's cut it and let's add it to nodemon.json

02:05.060 --> 02:10.220
here as a value, also enclosed between double quotation marks.

02:10.220 --> 02:17.150
I also want to use my jwt_key or want to store it here, with that I mean that secret key which I'm using,

02:17.300 --> 02:22.220
for example in user.js, this one, let's cut it here

02:22.520 --> 02:27.490
and let's go back to nodemon.json and then add it here.

02:28.640 --> 02:36.280
Now I got these two things stored globally for my back-end. Now if you've got more things to store, you

02:36.280 --> 02:38.040
can of course do that here,

02:38.110 --> 02:41.600
I'm happy with what I'm storing in my case,

02:42.040 --> 02:49.150
now I need to inject them into my, well different parts of the app and injecting is super easy.

02:49.420 --> 02:54.860
Let's start with the user.js file where we want to create a new token. Here

02:54.880 --> 02:57.250
previously we had that secret stored,

02:57.250 --> 03:00.090
now it's stored in that global environment file.

03:00.100 --> 03:07.060
Now for NodeJS, these global variables are injected into the running Node process and there, we can

03:07.060 --> 03:14.320
access them on a special object, the process object which holds an env variable which holds all the

03:14.320 --> 03:16.180
injected environment variables.

03:16.180 --> 03:24.010
So there, we will find the jwt_key variable because we defined that key in our nodemon.json config

03:24.010 --> 03:24.840
here.

03:25.390 --> 03:34.630
So we use process env jwt_key to get that jwt_key and I use that same code in the CheckAuth function

03:34.690 --> 03:38.460
therefore where we also need that key.

03:38.600 --> 03:41.120
And of course we don't just have that global key,

03:41.270 --> 03:44.240
we also have that MongoDB password,

03:44.360 --> 03:52.040
so in the app.js file where I need that password, there I will connect to MongoDB, the password

03:52.040 --> 03:57.900
needs to be entered here and we can simply inject it by ending the string and starting a new one

03:58.070 --> 04:05.110
and in between we add process.env. and then it was, let's have a look,

04:05.330 --> 04:08.140
it was MONGO_ATLAS_PW,

04:08.450 --> 04:17.060
let's grab that and let's access it here and now with that, we're storing this in a central place and we're

04:17.060 --> 04:19.770
injecting it into our app.

04:20.100 --> 04:26.270
Now with that if you save everything and you reload your app, it should still work as before

04:26.610 --> 04:32.840
except for that it's not. If we go back to the server side log, we just need to restart that server side

04:33.500 --> 04:36.410
because we changed the configuration of Nodemon,

04:36.410 --> 04:41.360
now if we reload this, it works again.

04:41.480 --> 04:46.340
If I logout, if I try logging in here, that's looking good.

04:46.520 --> 04:48.320
If I create a new post here,

04:51.360 --> 04:56.880
it's also looking good. If I then want to edit this post, don't change anything that's working,

04:57.160 --> 05:01.800
add an exclamation mark, that is working

05:01.830 --> 05:06.030
and if we delete it, that is also working.

05:06.040 --> 05:07.520
So that's all working again,

05:07.540 --> 05:09.870
we've got no errors here as far as I can tell

05:10.270 --> 05:15.970
and now therefore we're using these globals to have a more convenient way of managing our URLs

05:16.050 --> 05:23.510
and our global settings. We're now really prepared to not just use our app locally but to deploy it.
