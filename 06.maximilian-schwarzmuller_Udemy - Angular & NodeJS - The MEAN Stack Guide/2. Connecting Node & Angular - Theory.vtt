WEBVTT

00:02.110 --> 00:07.040
Now thus far, we always already started a server with ngServe

00:07.480 --> 00:14.010
and now to make it even more confusing, ngServe behind the scenes actually uses a nodejs

00:14.020 --> 00:21.010
server, really just because it's very simple to set up such a node server but ngServe and that is

00:21.010 --> 00:25.170
also important only gives us a development server.

00:25.180 --> 00:27.220
Now what does development server mean?

00:27.310 --> 00:30.930
It means it's a server aimed at angular development,

00:30.940 --> 00:36.790
it's not a production ready server and it certainly doesn't contain any of the logic we want to add

00:36.850 --> 00:38.030
to our server side,

00:38.120 --> 00:41.880
it also doesn't give us an entry point to add such logic,

00:42.070 --> 00:45.590
it's really just a server that returns the angular app

00:45.760 --> 00:51.980
and that also has useful features like auto-restart whenever we have a new angular app

00:52.320 --> 00:56.460
version. So ngServe is nice for developing our angular application,

00:56.470 --> 01:02.410
it's not the server we will use as a backend because there's one important thing you have to understand

01:02.680 --> 01:08.920
regarding the way angular and a node backend or any backend work together.

01:08.920 --> 01:12.210
We've got two ways of connecting a node and angular backend,

01:12.250 --> 01:19.390
the first approach we can take is that we have a node application, a node express application that

01:19.480 --> 01:23.830
serves the angular single page application as part of it.

01:23.890 --> 01:29.700
It contains our other server side logic but it also has a certain path,

01:29.700 --> 01:36.460
so a url endpoint to which we can send a request where it will return that angular single page

01:36.460 --> 01:37.800
application.

01:37.810 --> 01:44.650
The alternative is that we have two separate servers, so we have our node express server for our business

01:44.650 --> 01:52.270
logic, for the authentication, for the data storage and then we have a separate static host which only returns

01:52.390 --> 01:54.900
our angular single page application

01:55.210 --> 02:01.120
and in this course, we will actually see both approaches because they really only matter or differ when

02:01.120 --> 02:05.150
we reach the deployment section in the later sections of this course,

02:05.170 --> 02:07.050
I just want you to be aware of this.

02:07.090 --> 02:13.750
So in the first approach here, we have our node express back which handles incoming requests and that's

02:13.750 --> 02:21.280
not just the request for the angular app but also requests sent by the angular app because as you saw

02:21.280 --> 02:30.340
in the big picture picture, angular sends background http requests to store data, to fetch data and these

02:30.370 --> 02:34.100
requests need to be handled by the node express backend.

02:34.120 --> 02:41.150
So we have the endpoints for this but additionally, we have one special endpoint, one special url

02:41.170 --> 02:45.540
we were able to handle and this is for example the /path,

02:45.550 --> 02:51.850
so if we just send our request to our domain slash nothing and you will see what I mean with that slash

02:51.850 --> 02:53.150
and with the path thing

02:53.170 --> 02:59.020
but if we send such a simple request, then we return the angular single page application, for requests

02:59.050 --> 03:01.070
targeting any other path,

03:01.180 --> 03:03.530
we will do whatever our business logic is.

03:03.610 --> 03:08.520
Again these will become more clear once we actually implement our paths.

03:08.530 --> 03:15.280
Now for the separate server solution, we still have our node express app handling incoming requests

03:15.490 --> 03:19.630
because we have these background requests sent by angular

03:20.020 --> 03:28.060
but additionally, we also serve our angular single page application from a totally separate static host.

03:28.510 --> 03:35.440
A static host is really just a simple server, could be a node server but could be any server, an apache,

03:35.440 --> 03:42.040
an nginx server, so any server that doesn't run any server side logic, any server side code but simply

03:42.040 --> 03:48.010
returns html, javascript and css files and that's all our angular app consists of,

03:48.010 --> 03:51.030
so this is all we need. In both cases,

03:51.130 --> 03:53.590
we got logically separated apps though,

03:53.740 --> 04:00.160
so even if we use one and the same node server for serving both the angular app and hosting our core

04:00.160 --> 04:09.010
business logic, well in both cases we actually have separated apps in a sense of angular handles the UI

04:09.040 --> 04:14.710
and sends background requests and node express handles these background requests and does something

04:14.710 --> 04:15.410
with them.

04:15.550 --> 04:21.280
The only difference on the left approach where we also serve the SPA is that we got one special route, one

04:21.280 --> 04:24.470
special path where we do also return the angular app

04:24.520 --> 04:25.420
but that's all,

04:25.420 --> 04:32.680
besides that there is no strict connection because what we build is a restful API with our node express

04:32.680 --> 04:35.470
backend. Now what is a restful API?
