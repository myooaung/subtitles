WEBVTT

00:02.290 --> 00:05.920
It's also time for one other improvement, when creating posts

00:05.920 --> 00:11.260
right now we're doing this with two-way binding and it's not necessarily wrong but angular also makes it

00:11.290 --> 00:13.000
easy to work with forms

00:13.270 --> 00:16.740
and of course it makes sense to also use a form semantically.

00:16.810 --> 00:23.330
So what we can do is we can add a form element, normal html element in our cart here, in the post create

00:23.350 --> 00:28.900
component and wrap the form fields and button with it, like this

00:29.130 --> 00:33.210
and unfortunately remove my multiline set up here,

00:33.240 --> 00:35.120
let me recreate that.

00:35.620 --> 00:40.290
And now in here, I got my different inputs in that form

00:40.530 --> 00:46.560
and now we don't need to use two-way binding anymore, though we can, we can use another mechanism

00:46.740 --> 00:56.140
angular provides. When it detects a form element and we get the forms module included which we do, it

00:56.140 --> 01:02.920
will automatically create a javascript object behind the scenes which represents this form so to say

01:03.340 --> 01:09.650
where we can easily register inputs as controls of which it will keep track of, where it will then store

01:09.650 --> 01:15.670
the values of these controls and where we can easily add validation to and submit the form and use

01:15.670 --> 01:17.970
the value of that form.

01:18.010 --> 01:23.680
For that, we can get rid of the two-way binding here with this syntax and instead add ngModel, like

01:23.680 --> 01:24.280
this,

01:24.280 --> 01:31.300
so as a directive without any bindings, this will register this input as a control to this behind the

01:31.300 --> 01:32.560
scenes form.

01:32.680 --> 01:36.000
However angular needs to know how to name this input,

01:36.040 --> 01:41.850
so we need to add the normal name attribute and give this any name of your choice, I'll name it title

01:42.490 --> 01:48.070
and the same for the text area, we can use ngModel, we need to add a name now,

01:48.160 --> 01:55.180
so I will name this content, maybe also reduce the rows but that of course is optional and now angular

01:55.180 --> 01:58.400
is aware of these two controls on this form.

01:58.450 --> 02:03.880
Now when we click the button, I don't want to call on add post manually anymore,

02:04.110 --> 02:10.560
instead I will set this button to be of type submit because we're now in a form and the default html

02:10.720 --> 02:16.990
behavior is that a button with type submit in a form will submit that form and submitting will trigger

02:16.990 --> 02:24.770
a special event to which we can listen to, the submit event and that is where I want to execute on add

02:24.780 --> 02:30.290
post like this, now on add posts remember is our method here.

02:30.630 --> 02:35.700
So now we're doing this whenever we're submitting the form and angular will also prevent the default

02:35.790 --> 02:38.640
which would be that the form gets sent to the server,

02:38.670 --> 02:39.770
we don't want to do that,

02:39.780 --> 02:43.040
we want to handle this entirely in javascript.

02:43.110 --> 02:46.150
Now with that we get the form here,

02:46.200 --> 02:51.480
now we need to get access to the values inside of that form and this can be done with the help of a

02:51.480 --> 02:58.830
local reference. We can add a reference to the form and you can name this however you want, like post form

02:59.340 --> 03:01.520
and now important, you don't just add it like this,

03:01.530 --> 03:04.950
this would give us access to the html element object,

03:04.950 --> 03:10.110
we can actually assign a value here and that value has to be ngForm.

03:10.110 --> 03:16.140
Now that is a directive angular implicitly attaches to the form element here for us

03:16.140 --> 03:23.350
and what this strange syntax does is it gives us access to this object, this form object angular

03:23.350 --> 03:27.400
created for us and manages for us behind the scenes.

03:27.420 --> 03:34.020
So now post form gives us access to that angular form object and we can pass post form as an argument

03:34.020 --> 03:37.590
to on add post and in on add post,

03:37.590 --> 03:43.320
we now know that we received the form which actually is of type ngForm, which you automatically or

03:43.320 --> 03:47.870
which you import, my IDE does it automatically from @angular/forms.

03:47.950 --> 03:56.550
So @angular/forms, this gives us access to ngForm and this now actually holds a lot of information

03:56.550 --> 03:57.280
about the form,

03:57.300 --> 03:59.860
for example whether it's valid or not

04:00.030 --> 04:04.200
but it also gives us access to the values of the form, on the form

04:04.200 --> 04:10.000
there is a value property and on that value property, we could access things like title.

04:10.170 --> 04:17.690
So essentially the names we defined here, title and content, so form value title gives us the title

04:17.690 --> 04:22.070
the user entered, form value content gives us the content.

04:22.070 --> 04:25.300
Obviously now it's possible to enter invalid content,

04:25.460 --> 04:32.030
we can submit an empty form and we add an empty post therefore and clearly not what we want.

04:32.030 --> 04:38.990
We can easily add validation by adding some default html5 validators to our inputs,

04:38.990 --> 04:40.940
so this is not angular,

04:40.940 --> 04:43.500
there is a required validator for example.

04:43.520 --> 04:49.070
Now what angular will do though is it will automatically detect this and then run some behind the scenes

04:49.070 --> 04:55.800
logic in javascript to also update its form object to reflect whether it's valid or not,

04:55.820 --> 04:59.300
so if it fulfills our html5 validators.

04:59.660 --> 05:01.490
So I will require both,

05:01.490 --> 05:02.510
you could add more,

05:02.510 --> 05:09.020
for example there also is a min length validator where you could say the minimum length of a title is

05:09.020 --> 05:12.410
three and not just one as it is with required,

05:12.410 --> 05:14.140
these are things you can add.

05:14.150 --> 05:19.520
Now we get the validators in place and now angular is aware of the fact whether the form is valid or

05:19.520 --> 05:20.390
not.

05:20.390 --> 05:25.570
That being said, whilst this is the case, we can still submit an invalid form.

05:25.670 --> 05:31.710
If I hit save posts, you see it actually marks them as invalid by underlining them in red,

05:31.880 --> 05:35.970
that's an angular material feature but it still submits it.

05:36.230 --> 05:41.240
If we want to prevent that, we have to do it manually. In on add post,

05:41.240 --> 05:45.190
we can check if form invalid

05:45.470 --> 05:48.510
and if this is true, then we just return.

05:48.760 --> 05:55.420
What this means is that now if I reload and I click the button, no post is added but it still tried to submit

05:55.420 --> 05:57.600
it but now it marks it as red

05:57.700 --> 06:03.360
and now thanks to angular material, we can also easily add beautiful error messages.

06:03.430 --> 06:11.300
If we go back to angular material and there to the form field, there on the right you can click on error

06:11.310 --> 06:17.780
messages and you see there's a special mat error component you can add below the input,

06:17.930 --> 06:21.890
let's copy that into our post create component input here.

06:22.100 --> 06:25.700
So below the input I add this and we don't want to check email there,

06:25.720 --> 06:28.540
we want to get access to that input, more on that in a second

06:28.730 --> 06:30.740
but we can check whether this is invalid

06:31.010 --> 06:35.640
and then well display an error message, we'll also have to change that.

06:35.870 --> 06:40.250
So what we can do here is first of all we need to get access to that input and there are two ways of doing

06:40.250 --> 06:47.750
so, we can reach out to our post form and there call get control, then pass the name between quotation

06:47.750 --> 06:54.800
marks and get access to the control like this or we add a local reference to that input, any name you want like

06:54.980 --> 06:57.870
title and set this equal to ngModel,

06:58.010 --> 07:00.770
so where ngForm gave you access to the entire form,

07:00.770 --> 07:04.550
this gives you access to the, well data managed for that input

07:04.550 --> 07:10.460
behind the scenes and then you could also say title invalid because now this is the form control behind

07:10.460 --> 07:11.660
the scenes.

07:11.690 --> 07:17.660
Now whatever you want to output here can be dynamic content but it can also be some hardcoded text like

07:17.870 --> 07:27.870
please enter a post title. Now I'll just copy that mat error and also paste it below my text area here and

07:27.870 --> 07:29.120
on the text area,

07:29.220 --> 07:36.190
I will now also add a local reference content equal to ngModel here too

07:36.360 --> 07:44.160
and therefore here we check whether the content is invalid. And now with that if I save that and go

07:44.160 --> 07:50.910
back to my application and I submit this, you see we got the error messages below the inputs too,

07:50.910 --> 07:52.020
this is really cool,

07:52.020 --> 07:55.890
if I do enter some valid information here, I can submit.

07:55.890 --> 08:01.240
So this is form handling with the help of angular forms, so-called templates

08:01.240 --> 08:06.100
driven form to be very precise because everything is inferred from within your template and

08:06.180 --> 08:08.560
there is an alternative to which I'll will come back later.

08:08.850 --> 08:13.680
So template driven forms and a little help of the angular material package

08:13.740 --> 08:16.550
when it comes to beautifully handled errors.
