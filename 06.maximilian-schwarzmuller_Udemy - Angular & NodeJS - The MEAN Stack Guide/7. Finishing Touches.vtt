WEBVTT

00:02.400 --> 00:05.240
Now the application is looking and working nice,

00:05.400 --> 00:07.020
there's one more thing I want to do.

00:07.240 --> 00:15.400
If for some reason, an error should occur on the new post page, then I want to also not show the spinner

00:15.410 --> 00:22.060
anymore because right now in the post create page, just as on other pages too or at least just as we had it on

00:22.060 --> 00:26.040
other pages, we are setting isLoading to

00:26.050 --> 00:33.790
true whenever we are saving that post and then we don't care about the fact or about the result of this

00:33.840 --> 00:36.880
add post or update post operation.

00:37.270 --> 00:39.780
Now caring about it is easy though.

00:40.120 --> 00:46.570
We can again use that AuthStatusListener, just as we did on the sign-up and login page.

00:46.600 --> 00:54.280
So for that, I'll add a new private property, private authStatusSub which is of type subscription

00:54.310 --> 00:57.010
to store that subscription we're going to create,

00:57.100 --> 01:05.760
don't forget to import subscription from rxjs and with that added here, we can inject our

01:05.760 --> 01:10.040
auth service here, auth service of type auth service,

01:10.080 --> 01:18.720
you also need to import that type from your auth service file. And if you got it injected, then you can

01:18.720 --> 01:21.460
set up a listener in ngOnInit,

01:21.540 --> 01:30.270
this auth service get authStatusListener, subscribe to it, store the subscription in the authStatusSub

01:30.510 --> 01:32.040
property you created

01:32.460 --> 01:37.000
and here, we get the authStatus

01:37.500 --> 01:46.850
and whenever this changes, I will simply set this isLoading to false because if that changes, we'll

01:46.880 --> 01:48.730
always need to disable the loader,

01:48.770 --> 01:51.260
that is something we know about our application.

01:51.260 --> 01:57.960
The only conditions where this can change are conditions where we want to, well stop our loader from loading.

01:58.040 --> 02:00.340
So now we have that listener set up,

02:00.440 --> 02:07.130
we should also unsubscribe in onDestroy, so let's add the onDestroy interface, import it from 

02:07.130 --> 02:08.050
@angular/core.

02:08.330 --> 02:12.770
And with that added up here, let's go to the bottom of that file,

02:12.890 --> 02:20.450
let's add ngOnDestroy here and let's reach out to our authStatus subscription and call unsubscribe.

02:21.140 --> 02:26.850
And now we also handle that rare case that for some reason we get an error here,

02:26.960 --> 02:34.010
well then we would at least remove that spinner and that is error handling as I want to implement it in

02:34.010 --> 02:35.350
this application.

02:35.360 --> 02:42.260
You can always do more, show more detailed error messages, handle errors differently for different components,

02:42.260 --> 02:44.500
this is just one possible flow.

02:44.630 --> 02:50.600
A very elegant flow as I think though because with that global interceptor, we have a very minimal amount

02:50.600 --> 02:53.300
of code we need for handling these errors,

02:53.330 --> 02:59.030
we have our separate error component which is a great practice and therefore, error handling is really

02:59.030 --> 03:01.170
made easy in this application.
