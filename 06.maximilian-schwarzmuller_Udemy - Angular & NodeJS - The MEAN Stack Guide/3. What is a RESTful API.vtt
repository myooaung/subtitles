WEBVTT

00:02.350 --> 00:09.390
So I mentioned in the last video that we're going to build a so-called restful API with nodejs.

00:09.400 --> 00:11.580
Now we haven't even had a look at nodejs yet

00:11.590 --> 00:15.580
but this is important to understand because this is what we'll build in this course.

00:15.670 --> 00:17.540
What is a restful API?

00:17.650 --> 00:22.490
Rest stands for representational state transfer,

00:22.490 --> 00:23.550
and what is it?

00:23.740 --> 00:30.100
Well a restful API is in the end a server side solution, a server side service,

00:30.100 --> 00:32.110
so a server side app you could say,

00:32.260 --> 00:34.820
so we have the server and we have the client, the browser.

00:34.840 --> 00:40.990
Now in our case, angular, the angular app is going to run on the client and the angular app is going to

00:40.990 --> 00:45.850
send these background requests I was talking about, the server has to send back responses which you

00:45.850 --> 00:47.430
can then use in the angular app.

00:47.740 --> 00:53.480
Now often these responses are html pages but that's only the case for traditional web apps where

00:53.520 --> 00:56.860
we don't have the support for background requests

00:56.860 --> 01:00.300
but where we send back a new html page for every request

01:00.490 --> 01:06.820
but this is not what we use in an angular app. Instead in an angular app, a single page app and not such

01:06.820 --> 01:08.170
a traditional web app,

01:08.470 --> 01:11.940
there we have our client but we could also and that's important,

01:11.980 --> 01:15.230
we could also have other clients, a mobile app for example

01:15.340 --> 01:20.350
and this mobile app could store and fetch data but doesn't need or use render html.

01:20.470 --> 01:25.810
We could also have some other client, some service script we run on our machine which also wants to access

01:25.810 --> 01:28.350
certain features which we expose on this API

01:28.540 --> 01:33.850
but in our case in this course, we simply have a client which is a browser with a single page application

01:34.050 --> 01:39.340
and there we want to store the fetched data but never render a second html page because everything is

01:39.340 --> 01:43.660
re-rendered with javascript in that one page we have in that single page.

01:43.840 --> 01:45.320
So we get the right case here,

01:45.430 --> 01:51.490
I'm just showing these other cases because the important thing to understand is that a restful API is

01:51.490 --> 01:59.170
a stateless backend, it doesn't care about which client connected to it, all a restful API does is it

01:59.170 --> 02:01.070
exposes a couple of different

02:01.090 --> 02:06.850
urls, so-called paths to which you can send requests and depending to which path you send to a

02:06.850 --> 02:09.310
request, something different will happen.

02:09.610 --> 02:15.400
So to show this, we've got a client, our angular app, we got a restful server and then we get different

02:15.400 --> 02:19.080
paths, /users, /posts, /products,

02:19.180 --> 02:22.350
so you could send a request to yourdomain/users,

02:22.390 --> 02:25.720
you could send a request to yourdomain.com/posts,

02:25.810 --> 02:31.930
you could send a request to yourdomain.com/products and depending on to which path you send the

02:31.930 --> 02:33.670
request, something different will happen and

02:33.670 --> 02:35.400
you will get a different response

02:35.500 --> 02:41.020
but this of course makes your API fully transparent then predictable and you can do different things

02:41.020 --> 02:41.790
with it.

02:41.800 --> 02:43.930
We create the API on our own,

02:43.930 --> 02:48.400
so we got full control what we want to support, what we want to offer.

02:48.400 --> 02:56.170
Now besides these different paths, there's one other important thing we need for identifying or for handling

02:56.170 --> 03:04.720
a requests correctly and that is the http verb used for that request, get, post, delete, patch, put, these

03:04.720 --> 03:06.580
would be verbs you can use

03:06.820 --> 03:10.490
and for the different paths, you might be supporting different verbs.

03:10.570 --> 03:13.280
You don't have to support all verbs for every path,

03:13.450 --> 03:17.160
for some paths you only want to allow get requests, for some paths

03:17.160 --> 03:20.080
you maybe only want to allow post requests.

03:20.080 --> 03:27.850
And with this you can send such an ajax request through angular's http client, for example send

03:27.850 --> 03:31.330
a post request to yourdomain.com/users

03:31.460 --> 03:37.310
and this would probably be adding a new user to your backend database

03:37.330 --> 03:42.690
but what exactly happens is of course controlled with your server side code that runs for this path

03:43.150 --> 03:44.030
and in this module,

03:44.050 --> 03:48.170
you will learn how to create these paths and how to send requests to them,

03:48.580 --> 03:54.420
in the end you will get back a response which you can then use in your client side application. That

03:54.430 --> 03:57.330
is how a restful API works,

03:57.340 --> 04:03.700
now we also need to care about the data we send and there it's important to understand that we communicate

04:03.700 --> 04:08.620
with json data, not with html data, not with xml data,

04:08.620 --> 04:16.660
json is a data format which looks very much like javascript objects which is very small but yet understandable

04:16.720 --> 04:21.220
and machine readable and which allows us to exchange data.

04:21.220 --> 04:26.910
We could use different data like xml, url encoded data where we have everything added as query

04:26.920 --> 04:29.820
parameters in the url, form data,

04:29.830 --> 04:36.070
these would all be alternatives but in most of the cases and also in this course, we will use json data.

04:36.460 --> 04:43.240
So enough of the theory then, let's start building that node backend so that we can also see how that

04:43.240 --> 04:43.980
all works.
