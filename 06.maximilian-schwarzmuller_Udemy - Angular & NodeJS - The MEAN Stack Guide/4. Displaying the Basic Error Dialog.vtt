WEBVTT

00:02.470 --> 00:09.340
We edit the error-interceptor and it's working as we could tell. It's not optimal yet though, we just

00:09.340 --> 00:11.980
throw an alert here and the console log,

00:12.220 --> 00:16.340
I want to use that @angular/material dialog though.

00:16.600 --> 00:17.450
Now to use it,

00:17.530 --> 00:19.110
first of all we need to unlock it,

00:19.150 --> 00:24.210
so let's go to the app module and import something from the @angular/material package

00:24.460 --> 00:30.720
and that something is the mat-dialog module. As you know, importing it here isn't enough,

00:30.720 --> 00:35.280
we also have to add it to our imports array down there.

00:35.280 --> 00:37.800
Now we unlock the mat-dialog,

00:37.980 --> 00:43.950
now we can open a dialog by injecting the dialog service into whichever place in our app where we want

00:43.950 --> 00:48.420
to use it and then calling open on the injected object

00:48.690 --> 00:54.690
and there, we pass a reference to the component which we want to use as a content for the dialog and

00:54.690 --> 00:59.450
some additional configuration, like the width for example or additional dynamic data

00:59.460 --> 01:02.470
we want to pass into that component here.

01:02.520 --> 01:03.750
This is how it works,

01:03.780 --> 01:08.580
you can read more about this in the official @angular/material docs of course.

01:08.580 --> 01:12.700
So I want to use my dialog in the error-interceptor here.

01:12.840 --> 01:20.040
Therefore we have to re-add @injectable here because now I want to inject a service into this service,

01:20.430 --> 01:29.130
so add it here and import it from @angular/core, add the constructor and in that constructor, I want to

01:29.130 --> 01:37.530
inject my dialog service, the service name is mat-dialog and it needs to be imported from

01:37.590 --> 01:39.540
@angular/material.

01:39.550 --> 01:43.920
Now we get the dialog available and now we can display something with it

01:44.140 --> 01:50.330
but as you just heard, we need to add a component which we want to use as the content.

01:50.410 --> 01:56.300
So I'll actually add a new component here on the top level nested in a folder which I'll name error

01:56.470 --> 02:03.380
and there, I will add my error.component.ts file. As we learned,

02:03.400 --> 02:05.900
we just create a new class here which I export,

02:06.010 --> 02:08.160
ErrorComponent

02:08.470 --> 02:14.990
and it actually becomes a component by adding the @component decorator here.

02:15.010 --> 02:21.480
Now we don't need to add a selector here because we're not using that component by its selector anyways

02:21.910 --> 02:24.430
but we need a template. A

02:24.430 --> 02:25.500
templateUrl,

02:25.510 --> 02:27.800
this gives us the most flexibility.

02:28.150 --> 02:36.290
So for that I'll add my template file, error.component.html here and I will

02:36.290 --> 02:43.520
point at this file here in my decorator, error.component.html.

02:43.750 --> 02:46.820
So now I'm pointing at that file,

02:46.840 --> 02:54.190
now we can define what we want to see in that error dialog we're going to open. In there, I simply

02:54.190 --> 03:05.710
want to have a h1 tag when I say an error occured and below that, a paragraph with the message and I will

03:05.710 --> 03:07.720
use string interpolation to output a message

03:07.720 --> 03:10.560
property which I'll add to my component here.

03:11.400 --> 03:16.230
Message by default will be an

03:16.290 --> 03:18.600
unknown error occurred.

03:19.840 --> 03:26.890
Now I will have to register this component in my app module by going to declarations there and here,

03:26.890 --> 03:32.490
I will add my error component and make sure to add this import path too.

03:32.620 --> 03:37.350
Now we need to do something special, since we're going to load that component,

03:37.450 --> 03:41.830
neither through a selector nor through routing,

03:42.010 --> 03:47.440
we have to tell Angular that it needs to be prepared to eventually create this component.

03:47.440 --> 03:52.410
It normally detects that it needs to be prepared by the fact that we somewhere used the selector

03:52.510 --> 03:58.810
or that we use it as a component in the router but since we will dynamically create that component or

03:58.900 --> 04:04.530
let that dialog service create it dynamically, we need to tell Angular that this is going to happen

04:04.570 --> 04:13.390
otherwise we would get an error. And for that, we add a fifth item to our ngModule configuration,

04:13.390 --> 04:17.910
the entry components array. You rarely need to use that

04:18.010 --> 04:19.510
but here you do,

04:19.560 --> 04:25.180
there you add the error component and this simply informs Angular that this component is going to get

04:25.180 --> 04:28.130
used, even though Angular can't see it.

04:28.720 --> 04:35.110
So now let's go to the error interceptor and use that dialog service to open a dialog with this error

04:35.110 --> 04:36.130
component.

04:36.300 --> 04:44.520
So here, I will reach out to my dialog service, call the open method and there, I will pass in my error component,

04:44.530 --> 04:53.610
you also need to add an import to that error component in the error-interceptor file then. And with that

04:53.840 --> 04:54.610
added,

04:54.860 --> 04:57.460
here we're opening the error component,

04:57.750 --> 05:00.320
now we should actually be able to already see it.

05:00.480 --> 05:04.800
If we save that and we go back to our sign-up form,

05:04.800 --> 05:09.020
if I use the e-mail address that is already taken,

05:09.040 --> 05:11.110
now you see an error occurred here.
