WEBVTT

00:02.320 --> 00:07.930
In the last lectures, we learned about this subject, the subscriptions and this seems to be related to

00:07.930 --> 00:10.300
something called observables,

00:10.300 --> 00:12.090
time for a closer look.

00:12.100 --> 00:19.210
So what's this observable thing? As you could probably tell by the code we wrote, it's all about us emitting

00:19.210 --> 00:25.720
data and listening to that data in different places of our application which makes it pretty helpful

00:25.750 --> 00:31.990
because we can well subscribe to certain updates, changes and push these changes from a totally different

00:31.990 --> 00:32.920
place,

00:32.920 --> 00:34.590
here's more theory on that.

00:34.600 --> 00:41.680
So we typically think in observables and observers, the observer is essentially the thing subscribing

00:41.680 --> 00:46.150
to an observable or the thing which establishes the subscription and manages it

00:46.150 --> 00:52.930
you could say. There are three methods which are called on the observers side and that's next, error and

00:52.930 --> 00:53.630
complete.

00:53.650 --> 01:00.550
Now we called next on the subject in the last lectures and the subject is kind of the observable you

01:00.550 --> 01:07.690
could say but it's the observer who then does something upon the next call in that subscription callback

01:07.720 --> 01:08.290
we passed

01:08.290 --> 01:08.670
right,

01:08.680 --> 01:15.430
that first argument we passed to subscribe, that is the logic we want to execute whenever next is

01:15.430 --> 01:17.710
executed on the subject

01:17.710 --> 01:18.580
so to say.

01:18.580 --> 01:22.540
So we invoke next through the observable or through the subject,

01:22.540 --> 01:28.840
I'll come to the difference and the observer is what we basically pass into subscribe,

01:28.870 --> 01:33.890
so it's a collection of functions that can do something up on these method calls.

01:34.120 --> 01:42.520
And as I also explained briefly, we can not just emit next data, so a new package of data so to say, we could also

01:42.520 --> 01:48.550
have an observable where we want to throw an error, maybe because we are doing some http calls behind

01:48.550 --> 01:55.840
the scenes that failed or we could also emit a complete event to basically say hey I'm done,

01:55.840 --> 02:01.130
there are no more data packages to be emitted, so no more next calls.

02:01.210 --> 02:02.660
Now a typical example

02:02.680 --> 02:05.620
but of course not limited to that is an observable

02:05.620 --> 02:15.160
that wraps a callback of an http request, so we could wrap a normal xml http request and ajax request with

02:15.160 --> 02:21.340
an observable that basically takes that callback and whenever that request gives us back a response, we

02:21.340 --> 02:29.160
instead use that observable to emit the response data or a possible error as a next or error message.

02:29.500 --> 02:31.530
And that is essentially what we could do,

02:31.540 --> 02:36.700
we could also complete the observable once the response is there because of course if the response is there,

02:36.720 --> 02:40.840
this http request will not yield any responses, 

02:41.140 --> 02:47.830
as I said it could also fail and that is how we could manage such a http request. Now in our app,

02:47.950 --> 02:50.260
we didn't manage an http request though,

02:50.380 --> 02:56.920
we managed a subject or our own event emitter therefore. Now a subject is really just a special kind

02:56.920 --> 03:01.430
of observable, a normal observable is kind of passive,

03:01.480 --> 03:08.890
you wrap a callback or an event source like a click listener with it. So you don't actively trigger

03:08.950 --> 03:11.450
when a new data package is emitted,

03:11.590 --> 03:18.040
that happens when your http requests gets a response or when the user clicks something, instead you

03:18.030 --> 03:18.760
just

03:18.820 --> 03:24.630
yeah well set up this listener and then you can subscribe to it. A subject is more active,

03:24.640 --> 03:29.500
we also subscribe to a subject but there we can manually call next

03:29.590 --> 03:36.520
and that makes it a perfect event emitter because we cannot just subscribe and wait for something which

03:36.520 --> 03:38.360
we can't directly influence

03:38.440 --> 03:42.390
instead we can directly influence when a new data package is emitted

03:42.460 --> 03:45.090
and that's exactly what we need in our application.

03:45.280 --> 03:51.930
When we add a new post, then we actively want to notify our entire application

03:52.030 --> 03:54.270
and that is what we can do with a subject.

03:54.280 --> 04:02.150
So in general, you can think of observables and therefore also subjects as streams of data or of values,

04:02.260 --> 04:08.110
so we've got one value and we can have more values which are emitted over time depending on the observable

04:08.230 --> 04:11.680
and the data source it covers. Then we have the observer,

04:11.680 --> 04:18.300
so that's essentially this set of functions we can call, next, error and complete and for a normal value, 

04:18.310 --> 04:20.220
we typically would call next

04:20.260 --> 04:26.370
and if we have an observable that wraps something like a http request, then it would do that for us

04:26.620 --> 04:33.220
and as I said we can have more than one value over the course of our application, that depends on how

04:33.220 --> 04:34.870
we were using that observable.

04:34.870 --> 04:36.120
Eventually it may end

04:36.160 --> 04:39.160
but of course there are also observables that may never end,

04:39.160 --> 04:41.830
for example if you're wrapping a normal click listener with it,

04:41.950 --> 04:46.690
well then this will typically never end, if you've got an observable that ends, well then the complete

04:46.960 --> 04:48.610
function will be called.

04:49.000 --> 04:54.720
And this is how it works, this is how we work with observables, how we should think about them,

04:54.790 --> 05:00.550
if you want to learn way more about rxjs observables, in the last lecture of this module, you'll

05:00.550 --> 05:01.590
find a link

05:01.810 --> 05:05.000
to an in-depth series I created on YouTube

05:05.060 --> 05:07.700
but that's the core mental model to wrap your head around

05:07.700 --> 05:10.600
for now. We will mostly use the subject,

05:10.670 --> 05:15.320
we will indirectly use some observables and I will explain what they do when we use them

05:15.530 --> 05:16.270
but in the end

05:16.280 --> 05:22.720
think of it as a stream of data which you can actively manage in the case of a subject or which is managed

05:22.730 --> 05:29.240
for you if you are wrapping some well source who can directly influence and then you can decide what

05:29.240 --> 05:33.110
you want to do when new data is emitted in your subscription.

05:33.320 --> 05:39.050
So now with this closer look at observables, let's finish up our form here on the angular frontend and do

05:39.050 --> 05:46.250
some first polishing before we move to the backend and add node so that we don't just have a frontend

05:46.250 --> 05:49.100
but we also start working on the backend.
