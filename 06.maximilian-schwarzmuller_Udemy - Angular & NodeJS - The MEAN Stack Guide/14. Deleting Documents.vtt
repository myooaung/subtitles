WEBVTT

00:02.780 --> 00:09.180
We can save data to mongodb and we can fetch data from it,

00:09.200 --> 00:11.360
now it's time for a new route

00:11.390 --> 00:13.790
and that should be a delete route.

00:13.820 --> 00:20.010
So in that nodejs code in the app.js file, I'll add a new route for the

00:20.060 --> 00:21.740
delete http verb

00:21.800 --> 00:30.470
with app delete for a request that reaches API posts and now here we actually need to encode a new piece

00:30.470 --> 00:32.930
of information into the url

00:33.230 --> 00:41.090
because for delete requests, you send the ID or some identifier of the thing you want to delete as part

00:41.150 --> 00:42.060
of the url,

00:42.080 --> 00:44.630
you don't send a request body here.

00:44.630 --> 00:52.520
So that part is encoded as a dynamic segment because of course I can say delete requests to API posts

00:52.550 --> 00:58.390
and this will delete a resource with that ID because I can't define routes for all possible IDs

00:58.400 --> 00:59.730
we might have,

00:59.900 --> 01:07.320
instead we'll add a dynamic path segment by adding a colon and then any name of your choice, like ID

01:07.850 --> 01:10.430
and this will be extracted by express,

01:10.430 --> 01:17.600
you will be able to access an id property then and this will be dynamically passed ID. So we send the request

01:17.600 --> 01:26.630
to API, posts and then some ID and here on the backend, we will be able to get that some ID value from

01:26.630 --> 01:28.360
that ID property.

01:28.370 --> 01:29.540
Now how does that work?

01:30.390 --> 01:37.200
Let's pass that second function here which is triggered for every incoming request and let me there simply

01:37.200 --> 01:40.780
console log request params,

01:40.860 --> 01:48.810
that is a property managed by nodejs or by express to be precise which gives you access to all encoded parameters

01:49.260 --> 01:51.020
and we only have one ID,

01:51.150 --> 01:59.200
so here we can access params ID and for now let's simply send back the status code 200

01:59.520 --> 02:04.760
json response where we send back a message, post

02:04.850 --> 02:05.970
deleted,

02:06.000 --> 02:07.010
something like that.

02:08.660 --> 02:10.630
With that added, we get our delete route,

02:10.670 --> 02:18.560
now let's connect angular to that, on the angular app we already have our delete button here,

02:18.560 --> 02:20.220
now it's not doing anything yet,

02:20.420 --> 02:21.650
time to change that,

02:21.740 --> 02:28.050
time to add a click listener to that delete button and delete a post.

02:28.220 --> 02:31.260
Now for that, I'll call onDelete, a method

02:31.280 --> 02:36.210
I have yet to add and we want to pass information to that method,

02:36.320 --> 02:39.740
the information should be which post to delete.

02:39.740 --> 02:45.410
Now since we're looping through all the posts here, we got post information and that post actually is based

02:45.410 --> 02:52.840
on our post model and therefore we have access to the ID which is the ID coming from the database, right,

02:52.910 --> 02:57.950
that is that transformation we added here, so we got the ID from our database

02:58.070 --> 03:07.370
therefore we can delete the post. So we can simply pass post ID to our onDelete method,

03:07.490 --> 03:09.790
now of course the onDelete method is missing,

03:09.830 --> 03:12.730
so time to add that, onDelete.

03:12.830 --> 03:19.880
Here I know I'll get a post ID which is of type string because we actually get back that ID in string

03:19.960 --> 03:28.250
form and now we just have to call something in our service which sends that delete request.

03:28.340 --> 03:31.250
Now for that, I'll add a new method here,

03:31.280 --> 03:33.390
delete post,

03:33.500 --> 03:37.150
I expect to get my post ID string here too

03:37.430 --> 03:46.750
and now in there, we can again use the angular http client to send a delete request, to well basically

03:46.750 --> 03:48.510
the same url as before,

03:48.520 --> 03:50.830
so let's wrap that url here,

03:50.920 --> 03:52.240
API posts

03:52.270 --> 04:00.400
but now we add one extra segment here and that extra segment will be our post ID and that's that dynamic

04:00.400 --> 04:01.120
parameter,

04:01.120 --> 04:05.670
it will be part of url and we can pull it out of there or from there

04:05.710 --> 04:12.130
with that dynamic segment parameter on the backend. So now we send that request,

04:12.130 --> 04:15.790
now again we need to subscribe for this request to actually be sent

04:16.040 --> 04:19.850
and there I will simply console log

04:20.290 --> 04:21.650
deleted.

04:22.000 --> 04:24.280
Now let's save all that

04:24.520 --> 04:29.900
and let's see if it works. Let's go back to the frontend and hit delete here,

04:30.900 --> 04:37.290
now I don't see deleted here and on the backend, I also don't see anything because I probably should

04:37.770 --> 04:46.080
use that delete post method I added in the service in our component here to reach out to this posts service

04:46.500 --> 04:47.810
and call delete

04:47.820 --> 04:51.710
post here and pass on the post ID.

04:51.720 --> 04:55.500
Now side note, we will not update the array on the frontend yet,

04:55.530 --> 04:59.330
so we will actually delete it and still see the post on the frontend

04:59.490 --> 05:01.920
but now it should at least send that request.

05:01.920 --> 05:03.370
So let's give that another try,

05:03.400 --> 05:05.610
delete and we see deleted.

05:05.670 --> 05:12.210
Now if we go back, we see that output and this is actually the parameter we fetched from our backend

05:12.210 --> 05:12.420
here,

05:12.420 --> 05:15.120
so from our url.

05:15.390 --> 05:19.840
Now I said we won't update the array on the frontend, that's true

05:19.860 --> 05:23.980
but we also of course don't delete anything on the backend yet, so that's missing.

05:24.150 --> 05:30.530
So what we can do now is we saw that we can get access to that ID we passed as an argument, 

05:30.570 --> 05:37.450
we can now use that to delete an entry in the database and we can again do that through that post model

05:37.530 --> 05:39.860
which we created with mongoose.

05:39.870 --> 05:47.460
Now if we check the official mongoose documentation for deleting items, we can go to queries because

05:47.460 --> 05:54.030
deleting something also is a query but we actually should go to the query API documentation to get a

05:54.030 --> 06:04.480
full overview of of all the methods we can call and there if we go up, we actually see delete one

06:04.670 --> 06:15.620
and here we can specify which entry should be deleted. So we can call post delete one, pass a javascript

06:15.650 --> 06:21.500
object to narrow down what should be deleted and the thing we're looking for is an entry which has

06:21.500 --> 06:28.430
an _id because remember the ID is saved with an underscore in front of its name, so or that ID

06:28.430 --> 06:30.420
field name has underscore at the beginning

06:30.560 --> 06:38.730
in mongodb, so _id should be request params ID.

06:38.880 --> 06:42.320
Let's then add a then block to see if that succeeded

06:42.550 --> 06:45.360
and here we will get the result of that operation

06:45.530 --> 06:56.570
and for now, I will simply console log that result here and then also send my response.

06:56.570 --> 07:02.320
Now if we save that, let's go back to the angular app and click that delete button again.

07:03.720 --> 07:06.410
Now we see on the backend, something happened,

07:06.420 --> 07:15.060
we got a result here and now if we try reloading the app on angular side, no posts added yet because now

07:15.060 --> 07:21.720
we can't fetch that post any more because it was indeed deleted from our backend database.

07:21.720 --> 07:29.400
So deleting now also works as you can see through the delete one operation where we specify which entry

07:29.490 --> 07:34.960
with which ID should be deleted and the ID is received as part of the url.
