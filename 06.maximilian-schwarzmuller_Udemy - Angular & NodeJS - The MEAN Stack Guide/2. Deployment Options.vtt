WEBVTT

00:02.250 --> 00:08.730
When deploying our application, our MEAN application as we built it in this course, we actually have

00:08.760 --> 00:11.890
two options of deploying it.

00:11.910 --> 00:16.510
Option number one is to deploy two separated apps and option

00:16.510 --> 00:20.730
number two is to deploy one combined app.

00:20.730 --> 00:22.140
Now what do I mean with that?

00:22.240 --> 00:29.340
In option number one, two apps, we have an Angular app, the front-end and we have the Node rest API which

00:29.370 --> 00:35.730
is Node Express and MongoDB basically or the access to MongoDB I should say. In the combined

00:35.730 --> 00:43.050
app case, we have one app where we have that Node rest API which also happens to have a route which renders

00:43.110 --> 00:44.900
or returns the Angular app,

00:45.090 --> 00:50.700
please keep in mind we don't have that in our current project setup yet but I will show you how to

00:50.700 --> 00:53.970
restructure the project to use this case.

00:53.970 --> 00:58.980
Right now we have the two app cases, even though we're managing it in one project,

00:58.980 --> 01:04.980
we have our back-end which runs on http://www.localhost:3000 and we have our front-end which runs on

01:04.980 --> 01:06.330
http://www.localhost:4200

01:06.360 --> 01:10.040
we had to start two processes to work on our app.

01:10.200 --> 01:12.450
Now this actually is a setup you use quite a lot

01:12.450 --> 01:18.960
when building modern single page applications because the Angular app is just a static app and therefore,

01:18.960 --> 01:21.010
it requires just a static host.

01:21.060 --> 01:26.250
With that, I mean a host which is capable of returning HTML, Javascript and CSS,

01:26.390 --> 01:30.310
examples would be AWS S3 or Firebase hosting,

01:30.330 --> 01:32.730
of course there are others too.

01:32.970 --> 01:38.300
We just need such a static host because an Angular app executes no server side code,

01:38.370 --> 01:40.470
it's not connected to the Node code.

01:40.470 --> 01:44.500
We send our HTTP requests but that is done from within the browser,

01:44.580 --> 01:50.950
so we only need to work with what the browser uses and that's HTML, Javascript and CSS,

01:51.060 --> 01:55.290
hence a server capable of returning these files is all we need.

01:55.320 --> 01:59.860
We need no PHP interpreter and we all need no server that can execute

01:59.860 --> 02:07.200
Node. Now for the back-end for our Node rest API which we built, this differs. There we need a host which

02:07.200 --> 02:12.170
is capable of running that NodeJS code, which is capable of executing it,

02:12.360 --> 02:20.690
examples would be AWS EC2 or Elastic Beanstalk, Heroku and other hosting providers of course.

02:20.940 --> 02:26.550
So we get these two separated apps which run on totally different domains and that already is the case

02:26.640 --> 02:33.240
during development too, http://www/localhost:4200 for Angular and http://localhost:3000 for Node

02:33.330 --> 02:38.540
sounds similar but actually, due to the different ports, these are really different domains,

02:38.580 --> 02:43.840
they're not connected and we'll have the same set up when we deploy this.

02:44.070 --> 02:51.000
Now we have one combined app, this differs. There we need a host which is capable of running NodeJS

02:51.180 --> 02:58.010
because that's the smallest common denominator so to say and it will then also return the Angular files

02:58.040 --> 02:59.350
whilst it's doing that,

02:59.450 --> 03:02.150
every host can do that basically but NodeJS code,

03:02.150 --> 03:06.140
that's not something every host can do. We'll need such a host for a combined app,

03:06.170 --> 03:09.780
therefore we need the same options as on the left for NodeJS

03:09.830 --> 03:10.580
.

03:10.730 --> 03:16.910
And one other important difference to understand is if you have two separated apps, as we have it in our

03:16.910 --> 03:25.160
course, then we absolutely need these cors headers we're setting on the Node/Express back-end and we're already

03:25.160 --> 03:27.930
doing that because we have that set up.

03:28.040 --> 03:35.180
If you have a combined app, you can actually omit them because then Angular will be hosted or will be

03:35.180 --> 03:38.930
served by the same domain on which our back-end runs,

03:39.110 --> 03:47.830
so requests sent to the back-end will target the same server and therefore no cors headers are required.

03:47.870 --> 03:49.910
These are the options, I will walk you through both,

03:49.910 --> 03:53.180
we will deploy the app in both ways.

03:53.180 --> 03:57.680
Let's start with the two separated apps though because that is the set up we already have.
