WEBVTT

00:02.650 --> 00:06.600
So as mentioned, I want to switch the way we handle this form.

00:06.610 --> 00:12.760
Thus far, we are using the template driven approach which means we let Angular detect the form and

00:12.760 --> 00:15.200
we register controls with ngModel

00:15.280 --> 00:17.350
and that was working fine thus far

00:17.350 --> 00:24.460
but now that I want to add a little bit more advanced features to the form, like my own validator, it's

00:24.460 --> 00:28.840
way easier to do this if we switch to the reactive forms approach.

00:28.840 --> 00:35.200
Now if that doesn't tell you anything, I as always strongly recommend checking out my complete guide on

00:35.200 --> 00:38.050
Angular, there I dive into this in-depth.

00:38.080 --> 00:43.170
In the end, the main difference is that with the template driven approach which we're currently using,

00:43.330 --> 00:47.530
we let Angular infer everything, with the reactive approach,

00:47.530 --> 00:54.130
we clearly define everything in our Typescript code and then just tell Angular which of our defined

00:54.190 --> 01:00.880
controls, defined by us in Typescript maps to which input here. To use that reactive approach,

01:00.910 --> 01:04.060
I first of all need to import something into my app module.

01:04.360 --> 01:09.080
Thus far, we import the forms module and it's added here to the imports array

01:09.250 --> 01:11.840
and this unlocks the template driven approach.

01:12.220 --> 01:19.960
Now I will actually import the reactive forms module and I'll replace the forms module with that, not

01:19.960 --> 01:24.550
just up here of course but also down here in the imports array.

01:24.580 --> 01:33.120
Now we unlock this and what we also now did is we basically disabled our ngModel here,

01:33.280 --> 01:39.620
so if I now would reload, we would get an error that there is no directive with export as set to ngForm,

01:39.640 --> 01:41.500
that already fails

01:41.500 --> 01:42.710
but it would also fail

01:42.730 --> 01:48.120
regarding ngModel because this is now not how we handle forms anymore.

01:48.220 --> 01:51.500
So let's get rid of ngModel on the first input,

01:51.540 --> 01:56.780
let's also get rid on this local reference post form equals ngForm,

01:56.780 --> 01:58.830
we'll also not use that anymore.

01:59.170 --> 02:01.640
Additionally this here won't work anymore,

02:01.780 --> 02:07.210
accessing the title with ngModel, that's now gone because we now don't use ngModel

02:07.230 --> 02:13.970
anymore and these validators, we also have to remove them, we'll add validators differently.

02:14.140 --> 02:17.550
So therefore of course our form will be broken but we'll fix it soon.

02:17.710 --> 02:23.950
For the text area, let's remove ngModel, let's remove the required validator and let's remove that

02:23.980 --> 02:31.020
content local reference there too. Let's remove the argument we passed to onSave post because we don't

02:31.020 --> 02:33.340
have access to the form in the template anymore

02:33.540 --> 02:38.480
and now of course in Typescript, we need to change the way we create our form.

02:38.970 --> 02:42.840
So here, we now create our form programmatically.

02:42.840 --> 02:48.240
This means that first of all, we create our form and store it in a property,

02:48.240 --> 02:56.450
this will be of type form group and form group needs to be imported from @angular/forms.

02:56.490 --> 02:58.870
So this import here needs to be added,

02:58.890 --> 03:06.210
you can actually now remove that ngForm input though. Form group is simply the top level object

03:06.210 --> 03:09.120
for a form you could say, a form group groups

03:09.150 --> 03:15.210
all the controls of a form. You can also have sub-groups in a form if you want to, well then group controls

03:15.210 --> 03:20.110
within a form but the form overall is just one big group and we will work with that.

03:20.430 --> 03:21.550
So now we get that form

03:21.570 --> 03:23.340
but of course it's undefined,

03:23.580 --> 03:27.730
we need to initialize that form and clearly define which controls we have

03:28.140 --> 03:30.640
and we can do that in ngOnInit,

03:30.690 --> 03:35.740
that's always a great place for such initialization tasks. There,

03:35.880 --> 03:39.560
we want to do that initialization, there

03:39.630 --> 03:45.120
we can do that initialization right at the beginning and we can access this form and set it equal to

03:45.120 --> 03:46.800
a new form group,

03:46.830 --> 03:49.260
so we create a new form group object.

03:49.590 --> 03:55.800
This form group object or form group constructor I should say, takes a Javascript object

03:56.280 --> 03:57.270
as an argument

03:57.300 --> 03:59.240
and here we configure our form.

03:59.310 --> 04:04.030
Now you can assign key value pairs here which describe your controls,

04:04.050 --> 04:08.610
so for example if you want to add our title control, we would add title

04:08.880 --> 04:13.830
and you don't have to wrap this in single quotation marks but it's considered a good practice to be

04:13.860 --> 04:21.070
really safe that when your code is later compiled and optimized and uglified, that it's not accidentally,

04:21.120 --> 04:27.450
well removing that name you give it here. So we can assign a name like this

04:28.210 --> 04:34.900
and then here, we turn this into a new form control. Form control is another constructor

04:34.960 --> 04:43.280
which also is imported from @angular/forms. The form control now creates a single control in the form and

04:43.280 --> 04:45.360
form control takes a couple of arguments.

04:45.410 --> 04:51.260
The first argument is the beginning form state and I will start with null by default to have an empty

04:51.380 --> 05:00.260
input, the next argument allows us to attach validators or in general, form control options. Such

05:00.260 --> 05:07.700
options would be a Javascript object and in that object, we can define things like asynchronous validators

05:07.760 --> 05:14.630
which are validators that take time to finish and we'll add such an asynchronous validator later when

05:14.630 --> 05:19.250
we create a validator for the mime type of the file we try to upload.

05:19.250 --> 05:25.490
We got synchronous validators and we will actually add some of these synchronous validators, for example

05:25.490 --> 05:25.960
here,

05:26.090 --> 05:32.100
I want to add a validator for requiring title but before we do that, let's have a look at the last option

05:32.240 --> 05:37.310
and that was updateOn. Now updateOn by default is changed,

05:37.340 --> 05:39.970
so whenever you type, the validity is checked

05:40.190 --> 05:46.770
but you could also set this to blur to only check the validity when you leave, when the focus leaves

05:46.790 --> 05:48.260
that input for example

05:48.260 --> 05:53.540
but I'll stick to the default. Now validators is an array of validators

05:53.570 --> 06:02.690
we want to add and thankfully, Angular already ships with some built-in validators. We import the validators

06:03.050 --> 06:05.710
class here from @angular/forms

06:05.870 --> 06:11.420
and this gives us access to some built-in validators. And now we can add validators by simply accessing

06:11.420 --> 06:16.690
validators. and then we get a couple of built-in ones like required.

06:16.770 --> 06:17.520
Now important,

06:17.570 --> 06:19.950
this is a method but you shouldn't execute it,

06:20.030 --> 06:26.570
instead you just pass a reference to the method here and Angular will execute it on your behalf when it

06:26.570 --> 06:29.640
checks the validity of that form control.

06:30.570 --> 06:35.940
Now if you remember, we had not just the required validator for the title, we also had the minLength

06:35.940 --> 06:36.890
validator,

06:37.050 --> 06:41.800
so we can also add minLength here. Now minLength needs to be executed

06:41.820 --> 06:46.890
because this actually is a factory function which will return the real validator function reference

06:47.280 --> 06:52.240
and we need to execute it to configure the length and there, we could pass three.

06:52.680 --> 06:55.880
Now let me quickly restructure that code so that it's easier to read

06:56.100 --> 06:58.680
and now our title is initialized.

06:58.770 --> 07:01.290
Now of course, we don't just have the title,

07:01.290 --> 07:07.980
we also have the content and I see that my re-organization removed these quotation marks.

07:08.070 --> 07:14.450
As I said, you can remove them, it's not a problem normally but you can also explicitly add them.

07:14.490 --> 07:17.670
So now the content, it will also be a form control,

07:17.670 --> 07:19.770
doesn't matter that it's a text area,

07:19.800 --> 07:22.670
all inputs are form controls

07:22.710 --> 07:29.100
and here, we also set null as an initial value and then we add our validators.

07:29.220 --> 07:32.730
So we add an object where we set the validators to an array

07:32.880 --> 07:37.310
and here, I just want to add validators required.

07:37.480 --> 07:40.610
So now we got the same form as before basically

07:40.630 --> 07:46.920
and let's finish that before we add our file upload. Of course the form is not done yet.

07:47.050 --> 07:48.280
We have our form,

07:48.310 --> 07:53.350
what we're missing is the connection to the template and what we're also missing is the part where we

07:53.350 --> 08:00.240
can pre-populate these controls with concrete values in case we are editing a post, because we always

08:00.280 --> 08:05.620
set the starting values to null but that of course is only correct if we are creating a new post.

08:05.770 --> 08:14.680
Now to set an initial value, we can go to our subscription here where we got our post data here

08:15.610 --> 08:22.770
and then we can reach out to our form which we initialized a couple of lines above and call set value

08:22.800 --> 08:30.050
here. Set value allows you to override the values for your form controls you registered here,

08:30.280 --> 08:36.370
so you pass a Javascript object here and you need to set a value for every form control.

08:36.370 --> 08:40.060
So here we set the title and we simply set this to a string,

08:40.120 --> 08:43.640
this post title and the same for content,

08:43.960 --> 08:51.640
this post content. So with that, we're initialising our post here like that

08:53.400 --> 08:58.260
and now I use the autoformat again which removed the quotation marks, so I'll stick to that for now and

08:58.260 --> 09:00.300
leave it like this.

09:01.290 --> 09:07.830
Again you could re-add those but now we're setting a value here, we're initializing the values in case

09:07.890 --> 09:09.320
we got a loaded post.

09:10.510 --> 09:15.490
Now when we save the post, we no longer get the form as an argument,

09:15.730 --> 09:22.060
instead we have our own form object registered on our or as a property in our class, so we access it

09:22.060 --> 09:23.580
with this form.

09:23.590 --> 09:29.860
We still have the invalid property then and we can also still access the value property, so that works

09:29.860 --> 09:31.140
exactly the same,

09:31.340 --> 09:38.510
so value and then title. The value property will still be a Javascript object where our control names,

09:39.040 --> 09:47.950
so the names we assign here, title and content map to names in that value object so that we can conveniently

09:47.950 --> 09:55.510
access the values entered from the user or by the user on the same names here, title and content.

09:55.510 --> 10:00.580
This of course means that if you were to change the names up here, then you also need to change them

10:00.790 --> 10:03.280
down here when you access the values.

10:03.280 --> 10:08.340
Now here I also will access this form value, title and content.

10:08.380 --> 10:12.140
So now we're almost done. Now for resetting,

10:12.400 --> 10:19.480
we just called this form reset, not reset form, it's just reset and now we're done with the Typescript

10:19.480 --> 10:20.430
code.

10:20.440 --> 10:26.680
Now what's missing is the part where we synchronize our HTML code to our Typescript,

10:26.680 --> 10:35.800
so where we tell Angular which input here relates to which control we created here because you could

10:35.800 --> 10:42.730
of course argue that the title control should obviously be that input because it has the name title but Angular

10:42.730 --> 10:43.150
doesn't

10:43.150 --> 10:49.000
infer this, it gives you the flexibility of defining no name here, you can now remove that or a different

10:49.000 --> 10:49.670
name.

10:50.020 --> 10:56.750
So instead of relying on something like this, what you do instead is you add a special directive here.

10:57.100 --> 11:05.480
However first of all, you add a directive to your overall form, the form group directive. This form group

11:05.480 --> 11:08.500
directive takes your form object,

11:08.630 --> 11:09.960
so form here

11:09.980 --> 11:13.270
because in Typescript we have that form property.

11:13.370 --> 11:20.030
It takes this and basically tells Angular, hey for the form I created in Typescript, this is the HTML

11:20.030 --> 11:20.850
form.

11:21.140 --> 11:29.120
And now here on the input, we can use a different directive, form control name and type the name of the

11:29.120 --> 11:32.380
control as we defined it here,

11:32.570 --> 11:34.450
so title for example.

11:34.920 --> 11:40.190
So now we pass title here and we're not wrapping this in square brackets because we're just passing

11:40.190 --> 11:41.090
a string,

11:41.090 --> 11:42.280
this is a shortcut,

11:42.290 --> 11:46.310
you could wrap it in square brackets to do property binding

11:46.430 --> 11:50.420
but then you would have to pass a string here with single quotation marks.

11:50.420 --> 11:53.330
So here if you pass title, that's the equivalent,

11:53.330 --> 11:57.410
so the other syntax is of course shorter which is why I'm using it like this

11:57.410 --> 12:04.540
and now we connected this input to our form control. Now to hook up that error,

12:04.770 --> 12:12.000
I now need to be able to access my title form control and we do this by accessing the overall form

12:12.000 --> 12:17.700
and there, you have a get method which gives you access to a control where you pass the control name

12:17.700 --> 12:25.560
as a title and then you should have an invalid property there because this will now be the form control

12:25.650 --> 12:28.430
you selected and it checks if that is valid.

12:29.530 --> 12:34.670
Now we can do the same for the text area and definitely feel free to do this on your own, pause the video,

12:34.710 --> 12:37.010
do it on your own.

12:37.060 --> 12:43.960
What I'll do is I'll add my form control name there too, the form control name directive and make sure

12:43.960 --> 12:48.980
you get the casing correct here and the name of course is content there.

12:49.150 --> 12:55.670
And now for the mat-error, I therefore access form get and then content as a string.

12:56.600 --> 12:58.810
Now we should have a working form again,

12:58.940 --> 13:03.940
we should be able to do everything we did before but now with the reactive approach.

13:04.130 --> 13:12.490
So if we save everything and I try this, does this work? And we don't need to pick an image yet, we're not

13:12.490 --> 13:13.440
handling it.

13:13.570 --> 13:16.400
I can save this post and I see it here

13:16.630 --> 13:22.470
and if I edit it and I add an extra exclamation mark, this also works.

13:22.480 --> 13:26.490
So now we're having a working form again but with the reactive approach.

13:26.650 --> 13:32.740
Well that's great but we haven't really advanced our app from a functionality perspective, right.

13:32.740 --> 13:38.290
So time to go back to that image picker and finally take advantage of the reactive form and handle that

13:38.320 --> 13:39.040
image picking.
