WEBVTT

0
00:02.300 --> 00:06.940
Now as I said, in this course we'll build a Single Page Application with Angular.

1
00:06.980 --> 00:08.230
Now what is that?

2
00:08.240 --> 00:10.360
What is a Single Page Application?

3
00:10.820 --> 00:18.670
Well in an Angular app, we'll have one root HTML file, a so-called index.html file and

4
00:18.680 --> 00:22.690
we will serve that from our Node server or from a different server,

5
00:22.700 --> 00:23.410
that's important,

6
00:23.410 --> 00:28.870
it can be totally decoupled from our Node backend and it actually will be

7
00:29.190 --> 00:35.890
and this HTML page basically includes some script imports that houses our Angular app,

8
00:35.900 --> 00:44.150
so the Angular framework and our own code and we use this application to dynamically re-render what

9
00:44.150 --> 00:50.390
the user sees, without ever requesting a second page to be rendered by the server.

10
00:50.390 --> 00:51.060
Why?

11
00:51.200 --> 00:57.440
Because by having this pattern, we never need to reload the page just because the user maybe clicked

12
00:57.470 --> 00:59.640
on a post and want to see the details.

13
00:59.750 --> 01:05.900
We can instead navigate to that page directly because we don't really leave the page, we just remove

14
01:05.900 --> 01:11.860
some elements from the DOM and add new elements and all of that is handled for us by the Angular framework,

15
01:11.870 --> 01:15.060
it's really convenient to use and to work with the DOM with it.

16
01:15.410 --> 01:22.220
And therefore we have a powerful way of immediately changing the page, maybe showing a spinner whilst

17
01:22.250 --> 01:24.320
we're fetching some data behind the scenes,

18
01:24.350 --> 01:30.230
so that list of posts which we probably still need to get but we will do that behind the scenes and

19
01:30.230 --> 01:37.310
this provides a highly-interactive, mobile-app-like feeling, a very responsive and fast web page where

20
01:37.310 --> 01:40.460
we never have to wait, where things always happen and

21
01:40.670 --> 01:45.980
that of course is a great user experience and this is why we'll use JavaScript and Angular

22
01:46.250 --> 01:52.580
therefore for the entire front-end, for the entire user interface and we will use Node, Express and MongoDB as

23
01:52.580 --> 01:58.500
a back-end to which we reach out behind the scenes to fetch and send data

24
01:58.670 --> 02:05.840
but the whole user interface is handled as one page only which is dynamically re-rendered all the time

25
02:05.840 --> 02:06.710
by Angular.