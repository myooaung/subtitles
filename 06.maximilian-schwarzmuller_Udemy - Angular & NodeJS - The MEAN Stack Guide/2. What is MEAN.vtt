
0
00:02.290 --> 00:08.470
So what does MEAN stand for? What are the different components we'll learn about in this course? MEAN

1
00:08.470 --> 00:11.530
comprises a set of four technologies and

2
00:11.530 --> 00:13.690
this is what it stands for,

3
00:13.810 --> 00:19.840
the M stands for MongoDB and it's the database we'll use in this course,

4
00:19.840 --> 00:26.590
so the part where we'll be able to persist the data the users of our application generate, like the user

5
00:26.590 --> 00:27.530
data itself

6
00:27.640 --> 00:32.130
but also like posts or messages they send, things like that.

7
00:32.240 --> 00:38.290
The E stands for Express and ExpressJS is hard to understand without the N,

8
00:38.440 --> 00:40.410
so let's quickly fast-forward.

9
00:40.540 --> 00:44.180
We've also got the A and the A stands for Angular

10
00:44.230 --> 00:45.520
now I'll come back to the N which

11
00:45.550 --> 00:51.370
is related to the E but Angular is our client-side technology,

12
00:51.420 --> 00:53.170
it is a JavaScript framework

13
00:53.170 --> 01:00.940
in the end which we will use to render a nice dynamic UI, User Interface, to our users. It runs entirely

14
01:01.030 --> 01:08.050
in the browser, not on the server at all and therefore it really has just one job, presenting a nice and

15
01:08.050 --> 01:12.400
pleasant, interactI've and reactive user interface.

16
01:12.400 --> 01:13.940
Now, what's the N then?

17
01:14.080 --> 01:17.100
Well, you probably already saw that something is missing.

18
01:17.110 --> 01:23.140
We've got a database and we've got something running in the browser, but we certainly also need to run some

19
01:23.140 --> 01:24.510
logic on the server,

20
01:24.670 --> 01:30.490
for example the authenticating users. This is not something we can do in the browser because A, browser code

21
01:30.490 --> 01:33.850
can easily be hacked or changed

22
01:34.000 --> 01:36.740
and B, it's way too complex,

23
01:36.760 --> 01:43.290
it would take up quite a significant amount of resources and slow down our front-end, our user interface.

24
01:43.990 --> 01:45.590
N stands for NodeJS

25
01:45.720 --> 01:54.280
and it's the JavaScript runtime, the server-side language we'll use in this course for our server-side

26
01:54.280 --> 01:54.760
code, so

27
01:54.760 --> 02:01.460
for our core business logic that runs on the server. And now the E also is related to it because whilst

28
02:01.500 --> 02:09.010
NodeJS is the language well use on the server, Express is a framework for NodeJS that makes working

29
02:09.010 --> 02:09.900
with it easier,

30
02:09.910 --> 02:16.510
you wouldn't need ExpressJS per se, but it makes working with it much easier, just as Angular is a framework

31
02:16.510 --> 02:18.370
for JavaScript in the browser,

32
02:18.370 --> 02:20.300
you don't need it, but it makes things easier

33
02:20.350 --> 02:23.110
but let's take a more detailed look at all these things.

34
02:23.110 --> 02:24.880
Now I want to look at Angular

35
02:24.880 --> 02:29.820
first. As I already said, Angular runs on the client-side, in the browser.

36
02:29.820 --> 02:37.810
it's a framework building up on JavaScript or using JavaScript and it's used to create so-called Single

37
02:37.810 --> 02:39.650
Page Applications,

38
02:39.670 --> 02:43.560
this essentially means that it handles the entire front-end logic.

39
02:43.600 --> 02:47.310
So, everything your user is going to see, Angular is responsible for it

40
02:47.380 --> 02:49.770
but I'll come back to it in a few seconds.

41
02:49.790 --> 02:56.410
Angular's job is to render the user interface with dynamic data and that dynamic data part is important

42
02:56.410 --> 03:03.520
of course, it's job is not just to render some static HTML and some CSS, we wouldn't need JavaScript for

43
03:03.520 --> 03:04.040
that,

44
03:04.300 --> 03:08.200
it's job is to update the UI whenever we have new information,

45
03:08.200 --> 03:14.370
let's sa, when you create a new post, we want to immediately update the UI to show that new post there.

46
03:14.410 --> 03:20.230
It is also responsible for handling user input, so validating that user input and also sending it to

47
03:20.230 --> 03:22.170
the server because that's the third part it does,

48
03:22.180 --> 03:28.330
it communicates with our backend, so with that Node, Express and MongoDB combination that seems to be

49
03:28.330 --> 03:33.060
responsible for that. Angular provides a mobile-app-like user experience because

50
03:33.070 --> 03:39.880
since we handle everything in the browser through JavaScript, we never need to reload the page,

51
03:39.880 --> 03:46.090
we just change parts of the page with JavaScript through Angular and therefore everything happens instantly

52
03:46.210 --> 03:52.240
in a very reactive way and that is the feeling we know from mobile apps. Now that is still only the front-end

53
03:52.240 --> 03:58.090
though. As I said, NodeJS is the language were going to use for the backend, so on the

54
03:58.090 --> 04:00.730
server-side which we also build in this course.

55
04:00.910 --> 04:04.380
NodeJS is a server-side library, JavaScript runtime

56
04:04.510 --> 04:07.400
and you know that Javascript can run in the browser,

57
04:07.450 --> 04:12.000
well NodeJS simply takes it, adds some things that are useful on the server

58
04:12.010 --> 04:17.480
like working with files, working with HTTP requests and now we can use JavaScript on the server too,

59
04:17.530 --> 04:18.700
pretty amazing.

60
04:18.930 --> 04:23.280
NodeJS listens to incoming requests and is able to send back responses,

61
04:23.290 --> 04:29.690
for example our Angular app could send a request to fetch a list of all the posts and Node could handle

62
04:29.690 --> 04:31.280
that request, do something,

63
04:31.330 --> 04:35.690
reach out to the database and send back a response with all these posts.

64
04:35.830 --> 04:40.110
NodeJS executes server-side logic in general, so authentication,

65
04:40.140 --> 04:46.510
anything we don't want to run in the browser for security or performance reasons and NodeJS is also able

66
04:46.510 --> 04:50.330
to interact with databases and files. Angular can't do this,

67
04:50.350 --> 04:55.270
it doesnt have access to any file system and especially not to a file system on some remote machine

68
04:55.270 --> 05:00.610
on a server and whilst theoretically, you could connect to a database from Angular,

69
05:00.760 --> 05:06.960
since all of your client-side JavaScript code is visible to the user, you can have a look at it in your developer

70
05:06.960 --> 05:08.220
tools of your browser,

71
05:08.370 --> 05:13.710
it would be very insecure to connect to your database because you would expose all your credentials

72
05:13.710 --> 05:16.030
and everything, you don't want to do that.

73
05:16.180 --> 05:22.590
Therefore, NodeJS is an alternative to PHP if you know that or Ruby on Rails, ASP.net, things

74
05:22.590 --> 05:23.420
like that and

75
05:23.850 --> 05:28.710
it's rarely used standalone, just like these languages, you typically use a framework along with

76
05:28.710 --> 05:28.950
it

77
05:29.160 --> 05:32.140
and that framework you typically use is Express.

78
05:32.310 --> 05:39.720
Express is a NodeJS framework, so it still uses NodeJS, the same language but it adds a lot of utility features. So it

79
05:40.170 --> 05:45.380
offers additional functionalities or in general, it makes things easier.

80 
05:45.590 --> 05:51.250
ExpressJS is middleware-based and we'll see what this means once we dive into the code.

81
05:51.510 --> 05:58.830
It basically funnels incoming requests through a chain of middlewares, of steps where we can do something

82
05:58.830 --> 06:01.080
with the request, read some data from it,

83
06:01.080 --> 06:07.240
manipulate it, check if the user is authenticated or basically send back a response immediately,

84
06:07.260 --> 06:12.720
this chain allows us to write very structured code and you will learn everything about

85
06:12.720 --> 06:14.010
it in this course of course.

86
06:14.010 --> 06:21.180 
And last but not least, it includes routing, which means that we could render views,

87
06:21.180 --> 06:21.390
so HTML pages with it,

88
06:21.390 --> 06:25.450
we're not going to do this in this course though because Angular should handle our entire front-end

89
06:25.470 --> 06:27.450
and again this is also something we'll see but

90
06:27.750 --> 06:34.320
more importantly, we can handle different requests to different endpoints which will be important

91
06:34.320 --> 06:39.870
for connecting Angular to the backend because if we want to fetch a list of posts, if we want to send some

92
06:39.870 --> 06:47.340
requests to /posts, so our-domain/posts, if we want to create a new post, we want to send a

93
06:47.340 --> 06:53.850
different request to our-domain/posts for example and ExpressJS allows us to implement this

94
06:53.850 --> 06:59.360
routing logic so that different requests to different URLs are handled correctly.

95
06:59.360 --> 07:03.170
Again, this will all be implemented step-by-step throughout the course.

96
07:03.210 --> 07:09.220
So to sum it up, ExpressJS simplifies the usage of NodeJS, it is a tool we definitely want to use.

97
07:09.510 --> 07:14.100
If you have a PHP background for example, you could compare it to Laravel for PHP,

98
07:14.220 --> 07:15.910
it makes things easier.

99
07:15.920 --> 07:20.580
Now there is one thing missing and that is MongoDB of course. MongoDB,

100
07:20.640 --> 07:23.190
as I already said, is a database.

101
07:23.190 --> 07:29.970
it's a NoSQL database to be precise and it stores so-called documents in so-called collections.

102
07:29.970 --> 07:37.050
Now, chances are you might have heard about SQL databases like MySQL, Microsoft SQL where you

103
07:37.050 --> 07:41.490
have records, rows which you store in tables.

104
07:41.520 --> 07:45.230
Now NoSQL has a different logic than SQL databases but

105
07:45.240 --> 07:47.200
in general, it's still a database, so

106
07:47.220 --> 07:54.960
you store your application data on a server, so that it persists across page reloads, across the user

107
07:54.960 --> 07:56.230
leaving your page,

108
07:56.310 --> 07:57.120
things like that.

109
07:57.150 --> 08:04.170
So any data that is not just temporary data definitely has to be stored in such a database. Now that

110
08:04.170 --> 08:09.320
NoSQL thing means that this kind of database enforces no schema, so

111
08:09.360 --> 08:15.570
you can have different documents with different pieces of information in the same table or collections

112
08:15.570 --> 08:16.670
as it is called here and

113
08:16.860 --> 08:19.860
it also doesnt really work with relations.

114
08:19.860 --> 08:25.680
You will see in this course that we can kind of relate different documents with each other, but in general

115
08:25.800 --> 08:32.740
it's way less strict and flexible regarding relations than a SQL database is. A NoSQL database

116
08:32.740 --> 08:38.820
is more about storing multiple unstructured documents, though you can get some structure into it and

117
08:38.820 --> 08:41.100
we will actually do that in this course.

118
08:41.100 --> 08:45.720
I'll come back to what exactly MongoDB is and how it works in the respective sections,

119
08:45.720 --> 08:47.100
no worries.

120
08:47.130 --> 08:49.320
Now last but not least, it is easily connected to

121
08:49.320 --> 08:49.790
Node,

122
08:49.830 --> 08:50.790
that's pretty cool,

123
08:50.790 --> 08:56.560
it's very easy to integrate or Node/Express and we don't connect it to Angular. 

124
08:56.580 --> 08:57.620
I already said this,

125
08:57.690 --> 09:02.520
theoretically you could find a way but you don't want to do that because you don't want to expose your

126
09:02.520 --> 09:08.240
database credentials in your browser-side code which can easily be viewed by the user,

127
09:08.340 --> 09:09.340
it's accessible in

128
09:09.340 --> 09:11.400
the developer tools of the browser.

129
09:11.550 --> 09:17.870
So MongoDB is a powerful database which can easily be integrated into a Node/Express environment

130
09:18.270 --> 09:25.830
and it's very popular these days because it's very flexible and it's highly-scalable, it's able to

131
09:25.830 --> 09:32.520
handle a large amount of throughput, so requests per second or write-actions per second and read-actions

132
09:32.520 --> 09:38.560
per second and we'll dive deeper into this in the sections where we start working with it.

133
09:38.580 --> 09:42.260
Now you could theoretically replace it with a different database,

134
09:42.300 --> 09:46.590
you could use a SQL database in a Node/Express/Angular application too,

135
09:46.620 --> 09:53.520
you're not limited to MongoDB and I just want to really emphasize this. I'm using MongoDB because

136
09:53.520 --> 09:59.490
it's part of this popular MEAN stack and it has some advantages but depending on the application

137
09:59.490 --> 10:05.870
and the type of data you are storing, if it's a data with a lot of relations, maybe a SQL database might

138
10:05.870 --> 10:09.400
be better and whilst we will use MongoDB in this course,

139
10:09.410 --> 10:11.770
I just want to highlight this is not a must.

140
10:11.780 --> 10:13.730
You could use any database here,

141
10:13.840 --> 10:19.290
the core logic we'll dive in really is the connection of Angular and Node.

142
10:19.340 --> 10:25.310
So with that, let me quickly come back to what exactly that single page application thing meant and how

143
10:25.310 --> 10:31.190
the big picture of such a MEAN app looks like before we start diving into our setup of the course

144
10:31.490 --> 10:33.270
and start building our MEAN app.