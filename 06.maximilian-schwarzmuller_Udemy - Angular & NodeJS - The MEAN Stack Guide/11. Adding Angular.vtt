WEBVTT

00:02.130 --> 00:03.140
We added our

00:03.240 --> 00:07.130
post back in endpoint with the app post method,

00:07.140 --> 00:13.750
now let's connect angular and by the way because I see it, we could also use app get down here,

00:13.920 --> 00:20.760
we can also stick to app use, the post request won't reach this because we don't call next here and

00:20.760 --> 00:23.770
we absolutely shouldn't because we're already sending a response,

00:23.790 --> 00:31.080
we'll get an error if we still try to send another response but we could call get here to really narrow

00:31.080 --> 00:32.710
this down to get requests.

00:32.820 --> 00:38.790
So that's a side note but we want to go back to angular, in post create component we triggered that add

00:38.790 --> 00:39.880
post method,

00:40.020 --> 00:43.980
so it's in that method that we should send our request.

00:43.980 --> 00:52.860
So in add post, pushing it to our local posts is still fine because we still want to use our posts here

00:52.860 --> 00:53.940
probably

00:54.180 --> 00:57.570
but I also want to store it on the server.

00:58.370 --> 01:02.630
So what I'll add here and you could also add this at the very end,

01:02.630 --> 01:07.580
as a side note what we're doing here basically is optimistic updating, we're updating the local data

01:07.610 --> 01:11.630
before we have server side confirmation that it succeeded.

01:11.960 --> 01:22.140
We could send our request here though, this http post because we'll send a post request, 

01:22.140 --> 01:28.730
the url will be the same one as for the get request but with a different http verb,

01:29.090 --> 01:34.270
so like this, the post requests here also get back some data

01:34.300 --> 01:36.730
so we can define this here with the generic type,

01:36.830 --> 01:39.680
we know we'll just get a message which is of type string

01:40.130 --> 01:43.670
and then we need to pass a second argument to that post method

01:43.730 --> 01:49.100
and that is that data we want to post and that of course is our, well post data here,

01:49.100 --> 01:54.860
so this post constant. Now as before, nothing will happen if we don't subscribe,

01:55.070 --> 01:58.390
so let's call subscribe here and in that subscribe method

01:58.400 --> 02:00.450
we got the typical handlers, here

02:00.470 --> 02:07.770
I will handle the success case and I will get back my response data,

02:07.790 --> 02:14.690
you can name this argument however you want, it will have this format and I will simply console log response

02:14.690 --> 02:16.730
data message here.

02:16.850 --> 02:22.050
Now I said we used optimistic updating and we could move that to the end

02:22.310 --> 02:28.400
but we can also switch from optimistic updating to only updating if we did succeed by cutting these

02:28.410 --> 02:29.120
two calls

02:29.190 --> 02:36.680
here and adding them in the subscribe method because this will execute asynchronously only once we got

02:36.680 --> 02:41.530
a success response because this first argument is only called for success responses,

02:41.810 --> 02:50.540
so we will only push the new post to the local posts here if we really, well have a successful response

02:50.540 --> 02:52.460
from our server side.

02:52.610 --> 03:00.200
With that we can restart the ngServe command or restart the local server, the node server should again

03:00.380 --> 03:02.330
have restarted automatically

03:02.600 --> 03:11.160
and now let's see that in action and we will see if it works by, well seeing a log in our server side

03:11.210 --> 03:11.880
log,

03:12.110 --> 03:18.600
so here where the node is running and seeing a log in the browser because we're also logging here

03:18.620 --> 03:20.520
once we got a response.

03:20.520 --> 03:29.420
So let's go back to our application and reload it and let's now simply try adding a new post here, some

03:29.420 --> 03:38.930
cool content, hit save post and we get an error again, another cors error,

03:38.930 --> 03:46.680
now what's wrong with that here? It's actually saying that the request header field content type which is set

03:46.710 --> 03:52.400
automatically by angular to application json by the way, that this is not allowed.

03:52.480 --> 04:00.620
So if we go back to our express backend here, we did add it though, access control allow header and that

04:00.620 --> 04:01.930
simply is a typo,

04:01.930 --> 04:03.550
it should be headers,

04:03.550 --> 04:04.930
sorry about that.

04:04.930 --> 04:10.230
So with that added, if we restart, we should be able to, we don't even need to reload

04:10.240 --> 04:13.840
but let's do it anyways I guess, so let's try this again.

04:14.150 --> 04:22.950
New post, something cool and at least you could see that cors thing in action filtering not just for

04:22.960 --> 04:24.900
domain but also for the headers

04:24.900 --> 04:28.530
and now if I hit this, the new post is added here which is a good sign,

04:28.530 --> 04:33.410
we get post added successfully here which means we got a success response from the server

04:34.440 --> 04:38.670
and if we check our server side log, we also see the post object here.

04:38.840 --> 04:44.890
ID is null because we didn't set any on the client but we see the title and we see the content.

04:45.300 --> 04:47.570
So this is now working as expected,

04:47.580 --> 04:48.800
we're posting data,

04:48.840 --> 04:50.350
we're getting data.

04:50.730 --> 04:56.910
Of course one important thing is missing besides the ability to edit or delete posts

04:57.120 --> 05:00.040
and that is we're not storing the posts anywhere,

05:00.060 --> 05:01.740
we got no database.

05:01.740 --> 05:05.410
So time to add mongodb in the next course section.
