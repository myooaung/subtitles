WEBVTT

00:02.500 --> 00:06.610
Updating and fetching posts, that's all working and that's great

00:06.610 --> 00:08.470
and we're making good progress.

00:08.530 --> 00:09.050
Sure

00:09.070 --> 00:13.320
authentication is missing and I also want to add an image upload soon

00:13.660 --> 00:19.090
but there's one thing I want to do in this module still before we move on to such features and that

00:19.090 --> 00:20.480
is our backend.

00:20.560 --> 00:23.200
Right now we're organizing everything in app.js

00:23.350 --> 00:30.550
and this is ok, it's still no super big file but I actually want to organize my routes here differently

00:30.850 --> 00:34.390
because we'll later add more routes for authentication and so on

00:34.450 --> 00:36.320
and I really want to group them.

00:36.520 --> 00:41.870
So just as we have a folder and file structure on the frontend, I want to have one on the backend.

00:42.100 --> 00:48.350
So besides our models folder which we're using for the post model right now, I'll add another folder and

00:48.350 --> 00:52.820
I'll name it routes and then I want to organize the routes for our backend.

00:53.050 --> 00:55.240
I'll add a new subfolder and name it post.js

00:55.240 --> 01:00.410
in the routes folder now, excuse me, posts.js

01:00.460 --> 01:07.380
actually because it's for all our posts. Now in there, I want to add all my posts routes and I will

01:07.380 --> 01:12.570
actually use another feature provided by express, its own router. For that

01:12.570 --> 01:20.370
I'll first of all import express here with require express in that new posts.js file and then I will set up

01:20.370 --> 01:25.980
the express router by creating a new constant which I'll name router, the name is up to you as always,

01:26.210 --> 01:28.880
where I will simply execute express and there,

01:28.900 --> 01:31.050
the router constructor.

01:31.050 --> 01:37.260
So now I got my router here and now I just wanted to define my routes and just as we did it with app in

01:37.280 --> 01:40.230
app.js here, app post app get,

01:40.230 --> 01:47.910
we can now use router get and so on here and it essentially works in exactly the same way as it did

01:47.940 --> 01:48.830
before.

01:49.110 --> 01:53.850
So now here, we can for example replicate this post route by grabbing its

01:53.890 --> 01:57.540
url, make this a post route here,

01:57.810 --> 02:04.800
pass the url as the first argument and then this function here as a second argument and therefore

02:04.800 --> 02:07.720
we can of course simply grab all these routes here,

02:08.070 --> 02:16.290
cut them from the app.js file and add them here and simply replace app with router.

02:16.350 --> 02:21.930
Alternatively, named this app but I want to stick to router to make this really clear that it's an extra

02:21.960 --> 02:29.400
feature. Now I'll simply select all apps here and replace them with router and we're pretty good to go.

02:29.460 --> 02:35.990
Now we need to export this router to make express aware of it or to be able to make it aware of it.

02:36.120 --> 02:42.560
For that I'll use the node exports syntax with node module exports and simply export the entire router

02:42.700 --> 02:43.900
object.

02:44.020 --> 02:49.830
Now with that, we need to import it into app.js so that we can again make our main express app

02:49.950 --> 02:55.040
aware of these extra routes because right now, all our routes would fail.

02:55.140 --> 03:02.520
So back in the app.js file, I will import something here, maybe above the post model,

03:02.640 --> 03:09.960
oh by the way, the post model I need to import that in my route file here in the post file now because

03:09.990 --> 03:12.120
that is where I used that post model,

03:12.330 --> 03:16.730
so let's go to the top there and actually import posts here.

03:17.010 --> 03:18.470
The path changed,

03:18.480 --> 03:24.570
now we need to go up one level because we're in the routes folder and then into the models folder.

03:24.810 --> 03:28.920
So now we have the post model imported into the routes file,

03:28.920 --> 03:35.550
we don't need it in the app.js file, here we're never accessing it and now I can import my posts

03:35.670 --> 03:36.390
routes

03:39.390 --> 03:44.830
by simply requiring ./routes posts.

03:44.870 --> 03:53.720
So now this router object is imported and stored in this post routes constant here and now to make express

03:53.720 --> 04:00.800
aware of it, I can simply call app use posts routes and this will do the trick.

04:03.470 --> 04:05.220
We can finetune this however,

04:05.390 --> 04:12.500
actually later we'll have multiple routes files and this one should only handle routes which reach API

04:12.590 --> 04:17.820
posts slash nothing or slash something, like that ID.

04:18.230 --> 04:25.190
So I want to cut that part here and assume that any route or any request reaching that file already

04:25.190 --> 04:33.920
was filtered for that so that I can then add this here in app.js as a first argument of app use, here

04:34.200 --> 04:39.590
I will filter for requests going to API posts and only requests

04:39.600 --> 04:42.540
where the url or the path of the url

04:42.630 --> 04:51.120
starts with that will be forwarded into the posts routes file and routing setup. And then in here, we

04:51.120 --> 04:56.820
don't have to check for this again because it will already have been filtered for that and it will also

04:56.820 --> 04:58.740
be stripped off that by the way,

04:58.740 --> 05:06.600
so the path we're looking at here will actually be the path after whatever we added here and there

05:06.600 --> 05:07.330
for now,

05:07.410 --> 05:09.470
here we have our post request,

05:09.570 --> 05:15.200
we now also remove it for the put request, we leave the ID here though because that's some extra

05:15.200 --> 05:23.950
addition to the path which is important here, for the get request we remove it all, for the posts request

05:23.980 --> 05:30.570
down there we just leave the ID, here we remove that and now we get a path set up,

05:30.680 --> 05:38.520
let's add the slash again where we should still have a working app as before and we can test this by for example

05:38.540 --> 05:38.900
deleting

05:39.030 --> 05:41.460
this, seems to work,

05:41.630 --> 05:50.000
also if I reload, where we can add a new post again so let's also try this and where we now just have

05:50.000 --> 05:52.350
a nicer set up on the backend.
