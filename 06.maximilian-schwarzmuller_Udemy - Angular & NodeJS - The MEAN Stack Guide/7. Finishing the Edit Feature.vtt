WEBVTT

00:02.230 --> 00:09.860
Now we're getting our posts here and now we just need to pre-populate our form with the values of

00:09.910 --> 00:10.960
that post.

00:11.050 --> 00:16.720
Now since we're using the template driven approach, this means that we have to do one-way binding on

00:16.750 --> 00:23.350
ngModel here, just using it to register this as a control isn't enough anymore,

00:23.530 --> 00:30.220
we need to give angular the extra information of our default values you want to use and this can be done

00:30.430 --> 00:37.600
by simply wrapping ngModel with square brackets and then we simply refer to the post,

00:37.690 --> 00:42.400
so that post property we have and that must not be private for that

00:42.410 --> 00:44.890
though so let's remove that private decorator,

00:44.890 --> 00:45.930
this was an error,

00:45.940 --> 00:47.950
it should be a public property.

00:48.160 --> 00:51.360
So now we can access that post from within the template

00:51.580 --> 00:55.590
and here, I now access post.title, like this

00:56.020 --> 00:57.850
and the same for the content.

00:57.970 --> 01:02.500
I wrap it with square brackets and then access post.content.

01:02.500 --> 01:08.680
Now if we save this, let's try this out and let's see if we can visit this page and actually see an

01:08.680 --> 01:15.190
added form which holds our default values. For that if I go back to the post list component, let's click

01:15.190 --> 01:17.650
that add it button here

01:17.880 --> 01:21.550
and if I do click it, we actually indeed see new post

01:21.600 --> 01:24.560
and this is a new post. So this is working,

01:24.600 --> 01:29.360
it's pre-populated with our data and we can still change that of course.

01:29.430 --> 01:37.050
Now we just want to make sure that when we submit our post here, we actually do update it and not add it.

01:37.680 --> 01:40.350
For that I'll go to my posts service

01:40.500 --> 01:44.760
and here we don't really have a method for updating the post,

01:44.760 --> 01:52.050
we have one for adding and for deleting but now it's time to add a new one, update post and there I expect

01:52.080 --> 01:55.750
to get an ID of the post which should get updated

01:55.950 --> 02:04.200
and then let's say the post data. You could of course also again get a title and a new content, whatever

02:04.290 --> 02:05.420
you prefer,

02:05.580 --> 02:10.070
let's go with the title and content again to be consistent with add post I guess.

02:10.380 --> 02:19.560
Then again I'll create a new post here that will be of type post and it's a javascript object which

02:19.560 --> 02:23.480
has to have an ID and that will be the ID we're getting here,

02:23.670 --> 02:29.010
it'll also have a title and that's the title we're getting as an argument and a content which is the content

02:29.010 --> 02:30.640
we have as an argument.

02:30.660 --> 02:34.280
Now we need a backend route to send this request to.

02:34.560 --> 02:40.310
So let's go back to our backend, to the app.js file and here maybe below the post route

02:40.320 --> 02:42.260
but the position doesn't really matter,

02:42.270 --> 02:48.660
I'll add another route where I accept a different kind of http request and there are actually two

02:48.780 --> 02:50.160
http requests

02:50.160 --> 02:58.350
you could take when it comes to updating content. You could handle put requests to put a new resource

02:58.350 --> 03:01.250
and completely replace the old one with it

03:01.710 --> 03:10.320
or you take patch to only update a resource, an existing resource with new values and it's up to you

03:10.320 --> 03:12.740
regarding how you want to handle this.

03:12.760 --> 03:20.700
Now I will accept the put request here and I will accept a request which is reaching API/posts

03:20.880 --> 03:27.730
but now important, I also want a dynamic segment here and that will be ID,

03:27.780 --> 03:32.390
so the ID of the post which I want to replace, that is what I'm expecting here.

03:32.430 --> 03:37.700
With that, let's add our normal method which we already know here on the backend

03:38.100 --> 03:44.090
and now we just need to use mongoose to update a resource. For that

03:44.160 --> 03:46.720
let's use the post model again

03:47.070 --> 03:51.610
and here we can actually use the update one method.

03:51.960 --> 03:53.570
Now update one

03:53.610 --> 04:00.770
first of all takes the, well a javascript object which narrows down which one to update

04:00.990 --> 04:01.890
and here

04:02.070 --> 04:05.700
this will simply be identified by an object which has an ID,

04:05.790 --> 04:12.990
note this is of course still _id on the server because in mongodb, our items have their ID

04:12.990 --> 04:16.430
stored in an _id field,

04:16.590 --> 04:26.170
so where that ID is equal to you request params ID, so this ID which is encoded in our url

04:26.280 --> 04:34.080
just as for deleting where we also narrowed it down like this. Now unlike deleting, we don't just pass one

04:34.080 --> 04:34.840
argument,

04:34.980 --> 04:39.120
the second argument is the new object we want to store and

04:39.570 --> 04:41.850
that will be a new post of course,

04:42.090 --> 04:51.180
so let's create a new post here with the new operator or new keyword and that new post will receive

04:51.180 --> 04:55.800
a title which we can get from the request body we're getting.

04:55.800 --> 04:59.730
Now it's of course up to you regarding which data you expect there,

04:59.970 --> 05:08.060
I expect a body where I can extract a title and where I can extract a content,

05:08.070 --> 05:14.940
so really just as we're doing it for creating a new post here. Now we're getting that post data and now

05:14.940 --> 05:17.720
it's this post which I want to save,

05:17.730 --> 05:20.700
so with which I want to update the existing one.

05:20.730 --> 05:25.970
Now let's chain then thereafter to handle the case that this was successful

05:26.160 --> 05:33.690
and here in the callback where I get the result, I will for one print the result here to the console

05:34.140 --> 05:39.530
and as a second step, I want to return a response, so send a response with the status code

05:39.540 --> 05:45.470
200 and some json data where we could simply pass for now,

05:45.630 --> 05:50.850
maybe pass a message where I say update successful.

05:50.880 --> 05:57.950
So now we got our backend route in place, back to the frontend then, it's reachable on this url.

05:57.960 --> 06:06.180
So here in update post, I now want to use the local http service, send a put request, remember because it's a

06:06.180 --> 06:07.340
put route,

06:07.350 --> 06:09.540
we're waiting for put requests here,

06:10.020 --> 06:18.500
so send such a put request to the same url as for deleting basically, so we can just copy that

06:18.510 --> 06:19.880
url from down there, 

06:19.980 --> 06:22.090
this is where we want to send our put request.

06:22.110 --> 06:24.230
Of course we will have a payload here though,

06:24.330 --> 06:26.100
put requests take a payload,

06:26.160 --> 06:33.390
the post which we want to use and post ID is just ID here, like this.

06:33.390 --> 06:35.190
So now we're sending a put request,

06:35.220 --> 06:37.230
now let's subscribe to that,

06:37.320 --> 06:41.100
we'll actually get back our response here

06:41.220 --> 06:44.820
and for now, we can simply console log that response.

06:44.880 --> 06:48.380
That of course means we will not update the post locally yet

06:48.480 --> 06:53.280
but let's just see if that works and how we would need to fix it if it doesn't.

06:53.280 --> 07:00.180
So with that let's go back, one issue we can see is if I reload the page, then the content is gone which

07:00.180 --> 07:03.540
makes sense because the post is not loaded into memory,

07:03.540 --> 07:09.720
so that's one argument for actually fetching the post whenever we go to that page.

07:09.760 --> 07:13.610
For now let's fix it by going back and then clicking on edit here

07:13.620 --> 07:19.400
and let's now add an extra exclamation mark and hit save post and,

07:19.560 --> 07:22.420
well not much is happening here,

07:22.470 --> 07:23.760
now why is that?

07:23.760 --> 07:26.460
Well because we of course don't use update post,

07:26.460 --> 07:29.140
instead we just edit a second one right,

07:29.160 --> 07:33.370
this one because we always add posts right now in a post create component,

07:33.450 --> 07:35.390
here we always add new posts.

07:35.640 --> 07:41.670
What do we want to do here is first of all we maybe want to name this on save post because it's actually

07:41.880 --> 07:45.020
now more about saving, not just about adding,

07:45.120 --> 07:51.040
so in the template, we also connect it here with on save posts on the submit event

07:51.660 --> 07:59.400
and then here in on save post, we check the mode and if this mode is equal to create, well then

07:59.400 --> 08:10.390
we will still of course add a post like this, else we want to call this posts service update post and

08:10.390 --> 08:18.940
send our post ID as well as our title and content and we get that of course well in exactly the same

08:18.940 --> 08:20.100
way as we did here,

08:20.110 --> 08:25.300
so we simply pass on form value title and form value content.

08:25.750 --> 08:33.520
Now we're calling update post and now if we save this, go back, edit this post and add a third exclamation

08:33.520 --> 08:35.080
mark and hit save posts,

08:35.990 --> 08:37.250
we get an error here,

08:37.310 --> 08:38.700
method put is not allowed

08:38.750 --> 08:40.870
so that's a cors error.

08:41.210 --> 08:43.230
Let's go back to app.js

08:44.530 --> 08:50.490
and indeed, we're allowing a patch request but not a put request, so let's add put here to the allowed

08:50.780 --> 09:00.420
cors headers on the backend in app.js, save that and try again. Back to messages, edit, add

09:00.450 --> 09:04.190
that third exclamation mark, clear the console maybe and hit save

09:05.220 --> 09:07.090
and now, we don't know right.

09:07.260 --> 09:11.630
Let's go to the server side log and there, doesn't look too good,

09:11.810 --> 09:19.580
looks like we got an error, performing update on the path ID would modify the immutable field ID.

09:20.000 --> 09:27.650
So the problem we actually have here is that on the backend, we tried to update the existing post with

09:27.650 --> 09:34.490
the new post but since I created the post like this, it actually would create a new ID too

09:34.670 --> 09:35.630
and that's not allowed,

09:35.630 --> 09:40.130
we can't replace that ID because that ID is not,

09:40.130 --> 09:46.250
we can't overwrite this for an existing resource. Now we could of course delete the old post and add

09:46.250 --> 09:47.410
a new one,

09:47.420 --> 09:50.000
we can also try setting the ID here

09:50.120 --> 09:56.630
to the ID of the post we're receiving because that post, that incoming body will have an ID because

09:56.630 --> 09:58.570
we're sending the post with that ID,

09:58.880 --> 10:00.590
so let's give that a try.

10:00.950 --> 10:10.730
Let's go back and reload, add it again, add that first exclamation, that third exclamation mark, save

10:10.820 --> 10:15.480
and now this looks better because now we're not trying to generate a new ID,

10:15.650 --> 10:22.520
instead on the backend we're now reusing the existing ID and the update process recognizes this and

10:22.520 --> 10:24.740
therefore it's all right.

10:24.740 --> 10:30.890
So now we updated the post and we can finally see this if we go back and reload that page, here we see

10:30.890 --> 10:36.650
new posts with three exclamation marks and deleting also still works.

10:36.650 --> 10:37.490
So that's all working,

10:37.490 --> 10:38.360
that's all fine,

10:38.360 --> 10:40.680
two things are missing though.

10:40.730 --> 10:46.460
For one, I want to instantly update this in the local array even though we always fetch a new version when

10:46.460 --> 10:47.790
we go back to the page

10:47.960 --> 10:53.630
but I want to update it immediately once we're done with the updating and I also want to make sure that

10:53.660 --> 11:01.970
if we are on that updating page and we reload, we actually load that post again because the ID is still

11:01.970 --> 11:03.410
part of the url.

11:03.530 --> 11:07.170
So we got everything we need and therefore we should implement this feature.
