WEBVTT

00:02.090 --> 00:09.290
So back in the project to add this server, we could create a totally new project because I will start

00:09.620 --> 00:11.720
with this separated solution,

00:11.750 --> 00:18.520
I will not serve the angular app through my node server simply because I want to keep on using this ngServe

00:18.520 --> 00:23.240
command and this built-in development server the angular cli gives us,

00:23.240 --> 00:26.220
so we'll use ngServe to serve the angular app,

00:26.390 --> 00:32.750
we will build a totally separate backend for now. Therefore we could do this in a brand new folder in

00:32.750 --> 00:34.340
a brand new project,

00:34.340 --> 00:39.630
I'll do it in the same folder so that switching between the files is easier and easier to follow for

00:39.640 --> 00:40.030
you,

00:40.070 --> 00:47.150
I just want you to understand that all this node code is not actually related to our angular code, that

00:47.200 --> 00:50.510
is why I'll also put it into a separate folder by the way.

00:50.510 --> 00:56.510
I will add a brand new folder next to my source folder and I will name it backend, the name is totally

00:56.510 --> 00:57.340
up to you.

00:57.560 --> 00:59.630
Now for now, I won't add files,

00:59.630 --> 01:00.760
we'll do this later,

01:00.980 --> 01:07.580
what I want to do for now is create a single javascript file which will be our server because that's

01:07.580 --> 01:08.820
important about nodejs

01:08.900 --> 01:09.670
.

01:09.800 --> 01:17.000
unlike for example PHP where you need a separate server software like Apache or Nginx, for nodejs

01:17.180 --> 01:20.110
you create the server with nodejs too,

01:20.150 --> 01:22.600
so you write all that on your own.

01:22.700 --> 01:27.800
Therefore all create a new file and I'll actually do this on the root folder so that it's a bit easier

01:27.800 --> 01:29.100
for us to execute

01:29.360 --> 01:32.020
and that is the server.js file,

01:32.180 --> 01:36.570
so this is sitting directly in the root folder of our application.

01:36.680 --> 01:41.210
Now this server.js file can now be executed with nodejs,

01:41.310 --> 01:44.560
now important, keep ngServe running but we don't need for now, 

01:44.560 --> 01:50.650
you could quit it but keep it running so that we have it available later and open a new terminal window.

01:50.810 --> 01:55.270
Here in my IDE, I can do this with this plus, in this terminal window,

01:55.400 --> 02:01.460
you can now execute that server.js file with the node command which you should have available since

02:01.460 --> 02:03.840
you installed nodejs on your machine,

02:03.950 --> 02:06.910
so you can run node server.js like this.

02:07.040 --> 02:09.440
Now nothing will happen because it's an empty file

02:09.560 --> 02:14.230
but what you can do is you can dump in a console log statement and say hello.

02:14.360 --> 02:16.520
Now this is of course node server side code,

02:16.520 --> 02:18.700
it's not listening to any requests

02:18.920 --> 02:25.430
but we can actually execute any javascript file with node except for files that try to access something

02:25.700 --> 02:29.340
in the dom because nodejs is a server side runtime,

02:29.360 --> 02:32.630
there is no dom but this can be executed

02:32.720 --> 02:33.490
and you'll see

02:33.500 --> 02:34.580
hello here.

02:34.890 --> 02:35.140
OK,

02:35.150 --> 02:36.170
so this is how this works,

02:36.170 --> 02:38.740
this is also how we will start our server later.

02:39.050 --> 02:45.380
So for now, let's turn this into a server and to do this, we first of all need to import a package provided

02:45.380 --> 02:55.310
by nodejs, the http package. Now in angular, you always import it like this, import something from somewhere.

02:55.310 --> 03:00.360
Now this is not how we import in nodejs though, this syntax is not supported yet,

03:00.440 --> 03:02.690
it will be supported in the future

03:02.690 --> 03:08.270
but even then in a different form which isn't finalized yet, so we will use the default way of importing

03:08.270 --> 03:09.180
in nodejs

03:09.440 --> 03:11.270
and that looks like this.

03:11.420 --> 03:17.420
You create a new variable or since node in the latest version which we are using already supports

03:17.450 --> 03:23.260
ES6 plus, you create a constant because you don't plan on adding this, what we're going to add now

03:23.600 --> 03:30.200
and that can be named however you want but I'll name it http because now I import with the require keyword

03:30.500 --> 03:33.700
and then the package I want to import is the http package.

03:34.010 --> 03:36.080
Now this is not a package we install,

03:36.080 --> 03:43.080
it's not found in the package.json file because this is a default nodejs package which was installed

03:43.080 --> 03:45.840
together with nodejs on your system.

03:46.040 --> 03:52.880
Require is the nodejs import syntax and this simply imports this package and stores its content

03:52.880 --> 03:56.390
in this http constant, this is how we import in nodejs.

03:56.470 --> 03:58.830
With this imported,

03:58.850 --> 04:07.620
we can use the http package to create a new server because the http package has a create server method here.

04:08.090 --> 04:15.050
Now create server as you can see if you hover over it in visual studio code takes a request listener

04:15.410 --> 04:16.320
as an argument,

04:16.430 --> 04:24.080
so a function it will execute for every incoming request no matter which path this request targets, if

04:24.080 --> 04:29.600
it's targeting your domain or your IP, then this function here will be executed.

04:29.870 --> 04:32.580
I'll pass an ES6 arrow function here,

04:32.630 --> 04:38.660
so that's a normal function just a bit more powerful than normal functions and this function will receive

04:38.660 --> 04:46.640
two arguments which will be passed in by nodejs, the request and the response object, these offer data

04:46.640 --> 04:50.360
and utility methods that allow us to work with requests and responses.

04:50.750 --> 04:54.420
Now in here, we can do whatever we want with the request,

04:54.440 --> 05:00.260
we can later for example parse it for the path that was targeted, though we will use express to help

05:00.260 --> 05:00.770
us with that,

05:00.770 --> 05:03.550
right now we're writing vanilla node code,

05:03.550 --> 05:08.510
more interesting is the response. The response has a couple of methods

05:08.560 --> 05:11.350
and one of them is the end method,

05:11.710 --> 05:17.280
this can be used to end writing to the response stream because you can actually write more,

05:17.290 --> 05:20.340
you can set headers there with set header and so on,

05:20.330 --> 05:26.860
so this can all be done but here I will just end it and we can pass something too and like this is my

05:27.760 --> 05:32.560
first response and then this will be sent as text.

05:32.560 --> 05:37.820
Now with that, we create a server but it's not active yet,

05:37.870 --> 05:44.200
we need to store that server in a new constant because we'll not change this value and thereafter we

05:44.200 --> 05:49.710
can call server listen and to listen, we need to pass a port number.

05:49.720 --> 05:54.130
Now this port during development will be 3000,

05:54.220 --> 06:01.750
so we can just set it like this though what I typically want to do here is I want to use that port

06:02.080 --> 06:08.200
or the default port of the hosting provider I'm hosting this at because that hosting provider will

06:08.200 --> 06:10.420
normally give us that port number

06:10.420 --> 06:11.740
we want to host our app at

06:11.860 --> 06:13.150
during production.

06:13.360 --> 06:22.190
So I will access environment variable with process.env.port, all capital case or use 3000

06:22.220 --> 06:28.360
if that's not set. Now environment variables are dynamically injected variables, they're always accessed

06:28.360 --> 06:29.140
on process.env,

06:29.200 --> 06:30.960
that's a nodejs feature,

06:30.970 --> 06:36.460
they can be injected by the runtime in which this app runs and if it's not set, we will use 3000,

06:36.640 --> 06:39.010
so that is what will happen during development.

06:39.820 --> 06:48.940
Now with that, if we now execute our nodejs file again by running node server.js, you see it doesn't

06:48.940 --> 06:56.350
quit right, it stays here, it doesn't jump back to allowing us to enter new text because is this now an ongoing

06:56.350 --> 06:57.060
process,

06:57.070 --> 06:59.380
we're listening for requests,

06:59.380 --> 07:03.910
if we now go to the browser, we can visit localhost 3000

07:04.230 --> 07:09.990
and if we hit enter, we see if we zoom in, this my first response.

07:10.000 --> 07:10.270
OK,

07:10.290 --> 07:15.660
this is no English because I forgot the is but if I add it here and I reload,

07:15.730 --> 07:18.100
that's a good example actually, if I reload,

07:18.130 --> 07:21.140
nothing changes because that already is

07:21.460 --> 07:27.820
well accidental but here important takeaway, if you change something on your server side code, you need

07:27.820 --> 07:35.590
to quit running server with Control C and restart it, only then your code changes will take effect.

07:35.680 --> 07:39.110
So now if I reload, we see this is my first response.

07:39.310 --> 07:43.030
So this is our first very simple nodejs server,

07:43.270 --> 07:45.880
this is how we add code and how we update

07:45.910 --> 07:48.680
the code, we need to restart. Now

07:48.820 --> 07:54.700
writing all the code just with nodejs would be very cumbersome though because for example, if you

07:54.700 --> 08:03.490
want to find out if we targeted just our slash nothing path or if we had our domain.com/products,

08:03.970 --> 08:08.070
then we would have to parse that manually on the incoming request.

08:08.200 --> 08:11.890
The same is for the request body, the request http verb,

08:12.130 --> 08:14.630
these are all things we don't want to do,

08:14.630 --> 08:18.760
that is why we will add the express backend in the next lectures.
