WEBVTT

00:02.170 --> 00:04.360
Splitting the app into modules is great,

00:04.360 --> 00:10.600
now we have a leaner app module which is a bit easier to read but we can also use modules to improve

00:10.630 --> 00:17.020
the performance of our app and by the way, you might have wondered, how can we use the post module here

00:17.020 --> 00:21.540
for example and declare something which we don't export

00:21.580 --> 00:26.620
if I'm always telling you that we have to export things we want to use somewhere else and we are of

00:26.620 --> 00:33.070
course using the post create component and the post list component in our entire app through the router.

00:33.520 --> 00:36.360
Well, routing is something special actually

00:36.580 --> 00:42.790
and that's exactly where I now will also continue working on. The router is managed globally you could

00:42.790 --> 00:48.610
say, that is why we don't need to explicitly export the declared components to be able to use them here

00:49.330 --> 00:58.200
and we can also use the router to only load code when we need it. For example, the login and sign-up routes,

00:58.210 --> 00:59.940
we don't always need them,

00:59.980 --> 01:05.470
we might not need to login or we might not visit them even if we could log.

01:05.620 --> 01:12.580
So loading all the code for that, for these components and the attached logic in advance is a bit redundant.

01:13.240 --> 01:15.190
For the post, it's a bit different,

01:15.220 --> 01:18.900
we typically need the post list in post create component.
 
01:18.910 --> 01:23.470
Now you could argue that we don't really need the post create component if we are not logged in but in

01:23.470 --> 01:24.510
our current set up,

01:24.610 --> 01:29.530
let's keep it combined with the post list component and let's both load eagerly,

01:29.570 --> 01:36.320
so always at app startup let's say. But for the authentication files, I don't want to do that,

01:36.370 --> 01:43.450
I want to load them lazily, which means only when we need them and the Angular router makes this very

01:43.450 --> 01:44.730
very easy.

01:45.160 --> 01:54.700
We can go to our auth module and there, I'll actually add an auth-routing.module.ts file,

01:54.700 --> 02:01.510
so I want to manage the route for this module separately. For that, I'll export a class here, AuthRoutingModule

02:01.600 --> 02:02.400
and

02:02.530 --> 02:11.090
this will receive the normal @ngModule decorator which we have to import from @angular/core.

02:11.140 --> 02:15.190
So let's import ngModule from @angular/core here

02:16.450 --> 02:25.420
and now in here, I want to set up my routes, so I will add imports and just as in the AppRoutingModule

02:25.420 --> 02:31.420
here where we set it up with for root with that route config, I will set up a similar route config

02:31.600 --> 02:36.580
for my login and sign-up route which I will cut from the AppRoutingModule, 

02:36.940 --> 02:39.910
I will set that up in the AuthRoutingModule.

02:39.940 --> 02:47.060
So here I will add routes which is of type routes which we have to import,

02:47.170 --> 02:51.700
so that type is imported from @angular/router

02:51.850 --> 02:58.140
and then I add my route config here. That of course means that the login and sign-up component

02:58.200 --> 02:59.720
also needs to be added here,

02:59.910 --> 03:04.450
so let's go to the AppRoutingModule and cut these two components from there,

03:04.470 --> 03:05.910
remove the imports there,

03:05.970 --> 03:06.990
that's important

03:07.050 --> 03:14.130
and go to the AuthRoutingModule now and add the imports here instead. Of course the path needs to be

03:14.680 --> 03:16.970
adjusted, both paths needs to be adjusted

03:17.040 --> 03:19.270
and now we get the route set up here.

03:19.380 --> 03:24.580
Now we'll use the router module again which also is imported from @angular/router

03:24.780 --> 03:32.100
but now not with for root but with for child. This means we registered some child routes which will

03:32.100 --> 03:36.590
be merged with the root router eventually and there I pass in my routes

03:36.930 --> 03:44.190
and then I export my router module, just as in the AppRoutingModule, the for child is the important

03:44.190 --> 03:46.200
difference.

03:46.200 --> 03:50.580
Now we can go to the auth module, not app module, to the auth module

03:50.580 --> 03:58.290
and here, I will import my AuthRoutingModule which of course means we have to add the import path at

03:58.290 --> 04:03.140
the top, AuthRoutingModule from,

04:03.460 --> 04:09.360
well that auth-routing.module file in that same folder here.

04:10.400 --> 04:16.760
So now the AuthRoutingModule is added here, in that module we define the authentication related routes.

04:16.760 --> 04:19.480
Now we go to the AppRoutingModule

04:19.760 --> 04:27.440
and here we have to connect that root router to that child router and we do that by loading the entire

04:27.560 --> 04:28.750
child module,

04:28.760 --> 04:35.340
so by loading the auth module which in turn is aware of its relevant routes because we're importing the

04:35.360 --> 04:42.230
AuthRoutingModule where we are clearly saying, hey which routes matter for this child module so to

04:42.230 --> 04:42.780
say.

04:42.890 --> 04:50.390
So this module knows which routes it needs and therefore we can connect it to our AppRoutingModule.

04:51.200 --> 04:53.720
I'll add a new route here with a path

04:53.810 --> 04:55.550
and now the path is a bit tricky

04:55.550 --> 05:02.780
to be honest. We can't use login here because that path is already configured in the auth routing module

05:03.110 --> 05:09.500
and therefore, Angular would construct the path which is login/login but we also can't use nothing

05:09.770 --> 05:12.710
because that already is a path taken here too

05:12.860 --> 05:15.200
and we don't want to override this.

05:15.230 --> 05:22.970
So the easiest way of handling this is to simply use a new group for that routes array here in the auth

05:22.970 --> 05:24.080
routing module.

05:24.380 --> 05:31.370
So I will add a path of auth, you could also use user or anything like that, I will use auth here

05:31.700 --> 05:37.400
and now you don't set up a component but instead, you add another property which is named loadChildren

05:37.970 --> 05:44.450
and this allows you to add a string here which describes to the path you want to load lazily.

05:44.870 --> 05:48.450
So this is a path which starts in the current folder

05:48.950 --> 05:57.530
and then we go into the auth folder and there, we have our auth module. We removed the extension here and

05:57.530 --> 06:02.990
then add a hashtag after which we specify the name of the class in that file because you could of

06:02.990 --> 06:05.190
course name this anything you want theoretically,

06:05.240 --> 06:10.560
so you have to tell Angular which class it should use as a module in the file you're pointing at.

06:10.760 --> 06:17.310
So here, copy auth module and add this after the hashtag, make sure you get the casing correct.

06:17.570 --> 06:21.060
Now all the routes registered here will be loaded

06:21.080 --> 06:23.990
lazily. For that to really work,

06:23.990 --> 06:30.190
I have to go to the app module and remove the auth module here and also the import up here, otherwise

06:30.230 --> 06:32.560
it would be included in our bundle

06:32.560 --> 06:36.130
and otherwise, we would also actually mess up our app.

06:36.140 --> 06:43.820
So let's now save this and let's make sure we also adjust our links. In the header component, the login

06:43.820 --> 06:49.240
and sign-up route can both be found under auth and then login and sign-up.

06:49.250 --> 06:57.230
Now with that saved if we reload, we get an error if I try to load the login route because it can't find

06:57.320 --> 06:59.620
auth/auth.module.

06:59.780 --> 07:02.570
Now let's have a look at the app routing file.

07:02.570 --> 07:04.650
Now that's a slight mistake from my side,

07:04.700 --> 07:10.850
you have to use ./ here to tell Angular that this is relative from the app routing file.

07:11.220 --> 07:17.830
So now if you click login, this gets loaded and the interesting part is if you go back to the main page

07:17.860 --> 07:23.930
and you reload the app, if you open the network tab, let's clear all requests and

07:23.930 --> 07:30.050
if you now click on login, now you see we have a new request and this actually is the source code related

07:30.050 --> 07:32.580
to the login and sign-up components

07:32.660 --> 07:34.720
and this is only loaded when you need it

07:34.820 --> 07:40.410
which of course means you're not loading all the code which you might not need upfront.

07:40.550 --> 07:46.430
So this is now how we can add lazy loading, it makes of course way more sense for way bigger apps where

07:46.430 --> 07:49.070
you load big chunks of your app lazily

07:49.250 --> 07:55.130
but here already you see the technique and it works the same, no matter if you load ten or thousands of

07:55.130 --> 07:56.090
components lazily.
