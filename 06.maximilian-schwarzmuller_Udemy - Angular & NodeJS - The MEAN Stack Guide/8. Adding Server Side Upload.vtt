WEBVTT

00:02.650 --> 00:08.500
So time to go back to the server and implement that file upload functionality.

00:08.560 --> 00:11.530
Now what does uploading a file actually mean?

00:11.530 --> 00:20.380
It means that on the server, we kind of need to extract such a file byte body from our incoming requests

00:21.310 --> 00:24.030
and we can't do that with body parser,

00:24.040 --> 00:31.090
this only works for JSON or URL encoded data but not for files. To extract files too, we need

00:31.090 --> 00:37.630
to install a different package, so I'll quit one of the processes here and install that package with npm

00:37.630 --> 00:41.910
install --save, the name is multer.

00:42.010 --> 00:44.100
This is a package for NodeJS

00:44.170 --> 00:53.350
and for Express to be precise, which allows us to extract incoming files. So after this is stored,

00:53.350 --> 00:55.330
downloaded and saved, I'll restart

00:55.330 --> 00:56.260
ngServe

00:56.260 --> 00:57.700
and now we can use it.

00:57.730 --> 00:59.250
Now how do we use it?

00:59.560 --> 01:07.310
Well we can use multer by simply attaching it to certain routes that should be able to accept files.

01:07.330 --> 01:13.240
So in our posts.js file in the routes file, that would be our posts route here.

01:13.300 --> 01:17.550
There we create a new post and that post would include a file,

01:17.560 --> 01:22.020
it would also include other data but also the file.

01:22.330 --> 01:29.050
Now to use multer on this route, we first of all need to import it in the posts.js file. So I'll name a

01:29.050 --> 01:33.090
constant multer and then I will simply require multer here.

01:33.930 --> 01:43.440
Now multer needs some configuration, so let's create a new constant, maybe here and I'll name it storage,

01:43.490 --> 01:44.470
the name is up to you,

01:44.470 --> 01:47.840
I'll name it storage because it's related to a file storage

01:47.840 --> 01:56.170
and there we need to define where multer should put files which it detects in the incoming request.

01:56.170 --> 01:59.730
We do this with call by calling multer disk storage

01:59.860 --> 02:05.250
and by the way if you want to learn more about multer, definitely check out their github repository

02:05.740 --> 02:11.310
where you find a detailed documentation of how it works and the different features of it you can use.

02:12.500 --> 02:19.470
But back to our code, I said we can call disk storage here to configure how multer does store things.

02:19.470 --> 02:28.530
You pass a Javascript object to disk storage and there, you can set two keys, one is destination. Destination

02:28.800 --> 02:35.690
is a function which will be executed whenever multer tries to save a file

02:35.790 --> 02:37.200
it detected.

02:37.200 --> 02:40.170
This function will get the request object,

02:40.360 --> 02:48.060
the file which it extracted and a callback. You need to call that callback to basically, well pass

02:48.060 --> 02:48.820
back that

02:48.870 --> 02:54.760
where should you store it information to multer. So you could run a complex logic here

02:54.900 --> 02:58.220
but I will simply call that callback and to that callback,

02:58.230 --> 03:00.150
you need to pass two things.

03:00.150 --> 03:05.020
The first argument is whether you detected some error, I'll set null here.

03:05.160 --> 03:10.570
The second argument simply is a string with a path to the folder where this should be stored

03:10.950 --> 03:15.840
and now I want to store it in the back-end folder and there, images. Now important,

03:15.840 --> 03:21.380
this path is seen relative of your server.js file,

03:21.510 --> 03:25.980
so this is relative to the path where your server.js file is stored.

03:25.980 --> 03:31.820
That is why I have to add back-end here, even though we are in the routes folder in the back-end folder.

03:31.880 --> 03:36.570
Now I'm targeting an image folder here and this doesn't exist yet, so let's add it,

03:36.760 --> 03:39.390
images, you can of course name this however you want,

03:39.420 --> 03:44.400
just make sure to update it here too and now multer would be able to write there.

03:44.410 --> 03:45.410
We're not done though,

03:45.510 --> 03:52.380
this is the destination. We also can and here want to tell multer what the filename should be.

03:52.640 --> 03:53.910
So this is another function where

03:53.900 --> 04:00.070
we get the request, the file and a callback and here, I'll

04:00.100 --> 04:02.530
first of all extract the name.

04:02.530 --> 04:04.150
You can get that from the file,

04:04.150 --> 04:06.500
there is an original name property.

04:06.500 --> 04:09.250
Now I also want to normalize this a bit.

04:09.430 --> 04:18.790
SoI'll first of all convert it to all lowercase, then I'll split it by whitespace as I might have

04:18.970 --> 04:24.910
and then join it again with a dash, so that any whitespace in the filename will be replaced with a

04:24.910 --> 04:25.840
dash.

04:25.840 --> 04:29.320
The problem is, this will miss the file extension,

04:29.320 --> 04:35.230
we can extract that too though, we can get the file mime-type to be precise.

04:35.230 --> 04:35.770
That's cool,

04:35.770 --> 04:40.700
multer automatically gives us the mime-type, something we had to do with hard work on the front-end.

04:40.930 --> 04:48.610
Now I will create a little helper constant here, MIME_TYPE_MAP to have a map of mime types and which

04:48.610 --> 04:50.190
extension that would be.

04:50.260 --> 04:53.940
I want to support three types of files and for image.png,

04:53.980 --> 04:55.170
that would be the mime type,

04:55.390 --> 05:01.430
I will use png as an extension. For image/jpeg as a mime type,

05:01.480 --> 05:10.080
I would use jpg and for image/jpg, written like this, I will also use jpg. So these will be my

05:10.080 --> 05:11.820
mime types.

05:11.820 --> 05:17.850
Now I want to get the extension and I can do this by creating a new constant here in the file

05:17.850 --> 05:26.280
named function extension and there, I'll use my MIME_TYPE_MAP and pass in the file mime-type property.

05:26.790 --> 05:28.860
That will be in this format

05:28.950 --> 05:34.530
and now we will simply select a mime type from this map and we should only get such a mime type since

05:34.530 --> 05:41.600
we filter on the front-end. I can then call a callback here too to pass that information to multer,

05:41.610 --> 05:43.320
we don't have an error

05:43.500 --> 05:52.110
and now I can construct my name here by using the name plus let's say a dash plus let's say a timestamp

05:52.110 --> 05:52.660
with date

05:52.680 --> 05:58.190
now, I can get the current timestamp plus a dot and then the extension.

05:58.210 --> 06:04.020
This should construct a unique filename based on the input file name, the current date and the correct

06:04.020 --> 06:05.580
extension.

06:05.580 --> 06:12.270
Now of course, we're validating the incoming files on the front-end, still as an extra security layer,

06:12.570 --> 06:14.170
in destination,

06:14.220 --> 06:21.630
I want to throw and return an error if we detect that we don't have one of these mime types. And I

06:21.630 --> 06:26.560
should be able to do this by creating a new constant, isValid

06:26.750 --> 06:34.530
and here I will use my MIME_TYPE_MAP and pass in the file mime-type and this should actually return

06:34.740 --> 06:37.020
nothing, undefined, null

06:37.020 --> 06:44.570
if we get a mime type that's not part of this map. So I'll then create a new error here, the new keyword,

06:44.570 --> 06:54.100
new error, pass a message here, invalid mime type and I will then check if isValid,

06:54.330 --> 07:00.570
if that is true so if it's not null or undefined, if we did find something, then I'll set error equal

07:00.570 --> 07:07.260
to null, otherwise I'll leave the error message here and I will now pass

07:07.270 --> 07:08.750
error here.

07:08.800 --> 07:14.770
So with that, we configured multer, it now knows where to store things and how to store them.

07:14.770 --> 07:18.870
Of course we're not using it though and we do use it, for example on this post route

07:19.030 --> 07:21.060
by passing it as an extra middleware

07:21.100 --> 07:23.220
and that's the cool thing about Express.

07:23.530 --> 07:30.340
Thus far we have one filter, the path and then the function we want to execute. Now we can pass as many

07:30.340 --> 07:33.970
arguments as we want here and they will execute from left to right.

07:33.970 --> 07:39.970
So first, we parse this path here and now I will pass in another function and that will do something

07:39.970 --> 07:45.620
to the request before our function runs and the function I want to use here is multer,

07:46.060 --> 07:48.870
then I'll pass in my configuration,

07:48.910 --> 07:54.940
so storage here and then I will call single here.

07:55.020 --> 08:00.230
This means I'm expecting a single file and I'll pass image as an argument, as a string,

08:00.240 --> 08:05.990
this simply means multer will now try to extract a single file from the incoming request and it

08:06.000 --> 08:11.960
will try to find it on an image property in the request body and it will be our job to provide

08:11.990 --> 08:15.050
this of course. That's the back-end set up,

08:15.060 --> 08:20.790
now in order to be able to test it, we need to add the upload functionality in the Angular code then.
