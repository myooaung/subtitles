WEBVTT

00:02.500 --> 00:05.790
Now we achieved a lot throughout this module

00:05.860 --> 00:14.740
but before we leave yet to the next module, there's one thing I want to add here real quick. In our project

00:14.740 --> 00:14.960
here

00:14.980 --> 00:22.720
if I add a new post like this, some content and I save that post, it's added and if I now delete that

00:22.720 --> 00:25.900
post, it stays there, 

00:25.900 --> 00:26.450
right

00:26.640 --> 00:32.330
and if we have a look at our server side log, we actually get an error there.

00:32.490 --> 00:34.060
We see that,

00:34.290 --> 00:38.630
well some complex error is thrown here,

00:38.730 --> 00:45.640
something went wrong and we can actually see that a cast to object that failed for value null.

00:45.720 --> 00:53.460
So essentially what failed is we passed null as an ID for the post which we want to delete and we

00:53.460 --> 00:59.520
can see that if we go to the network tab of our developer tools, there we got two requests at the bottom,

00:59.520 --> 01:05.700
we close this and we see if we got one pending request which seemed to have failed and we didn't even get

01:05.700 --> 01:07.440
a response here.

01:07.440 --> 01:14.730
Now the reason for us not getting a response here is that we don't really handle an error case on

01:14.760 --> 01:17.590
our server side application,

01:17.760 --> 01:25.770
so here when we reach out to mongodb or to mongoose to delete a post, then we only handle the then

01:25.830 --> 01:32.010
so the success case and not really the case that this could fail and it did fail because as I said, the

01:32.010 --> 01:33.590
ID we passed was null,

01:33.600 --> 01:39.870
we can see that here, we see that is the request we send and if we have a look at that, this is the url

01:39.870 --> 01:43.320
we sent it to, API posts

01:43.340 --> 01:44.340
null.

01:45.000 --> 01:51.690
And that makes a lot of sense because if we go to our client side code, when we add a new post here in

01:51.690 --> 02:01.110
the posts service, we create a post with ID null and we instantly add this post to our frontend application,

02:01.200 --> 02:02.800
to the posts there.

02:02.820 --> 02:09.210
Now we actually do that once we got a success response from the server and that actually means that

02:09.210 --> 02:11.700
it was saved in the database

02:11.700 --> 02:17.310
but of course we're not using the ID which is dynamically generated on the server,

02:17.340 --> 02:23.190
we're not updating that ID in our local post but that is exactly what we need to do.

02:23.400 --> 02:29.400
We're storing a new post on the server in the database and this is proven by the fact that if I reload

02:29.400 --> 02:32.760
my frontend application, the post is there

02:32.910 --> 02:38.550
and now we can also delete it because now we've fetched that ID which is part of the database or which

02:38.550 --> 02:44.000
was created for that database but we don't do this when the post is created the first time.

02:44.010 --> 02:46.640
Now there are two ways of solving this,

02:46.650 --> 02:53.740
the first approach is that in add post, in the posts service, whenever we got the success response,

02:53.940 --> 02:56.400
we actually call get posts.

02:56.550 --> 02:57.720
We could do this,

02:57.780 --> 03:04.370
this would fetch the updated posts and update our posts in our frontend application. We could do this

03:04.380 --> 03:12.800
but it's also kind of redundant, why would we fetch and update all posts if we simply added one post?

03:13.260 --> 03:20.210
So a better approach might be to simply get back the ID of the created post and use that here in the

03:20.310 --> 03:22.110
add post method

03:22.530 --> 03:28.740
and for that we can go to app.js, to the route where we do create a new post and here on the save

03:28.740 --> 03:29.430
method,

03:29.700 --> 03:37.920
we can actually add a then block here too and here in that then block, we will get a result object with

03:37.920 --> 03:41.920
information about the result of this save operation.

03:42.240 --> 03:46.480
Let's log that result for now to see what's inside of it.

03:46.620 --> 03:48.150
This restarted our server,

03:48.180 --> 03:50.170
so the old error is gone

03:50.340 --> 03:52.670
and now let's quickly add a dummy post here,

03:52.890 --> 04:00.300
go back to the backend and we see what we get back, that result actually simply is the post that was

04:00.450 --> 04:01.680
created.

04:01.680 --> 04:05.750
Now that's awesome because here we got that ID we're interested in,

04:06.060 --> 04:12.390
so what we can do is we can simply take our response which we're sending and put it into that then block

04:12.600 --> 04:16.780
so that we send it once we know that we successfully saved this

04:16.980 --> 04:20.620
and again we're not handling errors here yet,

04:20.640 --> 04:22.250
we will do so later.

04:22.260 --> 04:24.480
So for now, we're just doing that

04:24.630 --> 04:32.750
and now besides our success message, we can send back some post ID field which simply contains result

04:33.020 --> 04:33.680
ID

04:34.050 --> 04:39.430
and we can of course also rename result to created post if that's clearer.

04:39.450 --> 04:41.040
So the created post ID,

04:41.130 --> 04:45.410
that is what we're returning as part of our response

04:45.840 --> 04:53.580
and now we can use that in our posts service. There in the subscribe method, we get back the response

04:53.580 --> 04:55.430
data with that nice message.

04:55.500 --> 05:01.500
Now we don't care about the message obviously but that ID, that is really interesting.

05:01.530 --> 05:12.150
So here we can get our ID, the post ID can be fetched from response data and on the response data, we

05:12.150 --> 05:17.610
now know that we also have that post ID field which will hold a string,

05:17.940 --> 05:25.230
so in the post service, we can update our expected return value here to also reflect that

05:25.230 --> 05:32.480
post ID field which is a string and we want to store that post ID value in our post ID constant here

05:32.520 --> 05:34.570
which is not related to that post ID,

05:34.710 --> 05:37.370
we could also name that just ID

05:37.770 --> 05:44.910
and now all we have to do is update the ID of the post we created here. So we can access post ID and

05:44.920 --> 05:47.550
set it equal to the ID we fetched here.

05:47.550 --> 05:51.690
As a side note, if you're wondering how we can edit this constant,

05:51.870 --> 05:57.090
well we don't overwrite the value that is stored on a constant which is this object,

05:57.090 --> 06:03.750
we still have the same object but since objects are reference types in javascript, we can savely access

06:03.750 --> 06:09.130
one of the properties of that object whilst keeping the object itself,

06:09.150 --> 06:14.340
so we only overwrote one value inside of the object not the entire object

06:14.370 --> 06:17.060
hence this is perfectly valid code.

06:17.070 --> 06:22.020
Now the ID was updated and we then stored a post with that updated ID.

06:22.020 --> 06:30.870
Now if we save all, it will automatically restart the server and the angular server, we can add another post

06:30.880 --> 06:33.940
here with more content

06:34.230 --> 06:41.610
and now if we hit save post, it's added and if I hit delete here, it's also deleted and if we now reload

06:41.640 --> 06:48.690
our application, it's gone because now we get the real ID which we need for the database to successfully

06:48.690 --> 06:49.470
delete this,

06:49.620 --> 06:52.600
we get that ID when we create a post.

06:52.740 --> 06:59.760
And now with that, we can move onto the next module where we will continue working on our frontend, make

06:59.760 --> 07:05.360
sure that we can edit posts and do a lot of other cool things to advance our application.
