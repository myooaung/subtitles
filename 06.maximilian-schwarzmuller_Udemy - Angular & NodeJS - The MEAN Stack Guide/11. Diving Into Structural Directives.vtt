WEBVTT

00:02.220 --> 00:06.610
In the last lecture we added our expansion panels and now we get some data here

00:06.680 --> 00:08.470
and that's a typical use case right,

00:08.480 --> 00:09.370
it is also what

00:09.380 --> 00:14.720
we will have at the end of this course, you'll fetch data from some backend, from some server, a list

00:14.720 --> 00:19.530
of posts, a list of users, whatever it is and you want to output this in your template,

00:19.700 --> 00:23.680
therefore you don't know in advance how many elements you're going to need.

00:23.780 --> 00:25.430
We only got one expansion panel,

00:25.460 --> 00:30.590
now we would need three and we don't want to hardcode our content in there anyways. So we need some way

00:30.590 --> 00:36.510
of dynamically looping through that code and creating as many panels as required

00:36.740 --> 00:42.350
and we can do that with the help of so-called structural directive. Angular ships with directives which

00:42.470 --> 00:47.960
as I mentioned before are instructions you place on element and there are some instructions that

00:47.990 --> 00:51.570
only apply to a single element, ngModel was one of them

00:51.980 --> 00:57.170
but there also are instructions which structurally change the rendered html code

00:57.380 --> 00:59.500
and that's the case here.

00:59.690 --> 01:02.870
We can use another special directive, ngFor

01:02.990 --> 01:08.790
and you add with *ngFor, the casing and the star is important

01:09.050 --> 01:15.020
and this is essentially a helper tool that allows you to repeat that element as often as required.

01:15.030 --> 01:22.190
Now the as often as required part is defined here between quotation marks after an equal sign.

01:22.190 --> 01:25.340
Here you write the looping logic like this,

01:25.340 --> 01:31.600
you add let to create a variable, let post in our case, this name is totally up to you

01:32.420 --> 01:35.460
of and then the data you want to loop through,

01:35.480 --> 01:38.630
so here it's this post's name.

01:38.660 --> 01:42.160
So this is not not up to you or it's up to you but you have to change it here

01:42.380 --> 01:44.240
and in the component if you change it

01:44.420 --> 01:50.030
and now we're looping through all the posts and we're storing the individual posts in this post variable

01:50.030 --> 01:55.870
which is created here and now the cool thing is we can use that variable in the template here.

01:56.150 --> 02:04.520
We can output post title here for example and down there, we can output posts content like that

02:04.930 --> 02:10.610
and now it will create as many expansion panels as we need and give us access to the data we're looking

02:10.610 --> 02:11.280
at.

02:11.330 --> 02:17.750
And now if we save this, we get three expansion panels for the different posts and you see by default

02:17.790 --> 02:21.260
only one of them can be opened, if you want to allow multiple ones,

02:21.350 --> 02:26.560
you can add multi and set this true on the accordion,

02:26.570 --> 02:31.600
now you would also be able to expand more than one post at a time.

02:31.700 --> 02:39.620
So this is now our accordion with the posts and this is how we can render data, a list of data dynamically

02:39.940 --> 02:45.820
with the help of ngFor. Now of course we don't want to use hardcoded data,

02:45.890 --> 02:54.230
we want to use data which we actually receive from well the post create component in our case here.

02:54.860 --> 02:58.690
And to do that, I'll get rid of my dummy data here,

02:58.740 --> 03:04.460
I'll actually comment it out so that we still have it for reference but I'll set post to an empty array

03:04.460 --> 03:05.070
now

03:05.510 --> 03:06.820
and this is an empty array

03:07.110 --> 03:08.610
and if it is empty,

03:08.780 --> 03:11.130
well then we actually don't render anything.

03:11.360 --> 03:17.140
Maybe we want to show a placeholder and we can use another structural directive for that.

03:17.150 --> 03:23.990
So back in the html template, we could say we only want to render this accordion here with all these

03:23.990 --> 03:24.650
posts

03:24.800 --> 03:26.260
if we get posts.

03:26.510 --> 03:32.660
So what I can do is I can check with another structural directive, with ngIf if a certain

03:32.660 --> 03:39.770
condition is true and only if it is true, only then this part on which ngIf sets and all the child components

03:40.100 --> 03:41.210
will be rendered

03:41.240 --> 03:41.840
and that's important.

03:41.840 --> 03:43.370
It's not hidden if it's not true,

03:43.520 --> 03:45.300
it's not part of the dom,

03:45.350 --> 03:47.240
it will only be added to the dom

03:47.270 --> 03:53.480
if this condition is true and what is the condition? Anything you want, so you can refer to a function here

03:53.690 --> 04:00.380
which returns true or false to a property that stores true or false or write a short code snippet, here

04:00.470 --> 04:04.600
I'll check if posts length is greater than zero

04:04.700 --> 04:10.700
and if it's not, then this will not be rendered. In that case I want to render something else,

04:10.700 --> 04:18.930
I want to render a paragraph where I say no posts added yet, lowercase p

04:19.780 --> 04:22.090
and I will add ngIf to that too

04:22.210 --> 04:27.260
and here I will check if posts length is smaller or equal to zero,

04:27.310 --> 04:30.380
then I will render this fallback text and

04:30.400 --> 04:32.650
this is why we see no posts added yet here.

04:32.650 --> 04:34.610
Now this clearly looks super ugly,

04:34.720 --> 04:38.560
thankfully we can change this with some built-in css classes,

04:38.560 --> 04:45.190
you can find more under guides and there using angular material typograpghy,

04:45.200 --> 04:47.580
here are some classes you can add and there,

04:47.780 --> 04:51.780
I will add body one as a class, here

04:51.830 --> 04:58.150
mat, that's always appended, added at the beginning, mat-body-1

04:58.220 --> 05:00.950
and now if we save that, we get a nicer look.

05:00.950 --> 05:07.790
Now it has the roboto font for example and if we want to centre this for example, well then we can

05:07.790 --> 05:13.380
also add another class because I don't want to style all paragraphs, I just want to style this paragraph,

05:13.610 --> 05:23.960
so this will be my info text and I will target this now in my css file info text and simply set text

05:23.990 --> 05:26.340
align here to center.

05:26.480 --> 05:31.550
And now we're using some structural directives to present a nice user interface,

05:31.550 --> 05:38.360
time to be able to finally add some posts and connect the post create component with the post-list.component
