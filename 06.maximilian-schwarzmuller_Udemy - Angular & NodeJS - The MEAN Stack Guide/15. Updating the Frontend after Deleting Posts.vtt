WEBVTT

00:02.480 --> 00:09.230
Now we're able to delete elements from our mongodb, one thing you probably noted is that our frontend

00:09.260 --> 00:11.210
UI is not live updating.

00:11.210 --> 00:16.520
So if I again add a new post with some content, it's added immediately

00:16.640 --> 00:22.200
but if I would click delete now, we would have to wait for the next reload to see that.

00:22.610 --> 00:28.790
Well the reason for this is because we got no code in our angular part to actually update our posts

00:29.060 --> 00:33.150
whenever we delete something. In the post servers in delete posts, 

00:33.200 --> 00:34.890
we simply output deleted

00:34.940 --> 00:37.950
once we get the response from our delete request.

00:38.150 --> 00:44.300
Now what we probably want to do here is we want to remove that post from our posts here and then send

00:44.300 --> 00:48.620
a new posts updated notice to the rest of our app.

00:48.710 --> 00:50.690
We can of course easily do that,

00:50.690 --> 00:57.800
what we can do here instead of just logging this is we of course want to remove our post, so we can reach

00:57.800 --> 01:07.730
out to our posts and store that in a new constant, updated posts and there call the filter method. Filter

01:07.730 --> 01:14.780
allows us to only return a subset of that posts array and we pass an argument, a function to the filter

01:14.780 --> 01:15.480
method,

01:15.500 --> 01:21.680
this function will be executed for every post in the array and if it returns true, then this element

01:21.680 --> 01:28.280
will be kept, if it returns false then this element will not be part of the new filtered post array which

01:28.280 --> 01:35.690
we store in updated posts. So my condition here is that post ID is not equal to post ID because I want

01:35.690 --> 01:37.040
to keep all entries

01:37.100 --> 01:38.500
where this is not equal,

01:38.510 --> 01:42.110
I want to delete the one where it is equal.

01:42.170 --> 01:47.300
So with that, we get updated posts which should be all posts except for this one

01:47.300 --> 01:58.210
and now we can simply set this post equal to updated posts, of course we could also skip this step,

01:58.210 --> 02:02.310
I'm just a fan of writing this in very clearly understandable steps

02:02.590 --> 02:05.010
and then I will run this post

02:05.020 --> 02:07.270
updated next

02:07.600 --> 02:12.300
and send a copy of this post, so now the whole app knows about it.

02:13.240 --> 02:16.370
If we now save this, our angular app reloads,

02:16.450 --> 02:33.620
let's add another post here with even more content and let's add yet another post with dummy content

02:33.880 --> 02:34.600
and if I reload,

02:34.610 --> 02:35.600
they all should be there,

02:35.600 --> 02:41.420
they all should be stored in a database and now if I want to delete another post, I click delete here and you

02:41.420 --> 02:44.450
see it's gone and it stays gone

02:44.480 --> 02:51.530
if I reload because it really was deleted from the database and if we delete them all like that, they

02:51.530 --> 02:55.600
should also stay away and indeed they do.

02:55.730 --> 03:00.440
So now we also got that updating on the frontend when we delete something on the backend.
