WEBVTT

00:02.200 --> 00:07.600
With the cleanup work done on the backend, there are two things I want to do on the frontend now,

00:07.640 --> 00:16.490
well actually it's just one thing. When we add a new post, like this one or when we added a post like

00:16.490 --> 00:23.180
here, I actually want to redirect the user back to the messages page once this is done. Well and then

00:23.180 --> 00:25.810
as a bonus I guess there is one other thing I want to do,

00:25.910 --> 00:32.330
I want to show a spinner whilst we are waiting for the posts, it's really fast but you see there is no

00:32.330 --> 00:33.570
posts added yet

00:33.640 --> 00:43.940
blinking up for a brief second and also if we added a post here, we also have that very slight delay because

00:44.000 --> 00:47.960
our server is very fast because it's running on our local machine

00:47.960 --> 00:52.260
but I want to show a spinner here. So navigate the user and show a spinner,

00:52.310 --> 00:53.900
these are two things I want to add.

00:53.910 --> 00:59.530
Now navigating the user is super simple, in post create here,

00:59.690 --> 01:05.430
we actually have on save posts and what I essentially want to do is I want to navigate the user

01:05.540 --> 01:11.160
once we're done adding the post or updating the post. So I guess I actually want to do it in the post service

01:11.160 --> 01:13.380
right, here when we get back

01:13.380 --> 01:14.810
the success response,

01:14.840 --> 01:22.430
this is where we want to navigate away and we also want to navigate away here in add post. So let's add

01:22.430 --> 01:28.670
something, let's inject something into posts service which helps with navigation and that's the angular

01:28.670 --> 01:34.810
router because we can not just change pages by adding links like new post,

01:34.820 --> 01:38.190
we can also do that programmatically. For that 

01:38.210 --> 01:38.620
I'll inject

01:38.620 --> 01:40.780
my router

01:42.130 --> 01:48.790
which is of type router and which is imported from @angular/router, so make sure to add this import here

01:48.790 --> 01:53.020
at the top and then you can use that router in that service file.

01:53.940 --> 01:56.080
Now how do we use it?

01:56.090 --> 02:00.290
Let's use it here in add post, once we're done subscribing, here

02:00.290 --> 02:06.290
at the very end I can reach out to my router and call the navigate method and there, we actually have

02:06.290 --> 02:11.330
to pass in an array of segments just as we did it for router link

02:11.360 --> 02:18.230
when we actually want to pass more than a normal string, here we always have to do it and the first segment

02:18.230 --> 02:19.160
in this case,

02:19.220 --> 02:20.680
well it will just be slash,

02:20.680 --> 02:27.800
I always want to go back to the root route and I'll not just do that here in add post but also in update

02:27.950 --> 02:30.870
post. By the way,

02:30.940 --> 02:33.700
we are replicating code here and here,

02:33.860 --> 02:36.690
I will leave it like this for now to make this really explicit,

02:36.770 --> 02:42.100
you could of course refactor this into a method you are calling in both places.

02:42.120 --> 02:45.890
So now we're navigating when we're adding or updating a post.

02:46.230 --> 02:48.770
We also want to have a spinner or

02:48.840 --> 02:52.540
I want to have it so I guess you will also want to have it in this course.

02:52.830 --> 02:56.540
Let's check the material docs, the angular material docs really quick,

02:56.540 --> 02:58.250
there under components,

02:58.290 --> 03:05.730
we conveniently find a spinner, here progress spinner and that looks pretty good,

03:05.730 --> 03:07.950
I want to have that spinner.

03:08.150 --> 03:14.880
It's the mat progress spinner component though we can actually use just mat spinner

03:15.120 --> 03:19.910
if we want to have an infinite spinner, so not a spinner going from 0 to 100

03:20.010 --> 03:25.840
but a spinner which spins, well as long as it needs to spin. To use that, we need to unlock it

03:25.920 --> 03:33.570
so time to revisit our app module and here let's add a new material component or module,

03:33.630 --> 03:43.140
mat spinner, excuse me, progress spinner module. Mat progress spinner module needs to be added to imports

03:43.500 --> 03:50.070
and that of course means we also need to add an import to it from the @angular/material package at

03:50.070 --> 03:52.340
the top of the file.

03:52.350 --> 03:58.560
Now we can use that in our post create component when we are loading the post for example,

03:58.590 --> 04:00.090
so here in ngOnInit

04:00.090 --> 04:04.060
when we are fetching a post, we want to show it when we start fetching,

04:04.170 --> 04:08.150
so here and we want to hide it once we got the result,

04:08.190 --> 04:11.710
so here, even though these lines are next to each other,

04:11.840 --> 04:19.410
this code here in subscribe will execute asynchronously, so only once the response is there. Now to show

04:19.450 --> 04:22.910
that spinner here, let's add a new property

04:23.750 --> 04:30.110
isLoading which is false initially let's say. Here when we start loading,

04:30.170 --> 04:41.110
we can set isLoading to true and then here when we are done, I'll set it back to false. We can now use is

04:41.110 --> 04:48.080
loading to actually hide that entire form here and show a spinner instead

04:48.130 --> 04:57.040
as long as we are loading. We can do that by adding mat spinner here at the top and then we can use ngIf

04:57.130 --> 05:09.040
to only show that if isLoading is true. On the other hand, the form is only added if, ngIf isLoading

05:09.700 --> 05:10.380
is false,

05:10.390 --> 05:18.610
so if not isLoading with that exclamation mark at the beginning. If we now save that and I go back to my

05:18.610 --> 05:25.630
application, let's try that out by going back to messages and editing this and you saw that it wasn't

05:25.630 --> 05:31.440
that long but there was that spinner. Now it wasn't centered or anything like that,

05:31.480 --> 05:38.340
we could of course add that styling, we could make sure it's centered for example by going to our css

05:38.380 --> 05:39.780
file, target

05:39.820 --> 05:45.400
mat spinner and give it a margin of auto,

05:45.490 --> 05:46.880
this should center it,

05:47.310 --> 05:47.680
yeah,

05:47.920 --> 05:51.660
well it's really hard to see because it's so fast but here it is

05:52.040 --> 05:57.190
and it would also be nice to show a spinner whilst we are well saving the post. Even though that's fast,

05:57.190 --> 06:03.830
it takes a brief second until this is updated, so we probably want to show the spinner there too

06:04.030 --> 06:09.710
and all we have to do to do that is control isLoading in our post create component.

06:09.850 --> 06:11.170
So in on save

06:11.200 --> 06:15.520
post, whenever we are creating the post here,

06:15.670 --> 06:16.810
I want to start loading,

06:16.810 --> 06:19.030
so this isLoading is set to true.

06:19.300 --> 06:25.870
Now I dont need to reset it to false because we will navigate away from this page anyways and if we come

06:25.870 --> 06:29.820
back to it, well then isLoading will be set back to false

06:29.950 --> 06:31.810
so this should be fine.

06:31.870 --> 06:38.440
Now if I load that page, I see a spinner and if I hit save, I also see one until I'm done and we go back.

06:39.310 --> 06:42.730
Now I want to add a spinner to that message list page here,

06:42.730 --> 06:51.070
so to the post list page. We can do that in exactly the same way of course, we can add mat spinner here

06:52.000 --> 06:53.840
above our accordion,

06:53.870 --> 07:01.260
there we got mat spinner and I already will center it here,

07:01.330 --> 07:03.980
so target the

07:04.150 --> 07:08.980
mat spinner selector and add a margin of auto to center it

07:09.370 --> 07:13.080
but now of course we need that isLoading property here too

07:13.420 --> 07:22.660
and how do we add this? Well let's add isLoading and set it to false and then in ngOnInit, we essentially

07:22.660 --> 07:29.260
want to set isLoading back to false or first of all we'll set it to true at the very beginning before

07:29.260 --> 07:36.800
we call get posts, there we will set isLoading to true

07:36.990 --> 07:44.220
but as soon as we get updated posts here, I'll set isLoading back to false because then we definitely

07:44.220 --> 07:51.390
have posts and we're done. And now with that, we of course want to use isLoading together with ngIf

07:51.430 --> 07:58.440
again, so let's add ngIf isLoading to the spinner and to the accordion, we'll add the opposite 

07:58.470 --> 08:01.900
ngIf not isLoading.

08:02.040 --> 08:11.020
Now if we save that, let it reload, we got an error, can't have multiple template bindings on one element.

08:11.230 --> 08:14.420
Oh yeah we already got ngIf on the accordion of course,

08:14.500 --> 08:15.830
that will not work,

08:15.880 --> 08:24.100
so we only want to show the accordion if we got enough posts and if we're not loading, so and if it's not

08:24.190 --> 08:30.970
loading and the same for the paragraph by the way. We can show that we have no posts yet but we only

08:30.970 --> 08:33.500
want to show it if we're not loading,

08:33.560 --> 08:38.730
if we are loading, we want to show neither the accordion nor the paragraph.

08:39.070 --> 08:40.880
So now if we go back,

08:41.050 --> 08:42.310
you saw that spinner,

08:42.310 --> 08:44.280
you have to watch really good

08:44.470 --> 08:45.960
but now there is that spinner,

08:46.030 --> 08:50.450
it's super fast but you can see it for the fraction of a second.

08:50.800 --> 08:52.210
So now the spinner is added,

08:52.240 --> 08:55.180
now our frontend is looking good like that.

08:55.180 --> 08:56.290
Let's move on

08:56.350 --> 09:02.770
and in the next lecture, let's add an image upload and of course an image to the post thereafter.
