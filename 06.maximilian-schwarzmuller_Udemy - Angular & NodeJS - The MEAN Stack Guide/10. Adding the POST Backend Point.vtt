WEBVTT

00:02.110 --> 00:05.880
So being able to post new servers would be awesome

00:05.920 --> 00:13.420
and for that, we want to allow requests targeting /posts but these requests should now actually

00:13.420 --> 00:14.920
be post requests.

00:14.920 --> 00:17.520
Right now we're just using this middleware

00:17.560 --> 00:23.670
which means all requests on our server or reaching our server will be handled by that middleware,

00:23.720 --> 00:31.240
now we can narrow this down though. Instead of using app use, we can use app post and this will now essentially

00:31.240 --> 00:38.770
attach a middleware which works like here but which only is triggered for incoming post requests, respectively

00:38.830 --> 00:43.080
we of course also got app get, app put and so on.

00:43.510 --> 00:51.310
So now we can say handle incoming requests, post requests to /apiposts and then we get our default

00:51.340 --> 00:54.880
function with request, response and next

00:54.880 --> 00:58.760
and in there, I want to do something with that post data.

00:58.780 --> 01:00.820
Now we don't have a database yet

01:00.940 --> 01:03.610
hence we can't store them for now,

01:03.730 --> 01:09.070
this is something we'll add soon though. For now we can't store them so we won't really be able to process

01:09.070 --> 01:09.370
them,

01:09.370 --> 01:15.820
we won't be able to fetch them thereafter but at least we can check if getting the data to that route

01:15.910 --> 01:16.810
works,

01:16.810 --> 01:22.840
so what we can do here is we can simply output the posts we receive with console log.

01:22.960 --> 01:28.130
The question just is how do we get access to the posts sent with the request?

01:28.150 --> 01:31.440
Thus far our request has always been an empty request,

01:31.450 --> 01:36.820
we didn't add any data because we only handled get requests thus far. Post requests

01:36.820 --> 01:42.610
have a request body though, so they have data attached to them and we need to extract that data.

01:42.970 --> 01:49.390
For that we can install an extra package which adds a convenience middleware which we can plug into our

01:49.390 --> 01:56.230
express app that will automatically extract incoming request data and add it as a new field to that request

01:56.260 --> 02:00.700
object on which we can then conveniently access it. To do that,

02:00.700 --> 02:08.890
make sure you can enter a command for example by quitting the angular server and then run npm install

02:09.040 --> 02:14.000
--save body-parser,

02:14.000 --> 02:19.970
this is a node express package which can be used as an express middleware, body parser does exactly what

02:19.970 --> 02:21.380
the name implies, it

02:21.410 --> 02:25.860
well parses incoming request bodies, extracts the request data

02:25.910 --> 02:31.580
because that will actually be a stream of data and converting it to just a data object we can use is

02:31.580 --> 02:37.490
something which is done by the package and it then re-adds it on a special property to that request

02:37.580 --> 02:38.990
object.

02:38.990 --> 02:42.750
So let's go back to our app.js file and in there,

02:42.980 --> 02:46.800
let's import this new package, body-

02:46.940 --> 02:53.350
parser, you can name the constant however you want and then we simply require body parser like this.

02:53.360 --> 02:59.520
Now we also need to use it, not just import it and we do use it by adding it as an extra middleware,

02:59.720 --> 03:04.970
maybe in front of our cors headers but definitely in front of the posts request of course where we

03:04.970 --> 03:05.990
want to use it,

03:06.350 --> 03:07.700
so there I will add it.

03:07.850 --> 03:09.680
Don't filter for a specific path,

03:09.710 --> 03:14.410
I want to do this for all incoming requests and we don't use our function here,

03:14.420 --> 03:22.250
instead we simply pass body parser and then call the json method and this will return a valid express

03:22.410 --> 03:23.690
middleware for parsing

03:23.720 --> 03:27.860
json data. By the way even though we don't need it here,

03:27.880 --> 03:31.750
you can also use another feature of body parser in your apps and that's the

03:31.840 --> 03:37.930
url encoded function, this will also parse the url encoded data, there you need to pass some

03:38.060 --> 03:38.940
configuration,

03:39.120 --> 03:43.740
extended false to only support default features in the url encoding.

03:43.750 --> 03:45.220
Now that's just an extra line,

03:45.220 --> 03:46.360
we don't need it here,

03:46.360 --> 03:47.300
you could omit it,

03:47.470 --> 03:53.380
I just wanted to show you that body parser is capable of parsing different kinds of bodies.

03:53.560 --> 03:56.480
So now we're parsing that body,

03:56.710 --> 04:01.560
now of course we want to use it. Here in the API posts

04:01.630 --> 04:08.080
post route and there, we can extract our posts by accessing request body,

04:08.080 --> 04:11.230
this is a new field added by body parser.

04:11.230 --> 04:17.260
Now actually this will just be one post though, not a list of posts. So this one post is now available

04:17.260 --> 04:17.640
here,

04:17.650 --> 04:24.280
we can now log it in console log and we still need to return a response because it's still an endpoint for

04:24.280 --> 04:30.500
an incoming request and to ensure that this request doesn't timeout on the client, we need to return

04:30.500 --> 04:31.380
a response.

04:31.540 --> 04:38.530
So we also call res and then maybe set a status code with the status function of 201, that

04:38.530 --> 04:41.580
is a typical status code for everything is ok,

04:41.590 --> 04:48.730
a new resource was created whilst 200 just means everything was ok but here we also added a new resource,

04:49.180 --> 04:50.790
we didn't really, we didn't store it

04:50.800 --> 04:52.670
but hey we'll do this later

04:53.200 --> 04:56.250
and then we call json to send back json data.

04:56.300 --> 04:59.060
Now of course we don't really need to send back data,

04:59.080 --> 05:07.720
you can send back a confirmation message though, so you could send back post added successfully or don't

05:07.720 --> 05:10.360
send back anything, really just well

05:10.390 --> 05:16.010
what you need, that should also be successfully down there.

05:16.010 --> 05:20.200
So now we have this set up,

05:20.330 --> 05:21.500
now let's try it out

05:21.630 --> 05:25.720
and for that, we again need to connect angular to this API endpoint.
