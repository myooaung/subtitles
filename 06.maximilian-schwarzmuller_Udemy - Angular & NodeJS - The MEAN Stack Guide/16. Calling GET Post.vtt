WEBVTT

00:02.090 --> 00:08.060
So time to reach out to our service and call get post and for this, I will not actually use the constructor,

00:08.150 --> 00:14.090
though that would be possible but it's a better practice to use a special lifecycle hook angular provides,

00:14.360 --> 00:19.760
there are lifecycle hooks which angular will automatically execute when it creates a component and one

00:19.760 --> 00:21.570
of them is the onInit lifecycle hook.

00:21.770 --> 00:28.820
We added by implementing an interface, this is essentially a contract this class now signs, it's called

00:28.880 --> 00:37.170
on init and it's imported from @angular/core and this implementation now actually causes an error

00:37.220 --> 00:44.000
because now we're required to add a special method to our class here, the ngOnInit method and once we

00:44.000 --> 00:46.110
add this, everything is great again.

00:46.490 --> 00:51.770
So now ngOnInit, this is a function angular will automatically execute for us when it creates

00:51.770 --> 00:57.740
this component and it's recommended to do basic initialization tasks in ngOnInit

00:57.740 --> 01:03.070
and there I can now set this post equal to this posts service,

01:03.200 --> 01:11.080
remember this automatically created a property of the same name and there, get posts like this.

01:12.090 --> 01:14.890
Now we fetch all the posts,

01:15.000 --> 01:20.670
of course our posts are empty at the beginning though so we'll need to add posts and for this, we can

01:20.670 --> 01:23.460
go to post create and there,

01:23.460 --> 01:31.800
I also want to connect to my service, so I'll add my constructor here too, use the shortcut to automatically

01:31.830 --> 01:39.860
create a property named posts service and add type post service, import is added automatically by

01:39.860 --> 01:41.790
my IDE,

01:41.790 --> 01:46.820
don't forget these curly braces and now posts service is injected here too.

01:47.130 --> 01:51.950
Now here I want to reach out to the posts service not on ngOnInit

01:52.050 --> 01:57.480
but when I created a new post. So here I will actually remove @output,

01:57.480 --> 01:58.780
I don't need it anymore,

01:59.010 --> 02:01.040
don't need the whole event emitter anymore.

02:01.230 --> 02:04.570
Remove both imports and instead,

02:04.920 --> 02:06.180
instead of emitting,

02:06.480 --> 02:13.630
I will now simply call this posts service add post and pass my post there

02:13.650 --> 02:21.520
or we're actually expecting a title and a string and a content so I can just pass these values here,

02:21.600 --> 02:23.600
title and content as arguments,

02:23.640 --> 02:27.890
I don't even need to construct a post in this file therefore,

02:28.090 --> 02:31.220
so this means we can get rid of the post import here too.

02:31.720 --> 02:38.500
So now we're calling add post from within the post create component and we're calling get posts from within

02:38.500 --> 02:43.200
the post list component and in the post service, we're connecting this,

02:43.240 --> 02:45.250
let's give this a try.

02:45.310 --> 02:50.230
If I enter something here and I click save post, nothing happens and 

02:50.250 --> 02:51.440
what's wrong here?

02:52.320 --> 02:58.990
Now what's wrong is that we're getting posts when the post lists component is created with ngOnInit

02:58.990 --> 02:59.330
.

02:59.530 --> 03:01.910
and at this point of time, we get an empty list there,

03:01.930 --> 03:02.220
right, it's

03:02.250 --> 03:09.400
an empty list of posts, when we later add posts, this doesn't do anything because we created a copy

03:09.400 --> 03:10.980
of posts and return that.

03:11.110 --> 03:18.730
So if we edit the original array thereafter, this doesn't well affect anything on our post list component,

03:18.970 --> 03:21.480
by the way we can also remove input here.

03:21.820 --> 03:28.840
So this is the reason why it's not working because we fetched a post, a copy of them before we added

03:28.900 --> 03:30.360
them.

03:30.370 --> 03:37.080
Now there are a couple of ways of solving that, we could not fetch a copy for example, if we do that,

03:37.450 --> 03:38.170
you will see that

03:38.170 --> 03:41.400
now if this reloads, I get an error, right

03:41.410 --> 03:45.350
because I should go to my app component html file and remove the bindings here,

03:45.400 --> 03:48.550
we don't need that anymore to manage our posts.

03:48.550 --> 03:55.060
Let's also remove it in the typescript file of the app component and remove the post import, so let's

03:55.060 --> 03:56.020
save all that.

03:56.080 --> 04:01.280
So now if I go back, it loads again and if I now enter something here, you'll see the posts are added again

04:01.780 --> 04:04.180
but this is not the cleanest way of doing that,

04:04.180 --> 04:10.540
I'm a fan of copying this to avoid unwanted manipulation of the posts in any component which is fetching

04:10.560 --> 04:11.980
our posts.

04:12.010 --> 04:19.300
So a better way is to use an event-driven approach where we actively push the information about new

04:19.300 --> 04:23.360
posts being available to the components which are interested

04:23.770 --> 04:28.510
and for that we could use the event emitter but the event emitter is really meant to be used in conjunction

04:28.510 --> 04:31.330
with that @output decorator,

04:31.510 --> 04:39.130
instead I'll use a feature provided by another package which is not part of angular but a core dependency,

04:39.130 --> 04:39.600
the rxjs.

04:39.610 --> 04:45.950
package, you find here, it's actually it's installed from the beginning.

04:46.220 --> 04:52.870
Rxjs is all about observables and this is a concept which can be a bit more complex to grasp,

04:52.870 --> 04:57.640
it's essentially about objects that help us pass data around

04:57.670 --> 05:03.100
you could say and we'll dive deeper into observables step by step and I also dive deeper into them in

05:03.100 --> 05:08.710
my complete guide on angular here on udemy and also a complete Youtube series I got.

05:08.710 --> 05:18.030
So we simply need to import something from that rxjs package to get started and that something

05:19.140 --> 05:22.380
is a subject, now that essentially is an event emitter

05:22.370 --> 05:28.630
you could say but one which is actually for broader usage than the one angular ships with.

05:29.050 --> 05:39.240
And now I will create this subject here as a private property too, I'll name this posts updated,

05:39.420 --> 05:42.470
again taking a property name here which sounds like an event,

05:42.500 --> 05:49.410
this is not required but also not the worst idea and I'll create a new instance of my subject, just as

05:49.410 --> 05:51.710
the event emitter, this is a generic type

05:51.750 --> 05:58.700
and here I plan on passing a list of posts as a payload. So we get the posts

05:58.720 --> 06:05.560
updated subject here and now when we have add post here or when we call this,

06:05.680 --> 06:07.850
I don't just want to update my posts,

06:08.000 --> 06:09.400
I also thereafter

06:09.460 --> 06:12.210
want to take my subject posts updated

06:12.310 --> 06:18.790
snd there it's not emit but next and this pushes new value, it emits a new value and this value

06:18.790 --> 06:26.620
is a copy of my posts after I updated them. So this is now the subject,

06:26.680 --> 06:31.510
we can still leave get posts in there even though it's not that useful right now but that could change

06:31.510 --> 06:37.150
later on, what I now want to do is of course I want to be able to listen to that subject because it's

06:37.150 --> 06:38.890
emitting whenever we add a post,

06:38.890 --> 06:40.330
how do I listen to it?

06:40.330 --> 06:43.020
It's private so we can't directly access it

06:43.180 --> 06:46.600
to prevent other components from emitting data with it.

06:46.870 --> 06:49.700
What I'll add is I'll add a new method here,

06:49.720 --> 06:58.630
get post update listener, the name is up to you of course and there, I will return this post updated

06:58.720 --> 07:02.200
and then there's a special method we can call as observable

07:02.440 --> 07:05.550
and now it returns an object to which we can listen

07:05.650 --> 07:11.230
but where we can't emit. We can still emit from inside this file but not from files which received their

07:11.230 --> 07:13.400
reference with the help of this method.

07:13.810 --> 07:20.680
So now we got get posts update listener, we can now go to the post list component again and I will still

07:20.680 --> 07:22.650
fetch the list of posts at the beginning

07:22.690 --> 07:25.390
even though it's guaranteed to be empty right now

07:26.110 --> 07:30.710
but what I will also do is I will set up a listener to that subject.

07:30.730 --> 07:38.020
I do this by reaching out to this post service get post update listener, this returns this observable

07:38.140 --> 07:40.250
and there we can call subscribe.

07:40.600 --> 07:42.870
This is a method which is made available,

07:42.910 --> 07:48.210
just putting this into a new line to make it easier to read, it still is part of this statement here.

07:49.000 --> 07:55.990
So subscribe now sets up a subscription and subscribe actually takes three arguments, possible arguments.

07:56.050 --> 08:00.160
The first one is a function which gets executed whenever new data is emitted,

08:00.190 --> 08:03.540
the second argument will be called whenever an error is emitted,

08:03.550 --> 08:10.570
this will never happen here and the third argument will be a function that is called whenever the observable

08:10.570 --> 08:14.710
is completed, whenever there are no more values to be expected,

08:14.710 --> 08:21.190
this will also never be the case here because it is an infinitely living subject so to say, we can always

08:21.280 --> 08:27.340
create new posts. So we only add the first argument, a function which is called whenever a new value is

08:27.340 --> 08:30.550
received and I'm using an arrow function here.

08:30.810 --> 08:32.330
We received some data here,

08:32.560 --> 08:33.930
the posts

08:34.000 --> 08:43.310
right because in the post service, we are emitting our new posts I copy off them. So post is what we receive,

08:43.380 --> 08:45.200
so I'll set the type to post array to

08:45.210 --> 08:47.200
be very clear about what we're getting here

08:48.180 --> 08:56.500
and in here, I can then set this posts equal to the posts I just received, to update them whenever

08:56.610 --> 09:00.580
this, like you got a new value, received a new value.

09:00.780 --> 09:06.960
Now one important thing, this subscription here actually doesn't cancel whenever this component is teared

09:07.110 --> 09:07.830
down.

09:07.830 --> 09:11.320
Now right now this component never disappears because we got only one page,

09:11.320 --> 09:14.350
we get no way of removing that component from the UI

09:14.700 --> 09:20.970
but later we will, later there will be more components, different pages and we want to ensure that whenever

09:20.970 --> 09:27.870
this component is not part of the dom, the subscriptions which we set up in it are also not living anymore

09:27.870 --> 09:34.950
otherwise we create a memory leak. So we will actually store that subscription in a new property which

09:34.950 --> 09:36.830
will be of types subscription,

09:36.970 --> 09:48.600
so I'll import subscription from rxjs like this, here subscription and now I will create a new property

09:48.600 --> 09:51.980
here, private property maybe, it doesn't mater,

09:52.080 --> 10:00.290
posts-sub which is of type subscription and it's undefined at the beginning and here in ngOnInit,

10:00.780 --> 10:07.590
I will set this post-sub equal to this post service and the subscription we're defining here.

10:07.650 --> 10:12.840
Now we just need to unsubscribe whenever this component is destroyed and there is another lifecycle

10:12.890 --> 10:14.520
hook we can use for that,

10:14.850 --> 10:23.520
we add it by implementing onDestroy, this forces us to add one other method, the ngOnDestroy method

10:23.520 --> 10:29.340
which is called whenever this component is about to get removed and there I will reach out to my posts-sub,

10:29.400 --> 10:37.410
not the service, the sub and call onSubscribe and this will remove the subscription and prevent memory

10:37.410 --> 10:38.420
leaks.

10:38.550 --> 10:48.540
And with this added if I go back, we can try this added post, does this work and hit save posts and you see we

10:48.540 --> 10:57.180
can add new posts here, of course also with other content than the old one and now this is working with

10:57.180 --> 11:01.280
the service. And whilst the setup is of course a bit more complex,

11:01.290 --> 11:07.290
it saves us a lot of time since we don't have to build these chains of property and event binding and

11:07.490 --> 11:12.790
you already learned quite a bit about observables here with this event emitter we're using here.

11:13.020 --> 11:14.360
So now let's move on.
