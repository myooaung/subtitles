WEBVTT
1
00:00:05.360 --> 00:00:11.120
In this video we'll learn how to access the data that a pointer is pointing to in order to access the

2
00:00:11.120 --> 00:00:12.710
data that a pointer is pointing to.

3
00:00:12.710 --> 00:00:15.770
We need to follow the pointer to where it's pointing.

4
00:00:15.770 --> 00:00:18.220
This is called dereferencing the pointer.

5
00:00:18.620 --> 00:00:22.850
Let's say that score pointer is a pointer to an integer and it has a valid address.

6
00:00:22.900 --> 00:00:26.400
Then in order to access the integer that's where pointer is pointing to.

7
00:00:26.420 --> 00:00:31.120
We use that dereferencing or indirection operator which is the asterisk.

8
00:00:31.220 --> 00:00:32.060
I know what you're thinking.

9
00:00:32.060 --> 00:00:35.170
The asterisk Didn't we just use the asterisk to declare the pointer.

10
00:00:35.330 --> 00:00:40.430
Yes and lots of people over the years have been critical of C plus plus his choice to use the asterisk

11
00:00:40.670 --> 00:00:43.500
to both declare and dereference a pointer.

12
00:00:43.760 --> 00:00:44.780
But it is what it is.

13
00:00:44.870 --> 00:00:48.350
And once we understand how all this works it isn't confusing at all.

14
00:00:48.710 --> 00:00:50.740
Let's take a look at the example.

15
00:00:50.870 --> 00:00:54.600
First we declare score to be an integer and initialize it to 100.

16
00:00:54.980 --> 00:01:00.730
Then we declare score pointer to be a pointer to an integer and initialize it to the address of score.

17
00:01:00.740 --> 00:01:03.190
Now score pointer points to score.

18
00:01:03.530 --> 00:01:08.330
If we want to get to score via the pointer then we must dereference the pointer.

19
00:01:08.330 --> 00:01:13.320
Notice that in the first output statement we're using the dereference operator on score pointer.

20
00:01:13.580 --> 00:01:16.590
This follows the pointer and gives us what it points to.

21
00:01:16.730 --> 00:01:22.430
In this case we display 100 since Gore pointer points to score when we dereference a pointer on the

22
00:01:22.430 --> 00:01:24.650
left hand side of an assignment statement.

23
00:01:24.650 --> 00:01:30.320
This results in an l value or the address of what score pointer is pointing to which in this case is

24
00:01:30.320 --> 00:01:31.130
score.

25
00:01:31.160 --> 00:01:35.600
So we store 200 in that address which is the address of score.

26
00:01:35.600 --> 00:01:40.160
So now we just change the value of score indirectly via a pointer.

27
00:01:40.160 --> 00:01:41.990
Notice the syntax makes sense.

28
00:01:41.990 --> 00:01:46.970
We use the asterisk to declare the pointer and then once the pointer is declared the asterisk is used

29
00:01:46.970 --> 00:01:48.420
to dereference it.

30
00:01:48.440 --> 00:01:49.810
Let's see another example.

31
00:01:51.480 --> 00:01:56.350
In this example we declared two doubles high temp and low temp and we initialized them to 100 points

32
00:01:56.360 --> 00:01:58.380
seven and thirty seven point four.

33
00:01:58.380 --> 00:02:03.170
We also declared temp pointer as a pointer to a double and initialize it to point to high temp.

34
00:02:03.480 --> 00:02:07.800
So if we have a pointer and we want what it points to we dereference the pointer.

35
00:02:08.010 --> 00:02:09.270
That's exactly what we're doing.

36
00:02:09.270 --> 00:02:14.880
The first output statement we're following or dereferencing temp pointer which gives us what it points

37
00:02:14.880 --> 00:02:17.590
to and in this case we display a hundred point seven.

38
00:02:17.760 --> 00:02:22.520
Now in the assignment statement we're storing the address of low temp to 10 pointer.

39
00:02:22.530 --> 00:02:25.020
So now 10 pointers pointing to low temp.

40
00:02:25.170 --> 00:02:31.730
And again if we want the low temp with dereference temp pointer and that gets us to where it's pointing.

41
00:02:31.770 --> 00:02:37.400
So far I've used instant doubles but the data had can be anything.

42
00:02:37.440 --> 00:02:44.340
In this case name is a C++ string object with the value Frank and string pointer is a pointer to a string

43
00:02:44.340 --> 00:02:51.020
and we initialize it to point to name if we dereference string pointer as in the first output statement

44
00:02:51.350 --> 00:02:57.910
we display Frank if name then changes to James and we execute the same output statement then we display

45
00:02:57.910 --> 00:02:58.750
James.

46
00:02:59.030 --> 00:03:03.970
Let's head over to the ID and we'll see some more examples of dereferencing pointers in live code.

47
00:03:05.170 --> 00:03:11.220
Ok so I'm in the ID and I'm in the section 12 workspace in the dereference project.

48
00:03:11.590 --> 00:03:16.120
I'd like to go over some examples of dereferencing pointers so that you really clear as to what's going

49
00:03:16.120 --> 00:03:17.070
on here.

50
00:03:17.080 --> 00:03:19.430
Let's start with a very simple example here.

51
00:03:19.540 --> 00:03:22.440
And again we'll draw it out we'll work through it before we run it.

52
00:03:22.570 --> 00:03:27.540
In this case I've got an integer called score and I'm initializing it to 1000.

53
00:03:27.550 --> 00:03:31.650
So let's say that score is over here it has storage.

54
00:03:31.650 --> 00:03:36.750
Obviously we have 100 in and let's say that it's that location a thousand.

55
00:03:36.750 --> 00:03:40.470
Again so that's my score variable.

56
00:03:40.480 --> 00:03:44.750
Now I've got another variable right here score pointer is a pointer to an integer.

57
00:03:44.770 --> 00:03:46.030
So here score pointer

58
00:03:49.720 --> 00:03:54.700
and it's a pointer to a nature that means it can hold addresses of integers and I'm initializing it

59
00:03:54.700 --> 00:03:58.470
to the address of score the address of scores a thousand.

60
00:03:58.470 --> 00:04:04.210
So we're putting a thousand in this variable which means that that's my pointer.

61
00:04:04.210 --> 00:04:08.810
So if you want to follow the pointer get to what it's pointing to you need to dereference the pointer.

62
00:04:09.130 --> 00:04:12.780
That's exactly what I'm doing right here I'm dereferencing score pointer.

63
00:04:12.820 --> 00:04:15.730
So it's got to follow the pointer to where it's pointing.

64
00:04:15.730 --> 00:04:19.200
And in this case it's pointing to that memory address right here which has 100.

65
00:04:19.240 --> 00:04:24.460
That's what the splice in this case I'm dereferencing the pointer again.

66
00:04:24.560 --> 00:04:27.290
But it's on the left hand side of an assignment statement.

67
00:04:27.320 --> 00:04:31.430
Remember the left hand side of an assignment statement is an address or a location.

68
00:04:31.430 --> 00:04:32.980
That's where we want to store things right.

69
00:04:32.990 --> 00:04:37.200
After all when we are assigning something we're storing that value somewhere.

70
00:04:37.960 --> 00:04:40.030
In this case I'm dereferencing score pointer.

71
00:04:40.030 --> 00:04:45.190
So if I dereference score pointer I follow the pointer to this address right here.

72
00:04:45.190 --> 00:04:47.480
Right so I'm putting 200 in here now.

73
00:04:49.050 --> 00:04:54.320
So now when I come back and display the dereference score points are going to go back over here.

74
00:04:54.330 --> 00:04:56.150
But this time it's going to see a 200.

75
00:04:56.490 --> 00:05:01.370
And if I just display score all on its own since score is that variable right.

76
00:05:01.470 --> 00:05:03.430
It's going to print 200 as well.

77
00:05:03.850 --> 00:05:04.260
OK.

78
00:05:04.260 --> 00:05:08.010
So again play with these and you can follow these pointers around and see what's happening.

79
00:05:08.010 --> 00:05:12.520
So let's run this and we're expecting 100 200 and 200.

80
00:05:12.540 --> 00:05:14.780
So let's give this a run.

81
00:05:15.030 --> 00:05:18.750
And there you go 100 200 and 200 exactly what we expected.

82
00:05:18.750 --> 00:05:20.380
All right let's do a few more of these.

83
00:05:20.400 --> 00:05:26.010
I'm going to come at this code and then we'll walk through it together and I'll do some diagrams as

84
00:05:26.010 --> 00:05:26.540
well.

85
00:05:26.710 --> 00:05:29.020
OK so in this case what do we have.

86
00:05:29.520 --> 00:05:30.360
We have two doubles.

87
00:05:30.360 --> 00:05:34.080
We have a double called high temp and I'll drive over here.

88
00:05:34.080 --> 00:05:42.160
So this double is called high temp and it's value is one hundred point seven.

89
00:05:42.370 --> 00:05:45.830
And let's again say that this is at location a thousand in memory.

90
00:05:46.120 --> 00:05:53.390
Then I've got another double right here called low temp and let's say that its location is 2000 and

91
00:05:53.390 --> 00:06:00.880
memory and its value right now is initialized to thirty seven point four OK.

92
00:06:00.890 --> 00:06:01.930
Pretty's.

93
00:06:02.320 --> 00:06:05.050
Now here we've got a pointer called temperature pointer.

94
00:06:05.050 --> 00:06:07.740
So there's my temperature pointer.

95
00:06:07.820 --> 00:06:13.040
It's got storage associated with it and we're initializing it to the address of high temperature with

96
00:06:13.040 --> 00:06:16.380
the address of high temperature is a thousand.

97
00:06:16.460 --> 00:06:18.500
And there's my pointer.

98
00:06:18.700 --> 00:06:23.420
And when we're doing this we always have to be sure that we got it we have our types correct temp pointer

99
00:06:23.420 --> 00:06:26.900
can point to a double high temp is a double.

100
00:06:27.260 --> 00:06:29.520
So all looks good here.

101
00:06:29.660 --> 00:06:35.750
Now if we dereference the pointer right here we're going to follow that temperature pointer to where

102
00:06:35.750 --> 00:06:36.720
it's pointing.

103
00:06:36.860 --> 00:06:43.790
It happened C-p pointing here to high temp and we display a 100 point so now what we're doing here is

104
00:06:43.910 --> 00:06:46.700
we're changing where the pointer is pointing to.

105
00:06:46.940 --> 00:06:50.780
So we're saying 10 pointer now holds the address of low temp.

106
00:06:50.780 --> 00:06:55.140
So what we're doing is we're changing that value right here.

107
00:06:55.190 --> 00:07:04.370
We're breaking this link right here and we're now putting a 2000 here which is the value of low temp.

108
00:07:04.370 --> 00:07:06.820
So this now points to low temp.

109
00:07:06.820 --> 00:07:10.560
And when we dereference the pointer now we follow the pointer to where it's pointing.

110
00:07:10.820 --> 00:07:12.370
It's not pointing here.

111
00:07:12.380 --> 00:07:15.400
So in this case it will produce thirty seven point four.

112
00:07:15.830 --> 00:07:17.960
OK so let's give that a run.

113
00:07:19.960 --> 00:07:22.690
And we've got the 100 point seven in the thirty seven point four.

114
00:07:22.690 --> 00:07:24.230
Just like we expected.

115
00:07:24.240 --> 00:07:24.560
All right.

116
00:07:24.560 --> 00:07:27.590
Now let's do a couple of more complicated examples.

117
00:07:27.970 --> 00:07:31.690
This example isn't more complicated but it's a little bit different.

118
00:07:32.020 --> 00:07:35.530
In this case we've got a string object right here.

119
00:07:36.440 --> 00:07:44.130
Called name and a string object is an object so I've got my object here and it's got a frank string

120
00:07:44.130 --> 00:07:44.530
in it.

121
00:07:45.900 --> 00:07:47.410
So that's kind of what name looks like.

122
00:07:47.400 --> 00:07:51.390
Let's again say that it's a digest of thousands that way it's easy to follow.

123
00:07:51.660 --> 00:07:53.670
Here I've got a string pointer.

124
00:07:53.670 --> 00:07:56.890
So here's my string pointer again.

125
00:07:56.900 --> 00:08:00.180
It's a variable that points to a string object.

126
00:08:00.180 --> 00:08:07.680
So in this case my string pointer holds the address of name which is a thousand.

127
00:08:07.770 --> 00:08:10.080
And there's my pointer all set up.

128
00:08:10.080 --> 00:08:16.030
Now if I want to follow the string pointer to where it's pointing to ID reference it right there.

129
00:08:16.410 --> 00:08:20.780
So in this case I'm following the pointer towards pointing to and I'm printing out what's there.

130
00:08:20.820 --> 00:08:24.910
In this case Frank right here.

131
00:08:25.040 --> 00:08:29.590
But what if we changed name not through the pointer but just name itself.

132
00:08:29.600 --> 00:08:31.180
We can certainly do that right.

133
00:08:31.280 --> 00:08:34.060
In this case we're changing name to James.

134
00:08:34.160 --> 00:08:36.360
So we're changing this right here.

135
00:08:37.340 --> 00:08:38.360
To James

136
00:08:44.030 --> 00:08:48.460
and now we're coming back here and dereferencing the pointer again we never change the pointer.

137
00:08:48.460 --> 00:08:51.220
The pointer still pointing to the same name right.

138
00:08:51.220 --> 00:08:52.840
The same memory address at 0 0 0 0.

139
00:08:53.080 --> 00:08:58.220
But this time we're going to see James there so it's going to print James instead of Frank.

140
00:08:58.340 --> 00:09:02.570
And this really shows you the difference between the pointer and what it's pointing to.

141
00:09:02.740 --> 00:09:07.810
In this case we never modify that pointer but the area we were pointing to was modified.

142
00:09:07.870 --> 00:09:15.880
So let's give this a run and we expect Frank and James to display and there they are frank and James.

143
00:09:16.350 --> 00:09:16.710
OK.

144
00:09:16.720 --> 00:09:22.540
So let's do one last example and this one will really show you the difference between a pointer and

145
00:09:22.540 --> 00:09:24.050
what it's pointing to.

146
00:09:24.400 --> 00:09:26.360
And let's work through this one.

147
00:09:26.590 --> 00:09:31.480
What we've got here is we've got and this is where it starts right here a line 41.

148
00:09:31.480 --> 00:09:36.480
We've got a vector of string objects called Stooges and it's initialized to Larry Moe and Curly.

149
00:09:36.490 --> 00:09:37.910
All right so what does that look like.

150
00:09:38.080 --> 00:09:41.740
Well let's put it over here let's say it's called Stooges.

151
00:09:41.880 --> 00:09:46.530
It's at a location 0 0 0 0 again and Stooges is a vector.

152
00:09:46.530 --> 00:09:51.830
So it's a vector of three items in this case and each one of those items is a string.

153
00:09:51.840 --> 00:09:55.640
So here's Larry here's Moe and here's curly

154
00:09:58.950 --> 00:10:03.940
and these are strings I won't put the quotes around them just to save a little writing time here.

155
00:10:04.020 --> 00:10:07.330
So that's my Stooges vector.

156
00:10:07.680 --> 00:10:10.470
Now I've got a vector pointer.

157
00:10:10.470 --> 00:10:13.080
All right so it's right here it's called vector pointer.

158
00:10:13.140 --> 00:10:19.550
It's a variable and I'm initializing that to no pointer right now it's pointing nowhere.

159
00:10:20.320 --> 00:10:23.710
And that's perfectly fine because pointers are variables.

160
00:10:24.130 --> 00:10:29.460
Here is where I'm initializing my vector pointer to point somewhere.

161
00:10:29.470 --> 00:10:34.330
So at this point I'm saying vector pointer is the address of stooges.

162
00:10:34.570 --> 00:10:36.790
Well the address of stooges is a thousands.

163
00:10:36.790 --> 00:10:44.030
I'm putting a thousand in here now so it's no longer a null pointer and I'm pointing there.

164
00:10:44.150 --> 00:10:49.300
So now how do I work with that vector through the vector pointer.

165
00:10:49.310 --> 00:10:52.940
It's really straightforward as long as you get your syntax correct.

166
00:10:53.390 --> 00:10:56.570
And the way it works is is very very logical.

167
00:10:56.570 --> 00:11:01.660
So suppose I want to print out Larry just Larry and I want to go through this point.

168
00:11:01.670 --> 00:11:03.160
I don't just want to say Stooges.

169
00:11:03.260 --> 00:11:09.080
Obviously I could say something like Stooges dot at zero right.

170
00:11:09.200 --> 00:11:11.960
That'll definitely protect Larry and set it up put statement.

171
00:11:11.960 --> 00:11:15.700
That's basically what I want to do but I want to do it through the vector pointer.

172
00:11:15.740 --> 00:11:16.630
So what do I do.

173
00:11:16.700 --> 00:11:19.550
Here's the syntax right here and I go really carefully here.

174
00:11:19.550 --> 00:11:25.210
So I take my vector pointer and I dereference it.

175
00:11:25.210 --> 00:11:28.100
That gives me the vector that I'm pointing to.

176
00:11:29.420 --> 00:11:34.220
I put some parens around it because that's I want the priority to be high here.

177
00:11:34.220 --> 00:11:40.020
That gives me the vector so on how to do now is say dot at zero.

178
00:11:40.200 --> 00:11:44.310
Remember if I follow my vector pointer What do I get.

179
00:11:44.310 --> 00:11:46.510
I get stooges.

180
00:11:46.590 --> 00:11:50.150
So that's effectively the same as doing that.

181
00:11:50.280 --> 00:11:55.520
So when I execute that code right there it will print out Larry and hopefully that makes sense it may

182
00:11:55.520 --> 00:12:00.800
take a little bit to understand that these parents are critical right here because we want to dereference

183
00:12:00.800 --> 00:12:05.930
that pointer before we use a dot because the DOT has higher precedence than the dereference operator.

184
00:12:06.080 --> 00:12:08.810
So it's important that you put those parens around there.

185
00:12:09.110 --> 00:12:13.500
So I want to print out all of the Stooges through the vector pointer same idea.

186
00:12:13.640 --> 00:12:18.710
What we can do is we can use a arr. base for loop and what's the collection where the collection is

187
00:12:18.710 --> 00:12:22.890
not vector pointer it's what vector pointer is pointing to.

188
00:12:23.210 --> 00:12:28.410
So if I dereference vector pointer then really what I'm getting in here Stooges right.

189
00:12:29.420 --> 00:12:31.110
That's what I'm pointing to.

190
00:12:31.370 --> 00:12:34.010
And now you can see the syntax is really straightforward.

191
00:12:34.010 --> 00:12:37.050
For every stooge in stooges print it out.

192
00:12:37.070 --> 00:12:38.240
So it's going to print out.

193
00:12:38.390 --> 00:12:40.250
Larry Moe and Curly.

194
00:12:40.580 --> 00:12:43.000
Again we're following that vector pointer.

195
00:12:43.100 --> 00:12:46.600
We're get the vector and then once we're at the vector we can do whatever we want.

196
00:12:46.940 --> 00:12:53.240
So here's an example again of really really distinguishing between the pointer and what it points to

197
00:12:53.570 --> 00:12:56.140
remember pointers are simple.

198
00:12:56.150 --> 00:13:01.750
It's just a simple variable that holds addresses what it points to can be super complicated.

199
00:13:01.910 --> 00:13:07.040
Maybe we can have vectors of vectors of vectors and we could certainly get to them through the pointer

200
00:13:07.040 --> 00:13:08.710
by dereferencing the pointer.

201
00:13:08.840 --> 00:13:11.300
Once we have them we can do whatever we want with them.

202
00:13:11.790 --> 00:13:13.460
OK so that finishes up this video.
