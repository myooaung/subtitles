WEBVTT
1
00:00:05.440 --> 00:00:09.240
Okay welcome to the Section 20 challenge for solution.

2
00:00:09.310 --> 00:00:14.800
This is the challenge where we trying to determine whether a string is a palindrome using a stack in

3
00:00:14.800 --> 00:00:15.430
a cube.

4
00:00:15.700 --> 00:00:20.370
So before I go into the code let's talk about the process that we can use to do this.

5
00:00:20.380 --> 00:00:24.730
Suppose we have a word like radar that's the string.

6
00:00:24.760 --> 00:00:26.650
Obviously that is a palindrome.

7
00:00:26.950 --> 00:00:31.190
What we can do is we can have a Q Over here we can have a stack over here.

8
00:00:31.990 --> 00:00:35.770
We can take these letters and push them to the cue.

9
00:00:35.860 --> 00:00:42.840
So it's going to be the are the A D the A and B are that's your we're putting them in.

10
00:00:42.850 --> 00:00:48.380
So this is the front of the cue here and then we can take the same word and push it on the stack.

11
00:00:48.490 --> 00:00:54.380
So in this case we've got our A D A R.

12
00:00:54.610 --> 00:00:56.200
So I think you know what's happening now.

13
00:00:56.260 --> 00:00:57.660
This is the top of the stack.

14
00:00:57.670 --> 00:00:59.300
This is the front of the cue.

15
00:00:59.320 --> 00:01:04.560
What we can do is we can take those elements and compare them.

16
00:01:04.830 --> 00:01:10.180
If they're the same we can knock them off then we can go to the next one if they're the same we move

17
00:01:10.180 --> 00:01:11.230
onto the next one.

18
00:01:12.890 --> 00:01:17.270
And as you can see it's pretty easy right at the end we're done.

19
00:01:17.270 --> 00:01:20.150
If everything matched we've got a palindrome.

20
00:01:20.150 --> 00:01:21.580
So that's it.

21
00:01:21.740 --> 00:01:23.700
Let's take a look at another example.

22
00:01:24.050 --> 00:01:28.510
So let's say that the word is rear R E A R.

23
00:01:28.640 --> 00:01:30.310
Obviously that is not a palindrome.

24
00:01:30.440 --> 00:01:34.010
So we can have our cue over here and we can have our stack over here.

25
00:01:34.190 --> 00:01:39.890
And what we do as well and q or so it's R E A R.

26
00:01:40.070 --> 00:01:43.760
This is the front and then we're pushed onto the stack.

27
00:01:43.760 --> 00:01:45.220
So again we'll say and I'll separate.

28
00:01:45.230 --> 00:01:49.550
So make clear are e a r.

29
00:01:49.880 --> 00:01:53.110
We'll look at the front of the cue and the top of the stack they match.

30
00:01:53.110 --> 00:01:54.660
So we can get rid of those.

31
00:01:54.830 --> 00:01:57.230
Then we'll look at the front of the cue top of the stack.

32
00:01:57.230 --> 00:01:58.180
They don't match.

33
00:01:58.190 --> 00:01:59.920
That's not a palindrome.

34
00:01:59.930 --> 00:02:00.220
OK.

35
00:02:00.230 --> 00:02:00.760
So that's it.

36
00:02:00.770 --> 00:02:02.870
That's the solution it's pretty straightforward.

37
00:02:02.870 --> 00:02:05.760
Now let's see how we do this in code.

38
00:02:05.790 --> 00:02:10.320
Here is the function and walk you through it really quickly.

39
00:02:10.410 --> 00:02:15.840
So what I'm doing here is a music arranged bass for loop to iterate over that string as has been passed

40
00:02:15.840 --> 00:02:17.010
into me.

41
00:02:17.010 --> 00:02:20.350
And for each character I'm checking is it an alpha character.

42
00:02:20.370 --> 00:02:22.300
I'm not interested in anything else.

43
00:02:22.410 --> 00:02:24.900
If it is I'm converting it to uppercase.

44
00:02:25.200 --> 00:02:28.110
I'm pushing it on the cue and then pushing it on the stack.

45
00:02:28.110 --> 00:02:33.650
That's it that's going to set up those two data structures so that I can process them easily now.

46
00:02:33.660 --> 00:02:40.780
Now scroll up and there's the rest of the code you can see that I've got two variables here C1 and C2

47
00:02:40.810 --> 00:02:42.680
that's where I'm reading the characters into.

48
00:02:42.950 --> 00:02:47.410
And all I'm doing is while the queue is not empty I could have used the stack as well here.

49
00:02:47.410 --> 00:02:50.900
Doesn't really matter because they both have the same number of elements.

50
00:02:50.920 --> 00:02:56.530
So while the queue is not empty I'm assigning the front of the queue to see one and then I'm getting

51
00:02:56.530 --> 00:02:58.310
rid of that character from the queue.

52
00:02:58.630 --> 00:03:05.920
I'm assigning the top of the stack to see two and I'm popping off the stack then I'm comparing the two

53
00:03:05.920 --> 00:03:06.750
characters.

54
00:03:06.790 --> 00:03:08.700
If they're not the same I'm out.

55
00:03:08.710 --> 00:03:10.720
It's not a palindrome.

56
00:03:10.720 --> 00:03:15.190
When I finish this if I loop and everything is done enough got processed all the characters it must

57
00:03:15.190 --> 00:03:16.180
be a palindrome.

58
00:03:16.240 --> 00:03:23.060
I returned to that's it and will run it just to be its build and run.

59
00:03:23.060 --> 00:03:23.900
And there you go.

60
00:03:23.900 --> 00:03:29.640
Those are the results you can see the is true the A is true ABC here is false.

61
00:03:29.750 --> 00:03:34.820
A bunch of these phrases are true and then obviously this is a palindrome and palindrome are not palindromes

62
00:03:34.820 --> 00:03:36.710
so we get a false.

63
00:03:36.710 --> 00:03:37.290
So that's it.

64
00:03:37.290 --> 00:03:41.840
Now you can see a whole bunch of different ways to solve this pilot this palindrome problem.

65
00:03:41.840 --> 00:03:43.140
We did it with a deck earlier.

66
00:03:43.160 --> 00:03:46.520
We did it with the stack and a q now and there's other solutions as well.

67
00:03:46.520 --> 00:03:48.140
So I hope you had fun doing this.

68
00:03:48.290 --> 00:03:55.370
You can see that using stacks and cues and decks and all kinds of data structures are pretty fun actually.

69
00:03:55.370 --> 00:03:56.950
All right so I'll see you in the next video.
