1
00:00:05,730 --> 00:00:09,630
This video we'll take a high level look at how all of this works.

2
00:00:09,630 --> 00:00:14,930
If you're completely new to programming then many of these terms will probably be new to you.

3
00:00:14,950 --> 00:00:19,030
The most important thing to remember is that the computer isn't smart at all.

4
00:00:19,030 --> 00:00:25,010
It simply does exactly what it's told to do by the programmer and the programmer in this case is you.

5
00:00:25,270 --> 00:00:28,450
A computer program is like a recipe. If you want to bake a cake,

6
00:00:28,450 --> 00:00:31,990
there were a series of tasks that you must execute in a specific order.

7
00:00:32,110 --> 00:00:35,050
Otherwise the final product won't be a cake.

8
00:00:35,050 --> 00:00:40,240
Suppose that one of the tasks is to put four eggs in a bowl and mix.  A human might assume that the number

9
00:00:40,240 --> 00:00:44,140
of eggs to be cracked and only the egg whites should be used.

10
00:00:44,290 --> 00:00:46,060
But that's not necessarily true.

11
00:00:46,060 --> 00:00:47,280
They might assume something else.

12
00:00:47,270 --> 00:00:48,370
See that's the problem.

13
00:00:48,520 --> 00:00:52,850
A computer would probably put the eggs, shells and all into a bowl and mix them.

14
00:00:52,870 --> 00:00:58,810
So, when we write programs we will need to be very very explicit about what we want the computer to do.

15
00:00:58,810 --> 00:01:04,270
Otherwise our result will probably be incorrect. In order to write programs.

16
00:01:04,280 --> 00:01:06,200
we use programming languages.

17
00:01:06,200 --> 00:01:11,070
There are many, many programming languages out there and this class we'll be using C++.

18
00:01:11,260 --> 00:01:13,600
The code we write is called source code.

19
00:01:13,730 --> 00:01:19,220
Source code is generally higher level than computer code since it needs to be understandable by humans.

20
00:01:19,550 --> 00:01:26,740
And humans aren't very good at reading long streams of zeros and ones. We write our programs using programming

21
00:01:26,770 --> 00:01:27,550
editors.

22
00:01:27,550 --> 00:01:33,940
These editors are like word processors specifically designed to write these recipes in a specific programming

23
00:01:33,940 --> 00:01:40,120
language. C++ programs have an extension like .cpp,

24
00:01:40,180 --> 00:01:41,750
.h, .CC,

25
00:01:41,800 --> 00:01:48,910
.hpp, and there are several others.  In this course we will use .cpp and .h as the extensions for

26
00:01:48,910 --> 00:01:54,160
the code we write. Just that humans aren't very good at reading computer code,

27
00:01:54,160 --> 00:01:56,680
computers aren't very good at reading source code.

28
00:01:56,710 --> 00:02:01,840
We need to translate the source code to a form that's understandable by the computer.

29
00:02:01,870 --> 00:02:09,160
This form is called object code and the compiler is the translator. The C++ compiler is a program that

30
00:02:09,160 --> 00:02:15,250
takes as input C++ source code and produces object code as output.

31
00:02:15,520 --> 00:02:19,350
If the source code has errors then no object code is produced.

32
00:02:20,810 --> 00:02:26,570
Since our code might depend on code that other programmers wrote,  this is actually a very likely scenario

33
00:02:26,570 --> 00:02:30,410
because we want to reuse as much existing code that's out there as possible.

34
00:02:30,410 --> 00:02:33,070
This makes it easier for us to solve our problems.

35
00:02:33,260 --> 00:02:39,530
So a program called the linker takes our object code and the object code that exists out there in the

36
00:02:39,530 --> 00:02:44,470
form of libraries and links it all together to form an executable program.

37
00:02:44,840 --> 00:02:52,710
That is a program that we can now run that follows the recipe we told the computer to do using C++.

38
00:02:52,750 --> 00:02:58,930
Now that our program is complete we test it to find as many errors as possible

39
00:02:58,960 --> 00:03:00,100
and we debug it to eliminate those errors.

40
00:03:00,280 --> 00:03:05,140
As you can see there's a lot going on in understanding what's going on at this high level is important.

41
00:03:06,160 --> 00:03:11,230
The integrated development environments are programs that allow you to do everything I just mentioned

42
00:03:11,230 --> 00:03:12,750
from a common interface.

43
00:03:12,940 --> 00:03:17,620
Sometimes they make the process seem like magic since all you need to do is click a button and the entire

44
00:03:17,620 --> 00:03:19,270
build process happens.

45
00:03:19,330 --> 00:03:23,790
Let's go over this build process one more time in a visual manner.

46
00:03:23,800 --> 00:03:31,480
First we use an editor to enter our C++ code or to edit existing C++ code. Note that we can have many

47
00:03:31,500 --> 00:03:38,530
C++ source files.  In this course we'll be using a single main cpp file until our programs get larger

48
00:03:39,310 --> 00:03:45,130
then we'll need several C++ source files to better organize our program. Production C++ programs can

49
00:03:45,130 --> 00:03:49,220
have hundreds and even thousands of source files and millions of lines of code.

50
00:03:50,570 --> 00:03:55,360
Then we need to compile the C++ code using a C++ compiler.

51
00:03:55,460 --> 00:04:02,690
If the code contains no syntax errors then the compile will generate an object code file for each C++

52
00:04:02,720 --> 00:04:05,830
source file. On Windows.

53
00:04:05,840 --> 00:04:12,730
the object files have .obj extensions and on Unix and Mac they will have .o extensions.

54
00:04:12,740 --> 00:04:19,700
Finally the object files and any libraries that our program requires must be linked together.

55
00:04:19,810 --> 00:04:27,220
This final step creates an executive file that can run. On Windows the file extension will be .exe and

56
00:04:27,220 --> 00:04:30,340
on Unix and Mac they typically don't have any extensions.

57
00:04:30,490 --> 00:04:32,220
But remember we're not done yet.

58
00:04:32,260 --> 00:04:37,860
You must test your program to find any logic errors and debug it to eliminate those errors.

59
00:04:37,870 --> 00:04:43,120
Let's wrap up this video by looking at some of the available IDEs that can help us with this process.

60
00:04:44,910 --> 00:04:51,870
As mentioned previously IDEs are programs that provide an editor, a way to compile, link, and execute your

61
00:04:51,870 --> 00:04:52,870
source code.

62
00:04:53,280 --> 00:04:58,300
They also often have debuggers that can help you understand your code and fix errors.

63
00:04:58,320 --> 00:05:02,480
Most beginning C++ courses don't cover integrated debuggers at all.

64
00:05:02,490 --> 00:05:08,440
I think this is a mistake and I plan to cover the debugger once we have the basics of C++ behind us.

65
00:05:08,640 --> 00:05:15,230
IDEs also help us keep our files in sync and provide hooks to version control system such as Git and

66
00:05:15,240 --> 00:05:17,320
Subversion.

67
00:05:17,330 --> 00:05:19,040
There are many IDEs available.

68
00:05:19,040 --> 00:05:21,430
I've used all the ones listed here and others.

69
00:05:21,470 --> 00:05:25,180
The selection of an idea for this course was not an easy one.

70
00:05:25,220 --> 00:05:31,160
I wanted an IDE that was free, cross-platform, and had a relatively small hardware requirement to run.

71
00:05:31,780 --> 00:05:36,340
In this course will use CodeLite as the IDE since it meets all of these criteria.

72
00:05:36,350 --> 00:05:40,310
However,  there is no perfect IDE.  As a professional developer

73
00:05:40,310 --> 00:05:45,380
many times you use whatever IDE is used by the team you're working with.  As a consultant,

74
00:05:45,380 --> 00:05:50,420
you should learn as many IDEs as you can and always have an editor command line preference available

75
00:05:50,420 --> 00:05:56,540
as well. As you gain experience in C++, I encourage you to experiment with the various IDEs and

76
00:05:56,540 --> 00:05:58,430
find one that works for you.

77
00:05:58,430 --> 00:06:01,110
Let me talk briefly about the ones that are listed here.

78
00:06:01,250 --> 00:06:04,760
CodeLite as I mentioned is the IDE we're going to use in this course.

79
00:06:04,760 --> 00:06:06,710
It's free, it's cross-platform,

80
00:06:06,920 --> 00:06:13,540
it's fast, and the memory requirements are minimal.
Code::Blocks is also a nice cross-platform IDE.

81
00:06:13,760 --> 00:06:19,160
However the Mac version is pretty buggy and it kept crashing on me all the time.

82
00:06:19,160 --> 00:06:21,930
NetBeans is the Oracle IDE.

83
00:06:22,340 --> 00:06:29,000
It's used mainly to develop Java code but they've got a plug in for C++ and it's actually very good.

84
00:06:29,000 --> 00:06:31,170
It's a great cross-platform IDE.

85
00:06:31,340 --> 00:06:37,730
The problem is that it requires Java JRE install and the memory requirements can be pretty significant.

86
00:06:37,730 --> 00:06:40,360
Same thing with Eclipse. It supports many different languages,

87
00:06:40,370 --> 00:06:43,720
it's cross-platform, but it's got pretty good memory requirements.

88
00:06:44,120 --> 00:06:46,820
CLion is an IDE by JetBrains.

89
00:06:46,850 --> 00:06:51,030
This is a company that's created Kotlin, IntelliJ, and  Android studio.

90
00:06:51,080 --> 00:06:52,640
This is an awesome IDE.

91
00:06:52,760 --> 00:06:56,000
This is my IDE of choice, but it's not free.

92
00:06:56,000 --> 00:07:00,930
It's actually quite expensive but there's a download available that gives you a 30 day trial.

93
00:07:00,980 --> 00:07:02,750
Try it out and see if you like it.

94
00:07:03,020 --> 00:07:07,200
Dev-C++ is a C++  Windows only environment.

95
00:07:07,280 --> 00:07:11,430
It's small, it's fast, and it's a nice IDE, but again it's Windows only.

96
00:07:11,730 --> 00:07:15,370
KDevelop is a cross-platform, multiple language IDE.

97
00:07:15,500 --> 00:07:17,860
However, there is no Mac binary available.

98
00:07:17,870 --> 00:07:25,000
If you want to use it on Mac, you have to build it from the source.  Finally, Visual Studio and Xcode are

99
00:07:25,060 --> 00:07:28,900
Microsoft's and Apple's development environments, respectively.

100
00:07:29,140 --> 00:07:31,590
Visual Studio is a great development environment.

101
00:07:31,690 --> 00:07:34,620
It runs on Windows only in the C++ version.

102
00:07:34,750 --> 00:07:42,220
They have a Mac version of Visual Studio now, but it doesn't support C++ and Xcode is Mac only.

103
00:07:42,340 --> 00:07:46,720
Again it's a great development environment,  if you're a Mac developer you're probably already using it

104
00:07:46,720 --> 00:07:47,920
for iOS development,

105
00:07:47,920 --> 00:07:51,190
Mac OS X development, Swift development,  and so forth.

106
00:07:51,190 --> 00:07:55,460
But as I as I mentioned it's Mac only but it's a great development environment.

107
00:07:55,480 --> 00:08:00,040
There are many more IDEs available. If you find one you like and you think others in the course should

108
00:08:00,040 --> 00:08:00,610
know about it,

109
00:08:00,610 --> 00:08:04,290
please post that information about the IDE in the course forum.

110
00:08:04,300 --> 00:08:05,680
Well that wraps up this video.

111
00:08:05,680 --> 00:08:11,680
I hope you have a better understanding of the build process in C++ and how to IDEs can help make programmers

112
00:08:11,680 --> 00:08:13,030
more productive.
