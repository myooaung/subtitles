WEBVTT
1
00:00:05.480 --> 00:00:10.240
Welcome to the third challenge of the section 19 part of the course.

2
00:00:10.670 --> 00:00:16.370
I mean the section 19 workspace in the challenge underscore three project and this is the project that

3
00:00:16.370 --> 00:00:17.860
I'm supplying to you.

4
00:00:18.020 --> 00:00:22.490
The challenge underscore 300 square solution project will have my solution which I'll go over in the

5
00:00:22.490 --> 00:00:23.930
next video.

6
00:00:23.960 --> 00:00:26.980
This challenge is all about finding words in files.

7
00:00:27.290 --> 00:00:33.710
So the idea here is for you to ask the user to enter a word and then you're going to search the text

8
00:00:33.710 --> 00:00:39.390
of the Romeo and Juliet play by Shakespeare to see how many times that word is found in the text.

9
00:00:39.560 --> 00:00:40.160
OK.

10
00:00:40.370 --> 00:00:45.280
And I'm supplying the Romeo and Juliet text you can see it right here and you can get this from Shakespeare

11
00:00:45.440 --> 00:00:47.170
at MIT dot edu.

12
00:00:47.450 --> 00:00:49.010
And there's the entire play.

13
00:00:49.030 --> 00:00:56.000
It's a very long play but you can see that there's all kinds of words in here and what we want to do

14
00:00:56.000 --> 00:00:59.060
is we want to ask the user to enter a word.

15
00:00:59.060 --> 00:01:03.660
So for example suppose we asked to use it to enter the word and the user enters love.

16
00:01:04.070 --> 00:01:09.160
So in this case I want to match any word that has love in it as a substring.

17
00:01:09.170 --> 00:01:10.280
So love will match.

18
00:01:10.310 --> 00:01:14.150
Lovely will match be loved will match and so forth.

19
00:01:14.150 --> 00:01:16.830
Now you decide whether you want to be case sensitive or not.

20
00:01:16.880 --> 00:01:18.920
My solution is case sensitive.

21
00:01:18.920 --> 00:01:23.140
If you are going to do a case insensitive solution you'd have to write a little extra code.

22
00:01:23.380 --> 00:01:28.940
But here's a few sample runs into the substring to search for the user enters love and the results are

23
00:01:29.300 --> 00:01:34.490
twenty five thousand nine hundred nineteen words were searched and the substring love was found 171

24
00:01:34.490 --> 00:01:35.170
times.

25
00:01:35.180 --> 00:01:40.910
Now you'll get a different result if the user typed in love with a capital of course because my results

26
00:01:40.910 --> 00:01:42.560
are case sensitive.

27
00:01:43.070 --> 00:01:47.390
If the user enters Romeo with a capital R will find it 132 times.

28
00:01:47.390 --> 00:01:50.240
Obviously we're searching the same number of words every time.

29
00:01:50.600 --> 00:01:54.780
If they typed in Juliet with a capital J it's going to find it forty nine times.

30
00:01:54.780 --> 00:01:58.730
And unfortunately my name is not in this place if you type in Frank with a capital F..

31
00:01:58.760 --> 00:02:00.190
It's found zero times.

32
00:02:00.350 --> 00:02:01.400
OK so that's it.

33
00:02:01.400 --> 00:02:04.920
Now I'll give you a sample run of this.

34
00:02:05.240 --> 00:02:07.220
So what's the substring I want to search for.

35
00:02:07.310 --> 00:02:09.000
Well let's search for Romeo.

36
00:02:09.020 --> 00:02:10.530
Lowercase.

37
00:02:10.940 --> 00:02:14.890
That shouldn't be in there and you can see we found a zero time.

38
00:02:14.900 --> 00:02:16.900
He could also see how quick this is.

39
00:02:17.300 --> 00:02:22.870
Let's run it one more time and let's say I want to search for Romeo uppercase.

40
00:02:23.000 --> 00:02:24.330
In this case it will be there.

41
00:02:24.340 --> 00:02:26.540
It's on a couple of the captions.

42
00:02:26.540 --> 00:02:31.540
Actually a lot of times we found it 208 times so that's it.

43
00:02:31.540 --> 00:02:33.550
It's pretty straightforward challenge.

44
00:02:33.550 --> 00:02:34.640
I'm giving you no hints here.

45
00:02:34.650 --> 00:02:38.820
You decide how to read this file whether you want to read it or a line at a time or word of a time a

46
00:02:38.830 --> 00:02:40.030
character at a time.

47
00:02:40.060 --> 00:02:43.950
It's up to you and also how you can figure out that substring.

48
00:02:44.000 --> 00:02:47.100
Remember at this point we should be using modern C++.

49
00:02:47.110 --> 00:02:51.010
We should be using character arrays or character pointers.

50
00:02:51.040 --> 00:02:57.580
We should be using stood String objects write C++ String objects so make sure you use those.

51
00:02:57.580 --> 00:02:58.090
That's it.

52
00:02:58.090 --> 00:02:59.440
Have fun.

53
00:02:59.440 --> 00:03:00.760
Post your solution if you like.

54
00:03:00.760 --> 00:03:02.380
It's actually pretty straightforward.

55
00:03:02.370 --> 00:03:05.880
The only tricky piece is finding that substring in the string.

56
00:03:05.890 --> 00:03:08.110
All right so I'll see you on the other side with the solution.
