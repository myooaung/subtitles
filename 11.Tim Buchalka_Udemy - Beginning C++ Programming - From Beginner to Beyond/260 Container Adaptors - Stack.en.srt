1
00:00:05,560 --> 00:00:13,390
In this video we'll learn about our first as T.L. adapter container the stack the stack is a last in

2
00:00:13,390 --> 00:00:15,900
first out data structure.

3
00:00:16,090 --> 00:00:21,080
It's an adapter because it's implemented in terms of already existing as T.L. containers.

4
00:00:22,210 --> 00:00:28,630
Since all operations on a stack happen on only one end of the top we can easily implement a stack based

5
00:00:28,630 --> 00:00:31,090
on any container that has a back.

6
00:00:31,090 --> 00:00:33,340
These are vector lists and deck.

7
00:00:33,490 --> 00:00:39,130
So the way that the stack methods work is they use delegation and they call the back push back and putback

8
00:00:39,130 --> 00:00:41,440
methods of the underlying container.

9
00:00:42,570 --> 00:00:48,830
Stacks have wide applications in computer science and the ACL provides a simple concise implementation.

10
00:00:49,410 --> 00:00:52,760
You can think of a stack as a stack of books or a stack of plates.

11
00:00:52,950 --> 00:00:57,670
If we stack plates one on top of the other we can't pull out a plate from the middle or from the bottom.

12
00:00:57,720 --> 00:01:01,050
Instead we add plates at the top and remove them from the top.

13
00:01:02,250 --> 00:01:07,890
Since stacks are limited to insertions and deletions and only one end iterators really don't make sense

14
00:01:07,890 --> 00:01:09,120
and they're not supported.

15
00:01:09,300 --> 00:01:11,910
So we can't use stacks with AS HE'LL.

16
00:01:15,290 --> 00:01:17,020
In order to use the stack container.

17
00:01:17,030 --> 00:01:19,620
We have to include the stack header file.

18
00:01:19,850 --> 00:01:23,700
The stack provides a handful of methods that have well-defined behavior.

19
00:01:24,020 --> 00:01:28,140
The push method inserts an element at the top of the stack.

20
00:01:28,260 --> 00:01:31,620
The pop method removes an element from the top of the stack.

21
00:01:31,770 --> 00:01:36,360
The top method access is the top element of the stack but it doesn't remove it.

22
00:01:36,360 --> 00:01:40,750
Finally we have the empty incise methods that we've already seen in the other ACL containers

23
00:01:43,820 --> 00:01:46,400
since the stack is an adapter class.

24
00:01:46,400 --> 00:01:51,080
We can choose what underlying container will be used when we create our stack objects.

25
00:01:51,900 --> 00:01:55,890
In the first example I'm providing no information about the underlying container.

26
00:01:55,890 --> 00:01:58,590
So the T.L. will use a deck by default.

27
00:01:58,950 --> 00:02:03,720
You can see in the next three examples that I'm explicitly stating which underlying container to use

28
00:02:03,990 --> 00:02:05,130
in a template parameter

29
00:02:08,810 --> 00:02:11,300
so let's see how the push method works.

30
00:02:11,300 --> 00:02:14,920
Suppose we have a stack of integers named s and it's empty.

31
00:02:15,140 --> 00:02:20,120
When we push 10 onto the stack we add 10 at the top of the stack.

32
00:02:20,240 --> 00:02:24,270
You can see the top of the stack is a shaded box in the diagrams.

33
00:02:24,560 --> 00:02:28,780
We then push 20 now 20 becomes the top of the stack.

34
00:02:28,790 --> 00:02:32,620
Finally we push 30 and the 30 becomes the new top of the stack.

35
00:02:35,710 --> 00:02:40,690
Once we have a stack that contains elements we can access the element at the top of the stack with the

36
00:02:40,690 --> 00:02:42,060
top method.

37
00:02:42,060 --> 00:02:45,710
This returns a reference to the element at the top and does not remove it.

38
00:02:45,790 --> 00:02:50,890
In this example estat top returns 30 which we display.

39
00:02:50,950 --> 00:02:57,130
Now if we pop the stack the element at the top is removed in this case to 30 and now the 20 becomes

40
00:02:57,130 --> 00:02:59,300
the new top of the stack.

41
00:02:59,360 --> 00:03:05,850
If I pop the stack again the 20 is removed and now the 10 is the new top of the stack if we call the

42
00:03:05,850 --> 00:03:11,450
size method for as here it will display one since there is just one element left in the stack as you

43
00:03:11,450 --> 00:03:14,760
can see the stack API is very straightforward.

44
00:03:14,870 --> 00:03:19,770
But a stack is extremely useful and it's used in computer science to solve many types of problems.

45
00:03:20,640 --> 00:03:23,650
Let's head over to the idea and we'll see some stack examples.

46
00:03:24,780 --> 00:03:30,280
Ok so I'm back in the IDM in the Section 20 workspace in the stack project.

47
00:03:30,560 --> 00:03:35,640
This is a really simple example there's not really a lot we can do with a stack push pop and top.

48
00:03:35,640 --> 00:03:36,570
That's about it.

49
00:03:36,570 --> 00:03:38,760
So let's go over a few examples here.

50
00:03:38,820 --> 00:03:41,460
I'm including stack right here.

51
00:03:41,460 --> 00:03:43,590
Someone to use in a must including vector list.

52
00:03:43,610 --> 00:03:48,900
I'm going to show you how you can create those stacks based on vector and the list underlying container.

53
00:03:48,960 --> 00:03:50,590
So that's the reason I'm including them.

54
00:03:50,640 --> 00:03:51,450
I'm really not using it.

55
00:03:51,450 --> 00:03:53,710
I just wanted to show you how you would declare it here.

56
00:03:53,970 --> 00:03:56,370
But let's talk about this template function.

57
00:03:56,370 --> 00:03:58,890
This is the one that's going to display a stack.

58
00:03:59,040 --> 00:04:01,260
We can't use iterators with stacks.

59
00:04:01,380 --> 00:04:04,370
So there's no real way to display a stack easily.

60
00:04:04,440 --> 00:04:09,810
The only way to display a stack is to let's say we've got a stack here with the 10 and a 20 and I want

61
00:04:09,810 --> 00:04:10,840
to display it.

62
00:04:10,890 --> 00:04:12,750
I need to get the top.

63
00:04:12,750 --> 00:04:15,880
Display it pop it hit the top display it pop it.

64
00:04:16,080 --> 00:04:21,610
So it's a destructive process because of that I'm passing in this stack by value.

65
00:04:21,810 --> 00:04:25,470
I don't want to upset the stack as being passed into me at all.

66
00:04:25,470 --> 00:04:26,920
I don't want to modify it at all.

67
00:04:26,940 --> 00:04:28,620
So that's making a copy.

68
00:04:28,620 --> 00:04:33,930
And what I'm doing over here is I'm destroying that copy which is fine once I finish this function the

69
00:04:33,930 --> 00:04:39,300
stack has been passed into me has not been modified at all and you could see the code it's pretty straightforward.

70
00:04:39,300 --> 00:04:42,030
This is a template function.

71
00:04:42,040 --> 00:04:43,270
There's the type right here.

72
00:04:43,280 --> 00:04:45,720
We're using integer stacks in this example.

73
00:04:45,720 --> 00:04:52,200
And while the stack is not empty I'm getting the top element of the stack that I'm deleting it from

74
00:04:52,200 --> 00:04:54,590
the stack and then displaying it.

75
00:04:54,590 --> 00:04:55,000
That's it.

76
00:04:55,000 --> 00:04:58,440
So this is going to display my stack and you could see the output over here I'd go over that in just

77
00:04:58,440 --> 00:04:59,790
a second.

78
00:04:59,790 --> 00:05:02,800
All right so let me scroll up and there's no test here is just amazing.

79
00:05:02,850 --> 00:05:04,800
Which is pretty straightforward.

80
00:05:04,800 --> 00:05:07,000
Let's go over these examples here.

81
00:05:07,050 --> 00:05:09,750
Here I'm creating a stack of integers.

82
00:05:09,780 --> 00:05:10,380
Call it s.

83
00:05:10,390 --> 00:05:12,350
That's someone we're going to use in these examples.

84
00:05:12,600 --> 00:05:16,640
But I can also create a one as two and three that are stacks of integers.

85
00:05:16,770 --> 00:05:23,520
But the underlying container would be a vector or list or a deck whatever you choose on 925 here you

86
00:05:23,520 --> 00:05:28,330
can see that I'm just not providing anything in which case it defaults to a deck.

87
00:05:28,340 --> 00:05:33,650
All right so let's push some values on the stack and pop them off and play around with it a little bit.

88
00:05:33,650 --> 00:05:35,960
Then we'd just scroll up just a little bit right about there.

89
00:05:35,960 --> 00:05:36,220
OK.

90
00:05:36,230 --> 00:05:38,900
So I've got that stack S10 have already defined.

91
00:05:39,050 --> 00:05:44,150
And what I want to do is I want to use arr. base for a loop is going to loop over this range right here

92
00:05:44,160 --> 00:05:47,860
one two three four five and push those numbers onto that stack.

93
00:05:47,870 --> 00:05:48,510
Yes.

94
00:05:48,580 --> 00:05:49,510
Remember that.

95
00:05:49,520 --> 00:05:51,700
Assume that this is my stack right here.

96
00:05:51,740 --> 00:05:55,040
The numbers are being pushed this way and then popped off.

97
00:05:55,040 --> 00:06:01,460
So for someone to push one and then two and then three and then four and then five.

98
00:06:01,640 --> 00:06:03,880
So that's the situation right now.

99
00:06:04,040 --> 00:06:07,670
Then I'm going to call display remember display is going to make a copy of this stack.

100
00:06:07,670 --> 00:06:09,320
It's not going to mess with this one.

101
00:06:09,500 --> 00:06:13,710
And what it's going to do is it's going to pop the elements off the stacks and pop off the five the

102
00:06:13,760 --> 00:06:18,080
four the three the two in the one member everything happens appear at the top.

103
00:06:18,080 --> 00:06:21,080
So it's going to display exactly what I just said.

104
00:06:21,080 --> 00:06:27,790
Five four three two one you could see five was the top of the stack in that copy.

105
00:06:27,800 --> 00:06:34,420
Now if I pop two elements off of this stack the five and the four up sorry I missed one step right here.

106
00:06:34,440 --> 00:06:35,810
Let's back up to that.

107
00:06:35,850 --> 00:06:40,950
In this case I'm pushing 100 onto the stack so I'm pushing 100 on to here and then I'm displaying that

108
00:06:40,950 --> 00:06:43,510
stack again and then you can see that the 100 is there.

109
00:06:44,400 --> 00:06:46,610
The 100 is now at the top of the stack.

110
00:06:46,620 --> 00:06:49,650
Now I'm popping off two elements off the stack.

111
00:06:49,800 --> 00:06:52,030
The hundred and five are being popped off the stack.

112
00:06:52,040 --> 00:06:54,560
So the top of my stack now is the four.

113
00:06:54,930 --> 00:07:00,270
And when I display my stack right here on line 39 you can see it's displaying four three two and one

114
00:07:02,410 --> 00:07:04,660
in this code here on line 41.

115
00:07:04,660 --> 00:07:07,090
I'm just looping while the stack is not empty.

116
00:07:07,090 --> 00:07:10,190
So as long as the stack is not empty I'm deleting stuff in it.

117
00:07:10,240 --> 00:07:11,710
This is how we can clear a stack.

118
00:07:11,710 --> 00:07:14,590
There is no clear method for a stack.

119
00:07:14,590 --> 00:07:17,940
So this is how you would clear it you would just have to pop everything off of it.

120
00:07:17,980 --> 00:07:24,330
Then when we display the stack here on line 43 we get the empty stack which is exactly what we expected.

121
00:07:24,340 --> 00:07:26,110
What's the size of that stack.

122
00:07:26,110 --> 00:07:29,550
It better be 0 right because it's empty and that's exactly what it is right here.

123
00:07:29,670 --> 00:07:30,390
Zero.

124
00:07:30,790 --> 00:07:35,770
And the last thing I wanted to show you was suppose I push 10 onto the stack from that stack is gone

125
00:07:35,770 --> 00:07:36,690
it's empty now.

126
00:07:36,850 --> 00:07:40,910
So I said I want to push 10 onto the stack just like I did right here.

127
00:07:41,200 --> 00:07:47,710
And then I display the stack I get back at 10 top returns a reference to the top of the stack the top

128
00:07:47,710 --> 00:07:49,540
of the stack right now is the 10.

129
00:07:49,540 --> 00:07:51,430
It's a reference so I can modify it.

130
00:07:51,550 --> 00:07:54,450
I could say that top is 100.

131
00:07:54,490 --> 00:07:57,040
So I can change that top to 100 now.

132
00:07:57,190 --> 00:08:02,660
So when I display the stack you can see it's display a hundred right here OK.

133
00:08:02,700 --> 00:08:05,580
I think that's about it that's really all there is to a stack.

134
00:08:05,580 --> 00:08:10,840
It's a very very specific data structure that we're going to use when you use it.

135
00:08:10,860 --> 00:08:15,240
All you care about is pushing popping top checking to see if it's empty.

136
00:08:15,240 --> 00:08:15,990
That's it.

137
00:08:15,990 --> 00:08:17,660
You're not concerned with anything else.

138
00:08:17,670 --> 00:08:23,580
Those are the only methods that are important and most only methods you actually want if you've got

139
00:08:23,580 --> 00:08:25,530
a stack that gives you a bunch of other methods.

140
00:08:25,530 --> 00:08:29,690
It's not really a stack and they're you know be careful because you don't want and you don't want to

141
00:08:29,700 --> 00:08:37,890
have a stack of integers let's say 10 20 and 30 and that whatever thing you're using that you think

142
00:08:37,890 --> 00:08:40,590
might be a stack is letting you have access to these guys.

143
00:08:40,620 --> 00:08:43,210
That's not a stack stack all.

144
00:08:43,350 --> 00:08:46,310
Everything happens right up here at the top.

145
00:08:46,420 --> 00:08:52,680
Sometimes you'll see these data structures defined by programmers that have pushes and pops and inserts

146
00:08:52,680 --> 00:08:55,570
stack and all kinds of things and it's not really a stack.

147
00:08:55,570 --> 00:08:56,850
It's just a mess.

148
00:08:57,010 --> 00:08:59,520
In this case this is a true stack.

149
00:08:59,520 --> 00:09:03,430
It supports exactly what a stack is supposed to support.

150
00:09:03,430 --> 00:09:09,040
All right in the next video we'll talk about the Q which is a waiting line and of course here you can

151
00:09:09,040 --> 00:09:12,290
see that the last one in was the first one out.

152
00:09:12,310 --> 00:09:16,360
That's why the stack is called a life flow data structure.

153
00:09:16,360 --> 00:09:18,820
The cue is called a five fold data structures.

154
00:09:18,820 --> 00:09:22,980
The first one in is the first one out like a waiting line or waiting queue.

155
00:09:23,170 --> 00:09:24,640
And that's what we're talking about in the next video.
