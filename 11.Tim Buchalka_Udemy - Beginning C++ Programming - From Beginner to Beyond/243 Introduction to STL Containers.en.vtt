WEBVTT
1
00:00:05.410 --> 00:00:11.160
In this video I'd like to go over some of the basics of the standard template library containers.

2
00:00:11.320 --> 00:00:14.920
We will go over the details of specific containers in this video.

3
00:00:14.920 --> 00:00:16.590
We'll get to that soon enough.

4
00:00:16.600 --> 00:00:21.970
Instead it's important to understand what the containers have to offer as far as functionality is concerned

5
00:00:22.390 --> 00:00:26.080
and understand what types of elements we can store in them.

6
00:00:26.410 --> 00:00:32.290
First we know that the ACL containers are data structures that can store almost any type of object and

7
00:00:32.290 --> 00:00:38.110
they're implemented as template base classes each container has a set of member functions that we can

8
00:00:38.110 --> 00:00:38.720
use.

9
00:00:38.830 --> 00:00:44.080
Some of these member functions are specific to a particular container but there are quite a few member

10
00:00:44.080 --> 00:00:49.210
functions that all containers implement move over a table with some of these methods in the next few

11
00:00:49.210 --> 00:00:50.390
slides.

12
00:00:50.920 --> 00:00:57.570
Finally each container has an associated header file that must be included in order to use the container.

13
00:00:58.120 --> 00:01:01.350
We've already seen this with vector and string.

14
00:01:01.360 --> 00:01:04.630
I'll tell you what the specific header files are for each container class.

15
00:01:04.630 --> 00:01:05.760
We go over.

16
00:01:06.100 --> 00:01:14.210
OK so let's take a look at some of the common methods provided by the ACL containers this table and

17
00:01:14.210 --> 00:01:20.380
the table in the next slide show some of the functionality provided by the ACL containers.

18
00:01:20.390 --> 00:01:22.580
Let's start with the default constructor.

19
00:01:22.700 --> 00:01:27.320
All containers provide default constructors and it results in an empty container.

20
00:01:28.170 --> 00:01:33.540
They also provide many versions of overloaded constructors that allow you to initialize the containers

21
00:01:33.570 --> 00:01:34.800
in many ways.

22
00:01:34.800 --> 00:01:39.840
You have to refer to the specific container you want to use to see the various overloaded constructors.

23
00:01:41.040 --> 00:01:47.130
Containers also provide copy and move constructors so we can create a new container based on an existing

24
00:01:47.130 --> 00:01:48.350
container.

25
00:01:48.570 --> 00:01:51.130
We can choose to copy it or move it.

26
00:01:51.660 --> 00:01:54.160
Of course containers provide destructors.

27
00:01:54.270 --> 00:01:58.090
The container destructors cleanup the container and delete all the objects in it.

28
00:01:59.250 --> 00:02:02.370
Containers also provide copy and move assignment.

29
00:02:02.370 --> 00:02:08.070
This of course will allow you to copy or move an existing container into another existing container.

30
00:02:08.070 --> 00:02:14.850
Remember this is not initialization and containers provide the last three methods in the table which

31
00:02:14.850 --> 00:02:16.530
are used very often.

32
00:02:16.530 --> 00:02:19.450
Size returns the number of elements in the container.

33
00:02:19.710 --> 00:02:25.710
Empty returns true or false depending on whether the container is empty or not and the insert method

34
00:02:25.890 --> 00:02:31.480
allows us to insert an element into a container in this table.

35
00:02:31.540 --> 00:02:35.280
We can see that we also have the ability to compare two containers.

36
00:02:35.440 --> 00:02:40.210
We can test to see if the elements of one container are less than the elements of a second container

37
00:02:40.870 --> 00:02:46.070
and we can also test for less than or equal to greater than and greater than or equal to.

38
00:02:46.090 --> 00:02:50.370
We can also check to see if the contents of two containers are the same or not.

39
00:02:50.410 --> 00:02:57.670
Using the equality operators we have the swap function which swaps to containers and we can remove one

40
00:02:57.670 --> 00:03:01.180
or all elements from a container using erase and clear.

41
00:03:01.600 --> 00:03:04.870
And finally we can get iterators to elements in containers.

42
00:03:05.050 --> 00:03:10.050
Not all container support all these iterators but I listed them anyway so you could see them here.

43
00:03:10.180 --> 00:03:14.920
We'll talk about iterators in more detail in the next video so don't worry you'll learn about them in

44
00:03:14.920 --> 00:03:17.740
a few minutes.

45
00:03:17.740 --> 00:03:22.780
This last slide is super important now that we know a little bit more about the functionality provided

46
00:03:22.780 --> 00:03:23.770
by containers.

47
00:03:23.890 --> 00:03:27.600
Let's talk about what types of objects we can store in containers.

48
00:03:28.500 --> 00:03:31.440
First we can store all of the primitive types in containers.

49
00:03:31.650 --> 00:03:32.890
Int float double.

50
00:03:32.940 --> 00:03:33.880
All of them.

51
00:03:34.020 --> 00:03:35.950
But what about our objects.

52
00:03:35.970 --> 00:03:40.860
It's important to remember that when we store an element in a container the container makes a copy of

53
00:03:40.860 --> 00:03:46.530
that element so we must be sure that our objects are copyable and assignable.

54
00:03:46.530 --> 00:03:53.520
This means they must have default copy constructors or our own copy constructors as well as copy assignment.

55
00:03:53.520 --> 00:03:57.400
We can also provide move semantics for efficiency.

56
00:03:57.460 --> 00:04:02.550
Finally the ordered associate of containers must be able to compare objects.

57
00:04:02.560 --> 00:04:06.360
They do this using the less than and the equality operators.

58
00:04:06.430 --> 00:04:10.920
So your objects must support these operators via operator overloading.

59
00:04:11.870 --> 00:04:17.650
OK I hope you can see that everything we've learned and done in this course comes together right here.

60
00:04:17.670 --> 00:04:21.900
We now know exactly what we have to do to make our own objects work with the SBL.

61
00:04:22.080 --> 00:04:24.110
And you know what it's not that complicated.

62
00:04:24.210 --> 00:04:30.400
In most cases we can use all of the compiler provided functionality unless we have raw pointers and

63
00:04:30.410 --> 00:04:33.370
we already learned how to handle classes with raw pointers.

64
00:04:33.660 --> 00:04:38.280
Well that completes this video in the next video we'll learn about iterators which give us something

65
00:04:38.280 --> 00:04:39.720
to do with these containers.

66
00:04:39.720 --> 00:04:40.330
I'll see you there.
