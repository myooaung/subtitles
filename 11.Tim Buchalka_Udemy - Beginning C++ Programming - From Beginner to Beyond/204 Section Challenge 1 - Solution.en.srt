1
00:00:05,620 --> 00:00:09,910
Welcome back to the challenge one solution for Section 17.

2
00:00:10,000 --> 00:00:14,590
What I'll do now is I'll write these three functions and we'll do it together and we'll explain it as

3
00:00:14,590 --> 00:00:15,490
we go.

4
00:00:15,520 --> 00:00:20,590
The first one is the make function that's the one that creates that unique pointer.

5
00:00:20,590 --> 00:00:22,630
And the way we do that is we use make unique.

6
00:00:22,630 --> 00:00:24,320
Now obviously we need to return it.

7
00:00:24,370 --> 00:00:28,490
So we'll say return still make unique.

8
00:00:29,080 --> 00:00:30,600
And what are we making.

9
00:00:30,680 --> 00:00:39,490
Well we're making a vector and the syntax is going to look kind of weird here but we'll just have to

10
00:00:39,490 --> 00:00:43,480
deal with it because that's just the way it is and it's not that hard once you break things up together

11
00:00:43,480 --> 00:00:44,050
as I said.

12
00:00:44,050 --> 00:00:47,480
So we're returning a unique pointer to a vector right.

13
00:00:47,590 --> 00:00:51,040
And that vector is of stood shared pointers

14
00:00:53,650 --> 00:00:59,360
to test objects and we'll have three greater than size here to close that up.

15
00:00:59,410 --> 00:01:03,160
And then what we need to do is we need to call the constructor for that vector.

16
00:01:03,160 --> 00:01:03,660
That's it.

17
00:01:03,670 --> 00:01:05,380
That's all we really need to do here.

18
00:01:05,410 --> 00:01:08,880
Now we'll clean this up in a second and we'll make this even better than it is here.

19
00:01:08,920 --> 00:01:10,630
But that's one liner that's all it's doing.

20
00:01:10,630 --> 00:01:15,070
We have to make that unique pointer remember down here on line 89.

21
00:01:15,070 --> 00:01:19,760
We've got a constructed unique pointer right but it's not pointing anywhere yet.

22
00:01:19,810 --> 00:01:23,650
That's what we're doing here and now we're actually creating that vector.

23
00:01:23,650 --> 00:01:26,030
All right so now there's the Phil. How do we do the fill.

24
00:01:26,200 --> 00:01:28,540
Well the fill expects that vector.

25
00:01:28,540 --> 00:01:29,700
So it's pretty straightforward.

26
00:01:29,710 --> 00:01:33,000
I just need to read that integer from the usery for each iteration.

27
00:01:33,010 --> 00:01:35,950
Right so we need a temporary variable here let's just call that tap.

28
00:01:35,950 --> 00:01:40,240
That's what we're going to read into and now we're going to loop How many times are we going to loop

29
00:01:40,250 --> 00:01:44,150
or a loop number times however many numbers the user wants to enter.

30
00:01:44,260 --> 00:01:52,660
So we'll say four ant equals one will start at 1 and we'll go I left center equal to numb and increment

31
00:01:52,960 --> 00:01:54,530
each time.

32
00:01:54,580 --> 00:01:55,960
So that's my loop.

33
00:01:55,960 --> 00:01:59,620
We're going to use a for loop here because we know exactly how many times we need to loop we need to

34
00:01:59,620 --> 00:02:01,470
loop number times.

35
00:02:01,510 --> 00:02:02,360
So what do we do here.

36
00:02:02,380 --> 00:02:14,890
Let's prompt the users will say stood out and we'll ask to use to enter data point and we'll just give

37
00:02:14,890 --> 00:02:18,730
them a little number here so that's easier for them to understand which one they're putting in.

38
00:02:19,120 --> 00:02:23,310
And we'll just surround that in brackets like that.

39
00:02:23,620 --> 00:02:24,640
That's it.

40
00:02:24,640 --> 00:02:29,120
And then what we do is we're read from CN into temp.

41
00:02:29,350 --> 00:02:33,940
So we're going to do that three times five times ten times however many times they want.

42
00:02:33,940 --> 00:02:37,060
Now what we can do is we can create our shared pointer.

43
00:02:37,180 --> 00:02:40,050
We know the data that's going to be in the test object right.

44
00:02:40,070 --> 00:02:44,200
That's this guy right here Templi just read it so we can do this in a couple of different ways.

45
00:02:44,200 --> 00:02:45,130
Let's do it two ways.

46
00:02:45,130 --> 00:02:47,360
The suit in two steps and then we'll do it one step.

47
00:02:47,380 --> 00:02:53,500
So what we need to do is we need to have a variable here and it's going to be a shared pointer to a

48
00:02:53,500 --> 00:02:54,370
temp object.

49
00:02:54,370 --> 00:02:57,470
So my template parameters temp.

50
00:02:58,120 --> 00:02:59,170
And what do we call this.

51
00:02:59,170 --> 00:03:00,390
This is called PCR.

52
00:03:00,400 --> 00:03:02,170
This variable name could be anything.

53
00:03:02,170 --> 00:03:07,140
And we're going to use to make shared again test.

54
00:03:07,480 --> 00:03:09,390
And what are we going to construct it with.

55
00:03:09,510 --> 00:03:14,830
Well we're going to construct it with data or temp whatever the user entered.

56
00:03:14,830 --> 00:03:21,250
Now that we've got that pointer remember we have a vector of shared pointers we just created the shared

57
00:03:21,250 --> 00:03:21,690
pointer.

58
00:03:21,700 --> 00:03:29,290
So all we need to do now is just say Veck dot push back and we're going to push back the pointer.

59
00:03:29,290 --> 00:03:30,520
That's it we're done.

60
00:03:30,520 --> 00:03:32,580
So that's exactly what's going on here.

61
00:03:32,590 --> 00:03:37,150
And we're going to loop that many times create each key for each iteration create that shared pointer

62
00:03:37,420 --> 00:03:40,550
instantiate that that test object and that's it.

63
00:03:40,600 --> 00:03:46,120
Now rather than do it in two steps like this let's just do it in one step because it's much more efficient

64
00:03:46,120 --> 00:03:47,490
to use move semantics.

65
00:03:47,590 --> 00:03:55,030
So let's just say vector push back and write in here we'll just say stood make shared right so that's

66
00:03:55,030 --> 00:03:58,650
going to call that's going to create that R-value and the R-value ref will be moved over.

67
00:03:58,810 --> 00:04:03,870
So test and temp.

68
00:04:03,910 --> 00:04:04,290
All right.

69
00:04:04,300 --> 00:04:07,360
So again one simple statement.

70
00:04:07,360 --> 00:04:10,360
And now the last thing we need to do is display this vector.

71
00:04:10,570 --> 00:04:13,740
So I've already got the header information here with the two outs.

72
00:04:13,960 --> 00:04:14,960
And what do we do here.

73
00:04:14,960 --> 00:04:17,720
Well let's just use a real simple range based for loop.

74
00:04:17,770 --> 00:04:27,250
So we'll say for conc auto We use a ref Mukalla pointer and we're going to iterate through that vector

75
00:04:28,030 --> 00:04:34,960
and for each iteration all I want to do is just say stood out and we want to print the pointer's data

76
00:04:34,990 --> 00:04:40,400
right so we need to do reference that pointer and get its data.

77
00:04:41,410 --> 00:04:42,540
Something like that.

78
00:04:43,090 --> 00:04:45,720
And then an end line.

79
00:04:46,570 --> 00:04:47,470
And that should do it.

80
00:04:47,590 --> 00:04:50,410
Let's compile this.

81
00:04:51,160 --> 00:04:53,770
And there's a run how many points do you want to enter.

82
00:04:53,770 --> 00:05:03,340
Let's say I want to enter 10 data points and there'll be that say two four six eight 10 12 14 16 18

83
00:05:03,340 --> 00:05:08,850
and the last one is 20 there we go we are displaying our vector data and then you can see that our data

84
00:05:08,850 --> 00:05:12,310
is being cleaned up automatically Our Test objects are being destroyed.

85
00:05:12,480 --> 00:05:13,410
Pretty cool.

86
00:05:13,410 --> 00:05:16,470
And you can see that there wasn't a lot of code to write at all.

87
00:05:16,470 --> 00:05:19,710
Now let's clean this up just a little bit here.

88
00:05:19,860 --> 00:05:25,110
Remember we can allow the compiler to do smart types for us so we can really clean this up a little

89
00:05:25,110 --> 00:05:29,650
bit since the compiler knows exactly what we're returning right here.

90
00:05:29,790 --> 00:05:36,090
We can simply replace this whole piece right here to auto just say auto right here let the compiler

91
00:05:36,090 --> 00:05:41,160
figure out what the type of that return value is and it knows it based on this and we can also change

92
00:05:41,160 --> 00:05:42,970
it up here in the function prototype.

93
00:05:43,380 --> 00:05:47,240
Get rid of all that and just replace that with auto.

94
00:05:47,280 --> 00:05:50,920
So we can replace this entire return type right here with auto.

95
00:05:51,480 --> 00:05:55,970
And now we build again we get the same compile we get the same run.

96
00:05:55,980 --> 00:06:00,450
So let's put three data items in here and we'll say five six and seven.

97
00:06:00,450 --> 00:06:04,670
There we go we're displaying our data vector 5 6 7 and we're destroying those objects.

98
00:06:04,920 --> 00:06:05,840
Pretty simple.

99
00:06:05,880 --> 00:06:07,140
No news no deletes.

100
00:06:07,140 --> 00:06:10,020
Not worrying about who needs to delete what.

101
00:06:10,170 --> 00:06:10,660
And that's it.

102
00:06:10,680 --> 00:06:12,700
That's the solution to this challenge.

103
00:06:12,720 --> 00:06:13,910
I hope yours was close.

104
00:06:13,980 --> 00:06:18,110
If you had issues with the pointers and figuring out how they work don't worry just keep at it.

105
00:06:18,210 --> 00:06:20,460
It's just a matter of practice and understanding.

106
00:06:20,550 --> 00:06:24,960
Conceptually what's going on and what's pointing to what dereferencing what to get what.

107
00:06:24,960 --> 00:06:27,650
And it's just a little process that takes time to learn.
