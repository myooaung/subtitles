WEBVTT
1
00:00:05.620 --> 00:00:10.870
As you start overloading constructors you often notice that the code used to initialize objects in these

2
00:00:10.870 --> 00:00:12.690
constructors is very similar.

3
00:00:12.880 --> 00:00:17.200
Many times only the initialization values of the data members is what changes.

4
00:00:17.200 --> 00:00:20.600
One common source of program errors is duplicated code.

5
00:00:20.650 --> 00:00:24.790
So we want to minimize the amount of duplicated code in our programs.

6
00:00:24.810 --> 00:00:28.550
C++ allows us to use delegating constructors.

7
00:00:28.570 --> 00:00:34.800
The idea is that we can call another constructor of the same class in the initialization list of constructor.

8
00:00:35.980 --> 00:00:37.690
The syntax is really simple.

9
00:00:37.690 --> 00:00:42.670
After the parameter list we read a colon and then we follow it with the call to the constructor we wish

10
00:00:42.670 --> 00:00:43.600
to call.

11
00:00:43.990 --> 00:00:46.970
Let's see an example with the player class.

12
00:00:47.150 --> 00:00:51.080
Here's the declaration of the player class as we've used previously.

13
00:00:51.080 --> 00:00:53.440
We've got the three overloaded constructors.

14
00:00:54.940 --> 00:00:59.380
And here's the code for the overloaded constructors using initialization lists.

15
00:00:59.380 --> 00:01:05.260
Notice how similar the initialization lists are in this example the only differences are the values

16
00:01:05.260 --> 00:01:10.510
used for initialization rather than write these initializer lists over and over in our code.

17
00:01:10.570 --> 00:01:14.170
We can simply delegate initialization to another constructor.

18
00:01:14.170 --> 00:01:21.620
Let me show you how in this example the first constructor is the three argument constructor and we use

19
00:01:21.620 --> 00:01:25.670
a constructor initialization list as we did previously.

20
00:01:25.880 --> 00:01:31.100
But when we defined the no args constructor instead of writing another very similar initialization list

21
00:01:31.340 --> 00:01:37.070
we simply called the three args constructor with the initialization data we need we call the constructor

22
00:01:37.070 --> 00:01:41.870
by providing the constructor name which has the same name as the class followed by the arguments to

23
00:01:41.870 --> 00:01:43.070
the constructor.

24
00:01:43.780 --> 00:01:49.540
In this case the no args constructor is the delegating constructor since it delegates object initialization

25
00:01:49.540 --> 00:01:50.790
to another constructor.

26
00:01:51.870 --> 00:01:56.810
In the last example we do the same thing but we delegate to the 3R constructor and provide name 0 0

27
00:01:56.810 --> 00:01:59.150
0 0 and 0 as arguments.

28
00:01:59.190 --> 00:02:03.510
It's important to note that this only works in the initialization list.

29
00:02:03.510 --> 00:02:07.980
You can't call the other constructors from the body in the delegating constructors.

30
00:02:08.070 --> 00:02:13.370
Also you can't delegate to another constructor and provide initialization values to class members.

31
00:02:13.770 --> 00:02:17.760
Let's update the player class in the ID to support delegating constructors.

32
00:02:17.760 --> 00:02:28.230
Now OK so we're back in the ID and I'm in section 13 workspace in the delegating constructors project.

33
00:02:28.260 --> 00:02:33.600
So what we've got here is the player class again and we've got our same three overloaded constructors

34
00:02:33.810 --> 00:02:40.020
and what we've got down here from 9:21 all the way down the line 32 are are implemented constructors

35
00:02:40.020 --> 00:02:48.350
usually using constructor initialization lists as you can see a lot of this is very duplicated.

36
00:02:48.380 --> 00:02:53.510
So what we're going to do is we're going to refactor this so that instead of using constructor initialization

37
00:02:53.510 --> 00:02:55.950
list we're going to use delegating constructors.

38
00:02:56.000 --> 00:03:02.720
Now what we want to do is we want to delegate everything in this example to this three args constructor.

39
00:03:02.720 --> 00:03:03.800
So what can we do.

40
00:03:03.860 --> 00:03:10.580
Well what we can do is we can replace that initializer list with a delegation.

41
00:03:10.580 --> 00:03:17.020
So we simply say player and we'll say none and zero zero.

42
00:03:17.120 --> 00:03:17.700
OK.

43
00:03:18.050 --> 00:03:21.010
So I need to lead the rest of this.

44
00:03:21.320 --> 00:03:22.640
And that's basically it.

45
00:03:22.640 --> 00:03:27.580
So what's going to happen here is then replace that parentheses with a Kerley.

46
00:03:28.940 --> 00:03:33.710
So it's going to happen here is we're going to call the constructor from this constructor.

47
00:03:33.710 --> 00:03:39.290
That's the whole idea with delegating constructors this no args constructor is the delegating constructor

48
00:03:39.290 --> 00:03:39.690
now.

49
00:03:39.860 --> 00:03:44.090
So what are going to do is we're going to call the player constructor that has those three arguments

50
00:03:44.090 --> 00:03:47.160
which is this guy right here the one with the initialization list.

51
00:03:47.240 --> 00:03:51.320
So this guy's really going to do all the work for all of these constructors.

52
00:03:51.380 --> 00:03:53.360
We're simply just going to delegate to work to it.

53
00:03:54.520 --> 00:03:55.920
We'll do the same thing here.

54
00:03:56.260 --> 00:04:04.420
Well call player and we'll play that said named Val and zero zero again and I'll delete the rest of

55
00:04:04.420 --> 00:04:07.230
this and I think I put a print to see again.

56
00:04:08.120 --> 00:04:13.440
So I'll replace that with a curly here and there we go.

57
00:04:13.700 --> 00:04:21.840
So in this case we're calling the same idea we're calling this three arg constructor from here.

58
00:04:21.920 --> 00:04:26.990
Now let's put some output statements in here just to see exactly how this works in the training that

59
00:04:26.990 --> 00:04:27.890
takes place.

60
00:04:27.890 --> 00:04:33.740
So where I'm going to do in the body of this constructor here I'm simply going to say C out and I'm

61
00:04:33.740 --> 00:04:38.780
going to say no args constructor that's this.

62
00:04:41.450 --> 00:04:42.710
And we'll have an end line.

63
00:04:42.920 --> 00:04:47.750
And then what I'm going to do is I'm just going to copy and paste that one line of code into each one

64
00:04:47.750 --> 00:04:49.530
of these constructor bodies here.

65
00:04:52.770 --> 00:05:00.390
And in this case this is the one constructor that just expects the one string and this guy here expects

66
00:05:00.390 --> 00:05:03.710
all three.

67
00:05:04.110 --> 00:05:09.460
So I just read through Yarg And that's one arg.

68
00:05:10.040 --> 00:05:10.590
OK.

69
00:05:10.780 --> 00:05:11.320
So that's it.

70
00:05:11.320 --> 00:05:17.080
Now we've got our constructors implemented we're using delegation here in this context and we'll just

71
00:05:17.080 --> 00:05:19.150
run our made now and the idea here is the same.

72
00:05:19.150 --> 00:05:24.130
We're going to create the same objects as we did before we've got to an empty which is a player object

73
00:05:24.640 --> 00:05:28.660
and that's going to use the no artist's constructor because I'm not supplying any information.

74
00:05:28.780 --> 00:05:34.630
So it's going to come up here and then rather than initialize it here we're just simply going to delegate

75
00:05:34.630 --> 00:05:39.290
the construction of this object to the constructor that expects three args.

76
00:05:39.370 --> 00:05:40.270
This guy.

77
00:05:40.630 --> 00:05:41.050
OK.

78
00:05:41.230 --> 00:05:44.920
So that's what we're going to do and what we'll do is we'll put brakes on all of these constructors

79
00:05:44.920 --> 00:05:46.910
so we can see when they're being called.

80
00:05:47.200 --> 00:05:51.770
And we'll also put a break right there and let's step through this.

81
00:05:54.280 --> 00:05:58.460
And let's see we've got an error I'm missing a terminating character.

82
00:05:58.630 --> 00:06:02.130
Ok I probably have that on set now.

83
00:06:02.140 --> 00:06:06.760
Let's try that again.

84
00:06:06.770 --> 00:06:09.550
OK so I may put the output window over here so we can see it.

85
00:06:10.930 --> 00:06:14.920
And we'll walk through this and remember when we're in the constructor's we're going to use the this

86
00:06:14.920 --> 00:06:17.820
keyword which is really a pointer to the object that I'm creating.

87
00:06:17.950 --> 00:06:20.770
And like I said I'll talk about that a little bit later in the course.

88
00:06:21.160 --> 00:06:22.000
So we're right here.

89
00:06:22.140 --> 00:06:26.540
9:38 we want to create that empty object right here.

90
00:06:26.540 --> 00:06:29.760
So it's going to call this no args constructor so let's step through it.

91
00:06:30.760 --> 00:06:32.540
You can see I'm right here now.

92
00:06:32.770 --> 00:06:36.640
Now what we expect is we don't expect this one line of code to execute in the body.

93
00:06:36.640 --> 00:06:40.660
What we expect is to be thrown down here right because that's what I'm doing.

94
00:06:40.660 --> 00:06:41.690
I'm delegating.

95
00:06:41.690 --> 00:06:43.960
So there we go.

96
00:06:43.960 --> 00:06:52.250
Now we're at line 32 this initialiser list is going to execute and initialize my object that's done.

97
00:06:52.260 --> 00:06:59.040
If I look at this you'll be able to see none 0 0 which is exactly what I expected.

98
00:06:59.040 --> 00:07:01.050
Now I execute the body of this constructor.

99
00:07:01.060 --> 00:07:07.850
So this is going to say three args constructor and a spell constructor but that's ok I'll fix it when

100
00:07:07.850 --> 00:07:09.250
I save the files.

101
00:07:09.260 --> 00:07:11.950
So three args constructor just executed.

102
00:07:11.960 --> 00:07:13.040
Now I'm not done.

103
00:07:13.040 --> 00:07:17.870
I need to come back to the constructor that called it and then execute this this body right here.

104
00:07:17.870 --> 00:07:20.010
No args constructor so let's do that.

105
00:07:20.120 --> 00:07:27.770
See we're back now to line 23 and we execute that one line so you can see here that the no args constructor

106
00:07:28.040 --> 00:07:31.300
call the three args constructor which is exactly what we expected.

107
00:07:32.690 --> 00:07:36.210
OK so now let's use this one right here when creating the Frank object.

108
00:07:36.260 --> 00:07:40.240
I'm calling that one constructor this one right here that expects a string.

109
00:07:40.250 --> 00:07:42.260
So let's step through it.

110
00:07:42.290 --> 00:07:44.130
There I am a bit initialiser.

111
00:07:46.490 --> 00:07:53.800
I'm delegating to the same one here the player constructor that has the three arguments it's initialized.

112
00:07:53.810 --> 00:07:57.310
Now I'm going to print out three args constructor again.

113
00:07:57.440 --> 00:08:03.490
Now when I come back here I still need to execute the body of this constructor which I do here.

114
00:08:03.500 --> 00:08:09.100
So in this case the top case the no args constructor called the three args constructor in this case

115
00:08:09.110 --> 00:08:12.380
right now the one our constructor called the three Rs constructor.

116
00:08:12.510 --> 00:08:16.760
OK now we'll basically do this last one right here the villain.

117
00:08:16.880 --> 00:08:21.020
And for this when we're just doing this guy directly we're just running this constructor right here.

118
00:08:21.050 --> 00:08:28.310
It's going to initialises three values and simply print out three args constructor and there's the output

119
00:08:28.370 --> 00:08:29.180
and we're done.

120
00:08:30.050 --> 00:08:30.390
OK.

121
00:08:30.410 --> 00:08:35.110
So that's an example of delegating constructors it's pretty straightforward.

122
00:08:35.120 --> 00:08:39.110
Many times you'll have an example this really really simple like this and this example will simplify

123
00:08:39.110 --> 00:08:45.530
even further in the next video where we'll use default parameters but you can always find a way to use

124
00:08:45.530 --> 00:08:48.440
these delegating constructors and they're very very handy ideas.

125
00:08:48.440 --> 00:08:53.930
The nice thing about this is whatever my initialiser is here and I've got to run some code remember

126
00:08:54.320 --> 00:08:58.920
that if this guy delegates to this guy both those bodies are going to be executed.
