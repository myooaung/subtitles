1
00:00:05,550 --> 00:00:10,870
In this video we'll look at the difference between a shallow copy and a deep copy in the context of

2
00:00:10,870 --> 00:00:18,020
the copy constructor first will assume that the object we're copying has a raw pointer when the object

3
00:00:18,020 --> 00:00:23,280
is constructed will likely allocate storage for the date of it that pointer is pointing to.

4
00:00:23,540 --> 00:00:27,910
And then when we're done with the copy we'll release the memory as per best practices.

5
00:00:28,130 --> 00:00:32,640
But what happens in the copy constructor we can do a shallow copy or a deep copy.

6
00:00:32,660 --> 00:00:33,930
Let's see what that means.

7
00:00:35,930 --> 00:00:37,900
Let's first look at doing a shallow copy.

8
00:00:37,910 --> 00:00:44,270
And the problem is we can run into a shallow copy as the default behavior provided by the compiler generated

9
00:00:44,270 --> 00:00:45,730
copy constructor.

10
00:00:45,740 --> 00:00:50,000
It basically does member wise copying of all the object attributes.

11
00:00:50,060 --> 00:00:55,610
So you end up with the newly created object and the object being copied both pointed to the same area

12
00:00:55,610 --> 00:00:57,320
of storage in the heap.

13
00:00:57,350 --> 00:00:58,620
So what's the problem.

14
00:00:58,910 --> 00:01:03,500
Well the problem comes into play when one of those objects is destroyed and its destructor is called

15
00:01:04,070 --> 00:01:05,010
When this happens.

16
00:01:05,090 --> 00:01:09,140
The objects destructor releases the memory allocated on the heap as it should.

17
00:01:09,140 --> 00:01:14,730
However the other object is still pointing to this released area and DC area is still valid.

18
00:01:14,760 --> 00:01:16,490
This could lead to settle errors.

19
00:01:16,500 --> 00:01:20,520
The best thing that can happen is that the program crashes while in development so that you can fix

20
00:01:20,520 --> 00:01:21,240
the air.

21
00:01:21,750 --> 00:01:24,660
But we'll learn how to do a deep copy and avoid the error completely.

22
00:01:24,780 --> 00:01:29,460
But first let's walk through an example that has a class with the pointer attribute that does a shallow

23
00:01:29,460 --> 00:01:30,000
copy.

24
00:01:30,060 --> 00:01:33,750
So we can really understand the problem.

25
00:01:33,790 --> 00:01:36,020
Here's the class we use in this example.

26
00:01:36,280 --> 00:01:41,440
The class is called shallow and it has a single data attribute called data that's a pointer to a single

27
00:01:41,440 --> 00:01:42,360
integer.

28
00:01:42,550 --> 00:01:47,110
This class is about as simple an example as we could write that demonstrates the problem with a shallow

29
00:01:47,110 --> 00:01:47,850
copy.

30
00:01:48,310 --> 00:01:52,040
But any class that has a raw pointer as a data member will have the same issues.

31
00:01:53,180 --> 00:01:57,890
This class has a constructor that expects an integer a copy constructor and a destructor.

32
00:01:58,010 --> 00:02:00,400
Let's see how these are implemented.

33
00:02:00,790 --> 00:02:02,590
Here's the code for the constructor.

34
00:02:02,590 --> 00:02:08,320
Notice that the constructor allocates storage for the integer and stores the past in integer D where

35
00:02:08,320 --> 00:02:13,260
that data pointer is pointing since we allocated the storage dynamically.

36
00:02:13,260 --> 00:02:15,550
Then we must be sure to release it in the destructor.

37
00:02:15,570 --> 00:02:17,540
Let's do that now.

38
00:02:17,620 --> 00:02:19,120
Here's the destructor.

39
00:02:19,150 --> 00:02:23,430
It simply frees the storage that was allocated by the constructor as it should.

40
00:02:23,440 --> 00:02:25,760
It also displays a message to the console.

41
00:02:25,960 --> 00:02:29,680
OK so now let's implement the copy constructor.

42
00:02:29,680 --> 00:02:31,490
Here's the copy constructor.

43
00:02:31,570 --> 00:02:37,750
This copy constructor is user defined but it provides the same semantics as the default compiler generated

44
00:02:37,750 --> 00:02:38,900
copy constructor.

45
00:02:38,920 --> 00:02:42,760
If we hadn't provided this one noticed it in the initializer list.

46
00:02:42,760 --> 00:02:44,620
We simply copy the pointer.

47
00:02:44,890 --> 00:02:47,080
This is member Y's copy.

48
00:02:47,080 --> 00:02:52,810
Now we have a problem in this case the source object and the newly created object both point to the

49
00:02:52,810 --> 00:02:55,460
same in heat that was allocated for the data.

50
00:02:55,840 --> 00:02:57,630
But why is this a problem.

51
00:02:58,210 --> 00:03:03,190
Well the problem comes into play when we make a copy of a shallow object using the copy constructor

52
00:03:03,340 --> 00:03:05,650
that's doing a shallow copy.

53
00:03:05,650 --> 00:03:10,190
Suppose we have a function display shallow that expects a shallow object by copy.

54
00:03:10,480 --> 00:03:16,330
We make the copy with the copy constructor as usual but when that local object s goes out of scope its

55
00:03:16,330 --> 00:03:21,580
destructor is called and the destructor releases the storage in the heap that is pointing to.

56
00:03:21,850 --> 00:03:23,100
You see the problem now.

57
00:03:23,200 --> 00:03:28,630
The object that was copied into this function still points to this now release storage but it thinks

58
00:03:28,630 --> 00:03:33,560
that the storage is valid so all kinds of bad things can happen now.

59
00:03:33,670 --> 00:03:40,000
Here's a sample mean we create objects one is a shallow Object object one will be created and an integer

60
00:03:40,000 --> 00:03:42,940
will be allocated on the heap and 100 stored in it.

61
00:03:42,940 --> 00:03:48,760
Now we call display shallow in a copy of object one will be created inside that function and when that

62
00:03:48,760 --> 00:03:52,690
function is done the copy of object 1 will be destroyed.

63
00:03:52,690 --> 00:03:59,230
Since object 1 and the copy that was just destroyed pointed to the same memory area object one now points

64
00:03:59,230 --> 00:04:01,030
to invalid storage.

65
00:04:01,030 --> 00:04:05,660
If we try to access that storage from object 1 our program could crash.

66
00:04:05,890 --> 00:04:10,870
Also when the destructor for object one eventually gets called it will try to release memory that's

67
00:04:10,870 --> 00:04:13,370
no longer valid and will probably crash.

68
00:04:13,720 --> 00:04:18,520
Let's head over to the idea and we'll walk through this example and I'll dry out exactly what's happening.

69
00:04:19,820 --> 00:04:21,320
OK so I'm back in the IEEE.

70
00:04:21,320 --> 00:04:28,700
I'm in the section 13 workspace in the shallow copy project and we've got a program and the class is

71
00:04:28,700 --> 00:04:31,410
called Shallow the same one that I put in the slides.

72
00:04:31,520 --> 00:04:35,690
I would a couple of little changes in the main just to streamline it a little bit.

73
00:04:35,790 --> 00:04:40,490
Anyway this program does a shallow copy in the copy constructor and I'll walk you through that right

74
00:04:40,490 --> 00:04:40,720
now.

75
00:04:40,730 --> 00:04:44,900
But first let's just run it and I'm going to run it without the debugger so you can see that it does

76
00:04:44,900 --> 00:04:46,000
indeed crash.

77
00:04:47,050 --> 00:04:52,110
And there's the crash right here in Windows and it's a bad crash.

78
00:04:52,120 --> 00:04:53,220
It's not the kind of thing we want.

79
00:04:53,290 --> 00:04:55,410
So the point of this.

80
00:04:55,570 --> 00:05:01,270
This video is to try to understand exactly why this is crashing why we need a deep copy and why we've

81
00:05:01,270 --> 00:05:03,540
got to be really careful when we use raw pointers.

82
00:05:03,790 --> 00:05:05,220
So let's take a look at the class.

83
00:05:05,290 --> 00:05:06,480
The class is shallow.

84
00:05:06,610 --> 00:05:08,860
It's got a raw pointer here to a single integer.

85
00:05:08,860 --> 00:05:12,760
We could have created an array of integers a pointer to some sort of object.

86
00:05:12,760 --> 00:05:17,220
Does it really matter in this case it's about as simple as example as you can get.

87
00:05:17,290 --> 00:05:21,880
And here we have a set value in a get value that we're using in my main.

88
00:05:22,000 --> 00:05:26,440
We have a constructor that just expects the integer and when it does is you can see the source code

89
00:05:26,440 --> 00:05:28,700
for the constructor right here on line 21.

90
00:05:28,990 --> 00:05:35,070
It allocates storage on the heap dynamically for that one integer and the integer is being passed in.

91
00:05:35,080 --> 00:05:38,710
Then I'm just dereferencing the pointer and storing that integer where data is pointing.

92
00:05:38,710 --> 00:05:40,140
Really really simple.

93
00:05:40,510 --> 00:05:42,400
OK the destructor.

94
00:05:42,410 --> 00:05:43,560
Let's take a look at that.

95
00:05:43,580 --> 00:05:48,490
Obviously whenever we allocate storage in the constructor the best practice is to release that storage

96
00:05:48,490 --> 00:05:49,640
in the destructor.

97
00:05:49,660 --> 00:05:53,950
That's what we're doing here and in this case we're just displaying destructor fring data so that we

98
00:05:53,950 --> 00:05:55,620
can see when it's being called.

99
00:05:55,930 --> 00:06:00,130
We're going to step through this in the debugger so we will definitely be able to see when it's being

100
00:06:00,130 --> 00:06:00,920
called.

101
00:06:00,940 --> 00:06:03,100
And then we've got the copy constructor.

102
00:06:03,250 --> 00:06:08,830
In this case we're doing a shallow copy and you can see right here on line 27 in the constructor initialization

103
00:06:08,830 --> 00:06:09,050
list.

104
00:06:09,070 --> 00:06:15,250
All we're doing is we're copying the value in that data variable which is the pointer from source to

105
00:06:15,310 --> 00:06:17,580
this which is the object we're creating right now.

106
00:06:17,800 --> 00:06:22,540
So it's copying the pointer not what it's pointing to it's going to happen as both these objects when

107
00:06:22,540 --> 00:06:27,210
we copy them will be pointing to the same area and I'll show you that in the debugger.

108
00:06:27,400 --> 00:06:32,950
Then we've got a real simple function right here called display shallow which we pass in an object by

109
00:06:32,950 --> 00:06:33,550
value.

110
00:06:33,610 --> 00:06:37,130
So we're going to get a copy of it and that's where the problem shows up.

111
00:06:37,250 --> 00:06:38,570
Again I walk you through that.

112
00:06:38,860 --> 00:06:43,610
OK so let's let's debug this and we'll step through it so we can see exactly what's going on.

113
00:06:44,550 --> 00:06:48,920
And I move the output window here to the right so you can see our constructors and destructors being

114
00:06:48,920 --> 00:06:49,820
called.

115
00:06:49,850 --> 00:06:56,350
All right so I'm right here on line 42 and here we're just doing a regular constructor call and we're

116
00:06:56,350 --> 00:07:00,490
passing in the integer to us of this constructor right here in line 21 will be called.

117
00:07:00,490 --> 00:07:04,690
So let's step through this and you can see now on my 22.

118
00:07:04,840 --> 00:07:07,250
We're going to allocate the new integer on the heap.

119
00:07:07,430 --> 00:07:08,310
We just did that.

120
00:07:08,320 --> 00:07:16,530
And now I'm storing 100 into that area and I'm back to line 43 So at this point J one has been created.

121
00:07:16,530 --> 00:07:22,310
It's right here and you can see that data is a pointer to an integer.

122
00:07:22,310 --> 00:07:26,130
And we just store to 100 where that integer was pointing.

123
00:07:26,740 --> 00:07:28,740
OK now we're going to run into a little bit of a problem.

124
00:07:28,740 --> 00:07:35,130
This is where the deep copy is necessary rather than the shallow copy and I'll do another video after

125
00:07:35,130 --> 00:07:38,690
this one will do a deep copy and I'll explain how that exactly works.

126
00:07:38,760 --> 00:07:41,270
But let's walk through this.

127
00:07:41,310 --> 00:07:46,300
We're going to call display shallow which is this function right here on 9:36.

128
00:07:46,560 --> 00:07:51,450
And this is just a regular function it's not a member function and we're going to pass object one into

129
00:07:51,450 --> 00:07:51,960
it.

130
00:07:51,960 --> 00:07:53,690
Well we're doing that by value.

131
00:07:53,700 --> 00:07:56,380
You can see right here there's no pointer there's no reference.

132
00:07:56,380 --> 00:07:58,810
It's just by value so we need to make a copy.

133
00:07:58,830 --> 00:08:04,410
So what we expect is that C++ needs to make a copy so it's going to call the copy constructor to do

134
00:08:04,410 --> 00:08:05,040
that.

135
00:08:05,310 --> 00:08:06,850
And let's do that right now.

136
00:08:06,990 --> 00:08:08,410
So we step through it.

137
00:08:08,490 --> 00:08:13,950
You can see right here we're in the copy constructor and we're doing that shallow copy.

138
00:08:13,950 --> 00:08:16,950
So at this point you can see them just step one more line.

139
00:08:17,010 --> 00:08:17,350
OK.

140
00:08:17,370 --> 00:08:20,560
So what we've got now is let's take a look over here.

141
00:08:20,850 --> 00:08:27,400
We've got source now remember source is what's being passed into the source in this case is O.B. J1.

142
00:08:27,420 --> 00:08:36,950
So we've got so RBJ one right here has a pointer data that points to an area in memory and we stored

143
00:08:36,970 --> 00:08:38,250
100 in there.

144
00:08:38,330 --> 00:08:41,120
Now the location of that memory is right there.

145
00:08:41,110 --> 00:08:45,990
Foxtrot 0 0 so I'll just write that in there those last three digits.

146
00:08:46,060 --> 00:08:49,810
So it's Foxtrot 0 0 that's where that data is on the heap.

147
00:08:50,050 --> 00:08:50,910
OK.

148
00:08:50,920 --> 00:08:57,400
Now what happened I just made a copy of RBJ one but I didn't copy what it's pointing to.

149
00:08:57,400 --> 00:08:58,880
I only copied the data.

150
00:08:59,020 --> 00:09:04,840
So if you can see as I expand this which is right here inside here this is the new object we're creating

151
00:09:04,840 --> 00:09:06,020
this right there.

152
00:09:06,100 --> 00:09:15,220
You can see that the address of that pointer data is exactly the same.

153
00:09:15,350 --> 00:09:20,470
So what we just did we just created a copy of this that's pointing to the same area and memory.

154
00:09:20,480 --> 00:09:24,380
So let's walk through this a couple of more steps and then we'll just keep going here.

155
00:09:24,380 --> 00:09:24,710
Great.

156
00:09:24,710 --> 00:09:25,800
Now we're here.

157
00:09:25,880 --> 00:09:27,460
We've just created the copy.

158
00:09:27,500 --> 00:09:31,310
So what we just did was we created a copy and it's called S.

159
00:09:31,370 --> 00:09:32,250
It's right here.

160
00:09:32,630 --> 00:09:36,990
Now as has a pointer called data.

161
00:09:37,030 --> 00:09:41,690
And guess what it's pointing to the same area and memory as RBJ one.

162
00:09:41,860 --> 00:09:45,540
So what we just did was yes sure we made a copy of Abi J1.

163
00:09:45,580 --> 00:09:50,050
Absolutely but we didn't make a copy of what that data pointer was pointing to.

164
00:09:50,050 --> 00:09:57,250
Ideally what we would want with a deep copy is for S to be pointing to its own copy of that data over

165
00:09:57,250 --> 00:09:57,680
here.

166
00:09:57,790 --> 00:10:00,300
But that's not what's happening here.

167
00:10:00,550 --> 00:10:03,320
And what we can see is clear the screen real quick.

168
00:10:03,460 --> 00:10:11,460
What we can see here is that if we look at the s right here that's that local variable you can see that

169
00:10:11,460 --> 00:10:15,330
fox track 0 0 is pointing to exactly the same memory location.

170
00:10:15,330 --> 00:10:19,680
So here's the problem right now as is just about to go out of scope.

171
00:10:20,100 --> 00:10:23,680
So again let me try that one more time just to be very very clear here.

172
00:10:23,730 --> 00:10:29,340
We've got Obie J1 pointing to this area right here where it's got 100 and again that's the data attribute

173
00:10:29,340 --> 00:10:31,540
that's pointing right.

174
00:10:31,620 --> 00:10:38,430
And then we've got s which is also pointing to that area well now as it goes out of scope what happens

175
00:10:38,430 --> 00:10:40,250
when ESC goes out of scope.

176
00:10:40,530 --> 00:10:42,310
We get the destructor called.

177
00:10:42,360 --> 00:10:42,620
Right.

178
00:10:42,620 --> 00:10:43,800
So let's walk through that.

179
00:10:43,800 --> 00:10:45,660
We can see that destructor being called.

180
00:10:46,050 --> 00:10:47,340
It's out of scope right now.

181
00:10:47,340 --> 00:10:52,020
Boom there's the call to the destructor on line 32 and the destructor deletes data.

182
00:10:52,020 --> 00:10:54,030
So what did the destructor just do.

183
00:10:54,030 --> 00:10:56,950
It freed up this area in memory right here.

184
00:10:56,970 --> 00:11:02,640
So as far as the C++ runtime system is concerned this is no longer valid memory.

185
00:11:03,030 --> 00:11:04,820
Right we just deleted it.

186
00:11:05,160 --> 00:11:12,020
So this guy right here now is pointing to invalid memory.

187
00:11:12,210 --> 00:11:14,670
Now hopefully you can see that that's a big problem here.

188
00:11:14,670 --> 00:11:15,560
So what's going to happen.

189
00:11:15,570 --> 00:11:17,490
Well let's keep going.

190
00:11:18,800 --> 00:11:27,380
We're going to destructor Frina data now we go back to main right here and notice where we're at right

191
00:11:27,380 --> 00:11:29,120
now at this point.

192
00:11:29,180 --> 00:11:34,400
This is now gone right because we were we're all that's been cleaned off the stack and I'll take those

193
00:11:34,400 --> 00:11:36,560
Xs off to see see what's going on here.

194
00:11:36,560 --> 00:11:42,890
This is the situation we've got we've got RBJ one now has a pointer called data that's pointing to an

195
00:11:42,890 --> 00:11:48,890
area on the heap that has 100 in it because that hasn't changed but that memory is invalid.

196
00:11:48,920 --> 00:11:56,600
So now if we try to make a copy of RBJ one and call it object again this calls a copy constructor again.

197
00:11:56,780 --> 00:11:58,340
Let's let's see what happens here.

198
00:11:58,370 --> 00:12:00,400
Let's walk through this again.

199
00:12:00,500 --> 00:12:03,170
Copy constructor gets called because we're making a copy.

200
00:12:03,170 --> 00:12:05,390
And what do we just do what we just copy it again.

201
00:12:05,390 --> 00:12:10,800
So now we've got two objects pointing to invalid data and I'll walk you through this.

202
00:12:11,180 --> 00:12:12,440
And we're back to main.

203
00:12:12,450 --> 00:12:21,700
Here is what I've got now is I've got RBJ to right here pointing to that same and valid data and that's

204
00:12:21,700 --> 00:12:28,390
not good and you can obviously see what's going on here you can see RBJ 1 and RBJ 2 are pointing to

205
00:12:28,390 --> 00:12:30,790
exactly the same memory locations right.

206
00:12:30,790 --> 00:12:34,310
Here you can see Foxtrot 0 0 Foxtrot 0 0.

207
00:12:34,570 --> 00:12:36,740
That's the situation we've got right here.

208
00:12:37,930 --> 00:12:42,490
So this could be problematic in a lot of ways.

209
00:12:42,490 --> 00:12:50,440
Suppose that on line 46 I'm setting the data value for RBJ 2 to 100.

210
00:12:50,470 --> 00:12:50,920
Right.

211
00:12:50,980 --> 00:12:52,360
So I'm coming this way.

212
00:12:52,520 --> 00:12:58,320
Sorry to 1000 some coming this way through this area here and try to put a thousand in there.

213
00:12:58,420 --> 00:13:02,590
Well what did I just do assuming that this works right assuming that we haven't allocated any other

214
00:13:02,590 --> 00:13:04,970
objects and they've used that space.

215
00:13:05,230 --> 00:13:10,750
But why did I just do I just changed RBJ one's data to two thousand indirectly without even knowing

216
00:13:10,750 --> 00:13:13,770
it because they're both pointing to the same area in memory.

217
00:13:13,900 --> 00:13:17,380
So let's walk through that and you'll see exactly what I'm talking about.

218
00:13:17,830 --> 00:13:21,170
Right now you can see they're both pointing me refresh this here.

219
00:13:22,020 --> 00:13:28,760
Since they're both pointing to the same area in memory I just changed O.B. Tuesday to 2000.

220
00:13:28,830 --> 00:13:35,730
But what happened here with one's data changed 2002 of course it did it were pointed to the same error

221
00:13:35,730 --> 00:13:37,960
in memory right.

222
00:13:37,980 --> 00:13:43,350
Now comes the problem and this is where the crash comes in and I'll clear the screen real quick as we

223
00:13:43,440 --> 00:13:47,420
unwind now and start freeing up these two objects right.

224
00:13:47,420 --> 00:13:49,410
I mean they're going out of scope right here in Maine.

225
00:13:49,500 --> 00:13:55,260
So we need to delete the data for both of them are calling both the destructors well that pointers pointing

226
00:13:55,260 --> 00:13:56,300
to invalid data.

227
00:13:56,310 --> 00:13:58,250
And when we try to delete it we're going to have a problem.

228
00:13:58,260 --> 00:14:00,600
That's where the crash comes in and I'll just step through it.

229
00:14:00,600 --> 00:14:10,290
You can see the destructors being unwound now and at some point we will crash there's the crash right

230
00:14:10,290 --> 00:14:10,790
there.

231
00:14:11,770 --> 00:14:12,100
OK.

232
00:14:12,110 --> 00:14:17,090
So you can see what's happening here you can see how important it is to really understand what's going

233
00:14:17,090 --> 00:14:20,560
on with your memory when you're using raw pointers.

234
00:14:20,560 --> 00:14:25,000
What we'll do in the next video is we'll go over deep copy and them will do.

235
00:14:25,000 --> 00:14:30,000
Another example of this that we just did now using deep copy you can see how that works better.
