WEBVTT
1
00:00:05.410 --> 00:00:09.450
In this video we'll look at the syntax for declaring pointer variables.

2
00:00:09.700 --> 00:00:13.910
You should not feel very comfortable declaring variables we've been doing it throughout the course.

3
00:00:14.140 --> 00:00:19.330
Well we declare pointer variables in exactly the same way except that we add the asterisk prior to the

4
00:00:19.330 --> 00:00:20.830
variable name.

5
00:00:20.830 --> 00:00:24.880
In this context the Astros does not function as a mathematical operator.

6
00:00:24.910 --> 00:00:30.340
It serves to declare the pointer the way you read these declarations is right to left.

7
00:00:30.360 --> 00:00:36.720
So the first example int pointer is a pointer to an integer double pointer is a pointer to a double.

8
00:00:36.720 --> 00:00:41.000
Notice in this declaration I place the asterisk next to the type.

9
00:00:41.100 --> 00:00:42.410
Both styles are equivalent.

10
00:00:42.420 --> 00:00:44.100
And the compiler doesn't care.

11
00:00:44.340 --> 00:00:48.930
But there has been a longstanding argument among C++ programmers about which is better.

12
00:00:49.350 --> 00:00:53.820
I always declare my pointers with the asterisk next to the name and that's how I do it in this course.

13
00:00:53.940 --> 00:00:57.320
But I wanted to make you aware of the equivalence styles.

14
00:00:57.480 --> 00:01:04.140
Char pointer is a pointer to a character and string pointer is a pointer to a C++ string object just

15
00:01:04.140 --> 00:01:05.010
like all variables.

16
00:01:05.010 --> 00:01:09.260
If we don't initialize our variables they will contain garbage data.

17
00:01:09.390 --> 00:01:14.010
In this case all the pointer variables declared contain garbage data.

18
00:01:14.130 --> 00:01:16.740
So let's see how we can initialize pointer variables.

19
00:01:17.940 --> 00:01:23.960
In C++ it's very important that you always initialize all pointer variables before you use them.

20
00:01:24.060 --> 00:01:28.190
If you don't initialize a pointer variable it will have garbage data.

21
00:01:28.590 --> 00:01:33.420
In this case that garbage data represents an address since that's what a pointer contains.

22
00:01:33.420 --> 00:01:37.420
So you can think of an uninitialized pointer as pointing anywhere.

23
00:01:37.530 --> 00:01:41.810
So if we use it we could be accessing memory that we have no business messing around with.

24
00:01:41.970 --> 00:01:44.150
We don't even know what that memory is.

25
00:01:44.160 --> 00:01:48.190
Initializing pointer variables is just like initializing Nonpoint to variables.

26
00:01:48.300 --> 00:01:54.120
We can use an initializer list syntax and these examples were initializing the pointer variables to

27
00:01:54.120 --> 00:01:54.560
zero.

28
00:01:54.570 --> 00:01:56.970
That's what NULL pointer represents.

29
00:01:56.970 --> 00:02:00.280
This means that we're initializing the pointers to point nowhere.

30
00:02:00.300 --> 00:02:03.200
That's very different from pointing anywhere.

31
00:02:03.240 --> 00:02:08.460
We can also initialize pointers to actually point to a variable and we'll do that in the next video.

32
00:02:08.460 --> 00:02:13.420
Let's review what we just talked about since it's very very important to understand.

33
00:02:13.410 --> 00:02:19.650
Always initialize all pointer variables uninitialized pointers contain garbage data and point anywhere

34
00:02:20.640 --> 00:02:25.570
no pointer was introduced in C plus plus 11 and it represents address zero.

35
00:02:25.710 --> 00:02:28.150
Which means that the pointer is pointing nowhere.

36
00:02:28.410 --> 00:02:33.210
Use NULL pointer to initialize your pointers unless you initialize them to a variable to a function.

37
00:02:33.210 --> 00:02:35.370
This nulls out the pointer.

38
00:02:35.370 --> 00:02:38.310
I know I've repeated myself several times in this short video.

39
00:02:38.310 --> 00:02:39.680
I'm doing that for a reason.

40
00:02:39.750 --> 00:02:44.430
After a long career programming with many languages that have pointer variables I can tell you that

41
00:02:44.430 --> 00:02:49.960
one of the most common pointer related errors that I've seen in code reviews is uninitialized pointers.

42
00:02:50.220 --> 00:02:54.190
Most of the time this didn't cause a problem but the potential for trouble is there.

43
00:02:54.270 --> 00:02:57.530
So always initialize your pointers in the next video.

44
00:02:57.540 --> 00:03:02.170
We'll see how we can access the address of the pointer and store addresses in pointer variables.
