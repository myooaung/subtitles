WEBVTT
1
00:00:05.700 --> 00:00:10.830
Now that we know what shallow copying is in the context of the copy constructor let's look at deep copy

2
00:00:11.790 --> 00:00:12.760
with a deep copy.

3
00:00:12.780 --> 00:00:18.640
We don't just simply copy the pointer instead we copy the data pointed to by the pointer.

4
00:00:18.650 --> 00:00:23.930
This usually means that we have to allocate storage for the copy data and then perform the copy with

5
00:00:23.930 --> 00:00:24.770
a deep copy.

6
00:00:24.770 --> 00:00:31.060
Each object will have a pointer to unique storage in the heap and both areas will contain the same data.

7
00:00:31.310 --> 00:00:38.200
You always want to use a copy constructor that does a deep copy when you have Rossie post post pointers.

8
00:00:38.480 --> 00:00:40.890
Let's look at the class we use in this example.

9
00:00:40.910 --> 00:00:43.820
It's exactly the class we use for the shallow copy.

10
00:00:43.820 --> 00:00:46.910
Except that I named this class deep to be clear.

11
00:00:46.910 --> 00:00:52.400
We have a raw C++ pointer that points to a single integer and here's the class will use this class has

12
00:00:52.400 --> 00:00:57.050
a constructor that expects an integer a copy constructor and a destructor is before.

13
00:00:57.110 --> 00:00:59.180
And let's see how we implemented these methods.

14
00:01:00.550 --> 00:01:05.680
Here's the constructor and you can see that this code is exactly the same as we implemented Inshalla.

15
00:01:05.710 --> 00:01:10.930
After all we want to create those objects the same way the constructor allocates storage for the integer

16
00:01:10.930 --> 00:01:17.320
and then stores the past in integer D into where that data pointers pointing since we allocated the

17
00:01:17.320 --> 00:01:20.290
storage dynamically then we have to release it in the destructor.

18
00:01:20.290 --> 00:01:22.610
So do that now.

19
00:01:22.670 --> 00:01:24.140
Here's the code for the destructor.

20
00:01:24.140 --> 00:01:30.010
Again it frees the data that was allocated by the constructor and displays a message to the console.

21
00:01:30.020 --> 00:01:33.070
Now this is where the change comes in it's with the copy constructor.

22
00:01:33.070 --> 00:01:35.190
Let's see the difference.

23
00:01:35.410 --> 00:01:40.990
So here's the copy constructor and this is where things change from the copy constructor we saw previously

24
00:01:40.990 --> 00:01:42.670
that does a shallow copy.

25
00:01:42.790 --> 00:01:45.160
Here we don't simply copy the pointer.

26
00:01:45.190 --> 00:01:50.800
Instead we allocate storage for the copy of what we're pointing to and then copy the data itself over

27
00:01:51.180 --> 00:01:56.680
so you can see we're creating a new integer and then were copying what the source data pointers pointed

28
00:01:56.800 --> 00:02:02.520
to which is an integer into our newly created area on the heap and we're also displaying a message.

29
00:02:02.560 --> 00:02:10.280
Now we have an exact unique copy of the original storage in each object since we can also delegate object

30
00:02:10.280 --> 00:02:14.240
construction from a copy constructor to another constructor within the same class.

31
00:02:14.240 --> 00:02:16.040
We can do that as follows.

32
00:02:16.040 --> 00:02:20.780
Notice that we're delegating to the constructor that expects an integer and the integer repassing in

33
00:02:20.780 --> 00:02:23.230
is the one pointed to by data.

34
00:02:23.240 --> 00:02:28.730
Now we've made a deep copy of that data pointer and both source and the newly created object each have

35
00:02:28.730 --> 00:02:33.150
an exact unique copy of the original heap storage.

36
00:02:33.170 --> 00:02:37.440
So now we'll have that function display db that expects a deep object by value.

37
00:02:37.640 --> 00:02:43.640
We make a copy yes use it and then when ESC goes out of scope we call the destructor which frees up

38
00:02:43.640 --> 00:02:46.100
the allocated storage.

39
00:02:46.250 --> 00:02:51.110
In this case there is no problem since the allocated storage pointed to by the data point to that S

40
00:02:51.380 --> 00:02:54.060
is unique to S..

41
00:02:54.220 --> 00:02:57.250
And finally here is the main that we use for the shallow example.

42
00:02:57.340 --> 00:02:59.780
Except we're using now with the DB example.

43
00:02:59.830 --> 00:03:01.530
This code will now run correctly.

44
00:03:01.630 --> 00:03:06.940
There won't be any crashes and no problems because the copy constructor is doing a DB copy and we're

45
00:03:06.940 --> 00:03:08.950
responsibly handling memory.

46
00:03:08.950 --> 00:03:12.010
Now let's head over to the idea and walk through this example.

47
00:03:12.010 --> 00:03:16.160
Now I'll drought again exactly what's happening with the deep copy.

48
00:03:16.160 --> 00:03:22.690
Ok so I'm back in the IDM in the section 13 workspace and then the deep copy project.

49
00:03:22.970 --> 00:03:25.470
In this case we're using a class called deep.

50
00:03:25.520 --> 00:03:30.200
It's exactly like the class called Shalah that we used in the last video with the exception of the copy

51
00:03:30.200 --> 00:03:31.450
constructor.

52
00:03:31.520 --> 00:03:37.580
In this case you can see the copy constructor right here on line 26 and it's doing a deep copy by delegating

53
00:03:37.580 --> 00:03:39.890
to our regular constructor.

54
00:03:39.890 --> 00:03:44.750
That's really the only difference is we're not just copying the pointer recopying the data pointed to

55
00:03:44.750 --> 00:03:45.610
by the pointer.

56
00:03:45.650 --> 00:03:52.230
So let's walk through this example using the debugger and let me move the output window over to the

57
00:03:52.230 --> 00:03:54.710
right and right now we're on 9:42.

58
00:03:54.720 --> 00:03:58.080
So we're just about to create object 1.

59
00:03:58.110 --> 00:04:03.090
Now this is just a regular simple instantiation with a constructor here on line 21 so let's step through

60
00:04:03.090 --> 00:04:04.230
it.

61
00:04:04.230 --> 00:04:06.030
We can see now we're on 9:22.

62
00:04:06.040 --> 00:04:10.340
We're creating that integer on the heap and we're storing the 100 into it.

63
00:04:11.370 --> 00:04:12.340
And now we're back.

64
00:04:12.330 --> 00:04:16.780
So object 1 at this point has been created and you can see objects one right here.

65
00:04:17.040 --> 00:04:21.540
You can see data is a pointer to an integer and the integer it's pointing to is 100.

66
00:04:21.870 --> 00:04:28.380
And you can see the address that we're pointing to is Foxtrot 98 so this is where we're at right now.

67
00:04:28.380 --> 00:04:30.330
We've got object 1 right here.

68
00:04:30.330 --> 00:04:38.730
It's got a pointer called data and it's pointing to an integer on the heap that's 100 and its address

69
00:04:38.760 --> 00:04:43.020
is ending with Foxtrot 98.

70
00:04:43.260 --> 00:04:45.530
That's the situation now.

71
00:04:45.570 --> 00:04:50.970
So the next thing we want to do is we want to call display deep display deep is this function right

72
00:04:50.970 --> 00:04:51.380
here again.

73
00:04:51.410 --> 00:04:58.440
This is a regular function not a member function we're passing in a deep object into it by value so

74
00:04:58.440 --> 00:04:59.850
we need to make a copy of it.

75
00:05:00.000 --> 00:05:05.960
So when we're in this function S will be a copy of object 1 which is what we're passing in right here.

76
00:05:06.300 --> 00:05:09.150
In order to get the copy we need to execute the copy constructor.

77
00:05:09.150 --> 00:05:10.530
So let's do that right now.

78
00:05:11.840 --> 00:05:16.400
You can see the control transfers run right here into the copy constructor and then the copy constructor

79
00:05:16.400 --> 00:05:21.380
is going to delegate construction to our regular constructor that just expects a single integer.

80
00:05:21.680 --> 00:05:23.260
And that's what's happening here.

81
00:05:23.270 --> 00:05:27.860
So now we're creating storage and we're copying that data into it.

82
00:05:28.250 --> 00:05:35.540
And now we come back to our kids our copy constructor we display our message and we're back now on 37.

83
00:05:35.540 --> 00:05:39.120
So as has been created as a copy of object.

84
00:05:39.210 --> 00:05:45.890
Now let's take a look at as you can see right up here and you can see we've got a data pointer and pointing

85
00:05:45.890 --> 00:05:46.400
to 100.

86
00:05:46.400 --> 00:05:54.320
So at this point what's really going on is s right here is an object and it's pointing to an integer.

87
00:05:54.350 --> 00:06:00.050
Obviously it's using its data pointer to do that and that integer contains We can see right here contains

88
00:06:00.050 --> 00:06:06.240
100 and it is an address Foxtrot Baker 8.

89
00:06:06.690 --> 00:06:09.690
So we've got two different areas in the heap.

90
00:06:09.690 --> 00:06:13.160
So each one of these is point to a unique area.

91
00:06:13.230 --> 00:06:18.960
This is really with deep copy's all about because what's going to happen in a second is when we finish

92
00:06:18.960 --> 00:06:22.420
this function right here we need to clean up.

93
00:06:22.450 --> 00:06:24.290
S right it's going out of scope.

94
00:06:24.450 --> 00:06:28.740
So the destructor for S is going to get called in is going to free up this area in memory.

95
00:06:28.950 --> 00:06:30.790
It's stop messing with this area.

96
00:06:30.900 --> 00:06:36.150
So when we come back from this function and come back to main object one is still pointing to valid

97
00:06:36.150 --> 00:06:36.510
data.

98
00:06:36.510 --> 00:06:40.350
This is very very different from the example we saw was shallow.

99
00:06:40.350 --> 00:06:47.390
So let's run through this and we're right here you can see we're just about to go out of scope and line

100
00:06:48.450 --> 00:06:54.180
and there it is right there the destructor is being called I'm 9:32 the destructor is going to free

101
00:06:54.180 --> 00:06:59.010
up this object right here which is Foxtrot great right here.

102
00:07:00.780 --> 00:07:02.940
We'll execute that line of code.

103
00:07:03.050 --> 00:07:09.580
My destructor just freed the data and now I'm right back to main on line 45.

104
00:07:09.600 --> 00:07:14.390
So at this point this has been taken off the stack it's all been cleaned up.

105
00:07:15.540 --> 00:07:20.150
And this is the state that we're in right now which is exactly what we expect.

106
00:07:20.550 --> 00:07:28.370
Same is true on line 45 here what we're doing is we're making object to a copy of object 1.

107
00:07:28.380 --> 00:07:31.630
So again we expect the copy constructor to be called here.

108
00:07:31.650 --> 00:07:33.120
So let's walk through this.

109
00:07:33.120 --> 00:07:40.530
There it is there's the call we're going to delegate construction to our regular constructor which happens

110
00:07:40.530 --> 00:07:50.600
here my data gets written over and I'm back now at this point you can see that object 1 and object to

111
00:07:50.600 --> 00:07:56.750
both contain 100 but you can see the addresses that are out there completely different memory addresses

112
00:07:56.900 --> 00:07:58.130
for that hundred.

113
00:07:58.130 --> 00:08:04.970
So in other words object one has a copy of 100 in its own area and object 2 has a copy of 100 in its

114
00:08:05.030 --> 00:08:05.730
own area.

115
00:08:05.780 --> 00:08:14.060
And in this case here on 947 if I set that integer value for object 2 to 1000 and let me do that right

116
00:08:14.060 --> 00:08:23.810
now you can see when I refresh that object tu's data is a thousand objects one data is still 100 again

117
00:08:23.810 --> 00:08:29.530
really different from what we had with the shallow copy since they were both pointing to the same place.

118
00:08:29.570 --> 00:08:30.200
So that's it.

119
00:08:30.200 --> 00:08:35.890
At this point one wine so we free up object 1 and up to two.

120
00:08:36.590 --> 00:08:40.030
And our program completes with no crashes at all.

121
00:08:40.340 --> 00:08:46.940
OK so that gives you a little bit of a perspective with shallow copies and deep copies later on we'll

122
00:08:46.940 --> 00:08:48.780
do this with smart pointers.

123
00:08:48.890 --> 00:08:53.110
But it's really important to understand exactly what's going on with raw pointers first.
