1
00:00:05,870 --> 00:00:14,290
In this video we'll look at basic input output using See in and see out see out C in C air and see logger

2
00:00:14,290 --> 00:00:18,900
defined in the C plus plus standard to use them you must include IO stream.

3
00:00:19,090 --> 00:00:26,760
C++ uses a stream abstraction to handle IO and devices like the console and keyboard out is an output

4
00:00:26,760 --> 00:00:29,680
stream that defaults to the console or the screen.

5
00:00:29,830 --> 00:00:35,550
See air and see log or Also output streams that default to standard error and standard log respectively.

6
00:00:35,700 --> 00:00:39,970
And finally Sienna's an input stream that defaults to the keyboard.

7
00:00:40,440 --> 00:00:46,110
The insertion operator is used without put streams and the extraction operator is used with input streams.

8
00:00:46,110 --> 00:00:53,640
Let's look at how we can you see out and the insertion operator the insertion operator inserts the value

9
00:00:53,640 --> 00:00:55,400
of the operand to its right.

10
00:00:55,470 --> 00:01:02,130
In this case the variable data into the output stream since C out is by default the console the value

11
00:01:02,130 --> 00:01:04,570
of data will be displayed on the screen.

12
00:01:04,680 --> 00:01:09,860
Since we're using stream abstraction we can change multiple insertions in the same statement.

13
00:01:09,870 --> 00:01:12,770
This makes basic IO very very easy to do.

14
00:01:13,230 --> 00:01:17,910
It's important to understand that the insertion operator does not automatically add line breaks to move

15
00:01:17,910 --> 00:01:19,980
to the next line on the console.

16
00:01:20,070 --> 00:01:25,920
You must do this explicitly either by using the line manipulator or by including a newline character

17
00:01:26,010 --> 00:01:32,010
the slash and you see in the last example if you use the on line stream manipulator It will also flush

18
00:01:32,010 --> 00:01:32,820
the stream.

19
00:01:32,820 --> 00:01:37,440
This is important to know since if the stream is buffered it may not get written to the console until

20
00:01:37,440 --> 00:01:38,700
it's flushed.

21
00:01:38,700 --> 00:01:43,180
We'll talk more about this when we talk about file streams since it's more applicable there.

22
00:01:43,560 --> 00:01:50,360
Let's see how the extraction operator works with CN the extraction operator extracts information from

23
00:01:50,360 --> 00:01:56,120
the CNN stream which defaults to the keyboard and stores the information into the variable to the right

24
00:01:56,120 --> 00:01:58,280
of the extraction operator.

25
00:01:58,390 --> 00:02:02,830
The way in which the information is interpreted is based on the type of the variable.

26
00:02:03,160 --> 00:02:08,630
So in this case if data is an integer then an integer representation will be read from the keyboard.

27
00:02:08,710 --> 00:02:11,990
If data is a double then a real number will be read and stored.

28
00:02:12,220 --> 00:02:16,570
If data is a string a sequence of characters will be read and stored.

29
00:02:16,600 --> 00:02:22,090
Extraction operators can also be changed in the second example two variables data one and data two will

30
00:02:22,090 --> 00:02:28,300
be assigned values read from the keyboard based on their type the characters entered using the keyboard

31
00:02:28,300 --> 00:02:31,330
will only be processed when the enter key is pressed.

32
00:02:31,630 --> 00:02:35,680
See in extraction uses whitespace that is spaces tabs.

33
00:02:35,680 --> 00:02:38,930
New lines as terminating the value being extracted.

34
00:02:39,400 --> 00:02:44,080
That's important to understand so if you put spaces between the things that you type in the spaces will

35
00:02:44,080 --> 00:02:45,280
be ignored.

36
00:02:45,860 --> 00:02:48,520
It's possible that the extraction operator could fail.

37
00:02:48,530 --> 00:02:54,380
For example suppose you want to read an integer and the user enters my name Frank in this case the operation

38
00:02:54,380 --> 00:03:01,030
fails and the data will have an undetermined value c and extraction is very easy and useful.

39
00:03:01,040 --> 00:03:05,870
However we'll later learn about other methods we can use with CN that give us more control over the

40
00:03:05,870 --> 00:03:07,140
data that's being input.

41
00:03:08,110 --> 00:03:12,610
Finally we can use the same operators to insert and extract data from file streams.

42
00:03:12,610 --> 00:03:16,940
This is pretty cool since the syntax is already familiar and the behavior is very similar.

43
00:03:17,200 --> 00:03:20,020
We'll work with files later in this course.

44
00:03:20,020 --> 00:03:24,050
Now let's head over to the code line idea and go over some examples in life code.

45
00:03:26,130 --> 00:03:32,270
Ok so now I'm back in the code like ID and I've got a section 5 workspace within the workspace I've

46
00:03:32,280 --> 00:03:37,370
created a basic IO project and this is the main file for that project.

47
00:03:37,380 --> 00:03:41,910
Now what we're going to do is we're going to do some basic IO using C and in C out and I'll show you

48
00:03:41,910 --> 00:03:45,680
some of the nuances so that you really understand what's going on here.

49
00:03:45,720 --> 00:03:52,230
First of all remember four we've got to include IO stream and on line 6 I'm using namespace standards

50
00:03:52,230 --> 00:03:54,910
just to make the code a little bit easier to read.

51
00:03:54,930 --> 00:04:00,660
Best practice would be to actually include standard scope resolution operator C out and so forth as

52
00:04:00,660 --> 00:04:02,820
we talked about in the last lecture.

53
00:04:03,180 --> 00:04:07,120
So first thing we'll talk about is the statement on line 10 right here.

54
00:04:07,140 --> 00:04:11,050
C out insertion operator a string Hello world.

55
00:04:11,160 --> 00:04:14,550
We've got another insertion operator and then we've got the end line manipulator.

56
00:04:14,550 --> 00:04:20,910
What this does is it prints hello world to the console and that advances the cursor to the next line.

57
00:04:20,910 --> 00:04:26,730
OK I'm going to run this and I want to run it by pressing control F5 which is the same as run here.

58
00:04:31,160 --> 00:04:36,290
So when we build and run you could see it prints out to the screen hello world and then it goes to the

59
00:04:36,290 --> 00:04:39,440
next line and this time elapsed message prints out after that.

60
00:04:39,740 --> 00:04:40,010
OK.

61
00:04:40,010 --> 00:04:41,300
Pretty straightforward.

62
00:04:41,300 --> 00:04:48,220
If I leave out the end line and I'll do that really quickly and I'll run it again.

63
00:04:48,350 --> 00:04:50,150
You could see that it prints out Hello world.

64
00:04:50,150 --> 00:04:54,200
It does not advance to the next line and then everything just prints out right after that.

65
00:04:55,040 --> 00:04:57,910
OK so that's pretty straightforward.

66
00:04:58,670 --> 00:05:00,800
Let's take a look at a couple of other examples.

67
00:05:00,800 --> 00:05:03,920
Look at this example here and what uncomment this out.

68
00:05:04,010 --> 00:05:09,820
First I'm displaying hello and then I'm displaying world and them the and line at the end.

69
00:05:09,860 --> 00:05:13,250
Notice that there is no end line after the first hello.

70
00:05:13,400 --> 00:05:18,080
So you would expect that these two should run together with no spaces so we should see Hello world all

71
00:05:18,080 --> 00:05:19,130
bunched together.

72
00:05:19,130 --> 00:05:24,020
So let's try that and you can see that that's exactly what happens.

73
00:05:24,020 --> 00:05:26,870
You can see Hello here followed by world with no spaces.

74
00:05:26,930 --> 00:05:31,020
It does advance to the end to the next line because we have that line manipulator here.

75
00:05:31,760 --> 00:05:32,300
OK.

76
00:05:32,430 --> 00:05:34,390
So let's do a few more.

77
00:05:34,490 --> 00:05:41,600
And as you can see by default right here when we use the insertion operator with a string in this case

78
00:05:41,620 --> 00:05:42,290
hello.

79
00:05:42,400 --> 00:05:47,290
It does not advance to the next line until unless we do it specifically and explicitly.

80
00:05:47,300 --> 00:05:49,150
So that's what line does.

81
00:05:49,150 --> 00:05:53,980
So here for more output statements the first one just says out Hello world just like we've done before

82
00:05:54,040 --> 00:05:58,400
and advances line the next one change the insertion operators.

83
00:05:58,420 --> 00:06:04,090
So you could see that I'm putting hello on the output stream then I'm putting world on the output stream

84
00:06:04,100 --> 00:06:08,690
you can see there's a space right before that W there and then I'm printing a new mine.

85
00:06:08,950 --> 00:06:12,070
So getting the same effect as the previous one.

86
00:06:12,070 --> 00:06:18,250
Same here I could say hello world but here in this case you can see that I'm using a slash and a backslash

87
00:06:18,250 --> 00:06:22,730
in this character right here is a newline character.

88
00:06:22,750 --> 00:06:28,180
So what happens is you can embed that newline character in the string and it will advance to the next

89
00:06:28,180 --> 00:06:28,840
line.

90
00:06:28,900 --> 00:06:30,210
So it's similar to lime.

91
00:06:30,220 --> 00:06:33,830
It doesn't flush the buffer but it still advances to the next line.

92
00:06:34,180 --> 00:06:38,490
And then the last line you can see you can see that just a couple things going on here.

93
00:06:38,560 --> 00:06:41,280
You can see that I've got a new line here.

94
00:06:41,320 --> 00:06:42,980
New line here and a new line here.

95
00:06:43,270 --> 00:06:46,600
So you expect this to print out hello and then go to the new line

96
00:06:49,650 --> 00:06:51,330
and then print out here.

97
00:06:51,450 --> 00:06:56,890
Then go to that in advance of the next line and print out there and then advance to the next line here.

98
00:06:56,910 --> 00:07:00,750
So that's what we expect we expect the first three statements.

99
00:07:01,570 --> 00:07:06,450
On lines 15 through 17 to pre-done exactly the same day in that December effect.

100
00:07:06,590 --> 00:07:08,160
And the last one would be a little bit different.

101
00:07:08,270 --> 00:07:12,780
So let's try this out and we'll compile and run here.

102
00:07:14,200 --> 00:07:16,880
And you can see Hello World Hello World Hello world.

103
00:07:16,900 --> 00:07:19,590
Exactly the same and then we have Hello out there.

104
00:07:19,750 --> 00:07:20,990
One word per line.

105
00:07:21,170 --> 00:07:25,960
And remember even though that this is all in one string that are all here we still have the slot machines

106
00:07:25,960 --> 00:07:30,280
in there which That's how they work you embed them inside those strings.

107
00:07:30,280 --> 00:07:32,750
OK so now let's do a little bit with variables.

108
00:07:32,860 --> 00:07:37,330
We'll talk a lot about variables in the next section but I'm going to declare three variables right

109
00:07:37,330 --> 00:07:38,860
here and I'll explain that to you real quick.

110
00:07:38,860 --> 00:07:42,580
They're really easy in this case I'm declaring three variables.

111
00:07:42,580 --> 00:07:44,620
Number one number two and them three.

112
00:07:44,620 --> 00:07:45,820
Those are the names.

113
00:07:45,820 --> 00:07:50,800
Number one is an integer and number two is an integer and then number three is a double.

114
00:07:50,800 --> 00:07:54,610
That's a floating point number like 2.5 or eight hundred point seven.

115
00:07:54,790 --> 00:07:58,810
A real number will use them two and them three or a little bit later but right now we're only going

116
00:07:58,810 --> 00:08:01,810
to use someone someone to comment this line.

117
00:08:01,810 --> 00:08:05,180
Uncomment this line and you can see what's happening here.

118
00:08:05,200 --> 00:08:08,610
I'm saying I'm prompting the user enter an integer.

119
00:08:08,710 --> 00:08:14,860
Then I'm reading an integer using the extraction operator I'm extracting an integer from the input stream

120
00:08:15,250 --> 00:08:16,670
and I'm storing it in.

121
00:08:16,720 --> 00:08:19,330
No one can see it's going right in here.

122
00:08:20,700 --> 00:08:24,840
And then I'm simply going to output you entered whatever they typed in.

123
00:08:24,840 --> 00:08:26,700
So let me explain how this works.

124
00:08:26,700 --> 00:08:32,470
Here's your keyboard and remember CNN is by default tied to your keyboard.

125
00:08:32,660 --> 00:08:35,990
We can redirect it as we wish but by default it's the keyboard.

126
00:08:35,990 --> 00:08:41,450
Now what happens is characters are read from your keyboard and they're not read directly by CNN they're

127
00:08:41,450 --> 00:08:42,980
stored in a buffer.

128
00:08:42,980 --> 00:08:45,580
This is done to make the program more efficient.

129
00:08:45,590 --> 00:08:55,470
So if I type in 123 on the keyboard then what happens is the numbers are read from the buffer the characters

130
00:08:55,470 --> 00:09:02,450
in this case are read from the buffer and the compiler knows that number one is an integer.

131
00:09:02,670 --> 00:09:08,960
So it's going to read those characters and it's only going to process what makes sense to be an integer.

132
00:09:08,970 --> 00:09:13,340
So in this case it's going to read to one and say yeah it's going to read the two.

133
00:09:13,560 --> 00:09:15,270
Yep going to read the three.

134
00:09:15,350 --> 00:09:15,910
Yup.

135
00:09:16,080 --> 00:09:17,650
Now we're done.

136
00:09:17,700 --> 00:09:19,570
So we've got 123.

137
00:09:19,570 --> 00:09:24,710
So 123 gets stored into number one and that will print out here.

138
00:09:26,290 --> 00:09:26,800
OK.

139
00:09:26,830 --> 00:09:28,260
Now you need to press enter.

140
00:09:28,300 --> 00:09:33,710
When you do this on the keyboard and also whitespace is ignored.

141
00:09:33,850 --> 00:09:39,660
So if I type in like 10 whites you know 10 spaces or tabs or anything that's considered whitespace and

142
00:09:39,670 --> 00:09:44,510
then I type in 123 then I type in a whole bunch more whitespace it'll all be ignored.

143
00:09:44,560 --> 00:09:51,900
OK so let's take a look at that in action and I'll just clear this real quick and let's run this and

144
00:09:51,910 --> 00:09:53,240
it's going to say enter an integer.

145
00:09:53,240 --> 00:09:55,420
So I'm going to type in 123.

146
00:09:55,420 --> 00:10:02,750
Press Enter member have to press enter and it says you entered 123 just what we'd expect.

147
00:10:02,800 --> 00:10:07,950
Run it one more time and this time I'm going to type in a bunch of spaces and pressing the spacebar

148
00:10:08,080 --> 00:10:14,170
and pressing tab then I'll press 123 and I'll type in some more spaces.

149
00:10:14,470 --> 00:10:18,420
Now when I press enter you can see you still entered 123.

150
00:10:18,460 --> 00:10:24,460
All that beginning whitespace is ignored and everything after the three is considered not an integer.

151
00:10:24,460 --> 00:10:31,100
So this is where if you read from C in again it's going to start right after that three OK.

152
00:10:31,240 --> 00:10:33,140
So that gives you an idea of what's going on there.

153
00:10:33,190 --> 00:10:36,940
And let me comment that out again and we'll keep going through some more examples.

154
00:10:37,240 --> 00:10:41,260
In this case we're going to read two numbers.

155
00:10:42,040 --> 00:10:47,890
We're going to say enter a first integer and we're going to read that into number one and to a second

156
00:10:47,890 --> 00:10:49,990
integer and we're going to read that into number two.

157
00:10:50,320 --> 00:10:54,460
And then we're just simply going to say you entered number one and number two remember in this case

158
00:10:54,460 --> 00:10:57,870
here number one and number two right here.

159
00:10:58,740 --> 00:11:02,790
Will be replaced by whatever values the user typed in.

160
00:11:02,800 --> 00:11:08,090
OK so let's do this let's run this one and you'll see it's exactly what you would expect.

161
00:11:10,500 --> 00:11:17,300
And that's the obsession of commented these guys out that me and comment them and let's try that again.

162
00:11:19,540 --> 00:11:20,740
So enter a first integer.

163
00:11:20,780 --> 00:11:27,520
So we want to type in 100 and I'm going to press enter enter a second integer 200 press enter again

164
00:11:28,660 --> 00:11:31,060
you entered 100 and 200 again.

165
00:11:31,070 --> 00:11:32,650
Just what we expected.

166
00:11:32,650 --> 00:11:35,170
Now let me show you something that you might not expect.

167
00:11:35,220 --> 00:11:36,730
Let me run this one more time.

168
00:11:37,550 --> 00:11:47,390
And then when I enter 100 followed by a space followed by 200 and press enter you can see my output

169
00:11:47,390 --> 00:11:52,390
statement work that says you entered 100 and 200 but the output looks a little different right.

170
00:11:52,730 --> 00:11:54,060
Well you can see what's happening.

171
00:11:54,080 --> 00:11:55,990
I ventured to integers.

172
00:11:56,030 --> 00:12:02,450
So what happens is when I read those integers from the standard input right via the extraction operator

173
00:12:03,000 --> 00:12:04,240
is going to grab both of them.

174
00:12:04,240 --> 00:12:06,990
It's not going to wait because it's got both of them in there already.

175
00:12:06,980 --> 00:12:11,480
So again it's not going away for me to press Enter 2 times because it's got him in there.

176
00:12:11,480 --> 00:12:13,180
Let me show you what that looks like.

177
00:12:13,310 --> 00:12:15,340
So you can better understand.

178
00:12:15,350 --> 00:12:15,700
All right.

179
00:12:15,710 --> 00:12:24,570
So let's say that we're here and we just ran this program and we entered 100 followed by a space and

180
00:12:24,570 --> 00:12:29,950
I'll just use that character for a space followed by 200.

181
00:12:30,020 --> 00:12:36,880
And so right here it's waiting for me what I did was I entered 100 spaced 200 and I pressed enter the

182
00:12:36,880 --> 00:12:42,850
extraction operator realizes that no one is an integer so it's going to try to read an integer from

183
00:12:42,850 --> 00:12:47,930
the stream here seem to start right here and it's going to say I've got a 1 0 1 0.

184
00:12:47,950 --> 00:12:49,390
Boom I hit a white space.

185
00:12:49,390 --> 00:12:51,400
That must mean that my integers done.

186
00:12:51,520 --> 00:12:56,290
So it's going to take 100 and store it right into number one.

187
00:12:56,490 --> 00:13:03,170
Now it's going to output end to another integer and is going to try to read that second integer from

188
00:13:03,260 --> 00:13:04,290
the input stream.

189
00:13:04,460 --> 00:13:09,970
Well it's already in there right so it's going to start right here and it's going to say to 0 0.

190
00:13:10,220 --> 00:13:11,420
Hit the end.

191
00:13:11,540 --> 00:13:12,440
That's 200.

192
00:13:12,560 --> 00:13:17,870
It's not going to wait for me to press enter because there's already data in that buffer.

193
00:13:17,870 --> 00:13:23,570
So in this case the 200 it's put into number two and this will produce 100 and 200.

194
00:13:23,630 --> 00:13:25,210
So your output will be correct.

195
00:13:25,400 --> 00:13:30,560
But the way that the prompts are displayed is a little different because it's got data in that buffer

196
00:13:30,560 --> 00:13:31,540
already.

197
00:13:31,550 --> 00:13:36,440
Same thing with I mean run this one more time and I'll show you a little bit of a different example.

198
00:13:38,540 --> 00:13:41,260
Same thing with space.

199
00:13:41,340 --> 00:13:46,740
One hundred space tab 200 or 200.

200
00:13:47,330 --> 00:13:53,630
You can see you entered 100 and 200 is just ignoring all that space but it's got those two values in

201
00:13:53,630 --> 00:13:54,610
that stream.

202
00:13:54,650 --> 00:13:58,340
It's just going to process the stream doesn't wait for you to press enter twice.

203
00:14:00,070 --> 00:14:00,540
OK.

204
00:14:00,580 --> 00:14:02,650
So a comment goes out and

205
00:14:06,420 --> 00:14:12,330
we can chain the extraction operator just like we had we can change the assertion operator.

206
00:14:12,360 --> 00:14:21,130
So in this case you could see that we've got the C in followed by an extraction operator right there

207
00:14:21,310 --> 00:14:23,490
followed by another extraction operator.

208
00:14:23,620 --> 00:14:28,450
So what I'm doing here is the output statement for the users a little different it just says Enter two

209
00:14:28,450 --> 00:14:30,490
integers separated with a space.

210
00:14:30,550 --> 00:14:36,100
So let's say ancho 100 a space and then 200.

211
00:14:36,110 --> 00:14:43,370
Now this guy's going to read two integers from the input stream and it will assign 100 here and 200

212
00:14:43,370 --> 00:14:43,830
here.

213
00:14:44,950 --> 00:14:46,190
OK let's do that.

214
00:14:50,430 --> 00:14:54,630
And you could see right here into two integers separated with a space remember I could put leading spaces

215
00:14:54,630 --> 00:15:01,440
too if I want but in this case I'll just say 100 spaced 200 and it says here you entered 100 and 200.

216
00:15:01,440 --> 00:15:06,020
This is actually a really handy way to get information from the user when you want them to you know

217
00:15:06,030 --> 00:15:11,520
enter more than one number you know entered three numbers separated by spaces that's really easy for

218
00:15:11,520 --> 00:15:12,240
them to do.

219
00:15:12,330 --> 00:15:16,210
Rather than say enter Number 1 enter Number 2 Enter number three and so forth.

220
00:15:16,340 --> 00:15:16,580
OK.

221
00:15:16,590 --> 00:15:18,730
So that's another option you've got.

222
00:15:19,440 --> 00:15:23,710
OK so I'll come this out and now we'll process some doubles.

223
00:15:23,850 --> 00:15:29,610
In this case if you remember me scroll up just a little bit if you remember number three was a double

224
00:15:29,620 --> 00:15:32,270
right so it's a floating point number a real number.

225
00:15:32,430 --> 00:15:41,850
And what I'll do here is I'll just uncomment this out and the prompt to the user is enter a double right

226
00:15:41,880 --> 00:15:47,370
here and you're going to read the double into number three from the input stream.

227
00:15:48,410 --> 00:15:50,750
Again here's the input stream.

228
00:15:50,780 --> 00:15:53,790
Suppose I typed in twelve point five.

229
00:15:54,140 --> 00:15:55,970
That's a real number.

230
00:15:56,030 --> 00:16:01,260
It realizes that it needs to read a real number from the input stream because number three was defined

231
00:16:01,260 --> 00:16:02,780
up top as a double.

232
00:16:03,110 --> 00:16:07,220
So it's going to come here to read of one it's going to get the two it's going to see the decimal point

233
00:16:07,220 --> 00:16:11,190
that's valid in a real number and it's going to read the 5 then it's done.

234
00:16:11,330 --> 00:16:16,100
And twelve point five will be assigned here and it will be displayed down here.

235
00:16:16,450 --> 00:16:16,820
OK.

236
00:16:16,820 --> 00:16:17,930
So let's run that

237
00:16:22,070 --> 00:16:23,710
into my double press.

238
00:16:23,720 --> 00:16:32,590
Twelve point five and enter and it says right there you enter twelve point five just like we expected.

239
00:16:32,590 --> 00:16:38,320
OK so let's do this last one and I'll show you what could go wrong here.

240
00:16:38,420 --> 00:16:40,210
There's always something that could go wrong right.

241
00:16:40,330 --> 00:16:42,630
So the uncomment that.

242
00:16:42,820 --> 00:16:45,020
And look at this example here.

243
00:16:45,100 --> 00:16:50,770
This one is saying enter an integer and you're going to read the integer into number one and then it's

244
00:16:50,770 --> 00:16:54,760
saying to redouble and you're going to read the double And number three.

245
00:16:55,690 --> 00:16:56,160
OK.

246
00:16:56,170 --> 00:17:01,810
Now if we run this and I type in let's say 10 and 12.

247
00:17:01,810 --> 00:17:04,380
Space twelve point five.

248
00:17:04,500 --> 00:17:10,910
That's not a problem at all right because it's going to read the integer and it's going to say 1 0.

249
00:17:10,920 --> 00:17:11,740
I see a space.

250
00:17:11,760 --> 00:17:12,480
I'm done.

251
00:17:12,480 --> 00:17:19,530
The ten goes into number one then it's going to read a double here num three is going to say one two

252
00:17:19,650 --> 00:17:22,070
decimal point five twelve point five.

253
00:17:22,080 --> 00:17:24,340
Perfect it's going to go in here.

254
00:17:24,360 --> 00:17:26,950
The integer is 10.

255
00:17:27,050 --> 00:17:31,010
The double is twelve point five and that will work just fine.

256
00:17:31,040 --> 00:17:33,170
Then we run that just so you can see that.

257
00:17:33,560 --> 00:17:38,150
And then we'll do one more example a couple more examples where you can see some of the issues here.

258
00:17:38,150 --> 00:17:44,420
So there's my integer that say it's 10 and the double is twelve point five and you can see the integer

259
00:17:44,420 --> 00:17:46,600
is 10 and a double is twelve point five.

260
00:17:46,840 --> 00:17:47,310
OK.

261
00:17:47,480 --> 00:17:54,150
But what happens if I enter something like let's say ten point five

262
00:17:57,710 --> 00:18:00,130
something like that.

263
00:18:00,260 --> 00:18:04,200
Think about this logically you're probably guessing what's going to happen.

264
00:18:04,310 --> 00:18:05,920
It's going to read an integer.

265
00:18:05,930 --> 00:18:10,520
So it's going to see that the one in the 0 and it's going to say Yep that's an integer when it sees

266
00:18:10,520 --> 00:18:11,680
the decimal point.

267
00:18:11,810 --> 00:18:13,510
It knows it can't be an integer anymore.

268
00:18:13,520 --> 00:18:16,660
So it's just going to take the 10 and store it here.

269
00:18:17,000 --> 00:18:19,470
Then you're going to say well read me a double.

270
00:18:19,580 --> 00:18:23,860
What's going to start at the decimal point and he's going to read point five point five is a double

271
00:18:23,870 --> 00:18:24,610
right.

272
00:18:24,650 --> 00:18:31,680
So it's going to store point five here sir output is going to be 10 and 0.5.

273
00:18:31,690 --> 00:18:36,650
Maybe not what you expected but you can see the behavior makes perfect sense you're telling it what

274
00:18:36,650 --> 00:18:36,920
to do.

275
00:18:36,920 --> 00:18:42,230
You typed in ten point five tens and integer and point five is a double and I can read those.

276
00:18:42,230 --> 00:18:46,380
So let's try that with ten point five and we'll see what that looks like.

277
00:18:47,350 --> 00:18:50,590
So let's enter the integer ten point five.

278
00:18:50,590 --> 00:18:54,250
Now remember there's going to be THAT point five left in the buffer.

279
00:18:54,250 --> 00:18:58,660
So it's not going to ask me it's going to ask me to enter the double but it's not going to wait for

280
00:18:58,660 --> 00:19:02,650
me to press enter because it's already got data in the buffer so I press enter.

281
00:19:03,100 --> 00:19:06,410
And you can see and try a double right it's not waiting for me here.

282
00:19:06,670 --> 00:19:10,510
The manager is 10 and the double is 0.5.

283
00:19:10,540 --> 00:19:14,890
Now the last example is that's run this one more time and we'll do something really weird here we'll

284
00:19:14,890 --> 00:19:16,530
just type Frank.

285
00:19:16,540 --> 00:19:21,280
Now that's really what I want because you've just told it that you're going to read an integer in a

286
00:19:21,280 --> 00:19:24,130
double and you just gave it a string of characters here.

287
00:19:24,130 --> 00:19:28,160
So if I press enter you can see what's going on here.

288
00:19:28,160 --> 00:19:33,860
The integer is 0 and the double is some undefined crazy small number here.

289
00:19:33,900 --> 00:19:39,970
OK well what happens is when it tried to read the integer it got the F and Frank in its lost.

290
00:19:39,980 --> 00:19:43,990
So the input failed and it goes into a failed state.

291
00:19:44,090 --> 00:19:47,270
From that point on everything that's happening is unreliable.

292
00:19:47,270 --> 00:19:51,260
You can see that the integer got zero got basically initialized to zero there.

293
00:19:51,410 --> 00:19:55,490
But everything else after that point is completely unreliable.

294
00:19:55,490 --> 00:19:59,400
You've got to be really careful now in real world programs.

295
00:19:59,420 --> 00:20:04,280
We're not really using cn to read characters we're using strings we're reading them with strings and

296
00:20:04,280 --> 00:20:07,880
then we're trying to convert those strings to numbers or whatever else we really need.

297
00:20:07,940 --> 00:20:12,770
But they're really really handy and easy to use and that's what we're going to do for the vast majority

298
00:20:12,770 --> 00:20:13,590
of this course.

299
00:20:13,670 --> 00:20:19,430
We're going to use C-n and seek out so that we can read numbers and we can output numbers or strings

300
00:20:19,430 --> 00:20:20,670
or whatever we like.

301
00:20:20,870 --> 00:20:22,910
So that finishes off this video.

302
00:20:22,910 --> 00:20:25,430
This is basic I O using CNN.

303
00:20:25,490 --> 00:20:27,370
You can see it's pretty straightforward.

304
00:20:27,470 --> 00:20:31,260
Don't worry about mistakes right now as we're working through these programs.

305
00:20:31,430 --> 00:20:36,170
If it says enter an integer enter the integer says enter a string enter the string.

306
00:20:36,170 --> 00:20:38,690
Don't worry about error handling that comes later.
