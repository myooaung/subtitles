1
00:00:05,670 --> 00:00:12,700
This video we'll look at the syntax for multi dimensional arrays and C++ will focus on two dimensional

2
00:00:12,700 --> 00:00:16,820
arrays but you can use as many dimensions as are supported by your system.

3
00:00:17,020 --> 00:00:20,770
While there's no real limit to the number of dimensions you can have for a raise.

4
00:00:20,800 --> 00:00:25,630
Be aware that some compilers do place limits on this bill the limits are quite high and you're unlikely

5
00:00:25,630 --> 00:00:26,460
to reach them.

6
00:00:27,510 --> 00:00:32,340
The syntax for declaring multi dimensional arrays just involves adding another set of square brackets

7
00:00:32,460 --> 00:00:34,590
with the new dimension inside them.

8
00:00:34,590 --> 00:00:39,000
In this example you can see we're declaring a two dimensional array named movie rating.

9
00:00:39,000 --> 00:00:45,600
This survey has three rows and four columns which means that the total size of the array is 12 integers.

10
00:00:45,600 --> 00:00:50,190
We have not initialized this survey so we should assume that the array elements contain garbage data

11
00:00:50,220 --> 00:00:51,830
until initialized.

12
00:00:51,840 --> 00:00:56,090
Let's see how we might model real world data using this to the array.

13
00:00:56,090 --> 00:00:58,580
Suppose we want to collect movie ratings.

14
00:00:58,580 --> 00:01:04,710
We have movie reviewers and each reviews a series of movies with an integer rating from zero to five.

15
00:01:04,730 --> 00:01:08,340
We have three reviewers and each has to review the same four movies.

16
00:01:09,150 --> 00:01:14,550
We could choose to model this data by having one array of movie ratings for each reviewer so we could

17
00:01:14,550 --> 00:01:19,040
declare three arrays of four integers each and solve our problem like that.

18
00:01:19,050 --> 00:01:21,790
Another option is to use a two dimensional array.

19
00:01:21,990 --> 00:01:27,870
The first dimension or row in our grid is the reviewer and there would be four columns in the grid one

20
00:01:27,870 --> 00:01:29,520
for each movie.

21
00:01:29,520 --> 00:01:35,010
This is similar to the layout of a spreadsheet in the figure the reviewer is the first index or row

22
00:01:35,010 --> 00:01:41,550
of our re-enabled in red and the movie is the second index or column of our array labeled in green.

23
00:01:41,550 --> 00:01:47,340
Now its pretty easy to go to a specific row and column and get or set that movie rating for that specific

24
00:01:47,340 --> 00:01:52,860
reviewer and that specific movie accessing the specific movie rating is easy.

25
00:01:52,860 --> 00:01:58,180
I can ask the user to enter a movie rating as integer and story and movie ratings are one step two.

26
00:01:58,580 --> 00:02:03,800
Suppose these are inchers five this update that specific element in the array.

27
00:02:03,900 --> 00:02:07,850
I can also display that element to the console using the same syntax.

28
00:02:08,070 --> 00:02:13,830
Initialising multi dimensional arrays uses the same initializer syntax that we saw with one dimensional

29
00:02:13,830 --> 00:02:20,820
the race in this case we provide in the initialiser list the rows of columns you could do this in a

30
00:02:20,820 --> 00:02:25,650
single line but it's much more readable if you split it across lines as I've done here.

31
00:02:25,740 --> 00:02:31,830
You can see the initializers providing three rows of four integers each which is exactly how we declared

32
00:02:31,830 --> 00:02:38,080
the array while one and two dimensional arrays are by far the most commonly used arrays in programming.

33
00:02:38,160 --> 00:02:42,790
Extending the syntax to three dimensions and more is just as you would expect.

34
00:02:42,810 --> 00:02:47,700
Don't forget that the same characteristics holds for multidimensional arrays as for single dimensional

35
00:02:47,700 --> 00:02:48,660
arrays.

36
00:02:48,780 --> 00:02:53,010
We'll see well two dimensional arrays again when we talk about iteration in C++.

37
00:02:53,010 --> 00:02:55,290
So that's a look at C++ arrays.

38
00:02:55,440 --> 00:03:00,890
If you see them at existing code you'll understand how they work what they look like and their syntax.

39
00:03:01,200 --> 00:03:06,790
Remember at the beginning of the section I mentioned that we rarely use C++ arrays in modern C++.

40
00:03:06,810 --> 00:03:10,870
Instead we use vectors that take a quick look at C plus plus vectors.
