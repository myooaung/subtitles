WEBVTT
1
00:00:05.640 --> 00:00:10.620
Before we get into declaring and defining overloaded operators for our own classes let's understand

2
00:00:10.620 --> 00:00:12.090
what they are.

3
00:00:12.090 --> 00:00:15.190
We've already seen what operators are and how to use them.

4
00:00:15.210 --> 00:00:18.040
We have traditional operators with traditional meetings.

5
00:00:18.060 --> 00:00:24.570
These include the plus symbol for addition the equal sign for assignment and many more the C++ operators

6
00:00:24.570 --> 00:00:32.270
are defined to work with the primitive or built in C++ types such as integer doubles longs and so forth.

7
00:00:32.280 --> 00:00:37.740
In fact we've already seen that the C++ operators are overloaded to work with different types.

8
00:00:37.890 --> 00:00:44.490
For example the plus symbol can add two integers to doubles and integer and a double and so forth C++

9
00:00:44.490 --> 00:00:48.420
allows us to overload operators for our own user defined types.

10
00:00:48.420 --> 00:00:54.400
This allows our types to behave and feel similar to the built in types when we overload operators.

11
00:00:54.510 --> 00:00:57.620
It can make our code more readable and more rideable.

12
00:00:57.640 --> 00:01:03.260
The only operator that the compiler provides a default implementation for is the assignment operator.

13
00:01:03.340 --> 00:01:05.230
The single equal sign.

14
00:01:05.230 --> 00:01:09.000
That's because the compiler must be able to assign one object to another.

15
00:01:09.400 --> 00:01:17.070
All the other operators that can be overloaded must be explicitly defined by the program.

16
00:01:17.240 --> 00:01:21.990
So what is operator overloading look like from the perspective of using the objects.

17
00:01:22.310 --> 00:01:26.870
Well first let's see how we would write code if we were not overloading operators.

18
00:01:26.870 --> 00:01:32.430
Suppose we've implemented our own class name number and that class can model any kind of number in integer

19
00:01:32.420 --> 00:01:35.990
a double or complex number and a rational number you name it.

20
00:01:36.350 --> 00:01:40.880
If we want to be able to manipulate number object so that we can add them subtract them multiply them

21
00:01:40.880 --> 00:01:41.820
and so forth.

22
00:01:41.930 --> 00:01:46.260
We could implement nonmember functions or member functions to achieve what we want.

23
00:01:46.460 --> 00:01:51.880
So if we wanted to add n b then multiply that result by the quotient of C divided by D.

24
00:01:51.890 --> 00:01:57.590
Our code might look like the first statement if we wanted to use member methods then we need objects

25
00:01:57.650 --> 00:02:01.660
and method names so our code might look like the second statement.

26
00:02:01.670 --> 00:02:04.680
Are these statements very unreadable and very difficult to write.

27
00:02:04.910 --> 00:02:10.760
Maybe it depends on your perspective but the point is that we're adding dividing and multiply and we've

28
00:02:10.760 --> 00:02:13.990
been using these operators to do that since we were little kids in school.

29
00:02:14.000 --> 00:02:16.060
Why can't we use them now.

30
00:02:16.100 --> 00:02:20.680
Of course the answer is that C++ doesn't know what to do with our user defined types.

31
00:02:21.020 --> 00:02:25.100
In most cases it makes no sense to add or multiplier subtract your objects.

32
00:02:25.100 --> 00:02:31.480
For example what does it mean to subtract two player objects and again are multiplied to account objects.

33
00:02:31.550 --> 00:02:34.080
It's totally dependent on what you want to do.

34
00:02:34.250 --> 00:02:38.630
In many cases it doesn't make sense to overload certain operators for your classes.

35
00:02:38.630 --> 00:02:42.980
In those cases don't do it only do it if it makes sense.

36
00:02:43.040 --> 00:02:47.840
In this example I would argue that it does make sense since the users of the number class would know

37
00:02:47.840 --> 00:02:51.440
the meaning and how to use those operators who would overload.

38
00:02:51.440 --> 00:02:56.330
Let's see what our calculation would look like if we overloaded the addition multiplication and division

39
00:02:56.330 --> 00:02:59.130
operators.

40
00:02:59.320 --> 00:03:04.680
Here you can see that our user defined number class now looks and feels and behaves like the built in

41
00:03:04.700 --> 00:03:07.120
C++ types.

42
00:03:07.170 --> 00:03:09.800
Operator overloading is syntactic sugar.

43
00:03:09.870 --> 00:03:13.050
Behind the scenes we're still calling methods or functions.

44
00:03:13.050 --> 00:03:15.090
We'll see how it all works in the next video.

45
00:03:16.620 --> 00:03:19.250
So what operators can be overloaded.

46
00:03:19.740 --> 00:03:23.370
Well C++ allows you to overload most of its operators.

47
00:03:23.370 --> 00:03:26.330
There are a few exceptions and they're listed in the table.

48
00:03:26.400 --> 00:03:28.900
We can't overload the scope resolution operator.

49
00:03:28.920 --> 00:03:35.370
The conditional operator the pointer to member operator the dot operator and the size of operator.

50
00:03:35.370 --> 00:03:40.470
Remember just because an operator can be overloaded doesn't mean you should don't overload it unless

51
00:03:40.470 --> 00:03:45.420
it makes sense and makes your code more usable more readable and more readable.

52
00:03:46.440 --> 00:03:51.030
So as always there are some basic rules that must be followed when you're overloading operators.

53
00:03:51.210 --> 00:03:56.820
First the precedence and associativity of the operator that you're overloading cannot be changed.

54
00:03:56.820 --> 00:04:03.000
This makes perfect sense since C++ programmers are already familiar with the precedence and associativity

55
00:04:03.000 --> 00:04:04.380
of its operators.

56
00:04:04.410 --> 00:04:06.850
The error of an operator cannot be changed.

57
00:04:06.990 --> 00:04:12.510
So if an operator is a binary operator which means that it's applied to two arguments then this can't

58
00:04:12.510 --> 00:04:13.740
be changed.

59
00:04:14.390 --> 00:04:20.090
C++ does not allow you to change the way that the current operators work with the built in types.

60
00:04:20.090 --> 00:04:27.830
C++ doesn't allow you create new operators that are not currently used by C++ and finally C++ allows

61
00:04:27.830 --> 00:04:31.600
you to overload operators using global functions or member methods.

62
00:04:31.940 --> 00:04:37.220
However there are several operators that must be implemented as member methods as you can see.

63
00:04:37.220 --> 00:04:41.540
Notice that the assignment operator must be implemented as a member method.

64
00:04:43.360 --> 00:04:48.790
Let's wrap up this video by looking at some examples we're operator overloading could be used the left

65
00:04:48.790 --> 00:04:52.730
column shows examples of using operators with the built in types.

66
00:04:52.810 --> 00:04:58.270
For example we can use plus an equals for addition of integers doubles and mongs and assignment.

67
00:04:58.270 --> 00:05:03.790
We also use the insertion operator with many built in types so that we can easily insert values into

68
00:05:03.790 --> 00:05:05.300
streams.

69
00:05:05.320 --> 00:05:07.460
Now take a look at the right call them.

70
00:05:07.540 --> 00:05:12.040
Here we have examples of using operators on user defined types.

71
00:05:12.040 --> 00:05:14.290
The first is stood strain.

72
00:05:14.350 --> 00:05:20.050
We can use the plus operator to concatenate strings and we can compare strings using less than greater

73
00:05:20.050 --> 00:05:26.170
than less than or equal to and so forth in this section we're going to create our own version of a string

74
00:05:26.170 --> 00:05:27.820
class named my string.

75
00:05:28.150 --> 00:05:33.280
And we want to be able to overload some operators to concatenate strings compare them assign them and

76
00:05:33.280 --> 00:05:34.870
so forth.

77
00:05:34.870 --> 00:05:37.570
The last example is the player class.

78
00:05:37.570 --> 00:05:40.930
Does it make sense to overload operators for the player class.

79
00:05:40.930 --> 00:05:43.870
Maybe it depends on what we're trying to achieve.

80
00:05:43.870 --> 00:05:48.590
For example suppose we want to compare two player objects P1 and P2.

81
00:05:48.850 --> 00:05:53.010
We might only care about their health attribute and this would do just that.

82
00:05:53.020 --> 00:05:56.210
What about comparing to player objects with the equality operator.

83
00:05:56.350 --> 00:05:57.610
Are we comparing names.

84
00:05:57.610 --> 00:05:58.810
Health XP.

85
00:05:59.140 --> 00:06:01.240
All of those attributes are just some of them.

86
00:06:01.600 --> 00:06:04.090
That's one of the issues with overloading operators.

87
00:06:04.120 --> 00:06:06.490
We can make the operator mean anything we want.

88
00:06:06.610 --> 00:06:11.440
So we want to make sure that when we do overload operators it makes sense and the users of the class

89
00:06:11.440 --> 00:06:12.880
know about it.

90
00:06:12.910 --> 00:06:18.040
Finally it would make sense to overload the stream insertion operator so that we can insert player objects

91
00:06:18.040 --> 00:06:20.730
into a stream.

92
00:06:20.820 --> 00:06:24.610
So let's look at the class that we'll be using in this section of the course.

93
00:06:24.750 --> 00:06:31.200
We're going to add overloaded operators to this basic class called my string my string models a string

94
00:06:31.500 --> 00:06:35.290
and were implemented behind the scenes using a Rossie style pointer.

95
00:06:35.370 --> 00:06:40.660
I chose to include a raw pointer because that would allow us more practice with our copy and move constructors.

96
00:06:40.680 --> 00:06:45.700
And we'll also have to think about copy and move assignment when we overload the assignment operator.

97
00:06:46.140 --> 00:06:49.100
Right now the class contains no args constructor.

98
00:06:49.320 --> 00:06:55.860
A constructor that expects a C-style string or literal a copy constructor a destructor a display method

99
00:06:55.860 --> 00:07:01.040
that displays the string and to getter methods the first one returns the current length of the string

100
00:07:01.380 --> 00:07:03.980
and the other returns a pointer to the string.

101
00:07:04.260 --> 00:07:05.160
That's it.

102
00:07:05.160 --> 00:07:09.390
At this point in the course you should start feeling pretty comfortable when you see a class declaration

103
00:07:09.390 --> 00:07:10.840
such as this.

104
00:07:10.830 --> 00:07:15.570
Now let's head over to the idea and we'll take a closer look at this class and how it's implement so

105
00:07:15.570 --> 00:07:16.650
that it's clear what it does.

106
00:07:16.650 --> 00:07:20.230
Before we extend it by overloading operators.

107
00:07:20.240 --> 00:07:24.740
OK so now I mean the IDM in the section 14 workspace.

108
00:07:24.740 --> 00:07:30.130
I'm in the my string Dasch start project this project really doesn't do much.

109
00:07:30.130 --> 00:07:35.590
It's just the beginning project that initially implements that my string class that we're going to extend

110
00:07:35.590 --> 00:07:39.940
throughout but I want to take a few minutes to go over that class to make sure that you 100 percent

111
00:07:39.940 --> 00:07:40.890
understand it.

112
00:07:41.050 --> 00:07:46.150
And I encourage you to walk through it set some breakpoints step through it using the debugger and be

113
00:07:46.150 --> 00:07:49.070
sure you really really understand what's going on in this class.

114
00:07:49.090 --> 00:07:52.990
The idea with this class is that I want to model strings.

115
00:07:52.990 --> 00:07:55.870
Now we already have a standard string class I know.

116
00:07:56.140 --> 00:08:00.100
Let's do it ourselves that when we really really learn how to implement one of these things.

117
00:08:00.100 --> 00:08:03.320
So what we're going to do is we're going to create our own my string class.

118
00:08:03.460 --> 00:08:09.400
And here's an example of how you would use it in a man here I'm creating empty which is just an empty

119
00:08:09.640 --> 00:08:12.820
string object is going to call and no args constructor.

120
00:08:12.940 --> 00:08:16.620
Here I'm going to create Larry which again is a String object.

121
00:08:16.780 --> 00:08:22.180
And I'm going to initialize it to that string Larry using an overloaded constructor and then finally

122
00:08:22.540 --> 00:08:28.120
I've got to another my string called stooge and I'm initialising with Larry so there we have a copy

123
00:08:28.120 --> 00:08:33.010
constructor call and then all I'm doing is calling the display method for each one of those objects

124
00:08:33.010 --> 00:08:36.600
which is going to display empty string Larry.

125
00:08:36.640 --> 00:08:38.490
And Larry again since we copied it.

126
00:08:38.610 --> 00:08:39.080
OK.

127
00:08:39.190 --> 00:08:40.790
So let's take a look at the class.

128
00:08:40.810 --> 00:08:43.990
This is the same class that I showed you on the slides a minute ago.

129
00:08:44.610 --> 00:08:50.740
What we're doing here is we've got our mindstream class you can see it right up here and we're implementing

130
00:08:50.740 --> 00:08:56.650
a string behind the scenes as a pointer to a character is basically the way a C-style string works.

131
00:08:56.650 --> 00:08:58.330
Now we could have done this a lot of different ways.

132
00:08:58.330 --> 00:09:03.370
I chose to do it this way that way we can play around with raw pointers a little bit more understand

133
00:09:03.760 --> 00:09:09.970
the copy constructor understand the move constructor which will will do soon and understand the assignment

134
00:09:09.970 --> 00:09:10.670
operators.

135
00:09:10.900 --> 00:09:16.390
We've got a destructor we've got the display method that displays the contents of this string basically

136
00:09:16.690 --> 00:09:18.340
the string itself and its length.

137
00:09:18.340 --> 00:09:20.040
And then we've got a couple of getters.

138
00:09:20.340 --> 00:09:26.320
OK so let's go through these and see how they're implemented and I'll walk you through a couple of examples.

139
00:09:26.560 --> 00:09:28.940
And let's take a look at my string.

140
00:09:30.410 --> 00:09:35.630
OK so here you can see that I'm using behind the scenes the C string library which I need.

141
00:09:35.870 --> 00:09:38.650
I've got IO stream simply because I'm doing some output.

142
00:09:38.840 --> 00:09:43.570
And here is my string that H I need to include that because this is what I'm implementing right.

143
00:09:43.580 --> 00:09:46.220
That's my spec Here's my implementation.

144
00:09:46.220 --> 00:09:49.350
So here's my no args constructor you can see it right here.

145
00:09:49.370 --> 00:09:57.510
Remember the no args constructor gets called when it's code like this executes the semi string and let's

146
00:09:57.510 --> 00:10:02.580
say just a right so we're providing no construction information here.

147
00:10:02.580 --> 00:10:06.280
So the no arms constructor gets called you can see it expects nothing.

148
00:10:06.750 --> 00:10:11.310
And what we're doing here is we're creating an object called a and this is put a right here.

149
00:10:11.310 --> 00:10:12.270
This is that object.

150
00:10:12.270 --> 00:10:22.120
It's just a blob right now and it has in it a pointer called s tr so and we really care about now if

151
00:10:22.120 --> 00:10:26.930
we create an empty object we could simply set that pointer to a null pointer and we're done with it.

152
00:10:26.950 --> 00:10:27.750
I don't want to do that.

153
00:10:27.760 --> 00:10:33.340
I want to set an empty string to an empty string that looks like that in other words a single character

154
00:10:33.340 --> 00:10:36.800
with the null terminator in it rather than a null pointer.

155
00:10:36.940 --> 00:10:42.180
That just makes it easier later if we ever display or or print out an empty string it'll be fine.

156
00:10:42.190 --> 00:10:44.650
We don't have to check for null pointers later.

157
00:10:44.740 --> 00:10:46.470
So what are we going to do here.

158
00:10:46.550 --> 00:10:48.880
But we're going to allocate space for one character.

159
00:10:48.880 --> 00:10:52.690
Notice the brackets they're important here because we're going to delete characters in that manner as

160
00:10:52.690 --> 00:10:53.310
well.

161
00:10:53.330 --> 00:10:55.720
Someone allocate one character.

162
00:10:55.960 --> 00:10:58.530
Remember all this is happening on the heap.

163
00:10:58.750 --> 00:11:07.140
This is happening on the stack and I'm going to assign that address to as TR so as to are pointing there.

164
00:11:07.260 --> 00:11:12.720
No I'm doing is dereferencing the pointer and putting that Terminator in there that's my empty string.

165
00:11:12.720 --> 00:11:15.070
If you try to display this it will just display nothing.

166
00:11:15.180 --> 00:11:17.580
OK so that's my no args constructor.

167
00:11:17.580 --> 00:11:24.230
Now let's take a look at the overloaded constructor here that expects a seesaw string right or a string

168
00:11:24.230 --> 00:11:24.950
literal.

169
00:11:24.950 --> 00:11:32.440
So in this case this will be called with statements like this my string Let's call this again this is

170
00:11:32.490 --> 00:11:42.230
a again and we'll just say hello noticed the quotes and the Curley's at this point you can see what's

171
00:11:42.240 --> 00:11:44.700
being passed in so this constructor matches.

172
00:11:44.730 --> 00:11:50.880
And this is the country is constructed it executes in this case I'm checking to see if by any chance

173
00:11:50.880 --> 00:11:55.830
somebody sent a little pointer here if they did I'm just going to create an empty string just going

174
00:11:55.830 --> 00:11:58.250
to double check that just to be safe.

175
00:11:58.340 --> 00:12:02.880
Normally this else is going to execute and I'll show you what's going on here.

176
00:12:02.940 --> 00:12:06.090
Again we're going to create that object is right here.

177
00:12:06.090 --> 00:12:07.890
It's got an attribute called S.

178
00:12:07.890 --> 00:12:10.260
TR That's the only attribute it has actually.

179
00:12:10.520 --> 00:12:15.120
And what we're going to do is we're going to allocate this many characters on the heap.

180
00:12:15.210 --> 00:12:16.390
How many characters is that.

181
00:12:16.390 --> 00:12:20.250
Well I'm going to figure out what the length of Halo is right.

182
00:12:20.250 --> 00:12:21.600
That's what S's s is.

183
00:12:21.630 --> 00:12:28.650
Hello I want to figure out what's the length of s n add 1 to it because I need an extra character for

184
00:12:28.650 --> 00:12:29.810
that Terminator.

185
00:12:30.210 --> 00:12:36.600
Well the C string functions in C string right here there's one called as Charland that does exactly

186
00:12:36.600 --> 00:12:37.050
that.

187
00:12:37.050 --> 00:12:42.230
So what I'm doing is I'm just calling stood as TR Len which is going to return five men at one to it

188
00:12:42.540 --> 00:12:50.790
and when allocate six characters on the heap m. one accosted string copy to copy s to as TR.

189
00:12:50.790 --> 00:12:53.870
So at this point it's going to copy Hello here.

190
00:12:54.180 --> 00:12:55.470
It's going to put the null terminator.

191
00:12:55.470 --> 00:12:57.960
Those are my six characters and I'm going to point to it.

192
00:12:58.170 --> 00:13:00.370
So you can see I've indeed made a copy.

193
00:13:00.550 --> 00:13:00.810
OK.

194
00:13:00.840 --> 00:13:05.510
We never messed with hello because it's Konst and it's not mine.

195
00:13:05.520 --> 00:13:06.760
So I don't want to mess with it.

196
00:13:08.960 --> 00:13:12.550
OK so now let's make a copy constructor.

197
00:13:13.380 --> 00:13:19.550
Let's go through that real quick and you can see it defined right here on line 25 right here.

198
00:13:19.560 --> 00:13:21.970
Now when does a copy constructor get called well.

199
00:13:21.990 --> 00:13:27.630
Remember we've got an existing object and I want to copy it and construct a new object from a.

200
00:13:27.640 --> 00:13:28.700
This is not an assignment.

201
00:13:28.710 --> 00:13:29.820
It's a construction.

202
00:13:29.820 --> 00:13:34.230
So what I've got is let's say I've got that string object again my string

203
00:13:37.680 --> 00:13:40.260
and let's call it a and we'll use Hello again.

204
00:13:42.790 --> 00:13:43.800
So there's that object.

205
00:13:43.800 --> 00:13:45.220
Now I want to create a new object.

206
00:13:45.220 --> 00:13:52.130
I'll just say my string will call it B and I want to create it based on a.

207
00:13:52.300 --> 00:13:54.020
So there's my copy.

208
00:13:54.640 --> 00:13:56.700
That's my copy constructor being called.

209
00:13:56.920 --> 00:14:01.660
Also a copy constructor as you know gets called if you pass of an object by value to a function.

210
00:14:01.660 --> 00:14:02.580
Lots of different places.

211
00:14:02.580 --> 00:14:04.680
So let's see what's going on here.

212
00:14:04.840 --> 00:14:13.180
In this case this refers to the object that I'm creating and source is that guy right there.

213
00:14:13.180 --> 00:14:15.410
So source in this case is that a.

214
00:14:15.420 --> 00:14:17.250
Object Hello.

215
00:14:18.100 --> 00:14:18.760
Make sense.

216
00:14:18.760 --> 00:14:19.110
Good.

217
00:14:19.210 --> 00:14:24.080
So I'm creating the object I'm setting as TR Right.

218
00:14:24.100 --> 00:14:25.930
So here is that new object I'm creating.

219
00:14:25.930 --> 00:14:30.960
It doesn't even have a name yet but let's just call it this because it's being pointed to by that pointer.

220
00:14:31.270 --> 00:14:34.580
It's got as TR again just like before.

221
00:14:35.080 --> 00:14:36.870
And what I want to do is I want to copy that.

222
00:14:36.880 --> 00:14:40.840
Hello to this guy and I want to do a deep copy I don't want to share this.

223
00:14:40.960 --> 00:14:42.400
So what do I do.

224
00:14:42.550 --> 00:14:50.850
Well again I want to allocate space how much space the length of that source objects string right a

225
00:14:50.860 --> 00:14:54.100
dot as TR In this case which would be hello.

226
00:14:54.880 --> 00:15:00.280
So five plus one is six again and then allocate six characters on the heap.

227
00:15:00.340 --> 00:15:02.890
Remember these are unnamed it's all in the heap.

228
00:15:02.890 --> 00:15:04.700
Then I'm going to do an A.

229
00:15:04.720 --> 00:15:07.420
And again I used stood start string length to do that.

230
00:15:07.420 --> 00:15:13.180
Now I'm going to do a string copy to copy the source string to the string again a DB copy.

231
00:15:13.180 --> 00:15:20.290
So in this case I'm copying over Hello the null terminator and this guy's pointing to that.

232
00:15:20.650 --> 00:15:21.280
That's it.

233
00:15:21.430 --> 00:15:22.900
So that's where we're at right now.

234
00:15:22.900 --> 00:15:26.960
The rest of the functions you shouldn't have any issues with at this point in the course.

235
00:15:27.190 --> 00:15:28.540
Let's go through them anyway.

236
00:15:28.570 --> 00:15:31.610
Here's my destructor obviously remember this.

237
00:15:31.610 --> 00:15:36.550
You're responsible for deallocating the memory that you allocate so I have allocated some memory in

238
00:15:36.550 --> 00:15:37.600
the constructors.

239
00:15:37.690 --> 00:15:42.270
I've got to be sure to deallocated in the destructor and that's exactly what I'm doing here.

240
00:15:42.310 --> 00:15:43.830
I've got a display method.

241
00:15:43.870 --> 00:15:49.120
This is a member method and the display member method just simply displays the string which is a C-style

242
00:15:49.120 --> 00:15:52.050
string and the length separated by colon.

243
00:15:52.300 --> 00:15:58.240
And then I've got some getters one just returns the length of the string which I'm determining every

244
00:15:58.240 --> 00:16:01.130
time dynamically and masking what the string length is.

245
00:16:01.210 --> 00:16:04.390
We could have had let me just come back and the ME did as well first.

246
00:16:04.390 --> 00:16:05.720
And the string returns a pointer.

247
00:16:05.830 --> 00:16:08.230
So I can pretend it returns it as a contest.

248
00:16:08.230 --> 00:16:15.560
We could have added another attribute here called length and we could have maintained that length of

249
00:16:15.560 --> 00:16:18.150
that string all along but chose not to do that.

250
00:16:18.160 --> 00:16:21.850
I'm just going to keep it as simple as we can and that's it.

251
00:16:21.850 --> 00:16:24.720
So let's take a look at the main and we'll run it.

252
00:16:24.780 --> 00:16:25.500
There's my name.

253
00:16:25.540 --> 00:16:29.030
You mean empty my string create Larry and then copy Larry.

254
00:16:29.260 --> 00:16:37.750
So when I run this you see the run says display the empty string and it's displayed right here obviously

255
00:16:37.750 --> 00:16:41.100
it's empty and it's like the 0 displayed Larry.

256
00:16:41.190 --> 00:16:44.230
There's Larry and its length is five and there is stooge.

257
00:16:44.230 --> 00:16:46.910
It should be Larry because I use the copy constructor again.

258
00:16:46.930 --> 00:16:48.120
Did a deep copy.

259
00:16:48.310 --> 00:16:49.650
And there's a five.

260
00:16:50.170 --> 00:16:50.470
OK.

261
00:16:50.470 --> 00:16:51.160
So that's it.

262
00:16:51.190 --> 00:16:55.900
That runs through this program as I said you may want to step through it until you become really really

263
00:16:55.900 --> 00:16:56.650
comfortable with it.

264
00:16:56.650 --> 00:16:58.780
It's a very very straightforward program.

265
00:16:58.840 --> 00:16:59.350
It's Cup.

266
00:16:59.350 --> 00:17:04.750
It's using everything that we've learned so far and what we're going to do now is start by overloading

267
00:17:04.750 --> 00:17:05.830
the assignment operators.
