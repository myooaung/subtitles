1
00:00:05,650 --> 00:00:11,650
In this video we'll learn how to invoke base class constructors in passing arguments from the derived

2
00:00:11,650 --> 00:00:12,900
class.

3
00:00:13,150 --> 00:00:19,030
Remember since the base part of a derived class must be initialized first then we know that some base

4
00:00:19,030 --> 00:00:23,140
class constructor must be invoked to do that initialization.

5
00:00:23,140 --> 00:00:28,670
So in this video we'll learn how to control exactly which base constructor will be used.

6
00:00:28,810 --> 00:00:33,730
We can determine which base constructor to be is based on the arguments that we want to pass to it from

7
00:00:33,730 --> 00:00:34,870
the derived class.

8
00:00:34,870 --> 00:00:37,790
So let's see how we can do this.

9
00:00:38,740 --> 00:00:44,380
In this example we have a base class and let's assume that that base class has no args constructor and

10
00:00:44,380 --> 00:00:48,820
an overloaded constructor that expects a single integer parameter.

11
00:00:48,820 --> 00:00:54,580
Now we have a derived class which is derived from base and the derived class has a constructor that

12
00:00:54,580 --> 00:00:56,640
has a single integer parameter.

13
00:00:57,070 --> 00:01:02,530
We can invoke the base class is overloaded constructor and the derived constructors initialization list

14
00:01:02,830 --> 00:01:04,070
as shown in this slide.

15
00:01:04,240 --> 00:01:04,970
That's it.

16
00:01:04,990 --> 00:01:07,300
It's pretty simple and clear syntax.

17
00:01:07,780 --> 00:01:13,480
In this case we're passing the integer x to our base class constructor when it's invoked.

18
00:01:13,510 --> 00:01:18,340
Following this we can have initializers for the derived classes attributes as needed.

19
00:01:18,340 --> 00:01:24,930
Finally we have the code in the body but remember this code executes after both the base and derived

20
00:01:24,940 --> 00:01:28,090
parts of the derived object have been initialized.

21
00:01:28,090 --> 00:01:34,120
If we don't explicitly invoke the base overloaded constructor then the no args constructor will be invoked

22
00:01:34,180 --> 00:01:37,970
automatically since Remember the base part must be initialized.

23
00:01:38,140 --> 00:01:41,630
So let's see the complete example.

24
00:01:42,010 --> 00:01:44,200
Here we see the base class declaration.

25
00:01:44,200 --> 00:01:45,480
Pretty standard code.

26
00:01:45,580 --> 00:01:50,200
The base class has an integer attribute named value and it has two constructors.

27
00:01:50,200 --> 00:01:55,750
The first constructor is the no args constructor and it initializes value to 0 and displays.

28
00:01:55,840 --> 00:01:58,200
Base no args constructor.

29
00:01:58,510 --> 00:02:04,530
The second constructor is an overloaded constructor that expects a single integer parameter and it initializes

30
00:02:04,530 --> 00:02:09,430
a value to the integer x and then it displays Int base constructor.

31
00:02:09,430 --> 00:02:17,440
Now let's see the derived class the derived class is derived from base using public inheritance and

32
00:02:17,440 --> 00:02:20,640
it has an integer attribute named double value.

33
00:02:20,650 --> 00:02:22,340
It also has two constructors.

34
00:02:22,390 --> 00:02:25,060
The first constructor is the No ARFs constructor.

35
00:02:25,060 --> 00:02:32,080
Note that in its initializer list it explicitly invokes the base no args constructor and then initialize

36
00:02:32,080 --> 00:02:34,270
is its own double value attribute.

37
00:02:34,630 --> 00:02:38,180
Finally it displays drive no args constructor.

38
00:02:38,440 --> 00:02:43,350
The second constructor is the overloaded constructor that expects an integer parameter.

39
00:02:43,360 --> 00:02:50,020
This constructor also invokes the base class overloaded in constructor in its initializer list and then

40
00:02:50,020 --> 00:02:57,080
it initializes its own doubled value attribute to two times X. And finally it displays in derived constructor.

41
00:02:57,130 --> 00:03:02,080
Note that we could have implemented the overloaded constructors as delegating constructors but I wanted

42
00:03:02,080 --> 00:03:06,920
to keep the display message is clear so that we could follow the calls.

43
00:03:06,940 --> 00:03:09,720
So now let's create a few objects and see what is called.

44
00:03:09,970 --> 00:03:13,580
First let's create a simple base object with no parameters.

45
00:03:13,600 --> 00:03:19,930
In this case the base no args constructor is called In the second example we're creating a base object

46
00:03:20,170 --> 00:03:23,520
and providing an integer initialization argument.

47
00:03:23,560 --> 00:03:28,160
This will invoke the overloaded Int base constructor as we would expect.

48
00:03:28,690 --> 00:03:33,000
Now in the third example we're creating a Derived object with no parameters.

49
00:03:33,010 --> 00:03:38,980
This will invoke the derived no args constructor which in turn will invoke the base no artiste's constructor

50
00:03:38,980 --> 00:03:41,560
from it's initialization list.

51
00:03:41,560 --> 00:03:46,970
Once the base part is initialized then the rest of the derived no args constructor executes.

52
00:03:47,110 --> 00:03:49,340
So you can see the output is what we expect.

53
00:03:49,360 --> 00:03:54,090
First the base Norge constructor then the derived no args constructor.

54
00:03:54,130 --> 00:03:56,170
The last example works in the similar way.

55
00:03:56,230 --> 00:04:02,680
We're creating a Derived object with an integer initialization argument so the derived int derive constructor

56
00:04:02,680 --> 00:04:07,360
is invoked and then we explicitly invoke the Int base constructor from it.

57
00:04:07,720 --> 00:04:12,730
So the first Int base constructor executes and then the derived constructor.

58
00:04:12,850 --> 00:04:17,020
Of course all these objects will be destroyed by the destructors when they go out of scope.

59
00:04:17,110 --> 00:04:22,510
You can see that we have complete control as to which base class constructors to invoke from our derived

60
00:04:22,510 --> 00:04:23,860
class constructors.

61
00:04:23,860 --> 00:04:27,590
So let's head over to the ID and see this behavior in life code.

62
00:04:28,180 --> 00:04:35,530
Ok so I mean the ID and I'm in the section 15 workspace in the base class initialization project.

63
00:04:35,530 --> 00:04:39,260
This project looks very very similar to the one we did in the previous video.

64
00:04:39,280 --> 00:04:43,060
However I've spread out the code a little bit more just so it's easier to see in the debugger what's

65
00:04:43,060 --> 00:04:45,770
going on and what I'm doing here.

66
00:04:45,790 --> 00:04:51,550
I'm explicitly calling my base class initializers from my derived class so you can see here that I've

67
00:04:51,550 --> 00:04:58,300
got no args constructor my derived class and I explicitly calling my base classes no args instructor

68
00:04:58,300 --> 00:04:59,740
right here.

69
00:04:59,740 --> 00:05:06,040
Similarly in the overloaded integer constructor from my derived class I'm calling my base class is overloaded

70
00:05:06,040 --> 00:05:07,720
integer constructor.

71
00:05:07,870 --> 00:05:13,930
That way I've got explicit control over how my objects are being created not just my part but my base

72
00:05:13,930 --> 00:05:14,940
part as well.

73
00:05:14,950 --> 00:05:16,720
So let's run through some examples.

74
00:05:16,720 --> 00:05:19,860
We won't do the base ones because those are those haven't changed at all.

75
00:05:19,870 --> 00:05:21,520
We'll just worry about the derived ones.

76
00:05:21,610 --> 00:05:27,820
So in this case that's create a derived object and we'll call it D and we'll provide no initialization

77
00:05:27,820 --> 00:05:28,830
information here.

78
00:05:28,960 --> 00:05:32,640
So we'll run the debugger and step through it.

79
00:05:32,710 --> 00:05:36,910
So we're here on line 40 and we're just about to create that derived object.

80
00:05:37,020 --> 00:05:43,060
Again I've got no initialization information so I expect my no args derived constructor be called right

81
00:05:43,060 --> 00:05:44,730
here on line 26.

82
00:05:45,070 --> 00:05:48,990
And if I step through it you can see that that's exactly where I'm at.

83
00:05:49,050 --> 00:05:54,790
But now in this case I'm explicitly invoking my base class constructor.

84
00:05:54,790 --> 00:05:56,810
Also the no args constructor.

85
00:05:56,810 --> 00:06:00,140
And I'll scroll up just a little bit so it's going to be right there on line 11.

86
00:06:00,340 --> 00:06:04,890
So what's going to happen now is and it's important to understand the order here before.

87
00:06:04,900 --> 00:06:12,280
My attributes are initialized doubled values my attribute right here on the derived class before my

88
00:06:12,430 --> 00:06:16,600
attributes were initialized before the body of the derive constructor is initialized.

89
00:06:16,750 --> 00:06:18,740
The base part of me will be initialized.

90
00:06:18,880 --> 00:06:24,940
So in this case when I step three you'll see that it transfers control up to here on 9/11 and the base

91
00:06:25,000 --> 00:06:26,490
no args constructor is called.

92
00:06:26,500 --> 00:06:35,110
It will set that value right here in the base to 0 and it will display based no args constructor.

93
00:06:35,110 --> 00:06:40,900
Then I come back to where I left off initialize double value to 0 and you can see that that will indeed

94
00:06:40,900 --> 00:06:41,800
be 0 here.

95
00:06:41,800 --> 00:06:42,910
Now they're both zero right.

96
00:06:42,910 --> 00:06:48,400
The value in the base as well as the double value that just got initialized to zero right here in the

97
00:06:48,400 --> 00:06:49,690
initializer list.

98
00:06:49,930 --> 00:06:56,470
Then we display Dr. no args constructor and our object is constructed.

99
00:06:56,470 --> 00:07:01,630
So when it goes out of scope the destructors will be called in the reverse order so let's do that.

100
00:07:01,630 --> 00:07:07,180
You can see right here that derive destructors being called and that executes and then we come up to

101
00:07:07,180 --> 00:07:13,880
here and execute our base destructor right here and will display that as well.

102
00:07:15,610 --> 00:07:16,470
OK so there you go.

103
00:07:16,470 --> 00:07:21,630
That's a real simple example of how we can invoke our base class initializers.

104
00:07:21,760 --> 00:07:28,030
Now comment this out and what we'll do now is we'll do the same thing but we'll do derived D and we'll

105
00:07:28,030 --> 00:07:30,970
use an initializer of a thousand.

106
00:07:30,970 --> 00:07:35,970
So I've moved the breakpoint to this line 41 and what we're doing now is we'll start the debugger again

107
00:07:36,880 --> 00:07:39,490
and we'll walk through this example.

108
00:07:39,490 --> 00:07:41,140
So what do we expect in this case.

109
00:07:41,140 --> 00:07:47,110
Well in 9:41 we're creating a D object which is a derived object and repete we're using a thousand and

110
00:07:47,110 --> 00:07:48,140
his initialiser.

111
00:07:48,220 --> 00:07:54,550
So we expect this constructor right here on 09:30 to be invoked because it expects that's the overloaded

112
00:07:54,550 --> 00:07:56,380
integer constructor.

113
00:07:56,380 --> 00:08:00,070
So let's step through and you'll see that that is that's exactly what happens.

114
00:08:00,130 --> 00:08:05,140
But now before we initialize our own variables before we do anything in the body of the constructor

115
00:08:05,650 --> 00:08:07,450
our base needs to be initialized.

116
00:08:07,450 --> 00:08:14,110
So in this case I'm explicitly invoking my base class constructor with the variable x that was passed

117
00:08:14,110 --> 00:08:14,660
into me.

118
00:08:14,920 --> 00:08:20,410
So it going to happen here is this constructor right here on line 14 will be invoked.

119
00:08:20,470 --> 00:08:24,630
So we step through that and you can see that's exactly where we are.

120
00:08:24,700 --> 00:08:28,780
The value for the value will be set to x in this case a thousand.

121
00:08:28,960 --> 00:08:32,010
And then I'll display the message.

122
00:08:32,110 --> 00:08:36,100
Then I come back to my derived overloaded constructor and finish off here.

123
00:08:36,280 --> 00:08:42,940
What just happened was that my doubled value was initialized to 2000 and I'm just about to display this.

124
00:08:42,940 --> 00:08:50,230
So at this point my object has been fully initialized and if I look at D you can see that the base part

125
00:08:50,230 --> 00:08:51,190
of me is is 0 0 0 0 0.

126
00:08:51,220 --> 00:08:57,460
And the doubled value part of me is 2000 which is exactly what we wanted and that's the issue we had

127
00:08:57,460 --> 00:09:00,970
in the previous video that we couldn't get that quite to work that way.

128
00:09:01,360 --> 00:09:08,920
And of course as I destroy this object the derived destructor gets invoked first and then the base destructor

129
00:09:08,920 --> 00:09:09,650
gets that vote.

130
00:09:09,670 --> 00:09:11,660
And our program is complete.

131
00:09:12,370 --> 00:09:13,780
OK so there you go.

132
00:09:13,780 --> 00:09:19,360
That's a real simple example of how to initialize the base part of us when we're using inheritance in

133
00:09:19,360 --> 00:09:20,020
the next video.

134
00:09:20,020 --> 00:09:25,150
What we'll do is we'll look at the way that copy and move constructors and overloaded assignment operators

135
00:09:25,150 --> 00:09:26,170
work with inheritance.
