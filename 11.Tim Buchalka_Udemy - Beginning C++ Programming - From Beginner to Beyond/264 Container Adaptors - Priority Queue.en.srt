1
00:00:05,210 --> 00:00:08,910
In this video we'll learn more about the priority queue the priority.

2
00:00:08,910 --> 00:00:12,330
Q Is a container adapter just like the stack in the queue.

3
00:00:12,550 --> 00:00:18,530
The Priority 2 allows insertions and removal of elements in order from the front of the container.

4
00:00:18,880 --> 00:00:24,490
Elements are stored internally and vectors by default but a data structure called the heap is used behind

5
00:00:24,490 --> 00:00:25,440
the scenes.

6
00:00:25,450 --> 00:00:30,580
Don't confuse a heap data structure with the heap that we used to store dynamically allocated data in

7
00:00:30,610 --> 00:00:31,350
our program.

8
00:00:31,420 --> 00:00:37,640
There are totally different elements are inserted in priority order so the largest priority element

9
00:00:37,640 --> 00:00:39,890
will always be at the front of the priority queue.

10
00:00:40,010 --> 00:00:40,910
That's pretty cool.

11
00:00:41,030 --> 00:00:44,680
We can insert elements at the front end when we get an element from the front.

12
00:00:44,690 --> 00:00:49,630
We're guaranteed that it will be the largest element in the container and it's super efficient.

13
00:00:49,820 --> 00:00:55,640
Iterators make no sense with priority queues so they're not supported and neither are the ACL algorithms.

14
00:00:58,290 --> 00:01:03,240
In order to use the priority queue we must include the queue header file the prior to to has just a

15
00:01:03,240 --> 00:01:08,790
couple of methods that are superpowerful the push method inserts an element into the priority queue

16
00:01:09,030 --> 00:01:10,620
in sorted order.

17
00:01:10,710 --> 00:01:17,400
The pop method removes the top element from the priority queue and the top method accesses the top element

18
00:01:17,430 --> 00:01:23,310
without removing the top element will always be the highest priority element which defaults to the element

19
00:01:23,310 --> 00:01:25,290
with the greatest value.

20
00:01:25,290 --> 00:01:30,320
Finally we have the empty inside methods as we have seen before.

21
00:01:30,480 --> 00:01:34,420
So let's see a simple example of using the priority queue.

22
00:01:34,480 --> 00:01:37,420
First we create a priority or call it P.

23
00:01:37,540 --> 00:01:41,530
Behind the scenes it's using the vector as the underlying container.

24
00:01:41,530 --> 00:01:48,680
Then we push for integers onto the priority queue and then we display the top with P-Q top.

25
00:01:48,730 --> 00:01:55,130
In this case 20 will be displayed because 20 was the largest element inserted into the priority queue.

26
00:01:55,180 --> 00:02:01,420
We can remove the element from the top with P-Q up pop and if we display the top again will display

27
00:02:01,420 --> 00:02:01,900
10.

28
00:02:01,900 --> 00:02:06,530
Since 10 is the next largest integer that was added to the priority queue that's it.

29
00:02:06,580 --> 00:02:09,180
It's really very simple and very powerful.

30
00:02:09,190 --> 00:02:12,950
Let's head over to the idea and I'll show you an example of using a priority queue.

31
00:02:13,540 --> 00:02:19,780
OK so I'm back in the IDM in the Section 20 workspace and I'm in the priority queue project so what

32
00:02:19,780 --> 00:02:23,890
we'll do here is we'll play around with the priority here will do it both with integers and will do

33
00:02:23,890 --> 00:02:26,270
it with an object here a person objects.

34
00:02:26,270 --> 00:02:28,480
So I'm including you.

35
00:02:28,480 --> 00:02:30,250
That's where the priority queue lives.

36
00:02:30,280 --> 00:02:33,570
So I need to include that to make sure that we have access to it.

37
00:02:33,580 --> 00:02:38,980
We got our good person class that we've been using throughout this section and again it's same as it

38
00:02:38,980 --> 00:02:40,340
has been before.

39
00:02:40,360 --> 00:02:45,480
This is the really important one right here and that an operator less than an overload less than operator.

40
00:02:45,490 --> 00:02:47,200
That's what we're going to use in a moment.

41
00:02:47,200 --> 00:02:48,790
So remember what it's doing.

42
00:02:48,980 --> 00:02:51,610
Well actually what we'll do is we'll use that name will change it.

43
00:02:51,610 --> 00:02:56,440
So remember what it's doing here it's comparing ages so that's the ordering that it's going to use and

44
00:02:56,440 --> 00:02:58,750
that's what the priority uses as well.

45
00:02:59,260 --> 00:03:04,090
And let's see we've got the overloaded insertion operator exactly like we did before.

46
00:03:04,090 --> 00:03:10,300
I've got a template function here that expects a priority queue of any type and it displays it.

47
00:03:10,330 --> 00:03:13,880
This is destructive so I'm passing by value.

48
00:03:14,170 --> 00:03:18,290
You've probably seen this a bunch of times now with queues in stacks and you're getting used to it.

49
00:03:18,370 --> 00:03:20,860
So I'm just getting that while it's not empty.

50
00:03:20,860 --> 00:03:23,250
I'm getting the top which is the biggest element.

51
00:03:23,590 --> 00:03:26,330
I'm popping it and printing it until it's empty.

52
00:03:27,870 --> 00:03:29,340
All right so that's what's happening there.

53
00:03:29,340 --> 00:03:32,820
So let's take a look at these two tests.

54
00:03:32,890 --> 00:03:40,450
Test 1 I'm creating a priority queue and I'm looping through this collection of integers here and I'm

55
00:03:40,460 --> 00:03:42,280
pushing it onto the queue.

56
00:03:42,380 --> 00:03:47,510
The priority here should say remember what's happening here is when they're being pushed in everything

57
00:03:47,510 --> 00:03:49,040
the pushing all happens at the top.

58
00:03:49,130 --> 00:03:55,340
But behind the scenes it's ordering so it's using a data structure behind the scenes so the top of this

59
00:03:55,340 --> 00:03:59,260
priority queue will always be the largest integer.

60
00:03:59,270 --> 00:04:04,160
Now in this case notice I have 3 5 7 here and I have three 5:7 here.

61
00:04:04,220 --> 00:04:08,660
The duplicates will be put in there and it's OK to have duplicates in priority so that's why I put them

62
00:04:08,660 --> 00:04:13,590
in there so that's what we're doing here we're pushing all of those integers and then what's the size.

63
00:04:13,610 --> 00:04:15,820
Well I pushed 12 of them.

64
00:04:15,920 --> 00:04:16,840
What's the top one.

65
00:04:16,840 --> 00:04:21,010
It's the biggest one that hundred right there.

66
00:04:21,080 --> 00:04:27,180
When I display the priority queue you can see 123 12 12 7 7 all the way down to zero.

67
00:04:27,180 --> 00:04:32,810
He could see the ordering is exactly as we would expect the top which is right there is that hundred

68
00:04:32,810 --> 00:04:33,830
right there.

69
00:04:33,830 --> 00:04:39,380
That is the greatest or the largest integer in the prior to q.

70
00:04:39,440 --> 00:04:41,510
So let me clear this up.

71
00:04:41,810 --> 00:04:42,830
So now what I do is.

72
00:04:42,860 --> 00:04:47,520
Pop that Max element from the priority queue.

73
00:04:47,630 --> 00:04:51,370
So that's going to take the hundred off and then when I display the priority queue.

74
00:04:51,590 --> 00:04:53,170
Now the new top is 23.

75
00:04:53,200 --> 00:04:54,970
The next largest number that was there.

76
00:04:55,040 --> 00:04:56,880
That's really all there is to a priority queue.

77
00:04:57,030 --> 00:05:00,550
Superpowerful a lot of times you will have needs for something like this.

78
00:05:00,830 --> 00:05:05,480
Let's say we're doing operating systems and we're skell scheduling jobs and they have to run based on

79
00:05:05,480 --> 00:05:06,680
a certain priority.

80
00:05:06,680 --> 00:05:11,310
This is awesome news priories use all the time because they make a lot of sense and they're super efficient.

81
00:05:11,660 --> 00:05:19,550
So let's take a look at test to test to have created a priority queue right here P-Q again.

82
00:05:19,940 --> 00:05:25,000
Of Person objects this time and I'm pushing a bunch of person objects now.

83
00:05:25,160 --> 00:05:30,800
I named these people A through F just so we can see the ordering with the string and then I've got some

84
00:05:30,890 --> 00:05:32,540
just random numbers here.

85
00:05:32,720 --> 00:05:41,600
We can see that the largest number is 27 remember before we said that the operator less than for the

86
00:05:41,600 --> 00:05:44,850
person class was checking age.

87
00:05:44,870 --> 00:05:46,540
That's the discriminant.

88
00:05:46,550 --> 00:05:51,680
So in this case when we put these things on these personal objects on the priority queue what we display

89
00:05:51,680 --> 00:05:58,680
the priority to the quote we're getting here notice that it's not ordered by name we're get a and CNA

90
00:05:58,680 --> 00:06:02,310
and Ian be it's ordered by that age.

91
00:06:02,400 --> 00:06:06,780
So the person with the largest age is at the top of the priority queue.

92
00:06:06,780 --> 00:06:11,500
So we've got 27 18 14 10 7 and down to 1.

93
00:06:11,650 --> 00:06:12,110
That's it.

94
00:06:12,130 --> 00:06:13,080
That's pretty cool.

95
00:06:13,090 --> 00:06:18,880
So if I decided to just stop this in if I decided to change the order remember right here as ordered

96
00:06:18,880 --> 00:06:24,850
by age so if I decided to come up here to my person class and we scroll up a little bit right here and

97
00:06:24,850 --> 00:06:29,000
let's say that I want to change this so it doesn't check.

98
00:06:29,000 --> 00:06:31,500
Age Instead it will do the same name.

99
00:06:31,640 --> 00:06:40,590
So we're going to return this to this dash name less than the right hand side name something like that.

100
00:06:40,610 --> 00:06:46,030
Now when we run this again you can see the output right over here.

101
00:06:47,350 --> 00:06:50,330
I move that over a little bit so I can write.

102
00:06:50,810 --> 00:06:52,940
You can see the output right here now.

103
00:06:54,090 --> 00:06:56,490
He's no longer by age right.

104
00:06:56,490 --> 00:07:01,860
He just happens to be 27 there because of the F but it's F E D C B.

105
00:07:01,980 --> 00:07:02,420
Right.

106
00:07:02,700 --> 00:07:05,650
So f is the largest name.

107
00:07:05,900 --> 00:07:08,020
The other way we've got ABC right.

108
00:07:08,040 --> 00:07:08,970
So there you go.

109
00:07:08,970 --> 00:07:12,870
So if I remove the top it's going to remove 27 right there.

110
00:07:13,840 --> 00:07:14,240
That's it.

111
00:07:14,260 --> 00:07:15,600
That's it for the priority queues.

112
00:07:15,610 --> 00:07:22,590
Very useful data structure to know about dead simple to use in C++ with the standard template library.

113
00:07:22,720 --> 00:07:27,310
A lot of other programming languages have libraries that support just about everything that's in the

114
00:07:27,310 --> 00:07:30,400
SPL and they're all pretty easy to use actually.

115
00:07:30,430 --> 00:07:33,820
What's really important is that you practice and you understand the SPL.

116
00:07:34,060 --> 00:07:35,900
You just do a lot of examples.

117
00:07:35,950 --> 00:07:41,230
I did a lot of examples in these videos and I did that like I said for a reason that's really the best

118
00:07:41,230 --> 00:07:47,230
way to learn this is to just go along with me and tweak yours and makers different and change like I

119
00:07:47,230 --> 00:07:48,560
just did right here.

120
00:07:48,560 --> 00:07:50,620
You know change this and see what the effect is.

121
00:07:50,620 --> 00:07:52,550
And that's how you really really learn this stuff.

122
00:07:53,440 --> 00:07:53,710
All right.

123
00:07:53,710 --> 00:07:58,210
So that is actually the end of the horæ right.

124
00:07:58,240 --> 00:08:03,220
It ended up being a lot longer than I thought it was going to be I rerecorded some videos and I hope

125
00:08:03,220 --> 00:08:04,510
it's useful to you all.
