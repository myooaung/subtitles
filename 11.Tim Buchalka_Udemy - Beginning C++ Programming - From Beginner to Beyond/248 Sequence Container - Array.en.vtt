WEBVTT
1
00:00:05.460 --> 00:00:12.440
In this video I'd like to go over one of the most basic of the SBL containers the array container I'll

2
00:00:12.440 --> 00:00:16.240
call it stood a in this video so we don't confuse it with a raw array.

3
00:00:16.950 --> 00:00:23.850
In order to use this array container we must include the array header file the array container allows

4
00:00:23.850 --> 00:00:27.050
us to create fixed size arrays of any type.

5
00:00:27.420 --> 00:00:30.370
So what makes this different from a raw array.

6
00:00:30.680 --> 00:00:31.590
A lot.

7
00:00:31.590 --> 00:00:36.840
First it's an object type stood array always has its size associated with it.

8
00:00:37.140 --> 00:00:42.300
Unlike a raw array a stood array doesn't decay to a pointer to the first element of the array when we

9
00:00:42.300 --> 00:00:43.760
pass it into a function.

10
00:00:44.960 --> 00:00:50.900
It's also very efficient element access happens in constant time constant time means that the time it

11
00:00:50.900 --> 00:00:55.450
takes to access an element is independent of the number of elements in the container.

12
00:00:55.460 --> 00:00:59.420
So instead array has five elements and you want it to access one of them.

13
00:00:59.420 --> 00:01:03.650
The time required would be the same as if it had a hundred thousand elements.

14
00:01:03.770 --> 00:01:10.520
Also since it stood arrays implemented behind the scenes by the SBL as a wrapper class around a raw

15
00:01:10.550 --> 00:01:15.080
array we can't get access to that raw array address if we need to.

16
00:01:15.200 --> 00:01:18.340
And we can use it with libraries that use raw pointers.

17
00:01:18.800 --> 00:01:21.580
But the biggest benefit is that it's part of the ACL.

18
00:01:21.680 --> 00:01:27.800
So we can use it with iterators and algorithms the Array class wasn't part of the original list T.L.

19
00:01:28.130 --> 00:01:30.490
it was added in C plus plus 11.

20
00:01:30.920 --> 00:01:35.660
You should always first consider using stood array in modern C plus plus when you have a need for a

21
00:01:35.660 --> 00:01:40.970
fixed size array don't use raw arrays unless you have a compelling reason to do so.

22
00:01:42.060 --> 00:01:46.380
All of the ACL iterators are available withstood array and they don't invalidate.

23
00:01:46.470 --> 00:01:50.200
And that makes sense because to raise a fixed size structure.

24
00:01:50.190 --> 00:01:55.440
OK so first let's look at a few ways to initialize it arrays and then we'll see some of the common member

25
00:01:55.440 --> 00:01:56.300
methods.

26
00:01:58.650 --> 00:02:05.500
Stood array is a very simple template class since the size of the array must be known at compile time.

27
00:02:05.500 --> 00:02:11.710
We have to provide both the type we want to store in it as well as the size this is exactly what we

28
00:02:11.710 --> 00:02:17.540
did a few videos ago when we created a Mirei class in the first example in the slide I declared a r

29
00:02:17.590 --> 00:02:24.540
r one as a stood array of 5 integers and I initialize these five integers to 1 2 3 4 and 5.

30
00:02:24.820 --> 00:02:29.780
If we have more than five integers in the initializer list we'll get an error if we have fewer than

31
00:02:29.780 --> 00:02:33.740
5 the remaining integers omitted will be set to zero.

32
00:02:33.740 --> 00:02:39.830
Now there is a quirk with the initializer list in C plus plus 11 you need to provide double curly braces

33
00:02:40.070 --> 00:02:42.080
in C plus plus 14 and 4.

34
00:02:42.110 --> 00:02:45.200
You don't just a single curly brace.

35
00:02:45.310 --> 00:02:51.880
So in the second example I'm declaring Stooges as a stewed array of three strings and I'm initializing

36
00:02:51.880 --> 00:02:53.570
them to Larry Moe and Curly.

37
00:02:53.590 --> 00:02:57.640
Not that I can use C-style string literals and they'll be converted to stood strings.

38
00:02:58.350 --> 00:03:03.130
There's also a very handy way to assign multiple values to an existing stood array.

39
00:03:03.240 --> 00:03:06.440
We can use an assignment statement in an initializer list.

40
00:03:06.450 --> 00:03:08.990
This is really cool and extremely useful.

41
00:03:09.000 --> 00:03:15.140
So now let's see some common methods provided by stood array in this section.

42
00:03:15.140 --> 00:03:20.780
I'm not going to exhaustively go over all the methods provided by all of the ACL containers that would

43
00:03:20.780 --> 00:03:24.410
be pretty boring for me and it would probably be even more boring for you.

44
00:03:24.410 --> 00:03:29.290
So what I want to do is go over some of the most common methods used in some of the methods particular

45
00:03:29.440 --> 00:03:31.020
to specific containers.

46
00:03:31.280 --> 00:03:33.590
So let's start with the size method.

47
00:03:33.590 --> 00:03:36.930
This method is available to all containers in the studio array.

48
00:03:36.930 --> 00:03:38.090
It's pretty simple.

49
00:03:38.090 --> 00:03:41.870
It's the size of the container and it's fixed arrays.

50
00:03:41.870 --> 00:03:44.540
Also let us access individual array elements.

51
00:03:44.540 --> 00:03:49.610
We can use either the subscript syntax or the DOT method.

52
00:03:49.970 --> 00:03:56.810
Now if you remember from the vector subscript operator does no bounds checking but the method does do

53
00:03:56.810 --> 00:04:03.130
bounds checking and an exception is thrown if we're out of bounds you can see an example code that A-R

54
00:04:03.140 --> 00:04:11.820
are at 0 will refer to a 1 in the array or R and R R someone refers to the two this array also provides

55
00:04:11.820 --> 00:04:13.620
front and back methods.

56
00:04:13.620 --> 00:04:18.840
Now these methods return references to the element at the front of the array and of the element at the

57
00:04:18.840 --> 00:04:21.020
back of the array respectively.

58
00:04:21.060 --> 00:04:30.580
In this example our front refers to the one and a r r back refers to the five the empty method will

59
00:04:30.580 --> 00:04:35.980
return true if the array is empty and false otherwise this doesn't mean how many elements out of the

60
00:04:36.170 --> 00:04:40.330
elements you are using it basically means it's the size of the array.

61
00:04:40.360 --> 00:04:45.100
This is rarely ever use withstood array but it is with other SDL containers.

62
00:04:45.100 --> 00:04:50.250
The fill method is very handy and fills the Stood array with whatever element is provided.

63
00:04:50.320 --> 00:04:54.990
Remember I'm using ints here for these examples but these could be almost any data type.

64
00:04:55.030 --> 00:04:58.440
We can also swap two stood arrays of the same size and type.

65
00:04:58.660 --> 00:05:02.380
All we have to do is simply call swap with one and pass the other in.

66
00:05:02.770 --> 00:05:08.710
And finally we can use the dot data method to get access to the underlying raw array.

67
00:05:08.710 --> 00:05:14.410
In this case data returns the address of the raw array of integers which we store in a pointer variable

68
00:05:16.170 --> 00:05:18.990
as you can see stood arrays are very straightforward.

69
00:05:18.990 --> 00:05:20.560
Now let's head over to the idea.

70
00:05:20.580 --> 00:05:27.950
We'll see some more examples of using stood erect before we head off to the ID and run some examples

71
00:05:27.950 --> 00:05:29.370
with the array.

72
00:05:29.450 --> 00:05:33.720
I'd like to refer you to this Web site and I've mentioned this Web site a couple of times in the course.

73
00:05:33.810 --> 00:05:36.320
It's the reference dot com.

74
00:05:36.380 --> 00:05:39.430
I'm here in the United States so I'm getting the English version.

75
00:05:39.470 --> 00:05:43.490
I'm not sure if this is localized for other countries it seems like it would be because you see the

76
00:05:43.550 --> 00:05:45.430
end of the beginning here.

77
00:05:45.470 --> 00:05:46.400
In any case.

78
00:05:46.400 --> 00:05:51.340
Good to see Peepy reference dot com and it's got all kinds of good information about C++.

79
00:05:51.440 --> 00:05:57.710
Up to now we really haven't needed it too much but with the container's library in the SPL your algorithms

80
00:05:57.710 --> 00:06:00.950
and your iterator is this is a really useful reference.

81
00:06:01.070 --> 00:06:05.900
I'm right at the main page here and you can see the container's library is right here so I'll just select

82
00:06:05.900 --> 00:06:11.010
that and it shows you all the containers in the house for example array.

83
00:06:11.010 --> 00:06:12.700
That's what we're going to talk about now.

84
00:06:12.960 --> 00:06:17.730
Vector a deck of forward lists will talk about all of these in this section but this is a good theory

85
00:06:18.210 --> 00:06:22.950
and this gives you a lot of really good reference and documentation on the array you can see it's implemented

86
00:06:22.950 --> 00:06:24.590
as a template class here.

87
00:06:24.930 --> 00:06:30.340
And if you scroll down just a little bit all of these containers we're talking about iterator invalidations

88
00:06:30.350 --> 00:06:36.020
So if you're not sure about if you've got an iterator and you've removed an item is it invalid now it'll

89
00:06:36.030 --> 00:06:39.260
it'll say it all throughout the documentation here.

90
00:06:39.390 --> 00:06:43.720
Also the other important piece are these right here these member functions.

91
00:06:43.740 --> 00:06:48.090
This tells you what member functions are available for this particular container and you can see here

92
00:06:48.090 --> 00:06:50.640
I can be constructed and destructed and so forth.

93
00:06:50.640 --> 00:06:52.890
But these are the real important ones here.

94
00:06:52.920 --> 00:06:55.690
This is a really simple container the array container.

95
00:06:55.710 --> 00:06:59.350
So you've got the method you've got the overload or subscript operator.

96
00:06:59.440 --> 00:07:05.000
I noticed this one does bounds checking and the operator script is not the front the back the data the

97
00:07:05.190 --> 00:07:06.900
things I talked about in the slides.

98
00:07:07.080 --> 00:07:10.940
We've also got iterators you can see all the iterators are available to us here.

99
00:07:11.100 --> 00:07:15.450
And then we've got some capacity methods and the fill in the swap that I also mentioned.

100
00:07:15.570 --> 00:07:18.500
So this gives you a lot of really good information.

101
00:07:18.520 --> 00:07:22.470
Now if you're not sure about what the front method does it mean it says here access the first element

102
00:07:22.470 --> 00:07:28.200
which is makes sense right the front but if you want more information you can click on here and not

103
00:07:28.200 --> 00:07:33.420
all of these things are going to be easy reads When you're first starting out with C++ but you'll understand

104
00:07:33.420 --> 00:07:37.860
that soon enough and little by little you'll understand more and more and more and then these references

105
00:07:37.860 --> 00:07:39.430
become very very handy.

106
00:07:39.480 --> 00:07:41.250
In this case you can see what does it do.

107
00:07:41.490 --> 00:07:44.470
Well it provides a reference to the first element.

108
00:07:44.490 --> 00:07:46.190
That's kind of what I said earlier right.

109
00:07:46.200 --> 00:07:49.290
The complexity is constant time which is cool.

110
00:07:49.290 --> 00:07:54.620
Usually most of these methods will have a complexity associated with them and they will be listed here.

111
00:07:54.690 --> 00:07:58.240
I mentioned before that with the SPL You know what you get.

112
00:07:58.520 --> 00:08:01.290
So when you using these methods you know other complexity.

113
00:08:01.290 --> 00:08:05.480
So if you're using something that's in linear time you'll understand that if it's constant time it'll

114
00:08:05.490 --> 00:08:06.390
say it as well.

115
00:08:06.480 --> 00:08:11.340
And then it's got usually some kind of sample code here that you can run right inside your browser.

116
00:08:11.370 --> 00:08:13.240
So it's a very handy site.

117
00:08:13.260 --> 00:08:17.460
I think you're going to refer to this a lot when I go to the idea I'll be playing with a lot of source

118
00:08:17.460 --> 00:08:21.930
code that you can play around with and it covers the majority of these but obviously it's impossible

119
00:08:21.930 --> 00:08:27.110
to cover them all especially as the containers and the algorithms and the iterators all come together

120
00:08:27.120 --> 00:08:29.720
the permutations just go skyrocketing.

121
00:08:29.730 --> 00:08:35.970
So play on your own and go through here study this this is the best way to really learn the SBL but

122
00:08:35.970 --> 00:08:39.420
watch the videos first and then you'll be able to understand this a lot better.

123
00:08:39.420 --> 00:08:39.660
All right.

124
00:08:39.660 --> 00:08:41.930
So let's head over to the ID.

125
00:08:43.200 --> 00:08:49.770
OK so I'm back in the IDM in the section 20 workspace in the array project and what I've done is I've

126
00:08:49.770 --> 00:08:56.160
broken this project up into nine test functions and each one of these functions is independent and deals

127
00:08:56.160 --> 00:09:01.550
with specific methods or iterators or algorithms that we can really learn.

128
00:09:01.590 --> 00:09:07.980
My perspective on the SBL is the more examples you can see the better you're going to learn it and the

129
00:09:07.980 --> 00:09:09.550
more you can apply what you're learning.

130
00:09:09.550 --> 00:09:11.730
Two other examples you haven't seen yet.

131
00:09:11.880 --> 00:09:16.170
OK so why don't we start rather than jump back and forth and running and compiling and so forth.

132
00:09:16.170 --> 00:09:19.590
I've already run this and the output is over here on the right.

133
00:09:19.590 --> 00:09:23.940
I've run all nine functions over here on the right and there's the output and what I'll do is I'll go

134
00:09:23.940 --> 00:09:28.160
through them so you can understand exactly what's going on this will save a little time.

135
00:09:28.320 --> 00:09:31.100
And that way you can stop the video and look at them as well.

136
00:09:31.110 --> 00:09:33.420
So let's start with test one.

137
00:09:33.480 --> 00:09:37.660
First thing we're going to do here is we're going to create two stood arrays.

138
00:09:37.680 --> 00:09:40.350
They're both the same size and they're both of the same type.

139
00:09:40.380 --> 00:09:48.540
So I'm creating an array right here called A-R are one of five integers and initializing it to 1 3 3

140
00:09:48.540 --> 00:09:49.830
4 and 5.

141
00:09:50.460 --> 00:09:55.960
I'm also creating a rate to the same size same type but I'm not initializing it.

142
00:09:56.490 --> 00:09:58.070
And then of displaying both arrays.

143
00:09:58.080 --> 00:10:00.380
Now the display function is right up here.

144
00:10:00.510 --> 00:10:02.380
Let me clear this and show that to you.

145
00:10:02.640 --> 00:10:05.610
And the way the display functions work for stood arrays.

146
00:10:05.700 --> 00:10:08.550
Notice the parameter right here the perimeter type.

147
00:10:08.730 --> 00:10:11.370
You've got to supply the information.

148
00:10:11.370 --> 00:10:15.930
So we've got to supply the type and the size for all it's doing is just using arranged base for loop

149
00:10:15.930 --> 00:10:17.390
to display it.

150
00:10:17.460 --> 00:10:17.820
All right.

151
00:10:17.820 --> 00:10:19.370
So let's get back to this.

152
00:10:19.380 --> 00:10:21.630
Let's go through test case one here.

153
00:10:21.630 --> 00:10:27.230
So we've got those two arrays A-R one or two I'm displaying both of them.

154
00:10:27.240 --> 00:10:28.110
They're out right.

155
00:10:28.110 --> 00:10:30.800
Here you can see there's my test one output right here.

156
00:10:30.810 --> 00:10:32.040
Notice the first one printout.

157
00:10:32.040 --> 00:10:33.090
One two three four five.

158
00:10:33.090 --> 00:10:33.570
Exactly.

159
00:10:33.600 --> 00:10:34.960
We expect no notice.

160
00:10:34.980 --> 00:10:35.870
A r r to.

161
00:10:35.880 --> 00:10:37.420
We're displaying it right here.

162
00:10:37.440 --> 00:10:42.860
We've got five garbage values so nothing is initialized when we do something like this.

163
00:10:42.990 --> 00:10:47.530
We're initializing this to the array but we're not initializing the elements of the array.

164
00:10:47.820 --> 00:10:48.430
That's important.

165
00:10:48.430 --> 00:10:54.340
Understand now what we have here is a really nice way to assign a bunch of values to a state array.

166
00:10:54.510 --> 00:10:57.820
And the syntax is dead simple and it's so handy.

167
00:10:57.840 --> 00:11:02.670
So what we're doing here is we're assigning 10 20 30 40 and 50 to our two that's the one that had all

168
00:11:02.670 --> 00:11:04.360
those garbage values in it.

169
00:11:04.500 --> 00:11:06.790
And then were displaying those two arrays again.

170
00:11:06.900 --> 00:11:09.040
So you can see them displaying right here.

171
00:11:09.300 --> 00:11:13.750
One two three four five and now 10 20 30 40 and 50 which is really nice.

172
00:11:14.650 --> 00:11:19.150
Here we're just displaying both sizes now they're both the same size right so we should we expect a

173
00:11:19.150 --> 00:11:20.140
5 and a 5.

174
00:11:20.320 --> 00:11:22.380
And that's exactly what we get here.

175
00:11:22.410 --> 00:11:28.570
There are both sides 5 size isn't really used very often stood a raise the size is fixed right so it

176
00:11:28.570 --> 00:11:29.450
is what it is.

177
00:11:29.470 --> 00:11:33.900
It's right here but it's used a lot in other containers.

178
00:11:34.120 --> 00:11:38.200
Let me clear this little bit and let me scroll up just a bit so we can get to these guys right down

179
00:11:38.200 --> 00:11:39.810
here the last couple of lines.

180
00:11:39.970 --> 00:11:48.370
You can see here in this example that we can subscript into are one or two and he stood erect.

181
00:11:48.370 --> 00:11:50.810
This does not do bounds checking.

182
00:11:50.830 --> 00:11:57.400
So what we're doing here is we're drawing a thousand into our one Sub-Zero and that's this guy we're

183
00:11:57.400 --> 00:12:00.030
basically placing that one with a thousand.

184
00:12:00.340 --> 00:12:06.900
And then over here what I'm doing is I'm replacing a R are at one with 2000.

185
00:12:06.920 --> 00:12:08.040
That would be the two.

186
00:12:08.320 --> 00:12:11.360
So replacing the two with two thousand.

187
00:12:11.620 --> 00:12:13.670
This does no bounds checking.

188
00:12:13.780 --> 00:12:16.000
This does do bounds checking.

189
00:12:16.030 --> 00:12:19.350
So if I'm out of bounds right here I'm going to get an exception thrown in.

190
00:12:19.360 --> 00:12:19.930
Out of range.

191
00:12:19.930 --> 00:12:20.870
Exception.

192
00:12:21.280 --> 00:12:26.910
And all I'm doing now is displaying a or one and you can see they are displaying right here.

193
00:12:26.920 --> 00:12:31.690
Notice the 1000 to 2000 have been updated as still have the three four in the five.

194
00:12:32.230 --> 00:12:39.430
And then the last two examples are right here at the bottom where I'm saying what is a r r front and

195
00:12:39.430 --> 00:12:43.390
what is a R are are up front and back.

196
00:12:43.390 --> 00:12:47.360
So what's the front element of array and what's the back element of a right to.

197
00:12:47.740 --> 00:12:49.280
Well array 2 is right here.

198
00:12:49.390 --> 00:12:53.790
The front element is A10 the back element is a 50 that's exactly what we expect.

199
00:12:54.070 --> 00:12:55.980
That's exactly what Prince right here.

200
00:12:57.490 --> 00:12:59.370
OK so some really simple examples.

201
00:12:59.380 --> 00:13:03.190
And again I'm going to do a lot of examples in this section so you can better understand how some of

202
00:13:03.190 --> 00:13:04.080
this stuff works.

203
00:13:04.240 --> 00:13:06.610
Let's take a look at the next one now.

204
00:13:06.850 --> 00:13:09.070
And you could see the output for test two.

205
00:13:09.100 --> 00:13:10.390
Right over here on the right.

206
00:13:10.450 --> 00:13:13.920
Right here that so what are we doing here.

207
00:13:13.920 --> 00:13:19.740
Same idea I've got two arrays already one in Ray 2MB initialising the first one one to five and 10 20

208
00:13:19.740 --> 00:13:23.800
30 40 and 50 for a rate to displaying both of them.

209
00:13:24.030 --> 00:13:28.570
And there they are right there just as you would expect one two three four five and 10 other way through

210
00:13:28.580 --> 00:13:30.070
50.

211
00:13:30.090 --> 00:13:34.760
Now I'm using the fill method I'm filling a re one with zeros.

212
00:13:34.770 --> 00:13:36.090
This could be any integer.

213
00:13:36.090 --> 00:13:37.730
I'm just passing a zero into it.

214
00:13:37.860 --> 00:13:40.260
And again remember I'm using integers for these examples.

215
00:13:40.260 --> 00:13:41.830
This could be almost any type.

216
00:13:42.090 --> 00:13:46.300
So I'm using a zero here and filling array one with zero and then I'm displaying those guys again.

217
00:13:46.320 --> 00:13:50.650
Notice how array one right here is all zeros now.

218
00:13:50.690 --> 00:13:54.030
So it's a real handy way to fill an array with whatever value we want.

219
00:13:55.210 --> 00:14:01.120
Now we're coming here and what we're saying is let's swap those two arrays I could say array one that

220
00:14:01.120 --> 00:14:05.320
swap array two or array to that swap array one ram and swapping is swapping.

221
00:14:05.320 --> 00:14:10.420
So in this case I'm swapping those two arrays and I'm displaying them again and you can see that they

222
00:14:10.420 --> 00:14:12.250
have indeed been swapped right.

223
00:14:12.250 --> 00:14:14.330
First it was a 0 there was 10 to 50.

224
00:14:14.320 --> 00:14:17.280
Now it's 10 to 50 and the zeros are second.

225
00:14:18.130 --> 00:14:18.450
OK.

226
00:14:18.470 --> 00:14:23.180
So let's move on to the third test and let's take a look at this one.

227
00:14:23.180 --> 00:14:25.750
The results are right here.

228
00:14:25.850 --> 00:14:29.880
I had another line that printed that header right here but I removed it.

229
00:14:29.890 --> 00:14:31.840
That's why you're seeing that test three twice.

230
00:14:31.840 --> 00:14:33.270
All right so I've got a re one.

231
00:14:33.280 --> 00:14:34.300
One two three four five.

232
00:14:34.300 --> 00:14:36.970
Again it's a good array of five integers.

233
00:14:37.000 --> 00:14:39.240
Now what's going on here.

234
00:14:39.280 --> 00:14:47.110
The data method returns the raw pointer that points to the behind the scenes raw array.

235
00:14:47.110 --> 00:14:52.890
What happens is remember a r r one is an object.

236
00:14:53.500 --> 00:14:56.510
So it has some data associated with it.

237
00:14:56.530 --> 00:15:00.130
One of the pieces of data is 5 right it knows its size.

238
00:15:00.130 --> 00:15:04.960
The other piece of data that has is the actual array in this case 5.

239
00:15:04.970 --> 00:15:10.400
So this guy is what's returned the address of that element.

240
00:15:10.400 --> 00:15:16.790
So when we say are one dot data what we're returning is the address of that first element in the raw

241
00:15:16.790 --> 00:15:21.790
array behind the scenes member the Stood arrays with a wrapper around a raw array.

242
00:15:22.190 --> 00:15:27.490
And I'm storing that into a pointer which is a pointer to an integer the address of an integer if display

243
00:15:27.500 --> 00:15:28.330
pointer.

244
00:15:28.370 --> 00:15:31.460
You can see right there that's a memory address being displayed.

245
00:15:31.520 --> 00:15:35.660
That's the memory address of that first element in the array.

246
00:15:35.660 --> 00:15:40.160
Now I can change that through the pointer I could say the reference point to equals 10000.

247
00:15:40.190 --> 00:15:46.240
And I just put a 10000 here and if I display A-R one you can see it right here.

248
00:15:46.240 --> 00:15:49.000
See that 10000 is being updated right there.

249
00:15:49.000 --> 00:15:51.670
Now you don't do this very often.

250
00:15:51.670 --> 00:15:58.690
Obviously the whole point of using a stick to write is not to use a raw array but sometimes we use libraries

251
00:15:58.900 --> 00:16:03.720
that use raw arrays so we can still use stood arrays for our work.

252
00:16:03.730 --> 00:16:09.000
And then when we need to pass in the raw array we can use the data method and send them what they want

253
00:16:09.730 --> 00:16:14.770
but we can still have the safety and ease of use on our end and what's really cool about using this

254
00:16:14.770 --> 00:16:19.450
tool to raise on our end is because they are SDL containers so we can use them with iterators we can

255
00:16:19.450 --> 00:16:21.010
use them with algorithms and so forth.

256
00:16:21.010 --> 00:16:27.070
So that's that's the real power will go to test for and test for is a real simple example we're going

257
00:16:27.070 --> 00:16:29.410
to sort this array it's really really cool.

258
00:16:29.410 --> 00:16:35.440
Here's the array 2 1 4 5 3 and all of these are stood arrays and I've defined this one to five integers

259
00:16:35.440 --> 00:16:38.700
again displaying it right here and this is Task Force.

260
00:16:38.700 --> 00:16:40.650
You can see the output right here.

261
00:16:40.810 --> 00:16:43.800
So I'm displaying array 1 2 1 4 5 3.

262
00:16:43.810 --> 00:16:46.700
That's what we get right here 2 1 4 5 3.

263
00:16:47.150 --> 00:16:48.320
Then I'm sorting it.

264
00:16:48.370 --> 00:16:50.470
Now this sort is an algorithm right.

265
00:16:50.470 --> 00:16:56.220
That's my sort function and it expects to iterators where do I start where and why end.

266
00:16:56.380 --> 00:17:01.930
Well I'm starting at the beginning and I'm ending at the end I'm sorting the entire array and then I'm

267
00:17:01.930 --> 00:17:02.500
displaying it.

268
00:17:02.500 --> 00:17:05.440
So you can see right here displaying the sorted array.

269
00:17:05.440 --> 00:17:08.650
One two three four five easy is that.

270
00:17:08.830 --> 00:17:11.080
All right so let's take a look at test five.

271
00:17:11.200 --> 00:17:15.210
And for each one of these tests I tried to add a little bit different functionality.

272
00:17:15.220 --> 00:17:17.820
Again the more examples you see the better.

273
00:17:17.890 --> 00:17:21.940
Hopefully you'll start seeing the patterns of use and it makes it much much easier to understand.

274
00:17:22.120 --> 00:17:23.210
All right so here's test five.

275
00:17:23.220 --> 00:17:26.040
You can see the output right here is just one line of output.

276
00:17:26.050 --> 00:17:29.930
Here's my array are 1 2 1 4 5 3.

277
00:17:30.250 --> 00:17:33.490
And what we want to do is we want to find the minimum the maximum in there.

278
00:17:33.910 --> 00:17:36.800
So we have an algorithm called Min element.

279
00:17:36.950 --> 00:17:39.310
We have another one called Max element.

280
00:17:39.310 --> 00:17:41.530
It expects iterators right.

281
00:17:41.530 --> 00:17:42.460
It's an out.

282
00:17:42.470 --> 00:17:45.480
So array one began array one end.

283
00:17:45.520 --> 00:17:51.250
I want to search through the entire array for the minimum element and this doesn't return the minimum

284
00:17:51.280 --> 00:17:51.640
element.

285
00:17:51.640 --> 00:17:54.490
This returns an iterator to the minimum element.

286
00:17:54.490 --> 00:18:01.890
So this is how you would declare that variable M. is an iterator to a array of five integers.

287
00:18:02.110 --> 00:18:06.900
Now that ugly that's really ugly looking coded it's readable but it's kind of ugly.

288
00:18:06.910 --> 00:18:08.770
This is much nicer.

289
00:18:08.890 --> 00:18:10.230
Let the compiler figure it out.

290
00:18:10.240 --> 00:18:15.900
So I did it the long way for the minimum number and I did it the short way using auto for the max number.

291
00:18:15.940 --> 00:18:21.880
So all I'm saying is auto Max Nahm Hey compiler figure out that the max numbers type based on the return

292
00:18:21.880 --> 00:18:23.830
here and I'm doing the same thing.

293
00:18:24.010 --> 00:18:29.800
And remember we get back iterators so we dereference the iterators and we get back the min number which

294
00:18:29.830 --> 00:18:33.210
in this case is 1 and the max number which in this case is 5.

295
00:18:33.370 --> 00:18:35.590
And that's exactly what we expected here.

296
00:18:36.510 --> 00:18:42.060
So let's move on to test 6 and test 6 is a real simple test you can see it again right over here there's

297
00:18:42.060 --> 00:18:43.370
only one line about.

298
00:18:43.860 --> 00:18:47.550
There is another algorithm called adjacent find.

299
00:18:47.730 --> 00:18:55.030
And what it does it searches through a container and returns the first occurrence of two adjacent values.

300
00:18:55.350 --> 00:19:00.150
Now these two adjacent values are compared with the equality operator which we would overload if we

301
00:19:00.150 --> 00:19:01.440
had our own classes.

302
00:19:01.500 --> 00:19:03.010
But here we're using integers again.

303
00:19:03.090 --> 00:19:04.610
So you can see here it is right here.

304
00:19:04.660 --> 00:19:06.350
Two three is one right next to another.

305
00:19:06.360 --> 00:19:07.460
That's what I expect.

306
00:19:07.470 --> 00:19:10.460
So this also returns an iterator.

307
00:19:10.590 --> 00:19:17.610
I'm using auto and I'm saying adjacent equals stood adjacent find from beginning to the end.

308
00:19:17.610 --> 00:19:20.700
Give me the first occurrence of any two adjacent items.

309
00:19:20.760 --> 00:19:26.550
It's possible there are no adjacent items so I would check if adjacent is not equal to array and I found

310
00:19:26.550 --> 00:19:30.350
something that is equal to array and there were no adjacent elements.

311
00:19:30.360 --> 00:19:35.670
So in this case we found them and there is the iterator which we dereference and you can see right here

312
00:19:36.090 --> 00:19:38.580
adjacent element found with value 3.

313
00:19:38.880 --> 00:19:41.420
Pretty cool and pretty easy and pretty powerful as well.

314
00:19:41.420 --> 00:19:45.850
Hopefully if you're starting to see the real power of the TLM it's actually awesome.

315
00:19:45.970 --> 00:19:47.240
He does so much with it.

316
00:19:47.250 --> 00:19:48.520
All right test 7.

317
00:19:48.690 --> 00:19:51.070
Here's the output for test 7 right here.

318
00:19:51.120 --> 00:19:55.950
Really easy we're using the accumulate algorithm we've used this before as an example in order to use

319
00:19:55.950 --> 00:20:02.010
this you have to include numeric hey it's not an algorithm it's an include numeric so make sure you

320
00:20:02.010 --> 00:20:07.690
do that and all that does is it accumulates from this iterator to that iterator.

321
00:20:08.130 --> 00:20:12.090
And this is where it starts if you started it 10 it would start adding from 10.

322
00:20:12.210 --> 00:20:13.790
In this case I'm starting from zero.

323
00:20:13.980 --> 00:20:21.390
What's really important here is that this type and this type and this type are the same.

324
00:20:21.480 --> 00:20:26.250
So double double zero point zero make sure they're all the same of way you can run into some really

325
00:20:26.250 --> 00:20:28.040
really weird little errors.

326
00:20:28.050 --> 00:20:34.440
We do this it sums them up one super triples purpose five we display it and we get the sum is 15 which

327
00:20:34.440 --> 00:20:36.000
is just what we would expect.

328
00:20:36.210 --> 00:20:38.040
And let's do a couple of more.

329
00:20:38.040 --> 00:20:39.400
We're almost done with these.

330
00:20:39.480 --> 00:20:40.800
Hopefully you will.

331
00:20:40.890 --> 00:20:44.040
You're following along I think you are because it's pretty straightforward stuff.

332
00:20:44.220 --> 00:20:48.780
The last two will do is the count and then would you account if using a lambda and test 9.

333
00:20:48.780 --> 00:20:50.110
So here's test 8.

334
00:20:50.190 --> 00:20:55.140
This time I've got a studio array of 10 integers and I get to call that array 1.

335
00:20:55.410 --> 00:21:01.240
And in this case I've got one two three four five six threes.

336
00:21:01.260 --> 00:21:02.550
I just want to count them.

337
00:21:02.700 --> 00:21:04.250
So I'm going to use the algorithm count.

338
00:21:04.260 --> 00:21:06.360
So I'm going to say stood count.

339
00:21:06.360 --> 00:21:09.030
They always use iterators from beginning to end.

340
00:21:09.030 --> 00:21:11.640
What am I looking for the three.

341
00:21:11.760 --> 00:21:12.120
That's it.

342
00:21:12.120 --> 00:21:14.320
What do I expect that I expect back six right.

343
00:21:14.320 --> 00:21:16.090
I just count them up here.

344
00:21:16.140 --> 00:21:17.490
So this is an integer.

345
00:21:17.490 --> 00:21:23.220
You get back to the integer of the number of occurrences it says I found three six times.

346
00:21:23.430 --> 00:21:25.660
Something we would expect.

347
00:21:25.920 --> 00:21:32.480
And then the last one is the count if which is very similar to count except it's using a predicate.

348
00:21:32.490 --> 00:21:35.880
And what we're going to do is we're going to supply a lambda expression.

349
00:21:35.880 --> 00:21:37.330
So here's what I've got.

350
00:21:37.440 --> 00:21:42.190
I've got a r r 1 again is 10 integers it's a stud array.

351
00:21:42.300 --> 00:21:44.580
And those are the 10 integers you can see them right here.

352
00:21:44.700 --> 00:21:50.530
And what I want to do is I want to find out how many numbers are between 10 and 200.

353
00:21:50.580 --> 00:21:56.340
So there's one there's two there's three there's four I don't want to include 200 in this case so I

354
00:21:56.340 --> 00:21:58.050
expect back of four.

355
00:21:58.110 --> 00:21:59.000
So what do we use.

356
00:21:59.040 --> 00:22:00.770
We use COUNT IF.

357
00:22:01.080 --> 00:22:03.870
Where do we start at the beginning where do we end.

358
00:22:03.930 --> 00:22:06.980
At the end and what's the predicate.

359
00:22:06.990 --> 00:22:14.480
Well I want to return true when x is greater than 10 and X is less than 200.

360
00:22:14.550 --> 00:22:14.920
That's it.

361
00:22:14.910 --> 00:22:19.800
And there's my lambda expression you can see my x is being passed into here for each element.

362
00:22:19.950 --> 00:22:24.660
So the one will be passed in here is X and we're going to check that the two the three all the way from

363
00:22:25.140 --> 00:22:27.080
whatever are iterators say.

364
00:22:27.480 --> 00:22:32.760
So in this case how many matches we expect for display them right here and that's what you get right

365
00:22:32.910 --> 00:22:35.310
there in the upper.

366
00:22:35.400 --> 00:22:37.690
OK so again a lot of examples.

367
00:22:37.730 --> 00:22:42.050
I did a lot of examples on purpose because I want you to have a lot of examples on your end in the source

368
00:22:42.050 --> 00:22:43.730
code that you can play with.

369
00:22:43.730 --> 00:22:47.780
And as I said you're probably going to get tired of seeing these examples but the more examples you

370
00:22:47.780 --> 00:22:49.550
see the better.

371
00:22:49.550 --> 00:22:52.670
All right so that covers stood array in the next video.

372
00:22:52.670 --> 00:22:55.730
We'll start talking about stood Vektor which you know a lot about already.
