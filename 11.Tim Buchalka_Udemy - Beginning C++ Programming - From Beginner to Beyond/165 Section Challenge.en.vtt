WEBVTT
1
00:00:05.410 --> 00:00:08.660
Hello everyone welcome to the section 14 challenge.

2
00:00:08.710 --> 00:00:12.290
Congratulations on finishing up this part of the course.

3
00:00:12.310 --> 00:00:17.920
I'm in the section 14 workspace and you can see that I have a challenge project and this is the basic

4
00:00:17.920 --> 00:00:19.210
shell and I want to talk about.

5
00:00:19.210 --> 00:00:25.120
Now there's also a challenge solution 1 and the challenge solution 2 and I'll talk about those projects

6
00:00:25.120 --> 00:00:26.260
in just a second.

7
00:00:26.260 --> 00:00:31.660
So the whole idea with this challenge is for you to overload operators for the my string class I'm providing

8
00:00:31.660 --> 00:00:37.690
a basic string class that's got all the constructors your move constructors your assignment operators

9
00:00:37.930 --> 00:00:42.610
and I've even overloaded the insertion and extraction operators just to make it easier for you to test

10
00:00:42.610 --> 00:00:43.480
your code.

11
00:00:43.480 --> 00:00:46.090
So let's talk about this challenge.

12
00:00:46.300 --> 00:00:50.890
The purpose of the challenge is for you to gain experience overloading operators and I would recommend

13
00:00:50.890 --> 00:00:52.570
that you do this challenge twice.

14
00:00:52.570 --> 00:00:54.600
That's why we have two solutions here.

15
00:00:54.760 --> 00:01:00.160
The first time do it by overloading the operators using member functions and then start a new project

16
00:01:00.430 --> 00:01:03.580
and do the same thing but this time use non member functions.

17
00:01:03.820 --> 00:01:07.210
OK so let's talk about some of the operators that you could overload.

18
00:01:07.270 --> 00:01:09.030
Now I'm just giving you an example here.

19
00:01:09.030 --> 00:01:12.230
You can certainly do whatever you like whatever makes sense to you.

20
00:01:12.340 --> 00:01:14.600
As crazy as you like this is just to learn.

21
00:01:14.600 --> 00:01:17.250
So you know be as creative as you like.

22
00:01:17.350 --> 00:01:19.260
But here's a couple of examples.

23
00:01:19.330 --> 00:01:25.110
We've already done the minus we've already done the minus in the slides in the examples.

24
00:01:25.110 --> 00:01:28.800
All it does is makes a string lowercase.

25
00:01:28.810 --> 00:01:30.690
Here's the example for equality.

26
00:01:30.700 --> 00:01:41.280
We want to compare two strings as one and as to not obviously this we'll call s one dot operator the

27
00:01:41.280 --> 00:01:44.660
equality operator with s to.

28
00:01:44.850 --> 00:01:46.830
And this is assuming the member method.

29
00:01:46.830 --> 00:01:51.480
So remember all of these operators that we're talking about get mapped to some function whether it be

30
00:01:51.480 --> 00:01:55.760
a member function for a non member function just as we talked about in the class.

31
00:01:55.800 --> 00:01:58.670
So that's the equality operator.

32
00:01:58.760 --> 00:02:03.420
And we're also going to have the not equal operator which just checks to see if two strings are not

33
00:02:03.420 --> 00:02:04.080
equal.

34
00:02:04.080 --> 00:02:08.940
So in the case of S1 being Joe and as to being frank this where we turn true because they're not equal

35
00:02:09.780 --> 00:02:14.170
when we've got the less than and greater than operators which just test strings lexically.

36
00:02:14.180 --> 00:02:22.020
So for example if I've got Frank and I've got George Frank will be less than George since f is less

37
00:02:22.040 --> 00:02:25.490
and G you get the idea just basic string comparison.

38
00:02:25.520 --> 00:02:29.420
We can also do the greater than equal to or less than nickel to leave those up to you if you choose

39
00:02:29.420 --> 00:02:30.480
to do them.

40
00:02:30.560 --> 00:02:33.280
We've got concatenation which we've already done.

41
00:02:33.500 --> 00:02:37.210
But again I haven't done any of these so that you can get experience doing them.

42
00:02:37.220 --> 00:02:40.760
I'd recommend that you try to do them by yourself without going back to the slides and looking at the

43
00:02:40.760 --> 00:02:45.320
code we've written that we you get a little bit better feel for how to overload the operators and how

44
00:02:45.320 --> 00:02:48.780
they work with the code we've got the plus equal operator.

45
00:02:48.800 --> 00:02:52.310
This is an interesting operator because it's s one plus equals as two.

46
00:02:52.310 --> 00:02:56.500
So this is the same as S1 equals as one plus as two.

47
00:02:56.730 --> 00:03:01.130
And then I've got this operator here and this may be a little confusing solemne to take a second to

48
00:03:01.130 --> 00:03:02.300
talk about it.

49
00:03:02.330 --> 00:03:07.660
The idea here is that we have two times three and this is an integer here.

50
00:03:08.330 --> 00:03:13.370
And the idea would be if I have as to being a ABC then as two times three is going to give me three

51
00:03:13.370 --> 00:03:17.670
copies of ABC it's going to repeat that string whatever it is and times where.

52
00:03:17.690 --> 00:03:19.640
And is this guy right here.

53
00:03:19.730 --> 00:03:21.820
So this can be a pretty handy operator.

54
00:03:21.860 --> 00:03:27.740
So as one equals as two times three what's going to happen is you're going to get ABC NBC ABC and then

55
00:03:27.740 --> 00:03:29.350
it gets assigned to S1.

56
00:03:29.750 --> 00:03:33.790
OK so the last one is the star equal operator.

57
00:03:33.890 --> 00:03:37.480
Here we're going to repeat the string on the left hand side and times.

58
00:03:37.550 --> 00:03:38.520
So it's really simple.

59
00:03:38.520 --> 00:03:46.220
So if one is ABC then as one star equal forgives me for ABC is not five minutes we're not really assigning

60
00:03:46.220 --> 00:03:47.640
back to the original S-1.

61
00:03:47.690 --> 00:03:49.920
If you want to do that that would be perfectly fine.

62
00:03:49.970 --> 00:03:54.830
But in this case it's really easy to think you know repeat as one four times and story right back in

63
00:03:54.830 --> 00:03:55.720
as one.

64
00:03:55.760 --> 00:03:57.080
So it's pretty handy.

65
00:03:57.080 --> 00:04:01.880
And then the last operators we're talking about are the increment and decrement operators.

66
00:04:01.910 --> 00:04:05.570
I haven't really talked about them too much in this class but I'll talk about them now.

67
00:04:05.720 --> 00:04:11.930
And the idea here is that remember these are increment and decrement operators and we have pre and post

68
00:04:11.930 --> 00:04:14.290
versions of each one.

69
00:04:14.360 --> 00:04:17.500
Now assuming that we've got member versions and that's what I'm talking about here.

70
00:04:17.540 --> 00:04:21.350
Member method versions of these these are the semantics for this.

71
00:04:21.410 --> 00:04:23.690
You'll notice we have operator plus plus.

72
00:04:23.810 --> 00:04:29.040
And then we've got operator plus plus with an int that it is not used.

73
00:04:29.090 --> 00:04:33.770
It's not even named It's just a placeholder and the compiler is using that behind the scenes to be able

74
00:04:33.770 --> 00:04:38.600
to tell the difference between these two prototypes if you will because otherwise they'd be exactly

75
00:04:38.600 --> 00:04:40.710
the same and it would know which one to call.

76
00:04:40.880 --> 00:04:43.840
So this guy right here is the pre-increment.

77
00:04:44.120 --> 00:04:47.450
And the way that this works is the semantics are really clear.

78
00:04:47.450 --> 00:04:48.470
You do whatever you want.

79
00:04:48.470 --> 00:04:49.540
Increment to do.

80
00:04:49.700 --> 00:04:54.640
I'm making it make all the characters uppercase in the in the current object.

81
00:04:54.800 --> 00:05:00.890
And then you return this because you're actually modifying that object before you go back to the caller

82
00:05:00.900 --> 00:05:01.070
right.

83
00:05:01.130 --> 00:05:03.200
That's what pre-increment does.

84
00:05:03.230 --> 00:05:06.630
Now the semantics for post-increment are a little bit different.

85
00:05:06.630 --> 00:05:10.590
And let me just scroll up just a little here so you could probably see it a little more clearly.

86
00:05:10.610 --> 00:05:11.750
Here we go.

87
00:05:11.930 --> 00:05:16.490
Now the semantics for the post-increment are a little bit different we need to make a copy of what we've

88
00:05:16.490 --> 00:05:17.510
got now.

89
00:05:17.870 --> 00:05:20.790
Then we call operator plus plus.

90
00:05:20.810 --> 00:05:23.100
Notice that this doesn't have an int in there right.

91
00:05:23.120 --> 00:05:28.190
So we're calling pre-increment that's really important if you call post-increment you end up with the

92
00:05:28.190 --> 00:05:31.420
recursive loop here and you're never going to get out of there.

93
00:05:31.850 --> 00:05:33.870
So what we're doing is we're incrementing.

94
00:05:33.950 --> 00:05:38.360
We're doing a pre-increment and then we're returning this temporary object that we save which is the

95
00:05:38.360 --> 00:05:39.690
old copyright.

96
00:05:39.950 --> 00:05:43.130
And that's exactly what the the whole idea with post-increment means.

97
00:05:43.130 --> 00:05:45.000
So that's the semantics of that.

98
00:05:45.530 --> 00:05:47.870
And then the rest is pretty straightforward.

99
00:05:47.870 --> 00:05:51.630
Have fun Think of some of other operators that might be useful.

100
00:05:51.650 --> 00:05:53.750
It doesn't matter if they make sense or not.

101
00:05:53.750 --> 00:05:58.700
This is all about learning how to overload operators so be as crazy and creative as you want to be.

102
00:05:58.790 --> 00:06:04.910
Some hints take advantage of the Stood string compare function for the equality operators remember that

103
00:06:04.910 --> 00:06:10.010
guy returns zero with they're equal negative something or positive something if they're greater than

104
00:06:10.010 --> 00:06:10.700
or less than that.

105
00:06:10.730 --> 00:06:13.630
You guys look that up so you can learn about it.

106
00:06:13.640 --> 00:06:18.760
Another thing is the plus equal and star equals operators should return a ref.

107
00:06:18.850 --> 00:06:23.920
And that's really important because we want to be a big chain and we don't want extra copies.

108
00:06:24.180 --> 00:06:30.400
Finally when you're doing plus equal On-Star equal rather than duplicate all your code again use plus

109
00:06:30.400 --> 00:06:34.140
since Daryn we've already used those operators we've already implemented them.

110
00:06:34.400 --> 00:06:40.790
And if you do that these operators when you go to overlay of these operators right here the code really

111
00:06:40.790 --> 00:06:44.600
becomes almost trivial just that a line or two of code is really really straightforward.

112
00:06:44.630 --> 00:06:50.300
One more thing I want to mention is when you do your increment and decrement operators make sure that

113
00:06:50.330 --> 00:06:58.590
the pre-increment right here returns a ref and make sure that the post-increment does not return a ref

114
00:06:58.580 --> 00:07:02.270
it should return a string by value.

115
00:07:02.630 --> 00:07:03.010
OK.

116
00:07:03.020 --> 00:07:04.270
So that's basically it.

117
00:07:04.280 --> 00:07:09.830
Let me go over the my string class so that you can see where you're the starting point is this should

118
00:07:09.830 --> 00:07:15.800
be really familiar now after this section of my string class you can see that I overloaded the insertion

119
00:07:15.800 --> 00:07:19.430
and extraction operators as friend functions.

120
00:07:19.850 --> 00:07:24.560
Here's my string class and it's got nothing that you wouldn't expect right it's got all the constructors.

121
00:07:24.650 --> 00:07:29.690
The move constructor the assignment operator is both the copy and the move and your getters and your

122
00:07:29.690 --> 00:07:34.460
display you should even have to use display anymore because now we've got this guy right here.

123
00:07:35.410 --> 00:07:35.880
OK.

124
00:07:36.030 --> 00:07:37.280
So that's about it.

125
00:07:37.290 --> 00:07:41.120
If you look at implementation again it's exactly like we've done in class.

126
00:07:41.160 --> 00:07:47.070
One thing that I have done is I've commented out these output statements using copy assignment using

127
00:07:47.070 --> 00:07:51.750
move assignments but I left them in there in case you want to comment them and trace your code or you

128
00:07:51.750 --> 00:07:53.720
can use a debugger to trace the code.

129
00:07:53.730 --> 00:07:55.310
I'll leave that up to you.

130
00:07:55.440 --> 00:08:00.600
The last thing is here's the main here's a real sample main and I've commented the entire main out so

131
00:08:00.600 --> 00:08:03.840
that you can uncomment as you go or create your own test cases.

132
00:08:03.840 --> 00:08:07.230
And here's some simple test cases for this by no means.

133
00:08:07.230 --> 00:08:12.190
These are exhaustive but they'll certainly begin to test for your overloaded operators.

134
00:08:12.300 --> 00:08:14.230
So let me go through a couple of them.

135
00:08:14.250 --> 00:08:16.350
You can see right here I've got a string a frank.

136
00:08:16.350 --> 00:08:16.980
I've got a string.

137
00:08:16.980 --> 00:08:17.830
Be frank there.

138
00:08:17.840 --> 00:08:19.310
They're the same string right.

139
00:08:19.500 --> 00:08:22.050
So in this case I'm comparing a to b.

140
00:08:22.230 --> 00:08:28.440
I expect that to be true since they're both Frank and I'm asking is a not equal to be well that's false

141
00:08:28.440 --> 00:08:29.580
because they are equal right.

142
00:08:29.580 --> 00:08:34.150
So what you see over here in the comments is what I expect as output.

143
00:08:34.200 --> 00:08:39.060
Now we create B is George you remember a still Frank R and B equal.

144
00:08:39.060 --> 00:08:40.380
No they're not.

145
00:08:40.890 --> 00:08:42.060
Is not equal to B.

146
00:08:42.060 --> 00:08:43.660
That's correct.

147
00:08:43.670 --> 00:08:44.730
Is a less than B.

148
00:08:44.760 --> 00:08:47.940
Well Frank B is George the F comes before the g.

149
00:08:47.940 --> 00:08:51.350
So this is true is a greater than B this is false.

150
00:08:51.360 --> 00:08:52.860
You get the idea.

151
00:08:52.890 --> 00:08:56.580
So these are just some sample test cases that you can use along the way.

152
00:08:56.580 --> 00:09:01.500
And then I've got some other ones that are testing the negation operator right here that you remind

153
00:09:01.510 --> 00:09:01.900
us.

154
00:09:01.920 --> 00:09:02.130
Right.

155
00:09:02.130 --> 00:09:07.760
So this one is frank and then I'm just saying as one equals minus S1 which makes s one lowercase.

156
00:09:07.770 --> 00:09:14.160
So when I output it I expect Frank in lowercase there's my concatenation operator right now Frank is

157
00:09:14.160 --> 00:09:15.480
lowercase that's s want.

158
00:09:15.480 --> 00:09:17.820
I'm just adding a bunch of Astor's to the end.

159
00:09:18.090 --> 00:09:18.840
Displaying it.

160
00:09:18.840 --> 00:09:20.580
That's what I expect.

161
00:09:20.580 --> 00:09:25.710
I'm doing it again but this time I'm using plus equal which just means add these dashes to the left

162
00:09:25.710 --> 00:09:28.440
hand side with the left hand side is this guy right here.

163
00:09:28.440 --> 00:09:30.910
So you can see the dashes being added right here.

164
00:09:32.400 --> 00:09:37.010
OK here's another example as to is 1 2 3 4 5.

165
00:09:37.100 --> 00:09:41.670
And what this says is repeat as two three times and then store it into S1.

166
00:09:41.840 --> 00:09:47.600
So when I display S1 I'm seeing one two three four five one two three four five one two three four five

167
00:09:47.600 --> 00:09:48.470
three times.

168
00:09:50.550 --> 00:09:54.600
And I think there's a couple of more test cases down here that we can talk about.

169
00:09:54.810 --> 00:10:00.810
And again I encourage you to come up with your own test cases and read some tests that really test this

170
00:10:00.810 --> 00:10:04.160
and exercise the code so you can be sure that it's working correctly.

171
00:10:04.620 --> 00:10:12.140
Here's another one as three is a B C D E F and the semantics of this one just says hey repeat with whatever's

172
00:10:12.150 --> 00:10:12.660
on the left.

173
00:10:12.660 --> 00:10:13.410
Five times.

174
00:10:13.410 --> 00:10:15.620
So whatever's on the left is ABC.

175
00:10:15.680 --> 00:10:22.070
So we're going one two three four and five.

176
00:10:22.150 --> 00:10:24.450
Now here's some tests with the increment operator.

177
00:10:24.490 --> 00:10:26.140
I haven't done the decrement operator.

178
00:10:26.140 --> 00:10:27.930
I'll leave that totally up to you.

179
00:10:27.940 --> 00:10:32.860
We already have a minus that makes it lowercase but you could do whatever you like remember where we're

180
00:10:32.860 --> 00:10:34.550
programmers we can do anything.

181
00:10:34.570 --> 00:10:37.990
So you can make that decrement operator behave how you like.

182
00:10:37.990 --> 00:10:39.560
So let's take a look at this.

183
00:10:39.610 --> 00:10:43.080
My string is frank and then I'm doing an increment.

184
00:10:43.090 --> 00:10:44.360
In this case a pre-increment.

185
00:10:44.380 --> 00:10:52.030
Remember when we have any when we have plus plus S or S plus plus all alone on a line and Zachery the

186
00:10:52.030 --> 00:10:54.700
same thing read the previous post don't mean much.

187
00:10:54.700 --> 00:10:56.020
It's just increments.

188
00:10:56.200 --> 00:11:03.320
So in this case you can see as is Frank with a capital F that I'm saying pre-increment asks.

189
00:11:03.340 --> 00:11:09.630
At this point when I output as I expect all uppercase characters which is what our semantics say over

190
00:11:09.640 --> 00:11:14.070
here I'm decrementing us using every minus I'm putting it right back to lowercase.

191
00:11:14.200 --> 00:11:15.080
You could make.

192
00:11:15.280 --> 00:11:20.450
You could do something like minus minus s if you like to do the same thing as the minus plot.

193
00:11:20.540 --> 00:11:22.550
Again I'll leave that up to you guys.

194
00:11:22.750 --> 00:11:26.690
And now I've got result in here and same result.

195
00:11:29.350 --> 00:11:39.640
Plus equal sorry pre-increment s and remember right now is Frank lowercase that's what s is.

196
00:11:39.750 --> 00:11:45.060
So I want to pre-increment as that means I want to make as uppercase and then assign it as with the

197
00:11:45.060 --> 00:11:48.360
pre-increment does make as uppercase then assign it.

198
00:11:48.360 --> 00:11:53.500
So when I display both those values I expect them both to be uppercase and that's what's happening here

199
00:11:54.800 --> 00:11:59.510
and let me scroll up just a little bit read her on line 54.

200
00:11:59.710 --> 00:12:02.760
And in this case we're doing a post-increment.

201
00:12:02.770 --> 00:12:06.970
Again here it's the same as the pre-increment so I expect Frank to be uppercase.

202
00:12:07.000 --> 00:12:17.510
Now I make Frank lowercase again so as is Frank in lowercase and what we're doing as result equals s

203
00:12:17.870 --> 00:12:18.990
post-increment.

204
00:12:19.190 --> 00:12:24.340
So what we do is first we assign s over to result then we increment S..

205
00:12:24.350 --> 00:12:28.190
So when I sign as over two result result should be lower case Frank.

206
00:12:28.240 --> 00:12:29.720
You can see it is right here.

207
00:12:30.560 --> 00:12:36.100
And as should be now uppercase Frank because I just moved it over.

208
00:12:36.140 --> 00:12:39.450
OK so there you go that's a quick intro to the challenge.

209
00:12:39.470 --> 00:12:41.060
This could be a pretty long challenge.

210
00:12:41.060 --> 00:12:44.560
Take it one step at a time do the operators do the easy ones first.

211
00:12:44.630 --> 00:12:48.360
I would suggest to you the quality operators first because they're pretty straightforward.

212
00:12:48.650 --> 00:12:52.790
And then make sure that you do your star operator which means repeat.

213
00:12:52.790 --> 00:12:58.860
In this case and your concatenation operator do those before you do plus equal and start equal.

214
00:12:58.880 --> 00:13:04.170
That way you can take advantage of them and really make the code much much simpler.

215
00:13:04.300 --> 00:13:10.240
OK so I'll be back have a go at this and when you're done you can come back and solution one will be

216
00:13:10.240 --> 00:13:17.500
the version where we've got member methods and solution 2 is the version where we've got nonmember methods

217
00:13:17.530 --> 00:13:20.860
or basically an on member functions global functions.

218
00:13:20.860 --> 00:13:21.930
All right so have fun.

219
00:13:21.940 --> 00:13:22.380
Good luck.
