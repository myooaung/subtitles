WEBVTT
1
00:00:05.240 --> 00:00:12.290
In this video I'd like to go over the basics of algorithms in the standard template library the ACL

2
00:00:12.420 --> 00:00:19.680
algorithms work on sequences of elements that are obtained from as T.L. containers using iterators.

3
00:00:19.830 --> 00:00:22.370
It's really a beautifully designed library.

4
00:00:22.500 --> 00:00:25.930
The SBL has many common and useful algorithms.

5
00:00:26.040 --> 00:00:30.390
Once you learn how to use them you'll keep coming back to them over and over again.

6
00:00:30.420 --> 00:00:36.120
There are many algorithms and the algorithms themselves have many variants way too much to describe

7
00:00:36.120 --> 00:00:38.280
in a single section of a course.

8
00:00:38.310 --> 00:00:39.950
I'll go over some useful algorithms.

9
00:00:39.960 --> 00:00:46.100
But more importantly I'll teach you the techniques involved so that you can use any FCL algorithm you

10
00:00:46.100 --> 00:00:52.340
can refer to online references such as C-p reference dot com for details about the entire algorithms

11
00:00:52.340 --> 00:00:53.420
library.

12
00:00:53.510 --> 00:00:59.150
Many of the algorithms in the ACL require the programmer to provide extra information in order for them

13
00:00:59.150 --> 00:01:00.140
to work.

14
00:01:00.140 --> 00:01:04.690
For example suppose we want to display all the even numbers in a container.

15
00:01:05.030 --> 00:01:10.130
We can use an algorithm called for each that will apply a function to each element in the container

16
00:01:10.820 --> 00:01:14.760
but it depends on the program are providing that function.

17
00:01:14.810 --> 00:01:19.420
So there are three main ways in the SPL to provide such information to algorithms.

18
00:01:19.610 --> 00:01:25.370
They are functors or function objects function pointers and lambda expressions.

19
00:01:25.370 --> 00:01:27.500
I'll show you a simple example of each.

20
00:01:27.500 --> 00:01:32.470
So you know them but I'll be using lambda expressions for the examples in this section.

21
00:01:32.480 --> 00:01:35.080
You should also use lambda expressions in your code.

22
00:01:35.210 --> 00:01:39.180
Since this is how to do it going forward in modern C plus plus.

23
00:01:39.340 --> 00:01:43.870
So what do these algorithms look like and how do we use them.

24
00:01:43.870 --> 00:01:48.850
We saw a simple example of using the accumulate algorithm a few videos back.

25
00:01:48.850 --> 00:01:54.650
But in this video I want to show you a few more and then will code some in the ID first in order to

26
00:01:54.650 --> 00:01:59.100
use the FCL algorithms we must include the algorithms header file.

27
00:01:59.120 --> 00:02:04.790
It's also important to understand that different containers support different types of algorithms and

28
00:02:04.790 --> 00:02:10.040
since algorithms depend on iterators this determines the types of out rhythms we can use with certain

29
00:02:10.040 --> 00:02:11.320
containers.

30
00:02:11.330 --> 00:02:14.240
I know this sounds complicated but it's really not so bad.

31
00:02:14.390 --> 00:02:19.210
As you become more experienced with the SPL it all becomes second nature.

32
00:02:20.060 --> 00:02:26.150
So before I show you some examples of ASL algorithms in action let's talk about iterator invalidation

33
00:02:27.210 --> 00:02:29.130
this topic can get quite complex.

34
00:02:29.130 --> 00:02:31.770
But let's look at it in its simplest terms.

35
00:02:31.950 --> 00:02:38.100
We know that iterators point to container elements we need to understand that it's possible that an

36
00:02:38.100 --> 00:02:41.700
iterator may become invalid during processing.

37
00:02:41.730 --> 00:02:44.170
Let's see a very obvious example.

38
00:02:44.190 --> 00:02:48.990
Suppose we have an iterator and we're iterating over the elements of a vector and displaying the elements

39
00:02:48.990 --> 00:02:50.310
as we go.

40
00:02:50.430 --> 00:02:54.400
Then as we're doing this we call the vectors clear method.

41
00:02:54.500 --> 00:03:00.210
This deletes all of the elements from the vector but the iterator doesn't know that the iterator will

42
00:03:00.210 --> 00:03:03.710
happily continue iterating until it sees the end of the vector.

43
00:03:03.720 --> 00:03:10.950
But this is no longer valid if something like this happens then the behavior is undefined in C++ Every

44
00:03:11.010 --> 00:03:16.320
as T.L. container has documentation about when iterators become invalid.

45
00:03:16.380 --> 00:03:21.140
We don't worry too much about it in this section but it's something to be aware of as you move onto

46
00:03:21.150 --> 00:03:25.220
more advances T.L. work after this course.

47
00:03:25.220 --> 00:03:28.330
OK so let's see some examples of FCL algorithms.

48
00:03:28.340 --> 00:03:34.510
First let's look at the find function the find algorithm tries to locate the first occurrence of an

49
00:03:34.510 --> 00:03:38.190
element in a container like most as T.L. algorithms.

50
00:03:38.200 --> 00:03:41.820
There are many variants available so let's keep it simple.

51
00:03:41.950 --> 00:03:47.310
If the function finds the element it returns an iterator that points to the element it just found.

52
00:03:47.680 --> 00:03:53.070
If the function does not find the element it will return an iterator pointing to the end of the container.

53
00:03:53.080 --> 00:03:54.300
Pretty simple.

54
00:03:54.400 --> 00:03:56.500
So let's see this in code.

55
00:03:56.500 --> 00:04:01.960
First we declare a vector of integers we'll call it Veck and we initialize it to the integers 1 2 and

56
00:04:01.960 --> 00:04:09.500
3 we then call stood find and pass in the iterators we need to get the sequence of elements we want.

57
00:04:09.500 --> 00:04:12.470
After that we pass in the element we want to find.

58
00:04:12.470 --> 00:04:18.150
In this case we call find with Venkat began vector and end three.

59
00:04:18.260 --> 00:04:24.400
So we want to find three and we want to search the entire vector the result of the function will be

60
00:04:24.400 --> 00:04:30.780
stored in a variable EHLO see I'm using auto to let the compiler deduce the type of ellos.

61
00:04:31.000 --> 00:04:34.920
But you know what it must be an iterator to a vector of integers.

62
00:04:35.170 --> 00:04:36.040
That's it.

63
00:04:36.040 --> 00:04:42.880
Now we can check the value of EHLO C and if it's not vector end we know EHLO C's pointing to the first

64
00:04:42.880 --> 00:04:46.060
occurrence of 3 and we can do whatever we want with it.

65
00:04:46.060 --> 00:04:47.680
In this case I'm just displaying it.

66
00:04:47.890 --> 00:04:49.550
OK so let's take a breath here.

67
00:04:49.550 --> 00:04:51.750
Understand the power we have.

68
00:04:52.000 --> 00:04:55.470
We just found the first occurrence of an element in a vector.

69
00:04:55.470 --> 00:04:59.410
What if we wanted to find the first occurrence in a list or another type of container.

70
00:04:59.680 --> 00:05:01.710
It works exactly the same way.

71
00:05:01.720 --> 00:05:03.610
That's the power I'm talking about.

72
00:05:03.610 --> 00:05:08.980
We don't need to know the details about how the container is implemented or how complicated fighting

73
00:05:09.040 --> 00:05:11.280
element might be behind the scenes.

74
00:05:12.570 --> 00:05:18.840
Remember find needs to be able to compare two elements in order to see if they're the same in order

75
00:05:18.840 --> 00:05:19.710
to do this.

76
00:05:19.740 --> 00:05:24.050
It will use the equality operator for primitive types like ants.

77
00:05:24.090 --> 00:05:27.860
We don't have to do a thing since the compiler knows how to compare primitive types.

78
00:05:28.810 --> 00:05:34.840
But if we're using our own user defined objects in containers then we must provide the overloaded equality

79
00:05:34.840 --> 00:05:38.980
operator for objects since that's what the algorithm will call.

80
00:05:39.160 --> 00:05:42.970
In this case you can see we have a vector of player objects.

81
00:05:42.970 --> 00:05:48.970
Let's assume it's initialized to a bunch of players and we define P to be the player we want to find

82
00:05:48.970 --> 00:05:50.200
in the vector.

83
00:05:50.200 --> 00:05:52.330
Notice the code for the find function.

84
00:05:52.330 --> 00:05:55.530
It looks the same as for any except for the P.

85
00:05:55.660 --> 00:06:01.270
The only difference is that the compiler will compare P to the container elements using the overloaded

86
00:06:01.270 --> 00:06:05.220
equality operator that you must provide in the player class.

87
00:06:05.320 --> 00:06:10.810
Also we can define what equality means we might want all player attributes to match or only the name

88
00:06:10.810 --> 00:06:15.930
or only the expwy we have all the power to decide.

89
00:06:15.940 --> 00:06:20.680
Now let's look at a more complex algorithm for each function.

90
00:06:20.680 --> 00:06:24.800
This function applies a function to each element in the iterator sequence.

91
00:06:25.060 --> 00:06:29.250
OK but what function does it apply whatever function you tell it to apply.

92
00:06:29.320 --> 00:06:30.530
That's pretty cool.

93
00:06:30.880 --> 00:06:34.350
So how do we provide this function to the for each function.

94
00:06:34.360 --> 00:06:39.910
There are three ways and I'll show you each way in the following slides we can use functors function

95
00:06:39.910 --> 00:06:45.880
pointers and lambda expressions functors and function pointers have been around since the beginning

96
00:06:45.880 --> 00:06:51.070
of the as T.L. lambda expressions were added in C++ 11.

97
00:06:51.340 --> 00:06:54.820
And they're really the way to go in modern C++.

98
00:06:54.820 --> 00:07:00.230
So let's write a for each function that displays the square of each integer element in the vector.

99
00:07:00.250 --> 00:07:03.460
First let's do it with a functor.

100
00:07:03.460 --> 00:07:07.690
In this slide we'll see how we can use a functor or function object.

101
00:07:07.870 --> 00:07:10.060
But let's start at the bottom first.

102
00:07:10.270 --> 00:07:16.160
In the last statement we're using it for each function and providing the iterator parameters as usual.

103
00:07:16.210 --> 00:07:19.150
So this will iterate over the entire vector vec.

104
00:07:19.460 --> 00:07:19.890
OK.

105
00:07:19.900 --> 00:07:23.080
Now look at the last parameter Square.

106
00:07:23.080 --> 00:07:28.690
In this case Square is an object a function object of type square functor.

107
00:07:28.690 --> 00:07:34.530
You can see where I created the square object in red type and square functor is a structure.

108
00:07:34.630 --> 00:07:37.930
It can also be a class that has a single public method.

109
00:07:37.930 --> 00:07:39.830
I know this might look a little strange.

110
00:07:39.940 --> 00:07:44.180
The method that's being overloaded is the function call operator.

111
00:07:44.260 --> 00:07:46.620
That's the open and closed parentheses.

112
00:07:46.870 --> 00:07:48.680
It expects a single item.

113
00:07:48.820 --> 00:07:52.870
That's the same type as the elements in the container we're processing.

114
00:07:53.110 --> 00:07:57.850
And in this case it executes the code for each integer passed into it.

115
00:07:58.420 --> 00:08:02.150
OK I know this sounds pretty complicated but let's walk through it.

116
00:08:02.170 --> 00:08:07.960
We're going to iterate through each element in the vector and in each iteration the overloaded function

117
00:08:07.960 --> 00:08:13.510
call operator function for the square object will be called and the current container element is passed

118
00:08:13.510 --> 00:08:14.390
to it.

119
00:08:14.440 --> 00:08:19.360
In this case we'll call square and each container element will display.

120
00:08:19.360 --> 00:08:24.210
So in this case we get 1 4 9 and 16 since they're squared.

121
00:08:24.220 --> 00:08:28.300
Note that the original container elements are not modified.

122
00:08:28.300 --> 00:08:34.440
Now let's do the same thing but using function pointers instead of a functor.

123
00:08:34.480 --> 00:08:36.400
Again let's start at the bottom.

124
00:08:36.400 --> 00:08:40.530
Notice that the code for the for each algorithm is exactly the same.

125
00:08:40.810 --> 00:08:47.470
But in this case the square parameter is not a function object it's the name of a regular function and

126
00:08:47.470 --> 00:08:53.800
we declared that function at the top of the slide and read what's being passed into the for each function

127
00:08:54.190 --> 00:09:00.490
is a pointer to the square function which is really the address of the function square itself.

128
00:09:00.490 --> 00:09:06.550
So at each iteration of the for each loop the square function will be called in the current container

129
00:09:06.550 --> 00:09:08.230
element passed into it.

130
00:09:08.230 --> 00:09:13.720
So we get the same output as with the functor 1 4 9 and 16.

131
00:09:13.750 --> 00:09:16.930
Notice that we only use the function name as the parameter.

132
00:09:16.930 --> 00:09:20.440
We don't place parentheses after it says that would call the function.

133
00:09:20.440 --> 00:09:22.000
That's not what we want.

134
00:09:22.000 --> 00:09:27.520
Finally in the next slide we use a lambda expression to accomplish the same thing.

135
00:09:28.420 --> 00:09:34.720
In this example we use the lambda expression directly in the function call lambda expressions were introduced

136
00:09:34.720 --> 00:09:39.480
in C++ 11 as I said and they're widely used in modern C++.

137
00:09:40.000 --> 00:09:45.390
If you come from another language you may know them as lambdas closures blocks or anonymous functions.

138
00:09:45.490 --> 00:09:47.680
It's basically all the same.

139
00:09:47.830 --> 00:09:52.250
First notice that we have no other code except the call to the for each algorithm.

140
00:09:52.780 --> 00:09:58.720
One of the benefits of lambda expressions is that we can define them right where they're being used.

141
00:09:58.720 --> 00:10:01.360
The first part of the for each function is the same.

142
00:10:01.360 --> 00:10:05.490
We're providing our iterators the last parameter is what changes.

143
00:10:05.500 --> 00:10:12.070
In this case we're using a lambda expression the syntax of the land expression will become more clear

144
00:10:12.070 --> 00:10:13.400
with time and practice.

145
00:10:13.630 --> 00:10:19.300
But it consists of a pair of square brackets followed by the parameters that will be passed into the

146
00:10:19.300 --> 00:10:22.010
lambda expression in parentheses.

147
00:10:22.480 --> 00:10:25.860
In this case a single integer which will name x.

148
00:10:26.110 --> 00:10:28.790
Then this is followed by the body of execute.

149
00:10:28.930 --> 00:10:29.740
That's it.

150
00:10:29.740 --> 00:10:32.340
It's really pretty easy and all in one place.

151
00:10:32.380 --> 00:10:38.290
So we know exactly what's happening in each iteration by looking right in the function call.

152
00:10:38.320 --> 00:10:43.060
I'll go over a couple of other SCEA algorithms and I'll use lambda expressions and walk through them

153
00:10:43.060 --> 00:10:44.490
and the next.

154
00:10:44.650 --> 00:10:46.540
So let's head over there in the next video.
