WEBVTT
1
00:00:05.450 --> 00:00:06.420
Welcome back.

2
00:00:06.680 --> 00:00:10.400
So we've learned how to overload the copy and move assignment operators.

3
00:00:10.400 --> 00:00:14.340
Now let's look at some of the other operators in C++ lets us overload.

4
00:00:14.720 --> 00:00:20.930
C++ allows us to overload operators as member methods or as global nonmember functions.

5
00:00:20.930 --> 00:00:25.910
In this video we'll use member methods to overload operators and in the next video who overload the

6
00:00:25.910 --> 00:00:28.700
same operators using global functions.

7
00:00:28.700 --> 00:00:33.650
So let's start with the operators unitary operators work on one operand.

8
00:00:33.650 --> 00:00:39.870
Those operators include the increment decrement unitary negation and the bag or not operator.

9
00:00:40.280 --> 00:00:45.410
Notice the basic method declaration in bold in the case that we have to return a new object from the

10
00:00:45.410 --> 00:00:48.730
method will return the new object by value.

11
00:00:48.740 --> 00:00:52.670
Also notice that you remember methods have an empty parameter list.

12
00:00:52.670 --> 00:00:56.740
This is because the object we're working with is referred to by the this pointer.

13
00:00:57.230 --> 00:01:00.200
So here you can see the prototypes for the operators.

14
00:01:00.230 --> 00:01:03.650
If we wanted them to work with our hypothetical number class.

15
00:01:03.710 --> 00:01:09.680
Also notice that we can overload both the pre and post decrement and increment operators C++ simply

16
00:01:09.680 --> 00:01:14.140
provides an int that is it used in the parameters for the post-increment at the bottom of the slide

17
00:01:14.150 --> 00:01:19.250
you can see how we can use the operators as we do with the built in types and what methods are being

18
00:01:19.250 --> 00:01:20.840
called in the comments section.

19
00:01:22.680 --> 00:01:28.080
Suppose we wanted to overload the U.N.-Arab minus operator to work with are my string class and we want

20
00:01:28.080 --> 00:01:30.480
to make the stream lowercase whenever it's used.

21
00:01:30.480 --> 00:01:37.190
So we can create a mystery object named Larry one with the initializer string uppercase Larry.

22
00:01:37.260 --> 00:01:42.670
Then we can use the minus operator on Larry one and store the result in Larry 2.

23
00:01:42.690 --> 00:01:48.360
Now Larry 1 will still contain the upper case Larry string but Larry 2 will contain the lower case Larry

24
00:01:48.360 --> 00:01:49.200
string.

25
00:01:49.200 --> 00:01:53.490
This is a simple example of unitary operator overloading using member methods.

26
00:01:53.490 --> 00:01:58.980
However the question is whether this makes sense where programmers we can make anything happen in code.

27
00:01:58.980 --> 00:02:03.710
Does it make sense for the minus operator to mean make the string lower case.

28
00:02:03.720 --> 00:02:07.200
It depends on the context of the application and the design.

29
00:02:07.200 --> 00:02:13.080
Personally I'd prefer a method named lowercase or lower cased or to lower since that's very explicit

30
00:02:13.380 --> 00:02:15.690
but this might make sense in another design.

31
00:02:15.690 --> 00:02:18.480
Let's see how the code might look.

32
00:02:19.080 --> 00:02:23.990
Here's the code for overloading the unit minus to make a string lowercase.

33
00:02:24.000 --> 00:02:29.730
Notice the method header where returning a new object that will be the lower case copy of the existing

34
00:02:29.730 --> 00:02:36.990
object were overloading the operator minus We expect no parameters to this method and it's a Konst method

35
00:02:36.990 --> 00:02:39.450
since we don't want to modify the current object.

36
00:02:39.450 --> 00:02:42.050
We want to create a new object based on it.

37
00:02:42.210 --> 00:02:46.770
So the first thing we do is allocate space for an area in memory on the heap where we want to store

38
00:02:46.770 --> 00:02:50.520
the lowercase copy of the current object string.

39
00:02:50.670 --> 00:02:54.510
Then we use the Stood string copy function to copy the string over.

40
00:02:54.600 --> 00:02:59.910
Then we simply loop through the characters in the copy and convert each character to its lowercase equivalent

41
00:03:00.300 --> 00:03:04.160
using the character function to lower in the CC type header file.

42
00:03:05.090 --> 00:03:10.730
Once we have the buffer lowercase then we construct a temporary string object using this lowercase string

43
00:03:10.910 --> 00:03:12.350
as the initializer.

44
00:03:12.350 --> 00:03:17.390
Finally we delete the buffer we created in this method so we don't leak memory and we return the newly

45
00:03:17.390 --> 00:03:19.660
created lowercase object.

46
00:03:19.760 --> 00:03:24.500
We could certainly get more optimized code here but I wrote this method to show each step explicitly

47
00:03:25.040 --> 00:03:29.510
So that's the general pattern for overloading a unitary operator using a member method.

48
00:03:29.510 --> 00:03:36.800
Now let's see how we can implement some binary operators also using member methods as we know binary

49
00:03:36.800 --> 00:03:39.200
operators are applied to two operands.

50
00:03:39.200 --> 00:03:44.730
These operators include addition multiplication division the quality operators and many more.

51
00:03:44.760 --> 00:03:49.810
The pattern for overloading these operators is very similar to the way we overloaded you unary operators.

52
00:03:49.920 --> 00:03:53.870
Except that now we have a single parameter in the method parameter list.

53
00:03:54.030 --> 00:03:58.040
I've named this parameter r h s which stands for right hand side.

54
00:03:58.080 --> 00:04:03.690
That way it's very clear that r h s refers to the parameter on the right hand side of the operator and

55
00:04:03.690 --> 00:04:08.190
the pointer points to the object on the left hand side of the operator.

56
00:04:08.220 --> 00:04:13.440
Notice the overloaded addition and subtraction operators return the newly created some or different

57
00:04:13.500 --> 00:04:15.030
objects by value.

58
00:04:15.600 --> 00:04:20.730
Also notice that the quality operators return boolean values which makes sense since they're comparing

59
00:04:20.730 --> 00:04:26.310
things you can see in the bottom of the slide how these operators might be used in a hypothetical number

60
00:04:26.310 --> 00:04:27.630
class.

61
00:04:27.630 --> 00:04:32.400
Now let's see how we can implement the equality operator in my string class.

62
00:04:33.090 --> 00:04:35.060
In the case of my string objects.

63
00:04:35.070 --> 00:04:37.960
We want to compare the strings to see if they're the same.

64
00:04:38.010 --> 00:04:39.420
We don't want to compare the pointers.

65
00:04:39.420 --> 00:04:43.200
Instead we want to compare the strings that the pointers point to.

66
00:04:43.200 --> 00:04:48.690
Rather than write all the code ourselves we can use the Stood string compare function in the C string

67
00:04:48.690 --> 00:04:55.230
header file which compares C-style strings exactly as we need when we call that function with two C-style

68
00:04:55.230 --> 00:04:58.430
strings that will return 0 if the strings are equal.

69
00:04:58.740 --> 00:05:01.570
So this method becomes almost trivial to implement.

70
00:05:01.740 --> 00:05:06.750
We compare as TR from this object to SC or from the right hand side object.

71
00:05:06.750 --> 00:05:08.970
And if the result is zero we return true.

72
00:05:08.970 --> 00:05:10.540
Otherwise we return false.

73
00:05:10.560 --> 00:05:11.580
That's it.

74
00:05:11.580 --> 00:05:18.600
Now we can write code like if s one equals as two to compare to my string objects for equality.

75
00:05:18.600 --> 00:05:23.790
What if we wanted to write an overloaded equality operator for the player class well we'd have to decide

76
00:05:23.790 --> 00:05:25.280
what we want to compare.

77
00:05:25.290 --> 00:05:30.180
Are we comparing the names of two objects or the health or the XP or everything.

78
00:05:30.180 --> 00:05:34.680
This would be an important decision and the program is using the player class would have to be clear

79
00:05:34.680 --> 00:05:36.120
as to what's being compared.

80
00:05:36.120 --> 00:05:38.420
So they can use it correctly.

81
00:05:38.430 --> 00:05:43.280
Now let's wrap up the slides by overloading the addition operator for the my string class.

82
00:05:43.290 --> 00:05:48.600
Suppose we wanted to overload the binary plus operator for the my string class so that it concatenates

83
00:05:48.600 --> 00:05:53.700
the strings from the left hand side and right hand side objects into a new object.

84
00:05:53.700 --> 00:05:56.350
Then we could use this as in the example code.

85
00:05:56.580 --> 00:06:02.310
First we can create my string objects Larry and Moe and stooges then we can write a statement like Larry

86
00:06:02.310 --> 00:06:08.220
plus Stooges which will concatenate the string Larry and the string and stooges to create a new string.

87
00:06:08.220 --> 00:06:10.150
Larry is one of the Three Stooges.

88
00:06:11.050 --> 00:06:14.670
Notice that we can also use C-style strings on the right hand side.

89
00:06:14.680 --> 00:06:20.520
This is because we have a string constructor that can construct my string objects from a C-style string.

90
00:06:20.530 --> 00:06:22.120
That's pretty cool.

91
00:06:22.120 --> 00:06:27.550
The only limitation to overloading operators is member functions is that the object on the left hand

92
00:06:27.550 --> 00:06:31.170
side must be an object of the class you're using.

93
00:06:31.180 --> 00:06:36.820
For example the last statement in this slide won't compile since the left hand side operand is not a

94
00:06:37.040 --> 00:06:38.330
String object.

95
00:06:38.380 --> 00:06:43.160
We can get this to work in the next video when we implement operators has nonmember functions.

96
00:06:43.390 --> 00:06:45.980
OK so let's take a look at the code for this method.

97
00:06:47.420 --> 00:06:49.700
It's probably exactly as you would expect.

98
00:06:49.700 --> 00:06:55.190
We allocate a character buffer large enough for both of the strings plus one for the string Terminator

99
00:06:55.580 --> 00:07:01.880
that we allocate this but from the heap first we copy over the left side string withstood string copy

100
00:07:02.210 --> 00:07:06.170
and then we concatenate the right side string withstood string cat.

101
00:07:06.410 --> 00:07:11.810
We create a new object that will contain the concatenated string using the buffer as the initializer.

102
00:07:11.810 --> 00:07:16.700
And then finally we deallocate the local buffer area so we don't leak memory and then we return the

103
00:07:16.700 --> 00:07:18.650
newly created object by value.

104
00:07:18.710 --> 00:07:19.580
You can see that first.

105
00:07:19.610 --> 00:07:24.490
This looks complicated but the more you do it patterns evolve that are very very similar.

106
00:07:24.500 --> 00:07:28.850
Great so let's head over to the idea and implement these operators for the my string class as member

107
00:07:28.850 --> 00:07:29.690
methods.

108
00:07:30.770 --> 00:07:32.810
Case went back in the ID.

109
00:07:32.970 --> 00:07:39.660
I mean the section 14 workspace in the my strained dash operator dasht methods project in this project

110
00:07:39.660 --> 00:07:44.930
what we're going to do is we're going to overload three operator and as member methods.

111
00:07:45.120 --> 00:07:47.750
And the ones we're going to overload are right here.

112
00:07:47.760 --> 00:07:54.780
The equality operator that allows us to compare two objects as we can see here the negation operator

113
00:07:54.780 --> 00:08:01.010
the unary minus operator which in our case we're going to make whatever string we want to negate lowercase.

114
00:08:01.170 --> 00:08:06.270
And finally the concatenation operator will take two string objects and make a bigger string object

115
00:08:06.270 --> 00:08:11.820
from it that contains those two strings put together just like we've done before using the regular string

116
00:08:11.820 --> 00:08:12.440
class.

117
00:08:12.600 --> 00:08:18.300
And you can see we can extend this so we can have Moe plus blank Plus Larry post-playing plus curly

118
00:08:18.300 --> 00:08:20.620
and this is a C style string right here.

119
00:08:20.670 --> 00:08:22.630
So it will be pretty flexible.

120
00:08:22.680 --> 00:08:24.290
OK so why don't we start.

121
00:08:24.420 --> 00:08:27.420
We're going to implement them as member methods.

122
00:08:27.450 --> 00:08:32.870
So let's go to our header file and create our method prototypes here.

123
00:08:32.940 --> 00:08:38.580
In the case of the concatenation and the minus where we're going to make things lowercase we're going

124
00:08:38.580 --> 00:08:40.740
to return my string objects.

125
00:08:40.800 --> 00:08:44.640
So we create a string object and it's going to be returned by value.

126
00:08:44.630 --> 00:08:46.400
We want to create a new object right.

127
00:08:46.410 --> 00:08:48.650
We're going to take those two strings make a new one.

128
00:08:48.660 --> 00:08:49.470
Return it.

129
00:08:49.470 --> 00:08:50.890
We're going to take that one string.

130
00:08:50.910 --> 00:08:53.340
Make it lowercase into a new and return it.

131
00:08:53.340 --> 00:08:56.020
We're not going to change anything that we've got going already.

132
00:08:56.220 --> 00:08:59.580
So let's do the operator minus first.

133
00:08:59.580 --> 00:08:59.990
OK.

134
00:09:00.120 --> 00:09:06.180
So it's you know be the operator overloading again is operator followed by the operator we want which

135
00:09:06.180 --> 00:09:07.710
is minus in this case.

136
00:09:07.980 --> 00:09:09.640
And what are we going to be passing into this.

137
00:09:09.660 --> 00:09:12.180
Nothing that's a unitary operator.

138
00:09:12.180 --> 00:09:15.560
So we've already got what we need and the left side of the dot.

139
00:09:15.900 --> 00:09:21.210
It's important to understand that when we're overloading operators as member methods you unary operators

140
00:09:21.210 --> 00:09:26.760
take no parameters by unary operators take one parameter because this is already a parameter on the

141
00:09:26.760 --> 00:09:27.590
left side.

142
00:09:28.020 --> 00:09:37.220
And we want this to be Konst and this will mean to say make lower case version of the string.

143
00:09:37.230 --> 00:09:37.470
All right.

144
00:09:37.470 --> 00:09:41.330
Now let's do the concatenation operator.

145
00:09:41.370 --> 00:09:47.160
This is a binary operator so we need one parameter in this parameter list and that parameter will be

146
00:09:47.160 --> 00:09:51.540
Konst my string reference and we'll call it right hand side.

147
00:09:51.660 --> 00:09:56.250
Important that it's conc because we really don't want to mess with that.

148
00:09:57.960 --> 00:10:01.230
And then the last one is the equality operator.

149
00:10:01.230 --> 00:10:08.560
It will return a boolean true false value and it will be operator two equal signs.

150
00:10:08.580 --> 00:10:09.580
It's binary.

151
00:10:09.630 --> 00:10:16.270
So it's going to expect a constant five string reference right hand side.

152
00:10:16.590 --> 00:10:19.470
And we want this to be a Consta method as well.

153
00:10:19.530 --> 00:10:22.240
So I don't want to change anything.

154
00:10:22.290 --> 00:10:25.020
Actually I want this one to be Konst as well.

155
00:10:25.110 --> 00:10:25.720
That's it.

156
00:10:25.890 --> 00:10:27.660
So those are the three prototypes.

157
00:10:27.660 --> 00:10:33.390
Now what we'll do is we'll go to the mine string see if our implementation file and will implement those

158
00:10:33.390 --> 00:10:34.810
methods so let's do that now.

159
00:10:36.280 --> 00:10:40.930
OK so going to put them right here right after the overloaded assignment operators.

160
00:10:41.910 --> 00:10:46.310
It why don't we start with the overloaded equality operator.

161
00:10:46.380 --> 00:10:50.110
So that is again bull it returns a boolean.

162
00:10:50.250 --> 00:10:52.530
It's part of my string class.

163
00:10:52.530 --> 00:10:53.880
The name is operator.

164
00:10:54.030 --> 00:11:01.320
Two equal signs and it expects on the right side of my string reference to a constant we'll call it

165
00:11:01.380 --> 00:11:04.720
R H S and the method is a Konst method as well.

166
00:11:05.140 --> 00:11:08.730
OK so what do we do here well we want to compare those two strings right.

167
00:11:08.850 --> 00:11:12.270
The string in this and the string in right hand side.

168
00:11:12.420 --> 00:11:19.020
So all we really need to do is just simply say return and then we can call stood string compare which

169
00:11:19.020 --> 00:11:23.470
is a C string function that compares to see strings which we got.

170
00:11:23.640 --> 00:11:28.510
So as TR is one of them and right hand side that as far as the other one.

171
00:11:29.070 --> 00:11:33.250
And if that returns zero will return the value there.

172
00:11:33.840 --> 00:11:38.990
OK so simple as that we could use an if statement if we like but this works just as well.

173
00:11:39.010 --> 00:11:45.000
So that takes care of that and this will be it see quality.

174
00:11:45.180 --> 00:11:50.260
Now let's do make lower case.

175
00:11:52.350 --> 00:11:56.480
And in this case we're returning a string object by value.

176
00:11:56.820 --> 00:12:03.960
It's part of the my string class there's my scope resolution operator and it's operator minus nothing

177
00:12:04.020 --> 00:12:10.170
in the parameter list because it's a unitary operator and it's conc because we don't want to change

178
00:12:10.170 --> 00:12:11.570
our current object again.

179
00:12:11.730 --> 00:12:12.840
Now what do we have to do here.

180
00:12:12.840 --> 00:12:16.890
Remember we need to make a copy of whatever is in the current object.

181
00:12:16.890 --> 00:12:20.640
Make that lowercase and then create a new object from it.

182
00:12:20.670 --> 00:12:25.680
And need to allocate space to create that copy so that I can make lower case i don't want to change

183
00:12:25.680 --> 00:12:27.430
the objects because I can't write.

184
00:12:27.490 --> 00:12:29.660
I don't want to it's a contest method.

185
00:12:29.670 --> 00:12:30.530
So what do we do.

186
00:12:30.660 --> 00:12:37.890
Well let's create a temporary area in memory called Buff and we'll create a new array of characters

187
00:12:37.890 --> 00:12:38.400
there.

188
00:12:38.460 --> 00:12:40.120
And how big is that going to be.

189
00:12:40.260 --> 00:12:47.810
Well it's going to be as big as the length of the string and as to your plus one.

190
00:12:48.110 --> 00:12:53.300
And again we're using stood stranglings here given that string so if it's Frank I'm going to get back

191
00:12:53.300 --> 00:12:54.930
five allocate one.

192
00:12:54.950 --> 00:12:59.270
This is a brand new pointer to an area on the heap that I just allocated.

193
00:12:59.270 --> 00:13:00.840
It's local to this function.

194
00:13:00.860 --> 00:13:04.810
So when we're finished with the function we need to get rid of that and deallocate it.

195
00:13:05.030 --> 00:13:06.090
So now what do I do.

196
00:13:06.230 --> 00:13:15.060
Well at this point I need to copy the string that's in as TR to buff.

197
00:13:16.730 --> 00:13:23.840
OK now we've got a copy of that string so we can do now is we can just simply loop through that and

198
00:13:24.050 --> 00:13:25.310
set equal to zero.

199
00:13:25.320 --> 00:13:30.110
And then we can go while I is less than let's say the string length

200
00:13:32.840 --> 00:13:35.900
of s here or the string length.

201
00:13:35.910 --> 00:13:38.990
But actually they're both the same right now

202
00:13:42.180 --> 00:13:44.440
and we're going to go by one.

203
00:13:44.780 --> 00:13:45.320
That's it.

204
00:13:45.350 --> 00:13:51.590
Now inside the loop what we want to do is we just simply want to say buff Sabai equals the lower case

205
00:13:51.590 --> 00:13:58.760
version of it right so stood and we're going to do to lower it which is a function in the CC type header

206
00:13:58.760 --> 00:14:00.150
file.

207
00:14:00.500 --> 00:14:09.390
So we'll say to lower and to lower while the character itself of Sabai gets it.

208
00:14:09.390 --> 00:14:15.930
Now we've got what we need but now contains a copy of that original string and we've just made it lowercase.

209
00:14:15.930 --> 00:14:16.860
So what do we want to do.

210
00:14:16.860 --> 00:14:23.090
Now I want to create a new object a temporary object right on the stack here based on that information

211
00:14:23.100 --> 00:14:28.510
so I'm going to say my string would just call it temp and initialize it from above.

212
00:14:28.680 --> 00:14:32.280
Now we want to return 10 and then we'll be done.

213
00:14:32.280 --> 00:14:33.800
But there's one thing we need to do.

214
00:14:33.870 --> 00:14:38.700
And it's really easy to forget and it's this is one of the benefits of using smart pointers which we'll

215
00:14:38.700 --> 00:14:40.490
talk about later on in the course.

216
00:14:40.770 --> 00:14:43.650
Right here I allocated this area in memory.

217
00:14:43.890 --> 00:14:45.580
I have used it right here.

218
00:14:45.600 --> 00:14:46.290
I'm done with it.

219
00:14:46.290 --> 00:14:49.610
I need to deallocate that space otherwise I'll leave that memory.

220
00:14:49.620 --> 00:14:55.970
So I want to be sure that right here I delete buff and that's it.

221
00:14:55.990 --> 00:14:57.290
That takes care of that.

222
00:14:57.530 --> 00:15:03.290
And then the last method is the concatenate method which again is really straightforward.

223
00:15:03.320 --> 00:15:05.360
We're going to create a new string from it.

224
00:15:05.360 --> 00:15:12.750
So by value it's in my string method we'll call it OPERATOR clus and it expects something on the right

225
00:15:12.750 --> 00:15:14.400
hand side which is my string

226
00:15:17.440 --> 00:15:22.290
by reference we'll call it our age as is usual and it's a contest method as well.

227
00:15:24.710 --> 00:15:25.430
That's it.

228
00:15:25.430 --> 00:15:26.560
So what do we do here.

229
00:15:26.600 --> 00:15:27.970
Well Same idea here right.

230
00:15:27.970 --> 00:15:34.610
I just need to allocate an area in memory for characters with call it but again and how big is this

231
00:15:34.610 --> 00:15:35.400
going to be.

232
00:15:35.480 --> 00:15:41.960
Well this needs to be since we're concatenating and has to be this the length of this string plus the

233
00:15:41.960 --> 00:15:44.570
length of the right hand side string plus one.

234
00:15:44.750 --> 00:15:45.690
So that's all we're going to do.

235
00:15:45.680 --> 00:15:49.550
We're going to say new char how many.

236
00:15:50.240 --> 00:16:07.340
Well the length of the TR plus the length of right hand sides as TR plus one that allocates the storage

237
00:16:07.340 --> 00:16:13.250
on the heap that I need at this point I need to copy the first string and then concatenate the second

238
00:16:13.250 --> 00:16:15.550
string to as I can build the bigger string from it.

239
00:16:15.710 --> 00:16:24.830
So we'll say stud string copy into buff from the left hand side string which is S.R..

240
00:16:24.920 --> 00:16:32.920
Then we'll do a stud string cat to concatenate again into buff from the right hand side.

241
00:16:33.040 --> 00:16:39.320
TR perfect so what we've done now is we've just copied one string and concatenated the other.

242
00:16:39.590 --> 00:16:44.570
At this point we've got the information we need in buff to create that new temporary object and I'm

243
00:16:44.570 --> 00:16:50.450
going to return something we did appear so we'll build that object we'll call it temp we'll build it

244
00:16:50.450 --> 00:16:53.620
with the buffer information.

245
00:16:53.620 --> 00:16:58.340
Remember the leap but we're done with it now and return

246
00:17:01.040 --> 00:17:03.730
that temporary object.

247
00:17:03.770 --> 00:17:04.370
So that's it.

248
00:17:04.370 --> 00:17:10.390
We should be done unless there's any typos or let's compile and run and you can see here we've got a

249
00:17:10.390 --> 00:17:11.870
copy constructor being used.

250
00:17:11.870 --> 00:17:14.080
There is five moas three.

251
00:17:14.110 --> 00:17:21.880
We got back false and true exactly what we expected and we get Larry uppercase Larry.

252
00:17:21.900 --> 00:17:25.990
Lowercase L that we have Moe and Larry Moe Larry and Curly.

253
00:17:26.000 --> 00:17:27.720
So everything looks great.

254
00:17:27.800 --> 00:17:28.640
All right so there you go.

255
00:17:28.640 --> 00:17:34.130
That's an example of implementing these three overloaded operators as member methods are get a lot more

256
00:17:34.130 --> 00:17:39.710
chance to practice this when we get into the challenge exercice what we'll do in the next video is we'll

257
00:17:39.710 --> 00:17:43.440
do the same three operators but we'll do them as nonmember functions.
