1
00:00:05,530 --> 00:00:11,900
In this video we'll learn about a raise and their characteristics will also see the typical use case

2
00:00:11,900 --> 00:00:17,480
for an array an array is a compound data type or a structured data type.

3
00:00:17,480 --> 00:00:21,440
This means that it's a data type that's made up of other data types.

4
00:00:21,500 --> 00:00:24,360
For example a collection of test scores were.

5
00:00:24,390 --> 00:00:29,440
Each test scores an integer is considered a compound data type made up of integers.

6
00:00:30,360 --> 00:00:33,130
We say that this is an array of integers.

7
00:00:33,180 --> 00:00:38,610
It's important to understand that all elements of an array must be of the same type and each element

8
00:00:38,610 --> 00:00:41,230
can be accessed directly.

9
00:00:41,250 --> 00:00:46,190
We'll see some other array characteristics shortly but first let's see why we use arrays and why they're

10
00:00:46,200 --> 00:00:47,120
so useful.

11
00:00:48,140 --> 00:00:51,890
Suppose we need to model my test scores in a class that's pretty easy.

12
00:00:51,890 --> 00:00:55,800
We've already seen how to use variables and this would be a perfect use of variables.

13
00:00:55,850 --> 00:01:00,590
So suppose to have three test scores that I need to track and they're all graded as integers out of

14
00:01:00,590 --> 00:01:01,800
100.

15
00:01:01,940 --> 00:01:07,460
I can simply declare three variables as integers give them meaningful names initialize them to zero

16
00:01:07,520 --> 00:01:09,420
or whatever values I wish.

17
00:01:09,800 --> 00:01:15,710
But what if I need to model more than just a few test scores suppose I'm a school administrator and

18
00:01:15,710 --> 00:01:22,040
I need to model the test scores for 100 students so that I could do some statistics on them modeling

19
00:01:22,070 --> 00:01:28,240
each one of them as its own variable with its own name can quickly get out of control.

20
00:01:28,250 --> 00:01:31,510
Now I have to keep track of 100 variable names.

21
00:01:31,640 --> 00:01:35,270
You could still do it but it becomes tedious and error prone.

22
00:01:35,270 --> 00:01:37,910
What if I had 10000 test scores to model.

23
00:01:37,970 --> 00:01:39,010
You get the idea.

24
00:01:39,140 --> 00:01:45,500
This is a typical use case for an array and that's when they're really really useful arrays allow you

25
00:01:45,500 --> 00:01:51,410
to tell the compiler to give you a collection of as many elements as you want and give the entire collection

26
00:01:51,410 --> 00:01:52,350
a single name.

27
00:01:52,520 --> 00:01:55,610
So you no longer have to name each individual element.

28
00:01:55,610 --> 00:01:59,050
Let's go over some of the characteristics or properties of arrays.

29
00:01:59,210 --> 00:02:01,190
Arrays are fixed in size.

30
00:02:01,190 --> 00:02:05,880
Once you create an array of a specific size the size cannot change.

31
00:02:05,930 --> 00:02:10,640
So if you create an array of 100 test scores then you need space for more than that.

32
00:02:10,700 --> 00:02:12,870
You'd have to go back to your source code.

33
00:02:13,070 --> 00:02:20,330
Change the max size and recompile the size of the array is fixed arrays will not grow or shrink on their

34
00:02:20,330 --> 00:02:22,710
own while the program is running.

35
00:02:22,730 --> 00:02:26,510
As mentioned earlier all the elements of an array must be of the same type.

36
00:02:26,570 --> 00:02:32,880
So we can have arrays of integers arrays of doubles race of persons arrays of accounts and so forth.

37
00:02:32,900 --> 00:02:35,380
A race is stored continuously in memory.

38
00:02:35,690 --> 00:02:40,820
So if you tell the compiler that you need an array of 100 integers the compiler will generate code that

39
00:02:40,880 --> 00:02:45,750
allocates exactly 100 integers did are contiguous in memory.

40
00:02:45,830 --> 00:02:48,870
That means that the memory will be allocated as one chunk.

41
00:02:49,100 --> 00:02:55,160
Array elements are individually accessible so I can access any test score that I wish you could do that

42
00:02:55,160 --> 00:02:58,400
using the position or index of that array element.

43
00:02:58,400 --> 00:03:04,140
So I could tell the compiler to give me the second element in the array or the 1308 element in the array.

44
00:03:04,190 --> 00:03:07,290
Be aware that array indexes start at zero.

45
00:03:07,610 --> 00:03:14,360
This means that the first element in an array is a position zero not a position one and the last element

46
00:03:14,420 --> 00:03:17,390
is a position size minus one.

47
00:03:17,450 --> 00:03:19,970
You can see an example in the figure on the right.

48
00:03:19,970 --> 00:03:22,310
Here we have an array of 10 test scores.

49
00:03:22,310 --> 00:03:27,200
The array is named test scores and it's indexed from 0 to 9.

50
00:03:27,200 --> 00:03:32,660
Many many programming languages have compound data types like arrays and the majority of them start

51
00:03:32,660 --> 00:03:34,760
their array indexes in zero.

52
00:03:34,760 --> 00:03:37,700
I know that most of us start counting at 1 with arrays.

53
00:03:37,700 --> 00:03:39,520
You must started 0.

54
00:03:39,560 --> 00:03:44,540
This is a common cause of errors and programs especially with beginning programmers.

55
00:03:44,550 --> 00:03:50,070
It's also important to understand that C++ arrays are not bounds checked.

56
00:03:50,070 --> 00:03:54,360
That means that there is no check to make sure that when you access the individual array element that

57
00:03:54,360 --> 00:03:57,540
it's between zero and size minus one.

58
00:03:57,570 --> 00:04:02,170
It's the programmer's responsibility to be sure that you don't go over bounds.

59
00:04:02,550 --> 00:04:08,400
If you go over bounds your program may have strange behavior and you could even crash finally in a few

60
00:04:08,400 --> 00:04:08,910
sections.

61
00:04:08,910 --> 00:04:11,270
We'll talk about iteration or looping.

62
00:04:11,520 --> 00:04:15,750
As you can imagine looping is used all the time with arrays since we often need to loop through the

63
00:04:15,750 --> 00:04:21,780
arrays and process every element just like variables always initialize the raise or they'll contain

64
00:04:21,840 --> 00:04:23,360
unknown values.

65
00:04:23,370 --> 00:04:28,680
Arrays are extremely efficient in C++ since they are bare bones raw arrays.

66
00:04:28,680 --> 00:04:35,250
Later in this section we'll talk about C++ vectors which are super powerful dynamic and safer to use

67
00:04:35,250 --> 00:04:37,580
in a race in the next video.

68
00:04:37,620 --> 00:04:39,370
We'll see how to declare arrays.
