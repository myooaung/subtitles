WEBVTT
1
00:00:05.440 --> 00:00:12.130
In this video we'll learn about pointer arithmetic and C++ and C++ pointers can be used in assignment

2
00:00:12.130 --> 00:00:16.780
expressions arithmetic expressions and comparison expressions.

3
00:00:16.870 --> 00:00:23.440
C++ allows a subset of the arithmetic operators to work with pointer variables pointer arithmetic operators

4
00:00:23.470 --> 00:00:29.000
only makes sense when you use them with raw arrays but they're a very powerful way to manipulate them.

5
00:00:32.570 --> 00:00:37.130
Let's start by looking at the increment and decrement operators in the context of pointers.

6
00:00:38.870 --> 00:00:43.250
The increment operator increments the address stored in a pointer variable so that it points to the

7
00:00:43.250 --> 00:00:45.650
next element in contiguous memory.

8
00:00:45.680 --> 00:00:52.140
So if integer pointer is currently pointing tragics 1000 then integer pointer plus plus will increment

9
00:00:52.220 --> 00:00:54.400
by the size of whatever it's pointing to.

10
00:00:54.560 --> 00:00:56.220
In this case an integer.

11
00:00:56.230 --> 00:00:57.630
It's for my machine.

12
00:00:57.650 --> 00:01:01.730
So now we will point to one for in the case of a double.

13
00:01:01.760 --> 00:01:06.610
It would be larger if a pointer is pointing to the address of a very large data type.

14
00:01:06.770 --> 00:01:12.980
Then the increment operator would increment it by whatever the size of that large data type is the decrement

15
00:01:13.010 --> 00:01:21.810
operator works exactly the same way except that it decrements the value stored in the pointer variable.

16
00:01:21.820 --> 00:01:27.070
We can also use the addition and subtraction operators with pointers the addition operator determines

17
00:01:27.070 --> 00:01:32.510
the operand on the right hand side of the expression and multiplies that number by the size of the element.

18
00:01:32.680 --> 00:01:34.930
And that's what's being added to the pointer.

19
00:01:34.960 --> 00:01:41.050
So adding 2 to an integer pointer increments the pointer by two times the size of an integer obviously

20
00:01:41.050 --> 00:01:47.430
pointer arithmetic is machine specific since the size of C++ types vary from machine to machine.

21
00:01:47.530 --> 00:01:55.860
The subtraction operator works in the same way except that we're decrementing the pointer's value.

22
00:01:55.890 --> 00:02:01.330
What do you think is the result of subtracting one pointer from another while if both pointers point

23
00:02:01.330 --> 00:02:06.010
to the same data type then the result will be the number of elements between the two pointers.

24
00:02:06.370 --> 00:02:12.460
If the pointers point to different data types then you'll get a compiler.

25
00:02:12.520 --> 00:02:14.710
Finally let's see how we can compare pointers.

26
00:02:14.830 --> 00:02:19.150
We can compare pointers with the equality operators if we want to compare two pointers.

27
00:02:19.150 --> 00:02:22.580
We can simply compare them using the equal or not equal operators.

28
00:02:22.930 --> 00:02:26.950
But be aware that this will compare the values of the pointer variables.

29
00:02:26.950 --> 00:02:32.470
So if the pointer is pointing to the same address then they're considered equal otherwise they're considered

30
00:02:32.470 --> 00:02:33.720
not equal.

31
00:02:33.730 --> 00:02:38.140
The data that they're pointing to is not considered when checking for equality.

32
00:02:38.440 --> 00:02:41.320
The sample code shows an example of comparing pointers.

33
00:02:41.530 --> 00:02:49.870
In this example P1 and P2 point two different addresses and P1 and three point to the same address.

34
00:02:49.930 --> 00:02:53.940
So you can see that if we compare P1 and P2 we get back false.

35
00:02:54.100 --> 00:03:00.810
And if we compare P1 and P3 we get back true all three pointers point to strings with de-value Frank

36
00:03:00.840 --> 00:03:03.970
but that's not considered when you want to compare pointers.

37
00:03:03.990 --> 00:03:06.680
So how do you compare what the pointers are pointing to.

38
00:03:06.720 --> 00:03:07.220
Simple.

39
00:03:07.290 --> 00:03:11.970
Just follow the pointers dereference them and then check what they're pointing to a shining example

40
00:03:11.970 --> 00:03:15.660
next.

41
00:03:15.690 --> 00:03:20.460
Here we have the same example except that we're dereferencing the pointer before we're comparing them.

42
00:03:20.460 --> 00:03:26.230
So in this case P1 and P2 point two different strings but those strings both happen to be frank.

43
00:03:26.520 --> 00:03:31.110
So this will display true P 1 in P3 point to the same string which is Frank.

44
00:03:31.110 --> 00:03:33.150
So this will also display true.

45
00:03:33.210 --> 00:03:35.330
So that's an intro to pointer arithmetic.

46
00:03:35.340 --> 00:03:38.260
Let's head over to the ID and I'll show you some more examples.

47
00:03:40.020 --> 00:03:45.200
Ok so I mean the idea and I'm the section 12 workspace in the pointer arithmetic project.

48
00:03:45.210 --> 00:03:48.640
So let's go over a couple of examples of pointer arithmetic.

49
00:03:48.810 --> 00:03:56.080
You can see here that I've got a score's array which is an array of integers and I've initialized to

50
00:03:56.130 --> 00:04:03.210
195 89 68 and negative when I'm using the negative one is a cental because what I want to do is as I

51
00:04:03.210 --> 00:04:06.860
want to loop through this array and when I see negative 1 I want to stop.

52
00:04:07.050 --> 00:04:07.490
OK.

53
00:04:07.680 --> 00:04:10.640
So I also have and this is called scores cinÃ©ma.

54
00:04:10.690 --> 00:04:17.550
This array here then I've got my score pointer and I'm initialising to score.

55
00:04:17.550 --> 00:04:19.850
So right now it's pointing right here.

56
00:04:19.920 --> 00:04:27.000
Let's say that this is address a thousand of those four thousand eight we'll use decimal here and 12

57
00:04:27.810 --> 00:04:31.470
and 2016 assuming four byte integers here.

58
00:04:31.480 --> 00:04:32.370
Okay perfect.

59
00:04:32.370 --> 00:04:36.660
So now let's loop through this array using the pointer.

60
00:04:36.660 --> 00:04:43.270
OK so what I'm doing here is I'm dereferencing score pointers so follow the pointer to where it's pointing.

61
00:04:43.410 --> 00:04:47.250
And then I'm checking the value at that location to be negative 1.

62
00:04:47.340 --> 00:04:52.350
So I want to loop while it's not equal to negative 1 so I want to loop through this here once I see

63
00:04:52.350 --> 00:04:52.950
negative 1.

64
00:04:52.950 --> 00:04:54.100
I want to stop.

65
00:04:54.470 --> 00:04:54.920
OK.

66
00:04:55.080 --> 00:04:56.280
So that's what's going to happen here.

67
00:04:56.280 --> 00:05:00.240
So score pointer right now is pointing to memory location 1000.

68
00:05:00.390 --> 00:05:01.800
I'm going to dereference that.

69
00:05:01.830 --> 00:05:02.970
I've got my hundred.

70
00:05:03.000 --> 00:05:05.190
It's definitely not equal to minus 1.

71
00:05:05.190 --> 00:05:06.740
So what am I going to display.

72
00:05:06.900 --> 00:05:09.760
I'm not displaying score points because that would display a thousand.

73
00:05:09.780 --> 00:05:15.190
I'm dereference the score pointer and that's despite the hundred.

74
00:05:15.380 --> 00:05:17.390
Now we get into the pointer arithmetic.

75
00:05:17.450 --> 00:05:21.900
What we're saying is score pointer plus plus In other words increment the score pointer.

76
00:05:21.980 --> 00:05:28.430
Well what do we increment by we're correcting it by whatever it's pointing to when this case by 4 because

77
00:05:28.430 --> 00:05:31.980
I've got four byte integers so this will no longer point here.

78
00:05:32.020 --> 00:05:37.520
It'll now point here we go back up to the loop we checked to see if we're pointing to minus 1 we're

79
00:05:37.520 --> 00:05:38.160
not.

80
00:05:38.330 --> 00:05:45.980
And we display our dereferenced pointer which is now 95 again we point to the next one.

81
00:05:46.190 --> 00:05:48.350
Now we're points 1000 eight.

82
00:05:48.440 --> 00:05:51.230
It's not minus 1 so I'm going to display that 89.

83
00:05:51.250 --> 00:05:53.510
I'm going to increment my pointer again.

84
00:05:53.570 --> 00:05:58.340
Now I'm pointing to address a thousand twelve which is again not a minus one.

85
00:05:58.400 --> 00:06:04.370
I'm going to display the 68 and I'm going to increment my pointer for the last time right here.

86
00:06:04.400 --> 00:06:10.430
I check to see that my pointer is not pointing to minus 1 Well it is in this case my dereferenced pointer.

87
00:06:10.550 --> 00:06:12.210
So I stop.

88
00:06:12.230 --> 00:06:18.320
So this is the way you can loop through an array using a pointer and a sentinel value in this case.

89
00:06:18.320 --> 00:06:23.690
This is called a sentinel value and this is commonly used as a terminator basically.

90
00:06:23.710 --> 00:06:26.320
So you keep looping until you hit a Terminator.

91
00:06:26.810 --> 00:06:29.800
OK so let me clear this and let's run this.

92
00:06:29.800 --> 00:06:36.370
And we should see the array elements display and there are one hundred ninety five eighty 89 and 68

93
00:06:36.600 --> 00:06:38.130
there is are four elements.

94
00:06:38.130 --> 00:06:42.400
We don't display minus one because that is our sentinel.

95
00:06:42.440 --> 00:06:45.320
OK so that's a simple example of pointer arithmetic.

96
00:06:45.320 --> 00:06:46.700
Now let me show you another way to do this.

97
00:06:46.700 --> 00:06:48.850
It's commonly seen.

98
00:06:49.040 --> 00:06:49.530
OK.

99
00:06:49.700 --> 00:06:55.190
So it's everything is exactly the same except that you'll notice right here in the previous example

100
00:06:55.190 --> 00:06:59.990
we had two lines of code one dereference the pointer right here and then the other one increment to

101
00:07:00.000 --> 00:07:03.430
the pointer to point to the next integer in the array.

102
00:07:03.470 --> 00:07:04.960
Here we're doing it all in one.

103
00:07:05.000 --> 00:07:07.410
So we've got this piece of code right here.

104
00:07:07.490 --> 00:07:15.610
So we're saying dereferenced score pointer and increment so there's a lot going on here and it's important

105
00:07:15.610 --> 00:07:17.710
to understand what's going on.

106
00:07:17.710 --> 00:07:19.390
First of all we have two operators.

107
00:07:19.420 --> 00:07:23.340
So the first thing we do is we look in the precedence chart to see which one has precedence.

108
00:07:23.410 --> 00:07:25.730
Well they both have the same precedence.

109
00:07:25.750 --> 00:07:32.350
So in this case what we do is we look at the associativity the associativity is right to left.

110
00:07:32.350 --> 00:07:36.250
So what that means is that I'm incrementing a score pointer.

111
00:07:36.250 --> 00:07:41.290
So I'm incrementing the pointer I'm not incrementing the what is pointing to if I had something like

112
00:07:41.290 --> 00:07:41.850
this

113
00:07:46.130 --> 00:07:50.840
that's real different now right because what I'm doing here is I'm dereferencing the pointer so I'm

114
00:07:50.840 --> 00:07:56.240
getting the image or it's pointing to and then I'm incrementing that integer but that's not what we're

115
00:07:56.240 --> 00:07:56.770
doing here.

116
00:07:56.780 --> 00:08:01.670
In this case what we're doing is we're dereferencing the pointer and we're incrementing the pointer

117
00:08:01.850 --> 00:08:02.940
after we use it.

118
00:08:02.960 --> 00:08:10.770
While the use is right here the use is basically dereference the pointer and then increment the pointer.

119
00:08:10.790 --> 00:08:12.290
So that's exactly what we're doing here right.

120
00:08:12.290 --> 00:08:15.880
We're doing dereference a pointer and then increment the pointer.

121
00:08:16.040 --> 00:08:22.310
But this you see a lot in C++ code you dereference and an increment or decrement if you want to go the

122
00:08:22.310 --> 00:08:23.570
other way.

123
00:08:23.720 --> 00:08:30.320
If we run this example and we clear this real quick if we run this example you'll see that we get exactly

124
00:08:30.650 --> 00:08:32.020
the same output.

125
00:08:32.070 --> 00:08:35.550
One hundred ninety five eighty nine 68 exactly the same thing.

126
00:08:36.530 --> 00:08:41.550
OK I just wanted to show you that style because you tend to see this sort of style a lot out there.

127
00:08:43.170 --> 00:08:45.620
OK so now let's do another example.

128
00:08:45.700 --> 00:08:50.320
We scroll up just a little bit and let's see how we can compare pointers in this example.

129
00:08:50.520 --> 00:08:54.970
So let's read about here and get a comment this code out.

130
00:08:55.170 --> 00:08:57.540
Or I should say uncomment this code.

131
00:08:57.540 --> 00:08:59.240
And let's go through this.

132
00:08:59.250 --> 00:09:04.090
So here I've got three string objects as one as two as three.

133
00:09:04.110 --> 00:09:14.070
So they're here as one as two and there's three as one points to a string Frank as to also a different

134
00:09:14.070 --> 00:09:20.700
string Frank is the same frank but in a different memory location and as is James.

135
00:09:20.700 --> 00:09:25.920
Now each one of these each one of these objects has a memory location associated with it right.

136
00:09:25.920 --> 00:09:27.990
So let's say that this one is at a thousand.

137
00:09:28.020 --> 00:09:33.020
This one is at 2000 and this one is at 3000 that way it's really easy to keep him straight.

138
00:09:34.880 --> 00:09:35.640
Perfect.

139
00:09:36.050 --> 00:09:41.900
Now here we go now we've got P1 is a pointer to a string so he can hold the addresses of strings that

140
00:09:41.960 --> 00:09:45.230
those guys right here addresses of strings so we can assign any of them.

141
00:09:45.380 --> 00:09:46.370
So let's do that.

142
00:09:46.370 --> 00:09:54.380
So what is as one as one is the string object right here so we can assign the address of S1 to pee 1.

143
00:09:54.470 --> 00:09:59.810
So P1 now has a thousand in it and there's my pointer.

144
00:09:59.990 --> 00:10:08.000
P2 is the address of string to which is 2000 and there's my pointer to that one.

145
00:10:08.150 --> 00:10:11.670
And now p 3 we're assigning the address of S1 again.

146
00:10:11.790 --> 00:10:20.680
So there's the 1000 and P one P3 goes around this way we do it that way it's pointing there.

147
00:10:20.820 --> 00:10:26.460
So now I'm using the blue as a modifier So we just print true and false solist do some comparisons here.

148
00:10:26.570 --> 00:10:32.880
Does P1 equal P2 Well P1 is a thousand P2 is 2000.

149
00:10:32.880 --> 00:10:40.280
So no they both points just strings who are frank but we're not considering what what they're pointing

150
00:10:40.280 --> 00:10:40.550
to.

151
00:10:40.550 --> 00:10:45.590
We're only considering the value of P1 and the value of P2 which are definitely different.

152
00:10:45.620 --> 00:10:47.740
So we get back false.

153
00:10:47.870 --> 00:10:52.660
How about this p one in P 3 will p what is a thousand and P three is a thousand.

154
00:10:52.670 --> 00:10:54.680
So that's definitely true.

155
00:10:55.070 --> 00:10:59.950
So I notice that were checking the pointer's value not what it's pointing to.

156
00:10:59.960 --> 00:11:05.500
Now if we want to look to see if we're pointing to the same string then what we do is we dereference

157
00:11:05.500 --> 00:11:07.730
the pointers here.

158
00:11:07.850 --> 00:11:14.900
So you can see here this will output P1 right follow P1 so dereference P1 if you reference the one I

159
00:11:14.900 --> 00:11:16.250
get Frank.

160
00:11:16.370 --> 00:11:22.970
So this will say Frank compared to dereferenced P2 follow P2.

161
00:11:22.990 --> 00:11:31.920
I get Frank again Frank is Frank that's true because now we're comparing the strings not the pointers.

162
00:11:32.100 --> 00:11:39.180
Now over here we've got p p 3 p 133 both point to the same memory address so obviously what they're

163
00:11:39.180 --> 00:11:40.520
pointing to is the same.

164
00:11:40.590 --> 00:11:43.070
And in this case Frank is Frank also.

165
00:11:43.470 --> 00:11:52.140
But now let's say we change P3 and we change the pointer and P3 2.2 3 the address of this guy right

166
00:11:52.140 --> 00:11:53.280
here 3000.

167
00:11:53.280 --> 00:11:58.690
So this is now 3000 were pointing here no longer pointing here.

168
00:11:58.890 --> 00:12:05.850
Now what we're doing is we're comparing where dereferencing p 1 which points to Frank and we're de-brief

169
00:12:05.850 --> 00:12:08.190
dereferencing p 3 which points to James.

170
00:12:08.190 --> 00:12:12.900
So now what we're doing is we're complete We're comparing the string Franken to St. James which we get

171
00:12:12.900 --> 00:12:15.620
back a false OK.

172
00:12:15.730 --> 00:12:19.700
I know it's a lot of pointers to follow but it's pretty pretty clear once you really take your time

173
00:12:19.700 --> 00:12:20.660
and walk through it.

174
00:12:20.780 --> 00:12:23.240
So let's clear this and give this one a run.

175
00:12:23.240 --> 00:12:25.530
And like I said you can play with this code.

176
00:12:25.590 --> 00:12:27.290
She can see what's happening here.

177
00:12:28.850 --> 00:12:31.690
Right this address and this address are not true.

178
00:12:31.730 --> 00:12:32.480
Not the same.

179
00:12:32.480 --> 00:12:36.480
So obviously those pointers are not the same in this case.

180
00:12:36.650 --> 00:12:37.960
It is the same address.

181
00:12:37.970 --> 00:12:43.250
So we have a true and then we're comparing Frank and Frank which is true Frank and Frank which is true

182
00:12:43.250 --> 00:12:48.200
and Frank and James which is false in the bottom three examples here we're actually comparing the strings

183
00:12:48.290 --> 00:12:49.500
not the pointers.

184
00:12:50.600 --> 00:12:50.920
OK.

185
00:12:50.970 --> 00:12:53.590
So let's do one more with subtraction.

186
00:12:53.610 --> 00:13:00.480
You can see what that looks like and I'll uncomment all this out and we'll walk through this example.

187
00:13:00.480 --> 00:13:02.390
This is a real simple example here.

188
00:13:02.550 --> 00:13:07.440
In this case what have I got I've got name which is an array of characters right.

189
00:13:07.470 --> 00:13:16.240
So I've got F R A N K and no character because this is a C-style string.

190
00:13:17.080 --> 00:13:19.360
So I've got character pointer one.

191
00:13:19.480 --> 00:13:22.260
So I've got character pointer one.

192
00:13:22.330 --> 00:13:27.060
It's a pointer to a character so I can point to any one of these guys here and I'm initialising that

193
00:13:27.060 --> 00:13:34.530
to no pointer and then I've got character pointer to both no doubt.

194
00:13:34.940 --> 00:13:40.810
OK so now what do I do I'm saying character pointer one is pointing to the address of named Sub-Zero

195
00:13:40.820 --> 00:13:46.670
what's name Sub-Zero that f right there the address that I could have just said name it means exactly

196
00:13:46.670 --> 00:13:47.460
the same thing.

197
00:13:47.540 --> 00:13:49.000
But I wanted to do it a different way.

198
00:13:49.100 --> 00:13:49.820
Could see.

199
00:13:49.870 --> 00:14:00.410
So character pointer one is pointing here and character point or two is pointing to member 0 1 2 3 4

200
00:14:00.680 --> 00:14:01.220
5.

201
00:14:01.220 --> 00:14:02.090
In this case.

202
00:14:02.090 --> 00:14:02.540
Right.

203
00:14:02.570 --> 00:14:09.320
So it's pointing to the address of names of three which is the n right now assuming the characters are

204
00:14:09.320 --> 00:14:10.170
one byte.

205
00:14:10.190 --> 00:14:12.410
This would be a thousand.

206
00:14:12.410 --> 00:14:18.660
This one would be at a Thousand One thousand two in 2003.

207
00:14:19.090 --> 00:14:19.400
Right.

208
00:14:19.470 --> 00:14:21.510
So this would be a thousand three.

209
00:14:21.840 --> 00:14:24.340
And this would be 1000.

210
00:14:24.360 --> 00:14:29.190
So when I subtract those two pointers like I'm doing right here it's subtracting thousand three from

211
00:14:29.190 --> 00:14:30.000
a thousand.

212
00:14:30.570 --> 00:14:31.650
And that's what I'm getting back.

213
00:14:31.660 --> 00:14:37.270
There's three characters between those two pointers and that's all the point to subtraction means right.

214
00:14:37.320 --> 00:14:38.780
So let's give this a run.

215
00:14:40.400 --> 00:14:46.670
And the last example here says in the string Frank and is three characters away from F and that's exactly

216
00:14:46.670 --> 00:14:47.690
what we expected.

217
00:14:48.670 --> 00:14:54.880
OK so this gives you a little bit of a intro to pointer arithmetic you can see it's pretty straightforward.

218
00:14:54.880 --> 00:14:57.130
Never think of adding one or adding to already three.

219
00:14:57.130 --> 00:15:00.900
I always think about adding one of the type that I'm pointing to.

220
00:15:00.970 --> 00:15:05.650
It could be 4 bytes 8 bytes 100 bytes depending on what I'm pointing to.
