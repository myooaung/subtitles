WEBVTT
1
00:00:05.490 --> 00:00:10.830
We've already seen overloaded constructor's in the ID but let's see a few more examples.

2
00:00:10.860 --> 00:00:13.870
Classes can have as many constructors as necessary.

3
00:00:14.070 --> 00:00:17.970
The only restriction is that they must each have a unique signature.

4
00:00:17.970 --> 00:00:23.820
The compiler has to be able to determine which to call based on the initialization information provided

5
00:00:23.820 --> 00:00:25.510
when creating the objects.

6
00:00:25.620 --> 00:00:30.100
If there's any ambiguity in the compiler won't guess it will generate a compiler error.

7
00:00:30.520 --> 00:00:36.180
Remember once you declare any constructor then the compiler generated default constructor will no longer

8
00:00:36.180 --> 00:00:37.620
be provided.

9
00:00:38.280 --> 00:00:42.440
Here's the player class again and we've decided that we need three constructors.

10
00:00:42.480 --> 00:00:44.670
The first is in no args constructor.

11
00:00:44.790 --> 00:00:50.650
The second only expects a single string object and the third expects a string and two integers.

12
00:00:51.030 --> 00:00:55.590
Obviously the signatures for these constructors are different so the compiler can tell them apart.

13
00:00:55.920 --> 00:00:59.070
We could have more constructors depending on our class design.

14
00:00:59.070 --> 00:01:03.060
Now let's implement these constructors in the first example.

15
00:01:03.060 --> 00:01:07.820
We're implementing the no args constructor to initialize the object to name none.

16
00:01:07.950 --> 00:01:15.000
Health 0 and XP 0 the values we initialized to are totally dependent on what we want are objects in

17
00:01:15.000 --> 00:01:19.120
the game to look like when no initialization information is provided.

18
00:01:19.140 --> 00:01:24.600
It's important that we initialize or objects to some state that we know we don't want garbage data in

19
00:01:24.660 --> 00:01:28.790
any of the attributes after they're created in the second constructor.

20
00:01:28.800 --> 00:01:34.800
We only have the name parameter provided so we set the name attribute to name Val and then the health

21
00:01:34.830 --> 00:01:36.370
and Expwy to zero.

22
00:01:36.780 --> 00:01:42.420
If we don't initialize health and Expwy will contain garbage and that leaves the object in an unknown

23
00:01:42.420 --> 00:01:44.370
state.

24
00:01:44.430 --> 00:01:49.710
Finally the third constructor is given initialization values for all three attributes.

25
00:01:49.710 --> 00:01:56.640
So we initialize name to name Val health to health Vau and XP to XP Val.

26
00:01:56.660 --> 00:02:00.620
Now we have three ways to create player objects.

27
00:02:00.620 --> 00:02:06.740
In this case the empty object will be initialized by the no args constructor and it will contain none

28
00:02:06.800 --> 00:02:12.920
zero and zero hero and villain will be initialized with the constructor that expects a single string

29
00:02:12.980 --> 00:02:19.900
object and there will be initialized to hero 0 0 and villaine 0 0 0 respectively.

30
00:02:20.330 --> 00:02:27.380
The Frank object will be initialized by the three args constructor and it will contain Frank 104 and

31
00:02:27.380 --> 00:02:33.470
finally the enemy object will be created dynamically on the heap and initialized by the three args constructor

32
00:02:33.470 --> 00:02:35.590
to enemy 1 0 0 0 0 0 and 0.

33
00:02:36.020 --> 00:02:41.540
As you can see overloading constructors is a super powerful way to provide many useful initialization

34
00:02:41.540 --> 00:02:43.160
options for your classes.

35
00:02:43.190 --> 00:02:48.950
Also Best practice is to initialize all class attributes so that create an object do not contain any

36
00:02:48.950 --> 00:02:49.690
garbage data.
