WEBVTT
1
00:00:05.490 --> 00:00:10.880
In this video we'll learn how to access the address or location in memory of any variable.

2
00:00:10.910 --> 00:00:16.400
We'll also learn how to initialize a pointer variable to point to another variable in C++.

3
00:00:16.400 --> 00:00:22.310
We can use the address operator which is the ampersand symbol to the left side of an operand the address

4
00:00:22.310 --> 00:00:28.480
operator is an operator and when used in an expression it evaluates to the address of its operand.

5
00:00:28.730 --> 00:00:34.040
Of course the operand must have an l value so it can't be a constant or an expression that evaluates

6
00:00:34.040 --> 00:00:37.410
to a temporary values in the example code.

7
00:00:37.410 --> 00:00:42.390
We have a variable name which is a simple integer variable that's been initialized to 10.

8
00:00:42.600 --> 00:00:47.370
If we display them we're displaying the contents of none which is 10.

9
00:00:47.400 --> 00:00:52.730
If we display the size of num then we're displaying how much storage is allocated by them.

10
00:00:52.740 --> 00:00:56.820
In other words how much storage do we need on my machine to store an integer.

11
00:00:56.820 --> 00:00:59.340
In this case it's 4 bytes.

12
00:00:59.340 --> 00:01:05.250
Finally if we display the address of Naam using the address operator we get a hexadecimal number that

13
00:01:05.250 --> 00:01:11.520
represents the location in memory of the variable name a hexadecimal number is just a base 16 number.

14
00:01:11.910 --> 00:01:12.930
So far so good.

15
00:01:13.050 --> 00:01:18.300
You can see that the address operator evaluates to exactly what we expect the address of the variable

16
00:01:18.300 --> 00:01:19.560
name.

17
00:01:19.560 --> 00:01:27.010
Now let's see these same statements with pointer variables in the first line we declare P to be a pointer

18
00:01:27.010 --> 00:01:28.290
to an integer variable.

19
00:01:28.570 --> 00:01:32.820
So that means that P can hold values that are addresses of integers.

20
00:01:32.950 --> 00:01:38.730
Also notice that we didn't initialize the pointer p in the first output statement we're displaying the

21
00:01:38.730 --> 00:01:42.700
value of p the value of p is the value that stored in P.

22
00:01:42.810 --> 00:01:49.640
Since we didn't initialize P We have garbage data in P and you can see that address displayed in the

23
00:01:49.640 --> 00:01:53.140
second output statement we're displaying the address of the variable P.

24
00:01:53.150 --> 00:01:58.910
Since we're using the address operator and in the third statement we display the size of P using the

25
00:01:58.910 --> 00:02:01.750
size of operator on my machine.

26
00:02:01.750 --> 00:02:03.310
This displays a 4.

27
00:02:03.440 --> 00:02:08.090
Which means that P is 4 bytes of storage since P holds addresses.

28
00:02:08.090 --> 00:02:14.300
This also means that addresses on my machine can be stored in four bytes on the next line.

29
00:02:14.330 --> 00:02:16.630
We assign no pointer to P.

30
00:02:16.670 --> 00:02:19.990
This sets PITA's zero which means it's pointing nowhere.

31
00:02:20.450 --> 00:02:23.150
Since p is a variable we can change its value.

32
00:02:23.150 --> 00:02:27.800
This seems obvious but it's important since when we talk about references in a bit you'll see that you

33
00:02:27.800 --> 00:02:30.880
can't change a reference once it's initialized.

34
00:02:31.010 --> 00:02:36.800
Finally in the last update statement we display the value of p again and this time we get 0 because

35
00:02:36.800 --> 00:02:38.530
we zeroed it out.

36
00:02:38.540 --> 00:02:43.400
I know these examples seem pretty simple but please try them out on your machine and be sure you understand

37
00:02:43.400 --> 00:02:44.900
these fundamental concepts.

38
00:02:44.930 --> 00:02:51.560
Since everything else builds on them here you can see that I'm defining 5 pointer variables p 1 through

39
00:02:51.560 --> 00:02:57.930
p. 5 and initialize them all to NULL pointer each pointer variable points to a different type.

40
00:02:58.130 --> 00:03:02.160
So each can hold addresses of variables of the type they point to.

41
00:03:02.270 --> 00:03:08.000
If we display the size of each of these pointer variables What do you think will display with the size

42
00:03:08.000 --> 00:03:14.380
of P1 be less than the size of P4 because P1 points to an int and P for to vector objects.

43
00:03:14.420 --> 00:03:17.210
If you set four for each pointer you'd be right.

44
00:03:17.480 --> 00:03:22.520
Based on the previous example all pointers in my program will hold values that can be represented in

45
00:03:22.520 --> 00:03:29.030
4 bytes an address of an integer and an address of a vector and the address of a string all have size

46
00:03:29.030 --> 00:03:30.310
of four on my machine.

47
00:03:31.410 --> 00:03:36.130
There is a big difference between the size of the pointer variable itself and the size of what it points

48
00:03:36.130 --> 00:03:36.650
to.

49
00:03:36.910 --> 00:03:41.470
Again take your time and make sure you understand the difference between a pointer and what it points

50
00:03:41.470 --> 00:03:42.120
to.

51
00:03:42.400 --> 00:03:47.060
It's very common to think of a pointer as what it points to and that's a mistake.

52
00:03:47.110 --> 00:03:49.080
A pointer is just a simple variable.

53
00:03:49.180 --> 00:03:52.840
What it points to could be simple or a very complex structure.

54
00:03:54.950 --> 00:03:59.300
When we declare pointers as we've done so far there are typed pointers.

55
00:03:59.300 --> 00:04:05.950
This means that we explicitly declare the pointer variable to point to a variable of a specific type.

56
00:04:06.050 --> 00:04:11.990
In this example we're declaring an integer score and initializing it to 10 in a double high temp and

57
00:04:11.990 --> 00:04:19.580
initializing it to 100 point seven then we declare score pointer as a pointer to an integer so far so

58
00:04:19.580 --> 00:04:20.370
good.

59
00:04:20.390 --> 00:04:23.520
Now we assign the address of score to score pointer.

60
00:04:23.540 --> 00:04:29.120
The compiler is fine with that since score pointer holds addresses of integers and scores an integer.

61
00:04:29.480 --> 00:04:31.750
But look at the last assignment statement.

62
00:04:31.910 --> 00:04:36.160
In this case we're assigning the address of high temp to score pointer.

63
00:04:36.170 --> 00:04:37.610
The compiler won't let you do this.

64
00:04:37.610 --> 00:04:39.410
You'll get a compiler error.

65
00:04:39.680 --> 00:04:44.600
You told the compiler that score pointer holds addresses of integers but you're asking it to store the

66
00:04:44.600 --> 00:04:50.620
address of a double both addresses are 4 bytes long so the issue isn't that size won't fit.

67
00:04:50.640 --> 00:04:54.260
The issue is that there's a type conflict in C++.

68
00:04:54.270 --> 00:04:56.840
We can also have untyped void pointers.

69
00:04:56.850 --> 00:05:01.170
I'm not going to talk about those but they aren't used that much in C plus plus they're more used in

70
00:05:01.190 --> 00:05:07.550
C great so let's review a very simple concept but a very important concept.

71
00:05:07.560 --> 00:05:09.830
Pointers are variables so they can change.

72
00:05:10.020 --> 00:05:13.660
Pointers can be know and pointers can be uninitialized.

73
00:05:13.680 --> 00:05:15.960
That's not usually a good idea but it can happen.

74
00:05:16.810 --> 00:05:19.610
The example code shows all these options.

75
00:05:19.690 --> 00:05:25.100
First we declared two double variables high and low temp and we initialize them.

76
00:05:25.210 --> 00:05:30.370
Then we declared temp pointer as a pointer to a double and we don't initialize it so it's pointing anywhere

77
00:05:31.350 --> 00:05:37.020
then we assign the address of high temp to 10 pointer and then we change 10 pointer to point somewhere

78
00:05:37.020 --> 00:05:39.800
else by assigning the address of low temp.

79
00:05:40.040 --> 00:05:46.610
Finally we no out 10 pointer by assigning null pointer We'll come back to these pointer properties later

80
00:05:46.610 --> 00:05:51.680
when we compare pointers and references and we'll go over some guidelines as when to use pointers versus

81
00:05:51.680 --> 00:05:52.450
reference.

82
00:05:52.670 --> 00:05:57.910
Let's head over to the idea now and go over these examples in life code and then in the next video we'll

83
00:05:57.920 --> 00:06:01.040
learn how to follow appointer and get to the data that it's pointing to.

84
00:06:02.450 --> 00:06:09.660
OK so I mean the code like idea and I in the section 12 workspace in these simple pointers project in

85
00:06:09.660 --> 00:06:14.000
this project we're just going to go over some real simple examples of declaring pointers looking at

86
00:06:14.000 --> 00:06:19.660
the size of pointers looking at addresses just so you get a really good feel of what's going on here.

87
00:06:19.670 --> 00:06:24.470
First thing you'll notice here is that we are declaring numb to be an integer and we're initialized

88
00:06:24.500 --> 00:06:24.890
to 10.

89
00:06:24.890 --> 00:06:29.240
That's just a plain old integer variable there's no pointer involved here at all.

90
00:06:29.240 --> 00:06:31.130
So in this case I've got a variable.

91
00:06:31.130 --> 00:06:33.930
It's called numb and it exists somewhere in memory.

92
00:06:33.990 --> 00:06:35.540
Let's say it's somewhere in memory here.

93
00:06:35.630 --> 00:06:38.290
Obviously that memory has to have a location.

94
00:06:38.290 --> 00:06:39.550
Right we need an address.

95
00:06:39.620 --> 00:06:44.360
So let's just say that the address is a thousand pages a thousand and these examples obviously it won't

96
00:06:44.360 --> 00:06:47.610
be a thousand when we display it but it's easier to understand this way.

97
00:06:48.490 --> 00:06:53.700
So right now it's got a 10 in it because we've initialized it so that's the value of arm is 10.

98
00:06:53.800 --> 00:06:59.240
So in this case here I print out the value of numb is numb which will display a 10.

99
00:06:59.650 --> 00:07:01.870
Then I'll ask what's the size of number.

100
00:07:01.870 --> 00:07:03.700
What is the size of an integer.

101
00:07:03.700 --> 00:07:11.130
On my machine this may be different on your machine but on my machine an integer is 4 bytes and that

102
00:07:11.140 --> 00:07:15.460
at the end here will say what is the address of GNOME and this is where the address operator comes in

103
00:07:15.460 --> 00:07:18.950
that ampersand right before the variable name.

104
00:07:19.210 --> 00:07:23.950
This evaluates to the location in memory or the address of that variable.

105
00:07:24.010 --> 00:07:27.970
In this case it will be thousands who would print the thousand but obviously it won't print something

106
00:07:27.970 --> 00:07:28.470
different.

107
00:07:28.540 --> 00:07:29.970
When I actually run the program.

108
00:07:29.980 --> 00:07:32.210
So let's take a look at the output from here.

109
00:07:35.490 --> 00:07:38.870
OK so here's the output I'll just put this side by side so we can read it.

110
00:07:39.030 --> 00:07:40.230
The value of number is 10.

111
00:07:40.230 --> 00:07:41.600
That's exactly what we expected.

112
00:07:41.610 --> 00:07:45.610
And I knew that the size of an integer on my machine is four years it might be eight.

113
00:07:45.690 --> 00:07:46.990
It might be four.

114
00:07:47.310 --> 00:07:50.480
And then the address of Nahm is a hexadecimal number.

115
00:07:50.490 --> 00:07:57.390
So this is the way that addresses are represented in C++ a hex number is just a number to base 16.

116
00:07:57.390 --> 00:08:00.910
So that's the address of that integer variable.

117
00:08:01.350 --> 00:08:03.480
Ok so hopefully this makes sense.

118
00:08:03.480 --> 00:08:10.290
This is the real foundation to understanding pointers and understanding locations or addresses of variables

119
00:08:10.290 --> 00:08:11.940
so hopefully this makes sense.

120
00:08:11.950 --> 00:08:15.780
So let me clear this out and then let's do this next example here.

121
00:08:16.620 --> 00:08:23.590
Here's where we're actually declaring a pointer and we're doing that right here on line 17.

122
00:08:23.670 --> 00:08:26.910
We're declaring P to be a pointer to an integer remember.

123
00:08:26.930 --> 00:08:30.720
You read these from right to left so p is a pointer to an integer.

124
00:08:31.630 --> 00:08:32.410
What is P.

125
00:08:32.410 --> 00:08:33.370
It's a variable.

126
00:08:33.430 --> 00:08:35.360
So here's p.

127
00:08:35.590 --> 00:08:40.610
It's got storage associated with it and it's got a location associated with it.

128
00:08:40.780 --> 00:08:46.690
Let's say that the address of P is 2000 this time what's in P right now.

129
00:08:46.700 --> 00:08:49.820
I never initialized it so there's garbage in here.

130
00:08:49.890 --> 00:08:51.970
There's a random bit pattern here.

131
00:08:52.160 --> 00:08:58.280
And as far as C++ is concerned that random bit pattern is an address right because pointers hold addresses

132
00:08:58.280 --> 00:09:06.560
so this guy right now is pointing somewhere who knows where but it's definitely pointing somewhere.

133
00:09:07.390 --> 00:09:10.960
So what's the value of p whatever that that pattern is.

134
00:09:10.960 --> 00:09:12.900
We're going to get garbage right here.

135
00:09:13.810 --> 00:09:18.190
And you can see that the trouble or the danger of following that pointer and putting something in this

136
00:09:18.190 --> 00:09:22.540
address here that could be something pretty important on your machine and you just wiped it out.

137
00:09:22.540 --> 00:09:24.600
Hopefully you'll get a crash and you can fix it.

138
00:09:24.860 --> 00:09:25.310
OK.

139
00:09:25.390 --> 00:09:26.590
So what's the address.

140
00:09:26.770 --> 00:09:32.430
Well the address happy is the location where this pointer is stored in this case 2000.

141
00:09:32.800 --> 00:09:35.110
And then what's the size of P.

142
00:09:35.230 --> 00:09:41.500
How big or how much storage do I need to represent a point on my machine while on my machine it happens

143
00:09:41.500 --> 00:09:42.940
to be 4 bytes.

144
00:09:42.940 --> 00:09:45.430
Again yours it could be different.

145
00:09:45.490 --> 00:09:51.310
So this will print out some garbage memory address then it'll print out the address where this variable

146
00:09:51.310 --> 00:09:53.680
is stored and then it should print out of 4.

147
00:09:53.680 --> 00:09:55.120
So let's give it a shot.

148
00:09:58.380 --> 00:09:59.310
And here you go.

149
00:09:59.310 --> 00:10:01.540
Move it up here as well.

150
00:10:01.830 --> 00:10:04.230
The value of p is there is the hex address.

151
00:10:04.230 --> 00:10:09.960
That's the garbage address and the address AP is at this location right here.

152
00:10:09.980 --> 00:10:15.720
And again 18 and the size of P is for now unblind 22.

153
00:10:15.770 --> 00:10:21.610
I no doubt the pointer I said P equals null pointer null pointer is basically address's 0 surges that

154
00:10:21.610 --> 00:10:22.990
you're throwing out the pointer.

155
00:10:23.000 --> 00:10:28.550
So if I print out now the value of p I should get back to 0 and I do what we're doing here is we're

156
00:10:28.550 --> 00:10:31.930
making this point to point nowhere which is real real important.

157
00:10:32.900 --> 00:10:35.350
OK so let's do a few more examples.

158
00:10:35.470 --> 00:10:41.590
In this case I'm declaring five pointers 1 through P5.

159
00:10:41.660 --> 00:10:45.470
Just like I did in the slides and all of these pointers are pointing to different types.

160
00:10:45.470 --> 00:10:46.090
OK so.

161
00:10:46.110 --> 00:10:47.360
And they're all no doubt right now.

162
00:10:47.390 --> 00:10:55.750
So in the case of P1 P1 has stored in memory obviously right we need to allocate storage for that variable.

163
00:10:56.030 --> 00:10:57.500
Right now it's not.

164
00:10:57.500 --> 00:11:06.730
So it's basically pointing nowhere P2 is also a pointer and reallocating space for it.

165
00:11:06.760 --> 00:11:08.520
It's pointing nowhere.

166
00:11:08.590 --> 00:11:15.640
Eventually one will point to an integer P2 a point to a double P3 will point to unsigned long long and

167
00:11:15.690 --> 00:11:18.040
the form a vector and P 5 to a string.

168
00:11:18.040 --> 00:11:22.710
So what they're pointing to is very different from what they are.

169
00:11:22.780 --> 00:11:26.150
They're just pointer variables real primitive types.

170
00:11:26.230 --> 00:11:28.890
In this case what does the size of P1.

171
00:11:28.900 --> 00:11:33.730
How much storage do I need to represent the address of an integer.

172
00:11:33.730 --> 00:11:36.100
It turns out it's 4 bytes.

173
00:11:36.190 --> 00:11:38.130
What's the size of P2.

174
00:11:38.260 --> 00:11:41.880
How much storage do I need to represent the address of a double.

175
00:11:41.890 --> 00:11:49.530
Again it's four bytes on my machine four bytes and I can represent any address of any variable.

176
00:11:49.540 --> 00:11:54.630
So what you expect here is to print for all the way down.

177
00:11:54.660 --> 00:11:58.350
Now this is important it is really important to understand the difference between the POINAR and what

178
00:11:58.350 --> 00:12:00.420
is pointing to.

179
00:12:00.480 --> 00:12:04.980
Let's say we've got P What eventually p 1 is going to point to an integer right.

180
00:12:04.980 --> 00:12:06.180
That's the whole idea.

181
00:12:06.950 --> 00:12:09.490
And P2 will point to a double.

182
00:12:09.590 --> 00:12:11.710
So we'll have much more storage here.

183
00:12:12.940 --> 00:12:20.560
And let's say for is over here P4 will eventually point to a vector or string object so it could be

184
00:12:20.560 --> 00:12:27.080
pointing to a vector of string objects where this could be Larry Moe and Curly.

185
00:12:28.570 --> 00:12:33.550
Where these guys are all string objects so you can see the pointer itself is simple.

186
00:12:33.670 --> 00:12:37.900
The pointer itself is simple the pointer itself is simple they're all really simple.

187
00:12:37.900 --> 00:12:43.960
What they point to could be very simple or could be pretty complex as you see right here.

188
00:12:44.040 --> 00:12:47.940
So make sure you understand the difference between the pointer and what it points to.

189
00:12:47.940 --> 00:12:49.500
It's really critical.

190
00:12:49.500 --> 00:12:56.460
So in this example if I run it I expect to get four straight down line and there you go size of the

191
00:12:56.470 --> 00:13:01.430
one is for all the way down the line because all I need is for bytes to represent any address on my

192
00:13:01.430 --> 00:13:02.080
machine.

193
00:13:03.010 --> 00:13:04.780
Again this is very machine specific.

194
00:13:04.780 --> 00:13:06.530
You might have eight on your machine.

195
00:13:07.710 --> 00:13:11.810
Ok so now let's go through one more little example here.

196
00:13:11.820 --> 00:13:14.280
All right so let's walk through this before we even run it.

197
00:13:14.550 --> 00:13:20.550
In this case what have I got I've got to score as an integer and I'm initializing it to 10.

198
00:13:20.550 --> 00:13:22.090
OK let's do that over here.

199
00:13:22.110 --> 00:13:23.480
Here score.

200
00:13:23.970 --> 00:13:25.130
It's an integer.

201
00:13:25.350 --> 00:13:27.390
And I put a 10 in there.

202
00:13:27.450 --> 00:13:30.790
Let's assume that that address is 1000.

203
00:13:30.840 --> 00:13:33.350
That's where score lives.

204
00:13:33.570 --> 00:13:36.020
Again it will be different on your machine for sure.

205
00:13:36.020 --> 00:13:37.490
I'm just making that up.

206
00:13:37.710 --> 00:13:40.170
Then I've got a double called high temperature.

207
00:13:40.170 --> 00:13:42.240
Obviously I need more storage for doubles right.

208
00:13:42.510 --> 00:13:50.200
And this is called high temp and right now I have a hundred point seven in there and let's say that

209
00:13:50.200 --> 00:13:52.810
this is and address 2000.

210
00:13:52.970 --> 00:13:55.840
And so those are the addresses for those variables.

211
00:13:56.810 --> 00:13:58.360
Now here's my pointer.

212
00:13:58.520 --> 00:14:02.920
It's called Score pointer.

213
00:14:03.220 --> 00:14:05.970
It's got storage associated with it right now.

214
00:14:06.010 --> 00:14:06.860
I've nailed it out.

215
00:14:06.880 --> 00:14:11.090
So it's pointing nowhere so far so good.

216
00:14:12.200 --> 00:14:17.440
Now this is what I'm doing here I'm saying score pointer is equal to the address of score I'm initializing

217
00:14:17.450 --> 00:14:18.880
that pointer to a point somewhere.

218
00:14:18.880 --> 00:14:21.890
Now what's the address of score.

219
00:14:21.920 --> 00:14:22.780
It's right here.

220
00:14:22.790 --> 00:14:24.280
Thousand.

221
00:14:24.360 --> 00:14:26.200
So I'm going to put a thousand in here.

222
00:14:26.220 --> 00:14:29.110
I'm not putting the 10 in here and putting the thousand in here.

223
00:14:29.490 --> 00:14:31.410
That's my pointer.

224
00:14:31.410 --> 00:14:36.910
So now score pointer is pointing to an integer because it holds the address of an integer.

225
00:14:37.230 --> 00:14:39.500
So score pointer is pointing to score.

226
00:14:39.510 --> 00:14:41.820
That's what we're doing right here.

227
00:14:41.820 --> 00:14:45.690
So now let's display what's the value of score well the value score is 10.

228
00:14:45.690 --> 00:14:46.870
Right right here.

229
00:14:46.890 --> 00:14:48.590
So they should display a 10.

230
00:14:48.840 --> 00:14:54.590
What's the address of score in this example it's a thousand.

231
00:14:54.630 --> 00:14:59.210
And what's the value of the score pointer a thousand.

232
00:14:59.280 --> 00:15:03.720
And so when we run this now we're definitely going to get a 10 here and we're going to get obviously

233
00:15:03.720 --> 00:15:04.700
not a thousand here.

234
00:15:04.710 --> 00:15:07.650
But what's important is that those two numbers will be the same.

235
00:15:07.650 --> 00:15:13.020
They have to be the same because score pointers pointing to score and score has an address which is

236
00:15:13.020 --> 00:15:14.490
the one that's in score pointer.

237
00:15:14.490 --> 00:15:14.960
OK.

238
00:15:15.060 --> 00:15:19.450
So when we run this we're expecting as I said a 10 and then two memory addresses that are the same.

239
00:15:19.470 --> 00:15:20.920
So let's give that a try.

240
00:15:22.730 --> 00:15:28.020
And this is where the value of score is 10 and then the address of score is you see here and the NF

241
00:15:28.030 --> 00:15:30.650
0 values score pointer 0.

242
00:15:30.650 --> 00:15:35.640
So these are the exact same address which is exactly what we expected.

243
00:15:36.610 --> 00:15:41.990
And then this last little of compiler error here let me show you that so that you can see the compiler

244
00:15:41.990 --> 00:15:44.150
and what it looks like in case you run into it.

245
00:15:45.630 --> 00:15:47.360
This is a pretty common mistake.

246
00:15:47.400 --> 00:15:53.400
Actually what happens here is we're saying score pointer right here and points to an integer right and

247
00:15:53.430 --> 00:15:55.410
holds addresses of integers.

248
00:15:55.410 --> 00:16:01.240
But we're trying to put in here the address of high temp high temp is a double the compiler's going

249
00:16:01.250 --> 00:16:03.770
to say sorry I don't know what you're talking about.

250
00:16:03.810 --> 00:16:08.370
You're telling me that score pointer holds addresses of integers but now you're trying to put the address

251
00:16:08.460 --> 00:16:09.500
of a double in there.

252
00:16:09.600 --> 00:16:10.900
I can't do that.

253
00:16:11.040 --> 00:16:12.510
And let's compile this.

254
00:16:12.510 --> 00:16:16.810
You can see what the air looks like and it makes it make sense right.

255
00:16:16.830 --> 00:16:20.810
It says I cannot converted a pointer to a double to a pointer to an integer.

256
00:16:21.030 --> 00:16:22.590
OK so that gives you some insight.

257
00:16:22.590 --> 00:16:25.060
Play around with these examples create some of your own.

258
00:16:25.060 --> 00:16:27.230
Walk through them draw like I did.

259
00:16:27.270 --> 00:16:32.280
So you really understand these connections between the pointer variable and what it points to.
