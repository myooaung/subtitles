1
00:00:05,210 --> 00:00:13,160
In this video we'll learn the C++ syntax for deriving classes from existing classes using inheritance.

2
00:00:13,160 --> 00:00:16,650
First we start with the class declaration for the base class.

3
00:00:16,670 --> 00:00:22,010
This is the class that will be creating the new class from this class will have its own member data

4
00:00:22,030 --> 00:00:28,220
and methods as we've already learned in this course then we declared the new class derived in this case

5
00:00:28,430 --> 00:00:35,540
followed by a colon then an access specifier and the name of the base class the access specifier can

6
00:00:35,540 --> 00:00:38,060
be public private or protected.

7
00:00:38,540 --> 00:00:42,830
If you don't provide an access specifier private inheritance is used.

8
00:00:43,220 --> 00:00:45,600
Let's see what the access specifiers do.

9
00:00:47,920 --> 00:00:54,050
C++ allows for three types of inheritance public private and protected.

10
00:00:54,150 --> 00:00:58,140
This is very different from many other object oriented programming languages.

11
00:00:58,200 --> 00:01:02,440
Most other object oriented programming languages only support public inheritance.

12
00:01:02,880 --> 00:01:07,530
Public inheritance is the most common form of inheritance and it's the type of inheritance that will

13
00:01:07,530 --> 00:01:10,640
most often see used in C++.

14
00:01:10,770 --> 00:01:17,550
Public inheritance establishes an is a relationship between derived and base classes and it's the type

15
00:01:17,550 --> 00:01:20,500
of inheritance we'll focus on in this course.

16
00:01:20,880 --> 00:01:27,630
Private and protected inheritance establish a derived class has a base class relationship and is often

17
00:01:27,630 --> 00:01:33,330
used to implement one class in terms of another private and protected inheritance of beyond the scope

18
00:01:33,330 --> 00:01:35,230
of this course.

19
00:01:36,270 --> 00:01:42,780
Let's see an example of deriving a savings account class from an account class using public inheritance.

20
00:01:43,320 --> 00:01:48,390
Notice that we're assuming that we already have an existing account class and it's got its own member

21
00:01:48,390 --> 00:01:51,630
data and methods and we want to reuse it.

22
00:01:51,630 --> 00:01:56,550
Now suppose we want to create a savings account class that has much in common with an account class

23
00:01:56,970 --> 00:02:00,070
but it also has some more specialized behavior.

24
00:02:00,270 --> 00:02:06,600
We can declare the savings account class then provide a colon followed by the public access specifier

25
00:02:06,780 --> 00:02:09,630
and finally the name of the base class.

26
00:02:09,630 --> 00:02:15,050
This establishes an is a relationship between savings account and account.

27
00:02:15,180 --> 00:02:21,120
Now a savings account inherits everything in the account class and it's free to implement its own specialized

28
00:02:21,120 --> 00:02:27,060
behaviors based on the behaviors it inherited from account.

29
00:02:27,090 --> 00:02:32,980
Of course we now have two classes in our application so we can create account objects as in this slide.

30
00:02:33,030 --> 00:02:38,250
We assume that we have no args constructor and the deposit and withdrawal methods handle deposit and

31
00:02:38,250 --> 00:02:43,410
withdraw funds to an account we can create account objects on the stack or on the heap via a pointer

32
00:02:43,620 --> 00:02:47,560
and call these methods as we need.

33
00:02:47,580 --> 00:02:52,330
We also have a savings account class so we can create savings account objects.

34
00:02:52,440 --> 00:02:57,800
In this case the specialized deposit and withdraw methods of the savings account class will be used.

35
00:02:58,020 --> 00:03:02,490
So as you can see conceptually inheritance is pretty simple.

36
00:03:02,490 --> 00:03:06,060
However the nuances of inheritance can get very complex.

37
00:03:06,510 --> 00:03:11,550
Let's head over to the idea and create account and savings account classes and then we'll learn about

38
00:03:11,550 --> 00:03:18,950
protected member access specifiers in the next video OK so I'm in the code light IDM in the section

39
00:03:18,950 --> 00:03:26,930
15 workspace indeed driving are first class project and what I've done is I've created a real simple

40
00:03:26,930 --> 00:03:30,680
account hierarchy with two classes and it really does nothing.

41
00:03:30,680 --> 00:03:36,350
It just has a couple of deposit withdrawal methods that just say Hi I'm deposit Higham withdraw just

42
00:03:36,350 --> 00:03:40,970
so we can see them being called and then what we'll do is we'll tweak this just a little bit so that

43
00:03:40,970 --> 00:03:44,590
we can add some attribute so you can really understand what's going on here.

44
00:03:44,600 --> 00:03:47,030
So let's take a look at the account class first.

45
00:03:47,090 --> 00:03:48,970
This is our base class.

46
00:03:48,980 --> 00:03:50,890
Notice that there is nothing going on here.

47
00:03:50,900 --> 00:03:51,960
Everything's public.

48
00:03:51,960 --> 00:03:55,630
We'll worry about protected and private in the next couple of videos.

49
00:03:55,670 --> 00:04:02,040
But right now all we've got is a deposit method of withdrawal method no args constructor and a destructor.

50
00:04:02,230 --> 00:04:02,740
OK.

51
00:04:02,810 --> 00:04:05,080
So let's take a look at the implementation.

52
00:04:05,330 --> 00:04:10,180
And as you can see the constructors and the structures are just there with no code.

53
00:04:10,280 --> 00:04:15,580
Our deposit method just simply says account deposit called with whatever amount we called it with.

54
00:04:15,980 --> 00:04:20,460
And the withdrawal method says account withdraw called with that same amount.

55
00:04:20,660 --> 00:04:23,390
So can't get any easier than this.

56
00:04:23,420 --> 00:04:28,390
So now we're going to do is we're going to derive a savings account from an account.

57
00:04:28,670 --> 00:04:33,570
So what we'll do is we'll create a savings account Hetter as well as implementation files.

58
00:04:33,650 --> 00:04:38,350
And you'll notice right here in savings account we're including the countdown H.

59
00:04:38,420 --> 00:04:40,970
Right we've got to include that header file.

60
00:04:40,970 --> 00:04:44,120
Otherwise this class of the compiler won't know what an account is.

61
00:04:44,450 --> 00:04:47,420
And here's the syntax class savings account.

62
00:04:47,420 --> 00:04:49,030
That's the class we're deriving.

63
00:04:49,190 --> 00:04:55,400
And then public account account in this case is the base class and you can see that this class is also

64
00:04:55,400 --> 00:04:56,310
really simple.

65
00:04:56,450 --> 00:05:02,690
It's got no args constructor it's got a destructor and it's got its own version of deposit and its own

66
00:05:02,690 --> 00:05:06,860
version of withdraw and the implementation.

67
00:05:07,730 --> 00:05:11,530
Again the constructor and the destructor don't have any code in the body.

68
00:05:11,750 --> 00:05:17,000
The deposits simply says savings account deposit called with amount that would be the difference between

69
00:05:17,000 --> 00:05:21,850
when the account deposit method is called in the savings account deposit method is called.

70
00:05:22,040 --> 00:05:23,990
And the same for withdraw.

71
00:05:24,570 --> 00:05:25,620
OK good.

72
00:05:25,700 --> 00:05:31,020
So now let's take a look at our main It's just a real simple man that exercise is some of these classes.

73
00:05:31,040 --> 00:05:37,120
So what we'll do here is create an account object right here named A.S.C..

74
00:05:37,220 --> 00:05:39,380
And again this is an account this is our base class.

75
00:05:39,380 --> 00:05:41,300
This is not using inheritance right here right.

76
00:05:41,300 --> 00:05:44,170
This is just instantiating a base account.

77
00:05:44,480 --> 00:05:48,680
And then I'm going to call deposit and withdraw what we expect there is for the deposit and withdraw

78
00:05:48,680 --> 00:05:53,660
methods of the account class to be called and we'll do the same thing here with a pointer just so you

79
00:05:53,660 --> 00:05:56,720
can see that it works exactly the same way with the pointer.

80
00:05:56,840 --> 00:05:59,830
Then what we'll do is we'll do the same but with a savings account.

81
00:05:59,990 --> 00:06:05,690
So we'll create this object right here a savings account and it will be a savings account and we'll

82
00:06:05,690 --> 00:06:11,060
call the deposit and the withdrawal methods for the savings account and what we expect there is to see

83
00:06:11,480 --> 00:06:16,020
the output saying savings account deposit savings account withdrawal.

84
00:06:16,070 --> 00:06:19,850
And again we're doing down here with the pointer so I'm going to build and run this and we'll take a

85
00:06:19,850 --> 00:06:24,320
look at the output and then what we'll do is we'll modify these files just a little bit so you can really

86
00:06:24,320 --> 00:06:27,030
understand what's going on behind the scenes.

87
00:06:28,040 --> 00:06:28,280
Okay.

88
00:06:28,280 --> 00:06:33,680
So there's my output and I'm going to move this just next to the main So we can see exactly what's going

89
00:06:33,680 --> 00:06:34,830
on.

90
00:06:35,060 --> 00:06:41,600
Here we go so we're creating the A.S.C. object and we're calling it deposit and withdraw on it and you

91
00:06:41,600 --> 00:06:45,350
can see right here we're calling the account deposit and the account withdraw.

92
00:06:45,350 --> 00:06:49,770
That's exactly what we expect because A.S.C. is an account object.

93
00:06:50,000 --> 00:06:52,340
In this case there is no inheritance going on.

94
00:06:52,340 --> 00:06:56,640
I'm simply using a base class as I've used all along.

95
00:06:57,170 --> 00:07:02,430
And down here you can see these last two statements right there for the account is just using the pointer.

96
00:07:03,200 --> 00:07:05,970
OK so now let's take a look at the savings account.

97
00:07:06,290 --> 00:07:12,590
So here's the savings account right here and I'm creating a save account object right here and then

98
00:07:12,590 --> 00:07:16,190
I'm saying saving you count that deposit saving account withdraw.

99
00:07:16,310 --> 00:07:21,000
So in this case I expect the savings account versions of those methods to be called.

100
00:07:21,020 --> 00:07:24,080
You can see that that's exactly what's happening here.

101
00:07:24,140 --> 00:07:24,620
OK.

102
00:07:24,650 --> 00:07:30,800
So again the account is the more general class the savings account is a more specialized class.

103
00:07:30,800 --> 00:07:36,560
And since we've got those methods that we've specialized in the savings account plus those are the ones

104
00:07:36,560 --> 00:07:38,640
that are being called right here.

105
00:07:39,470 --> 00:07:41,110
OK so hopefully that's clear.

106
00:07:41,120 --> 00:07:45,770
Now let me make a couple of small changes and then we'll run this through the debugger so you can see

107
00:07:45,770 --> 00:07:47,790
the structure of these classes.

108
00:07:47,810 --> 00:07:54,470
So let's go into the account class and what we can do here and again I'm going to keep everything public

109
00:07:54,470 --> 00:07:56,760
for now will change that in the next videos.

110
00:07:56,840 --> 00:08:06,010
What I'm going to do here is I'm simply going to create a double balance and string name just for a

111
00:08:06,010 --> 00:08:08,890
real simple name for an account and let me.

112
00:08:08,990 --> 00:08:10,420
That may include the string Hetter

113
00:08:13,960 --> 00:08:18,400
OK so now we're saying that all accounts have a balance and all accounts have a name.

114
00:08:18,400 --> 00:08:20,110
We obviously need to initialize those.

115
00:08:20,110 --> 00:08:24,640
I'm just going to initialize balance to zero and name to something like an account so we can do that

116
00:08:24,670 --> 00:08:26,970
in our implementation file right here.

117
00:08:27,340 --> 00:08:30,460
We can do it right here in the no args constructor.

118
00:08:30,490 --> 00:08:42,060
We can simply say balance is zero and name is an account or something anything really.

119
00:08:44,740 --> 00:08:46,810
OK so that's it.

120
00:08:46,810 --> 00:08:55,960
So now we'll go into our savings account and we'll say OK a savings account will also provides its own

121
00:08:55,960 --> 00:08:57,370
version of functionality.

122
00:08:57,380 --> 00:08:59,470
Remember this is the specialized class.

123
00:08:59,470 --> 00:09:04,910
So let's say that a savings account has an interest rate and it's a double.

124
00:09:05,110 --> 00:09:09,190
So obviously what will initialize that is well we don't want it to have garbage data.

125
00:09:09,190 --> 00:09:13,420
So we're going to come into our implementation file and we'll do that right here using an initializer

126
00:09:13,420 --> 00:09:15,830
list will say interest rate.

127
00:09:16,450 --> 00:09:19,630
And I don't know let's say it's 3 percent interest.

128
00:09:20,220 --> 00:09:21,580
Okay perfect.

129
00:09:21,580 --> 00:09:27,130
Now if we run this we should get exactly the same output because these being changed output statements

130
00:09:27,130 --> 00:09:30,110
really on display interest rate or name or anything else.

131
00:09:30,130 --> 00:09:31,910
So let's just be sure that it runs.

132
00:09:31,930 --> 00:09:36,480
There's I believe there is a run and again nothing here has changed.

133
00:09:36,610 --> 00:09:38,830
But let's take a look at this in the debugger.

134
00:09:38,830 --> 00:09:43,670
So let me close this up real quick and I'm going to go back to my main and what I want to do is I want

135
00:09:43,690 --> 00:09:45,550
to put a couple of break points here.

136
00:09:45,550 --> 00:09:51,100
We'll put a break point right here on 9:14 where we're actually creating that account object.

137
00:09:51,310 --> 00:09:58,060
We'll put another breakpoint right here on line 29 where we're creating the savings account object.

138
00:09:58,300 --> 00:10:02,290
And what I want to do is debug this and I'll start it.

139
00:10:03,400 --> 00:10:05,050
And I'm really not interested in the output.

140
00:10:05,050 --> 00:10:09,030
What I'm interested in here is a local variable so that's where what we're going to concentrate on.

141
00:10:09,040 --> 00:10:10,700
So we're in line 14.

142
00:10:10,720 --> 00:10:16,050
I'm just about ready to execute that line that that's going to instantiate or create that account object.

143
00:10:16,060 --> 00:10:18,660
So I'm going to go next.

144
00:10:18,670 --> 00:10:19,630
Now it's created.

145
00:10:19,630 --> 00:10:21,320
Let's take a look at it.

146
00:10:21,390 --> 00:10:27,620
There's a c c it was just created you can see the balance is zero and the name is an account member

147
00:10:27,670 --> 00:10:30,910
the name is a C++ string.

148
00:10:30,910 --> 00:10:31,300
Perfect.

149
00:10:31,300 --> 00:10:33,550
Now I'm going to come down here to 9:29.

150
00:10:33,550 --> 00:10:38,230
I'll just keep hitting next as I get to it and what's going to happen when I get here is I'm going to

151
00:10:38,230 --> 00:10:41,650
create a savings account object right here.

152
00:10:41,650 --> 00:10:43,800
So I'm going to press next.

153
00:10:43,960 --> 00:10:48,630
Now that savings account has been created it's called Save underscore account.

154
00:10:48,860 --> 00:10:49,900
I'll refresh this.

155
00:10:49,900 --> 00:10:50,980
And let's take a look at it.

156
00:10:50,980 --> 00:10:54,010
Remember what account was zero an account.

157
00:10:54,010 --> 00:10:56,670
Now let's look at savings account.

158
00:10:56,710 --> 00:10:59,650
Notice that savings account has an interest rate right.

159
00:10:59,680 --> 00:11:01,180
That's what it brought to the table.

160
00:11:01,330 --> 00:11:07,030
But it's also an account because we've got inherit and so everything that was in my parent is in me.

161
00:11:07,090 --> 00:11:13,180
So there's the account part of me being a savings account and you could see that the account part of

162
00:11:13,180 --> 00:11:17,040
me is zero into account name part of me is an account.

163
00:11:17,350 --> 00:11:17,980
OK.

164
00:11:17,980 --> 00:11:21,010
So hopefully you get some insight into what's really going on here.

165
00:11:21,040 --> 00:11:25,120
We really are inheriting all that information from our parent.

166
00:11:25,120 --> 00:11:28,390
So let me just draw this out sort of to be really clear.

167
00:11:28,390 --> 00:11:37,780
Suppose that this is A.S.C. right here that's A.S.C. that's that object right up here and it's an account

168
00:11:39,500 --> 00:11:42,190
and it has two local variables right balance

169
00:11:45,290 --> 00:11:46,740
in name.

170
00:11:47,600 --> 00:11:52,340
And we would never worry about what you're set to you can kind of see that over here and it also has

171
00:11:52,730 --> 00:11:54,790
access to those two methods.

172
00:11:54,800 --> 00:11:55,540
Right.

173
00:11:55,820 --> 00:12:02,340
Deposit and withdraw as well as the constructor's and the destructor.

174
00:12:02,340 --> 00:12:05,640
But I'm not worried about those right now I'm just really concentrating on these two methods.

175
00:12:05,670 --> 00:12:08,940
So the accountant knows about its methods.

176
00:12:09,480 --> 00:12:11,930
Now down here I've got a savings account.

177
00:12:12,030 --> 00:12:16,140
So let me create that and I'll just draw a big box.

178
00:12:16,140 --> 00:12:22,610
And this is a savings account that same of the object and its type is a savings account

179
00:12:25,500 --> 00:12:27,450
that's this guy right there.

180
00:12:29,320 --> 00:12:38,650
Now savings account member is an account so it's got an account part inside it and that account part

181
00:12:38,650 --> 00:12:40,420
is going to look just like this guy right here.

182
00:12:40,510 --> 00:12:43,410
It's going to have a balance.

183
00:12:43,650 --> 00:12:43,970
Right.

184
00:12:43,970 --> 00:12:45,670
It's going to have a name.

185
00:12:46,260 --> 00:12:50,020
It's going to have access to those deposit and withdraw methods.

186
00:12:50,240 --> 00:12:52,410
I'll just write them here.

187
00:12:53,370 --> 00:12:57,920
And those are the deposit and withdraw methods for the account class.

188
00:12:58,170 --> 00:13:06,480
But then our savings account or savings account class as interest rate and it's got its own versions

189
00:13:06,540 --> 00:13:12,040
of deposit and withdraw.

190
00:13:12,210 --> 00:13:17,130
So conceptually this is really what's going on and you can obviously see it right here you can see that

191
00:13:17,130 --> 00:13:19,130
it's got the account part of it right there.

192
00:13:19,140 --> 00:13:23,580
Now obviously the methods aren't here and the methods aren't going to be copied and every single object

193
00:13:23,610 --> 00:13:25,470
they're going to be in in one place.

194
00:13:25,530 --> 00:13:31,320
But think of it conceptually this way and I think you'll be good to go because this is really what's

195
00:13:31,320 --> 00:13:32,420
happening behind the scenes.

196
00:13:32,420 --> 00:13:38,310
So when we said that a savings account is an account it sure is right there is the account part of me.

197
00:13:38,400 --> 00:13:47,670
Now a couple of things we need to talk about what in here what in here is accessible to the savings

198
00:13:47,670 --> 00:13:48,250
account.

199
00:13:48,390 --> 00:13:51,000
How do we initialize the account part of us.

200
00:13:51,000 --> 00:13:55,290
So this is where we're headed with the next few lectures because we really need to be able to know you

201
00:13:55,330 --> 00:13:57,950
know what can I access from these methods.

202
00:13:58,050 --> 00:14:01,410
Am I able to access these guys right here or not.

203
00:14:01,410 --> 00:14:04,350
I'm not sure I read it all depends on our access modifiers.

204
00:14:04,350 --> 00:14:09,420
And also I need to be able to instantiate or initialize that account.

205
00:14:09,420 --> 00:14:10,440
Part of me.

206
00:14:10,650 --> 00:14:12,260
OK so that's what we'll do next.
