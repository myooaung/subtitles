1
00:00:05,390 --> 00:00:09,420
In this video I'd like to go over some of the algorithms in the SPL.

2
00:00:09,430 --> 00:00:13,690
Now there are a lot of algorithms in the TLM where they're going to cover a few of them but the techniques

3
00:00:13,690 --> 00:00:19,250
you'll see apply to many of them and you can be very productive with them very quickly.

4
00:00:19,690 --> 00:00:25,510
I'm in the Section 20 workspace and I mean the algorithms project and let me just go over these includes

5
00:00:25,510 --> 00:00:26,470
real quick.

6
00:00:26,470 --> 00:00:29,810
I am including algorithm we need that to use these algorithms.

7
00:00:30,010 --> 00:00:33,160
I'm also including a vector list and CC type.

8
00:00:33,160 --> 00:00:37,930
Now CC type are going to use for the two upper function that converts a character from lowercase to

9
00:00:37,930 --> 00:00:38,780
uppercase.

10
00:00:38,800 --> 00:00:40,340
That's the only reason we're going to do it.

11
00:00:40,450 --> 00:00:42,530
And most of the examples we use a vector.

12
00:00:42,580 --> 00:00:45,660
But there's one that's going to use the list just to change things around a little bit.

13
00:00:45,840 --> 00:00:46,290
OK.

14
00:00:46,390 --> 00:00:52,210
So that's that we're also going to use this person class that I created right here is a really really

15
00:00:52,210 --> 00:00:57,790
simple person class person has a name and age I think we've used a class like this are very similar

16
00:00:57,790 --> 00:01:01,870
to this before have a default constructor that piler will generate.

17
00:01:01,870 --> 00:01:06,050
For me I've got an overloaded constructor that expects a name or an age.

18
00:01:06,130 --> 00:01:11,530
And then I've got these two operators these are really important whenever we use the T.L. it's got to

19
00:01:11,530 --> 00:01:13,540
have a way to compare our own objects.

20
00:01:13,540 --> 00:01:21,550
I use raw user defined types so I need to provide less than and the equality operators and all I'm doing

21
00:01:21,550 --> 00:01:26,560
here is I'm saying that one person is less than another person if as if their age is less than the other

22
00:01:26,560 --> 00:01:27,380
person's age.

23
00:01:27,380 --> 00:01:29,970
It's just totally arbitrary in this example.

24
00:01:30,010 --> 00:01:34,900
This really would depend on whatever business logic you are using and how do I compare two persons.

25
00:01:34,900 --> 00:01:38,230
Well their names have to be the same and their age has to be the same.

26
00:01:38,230 --> 00:01:39,970
So we've got that and here.

27
00:01:39,970 --> 00:01:43,510
So that's a real simple person class that we're going to use in here.

28
00:01:43,720 --> 00:01:49,010
So I've also divided this into functions just like I did with the iterators lecturer.

29
00:01:49,090 --> 00:01:51,540
So let's take a look at this first one here.

30
00:01:52,030 --> 00:01:55,160
What is the algorithm we're using the algorithm is right there.

31
00:01:55,300 --> 00:02:01,090
That function is the find function it finds an element in a container.

32
00:02:01,450 --> 00:02:04,460
OK the first occurrence of the element in the container.

33
00:02:04,480 --> 00:02:05,770
So what are we going to do.

34
00:02:06,010 --> 00:02:13,870
Let's create a vector of integers 1 2 3 4 5 and then I'm going to call stupid find I'm going to give

35
00:02:13,870 --> 00:02:15,730
it the beginning and the end.

36
00:02:15,730 --> 00:02:18,280
Now I notice that the syntax here is a little different.

37
00:02:18,430 --> 00:02:26,660
I just wanted to show you that syntax in case you run into and it's equivalent to Veck dot begin and

38
00:02:26,730 --> 00:02:27,410
Vector.

39
00:02:27,430 --> 00:02:35,800
And like we've seen before but in this case it stood began in the pass in the vector or the container.

40
00:02:35,840 --> 00:02:38,790
It was just another way to do it means exactly the same thing.

41
00:02:38,800 --> 00:02:40,400
So let's get back to this.

42
00:02:40,510 --> 00:02:45,700
I'm calling the Find function I'm passing in where I want to start where I want to end.

43
00:02:45,700 --> 00:02:50,800
Right that's the sequence that I'm going to get back from the container and I'm using these iterators

44
00:02:51,040 --> 00:02:54,120
and that's what I want to find I want to find that element 1.

45
00:02:54,190 --> 00:02:58,800
I know it's there it's right here and now what does this return.

46
00:02:58,940 --> 00:03:02,960
Well if it finds it it will return an iterator pointing to it.

47
00:03:03,140 --> 00:03:06,930
If it doesn't find it it will return an iterator to the end.

48
00:03:07,340 --> 00:03:08,900
So it's really simple to check.

49
00:03:08,960 --> 00:03:11,980
OK so let me clear this and let's look at the logic here.

50
00:03:12,170 --> 00:03:14,230
So we're really executing that function.

51
00:03:14,360 --> 00:03:21,760
And if the location remember location I'm using auto but location is an iterator to a vector of integers.

52
00:03:22,250 --> 00:03:26,900
If the location is not equal to the end of the vector and then we found it we found the number and we

53
00:03:26,900 --> 00:03:28,700
could just the reference it and print it out.

54
00:03:28,700 --> 00:03:30,300
In this case it'll print out one.

55
00:03:30,770 --> 00:03:32,570
Otherwise we couldn't find the number.

56
00:03:32,840 --> 00:03:36,110
So let's execute this and then we'll change the code just a little bit.

57
00:03:36,110 --> 00:03:38,300
So we run this real quick.

58
00:03:38,600 --> 00:03:41,350
We found the number one absolutely it's in there.

59
00:03:41,630 --> 00:03:44,000
Let's change the one to something like a 7.

60
00:03:44,000 --> 00:03:46,310
We know that the 7 is not in the vector.

61
00:03:46,310 --> 00:03:49,030
So let's execute this again.

62
00:03:49,370 --> 00:03:51,720
Couldn't find the number just what we expected.

63
00:03:51,720 --> 00:03:55,700
Now I'm going to change this back to 1 so you guys can play with it when you have the source code on

64
00:03:55,700 --> 00:03:56,740
your end.

65
00:03:57,080 --> 00:04:01,760
That's as simple as it gets and the really cool thing about this is I'm finding the first occurrence

66
00:04:01,760 --> 00:04:08,000
of an element in any container that's mind blowing right because you're not worried about how this stuff

67
00:04:08,000 --> 00:04:10,580
is implemented you've got all these different containers.

68
00:04:10,580 --> 00:04:11,950
How easy is this.

69
00:04:12,020 --> 00:04:14,900
I just want to find something just got called Find where do I start.

70
00:04:14,900 --> 00:04:15,500
Where do I end.

71
00:04:15,500 --> 00:04:16,670
What do I want to find.

72
00:04:17,000 --> 00:04:18,770
That's real classic abstraction.

73
00:04:18,770 --> 00:04:19,760
That's pretty cool.

74
00:04:19,850 --> 00:04:22,340
That's using a primitive type an integer.

75
00:04:22,340 --> 00:04:24,490
What would it look like if we're trying to find a player.

76
00:04:24,500 --> 00:04:27,510
So that's what this example right here is going to show you.

77
00:04:27,920 --> 00:04:29,340
So let's take a look at that.

78
00:04:29,390 --> 00:04:30,740
In this case I'm not using a vector.

79
00:04:30,740 --> 00:04:33,140
I'm using a list but it's all the same.

80
00:04:33,140 --> 00:04:39,380
I've got a list of persons I'm calling them player and initializing it to Larry is 18 years old Moe

81
00:04:39,380 --> 00:04:40,820
is 20 and Curley's 21.

82
00:04:40,820 --> 00:04:43,430
Remember that person classes showed you a little bit ago.

83
00:04:43,970 --> 00:04:46,670
I want to find that person in that list.

84
00:04:46,730 --> 00:04:47,790
Look at the code.

85
00:04:47,840 --> 00:04:52,580
Auto location 1 equals stood find where do I start.

86
00:04:52,640 --> 00:04:59,360
Where do I and what do I want to find the best algorithms he's going to use the equality operator that

87
00:04:59,360 --> 00:05:03,370
I've overloaded for my person class to compare these guys.

88
00:05:03,410 --> 00:05:06,260
So hopefully it'll find this guy right here right.

89
00:05:06,920 --> 00:05:12,060
So if location 1 is not equal to the end then I found ammo.

90
00:05:12,500 --> 00:05:14,350
Otherwise I didn't find Mo.

91
00:05:14,750 --> 00:05:20,480
And how do I know that Mo is Mo Mo has to be his name it has to be Monee has to be 20 members are equalitie

92
00:05:20,540 --> 00:05:22,290
operatives checking for both.

93
00:05:22,290 --> 00:05:27,010
All right so let's give this one a run and we should see found mo.

94
00:05:27,020 --> 00:05:28,510
That's exactly what we get.

95
00:05:28,520 --> 00:05:32,860
Now if I change Mo's age here let's him make them 18 or 12.

96
00:05:33,110 --> 00:05:34,110
That's not in there.

97
00:05:34,130 --> 00:05:36,020
I don't have a 12 in there.

98
00:05:36,020 --> 00:05:40,640
So at this point when I run it I should not find MO and it says Mo not found.

99
00:05:40,640 --> 00:05:42,640
That's exactly what we expected.

100
00:05:42,640 --> 00:05:44,800
So let me change this again back to 20.

101
00:05:45,080 --> 00:05:50,490
OK so that is the test that shows you how to use the Find function superpowerful.

102
00:05:50,570 --> 00:05:55,060
I mean when you think about it how hard is it to write a Find function for an array.

103
00:05:55,280 --> 00:05:57,920
It's not really you started to begetting and you move along and found it.

104
00:05:57,920 --> 00:05:58,730
I'm done.

105
00:05:58,730 --> 00:06:03,170
But what about a list a doubly linked list of priority cueist set.

106
00:06:03,200 --> 00:06:06,020
Wow that's a lot of code you would have to write yourself.

107
00:06:06,200 --> 00:06:09,230
You don't have to worry about any of that you just call find it tell it where to start.

108
00:06:09,230 --> 00:06:12,410
Tell it what it word and tell it what you want to find and you're done.

109
00:06:12,410 --> 00:06:14,100
It's as simple as that.

110
00:06:14,810 --> 00:06:16,070
OK so that's the fine test.

111
00:06:16,070 --> 00:06:22,110
Let me show you the count test now so uncommon that out and let's take a look for the count test.

112
00:06:22,310 --> 00:06:24,740
This one is really really dead simple.

113
00:06:24,740 --> 00:06:28,060
All it does is it counts the number of elements in a container.

114
00:06:28,130 --> 00:06:30,920
But it takes you can take it a little bit further.

115
00:06:30,920 --> 00:06:36,140
You can actually count the number of occurrences of that specific element.

116
00:06:36,220 --> 00:06:41,030
Or we could just use size for the count of the elements but in this case how many times does the one

117
00:06:41,120 --> 00:06:42,930
appear in this container.

118
00:06:43,070 --> 00:06:46,760
Well I've got it here here and here it occurs three times.

119
00:06:46,760 --> 00:06:50,930
So what's my algorithm count from the beginning to the end.

120
00:06:50,930 --> 00:06:52,870
And again you can use a subset if you like.

121
00:06:52,870 --> 00:06:55,400
I'm always going to do beginning to end in these examples.

122
00:06:55,430 --> 00:06:58,070
This will return an integer we get back to zero.

123
00:06:58,100 --> 00:06:59,220
Didn't find it.

124
00:06:59,360 --> 00:07:00,880
Forget back a one or two or three.

125
00:07:00,890 --> 00:07:03,470
That's how many times the one occurred.

126
00:07:03,470 --> 00:07:10,940
So in this case I expect back of three that's run this and there it is three occurrences founts of the

127
00:07:10,940 --> 00:07:13,010
one was there three times.

128
00:07:13,010 --> 00:07:18,740
Again if I put something that's not in there like a 10 in this case and I run this you should get back

129
00:07:18,740 --> 00:07:19,970
zero occurrences found.

130
00:07:19,980 --> 00:07:21,570
And that's exactly what we get.

131
00:07:22,010 --> 00:07:22,430
OK.

132
00:07:22,490 --> 00:07:23,710
Simple as that.

133
00:07:24,140 --> 00:07:30,870
So let's close this one down and let's take a look at a more powerful one called the count if test.

134
00:07:30,870 --> 00:07:35,390
So here's the count if the count if is a little bit different We're going to use the lambda expression

135
00:07:35,390 --> 00:07:35,970
for it.

136
00:07:35,990 --> 00:07:37,550
This was superpowerful.

137
00:07:37,550 --> 00:07:43,640
We're only going to count how many times that element occurs if it matches some condition.

138
00:07:43,640 --> 00:07:45,860
That condition is called a predicate.

139
00:07:45,890 --> 00:07:48,290
It's something that returns a true false value.

140
00:07:48,440 --> 00:07:53,090
So here's my vector and you can see that what's my condition.

141
00:07:53,090 --> 00:07:58,480
Well you can see right here look at the lambda that tells you exactly what I'm doing.

142
00:07:58,820 --> 00:08:04,360
I'm only looking for numbers that made two or zero money looking for even numbers here right.

143
00:08:04,370 --> 00:08:06,470
That's what that predicate right here is doing.

144
00:08:06,710 --> 00:08:11,870
So I'm starting at the beginning and here's my Lamda write it up here and just we understand exactly

145
00:08:11,870 --> 00:08:13,660
what's going on.

146
00:08:13,670 --> 00:08:17,810
There's my Lamda and here's the code for the lamb though which is this piece right here and I won't

147
00:08:17,810 --> 00:08:19,460
write that again.

148
00:08:19,460 --> 00:08:20,390
That's my LAMDA.

149
00:08:20,390 --> 00:08:27,040
So what's going on I'm starting at the beginning of that VAK I'm going toward the end of the vac.

150
00:08:27,560 --> 00:08:35,060
And for each element in that sequence I'm passing it in to here and that's going to return true or false

151
00:08:35,060 --> 00:08:38,640
depending on what it's returned it's going to include in the count here.

152
00:08:38,750 --> 00:08:44,120
So in this case what's being passed into this Lamda here is one and then two and then three and then

153
00:08:44,120 --> 00:08:49,760
four and then five and so forth and all it's doing is if this is true if this predicate right here is

154
00:08:49,760 --> 00:08:53,140
true it's just counting them up.

155
00:08:53,240 --> 00:08:56,000
So in this case how many even numbers do we have we have one.

156
00:08:56,180 --> 00:08:59,230
We have two we have three we have four.

157
00:08:59,270 --> 00:09:05,120
So I would expect the four coming back over here you can see it's the same idea except this time what

158
00:09:05,120 --> 00:09:06,380
am I looking for.

159
00:09:06,620 --> 00:09:08,600
I'm looking for odd numbers.

160
00:09:08,720 --> 00:09:09,950
How many odd numbers do we have.

161
00:09:09,950 --> 00:09:13,980
We have 1 2 3 4 5.

162
00:09:14,000 --> 00:09:16,310
So we've got five I expect four from here.

163
00:09:16,480 --> 00:09:18,900
I expect this to identify.

164
00:09:19,400 --> 00:09:21,960
Now let's write another function we'll write this one together.

165
00:09:22,040 --> 00:09:27,060
How can we determine how many elements in the VEC are greater than or equal to 5.

166
00:09:27,140 --> 00:09:27,910
So what do we do.

167
00:09:27,920 --> 00:09:36,470
What we write the statement real simple numb equals stood count if that's my algorithm we're going to

168
00:09:36,470 --> 00:09:37,720
do vector began.

169
00:09:37,730 --> 00:09:41,300
Let's search the entire vector way to go to vector on end.

170
00:09:41,530 --> 00:09:45,830
Now we could have used a constant iterator here we could use a lot of things I'm just going to do real

171
00:09:45,830 --> 00:09:46,610
simple.

172
00:09:46,610 --> 00:09:52,480
So I'm going from beginning to end and at this point this is where I need my lambda.

173
00:09:52,550 --> 00:09:55,520
So all these elements are being passed into this what am I going to do.

174
00:09:55,520 --> 00:09:57,040
I'm going to put my lambda in here.

175
00:09:57,140 --> 00:09:59,870
It's going to expect a single integer.

176
00:09:59,870 --> 00:10:02,820
I'm going to write my code right in here.

177
00:10:03,000 --> 00:10:07,050
You don't want to close this and close it like that with a semi-colon.

178
00:10:07,190 --> 00:10:08,910
So what is the predicate.

179
00:10:09,410 --> 00:10:17,420
I'm going to return true if x is greater than or equal to 5 just like that.

180
00:10:17,780 --> 00:10:19,570
And I just copy this line right here.

181
00:10:19,580 --> 00:10:21,020
Move it down here.

182
00:10:21,650 --> 00:10:30,690
So all I'm going to do is I'm going to output numb numbers are greater than 5.

183
00:10:30,800 --> 00:10:32,330
How many of those do we expect.

184
00:10:32,480 --> 00:10:36,310
Well we've got to a greater than or equal to five sorry.

185
00:10:36,320 --> 00:10:39,690
So we have the five and the 100 so there's only two.

186
00:10:39,920 --> 00:10:42,630
So let's run this.

187
00:10:42,740 --> 00:10:45,610
We have four even numbers just what we expected.

188
00:10:45,620 --> 00:10:52,130
We've got five odd numbers and two of the numbers are greater than or equal to five I'll change that.

189
00:10:52,130 --> 00:10:53,890
There you go.

190
00:10:53,930 --> 00:10:55,100
Pretty simple.

191
00:10:55,220 --> 00:10:59,270
These lambdas take a little get used to but you get used to them really quickly and are so powerful

192
00:10:59,270 --> 00:11:01,640
it makes programming much much simpler.

193
00:11:02,180 --> 00:11:02,420
OK.

194
00:11:02,420 --> 00:11:06,020
So that's count if the next one will do is replace test.

195
00:11:06,020 --> 00:11:10,080
So let's take a look at replace testing them and comment that out here.

196
00:11:10,100 --> 00:11:11,100
So what does this doing.

197
00:11:11,120 --> 00:11:16,490
Well this is looking through a vector in this case where any container and it's going to replace one

198
00:11:16,490 --> 00:11:17,460
number with another.

199
00:11:17,570 --> 00:11:18,650
Pretty cool.

200
00:11:18,650 --> 00:11:21,860
So here I've got a stood VAK and I've got one two three.

201
00:11:21,860 --> 00:11:24,200
Notice the ones that's all I really care about in this case.

202
00:11:24,200 --> 00:11:26,420
I've got three of those ones right in here.

203
00:11:26,690 --> 00:11:33,040
I'm just displaying them out right now and will display them out and then I'm calling stood replace

204
00:11:33,470 --> 00:11:38,890
and I'm starting at the beginning going to the end and I'm replacing one with 100.

205
00:11:39,050 --> 00:11:42,680
And remember I'm using primitives here but we can use our own objects if you like.

206
00:11:42,680 --> 00:11:48,170
So in this case I'm replacing those three ones with 100 and then I'm just displaying it again.

207
00:11:48,350 --> 00:11:54,860
So let's give that a run and we'll be able to see that we've got one to make move this over just a little

208
00:11:54,860 --> 00:11:55,310
bit.

209
00:11:55,340 --> 00:11:59,480
One two three you can see the three ones here and you can see that the three ones have been replaced

210
00:11:59,480 --> 00:12:00,650
with hundreds.

211
00:12:00,650 --> 00:12:02,680
Really cool really easy.

212
00:12:02,720 --> 00:12:04,340
Let's do a couple of more.

213
00:12:04,610 --> 00:12:08,210
And the point of this is not to show you these specific algorithms.

214
00:12:08,330 --> 00:12:12,580
There's like I said over 50 probably closer to 90 algorithms out there.

215
00:12:12,620 --> 00:12:18,230
If you look at the numeric Hetter as well they all work in a similar way they all use iterators many

216
00:12:18,230 --> 00:12:22,550
of them use predicates So this gives you a pretty good feeling for the power that's out there and the

217
00:12:22,550 --> 00:12:23,460
things you can do.

218
00:12:23,660 --> 00:12:26,460
So this is the all of test.

219
00:12:26,660 --> 00:12:27,670
This is really cool.

220
00:12:27,860 --> 00:12:28,930
Let me show you this one.

221
00:12:29,030 --> 00:12:36,800
So here's my Veck one and I've got a 1 to 3 or 5 or 7 or 9 a 1 to 3 or 13 19 if I'm just some arbitrary

222
00:12:36,800 --> 00:12:38,140
numbers in there.

223
00:12:38,690 --> 00:12:44,180
What this is doing there is the function all of it's going to see whether all of the elements in that

224
00:12:44,180 --> 00:12:48,050
container match this predicate that superpowerful.

225
00:12:48,470 --> 00:12:55,900
So in this case I'm saying if all of those elements are greater than 10 then this will return true.

226
00:12:55,910 --> 00:12:58,730
Otherwise they will return false.

227
00:12:58,880 --> 00:13:01,220
So obviously then they're not all greater than 10 right.

228
00:13:01,220 --> 00:13:07,080
I've got a one in a three to five so I expect this to return false and I expect this to print up.

229
00:13:07,670 --> 00:13:13,610
In this case here all of them starting at the beginning going toward the end I'm checking to see if

230
00:13:13,610 --> 00:13:15,520
all the elements are less than 20.

231
00:13:15,530 --> 00:13:17,720
You can see in here they are less than 20.

232
00:13:17,720 --> 00:13:19,740
Every single one of them has less than 20.

233
00:13:19,790 --> 00:13:23,230
So I expect this guy to display right now.

234
00:13:23,480 --> 00:13:25,000
We have the all of.

235
00:13:25,000 --> 00:13:27,110
There's also another algorithm called.

236
00:13:27,110 --> 00:13:28,550
Any of which.

237
00:13:28,550 --> 00:13:31,430
So if any of them is greater than 10 it will be true.

238
00:13:31,430 --> 00:13:35,120
So you've got the power to compare them all or just compare one of them.

239
00:13:35,120 --> 00:13:42,260
So let's execute this and we can see here not all of the elements are greater than 10.

240
00:13:42,280 --> 00:13:42,900
Absolutely.

241
00:13:42,890 --> 00:13:49,410
We've got some there less than 10 but all the elements are less than 20 and I can impress upon you the

242
00:13:49,410 --> 00:13:55,350
fact enough times about how powerful this is we don't really care about the container and that's the

243
00:13:55,350 --> 00:13:56,180
cool part.

244
00:13:56,460 --> 00:13:57,820
I don't need to worry about it.

245
00:13:57,840 --> 00:14:01,960
It could be implemented in a really really complex way doesn't matter.

246
00:14:02,070 --> 00:14:04,580
The algorithms library handles it for us.

247
00:14:04,680 --> 00:14:09,600
All right so the last example is a string transform test.

248
00:14:09,600 --> 00:14:11,060
This is pretty cool.

249
00:14:11,060 --> 00:14:15,720
There is an algorithm called transform that works not just with strings it works with or with containers

250
00:14:15,720 --> 00:14:18,690
obviously but it's used very often with strings.

251
00:14:18,690 --> 00:14:20,210
Let me show you what it does.

252
00:14:20,700 --> 00:14:23,580
And this is where that two upper function comes in.

253
00:14:23,580 --> 00:14:31,530
So here I've got as one is a stood string and it's initialized to this is a test and all I'm doing is

254
00:14:31,550 --> 00:14:36,090
I'm displaying before the transform I'm displaying the strings so that's just going to display.

255
00:14:36,090 --> 00:14:38,570
This is a test just like that.

256
00:14:38,680 --> 00:14:42,640
Then I'm going to call the Stood transform function and want to tell it where to start.

257
00:14:42,970 --> 00:14:45,880
And as TR one began where to end.

258
00:14:45,880 --> 00:14:51,610
In other words it's processing the entire string and then we're to start policing its results at the

259
00:14:51,610 --> 00:14:53,560
beginning of the string again.

260
00:14:53,560 --> 00:14:54,650
And what do I want to do.

261
00:14:54,730 --> 00:14:59,120
Well I want to make each character too upper and I can pass my own function here.

262
00:14:59,230 --> 00:15:03,100
But we already have the two upper function defined in CC type.

263
00:15:03,220 --> 00:15:10,360
So may as well use it whenever you put that scope resolution operator in the front of something with

264
00:15:10,360 --> 00:15:16,600
nothing here just that guy followed by something else that means global scope.

265
00:15:16,810 --> 00:15:18,140
And that's what's going on here.

266
00:15:18,250 --> 00:15:22,610
So I'm using the two upper method or function actually that's in the global scope.

267
00:15:22,630 --> 00:15:23,920
So what do you think this does.

268
00:15:23,920 --> 00:15:30,400
It makes every single character in that string uppercase superpowerful we can process strain's if you

269
00:15:30,400 --> 00:15:34,980
remember that one example we did a while back with the way back in the course right where we encrypted

270
00:15:34,990 --> 00:15:36,190
a string.

271
00:15:36,190 --> 00:15:40,900
This makes it really easy because you can transform that string you can play all kinds of games with

272
00:15:40,900 --> 00:15:41,350
it.

273
00:15:41,500 --> 00:15:43,220
And the algorithm becomes much cleaner.

274
00:15:43,330 --> 00:15:48,980
So let's run this example and we should see the string and lowercase and then the string in uppercase

275
00:15:49,080 --> 00:15:49,480
there it is.

276
00:15:49,480 --> 00:15:50,710
This is a test.

277
00:15:50,710 --> 00:15:53,330
This is a test.

278
00:15:53,410 --> 00:15:53,790
All right.

279
00:15:53,800 --> 00:16:00,210
So that gives you a little bit of introduction and let me uncomment this out set it up just like that

280
00:16:00,220 --> 00:16:05,070
so I'll save it like that for you guys to be able to download it and play with this from the beginning.

281
00:16:05,110 --> 00:16:10,390
So here you can see the find the count the count if the replace the all of you can play around with

282
00:16:10,390 --> 00:16:11,410
the any of.

283
00:16:11,650 --> 00:16:16,050
And what I would encourage you to do is let me just close this up a little bit.

284
00:16:16,090 --> 00:16:20,440
What I would encourage you to do is play with these lambdas give yourself different conditions make

285
00:16:20,440 --> 00:16:25,030
them a little bit more complicated if you like and just get used to the lambda syntax.

286
00:16:25,180 --> 00:16:30,070
One of the things that we're not going to do in this course or maybe I will in a different section later

287
00:16:30,070 --> 00:16:35,830
on I can add a section just on lambdas that guy right there those two square brackets that's the lambdas

288
00:16:35,830 --> 00:16:36,910
capture block.

289
00:16:36,910 --> 00:16:42,610
That's a real important piece of the lambda that allows you to capture the context so if I have variables

290
00:16:42,610 --> 00:16:46,150
in here I can catch them in there and set them and use them.

291
00:16:46,150 --> 00:16:47,500
We're not doing that in here.

292
00:16:47,530 --> 00:16:49,390
We're just keeping the lambdas really simple.

293
00:16:49,390 --> 00:16:52,630
Hopefully you do understand these lambdas and how powerful they are.

294
00:16:52,630 --> 00:16:54,730
Play around with them get comfortable with them.

295
00:16:54,880 --> 00:16:57,720
It's really the way to go with modern C++.

296
00:16:57,730 --> 00:16:58,150
All right.

297
00:16:58,150 --> 00:17:01,130
So that's it for the algorithms demo.

298
00:17:01,390 --> 00:17:06,070
Now we're going to start talking about the actual containers the first one we'll talk about is stood

299
00:17:06,070 --> 00:17:06,590
a ray.

300
00:17:06,670 --> 00:17:08,380
So I'll be right back to talk about that.
