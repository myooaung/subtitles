WEBVTT
1
00:00:05.700 --> 00:00:12.020
So how do you function calls work functions using area in memory called the function call stack or program

2
00:00:12.020 --> 00:00:13.280
stack.

3
00:00:13.280 --> 00:00:16.640
A stack is analogous to a stack of books or a stack of dishes.

4
00:00:16.820 --> 00:00:22.070
If you place a book on top of the stack then you must remove that book before removing any others.

5
00:00:22.070 --> 00:00:30.110
This is referred to as last in first out or Life'll stacks also use the terms push when you put an item

6
00:00:30.110 --> 00:00:31.980
on top of the stack and pop.

7
00:00:32.000 --> 00:00:37.880
When you remove an item from the top of the stack in the case of a C++ program these items are called

8
00:00:37.880 --> 00:00:40.790
stack frames or activation records.

9
00:00:40.790 --> 00:00:45.350
All it is is a collection of information that represents an active function.

10
00:00:45.350 --> 00:00:50.930
So this is where parameters are stored local variables the return address and more each time a function

11
00:00:50.930 --> 00:00:57.400
is called an activation record is created and it's pushed onto the call stack when the function terminates.

12
00:00:57.530 --> 00:01:02.630
We poppets activation record off the call stack and now the top of the stack is the function that is

13
00:01:02.630 --> 00:01:07.130
called The one we just popped off the call stack works in a very orderly manner.

14
00:01:07.340 --> 00:01:09.970
You can't jump into or out of the middle of the stack.

15
00:01:10.010 --> 00:01:12.810
You must follow the Life'll rules.

16
00:01:12.860 --> 00:01:16.060
Also remember that the call stack is finite in size.

17
00:01:16.190 --> 00:01:21.740
If you activate too many functions on the call stack then it's possible to run out of stack space.

18
00:01:21.740 --> 00:01:25.690
This results in a stack overflow error which is usually an unrecoverable error.

19
00:01:25.700 --> 00:01:27.280
Your program will terminate.

20
00:01:27.320 --> 00:01:30.760
The best way to understand how function calls work is to show you visually.

21
00:01:30.860 --> 00:01:36.040
Let's do that now in order to understand how function calls work.

22
00:01:36.100 --> 00:01:39.230
We really need to understand how memory is laid out here.

23
00:01:39.230 --> 00:01:42.720
Let's say that this is the memory for our program.

24
00:01:42.970 --> 00:01:47.270
It's divided into segments So here we've got the code area.

25
00:01:47.490 --> 00:01:49.170
This is where the code resides.

26
00:01:49.170 --> 00:01:52.490
Then we've got an area for static variables or for global variables.

27
00:01:52.500 --> 00:01:54.150
That's where they're stored right here.

28
00:01:55.840 --> 00:01:58.080
And here is the area for the stack.

29
00:01:58.090 --> 00:02:02.800
This is the function call stack and this is what we're really concerned about in this video.

30
00:02:03.040 --> 00:02:05.630
So this is the area I'm going to concentrate on in this video.

31
00:02:05.660 --> 00:02:10.100
Then we've got another area in memory here called the heap or the Freestore.

32
00:02:10.120 --> 00:02:15.000
We'll talk a lot about this area when we talk about pointers and dynamic memory allocation.

33
00:02:15.280 --> 00:02:19.600
So in this video keep in mind that what I'm talking about is this area right here that's the function

34
00:02:19.600 --> 00:02:20.730
call stack.

35
00:02:20.870 --> 00:02:23.950
So when we call functions and they finish and they pop off the stack.

36
00:02:23.950 --> 00:02:26.920
This is what we're talking about this area in memory right here.

37
00:02:30.400 --> 00:02:37.180
OK so I mean the idea and I'm in the section 11 workspace in the how function calls work project and

38
00:02:37.180 --> 00:02:42.070
I've got a real simple example here that I'm going to walk through in detail in a second but before

39
00:02:42.070 --> 00:02:47.520
I do that let's concentrate and look and what typically happens when one function calls another.

40
00:02:47.530 --> 00:02:51.370
So I've written it out here and this is not the only way to achieve this.

41
00:02:51.370 --> 00:02:53.610
There's a lot of different ways to get to the same end.

42
00:02:53.830 --> 00:02:58.660
But this is what typically happens so I suppose I have a main and that main calls a function called

43
00:02:58.660 --> 00:02:59.400
func one.

44
00:02:59.500 --> 00:03:03.010
That's what's happening here I've got Main and it's calling phunk one.

45
00:03:03.640 --> 00:03:05.510
And what happens well.

46
00:03:05.650 --> 00:03:08.230
Main it pushes space on the stack.

47
00:03:08.230 --> 00:03:13.420
Remember everything is based on the stack for the return value that function func one is going to return

48
00:03:13.420 --> 00:03:16.450
something to main main is the one that needs to get that result.

49
00:03:16.450 --> 00:03:21.730
Once that function is done I need to push space for the parameters that are being passed in if any in

50
00:03:21.730 --> 00:03:26.590
this case we've got to right here X and Y and we need to push the return address.

51
00:03:26.590 --> 00:03:30.580
That's important because function one needs to know where to come back to.

52
00:03:30.880 --> 00:03:35.860
Then we transfer control over to function one which is basically an assembly language instruction called

53
00:03:35.890 --> 00:03:36.310
Jump.

54
00:03:36.310 --> 00:03:38.650
You just jump over there and you're off and running.

55
00:03:38.650 --> 00:03:40.540
So control is transferred.

56
00:03:40.540 --> 00:03:45.610
Now one function and one side it pushes the address of the previous activation record.

57
00:03:45.760 --> 00:03:47.680
That's basically moving a stack pointer.

58
00:03:47.680 --> 00:03:49.870
That way you know where the top of the stack is.

59
00:03:49.870 --> 00:03:53.280
You push any register values that need to be restored.

60
00:03:53.590 --> 00:03:58.660
Then you perform the code in function one when the code is finished you restore the register values

61
00:03:58.660 --> 00:04:03.170
that way Main is where it was before you restore the previous activation record right.

62
00:04:03.200 --> 00:04:05.870
You basically pop all this stuff off the stack.

63
00:04:06.040 --> 00:04:08.580
You store any function result where main wants it.

64
00:04:08.580 --> 00:04:12.910
You can see main gave you the address and you transfer control back to main.

65
00:04:12.910 --> 00:04:18.540
So you jump back to that return address that main pushed on main side.

66
00:04:18.540 --> 00:04:22.580
Now remember function 1 is now done so main knows where the parameters are.

67
00:04:22.590 --> 00:04:24.010
It knows where the return values are.

68
00:04:24.010 --> 00:04:29.720
So it needs to pop that information off the stack to clear up the stack and also grab those values if

69
00:04:29.720 --> 00:04:30.620
it can.

70
00:04:30.640 --> 00:04:33.180
OK so this is the general flow.

71
00:04:33.330 --> 00:04:35.790
We're not going to cover all the details here.

72
00:04:35.800 --> 00:04:38.050
I'm more interested in the parameter side of it.

73
00:04:38.140 --> 00:04:42.910
So what I'm going to do is I'm going to walk through this example and I'll draw a function call stack

74
00:04:42.910 --> 00:04:47.620
over here and we'll go through it in detail so you can see exactly what's going on from the parameter

75
00:04:47.620 --> 00:04:48.310
perspective.

76
00:04:48.310 --> 00:04:52.840
I'm not going to worry about stack pointers and static links and dynamic links and all the stuff that's

77
00:04:52.900 --> 00:04:58.060
on an activation record but more generally Let's worry about the parameter passing so you can really

78
00:04:58.060 --> 00:05:02.560
understand what's going on because it's important to understand this especially when we learned about

79
00:05:02.560 --> 00:05:04.080
recursion later on.

80
00:05:06.060 --> 00:05:08.940
OK so let's walk through this example.

81
00:05:09.060 --> 00:05:11.350
Program execution starts at two main.

82
00:05:11.580 --> 00:05:16.530
So main is going to be activated it's got a function activation record because it is a function.

83
00:05:16.530 --> 00:05:21.730
So let's assume here Main is on the stack already and Main has an X.

84
00:05:21.870 --> 00:05:24.270
It's got a Y and it's got a Z.

85
00:05:24.270 --> 00:05:26.830
So we need space for those local variables.

86
00:05:26.850 --> 00:05:35.610
You can see X is initialized to 10 y is initialized to 20 and Z is 0 in this case OK.

87
00:05:35.700 --> 00:05:41.900
So now Maine is right here and we're executing this piece of code z equals function one with x y.

88
00:05:42.090 --> 00:05:43.710
So we're calling function 1.

89
00:05:43.710 --> 00:05:49.860
So what happens is main stops what it's doing it allocates space for X Y and I'm just going to do this

90
00:05:49.860 --> 00:05:55.190
conceptually so we don't waste a lot of time know diddling with the stack and pointers and things.

91
00:05:55.200 --> 00:06:02.760
But let's suppose that at this point we get we're going to push an activation record on here for function

92
00:06:02.760 --> 00:06:03.720
one.

93
00:06:03.780 --> 00:06:07.230
And if this is a little different from the example I showed you that I just walk through but it's a

94
00:06:07.230 --> 00:06:08.220
little easier to draw.

95
00:06:08.340 --> 00:06:10.060
So this is where we're at.

96
00:06:10.320 --> 00:06:21.030
So now we're at function one function one is now on the stack and we need space for a b and result.

97
00:06:21.360 --> 00:06:21.960
OK.

98
00:06:22.200 --> 00:06:26.290
So let's say we've got a we've got B and we've got result.

99
00:06:28.170 --> 00:06:30.270
We're doing pass by value here.

100
00:06:30.270 --> 00:06:38.930
So what's going to happen is the X hooks up with DA and the y hooks up with the BE RIGHT.

101
00:06:38.940 --> 00:06:42.030
There's your actual formal correspondence here.

102
00:06:42.110 --> 00:06:47.490
So X is 10 and that goes copied into the A.

103
00:06:48.110 --> 00:06:51.770
Why is 20 in this case so we're going to copy that to the B.

104
00:06:52.340 --> 00:06:52.690
OK.

105
00:06:52.700 --> 00:06:54.660
So this is where we're at right now.

106
00:06:54.680 --> 00:06:58.610
Now let me clear up a little bit of this up.

107
00:06:58.760 --> 00:06:59.840
All right so that's where we're at now.

108
00:06:59.840 --> 00:07:03.410
Now we start executing this function function 1.

109
00:07:03.530 --> 00:07:05.380
So it's going to add a and b.

110
00:07:05.510 --> 00:07:07.430
Ok so that would be 20 plus 10.

111
00:07:07.430 --> 00:07:13.490
So this gives me a 30 and it's going to store that value into result right here.

112
00:07:13.520 --> 00:07:19.250
So now result gets a 30 originally result was 0 right because I zeroed it out here I did write it on

113
00:07:19.250 --> 00:07:21.630
here but you get the idea here.

114
00:07:21.810 --> 00:07:28.350
Now we're going to call function 2 and we're going to pass in result a and b.

115
00:07:28.760 --> 00:07:33.550
So again let's stop what we're doing here we need to come back and finish this code.

116
00:07:33.590 --> 00:07:41.670
So we're here and now we're activating function to and all along those stack pointers and moving along

117
00:07:41.670 --> 00:07:41.910
here.

118
00:07:41.910 --> 00:07:44.750
This is the part that I'm not going to worry about drawing here.

119
00:07:45.000 --> 00:07:46.700
So now we're in function too.

120
00:07:46.800 --> 00:07:49.360
We need space for X Y and Z.

121
00:07:49.440 --> 00:07:51.720
But notice X is a reference parameter.

122
00:07:51.720 --> 00:07:53.200
OK so we'll have to deal with that.

123
00:07:53.400 --> 00:07:55.270
So we've got X Y and Z.

124
00:07:55.350 --> 00:07:55.670
All right.

125
00:07:55.680 --> 00:07:59.910
So let's do X Y and Z.

126
00:08:00.750 --> 00:08:02.530
All right let's do Y and Z first.

127
00:08:02.550 --> 00:08:06.130
We're going to pass those by value what is y and z.

128
00:08:06.150 --> 00:08:12.390
Well we've got three here we've got result which is the corresponding to X a corresponds to Y and B

129
00:08:12.390 --> 00:08:13.420
corresponds to Z.

130
00:08:13.440 --> 00:08:13.880
Right.

131
00:08:14.010 --> 00:08:17.940
So y gets the value of a the value that was 10.

132
00:08:17.940 --> 00:08:22.590
So why is going to get 10 and Z gets the value of B.

133
00:08:22.590 --> 00:08:25.540
B was 20 Z's going to be 20.

134
00:08:26.370 --> 00:08:29.790
K now let's talk about that reference parameter.

135
00:08:29.790 --> 00:08:33.750
Remember what we talked about reference primers we said that there were aliases right.

136
00:08:33.930 --> 00:08:37.670
So in this case x is an alias for result right here.

137
00:08:38.810 --> 00:08:42.120
So X is an alias for result.

138
00:08:42.170 --> 00:08:46.600
So any changes I make to X result will be updated.

139
00:08:46.850 --> 00:08:47.090
Right.

140
00:08:47.090 --> 00:08:48.360
Because that's the whole idea.

141
00:08:48.380 --> 00:08:51.050
That's the whole point of pass by reference.

142
00:08:51.050 --> 00:08:53.140
Now we started executing this code.

143
00:08:53.540 --> 00:08:56.510
The code says X equals x.

144
00:08:56.510 --> 00:08:59.370
Plus y plus Z.

145
00:08:59.420 --> 00:09:01.410
That's what that means right there.

146
00:09:01.440 --> 00:09:07.880
OK so we've got Y and Z here which are 10 and 20 this becomes 10 plus 20.

147
00:09:09.410 --> 00:09:12.910
And then what's X where X is a reference to.

148
00:09:13.130 --> 00:09:13.870
Result.

149
00:09:14.000 --> 00:09:20.290
Result is 30 so we're going to grab the 30 and add those two together that gives us 60.

150
00:09:20.500 --> 00:09:22.570
So now we're going to say X equals 60.

151
00:09:22.570 --> 00:09:24.940
Well again x is an alias for result.

152
00:09:25.030 --> 00:09:29.990
So what we're doing is we're updating that guy to 60 right here OK.

153
00:09:30.070 --> 00:09:31.960
Now function 2 is done.

154
00:09:31.960 --> 00:09:32.850
So what happens.

155
00:09:32.890 --> 00:09:34.470
It gets popped off the stack.

156
00:09:34.690 --> 00:09:35.760
So let's do that.

157
00:09:35.770 --> 00:09:37.960
So function 2 is now gone from here.

158
00:09:37.960 --> 00:09:39.550
All that's gone.

159
00:09:39.550 --> 00:09:45.520
I'm back in function one well-worded function one leave off that left off right here.

160
00:09:45.580 --> 00:09:47.370
We're back from the function call now.

161
00:09:47.410 --> 00:09:54.340
So it needs to return result which results 60 was it a return result to right here.

162
00:09:54.340 --> 00:09:59.530
Remember result right there is the result of that function call.

163
00:09:59.530 --> 00:10:05.440
So what I'm going to do here is I'm basically in the say z equals 60.

164
00:10:05.600 --> 00:10:07.090
So that's what's happening here.

165
00:10:08.470 --> 00:10:10.310
I'm popping off the stack now.

166
00:10:11.650 --> 00:10:16.230
So function one is done all this is gone.

167
00:10:16.280 --> 00:10:23.650
I'm back to Main and all main has to do is that one out put statement right here which displays z and

168
00:10:23.650 --> 00:10:25.080
z is now 60.

169
00:10:25.270 --> 00:10:27.340
And the program's done.

170
00:10:27.490 --> 00:10:32.230
So this gives you an idea of conceptually what's going on with function calling.

171
00:10:32.230 --> 00:10:37.450
Now I skipped a lot of these steps here on purpose because there's a lot to draw on it gets really really

172
00:10:37.450 --> 00:10:38.120
cluttered.

173
00:10:38.200 --> 00:10:44.710
But think about all this as function call overhead you really don't have to worry about pushing registers

174
00:10:44.710 --> 00:10:48.400
and you know transferring control and all that's done for you by the compiler.

175
00:10:48.580 --> 00:10:51.360
But there is a certain amount of function call overhead here.

176
00:10:51.520 --> 00:10:56.780
So let's run this program and see that we indeed get to 60 and there it is there's a result.

177
00:10:56.800 --> 00:10:59.040
There are 60.

178
00:10:59.180 --> 00:11:04.040
OK so hopefully this works we'll do this again when we talk about recursion and that's when a function

179
00:11:04.040 --> 00:11:06.930
calls a function calls a function calls itself.

180
00:11:07.040 --> 00:11:12.320
So it's really important to understand what's going on with the stack call frame so we really know what's

181
00:11:12.320 --> 00:11:14.460
what's being passed and what's being returned.

182
00:11:14.570 --> 00:11:18.950
And you can see here that if we don't have a way to unwind to get back to where we were we could just

183
00:11:18.950 --> 00:11:22.550
really just you know run out of memory and get a stack overflow where.
