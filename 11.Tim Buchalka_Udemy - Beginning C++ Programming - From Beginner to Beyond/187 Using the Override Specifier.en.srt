1
00:00:05,490 --> 00:00:10,600
In this video we'll learn about the C++ 11 override specifier.

2
00:00:10,600 --> 00:00:15,760
We know that we can override base class virtual functions in our derived classes.

3
00:00:15,820 --> 00:00:21,280
We also know that we must provide the exact function signature in the derived class including the return

4
00:00:21,280 --> 00:00:22,190
type.

5
00:00:22,270 --> 00:00:23,470
But what if we don't.

6
00:00:23,770 --> 00:00:28,960
What if we inadvertently make a small change to the function signature by mistake.

7
00:00:28,960 --> 00:00:34,530
If this happens then the function we intended to override doesn't get overridden at all.

8
00:00:34,540 --> 00:00:40,240
Instead it gets redefined and we know that redefined functions are statically bound not dynamically

9
00:00:40,240 --> 00:00:41,410
bound.

10
00:00:41,470 --> 00:00:46,660
This type of error is really hard to find some times since the function's signatures may look very very

11
00:00:46,660 --> 00:00:50,040
similar and it may not be easy to spot the difference.

12
00:00:50,320 --> 00:00:55,840
C++ 11 addresses this issue by providing the override specifier.

13
00:00:55,840 --> 00:01:00,970
You can add the specifier to the method you're writing in your derived class and the C++ compiler will

14
00:01:00,970 --> 00:01:05,100
ensure that you're indeed overriding and not redefining.

15
00:01:05,110 --> 00:01:08,740
This is a simple addition to the language but a very useful one.

16
00:01:08,770 --> 00:01:12,430
Let's see what it looks like in code.

17
00:01:12,430 --> 00:01:15,520
Here we have two simple classes in a class hierarchy.

18
00:01:15,640 --> 00:01:18,800
The base class has a virtual function named say hello.

19
00:01:19,060 --> 00:01:25,020
It returns nothing expects nothing and is a Konst function in the derived class.

20
00:01:25,030 --> 00:01:30,070
I wanted to override dysfunction but when I wrote the function prototype I forgot the concept at the

21
00:01:30,070 --> 00:01:31,270
end of the prototype.

22
00:01:31,690 --> 00:01:38,080
Since the function signatures are not exactly the same the C++ compiler considers this function redefinition

23
00:01:38,320 --> 00:01:43,540
and not overriding it will compile just fine since this is perfectly legal.

24
00:01:44,080 --> 00:01:46,260
Let's see the difference between the methods.

25
00:01:47,230 --> 00:01:51,600
Here it might be easier to see that the function signatures are indeed different.

26
00:01:51,970 --> 00:01:57,700
So the say hello function of the derived class will be statically bound not dynamically bound as we

27
00:01:57,700 --> 00:01:58,920
expected.

28
00:01:58,930 --> 00:02:05,020
This will cause unexpected behavior when we use a base class pointer.

29
00:02:05,050 --> 00:02:12,340
Here we have two pointers to a base class object P1 and P2 p one is pointing to a base object and P2

30
00:02:12,340 --> 00:02:14,800
is pointing to a derived object.

31
00:02:14,800 --> 00:02:21,210
When I call say hello via one this will be bound dynamically and it will call Bass's say hello.

32
00:02:21,560 --> 00:02:24,760
However when I call say hello via pointer to.

33
00:02:25,060 --> 00:02:31,270
I expected to display hello on a derived class object because I expected dynamic binding but I messed

34
00:02:31,270 --> 00:02:36,490
up when I created the function by not matching the signature Exactly so the function call is statically

35
00:02:36,490 --> 00:02:37,560
bound to base.

36
00:02:37,550 --> 00:02:38,340
Say hello.

37
00:02:38,650 --> 00:02:43,180
We can easily prevent this error by using the C++ 11 override specifier

38
00:02:45,850 --> 00:02:51,670
notice the say hello function of the derived class we can place the override specifier after the function

39
00:02:51,670 --> 00:02:52,630
prototype.

40
00:02:52,660 --> 00:02:57,700
This tells the compiler that you intend to override this function and it should make sure that you do

41
00:02:57,700 --> 00:03:03,550
so in this case the compiler will produce an error and you can add that Konst to fix the problem.

42
00:03:03,970 --> 00:03:05,320
Let's head over to the idea.

43
00:03:05,320 --> 00:03:08,340
See this example in life code.

44
00:03:08,680 --> 00:03:16,030
I mean the idea I'm in the Section 16 workspace in the using override project.

45
00:03:16,030 --> 00:03:21,610
You can see here that I've got a simple base class and all it has inside is a virtual function right

46
00:03:21,610 --> 00:03:23,580
here called Say hello.

47
00:03:23,920 --> 00:03:29,860
And notice that this is a Konst function and all it says is Hello I'm a base class object.

48
00:03:29,860 --> 00:03:33,970
Now I've got a derived class here that's derived publicly from the base class.

49
00:03:34,270 --> 00:03:41,050
And what I meant to do here was to override this say hello function right here but I messed up and I

50
00:03:41,050 --> 00:03:43,430
forgot that Cotts right there.

51
00:03:44,200 --> 00:03:46,150
So should have had a Konst there but it doesn't.

52
00:03:46,150 --> 00:03:53,680
So now as far as the compiler is concerned this function right here my derived class is redefining the

53
00:03:53,680 --> 00:03:55,980
base class function not overriding it.

54
00:03:56,020 --> 00:03:59,670
So it's going to statically bind it rather than dynamically bind it.

55
00:03:59,940 --> 00:04:03,280
OK so let's take a look at the main and we'll walk through this.

56
00:04:03,280 --> 00:04:05,300
You can see exactly what's going to happen.

57
00:04:05,500 --> 00:04:11,910
OK so here's P1 and P One is a pointer to a base object and instantiating a base object and point a

58
00:04:11,920 --> 00:04:12,820
right to it.

59
00:04:12,820 --> 00:04:16,930
So now when I call say hello via that P1 pointer.

60
00:04:17,200 --> 00:04:23,980
Obviously this is going to do dynamic binding and it's going to bind it to my base class and that's

61
00:04:23,980 --> 00:04:24,730
what I'm pointing to.

62
00:04:24,730 --> 00:04:26,910
So this will call base say hello.

63
00:04:27,370 --> 00:04:31,270
In this example this is a little different than what we've seen here have.

64
00:04:31,290 --> 00:04:36,710
P2 is a pointer to a derived object and instantiating a Derived object.

65
00:04:36,730 --> 00:04:40,870
So in this case what's going to happen is this is not a base class pointer.

66
00:04:40,870 --> 00:04:43,360
This is just a regular old pointer to an object.

67
00:04:43,360 --> 00:04:45,760
So in this case it's going to be statically bound.

68
00:04:45,940 --> 00:04:48,730
And we're going to call derived say hello.

69
00:04:49,030 --> 00:04:50,780
This is the problematic one right here.

70
00:04:50,780 --> 00:04:56,220
P 3 The problem here is since we did not override Instead we redefined.

71
00:04:56,410 --> 00:05:00,110
This will not be bound dynamically to be bound statically.

72
00:05:00,130 --> 00:05:03,790
So as far as the compiler is concerned I've got a base pointer right here.

73
00:05:03,790 --> 00:05:08,920
So it's going to bind it to base say hello but I really wanted it to bind to derive say hello.

74
00:05:09,150 --> 00:05:10,690
Right so let's run this.

75
00:05:10,750 --> 00:05:14,230
And then what we'll do is we'll fix this with the override keyword.

76
00:05:14,230 --> 00:05:16,810
So let me run this.

77
00:05:16,810 --> 00:05:18,060
And here's our output.

78
00:05:18,070 --> 00:05:21,500
And you could see our main enemy scroll up just a little bit right here.

79
00:05:21,520 --> 00:05:27,550
She could see here P1 points to a base and it's looking at a base so high a base class object.

80
00:05:27,880 --> 00:05:33,640
In the case of P2 we're statically binding because we were pointing to a derived object and that's exactly

81
00:05:33,640 --> 00:05:34,480
what we have.

82
00:05:34,540 --> 00:05:37,290
So to say hello I'm a derived class object.

83
00:05:37,450 --> 00:05:44,350
Here's the problematic one on 09:30 P3 is pointing to a base object and it's currently pointing to the

84
00:05:44,350 --> 00:05:45,850
derived right.

85
00:05:45,940 --> 00:05:50,860
Here is where the problem is because I redefined that function was going to be statically bound rather

86
00:05:50,860 --> 00:05:52,300
than dynamically bound.

87
00:05:52,330 --> 00:05:55,490
So it's called base say hello and you could see right there.

88
00:05:55,510 --> 00:05:57,190
Hi I'm a base class opti.

89
00:05:57,190 --> 00:05:58,400
That's not what I wanted.

90
00:05:58,600 --> 00:06:04,330
I wanted it to say hello I'm a derived class object because I wanted to use dynamic polymorphism.

91
00:06:04,330 --> 00:06:05,500
So how do we fix this.

92
00:06:05,500 --> 00:06:11,110
Well the fix is easy or we just come up here and put Konst in there but we can also use the override

93
00:06:11,110 --> 00:06:13,660
keyword in C++ 11 which is really handy.

94
00:06:13,660 --> 00:06:17,810
You really should do this every time that you're going to override a function or a derived class.

95
00:06:17,920 --> 00:06:20,420
Simply put the override word in there.

96
00:06:20,800 --> 00:06:21,170
Right.

97
00:06:21,190 --> 00:06:24,490
You can put the override specifier right at the end of the function prototype.

98
00:06:24,670 --> 00:06:29,010
So now when you compile let me just build this real quick.

99
00:06:29,050 --> 00:06:33,850
Now you get an error and the error says virtual void derive say hello marked as override but it does

100
00:06:33,850 --> 00:06:39,090
not override that gives you a really good clue as to that you're not overriding anything here.

101
00:06:39,190 --> 00:06:41,400
So you can come in here and say OK I got it.

102
00:06:41,420 --> 00:06:46,830
There's my Konst you can put your concert in there now and then when you run.

103
00:06:47,620 --> 00:06:51,000
You can see that now let me scroll up just a little bit.

104
00:06:51,070 --> 00:06:54,370
Now you can see that third statement this says hello I'm a derived class object.

105
00:06:54,370 --> 00:06:55,530
That's what we want.

106
00:06:55,690 --> 00:07:00,190
So now we've got our polymorphic behavior so real handy really easy to do.

107
00:07:00,190 --> 00:07:03,650
Use it all the time and it'll save you a lot of grief with debugging.
