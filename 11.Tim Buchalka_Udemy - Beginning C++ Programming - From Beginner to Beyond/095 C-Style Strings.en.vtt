WEBVTT
1
00:00:05.210 --> 00:00:12.480
In this video we'll learn about C-style strings C-style strings are about as simple as it gets.

2
00:00:12.500 --> 00:00:17.060
There are a sequence of characters stored contiguously in memory.

3
00:00:17.060 --> 00:00:19.310
They're implemented as an array of characters.

4
00:00:19.370 --> 00:00:25.150
So you can access individual characters using the array subscript syntax that we've already learned.

5
00:00:25.190 --> 00:00:27.760
How do you know where the sequence of characters ends.

6
00:00:28.070 --> 00:00:34.190
C-style strings use a sentinel value that marks the end of the string the null character is use which

7
00:00:34.190 --> 00:00:36.240
is equivalent to the images 0.

8
00:00:36.680 --> 00:00:42.770
So C-style strings are often referred to as zero or null terminated strings.

9
00:00:42.800 --> 00:00:46.170
We've been using C-style strings all along in this course.

10
00:00:46.250 --> 00:00:49.560
We've used them mainly in our output statements as string literals.

11
00:00:50.410 --> 00:00:56.080
Recall that string literals are sequences of characters enclosed in double quotes these string literals

12
00:00:56.080 --> 00:01:02.000
are constants so we can't change them just like we can't change integer literals even though we don't

13
00:01:02.000 --> 00:01:08.020
explicitly provide a known character at the end of the string literal C++ inserts one for us.

14
00:01:08.090 --> 00:01:10.720
That's the way the end of string is handled.

15
00:01:10.730 --> 00:01:16.550
Let's see an example of a string literal and how it started in memory.

16
00:01:16.640 --> 00:01:21.040
Here's a real simple example that shows how C-style strings are stored in memory.

17
00:01:21.200 --> 00:01:25.090
In this case we have a C-style string literal containing the sequence of characters.

18
00:01:25.130 --> 00:01:27.800
C++ is fun.

19
00:01:27.800 --> 00:01:33.340
These characters are stored in a contiguous block of memory that can be accessed as an array.

20
00:01:33.350 --> 00:01:40.790
Notice that C++ is fun has exactly 10 characters but the compiler allocated 11 characters for the array

21
00:01:41.090 --> 00:01:48.630
because it needed space for the null character at the end liberals are great and very useful.

22
00:01:48.630 --> 00:01:51.960
But more often than not need to create string variables.

23
00:01:52.230 --> 00:01:56.480
Let's see how we can create C-style string variables in this example.

24
00:01:56.480 --> 00:02:02.040
We're declaring an array and initializing it to Frank using initializer list syntax as we've been doing

25
00:02:02.040 --> 00:02:04.230
with integers and other types.

26
00:02:04.230 --> 00:02:10.200
Notice that the C++ compiler will allocate 6 characters for this array since it needs to terminate the

27
00:02:10.200 --> 00:02:12.360
string with the null character.

28
00:02:12.360 --> 00:02:15.100
Also notice that the size of the array is fixed.

29
00:02:15.150 --> 00:02:20.850
So if I wanted to add a y to Frank and create Franki I couldn't without having some potential problems

30
00:02:21.150 --> 00:02:24.010
since the new string would not be null terminated.

31
00:02:24.390 --> 00:02:26.800
You won't get a compiler error or even a warning.

32
00:02:26.820 --> 00:02:31.020
In fact in this case my name sub 5 is still within the array bounds.

33
00:02:31.110 --> 00:02:32.360
Let's see another example.

34
00:02:34.200 --> 00:02:39.840
In this example we are explicitly asking the compiler to allocate 8 characters for the character array

35
00:02:40.260 --> 00:02:42.130
and we're initializing it to Frank.

36
00:02:42.240 --> 00:02:48.480
In this case it will initialize the array with F R A and K and the rest of the space will be zeroed

37
00:02:48.480 --> 00:02:50.720
out with no characters.

38
00:02:50.820 --> 00:02:57.150
In this case if I wanted to change the character Id index 5 which is that first no character to a lowercase

39
00:02:57.240 --> 00:03:03.800
why it would be just fine since the string now contains Franki and is still null terminated.

40
00:03:03.810 --> 00:03:05.100
Let's see another example.

41
00:03:07.690 --> 00:03:14.000
In this example we ask the compiler to allocate an array of 8 characters and we don't initialize them.

42
00:03:14.000 --> 00:03:20.120
This could be very problematic because if you use this arrays a string all C-style string functions

43
00:03:20.120 --> 00:03:22.670
expect to find a null character.

44
00:03:22.730 --> 00:03:24.770
And here there may or may not be one.

45
00:03:24.770 --> 00:03:27.320
We really don't know what the data in the array is.

46
00:03:27.380 --> 00:03:29.290
Suppose we want it to display the string.

47
00:03:29.290 --> 00:03:31.160
Now how do you think this would happen.

48
00:03:31.160 --> 00:03:33.770
How do you think C-style strings are displayed.

49
00:03:33.770 --> 00:03:39.320
Well in this case we started the first element of the array and we iterate through the array and every

50
00:03:39.320 --> 00:03:41.700
character we see if it's the null character.

51
00:03:41.990 --> 00:03:44.900
If it is we stop since we reached the end of the string.

52
00:03:45.170 --> 00:03:48.920
If it's not we print the character and then we move to the next character.

53
00:03:49.070 --> 00:03:51.290
In this case we don't know what's going to happen.

54
00:03:51.290 --> 00:03:55.820
We might see and know right away or we might not see a null for a very long time.

55
00:03:55.850 --> 00:03:58.710
In the meantime I'm printing stuff to the screen.

56
00:03:58.850 --> 00:04:04.200
Some of the stuff may not even be displayable since some characters that control characters you might

57
00:04:04.200 --> 00:04:09.800
think we can initialize C-style strings using the assignment operator just like we have with other types.

58
00:04:09.870 --> 00:04:14.760
But this won't work if we try to assign the C-style literal Frank to my name.

59
00:04:14.760 --> 00:04:21.350
We get a compiler error because that's not the way C-style strings work array names and literals evaluate

60
00:04:21.350 --> 00:04:27.780
to their location in memory so we're effectively assigning one location to another which is illegal.

61
00:04:27.780 --> 00:04:30.570
Think of this as saying assign 10 to 12.

62
00:04:30.600 --> 00:04:33.150
It doesn't make sense and the compiler won't allow it.

63
00:04:33.390 --> 00:04:38.640
In order to assign one string to another we need to use a function called string copy that copies the

64
00:04:38.640 --> 00:04:39.840
C-style literal.

65
00:04:39.840 --> 00:04:43.440
F R A N K to the my name array.

66
00:04:43.500 --> 00:04:48.480
There are lots of C-style functions that C++ brings in from the C programming language.

67
00:04:48.480 --> 00:04:49.830
Let's see a few of them.

68
00:04:50.310 --> 00:04:55.680
The C string library contains many functions that work with C-style strings.

69
00:04:55.680 --> 00:04:58.380
These functions are used to copy concatenate.

70
00:04:58.390 --> 00:05:02.260
Compare search get the length of a string and many more.

71
00:05:02.280 --> 00:05:07.680
They all rely on one common factor that the sequence of characters they're working on is terminated

72
00:05:07.680 --> 00:05:09.590
with a null character.

73
00:05:09.630 --> 00:05:13.310
If you use the C-style strings you must be very aware of this.

74
00:05:13.320 --> 00:05:17.600
For example suppose you have a C-style straight into one to determine its length.

75
00:05:17.970 --> 00:05:19.840
Well let's say we have Frank.

76
00:05:20.070 --> 00:05:25.220
Since no length information is stored with the string only the characters in the array.

77
00:05:25.260 --> 00:05:30.480
The only way to determine the length is to start counting at the first array element and then increment

78
00:05:30.480 --> 00:05:33.300
the longest until you see the no character.

79
00:05:33.300 --> 00:05:37.370
So in the case of Frank we would look at the F increment one.

80
00:05:37.440 --> 00:05:46.410
Look at the R to the a 3 d n for the K 5 then we see a null character and we stop.

81
00:05:46.410 --> 00:05:48.420
Now we know that the length is 5.

82
00:05:48.540 --> 00:05:52.330
But if that null character is not there we keep going.

83
00:05:52.330 --> 00:05:53.460
We keep counting.

84
00:05:53.460 --> 00:05:56.130
So the result will very likely be incorrect.

85
00:05:56.760 --> 00:06:02.460
Even worse if you're copying one string into another and the string you're copying isn't null terminated.

86
00:06:02.520 --> 00:06:08.490
You'll very likely exceed the bounds of the target string and very likely cause a program crash.

87
00:06:08.490 --> 00:06:14.310
This all sounds pretty ominous but in fact we've been programming in C and C++ using C-style strings

88
00:06:14.310 --> 00:06:18.660
for a very long time and we've gotten pretty good at understanding these issues.

89
00:06:18.720 --> 00:06:22.230
But wouldn't it be great if we didn't have to worry about these issues at all.

90
00:06:22.260 --> 00:06:24.560
That's where C++ strings come in.

91
00:06:24.570 --> 00:06:26.650
We'll talk about them later in this section.

92
00:06:27.610 --> 00:06:31.160
Here are a few examples that use the C-style string functions.

93
00:06:31.390 --> 00:06:34.210
You typically have a function and you pass into the function.

94
00:06:34.210 --> 00:06:37.420
The name of the string or the string literal or both.

95
00:06:37.540 --> 00:06:42.890
We'll talk about functions in detail shortly but conceptually they're really easy to understand.

96
00:06:42.910 --> 00:06:48.640
For example if I'm a function then my job is to return the color of a crayon passed to me then all I

97
00:06:48.640 --> 00:06:50.400
need from you is the crayon.

98
00:06:50.470 --> 00:06:52.470
So you call me and send me the crayon.

99
00:06:52.470 --> 00:06:55.360
I'll return red green blue and so forth.

100
00:06:55.360 --> 00:06:56.320
That's the idea.

101
00:06:56.410 --> 00:07:01.400
And here it's the same if you want to know the length of the string pass in the string to the As to

102
00:07:01.410 --> 00:07:05.270
your lend function and it returns the strings length.

103
00:07:05.320 --> 00:07:13.580
Here are just a few examples that copy concatenate and compare strings C++ also has an other library

104
00:07:13.580 --> 00:07:19.000
called C standard lib that contains functions that convert strings to other types.

105
00:07:19.070 --> 00:07:25.080
For example if I have a string with the digits 1 in 2 I can convert that to the integer 12.

106
00:07:25.370 --> 00:07:28.090
Sometimes these are really useful functions.

107
00:07:28.120 --> 00:07:31.130
However all of these functions rely on the same thing.

108
00:07:31.130 --> 00:07:34.170
They're all working with null terminated strings.

109
00:07:34.220 --> 00:07:37.690
If you're using C-style strange you have to be very aware of that.

110
00:07:39.200 --> 00:07:41.530
Well that completes this video in the next video.

111
00:07:41.540 --> 00:07:45.610
Head over to the idea we'll read some examples using C-style strings.
