WEBVTT
1
00:00:05.450 --> 00:00:13.140
In this video we'll learn about C++ is logical operators these operators allow us to build complex conditions

2
00:00:13.140 --> 00:00:14.760
in our programs.

3
00:00:14.760 --> 00:00:17.430
C++ has three logical operators.

4
00:00:17.430 --> 00:00:25.320
These are not and and or these operators work on Boolean expressions and evaluate to a boolean value

5
00:00:25.320 --> 00:00:26.850
themselves.

6
00:00:26.850 --> 00:00:29.120
There are several ways to write these operators.

7
00:00:29.160 --> 00:00:34.620
You can use the keyword like syntax using the words NOT AND and OR.

8
00:00:34.980 --> 00:00:41.010
OR you can use the operator symbol syntax using the Bang's sign the double ampersand and the double

9
00:00:41.010 --> 00:00:43.980
pipe symbol or the double vertical bar.

10
00:00:43.980 --> 00:00:50.490
Personally I've never seen any C++ code that uses a keyword like syntax so I'll use the operator symbol

11
00:00:50.490 --> 00:00:52.000
syntax in this course.

12
00:00:53.010 --> 00:00:59.250
Let's quickly review Boolean algebra by using a truth table.

13
00:00:59.380 --> 00:01:05.460
The logical NOT operator simply negates the result of the expression it's applied to.

14
00:01:05.460 --> 00:01:09.450
Note that this is a unique operator since it only works with one operand.

15
00:01:09.660 --> 00:01:17.240
So if the expression A is true then not A is false and if the expression A is false then not A is true.

16
00:01:17.250 --> 00:01:25.860
Let's look at the logical and the logical and is a binary operator and it's only true when both its

17
00:01:25.860 --> 00:01:27.450
operands are true.

18
00:01:27.600 --> 00:01:35.090
So you can see in the table when expression A is true and expression B is true then A and B is true

19
00:01:36.400 --> 00:01:39.850
A and B is false for all other combinations.

20
00:01:39.850 --> 00:01:47.560
Finally let's look at the logical or the logical OR operator is also a binary operator.

21
00:01:47.640 --> 00:01:51.760
The value of the logical or is true when either expression is true.

22
00:01:52.200 --> 00:01:58.990
So the only time it's false is in both expressions are false using just these three logical operators.

23
00:01:58.990 --> 00:02:05.080
We can write some pretty complex logic and if we combine the logical operators with the relational operators

24
00:02:05.440 --> 00:02:08.620
we're in great shape to begin to solve many many problems.

25
00:02:09.720 --> 00:02:16.260
Let's see what happens when we combine these operators together in an expression just like we had to

26
00:02:16.260 --> 00:02:19.050
understand precedence with the mathematical operators.

27
00:02:19.050 --> 00:02:25.500
We need to understand precedence for the logical operators logical not has the highest precedence followed

28
00:02:25.500 --> 00:02:32.790
by logical and followed by logical or of course as with mathematical expressions you can use parentheses

29
00:02:33.030 --> 00:02:35.600
to achieve exactly the behavior you're looking for.

30
00:02:36.690 --> 00:02:41.820
Let's wrap up logical operators by looking at a few example expressions and then talking about something

31
00:02:41.820 --> 00:02:46.330
called short circuit evaluation.

32
00:02:46.460 --> 00:02:52.460
Here are a few examples of logical expressions in the first expression we're determining if number one

33
00:02:52.700 --> 00:02:56.840
is greater than or equal to 10 and less than 20.

34
00:02:56.840 --> 00:02:59.810
Notice that we use number one in both expressions.

35
00:02:59.810 --> 00:03:04.090
We can't just write No one greater than equal to 10 and less than 20.

36
00:03:04.130 --> 00:03:07.600
We have to write in someone greater than or equal to 10.

37
00:03:07.610 --> 00:03:12.760
And number one less than 20 since we have an end.

38
00:03:12.810 --> 00:03:20.520
Both expressions must be true for the entire expression to be true in the next logical expression.

39
00:03:20.550 --> 00:03:26.730
We're using a logical or in this case either expression or both can be true for the entire expression

40
00:03:26.730 --> 00:03:27.600
to be true.

41
00:03:27.810 --> 00:03:32.650
So if number one is less than or equal to 10 then the entire expression will be true.

42
00:03:33.030 --> 00:03:38.190
Also if number one is greater than or equal to 20 then the entire expression will be true.

43
00:03:38.190 --> 00:03:43.830
Notice how both expressions cannot be true since no one cannot be less than 10 and it can't be greater

44
00:03:43.830 --> 00:03:45.880
than or equal to 20 at the same time.

45
00:03:47.130 --> 00:03:53.040
The next logical expression is checking if it's not raining and the temperature is greater than 32 degrees

46
00:03:53.100 --> 00:03:54.610
Fahrenheit.

47
00:03:54.740 --> 00:03:57.620
The following expression uses a logical OR.

48
00:03:57.620 --> 00:04:01.240
And it will be true if it's raining or if it's snowing.

49
00:04:01.250 --> 00:04:07.370
Finally the last logical expression is checking to see if temperature is greater than 100 and it is

50
00:04:07.370 --> 00:04:09.620
humid or it's raining.

51
00:04:09.620 --> 00:04:13.450
Remember here that the and has precedence over the or.

52
00:04:13.850 --> 00:04:19.990
I think you can see how powerful or logical expressions can be by simply combining these primitive operators.

53
00:04:20.000 --> 00:04:23.620
Also notice how important are variable names become as well.

54
00:04:25.420 --> 00:04:29.180
Let's finish up by discussing short circuit evaluation.

55
00:04:29.230 --> 00:04:35.140
C++ will stop evaluating a logical expression as soon as it knows the result.

56
00:04:35.140 --> 00:04:41.380
For example suppose we have an expression like the first one expression one and expression to and expression

57
00:04:41.380 --> 00:04:48.730
3 if expression 1 is false then there is no way that the entire expression can be true since all the

58
00:04:48.730 --> 00:04:50.590
expressions must be true.

59
00:04:50.830 --> 00:04:56.260
So why bother evaluating expression to an expression 3 when the compiler already knows that the result

60
00:04:56.260 --> 00:04:57.790
will be false.

61
00:04:57.790 --> 00:05:03.470
This is called short circuit evaluation and is commonly used in many programming languages.

62
00:05:03.490 --> 00:05:09.450
Programmers take advantage of this behavior to optimize their code in the second example.

63
00:05:09.470 --> 00:05:14.410
If any of the expressions is true then the entire logical expression is true.

64
00:05:14.570 --> 00:05:20.390
So if expression 1 is true then the compiler already knows that the entire expression is true and it

65
00:05:20.390 --> 00:05:22.930
won't evaluate expression to or expression.

66
00:05:24.170 --> 00:05:30.130
However if expression 1 is false then the compiler continues evaluating expression to.

67
00:05:30.230 --> 00:05:31.950
Since it doesn't know the result yet.

68
00:05:33.170 --> 00:05:37.550
Will use logical operators in depth when we learn about control structures.

69
00:05:37.550 --> 00:05:41.850
But for now let's head over to code right and see a few simple examples in life code.

70
00:05:43.440 --> 00:05:51.480
I'm in code light in Section 8 workspace and I in the logical operators project in this project will

71
00:05:51.480 --> 00:05:55.600
go over some few a few examples of using logical operators.

72
00:05:55.600 --> 00:05:57.980
Let's start with a really simple one here.

73
00:05:58.060 --> 00:06:04.220
What I've got is I'm going to use this variable numb to read numbers into just simple integers when

74
00:06:04.260 --> 00:06:07.930
you establish a range where the lower end is 10 and the upper end is 20.

75
00:06:07.930 --> 00:06:14.420
So that will be like a number line where this will be 10 here and this will be 20 over here now I'm

76
00:06:14.420 --> 00:06:20.040
going to ask the user to enter an integer and tell them what the bounds are 10 and 20 in this case and

77
00:06:20.050 --> 00:06:23.930
then I want to be sure that that number they entered is within the bounds and I just want to display

78
00:06:23.930 --> 00:06:26.190
true or false if it's within the bounds.

79
00:06:26.330 --> 00:06:31.930
And what we're doing here is we're going to say not inclusive of 10 and not inclusive of 20.

80
00:06:32.030 --> 00:06:37.050
OK so it's going to be between it's going to be 11 219 inclusive.

81
00:06:37.070 --> 00:06:38.680
All right so that's what we're going to do.

82
00:06:38.870 --> 00:06:44.380
Now we're going to store that true false value in this variable right here called within bounds.

83
00:06:44.750 --> 00:06:47.690
And here's our formula Here's our expression right here.

84
00:06:49.000 --> 00:06:53.410
Basically we're going to check to make sure that none is greater than lower.

85
00:06:53.410 --> 00:06:56.300
So numb is going to be greater then lowers.

86
00:06:56.310 --> 00:06:59.280
So is that user typed in 15.

87
00:06:59.500 --> 00:07:05.200
We want to make sure that it's graded and lower and we want to make sure that it's less than upper.

88
00:07:05.240 --> 00:07:09.640
So we want to be sure that it's in here somewhere.

89
00:07:10.940 --> 00:07:11.130
Right.

90
00:07:11.140 --> 00:07:14.530
So that's where we've got that logical and condition.

91
00:07:14.900 --> 00:07:20.390
So we'll do that and then we'll simply print out the number is between lower and upper and then true

92
00:07:20.390 --> 00:07:21.190
or false.

93
00:07:21.260 --> 00:07:23.330
And we can just display within bounds here.

94
00:07:23.570 --> 00:07:27.040
So let's run this with a couple of test cases.

95
00:07:27.290 --> 00:07:27.920
And here we go.

96
00:07:27.920 --> 00:07:29.990
Enter an integer the bounds are 10 and 20.

97
00:07:30.080 --> 00:07:37.370
Let's enter an integer that is within those bounds 15 is run in the middle and a Precentor and the result

98
00:07:37.370 --> 00:07:40.100
is 15 is between 10 and 20.

99
00:07:40.160 --> 00:07:41.000
True.

100
00:07:41.450 --> 00:07:42.210
OK.

101
00:07:42.230 --> 00:07:47.380
So let's run another test case let's go off the right side to 22.

102
00:07:47.390 --> 00:07:52.910
Now we would expect the false 22 is between 10 and 20 faults.

103
00:07:53.060 --> 00:07:55.540
Let's do a test case on the left side.

104
00:07:57.440 --> 00:07:59.240
We'll go five.

105
00:07:59.300 --> 00:08:03.210
We also expect the false and that's what we've got.

106
00:08:03.350 --> 00:08:07.640
And then don't forget to test those edge cases the 10 and the 20.

107
00:08:07.640 --> 00:08:09.520
So let's try 10.

108
00:08:09.590 --> 00:08:13.640
We expect fault's right because being N10 is not being between 10 and 20.

109
00:08:13.640 --> 00:08:15.040
In this case.

110
00:08:15.230 --> 00:08:20.650
So I get back a false and the last test case we could run is 20.

111
00:08:20.990 --> 00:08:24.290
And we also expect a fault and that's what we're getting.

112
00:08:24.320 --> 00:08:31.130
It's very common to have these errors where instead of checking it greater then here you're doing greater

113
00:08:31.130 --> 00:08:34.790
than or equal to when you should be doing greater than and so forth.

114
00:08:34.790 --> 00:08:36.660
So you've got to be sure to test your code.

115
00:08:36.890 --> 00:08:42.390
OK so that's a simple example of testing to see if a number is between two numbers.

116
00:08:42.380 --> 00:08:47.160
Now let me at that out and we'll do another example here.

117
00:08:47.600 --> 00:08:51.860
And of course we're assuming that lower is less than upper and all of these examples.

118
00:08:52.190 --> 00:08:57.510
Now we want to do on this one as we want to test to see if the number is outside the bounds.

119
00:08:57.560 --> 00:08:58.600
So I want to be.

120
00:08:58.650 --> 00:09:03.050
I want to be true if the number is outside the bounds so we'll do the same idea here.

121
00:09:03.140 --> 00:09:06.970
We've got we've got the line and here's the 10 and here's the 20.

122
00:09:08.810 --> 00:09:12.890
And if the numbers over here somewhere we want to True enough the numbers over here somewhere we want

123
00:09:12.890 --> 00:09:15.900
a true.

124
00:09:16.050 --> 00:09:18.350
Now we could just simply negate the previous result.

125
00:09:18.360 --> 00:09:18.560
Right.

126
00:09:18.570 --> 00:09:24.340
So if the number is in here if the number is not in here that is obviously either here or here.

127
00:09:24.690 --> 00:09:26.900
But what we'll do is we'll do it explicitly.

128
00:09:26.940 --> 00:09:32.400
We've got a variable called outside the bounds and we're going to check to be sure that number is less

129
00:09:32.400 --> 00:09:33.000
than lower.

130
00:09:33.000 --> 00:09:35.170
So that's taking care of this bit right here.

131
00:09:36.120 --> 00:09:39.330
Or number is greater than upper.

132
00:09:39.420 --> 00:09:43.410
There's no way we can use that and here that would be a mistake right because the number will never

133
00:09:43.410 --> 00:09:47.870
be less than 10 and greater than 20 this that won't happen it's impossible.

134
00:09:48.030 --> 00:09:51.060
So that would be a mistake and that's a pretty common mistake.

135
00:09:51.090 --> 00:09:54.240
But you'll find that when you test and there's your or.

136
00:09:54.270 --> 00:09:58.680
So let's run this example.

137
00:09:58.800 --> 00:10:00.660
And in this case the bounds are 10 and 20.

138
00:10:00.660 --> 00:10:02.540
So let's say we want to go 25.

139
00:10:02.530 --> 00:10:08.420
Now if we expect true now and that's we're getting because 25 is outside of 10 and 20.

140
00:10:09.010 --> 00:10:14.910
Let's try the lower and this try five.

141
00:10:15.050 --> 00:10:18.860
That's also true and that's true.

142
00:10:18.890 --> 00:10:27.340
One of the number in between 15 here we expect that to be false is because 15 is not outside the range.

143
00:10:27.420 --> 00:10:30.400
And then we could test what 10 and 20 and I'll leave that up to you guys.

144
00:10:30.720 --> 00:10:31.310
OK.

145
00:10:31.310 --> 00:10:34.330
So let me come at that out.

146
00:10:35.430 --> 00:10:42.930
And the third example is actually checking to see whether the numbers are right on the bounds whether

147
00:10:42.930 --> 00:10:45.100
they're 10 or 20.

148
00:10:45.120 --> 00:10:50.700
So what we're doing here again is we've got to line our number line and we've got 10 over here and 20

149
00:10:50.700 --> 00:10:51.760
over here.

150
00:10:52.160 --> 00:10:58.860
We want to be sure if we want it we want to return true if it's 10 or if it's 20.

151
00:10:58.920 --> 00:11:00.020
Right on the bound.

152
00:11:00.240 --> 00:11:05.070
So we've got another variable here called on bounds I'm setting it faults and the condition is really

153
00:11:05.070 --> 00:11:07.870
simple if the number is equal to the lower.

154
00:11:07.990 --> 00:11:16.160
So if the numbers 10 or the number is equal to the upper and so if we've got a 10 or 20 in this case

155
00:11:16.160 --> 00:11:18.590
because that's what lower and upper are.

156
00:11:18.620 --> 00:11:21.400
This will return TRUE remember it can't be 10 and 20.

157
00:11:21.410 --> 00:11:27.380
So we need the or here and in with the or if either piece is true the entire thing is true.

158
00:11:27.890 --> 00:11:31.100
So let me clear this and we'll run this example.

159
00:11:31.100 --> 00:11:34.060
So we should get that true for 10 and 20.

160
00:11:34.460 --> 00:11:36.260
So here's 10.

161
00:11:36.320 --> 00:11:43.440
There we go we've got a troop We'll run it again with 20.

162
00:11:43.500 --> 00:11:47.640
That also gives us true and everything else should give us a false right no matter what we put it in

163
00:11:47.640 --> 00:11:49.910
this book 15.

164
00:11:50.100 --> 00:11:56.280
We can put a fault and you could use in test cases outside 20 and less than 10 to check it out as well.

165
00:11:57.000 --> 00:11:58.190
So hopefully you're with me here.

166
00:11:58.180 --> 00:11:59.480
That's pretty straightforward stuff.

167
00:11:59.490 --> 00:12:00.930
Pretty powerful stuff.

168
00:12:00.930 --> 00:12:03.320
This is how you do input validation.

169
00:12:03.390 --> 00:12:08.550
You're asking the user to enter a number between something and something or no and turn the the amount

170
00:12:08.550 --> 00:12:09.470
of your check.

171
00:12:09.540 --> 00:12:14.700
Obviously they're not going to enter negative numbers and there may be a limit as to the upper end so

172
00:12:14.700 --> 00:12:20.310
you can validate your data because if you have bad data you're going to get better results.

173
00:12:20.340 --> 00:12:22.280
Now in this case here I'll comment.

174
00:12:22.290 --> 00:12:27.160
All of this out and we'll go through and explain it to you.

175
00:12:27.680 --> 00:12:28.070
OK.

176
00:12:28.140 --> 00:12:36.060
So what we've got here is we've got and and become it that bit out as well.

177
00:12:36.060 --> 00:12:38.440
All right so here's where we're at Here's the idea.

178
00:12:38.580 --> 00:12:41.190
We want to determine if you need to wear a coat.

179
00:12:41.700 --> 00:12:46.150
And that determination is based on the temperature and the wind speed.

180
00:12:46.170 --> 00:12:50.940
So I've got a boolean value and that boolean value right here is going to be where code that will be

181
00:12:50.940 --> 00:12:54.020
true or false whether you need to wear a coat or not.

182
00:12:54.330 --> 00:12:58.430
And I'm going to read two variables in from the user I'm going to read the temperature in Fahrenheit

183
00:12:58.500 --> 00:13:01.100
and the winds the wind speed in miles per hour.

184
00:13:01.530 --> 00:13:02.820
And here are my limits.

185
00:13:02.820 --> 00:13:05.490
So wind over this value requires a coat.

186
00:13:05.490 --> 00:13:12.450
So if the wind is over 25 miles an hour I need a cup and the temperature below this value requires a

187
00:13:12.450 --> 00:13:12.910
coat.

188
00:13:13.050 --> 00:13:16.560
So if the temperatures below 45 degrees Fahrenheit you need to.

189
00:13:16.890 --> 00:13:17.410
OK.

190
00:13:17.430 --> 00:13:21.540
But we're going to test these two different ways we're first going to use an OR condition and then we're

191
00:13:21.540 --> 00:13:23.560
going to use the and condition.

192
00:13:23.700 --> 00:13:31.020
So for the OR condition what we're saying is that if the wind speed is greater than 25 or the temperature

193
00:13:31.020 --> 00:13:37.200
is less than 45 you need a coat for the and condition we're going to say that the temperature has to

194
00:13:37.200 --> 00:13:38.320
be less than 45.

195
00:13:38.340 --> 00:13:41.210
And the wind speed has to be greater than 25.

196
00:13:41.520 --> 00:13:42.240
OK.

197
00:13:42.270 --> 00:13:47.550
And the conditions are pretty much I hope what you would expect at this point.

198
00:13:47.550 --> 00:13:50.010
You can see what we're doing here.

199
00:13:50.010 --> 00:13:55.890
We're setting for the OR condition we're setting right here we're checking obviously we're reading the

200
00:13:55.890 --> 00:13:57.920
temperature and the wind speed from the user.

201
00:13:58.080 --> 00:14:01.620
And then we've got temperature less than the temperature for the coat.

202
00:14:02.040 --> 00:14:03.710
That's one of the expressions.

203
00:14:03.870 --> 00:14:08.110
And then we've got the or wind speed is greater than the wind speed for a cut.

204
00:14:08.220 --> 00:14:12.250
So it fits in or that means that if this is true the whole thing is true.

205
00:14:12.780 --> 00:14:14.530
And if this is true the whole thing is true.

206
00:14:14.550 --> 00:14:18.210
So either piece is true down here we're using it.

207
00:14:18.210 --> 00:14:24.300
And so for this wear coat to become true both these pieces must be true.

208
00:14:24.300 --> 00:14:29.280
So the temperature must be colder than the temperature coat and the wind speed must be greater than

209
00:14:29.280 --> 00:14:31.160
the wind speed for.

210
00:14:31.180 --> 00:14:33.460
OK so let's run this.

211
00:14:33.740 --> 00:14:35.530
It will get to output statements

212
00:14:41.980 --> 00:14:45.620
OK so let's see that say that the temperature is 30 degrees Fahrenheit.

213
00:14:45.640 --> 00:14:51.250
That's pretty cold and the windspeed is 60 miles per hour.

214
00:14:51.250 --> 00:14:53.350
It's almost a hurricane.

215
00:14:53.350 --> 00:14:56.170
Both cases say you need to wear a coat.

216
00:14:56.200 --> 00:14:59.010
So in this case the OR case is true.

217
00:14:59.080 --> 00:15:03.780
Obviously both those pieces are true and the and case would obviously say true as well.

218
00:15:05.020 --> 00:15:07.620
OK let's run another example here.

219
00:15:07.720 --> 00:15:14.410
Let's say that in this case the temperature is pretty cold but the wind speed is not so bad.

220
00:15:14.410 --> 00:15:20.750
So in this case according to the first rule which is the rule I need a coat because it's cold.

221
00:15:20.770 --> 00:15:24.740
The second rule says I don't need a coat because the wind speed in this case is too low.

222
00:15:26.090 --> 00:15:26.340
OK.

223
00:15:26.350 --> 00:15:27.470
So hopefully that makes sense.

224
00:15:27.470 --> 00:15:33.080
You can see how powerful this can be just a really simple switch of a condition can totally change the

225
00:15:33.080 --> 00:15:35.660
logic really depending on what we want.

226
00:15:35.690 --> 00:15:40.970
Remember check those edge cases those are the ones where people tend to make mistakes on greater than

227
00:15:40.970 --> 00:15:46.200
or equal to sometimes you don't mean equal to you just mean greater than or the other way around.

228
00:15:46.220 --> 00:15:48.250
So testing is so so important.
