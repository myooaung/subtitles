1
00:00:05,740 --> 00:00:11,580
In this video we'll learn about the C++ for loop and a few of its variations.

2
00:00:11,650 --> 00:00:17,470
The for loop consists of the four key word followed by three expressions in parentheses.

3
00:00:17,800 --> 00:00:23,890
Each of these expressions is separated by semi-colon the semi-colons are required but the expressions

4
00:00:23,890 --> 00:00:25,030
are all optional.

5
00:00:25,030 --> 00:00:27,160
We'll see more about this later.

6
00:00:27,520 --> 00:00:33,520
In its simplest form the for loop has initialization expression followed by a conditional expression

7
00:00:33,520 --> 00:00:38,200
that evaluates to a boolean and then an increment expression.

8
00:00:38,200 --> 00:00:44,890
First the initialization expression is executed exactly once before any iteration occurs.

9
00:00:44,890 --> 00:00:47,500
Then the condition is checked if it's true.

10
00:00:47,500 --> 00:00:53,680
The body of the loop is executed then the iteration expression is executed and we check the condition

11
00:00:53,680 --> 00:00:55,470
again and repeat.

12
00:00:55,630 --> 00:01:00,730
When the condition evaluates to false the loop is terminated and we continue processing the statements

13
00:01:00,730 --> 00:01:01,750
and follow the loop.

14
00:01:02,440 --> 00:01:07,690
As you can see in this examples the for loop can execute one statement or many statements by using a

15
00:01:07,690 --> 00:01:09,600
block statement.

16
00:01:09,610 --> 00:01:12,840
Let's see a simple for loop that counts from 1 to 5.

17
00:01:13,480 --> 00:01:16,260
Let's walk through this for live one step at a time.

18
00:01:16,270 --> 00:01:19,080
Notice that in order to count we need some sort of variable.

19
00:01:19,240 --> 00:01:24,360
It's common to use the variable named I as the loop variable that's incremented or decremented in a

20
00:01:24,360 --> 00:01:24,960
loop.

21
00:01:25,390 --> 00:01:29,980
In this case we declare it to be an integer and initialize it to zero.

22
00:01:29,980 --> 00:01:31,270
Now we enter the loop.

23
00:01:31,300 --> 00:01:33,910
The first thing that happens is the initialization.

24
00:01:33,940 --> 00:01:36,630
In this case we assign one to I.

25
00:01:36,700 --> 00:01:38,320
Now we check the condition.

26
00:01:38,320 --> 00:01:41,000
Since one is less than or equal to 5.

27
00:01:41,020 --> 00:01:45,980
We execute the body of the loop which is the output statement and we display 1.

28
00:01:46,030 --> 00:01:51,000
Then we execute the increment expression which increments by one note.

29
00:01:51,010 --> 00:01:54,860
That plus plus and plus plus mean the same thing here.

30
00:01:54,970 --> 00:01:59,110
Since the increment happens on it's own and it's not in another expression.

31
00:01:59,110 --> 00:02:03,320
So now as to we check the condition again and it evaluates to true.

32
00:02:03,490 --> 00:02:07,580
So we execute the body of the loop again and display 2.

33
00:02:07,690 --> 00:02:12,340
Then we increment it again and keep iterating after we display 5 items.

34
00:02:12,340 --> 00:02:15,160
I will be 5 and then we incremented to 6.

35
00:02:15,160 --> 00:02:22,540
At this point the condition fails and the loop terminates C++ for loops are very efficient and in their

36
00:02:22,540 --> 00:02:23,380
basic form.

37
00:02:23,380 --> 00:02:25,510
Very easy to read or modify.

38
00:02:25,900 --> 00:02:29,350
Let's see another way to declare the Luby variable.

39
00:02:29,350 --> 00:02:32,070
We can declare and initialized the looping variable.

40
00:02:32,090 --> 00:02:35,800
I in this case write in the initialization statement.

41
00:02:35,830 --> 00:02:39,160
This is very commonly done and has some advantages.

42
00:02:39,250 --> 00:02:41,860
Here you can see we're doing it using two styles.

43
00:02:41,860 --> 00:02:46,450
The first uses initialization style and the second uses assignment style.

44
00:02:46,480 --> 00:02:49,840
I will be using initialization style in this course.

45
00:02:49,980 --> 00:02:53,730
The looping variable eyes only visible inside the for loop.

46
00:02:53,860 --> 00:02:59,900
Once the loop has finished I'm no longer visible and you'll get a compiler error if you try to use it.

47
00:02:59,920 --> 00:03:04,600
This is a great feature since you know that I'm totally under your control within the loop and won't

48
00:03:04,600 --> 00:03:08,340
have any strange values coming into the loop or exiting the loop.

49
00:03:08,370 --> 00:03:10,950
Let's see another exam in this example.

50
00:03:10,950 --> 00:03:13,420
We're looping from 1 to 10.

51
00:03:13,450 --> 00:03:18,140
The body of the loop test to see if the remainder of II is 0.

52
00:03:18,310 --> 00:03:21,070
So it's testing to see if I's an even number.

53
00:03:21,640 --> 00:03:23,720
If it is that display XY.

54
00:03:24,100 --> 00:03:29,170
So this loop displays all the even numbers between 1 and 10 inclusive.

55
00:03:29,440 --> 00:03:32,260
Let's see how we can use a for loop with an array.

56
00:03:32,380 --> 00:03:36,190
In this example we're using a for loop to display the elements of an array.

57
00:03:36,190 --> 00:03:41,650
Here we've declared scores as an array of integers and we've initialized it to one hundred ninety and

58
00:03:41,680 --> 00:03:43,450
eighty seven.

59
00:03:43,450 --> 00:03:50,470
Since array indexes begin at 0 and go to size minus one we must be sure to stay within those bounds

60
00:03:50,500 --> 00:03:52,910
or our program could likely crash.

61
00:03:53,020 --> 00:04:01,640
So we declare an initialized to zero and our loop condition is less than 3 and we increment by 1 at

62
00:04:01,660 --> 00:04:03,130
each iteration.

63
00:04:03,130 --> 00:04:06,240
So we loop for equal to zero 1 and 2.

64
00:04:06,250 --> 00:04:08,330
Which is exactly what we want.

65
00:04:08,620 --> 00:04:12,220
The body of the loop simply displays the array element at index.

66
00:04:12,360 --> 00:04:16,470
This will display one hundred ninety and eighty seven as we wanted.

67
00:04:16,480 --> 00:04:19,240
Be very careful when you work with loops in arrays.

68
00:04:19,240 --> 00:04:24,850
The condition should either be less than the size of the array or less than or equal to the size minus

69
00:04:24,850 --> 00:04:26,380
one hot tip.

70
00:04:26,410 --> 00:04:29,290
Always use one or the other and stick to it.

71
00:04:29,320 --> 00:04:32,770
Don't start flipping between them because eventually you're going to make a mistake.

72
00:04:33,040 --> 00:04:37,750
I always use less than the size of the array and I've been doing it that way my entire career.

73
00:04:37,750 --> 00:04:43,060
This helps prevent what are called off by one errors which basically mean that we went overbalancing

74
00:04:43,100 --> 00:04:50,250
your program could crash or corrupt data C++ has an operator called the comma operator that isn't used

75
00:04:50,250 --> 00:04:55,640
very often in C++ but sometimes you see it used in loops to initialize loop variables.

76
00:04:55,830 --> 00:05:02,130
The comma operator allows you to separate expressions with the comma in both expressions will execute.

77
00:05:02,130 --> 00:05:08,420
Note that the associativity is right to left and the result of the comma operator is the leftmost expression.

78
00:05:08,580 --> 00:05:14,210
In this case we're just using it to initialize two variables and then to increment those two variables.

79
00:05:14,250 --> 00:05:20,790
In this example we want to start at 1 and j to start at 5 and we want to loop while it is less than

80
00:05:20,790 --> 00:05:22,300
or equal to 5.

81
00:05:22,320 --> 00:05:27,150
The output statement in the body of the loop displays I times J the product.

82
00:05:27,390 --> 00:05:32,960
Then the increment also uses a comma operator to increment both i and j.

83
00:05:33,090 --> 00:05:40,020
So in this case I goes from 1 to 5 and J from 5 to 9 and at every iteration we display the product of

84
00:05:40,080 --> 00:05:45,630
i and j walk through this example slowly yourself and you'll see that it's pretty straightforward.

85
00:05:45,840 --> 00:05:52,320
The syntax looks a bit odd though since there's so much going on the basic for loop with all three expressions

86
00:05:52,320 --> 00:05:53,120
is concise.

87
00:05:53,120 --> 00:05:57,480
Easy to read or modify in the examples I showed we used integers.

88
00:05:57,600 --> 00:06:00,450
But you can use doubles with four loops as well.

89
00:06:00,450 --> 00:06:02,630
Also I counted up in these examples.

90
00:06:02,630 --> 00:06:08,430
You of course can count down but since the expressions are all optional it's possible to have all sorts

91
00:06:08,430 --> 00:06:09,550
of variations.

92
00:06:09,810 --> 00:06:13,570
You could even have a for loop with just a semi-colons in the parentheses.

93
00:06:13,800 --> 00:06:16,230
This is by definition an endless loop.

94
00:06:16,440 --> 00:06:18,230
Best practice in Protip.

95
00:06:18,360 --> 00:06:23,570
Don't write for loops with missing expressions and complicated expressions with comma operators.

96
00:06:23,790 --> 00:06:29,040
The example I showed is simple and understandable but if you find that you're omitting expressions then

97
00:06:29,040 --> 00:06:32,700
consider using one of C plus plus other loops.

98
00:06:32,730 --> 00:06:33,050
Great.

99
00:06:33,060 --> 00:06:37,870
Let's head over to the idea we'll see some examples of the for loop in life code.

100
00:06:37,870 --> 00:06:44,390
I mean the code like ID and I'm in the section 9 workspace in the for loop project.

101
00:06:44,640 --> 00:06:48,720
What I want to do here is I want to write a few different for loops to write a bunch of them that behave

102
00:06:48,720 --> 00:06:53,520
differently some will count up some will cut down to get a feel for how these four loops work and I'll

103
00:06:53,520 --> 00:06:55,290
write them and I'll comment them out along the way.

104
00:06:55,290 --> 00:06:58,080
That way they'll be in the source file so you can play with them later.

105
00:06:58,090 --> 00:07:00,070
So let's do a simple one first.

106
00:07:00,090 --> 00:07:01,450
Let's just say something like.

107
00:07:01,720 --> 00:07:05,430
For it I will start at 1.

108
00:07:05,450 --> 00:07:10,500
That's the initialization expression right there and then we want to loop while I say is less than or

109
00:07:10,500 --> 00:07:16,400
equal to 10 and at each iteration what we want to do is increment by one.

110
00:07:16,440 --> 00:07:23,640
Now in this case I can say plus plus I or I plus plus it means exactly the same thing as case and simply

111
00:07:23,640 --> 00:07:24,230
output.

112
00:07:24,230 --> 00:07:24,440
I

113
00:07:27,620 --> 00:07:28,760
will Kate.

114
00:07:28,830 --> 00:07:29,730
Simple as that.

115
00:07:29,730 --> 00:07:36,440
Let's run this you can see we're going from 1 to 10.

116
00:07:36,440 --> 00:07:42,460
Obviously when I hit 11 this condition right here fails and I stop the loop and then I just hit this

117
00:07:42,460 --> 00:07:45,350
and line over here right before the return.

118
00:07:45,770 --> 00:07:46,160
OK.

119
00:07:46,220 --> 00:07:54,410
So real simple example and I'll just copy and paste this so that you can see a variant of it and I'll

120
00:07:54,530 --> 00:07:57,410
comment that out here.

121
00:07:57,410 --> 00:08:02,400
Now suppose I want to go from I to 10 by two.

122
00:08:02,600 --> 00:08:04,180
I don't have to increment by one.

123
00:08:04,220 --> 00:08:09,710
I can imprint by whatever I want so I can hear in the increments expression I could just say I plus

124
00:08:09,800 --> 00:08:15,860
equals two equals I posters were going to do the same exact thing except when we increment we're going

125
00:08:15,860 --> 00:08:17,280
to increment by two.

126
00:08:17,300 --> 00:08:19,380
So let's run this one.

127
00:08:19,700 --> 00:08:20,670
And there you go.

128
00:08:20,690 --> 00:08:27,800
1 3 5 7 9 exactly what I expect because I'm starting at 1 and then eventually it's going to hit 11 and

129
00:08:27,950 --> 00:08:29,410
it'll fail.

130
00:08:30,350 --> 00:08:30,820
OK.

131
00:08:30,920 --> 00:08:32,600
So hopefully that makes sense.

132
00:08:32,660 --> 00:08:34,870
Let's count down on the next one.

133
00:08:34,910 --> 00:08:40,020
Let me comment that out and let's do this now let's say for ant.

134
00:08:40,100 --> 00:08:46,820
And again I is a real common variable name to use with looping i j k you'll see those all over the place

135
00:08:46,820 --> 00:08:48,120
and C plus plus could.

136
00:08:48,170 --> 00:08:56,480
So let's say I want to initialize to 10 in this case and I want to loop while I is greater than or equal

137
00:08:56,480 --> 00:08:59,070
to zero let's just say greater than zero.

138
00:08:59,510 --> 00:09:02,640
And in this case I want to decrement every time.

139
00:09:03,030 --> 00:09:05,440
So again I'm starting with eyes 10.

140
00:09:05,750 --> 00:09:11,420
And as long as I is greater than zero or I'm positive I want to execute the statement which I'm going

141
00:09:11,420 --> 00:09:17,480
to write right now and again I'm just going to output I.

142
00:09:17,650 --> 00:09:19,280
And then I want to decorate it.

143
00:09:19,490 --> 00:09:21,300
So this should count down now.

144
00:09:21,560 --> 00:09:23,420
So let's try that out.

145
00:09:24,500 --> 00:09:28,530
And they go 10 9 8 7 6 all the way down to 1.

146
00:09:28,670 --> 00:09:39,110
If I write in something like this and say blastoff then we expect that to execute after the loop is

147
00:09:39,110 --> 00:09:42,160
done see that.

148
00:09:42,170 --> 00:09:43,490
So that works out perfectly.

149
00:09:43,500 --> 00:09:44,700
There's a blast off.

150
00:09:44,870 --> 00:09:47,200
And one quick thing.

151
00:09:47,210 --> 00:09:54,160
Some compilers not all compilers but some compilers will give you a warning when you indent wrong.

152
00:09:54,320 --> 00:10:01,290
OK so in this case if I indented C out this blastoff statement over here that's not correct.

153
00:10:01,290 --> 00:10:03,200
Right because I don't have Curley's.

154
00:10:03,230 --> 00:10:07,050
So this for loop really only executes that one statement.

155
00:10:07,280 --> 00:10:13,340
But when I see this code visually My eyes are telling me that those two statements are in the for loop

156
00:10:13,880 --> 00:10:15,440
but they're not.

157
00:10:15,500 --> 00:10:21,230
If I try to compile this notice it works but I get a warning.

158
00:10:21,230 --> 00:10:25,550
The warning says Warning this for Clause does not guard.

159
00:10:25,640 --> 00:10:31,790
That's not real helpful I know but notice the morning message is misleading indentation.

160
00:10:31,790 --> 00:10:34,710
That's a great warning a lot of compilers don't do that.

161
00:10:34,910 --> 00:10:39,030
So what it's telling you is that something's not right with the indentation.

162
00:10:39,050 --> 00:10:42,020
You may think it's doing one thing but it really isn't.

163
00:10:42,170 --> 00:10:49,280
So once you unindexed that indent it properly now you'll have a clean compile with no errors and no

164
00:10:49,280 --> 00:10:50,180
warnings.

165
00:10:50,240 --> 00:10:54,250
That's a really nice feature of the GCC compilers.

166
00:10:54,530 --> 00:11:00,630
OK so let me come get that piece out again and let's write another version of a for loop.

167
00:11:00,890 --> 00:11:04,670
In this case why don't we count from 10 to 100 by 10.

168
00:11:04,670 --> 00:11:09,600
So again for the initialization statement.

169
00:11:09,740 --> 00:11:15,290
I will initialize it to 10 members that only happens exactly one time right before the loop begins.

170
00:11:15,470 --> 00:11:18,580
And I want to loop while I's less than or equal to 100.

171
00:11:19,040 --> 00:11:23,170
And in each iteration I want to say I plus equals 10.

172
00:11:23,180 --> 00:11:30,110
So when increment by 10 each time and I'm going to put in a block statement here just because I'm going

173
00:11:30,110 --> 00:11:31,710
to use a few of their statements a bit.

174
00:11:31,730 --> 00:11:35,150
But right now let's just print.

175
00:11:36,020 --> 00:11:42,290
OK so again we're going from 10 to 100 inclusive by 10 so we expect this to print out 10 20 30 40 all

176
00:11:42,290 --> 00:11:43,050
the way to 100.

177
00:11:43,130 --> 00:11:44,860
Let's try that out.

178
00:11:46,010 --> 00:11:49,850
And that's the result from 10 to 100 by 10 exactly what we expect.

179
00:11:49,850 --> 00:11:58,370
Now suppose I only wanted to print out those numbers that are between 10 and 100 by 10 and also divisible

180
00:11:58,370 --> 00:12:00,460
by 15 without a remainder.

181
00:12:00,780 --> 00:12:01,140
OK.

182
00:12:01,160 --> 00:12:07,700
So what we can do here is we can put an if statement here we can say if that specific I am looking at

183
00:12:08,940 --> 00:12:15,200
mod 15 is equal to zero.

184
00:12:15,210 --> 00:12:19,900
Right so if that is divisible by 15 then I want to display it.

185
00:12:19,940 --> 00:12:20,830
So at this point.

186
00:12:20,900 --> 00:12:27,800
Out of those 10 20 30 40 50 and so forth we really only expect 30 60 and 90 to match this criteria.

187
00:12:27,800 --> 00:12:30,310
Those are the only ones that are divisible by zero.

188
00:12:30,800 --> 00:12:31,860
By 15 I'm sorry.

189
00:12:31,880 --> 00:12:33,490
So let's run this.

190
00:12:33,890 --> 00:12:40,350
And there they are 30 60 90 you are the only ones in that set that are divisible by 15.

191
00:12:40,350 --> 00:12:46,800
Now let's take a look at that comma operator I talked about the syntax for this is again that's not

192
00:12:46,800 --> 00:12:49,410
bad it just gets kind of long and convoluted.

193
00:12:49,410 --> 00:12:50,420
So let's try that out.

194
00:12:50,430 --> 00:12:56,490
Let's say for now in this case in the initialization statement I want to initialize more than one variable

195
00:12:56,700 --> 00:13:01,160
so I can put them all in here separated by commas not semi-colons commas.

196
00:13:01,260 --> 00:13:03,420
So I say it.

197
00:13:03,470 --> 00:13:05,760
And I want to initialize I to 1.

198
00:13:05,820 --> 00:13:10,620
Now I put a comma in there and j to 5.

199
00:13:12,060 --> 00:13:16,380
That's my initialization I'm setting I to 1 and j to 5.

200
00:13:16,380 --> 00:13:18,540
Now comes my loop condition.

201
00:13:18,540 --> 00:13:25,050
I want to loop while I is less centered 5 and now is the increment expression.

202
00:13:25,050 --> 00:13:29,610
So where I say what I want to do it each iteration where I want to increment I.

203
00:13:29,870 --> 00:13:33,410
And I want to increment J so I can put the comma operator there.

204
00:13:33,600 --> 00:13:35,490
Any comment J.

205
00:13:35,820 --> 00:13:41,010
So you could see the purpose of this operator within this for loop is just to make everything concise

206
00:13:41,010 --> 00:13:43,080
because it makes sense here right.

207
00:13:43,080 --> 00:13:49,740
I mean I want to initialize I and J before I loop and I want to increment them both at each iteration.

208
00:13:49,740 --> 00:13:54,320
So rather than spread this logic all over the body of this loop you can just put it right in the head

209
00:13:54,320 --> 00:13:59,180
or like that and it really conveys exactly what you want at this point.

210
00:13:59,190 --> 00:14:04,710
I can just have a simple output statement that say we want to add I and J to generations are meant to

211
00:14:04,710 --> 00:14:05,270
display.

212
00:14:05,320 --> 00:14:09,590
I want to display that plus symbol.

213
00:14:09,960 --> 00:14:12,710
I want to display J.

214
00:14:12,870 --> 00:14:15,190
I want to display the equal sign.

215
00:14:15,600 --> 00:14:16,660
That's a literal.

216
00:14:16,860 --> 00:14:25,650
And this is display I Plus J will end up with a new line.

217
00:14:25,650 --> 00:14:30,840
So let's run that and you see we have one plus five is six now.

218
00:14:30,880 --> 00:14:34,760
It's I encourage you to walk through this example.

219
00:14:34,880 --> 00:14:41,820
Mean grab your pen kind of like I'm doing right now and say OK this is I this is J.

220
00:14:42,330 --> 00:14:44,040
Right now I've initialized them right.

221
00:14:44,040 --> 00:14:50,480
One in five now I start the loop is I less than or equal to 5.

222
00:14:50,510 --> 00:14:56,660
Well I's one so sure it's less was five I execute the body of the loop which says display I.

223
00:14:56,670 --> 00:14:57,170
OK.

224
00:14:57,190 --> 00:15:07,050
One then the plus then the J and the equal sign and then there's some then we do the increment which

225
00:15:07,050 --> 00:15:13,110
means now eyes to JS 6 and just walk through the loop this way this way you really get an understanding

226
00:15:13,110 --> 00:15:13,890
of what's going on.

227
00:15:13,890 --> 00:15:20,910
Remember what happens we do the initialization one time then we check the condition that we execute

228
00:15:20,910 --> 00:15:21,750
the body.

229
00:15:21,750 --> 00:15:25,010
If it's true and then we do the increment.

230
00:15:25,050 --> 00:15:28,360
So that's the order that this is all happening in.

231
00:15:29,460 --> 00:15:29,820
OK.

232
00:15:29,880 --> 00:15:37,590
So let me close this up and let's say that we wanted to use that use that conditional operator inside

233
00:15:37,590 --> 00:15:37,940
the loop.

234
00:15:37,950 --> 00:15:43,580
Just like I showed you in the conditional operator video there's a handy way to do it here.

235
00:15:43,590 --> 00:15:49,280
So suppose I want to print out the numbers 1 to 100 in a little bit of a table format so they look nice

236
00:15:49,290 --> 00:15:53,040
there's 10 across so 10 rows of 10 columns each.

237
00:15:53,040 --> 00:15:53,850
How could I do that.

238
00:15:53,850 --> 00:16:01,090
Well I could use something like for this or I mean that for an eye.

239
00:16:01,220 --> 00:16:06,320
We can start at 1 and we want to loop while I

240
00:16:13,230 --> 00:16:19,990
can try that again let's loop starting at it.

241
00:16:20,010 --> 00:16:27,630
I said to one and I want to loop while I is the center equal to 100.

242
00:16:27,720 --> 00:16:30,760
And in each iteration I want to increment I.

243
00:16:31,550 --> 00:16:31,940
OK.

244
00:16:31,980 --> 00:16:33,420
So that's what I want to do.

245
00:16:33,420 --> 00:16:37,710
I'm going to put a block statement here so I can read a little bit more code.

246
00:16:37,710 --> 00:16:46,510
Now I want to output I know I don't want to put an end line here I just want to output the itself in

247
00:16:46,540 --> 00:16:51,640
what I want to do is every tenth I want to output a newline.

248
00:16:51,700 --> 00:16:55,480
Otherwise I just want to output a space to move them across the row.

249
00:16:55,660 --> 00:17:04,850
So let's do that with the modulus operator and say if I mod 10 so if it's the 10 item equals zero would

250
00:17:04,890 --> 00:17:06,140
you want to do here.

251
00:17:06,430 --> 00:17:10,840
Well in this case I just simply want to say seek out give me a line

252
00:17:14,680 --> 00:17:22,540
and if it is not the tenth item I simply want to output a single space.

253
00:17:24,180 --> 00:17:25,380
OK that's it.

254
00:17:25,510 --> 00:17:27,820
So let's run this and see what we get.

255
00:17:30,620 --> 00:17:37,070
You could see we're going 9:59 11 to 20 21 through 30 and again walk through this and you'll see exactly

256
00:17:37,070 --> 00:17:37,760
what's going on.

257
00:17:37,760 --> 00:17:39,550
It should be pretty clear here.

258
00:17:39,620 --> 00:17:46,000
I'm printing out the I and I'm checking for every 10th item and I get every 10th I want to print a new

259
00:17:46,000 --> 00:17:46,370
line.

260
00:17:46,400 --> 00:17:51,800
Otherwise I just put a space if I wanted to print this as five across.

261
00:17:51,800 --> 00:17:58,080
I can just change that guy right there from a 10 to a 5 and now I've got 20 rows of five.

262
00:17:58,430 --> 00:17:59,090
OK.

263
00:17:59,240 --> 00:18:00,980
So that takes care of that one.

264
00:18:00,980 --> 00:18:11,350
Now suppose I wanted to write this same logic using the conditional operator Well let's see let's get

265
00:18:11,350 --> 00:18:17,920
rid of this stuff here and what we can say right now here with the conditional operator is we could

266
00:18:17,920 --> 00:18:20,160
say that's output that.

267
00:18:20,560 --> 00:18:24,510
And then that's output.

268
00:18:25,140 --> 00:18:26,720
Let's check the condition right.

269
00:18:26,730 --> 00:18:27,980
Same condition we had before.

270
00:18:28,000 --> 00:18:31,920
I mod 10 equals zero.

271
00:18:32,430 --> 00:18:38,460
And if that is true we just display in the line we'll use the escape character.

272
00:18:38,460 --> 00:18:41,360
Otherwise just a space.

273
00:18:42,120 --> 00:18:47,940
And if we run this we should get exactly the same behavior we had before which we do.

274
00:18:48,360 --> 00:18:53,310
Now remember since we're outputting we can chain output we can actually just get rid of all of this

275
00:18:53,310 --> 00:18:57,300
stuff and just make it on one line we can do that.

276
00:18:57,300 --> 00:19:00,760
We can up with the followed by either a space or a new line.

277
00:19:00,810 --> 00:19:09,660
So this can be just written as a single line and we get the same behavior as before okay.

278
00:19:09,820 --> 00:19:17,570
The last example I want to go over is using a vector and then we come at that out in the slides should

279
00:19:17,620 --> 00:19:21,700
you how to do it with an array how to loop through an array and I'll show you how to use a vector.

280
00:19:21,790 --> 00:19:27,050
And then the next video will use the range based for loop which makes using vectors really really simple.

281
00:19:27,100 --> 00:19:30,080
But in this case let's create a vector.

282
00:19:30,930 --> 00:19:35,260
You know I just get myself a little room here and I'll just call the vector Nom's and it's going to

283
00:19:35,260 --> 00:19:36,590
be a vector of integers.

284
00:19:36,610 --> 00:19:45,770
Let's just call it Nom's and let's initialize it to I don't know let's say 10 20 30 40 and 50.

285
00:19:45,820 --> 00:19:48,490
So we've initialized it to those five numbers.

286
00:19:48,490 --> 00:19:50,450
Now remember we're using a vector.

287
00:19:50,470 --> 00:19:52,470
So we have to include vector.

288
00:19:52,510 --> 00:19:59,630
So I'm going to come back up to the top and pounde include vector Otherwise we'll get a compiler.

289
00:20:00,190 --> 00:20:01,710
So I'll come back down.

290
00:20:01,750 --> 00:20:07,000
So there's my vector and let's say I want to loop through that vector and just display each item in

291
00:20:07,000 --> 00:20:07,630
the vector.

292
00:20:07,750 --> 00:20:14,830
Pretty easy I could say for it I want to initialize to zero member vectors started at zero.

293
00:20:14,830 --> 00:20:24,190
Just like arrays now I can say while I is less than Nom's dot size will use the size method that is

294
00:20:24,250 --> 00:20:31,300
in the vector class and that tells me how many items are in the vector and I want to increment by one

295
00:20:31,300 --> 00:20:32,310
each time.

296
00:20:32,530 --> 00:20:36,790
And I just simply want to say see out Nom's.

297
00:20:36,910 --> 00:20:42,770
So I when I run this I expect to get 10 through 50.

298
00:20:42,850 --> 00:20:46,220
We're going to get a warning and I'll show you how to fix that warning in a second.

299
00:20:46,510 --> 00:20:47,800
And it's actually a good morning.

300
00:20:47,800 --> 00:20:49,600
There you go tend to 50 is the output.

301
00:20:49,600 --> 00:20:50,560
That's what you expected.

302
00:20:50,560 --> 00:20:52,870
We're printing out all of those elements.

303
00:20:52,870 --> 00:20:58,160
The warning says Warning comparison between signed an unsigned integer expressions.

304
00:20:58,240 --> 00:20:58,750
OK.

305
00:20:59,050 --> 00:21:07,150
What's going on here is that this numskulls size expression read here is returning an unsigned integer.

306
00:21:07,150 --> 00:21:11,860
That makes sense right because you can't have vectors that are negatively sized.

307
00:21:11,860 --> 00:21:14,530
So that's returning an unsigned integer and your return.

308
00:21:14,530 --> 00:21:16,910
You're comparing it to a signed integer.

309
00:21:17,080 --> 00:21:24,940
So you can just simply type unsigned here instead of signed and it actually makes more sense.

310
00:21:25,030 --> 00:21:29,230
I've been using signed integers all along but a lot of times when you're looping especially when you're

311
00:21:29,230 --> 00:21:35,620
looping through all the positive numbers it makes sense to use unsigned integers here so I'll save that

312
00:21:36,220 --> 00:21:37,620
will compile and run.

313
00:21:37,840 --> 00:21:44,550
And now we've got down here as you can see no errors no warnings and only compile.

314
00:21:44,780 --> 00:21:47,990
So that pretty much covers the basics of for loops.

315
00:21:48,020 --> 00:21:51,890
I will leave all these examples in the source code so you can play with them and change them around

316
00:21:51,890 --> 00:21:53,590
as you like so you can learn from them.

317
00:21:53,720 --> 00:21:58,670
The best way to really learn this is just to make up little examples and print out every fifth element

318
00:21:58,670 --> 00:22:03,230
and see if they're divisible by 7 or something like that and just really get a feel for the way that

319
00:22:03,230 --> 00:22:08,140
loops and walk through these examples one step at a time that really really is helpful.
