WEBVTT
1
00:00:05.550 --> 00:00:13.210
When we learned about C++ functions we learned that we can supply default values as parameters to functions.

2
00:00:13.230 --> 00:00:16.830
The same applies to class methods in class constructors.

3
00:00:16.950 --> 00:00:23.480
In many cases we can reduce the number of overloaded constructors by providing default constructor parameters.

4
00:00:23.610 --> 00:00:30.180
The same rules that we learned when working with default function parameters apply to constructors.

5
00:00:30.200 --> 00:00:32.880
Let's continue working with our player class.

6
00:00:32.990 --> 00:00:37.790
We can actually just have one constructor that does everything that we did with the three constructors

7
00:00:37.790 --> 00:00:38.780
previously.

8
00:00:39.140 --> 00:00:43.720
You can't always have default parameters in class design but many times you can.

9
00:00:43.820 --> 00:00:46.790
Here's an example where it makes perfect sense.

10
00:00:46.790 --> 00:00:52.720
Notice that the player class now has only a single constructor and that constructor has three arguments.

11
00:00:52.850 --> 00:00:56.000
The name health and Expwy of the player.

12
00:00:56.000 --> 00:01:01.850
But in this example we're providing default parameter values for all the parameters for the player's

13
00:01:01.850 --> 00:01:02.210
name.

14
00:01:02.210 --> 00:01:07.640
The default is the string none and for health in XP the defaults are zero.

15
00:01:07.670 --> 00:01:13.290
These default parameters are declared in the constructor declaration in the class is shown.

16
00:01:13.430 --> 00:01:18.530
Now when we implement the constructor we can implement it exactly as we implemented the three argument

17
00:01:18.560 --> 00:01:21.760
constructor in the previous videos.

18
00:01:22.010 --> 00:01:25.510
Here you can see the implementation for the single constructor.

19
00:01:25.520 --> 00:01:27.770
Notice that you don't supply the default parameters.

20
00:01:27.770 --> 00:01:33.350
Here we can simply use initializer lists to initialize the class attributes and the compiler will take

21
00:01:33.350 --> 00:01:36.170
care of providing the default values as needed.

22
00:01:36.800 --> 00:01:41.870
This is very handy and results in less code to write which means less code to test which means less

23
00:01:41.870 --> 00:01:44.330
code that could have errors.

24
00:01:44.450 --> 00:01:49.760
Since this single constructor is doing the job of several constructors we have to be careful not to

25
00:01:49.760 --> 00:01:52.040
declare ambiguous constructors.

26
00:01:52.040 --> 00:01:55.890
For example what would happen if we implemented a no args constructor.

27
00:01:56.120 --> 00:02:00.950
In addition to the one we see on this slide Well we get a compiler error because the compiler wouldn't

28
00:02:00.950 --> 00:02:03.190
know which one to call.

29
00:02:03.210 --> 00:02:08.740
In this example we're creating empty Frank and villaine objects as we did before.

30
00:02:08.910 --> 00:02:10.590
But take a look at Hero.

31
00:02:10.590 --> 00:02:15.660
We didn't have to args constructor in the previous version of the player class but we do in this version.

32
00:02:15.660 --> 00:02:17.100
That's pretty cool.

33
00:02:17.100 --> 00:02:21.720
Now let's modify our existing player class and the ID so you can see how this works.

34
00:02:23.360 --> 00:02:23.530
Hi.

35
00:02:23.860 --> 00:02:31.160
So I mean the ID and I mean the section 13 workspace in the default constructor parameters project.

36
00:02:31.330 --> 00:02:36.640
And what we've got is the player class as we defined it in the last few videos where we've got our three

37
00:02:36.640 --> 00:02:42.550
constructors and here we're using delegating constructors and down here where using an initializer constructor

38
00:02:42.550 --> 00:02:46.520
initializer list right here on 9:32 what I want to do is I want to get rid of it.

39
00:02:46.540 --> 00:02:47.500
I want to simplify this.

40
00:02:47.500 --> 00:02:52.570
I want to get rid of some of these overloaded constructors and use default parameters instead as we

41
00:02:52.570 --> 00:02:53.770
did with the slides.

42
00:02:53.800 --> 00:02:59.440
So what I want to do is just get rid of all these constructors right here I just want to end up with

43
00:02:59.440 --> 00:03:05.200
one single constructor and there it is player with three arguments and one I'd like to do is supply

44
00:03:05.200 --> 00:03:07.690
some default parameter values for these.

45
00:03:07.690 --> 00:03:12.070
Now you can't always do this when you're doing class design but sometimes you can and when you can you

46
00:03:12.070 --> 00:03:14.650
should because it really simplifies your code.

47
00:03:14.680 --> 00:03:21.850
So in this case I'm going to default the name of the player to none.

48
00:03:22.000 --> 00:03:29.430
I'm going to default the health value to zero and I'm going to default the x p value to zero.

49
00:03:30.310 --> 00:03:32.360
OK so that's what we've got now.

50
00:03:32.570 --> 00:03:35.860
There is my three default parameters.

51
00:03:36.100 --> 00:03:42.820
Now these two constructors go away so I'm just going to get rid of them right here and this constructor

52
00:03:42.820 --> 00:03:46.600
was his which is are three are a constructor that matches the signature for this one.

53
00:03:46.630 --> 00:03:48.570
We really don't have to do anything to it.

54
00:03:48.700 --> 00:03:54.300
These default parameters will automatically be supplied by the compiler when we need them.

55
00:03:54.550 --> 00:03:58.390
OK so now what we've got is same code we had before.

56
00:03:58.390 --> 00:03:59.450
Now put a break point.

57
00:03:59.450 --> 00:04:04.960
Here is the only constructor being called so we'll definitely see it being called and I'm going to create

58
00:04:04.960 --> 00:04:06.610
an empty object here.

59
00:04:06.780 --> 00:04:11.620
Again it's a player object and I'm not supplying any initialization information here.

60
00:04:11.680 --> 00:04:16.900
So what's going to happen is all three of those default parameters will be substituted and I'll end

61
00:04:16.900 --> 00:04:20.270
up with an object none zero zero which is exactly what I want.

62
00:04:20.350 --> 00:04:27.080
In the case of Frank I'll end up with Frank 00 because the none will be overridden by the frank.

63
00:04:27.450 --> 00:04:32.780
In the last one all three of my initialiser will still be supplied so it will be villaine 155.

64
00:04:32.810 --> 00:04:39.440
Now there's another one that we've got here as well which is this one let's just say player hero.

65
00:04:40.270 --> 00:04:48.280
And suppose I want to say this is hero and it's 100 for the health.

66
00:04:48.280 --> 00:04:55.150
Now in this case that hero object will have the name Hero 100 for health since the XP wasn't supplied

67
00:04:55.150 --> 00:04:56.830
the XP will get the value of 0.

68
00:04:56.950 --> 00:05:00.850
Now this is a constructor we didn't have before we didn't have a two args constructor.

69
00:05:01.160 --> 00:05:04.160
OK so let's run this and we'll walk through it.

70
00:05:06.250 --> 00:05:10.500
And I'll put the screen over here the output is going to be real simple We'll just get this three args

71
00:05:10.500 --> 00:05:14.950
constructor message being displayed all the time is the only constructor we have.

72
00:05:15.180 --> 00:05:16.900
OK so let's start here.

73
00:05:16.980 --> 00:05:18.030
Here's my player.

74
00:05:18.030 --> 00:05:19.620
Empty right.

75
00:05:19.740 --> 00:05:22.240
This is a no args constructor the set to be called.

76
00:05:22.250 --> 00:05:28.320
Well we don't have no args constructor but we've got this constructor that expects three arguments and

77
00:05:28.320 --> 00:05:32.700
we're telling the compiler to default those three if it has to in this case it has to.

78
00:05:32.880 --> 00:05:37.690
So what it's going to do is it's going to provide none 0 0 and call this guy right here.

79
00:05:38.060 --> 00:05:38.390
OK.

80
00:05:38.460 --> 00:05:40.790
So let's step through this and we'll see.

81
00:05:40.830 --> 00:05:45.840
We're in the constructor Now you can see that that constructor did indeed get called one line 20 right

82
00:05:45.840 --> 00:05:46.450
now.

83
00:05:46.920 --> 00:05:51.190
And we're going to initialize it when a display 3R is constructor over here.

84
00:05:51.450 --> 00:05:54.030
And then we're back to Main at this point.

85
00:05:54.060 --> 00:06:00.720
Empty should have none 0 0 which is exactly what we've got now in the case of the player.

86
00:06:00.730 --> 00:06:03.920
Frank I expected to have frank 00.

87
00:06:03.970 --> 00:06:06.320
So let's walk through that.

88
00:06:06.530 --> 00:06:08.820
There I am at line 20 again.

89
00:06:08.820 --> 00:06:10.710
I'll step through it a couple more times.

90
00:06:10.730 --> 00:06:14.690
Now we'll see three args constructor again being displayed.

91
00:06:14.690 --> 00:06:20.650
I'm back in my main and if I look at Frank here we see Frank 00 which is again what we expected.

92
00:06:20.660 --> 00:06:24.630
Now the hero objects we expect to have here a 100 and 0.

93
00:06:24.800 --> 00:06:26.620
So let's walk through that.

94
00:06:26.870 --> 00:06:32.300
We're in that construct to right now we're in the initialization list and we'll print out the three

95
00:06:32.300 --> 00:06:37.960
args constructor message one more time we're done initialising that object now.

96
00:06:37.980 --> 00:06:44.450
So if we look at Hero we should see hero 100 0 which is again exactly what I expected.

97
00:06:44.460 --> 00:06:48.390
Now in the last case I'm providing all three of the initializers.

98
00:06:48.480 --> 00:06:52.160
So what we expect is villaine 155 right.

99
00:06:52.290 --> 00:06:54.540
None of the default parameters here will be used.

100
00:06:54.540 --> 00:06:55.710
So let's try that out.

101
00:06:55.710 --> 00:07:03.260
We'll walk through it and we're back in Maine now and if we look at villaine we'll have villaine 155

102
00:07:03.620 --> 00:07:04.750
just what we want.

103
00:07:05.040 --> 00:07:05.490
OK.

104
00:07:05.510 --> 00:07:11.390
So that gives you an idea of how we can use default constructor parameters which is really really handy.

105
00:07:11.390 --> 00:07:13.270
It'll definitely simplify your code.

106
00:07:13.340 --> 00:07:19.220
As I said before you can always use sometimes it really doesn't make sense to provide default parameter

107
00:07:19.280 --> 00:07:25.010
values you really want you know the user to explicitly provide all of them but sometimes you can and

108
00:07:25.010 --> 00:07:26.750
when you can they come real handy.

109
00:07:28.030 --> 00:07:35.590
Now just before we wrap up this video let's see what happens if we supply a constructor and C++ has

110
00:07:35.590 --> 00:07:37.860
an issue with ambiguity.

111
00:07:37.870 --> 00:07:43.340
So in this case remember we've got we're handling all of these types of initialization here.

112
00:07:43.390 --> 00:07:43.630
Right.

113
00:07:43.630 --> 00:07:48.960
Zero argument one argument two arguments and three arguments all with a single constructor.

114
00:07:49.240 --> 00:07:52.270
So what happens if I decide to do something like.

115
00:07:52.270 --> 00:07:56.720
Player no args constructor and I implement that.

116
00:07:57.070 --> 00:08:02.740
Well hopefully you'll see the problem when the compiler sees the code on 9:28 it doesn't know what to

117
00:08:02.740 --> 00:08:03.090
do.

118
00:08:03.100 --> 00:08:09.400
A could call this default constructor or it could call this overloaded constructor with the thread default

119
00:08:09.400 --> 00:08:10.350
parameters.

120
00:08:10.390 --> 00:08:13.510
It's not going to guess it's just going to give you a compiler error.

121
00:08:13.510 --> 00:08:16.730
So let me debug this or build it and run it and you'll see the error.

122
00:08:16.750 --> 00:08:19.180
You can see any case you get it you'll know what it's talking about.

123
00:08:19.180 --> 00:08:26.140
It says right here error call of overloaded player is ambiguous which is exactly correct.
