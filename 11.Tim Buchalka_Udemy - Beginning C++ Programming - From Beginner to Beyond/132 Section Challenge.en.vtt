WEBVTT
1
00:00:06.450 --> 00:00:08.850
Welcome to the section challenge.

2
00:00:08.850 --> 00:00:11.340
This has been a long section and it has a lot to learn.

3
00:00:11.340 --> 00:00:17.220
Pointers can be tricky and intimidating but here's a real nice challenge that will help you understand

4
00:00:17.220 --> 00:00:19.730
pointers and dynamic memory allocation.

5
00:00:19.770 --> 00:00:24.450
So I've given you a bit of a star and I've written part of the main for you and you just have to write

6
00:00:24.450 --> 00:00:25.680
two functions.

7
00:00:25.680 --> 00:00:31.020
You have to write a print function that should be pretty easy and then you have to write and apply all

8
00:00:31.020 --> 00:00:34.300
function that I'll talk about in a second and we'll walk right through this real quick.

9
00:00:34.530 --> 00:00:34.980
OK.

10
00:00:35.130 --> 00:00:38.310
So let's go back up to the top of the challenge here.

11
00:00:38.310 --> 00:00:41.180
And what I'd like you to do is write those two functions.

12
00:00:41.190 --> 00:00:47.100
But the first one let's talk about the first one rattus C++ function and apply all how this function

13
00:00:47.100 --> 00:00:53.100
expects to arrays of integers and their sizes and it dynamically allocates a new array of integers whose

14
00:00:53.100 --> 00:00:56.580
size is the size of 1 times the size of the other.

15
00:00:56.790 --> 00:01:00.840
And when you want to do is you want to loop through the second array and multiply each element across

16
00:01:01.020 --> 00:01:02.750
each element of the other array.

17
00:01:02.760 --> 00:01:03.990
Sounds complicated.

18
00:01:04.020 --> 00:01:04.830
It's not.

19
00:01:04.830 --> 00:01:07.150
Let me walk you through exactly what I'm talking about.

20
00:01:07.170 --> 00:01:09.350
So here's the function.

21
00:01:09.470 --> 00:01:14.200
So it expects to arrays array one and array two and it expects the sizes for this to erase.

22
00:01:14.200 --> 00:01:18.960
You can see right here re 1 2 5 and 3.

23
00:01:19.050 --> 00:01:24.890
So let's say that this is array 1 it's 1 2 3 4 and 5.

24
00:01:24.970 --> 00:01:36.490
This is array 1 and then we've got array to which contains 10 20 and 30 K so we're passing these two

25
00:01:36.580 --> 00:01:43.660
pointers basically read array names into that function and we're passing along five which is how many

26
00:01:43.660 --> 00:01:49.330
elements are in disarray and 3 which is how many elements of this right now that function is going to

27
00:01:49.330 --> 00:01:56.990
dynamically allocate an array that's 15 big five times three and those numbers could varied.

28
00:01:57.060 --> 00:02:03.900
So in this case what we want to do is we want to take each element in array 2 and multiply it across

29
00:02:03.990 --> 00:02:10.790
all the elements of array 1 so 10 times one is ten ten times two is 20.

30
00:02:11.980 --> 00:02:14.690
Ten times three is 30.

31
00:02:14.780 --> 00:02:19.850
We've got the 40 and we have a 50 OK.

32
00:02:20.000 --> 00:02:25.820
Then what we want to do is we want to go through here and now go to the next array element in array

33
00:02:25.820 --> 00:02:26.900
2.

34
00:02:27.050 --> 00:02:37.660
So that's 20 to 20 times one is 20 20 times to 40 20 times three is 60 20 times for is 80.

35
00:02:37.780 --> 00:02:42.260
And finally 20 times five is 100 OK.

36
00:02:42.350 --> 00:02:49.910
Then the last thing is go through that last number so now we're at the 30 and we're in about 30 times

37
00:02:49.910 --> 00:02:58.700
one which is 30 you get it you get the idea 60 90 120 150.

38
00:02:58.730 --> 00:03:04.790
So this here is the newly created array that you're going to create dynamically on the heap.

39
00:03:04.920 --> 00:03:11.100
We want to return the address of this array which is the address of this guy right here from the function.

40
00:03:11.250 --> 00:03:18.150
That function returns the address which we store right here in that pointer variable results then we

41
00:03:18.150 --> 00:03:20.710
pass results to the print function with a 15.

42
00:03:20.730 --> 00:03:25.960
And this is what we get from this example let me clear the screen real quick.

43
00:03:26.010 --> 00:03:28.920
So here's a one I call the print function.

44
00:03:28.920 --> 00:03:35.340
I pass array one into it and it's going to display that then I'll put a right to and then I call the

45
00:03:35.340 --> 00:03:36.030
print function.

46
00:03:36.030 --> 00:03:38.430
I pass an array to the three.

47
00:03:38.520 --> 00:03:44.800
I get that I call this function it dynamically creates that array does the multiplication it stores

48
00:03:44.800 --> 00:03:51.220
all the values into that not the dynamically allocated array and it returns the address of that array

49
00:03:51.340 --> 00:03:55.580
and we store the end results then we pass results and 15.

50
00:03:55.630 --> 00:03:58.360
And that's what we get.

51
00:03:58.360 --> 00:04:10.500
OK so what you need to do again one more time you need to write the Apply all function in the print

52
00:04:10.500 --> 00:04:11.310
function.

53
00:04:12.440 --> 00:04:21.620
Now the Apply all function expects array 1 and its size array 2 and its size.

54
00:04:21.660 --> 00:04:24.400
You could decide what the types are going to be.

55
00:04:24.400 --> 00:04:28.620
The print function expects an array and a size.

56
00:04:28.630 --> 00:04:35.330
Now obviously this guy who returns a pointer to an integer doesn't return anything.

57
00:04:35.350 --> 00:04:39.820
So that's roughly your out your function prototypes you have to decide what these types here are going

58
00:04:39.820 --> 00:04:40.310
to be.

59
00:04:42.820 --> 00:04:44.020
OK that's it.

60
00:04:44.020 --> 00:04:47.060
Test your code and have fun.

61
00:04:47.200 --> 00:04:49.500
If you need to use the debugger go for it.

62
00:04:49.510 --> 00:04:53.510
Meet me on the other side of the challenge and I'll show you my solution.
