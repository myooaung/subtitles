1
00:00:05,890 --> 00:00:11,860
In this section of the Course will learn about C++ functions functions allow us to divide our programs

2
00:00:11,860 --> 00:00:17,740
into modular units of executive code and call and reuse these units as we wish.

3
00:00:17,740 --> 00:00:21,020
Functions are very powerful abstraction mechanism.

4
00:00:21,070 --> 00:00:26,140
You've already seen functions defined the main function that we've been using in every program and you've

5
00:00:26,140 --> 00:00:31,660
also used some functions such as getline and the C-style string function string copy string length and

6
00:00:31,660 --> 00:00:37,000
others in this section will understand what functions are and why they're so useful.

7
00:00:37,000 --> 00:00:39,020
Then we'll look at functions in detail.

8
00:00:39,370 --> 00:00:44,380
First we'll see how to define functions and create function prototypes that make our functions useful

9
00:00:44,410 --> 00:00:45,890
anywhere in our code.

10
00:00:46,300 --> 00:00:51,460
As we've already seen when we call a function we usually send information to the function.

11
00:00:51,460 --> 00:00:54,480
This information is sent in the form of function parameters.

12
00:00:54,490 --> 00:00:58,330
We'll see how to define these parameters and exactly how they work functions.

13
00:00:58,360 --> 00:01:03,040
Also usually return some kind of information to us when they're done processing.

14
00:01:03,040 --> 00:01:08,260
For example if we have a function that calculates the square root of a number well that function expects

15
00:01:08,260 --> 00:01:13,820
the number and it will return to us the square root of the number which we can use however we wish.

16
00:01:13,900 --> 00:01:19,540
Functions can also take many parameters and in some cases we want to default the value of some of those

17
00:01:19,540 --> 00:01:24,370
parameters so we don't have to provide them every time we learn how to set these default values per

18
00:01:24,370 --> 00:01:30,250
parameters to make our code easier to write them we'll learn how to pass arrays to functions and how

19
00:01:30,250 --> 00:01:32,860
to work with them inside the function.

20
00:01:32,860 --> 00:01:37,750
I'll discuss references in the next section but we'll look at how we can pass information to a function

21
00:01:37,750 --> 00:01:40,360
efficiently by avoiding copying.

22
00:01:40,360 --> 00:01:45,820
We'll also see how we can change past information as well as protect it from change.

23
00:01:45,970 --> 00:01:52,000
Then we'll discuss inline functions inline functions are functions that the compiler optimizes to avoid

24
00:01:52,000 --> 00:01:55,330
the overhead involved when we call functions.

25
00:01:55,330 --> 00:01:59,960
Remember when we use the auto keyword to allow the compiler to deduce the type of a variable.

26
00:02:00,130 --> 00:02:04,870
Well we can also use the auto keyword to allow the compiler to deduce the type of the function return

27
00:02:04,870 --> 00:02:05,490
value.

28
00:02:05,710 --> 00:02:10,730
This is pretty cool and it can save us from writing a lot of unnecessarily complex code.

29
00:02:10,750 --> 00:02:13,230
Finally we'll learn about recursive functions.

30
00:02:13,240 --> 00:02:15,520
These are functions that call themselves.

31
00:02:15,580 --> 00:02:18,140
You might be wondering why would a function call itself.

32
00:02:18,430 --> 00:02:22,810
You'll see it's pretty cool and it can help solve a class of problems that would be more complex to

33
00:02:22,810 --> 00:02:24,700
solve without recursion.

34
00:02:24,700 --> 00:02:28,810
At the end of this section we'll do a challenge project and we'll be well on our way to starting to

35
00:02:28,810 --> 00:02:30,610
learn object oriented programming.

36
00:02:30,610 --> 00:02:31,520
Let's get started.
