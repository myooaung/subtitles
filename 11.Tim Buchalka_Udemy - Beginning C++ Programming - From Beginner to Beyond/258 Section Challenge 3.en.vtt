WEBVTT
1
00:00:05.500 --> 00:00:09.830
Hello welcome to the third challenge for the Section 20 part of the course.

2
00:00:10.000 --> 00:00:13.480
I mean the Section 20 workspace and I've got two projects.

3
00:00:13.480 --> 00:00:18.180
The challenge underscore three project and the challenge underscore three solution project.

4
00:00:18.190 --> 00:00:23.950
So as usual the solution is my solution and the challenge 3 project is the shell that I'm giving you

5
00:00:23.950 --> 00:00:26.920
that has the beginnings of the project that you can work on.

6
00:00:26.920 --> 00:00:28.530
So let's talk about this project.

7
00:00:28.540 --> 00:00:30.020
This is a fun challenge.

8
00:00:30.040 --> 00:00:35.020
This challenge has two parts and it's all about understanding stood sat and stood map we're going to

9
00:00:35.020 --> 00:00:37.030
use the sets and the maps together.

10
00:00:37.210 --> 00:00:42.310
We're going to be reading words from a text file providing them providing that for you the text file

11
00:00:42.310 --> 00:00:48.250
is called Words dot text and I'll show that to you in just a moment and it contains the first few paragraphs

12
00:00:48.250 --> 00:00:50.490
from the book Wonderful Wizard of Oz.

13
00:00:50.800 --> 00:00:58.000
So the idea here is the first part of the challenges you want to read each word from that file and count

14
00:00:58.000 --> 00:01:01.510
how many times it occurs in the file and then display that information.

15
00:01:01.510 --> 00:01:06.160
So what we get is a listing similar to this this is just the first few words you can see that the word

16
00:01:06.160 --> 00:01:08.690
art appears five times in the text.

17
00:01:08.720 --> 00:01:14.860
Dorothy eight Dorothy's with an apostrophe S. once M5 even once and from once.

18
00:01:14.890 --> 00:01:18.980
Now you'll also notice that these words are displayed just like this.

19
00:01:19.010 --> 00:01:25.120
A DFT are displayed in ascending order and then right next to the word we have the number of times that

20
00:01:25.120 --> 00:01:26.540
it occurs.

21
00:01:26.560 --> 00:01:27.290
Simple.

22
00:01:27.460 --> 00:01:33.860
So please use a map for this and make sure that your key value pair is a string int.

23
00:01:34.000 --> 00:01:34.780
That makes sense.

24
00:01:34.780 --> 00:01:36.420
This is your key right here.

25
00:01:36.460 --> 00:01:42.460
The Word and the value is the count and the functions that I've written for you assume this.

26
00:01:42.460 --> 00:01:44.530
Make sure you use the string it.

27
00:01:44.530 --> 00:01:48.300
So that's part 1 and let me say the file requit before we talk about Part 2.

28
00:01:48.310 --> 00:01:51.220
Here's the file you can see it right here in Wordstar text.

29
00:01:52.830 --> 00:01:57.890
There's the file and it's the first I think five or six or seven paragraphs from the Wonderful Wizard

30
00:01:57.890 --> 00:01:58.360
of Oz.

31
00:01:58.520 --> 00:02:03.330
So you can see Dorothy appears here and it's really easy to check your work in code light.

32
00:02:03.350 --> 00:02:09.650
For example if I just double click Dorothy you can see that Dorothy appears once twice three times four

33
00:02:09.650 --> 00:02:11.890
five six seven eight nine times.

34
00:02:11.900 --> 00:02:16.640
It's really easy to tell just because it highlights it in yellow and it also gives you the line number

35
00:02:17.070 --> 00:02:21.410
that it appears on which is really cool because that's all part of the challenge is all about.

36
00:02:21.410 --> 00:02:23.780
All right so let me get back to the description.

37
00:02:23.840 --> 00:02:24.870
So that's part one.

38
00:02:25.130 --> 00:02:28.520
And then in part two what I want is same idea.

39
00:02:28.520 --> 00:02:33.620
I want to read all the words from the file and I don't really care how many times they occur I've already

40
00:02:33.620 --> 00:02:34.750
got that up here.

41
00:02:34.850 --> 00:02:37.280
What I want to know is what line numbers do they occur on.

42
00:02:37.280 --> 00:02:39.160
I want to see all the line numbers.

43
00:02:39.170 --> 00:02:44.480
So in this case we can we can do this when it appears online number 2 7.

44
00:02:44.480 --> 00:02:46.600
25 29 and 48.

45
00:02:46.730 --> 00:02:48.810
That might appear more than once on each line.

46
00:02:48.830 --> 00:02:53.960
I don't want you to say 2 2 7 7 7 and so forth just the line numbers should appear only once.

47
00:02:53.960 --> 00:03:00.500
So again the word should be ascendiant order and the line number should be ascending in order in here

48
00:03:00.500 --> 00:03:01.180
as well.

49
00:03:01.370 --> 00:03:06.850
So one more time it appears online to 720 29 and 48.

50
00:03:06.920 --> 00:03:12.070
So we can come over here towards that text we can find it which is right there.

51
00:03:12.110 --> 00:03:18.810
So there it is 2 7 25 29 and 40.

52
00:03:18.990 --> 00:03:21.710
That's an easy way to test your output.

53
00:03:21.710 --> 00:03:23.010
That's the challenge.

54
00:03:23.180 --> 00:03:26.820
So let me go back to the description and we'll talk a little bit more about this.

55
00:03:26.840 --> 00:03:33.090
For this part for part two please use a map of string set and key value pairs.

56
00:03:33.110 --> 00:03:38.890
Right so the key is the word the strain and the value is a set of integers.

57
00:03:39.260 --> 00:03:42.500
We did this in the description for the map video.

58
00:03:42.560 --> 00:03:46.360
This is just going to apply it now for this one as well for part.

59
00:03:46.370 --> 00:03:49.680
Consider using a stream stream to process your words.

60
00:03:49.680 --> 00:03:55.520
So in other words read the line from the file into a string and then use a string stream to process

61
00:03:55.520 --> 00:03:58.970
that strength's you can extract the words from it really really easily.

62
00:03:58.970 --> 00:04:02.750
I've also provided the basic shell for both of these and I'll show you that in a second.

63
00:04:02.870 --> 00:04:08.630
And I've provided a function called Clean string and you can pass a word into that function and it can

64
00:04:08.630 --> 00:04:10.410
return the clean version of it.

65
00:04:10.430 --> 00:04:14.890
So it's going to remove any trailing periods or semi-colons or colons and things like that.

66
00:04:14.990 --> 00:04:16.850
And you could tweak that function if you like.

67
00:04:16.850 --> 00:04:18.350
I'll show you the code in a second.

68
00:04:18.380 --> 00:04:19.010
That's it.

69
00:04:19.010 --> 00:04:21.290
Let me run this program so you can see the output

70
00:04:24.700 --> 00:04:27.740
and you can see all the display I'm going to scroll all the way up to the top.

71
00:04:27.850 --> 00:04:33.250
It's running part 1 and then it's running part 2 Here's part 1 on it appears five times Dorothy appears

72
00:04:33.310 --> 00:04:38.710
eight times and appears five times and you go all the way through aren't and lowercase would be different

73
00:04:38.710 --> 00:04:39.040
words.

74
00:04:39.040 --> 00:04:43.470
You can choose to make them all upper or lower or do whatever you like with that just to have fun.

75
00:04:43.720 --> 00:04:50.410
So in this case let's look at some of the common words in English only the A appears 20 times and appears

76
00:04:50.410 --> 00:04:52.110
32 times.

77
00:04:52.250 --> 00:04:58.620
This is a very popular word and there is the it appears 43 times.

78
00:04:58.630 --> 00:05:00.790
So that that's part 1 again.

79
00:05:00.850 --> 00:05:04.620
Notice that this is sorted and ascending order.

80
00:05:04.630 --> 00:05:06.090
Now here's part two.

81
00:05:06.160 --> 00:05:09.670
We have the word and the occurrences of that word with line number.

82
00:05:09.670 --> 00:05:17.060
So on two piers on lines two 725 29 and 48 he you can see that Henry appears on lines to six thirty

83
00:05:17.050 --> 00:05:23.860
five forty five and fifty there and with the capital T appears on line 2 and you could see the rest

84
00:05:24.020 --> 00:05:25.270
draw here.

85
00:05:25.300 --> 00:05:26.890
So that's the challenge.

86
00:05:26.890 --> 00:05:28.490
It's not that hard.

87
00:05:28.510 --> 00:05:30.190
Don't overthink this challenge.

88
00:05:30.190 --> 00:05:32.520
Let the T.L. do the work for you.

89
00:05:32.650 --> 00:05:37.270
Don't start messing around and try to get into the details of this just let the ACL do the work for

90
00:05:37.270 --> 00:05:37.770
you.

91
00:05:37.900 --> 00:05:39.090
Think abstractly.

92
00:05:39.190 --> 00:05:41.180
So that's a sample run.

93
00:05:41.410 --> 00:05:45.070
And let me show you the code that I'm giving you it's right in here and challenge underscored three

94
00:05:45.070 --> 00:05:52.870
project main CVP so I'll double click there and then scroll down to the main re-acquaint there is your

95
00:05:52.870 --> 00:05:56.480
main right here it's running part 1 and then part 2.

96
00:05:56.830 --> 00:05:58.610
And for each part I'm.

97
00:05:58.690 --> 00:06:02.590
Here's part two for example there's the file opening the fine closing the file.

98
00:06:02.590 --> 00:06:09.340
So think of part 1 and Part 2 as unique little functions that each one has of how each one closes the

99
00:06:09.340 --> 00:06:10.030
file.

100
00:06:10.120 --> 00:06:17.080
So you can see in part one right here my map is called Words and it's a map of string and key value

101
00:06:17.080 --> 00:06:18.000
pairs.

102
00:06:18.010 --> 00:06:19.820
I've got some variables here.

103
00:06:19.870 --> 00:06:25.150
I've got my file which I'm opening I'm checking to see if it was opened successfully and if it is then

104
00:06:25.150 --> 00:06:29.830
you write this code and then when you're done with your code you call that function right there display

105
00:06:29.830 --> 00:06:31.630
words pass it in the map.

106
00:06:31.660 --> 00:06:35.620
And I've written the code that's going to display that all in a nice sort of format but this is the

107
00:06:35.620 --> 00:06:39.670
code you need to implement here for part two.

108
00:06:39.790 --> 00:06:40.780
Same idea.

109
00:06:40.960 --> 00:06:42.160
Here's my map words.

110
00:06:42.190 --> 00:06:48.070
This time it's a map of key value pairs where the key is a string and the value is a set of integers

111
00:06:48.070 --> 00:06:49.560
as we discussed.

112
00:06:49.680 --> 00:06:51.340
I'm opening the file.

113
00:06:51.760 --> 00:06:52.950
I'm closing the file here.

114
00:06:52.960 --> 00:06:53.980
It was opened successfully.

115
00:06:53.980 --> 00:07:00.700
You implement this code when you're done processing the map passed the map into Display words and display

116
00:07:00.700 --> 00:07:02.410
all that information for you.

117
00:07:02.410 --> 00:07:09.160
Now those two functions I wrote up here this is display words for part 1 and this is display words for

118
00:07:09.160 --> 00:07:10.100
part 2.

119
00:07:10.150 --> 00:07:14.480
The only difference is this one expects a string into key value pairs.

120
00:07:14.530 --> 00:07:21.000
This one expects obviously a map of those this expects a map of string and a set of int key value pairs.

121
00:07:21.310 --> 00:07:23.290
You can totally erase these and do them yourself.

122
00:07:23.290 --> 00:07:27.460
I would actually encourage you to do that but they're there for your benefit.

123
00:07:27.460 --> 00:07:29.580
Get rid of them and do them when you're on your own if you like.

124
00:07:29.620 --> 00:07:32.150
And then here's the clean string function.

125
00:07:32.260 --> 00:07:37.440
It expects a string and you can see the code is that simple for each character in the string.

126
00:07:37.450 --> 00:07:42.630
If it's a period or a comma or semi-colon or a colon I'm just not processing it.

127
00:07:42.700 --> 00:07:46.560
Otherwise I'm just appending the character to the new string and returning it.

128
00:07:47.080 --> 00:07:51.430
So that's it I'm just filtering on those characters you can add some remove some or do whatever you

129
00:07:51.430 --> 00:07:52.130
like.

130
00:07:52.570 --> 00:07:52.950
That's it.

131
00:07:52.960 --> 00:07:54.760
That's the challenge again.

132
00:07:54.820 --> 00:07:55.600
Have fun.

133
00:07:55.600 --> 00:07:58.450
This is actually a fun challenge and it's really easy to do.

134
00:07:58.630 --> 00:08:00.900
You'll be surprised how easy this is to do.

135
00:08:00.950 --> 00:08:03.480
It doesn't seem so easy but it really is.

136
00:08:03.580 --> 00:08:07.590
And as I said the best advice I can give you is don't overthink this.

137
00:08:07.600 --> 00:08:09.270
Let the CEO do its job.

138
00:08:09.270 --> 00:08:10.840
That's what it's good at.

139
00:08:10.860 --> 00:08:11.150
OK.

140
00:08:11.170 --> 00:08:14.680
So I will see you in the next video and the solution.

141
00:08:14.680 --> 00:08:15.370
So have fun.
