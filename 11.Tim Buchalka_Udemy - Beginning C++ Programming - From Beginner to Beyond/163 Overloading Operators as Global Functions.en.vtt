WEBVTT
1
00:00:05.420 --> 00:00:10.740
In the previous video we saw how we can overload operators using class member methods.

2
00:00:11.210 --> 00:00:16.410
In this video we learn how to overload operators using nonmember or global functions.

3
00:00:16.600 --> 00:00:21.760
Since these are not member functions we no longer have at this point to referring to the object on the

4
00:00:21.760 --> 00:00:23.120
left hand side.

5
00:00:23.170 --> 00:00:28.930
So since we very often need access to private attributes and the objects you see these non member functions

6
00:00:28.960 --> 00:00:31.360
declared as friend functions of the class.

7
00:00:31.360 --> 00:00:37.870
In many applications this isn't absolutely necessary since we can still use getter methods to access

8
00:00:37.870 --> 00:00:39.220
attribute values.

9
00:00:39.220 --> 00:00:42.300
But as I said you often see them implemented as friends.

10
00:00:42.700 --> 00:00:47.860
I'm going to declare these overloaded operator methods as friends when we head over to the IEEE so in

11
00:00:47.860 --> 00:00:54.050
the case of unity operators a single object does in the parameter list and in the case of a binary operator

12
00:00:54.220 --> 00:00:57.710
two objects are in the parameter list.

13
00:00:57.830 --> 00:01:03.680
So let's overload the minus operator to make a string lowercase as we did in the previous video.

14
00:01:03.800 --> 00:01:09.500
We want to provide the same functionality we did before and our use of the minus operator would look

15
00:01:09.500 --> 00:01:10.550
the same.

16
00:01:10.550 --> 00:01:16.060
Let's see how we can do this using a nonmember function in this slide.

17
00:01:16.060 --> 00:01:20.150
I'm assuming that this function has been declared as a friend to my string class.

18
00:01:20.230 --> 00:01:24.000
Since I'm directly accessing the private attribute as TR.

19
00:01:24.250 --> 00:01:30.250
Notice first that this is not a member function it's a regular C++ global function.

20
00:01:30.310 --> 00:01:37.000
The function returns of my string object by value and its named operator minus and it expects a single

21
00:01:37.000 --> 00:01:37.710
parameter.

22
00:01:37.750 --> 00:01:41.970
In this case RBJ is a mere string object reference.

23
00:01:41.980 --> 00:01:47.860
Now the code is essentially same as it was in the member version except that distrained data is in RBJ

24
00:01:47.860 --> 00:01:51.500
dot as TR rather than in this TR.

25
00:01:51.540 --> 00:01:57.050
We allocate storage on the heap copy the object string data loop through a make the copied string all

26
00:01:57.060 --> 00:01:58.110
lowercase.

27
00:01:58.200 --> 00:02:04.020
Then we create a new my string object using the lowercase string as the initializer deallocate the temporary

28
00:02:04.020 --> 00:02:07.160
storage and return the newly created object.

29
00:02:07.170 --> 00:02:12.390
Of course you can't have both the member and nonmember versions of this overloaded operator at the same

30
00:02:12.390 --> 00:02:15.490
time or the compiler would know which one to use.

31
00:02:15.870 --> 00:02:19.520
You can only have one or the other.

32
00:02:19.720 --> 00:02:24.760
You probably already figured out that overloading binary operators has global functions is basically

33
00:02:24.760 --> 00:02:29.260
the same except that now we have two arguments required by the function.

34
00:02:29.260 --> 00:02:34.470
The first argument is the left hand side object and the second is the right hand side object.

35
00:02:34.480 --> 00:02:38.060
Here you can see some example prototypes for some operators.

36
00:02:38.060 --> 00:02:41.130
Notice that they all have two parameters in the parameter list.

37
00:02:41.200 --> 00:02:47.650
I have named the first L H.S. for left hand side and the second RH has for right hand side that at the

38
00:02:47.650 --> 00:02:52.900
bottom of the slide you can see how these operators can be used and the functions that C++ will call

39
00:02:52.900 --> 00:02:55.870
when it uses them.

40
00:02:56.040 --> 00:03:00.680
Let's see how we can overthrow the equality operator as a nonmember function.

41
00:03:00.810 --> 00:03:06.480
Again I'm accessing a private attribute as TR in my string class so I'm assuming this function is a

42
00:03:06.480 --> 00:03:09.060
friend of my string class.

43
00:03:09.060 --> 00:03:14.310
The code is almost the same as it was for the member version except that now I have an l h s object

44
00:03:14.340 --> 00:03:16.290
instead of the this pointer.

45
00:03:16.410 --> 00:03:21.390
So we compare the left hand side string to the right hand side string using string compare as we did

46
00:03:21.390 --> 00:03:22.480
before.

47
00:03:22.500 --> 00:03:23.650
It's as simple as that.

48
00:03:25.350 --> 00:03:31.720
Finally let's overload the binary plus operator so that we can use it to concatenate to my string objects.

49
00:03:32.860 --> 00:03:37.170
We create Larry Moe and Stooges as my string objects as we did previously.

50
00:03:37.180 --> 00:03:42.790
Now when we use the plus operator notice the methods of the compiler is calling in the comments also

51
00:03:42.790 --> 00:03:46.500
notice that each is called with two arguments as we expect.

52
00:03:46.510 --> 00:03:51.580
Finally remember that with the member version the left side argument had to be an object of the class

53
00:03:51.580 --> 00:03:53.770
type with nonmember functions.

54
00:03:53.770 --> 00:03:58.560
This isn't the case either one or both arguments can be of my string type.

55
00:03:58.570 --> 00:04:05.510
However if you have to string literals that won't work C++ assumes primitive pointer and not objects.

56
00:04:05.560 --> 00:04:09.210
So let's implement concatenation as a non member function and the next slide.

57
00:04:12.600 --> 00:04:18.070
Here you can see that the function operator plus returns and my string object by value.

58
00:04:18.240 --> 00:04:22.700
It also expects to my string objects left hand side and right hand side.

59
00:04:22.710 --> 00:04:26.640
Notice that are both constant references since we don't want to modify them.

60
00:04:26.750 --> 00:04:31.830
The code now is exactly as it was for the member version except that whenever I need the left hand side

61
00:04:31.830 --> 00:04:35.140
object I use L H.S. instead of the this pointer.

62
00:04:35.340 --> 00:04:39.960
That's it again both a member and nonmember versions achieve the desired result.

63
00:04:39.990 --> 00:04:42.310
But remember you can only use one at a time.

64
00:04:42.690 --> 00:04:47.150
Let's head over to the idea and overload some binary operators is non member functions.

65
00:04:48.550 --> 00:04:55.530
OK so we're back in the ID I am in the section 14 workspace and the project is my stream dash operator

66
00:04:55.530 --> 00:04:57.240
dash functions.

67
00:04:57.240 --> 00:05:03.900
This is the project where we're going to implement those three overloaded operators equality operator

68
00:05:04.260 --> 00:05:10.710
the minus operator which makes the string lowercase and the plus operator which concatenates two strings.

69
00:05:10.950 --> 00:05:16.360
And this time we're going to implement them as non member functions are global C++ functions.

70
00:05:16.380 --> 00:05:18.660
First thing we're going to do is we're going to make them friends.

71
00:05:18.660 --> 00:05:22.710
We don't have to make them friends but it's going to be a lot easier to write the code and I'll have

72
00:05:22.710 --> 00:05:26.520
to call those getters all the time so we can do that right in the class.

73
00:05:26.520 --> 00:05:29.090
Remember the class has to grant friendship.

74
00:05:29.220 --> 00:05:34.290
So we'll write the function prototypes here and we'll start them off with a friend and we'll do the

75
00:05:34.290 --> 00:05:36.680
first one the first one is returns a boolean.

76
00:05:36.720 --> 00:05:44.060
The operator is the quality operator and remember now since this is not a member function we need two

77
00:05:44.070 --> 00:05:44.720
parameters.

78
00:05:44.730 --> 00:05:44.970
Right.

79
00:05:44.970 --> 00:05:46.610
This is a binary operator.

80
00:05:46.650 --> 00:05:50.740
So the first one will be Konst my string ref.

81
00:05:50.910 --> 00:06:01.010
L h s for left hand side and Konst my string graph right hand side right.

82
00:06:01.020 --> 00:06:06.160
So that's one function prototype will do the next one for the minus So again friend.

83
00:06:06.330 --> 00:06:09.790
This will return to my string object by value.

84
00:06:10.080 --> 00:06:16.770
The operator overloading is the the minus operator the unary minus and it expects a single my string

85
00:06:16.770 --> 00:06:19.980
ref and we call this will be J.

86
00:06:20.030 --> 00:06:21.170
We can call this anything we like.

87
00:06:21.170 --> 00:06:24.660
I think I called it will be J the slides so I'll call it over here.

88
00:06:25.020 --> 00:06:30.210
And then we've got another operator that want to overload in this case it returns on my string object

89
00:06:30.210 --> 00:06:36.300
by value again and this is the concatenation operator so it's going to be the plus operator and it's

90
00:06:36.300 --> 00:06:40.320
a binary operator so we've got conc to my string ref.

91
00:06:40.650 --> 00:06:49.480
Left hand side and Konst my string ref right hand side.

92
00:06:50.490 --> 00:06:51.500
OK so there we go.

93
00:06:51.540 --> 00:06:54.670
It doesn't really matter where you put these friend declarations in.

94
00:06:54.810 --> 00:06:57.860
Doesn't matter if you put them in the private area the public area doesn't matter.

95
00:06:57.960 --> 00:06:58.820
So there we go.

96
00:06:58.890 --> 00:07:01.150
Unless I have any typos that looks pretty good.

97
00:07:01.220 --> 00:07:06.260
Now what we'll do is we'll go to the mystery of CPV and implement those can really implement them anywhere.

98
00:07:06.270 --> 00:07:11.310
But since they really add to the interface of the class it's common practice to implement them right

99
00:07:11.310 --> 00:07:14.940
in here in the Dotsie BP file.

100
00:07:15.060 --> 00:07:20.150
I'm trying to implement them here at the end so let's do the first one that's to the quality.

101
00:07:20.490 --> 00:07:23.570
And again this is a regular function is not a member function.

102
00:07:23.580 --> 00:07:32.340
So we're going to say bool operator double equal size for the equality is a binary operator so it expects

103
00:07:33.090 --> 00:07:35.040
same prototype we did before.

104
00:07:35.250 --> 00:07:36.460
My string ref.

105
00:07:36.560 --> 00:07:42.870
Left hand side coxed my string ref right hand side.

106
00:07:44.190 --> 00:07:48.460
OK so now we'll write the code we're going to return.

107
00:07:48.630 --> 00:07:55.440
We're going to call stood string compare and what are we comparing We're comparing the left hand sides

108
00:07:55.560 --> 00:07:59.340
string to the right hand side string.

109
00:07:59.460 --> 00:08:02.850
See the difference between this one and the member function is a member function.

110
00:08:02.850 --> 00:08:05.980
We really didn't have this guy here that was the this pointer.

111
00:08:06.030 --> 00:08:11.010
So we did this as TR simply as TR But here we've got those two objects so that's what we're going to

112
00:08:11.010 --> 00:08:11.370
do.

113
00:08:11.370 --> 00:08:12.890
It's when you compare this to zero.

114
00:08:12.930 --> 00:08:14.820
And that's what we're going to return.

115
00:08:15.360 --> 00:08:17.260
And that should be done.

116
00:08:17.520 --> 00:08:17.790
Great.

117
00:08:17.790 --> 00:08:20.280
Now let's do the make lower case

118
00:08:23.190 --> 00:08:27.120
notice again this is not a member function if it was a member function it would look something like

119
00:08:27.120 --> 00:08:27.950
that right.

120
00:08:27.960 --> 00:08:31.620
It's not this is just a regular global function.

121
00:08:31.650 --> 00:08:39.810
So here's make lowercase make lowercase returns of my string object by value it's operator minus the

122
00:08:39.810 --> 00:08:41.430
unit operator overloading.

123
00:08:41.430 --> 00:08:46.160
And it's it's it's unir it is going to be one parameter in this parameter list and it's going to be

124
00:08:46.230 --> 00:08:51.270
my string ref and we'll just call this Scoby Jaffee that's what I call it in the slides and I'll stick

125
00:08:51.270 --> 00:08:52.200
to that name.

126
00:08:52.910 --> 00:08:54.170
That's it.

127
00:08:54.170 --> 00:08:57.350
Now let's write the code again again it's the same code we had before.

128
00:08:57.350 --> 00:08:59.160
We need a buffer area.

129
00:08:59.510 --> 00:09:04.460
And what we're going to do is we're going to allocate a new array of characters in that buffer area.

130
00:09:04.460 --> 00:09:05.000
How big.

131
00:09:05.000 --> 00:09:11.380
Well we're going to ask sturdiest you Ireland to give us the length of again what is this now.

132
00:09:11.400 --> 00:09:14.510
It's RBJ got asked here.

133
00:09:14.650 --> 00:09:20.360
Right now we have access to that because we're a friend and we're going to add the one for the string

134
00:09:20.360 --> 00:09:21.440
Terminator.

135
00:09:21.440 --> 00:09:33.230
Now that we've allocated the space we're going to stray copy into the buffer from RBJ asked here again

136
00:09:33.230 --> 00:09:38.570
that function copies one character at a time and then when it hits the Terminator copies that as well

137
00:09:38.570 --> 00:09:40.390
and stops.

138
00:09:40.440 --> 00:09:40.870
That's it.

139
00:09:40.870 --> 00:09:43.450
Now we'll loop through just like we did before.

140
00:09:43.450 --> 00:09:47.370
So we'll go from an unsigned int equals zero.

141
00:09:47.680 --> 00:09:54.130
While it is less than say that string length of fuf

142
00:09:57.620 --> 00:09:58.220
by one

143
00:10:01.580 --> 00:10:09.950
and for each iteration what we'll do is we'll just simply say buff Sabai equals we'll call stood to

144
00:10:09.950 --> 00:10:10.430
lower

145
00:10:13.850 --> 00:10:16.590
and we'll make the Buff's of a lower.

146
00:10:16.660 --> 00:10:20.210
That just makes it a lower case character.

147
00:10:20.210 --> 00:10:25.460
Right so now we've got what we need to build our temporary object temporary to this function that we're

148
00:10:25.460 --> 00:10:26.220
going to return.

149
00:10:26.360 --> 00:10:36.020
So my string temp will initialize it from buff it will return buff sorry little Richard.

150
00:10:36.100 --> 00:10:44.230
Now obviously we allocated space in here which we're done with so we need to delete but that way we

151
00:10:44.230 --> 00:10:45.500
don't leak memory.

152
00:10:45.670 --> 00:10:49.910
And I think that should do it again if we have some typos I'll fix them once I compile.

153
00:10:50.170 --> 00:10:54.730
And then the last one we'll do is the concatenation.

154
00:10:55.180 --> 00:10:56.910
So now let's implement this one.

155
00:10:57.040 --> 00:10:59.110
It's going to return to my string object.

156
00:10:59.260 --> 00:11:05.270
The operator overloading is the addition plus operator which means concatenation in this context.

157
00:11:05.650 --> 00:11:10.570
And we've got a binary operator right so we've got those two objects again in the parameter list.

158
00:11:10.600 --> 00:11:20.280
The left hand side and the right hand side both references.

159
00:11:20.530 --> 00:11:21.750
OK so now what do we do.

160
00:11:21.820 --> 00:11:23.080
Well let's allocate the space.

161
00:11:23.080 --> 00:11:26.360
Remember the space needs to be big enough to hold both those strings.

162
00:11:26.410 --> 00:11:27.560
We're going to concatenate.

163
00:11:27.700 --> 00:11:35.850
So we'll just simply say char buffer again and we'll create a new character array.

164
00:11:35.860 --> 00:11:36.550
How big is it.

165
00:11:36.550 --> 00:11:49.000
Well it's the length of the left hand side string plus the length of the right hand side string plus

166
00:11:49.000 --> 00:11:51.370
one.

167
00:11:51.730 --> 00:11:54.880
Now we've got enough space to put both strings in there.

168
00:11:54.880 --> 00:12:02.740
Now what we do is we just copy the first one over the string copy into buff from the left hand side

169
00:12:02.740 --> 00:12:03.850
object.

170
00:12:04.180 --> 00:12:15.720
And then we concatenate on the end of that using string cat from the right hand side object.

171
00:12:15.730 --> 00:12:18.260
Again we've got what we need to create our object.

172
00:12:18.280 --> 00:12:19.570
We're going to return now.

173
00:12:19.630 --> 00:12:27.170
So I will create my string and we'll just call it tempo and we'll initialize it with buff and then you

174
00:12:27.220 --> 00:12:28.830
get rid of that space in there.

175
00:12:30.040 --> 00:12:30.840
Perfect.

176
00:12:30.880 --> 00:12:36.790
Again we return temp but before we do that we've got to be sure that we delete the buffer so we don't

177
00:12:36.790 --> 00:12:38.990
leak memory.

178
00:12:40.390 --> 00:12:41.940
And that should do it.

179
00:12:41.950 --> 00:12:49.680
So let's give this a compile and we get a compiler error here if I need one more colon there.

180
00:12:51.910 --> 00:12:54.750
And I've got an extra parentheses.

181
00:12:56.490 --> 00:12:57.720
See what else we have here.

182
00:12:57.750 --> 00:12:58.370
Char

183
00:13:02.380 --> 00:13:03.250
and that should do it.

184
00:13:03.250 --> 00:13:04.800
There's my run.

185
00:13:05.380 --> 00:13:09.280
So what we're doing is recreating a string Larry which is Larry with an uppercase.

186
00:13:09.280 --> 00:13:10.340
Ellen we're displaying it.

187
00:13:10.330 --> 00:13:17.300
There you can see it then we're using the unary minus operator right here and we're negating Larry what

188
00:13:17.300 --> 00:13:20.590
that means is just make Larry with all lower case letters.

189
00:13:20.600 --> 00:13:23.030
And in this case we're assigning right back to LARRY.

190
00:13:23.030 --> 00:13:28.900
So what happened here is that you can see Larry print out right here and we using move assignment.

191
00:13:28.910 --> 00:13:35.840
So there he is got a lowercase l now and then we've got some some comparison operators that we're testing

192
00:13:35.840 --> 00:13:36.500
out here.

193
00:13:36.500 --> 00:13:40.540
So Larry right now is Larry and Moe is Mo are they the same.

194
00:13:40.550 --> 00:13:41.600
No.

195
00:13:41.630 --> 00:13:43.140
Is there the same as stooge.

196
00:13:43.190 --> 00:13:46.720
Yes because I assigned Larry to students you can see so they're the same.

197
00:13:46.910 --> 00:13:53.610
And then we've got a few more test cases here which are real simple here Larry plus smoe displays Stooges

198
00:13:53.610 --> 00:13:54.790
is Larry plus Moe.

199
00:13:54.890 --> 00:13:59.870
So when I display stooges you see here Larry Moe right no space between them because I didn't provide

200
00:13:59.870 --> 00:14:05.150
one here two stooges as Moe Plus space plus Larry and I display that.

201
00:14:05.160 --> 00:14:07.160
There you see Moe in a space and Larry.

202
00:14:07.170 --> 00:14:12.320
And then finally we're going to change some of these concatenates is so we have mo space Larry space

203
00:14:12.320 --> 00:14:18.800
curly and we've got Moe Larry and Curly notice Larry still has that little lower case L and Curly is

204
00:14:18.800 --> 00:14:20.840
a C style string and it works just fine.

205
00:14:21.680 --> 00:14:22.000
OK.

206
00:14:22.020 --> 00:14:26.310
There you go you'll have some more time to practice these in the challenge exercise where you'll be

207
00:14:26.310 --> 00:14:31.830
able to do some some overloaded member functions and some overloaded operators as member functions and

208
00:14:31.830 --> 00:14:33.690
others as nonmember functions.
