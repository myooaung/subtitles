1
00:00:05,780 --> 00:00:13,540
This video we'll go over the steps necessary to write build and execute C++ programs from the command

2
00:00:13,540 --> 00:00:15,400
line on a Mac.

3
00:00:15,430 --> 00:00:19,660
All we really need is a terminal session and an editor.

4
00:00:19,660 --> 00:00:24,550
Now as far as the editor is concerned there are a bunch of editors out there some of them are free some

5
00:00:24,550 --> 00:00:26,650
of them are paid editors.

6
00:00:26,830 --> 00:00:31,720
The one I'm going to use in this example is called Atom A T O M and you can download it from the Internet

7
00:00:32,140 --> 00:00:33,700
and it's absolutely free.

8
00:00:33,970 --> 00:00:35,810
And it's a fine text editor.

9
00:00:35,830 --> 00:00:43,270
Now before I do that I'm going to create a folder on my desktop and I'm going to call it CVP projects.

10
00:00:43,270 --> 00:00:47,590
And within that folder I'm going to create another folder called Project 1

11
00:00:51,590 --> 00:00:54,680
and this is where we're going to store our source files.

12
00:00:55,030 --> 00:01:00,530
Ok so now what we need is we need an editor and we need a terminal window so let's create both of them

13
00:01:00,740 --> 00:01:03,310
first let's create the terminal session.

14
00:01:03,470 --> 00:01:06,900
So get a spotlight search and type terminal and press enter.

15
00:01:07,280 --> 00:01:12,430
And what I'm going to do is I'm going to move this terminal over here on the right so that it's right

16
00:01:12,470 --> 00:01:20,930
doc just perfectly and I'm going to run the Adam editor Now again you can run any editor you like.

17
00:01:20,930 --> 00:01:26,690
And there's the Adam editor and all closed down so these tabs here so that we're here from scratch.

18
00:01:26,690 --> 00:01:27,720
Perfect.

19
00:01:27,830 --> 00:01:31,090
And again I'm going to just dump this over here on the left side.

20
00:01:32,060 --> 00:01:36,100
OK so now what we want to do is we want to create a file in that folder that we just created.

21
00:01:36,100 --> 00:01:43,250
So let's go to a file new file and it's going to be a C++ file so I'm going to save this right now so

22
00:01:43,250 --> 00:01:48,410
that Adam knows it it's a C++ file missing file save as

23
00:01:51,190 --> 00:01:53,590
and I want to put this on my desk top

24
00:01:59,070 --> 00:02:04,290
in my CGP projects project one folder and I want to name the file name that C.P

25
00:02:08,610 --> 00:02:09,820
That said I'll save it.

26
00:02:10,170 --> 00:02:13,860
And now we can start typing our C++ program.

27
00:02:13,860 --> 00:02:17,550
It's really straightforward that simple hello world program is what we're going to write so we're going

28
00:02:17,550 --> 00:02:25,950
to say pound include and you could see that we've saved it as a dot file Adam knows and it's C++.

29
00:02:25,950 --> 00:02:30,780
So it's going to allow us to you know it's going to help us out with the code highlighting and syntax

30
00:02:30,780 --> 00:02:35,090
highlighting some of the include IO stream.

31
00:02:36,090 --> 00:02:44,100
Then I'm going to have my main I'll say and main open close friends and open Cur-Lee which it completes

32
00:02:44,100 --> 00:02:45,130
forming.

33
00:02:45,190 --> 00:02:47,540
Now here all I'm going to say is SCD.

34
00:02:47,740 --> 00:02:55,080
Colon's seek out it followed by the insertion operator which did to less than signs together and I'll

35
00:02:55,080 --> 00:02:57,330
just say any string.

36
00:02:57,340 --> 00:03:05,670
I'll just say hello Mac command line and I'll terminate that string and then I'll put a new line at

37
00:03:05,670 --> 00:03:09,370
the end so the cursor goes to the next line when we do the output.

38
00:03:09,990 --> 00:03:14,490
So that's the end DL It will return 0.

39
00:03:14,670 --> 00:03:15,330
That's it.

40
00:03:15,330 --> 00:03:19,620
That's the program will save it.

41
00:03:19,620 --> 00:03:22,940
Now we need to go over to our terminal to compile and run it.

42
00:03:23,130 --> 00:03:28,830
When you open up the terminal it defaults in your home directory so you can see if you type D that prints

43
00:03:28,830 --> 00:03:32,620
the working directory which is users followed by your user name.

44
00:03:32,640 --> 00:03:34,140
That's not where I want to be.

45
00:03:34,140 --> 00:03:40,220
I want to be in the desktop folder that we created so we can use a CD command to change directory and

46
00:03:40,230 --> 00:03:43,800
I'll just type desktop and you can press tab to autocomplete.

47
00:03:44,130 --> 00:03:49,910
Sonam in the desktop directory that I want to go to my CPV projects directory and finally to my project

48
00:03:49,920 --> 00:03:50,820
one directory.

49
00:03:50,820 --> 00:03:53,380
That's where I'm at now if I want to know what's in there.

50
00:03:53,430 --> 00:03:58,770
Just type LS which gives you a file listing and you can see there's maned not see Peepy that's this

51
00:03:58,770 --> 00:04:03,880
file we just created in the editor what we want to do now is we want to compile this file.

52
00:04:04,230 --> 00:04:08,910
So what we want to do is when to type G plus plus that's the name of the compiler that will execute

53
00:04:08,910 --> 00:04:10,170
the compiler.

54
00:04:10,170 --> 00:04:15,840
Then we want to provide the compiler the same switches that we did in the ID so will say dash capital

55
00:04:15,840 --> 00:04:17,880
W o l.

56
00:04:18,390 --> 00:04:20,560
So it turns on all warnings.

57
00:04:20,570 --> 00:04:26,730
Do we want to write dash s t d equals C++ 14.

58
00:04:26,760 --> 00:04:27,480
That'll tell us.

59
00:04:27,510 --> 00:04:31,040
Tell it to use modern C plus plus the 14 standard.

60
00:04:31,740 --> 00:04:34,100
Now we tell it what files you want to compile.

61
00:04:34,100 --> 00:04:37,510
In this case I only have one main dot CTP.

62
00:04:37,590 --> 00:04:41,430
If you have more than one you would just list them all separated by spaces.

63
00:04:41,730 --> 00:04:44,540
But here we've got main Dotsie peepee.

64
00:04:44,790 --> 00:04:47,190
That's it that's all you need to do.

65
00:04:47,250 --> 00:04:48,780
You press enter.

66
00:04:48,780 --> 00:04:50,420
We get no error messages.

67
00:04:50,850 --> 00:04:53,000
No news is good news.

68
00:04:53,250 --> 00:04:58,590
Would do an ls again and you can see that now we've got a new file created called a dot out.

69
00:04:58,590 --> 00:05:04,140
That's the default executor files name when you don't provide a name in order to run this.

70
00:05:04,140 --> 00:05:08,690
You just type a dot slash aid out out when I press Enter we should see.

71
00:05:08,700 --> 00:05:09,150
Hello Matt.

72
00:05:09,150 --> 00:05:10,060
Command line.

73
00:05:10,380 --> 00:05:11,670
That's exactly what we see.

74
00:05:11,670 --> 00:05:14,130
That's this statement right here executing.

75
00:05:14,640 --> 00:05:16,400
It's as simple as that.

76
00:05:16,410 --> 00:05:22,080
Now if you don't like 8. out you want to provide your own file name you can come up in what I'm doing

77
00:05:22,080 --> 00:05:27,350
here as I'm pressing the up arrow and the down arrow you can see it's going through what I've typed.

78
00:05:27,510 --> 00:05:33,180
So you want to go back to the statement where you ran the compiler and just type a dash lowercase O

79
00:05:33,660 --> 00:05:35,230
and whatever name you want.

80
00:05:35,370 --> 00:05:38,780
Your executor put a B in the press center.

81
00:05:38,790 --> 00:05:43,920
Now if we do a directory listing you can see that main is there if you want to run main dot slash main

82
00:05:45,570 --> 00:05:46,620
and that's it.

83
00:05:46,620 --> 00:05:50,470
We've created a file a C++ program.

84
00:05:50,790 --> 00:05:54,230
We compiled it and we ran it using only the command line.

85
00:05:54,310 --> 00:06:00,240
No IDs and as I mentioned there's a whole bunch of editors out there that you can use add them brackets

86
00:06:00,240 --> 00:06:09,870
text Wrangler text mate sublime and there's a bunch much more you can just do a search on on Google

87
00:06:09,870 --> 00:06:13,790
and you can come up with a bunch of examples of text editors.

88
00:06:13,800 --> 00:06:17,380
OK so let's talk about compiler errors now.

89
00:06:17,640 --> 00:06:23,940
I'm going to clear the screen here and I can do that in the terminal by just type clear and let's get

90
00:06:23,940 --> 00:06:27,210
rid of that semi-colon at the end here.

91
00:06:27,300 --> 00:06:34,290
Now if I run the compiler again you can see I've got a clean compile that makes no sense because I created

92
00:06:34,290 --> 00:06:40,200
an error here by removing the semi-colon while the issue is that I never saved this file.

93
00:06:40,230 --> 00:06:44,050
When you work with the IDs the IDs sync everything up.

94
00:06:44,160 --> 00:06:49,080
So they realize that your source code has changed so they're going to compile the latest version of

95
00:06:49,080 --> 00:06:49,530
it.

96
00:06:49,710 --> 00:06:52,490
Here these two are two separate programs and not saying.

97
00:06:52,530 --> 00:06:55,750
You're the person that has to sync them together by making sure you save it.

98
00:06:55,890 --> 00:07:01,840
So in this case I'm going to come here and do file save or command s.

99
00:07:02,110 --> 00:07:08,770
Now when I come back here and compile again I'll see the error which says I'm missing a semi-colon so

100
00:07:08,770 --> 00:07:11,420
I'll add that semi-colon.

101
00:07:11,500 --> 00:07:16,100
If I put a semi-colon in here at the end of IO stream which I should not have.

102
00:07:16,160 --> 00:07:19,520
I'll save it and then I'll go compile it again.

103
00:07:19,570 --> 00:07:22,180
You can see this an extra token at the end of the line.

104
00:07:22,180 --> 00:07:25,780
It's complaining about it so I can go back here.

105
00:07:26,500 --> 00:07:28,250
Command us again to save.

106
00:07:28,300 --> 00:07:33,060
And I can recompile this time I'll get a clean compile and I can run my main.

107
00:07:33,570 --> 00:07:34,200
That's it.

108
00:07:34,210 --> 00:07:35,610
It's as simple as that.

109
00:07:35,710 --> 00:07:40,960
If you don't have the resources to run an ID or you do like the idea or you feel the idea is confusing

110
00:07:40,960 --> 00:07:43,920
you and not really allow you to focus on the C++.

111
00:07:43,930 --> 00:07:45,450
This is a great alternative.

112
00:07:45,550 --> 00:07:47,610
Pretty easy pretty fast.

113
00:07:47,850 --> 00:07:49,400
Go be a business real quick.
