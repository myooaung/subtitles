1
00:00:05,450 --> 00:00:11,420
In this video I'd like to do an overview of the basic elements of the C++ standard template library

2
00:00:11,630 --> 00:00:18,530
and see what it's all about the SPL is a library of powerful reusable adaptable generic classes and

3
00:00:18,530 --> 00:00:19,560
functions.

4
00:00:19,910 --> 00:00:22,030
OK so what do all those words mean.

5
00:00:22,340 --> 00:00:24,140
Well the SBL is powerful.

6
00:00:24,140 --> 00:00:29,570
We've already seen a bit of that power when we use the vector class the FCL is reusable.

7
00:00:29,600 --> 00:00:34,610
Remember when we created vectors of integers and doubles in accounts and so forth we didn't have to

8
00:00:34,610 --> 00:00:40,880
do anything except tell the vector what we wanted it to hold the ASIO's adaptable.

9
00:00:40,880 --> 00:00:46,490
It provides containers iterators in algorithms that we can adapt to make them do whatever we need them

10
00:00:46,490 --> 00:00:48,680
to do with our programs.

11
00:00:48,680 --> 00:00:53,150
Finally the ACL is implemented using template functions and classes.

12
00:00:53,150 --> 00:00:56,530
We learn about C++ templates in the next few videos.

13
00:00:56,540 --> 00:01:00,560
They are one of the features that makes the post so powerful.

14
00:01:00,560 --> 00:01:05,660
The ACL is a huge class library will only be scratching the surface in this section.

15
00:01:05,780 --> 00:01:12,080
But once you understand how to use DSTO the principals will learn will apply across the entire SPL.

16
00:01:12,590 --> 00:01:19,340
The ACL was developed around 1994 by Alexander Stepanov and even today it's considered one of the best

17
00:01:19,340 --> 00:01:24,050
designed generic class libraries ever created.

18
00:01:24,050 --> 00:01:25,610
So what is the best deal.

19
00:01:25,970 --> 00:01:30,230
Well at its core the SBL is an assortment of commonly used containers.

20
00:01:30,230 --> 00:01:33,260
We'll see some of these containers in the next slide.

21
00:01:33,260 --> 00:01:40,230
The algorithms provided by the SBL have published and well understood time and size complexity information.

22
00:01:40,340 --> 00:01:45,380
That means that when you use the containers and algorithms in the CEO there are no surprises.

23
00:01:45,380 --> 00:01:50,210
You know exactly how the algorithms behave as the size of the collection increases.

24
00:01:50,360 --> 00:01:56,300
Complexity theory is beyond the scope of this course but it's an important part of software development.

25
00:01:56,300 --> 00:02:02,690
The SCA has been around a long time it's been tried and tested across many millions of lines of code.

26
00:02:02,690 --> 00:02:04,220
The ACL is consistent.

27
00:02:04,220 --> 00:02:08,810
Fast typesafe as well it's extensible.

28
00:02:08,810 --> 00:02:14,800
The ACL has three main components container's algorithms and iterators.

29
00:02:14,930 --> 00:02:18,230
Containers are collections of objects or primitive types.

30
00:02:18,230 --> 00:02:26,390
These include array vector deck stack set map and more algorithms are functions for processing sequence

31
00:02:26,390 --> 00:02:28,740
of elements from containers.

32
00:02:28,850 --> 00:02:34,990
The SPL has about 60 algorithms that can be used and extended to work with any type of data.

33
00:02:35,120 --> 00:02:40,610
These algorithms allow us to find a specific element in a container find the max or min element in a

34
00:02:40,610 --> 00:02:46,840
container count the number of elements in a container accumulate or sum up the values of container elements.

35
00:02:46,940 --> 00:02:52,080
Sort containers and that's just a few examples we can do much much more.

36
00:02:52,100 --> 00:02:59,390
Finally iterators generate the sequences of elements from the containers that the algorithms use.

37
00:02:59,390 --> 00:03:05,060
There are several types of iterators that allow us to generate sequences of elements in various ways.

38
00:03:05,060 --> 00:03:10,580
Note that one of the beautiful aspects of the design of the SBL is that the containers algorithms and

39
00:03:10,610 --> 00:03:16,940
iterators are designed totally independently from one another yet they work together seamlessly.

40
00:03:16,940 --> 00:03:20,410
Also note that I said the SBL has three main components.

41
00:03:20,660 --> 00:03:24,250
It also has a few other components such as functors and allocators.

42
00:03:24,290 --> 00:03:30,960
But we won't be covering those in this section before we get into the details of the SPL.

43
00:03:31,130 --> 00:03:36,770
Let's see a simple example of how we could use some of its functionality will use a vector of integers

44
00:03:36,770 --> 00:03:37,800
for these examples.

45
00:03:37,880 --> 00:03:43,040
Since we're already familiar with vectors in this example I'm including the vector and algorithm header

46
00:03:43,040 --> 00:03:44,070
files.

47
00:03:44,090 --> 00:03:49,520
Vector allows me to work with vectors an algorithm allows me to use the ECL algorithms.

48
00:03:49,520 --> 00:03:56,510
So let's create a simple vector of integers we'll call it V and initialize it to 3 integers 1 5 and

49
00:03:56,510 --> 00:03:58,200
3.

50
00:03:58,200 --> 00:04:01,080
Now suppose we want to sort that vector.

51
00:04:01,270 --> 00:04:07,930
We can use the FCL sort algorithm to do that but the sort algorithm needs a sequence of objects to sort.

52
00:04:07,930 --> 00:04:09,890
That's where the iterator comes in.

53
00:04:09,910 --> 00:04:13,560
We provide the sequence using vidette began and V.

54
00:04:14,230 --> 00:04:19,210
This provides the sort outgrow them with the integers in the vector v from the beginning element to

55
00:04:19,210 --> 00:04:20,200
the ending element.

56
00:04:20,200 --> 00:04:22,700
In other words the entire vector.

57
00:04:22,810 --> 00:04:23,680
That's it.

58
00:04:23,680 --> 00:04:28,090
Now we can display the vector using a range base for loop and we can see the elements in the vector.

59
00:04:28,090 --> 00:04:29,440
Now sorted.

60
00:04:29,440 --> 00:04:30,840
Pretty easy right.

61
00:04:30,880 --> 00:04:36,100
The iterator we used produced a sequence of all the integers in the vector but we could have easily

62
00:04:36,130 --> 00:04:39,340
provided only a subset if that's what we needed.

63
00:04:39,340 --> 00:04:42,730
So suppose we had need to only sort the first half of a vector.

64
00:04:42,820 --> 00:04:48,180
We could modify the iterator to produce just the first half of the elements.

65
00:04:48,190 --> 00:04:50,740
Also we aren't restricted to using a vector.

66
00:04:50,770 --> 00:04:55,130
We can sort just about any as T.L. container exactly the same way.

67
00:04:55,180 --> 00:05:00,850
Also we can extend the sorda algorithm to tell them exactly how to compare the elements when sorting.

68
00:05:00,880 --> 00:05:07,630
For example maybe we have a vector of account objects and we want to sort them by balance suppose that

69
00:05:07,630 --> 00:05:13,870
now we want to reverse the order of the integers in this vector we can use the SBL reverse algorithm

70
00:05:13,870 --> 00:05:14,900
to do that.

71
00:05:14,940 --> 00:05:19,390
The code is exactly the same but we use the reverse function instead of sort.

72
00:05:19,840 --> 00:05:24,620
And when we display the fact as elements we get 5 3 1 as we expect.

73
00:05:24,640 --> 00:05:30,260
Also I should mention that behind the scenes the range based for loop is itself an iterator.

74
00:05:30,280 --> 00:05:32,890
We'll talk more about that later.

75
00:05:32,890 --> 00:05:36,900
Now let's see a different type of algorithm function the accumulate function.

76
00:05:37,090 --> 00:05:42,490
In this case I want to add up all the integers in the vector and store the result in a variable called

77
00:05:42,490 --> 00:05:43,480
sum.

78
00:05:43,840 --> 00:05:46,920
To do this I can use the accumulate function.

79
00:05:46,930 --> 00:05:49,120
Notice that the function has parameters.

80
00:05:49,120 --> 00:05:51,040
The first two are iterators.

81
00:05:51,040 --> 00:05:52,010
Where do I start.

82
00:05:52,030 --> 00:05:53,420
Where do I end.

83
00:05:53,590 --> 00:05:59,380
This produces the sequence of elements that the accumulate function will process the third parameter

84
00:05:59,460 --> 00:06:04,330
0 in this case is what the running sum will start at Typically 0.

85
00:06:04,330 --> 00:06:09,350
But we can use any number we want the type of this third parameter is very important.

86
00:06:09,470 --> 00:06:16,100
So if you want to sum integers use 0 if you want to sum doubles use zero point zero the total is stored

87
00:06:16,100 --> 00:06:19,920
in sum and in this case we display 9 which is one plus three plus five.

88
00:06:20,030 --> 00:06:25,880
The sum of the elements in the vector from these simple examples you can see how powerful using containers

89
00:06:25,910 --> 00:06:29,120
iterators and algorithms can be.

90
00:06:29,120 --> 00:06:33,240
Now let's talk about the various types of containers provided by DSTO.

91
00:06:33,410 --> 00:06:36,020
We have three basic categories of containers.

92
00:06:36,170 --> 00:06:43,610
Sequence associative and container adapter's sequence containers are containers that maintain the ordering

93
00:06:43,820 --> 00:06:45,370
of inserted elements.

94
00:06:45,380 --> 00:06:52,310
These containers include array vector list forward lists and deck will discuss each of these containers

95
00:06:52,310 --> 00:06:58,730
in this section of the Course associative containers insert elements in a predefined order or no order

96
00:06:58,730 --> 00:06:59,780
at all.

97
00:06:59,840 --> 00:07:05,690
For example a set is a collection of elements where there are no duplicates but there may be an order

98
00:07:05,690 --> 00:07:06,970
associated with it or not.

99
00:07:06,980 --> 00:07:10,130
We've got the option to choose whatever one we want.

100
00:07:10,130 --> 00:07:15,180
A map is like a dictionary where we associate a word with its definition.

101
00:07:15,200 --> 00:07:21,020
There are many variants of this category so we can have ordered sets an ordered sets sets that allow

102
00:07:21,020 --> 00:07:24,350
duplicates maps that allow duplicates and so forth.

103
00:07:24,350 --> 00:07:28,120
These are very powerful data structures that are often underused.

104
00:07:28,130 --> 00:07:30,850
We'll talk about them in this section and I'll show you how to use them.

105
00:07:31,760 --> 00:07:32,750
The last category.

106
00:07:32,750 --> 00:07:36,950
Container adapters are variations of the other containers.

107
00:07:36,950 --> 00:07:42,140
This category does not support iterators so they can't be used with as T.L. algorithms but they're so

108
00:07:42,140 --> 00:07:46,400
commonly used in programming that DSL provide support for them.

109
00:07:46,400 --> 00:07:51,840
These include the stack the queue and the priority queue.

110
00:07:52,040 --> 00:07:57,950
In this slide you can see that the ACL has several types of iterators input iterators make container

111
00:07:57,950 --> 00:08:04,190
elements available to your program output iterators can iterate over a sequence and write an element

112
00:08:04,190 --> 00:08:11,480
to a container for iterators can iterate forward over a sequence and can rewrite any element by directional

113
00:08:11,480 --> 00:08:17,570
iterators are like forward iterators but they can iterate over a sequence in both directions and finally

114
00:08:17,810 --> 00:08:22,970
random access iterators can use the subscript operator to directly access elements.

115
00:08:22,970 --> 00:08:25,830
We saw that with the Vector class.

116
00:08:25,930 --> 00:08:31,930
Finally we have the ACL algorithms as I mentioned previously there are about 60 algorithms in the SPL

117
00:08:32,590 --> 00:08:38,950
and the algorithms are classified into two major groups not modifying and modifying algorithms depending

118
00:08:38,950 --> 00:08:42,690
on whether the algorithm modifies the sequence it acts upon.

119
00:08:43,150 --> 00:08:49,020
As you can see there is a lot to the T.L. and we can't possibly cover it all in detail in a single section.

120
00:08:49,030 --> 00:08:54,490
In fact entire books have been written about the ACL but by the time you get to the end of this section

121
00:08:54,820 --> 00:08:59,990
you'll understand the fundamentals of the ACL and be able to use this heal containers iterators and

122
00:09:00,010 --> 00:09:02,790
algorithms to solve real problems.

123
00:09:02,860 --> 00:09:08,020
But before we get to the ACL Let's talk a little bit about generic programming and templates so that

124
00:09:08,020 --> 00:09:10,630
we can understand the design behind DSTO.
