WEBVTT
1
00:00:05.900 --> 00:00:11.010
In this video we'll learn about C++ his compound assignment operators.

2
00:00:11.120 --> 00:00:15.270
These operators are very easy to use and commonly used in C++ code.

3
00:00:16.120 --> 00:00:18.590
The syntax for the operators is pretty simple.

4
00:00:18.640 --> 00:00:23.070
It's the operator you wish to use immediately followed by an equal sign.

5
00:00:23.070 --> 00:00:27.220
There are quite a few of these operators but we'll focus on the mathematical operators.

6
00:00:27.330 --> 00:00:31.890
The bottom half of this table includes the operators that are used to manipulate bits.

7
00:00:32.010 --> 00:00:36.020
They're called bitwise operators and I'll cover them later in this course.

8
00:00:36.060 --> 00:00:39.540
So let's look at the first one in the table the plus equal operator.

9
00:00:39.780 --> 00:00:46.280
We apply the operator as in the example column for example left hand side plus equals right hand side.

10
00:00:46.530 --> 00:00:52.110
The meaning of this would be to increment the left hand side by the right hand side and then store the

11
00:00:52.110 --> 00:00:54.590
resulting value in the left hand side.

12
00:00:54.900 --> 00:00:58.060
We'll see a few real code examples in the next slide.

13
00:00:58.080 --> 00:01:00.270
All of these operators work the same way.

14
00:01:00.270 --> 00:01:05.900
For example the multiplication equal operator multiplies the left hand side by the right hand side and

15
00:01:05.980 --> 00:01:08.480
stores the product back in the left hand side.

16
00:01:08.730 --> 00:01:10.100
Let's see some examples.

17
00:01:11.890 --> 00:01:16.100
Here we see some examples of using several of the compound assignment operators.

18
00:01:16.450 --> 00:01:18.190
Let's look at the first example.

19
00:01:18.220 --> 00:01:20.150
A plus equals one.

20
00:01:20.230 --> 00:01:26.110
This means increment the left hand side by the right hand side and store the result back into the left

21
00:01:26.110 --> 00:01:26.970
hand side.

22
00:01:26.980 --> 00:01:34.190
So this is the same as a equals a plus one and it's another way of incrementing a variable by 1.

23
00:01:34.190 --> 00:01:40.850
The second example works exactly the same way a set that will be dividing the A by five then storing

24
00:01:40.850 --> 00:01:43.250
the result back into a.

25
00:01:43.350 --> 00:01:49.250
The third example shows how the entire right hand side is evaluated before the operators is applied.

26
00:01:49.290 --> 00:01:54.140
In this case we have a multiplication equal BE PUSSY.

27
00:01:54.210 --> 00:02:02.280
This means multiply a by the sum of B pussy then store the product back in a in the last example were

28
00:02:02.280 --> 00:02:09.410
incrementing cost by the product of item and tax the best tip I can give you when you write these operators

29
00:02:09.410 --> 00:02:14.720
has to think of the right hand side as being inside parentheses and will always have it right.
