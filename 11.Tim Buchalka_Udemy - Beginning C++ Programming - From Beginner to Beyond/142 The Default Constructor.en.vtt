WEBVTT
1
00:00:05.350 --> 00:00:08.710
In this video we'll talk more about the default constructor.

2
00:00:09.190 --> 00:00:13.360
A default constructor is a constructor that doesn't expect any arguments.

3
00:00:13.360 --> 00:00:20.470
It's also called a no args constructor C++ has to have a way to construct an initialize objects if you

4
00:00:20.470 --> 00:00:23.580
don't provide any initialization information at all.

5
00:00:23.590 --> 00:00:30.590
So if you don't provide any constructors at all C++ will generate a default constructor automatically.

6
00:00:30.610 --> 00:00:35.840
This default constructor does nothing but it's still generated by C++.

7
00:00:35.860 --> 00:00:40.900
When you create objects with no initialization information this is the constructor that's called.

8
00:00:41.140 --> 00:00:43.850
Let's take a look at the account class again.

9
00:00:44.410 --> 00:00:47.830
In this account class we've defined no constructors at all.

10
00:00:48.070 --> 00:00:55.030
So C++ will automatically generated default constructor that allows us to create objects with no initialization

11
00:00:55.030 --> 00:00:56.260
information.

12
00:00:56.260 --> 00:00:57.740
Let's see a few examples.

13
00:00:58.940 --> 00:01:02.800
Here we're creating two local objects frank account and Jim account.

14
00:01:02.960 --> 00:01:05.840
The compiler provided default constructor will be used.

15
00:01:05.840 --> 00:01:11.720
Since we didn't provide any constructors at all in the case of a pointer to an object the same thing

16
00:01:11.720 --> 00:01:17.360
happens except that the object is created on the heap since the compiler generated default constructor

17
00:01:17.360 --> 00:01:18.380
does nothing.

18
00:01:18.380 --> 00:01:23.470
The class member attributes of the Account class could contain garbage since they haven't been initialized.

19
00:01:24.550 --> 00:01:28.290
Of course we're free to provide her own user defined no args constructor.

20
00:01:28.300 --> 00:01:31.780
In fact it's best practice to do so in this case.

21
00:01:31.840 --> 00:01:35.320
We're defining our own user to find no args constructor.

22
00:01:35.320 --> 00:01:39.190
This constructor will be called when no initialization information is provided.

23
00:01:39.310 --> 00:01:43.770
And in this constructor we set the account name to none and the account balance is zero.

24
00:01:43.840 --> 00:01:49.420
So we're initializing the account member attributes to values we know about not garbage data.

25
00:01:49.420 --> 00:01:55.340
Now let's see what happens when we define a constructor that expects arguments.

26
00:01:55.370 --> 00:02:01.100
In this case we're defining a constructor that expects a string and a double and we initialize our member

27
00:02:01.100 --> 00:02:04.010
attributes to the values passed into the constructor.

28
00:02:04.010 --> 00:02:06.010
This is very commonly done.

29
00:02:06.060 --> 00:02:13.430
However once we define a constructor for our class C++ will now not generate the no args default constructor

30
00:02:13.430 --> 00:02:14.690
automatically.

31
00:02:14.840 --> 00:02:19.040
If we still need it then we must explicitly define it ourselves.

32
00:02:19.040 --> 00:02:24.230
If you have code that creates objects with no initialization information then that code will no longer

33
00:02:24.230 --> 00:02:29.470
compile since the default constructor is no longer generated by C++.

34
00:02:29.480 --> 00:02:33.720
So in this example we can no longer create account objects with no arguments.

35
00:02:33.800 --> 00:02:38.720
Again since the default constructor is no longer automatically generated by the compiler.

36
00:02:38.840 --> 00:02:41.610
So we'll get three compiler errors when we try to create Frank.

37
00:02:41.630 --> 00:02:43.520
Jim and Mary's account.

38
00:02:43.520 --> 00:02:48.500
However we can still create account objects but we have to use the construct we provided that expects

39
00:02:48.500 --> 00:02:53.780
a string in a double so we can create Bill's account since it provides the initialization information

40
00:02:53.780 --> 00:02:55.970
required by the constructor.

41
00:02:55.970 --> 00:02:58.560
Let's go through some of these examples in the ID.

42
00:02:58.940 --> 00:03:00.240
OK so I'm in the ID.

43
00:03:00.270 --> 00:03:06.830
I'm in the section 13 workspace in the default constructor project and what I've got here is the same

44
00:03:06.830 --> 00:03:11.120
player class that we've been using where we've got the name the health and the XP for a player which

45
00:03:11.120 --> 00:03:11.660
are private.

46
00:03:11.660 --> 00:03:16.250
Instance variables and we've also got a couple of member methods here.

47
00:03:16.250 --> 00:03:17.510
Set name and get name.

48
00:03:17.510 --> 00:03:22.040
That's just the setter in the getter for that name attribute right there.

49
00:03:22.040 --> 00:03:25.700
What's important to understand here is of course how would do the same thing for health or XP.

50
00:03:25.790 --> 00:03:29.880
But I want to clutter up the code I just want to talk about the default constructors here.

51
00:03:29.900 --> 00:03:38.020
You'll notice that this player class has no constructor declared C++ has to have a way to create objects.

52
00:03:38.180 --> 00:03:45.770
So if you don't provide any constructors it will provide a system generated no args constructor that

53
00:03:45.770 --> 00:03:47.490
will allow you to create objects.

54
00:03:47.630 --> 00:03:50.590
So in this case I don't have any constructors declared.

55
00:03:50.780 --> 00:03:52.170
But yet I can be if I can.

56
00:03:52.220 --> 00:03:57.140
I'm able to create player objects with no problem.

57
00:03:57.140 --> 00:04:00.740
I could say Frank-Dodd set name to it say Frank

58
00:04:03.890 --> 00:04:08.950
and I could output the value of Frank's name by using GET name

59
00:04:12.080 --> 00:04:14.920
something real simple like that and what we'll do is we'll walk through this.

60
00:04:14.930 --> 00:04:20.680
We'll step through it using the debugger put a breakpoint right here and we can debug this real quickly.

61
00:04:21.780 --> 00:04:27.210
And we really don't care about the output we just want to see that object so you can see here that I'm

62
00:04:27.210 --> 00:04:33.620
on line 24 and I'm going to instantiate that Frank object which is a player.

63
00:04:33.780 --> 00:04:40.680
There is no constructor so behind the scenes a default no args constructor is generated that does nothing

64
00:04:40.980 --> 00:04:43.750
but it does allow C++ to create that object.

65
00:04:43.770 --> 00:04:46.270
So I'm going to go next here.

66
00:04:46.320 --> 00:04:53.460
At this point Frank is created you can see the object right up appear and I executed the set name which

67
00:04:53.460 --> 00:04:55.730
set the attribute name to Frank.

68
00:04:55.890 --> 00:04:56.600
That's it.

69
00:04:56.610 --> 00:04:59.070
The next date moved obviously printed to the console.

70
00:04:59.160 --> 00:05:04.290
So you can see C++ has to have a way to create these objects if you don't provide a way to initialize

71
00:05:04.290 --> 00:05:10.860
this using any kind of a no args constructor when you get one automatically by the compiler.

72
00:05:10.860 --> 00:05:11.460
That's great.

73
00:05:11.460 --> 00:05:15.500
Now of course I'm going to stop this of course we can create our own.

74
00:05:15.540 --> 00:05:17.180
No args constructor.

75
00:05:17.250 --> 00:05:17.940
So let's do that.

76
00:05:17.940 --> 00:05:20.610
I'll do it down here so it's closer to the main.

77
00:05:20.970 --> 00:05:23.060
So what we can do is we can create our constructor.

78
00:05:23.060 --> 00:05:24.330
There it is it's called player.

79
00:05:24.330 --> 00:05:25.700
Same name as the class.

80
00:05:25.920 --> 00:05:28.950
No args and we'll implement it right here.

81
00:05:28.950 --> 00:05:34.090
Now what's the default behavior I want when I don't provide any initialization information.

82
00:05:34.440 --> 00:05:37.160
Anything reasonable would ever make sense for your application.

83
00:05:37.160 --> 00:05:41.170
In this case let's just say that Mame has none.

84
00:05:41.180 --> 00:05:44.310
Will say that the health is let's say 100

85
00:05:48.450 --> 00:05:51.570
and let's say the XP is 3.

86
00:05:53.100 --> 00:05:53.550
That's it.

87
00:05:53.550 --> 00:05:57.240
That's my initialiser that's also my default initialized.

88
00:05:57.240 --> 00:05:58.620
That's what's important.

89
00:05:58.650 --> 00:06:03.390
This will now be called right here and I'll put a breakpoint right in there so we can see it being called

90
00:06:03.390 --> 00:06:04.820
and we'll debug this again.

91
00:06:09.330 --> 00:06:10.350
And here we go.

92
00:06:10.380 --> 00:06:17.040
What you can see happening is we're right here on line 30 and now when I step through this notice how

93
00:06:17.040 --> 00:06:21.710
it transfers control to line 22 that's exactly what we expected.

94
00:06:21.720 --> 00:06:26.010
We didn't see that before we because we didn't provide a default constructor but now we're providing

95
00:06:26.010 --> 00:06:30.490
one so ours would be called rather than the compiler created one.

96
00:06:30.720 --> 00:06:36.870
And this would just step through and set the properties to name a hundred and three.

97
00:06:36.880 --> 00:06:42.150
Now I'm back here on 931 and you can see right here that we've got none.

98
00:06:42.160 --> 00:06:48.330
103 and now I can change the nun to Frank right here on this line and I'll refresh this.

99
00:06:48.350 --> 00:06:52.540
And you can see here it's Frank right there the string is Frank.

100
00:06:52.850 --> 00:06:53.290
OK.

101
00:06:53.390 --> 00:06:54.950
So there you go.

102
00:06:54.980 --> 00:06:59.230
You don't provide any constructor's you get a default constructor for free if you will.

103
00:06:59.420 --> 00:07:03.940
And if you provide your own default constructor that's the one that will be used.

104
00:07:03.950 --> 00:07:06.060
Now let's do one more thing here.

105
00:07:06.230 --> 00:07:08.380
What happens if you create.

106
00:07:08.420 --> 00:07:16.370
Let me come at this out right here and suppose that I want to create a different constructor an overloaded

107
00:07:16.370 --> 00:07:24.200
constructor so I'm going to say player and I want to provide the name I want to provide all of those

108
00:07:24.200 --> 00:07:24.930
values.

109
00:07:25.080 --> 00:07:26.140
So is my name Val.

110
00:07:26.150 --> 00:07:27.320
I want health

111
00:07:30.380 --> 00:07:31.710
and I want the XP as well.

112
00:07:31.730 --> 00:07:37.180
I want to provide all three of these values and in the body of this constructor I'm just going to say

113
00:07:37.180 --> 00:07:39.780
name equals named Val.

114
00:07:40.900 --> 00:07:42.240
Healthy equals helpful

115
00:07:46.370 --> 00:07:50.840
and XP equals XP though.

116
00:07:52.060 --> 00:07:54.570
OK so that's where we're at now.

117
00:07:54.680 --> 00:08:01.010
We have a bit of a problem now in C++ and this is true of many Object-Oriented languages including Java

118
00:08:01.010 --> 00:08:02.200
and others.

119
00:08:02.300 --> 00:08:04.060
You get that default constructor.

120
00:08:04.100 --> 00:08:06.770
As long as you don't provide any other constructor.

121
00:08:06.890 --> 00:08:09.950
Well what we just did here is we provided a constructor.

122
00:08:10.160 --> 00:08:13.370
In this case this constructor expects three arguments.

123
00:08:13.370 --> 00:08:19.340
Now that compiler generated no args default constructor will no longer be generated.

124
00:08:19.370 --> 00:08:23.990
So this line of code right here on line 35 won't compile anymore.

125
00:08:23.990 --> 00:08:25.840
Let me run the debugger here.

126
00:08:25.840 --> 00:08:31.590
You'll see the error right here it says no matching function call for the no args constructor.

127
00:08:31.610 --> 00:08:33.200
This is perfectly normal.

128
00:08:33.200 --> 00:08:35.680
This is exactly the way it's supposed to work.

129
00:08:35.690 --> 00:08:41.690
The idea being that now you've provided a way to construct your object so C++ will no longer provide

130
00:08:41.690 --> 00:08:43.100
a default way right.

131
00:08:43.100 --> 00:08:47.250
Maybe you don't want a default way so this won't compile.

132
00:08:47.390 --> 00:08:51.910
I'll comment that out and move the breakpoint down to here.

133
00:08:52.310 --> 00:08:57.400
So now the way we need to construct this object is to explicitly call that other constructor.

134
00:08:57.440 --> 00:09:05.730
I'm going to say player Frank will initialize that to Frank 100 and let's say 13 or something.

135
00:09:08.020 --> 00:09:14.410
OK now what's going to happen is when this line executes I feel those break points when this line executes

136
00:09:14.430 --> 00:09:19.470
1:36 what's going to happen is this constructor's going to be called the one that I just created.

137
00:09:19.470 --> 00:09:26.080
So I put a breakpoint there so you can see that happening OK so let's debunk this again walk through

138
00:09:26.080 --> 00:09:27.280
it one more time.

139
00:09:28.260 --> 00:09:31.480
And here we are we're on 9:36.

140
00:09:31.550 --> 00:09:35.980
When I step through it you'll see control will be transferred up to 127 appear.

141
00:09:35.970 --> 00:09:37.850
So there we are.

142
00:09:37.860 --> 00:09:39.660
We're in the constructor now.

143
00:09:39.860 --> 00:09:44.590
So we were explicitly calling that three constructor that we just created.

144
00:09:44.600 --> 00:09:50.990
Remember once I create any kind of constructor the default constructor that's that's automatically generated

145
00:09:51.080 --> 00:09:53.000
won't be generated anymore.

146
00:09:53.180 --> 00:09:57.190
We'll walk through this and when we're done we'll refresh this.

147
00:09:57.200 --> 00:10:01.860
And you can see Frank 113 has been created just as we expected.

148
00:10:01.860 --> 00:10:07.320
Now of course we can create both of these right.

149
00:10:07.460 --> 00:10:14.050
So now I can create let's say a hero object.

150
00:10:14.050 --> 00:10:17.400
So now what we've got is we've got two constructors that we provide.

151
00:10:17.410 --> 00:10:23.200
We provided a no args constructor and we provided this overloaded construct that expects the three arguments.

152
00:10:23.440 --> 00:10:27.580
In this case hero we're not providing any initialization information.

153
00:10:27.670 --> 00:10:33.660
So the no args constructor this guy right here on 9:21 will be called and in the case of Frank.

154
00:10:33.730 --> 00:10:35.750
It'll be just like before this one will be called.

155
00:10:35.830 --> 00:10:37.930
So let's step through that.

156
00:10:40.420 --> 00:10:42.350
And let me do that again.

157
00:10:42.370 --> 00:10:49.490
Put a breakpoint on hero and let's try that one more time and you can see what's happening here is I'm

158
00:10:49.510 --> 00:10:56.230
right here on line 35 so I'm going to construct that hero object and you can see transfers control right

159
00:10:56.230 --> 00:10:56.990
up to here.

160
00:10:57.070 --> 00:11:00.880
So that does no args constructor is being called that's what we expect.

161
00:11:00.940 --> 00:11:02.450
That's our constructor right.

162
00:11:02.470 --> 00:11:05.320
That's not compiler generated because we wrote it ourselves.

163
00:11:05.380 --> 00:11:07.710
So that's going to execute.

164
00:11:07.780 --> 00:11:13.830
Now I come back to Frank and this constructor will be called so you'll see control be transferred here

165
00:11:13.840 --> 00:11:16.610
27 and we'll run through that.

166
00:11:16.630 --> 00:11:19.560
You can see it happening right here on 1:29 that's where I'm at now.

167
00:11:20.520 --> 00:11:26.560
And at this point we've got both those objects constructed and we can see them right here.

168
00:11:26.700 --> 00:11:31.190
There's Frank and there's hero hero uses none 103.

169
00:11:31.470 --> 00:11:34.410
And Frank is using Frank 113.

170
00:11:34.410 --> 00:11:36.120
You see them right here.

171
00:11:36.120 --> 00:11:36.950
OK so that's it.

172
00:11:36.960 --> 00:11:40.000
That's the behavior for default constructors in C++.
