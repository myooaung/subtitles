WEBVTT
1
00:00:05.570 --> 00:00:12.500
In this video we're learn about recursive functions and how to implement them in C++ a recursive function

2
00:00:12.500 --> 00:00:17.990
is a function that calls itself the function can call itself directly or indirectly through another

3
00:00:17.990 --> 00:00:19.110
function.

4
00:00:19.160 --> 00:00:24.650
If we end up with two or more activation records on the stack for the same function then we have recursion

5
00:00:25.590 --> 00:00:28.200
recursion is great for certain classes of problems.

6
00:00:28.350 --> 00:00:32.580
Recursive problem solving is something that most programmers have a little trouble doing when they first

7
00:00:32.610 --> 00:00:34.380
learn that's normal.

8
00:00:34.380 --> 00:00:38.760
Eventually you'll understand that recursive solutions make sense in certain cases.

9
00:00:38.760 --> 00:00:43.830
There are many types of recursive problems that lend themselves well to a recursive solution.

10
00:00:43.830 --> 00:00:49.770
In mathematics we have factorial Fibonacci numbers fractals and many more is searching and sorting we

11
00:00:49.770 --> 00:00:54.870
have binary searches search trees depth first search graphs and also many more.

12
00:00:54.900 --> 00:01:00.420
There are also classic problems like the Towers of Hanoi that can really be hard to solve with a non-recursive

13
00:01:00.420 --> 00:01:01.520
solution.

14
00:01:01.560 --> 00:01:05.300
Let's see how we can calculate the factorial of a number using recursion.

15
00:01:07.130 --> 00:01:11.680
Here we see the definition for factorial as you would find in a math book.

16
00:01:11.750 --> 00:01:14.300
Factorial is defined in terms of itself.

17
00:01:14.300 --> 00:01:16.890
That's what recursion is all about.

18
00:01:16.910 --> 00:01:18.260
We have a base case.

19
00:01:18.260 --> 00:01:26.240
So in this case factorial of 0 is one by definition and we have the recursive case factorial event or

20
00:01:26.420 --> 00:01:31.490
factorial is equal to end times and minus one factorial.

21
00:01:31.490 --> 00:01:33.370
See the recursion there.

22
00:01:33.440 --> 00:01:35.840
Let's see how we can implement this in C++.

23
00:01:37.580 --> 00:01:40.060
So let's look at the code starting at Main.

24
00:01:40.070 --> 00:01:43.900
We call factorial and Pessin an 8 to the factorial function.

25
00:01:44.300 --> 00:01:48.940
When the factorial function returns the value returned will be output to the console.

26
00:01:48.950 --> 00:01:52.390
In this case we expect 40000 320.

27
00:01:52.640 --> 00:01:55.870
OK so now let's look at the factorial function itself.

28
00:01:55.880 --> 00:02:01.790
First we need to decide what types will accept and return the factorial function can generate massively

29
00:02:01.790 --> 00:02:03.010
huge numbers.

30
00:02:03.020 --> 00:02:08.680
So in this case I'm using unsigned long long as the return type and the parameter type.

31
00:02:09.200 --> 00:02:14.270
This can hold very very large positive integers but we can still get an overflow even with such a big

32
00:02:14.270 --> 00:02:15.690
number.

33
00:02:15.830 --> 00:02:20.300
If you look at the code for the factorial function it looks exactly like the mathematical definition

34
00:02:20.300 --> 00:02:21.620
of factorial.

35
00:02:21.620 --> 00:02:23.000
We check a base case.

36
00:02:23.090 --> 00:02:27.570
In this case if any is equal to zero we return 1.

37
00:02:27.590 --> 00:02:31.000
Remember the return knocks you out of the function immediately.

38
00:02:31.070 --> 00:02:36.770
Otherwise we return the result of calling the factorial function again with and minus one.

39
00:02:36.770 --> 00:02:42.040
So in this case it would be return N times call factorial with n minus 1.

40
00:02:42.050 --> 00:02:48.170
There is the recursion the base case is super important since it's what stops the recursion.

41
00:02:48.170 --> 00:02:53.600
Otherwise we will recurse indefinitely and eventually we'd run out of stack space and get a stack overflow

42
00:02:53.600 --> 00:02:59.120
error in a bit we'll head over to the ID and I'll walk you step by step in detail through an example

43
00:02:59.120 --> 00:03:03.860
call to factorial so you can see exactly what's happening on the stack.

44
00:03:03.860 --> 00:03:06.040
Let's look at calculating a Fibonacci number.

45
00:03:06.030 --> 00:03:11.180
Now here's the definition for Fibonacci number.

46
00:03:11.180 --> 00:03:20.150
There are two base cases Fibonacci of 0 0 and Fibonacci of 1 is 1 and the recursive case is Fibonacci

47
00:03:20.150 --> 00:03:26.290
of N is equal to Fibonacci of and minus one plus the Fibonacci of and minus 2.

48
00:03:26.300 --> 00:03:32.110
Again notice the recursive definition Fibonacci is defined in terms of itself.

49
00:03:32.120 --> 00:03:36.550
I think you can see how to implement this in C++.

50
00:03:36.620 --> 00:03:42.170
Again I've decided to use unsigned long long since Fibonacci can also produce huge numbers.

51
00:03:42.170 --> 00:03:44.100
Notice in the main I call Fibonacci.

52
00:03:44.300 --> 00:03:49.070
And the result I expect back is 830 2040.

53
00:03:49.070 --> 00:03:51.350
Now let's look at the Fibonacci function.

54
00:03:51.350 --> 00:03:53.550
Notice the handling of the base cases.

55
00:03:53.750 --> 00:03:56.950
If any is less than or equal to 1 then we simply return.

56
00:03:56.960 --> 00:04:04.190
And so when end is zero we return 0 and when end is 1 we return one that handles both base cases in

57
00:04:04.190 --> 00:04:05.070
one step.

58
00:04:05.090 --> 00:04:10.540
We could easily rewrite this condition to explicitly check and equals zero and equals 1.

59
00:04:10.740 --> 00:04:12.700
But this achieves the same result.

60
00:04:13.130 --> 00:04:18.020
This base case is what stops the recursion if and is not 0 or 1.

61
00:04:18.020 --> 00:04:22.670
Then we call Fibonacci again with both pieces of the problem definition.

62
00:04:22.670 --> 00:04:26.660
Eventually the recursion will stop and the result will be returned to main.

63
00:04:26.660 --> 00:04:30.590
Notice how much the code looks like the mathematical definition of Fibonacci.

64
00:04:30.590 --> 00:04:31.990
This is by design.

65
00:04:32.030 --> 00:04:34.100
Let me give you a few thoughts on recursion.

66
00:04:35.260 --> 00:04:37.970
Remember recursion is a form of iteration.

67
00:04:38.110 --> 00:04:43.570
So anything that can be done recursively can also be done with iteration and vice versa.

68
00:04:43.570 --> 00:04:46.010
Use recursion only when it makes sense.

69
00:04:46.030 --> 00:04:49.510
The problem must lend itself to a recursive solution.

70
00:04:49.540 --> 00:04:52.080
Don't use recursion to count from 1 to 10.

71
00:04:52.120 --> 00:04:53.410
Remember the base cases.

72
00:04:53.410 --> 00:04:59.080
They are what stops the recursion and are super important because of the call stack recursion can be

73
00:04:59.080 --> 00:05:00.600
quite resource intensive.

74
00:05:00.760 --> 00:05:03.220
Especially if you have very deep recursion.

75
00:05:03.250 --> 00:05:08.050
It's not uncommon when you're first learning recursion to recurse indefinitely and run out of stack

76
00:05:08.050 --> 00:05:11.800
space resulting in a stack overflow where that's perfectly fine.

77
00:05:11.800 --> 00:05:12.840
This is how you learn.

78
00:05:12.850 --> 00:05:18.250
I can't tell you how many times in my career I've seen recursive functions rewritten to iterative solutions

79
00:05:18.250 --> 00:05:19.940
because of resource issues.

80
00:05:20.170 --> 00:05:26.080
Generally an iterative solution to a recursively defined problem is less elegant and more difficult

81
00:05:26.080 --> 00:05:31.810
to understand in code but sometimes we have to meet nonfunctional requirements and that's what it takes.

82
00:05:32.200 --> 00:05:37.160
Let's head over to the idea and walk through a factorial example in detail.

83
00:05:37.430 --> 00:05:42.740
So I'm in the idealy I'm in the sectional Levan workspace and there are two projects that are interesting

84
00:05:42.740 --> 00:05:45.000
here that both use recursive functions.

85
00:05:45.050 --> 00:05:47.300
One is the Fibonacci project to this effect.

86
00:05:47.300 --> 00:05:52.750
Tauriel project went through a detailed example of how factorial works recursively in a minute.

87
00:05:52.910 --> 00:05:55.740
But here's Fibonacci and it's just like I wrote in the slides.

88
00:05:55.970 --> 00:05:59.900
So here in the main I'm calculating the Fibonacci number for 530 and 40.

89
00:05:59.900 --> 00:06:04.930
You can see the forties pretty large if you try to do like a Fibonacci of 50 or something like that.

90
00:06:05.030 --> 00:06:08.080
It's going to take a while because there's a lot of recursion going on.

91
00:06:08.090 --> 00:06:13.190
It all depends on how fast your machine is even here when I do a Fibonacci of 40 I'll run this and you'll

92
00:06:13.190 --> 00:06:15.280
see a little bit of a delay.

93
00:06:16.810 --> 00:06:21.490
You see that it took just over a second delay there to actually calculate that Fibonacci number and

94
00:06:21.500 --> 00:06:22.710
it's a pretty large number.

95
00:06:22.890 --> 00:06:28.950
But once you start getting to really large numbers here for example 45 50 then the recursion is just

96
00:06:28.950 --> 00:06:32.240
tremendous and it takes a lot to solve those problems.

97
00:06:32.430 --> 00:06:34.890
OK so let me go back to factorial.

98
00:06:34.930 --> 00:06:36.760
And when I really want to go over here.

99
00:06:36.810 --> 00:06:39.050
So here's the factorial just like we wrote it.

100
00:06:39.240 --> 00:06:41.220
The factorial of some number.

101
00:06:41.340 --> 00:06:47.290
And there's four examples here you can see factorial three is six factorial betas 43 20 and so forth.

102
00:06:47.310 --> 00:06:50.640
You could see the factorial of 20 is a really big number.

103
00:06:50.760 --> 00:06:54.340
And as this number grows here that number really grows big time.

104
00:06:54.420 --> 00:07:01.740
So let me run this and you can see it's really fast here but once you start really increasing that number

105
00:07:01.740 --> 00:07:03.780
there it's going to slow down big time.

106
00:07:03.780 --> 00:07:07.920
Now what I want to do is I want to I'm going to come at this out just for a minute because I'm only

107
00:07:07.920 --> 00:07:10.310
interested in factorial of three.

108
00:07:10.470 --> 00:07:15.770
I want to walk through a stack example of exactly what's going on when we call factorial with a 3.

109
00:07:15.930 --> 00:07:20.460
We could do a four or five or six if we did that we'd be here all day drawing stuff on the stack because

110
00:07:20.460 --> 00:07:22.930
of the recursion threes an easy number.

111
00:07:22.930 --> 00:07:28.290
It will be pretty easy to do in a stack and it will take so long that you'll understand exactly what's

112
00:07:28.290 --> 00:07:31.500
happening and whether he's three or four or five we'll understand.

113
00:07:31.560 --> 00:07:31.930
OK.

114
00:07:32.010 --> 00:07:33.340
So let's do that now.

115
00:07:34.540 --> 00:07:34.900
OK.

116
00:07:34.950 --> 00:07:42.150
So here's my stack and my main is on the stack and all man is doing is it's outputting the result of

117
00:07:42.150 --> 00:07:43.890
factorial with the three.

118
00:07:44.040 --> 00:07:49.530
So I'm just going to use fact rather than write out the entire word factorial so Maine is calling factorial

119
00:07:49.530 --> 00:07:50.670
with a three.

120
00:07:50.730 --> 00:07:53.910
And the result he gets back it's going to output right.

121
00:07:53.970 --> 00:07:55.580
OK so that's simple enough.

122
00:07:55.590 --> 00:07:56.420
So what happens.

123
00:07:56.430 --> 00:07:59.670
Well Maine calls that function factorial.

124
00:07:59.670 --> 00:08:00.220
Right.

125
00:08:00.240 --> 00:08:05.760
So we're going to activate that function and we'll put it on the stack so main is going to call factorial

126
00:08:06.310 --> 00:08:07.160
with the three.

127
00:08:07.160 --> 00:08:12.100
So here's the activation record for factorial from this call right here from Maine.

128
00:08:12.150 --> 00:08:16.020
Notice the factorial function right here has one local variable.

129
00:08:16.030 --> 00:08:20.790
And so we need to allocate storage for it and let's say that that's And right here.

130
00:08:21.060 --> 00:08:22.270
And what's the value for.

131
00:08:22.290 --> 00:08:25.770
Well in this case it's three right and passing three into this function.

132
00:08:25.770 --> 00:08:30.300
So end is going to get a 3 and I'm going to write the code right here in the stack.

133
00:08:30.300 --> 00:08:31.830
The code doesn't exist on the stack.

134
00:08:31.830 --> 00:08:32.910
It exists somewhere else.

135
00:08:32.910 --> 00:08:35.160
But here you'll be able to follow it easier I think.

136
00:08:35.160 --> 00:08:38.880
So what do we do we start executing the code is equal to zero.

137
00:08:39.300 --> 00:08:40.780
No and is equal to three.

138
00:08:41.010 --> 00:08:41.990
So what do I do.

139
00:08:42.000 --> 00:08:51.990
I return I'm going to shoot right in which is three times factorial of and minus one well three minus

140
00:08:51.990 --> 00:08:53.460
one is two.

141
00:08:53.970 --> 00:08:56.210
So we need to call that function.

142
00:08:56.220 --> 00:08:57.860
So what do we do again.

143
00:08:57.900 --> 00:09:00.940
We transfer control to the other function.

144
00:09:01.170 --> 00:09:02.170
What other function is it.

145
00:09:02.170 --> 00:09:04.590
It's the same one we're just calling it recursively.

146
00:09:04.620 --> 00:09:12.850
So in this case what am I doing I'm calling factorial with two factorial has an N.

147
00:09:12.880 --> 00:09:16.380
So we need to allocate storage for an end it's just another activation record.

148
00:09:16.450 --> 00:09:21.060
In this case it is to let's start executing is equal to zero.

149
00:09:21.070 --> 00:09:21.600
No.

150
00:09:21.700 --> 00:09:30.640
So I want to return N which is two times factorial of and minus one will to minus 1 is 1.

151
00:09:30.730 --> 00:09:33.090
So I'm going to do that.

152
00:09:33.280 --> 00:09:34.640
Now notice what just happened.

153
00:09:34.660 --> 00:09:38.780
I've got two activation records on the stack for the same function.

154
00:09:38.800 --> 00:09:42.020
That's the definition of recursion.

155
00:09:42.170 --> 00:09:43.350
All right so now what are we going to.

156
00:09:43.340 --> 00:09:47.420
We're going to call factorial with a 1

157
00:09:50.310 --> 00:09:52.380
and you can see the stack just growing right.

158
00:09:52.380 --> 00:09:54.880
Well factorials the same function it's got an n.

159
00:09:55.010 --> 00:09:59.600
In this case I'm calling it the one I'm passing the end by value so there's the one.

160
00:09:59.670 --> 00:10:01.680
And what does it do is any call to zero.

161
00:10:01.680 --> 00:10:02.380
No.

162
00:10:02.400 --> 00:10:10.800
So it's going to return N which is 1 times factorial of and minus 1 which in this case is zero.

163
00:10:10.800 --> 00:10:11.590
So what do I do.

164
00:10:11.590 --> 00:10:14.560
Again I stop and I call factorial again.

165
00:10:14.700 --> 00:10:16.160
In this case with zero.

166
00:10:16.200 --> 00:10:18.120
So let's do that.

167
00:10:18.170 --> 00:10:21.690
Here we're going to call factorial with zero

168
00:10:24.360 --> 00:10:26.400
and gets zero.

169
00:10:26.400 --> 00:10:27.350
Now we're here.

170
00:10:27.390 --> 00:10:28.410
This is the base case.

171
00:10:28.410 --> 00:10:31.280
Finally we're going to start unwinding is equal to zero.

172
00:10:31.290 --> 00:10:31.800
Yes.

173
00:10:31.800 --> 00:10:32.760
So what do I do.

174
00:10:32.770 --> 00:10:35.610
I return 1 return 1 to who.

175
00:10:35.610 --> 00:10:36.670
To whoever called me.

176
00:10:36.840 --> 00:10:38.900
Well here's the call right here.

177
00:10:38.910 --> 00:10:41.790
So the value of that call will be 1.

178
00:10:41.910 --> 00:10:42.740
OK.

179
00:10:42.840 --> 00:10:45.650
And now what we do is we start unwinding.

180
00:10:45.780 --> 00:10:48.130
So this gets popped off the stack

181
00:10:50.860 --> 00:10:52.130
it now we're here.

182
00:10:52.520 --> 00:10:54.530
Well this guy can now return as well right.

183
00:10:54.680 --> 00:10:56.330
So it's going to return what it's going to return.

184
00:10:56.340 --> 00:11:02.170
One times one one time one to two this guy right here.

185
00:11:02.270 --> 00:11:07.180
So one times one is one and we're going to pop off the stack.

186
00:11:07.490 --> 00:11:09.660
So this function now is gone.

187
00:11:09.920 --> 00:11:12.190
That activation record gets cleaned up.

188
00:11:13.760 --> 00:11:15.990
And we're here right.

189
00:11:16.030 --> 00:11:17.340
So hopefully everybody's with me.

190
00:11:17.340 --> 00:11:18.280
It's pretty straightforward.

191
00:11:18.280 --> 00:11:20.880
It's just a matter of keeping all your ducks in a row.

192
00:11:20.920 --> 00:11:27.370
So here we're going to return to times one which is to who to this function call that's devaluate that

193
00:11:27.370 --> 00:11:28.010
function call.

194
00:11:28.000 --> 00:11:29.180
That's the two.

195
00:11:29.710 --> 00:11:35.710
And again we're going to clean up the stack it gets popped off an activation record always.

196
00:11:35.980 --> 00:11:38.970
All those areas in the stack that we allocated are gone.

197
00:11:38.980 --> 00:11:45.310
So now we're here finally we can calculate this result which is three times two which is six.

198
00:11:45.350 --> 00:11:49.470
So we're going to return six to who this guy is the one that called me.

199
00:11:49.550 --> 00:11:50.930
That's a six right there right.

200
00:11:50.930 --> 00:11:54.620
The value of that function call is a six.

201
00:11:54.620 --> 00:11:55.650
What are we going to do now.

202
00:11:55.670 --> 00:11:57.040
Pop off the stack.

203
00:11:57.040 --> 00:11:57.780
We're cleaning up.

204
00:11:57.780 --> 00:12:02.270
Finally you see that's that's called unwinding from a recursive call.

205
00:12:02.330 --> 00:12:05.230
So we're here now we've got six.

206
00:12:05.240 --> 00:12:07.930
And what do we do with the six.

207
00:12:08.130 --> 00:12:15.150
We put it and that's the final result of the call to factorial with a three as you can see it's pretty

208
00:12:15.150 --> 00:12:16.200
straightforward.

209
00:12:16.200 --> 00:12:23.610
It's a matter of your recursive calls get pushed on the stack and then you start unwinding the unwinding

210
00:12:23.610 --> 00:12:24.900
is starting right there.

211
00:12:24.900 --> 00:12:27.300
That's the critical piece that base case.

212
00:12:27.300 --> 00:12:32.850
If you forget that base case or get it wrong then this would just keep going and going and eventually

213
00:12:32.850 --> 00:12:35.900
you're going to run out of stack space and get a stack overflow error.

214
00:12:36.000 --> 00:12:36.590
OK.

215
00:12:36.600 --> 00:12:37.950
So there you go.

216
00:12:37.980 --> 00:12:43.500
Obviously if you remember the Fibonacci function it's more complicated than this.

217
00:12:43.500 --> 00:12:53.120
Right because I mean when we go back to us you can see the Fibonacci function which was right here has

218
00:12:53.240 --> 00:12:54.830
two pieces of recursion right.

219
00:12:54.880 --> 00:12:59.780
So we're going to have to call recursive functions calling itself obviously but it's calling it twice

220
00:12:59.960 --> 00:13:01.230
per call.

221
00:13:01.250 --> 00:13:04.320
So the amount of stack space that's used is larger.

222
00:13:04.430 --> 00:13:09.390
That's why Fibonacci takes longer than factorial to execute especially with very large numbers.

223
00:13:09.560 --> 00:13:09.980
OK.

224
00:13:09.980 --> 00:13:15.410
So hopefully this diagram helps recursion makes a lot of sense once you understand what's really going

225
00:13:15.410 --> 00:13:16.420
on on the stack.

226
00:13:16.430 --> 00:13:18.250
I think it totally makes sense.
