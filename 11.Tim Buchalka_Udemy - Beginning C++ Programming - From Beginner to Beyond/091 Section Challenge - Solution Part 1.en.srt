1
00:00:05,500 --> 00:00:06,790
Hello welcome back.

2
00:00:06,790 --> 00:00:11,290
I hope you enjoyed the challenge and I hope it was successful in this video.

3
00:00:11,290 --> 00:00:14,730
I'd like to go over that challenge and give you one solution to it.

4
00:00:14,920 --> 00:00:20,070
So I'm in the section 9 workspace the challenge solution project.

5
00:00:20,290 --> 00:00:24,400
In your case you're going to have this solution already but we'll work through it together here.

6
00:00:24,400 --> 00:00:25,800
So let's say where are we.

7
00:00:25,840 --> 00:00:28,350
Well we need some sort of data structure.

8
00:00:28,360 --> 00:00:29,160
We need a list.

9
00:00:29,170 --> 00:00:33,430
We need a collection that the user type integers and we can store it into right.

10
00:00:33,550 --> 00:00:37,270
So in this case we're going to use a vector It's the only one we know right now and it's a really easy

11
00:00:37,270 --> 00:00:38,680
and logical one to use.

12
00:00:38,680 --> 00:00:41,940
So in order to use a vector we need to include vector.

13
00:00:42,180 --> 00:00:43,790
I'll do that right now.

14
00:00:44,380 --> 00:00:49,340
And obviously we need to declare a vector that's going to hold the numbers and we also need to declare

15
00:00:49,360 --> 00:00:50,430
character.

16
00:00:50,530 --> 00:00:53,680
That's where we're going to store whatever they typed on the keyboard.

17
00:00:53,710 --> 00:00:55,430
So let's declare those two variables.

18
00:00:55,450 --> 00:00:58,950
Right now we could call this vector whatever we like.

19
00:00:58,960 --> 00:01:04,810
I'll just call it vector member it's a vector of integers and I'll call it numbers could call it data

20
00:01:04,840 --> 00:01:07,800
you can call it whatever you like and I'm initializing it to empty.

21
00:01:08,020 --> 00:01:12,860
And then I've got a character which I call selection and I'll also initialize that empty.

22
00:01:12,910 --> 00:01:16,330
What we're gonna do is we're going to read the user's choice into that variable.

23
00:01:16,840 --> 00:01:19,270
Ok so where are we now.

24
00:01:19,360 --> 00:01:22,530
Remember what we're going to do is we're going to display the menu to the user.

25
00:01:22,630 --> 00:01:28,330
We're going to ask them for choice depending on what they choose we'll do something or other and then

26
00:01:28,330 --> 00:01:34,170
at the end of this do we want to keep looping while they haven't pressed Q Right either uppercase lowercase.

27
00:01:34,300 --> 00:01:35,800
So let's write that logic first.

28
00:01:35,800 --> 00:01:37,500
Let's start with baby steps.

29
00:01:37,510 --> 00:01:47,950
Here's the DO loop and then we want to do while the selection is not equal to.

30
00:01:48,010 --> 00:01:51,680
Remember in this case they can type in an upper case or lowercase Q Right.

31
00:01:51,790 --> 00:01:57,370
So while it's not equal to a lowercase Q And again those are characters I make sure they're single quotes

32
00:01:57,370 --> 00:02:03,500
not double quotes and the selection is not equal to an upper case Q.

33
00:02:04,130 --> 00:02:07,520
There's a semi-colon here at the end of this while loop right there.

34
00:02:07,540 --> 00:02:08,670
Do while loop.

35
00:02:09,220 --> 00:02:10,920
That should take care of our logic now.

36
00:02:10,960 --> 00:02:16,360
What we want to do in here is we want to display that menu right right away and that's the first thing

37
00:02:16,360 --> 00:02:18,800
we want to do unconditionally.

38
00:02:18,880 --> 00:02:23,650
So what I'm going to do is I'm going to copy and paste my menu code right here which is just a bunch

39
00:02:23,650 --> 00:02:25,810
of output statements.

40
00:02:25,810 --> 00:02:29,330
And we're reading the selections so we can test this right now.

41
00:02:29,350 --> 00:02:33,440
We're going to display print the number at number and all the menu choices that you saw in the demo

42
00:02:34,120 --> 00:02:38,230
and then we're going to ask them tend toward choice and we're going to read that choice into selection

43
00:02:38,230 --> 00:02:40,710
which is that character variable right here.

44
00:02:40,720 --> 00:02:42,220
So what do I expect here.

45
00:02:42,220 --> 00:02:48,520
Well I expect that if the user types lower or upper case Q The programable and if they type anything

46
00:02:48,520 --> 00:02:54,010
else we should display the menu again and again and again asking for and to another choice.

47
00:02:54,010 --> 00:02:54,250
All right.

48
00:02:54,250 --> 00:02:56,880
So let's try that will build and run.

49
00:02:57,970 --> 00:03:01,590
And there's the menu numbers out of numbers display number and so forth.

50
00:03:01,810 --> 00:03:11,870
So let's say we enter P we get the menu again uppercase the same thing a 1 3 5 It doesn't matter anything.

51
00:03:12,130 --> 00:03:15,460
Now what we're really interested in is we want the program to quit.

52
00:03:15,460 --> 00:03:22,480
When I pressed both Q's upper and lower someone to press lowercase Q program stops perfect I'm going

53
00:03:22,480 --> 00:03:27,340
to test this again with an uppercase Q program stops again.

54
00:03:27,340 --> 00:03:28,170
Perfect.

55
00:03:28,210 --> 00:03:34,820
Make sure you test both of them because a lot of times I've seen typos like this and of the tests with

56
00:03:34,820 --> 00:03:36,520
the lowercase Q And it quits correctly.

57
00:03:36,520 --> 00:03:38,170
But then the uppercase doesn't work.

58
00:03:38,200 --> 00:03:41,760
So make sure that you test everything really well.

59
00:03:41,890 --> 00:03:43,890
Now this is where we're at right here.

60
00:03:43,900 --> 00:03:47,230
We know the user has selected something right.

61
00:03:47,320 --> 00:03:48,510
So what do we need here.

62
00:03:48,580 --> 00:03:50,200
But we need some selection logic.

63
00:03:50,230 --> 00:03:54,010
We need to say well if you picked P I want to do some stuff.

64
00:03:54,100 --> 00:03:57,810
If you pick a I want to do something else we have a choice.

65
00:03:57,970 --> 00:04:03,670
We could use a switch statement really easily because these are going to be character literals.

66
00:04:03,670 --> 00:04:10,750
This is a character so I could do a switch off of selection and they say case p p has case a case M

67
00:04:10,750 --> 00:04:14,890
and M M but I mean uppercase lowercase and that'll be fine.

68
00:04:15,130 --> 00:04:20,800
What I'm going to do is I'm going to use an if else if latter because it's usually what you'll see out

69
00:04:20,800 --> 00:04:23,590
there and this kind of example over the case statement.

70
00:04:23,770 --> 00:04:26,460
OK so let's try that first thing.

71
00:04:26,460 --> 00:04:28,060
Let's deal with the print.

72
00:04:28,330 --> 00:04:31,090
So we've got the selection here.

73
00:04:31,090 --> 00:04:42,400
So here I want to say if the selection is equal to let's say an uppercase P or the selection is equal

74
00:04:42,400 --> 00:04:50,240
to a lowercase P and I'm going to do a block statement here because I'm going to write some extra code

75
00:04:50,240 --> 00:04:52,430
here so that's where we're at.

76
00:04:52,430 --> 00:04:57,360
If the user types of P whether it's upper or lower case we're going to execute this code right here.

77
00:04:57,500 --> 00:05:00,970
Well what does this code say print all the numbers in the list.

78
00:05:00,980 --> 00:05:03,680
What's my list numbers right here.

79
00:05:03,680 --> 00:05:07,130
What's the best way to do that range based for loop no question.

80
00:05:07,120 --> 00:05:11,140
Really really easy is one thing we need to take care of though.

81
00:05:11,270 --> 00:05:16,370
If that list is empty we need to tell the user list is empty.

82
00:05:16,580 --> 00:05:19,210
We can do that now or we can do it or else statement.

83
00:05:19,220 --> 00:05:20,510
I'm going to do it right now.

84
00:05:20,530 --> 00:05:22,890
Someone to say member indent right here.

85
00:05:22,910 --> 00:05:30,580
Want to say if numbers is the vector dot size is the method that returns the size.

86
00:05:30,920 --> 00:05:34,520
If that returns is zero what's going on.

87
00:05:34,520 --> 00:05:40,660
The list is empty right so I'm just going to say seek out and again indent under the if C out.

88
00:05:40,760 --> 00:05:45,320
The two square brackets with nothing in it and then I'll just say the list is empty

89
00:05:48,090 --> 00:05:52,010
and line and that's the if part.

90
00:05:52,010 --> 00:05:56,490
Now what about the else part the else part is going to have a few more statements and this is soon to

91
00:05:56,510 --> 00:05:56,740
say.

92
00:05:56,750 --> 00:06:00,480
Else and then again a block statement here.

93
00:06:00,660 --> 00:06:07,000
I could have said if numbers that size is not equal to zero and then put this code appear and then the

94
00:06:07,020 --> 00:06:13,840
L sort of in the empty part both ways are absolutely perfectly logical and they're both correct.

95
00:06:13,840 --> 00:06:15,540
So but in this case right now I'm here.

96
00:06:15,540 --> 00:06:17,240
So when am I in here.

97
00:06:17,310 --> 00:06:20,490
I'm in here when the size is not equal to zero.

98
00:06:20,490 --> 00:06:23,480
In other words there is stuff in that vector.

99
00:06:23,550 --> 00:06:25,290
So what I want to do now is printed out.

100
00:06:25,290 --> 00:06:26,070
I want to pretend I don't.

101
00:06:26,070 --> 00:06:27,770
A nice way with those brackets.

102
00:06:27,780 --> 00:06:36,060
I'm just going to say C out and I'm going to print out that left bracket followed by space no and line

103
00:06:36,060 --> 00:06:44,130
because I want to print the numbers right next to it and then I want to close it off with and bracket.

104
00:06:44,130 --> 00:06:48,780
Now what I want to do here in the middle is print out those numbers one after the other with a space

105
00:06:48,780 --> 00:06:49,580
between them.

106
00:06:49,830 --> 00:06:50,610
How do I do that.

107
00:06:50,610 --> 00:06:51,880
What's the best way to do that.

108
00:06:51,890 --> 00:06:53,290
A range based for loop.

109
00:06:53,370 --> 00:06:57,350
So let's do that for auto.

110
00:06:57,350 --> 00:07:00,900
I'll call the variable name and the collection is numbers

111
00:07:04,440 --> 00:07:06,290
and what do I do for each one of those.

112
00:07:06,330 --> 00:07:07,430
Display it.

113
00:07:07,470 --> 00:07:10,220
See out number.

114
00:07:10,470 --> 00:07:11,910
Followed by a space

115
00:07:16,230 --> 00:07:17,440
that should do it.

116
00:07:17,680 --> 00:07:19,170
OK now right here.

117
00:07:19,170 --> 00:07:24,630
I definitely want to do an end line that will take me to the next line.

118
00:07:24,630 --> 00:07:31,340
Now let me clean this up so we can see the structure a little better and get rid of this space as well.

119
00:07:31,380 --> 00:07:36,870
So look what's going on here we entered a selection the selection is piece of the user wants to print

120
00:07:36,870 --> 00:07:38,490
out all those elements.

121
00:07:38,550 --> 00:07:43,380
We know that there is either nothing in the list in which case we do this.

122
00:07:43,380 --> 00:07:45,440
Otherwise we print out all the numbers in the list.

123
00:07:45,450 --> 00:07:49,500
Right now the list is empty the first time I do this because I haven't been able to add anything right

124
00:07:49,800 --> 00:07:56,030
so will run it and when I select P It should say list is empty.

125
00:07:56,050 --> 00:07:56,680
There it is.

126
00:07:56,680 --> 00:07:57,510
The list is empty.

127
00:07:57,510 --> 00:07:59,250
Then I get the menu again that's important.

128
00:07:59,380 --> 00:08:00,710
I'm going to quit.

129
00:08:01,290 --> 00:08:02,880
Now let's test this with a list.

130
00:08:02,880 --> 00:08:07,200
It's not empty what we'll do is we'll just come right up here and just put some stuff in there.

131
00:08:07,240 --> 00:08:09,680
One two three four.

132
00:08:09,700 --> 00:08:17,440
The list is definitely not empty now so we're run this and we expect to get one two three four right

133
00:08:17,440 --> 00:08:18,560
in the brackets perfect.

134
00:08:18,600 --> 00:08:25,780
So it looks like our print is done quit and we'll move on to the next one.

135
00:08:25,960 --> 00:08:31,580
Now we're here it wasn't pee it's assumed that it wasn't right.

136
00:08:31,740 --> 00:08:35,110
So what we'll do is we'll create the else if latter here.

137
00:08:35,130 --> 00:08:52,230
So I say else if the selection is an upper case or the selection is a lowercase k then we want to worry

138
00:08:52,230 --> 00:08:54,300
about adding something to the list.

139
00:08:54,300 --> 00:08:57,080
Right so I've got my block statement here.

140
00:08:57,180 --> 00:08:58,140
So what do I do here.

141
00:08:58,140 --> 00:09:02,870
Well I need to ask the user to enter a number and then add it to my vector.

142
00:09:03,390 --> 00:09:07,810
So I need a variable it let's call it nothing to add.

143
00:09:07,950 --> 00:09:12,620
That's what we're going to read the number into We'll initialize it to zero.

144
00:09:12,960 --> 00:09:15,890
It will say will output to the user.

145
00:09:16,160 --> 00:09:17,850
Enter an integer.

146
00:09:18,150 --> 00:09:20,250
To add to the list.

147
00:09:20,850 --> 00:09:30,360
Something like that and what we'll do is we'll read it into number two and so now we've got the number

148
00:09:30,360 --> 00:09:31,410
that we want to add.

149
00:09:31,440 --> 00:09:34,680
What do we want to add it to the vector numbers.

150
00:09:34,710 --> 00:09:36,010
How do you do that.

151
00:09:36,070 --> 00:09:40,050
Numbers don't push back.

152
00:09:40,330 --> 00:09:46,290
Right we're going to push it to the back of the vector and we're going to push no to add just like that.

153
00:09:47,400 --> 00:09:49,490
And then we're going to tell the user we've added their number.

154
00:09:49,500 --> 00:10:00,510
So I'll just say something the C out need to add let's say just simple added and we'll put an end line

155
00:10:00,510 --> 00:10:03,910
here that looks pretty good.

156
00:10:03,910 --> 00:10:05,720
We can test that out as well.

157
00:10:05,720 --> 00:10:09,980
What I'll do is I'll come up here and I'll initialize that vector again to empty we'll get rid of that

158
00:10:09,980 --> 00:10:13,530
test right there.

159
00:10:13,710 --> 00:10:20,030
So there we go the vectors empty again we run this.

160
00:10:20,150 --> 00:10:24,580
And let's add We'll press a Antron interest to add to the list.

161
00:10:24,580 --> 00:10:26,720
Perfect we'll type in an integer 10.

162
00:10:26,750 --> 00:10:32,140
We're reading that into Lumb to add now and pushing it to the back of the vector.

163
00:10:32,150 --> 00:10:34,220
It says here 10 added.

164
00:10:34,280 --> 00:10:40,400
Now if we print the numbers again with the p option we should see a list with attendant awesome.

165
00:10:40,440 --> 00:10:41,510
That's exactly what we have.

166
00:10:41,500 --> 00:10:46,360
Let's add a 20 and we'll print it again.

167
00:10:47,030 --> 00:10:49,240
Now we've got a 10 and a 20.

168
00:10:49,340 --> 00:10:51,330
Exactly what we expected.

169
00:10:51,950 --> 00:10:52,270
OK.

170
00:10:52,280 --> 00:10:53,510
Well Press Q to quit.

171
00:10:53,510 --> 00:10:56,450
So we're working our way down these these options here.

172
00:10:56,480 --> 00:10:59,410
The next one would be m to display the mean.

173
00:10:59,540 --> 00:11:03,200
So let's do that again we'll see else we're that's that.

174
00:11:03,200 --> 00:11:03,740
Else if.

175
00:11:03,740 --> 00:11:13,790
Else ladder else if the selection is equal to a capital M character or the selection is equal to the

176
00:11:13,860 --> 00:11:19,100
lowercase and character in this case I want a block statement and then here's where we're going to calculate

177
00:11:19,100 --> 00:11:20,400
the mean.

178
00:11:20,660 --> 00:11:21,860
Just like we did before.

179
00:11:21,860 --> 00:11:25,430
In some of the other examples that we've done how do you calculate the mean.

180
00:11:25,640 --> 00:11:28,250
Well we need a running total right.

181
00:11:28,280 --> 00:11:31,450
We add them all up and we divide by the size of how many elements are there.

182
00:11:31,700 --> 00:11:34,540
But we need to be careful of one thing.

183
00:11:34,670 --> 00:11:38,690
We have to be sure that the vector is not empty right.

184
00:11:38,870 --> 00:11:40,440
So we'll do this test again.

185
00:11:40,460 --> 00:11:42,140
We'll say if numbers

186
00:11:45,680 --> 00:11:54,480
dot size is equal to zero will simply say See out and we could do this in a block statement but I'll

187
00:11:54,480 --> 00:11:56,220
just use a single statement.

188
00:11:56,430 --> 00:12:02,540
Was it unable to calculate I mean no data or something like that.

189
00:12:06,230 --> 00:12:07,900
And we'll finish it off with an end line.

190
00:12:07,920 --> 00:12:11,580
Now we've got our L statement in a block who's in need.

191
00:12:11,580 --> 00:12:13,960
We need to do more than one thing here.

192
00:12:13,980 --> 00:12:18,280
So now the only time we're ever going to be in here is if there is data right.

193
00:12:18,290 --> 00:12:20,960
There's stuff in the vector or integers in there.

194
00:12:21,000 --> 00:12:23,340
So what do we do we need to calculate.

195
00:12:23,370 --> 00:12:24,180
Adam all up.

196
00:12:24,240 --> 00:12:28,460
So let's create a variable called Total and it's an integer.

197
00:12:29,720 --> 00:12:31,060
And now what do we do we loop.

198
00:12:31,070 --> 00:12:34,870
So we loop through that vector again and we total up all the numbers.

199
00:12:34,910 --> 00:12:36,980
So let's use another range based for that.

200
00:12:36,980 --> 00:12:44,430
That's perfect for the situation that say numb and the collection again is numbers.

201
00:12:44,660 --> 00:12:46,250
And what do we do with each iteration.

202
00:12:46,250 --> 00:12:53,290
We just say total equals total plus that number perfect.

203
00:12:53,290 --> 00:12:55,730
Now we're out of that loop.

204
00:12:55,960 --> 00:12:56,890
Don't indent here.

205
00:12:56,890 --> 00:13:03,010
We're going here because we don't have a block statement there and now we just simply say see out the

206
00:13:03,790 --> 00:13:04,870
mean.

207
00:13:04,870 --> 00:13:05,620
Clean that up.

208
00:13:05,620 --> 00:13:12,180
The mean is and what we can do here is we can actually do the calculation right in mine.

209
00:13:12,250 --> 00:13:23,110
We could just say total divided by numbers that size which is the amount of data in that vector and

210
00:13:23,110 --> 00:13:23,330
line

211
00:13:26,200 --> 00:13:27,100
OK.

212
00:13:27,200 --> 00:13:30,920
Now that's almost correct but it's not quite correct there's a little error here.

213
00:13:31,160 --> 00:13:36,500
And if you remember what it is we've got an integer total being divided by an integer size so we're

214
00:13:36,500 --> 00:13:38,210
going to do integer division here.

215
00:13:38,240 --> 00:13:41,070
So this is where a good test case comes in handy.

216
00:13:41,090 --> 00:13:52,600
Let's run this and let's type in let's add a one and we'll add a to it's print or list 1 and 2.

217
00:13:53,010 --> 00:13:55,420
That's take to mean we expect 1.5.

218
00:13:55,490 --> 00:13:57,080
We get a 1.

219
00:13:57,290 --> 00:14:00,730
That's because we're doing integer division instead of double division.

220
00:14:00,860 --> 00:14:03,890
So we quit here.

221
00:14:03,890 --> 00:14:08,490
We need to provide a static cast here of one of these two guys that would just do this.

222
00:14:08,510 --> 00:14:20,230
So we'll stay static underscore cast to a double and of total that's it.

223
00:14:20,240 --> 00:14:21,500
We'll run this again.

224
00:14:23,980 --> 00:14:25,770
It's or number one.

225
00:14:26,140 --> 00:14:30,940
Let's add another number to print them out make sure we have the one of the two in there.

226
00:14:31,020 --> 00:14:31,880
Yes we do.

227
00:14:32,040 --> 00:14:35,160
Let's take the mean now we expect 1.5.

228
00:14:35,160 --> 00:14:38,280
Now we've got 1.5.

229
00:14:38,300 --> 00:14:42,510
OK so the two pieces left are smallest and largest and this video is getting a little long.

230
00:14:42,520 --> 00:14:46,860
Someone to stop this here and I'll join you in the next video where we'll do the last few pieces.
